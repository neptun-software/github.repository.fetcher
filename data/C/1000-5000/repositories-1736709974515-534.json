{
  "metadata": {
    "timestamp": 1736709974515,
    "page": 534,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bb-qq/r8152",
      "stars": 2266,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0458984375,
          "content": "# autogen\nSynoBuildConf/depends\nconf/privilege\n"
        },
        {
          "name": "50-usb-realtek-net.rules",
          "type": "blob",
          "size": 3.7353515625,
          "content": "# This is used to change the default configuration of Realtek USB ethernet adapters\n\nACTION!=\"add\", GOTO=\"usb_realtek_net_end\"\nSUBSYSTEM!=\"usb\", GOTO=\"usb_realtek_net_end\"\nENV{DEVTYPE}!=\"usb_device\", GOTO=\"usb_realtek_net_end\"\n\n# Modify this to change the default value\nENV{REALTEK_MODE1}=\"1\"\nENV{REALTEK_MODE2}=\"3\"\n\n# Realtek\nATTR{idVendor}==\"0bda\", ATTR{idProduct}==\"815[2,3,5,6,7]\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"0bda\", ATTR{idProduct}==\"8053\", ATTR{bcdDevice}==\"e???\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE2}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE2}\"\n\n# Samsung\nATTR{idVendor}==\"04e8\", ATTR{idProduct}==\"a101\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\n\n# Lenovo\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"304f\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"3052\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"3054\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"3057\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"3062\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"3069\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"3082\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"3098\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"7205\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"720a\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"720b\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"720c\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"7214\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"721e\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"8153\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"a359\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\nATTR{idVendor}==\"17ef\", ATTR{idProduct}==\"a387\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\n\n# TP-LINK\nATTR{idVendor}==\"2357\", ATTR{idProduct}==\"0601\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\n\n# Nvidia\nATTR{idVendor}==\"0955\", ATTR{idProduct}==\"09ff\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\n\n# LINKSYS\nATTR{idVendor}==\"13b1\", ATTR{idProduct}==\"0041\", ATTR{bConfigurationValue}!=\"$env{REALTEK_MODE1}\", ATTR{bConfigurationValue}=\"$env{REALTEK_MODE1}\"\n\nLABEL=\"usb_realtek_net_end\"\n"
        },
        {
          "name": "51-usb-r8152-net.rules",
          "type": "blob",
          "size": 0.3037109375,
          "content": "SUBSYSTEM!=\"net\", GOTO=\"usb_r8152_net_end\"\nENV{PHYSDEVDRIVER}!=\"r8152\", GOTO=\"usb_r8152_net_end\"\n\nACTION==\"add\",    RUN=\"/var/packages/r8152/scripts/start-stop-status reload $env{INTERFACE}\"\nACTION==\"remove\", RUN=\"/var/packages/r8152/scripts/start-stop-status remove $env{INTERFACE}\"\n\nLABEL=\"usb_r8152_net_end\"\n"
        },
        {
          "name": "INFO.sh",
          "type": "blob",
          "size": 0.974609375,
          "content": "#!/bin/bash\n# Copyright (c) 2000-2017 Synology Inc. All rights reserved.\n\nsource /pkgscripts-ng/include/pkg_util.sh\n\npackage=\"r8152\"\nversion=\"2.19.2-1\"\ndisplayname=\"RTL8152/RTL8153 driver\"\nmaintainer=\"bb-qq\"\narch=\"$(pkg_get_platform)\"\ninstall_type=\"package\"\nthirdparty=\"yes\"\n\n[ \"$(caller)\" != \"0 NULL\" ] && return 0\n\nPRODUCT_VERSION_WITHOUT_MICRO=`echo ${PRODUCT_VERSION} | sed -E 's/^([0-9]+\\.[0-9]+).+$/\\1/'`\nif [ 1 -eq $(echo \"${PRODUCT_VERSION_WITHOUT_MICRO} >= 7.0\" | bc) ]; then\n    os_min_ver=\"7.0-40000\"\n    RUN_AS=\"package\"\n    INSTRUCTION=' [DSM7 note] If this is the first time you are installing this driver, special steps are required. See the readme for details.'\nelse\n    RUN_AS=\"root\"\nfi\n\ncat <<EOS > `dirname $0`/conf/privilege\n{\n    \"defaults\": {\n        \"run-as\": \"${RUN_AS}\"\n    }\n}\nEOS\n\ncat <<EOS > `dirname $0`/SynoBuildConf/depends\n[default]\nall=\"${PRODUCT_VERSION}\"\nEOS\n\ndescription=\"Realtek RTL8152/RTL8153 Based USB Ethernet Adapters driver.${INSTRUCTION}\"\n\npkg_dump_info\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.84375,
          "content": "#\n#\n#\n\nTARGET := r8152.ko\nCONFIG_CTAP_SHORT = ON\n\nobj-m\t := r8152.o\n#\tEXTRA_CFLAGS += -DRTL8152_S5_WOL\n#\tEXTRA_CFLAGS += -DRTL8152_DEBUG\nifneq (,$(filter OFF off, $(CONFIG_CTAP_SHORT)))\n\tEXTRA_CFLAGS += -DCONFIG_CTAP_SHORT_OFF\nendif\n\n# ifeq (TRUE, $(shell test $(VERSION) -lt 5 && echo \"TRUE\" || \\\n# \ttest $(VERSION) -eq 5 && test $(PATCHLEVEL) -lt 12 && echo \"TRUE\"))\n\tEXTRA_CFLAGS += -DLINUX_VERSION_MAJOR=$(VERSION)\n\tEXTRA_CFLAGS += -DLINUX_VERSION_PATCHLEVEL=$(PATCHLEVEL)\n\tEXTRA_CFLAGS += -DLINUX_VERSION_SUBLEVEL=$(SUBLEVEL)\n# endif\n\n.PHONY: all\nall: modules spk_su\n\n.PHONY: modules\nmodules: $(TARGET)\n\n$(TARGET):\n\t$(MAKE) -C $(KSRC) M=$(PWD) modules\n\nspk_su: spk_su.c\n\t$(CROSS_COMPILE)cc -std=c99 -o $(@) $(<)\n\n.PHONY: clean\nclean:\n\trm -rf *.o $(TARGET)\n\n.PHONY: install\ninstall: $(TARGET) spk_su\n\tmkdir -p $(DESTDIR)/r8152/\n\tinstall $(^) $(DESTDIR)/r8152/\n"
        },
        {
          "name": "PACKAGE_ICON.PNG",
          "type": "blob",
          "size": 39.8759765625,
          "content": null
        },
        {
          "name": "PACKAGE_ICON_256.PNG",
          "type": "blob",
          "size": 23.408203125,
          "content": null
        },
        {
          "name": "ReadMe.txt",
          "type": "blob",
          "size": 1.5380859375,
          "content": "- If you want to support S5 WOL, you have to find\n\n\tEXTRA_CFLAGS += -DRTL8152_S5_WOL\n\n  in the Makefile. Then, remove the first character '#\", if it exists.\n\n\n- For Fedora, you may have to run the following command after installing the\n  driver.\n\n\t# dracut -f\n\n- For Ubuntu, you may have to run the following command after installing the\n  driver.\n\n\t# sudo depmod -a\n\t# sudo update-initramfs -u\n\n- Example of setting speed\n\n\t2.5G before kernel v4.10\n\t# ethtool -s eth0 autoneg on advertise 0x802f\n\n\t2.5G for kernel v4.10 and later\n\t# ethtool -s eth0 autoneg on advertise 0x80000000002f\n\n\t5G for kernel v4.10 and later (Couldn't be supported before kernel v4.10)\n\t# ethtool -s eth0 autoneg on advertise 0x180000000002f\n\n\t# ethtool -s eth0 autoneg on advertise 0x002f (1G)\n\t# ethtool -s eth0 autoneg on advertise 0x000f (100M full)\n\t# ethtool -s eth0 autoneg on advertise 0x0003 (10M full)\n\n- Disable center tap short\n\n\t# make CONFIG_CTAP_SHORT=OFF modules\n\n- Ring parameter\n\n\tShow Ring parameter\n\t# ethtool -g eth0\n\n\tChanges the number of ring entries for the Rx ring.\n\t# ethtool -G eth0 rx 100\n\n- Tunable parameters\n\n\tGet the current rx copybreak value in bytes.\n\t# ethtool --get-tunable eth0 rx-copybreak\n\n\tSet the rx copybreak value in bytes.\n\t# ethtool --set-tunable eth0 rx-copybreak 256\n\n- Flow control\n\n\tQueries the specified Ethernet device for pause parameter information.\n\t# ethtool -a eth0\n\n\tChanges the pause parameters of the specified Ethernet device.\n\t# ethtool -A eth0 rx off tx off (Disable flow control)\n\t# ethtool -A eth0 rx on tx off (Enable flow control)\n"
        },
        {
          "name": "SynoBuildConf",
          "type": "tree",
          "content": null
        },
        {
          "name": "compatibility.h",
          "type": "blob",
          "size": 24.7822265625,
          "content": "#ifndef LINUX_COMPATIBILITY_H\n#define LINUX_COMPATIBILITY_H\n\n/*\n * Definition and macro\n */\n\n#include <linux/init.h>\n#include <linux/version.h>\n#include <linux/in.h>\n#include <linux/acpi.h>\n// FIXME: Some platform do not have asm/acpi.h which is included by acpi/acpi.h\n#ifdef ACPI_TYPE_BUFFER\n#include <acpi/acpi.h>\n#endif\n\n#if defined(RTL8152_S5_WOL) && defined(CONFIG_PM)\n#include <linux/reboot.h>\n#endif /* defined(RTL8152_S5_WOL) && defined(CONFIG_PM) */\n\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,31)\n\t#include <linux/mdio.h>\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,7,0)\n\t#include <uapi/linux/mdio.h>\n#endif /* LINUX_VERSION_CODE >= KERNEL_VERSION(3,7,0) */\n#endif /* LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,31) */\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(6,9,0)\n\t#define ethtool_keee ethtool_eee\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,19,0)\n\t#define TSO_LEGACY_MAX_SIZE\t\t65536\n\t#define netif_napi_add_weight\t\tnetif_napi_add\n\t#define netif_set_tso_max_size\t\tnetif_set_gso_max_size\n\t#define netif_set_tso_max_segs\t\tnetif_set_gso_max_segs\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,17,0)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,15,0)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,12,0)\n\t#define PHY_MAC_INTERRUPT\t\tPHY_IGNORE_INTERRUPT\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,9,0)\n\t#ifdef CONFIG_PM\n\t#define pm_ptr(_ptr) (_ptr)\n\t#else\n\t#define pm_ptr(_ptr) NULL\n\t#endif\n\n\t#define from_tasklet(var, callback_tasklet, tasklet_fieldname)\t\\\n\t\tcontainer_of((struct tasklet_struct *)callback_tasklet, typeof(*var), tasklet_fieldname)\n\n\t#define tasklet_setup(t, fun)\ttasklet_init(t, fun, (unsigned long)t)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,8,0)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,7,0)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,6,0)\n\t/* Iterate through singly-linked GSO fragments of an skb. */\n\t#define skb_list_walk_safe(first, skb, next_skb)                               \\\n\t\tfor ((skb) = (first), (next_skb) = (skb) ? (skb)->next : NULL; (skb);  \\\n\t\t     (skb) = (next_skb), (next_skb) = (skb) ? (skb)->next : NULL)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,4,0)\n\t#ifndef __has_attribute\n\t# define __GCC4_has_attribute___fallthrough__         0\n\t# define __has_attribute(x)         0\n\t#endif\n\n\t#if __has_attribute(__fallthrough__)\n\t# define fallthrough                    __attribute__((__fallthrough__))\n\t#else\n\t# if __has_attribute (__fallthrough__)\n\t#  define fallthrough                    __attribute__((__fallthrough__))\n\t# endif\n\t#endif\n\t\n\t#ifndef fallthrough\n\t# define fallthrough                    do {} while (0)  /* fallthrough */\n\t#endif\n\n\t#define MDIO_EEE_2_5GT\t\t\t0x0001  /* 2.5GT EEE cap */\n\t#define MDIO_EEE_5GT\t\t\t0x0002  /* 5GT EEE cap */\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,2,0)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,1,0)\n\t#define MDIO_AN_10GBT_CTRL_ADV2_5G\t0x0080  /* Advertise 2.5GBASE-T */\n\t#define MDIO_AN_10GBT_CTRL_ADV5G\t0x0100  /* Advertise 5GBASE-T */\n\t#define MDIO_AN_10GBT_STAT_LP2_5G\t0x0020  /* LP is 2.5GBT capable */\n\t#define MDIO_AN_10GBT_STAT_LP5G\t\t0x0040  /* LP is 5GBT capable */\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,0,0)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(4,20,0)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(4,12,0)\n\t#define SPEED_2500\t\t\t\t2500\n\t#define SPEED_5000\t\t\t\t5000\n\t#define SPEED_25000\t\t\t\t25000\n#if LINUX_VERSION_CODE < KERNEL_VERSION(4,10,0)\n\t#ifndef ETHTOOL_LINK_MODE_2500baseT_Full_BIT\n\t#define ETHTOOL_LINK_MODE_2500baseT_Full_BIT\tETHTOOL_LINK_MODE_2500baseX_Full_BIT\n\t#endif\n#if LINUX_VERSION_CODE < KERNEL_VERSION(4,9,0)\n\t#define BMCR_SPEED10\t\t\t\t0x0000\n#if LINUX_VERSION_CODE < KERNEL_VERSION(4,5,0)\n\t#define NETIF_F_CSUM_MASK\t\t\tNETIF_F_ALL_CSUM\n#if LINUX_VERSION_CODE < KERNEL_VERSION(4,1,0)\n\t#define IS_REACHABLE(option)\t\t\t(defined(option) || \\\n\t\t\t\t\t\t\t (defined(option##_MODULE) && defined(MODULE)))\n#if LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0)\n\t#define skb_vlan_tag_present(__skb)\t\tvlan_tx_tag_present(__skb)\n\t#define skb_vlan_tag_get(__skb)\t\t\tvlan_tx_tag_get(__skb)\n\t#define skb_vlan_tag_get_id(__skb)\t\tvlan_tx_tag_get_id(__skb)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,19,0)\n\t#define napi_alloc_skb(napi, length)\t\tnetdev_alloc_skb_ip_align(netdev,length)\n\t#define napi_complete_done(n, d)\t\tnapi_complete(n)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,16,0)\n\t#ifndef smp_mb__before_atomic\n\t#define smp_mb__before_atomic()\t\t\tsmp_mb()\n\t#endif\n\n\t#ifndef smp_mb__after_atomic\n\t#define smp_mb__after_atomic()\t\t\tsmp_mb()\n\t#endif\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,15,0)\n\t#define IS_ERR_OR_NULL(ptr)\t\t\t(!ptr)\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,14,0)\n\t#define ether_addr_copy(dst, src)\t\tmemcpy(dst, src, ETH_ALEN)\n\n\t// Added for old platforms\n\tenum skb_free_reason {\n\t\tSKB_REASON_CONSUMED,\n\t\tSKB_REASON_DROPPED,\n\t};\n\tstatic inline void dev_consume_skb_irq(struct sk_buff *skb)\n\t{\n\t\tdev_kfree_skb_irq(skb);\n\t}\n\tstatic inline void dev_consume_skb_any(struct sk_buff *skb)\n\t{\n\t\tdev_kfree_skb_any(skb);\n\t}\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,13,0)\n\t#define BIT(nr)\t\t\t\t\t(1UL << (nr))\n\t#define BIT_ULL(nr)\t\t\t\t(1ULL << (nr))\n\t#define BITS_PER_BYTE\t\t\t\t8\n\t#define reinit_completion(x)\t\t\t((x)->done = 0)\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,12,0)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,11,0)\n\t#define DEVICE_ATTR_RW(_name) \\\n\t\tstruct device_attribute dev_attr_##_name = __ATTR(_name, 0644, _name##_show, _name##_store)\n\t#define DEVICE_ATTR_RO(_name) \\\n\t\tstruct device_attribute dev_attr_##_name = __ATTR_RO(_name)\n\n\t// Added for old platforms\n\t#ifndef CLASS_ATTR_RW\n\t#define CLASS_ATTR_RW(_name) \\\n\t\tstruct class_attribute class_attr_##_name = __ATTR_RW(_name)\n\t#endif\n\t#ifndef CLASS_ATTR_RO\n\t#define CLASS_ATTR_RO(_name) \\\n\t\tstruct class_attribute class_attr_##_name = __ATTR_RO(_name)\n\t#endif\n\t#define ATTRIBUTE_GROUPS_BACKPORT(_name) \\\n\tstatic struct BP_ATTR_GRP_STRUCT _name##_dev_attrs[ARRAY_SIZE(_name##_attrs)];\\\n\tstatic void init_##_name##_attrs(void)\t\t\t\t\\\n\t{\t\t\t\t\t\t\t\t\t\\\n\t\tint i;\t\t\t\t\t\t\t\t\\\n\t\tfor (i = 0; _name##_attrs[i]; i++)\t\t\t\t\\\n\t\t\t_name##_dev_attrs[i] =\t\t\t\t\\\n\t\t\t\t*container_of(_name##_attrs[i],\t\t\\\n\t\t\t\t\t\tstruct BP_ATTR_GRP_STRUCT,\t\\\n\t\t\t\t\t\tattr);\t\t\t\t\\\n\t}\n\t#ifndef __ATTRIBUTE_GROUPS\n\t#define __ATTRIBUTE_GROUPS(_name)\t\t\t\t\\\n\tstatic const struct attribute_group *_name##_groups[] = {\t\\\n\t\t&_name##_group,\t\t\t\t\t\t\\\n\t\tNULL,\t\t\t\t\t\t\t\\\n\t}\n\t#endif /* __ATTRIBUTE_GROUPS */\n\t#undef ATTRIBUTE_GROUPS\n\t#define ATTRIBUTE_GROUPS(_name)\t\t\t\t\t\\\n\tstatic const struct attribute_group _name##_group = {\t\t\\\n\t\t.attrs = _name##_attrs,\t\t\t\t\t\\\n\t};\t\t\t\t\t\t\t\t\\\n\tstatic inline void init_##_name##_attrs(void) {}\t\t\\\n\t__ATTRIBUTE_GROUPS(_name)\n\n\t#define __ATTR_RW(_name) __ATTR(_name, 0644, _name##_show, _name##_store)\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)\n\t#define NETIF_F_HW_VLAN_CTAG_RX\t\t\tNETIF_F_HW_VLAN_RX\n\t#define NETIF_F_HW_VLAN_CTAG_TX\t\t\tNETIF_F_HW_VLAN_TX\n\n\t// Added for armadaxp and evansport\n\tstatic inline void sg_unmark_end(struct scatterlist *sg)\n\t{\n            sg->page_link &= ~0x02;\n\t}\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,8,0)\n\t#define USB_DEVICE_INTERFACE_CLASS(vend, prod, cl) \\\n\t\t.match_flags = USB_DEVICE_ID_MATCH_DEVICE | \\\n\t\t\t       USB_DEVICE_ID_MATCH_INT_CLASS, \\\n\t\t.idVendor = (vend), \\\n\t\t.idProduct = (prod), \\\n\t\t.bInterfaceClass = (cl)\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,7,0)\n\t#ifndef SPEED_UNKNOWN\n\t\t#define SPEED_UNKNOWN\t\t0\n\t#endif\n\n\t#ifndef DUPLEX_UNKNOWN\n\t\t#define DUPLEX_UNKNOWN\t\t0xff\n\t#endif\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,6,0)\n\t#define eth_random_addr(addr)\t\t\trandom_ether_addr(addr)\n\t#define usb_enable_lpm(udev)\n\t#define MDIO_EEE_100TX\t\t\t\tMDIO_AN_EEE_ADV_100TX\t/* 100TX EEE cap */\n\t#define MDIO_EEE_1000T\t\t\t\tMDIO_AN_EEE_ADV_1000T\t/* 1000T EEE cap */\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,4,0)\n\t#define ETH_MDIO_SUPPORTS_C22\t\t\tMDIO_SUPPORTS_C22\n\n\t// Added for armadaxp and evansport\n\t#define skb_add_rx_frag(skb, i, page, off, size, truesize) \\\n\t\tskb_add_rx_frag(skb, i, page, off, size)\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,3,0)\n\t#define module_usb_driver(__driver) \\\n\tstatic int __init __driver##_init(void) \\\n\t{ \\\n\t\treturn usb_register(&(__driver)); \\\n\t} \\\n\tmodule_init(__driver##_init); \\\n\tstatic void __exit __driver##_exit(void) \\\n\t{ \\\n\t\tusb_deregister(&(__driver)); \\\n\t} \\\n\tmodule_exit(__driver##_exit);\n\n\t#define netdev_features_t\t\t\tu32\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,2,0)\n\t#define PMSG_IS_AUTO(msg)\t(((msg).event & PM_EVENT_AUTO) != 0)\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0)\n\t#define ndo_set_rx_mode\t\t\t\tndo_set_multicast_list\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,39)\n\t#define NETIF_F_RXCSUM\t\t\t\t(1 << 29) /* Receive checksumming offload */\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,38)\n\t#define MDIO_AN_EEE_ADV\t\t\t\t60\t/* EEE advertisement */\n\t#define MDIO_AN_EEE_ADV_100TX\t\t\t0x0002\t/* Advertise 100TX EEE cap */\n\t#define MDIO_AN_EEE_ADV_1000T\t\t\t0x0004\t/* Advertise 1000T EEE cap */\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,37)\n\t#define skb_checksum_none_assert(skb_ptr)\t(skb_ptr)->ip_summed = CHECKSUM_NONE\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36)\n\t#define skb_tx_timestamp(skb)\n\n\t#define queue_delayed_work(long_wq, work, delay)\tschedule_delayed_work(work, delay)\n\n\t#define work_busy(x)\t\t\t\t0\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,35)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,34)\n\t#define netdev_mc_count(netdev)\t\t\t((netdev)->mc_count)\n\t#define netdev_mc_empty(netdev)\t\t\t(netdev_mc_count(netdev) == 0)\n\n\t#define netif_printk(priv, type, level, netdev, fmt, args...)\t\\\n\tdo {\t\t\t\t\t\t\t\t\\\n\t\tif (netif_msg_##type(priv))\t\t\t\t\\\n\t\t\tprintk(level \"%s: \" fmt,(netdev)->name , ##args); \\\n\t} while (0)\n\n\t#define netif_emerg(priv, type, netdev, fmt, args...)\t\t\\\n\t\tnetif_printk(priv, type, KERN_EMERG, netdev, fmt, ##args)\n\t#define netif_alert(priv, type, netdev, fmt, args...)\t\t\\\n\t\tnetif_printk(priv, type, KERN_ALERT, netdev, fmt, ##args)\n\t#define netif_crit(priv, type, netdev, fmt, args...)\t\t\\\n\t\tnetif_printk(priv, type, KERN_CRIT, netdev, fmt, ##args)\n\t#define netif_err(priv, type, netdev, fmt, args...)\t\t\\\n\t\tnetif_printk(priv, type, KERN_ERR, netdev, fmt, ##args)\n\t#define netif_warn(priv, type, netdev, fmt, args...)\t\t\\\n\t\tnetif_printk(priv, type, KERN_WARNING, netdev, fmt, ##args)\n\t#define netif_notice(priv, type, netdev, fmt, args...)\t\t\\\n\t\tnetif_printk(priv, type, KERN_NOTICE, netdev, fmt, ##args)\n\t#define netif_info(priv, type, netdev, fmt, args...)\t\t\\\n\t\tnetif_printk(priv, type, KERN_INFO, (netdev), fmt, ##args)\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,33)\n\t#define get_sset_count\t\t\t\tget_stats_count\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,32)\n\t#define pm_request_resume(para)\n\t#define pm_runtime_set_suspended(para)\n\t#define pm_schedule_suspend(para1, para2)\n\t#define pm_runtime_get_sync(para)\n\t#define pm_runtime_put_sync(para)\n\t#define pm_runtime_put_noidle(para)\n\t#define pm_runtime_idle(para)\n\t#define pm_runtime_set_active(para)\n\t#define pm_runtime_enable(para)\n\t#define pm_runtime_disable(para)\n\ttypedef int netdev_tx_t;\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,31)\n\t#define USB_SPEED_SUPER\t\t\t\t(USB_SPEED_VARIABLE + 1)\n\t#define MDIO_MMD_AN\t\t\t\t7\t/* Auto-Negotiation */\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)\n\t#define napi_gro_receive(napi, skb)\t\tnetif_receive_skb(skb)\n\t#define vlan_gro_receive(napi, grp, vlan_tci, skb) \\\n\t\tvlan_hwaccel_receive_skb(skb, grp, vlan_tci)\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,27)\n\t#define PM_EVENT_AUTO\t\t0x0400\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,24)\n\tstruct napi_struct {\n\t\tstruct list_head\tpoll_list;\n\t\tunsigned long\t\tstate;\n\t\tint\t\t\tweight;\n\t\tint\t\t\t(*poll)(struct napi_struct *, int);\n\t#ifdef CONFIG_NETPOLL\n\t\tspinlock_t\t\tpoll_lock;\n\t\tint\t\t\tpoll_owner;\n\t\tstruct net_device\t*dev;\n\t\tstruct list_head\tdev_list;\n\t#endif\n\t};\n\n\t#define napi_enable(napi_ptr)\t\t\tnetif_poll_enable(container_of(napi_ptr, struct r8152, napi)->netdev)\n\t#define napi_disable(napi_ptr)\t\t\tnetif_poll_disable(container_of(napi_ptr, struct r8152, napi)->netdev)\n\t#define napi_schedule(napi_ptr)\t\t\tnetif_rx_schedule(container_of(napi_ptr, struct r8152, napi)->netdev)\n\t#define napi_complete(napi_ptr)\t\t\tnetif_rx_complete(container_of(napi_ptr, struct r8152, napi)->netdev)\n\t#define netif_napi_add(ndev, napi_ptr, function, weight_t) \\\n\t\tndev->poll = function; \\\n\t\tndev->weight = weight_t;\n\ttypedef unsigned long\t\t\t\tuintptr_t;\n\t#define DMA_BIT_MASK(value) \\\n\t\t(value < 64 ? ((1ULL << value) - 1) : 0xFFFFFFFFFFFFFFFFULL)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,23)\n\t#define NETIF_F_IPV6_CSUM\t\t\t16\n\t#define cancel_delayed_work_sync\t\tcancel_delayed_work\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,22)\n\t#define ip_hdr(skb_ptr)\t\t\t\t(skb_ptr)->nh.iph\n\t#define ipv6hdr(skb_ptr)\t\t\t(skb_ptr)->nh.ipv6h\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,21)\n\t#define vlan_group_set_device(vlgrp, vid, value) \\\n\t\tif (vlgrp) \\\n\t\t\t(vlgrp)->vlan_devices[vid] = value;\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,20)\n\t#define delayed_work\t\t\t\twork_struct\n\t#define INIT_DELAYED_WORK(a,b)\t\t\tINIT_WORK(a,b,tp)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,19)\n\t#define CHECKSUM_PARTIAL\t\t\tCHECKSUM_HW\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,18)\n\t#define skb_is_gso(skb_ptr)\t\t\tskb_shinfo(skb_ptr)->tso_size\n\t#define netdev_alloc_skb(dev, len)\t\tdev_alloc_skb(len)\n\t#define IRQF_SHARED\t\t\t\tSA_SHIRQ\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,16)\n\t#ifndef __LINUX_MUTEX_H\n\t#define mutex\t\t\t\t\tsemaphore\n\t#define mutex_lock\t\t\t\tdown\n\t#define mutex_unlock\t\t\t\tup\n\t#define mutex_trylock\t\t\t\tdown_trylock\n\t#define mutex_lock_interruptible\t\tdown_interruptible\n\t#define mutex_init\t\t\t\tinit_MUTEX\n\t#endif\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,14)\n\t#define ADVERTISED_Pause\t\t\t(1 << 13)\n\t#define ADVERTISED_Asym_Pause\t\t\t(1 << 14)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,12)\n\t#define skb_header_cloned(skb)\t\t\tskb_cloned(skb)\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,12) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,14) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,16) */\n\tstatic inline struct sk_buff *skb_gso_segment(struct sk_buff *skb, int features)\n\t{\n\t\treturn NULL;\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,18) */\n\tstatic inline void *kmemdup(const void *src, size_t len, gfp_t gfp)\n\t{\n\t\tvoid *p;\n\n\t\tp = kmalloc_track_caller(len, gfp);\n\t\tif (p)\n\t\t\tmemcpy(p, src, len);\n\t\treturn p;\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,19) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,20) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,21) */\n\tstatic inline void skb_copy_from_linear_data(const struct sk_buff *skb,\n\t\t\t\t\t\t     void *to,\n\t\t\t\t\t\t     const unsigned int len)\n\t{\n\t\tmemcpy(to, skb->data, len);\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,22) */\n\tstatic inline int skb_cow_head(struct sk_buff *skb, unsigned int headroom)\n\t{\n\t\tint delta = 0;\n\n\t\tif (headroom > skb_headroom(skb))\n\t\t\tdelta = headroom - skb_headroom(skb);\n\n\t\tif (delta || skb_header_cloned(skb))\n\t\t\treturn pskb_expand_head(skb, ALIGN(delta, NET_SKB_PAD),\n\t\t\t\t\t\t0, GFP_ATOMIC);\n\t\treturn 0;\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,23) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,24) */\n\tstatic inline void __list_splice2(const struct list_head *list,\n\t\t\t\t\t  struct list_head *prev,\n\t\t\t\t\t  struct list_head *next)\n\t{\n\t\tstruct list_head *first = list->next;\n\t\tstruct list_head *last = list->prev;\n\n\t\tfirst->prev = prev;\n\t\tprev->next = first;\n\n\t\tlast->next = next;\n\t\tnext->prev = last;\n\t}\n\n\tstatic inline void list_splice_tail(struct list_head *list,\n\t\t\t\t\t    struct list_head *head)\n\t{\n\t\tif (!list_empty(list))\n\t\t\t__list_splice2(list, head->prev, head);\n\t}\n\n\tstatic inline void netif_napi_del(struct napi_struct *napi)\n\t{\n\t#ifdef CONFIG_NETPOLL\n\t\tlist_del(&napi->dev_list);\n\t#endif\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,27) */\n\tstatic inline void __skb_queue_splice(const struct sk_buff_head *list,\n\t\t\t\t\t      struct sk_buff *prev,\n\t\t\t\t\t      struct sk_buff *next)\n\t{\n\t\tstruct sk_buff *first = list->next;\n\t\tstruct sk_buff *last = list->prev;\n\n\t\tfirst->prev = prev;\n\t\tprev->next = first;\n\n\t\tlast->next = next;\n\t\tnext->prev = last;\n\t}\n\n\tstatic inline void skb_queue_splice(const struct sk_buff_head *list,\n\t\t\t\t\t    struct sk_buff_head *head)\n\t{\n\t\tif (!skb_queue_empty(list)) {\n\t\t\t__skb_queue_splice(list, (struct sk_buff *) head, head->next);\n\t\t\thead->qlen += list->qlen;\n\t\t}\n\t}\n\n\tstatic inline void __skb_queue_head_init(struct sk_buff_head *list)\n\t{\n\t\tlist->prev = list->next = (struct sk_buff *)list;\n\t\tlist->qlen = 0;\n\t}\n\n\tstatic inline void skb_queue_splice_init(struct sk_buff_head *list,\n\t\t\t\t\t\t struct sk_buff_head *head)\n\t{\n\t\tif (!skb_queue_empty(list)) {\n\t\t\t__skb_queue_splice(list, (struct sk_buff *) head, head->next);\n\t\t\thead->qlen += list->qlen;\n\t\t\t__skb_queue_head_init(list);\n\t\t}\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,28) */\n\tstatic inline void usb_autopm_put_interface_async(struct usb_interface *intf)\n\t{\n\t\tstruct usb_device *udev = interface_to_usbdev(intf);\n\t\tint status = 0;\n\n\t\tif (intf->condition == USB_INTERFACE_UNBOUND) {\n\t\t\tstatus = -ENODEV;\n\t\t} else {\n\t\t\tudev->last_busy = jiffies;\n\t\t\t--intf->pm_usage_cnt;\n\t\t\tif (udev->autosuspend_disabled || udev->autosuspend_delay < 0)\n\t\t\t\tstatus = -EPERM;\n\t\t}\n\t}\n\n\tstatic inline int usb_autopm_get_interface_async(struct usb_interface *intf)\n\t{\n\t\tstruct usb_device *udev = interface_to_usbdev(intf);\n\t\tint status = 0;\n\n\t\tif (intf->condition == USB_INTERFACE_UNBOUND)\n\t\t\tstatus = -ENODEV;\n\t\telse if (udev->autoresume_disabled)\n\t\t\tstatus = -EPERM;\n\t\telse\n\t\t\t++intf->pm_usage_cnt;\n\t\treturn status;\n\t}\n\n\tstatic inline int eth_change_mtu(struct net_device *dev, int new_mtu)\n\t{\n\t\tif (new_mtu < 68 || new_mtu > ETH_DATA_LEN)\n\t\t\treturn -EINVAL;\n\t\tdev->mtu = new_mtu;\n\t\treturn 0;\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,31) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,32) */\n\tstatic inline\n\tstruct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev,\n\t\t\t\t\t\t  unsigned int length)\n\t{\n\t\tstruct sk_buff *skb = netdev_alloc_skb(dev, length + NET_IP_ALIGN);\n\n\t\tif (NET_IP_ALIGN && skb)\n\t\t\tskb_reserve(skb, NET_IP_ALIGN);\n\t\treturn skb;\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,33) */\n\tstatic inline int usb_enable_autosuspend(struct usb_device *udev)\n\t{ return 0; }\n\tstatic inline int usb_disable_autosuspend(struct usb_device *udev)\n\t{ return 0; }\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,34) */\n\tstatic inline bool pci_dev_run_wake(struct pci_dev *dev)\n\t{\n\t\treturn 1;\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,35) */\n\tstatic inline void usleep_range(unsigned long min, unsigned long max)\n\t{\n\t\tunsigned long ms = min / 1000;\n\n\t\tif (ms)\n\t\t\tmdelay(ms);\n\n\t\tudelay(min % 1000);\n\t}\n\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,36) */\n\tstatic inline __be16 vlan_get_protocol(const struct sk_buff *skb)\n\t{\n\t\t__be16 protocol = 0;\n\n\t\tif (vlan_tx_tag_present(skb) ||\n\t\t    skb->protocol != cpu_to_be16(ETH_P_8021Q))\n\t\t\tprotocol = skb->protocol;\n\t\telse {\n\t\t\t__be16 proto, *protop;\n\t\t\tprotop = skb_header_pointer(skb, offsetof(struct vlan_ethhdr,\n\t\t\t\t\t\t    h_vlan_encapsulated_proto),\n\t\t\t\t\t\t    sizeof(proto), &proto);\n\t\t\tif (likely(protop))\n\t\t\t\tprotocol = *protop;\n\t\t}\n\n\t\treturn protocol;\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,37) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,38) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,39) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,1,0) */\n\tstatic inline struct page *skb_frag_page(const skb_frag_t *frag)\n\t{\n\t\treturn frag->page;\n\t}\n\n\tstatic inline void *skb_frag_address(const skb_frag_t *frag)\n\t{\n\t\treturn page_address(skb_frag_page(frag)) + frag->page_offset;\n\t}\n\n\tstatic inline unsigned int skb_frag_size(const skb_frag_t *frag)\n\t{\n\t\treturn frag->size;\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,2,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,3,0) */\n\tstatic inline void eth_hw_addr_random(struct net_device *dev)\n\t{\n\t\trandom_ether_addr(dev->dev_addr);\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,4,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,6,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,7,0) */\n\tstatic inline __sum16 tcp_v6_check(int len,\n\t\t\t\t\t   const struct in6_addr *saddr,\n\t\t\t\t\t   const struct in6_addr *daddr,\n\t\t\t\t\t   __wsum base)\n\t{\n\t\treturn csum_ipv6_magic(saddr, daddr, len, IPPROTO_TCP, base);\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,8,0) */\n#define NAPI_POLL_WEIGHT 64\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,11,0) */\n\tstatic inline bool usb_device_no_sg_constraint(struct usb_device *udev)\n\t{\n\t\treturn 0;\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,12,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,13,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,14,0) */\n\n\tstatic inline int skb_to_sgvec_nomark(struct sk_buff *skb,\n\t\t\t\t\t      struct scatterlist *sg,\n\t\t\t\t\t      int offset, int len)\n\t{\n\t\tint nsg = skb_to_sgvec(skb, sg, offset, len);\n\n\t\tif (nsg <= 0)\n\t\t\treturn nsg;\n\n\t\tsg_unmark_end(&sg[nsg - 1]);\n\n\t\treturn nsg;\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,15,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,16,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,19,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(4,0,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(4,1,0) */\n\tstatic inline int eth_platform_get_mac_address(struct device *dev, u8 *mac_addr)\n\t{\n\t\treturn -EOPNOTSUPP;\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(4,5,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(4,9,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(4,10,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(4,12,0) */\n#if LINUX_VERSION_CODE < KERNEL_VERSION(4,19,10) && \\\n    !(LINUX_VERSION_CODE >= KERNEL_VERSION(4,14,217) && LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0))\n\tstatic inline void skb_mark_not_on_list(struct sk_buff *skb)\n\t{\n\t\tskb->next = NULL;\n\t}\n#endif\n\tstatic inline void linkmode_set_bit(int nr, volatile unsigned long *addr)\n\t{\n\t\t__set_bit(nr, addr);\n\t}\n\n\tstatic inline void linkmode_clear_bit(int nr, volatile unsigned long *addr)\n\t{\n\t\t__clear_bit(nr, addr);\n\t}\n\n\tstatic inline int linkmode_test_bit(int nr, volatile unsigned long *addr)\n\t{\n\t\treturn test_bit(nr, addr);\n\t}\n\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(4,20,0) */\n\tstatic inline void linkmode_mod_bit(int nr, volatile unsigned long *addr,\n\t\t\t\t\t    int set)\n\t{\n\t\tif (set)\n\t\t\tlinkmode_set_bit(nr, addr);\n\t\telse\n\t\t\tlinkmode_clear_bit(nr, addr);\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,0,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,1,0) */\n//\tstatic inline u16 pci_dev_id(struct pci_dev *dev)\n//\t{\n//\t\treturn PCI_DEVID(dev->bus->number, dev->devfn);\n//\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,2,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,4,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,6,0) */\n\tstatic inline void tcp_v6_gso_csum_prep(struct sk_buff *skb)\n\t{\n\t\tstruct ipv6hdr *ipv6h = ipv6_hdr(skb);\n\t\tstruct tcphdr *th = tcp_hdr(skb);\n\n\t\tipv6h->payload_len = 0;\n\t\tth->check = ~tcp_v6_check(0, &ipv6h->saddr, &ipv6h->daddr, 0);\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,7,0) */\n\tstatic inline void fsleep(unsigned long usecs)\n\t{\n\t\tif (usecs <= 10)\n\t\t\tudelay(usecs);\n\t\telse if (usecs <= 20000)\n\t\t\tusleep_range(usecs, 2 * usecs);\n\t\telse\n\t\t\tmsleep(DIV_ROUND_UP(usecs, 1000));\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,8,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,9,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,12,0) */\n\t#if LINUX_VERSION_CODE < KERNEL_VERSION(5,10,188) || LINUX_VERSION_CODE >= KERNEL_VERSION(5,11,0)\n\t#if LINUX_VERSION_CODE < KERNEL_VERSION(5,4,251) || LINUX_VERSION_CODE >= KERNEL_VERSION(5,5,0)\n\t#if LINUX_VERSION_MAJOR != 4 || LINUX_VERSION_PATCHLEVEL != 19 || LINUX_VERSION_SUBLEVEL < 291\n\tstatic inline void eth_hw_addr_set(struct net_device *dev, const u8 *addr)\n\t{\n\t\tmemcpy(dev->dev_addr, addr, 6);\n\t}\n\t#endif /* LINUX_VERSION_MAJOR != 4 || LINUX_VERSION_PATCHLEVEL != 19 || LINUX_VERSION_SUBLEVEL < 291 */\n\t#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,4,251) || LINUX_VERSION_CODE >= KERNEL_VERSION(5,5,0) */\n\t#endif /*LINUX_VERSION_CODE < KERNEL_VERSION(5,10,188) || LINUX_VERSION_CODE >= KERNEL_VERSION(5,11,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,15,0) */\n\tstatic inline void netif_set_gso_max_segs(struct net_device *dev,\n\t\t\t\t\t\t  unsigned int segs)\n\t{\n\t\t/* dev->gso_max_segs is read locklessly from sk_setup_caps() */\n\t\tWRITE_ONCE(dev->gso_max_segs, segs);\n\t}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,17,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,19,0) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(6,9,0) */\n\n#ifndef FALSE\n\t#define TRUE\t1\n\t#define FALSE\t0\n#endif\n\nenum rtl_cmd {\n\tRTLTOOL_PLA_OCP_READ_DWORD = 0,\n\tRTLTOOL_PLA_OCP_WRITE_DWORD,\n\tRTLTOOL_USB_OCP_READ_DWORD,\n\tRTLTOOL_USB_OCP_WRITE_DWORD,\n\tRTLTOOL_PLA_OCP_READ,\n\tRTLTOOL_PLA_OCP_WRITE,\n\tRTLTOOL_USB_OCP_READ,\n\tRTLTOOL_USB_OCP_WRITE,\n\tRTLTOOL_USB_INFO,\n\tRTL_ENABLE_USB_DIAG,\n\tRTL_DISABLE_USB_DIAG,\n\n\tRTLTOOL_INVALID\n};\n\nstruct usb_device_info {\n\t__u16\t\tidVendor;\n\t__u16\t\tidProduct;\n\t__u16\t\tbcdDevice;\n\t__u8\t\tdev_addr[8];\n\tchar\t\tdevpath[16];\n};\n\nstruct rtltool_cmd {\n\t__u32\tcmd;\n\t__u32\toffset;\n\t__u32\tbyteen;\n\t__u32\tdata;\n\tvoid\t*buf;\n\tstruct usb_device_info nic_info;\n\tstruct sockaddr ifru_addr;\n\tstruct sockaddr ifru_netmask;\n\tstruct sockaddr ifru_hwaddr;\n};\n\n#endif /* LINUX_COMPATIBILITY_H */\n"
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "r8152.c",
          "type": "blob",
          "size": 748.3173828125,
          "content": "// SPDX-License-Identifier: GPL-2.0-only\n/*\n *  Copyright (c) 2024 Realtek Semiconductor Corp. All rights reserved.\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * version 2 as published by the Free Software Foundation.\n *\n *  This product is covered by one or more of the following patents:\n *  US6,570,884, US6,115,776, and US6,327,625.\n */\n\n#include <linux/signal.h>\n#include <linux/slab.h>\n#include <linux/module.h>\n#include <linux/netdevice.h>\n#include <linux/etherdevice.h>\n#include <linux/mii.h>\n#include <linux/ethtool.h>\n#include <linux/phy.h>\n#include <linux/usb.h>\n#include <linux/crc32.h>\n#include <linux/if_vlan.h>\n#include <linux/uaccess.h>\n#include <linux/list.h>\n#include <linux/ip.h>\n#include <linux/ipv6.h>\n#include <net/ip6_checksum.h>\n#include <linux/usb/cdc.h>\n#include <linux/suspend.h>\n#include <linux/atomic.h>\n#include <linux/acpi.h>\n#include \"compatibility.h\"\n\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,4,10)\n#include <net/gso.h>\n#endif /* LINUX_VERSION_CODE >= KERNEL_VERSION(6,4,10) */\n\n/* Version Information */\n#define DRIVER_SUFFIX\n#define DRIVER_VERSION \"v2.19.2\"DRIVER_SUFFIX\" (2024/10/21)\"\n#define DRIVER_AUTHOR \"Realtek nic sw <nic_swsd@realtek.com>\"\n#define DRIVER_DESC \"Realtek RTL8152/RTL8153 Based USB Ethernet Adapters\"\n#define MODULENAME \"r8152\"\n\n#define PATENTS\t\t\"This product is covered by one or more of the \" \\\n\t\t\t\"following patents:\\n\" \\\n\t\t\t\"\\t\\tUS6,570,884, US6,115,776, and US6,327,625.\\n\"\n\n#if 0\n#ifndef __x86_64\n#define FORCE_OVERRIDE_RXBUF_SZ 8192\n#else\n#define FORCE_OVERRIDE_RXBUF_SZ 16384\n#endif\n#endif\n\n#define R8152_PHY_ID\t\t32\n\n#define PLA_IDR\t\t\t0xc000\n#define PLA_RCR\t\t\t0xc010\n#define PLA_RCR1\t\t0xc012\n#define PLA_RMS\t\t\t0xc016\n#define PLA_RXFIFO_CTRL0\t0xc0a0\n#define PLA_RXFIFO_FULL\t\t0xc0a2\n#define PLA_RXFIFO_CTRL1\t0xc0a4\n#define PLA_RX_FIFO_FULL\t0xc0a6\n#define PLA_RXFIFO_CTRL2\t0xc0a8\n#define PLA_RX_FIFO_EMPTY\t0xc0aa\n#define PLA_DMY_REG0\t\t0xc0b0\n#define PLA_FMC\t\t\t0xc0b4\n#define PLA_CFG_WOL\t\t0xc0b6\n#define PLA_TEREDO_CFG\t\t0xc0bc\n#define PLA_TEREDO_WAKE_BASE\t0xc0c4\n#define PLA_MAR\t\t\t0xcd00\n#define PLA_BACKUP\t\t0xd000\n#define PLA_BDC_CR\t\t0xd1a0\n#define PLA_TEREDO_TIMER\t0xd2cc\n#define PLA_REALWOW_TIMER\t0xd2e8\n#define PLA_UPHY_TIMER\t\t0xd388\n#define PLA_SUSPEND_FLAG\t0xd38a\n#define PLA_INDICATE_FALG\t0xd38c\n#define PLA_MACDBG_PRE\t\t0xd38c\t/* RTL_VER_04 only */\n#define PLA_MACDBG_POST\t\t0xd38e\t/* RTL_VER_04 only */\n#define PLA_EXTRA_STATUS\t0xd398\n#define PLA_GPHY_CTRL\t\t0xd3ae\n#define PLA_POL_GPIO_CTRL\t0xdc6a\n#define PLA_EFUSE_DATA\t\t0xdd00\n#define PLA_EFUSE_CMD\t\t0xdd02\n#define PLA_LEDSEL\t\t0xdd90\n#define PLA_LED_FEATURE\t\t0xdd92\n#define PLA_PHYAR\t\t0xde00\n#define PLA_BOOT_CTRL\t\t0xe004\n#define PLA_LWAKE_CTRL_REG\t0xe007\n#define PLA_GPHY_INTR_IMR\t0xe022\n#define PLA_EEE_CR\t\t0xe040\n#define PLA_EEE_TXTWSYS\t\t0xe04c\n#define PLA_EEE_TXTWSYS_2P5G\t0xe058\n#define PLA_EEEP_CR\t\t0xe080\n#define PLA_MAC_PWR_CTRL\t0xe0c0\n#define PLA_MAC_PWR_CTRL2\t0xe0ca\n#define PLA_MAC_PWR_CTRL3\t0xe0cc\n#define PLA_MAC_PWR_CTRL4\t0xe0ce\n#define PLA_WDT6_CTRL\t\t0xe428\n#define PLA_TCR0\t\t0xe610\n#define PLA_TCR1\t\t0xe612\n#define PLA_MTPS\t\t0xe615\n#define PLA_TXFIFO_CTRL\t\t0xe618\n#define PLA_TXFIFO_FULL\t\t0xe61a\n#define PLA_RSTTALLY\t\t0xe800\n#define PLA_CR\t\t\t0xe813\n#define PLA_CRWECR\t\t0xe81c\n#define PLA_CONFIG12\t\t0xe81e\t/* CONFIG1, CONFIG2 */\n#define PLA_CONFIG34\t\t0xe820\t/* CONFIG3, CONFIG4 */\n#define PLA_CONFIG5\t\t0xe822\n#define PLA_PHY_PWR\t\t0xe84c\n#define PLA_OOB_CTRL\t\t0xe84f\n#define PLA_CPCR\t\t0xe854\n#define PLA_MISC_0\t\t0xe858\n#define PLA_MISC_1\t\t0xe85a\n#define PLA_OCP_GPHY_BASE\t0xe86c\n#define PLA_TALLYCNT\t\t0xe890\n#define PLA_SFF_STS_7\t\t0xe8de\n#define PLA_PHYSTATUS\t\t0xe908\n#define PLA_CONFIG6\t\t0xe90a /* CONFIG6 */\n#define PLA_USB_CFG\t\t0xe952\n#define PLA_BP_BA\t\t0xfc26\n#define PLA_BP_0\t\t0xfc28\n#define PLA_BP_1\t\t0xfc2a\n#define PLA_BP_2\t\t0xfc2c\n#define PLA_BP_3\t\t0xfc2e\n#define PLA_BP_4\t\t0xfc30\n#define PLA_BP_5\t\t0xfc32\n#define PLA_BP_6\t\t0xfc34\n#define PLA_BP_7\t\t0xfc36\n#define PLA_BP_EN\t\t0xfc38\n#define PLA_BP_8\t\t0xfc38\t\t/* RTL8153C */\n#define PLA_BP_9\t\t0xfc3a\n#define PLA_BP_10\t\t0xfc3c\n#define PLA_BP_11\t\t0xfc3e\n#define PLA_BP_12\t\t0xfc40\n#define PLA_BP_13\t\t0xfc42\n#define PLA_BP_14\t\t0xfc44\n#define PLA_BP_15\t\t0xfc46\n#define PLA_BP2_EN\t\t0xfc48\n\n#define USB_USB2PHY\t\t0xb41e\n#define USB_SSPHYLINK1\t\t0xb426\n#define USB_SSPHYLINK2\t\t0xb428\n#define USB_L1_CTRL\t\t0xb45e\n#define USB_U2P3_CTRL\t\t0xb460\n#define USB_CSR_DUMMY1\t\t0xb464\n#define USB_CSR_DUMMY2\t\t0xb466\n#define USB_DEV_STAT\t\t0xb808\n#define USB_CONNECT_TIMER\t0xcbf8\n#define USB_MSC_TIMER\t\t0xcbfc\n#define USB_OUTER_FW_VER\t0xcd54\n#define USB_BURST_SIZE\t\t0xcfc0\n#define USB_FW_FIX_EN0\t\t0xcfca\n#define USB_FW_FIX_EN1\t\t0xcfcc\n#define USB_FW_PLA_VER\t\t0xcfd6\n#define USB_FW_USB_VER\t\t0xcfd7\n#define USB_LPM_CONFIG\t\t0xcfd8\n#define USB_EFUSE\t\t0xcfdb\n#define USB_ECM_OPTION\t\t0xcfee\n#define USB_CSTMR\t\t0xcfef\t/* RTL8153A */\n#define USB_MISC_2\t\t0xcfff\n#define USB_ECM_OP\t\t0xd26b\n#define USB_GPHY_CTRL\t\t0xd284\n#define USB_SPEED_OPTION\t0xd32a\n#define USB_FW_CTRL\t\t0xd334\t/* RTL8153B */\n#define USB_FC_TIMER\t\t0xd340\n#define USB_OUTSIDE_FW_VER\t0xd3cc\n#define USB_USB_CTRL\t\t0xd406\n#define USB_PHY_CTRL\t\t0xd408\n#define USB_TX_AGG\t\t0xd40a\n#define USB_RX_BUF_TH\t\t0xd40c\n#define USB_USB_TIMER\t\t0xd428\n#define USB_RX_EARLY_TIMEOUT\t0xd42c\n#define USB_RX_EARLY_SIZE\t0xd42e\n#define USB_PM_CTRL_STATUS\t0xd432\t/* RTL8153A */\n#define USB_RX_EXTRA_AGGR_TMR\t0xd432\t/* RTL8153B */\n#define USB_TX_DMA\t\t0xd434\n#define USB_UPT_RXDMA_OWN\t0xd437\n#define USB_UPHY3_MDCMDIO\t0xd480\n#define USB_TOLERANCE\t\t0xd490\n#define USB_LPM_CTRL\t\t0xd41a\n#define USB_BMU_RESET\t\t0xd4b0\n#define USB_BMU_CONFIG\t\t0xd4b4\n#define USB_U1U2_TIMER\t\t0xd4da\n#define USB_FW_TASK\t\t0xd4e8\t/* RTL8153B */\n#define USB_RX_AGGR_NUM\t\t0xd4ee\n#define USB_ADV_ADDR\t\t0xd5d6\n#define USB_ADV_DATA\t\t0xd5d8\n#define USB_ADV_CMD\t\t0xd5dc\n#define USB_TGPHY_ADDR\t\t0xd630\n#define USB_TGPHY_DATA\t\t0xd632\n#define USB_TGPHY_CMD\t\t0xd634\n#define USB_UPS_CTRL\t\t0xd800\n#define USB_POWER_CUT\t\t0xd80a\n#define USB_MISC_0\t\t0xd81a\n#define USB_MISC_1\t\t0xd81f\n#define USB_AFE_CTRL2\t\t0xd824\n#define USB_UPHY_XTAL\t\t0xd826\n#define USB_UPS_CFG\t\t0xd842\n#define USB_UPS_FLAGS\t\t0xd848\n#define USB_WDT1_CTRL\t\t0xe404\n#define USB_WDT11_CTRL\t\t0xe43c\n#define USB_BP_BA\t\tPLA_BP_BA\n#define USB_BP_0\t\tPLA_BP_0\n#define USB_BP_1\t\tPLA_BP_1\n#define USB_BP_2\t\tPLA_BP_2\n#define USB_BP_3\t\tPLA_BP_3\n#define USB_BP_4\t\tPLA_BP_4\n#define USB_BP_5\t\tPLA_BP_5\n#define USB_BP_6\t\tPLA_BP_6\n#define USB_BP_7\t\tPLA_BP_7\n#define USB_BP_EN\t\tPLA_BP_EN\t/* RTL8153A */\n#define USB_BP_8\t\t0xfc38\t\t/* RTL8153B */\n#define USB_BP_9\t\t0xfc3a\n#define USB_BP_10\t\t0xfc3c\n#define USB_BP_11\t\t0xfc3e\n#define USB_BP_12\t\t0xfc40\n#define USB_BP_13\t\t0xfc42\n#define USB_BP_14\t\t0xfc44\n#define USB_BP_15\t\t0xfc46\n#define USB_BP2_EN\t\t0xfc48\n\n/* OCP Registers */\n#define OCP_ALDPS_CONFIG\t0x2010\n#define OCP_EEE_CONFIG1\t\t0x2080\n#define OCP_EEE_CONFIG2\t\t0x2092\n#define OCP_EEE_CONFIG3\t\t0x2094\n#define OCP_BASE_MII\t\t0xa400\n#define OCP_EEE_AR\t\t0xa41a\n#define OCP_EEE_DATA\t\t0xa41c\n#define OCP_PHY_STATUS\t\t0xa420\n#define OCP_INTR_EN\t\t0xa424\n#define OCP_NCTL_CFG\t\t0xa42c\n#define OCP_POWER_CFG\t\t0xa430\n#define OCP_EEE_CFG\t\t0xa432\n#define OCP_SRAM_ADDR\t\t0xa436\n#define OCP_SRAM_DATA\t\t0xa438\n#define OCP_DOWN_SPEED\t\t0xa442\n#define OCP_EEE_ABLE\t\t0xa5c4\n#define OCP_EEE_ABLE2\t\t0xa6ec\n#define OCP_EEE_ADV\t\t0xa5d0\n#define OCP_EEE_LPABLE\t\t0xa5d2\n#define OCP_EEE_LPABLE2\t\t0xa6d0\n#define OCP_10GBT_CTRL\t\t0xa5d4\n#define OCP_10GBT_STAT\t\t0xa5d6\n#define OCP_EEE_ADV2\t\t0xa6d4\n#define OCP_PHY_STATE\t\t0xa708\t\t/* nway state for 8153 */\n#define OCP_PHY_PATCH_STAT\t0xb800\n#define OCP_PHY_PATCH_CMD\t0xb820\n#define OCP_PHY_LOCK\t\t0xb82e\n#define OCP_ADC_IOFFSET\t\t0xbcfc\n#define OCP_ADC_CFG\t\t0xbc06\n#define OCP_SYSCLK_CFG\t\t0xc416\n\n/* SRAM Register */\n#define SRAM_GREEN_CFG\t\t0x8011\n#define SRAM_LPF_CFG\t\t0x8012\n#define SRAM_GPHY_FW_VER\t0x801e\n#define SRAM_10M_AMP1\t\t0x8080\n#define SRAM_10M_AMP2\t\t0x8082\n#define SRAM_IMPEDANCE\t\t0x8084\n#define SRAM_PHY_LOCK\t\t0xb82e\n\n/* PLA_RCR */\n#define RCR_AAP\t\t\t0x00000001\n#define RCR_APM\t\t\t0x00000002\n#define RCR_AM\t\t\t0x00000004\n#define RCR_AB\t\t\t0x00000008\n#define RCR_ACPT_ALL\t\t(RCR_AAP | RCR_APM | RCR_AM | RCR_AB)\n#define SLOT_EN\t\t\tBIT(11)\n\n/* PLA_RCR1 */\n#define OUTER_VLAN\t\tBIT(7)\n#define INNER_VLAN\t\tBIT(6)\n\n/* PLA_RXFIFO_CTRL0 */\n#define RXFIFO_THR1_NORMAL\t0x00080002\n#define RXFIFO_THR1_OOB\t\t0x01800003\n\n/* PLA_RXFIFO_FULL */\n#define RXFIFO_FULL_MASK\t0xfff\n\n/* PLA_RXFIFO_CTRL1 */\n#define RXFIFO_THR2_FULL\t0x00000060\n#define RXFIFO_THR2_HIGH\t0x00000038\n#define RXFIFO_THR2_OOB\t\t0x0000004a\n#define RXFIFO_THR2_NORMAL\t0x00a0\n\n/* PLA_RXFIFO_CTRL2 */\n#define RXFIFO_THR3_FULL\t0x00000078\n#define RXFIFO_THR3_HIGH\t0x00000048\n#define RXFIFO_THR3_OOB\t\t0x0000005a\n#define RXFIFO_THR3_NORMAL\t0x0110\n\n/* PLA_TXFIFO_CTRL */\n#define TXFIFO_THR_NORMAL\t0x00400008\n#define TXFIFO_THR_NORMAL2\t0x01000008\n\n/* PLA_DMY_REG0 */\n#define ECM_ALDPS\t\t0x0002\n\n/* PLA_FMC */\n#define FMC_FCR_MCU_EN\t\t0x0001\n\n/* PLA_EEEP_CR */\n#define EEEP_CR_EEEP_TX\t\t0x0002\n\n/* PLA_WDT6_CTRL */\n#define WDT6_SET_MODE\t\t0x0010\n\n/* PLA_TCR0 */\n#define TCR0_TX_EMPTY\t\t0x0800\n#define TCR0_AUTO_FIFO\t\t0x0080\n\n/* PLA_TCR1 */\n#define VERSION_MASK\t\t0x7cf0\n#define IFG_MASK\t\t(BIT(3) | BIT(9) | BIT(8))\n#define IFG_144NS\t\tBIT(9)\n#define IFG_96NS\t\t(BIT(9) | BIT(8))\n\n/* PLA_MTPS */\n#define MTPS_JUMBO\t\t(12 * 1024 / 64)\n#define MTPS_DEFAULT\t\t(6 * 1024 / 64)\n\n/* PLA_RSTTALLY */\n#define TALLY_RESET\t\t0x0001\n\n/* PLA_CR */\n#define CR_RST\t\t\t0x10\n#define CR_RE\t\t\t0x08\n#ifdef CR_TE\n#undef CR_TE\n#endif\n#define CR_TE\t\t\t0x04\n\n/* PLA_CRWECR */\n#define CRWECR_NORAML\t\t0x00\n#define CRWECR_CONFIG\t\t0xc0\n\n/* PLA_OOB_CTRL */\n#define NOW_IS_OOB\t\t0x80\n#define TXFIFO_EMPTY\t\t0x20\n#define RXFIFO_EMPTY\t\t0x10\n#define LINK_LIST_READY\t\t0x02\n#define DIS_MCU_CLROOB\t\t0x01\n#define FIFO_EMPTY\t\t(TXFIFO_EMPTY | RXFIFO_EMPTY)\n\n/* PLA_MISC_1 */\n#define RXDY_GATED_EN\t\t0x0008\n\n/* PLA_SFF_STS_7 */\n#define RE_INIT_LL\t\t0x8000\n#define MCU_BORW_EN\t\t0x4000\n\n/* PLA_CPCR */\n#define FLOW_CTRL_EN\t\tBIT(0)\n#define CPCR_RX_VLAN\t\t0x0040\n\n/* PLA_CFG_WOL */\n#define MAGIC_EN\t\t0x0001\n\n/* PLA_TEREDO_CFG */\n#define TEREDO_SEL\t\t0x8000\n#define TEREDO_WAKE_MASK\t0x7f00\n#define TEREDO_RS_EVENT_MASK\t0x00fe\n#define OOB_TEREDO_EN\t\t0x0001\n\n/* PLA_BDC_CR */\n#define ALDPS_PROXY_MODE\t0x0001\n\n/* PLA_EFUSE_CMD */\n#define EFUSE_READ_CMD\t\tBIT(15)\n#define EFUSE_DATA_BIT16\tBIT(7)\n\n/* PLA_CONFIG34 */\n#define LINK_ON_WAKE_EN\t\t0x0010\n#define LINK_OFF_WAKE_EN\t0x0008\n\n/* PLA_CONFIG6 */\n#define LANWAKE_CLR_EN\t\tBIT(0)\n\n/* PLA_USB_CFG */\n#define EN_XG_LIP\t\tBIT(1)\n#define EN_G_LIP\t\tBIT(2)\n\n/* PLA_CONFIG5 */\n#define BWF_EN\t\t\t0x0040\n#define MWF_EN\t\t\t0x0020\n#define UWF_EN\t\t\t0x0010\n#define SPI_EN\t\t\tBIT(3)\n#define LAN_WAKE_EN\t\t0x0002\n\n/* PLA_LED_FEATURE */\n#define LED_MODE_MASK\t\t0x0700\n\n/* PLA_PHY_PWR */\n#define TX_10M_IDLE_EN\t\t0x0080\n#define PFM_PWM_SWITCH\t\t0x0040\n#define TEST_IO_OFF\t\tBIT(4)\n\n/* PLA_MAC_PWR_CTRL */\n#define D3_CLK_GATED_EN\t\t0x00004000\n#define MCU_CLK_RATIO\t\t0x07010f07\n#define MCU_CLK_RATIO_MASK\t0x0f0f0f0f\n#define ALDPS_SPDWN_RATIO\t0x0f87\n\n/* PLA_MAC_PWR_CTRL2 */\n#define EEE_SPDWN_RATIO\t\t0x8007\n#define MAC_CLK_SPDWN_EN\tBIT(15)\n#define EEE_SPDWN_RATIO_MASK\t0xff\n\n/* PLA_MAC_PWR_CTRL3 */\n#define PLA_MCU_SPDWN_EN\tBIT(14)\n#define PKT_AVAIL_SPDWN_EN\t0x0100\n#define SUSPEND_SPDWN_EN\t0x0004\n#define U1U2_SPDWN_EN\t\t0x0002\n#define L1_SPDWN_EN\t\t0x0001\n\n/* PLA_MAC_PWR_CTRL4 */\n#define PWRSAVE_SPDWN_EN\t0x1000\n#define RXDV_SPDWN_EN\t\t0x0800\n#define TX10MIDLE_EN\t\t0x0100\n#define IDLE_SPDWN_EN\t\tBIT(6)\n#define TP100_SPDWN_EN\t\t0x0020\n#define TP500_SPDWN_EN\t\t0x0010\n#define TP1000_SPDWN_EN\t\t0x0008\n#define EEE_SPDWN_EN\t\t0x0001\n\n/* PLA_GPHY_INTR_IMR */\n#define GPHY_STS_MSK\t\t0x0001\n#define SPEED_DOWN_MSK\t\t0x0002\n#define SPDWN_RXDV_MSK\t\t0x0004\n#define SPDWN_LINKCHG_MSK\t0x0008\n\n/* PLA_PHYAR */\n#define PHYAR_FLAG\t\t0x80000000\n\n/* PLA_EEE_CR */\n#define EEE_RX_EN\t\t0x0001\n#define EEE_TX_EN\t\t0x0002\n\n/* PLA_BOOT_CTRL */\n#define AUTOLOAD_DONE\t\t0x0002\n\n/* PLA_LWAKE_CTRL_REG */\n#define LANWAKE_PIN\t\tBIT(7)\n\n/* PLA_SUSPEND_FLAG */\n#define LINK_CHG_EVENT\t\tBIT(0)\n\n/* PLA_INDICATE_FALG */\n#define UPCOMING_RUNTIME_D3\tBIT(0)\n\n/* PLA_MACDBG_PRE and PLA_MACDBG_POST */\n#define DEBUG_OE\t\tBIT(0)\n#define DEBUG_LTSSM\t\t0x0082\n\n/* PLA_EXTRA_STATUS */\n#define CUR_LINK_OK\t\tBIT(15)\n#define U3P3_CHECK_EN\t\tBIT(7)\t/* RTL_VER_05 only */\n#define LINK_CHANGE_FLAG\tBIT(8)\n#define POLL_LINK_CHG\t\tBIT(0)\n\n/* PLA_GPHY_CTRL */\n#define GPHY_FLASH\t\tBIT(1)\n\n/* PLA_POL_GPIO_CTRL */\n#define DACK_DET_EN\t\tBIT(15)\n#define POL_GPHY_PATCH\t\tBIT(4)\n\n/* USB_USB2PHY */\n#define USB2PHY_SUSPEND\t\t0x0001\n#define USB2PHY_L1\t\t0x0002\n\n/* USB_SSPHYLINK1 */\n#define DELAY_PHY_PWR_CHG\tBIT(1)\n\n/* USB_SSPHYLINK2 */\n#define pwd_dn_scale_mask\t0x3ffe\n#define pwd_dn_scale(x)\t\t((x) << 1)\n\n/* USB_CSR_DUMMY1 */\n#define DYNAMIC_BURST\t\t0x0001\n\n/* USB_CSR_DUMMY2 */\n#define EP4_FULL_FC\t\t0x0001\n\n/* USB_DEV_STAT */\n#define STAT_SPEED_MASK\t\t0x0006\n#define STAT_SPEED_HIGH\t\t0x0000\n#define STAT_SPEED_FULL\t\t0x0002\n\n/* USB_FW_FIX_EN0 */\n#define FW_FIX_SUSPEND\t\tBIT(14)\n\n/* USB_FW_FIX_EN1 */\n#define FW_IP_RESET_EN\t\tBIT(9)\n\n/* USB_LPM_CONFIG */\n#define LPM_U1U2_EN\t\tBIT(0)\n\n/* USB_EFUSE */\n#define PASS_THRU_MASK\t\tBIT(0)\n\n/* USB_TX_AGG */\n#define TX_AGG_MAX_THRESHOLD\t0x03\n\n/* USB_RX_BUF_TH */\n#define RX_THR_SUPPER\t\t0x0c350180\n#define RX_THR_HIGH\t\t0x7a120180\n#define RX_THR_SLOW\t\t0xffff0180\n#define RX_THR_B\t\t0x00010001\n\n/* USB_TX_DMA */\n#define TEST_MODE_DISABLE\t0x00000001\n#define TX_SIZE_ADJUST1\t\t0x00000100\n\n/* USB_BMU_RESET */\n#define BMU_RESET_EP_IN\t\t0x01\n#define BMU_RESET_EP_OUT\t0x02\n\n/* USB_BMU_CONFIG */\n#define ACT_ODMA\t\tBIT(1)\n\n/* USB_UPT_RXDMA_OWN */\n#define OWN_UPDATE\t\tBIT(0)\n#define OWN_CLEAR\t\tBIT(1)\n\n/* USB_FW_TASK */\n#define FC_PATCH_TASK\t\tBIT(1)\n\n/* USB_RX_AGGR_NUM */\n#define RX_AGGR_NUM_MASK\t0x1ff\n\n/* USB_ADV_CMD */\n#define ADV_CMD_BUSY\t\tBIT(0)\n#define ADV_CMD_WR\t\tBIT(1)\n#define ADV_CMD_BMU\t\t0\n#define ADV_CMD_IP\t\tBIT(2)\n\n/* USB_TGPHY_CMD */\n#define TGPHY_CMD_BUSY\t\tBIT(0)\n#define TGPHY_CMD_WR\t\tBIT(1)\n\n/* USB_UPS_CTRL */\n#define POWER_CUT\t\t0x0100\n\n/* USB_PM_CTRL_STATUS */\n#define RESUME_INDICATE\t\t0x0001\n\n/* USB_ECM_OPTION */\n#define BYPASS_MAC_RESET\tBIT(5)\n\n/* USB_CSTMR */\n#define FORCE_SUPER\t\tBIT(0)\n\n/* USB_MISC_2 */\n#define UPS_NO_UPS\t\tBIT(7)\n#define UPS_FORCE_PWR_DOWN\tBIT(0)\n\n/* USB_ECM_OP */\n#define\tEN_ALL_SPEED\t\tBIT(0)\n\n/* USB_GPHY_CTRL */\n#define GPHY_PATCH_DONE\t\tBIT(2)\n#define BYPASS_FLASH\t\tBIT(5)\n#define BACKUP_RESTRORE\t\tBIT(6)\n\n/* USB_SPEED_OPTION */\n#define RG_PWRDN_EN\t\tBIT(8)\n#define ALL_SPEED_OFF\t\tBIT(9)\n\n/* USB_FW_CTRL */\n#define FLOW_CTRL_PATCH_OPT\tBIT(1)\n#define AUTO_SPEEDUP\t\tBIT(3)\n#define FLOW_CTRL_PATCH_2\tBIT(8)\n\n/* USB_FC_TIMER */\n#define CTRL_TIMER_EN\t\tBIT(15)\n\n/* USB_USB_CTRL */\n#define CDC_ECM_EN\t\tBIT(3)\n#define RX_AGG_DISABLE\t\t0x0010\n#define RX_ZERO_EN\t\t0x0080\n\n/* USB_U2P3_CTRL */\n#define U2P3_ENABLE\t\t0x0001\n#define RX_DETECT8\t\tBIT(3)\n\n/* USB_POWER_CUT */\n#define PWR_EN\t\t\t0x0001\n#define PHASE2_EN\t\t0x0008\n#define UPS_EN\t\t\tBIT(4)\n#define USP_PREWAKE\t\tBIT(5)\n\n/* USB_MISC_0 */\n#define PCUT_STATUS\t\t0x0001\n#define AD_MASK\t\t\t0xfee0\n\n/* USB_MISC_1 */\n#define BD_MASK\t\t\tBIT(0)\n#define BND_MASK\t\tBIT(2)\n#define BL_MASK\t\t\tBIT(3)\n\n/* USB_RX_EARLY_TIMEOUT */\n#define COALESCE_SUPER\t\t 85000U\n#define COALESCE_HIGH\t\t250000U\n#define COALESCE_SLOW\t\t524280U\n\n/* USB_WDT1_CTRL */\n#define WTD1_EN\t\t\tBIT(0)\n\n/* USB_WDT11_CTRL */\n#define TIMER11_EN\t\t0x0001\n\n/* USB_LPM_CTRL */\n/* bit 4 ~ 5: fifo empty boundary */\n#define FIFO_EMPTY_1FB\t\t0x30\t/* 0x1fb * 64 = 32448 bytes */\n/* bit 2 ~ 3: LMP timer */\n#define LPM_TIMER_MASK\t\t0x0c\n#define LPM_TIMER_500MS\t\t0x04\t/* 500 ms */\n#define LPM_TIMER_500US\t\t0x0c\t/* 500 us */\n#define ROK_EXIT_LPM\t\t0x02\n\n/* USB_AFE_CTRL2 */\n#define SEN_VAL_MASK\t\t0xf800\n#define SEN_VAL_NORMAL\t\t0xa000\n#define SEL_RXIDLE\t\t0x0100\n\n/* USB_UPHY_XTAL */\n#define OOBS_POLLING\t\tBIT(8)\n\n/* USB_UPS_CFG */\n#define SAW_CNT_1MS_MASK\t0x0fff\n#define MID_REVERSE\t\tBIT(5)\t/* RTL8156A */\n\n/* USB_UPS_FLAGS */\n#define UPS_FLAGS_R_TUNE\t\tBIT(0)\n#define UPS_FLAGS_EN_10M_CKDIV\t\tBIT(1)\n#define UPS_FLAGS_250M_CKDIV\t\tBIT(2)\n#define UPS_FLAGS_EN_ALDPS\t\tBIT(3)\n#define UPS_FLAGS_CTAP_SHORT_DIS\tBIT(4)\n#define UPS_FLAGS_SPEED_MASK\t\t(0xf << 16)\n#define ups_flags_speed(x)\t\t((x) << 16)\n#define UPS_FLAGS_EN_EEE\t\tBIT(20)\n#define UPS_FLAGS_EN_500M_EEE\t\tBIT(21)\n#define UPS_FLAGS_EN_EEE_CKDIV\t\tBIT(22)\n#define UPS_FLAGS_EEE_PLLOFF_100\tBIT(23)\n#define UPS_FLAGS_EEE_PLLOFF_GIGA\tBIT(24)\n#define UPS_FLAGS_EEE_CMOD_LV_EN\tBIT(25)\n#define UPS_FLAGS_EN_GREEN\t\tBIT(26)\n#define UPS_FLAGS_EN_FLOW_CTR\t\tBIT(27)\n\nenum spd_duplex {\n\tNWAY_10M_HALF,\n\tNWAY_10M_FULL,\n\tNWAY_100M_HALF,\n\tNWAY_100M_FULL,\n\tNWAY_1000M_FULL,\n\tFORCE_10M_HALF,\n\tFORCE_10M_FULL,\n\tFORCE_100M_HALF,\n\tFORCE_100M_FULL,\n\tFORCE_1000M_FULL,\n\tNWAY_2500M_FULL,\n\tNWAY_5000M_FULL,\n};\n\n/* OCP_ALDPS_CONFIG */\n#define ENPWRSAVE\t\t0x8000\n#define ENPDNPS\t\t\t0x0200\n#define LINKENA\t\t\t0x0100\n#define DIS_SDSAVE\t\t0x0010\n\n/* OCP_PHY_STATUS */\n#define PHY_STAT_MASK\t\t0x0007\n#define PHY_STAT_EXT_INIT\t2\n#define PHY_STAT_LAN_ON\t\t3\n#define PHY_STAT_PWRDN\t\t5\n\n/* OCP_INTR_EN */\n#define INTR_SPEED_FORCE\tBIT(3)\n\n/* OCP_NCTL_CFG */\n#define PGA_RETURN_EN\t\tBIT(1)\n\n/* OCP_POWER_CFG */\n#define EEE_CLKDIV_EN\t\t0x8000\n#define EN_ALDPS\t\t0x0004\n#define EN_10M_PLLOFF\t\t0x0001\n\n/* OCP_EEE_CONFIG1 */\n#define RG_TXLPI_MSK_HFDUP\t0x8000\n#define RG_MATCLR_EN\t\t0x4000\n#define EEE_10_CAP\t\t0x2000\n#define EEE_NWAY_EN\t\t0x1000\n#define TX_QUIET_EN\t\t0x0200\n#define RX_QUIET_EN\t\t0x0100\n#define sd_rise_time_mask\t0x0070\n#define sd_rise_time(x)\t\t(min(x, 7) << 4)\t/* bit 4 ~ 6 */\n#define RG_RXLPI_MSK_HFDUP\t0x0008\n#define SDFALLTIME\t\t0x0007\t/* bit 0 ~ 2 */\n\n/* OCP_EEE_CONFIG2 */\n#define RG_LPIHYS_NUM\t\t0x7000\t/* bit 12 ~ 15 */\n#define RG_DACQUIET_EN\t\t0x0400\n#define RG_LDVQUIET_EN\t\t0x0200\n#define RG_CKRSEL\t\t0x0020\n#define RG_EEEPRG_EN\t\t0x0010\n\n/* OCP_EEE_CONFIG3 */\n#define fast_snr_mask\t\t0xff80\n#define fast_snr(x)\t\t(min(x, 0x1ff) << 7)\t/* bit 7 ~ 15 */\n#define RG_LFS_SEL\t\t0x0060\t/* bit 6 ~ 5 */\n#define MSK_PH\t\t\t0x0006\t/* bit 0 ~ 3 */\n\n/* OCP_EEE_AR */\n/* bit[15:14] function */\n#define FUN_ADDR\t\t0x0000\n#define FUN_DATA\t\t0x4000\n/* bit[4:0] device addr */\n\n/* OCP_EEE_CFG */\n#define CTAP_SHORT_EN\t\t0x0040\n#define EEE10_EN\t\t0x0010\n\n/* OCP_DOWN_SPEED */\n#define EN_EEE_CMODE\t\tBIT(14)\n#define EN_EEE_1000\t\tBIT(13)\n#define EN_EEE_100\t\tBIT(12)\n#define EN_10M_CLKDIV\t\tBIT(11)\n#define EN_10M_BGOFF\t\t0x0080\n\n/* OCP_10GBT_CTRL */\n#define RTL_ADV2_5G_F_R\t\tBIT(5)\t/* Advertise 2.5GBASE-T fast-retrain */\n\n/* OCP_PHY_STATE */\n#define TXDIS_STATE\t\t0x01\n#define ABD_STATE\t\t0x02\n\n/* OCP_PHY_PATCH_STAT */\n#define PATCH_READY\t\tBIT(6)\n\n/* OCP_PHY_PATCH_CMD */\n#define PATCH_REQUEST\t\tBIT(4)\n\n/* OCP_PHY_LOCK */\n#define PATCH_LOCK\t\tBIT(0)\n\n/* OCP_ADC_CFG */\n#define CKADSEL_L\t\t0x0100\n#define ADC_EN\t\t\t0x0080\n#define EN_EMI_L\t\t0x0040\n\n/* OCP_SYSCLK_CFG */\n#define sysclk_div_expo(x)\t(min(x, 5) << 8)\n#define clk_div_expo(x)\t\t(min(x, 5) << 4)\n\n/* SRAM_GREEN_CFG */\n#define GREEN_ETH_EN\t\tBIT(15)\n#define R_TUNE_EN\t\tBIT(11)\n\n/* SRAM_LPF_CFG */\n#define LPF_AUTO_TUNE\t\t0x8000\n\n/* SRAM_10M_AMP1 */\n#define GDAC_IB_UPALL\t\t0x0008\n\n/* SRAM_10M_AMP2 */\n#define AMP_DN\t\t\t0x0200\n\n/* SRAM_IMPEDANCE */\n#define RX_DRIVING_MASK\t\t0x6000\n\n/* SRAM_PHY_LOCK */\n#define PHY_PATCH_LOCK\t\t0x0001\n\nenum rtl_register_content {\n\t_5000bps\t= BIT(12),\n\t_2500bps\t= BIT(10),\n\t_1250bps\t= BIT(9),\n\t_500bps\t\t= BIT(8),\n\t_tx_flow\t= BIT(6),\n\t_rx_flow\t= BIT(5),\n\t_1000bps\t= 0x10,\n\t_100bps\t\t= 0x08,\n\t_10bps\t\t= 0x04,\n\tLINK_STATUS\t= 0x02,\n\tFULL_DUP\t= 0x01,\n};\n\n#define is_speed_2500(_speed)\t(((_speed) & (_2500bps | LINK_STATUS)) == (_2500bps | LINK_STATUS))\n#define is_flow_control(_speed)\t(((_speed) & (_tx_flow | _rx_flow)) == (_tx_flow | _rx_flow))\n\n#define RTL8152_MAX_TX\t\t4\n#define RTL8152_MAX_RX\t\t10\n#define INTBUFSIZE\t\t2\n\n#define RTL8152_RX_MAX_PENDING\t4096\n#define RTL8152_RXFG_HEADSZ\t256\n\n#define INTR_LINK\t\t0x0004\n\n#define RTL8152_REQT_READ\t0xc0\n#define RTL8152_REQT_WRITE\t0x40\n#define RTL8152_REQ_GET_REGS\t0x05\n#define RTL8152_REQ_SET_REGS\t0x05\n\n#define BYTE_EN_DWORD\t\t0xff\n#define BYTE_EN_WORD\t\t0x33\n#define BYTE_EN_BYTE\t\t0x11\n#define BYTE_EN_SIX_BYTES\t0x3f\n#define BYTE_EN_START_MASK\t0x0f\n#define BYTE_EN_END_MASK\t0xf0\n\n#define RTL8152_RMS\t\t(VLAN_ETH_FRAME_LEN + ETH_FCS_LEN)\n#define RTL8153_RMS\t\tRTL8153_MAX_PACKET\n#define RTL8152_TX_TIMEOUT\t(5 * HZ)\n#define mtu_to_size(m)\t\t((m) + VLAN_ETH_HLEN + ETH_FCS_LEN)\n#define size_to_mtu(s)\t\t((s) - VLAN_ETH_HLEN - ETH_FCS_LEN)\n\n#define RTL_MAX_SG_NUM\t\t16\n\n/* rtl8152 flags */\nenum rtl8152_flags {\n\tRTL8152_UNPLUG = 0,\n\tRTL8152_SET_RX_MODE,\n\tWORK_ENABLE,\n\tRTL8152_LINK_CHG,\n\tSELECTIVE_SUSPEND,\n\tPHY_RESET,\n\tSCHEDULE_TASKLET,\n\tGREEN_ETHERNET,\n\tRX_EPROTO,\n\tRECOVER_SPEED,\n\tDISABLE_EEE_BOTTOM,\n};\n\n/* Define these values to match your device */\n#define VENDOR_ID_ASUS\t\t\t0x0b05\n#define VENDOR_ID_REALTEK\t\t0x0bda\n#define VENDOR_ID_MICROSOFT\t\t0x045e\n#define VENDOR_ID_SAMSUNG\t\t0x04e8\n#define VENDOR_ID_LENOVO\t\t0x17ef\n#define VENDOR_ID_LINKSYS\t\t0x13b1\n#define VENDOR_ID_NVIDIA\t\t0x0955\n#define VENDOR_ID_TRENDNET\t\t0x20f4\n#define VENDOR_ID_TPLINK\t\t0x2357\n#define VENDOR_ID_ELECOM\t\t0x056e\n#define VENDOR_ID_DLINK\t\t\t0x2001\n#define VENDOR_ID_BELKIN\t\t0x050d\n\n#define MCU_TYPE_PLA\t\t\t0x0100\n#define MCU_TYPE_USB\t\t\t0x0000\n\n#define DEVICE_ID_LENOVO_USB_C_TRAVEL_HUB\t\t0x721e\n#define DEVICE_ID_THINKPAD_ONELINK_PLUS_DOCK\t\t0x3054\n#define DEVICE_ID_THINKPAD_THUNDERBOLT3_DOCK_GEN2\t0x3082\n#define DEVICE_ID_THINKPAD_USB_C_DONGLE\t\t\t0x720c\n#define DEVICE_ID_THINKPAD_USB_C_DOCK_GEN2\t\t0xa387\n#define DEVICE_ID_THINKPAD_USB_C_DOCK_GEN3\t\t0x3062\n\nstruct tally_counter {\n\t__le64\ttx_packets;\n\t__le64\trx_packets;\n\t__le64\ttx_errors;\n\t__le32\trx_errors;\n\t__le16\trx_missed;\n\t__le16\talign_errors;\n\t__le32\ttx_one_collision;\n\t__le32\ttx_multi_collision;\n\t__le64\trx_unicast;\n\t__le64\trx_broadcast;\n\t__le32\trx_multicast;\n\t__le16\ttx_aborted;\n\t__le16\ttx_underrun;\n};\n\nstruct rx_desc {\n\t__le32 opts1;\n#define RD_CRC\t\t\t\tBIT(15)\n#define RX_LEN_MASK\t\t\t0x7fff\n\n\t__le32 opts2;\n#define RD_UDP_CS\t\t\tBIT(23)\n#define RD_TCP_CS\t\t\tBIT(22)\n#define RD_IPV6_CS\t\t\tBIT(20)\n#define RD_IPV4_CS\t\t\tBIT(19)\n\n\t__le32 opts3;\n#define IPF\t\t\t\tBIT(23) /* IP checksum fail */\n#define UDPF\t\t\t\tBIT(22) /* UDP checksum fail */\n#define TCPF\t\t\t\tBIT(21) /* TCP checksum fail */\n#define RX_VLAN_TAG\t\t\tBIT(16)\n\n\t__le32 opts4;\n\t__le32 opts5;\n\t__le32 opts6;\n};\n\nstruct tx_desc {\n\t__le32 opts1;\n#define TX_FS\t\t\tBIT(31) /* First segment of a packet */\n#define TX_LS\t\t\tBIT(30) /* Final segment of a packet */\n#define LGSEND\t\t\tBIT(29)\n#define GTSENDV4\t\tBIT(28)\n#define GTSENDV6\t\tBIT(27)\n#define GTTCPHO_SHIFT\t\t18\n#define GTTCPHO_MAX\t\t0x7fU\n#define TX_LEN_MAX\t\t0x3ffffU\n\n\t__le32 opts2;\n#define UDP_CS\t\t\tBIT(31) /* Calculate UDP/IP checksum */\n#define TCP_CS\t\t\tBIT(30) /* Calculate TCP/IP checksum */\n#define IPV4_CS\t\t\tBIT(29) /* Calculate IPv4 checksum */\n#define IPV6_CS\t\t\tBIT(28) /* Calculate IPv6 checksum */\n#define MSS_SHIFT\t\t17\n#define MSS_MAX\t\t\t0x7ffU\n#define TCPHO_SHIFT\t\t17\n#define TCPHO_MAX\t\t0x7ffU\n#define TX_VLAN_TAG\t\tBIT(16)\n};\n\nstruct rx_desc_v2 {\n\t__le32 opts1;\n#define RX_LEN_MASK_2\t\t\t0xfffe0000\n#define rx_v2_get_len(x)\t\t(((x) & RX_LEN_MASK_2) >> 17)\n#define RX_VLAN_TAG_2\t\t\tBIT(3)\n#define RX_VER_MASK\t\t\t0x3\n\n\t__le32 opts2;\n\n\t__le32 opts3;\n#define IPF_2\t\t\t\tBIT(26) /* IP checksum fail */\n#define UDPF_2\t\t\t\tBIT(25) /* UDP checksum fail */\n#define TCPF_2\t\t\t\tBIT(24) /* TCP checksum fail */\n#define RD_IPV6_CS_2\t\t\tBIT(15)\n#define RD_IPV4_CS_2\t\t\tBIT(14)\n#define RD_UDP_CS_2\t\t\tBIT(11)\n#define RD_TCP_CS_2\t\t\tBIT(10)\n\n\t__le32 opts4;\n};\n\nstruct tx_desc_v2 {\n\t__le32 opts1;\n\n\t__le32 opts2;\n#define TCPHO_MAX_2\t\t0x3ffU\n\n\t__le32 opts3;\n#define tx_v2_set_len(x)\t((x) << 4)\n\n\t__le32 opts4;\n#define TX_SIG\t\t\t(0x15 << 27)\n};\n\nstruct r8152;\n\nstruct rx_agg {\n\tstruct list_head list, info_list;\n\tstruct urb *urb;\n\tstruct r8152 *context;\n\tstruct page *page;\n\tvoid *buffer;\n};\n\nstruct tx_agg {\n\tstruct list_head list;\n\tstruct urb *urb;\n\tstruct r8152 *context;\n\tstruct sk_buff_head tx_skb;\n\tvoid *buffer;\n\tvoid *head;\n\tu32 skb_num;\n\tu32 skb_len;\n\tu32 skb_bytes;\n};\n\nstruct r8152 {\n\tunsigned long flags;\n\tstruct usb_device *udev;\n\tstruct napi_struct napi;\n\tstruct usb_interface *intf;\n\tstruct net_device *netdev;\n\tstruct urb *intr_urb;\n\tstruct tx_agg tx_info[RTL8152_MAX_TX];\n\tstruct list_head rx_info, rx_used;\n\tstruct list_head rx_done, tx_free;\n\tstruct sk_buff_head tx_queue, rx_queue;\n\tspinlock_t rx_lock, tx_lock;\n\tstruct delayed_work schedule, hw_phy_work;\n\tstruct mii_if_info mii;\n\tstruct mutex control;\t/* use for hw setting */\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,0,0)\n\tstruct vlan_group *vlgrp;\n#endif\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,22)\n\tstruct net_device_stats stats;\n#endif\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,23) && defined(CONFIG_PM_SLEEP)\n\tstruct notifier_block pm_notifier;\n#endif\n#if defined(RTL8152_S5_WOL) && defined(CONFIG_PM)\n\tstruct notifier_block reboot_notifier;\n#endif /* defined(RTL8152_S5_WOL) && defined(CONFIG_PM) */\n\tstruct tasklet_struct tx_tl;\n\n\tstruct rtl_ops {\n\t\tint (*init)(struct r8152 *tp);\n\t\tint (*enable)(struct r8152 *tp);\n\t\tint (*disable)(struct r8152 *tp);\n\t\tint (*up)(struct r8152 *tp);\n\t\tint (*down)(struct r8152 *tp);\n\t\tvoid (*unload)(struct r8152 *tp);\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0)\n\t\tint (*eee_get)(struct r8152 *tp, struct ethtool_keee *eee);\n\t\tint (*eee_set)(struct r8152 *tp, struct ethtool_keee *eee);\n#endif /* LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0) */\n\t\tbool (*in_nway)(struct r8152 *tp);\n\t\tvoid (*hw_phy_cfg)(struct r8152 *tp);\n\t\tint (*autosuspend_en)(struct r8152 *tp, bool enable);\n\t\tint (*change_mtu)(struct r8152 *tp);\n\t\tint (*phy_read)(struct r8152 *tp, u16 addr, u16 *data);\n\t\tint (*phy_write)(struct r8152 *tp, u16 addr, u16 data);\n\t} rtl_ops;\n\n\tstruct ups_info {\n\t\tu32 r_tune:1;\n\t\tu32 _10m_ckdiv:1;\n\t\tu32 _250m_ckdiv:1;\n\t\tu32 aldps:1;\n\t\tu32 lite_mode:2;\n\t\tu32 speed_duplex:4;\n\t\tu32 eee:1;\n\t\tu32 eee_lite:1;\n\t\tu32 eee_ckdiv:1;\n\t\tu32 eee_plloff_100:1;\n\t\tu32 eee_plloff_giga:1;\n\t\tu32 eee_cmod_lv:1;\n\t\tu32 green:1;\n\t\tu32 flow_control:1;\n\t\tu32 ctap_short_off:1;\n\t} ups_info;\n\n\tstruct desc_info {\n\t\tbool (*vlan_tag)(struct r8152 *tp, void *desc,\n\t\t\t\t struct sk_buff *skb);\n\t\tint (*csum)(struct r8152 *tp, void *desc, struct sk_buff *skb);\n\t\tvoid (*len)(struct r8152 *tp, void *desc, u32 *len);\n\t\tu8 align;\n\t\tu8 size;\n\t} rx_desc, tx_desc;\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,0,0)\n\tvoid (*vlan_put_tag)(struct r8152 *tp, void *desc, struct sk_buff *skb);\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0) */\n\n\tatomic_t rx_count;\n\n\tbool eee_en;\n\tint intr_interval;\n\tu32 saved_wolopts;\n\tu32 msg_enable;\n\tu32 tx_qlen;\n\tu32 coalesce;\n\tu32 advertising;\n\tu32 rx_buf_sz;\n\tu32 rx_copybreak;\n\tu32 rx_pending;\n\tu32 fc_pause_on, fc_pause_off;\n\tu32 rx_agg_free_ref;\n\n\tunsigned int pipe_in, pipe_out, pipe_intr, pipe_ctrl_in, pipe_ctrl_out;\n\n\tu32 support_2500full:1;\n\tu32 support_5000full:1;\n\tu32 sg_use:1;\n//\tu32 dash_mode:1;\n\tu32 lenovo_macpassthru:1;\n\tu32 dell_macpassthru:1;\n\n\tu16 ocp_base;\n\tu16 speed;\n\tu16 eee_adv;\n\tu16 eee_adv2;\n\tu8 *intr_buff;\n\tu8 version;\n\tu8 rtk_enable_diag;\n\tu8 duplex;\n\tu8 autoneg;\n};\n\nenum rtl_version {\n\tRTL_VER_UNKNOWN = 0,\n\tRTL_VER_01,\n\tRTL_VER_02,\n\tRTL_VER_03,\n\tRTL_VER_04,\n\tRTL_VER_05,\n\tRTL_VER_06,\n\tRTL_VER_07,\n\tRTL_VER_08,\n\tRTL_VER_09,\n\n\tRTL_TEST_01,\n\tRTL_VER_10,\n\tRTL_VER_11,\n\tRTL_VER_12,\n\tRTL_VER_13,\n\tRTL_VER_14,\n\tRTL_VER_15,\n\n\tRTL_TEST_02,\n\tRTL_VER_16,\n\tRTL_VER_17,\n\n\tRTL_VER_MAX\n};\n\nenum tx_csum_stat {\n\tTX_CSUM_SUCCESS = 0,\n\tTX_CSUM_TSO,\n\tTX_CSUM_NONE\n};\n\nenum adv_access_type {\n\tADV_TYPE_BMU = 0,\n\tADV_TYPE_IP,\n\tADV_TYPE_MAX\n};\n\n#define RTL_ADVERTISED_10_HALF\t\t\tBIT(0)\n#define RTL_ADVERTISED_10_FULL\t\t\tBIT(1)\n#define RTL_ADVERTISED_100_HALF\t\t\tBIT(2)\n#define RTL_ADVERTISED_100_FULL\t\t\tBIT(3)\n#define RTL_ADVERTISED_1000_HALF\t\tBIT(4)\n#define RTL_ADVERTISED_1000_FULL\t\tBIT(5)\n#define RTL_ADVERTISED_2500_FULL\t\tBIT(6)\n#define RTL_ADVERTISED_5000_FULL\t\tBIT(7)\n\n/* Maximum number of multicast addresses to filter (vs. Rx-all-multicast).\n * The RTL chips use a 64 element hash table based on the Ethernet CRC.\n */\nstatic const int multicast_filter_limit = 32;\nstatic unsigned int agg_buf_sz = 16384;\n\n#define RTL_LIMITED_TSO_SIZE\t(size_to_mtu(agg_buf_sz) - tp->tx_desc.size)\n\nstatic\nint get_registers(struct r8152 *tp, u16 value, u16 index, u16 size, void *data)\n{\n\tint ret;\n\tvoid *tmp;\n\n\ttmp = kmalloc(size, GFP_KERNEL);\n\tif (!tmp)\n\t\treturn -ENOMEM;\n\n\tret = usb_control_msg(tp->udev, tp->pipe_ctrl_in,\n\t\t\t      RTL8152_REQ_GET_REGS, RTL8152_REQT_READ,\n\t\t\t      value, index, tmp, size, USB_CTRL_GET_TIMEOUT);\n\tif (ret < 0)\n\t\tmemset(data, 0xff, size);\n\telse\n\t\tmemcpy(data, tmp, size);\n\n\tkfree(tmp);\n\n\treturn ret;\n}\n\nstatic\nint set_registers(struct r8152 *tp, u16 value, u16 index, u16 size, void *data)\n{\n\tint ret;\n\tvoid *tmp;\n\n\ttmp = kmemdup(data, size, GFP_KERNEL);\n\tif (!tmp)\n\t\treturn -ENOMEM;\n\n\tret = usb_control_msg(tp->udev, tp->pipe_ctrl_out,\n\t\t\t      RTL8152_REQ_SET_REGS, RTL8152_REQT_WRITE,\n\t\t\t      value, index, tmp, size, USB_CTRL_SET_TIMEOUT);\n\n\tkfree(tmp);\n\n\treturn ret;\n}\n\nstatic void rtl_set_unplug(struct r8152 *tp)\n{\n\tif (tp->udev->state == USB_STATE_NOTATTACHED) {\n\t\tset_bit(RTL8152_UNPLUG, &tp->flags);\n\t\tsmp_mb__after_atomic();\n\t}\n}\n\nstatic int generic_ocp_read(struct r8152 *tp, u16 index, u16 size,\n\t\t\t    void *data, u16 type)\n{\n\tu16 limit = 64;\n\tint ret = 0;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\t/* both size and indix must be 4 bytes align */\n\tif ((size & 3) || !size || (index & 3) || !data) {\n\t\tWARN_ON_ONCE(1);\n\t\treturn -EPERM;\n\t}\n\n\tif ((u32)index + (u32)size > 0xffff)\n\t\treturn -EPERM;\n\n\twhile (size) {\n\t\tif (size > limit) {\n\t\t\tret = get_registers(tp, index, type, limit, data);\n\t\t\tif (ret < 0)\n\t\t\t\tbreak;\n\n\t\t\tindex += limit;\n\t\t\tdata += limit;\n\t\t\tsize -= limit;\n\t\t} else {\n\t\t\tret = get_registers(tp, index, type, size, data);\n\t\t\tif (ret < 0)\n\t\t\t\tbreak;\n\n\t\t\tindex += size;\n\t\t\tdata += size;\n\t\t\tsize = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (ret == -ENODEV)\n\t\trtl_set_unplug(tp);\n\n\tif (ret < 0)\n\t\tdev_err(&tp->intf->dev,\n\t\t\t\"read type=0x%04x, index=0x%04x fail %d\\n\",\n\t\t\ttype, index, ret);\n\n\treturn ret;\n}\n\nstatic int generic_ocp_write(struct r8152 *tp, u16 index, u16 byteen,\n\t\t\t     u16 size, void *data, u16 type)\n{\n\tint ret;\n\tu16 byteen_start, byteen_end, byen;\n\tu16 limit = 512;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\t/* both size and indix must be 4 bytes align */\n\tif ((size & 3) || !size || (index & 3) || !data) {\n\t\tWARN_ON_ONCE(1);\n\t\treturn -EPERM;\n\t}\n\n\tif ((u32)index + (u32)size > 0xffff)\n\t\treturn -EPERM;\n\n\tbyteen_start = byteen & BYTE_EN_START_MASK;\n\tbyteen_end = byteen & BYTE_EN_END_MASK;\n\n\tbyen = byteen_start | (byteen_start << 4);\n\n\t/* Split the first DWORD if the byte_en is not 0xff */\n\tif (byen != BYTE_EN_DWORD) {\n\t\tret = set_registers(tp, index, type | byen, 4, data);\n\t\tif (ret < 0)\n\t\t\tgoto error1;\n\n\t\tindex += 4;\n\t\tdata += 4;\n\t\tsize -= 4;\n\t}\n\n\tif (size) {\n\t\tbyen = byteen_end | (byteen_end >> 4);\n\n\t\t/* Split the last DWORD if the byte_en is not 0xff */\n\t\tif (byen != BYTE_EN_DWORD)\n\t\t\tsize -= 4;\n\n\t\twhile (size) {\n\t\t\tif (size > limit) {\n\t\t\t\tret = set_registers(tp, index,\n\t\t\t\t\t\t    type | BYTE_EN_DWORD,\n\t\t\t\t\t\t    limit, data);\n\t\t\t\tif (ret < 0)\n\t\t\t\t\tgoto error1;\n\n\t\t\t\tindex += limit;\n\t\t\t\tdata += limit;\n\t\t\t\tsize -= limit;\n\t\t\t} else {\n\t\t\t\tret = set_registers(tp, index,\n\t\t\t\t\t\t    type | BYTE_EN_DWORD,\n\t\t\t\t\t\t    size, data);\n\t\t\t\tif (ret < 0)\n\t\t\t\t\tgoto error1;\n\n\t\t\t\tindex += size;\n\t\t\t\tdata += size;\n\t\t\t\tsize = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t/* Set the last DWORD */\n\t\tif (byen != BYTE_EN_DWORD)\n\t\t\tret = set_registers(tp, index, type | byen, 4, data);\n\t}\n\nerror1:\n\tif (ret == -ENODEV)\n\t\trtl_set_unplug(tp);\n\n\tif (ret < 0)\n\t\tdev_err(&tp->intf->dev,\n\t\t\t\"write type=0x%04x, index=0x%04x fail %d\\n\",\n\t\t\ttype | byteen, index, ret);\n\n\treturn ret;\n}\n\nstatic inline\nint pla_ocp_read(struct r8152 *tp, u16 index, u16 size, void *data)\n{\n\treturn generic_ocp_read(tp, index, size, data, MCU_TYPE_PLA);\n}\n\nstatic inline\nint pla_ocp_write(struct r8152 *tp, u16 index, u16 byteen, u16 size, void *data)\n{\n\treturn generic_ocp_write(tp, index, byteen, size, data, MCU_TYPE_PLA);\n}\n\nstatic inline\nint usb_ocp_read(struct r8152 *tp, u16 index, u16 size, void *data)\n{\n\treturn generic_ocp_read(tp, index, size, data, MCU_TYPE_USB);\n}\n\nstatic inline\nint usb_ocp_write(struct r8152 *tp, u16 index, u16 byteen, u16 size, void *data)\n{\n\treturn generic_ocp_write(tp, index, byteen, size, data, MCU_TYPE_USB);\n}\n\nstatic int ocp_read_dword(struct r8152 *tp, u16 type, u16 index, u32 *value)\n{\n\t__le32 data;\n\tint ret;\n\n\tret = generic_ocp_read(tp, index, sizeof(data), &data, type);\n\tWARN_ON_ONCE(ret != sizeof(data));\n\n\t*value = __le32_to_cpu(data);\n\n\treturn ret;\n}\n\nstatic int ocp_write_dword(struct r8152 *tp, u16 type, u16 index, u32 data)\n{\n\t__le32 tmp = __cpu_to_le32(data);\n\tint ret;\n\n\tret = generic_ocp_write(tp, index, BYTE_EN_DWORD, sizeof(tmp), &tmp,\n\t\t\t\ttype);\n\tWARN_ON_ONCE(ret != sizeof(tmp));\n\treturn ret;\n}\n\nstatic int ocp_read_word(struct r8152 *tp, u16 type, u16 index, u32 *value)\n{\n\tu16 byen = BYTE_EN_WORD;\n\tu8 shift = index & 2;\n\t__le32 tmp;\n\tu32 data;\n\tint ret;\n\n\tindex &= ~3;\n\tbyen <<= shift;\n\n\tret = generic_ocp_read(tp, index, sizeof(tmp), &tmp, type | byen);\n\tWARN_ON_ONCE(ret != sizeof(tmp));\n\n\tdata = __le32_to_cpu(tmp);\n\tdata >>= (shift * 8);\n\tdata &= 0xffff;\n\n\t*value = (u16)data;\n\n\treturn ret;\n}\n\nstatic int ocp_write_word(struct r8152 *tp, u16 type, u16 index, u32 data)\n{\n\tu16 byen = BYTE_EN_WORD;\n\tu8 shift = index & 2;\n\tu32 mask = 0xffff;\n\t__le32 tmp;\n\tint ret;\n\n\tdata &= mask;\n\n\tif (shift) {\n\t\tbyen <<= shift;\n\t\tdata <<= (shift * 8);\n\t\tindex &= ~3;\n\t}\n\n\ttmp = __cpu_to_le32(data);\n\n\tret = generic_ocp_write(tp, index, byen, sizeof(tmp), &tmp, type);\n\tWARN_ON_ONCE(ret != sizeof(tmp));\n\n\treturn ret;\n}\n\nstatic int ocp_read_byte(struct r8152 *tp, u16 type, u16 index, u32 *value)\n{\n\tu8 shift = index & 3;\n\t__le32 tmp;\n\tu32 data;\n\tint ret;\n\n\tindex &= ~3;\n\n\tret = generic_ocp_read(tp, index, sizeof(tmp), &tmp, type);\n\tWARN_ON_ONCE(ret != sizeof(tmp));\n\n\tdata = __le32_to_cpu(tmp);\n\tdata >>= (shift * 8);\n\tdata &= 0xff;\n\n\t*value = (u8)data;\n\n\treturn ret;\n}\n\nstatic int ocp_write_byte(struct r8152 *tp, u16 type, u16 index, u32 data)\n{\n\tu16 byen = BYTE_EN_BYTE;\n\tu8 shift = index & 3;\n\tu32 mask = 0xff;\n\t__le32 tmp;\n\tint ret;\n\n\tdata &= mask;\n\n\tif (shift) {\n\t\tbyen <<= shift;\n\t\tdata <<= (shift * 8);\n\t\tindex &= ~3;\n\t}\n\n\ttmp = __cpu_to_le32(data);\n\n\tret = generic_ocp_write(tp, index, byen, sizeof(tmp), &tmp, type);\n\tWARN_ON_ONCE(ret != sizeof(tmp));\n\n\treturn ret;\n}\n\nstatic int r8152_phy_read(struct r8152 *tp, u16 addr, u16 *data)\n{\n\tu16 ocp_base, ocp_index;\n\tu32 ocp_data;\n\tint ret;\n\n\tocp_base = addr & 0xf000;\n\tif (ocp_base != tp->ocp_base) {\n\t\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_OCP_GPHY_BASE,\n\t\t\t\t     ocp_base);\n\t\tif (ret < 0) {\n\t\t\ttp->ocp_base = 0;\n\t\t\tgoto out;\n\t\t}\n\t\ttp->ocp_base = ocp_base;\n\t}\n\n\tocp_index = (addr & 0x0fff) | 0xb000;\n\tret = ocp_read_word(tp, MCU_TYPE_PLA, ocp_index, &ocp_data);\n\t*data = (u16)ocp_data;\n\nout:\n\treturn ret;\n}\n\nstatic int r8152_phy_write(struct r8152 *tp, u16 addr, u16 data)\n{\n\tu16 ocp_base, ocp_index;\n\tint ret;\n\n\tocp_base = addr & 0xf000;\n\tif (ocp_base != tp->ocp_base) {\n\t\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_OCP_GPHY_BASE,\n\t\t\t\t     ocp_base);\n\t\tif (ret < 0) {\n\t\t\ttp->ocp_base = 0;\n\t\t\tgoto out;\n\t\t}\n\t\ttp->ocp_base = ocp_base;\n\t}\n\n\tocp_index = (addr & 0x0fff) | 0xb000;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, ocp_index, data);\n\nout:\n\treturn ret;\n}\n\nstatic int ocp_reg_read(struct r8152 *tp, u16 addr, u16 *data)\n{\n\treturn tp->rtl_ops.phy_read(tp, addr, data);\n}\n\nstatic int ocp_reg_write(struct r8152 *tp, u16 addr, u16 data)\n{\n\treturn tp->rtl_ops.phy_write(tp, addr, data);\n}\n\nstatic int r8152_mdio_write(struct r8152 *tp, u32 reg_addr, u32 value)\n{\n\treturn ocp_reg_write(tp, OCP_BASE_MII + reg_addr * 2, value);\n}\n\nstatic int r8152_mdio_read(struct r8152 *tp, u32 reg_addr)\n{\n\tint ret;\n\tu16 var;\n\n\tret = ocp_reg_read(tp, OCP_BASE_MII + reg_addr * 2, &var);\n\n\treturn (ret < 0) ? ret : var;\n}\n\nstatic int sram_write(struct r8152 *tp, u16 addr, u16 data)\n{\n\tint ret;\n\n\tret = ocp_reg_write(tp, OCP_SRAM_ADDR, addr);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_reg_write(tp, OCP_SRAM_DATA, data);\n\nout:\n\treturn ret;\n}\n\nstatic int sram_read(struct r8152 *tp, u16 addr, u16 *data)\n{\n\tint ret;\n\n\tret = ocp_reg_write(tp, OCP_SRAM_ADDR, addr);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_reg_read(tp, OCP_SRAM_DATA, data);\n\nout:\n\treturn ret;\n}\n\nstatic int read_mii_word(struct net_device *netdev, int phy_id, int reg)\n{\n\tstruct r8152 *tp = netdev_priv(netdev);\n\tint ret, lock;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tif (phy_id != R8152_PHY_ID)\n\t\treturn -EINVAL;\n\n\tlock = mutex_trylock(&tp->control);\n\n\tret = r8152_mdio_read(tp, reg);\n\n\tif (lock) {\n\t\tmutex_unlock(&tp->control);\n\t\tnetif_warn(tp, drv, netdev, \"miss mutex for read_mii_word?\\n\");\n\t}\n\n\treturn ret;\n}\n\nstatic\nvoid write_mii_word(struct net_device *netdev, int phy_id, int reg, int val)\n{\n\tstruct r8152 *tp = netdev_priv(netdev);\n\tint lock;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn;\n\n\tif (phy_id != R8152_PHY_ID)\n\t\treturn;\n\n\tlock = mutex_trylock(&tp->control);\n\n\tr8152_mdio_write(tp, reg, val);\n\n\tif (lock) {\n\t\tmutex_unlock(&tp->control);\n\t\tnetif_warn(tp, drv, netdev, \"miss mutex for write_mii_word?\\n\");\n\t}\n}\n\nstatic int\nocp_dword_w0w1(struct r8152 *tp, u16 type, u16 index, u32 clear, u32 set)\n{\n\tu32 ocp_data;\n\tint ret;\n\n\tret = ocp_read_dword(tp, type, index, &ocp_data);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tocp_data = (ocp_data & ~clear) | set;\n\tret = ocp_write_dword(tp, type, index, ocp_data);\n\nout:\n\treturn ret;\n}\n\nstatic int\nocp_word_w0w1(struct r8152 *tp, u16 type, u16 index, u16 clear, u16 set)\n{\n\tu32 ocp_data;\n\tint ret;\n\n\tret = ocp_read_word(tp, type, index, &ocp_data);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tocp_data = (ocp_data & ~clear) | set;\n\tret = ocp_write_word(tp, type, index, ocp_data);\n\nout:\n\treturn ret;\n}\n\nstatic int\nocp_byte_w0w1(struct r8152 *tp, u16 type, u16 index, u8 clear, u8 set)\n{\n\tu32 ocp_data;\n\tint ret;\n\n\tret = ocp_read_byte(tp, type, index, &ocp_data);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tocp_data = (ocp_data & ~clear) | set;\n\tret = ocp_write_byte(tp, type, index, ocp_data);\n\nout:\n\treturn ret;\n}\n\nstatic int\nocp_dword_clr_bits(struct r8152 *tp, u16 type, u16 index, u32 clear)\n{\n\treturn ocp_dword_w0w1(tp, type, index, clear, 0);\n}\n\nstatic int\nocp_dword_set_bits(struct r8152 *tp, u16 type, u16 index, u32 set)\n{\n\treturn ocp_dword_w0w1(tp, type, index, 0, set);\n}\n\nstatic int\nocp_word_clr_bits(struct r8152 *tp, u16 type, u16 index, u16 clear)\n{\n\treturn ocp_word_w0w1(tp, type, index, clear, 0);\n}\n\nstatic int\nocp_word_set_bits(struct r8152 *tp, u16 type, u16 index, u16 set)\n{\n\treturn ocp_word_w0w1(tp, type, index, 0, set);\n}\n\nstatic int\nocp_word_test_and_clr_bits(struct r8152 *tp, u16 type, u16 index, u16 clear)\n{\n\tu32 ocp_data;\n\tint ret;\n\n\tret = ocp_read_word(tp, type, index, &ocp_data);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (ocp_data & clear) {\n\t\tret = ocp_write_word(tp, type, index, ocp_data & ~clear);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\tret = ocp_data & clear;\n\nout:\n\treturn ret;\n}\n\nstatic int\nocp_byte_clr_bits(struct r8152 *tp, u16 type, u16 index, u8 clear)\n{\n\treturn ocp_byte_w0w1(tp, type, index, clear, 0);\n}\n\nstatic int\nocp_byte_set_bits(struct r8152 *tp, u16 type, u16 index, u8 set)\n{\n\treturn ocp_byte_w0w1(tp, type, index, 0, set);\n}\n\nstatic int ocp_reg_w0w1(struct r8152 *tp, u16 addr, u16 clear, u16 set)\n{\n\tu16 data;\n\tint ret;\n\n\tret = ocp_reg_read(tp, addr, &data);\n\tif (ret < 0)\n\t\tgoto out;\n\tdata = (data & ~clear) | set;\n\tret = ocp_reg_write(tp, addr, data);\n\nout:\n\treturn ret;\n}\n\nstatic int ocp_reg_clr_bits(struct r8152 *tp, u16 addr, u16 clear)\n{\n\treturn ocp_reg_w0w1(tp, addr, clear, 0);\n}\n\nstatic int ocp_reg_set_bits(struct r8152 *tp, u16 addr, u16 set)\n{\n\treturn ocp_reg_w0w1(tp, addr, 0, set);\n}\n\nstatic int sram_write_w0w1(struct r8152 *tp, u16 addr, u16 clear, u16 set)\n{\n\tu16 data;\n\tint ret;\n\n\tret = sram_read(tp, addr, &data);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tdata = (data & ~clear) | set;\n\tret = ocp_reg_write(tp, OCP_SRAM_DATA, data);\n\nout:\n\treturn ret;\n}\n\nstatic int sram_set_bits(struct r8152 *tp, u16 addr, u16 set)\n{\n\treturn sram_write_w0w1(tp, addr, 0, set);\n}\n\nstatic int sram_clr_bits(struct r8152 *tp, u16 addr, u16 clear)\n{\n\treturn sram_write_w0w1(tp, addr, clear, 0);\n}\n\nstatic int r8152_mdio_set_bit(struct r8152 *tp, u16 addr, u16 set)\n{\n\tint data;\n\n\tdata = r8152_mdio_read(tp, addr);\n\tif (data < 0)\n\t\tgoto out;\n\n\tdata = r8152_mdio_write(tp, addr, data | set);\n\nout:\n\treturn data;\n}\n\nstatic int r8152_mdio_clr_bit(struct r8152 *tp, u16 addr, u16 clear)\n{\n\tint data;\n\n\tdata = r8152_mdio_read(tp, addr);\n\tif (data < 0)\n\t\tgoto out;\n\n\tdata = r8152_mdio_write(tp, addr, data & ~clear);\n\nout:\n\treturn data;\n}\n\nstatic int r8152_mdio_test_and_clr_bit(struct r8152 *tp, u16 addr, u16 clear)\n{\n\tint data, ret;\n\n\tret = r8152_mdio_read(tp, addr);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tdata = ret;\n\tif (data & clear) {\n\t\tdata &= ~clear;\n\t\tret = r8152_mdio_write(tp, addr, data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = !!(data & clear);\n\nout:\n\treturn ret;\n}\n\nstatic int wait_adv_cmd_ready(struct r8152 *tp)\n{\n\tint i, ret;\n\n\tfor (i = 0; i < 10; i++) {\n\t\tu32 ocp_data;\n\n\t\tret = ocp_read_word(tp, MCU_TYPE_USB, USB_ADV_CMD, &ocp_data);\n\t\tif (ret < 0)\n\t\t\tbreak;\n\t\telse if (!(ocp_data & ADV_CMD_BUSY))\n\t\t\tbreak;\n\t\tusleep_range(1000, 2000);\n\t}\n\n\tif (i == 10)\n\t\tret = -ETIMEDOUT;\n\n\treturn ret;\n}\n\nstatic int\nocp_adv_access(struct r8152 *tp, int type, u16 addr, u32 *data, bool write)\n{\n\tu16 cmd;\n\tint ret;\n\n\tswitch (type) {\n\tcase ADV_TYPE_BMU:\n\t\tcmd = ADV_CMD_BMU;\n\t\tbreak;\n\tcase ADV_TYPE_IP:\n\t\tcmd = ADV_CMD_IP;\n\t\tbreak;\n\tdefault:\n\t\tWARN_ON_ONCE(1);\n\t\treturn -EPERM;\n\t}\n\n\tret = wait_adv_cmd_ready(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (write) {\n\t\tcmd |= ADV_CMD_WR;\n\t\tret = ocp_write_dword(tp, MCU_TYPE_USB, USB_ADV_DATA, *data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_ADV_ADDR, addr);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tcmd |= ADV_CMD_BUSY;\n\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_ADV_CMD, cmd);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (!write) {\n\t\tret = wait_adv_cmd_ready(tp);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_read_dword(tp, MCU_TYPE_USB, USB_ADV_DATA, data);\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int rtl_bmu_read(struct r8152 *tp, u16 addr, u32 *data)\n{\n\treturn ocp_adv_access(tp, ADV_TYPE_BMU, addr, data, false);\n}\n\nstatic int rtl_bmu_write(struct r8152 *tp, u16 addr, u32 data)\n{\n\treturn ocp_adv_access(tp, ADV_TYPE_BMU, addr, &data, true);\n}\n\nstatic int rtl_bmu_w0w1(struct r8152 *tp, u16 addr, u32 clear, u32 set)\n{\n\tu32 bmu;\n\tint ret;\n\n\tret = rtl_bmu_read(tp, addr, &bmu);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tbmu = (bmu & ~clear) | set;\n\tret = rtl_bmu_write(tp, addr, bmu);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl_bmu_clr_bits(struct r8152 *tp, u16 addr, u32 clear)\n{\n\treturn rtl_bmu_w0w1(tp, addr, clear, 0);\n}\n\nstatic int rtl_bmu_set_bits(struct r8152 *tp, u16 addr, u32 set)\n{\n\treturn rtl_bmu_w0w1(tp, addr, 0, set);\n}\n\nstatic int rtl_ip_read(struct r8152 *tp, u16 addr, u32 *data)\n{\n\treturn ocp_adv_access(tp, ADV_TYPE_IP, addr, data, false);\n}\n\nstatic int rtl_ip_write(struct r8152 *tp, u16 addr, u32 data)\n{\n\treturn ocp_adv_access(tp, ADV_TYPE_IP, addr, &data, true);\n}\n\nstatic int rtl_ip_w0w1(struct r8152 *tp, u16 addr, u32 clear, u32 set)\n{\n\tint ret;\n\tu32 ip;\n\n\tret = rtl_ip_read(tp, addr, &ip);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tip = (ip & ~clear) | set;\n\tret = rtl_ip_write(tp, addr, ip);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl_ip_clr_bits(struct r8152 *tp, u16 addr, u32 clear)\n{\n\treturn rtl_ip_w0w1(tp, addr, clear, 0);\n}\n\nstatic int rtl_ip_set_bits(struct r8152 *tp, u16 addr, u32 set)\n{\n\treturn rtl_ip_w0w1(tp, addr, 0, set);\n}\n\nstatic int wait_tgphy_cmd_ready(struct r8152 *tp)\n{\n\tint i, ret;\n\n\tfor (i = 0; i < 10; i++) {\n\t\tu32 ocp_data;\n\n\t\tret = ocp_read_word(tp, MCU_TYPE_USB, USB_TGPHY_CMD, &ocp_data);\n\t\tif (ret < 0)\n\t\t\tbreak;\n\t\telse if (!(ocp_data & TGPHY_CMD_BUSY))\n\t\t\tbreak;\n\t\tusleep_range(1000, 2000);\n\t}\n\n\tif (i == 10)\n\t\tret = -ETIMEDOUT;\n\n\treturn ret;\n}\n\nstatic int rtl_tgphy_access(struct r8152 *tp, u16 addr, u16 *data, bool write)\n{\n\tu16 cmd = 0;\n\tint ret;\n\n\tret = wait_tgphy_cmd_ready(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (write) {\n\t\tcmd |= TGPHY_CMD_WR;\n\t\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_TGPHY_DATA, *data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_TGPHY_ADDR, addr);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tcmd |= TGPHY_CMD_BUSY;\n\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_TGPHY_CMD, cmd);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (!write) {\n\t\tu32 ocp_data;\n\n\t\tret = wait_tgphy_cmd_ready(tp);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_read_word(tp, MCU_TYPE_USB, USB_TGPHY_DATA,\n\t\t\t\t    &ocp_data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\t*data = (u16)ocp_data;\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int r8157_phy_read(struct r8152 *tp, u16 addr, u16 *data)\n{\n\treturn rtl_tgphy_access(tp, addr, data, false);\n}\n\nstatic int r8157_phy_write(struct r8152 *tp, u16 addr, u16 data)\n{\n\treturn rtl_tgphy_access(tp, addr, &data, true);\n}\n\nstatic int\nr8152_submit_rx(struct r8152 *tp, struct rx_agg *agg, gfp_t mem_flags);\n\nstatic int\nrtl8152_set_speed(struct r8152 *tp, u8 autoneg, u32 speed, u8 duplex,\n\t\t  u32 advertising);\n\nstatic int __rtl8152_set_mac_address(struct net_device *netdev, void *p,\n\t\t\t\t     bool in_resume)\n{\n\tstruct r8152 *tp = netdev_priv(netdev);\n\tstruct sockaddr *addr = p;\n\tint ret = -EADDRNOTAVAIL;\n\n\tif (unlikely(tp->rtk_enable_diag))\n\t\treturn -EBUSY;\n\n\tif (!is_valid_ether_addr(addr->sa_data))\n\t\tgoto out1;\n\n\tif (!in_resume) {\n\t\tret = usb_autopm_get_interface(tp->intf);\n\t\tif (ret < 0)\n\t\t\tgoto out1;\n\t}\n\n\tmutex_lock(&tp->control);\n\n\teth_hw_addr_set(netdev, addr->sa_data);\n\n\tocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR, CRWECR_CONFIG);\n\tpla_ocp_write(tp, PLA_IDR, BYTE_EN_SIX_BYTES, 8, addr->sa_data);\n\tocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR, CRWECR_NORAML);\n\n\tmutex_unlock(&tp->control);\n\n\tif (!in_resume)\n\t\tusb_autopm_put_interface(tp->intf);\nout1:\n\treturn ret;\n}\n\nstatic int rtl8152_set_mac_address(struct net_device *netdev, void *p)\n{\n\treturn __rtl8152_set_mac_address(netdev, p, false);\n}\n\n#ifdef ACPI_TYPE_BUFFER\nstatic int rtl_mapt_read(struct r8152 *tp, char *mac_obj_name,\n\t\t\t acpi_object_type mac_obj_type, int mac_strlen,\n\t\t\t struct sockaddr *sa)\n{\n\tstruct acpi_buffer buffer = { ACPI_ALLOCATE_BUFFER, NULL };\n\tunion acpi_object *obj;\n\tunsigned char buf[6];\n\tacpi_status status;\n\tint ret = -EINVAL;\n\n\t/* returns _AUXMAC_#AABBCCDDEEFF# */\n\tstatus = acpi_evaluate_object(NULL, mac_obj_name, NULL, &buffer);\n\tobj = (union acpi_object *)buffer.pointer;\n\tif (!ACPI_SUCCESS(status))\n\t\treturn -ENODEV;\n\tif (obj->type != mac_obj_type || obj->string.length != mac_strlen) {\n\t\tnetif_warn(tp, probe, tp->netdev,\n\t\t\t   \"Invalid buffer for pass-thru MAC addr: (%d, %d)\\n\",\n\t\t\t   obj->type, obj->string.length);\n\t\tgoto amacout;\n\t}\n\n\tif (strncmp(obj->string.pointer, \"_AUXMAC_#\", 9) != 0 ||\n\t    strncmp(obj->string.pointer + 0x15, \"#\", 1) != 0) {\n\t\tnetif_warn(tp, probe, tp->netdev,\n\t\t\t   \"Invalid header when reading pass-thru MAC addr\\n\");\n\t\tgoto amacout;\n\t}\n\n\tret = hex2bin(buf, obj->string.pointer + 9, sizeof(buf));\n\tif (!(ret == 0 && is_valid_ether_addr(buf))) {\n\t\tnetif_warn(tp, probe, tp->netdev,\n\t\t\t   \"Invalid MAC for pass-thru MAC addr: %d, %pM\\n\",\n\t\t\t   ret, buf);\n\t\tret = -EINVAL;\n\t\tgoto amacout;\n\t}\n\n\tmemcpy(sa->sa_data, buf, sizeof(buf));\n\tnetif_info(tp, probe, tp->netdev,\n\t\t   \"Using pass-thru MAC addr %pM\\n\", sa->sa_data);\n\namacout:\n\tkfree(obj);\n\treturn ret;\n}\n#endif\n\n/* Devices containing proper chips can support a persistent\n * host system provided MAC address.\n * Examples of this are Dell TB15 and Dell WD15 docks\n */\nstatic int vendor_mac_passthru_addr_read(struct r8152 *tp, struct sockaddr *sa)\n{\n\tint ret = -EOPNOTSUPP;\n\n#ifdef ACPI_TYPE_BUFFER\n\tif (tp->dell_macpassthru)\n\t\tret = rtl_mapt_read(tp, \"\\\\_SB.AMAC\", ACPI_TYPE_BUFFER, 0x17,\n\t\t\t\t    sa);\n\telse if (tp->lenovo_macpassthru)\n\t\tret = rtl_mapt_read(tp, \"\\\\MACA\", ACPI_TYPE_STRING, 0x16, sa);\n#endif\n\n\treturn ret;\n}\n\nstatic int rtl_hw_ether_addr(struct r8152 *tp, struct sockaddr *sa)\n{\n\tu32 ocp_data = 0;\n\tint ret;\n\n\tif (tp->version == RTL_VER_05) {\n\t\t/* Determine the hardware default ethernet address.\n\t\t * Check USB 0xcf0e bit 0\n\t\t *  1: read from USB 0xcf08\n\t\t *  0: read from PLA_BACKUP\n\t\t */\n\t\tret = ocp_read_byte(tp, MCU_TYPE_USB, 0xcf0e, &ocp_data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tif (ocp_data & BIT(0))\n\t\t\treturn usb_ocp_read(tp, 0xcf08, 8, sa->sa_data);\n\n\t\tocp_data |= BIT(0);\n\t}\n\n\tret = pla_ocp_read(tp, PLA_BACKUP, 8, sa->sa_data);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->version == RTL_VER_05) {\n\t\t/* Backup default ethernet address to USB 0xcf08.\n\t\t * Set USB 0xcf0e bit 0 to 1. Then, next time, read the default\n\t\t * ethernet address from USB 0xcf08 rather than PLA_BACKUP.\n\t\t */\n\t\tret = usb_ocp_write(tp, 0xcf08, BYTE_EN_SIX_BYTES, 8,\n\t\t\t\t    sa->sa_data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_write_byte(tp, MCU_TYPE_USB, 0xcf0e, ocp_data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\nout:\n\n\treturn ret;\n}\n\nstatic int determine_ethernet_addr(struct r8152 *tp, struct sockaddr *sa)\n{\n\tstruct net_device *dev = tp->netdev;\n\tint ret;\n\n\tsa->sa_family = dev->type;\n\n\tret = eth_platform_get_mac_address(&tp->udev->dev, sa->sa_data);\n\tif (ret < 0) {\n\t\tif (tp->version == RTL_VER_01) {\n\t\t\tret = pla_ocp_read(tp, PLA_IDR, 8, sa->sa_data);\n\t\t} else {\n\t\t\t/* if device doesn't support MAC pass through this will\n\t\t\t * be expected to be non-zero\n\t\t\t */\n\t\t\tret = vendor_mac_passthru_addr_read(tp, sa);\n\t\t\tif (ret < 0)\n\t\t\t\tret = rtl_hw_ether_addr(tp, sa);\n\t\t}\n\t}\n\n\tif (ret < 0) {\n\t\tnetif_err(tp, probe, dev, \"Get ether addr fail\\n\");\n\t} else if (!is_valid_ether_addr(sa->sa_data)) {\n\t\tnetif_err(tp, probe, dev, \"Invalid ether addr %pM\\n\",\n\t\t\t  sa->sa_data);\n\t\teth_hw_addr_random(dev);\n\t\tether_addr_copy(sa->sa_data, dev->dev_addr);\n\t\tnetif_info(tp, probe, dev, \"Random ether addr %pM\\n\",\n\t\t\t   sa->sa_data);\n\t\treturn 0;\n\t}\n\n\treturn ret;\n}\n\nstatic int set_ethernet_addr(struct r8152 *tp, bool in_resume)\n{\n\tstruct net_device *dev = tp->netdev;\n\tstruct sockaddr sa;\n\tint ret;\n\n\tret = determine_ethernet_addr(tp, &sa);\n\tif (ret < 0)\n\t\treturn ret;\n\n\tif (tp->version == RTL_VER_01)\n\t\teth_hw_addr_set(dev, sa.sa_data);\n\telse\n\t\tret = __rtl8152_set_mac_address(dev, &sa, in_resume);\n\n\treturn ret;\n}\n\nstatic inline struct net_device_stats *rtl8152_get_stats(struct net_device *dev)\n{\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,22)\n\tstruct rtl8152 *tp = netdev_priv(dev);\n\n\treturn (struct net_device_stats *)&tp->stats;\n#else\n\treturn &dev->stats;\n#endif\n}\n\nstatic void read_bulk_callback(struct urb *urb)\n{\n\tstruct net_device *netdev;\n\tint status = urb->status;\n\tstruct rx_agg *agg;\n\tstruct r8152 *tp;\n\tunsigned long flags;\n\n\tagg = urb->context;\n\tif (!agg)\n\t\treturn;\n\n\ttp = agg->context;\n\tif (!tp)\n\t\treturn;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn;\n\n\tif (!test_bit(WORK_ENABLE, &tp->flags))\n\t\treturn;\n\n\tnetdev = tp->netdev;\n\n\t/* When link down, the driver would cancel all bulks. */\n\t/* This avoid the re-submitting bulk */\n\tif (!netif_carrier_ok(netdev))\n\t\treturn;\n\n\tusb_mark_last_busy(tp->udev);\n\n\tswitch (status) {\n\tcase 0:\n\t\tif (urb->actual_length < ETH_ZLEN)\n\t\t\tbreak;\n\n\t\tspin_lock_irqsave(&tp->rx_lock, flags);\n\t\tlist_add_tail(&agg->list, &tp->rx_done);\n\t\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\t\tnapi_schedule(&tp->napi);\n\t\treturn;\n\tcase -ESHUTDOWN:\n\t\trtl_set_unplug(tp);\n\t\tnetif_device_detach(tp->netdev);\n\t\treturn;\n\tcase -EPROTO:\n\t\turb->actual_length = 0;\n\t\tspin_lock_irqsave(&tp->rx_lock, flags);\n\t\tlist_add_tail(&agg->list, &tp->rx_done);\n\t\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\t\tset_bit(RX_EPROTO, &tp->flags);\n\t\tschedule_delayed_work(&tp->schedule, 1);\n\t\treturn;\n\tcase -ENOENT:\n\t\treturn;\t/* the urb is in unlink state */\n\tcase -ETIME:\n\t\tif (net_ratelimit())\n\t\t\tnetif_warn(tp, rx_err, netdev,\n\t\t\t\t   \"maybe reset is needed?\\n\");\n\t\tbreak;\n\tdefault:\n\t\tif (net_ratelimit())\n\t\t\tnetif_warn(tp, rx_err, netdev,\n\t\t\t\t   \"Rx status %d\\n\", status);\n\t\tbreak;\n\t}\n\n\tr8152_submit_rx(tp, agg, GFP_ATOMIC);\n}\n\nstatic void write_bulk_callback(struct urb *urb)\n{\n\tstruct net_device_stats *stats;\n\tstruct net_device *netdev;\n\tstruct tx_agg *agg;\n\tstruct r8152 *tp;\n\tunsigned long flags;\n\tint status = urb->status;\n\n\tagg = urb->context;\n\tif (!agg)\n\t\treturn;\n\n\ttp = agg->context;\n\tif (!tp)\n\t\treturn;\n\n\tnetdev = tp->netdev;\n\tstats = rtl8152_get_stats(netdev);\n\tif (status) {\n\t\tif (net_ratelimit())\n\t\t\tnetif_warn(tp, tx_err, netdev,\n\t\t\t\t   \"Tx status %d\\n\", status);\n\t\tstats->tx_errors += agg->skb_num;\n\t} else {\n\t\tstats->tx_packets += agg->skb_num;\n\t\tstats->tx_bytes += agg->skb_bytes;\n\t}\n\n\tnetdev_completed_queue(netdev, agg->skb_num, agg->skb_bytes);\n\n\tspin_lock_irqsave(&tp->tx_lock, flags);\n\tlist_add_tail(&agg->list, &tp->tx_free);\n\tspin_unlock_irqrestore(&tp->tx_lock, flags);\n\n\tusb_autopm_put_interface_async(tp->intf);\n\n\tif (!netif_carrier_ok(netdev))\n\t\treturn;\n\n\tif (!test_bit(WORK_ENABLE, &tp->flags))\n\t\treturn;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn;\n\n\tif (!skb_queue_empty(&tp->tx_queue))\n\t\ttasklet_schedule(&tp->tx_tl);\n}\n\nstatic void write_bulk_sg_callback(struct urb *urb)\n{\n\tstruct net_device_stats *stats;\n\tstruct net_device *netdev;\n\tint status = urb->status;\n\tunsigned long flags;\n\tstruct tx_agg *agg;\n\tstruct r8152 *tp;\n\n\tagg = urb->context;\n\tif (!agg)\n\t\treturn;\n\n\ttp = agg->context;\n\tif (!tp)\n\t\treturn;\n\n\tnetdev = tp->netdev;\n\tif (status && net_ratelimit())\n\t\tnetif_warn(tp, tx_err, netdev, \"Tx status %d\\n\", status);\n\n\tstats = rtl8152_get_stats(netdev);\n\n\twhile (!skb_queue_empty(&agg->tx_skb)) {\n\t\tstruct sk_buff *skb = __skb_dequeue(&agg->tx_skb);\n\n\t\tif (status)\n\t\t\tdev_kfree_skb_any(skb);\n\t\telse\n\t\t\tdev_consume_skb_any(skb);\n\t}\n\n\tif (status) {\n\t\tstats->tx_errors += agg->skb_num;\n\t} else {\n\t\tstats->tx_packets += agg->skb_num;\n\t\tstats->tx_bytes += agg->skb_bytes;\n\t}\n\n\tnetdev_completed_queue(netdev, agg->skb_num, agg->skb_bytes);\n\n\tspin_lock_irqsave(&tp->tx_lock, flags);\n\tlist_add_tail(&agg->list, &tp->tx_free);\n\tspin_unlock_irqrestore(&tp->tx_lock, flags);\n\n\tusb_autopm_put_interface_async(tp->intf);\n\n\tif (!netif_carrier_ok(netdev))\n\t\treturn;\n\n\tif (!test_bit(WORK_ENABLE, &tp->flags))\n\t\treturn;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn;\n\n\tif (!skb_queue_empty(&tp->tx_queue))\n\t\ttasklet_schedule(&tp->tx_tl);\n}\n\nstatic void intr_callback(struct urb *urb)\n{\n\tstruct r8152 *tp;\n\t__le16 *d;\n\tint status = urb->status;\n\tint res;\n\n\ttp = urb->context;\n\tif (!tp)\n\t\treturn;\n\n\tif (!test_bit(WORK_ENABLE, &tp->flags))\n\t\treturn;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn;\n\n\tswitch (status) {\n\tcase 0:\t\t\t/* success */\n\t\tbreak;\n\tcase -ECONNRESET:\t/* unlink */\n\tcase -ESHUTDOWN:\n\t\tnetif_device_detach(tp->netdev);\n\t\tfallthrough;\n\tcase -ENOENT:\n\tcase -EPROTO:\n\t\tnetif_info(tp, intr, tp->netdev,\n\t\t\t   \"Stop submitting intr, status %d\\n\", status);\n\t\treturn;\n\tcase -EOVERFLOW:\n\t\tif (net_ratelimit())\n\t\t\tnetif_info(tp, intr, tp->netdev,\n\t\t\t\t   \"intr status -EOVERFLOW\\n\");\n\t\tgoto resubmit;\n\t/* -EPIPE:  should clear the halt */\n\tdefault:\n\t\tnetif_info(tp, intr, tp->netdev, \"intr status %d\\n\", status);\n\t\tgoto resubmit;\n\t}\n\n\td = urb->transfer_buffer;\n\tif (INTR_LINK & __le16_to_cpu(d[0])) {\n\t\tif (!netif_carrier_ok(tp->netdev)) {\n\t\t\tset_bit(RTL8152_LINK_CHG, &tp->flags);\n\t\t\tschedule_delayed_work(&tp->schedule, 0);\n\t\t}\n\t} else {\n\t\tif (netif_carrier_ok(tp->netdev)) {\n\t\t\tnetif_stop_queue(tp->netdev);\n\t\t\tset_bit(RTL8152_LINK_CHG, &tp->flags);\n\t\t\tschedule_delayed_work(&tp->schedule, 0);\n\t\t}\n\t}\n\nresubmit:\n\tres = usb_submit_urb(urb, GFP_ATOMIC);\n\tif (res == -ENODEV) {\n\t\trtl_set_unplug(tp);\n\t\tnetif_device_detach(tp->netdev);\n\t} else if (res) {\n\t\tnetif_err(tp, intr, tp->netdev,\n\t\t\t  \"can't resubmit intr, status %d\\n\", res);\n\t}\n}\n\nstatic void *rx_agg_align(struct r8152 *tp, void *data)\n{\n\treturn (void *)ALIGN((uintptr_t)data, tp->rx_desc.align);\n}\n\nstatic void *tx_agg_align(struct r8152 *tp, void *data)\n{\n\treturn (void *)ALIGN((uintptr_t)data, tp->tx_desc.align);\n}\n\nstatic void free_rx_agg(struct r8152 *tp, struct rx_agg *agg)\n{\n\tlist_del(&agg->info_list);\n\n\tusb_free_urb(agg->urb);\n\tput_page(agg->page);\n\tkfree(agg);\n\n\tatomic_dec(&tp->rx_count);\n}\n\nstatic struct rx_agg *alloc_rx_agg(struct r8152 *tp, gfp_t mflags)\n{\n\tstruct net_device *netdev = tp->netdev;\n\tint node = netdev->dev.parent ? dev_to_node(netdev->dev.parent) : -1;\n\tunsigned int order = get_order(tp->rx_buf_sz);\n\tstruct rx_agg *rx_agg;\n\tunsigned long flags;\n\n\trx_agg = kmalloc_node(sizeof(*rx_agg), mflags, node);\n\tif (!rx_agg)\n\t\treturn NULL;\n\n\trx_agg->page = alloc_pages(mflags | __GFP_COMP | __GFP_NOWARN, order);\n\tif (!rx_agg->page)\n\t\tgoto free_rx;\n\n\trx_agg->buffer = page_address(rx_agg->page);\n\n\trx_agg->urb = usb_alloc_urb(0, mflags);\n\tif (!rx_agg->urb)\n\t\tgoto free_buf;\n\n\trx_agg->context = tp;\n\n\tINIT_LIST_HEAD(&rx_agg->list);\n\tINIT_LIST_HEAD(&rx_agg->info_list);\n\tspin_lock_irqsave(&tp->rx_lock, flags);\n\tlist_add_tail(&rx_agg->info_list, &tp->rx_info);\n\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\n\tatomic_inc(&tp->rx_count);\n\n\treturn rx_agg;\n\nfree_buf:\n\t__free_pages(rx_agg->page, order);\nfree_rx:\n\tkfree(rx_agg);\n\treturn NULL;\n}\n\nstatic void free_all_mem(struct r8152 *tp)\n{\n\tstruct rx_agg *agg, *agg_next;\n\tunsigned long flags;\n\tint i;\n\n\tspin_lock_irqsave(&tp->rx_lock, flags);\n\n\tlist_for_each_entry_safe(agg, agg_next, &tp->rx_info, info_list)\n\t\tfree_rx_agg(tp, agg);\n\n\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\n\tWARN_ON(atomic_read(&tp->rx_count));\n\n\tfor (i = 0; i < RTL8152_MAX_TX; i++) {\n\t\tusb_free_urb(tp->tx_info[i].urb);\n\t\ttp->tx_info[i].urb = NULL;\n\n\t\tkfree(tp->tx_info[i].buffer);\n\t\ttp->tx_info[i].buffer = NULL;\n\t\ttp->tx_info[i].head = NULL;\n\t\tWARN_ON(!skb_queue_empty(&tp->tx_info[i].tx_skb));\n\t}\n\n\tusb_free_urb(tp->intr_urb);\n\ttp->intr_urb = NULL;\n\n\tkfree(tp->intr_buff);\n\ttp->intr_buff = NULL;\n}\n\nstatic int alloc_all_mem(struct r8152 *tp)\n{\n\tstruct net_device *netdev = tp->netdev;\n\tstruct usb_interface *intf = tp->intf;\n\tstruct usb_host_interface *alt = intf->cur_altsetting;\n\tstruct usb_host_endpoint *ep_intr = alt->endpoint + 2;\n\tint node, i;\n\n\tnode = netdev->dev.parent ? dev_to_node(netdev->dev.parent) : -1;\n\n\tspin_lock_init(&tp->rx_lock);\n\tspin_lock_init(&tp->tx_lock);\n\tINIT_LIST_HEAD(&tp->rx_info);\n\tINIT_LIST_HEAD(&tp->tx_free);\n\tINIT_LIST_HEAD(&tp->rx_done);\n\tskb_queue_head_init(&tp->tx_queue);\n\tskb_queue_head_init(&tp->rx_queue);\n\tatomic_set(&tp->rx_count, 0);\n\n\tfor (i = 0; i < RTL8152_MAX_RX; i++) {\n\t\tif (!alloc_rx_agg(tp, GFP_KERNEL))\n\t\t\tgoto err1;\n\t}\n\n\tfor (i = 0; i < RTL8152_MAX_TX; i++) {\n\t\tstruct urb *urb;\n\t\tu8 *buf;\n\n\t\tbuf = kmalloc_node(agg_buf_sz, GFP_KERNEL, node);\n\t\tif (!buf)\n\t\t\tgoto err1;\n\n\t\tif (buf != tx_agg_align(tp, buf)) {\n\t\t\tkfree(buf);\n\t\t\tbuf = kmalloc_node(agg_buf_sz + tp->tx_desc.align,\n\t\t\t\t\t   GFP_KERNEL, node);\n\t\t\tif (!buf)\n\t\t\t\tgoto err1;\n\t\t}\n\n\t\turb = usb_alloc_urb(0, GFP_KERNEL);\n\t\tif (!urb) {\n\t\t\tkfree(buf);\n\t\t\tgoto err1;\n\t\t}\n\n\t\tINIT_LIST_HEAD(&tp->tx_info[i].list);\n\t\ttp->tx_info[i].context = tp;\n\t\ttp->tx_info[i].urb = urb;\n\t\ttp->tx_info[i].buffer = buf;\n\t\ttp->tx_info[i].head = tx_agg_align(tp, buf);\n\n\t\tlist_add_tail(&tp->tx_info[i].list, &tp->tx_free);\n\t\tskb_queue_head_init(&tp->tx_info[i].tx_skb);\n\t}\n\n\ttp->intr_urb = usb_alloc_urb(0, GFP_KERNEL);\n\tif (!tp->intr_urb)\n\t\tgoto err1;\n\n\ttp->intr_buff = kmalloc(INTBUFSIZE, GFP_KERNEL);\n\tif (!tp->intr_buff)\n\t\tgoto err1;\n\n\ttp->intr_interval = (int)ep_intr->desc.bInterval;\n\tusb_fill_int_urb(tp->intr_urb, tp->udev, tp->pipe_intr,\n\t\t\t tp->intr_buff, INTBUFSIZE, intr_callback,\n\t\t\t tp, tp->intr_interval);\n\n\treturn 0;\n\nerr1:\n\tfree_all_mem(tp);\n\treturn -ENOMEM;\n}\n\nstatic struct tx_agg *r8152_get_tx_agg(struct r8152 *tp)\n{\n\tstruct tx_agg *agg = NULL;\n\tunsigned long flags;\n\n\tif (list_empty(&tp->tx_free))\n\t\treturn NULL;\n\n\tspin_lock_irqsave(&tp->tx_lock, flags);\n\tif (!list_empty(&tp->tx_free)) {\n\t\tstruct list_head *cursor;\n\n\t\tcursor = tp->tx_free.next;\n\t\tlist_del_init(cursor);\n\t\tagg = list_entry(cursor, struct tx_agg, list);\n\t}\n\tspin_unlock_irqrestore(&tp->tx_lock, flags);\n\n\treturn agg;\n}\n\n/* r8152_csum_workaround()\n * The hw limits the value of the transport offset. When the offset is out of\n * range, calculate the checksum by sw.\n */\nstatic void r8152_csum_workaround(struct r8152 *tp, struct sk_buff *skb,\n\t\t\t\t  struct sk_buff_head *list)\n{\n\tif (skb_shinfo(skb)->gso_size) {\n\t\tnetdev_features_t features = tp->netdev->features;\n\t\tstruct sk_buff *segs, *seg, *next;\n\t\tstruct sk_buff_head seg_list;\n\n\t\tfeatures &= ~(NETIF_F_SG | NETIF_F_IPV6_CSUM | NETIF_F_TSO6);\n\t\tsegs = skb_gso_segment(skb, features);\n\t\tif (IS_ERR(segs) || !segs)\n\t\t\tgoto drop;\n\n\t\t__skb_queue_head_init(&seg_list);\n\n\t\tskb_list_walk_safe(segs, seg, next) {\n\t\t\tskb_mark_not_on_list(seg);\n\t\t\tnetdev_sent_queue(tp->netdev, seg->len);\n\t\t\t__skb_queue_tail(&seg_list, seg);\n\t\t}\n\n\t\tskb_queue_splice(&seg_list, list);\n\t\tnetdev_completed_queue(tp->netdev,\n\t\t\t\t       skb_shinfo(skb)->gso_segs ?: 1, skb->len);\n\t\tdev_kfree_skb(skb);\n\t} else if (skb->ip_summed == CHECKSUM_PARTIAL) {\n\t\tif (skb_checksum_help(skb) < 0)\n\t\t\tgoto drop;\n\n\t\t__skb_queue_head(list, skb);\n\t} else {\n\t\tstruct net_device_stats *stats;\n\ndrop:\n\t\tstats = rtl8152_get_stats(tp->netdev);\n\t\tstats->tx_dropped++;\n\t\tdev_kfree_skb(skb);\n\t}\n}\n\nstatic void r8152_rx_len(struct r8152 *tp, void *desc, u32 *len)\n{\n\tstruct rx_desc *d = desc;\n\n\t*len = le32_to_cpu(d->opts1) & RX_LEN_MASK;\n}\n\nstatic bool r8152_tx_vlan_tag(struct r8152 *tp, void *d, struct sk_buff *skb)\n{\n\tstruct tx_desc *desc = d;\n\n\tif (skb_vlan_tag_present(skb)) {\n\t\tu32 opts2;\n\n\t\topts2 = TX_VLAN_TAG | swab16(skb_vlan_tag_get(skb));\n\t\tdesc->opts2 |= cpu_to_le32(opts2);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,0,0)\n\nstatic bool\nr8152_rx_vlan_tag(struct r8152 *tp, void *d, struct sk_buff *skb)\n{\n\tstruct rx_desc *desc = d;\n\tu32 opts2 = le32_to_cpu(desc->opts2);\n\n\tif (tp->vlgrp && (opts2 & RX_VLAN_TAG)) {\n\t\tvlan_gro_receive(&tp->napi, tp->vlgrp, swab16(opts2 & 0xffff),\n\t\t\t\t skb);\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nstatic void\nr8152_vlan_put_tag(struct r8152 *tp, void *d, struct sk_buff *skb)\n{\n\tstruct rx_desc *desc = d;\n\tu32 opts2 = le32_to_cpu(desc->opts2);\n\n\tif (tp->vlgrp && (opts2 & RX_VLAN_TAG))\n\t\t__vlan_hwaccel_put_tag(skb, swab16(opts2 & 0xffff));\n}\n\nstatic inline __u16\nrtl_vlan_get_tag(struct sk_buff *skb)\n{\n\t__u16 tag;\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,27)\n\t__vlan_hwaccel_get_tag(skb, &tag);\n#else\n\ttag = skb->vlan_tci;\n#endif\n\n\treturn tag;\n}\n\n#else\nstatic bool\nr8152_rx_vlan_tag(struct r8152 *tp, void *d, struct sk_buff *skb)\n{\n\tstruct rx_desc *desc = d;\n\tu32 opts2 = le32_to_cpu(desc->opts2);\n\n\tif (opts2 & RX_VLAN_TAG) {\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)\n\t\t__vlan_hwaccel_put_tag(skb, swab16(opts2 & 0xffff));\n#else\n\t\t__vlan_hwaccel_put_tag(skb, htons(ETH_P_8021Q),\n\t\t\t\t       swab16(opts2 & 0xffff));\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0) */\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,0,0) */\n\nstatic int r8152_tx_csum(struct r8152 *tp, void *tx_desc, struct sk_buff *skb)\n{\n\tu32 mss = skb_shinfo(skb)->gso_size;\n\tstruct tx_desc *desc = tx_desc;\n\tint ret = TX_CSUM_SUCCESS;\n\tu32 opts1, opts2 = 0;\n\n\topts1 = TX_FS | TX_LS;\n\n\tif (mss) {\n\t\tu32 transport_offset = (u32)skb_transport_offset(skb);\n\n\t\tif (transport_offset > GTTCPHO_MAX) {\n\t\t\tnetif_warn(tp, tx_err, tp->netdev,\n\t\t\t\t   \"Invalid transport offset 0x%x for TSO\\n\",\n\t\t\t\t   transport_offset);\n\t\t\tret = TX_CSUM_TSO;\n\t\t\tgoto unavailable;\n\t\t}\n\n\t\tswitch (vlan_get_protocol(skb)) {\n\t\tcase htons(ETH_P_IP):\n\t\t\topts1 |= GTSENDV4;\n\t\t\tbreak;\n\n\t\tcase htons(ETH_P_IPV6):\n\t\t\tif (skb_cow_head(skb, 0)) {\n\t\t\t\tret = TX_CSUM_TSO;\n\t\t\t\tgoto unavailable;\n\t\t\t}\n\t\t\ttcp_v6_gso_csum_prep(skb);\n\t\t\topts1 |= GTSENDV6;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tWARN_ON_ONCE(1);\n\t\t\tbreak;\n\t\t}\n\n\t\topts1 |= transport_offset << GTTCPHO_SHIFT;\n\t\topts2 |= min(mss, MSS_MAX) << MSS_SHIFT;\n\t} else if (skb->ip_summed == CHECKSUM_PARTIAL) {\n\t\tu32 transport_offset = (u32)skb_transport_offset(skb);\n\t\tu8 ip_protocol;\n\n\t\tif (transport_offset > TCPHO_MAX) {\n\t\t\tnetif_warn(tp, tx_err, tp->netdev,\n\t\t\t\t   \"Invalid transport offset 0x%x\\n\",\n\t\t\t\t   transport_offset);\n\t\t\tret = TX_CSUM_NONE;\n\t\t\tgoto unavailable;\n\t\t}\n\n\t\tswitch (vlan_get_protocol(skb)) {\n\t\tcase htons(ETH_P_IP):\n\t\t\topts2 |= IPV4_CS;\n\t\t\tip_protocol = ip_hdr(skb)->protocol;\n\t\t\tbreak;\n\n\t\tcase htons(ETH_P_IPV6):\n\t\t\topts2 |= IPV6_CS;\n\t\t\tip_protocol = ipv6_hdr(skb)->nexthdr;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tip_protocol = IPPROTO_RAW;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (ip_protocol == IPPROTO_TCP)\n\t\t\topts2 |= TCP_CS;\n\t\telse if (ip_protocol == IPPROTO_UDP)\n\t\t\topts2 |= UDP_CS;\n\t\telse\n\t\t\tWARN_ON_ONCE(1);\n\n\t\topts2 |= transport_offset << TCPHO_SHIFT;\n\t}\n\n\tdesc->opts2 = cpu_to_le32(opts2);\n\tdesc->opts1 = cpu_to_le32(opts1);\n\nunavailable:\n\treturn ret;\n}\n\nstatic void r8152_tx_len(struct r8152 *tp, void *tx_desc, u32 *len)\n{\n\tstruct tx_desc *desc = tx_desc;\n\n\tdesc->opts1 |= cpu_to_le32(*len);\n}\n\nstatic void r8157_rx_len(struct r8152 *tp, void *desc, u32 *len)\n{\n\tstruct rx_desc_v2 *d = desc;\n\n\t*len = rx_v2_get_len(le32_to_cpu(d->opts1));\n}\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,0,0)\nstatic bool\nr8157_rx_vlan_tag(struct r8152 *tp, void *desc, struct sk_buff *skb)\n{\n\tstruct rx_desc_v2 *d = desc;\n\tu32 opts1 = le32_to_cpu(d->opts1);\n\n\tif (tp->vlgrp && (opts1 & RX_VLAN_TAG_2)) {\n\t\tu32 opts2 = le32_to_cpu(d->opts2);\n\n\t\tvlan_gro_receive(&tp->napi, tp->vlgrp,\n\t\t\t\t swab16((opts2 >> 16) & 0xffff), skb);\n\t\treturn true;\n\t}\n\treturn false\n}\n\nstatic void\nr8157_vlan_put_tag(struct r8152 *tp, void *desc, struct sk_buff *skb)\n{\n\tstruct rx_desc_v2 *d = desc;\n\tu32 opts1 = le32_to_cpu(d->opts1);\n\n\tif (tp->vlgrp && (opts1 & RX_VLAN_TAG_2)) {\n\t\tu32 opts2 = le32_to_cpu(d->opts2);\n\n\t\t__vlan_hwaccel_put_tag(skb, swab16((opts2 >> 16) & 0xffff));\n\t}\n}\n\n#else\nstatic bool\nr8157_rx_vlan_tag(struct r8152 *tp, void *desc, struct sk_buff *skb)\n{\n\tstruct rx_desc_v2 *d = desc;\n\tu32 opts1 = le32_to_cpu(d->opts1);\n\n\tif (opts1 & RX_VLAN_TAG_2) {\n\t\tu32 opts2 = le32_to_cpu(d->opts2);\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)\n\t\t__vlan_hwaccel_put_tag(skb, swab16((opts2 >> 16) & 0xffff));\n#else\n\t\t__vlan_hwaccel_put_tag(skb, htons(ETH_P_8021Q),\n\t\t\t\t       swab16((opts2 >> 16) & 0xffff));\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0) */\n\t\treturn true;\n\t}\n\treturn false;\n}\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,0,0) */\n\nstatic int r8157_tx_csum(struct r8152 *tp, void *tx_desc, struct sk_buff *skb)\n{\n\tu32 mss = skb_shinfo(skb)->gso_size;\n\tint ret = TX_CSUM_SUCCESS;\n\n\tif (!mss && skb->ip_summed == CHECKSUM_PARTIAL) {\n\t\tu32 transport_offset = (u32)skb_transport_offset(skb);\n\n\t\tif (transport_offset > TCPHO_MAX_2) {\n\t\t\tnetif_warn(tp, tx_err, tp->netdev,\n\t\t\t\t   \"Invalid transport offset 0x%x\\n\",\n\t\t\t\t   transport_offset);\n\t\t\treturn TX_CSUM_NONE;\n\t\t}\n\t}\n\n\tret = r8152_tx_csum(tp, tx_desc, skb);\n\n\treturn ret;\n}\n\nstatic void r8157_tx_len(struct r8152 *tp, void *tx_desc, u32 *len)\n{\n\tstruct tx_desc_v2 *desc = tx_desc;\n\n\tdesc->opts3 = cpu_to_le32(tx_v2_set_len(*len));\n\tdesc->opts4 = cpu_to_le32(TX_SIG);\n}\n\nstatic int rtl_tx_csum(struct r8152 *tp, void *desc, struct sk_buff *skb,\n\t\t       u32 len)\n{\n\tint ret = TX_CSUM_SUCCESS;\n\n\tWARN_ON_ONCE(len > TX_LEN_MAX);\n\n\tret = tp->tx_desc.csum(tp, desc, skb);\n\tif (!ret)\n\t\ttp->tx_desc.len(tp, desc, &len);\n\n\treturn ret;\n}\n\nstatic int r8152_tx_agg_fill(struct r8152 *tp, struct tx_agg *agg)\n{\n\tstruct sk_buff_head skb_head, *tx_queue = &tp->tx_queue;\n\tstruct net_device *netdev = tp->netdev;\n\tint remain, ret;\n\tu8 *tx_data;\n\n\t__skb_queue_head_init(&skb_head);\n\tspin_lock(&tx_queue->lock);\n\tskb_queue_splice_init(tx_queue, &skb_head);\n\tspin_unlock(&tx_queue->lock);\n\n\ttx_data = agg->head;\n\tagg->skb_num = 0;\n\tagg->skb_len = 0;\n\tagg->skb_bytes = 0;\n\tremain = agg_buf_sz;\n\n\twhile (remain >= ETH_ZLEN + tp->tx_desc.size) {\n\t\tstruct sk_buff *skb;\n\t\tunsigned int len;\n\t\tvoid *tx_desc;\n\n\t\tskb = __skb_dequeue(&skb_head);\n\t\tif (!skb)\n\t\t\tbreak;\n\n\t\tlen = skb->len + tp->tx_desc.size;\n\n\t\tif (len > remain) {\n\t\t\t__skb_queue_head(&skb_head, skb);\n\t\t\tbreak;\n\t\t}\n\n\t\ttx_data = tx_agg_align(tp, tx_data);\n\t\ttx_desc = (void *)tx_data;\n\n\t\tif (rtl_tx_csum(tp, tx_desc, skb, skb->len)) {\n\t\t\tr8152_csum_workaround(tp, skb, &skb_head);\n\t\t\tcontinue;\n\t\t}\n\n\t\ttp->tx_desc.vlan_tag(tp, tx_desc, skb);\n\n\t\ttx_data += tp->tx_desc.size;\n\n\t\tlen = skb->len;\n\t\tif (skb_copy_bits(skb, 0, tx_data, len) < 0) {\n\t\t\tstruct net_device_stats *stats = &netdev->stats;\n\n\t\t\tnetdev_completed_queue(netdev,\n\t\t\t\t\t       skb_shinfo(skb)->gso_segs ?: 1,\n\t\t\t\t\t       len);\n\t\t\tstats->tx_dropped++;\n\t\t\tdev_kfree_skb_any(skb);\n\t\t\ttx_data -= tp->tx_desc.size;\n\t\t\tcontinue;\n\t\t}\n\n\t\ttx_data += len;\n\t\tagg->skb_bytes += len;\n\t\tagg->skb_num += skb_shinfo(skb)->gso_segs ?: 1;\n\n\t\tdev_consume_skb_any(skb);\n\n\t\tremain = agg_buf_sz -\n\t\t\t (int)(tx_agg_align(tp, tx_data) - agg->head);\n\t}\n\n\tif (!skb_queue_empty(&skb_head)) {\n\t\tspin_lock(&tx_queue->lock);\n\t\tskb_queue_splice(&skb_head, tx_queue);\n\t\tspin_unlock(&tx_queue->lock);\n\t}\n\n\tnetif_tx_lock(netdev);\n\n\tif (netif_queue_stopped(netdev) &&\n\t    skb_queue_len(&tp->tx_queue) < tp->tx_qlen)\n\t\tnetif_wake_queue(netdev);\n\n\tnetif_tx_unlock(netdev);\n\n\tret = usb_autopm_get_interface_async(tp->intf);\n\tif (ret < 0)\n\t\tgoto out_tx_fill;\n\n\tusb_fill_bulk_urb(agg->urb, tp->udev, tp->pipe_out,\n\t\t\t  agg->head, (int)(tx_data - (u8 *)agg->head),\n\t\t\t  (usb_complete_t)write_bulk_callback, agg);\n\n\tagg->urb->sg = NULL;\n\tagg->urb->num_sgs = 0;\n\n\tret = usb_submit_urb(agg->urb, GFP_ATOMIC);\n\tif (ret < 0)\n\t\tusb_autopm_put_interface_async(tp->intf);\n\nout_tx_fill:\n\tif (ret < 0)\n\t\tnetdev_completed_queue(netdev, agg->skb_num, agg->skb_bytes);\n\n\treturn ret;\n}\n\nstatic int r8152_tx_agg_sg_fill(struct r8152 *tp, struct tx_agg *agg)\n{\n\tstruct sk_buff_head skb_head, *tx_queue = &tp->tx_queue;\n\tstruct net_device *netdev = tp->netdev;\n\tint max_sg_num, ret, sg_num;\n\tstruct scatterlist *sg;\n\tint padding = 0;\n\n\t__skb_queue_head_init(&skb_head);\n\tspin_lock(&tx_queue->lock);\n\tskb_queue_splice_init(tx_queue, &skb_head);\n\tspin_unlock(&tx_queue->lock);\n\n\tsg = agg->head;\n\tmax_sg_num = (agg_buf_sz / sizeof(*sg)) - 1;\n\tmax_sg_num = min_t(int, RTL_MAX_SG_NUM, max_sg_num);\n\tsg_init_table(sg, max_sg_num + 1);\n\tagg->skb_num = 0;\n\tagg->skb_len = 0;\n\tagg->skb_bytes = 0;\n\n\tfor (sg_num = 0; sg_num < max_sg_num;) {\n\t\tstruct sk_buff *skb;\n\t\tint num_sgs, headroom;\n\t\tunsigned int len;\n\t\tunion {\n\t\t\tstruct tx_desc v1;\n\t\t\tstruct tx_desc_v2 v2;\n\t\t} tx_desc;\n\n\t\tskb = __skb_dequeue(&skb_head);\n\t\tif (!skb)\n\t\t\tbreak;\n\n\t\theadroom = skb_headroom(skb) - padding - tp->tx_desc.size;\n\n\t\tif (skb_header_cloned(skb) || headroom < 0) {\n\t\t\tstruct sk_buff *tx_skb;\n\n\t\t\theadroom = padding + tp->tx_desc.size;\n\t\t\ttx_skb = skb_copy_expand(skb, headroom, 0, GFP_ATOMIC);\n\t\t\tif (!tx_skb) {\n\t\t\t\t__skb_queue_head(&skb_head, skb);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdev_kfree_skb_any(skb);\n\t\t\tskb = tx_skb;\n\t\t\theadroom = skb_headroom(skb) - headroom;\n\t\t}\n\n\t\t /* calculate the fragment numbers for skb */\n\t\tnum_sgs = 1 + skb_shinfo(skb)->nr_frags;\n\t\tlen = skb->len;\n\n\t\tif ((num_sgs + sg_num) > max_sg_num) {\n\t\t\t__skb_queue_head(&skb_head, skb);\n\t\t\tbreak;\n\t\t}\n\n\t\tif (rtl_tx_csum(tp, &tx_desc, skb, len)) {\n\t\t\tr8152_csum_workaround(tp, skb, &skb_head);\n\t\t\tcontinue;\n\t\t}\n\n\t\ttp->tx_desc.vlan_tag(tp, &tx_desc, skb);\n\n\t\tWARN_ON(padding < 0);\n\n\t\t/* use skb_headroom for tx desc */\n\t\tskb->cb[0] = padding + tp->tx_desc.size;\n\t\tmemcpy(skb_push(skb, tp->tx_desc.size), &tx_desc,\n\t\t       tp->tx_desc.size);\n\t\tif (padding)\n\t\t\tmemset(skb_push(skb, padding), 0, padding);\n\n\t\tnum_sgs = skb_to_sgvec_nomark(skb, sg, 0, skb->len);\n\t\tif (num_sgs < 0) {\n\t\t\tnetif_err(tp, tx_err, netdev,\n\t\t\t\t  \"skb_to_sgvec fail %d\\n\", num_sgs);\n\t\t\t__skb_queue_head(&skb_head, skb);\n\t\t\tbreak;\n\t\t}\n\n\t\tsg += num_sgs;\n\n\t\t__skb_queue_tail(&agg->tx_skb, skb);\n\n\t\tsg_num += num_sgs;\n\t\tagg->skb_len += skb->len;\n\t\tagg->skb_bytes += len;\n\t\tagg->skb_num += skb_shinfo(skb)->gso_segs ?: 1;\n\n\t\tpadding = len + tp->tx_desc.size;\n\t\tpadding = ALIGN(padding, tp->tx_desc.align) - padding;\n\t}\n\n\tif (!skb_queue_empty(&skb_head)) {\n\t\tspin_lock(&tx_queue->lock);\n\t\tskb_queue_splice(&skb_head, tx_queue);\n\t\tspin_unlock(&tx_queue->lock);\n\t}\n\n\tnetif_tx_lock(netdev);\n\n\tif (netif_queue_stopped(netdev) &&\n\t    skb_queue_len(&tp->tx_queue) < tp->tx_qlen)\n\t\tnetif_wake_queue(netdev);\n\n\tnetif_tx_unlock(netdev);\n\n\tif (sg_num == 0) {\n\t\tunsigned long flags;\n\n\t\tspin_lock_irqsave(&tp->tx_lock, flags);\n\t\tlist_add_tail(&agg->list, &tp->tx_free);\n\t\tspin_unlock_irqrestore(&tp->tx_lock, flags);\n\n\t\tret = 0;\n\t\tgoto out_tx_fill;\n\t}\n\n\tret = usb_autopm_get_interface_async(tp->intf);\n\tif (ret < 0)\n\t\tgoto out_tx_fill;\n\n\tsg_mark_end(sg);\n\n\tusb_fill_bulk_urb(agg->urb, tp->udev, tp->pipe_out,\n\t\t\t  NULL, (int)agg->skb_len,\n\t\t\t  (usb_complete_t)write_bulk_sg_callback, agg);\n\n\tagg->urb->sg = agg->head;\n\tagg->urb->num_sgs = sg_num;\n\n\tret = usb_submit_urb(agg->urb, GFP_ATOMIC);\n\tif (ret < 0)\n\t\tusb_autopm_put_interface_async(tp->intf);\n\nout_tx_fill:\n\tif (ret < 0) {\n\t\tnetdev_completed_queue(netdev, agg->skb_num, agg->skb_bytes);\n\t\twhile (!skb_queue_empty(&agg->tx_skb))\n\t\t\tdev_kfree_skb_any(__skb_dequeue(&agg->tx_skb));\n\t}\n\n\treturn ret;\n}\n\nstatic int\nr8152_rx_csum(struct r8152 *tp, void *d, struct sk_buff *skb)\n{\n\tstruct rx_desc *rx_desc = d;\n\tu8 checksum = CHECKSUM_NONE;\n\tu32 opts2, opts3;\n\n\tif (!(tp->netdev->features & NETIF_F_RXCSUM))\n\t\tgoto return_result;\n\n\topts2 = le32_to_cpu(rx_desc->opts2);\n\topts3 = le32_to_cpu(rx_desc->opts3);\n\n\tif (opts2 & RD_IPV4_CS) {\n\t\tif (opts3 & IPF)\n\t\t\tchecksum = CHECKSUM_NONE;\n\t\telse if ((opts2 & RD_UDP_CS) && !(opts3 & UDPF))\n\t\t\tchecksum = CHECKSUM_UNNECESSARY;\n\t\telse if ((opts2 & RD_TCP_CS) && !(opts3 & TCPF))\n\t\t\tchecksum = CHECKSUM_UNNECESSARY;\n\t} else if (opts2 & RD_IPV6_CS) {\n\t\tif ((opts2 & RD_UDP_CS) && !(opts3 & UDPF))\n\t\t\tchecksum = CHECKSUM_UNNECESSARY;\n\t\telse if ((opts2 & RD_TCP_CS) && !(opts3 & TCPF))\n\t\t\tchecksum = CHECKSUM_UNNECESSARY;\n\t}\n\nreturn_result:\n\tskb->ip_summed = checksum;\n\n\treturn 0;\n}\n\nstatic int\nr8157_rx_csum(struct r8152 *tp, void *desc, struct sk_buff *skb)\n{\n\tstruct rx_desc_v2 *d = desc;\n\tu8 checksum = CHECKSUM_NONE;\n\tu32 opts3;\n\n\tif (!(tp->netdev->features & NETIF_F_RXCSUM))\n\t\tgoto return_result;\n\n\topts3 = le32_to_cpu(d->opts3);\n\n\tif ((opts3 & (RD_IPV4_CS_2 | IPF_2)) == (RD_IPV4_CS_2 | IPF_2)) {\n\t\tchecksum = CHECKSUM_NONE;\n\t} else if (opts3 & (RD_IPV4_CS_2 | RD_IPV6_CS_2)) {\n\t\tif ((opts3 & (RD_UDP_CS_2 | UDPF_2)) ==  RD_UDP_CS_2)\n\t\t\tchecksum = CHECKSUM_UNNECESSARY;\n\t\telse if ((opts3 & (RD_TCP_CS_2 | TCPF_2)) == RD_TCP_CS_2)\n\t\t\tchecksum = CHECKSUM_UNNECESSARY;\n\t}\n\nreturn_result:\n\tskb->ip_summed = checksum;\n\n\treturn  0;\n}\n\nstatic inline bool rx_count_exceed(struct r8152 *tp)\n{\n\treturn atomic_read(&tp->rx_count) > RTL8152_MAX_RX;\n}\n\nstatic int agg_offset(struct rx_agg *agg, void *addr)\n{\n\tWARN_ON_ONCE(agg->buffer > addr);\n\treturn (int)(addr - agg->buffer);\n}\n\nstatic struct rx_agg *rtl_get_free_rx(struct r8152 *tp, gfp_t mflags)\n{\n\tstruct rx_agg *agg, *agg_next, *agg_free = NULL;\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&tp->rx_lock, flags);\n\n\tlist_for_each_entry_safe(agg, agg_next, &tp->rx_used, list) {\n\t\tif (page_count(agg->page) == 1) {\n\t\t\tif (!agg_free) {\n\t\t\t\tlist_del_init(&agg->list);\n\t\t\t\tagg_free = agg;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (tp->rx_agg_free_ref) {\n\t\t\t\ttp->rx_agg_free_ref--;\n\t\t\t} else if (rx_count_exceed(tp)) {\n\t\t\t\tlist_del_init(&agg->list);\n\t\t\t\tfree_rx_agg(tp, agg);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\n\tif (!agg_free && atomic_read(&tp->rx_count) < tp->rx_pending) {\n\t\tagg_free = alloc_rx_agg(tp, mflags);\n\t\ttp->rx_agg_free_ref += RTL8152_MAX_RX;\n\t}\n\n\treturn agg_free;\n}\n\nstatic int rx_bottom(struct r8152 *tp, int budget)\n{\n\tunsigned long flags;\n\tstruct list_head *cursor, *next, rx_queue;\n\tint ret = 0, work_done = 0;\n\tstruct napi_struct *napi = &tp->napi;\n\n\tif (!skb_queue_empty(&tp->rx_queue)) {\n\t\twhile (work_done < budget) {\n\t\t\tstruct sk_buff *skb = __skb_dequeue(&tp->rx_queue);\n\t\t\tstruct net_device *netdev = tp->netdev;\n\t\t\tstruct net_device_stats *stats;\n\t\t\tunsigned int pkt_len;\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,0,0)\n\t\t\tu16 vlan_tci;\n#endif\n\n\t\t\tif (!skb)\n\t\t\t\tbreak;\n\n\t\t\tpkt_len = skb->len;\n\t\t\tstats = rtl8152_get_stats(netdev);\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,0,0)\n\t\t\tvlan_tci = rtl_vlan_get_tag(skb);\n\n\t\t\tif (vlan_tci)\n\t\t\t\tvlan_gro_receive(napi, tp->vlgrp, vlan_tci,\n\t\t\t\t\t\t skb);\n\t\t\telse\n\t\t\t\tnapi_gro_receive(napi, skb);\n#else\n\t\t\tnapi_gro_receive(napi, skb);\n#endif\n\n\t\t\twork_done++;\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)\n\t\t\tnetdev->last_rx = jiffies;\n#endif\n\t\t\tstats->rx_packets++;\n\t\t\tstats->rx_bytes += pkt_len;\n\t\t}\n\t}\n\n\tif (list_empty(&tp->rx_done) || work_done >= budget)\n\t\tgoto out1;\n\n\tclear_bit(RX_EPROTO, &tp->flags);\n\tINIT_LIST_HEAD(&rx_queue);\n\tspin_lock_irqsave(&tp->rx_lock, flags);\n\tlist_splice_init(&tp->rx_done, &rx_queue);\n\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\n\tlist_for_each_safe(cursor, next, &rx_queue) {\n\t\tstruct rx_agg *agg, *agg_free;\n\t\tint len_used = 0;\n\t\tstruct urb *urb;\n\t\tvoid *rx_desc;\n\t\tu8 *rx_data;\n\n\t\t/* A bulk transfer of USB may contain may packets, so the\n\t\t * total packets may more than the budget. Deal with all\n\t\t * packets in current bulk transfer, and stop to handle the\n\t\t * next bulk transfer until next schedule, if budget is\n\t\t * exhausted.\n\t\t */\n\t\tif (work_done >= budget)\n\t\t\tbreak;\n\n\t\tlist_del_init(cursor);\n\n\t\tagg = list_entry(cursor, struct rx_agg, list);\n\t\turb = agg->urb;\n\t\tif (urb->status != 0 || urb->actual_length < ETH_ZLEN)\n\t\t\tgoto submit;\n\n\t\tagg_free = rtl_get_free_rx(tp, GFP_ATOMIC);\n\n\t\trx_desc = agg->buffer;\n\t\trx_data = agg->buffer;\n\t\tlen_used += tp->rx_desc.size;\n\n\t\twhile (urb->actual_length > len_used) {\n\t\t\tstruct net_device *netdev = tp->netdev;\n\t\t\tstruct net_device_stats *stats;\n\t\t\tunsigned int pkt_len, rx_frag_head_sz, len;\n\t\t\tstruct sk_buff *skb;\n\t\t\tbool use_frags;\n\n\t\t\tWARN_ON_ONCE(skb_queue_len(&tp->rx_queue) >= 1000);\n\n\t\t\ttp->rx_desc.len(tp, rx_desc, &pkt_len);\n\t\t\tif (pkt_len < ETH_ZLEN)\n\t\t\t\tbreak;\n\n\t\t\tlen_used += pkt_len;\n\t\t\tif (urb->actual_length < len_used)\n\t\t\t\tbreak;\n\n\t\t\tstats = rtl8152_get_stats(netdev);\n\n\t\t\tpkt_len -= ETH_FCS_LEN;\n\t\t\tlen = pkt_len;\n\t\t\trx_data += tp->rx_desc.size;\n\n\t\t\tif (!agg_free || tp->rx_copybreak > len)\n\t\t\t\tuse_frags = false;\n\t\t\telse\n\t\t\t\tuse_frags = true;\n\n\t\t\tif (use_frags) {\n\t\t\t\t/* If the budget is exhausted, the packet\n\t\t\t\t * would be queued in the driver. That is,\n\t\t\t\t * napi_gro_frags() wouldn't be called, so\n\t\t\t\t * we couldn't use napi_get_frags().\n\t\t\t\t */\n\t\t\t\tif (work_done >= budget) {\n\t\t\t\t\trx_frag_head_sz = tp->rx_copybreak;\n\t\t\t\t\tskb = napi_alloc_skb(napi,\n\t\t\t\t\t\t\t     rx_frag_head_sz);\n\t\t\t\t} else {\n\t\t\t\t\trx_frag_head_sz = 0;\n\t\t\t\t\tskb = napi_get_frags(napi);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trx_frag_head_sz = 0;\n\t\t\t\tskb = napi_alloc_skb(napi, len);\n\t\t\t}\n\n\t\t\tif (!skb) {\n\t\t\t\tstats->rx_dropped++;\n\t\t\t\tgoto find_next_rx;\n\t\t\t}\n\n\t\t\ttp->rx_desc.csum(tp, rx_desc, skb);\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,0,0)\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,22)\n\t\t\tskb->dev = netdev;\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,22) */\n\t\t\ttp->rx_desc.vlan_put_tag(tp, rx_desc, skb);\n#else\n\t\t\ttp->rx_desc.vlan_tag(tp, rx_desc, skb);\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,0,0) */\n\n\t\t\tif (use_frags) {\n\t\t\t\tif (rx_frag_head_sz) {\n\t\t\t\t\tmemcpy(skb->data, rx_data,\n\t\t\t\t\t       rx_frag_head_sz);\n\t\t\t\t\tskb_put(skb, rx_frag_head_sz);\n\t\t\t\t\tlen -= rx_frag_head_sz;\n\t\t\t\t\trx_data += rx_frag_head_sz;\n\t\t\t\t\tskb->protocol = eth_type_trans(skb,\n\t\t\t\t\t\t\t\t       netdev);\n\t\t\t\t}\n\n\t\t\t\tskb_add_rx_frag(skb, 0, agg->page,\n\t\t\t\t\t\tagg_offset(agg, rx_data),\n\t\t\t\t\t\tlen, SKB_DATA_ALIGN(len));\n\t\t\t\tget_page(agg->page);\n\t\t\t} else {\n\t\t\t\tmemcpy(skb->data, rx_data, len);\n\t\t\t\tskb_put(skb, len);\n\t\t\t\tskb->protocol = eth_type_trans(skb, netdev);\n\t\t\t}\n\n\t\t\tif (work_done < budget) {\n\t\t\t\tif (use_frags)\n\t\t\t\t\tnapi_gro_frags(napi);\n\t\t\t\telse\n\t\t\t\t\tnapi_gro_receive(napi, skb);\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)\n\t\t\t\tnetdev->last_rx = jiffies;\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29) */\n\t\t\t\twork_done++;\n\t\t\t\tstats->rx_packets++;\n\t\t\t\tstats->rx_bytes += pkt_len;\n\t\t\t} else {\n\t\t\t\t__skb_queue_tail(&tp->rx_queue, skb);\n\t\t\t}\n\nfind_next_rx:\n\t\t\trx_data = rx_agg_align(tp, rx_data + len + ETH_FCS_LEN);\n\t\t\trx_desc = rx_data;\n\t\t\tlen_used = agg_offset(agg, rx_data);\n\t\t\tlen_used += tp->rx_desc.size;\n\t\t}\n\n\t\tWARN_ON(!agg_free && page_count(agg->page) > 1);\n\n\t\tif (agg_free) {\n\t\t\tspin_lock_irqsave(&tp->rx_lock, flags);\n\t\t\tif (page_count(agg->page) == 1) {\n\t\t\t\tlist_add(&agg_free->list, &tp->rx_used);\n\t\t\t} else {\n\t\t\t\tlist_add_tail(&agg->list, &tp->rx_used);\n\t\t\t\tagg = agg_free;\n\t\t\t\turb = agg->urb;\n\t\t\t}\n\t\t\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\t\t}\n\nsubmit:\n\t\tif (!ret) {\n\t\t\tret = r8152_submit_rx(tp, agg, GFP_ATOMIC);\n\t\t} else {\n\t\t\turb->actual_length = 0;\n\t\t\tlist_add_tail(&agg->list, next);\n\t\t}\n\t}\n\n\t/* Splice the remained list back to rx_done for next schedule */\n\tif (!list_empty(&rx_queue)) {\n\t\tspin_lock_irqsave(&tp->rx_lock, flags);\n\t\tlist_splice(&rx_queue, &tp->rx_done);\n\t\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\t}\n\nout1:\n\treturn work_done;\n}\n\nstatic void tx_bottom(struct r8152 *tp)\n{\n\tint res;\n\n\tdo {\n\t\tstruct net_device *netdev = tp->netdev;\n\t\tstruct tx_agg *agg;\n\n\t\tif (skb_queue_empty(&tp->tx_queue))\n\t\t\tbreak;\n\n\t\tagg = r8152_get_tx_agg(tp);\n\t\tif (!agg)\n\t\t\tbreak;\n\n\t\tif (tp->sg_use)\n\t\t\tres = r8152_tx_agg_sg_fill(tp, agg);\n\t\telse\n\t\t\tres = r8152_tx_agg_fill(tp, agg);\n\n\t\tif (!res)\n\t\t\tcontinue;\n\n\t\tif (res == -ENODEV) {\n\t\t\trtl_set_unplug(tp);\n\t\t\tnetif_device_detach(netdev);\n\t\t} else {\n\t\t\tstruct net_device_stats *stats = &netdev->stats;\n\t\t\tunsigned long flags;\n\n\t\t\tnetif_warn(tp, tx_err, netdev,\n\t\t\t\t   \"failed tx_urb %d\\n\", res);\n\t\t\tstats->tx_dropped += agg->skb_num;\n\n\t\t\tspin_lock_irqsave(&tp->tx_lock, flags);\n\t\t\tlist_add_tail(&agg->list, &tp->tx_free);\n\t\t\tspin_unlock_irqrestore(&tp->tx_lock, flags);\n\t\t}\n\t} while (res == 0);\n}\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,9,0)\nstatic void bottom_half(unsigned long t)\n#else\nstatic void bottom_half(struct tasklet_struct *t)\n#endif\n{\n\tstruct r8152 *tp = from_tasklet(tp, t, tx_tl);\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn;\n\n\tif (!test_bit(WORK_ENABLE, &tp->flags))\n\t\treturn;\n\n\t/* When link down, the driver would cancel all bulks. */\n\t/* This avoid the re-submitting bulk */\n\tif (!netif_carrier_ok(tp->netdev))\n\t\treturn;\n\n\tclear_bit(SCHEDULE_TASKLET, &tp->flags);\n\n\ttx_bottom(tp);\n}\n\nstatic inline int __r8152_poll(struct r8152 *tp, int budget)\n{\n\tstruct napi_struct *napi = &tp->napi;\n\tint work_done;\n\n\tif (!budget)\n\t\treturn 0;\n\n\twork_done = rx_bottom(tp, budget);\n\n\tif (work_done < budget) {\n#if LINUX_VERSION_CODE < KERNEL_VERSION(4,10,0)\n\t\tnapi_complete_done(napi, work_done);\n#else\n\t\tif (!napi_complete_done(napi, work_done))\n\t\t\tgoto out;\n#endif\n\t\tif (!list_empty(&tp->rx_done))\n\t\t\tnapi_schedule(napi);\n\t}\n\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,10,0)\nout:\n#endif\n\treturn work_done;\n}\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,24)\n\nstatic int r8152_poll(struct net_device *dev, int *budget)\n{\n\tstruct r8152 *tp = netdev_priv(dev);\n\tint quota = min(dev->quota, *budget);\n\tint work_done;\n\n\twork_done = __r8152_poll(tp, quota);\n\n\t*budget -= work_done;\n\tdev->quota -= work_done;\n\n\treturn (work_done >= quota);\n}\n\n#else\n\nstatic int r8152_poll(struct napi_struct *napi, int budget)\n{\n\tstruct r8152 *tp = container_of(napi, struct r8152, napi);\n\n\treturn __r8152_poll(tp, budget);\n}\n\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,24) */\n\nstatic\nint r8152_submit_rx(struct r8152 *tp, struct rx_agg *agg, gfp_t mem_flags)\n{\n\tint ret;\n\n\t/* The rx would be stopped, so skip submitting */\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags) ||\n\t    !test_bit(WORK_ENABLE, &tp->flags) || !netif_carrier_ok(tp->netdev))\n\t\treturn 0;\n\n\tusb_fill_bulk_urb(agg->urb, tp->udev, tp->pipe_in,\n\t\t\t  agg->buffer, tp->rx_buf_sz,\n\t\t\t  (usb_complete_t)read_bulk_callback, agg);\n\n\tret = usb_submit_urb(agg->urb, mem_flags);\n\tif (ret == -ENODEV) {\n\t\trtl_set_unplug(tp);\n\t\tnetif_device_detach(tp->netdev);\n\t} else if (ret) {\n\t\tstruct urb *urb = agg->urb;\n\t\tunsigned long flags;\n\n\t\turb->actual_length = 0;\n\t\tspin_lock_irqsave(&tp->rx_lock, flags);\n\t\tlist_add_tail(&agg->list, &tp->rx_done);\n\t\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\n\t\tnetif_err(tp, rx_err, tp->netdev,\n\t\t\t  \"Couldn't submit rx[%p], ret = %d\\n\", agg, ret);\n\n\t\tnapi_schedule(&tp->napi);\n\t}\n\n\treturn ret;\n}\n\nstatic void rtl_drop_queued_tx(struct r8152 *tp)\n{\n\tstruct net_device_stats *stats = rtl8152_get_stats(tp->netdev);\n\tstruct sk_buff_head skb_head, *tx_queue = &tp->tx_queue;\n\tstruct sk_buff *skb;\n\n\tif (skb_queue_empty(tx_queue))\n\t\treturn;\n\n\t__skb_queue_head_init(&skb_head);\n\tspin_lock_bh(&tx_queue->lock);\n\tskb_queue_splice_init(tx_queue, &skb_head);\n\tspin_unlock_bh(&tx_queue->lock);\n\n\twhile ((skb = __skb_dequeue(&skb_head))) {\n\t\tdev_kfree_skb(skb);\n\t\tstats->tx_dropped++;\n\t}\n}\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,6,0)\nstatic void rtl8152_tx_timeout(struct net_device *netdev)\n#else\nstatic void rtl8152_tx_timeout(struct net_device *netdev, unsigned int txqueue)\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,6,0) */\n{\n\tstruct r8152 *tp = netdev_priv(netdev);\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)\n\tint i;\n#endif\n\n\tnetif_warn(tp, tx_err, netdev, \"Tx timeout\\n\");\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)\n\tfor (i = 0; i < RTL8152_MAX_TX; i++)\n\t\tusb_unlink_urb(tp->tx_info[i].urb);\n#else\n\tusb_queue_reset_device(tp->intf);\n#endif\n}\n\nstatic void rtl8152_set_rx_mode(struct net_device *netdev)\n{\n\tstruct r8152 *tp = netdev_priv(netdev);\n\tu32 mc_filter[2];\t/* Multicast hash filter */\n\t__le32 tmp[2];\n\tu32 ocp_data;\n\n\tif (in_atomic()) {\n\t\tif (netif_carrier_ok(netdev)) {\n\t\t\tset_bit(RTL8152_SET_RX_MODE, &tp->flags);\n\t\t\tschedule_delayed_work(&tp->schedule, 0);\n\t\t}\n\t\treturn;\n\t}\n\n\tclear_bit(RTL8152_SET_RX_MODE, &tp->flags);\n\n\tif (!netif_carrier_ok(netdev))\n\t\treturn;\n\n\tnetif_stop_queue(netdev);\n\tif (ocp_read_dword(tp, MCU_TYPE_PLA, PLA_RCR, &ocp_data) < 0)\n\t\tgoto out;\n\n\tocp_data &= ~RCR_ACPT_ALL;\n\tocp_data |= RCR_AB | RCR_APM;\n\n\tif (netdev->flags & IFF_PROMISC) {\n\t\t/* Unconditionally log net taps. */\n\t\tnetif_notice(tp, link, netdev, \"Promiscuous mode enabled\\n\");\n\t\tocp_data |= RCR_AM | RCR_AAP;\n\t\tmc_filter[1] = 0xffffffff;\n\t\tmc_filter[0] = 0xffffffff;\n\t} else if ((netdev->flags & IFF_MULTICAST &&\n\t\t\t\tnetdev_mc_count(netdev) > multicast_filter_limit) ||\n\t\t\t   (netdev->flags & IFF_ALLMULTI)) {\n\t\t/* Too many to filter perfectly -- accept all multicasts. */\n\t\tocp_data |= RCR_AM;\n\t\tmc_filter[1] = 0xffffffff;\n\t\tmc_filter[0] = 0xffffffff;\n\t} else {\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,35)\n\t\tstruct dev_mc_list *mclist;\n\t\tunsigned int i;\n\n\t\tmc_filter[1] = mc_filter[0] = 0;\n\t\tfor (i = 0, mclist = netdev->mc_list;\n\t\t     mclist && i < netdev->mc_count;\n\t\t     i++, mclist = mclist->next) {\n\t\t\tint bit_nr;\n\n\t\t\tbit_nr = ether_crc(ETH_ALEN, mclist->dmi_addr) >> 26;\n\t\t\tmc_filter[bit_nr >> 5] |= 1 << (bit_nr & 31);\n\t\t\tocp_data |= RCR_AM;\n\t\t}\n#else\n\t\tmc_filter[1] = 0;\n\t\tmc_filter[0] = 0;\n\n\t\tif (netdev->flags & IFF_MULTICAST) {\n\t\t\tstruct netdev_hw_addr *ha;\n\n\t\t\tnetdev_for_each_mc_addr(ha, netdev) {\n\t\t\t\tint bit_nr = ether_crc(ETH_ALEN, ha->addr) >> 26;\n\n\t\t\t\tmc_filter[bit_nr >> 5] |= 1 << (bit_nr & 31);\n\t\t\t\tocp_data |= RCR_AM;\n\t\t\t}\n\t\t}\n#endif\n\t}\n\n\ttmp[0] = __cpu_to_le32(swab32(mc_filter[1]));\n\ttmp[1] = __cpu_to_le32(swab32(mc_filter[0]));\n\n\tpla_ocp_write(tp, PLA_MAR, BYTE_EN_DWORD, sizeof(tmp), tmp);\n\tocp_write_dword(tp, MCU_TYPE_PLA, PLA_RCR, ocp_data);\n\nout: /* to do */\n\tnetif_wake_queue(netdev);\n}\n\nstatic inline bool rtl_gso_check(struct net_device *dev, struct sk_buff *skb)\n{\n\tstruct r8152 *tp = netdev_priv(dev);\n\n\tif (tp->sg_use)\n\t\treturn true;\n\telse if ((skb->len + tp->tx_desc.size) <= agg_buf_sz)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,18,4)\n\nstatic netdev_features_t\nrtl8152_features_check(struct sk_buff *skb, struct net_device *dev,\n\t\t       netdev_features_t features)\n{\n\tu32 mss = skb_shinfo(skb)->gso_size;\n\tint max_offset = mss ? GTTCPHO_MAX : TCPHO_MAX;\n\n\tif ((mss || skb->ip_summed == CHECKSUM_PARTIAL) &&\n\t    skb_transport_offset(skb) > max_offset)\n\t\tfeatures &= ~(NETIF_F_CSUM_MASK | NETIF_F_GSO_MASK);\n\telse if (!rtl_gso_check(dev, skb))\n\t\tfeatures &= ~NETIF_F_GSO_MASK;\n\n\treturn features;\n}\n#endif /* LINUX_VERSION_CODE >= KERNEL_VERSION(3,18,4) */\n\nstatic netdev_tx_t rtl8152_start_xmit(struct sk_buff *skb,\n\t\t\t\t      struct net_device *netdev)\n{\n\tstruct r8152 *tp = netdev_priv(netdev);\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,18,4)\n\tif (unlikely(!rtl_gso_check(netdev, skb))) {\n\t\tnetdev_features_t features = netdev->features;\n\t\tstruct sk_buff *segs, *nskb;\n\n\t\tfeatures &= ~(NETIF_F_TSO | NETIF_F_TSO6);\n\t\tsegs = skb_gso_segment(skb, features);\n\t\tif (IS_ERR(segs) || !segs)\n\t\t\tgoto free_skb;\n\n\t\tdo {\n\t\t\tnskb = segs;\n\t\t\tsegs = segs->next;\n\t\t\tnskb->next = NULL;\n\t\t\trtl8152_start_xmit(nskb, netdev);\n\t\t} while (segs);\n\nfree_skb:\n\t\tdev_kfree_skb_any(skb);\n\n\t\treturn NETDEV_TX_OK;\n\t}\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,31)\n\tnetdev->trans_start = jiffies\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,31) */\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,18,4) */\n\n\tskb_tx_timestamp(skb);\n\tnetdev_sent_queue(netdev, skb->len);\n\n\tskb_queue_tail(&tp->tx_queue, skb);\n\n\tif (!list_empty(&tp->tx_free)) {\n\t\tif (test_bit(SELECTIVE_SUSPEND, &tp->flags)) {\n\t\t\tset_bit(SCHEDULE_TASKLET, &tp->flags);\n\t\t\tschedule_delayed_work(&tp->schedule, 0);\n\t\t} else {\n\t\t\tusb_mark_last_busy(tp->udev);\n\t\t\ttasklet_schedule(&tp->tx_tl);\n\t\t}\n\t} else if (skb_queue_len(&tp->tx_queue) > tp->tx_qlen) {\n\t\tnetif_stop_queue(netdev);\n\t}\n\n\treturn NETDEV_TX_OK;\n}\n\nstatic int r8152b_reset_packet_filter(struct r8152 *tp)\n{\n\tint ret;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_FMC, FMC_FCR_MCU_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_FMC, FMC_FCR_MCU_EN);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8152_nic_reset(struct r8152 *tp)\n{\n\tint i, ret;\n\n\tswitch (tp->version) {\n\tcase RTL_TEST_01:\n\tcase RTL_VER_10:\n\tcase RTL_VER_11:\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_CR, CR_TE);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_BMU_RESET,\n\t\t\t\t\tBMU_RESET_EP_IN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, USB_USB_CTRL,\n\t\t\t\t\tCDC_ECM_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_CR, CR_RE);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, USB_BMU_RESET,\n\t\t\t\t\tBMU_RESET_EP_IN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_USB_CTRL,\n\t\t\t\t\tCDC_ECM_EN);\n\t\tbreak;\n\tcase RTL_VER_01:\n\tcase RTL_VER_02:\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\tcase RTL_VER_07:\n\tcase RTL_VER_08:\n\tcase RTL_VER_09:\n\tcase RTL_VER_12:\n\tcase RTL_VER_13:\n\tcase RTL_VER_14:\n\tcase RTL_VER_15:\n\t\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CR, CR_RST);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tfor (i = 0; i < 1000; i++) {\n\t\t\tu32 ocp_data;\n\n\t\t\tret = ocp_read_byte(tp, MCU_TYPE_PLA, PLA_CR,\n\t\t\t\t\t    &ocp_data);\n\t\t\tif (ret < 0 || !(ocp_data & CR_RST))\n\t\t\t\tbreak;\n\t\t\tusleep_range(100, 400);\n\t\t}\n\t\tbreak;\n\tcase RTL_VER_16:\n\tcase RTL_VER_17:\n\tdefault:\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_CR,\n\t\t\t\t\tCR_RE | CR_TE);\n\t\tbreak;\n\n\t}\nout:\n\treturn ret;\n}\n\nstatic void set_tx_qlen(struct r8152 *tp)\n{\n\tif (tp->sg_use)\n\t\ttp->tx_qlen = RTL_MAX_SG_NUM;\n\telse\n\t\ttp->tx_qlen = agg_buf_sz / (mtu_to_size(tp->netdev->mtu) +\n\t\t\t\t\t    tp->tx_desc.size);\n}\n\nstatic u16 rtl8152_get_speed(struct r8152 *tp)\n{\n\tu32 ocp_data;\n\n\tif (ocp_read_word(tp, MCU_TYPE_PLA, PLA_PHYSTATUS, &ocp_data) < 0)\n\t\treturn 0; /* to do */\n\telse\n\t\treturn (u16)ocp_data;\n}\n\nstatic int rtl_eee_plus_en(struct r8152 *tp, bool enable)\n{\n\tif (enable)\n\t\treturn ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_EEEP_CR,\n\t\t\t\t\t EEEP_CR_EEEP_TX);\n\telse\n\t\treturn ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_EEEP_CR,\n\t\t\t\t\t EEEP_CR_EEEP_TX);\n}\n\nstatic int rtl_set_eee_plus(struct r8152 *tp)\n{\n\tif (rtl8152_get_speed(tp) & _10bps)\n\t\treturn rtl_eee_plus_en(tp, true);\n\telse\n\t\treturn rtl_eee_plus_en(tp, false);\n}\n\nstatic int rxdy_gated_en(struct r8152 *tp, bool enable)\n{\n\tif (enable)\n\t\treturn ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_MISC_1,\n\t\t\t\t\t RXDY_GATED_EN);\n\telse\n\t\treturn ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_MISC_1,\n\t\t\t\t\t RXDY_GATED_EN);\n}\n\nstatic int rtl_start_rx(struct r8152 *tp)\n{\n\tstruct rx_agg *agg, *agg_next;\n\tstruct list_head tmp_list;\n\tunsigned long flags;\n\tint ret = 0, i = 0;\n\n\tINIT_LIST_HEAD(&tmp_list);\n\n\tspin_lock_irqsave(&tp->rx_lock, flags);\n\n\tINIT_LIST_HEAD(&tp->rx_done);\n\tINIT_LIST_HEAD(&tp->rx_used);\n\n\tlist_splice_init(&tp->rx_info, &tmp_list);\n\n\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\n\tlist_for_each_entry_safe(agg, agg_next, &tmp_list, info_list) {\n\t\tINIT_LIST_HEAD(&agg->list);\n\n\t\t/* Only RTL8152_MAX_RX rx_agg need to be submitted. */\n\t\tif (++i > RTL8152_MAX_RX) {\n\t\t\tspin_lock_irqsave(&tp->rx_lock, flags);\n\t\t\tlist_add_tail(&agg->list, &tp->rx_used);\n\t\t\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\t\t} else if (unlikely(ret < 0)) {\n\t\t\tspin_lock_irqsave(&tp->rx_lock, flags);\n\t\t\tlist_add_tail(&agg->list, &tp->rx_done);\n\t\t\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\t\t} else {\n\t\t\tret = r8152_submit_rx(tp, agg, GFP_KERNEL);\n\t\t}\n\t}\n\n\tspin_lock_irqsave(&tp->rx_lock, flags);\n\tWARN_ON(!list_empty(&tp->rx_info));\n\tlist_splice(&tmp_list, &tp->rx_info);\n\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\n\treturn ret;\n}\n\nstatic int rtl_stop_rx(struct r8152 *tp)\n{\n\tstruct rx_agg *agg, *agg_next;\n\tstruct list_head tmp_list;\n\tunsigned long flags;\n\n\tINIT_LIST_HEAD(&tmp_list);\n\n\t/* The usb_kill_urb() couldn't be used in atomic.\n\t * Therefore, move the list of rx_info to a tmp one.\n\t * Then, list_for_each_entry_safe could be used without\n\t * spin lock.\n\t */\n\n\tspin_lock_irqsave(&tp->rx_lock, flags);\n\tlist_splice_init(&tp->rx_info, &tmp_list);\n\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\n\tlist_for_each_entry_safe(agg, agg_next, &tmp_list, info_list)\n\t\tusb_kill_urb(agg->urb);\n\n\t/* Move back the list of temp to the rx_info */\n\tspin_lock_irqsave(&tp->rx_lock, flags);\n\tWARN_ON(!list_empty(&tp->rx_info));\n\tlist_splice(&tmp_list, &tp->rx_info);\n\tspin_unlock_irqrestore(&tp->rx_lock, flags);\n\n\twhile (!skb_queue_empty(&tp->rx_queue))\n\t\tdev_kfree_skb(__skb_dequeue(&tp->rx_queue));\n\n\treturn 0;\n}\n\nstatic int rtl_set_ifg(struct r8152 *tp, u16 speed)\n{\n\tint ret;\n\n\tif ((speed & (_10bps | _100bps)) && !(speed & FULL_DUP)) {\n\t\tret = ocp_word_w0w1(tp, MCU_TYPE_PLA, PLA_TCR1, IFG_MASK,\n\t\t\t\t    IFG_144NS);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL4,\n\t\t\t\t\tTX10MIDLE_EN);\n\t} else {\n\t\tret = ocp_word_w0w1(tp, MCU_TYPE_PLA, PLA_TCR1, IFG_MASK,\n\t\t\t\t    IFG_96NS);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL4,\n\t\t\t\t\tTX10MIDLE_EN);\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic inline void r8153b_rx_agg_chg_indicate(struct r8152 *tp)\n{\n\tocp_write_byte(tp, MCU_TYPE_USB, USB_UPT_RXDMA_OWN,\n\t\t       OWN_UPDATE | OWN_CLEAR);\n}\n\nstatic int rtl_enable(struct r8152 *tp)\n{\n\tint ret;\n\n\tret = r8152b_reset_packet_filter(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_byte_set_bits(tp, MCU_TYPE_PLA, PLA_CR, CR_RE | CR_TE);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_01:\n\tcase RTL_VER_02:\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\tcase RTL_VER_07:\n\t\tbreak;\n\tdefault:\n\t\tr8153b_rx_agg_chg_indicate(tp);\n\t\tbreak;\n\t}\n\n\tret = rxdy_gated_en(tp, false);\n\n\tnetdev_reset_queue(tp->netdev);\n\nout:\n\treturn (ret < 0) ? ret : 0;\n}\n\nstatic int rtl8152_enable(struct r8152 *tp)\n{\n\tint ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tset_tx_qlen(tp);\n\tret = rtl_set_eee_plus(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_enable(tp);\n\nout:\n\treturn ret;\n}\n\nstatic int r8153_set_rx_early_timeout(struct r8152 *tp)\n{\n\tu32 ocp_data = tp->coalesce / 8;\n\tint ret;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\t\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_RX_EARLY_TIMEOUT,\n\t\t\t\t     ocp_data);\n\t\tbreak;\n\n\tcase RTL_VER_08:\n\tcase RTL_VER_09:\n\tcase RTL_VER_14:\n\t\t/* The RTL8153B uses USB_RX_EXTRA_AGGR_TMR for rx timeout\n\t\t * primarily. For USB_RX_EARLY_TIMEOUT, we fix it to 1264ns.\n\t\t */\n\t\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_RX_EARLY_TIMEOUT,\n\t\t\t\t     1264 / 8);\n\t\tif (ret < 0)\n\t\t\tbreak;\n\t\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_RX_EXTRA_AGGR_TMR,\n\t\t\t\t     ocp_data);\n\t\tbreak;\n\n\tcase RTL_VER_10:\n\tcase RTL_VER_11:\n\tcase RTL_VER_12:\n\tcase RTL_VER_13:\n\tcase RTL_VER_15:\n\tcase RTL_VER_16:\n\tcase RTL_VER_17:\n\t\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_RX_EARLY_TIMEOUT,\n\t\t\t\t     640 / 8);\n\t\tif (ret < 0)\n\t\t\tbreak;\n\t\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_RX_EXTRA_AGGR_TMR,\n\t\t\t\t     ocp_data);\n\t\tbreak;\n\n\tdefault:\n\t\tret = -ENODEV;\n\t\tbreak;\n\t}\n\n\treturn ret;\n}\n\nstatic u32 rx_reserved_size(struct r8152 *tp, u32 mtu)\n{\n\treturn mtu_to_size(mtu) + tp->rx_desc.size + tp->rx_desc.align;\n}\n\nstatic int r8153_set_rx_early_size(struct r8152 *tp)\n{\n\tu32 ocp_data = tp->rx_buf_sz - rx_reserved_size(tp, tp->netdev->mtu);\n\tint ret;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\t\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_RX_EARLY_SIZE,\n\t\t\t\t     ocp_data / 4);\n\t\tbreak;\n\tcase RTL_TEST_01:\n\tcase RTL_VER_08:\n\tcase RTL_VER_09:\n\tcase RTL_VER_10:\n\tcase RTL_VER_11:\n\tcase RTL_VER_12:\n\tcase RTL_VER_13:\n\tcase RTL_VER_14:\n\tcase RTL_VER_15:\n\t\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_RX_EARLY_SIZE,\n\t\t\t\t     ocp_data / 8);\n\t\tbreak;\n\tcase RTL_TEST_02:\n\tcase RTL_VER_16:\n\tcase RTL_VER_17:\n\t\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_RX_EARLY_SIZE,\n\t\t\t\t     ocp_data / 16);\n\t\tbreak;\n\tdefault:\n\t\tret = -ENODEV;\n\t\tWARN_ON_ONCE(1);\n\t\tbreak;\n\t}\n\n\treturn ret;\n}\n\nstatic int rtl8153_enable(struct r8152 *tp)\n{\n\tint ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tset_tx_qlen(tp);\n\tret = rtl_set_eee_plus(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_set_rx_early_timeout(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_set_rx_early_size(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_set_ifg(tp, rtl8152_get_speed(tp));\n\tif (ret < 0)\n\t\tgoto out;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_14:\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_FW_TASK,\n\t\t\t\t\tFC_PATCH_TASK);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tusleep_range(1000, 2000);\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, USB_FW_TASK,\n\t\t\t\t\tFC_PATCH_TASK);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\n\tret = rtl_enable(tp);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl_disable(struct r8152 *tp)\n{\n\tint i, ret, err = 0;\n\tu32 ocp_data;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags)) {\n\t\trtl_drop_queued_tx(tp);\n\t\trtl_stop_rx(tp);\n\t\treturn -ENODEV;\n\t}\n\n\tret = ocp_dword_clr_bits(tp, MCU_TYPE_PLA, PLA_RCR, RCR_ACPT_ALL);\n\tif (ret < 0)\n\t\terr = ret;\n\n\trtl_drop_queued_tx(tp);\n\n\tfor (i = 0; i < RTL8152_MAX_TX; i++)\n\t\tusb_kill_urb(tp->tx_info[i].urb);\n\n\tret = rxdy_gated_en(tp, true);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tfor (i = 0; i < 1000; i++) {\n\t\tret = ocp_read_byte(tp, MCU_TYPE_PLA, PLA_OOB_CTRL, &ocp_data);\n\t\tif (ret < 0 || (ocp_data & FIFO_EMPTY) == FIFO_EMPTY)\n\t\t\tbreak;\n\t\tusleep_range(1000, 2000);\n\t}\n\n\tfor (i = 0; i < 1000; i++) {\n\t\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_TCR0, &ocp_data);\n\t\tif (ret < 0 || (ocp_data & TCR0_TX_EMPTY))\n\t\t\tbreak;\n\t\tusleep_range(1000, 2000);\n\t}\n\n\trtl_stop_rx(tp);\n\n\tret = rtl8152_nic_reset(tp);\n\n\tif (err < 0)\n\t\treturn err;\n\telse\n\t\treturn ret;\n}\n\nstatic int r8152_power_cut_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable)\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, USB_UPS_CTRL,\n\t\t\t\t\tPOWER_CUT);\n\telse\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_UPS_CTRL,\n\t\t\t\t\tPOWER_CUT);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_PM_CTRL_STATUS,\n\t\t\t  RESUME_INDICATE);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl_rx_vlan_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_01:\n\tcase RTL_VER_02:\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\tcase RTL_VER_07:\n\tcase RTL_VER_08:\n\tcase RTL_VER_09:\n\tcase RTL_VER_14:\n\t\tif (enable)\n\t\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_CPCR,\n\t\t\t\t\t\tCPCR_RX_VLAN);\n\t\telse\n\t\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_CPCR,\n\t\t\t\t\t\tCPCR_RX_VLAN);\n\t\tbreak;\n\n\tcase RTL_TEST_01:\n\tcase RTL_VER_10:\n\tcase RTL_VER_11:\n\tcase RTL_VER_12:\n\tcase RTL_VER_13:\n\tcase RTL_VER_15:\n\tcase RTL_VER_16:\n\tcase RTL_VER_17:\n\tdefault:\n\t\tif (enable)\n\t\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_RCR1,\n\t\t\t\t\t\tOUTER_VLAN | INNER_VLAN);\n\t\telse\n\t\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_RCR1,\n\t\t\t\t\t\tOUTER_VLAN | INNER_VLAN);\n\t\tbreak;\n\t}\n\n\treturn (ret < 0) ? ret : 0;\n}\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(3,0,0)\n\nstatic void\nrtl8152_vlan_rx_register(struct net_device *dev, struct vlan_group *grp)\n{\n\tstruct r8152 *tp = netdev_priv(dev);\n\n\tif (unlikely(tp->rtk_enable_diag))\n\t\treturn;\n\n\tif (usb_autopm_get_interface(tp->intf) < 0)\n\t\treturn;\n\n\tmutex_lock(&tp->control);\n\n\ttp->vlgrp = grp;\n\tif (tp->vlgrp)\n\t\trtl_rx_vlan_en(tp, true);\n\telse\n\t\trtl_rx_vlan_en(tp, false);\n\n\tmutex_unlock(&tp->control);\n}\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,22)\n\nstatic void rtl8152_vlan_rx_kill_vid(struct net_device *dev, unsigned short vid)\n{\n\tstruct r8152 *tp = netdev_priv(dev);\n\n\tvlan_group_set_device(tp->vlgrp, vid, NULL);\n}\n\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(2,6,22) */\n\n#else\n\nstatic int rtl8152_set_features(struct net_device *dev,\n\t\t\t\tnetdev_features_t features)\n{\n\tnetdev_features_t changed = features ^ dev->features;\n\tstruct r8152 *tp = netdev_priv(dev);\n\tint ret;\n\n\tif (unlikely(tp->rtk_enable_diag))\n\t\treturn -EBUSY;\n\n\tret = usb_autopm_get_interface(tp->intf);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tmutex_lock(&tp->control);\n\n\tif (changed & NETIF_F_HW_VLAN_CTAG_RX) {\n\t\tif (features & NETIF_F_HW_VLAN_CTAG_RX)\n\t\t\tret = rtl_rx_vlan_en(tp, true);\n\t\telse\n\t\t\tret = rtl_rx_vlan_en(tp, false);\n\t}\n\n\tmutex_unlock(&tp->control);\n\n\tusb_autopm_put_interface(tp->intf);\n\nout:\n\treturn ret;\n}\n\n#endif /* LINUX_VERSION_CODE < KERNEL_VERSION(3,0,0) */\n\n#define WAKE_ANY (WAKE_PHY | WAKE_MAGIC | WAKE_UCAST | WAKE_BCAST | WAKE_MCAST)\n\nstatic u32 __rtl_get_wol(struct r8152 *tp)\n{\n\tu32 ocp_data;\n\tu32 wolopts = 0;\n\tint ret;\n\n\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_CONFIG34, &ocp_data);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (ocp_data & LINK_ON_WAKE_EN)\n\t\twolopts |= WAKE_PHY;\n\n\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_CONFIG5, &ocp_data);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (ocp_data & UWF_EN)\n\t\twolopts |= WAKE_UCAST;\n\tif (ocp_data & BWF_EN)\n\t\twolopts |= WAKE_BCAST;\n\tif (ocp_data & MWF_EN)\n\t\twolopts |= WAKE_MCAST;\n\n\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_CFG_WOL, &ocp_data);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (ocp_data & MAGIC_EN)\n\t\twolopts |= WAKE_MAGIC;\n\nout:\n\treturn wolopts;\n}\n\nstatic int __rtl_set_wol(struct r8152 *tp, u32 wolopts)\n{\n\tu16 ocp_data;\n\tint ret;\n\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR, CRWECR_CONFIG);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (wolopts & WAKE_PHY)\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_CONFIG34,\n\t\t\t\t\tLINK_ON_WAKE_EN);\n\telse\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_CONFIG34,\n\t\t\t\t\tLINK_ON_WAKE_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tocp_data = 0;\n\tif (wolopts & WAKE_UCAST)\n\t\tocp_data |= UWF_EN;\n\tif (wolopts & WAKE_BCAST)\n\t\tocp_data |= BWF_EN;\n\tif (wolopts & WAKE_MCAST)\n\t\tocp_data |= MWF_EN;\n\tret = ocp_word_w0w1(tp, MCU_TYPE_PLA, PLA_CONFIG5,\n\t\t\t    UWF_EN | BWF_EN | MWF_EN, ocp_data);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR, CRWECR_NORAML);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (wolopts & WAKE_MAGIC)\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_CFG_WOL, MAGIC_EN);\n\telse\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_CFG_WOL, MAGIC_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (wolopts & WAKE_ANY)\n\t\tdevice_set_wakeup_enable(&tp->udev->dev, true);\n\telse\n\t\tdevice_set_wakeup_enable(&tp->udev->dev, false);\n\nout:\n\treturn ret;\n}\n\nstatic int r8153_mac_clk_speed_down(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\t/* MAC clock speed down */\n\tif (enable)\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL2,\n\t\t\t\t\tMAC_CLK_SPDWN_EN);\n\telse\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL2,\n\t\t\t\t\tMAC_CLK_SPDWN_EN);\n\n\treturn ret;\n}\n\nstatic int r8156_mac_clk_spd(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\t/* MAC clock speed down */\n\tif (enable) {\n\t\t/* aldps_spdwn_ratio, tp10_spdwn_ratio */\n\t\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL,\n\t\t\t\t     0x0403);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\t/* eee_spdwn_ratio */\n\t\tret = ocp_word_w0w1(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL2,\n\t\t\t\t    EEE_SPDWN_RATIO_MASK,\n\t\t\t\t    MAC_CLK_SPDWN_EN | 0x03);\n\t} else {\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL2,\n\t\t\t\t\tMAC_CLK_SPDWN_EN);\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int r8153_u1u2en(struct r8152 *tp, bool enable)\n{\n\tu8 u1u2[8];\n\n\tif (enable)\n\t\tmemset(u1u2, 0xff, sizeof(u1u2));\n\telse\n\t\tmemset(u1u2, 0x00, sizeof(u1u2));\n\n\treturn usb_ocp_write(tp, USB_TOLERANCE, BYTE_EN_SIX_BYTES, sizeof(u1u2),\n\t\t\t     u1u2);\n}\n\nstatic int r8153b_u1u2en(struct r8152 *tp, bool enable)\n{\n\tif (enable)\n\t\treturn ocp_word_set_bits(tp, MCU_TYPE_USB, USB_LPM_CONFIG,\n\t\t\t\t\t LPM_U1U2_EN);\n\telse\n\t\treturn ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_LPM_CONFIG,\n\t\t\t\t\t LPM_U1U2_EN);\n}\n\nstatic int r8153_u2p3en(struct r8152 *tp, bool enable)\n{\n\tif (enable)\n\t\treturn ocp_word_set_bits(tp, MCU_TYPE_USB, USB_U2P3_CTRL,\n\t\t\t\t\t U2P3_ENABLE);\n\telse\n\t\treturn ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_U2P3_CTRL,\n\t\t\t\t\t U2P3_ENABLE);\n}\n\nstatic int r8157_u2p3en(struct r8152 *tp, bool enable)\n{\n\tif (enable)\n\t\treturn rtl_ip_set_bits(tp, 0xc2c0, BIT(29));\n\telse\n\t\treturn rtl_ip_clr_bits(tp, 0xc2c0, BIT(29));\n}\n\nstatic bool r8156b_flash_used(struct r8152 *tp)\n{\n\tu32 ocp_data;\n\tint ret;\n\n\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_GPHY_CTRL, &ocp_data);\n\tif (ret < 0)\n\t\treturn false;\n\tif (!(ocp_data & GPHY_FLASH))\n\t\treturn false;\n\n\tret = ocp_read_word(tp, MCU_TYPE_USB, USB_GPHY_CTRL, &ocp_data);\n\tif (ret < 0)\n\t\treturn false;\n\tif (!(ocp_data & BYPASS_FLASH))\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nstatic int r8153b_ups_flags(struct r8152 *tp)\n{\n\tu32 ups_flags = 0;\n\n\tif (tp->ups_info.green)\n\t\tups_flags |= UPS_FLAGS_EN_GREEN;\n\n\tif (tp->ups_info.aldps)\n\t\tups_flags |= UPS_FLAGS_EN_ALDPS;\n\n\tif (tp->ups_info.eee)\n\t\tups_flags |= UPS_FLAGS_EN_EEE;\n\n\tif (tp->ups_info.flow_control)\n\t\tups_flags |= UPS_FLAGS_EN_FLOW_CTR;\n\n\tif (tp->ups_info.eee_ckdiv)\n\t\tups_flags |= UPS_FLAGS_EN_EEE_CKDIV;\n\n\tif (tp->ups_info.eee_cmod_lv)\n\t\tups_flags |= UPS_FLAGS_EEE_CMOD_LV_EN;\n\n\tif (tp->ups_info.r_tune)\n\t\tups_flags |= UPS_FLAGS_R_TUNE;\n\n\tif (tp->ups_info._10m_ckdiv)\n\t\tups_flags |= UPS_FLAGS_EN_10M_CKDIV;\n\n\tif (tp->ups_info.eee_plloff_100)\n\t\tups_flags |= UPS_FLAGS_EEE_PLLOFF_100;\n\n\tif (tp->ups_info.eee_plloff_giga)\n\t\tups_flags |= UPS_FLAGS_EEE_PLLOFF_GIGA;\n\n\tif (tp->ups_info._250m_ckdiv)\n\t\tups_flags |= UPS_FLAGS_250M_CKDIV;\n\n\tif (tp->ups_info.ctap_short_off)\n\t\tups_flags |= UPS_FLAGS_CTAP_SHORT_DIS;\n\n\tswitch (tp->ups_info.speed_duplex) {\n\tcase NWAY_10M_HALF:\n\t\tups_flags |= ups_flags_speed(1);\n\t\tbreak;\n\tcase NWAY_10M_FULL:\n\t\tups_flags |= ups_flags_speed(2);\n\t\tbreak;\n\tcase NWAY_100M_HALF:\n\t\tups_flags |= ups_flags_speed(3);\n\t\tbreak;\n\tcase NWAY_100M_FULL:\n\t\tups_flags |= ups_flags_speed(4);\n\t\tbreak;\n\tcase NWAY_1000M_FULL:\n\t\tups_flags |= ups_flags_speed(5);\n\t\tbreak;\n\tcase FORCE_10M_HALF:\n\t\tups_flags |= ups_flags_speed(6);\n\t\tbreak;\n\tcase FORCE_10M_FULL:\n\t\tups_flags |= ups_flags_speed(7);\n\t\tbreak;\n\tcase FORCE_100M_HALF:\n\t\tups_flags |= ups_flags_speed(8);\n\t\tbreak;\n\tcase FORCE_100M_FULL:\n\t\tups_flags |= ups_flags_speed(9);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\n\treturn ocp_write_dword(tp, MCU_TYPE_USB, USB_UPS_FLAGS, ups_flags);\n}\n\nstatic int r8156_ups_flags(struct r8152 *tp)\n{\n\tu32 ups_flags = 0;\n\n\tif (tp->ups_info.green)\n\t\tups_flags |= UPS_FLAGS_EN_GREEN;\n\n\tif (tp->ups_info.aldps)\n\t\tups_flags |= UPS_FLAGS_EN_ALDPS;\n\n\tif (tp->ups_info.eee)\n\t\tups_flags |= UPS_FLAGS_EN_EEE;\n\n\tif (tp->ups_info.flow_control)\n\t\tups_flags |= UPS_FLAGS_EN_FLOW_CTR;\n\n\tif (tp->ups_info.eee_ckdiv)\n\t\tups_flags |= UPS_FLAGS_EN_EEE_CKDIV;\n\n\tif (tp->ups_info._10m_ckdiv)\n\t\tups_flags |= UPS_FLAGS_EN_10M_CKDIV;\n\n\tif (tp->ups_info.eee_plloff_100)\n\t\tups_flags |= UPS_FLAGS_EEE_PLLOFF_100;\n\n\tif (tp->ups_info.eee_plloff_giga)\n\t\tups_flags |= UPS_FLAGS_EEE_PLLOFF_GIGA;\n\n\tif (tp->ups_info._250m_ckdiv)\n\t\tups_flags |= UPS_FLAGS_250M_CKDIV;\n\n\tswitch (tp->ups_info.speed_duplex) {\n\tcase FORCE_10M_HALF:\n\t\tups_flags |= ups_flags_speed(0);\n\t\tbreak;\n\tcase FORCE_10M_FULL:\n\t\tups_flags |= ups_flags_speed(1);\n\t\tbreak;\n\tcase FORCE_100M_HALF:\n\t\tups_flags |= ups_flags_speed(2);\n\t\tbreak;\n\tcase FORCE_100M_FULL:\n\t\tups_flags |= ups_flags_speed(3);\n\t\tbreak;\n\tcase NWAY_10M_HALF:\n\t\tups_flags |= ups_flags_speed(4);\n\t\tbreak;\n\tcase NWAY_10M_FULL:\n\t\tups_flags |= ups_flags_speed(5);\n\t\tbreak;\n\tcase NWAY_100M_HALF:\n\t\tups_flags |= ups_flags_speed(6);\n\t\tbreak;\n\tcase NWAY_100M_FULL:\n\t\tups_flags |= ups_flags_speed(7);\n\t\tbreak;\n\tcase NWAY_1000M_FULL:\n\t\tups_flags |= ups_flags_speed(8);\n\t\tbreak;\n\tcase NWAY_2500M_FULL:\n\t\tups_flags |= ups_flags_speed(9);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\n\tswitch (tp->ups_info.lite_mode) {\n\tcase 1:\n\t\tups_flags |= 0 << 5;\n\t\tbreak;\n\tcase 2:\n\t\tups_flags |= 2 << 5;\n\t\tbreak;\n\tcase 0:\n\tdefault:\n\t\tups_flags |= 1 << 5;\n\t\tbreak;\n\t}\n\n\treturn ocp_write_dword(tp, MCU_TYPE_USB, USB_UPS_FLAGS, ups_flags);\n}\n\nstatic int rtl_green_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable)\n\t\tret = sram_set_bits(tp, SRAM_GREEN_CFG, GREEN_ETH_EN);\n\telse\n\t\tret = sram_clr_bits(tp, SRAM_GREEN_CFG, GREEN_ETH_EN);\n\n\ttp->ups_info.green = enable;\n\n\treturn ret;\n}\n\nstatic int r8153b_green_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\t/* 10M abiq&ldvbias */\n\t\tret = sram_write(tp, 0x8045, 0);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\t/* 100M short abiq&ldvbias */\n\t\tret = sram_write(tp, 0x804d, 0x1222);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\t/* 1000M short abiq&ldvbias */\n\t\tret = sram_write(tp, 0x805d, 0x0022);\n\t} else {\n\t\t/* 10M abiq&ldvbias */\n\t\tret = sram_write(tp, 0x8045, 0x2444);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\t/* 100M short abiq&ldvbias */\n\t\tret = sram_write(tp, 0x804d, 0x2444);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\t/* 1000M short abiq&ldvbias */\n\t\tret = sram_write(tp, 0x805d, 0x2444);\n\t}\n\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_green_en(tp, true);\n\nout:\n\treturn ret;\n}\n\nstatic int r8153_phy_status(struct r8152 *tp, u16 desired)\n{\n\tint i, ret;\n\tu16 data;\n\n\tfor (i = 0; i < 500; i++) {\n\t\tret = ocp_reg_read(tp, OCP_PHY_STATUS, &data);\n\t\tif (ret < 0)\n\t\t\treturn ret;\n\n\t\tdata &= PHY_STAT_MASK;\n\t\tif (desired) {\n\t\t\tif (data == desired)\n\t\t\t\tbreak;\n\t\t} else if (data == PHY_STAT_LAN_ON || data == PHY_STAT_PWRDN ||\n\t\t\t   data == PHY_STAT_EXT_INIT) {\n\t\t\tbreak;\n\t\t}\n\n\t\tmsleep(20);\n\t\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\t\tbreak;\n\t}\n\n\treturn data;\n}\n\nstatic int r8153b_ups_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = r8153b_ups_flags(tp);\n\n\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, USB_POWER_CUT,\n\t\t\t\t\tUPS_EN | USP_PREWAKE | PHASE2_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, USB_MISC_2,\n\t\t\t\t\tUPS_FORCE_PWR_DOWN);\n\t} else {\n\t\tu32 ocp_data;\n\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_USB, USB_POWER_CUT,\n\t\t\t\t\tUPS_EN | USP_PREWAKE);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_USB, USB_MISC_2,\n\t\t\t\t\tUPS_FORCE_PWR_DOWN | UPS_NO_UPS);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_read_word(tp, MCU_TYPE_USB, USB_MISC_0, &ocp_data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tif (ocp_data & PCUT_STATUS) {\n\t\t\tint i;\n\n\t\t\tfor (i = 0; i < 500; i++) {\n\t\t\t\tret = ocp_read_word(tp, MCU_TYPE_PLA,\n\t\t\t\t\t\t    PLA_BOOT_CTRL, &ocp_data);\n\t\t\t\tif (ret < 0)\n\t\t\t\t\tgoto out;\n\t\t\t\tif (ocp_data & AUTOLOAD_DONE)\n\t\t\t\t\tbreak;\n\t\t\t\tmsleep(20);\n\t\t\t}\n\n\t\t\ttp->rtl_ops.hw_phy_cfg(tp);\n\n\t\t\tret = rtl8152_set_speed(tp, tp->autoneg, tp->speed,\n\t\t\t\t\t\ttp->duplex, tp->advertising);\n\t\t}\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int r8153c_ups_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = r8153b_ups_flags(tp);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, USB_POWER_CUT,\n\t\t\t\t\tUPS_EN | USP_PREWAKE | PHASE2_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_byte_w0w1(tp, MCU_TYPE_USB, USB_MISC_2, BIT(7),\n\t\t\t\t    UPS_FORCE_PWR_DOWN);\n\t} else {\n\t\tu32 ocp_data;\n\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_USB, USB_POWER_CUT,\n\t\t\t\t\tUPS_EN | USP_PREWAKE);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_USB, USB_MISC_2,\n\t\t\t\t\tUPS_FORCE_PWR_DOWN | UPS_NO_UPS);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_read_word(tp, MCU_TYPE_USB, USB_MISC_0, &ocp_data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tif (ocp_data & PCUT_STATUS) {\n\t\t\tint i;\n\n\t\t\tfor (i = 0; i < 500; i++) {\n\t\t\t\tret = ocp_read_word(tp, MCU_TYPE_PLA,\n\t\t\t\t\t\t    PLA_BOOT_CTRL, &ocp_data);\n\t\t\t\tif (ret < 0)\n\t\t\t\t\tgoto out;\n\t\t\t\tif (ocp_data & AUTOLOAD_DONE)\n\t\t\t\t\tbreak;\n\t\t\t\tmsleep(20);\n\t\t\t}\n\n\t\t\ttp->rtl_ops.hw_phy_cfg(tp);\n\n\t\t\tret = rtl8152_set_speed(tp, tp->autoneg, tp->speed,\n\t\t\t\t\t\ttp->duplex, tp->advertising);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\t\t}\n\n\t\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR,\n\t\t\t\t     CRWECR_CONFIG);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_CONFIG34, BIT(8));\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR,\n\t\t\t\t     CRWECR_NORAML);\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int r8156_ups_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = r8156_ups_flags(tp);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, USB_POWER_CUT,\n\t\t\t\t\tUPS_EN | USP_PREWAKE | PHASE2_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, USB_MISC_2,\n\t\t\t\t\tUPS_FORCE_PWR_DOWN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tswitch (tp->version) {\n\t\tcase RTL_VER_13:\n\t\tcase RTL_VER_15:\n\t\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_UPHY_XTAL,\n\t\t\t\t\t\tOOBS_POLLING);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\n\t\t\tif (r8156b_flash_used(tp))\n\t\t\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB,\n\t\t\t\t\t\t\tUSB_GPHY_CTRL,\n\t\t\t\t\t\t\tGPHY_PATCH_DONE);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t} else {\n\t\tu32 ocp_data;\n\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_USB, USB_POWER_CUT,\n\t\t\t\t\tUPS_EN | USP_PREWAKE);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_USB, USB_MISC_2,\n\t\t\t\t\tUPS_FORCE_PWR_DOWN | UPS_NO_UPS);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_read_word(tp, MCU_TYPE_USB, USB_MISC_0, &ocp_data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tif (ocp_data & PCUT_STATUS) {\n\t\t\ttp->rtl_ops.hw_phy_cfg(tp);\n\n\t\t\tret = rtl8152_set_speed(tp, tp->autoneg, tp->speed,\n\t\t\t\t\t\ttp->duplex, tp->advertising);\n\t\t} else {\n\t\t\tswitch (tp->version) {\n\t\t\tcase RTL_VER_13:\n\t\t\tcase RTL_VER_15:\n\t\t\t\tif (r8156b_flash_used(tp))\n\t\t\t\t\tret = ocp_word_set_bits(tp,\n\t\t\t\t\t\t\tMCU_TYPE_USB,\n\t\t\t\t\t\t\tUSB_GPHY_CTRL,\n\t\t\t\t\t\t\tGPHY_PATCH_DONE);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int r8153_power_cut_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable)\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, USB_POWER_CUT,\n\t\t\t\t\tPWR_EN | PHASE2_EN);\n\telse\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_POWER_CUT,\n\t\t\t\t\tPWR_EN | PHASE2_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_MISC_0, PCUT_STATUS);\n\nout:\n\treturn ret;\n}\n\nstatic int r8153b_power_cut_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable)\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, USB_POWER_CUT,\n\t\t\t\t\tPWR_EN | PHASE2_EN);\n\telse\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_POWER_CUT,\n\t\t\t\t\tPWR_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_MISC_0, PCUT_STATUS);\n\nout:\n\treturn ret;\n}\n\nstatic int r8157_power_cut_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, USB_POWER_CUT,\n\t\t\t\t\tPWR_EN | PHASE2_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, USB_MISC_2, BIT(1));\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t} else {\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_POWER_CUT,\n\t\t\t\t\tPWR_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_MISC_0,\n\t\t\t\t\tPCUT_STATUS);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_USB, USB_MISC_2, BIT(1));\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int r8153_queue_wake(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable)\n\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_PLA, PLA_INDICATE_FALG,\n\t\t\t\t\tUPCOMING_RUNTIME_D3);\n\telse\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_INDICATE_FALG,\n\t\t\t\t\tUPCOMING_RUNTIME_D3);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_SUSPEND_FLAG,\n\t\t\t\tLINK_CHG_EVENT);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_EXTRA_STATUS,\n\t\t\t\tLINK_CHANGE_FLAG);\n\nout:\n\treturn ret;\n}\n\nstatic bool rtl_can_wakeup(struct r8152 *tp)\n{\n\tstruct usb_device *udev = tp->udev;\n\n\treturn (udev->actconfig->desc.bmAttributes & USB_CONFIG_ATT_WAKEUP);\n}\n\nstatic int rtl_runtime_suspend_enable(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = __rtl_set_wol(tp, WAKE_ANY);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR,\n\t\t\t\t     CRWECR_CONFIG);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_CONFIG34,\n\t\t\t\t\tLINK_OFF_WAKE_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR,\n\t\t\t\t     CRWECR_NORAML);\n\t} else {\n\t\tret = __rtl_set_wol(tp, tp->saved_wolopts);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR,\n\t\t\t\t     CRWECR_CONFIG);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_CONFIG34,\n\t\t\t\t  LINK_OFF_WAKE_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR,\n\t\t\t\t     CRWECR_NORAML);\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8153_runtime_enable(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tif (tp->version == RTL_VER_06) {\n\t\t\tret = r8153_queue_wake(tp, true);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\t\t}\n\t\tret = r8153_u1u2en(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = r8153_u2p3en(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = rtl_runtime_suspend_enable(tp, true);\n\t} else {\n\t\tif (tp->version == RTL_VER_06) {\n\t\t\tret = r8153_queue_wake(tp, false);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\t\t}\n\t\tret = rtl_runtime_suspend_enable(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tswitch (tp->version) {\n\t\tcase RTL_VER_03:\n\t\tcase RTL_VER_04:\n\t\t\tbreak;\n\t\tcase RTL_VER_05:\n\t\tcase RTL_VER_06:\n\t\tdefault:\n\t\t\tret = r8153_u2p3en(tp, true);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\t\t\tbreak;\n\t\t}\n\n\t\tret = r8153_u1u2en(tp, true);\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8153b_runtime_enable(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = r8153_queue_wake(tp, true);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = r8153b_u1u2en(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = r8153_u2p3en(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = rtl_runtime_suspend_enable(tp, true);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = r8153b_ups_en(tp, true);\n\t} else {\n\t\tret = r8153b_ups_en(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = r8153_queue_wake(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = rtl_runtime_suspend_enable(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n//\t\tret = r8153_u2p3en(tp, true);\n//\t\tif (ret < 0)\n//\t\t\tgoto out;\n\n\t\tif (tp->udev->speed >= USB_SPEED_SUPER)\n\t\t\tret = r8153b_u1u2en(tp, true);\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8153c_runtime_enable(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = r8153_queue_wake(tp, true);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = r8153b_u1u2en(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = r8153_u2p3en(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = rtl_runtime_suspend_enable(tp, true);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = r8153c_ups_en(tp, true);\n\t} else {\n\t\tret = r8153c_ups_en(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = r8153_queue_wake(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = rtl_runtime_suspend_enable(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n//\t\tret = r8153_u2p3en(tp, true);\n//\t\tif (ret < 0)\n//\t\t\tgoto out;\n\n\t\tret = r8153b_u1u2en(tp, true);\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8156_runtime_enable(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = r8153_queue_wake(tp, true);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = r8153b_u1u2en(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = r8153_u2p3en(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = rtl_runtime_suspend_enable(tp, true);\n//\t\tif (tp->version != RTL_VER_10 ||\n//\t\t    tp->udev->speed == USB_SPEED_HIGH)\n//\t\t\tret = r8156_ups_en(tp, true);\n\t} else {\n//\t\tr8156_ups_en(tp, false);\n//\t\tif (ret < 0)\n//\t\t\tgoto out;\n\n\t\tret = r8153_queue_wake(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = rtl_runtime_suspend_enable(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = r8153_u2p3en(tp, true);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tif (tp->udev->speed >= USB_SPEED_SUPER)\n\t\t\tret = r8153b_u1u2en(tp, true);\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8157_runtime_enable(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tret = r8153_queue_wake(tp, enable);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153b_u1u2en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8157_u2p3en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_runtime_suspend_enable(tp, enable);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl_nway_restart(struct r8152 *tp)\n{\n\tint r;\n\n\t/* if autoneg is off, it's an error */\n\tr = r8152_mdio_read(tp, MII_BMCR);\n\tif (r < 0)\n\t\tgoto out;\n\n\tif (r & BMCR_ANENABLE)\n\t\tr = r8152_mdio_write(tp, MII_BMCR, r | BMCR_ANRESTART);\n\nout:\n\tif (r < 0)\n\t\treturn r;\n\telse\n\t\treturn 0;\n}\n\nstatic int r8153_teredo_off(struct r8152 *tp)\n{\n\tint ret;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_01:\n\tcase RTL_VER_02:\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\tcase RTL_VER_07:\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_TEREDO_CFG,\n\t\t\t\t\tTEREDO_SEL | TEREDO_RS_EVENT_MASK |\n\t\t\t\t\tOOB_TEREDO_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tbreak;\n\n\tcase RTL_VER_08:\n\tcase RTL_VER_09:\n\tcase RTL_TEST_01:\n\tcase RTL_VER_10:\n\tcase RTL_VER_11:\n\tcase RTL_VER_12:\n\tcase RTL_VER_13:\n\tcase RTL_VER_14:\n\tcase RTL_VER_15:\n\tcase RTL_VER_16:\n\tcase RTL_VER_17:\n\tdefault:\n\t\t/* The bit 0 ~ 7 are relative with teredo settings. They are\n\t\t * W1C (write 1 to clear), so set all 1 to disable it.\n\t\t */\n\t\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_TEREDO_CFG, 0xff);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tbreak;\n\t}\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_WDT6_CTRL, WDT6_SET_MODE);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_REALWOW_TIMER, 0);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_TEREDO_TIMER, 0);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl_reset_bmu(struct r8152 *tp)\n{\n\tint ret;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\tcase RTL_VER_08:\n\tcase RTL_VER_09:\n\tcase RTL_TEST_01:\n\tcase RTL_VER_10:\n\tcase RTL_VER_11:\n\tcase RTL_VER_12:\n\tcase RTL_VER_13:\n\tcase RTL_VER_14:\n\tcase RTL_VER_15:\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_USB, USB_BMU_RESET,\n\t\t\t\t\tBMU_RESET_EP_IN | BMU_RESET_EP_OUT);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, USB_BMU_RESET,\n\t\t\t\t\tBMU_RESET_EP_IN | BMU_RESET_EP_OUT);\n\t\tbreak;\n\tcase RTL_VER_17:\n\t\tret = rtl_bmu_set_bits(tp, 0x2350, BIT(1));\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = rtl_bmu_set_bits(tp, 0x2360, BIT(0));\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = rtl_bmu_set_bits(tp, 0x2350, BIT(0));\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = rtl_bmu_set_bits(tp, 0x2450, BIT(1));\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = rtl_bmu_set_bits(tp, 0x2460, BIT(0));\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = rtl_bmu_set_bits(tp, 0x2450, BIT(0));\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tbreak;\n\tdefault:\n\t\treturn -EINVAL;\n\t\tbreak;\n\t}\n\nout:\n\treturn ret;\n}\n\n/* Clear the bp to stop the firmware before loading a new one */\nstatic int rtl_clear_bp(struct r8152 *tp, u16 type)\n{\n\tu16 bp[16] = {0};\n\tu16 bp_num;\n\tint ret;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_08:\n\tcase RTL_VER_09:\n\tcase RTL_VER_10:\n\tcase RTL_VER_11:\n\tcase RTL_VER_12:\n\tcase RTL_VER_13:\n\tcase RTL_VER_15:\n\t\tif (type == MCU_TYPE_USB) {\n\t\t\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_BP2_EN, 0);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\t\t\tbp_num = 16;\n\t\t\tbreak;\n\t\t}\n\t\tfallthrough;\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\t\tret = ocp_write_byte(tp, type, PLA_BP_EN, 0);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tfallthrough;\n\tcase RTL_VER_01:\n\tcase RTL_VER_02:\n\tcase RTL_VER_07:\n\t\tbp_num = 8;\n\t\tbreak;\n\tcase RTL_VER_14:\n\tcase RTL_VER_16:\n\tcase RTL_VER_17:\n\tdefault:\n\t\tret = ocp_write_word(tp, type, USB_BP2_EN, 0);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tbp_num = 16;\n\t\tbreak;\n\t}\n\n\tret = generic_ocp_write(tp, PLA_BP_0, BYTE_EN_DWORD, bp_num << 1, bp,\n\t\t\t\ttype);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* wait 3 ms to make sure the firmware is stopped */\n\tusleep_range(3000, 6000);\n\tret = ocp_write_word(tp, type, PLA_BP_BA, 0);\n\nout:\n\treturn ret;\n}\n\nstatic bool rtl_check_fw_ver_ok(struct r8152 *tp, u16 index, u8 new_ver)\n{\n\tu32 ocp_data;\n\n\tif (!index || ocp_read_byte(tp, MCU_TYPE_USB, index, &ocp_data) < 0)\n\t\treturn true;\n\tif (new_ver > ocp_data)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\nstatic inline void rtl_reset_ocp_base(struct r8152 *tp)\n{\n\ttp->ocp_base = -1;\n}\n\nstatic int rtl_phy_patch_request(struct r8152 *tp, bool request, bool wait)\n{\n\tint i, ret;\n\tu16 check;\n\n\tif (request) {\n\t\tret = ocp_reg_set_bits(tp, OCP_PHY_PATCH_CMD, PATCH_REQUEST);\n\t\tcheck = 0;\n\t} else {\n\t\tret = ocp_reg_clr_bits(tp, OCP_PHY_PATCH_CMD, PATCH_REQUEST);\n\t\tcheck = PATCH_READY;\n\t}\n\n\tif (ret < 0)\n\t\tgoto out;\n\n\tfor (i = 0; wait && i < 5000; i++) {\n\t\tu16 data;\n\n\t\tusleep_range(1000, 2000);\n\t\tret = ocp_reg_read(tp, OCP_PHY_PATCH_STAT, &data);\n\t\tif (ret < 0 || (data & PATCH_READY) ^ check)\n\t\t\tbreak;\n\t}\n\n\tif (request && wait && i == 5000) {\n\t\tdev_err(&tp->intf->dev, \"PHY patch request fail\\n\");\n\t\tocp_reg_clr_bits(tp, OCP_PHY_PATCH_CMD, PATCH_REQUEST);\n\t\treturn -ETIME;\n\t}\n\nout:\n\treturn (ret < 0) ? ret : 0;\n}\n\nstatic void rtl_patch_key_set(struct r8152 *tp, u16 key_addr, u16 patch_key)\n{\n\tif (patch_key && key_addr) {\n\t\tsram_write(tp, key_addr, patch_key);\n\t\tsram_write(tp, SRAM_PHY_LOCK, PHY_PATCH_LOCK);\n\t} else if (key_addr) {\n\t\tsram_write(tp, 0x0000, 0x0000);\n\n\t\tocp_reg_clr_bits(tp, OCP_PHY_LOCK, PATCH_LOCK);\n\n\t\tsram_write(tp, key_addr, 0x0000);\n\t} else {\n\t\tWARN_ON_ONCE(1);\n\t}\n}\n\nstatic int\nrtl_pre_ram_code(struct r8152 *tp, u16 key_addr, u16 patch_key, bool wait)\n{\n\tif (rtl_phy_patch_request(tp, true, wait))\n\t\treturn -ETIME;\n\n\trtl_patch_key_set(tp, key_addr, patch_key);\n\n\treturn 0;\n}\n\nstatic int rtl_post_ram_code(struct r8152 *tp, u16 key_addr, bool wait)\n{\n\trtl_patch_key_set(tp, key_addr, 0);\n\n\trtl_phy_patch_request(tp, false, wait);\n\n\treturn 0;\n}\n\nstatic void patch4(struct r8152 *tp)\n{\n\tocp_word_set_bits(tp, MCU_TYPE_USB, USB_USB_TIMER, BIT(15));\n\tocp_write_word(tp, MCU_TYPE_USB, 0xc0ce, 0x0210);\n\tocp_word_clr_bits(tp, MCU_TYPE_USB, USB_USB_TIMER, BIT(15));\n}\n\nstatic void r8152b_firmware(struct r8152 *tp)\n{\n\tif (tp->version == RTL_VER_01) {\n\t\tint i;\n\t\tstatic u8 pla_patch_a[] = {\n\t\t\t0x08, 0xe0, 0x40, 0xe0,\n\t\t\t0x78, 0xe0, 0x85, 0xe0,\n\t\t\t0x5d, 0xe1, 0xa1, 0xe1,\n\t\t\t0xa3, 0xe1, 0xab, 0xe1,\n\t\t\t0x31, 0xc3, 0x60, 0x72,\n\t\t\t0xa0, 0x49, 0x10, 0xf0,\n\t\t\t0xa4, 0x49, 0x0e, 0xf0,\n\t\t\t0x2c, 0xc3, 0x62, 0x72,\n\t\t\t0x26, 0x70, 0x80, 0x49,\n\t\t\t0x05, 0xf0, 0x2f, 0x48,\n\t\t\t0x62, 0x9a, 0x24, 0x70,\n\t\t\t0x60, 0x98, 0x24, 0xc3,\n\t\t\t0x60, 0x99, 0x23, 0xc3,\n\t\t\t0x00, 0xbb, 0x2c, 0x75,\n\t\t\t0xdc, 0x21, 0xbc, 0x25,\n\t\t\t0x04, 0x13, 0x0a, 0xf0,\n\t\t\t0x03, 0x13, 0x08, 0xf0,\n\t\t\t0x02, 0x13, 0x06, 0xf0,\n\t\t\t0x01, 0x13, 0x04, 0xf0,\n\t\t\t0x08, 0x13, 0x02, 0xf0,\n\t\t\t0x03, 0xe0, 0xd4, 0x49,\n\t\t\t0x04, 0xf1, 0x14, 0xc2,\n\t\t\t0x12, 0xc3, 0x00, 0xbb,\n\t\t\t0x12, 0xc3, 0x60, 0x75,\n\t\t\t0xd0, 0x49, 0x05, 0xf1,\n\t\t\t0x50, 0x48, 0x60, 0x9d,\n\t\t\t0x09, 0xc6, 0x00, 0xbe,\n\t\t\t0xd0, 0x48, 0x60, 0x9d,\n\t\t\t0xf3, 0xe7, 0xc2, 0xc0,\n\t\t\t0x38, 0xd2, 0xc6, 0xd2,\n\t\t\t0x84, 0x17, 0xa2, 0x13,\n\t\t\t0x0c, 0x17, 0xbc, 0xc0,\n\t\t\t0xa2, 0xd1, 0x33, 0xc5,\n\t\t\t0xa0, 0x74, 0xc0, 0x49,\n\t\t\t0x1f, 0xf0, 0x30, 0xc5,\n\t\t\t0xa0, 0x73, 0x00, 0x13,\n\t\t\t0x04, 0xf1, 0xa2, 0x73,\n\t\t\t0x00, 0x13, 0x14, 0xf0,\n\t\t\t0x28, 0xc5, 0xa0, 0x74,\n\t\t\t0xc8, 0x49, 0x1b, 0xf1,\n\t\t\t0x26, 0xc5, 0xa0, 0x76,\n\t\t\t0xa2, 0x74, 0x01, 0x06,\n\t\t\t0x20, 0x37, 0xa0, 0x9e,\n\t\t\t0xa2, 0x9c, 0x1e, 0xc5,\n\t\t\t0xa2, 0x73, 0x23, 0x40,\n\t\t\t0x10, 0xf8, 0x04, 0xf3,\n\t\t\t0xa0, 0x73, 0x33, 0x40,\n\t\t\t0x0c, 0xf8, 0x15, 0xc5,\n\t\t\t0xa0, 0x74, 0x41, 0x48,\n\t\t\t0xa0, 0x9c, 0x14, 0xc5,\n\t\t\t0xa0, 0x76, 0x62, 0x48,\n\t\t\t0xe0, 0x48, 0xa0, 0x9e,\n\t\t\t0x10, 0xc6, 0x00, 0xbe,\n\t\t\t0x0a, 0xc5, 0xa0, 0x74,\n\t\t\t0x48, 0x48, 0xa0, 0x9c,\n\t\t\t0x0b, 0xc5, 0x20, 0x1e,\n\t\t\t0xa0, 0x9e, 0xe5, 0x48,\n\t\t\t0xa0, 0x9e, 0xf0, 0xe7,\n\t\t\t0xbc, 0xc0, 0xc8, 0xd2,\n\t\t\t0xcc, 0xd2, 0x28, 0xe4,\n\t\t\t0x22, 0x02, 0xf0, 0xc0,\n\t\t\t0x0b, 0xc0, 0x00, 0x71,\n\t\t\t0x0a, 0xc0, 0x00, 0x72,\n\t\t\t0xa0, 0x49, 0x04, 0xf0,\n\t\t\t0xa4, 0x49, 0x02, 0xf0,\n\t\t\t0x93, 0x48, 0x04, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0xe4,\n\t\t\t0xc2, 0xc0, 0x8c, 0x09,\n\t\t\t0x14, 0xc2, 0x40, 0x73,\n\t\t\t0xba, 0x48, 0x40, 0x9b,\n\t\t\t0x11, 0xc2, 0x40, 0x73,\n\t\t\t0xb0, 0x49, 0x17, 0xf0,\n\t\t\t0xbf, 0x49, 0x03, 0xf1,\n\t\t\t0x09, 0xc5, 0x00, 0xbd,\n\t\t\t0xb1, 0x49, 0x11, 0xf0,\n\t\t\t0xb1, 0x48, 0x40, 0x9b,\n\t\t\t0x02, 0xc2, 0x00, 0xba,\n\t\t\t0x82, 0x18, 0x00, 0xa0,\n\t\t\t0x1e, 0xfc, 0xbc, 0xc0,\n\t\t\t0xf0, 0xc0, 0xde, 0xe8,\n\t\t\t0x00, 0x80, 0x00, 0x60,\n\t\t\t0x2c, 0x75, 0xd4, 0x49,\n\t\t\t0x12, 0xf1, 0x29, 0xe0,\n\t\t\t0xf8, 0xc2, 0x46, 0x71,\n\t\t\t0xf7, 0xc2, 0x40, 0x73,\n\t\t\t0xbe, 0x49, 0x03, 0xf1,\n\t\t\t0xf5, 0xc7, 0x02, 0xe0,\n\t\t\t0xf2, 0xc7, 0x4f, 0x30,\n\t\t\t0x26, 0x62, 0xa1, 0x49,\n\t\t\t0xf0, 0xf1, 0x22, 0x72,\n\t\t\t0xa0, 0x49, 0xed, 0xf1,\n\t\t\t0x25, 0x25, 0x18, 0x1f,\n\t\t\t0x97, 0x30, 0x91, 0x30,\n\t\t\t0x36, 0x9a, 0x2c, 0x75,\n\t\t\t0x32, 0xc3, 0x60, 0x73,\n\t\t\t0xb1, 0x49, 0x0d, 0xf1,\n\t\t\t0xdc, 0x21, 0xbc, 0x25,\n\t\t\t0x27, 0xc6, 0xc0, 0x77,\n\t\t\t0x04, 0x13, 0x18, 0xf0,\n\t\t\t0x03, 0x13, 0x19, 0xf0,\n\t\t\t0x02, 0x13, 0x1a, 0xf0,\n\t\t\t0x01, 0x13, 0x1b, 0xf0,\n\t\t\t0xd4, 0x49, 0x03, 0xf1,\n\t\t\t0x1c, 0xc5, 0x00, 0xbd,\n\t\t\t0xcd, 0xc6, 0xc6, 0x67,\n\t\t\t0x2e, 0x75, 0xd7, 0x22,\n\t\t\t0xdd, 0x26, 0x05, 0x15,\n\t\t\t0x1a, 0xf0, 0x14, 0xc6,\n\t\t\t0x00, 0xbe, 0x13, 0xc5,\n\t\t\t0x00, 0xbd, 0x12, 0xc5,\n\t\t\t0x00, 0xbd, 0xf1, 0x49,\n\t\t\t0xfb, 0xf1, 0xef, 0xe7,\n\t\t\t0xf4, 0x49, 0xfa, 0xf1,\n\t\t\t0xec, 0xe7, 0xf3, 0x49,\n\t\t\t0xf7, 0xf1, 0xe9, 0xe7,\n\t\t\t0xf2, 0x49, 0xf4, 0xf1,\n\t\t\t0xe6, 0xe7, 0xb6, 0xc0,\n\t\t\t0x6a, 0x14, 0xac, 0x13,\n\t\t\t0xd6, 0x13, 0xfa, 0x14,\n\t\t\t0xa0, 0xd1, 0x00, 0x00,\n\t\t\t0xc0, 0x75, 0xd0, 0x49,\n\t\t\t0x46, 0xf0, 0x26, 0x72,\n\t\t\t0xa7, 0x49, 0x43, 0xf0,\n\t\t\t0x22, 0x72, 0x25, 0x25,\n\t\t\t0x20, 0x1f, 0x97, 0x30,\n\t\t\t0x91, 0x30, 0x40, 0x73,\n\t\t\t0xf3, 0xc4, 0x1c, 0x40,\n\t\t\t0x04, 0xf0, 0xd7, 0x49,\n\t\t\t0x05, 0xf1, 0x37, 0xe0,\n\t\t\t0x53, 0x48, 0xc0, 0x9d,\n\t\t\t0x08, 0x02, 0x40, 0x66,\n\t\t\t0x64, 0x27, 0x06, 0x16,\n\t\t\t0x30, 0xf1, 0x46, 0x63,\n\t\t\t0x3b, 0x13, 0x2d, 0xf1,\n\t\t\t0x34, 0x9b, 0x18, 0x1b,\n\t\t\t0x93, 0x30, 0x2b, 0xc3,\n\t\t\t0x10, 0x1c, 0x2b, 0xe8,\n\t\t\t0x01, 0x14, 0x25, 0xf1,\n\t\t\t0x00, 0x1d, 0x26, 0x1a,\n\t\t\t0x8a, 0x30, 0x22, 0x73,\n\t\t\t0xb5, 0x25, 0x0e, 0x0b,\n\t\t\t0x00, 0x1c, 0x2c, 0xe8,\n\t\t\t0x1f, 0xc7, 0x27, 0x40,\n\t\t\t0x1a, 0xf1, 0x38, 0xe8,\n\t\t\t0x32, 0x1f, 0x8f, 0x30,\n\t\t\t0x08, 0x1b, 0x24, 0xe8,\n\t\t\t0x36, 0x72, 0x46, 0x77,\n\t\t\t0x00, 0x17, 0x0d, 0xf0,\n\t\t\t0x13, 0xc3, 0x1f, 0x40,\n\t\t\t0x03, 0xf1, 0x00, 0x1f,\n\t\t\t0x46, 0x9f, 0x44, 0x77,\n\t\t\t0x9f, 0x44, 0x5f, 0x44,\n\t\t\t0x17, 0xe8, 0x0a, 0xc7,\n\t\t\t0x27, 0x40, 0x05, 0xf1,\n\t\t\t0x02, 0xc3, 0x00, 0xbb,\n\t\t\t0x50, 0x1a, 0x06, 0x1a,\n\t\t\t0xff, 0xc7, 0x00, 0xbf,\n\t\t\t0xb8, 0xcd, 0xff, 0xff,\n\t\t\t0x02, 0x0c, 0x54, 0xa5,\n\t\t\t0xdc, 0xa5, 0x2f, 0x40,\n\t\t\t0x05, 0xf1, 0x00, 0x14,\n\t\t\t0xfa, 0xf1, 0x01, 0x1c,\n\t\t\t0x02, 0xe0, 0x00, 0x1c,\n\t\t\t0x80, 0xff, 0xb0, 0x49,\n\t\t\t0x04, 0xf0, 0x01, 0x0b,\n\t\t\t0xd3, 0xa1, 0x03, 0xe0,\n\t\t\t0x02, 0x0b, 0xd3, 0xa5,\n\t\t\t0x27, 0x31, 0x20, 0x37,\n\t\t\t0x02, 0x0b, 0xd3, 0xa5,\n\t\t\t0x27, 0x31, 0x20, 0x37,\n\t\t\t0x00, 0x13, 0xfb, 0xf1,\n\t\t\t0x80, 0xff, 0x22, 0x73,\n\t\t\t0xb5, 0x25, 0x18, 0x1e,\n\t\t\t0xde, 0x30, 0xd9, 0x30,\n\t\t\t0x64, 0x72, 0x11, 0x1e,\n\t\t\t0x68, 0x23, 0x16, 0x31,\n\t\t\t0x80, 0xff, 0xd4, 0x49,\n\t\t\t0x28, 0xf0, 0x02, 0xb4,\n\t\t\t0x2a, 0xc4, 0x00, 0x1d,\n\t\t\t0x2e, 0xe8, 0xe0, 0x73,\n\t\t\t0xb9, 0x21, 0xbd, 0x25,\n\t\t\t0x04, 0x13, 0x02, 0xf0,\n\t\t\t0x1a, 0xe0, 0x22, 0xc4,\n\t\t\t0x23, 0xc3, 0x2f, 0xe8,\n\t\t\t0x23, 0xc3, 0x2d, 0xe8,\n\t\t\t0x00, 0x1d, 0x21, 0xe8,\n\t\t\t0xe2, 0x73, 0xbb, 0x49,\n\t\t\t0xfc, 0xf0, 0xe0, 0x73,\n\t\t\t0xb7, 0x48, 0x03, 0xb4,\n\t\t\t0x81, 0x1d, 0x19, 0xe8,\n\t\t\t0x40, 0x1a, 0x84, 0x1d,\n\t\t\t0x16, 0xe8, 0x12, 0xc3,\n\t\t\t0x1e, 0xe8, 0x03, 0xb0,\n\t\t\t0x81, 0x1d, 0x11, 0xe8,\n\t\t\t0x0e, 0xc3, 0x19, 0xe8,\n\t\t\t0x02, 0xb0, 0x06, 0xc7,\n\t\t\t0x04, 0x1e, 0xe0, 0x9e,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x22, 0x02, 0x20, 0xe4,\n\t\t\t0x04, 0xb8, 0x34, 0xb0,\n\t\t\t0x00, 0x02, 0x00, 0x03,\n\t\t\t0x00, 0x0e, 0x00, 0x0c,\n\t\t\t0x09, 0xc7, 0xe0, 0x9b,\n\t\t\t0xe2, 0x9a, 0xe4, 0x9c,\n\t\t\t0xe6, 0x8d, 0xe6, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0x80, 0xff, 0x08, 0xea,\n\t\t\t0x82, 0x1d, 0xf5, 0xef,\n\t\t\t0x00, 0x1a, 0x88, 0x1d,\n\t\t\t0xf2, 0xef, 0xed, 0xc2,\n\t\t\t0xf0, 0xef, 0x80, 0xff,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x46, 0x06, 0x08, 0xc2,\n\t\t\t0x40, 0x73, 0x3a, 0x48,\n\t\t\t0x40, 0x9b, 0x06, 0xff,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x86, 0x17, 0x1e, 0xfc,\n\t\t\t0x36, 0xf0, 0x08, 0x1c,\n\t\t\t0xea, 0x8c, 0xe3, 0x64,\n\t\t\t0xc7, 0x49, 0x25, 0xf1,\n\t\t\t0xe0, 0x75, 0xff, 0x1b,\n\t\t\t0xeb, 0x47, 0xff, 0x1b,\n\t\t\t0x6b, 0x47, 0xe0, 0x9d,\n\t\t\t0x15, 0xc3, 0x60, 0x75,\n\t\t\t0xd8, 0x49, 0x04, 0xf0,\n\t\t\t0x81, 0x1d, 0xe2, 0x8d,\n\t\t\t0x05, 0xe0, 0xe2, 0x63,\n\t\t\t0x81, 0x1d, 0xdd, 0x47,\n\t\t\t0xe2, 0x8b, 0x0b, 0xc3,\n\t\t\t0x00, 0x1d, 0x61, 0x8d,\n\t\t\t0x3c, 0x03, 0x60, 0x75,\n\t\t\t0xd8, 0x49, 0x06, 0xf1,\n\t\t\t0xdf, 0x48, 0x61, 0x95,\n\t\t\t0x16, 0xe0, 0x4e, 0xe8,\n\t\t\t0x12, 0xe8, 0x21, 0xc5,\n\t\t\t0xa0, 0x73, 0xb0, 0x49,\n\t\t\t0x03, 0xf0, 0x31, 0x48,\n\t\t\t0xa0, 0x9b, 0x0d, 0xe0,\n\t\t\t0xc0, 0x49, 0x0b, 0xf1,\n\t\t\t0xe2, 0x63, 0x7e, 0x1d,\n\t\t\t0xdd, 0x46, 0xe2, 0x8b,\n\t\t\t0xe0, 0x75, 0x83, 0x1b,\n\t\t\t0xeb, 0x46, 0xfe, 0x1b,\n\t\t\t0x6b, 0x46, 0xe0, 0x9d,\n\t\t\t0xe4, 0x49, 0x11, 0xf0,\n\t\t\t0x10, 0x1d, 0xea, 0x8d,\n\t\t\t0xe3, 0x64, 0xc6, 0x49,\n\t\t\t0x09, 0xf1, 0x07, 0xc5,\n\t\t\t0xa0, 0x73, 0xb1, 0x48,\n\t\t\t0xa0, 0x9b, 0x02, 0xc5,\n\t\t\t0x00, 0xbd, 0xe6, 0x04,\n\t\t\t0xa0, 0xd1, 0x02, 0xc5,\n\t\t\t0x00, 0xbd, 0xfe, 0x04,\n\t\t\t0x02, 0xc5, 0x00, 0xbd,\n\t\t\t0x30, 0x05, 0x00, 0x00 };\n\t\tstatic u16 ram_code1[] = {\n\t\t\t0x9700, 0x7fe0, 0x4c00, 0x4007,\n\t\t\t0x4400, 0x4800, 0x7c1f, 0x4c00,\n\t\t\t0x5310, 0x6000, 0x7c07, 0x6800,\n\t\t\t0x673e, 0x0000, 0x0000, 0x571f,\n\t\t\t0x5ffb, 0xaa05, 0x5b58, 0x7d80,\n\t\t\t0x6100, 0x3019, 0x5b64, 0x7d80,\n\t\t\t0x6080, 0xa6f8, 0xdcdb, 0x0015,\n\t\t\t0xb915, 0xb511, 0xd16b, 0x000f,\n\t\t\t0xb40f, 0xd06b, 0x000d, 0xb206,\n\t\t\t0x7c01, 0x5800, 0x7c04, 0x5c00,\n\t\t\t0x3011, 0x7c01, 0x5801, 0x7c04,\n\t\t\t0x5c04, 0x3019, 0x30a5, 0x3127,\n\t\t\t0x31d5, 0x7fe0, 0x4c60, 0x7c07,\n\t\t\t0x6803, 0x7d00, 0x6900, 0x65a0,\n\t\t\t0x0000, 0x0000, 0xaf03, 0x6015,\n\t\t\t0x303e, 0x6017, 0x57e0, 0x580c,\n\t\t\t0x588c, 0x7fdd, 0x5fa2, 0x4827,\n\t\t\t0x7c1f, 0x4c00, 0x7c1f, 0x4c10,\n\t\t\t0x8400, 0x7c30, 0x6020, 0x48bf,\n\t\t\t0x7c1f, 0x4c00, 0x7c1f, 0x4c01,\n\t\t\t0x7c07, 0x6803, 0xb806, 0x7c08,\n\t\t\t0x6800, 0x0000, 0x0000, 0x305c,\n\t\t\t0x7c08, 0x6808, 0x0000, 0x0000,\n\t\t\t0xae06, 0x7c02, 0x5c02, 0x0000,\n\t\t\t0x0000, 0x3067, 0x8e05, 0x7c02,\n\t\t\t0x5c00, 0x0000, 0x0000, 0xad06,\n\t\t\t0x7c20, 0x5c20, 0x0000, 0x0000,\n\t\t\t0x3072, 0x8d05, 0x7c20, 0x5c00,\n\t\t\t0x0000, 0x0000, 0xa008, 0x7c07,\n\t\t\t0x6800, 0xb8db, 0x7c07, 0x6803,\n\t\t\t0xd9b3, 0x00d7, 0x7fe0, 0x4c80,\n\t\t\t0x7c08, 0x6800, 0x0000, 0x0000,\n\t\t\t0x7c23, 0x5c23, 0x481d, 0x7c1f,\n\t\t\t0x4c00, 0x7c1f, 0x4c02, 0x5310,\n\t\t\t0x81ff, 0x30f5, 0x7fe0, 0x4d00,\n\t\t\t0x4832, 0x7c1f, 0x4c00, 0x7c1f,\n\t\t\t0x4c10, 0x7c08, 0x6000, 0xa49e,\n\t\t\t0x7c07, 0x6800, 0xb89b, 0x7c07,\n\t\t\t0x6803, 0xd9b3, 0x00f9, 0x7fe0,\n\t\t\t0x4d20, 0x7e00, 0x6200, 0x3001,\n\t\t\t0x7fe0, 0x4dc0, 0xd09d, 0x0002,\n\t\t\t0xb4fe, 0x7fe0, 0x4d80, 0x7c04,\n\t\t\t0x6004, 0x7c07, 0x6802, 0x6728,\n\t\t\t0x0000, 0x0000, 0x7c08, 0x6000,\n\t\t\t0x486c, 0x7c1f, 0x4c00, 0x7c1f,\n\t\t\t0x4c01, 0x9503, 0x7e00, 0x6200,\n\t\t\t0x571f, 0x5fbb, 0xaa05, 0x5b58,\n\t\t\t0x7d80, 0x6100, 0x30c2, 0x5b64,\n\t\t\t0x7d80, 0x6080, 0xcdab, 0x0063,\n\t\t\t0xcd8d, 0x0061, 0xd96b, 0x005f,\n\t\t\t0xd0a0, 0x00d7, 0xcba0, 0x0003,\n\t\t\t0x80ec, 0x30cf, 0x30dc, 0x7fe0,\n\t\t\t0x4ce0, 0x4832, 0x7c1f, 0x4c00,\n\t\t\t0x7c1f, 0x4c08, 0x7c08, 0x6008,\n\t\t\t0x8300, 0xb902, 0x30a5, 0x308a,\n\t\t\t0x7fe0, 0x4da0, 0x65a8, 0x0000,\n\t\t\t0x0000, 0x56a0, 0x590c, 0x7ffd,\n\t\t\t0x5fa2, 0xae06, 0x7c02, 0x5c02,\n\t\t\t0x0000, 0x0000, 0x30f0, 0x8e05,\n\t\t\t0x7c02, 0x5c00, 0x0000, 0x0000,\n\t\t\t0xcba4, 0x0004, 0xcd8d, 0x0002,\n\t\t\t0x80f1, 0x7fe0, 0x4ca0, 0x7c08,\n\t\t\t0x6408, 0x0000, 0x0000, 0x7d00,\n\t\t\t0x6800, 0xb603, 0x7c10, 0x6010,\n\t\t\t0x7d1f, 0x551f, 0x5fb3, 0xaa07,\n\t\t\t0x7c80, 0x5800, 0x5b58, 0x7d80,\n\t\t\t0x6100, 0x310f, 0x7c80, 0x5800,\n\t\t\t0x5b64, 0x7d80, 0x6080, 0x4827,\n\t\t\t0x7c1f, 0x4c00, 0x7c1f, 0x4c10,\n\t\t\t0x8400, 0x7c10, 0x6000, 0x7fe0,\n\t\t\t0x4cc0, 0x5fbb, 0x4824, 0x7c1f,\n\t\t\t0x4c00, 0x7c1f, 0x4c04, 0x8200,\n\t\t\t0x7ce0, 0x5400, 0x6728, 0x0000,\n\t\t\t0x0000, 0x30cf, 0x3001, 0x7fe0,\n\t\t\t0x4e00, 0x4007, 0x4400, 0x5310,\n\t\t\t0x7c07, 0x6800, 0x673e, 0x0000,\n\t\t\t0x0000, 0x570f, 0x5fff, 0xaa05,\n\t\t\t0x585b, 0x7d80, 0x6100, 0x313b,\n\t\t\t0x5867, 0x7d80, 0x6080, 0x9403,\n\t\t\t0x7e00, 0x6200, 0xcda3, 0x00e7,\n\t\t\t0xcd85, 0x00e5, 0xd96b, 0x00e3,\n\t\t\t0x96e3, 0x7c07, 0x6800, 0x673e,\n\t\t\t0x0000, 0x0000, 0x7fe0, 0x4e20,\n\t\t\t0x96db, 0x8b04, 0x7c08, 0x5008,\n\t\t\t0xab03, 0x7c08, 0x5000, 0x7c07,\n\t\t\t0x6801, 0x677e, 0x0000, 0x0000,\n\t\t\t0xdb7c, 0x00ec, 0x0000, 0x7fe1,\n\t\t\t0x4f40, 0x4837, 0x4418, 0x41c7,\n\t\t\t0x7fe0, 0x4e40, 0x7c40, 0x5400,\n\t\t\t0x7c1f, 0x4c01, 0x7c1f, 0x4c01,\n\t\t\t0x8fbf, 0xd2a0, 0x004b, 0x9204,\n\t\t\t0xa042, 0x3168, 0x3127, 0x7fe1,\n\t\t\t0x4f60, 0x489c, 0x4628, 0x7fe0,\n\t\t\t0x4e60, 0x7e28, 0x4628, 0x7c40,\n\t\t\t0x5400, 0x7c01, 0x5800, 0x7c04,\n\t\t\t0x5c00, 0x41e8, 0x7c1f, 0x4c01,\n\t\t\t0x7c1f, 0x4c01, 0x8fa5, 0xb241,\n\t\t\t0xa02a, 0x3182, 0x7fe0, 0x4ea0,\n\t\t\t0x7c02, 0x4402, 0x4448, 0x4894,\n\t\t\t0x7c1f, 0x4c01, 0x7c1f, 0x4c03,\n\t\t\t0x4824, 0x7c1f, 0x4c07, 0x41ef,\n\t\t\t0x41ff, 0x4891, 0x7c1f, 0x4c07,\n\t\t\t0x7c1f, 0x4c17, 0x8400, 0x8ef8,\n\t\t\t0x41c7, 0x8f8a, 0x92d5, 0xa10f,\n\t\t\t0xd480, 0x0008, 0xd580, 0x00b8,\n\t\t\t0xa202, 0x319d, 0x7c04, 0x4404,\n\t\t\t0x319d, 0xd484, 0x00f3, 0xd484,\n\t\t\t0x00f1, 0x3127, 0x7fe0, 0x4ee0,\n\t\t\t0x7c40, 0x5400, 0x4488, 0x41cf,\n\t\t\t0x3127, 0x7fe0, 0x4ec0, 0x48f3,\n\t\t\t0x7c1f, 0x4c01, 0x7c1f, 0x4c09,\n\t\t\t0x4508, 0x41c7, 0x8fb0, 0xd218,\n\t\t\t0x00ae, 0xd2a4, 0x009e, 0x31be,\n\t\t\t0x7fe0, 0x4e80, 0x4832, 0x7c1f,\n\t\t\t0x4c01, 0x7c1f, 0x4c11, 0x4428,\n\t\t\t0x7c40, 0x5440, 0x7c01, 0x5801,\n\t\t\t0x7c04, 0x5c04, 0x41e8, 0xa4b3,\n\t\t\t0x31d3, 0x7fe0, 0x4f20, 0x7c07,\n\t\t\t0x6800, 0x673e, 0x0000, 0x0000,\n\t\t\t0x570f, 0x5fff, 0xaa04, 0x585b,\n\t\t\t0x6100, 0x31e4, 0x5867, 0x6080,\n\t\t\t0xbcf1, 0x3001 };\n\n\t\tpatch4(tp);\n\t\trtl_clear_bp(tp, MCU_TYPE_PLA);\n\n\t\tgeneric_ocp_write(tp, 0xf800, 0x3f, sizeof(pla_patch_a),\n\t\t\t\t  pla_patch_a, MCU_TYPE_PLA);\n\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc26, 0x8000);\n\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc28, 0x170b);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2a, 0x01e1);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2c, 0x0989);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2e, 0x1349);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc30, 0x01b7);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc32, 0x061d);\n\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xe422, 0x0020);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xe420, 0x0018);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc34, 0x1785);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc36, 0x047b);\n\n\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_OCP_GPHY_BASE, 0x2000);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb092, 0x7070);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb098, 0x0600);\n\t\tfor (i = 0; i < ARRAY_SIZE(ram_code1); i++)\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb09a, ram_code1[i]);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb098, 0x0200);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb092, 0x7030);\n\n\t\trtl_reset_ocp_base(tp);\n\t} else if (tp->version == RTL_VER_02) {\n\t\tstatic u8 pla_patch_a2[] = {\n\t\t\t0x08, 0xe0, 0x1a, 0xe0,\n\t\t\t0xf2, 0xe0, 0xfa, 0xe0,\n\t\t\t0x32, 0xe1, 0x34, 0xe1,\n\t\t\t0x36, 0xe1, 0x38, 0xe1,\n\t\t\t0x2c, 0x75, 0xdc, 0x21,\n\t\t\t0xbc, 0x25, 0x04, 0x13,\n\t\t\t0x0b, 0xf0, 0x03, 0x13,\n\t\t\t0x09, 0xf0, 0x02, 0x13,\n\t\t\t0x07, 0xf0, 0x01, 0x13,\n\t\t\t0x05, 0xf0, 0x08, 0x13,\n\t\t\t0x03, 0xf0, 0x04, 0xc3,\n\t\t\t0x00, 0xbb, 0x03, 0xc3,\n\t\t\t0x00, 0xbb, 0xd2, 0x17,\n\t\t\t0xbc, 0x17, 0x14, 0xc2,\n\t\t\t0x40, 0x73, 0xba, 0x48,\n\t\t\t0x40, 0x9b, 0x11, 0xc2,\n\t\t\t0x40, 0x73, 0xb0, 0x49,\n\t\t\t0x17, 0xf0, 0xbf, 0x49,\n\t\t\t0x03, 0xf1, 0x09, 0xc5,\n\t\t\t0x00, 0xbd, 0xb1, 0x49,\n\t\t\t0x11, 0xf0, 0xb1, 0x48,\n\t\t\t0x40, 0x9b, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0x4e, 0x19,\n\t\t\t0x00, 0xa0, 0x1e, 0xfc,\n\t\t\t0xbc, 0xc0, 0xf0, 0xc0,\n\t\t\t0xde, 0xe8, 0x00, 0x80,\n\t\t\t0x00, 0x60, 0x2c, 0x75,\n\t\t\t0xd4, 0x49, 0x12, 0xf1,\n\t\t\t0x29, 0xe0, 0xf8, 0xc2,\n\t\t\t0x46, 0x71, 0xf7, 0xc2,\n\t\t\t0x40, 0x73, 0xbe, 0x49,\n\t\t\t0x03, 0xf1, 0xf5, 0xc7,\n\t\t\t0x02, 0xe0, 0xf2, 0xc7,\n\t\t\t0x4f, 0x30, 0x26, 0x62,\n\t\t\t0xa1, 0x49, 0xf0, 0xf1,\n\t\t\t0x22, 0x72, 0xa0, 0x49,\n\t\t\t0xed, 0xf1, 0x25, 0x25,\n\t\t\t0x18, 0x1f, 0x97, 0x30,\n\t\t\t0x91, 0x30, 0x36, 0x9a,\n\t\t\t0x2c, 0x75, 0x32, 0xc3,\n\t\t\t0x60, 0x73, 0xb1, 0x49,\n\t\t\t0x0d, 0xf1, 0xdc, 0x21,\n\t\t\t0xbc, 0x25, 0x27, 0xc6,\n\t\t\t0xc0, 0x77, 0x04, 0x13,\n\t\t\t0x18, 0xf0, 0x03, 0x13,\n\t\t\t0x19, 0xf0, 0x02, 0x13,\n\t\t\t0x1a, 0xf0, 0x01, 0x13,\n\t\t\t0x1b, 0xf0, 0xd4, 0x49,\n\t\t\t0x03, 0xf1, 0x1c, 0xc5,\n\t\t\t0x00, 0xbd, 0xcd, 0xc6,\n\t\t\t0xc6, 0x67, 0x2e, 0x75,\n\t\t\t0xd7, 0x22, 0xdd, 0x26,\n\t\t\t0x05, 0x15, 0x1a, 0xf0,\n\t\t\t0x14, 0xc6, 0x00, 0xbe,\n\t\t\t0x13, 0xc5, 0x00, 0xbd,\n\t\t\t0x12, 0xc5, 0x00, 0xbd,\n\t\t\t0xf1, 0x49, 0xfb, 0xf1,\n\t\t\t0xef, 0xe7, 0xf4, 0x49,\n\t\t\t0xfa, 0xf1, 0xec, 0xe7,\n\t\t\t0xf3, 0x49, 0xf7, 0xf1,\n\t\t\t0xe9, 0xe7, 0xf2, 0x49,\n\t\t\t0xf4, 0xf1, 0xe6, 0xe7,\n\t\t\t0xb6, 0xc0, 0xf6, 0x14,\n\t\t\t0x36, 0x14, 0x62, 0x14,\n\t\t\t0x86, 0x15, 0xa0, 0xd1,\n\t\t\t0x00, 0x00, 0xc0, 0x75,\n\t\t\t0xd0, 0x49, 0x46, 0xf0,\n\t\t\t0x26, 0x72, 0xa7, 0x49,\n\t\t\t0x43, 0xf0, 0x22, 0x72,\n\t\t\t0x25, 0x25, 0x20, 0x1f,\n\t\t\t0x97, 0x30, 0x91, 0x30,\n\t\t\t0x40, 0x73, 0xf3, 0xc4,\n\t\t\t0x1c, 0x40, 0x04, 0xf0,\n\t\t\t0xd7, 0x49, 0x05, 0xf1,\n\t\t\t0x37, 0xe0, 0x53, 0x48,\n\t\t\t0xc0, 0x9d, 0x08, 0x02,\n\t\t\t0x40, 0x66, 0x64, 0x27,\n\t\t\t0x06, 0x16, 0x30, 0xf1,\n\t\t\t0x46, 0x63, 0x3b, 0x13,\n\t\t\t0x2d, 0xf1, 0x34, 0x9b,\n\t\t\t0x18, 0x1b, 0x93, 0x30,\n\t\t\t0x2b, 0xc3, 0x10, 0x1c,\n\t\t\t0x2b, 0xe8, 0x01, 0x14,\n\t\t\t0x25, 0xf1, 0x00, 0x1d,\n\t\t\t0x26, 0x1a, 0x8a, 0x30,\n\t\t\t0x22, 0x73, 0xb5, 0x25,\n\t\t\t0x0e, 0x0b, 0x00, 0x1c,\n\t\t\t0x2c, 0xe8, 0x1f, 0xc7,\n\t\t\t0x27, 0x40, 0x1a, 0xf1,\n\t\t\t0x38, 0xe8, 0x32, 0x1f,\n\t\t\t0x8f, 0x30, 0x08, 0x1b,\n\t\t\t0x24, 0xe8, 0x36, 0x72,\n\t\t\t0x46, 0x77, 0x00, 0x17,\n\t\t\t0x0d, 0xf0, 0x13, 0xc3,\n\t\t\t0x1f, 0x40, 0x03, 0xf1,\n\t\t\t0x00, 0x1f, 0x46, 0x9f,\n\t\t\t0x44, 0x77, 0x9f, 0x44,\n\t\t\t0x5f, 0x44, 0x17, 0xe8,\n\t\t\t0x0a, 0xc7, 0x27, 0x40,\n\t\t\t0x05, 0xf1, 0x02, 0xc3,\n\t\t\t0x00, 0xbb, 0x1c, 0x1b,\n\t\t\t0xd2, 0x1a, 0xff, 0xc7,\n\t\t\t0x00, 0xbf, 0xb8, 0xcd,\n\t\t\t0xff, 0xff, 0x02, 0x0c,\n\t\t\t0x54, 0xa5, 0xdc, 0xa5,\n\t\t\t0x2f, 0x40, 0x05, 0xf1,\n\t\t\t0x00, 0x14, 0xfa, 0xf1,\n\t\t\t0x01, 0x1c, 0x02, 0xe0,\n\t\t\t0x00, 0x1c, 0x80, 0xff,\n\t\t\t0xb0, 0x49, 0x04, 0xf0,\n\t\t\t0x01, 0x0b, 0xd3, 0xa1,\n\t\t\t0x03, 0xe0, 0x02, 0x0b,\n\t\t\t0xd3, 0xa5, 0x27, 0x31,\n\t\t\t0x20, 0x37, 0x02, 0x0b,\n\t\t\t0xd3, 0xa5, 0x27, 0x31,\n\t\t\t0x20, 0x37, 0x00, 0x13,\n\t\t\t0xfb, 0xf1, 0x80, 0xff,\n\t\t\t0x22, 0x73, 0xb5, 0x25,\n\t\t\t0x18, 0x1e, 0xde, 0x30,\n\t\t\t0xd9, 0x30, 0x64, 0x72,\n\t\t\t0x11, 0x1e, 0x68, 0x23,\n\t\t\t0x16, 0x31, 0x80, 0xff,\n\t\t\t0x08, 0xc2, 0x40, 0x73,\n\t\t\t0x3a, 0x48, 0x40, 0x9b,\n\t\t\t0x06, 0xff, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x4e, 0x18,\n\t\t\t0x1e, 0xfc, 0x33, 0xc5,\n\t\t\t0xa0, 0x74, 0xc0, 0x49,\n\t\t\t0x1f, 0xf0, 0x30, 0xc5,\n\t\t\t0xa0, 0x73, 0x00, 0x13,\n\t\t\t0x04, 0xf1, 0xa2, 0x73,\n\t\t\t0x00, 0x13, 0x14, 0xf0,\n\t\t\t0x28, 0xc5, 0xa0, 0x74,\n\t\t\t0xc8, 0x49, 0x1b, 0xf1,\n\t\t\t0x26, 0xc5, 0xa0, 0x76,\n\t\t\t0xa2, 0x74, 0x01, 0x06,\n\t\t\t0x20, 0x37, 0xa0, 0x9e,\n\t\t\t0xa2, 0x9c, 0x1e, 0xc5,\n\t\t\t0xa2, 0x73, 0x23, 0x40,\n\t\t\t0x10, 0xf8, 0x04, 0xf3,\n\t\t\t0xa0, 0x73, 0x33, 0x40,\n\t\t\t0x0c, 0xf8, 0x15, 0xc5,\n\t\t\t0xa0, 0x74, 0x41, 0x48,\n\t\t\t0xa0, 0x9c, 0x14, 0xc5,\n\t\t\t0xa0, 0x76, 0x62, 0x48,\n\t\t\t0xe0, 0x48, 0xa0, 0x9e,\n\t\t\t0x10, 0xc6, 0x00, 0xbe,\n\t\t\t0x0a, 0xc5, 0xa0, 0x74,\n\t\t\t0x48, 0x48, 0xa0, 0x9c,\n\t\t\t0x0b, 0xc5, 0x20, 0x1e,\n\t\t\t0xa0, 0x9e, 0xe5, 0x48,\n\t\t\t0xa0, 0x9e, 0xf0, 0xe7,\n\t\t\t0xbc, 0xc0, 0xc8, 0xd2,\n\t\t\t0xcc, 0xd2, 0x28, 0xe4,\n\t\t\t0x22, 0x02, 0xf0, 0xc0,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x00, 0x00, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x00, 0x00,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x00, 0x00, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x00, 0x00,\n\t\t\t0x00, 0x00, 0x00, 0x00 };\n\t\tstatic u8 usb_patch_a2[] = {\n\t\t\t0x08, 0xe0, 0x25, 0xe0,\n\t\t\t0x8e, 0xe0, 0xb8, 0xe0,\n\t\t\t0xba, 0xe0, 0xbc, 0xe0,\n\t\t\t0xbe, 0xe0, 0xc0, 0xe0,\n\t\t\t0x1c, 0xc2, 0x40, 0x71,\n\t\t\t0x9f, 0x48, 0x40, 0x99,\n\t\t\t0x1f, 0x48, 0x40, 0x99,\n\t\t\t0x15, 0xc2, 0x40, 0x61,\n\t\t\t0x90, 0x49, 0x0a, 0xf0,\n\t\t\t0x42, 0x70, 0x80, 0x49,\n\t\t\t0x07, 0xf0, 0x80, 0x48,\n\t\t\t0x42, 0x98, 0x0b, 0xc2,\n\t\t\t0x40, 0x60, 0x03, 0x48,\n\t\t\t0x40, 0x88, 0x0a, 0xc2,\n\t\t\t0x08, 0x18, 0x55, 0x60,\n\t\t\t0x55, 0x88, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0xc2, 0x09,\n\t\t\t0x28, 0xd4, 0xd4, 0xc4,\n\t\t\t0x06, 0xd4, 0x00, 0xb0,\n\t\t\t0x69, 0xc7, 0x62, 0xc6,\n\t\t\t0xe4, 0x9e, 0x0f, 0x1e,\n\t\t\t0xe6, 0x8e, 0xe6, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0xe0, 0x73, 0xe2, 0x74,\n\t\t\t0xb8, 0x26, 0xb8, 0x21,\n\t\t\t0xb8, 0x25, 0x48, 0x23,\n\t\t\t0x68, 0x27, 0x04, 0xb4,\n\t\t\t0x05, 0xb4, 0x06, 0xb4,\n\t\t\t0x52, 0xc6, 0xe3, 0x23,\n\t\t\t0xfe, 0x39, 0x00, 0x1c,\n\t\t\t0x00, 0x1d, 0x00, 0x13,\n\t\t\t0x0c, 0xf0, 0xb0, 0x49,\n\t\t\t0x04, 0xf1, 0x01, 0x05,\n\t\t\t0xb1, 0x25, 0xfa, 0xe7,\n\t\t\t0xb8, 0x33, 0x35, 0x43,\n\t\t\t0x26, 0x31, 0x01, 0x05,\n\t\t\t0xb1, 0x25, 0xf4, 0xe7,\n\t\t\t0x06, 0xb0, 0x05, 0xb0,\n\t\t\t0xae, 0x41, 0x25, 0x31,\n\t\t\t0x3d, 0xc5, 0x6c, 0x41,\n\t\t\t0x04, 0xb0, 0x48, 0x26,\n\t\t\t0x05, 0xb4, 0x3c, 0xc7,\n\t\t\t0x35, 0xc6, 0x04, 0x06,\n\t\t\t0xe4, 0x9e, 0x0f, 0x1e,\n\t\t\t0xe6, 0x8e, 0xe6, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0xe0, 0x76, 0xe8, 0x25,\n\t\t\t0xe8, 0x23, 0xf8, 0x27,\n\t\t\t0x2a, 0xc5, 0x6c, 0x41,\n\t\t\t0x33, 0x22, 0x23, 0x39,\n\t\t\t0x7c, 0x41, 0xfd, 0x31,\n\t\t\t0x25, 0xc6, 0x7e, 0x41,\n\t\t\t0xf2, 0x21, 0xdf, 0x30,\n\t\t\t0xdf, 0x30, 0x05, 0xb0,\n\t\t\t0x53, 0x22, 0x25, 0x31,\n\t\t\t0xa3, 0x31, 0x1b, 0xc7,\n\t\t\t0xb7, 0x31, 0x1b, 0xc7,\n\t\t\t0x77, 0x41, 0x1b, 0xc7,\n\t\t\t0x1b, 0xc4, 0x84, 0x9f,\n\t\t\t0x80, 0x9e, 0x16, 0xc3,\n\t\t\t0xde, 0x30, 0x60, 0x65,\n\t\t\t0x82, 0x9d, 0x8f, 0x1e,\n\t\t\t0x8f, 0x1e, 0x8f, 0x1e,\n\t\t\t0x86, 0x8e, 0x86, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0x06, 0xc7, 0x04, 0x1e,\n\t\t\t0xe0, 0x8e, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0xb6, 0x02,\n\t\t\t0x34, 0xe4, 0x00, 0xc0,\n\t\t\t0x25, 0x00, 0xff, 0x00,\n\t\t\t0x7f, 0x00, 0x00, 0xf8,\n\t\t\t0x88, 0xd3, 0x08, 0xdc,\n\t\t\t0x1f, 0xc0, 0x1f, 0xc1,\n\t\t\t0x00, 0x1c, 0x00, 0x99,\n\t\t\t0x1d, 0xc1, 0x02, 0x99,\n\t\t\t0x1c, 0xc1, 0x04, 0x99,\n\t\t\t0x06, 0x9c, 0x1a, 0xc1,\n\t\t\t0x08, 0x99, 0x0a, 0x9c,\n\t\t\t0x18, 0xc1, 0x0c, 0x99,\n\t\t\t0x17, 0xc1, 0x0e, 0x99,\n\t\t\t0x10, 0x9c, 0x15, 0xc1,\n\t\t\t0x12, 0x99, 0x14, 0xc1,\n\t\t\t0x14, 0x99, 0x13, 0xc1,\n\t\t\t0x16, 0x99, 0x12, 0xc1,\n\t\t\t0x18, 0x99, 0x08, 0xc1,\n\t\t\t0x1a, 0x9c, 0x0f, 0xc4,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x04, 0x33, 0x10, 0xc3,\n\t\t\t0x02, 0x00, 0x08, 0x00,\n\t\t\t0x38, 0x00, 0x48, 0x00,\n\t\t\t0x08, 0x00, 0x40, 0x00,\n\t\t\t0x00, 0x03, 0x80, 0x01,\n\t\t\t0x12, 0x7a, 0x01, 0x01,\n\t\t\t0xe0, 0xcb, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x3a, 0x4e,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x3a, 0x4e, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x3a, 0x4e,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x3a, 0x4e, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x3a, 0x4e };\n\n\t\trtl_clear_bp(tp, MCU_TYPE_PLA);\n\n\t\tgeneric_ocp_write(tp, 0xf800, 0xff, sizeof(pla_patch_a2),\n\t\t\t\t  pla_patch_a2, MCU_TYPE_PLA);\n\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc26, 0x8000);\n\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc28, 0x17a5);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2a, 0x13ad);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2c, 0x184d);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2e, 0x01e1);\n\n\t\trtl_clear_bp(tp, MCU_TYPE_USB);\n\n\t\tgeneric_ocp_write(tp, 0xf800, 0xff, sizeof(usb_patch_a2),\n\t\t\t\t  usb_patch_a2, MCU_TYPE_USB);\n\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc26, 0xA000);\n\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc28, 0x0c87);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc2a, 0x024f);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc2c, 0x3303);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc2e, 0x0000);\n\n\t\tocp_word_set_bits(tp, MCU_TYPE_USB, USB_USB_TIMER, BIT(15));\n\n\t\tocp_word_set_bits(tp, MCU_TYPE_USB, 0xc4d4, BIT(0));\n\t\tocp_word_clr_bits(tp, MCU_TYPE_USB, 0xc4d6, BIT(0));\n\t\tocp_word_set_bits(tp, MCU_TYPE_USB, 0xc5d4, BIT(2) | BIT(5));\n\n\t\tocp_word_clr_bits(tp, MCU_TYPE_USB, USB_USB_TIMER, BIT(15));\n\n\t\trtl_reset_ocp_base(tp);\n\t}\n\n\trtl_reset_ocp_base(tp);\n}\n\nstatic int r8152_aldps_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = ocp_reg_write(tp, OCP_ALDPS_CONFIG, ENPWRSAVE | ENPDNPS |\n\t\t\t\t\t\t\t  LINKENA | DIS_SDSAVE);\n\t} else {\n\t\tret = ocp_reg_write(tp, OCP_ALDPS_CONFIG, ENPDNPS | LINKENA |\n\t\t\t\t\t\t\t  DIS_SDSAVE);\n\t\tmsleep(20);\n\t}\n\treturn ret;\n}\n\nstatic int r8152_mmd_indirect(struct r8152 *tp, u16 dev, u16 reg)\n{\n\tint ret;\n\n\tret = ocp_reg_write(tp, OCP_EEE_AR, FUN_ADDR | dev);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_reg_write(tp, OCP_EEE_DATA, reg);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_reg_write(tp, OCP_EEE_AR, FUN_DATA | dev);\n\nout:\n\treturn ret;\n}\n\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0)\nstatic int r8152_mmd_read(struct r8152 *tp, u16 dev, u16 reg, u16 *data)\n{\n\tint ret;\n\n\tret = r8152_mmd_indirect(tp, dev, reg);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_reg_read(tp, OCP_EEE_DATA, data);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_reg_write(tp, OCP_EEE_AR, 0x0000);\n\nout:\n\treturn ret;\n}\n#endif /* LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0) */\n\nstatic int r8152_mmd_write(struct r8152 *tp, u16 dev, u16 reg, u16 data)\n{\n\tint ret;\n\n\tret = r8152_mmd_indirect(tp, dev, reg);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_reg_write(tp, OCP_EEE_DATA, data);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_reg_write(tp, OCP_EEE_AR, 0x0000);\n\nout:\n\treturn ret;\n}\n\nstatic int r8152_eee_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_EEE_CR,\n\t\t\t\t\tEEE_RX_EN | EEE_TX_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_reg_w0w1(tp, OCP_EEE_CONFIG1, sd_rise_time_mask,\n\t\t\t\t   EEE_10_CAP | EEE_NWAY_EN | TX_QUIET_EN |\n\t\t\t\t   RX_QUIET_EN | sd_rise_time(1));\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_reg_set_bits(tp, OCP_EEE_CONFIG2,\n\t\t\t\t       RG_DACQUIET_EN | RG_LDVQUIET_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_reg_w0w1(tp, OCP_EEE_CONFIG3, fast_snr_mask,\n\t\t\t\t   fast_snr(42));\n\t} else {\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_EEE_CR,\n\t\t\t\t\tEEE_RX_EN | EEE_TX_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_reg_w0w1(tp, OCP_EEE_CONFIG1, sd_rise_time_mask |\n\t\t\t\t   EEE_10_CAP | EEE_NWAY_EN | TX_QUIET_EN |\n\t\t\t\t   RX_QUIET_EN, sd_rise_time(7));\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_reg_clr_bits(tp, OCP_EEE_CONFIG2,\n\t\t\t\t       RG_DACQUIET_EN | RG_LDVQUIET_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_reg_w0w1(tp, OCP_EEE_CONFIG3, fast_snr_mask,\n\t\t\t\t   fast_snr(511));\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int r8153_eee_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_EEE_CR,\n\t\t\t\t\tEEE_RX_EN | EEE_TX_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_reg_set_bits(tp, OCP_EEE_CFG, EEE10_EN);\n\t\tret = ocp_reg_write(tp, OCP_EEE_ADV, tp->eee_adv);\n\t} else {\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_EEE_CR,\n\t\t\t\t\tEEE_RX_EN | EEE_TX_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_reg_clr_bits(tp, OCP_EEE_CFG, EEE10_EN);\n\t\tret = ocp_reg_write(tp, OCP_EEE_ADV, 0);\n\t}\n\n\ttp->ups_info.eee = enable;\n\nout:\n\treturn ret;\n}\n\nstatic int r8156_eee_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = r8153_eee_en(tp, true);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_reg_write(tp, OCP_EEE_ADV2, tp->eee_adv2);\n\n\t\tclear_bit(DISABLE_EEE_BOTTOM, &tp->flags);\n\t} else {\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_EEE_CR,\n\t\t\t\t\tEEE_TX_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_reg_write(tp, OCP_EEE_ADV, 0);\n\t\tret = ocp_reg_write(tp, OCP_EEE_ADV2, 0);\n\n\t\tset_bit(DISABLE_EEE_BOTTOM, &tp->flags);\n\n\t\ttp->ups_info.eee = false;\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int r8157_eee_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tret = r8153_eee_en(tp, enable);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (enable)\n\t\tret = ocp_reg_write(tp, OCP_EEE_ADV2, tp->eee_adv2);\n\telse\n\t\tret = ocp_reg_write(tp, OCP_EEE_ADV2, 0);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl_eee_enable(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_01:\n\tcase RTL_VER_02:\n\tcase RTL_VER_07:\n\t\tif (enable) {\n\t\t\tret = r8152_eee_en(tp, true);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\t\t\tret = r8152_mmd_write(tp, MDIO_MMD_AN, MDIO_AN_EEE_ADV,\n\t\t\t\t\t      tp->eee_adv);\n\t\t} else {\n\t\t\tret = r8152_eee_en(tp, false);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\t\t\tret = r8152_mmd_write(tp, MDIO_MMD_AN, MDIO_AN_EEE_ADV,\n\t\t\t\t\t      0);\n\t\t}\n\t\tbreak;\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\tcase RTL_VER_08:\n\tcase RTL_VER_09:\n\tcase RTL_VER_14:\n\t\tret = r8153_eee_en(tp, enable);\n\t\tbreak;\n\tcase RTL_VER_10:\n\tcase RTL_VER_11:\n\tcase RTL_VER_12:\n\tcase RTL_VER_13:\n\tcase RTL_VER_15:\n\t\tret = r8156_eee_en(tp, enable);\n\t\tbreak;\n\tcase RTL_VER_16:\n\tcase RTL_VER_17:\n\t\tret = r8157_eee_en(tp, enable);\n\t\tbreak;\n\tdefault:\n\t\tret = 0;\n\t\tWARN_ON_ONCE(1);\n\t\tbreak;\n\t}\n\nout:\n\treturn (ret < 0) ? ret : 0;\n}\n\nstatic int rtl_disable_eee_bottom(struct r8152 *tp)\n{\n\tint i, ret = -EINVAL;\n\n\tfor (i = 0; i < 50; i++) {\n\t\tif (!(rtl8152_get_speed(tp) & LINK_STATUS)) {\n\t\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_EEE_CR,\n\t\t\t\t\t\tEEE_RX_EN);\n\t\t\tbreak;\n\t\t}\n\t\tmsleep(20);\n\t}\n\n\treturn (ret < 0) ? ret : 0;\n}\n\nstatic int r8152b_enable_fc(struct r8152 *tp)\n{\n\tint ret;\n\n\tret = r8152_mdio_set_bit(tp, MII_ADVERTISE,\n\t\t\t\t ADVERTISE_PAUSE_CAP | ADVERTISE_PAUSE_ASYM);\n\n\ttp->ups_info.flow_control = true;\n\n\treturn ret;\n}\n\nstatic int rtl8152_disable(struct r8152 *tp)\n{\n\tint ret, err = 0;\n\n\tret = r8152_aldps_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = rtl_disable(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8152_aldps_en(tp, true);\n\n\tif (err < 0)\n\t\treturn err;\n\telse\n\t\treturn ret;\n}\n\nstatic void r8152b_hw_phy_cfg(struct r8152 *tp)\n{\n\tr8152b_firmware(tp);\n\n\trtl_eee_enable(tp, tp->eee_en);\n\tr8152_aldps_en(tp, true);\n\tr8152b_enable_fc(tp);\n\n\tset_bit(PHY_RESET, &tp->flags);\n}\n\nstatic void wait_oob_link_list_ready(struct r8152 *tp)\n{\n\tu32 ocp_data;\n\tint i, ret;\n\n\tfor (i = 0; i < 1000; i++) {\n\t\tret = ocp_read_byte(tp, MCU_TYPE_PLA, PLA_OOB_CTRL, &ocp_data);\n\t\tif (ret < 0 || (ocp_data & LINK_LIST_READY))\n\t\t\tbreak;\n\t\tusleep_range(1000, 2000);\n\t}\n}\n\nstatic int r8156b_wait_loading_flash(struct r8152 *tp)\n{\n\tint ret = 0;\n\n\tif (r8156b_flash_used(tp)) {\n\t\tint i;\n\n\t\tfor (i = 0; i < 100; i++) {\n\t\t\tu32 ocp_data;\n\n\t\t\tret = ocp_read_word(tp, MCU_TYPE_USB, USB_GPHY_CTRL,\n\t\t\t\t\t    &ocp_data);\n\t\t\tif (ret < 0 || (ocp_data & GPHY_PATCH_DONE))\n\t\t\t\tbreak;\n\t\t\tusleep_range(1000, 2000);\n\t\t}\n\t}\n\n\treturn ret;\n}\n\nstatic int r8152b_exit_oob(struct r8152 *tp)\n{\n\tint ret;\n\n\tret = ocp_dword_clr_bits(tp, MCU_TYPE_PLA, PLA_RCR, RCR_ACPT_ALL);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rxdy_gated_en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_teredo_off(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR, CRWECR_NORAML);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CR, 0x00);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL, NOW_IS_OOB);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, MCU_BORW_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\twait_oob_link_list_ready(tp);\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, RE_INIT_LL);\n\tif (ret < 0)\n\t\tgoto out;\n\n\twait_oob_link_list_ready(tp);\n\n\tret = rtl8152_nic_reset(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* rx share fifo credit full threshold */\n\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL0, RXFIFO_THR1_NORMAL);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->udev->speed == USB_SPEED_FULL ||\n\t    tp->udev->speed == USB_SPEED_LOW) {\n\t\t/* rx share fifo credit near full threshold */\n\t\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL1,\n\t\t\t\t      RXFIFO_THR2_FULL);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL2,\n\t\t\t\t      RXFIFO_THR3_FULL);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t} else {\n\t\t/* rx share fifo credit near full threshold */\n\t\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL1,\n\t\t\t\t      RXFIFO_THR2_HIGH);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL2,\n\t\t\t\t      RXFIFO_THR3_HIGH);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\t/* TX share fifo free credit full threshold */\n\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_TXFIFO_CTRL, TXFIFO_THR_NORMAL2);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_byte(tp, MCU_TYPE_USB, USB_TX_AGG, TX_AGG_MAX_THRESHOLD);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_dword(tp, MCU_TYPE_USB, USB_RX_BUF_TH, RX_THR_HIGH);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_dword(tp, MCU_TYPE_USB, USB_TX_DMA,\n\t\t\tTEST_MODE_DISABLE | TX_SIZE_ADJUST1);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_rx_vlan_en(tp, tp->netdev->features & NETIF_F_HW_VLAN_CTAG_RX);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RMS, RTL8152_RMS);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_TCR0, TCR0_AUTO_FIFO);\n\tif (ret < 0)\n\t\tgoto out;\n\nout:\n\treturn ret;\n}\n\nstatic int r8152b_enter_oob(struct r8152 *tp)\n{\n\tint ret, err = 0;\n\n\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL, NOW_IS_OOB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL0,\n\t\t\t      RXFIFO_THR1_OOB);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL1,\n\t\t\t      RXFIFO_THR2_OOB);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL2,\n\t\t\t      RXFIFO_THR3_OOB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = rtl_disable(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\n\twait_oob_link_list_ready(tp);\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, RE_INIT_LL);\n\tif (ret < 0)\n\t\terr = ret;\n\n\twait_oob_link_list_ready(tp);\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RMS, RTL8152_RMS);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = rtl_rx_vlan_en(tp, true);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_BDC_CR, ALDPS_PROXY_MODE);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_byte_set_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL,\n\t\t\t\tNOW_IS_OOB | DIS_MCU_CLROOB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = rxdy_gated_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_dword_set_bits(tp, MCU_TYPE_PLA, PLA_RCR,\n\t\t\t\t RCR_APM | RCR_AM | RCR_AB);\n\n\tif (err < 0)\n\t\treturn err;\n\telse\n\t\treturn ret;\n}\n\nstatic int r8156_lock_main(struct r8152 *tp, bool lock)\n{\n\tint i, ret;\n\tu16 data;\n\n\tif (lock)\n\t\tret = ocp_reg_set_bits(tp, 0xa46a, BIT(1));\n\telse\n\t\tret = ocp_reg_clr_bits(tp, 0xa46a, BIT(1));\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (lock) {\n\t\tfor (i = 0; i < 100; i++) {\n\t\t\tusleep_range(1000, 2000);\n\t\t\tret = ocp_reg_read(tp, 0xa730, &data);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\t\t\tdata &= 0xff;\n\t\t\tif (data == 1)\n\t\t\t\tbreak;\n\t\t}\n\t} else {\n\t\tfor (i = 0; i < 100; i++) {\n\t\t\tusleep_range(1000, 2000);\n\t\t\tret = ocp_reg_read(tp, 0xa730, &data);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\t\t\tdata &= 0xff;\n\t\t\tif (data != 1)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (i == 100)\n\t\tret = -ETIME;\n\telse\n\t\tret = 0;\n\nout:\n\treturn ret;\n}\n\nstatic void r8153_wdt1_end(struct r8152 *tp)\n{\n\tint i, ret;\n\n\t/* Wait till the WTD timer is ready. It would take at most 104 ms. */\n\tfor (i = 0; i < 104; i++) {\n\t\tu32 ocp_data;\n\n\t\tret = ocp_read_byte(tp, MCU_TYPE_USB, USB_WDT1_CTRL, &ocp_data);\n\t\tif (ret < 0 || !(ocp_data & WTD1_EN))\n\t\t\tbreak;\n\t\tusleep_range(1000, 2000);\n\t}\n}\n\n#define DBG_COUNTER_MASK\t\t0x1f\n#define DBG_DRV_RUNNING\t\t\t(1 << 5)\n#define DGB_DRV_STATE_MASK\t\t(3 << 14)\n#define DGB_DRV_STATE_LOAD\t\t(2 << 14)\n#define DGB_DRV_STATE_UNLOAD\t\t(1 << 14)\n\nstatic void rtl_set_dbg_info_init(struct r8152 *tp, u16 drv_version)\n{\n\tu32 counter;\n\n\tif (ocp_read_byte(tp, MCU_TYPE_USB, 0xcfcf, &counter) < 0)\n\t\treturn;\n\tcounter++;\n\tcounter &= DBG_COUNTER_MASK;\n\tocp_write_byte(tp, MCU_TYPE_USB, 0xcfcf, counter | DBG_DRV_RUNNING);\n\tcounter = (counter << 5) | drv_version;\n\tocp_write_word(tp, MCU_TYPE_USB, 0xcfd0, counter);\n}\n\nstatic void rtl_set_dbg_info_state(struct r8152 *tp, u16 state)\n{\n\tu32 ocp_data;\n\n\tif (ocp_read_word(tp, MCU_TYPE_USB, 0xcfd0, &ocp_data) < 0)\n\t\treturn;\n\tocp_data &= ~DGB_DRV_STATE_MASK;\n\tocp_write_word(tp, MCU_TYPE_USB, 0xcfd0, state | ocp_data);\n}\n\nstatic void rtl_fw_ver_erase(struct r8152 *tp)\n{\n\tu16 outer_ver;\n\tu32 ocp_data;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_01:\n\tcase RTL_VER_02:\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\tcase RTL_VER_07:\n\tcase RTL_TEST_01:\n\t\treturn;\n\tcase RTL_VER_10:\n\tcase RTL_VER_11:\n\tcase RTL_VER_12:\n\tcase RTL_VER_13:\n\tcase RTL_VER_15:\n\t\touter_ver = USB_OUTSIDE_FW_VER;\n\t\tbreak;\n\tdefault:\n\t\touter_ver = USB_OUTER_FW_VER;\n\t\tbreak;\n\t}\n\n\tif (ocp_read_word(tp, MCU_TYPE_USB, outer_ver, &ocp_data) < 0)\n\t\treturn;\n\n\tif (ocp_data) {\n\t\tocp_write_word(tp, MCU_TYPE_USB, outer_ver, 0);\n\t\tocp_write_word(tp, MCU_TYPE_USB, USB_FW_PLA_VER, 0);\n\t}\n}\n\nstatic void r8153_firmware(struct r8152 *tp)\n{\n\tu32 ocp_data;\n\tint ret;\n\n\tif (tp->version == RTL_VER_03) {\n\t\trtl_reset_ocp_base(tp);\n\n\t\trtl_pre_ram_code(tp, 0x8146, 0x7000, true);\n\t\tsram_write(tp, 0xb820, 0x0290);\n\t\tsram_write(tp, 0xa012, 0x0000);\n\t\tsram_write(tp, 0xa014, 0x2c04);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c18);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c45);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c45);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd502);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8301);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8306);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd500);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8208);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd501);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xe018);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x0308);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x60f2);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8404);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x607d);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xc117);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c16);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xc116);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c16);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x607d);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xc117);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa404);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd500);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x0800);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd501);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x62d2);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x615d);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xc115);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa404);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xc307);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd502);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8301);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8306);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd500);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8208);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c42);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xc114);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8404);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xc317);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd701);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x435d);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd500);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa208);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd502);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa306);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa301);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c42);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8404);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x613d);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xc115);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xc307);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd502);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8301);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8306);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd500);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8208);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c42);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xc114);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xc317);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd701);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x40dd);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd500);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa208);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd502);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa306);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa301);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd500);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd702);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x0800);\n\t\tsram_write(tp, 0xa01a, 0x0000);\n\t\tsram_write(tp, 0xa006, 0x0fff);\n\t\tsram_write(tp, 0xa004, 0x0fff);\n\t\tsram_write(tp, 0xa002, 0x05a3);\n\t\tsram_write(tp, 0xa000, 0x3591);\n\t\tsram_write(tp, 0xb820, 0x0210);\n\t\trtl_post_ram_code(tp, 0x8146, true);\n\t} else if (tp->version == RTL_VER_04) {\n\t\tstatic u8 usb_patch_b[] = {\n\t\t\t0x08, 0xe0, 0x0f, 0xe0,\n\t\t\t0x18, 0xe0, 0x24, 0xe0,\n\t\t\t0x26, 0xe0, 0x3a, 0xe0,\n\t\t\t0x84, 0xe0, 0x9c, 0xe0,\n\t\t\t0xc2, 0x49, 0x04, 0xf0,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x14, 0x18, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x2e, 0x18,\n\t\t\t0x06, 0x89, 0x08, 0xc0,\n\t\t\t0x0c, 0x61, 0x92, 0x48,\n\t\t\t0x93, 0x48, 0x0c, 0x89,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x08, 0x05, 0x40, 0xb4,\n\t\t\t0x16, 0x89, 0x6d, 0xc0,\n\t\t\t0x00, 0x61, 0x95, 0x49,\n\t\t\t0x06, 0xf0, 0xfa, 0xc0,\n\t\t\t0x0c, 0x61, 0x92, 0x48,\n\t\t\t0x93, 0x48, 0x0c, 0x89,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0xe2, 0x04, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0xec, 0x11,\n\t\t\t0x60, 0x60, 0x85, 0x49,\n\t\t\t0x0d, 0xf1, 0x11, 0xc6,\n\t\t\t0xd2, 0x61, 0x91, 0x49,\n\t\t\t0xfd, 0xf0, 0x74, 0x60,\n\t\t\t0x04, 0x48, 0x74, 0x88,\n\t\t\t0x08, 0xc6, 0x08, 0xc0,\n\t\t\t0xc4, 0x98, 0x01, 0x18,\n\t\t\t0xc0, 0x88, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x6e, 0x12,\n\t\t\t0x04, 0xe4, 0x0d, 0x00,\n\t\t\t0x00, 0xd4, 0xd1, 0x49,\n\t\t\t0x3c, 0xf1, 0xd2, 0x49,\n\t\t\t0x16, 0xf1, 0xd3, 0x49,\n\t\t\t0x18, 0xf1, 0xd4, 0x49,\n\t\t\t0x19, 0xf1, 0xd5, 0x49,\n\t\t\t0x1a, 0xf1, 0xd6, 0x49,\n\t\t\t0x1b, 0xf1, 0xd7, 0x49,\n\t\t\t0x1c, 0xf1, 0xd8, 0x49,\n\t\t\t0x1d, 0xf1, 0xd9, 0x49,\n\t\t\t0x20, 0xf1, 0xda, 0x49,\n\t\t\t0x23, 0xf1, 0xdb, 0x49,\n\t\t\t0x24, 0xf1, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0x20, 0x04,\n\t\t\t0xe5, 0x8e, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0x14, 0x02,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0x16, 0x02, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0x18, 0x02,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0x1a, 0x02, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0x1c, 0x02,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0x94, 0x02, 0x10, 0xc7,\n\t\t\t0xe0, 0x8e, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0x8a, 0x02,\n\t\t\t0x0b, 0xc7, 0xe4, 0x8e,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0x88, 0x02, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0x6e, 0x02,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0x5a, 0x02, 0x30, 0xe4,\n\t\t\t0x0c, 0xc3, 0x60, 0x64,\n\t\t\t0xc5, 0x49, 0x04, 0xf1,\n\t\t\t0x74, 0x64, 0xc4, 0x48,\n\t\t\t0x74, 0x8c, 0x06, 0xc3,\n\t\t\t0x64, 0x8e, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0x20, 0x04,\n\t\t\t0x00, 0xd8, 0x00, 0xe4,\n\t\t\t0xb2, 0xc0, 0x00, 0x61,\n\t\t\t0x90, 0x49, 0x09, 0xf1,\n\t\t\t0x8b, 0xc6, 0xca, 0x61,\n\t\t\t0x94, 0x49, 0x0e, 0xf1,\n\t\t\t0xf6, 0xc6, 0xda, 0x60,\n\t\t\t0x81, 0x49, 0x0a, 0xf0,\n\t\t\t0x65, 0x60, 0x03, 0x48,\n\t\t\t0x65, 0x88, 0xef, 0xc6,\n\t\t\t0xdc, 0x60, 0x80, 0x48,\n\t\t\t0xdc, 0x88, 0x05, 0xc6,\n\t\t\t0x00, 0xbe, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x36, 0x13,\n\t\t\t0x4c, 0x17, 0x99, 0xc4,\n\t\t\t0x80, 0x65, 0xd0, 0x49,\n\t\t\t0x04, 0xf1, 0xfa, 0x75,\n\t\t\t0x04, 0xc4, 0x00, 0xbc,\n\t\t\t0x03, 0xc4, 0x00, 0xbc,\n\t\t\t0x9a, 0x00, 0xee, 0x01 };\n\t\tstatic u8 pla_patch_b[] = {\n\t\t\t0x08, 0xe0, 0xea, 0xe0,\n\t\t\t0xf2, 0xe0, 0x04, 0xe1,\n\t\t\t0x09, 0xe1, 0x0e, 0xe1,\n\t\t\t0x46, 0xe1, 0xf7, 0xe1,\n\t\t\t0x14, 0xc2, 0x40, 0x73,\n\t\t\t0xba, 0x48, 0x40, 0x9b,\n\t\t\t0x11, 0xc2, 0x40, 0x73,\n\t\t\t0xb0, 0x49, 0x17, 0xf0,\n\t\t\t0xbf, 0x49, 0x03, 0xf1,\n\t\t\t0x09, 0xc5, 0x00, 0xbd,\n\t\t\t0xb1, 0x49, 0x11, 0xf0,\n\t\t\t0xb1, 0x48, 0x40, 0x9b,\n\t\t\t0x02, 0xc2, 0x00, 0xba,\n\t\t\t0x1a, 0x17, 0x00, 0xe0,\n\t\t\t0x1e, 0xfc, 0xbc, 0xc0,\n\t\t\t0xf0, 0xc0, 0xde, 0xe8,\n\t\t\t0x00, 0x80, 0x00, 0x20,\n\t\t\t0x2c, 0x75, 0xd4, 0x49,\n\t\t\t0x12, 0xf1, 0x32, 0xe0,\n\t\t\t0xf8, 0xc2, 0x46, 0x71,\n\t\t\t0xf7, 0xc2, 0x40, 0x73,\n\t\t\t0xbe, 0x49, 0x03, 0xf1,\n\t\t\t0xf5, 0xc7, 0x02, 0xe0,\n\t\t\t0xf2, 0xc7, 0x4f, 0x30,\n\t\t\t0x26, 0x62, 0xa1, 0x49,\n\t\t\t0xf0, 0xf1, 0x22, 0x72,\n\t\t\t0xa0, 0x49, 0xed, 0xf1,\n\t\t\t0x25, 0x25, 0x18, 0x1f,\n\t\t\t0x97, 0x30, 0x91, 0x30,\n\t\t\t0x36, 0x9a, 0x2c, 0x75,\n\t\t\t0x3c, 0xc3, 0x60, 0x73,\n\t\t\t0xb1, 0x49, 0x0d, 0xf1,\n\t\t\t0xdc, 0x21, 0xbc, 0x25,\n\t\t\t0x30, 0xc6, 0xc0, 0x77,\n\t\t\t0x04, 0x13, 0x21, 0xf0,\n\t\t\t0x03, 0x13, 0x22, 0xf0,\n\t\t\t0x02, 0x13, 0x23, 0xf0,\n\t\t\t0x01, 0x13, 0x24, 0xf0,\n\t\t\t0x08, 0x13, 0x08, 0xf1,\n\t\t\t0x2e, 0x73, 0xba, 0x21,\n\t\t\t0xbd, 0x25, 0x05, 0x13,\n\t\t\t0x03, 0xf1, 0x24, 0xc5,\n\t\t\t0x00, 0xbd, 0xd4, 0x49,\n\t\t\t0x03, 0xf1, 0x1c, 0xc5,\n\t\t\t0x00, 0xbd, 0xc4, 0xc6,\n\t\t\t0xc6, 0x67, 0x2e, 0x75,\n\t\t\t0xd7, 0x22, 0xdd, 0x26,\n\t\t\t0x05, 0x15, 0x1b, 0xf0,\n\t\t\t0x14, 0xc6, 0x00, 0xbe,\n\t\t\t0x13, 0xc5, 0x00, 0xbd,\n\t\t\t0x12, 0xc5, 0x00, 0xbd,\n\t\t\t0xf1, 0x49, 0xfb, 0xf1,\n\t\t\t0xef, 0xe7, 0xf4, 0x49,\n\t\t\t0xfa, 0xf1, 0xec, 0xe7,\n\t\t\t0xf3, 0x49, 0xf7, 0xf1,\n\t\t\t0xe9, 0xe7, 0xf2, 0x49,\n\t\t\t0xf4, 0xf1, 0xe6, 0xe7,\n\t\t\t0xb6, 0xc0, 0x9e, 0x12,\n\t\t\t0xde, 0x11, 0x0a, 0x12,\n\t\t\t0x3c, 0x13, 0x00, 0xa0,\n\t\t\t0xa0, 0xd1, 0x00, 0x00,\n\t\t\t0xc0, 0x75, 0xd0, 0x49,\n\t\t\t0x46, 0xf0, 0x26, 0x72,\n\t\t\t0xa7, 0x49, 0x43, 0xf0,\n\t\t\t0x22, 0x72, 0x25, 0x25,\n\t\t\t0x20, 0x1f, 0x97, 0x30,\n\t\t\t0x91, 0x30, 0x40, 0x73,\n\t\t\t0xf3, 0xc4, 0x1c, 0x40,\n\t\t\t0x04, 0xf0, 0xd7, 0x49,\n\t\t\t0x05, 0xf1, 0x37, 0xe0,\n\t\t\t0x53, 0x48, 0xc0, 0x9d,\n\t\t\t0x08, 0x02, 0x40, 0x66,\n\t\t\t0x64, 0x27, 0x06, 0x16,\n\t\t\t0x30, 0xf1, 0x46, 0x63,\n\t\t\t0x3b, 0x13, 0x2d, 0xf1,\n\t\t\t0x34, 0x9b, 0x18, 0x1b,\n\t\t\t0x93, 0x30, 0x2b, 0xc3,\n\t\t\t0x10, 0x1c, 0x2b, 0xe8,\n\t\t\t0x01, 0x14, 0x25, 0xf1,\n\t\t\t0x00, 0x1d, 0x26, 0x1a,\n\t\t\t0x8a, 0x30, 0x22, 0x73,\n\t\t\t0xb5, 0x25, 0x0e, 0x0b,\n\t\t\t0x00, 0x1c, 0x2c, 0xe8,\n\t\t\t0x1f, 0xc7, 0x27, 0x40,\n\t\t\t0x1a, 0xf1, 0x38, 0xe8,\n\t\t\t0x32, 0x1f, 0x8f, 0x30,\n\t\t\t0x08, 0x1b, 0x24, 0xe8,\n\t\t\t0x36, 0x72, 0x46, 0x77,\n\t\t\t0x00, 0x17, 0x0d, 0xf0,\n\t\t\t0x13, 0xc3, 0x1f, 0x40,\n\t\t\t0x03, 0xf1, 0x00, 0x1f,\n\t\t\t0x46, 0x9f, 0x44, 0x77,\n\t\t\t0x9f, 0x44, 0x5f, 0x44,\n\t\t\t0x17, 0xe8, 0x0a, 0xc7,\n\t\t\t0x27, 0x40, 0x05, 0xf1,\n\t\t\t0x02, 0xc3, 0x00, 0xbb,\n\t\t\t0xfa, 0x18, 0xb0, 0x18,\n\t\t\t0xff, 0xc7, 0x00, 0xbf,\n\t\t\t0xb8, 0xcd, 0xff, 0xff,\n\t\t\t0x02, 0x0c, 0x54, 0xa5,\n\t\t\t0xdc, 0xa5, 0x2f, 0x40,\n\t\t\t0x05, 0xf1, 0x00, 0x14,\n\t\t\t0xfa, 0xf1, 0x01, 0x1c,\n\t\t\t0x02, 0xe0, 0x00, 0x1c,\n\t\t\t0x80, 0xff, 0xb0, 0x49,\n\t\t\t0x04, 0xf0, 0x01, 0x0b,\n\t\t\t0xd3, 0xa1, 0x03, 0xe0,\n\t\t\t0x02, 0x0b, 0xd3, 0xa5,\n\t\t\t0x27, 0x31, 0x20, 0x37,\n\t\t\t0x02, 0x0b, 0xd3, 0xa5,\n\t\t\t0x27, 0x31, 0x20, 0x37,\n\t\t\t0x00, 0x13, 0xfb, 0xf1,\n\t\t\t0x80, 0xff, 0x22, 0x73,\n\t\t\t0xb5, 0x25, 0x18, 0x1e,\n\t\t\t0xde, 0x30, 0xd9, 0x30,\n\t\t\t0x64, 0x72, 0x11, 0x1e,\n\t\t\t0x68, 0x23, 0x16, 0x31,\n\t\t\t0x80, 0xff, 0x08, 0xc2,\n\t\t\t0x40, 0x73, 0x3a, 0x48,\n\t\t\t0x40, 0x9b, 0x06, 0xff,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x08, 0x16, 0x1e, 0xfc,\n\t\t\t0x2c, 0x75, 0xdc, 0x21,\n\t\t\t0xbc, 0x25, 0x04, 0x13,\n\t\t\t0x0b, 0xf0, 0x03, 0x13,\n\t\t\t0x09, 0xf0, 0x02, 0x13,\n\t\t\t0x07, 0xf0, 0x01, 0x13,\n\t\t\t0x05, 0xf0, 0x08, 0x13,\n\t\t\t0x03, 0xf0, 0x04, 0xc3,\n\t\t\t0x00, 0xbb, 0x03, 0xc3,\n\t\t\t0x00, 0xbb, 0x8c, 0x15,\n\t\t\t0x76, 0x15, 0xa0, 0x64,\n\t\t\t0x40, 0x48, 0xa0, 0x8c,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0x82, 0x00, 0xa0, 0x62,\n\t\t\t0x21, 0x48, 0xa0, 0x8a,\n\t\t\t0x02, 0xc2, 0x00, 0xba,\n\t\t\t0x40, 0x03, 0x33, 0xc5,\n\t\t\t0xa0, 0x74, 0xc0, 0x49,\n\t\t\t0x1f, 0xf0, 0x30, 0xc5,\n\t\t\t0xa0, 0x73, 0x00, 0x13,\n\t\t\t0x04, 0xf1, 0xa2, 0x73,\n\t\t\t0x00, 0x13, 0x14, 0xf0,\n\t\t\t0x28, 0xc5, 0xa0, 0x74,\n\t\t\t0xc8, 0x49, 0x1b, 0xf1,\n\t\t\t0x26, 0xc5, 0xa0, 0x76,\n\t\t\t0xa2, 0x74, 0x01, 0x06,\n\t\t\t0x20, 0x37, 0xa0, 0x9e,\n\t\t\t0xa2, 0x9c, 0x1e, 0xc5,\n\t\t\t0xa2, 0x73, 0x23, 0x40,\n\t\t\t0x10, 0xf8, 0x04, 0xf3,\n\t\t\t0xa0, 0x73, 0x33, 0x40,\n\t\t\t0x0c, 0xf8, 0x15, 0xc5,\n\t\t\t0xa0, 0x74, 0x41, 0x48,\n\t\t\t0xa0, 0x9c, 0x14, 0xc5,\n\t\t\t0xa0, 0x76, 0x62, 0x48,\n\t\t\t0xe0, 0x48, 0xa0, 0x9e,\n\t\t\t0x10, 0xc6, 0x00, 0xbe,\n\t\t\t0x0a, 0xc5, 0xa0, 0x74,\n\t\t\t0x48, 0x48, 0xa0, 0x9c,\n\t\t\t0x0b, 0xc5, 0x20, 0x1e,\n\t\t\t0xa0, 0x9e, 0xe5, 0x48,\n\t\t\t0xa0, 0x9e, 0xf0, 0xe7,\n\t\t\t0xbc, 0xc0, 0xc8, 0xd2,\n\t\t\t0xcc, 0xd2, 0x28, 0xe4,\n\t\t\t0xe6, 0x01, 0xf0, 0xc0,\n\t\t\t0x18, 0x89, 0x00, 0x1d,\n\t\t\t0x3c, 0xc3, 0x64, 0x71,\n\t\t\t0x3c, 0xc0, 0x02, 0x99,\n\t\t\t0x00, 0x61, 0x67, 0x11,\n\t\t\t0x3c, 0xf1, 0x69, 0x33,\n\t\t\t0x35, 0xc0, 0x28, 0x40,\n\t\t\t0xf6, 0xf1, 0x34, 0xc0,\n\t\t\t0x00, 0x19, 0x81, 0x1b,\n\t\t\t0x91, 0xe8, 0x31, 0xc0,\n\t\t\t0x04, 0x1a, 0x84, 0x1b,\n\t\t\t0x8d, 0xe8, 0x82, 0xe8,\n\t\t\t0xa3, 0x49, 0xfe, 0xf0,\n\t\t\t0x2b, 0xc0, 0x7e, 0xe8,\n\t\t\t0xa1, 0x48, 0x28, 0xc0,\n\t\t\t0x84, 0x1b, 0x84, 0xe8,\n\t\t\t0x00, 0x1d, 0x69, 0x33,\n\t\t\t0x00, 0x1e, 0x01, 0x06,\n\t\t\t0xff, 0x18, 0x30, 0x40,\n\t\t\t0xfd, 0xf1, 0x19, 0xc0,\n\t\t\t0x00, 0x76, 0x2e, 0x40,\n\t\t\t0xf7, 0xf1, 0x21, 0x48,\n\t\t\t0x19, 0xc0, 0x84, 0x1b,\n\t\t\t0x75, 0xe8, 0x10, 0xc0,\n\t\t\t0x69, 0xe8, 0xa1, 0x49,\n\t\t\t0xfd, 0xf0, 0x11, 0xc0,\n\t\t\t0x00, 0x1a, 0x84, 0x1b,\n\t\t\t0x6d, 0xe8, 0x62, 0xe8,\n\t\t\t0xa5, 0x49, 0xfe, 0xf0,\n\t\t\t0x09, 0xc0, 0x01, 0x19,\n\t\t\t0x81, 0x1b, 0x66, 0xe8,\n\t\t\t0x54, 0xe0, 0x10, 0xd4,\n\t\t\t0x88, 0xd3, 0xb8, 0x0b,\n\t\t\t0x50, 0xe8, 0x20, 0xb4,\n\t\t\t0x10, 0xd8, 0x84, 0xd4,\n\t\t\t0xfd, 0xc0, 0x52, 0xe8,\n\t\t\t0x48, 0x33, 0xf9, 0xc0,\n\t\t\t0x00, 0x61, 0x9c, 0x20,\n\t\t\t0x9c, 0x24, 0xd0, 0x49,\n\t\t\t0x04, 0xf0, 0x04, 0x11,\n\t\t\t0x02, 0xf1, 0x03, 0xe0,\n\t\t\t0x00, 0x11, 0x06, 0xf1,\n\t\t\t0x5c, 0xc0, 0x00, 0x61,\n\t\t\t0x92, 0x48, 0x00, 0x89,\n\t\t\t0x3a, 0xe0, 0x06, 0x11,\n\t\t\t0x06, 0xf1, 0x55, 0xc0,\n\t\t\t0x00, 0x61, 0x11, 0x48,\n\t\t\t0x00, 0x89, 0x33, 0xe0,\n\t\t\t0x05, 0x11, 0x08, 0xf1,\n\t\t\t0x4e, 0xc0, 0x00, 0x61,\n\t\t\t0x91, 0x49, 0x04, 0xf0,\n\t\t\t0x91, 0x48, 0x00, 0x89,\n\t\t\t0x11, 0xe0, 0xd9, 0xc0,\n\t\t\t0x00, 0x61, 0x98, 0x20,\n\t\t\t0x98, 0x24, 0x25, 0x11,\n\t\t\t0x24, 0xf1, 0x44, 0xc0,\n\t\t\t0x29, 0xe8, 0x95, 0x49,\n\t\t\t0x20, 0xf0, 0xcf, 0xc0,\n\t\t\t0x00, 0x61, 0x98, 0x20,\n\t\t\t0x98, 0x24, 0x25, 0x11,\n\t\t\t0x1a, 0xf1, 0x37, 0xc0,\n\t\t\t0x00, 0x61, 0x92, 0x49,\n\t\t\t0x16, 0xf1, 0x12, 0x48,\n\t\t\t0x00, 0x89, 0x2f, 0xc0,\n\t\t\t0x00, 0x19, 0x00, 0x89,\n\t\t\t0x2d, 0xc0, 0x01, 0x89,\n\t\t\t0x2d, 0xc0, 0x04, 0x19,\n\t\t\t0x81, 0x1b, 0x1c, 0xe8,\n\t\t\t0x2a, 0xc0, 0x14, 0x19,\n\t\t\t0x81, 0x1b, 0x18, 0xe8,\n\t\t\t0x21, 0xc0, 0x0c, 0xe8,\n\t\t\t0x1f, 0xc0, 0x12, 0x48,\n\t\t\t0x81, 0x1b, 0x12, 0xe8,\n\t\t\t0xae, 0xc3, 0x66, 0x71,\n\t\t\t0xae, 0xc0, 0x02, 0x99,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x96, 0x07, 0x13, 0xc4,\n\t\t\t0x84, 0x98, 0x00, 0x1b,\n\t\t\t0x86, 0x8b, 0x86, 0x73,\n\t\t\t0xbf, 0x49, 0xfe, 0xf1,\n\t\t\t0x80, 0x71, 0x82, 0x72,\n\t\t\t0x80, 0xff, 0x09, 0xc4,\n\t\t\t0x84, 0x98, 0x80, 0x99,\n\t\t\t0x82, 0x9a, 0x86, 0x8b,\n\t\t\t0x86, 0x73, 0xbf, 0x49,\n\t\t\t0xfe, 0xf1, 0x80, 0xff,\n\t\t\t0x08, 0xea, 0x30, 0xd4,\n\t\t\t0x10, 0xc0, 0x12, 0xe8,\n\t\t\t0x8a, 0xd3, 0x28, 0xe4,\n\t\t\t0x2c, 0xe4, 0x00, 0xd8,\n\t\t\t0x00, 0x00, 0x00, 0x00 };\n\n\t\trtl_pre_ram_code(tp, 0x8146, 0x7001, true);\n\t\tsram_write(tp, 0xb820, 0x0290);\n\t\tsram_write(tp, 0xa012, 0x0000);\n\t\tsram_write(tp, 0xa014, 0x2c04);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c07);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c0a);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c0d);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa240);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa104);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x292d);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8620);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa480);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2a2c);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8480);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa101);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2a36);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd056);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2223);\n\t\tsram_write(tp, 0xa01a, 0x0000);\n\t\tsram_write(tp, 0xa006, 0x0222);\n\t\tsram_write(tp, 0xa004, 0x0a35);\n\t\tsram_write(tp, 0xa002, 0x0a2b);\n\t\tsram_write(tp, 0xa000, 0xf92c);\n\t\tsram_write(tp, 0xb820, 0x0210);\n\t\trtl_post_ram_code(tp, 0x8146, true);\n\n\t\tr8153_wdt1_end(tp);\n\n\t\trtl_clear_bp(tp, MCU_TYPE_USB);\n\n\t\tgeneric_ocp_write(tp, 0xf800, 0xff, sizeof(usb_patch_b),\n\t\t\t\t  usb_patch_b, MCU_TYPE_USB);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc26, 0xa000);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc28, 0x180c);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc2a, 0x0506);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc2c, 0x04E0);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc2e, 0x11E4);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc30, 0x125C);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc32, 0x0232);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc34, 0x131E);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc36, 0x0098);\n\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_EN, 0x00FF);\n\n\t\trtl_clear_bp(tp, MCU_TYPE_PLA);\n\n\t\t/* Enable backup/restore of MACDBG. This is required after\n\t\t * clearing PLA break points and before applying the PLA\n\t\t * firmware.\n\t\t */\n\t\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_MACDBG_POST,\n\t\t\t\t    &ocp_data);\n\t\tif (!(ocp_data & DEBUG_OE)) {\n\t\t\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_MACDBG_PRE,\n\t\t\t\t\t     DEBUG_LTSSM);\n\t\t\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_MACDBG_POST,\n\t\t\t\t\t     DEBUG_LTSSM);\n\t\t}\n\n\t\tgeneric_ocp_write(tp, 0xf800, 0xff, sizeof(pla_patch_b),\n\t\t\t\t  pla_patch_b, MCU_TYPE_PLA);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc26, 0x8000);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc28, 0x1154);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2a, 0x1606);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2c, 0x155a);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2e, 0x0080);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc30, 0x033c);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc32, 0x01a0);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc34, 0x0794);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc36, 0x0000);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_EN, 0x007f);\n\n\t\t/* reset UPHY timer to 36 ms */\n\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_UPHY_TIMER, 36000 / 16);\n\n\t\trtl_reset_ocp_base(tp);\n\t} else if (tp->version == RTL_VER_05) {\n\t\tstatic u8 usb_patch_c[] = {\n\t\t\t0x08, 0xe0, 0x0a, 0xe0,\n\t\t\t0x14, 0xe0, 0x58, 0xe0,\n\t\t\t0x64, 0xe0, 0x79, 0xe0,\n\t\t\t0xab, 0xe0, 0xb6, 0xe0,\n\t\t\t0x02, 0xc5, 0x00, 0xbd,\n\t\t\t0x38, 0x3b, 0xdb, 0x49,\n\t\t\t0x04, 0xf1, 0x06, 0xc3,\n\t\t\t0x00, 0xbb, 0x5a, 0x02,\n\t\t\t0x05, 0xc4, 0x03, 0xc3,\n\t\t\t0x00, 0xbb, 0xa4, 0x04,\n\t\t\t0x7e, 0x02, 0x30, 0xd4,\n\t\t\t0x65, 0xc6, 0x66, 0x61,\n\t\t\t0x92, 0x49, 0x12, 0xf1,\n\t\t\t0x3e, 0xc0, 0x02, 0x61,\n\t\t\t0x97, 0x49, 0x05, 0xf0,\n\t\t\t0x3c, 0xc0, 0x00, 0x61,\n\t\t\t0x90, 0x49, 0x0a, 0xf1,\n\t\t\t0xca, 0x63, 0xb0, 0x49,\n\t\t\t0x09, 0xf1, 0xb1, 0x49,\n\t\t\t0x05, 0xf0, 0x32, 0xc0,\n\t\t\t0x00, 0x71, 0x9e, 0x49,\n\t\t\t0x03, 0xf1, 0xb0, 0x48,\n\t\t\t0x05, 0xe0, 0x30, 0x48,\n\t\t\t0xda, 0x61, 0x10, 0x48,\n\t\t\t0xda, 0x89, 0x4a, 0xc6,\n\t\t\t0xc0, 0x60, 0x85, 0x49,\n\t\t\t0x03, 0xf0, 0x31, 0x48,\n\t\t\t0x04, 0xe0, 0xb1, 0x48,\n\t\t\t0xb2, 0x48, 0x0f, 0xe0,\n\t\t\t0x30, 0x18, 0x1b, 0xc1,\n\t\t\t0x0f, 0xe8, 0x1a, 0xc6,\n\t\t\t0xc7, 0x65, 0xd0, 0x49,\n\t\t\t0x05, 0xf0, 0x32, 0x48,\n\t\t\t0x02, 0xc2, 0x00, 0xba,\n\t\t\t0x3e, 0x16, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0x48, 0x16,\n\t\t\t0x02, 0xc2, 0x00, 0xba,\n\t\t\t0x4a, 0x16, 0x02, 0xb4,\n\t\t\t0x09, 0xc2, 0x40, 0x99,\n\t\t\t0x0e, 0x48, 0x42, 0x98,\n\t\t\t0x42, 0x70, 0x8e, 0x49,\n\t\t\t0xfe, 0xf1, 0x02, 0xb0,\n\t\t\t0x80, 0xff, 0xc0, 0xd4,\n\t\t\t0xe4, 0x40, 0x20, 0xd4,\n\t\t\t0xca, 0xcf, 0x00, 0xcf,\n\t\t\t0x3c, 0xe4, 0x0c, 0xc0,\n\t\t\t0x00, 0x63, 0xb5, 0x49,\n\t\t\t0x09, 0xc0, 0x30, 0x18,\n\t\t\t0x06, 0xc1, 0xea, 0xef,\n\t\t\t0xf5, 0xc7, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0xd0, 0x10,\n\t\t\t0xe4, 0x4b, 0x00, 0xd8,\n\t\t\t0x14, 0xc3, 0x60, 0x61,\n\t\t\t0x90, 0x49, 0x06, 0xf0,\n\t\t\t0x11, 0xc3, 0x70, 0x61,\n\t\t\t0x12, 0x48, 0x70, 0x89,\n\t\t\t0x08, 0xe0, 0x0a, 0xc6,\n\t\t\t0xd4, 0x61, 0x93, 0x48,\n\t\t\t0xd4, 0x89, 0x02, 0xc1,\n\t\t\t0x00, 0xb9, 0x72, 0x17,\n\t\t\t0x02, 0xc1, 0x00, 0xb9,\n\t\t\t0x9c, 0x15, 0x00, 0xd8,\n\t\t\t0xef, 0xcf, 0x20, 0xd4,\n\t\t\t0x30, 0x18, 0xe7, 0xc1,\n\t\t\t0xcb, 0xef, 0x2b, 0xc5,\n\t\t\t0xa0, 0x77, 0x00, 0x1c,\n\t\t\t0xa0, 0x9c, 0x28, 0xc5,\n\t\t\t0xa0, 0x64, 0xc0, 0x48,\n\t\t\t0xc1, 0x48, 0xc2, 0x48,\n\t\t\t0xa0, 0x8c, 0xb1, 0x64,\n\t\t\t0xc0, 0x48, 0xb1, 0x8c,\n\t\t\t0x20, 0xc5, 0xa0, 0x64,\n\t\t\t0x40, 0x48, 0x41, 0x48,\n\t\t\t0xc2, 0x48, 0xa0, 0x8c,\n\t\t\t0x19, 0xc5, 0xa4, 0x64,\n\t\t\t0x44, 0x48, 0xa4, 0x8c,\n\t\t\t0xb1, 0x64, 0x40, 0x48,\n\t\t\t0xb1, 0x8c, 0x14, 0xc4,\n\t\t\t0x80, 0x73, 0x13, 0xc4,\n\t\t\t0x82, 0x9b, 0x11, 0x1b,\n\t\t\t0x80, 0x9b, 0x0c, 0xc5,\n\t\t\t0xa0, 0x64, 0x40, 0x48,\n\t\t\t0x41, 0x48, 0x42, 0x48,\n\t\t\t0xa0, 0x8c, 0x05, 0xc5,\n\t\t\t0xa0, 0x9f, 0x02, 0xc5,\n\t\t\t0x00, 0xbd, 0x6c, 0x3a,\n\t\t\t0x1e, 0xfc, 0x10, 0xd8,\n\t\t\t0x86, 0xd4, 0xf8, 0xcb,\n\t\t\t0x20, 0xe4, 0x0a, 0xc0,\n\t\t\t0x16, 0x61, 0x91, 0x48,\n\t\t\t0x16, 0x89, 0x07, 0xc0,\n\t\t\t0x11, 0x19, 0x0c, 0x89,\n\t\t\t0x02, 0xc1, 0x00, 0xb9,\n\t\t\t0x02, 0x06, 0x00, 0xd4,\n\t\t\t0x40, 0xb4, 0xfe, 0xc0,\n\t\t\t0x16, 0x61, 0x91, 0x48,\n\t\t\t0x16, 0x89, 0xfb, 0xc0,\n\t\t\t0x11, 0x19, 0x0c, 0x89,\n\t\t\t0x02, 0xc1, 0x00, 0xb9,\n\t\t\t0xd2, 0x05, 0x00, 0x00 };\n\t\tstatic u8 pla_patch_c[] = {\n\t\t\t0x5d, 0xe0, 0x07, 0xe0,\n\t\t\t0x0f, 0xe0, 0x5a, 0xe0,\n\t\t\t0x59, 0xe0, 0x1f, 0xe0,\n\t\t\t0x57, 0xe0, 0x3e, 0xe1,\n\t\t\t0x08, 0xc2, 0x40, 0x73,\n\t\t\t0x3a, 0x48, 0x40, 0x9b,\n\t\t\t0x06, 0xff, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0xcc, 0x17,\n\t\t\t0x1e, 0xfc, 0x2c, 0x75,\n\t\t\t0xdc, 0x21, 0xbc, 0x25,\n\t\t\t0x04, 0x13, 0x0b, 0xf0,\n\t\t\t0x03, 0x13, 0x09, 0xf0,\n\t\t\t0x02, 0x13, 0x07, 0xf0,\n\t\t\t0x01, 0x13, 0x05, 0xf0,\n\t\t\t0x08, 0x13, 0x03, 0xf0,\n\t\t\t0x04, 0xc3, 0x00, 0xbb,\n\t\t\t0x03, 0xc3, 0x00, 0xbb,\n\t\t\t0x50, 0x17, 0x3a, 0x17,\n\t\t\t0x33, 0xc5, 0xa0, 0x74,\n\t\t\t0xc0, 0x49, 0x1f, 0xf0,\n\t\t\t0x30, 0xc5, 0xa0, 0x73,\n\t\t\t0x00, 0x13, 0x04, 0xf1,\n\t\t\t0xa2, 0x73, 0x00, 0x13,\n\t\t\t0x14, 0xf0, 0x28, 0xc5,\n\t\t\t0xa0, 0x74, 0xc8, 0x49,\n\t\t\t0x1b, 0xf1, 0x26, 0xc5,\n\t\t\t0xa0, 0x76, 0xa2, 0x74,\n\t\t\t0x01, 0x06, 0x20, 0x37,\n\t\t\t0xa0, 0x9e, 0xa2, 0x9c,\n\t\t\t0x1e, 0xc5, 0xa2, 0x73,\n\t\t\t0x23, 0x40, 0x10, 0xf8,\n\t\t\t0x04, 0xf3, 0xa0, 0x73,\n\t\t\t0x33, 0x40, 0x0c, 0xf8,\n\t\t\t0x15, 0xc5, 0xa0, 0x74,\n\t\t\t0x41, 0x48, 0xa0, 0x9c,\n\t\t\t0x14, 0xc5, 0xa0, 0x76,\n\t\t\t0x62, 0x48, 0xe0, 0x48,\n\t\t\t0xa0, 0x9e, 0x10, 0xc6,\n\t\t\t0x00, 0xbe, 0x0a, 0xc5,\n\t\t\t0xa0, 0x74, 0x48, 0x48,\n\t\t\t0xa0, 0x9c, 0x0b, 0xc5,\n\t\t\t0x20, 0x1e, 0xa0, 0x9e,\n\t\t\t0xe5, 0x48, 0xa0, 0x9e,\n\t\t\t0xf0, 0xe7, 0xbc, 0xc0,\n\t\t\t0xc8, 0xd2, 0xcc, 0xd2,\n\t\t\t0x28, 0xe4, 0xfa, 0x01,\n\t\t\t0xf0, 0xc0, 0x18, 0x89,\n\t\t\t0x74, 0xc0, 0xcd, 0xe8,\n\t\t\t0x80, 0x76, 0x00, 0x1d,\n\t\t\t0x6e, 0xc3, 0x66, 0x62,\n\t\t\t0xa0, 0x49, 0x06, 0xf0,\n\t\t\t0x64, 0xc0, 0x02, 0x71,\n\t\t\t0x60, 0x99, 0x62, 0xc1,\n\t\t\t0x03, 0xe0, 0x5f, 0xc0,\n\t\t\t0x60, 0xc1, 0x02, 0x99,\n\t\t\t0x00, 0x61, 0x0f, 0x1b,\n\t\t\t0x59, 0x41, 0x03, 0x13,\n\t\t\t0x18, 0xf1, 0xe4, 0x49,\n\t\t\t0x20, 0xf1, 0xe5, 0x49,\n\t\t\t0x1e, 0xf0, 0x59, 0xc6,\n\t\t\t0xd0, 0x73, 0xb7, 0x49,\n\t\t\t0x08, 0xf0, 0x01, 0x0b,\n\t\t\t0x80, 0x13, 0x03, 0xf0,\n\t\t\t0xd0, 0x8b, 0x03, 0xe0,\n\t\t\t0x3f, 0x48, 0xd0, 0x9b,\n\t\t\t0x51, 0xc0, 0x10, 0x1a,\n\t\t\t0x84, 0x1b, 0xb1, 0xe8,\n\t\t\t0x4b, 0xc2, 0x40, 0x63,\n\t\t\t0x30, 0x48, 0x0a, 0xe0,\n\t\t\t0xe5, 0x49, 0x09, 0xf0,\n\t\t\t0x47, 0xc0, 0x00, 0x1a,\n\t\t\t0x84, 0x1b, 0xa7, 0xe8,\n\t\t\t0x41, 0xc2, 0x40, 0x63,\n\t\t\t0xb0, 0x48, 0x40, 0x8b,\n\t\t\t0x67, 0x11, 0x3f, 0xf1,\n\t\t\t0x69, 0x33, 0x32, 0xc0,\n\t\t\t0x28, 0x40, 0xd2, 0xf1,\n\t\t\t0x33, 0xc0, 0x00, 0x19,\n\t\t\t0x81, 0x1b, 0x99, 0xe8,\n\t\t\t0x30, 0xc0, 0x04, 0x1a,\n\t\t\t0x84, 0x1b, 0x95, 0xe8,\n\t\t\t0x8a, 0xe8, 0xa3, 0x49,\n\t\t\t0xfe, 0xf0, 0x2a, 0xc0,\n\t\t\t0x86, 0xe8, 0xa1, 0x48,\n\t\t\t0x84, 0x1b, 0x8d, 0xe8,\n\t\t\t0x00, 0x1d, 0x69, 0x33,\n\t\t\t0x00, 0x1e, 0x01, 0x06,\n\t\t\t0xff, 0x18, 0x30, 0x40,\n\t\t\t0xfd, 0xf1, 0x1f, 0xc0,\n\t\t\t0x00, 0x76, 0x2e, 0x40,\n\t\t\t0xf7, 0xf1, 0x21, 0x48,\n\t\t\t0x19, 0xc0, 0x84, 0x1b,\n\t\t\t0x7e, 0xe8, 0x74, 0x08,\n\t\t\t0x72, 0xe8, 0xa1, 0x49,\n\t\t\t0xfd, 0xf0, 0x11, 0xc0,\n\t\t\t0x00, 0x1a, 0x84, 0x1b,\n\t\t\t0x76, 0xe8, 0x6b, 0xe8,\n\t\t\t0xa5, 0x49, 0xfe, 0xf0,\n\t\t\t0x09, 0xc0, 0x01, 0x19,\n\t\t\t0x81, 0x1b, 0x6f, 0xe8,\n\t\t\t0x5a, 0xe0, 0xb8, 0x0b,\n\t\t\t0x50, 0xe8, 0x83, 0x00,\n\t\t\t0x82, 0x00, 0x20, 0xb4,\n\t\t\t0x10, 0xd8, 0x84, 0xd4,\n\t\t\t0x88, 0xd3, 0x10, 0xe0,\n\t\t\t0x00, 0xd8, 0x24, 0xd4,\n\t\t\t0xf9, 0xc0, 0x57, 0xe8,\n\t\t\t0x48, 0x33, 0xf3, 0xc0,\n\t\t\t0x00, 0x61, 0x6a, 0xc0,\n\t\t\t0x47, 0x11, 0x03, 0xf0,\n\t\t\t0x57, 0x11, 0x05, 0xf1,\n\t\t\t0x00, 0x61, 0x17, 0x48,\n\t\t\t0x00, 0x89, 0x41, 0xe0,\n\t\t\t0x9c, 0x20, 0x9c, 0x24,\n\t\t\t0xd0, 0x49, 0x09, 0xf0,\n\t\t\t0x04, 0x11, 0x07, 0xf1,\n\t\t\t0x00, 0x61, 0x97, 0x49,\n\t\t\t0x38, 0xf0, 0x97, 0x48,\n\t\t\t0x00, 0x89, 0x2b, 0xe0,\n\t\t\t0x00, 0x11, 0x05, 0xf1,\n\t\t\t0x00, 0x61, 0x92, 0x48,\n\t\t\t0x00, 0x89, 0x2f, 0xe0,\n\t\t\t0x06, 0x11, 0x05, 0xf1,\n\t\t\t0x00, 0x61, 0x11, 0x48,\n\t\t\t0x00, 0x89, 0x29, 0xe0,\n\t\t\t0x05, 0x11, 0x0f, 0xf1,\n\t\t\t0x00, 0x61, 0x93, 0x49,\n\t\t\t0x1a, 0xf1, 0x91, 0x49,\n\t\t\t0x0a, 0xf0, 0x91, 0x48,\n\t\t\t0x00, 0x89, 0x0f, 0xe0,\n\t\t\t0xc6, 0xc0, 0x00, 0x61,\n\t\t\t0x98, 0x20, 0x98, 0x24,\n\t\t\t0x25, 0x11, 0x80, 0xff,\n\t\t\t0xfa, 0xef, 0x17, 0xf1,\n\t\t\t0x38, 0xc0, 0x1f, 0xe8,\n\t\t\t0x95, 0x49, 0x13, 0xf0,\n\t\t\t0xf4, 0xef, 0x11, 0xf1,\n\t\t\t0x31, 0xc0, 0x00, 0x61,\n\t\t\t0x92, 0x49, 0x0d, 0xf1,\n\t\t\t0x12, 0x48, 0x00, 0x89,\n\t\t\t0x29, 0xc0, 0x00, 0x19,\n\t\t\t0x00, 0x89, 0x27, 0xc0,\n\t\t\t0x01, 0x89, 0x23, 0xc0,\n\t\t\t0x0e, 0xe8, 0x12, 0x48,\n\t\t\t0x81, 0x1b, 0x15, 0xe8,\n\t\t\t0xae, 0xc3, 0x66, 0x62,\n\t\t\t0xa0, 0x49, 0x04, 0xf0,\n\t\t\t0x64, 0x71, 0xa3, 0xc0,\n\t\t\t0x02, 0x99, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0xd6, 0x07,\n\t\t\t0x13, 0xc4, 0x84, 0x98,\n\t\t\t0x00, 0x1b, 0x86, 0x8b,\n\t\t\t0x86, 0x73, 0xbf, 0x49,\n\t\t\t0xfe, 0xf1, 0x80, 0x71,\n\t\t\t0x82, 0x72, 0x80, 0xff,\n\t\t\t0x09, 0xc4, 0x84, 0x98,\n\t\t\t0x80, 0x99, 0x82, 0x9a,\n\t\t\t0x86, 0x8b, 0x86, 0x73,\n\t\t\t0xbf, 0x49, 0xfe, 0xf1,\n\t\t\t0x80, 0xff, 0x08, 0xea,\n\t\t\t0x30, 0xd4, 0x10, 0xc0,\n\t\t\t0x12, 0xe8, 0x8a, 0xd3,\n\t\t\t0x00, 0xd8, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0xe0, 0x08 };\n\n\t\trtl_pre_ram_code(tp, 0x8146, 0x7001, true);\n\t\tsram_write(tp, 0xb820, 0x0290);\n\t\tsram_write(tp, 0xa012, 0x0000);\n\t\tsram_write(tp, 0xa014, 0x2c04);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c07);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c0a);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c0d);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa240);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa104);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x292d);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8620);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa480);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2a2c);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x8480);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa101);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2a36);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xd056);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2223);\n\t\tsram_write(tp, 0xa01a, 0x0000);\n\t\tsram_write(tp, 0xa006, 0x0222);\n\t\tsram_write(tp, 0xa004, 0x0a35);\n\t\tsram_write(tp, 0xa002, 0x0a2b);\n\t\tsram_write(tp, 0xa000, 0xf92c);\n\t\tsram_write(tp, 0xb820, 0x0210);\n\t\trtl_post_ram_code(tp, 0x8146, true);\n\n\t\tr8153_wdt1_end(tp);\n\n\t\tocp_word_clr_bits(tp, MCU_TYPE_USB, USB_FW_FIX_EN0,\n\t\t\t\t  FW_FIX_SUSPEND);\n\n\t\trtl_clear_bp(tp, MCU_TYPE_USB);\n\n\t\tgeneric_ocp_write(tp, 0xf800, 0xff, sizeof(usb_patch_c),\n\t\t\t\t  usb_patch_c, MCU_TYPE_USB);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc26, 0xa000);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc28, 0x3b34);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc2a, 0x027c);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc2c, 0x15de);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc2e, 0x10ce);\n\t\tret = ocp_read_byte(tp, MCU_TYPE_USB, USB_CSTMR, &ocp_data);\n\t\tif (ocp_data & FORCE_SUPER)\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc30, 0x1578);\n\t\telse\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc30, 0x1adc);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc32, 0x3a28);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc34, 0x05f8);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc36, 0x05c8);\n\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_EN, 0x00ff);\n\n\t\trtl_clear_bp(tp, MCU_TYPE_PLA);\n\n\t\tgeneric_ocp_write(tp, 0xf800, 0xff, sizeof(pla_patch_c),\n\t\t\t\t  pla_patch_c, MCU_TYPE_PLA);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc26, 0x8000);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc28, 0x1306);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2a, 0x17ca);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2c, 0x171e);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2e, 0x0000);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc30, 0x0000);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc32, 0x01b4);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc34, 0x07d4);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc36, 0x0894);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_EN, 0x00e6);\n\n\t\t/* reset UPHY timer to 36 ms */\n\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_UPHY_TIMER, 36000 / 16);\n\n\t\t/* enable U3P3 check, set the counter to 4 */\n\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_EXTRA_STATUS,\n\t\t\t       U3P3_CHECK_EN | 4);\n\n\t\tocp_word_set_bits(tp, MCU_TYPE_USB, USB_FW_FIX_EN0,\n\t\t\t\t  FW_FIX_SUSPEND);\n\n\t\tocp_byte_set_bits(tp, MCU_TYPE_USB, USB_USB2PHY,\n\t\t\t\t  USB2PHY_L1 | USB2PHY_SUSPEND);\n\n\t\trtl_reset_ocp_base(tp);\n\t} else if (tp->version == RTL_VER_06) {\n\t\tstatic u8 usb_patch_d[] = {\n\t\t\t0x08, 0xe0, 0x0e, 0xe0,\n\t\t\t0x11, 0xe0, 0x24, 0xe0,\n\t\t\t0x2b, 0xe0, 0x33, 0xe0,\n\t\t\t0x3a, 0xe0, 0x3c, 0xe0,\n\t\t\t0x1e, 0xc3, 0x70, 0x61,\n\t\t\t0x12, 0x48, 0x70, 0x89,\n\t\t\t0x02, 0xc3, 0x00, 0xbb,\n\t\t\t0x02, 0x17, 0x32, 0x19,\n\t\t\t0x02, 0xc3, 0x00, 0xbb,\n\t\t\t0x44, 0x14, 0x30, 0x18,\n\t\t\t0x11, 0xc1, 0x05, 0xe8,\n\t\t\t0x10, 0xc6, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0x94, 0x17,\n\t\t\t0x02, 0xb4, 0x09, 0xc2,\n\t\t\t0x40, 0x99, 0x0e, 0x48,\n\t\t\t0x42, 0x98, 0x42, 0x70,\n\t\t\t0x8e, 0x49, 0xfe, 0xf1,\n\t\t\t0x02, 0xb0, 0x80, 0xff,\n\t\t\t0xc0, 0xd4, 0xe4, 0x40,\n\t\t\t0x20, 0xd4, 0x30, 0x18,\n\t\t\t0x06, 0xc1, 0xf1, 0xef,\n\t\t\t0xfc, 0xc7, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x38, 0x12,\n\t\t\t0xe4, 0x4b, 0x0c, 0x61,\n\t\t\t0x92, 0x48, 0x93, 0x48,\n\t\t\t0x95, 0x48, 0x96, 0x48,\n\t\t\t0x0c, 0x89, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x0e, 0x06,\n\t\t\t0x30, 0x18, 0xf5, 0xc1,\n\t\t\t0xe0, 0xef, 0x04, 0xc5,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0x76, 0x3c, 0x1e, 0xfc,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x00, 0x00, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x00, 0x00 };\n\t\tstatic u8 pla_patch_d[] = {\n\t\t\t0x03, 0xe0, 0x16, 0xe0,\n\t\t\t0x30, 0xe0, 0x12, 0xc2,\n\t\t\t0x40, 0x73, 0xb0, 0x49,\n\t\t\t0x08, 0xf0, 0xb8, 0x49,\n\t\t\t0x06, 0xf0, 0xb8, 0x48,\n\t\t\t0x40, 0x9b, 0x0b, 0xc2,\n\t\t\t0x40, 0x76, 0x05, 0xe0,\n\t\t\t0x02, 0x61, 0x02, 0xc3,\n\t\t\t0x00, 0xbb, 0x54, 0x08,\n\t\t\t0x02, 0xc3, 0x00, 0xbb,\n\t\t\t0x64, 0x08, 0x98, 0xd3,\n\t\t\t0x1e, 0xfc, 0xfe, 0xc0,\n\t\t\t0x02, 0x62, 0xa0, 0x48,\n\t\t\t0x02, 0x8a, 0x00, 0x72,\n\t\t\t0xa0, 0x49, 0x11, 0xf0,\n\t\t\t0x13, 0xc1, 0x20, 0x62,\n\t\t\t0x2e, 0x21, 0x2f, 0x25,\n\t\t\t0x00, 0x71, 0x9f, 0x24,\n\t\t\t0x0a, 0x40, 0x09, 0xf0,\n\t\t\t0x00, 0x71, 0x18, 0x48,\n\t\t\t0xa0, 0x49, 0x03, 0xf1,\n\t\t\t0x9f, 0x48, 0x02, 0xe0,\n\t\t\t0x1f, 0x48, 0x00, 0x99,\n\t\t\t0x02, 0xc2, 0x00, 0xba,\n\t\t\t0xac, 0x0c, 0x08, 0xe9,\n\t\t\t0x36, 0xc0, 0x00, 0x61,\n\t\t\t0x9c, 0x20, 0x9c, 0x24,\n\t\t\t0x33, 0xc0, 0x07, 0x11,\n\t\t\t0x05, 0xf1, 0x00, 0x61,\n\t\t\t0x17, 0x48, 0x00, 0x89,\n\t\t\t0x0d, 0xe0, 0x04, 0x11,\n\t\t\t0x0b, 0xf1, 0x00, 0x61,\n\t\t\t0x97, 0x49, 0x08, 0xf0,\n\t\t\t0x97, 0x48, 0x00, 0x89,\n\t\t\t0x23, 0xc0, 0x0e, 0xe8,\n\t\t\t0x12, 0x48, 0x81, 0x1b,\n\t\t\t0x15, 0xe8, 0x1f, 0xc0,\n\t\t\t0x00, 0x61, 0x67, 0x11,\n\t\t\t0x04, 0xf0, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x42, 0x09,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x90, 0x08, 0x13, 0xc4,\n\t\t\t0x84, 0x98, 0x00, 0x1b,\n\t\t\t0x86, 0x8b, 0x86, 0x73,\n\t\t\t0xbf, 0x49, 0xfe, 0xf1,\n\t\t\t0x80, 0x71, 0x82, 0x72,\n\t\t\t0x80, 0xff, 0x09, 0xc4,\n\t\t\t0x84, 0x98, 0x80, 0x99,\n\t\t\t0x82, 0x9a, 0x86, 0x8b,\n\t\t\t0x86, 0x73, 0xbf, 0x49,\n\t\t\t0xfe, 0xf1, 0x80, 0xff,\n\t\t\t0x08, 0xea, 0x30, 0xd4,\n\t\t\t0x50, 0xe8, 0x8a, 0xd3 };\n\n\t\trtl_pre_ram_code(tp, 0x8146, 0x7003, true);\n\t\tsram_write(tp, 0xb820, 0x0290);\n\t\tsram_write(tp, 0xa012, 0x0000);\n\t\tsram_write(tp, 0xa014, 0x2c04);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c07);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c07);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2c07);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa240);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0xa104);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xb438, 0x2944);\n\t\tsram_write(tp, 0xa01a, 0x0000);\n\t\tsram_write(tp, 0xa006, 0x0fff);\n\t\tsram_write(tp, 0xa004, 0x0fff);\n\t\tsram_write(tp, 0xa002, 0x0fff);\n\t\tsram_write(tp, 0xa000, 0x1943);\n\t\tsram_write(tp, 0xb820, 0x0210);\n\t\trtl_post_ram_code(tp, 0x8146, true);\n\n\t\trtl_clear_bp(tp, MCU_TYPE_USB);\n\n\t\tgeneric_ocp_write(tp, 0xf800, 0xff, sizeof(usb_patch_d),\n\t\t\t\t  usb_patch_d, MCU_TYPE_USB);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc26, 0xa000);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc28, 0x16de);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc2a, 0x1442);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc2c, 0x1792);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc2e, 0x1236);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc30, 0x0606);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc32, 0x3C74);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc34, 0x0000);\n\t\tocp_write_word(tp, MCU_TYPE_USB, 0xfc36, 0x0000);\n\t\tret = ocp_read_byte(tp, MCU_TYPE_USB, USB_CSTMR, &ocp_data);\n\t\tif (ocp_data & FORCE_SUPER)\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_EN, 0x003f);\n\t\telse\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_EN, 0x003e);\n\n\t\trtl_clear_bp(tp, MCU_TYPE_PLA);\n\n\t\tgeneric_ocp_write(tp, 0xf800, 0xff, sizeof(pla_patch_d),\n\t\t\t\t  pla_patch_d, MCU_TYPE_PLA);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc26, 0x8000);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc28, 0x0852);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2a, 0x0c92);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2c, 0x088c);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc2e, 0x0000);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc30, 0x0000);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc32, 0x0000);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc34, 0x0000);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, 0xfc36, 0x0000);\n\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_EN, 0x0007);\n\n\t\tocp_byte_set_bits(tp, MCU_TYPE_USB, USB_USB2PHY,\n\t\t\t\t  USB2PHY_L1 | USB2PHY_SUSPEND);\n\n\t\tocp_word_set_bits(tp, MCU_TYPE_USB, USB_FW_FIX_EN1,\n\t\t\t\t  FW_IP_RESET_EN);\n\n\t\trtl_reset_ocp_base(tp);\n\t}\n\n\trtl_reset_ocp_base(tp);\n}\n\nstatic void r8153b_firmware(struct r8152 *tp)\n{\n\tu32 ocp_data;\n\tint ret;\n\n\tif (tp->version == RTL_VER_09) {\n\t\tstatic u8 usb_patch2_b[] = {\n\t\t\t0x10, 0xe0, 0x5b, 0xe0,\n\t\t\t0x7c, 0xe0, 0x9c, 0xe0,\n\t\t\t0xb0, 0xe0, 0xc9, 0xe0,\n\t\t\t0xea, 0xe0, 0x46, 0xe1,\n\t\t\t0x62, 0xe1, 0x65, 0xe1,\n\t\t\t0x7d, 0xe1, 0x8f, 0xe1,\n\t\t\t0x97, 0xe1, 0xf5, 0xe1,\n\t\t\t0x11, 0xe2, 0x22, 0xe2,\n\t\t\t0x43, 0xc4, 0x80, 0x63,\n\t\t\t0xb2, 0x49, 0x05, 0xf0,\n\t\t\t0x41, 0xc4, 0x02, 0xc3,\n\t\t\t0x00, 0xbb, 0x88, 0x3d,\n\t\t\t0x64, 0xc4, 0x3b, 0xc3,\n\t\t\t0x84, 0x9b, 0x00, 0x1b,\n\t\t\t0x86, 0x8b, 0x86, 0x73,\n\t\t\t0xbf, 0x49, 0xfe, 0xf1,\n\t\t\t0x80, 0x73, 0x35, 0xc2,\n\t\t\t0x40, 0x9b, 0x34, 0xc3,\n\t\t\t0x80, 0x9b, 0x83, 0x1b,\n\t\t\t0x86, 0x8b, 0x86, 0x73,\n\t\t\t0xbf, 0x49, 0xfe, 0xf1,\n\t\t\t0x2e, 0xc3, 0x84, 0x9b,\n\t\t\t0x00, 0x1b, 0x86, 0x8b,\n\t\t\t0x86, 0x73, 0xbf, 0x49,\n\t\t\t0xfe, 0xf1, 0x80, 0x73,\n\t\t\t0xba, 0x48, 0xbb, 0x48,\n\t\t\t0x80, 0x9b, 0x83, 0x1b,\n\t\t\t0x86, 0x8b, 0x86, 0x73,\n\t\t\t0xbf, 0x49, 0xfe, 0xf1,\n\t\t\t0x20, 0xc3, 0x84, 0x9b,\n\t\t\t0x1f, 0xc3, 0x80, 0x9b,\n\t\t\t0x83, 0x1b, 0x86, 0x8b,\n\t\t\t0x86, 0x73, 0xbf, 0x49,\n\t\t\t0xfe, 0xf1, 0x11, 0xc3,\n\t\t\t0x84, 0x9b, 0x40, 0x73,\n\t\t\t0x80, 0x9b, 0x83, 0x1b,\n\t\t\t0x86, 0x8b, 0x86, 0x73,\n\t\t\t0xbf, 0x49, 0xfe, 0xf1,\n\t\t\t0x0d, 0xc4, 0x80, 0x73,\n\t\t\t0xbb, 0x48, 0x80, 0x9b,\n\t\t\t0x02, 0xc3, 0x00, 0xbb,\n\t\t\t0x06, 0x3e, 0xee, 0xcf,\n\t\t\t0x6c, 0xe8, 0xe0, 0xcb,\n\t\t\t0x2e, 0xc3, 0x00, 0xa0,\n\t\t\t0x08, 0xb4, 0x4a, 0xd8,\n\t\t\t0x00, 0xb4, 0x00, 0x92,\n\t\t\t0x1c, 0xc6, 0xc0, 0x61,\n\t\t\t0x04, 0x11, 0x15, 0xf1,\n\t\t\t0x19, 0xc6, 0xc0, 0x61,\n\t\t\t0x9c, 0x20, 0x9c, 0x24,\n\t\t\t0x09, 0x11, 0x0f, 0xf1,\n\t\t\t0x14, 0xc6, 0x01, 0x19,\n\t\t\t0xc0, 0x89, 0x13, 0xc1,\n\t\t\t0x13, 0xc6, 0x24, 0x9e,\n\t\t\t0x00, 0x1e, 0x26, 0x8e,\n\t\t\t0x26, 0x76, 0xef, 0x49,\n\t\t\t0xfe, 0xf1, 0x22, 0x76,\n\t\t\t0x08, 0xc1, 0x22, 0x9e,\n\t\t\t0x07, 0xc6, 0x02, 0xc1,\n\t\t\t0x00, 0xb9, 0x8c, 0x08,\n\t\t\t0x18, 0xb4, 0x4a, 0xb4,\n\t\t\t0x90, 0xcc, 0x80, 0xd4,\n\t\t\t0x08, 0xdc, 0x10, 0xe8,\n\t\t\t0x1f, 0xc0, 0x00, 0x75,\n\t\t\t0xd1, 0x49, 0x15, 0xf0,\n\t\t\t0x19, 0xc7, 0x17, 0xc2,\n\t\t\t0xec, 0x9a, 0x00, 0x19,\n\t\t\t0xee, 0x89, 0xee, 0x71,\n\t\t\t0x9f, 0x49, 0xfe, 0xf1,\n\t\t\t0xea, 0x71, 0x9f, 0x49,\n\t\t\t0x0a, 0xf0, 0x11, 0xc2,\n\t\t\t0xec, 0x9a, 0x00, 0x19,\n\t\t\t0xe8, 0x99, 0x81, 0x19,\n\t\t\t0xee, 0x89, 0xee, 0x71,\n\t\t\t0x9f, 0x49, 0xfe, 0xf1,\n\t\t\t0x06, 0xc3, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0xf0, 0x1d,\n\t\t\t0x4c, 0xe8, 0x00, 0xdc,\n\t\t\t0x00, 0xd4, 0x34, 0xd3,\n\t\t\t0x24, 0xe4, 0x7b, 0xc0,\n\t\t\t0x00, 0x75, 0xd1, 0x49,\n\t\t\t0x0d, 0xf0, 0x74, 0xc0,\n\t\t\t0x74, 0xc5, 0x00, 0x1e,\n\t\t\t0x08, 0x9e, 0x72, 0xc6,\n\t\t\t0x0a, 0x9e, 0x0c, 0x9d,\n\t\t\t0x8f, 0x1c, 0x0e, 0x8c,\n\t\t\t0x0e, 0x74, 0xcf, 0x49,\n\t\t\t0xfe, 0xf1, 0x04, 0xc0,\n\t\t\t0x02, 0xc1, 0x00, 0xb9,\n\t\t\t0xc4, 0x16, 0x20, 0xd4,\n\t\t\t0x66, 0xc0, 0x00, 0x75,\n\t\t\t0xd1, 0x48, 0x00, 0x9d,\n\t\t\t0xe3, 0xc7, 0x5f, 0xc2,\n\t\t\t0xec, 0x9a, 0x00, 0x19,\n\t\t\t0xe8, 0x9a, 0x81, 0x19,\n\t\t\t0xee, 0x89, 0xee, 0x71,\n\t\t\t0x9f, 0x49, 0xfe, 0xf1,\n\t\t\t0x2c, 0xc1, 0xec, 0x99,\n\t\t\t0x81, 0x19, 0xee, 0x89,\n\t\t\t0xee, 0x71, 0x9f, 0x49,\n\t\t\t0xfe, 0xf1, 0x04, 0xc3,\n\t\t\t0x02, 0xc2, 0x00, 0xba,\n\t\t\t0x96, 0x1c, 0xc0, 0xd4,\n\t\t\t0xc0, 0x88, 0x1e, 0xc6,\n\t\t\t0xc0, 0x70, 0x8f, 0x49,\n\t\t\t0x0e, 0xf0, 0x8f, 0x48,\n\t\t\t0x1b, 0xc6, 0xca, 0x98,\n\t\t\t0x11, 0x18, 0xc8, 0x98,\n\t\t\t0x16, 0xc0, 0xcc, 0x98,\n\t\t\t0x8f, 0x18, 0xce, 0x88,\n\t\t\t0xce, 0x70, 0x8f, 0x49,\n\t\t\t0xfe, 0xf1, 0x0b, 0xe0,\n\t\t\t0x36, 0xc6, 0x00, 0x18,\n\t\t\t0xc8, 0x98, 0x0b, 0xc0,\n\t\t\t0xcc, 0x98, 0x81, 0x18,\n\t\t\t0xce, 0x88, 0xce, 0x70,\n\t\t\t0x8f, 0x49, 0xfe, 0xf1,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0xf2, 0x19, 0x40, 0xd3,\n\t\t\t0x20, 0xe4, 0x00, 0xdc,\n\t\t\t0x90, 0x49, 0x1f, 0xf0,\n\t\t\t0x29, 0xc0, 0x01, 0x66,\n\t\t\t0x05, 0x16, 0x3f, 0xf0,\n\t\t\t0x25, 0x16, 0x45, 0xf0,\n\t\t\t0x09, 0x16, 0x23, 0xf0,\n\t\t\t0x16, 0xe0, 0x1a, 0xc2,\n\t\t\t0x40, 0x76, 0xe1, 0x48,\n\t\t\t0x40, 0x9e, 0x17, 0xc2,\n\t\t\t0x00, 0x1e, 0x48, 0x9e,\n\t\t\t0xec, 0xc6, 0x4c, 0x9e,\n\t\t\t0x81, 0x1e, 0x4e, 0x8e,\n\t\t\t0x4e, 0x76, 0xef, 0x49,\n\t\t\t0xfe, 0xf1, 0x0b, 0xc6,\n\t\t\t0x4c, 0x9e, 0x81, 0x1e,\n\t\t\t0x4e, 0x8e, 0x4e, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0x90, 0x49, 0x02, 0xc7,\n\t\t\t0x00, 0xbf, 0xe2, 0x27,\n\t\t\t0x24, 0xe4, 0x34, 0xd3,\n\t\t\t0x00, 0xdc, 0x00, 0xdc,\n\t\t\t0x24, 0xe4, 0x80, 0x02,\n\t\t\t0x34, 0xd3, 0xf8, 0xc7,\n\t\t\t0xf9, 0xc2, 0x40, 0x76,\n\t\t\t0xe1, 0x48, 0x40, 0x9e,\n\t\t\t0xf6, 0xc2, 0x00, 0x1e,\n\t\t\t0x48, 0x9e, 0xcb, 0xc6,\n\t\t\t0x4c, 0x9e, 0x81, 0x1e,\n\t\t\t0x4e, 0x8e, 0x4e, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0xea, 0xc6, 0x4c, 0x9e,\n\t\t\t0x81, 0x1e, 0x4e, 0x8e,\n\t\t\t0x4e, 0x76, 0xef, 0x49,\n\t\t\t0xfe, 0xf1, 0xdf, 0xe7,\n\t\t\t0x40, 0xd4, 0x00, 0x00,\n\t\t\t0xfe, 0xc2, 0x4c, 0x73,\n\t\t\t0xbf, 0x49, 0xc4, 0xf0,\n\t\t\t0x06, 0x76, 0xfa, 0xc2,\n\t\t\t0x32, 0x40, 0xc0, 0xf0,\n\t\t\t0xde, 0xc6, 0xc0, 0x75,\n\t\t\t0xd1, 0x49, 0xd1, 0xf0,\n\t\t\t0xd7, 0xc0, 0xd7, 0xc6,\n\t\t\t0x0c, 0x9e, 0x00, 0x1e,\n\t\t\t0x08, 0x9e, 0xd4, 0xc6,\n\t\t\t0x0a, 0x9e, 0x8f, 0x1e,\n\t\t\t0x0e, 0x8e, 0x0e, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0xc4, 0xe7, 0x1a, 0xc6,\n\t\t\t0xc0, 0x67, 0xf0, 0x49,\n\t\t\t0x13, 0xf0, 0xf0, 0x48,\n\t\t\t0xc0, 0x8f, 0xc2, 0x77,\n\t\t\t0x14, 0xc1, 0x14, 0xc6,\n\t\t\t0x24, 0x9e, 0x22, 0x9f,\n\t\t\t0x8c, 0x1e, 0x26, 0x8e,\n\t\t\t0x26, 0x76, 0xef, 0x49,\n\t\t\t0xfe, 0xf1, 0xfb, 0x49,\n\t\t\t0x05, 0xf0, 0x07, 0xc6,\n\t\t\t0xc0, 0x61, 0x10, 0x48,\n\t\t\t0xc0, 0x89, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x7e, 0x36,\n\t\t\t0x6c, 0xb4, 0x90, 0xcc,\n\t\t\t0x08, 0xdc, 0x10, 0xe8,\n\t\t\t0x1e, 0x89, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0xfa, 0x12,\n\t\t\t0x18, 0xc0, 0x00, 0x65,\n\t\t\t0xd1, 0x49, 0x0d, 0xf0,\n\t\t\t0x11, 0xc0, 0x11, 0xc5,\n\t\t\t0x00, 0x1e, 0x08, 0x9e,\n\t\t\t0x0c, 0x9d, 0x0e, 0xc6,\n\t\t\t0x0a, 0x9e, 0x8f, 0x1c,\n\t\t\t0x0e, 0x8c, 0x0e, 0x74,\n\t\t\t0xcf, 0x49, 0xfe, 0xf1,\n\t\t\t0x04, 0xc0, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0xa0, 0x41,\n\t\t\t0x06, 0xd4, 0x00, 0xdc,\n\t\t\t0x24, 0xe4, 0x80, 0x02,\n\t\t\t0x34, 0xd3, 0x9e, 0x49,\n\t\t\t0x0a, 0xf0, 0x0f, 0xc2,\n\t\t\t0x40, 0x71, 0x9f, 0x49,\n\t\t\t0x02, 0xf1, 0x08, 0xe0,\n\t\t\t0x0b, 0xc2, 0x40, 0x61,\n\t\t\t0x91, 0x48, 0x40, 0x89,\n\t\t\t0x02, 0xc5, 0x00, 0xbd,\n\t\t\t0x82, 0x24, 0x02, 0xc5,\n\t\t\t0x00, 0xbd, 0xf8, 0x23,\n\t\t\t0xfe, 0xcf, 0x1e, 0xd4,\n\t\t\t0xfe, 0xc7, 0xe0, 0x75,\n\t\t\t0x5f, 0x48, 0xe0, 0x9d,\n\t\t\t0x04, 0xc7, 0x02, 0xc5,\n\t\t\t0x00, 0xbd, 0x82, 0x18,\n\t\t\t0x14, 0xd8, 0xc0, 0x88,\n\t\t\t0x5d, 0xc7, 0x56, 0xc6,\n\t\t\t0xe4, 0x9e, 0x0f, 0x1e,\n\t\t\t0xe6, 0x8e, 0xe6, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0xe2, 0x75, 0xe0, 0x74,\n\t\t\t0xd8, 0x25, 0xd8, 0x22,\n\t\t\t0xd8, 0x26, 0x48, 0x23,\n\t\t\t0x68, 0x27, 0x48, 0x26,\n\t\t\t0x04, 0xb4, 0x05, 0xb4,\n\t\t\t0x06, 0xb4, 0x45, 0xc6,\n\t\t\t0xe2, 0x23, 0xfe, 0x39,\n\t\t\t0x00, 0x1c, 0x00, 0x1d,\n\t\t\t0x00, 0x13, 0x0c, 0xf0,\n\t\t\t0xb0, 0x49, 0x04, 0xf1,\n\t\t\t0x01, 0x05, 0xb1, 0x25,\n\t\t\t0xfa, 0xe7, 0xb8, 0x33,\n\t\t\t0x35, 0x43, 0x26, 0x31,\n\t\t\t0x01, 0x05, 0xb1, 0x25,\n\t\t\t0xf4, 0xe7, 0x06, 0xb0,\n\t\t\t0x05, 0xb0, 0xae, 0x41,\n\t\t\t0x25, 0x31, 0x30, 0xc5,\n\t\t\t0x6c, 0x41, 0x04, 0xb0,\n\t\t\t0x05, 0xb4, 0x30, 0xc7,\n\t\t\t0x29, 0xc6, 0x04, 0x06,\n\t\t\t0xe4, 0x9e, 0x0f, 0x1e,\n\t\t\t0xe6, 0x8e, 0xe6, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0xe0, 0x76, 0xe8, 0x25,\n\t\t\t0xe8, 0x23, 0xf8, 0x27,\n\t\t\t0x1e, 0xc5, 0x6f, 0x41,\n\t\t\t0x33, 0x23, 0xb3, 0x31,\n\t\t\t0x74, 0x41, 0xf5, 0x31,\n\t\t\t0x19, 0xc6, 0x7e, 0x41,\n\t\t\t0x1a, 0xc6, 0xc4, 0x9f,\n\t\t\t0xf1, 0x21, 0xdf, 0x30,\n\t\t\t0x05, 0xb0, 0xc2, 0x9d,\n\t\t\t0x52, 0x22, 0xa3, 0x31,\n\t\t\t0x0e, 0xc7, 0xb7, 0x31,\n\t\t\t0x0e, 0xc7, 0x77, 0x41,\n\t\t\t0x0e, 0xc7, 0xe6, 0x9e,\n\t\t\t0x0b, 0xc3, 0xde, 0x30,\n\t\t\t0x60, 0x64, 0xe8, 0x8c,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0xe8, 0x19, 0x00, 0xc0,\n\t\t\t0x41, 0x00, 0xff, 0x00,\n\t\t\t0x7f, 0x00, 0x00, 0xe6,\n\t\t\t0x60, 0xd3, 0x08, 0xdc,\n\t\t\t0x1b, 0xc4, 0x80, 0x75,\n\t\t\t0x08, 0x15, 0x04, 0xf0,\n\t\t\t0x01, 0x05, 0x80, 0x9d,\n\t\t\t0x0f, 0xe0, 0x00, 0x1d,\n\t\t\t0x80, 0x9d, 0x25, 0xc4,\n\t\t\t0x80, 0x75, 0xd8, 0x22,\n\t\t\t0xdc, 0x26, 0x01, 0x15,\n\t\t\t0x04, 0xf1, 0x0d, 0xc4,\n\t\t\t0x11, 0x1d, 0x80, 0x8d,\n\t\t\t0x14, 0x1e, 0xe5, 0x8e,\n\t\t\t0x04, 0xe0, 0xe5, 0x66,\n\t\t\t0x62, 0x48, 0xe5, 0x8e,\n\t\t\t0x02, 0xc3, 0x00, 0xbb,\n\t\t\t0x8c, 0x06, 0x50, 0xd3,\n\t\t\t0x4c, 0xb4, 0x11, 0xc0,\n\t\t\t0x00, 0x71, 0x98, 0x20,\n\t\t\t0x9c, 0x24, 0x01, 0x11,\n\t\t\t0x06, 0xf1, 0x0a, 0xc6,\n\t\t\t0x01, 0x1d, 0xc6, 0x8d,\n\t\t\t0x19, 0x1d, 0xc1, 0x8d,\n\t\t\t0x04, 0xc0, 0x02, 0xc1,\n\t\t\t0x00, 0xb9, 0xa2, 0x12,\n\t\t\t0xc0, 0xd4, 0x04, 0xe4,\n\t\t\t0xb4, 0xbb, 0xec, 0xc6,\n\t\t\t0x00, 0x1d, 0xc0, 0x8d,\n\t\t\t0xfb, 0xc6, 0x14, 0x1d,\n\t\t\t0xc5, 0x8d, 0x04, 0xc6,\n\t\t\t0x02, 0xc5, 0x00, 0xbd,\n\t\t\t0xd2, 0x03, 0x40, 0xb4 };\n\t\tstatic u8 pla_patch2_b[] = {\n\t\t\t0x10, 0xe0, 0x26, 0xe0,\n\t\t\t0x37, 0xe0, 0x6b, 0xe0,\n\t\t\t0x7e, 0xe0, 0xcb, 0xe0,\n\t\t\t0xcd, 0xe0, 0xcf, 0xe0,\n\t\t\t0xd1, 0xe0, 0xd3, 0xe0,\n\t\t\t0xd5, 0xe0, 0xd7, 0xe0,\n\t\t\t0xd9, 0xe0, 0xdb, 0xe0,\n\t\t\t0xdd, 0xe0, 0xdf, 0xe0,\n\t\t\t0x15, 0xc6, 0xc2, 0x64,\n\t\t\t0xd2, 0x49, 0x06, 0xf1,\n\t\t\t0xc4, 0x48, 0xc5, 0x48,\n\t\t\t0xc6, 0x48, 0xc7, 0x48,\n\t\t\t0x05, 0xe0, 0x44, 0x48,\n\t\t\t0x45, 0x48, 0x46, 0x48,\n\t\t\t0x47, 0x48, 0xc2, 0x8c,\n\t\t\t0xc0, 0x64, 0x46, 0x48,\n\t\t\t0xc0, 0x8c, 0x05, 0xc5,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0x18, 0x02, 0x06, 0xdc,\n\t\t\t0xb0, 0xc0, 0x10, 0xc5,\n\t\t\t0xa0, 0x77, 0xa0, 0x74,\n\t\t\t0x46, 0x48, 0x47, 0x48,\n\t\t\t0xa0, 0x9c, 0x0b, 0xc5,\n\t\t\t0xa0, 0x74, 0x44, 0x48,\n\t\t\t0x43, 0x48, 0xa0, 0x9c,\n\t\t\t0x05, 0xc5, 0xa0, 0x9f,\n\t\t\t0x02, 0xc5, 0x00, 0xbd,\n\t\t\t0x3c, 0x03, 0x1c, 0xe8,\n\t\t\t0x20, 0xe8, 0xd4, 0x49,\n\t\t\t0x04, 0xf1, 0xd5, 0x49,\n\t\t\t0x20, 0xf1, 0x28, 0xe0,\n\t\t\t0x2a, 0xc7, 0xe0, 0x75,\n\t\t\t0xda, 0x49, 0x14, 0xf0,\n\t\t\t0x27, 0xc7, 0xe0, 0x75,\n\t\t\t0xdc, 0x49, 0x10, 0xf1,\n\t\t\t0x24, 0xc7, 0xe0, 0x75,\n\t\t\t0x25, 0xc7, 0xe0, 0x74,\n\t\t\t0x2c, 0x40, 0x0a, 0xfa,\n\t\t\t0x1f, 0xc7, 0xe4, 0x75,\n\t\t\t0xd0, 0x49, 0x09, 0xf1,\n\t\t\t0x1c, 0xc5, 0xe6, 0x9d,\n\t\t\t0x11, 0x1d, 0xe4, 0x8d,\n\t\t\t0x04, 0xe0, 0x16, 0xc7,\n\t\t\t0x00, 0x1d, 0xe4, 0x8d,\n\t\t\t0xe0, 0x8e, 0x11, 0x1d,\n\t\t\t0xe0, 0x8d, 0x07, 0xe0,\n\t\t\t0x0c, 0xc7, 0xe0, 0x75,\n\t\t\t0xda, 0x48, 0xe0, 0x9d,\n\t\t\t0x0b, 0xc7, 0xe4, 0x8e,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0x28, 0x03, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0x14, 0x03,\n\t\t\t0x12, 0xe8, 0x4e, 0xe8,\n\t\t\t0x1c, 0xe6, 0x20, 0xe4,\n\t\t\t0x80, 0x02, 0xa4, 0xc0,\n\t\t\t0x12, 0xc2, 0x40, 0x73,\n\t\t\t0xb0, 0x49, 0x08, 0xf0,\n\t\t\t0xb8, 0x49, 0x06, 0xf0,\n\t\t\t0xb8, 0x48, 0x40, 0x9b,\n\t\t\t0x0b, 0xc2, 0x40, 0x76,\n\t\t\t0x05, 0xe0, 0x02, 0x61,\n\t\t\t0x02, 0xc3, 0x00, 0xbb,\n\t\t\t0x0a, 0x0a, 0x02, 0xc3,\n\t\t\t0x00, 0xbb, 0x1a, 0x0a,\n\t\t\t0x98, 0xd3, 0x1e, 0xfc,\n\t\t\t0x1f, 0xe8, 0xfd, 0xc0,\n\t\t\t0x02, 0x62, 0xa0, 0x48,\n\t\t\t0x02, 0x8a, 0x00, 0x72,\n\t\t\t0xa0, 0x49, 0x11, 0xf0,\n\t\t\t0x13, 0xc1, 0x20, 0x62,\n\t\t\t0x2e, 0x21, 0x2f, 0x25,\n\t\t\t0x00, 0x71, 0x9f, 0x24,\n\t\t\t0x0a, 0x40, 0x09, 0xf0,\n\t\t\t0x00, 0x71, 0x18, 0x48,\n\t\t\t0xa0, 0x49, 0x03, 0xf1,\n\t\t\t0x9f, 0x48, 0x02, 0xe0,\n\t\t\t0x1f, 0x48, 0x00, 0x99,\n\t\t\t0x02, 0xc2, 0x00, 0xba,\n\t\t\t0xda, 0x0e, 0x08, 0xe9,\n\t\t\t0x08, 0xea, 0x34, 0xd3,\n\t\t\t0xe8, 0xd4, 0x00, 0xb4,\n\t\t\t0x01, 0xb4, 0x02, 0xb4,\n\t\t\t0xf9, 0xc1, 0x20, 0x62,\n\t\t\t0x2e, 0x21, 0x2f, 0x25,\n\t\t\t0xa0, 0x49, 0x23, 0xf0,\n\t\t\t0xf4, 0xc0, 0xf4, 0xc2,\n\t\t\t0x04, 0x9a, 0x00, 0x1a,\n\t\t\t0x06, 0x8a, 0x06, 0x72,\n\t\t\t0xaf, 0x49, 0xfe, 0xf1,\n\t\t\t0x00, 0x72, 0xa1, 0x49,\n\t\t\t0x18, 0xf0, 0xeb, 0xc2,\n\t\t\t0x04, 0x9a, 0x00, 0x1a,\n\t\t\t0x06, 0x8a, 0x06, 0x72,\n\t\t\t0xaf, 0x49, 0xfe, 0xf1,\n\t\t\t0x00, 0x72, 0xa1, 0x48,\n\t\t\t0x00, 0x9a, 0x81, 0x1a,\n\t\t\t0x06, 0x8a, 0x06, 0x72,\n\t\t\t0xaf, 0x49, 0xfe, 0xf1,\n\t\t\t0x00, 0x72, 0x21, 0x48,\n\t\t\t0x00, 0x9a, 0x81, 0x1a,\n\t\t\t0x06, 0x8a, 0x06, 0x72,\n\t\t\t0xaf, 0x49, 0xfe, 0xf1,\n\t\t\t0x02, 0xb0, 0x01, 0xb0,\n\t\t\t0x00, 0xb0, 0x80, 0xff,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x3a, 0x4e, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x3a, 0x4e,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x3a, 0x4e, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x00, 0x00 };\n\t\tu8 new_ver;\n\n\t\trtl_fw_ver_erase(tp);\n\n\t\tnew_ver = 7;\n\t\tif (rtl_check_fw_ver_ok(tp, USB_FW_USB_VER, new_ver)) {\n\t\t\trtl_clear_bp(tp, MCU_TYPE_USB);\n\n\t\t\t/* enable fc timer and set timer to 1 second. */\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_FC_TIMER,\n\t\t\t\t       CTRL_TIMER_EN | (1000 / 8));\n\n\t\t\tgeneric_ocp_write(tp, 0xe600, 0xff,\n\t\t\t\t\t  sizeof(usb_patch2_b), usb_patch2_b,\n\t\t\t\t\t  MCU_TYPE_USB);\n\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_BA, 0xa000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_0, 0x3d86);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_1, 0x088a);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_2, 0x1dee);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_3, 0x16c2);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_4, 0x1c94);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_5, 0x19f0);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_6, 0x27e0);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_7, 0x35a8);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_8, 0x12f8);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_9, 0x419e);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_10, 0x23f4);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_11, 0x186e);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_12, 0x19e6);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_13, 0x0674);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_14, 0x12a0);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_15, 0x03d0);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP2_EN, 0xffff);\n\t\t\tocp_write_byte(tp, MCU_TYPE_USB, USB_FW_USB_VER,\n\t\t\t\t       new_ver);\n\t\t}\n\n\t\tnew_ver = 3;\n\t\tif (rtl_check_fw_ver_ok(tp, USB_FW_PLA_VER, new_ver)) {\n\t\t\trtl_clear_bp(tp, MCU_TYPE_PLA);\n\n\t\t\tgeneric_ocp_write(tp, 0xf800, 0xff,\n\t\t\t\t\t  sizeof(pla_patch2_b), pla_patch2_b,\n\t\t\t\t\t  MCU_TYPE_PLA);\n\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_BA, 0x8000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_0, 0x0216);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_1, 0x0332);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_2, 0x030c);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_3, 0x0a08);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_4, 0x0ec0);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_5, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_6, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_7, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_EN, 0x001e);\n\t\t\tocp_write_byte(tp, MCU_TYPE_USB, USB_FW_PLA_VER,\n\t\t\t\t       new_ver);\n\n\t\t\tret = ocp_read_byte(tp, MCU_TYPE_USB, USB_MISC_1,\n\t\t\t\t\t    &ocp_data);\n\t\t\tif (ocp_data & BND_MASK)\n\t\t\t\tocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_BP_EN,\n\t\t\t\t\t\t  BIT(0));\n\t\t}\n\n\t\tocp_word_set_bits(tp, MCU_TYPE_USB, USB_FW_CTRL,\n\t\t\t\t  FLOW_CTRL_PATCH_OPT);\n\n\t\tocp_word_set_bits(tp, MCU_TYPE_USB, USB_FW_TASK, FC_PATCH_TASK);\n\n\t\tocp_word_set_bits(tp, MCU_TYPE_USB, USB_FW_FIX_EN1,\n\t\t\t\t  FW_IP_RESET_EN);\n\n\t\trtl_reset_ocp_base(tp);\n\t} else if (tp->version == RTL_VER_14) {\n\t\tstatic u8 usb_patch3_a[] = {\n\t\t\t0x10, 0xe0, 0x79, 0xe0,\n\t\t\t0x97, 0xe0, 0x99, 0xe0,\n\t\t\t0xa0, 0xe0, 0xa2, 0xe0,\n\t\t\t0xc3, 0xe0, 0xe9, 0xe0,\n\t\t\t0xeb, 0xe0, 0xed, 0xe0,\n\t\t\t0xef, 0xe0, 0xf1, 0xe0,\n\t\t\t0xf3, 0xe0, 0xf5, 0xe0,\n\t\t\t0xf7, 0xe0, 0xf9, 0xe0,\n\t\t\t0x01, 0xb4, 0x03, 0xb4,\n\t\t\t0x04, 0xb4, 0x05, 0xb4,\n\t\t\t0x07, 0xb4, 0x64, 0xc6,\n\t\t\t0xc0, 0x60, 0x82, 0x48,\n\t\t\t0xc0, 0x88, 0x5f, 0xc7,\n\t\t\t0x58, 0xc6, 0xe4, 0x9e,\n\t\t\t0x0f, 0x1e, 0xe6, 0x8e,\n\t\t\t0xe6, 0x76, 0xef, 0x49,\n\t\t\t0xfe, 0xf1, 0xe2, 0x73,\n\t\t\t0xe0, 0x74, 0xb8, 0x22,\n\t\t\t0xd8, 0x26, 0xb8, 0x25,\n\t\t\t0x48, 0x23, 0x68, 0x27,\n\t\t\t0x48, 0x26, 0x04, 0xb4,\n\t\t\t0x05, 0xb4, 0x06, 0xb4,\n\t\t\t0x47, 0xc6, 0xe2, 0x23,\n\t\t\t0xfe, 0x39, 0x00, 0x1c,\n\t\t\t0x00, 0x1d, 0x00, 0x13,\n\t\t\t0x0c, 0xf0, 0xb0, 0x49,\n\t\t\t0x04, 0xf1, 0x01, 0x05,\n\t\t\t0xb1, 0x25, 0xfa, 0xe7,\n\t\t\t0xb8, 0x33, 0x35, 0x43,\n\t\t\t0x26, 0x31, 0x01, 0x05,\n\t\t\t0xb1, 0x25, 0xf4, 0xe7,\n\t\t\t0x06, 0xb0, 0x05, 0xb0,\n\t\t\t0xae, 0x41, 0x25, 0x31,\n\t\t\t0x32, 0xc5, 0x6c, 0x41,\n\t\t\t0x04, 0xb0, 0x05, 0xb4,\n\t\t\t0x32, 0xc7, 0x2b, 0xc6,\n\t\t\t0x04, 0x06, 0xe4, 0x9e,\n\t\t\t0x0f, 0x1e, 0xe6, 0x8e,\n\t\t\t0xe6, 0x76, 0xef, 0x49,\n\t\t\t0xfe, 0xf1, 0xe0, 0x76,\n\t\t\t0xe8, 0x25, 0xe8, 0x23,\n\t\t\t0xf8, 0x27, 0x20, 0xc5,\n\t\t\t0x6f, 0x41, 0xb3, 0x20,\n\t\t\t0x4b, 0x30, 0x4c, 0x41,\n\t\t\t0x4d, 0x30, 0x1b, 0xc6,\n\t\t\t0x4e, 0x41, 0x91, 0x21,\n\t\t\t0xd9, 0x30, 0x05, 0xb0,\n\t\t\t0x52, 0x22, 0xa3, 0x31,\n\t\t\t0x13, 0xc7, 0xb7, 0x31,\n\t\t\t0x13, 0xc7, 0x77, 0x41,\n\t\t\t0x12, 0xc3, 0xde, 0x30,\n\t\t\t0x60, 0x65, 0x10, 0xc7,\n\t\t\t0xe0, 0x8d, 0xe2, 0x9e,\n\t\t\t0x07, 0xb0, 0x05, 0xb0,\n\t\t\t0x04, 0xb0, 0x03, 0xb0,\n\t\t\t0x01, 0xb0, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0xd6, 0x20,\n\t\t\t0x00, 0xc0, 0x41, 0x00,\n\t\t\t0xff, 0x00, 0x7f, 0x00,\n\t\t\t0x00, 0xe6, 0x7a, 0xd3,\n\t\t\t0x08, 0xdc, 0xe8, 0xd4,\n\t\t\t0x04, 0xb4, 0x05, 0xb4,\n\t\t\t0x06, 0xb4, 0x1b, 0xc0,\n\t\t\t0x00, 0x75, 0xd8, 0x49,\n\t\t\t0x0d, 0xf0, 0x14, 0xc0,\n\t\t\t0x14, 0xc5, 0x00, 0x1e,\n\t\t\t0x08, 0x9e, 0x0c, 0x9d,\n\t\t\t0x11, 0xc6, 0x0a, 0x9e,\n\t\t\t0x8f, 0x1c, 0x0e, 0x8c,\n\t\t\t0x0e, 0x74, 0xcf, 0x49,\n\t\t\t0xfe, 0xf1, 0x07, 0xc1,\n\t\t\t0x06, 0xb0, 0x05, 0xb0,\n\t\t\t0x04, 0xb0, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0xdc, 0x5c,\n\t\t\t0xe0, 0xcb, 0x00, 0xdc,\n\t\t\t0x24, 0xe4, 0x80, 0x02,\n\t\t\t0x34, 0xd3, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0x42, 0x08,\n\t\t\t0x40, 0x60, 0x80, 0x48,\n\t\t\t0x81, 0x48, 0x82, 0x48,\n\t\t\t0x40, 0x88, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0xf0, 0x1b,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x20, 0x24, 0x1c, 0xc6,\n\t\t\t0xc0, 0x61, 0x04, 0x11,\n\t\t\t0x15, 0xf1, 0x19, 0xc6,\n\t\t\t0xc0, 0x61, 0x9c, 0x20,\n\t\t\t0x9c, 0x24, 0x09, 0x11,\n\t\t\t0x0f, 0xf1, 0x14, 0xc6,\n\t\t\t0x01, 0x19, 0xc0, 0x89,\n\t\t\t0x13, 0xc1, 0x13, 0xc6,\n\t\t\t0x24, 0x9e, 0x00, 0x1e,\n\t\t\t0x26, 0x8e, 0x26, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0x22, 0x76, 0x08, 0xc1,\n\t\t\t0x22, 0x9e, 0x07, 0xc6,\n\t\t\t0x02, 0xc1, 0x00, 0xb9,\n\t\t\t0x64, 0x09, 0x18, 0xb4,\n\t\t\t0x4a, 0xb4, 0xe0, 0xcc,\n\t\t\t0x80, 0xd4, 0x08, 0xdc,\n\t\t\t0x10, 0xe8, 0xfc, 0xc6,\n\t\t\t0xc0, 0x67, 0xf0, 0x49,\n\t\t\t0x1d, 0xf0, 0xf0, 0x48,\n\t\t\t0xc0, 0x8f, 0xc2, 0x77,\n\t\t\t0xf7, 0xc1, 0xf7, 0xc6,\n\t\t\t0x24, 0x9e, 0x22, 0x9f,\n\t\t\t0x8c, 0x1e, 0x26, 0x8e,\n\t\t\t0x26, 0x76, 0xef, 0x49,\n\t\t\t0xfe, 0xf1, 0xfb, 0x49,\n\t\t\t0x05, 0xf0, 0x11, 0xc6,\n\t\t\t0xc0, 0x61, 0x10, 0x48,\n\t\t\t0xc0, 0x89, 0x0e, 0xc6,\n\t\t\t0xc0, 0x71, 0x18, 0x48,\n\t\t\t0xc0, 0x99, 0x0b, 0xc1,\n\t\t\t0xcc, 0x99, 0x0a, 0xc6,\n\t\t\t0xc0, 0x61, 0x11, 0x48,\n\t\t\t0xc0, 0x89, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x46, 0x50,\n\t\t\t0x6c, 0xb4, 0x34, 0xd3,\n\t\t\t0x4b, 0x80, 0xe8, 0xd4,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x3a, 0x4e, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x00, 0x00 };\n\t\tstatic u8 pla_patch3_a[] = {\n\t\t\t0x10, 0xe0, 0x12, 0xe0,\n\t\t\t0x15, 0xe0, 0x1a, 0xe0,\n\t\t\t0x25, 0xe0, 0x31, 0xe0,\n\t\t\t0x33, 0xe0, 0x35, 0xe0,\n\t\t\t0x37, 0xe0, 0x39, 0xe0,\n\t\t\t0x3b, 0xe0, 0x3d, 0xe0,\n\t\t\t0x3f, 0xe0, 0x41, 0xe0,\n\t\t\t0x43, 0xe0, 0x45, 0xe0,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0xec, 0x2c, 0x94, 0x49,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0xae, 0x2b, 0x05, 0xc0,\n\t\t\t0x00, 0x72, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0xd6, 0x2b,\n\t\t\t0x20, 0xe8, 0x08, 0xc3,\n\t\t\t0x60, 0x65, 0xd0, 0x49,\n\t\t\t0x06, 0xf1, 0xe0, 0x75,\n\t\t\t0x02, 0xc3, 0x00, 0xbb,\n\t\t\t0x3e, 0x08, 0xb4, 0xd3,\n\t\t\t0x02, 0xc3, 0x00, 0xbb,\n\t\t\t0x5e, 0x08, 0x6c, 0x74,\n\t\t\t0xc4, 0x75, 0xe5, 0x41,\n\t\t\t0xc2, 0x49, 0x05, 0xf0,\n\t\t\t0x07, 0xc6, 0x01, 0x1c,\n\t\t\t0xc0, 0x8c, 0xc1, 0x8c,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0x16, 0x02, 0x99, 0xd3,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x3a, 0x4e, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x3a, 0x4e,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x3a, 0x4e, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x00, 0x00 };\n\t\tu8 new_ver;\n\n\t\trtl_fw_ver_erase(tp);\n\n\t\tnew_ver = 2;\n\t\tif (rtl_check_fw_ver_ok(tp, USB_FW_PLA_VER, new_ver)) {\n\t\t\trtl_clear_bp(tp, MCU_TYPE_PLA);\n\n\t\t\tgeneric_ocp_write(tp, 0xf800, 0xff,\n\t\t\t\t\t  sizeof(pla_patch3_a), pla_patch3_a,\n\t\t\t\t\t  MCU_TYPE_PLA);\n\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_BA, 0x8000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_0, 0x2be6);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_1, 0x2bac);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_2, 0x2bd4);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_3, 0x083c);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_4, 0x0214);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_5, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_6, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_7, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_8, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_9, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_10, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_11, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_12, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_13, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_14, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_15, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP2_EN, 0x001f);\n\n\t\t\tocp_write_byte(tp, MCU_TYPE_USB, USB_FW_PLA_VER,\n\t\t\t\t       new_ver);\n\t\t}\n\n\t\tnew_ver = 5;\n\t\tif (rtl_check_fw_ver_ok(tp, USB_FW_USB_VER, new_ver)) {\n\t\t\trtl_clear_bp(tp, MCU_TYPE_USB);\n\n\t\t\t/* enable fc timer and set timer to 1 second. */\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_FC_TIMER,\n\t\t\t\t       CTRL_TIMER_EN | (1000 / 8));\n\n\t\t\tgeneric_ocp_write(tp, 0xe600, 0xff,\n\t\t\t\t\t  sizeof(usb_patch3_a), usb_patch3_a,\n\t\t\t\t\t  MCU_TYPE_USB);\n\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_BA, 0xa000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_0, 0x20ce);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_1, 0x5cda);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_2, 0x0834);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_3, 0x1bec);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_4, 0x241e);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_5, 0x0962);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_6, 0x4f54);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_7, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_8, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_9, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_10, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_11, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_12, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_13, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_14, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_15, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP2_EN, 0x007f);\n\n\t\t\tocp_write_byte(tp, MCU_TYPE_USB, USB_FW_USB_VER,\n\t\t\t\t       new_ver);\n\t\t}\n\n\t\tocp_word_set_bits(tp, MCU_TYPE_USB, USB_FW_CTRL,\n\t\t\t\t  FLOW_CTRL_PATCH_2);\n\n\t\tocp_word_set_bits(tp, MCU_TYPE_USB, USB_FW_TASK, FC_PATCH_TASK);\n\n\t\trtl_reset_ocp_base(tp);\n\t}\n\n\trtl_reset_ocp_base(tp);\n}\n\nstatic void r8156_firmware(struct r8152 *tp)\n{\n\tif (tp->version == RTL_TEST_01) {\n\t\tstatic u8 usb3_patch_t[] = {\n\t\t\t0x01, 0xe0, 0x05, 0xc7,\n\t\t\t0xf6, 0x65, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x40, 0x03,\n\t\t\t0x00, 0xd4, 0x00, 0x00 };\n\n\t\trtl_reset_ocp_base(tp);\n\n\t\tocp_reg_write(tp, 0xb87c, 0x8099);\n\t\tocp_reg_write(tp, 0xb87e, 0x2a50);\n\t\tocp_reg_write(tp, 0xb87c, 0x80a1);\n\t\tocp_reg_write(tp, 0xb87e, 0x2a50);\n\t\tocp_reg_write(tp, 0xb87c, 0x809a);\n\t\tocp_reg_write(tp, 0xb87e, 0x5010);\n\t\tocp_reg_write(tp, 0xb87c, 0x80a2);\n\t\tocp_reg_write(tp, 0xb87e, 0x500f);\n\t\tocp_reg_write(tp, 0xb87c, 0x8087);\n\t\tocp_reg_write(tp, 0xb87e, 0xc0cf);\n\t\tocp_reg_write(tp, 0xb87c, 0x8080);\n\t\tocp_reg_write(tp, 0xb87e, 0x0f16);\n\t\tocp_reg_write(tp, 0xb87c, 0x8089);\n\t\tocp_reg_write(tp, 0xb87e, 0x161b);\n\t\tocp_reg_write(tp, 0xb87c, 0x808a);\n\t\tocp_reg_write(tp, 0xb87e, 0x1b1f);\n\n\t\tocp_reg_write(tp, 0xac36, 0x0080);\n\t\tocp_reg_write(tp, 0xac4a, 0xff00);\n\t\tocp_reg_w0w1(tp, 0xac34, BIT(4), BIT(2) | BIT(3));\n\n\t\tocp_reg_clr_bits(tp, 0xac54, BIT(9) | BIT(10));\n\t\tocp_reg_write(tp, 0xb87c, 0x8099);\n\t\tocp_reg_write(tp, 0xb87e, 0x2050);\n\t\tocp_reg_write(tp, 0xb87c, 0x80a1);\n\t\tocp_reg_write(tp, 0xb87e, 0x2050);\n\t\tocp_reg_write(tp, 0xb87c, 0x809a);\n\t\tocp_reg_write(tp, 0xb87e, 0x5010);\n\t\tocp_reg_write(tp, 0xb87c, 0x80a2);\n\t\tocp_reg_write(tp, 0xb87e, 0x500f);\n\t\tocp_reg_w0w1(tp, 0xac34, BIT(5), BIT(6) | BIT(7));\n\n\t\tif (rtl_phy_patch_request(tp, true, true)) {\n\t\t\tnetif_err(tp, drv, tp->netdev,\n\t\t\t\t  \"patch request error\\n\");\n\t\t\treturn;\n\t\t}\n\n\t\tocp_reg_clr_bits(tp, 0xb896, BIT(0));\n\t\tocp_reg_write(tp, 0xb892, 0x0000);\n\t\tocp_reg_write(tp, 0xb88e, 0xc089);\n\t\tocp_reg_write(tp, 0xb890, 0xc1d0);\n\t\tocp_reg_write(tp, 0xb88e, 0xc08a);\n\t\tocp_reg_write(tp, 0xb890, 0xe0f0);\n\t\tocp_reg_write(tp, 0xb88e, 0xc08b);\n\t\tocp_reg_write(tp, 0xb890, 0xe0f0);\n\t\tocp_reg_write(tp, 0xb88e, 0xc08c);\n\t\tocp_reg_write(tp, 0xb890, 0xffff);\n\t\tocp_reg_write(tp, 0xb88e, 0xc08d);\n\t\tocp_reg_write(tp, 0xb890, 0xffff);\n\t\tocp_reg_write(tp, 0xb88e, 0xc08e);\n\t\tocp_reg_write(tp, 0xb890, 0xffff);\n\t\tocp_reg_write(tp, 0xb88e, 0xc08f);\n\t\tocp_reg_write(tp, 0xb890, 0xffff);\n\t\tocp_reg_write(tp, 0xb88e, 0xc090);\n\t\tocp_reg_write(tp, 0xb890, 0xff12);\n\n\t\tocp_reg_write(tp, 0xb88e, 0xc09a);\n\t\tocp_reg_write(tp, 0xb890, 0x191a);\n\t\tocp_reg_write(tp, 0xb88e, 0xc09b);\n\t\tocp_reg_write(tp, 0xb890, 0x191a);\n\t\tocp_reg_write(tp, 0xb88e, 0xc09e);\n\t\tocp_reg_write(tp, 0xb890, 0x1d1e);\n\t\tocp_reg_write(tp, 0xb88e, 0xc09f);\n\t\tocp_reg_write(tp, 0xb890, 0x1d1e);\n\t\tocp_reg_write(tp, 0xb88e, 0xc0a0);\n\t\tocp_reg_write(tp, 0xb890, 0x1f20);\n\t\tocp_reg_write(tp, 0xb88e, 0xc0a1);\n\t\tocp_reg_write(tp, 0xb890, 0x1f20);\n\t\tocp_reg_write(tp, 0xb88e, 0xc0a2);\n\t\tocp_reg_write(tp, 0xb890, 0x2122);\n\t\tocp_reg_write(tp, 0xb88e, 0xc0a3);\n\t\tocp_reg_write(tp, 0xb890, 0x2122);\n\t\tocp_reg_write(tp, 0xb88e, 0xc0a4);\n\t\tocp_reg_write(tp, 0xb890, 0x2324);\n\t\tocp_reg_write(tp, 0xb88e, 0xc0a5);\n\t\tocp_reg_write(tp, 0xb890, 0x2324);\n\n\t\tocp_reg_write(tp, 0xb88e, 0xc029);\n\t\tocp_reg_write(tp, 0xb890, 0xdff3);\n\t\tocp_reg_write(tp, 0xb88e, 0xc02a);\n\t\tocp_reg_write(tp, 0xb890, 0xf3f3);\n\t\tocp_reg_write(tp, 0xb88e, 0xc02b);\n\t\tocp_reg_write(tp, 0xb890, 0xf3f3);\n\t\tocp_reg_write(tp, 0xb88e, 0xc02c);\n\t\tocp_reg_write(tp, 0xb890, 0xf3ef);\n\t\tocp_reg_write(tp, 0xb88e, 0xc02d);\n\t\tocp_reg_write(tp, 0xb890, 0xf3ef);\n\t\tocp_reg_write(tp, 0xb88e, 0xc02e);\n\t\tocp_reg_write(tp, 0xb890, 0xebe7);\n\t\tocp_reg_write(tp, 0xb88e, 0xc02f);\n\t\tocp_reg_write(tp, 0xb890, 0xebe7);\n\t\tocp_reg_write(tp, 0xb88e, 0xc030);\n\t\tocp_reg_write(tp, 0xb890, 0xe4e2);\n\t\tocp_reg_write(tp, 0xb88e, 0xc031);\n\t\tocp_reg_write(tp, 0xb890, 0xe4e2);\n\t\tocp_reg_write(tp, 0xb88e, 0xc032);\n\t\tocp_reg_write(tp, 0xb890, 0xdfdf);\n\t\tocp_reg_write(tp, 0xb88e, 0xc033);\n\t\tocp_reg_write(tp, 0xb890, 0xdfdf);\n\t\tocp_reg_write(tp, 0xb88e, 0xc034);\n\t\tocp_reg_write(tp, 0xb890, 0xdfdf);\n\t\tocp_reg_write(tp, 0xb88e, 0xc035);\n\t\tocp_reg_write(tp, 0xb890, 0xdfdf);\n\t\tocp_reg_write(tp, 0xb88e, 0xc036);\n\t\tocp_reg_write(tp, 0xb890, 0xdfdf);\n\t\tocp_reg_write(tp, 0xb88e, 0xc037);\n\t\tocp_reg_write(tp, 0xb890, 0xdfdf);\n\t\tocp_reg_write(tp, 0xb88e, 0xc038);\n\t\tocp_reg_write(tp, 0xb890, 0xdfdf);\n\t\tocp_reg_write(tp, 0xb88e, 0xc039);\n\t\tocp_reg_write(tp, 0xb890, 0xdfdf);\n\t\tocp_reg_write(tp, 0xb88e, 0xc03a);\n\t\tocp_reg_write(tp, 0xb890, 0xdfdf);\n\t\tocp_reg_write(tp, 0xb88e, 0xc03b);\n\t\tocp_reg_write(tp, 0xb890, 0xdfdf);\n\t\tocp_reg_write(tp, 0xb88e, 0xc03c);\n\t\tocp_reg_write(tp, 0xb890, 0xdf00);\n\n\t\tocp_reg_set_bits(tp, 0xb896, BIT(0));\n\n\t\trtl_patch_key_set(tp, 0x8024, 0x0000);\n\t\tsram_write(tp, SRAM_PHY_LOCK, PHY_PATCH_LOCK);\n\n\t\tocp_reg_set_bits(tp, OCP_PHY_PATCH_CMD, BIT(7));\n\n\t\t/* nc0_patch_171220_loop_test_USB */\n\t\tsram_write(tp, 0xA016, 0x0000);\n\t\tsram_write(tp, 0xA012, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_ADDR, 0xA014);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8027);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x802e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8035);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x806d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8077);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x808c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8091);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x12ad);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd708);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3709);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8017);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3bdd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x801f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc100);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x38c0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1034);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4061);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb902);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x37b8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1034);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x12ad);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd71e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5fa6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x12ad);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1044);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x12ad);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd708);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3b0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1032);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x12ed);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x12ad);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd708);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2109);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1032);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x12e5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa130);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1a2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x401a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa140);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd020);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1a1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x401a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8120);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa8c0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd020);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1a1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x401a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8140);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd093);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1a5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x401a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa63f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1a2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x401a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa73f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd09e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1a2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x401a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa180);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd0dc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1a5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x401a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd502);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa401);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd03b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1c4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd704);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x401c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x617d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd502);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8401);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd503);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcdc7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd704);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4013);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0f7a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd502);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8401);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8280);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0f7a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd504);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8208);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcc08);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x08ba);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x08c6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0ee6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x068b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0e9d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd719);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x34a1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0da2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd704);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5f1c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd75e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3ffd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0dca);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd707);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5e67);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd719);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2f79);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0dc0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd75e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2a51);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0db6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xffec);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa540);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1308);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x159e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc445);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xdb02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c28);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0608);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c47);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0542);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd00a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x408d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd075);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6045);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd05d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1a4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd07a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1b5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0771);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3b4d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x809f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2635);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0241);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2745);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0241);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x27d0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80aa);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ec8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc446);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xdb04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa602);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd064);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1a1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd018);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1b0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x068b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd701);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0753);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x407b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0771);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2745);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0241);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x61da);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x608a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6306);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80c5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5e28);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2730);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80b1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80c5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0771);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8103);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc447);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xdb08);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x406d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c07);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd056);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1c2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3ce1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x01ae);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2734);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80c5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7f8a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c07);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd04e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1b2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd0a8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1a7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xdb08);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc447);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x26d7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8103);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x648a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5fbb);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0ca0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0320);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80f0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa208);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc317);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2c51);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8103);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xdb10);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc448);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa620);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8710);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x41dd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd502);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa306);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x415f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa210);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c1f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0004);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa330);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc575);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8210);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd502);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8320);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa301);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2c59);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8103);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3a33);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80ff);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd502);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8301);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd098);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd191);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x609f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8306);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8110);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa320);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa210);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd006);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1e3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc30f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4093);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc033);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x02fb);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa0f0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8208);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x02fb);\n\t\tsram_write(tp, 0xA026, 0x0279);\n\t\tsram_write(tp, 0xA024, 0x159c);\n\t\tsram_write(tp, 0xA022, 0x0d94);\n\t\tsram_write(tp, 0xA020, 0x0ee1);\n\t\tsram_write(tp, 0xA006, 0x0f46);\n\t\tsram_write(tp, 0xA004, 0x12e2);\n\t\tsram_write(tp, 0xA002, 0x12ea);\n\t\tsram_write(tp, 0xA000, 0x1034);\n\t\tsram_write(tp, 0xA008, 0xff00);\n\n\t\t/* nc2_patch_171109_USB */\n\t\tsram_write(tp, 0xA016, 0x0020);\n\t\tsram_write(tp, 0xA012, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_ADDR, 0xA014);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8014);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8018);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8024);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8056);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8062);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8069);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8080);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa404);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8708);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0390);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd37a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd21a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0508);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8301);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd164);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd04d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0441);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5fb4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcf0c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0437);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x010c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcb60);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd71f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x61ee);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd71f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x210c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x001a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5f57);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbb80);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x605f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9b80);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8301);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1c3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd074);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa301);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfff1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcb62);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb910);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd71f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7fae);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9930);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcb80);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8190);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x82a0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x800a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8406);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa780);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd141);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd040);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0441);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5fb4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcb82);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8701);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa70c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa190);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa2b4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa00a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa404);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6041);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa402);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0441);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5fa7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x02ed);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8301);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd164);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd04d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0441);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5fb4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0450);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb401);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0236);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb808);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbb80);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa301);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1c3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd074);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x03f3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcb17);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0441);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8ec0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0426);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xae40);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0426);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0cc0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0e80);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0426);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaec0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0426);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x34a0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x012c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd701);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5d8e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0134);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcb23);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0441);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8ec0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0426);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xae40);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0426);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0cc0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0e80);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0426);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaec0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0426);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd701);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5dee);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0249);\n\t\tsram_write(tp, 0xA10E, 0x0239);\n\t\tsram_write(tp, 0xA10C, 0x0119);\n\t\tsram_write(tp, 0xA10A, 0x03f2);\n\t\tsram_write(tp, 0xA108, 0x0231);\n\t\tsram_write(tp, 0xA106, 0x0413);\n\t\tsram_write(tp, 0xA104, 0x0108);\n\t\tsram_write(tp, 0xA102, 0x0506);\n\t\tsram_write(tp, 0xA100, 0x038e);\n\t\tsram_write(tp, 0xA110, 0x00ff);\n\n\t\t/* uc2_patch_171006_calc_txcrc_reg_write_seq_USB */\n\t\tsram_write(tp, 0xb87c, 0x82c1);\n\t\tsram_write(tp, 0xb87e, 0xaf82);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcdaf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x82d6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf82);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd9af);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x82dc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0282);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xdc02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x830c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf03);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd7af);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0eea);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe4f8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfaef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x69e0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8169);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xac23);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1ee0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x815d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad23);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1bf7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0ee0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xffcf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad26);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfa02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0b99);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0283);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3cf6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0ee0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xffcf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xac26);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfaae);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0302);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d70);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef96);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfefc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x04f8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfaef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x69e0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8169);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xac24);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1ee0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x815d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad24);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1bf7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0ee0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xffcf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad26);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfa02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8349);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0283);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3cf6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0ee0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xffcf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xac26);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfaae);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0302);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x861d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef96);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfefc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x04f8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf70f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe0ff);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcfad);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x27fa);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf60f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfc04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf8f9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfaef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x69e0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0502);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8375);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xae16);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa001);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0502);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x83aa);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xae0e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa002);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0502);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x848f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xae06);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa003);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0302);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x857e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef96);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfefd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfc04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf8f9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfaef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x69e1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad2b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x16ee);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00ee);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00ee);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x01ee);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x01ee);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x01ae);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0ee1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x815d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf62c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe581);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5dbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8663);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0243);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5cef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x96fe);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfdfc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x04f8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf9fa);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef69);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe281);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa6e3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef13);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3905);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xac2f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1da2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0417);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0285);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf0e1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x815d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf62c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe581);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5dbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8663);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0243);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5cee);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00ae);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4412);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd301);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0284);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x20e6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe781);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa75d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0303);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef12);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c12);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1e13);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe281);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa4e3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5d03);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x030c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x260c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x341e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x121e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x13bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8666);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8d1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x09bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8669);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x866c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0243);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5cbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8675);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0243);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5cee);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x02ef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x96fe);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfdfc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x04f8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf9fa);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef69);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa201);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0abf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x867b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2cef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x64ae);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x22a2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x020a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7e02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3f2c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef64);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xae15);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa203);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0abf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8681);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2cef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x64ae);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x08bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8684);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2cef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6483);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c64);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c32);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1a63);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf81);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa81a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x961f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x66ef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x563d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0004);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad37);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1fd9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef79);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6602);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3ee8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef16);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x290a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6902);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3ee8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6c02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x435c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef97);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1916);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaed9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef96);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfefd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfc04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf8f9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfaef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x69bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8678);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2cad);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2879);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd103);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7202);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3ee8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6f02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3f2c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa094);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x62e2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe381);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa7d1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x04bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8672);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x866f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2cef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x100d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x121f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1259);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x03a1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0043);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef10);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1f13);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5903);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa100);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3a02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x851c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe681);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa4e7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5d03);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x03ef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x120c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x121e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x130c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x121e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x120c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x121e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x13bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8666);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8d1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x09bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8669);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x866c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0243);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5cbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8675);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0243);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5cee);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x03ae);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x06bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8675);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0243);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5cef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x96fe);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfdfc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x04f8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf9fa);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef69);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1f66);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8283);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c32);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef12);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8702);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3ee8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef46);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3c00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x02ad);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2741);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef46);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2c00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x05bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8672);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x866f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2cbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x868a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8ef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x13bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x868d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8690);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0243);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5cef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x10bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x868a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8ef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1311);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8d02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3ee8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9002);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x435c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2b02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x16ae);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7ef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x96fe);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfdfc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x04f8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf9fa);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef69);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7802);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3f2c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad28);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ee2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe381);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa7d1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x03bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8672);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x866f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2cef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1259);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x03a1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0014);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef13);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5903);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa100);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0da0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x900a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x13e7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x81a7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xee81);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa301);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xae2f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa094);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x26d1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x04bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8672);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x866f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2cef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x100d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x161f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1259);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x03a1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x000d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef10);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d14);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1f13);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5903);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa100);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x02ae);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcdbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8675);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0243);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5cef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x96fe);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfdfc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x04f8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf9fa);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef69);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd209);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd100);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6602);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3ee8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef32);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3b0e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad3f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x11ef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x12bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8669);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x866c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0243);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5c12);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaee8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef96);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfefd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfc04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf8f9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfaef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x69e1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad2b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0602);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x85f0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0286);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x44e1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8169);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf62c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe581);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x69e1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x815d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf62c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe581);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5def);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x96fe);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfdfc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x04f8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf9fa);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef69);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xee81);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa400);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xee81);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xee81);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa601);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xee81);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa701);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xee81);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa300);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef96);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfefd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfc04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x44a6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe070);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb468);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xdab4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x68ff);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb468);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf0b6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3a20);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb638);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xeeb6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x38ff);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb638);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x10b5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0032);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x54b5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0076);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x10b4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4e70);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb450);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x52b4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4e66);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb44e);\n\t\tsram_write(tp, 0xb85e, 0x03d1);\n\t\tsram_write(tp, 0xb860, 0x0ee4);\n\t\tsram_write(tp, 0xb862, 0x0fde);\n\t\tsram_write(tp, 0xb864, 0xffff);\n\t\tsram_write(tp, 0xb878, 0x0001);\n\n\t\tocp_reg_clr_bits(tp, OCP_PHY_PATCH_CMD, BIT(7));\n\n\t\t/* uc_patch_171212_customer_USB */\n\t\tsram_write(tp, 0x8586, 0xaf85);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x92af);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8598);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf85);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa1af);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x85a1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0285);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa1af);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0414);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0286);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7e02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1273);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf10);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1cf8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf9e3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x83ab);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe0a6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00e1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa601);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x580f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa008);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4659);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0f9e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4239);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0aab);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3ee0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xffcf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad26);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x07f7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0ead);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2729);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xae02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf60e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe283);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xab1f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x239f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x28e0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb714);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe1b7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x155c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9fee);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0285);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfee0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xffcf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad26);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0af7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0fe0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xffcf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xac27);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfaf6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0fe2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x83ab);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1f23);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9f03);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf85);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa6fd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfc04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf8f9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfb02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x866d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1f77);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe0b7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2ee1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb72f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0286);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4ce0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb72c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe1b7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2d02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x864c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe0b7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2ae1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb72b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0286);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4ce0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb728);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe1b7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2902);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x864c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe0b7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x26e1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb727);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0286);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4cef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x47d2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb8e6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb468);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe5b4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x69d2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbce6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb468);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe4b4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6902);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x866d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfffd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfc04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf8f9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfad2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00ef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x675e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0001);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1f46);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d71);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5f7f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xffad);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2803);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7fa0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x010d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4112);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa210);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe8fe);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfdfc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x04f8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe0b4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x62e1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb463);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6901);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe4b4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x62e5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb463);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfc04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf8f9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfaef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x69e1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8016);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad2d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3bbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86fd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x08ac);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2832);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0002);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3f08);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xad28);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x29d2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x03bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8703);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x023f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x080d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x11f6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2fef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x31e0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8ff3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf627);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1b03);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaa01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x82e0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8ff2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf627);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1b03);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaa01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8202);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86ca);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef69);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfefd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfc04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfbfa);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef69);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf9f8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf8f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf4e1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8fed);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1c21);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1a92);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe08f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xeee1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8fef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef74);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe08f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf0e1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8ff1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef64);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0217);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x70fc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfdef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x96fe);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xff04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2087);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0620);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8709);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0087);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0cbb);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa880);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xeea8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8070);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa880);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60a8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x18e8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa818);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60a8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1a00);\n\t\tsram_write(tp, 0xb818, 0x040e);\n\t\tsram_write(tp, 0xb81a, 0x1019);\n\t\tsram_write(tp, 0xb81c, 0xffff);\n\t\tsram_write(tp, 0xb81e, 0xffff);\n\t\tsram_write(tp, 0xb832, 0x0003);\n\n\t\trtl_patch_key_set(tp, 0x8024, 0x0000);\n\t\tocp_reg_write(tp, 0xc414, 0x0200);\n\n\t\trtl_phy_patch_request(tp, false, true);\n\n\t\tr8156_lock_main(tp, true);\n\n\t\tsram_write(tp, 0x80c9, 0x3478);\n\t\tsram_write(tp, 0x80d0, 0xfe8f);\n\t\tsram_write(tp, 0x80ca, 0x7843);\n\t\tsram_write(tp, 0x80cb, 0x43b0);\n\t\tsram_write(tp, 0x80cb, 0x4380);\n\t\tsram_write(tp, 0x80cc, 0xb00b);\n\t\tsram_write(tp, 0x80cd, 0x0ba1);\n\t\tsram_write(tp, 0x80d8, 0x1078);\n\t\tsram_write(tp, 0x8016, 0x3f00);\n\t\tsram_write(tp, 0x8fed, 0x0386);\n\t\tsram_write(tp, 0x8fee, 0x86f4);\n\t\tsram_write(tp, 0x8fef, 0xf486);\n\t\tsram_write(tp, 0x8ff0, 0x86fd);\n\t\tsram_write(tp, 0x8ff1, 0xfd28);\n\t\tsram_write(tp, 0x8ff2, 0x285a);\n\t\tsram_write(tp, 0x8ff3, 0x5a70);\n\t\tsram_write(tp, 0x8ff4, 0x7000);\n\t\tsram_write(tp, 0x8ff5, 0x005d);\n\t\tsram_write(tp, 0x8ff6, 0x5d77);\n\t\tsram_write(tp, 0x8ff7, 0x7778);\n\t\tsram_write(tp, 0x8ff8, 0x785f);\n\t\tsram_write(tp, 0x8ff9, 0x5f74);\n\t\tsram_write(tp, 0x8ffa, 0x7478);\n\t\tsram_write(tp, 0x8ffb, 0x7858);\n\t\tsram_write(tp, 0x8ffc, 0x5870);\n\t\tsram_write(tp, 0x8ffd, 0x7078);\n\t\tsram_write(tp, 0x8ffe, 0x7850);\n\t\tsram_write(tp, 0x8fff, 0x5000);\n\t\tsram_write(tp, 0x80dd, 0x34a4);\n\t\tsram_write(tp, 0x80e4, 0xfe7f);\n\t\tsram_write(tp, 0x80e6, 0x4a19);\n\t\tsram_write(tp, 0x80de, 0xa443);\n\t\tsram_write(tp, 0x80df, 0x43a0);\n\t\tsram_write(tp, 0x80df, 0x43a0);\n\t\tsram_write(tp, 0x80e0, 0xa00a);\n\t\tsram_write(tp, 0x80e1, 0x0a00);\n\t\tsram_write(tp, 0x80e8, 0x700c);\n\t\tsram_write(tp, 0x80e2, 0x0007);\n\t\tsram_write(tp, 0x80e3, 0x07fe);\n\t\tsram_write(tp, 0x80ec, 0x0e78);\n\t\tsram_write(tp, 0x80b5, 0x42f7);\n\t\tsram_write(tp, 0x80bc, 0xfaa4);\n\t\tsram_write(tp, 0x80bf, 0x1f80);\n\t\tsram_write(tp, 0x80be, 0xff1f);\n\t\tsram_write(tp, 0x80b7, 0x4280);\n\t\tsram_write(tp, 0x80b6, 0xf742);\n\t\tsram_write(tp, 0x80b8, 0x800f);\n\t\tsram_write(tp, 0x80b9, 0x0fab);\n\t\tsram_write(tp, 0x80c1, 0x1e0a);\n\t\tsram_write(tp, 0x80c0, 0x801e);\n\t\tsram_write(tp, 0x80bd, 0xa4ff);\n\t\tsram_write(tp, 0x80bb, 0x0bfa);\n\t\tsram_write(tp, 0x80ba, 0xab0b);\n\t\tocp_reg_write(tp, OCP_SRAM_ADDR, 0x818d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x003d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x009b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00cb);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00e5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00f2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00f9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00fd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00ff);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00c2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0065);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0034);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x001b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x000e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0007);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0003);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0002);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0001);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tsram_write(tp, 0x8163, 0xdb06);\n\t\tsram_write(tp, 0x816a, 0xdb06);\n\t\tsram_write(tp, 0x8171, 0xdb06);\n\n\t\tr8156_lock_main(tp, false);\n\n\t\trtl_clear_bp(tp, MCU_TYPE_USB);\n\n\t\tgeneric_ocp_write(tp, 0xe600, 0xff, sizeof(usb3_patch_t),\n\t\t\t\t  usb3_patch_t, MCU_TYPE_USB);\n\n\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_BA, 0xa000);\n\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_0, 0x033e);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_1, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_2, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_3, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_4, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_5, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_6, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_7, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_8, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_9, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_10, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_11, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_12, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_13, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_14, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_15, 0x0000);\n\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP2_EN, 0x0001);\n\t}\n\n\trtl_reset_ocp_base(tp);\n}\n\nstatic int r8153_aldps_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\tret = ocp_reg_set_bits(tp, OCP_POWER_CFG, EN_ALDPS);\n\t} else {\n\t\tint i;\n\n\t\tret = ocp_reg_clr_bits(tp, OCP_POWER_CFG, EN_ALDPS);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tfor (i = 0; i < 20; i++) {\n\t\t\tu32 ocp_data;\n\n\t\t\tusleep_range(1000, 2000);\n\t\t\tret = ocp_read_word(tp, MCU_TYPE_PLA, 0xe000,\n\t\t\t\t\t    &ocp_data);\n\t\t\tif (ret < 0 || (ocp_data & 0x0100))\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\ttp->ups_info.aldps = enable;\n\nout:\n\treturn ret;\n}\n\nstatic int r8153b_mcu_spdown_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable)\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL3,\n\t\t\t\t\tPLA_MCU_SPDWN_EN);\n\telse\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL3,\n\t\t\t\t\tPLA_MCU_SPDWN_EN);\n\n\treturn ret;\n}\n\nstatic void r8153_hw_phy_cfg(struct r8152 *tp)\n{\n\t/* disable ALDPS before updating the PHY parameters */\n\tr8153_aldps_en(tp, false);\n\n\t/* disable EEE before updating the PHY parameters */\n\trtl_eee_enable(tp, false);\n\n\tr8153_firmware(tp);\n\n\tif (tp->version == RTL_VER_03)\n\t\tocp_reg_clr_bits(tp, OCP_EEE_CFG, CTAP_SHORT_EN);\n\n\tocp_reg_set_bits(tp, OCP_POWER_CFG, EEE_CLKDIV_EN);\n\n\tocp_reg_set_bits(tp, OCP_DOWN_SPEED, EN_10M_BGOFF);\n\tocp_reg_set_bits(tp, OCP_POWER_CFG, EN_10M_PLLOFF);\n\tsram_write(tp, SRAM_IMPEDANCE, 0x0b13);\n\n\tocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_PHY_PWR, PFM_PWM_SWITCH);\n\n\t/* Enable LPF corner auto tune */\n\tsram_write(tp, SRAM_LPF_CFG, 0xf70f);\n\n\t/* Adjust 10M Amplitude */\n\tsram_write(tp, SRAM_10M_AMP1, 0x00af);\n\tsram_write(tp, SRAM_10M_AMP2, 0x0208);\n\n\tif (tp->eee_en)\n\t\trtl_eee_enable(tp, true);\n\n\tr8153_aldps_en(tp, true);\n\tr8152b_enable_fc(tp);\n\n\tswitch (tp->version) {\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\t\tbreak;\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\tdefault:\n\t\tr8153_u2p3en(tp, true);\n\t\tbreak;\n\t}\n\n\tset_bit(PHY_RESET, &tp->flags);\n}\n\nstatic u32 r8152_efuse_read(struct r8152 *tp, u8 addr)\n{\n\tu32 ocp_data, d2;\n\tint ret;\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_EFUSE_CMD,\n\t\t\t     EFUSE_READ_CMD | addr);\n\tif (ret < 0)\n\t\treturn 0xffffffff;\n\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_EFUSE_CMD, &ocp_data);\n\tif (ret < 0)\n\t\treturn 0xffffffff;\n\tocp_data = (ocp_data & EFUSE_DATA_BIT16) << 9;\t/* data of bit16 */\n\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_EFUSE_DATA, &d2);\n\tif (ret < 0)\n\t\treturn 0xffffffff;\n\tocp_data |= d2;\n\n\treturn ocp_data;\n}\n\nstatic void r8153b_hw_phy_cfg(struct r8152 *tp)\n{\n\tu32 ocp_data;\n\tu16 data;\n\tint ret;\n\n\tocp_word_test_and_clr_bits(tp, MCU_TYPE_USB, USB_MISC_0, PCUT_STATUS);\n\n\t/* disable ALDPS before updating the PHY parameters */\n\tr8153_aldps_en(tp, false);\n\n\t/* disable EEE before updating the PHY parameters */\n\trtl_eee_enable(tp, false);\n\n\t/* U1/U2/L1 idle timer. 500 us */\n\tocp_write_word(tp, MCU_TYPE_USB, USB_U1U2_TIMER, 500);\n\n\tret = r8153_phy_status(tp, 0);\n\tif (ret < 0)\n\t\treturn;\n\n\tswitch (ret) {\n\tcase PHY_STAT_PWRDN:\n\tcase PHY_STAT_EXT_INIT:\n\t\tr8153b_firmware(tp);\n\t\tr8152_mdio_clr_bit(tp, MII_BMCR, BMCR_PDOWN);\n\t\tbreak;\n\tcase PHY_STAT_LAN_ON:\n\tdefault:\n\t\tr8153b_firmware(tp);\n\t\tbreak;\n\t}\n\n\tr8153b_green_en(tp, test_bit(GREEN_ETHERNET, &tp->flags));\n\n\tsram_set_bits(tp, SRAM_GREEN_CFG, R_TUNE_EN);\n\tocp_reg_set_bits(tp, OCP_NCTL_CFG, PGA_RETURN_EN);\n\n\t/* ADC Bias Calibration:\n\t * read efuse offset 0x7d to get a 17-bit data. Remove the dummy/fake\n\t * bit (bit3) to rebuild the real 16-bit data. Write the data to the\n\t * ADC ioffset.\n\t */\n\tocp_data = r8152_efuse_read(tp, 0x7d);\n\tdata = (u16)(((ocp_data & 0x1fff0) >> 1) | (ocp_data & 0x7));\n\tif (data != 0xffff)\n\t\tocp_reg_write(tp, OCP_ADC_IOFFSET, data);\n\n\t/* ups mode tx-link-pulse timing adjustment:\n\t * rg_saw_cnt = OCP reg 0xC426 Bit[13:0]\n\t * swr_cnt_1ms_ini = 16000000 / rg_saw_cnt\n\t */\n\tret = ocp_reg_read(tp, 0xc426, &data);\n\tif (ret < 0)\n\t\treturn;\n\n\tocp_data = data & 0x3fff;\n\tif (ocp_data) {\n\t\tu32 swr_cnt_1ms_ini;\n\n\t\tswr_cnt_1ms_ini = (16000000 / ocp_data) & SAW_CNT_1MS_MASK;\n\t\tret = ocp_word_w0w1(tp, MCU_TYPE_USB, USB_UPS_CFG, SAW_CNT_1MS_MASK,\n\t\t\t\t    swr_cnt_1ms_ini);\n\t\tif (ret < 0)\n\t\t\treturn;\n\t}\n\n\tocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_PHY_PWR, PFM_PWM_SWITCH);\n\n#ifdef CONFIG_CTAP_SHORT_OFF\n\tocp_reg_clr_bits(tp, OCP_EEE_CFG, CTAP_SHORT_EN);\n\n\ttp->ups_info.ctap_short_off = true;\n#endif\n\t/* Advnace EEE */\n\tif (!rtl_phy_patch_request(tp, true, true)) {\n\t\tocp_reg_set_bits(tp, OCP_POWER_CFG, EEE_CLKDIV_EN);\n\t\ttp->ups_info.eee_ckdiv = true;\n\n\t\tocp_reg_set_bits(tp, OCP_DOWN_SPEED,\n\t\t\t\t EN_EEE_CMODE | EN_EEE_1000 | EN_10M_CLKDIV);\n\t\ttp->ups_info.eee_cmod_lv = true;\n\t\ttp->ups_info._10m_ckdiv = true;\n\t\ttp->ups_info.eee_plloff_giga = true;\n\n\t\tocp_reg_write(tp, OCP_SYSCLK_CFG, 0);\n\t\tocp_reg_write(tp, OCP_SYSCLK_CFG, clk_div_expo(5));\n\t\ttp->ups_info._250m_ckdiv = true;\n\n\t\trtl_phy_patch_request(tp, false, true);\n\t}\n\n\tif (tp->eee_en)\n\t\trtl_eee_enable(tp, true);\n\n\tr8153_aldps_en(tp, true);\n\tr8152b_enable_fc(tp);\n//\tr8153_u2p3en(tp, true);\n\n\tset_bit(PHY_RESET, &tp->flags);\n\trtl_set_dbg_info_state(tp, DGB_DRV_STATE_LOAD);\n}\n\nstatic void r8153c_hw_phy_cfg(struct r8152 *tp)\n{\n\tr8153b_hw_phy_cfg(tp);\n\n\ttp->ups_info.r_tune = true;\n}\n\nstatic int rtl8153_change_mtu(struct r8152 *tp)\n{\n\tint ret;\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RMS,\n\t\t\t     mtu_to_size(tp->netdev->mtu));\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_MTPS, MTPS_JUMBO);\n\nout:\n\treturn ret;\n}\n\nstatic int r8153_lanwake_clr_en(struct r8152 *tp, bool enable)\n{\n\tint ret;\n\n\tif (enable) {\n\t\t/* Enable the feature that the MCU could clear the lanwake */\n\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_PLA, PLA_CONFIG6,\n\t\t\t\t\tLANWAKE_CLR_EN);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\t/* Clear lanwake */\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_LWAKE_CTRL_REG,\n\t\t\t\t\tLANWAKE_PIN);\n\t} else {\n\t\t/* Disable the feature that the MCU could clear the lanwake */\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_CONFIG6,\n\t\t\t\t\tLANWAKE_CLR_EN);\n\t}\n\nout:\n\treturn ret;\n}\n\nstatic int r8153_first_init(struct r8152 *tp)\n{\n\tint ret;\n\n\tret = rxdy_gated_en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_teredo_off(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_dword_clr_bits(tp, MCU_TYPE_PLA, PLA_RCR, RCR_ACPT_ALL);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl8152_nic_reset(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = rtl_reset_bmu(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL, NOW_IS_OOB);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, MCU_BORW_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\twait_oob_link_list_ready(tp);\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, RE_INIT_LL);\n\tif (ret < 0)\n\t\tgoto out;\n\n\twait_oob_link_list_ready(tp);\n\n\tret = rtl_rx_vlan_en(tp, tp->netdev->features & NETIF_F_HW_VLAN_CTAG_RX);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl8153_change_mtu(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_TCR0, TCR0_AUTO_FIFO);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl8152_nic_reset(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* rx share fifo credit full threshold */\n\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL0, RXFIFO_THR1_NORMAL);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL1, RXFIFO_THR2_NORMAL);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL2, RXFIFO_THR3_NORMAL);\n\tif (ret < 0)\n\t\tgoto out;\n\t/* TX share fifo free credit full threshold */\n\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_TXFIFO_CTRL, TXFIFO_THR_NORMAL2);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_lanwake_clr_en(tp, true);\n\nout:\n\treturn ret;\n}\n\nstatic int r8153_enter_oob(struct r8152 *tp)\n{\n\tint ret, err = 0;\n\n\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL, NOW_IS_OOB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\t/* RX FIFO settings for OOB */\n\tret = ocp_write_dword(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL0, RXFIFO_THR1_OOB);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL1, RXFIFO_THR2_OOB);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL2, RXFIFO_THR3_OOB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = rtl_disable(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = rtl_reset_bmu(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\n\twait_oob_link_list_ready(tp);\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, RE_INIT_LL);\n\tif (ret < 0)\n\t\terr = ret;\n\n\twait_oob_link_list_ready(tp);\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RMS, 1522);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_MTPS, MTPS_DEFAULT);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_TEREDO_CFG,\n\t\t\t\t\tTEREDO_WAKE_MASK);\n\t\tif (ret < 0)\n\t\t\terr = ret;\n\t\tbreak;\n\n\tcase RTL_VER_08:\n\tcase RTL_VER_09:\n\tcase RTL_VER_14:\n\t\t/* Clear teredo wake event. bit[15:8] is the teredo wakeup\n\t\t * type. Set it to zero. bits[7:0] are the W1C bits about\n\t\t * the events. Set them to all 1 to clear them.\n\t\t */\n\t\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_TEREDO_WAKE_BASE,\n\t\t\t\t     0x00ff);\n\t\tif (ret < 0)\n\t\t\terr = ret;\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n\t}\n\n\tret = rtl_rx_vlan_en(tp, true);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_BDC_CR, ALDPS_PROXY_MODE);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_byte_set_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL,\n\t\t\t\tNOW_IS_OOB | DIS_MCU_CLROOB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, MCU_BORW_EN);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = rxdy_gated_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_dword_set_bits(tp, MCU_TYPE_PLA, PLA_RCR,\n\t\t\t\t RCR_APM | RCR_AM | RCR_AB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = r8153_lanwake_clr_en(tp, false);\n\n\tif (err < 0)\n\t\treturn err;\n\telse\n\t\treturn ret;\n}\n\nstatic int rtl8153_disable(struct r8152 *tp)\n{\n\tint ret, err = 0;\n\n\tret = r8153_aldps_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = rtl_disable(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = rtl_reset_bmu(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_aldps_en(tp, true);\n\n\tif (err < 0)\n\t\treturn err;\n\telse\n\t\treturn ret;\n}\n\nstatic u32 fc_pause_on_auto(struct r8152 *tp)\n{\n\treturn (ALIGN(mtu_to_size(tp->netdev->mtu), 1024) + 6 * 1024);\n}\n\nstatic u32 fc_pause_off_auto(struct r8152 *tp)\n{\n\treturn (ALIGN(mtu_to_size(tp->netdev->mtu), 1024) + 14 * 1024);\n}\n\nstatic int r8156_fc_parameter(struct r8152 *tp)\n{\n\tint ret;\n\n\tu32 pause_on = tp->fc_pause_on ? tp->fc_pause_on : fc_pause_on_auto(tp);\n\tu32 pause_off = tp->fc_pause_off ? tp->fc_pause_off : fc_pause_off_auto(tp);\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RX_FIFO_FULL, pause_on / 16);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RX_FIFO_EMPTY,\n\t\t\t     pause_off / 16);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8156_enable(struct r8152 *tp)\n{\n\tu16 speed;\n\tint ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tret = r8156_fc_parameter(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tset_tx_qlen(tp);\n\tret = rtl_set_eee_plus(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_set_rx_early_timeout(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_set_rx_early_size(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tswitch (tp->version) {\n\tcase RTL_TEST_01:\n\t\tret = ocp_byte_w0w1(tp, MCU_TYPE_PLA, 0xe95a, 0xf, 5);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_byte_w0w1(tp, MCU_TYPE_PLA, 0xe940, 0x1f, 4);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\n\tspeed = rtl8152_get_speed(tp);\n\tret = rtl_set_ifg(tp, speed);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (speed & _2500bps)\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL4,\n\t\t\t\t\tIDLE_SPDWN_EN);\n\telse\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL4,\n\t\t\t\t\tIDLE_SPDWN_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (speed & _1000bps)\n\t\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_EEE_TXTWSYS, 0x11);\n\telse if (speed & _500bps)\n\t\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_EEE_TXTWSYS, 0x3d);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->udev->speed == USB_SPEED_HIGH) {\n\t\t/* USB 0xb45e[3:0] l1_nyet_hird */\n\t\tif (is_flow_control(speed))\n\t\t\tret = ocp_word_w0w1(tp, MCU_TYPE_USB, USB_L1_CTRL,\n\t\t\t\t\t    0xf, 0xf);\n\t\telse\n\t\t\tret = ocp_word_w0w1(tp, MCU_TYPE_USB, USB_L1_CTRL,\n\t\t\t\t\t    0xf, 0x1);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_FW_TASK, FC_PATCH_TASK);\n\tif (ret < 0)\n\t\tgoto out;\n\tusleep_range(1000, 2000);\n\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, USB_FW_TASK, FC_PATCH_TASK);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_enable(tp);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8156_disable(struct r8152 *tp)\n{\n\tint ret, err = 0;\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RX_FIFO_FULL, 0);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RX_FIFO_EMPTY, 0);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = rtl8153_disable(tp);\n\n\tif (err < 0)\n\t\treturn err;\n\telse\n\t\treturn ret;\n}\n\nstatic int rtl8156b_enable(struct r8152 *tp)\n{\n\tu16 speed;\n\tint ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tset_tx_qlen(tp);\n\tret = rtl_set_eee_plus(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_RX_AGGR_NUM,\n\t\t\t\tRX_AGGR_NUM_MASK);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_set_rx_early_timeout(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_set_rx_early_size(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tspeed = rtl8152_get_speed(tp);\n\tret = rtl_set_ifg(tp, speed);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (speed & _2500bps)\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL4,\n\t\t\t\t\tIDLE_SPDWN_EN);\n\telse\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL4,\n\t\t\t\t\tIDLE_SPDWN_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->udev->speed == USB_SPEED_HIGH) {\n\t\tif (is_flow_control(speed))\n\t\t\tret = ocp_word_w0w1(tp, MCU_TYPE_USB, USB_L1_CTRL,\n\t\t\t\t\t    0xf, 0xf);\n\t\telse\n\t\t\tret = ocp_word_w0w1(tp, MCU_TYPE_USB, USB_L1_CTRL,\n\t\t\t\t\t    0xf, 0x1);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_FW_TASK, FC_PATCH_TASK);\n\tif (ret < 0)\n\t\tgoto out;\n\tusleep_range(1000, 2000);\n\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, USB_FW_TASK, FC_PATCH_TASK);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_enable(tp);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8157_enable(struct r8152 *tp)\n{\n\tu16 speed;\n\tint ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tset_tx_qlen(tp);\n\tret = rtl_set_eee_plus(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_RX_AGGR_NUM,\n\t\t\t\tRX_AGGR_NUM_MASK);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_set_rx_early_timeout(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_set_rx_early_size(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tspeed = rtl8152_get_speed(tp);\n\tret = rtl_set_ifg(tp, speed);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->udev->speed == USB_SPEED_HIGH) {\n\t\tif (is_flow_control(speed))\n\t\t\tret = ocp_word_w0w1(tp, MCU_TYPE_USB, USB_L1_CTRL,\n\t\t\t\t\t    0xf, 0xf);\n\t\telse\n\t\t\tret = ocp_word_w0w1(tp, MCU_TYPE_USB, USB_L1_CTRL,\n\t\t\t\t\t    0xf, 0x1);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = rtl_enable(tp);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8152_set_speed(struct r8152 *tp, u8 autoneg, u32 speed, u8 duplex,\n\t\t\t     u32 advertising)\n{\n\tu16 bmcr;\n\tint ret = 0;\n\n\tif (autoneg == AUTONEG_DISABLE) {\n\t\tif (duplex != DUPLEX_HALF && duplex != DUPLEX_FULL)\n\t\t\treturn -EINVAL;\n\n\t\tswitch (speed) {\n\t\tcase SPEED_10:\n\t\t\tbmcr = BMCR_SPEED10;\n\t\t\tif (duplex == DUPLEX_FULL) {\n\t\t\t\tbmcr |= BMCR_FULLDPLX;\n\t\t\t\ttp->ups_info.speed_duplex = FORCE_10M_FULL;\n\t\t\t} else {\n\t\t\t\ttp->ups_info.speed_duplex = FORCE_10M_HALF;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase SPEED_100:\n\t\t\tbmcr = BMCR_SPEED100;\n\t\t\tif (duplex == DUPLEX_FULL) {\n\t\t\t\tbmcr |= BMCR_FULLDPLX;\n\t\t\t\ttp->ups_info.speed_duplex = FORCE_100M_FULL;\n\t\t\t} else {\n\t\t\t\ttp->ups_info.speed_duplex = FORCE_100M_HALF;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase SPEED_1000:\n\t\t\tif (tp->mii.supports_gmii) {\n\t\t\t\tbmcr = BMCR_SPEED1000 | BMCR_FULLDPLX;\n\t\t\t\ttp->ups_info.speed_duplex = NWAY_1000M_FULL;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfallthrough;\n\t\tdefault:\n\t\t\tret = -EINVAL;\n\t\t\tgoto out;\n\t\t}\n\n\t\tif (duplex == DUPLEX_FULL)\n\t\t\ttp->mii.full_duplex = 1;\n\t\telse\n\t\t\ttp->mii.full_duplex = 0;\n\n\t\ttp->mii.force_media = 1;\n\t} else {\n\t\tu16 orig, new1;\n\t\tu32 support;\n\n\t\tsupport = RTL_ADVERTISED_10_HALF | RTL_ADVERTISED_10_FULL |\n\t\t\t  RTL_ADVERTISED_100_HALF | RTL_ADVERTISED_100_FULL;\n\n\t\tif (tp->mii.supports_gmii)\n\t\t\tsupport |= RTL_ADVERTISED_1000_FULL;\n\n\t\tif (tp->support_2500full)\n\t\t\tsupport |= RTL_ADVERTISED_2500_FULL;\n\n\t\tif (tp->support_5000full)\n\t\t\tsupport |= RTL_ADVERTISED_5000_FULL;\n\n\t\tif (!(advertising & support))\n\t\t\treturn -EINVAL;\n\n\t\tret = r8152_mdio_read(tp, MII_ADVERTISE);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\torig = ret;\n\t\tnew1 = orig & ~(ADVERTISE_10HALF | ADVERTISE_10FULL |\n\t\t\t\tADVERTISE_100HALF | ADVERTISE_100FULL);\n\t\tif (advertising & RTL_ADVERTISED_10_HALF) {\n\t\t\tnew1 |= ADVERTISE_10HALF;\n\t\t\ttp->ups_info.speed_duplex = NWAY_10M_HALF;\n\t\t}\n\t\tif (advertising & RTL_ADVERTISED_10_FULL) {\n\t\t\tnew1 |= ADVERTISE_10FULL;\n\t\t\ttp->ups_info.speed_duplex = NWAY_10M_FULL;\n\t\t}\n\n\t\tif (advertising & RTL_ADVERTISED_100_HALF) {\n\t\t\tnew1 |= ADVERTISE_100HALF;\n\t\t\ttp->ups_info.speed_duplex = NWAY_100M_HALF;\n\t\t}\n\t\tif (advertising & RTL_ADVERTISED_100_FULL) {\n\t\t\tnew1 |= ADVERTISE_100FULL;\n\t\t\ttp->ups_info.speed_duplex = NWAY_100M_FULL;\n\t\t}\n\n\t\tif (orig != new1) {\n\t\t\tret = r8152_mdio_write(tp, MII_ADVERTISE, new1);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\t\t\ttp->mii.advertising = new1;\n\t\t}\n\n\t\tif (tp->mii.supports_gmii) {\n\t\t\tret = r8152_mdio_read(tp, MII_CTRL1000);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\n\t\t\torig = ret;\n\t\t\tnew1 = orig & ~(ADVERTISE_1000FULL |\n\t\t\t\t\tADVERTISE_1000HALF);\n\n\t\t\tif (advertising & RTL_ADVERTISED_1000_FULL) {\n\t\t\t\tnew1 |= ADVERTISE_1000FULL;\n\t\t\t\ttp->ups_info.speed_duplex = NWAY_1000M_FULL;\n\t\t\t}\n\n\t\t\tif (orig != new1) {\n\t\t\t\tret = r8152_mdio_write(tp, MII_CTRL1000, new1);\n\t\t\t\tif (ret < 0)\n\t\t\t\t\tgoto out;\n\t\t\t}\n\t\t}\n\n\t\tif (tp->support_2500full || tp->support_5000full) {\n\t\t\tret = ocp_reg_read(tp, OCP_10GBT_CTRL, &orig);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\n\t\t\tnew1 = orig;\n\t\t\tnew1 &= ~(MDIO_AN_10GBT_CTRL_ADV2_5G |\n\t\t\t\t  MDIO_AN_10GBT_CTRL_ADV5G);\n\n\t\t\tif (advertising & RTL_ADVERTISED_2500_FULL) {\n\t\t\t\tnew1 |= MDIO_AN_10GBT_CTRL_ADV2_5G;\n\t\t\t\ttp->ups_info.speed_duplex = NWAY_2500M_FULL;\n\t\t\t}\n\n\t\t\tif (advertising & RTL_ADVERTISED_5000_FULL) {\n\t\t\t\tnew1 |= MDIO_AN_10GBT_CTRL_ADV5G;\n\t\t\t\ttp->ups_info.speed_duplex = NWAY_5000M_FULL;\n\t\t\t}\n\n\t\t\tif (orig != new1) {\n\t\t\t\tret = ocp_reg_write(tp, OCP_10GBT_CTRL, new1);\n\t\t\t\tif (ret < 0)\n\t\t\t\t\tgoto out;\n\t\t\t}\n\t\t}\n\n\t\tbmcr = BMCR_ANENABLE | BMCR_ANRESTART;\n\n\t\ttp->mii.force_media = 0;\n\t}\n\n\tif (test_and_clear_bit(PHY_RESET, &tp->flags))\n\t\tbmcr |= BMCR_RESET;\n\n\tret = r8152_mdio_write(tp, MII_BMCR, bmcr);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (bmcr & BMCR_RESET) {\n\t\tint i;\n\n\t\tfor (i = 0; i < 50; i++) {\n\t\t\tmsleep(20);\n\t\t\tret = r8152_mdio_read(tp, MII_BMCR);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\t\t\tif ((ret & BMCR_RESET) == 0)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (test_and_clear_bit(DISABLE_EEE_BOTTOM, &tp->flags)) {\n\t\tret = rtl_disable_eee_bottom(tp);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\nout:\n\treturn (ret < 0) ? ret : 0;\n}\n\nstatic bool rtl_speed_down(struct r8152 *tp)\n{\n\tbool ret = false;\n\tint r;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn ret;\n\n\tif (!(tp->saved_wolopts & WAKE_ANY)) {\n\t\tswitch (tp->version) {\n\t\tcase RTL_VER_01:\n\t\tcase RTL_VER_02:\n\t\t\tset_bit(RECOVER_SPEED, &tp->flags);\n\t\t\tret = true;\n\t\t\tr = r8152_mdio_set_bit(tp, MII_BMCR, BMCR_PDOWN);\n\t\t\tif (r < 0)\n\t\t\t\tgoto out1;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t} else if (!(tp->saved_wolopts & WAKE_PHY)) {\n\t\tu16 bmcr;\n\n\t\tr = r8152_mdio_read(tp, MII_BMCR);\n\t\tif (r < 0)\n\t\t\tgoto out1;\n\n\t\tbmcr = r;\n\t\tr = r8152_mdio_read(tp, MII_EXPANSION);\n\t\tif (r < 0)\n\t\t\tgoto out1;\n\n\t\tif (netif_carrier_ok(tp->netdev) && (bmcr & BMCR_ANENABLE) &&\n\t\t    (r & EXPANSION_NWAY)) {\n\t\t\tu16 anar, gbcr = 0, lpa, gbcr2 = 0, lpa2, lpa3;\n\n\t\t\tr = r8152_mdio_read(tp, MII_ADVERTISE);\n\t\t\tif (r < 0)\n\t\t\t\tgoto out1;\n\n\t\t\tanar = r;\n\t\t\tanar &= ~(ADVERTISE_10HALF | ADVERTISE_10FULL |\n\t\t\t\t  ADVERTISE_100HALF | ADVERTISE_100FULL);\n\n\t\t\tif (tp->mii.supports_gmii) {\n\t\t\t\tr = r8152_mdio_read(tp, MII_CTRL1000);\n\t\t\t\tif (r < 0)\n\t\t\t\t\tgoto out1;\n\n\t\t\t\tgbcr = r;\n\t\t\t\tgbcr &= ~(ADVERTISE_1000FULL |\n\t\t\t\t\t  ADVERTISE_1000HALF);\n\t\t\t}\n\n\t\t\tif (tp->support_2500full || tp->support_5000full) {\n\t\t\t\tr = ocp_reg_read(tp, OCP_10GBT_CTRL, &gbcr2);\n\t\t\t\tif (r < 0)\n\t\t\t\t\tgoto out1;\n\t\t\t\tgbcr2 &= ~(MDIO_AN_10GBT_CTRL_ADV2_5G |\n\t\t\t\t\t   MDIO_AN_10GBT_CTRL_ADV5G);\n\t\t\t}\n\n\t\t\tr = r8152_mdio_read(tp, MII_LPA);\n\t\t\tif (r < 0)\n\t\t\t\tgoto out1;\n\t\t\tlpa = r;\n\t\t\tr = r8152_mdio_read(tp, MII_STAT1000);\n\t\t\tif (r < 0)\n\t\t\t\tgoto out1;\n\t\t\tlpa2 = r;\n\t\t\tr = r8152_mdio_read(tp, OCP_10GBT_STAT);\n\t\t\tif (r < 0)\n\t\t\t\tgoto out1;\n\t\t\tlpa3 = r;\n\t\t\tif (lpa & (LPA_10HALF | LPA_10FULL)) {\n\t\t\t\tanar |= ADVERTISE_10HALF | ADVERTISE_10FULL;\n\t\t\t\trtl_eee_plus_en(tp, true);\n\t\t\t} else if (lpa & (LPA_100HALF | LPA_100FULL)) {\n\t\t\t\tanar |= ADVERTISE_10HALF | ADVERTISE_10FULL |\n\t\t\t\t\tADVERTISE_100HALF | ADVERTISE_100FULL;\n\t\t\t} else if (lpa2 & (LPA_1000HALF | LPA_1000FULL)) {\n\t\t\t\tgbcr |= ADVERTISE_1000FULL | ADVERTISE_1000HALF;\n\t\t\t} else if (lpa3 & MDIO_AN_10GBT_STAT_LP2_5G)  {\n\t\t\t\tgbcr2 |= MDIO_AN_10GBT_CTRL_ADV2_5G;\n\t\t\t} else if (lpa3 & MDIO_AN_10GBT_STAT_LP5G)  {\n\t\t\t\tgbcr2 |= MDIO_AN_10GBT_CTRL_ADV5G;\n\t\t\t} else {\n\t\t\t\tgoto out1;\n\t\t\t}\n\n\t\t\tset_bit(RECOVER_SPEED, &tp->flags);\n\t\t\tret = true;\n\n\t\t\tif (tp->mii.supports_gmii) {\n\t\t\t\tr = r8152_mdio_write(tp, MII_CTRL1000, gbcr);\n\t\t\t\tif (r < 0)\n\t\t\t\t\tgoto out1;\n\t\t\t}\n\n\t\t\tif (tp->support_2500full || tp->support_5000full) {\n\t\t\t\tr = ocp_reg_write(tp, OCP_10GBT_CTRL, gbcr2);\n\t\t\t\tif (r < 0)\n\t\t\t\t\tgoto out1;\n\t\t\t}\n\n\t\t\tr = r8152_mdio_write(tp, MII_ADVERTISE, anar);\n\t\t\tif (r < 0)\n\t\t\t\tgoto out1;\n\t\t\tr = r8152_mdio_write(tp, MII_BMCR, bmcr | BMCR_ANRESTART);\n\t\t\tif (r < 0)\n\t\t\t\tgoto out1;\n\t\t}\n\t}\n\nout1:\n\treturn ret;\n}\n\nstatic int rtl8152_up(struct r8152 *tp)\n{\n\tint ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tret = r8152_aldps_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8152b_exit_oob(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8152_aldps_en(tp, true);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8152_down(struct r8152 *tp)\n{\n\tint ret, err = 0;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags)) {\n\t\trtl_drop_queued_tx(tp);\n\t\trtl_stop_rx(tp);\n\t\treturn -ENODEV;\n\t}\n\n\tret = r8152_power_cut_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8152_aldps_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8152b_enter_oob(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8152_aldps_en(tp, true);\n\n\n\tif (err < 0)\n\t\treturn err;\n\telse\n\t\treturn ret;\n}\n\nstatic int rtl8153_up(struct r8152 *tp)\n{\n\tint ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tret = r8153_u1u2en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_u2p3en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_aldps_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_first_init(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_SSPHYLINK1,\n\t\t\t\tDELAY_PHY_PWR_CHG);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_aldps_en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\t\tbreak;\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\tdefault:\n\t\tret = r8153_u2p3en(tp, true);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tbreak;\n\t}\n\n\tret = r8153_u1u2en(tp, true);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8153_down(struct r8152 *tp)\n{\n\tint ret, err = 0;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags)) {\n\t\trtl_drop_queued_tx(tp);\n\t\trtl_stop_rx(tp);\n\t\treturn -ENODEV;\n\t}\n\n\tret = r8153_u1u2en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_u2p3en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_power_cut_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_aldps_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_enter_oob(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_aldps_en(tp, true);\n\n\tif (err < 0)\n\t\treturn err;\n\telse\n\t\treturn ret;\n}\n\nstatic int rtl8153b_up(struct r8152 *tp)\n{\n\tint ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tret = r8153b_u1u2en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_u2p3en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_aldps_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_first_init(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_dword(tp, MCU_TYPE_USB, USB_RX_BUF_TH, RX_THR_B);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153b_mcu_spdown_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_aldps_en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n//\tret = r8153_u2p3en(tp, true);\n//\tif (ret < 0)\n//\t\tgoto out;\n\tif (tp->udev->speed >= USB_SPEED_SUPER)\n\t\tret = r8153b_u1u2en(tp, true);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8153b_down(struct r8152 *tp)\n{\n\tint ret, err = 0;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags)) {\n\t\trtl_drop_queued_tx(tp);\n\t\trtl_stop_rx(tp);\n\t\treturn -ENODEV;\n\t}\n\n\tret = r8153b_mcu_spdown_en(tp, true);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153b_u1u2en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_u2p3en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153b_power_cut_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_aldps_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_enter_oob(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_aldps_en(tp, true);\n\n\tif (err < 0)\n\t\treturn err;\n\telse\n\t\treturn ret;\n}\n\nstatic int rtl8153c_change_mtu(struct r8152 *tp)\n{\n\tint ret;\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RMS,\n\t\t\t     mtu_to_size(tp->netdev->mtu));\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, 0xe048,\n\t\t\t     mtu_to_size(tp->netdev->mtu));\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_MTPS, 10 * 1024 / 64);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_TXFIFO_CTRL, 512 / 64);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* Adjust the tx fifo free credit full threshold, otherwise\n\t * the fifo would be too small to send a jumbo frame packet.\n\t */\n\tif (tp->netdev->mtu < 8000)\n\t\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_TXFIFO_FULL,\n\t\t\t\t     2048 / 8);\n\telse\n\t\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_TXFIFO_FULL,\n\t\t\t\t     900 / 8);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8153c_up(struct r8152 *tp)\n{\n\tint ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tret = r8153b_u1u2en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_u2p3en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_aldps_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rxdy_gated_en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_teredo_off(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_dword_clr_bits(tp, MCU_TYPE_PLA, PLA_RCR, RCR_ACPT_ALL);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl8152_nic_reset(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = rtl_reset_bmu(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL, NOW_IS_OOB);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, MCU_BORW_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\twait_oob_link_list_ready(tp);\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, RE_INIT_LL);\n\tif (ret < 0)\n\t\tgoto out;\n\n\twait_oob_link_list_ready(tp);\n\n\tret = rtl_rx_vlan_en(tp, tp->netdev->features & NETIF_F_HW_VLAN_CTAG_RX);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl8153c_change_mtu(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl8152_nic_reset(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* rx share fifo credit full threshold */\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL0, 0x02);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_RXFIFO_FULL, 0x08);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL1, RXFIFO_THR2_NORMAL);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RXFIFO_CTRL2, RXFIFO_THR3_NORMAL);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_dword(tp, MCU_TYPE_USB, USB_RX_BUF_TH, RX_THR_B);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR, CRWECR_CONFIG);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_CONFIG34, BIT(8));\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR, CRWECR_NORAML);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153b_mcu_spdown_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_aldps_en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n//\tret = r8153_u2p3en(tp, true);\n//\tif (ret < 0)\n//\t\tgoto out;\n\tret = r8153b_u1u2en(tp, true);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8156_change_mtu(struct r8152 *tp)\n{\n\tu32 rx_max_size = mtu_to_size(tp->netdev->mtu);\n\tint ret;\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RMS, rx_max_size);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_MTPS, MTPS_JUMBO);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8156_fc_parameter(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* TX share fifo free credit full threshold */\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_TXFIFO_CTRL, 512 / 64);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_TXFIFO_FULL,\n\t\t\t     ALIGN(rx_max_size + tp->tx_desc.size, 1024) / 16);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8156_up(struct r8152 *tp)\n{\n\tint ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tret = r8153b_u1u2en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_u2p3en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_aldps_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rxdy_gated_en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_teredo_off(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_dword_clr_bits(tp, MCU_TYPE_PLA, PLA_RCR, RCR_ACPT_ALL);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl8152_nic_reset(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = rtl_reset_bmu(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL, NOW_IS_OOB);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, MCU_BORW_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_rx_vlan_en(tp,\n\t\t\t     tp->netdev->features & NETIF_F_HW_VLAN_CTAG_RX);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl8156_change_mtu(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tswitch (tp->version) {\n\tcase RTL_TEST_01:\n\tcase RTL_VER_10:\n\tcase RTL_VER_11:\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, USB_BMU_CONFIG,\n\t\t\t\t\tACT_ODMA);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\n\t/* share FIFO settings */\n\tret = ocp_word_w0w1(tp, MCU_TYPE_PLA, PLA_RXFIFO_FULL, RXFIFO_FULL_MASK,\n\t\t\t    0x08);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153b_mcu_spdown_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_SPEED_OPTION,\n\t\t\t\tRG_PWRDN_EN | ALL_SPEED_OFF);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_dword(tp, MCU_TYPE_USB, USB_RX_BUF_TH, 0x00600400);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->saved_wolopts != __rtl_get_wol(tp)) {\n\t\tnetif_warn(tp, ifup, tp->netdev, \"wol setting is changed\\n\");\n\t\tret = __rtl_set_wol(tp, tp->saved_wolopts);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = r8153_aldps_en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_u2p3en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* Enable Clear_SDR */\n\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, 0xd3ca, BIT(15));\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->udev->speed >= USB_SPEED_SUPER)\n\t\tret = r8153b_u1u2en(tp, true);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8156_down(struct r8152 *tp)\n{\n\tint ret, err = 0;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags)) {\n\t\trtl_drop_queued_tx(tp);\n\t\trtl_stop_rx(tp);\n\t\treturn -ENODEV;\n\t}\n\n\tret = r8153b_mcu_spdown_en(tp, true);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153b_u1u2en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_u2p3en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153b_power_cut_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_aldps_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL, NOW_IS_OOB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\t/* RX FIFO settings for OOB */\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RXFIFO_FULL, 64 / 16);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RX_FIFO_FULL, 1024 / 16);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RX_FIFO_EMPTY, 4096 / 16);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = rtl_disable(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = rtl_reset_bmu(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RMS, 1522);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_MTPS, MTPS_DEFAULT);\n\tif (ret < 0)\n\t\terr = ret;\n\n\t/* Clear teredo wake event. bit[15:8] is the teredo wakeup\n\t * type. Set it to zero. bits[7:0] are the W1C bits about\n\t * the events. Set them to all 1 to clear them.\n\t */\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_TEREDO_WAKE_BASE, 0x00ff);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_BDC_CR, ALDPS_PROXY_MODE);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_byte_set_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL,\n\t\t\t\tNOW_IS_OOB | DIS_MCU_CLROOB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, MCU_BORW_EN);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = rtl_rx_vlan_en(tp, true);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = rxdy_gated_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_dword_set_bits(tp, MCU_TYPE_PLA, PLA_RCR,\n\t\t\t\t RCR_APM | RCR_AM | RCR_AB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = r8153_aldps_en(tp, true);\n\n\tif (err < 0)\n\t\treturn err;\n\telse\n\t\treturn ret;\n}\n\nstatic int rtl8157_change_mtu(struct r8152 *tp)\n{\n\tu32 rx_max_size = mtu_to_size(tp->netdev->mtu);\n\tint ret;\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RMS,\n\t\t\t     mtu_to_size(tp->netdev->mtu));\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* 16 * 1024 / 64 = 0x100, so the max is 0xff for 8 bits data */\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_MTPS, 0xff);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8156_fc_parameter(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* TX share fifo free credit full threshold */\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_TXFIFO_CTRL, 512 / 64);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_TXFIFO_FULL,\n\t\t\t     ALIGN(rx_max_size + tp->tx_desc.size, 1024) / 16);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8157_up(struct r8152 *tp)\n{\n\tint ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tret = r8153b_u1u2en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_u2p3en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_aldps_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rxdy_gated_en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = r8153_teredo_off(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_dword_clr_bits(tp, MCU_TYPE_PLA, PLA_RCR, RCR_ACPT_ALL);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl8152_nic_reset(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL, NOW_IS_OOB);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, MCU_BORW_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_rx_vlan_en(tp,\n\t\t\t     tp->netdev->features & NETIF_F_HW_VLAN_CTAG_RX);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl8157_change_mtu(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_reset_bmu(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* share FIFO settings */\n\tret = ocp_word_w0w1(tp, MCU_TYPE_PLA, PLA_RXFIFO_FULL, RXFIFO_FULL_MASK,\n\t\t\t    0x08);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153b_mcu_spdown_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_dword(tp, MCU_TYPE_USB, USB_RX_BUF_TH, 0x00600400);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->saved_wolopts != __rtl_get_wol(tp)) {\n\t\tnetif_warn(tp, ifup, tp->netdev, \"wol setting is changed\\n\");\n\t\tret = __rtl_set_wol(tp, tp->saved_wolopts);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = r8153_aldps_en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* Clear_SDR */\n\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, 0xd378, BIT(7));\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, 0xcd06, BIT(15));\n\tif (ret < 0)\n\t\tgoto out;\n\n//\tret = r8153_u2p3en(tp, true);\n//\tif (ret < 0)\n//\t\tgoto out;\n//\n//\tif (tp->udev->speed >= USB_SPEED_SUPER)\n//\t\tret = r8153b_u1u2en(tp, true);\n\nout:\n\treturn ret;\n}\n\nstatic int rtl8157_down(struct r8152 *tp)\n{\n\tint ret, err = 0;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags)) {\n\t\trtl_drop_queued_tx(tp);\n\t\trtl_stop_rx(tp);\n\t\treturn -ENODEV;\n\t}\n\n\tret = r8153b_mcu_spdown_en(tp, true);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153b_u1u2en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_u2p3en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = r8153_aldps_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL, NOW_IS_OOB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\t/* RX FIFO settings for OOB */\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RXFIFO_FULL, 64 / 16);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RX_FIFO_FULL, 1024 / 16);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RX_FIFO_EMPTY, 4096 / 16);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = rtl_disable(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = rtl_reset_bmu(tp);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_RMS, 1526);\n\tif (ret < 0)\n\t\terr = ret;\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_MTPS, 10 * 1024 / 64);\n\tif (ret < 0)\n\t\terr = ret;\n\n\t/* Clear teredo wake event. bit[15:8] is the teredo wakeup\n\t * type. Set it to zero. bits[7:0] are the W1C bits about\n\t * the events. Set them to all 1 to clear them.\n\t */\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_TEREDO_WAKE_BASE, 0x00ff);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = rtl_rx_vlan_en(tp, true);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_BDC_CR, ALDPS_PROXY_MODE);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_byte_set_bits(tp, MCU_TYPE_PLA, PLA_OOB_CTRL,\n\t\t\t\tNOW_IS_OOB | DIS_MCU_CLROOB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_SFF_STS_7, MCU_BORW_EN);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = rxdy_gated_en(tp, false);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = ocp_dword_set_bits(tp, MCU_TYPE_PLA, PLA_RCR,\n\t\t\t\t RCR_APM | RCR_AM | RCR_AB);\n\tif (ret < 0)\n\t\terr = ret;\n\n\tret = r8153_aldps_en(tp, true);\n\n\tif (err < 0)\n\t\treturn err;\n\telse\n\t\treturn ret;\n}\n\nstatic bool rtl8152_in_nway(struct r8152 *tp)\n{\n\tu32 nway_state;\n\n\tif (ocp_write_word(tp, MCU_TYPE_PLA, PLA_OCP_GPHY_BASE, 0x2000) < 0) {\n\t\trtl_reset_ocp_base(tp);\n\t\treturn false;\n\t}\n\ttp->ocp_base = 0x2000;\n\n\t/* phy state */\n\tif (ocp_write_byte(tp, MCU_TYPE_PLA, 0xb014, 0x4c) < 0)\n\t\treturn false;\n\tif (ocp_read_word(tp, MCU_TYPE_PLA, 0xb01a, &nway_state) < 0)\n\t\treturn false;\n\n\t/* bit 15: TXDIS_STATE, bit 14: ABD_STATE */\n\tif (nway_state & 0xc000)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\n\nstatic bool rtl8153_in_nway(struct r8152 *tp)\n{\n\tu16 phy_state;\n\n\tif (ocp_reg_read(tp, OCP_PHY_STATE, &phy_state) < 0)\n\t\treturn false;\n\n\tphy_state &= 0xff;\n\n\tif (phy_state == TXDIS_STATE || phy_state == ABD_STATE)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\n\nstatic int r8156_mdio_force_mode(struct r8152 *tp)\n{\n\t/* Select force mode through 0xa5b4 bit 15\n\t * 0: MDIO force mode\n\t * 1: MMD force mode\n\t */\n\treturn ocp_reg_clr_bits(tp, 0xa5b4, BIT(15));\n}\n\nstatic void set_carrier(struct r8152 *tp)\n{\n\tstruct net_device *netdev = tp->netdev;\n\tstruct napi_struct *napi = &tp->napi;\n\tu16 speed;\n\n\tspeed = rtl8152_get_speed(tp);\n\n\tif (speed & LINK_STATUS) {\n\t\tif (!netif_carrier_ok(netdev)) {\n\t\t\ttp->rtl_ops.enable(tp);\n\t\t\tnetif_stop_queue(netdev);\n\t\t\tnapi_disable(napi);\n\t\t\tnetif_carrier_on(netdev);\n\t\t\trtl_start_rx(tp);\n\t\t\trtl8152_set_rx_mode(netdev);\n\t\t\tnapi_enable(napi);\n\t\t\tnetif_wake_queue(netdev);\n\t\t\tnetif_info(tp, link, netdev, \"carrier on\\n\");\n\t\t} else if (netif_queue_stopped(netdev) &&\n\t\t\t   skb_queue_len(&tp->tx_queue) < tp->tx_qlen) {\n\t\t\tnetif_wake_queue(netdev);\n\t\t}\n\t} else {\n\t\tif (netif_carrier_ok(netdev)) {\n\t\t\tnetif_carrier_off(netdev);\n\t\t\ttasklet_disable(&tp->tx_tl);\n\t\t\tnapi_disable(napi);\n\t\t\ttp->rtl_ops.disable(tp);\n\t\t\tnapi_enable(napi);\n\t\t\ttasklet_enable(&tp->tx_tl);\n\t\t\tnetif_info(tp, link, netdev, \"carrier off\\n\");\n\t\t}\n\t}\n}\n\nstatic inline void __rtl_work_func(struct r8152 *tp)\n{\n\t/* If the device is unplugged or !netif_running(), the workqueue\n\t * doesn't need to wake the device, and could return directly.\n\t */\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags) || !netif_running(tp->netdev))\n\t\treturn;\n\n\tif (usb_autopm_get_interface(tp->intf) < 0)\n\t\treturn;\n\n\tif (!test_bit(WORK_ENABLE, &tp->flags))\n\t\tgoto out1;\n\n\tif (!mutex_trylock(&tp->control)) {\n\t\tif (tp->rtk_enable_diag)\n\t\t\tgoto link_chg_only;\n\n\t\tschedule_delayed_work(&tp->schedule, 0);\n\t\tgoto out1;\n\t}\n\n\tif (test_and_clear_bit(RTL8152_LINK_CHG, &tp->flags))\n\t\tset_carrier(tp);\n\n\tif (test_bit(RTL8152_SET_RX_MODE, &tp->flags))\n\t\trtl8152_set_rx_mode(tp->netdev);\n\n\t/* don't schedule tasket before linking */\n\tif (test_and_clear_bit(SCHEDULE_TASKLET, &tp->flags) &&\n\t    netif_carrier_ok(tp->netdev))\n\t\ttasklet_schedule(&tp->tx_tl);\n\n\tif (test_and_clear_bit(RX_EPROTO, &tp->flags) &&\n\t    !list_empty(&tp->rx_done))\n\t\tnapi_schedule(&tp->napi);\n\n\tmutex_unlock(&tp->control);\n\nout1:\n\tusb_autopm_put_interface(tp->intf);\n\nlink_chg_only:\n\tif (test_and_clear_bit(RTL8152_LINK_CHG, &tp->flags)) {\n\t\tint lock;\n\n\t\trtnl_lock();\n\t\tlock = mutex_trylock(&tp->control);\n\t\tset_carrier(tp);\n\t\tif (lock)\n\t\t\tmutex_unlock(&tp->control);\n\t\trtnl_unlock();\n\t\tgoto out1;\n\t}\n}\n\nstatic inline void __rtl_hw_phy_work_func(struct r8152 *tp)\n{\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn;\n\n\tif (usb_autopm_get_interface(tp->intf) < 0)\n\t\treturn;\n\n\tmutex_lock(&tp->control);\n\n\ttp->rtl_ops.hw_phy_cfg(tp);\n\n\trtl8152_set_speed(tp, tp->autoneg, tp->speed, tp->duplex,\n\t\t\t  tp->advertising);\n\n\tmutex_unlock(&tp->control);\n\n\tusb_autopm_put_interface(tp->intf);\n}\n\n#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,20)\n\nstatic void rtl_work_func_t(void *data)\n{\n\tstruct r8152 *tp = (struct r8152 *)data;\n\n\t__rtl_work_func(tp);\n}\n\nstatic void rtl_hw_phy_work_func_t(void *data)\n{\n\tstruct r8152 *tp = (struct r8152 *)data;\n\n\t__rtl_hw_phy_work_func(tp);\n}\n\n#else\n\nstatic void rtl_work_func_t(struct work_struct *work)\n{\n\tstruct r8152 *tp = container_of(work, struct r8152, schedule.work);\n\n\t__rtl_work_func(tp);\n}\n\nstatic void rtl_hw_phy_work_func_t(struct work_struct *work)\n{\n\tstruct r8152 *tp = container_of(work, struct r8152, hw_phy_work.work);\n\n\t__rtl_hw_phy_work_func(tp);\n}\n\n#endif\n\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,23) && defined(CONFIG_PM_SLEEP)\nstatic int rtl_notifier(struct notifier_block *nb, unsigned long action,\n\t\t\tvoid *data)\n{\n\tstruct r8152 *tp = container_of(nb, struct r8152, pm_notifier);\n\n\tswitch (action) {\n\tcase PM_HIBERNATION_PREPARE:\n\tcase PM_SUSPEND_PREPARE:\n\t\tif (usb_autopm_get_interface(tp->intf) < 0)\n\t\t\tnetif_info(tp, drv, tp->netdev, \"Auto-wake fail\\n\");\n\t\tbreak;\n\n\tcase PM_POST_HIBERNATION:\n\tcase PM_POST_SUSPEND:\n\t\tusb_autopm_put_interface(tp->intf);\n\t\tbreak;\n\n\tcase PM_POST_RESTORE:\n\tcase PM_RESTORE_PREPARE:\n\tdefault:\n\t\tbreak;\n\t}\n\n\treturn NOTIFY_DONE;\n}\n#endif /* LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,23) && defined(CONFIG_PM_SLEEP) */\n\n#if defined(RTL8152_S5_WOL) && defined(CONFIG_PM)\nstatic int rtl_s5_wol(struct r8152 *tp)\n{\n\tstruct usb_device *udev = tp->udev;\n\tu32 ocp_data;\n\tint ret;\n\n\tif (!tp->saved_wolopts)\n\t\treturn -EOPNOTSUPP;\n\n\tswitch (tp->version) {\n\tcase RTL_VER_01:\n\tcase RTL_VER_02:\n\tcase RTL_VER_07:\n\t\treturn -EOPNOTSUPP;\n\tcase RTL_VER_03:\n\tcase RTL_VER_04:\n\tcase RTL_VER_05:\n\tcase RTL_VER_06:\n\t\tgoto remote_wake;\n\tdefault:\n\t\tbreak;\n\t}\n\n\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_CONFIG5, &ocp_data);\n\tif (ret < 0)\n\t\tgoto out;\n\tif (!(ocp_data & LAN_WAKE_EN))\n\t\treturn -EOPNOTSUPP;\n\n\tret = ocp_byte_set_bits(tp, MCU_TYPE_PLA, PLA_INDICATE_FALG, BIT(1));\n\tif (ret < 0)\n\t\tgoto out;\n\nremote_wake:\n\t/* usb_enable_remote_wakeup */\n\tif (udev->speed < USB_SPEED_SUPER)\n\t\tret = usb_control_msg(udev, usb_sndctrlpipe(udev, 0),\n\t\t\t\t      USB_REQ_SET_FEATURE, USB_RECIP_DEVICE,\n\t\t\t\t      USB_DEVICE_REMOTE_WAKEUP, 0, NULL, 0,\n\t\t\t\t      USB_CTRL_SET_TIMEOUT);\n\telse\n\t\tret = usb_control_msg(udev, usb_sndctrlpipe(udev, 0),\n\t\t\t\t      USB_REQ_SET_FEATURE, USB_RECIP_INTERFACE,\n\t\t\t\t      USB_INTRF_FUNC_SUSPEND,\n\t\t\t\t      USB_INTRF_FUNC_SUSPEND_RW |\n\t\t\t\t      USB_INTRF_FUNC_SUSPEND_LP,\n\t\t\t\t      NULL, 0, USB_CTRL_SET_TIMEOUT);\nout:\n\treturn (ret < 0) ? ret : 0;\n}\n\nstatic\nint rtl_reboot_notifier(struct notifier_block *nb, unsigned long action,\n\t\t\tvoid *data)\n{\n\tstruct r8152 *tp = container_of(nb, struct r8152, reboot_notifier);\n\n\tswitch (action) {\n\tcase SYS_POWER_OFF:\n\t\tif (test_and_clear_bit(WORK_ENABLE, &tp->flags)) {\n\t\t\tint ret;\n\n\t\t\tif (usb_autopm_get_interface(tp->intf) < 0)\n\t\t\t\tbreak;\n\n\t\t\tmutex_lock(&tp->control);\n\t\t\ttp->rtl_ops.down(tp);\n\t\t\tret = rtl_s5_wol(tp);\n\t\t\tif (ret < 0)\n\t\t\t\tnetif_info(tp, drv, tp->netdev,\n\t\t\t\t\t   \"S5 WOL is not enabled, %d\\n\", ret);\n\t\t\telse\n\t\t\t\tnetif_info(tp, drv, tp->netdev, \"Enable S5 WOL\\n\");\n\n\t\t\tmutex_unlock(&tp->control);\n\t\t\tusb_autopm_put_interface(tp->intf);\n\t\t}\n\t\tbreak;\n\n\tcase SYS_RESTART:\n\tdefault:\n\t\tbreak;\n\t}\n\n\treturn NOTIFY_DONE;\n}\n#endif /* defined(RTL8152_S5_WOL) && defined(CONFIG_PM) */\n\nstatic int rtk_disable_diag(struct r8152 *tp)\n{\n\ttp->rtk_enable_diag--;\n\trtl_reset_ocp_base(tp);\n\n\tif (tp->support_2500full || tp->support_5000full)\n\t\tr8156_mdio_force_mode(tp);\n\n\tnetif_info(tp, drv, tp->netdev, \"disable rtk diag %d\\n\",\n\t\t   tp->rtk_enable_diag);\n\tmutex_unlock(&tp->control);\n\tif (test_bit(WORK_ENABLE, &tp->flags))\n\t\tschedule_delayed_work(&tp->schedule, 0);\n\tusb_autopm_put_interface(tp->intf);\n\n\treturn 0;\n}\n\nstatic int rtl8152_open(struct net_device *netdev)\n{\n\tstruct r8152 *tp = netdev_priv(netdev);\n\tint res = 0;\n\n\tif (unlikely(tp->rtk_enable_diag))\n\t\treturn -EBUSY;\n\n\tif (work_busy(&tp->hw_phy_work.work) & WORK_BUSY_PENDING) {\n\t\tcancel_delayed_work_sync(&tp->hw_phy_work);\n\t\t__rtl_hw_phy_work_func(tp);\n\t}\n\n\tres = alloc_all_mem(tp);\n\tif (res)\n\t\tgoto out;\n\n\tres = usb_autopm_get_interface(tp->intf);\n\tif (res < 0)\n\t\tgoto out_free;\n\n\tmutex_lock(&tp->control);\n\n\tres = tp->rtl_ops.up(tp);\n\tif (res < 0)\n\t\tgoto out_unlock;\n\n\tnetif_carrier_off(netdev);\n\tnetif_start_queue(netdev);\n\tsmp_mb__before_atomic();\n\tset_bit(WORK_ENABLE, &tp->flags);\n\tsmp_mb__after_atomic();\n\n\tif (test_and_clear_bit(RECOVER_SPEED, &tp->flags))\n\t\trtl8152_set_speed(tp, tp->autoneg, tp->speed, tp->duplex,\n\t\t\t\t  tp->advertising);\n\n\tres = usb_submit_urb(tp->intr_urb, GFP_KERNEL);\n\tif (res) {\n\t\tif (res == -ENODEV)\n\t\t\tnetif_device_detach(tp->netdev);\n\t\tnetif_warn(tp, ifup, netdev, \"intr_urb submit failed: %d\\n\",\n\t\t\t   res);\n\t\tgoto out_unwork;\n\t}\n\tnapi_enable(&tp->napi);\n\ttasklet_enable(&tp->tx_tl);\n\n\tmutex_unlock(&tp->control);\n\n\tusb_autopm_put_interface(tp->intf);\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,23) && defined(CONFIG_PM_SLEEP)\n\ttp->pm_notifier.notifier_call = rtl_notifier;\n\tregister_pm_notifier(&tp->pm_notifier);\n#endif\n#if defined(RTL8152_S5_WOL) && defined(CONFIG_PM)\n\ttp->reboot_notifier.notifier_call = rtl_reboot_notifier;\n\tregister_reboot_notifier(&tp->reboot_notifier);\n#endif /* defined(RTL8152_S5_WOL) && defined(CONFIG_PM) */\n\treturn 0;\n\nout_unwork:\n\tclear_bit(WORK_ENABLE, &tp->flags);\nout_unlock:\n\tmutex_unlock(&tp->control);\n\tusb_autopm_put_interface(tp->intf);\nout_free:\n\tfree_all_mem(tp);\nout:\n\treturn res;\n}\n\nstatic int rtl8152_close(struct net_device *netdev)\n{\n\tstruct r8152 *tp = netdev_priv(netdev);\n\tint res = 0;\n\n#if defined(RTL8152_S5_WOL) && defined(CONFIG_PM)\n\tunregister_reboot_notifier(&tp->reboot_notifier);\n#endif /* defined(RTL8152_S5_WOL) && defined(CONFIG_PM) */\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,23) && defined(CONFIG_PM_SLEEP)\n\tunregister_pm_notifier(&tp->pm_notifier);\n#endif\n\ttasklet_disable(&tp->tx_tl);\n\tsmp_mb__before_atomic();\n\tclear_bit(WORK_ENABLE, &tp->flags);\n\tsmp_mb__after_atomic();\n\tusb_kill_urb(tp->intr_urb);\n\tcancel_delayed_work_sync(&tp->schedule);\n\tnapi_disable(&tp->napi);\n\tnetif_stop_queue(netdev);\n\n\tif (unlikely(tp->rtk_enable_diag)) {\n\t\tnetif_err(tp, drv, tp->netdev, \"rtk diag isn't disabled\\n\");\n\t\trtk_disable_diag(tp);\n\t}\n\n\tres = usb_autopm_get_interface(tp->intf);\n\tif (res < 0 || test_bit(RTL8152_UNPLUG, &tp->flags)) {\n\t\trtl_drop_queued_tx(tp);\n\t\trtl_stop_rx(tp);\n\t} else {\n\t\tmutex_lock(&tp->control);\n\n\t\ttp->rtl_ops.down(tp);\n\n#if defined(RTL8152_S5_WOL) && defined(CONFIG_PM)\n\t\tif (rtl_s5_wol(tp) < 0)\n\t\t\tnetif_info(tp, drv, tp->netdev,\n\t\t\t\t   \"S5 WOL is not enabled\\n\");\n\t\telse\n\t\t\tnetif_info(tp, drv, tp->netdev, \"Enable S5 WOL\\n\");\n#endif /* defined(RTL8152_S5_WOL) && defined(CONFIG_PM) */\n\n\t\tif (tp->version == RTL_VER_01)\n\t\t\trtl8152_set_speed(tp, AUTONEG_ENABLE, 0, 0, 3);\n\t\telse\n\t\t\trtl_speed_down(tp);\n\n\t\tmutex_unlock(&tp->control);\n\t}\n\n\tif (!res)\n\t\tusb_autopm_put_interface(tp->intf);\n\n\tfree_all_mem(tp);\n\n\treturn res;\n}\n\nstatic int rtl_tally_reset(struct r8152 *tp)\n{\n\treturn ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_RSTTALLY, TALLY_RESET);\n}\n\nstatic int test_io_en(struct r8152 *tp, bool enable)\n{\n\tif (enable)\n\t    return ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_PHY_PWR,\n\t\t\t\t     TEST_IO_OFF);\n\telse\n\t    return ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_PHY_PWR,\n\t\t\t\t     TEST_IO_OFF);\n}\n\nstatic int rtl_disable_spi(struct r8152 *tp)\n{\n\tint ret;\n\n\tret = ocp_write_byte(tp, MCU_TYPE_PLA, PLA_CRWECR, CRWECR_CONFIG);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_CONFIG5, SPI_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, 0xcbf0, BIT(1));\n\nout:\n\treturn ret;\n}\n\nstatic int r8152b_init(struct r8152 *tp)\n{\n\tint ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n#if 0\n\t/* Clear EP3 Fifo before using interrupt transfer */\n\tret = ocp_read_byte(tp, MCU_TYPE_USB, 0xb963, &ocp_data);\n\tif (ret < 0)\n\t\tgoto out;\n\tif (ocp_data & 0x80) {\n\t\tret = ocp_write_byte(tp, MCU_TYPE_USB, 0xb963, 0x08);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_write_byte(tp, MCU_TYPE_USB, 0xb963, 0x40);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_write_byte(tp, MCU_TYPE_USB, 0xb963, 0x00);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_write_byte(tp, MCU_TYPE_USB, 0xb968, 0x00);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_write_word(tp, MCU_TYPE_USB, 0xb010, 0x00e0);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = ocp_write_byte(tp, MCU_TYPE_USB, 0xb963, 0x04);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n#endif\n\n\tret = r8153_phy_status(tp, 0);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8152_mdio_test_and_clr_bit(tp, MII_BMCR, BMCR_PDOWN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8152_aldps_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->version == RTL_VER_01) {\n\t\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_LED_FEATURE,\n\t\t\t\t\tLED_MODE_MASK);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = r8152_power_cut_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_runtime_suspend_enable(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_PHY_PWR,\n\t\t\t\tTX_10M_IDLE_EN | PFM_PWM_SWITCH);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_dword_w0w1(tp, MCU_TYPE_PLA, PLA_MAC_PWR_CTRL,\n\t\t\t     MCU_CLK_RATIO_MASK, MCU_CLK_RATIO |\n\t\t\t     D3_CLK_GATED_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_word(tp, MCU_TYPE_PLA, PLA_GPHY_INTR_IMR,\n\t\t\t     GPHY_STS_MSK | SPEED_DOWN_MSK | SPDWN_RXDV_MSK |\n\t\t\t     SPDWN_LINKCHG_MSK);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, USB_USB_TIMER, BIT(15));\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* MSC timer = 8s */\n\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_MSC_TIMER, 8000 / 8);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_USB_TIMER, BIT(15));\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_tally_reset(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* enable rx aggregation */\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_USB_CTRL,\n\t\t\t\tRX_AGG_DISABLE | RX_ZERO_EN);\n\nout:\n\treturn (ret < 0) ? ret : 0;\n}\n\nstatic int r8153_init(struct r8152 *tp)\n{\n\tu32 ocp_data;\n\tint i, ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\tret = r8153_u1u2en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tfor (i = 0; i < 500; i++) {\n\t\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_BOOT_CTRL, &ocp_data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tif (ocp_data & AUTOLOAD_DONE)\n\t\t\tbreak;\n\n\t\tmsleep(20);\n\t}\n\n\tret = r8153_phy_status(tp, 0);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->version == RTL_VER_03 || tp->version == RTL_VER_04 ||\n\t    tp->version == RTL_VER_05) {\n\t\tret = ocp_reg_write(tp, OCP_ADC_CFG, CKADSEL_L | ADC_EN |\n\t\t\t\t    EN_EMI_L);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = r8152_mdio_test_and_clr_bit(tp, MII_BMCR, BMCR_PDOWN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_phy_status(tp, PHY_STAT_LAN_ON);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_u2p3en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->version == RTL_VER_04) {\n\t\tret = ocp_word_w0w1(tp, MCU_TYPE_USB, USB_SSPHYLINK2,\n\t\t\t\t    pwd_dn_scale_mask, pwd_dn_scale(96));\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, USB_USB2PHY,\n\t\t\t\t\tUSB2PHY_L1 | USB2PHY_SUSPEND);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t} else if (tp->version == RTL_VER_05) {\n\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_PLA, PLA_DMY_REG0, ECM_ALDPS);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = ocp_read_word(tp, MCU_TYPE_USB, USB_BURST_SIZE, &ocp_data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tif (ocp_data == 0)\n\t\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_USB, USB_CSR_DUMMY1,\n\t\t\t\t\t\tDYNAMIC_BURST);\n\t\telse\n\t\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, USB_CSR_DUMMY1,\n\t\t\t\t\t\tDYNAMIC_BURST);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t} else if (tp->version == RTL_VER_06) {\n\t\tret = ocp_read_word(tp, MCU_TYPE_USB, USB_BURST_SIZE, &ocp_data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tif (ocp_data == 0)\n\t\t\tret = ocp_byte_clr_bits(tp, MCU_TYPE_USB,\n\t\t\t\t\t\tUSB_CSR_DUMMY1,\n\t\t\t\t\t\tDYNAMIC_BURST);\n\t\telse\n\t\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB,\n\t\t\t\t\t\tUSB_CSR_DUMMY1,\n\t\t\t\t\t\tDYNAMIC_BURST);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = r8153_queue_wake(tp, false);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tif (rtl8152_get_speed(tp) & LINK_STATUS)\n\t\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA,\n\t\t\t\t\t\tPLA_EXTRA_STATUS,\n\t\t\t\t\t\tCUR_LINK_OK | POLL_LINK_CHG);\n\t\telse\n\t\t\tret = ocp_word_w0w1(tp, MCU_TYPE_PLA, PLA_EXTRA_STATUS,\n\t\t\t\t\t    CUR_LINK_OK, POLL_LINK_CHG);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, USB_CSR_DUMMY2, EP4_FULL_FC);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_WDT11_CTRL, TIMER11_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_PLA, PLA_LED_FEATURE,\n\t\t\t\tLED_MODE_MASK);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->version == RTL_VER_04 && tp->udev->speed < USB_SPEED_SUPER)\n\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, USB_LPM_CTRL,\n\t\t\t\t\tFIFO_EMPTY_1FB | ROK_EXIT_LPM |\n\t\t\t\t\tLPM_TIMER_500MS);\n\telse\n\t\tret = ocp_byte_set_bits(tp, MCU_TYPE_USB, USB_LPM_CTRL,\n\t\t\t\t\tFIFO_EMPTY_1FB | ROK_EXIT_LPM |\n\t\t\t\t\tLPM_TIMER_500US);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_word_w0w1(tp, MCU_TYPE_USB, USB_AFE_CTRL2, SEN_VAL_MASK,\n\t\t\t    SEN_VAL_NORMAL | SEL_RXIDLE);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_CONNECT_TIMER, 0x0001);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_power_cut_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_runtime_suspend_enable(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_mac_clk_speed_down(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_u1u2en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tusb_enable_lpm(tp->udev);\n\n\tret = r8153_lanwake_clr_en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* rx aggregation */\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_USB_CTRL,\n\t\t\t\tRX_AGG_DISABLE | RX_ZERO_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_tally_reset(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tswitch (tp->udev->speed) {\n\tcase USB_SPEED_SUPER:\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,6,0)\n\tcase USB_SPEED_SUPER_PLUS:\n#endif\n\t\ttp->coalesce = COALESCE_SUPER;\n\t\tbreak;\n\tcase USB_SPEED_HIGH:\n\t\ttp->coalesce = COALESCE_HIGH;\n\t\tbreak;\n\tdefault:\n\t\ttp->coalesce = COALESCE_SLOW;\n\t\tbreak;\n\t}\n\nout:\n\treturn (ret < 0) ? ret : 0;\n}\n\nstatic int r8153b_init(struct r8152 *tp)\n{\n\tu32 ocp_data;\n\tint i, ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\trtl_set_dbg_info_init(tp, 0xb);\n\n\tret = r8153b_u1u2en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_disable_spi(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tfor (i = 0; i < 500; i++) {\n\t\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_BOOT_CTRL, &ocp_data);\n\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tif (ocp_data & AUTOLOAD_DONE)\n\t\t\tbreak;\n\n\t\tmsleep(20);\n\t}\n\n\tret = r8153_phy_status(tp, 0);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8152_mdio_test_and_clr_bit(tp, MII_BMCR, BMCR_PDOWN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_phy_status(tp, PHY_STAT_LAN_ON);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_u2p3en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* MSC timer = 0xfff * 8ms = 32760 ms */\n\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_MSC_TIMER, 0x0fff);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153b_power_cut_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153b_ups_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_queue_wake(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_runtime_suspend_enable(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (rtl8152_get_speed(tp) & LINK_STATUS)\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_EXTRA_STATUS,\n\t\t\t\t\tCUR_LINK_OK | POLL_LINK_CHG);\n\telse\n\t\tret = ocp_word_w0w1(tp, MCU_TYPE_PLA, PLA_EXTRA_STATUS,\n\t\t\t\t    CUR_LINK_OK, POLL_LINK_CHG);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_lanwake_clr_en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->udev->descriptor.idVendor == VENDOR_ID_LENOVO &&\n\t    tp->udev->descriptor.idProduct == 0x3069)\n\t\tocp_write_word(tp, MCU_TYPE_USB, USB_SSPHYLINK2, 0x0c8c);\n\n//\tif (tp->udev->speed >= USB_SPEED_SUPER) {\n//\t\tret = r8153b_u1u2en(tp, true);\n//\t\tif (ret < 0)\n//\t\t\tgoto out;\n//\t}\n\n\tusb_enable_lpm(tp->udev);\n\n\t/* MAC clock speed down */\n\tret = r8153_mac_clk_speed_down(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153b_mcu_spdown_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->version == RTL_VER_09) {\n\t\t/* Disable Test IO for 32QFN */\n\t\tret = ocp_read_byte(tp, MCU_TYPE_PLA, 0xdc00, &ocp_data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tif (ocp_data & BIT(5)) {\n\t\t\tret = test_io_en(tp, false);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\t\t}\n\t}\n\n\tset_bit(GREEN_ETHERNET, &tp->flags);\n\n\t/* rx aggregation */\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_USB_CTRL,\n\t\t\t\tRX_AGG_DISABLE | RX_ZERO_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_tally_reset(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\ttp->coalesce = 15000;\t/* 15 us */\n\nout:\n\treturn (ret < 0) ? ret : 0;\n}\n\nstatic int r8153c_init(struct r8152 *tp)\n{\n\tu32 ocp_data;\n\tint i, ret;\n\n\tif (test_bit(RTL8152_UNPLUG, &tp->flags))\n\t\treturn -ENODEV;\n\n\trtl_set_dbg_info_init(tp, 0xc);\n\n\tret = r8153b_u1u2en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_disable_spi(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tfor (i = 0; i < 500; i++) {\n\t\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_BOOT_CTRL, &ocp_data);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tif (ocp_data & AUTOLOAD_DONE)\n\t\t\tbreak;\n\n\t\tmsleep(20);\n\t}\n\n\tret = r8153_phy_status(tp, 0);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8152_mdio_test_and_clr_bit(tp, MII_BMCR, BMCR_PDOWN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_phy_status(tp, PHY_STAT_LAN_ON);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_u2p3en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\t/* MSC timer = 0xfff * 8ms = 32760 ms */\n\tret = ocp_write_word(tp, MCU_TYPE_USB, USB_MSC_TIMER, 0x0fff);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153b_power_cut_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153c_ups_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = r8153_queue_wake(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_runtime_suspend_enable(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (rtl8152_get_speed(tp) & LINK_STATUS)\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_EXTRA_STATUS,\n\t\t\t\t\tCUR_LINK_OK | POLL_LINK_CHG);\n\telse\n\t\tret = ocp_word_w0w1(tp, MCU_TYPE_PLA, PLA_EXTRA_STATUS,\n\t\t\t\t    CUR_LINK_OK, POLL_LINK_CHG);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tp->udev->speed < USB_SPEED_SUPER)\n\t\tret = r8153b_u1u2en(tp, false);\n\telse\n\t\tret = r8153b_u1u2en(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tusb_enable_lpm(tp->udev);\n\n\t/* MAC clock speed down */\n\tret = r8153_mac_clk_speed_down(tp, true);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = ocp_byte_clr_bits(tp, MCU_TYPE_USB, USB_MISC_2, BIT(7));\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = test_io_en(tp, false);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tset_bit(GREEN_ETHERNET, &tp->flags);\n\n\t/* rx aggregation */\n\tret = ocp_word_clr_bits(tp, MCU_TYPE_USB, USB_USB_CTRL,\n\t\t\t\tRX_AGG_DISABLE | RX_ZERO_EN);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tret = rtl_tally_reset(tp);\n\tif (ret < 0)\n\t\tgoto out;\n\n\ttp->coalesce = 15000;\t/* 15 us */\n\nout:\n\treturn (ret < 0) ? ret : 0;\n}\n\nstatic void r8156_patch_code(struct r8152 *tp)\n{\n\tif (tp->version == RTL_TEST_01) {\n\t\tstatic u8 usb3_patch_t[] = {\n\t\t\t0x01, 0xe0, 0x05, 0xc7,\n\t\t\t0xf6, 0x65, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x40, 0x03,\n\t\t\t0x00, 0xd4, 0x00, 0x00 };\n\n\t\trtl_clear_bp(tp, MCU_TYPE_USB);\n\n\t\tgeneric_ocp_write(tp, 0xe600, 0xff, sizeof(usb3_patch_t),\n\t\t\t\t  usb3_patch_t, MCU_TYPE_USB);\n\n\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_BA, 0xa000);\n\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_0, 0x033e);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_1, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_2, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_3, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_4, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_5, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_6, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_7, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_8, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_9, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_10, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_11, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_12, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_13, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_14, 0x0000);\n//\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_15, 0x0000);\n\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP2_EN, 0x0001);\n\t} else if (tp->version == RTL_VER_11) {\n\t\tstatic u8 usb_patch3_b[] = {\n\t\t\t0x10, 0xe0, 0x12, 0xe0,\n\t\t\t0x33, 0xe0, 0x7d, 0xe0,\n\t\t\t0x92, 0xe0, 0xae, 0xe0,\n\t\t\t0xce, 0xe0, 0x23, 0xe1,\n\t\t\t0x3f, 0xe1, 0x58, 0xe1,\n\t\t\t0x84, 0xe1, 0xca, 0xe1,\n\t\t\t0xd9, 0xe1, 0xeb, 0xe1,\n\t\t\t0x02, 0xe2, 0xe0, 0xe2,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0xf0, 0x4b, 0x1c, 0xc6,\n\t\t\t0xc0, 0x61, 0x04, 0x11,\n\t\t\t0x15, 0xf1, 0x19, 0xc6,\n\t\t\t0xc0, 0x61, 0x9c, 0x20,\n\t\t\t0x9c, 0x24, 0x09, 0x11,\n\t\t\t0x0f, 0xf1, 0x14, 0xc6,\n\t\t\t0x01, 0x19, 0xc0, 0x89,\n\t\t\t0x13, 0xc1, 0x13, 0xc6,\n\t\t\t0x24, 0x9e, 0x00, 0x1e,\n\t\t\t0x26, 0x8e, 0x26, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0x22, 0x76, 0x08, 0xc1,\n\t\t\t0x22, 0x9e, 0x07, 0xc6,\n\t\t\t0x02, 0xc1, 0x00, 0xb9,\n\t\t\t0x9e, 0x09, 0x18, 0xb4,\n\t\t\t0x4a, 0xb4, 0x90, 0xcc,\n\t\t\t0x80, 0xd4, 0x08, 0xdc,\n\t\t\t0x10, 0xe8, 0x28, 0xe8,\n\t\t\t0x23, 0xc7, 0x21, 0xc2,\n\t\t\t0xec, 0x9a, 0x00, 0x19,\n\t\t\t0xee, 0x89, 0xee, 0x71,\n\t\t\t0x9f, 0x49, 0xfe, 0xf1,\n\t\t\t0xea, 0x71, 0x9f, 0x49,\n\t\t\t0x14, 0xf0, 0x1a, 0xc2,\n\t\t\t0xec, 0x9a, 0x00, 0x19,\n\t\t\t0xe8, 0x99, 0x81, 0x19,\n\t\t\t0xee, 0x89, 0xee, 0x71,\n\t\t\t0x9f, 0x49, 0xfe, 0xf1,\n\t\t\t0x12, 0xc2, 0xec, 0x9a,\n\t\t\t0x00, 0x19, 0x98, 0x20,\n\t\t\t0xe8, 0x99, 0x82, 0x19,\n\t\t\t0xee, 0x89, 0xee, 0x71,\n\t\t\t0x9f, 0x49, 0xfe, 0xf1,\n\t\t\t0x06, 0xc3, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0x3e, 0x29,\n\t\t\t0x4c, 0xe8, 0x00, 0xdc,\n\t\t\t0x00, 0xd4, 0x24, 0xe4,\n\t\t\t0x04, 0xe4, 0x00, 0xb4,\n\t\t\t0x04, 0xb4, 0x05, 0xb4,\n\t\t\t0x06, 0xb4, 0x51, 0xc0,\n\t\t\t0x00, 0x75, 0xd9, 0x49,\n\t\t\t0x17, 0xf0, 0x30, 0xc0,\n\t\t\t0xf6, 0xc5, 0x00, 0x1e,\n\t\t\t0x68, 0x23, 0x08, 0x9e,\n\t\t\t0x0c, 0x9d, 0x82, 0x1c,\n\t\t\t0x0e, 0x8c, 0x0e, 0x74,\n\t\t\t0xcf, 0x49, 0xfe, 0xf1,\n\t\t\t0x25, 0xc0, 0xeb, 0xc5,\n\t\t\t0x11, 0x1e, 0x68, 0x23,\n\t\t\t0x08, 0x9e, 0x0c, 0x9d,\n\t\t\t0x82, 0x1c, 0x0e, 0x8c,\n\t\t\t0x0e, 0x74, 0xcf, 0x49,\n\t\t\t0xfe, 0xf1, 0x06, 0xb0,\n\t\t\t0x05, 0xb0, 0x04, 0xb0,\n\t\t\t0x00, 0xb0, 0x80, 0xff,\n\t\t\t0x32, 0xc0, 0x00, 0x75,\n\t\t\t0xd8, 0x49, 0x0d, 0xf0,\n\t\t\t0x11, 0xc0, 0xd6, 0xc5,\n\t\t\t0x00, 0x1e, 0x08, 0x9e,\n\t\t\t0x73, 0xc6, 0x0a, 0x9e,\n\t\t\t0x0c, 0x9d, 0x8f, 0x1c,\n\t\t\t0x0e, 0x8c, 0x0e, 0x74,\n\t\t\t0xcf, 0x49, 0xfe, 0xf1,\n\t\t\t0x04, 0xc0, 0x02, 0xc1,\n\t\t\t0x00, 0xb9, 0x00, 0x1d,\n\t\t\t0x20, 0xd4, 0x00, 0xdc,\n\t\t\t0xc7, 0xef, 0x1b, 0xc0,\n\t\t\t0x00, 0x75, 0xd8, 0x48,\n\t\t\t0x00, 0x9d, 0xbe, 0xc7,\n\t\t\t0x15, 0xc2, 0xec, 0x9a,\n\t\t\t0x00, 0x19, 0xe8, 0x9a,\n\t\t\t0x81, 0x19, 0xee, 0x89,\n\t\t\t0xee, 0x71, 0x9f, 0x49,\n\t\t\t0xfe, 0xf1, 0x2e, 0xc1,\n\t\t\t0xec, 0x99, 0x81, 0x19,\n\t\t\t0xee, 0x89, 0xee, 0x71,\n\t\t\t0x9f, 0x49, 0xfe, 0xf1,\n\t\t\t0x04, 0xc3, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0x3a, 0x27,\n\t\t\t0xc0, 0xd4, 0x24, 0xe4,\n\t\t\t0x34, 0xd3, 0xc0, 0x88,\n\t\t\t0x1e, 0xc6, 0xc0, 0x70,\n\t\t\t0x8f, 0x49, 0x0e, 0xf0,\n\t\t\t0x8f, 0x48, 0x3f, 0xc6,\n\t\t\t0xca, 0x98, 0x11, 0x18,\n\t\t\t0xc8, 0x98, 0x16, 0xc0,\n\t\t\t0xcc, 0x98, 0x8f, 0x18,\n\t\t\t0xce, 0x88, 0xce, 0x70,\n\t\t\t0x8f, 0x49, 0xfe, 0xf1,\n\t\t\t0x0b, 0xe0, 0x33, 0xc6,\n\t\t\t0x00, 0x18, 0xc8, 0x98,\n\t\t\t0x0b, 0xc0, 0xcc, 0x98,\n\t\t\t0x81, 0x18, 0xce, 0x88,\n\t\t\t0xce, 0x70, 0x8f, 0x49,\n\t\t\t0xfe, 0xf1, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0xbc, 0x21,\n\t\t\t0x40, 0xd3, 0x20, 0xe4,\n\t\t\t0x29, 0xc0, 0x01, 0x66,\n\t\t\t0x05, 0x16, 0x3e, 0xf0,\n\t\t\t0x25, 0x16, 0x40, 0xf0,\n\t\t\t0x09, 0x16, 0x23, 0xf0,\n\t\t\t0x16, 0xe0, 0x1a, 0xc2,\n\t\t\t0x40, 0x76, 0xe1, 0x48,\n\t\t\t0x40, 0x9e, 0x17, 0xc2,\n\t\t\t0x00, 0x1e, 0x48, 0x9e,\n\t\t\t0xef, 0xc6, 0x4c, 0x9e,\n\t\t\t0x81, 0x1e, 0x4e, 0x8e,\n\t\t\t0x4e, 0x76, 0xef, 0x49,\n\t\t\t0xfe, 0xf1, 0x0b, 0xc6,\n\t\t\t0x4c, 0x9e, 0x81, 0x1e,\n\t\t\t0x4e, 0x8e, 0x4e, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0x90, 0x49, 0x02, 0xc7,\n\t\t\t0x00, 0xbf, 0x64, 0x39,\n\t\t\t0x24, 0xe4, 0x34, 0xd3,\n\t\t\t0x00, 0xdc, 0x00, 0xdc,\n\t\t\t0x24, 0xe4, 0x80, 0x02,\n\t\t\t0x34, 0xd3, 0x80, 0xc3,\n\t\t\t0xf9, 0xc2, 0x40, 0x76,\n\t\t\t0xe1, 0x48, 0x40, 0x9e,\n\t\t\t0xf6, 0xc2, 0x00, 0x1e,\n\t\t\t0x48, 0x9e, 0xce, 0xc6,\n\t\t\t0x4c, 0x9e, 0x81, 0x1e,\n\t\t\t0x4e, 0x8e, 0x4e, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0xea, 0xc6, 0x4c, 0x9e,\n\t\t\t0x81, 0x1e, 0x4e, 0x8e,\n\t\t\t0x4e, 0x76, 0xef, 0x49,\n\t\t\t0xfe, 0xf1, 0xdf, 0xe7,\n\t\t\t0x40, 0xd4, 0xff, 0xc2,\n\t\t\t0x4c, 0x73, 0xbf, 0x49,\n\t\t\t0xc5, 0xf0, 0xe3, 0xc6,\n\t\t\t0xc0, 0x75, 0xd1, 0x49,\n\t\t\t0xd6, 0xf0, 0xdc, 0xc0,\n\t\t\t0xdc, 0xc6, 0x0c, 0x9e,\n\t\t\t0x00, 0x1e, 0x08, 0x9e,\n\t\t\t0xd9, 0xc6, 0x0a, 0x9e,\n\t\t\t0x8f, 0x1e, 0x0e, 0x8e,\n\t\t\t0x0e, 0x76, 0xef, 0x49,\n\t\t\t0xfe, 0xf1, 0xc9, 0xe7,\n\t\t\t0x1a, 0xc6, 0xc0, 0x67,\n\t\t\t0xf0, 0x49, 0x13, 0xf0,\n\t\t\t0xf0, 0x48, 0xc0, 0x8f,\n\t\t\t0xc2, 0x77, 0x14, 0xc1,\n\t\t\t0x14, 0xc6, 0x24, 0x9e,\n\t\t\t0x22, 0x9f, 0x8c, 0x1e,\n\t\t\t0x26, 0x8e, 0x26, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0xfb, 0x49, 0x05, 0xf0,\n\t\t\t0x07, 0xc6, 0xc0, 0x61,\n\t\t\t0x10, 0x48, 0xc0, 0x89,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x96, 0x52, 0x6c, 0xb4,\n\t\t\t0x90, 0xcc, 0x08, 0xdc,\n\t\t\t0x10, 0xe8, 0x16, 0xef,\n\t\t\t0x18, 0xc0, 0x00, 0x72,\n\t\t\t0xa8, 0x49, 0x0d, 0xf0,\n\t\t\t0x11, 0xc0, 0x11, 0xc2,\n\t\t\t0x00, 0x19, 0x08, 0x99,\n\t\t\t0x0c, 0x9a, 0x0e, 0xc1,\n\t\t\t0x0a, 0x99, 0x8f, 0x1b,\n\t\t\t0x0e, 0x8b, 0x0e, 0x73,\n\t\t\t0xbf, 0x49, 0xfe, 0xf1,\n\t\t\t0x04, 0xc0, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0x64, 0x62,\n\t\t\t0x02, 0xcf, 0x00, 0xdc,\n\t\t\t0x24, 0xe4, 0x80, 0x02,\n\t\t\t0x34, 0xd3, 0x2c, 0xc3,\n\t\t\t0x60, 0x70, 0x80, 0x49,\n\t\t\t0xfd, 0xf0, 0x27, 0xc3,\n\t\t\t0x66, 0x60, 0x80, 0x48,\n\t\t\t0x02, 0x48, 0x66, 0x88,\n\t\t\t0x00, 0x48, 0x82, 0x48,\n\t\t\t0x66, 0x88, 0x1b, 0xc3,\n\t\t\t0x60, 0x70, 0x17, 0xc4,\n\t\t\t0x88, 0x98, 0x14, 0xc0,\n\t\t\t0x8c, 0x98, 0x83, 0x18,\n\t\t\t0x8e, 0x88, 0x8e, 0x70,\n\t\t\t0x8f, 0x49, 0xfe, 0xf1,\n\t\t\t0x62, 0x70, 0x8a, 0x98,\n\t\t\t0x0d, 0xc0, 0x8c, 0x98,\n\t\t\t0x84, 0x18, 0x8e, 0x88,\n\t\t\t0x8e, 0x70, 0x8f, 0x49,\n\t\t\t0xfe, 0xf1, 0x08, 0xc3,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0x68, 0x0f, 0x6c, 0xe9,\n\t\t\t0x00, 0xdc, 0x50, 0xe8,\n\t\t\t0x30, 0xc1, 0x36, 0xd3,\n\t\t\t0x80, 0x10, 0x00, 0x00,\n\t\t\t0x80, 0xd4, 0x26, 0xd8,\n\t\t\t0x44, 0xc2, 0x4a, 0x41,\n\t\t\t0x94, 0x20, 0x42, 0xc0,\n\t\t\t0x16, 0x00, 0x00, 0x73,\n\t\t\t0x40, 0xc4, 0x5c, 0x41,\n\t\t\t0x8b, 0x41, 0x0b, 0x18,\n\t\t\t0x38, 0xc6, 0xc0, 0x88,\n\t\t\t0xc1, 0x99, 0x21, 0xe8,\n\t\t\t0x35, 0xc0, 0x00, 0x73,\n\t\t\t0xbd, 0x48, 0x0d, 0x18,\n\t\t\t0x30, 0xc6, 0xc0, 0x88,\n\t\t\t0xc1, 0x9b, 0x19, 0xe8,\n\t\t\t0x2d, 0xc0, 0x02, 0x73,\n\t\t\t0x35, 0x48, 0x0e, 0x18,\n\t\t\t0x28, 0xc6, 0xc0, 0x88,\n\t\t\t0xc1, 0x9b, 0x11, 0xe8,\n\t\t\t0xdf, 0xc3, 0xdd, 0xc6,\n\t\t\t0x01, 0x03, 0x1e, 0x40,\n\t\t\t0xfe, 0xf1, 0x20, 0xc0,\n\t\t\t0x02, 0x73, 0xb5, 0x48,\n\t\t\t0x0e, 0x18, 0x1b, 0xc6,\n\t\t\t0xc0, 0x88, 0xc1, 0x9b,\n\t\t\t0x04, 0xe8, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0xb6, 0x10,\n\t\t\t0x00, 0xb4, 0x01, 0xb4,\n\t\t\t0x02, 0xb4, 0x03, 0xb4,\n\t\t\t0x10, 0xc3, 0x0e, 0xc2,\n\t\t\t0x61, 0x71, 0x40, 0x99,\n\t\t\t0x60, 0x60, 0x0e, 0x48,\n\t\t\t0x42, 0x98, 0x42, 0x70,\n\t\t\t0x8e, 0x49, 0xfe, 0xf1,\n\t\t\t0x03, 0xb0, 0x02, 0xb0,\n\t\t\t0x01, 0xb0, 0x00, 0xb0,\n\t\t\t0x80, 0xff, 0xc0, 0xd4,\n\t\t\t0x8f, 0xcb, 0xaa, 0xc7,\n\t\t\t0x1e, 0x00, 0x90, 0xc7,\n\t\t\t0x1f, 0xfe, 0x0a, 0x10,\n\t\t\t0x0c, 0xf0, 0x0b, 0x10,\n\t\t\t0x0a, 0xf0, 0x0d, 0x10,\n\t\t\t0x08, 0xf0, 0x0e, 0x10,\n\t\t\t0x06, 0xf0, 0x24, 0x10,\n\t\t\t0x04, 0xf0, 0x02, 0xc7,\n\t\t\t0x00, 0xbf, 0x58, 0x11,\n\t\t\t0x02, 0xc7, 0x00, 0xbf,\n\t\t\t0x62, 0x11, 0xec, 0xc0,\n\t\t\t0x02, 0x75, 0xd5, 0x48,\n\t\t\t0x0e, 0x18, 0xe7, 0xc6,\n\t\t\t0xc0, 0x88, 0xc1, 0x9d,\n\t\t\t0xd0, 0xef, 0xe4, 0xc0,\n\t\t\t0x02, 0x75, 0x55, 0x48,\n\t\t\t0x0e, 0x18, 0xdf, 0xc6,\n\t\t\t0xc0, 0x88, 0xc1, 0x9d,\n\t\t\t0xc8, 0xef, 0x02, 0xc7,\n\t\t\t0x00, 0xbf, 0x8e, 0x11,\n\t\t\t0x16, 0xc0, 0xbb, 0x21,\n\t\t\t0xb9, 0x25, 0x00, 0x71,\n\t\t\t0x13, 0xc2, 0x4a, 0x41,\n\t\t\t0x8b, 0x41, 0x24, 0x18,\n\t\t\t0xd0, 0xc6, 0xc0, 0x88,\n\t\t\t0xc1, 0x99, 0xb9, 0xef,\n\t\t\t0x0a, 0xc0, 0x08, 0x71,\n\t\t\t0x28, 0x18, 0xc9, 0xc6,\n\t\t\t0xc0, 0x88, 0xc1, 0x99,\n\t\t\t0xb2, 0xef, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x3c, 0x11,\n\t\t\t0xd8, 0xc7, 0x83, 0xff,\n\t\t\t0x01, 0xb4, 0x02, 0xb4,\n\t\t\t0x03, 0xb4, 0x04, 0xb4,\n\t\t\t0x05, 0xb4, 0x44, 0xc4,\n\t\t\t0x45, 0xc0, 0x48, 0xc1,\n\t\t\t0x81, 0x1b, 0xce, 0xe8,\n\t\t\t0x46, 0xc0, 0x44, 0xc2,\n\t\t\t0x84, 0x1b, 0xca, 0xe8,\n\t\t\t0x59, 0xc0, 0x00, 0x1b,\n\t\t\t0xc7, 0xe8, 0x80, 0x65,\n\t\t\t0xdb, 0x22, 0xdd, 0x26,\n\t\t\t0x03, 0x15, 0x12, 0xf1,\n\t\t\t0x4e, 0xc0, 0x37, 0xc1,\n\t\t\t0x81, 0x1b, 0xbe, 0xe8,\n\t\t\t0x4b, 0xc0, 0x32, 0xc1,\n\t\t\t0x88, 0x1b, 0xba, 0xe8,\n\t\t\t0x48, 0xc0, 0x49, 0xc1,\n\t\t\t0x81, 0x1b, 0xb6, 0xe8,\n\t\t\t0x04, 0x00, 0x46, 0xc1,\n\t\t\t0x46, 0xc2, 0x8f, 0x1b,\n\t\t\t0xb1, 0xe8, 0x25, 0xc0,\n\t\t\t0x29, 0xc1, 0x2b, 0xc2,\n\t\t\t0x8f, 0x1b, 0xac, 0xe8,\n\t\t\t0x04, 0x00, 0x3e, 0xc1,\n\t\t\t0x27, 0xc2, 0xa8, 0xe8,\n\t\t\t0x04, 0x00, 0x2b, 0xc1,\n\t\t\t0x2b, 0xc2, 0xa4, 0xe8,\n\t\t\t0x04, 0x00, 0x29, 0xc1,\n\t\t\t0x2b, 0xc2, 0xa0, 0xe8,\n\t\t\t0x04, 0x00, 0x26, 0xc1,\n\t\t\t0x26, 0xc2, 0x9c, 0xe8,\n\t\t\t0x04, 0x00, 0x24, 0xc1,\n\t\t\t0x21, 0xc2, 0x98, 0xe8,\n\t\t\t0x04, 0x00, 0x21, 0xc1,\n\t\t\t0x1f, 0xc2, 0x94, 0xe8,\n\t\t\t0x04, 0x00, 0x1a, 0xc1,\n\t\t\t0x1d, 0xc2, 0x90, 0xe8,\n\t\t\t0x3d, 0xe0, 0x08, 0xdc,\n\t\t\t0x3c, 0xe8, 0x14, 0xe8,\n\t\t\t0x00, 0xf8, 0x00, 0x40,\n\t\t\t0x00, 0x00, 0x01, 0x00,\n\t\t\t0x9a, 0xd3, 0x04, 0xe0,\n\t\t\t0x02, 0xe0, 0x0b, 0xe0,\n\t\t\t0x0c, 0xe0, 0x25, 0xe0,\n\t\t\t0xef, 0x1f, 0xa8, 0x8f,\n\t\t\t0x02, 0xc7, 0x00, 0xbf,\n\t\t\t0x76, 0x15, 0x66, 0x15,\n\t\t\t0xa0, 0x49, 0x05, 0xf1,\n\t\t\t0xa4, 0x49, 0x00, 0xbe,\n\t\t\t0xca, 0x1a, 0x02, 0xc6,\n\t\t\t0xe0, 0x1a, 0xce, 0x13,\n\t\t\t0x80, 0xe0, 0xcb, 0xe0,\n\t\t\t0xe0, 0xe8, 0x28, 0xdc,\n\t\t\t0x13, 0x00, 0x08, 0x11,\n\t\t\t0x42, 0x80, 0x0e, 0xe0,\n\t\t\t0x06, 0xb4, 0x84, 0x76,\n\t\t\t0x31, 0x40, 0x82, 0x71,\n\t\t\t0x0c, 0xe8, 0x81, 0x24,\n\t\t\t0x1f, 0x48, 0x84, 0x99,\n\t\t\t0x08, 0xe8, 0x80, 0x49,\n\t\t\t0x03, 0xf1, 0x80, 0x71,\n\t\t\t0x80, 0xff, 0x85, 0x61,\n\t\t\t0x96, 0x24, 0xfd, 0xf1,\n\t\t\t0x06, 0xb0, 0x00, 0x11,\n\t\t\t0x6c, 0x0f, 0x34, 0x1c,\n\t\t\t0x28, 0xfc, 0x38, 0xfc,\n\t\t\t0x0f, 0x00, 0xc8, 0x1a,\n\t\t\t0xbe, 0x13, 0x04, 0x00,\n\t\t\t0xe6, 0xc1, 0xea, 0xc2,\n\t\t\t0x4f, 0xe8, 0x04, 0x00,\n\t\t\t0xe3, 0xc1, 0xe3, 0xc2,\n\t\t\t0x4b, 0xe8, 0x04, 0x00,\n\t\t\t0xe8, 0xc1, 0xe0, 0xc2,\n\t\t\t0x47, 0xe8, 0x04, 0x00,\n\t\t\t0xc1, 0xc1, 0xdd, 0xc2,\n\t\t\t0x43, 0xe8, 0x04, 0x00,\n\t\t\t0xdb, 0xc1, 0xdb, 0xc2,\n\t\t\t0x3f, 0xe8, 0x04, 0x00,\n\t\t\t0xd9, 0xc1, 0xd9, 0xc2,\n\t\t\t0x3b, 0xe8, 0x04, 0x00,\n\t\t\t0xd7, 0xc1, 0xd7, 0xc2,\n\t\t\t0x37, 0xe8, 0x04, 0x00,\n\t\t\t0xd5, 0xc1, 0xaf, 0xc2,\n\t\t\t0x33, 0xe8, 0x04, 0x00,\n\t\t\t0xc9, 0xc1, 0xd5, 0xc2,\n\t\t\t0x2f, 0xe8, 0x04, 0x00,\n\t\t\t0xce, 0xc1, 0xce, 0xc2,\n\t\t\t0x2b, 0xe8, 0x04, 0x00,\n\t\t\t0xcc, 0xc1, 0xce, 0xc2,\n\t\t\t0x27, 0xe8, 0x04, 0x00,\n\t\t\t0xc9, 0xc1, 0xc5, 0xc2,\n\t\t\t0x23, 0xe8, 0x04, 0x00,\n\t\t\t0xa0, 0xc1, 0xa0, 0xc2,\n\t\t\t0x1f, 0xe8, 0x04, 0x00,\n\t\t\t0x9e, 0xc1, 0x9e, 0xc2,\n\t\t\t0x1b, 0xe8, 0x04, 0x00,\n\t\t\t0x9c, 0xc1, 0x83, 0x1b,\n\t\t\t0x17, 0xe8, 0xbf, 0xc0,\n\t\t\t0xc1, 0xc1, 0xc1, 0xc2,\n\t\t\t0x8f, 0x1b, 0x12, 0xe8,\n\t\t\t0x04, 0x00, 0xb8, 0xc1,\n\t\t\t0x93, 0xc2, 0x8f, 0x1b,\n\t\t\t0x0d, 0xe8, 0xb6, 0xc0,\n\t\t\t0xb6, 0xc1, 0x81, 0x1b,\n\t\t\t0x09, 0xe8, 0x05, 0xb0,\n\t\t\t0x04, 0xb0, 0x03, 0xb0,\n\t\t\t0x02, 0xb0, 0x01, 0xb0,\n\t\t\t0x60, 0x70, 0xa9, 0xc3,\n\t\t\t0x00, 0xbb, 0x84, 0x98,\n\t\t\t0x80, 0x99, 0x82, 0x9a,\n\t\t\t0x86, 0x8b, 0x86, 0x75,\n\t\t\t0xdf, 0x49, 0xfe, 0xf1,\n\t\t\t0x80, 0xff, 0x3b, 0xc0,\n\t\t\t0x3b, 0xc1, 0x00, 0x70,\n\t\t\t0x08, 0x40, 0x34, 0xf1,\n\t\t\t0x38, 0xc0, 0x38, 0xc1,\n\t\t\t0x0c, 0x99, 0x00, 0x19,\n\t\t\t0x0e, 0x89, 0x0e, 0x71,\n\t\t\t0x9f, 0x49, 0xfe, 0xf1,\n\t\t\t0x0a, 0x71, 0x9a, 0x48,\n\t\t\t0x0a, 0x99, 0x8f, 0x19,\n\t\t\t0x0e, 0x89, 0x0e, 0x71,\n\t\t\t0x9f, 0x49, 0xfe, 0xf1,\n\t\t\t0x2a, 0xc0, 0x00, 0x71,\n\t\t\t0x90, 0x48, 0x00, 0x99,\n\t\t\t0x27, 0xc0, 0x00, 0x71,\n\t\t\t0x13, 0x48, 0x00, 0x99,\n\t\t\t0x20, 0xc0, 0x20, 0xc1,\n\t\t\t0x0c, 0x99, 0x00, 0x19,\n\t\t\t0x0e, 0x89, 0x0e, 0x71,\n\t\t\t0x9f, 0x49, 0xfe, 0xf1,\n\t\t\t0x0a, 0x71, 0x9b, 0x48,\n\t\t\t0x0a, 0x99, 0x8f, 0x19,\n\t\t\t0x0e, 0x89, 0x0e, 0x71,\n\t\t\t0x9f, 0x49, 0xfe, 0xf1,\n\t\t\t0x12, 0xc0, 0x00, 0x71,\n\t\t\t0x10, 0x48, 0x00, 0x99,\n\t\t\t0x0f, 0xc0, 0x00, 0x71,\n\t\t\t0x93, 0x48, 0x00, 0x99,\n\t\t\t0x06, 0xc0, 0x00, 0x19,\n\t\t\t0x00, 0x99, 0x09, 0xc7,\n\t\t\t0x09, 0xc5, 0x00, 0xbd,\n\t\t\t0x80, 0xd2, 0x86, 0x64,\n\t\t\t0x00, 0xdc, 0x10, 0xe8,\n\t\t\t0xb0, 0xd4, 0x06, 0xd4,\n\t\t\t0xc0, 0xd4, 0x72, 0x14};\n\t\tstatic u8 pla_patch11[] = {\n\t\t\t0x05, 0xe0, 0x0a, 0xe0,\n\t\t\t0x38, 0xe0, 0x3a, 0xe0,\n\t\t\t0x57, 0xe0, 0x05, 0xc2,\n\t\t\t0x40, 0x76, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0xd6, 0x0b,\n\t\t\t0x1e, 0xfc, 0x29, 0xc5,\n\t\t\t0xa0, 0x77, 0x2b, 0xc4,\n\t\t\t0xa0, 0x9c, 0x26, 0xc5,\n\t\t\t0xa0, 0x64, 0x01, 0x14,\n\t\t\t0x0b, 0xf0, 0x02, 0x14,\n\t\t\t0x09, 0xf0, 0x01, 0x07,\n\t\t\t0xf1, 0x49, 0x06, 0xf0,\n\t\t\t0x21, 0xc7, 0xe0, 0x8e,\n\t\t\t0x11, 0x1e, 0xe0, 0x8e,\n\t\t\t0x14, 0xe0, 0x17, 0xc5,\n\t\t\t0x00, 0x1f, 0xa0, 0x9f,\n\t\t\t0x13, 0xc5, 0xa0, 0x77,\n\t\t\t0xa0, 0x74, 0x46, 0x48,\n\t\t\t0x47, 0x48, 0xa0, 0x9c,\n\t\t\t0x11, 0xc5, 0xa0, 0x74,\n\t\t\t0x44, 0x48, 0x43, 0x48,\n\t\t\t0xa0, 0x9c, 0x08, 0xc5,\n\t\t\t0xa0, 0x9f, 0x02, 0xc5,\n\t\t\t0x00, 0xbd, 0xea, 0x03,\n\t\t\t0x02, 0xc5, 0x00, 0xbd,\n\t\t\t0xf6, 0x03, 0x1c, 0xe8,\n\t\t\t0xaa, 0xd3, 0x08, 0xb7,\n\t\t\t0x6c, 0xe8, 0x20, 0xe8,\n\t\t\t0x00, 0xa0, 0x38, 0xe4,\n\t\t\t0x02, 0xc5, 0x00, 0xbd,\n\t\t\t0xcc, 0x06, 0xd4, 0x49,\n\t\t\t0x17, 0xf0, 0x19, 0xc5,\n\t\t\t0xa4, 0x64, 0xc1, 0x49,\n\t\t\t0x07, 0xf1, 0x16, 0xc5,\n\t\t\t0xa0, 0x64, 0xc7, 0x48,\n\t\t\t0x46, 0x48, 0xa0, 0x8c,\n\t\t\t0x06, 0xe0, 0x10, 0xc5,\n\t\t\t0xa0, 0x64, 0x47, 0x48,\n\t\t\t0xc6, 0x48, 0xa0, 0x8c,\n\t\t\t0x0c, 0xc7, 0xe0, 0x8e,\n\t\t\t0x11, 0x1e, 0xe0, 0x8e,\n\t\t\t0x02, 0xc7, 0x00, 0xbf,\n\t\t\t0x88, 0x04, 0x02, 0xc7,\n\t\t\t0x00, 0xbf, 0xbe, 0x03,\n\t\t\t0x5c, 0xdc, 0xf0, 0xd3,\n\t\t\t0x20, 0xe4, 0xd2, 0x49,\n\t\t\t0x08, 0xf1, 0xd3, 0x49,\n\t\t\t0x55, 0xf1, 0xd4, 0x49,\n\t\t\t0x1e, 0xf1, 0xd5, 0x49,\n\t\t\t0x45, 0xf1, 0x4d, 0xe0,\n\t\t\t0x5a, 0xc7, 0xe0, 0x72,\n\t\t\t0xa0, 0x49, 0x05, 0xf0,\n\t\t\t0x54, 0xc7, 0xe0, 0x72,\n\t\t\t0xaf, 0x49, 0x0e, 0xf1,\n\t\t\t0x53, 0xc7, 0xff, 0x1a,\n\t\t\t0xe0, 0x9a, 0x51, 0xc2,\n\t\t\t0xe4, 0x9a, 0x50, 0xc2,\n\t\t\t0xe6, 0x9a, 0x01, 0x1a,\n\t\t\t0xe0, 0x9a, 0x4d, 0xc2,\n\t\t\t0xe4, 0x9a, 0x4a, 0xc2,\n\t\t\t0xe6, 0x9a, 0x44, 0xc7,\n\t\t\t0xe5, 0x8e, 0x00, 0x1d,\n\t\t\t0xe5, 0x8d, 0x30, 0xe0,\n\t\t\t0x38, 0xc7, 0xe0, 0x75,\n\t\t\t0xda, 0x49, 0x1f, 0xf0,\n\t\t\t0x35, 0xc7, 0xe0, 0x75,\n\t\t\t0xdc, 0x49, 0x1b, 0xf1,\n\t\t\t0x32, 0xc7, 0xe0, 0x75,\n\t\t\t0xd5, 0x49, 0x17, 0xf0,\n\t\t\t0x39, 0xc7, 0xe0, 0x75,\n\t\t\t0xd8, 0x48, 0xd9, 0x48,\n\t\t\t0xda, 0x48, 0xdb, 0x48,\n\t\t\t0xe0, 0x9d, 0x2a, 0xc7,\n\t\t\t0xe0, 0x75, 0xdb, 0x49,\n\t\t\t0x03, 0xf1, 0xde, 0x49,\n\t\t\t0x0d, 0xf0, 0x22, 0xc7,\n\t\t\t0xe4, 0x75, 0xd0, 0x49,\n\t\t\t0x09, 0xf1, 0x1f, 0xc5,\n\t\t\t0xe6, 0x9d, 0x11, 0x1d,\n\t\t\t0xe4, 0x8d, 0x04, 0xe0,\n\t\t\t0x19, 0xc7, 0x00, 0x1d,\n\t\t\t0xe4, 0x8d, 0xe0, 0x8e,\n\t\t\t0x11, 0x1d, 0xe0, 0x8d,\n\t\t\t0x07, 0xe0, 0x0f, 0xc7,\n\t\t\t0xe0, 0x75, 0xda, 0x48,\n\t\t\t0xe0, 0x9d, 0x0e, 0xc7,\n\t\t\t0xe4, 0x8e, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0xd6, 0x03,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0xc2, 0x03, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0x5a, 0x04,\n\t\t\t0x12, 0xe8, 0x4e, 0xe8,\n\t\t\t0x08, 0xe9, 0x20, 0xe4,\n\t\t\t0x80, 0x02, 0x9a, 0xc0,\n\t\t\t0x4e, 0xe8, 0x00, 0xe4,\n\t\t\t0x10, 0xe0, 0xe0, 0xe8,\n\t\t\t0x80, 0x11, 0x02, 0x80,\n\t\t\t0x30, 0x10, 0xb4, 0xc0};\n\t\tu8 new_ver;\n\n\t\trtl_fw_ver_erase(tp);\n\n\t\tnew_ver = 7;\n\t\tif (rtl_check_fw_ver_ok(tp, USB_FW_USB_VER, new_ver)) {\n\t\t\trtl_clear_bp(tp, MCU_TYPE_USB);\n\n\t\t\tgeneric_ocp_write(tp, 0xe600, 0xff,\n\t\t\t\t\t  sizeof(usb_patch3_b), usb_patch3_b,\n\t\t\t\t\t  MCU_TYPE_USB);\n\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_BA, 0xa000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_0, 0x39d4);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_1, 0x099c);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_2, 0x293c);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_3, 0x1cfe);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_4, 0x2738);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_5, 0x21ba);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_6, 0x3962);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_7, 0x51ba);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_8, 0x6262);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_9, 0x0f66);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_10, 0x1098);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_11, 0x1148);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_12, 0x116c);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_13, 0x10e0);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_14, 0x0f6a);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_15, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP2_EN, 0x7fff);\n\t\t\tocp_write_byte(tp, MCU_TYPE_USB, USB_FW_USB_VER,\n\t\t\t\t       new_ver);\n\t\t}\n\n\t\tocp_word_set_bits(tp, MCU_TYPE_USB, USB_FW_FIX_EN1,\n\t\t\t\t  FW_IP_RESET_EN);\n\n\t\tocp_write_dword(tp, MCU_TYPE_USB, USB_UPHY3_MDCMDIO, 0x4026840e);\n\t\tocp_write_dword(tp, MCU_TYPE_USB, USB_UPHY3_MDCMDIO, 0x4001acc9);\n\n\t\tnew_ver = 6;\n\t\tif (rtl_check_fw_ver_ok(tp, USB_FW_PLA_VER, new_ver)) {\n\t\t\trtl_clear_bp(tp, MCU_TYPE_PLA);\n\n\t\t\tgeneric_ocp_write(tp, 0xf800, 0xff, sizeof(pla_patch11),\n\t\t\t\t\t  pla_patch11, MCU_TYPE_PLA);\n\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_BA, 0x8000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_0, 0x0bc2);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_1, 0x03e0);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_2, 0x06b8);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_3, 0x03ba);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_4, 0x03b2);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_5, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_6, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_7, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_EN, 0x0017);\n\t\t\tocp_write_byte(tp, MCU_TYPE_USB, USB_FW_PLA_VER,\n\t\t\t\t       new_ver);\n\t\t}\n\t} else if (tp->version == RTL_VER_12) {\n\t\tstatic u8 usb_patch4_a[] = {\n\t\t\t0x10, 0xe0, 0x38, 0xe0,\n\t\t\t0x4e, 0xe0, 0x8b, 0xe0,\n\t\t\t0xc1, 0xe0, 0xcd, 0xe0,\n\t\t\t0xd5, 0xe0, 0xed, 0xe0,\n\t\t\t0xf9, 0xe0, 0xfb, 0xe0,\n\t\t\t0xfd, 0xe0, 0xff, 0xe0,\n\t\t\t0x01, 0xe1, 0x03, 0xe1,\n\t\t\t0x05, 0xe1, 0x07, 0xe1,\n\t\t\t0x22, 0xc2, 0x4a, 0x41,\n\t\t\t0x91, 0x20, 0x20, 0xc0,\n\t\t\t0x16, 0x00, 0x00, 0x73,\n\t\t\t0x1e, 0xc4, 0x5c, 0x41,\n\t\t\t0x8b, 0x41, 0x1a, 0xc0,\n\t\t\t0x1a, 0x00, 0x00, 0x73,\n\t\t\t0xbd, 0x48, 0x0d, 0x18,\n\t\t\t0x17, 0xc6, 0xc0, 0x88,\n\t\t\t0xc1, 0x9b, 0x15, 0xe8,\n\t\t\t0x0b, 0x18, 0x12, 0xc6,\n\t\t\t0xc0, 0x88, 0xc1, 0x99,\n\t\t\t0x10, 0xe8, 0x0c, 0xc0,\n\t\t\t0x1c, 0x00, 0x00, 0x73,\n\t\t\t0x0e, 0x18, 0x0a, 0xc6,\n\t\t\t0xc0, 0x88, 0xc1, 0x9b,\n\t\t\t0x08, 0xe8, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x10, 0x12,\n\t\t\t0xf0, 0x00, 0x90, 0xc7,\n\t\t\t0x1f, 0xfe, 0x8f, 0xcb,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x66, 0x3f, 0x11, 0x21,\n\t\t\t0x2b, 0x25, 0x13, 0xc4,\n\t\t\t0xa2, 0x41, 0x80, 0x63,\n\t\t\t0xf5, 0xc0, 0x48, 0x00,\n\t\t\t0xbb, 0x21, 0xb9, 0x25,\n\t\t\t0x00, 0x71, 0x0c, 0xc2,\n\t\t\t0x4a, 0x41, 0x8b, 0x41,\n\t\t\t0x24, 0x18, 0xee, 0xc6,\n\t\t\t0xc0, 0x88, 0xc1, 0x99,\n\t\t\t0xec, 0xef, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x8a, 0x12,\n\t\t\t0xa0, 0xf9, 0x83, 0xff,\n\t\t\t0xd4, 0x18, 0x20, 0x88,\n\t\t\t0x36, 0xe8, 0x22, 0x60,\n\t\t\t0x85, 0x48, 0x06, 0x48,\n\t\t\t0x21, 0x88, 0xf4, 0x18,\n\t\t\t0x20, 0x88, 0x32, 0xe8,\n\t\t\t0x2d, 0xc3, 0xc0, 0x18,\n\t\t\t0x20, 0x88, 0x2b, 0xe8,\n\t\t\t0x22, 0x60, 0x60, 0x88,\n\t\t\t0xc1, 0x18, 0x20, 0x88,\n\t\t\t0x26, 0xe8, 0x22, 0x60,\n\t\t\t0x61, 0x88, 0xc2, 0x18,\n\t\t\t0x20, 0x88, 0x21, 0xe8,\n\t\t\t0x22, 0x60, 0x62, 0x88,\n\t\t\t0xc3, 0x18, 0x20, 0x88,\n\t\t\t0x1c, 0xe8, 0x22, 0x60,\n\t\t\t0x63, 0x88, 0xc4, 0x18,\n\t\t\t0x20, 0x88, 0x17, 0xe8,\n\t\t\t0x22, 0x60, 0x64, 0x88,\n\t\t\t0xc5, 0x18, 0x20, 0x88,\n\t\t\t0x12, 0xe8, 0x22, 0x60,\n\t\t\t0x65, 0x88, 0xc6, 0x18,\n\t\t\t0x20, 0x88, 0x0d, 0xe8,\n\t\t\t0x22, 0x60, 0x66, 0x88,\n\t\t\t0xc7, 0x18, 0x20, 0x88,\n\t\t\t0x08, 0xe8, 0x22, 0x60,\n\t\t\t0x67, 0x88, 0xd4, 0x18,\n\t\t\t0x02, 0xc5, 0x00, 0xbd,\n\t\t\t0xc2, 0x35, 0xc0, 0xd3,\n\t\t\t0x02, 0xc5, 0x00, 0xbd,\n\t\t\t0xb2, 0x3e, 0x02, 0xc5,\n\t\t\t0x00, 0xbd, 0x08, 0x3f,\n\t\t\t0xd4, 0x18, 0xc0, 0x88,\n\t\t\t0xf8, 0xef, 0xc2, 0x60,\n\t\t\t0x85, 0x48, 0x06, 0x48,\n\t\t\t0xc1, 0x88, 0xf4, 0x18,\n\t\t\t0xc0, 0x88, 0xf4, 0xef,\n\t\t\t0xef, 0xc3, 0x60, 0x60,\n\t\t\t0xc1, 0x88, 0xe0, 0x18,\n\t\t\t0xc0, 0x88, 0xee, 0xef,\n\t\t\t0x61, 0x60, 0xc1, 0x88,\n\t\t\t0xe1, 0x18, 0xc0, 0x88,\n\t\t\t0xe9, 0xef, 0x62, 0x60,\n\t\t\t0xc1, 0x88, 0xe2, 0x18,\n\t\t\t0xc0, 0x88, 0xe4, 0xef,\n\t\t\t0x63, 0x60, 0xc1, 0x88,\n\t\t\t0xe3, 0x18, 0xc0, 0x88,\n\t\t\t0xdf, 0xef, 0x64, 0x60,\n\t\t\t0xc1, 0x88, 0xe4, 0x18,\n\t\t\t0xc0, 0x88, 0xda, 0xef,\n\t\t\t0x65, 0x60, 0xc1, 0x88,\n\t\t\t0xe5, 0x18, 0xc0, 0x88,\n\t\t\t0xd5, 0xef, 0x66, 0x60,\n\t\t\t0xc1, 0x88, 0xe6, 0x18,\n\t\t\t0xc0, 0x88, 0xd0, 0xef,\n\t\t\t0x67, 0x60, 0xc1, 0x88,\n\t\t\t0xe7, 0x18, 0xc0, 0x88,\n\t\t\t0xcb, 0xef, 0xd4, 0x18,\n\t\t\t0x02, 0xc2, 0x00, 0xba,\n\t\t\t0x3a, 0x15, 0x0b, 0xc6,\n\t\t\t0xc7, 0x65, 0xd0, 0x49,\n\t\t\t0x05, 0xf1, 0x08, 0xc0,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x50, 0x2f, 0x02, 0xc7,\n\t\t\t0x00, 0xbf, 0x56, 0x2f,\n\t\t\t0x20, 0xd4, 0x00, 0xd4,\n\t\t\t0x08, 0xc3, 0x60, 0x60,\n\t\t\t0x03, 0x48, 0x60, 0x88,\n\t\t\t0x00, 0x1b, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0xda, 0x2c,\n\t\t\t0x60, 0xb4, 0x17, 0xc1,\n\t\t\t0x17, 0xc2, 0x4c, 0x99,\n\t\t\t0x00, 0x19, 0x4e, 0x89,\n\t\t\t0x4f, 0x61, 0x97, 0x49,\n\t\t\t0xfe, 0xf1, 0x48, 0x61,\n\t\t\t0x01, 0xb4, 0x16, 0x48,\n\t\t\t0x17, 0x48, 0x48, 0x89,\n\t\t\t0x0a, 0xc1, 0x4c, 0x99,\n\t\t\t0x81, 0x19, 0x4e, 0x89,\n\t\t\t0x4f, 0x61, 0x97, 0x49,\n\t\t\t0xfe, 0xf1, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x32, 0x7c,\n\t\t\t0x1c, 0xe8, 0x00, 0xdc,\n\t\t\t0x01, 0xb0, 0xfe, 0xc2,\n\t\t\t0x48, 0x89, 0xfb, 0xc1,\n\t\t\t0x4c, 0x99, 0x81, 0x19,\n\t\t\t0x4e, 0x89, 0x4f, 0x61,\n\t\t\t0x97, 0x49, 0xfe, 0xf1,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x96, 0x7c, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x00, 0x00};\n\t\tstatic u8 pla_patch4_a[] = {\n\t\t\t0x08, 0xe0, 0x0c, 0xe0,\n\t\t\t0x10, 0xe0, 0x3e, 0xe0,\n\t\t\t0x40, 0xe0, 0x42, 0xe0,\n\t\t\t0x44, 0xe0, 0x46, 0xe0,\n\t\t\t0x03, 0xb4, 0x02, 0xb4,\n\t\t\t0x02, 0xc7, 0x00, 0xbf,\n\t\t\t0xb4, 0x03, 0x02, 0xb0,\n\t\t\t0x03, 0xb0, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x8c, 0x05,\n\t\t\t0xaf, 0x49, 0x17, 0xf1,\n\t\t\t0x20, 0xc6, 0x00, 0x1a,\n\t\t\t0x23, 0xe8, 0x21, 0xc6,\n\t\t\t0xc0, 0x61, 0x91, 0x49,\n\t\t\t0x0c, 0xf0, 0x95, 0x49,\n\t\t\t0x0a, 0xf1, 0x14, 0x48,\n\t\t\t0x16, 0xc6, 0x81, 0x1a,\n\t\t\t0x19, 0xe8, 0x14, 0xc6,\n\t\t\t0xc0, 0x62, 0x24, 0x48,\n\t\t\t0xc0, 0x8a, 0x0c, 0xe0,\n\t\t\t0x10, 0xc6, 0xc0, 0x62,\n\t\t\t0xa5, 0x49, 0x08, 0xf1,\n\t\t\t0x0d, 0xc6, 0xc0, 0x62,\n\t\t\t0xa0, 0x48, 0xc0, 0x8a,\n\t\t\t0xc2, 0x62, 0xa3, 0x48,\n\t\t\t0xc2, 0x8a, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0xd2, 0x16,\n\t\t\t0x84, 0xd2, 0x6a, 0xdc,\n\t\t\t0x90, 0xd3, 0x66, 0xb4,\n\t\t\t0x08, 0xea, 0xff, 0xc0,\n\t\t\t0x04, 0x9e, 0x00, 0x99,\n\t\t\t0x06, 0x8a, 0x06, 0x72,\n\t\t\t0xaf, 0x49, 0xfe, 0xf1,\n\t\t\t0x80, 0xff, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x00, 0x00,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x00, 0x00, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x00, 0x00,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x00, 0x00, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x00, 0x00};\n\t\tu8 new_ver;\n\n\t\trtl_fw_ver_erase(tp);\n\n\t\tnew_ver = 2;\n\t\tif (rtl_check_fw_ver_ok(tp, USB_FW_USB_VER, new_ver)) {\n\t\t\trtl_clear_bp(tp, MCU_TYPE_USB);\n\n\t\t\tgeneric_ocp_write(tp, 0xe600, 0xff,\n\t\t\t\t\t  sizeof(usb_patch4_a), usb_patch4_a,\n\t\t\t\t\t  MCU_TYPE_USB);\n\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_BA, 0xc000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_0, 0x11e2);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_1, 0x1268);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_2, 0x35c0);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_3, 0x1538);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_4, 0x2f4e);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_5, 0x2cd8);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_6, 0x7c26);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_7, 0x7c90);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_8, 0x0000);\n//\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_9, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_10, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_11, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_12, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_13, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_14, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_15, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP2_EN, 0x00df);\n\t\t\tocp_write_byte(tp, MCU_TYPE_USB, USB_FW_USB_VER,\n\t\t\t\t       new_ver);\n\t\t}\n\n//\t\tocp_word_set_bits(tp, MCU_TYPE_USB, USB_FW_FIX_EN1,\n//\t\t\t\t  FW_IP_RESET_EN);\n\n//\t\tocp_write_dword(tp, MCU_TYPE_USB, 0xd480, 0x4026840e);\n//\t\tocp_write_dword(tp, MCU_TYPE_USB, 0xd480, 0x4001acc9);\n\n\t\tnew_ver = 2;\n\t\tif (rtl_check_fw_ver_ok(tp, USB_FW_PLA_VER, new_ver)) {\n\t\t\trtl_clear_bp(tp, MCU_TYPE_PLA);\n\n\t\t\tgeneric_ocp_write(tp, 0xf800, 0xff,\n\t\t\t\t\t  sizeof(pla_patch4_a), pla_patch4_a,\n\t\t\t\t\t  MCU_TYPE_PLA);\n\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_BA, 0x8000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_0, 0x03b2);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_1, 0x058a);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_2, 0x16c0);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_3, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_4, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_5, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_6, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_7, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_EN, 0x0007);\n\t\t\tocp_write_byte(tp, MCU_TYPE_USB, USB_FW_PLA_VER,\n\t\t\t\t       new_ver);\n\t\t}\n\t} else if (tp->version == RTL_VER_13 || tp->version == RTL_VER_15) {\n\t\tstatic u8 usb_patch_13[] = {\n\t\t\t0x10, 0xe0, 0x25, 0xe0,\n\t\t\t0x29, 0xe0, 0x2d, 0xe0,\n\t\t\t0x52, 0xe0, 0xff, 0xe0,\n\t\t\t0x02, 0xe1, 0x06, 0xe1,\n\t\t\t0x16, 0xe1, 0x18, 0xe1,\n\t\t\t0x48, 0xe1, 0x72, 0xe1,\n\t\t\t0x80, 0xe1, 0x8f, 0xe1,\n\t\t\t0x96, 0xe1, 0x98, 0xe1,\n\t\t\t0x13, 0xc3, 0x60, 0x70,\n\t\t\t0x8b, 0x49, 0x0d, 0xf1,\n\t\t\t0x10, 0xc3, 0x60, 0x60,\n\t\t\t0x85, 0x49, 0x09, 0xf1,\n\t\t\t0x40, 0x03, 0x64, 0x60,\n\t\t\t0x82, 0x49, 0x05, 0xf1,\n\t\t\t0x09, 0xc3, 0x60, 0x60,\n\t\t\t0x80, 0x48, 0x60, 0x88,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0xde, 0x0f, 0xca, 0xcf,\n\t\t\t0x00, 0xd8, 0x1e, 0xb4,\n\t\t\t0x04, 0xc3, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x62, 0x36,\n\t\t\t0xce, 0xd3, 0x04, 0xc3,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x7a, 0x14, 0xce, 0xd3,\n\t\t\t0x00, 0xb4, 0x01, 0xb4,\n\t\t\t0x02, 0xb4, 0x03, 0xb4,\n\t\t\t0x1f, 0xc1, 0x02, 0x1b,\n\t\t\t0x2c, 0x8b, 0x0c, 0x62,\n\t\t\t0xa7, 0x49, 0x0a, 0xf1,\n\t\t\t0x00, 0x1b, 0x08, 0x72,\n\t\t\t0x13, 0x40, 0x04, 0xf1,\n\t\t\t0x0a, 0x72, 0x13, 0x40,\n\t\t\t0x03, 0xf0, 0x01, 0x1b,\n\t\t\t0x2c, 0x8b, 0x12, 0xc0,\n\t\t\t0x01, 0x1a, 0x08, 0x8a,\n\t\t\t0x0a, 0x8a, 0x0d, 0xc0,\n\t\t\t0x12, 0x71, 0x19, 0x48,\n\t\t\t0x1a, 0x48, 0x12, 0x99,\n\t\t\t0x03, 0xb0, 0x02, 0xb0,\n\t\t\t0x01, 0xb0, 0x00, 0xb0,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0xb0, 0x77, 0x20, 0xc3,\n\t\t\t0x18, 0xb4, 0x80, 0xcb,\n\t\t\t0x00, 0xb4, 0x01, 0xb4,\n\t\t\t0x02, 0xb4, 0x03, 0xb4,\n\t\t\t0x07, 0xb4, 0x23, 0xc0,\n\t\t\t0x24, 0xc1, 0x08, 0x1a,\n\t\t\t0x2a, 0x8a, 0x24, 0x01,\n\t\t\t0x0d, 0x1a, 0x20, 0x9a,\n\t\t\t0x24, 0x09, 0x00, 0x1a,\n\t\t\t0x22, 0x9a, 0x04, 0x72,\n\t\t\t0x06, 0x73, 0x18, 0xc7,\n\t\t\t0xe4, 0x9a, 0xe6, 0x9b,\n\t\t\t0x17, 0xc2, 0x17, 0xc3,\n\t\t\t0xe0, 0x9a, 0xe2, 0x9b,\n\t\t\t0x80, 0x1b, 0x32, 0x8b,\n\t\t\t0x00, 0x1a, 0x24, 0x9f,\n\t\t\t0x26, 0x9a, 0x01, 0x1a,\n\t\t\t0x28, 0x8a, 0x0f, 0xe8,\n\t\t\t0x07, 0xb0, 0x03, 0xb0,\n\t\t\t0x02, 0xb0, 0x01, 0xb0,\n\t\t\t0x00, 0xb0, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0xe6, 0x60,\n\t\t\t0x00, 0xc3, 0x20, 0xc3,\n\t\t\t0x80, 0xcb, 0x55, 0x53,\n\t\t\t0x42, 0x53, 0x80, 0xcb,\n\t\t\t0x03, 0xb4, 0x06, 0xb4,\n\t\t\t0x07, 0xb4, 0xfc, 0xc7,\n\t\t\t0x79, 0xc7, 0xe0, 0x73,\n\t\t\t0xba, 0x49, 0x0d, 0xf0,\n\t\t\t0xf7, 0xc6, 0x24, 0x06,\n\t\t\t0xc0, 0x77, 0xfa, 0x25,\n\t\t\t0x76, 0x23, 0x66, 0x27,\n\t\t\t0x70, 0xc7, 0xe1, 0x9e,\n\t\t\t0x00, 0x16, 0x10, 0xf0,\n\t\t\t0x01, 0x03, 0x0e, 0xe0,\n\t\t\t0xb9, 0x49, 0x10, 0xf0,\n\t\t\t0xe9, 0xc6, 0x24, 0x06,\n\t\t\t0xc0, 0x77, 0xf9, 0x25,\n\t\t\t0x77, 0x23, 0x67, 0x27,\n\t\t\t0x62, 0xc7, 0xe1, 0x9e,\n\t\t\t0x00, 0x16, 0x02, 0xf0,\n\t\t\t0x01, 0x03, 0x5e, 0xc7,\n\t\t\t0xe0, 0x8b, 0x12, 0xe8,\n\t\t\t0x0d, 0xe0, 0xda, 0xc6,\n\t\t\t0x24, 0x06, 0xc0, 0x77,\n\t\t\t0xf6, 0x25, 0x7a, 0x23,\n\t\t\t0x6a, 0x27, 0x53, 0xc7,\n\t\t\t0xe1, 0x9e, 0x00, 0x16,\n\t\t\t0xf3, 0xf0, 0x01, 0x03,\n\t\t\t0xf1, 0xe7, 0x07, 0xb0,\n\t\t\t0x06, 0xb0, 0x03, 0xb0,\n\t\t\t0x80, 0xff, 0x03, 0xb4,\n\t\t\t0x06, 0xb4, 0x07, 0xb4,\n\t\t\t0xc7, 0xc6, 0xc4, 0x77,\n\t\t\t0x40, 0xc3, 0x7c, 0x9f,\n\t\t\t0x41, 0xc6, 0xc0, 0x73,\n\t\t\t0xba, 0x49, 0x05, 0xf1,\n\t\t\t0x00, 0x13, 0x05, 0xf1,\n\t\t\t0x39, 0xc3, 0x04, 0xe0,\n\t\t\t0x38, 0xc3, 0x02, 0xe0,\n\t\t\t0x40, 0x1b, 0xb8, 0xc6,\n\t\t\t0xfb, 0x31, 0xc4, 0x9f,\n\t\t\t0x35, 0xc6, 0xc0, 0x67,\n\t\t\t0x01, 0x17, 0x07, 0xfc,\n\t\t\t0x30, 0xc6, 0xc1, 0x77,\n\t\t\t0x01, 0x1b, 0xc0, 0x8b,\n\t\t\t0x00, 0x17, 0x0c, 0xf1,\n\t\t\t0x29, 0xc6, 0xc0, 0x73,\n\t\t\t0xba, 0x49, 0x05, 0xf1,\n\t\t\t0xb9, 0x49, 0x05, 0xf0,\n\t\t\t0x21, 0xc7, 0x04, 0xe0,\n\t\t\t0x20, 0xc7, 0x02, 0xe0,\n\t\t\t0x40, 0x1f, 0x1a, 0xc6,\n\t\t\t0x7e, 0x41, 0x1d, 0xc6,\n\t\t\t0xc0, 0x63, 0xbb, 0x21,\n\t\t\t0xbb, 0x41, 0x15, 0xc3,\n\t\t\t0x66, 0x9f, 0x18, 0xc6,\n\t\t\t0xc0, 0x67, 0xf9, 0x3b,\n\t\t\t0xc0, 0x8f, 0x01, 0x17,\n\t\t\t0x03, 0xfd, 0x00, 0x1f,\n\t\t\t0x02, 0xe0, 0x01, 0x1f,\n\t\t\t0x0e, 0xc6, 0xc0, 0x8f,\n\t\t\t0x08, 0xc3, 0x04, 0x1e,\n\t\t\t0x60, 0x8e, 0x07, 0xb0,\n\t\t\t0x06, 0xb0, 0x03, 0xb0,\n\t\t\t0x80, 0xff, 0xff, 0x07,\n\t\t\t0x40, 0xd4, 0x00, 0x02,\n\t\t\t0x00, 0x04, 0x80, 0xb9,\n\t\t\t0xfd, 0xcb, 0xa2, 0xcb,\n\t\t\t0xe8, 0x74, 0x02, 0xc5,\n\t\t\t0x00, 0xbd, 0x96, 0x6d,\n\t\t\t0x04, 0xc4, 0x02, 0xc3,\n\t\t\t0x00, 0xbb, 0x50, 0x28,\n\t\t\t0x7f, 0x00, 0x00, 0x1e,\n\t\t\t0x00, 0x11, 0x0c, 0xf0,\n\t\t\t0x90, 0x49, 0x04, 0xf1,\n\t\t\t0x01, 0x06, 0x91, 0x24,\n\t\t\t0xfa, 0xe7, 0x28, 0x32,\n\t\t\t0x06, 0x43, 0xf8, 0x31,\n\t\t\t0x01, 0x06, 0x91, 0x24,\n\t\t\t0xf4, 0xe7, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x0e, 0x28,\n\t\t\t0x02, 0xc7, 0x00, 0xbf,\n\t\t\t0x48, 0x31, 0x57, 0xc6,\n\t\t\t0xc0, 0x71, 0x9f, 0x49,\n\t\t\t0x08, 0xf0, 0x52, 0xc6,\n\t\t\t0x00, 0x19, 0x98, 0x20,\n\t\t\t0xc0, 0x99, 0xc2, 0x99,\n\t\t\t0xc4, 0x99, 0xc6, 0x99,\n\t\t\t0x20, 0xc6, 0xc0, 0x61,\n\t\t\t0x04, 0x11, 0x05, 0xf0,\n\t\t\t0x1e, 0xc6, 0x02, 0x19,\n\t\t\t0xc0, 0x89, 0x15, 0xe0,\n\t\t\t0x19, 0xc6, 0xc0, 0x61,\n\t\t\t0x9c, 0x20, 0x9c, 0x24,\n\t\t\t0x09, 0x11, 0xf7, 0xf1,\n\t\t\t0x14, 0xc6, 0x01, 0x19,\n\t\t\t0xc0, 0x89, 0x13, 0xc1,\n\t\t\t0x13, 0xc6, 0x24, 0x9e,\n\t\t\t0x00, 0x1e, 0x26, 0x8e,\n\t\t\t0x26, 0x76, 0xef, 0x49,\n\t\t\t0xfe, 0xf1, 0x22, 0x76,\n\t\t\t0x08, 0xc1, 0x22, 0x9e,\n\t\t\t0x07, 0xc6, 0x02, 0xc1,\n\t\t\t0x00, 0xb9, 0xae, 0x09,\n\t\t\t0x18, 0xb4, 0x4a, 0xb4,\n\t\t\t0xe0, 0xcc, 0x80, 0xd4,\n\t\t\t0x08, 0xdc, 0x10, 0xe8,\n\t\t\t0xfc, 0xc6, 0xc0, 0x67,\n\t\t\t0xf0, 0x49, 0x1e, 0xf0,\n\t\t\t0xf0, 0x48, 0xc0, 0x8f,\n\t\t\t0xc2, 0x77, 0xf7, 0xc1,\n\t\t\t0xf7, 0xc6, 0x24, 0x9e,\n\t\t\t0x22, 0x9f, 0x8c, 0x1e,\n\t\t\t0x26, 0x8e, 0x26, 0x76,\n\t\t\t0xef, 0x49, 0xfe, 0xf1,\n\t\t\t0xfb, 0x49, 0x10, 0xf0,\n\t\t\t0x12, 0xc6, 0xc0, 0x61,\n\t\t\t0x10, 0x48, 0xc0, 0x89,\n\t\t\t0x11, 0xc6, 0x11, 0xc1,\n\t\t\t0xc0, 0x99, 0x10, 0xc6,\n\t\t\t0xc0, 0x71, 0x18, 0x48,\n\t\t\t0xc0, 0x99, 0x0d, 0xc6,\n\t\t\t0xc0, 0x71, 0x11, 0x48,\n\t\t\t0xc0, 0x99, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x06, 0x5f,\n\t\t\t0x6c, 0xb4, 0xf8, 0xc6,\n\t\t\t0xca, 0xd3, 0x40, 0xd3,\n\t\t\t0x4b, 0x80, 0x34, 0xd3,\n\t\t\t0xe8, 0xd4, 0xfb, 0xc2,\n\t\t\t0x40, 0x71, 0x9f, 0x49,\n\t\t\t0x08, 0xf0, 0xf6, 0xc2,\n\t\t\t0x00, 0x19, 0x98, 0x20,\n\t\t\t0x40, 0x99, 0x42, 0x99,\n\t\t\t0x44, 0x99, 0x46, 0x99,\n\t\t\t0x13, 0xc2, 0x02, 0xc1,\n\t\t\t0x00, 0xb9, 0x04, 0x5a,\n\t\t\t0xec, 0xc1, 0x20, 0x72,\n\t\t\t0xaf, 0x49, 0x08, 0xf0,\n\t\t\t0xe7, 0xc1, 0x00, 0x1a,\n\t\t\t0x28, 0x21, 0x20, 0x9a,\n\t\t\t0x22, 0x9a, 0x24, 0x9a,\n\t\t\t0x26, 0x9a, 0x04, 0xc1,\n\t\t\t0x02, 0xc2, 0x00, 0xba,\n\t\t\t0xc2, 0x5b, 0xca, 0xcf,\n\t\t\t0x40, 0x71, 0x90, 0x48,\n\t\t\t0x91, 0x48, 0x92, 0x48,\n\t\t\t0x40, 0x99, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x8e, 0x20,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0x00, 0x00, 0x02, 0xc0,\n\t\t\t0x00, 0xb8, 0x00, 0x00};\n\t\tstatic u8 pla_patch_13[] = {\n\t\t\t0x10, 0xe0, 0x1c, 0xe0,\n\t\t\t0x20, 0xe0, 0x3a, 0xe0,\n\t\t\t0xd0, 0xe0, 0xdc, 0xe0,\n\t\t\t0x58, 0xe1, 0x09, 0xe0,\n\t\t\t0x08, 0xe0, 0x07, 0xe0,\n\t\t\t0x06, 0xe0, 0x05, 0xe0,\n\t\t\t0x04, 0xe0, 0x03, 0xe0,\n\t\t\t0x02, 0xe0, 0x01, 0xe0,\n\t\t\t0x0c, 0xc4, 0x04, 0x40,\n\t\t\t0x05, 0xf0, 0x8c, 0x26,\n\t\t\t0x0b, 0x15, 0x02, 0xf0,\n\t\t\t0x03, 0xe0, 0x00, 0x9a,\n\t\t\t0x01, 0xe0, 0x02, 0xc4,\n\t\t\t0x00, 0xbc, 0x36, 0x37,\n\t\t\t0x6c, 0xe8, 0x3a, 0x73,\n\t\t\t0xbb, 0x49, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0xde, 0x27,\n\t\t\t0x3a, 0x73, 0xb5, 0x21,\n\t\t\t0xbc, 0x25, 0x04, 0x13,\n\t\t\t0x11, 0xf1, 0x12, 0x1b,\n\t\t\t0x2a, 0x1d, 0x68, 0x31,\n\t\t\t0xda, 0x3a, 0xab, 0x31,\n\t\t\t0x00, 0x1a, 0xc0, 0x9a,\n\t\t\t0x00, 0x13, 0xfb, 0xf1,\n\t\t\t0x20, 0x76, 0x6e, 0x23,\n\t\t\t0x6f, 0x27, 0x3c, 0x1a,\n\t\t\t0xa1, 0x22, 0xb5, 0x41,\n\t\t\t0xe2, 0x9e, 0xe4, 0x76,\n\t\t\t0x6f, 0x48, 0xe4, 0x9e,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x62, 0x2a, 0x87, 0x49,\n\t\t\t0x62, 0xf0, 0x03, 0x1b,\n\t\t\t0x58, 0x41, 0x33, 0xf0,\n\t\t\t0x20, 0x73, 0x0b, 0xc5,\n\t\t\t0xa4, 0x74, 0xc0, 0x49,\n\t\t\t0x1b, 0xf1, 0x08, 0xc4,\n\t\t\t0x14, 0x40, 0x07, 0xf1,\n\t\t\t0x01, 0x1c, 0xa6, 0x9c,\n\t\t\t0xa0, 0x9b, 0x27, 0xe0,\n\t\t\t0xb8, 0xd3, 0x6c, 0xe8,\n\t\t\t0x2c, 0x26, 0x0b, 0x14,\n\t\t\t0x0f, 0xf1, 0x70, 0xc4,\n\t\t\t0xa6, 0x73, 0xb0, 0x49,\n\t\t\t0x08, 0xf0, 0xb0, 0x48,\n\t\t\t0xa6, 0x9b, 0xa0, 0x73,\n\t\t\t0x80, 0x9b, 0x20, 0x73,\n\t\t\t0x40, 0x83, 0x17, 0xe0,\n\t\t\t0x20, 0x73, 0x40, 0x83,\n\t\t\t0x14, 0xe0, 0x70, 0xc4,\n\t\t\t0x22, 0x40, 0x0a, 0xf1,\n\t\t\t0x38, 0x22, 0x48, 0x26,\n\t\t\t0xe8, 0x14, 0x06, 0xfb,\n\t\t\t0x6b, 0xc4, 0x80, 0x74,\n\t\t\t0xca, 0x49, 0x02, 0xf1,\n\t\t\t0xbe, 0x48, 0x40, 0x83,\n\t\t\t0x56, 0xc4, 0x22, 0x40,\n\t\t\t0x57, 0xf0, 0x54, 0xc4,\n\t\t\t0x22, 0x40, 0x57, 0xf0,\n\t\t\t0x0c, 0x1b, 0x58, 0x41,\n\t\t\t0x57, 0xf0, 0x02, 0x24,\n\t\t\t0x03, 0x1b, 0x58, 0x41,\n\t\t\t0x53, 0xf0, 0x47, 0xc5,\n\t\t\t0xa4, 0x74, 0xc0, 0x49,\n\t\t\t0x0e, 0xf1, 0x2c, 0x26,\n\t\t\t0x0b, 0x14, 0x0b, 0xf1,\n\t\t\t0x41, 0xc4, 0x80, 0x73,\n\t\t\t0xa2, 0x9b, 0xa0, 0x73,\n\t\t\t0x80, 0x9b, 0x22, 0x73,\n\t\t\t0x42, 0x83, 0xa2, 0x73,\n\t\t\t0x80, 0x9b, 0x42, 0xe0,\n\t\t\t0x22, 0x73, 0x45, 0xc4,\n\t\t\t0x22, 0x40, 0x0a, 0xf1,\n\t\t\t0x39, 0x22, 0x4e, 0x26,\n\t\t\t0x03, 0x14, 0x06, 0xf1,\n\t\t\t0x3f, 0xc4, 0x80, 0x74,\n\t\t\t0xca, 0x49, 0x02, 0xf1,\n\t\t\t0xbe, 0x48, 0x42, 0x83,\n\t\t\t0x2a, 0xc4, 0x22, 0x40,\n\t\t\t0x31, 0xf1, 0x29, 0xc4,\n\t\t\t0x82, 0x83, 0x2e, 0xe0,\n\t\t\t0x22, 0xc5, 0xa4, 0x74,\n\t\t\t0xc0, 0x49, 0x12, 0xf1,\n\t\t\t0x2c, 0x26, 0x0b, 0x14,\n\t\t\t0x0f, 0xf1, 0x1b, 0xc5,\n\t\t\t0x1b, 0xc4, 0xa6, 0x73,\n\t\t\t0xb0, 0x49, 0x05, 0xf0,\n\t\t\t0xb0, 0x48, 0xa6, 0x9b,\n\t\t\t0xa0, 0x73, 0x80, 0x9b,\n\t\t\t0x40, 0x73, 0x20, 0x9b,\n\t\t\t0x42, 0x73, 0x22, 0x9b,\n\t\t\t0x19, 0xe0, 0x86, 0x49,\n\t\t\t0x03, 0xf0, 0x84, 0x49,\n\t\t\t0x03, 0xf0, 0x40, 0x73,\n\t\t\t0x20, 0x9b, 0x86, 0x49,\n\t\t\t0x03, 0xf0, 0x85, 0x49,\n\t\t\t0x0f, 0xf0, 0x42, 0x73,\n\t\t\t0x22, 0x9b, 0x0c, 0xe0,\n\t\t\t0xb8, 0xd3, 0x6c, 0xe8,\n\t\t\t0x00, 0xc0, 0x04, 0xc0,\n\t\t\t0x82, 0xcc, 0xff, 0xc4,\n\t\t\t0x80, 0x83, 0xab, 0xe7,\n\t\t\t0xfc, 0xc4, 0x84, 0x83,\n\t\t\t0xa8, 0xe7, 0x02, 0xc5,\n\t\t\t0x00, 0xbd, 0x66, 0x0a,\n\t\t\t0x00, 0xea, 0x04, 0xdd,\n\t\t\t0x02, 0xdd, 0x5a, 0xe8,\n\t\t\t0x04, 0xe8, 0x02, 0xc1,\n\t\t\t0x00, 0xb9, 0xac, 0x35,\n\t\t\t0x08, 0xc1, 0x20, 0x70,\n\t\t\t0x87, 0x48, 0x20, 0x98,\n\t\t\t0x36, 0x70, 0x80, 0x48,\n\t\t\t0x36, 0x98, 0x80, 0xff,\n\t\t\t0xd4, 0xb5, 0x04, 0x10,\n\t\t\t0x07, 0xf1, 0x64, 0xc1,\n\t\t\t0x32, 0x70, 0x89, 0x48,\n\t\t\t0x32, 0x98, 0xf1, 0xef,\n\t\t\t0x18, 0xe0, 0x05, 0x10,\n\t\t\t0x07, 0xf1, 0x5c, 0xc1,\n\t\t\t0x32, 0x70, 0x89, 0x48,\n\t\t\t0x32, 0x98, 0x5f, 0xe8,\n\t\t\t0x10, 0xe0, 0x06, 0x10,\n\t\t\t0x07, 0xf1, 0x54, 0xc1,\n\t\t\t0x32, 0x70, 0x09, 0x48,\n\t\t\t0x32, 0x98, 0x57, 0xe8,\n\t\t\t0x08, 0xe0, 0x07, 0x10,\n\t\t\t0x0d, 0xf1, 0x4c, 0xc1,\n\t\t\t0x32, 0x70, 0x09, 0x48,\n\t\t\t0x32, 0x98, 0x57, 0xe8,\n\t\t\t0x47, 0xc1, 0x28, 0x70,\n\t\t\t0x05, 0x48, 0x06, 0x48,\n\t\t\t0x07, 0x48, 0x08, 0x48,\n\t\t\t0x28, 0x98, 0xa4, 0x49,\n\t\t\t0x07, 0xf0, 0x40, 0xc1,\n\t\t\t0x20, 0x70, 0x00, 0x48,\n\t\t\t0x01, 0x48, 0x20, 0x98,\n\t\t\t0x05, 0xe0, 0x3a, 0xc1,\n\t\t\t0x20, 0x70, 0x81, 0x48,\n\t\t\t0x20, 0x98, 0xa5, 0x49,\n\t\t\t0x07, 0xf0, 0x34, 0xc1,\n\t\t\t0x40, 0x01, 0x20, 0x60,\n\t\t\t0x01, 0x48, 0x20, 0x88,\n\t\t\t0x06, 0xe0, 0x2e, 0xc1,\n\t\t\t0x40, 0x01, 0x20, 0x60,\n\t\t\t0x81, 0x48, 0x20, 0x88,\n\t\t\t0xa6, 0x49, 0x06, 0xf0,\n\t\t\t0x26, 0xc1, 0x30, 0x70,\n\t\t\t0x02, 0x48, 0x30, 0x98,\n\t\t\t0x05, 0xe0, 0x21, 0xc1,\n\t\t\t0x30, 0x70, 0x82, 0x48,\n\t\t\t0x30, 0x98, 0xa7, 0x49,\n\t\t\t0x07, 0xf0, 0x1a, 0xc1,\n\t\t\t0x28, 0x70, 0x0a, 0x48,\n\t\t\t0x0b, 0x48, 0x28, 0x98,\n\t\t\t0x06, 0xe0, 0x14, 0xc1,\n\t\t\t0x28, 0x70, 0x8a, 0x48,\n\t\t\t0x8b, 0x48, 0x28, 0x98,\n\t\t\t0x12, 0xc1, 0x12, 0xc2,\n\t\t\t0x24, 0x9a, 0x0c, 0xc1,\n\t\t\t0x10, 0xc2, 0x20, 0x9a,\n\t\t\t0x0c, 0xc1, 0x24, 0x9b,\n\t\t\t0x0d, 0xc2, 0x40, 0x73,\n\t\t\t0x3f, 0x48, 0x40, 0x9b,\n\t\t\t0x02, 0xc1, 0x00, 0xb9,\n\t\t\t0xc6, 0x36, 0x00, 0xb4,\n\t\t\t0x20, 0xb4, 0x40, 0xe0,\n\t\t\t0x68, 0xe8, 0x00, 0xa0,\n\t\t\t0x00, 0x12, 0x58, 0xe8,\n\t\t\t0x92, 0xc1, 0x20, 0x70,\n\t\t\t0x87, 0x48, 0x20, 0x98,\n\t\t\t0x36, 0x70, 0x00, 0x48,\n\t\t\t0x36, 0x98, 0x80, 0xff,\n\t\t\t0x8a, 0xc1, 0x20, 0x70,\n\t\t\t0x07, 0x48, 0x20, 0x98,\n\t\t\t0x36, 0x70, 0x00, 0x48,\n\t\t\t0x36, 0x98, 0x80, 0xff,\n\t\t\t0xa9, 0xe7, 0x02, 0xc1,\n\t\t\t0x00, 0xb9, 0xc6, 0x36};\n\t\tu8 new_ver;\n\n\t\trtl_fw_ver_erase(tp);\n\n\t\tnew_ver = 6;\n\t\tif (rtl_check_fw_ver_ok(tp, USB_FW_USB_VER, new_ver)) {\n\t\t\trtl_clear_bp(tp, MCU_TYPE_USB);\n\n\t\t\tgeneric_ocp_write(tp, 0xe600, 0xff,\n\t\t\t\t\t  sizeof(usb_patch_13), usb_patch_13,\n\t\t\t\t\t  MCU_TYPE_USB);\n\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_BA, 0xc000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_0, 0x0fba);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_1, 0x3660);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_2, 0x1478);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_3, 0x77ae);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_4, 0x60e0);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_5, 0x6d94);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_6, 0x284e);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_7, 0x27f6);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_8, 0x3140);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_9, 0x09ac);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_10, 0x5e2a);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_11, 0x5a02);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_12, 0x5bc0);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_13, 0x208a);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_14, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_15, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP2_EN, 0x3fff);\n\t\t\tocp_write_byte(tp, MCU_TYPE_USB, USB_FW_USB_VER,\n\t\t\t\t       new_ver);\n\t\t}\n\n\t\tnew_ver = 8;\n\t\tif (rtl_check_fw_ver_ok(tp, USB_FW_PLA_VER, new_ver)) {\n\t\t\trtl_clear_bp(tp, MCU_TYPE_PLA);\n\n\t\t\tgeneric_ocp_write(tp, 0xf800, 0xff,\n\t\t\t\t\t  sizeof(pla_patch_13), pla_patch_13,\n\t\t\t\t\t  MCU_TYPE_PLA);\n\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_BA, 0x8000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_0, 0x374e);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_1, 0x27dc);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_2, 0x2a5c);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_3, 0x09d0);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_4, 0x359e);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_5, 0x35b6);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_6, 0x35b4);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_7, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_EN, 0x007f);\n\t\t\tocp_write_byte(tp, MCU_TYPE_USB, USB_FW_PLA_VER,\n\t\t\t\t       new_ver);\n\t\t}\n\t}\n\n\trtl_reset_ocp_base(tp);\n}\n\nstatic void r8157_patch_code(struct r8152 *tp)\n{\n\tif (tp->version == RTL_VER_17) {\n\t\tstatic u8 usb_patch_17[] = {\n\t\t\t0x10, 0xe0, 0x20, 0xe0,\n\t\t\t0x22, 0xe0, 0x71, 0xe0,\n\t\t\t0x75, 0xe0, 0x9b, 0xe0,\n\t\t\t0xbf, 0xe0, 0xd8, 0xe0,\n\t\t\t0xfb, 0xe0, 0xff, 0xe0,\n\t\t\t0x08, 0xe1, 0x1c, 0xe1,\n\t\t\t0x1e, 0xe1, 0x29, 0xe1,\n\t\t\t0x4c, 0xe1, 0x52, 0xe1,\n\t\t\t0x0d, 0xc6, 0xc0, 0x71,\n\t\t\t0x91, 0x48, 0xc0, 0x99,\n\t\t\t0x11, 0x48, 0xc0, 0x99,\n\t\t\t0x09, 0xc6, 0x09, 0xc1,\n\t\t\t0xc0, 0x99, 0x05, 0xc6,\n\t\t\t0x02, 0xc1, 0x00, 0xb9,\n\t\t\t0x80, 0x33, 0x86, 0xd4,\n\t\t\t0x6c, 0xe4, 0x00, 0xb9,\n\t\t\t0x47, 0x68, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x32, 0x19,\n\t\t\t0x27, 0xc2, 0x40, 0x71,\n\t\t\t0x92, 0x49, 0x0e, 0xf1,\n\t\t\t0x91, 0x49, 0x0c, 0xf1,\n\t\t\t0x27, 0xc2, 0x01, 0x02,\n\t\t\t0xc0, 0x9a, 0x00, 0x19,\n\t\t\t0x18, 0x48, 0xc2, 0x99,\n\t\t\t0x1a, 0xc1, 0xc4, 0x99,\n\t\t\t0xc6, 0x9b, 0x16, 0xff,\n\t\t\t0x3d, 0xe0, 0x17, 0xc2,\n\t\t\t0x40, 0x73, 0xb0, 0x49,\n\t\t\t0x28, 0xf0, 0x14, 0xc2,\n\t\t\t0x40, 0x73, 0xbf, 0x49,\n\t\t\t0x19, 0xf1, 0x11, 0xc2,\n\t\t\t0x50, 0x73, 0xb0, 0x49,\n\t\t\t0x15, 0xf1, 0x0e, 0xc3,\n\t\t\t0x0e, 0xc2, 0x60, 0x9a,\n\t\t\t0x40, 0x1a, 0x28, 0x21,\n\t\t\t0x28, 0x25, 0x62, 0x9a,\n\t\t\t0x17, 0xff, 0x28, 0xe0,\n\t\t\t0xe0, 0x01, 0x44, 0xd8,\n\t\t\t0x0c, 0xd2, 0x74, 0xd3,\n\t\t\t0x00, 0xd4, 0x70, 0xd3,\n\t\t\t0xe8, 0xd4, 0x04, 0xc7,\n\t\t\t0xff, 0xff, 0xf2, 0xb8,\n\t\t\t0x28, 0xe4, 0xfc, 0xc2,\n\t\t\t0x03, 0x02, 0xc0, 0x9a,\n\t\t\t0x00, 0x19, 0xc2, 0x99,\n\t\t\t0x13, 0x48, 0xc4, 0x99,\n\t\t\t0xf6, 0xc3, 0xc6, 0x9b,\n\t\t\t0x16, 0xff, 0x12, 0xe0,\n\t\t\t0xf3, 0xc2, 0x40, 0x71,\n\t\t\t0x1f, 0x48, 0x40, 0x99,\n\t\t\t0xf0, 0xc2, 0x01, 0x19,\n\t\t\t0x42, 0x99, 0x01, 0x19,\n\t\t\t0x40, 0x89, 0xe6, 0xc3,\n\t\t\t0xe6, 0xc2, 0x60, 0x9a,\n\t\t\t0x40, 0x1a, 0x28, 0x21,\n\t\t\t0x28, 0x25, 0x62, 0x9a,\n\t\t\t0x17, 0xff, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0x1c, 0x2d,\n\t\t\t0x00, 0x75, 0xd8, 0x49,\n\t\t\t0x02, 0xc4, 0x00, 0xbc,\n\t\t\t0x36, 0xc6, 0x04, 0xf0,\n\t\t\t0x02, 0xc0, 0x00, 0xb8,\n\t\t\t0xb2, 0xa0, 0x1e, 0xc7,\n\t\t\t0xf3, 0x66, 0xb1, 0x3b,\n\t\t\t0xf3, 0x8e, 0x00, 0x16,\n\t\t\t0x03, 0xf1, 0x08, 0xe8,\n\t\t\t0x04, 0xe0, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0xaa, 0xa1,\n\t\t\t0x02, 0xc7, 0x00, 0xbf,\n\t\t\t0x82, 0xa1, 0x11, 0xc5,\n\t\t\t0xa2, 0x76, 0x6a, 0x27,\n\t\t\t0x6a, 0x23, 0x0e, 0xc7,\n\t\t\t0x37, 0x40, 0x09, 0xf1,\n\t\t\t0x0c, 0xc5, 0x0c, 0xc6,\n\t\t\t0xc0, 0x9d, 0x08, 0x1d,\n\t\t\t0xd8, 0x22, 0xd8, 0x26,\n\t\t\t0xc2, 0x9d, 0x17, 0xff,\n\t\t\t0x80, 0xff, 0x80, 0xcb,\n\t\t\t0x80, 0xc3, 0x00, 0xc4,\n\t\t\t0xe8, 0xd4, 0x70, 0xd3,\n\t\t\t0x24, 0xc3, 0x60, 0x74,\n\t\t\t0xcf, 0x49, 0x0e, 0xf1,\n\t\t\t0x1c, 0xc3, 0x60, 0x74,\n\t\t\t0xcf, 0x49, 0x16, 0xf0,\n\t\t\t0x44, 0x22, 0x4c, 0x26,\n\t\t\t0x17, 0xc3, 0x60, 0x65,\n\t\t\t0xd5, 0x22, 0xd5, 0x26,\n\t\t\t0x25, 0x40, 0x0e, 0xf1,\n\t\t\t0x0d, 0xe0, 0xcf, 0x48,\n\t\t\t0x60, 0x9c, 0x0f, 0xc3,\n\t\t\t0x62, 0x74, 0x11, 0x1d,\n\t\t\t0x62, 0x9d, 0x0c, 0xc3,\n\t\t\t0x62, 0x75, 0xd3, 0x48,\n\t\t\t0x62, 0x9d, 0x07, 0xc3,\n\t\t\t0x62, 0x9c, 0x02, 0xc3,\n\t\t\t0x00, 0xbb, 0x14, 0x09,\n\t\t\t0x44, 0xd6, 0xf4, 0xcb,\n\t\t\t0x3c, 0xd5, 0x04, 0xb7,\n\t\t\t0xf2, 0xb8, 0x3a, 0xc2,\n\t\t\t0x40, 0x71, 0x9f, 0x49,\n\t\t\t0x06, 0xf1, 0x85, 0xc2,\n\t\t\t0x50, 0x71, 0x90, 0x49,\n\t\t\t0x02, 0xf1, 0x0f, 0xe0,\n\t\t\t0x31, 0xc2, 0x40, 0x71,\n\t\t\t0x9f, 0x48, 0x40, 0x99,\n\t\t\t0x82, 0xc2, 0x00, 0x1b,\n\t\t\t0x40, 0x8b, 0xef, 0xc2,\n\t\t\t0x40, 0x73, 0xbf, 0x48,\n\t\t\t0x40, 0x9b, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0xfc, 0x5b,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x0e, 0x5c, 0x21, 0xc6,\n\t\t\t0x21, 0xc1, 0xc0, 0x99,\n\t\t\t0x20, 0xc0, 0xc6, 0x98,\n\t\t\t0x16, 0xff, 0xc2, 0x70,\n\t\t\t0x0d, 0x20, 0x0d, 0x24,\n\t\t\t0x82, 0x49, 0x07, 0xf0,\n\t\t\t0x13, 0xc6, 0xc0, 0x71,\n\t\t\t0x9c, 0x20, 0x9c, 0x24,\n\t\t\t0x03, 0x11, 0x0a, 0xf1,\n\t\t\t0x0d, 0xc6, 0xc0, 0x71,\n\t\t\t0x9c, 0x24, 0x06, 0x11,\n\t\t\t0x05, 0xf1, 0x0a, 0xc0,\n\t\t\t0x00, 0x71, 0x1f, 0x48,\n\t\t\t0x00, 0x99, 0x05, 0xc0,\n\t\t\t0x02, 0xc1, 0x00, 0xb9,\n\t\t\t0xb4, 0x50, 0xba, 0xd4,\n\t\t\t0x20, 0xd4, 0x74, 0xd3,\n\t\t\t0x80, 0xcf, 0x0c, 0xc7,\n\t\t\t0xff, 0xff, 0x04, 0xc6,\n\t\t\t0x02, 0xc5, 0x00, 0xbd,\n\t\t\t0xa4, 0x58, 0x80, 0x90,\n\t\t\t0x08, 0xc5, 0x08, 0xc6,\n\t\t\t0xa0, 0x77, 0xc0, 0x9f,\n\t\t\t0x07, 0xb0, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0xae, 0x5a,\n\t\t\t0xd8, 0xc7, 0x18, 0x90,\n\t\t\t0x11, 0xc2, 0x16, 0x40,\n\t\t\t0x0c, 0xf0, 0x0f, 0xc2,\n\t\t\t0x16, 0x40, 0x09, 0xf0,\n\t\t\t0x0d, 0xc2, 0x16, 0x40,\n\t\t\t0x06, 0xf0, 0x0b, 0xc2,\n\t\t\t0x16, 0x40, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0x42, 0x45,\n\t\t\t0x02, 0xc2, 0x00, 0xba,\n\t\t\t0x46, 0x45, 0x18, 0xc0,\n\t\t\t0x1a, 0xc0, 0x1c, 0xc0,\n\t\t\t0x14, 0xc0, 0x02, 0xc1,\n\t\t\t0x00, 0xb9, 0x1c, 0x64,\n\t\t\t0x0a, 0xc0, 0x00, 0x72,\n\t\t\t0xa2, 0x49, 0x03, 0xf0,\n\t\t\t0x25, 0x48, 0x00, 0x9a,\n\t\t\t0x05, 0xc0, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0x94, 0xd0,\n\t\t\t0x26, 0xd4, 0x06, 0xd4,\n\t\t\t0x20, 0xc6, 0xc6, 0x75,\n\t\t\t0xd5, 0x49, 0x16, 0xf0,\n\t\t\t0xd5, 0x48, 0xc6, 0x9d,\n\t\t\t0x1b, 0xc5, 0xa0, 0x76,\n\t\t\t0x11, 0x1c, 0xa0, 0x9c,\n\t\t\t0x18, 0xc4, 0x82, 0x63,\n\t\t\t0xb4, 0x48, 0xb5, 0x48,\n\t\t\t0xb6, 0x48, 0xb7, 0x48,\n\t\t\t0x82, 0x8b, 0xa0, 0x9e,\n\t\t\t0x11, 0xc4, 0x80, 0x73,\n\t\t\t0xb0, 0x49, 0x04, 0xf0,\n\t\t\t0xb2, 0x49, 0x02, 0xf0,\n\t\t\t0x05, 0xe0, 0xf6, 0x65,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0xe6, 0x04, 0x02, 0xc6,\n\t\t\t0x00, 0xbe, 0x5a, 0x05,\n\t\t\t0x20, 0xd4, 0x3e, 0xd5,\n\t\t\t0x04, 0xb7, 0x26, 0xd4,\n\t\t\t0x06, 0xc1, 0x40, 0x1a,\n\t\t\t0x20, 0x9a, 0x02, 0xc2,\n\t\t\t0x00, 0xba, 0xb2, 0xab,\n\t\t\t0x18, 0x90, 0x0e, 0xc7,\n\t\t\t0xe0, 0x75, 0xd6, 0x48,\n\t\t\t0xe0, 0x9d, 0x0b, 0xc7,\n\t\t\t0x00, 0x1d, 0xe0, 0x8d,\n\t\t\t0x09, 0xc7, 0xe0, 0x75,\n\t\t\t0xdf, 0x48, 0xe0, 0x9d,\n\t\t\t0x02, 0xc1, 0x00, 0xb9,\n\t\t\t0xe4, 0x4f, 0xe8, 0xd4,\n\t\t\t0x28, 0xe4, 0xf2, 0xb8};\n\t\tstatic u8 pla_patch_17[] = {\n\t\t\t0x10, 0xe0, 0x0f, 0xe0,\n\t\t\t0x0e, 0xe0, 0x0d, 0xe0,\n\t\t\t0x0c, 0xe0, 0x0b, 0xe0,\n\t\t\t0x0a, 0xe0, 0x09, 0xe0,\n\t\t\t0x08, 0xe0, 0x07, 0xe0,\n\t\t\t0x06, 0xe0, 0x05, 0xe0,\n\t\t\t0x04, 0xe0, 0x03, 0xe0,\n\t\t\t0x02, 0xe0, 0x01, 0xe0,\n\t\t\t0x08, 0xc6, 0xc0, 0x71,\n\t\t\t0x90, 0x49, 0x07, 0xf0,\n\t\t\t0x05, 0xc6, 0x02, 0xc1,\n\t\t\t0x00, 0xb9, 0x80, 0x1e,\n\t\t\t0xc8, 0xe0, 0x10, 0xd4,\n\t\t\t0x02, 0xc6, 0x00, 0xbe,\n\t\t\t0x86, 0x1e, 0x00, 0x00};\n\t\tu8 new_ver;\n\n\t\trtl_fw_ver_erase(tp);\n\n\t\tnew_ver = 3;\n\t\tif (rtl_check_fw_ver_ok(tp, USB_FW_USB_VER, new_ver)) {\n\t\t\trtl_clear_bp(tp, MCU_TYPE_USB);\n\n\t\t\tgeneric_ocp_write(tp, 0xe600, 0xff,\n\t\t\t\t\t  sizeof(usb_patch_17), usb_patch_17,\n\t\t\t\t\t  MCU_TYPE_USB);\n\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_BA, 0xf000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_0, 0x337e);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_1, 0x192a);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_2, 0x269a);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_3, 0xc632);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_4, 0xa108);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_5, 0x08f4);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_6, 0x5be6);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_7, 0x50b2);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_8, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_9, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_10, 0x453e);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_11, 0x0000);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_12, 0xd092);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_13, 0x04e4);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_14, 0xa93e);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP_15, 0x5074);\n\t\t\tocp_write_word(tp, MCU_TYPE_USB, USB_BP2_EN, 0x74ff);\n\t\t\tocp_write_byte(tp, MCU_TYPE_USB, USB_FW_USB_VER,\n\t\t\t\t       new_ver);\n\t\t}\n\n\t\tnew_ver = 1;\n\t\tif (rtl_check_fw_ver_ok(tp, USB_FW_PLA_VER, new_ver)) {\n\t\t\trtl_clear_bp(tp, MCU_TYPE_PLA);\n\n\t\t\tgeneric_ocp_write(tp, 0xf800, 0xff,\n\t\t\t\t\t  sizeof(pla_patch_17), pla_patch_17,\n\t\t\t\t\t  MCU_TYPE_PLA);\n\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_BA, 0x8000);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_0, 0x1e7e);\n\t\t\tocp_write_word(tp, MCU_TYPE_PLA, PLA_BP_EN, 0x0001);\n\t\t\tocp_write_byte(tp, MCU_TYPE_USB, USB_FW_PLA_VER,\n\t\t\t\t       new_ver);\n\t\t}\n\t}\n}\n\nstatic int rtl_ram_code_speed_up(struct r8152 *tp, bool wait)\n{\n\tu16 fw_version, code_ver;\n\tu32 len = 0, ocp_data;\n\tu8 *data = NULL;\n\tint ret = 0;\n\n\trtl_reset_ocp_base(tp);\n\n\tif (tp->version == RTL_VER_13 || tp->version == RTL_VER_15) {\n\t\tstatic u8 ram13[] = {\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x24, 0x80,\n\t\t\t0x38, 0xb4, 0x01, 0x37,\n\t\t\t0x36, 0xb4, 0x2e, 0xb8,\n\t\t\t0x38, 0xb4, 0x01, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xb0,\n\t\t\t0x20, 0xb8, 0x90, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x16, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x12, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x14, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x10, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x1a, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x3f, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x45, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x67, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x6d, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x71, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xb1, 0x80,\n\t\t\t0x38, 0xb4, 0x93, 0xd0,\n\t\t\t0x38, 0xb4, 0xc4, 0xd1,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x5c, 0x13,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0xbc, 0x5f,\n\t\t\t0x38, 0xb4, 0x04, 0xd5,\n\t\t\t0x38, 0xb4, 0xf1, 0xc9,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xc9, 0x0f,\n\t\t\t0x38, 0xb4, 0x50, 0xbb,\n\t\t\t0x38, 0xb4, 0x05, 0xd5,\n\t\t\t0x38, 0xb4, 0x02, 0xa2,\n\t\t\t0x38, 0xb4, 0x04, 0xd5,\n\t\t\t0x38, 0xb4, 0x0f, 0x8c,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x19, 0x15,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x5c, 0x13,\n\t\t\t0x38, 0xb4, 0x5e, 0xd7,\n\t\t\t0x38, 0xb4, 0xae, 0x5f,\n\t\t\t0x38, 0xb4, 0x50, 0x9b,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x5c, 0x13,\n\t\t\t0x38, 0xb4, 0x5e, 0xd7,\n\t\t\t0x38, 0xb4, 0xae, 0x7f,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x5c, 0x13,\n\t\t\t0x38, 0xb4, 0x07, 0xd7,\n\t\t\t0x38, 0xb4, 0xa7, 0x40,\n\t\t\t0x38, 0xb4, 0x19, 0xd7,\n\t\t\t0x38, 0xb4, 0x71, 0x40,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x57, 0x15,\n\t\t\t0x38, 0xb4, 0x19, 0xd7,\n\t\t\t0x38, 0xb4, 0x70, 0x2f,\n\t\t\t0x38, 0xb4, 0x3b, 0x80,\n\t\t\t0x38, 0xb4, 0x73, 0x2f,\n\t\t\t0x38, 0xb4, 0x6a, 0x15,\n\t\t\t0x38, 0xb4, 0x70, 0x5e,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x5d, 0x15,\n\t\t\t0x38, 0xb4, 0x05, 0xd5,\n\t\t\t0x38, 0xb4, 0x02, 0xa2,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0xed, 0xff,\n\t\t\t0x38, 0xb4, 0x09, 0xd7,\n\t\t\t0x38, 0xb4, 0x54, 0x40,\n\t\t\t0x38, 0xb4, 0x88, 0xa7,\n\t\t\t0x38, 0xb4, 0x0b, 0xd7,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x2a, 0x17,\n\t\t\t0x38, 0xb4, 0xc1, 0xc0,\n\t\t\t0x38, 0xb4, 0xc0, 0xc0,\n\t\t\t0x38, 0xb4, 0x5a, 0xd0,\n\t\t\t0x38, 0xb4, 0xba, 0xd1,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0x29, 0x25,\n\t\t\t0x38, 0xb4, 0x2a, 0x02,\n\t\t\t0x38, 0xb4, 0xa7, 0xd0,\n\t\t\t0x38, 0xb4, 0xb9, 0xd1,\n\t\t\t0x38, 0xb4, 0x08, 0xa2,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x0e, 0x08,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0x8b, 0x40,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x65, 0x0a,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x0a,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x09,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x15, 0x09,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x09, 0x09,\n\t\t\t0x38, 0xb4, 0x8f, 0x22,\n\t\t\t0x38, 0xb4, 0x4e, 0x80,\n\t\t\t0x38, 0xb4, 0x01, 0x98,\n\t\t\t0x38, 0xb4, 0x1e, 0xd7,\n\t\t\t0x38, 0xb4, 0x61, 0x5d,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x2a, 0x02,\n\t\t\t0x38, 0xb4, 0x05, 0x20,\n\t\t\t0x38, 0xb4, 0x1a, 0x09,\n\t\t\t0x38, 0xb4, 0xd9, 0x3b,\n\t\t\t0x38, 0xb4, 0x19, 0x09,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x16, 0x09,\n\t\t\t0x38, 0xb4, 0x90, 0xd0,\n\t\t\t0x38, 0xb4, 0xc9, 0xd1,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x64, 0x10,\n\t\t\t0x38, 0xb4, 0x96, 0xd0,\n\t\t\t0x38, 0xb4, 0xa9, 0xd1,\n\t\t\t0x38, 0xb4, 0x03, 0xd5,\n\t\t\t0x38, 0xb4, 0x04, 0xa1,\n\t\t\t0x38, 0xb4, 0x07, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x09,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x10, 0xbc,\n\t\t\t0x38, 0xb4, 0x01, 0xd5,\n\t\t\t0x38, 0xb4, 0x01, 0xce,\n\t\t\t0x38, 0xb4, 0x01, 0xa2,\n\t\t\t0x38, 0xb4, 0x01, 0x82,\n\t\t\t0x38, 0xb4, 0x00, 0xce,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x84, 0xc4,\n\t\t\t0x38, 0xb4, 0x03, 0xd5,\n\t\t\t0x38, 0xb4, 0x02, 0xcc,\n\t\t\t0x38, 0xb4, 0x0d, 0xcd,\n\t\t\t0x38, 0xb4, 0x01, 0xaf,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x03, 0xd7,\n\t\t\t0x38, 0xb4, 0x71, 0x43,\n\t\t\t0x38, 0xb4, 0x08, 0xbd,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x5c, 0x13,\n\t\t\t0x38, 0xb4, 0x5e, 0xd7,\n\t\t\t0x38, 0xb4, 0xb3, 0x5f,\n\t\t\t0x38, 0xb4, 0x03, 0xd5,\n\t\t\t0x38, 0xb4, 0xf5, 0xd0,\n\t\t\t0x38, 0xb4, 0xc6, 0xd1,\n\t\t\t0x38, 0xb4, 0xf0, 0x0c,\n\t\t\t0x38, 0xb4, 0x50, 0x0e,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x1c, 0x40,\n\t\t\t0x38, 0xb4, 0xf5, 0xd0,\n\t\t\t0x38, 0xb4, 0xc6, 0xd1,\n\t\t\t0x38, 0xb4, 0xf0, 0x0c,\n\t\t\t0x38, 0xb4, 0xa0, 0x0e,\n\t\t\t0x38, 0xb4, 0x1c, 0x40,\n\t\t\t0x38, 0xb4, 0x7b, 0xd0,\n\t\t\t0x38, 0xb4, 0xc5, 0xd1,\n\t\t\t0x38, 0xb4, 0xf0, 0x8e,\n\t\t\t0x38, 0xb4, 0x1c, 0x40,\n\t\t\t0x38, 0xb4, 0x08, 0x9d,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x5c, 0x13,\n\t\t\t0x38, 0xb4, 0x5e, 0xd7,\n\t\t\t0x38, 0xb4, 0xb3, 0x7f,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x5c, 0x13,\n\t\t\t0x38, 0xb4, 0x5e, 0xd7,\n\t\t\t0x38, 0xb4, 0xad, 0x5f,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xc5, 0x14,\n\t\t\t0x38, 0xb4, 0x03, 0xd7,\n\t\t\t0x38, 0xb4, 0x81, 0x31,\n\t\t\t0x38, 0xb4, 0xaf, 0x80,\n\t\t\t0x38, 0xb4, 0xad, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x5c, 0x13,\n\t\t\t0x38, 0xb4, 0x03, 0xd7,\n\t\t\t0x38, 0xb4, 0xba, 0x5f,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xc7, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0xa8,\n\t\t\t0x38, 0xb4, 0x01, 0xa3,\n\t\t\t0x38, 0xb4, 0x01, 0xa8,\n\t\t\t0x38, 0xb4, 0x04, 0xc0,\n\t\t\t0x38, 0xb4, 0x10, 0xd7,\n\t\t\t0x38, 0xb4, 0x00, 0x40,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x79, 0x1e,\n\t\t\t0x36, 0xb4, 0x26, 0xa0,\n\t\t\t0x38, 0xb4, 0x78, 0x1e,\n\t\t\t0x36, 0xb4, 0x24, 0xa0,\n\t\t\t0x38, 0xb4, 0x93, 0x0c,\n\t\t\t0x36, 0xb4, 0x22, 0xa0,\n\t\t\t0x38, 0xb4, 0x62, 0x10,\n\t\t\t0x36, 0xb4, 0x20, 0xa0,\n\t\t\t0x38, 0xb4, 0x15, 0x09,\n\t\t\t0x36, 0xb4, 0x06, 0xa0,\n\t\t\t0x38, 0xb4, 0x0a, 0x02,\n\t\t\t0x36, 0xb4, 0x04, 0xa0,\n\t\t\t0x38, 0xb4, 0x26, 0x17,\n\t\t\t0x36, 0xb4, 0x02, 0xa0,\n\t\t\t0x38, 0xb4, 0x42, 0x15,\n\t\t\t0x36, 0xb4, 0x00, 0xa0,\n\t\t\t0x38, 0xb4, 0xc7, 0x0f,\n\t\t\t0x36, 0xb4, 0x08, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0xff,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x16, 0xa0,\n\t\t\t0x38, 0xb4, 0x10, 0x00,\n\t\t\t0x36, 0xb4, 0x12, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x14, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x10, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x1d, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x2c, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x2c, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x2c, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x2c, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x2c, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x2c, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x90, 0x60,\n\t\t\t0x38, 0xb4, 0xd1, 0x60,\n\t\t\t0x38, 0xb4, 0x5c, 0xc9,\n\t\t\t0x38, 0xb4, 0x07, 0xf0,\n\t\t\t0x38, 0xb4, 0xb1, 0x60,\n\t\t\t0x38, 0xb4, 0x5a, 0xc9,\n\t\t\t0x38, 0xb4, 0x04, 0xf0,\n\t\t\t0x38, 0xb4, 0x56, 0xc9,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0x4e, 0xc9,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xcd, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x90, 0x60,\n\t\t\t0x38, 0xb4, 0xd1, 0x60,\n\t\t\t0x38, 0xb4, 0x5c, 0xc9,\n\t\t\t0x38, 0xb4, 0x07, 0xf0,\n\t\t\t0x38, 0xb4, 0xb1, 0x60,\n\t\t\t0x38, 0xb4, 0x5a, 0xc9,\n\t\t\t0x38, 0xb4, 0x04, 0xf0,\n\t\t\t0x38, 0xb4, 0x56, 0xc9,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0x4e, 0xc9,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x2a, 0x02,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x32, 0x01,\n\t\t\t0x36, 0xb4, 0x8e, 0xa0,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x8c, 0xa0,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x8a, 0xa0,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x88, 0xa0,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x86, 0xa0,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x84, 0xa0,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x82, 0xa0,\n\t\t\t0x38, 0xb4, 0x2f, 0x01,\n\t\t\t0x36, 0xb4, 0x80, 0xa0,\n\t\t\t0x38, 0xb4, 0xcc, 0x00,\n\t\t\t0x36, 0xb4, 0x90, 0xa0,\n\t\t\t0x38, 0xb4, 0x03, 0x01,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x16, 0xa0,\n\t\t\t0x38, 0xb4, 0x20, 0x00,\n\t\t\t0x36, 0xb4, 0x12, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x14, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x10, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x20, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x2a, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x35, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x3c, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x3c, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x3c, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x3c, 0x80,\n\t\t\t0x38, 0xb4, 0x07, 0xd1,\n\t\t\t0x38, 0xb4, 0x42, 0xd0,\n\t\t\t0x38, 0xb4, 0x04, 0xa4,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xdf, 0x09,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x80, 0x82,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x65, 0x60,\n\t\t\t0x38, 0xb4, 0x25, 0xd1,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0x2b, 0xd1,\n\t\t\t0x38, 0xb4, 0x40, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x7f, 0x07,\n\t\t\t0x38, 0xb4, 0xf0, 0x0c,\n\t\t\t0x38, 0xb4, 0x50, 0x0c,\n\t\t\t0x38, 0xb4, 0x04, 0xd1,\n\t\t\t0x38, 0xb4, 0x40, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xa8, 0x0a,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x2e, 0x0a,\n\t\t\t0x38, 0xb4, 0x9b, 0xcb,\n\t\t\t0x38, 0xb4, 0x10, 0xd1,\n\t\t\t0x38, 0xb4, 0x40, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x7b, 0x0b,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xdf, 0x09,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x1b, 0x08,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xdf, 0x09,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0xb8, 0x7f,\n\t\t\t0x38, 0xb4, 0x18, 0xa7,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x4e, 0x07,\n\t\t\t0x36, 0xb4, 0x0e, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x0c, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x0a, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x08, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x06, 0xa1,\n\t\t\t0x38, 0xb4, 0x4d, 0x07,\n\t\t\t0x36, 0xb4, 0x04, 0xa1,\n\t\t\t0x38, 0xb4, 0x18, 0x08,\n\t\t\t0x36, 0xb4, 0x02, 0xa1,\n\t\t\t0x38, 0xb4, 0x2c, 0x0a,\n\t\t\t0x36, 0xb4, 0x00, 0xa1,\n\t\t\t0x38, 0xb4, 0x7e, 0x07,\n\t\t\t0x36, 0xb4, 0x10, 0xa1,\n\t\t\t0x38, 0xb4, 0x0f, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x7c, 0xb8,\n\t\t\t0x38, 0xb4, 0x25, 0x86,\n\t\t\t0x36, 0xb4, 0x7e, 0xb8,\n\t\t\t0x38, 0xb4, 0x86, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0x3d,\n\t\t\t0x38, 0xb4, 0x89, 0x86,\n\t\t\t0x38, 0xb4, 0x88, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0x69,\n\t\t\t0x38, 0xb4, 0x87, 0x88,\n\t\t\t0x38, 0xb4, 0x88, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0x9c,\n\t\t\t0x38, 0xb4, 0x9c, 0x88,\n\t\t\t0x38, 0xb4, 0x88, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0x9c,\n\t\t\t0x38, 0xb4, 0x9c, 0x88,\n\t\t\t0x38, 0xb4, 0x86, 0xbf,\n\t\t\t0x38, 0xb4, 0xd7, 0x49,\n\t\t\t0x38, 0xb4, 0x40, 0x00,\n\t\t\t0x38, 0xb4, 0x77, 0x02,\n\t\t\t0x38, 0xb4, 0xaf, 0x7d,\n\t\t\t0x38, 0xb4, 0x27, 0x27,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x05, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x08, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0xf3, 0x71,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0xf6, 0x71,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x29, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x2c, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x17, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x1a, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x1d, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x11, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x20, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x14, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x2f, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x23, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x32, 0x72,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x26, 0x72,\n\t\t\t0x38, 0xb4, 0xf9, 0xf8,\n\t\t\t0x38, 0xb4, 0xe0, 0xfa,\n\t\t\t0x38, 0xb4, 0xb3, 0x85,\n\t\t\t0x38, 0xb4, 0x02, 0x38,\n\t\t\t0x38, 0xb4, 0x27, 0xad,\n\t\t\t0x38, 0xb4, 0xae, 0x02,\n\t\t\t0x38, 0xb4, 0xaf, 0x03,\n\t\t\t0x38, 0xb4, 0x30, 0x88,\n\t\t\t0x38, 0xb4, 0x66, 0x1f,\n\t\t\t0x38, 0xb4, 0x65, 0xef,\n\t\t\t0x38, 0xb4, 0xc2, 0xbf,\n\t\t\t0x38, 0xb4, 0x1a, 0x1f,\n\t\t\t0x38, 0xb4, 0xf7, 0x96,\n\t\t\t0x38, 0xb4, 0xee, 0x05,\n\t\t\t0x38, 0xb4, 0xd2, 0xff,\n\t\t\t0x38, 0xb4, 0xda, 0x00,\n\t\t\t0x38, 0xb4, 0x05, 0xf6,\n\t\t\t0x38, 0xb4, 0xc2, 0xbf,\n\t\t\t0x38, 0xb4, 0x1a, 0x2f,\n\t\t\t0x38, 0xb4, 0xf7, 0x96,\n\t\t\t0x38, 0xb4, 0xee, 0x05,\n\t\t\t0x38, 0xb4, 0xd2, 0xff,\n\t\t\t0x38, 0xb4, 0xdb, 0x00,\n\t\t\t0x38, 0xb4, 0x05, 0xf6,\n\t\t\t0x38, 0xb4, 0x02, 0xef,\n\t\t\t0x38, 0xb4, 0x11, 0x1f,\n\t\t\t0x38, 0xb4, 0x42, 0x0d,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x42,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x02, 0xef,\n\t\t\t0x38, 0xb4, 0x03, 0x1b,\n\t\t\t0x38, 0xb4, 0x11, 0x1f,\n\t\t\t0x38, 0xb4, 0x42, 0x0d,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x45,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x02, 0xef,\n\t\t\t0x38, 0xb4, 0x03, 0x1a,\n\t\t\t0x38, 0xb4, 0x11, 0x1f,\n\t\t\t0x38, 0xb4, 0x42, 0x0d,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x48,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0xc2, 0xbf,\n\t\t\t0x38, 0xb4, 0x1a, 0x3f,\n\t\t\t0x38, 0xb4, 0xf7, 0x96,\n\t\t\t0x38, 0xb4, 0xee, 0x05,\n\t\t\t0x38, 0xb4, 0xd2, 0xff,\n\t\t\t0x38, 0xb4, 0xda, 0x00,\n\t\t\t0x38, 0xb4, 0x05, 0xf6,\n\t\t\t0x38, 0xb4, 0xc2, 0xbf,\n\t\t\t0x38, 0xb4, 0x1a, 0x4f,\n\t\t\t0x38, 0xb4, 0xf7, 0x96,\n\t\t\t0x38, 0xb4, 0xee, 0x05,\n\t\t\t0x38, 0xb4, 0xd2, 0xff,\n\t\t\t0x38, 0xb4, 0xdb, 0x00,\n\t\t\t0x38, 0xb4, 0x05, 0xf6,\n\t\t\t0x38, 0xb4, 0x02, 0xef,\n\t\t\t0x38, 0xb4, 0x11, 0x1f,\n\t\t\t0x38, 0xb4, 0x42, 0x0d,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x4b,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x02, 0xef,\n\t\t\t0x38, 0xb4, 0x03, 0x1b,\n\t\t\t0x38, 0xb4, 0x11, 0x1f,\n\t\t\t0x38, 0xb4, 0x42, 0x0d,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x4e,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x02, 0xef,\n\t\t\t0x38, 0xb4, 0x03, 0x1a,\n\t\t\t0x38, 0xb4, 0x11, 0x1f,\n\t\t\t0x38, 0xb4, 0x42, 0x0d,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x51,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x56, 0xef,\n\t\t\t0x38, 0xb4, 0x20, 0xd0,\n\t\t\t0x38, 0xb4, 0x11, 0x1f,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x54,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x57,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x5a,\n\t\t\t0xff, 0xff, 0xff, 0xff,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x85, 0xe1,\n\t\t\t0x38, 0xb4, 0xef, 0xa0,\n\t\t\t0x38, 0xb4, 0x48, 0x03,\n\t\t\t0x38, 0xb4, 0x28, 0x0a,\n\t\t\t0x38, 0xb4, 0xef, 0x05,\n\t\t\t0x38, 0xb4, 0x1b, 0x20,\n\t\t\t0x38, 0xb4, 0xad, 0x01,\n\t\t\t0x38, 0xb4, 0x35, 0x27,\n\t\t\t0x38, 0xb4, 0x44, 0x1f,\n\t\t\t0x38, 0xb4, 0x85, 0xe0,\n\t\t\t0x38, 0xb4, 0xe1, 0x88,\n\t\t\t0x38, 0xb4, 0x89, 0x85,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x5d,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x85, 0xe0,\n\t\t\t0x38, 0xb4, 0xe1, 0x8e,\n\t\t\t0x38, 0xb4, 0x8f, 0x85,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x60,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x85, 0xe0,\n\t\t\t0x38, 0xb4, 0xe1, 0x94,\n\t\t\t0x38, 0xb4, 0x95, 0x85,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x63,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x85, 0xe0,\n\t\t\t0x38, 0xb4, 0xe1, 0x9a,\n\t\t\t0x38, 0xb4, 0x9b, 0x85,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x66,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x88, 0xaf,\n\t\t\t0x38, 0xb4, 0xbf, 0x3c,\n\t\t\t0x38, 0xb4, 0x3f, 0x88,\n\t\t\t0x38, 0xb4, 0x6e, 0x02,\n\t\t\t0x38, 0xb4, 0xad, 0x9c,\n\t\t\t0x38, 0xb4, 0x35, 0x28,\n\t\t\t0x38, 0xb4, 0x44, 0x1f,\n\t\t\t0x38, 0xb4, 0x8f, 0xe0,\n\t\t\t0x38, 0xb4, 0xe1, 0xf8,\n\t\t\t0x38, 0xb4, 0xf9, 0x8f,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x5d,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x8f, 0xe0,\n\t\t\t0x38, 0xb4, 0xe1, 0xfa,\n\t\t\t0x38, 0xb4, 0xfb, 0x8f,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x60,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x8f, 0xe0,\n\t\t\t0x38, 0xb4, 0xe1, 0xfc,\n\t\t\t0x38, 0xb4, 0xfd, 0x8f,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x63,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x8f, 0xe0,\n\t\t\t0x38, 0xb4, 0xe1, 0xfe,\n\t\t\t0x38, 0xb4, 0xff, 0x8f,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x66,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x88, 0xaf,\n\t\t\t0x38, 0xb4, 0xe1, 0x3c,\n\t\t\t0x38, 0xb4, 0xa1, 0x85,\n\t\t\t0x38, 0xb4, 0x21, 0x1b,\n\t\t\t0x38, 0xb4, 0x37, 0xad,\n\t\t\t0x38, 0xb4, 0x1f, 0x34,\n\t\t\t0x38, 0xb4, 0xe0, 0x44,\n\t\t\t0x38, 0xb4, 0x8a, 0x85,\n\t\t\t0x38, 0xb4, 0x85, 0xe1,\n\t\t\t0x38, 0xb4, 0xbf, 0x8b,\n\t\t\t0x38, 0xb4, 0x5d, 0x88,\n\t\t\t0x38, 0xb4, 0x6e, 0x02,\n\t\t\t0x38, 0xb4, 0xe0, 0x7d,\n\t\t\t0x38, 0xb4, 0x90, 0x85,\n\t\t\t0x38, 0xb4, 0x85, 0xe1,\n\t\t\t0x38, 0xb4, 0xbf, 0x91,\n\t\t\t0x38, 0xb4, 0x60, 0x88,\n\t\t\t0x38, 0xb4, 0x6e, 0x02,\n\t\t\t0x38, 0xb4, 0xe0, 0x7d,\n\t\t\t0x38, 0xb4, 0x96, 0x85,\n\t\t\t0x38, 0xb4, 0x85, 0xe1,\n\t\t\t0x38, 0xb4, 0xbf, 0x97,\n\t\t\t0x38, 0xb4, 0x63, 0x88,\n\t\t\t0x38, 0xb4, 0x6e, 0x02,\n\t\t\t0x38, 0xb4, 0xe0, 0x7d,\n\t\t\t0x38, 0xb4, 0x9c, 0x85,\n\t\t\t0x38, 0xb4, 0x85, 0xe1,\n\t\t\t0x38, 0xb4, 0xbf, 0x9d,\n\t\t\t0x38, 0xb4, 0x66, 0x88,\n\t\t\t0x38, 0xb4, 0x6e, 0x02,\n\t\t\t0x38, 0xb4, 0xae, 0x7d,\n\t\t\t0x38, 0xb4, 0x1f, 0x40,\n\t\t\t0x38, 0xb4, 0xe0, 0x44,\n\t\t\t0x38, 0xb4, 0x8c, 0x85,\n\t\t\t0x38, 0xb4, 0x85, 0xe1,\n\t\t\t0x38, 0xb4, 0xbf, 0x8d,\n\t\t\t0x38, 0xb4, 0x5d, 0x88,\n\t\t\t0x38, 0xb4, 0x6e, 0x02,\n\t\t\t0x38, 0xb4, 0xe0, 0x7d,\n\t\t\t0x38, 0xb4, 0x92, 0x85,\n\t\t\t0x38, 0xb4, 0x85, 0xe1,\n\t\t\t0x38, 0xb4, 0xbf, 0x93,\n\t\t\t0x38, 0xb4, 0x60, 0x88,\n\t\t\t0x38, 0xb4, 0x6e, 0x02,\n\t\t\t0x38, 0xb4, 0xe0, 0x7d,\n\t\t\t0x38, 0xb4, 0x98, 0x85,\n\t\t\t0x38, 0xb4, 0x85, 0xe1,\n\t\t\t0x38, 0xb4, 0xbf, 0x99,\n\t\t\t0x38, 0xb4, 0x63, 0x88,\n\t\t\t0x38, 0xb4, 0x6e, 0x02,\n\t\t\t0x38, 0xb4, 0xe0, 0x7d,\n\t\t\t0x38, 0xb4, 0x9e, 0x85,\n\t\t\t0x38, 0xb4, 0x85, 0xe1,\n\t\t\t0x38, 0xb4, 0xbf, 0x9f,\n\t\t\t0x38, 0xb4, 0x66, 0x88,\n\t\t\t0x38, 0xb4, 0x6e, 0x02,\n\t\t\t0x38, 0xb4, 0xae, 0x7d,\n\t\t\t0x38, 0xb4, 0xe1, 0x0c,\n\t\t\t0x38, 0xb4, 0xb3, 0x85,\n\t\t\t0x38, 0xb4, 0x04, 0x39,\n\t\t\t0x38, 0xb4, 0x2f, 0xac,\n\t\t\t0x38, 0xb4, 0xee, 0x04,\n\t\t\t0x38, 0xb4, 0xb3, 0x85,\n\t\t\t0x38, 0xb4, 0xaf, 0x00,\n\t\t\t0x38, 0xb4, 0xd9, 0x39,\n\t\t\t0x38, 0xb4, 0xac, 0x22,\n\t\t\t0x38, 0xb4, 0xf0, 0xea,\n\t\t\t0x38, 0xb4, 0xf6, 0xac,\n\t\t\t0x38, 0xb4, 0xac, 0xf0,\n\t\t\t0x38, 0xb4, 0xf0, 0xfa,\n\t\t\t0x38, 0xb4, 0xf8, 0xac,\n\t\t\t0x38, 0xb4, 0xac, 0xf0,\n\t\t\t0x38, 0xb4, 0xf0, 0xfc,\n\t\t\t0x38, 0xb4, 0x00, 0xad,\n\t\t\t0x38, 0xb4, 0xac, 0xf0,\n\t\t\t0x38, 0xb4, 0xf0, 0xfe,\n\t\t\t0x38, 0xb4, 0xf0, 0xac,\n\t\t\t0x38, 0xb4, 0xac, 0xf0,\n\t\t\t0x38, 0xb4, 0xf0, 0xf4,\n\t\t\t0x38, 0xb4, 0xf2, 0xac,\n\t\t\t0x38, 0xb4, 0xac, 0xf0,\n\t\t\t0x38, 0xb4, 0xf0, 0xb0,\n\t\t\t0x38, 0xb4, 0xae, 0xac,\n\t\t\t0x38, 0xb4, 0xac, 0xf0,\n\t\t\t0x38, 0xb4, 0xf0, 0xac,\n\t\t\t0x38, 0xb4, 0xaa, 0xac,\n\t\t\t0x38, 0xb4, 0x00, 0xa1,\n\t\t\t0x38, 0xb4, 0xe1, 0x0c,\n\t\t\t0x38, 0xb4, 0xf7, 0x8f,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x84,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x26, 0xaf,\n\t\t\t0x38, 0xb4, 0xe1, 0xe9,\n\t\t\t0x38, 0xb4, 0xf6, 0x8f,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x84,\n\t\t\t0x38, 0xb4, 0x7d, 0x6e,\n\t\t\t0x38, 0xb4, 0x26, 0xaf,\n\t\t\t0x38, 0xb4, 0x20, 0xf5,\n\t\t\t0x38, 0xb4, 0x86, 0xac,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x3f,\n\t\t\t0x38, 0xb4, 0x9c, 0x6e,\n\t\t\t0x38, 0xb4, 0x28, 0xad,\n\t\t\t0x38, 0xb4, 0xaf, 0x03,\n\t\t\t0x38, 0xb4, 0x24, 0x33,\n\t\t\t0x38, 0xb4, 0x38, 0xad,\n\t\t\t0x38, 0xb4, 0xaf, 0x03,\n\t\t\t0x38, 0xb4, 0xe6, 0x32,\n\t\t\t0x38, 0xb4, 0x32, 0xaf,\n\t\t\t0x38, 0xb4, 0x00, 0xfb,\n\t\t\t0x36, 0xb4, 0x7c, 0xb8,\n\t\t\t0x38, 0xb4, 0xf6, 0x8f,\n\t\t\t0x36, 0xb4, 0x7e, 0xb8,\n\t\t\t0x38, 0xb4, 0x05, 0x07,\n\t\t\t0x36, 0xb4, 0x7c, 0xb8,\n\t\t\t0x38, 0xb4, 0xf8, 0x8f,\n\t\t\t0x36, 0xb4, 0x7e, 0xb8,\n\t\t\t0x38, 0xb4, 0xcc, 0x19,\n\t\t\t0x36, 0xb4, 0x7c, 0xb8,\n\t\t\t0x38, 0xb4, 0xfa, 0x8f,\n\t\t\t0x36, 0xb4, 0x7e, 0xb8,\n\t\t\t0x38, 0xb4, 0xe3, 0x28,\n\t\t\t0x36, 0xb4, 0x7c, 0xb8,\n\t\t\t0x38, 0xb4, 0xfc, 0x8f,\n\t\t\t0x36, 0xb4, 0x7e, 0xb8,\n\t\t\t0x38, 0xb4, 0x47, 0x10,\n\t\t\t0x36, 0xb4, 0x7c, 0xb8,\n\t\t\t0x38, 0xb4, 0xfe, 0x8f,\n\t\t\t0x36, 0xb4, 0x7e, 0xb8,\n\t\t\t0x38, 0xb4, 0x45, 0x0a,\n\t\t\t0x36, 0xb4, 0x5e, 0xb8,\n\t\t\t0x38, 0xb4, 0x1e, 0x27,\n\t\t\t0x36, 0xb4, 0x60, 0xb8,\n\t\t\t0x38, 0xb4, 0x46, 0x38,\n\t\t\t0x36, 0xb4, 0x62, 0xb8,\n\t\t\t0x38, 0xb4, 0xe6, 0x26,\n\t\t\t0x36, 0xb4, 0x64, 0xb8,\n\t\t\t0x38, 0xb4, 0xe3, 0x32,\n\t\t\t0x36, 0xb4, 0x86, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x88, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x8a, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x8c, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x38, 0xb8,\n\t\t\t0x38, 0xb4, 0x0f, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xb0,\n\t\t\t0x20, 0xb8, 0x10, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x6e, 0x84,\n\t\t\t0x38, 0xb4, 0x84, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0x86,\n\t\t\t0x38, 0xb4, 0x90, 0x86,\n\t\t\t0x38, 0xb4, 0x86, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0xa4,\n\t\t\t0x38, 0xb4, 0xa4, 0x86,\n\t\t\t0x38, 0xb4, 0x86, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0xa4,\n\t\t\t0x38, 0xb4, 0xa4, 0x86,\n\t\t\t0x38, 0xb4, 0x86, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0xa4,\n\t\t\t0x38, 0xb4, 0xa4, 0x86,\n\t\t\t0x38, 0xb4, 0x82, 0xee,\n\t\t\t0x38, 0xb4, 0x00, 0x5f,\n\t\t\t0x38, 0xb4, 0x84, 0x02,\n\t\t\t0x38, 0xb4, 0xaf, 0x90,\n\t\t\t0x38, 0xb4, 0x41, 0x04,\n\t\t\t0x38, 0xb4, 0xe0, 0xf8,\n\t\t\t0x38, 0xb4, 0xf3, 0x8f,\n\t\t\t0x38, 0xb4, 0x00, 0xa0,\n\t\t\t0x38, 0xb4, 0x02, 0x05,\n\t\t\t0x38, 0xb4, 0xa4, 0x84,\n\t\t\t0x38, 0xb4, 0x06, 0xae,\n\t\t\t0x38, 0xb4, 0x01, 0xa0,\n\t\t\t0x38, 0xb4, 0x02, 0x03,\n\t\t\t0x38, 0xb4, 0xc8, 0x84,\n\t\t\t0x38, 0xb4, 0x04, 0xfc,\n\t\t\t0x38, 0xb4, 0xf9, 0xf8,\n\t\t\t0x38, 0xb4, 0x59, 0xef,\n\t\t\t0x38, 0xb4, 0x80, 0xe0,\n\t\t\t0x38, 0xb4, 0xad, 0x15,\n\t\t\t0x38, 0xb4, 0x02, 0x27,\n\t\t\t0x38, 0xb4, 0x03, 0xae,\n\t\t\t0x38, 0xb4, 0x84, 0xaf,\n\t\t\t0x38, 0xb4, 0xbf, 0xc3,\n\t\t\t0x38, 0xb4, 0xca, 0x53,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xad, 0xc8,\n\t\t\t0x38, 0xb4, 0x07, 0x28,\n\t\t\t0x38, 0xb4, 0x85, 0x02,\n\t\t\t0x38, 0xb4, 0xee, 0x2c,\n\t\t\t0x38, 0xb4, 0xf3, 0x8f,\n\t\t\t0x38, 0xb4, 0xef, 0x01,\n\t\t\t0x38, 0xb4, 0xfd, 0x95,\n\t\t\t0x38, 0xb4, 0x04, 0xfc,\n\t\t\t0x38, 0xb4, 0xf9, 0xf8,\n\t\t\t0x38, 0xb4, 0xef, 0xfa,\n\t\t\t0x38, 0xb4, 0xbf, 0x69,\n\t\t\t0x38, 0xb4, 0xca, 0x53,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xac, 0xc8,\n\t\t\t0x38, 0xb4, 0x22, 0x28,\n\t\t\t0x38, 0xb4, 0x80, 0xd4,\n\t\t\t0x38, 0xb4, 0xbf, 0x00,\n\t\t\t0x38, 0xb4, 0x84, 0x86,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xbf, 0xa9,\n\t\t\t0x38, 0xb4, 0x87, 0x86,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xbf, 0xa9,\n\t\t\t0x38, 0xb4, 0x8a, 0x86,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xbf, 0xa9,\n\t\t\t0x38, 0xb4, 0x8d, 0x86,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xee, 0xa9,\n\t\t\t0x38, 0xb4, 0xf3, 0x8f,\n\t\t\t0x38, 0xb4, 0xaf, 0x00,\n\t\t\t0x38, 0xb4, 0x26, 0x85,\n\t\t\t0x38, 0xb4, 0x8f, 0xe0,\n\t\t\t0x38, 0xb4, 0xe1, 0xf4,\n\t\t\t0x38, 0xb4, 0xf5, 0x8f,\n\t\t\t0x38, 0xb4, 0x8f, 0xe2,\n\t\t\t0x38, 0xb4, 0xe3, 0xf6,\n\t\t\t0x38, 0xb4, 0xf7, 0x8f,\n\t\t\t0x38, 0xb4, 0x45, 0x1b,\n\t\t\t0x38, 0xb4, 0x27, 0xac,\n\t\t\t0x38, 0xb4, 0xee, 0x0e,\n\t\t\t0x38, 0xb4, 0xf4, 0x8f,\n\t\t\t0x38, 0xb4, 0xee, 0x00,\n\t\t\t0x38, 0xb4, 0xf5, 0x8f,\n\t\t\t0x38, 0xb4, 0x02, 0x00,\n\t\t\t0x38, 0xb4, 0x2c, 0x85,\n\t\t\t0x38, 0xb4, 0x85, 0xaf,\n\t\t\t0x38, 0xb4, 0xe0, 0x26,\n\t\t\t0x38, 0xb4, 0xf4, 0x8f,\n\t\t\t0x38, 0xb4, 0x8f, 0xe1,\n\t\t\t0x38, 0xb4, 0x2c, 0xf5,\n\t\t\t0x38, 0xb4, 0x01, 0x00,\n\t\t\t0x38, 0xb4, 0x8f, 0xe4,\n\t\t\t0x38, 0xb4, 0xe5, 0xf4,\n\t\t\t0x38, 0xb4, 0xf5, 0x8f,\n\t\t\t0x38, 0xb4, 0x96, 0xef,\n\t\t\t0x38, 0xb4, 0xfd, 0xfe,\n\t\t\t0x38, 0xb4, 0x04, 0xfc,\n\t\t\t0x38, 0xb4, 0xf9, 0xf8,\n\t\t\t0x38, 0xb4, 0x59, 0xef,\n\t\t\t0x38, 0xb4, 0x53, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x22,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x8b, 0xa1,\n\t\t\t0x38, 0xb4, 0xae, 0x02,\n\t\t\t0x38, 0xb4, 0xaf, 0x03,\n\t\t\t0x38, 0xb4, 0xda, 0x85,\n\t\t\t0x38, 0xb4, 0x57, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x72,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x8f, 0xe4,\n\t\t\t0x38, 0xb4, 0xe5, 0xf8,\n\t\t\t0x38, 0xb4, 0xf9, 0x8f,\n\t\t\t0x38, 0xb4, 0x57, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x75,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x8f, 0xe4,\n\t\t\t0x38, 0xb4, 0xe5, 0xfa,\n\t\t\t0x38, 0xb4, 0xfb, 0x8f,\n\t\t\t0x38, 0xb4, 0x57, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x78,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x8f, 0xe4,\n\t\t\t0x38, 0xb4, 0xe5, 0xfc,\n\t\t\t0x38, 0xb4, 0xfd, 0x8f,\n\t\t\t0x38, 0xb4, 0x57, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x7b,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x8f, 0xe4,\n\t\t\t0x38, 0xb4, 0xe5, 0xfe,\n\t\t\t0x38, 0xb4, 0xff, 0x8f,\n\t\t\t0x38, 0xb4, 0x57, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x6c,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x02, 0xa1,\n\t\t\t0x38, 0xb4, 0xee, 0x13,\n\t\t\t0x38, 0xb4, 0xfc, 0x8f,\n\t\t\t0x38, 0xb4, 0xee, 0x80,\n\t\t\t0x38, 0xb4, 0xfd, 0x8f,\n\t\t\t0x38, 0xb4, 0xee, 0x00,\n\t\t\t0x38, 0xb4, 0xfe, 0x8f,\n\t\t\t0x38, 0xb4, 0xee, 0x80,\n\t\t\t0x38, 0xb4, 0xff, 0x8f,\n\t\t\t0x38, 0xb4, 0xaf, 0x00,\n\t\t\t0x38, 0xb4, 0x99, 0x85,\n\t\t\t0x38, 0xb4, 0x01, 0xa1,\n\t\t\t0x38, 0xb4, 0xbf, 0x0c,\n\t\t\t0x38, 0xb4, 0x4c, 0x53,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xa1, 0xc8,\n\t\t\t0x38, 0xb4, 0x03, 0x03,\n\t\t\t0x38, 0xb4, 0x85, 0xaf,\n\t\t\t0x38, 0xb4, 0xbf, 0x77,\n\t\t\t0x38, 0xb4, 0x22, 0x53,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xa1, 0xc8,\n\t\t\t0x38, 0xb4, 0x02, 0x8b,\n\t\t\t0x38, 0xb4, 0x03, 0xae,\n\t\t\t0x38, 0xb4, 0x86, 0xaf,\n\t\t\t0x38, 0xb4, 0xe0, 0x64,\n\t\t\t0x38, 0xb4, 0xf8, 0x8f,\n\t\t\t0x38, 0xb4, 0x8f, 0xe1,\n\t\t\t0x38, 0xb4, 0xbf, 0xf9,\n\t\t\t0x38, 0xb4, 0x84, 0x86,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xe0, 0xa9,\n\t\t\t0x38, 0xb4, 0xfa, 0x8f,\n\t\t\t0x38, 0xb4, 0x8f, 0xe1,\n\t\t\t0x38, 0xb4, 0xbf, 0xfb,\n\t\t\t0x38, 0xb4, 0x87, 0x86,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xe0, 0xa9,\n\t\t\t0x38, 0xb4, 0xfc, 0x8f,\n\t\t\t0x38, 0xb4, 0x8f, 0xe1,\n\t\t\t0x38, 0xb4, 0xbf, 0xfd,\n\t\t\t0x38, 0xb4, 0x8a, 0x86,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xe0, 0xa9,\n\t\t\t0x38, 0xb4, 0xfe, 0x8f,\n\t\t\t0x38, 0xb4, 0x8f, 0xe1,\n\t\t\t0x38, 0xb4, 0xbf, 0xff,\n\t\t\t0x38, 0xb4, 0x8d, 0x86,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xaf, 0xa9,\n\t\t\t0x38, 0xb4, 0x7f, 0x86,\n\t\t\t0x38, 0xb4, 0x53, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x22,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x44, 0xa1,\n\t\t\t0x38, 0xb4, 0xbf, 0x3c,\n\t\t\t0x38, 0xb4, 0x7b, 0x54,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xe4, 0xc8,\n\t\t\t0x38, 0xb4, 0xf8, 0x8f,\n\t\t\t0x38, 0xb4, 0x8f, 0xe5,\n\t\t\t0x38, 0xb4, 0xbf, 0xf9,\n\t\t\t0x38, 0xb4, 0x7e, 0x54,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xe4, 0xc8,\n\t\t\t0x38, 0xb4, 0xfa, 0x8f,\n\t\t\t0x38, 0xb4, 0x8f, 0xe5,\n\t\t\t0x38, 0xb4, 0xbf, 0xfb,\n\t\t\t0x38, 0xb4, 0x81, 0x54,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xe4, 0xc8,\n\t\t\t0x38, 0xb4, 0xfc, 0x8f,\n\t\t\t0x38, 0xb4, 0x8f, 0xe5,\n\t\t\t0x38, 0xb4, 0xbf, 0xfd,\n\t\t\t0x38, 0xb4, 0x84, 0x54,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xe4, 0xc8,\n\t\t\t0x38, 0xb4, 0xfe, 0x8f,\n\t\t\t0x38, 0xb4, 0x8f, 0xe5,\n\t\t\t0x38, 0xb4, 0xbf, 0xff,\n\t\t\t0x38, 0xb4, 0x22, 0x53,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xa1, 0xc8,\n\t\t\t0x38, 0xb4, 0x48, 0x44,\n\t\t\t0x38, 0xb4, 0x85, 0xaf,\n\t\t\t0x38, 0xb4, 0xbf, 0xa7,\n\t\t\t0x38, 0xb4, 0x22, 0x53,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xa1, 0xc8,\n\t\t\t0x38, 0xb4, 0x3c, 0x31,\n\t\t\t0x38, 0xb4, 0x54, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x7b,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x8f, 0xe4,\n\t\t\t0x38, 0xb4, 0xe5, 0xf8,\n\t\t\t0x38, 0xb4, 0xf9, 0x8f,\n\t\t\t0x38, 0xb4, 0x54, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x7e,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x8f, 0xe4,\n\t\t\t0x38, 0xb4, 0xe5, 0xfa,\n\t\t\t0x38, 0xb4, 0xfb, 0x8f,\n\t\t\t0x38, 0xb4, 0x54, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x81,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x8f, 0xe4,\n\t\t\t0x38, 0xb4, 0xe5, 0xfc,\n\t\t\t0x38, 0xb4, 0xfd, 0x8f,\n\t\t\t0x38, 0xb4, 0x54, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x84,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x8f, 0xe4,\n\t\t\t0x38, 0xb4, 0xe5, 0xfe,\n\t\t\t0x38, 0xb4, 0xff, 0x8f,\n\t\t\t0x38, 0xb4, 0x53, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x22,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x31, 0xa1,\n\t\t\t0x38, 0xb4, 0xaf, 0x03,\n\t\t\t0x38, 0xb4, 0xa7, 0x85,\n\t\t\t0x38, 0xb4, 0x80, 0xd4,\n\t\t\t0x38, 0xb4, 0xbf, 0x00,\n\t\t\t0x38, 0xb4, 0x84, 0x86,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xbf, 0xa9,\n\t\t\t0x38, 0xb4, 0x87, 0x86,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xbf, 0xa9,\n\t\t\t0x38, 0xb4, 0x8a, 0x86,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xbf, 0xa9,\n\t\t\t0x38, 0xb4, 0x8d, 0x86,\n\t\t\t0x38, 0xb4, 0x52, 0x02,\n\t\t\t0x38, 0xb4, 0xef, 0xa9,\n\t\t\t0x38, 0xb4, 0xfd, 0x95,\n\t\t\t0x38, 0xb4, 0x04, 0xfc,\n\t\t\t0x38, 0xb4, 0xd1, 0xf0,\n\t\t\t0x38, 0xb4, 0xf0, 0x2a,\n\t\t\t0x38, 0xb4, 0x2c, 0xd1,\n\t\t\t0x38, 0xb4, 0xd1, 0xf0,\n\t\t\t0x38, 0xb4, 0xf0, 0x44,\n\t\t\t0x38, 0xb4, 0x46, 0xd1,\n\t\t\t0x38, 0xb4, 0x86, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0xa1,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x86, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0xa1,\n\t\t\t0x38, 0xb4, 0xc8, 0x52,\n\t\t\t0x38, 0xb4, 0x01, 0xd1,\n\t\t\t0x38, 0xb4, 0x06, 0xaf,\n\t\t\t0x38, 0xb4, 0x70, 0xa5,\n\t\t\t0x38, 0xb4, 0x42, 0xce,\n\t\t\t0x36, 0xb4, 0x18, 0xb8,\n\t\t\t0x38, 0xb4, 0x3d, 0x04,\n\t\t\t0x36, 0xb4, 0x1a, 0xb8,\n\t\t\t0x38, 0xb4, 0xa3, 0x06,\n\t\t\t0x36, 0xb4, 0x1c, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x1e, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x50, 0xb8,\n\t\t\t0xff, 0xff, 0xff, 0xff,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x52, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x78, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x84, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x32, 0xb8,\n\t\t\t0x38, 0xb4, 0x03, 0x00,\n\t\t\t0x36, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x2e, 0xb8,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x24, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x1e, 0x80,\n\t\t\t0x38, 0xb4, 0x21, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xb0,\n\t\t\t0x20, 0xb8, 0x00, 0x00,\n\t\t\t0xff, 0xff, 0xff, 0xff};\n\n\t\tcode_ver = 0x0021;\n\t\tret = sram_read(tp, SRAM_GPHY_FW_VER, &fw_version);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tif (fw_version < code_ver) {\n\t\t\tdata = ram13;\n\t\t\tlen = sizeof(ram13);\n\n\t\t\tif (r8156b_flash_used(tp)) {\n\t\t\t\tret = ocp_word_set_bits(tp, MCU_TYPE_USB,\n\t\t\t\t\t\t\tUSB_GPHY_CTRL,\n\t\t\t\t\t\t\tBYPASS_FLASH);\n\t\t\t\tif (ret < 0)\n\t\t\t\t\tgoto out;\n\t\t\t}\n\t\t}\n\t} else if (tp->version == RTL_VER_17) {\n\t\tstatic u8 ram17[] = {\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x23, 0x80,\n\t\t\t0x38, 0xb4, 0x01, 0x47,\n\t\t\t0x36, 0xb4, 0x2e, 0xb8,\n\t\t\t0x38, 0xb4, 0x01, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xb0,\n\t\t\t0x20, 0xb8, 0x90, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x16, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x12, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x14, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x10, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x1a, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x2a, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x32, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x3a, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x3e, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x44, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x4b, 0x80,\n\t\t\t0x38, 0xb4, 0x04, 0xd5,\n\t\t\t0x38, 0xb4, 0xb5, 0xc9,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x07, 0xd7,\n\t\t\t0x38, 0xb4, 0x70, 0x40,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x82, 0x10,\n\t\t\t0x38, 0xb4, 0x04, 0xd5,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x7a, 0x10,\n\t\t\t0x38, 0xb4, 0xd0, 0x61,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0xa5, 0x60,\n\t\t\t0x38, 0xb4, 0x04, 0xd5,\n\t\t\t0x38, 0xb4, 0xb2, 0xc9,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x04, 0xf0,\n\t\t\t0x38, 0xb4, 0x04, 0xd5,\n\t\t\t0x38, 0xb4, 0xb1, 0xc9,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x07, 0xd7,\n\t\t\t0x38, 0xb4, 0x70, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xb0, 0x10,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xc5, 0x10,\n\t\t\t0x38, 0xb4, 0x07, 0xd7,\n\t\t\t0x38, 0xb4, 0x05, 0x20,\n\t\t\t0x38, 0xb4, 0x30, 0x80,\n\t\t\t0x38, 0xb4, 0x5e, 0xd7,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x8c, 0x13,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xff, 0x13,\n\t\t\t0x38, 0xb4, 0x04, 0xc5,\n\t\t\t0x38, 0xb4, 0x20, 0xce,\n\t\t\t0x38, 0xb4, 0x01, 0xcf,\n\t\t\t0x38, 0xb4, 0x0a, 0xd7,\n\t\t\t0x38, 0xb4, 0x05, 0x40,\n\t\t\t0x38, 0xb4, 0x02, 0xcf,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x99, 0x1b,\n\t\t\t0x38, 0xb4, 0x80, 0xa9,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x4d, 0x14,\n\t\t\t0x38, 0xb4, 0x7f, 0x90,\n\t\t\t0x38, 0xb4, 0xa3, 0x91,\n\t\t\t0x38, 0xb4, 0x06, 0x93,\n\t\t\t0x38, 0xb4, 0x18, 0xb1,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x47, 0x21,\n\t\t\t0x38, 0xb4, 0x7f, 0x90,\n\t\t\t0x38, 0xb4, 0x09, 0x92,\n\t\t\t0x38, 0xb4, 0xa3, 0x91,\n\t\t\t0x38, 0xb4, 0x06, 0x93,\n\t\t\t0x38, 0xb4, 0x18, 0xb1,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x3c, 0x20,\n\t\t\t0x38, 0xb4, 0x07, 0xd7,\n\t\t\t0x38, 0xb4, 0x21, 0x41,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0xfc, 0x40,\n\t\t\t0x38, 0xb4, 0x0a, 0xd7,\n\t\t\t0x38, 0xb4, 0xb5, 0x40,\n\t\t\t0x38, 0xb4, 0x28, 0xd0,\n\t\t\t0x38, 0xb4, 0xc1, 0xd1,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x57, 0x80,\n\t\t\t0x38, 0xb4, 0x7b, 0xd0,\n\t\t\t0x38, 0xb4, 0xc5, 0xd1,\n\t\t\t0x38, 0xb4, 0x03, 0xd5,\n\t\t\t0x38, 0xb4, 0x08, 0xa1,\n\t\t\t0x38, 0xb4, 0x05, 0xd5,\n\t\t\t0x38, 0xb4, 0x03, 0x81,\n\t\t\t0x38, 0xb4, 0x04, 0xd5,\n\t\t\t0x38, 0xb4, 0x02, 0xa0,\n\t\t\t0x38, 0xb4, 0x02, 0xa3,\n\t\t\t0x38, 0xb4, 0x07, 0xd7,\n\t\t\t0x38, 0xb4, 0x61, 0x40,\n\t\t\t0x38, 0xb4, 0x03, 0xd5,\n\t\t\t0x38, 0xb4, 0x01, 0x8b,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x8a, 0xc4,\n\t\t\t0x38, 0xb4, 0x03, 0xd5,\n\t\t\t0x38, 0xb4, 0x09, 0xcc,\n\t\t\t0x38, 0xb4, 0x58, 0xcd,\n\t\t\t0x38, 0xb4, 0x01, 0xaf,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x10, 0xbe,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x39, 0x17,\n\t\t\t0x38, 0xb4, 0x19, 0xd7,\n\t\t\t0x38, 0xb4, 0x6c, 0x60,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x5c, 0x64,\n\t\t\t0x38, 0xb4, 0x5e, 0xd7,\n\t\t\t0x38, 0xb4, 0x4d, 0x60,\n\t\t\t0x38, 0xb4, 0xf8, 0xff,\n\t\t\t0x38, 0xb4, 0x10, 0x9e,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x39, 0x17,\n\t\t\t0x38, 0xb4, 0x19, 0xd7,\n\t\t\t0x38, 0xb4, 0x6c, 0x60,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x1c, 0x63,\n\t\t\t0x38, 0xb4, 0x5e, 0xd7,\n\t\t\t0x38, 0xb4, 0x4d, 0x40,\n\t\t\t0x38, 0xb4, 0xf8, 0xff,\n\t\t\t0x38, 0xb4, 0x04, 0xd5,\n\t\t\t0x38, 0xb4, 0x18, 0xaa,\n\t\t\t0x38, 0xb4, 0x01, 0xa0,\n\t\t\t0x38, 0xb4, 0xe0, 0xa1,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x39, 0x17,\n\t\t\t0x38, 0xb4, 0x19, 0xd7,\n\t\t\t0x38, 0xb4, 0xac, 0x7f,\n\t\t\t0x38, 0xb4, 0x04, 0xd5,\n\t\t\t0x38, 0xb4, 0x01, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x39, 0x17,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x5c, 0x5f,\n\t\t\t0x38, 0xb4, 0x19, 0xd7,\n\t\t\t0x38, 0xb4, 0xaf, 0x3a,\n\t\t\t0x38, 0xb4, 0x91, 0x80,\n\t\t\t0x38, 0xb4, 0x16, 0xf0,\n\t\t\t0x38, 0xb4, 0x07, 0xd7,\n\t\t\t0x38, 0xb4, 0x21, 0x61,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xd8, 0x16,\n\t\t\t0x38, 0xb4, 0x03, 0xd5,\n\t\t\t0x38, 0xb4, 0x59, 0xcd,\n\t\t\t0x38, 0xb4, 0x01, 0xaf,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xdc, 0x0d,\n\t\t\t0x38, 0xb4, 0x03, 0xd5,\n\t\t\t0x38, 0xb4, 0x40, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xd8, 0x16,\n\t\t\t0x38, 0xb4, 0x03, 0xd5,\n\t\t\t0x38, 0xb4, 0x5a, 0xcd,\n\t\t\t0x38, 0xb4, 0x01, 0xaf,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xbf, 0x0d,\n\t\t\t0x38, 0xb4, 0x04, 0xd5,\n\t\t\t0x38, 0xb4, 0x08, 0xa0,\n\t\t\t0x38, 0xb4, 0x04, 0xa2,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x39, 0x17,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0xa0, 0x5f,\n\t\t\t0x38, 0xb4, 0x03, 0xd5,\n\t\t\t0x38, 0xb4, 0x82, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0xd5,\n\t\t\t0x38, 0xb4, 0x1e, 0xd7,\n\t\t\t0x38, 0xb4, 0x97, 0x40,\n\t\t\t0x38, 0xb4, 0x78, 0xd0,\n\t\t\t0x38, 0xb4, 0xaa, 0xd1,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x78, 0xd0,\n\t\t\t0x38, 0xb4, 0xaa, 0xd1,\n\t\t\t0x38, 0xb4, 0x07, 0xd7,\n\t\t\t0x38, 0xb4, 0xc1, 0x40,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x9c, 0x40,\n\t\t\t0x38, 0xb4, 0x0a, 0xd7,\n\t\t\t0x38, 0xb4, 0x55, 0x40,\n\t\t\t0x38, 0xb4, 0x10, 0xf0,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x65, 0x60,\n\t\t\t0x38, 0xb4, 0x89, 0xcc,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0x8b, 0xcc,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x7b, 0x0b,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0xd0, 0x2a,\n\t\t\t0x38, 0xb4, 0xca, 0x80,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x81, 0x0b,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x87, 0x0b,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x53, 0x0c,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xd7, 0x12,\n\t\t\t0x36, 0xb4, 0x26, 0xa0,\n\t\t\t0x38, 0xb4, 0x5d, 0x12,\n\t\t\t0x36, 0xb4, 0x24, 0xa0,\n\t\t\t0x38, 0xb4, 0x33, 0x20,\n\t\t\t0x36, 0xb4, 0x22, 0xa0,\n\t\t\t0x38, 0xb4, 0x3f, 0x21,\n\t\t\t0x36, 0xb4, 0x20, 0xa0,\n\t\t\t0x38, 0xb4, 0x4c, 0x14,\n\t\t\t0x36, 0xb4, 0x06, 0xa0,\n\t\t\t0x38, 0xb4, 0x98, 0x1b,\n\t\t\t0x36, 0xb4, 0x04, 0xa0,\n\t\t\t0x38, 0xb4, 0x8b, 0x13,\n\t\t\t0x36, 0xb4, 0x02, 0xa0,\n\t\t\t0x38, 0xb4, 0xc4, 0x10,\n\t\t\t0x36, 0xb4, 0x00, 0xa0,\n\t\t\t0x38, 0xb4, 0x79, 0x10,\n\t\t\t0x36, 0xb4, 0x08, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0xff,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x16, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x12, 0xa0,\n\t\t\t0x38, 0xb4, 0xf8, 0x0f,\n\t\t\t0x36, 0xb4, 0x14, 0xa0,\n\t\t\t0x38, 0xb4, 0x4d, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x52, 0xa1,\n\t\t\t0x38, 0xb4, 0xdc, 0x12,\n\t\t\t0x36, 0xb4, 0x54, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x56, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x58, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x5a, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x5c, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x5e, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x60, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x50, 0xa1,\n\t\t\t0x38, 0xb4, 0x01, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x16, 0xa0,\n\t\t\t0x38, 0xb4, 0x20, 0x00,\n\t\t\t0x36, 0xb4, 0x12, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x14, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x10, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x1a, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x22, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x23, 0x82,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x22, 0x83,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x4f, 0x85,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x09, 0x86,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x9f, 0x86,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0xa9, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xa1, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x62, 0x09,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x62, 0x09,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x82, 0x09,\n\t\t\t0x38, 0xb4, 0x0a, 0x80,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x00, 0x0d,\n\t\t\t0x38, 0xb4, 0xc0, 0x8d,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xb5, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x99, 0x0f,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0xc1, 0x61,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x60, 0x40,\n\t\t\t0x38, 0xb4, 0x0d, 0xd7,\n\t\t\t0x38, 0xb4, 0x5d, 0x41,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0x1a, 0x61,\n\t\t\t0x38, 0xb4, 0x10, 0x87,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x80, 0x82,\n\t\t\t0x38, 0xb4, 0x80, 0x87,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0x10, 0xa7,\n\t\t\t0x38, 0xb4, 0x80, 0x95,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x04, 0xa3,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x07, 0x0d,\n\t\t\t0x38, 0xb4, 0xc0, 0x8d,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xb5, 0x12,\n\t\t\t0x38, 0xb4, 0x81, 0xcb,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xe2, 0x48,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x7a, 0x40,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x67, 0x48,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x5a, 0x40,\n\t\t\t0x38, 0xb4, 0x10, 0x89,\n\t\t\t0x38, 0xb4, 0x10, 0xa2,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x1c, 0x61,\n\t\t\t0x38, 0xb4, 0xc0, 0x0c,\n\t\t\t0x38, 0xb4, 0x80, 0x00,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x01, 0x01,\n\t\t\t0x38, 0xb4, 0xe0, 0x0c,\n\t\t\t0x38, 0xb4, 0xa0, 0x03,\n\t\t\t0x38, 0xb4, 0xb5, 0xcc,\n\t\t\t0x38, 0xb4, 0xc0, 0x0c,\n\t\t\t0x38, 0xb4, 0x80, 0x00,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x01,\n\t\t\t0x38, 0xb4, 0xe0, 0x0c,\n\t\t\t0x38, 0xb4, 0x40, 0x03,\n\t\t\t0x38, 0xb4, 0x52, 0xcc,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0xda, 0x42,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x1c, 0x0f,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xb3, 0x5f,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x1f, 0x8f,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x33, 0x7f,\n\t\t\t0x38, 0xb4, 0x90, 0x81,\n\t\t\t0x38, 0xb4, 0x04, 0x82,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x85, 0x80,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x1b, 0x0f,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xb3, 0x5f,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x1f, 0x8f,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x33, 0x7f,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x67, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x85, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x90, 0x80,\n\t\t\t0x38, 0xb4, 0x03, 0xd4,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x03, 0x12,\n\t\t\t0x38, 0xb4, 0x82, 0xcb,\n\t\t\t0x38, 0xb4, 0x0a, 0xd4,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x03, 0x12,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x67, 0x42,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x1d, 0x13,\n\t\t\t0x38, 0xb4, 0x40, 0x8a,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x0e, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0xa1,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0x81,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x17, 0x12,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x04, 0xa7,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x88, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xa9, 0x81,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x21, 0x61,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x60, 0x40,\n\t\t\t0x38, 0xb4, 0x0d, 0xd7,\n\t\t\t0x38, 0xb4, 0xbd, 0x40,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0x7a, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xac, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x98, 0x81,\n\t\t\t0x38, 0xb4, 0x10, 0xa2,\n\t\t\t0x38, 0xb4, 0x10, 0x8a,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x3e, 0x64,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x04, 0x0d,\n\t\t\t0x38, 0xb4, 0xc0, 0x8d,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xb5, 0x12,\n\t\t\t0x38, 0xb4, 0xc0, 0x0c,\n\t\t\t0x38, 0xb4, 0x40, 0x00,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x01,\n\t\t\t0x38, 0xb4, 0xe0, 0x0c,\n\t\t\t0x38, 0xb4, 0xe0, 0x03,\n\t\t\t0x38, 0xb4, 0xce, 0xcc,\n\t\t\t0x38, 0xb4, 0x0a, 0xa0,\n\t\t\t0x38, 0xb4, 0x80, 0xa2,\n\t\t\t0x38, 0xb4, 0x10, 0xd1,\n\t\t\t0x38, 0xb4, 0x4c, 0xd0,\n\t\t\t0x38, 0xb4, 0xa0, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x10, 0x87,\n\t\t\t0x38, 0xb4, 0x0f, 0xaa,\n\t\t\t0x38, 0xb4, 0x30, 0xa1,\n\t\t\t0x38, 0xb4, 0x2f, 0xaa,\n\t\t\t0x38, 0xb4, 0xd5, 0xa2,\n\t\t\t0x38, 0xb4, 0x05, 0xa4,\n\t\t\t0x38, 0xb4, 0x20, 0xa7,\n\t\t\t0x38, 0xb4, 0x0a, 0xa0,\n\t\t\t0x38, 0xb4, 0xa1, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xf6, 0x80,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0xf1, 0x3c,\n\t\t\t0x38, 0xb4, 0xd7, 0x80,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x0d,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xd9, 0x80,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x01, 0x0d,\n\t\t\t0x38, 0xb4, 0xc0, 0x0c,\n\t\t\t0x38, 0xb4, 0x40, 0x0d,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xb5, 0x12,\n\t\t\t0x38, 0xb4, 0x10, 0x87,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x0e, 0x12,\n\t\t\t0x38, 0xb4, 0x08, 0xa1,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x12,\n\t\t\t0x38, 0xb4, 0x08, 0x81,\n\t\t\t0x38, 0xb4, 0x03, 0xa2,\n\t\t\t0x38, 0xb4, 0x2f, 0x8a,\n\t\t\t0x38, 0xb4, 0x30, 0xa1,\n\t\t\t0x38, 0xb4, 0x04, 0x82,\n\t\t\t0xff, 0xff, 0xff, 0xff,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x38, 0xb4, 0x40, 0xa1,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x12,\n\t\t\t0x38, 0xb4, 0x40, 0x81,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x17, 0x12,\n\t\t\t0x38, 0xb4, 0xa2, 0xcb,\n\t\t\t0x38, 0xb4, 0x7a, 0xd1,\n\t\t\t0x38, 0xb4, 0x4b, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x04, 0xa2,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xa7, 0x5f,\n\t\t\t0x38, 0xb4, 0x20, 0xb9,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x7f,\n\t\t\t0x38, 0xb4, 0x20, 0x99,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0x45, 0x61,\n\t\t\t0x38, 0xb4, 0x74, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x00, 0x81,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xa7, 0x5f,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xfa, 0x80,\n\t\t\t0x38, 0xb4, 0x20, 0xb8,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0xa5, 0x7f,\n\t\t\t0x38, 0xb4, 0x20, 0x98,\n\t\t\t0x38, 0xb4, 0x01, 0x9b,\n\t\t\t0x38, 0xb4, 0x02, 0xd4,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x03, 0x12,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0xb1, 0x33,\n\t\t\t0x38, 0xb4, 0x20, 0x81,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0xb5, 0x60,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x69, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x22, 0x81,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x88, 0x81,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xab, 0x40,\n\t\t\t0x38, 0xb4, 0x0a, 0x80,\n\t\t\t0x38, 0xb4, 0x10, 0x81,\n\t\t\t0x38, 0xb4, 0x84, 0x82,\n\t\t\t0x38, 0xb4, 0x04, 0x84,\n\t\t\t0x38, 0xb4, 0x10, 0xa7,\n\t\t\t0x38, 0xb4, 0x20, 0x81,\n\t\t\t0x38, 0xb4, 0x41, 0x82,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x0e, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0xa1,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0x81,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x17, 0x12,\n\t\t\t0x38, 0xb4, 0x2f, 0xaa,\n\t\t\t0x38, 0xb4, 0xa3, 0xcb,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x8b, 0x43,\n\t\t\t0x38, 0xb4, 0x84, 0xa2,\n\t\t\t0x38, 0xb4, 0x78, 0xd0,\n\t\t\t0x38, 0xb4, 0x0a, 0x80,\n\t\t\t0x38, 0xb4, 0x10, 0x81,\n\t\t\t0x38, 0xb4, 0x84, 0xa2,\n\t\t\t0x38, 0xb4, 0x04, 0x84,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x08, 0xa1,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x19, 0x0f,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xb3, 0x5f,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x1f, 0x8f,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x33, 0x7f,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x07, 0x0d,\n\t\t\t0x38, 0xb4, 0xc0, 0x8d,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xb5, 0x12,\n\t\t\t0x38, 0xb4, 0x10, 0x81,\n\t\t\t0x38, 0xb4, 0x84, 0xa2,\n\t\t\t0x38, 0xb4, 0x04, 0xa4,\n\t\t\t0x38, 0xb4, 0x0a, 0xa0,\n\t\t\t0x38, 0xb4, 0xa4, 0xcb,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xa1, 0x40,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x10, 0xad,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x4b, 0x41,\n\t\t\t0x38, 0xb4, 0xc0, 0x0c,\n\t\t\t0x38, 0xb4, 0x80, 0x00,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x01,\n\t\t\t0x38, 0xb4, 0xe0, 0x0c,\n\t\t\t0x38, 0xb4, 0x40, 0x03,\n\t\t\t0x38, 0xb4, 0x52, 0xcc,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x71, 0x81,\n\t\t\t0x38, 0xb4, 0xc0, 0x80,\n\t\t\t0x38, 0xb4, 0x03, 0x81,\n\t\t\t0x38, 0xb4, 0xe0, 0x83,\n\t\t\t0x38, 0xb4, 0xff, 0x8c,\n\t\t\t0x38, 0xb4, 0x93, 0xd1,\n\t\t\t0x38, 0xb4, 0x47, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x10, 0xa1,\n\t\t\t0x38, 0xb4, 0xa5, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xaa, 0x5f,\n\t\t\t0x38, 0xb4, 0x80, 0xa1,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x41, 0x60,\n\t\t\t0x38, 0xb4, 0x02, 0xa4,\n\t\t\t0x38, 0xb4, 0xa6, 0xcb,\n\t\t\t0x38, 0xb4, 0xf5, 0xd1,\n\t\t\t0x38, 0xb4, 0x49, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x10, 0x87,\n\t\t\t0x38, 0xb4, 0x0a, 0xa0,\n\t\t\t0x38, 0xb4, 0x90, 0xa1,\n\t\t\t0x38, 0xb4, 0x04, 0xa2,\n\t\t\t0x38, 0xb4, 0x80, 0xa2,\n\t\t\t0x38, 0xb4, 0x04, 0xa4,\n\t\t\t0x38, 0xb4, 0xa7, 0xcb,\n\t\t\t0x38, 0xb4, 0x80, 0xbb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x20, 0xb9,\n\t\t\t0x38, 0xb4, 0x80, 0x9b,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xd7, 0x81,\n\t\t\t0x38, 0xb4, 0x10, 0xa2,\n\t\t\t0x38, 0xb4, 0x0a, 0xa0,\n\t\t\t0x38, 0xb4, 0x40, 0xaa,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x0e, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0xa1,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0x81,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x17, 0x12,\n\t\t\t0x38, 0xb4, 0x90, 0xa1,\n\t\t\t0x38, 0xb4, 0x84, 0xa2,\n\t\t\t0x38, 0xb4, 0x04, 0xa4,\n\t\t\t0x38, 0xb4, 0x10, 0x8a,\n\t\t\t0x38, 0xb4, 0x80, 0x8a,\n\t\t\t0x38, 0xb4, 0x84, 0xcb,\n\t\t\t0x38, 0xb4, 0x3e, 0xd1,\n\t\t\t0x38, 0xb4, 0x5a, 0xd0,\n\t\t\t0x38, 0xb4, 0x3e, 0xd1,\n\t\t\t0x38, 0xb4, 0x6b, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x59, 0x35,\n\t\t\t0x38, 0xb4, 0xb4, 0x81,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xad, 0x81,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x4b, 0x60,\n\t\t\t0x38, 0xb4, 0x8a, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x59, 0x36,\n\t\t\t0x38, 0xb4, 0xbe, 0x81,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xb7, 0x81,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x6b, 0x60,\n\t\t\t0x38, 0xb4, 0x8b, 0xcb,\n\t\t\t0x38, 0xb4, 0xcb, 0x5e,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x41, 0x60,\n\t\t\t0x38, 0xb4, 0x02, 0xa4,\n\t\t\t0x38, 0xb4, 0x8c, 0xcb,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0xba, 0x60,\n\t\t\t0x38, 0xb4, 0x79, 0xd1,\n\t\t\t0x38, 0xb4, 0x49, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xce, 0x81,\n\t\t\t0x38, 0xb4, 0x60, 0xd1,\n\t\t\t0x38, 0xb4, 0x4b, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x8d, 0xcb,\n\t\t\t0x38, 0xb4, 0x10, 0x87,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0xd4, 0x5f,\n\t\t\t0x38, 0xb4, 0x20, 0xb9,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x7f,\n\t\t\t0x38, 0xb4, 0x20, 0x99,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0x45, 0x61,\n\t\t\t0x38, 0xb4, 0x74, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xdc, 0x81,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xab, 0x5f,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xd6, 0x81,\n\t\t\t0x38, 0xb4, 0x10, 0xa7,\n\t\t\t0x38, 0xb4, 0x20, 0xb8,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0xa5, 0x7f,\n\t\t\t0x38, 0xb4, 0x20, 0x98,\n\t\t\t0x38, 0xb4, 0x14, 0xd1,\n\t\t\t0x38, 0xb4, 0x40, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xba, 0x5f,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x76, 0x5f,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x34, 0x5f,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x81, 0x60,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x5a, 0x40,\n\t\t\t0x38, 0xb4, 0x80, 0xa4,\n\t\t\t0x38, 0xb4, 0x86, 0xcb,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0xba, 0x60,\n\t\t\t0x38, 0xb4, 0xc8, 0xd1,\n\t\t\t0x38, 0xb4, 0x45, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x08, 0x82,\n\t\t\t0x38, 0xb4, 0x7a, 0xd1,\n\t\t\t0x38, 0xb4, 0x4b, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0xc0, 0x0c,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x01, 0x01,\n\t\t\t0x38, 0xb4, 0xe0, 0x0c,\n\t\t\t0x38, 0xb4, 0x20, 0x03,\n\t\t\t0x38, 0xb4, 0x29, 0xcc,\n\t\t\t0x38, 0xb4, 0x08, 0xa2,\n\t\t\t0x38, 0xb4, 0x04, 0x82,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0xf5, 0x40,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x80, 0xa2,\n\t\t\t0x38, 0xb4, 0x80, 0x87,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x04, 0x8e,\n\t\t\t0x38, 0xb4, 0x14, 0xd1,\n\t\t\t0x38, 0xb4, 0x40, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xf4, 0x5f,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x3e, 0x0c,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x9d, 0x60,\n\t\t\t0x38, 0xb4, 0x17, 0xd4,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x03, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x89, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x7a, 0x5f,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x36, 0x5f,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x89, 0x60,\n\t\t\t0x38, 0xb4, 0x0c, 0xd4,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x03, 0x12,\n\t\t\t0x38, 0xb4, 0x40, 0xaa,\n\t\t\t0x38, 0xb4, 0x10, 0xbb,\n\t\t\t0x38, 0xb4, 0x50, 0xcb,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x10, 0xa3,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x5f, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x89, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0x75, 0x5f,\n\t\t\t0x38, 0xb4, 0x90, 0x81,\n\t\t\t0x38, 0xb4, 0xa0, 0x82,\n\t\t\t0x38, 0xb4, 0x02, 0x84,\n\t\t\t0x38, 0xb4, 0x04, 0xa4,\n\t\t\t0x38, 0xb4, 0x0a, 0x80,\n\t\t\t0x38, 0xb4, 0x18, 0x87,\n\t\t\t0x38, 0xb4, 0x10, 0x9b,\n\t\t\t0x38, 0xb4, 0x20, 0x9b,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0xb5, 0x7f,\n\t\t\t0x38, 0xb4, 0x51, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0x94, 0x5f,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0xa9, 0x61,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0xa1, 0x40,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x79, 0x40,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x9d, 0x60,\n\t\t\t0x38, 0xb4, 0x41, 0xd1,\n\t\t\t0x38, 0xb4, 0x43, 0xd0,\n\t\t\t0x38, 0xb4, 0x06, 0xf0,\n\t\t\t0x38, 0xb4, 0x01, 0xd1,\n\t\t\t0x38, 0xb4, 0x40, 0xd0,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x41, 0xd1,\n\t\t\t0x38, 0xb4, 0x44, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xe5, 0x60,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0xbe, 0x60,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0xb1, 0x29,\n\t\t\t0x38, 0xb4, 0x70, 0x82,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0x80, 0xa8,\n\t\t\t0x38, 0xb4, 0x0a, 0xa0,\n\t\t\t0x38, 0xb4, 0x90, 0xa1,\n\t\t\t0x38, 0xb4, 0x20, 0x82,\n\t\t\t0x38, 0xb4, 0x80, 0xa2,\n\t\t\t0x38, 0xb4, 0x04, 0xa4,\n\t\t\t0x38, 0xb4, 0x20, 0xa6,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0xaa, 0xc5,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x61, 0x60,\n\t\t\t0x38, 0xb4, 0x02, 0xa4,\n\t\t\t0x38, 0xb4, 0x80, 0xa4,\n\t\t\t0x38, 0xb4, 0x52, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xba, 0x5f,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x76, 0x5f,\n\t\t\t0x38, 0xb4, 0x20, 0xb9,\n\t\t\t0x38, 0xb4, 0x53, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x7f,\n\t\t\t0x38, 0xb4, 0x20, 0x99,\n\t\t\t0x38, 0xb4, 0x0a, 0xa0,\n\t\t\t0x38, 0xb4, 0x90, 0xa1,\n\t\t\t0x38, 0xb4, 0x80, 0xa2,\n\t\t\t0x38, 0xb4, 0x20, 0x82,\n\t\t\t0x38, 0xb4, 0x04, 0xa4,\n\t\t\t0x38, 0xb4, 0x80, 0xb5,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xa1, 0x40,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x02, 0xa6,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x10, 0xa3,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x60, 0xcb,\n\t\t\t0x38, 0xb4, 0x01, 0xd1,\n\t\t\t0x38, 0xb4, 0x40, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x10, 0xaa,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x33, 0x28,\n\t\t\t0x38, 0xb4, 0xa9, 0x82,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x30, 0x13,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xa6, 0x40,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x40, 0xa1,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xa3, 0x40,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x20, 0xac,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x0c, 0xa9,\n\t\t\t0x38, 0xb4, 0x80, 0xaa,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x07, 0x0d,\n\t\t\t0x38, 0xb4, 0xc0, 0x8d,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xb5, 0x12,\n\t\t\t0x38, 0xb4, 0x0a, 0xa0,\n\t\t\t0x38, 0xb4, 0x90, 0xa1,\n\t\t\t0x38, 0xb4, 0x80, 0xa2,\n\t\t\t0x38, 0xb4, 0x20, 0x82,\n\t\t\t0x38, 0xb4, 0x04, 0xa4,\n\t\t\t0x38, 0xb4, 0x80, 0xb5,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x00, 0xc5,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0xe0, 0x83,\n\t\t\t0x38, 0xb4, 0x01, 0x8e,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xa1, 0x40,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x02, 0xa6,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x4a, 0xd1,\n\t\t\t0x38, 0xb4, 0x58, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xd7, 0x12,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x63, 0x40,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xea, 0x12,\n\t\t\t0x38, 0xb4, 0x6f, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x70, 0x2e,\n\t\t\t0x38, 0xb4, 0x17, 0x83,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0x6e, 0x67,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x68, 0x38,\n\t\t\t0x38, 0xb4, 0xf2, 0x82,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0xc2, 0x61,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0xff, 0xff, 0xff, 0xff,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x38, 0xb4, 0x18, 0x2f,\n\t\t\t0x38, 0xb4, 0xf8, 0x82,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x35, 0x5d,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0xaa, 0xc5,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0xe0, 0x0c,\n\t\t\t0x38, 0xb4, 0x20, 0x03,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xfe, 0x82,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0xaa, 0xc5,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x1e, 0x83,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0xaa, 0xc5,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x20, 0x83,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xd7, 0x12,\n\t\t\t0x38, 0xb4, 0x02, 0xae,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x63, 0x40,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xea, 0x12,\n\t\t\t0x38, 0xb4, 0x61, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x70, 0x2e,\n\t\t\t0x38, 0xb4, 0x17, 0x83,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x68, 0x38,\n\t\t\t0x38, 0xb4, 0x1e, 0x83,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0xe2, 0x61,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0x2e, 0x61,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x18, 0x2f,\n\t\t\t0x38, 0xb4, 0x20, 0x83,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xfe, 0x82,\n\t\t\t0x38, 0xb4, 0x02, 0x8e,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x99, 0x0f,\n\t\t\t0x38, 0xb4, 0x04, 0xae,\n\t\t\t0x38, 0xb4, 0x10, 0x83,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x31, 0x0e,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x9c, 0x85,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x07, 0x0e,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xa4, 0x5f,\n\t\t\t0x38, 0xb4, 0x06, 0xa7,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x4b, 0x40,\n\t\t\t0x38, 0xb4, 0x80, 0xa8,\n\t\t\t0x38, 0xb4, 0x01, 0x88,\n\t\t\t0x38, 0xb4, 0x01, 0x8e,\n\t\t\t0x38, 0xb4, 0x50, 0xca,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xc5, 0x83,\n\t\t\t0x38, 0xb4, 0x51, 0xca,\n\t\t\t0x38, 0xb4, 0x0e, 0xd7,\n\t\t\t0x38, 0xb4, 0x10, 0x22,\n\t\t\t0x38, 0xb4, 0xc3, 0x83,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x84, 0x40,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0xfd, 0x5e,\n\t\t\t0x38, 0xb4, 0x07, 0xf0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xc2, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xe2, 0x5c,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x92, 0x16,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x5a, 0x60,\n\t\t\t0x38, 0xb4, 0x10, 0x9a,\n\t\t\t0x38, 0xb4, 0x40, 0x8e,\n\t\t\t0x38, 0xb4, 0x04, 0x84,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x27, 0x18,\n\t\t\t0x38, 0xb4, 0x80, 0x8e,\n\t\t\t0x38, 0xb4, 0x62, 0xca,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0x84, 0x30,\n\t\t\t0x38, 0xb4, 0xa5, 0x83,\n\t\t\t0x38, 0xb4, 0x10, 0xba,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x9e, 0x84,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x00, 0x01,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x38, 0x46,\n\t\t\t0x38, 0xb4, 0xc4, 0xd1,\n\t\t\t0x38, 0xb4, 0x44, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x7c, 0x5f,\n\t\t\t0x38, 0xb4, 0x08, 0x81,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x07, 0x09,\n\t\t\t0x38, 0xb4, 0x40, 0x89,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xdb, 0x17,\n\t\t\t0x38, 0xb4, 0xc4, 0xa0,\n\t\t\t0x38, 0xb4, 0x10, 0x86,\n\t\t\t0x38, 0xb4, 0x30, 0x80,\n\t\t\t0x38, 0xb4, 0x06, 0x87,\n\t\t\t0x38, 0xb4, 0x07, 0x0c,\n\t\t\t0x38, 0xb4, 0x06, 0x0b,\n\t\t\t0x38, 0xb4, 0x10, 0x84,\n\t\t\t0x38, 0xb4, 0x80, 0xa9,\n\t\t\t0x38, 0xb4, 0x02, 0xa7,\n\t\t\t0x38, 0xb4, 0xc4, 0xd1,\n\t\t\t0x38, 0xb4, 0x45, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x7c, 0x5f,\n\t\t\t0x38, 0xb4, 0x07, 0x0c,\n\t\t\t0x38, 0xb4, 0x06, 0x0b,\n\t\t\t0x38, 0xb4, 0x30, 0xa0,\n\t\t\t0x38, 0xb4, 0x10, 0xa6,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x41, 0x60,\n\t\t\t0x38, 0xb4, 0x01, 0xa5,\n\t\t\t0x38, 0xb4, 0x08, 0xa1,\n\t\t\t0x38, 0xb4, 0xc4, 0xd1,\n\t\t\t0x38, 0xb4, 0x45, 0xd0,\n\t\t\t0x38, 0xb4, 0x63, 0xca,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x7c, 0x5f,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x78, 0x60,\n\t\t\t0x38, 0xb4, 0x20, 0x99,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x20, 0xb9,\n\t\t\t0x38, 0xb4, 0x80, 0xa8,\n\t\t\t0x38, 0xb4, 0x10, 0x9a,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0x73, 0x5f,\n\t\t\t0x38, 0xb4, 0x11, 0xf0,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x9b, 0x40,\n\t\t\t0x38, 0xb4, 0x20, 0x99,\n\t\t\t0x38, 0xb4, 0x10, 0x9a,\n\t\t\t0x38, 0xb4, 0xf5, 0xff,\n\t\t\t0x38, 0xb4, 0xfe, 0x80,\n\t\t\t0x38, 0xb4, 0x10, 0x86,\n\t\t\t0x38, 0xb4, 0x01, 0x85,\n\t\t\t0x38, 0xb4, 0x80, 0x89,\n\t\t\t0x38, 0xb4, 0x02, 0x87,\n\t\t\t0x38, 0xb4, 0x10, 0xa4,\n\t\t\t0x38, 0xb4, 0x40, 0xa9,\n\t\t\t0x38, 0xb4, 0xc0, 0x81,\n\t\t\t0x38, 0xb4, 0x80, 0xae,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x4a, 0x83,\n\t\t\t0x38, 0xb4, 0x04, 0x88,\n\t\t\t0x38, 0xb4, 0x04, 0xa7,\n\t\t\t0x38, 0xb4, 0x88, 0x87,\n\t\t\t0x38, 0xb4, 0x82, 0xff,\n\t\t\t0x38, 0xb4, 0x08, 0xbb,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x07, 0x09,\n\t\t\t0x38, 0xb4, 0x40, 0x89,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xdb, 0x17,\n\t\t\t0x38, 0xb4, 0x01, 0x87,\n\t\t\t0x38, 0xb4, 0x02, 0x85,\n\t\t\t0x38, 0xb4, 0xf4, 0xa0,\n\t\t\t0x38, 0xb4, 0x10, 0xa6,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x61, 0x60,\n\t\t\t0x38, 0xb4, 0x02, 0xa0,\n\t\t\t0x38, 0xb4, 0x01, 0xa5,\n\t\t\t0x38, 0xb4, 0x06, 0x87,\n\t\t\t0x38, 0xb4, 0x10, 0x84,\n\t\t\t0x38, 0xb4, 0x80, 0xa9,\n\t\t\t0x38, 0xb4, 0x64, 0xca,\n\t\t\t0x38, 0xb4, 0x10, 0xd1,\n\t\t\t0x38, 0xb4, 0x40, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x7c, 0x5f,\n\t\t\t0x38, 0xb4, 0x04, 0x88,\n\t\t\t0x38, 0xb4, 0x06, 0xa7,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x26, 0x83,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x7c, 0x14,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0x5f, 0x40,\n\t\t\t0x38, 0xb4, 0x37, 0xf0,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0x59, 0x42,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0x34, 0x62,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xc6, 0x41,\n\t\t\t0x38, 0xb4, 0x0d, 0xd7,\n\t\t\t0x38, 0xb4, 0x9d, 0x41,\n\t\t\t0x38, 0xb4, 0x0d, 0xd7,\n\t\t\t0x38, 0xb4, 0x7e, 0x41,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x27, 0x61,\n\t\t\t0x38, 0xb4, 0x51, 0x29,\n\t\t\t0x38, 0xb4, 0xdc, 0x83,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x83, 0x40,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x81, 0x2e,\n\t\t\t0x38, 0xb4, 0xdc, 0x83,\n\t\t\t0x38, 0xb4, 0xc2, 0xf0,\n\t\t\t0x38, 0xb4, 0xfe, 0x80,\n\t\t\t0x38, 0xb4, 0x10, 0x86,\n\t\t\t0x38, 0xb4, 0x01, 0x85,\n\t\t\t0x38, 0xb4, 0x04, 0x87,\n\t\t\t0x38, 0xb4, 0x30, 0x0c,\n\t\t\t0x38, 0xb4, 0x10, 0x04,\n\t\t\t0x38, 0xb4, 0x02, 0xac,\n\t\t\t0x38, 0xb4, 0x02, 0xa5,\n\t\t\t0x38, 0xb4, 0x80, 0x89,\n\t\t\t0x38, 0xb4, 0x60, 0xca,\n\t\t\t0x38, 0xb4, 0x04, 0xa0,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x65, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xec, 0x83,\n\t\t\t0x38, 0xb4, 0x04, 0x80,\n\t\t\t0x38, 0xb4, 0x04, 0xa8,\n\t\t\t0x38, 0xb4, 0x0f, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x06,\n\t\t\t0x38, 0xb4, 0x70, 0x0c,\n\t\t\t0x38, 0xb4, 0x30, 0x07,\n\t\t\t0x38, 0xb4, 0x08, 0xa7,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x9c, 0x60,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x12, 0x09,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x0e, 0x09,\n\t\t\t0x38, 0xb4, 0x40, 0xa9,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xdb, 0x17,\n\t\t\t0x38, 0xb4, 0x80, 0xa7,\n\t\t\t0x38, 0xb4, 0xa0, 0xf0,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0xab, 0x63,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0x71, 0x43,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x9c, 0x33,\n\t\t\t0x38, 0xb4, 0x9d, 0x84,\n\t\t\t0x38, 0xb4, 0x88, 0x87,\n\t\t\t0x38, 0xb4, 0x04, 0x87,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x07, 0x09,\n\t\t\t0x38, 0xb4, 0x40, 0x89,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xdb, 0x17,\n\t\t\t0x38, 0xb4, 0x10, 0x84,\n\t\t\t0x38, 0xb4, 0xf4, 0xa0,\n\t\t\t0x38, 0xb4, 0x10, 0xa6,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x61, 0x60,\n\t\t\t0x38, 0xb4, 0x02, 0xa0,\n\t\t\t0x38, 0xb4, 0x01, 0xa5,\n\t\t\t0x38, 0xb4, 0x06, 0xa7,\n\t\t\t0x38, 0xb4, 0x04, 0x88,\n\t\t\t0x38, 0xb4, 0x80, 0xa9,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x85, 0x60,\n\t\t\t0x38, 0xb4, 0x01, 0x87,\n\t\t\t0x38, 0xb4, 0x02, 0x85,\n\t\t\t0x38, 0xb4, 0x02, 0x8c,\n\t\t\t0x38, 0xb4, 0x82, 0xf0,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xc5, 0x60,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x53, 0x60,\n\t\t\t0x38, 0xb4, 0x7d, 0xf0,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x9a, 0x84,\n\t\t\t0x38, 0xb4, 0x0d, 0xd7,\n\t\t\t0x38, 0xb4, 0x1b, 0x4d,\n\t\t\t0x38, 0xb4, 0x10, 0xba,\n\t\t\t0x38, 0xb4, 0x40, 0xae,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0xb4, 0x03,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0xb4, 0x05,\n\t\t\t0x38, 0xb4, 0xc4, 0xd1,\n\t\t\t0x38, 0xb4, 0x44, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x7c, 0x5f,\n\t\t\t0x38, 0xb4, 0x06, 0x87,\n\t\t\t0x38, 0xb4, 0x80, 0x82,\n\t\t\t0x38, 0xb4, 0xe0, 0xac,\n\t\t\t0x38, 0xb4, 0x80, 0xa6,\n\t\t\t0x38, 0xb4, 0x40, 0xa2,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x79, 0x5f,\n\t\t\t0x38, 0xb4, 0x40, 0x82,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x98, 0x68,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x57, 0x49,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x8c, 0x84,\n\t\t\t0x38, 0xb4, 0xc0, 0xa1,\n\t\t\t0x38, 0xb4, 0x3f, 0x0c,\n\t\t\t0x38, 0xb4, 0x20, 0x02,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0x0c, 0x03,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0x0c, 0x05,\n\t\t\t0x38, 0xb4, 0x08, 0x81,\n\t\t\t0x38, 0xb4, 0x40, 0x86,\n\t\t\t0x38, 0xb4, 0x20, 0xa1,\n\t\t\t0x38, 0xb4, 0x40, 0xa6,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x01, 0x01,\n\t\t\t0x38, 0xb4, 0x10, 0xa1,\n\t\t\t0x38, 0xb4, 0xc4, 0xd1,\n\t\t\t0x38, 0xb4, 0x44, 0xd0,\n\t\t\t0x38, 0xb4, 0x84, 0xca,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x7c, 0x5f,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0xfc, 0x60,\n\t\t\t0x38, 0xb4, 0x10, 0x82,\n\t\t\t0x38, 0xb4, 0xe0, 0x0c,\n\t\t\t0x38, 0xb4, 0x20, 0x03,\n\t\t\t0x38, 0xb4, 0xe0, 0x0c,\n\t\t\t0x38, 0xb4, 0x20, 0x05,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0x10, 0xa2,\n\t\t\t0x38, 0xb4, 0xc4, 0xd1,\n\t\t\t0x38, 0xb4, 0x43, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x7c, 0x5f,\n\t\t\t0x38, 0xb4, 0x33, 0x82,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0x6c, 0x03,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0x6c, 0x05,\n\t\t\t0x38, 0xb4, 0xc4, 0xd1,\n\t\t\t0x38, 0xb4, 0x44, 0xd0,\n\t\t\t0x38, 0xb4, 0x85, 0xca,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x7c, 0x5f,\n\t\t\t0x38, 0xb4, 0x80, 0xa6,\n\t\t\t0x38, 0xb4, 0x40, 0xa2,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x79, 0x5f,\n\t\t\t0x38, 0xb4, 0x40, 0x82,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0x90, 0x03,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0x90, 0x05,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x58, 0x60,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0xc8, 0xfe,\n\t\t\t0x38, 0xb4, 0xc0, 0x81,\n\t\t\t0x38, 0xb4, 0x80, 0x88,\n\t\t\t0x38, 0xb4, 0x06, 0x87,\n\t\t\t0x38, 0xb4, 0x61, 0xca,\n\t\t\t0x38, 0xb4, 0xc4, 0xd1,\n\t\t\t0x38, 0xb4, 0x54, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x7d, 0x5f,\n\t\t\t0x38, 0xb4, 0x06, 0xa7,\n\t\t\t0x38, 0xb4, 0x04, 0xf0,\n\t\t\t0x38, 0xb4, 0x88, 0x87,\n\t\t\t0x38, 0xb4, 0x04, 0xa4,\n\t\t\t0x38, 0xb4, 0x02, 0x87,\n\t\t\t0x38, 0xb4, 0x00, 0x08,\n\t\t\t0x38, 0xb4, 0x43, 0x84,\n\t\t\t0x38, 0xb4, 0x03, 0x83,\n\t\t\t0x38, 0xb4, 0x80, 0x82,\n\t\t\t0x38, 0xb4, 0x20, 0x99,\n\t\t\t0x38, 0xb4, 0xe0, 0x8c,\n\t\t\t0x38, 0xb4, 0x04, 0x80,\n\t\t\t0x38, 0xb4, 0xc0, 0xa1,\n\t\t\t0x38, 0xb4, 0x0e, 0xd7,\n\t\t\t0x38, 0xb4, 0x4a, 0x40,\n\t\t\t0x38, 0xb4, 0x80, 0xa2,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0xd0, 0x3b,\n\t\t\t0x38, 0xb4, 0xae, 0x84,\n\t\t\t0x38, 0xb4, 0x3f, 0x0c,\n\t\t\t0x38, 0xb4, 0x23, 0x02,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x3f, 0x0c,\n\t\t\t0x38, 0xb4, 0x20, 0x02,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0x08, 0x03,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0x08, 0x05,\n\t\t\t0x38, 0xb4, 0x08, 0x81,\n\t\t\t0x38, 0xb4, 0x40, 0x86,\n\t\t\t0x38, 0xb4, 0x20, 0xa1,\n\t\t\t0x38, 0xb4, 0x40, 0xa6,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x77, 0x60,\n\t\t\t0x38, 0xb4, 0x03, 0x81,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x01, 0x01,\n\t\t\t0x38, 0xb4, 0x10, 0xa1,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x77, 0x60,\n\t\t\t0x38, 0xb4, 0x08, 0xa1,\n\t\t\t0x38, 0xb4, 0x06, 0xf0,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x77, 0x60,\n\t\t\t0x38, 0xb4, 0x08, 0x81,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0x08, 0xa1,\n\t\t\t0x38, 0xb4, 0x93, 0xd1,\n\t\t\t0x38, 0xb4, 0x45, 0xd0,\n\t\t\t0x38, 0xb4, 0x82, 0xca,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x0e, 0xd7,\n\t\t\t0x38, 0xb4, 0x6a, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x3c, 0x5f,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0xfc, 0x60,\n\t\t\t0x38, 0xb4, 0x10, 0x82,\n\t\t\t0x38, 0xb4, 0xe0, 0x0c,\n\t\t\t0x38, 0xb4, 0x20, 0x03,\n\t\t\t0x38, 0xb4, 0xe0, 0x0c,\n\t\t\t0x38, 0xb4, 0x20, 0x05,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0x10, 0xa2,\n\t\t\t0x38, 0xb4, 0xc4, 0xd1,\n\t\t\t0x38, 0xb4, 0x43, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x0e, 0xd7,\n\t\t\t0x38, 0xb4, 0x6a, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0xff, 0xff, 0xff, 0xff,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x3c, 0x5f,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0xd0, 0x3b,\n\t\t\t0x38, 0xb4, 0xec, 0x84,\n\t\t\t0x38, 0xb4, 0x3f, 0x0c,\n\t\t\t0x38, 0xb4, 0x0c, 0x02,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0x3f, 0x82,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0x4c, 0x03,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0x4c, 0x05,\n\t\t\t0x38, 0xb4, 0xc4, 0xd1,\n\t\t\t0x38, 0xb4, 0x44, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x0e, 0xd7,\n\t\t\t0x38, 0xb4, 0x6a, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x3c, 0x5f,\n\t\t\t0x38, 0xb4, 0x0c, 0x82,\n\t\t\t0x38, 0xb4, 0x60, 0xa3,\n\t\t\t0x38, 0xb4, 0x60, 0xa5,\n\t\t\t0x38, 0xb4, 0xc4, 0xd1,\n\t\t\t0x38, 0xb4, 0x43, 0xd0,\n\t\t\t0x38, 0xb4, 0x83, 0xca,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x0e, 0xd7,\n\t\t\t0x38, 0xb4, 0x6a, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x3c, 0x5f,\n\t\t\t0x38, 0xb4, 0x0e, 0xd7,\n\t\t\t0x38, 0xb4, 0x6a, 0x40,\n\t\t\t0x38, 0xb4, 0x80, 0x86,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0x80, 0xa6,\n\t\t\t0x38, 0xb4, 0x40, 0xa2,\n\t\t\t0x38, 0xb4, 0x0f, 0x0c,\n\t\t\t0x38, 0xb4, 0x04, 0x06,\n\t\t\t0x38, 0xb4, 0x70, 0x0c,\n\t\t\t0x38, 0xb4, 0x50, 0x07,\n\t\t\t0x38, 0xb4, 0x08, 0xa7,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x9c, 0x60,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x14, 0x09,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x10, 0x09,\n\t\t\t0x38, 0xb4, 0x40, 0xa9,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xdb, 0x17,\n\t\t\t0x38, 0xb4, 0x80, 0xa7,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xbe, 0x17,\n\t\t\t0x38, 0xb4, 0x0e, 0xd7,\n\t\t\t0x38, 0xb4, 0x6a, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xe8, 0x17,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x9c, 0x39,\n\t\t\t0x38, 0xb4, 0x1f, 0x85,\n\t\t\t0x38, 0xb4, 0x40, 0x82,\n\t\t\t0x38, 0xb4, 0x88, 0x87,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0xf8, 0x63,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0x3c, 0x64,\n\t\t\t0x38, 0xb4, 0x02, 0xa4,\n\t\t\t0x38, 0xb4, 0x12, 0xf0,\n\t\t\t0x38, 0xb4, 0x02, 0x84,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0x1b, 0x61,\n\t\t\t0x38, 0xb4, 0x01, 0xa4,\n\t\t\t0x38, 0xb4, 0x02, 0xa3,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x7d, 0x41,\n\t\t\t0x38, 0xb4, 0x40, 0xa4,\n\t\t\t0x38, 0xb4, 0x80, 0xa2,\n\t\t\t0x38, 0xb4, 0x08, 0xf0,\n\t\t\t0x38, 0xb4, 0x01, 0x84,\n\t\t\t0x38, 0xb4, 0x02, 0x83,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x60, 0x60,\n\t\t\t0x38, 0xb4, 0x01, 0xa3,\n\t\t\t0x38, 0xb4, 0x02, 0xf0,\n\t\t\t0x38, 0xb4, 0x01, 0x83,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x80, 0x40,\n\t\t\t0x38, 0xb4, 0x0e, 0xd7,\n\t\t\t0x38, 0xb4, 0x4a, 0x60,\n\t\t\t0x38, 0xb4, 0x5f, 0xff,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0xdd, 0x3c,\n\t\t\t0x38, 0xb4, 0x4e, 0x85,\n\t\t\t0x38, 0xb4, 0x5b, 0xff,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0x90, 0x03,\n\t\t\t0x38, 0xb4, 0xfc, 0x0c,\n\t\t\t0x38, 0xb4, 0x90, 0x05,\n\t\t\t0x38, 0xb4, 0x00, 0x08,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0xf9, 0x60,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x58, 0x69,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x02, 0x69,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x01, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0xa2,\n\t\t\t0x38, 0xb4, 0x04, 0xa4,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x54, 0x40,\n\t\t\t0x38, 0xb4, 0x40, 0xa7,\n\t\t\t0x38, 0xb4, 0x04, 0xa5,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0xb5, 0x40,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x03, 0xa0,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x90, 0x81,\n\t\t\t0x38, 0xb4, 0x91, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xaf, 0x10,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0xb9, 0x7f,\n\t\t\t0x38, 0xb4, 0x20, 0x82,\n\t\t\t0x38, 0xb4, 0x04, 0x84,\n\t\t\t0x38, 0xb4, 0x80, 0xa2,\n\t\t\t0x38, 0xb4, 0x10, 0xa1,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x41, 0x40,\n\t\t\t0x38, 0xb4, 0x80, 0xa1,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x0c, 0x13,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x0f, 0x85,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x08, 0x0d,\n\t\t\t0x38, 0xb4, 0xc0, 0x0c,\n\t\t\t0x38, 0xb4, 0x80, 0x0d,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xb5, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xaf, 0x10,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x5f, 0x61,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x03, 0x61,\n\t\t\t0x38, 0xb4, 0x04, 0x85,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0xb5, 0x40,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x03, 0x80,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x92, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xaf, 0x10,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0xa3, 0x7f,\n\t\t\t0x38, 0xb4, 0x80, 0x82,\n\t\t\t0x38, 0xb4, 0x90, 0x81,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x0f, 0x0c,\n\t\t\t0x38, 0xb4, 0x0a, 0x05,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x00, 0x0d,\n\t\t\t0x38, 0xb4, 0xc0, 0x8d,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xb5, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x01, 0x10,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x00, 0x0d,\n\t\t\t0x38, 0xb4, 0xc0, 0x8d,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xb5, 0x12,\n\t\t\t0x38, 0xb4, 0x0a, 0x80,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0xb9, 0x40,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x63, 0x60,\n\t\t\t0x38, 0xb4, 0x20, 0xa0,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0x20, 0x80,\n\t\t\t0x38, 0xb4, 0x04, 0xa5,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0xb5, 0x40,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x03, 0xa0,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x54, 0x40,\n\t\t\t0x38, 0xb4, 0x40, 0xa7,\n\t\t\t0x38, 0xb4, 0x90, 0x81,\n\t\t\t0x38, 0xb4, 0x93, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x63, 0x60,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x9c, 0x60,\n\t\t\t0x38, 0xb4, 0x4b, 0xd1,\n\t\t\t0x38, 0xb4, 0x40, 0xd0,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x20, 0xd1,\n\t\t\t0x38, 0xb4, 0x40, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xaf, 0x10,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x08, 0xa0,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x40, 0x40,\n\t\t\t0x38, 0xb4, 0x02, 0xa0,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0x79, 0x40,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x13, 0x13,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0xf0, 0x85,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0xd9, 0x40,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x83, 0x60,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x09, 0x0d,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x0a, 0x0d,\n\t\t\t0x38, 0xb4, 0xc0, 0x0c,\n\t\t\t0x38, 0xb4, 0x80, 0x0d,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xb5, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xaf, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x80,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0x99, 0x41,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0x5f, 0x61,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x03, 0x61,\n\t\t\t0x38, 0xb4, 0x04, 0x85,\n\t\t\t0x38, 0xb4, 0x04, 0xd7,\n\t\t\t0x38, 0xb4, 0xb5, 0x40,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x03, 0x80,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x94, 0xcb,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xaf, 0x10,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0xa2, 0x7f,\n\t\t\t0x38, 0xb4, 0x0a, 0x80,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0xf0, 0x85,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0xb9, 0x40,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x00, 0x0d,\n\t\t\t0x38, 0xb4, 0xc0, 0x8d,\n\t\t\t0x38, 0xb4, 0x05, 0xf0,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x07, 0x0d,\n\t\t\t0x38, 0xb4, 0xc0, 0x8d,\n\t\t\t0x38, 0xb4, 0x90, 0xa1,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xb5, 0x12,\n\t\t\t0x38, 0xb4, 0x05, 0xd7,\n\t\t\t0x38, 0xb4, 0xcc, 0x39,\n\t\t\t0x38, 0xb4, 0x07, 0x86,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x01, 0x10,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xb7, 0x82,\n\t\t\t0x38, 0xb4, 0x13, 0xcb,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x89, 0x60,\n\t\t\t0x38, 0xb4, 0xb8, 0xd1,\n\t\t\t0x38, 0xb4, 0x4a, 0xd0,\n\t\t\t0x38, 0xb4, 0x03, 0xf0,\n\t\t\t0x38, 0xb4, 0x1c, 0xd1,\n\t\t\t0x38, 0xb4, 0x4b, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0xd5, 0x67,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x74, 0x5f,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x0c, 0x61,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0x46, 0x68,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x7b, 0x64,\n\t\t\t0x38, 0xb4, 0xfa, 0xff,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x30, 0x13,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x1f, 0x0c,\n\t\t\t0x38, 0xb4, 0x16, 0x0f,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xb3, 0x5f,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x15,\n\t\t\t0x38, 0xb4, 0x1f, 0x8f,\n\t\t\t0x38, 0xb4, 0x03, 0x95,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0x33, 0x7f,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0xb5, 0x12,\n\t\t\t0x38, 0xb4, 0x07, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x0c,\n\t\t\t0x38, 0xb4, 0xc0, 0x0c,\n\t\t\t0x38, 0xb4, 0x80, 0x00,\n\t\t\t0x38, 0xb4, 0x4a, 0xd1,\n\t\t\t0x38, 0xb4, 0x48, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x19, 0x86,\n\t\t\t0x38, 0xb4, 0x0a, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x0e, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0x80,\n\t\t\t0x38, 0xb4, 0x01, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x12,\n\t\t\t0x38, 0xb4, 0x01, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x17, 0x12,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x09,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xed, 0x04,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0xab, 0x5f,\n\t\t\t0x38, 0xb4, 0x08, 0xba,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x1f, 0xd7,\n\t\t\t0x38, 0xb4, 0x8b, 0x7f,\n\t\t\t0x38, 0xb4, 0x08, 0x9a,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x81, 0x05,\n\t\t\t0x38, 0xb4, 0x0a, 0x80,\n\t\t\t0x38, 0xb4, 0x02, 0xd7,\n\t\t\t0x38, 0xb4, 0x55, 0x65,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x0e, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0x80,\n\t\t\t0x38, 0xb4, 0x01, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x12,\n\t\t\t0x38, 0xb4, 0x01, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x17, 0x12,\n\t\t\t0x38, 0xb4, 0x0a, 0xa0,\n\t\t\t0x38, 0xb4, 0x80, 0xa7,\n\t\t\t0x38, 0xb4, 0x14, 0xcb,\n\t\t\t0x38, 0xb4, 0xb8, 0xd1,\n\t\t\t0x38, 0xb4, 0x4a, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x86, 0x62,\n\t\t\t0x38, 0xb4, 0x06, 0xd7,\n\t\t\t0x38, 0xb4, 0x5b, 0x5f,\n\t\t\t0x38, 0xb4, 0x0a, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x0e, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x12,\n\t\t\t0x38, 0xb4, 0x04, 0x80,\n\t\t\t0x38, 0xb4, 0x01, 0xa0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x20, 0x12,\n\t\t\t0x38, 0xb4, 0x01, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x17, 0x12,\n\t\t\t0x38, 0xb4, 0x03, 0x0c,\n\t\t\t0x38, 0xb4, 0x02, 0x09,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x61, 0x86,\n\t\t\t0x38, 0xb4, 0x0a, 0xa0,\n\t\t\t0x38, 0xb4, 0x08, 0x93,\n\t\t\t0x38, 0xb4, 0x10, 0xb2,\n\t\t\t0x38, 0xb4, 0x01, 0xb3,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x01, 0xd7,\n\t\t\t0x38, 0xb4, 0xa4, 0x5f,\n\t\t\t0x38, 0xb4, 0x02, 0xb3,\n\t\t\t0x38, 0xb4, 0x10, 0x92,\n\t\t\t0x38, 0xb4, 0x09, 0xd4,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x03, 0x12,\n\t\t\t0x38, 0xb4, 0x03, 0xd1,\n\t\t\t0x38, 0xb4, 0x4c, 0xd0,\n\t\t\t0x38, 0xb4, 0x00, 0x10,\n\t\t\t0x38, 0xb4, 0x6b, 0x12,\n\t\t\t0x38, 0xb4, 0x00, 0xd7,\n\t\t\t0x38, 0xb4, 0xb4, 0x5f,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x81, 0x05,\n\t\t\t0x38, 0xb4, 0x0c, 0xd7,\n\t\t\t0x38, 0xb4, 0xb3, 0x60,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xa3, 0x86,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0x1a, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x18,\n\t\t\t0x38, 0xb4, 0xcb, 0x12,\n\t\t\t0x36, 0xb4, 0x0e, 0xa1,\n\t\t\t0x38, 0xb4, 0xcf, 0x12,\n\t\t\t0x36, 0xb4, 0x0c, 0xa1,\n\t\t\t0x38, 0xb4, 0xf8, 0x04,\n\t\t\t0x36, 0xb4, 0x0a, 0xa1,\n\t\t\t0x38, 0xb4, 0x03, 0x10,\n\t\t\t0x36, 0xb4, 0x08, 0xa1,\n\t\t\t0x38, 0xb4, 0xfb, 0x15,\n\t\t\t0x36, 0xb4, 0x06, 0xa1,\n\t\t\t0x38, 0xb4, 0x2b, 0x0d,\n\t\t\t0x36, 0xb4, 0x04, 0xa1,\n\t\t\t0x38, 0xb4, 0xcb, 0x0e,\n\t\t\t0x36, 0xb4, 0x02, 0xa1,\n\t\t\t0x38, 0xb4, 0x19, 0x11,\n\t\t\t0x36, 0xb4, 0x00, 0xa1,\n\t\t\t0x38, 0xb4, 0x60, 0x09,\n\t\t\t0x36, 0xb4, 0x10, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x16, 0xa0,\n\t\t\t0x38, 0xb4, 0x20, 0x00,\n\t\t\t0x36, 0xb4, 0x12, 0xa0,\n\t\t\t0x38, 0xb4, 0xf8, 0x1f,\n\t\t\t0x36, 0xb4, 0x14, 0xa0,\n\t\t\t0x38, 0xb4, 0x04, 0xa7,\n\t\t\t0x38, 0xb4, 0xb7, 0x82,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x36, 0xb4, 0x64, 0xa1,\n\t\t\t0x38, 0xb4, 0x9f, 0x11,\n\t\t\t0x36, 0xb4, 0x66, 0xa1,\n\t\t\t0x38, 0xb4, 0xa1, 0x11,\n\t\t\t0x36, 0xb4, 0x68, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x6a, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x6c, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x6e, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x70, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x72, 0xa1,\n\t\t\t0x38, 0xb4, 0xff, 0x3f,\n\t\t\t0x36, 0xb4, 0x62, 0xa1,\n\t\t\t0x38, 0xb4, 0x03, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x7c, 0xb8,\n\t\t\t0x38, 0xb4, 0x63, 0x8a,\n\t\t\t0x36, 0xb4, 0x7e, 0xb8,\n\t\t\t0x38, 0xb4, 0x8a, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0x7b,\n\t\t\t0x38, 0xb4, 0xb6, 0x8a,\n\t\t\t0x38, 0xb4, 0x8a, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0xd6,\n\t\t\t0xff, 0xff, 0xff, 0xff,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x38, 0xb4, 0xe4, 0x8a,\n\t\t\t0x38, 0xb4, 0x8a, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0xf2,\n\t\t\t0x38, 0xb4, 0x01, 0x8b,\n\t\t\t0x38, 0xb4, 0x8b, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0x0a,\n\t\t\t0x38, 0xb4, 0x10, 0x8b,\n\t\t\t0x38, 0xb4, 0x35, 0xad,\n\t\t\t0x38, 0xb4, 0xbf, 0x27,\n\t\t\t0x38, 0xb4, 0x08, 0x73,\n\t\t\t0x38, 0xb4, 0x7b, 0x02,\n\t\t\t0x38, 0xb4, 0xac, 0x07,\n\t\t\t0x38, 0xb4, 0x0d, 0x28,\n\t\t\t0x38, 0xb4, 0x73, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x0b,\n\t\t\t0x38, 0xb4, 0x07, 0x7b,\n\t\t\t0x38, 0xb4, 0x28, 0xac,\n\t\t\t0x38, 0xb4, 0xd0, 0x04,\n\t\t\t0x38, 0xb4, 0xae, 0x05,\n\t\t\t0x38, 0xb4, 0xd0, 0x02,\n\t\t\t0x38, 0xb4, 0xd1, 0x01,\n\t\t\t0x38, 0xb4, 0xd3, 0x01,\n\t\t\t0x38, 0xb4, 0xee, 0x04,\n\t\t\t0x38, 0xb4, 0x40, 0x86,\n\t\t\t0x38, 0xb4, 0xee, 0x00,\n\t\t\t0x38, 0xb4, 0x41, 0x86,\n\t\t\t0x38, 0xb4, 0xaf, 0x00,\n\t\t\t0x38, 0xb4, 0xa6, 0x6a,\n\t\t\t0x38, 0xb4, 0x00, 0xd1,\n\t\t\t0x38, 0xb4, 0x00, 0xd3,\n\t\t\t0x38, 0xb4, 0x86, 0xee,\n\t\t\t0x38, 0xb4, 0x01, 0x40,\n\t\t\t0x38, 0xb4, 0x86, 0xee,\n\t\t\t0x38, 0xb4, 0x24, 0x41,\n\t\t\t0x38, 0xb4, 0x0f, 0xd0,\n\t\t\t0x38, 0xb4, 0x6a, 0xaf,\n\t\t\t0x38, 0xb4, 0xbf, 0xa6,\n\t\t\t0x38, 0xb4, 0x9e, 0x73,\n\t\t\t0x38, 0xb4, 0x7b, 0x02,\n\t\t\t0x38, 0xb4, 0xad, 0x07,\n\t\t\t0x38, 0xb4, 0x0b, 0x28,\n\t\t\t0x38, 0xb4, 0x8f, 0xe1,\n\t\t\t0x38, 0xb4, 0xad, 0xfd,\n\t\t\t0x38, 0xb4, 0x05, 0x28,\n\t\t\t0x38, 0xb4, 0x8f, 0xe0,\n\t\t\t0x38, 0xb4, 0xae, 0xfe,\n\t\t\t0x38, 0xb4, 0xe0, 0x03,\n\t\t\t0x38, 0xb4, 0xff, 0x8f,\n\t\t\t0x38, 0xb4, 0x89, 0xe4,\n\t\t\t0x38, 0xb4, 0xe0, 0xe7,\n\t\t\t0x38, 0xb4, 0xe7, 0x89,\n\t\t\t0x38, 0xb4, 0x67, 0xaf,\n\t\t\t0x38, 0xb4, 0xa0, 0x9f,\n\t\t\t0x38, 0xb4, 0x02, 0x94,\n\t\t\t0x38, 0xb4, 0x03, 0xae,\n\t\t\t0x38, 0xb4, 0xb5, 0xa0,\n\t\t\t0x38, 0xb4, 0xaf, 0x03,\n\t\t\t0x38, 0xb4, 0x89, 0x0d,\n\t\t\t0x38, 0xb4, 0x0d, 0xaf,\n\t\t\t0x38, 0xb4, 0xa0, 0xaf,\n\t\t\t0x38, 0xb4, 0x02, 0x94,\n\t\t\t0x38, 0xb4, 0x03, 0xae,\n\t\t\t0x38, 0xb4, 0xb5, 0xa0,\n\t\t\t0x38, 0xb4, 0xaf, 0x03,\n\t\t\t0x38, 0xb4, 0x64, 0x0c,\n\t\t\t0x38, 0xb4, 0x0c, 0xaf,\n\t\t\t0x38, 0xb4, 0xe0, 0xcc,\n\t\t\t0x38, 0xb4, 0xa5, 0x86,\n\t\t\t0x38, 0xb4, 0x25, 0xad,\n\t\t\t0x38, 0xb4, 0x02, 0x06,\n\t\t\t0x38, 0xb4, 0xa4, 0x6b,\n\t\t\t0x38, 0xb4, 0x65, 0x02,\n\t\t\t0x38, 0xb4, 0xaf, 0x4f,\n\t\t\t0x38, 0xb4, 0x9a, 0x6e,\n\t\t\t0x38, 0xb4, 0x24, 0xac,\n\t\t\t0x38, 0xb4, 0xaf, 0x03,\n\t\t\t0x38, 0xb4, 0xb4, 0x6b,\n\t\t\t0x38, 0xb4, 0x6b, 0xaf,\n\t\t\t0x38, 0xb4, 0x02, 0xb6,\n\t\t\t0x38, 0xb4, 0xe8, 0x7a,\n\t\t\t0x38, 0xb4, 0x6c, 0xaf,\n\t\t\t0x38, 0xb4, 0x00, 0xa1,\n\t\t\t0x36, 0xb4, 0x5e, 0xb8,\n\t\t\t0x38, 0xb4, 0x7f, 0x6a,\n\t\t\t0x36, 0xb4, 0x60, 0xb8,\n\t\t\t0x38, 0xb4, 0x9c, 0x67,\n\t\t\t0x36, 0xb4, 0x62, 0xb8,\n\t\t\t0x38, 0xb4, 0x86, 0x0d,\n\t\t\t0x36, 0xb4, 0x64, 0xb8,\n\t\t\t0x38, 0xb4, 0x61, 0x0c,\n\t\t\t0x36, 0xb4, 0x86, 0xb8,\n\t\t\t0x38, 0xb4, 0x7c, 0x6e,\n\t\t\t0x36, 0xb4, 0x88, 0xb8,\n\t\t\t0x38, 0xb4, 0xae, 0x6b,\n\t\t\t0x36, 0xb4, 0x8a, 0xb8,\n\t\t\t0x38, 0xb4, 0x9b, 0x6c,\n\t\t\t0x36, 0xb4, 0x8c, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x38, 0xb8,\n\t\t\t0x38, 0xb4, 0x7f, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xb0,\n\t\t\t0x20, 0xb8, 0x10, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x29, 0x86,\n\t\t\t0x38, 0xb4, 0x86, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0x41,\n\t\t\t0x38, 0xb4, 0x44, 0x86,\n\t\t\t0x38, 0xb4, 0x88, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0x0c,\n\t\t\t0x38, 0xb4, 0x13, 0x88,\n\t\t\t0x38, 0xb4, 0x88, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0x4b,\n\t\t\t0x38, 0xb4, 0x4b, 0x88,\n\t\t\t0x38, 0xb4, 0x88, 0xaf,\n\t\t\t0x38, 0xb4, 0xaf, 0x4b,\n\t\t\t0x38, 0xb4, 0x4b, 0x88,\n\t\t\t0x38, 0xb4, 0x1d, 0xaf,\n\t\t\t0x38, 0xb4, 0x02, 0x8a,\n\t\t\t0x38, 0xb4, 0x4d, 0x86,\n\t\t\t0x38, 0xb4, 0x10, 0x02,\n\t\t\t0x38, 0xb4, 0xaf, 0x64,\n\t\t\t0x38, 0xb4, 0x63, 0x10,\n\t\t\t0x38, 0xb4, 0xfa, 0xf8,\n\t\t\t0x38, 0xb4, 0x69, 0xef,\n\t\t\t0x38, 0xb4, 0x80, 0xe0,\n\t\t\t0x38, 0xb4, 0xac, 0x4c,\n\t\t\t0x38, 0xb4, 0x17, 0x25,\n\t\t\t0x38, 0xb4, 0x80, 0xe0,\n\t\t\t0x38, 0xb4, 0xad, 0x40,\n\t\t\t0x38, 0xb4, 0x1a, 0x25,\n\t\t\t0x38, 0xb4, 0x86, 0x02,\n\t\t\t0x38, 0xb4, 0xe0, 0x7c,\n\t\t\t0x38, 0xb4, 0x40, 0x80,\n\t\t\t0x38, 0xb4, 0x25, 0xac,\n\t\t\t0x38, 0xb4, 0xbf, 0x11,\n\t\t\t0x38, 0xb4, 0xf4, 0x87,\n\t\t\t0x38, 0xb4, 0x77, 0x02,\n\t\t\t0x38, 0xb4, 0xae, 0xf6,\n\t\t\t0x38, 0xb4, 0x02, 0x09,\n\t\t\t0x38, 0xb4, 0xb3, 0x87,\n\t\t\t0x38, 0xb4, 0x87, 0x02,\n\t\t\t0x38, 0xb4, 0x02, 0xe9,\n\t\t\t0x38, 0xb4, 0xde, 0x87,\n\t\t\t0x38, 0xb4, 0x96, 0xef,\n\t\t\t0x38, 0xb4, 0xfc, 0xfe,\n\t\t\t0x38, 0xb4, 0xf8, 0x04,\n\t\t\t0x38, 0xb4, 0x80, 0xe0,\n\t\t\t0x38, 0xb4, 0xad, 0x18,\n\t\t\t0x38, 0xb4, 0x11, 0x26,\n\t\t\t0x38, 0xb4, 0x8f, 0xe0,\n\t\t\t0x38, 0xb4, 0xac, 0x9c,\n\t\t\t0x38, 0xb4, 0x05, 0x20,\n\t\t\t0x38, 0xb4, 0x86, 0x02,\n\t\t\t0x38, 0xb4, 0xae, 0x99,\n\t\t\t0x38, 0xb4, 0x02, 0x03,\n\t\t\t0x38, 0xb4, 0x07, 0x87,\n\t\t\t0x38, 0xb4, 0x87, 0x02,\n\t\t\t0x38, 0xb4, 0x02, 0x50,\n\t\t\t0x38, 0xb4, 0xde, 0x87,\n\t\t\t0x38, 0xb4, 0x04, 0xfc,\n\t\t\t0x38, 0xb4, 0xf9, 0xf8,\n\t\t\t0x38, 0xb4, 0x79, 0xef,\n\t\t\t0x38, 0xb4, 0xbf, 0xfb,\n\t\t\t0x38, 0xb4, 0xf7, 0x87,\n\t\t\t0x38, 0xb4, 0x78, 0x02,\n\t\t\t0x38, 0xb4, 0x5c, 0x38,\n\t\t\t0x38, 0xb4, 0x00, 0x20,\n\t\t\t0x38, 0xb4, 0x4d, 0x0d,\n\t\t\t0x38, 0xb4, 0x01, 0xa1,\n\t\t\t0x38, 0xb4, 0xbf, 0x51,\n\t\t\t0x38, 0xb4, 0xf7, 0x87,\n\t\t\t0x38, 0xb4, 0x78, 0x02,\n\t\t\t0x38, 0xb4, 0x5c, 0x38,\n\t\t\t0x38, 0xb4, 0xff, 0x07,\n\t\t\t0x38, 0xb4, 0x8f, 0xe3,\n\t\t\t0x38, 0xb4, 0x1b, 0x9d,\n\t\t\t0x38, 0xb4, 0x9f, 0x31,\n\t\t\t0x38, 0xb4, 0x0d, 0x41,\n\t\t\t0x38, 0xb4, 0xe3, 0x48,\n\t\t\t0x38, 0xb4, 0x9e, 0x8f,\n\t\t\t0x38, 0xb4, 0x31, 0x1b,\n\t\t\t0x38, 0xb4, 0x38, 0x9f,\n\t\t\t0x38, 0xb4, 0x87, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0xfa,\n\t\t\t0x38, 0xb4, 0x38, 0x78,\n\t\t\t0x38, 0xb4, 0x07, 0x5c,\n\t\t\t0x38, 0xb4, 0xe3, 0xff,\n\t\t\t0x38, 0xb4, 0x9f, 0x8f,\n\t\t\t0x38, 0xb4, 0x31, 0x1b,\n\t\t\t0x38, 0xb4, 0x28, 0x9f,\n\t\t\t0x38, 0xb4, 0x48, 0x0d,\n\t\t\t0x38, 0xb4, 0x8f, 0xe3,\n\t\t\t0x38, 0xb4, 0x1b, 0xa0,\n\t\t\t0x38, 0xb4, 0x9f, 0x31,\n\t\t\t0x38, 0xb4, 0xbf, 0x1f,\n\t\t\t0x38, 0xb4, 0xfd, 0x87,\n\t\t\t0x38, 0xb4, 0x78, 0x02,\n\t\t\t0x38, 0xb4, 0x5c, 0x38,\n\t\t\t0x38, 0xb4, 0xff, 0x07,\n\t\t\t0x38, 0xb4, 0x8f, 0xe3,\n\t\t\t0x38, 0xb4, 0x1b, 0xa1,\n\t\t\t0x38, 0xb4, 0x9f, 0x31,\n\t\t\t0x38, 0xb4, 0x0d, 0x0f,\n\t\t\t0x38, 0xb4, 0xe3, 0x48,\n\t\t\t0x38, 0xb4, 0xa2, 0x8f,\n\t\t\t0x38, 0xb4, 0x31, 0x1b,\n\t\t\t0x38, 0xb4, 0x06, 0x9f,\n\t\t\t0x38, 0xb4, 0x8f, 0xee,\n\t\t\t0x38, 0xb4, 0x01, 0x9c,\n\t\t\t0x38, 0xb4, 0x04, 0xae,\n\t\t\t0x38, 0xb4, 0x8f, 0xee,\n\t\t\t0x38, 0xb4, 0x00, 0x9c,\n\t\t\t0x38, 0xb4, 0xef, 0xff,\n\t\t\t0x38, 0xb4, 0xfd, 0x97,\n\t\t\t0x38, 0xb4, 0x04, 0xfc,\n\t\t\t0x38, 0xb4, 0xf9, 0xf8,\n\t\t\t0x38, 0xb4, 0x79, 0xef,\n\t\t\t0x38, 0xb4, 0xbf, 0xfb,\n\t\t\t0x38, 0xb4, 0xf7, 0x87,\n\t\t\t0x38, 0xb4, 0x78, 0x02,\n\t\t\t0x38, 0xb4, 0x5c, 0x38,\n\t\t\t0x38, 0xb4, 0x00, 0x20,\n\t\t\t0x38, 0xb4, 0x4d, 0x0d,\n\t\t\t0x38, 0xb4, 0x00, 0xa1,\n\t\t\t0x38, 0xb4, 0xbf, 0x20,\n\t\t\t0x38, 0xb4, 0xf7, 0x87,\n\t\t\t0x38, 0xb4, 0x78, 0x02,\n\t\t\t0x38, 0xb4, 0x5c, 0x38,\n\t\t\t0x38, 0xb4, 0x00, 0x06,\n\t\t\t0x38, 0xb4, 0x49, 0x0d,\n\t\t\t0x38, 0xb4, 0x8f, 0xe3,\n\t\t\t0x38, 0xb4, 0x1b, 0xa3,\n\t\t\t0x38, 0xb4, 0x9f, 0x31,\n\t\t\t0x38, 0xb4, 0xbf, 0x0e,\n\t\t\t0x38, 0xb4, 0x00, 0x88,\n\t\t\t0x38, 0xb4, 0x77, 0x02,\n\t\t\t0x38, 0xb4, 0xbf, 0xf6,\n\t\t\t0x38, 0xb4, 0x06, 0x88,\n\t\t\t0x38, 0xb4, 0x77, 0x02,\n\t\t\t0x38, 0xb4, 0xae, 0xf6,\n\t\t\t0x38, 0xb4, 0xbf, 0x0c,\n\t\t\t0x38, 0xb4, 0x00, 0x88,\n\t\t\t0x38, 0xb4, 0x77, 0x02,\n\t\t\t0x38, 0xb4, 0xbf, 0xed,\n\t\t\t0x38, 0xb4, 0x06, 0x88,\n\t\t\t0x38, 0xb4, 0x77, 0x02,\n\t\t\t0x38, 0xb4, 0xee, 0xed,\n\t\t\t0x38, 0xb4, 0x9c, 0x8f,\n\t\t\t0x38, 0xb4, 0xff, 0x00,\n\t\t\t0x38, 0xb4, 0x97, 0xef,\n\t\t\t0x38, 0xb4, 0xfc, 0xfd,\n\t\t\t0x38, 0xb4, 0xf8, 0x04,\n\t\t\t0x38, 0xb4, 0xef, 0xf9,\n\t\t\t0x38, 0xb4, 0xfb, 0x79,\n\t\t\t0x38, 0xb4, 0x87, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0xf7,\n\t\t\t0x38, 0xb4, 0x38, 0x78,\n\t\t\t0x38, 0xb4, 0x20, 0x5c,\n\t\t\t0x38, 0xb4, 0x0d, 0x00,\n\t\t\t0x38, 0xb4, 0xa1, 0x4d,\n\t\t\t0x38, 0xb4, 0x4a, 0x01,\n\t\t\t0x38, 0xb4, 0x87, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0xf7,\n\t\t\t0x38, 0xb4, 0x38, 0x78,\n\t\t\t0x38, 0xb4, 0x07, 0x5c,\n\t\t\t0x38, 0xb4, 0xe3, 0xff,\n\t\t\t0x38, 0xb4, 0xa4, 0x8f,\n\t\t\t0x38, 0xb4, 0x31, 0x1b,\n\t\t\t0x38, 0xb4, 0x3a, 0x9f,\n\t\t\t0x38, 0xb4, 0x48, 0x0d,\n\t\t\t0x38, 0xb4, 0x8f, 0xe3,\n\t\t\t0x38, 0xb4, 0x1b, 0xa5,\n\t\t\t0x38, 0xb4, 0x9f, 0x31,\n\t\t\t0x38, 0xb4, 0xbf, 0x31,\n\t\t\t0x38, 0xb4, 0xfa, 0x87,\n\t\t\t0x38, 0xb4, 0x78, 0x02,\n\t\t\t0x38, 0xb4, 0xe3, 0x38,\n\t\t\t0x38, 0xb4, 0xa6, 0x8f,\n\t\t\t0x38, 0xb4, 0x31, 0x1b,\n\t\t\t0x38, 0xb4, 0x24, 0x9f,\n\t\t\t0x38, 0xb4, 0x48, 0x0d,\n\t\t\t0x38, 0xb4, 0x8f, 0xe3,\n\t\t\t0x38, 0xb4, 0x1b, 0xa7,\n\t\t\t0x38, 0xb4, 0x9f, 0x31,\n\t\t\t0x38, 0xb4, 0xbf, 0x1b,\n\t\t\t0x38, 0xb4, 0xfd, 0x87,\n\t\t\t0x38, 0xb4, 0x78, 0x02,\n\t\t\t0x38, 0xb4, 0xe3, 0x38,\n\t\t\t0x38, 0xb4, 0xa8, 0x8f,\n\t\t\t0x38, 0xb4, 0x31, 0x1b,\n\t\t\t0x38, 0xb4, 0x0e, 0x9f,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x03,\n\t\t\t0x38, 0xb4, 0xf6, 0x77,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x09,\n\t\t\t0x38, 0xb4, 0xf6, 0x77,\n\t\t\t0x38, 0xb4, 0x00, 0xae,\n\t\t\t0x38, 0xb4, 0xef, 0xff,\n\t\t\t0x38, 0xb4, 0xfd, 0x97,\n\t\t\t0x38, 0xb4, 0x04, 0xfc,\n\t\t\t0x38, 0xb4, 0xef, 0xf8,\n\t\t\t0x38, 0xb4, 0xfb, 0x79,\n\t\t\t0x38, 0xb4, 0x80, 0xe0,\n\t\t\t0x38, 0xb4, 0xad, 0x18,\n\t\t\t0x38, 0xb4, 0x1c, 0x26,\n\t\t\t0x38, 0xb4, 0x8f, 0xee,\n\t\t\t0x38, 0xb4, 0x00, 0x9c,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x00,\n\t\t\t0x38, 0xb4, 0xed, 0x77,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x06,\n\t\t\t0x38, 0xb4, 0xed, 0x77,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x03,\n\t\t\t0x38, 0xb4, 0xed, 0x77,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x09,\n\t\t\t0x38, 0xb4, 0xed, 0x77,\n\t\t\t0x38, 0xb4, 0xef, 0xff,\n\t\t\t0x38, 0xb4, 0xfc, 0x97,\n\t\t\t0x38, 0xb4, 0xf8, 0x04,\n\t\t\t0x38, 0xb4, 0x80, 0xe0,\n\t\t\t0x38, 0xb4, 0xf6, 0x40,\n\t\t\t0x38, 0xb4, 0xe4, 0x25,\n\t\t\t0x38, 0xb4, 0x40, 0x80,\n\t\t\t0x38, 0xb4, 0x04, 0xfc,\n\t\t\t0x38, 0xb4, 0xe0, 0xf8,\n\t\t\t0x38, 0xb4, 0x4c, 0x80,\n\t\t\t0x38, 0xb4, 0x25, 0xf6,\n\t\t\t0x38, 0xb4, 0x80, 0xe4,\n\t\t\t0x38, 0xb4, 0xfc, 0x4c,\n\t\t\t0x38, 0xb4, 0x55, 0x04,\n\t\t\t0x38, 0xb4, 0xba, 0xa4,\n\t\t\t0x38, 0xb4, 0xa6, 0xf0,\n\t\t\t0x38, 0xb4, 0xf0, 0x4a,\n\t\t\t0x38, 0xb4, 0x4c, 0xa6,\n\t\t\t0x38, 0xb4, 0xa6, 0xf0,\n\t\t\t0x38, 0xb4, 0x66, 0x4e,\n\t\t\t0x38, 0xb4, 0xb6, 0xa4,\n\t\t\t0x38, 0xb4, 0xa4, 0x55,\n\t\t\t0x38, 0xb4, 0x00, 0xb6,\n\t\t\t0x38, 0xb4, 0x56, 0xac,\n\t\t\t0x38, 0xb4, 0xac, 0x11,\n\t\t\t0x38, 0xb4, 0xee, 0x56,\n\t\t\t0x38, 0xb4, 0x4c, 0x80,\n\t\t\t0x38, 0xb4, 0xaf, 0x3a,\n\t\t\t0x38, 0xb4, 0x27, 0x06,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x48,\n\t\t\t0x38, 0xb4, 0xed, 0x77,\n\t\t\t0x38, 0xb4, 0x03, 0xd2,\n\t\t\t0x38, 0xb4, 0x83, 0xe0,\n\t\t\t0x38, 0xb4, 0x0d, 0x8a,\n\t\t\t0x38, 0xb4, 0xf6, 0x01,\n\t\t\t0x38, 0xb4, 0x1b, 0x27,\n\t\t\t0x38, 0xb4, 0xaa, 0x03,\n\t\t\t0x38, 0xb4, 0x82, 0x01,\n\t\t\t0x38, 0xb4, 0x83, 0xe0,\n\t\t\t0x38, 0xb4, 0x0d, 0x89,\n\t\t\t0x38, 0xb4, 0xf6, 0x01,\n\t\t\t0x38, 0xb4, 0x1b, 0x27,\n\t\t\t0x38, 0xb4, 0xaa, 0x03,\n\t\t\t0x38, 0xb4, 0x82, 0x01,\n\t\t\t0x38, 0xb4, 0x83, 0xe0,\n\t\t\t0x38, 0xb4, 0x0d, 0x88,\n\t\t\t0x38, 0xb4, 0xf6, 0x01,\n\t\t\t0x38, 0xb4, 0x1b, 0x27,\n\t\t\t0x38, 0xb4, 0xaa, 0x03,\n\t\t\t0x38, 0xb4, 0x82, 0x07,\n\t\t\t0x38, 0xb4, 0x88, 0xbf,\n\t\t\t0x38, 0xb4, 0x02, 0x48,\n\t\t\t0x38, 0xb4, 0xf6, 0x77,\n\t\t\t0x38, 0xb4, 0x16, 0xaf,\n\t\t\t0x38, 0xb4, 0x00, 0x15,\n\t\t\t0x38, 0xb4, 0x6a, 0xa8,\n\t\t\t0x36, 0xb4, 0x18, 0xb8,\n\t\t\t0x38, 0xb4, 0x84, 0x1d,\n\t\t\t0x36, 0xb4, 0x1a, 0xb8,\n\t\t\t0x38, 0xb4, 0x60, 0x10,\n\t\t\t0x36, 0xb4, 0x1c, 0xb8,\n\t\t\t0x38, 0xb4, 0x23, 0x06,\n\t\t\t0x36, 0xb4, 0x1e, 0xb8,\n\t\t\t0x38, 0xb4, 0xef, 0x15,\n\t\t\t0x36, 0xb4, 0x50, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x52, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x78, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x84, 0xb8,\n\t\t\t0x38, 0xb4, 0xff, 0xff,\n\t\t\t0x36, 0xb4, 0x32, 0xb8,\n\t\t\t0x38, 0xb4, 0x0f, 0x00,\n\t\t\t0x36, 0xb4, 0x00, 0x00,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xb0,\n\t\t\t0x2e, 0xb8, 0x00, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xa0,\n\t\t\t0x36, 0xb4, 0x23, 0x80,\n\t\t\t0x38, 0xb4, 0x00, 0x00,\n\t\t\t0x6c, 0xe8, 0x00, 0xb0,\n\t\t\t0x20, 0xb8, 0x00, 0x00,\n\t\t\t0xff, 0xff, 0xff, 0xff};\n\n\t\tcode_ver = 0x0013;\n\t\tret = sram_read(tp, SRAM_GPHY_FW_VER, &fw_version);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tif (fw_version < code_ver) {\n\t\t\tdata = ram17;\n\t\t\tlen = sizeof(ram17);\n\n\t\t\tif (r8156b_flash_used(tp)) {\n\t\t\t\tret = ocp_word_set_bits(tp, MCU_TYPE_USB,\n\t\t\t\t\t\t\tUSB_GPHY_CTRL,\n\t\t\t\t\t\t\tBYPASS_FLASH);\n\t\t\t\tif (ret < 0)\n\t\t\t\t\tgoto out;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!data)\n\t\treturn 0;\n\n\tret = rtl_phy_patch_request(tp, true, wait);\n\tif (ret < 0)\n\t\tgoto out;\n\n\twhile (len) {\n\t\tu32 size;\n\t\tint i;\n\n\t\tif (len < 2048)\n\t\t\tsize = len;\n\t\telse\n\t\t\tsize = 2048;\n\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_USB, USB_GPHY_CTRL,\n\t\t\t\t\tGPHY_PATCH_DONE | BACKUP_RESTRORE);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tret = generic_ocp_write(tp, 0x9A00, 0xff, size, data,\n\t\t\t\t\tMCU_TYPE_USB);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tdata += size;\n\t\tlen -= size;\n\n\t\tret = ocp_word_set_bits(tp, MCU_TYPE_PLA, PLA_POL_GPIO_CTRL,\n\t\t\t\t\tPOL_GPHY_PATCH);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\n\t\tfor (i = 0; i < 1000; i++) {\n\t\t\tret = ocp_read_word(tp, MCU_TYPE_PLA, PLA_POL_GPIO_CTRL,\n\t\t\t\t\t    &ocp_data);\n\t\t\tif (ret < 0)\n\t\t\t\tgoto out;\n\n\t\t\tif (!(ocp_data & POL_GPHY_PATCH))\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (i == 1000) {\n\t\t\tdev_err(&tp->intf->dev,\n\t\t\t\t\"ram code speedup mode timeout\\n\");\n\t\t\tret = -ETIMEDOUT;\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\trtl_reset_ocp_base(tp);\n\n\tret = rtl_phy_patch_request(tp, false, wait);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (sram_read(tp, SRAM_GPHY_FW_VER, &fw_version) < 0)\n\t\tgoto out;\n\telse if (fw_version != code_ver)\n\t\tdev_err(&tp->intf->dev, \"ram code version is wrong %04x(%04x\\n\",\n\t\t\tfw_version, code_ver);\n\nout:\n\tif (ret < 0)\n\t\tdev_err(&tp->intf->dev, \"ram code speedup mode fail %d\\n\", ret);\n\n\trtl_reset_ocp_base(tp);\n\n\treturn ret;\n}\n\nstatic void r8156_ram_code(struct r8152 *tp, bool power_cut)\n{\n\trtl_reset_ocp_base(tp);\n\n\tif (tp->version == RTL_VER_10) {\n\t\trtl_pre_ram_code(tp, 0x8024, 0x8600, !power_cut);\n\n\t\tocp_reg_set_bits(tp, OCP_PHY_PATCH_CMD, BIT(7));\n\n\t\t/* nc0_patch_180504_usb */\n\t\tsram_write(tp, 0xA016, 0x0000);\n\t\tsram_write(tp, 0xA012, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_ADDR, 0xA014);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8013);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8021);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x802f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x803d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8042);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8051);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8051);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa088);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0a50);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8008);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd014);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1a3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x401a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd707);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x40c2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60a6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5f8b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0a86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0a6c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8080);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd019);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd1a2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x401a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd707);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x40c4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60a6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5f8b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0a86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0a84);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd503);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8970);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c07);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0901);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcf09);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd705);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xceff);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf0a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd504);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1213);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8401);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8580);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1253);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd064);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd181);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd704);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4018);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd504);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc50f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd706);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2c59);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x804d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc60f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf002);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc605);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xae02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x10fd);\n\t\tsram_write(tp, 0xA026, 0xffff);\n\t\tsram_write(tp, 0xA024, 0xffff);\n\t\tsram_write(tp, 0xA022, 0x10f4);\n\t\tsram_write(tp, 0xA020, 0x1252);\n\t\tsram_write(tp, 0xA006, 0x1206);\n\t\tsram_write(tp, 0xA004, 0x0a78);\n\t\tsram_write(tp, 0xA002, 0x0a60);\n\t\tsram_write(tp, 0xA000, 0x0a4f);\n\t\tsram_write(tp, 0xA008, 0x3f00);\n\n\t\t/* nc1_patch_180423_cml_usb */\n\t\tsram_write(tp, 0xA016, 0x0010);\n\t\tsram_write(tp, 0xA012, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_ADDR, 0xA014);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8066);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x807c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8089);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x808e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80a0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80b2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80c2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x62db);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x655c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd73e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60e9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x614a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x61ab);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0503);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0505);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0509);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x653c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd73e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60e9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x614a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x61ab);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0503);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0502);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0506);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x050a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd73e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60e9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x614a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x61ab);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0505);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0506);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0504);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x050c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd73e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60e9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x614a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x61ab);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0509);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x050a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x050c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0508);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0304);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd73e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60e9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x614a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x61ab);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0321);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0502);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0321);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0504);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0321);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0508);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0321);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0346);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8208);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x609d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa50f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x001a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0503);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x001a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x607d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00ab);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x00ab);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60fd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa50f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaa0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x017b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0503);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0a05);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x017b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60fd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa50f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaa0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x01e0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0503);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0a05);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x01e0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60fd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa50f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaa0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0231);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0503);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0a05);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0231);\n\t\tsram_write(tp, 0xA08E, 0xffff);\n\t\tsram_write(tp, 0xA08C, 0x0221);\n\t\tsram_write(tp, 0xA08A, 0x01ce);\n\t\tsram_write(tp, 0xA088, 0x0169);\n\t\tsram_write(tp, 0xA086, 0x00a6);\n\t\tsram_write(tp, 0xA084, 0x000d);\n\t\tsram_write(tp, 0xA082, 0x0308);\n\t\tsram_write(tp, 0xA080, 0x029f);\n\t\tsram_write(tp, 0xA090, 0x007f);\n\n\t\t/* nc2_patch_180508_usb */\n\t\tsram_write(tp, 0xA016, 0x0020);\n\t\tsram_write(tp, 0xA012, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_ADDR, 0xA014);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8017);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x801b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8029);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8054);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x805a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8064);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80a7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9430);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9480);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb408);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd120);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd057);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x064b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcb80);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9906);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0567);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcb94);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8190);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x82a0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x800a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8406);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa740);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8dff);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x07e4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa840);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0773);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcb91);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4063);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd139);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf002);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd140);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd040);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb404);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x07dc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa610);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa110);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa2a0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa404);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd704);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4045);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa180);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd704);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x405d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa720);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0742);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x07ec);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5f74);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0742);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd702);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7fb6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8190);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x82a0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8404);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8610);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c0f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x07dc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x064b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x07c0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5fa7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0481);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x94bc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x870c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa190);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa00a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa280);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa404);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8220);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x078e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xcb92);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa840);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4063);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd140);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf002);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd150);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd040);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd703);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x60a0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6121);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x61a2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6223);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf02f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0cf0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d10);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa740);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf00f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0cf0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d20);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa740);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf00a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0cf0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d30);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa740);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf005);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0cf0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d40);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa740);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x07e4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa610);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa008);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd704);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4046);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa002);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd704);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x405d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa720);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0742);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x07f7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd700);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5f74);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0742);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd702);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7fb5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x800a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0cf0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x07e4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa740);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd701);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3ad4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0537);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8610);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8840);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x064b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8301);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x800a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8190);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x82a0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8404);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa70c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9402);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x890c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8840);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x064b);\n\t\tsram_write(tp, 0xA10E, 0x0642);\n\t\tsram_write(tp, 0xA10C, 0x0686);\n\t\tsram_write(tp, 0xA10A, 0x0788);\n\t\tsram_write(tp, 0xA108, 0x047b);\n\t\tsram_write(tp, 0xA106, 0x065c);\n\t\tsram_write(tp, 0xA104, 0x0769);\n\t\tsram_write(tp, 0xA102, 0x0565);\n\t\tsram_write(tp, 0xA100, 0x06f9);\n\t\tsram_write(tp, 0xA110, 0x00ff);\n\n\t\t/* uc2_patch_180507_usb */\n\t\tsram_write(tp, 0xb87c, 0x8530);\n\t\tocp_reg_write(tp, OCP_SRAM_ADDR, 0xb87e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf85);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3caf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8593);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf85);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9caf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x85a5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd702);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5afb);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe083);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfb0c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x020d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x021b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x10bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86d7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86da);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfbe0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x83fc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1b10);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xda02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xdd02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5afb);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe083);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfd0c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x020d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x021b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x10bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86dd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86e0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfbe0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x83fe);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0c02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0d02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1b10);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xe002);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf2f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbd02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2cac);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0286);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x65af);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x212b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x022c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6002);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86b6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf21);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0cd1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x03bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8710);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x870d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8719);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8716);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x871f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x871c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8728);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8725);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8707);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfbad);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x281c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd100);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0a02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1302);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2202);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2b02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xae1a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd101);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0a02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1302);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2202);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2b02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd101);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3402);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3102);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3d02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3a02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4302);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4002);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4c02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4902);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd100);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2e02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x3702);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4602);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf87);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4f02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5ab7);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xaf35);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7ff8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfaef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x69bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86e3);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfbbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86fb);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86e6);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfbbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86fe);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86e9);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfbbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8701);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86ec);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfbbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8704);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x025a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb7bf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86ef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0262);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7cbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86f2);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0262);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7cbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86f5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0262);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7cbf);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x86f8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0262);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x7cef);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x96fe);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfc04);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf8fa);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef69);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef02);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6273);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf202);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6273);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf502);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6273);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbf86);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf802);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x6273);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xef96);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xfefc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x0420);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb540);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x53b5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4086);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb540);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb9b5);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x40c8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb03a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc8b0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbac8);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb13a);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc8b1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xba77);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbd26);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xffbd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2677);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbd28);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xffbd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2840);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbd26);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc8bd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x2640);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbd28);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xc8bd);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x28bb);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa430);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x98b0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1eba);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb01e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xdcb0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1e98);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb09e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbab0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9edc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb09e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x98b1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1eba);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb11e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xdcb1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1e98);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb19e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xbab1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9edc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb19e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x11b0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1e22);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb01e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x33b0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1e11);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb09e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x22b0);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9e33);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb09e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x11b1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1e22);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb11e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x33b1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1e11);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb19e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x22b1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x9e33);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xb19e);\n\t\tsram_write(tp, 0xb85e, 0x2f71);\n\t\tsram_write(tp, 0xb860, 0x20d9);\n\t\tsram_write(tp, 0xb862, 0x2109);\n\t\tsram_write(tp, 0xb864, 0x34e7);\n\t\tsram_write(tp, 0xb878, 0x000f);\n\n\t\tocp_reg_clr_bits(tp, OCP_PHY_PATCH_CMD, BIT(7));\n\n\t\trtl_post_ram_code(tp, 0x8024, !power_cut);\n\t} else if (tp->version == RTL_VER_11) {\n\t\trtl_pre_ram_code(tp, 0x8024, 0x8601, !power_cut);\n\n\t\tocp_reg_set_bits(tp, OCP_PHY_PATCH_CMD, BIT(7));\n\n\t\t/* nc_patch */\n\t\tsram_write(tp, 0xA016, 0x0000);\n\t\tsram_write(tp, 0xA012, 0x0000);\n\t\tocp_reg_write(tp, OCP_SRAM_ADDR, 0xA014);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8010);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x808b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x808f);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8093);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x8097);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x809d);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80a1);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1800);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x80aa);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd718);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x607b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x40da);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf00e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x42da);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf01e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd718);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x615b);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1456);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x14a4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x14bc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd718);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5f2e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf01c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1456);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x14a4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x14bc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd718);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5f2e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf024);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1456);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x14a4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x14bc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd718);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5f2e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf02c);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1456);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x14a4);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x1000);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x14bc);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd718);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x5f2e);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xf034);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd719);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4118);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd504);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xac11);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd501);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce01);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xa410);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xce00);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd500);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0x4779);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xd504);\n\t\tocp_reg_write(tp, OCP_SRAM_DATA, 0xac0f);\n\t\tocp_reg_write(tp"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 8.212890625,
          "content": "# DSM driver for realtek RTL8152/RTL8153/RTL8156/RTL8157 based USB Ethernet adapters\n\nThis is a Realtek USB ethernet driver package for Synology NASes.\n\n* RTL8152/RTL8153: 1.0Gbps\n* RTL8156: 2.5Gbps\n* RTL8157: 5Gbps\n\nYou may also be interested in my other projects:\n* [AQC111U(5Gbps ethernet) driver package for Synology NASes](https://github.com/bb-qq/aqc111)\n* [UASP(USB Attached SCSI Protocol for external storage devices) driver package for Synology NASes](https://github.com/bb-qq/uas)\n\n## ⚠️**WARNING**\n\nIt has been confirmed that this driver has been modified and reprinted on other sites.\n\nSince this driver works with root privileges, **DO NOT USE IT OBTAINED FROM OTHER SITES**.\n\n## Supported NAS platform\n\n* DSM 7.x and 6.2\n* Almost all models released after 2017\n  * Older models also work, but you may not have enough performance.\n  * [Compatibility reports](https://github.com/bb-qq/r8152/wiki/Compatibility) by the community will help you.\n\nYou can download drivers from the [release page](https://github.com/bb-qq/r8152/releases) and determine a proper driver for your model from [knowledge base of Synology](https://www.synology.com/en-global/knowledgebase/DSM/tutorial/Compatibility_Peripherals/What_kind_of_CPU_does_my_NAS_have), \n\nI would appreciate it if you could let me know whether it works. If you have any problems, the [Troubleshooting](https://github.com/bb-qq/r8152/wiki/Troubleshooting) page may help.\n\n***NOTE***: I recommend connecting devices using front ports because some users have reported stability issues when using rear ports.\n\n### Author's environment\n\nThe author uses the following environments daily and it has confirmed that these devices work stably.\n\n*Disclaimer*: The following product links are affiliate links. If you purchase them, I might earn a small commission at no extra cost to you.\n\n* NAS\n  * DS918+ (apollolake) with 16GB RAM\n  * DSM 7.2-64570 Update 3\n  * Ethernet dongle\n    * USB-LAN2500R2 (RTL8156BG, only in Japan.)\n* PC\n  * Ethernet card\n    * [AQN-107](https://amzn.to/3RNLg7u) (discontinued, but almost equivalent to [ASUS XG-C100C](https://amzn.to/3fPJUX3))\n  * Windows10 SMB3\n* Network switches\n  * main: [QNAP QSW-2104-2T](https://amzn.to/3Sam3W0) (Broadcom `BCM53161`: x3 2.5Gbe / x2 10Gbe)\n  * sub: [keepLINK 5 Port 2.5G Switch](https://amzn.to/41PHpv6) (Realtek `RTL8372`: x5 2.5Gbe / x1 10G SFP+)\n    * If you are looking for an affordable 2.5Gbe switch, I recommend products using the RTL837x family, which is a newer generation of chips and consumes less power. Many other products are available from many vendors.\n  * cable: [Ubiquiti Networks UC-PATCH Cat6 Cable](https://amzn.to/3Xyybla)\n\n## Supported devices\n\nSee the [Compatibility page](https://github.com/bb-qq/r8152/wiki/Compatibility) for the latest information.\n\n* If you have other products not listed and it does not work, please create an issue with the output of lsusb.\n* If you use a product with a Type-C connector, you will need a connector or cable to convert it to Type-A.\n  * For stable device operation, I recommend using a USB 3.2gen2 10Gbps compatible cable.\n  * A 5Gbps cable is sufficient for this driver to work, but a 10Gbps capable cable can be expected to have higher transmission quality.\n\n### RTL8156(2.5Gbps) based devices\n\n**INFO**: Products using RTL8156**BG** have dramatically lower power consumption(up to 64% decrease) and heat generation than those using RTL8156.\n\n* [ASUSTOR AS-U2.5G](https://amzn.to/2ZRx1pi) (RTL8156/Type-C to A)\n  * NOTE: The included Type A-C conversion adapter is directional. There is a mark on one side of the USB-C connector that must be on the same side as the USB logo on the adapter.\n* [ASUSTOR AS-U2.5G2](https://amzn.to/3u5wUH4) (RTL8156B/Type-C to A)\n  * NOTE: Same above.\n* [CLUB 3D CAC-1420](https://amzn.to/2ZPmzKD) (RTL8156/Type-A)\n* [TRENDnet TUC-ET2G](https://amzn.to/2PLmR5v) (RTL8156(V1.0)/RTL8156BG(V2.0)/Type-C)\n  * NOTE: Customer support states that RTL8156BG was adopted in V2.0. However, there is no way to distinguish V1.0 from V2.0. Can we expect the new ones to be v2.0? \n* [ASUS USB-C2500](https://amzn.to/45TS6Nv) (RTL8156B/Type-A)\n* [CableCreation 2.5G Ethernet to USB Adapter](https://amzn.to/39yfZyj) (RTL8156/Type-A)\n* [UGREEN USB C to 2.5G Ethernet Adapter (2019)](https://amzn.to/3fzXmfE) (RTL8156/Type-C)\n* [UGREEN USB C to Ethernet Adapter 2.5G (2023)](https://amzn.to/3QHSElc) (RTL8156BG/Type-C)\n* [Anker USB C to 2.5 Gbps Ethernet Adapter](https://amzn.to/3QK7qrZ) (RTL8156/Type-C)\n* [StarTech.com US2GC30](https://amzn.to/46XTsYX) (RTL8156BG/Type-C)\n* [Plannex USB-LAN2500R](https://amzn.to/2ZISyAb) (RTL8156/Type-A, only in Japan.)\n* [Plannex USB-LAN2500R2](https://amzn.to/47c14GU) (RTL8156BG/Type-A, only in Japan.)\n* [Buffalo LUA-U3-A2G](https://amzn.to/36kGQf9) (RTL8156/Type-A, only in Japan.)\n* biaze KZ13 \\[ [link1](https://alexnld.com/product/biaze-kz13-usb-external-2-5g-network-adapter-usb-to-rj45-converter-rj45-network-port-hub-usb-gigabit-wired-network-card-for-macbook-surface-lenovo-asus-computers/) [link2](https://digitalzakka.com/product/biaze-kz13-2-5g-usb-external-network-adapter-rj45-converter-hub-gigabit-wired-network-card/) \\] (Type-A, only in China)\n* [ULT-WIIQ USB 2.5G Ethernet Adapter](https://amzn.to/3HfEW3G) (RTL8156B/Type-A, only in Europe?)\n\n### RTL8157(5Gbps) based devices\n\nIf you find other products, I would appreciate it if you could let me know.\n\n* WisdPi WP-UT5 \\[ [Amazon](https://amzn.to/3TA3RWh) [AliExpress](https://s.click.aliexpress.com/e/_DDQpNWZ) \\] (RTL8157/Type-A and C)\n* [WAVLINK/WiNSTARS WS-NWU340G](https://amzn.to/3MVG5QF) (RTL8157/Type-C)\n\n**KNOWN ISSUES**:\n* Link speeds are not reported correctly.\n* Using [the beta release driver](https://github.com/bb-qq/r8152/releases/tag/2.18.1-2) is required to enable Jumbo Frame.\n\n## How to install\n\n### Preparation\n\n[Enable SSH](https://www.synology.com/en-us/knowledgebase/DSM/tutorial/General_Setup/How_to_login_to_DSM_with_root_permission_via_SSH_Telnet) and login to your NAS.\n\n### Installation\n\n1. Go to \"Package Center\"\n2. Press \"Manual Install\"\n3. Choose a driver package downloaded from the [release page](https://github.com/bb-qq/r8152/releases).\n4. [DSM7] The installation will fail the first time. After that, run the following command from the SSH terminal:\n   * `sudo install -m 4755 -o root -D /var/packages/r8152/target/r8152/spk_su /opt/sbin/spk_su`\n   * `sudo chmod a+rx /opt /opt/sbin`\n5. [DSM7] Retry installation. \n   * You don't need the above DSM7-specific steps at the next time.\n6. Reboot your NAS.\n   * This procedure is not usually necessary, but many have reported that a reboot was necessary, so please reboot just in case.\n7. Open the driver package from the Package Center and start the driver manually.\n\nhttps://www.synology.com/en-us/knowledgebase/SRM/help/SRM/PkgManApp/install_buy\n\n*Warning*: Do not use Safari for this operation.\n\n## How to configure\n\nYou can configure the IP addresses and MTU of the added NICs from the DSM UI in the same way as the built-in NICs.\n\nOption: I recommend setting MTU to 9000 and SMB protocol version to v3 for better performance.\n\n## Performance test\n\n### Environment\n* DS918+ (USB-LAN2500R)\n* DSM 6.2\n* direct connection with PC (AQN-107: discontinued, but almost equivalent to [ASUS XG-C100C](https://amzn.to/3fPJUX3))\n* [native iperf3](http://www.jadahl.com/iperf-arp-scan/DSM_6.2/)\n    * using docker causes high CPU load\n\n### Result\n````\nConnecting to host 192.168.0.xxx, port 5201\n[  4] local 192.168.0.xxx port 50366 connected to 192.168.0.xxx port 5201\n[ ID] Interval           Transfer     Bandwidth\n[  4]   0.00-1.00   sec   266 MBytes  2.23 Gbits/sec\n[  4]   1.00-2.00   sec   274 MBytes  2.30 Gbits/sec\n[  4]   2.00-3.00   sec   278 MBytes  2.33 Gbits/sec\n[  4]   3.00-4.00   sec   278 MBytes  2.33 Gbits/sec\n[  4]   4.00-5.00   sec   278 MBytes  2.33 Gbits/sec\n[  4]   5.00-6.00   sec   278 MBytes  2.34 Gbits/sec\n[  4]   6.00-7.00   sec   274 MBytes  2.30 Gbits/sec\n[  4]   7.00-8.00   sec   267 MBytes  2.24 Gbits/sec\n[  4]   8.00-9.00   sec   269 MBytes  2.26 Gbits/sec\n[  4]   9.00-10.00  sec   271 MBytes  2.27 Gbits/sec\n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bandwidth\n[  4]   0.00-10.00  sec  2.67 GBytes  2.29 Gbits/sec                  sender\n[  4]   0.00-10.00  sec  2.67 GBytes  2.29 Gbits/sec                  receiver\n\niperf Done.\n````\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "spk_su.c",
          "type": "blob",
          "size": 0.6796875,
          "content": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <unistd.h>\n\nint main(int argc, char ** const argv) {\n\tif (argc < 2) {\n        fprintf(stderr, \"Usage: %s <package name>\\n\", argv[0]);\n        return 1;\n    }\n    const char* name = argv[1];\n    for (const char* s = name; *s != '\\0'; ++s) {\n        if (!isalpha(*s) && !isdigit(*s)) {\n            fprintf(stderr, \"Invalid package name: %s\\n\", name);\n            return 2;\n        }\n    }\n\n    char buffer[1024] = {};\n    snprintf(buffer, sizeof(buffer), \"/bin/sed -i 's/package/root/g' /var/packages/%s/conf/privilege\", name);\n    if (setuid(0) != 0){\n        perror(\"Error\");\n        exit(127);\n    }\n    return system(buffer);\n}"
        }
      ]
    }
  ]
}