{
  "metadata": {
    "timestamp": 1736709771844,
    "page": 213,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "emojicode/emojicode",
      "stars": 3312,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.029296875,
          "content": ".git\nbuild/\nLICENSE\nREADME.md\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.037109375,
          "content": "docker/* linguist-language=Dockerfile\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.609375,
          "content": "## Build generated\nbuild/\nDerivedData\n\n## Various settings\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n\n## Other\n*.xccheckout\n*.moved-aside\n*.xcuserstate\n\n\n# OS X\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n__pycache__\n.idea\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.326171875,
          "content": "language: cpp\n\nmatrix:\n  include:\n    - os: linux\n      dist: bionic\n      compiler: clang\n    - os: linux\n      dist: bionic\n      compiler: gcc\n    - os: osx\n      osx_image: xcode13.1\n      compiler: clang\n\ndeploy:\n  provider: releases\n  api_key:\n    secure: \"T9pOxkNsm3cvyUq7tw+uwf4b+6nlDbsYj5Khl9BVUlPJ75q2hfuk6sHe4HaDkJeIgb/ScCNvBNfBOyQXWMfxbne32wMIjRWhemDYppIcHXdbmIb9mBaTmqBFR+EINQES22yM0sfjoKT8isLulKqHO7Yt2qcpdCFmBYgxKUt1+uhSCQtheNHR87BrtY63gJSHdAjq550GDwQR3cTMnMOopqaOzMHO5mTPH7EDF3zCGdt/1sJDfV07p4i/VP5lYQsclDmYTuWcbZ/rP8MO/UiKnJVfvKrW0oyzGeyhWBE5KiOfe9LFcD6yUiPBBGKXHsp44Etw0S4iTgLytsGIGm0efq8nMTldPEOPnUM8g0/+230ELfhQZkMDzyMKZwRNGpENMpDWJhccCaYI5wlI1ugKAga5DusqLVNj4lG+H75ca5BCyTR+cnj2ZgUoDaiJQ6VkbNG6RP7v1yH7rZlUKiP6d6MIDDnJexF6JvZLXaX21FuLHR2qm6Lqwmlkb16TEnJDsRF7I37IqsQXNmEksT4AeUHm1PxbFjWm8BZoYhIQlHC5dAQOftCufns1qhbvqn0xLlHREYgIoxKnmi+RmvXz+GShG6PbIuCpsDE49/fCoMd8sCMGt01icj9lEQXY6B13QvBAJ3WB10IAM9IkXmSZ8YoKfZosT1hBbNrL7AoPrS0=\"\n  skip_cleanup: true\n  on:\n    tags: true\n    condition: $CC == clang* || \"$TRAVIS_OS_NAME\" == \"osx\"\n  draft: true\n\n  file:\n  - $EMOJICODE_DIST_ARCHIVE\n\naddons:\n  homebrew:\n    packages:\n    - llvm@8\n    - ninja\n    update: true\n\nbefore_install:\n- source .travis/install.sh\n\nscript:\n- mkdir build && cd build && cmake .. -GNinja && ninja && ninja tests && EMOJICODE_DIST_ARCHIVE=$(python3 ../dist.py archive)\n"
        },
        {
          "name": ".travis",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.8486328125,
          "content": "cmake_minimum_required(VERSION 3.5)\nproject(Emojicode)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_C_STANDARD 11)\n\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_C_EXTENSIONS OFF)\n\nset(CMAKE_CXX_FLAGS_DEBUG \"-O0 -g\")\nset(CMAKE_CXX_FLAGS_RELEASE \"-Ofast\")\n\nadd_compile_options(-pedantic-errors)\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-fcolor-diagnostics)\nendif()\n\nif(defaultPackagesDirectory)\n  add_definitions(-DdefaultPackagesDirectory=\"${defaultPackagesDirectory}\")\nendif()\n\nadd_subdirectory(runtime)\nadd_subdirectory(s)\nadd_subdirectory(files)\nadd_subdirectory(Compiler)\nadd_subdirectory(sockets)\nadd_subdirectory(testtube)\nadd_subdirectory(json)\n\nadd_custom_target(dist python3 ${PROJECT_SOURCE_DIR}/dist.py)\nadd_custom_target(tests python3 ${PROJECT_SOURCE_DIR}/tests.py)\nadd_custom_target(magicinstall python3 ${PROJECT_SOURCE_DIR}/dist.py install)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6337890625,
          "content": "# Contributing\n\nYou want to improve Emojicode? That's awesome! Before you start, we would like to tell you a few things.\n\nWe hope that these guidelines make Emojicode's development as fun as possible for everyone. By following these, you ensure that your and our time is not wasted and we can incorporate your contribution quickly and smoothly.\n\n## Helpful Contributions\n\nSince Emojicode is a rather complex programming language, we need to coordinate and discuss changes to language or any of its default packages. If you want to make a **change to the language or the s package**, we would like to ask you to **open an issue first**, so we can make sure your plans fit Emojicode on the long-term.\n\n## Your First Contribution\n\nContributing is as easy as\n\n1. Create your own fork of Emojicode.\n2. Make changes and test your changes.\n3. Send a pull request.\n\n## Some Rules about New Code\n\n- All code should be platform independent and in conformance with ISO C++14.\n- Before submitting any pull request, make sure all tests pass. If you add a feature, add tests too.\n- Try to follow the coding style established in the file you're editing.\n\n## Commit message\n\nIt's a convention that every commit message begins with an emoji. This emojis doesn't have to have any deeper meaning, we just want Emojicode's GitHub page to look nice. Feel free to choose any you like, we advise you, however, to choose emojis wisely and with regard to what people might associate it with.\n\nOtherwise, commit messages should concisely describe the change. The first line should be 50 characters or less. Start with an imperative verb. For instance, `🚨 Use parameter pack for CompilerError`.\n\n\n"
        },
        {
          "name": "Compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 8.6962890625,
          "content": "           The Artistic License 2.0\n\n      Copyright (c) 2000-2006, The Perl Foundation.\n\n     Everyone is permitted to copy and distribute verbatim copies\n      of this license document, but changing it is not allowed.\n\nPreamble\n\nThis license establishes the terms under which a given free software\nPackage may be copied, modified, distributed, and/or redistributed.\nThe intent is that the Copyright Holder maintains some artistic\ncontrol over the development of that Package while still keeping the\nPackage available as open source and free software.\n\nYou are always permitted to make arrangements wholly outside of this\nlicense directly with the Copyright Holder of a given Package.  If the\nterms of this license do not permit the full use that you propose to\nmake of the Package, you should contact the Copyright Holder and seek\na different licensing arrangement.\n\nDefinitions\n\n    \"Copyright Holder\" means the individual(s) or organization(s)\n    named in the copyright notice for the entire Package.\n\n    \"Contributor\" means any party that has contributed code or other\n    material to the Package, in accordance with the Copyright Holder's\n    procedures.\n\n    \"You\" and \"your\" means any person who would like to copy,\n    distribute, or modify the Package.\n\n    \"Package\" means the collection of files distributed by the\n    Copyright Holder, and derivatives of that collection and/or of\n    those files. A given Package may consist of either the Standard\n    Version, or a Modified Version.\n\n    \"Distribute\" means providing a copy of the Package or making it\n    accessible to anyone else, or in the case of a company or\n    organization, to others outside of your company or organization.\n\n    \"Distributor Fee\" means any fee that you charge for Distributing\n    this Package or providing support for this Package to another\n    party.  It does not mean licensing fees.\n\n    \"Standard Version\" refers to the Package if it has not been\n    modified, or has been modified only in ways explicitly requested\n    by the Copyright Holder.\n\n    \"Modified Version\" means the Package, if it has been changed, and\n    such changes were not explicitly requested by the Copyright\n    Holder.\n\n    \"Original License\" means this Artistic License as Distributed with\n    the Standard Version of the Package, in its current version or as\n    it may be modified by The Perl Foundation in the future.\n\n    \"Source\" form means the source code, documentation source, and\n    configuration files for the Package.\n\n    \"Compiled\" form means the compiled bytecode, object code, binary,\n    or any other form resulting from mechanical transformation or\n    translation of the Source form.\n\n\nPermission for Use and Modification Without Distribution\n\n(1)  You are permitted to use the Standard Version and create and use\nModified Versions for any purpose without restriction, provided that\nyou do not Distribute the Modified Version.\n\n\nPermissions for Redistribution of the Standard Version\n\n(2)  You may Distribute verbatim copies of the Source form of the\nStandard Version of this Package in any medium without restriction,\neither gratis or for a Distributor Fee, provided that you duplicate\nall of the original copyright notices and associated disclaimers.  At\nyour discretion, such verbatim copies may or may not include a\nCompiled form of the Package.\n\n(3)  You may apply any bug fixes, portability changes, and other\nmodifications made available from the Copyright Holder.  The resulting\nPackage will still be considered the Standard Version, and as such\nwill be subject to the Original License.\n\n\nDistribution of Modified Versions of the Package as Source\n\n(4)  You may Distribute your Modified Version as Source (either gratis\nor for a Distributor Fee, and with or without a Compiled form of the\nModified Version) provided that you clearly document how it differs\nfrom the Standard Version, including, but not limited to, documenting\nany non-standard features, executables, or modules, and provided that\nyou do at least ONE of the following:\n\n    (a)  make the Modified Version available to the Copyright Holder\n    of the Standard Version, under the Original License, so that the\n    Copyright Holder may include your modifications in the Standard\n    Version.\n\n    (b)  ensure that installation of your Modified Version does not\n    prevent the user installing or running the Standard Version. In\n    addition, the Modified Version must bear a name that is different\n    from the name of the Standard Version.\n\n    (c)  allow anyone who receives a copy of the Modified Version to\n    make the Source form of the Modified Version available to others\n    under\n\n  (i)  the Original License or\n\n  (ii)  a license that permits the licensee to freely copy,\n  modify and redistribute the Modified Version using the same\n  licensing terms that apply to the copy that the licensee\n  received, and requires that the Source form of the Modified\n  Version, and of any works derived from it, be made freely\n  available in that license fees are prohibited but Distributor\n  Fees are allowed.\n\n\nDistribution of Compiled Forms of the Standard Version\nor Modified Versions without the Source\n\n(5)  You may Distribute Compiled forms of the Standard Version without\nthe Source, provided that you include complete instructions on how to\nget the Source of the Standard Version.  Such instructions must be\nvalid at the time of your distribution.  If these instructions, at any\ntime while you are carrying out such distribution, become invalid, you\nmust provide new instructions on demand or cease further distribution.\nIf you provide valid instructions or cease distribution within thirty\ndays after you become aware that the instructions are invalid, then\nyou do not forfeit any of your rights under this license.\n\n(6)  You may Distribute a Modified Version in Compiled form without\nthe Source, provided that you comply with Section 4 with respect to\nthe Source of the Modified Version.\n\n\nAggregating or Linking the Package\n\n(7)  You may aggregate the Package (either the Standard Version or\nModified Version) with other packages and Distribute the resulting\naggregation provided that you do not charge a licensing fee for the\nPackage.  Distributor Fees are permitted, and licensing fees for other\ncomponents in the aggregation are permitted. The terms of this license\napply to the use and Distribution of the Standard or Modified Versions\nas included in the aggregation.\n\n(8) You are permitted to link Modified and Standard Versions with\nother works, to embed the Package in a larger work of your own, or to\nbuild stand-alone binary or bytecode versions of applications that\ninclude the Package, and Distribute the result without restriction,\nprovided the result does not expose a direct interface to the Package.\n\n\nItems That are Not Considered Part of a Modified Version\n\n(9) Works (including, but not limited to, modules and scripts) that\nmerely extend or make use of the Package, do not, by themselves, cause\nthe Package to be a Modified Version.  In addition, such works are not\nconsidered parts of the Package itself, and are not subject to the\nterms of this license.\n\n\nGeneral Provisions\n\n(10)  Any use, modification, and distribution of the Standard or\nModified Versions is governed by this Artistic License. By using,\nmodifying or distributing the Package, you accept this license. Do not\nuse, modify, or distribute the Package, if you do not accept this\nlicense.\n\n(11)  If your Modified Version has been derived from a Modified\nVersion made by someone other than you, you are nevertheless required\nto ensure that your Modified Version complies with the requirements of\nthis license.\n\n(12)  This license does not grant you the right to use any trademark,\nservice mark, tradename, or logo of the Copyright Holder.\n\n(13)  This license includes the non-exclusive, worldwide,\nfree-of-charge patent license to make, have made, use, offer to sell,\nsell, import and otherwise transfer the Package with respect to any\npatent claims licensable by the Copyright Holder that are necessarily\ninfringed by the Package. If you institute patent litigation\n(including a cross-claim or counterclaim) against any party alleging\nthat the Package constitutes direct or contributory patent\ninfringement, then this Artistic License to you shall terminate on the\ndate that such litigation is filed.\n\n(14)  Disclaimer of Warranty:\nTHE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS \"AS\nIS' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES. THE IMPLIED\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR\nNON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY YOUR LOCAL\nLAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR CONTRIBUTOR WILL\nBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.3818359375,
          "content": "# Emojicode [![Build Status](https://travis-ci.org/emojicode/emojicode.svg?branch=master)](https://travis-ci.org/emojicode/emojicode) [![Join the chat at https://gitter.im/emojicode/emojicode][image-2]][2]\n\nEmojicode is an open source, high-level, multi-paradigm\nprogramming language consisting of emojis. It features Object-Orientation, Optionals, Generics and Closures.\n\n## 🏁 Getting Started\n\n**To learn more about the language and how to install Emojicode visit https://www.emojicode.org/.**\n\nWe highly recommend to follow Emojicode’s Twitter account [@Real\\_Emojicode][6] to stay up with the latest.\n\n## 🔨 Building from source\n\n### 🏡 Building locally\n\nPrerequisites (versions are recommendations):\n\n- clang and clang++ 6.0.1 or gcc and g++ 7.2\n- CMake 3.5.1+ and (preferably) Ninja\n- LLVM 7\n- Python 3.5.2+ for testing\n\nSteps:\n\n1. Clone Emojicode (or download the source code and extract it) and navigate\n  into it:\n\n   ```sh\n   git clone https://github.com/emojicode/emojicode\n   cd emojicode\n   ```\n\n2. Create a `build` directory and run CMake in it:\n\n   ```sh\n   mkdir build\n   cd build\n   cmake .. -GNinja\n   ```\n\n   You can of course also run CMake in another directory or use another build\n   system than Ninja. Refer to the CMake documentation for more information.\n\n3. Build the Compiler and Packages:\n\n   ```sh\n   ninja\n   ```\n\n4. You can now test Emojicode:\n\n   ```sh\n   ninja tests\n   ```\n\n5. The binaries are ready for use!\n   You can the perform a magic installation right away\n\n   ```sh\n   ninja magicinstall\n   ```\n\n   or just package the binaries and headers properly\n\n   ```sh\n   ninja dist\n   ```\n\n   To create a distribution archive you must call the dist script yourself\n   (e.g. `python3 ../dist.py .. archive`).\n\n### 🐋 Building using Docker\n\nA `Dockerfile` is available for building in a Ubuntu `18.04` environment.\n\nSteps:\n\n1. Clone Emojicode (or download the source code and extract it) and navigate\n  into it:\n\n   ```sh\n   git clone https://github.com/emojicode/emojicode\n   cd emojicode\n   ```\n\n2. Build Docker image:\n\n   ```sh\n   docker build -t emojicode-build -f docker/clang .\n   ```\n\n3. Verify the installation was fine and tests pass:\n\n   ```\n   docker run --rm emojicode-build\n   ...\n   ✅ ✅  All tests passed.\n   ```\n\n4. Start image (and mount a directory to it):\n\n   ```sh\n   docker run --rm -v $(pwd)/code:/workspace -it emojicode-build /bin/bash\n   ```\n\n5. Start coding!\n\n   ```sh\n   emojicodec /workspace/hello.🍇 && ./workspace/hello\n   ```\n\n## 📃 License\n\nEmojicode [is licensed under the Artistic License 2.0][8].\nIf you don’t want to read the whole license, here’s a summary without legal force:\n\n- You are allowed to download, use, copy, publish and distribute Emojicode.\n- You are allowed to create modified versions of Emojicode but you may only distribute them on some conditions.\n-  The license contains a grant of patent rights and does not allow you to use any trademark, service mark, tradename, or logo.\n- Emojicode comes with absolutely no warranty.\n\n[2]:\thttps://gitter.im/emojicode/emojicode?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[6]:\thttps://twitter.com/Real_Emojicode\n[7]:\thttps://github.com/emojicode/emojicode/blob/master/0.6.md#help-improving-emojicodes-syntax-\n[8]:\tLICENSE\n\n[image-1]:\thttps://app.codeship.com/projects/edbc3220-f394-0134-fad2-66135ababc06/status?branch=master\n[image-2]:\thttps://badges.gitter.im/emojicode/emojicode.svg\n"
        },
        {
          "name": "dist.py",
          "type": "blob",
          "size": 1.8154296875,
          "content": "import platform\nimport shutil\nimport os\nimport sys\nimport subprocess\n\nversion = \"1.0-beta.2\"\npackages = [\"s\", \"files\", \"sockets\", \"testtube\", \"json\"]\n\nsource = os.path.dirname(os.path.realpath(__file__))\ndist_name = \"Emojicode-{0}-{1}-{2}\".format(version, platform.system(),\n                                           platform.machine())\npath = os.path.abspath(dist_name)\n\n\ndef copy_packages(destination, source):\n    for package in packages:\n        dir_path = os.path.join(destination, package)\n        make_dir(dir_path)\n        shutil.copy2(os.path.join(package.encode('utf-8'), \"🏛\".encode('utf-8')), dir_path.encode('utf-8'))\n        shutil.copy2(os.path.join(package, \"lib\" + package + \".a\"), dir_path)\n\ndef make_dir(path):\n    if not os.path.exists(path):\n        os.makedirs(path)\n\n\ndef copy_header(*args):\n    make_dir(os.path.join(path, \"include\", *args[:-1]))\n    shutil.copy2(os.path.join(source, *args),\n                 os.path.join(path, \"include\", *args))\n\nif __name__ == \"__main__\":\n    make_dir(path)\n\n    shutil.copy2(os.path.join(source, \"install.sh\"), path)\n    shutil.copy2(os.path.join(\"Compiler\", \"emojicodec\"), path)\n\n    copy_header(\"runtime\", \"Runtime.h\")\n    copy_header(\"s\", \"Data.h\")\n    copy_header(\"s\", \"String.h\")\n\n    dir_path = os.path.join(path, \"packages\", \"runtime\")\n    make_dir(dir_path)\n    shutil.copy2(os.path.join(\"runtime\", \"libruntime.a\"), dir_path)\n\n    copy_packages(os.path.join(path, \"packages\"),\n                  os.path.join(source, \"headers\"))\n\n    if len(sys.argv) > 1 and sys.argv[1] == \"archive\":\n        archive_name = shutil.make_archive(dist_name, \"gztar\", os.getcwd(), dist_name)\n        print(archive_name, end='')\n\n    if len(sys.argv) > 1 and sys.argv[1] == \"install\":\n        bash = \"cd \" + path + \" && yes | \" + os.path.join(path, \"install.sh\")\n        subprocess.run([\"bash\", \"-c\", bash])\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 2.2919921875,
          "content": "#!/usr/bin/env bash\n\nn=$(tput sgr0)\ncyan=$(tput setaf 6)\nbold=$(tput bold)\nr=$(tput setaf 1)\n\nbinaries=${1:-\"/usr/local/bin\"}\npackages=${2:-\"/usr/local/EmojicodePackages\"}\ninclude=${3:-\"/usr/local/include/emojicode\"}\n\nself=$0\nmagicsudod=$4\n\nif [[ \"$magicsudod\" == \"magicsudod\" ]]; then\n  echo \"I’ve super user privileges now and will try to perform the installation.\"\nelse\n  echo \"👨‍💻  Hi, I’m the Emojicode Installer!\"\n  echo\n\n  echo \"${bold}I’ll copy the ${cyan}Emojicode Compiler${n}${bold} to ${binaries}.${n}\"\n  echo \"${bold}Then I’ll copy the default packages to ${packages}.${n}\"\n  echo \"${bold}Finally, I’ll copy the Emojicode API headers to ${include}.${n}\"\n  echo \"If you prefer different locations you can rerun me and provide me with other locations like so:\"\n  echo -e \"\\t ${0} [binary location] [packages location] [include location]\\n\"\nfi\n\nfunction offerSudo {\n  if [[ \"$magicsudod\" == \"magicsudod\" ]]; then\n    exit 1\n  fi\n  if [ \"$EUID\" -eq 0 ]; then\n    exit 1\n  fi\n  echo \"I can try to rerun myself with sudo.\"\n  read -p \"If you wish me to do so type y. ➡️  \" -n 1 -r\n  if [[ $REPLY =~ ^[Yy]$ ]]; then\n    echo \"\"\n    sudo \"$self\" \"$binaries\" \"$packages\" \"$include\" magicsudod\n    exit $?\n  fi\n  exit 1\n}\n\nread -p \"If you want to proceed type y. ➡️  \" -n 1 -r\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n  echo\n  if [[ ! -w $binaries ]] ; then\n    echo \"${r}${binaries} is not writeable from this user.${n}\"\n    offerSudo\n  fi\n\n  if [[ ! -w $packages ]] ; then\n    pp=$(dirname \"$packages\")\n    if [[ ! -w $pp ]] ; then\n      echo \"${r}${pp} is not writeable from this user.${n}\"\n      offerSudo\n    else\n      if [[ ! -d $packages ]] ; then\n        echo \"Setting up packages directory in ${packages}${n}\"\n\n        mkdir -p \"$packages\"\n      else\n        echo \"${r}${packages} is not writeable from this user.${n}\"\n        offerSudo\n      fi\n    fi\n  fi\n\n  (\n    set -e\n    echo \"Copying builds${n}\"\n\n    cp emojicodec \"$binaries/emojicodec\"\n\n    chmod 755 \"$binaries/emojicodec\"\n\n    echo \"Copying packages${n}\"\n\n    rsync -rl packages/ \"$packages\"\n    rsync -rl include/ \"$include\"\n    chmod -R 755 \"$packages\"\n  )\n  if [ $? = 0 ]\n  then\n    tput setaf 2\n    echo \"✅  Emojicode was successfully installed.${n}\"\n  else\n    echo \"${r}Installation failed. Please refer to the error above.${n}\"\n    exit 1\n  fi\nfi\n"
        },
        {
          "name": "json",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "s",
          "type": "tree",
          "content": null
        },
        {
          "name": "sockets",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests.py",
          "type": "blob",
          "size": 6.595703125,
          "content": "from subprocess import *\nimport glob\nimport os\nimport dist\nimport sys\nimport re\n\nquick = len(sys.argv) > 1 and sys.argv[1] == 'quick'\nvalgrind = len(sys.argv) > 1 and sys.argv[1] == 'valgrind'\n\ncompilation_tests = [\n    \"hello\",\n    \"print\",\n    \"intTest\",\n    \"if\",\n    \"vars\",\n    \"repeatedPackageImport\",\n    \"enum\",\n    \"enumMethod\",\n    \"enumTypeMethod\",\n    \"unwrap\",\n    \"imperativeInterrogative\",\n    \"assignmentMethod\",\n    \"assignmentByCall\",\n    \"repeatWhile\",\n    \"conditionalProduce\",\n    \"stringConcat\",\n    \"babyBottleInitializer\",\n    \"classInheritance\",\n    \"classOverride\",\n    \"classSuper\",\n    \"classSubInstanceVar\",\n    \"overload\",\n    \"optionalParameter\",\n    \"returnInBlock\",\n    \"returnInIf\",\n    \"identityOperator\",\n    \"typesAsValues\",\n    \"class\",\n    \"ivarAssign\",\n    \"useAndAssign\",\n    \"privateClassMethod\",\n    \"assignmentByCallInstanceVariable\",\n    \"valueType\",\n    \"valueTypeSelf\",\n    \"valueTypeMutate\",\n    \"compareNoValue\",\n    \"downcastClass\",\n    \"castAny\",\n    \"castGenericValueType\",\n    \"castGenericClass\",\n    \"protocolClass\",\n    \"protocolSubclass\",\n    \"protocolValueType\",\n    \"protocolValueTypeRemote\",\n    \"protocolEnum\",\n    \"protocolGenericLayerClass\",\n    \"protocolGenericLayerValueType\",\n    \"protocolMulti\",\n    \"reboxToSomething\",\n    \"assignmentByCallProtocol\",\n    \"commonType\",\n    \"generics\",\n    \"genericsValueType\",\n    \"genericProtocol\",\n    \"genericProtocolValueType\",\n    \"genericTypeMethod\",\n    \"genericLocalAsArgToGeneric\",\n    \"genericToConstraintOptional\",\n    \"genericsInferenceValueType\",\n    \"genericsInferenceClass\",\n    \"variableInitAndScoping\",\n    \"varInitPath\",\n    \"valueTypeRemoteAdditional\",\n    \"closureBasic\",\n    \"closureCapture\",\n    \"closureCaptureThis\",\n    \"closureCaptureValueType\",\n    \"closureCaptureThisClass\",\n    \"closureCaptureNonEscaping\",\n    \"closureError\",\n    \"callableBoxing\",\n    \"errorUnwrap\",\n    \"errorAvocado\",\n    \"errorInitializer\",\n    \"errorReraiseMem\",\n    \"errorReraiseMem2\",\n    \"valueTypeCopySelf\",\n    \"valueTypeBoxCopySelf\",\n    \"includer\",\n    \"threads\",\n    \"inferLiteralFromExpec\",\n    \"sequenceTypeNames\",\n    \"typeValues\",\n    \"deinitializer\",\n    \"rcOrder\",\n    \"rcOrderVt\",\n    \"rcTempOrder\",\n    \"rcInstanceVariable\",\n    \"rcOnlyReference\",\n    \"rcIvarArgMut\",\n    \"rcEscaping\",\n    \"classEscapingParamOverride\",\n    \"references\",\n    \"identifierTest\",\n    \"shortCircuit\",\n    \"errorReraisePrefix\",\n    \"weak\",\n    \"superMemoryFlow\",\n    \"interpolationDereference\"\n]\n\nif not (quick or valgrind):\n    compilation_tests.extend([\n      \"stressTest1\",\n      \"stressTest2\",\n      \"stressTest3\",\n      \"stressTest4\"\n    ])\n\nlibrary_tests = [\n    \"primitives\",\n    \"mathTest\",\n    \"rangeTest\",\n    \"stringTest\",\n    \"dataTest\",\n    \"systemTest\",\n    \"listTest\",\n    \"enumerator\",\n    \"dictionaryTest\",\n    \"jsonTest\",\n    \"fileTest\"\n]\nreject_tests = glob.glob(os.path.join(dist.source, \"tests\", \"reject\",\n                                      \"*.emojic\"))\n\nfailed_tests = []\n\nemojicodec = os.path.abspath(\"Compiler/emojicodec\")\nos.environ[\"EMOJICODE_PACKAGES_PATH\"] = os.path.abspath(\".\")\n\n\ndef fail_test(name):\n    global failed_tests\n    print(\"🛑 {0} failed\".format(name))\n    failed_tests.append(name)\n\n\ndef test_paths(name, kind):\n    return (os.path.join(dist.source, \"tests\", kind, name + \".emojic\"),\n            os.path.join(dist.source, \"tests\", kind, name))\n\n\ndef library_test(name):\n    source_path, binary_path = test_paths(name, 's')\n\n    run([emojicodec, source_path, '-O'], check=True)\n    completed = run([binary_path], stdout=PIPE)\n    if completed.returncode != 0:\n        fail_test(name)\n        print(completed.stdout.decode('utf-8'))\n\n\ndef compilation_test(name):\n    source_path, binary_path = test_paths(name, 'compilation')\n    run([emojicodec, source_path, '-O'], check=True)\n    completed = run([binary_path], stdout=PIPE)\n    exp_path = os.path.join(dist.source, \"tests\", \"compilation\", name + \".txt\")\n    output = completed.stdout.decode('utf-8')\n    if output != open(exp_path, \"r\", encoding='utf-8').read():\n        print(output)\n        fail_test(name)\n\n\ndef reject_test(filename):\n    completed = run([emojicodec, filename], stderr=PIPE)\n    output = completed.stderr.decode('utf-8')\n    if completed.returncode != 1 or len(re.findall(r\"🚨 error:\", output)) != 1:\n        print(output)\n        fail_test(filename)\n\n\ndef available_compilation_tests():\n    paths = glob.glob(os.path.join(dist.source, \"tests\", \"compilation\",\n                                   \"*.emojic\"))\n\n    map_it = map(lambda f: os.path.splitext(os.path.basename(f))[0], paths)\n    tests = list(map_it)\n    tests.remove('included')\n    return tests\n\n\navl_compilation_tests = available_compilation_tests()\n\n\ndef prettyprint_test(name):\n    source_path = test_paths(name, 'compilation')[0]\n    run([emojicodec, '--format', source_path], check=True)\n    try:\n        compilation_test(name)\n    except CalledProcessError:\n        fail_test(name)\n    os.rename(source_path + '_original', source_path)\n\n\ndef test():\n    for test in compilation_tests:\n        avl_compilation_tests.remove(test)\n        compilation_test(test)\n\n    if not quick:\n        for test in compilation_tests:\n            prettyprint_test(test)\n\n        included = os.path.join(dist.source, \"tests\", \"compilation\", \"included.emojic\")\n        os.rename(included + '_original', included)\n\n        source_path = test_paths('included', 'compilation')[0]\n        run([emojicodec, '--format', source_path], check=True)\n        compilation_test('includer')\n        os.rename(source_path + '_original', source_path)\n\n    for test in reject_tests:\n        reject_test(test)\n    os.chdir(os.path.join(dist.source, \"tests\", \"s\"))\n    os.environ[\"TEST_ENV_1\"] = \"The day starts like the rest I've seen\"\n    for test in library_tests:\n        library_test(test)\n\n    for file in avl_compilation_tests:\n        print(\"☢️  {0} is not in compilation test list.\".format(file))\n\n    if len(failed_tests) == 0:\n        print(\"✅ ✅  All tests passed.\")\n        sys.exit(0)\n    else:\n        print(\"🛑 🛑  {0} tests failed: {1}\".format(len(failed_tests),\n                                                  \", \".join(failed_tests)))\n        sys.exit(1)\n\n\ndef run_valgrind():\n    for test in compilation_tests:\n        source_path, binary_path = test_paths(test, 'compilation')\n        run([emojicodec, source_path, '-O'], check=True)\n        completed = run(['valgrind', '--error-exitcode=22', '--leak-check=full', binary_path], stdout=PIPE, stderr=PIPE)\n        if completed.returncode == 22:\n            print(completed.stdout.decode('utf-8'))\n            print(completed.stderr.decode('utf-8'))\n            fail_test(test)\n\nif valgrind:\n    run_valgrind()\nelse:\n    test()\n\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "testtube",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}