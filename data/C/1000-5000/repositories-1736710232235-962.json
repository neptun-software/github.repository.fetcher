{
  "metadata": {
    "timestamp": 1736710232235,
    "page": 962,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FastVM/minivm",
      "stars": 1576,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.236328125,
          "content": "---\r\nLanguage: Cpp\r\nAlignAfterOpenBracket: BlockIndent\r\nColumnLimit: 0\r\nIndentCaseBlocks: false\r\nIndentWidth: 4\r\nSortIncludes: true\r\nIndentCaseLabels: true\r\nBreakBeforeBraces: Attach\r\nMaxEmptyLinesToKeep: 2\r\nSeparateDefinitionBlocks: Always\r\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0087890625,
          "content": "* text=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3583984375,
          "content": "*.bin\r\n*.core\r\n*.dll\r\n*.err\r\n*.exe\r\n*.gcda\r\n*.lib\r\n*.o\r\n*.obj\r\n*.out\r\n*.perf\r\n*.profdata\r\n*.profraw\r\n*.rdbg\r\n*.stackdump\r\n*.tmp.c\r\n.cache\r\n.minivm-cache\r\n.minivm-history\r\n.mypy_cache\r\n.vscode\r\nbin\r\nbuild\r\ncompile_commands.json\r\ninfo.txt\r\nlibminivm.a\r\nlibminivm.lib\r\nminivm\r\nminivm.exe\r\nout.*\r\npackage-lock.json\r\nweb/minivm.js\r\nweb-raw/minivm.js\r\nweb-raw/minivm.wasm\r\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.396484375,
          "content": "[submodule \"vendor/tree-sitter\"]\n\tpath = vendor/tree-sitter\n\turl = https://github.com/fastvm/minivm-tree-sitter\n[submodule \"vendor/isocline\"]\n\tpath = vendor/isocline\n\turl = https://github.com/fastvm/minivm-isocline\n[submodule \"vendor/raylib\"]\n\tpath = vendor/raylib\n\turl = https://github.com/FastVM/minivm-raylib\n[submodule \"vendor/bdwgc\"]\n\tpath = vendor/bdwgc\n\turl = https://github.com/FastVM/minivm-bdwgc\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0625,
          "content": "MIT License\r\n\r\nCopyright (c) 2020 Shaw Summa\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.5546875,
          "content": "![The MiniVM Logo, a blueish grey brick (Or maybe can of tuna if you are a cat)](res/MiniVM.svg)\r\n\r\n# MiniVM\r\n\r\nMiniVM is a Small but Optimizing Virtual Machine and Runtime.\r\n\r\nIt has a just-in-time compiler based on [Cuik](https://github.com/realnegate/cuik)'s [TB](https://github.com/RealNeGate/Cuik/tree/master/tb).\r\n\r\nCurrently it supports Linux x86-64, FreeBSD amd64, Windows x64 and WebAssembly.\r\n\r\nMiniVM is written in C11 with (minor GNU extensions), and builds with GCC and Clang, with TCC support not hard to patch in.\r\n\r\n## Building\r\n\r\nMiniVM uses GNU Make as it's build system.\r\n\r\n### Requirements\r\n\r\nYou'll need\r\n* The MiniVM repo\r\n    * Make sure to get the cuik submodule\r\n        * You can use `git clone github.com/FastVM/minivm --recursive`\r\n        * If you've already cloned you can use `git submodule update --init`\r\n* A C Compiler\r\n    * GCC works\r\n    * Clang works if you replace CC=gcc with CC=clang\r\n\r\n### Build Configs\r\n\r\nHere's some Shell Commands to build MiniVM different ways\r\n\r\n* Debug - `make -Bj OPT='-g'`\r\n* For Size - `make -Bj CC=gcc OPT='-s -Oz -flto -fno-asynchronous-unwind-tables -fomit-frame-pointer'`\r\n    * GCC does a better job than Clang to make tiny binaries of MiniVM.\r\n* For Speed - `make -Bj OPT='-O3 -flto'`\r\n\r\n## Speed\r\n\r\nHere's some benchmark runs, they aren't too representative yet.\r\n\r\n### Math + Recursion\r\n\r\n```sh\r\nshell> ./build/bin/minivm --dump-time test/fib/fib40.lua\r\n102334155\r\ntook: 1725.805ms\r\n```\r\n\r\n### Startup Perf\r\n\r\n```sh\r\nshell> ./build/bin/minivm --dump-time -e 'print(\"hello world\")'\r\nHello, World\r\ntook: 0.307ms\r\n```\r\n"
        },
        {
          "name": "main",
          "type": "tree",
          "content": null
        },
        {
          "name": "makefile",
          "type": "blob",
          "size": 3.1484375,
          "content": "\nOPT = -Os -flto\nPRE = \nTARGET = bins\nJ != nproc\nEMCC = emcc\n\nRAYLIB_CC ?= $(CC)\nRAYLIB_DIR = vendor/raylib/src\n\nlinux: .dummy\n\t$(PRE) make -Bj$(J) -f tool/core.mak $(TARGET) OS=LINUX CC=\"$(CC)\" EXE= TEST_LUA=\"$(TEST_LUA)\"\n\nMAC_RAYLIB_OBJS = $(RAYLIB_DIR)/rcore.o $(RAYLIB_DIR)/rglfw.o $(RAYLIB_DIR)/rshapes.o $(RAYLIB_DIR)/rtextures.o $(RAYLIB_DIR)/rtext.o $(RAYLIB_DIR)/rmodels.o $(RAYLIB_DIR)/raudio.o $(RAYLIB_DIR)/utils.o\n\nmac: .dummy\n\t$(PRE) make -Bj$(J) -C vendor/raylib/src CC=\"$(RAYLIB_CC)\" LDFLAGS=\"$(OPT)\" CFLAGS=\"-w $(OPT) $(CLFAGS) -DPLATFORM_DESKTOP\" PLATFORM=PLATFORM_DESKTOP\n\t$(PRE) make -Bj$(J) -f tool/core.mak $(TARGET) OS=MAC CC=\"$(CC)\" EXE= TEST_LUA=\"$(TEST_LUA)\" CFLAGS=\"-DVM_USE_RAYLIB -DVM_NO_GC $(CFLAGS)\" LDFLAGS=\"$(MAC_RAYLIB_OBJS) -framework Cocoa -framework OpenGL -framework IOKit $(LDFLAGS)\" \n\nWINDOWS_RAYLIB_OBJS = $(RAYLIB_DIR)/rcore.o $(RAYLIB_DIR)/rglfw.o $(RAYLIB_DIR)/rshapes.o $(RAYLIB_DIR)/rtextures.o $(RAYLIB_DIR)/rtext.o $(RAYLIB_DIR)/rmodels.o $(RAYLIB_DIR)/raudio.o $(RAYLIB_DIR)/utils.o\n\nwindows: .dummy\n\t$(PRE) make -j$(J) -C vendor/raylib/src CC=\"$(RAYLIB_CC)\" LDFLAGS=\"$(OPT)\" CFLAGS=\"-w $(OPT) $(CLFAGS) -DPLATFORM_DESKTOP\" PLATFORM=PLATFORM_DESKTOP OS=WINDOWS_NT\n\t$(PRE) make -Bj$(J) -f tool/core.mak $(TARGET) OS=WINDOWS CC=\"$(CC)\" EXE=.exe TEST_LUA=\"$(TEST_LUA)\" CFLAGS=\"-DVM_USE_RAYLIB -DVM_NO_GC -DWIN32_LEAN_AND_MEAN $(CFLAGS)\" LDFLAGS=\"$(RAYLIB_DIR)/libraylib.a -lopengl32 -lgdi32 -lwinmm\"\n\nfreebsd: .dummy\n\t$(PRE) gmake -Bj$(J) -C vendor/raylib/src CC=\"$(RAYLIB_CC)\" LDFLAGS=\"$(OPT)\" CFLAGS=\"-w $(OPT) $(CLFAGS) -DPLATFORM_DESKTOP\" PLATFORM=PLATFORM_DESKTOP\n\t$(PRE) gmake -Bj$(J) -f tool/core.mak $(TARGET) OS=FREEBSD CC=\"$(CC)\" EXE= TEST_LUA=\"$(TEST_LUA)\" CFLAGS=\"-DVM_USE_RAYLIB $(CFLAGS)\" LDFLAGS=\"-L/usr/local/lib vendor/raylib/src/libraylib.a -lOpenGL -lm -lpthread $(LDFLAGS)\" \n\nWEB_RAYLIB_OBJS = $(RAYLIB_DIR)/rcore.o $(RAYLIB_DIR)/rshapes.o $(RAYLIB_DIR)/rtextures.o $(RAYLIB_DIR)/rtext.o $(RAYLIB_DIR)/rmodels.o $(RAYLIB_DIR)/raudio.o $(RAYLIB_DIR)/utils.o\n\nweb: .dummy\n\t$(PRE) make -Bj$(J) CC=$(EMCC) -C vendor/raylib/src LDFLAGS=\"$(OPT)\" CFLAGS=\"-w $(OPT) $(CLFAGS) -D_DEFAULT_SOURCE -DPLATFORM_WEB -DGRAPHICS_API_OPENGL_ES2\" PLATFORM=PLATFORM_WEB $(WEB_RAYLIB_OBJS:$(RAYLIB_DIR)/%=%)\n\t$(PRE) make -Bj$(J) CC=$(EMCC) -f tool/core.mak build/bin/minivm.mjs OS=LINUX EXE=.mjs \\\n\t\tCFLAGS='-fPIC -DVM_USE_RAYLIB -DNDEBUG -DVM_NO_GC' \\\n\t\tLDFLAGS='--embed-file test@test -lglfw -lGL -s ASYNCIFY=1 -s BINARYEN_ASYNC_COMPILATION=0 -s EXPORTED_RUNTIME_METHODS=['FS'] -s STACK_SIZE=16mb -s USE_GLFW=3 -s SINGLE_FILE=1 $(WEB_RAYLIB_OBJS) -s ENVIRONMENT=web -s ALLOW_MEMORY_GROWTH=1'\n\tmv build/bin/minivm.mjs web/minivm.js\n\nweb-raw: .dummy\n\t$(PRE) make -Bj$(J) CC=$(EMCC) -f tool/core.mak build/bin/minivm.mjs OS=LINUX EXE=.mjs \\\n\t\tCFLAGS='-fPIC -DVM_USE_RAYLIB -DNDEBUG -DVM_USE_CANVAS -DVM_NO_GC' \\\n\t\tLDFLAGS='--embed-file test@test -s EXIT_RUNTIME=0 -s ASYNCIFY=0 -s BINARYEN_ASYNC_COMPILATION=0 -s EXPORTED_RUNTIME_METHODS=FS -s STACK_SIZE=4mb -s ENVIRONMENT=web -s ALLOW_MEMORY_GROWTH=1'\n\tmv build/bin/minivm.wasm web-raw/minivm.wasm\n\tmv build/bin/minivm.mjs web-raw/minivm.js\n\nformat: .dummy\n\tclang-format -i $$(find vm main -name '*.c' -or -name '*.h')\n\n.dummy:\n"
        },
        {
          "name": "res",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "vm",
          "type": "tree",
          "content": null
        },
        {
          "name": "web-raw",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}