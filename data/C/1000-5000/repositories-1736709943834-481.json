{
  "metadata": {
    "timestamp": 1736709943834,
    "page": 481,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xiph/opus",
      "stars": 2389,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.181640625,
          "content": ".gitignore\t\texport-ignore\n.gitattributes\t\texport-ignore\n\nupdate_version\t\texport-ignore\n\n*.bat eol=crlf\n*.sln eol=crlf\n*.vcxproj eol=crlf\n*.vcxproj.filters eol=crlf\ncommon.props eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2470703125,
          "content": "Doxyfile\nMakefile\nMakefile.in\nTAGS\naclocal.m4\nautom4te.cache\n*.kdevelop.pcs\n*.kdevses\ncompile\nconfig.guess\nconfig.h\nconfig.h.in\nconfig.log\nconfig.status\nconfig.sub\nconfigure\ndepcomp\nINSTALL\ninstall-sh\n.deps\n.libs\n.dirstamp\n*.a\n*.exe\n*.la\n*-gnu.S\ntestcelt\nlibtool\nltmain.sh\nmissing\nm4/libtool.m4\nm4/ltoptions.m4\nm4/ltsugar.m4\nm4/ltversion.m4\nm4/lt~obsolete.m4\nopus_compare\nopus_demo\nrepacketizer_demo\nstamp-h1\ntest-driver\ntrivial_example\n*.sw*\n*.o\n*.lo\n*.pc\n*.tar.gz\n*~\ntests/*test\ntests/test_opus_api\ntests/test_opus_decode\ntests/test_opus_encode\ntests/test_opus_extensions\ntests/test_opus_padding\ntests/test_opus_projection\ncelt/arm/armopts.s\ncelt/dump_modes/dump_modes\ncelt/tests/test_unit_cwrs32\ncelt/tests/test_unit_dft\ncelt/tests/test_unit_entropy\ncelt/tests/test_unit_laplace\ncelt/tests/test_unit_mathops\ncelt/tests/test_unit_mdct\ncelt/tests/test_unit_rotation\ncelt/tests/test_unit_types\ndoc/doxygen_sqlite3.db\ndoc/doxygen-build.stamp\ndoc/html\ndoc/latex\ndoc/man\npackage_version\nversion.h\ncelt/Debug\ncelt/Release\ncelt/x64\nsilk/Debug\nsilk/Release\nsilk/x64\nsilk/fixed/Debug\nsilk/fixed/Release\nsilk/fixed/x64\nsilk/float/Debug\nsilk/float/Release\nsilk/float/x64\nsilk/tests/test_unit_LPC_inv_pred_gain\nsrc/Debug\nsrc/Release\nsrc/x64\n/*[Bb]uild*/\n.vs/\n.vscode/\nCMakeSettings.json\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 3.8349609375,
          "content": "include:\n  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'\n\n# https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines\nworkflow:\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\"\n    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == \"push\"\n      when: never\n    - if: $CI_COMMIT_BRANCH\n    - if: $CI_COMMIT_TAG\n\ndefault:\n  tags:\n    - docker\n  image: 'debian:bookworm-slim'\n\n# https://docs.gitlab.com/ee/ci/yaml/yaml_optimization.html#reference-tags\n.snippets:\n  git_prep:\n    # Make sure we have a recent annotated tag, otherwise meson/get-version.py\n    # might fail later (e.g. shallow clone without enough history) or return\n    # a bogus version based on a much older tag. This can happen in merge request\n    # pipelines from a personal fork, as the fork might not have the latest\n    # upstream tags if it has been forked a long time ago. Also affects the\n    # git version picked up by autotools and cmake, not just meson.\n    - git fetch https://gitlab.xiph.org/xiph/opus.git refs/tags/v1.4:refs/tags/v1.4\n    - git describe\n\nwhitespace:\n  stage: test\n  before_script:\n    - apt-get update &&\n      apt-get install -y git\n  script:\n    - git diff-tree --check origin/main HEAD\n\n# Make sure commits are GPG signed\nci-fairy:\n  stage: test\n  script:\n    - apt update\n    - apt install -y python3-pip git\n    - pip3 install --break-system-packages git+https://gitlab.freedesktop.org/freedesktop/ci-templates@7811ba9814a3bad379377241c6c6b62d78b20eac\n    - echo Checking commits $CI_FAIRY_BASE_COMMIT..HEAD\n    - ci-fairy check-commits --gpg-signed-commit $CI_FAIRY_BASE_COMMIT..HEAD\n  tags:\n    - 'docker'\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\"\n      variables:\n        CI_FAIRY_BASE_COMMIT: $CI_MERGE_REQUEST_DIFF_BASE_SHA\n    - if: $CI_PIPELINE_SOURCE != \"merge_request_event\"\n      variables:\n        CI_FAIRY_BASE_COMMIT: 'HEAD^1'\n\nautoconf:\n  stage: build\n  tags:\n    - avx2\n  before_script:\n    - apt-get update &&\n      apt-get install -y zip doxygen git automake libtool make wget\n    - !reference [.snippets, git_prep]\n  script:\n    - ./autogen.sh\n    - CFLAGS=\"-mavx -mfma -mavx2 -O2 -ffast-math\" ./configure --enable-float-approx --enable-dred --enable-osce\n    - make -j16\n    - DISTCHECK_CONFIGURE_FLAGS=\"--enable-float-approx --enable-dred --enable-osce CFLAGS='-mavx -mfma -mavx2 -O2'\" make distcheck -j16\n  cache:\n    paths:\n      - \"src/*.o\"\n      - \"src/.libs/*.o\"\n      - \"silk/*.o\"\n      - \"silk/.libs/*.o\"\n      - \"celt/*.o\"\n      - \"celt/.libs/*.o\"\n\ncmake:\n  stage: build\n  tags:\n    - avx2\n  before_script:\n    - apt-get update &&\n      apt-get install -y cmake ninja-build git automake libtool wget\n    - !reference [.snippets, git_prep]\n  script:\n    - ./autogen.sh\n    - mkdir build\n    - cmake -S . -B build -G \"Ninja\" -DCMAKE_BUILD_TYPE=Release -DOPUS_BUILD_PROGRAMS=ON -DBUILD_TESTING=ON -DOPUS_FAST_MATH=ON -DOPUS_FLOAT_APPROX=ON -DOPUS_DRED=ON -DOPUS_OSCE=ON -DOPUS_X86_PRESUME_AVX2=ON\n    - cmake --build build\n    - cd build && ctest --output-on-failure -j 16\n\n.meson:\n  image: 'debian:bookworm-slim'\n  stage: build\n  before_script:\n    - apt-get update &&\n      apt-get install -y ninja-build doxygen meson git automake libtool wget\n    - !reference [.snippets, git_prep]\n  script:\n    - ./autogen.sh\n    - mkdir builddir\n    - meson setup -Ddeep-plc=enabled -Dosce=enabled -Ddred=enabled -Dtests=enabled -Ddocs=enabled -Dbuildtype=release builddir\n    - meson compile -C builddir\n    - meson test -C builddir\n    #- meson dist --no-tests -C builddir\n\nmeson x86_64:\n  extends: '.meson'\n  tags:\n    - avx2\n  variables:\n    MESON_EXTRA_ARGS: '--werror'\n\nmeson arm64:\n  extends: '.meson'\n  tags:\n    - 'gstreamer-arm64-linux-docker'\n  variables:\n    # arm64 build has a compiler warning still, so let's not use --werror for now\n    MESON_EXTRA_ARGS: '-Dwerror=false'\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.2333984375,
          "content": "Jean-Marc Valin (jmvalin@jmvalin.ca)\nKoen Vos (koenvos74@gmail.com)\nTimothy Terriberry (tterribe@xiph.org)\nKarsten Vandborg Sorensen (karsten.vandborg.sorensen@skype.net)\nSoren Skak Jensen (ssjensen@gn.com)\nGregory Maxwell (greg@xiph.org)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 30.2548828125,
          "content": "cmake_minimum_required(VERSION 3.16)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\ninclude(OpusPackageVersion)\nget_package_version(PACKAGE_VERSION PROJECT_VERSION)\n\nproject(Opus LANGUAGES C VERSION ${PROJECT_VERSION})\n\ninclude(OpusFunctions)\ninclude(OpusBuildtype)\ninclude(OpusConfig)\ninclude(OpusSources)\ninclude(GNUInstallDirs)\ninclude(CMakeDependentOption)\ninclude(FeatureSummary)\n\nset(OPUS_BUILD_SHARED_LIBRARY_HELP_STR \"build shared library.\")\noption(OPUS_BUILD_SHARED_LIBRARY ${OPUS_BUILD_SHARED_LIBRARY_HELP_STR} OFF)\nif(OPUS_BUILD_SHARED_LIBRARY OR BUILD_SHARED_LIBS OR OPUS_BUILD_FRAMEWORK)\n  # Global flag to cause add_library() to create shared libraries if on.\n  set(BUILD_SHARED_LIBS ON)\n  set(OPUS_BUILD_SHARED_LIBRARY ON)\nendif()\nadd_feature_info(OPUS_BUILD_SHARED_LIBRARY OPUS_BUILD_SHARED_LIBRARY ${OPUS_BUILD_SHARED_LIBRARY_HELP_STR})\n\nset(OPUS_BUILD_TESTING_HELP_STR \"build tests.\")\noption(OPUS_BUILD_TESTING ${OPUS_BUILD_TESTING_HELP_STR} OFF)\nif(OPUS_BUILD_TESTING OR BUILD_TESTING)\n  set(OPUS_BUILD_TESTING ON)\n  set(BUILD_TESTING ON)\nendif()\nadd_feature_info(OPUS_BUILD_TESTING OPUS_BUILD_TESTING ${OPUS_BUILD_TESTING_HELP_STR})\n\nset(OPUS_CUSTOM_MODES_HELP_STR \"enable non-Opus modes, e.g. 44.1 kHz & 2^n frames.\")\noption(OPUS_CUSTOM_MODES ${OPUS_CUSTOM_MODES_HELP_STR} OFF)\nadd_feature_info(OPUS_CUSTOM_MODES OPUS_CUSTOM_MODES ${OPUS_CUSTOM_MODES_HELP_STR})\n\nset(OPUS_BUILD_PROGRAMS_HELP_STR \"build programs.\")\noption(OPUS_BUILD_PROGRAMS ${OPUS_BUILD_PROGRAMS_HELP_STR} OFF)\nadd_feature_info(OPUS_BUILD_PROGRAMS OPUS_BUILD_PROGRAMS ${OPUS_BUILD_PROGRAMS_HELP_STR})\n\nset(OPUS_DISABLE_INTRINSICS_HELP_STR \"disable all intrinsics optimizations.\")\noption(OPUS_DISABLE_INTRINSICS ${OPUS_DISABLE_INTRINSICS_HELP_STR} OFF)\nadd_feature_info(OPUS_DISABLE_INTRINSICS OPUS_DISABLE_INTRINSICS ${OPUS_DISABLE_INTRINSICS_HELP_STR})\n\nset(OPUS_FIXED_POINT_HELP_STR \"compile as fixed-point (for machines without a fast enough FPU).\")\noption(OPUS_FIXED_POINT ${OPUS_FIXED_POINT_HELP_STR} OFF)\nadd_feature_info(OPUS_FIXED_POINT OPUS_FIXED_POINT ${OPUS_FIXED_POINT_HELP_STR})\n\nset(OPUS_ENABLE_FLOAT_API_HELP_STR \"compile with the floating point API (for machines with float library).\")\noption(OPUS_ENABLE_FLOAT_API ${OPUS_ENABLE_FLOAT_API_HELP_STR} ON)\nadd_feature_info(OPUS_ENABLE_FLOAT_API OPUS_ENABLE_FLOAT_API ${OPUS_ENABLE_FLOAT_API_HELP_STR})\n\nset(OPUS_FLOAT_APPROX_HELP_STR \"enable floating point approximations (Ensure your platform supports IEEE 754 before enabling).\")\noption(OPUS_FLOAT_APPROX ${OPUS_FLOAT_APPROX_HELP_STR} OFF)\nadd_feature_info(OPUS_FLOAT_APPROX OPUS_FLOAT_APPROX ${OPUS_FLOAT_APPROX_HELP_STR})\n\nset(OPUS_ASSERTIONS_HELP_STR \"additional software error checking.\")\noption(OPUS_ASSERTIONS ${OPUS_ASSERTIONS_HELP_STR} OFF)\nadd_feature_info(OPUS_ASSERTIONS OPUS_ASSERTIONS ${OPUS_ASSERTIONS_HELP_STR})\n\nset(OPUS_HARDENING_HELP_STR \"run-time checks that are cheap and safe for use in production.\")\noption(OPUS_HARDENING ${OPUS_HARDENING_HELP_STR} ON)\nadd_feature_info(OPUS_HARDENING OPUS_HARDENING ${OPUS_HARDENING_HELP_STR})\n\nset(OPUS_FUZZING_HELP_STR \"causes the encoder to make random decisions (do not use in production).\")\noption(OPUS_FUZZING ${OPUS_FUZZING_HELP_STR} OFF)\nadd_feature_info(OPUS_FUZZING OPUS_FUZZING ${OPUS_FUZZING_HELP_STR})\n\nset(OPUS_CHECK_ASM_HELP_STR \"enable bit-exactness checks between optimized and c implementations.\")\noption(OPUS_CHECK_ASM ${OPUS_CHECK_ASM_HELP_STR} OFF)\nadd_feature_info(OPUS_CHECK_ASM OPUS_CHECK_ASM ${OPUS_CHECK_ASM_HELP_STR})\n\nset(OPUS_DNN_FLOAT_DEBUG_HELP_STR \"Run DNN computations as float for debugging purposes.\")\noption(OPUS_DNN_FLOAT_DEBUG ${OPUS_DNN_FLOAT_DEBUG_HELP_STR} OFF)\nadd_feature_info(OPUS_DNN_FLOAT_DEBUG OPUS_DNN_FLOAT_DEBUG ${OPUS_DNN_FLOAT_DEBUG_HELP_STR})\n\nset(OPUS_INSTALL_PKG_CONFIG_MODULE_HELP_STR \"install pkg-config module.\")\noption(OPUS_INSTALL_PKG_CONFIG_MODULE ${OPUS_INSTALL_PKG_CONFIG_MODULE_HELP_STR} ON)\nadd_feature_info(OPUS_INSTALL_PKG_CONFIG_MODULE OPUS_INSTALL_PKG_CONFIG_MODULE ${OPUS_INSTALL_PKG_CONFIG_MODULE_HELP_STR})\n\nset(OPUS_INSTALL_CMAKE_CONFIG_MODULE_HELP_STR \"install CMake package config module.\")\noption(OPUS_INSTALL_CMAKE_CONFIG_MODULE ${OPUS_INSTALL_CMAKE_CONFIG_MODULE_HELP_STR} ON)\nadd_feature_info(OPUS_INSTALL_CMAKE_CONFIG_MODULE OPUS_INSTALL_CMAKE_CONFIG_MODULE ${OPUS_INSTALL_CMAKE_CONFIG_MODULE_HELP_STR})\n\nset(OPUS_DRED_HELP_STR \"enable DRED.\")\noption(OPUS_DRED ${OPUS_DRED_HELP_STR} OFF)\nadd_feature_info(OPUS_DRED OPUS_DRED ${OPUS_DRED_HELP_STR})\n\nset(OPUS_OSCE_HELP_STR \"enable OSCE.\")\noption(OPUS_OSCE ${OPUS_OSCE_HELP_STR} OFF)\nadd_feature_info(OPUS_OSCE OPUS_OSCE ${OPUS_OSCE_HELP_STR})\n\nif(APPLE)\n  set(OPUS_BUILD_FRAMEWORK_HELP_STR \"build Framework bundle for Apple systems.\")\n  option(OPUS_BUILD_FRAMEWORK ${OPUS_BUILD_FRAMEWORK_HELP_STR} OFF)\n  add_feature_info(OPUS_BUILD_FRAMEWORK OPUS_BUILD_FRAMEWORK ${OPUS_BUILD_FRAMEWORK_HELP_STR})\nendif()\n\nif(MSVC)\n  set(OPUS_STATIC_RUNTIME_HELP_STR \"build with static runtime library.\")\n  option(OPUS_STATIC_RUNTIME ${OPUS_STATIC_RUNTIME_HELP_STR} OFF)\n  add_feature_info(OPUS_STATIC_RUNTIME OPUS_STATIC_RUNTIME ${OPUS_STATIC_RUNTIME_HELP_STR})\nendif()\n\nset(OPUS_FIXED_POINT_DEBUG_HELP_STR \"debug fixed-point implementation.\")\ncmake_dependent_option(OPUS_FIXED_POINT_DEBUG\n                      ${OPUS_FIXED_POINT_DEBUG_HELP_STR}\n                      ON\n                      \"OPUS_FIXED_POINT; OPUS_FIXED_POINT_DEBUG\"\n                      OFF)\nadd_feature_info(OPUS_FIXED_POINT_DEBUG OPUS_FIXED_POINT_DEBUG ${OPUS_FIXED_POINT_DEBUG_HELP_STR})\n\nset(OPUS_VAR_ARRAYS_HELP_STR \"use variable length arrays for stack arrays.\")\ncmake_dependent_option(OPUS_VAR_ARRAYS\n                      ${OPUS_VAR_ARRAYS_HELP_STR}\n                      ON\n                      \"VLA_SUPPORTED; NOT OPUS_USE_ALLOCA; NOT OPUS_NONTHREADSAFE_PSEUDOSTACK\"\n                      OFF)\nadd_feature_info(OPUS_VAR_ARRAYS OPUS_VAR_ARRAYS ${OPUS_VAR_ARRAYS_HELP_STR})\n\nset(OPUS_USE_ALLOCA_HELP_STR \"use alloca for stack arrays (on non-C99 compilers).\")\ncmake_dependent_option(OPUS_USE_ALLOCA\n                       ${OPUS_USE_ALLOCA_HELP_STR}\n                       ON\n                       \"USE_ALLOCA_SUPPORTED; NOT OPUS_VAR_ARRAYS; NOT OPUS_NONTHREADSAFE_PSEUDOSTACK\"\n                       OFF)\nadd_feature_info(OPUS_USE_ALLOCA OPUS_USE_ALLOCA ${OPUS_USE_ALLOCA_HELP_STR})\n\nset(OPUS_NONTHREADSAFE_PSEUDOSTACK_HELP_STR \"use a non threadsafe pseudostack when neither variable length arrays or alloca is supported.\")\ncmake_dependent_option(OPUS_NONTHREADSAFE_PSEUDOSTACK\n                       ${OPUS_NONTHREADSAFE_PSEUDOSTACK_HELP_STR}\n                       ON\n                       \"NOT OPUS_VAR_ARRAYS; NOT OPUS_USE_ALLOCA\"\n                       OFF)\nadd_feature_info(OPUS_NONTHREADSAFE_PSEUDOSTACK OPUS_NONTHREADSAFE_PSEUDOSTACK ${OPUS_NONTHREADSAFE_PSEUDOSTACK_HELP_STR})\n\nset(OPUS_FAST_MATH_HELP_STR \"enable fast math (unsupported and discouraged use, as code is not well tested with this build option).\")\ncmake_dependent_option(OPUS_FAST_MATH\n                       ${OPUS_FAST_MATH_HELP_STR}\n                       ON\n                       \"OPUS_FLOAT_APPROX; OPUS_FAST_MATH; FAST_MATH_SUPPORTED\"\n                       OFF)\nadd_feature_info(OPUS_FAST_MATH OPUS_FAST_MATH ${OPUS_FAST_MATH_HELP_STR})\n\nset(OPUS_STACK_PROTECTOR_HELP_STR \"use stack protection.\")\ncmake_dependent_option(OPUS_STACK_PROTECTOR\n                       ${OPUS_STACK_PROTECTOR_HELP_STR}\n                       ON\n                       \"STACK_PROTECTOR_SUPPORTED\"\n                       OFF)\nadd_feature_info(OPUS_STACK_PROTECTOR OPUS_STACK_PROTECTOR ${OPUS_STACK_PROTECTOR_HELP_STR})\n\nif(NOT MSVC)\n  set(OPUS_FORTIFY_SOURCE_HELP_STR \"add protection against buffer overflows.\")\n  cmake_dependent_option(OPUS_FORTIFY_SOURCE\n                         ${OPUS_FORTIFY_SOURCE_HELP_STR}\n                         ON\n                         \"FORTIFY_SOURCE_SUPPORTED\"\n                         OFF)\n  add_feature_info(OPUS_FORTIFY_SOURCE OPUS_FORTIFY_SOURCE ${OPUS_FORTIFY_SOURCE_HELP_STR})\nendif()\n\nif(MINGW AND (OPUS_FORTIFY_SOURCE OR OPUS_STACK_PROTECTOR))\n  # ssp lib is needed for security features for MINGW\n  list(APPEND OPUS_REQUIRED_LIBRARIES ssp)\nendif()\n\nif(OPUS_CPU_X86 OR OPUS_CPU_X64)\n  set(OPUS_X86_MAY_HAVE_SSE_HELP_STR \"does runtime check for SSE1 support.\")\n  cmake_dependent_option(OPUS_X86_MAY_HAVE_SSE\n                         ${OPUS_X86_MAY_HAVE_SSE_HELP_STR}\n                         ON\n                         \"SSE1_SUPPORTED; NOT OPUS_DISABLE_INTRINSICS\"\n                         OFF)\n  add_feature_info(OPUS_X86_MAY_HAVE_SSE OPUS_X86_MAY_HAVE_SSE ${OPUS_X86_MAY_HAVE_SSE_HELP_STR})\n\n  set(OPUS_X86_MAY_HAVE_SSE2_HELP_STR \"does runtime check for SSE2 support.\")\n  cmake_dependent_option(OPUS_X86_MAY_HAVE_SSE2\n                         ${OPUS_X86_MAY_HAVE_SSE2_HELP_STR}\n                         ON\n                         \"SSE2_SUPPORTED; NOT OPUS_DISABLE_INTRINSICS\"\n                         OFF)\n  add_feature_info(OPUS_X86_MAY_HAVE_SSE2 OPUS_X86_MAY_HAVE_SSE2 ${OPUS_X86_MAY_HAVE_SSE2_HELP_STR})\n\n  set(OPUS_X86_MAY_HAVE_SSE4_1_HELP_STR \"does runtime check for SSE4.1 support.\")\n  cmake_dependent_option(OPUS_X86_MAY_HAVE_SSE4_1\n                         ${OPUS_X86_MAY_HAVE_SSE4_1_HELP_STR}\n                         ON\n                         \"SSE4_1_SUPPORTED; NOT OPUS_DISABLE_INTRINSICS\"\n                         OFF)\n  add_feature_info(OPUS_X86_MAY_HAVE_SSE4_1 OPUS_X86_MAY_HAVE_SSE4_1 ${OPUS_X86_MAY_HAVE_SSE4_1_HELP_STR})\n\n  set(OPUS_X86_MAY_HAVE_AVX2_HELP_STR \"does runtime check for AVX FMA AVX2 support.\")\n  cmake_dependent_option(OPUS_X86_MAY_HAVE_AVX2\n                         ${OPUS_X86_MAY_HAVE_AVX2_HELP_STR}\n                         ON\n                         \"AVX2_SUPPORTED; NOT OPUS_DISABLE_INTRINSICS\"\n                         OFF)\n  add_feature_info(OPUS_X86_MAY_HAVE_AVX2 OPUS_X86_MAY_HAVE_AVX2 ${OPUS_X86_MAY_HAVE_AVX2_HELP_STR})\n\n  # PRESUME depends on MAY HAVE, but PRESUME will override runtime detection\n  set(OPUS_X86_PRESUME_SSE_HELP_STR \"assume target CPU has SSE1 support (override runtime check).\")\n  set(OPUS_X86_PRESUME_SSE2_HELP_STR \"assume target CPU has SSE2 support (override runtime check).\")\n  if(OPUS_CPU_X64) # Assume x86_64 has up to SSE2 support\n    cmake_dependent_option(OPUS_X86_PRESUME_SSE\n                           ${OPUS_X86_PRESUME_SSE_HELP_STR}\n                           ON\n                           \"OPUS_X86_MAY_HAVE_SSE; NOT OPUS_DISABLE_INTRINSICS\"\n                           OFF)\n\n    cmake_dependent_option(OPUS_X86_PRESUME_SSE2\n                           ${OPUS_X86_PRESUME_SSE2_HELP_STR}\n                           ON\n                           \"OPUS_X86_MAY_HAVE_SSE2; NOT OPUS_DISABLE_INTRINSICS\"\n                           OFF)\n  else()\n    cmake_dependent_option(OPUS_X86_PRESUME_SSE\n                           ${OPUS_X86_PRESUME_SSE_HELP_STR}\n                           OFF\n                           \"OPUS_X86_MAY_HAVE_SSE; NOT OPUS_DISABLE_INTRINSICS\"\n                           OFF)\n\n    cmake_dependent_option(OPUS_X86_PRESUME_SSE2\n                           ${OPUS_X86_PRESUME_SSE2_HELP_STR}\n                           OFF\n                           \"OPUS_X86_MAY_HAVE_SSE2; NOT OPUS_DISABLE_INTRINSICS\"\n                           OFF)\n  endif()\n  add_feature_info(OPUS_X86_PRESUME_SSE OPUS_X86_PRESUME_SSE ${OPUS_X86_PRESUME_SSE_HELP_STR})\n  add_feature_info(OPUS_X86_PRESUME_SSE2 OPUS_X86_PRESUME_SSE2 ${OPUS_X86_PRESUME_SSE2_HELP_STR})\n\n  set(OPUS_X86_PRESUME_SSE4_1_HELP_STR \"assume target CPU has SSE4.1 support (override runtime check).\")\n  cmake_dependent_option(OPUS_X86_PRESUME_SSE4_1\n                         ${OPUS_X86_PRESUME_SSE4_1_HELP_STR}\n                         OFF\n                         \"OPUS_X86_MAY_HAVE_SSE4_1; NOT OPUS_DISABLE_INTRINSICS\"\n                         OFF)\n  add_feature_info(OPUS_X86_PRESUME_SSE4_1 OPUS_X86_PRESUME_SSE4_1 ${OPUS_X86_PRESUME_SSE4_1_HELP_STR})\n\n  set(OPUS_X86_PRESUME_AVX2_HELP_STR \"assume target CPU has AVX FMA AVX2 support (override runtime check).\")\n  cmake_dependent_option(OPUS_X86_PRESUME_AVX2\n                         ${OPUS_X86_PRESUME_AVX2_HELP_STR}\n                         OFF\n                         \"OPUS_X86_MAY_HAVE_AVX2; NOT OPUS_DISABLE_INTRINSICS\"\n                         OFF)\n  add_feature_info(OPUS_X86_PRESUME_AVX2 OPUS_X86_PRESUME_AVX2 ${OPUS_X86_PRESUME_AVX2_HELP_STR})\nendif()\n\nfeature_summary(WHAT ALL)\n\nset_package_properties(Git\n                       PROPERTIES\n                       TYPE\n                       REQUIRED\n                       DESCRIPTION\n                       \"fast, scalable, distributed revision control system\"\n                       URL\n                       \"https://git-scm.com/\"\n                       PURPOSE\n                       \"required to set up package version\")\n\nset(Opus_PUBLIC_HEADER\n    ${CMAKE_CURRENT_SOURCE_DIR}/include/opus.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/include/opus_defines.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/include/opus_multistream.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/include/opus_projection.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/include/opus_types.h)\n\nif(OPUS_CUSTOM_MODES)\n  list(APPEND Opus_PUBLIC_HEADER ${CMAKE_CURRENT_SOURCE_DIR}/include/opus_custom.h)\nendif()\n\nif(MSVC)\n  if(OPUS_STATIC_RUNTIME)\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n  else()\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>DLL\")\n  endif()\nendif()\n\nadd_library(opus ${opus_headers} ${opus_sources} ${opus_sources_float} ${Opus_PUBLIC_HEADER})\nadd_library(Opus::opus ALIAS opus)\n\nget_library_version(OPUS_LIBRARY_VERSION OPUS_LIBRARY_VERSION_MAJOR)\nmessage(DEBUG \"Opus library version: ${OPUS_LIBRARY_VERSION}\")\n\nset_target_properties(opus\n                      PROPERTIES SOVERSION\n                                 ${OPUS_LIBRARY_VERSION_MAJOR}\n                                 VERSION\n                                 ${OPUS_LIBRARY_VERSION}\n                                 PUBLIC_HEADER\n                                 \"${Opus_PUBLIC_HEADER}\")\n\ntarget_include_directories(\n  opus\n  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n         $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n         $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/opus>\n  PRIVATE ${CMAKE_CURRENT_BINARY_DIR}\n          ${CMAKE_CURRENT_SOURCE_DIR}\n          ${CMAKE_CURRENT_SOURCE_DIR}/dnn\n          celt\n          silk)\n\ntarget_link_libraries(opus PRIVATE ${OPUS_REQUIRED_LIBRARIES})\ntarget_compile_definitions(opus PRIVATE OPUS_BUILD)\n\nif(OPUS_FIXED_POINT_DEBUG)\n  target_compile_definitions(opus PRIVATE FIXED_DEBUG)\nendif()\n\nif(OPUS_FORTIFY_SOURCE AND NOT MSVC)\n  target_compile_definitions(opus PRIVATE\n                             $<$<NOT:$<CONFIG:debug>>:_FORTIFY_SOURCE=2>)\nendif()\n\nif(OPUS_FLOAT_APPROX)\n  target_compile_definitions(opus PRIVATE FLOAT_APPROX)\nendif()\n\nif(OPUS_ASSERTIONS)\n  target_compile_definitions(opus PRIVATE ENABLE_ASSERTIONS)\nendif()\n\nif(OPUS_HARDENING)\n  target_compile_definitions(opus PRIVATE ENABLE_HARDENING)\nendif()\n\nif(OPUS_FUZZING)\n  target_compile_definitions(opus PRIVATE FUZZING)\nendif()\n\nif(OPUS_CHECK_ASM)\n  target_compile_definitions(opus PRIVATE OPUS_CHECK_ASM)\nendif()\n\nif(NOT OPUS_DNN_FLOAT_DEBUG)\n  target_compile_definitions(opus PRIVATE DISABLE_DEBUG_FLOAT)\nendif()\n\nif(OPUS_VAR_ARRAYS)\n  target_compile_definitions(opus PRIVATE VAR_ARRAYS)\nelseif(OPUS_USE_ALLOCA)\n  target_compile_definitions(opus PRIVATE USE_ALLOCA)\nelseif(OPUS_NONTHREADSAFE_PSEUDOSTACK)\n  target_compile_definitions(opus PRIVATE NONTHREADSAFE_PSEUDOSTACK)\nelse()\n  message(ERROR \"Need to set a define for stack allocation\")\nendif()\n\nif(OPUS_CUSTOM_MODES)\n  target_compile_definitions(opus PRIVATE CUSTOM_MODES)\nendif()\n\nif(OPUS_FAST_MATH)\n  if(MSVC)\n    target_compile_options(opus PRIVATE /fp:fast)\n  else()\n    target_compile_options(opus PRIVATE -ffast-math)\n  endif()\nendif()\n\nif(OPUS_STACK_PROTECTOR)\n  if(MSVC)\n    target_compile_options(opus PRIVATE /GS)\n  else()\n    target_compile_options(opus PRIVATE -fstack-protector-strong)\n  endif()\nelseif(STACK_PROTECTOR_DISABLED_SUPPORTED)\n  target_compile_options(opus PRIVATE /GS-)\nendif()\n\nif(BUILD_SHARED_LIBS)\n  if(WIN32)\n    target_compile_definitions(opus PRIVATE DLL_EXPORT)\n  elseif(HIDDEN_VISIBILITY_SUPPORTED)\n    set_target_properties(opus PROPERTIES C_VISIBILITY_PRESET hidden)\n  endif()\nendif()\n\nadd_sources_group(opus silk ${silk_headers} ${silk_sources})\nadd_sources_group(opus celt ${celt_headers} ${celt_sources})\n\nif(OPUS_FIXED_POINT)\n  add_sources_group(opus silk ${silk_sources_fixed})\n  target_include_directories(opus PRIVATE silk/fixed)\n  target_compile_definitions(opus PRIVATE FIXED_POINT=1)\nelse()\n  add_sources_group(opus silk ${silk_sources_float})\n  target_include_directories(opus PRIVATE silk/float)\nendif()\n\nif(NOT OPUS_ENABLE_FLOAT_API)\n  target_compile_definitions(opus PRIVATE DISABLE_FLOAT_API)\nendif()\n\nif (OPUS_DEEP_PLC OR OPUS_DRED OR OPUS_OSCE)\n  add_sources_group(opus lpcnet ${deep_plc_headers} ${deep_plc_sources})\n  set(OPUS_DNN TRUE)\nelse()\n  set(OPUS_DNN FALSE)\nendif()\n\nif (OPUS_DNN)\n  add_sources_group(opus lpcnet ${deep_plc_headers} ${deep_plc_sources})\n  target_compile_definitions(opus PRIVATE ENABLE_DEEP_PLC)\nendif()\n\nif (OPUS_DRED)\n  add_sources_group(opus lpcnet ${dred_headers} ${dred_sources})\n  target_compile_definitions(opus PRIVATE ENABLE_DRED)\nendif()\n\nif (OPUS_OSCE)\n  add_sources_group(opus lpcnet ${osce_headers} ${osce_sources})\n  target_compile_definitions(opus PRIVATE ENABLE_OSCE)\nendif()\n\nif(NOT OPUS_DISABLE_INTRINSICS)\n  if(((OPUS_X86_MAY_HAVE_SSE AND NOT OPUS_X86_PRESUME_SSE) OR\n     (OPUS_X86_MAY_HAVE_SSE2 AND NOT OPUS_X86_PRESUME_SSE2) OR\n     (OPUS_X86_MAY_HAVE_SSE4_1 AND NOT OPUS_X86_PRESUME_SSE4_1) OR\n     (OPUS_X86_MAY_HAVE_AVX2 AND NOT OPUS_X86_PRESUME_AVX2)) AND\n      RUNTIME_CPU_CAPABILITY_DETECTION)\n    target_compile_definitions(opus PRIVATE OPUS_HAVE_RTCD)\n    if(NOT MSVC)\n      if(CPU_INFO_BY_ASM_SUPPORTED)\n        target_compile_definitions(opus PRIVATE CPU_INFO_BY_ASM)\n      elseif(CPU_INFO_BY_C_SUPPORTED)\n        target_compile_definitions(opus PRIVATE CPU_INFO_BY_C)\n      else()\n        message(ERROR \"Runtime cpu capability detection is enabled while CPU_INFO is not supported\")\n      endif()\n    endif()\n    add_sources_group(opus celt ${celt_sources_x86_rtcd})\n    add_sources_group(opus silk ${silk_sources_x86_rtcd})\n    if (OPUS_DNN)\n      add_sources_group(opus lpcnet ${dnn_sources_x86_rtcd})\n    endif()\n  endif()\n\n  if(SSE1_SUPPORTED)\n    if(OPUS_X86_MAY_HAVE_SSE)\n      add_sources_group(opus celt ${celt_sources_sse})\n      target_compile_definitions(opus PRIVATE OPUS_X86_MAY_HAVE_SSE)\n      if(NOT MSVC)\n        set_source_files_properties(${celt_sources_sse} PROPERTIES COMPILE_FLAGS -msse)\n      endif()\n    endif()\n    if(OPUS_X86_PRESUME_SSE)\n      target_compile_definitions(opus PRIVATE OPUS_X86_PRESUME_SSE)\n      if(NOT MSVC)\n        target_compile_options(opus PRIVATE -msse)\n      endif()\n    endif()\n  endif()\n\n  if(SSE2_SUPPORTED)\n    if(OPUS_X86_MAY_HAVE_SSE2)\n      add_sources_group(opus celt ${celt_sources_sse2})\n      if (OPUS_DNN)\n        add_sources_group(opus lpcnet ${dnn_sources_sse2})\n      endif()\n      target_compile_definitions(opus PRIVATE OPUS_X86_MAY_HAVE_SSE2)\n      if(NOT MSVC)\n        set_source_files_properties(${celt_sources_sse2} ${dnn_sources_sse2} PROPERTIES COMPILE_FLAGS -msse2)\n      endif()\n    endif()\n    if(OPUS_X86_PRESUME_SSE2)\n      target_compile_definitions(opus PRIVATE OPUS_X86_PRESUME_SSE2)\n      if(NOT MSVC)\n        target_compile_options(opus PRIVATE -msse2)\n      endif()\n    endif()\n  endif()\n\n  if(SSE4_1_SUPPORTED)\n    if(OPUS_X86_MAY_HAVE_SSE4_1)\n      add_sources_group(opus celt ${celt_sources_sse4_1})\n      add_sources_group(opus silk ${silk_sources_sse4_1})\n      if (OPUS_DNN)\n        add_sources_group(opus lpcnet ${dnn_sources_sse4_1})\n      endif()\n      target_compile_definitions(opus PRIVATE OPUS_X86_MAY_HAVE_SSE4_1)\n      if(NOT MSVC)\n        set_source_files_properties(${celt_sources_sse4_1} ${silk_sources_sse4_1} ${dnn_sources_sse4_1} PROPERTIES COMPILE_FLAGS -msse4.1)\n      endif()\n\n      if(OPUS_FIXED_POINT)\n        add_sources_group(opus silk ${silk_sources_fixed_sse4_1})\n        if(NOT MSVC)\n          set_source_files_properties(${silk_sources_fixed_sse4_1} PROPERTIES COMPILE_FLAGS -msse4.1)\n        endif()\n      endif()\n    endif()\n    if(OPUS_X86_PRESUME_SSE4_1)\n      target_compile_definitions(opus PRIVATE OPUS_X86_PRESUME_SSE4_1)\n      if(NOT MSVC)\n        target_compile_options(opus PRIVATE -msse4.1)\n      endif()\n    endif()\n  endif()\n\n  if(AVX2_SUPPORTED)\n    if(OPUS_X86_MAY_HAVE_AVX2)\n      add_sources_group(opus celt ${celt_sources_avx2})\n      add_sources_group(opus silk ${silk_sources_avx2})\n      if (NOT OPUS_FIXED_POINT)\n        add_sources_group(opus silk ${silk_sources_float_avx2})\n      endif()\n      if (OPUS_DNN)\n        add_sources_group(opus lpcnet ${dnn_sources_avx2})\n      endif()\n      target_compile_definitions(opus PRIVATE OPUS_X86_MAY_HAVE_AVX2)\n      if(MSVC)\n        set(AVX2_FLAGS \"${AVX2_FLAGS} /arch:AVX2\")\n      else()\n        set(AVX2_FLAGS \"${AVX2_FLAGS} -mavx2 -mfma -mavx\")\n      endif()\n      set_source_files_properties(${celt_sources_avx2} PROPERTIES COMPILE_FLAGS ${AVX2_FLAGS})\n      set_source_files_properties(${silk_sources_avx2} PROPERTIES COMPILE_FLAGS ${AVX2_FLAGS})\n      if (NOT OPUS_FIXED_POINT)\n        set_source_files_properties(${silk_sources_float_avx2} PROPERTIES COMPILE_FLAGS ${AVX2_FLAGS})\n      endif()\n      set_source_files_properties(${dnn_sources_avx2} PROPERTIES COMPILE_FLAGS ${AVX2_FLAGS})\n    endif()\n    if(OPUS_X86_PRESUME_AVX2)\n      target_compile_definitions(opus PRIVATE OPUS_X86_PRESUME_AVX2)\n      target_compile_definitions(opus PRIVATE OPUS_X86_PRESUME_SSE4_1)\n      if(NOT MSVC)\n        target_compile_options(opus PRIVATE -mavx2 -mfma -mavx)\n      endif()\n    endif()\n  endif()\n\n  if(MSVC)\n    if(AVX2_SUPPORTED AND OPUS_X86_PRESUME_AVX2) # on 64 bit and 32 bits\n      add_definitions(/arch:AVX2)\n    elseif(OPUS_CPU_X86) # if AVX not supported then set SSE flag\n      if((SSE4_1_SUPPORTED AND OPUS_X86_PRESUME_SSE4_1)\n         OR (SSE2_SUPPORTED AND OPUS_X86_PRESUME_SSE2))\n        target_compile_definitions(opus PRIVATE /arch:SSE2)\n      elseif(SSE1_SUPPORTED AND OPUS_X86_PRESUME_SSE)\n        target_compile_definitions(opus PRIVATE /arch:SSE)\n      endif()\n    endif()\n  endif()\n\n  if(COMPILER_SUPPORT_NEON)\n    if(OPUS_MAY_HAVE_NEON)\n      if(RUNTIME_CPU_CAPABILITY_DETECTION)\n        message(STATUS \"OPUS_MAY_HAVE_NEON enabling runtime detection\")\n        target_compile_definitions(opus PRIVATE OPUS_HAVE_RTCD)\n        add_sources_group(opus celt ${celt_sources_arm_rtcd})\n        add_sources_group(opus silk ${silk_sources_arm_rtcd})\n      else()\n        message(ERROR \"Runtime cpu capability detection needed for MAY_HAVE_NEON\")\n      endif()\n      # Do runtime check for NEON\n      target_compile_definitions(opus\n                                 PRIVATE\n                                 OPUS_ARM_MAY_HAVE_NEON\n                                 OPUS_ARM_MAY_HAVE_NEON_INTR)\n    endif()\n\n    add_sources_group(opus celt ${celt_sources_arm_neon_intr})\n    add_sources_group(opus silk ${silk_sources_arm_neon_intr})\n    if (OPUS_DNN)\n      add_sources_group(opus lpcnet ${dnn_sources_arm_neon})\n    endif()\n\n    # silk arm neon depends on main_Fix.h\n    target_include_directories(opus PRIVATE silk/fixed)\n\n    if(OPUS_FIXED_POINT)\n      add_sources_group(opus silk ${silk_sources_fixed_arm_neon_intr})\n    endif()\n\n    if(OPUS_PRESUME_NEON)\n      target_compile_definitions(opus\n                                 PRIVATE\n                                 OPUS_ARM_PRESUME_NEON\n                                 OPUS_ARM_PRESUME_NEON_INTR)\n    endif()\n  endif()\nendif()\n\ntarget_compile_definitions(opus\n                           PRIVATE\n                           $<$<BOOL:${HAVE_LRINT}>:HAVE_LRINT>\n                           $<$<BOOL:${HAVE_LRINTF}>:HAVE_LRINTF>)\n\nif(OPUS_BUILD_FRAMEWORK)\n  set_target_properties(opus PROPERTIES\n                        FRAMEWORK TRUE\n                        FRAMEWORK_VERSION ${PROJECT_VERSION}\n                        MACOSX_FRAMEWORK_IDENTIFIER org.xiph.opus\n                        MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${PROJECT_VERSION}\n                        MACOSX_FRAMEWORK_BUNDLE_VERSION ${PROJECT_VERSION}\n                        XCODE_ATTRIBUTE_INSTALL_PATH \"@rpath\"\n                        OUTPUT_NAME Opus)\nendif()\n\ninstall(TARGETS opus\n        EXPORT OpusTargets\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        FRAMEWORK DESTINATION ${CMAKE_INSTALL_PREFIX}\n        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/opus)\n\nif(OPUS_INSTALL_PKG_CONFIG_MODULE)\n  set(prefix ${CMAKE_INSTALL_PREFIX})\n  set(exec_prefix ${CMAKE_INSTALL_PREFIX})\n  set(libdir ${CMAKE_INSTALL_FULL_LIBDIR})\n  set(includedir ${CMAKE_INSTALL_FULL_INCLUDEDIR})\n  set(VERSION ${PACKAGE_VERSION})\n  if(HAVE_LIBM)\n    set(LIBM \"-lm\")\n  endif()\n  configure_file(opus.pc.in opus.pc)\n  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/opus.pc\n          DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\nendif()\n\nif(OPUS_INSTALL_CMAKE_CONFIG_MODULE)\n  set(CPACK_GENERATOR TGZ)\n  include(CPack)\n  set(CMAKE_INSTALL_PACKAGEDIR ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\n  install(EXPORT OpusTargets\n          NAMESPACE Opus::\n          DESTINATION ${CMAKE_INSTALL_PACKAGEDIR})\n\n  include(CMakePackageConfigHelpers)\n\n  set(INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR})\n  configure_package_config_file(${PROJECT_SOURCE_DIR}/cmake/OpusConfig.cmake.in\n                                OpusConfig.cmake\n                                INSTALL_DESTINATION\n                                ${CMAKE_INSTALL_PACKAGEDIR}\n                                PATH_VARS\n                                INCLUDE_INSTALL_DIR\n                                INSTALL_PREFIX\n                                ${CMAKE_INSTALL_PREFIX})\n  write_basic_package_version_file(OpusConfigVersion.cmake\n                                   VERSION ${PROJECT_VERSION}\n                                   COMPATIBILITY SameMajorVersion)\n  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/OpusConfig.cmake\n                ${CMAKE_CURRENT_BINARY_DIR}/OpusConfigVersion.cmake\n          DESTINATION ${CMAKE_INSTALL_PACKAGEDIR})\nendif()\n\nif(OPUS_BUILD_PROGRAMS)\n  # demo\n  if(OPUS_CUSTOM_MODES)\n    add_executable(opus_custom_demo ${opus_custom_demo_sources})\n    target_include_directories(opus_custom_demo\n                               PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n    target_link_libraries(opus_custom_demo PRIVATE opus)\n    target_compile_definitions(opus_custom_demo PRIVATE OPUS_BUILD)\n  endif()\n\n  add_executable(opus_demo ${opus_demo_sources})\n  target_include_directories(opus_demo PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n  target_include_directories(opus_demo PRIVATE silk) # debug.h\n  target_include_directories(opus_demo PRIVATE celt) # arch.h\n  target_include_directories(opus_demo PRIVATE dnn)\n  target_link_libraries(opus_demo PRIVATE opus ${OPUS_REQUIRED_LIBRARIES})\n  target_compile_definitions(opus_demo PRIVATE OPUS_BUILD)\n\n  # compare\n  add_executable(opus_compare ${opus_compare_sources})\n  target_include_directories(opus_compare PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n  target_link_libraries(opus_compare PRIVATE opus ${OPUS_REQUIRED_LIBRARIES})\nendif()\n\nif(BUILD_TESTING AND NOT BUILD_SHARED_LIBS)\n  enable_testing()\n\n  # tests\n  add_executable(test_opus_decode ${test_opus_decode_sources})\n  target_include_directories(test_opus_decode\n                             PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n  target_link_libraries(test_opus_decode PRIVATE opus)\n  target_compile_definitions(test_opus_decode PRIVATE OPUS_BUILD)\n  if(OPUS_FIXED_POINT)\n    target_compile_definitions(test_opus_decode PRIVATE DISABLE_FLOAT_API)\n  endif()\n  add_test(NAME test_opus_decode COMMAND ${CMAKE_COMMAND}\n           -DTEST_EXECUTABLE=$<TARGET_FILE:test_opus_decode>\n           -DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}\n           -P \"${PROJECT_SOURCE_DIR}/cmake/RunTest.cmake\")\n\n  add_executable(test_opus_padding ${test_opus_padding_sources})\n  target_include_directories(test_opus_padding\n                             PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n  target_link_libraries(test_opus_padding PRIVATE opus)\n  add_test(NAME test_opus_padding COMMAND ${CMAKE_COMMAND}\n           -DTEST_EXECUTABLE=$<TARGET_FILE:test_opus_padding>\n           -DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}\n           -P \"${PROJECT_SOURCE_DIR}/cmake/RunTest.cmake\")\n\n  add_executable(test_opus_api ${test_opus_api_sources})\n  target_include_directories(test_opus_api\n                            PRIVATE ${CMAKE_CURRENT_BINARY_DIR} celt)\n  target_link_libraries(test_opus_api PRIVATE opus)\n  target_compile_definitions(test_opus_api PRIVATE OPUS_BUILD)\n  if(OPUS_FIXED_POINT)\n    target_compile_definitions(test_opus_api PRIVATE DISABLE_FLOAT_API)\n  endif()\n  add_test(NAME test_opus_api COMMAND ${CMAKE_COMMAND}\n        -DTEST_EXECUTABLE=$<TARGET_FILE:test_opus_api>\n        -DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}\n        -P \"${PROJECT_SOURCE_DIR}/cmake/RunTest.cmake\")\n\n  add_executable(test_opus_encode ${test_opus_encode_sources})\n  target_include_directories(test_opus_encode\n                            PRIVATE ${CMAKE_CURRENT_BINARY_DIR} celt dnn)\n  target_link_libraries(test_opus_encode PRIVATE opus)\n  target_compile_definitions(test_opus_encode PRIVATE OPUS_BUILD)\n  add_test(NAME test_opus_encode COMMAND ${CMAKE_COMMAND}\n        -DTEST_EXECUTABLE=$<TARGET_FILE:test_opus_encode>\n        -DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}\n        -P \"${PROJECT_SOURCE_DIR}/cmake/RunTest.cmake\")\n\n  add_executable(test_opus_extensions ${test_opus_extensions_sources})\n  target_include_directories(test_opus_extensions\n                            PRIVATE ${CMAKE_CURRENT_BINARY_DIR} celt dnn)\n  target_link_libraries(test_opus_extensions PRIVATE opus)\n  target_compile_definitions(test_opus_extensions PRIVATE OPUS_BUILD)\n  add_test(NAME test_opus_extensions COMMAND ${CMAKE_COMMAND}\n        -DTEST_EXECUTABLE=$<TARGET_FILE:test_opus_extensions>\n        -DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}\n        -P \"${PROJECT_SOURCE_DIR}/cmake/RunTest.cmake\")\n  if(OPUS_DRED)\n    add_executable(test_opus_dred ${test_opus_dred_sources})\n    target_include_directories(test_opus_dred\n                              PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n    target_link_libraries(test_opus_dred PRIVATE opus)\n    target_compile_definitions(test_opus_dred PRIVATE OPUS_BUILD)\n    add_test(NAME test_opus_dred COMMAND ${CMAKE_COMMAND}\n          -DTEST_EXECUTABLE=$<TARGET_FILE:test_opus_dred>\n          -DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}\n          -P \"${PROJECT_SOURCE_DIR}/cmake/RunTest.cmake\")\n  endif()\nendif()\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.8994140625,
          "content": "Copyright 2001-2023 Xiph.Org, Skype Limited, Octasic,\n                    Jean-Marc Valin, Timothy B. Terriberry,\n                    CSIRO, Gregory Maxwell, Mark Borgerding,\n                    Erik de Castro Lopo, Mozilla, Amazon\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n- Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n\n- Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n\n- Neither the name of Internet Society, IETF or IETF Trust, nor the\nnames of specific contributors, may be used to endorse or promote\nproducts derived from this software without specific prior written\npermission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER\nOR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nOpus is subject to the royalty-free patent licenses which are\nspecified at:\n\nXiph.Org Foundation:\nhttps://datatracker.ietf.org/ipr/1524/\n\nMicrosoft Corporation:\nhttps://datatracker.ietf.org/ipr/1914/\n\nBroadcom Corporation:\nhttps://datatracker.ietf.org/ipr/1526/\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "LICENSE_PLEASE_READ.txt",
          "type": "blob",
          "size": 0.6865234375,
          "content": "Contributions to the collaboration shall not be considered confidential.\n\nEach contributor represents and warrants that it has the right and\nauthority to license copyright in its contributions to the collaboration.\n\nEach contributor agrees to license the copyright in the contributions\nunder the Modified (2-clause or 3-clause) BSD License or the Clear BSD License.\n\nPlease see the IPR statements submitted to the IETF for the complete\npatent licensing details:\n\nXiph.Org Foundation:\nhttps://datatracker.ietf.org/ipr/1524/\n\nMicrosoft Corporation:\nhttps://datatracker.ietf.org/ipr/1914/\n\nSkype Limited:\nhttps://datatracker.ietf.org/ipr/1602/\n\nBroadcom Corporation:\nhttps://datatracker.ietf.org/ipr/1526/\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 14.8212890625,
          "content": "# Provide the full test output for failed tests when using the parallel\n# test suite (which is enabled by default with automake 1.13+).\nexport VERBOSE = yes\n\nAUTOMAKE_OPTIONS = subdir-objects\nACLOCAL_AMFLAGS = -I m4\n\nlib_LTLIBRARIES = libopus.la\n\nDIST_SUBDIRS = doc\n\nAM_CPPFLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/celt -I$(top_srcdir)/silk \\\n              -I$(top_srcdir)/silk/float -I$(top_srcdir)/silk/fixed $(NE10_CFLAGS) \\\n              -I$(top_srcdir)/dnn\n\ninclude celt_sources.mk\ninclude lpcnet_sources.mk\ninclude silk_sources.mk\ninclude opus_sources.mk\n\nLPCNET_SOURCES =\nif ENABLE_DEEP_PLC\nLPCNET_SOURCES += $(DEEP_PLC_SOURCES)\nendif\nif ENABLE_DRED\nLPCNET_SOURCES += $(DRED_SOURCES)\nendif\nif ENABLE_OSCE\nLPCNET_SOURCES += $(OSCE_SOURCES)\nendif\n\nif FIXED_POINT\nSILK_SOURCES += $(SILK_SOURCES_FIXED)\nif HAVE_SSE4_1\nSILK_SOURCES += $(SILK_SOURCES_SSE4_1) $(SILK_SOURCES_FIXED_SSE4_1)\nendif\nif HAVE_ARM_NEON_INTR\nSILK_SOURCES += $(SILK_SOURCES_FIXED_ARM_NEON_INTR)\nendif\nelse\nSILK_SOURCES += $(SILK_SOURCES_FLOAT)\nif HAVE_SSE4_1\nSILK_SOURCES += $(SILK_SOURCES_SSE4_1)\nendif\nif HAVE_AVX2\nSILK_SOURCES += $(SILK_SOURCES_FLOAT_AVX2)\nendif\nendif\n\nif DISABLE_FLOAT_API\nelse\nOPUS_SOURCES += $(OPUS_SOURCES_FLOAT)\nendif\n\nif CPU_X86\nif HAVE_RTCD\nCELT_SOURCES += $(CELT_SOURCES_X86_RTCD)\nSILK_SOURCES += $(SILK_SOURCES_X86_RTCD)\nif ENABLE_DEEP_PLC\nLPCNET_SOURCES += $(DNN_SOURCES_X86_RTCD)\nendif\nendif\nif HAVE_SSE\nCELT_SOURCES += $(CELT_SOURCES_SSE)\nendif\nif HAVE_SSE2\nCELT_SOURCES += $(CELT_SOURCES_SSE2)\nif ENABLE_DEEP_PLC\nLPCNET_SOURCES += $(DNN_SOURCES_SSE2)\nendif\nendif\nif HAVE_SSE4_1\nCELT_SOURCES += $(CELT_SOURCES_SSE4_1)\nif ENABLE_DEEP_PLC\nLPCNET_SOURCES += $(DNN_SOURCES_SSE4_1)\nendif\nendif\nif HAVE_AVX2\nSILK_SOURCES += $(SILK_SOURCES_AVX2)\nCELT_SOURCES += $(CELT_SOURCES_AVX2)\nif ENABLE_DEEP_PLC\nLPCNET_SOURCES += $(DNN_SOURCES_AVX2)\nendif\nendif\nendif\n\nif CPU_ARM\nif HAVE_RTCD\nCELT_SOURCES += $(CELT_SOURCES_ARM_RTCD)\nSILK_SOURCES += $(SILK_SOURCES_ARM_RTCD)\nif ENABLE_DEEP_PLC\nLPCNET_SOURCES += $(DNN_SOURCES_ARM_RTCD)\nendif\nendif\n\nif ENABLE_DEEP_PLC\nif HAVE_ARM_DOTPROD\nLPCNET_SOURCES += $(DNN_SOURCES_DOTPROD)\nendif\nif HAVE_ARM_NEON_INTR\nLPCNET_SOURCES += $(DNN_SOURCES_NEON)\nendif\nendif\n\nif HAVE_ARM_NEON_INTR\nCELT_SOURCES += $(CELT_SOURCES_ARM_NEON_INTR)\nSILK_SOURCES += $(SILK_SOURCES_ARM_NEON_INTR)\nendif\n\nif HAVE_ARM_NE10\nCELT_SOURCES += $(CELT_SOURCES_ARM_NE10)\nendif\n\nif OPUS_ARM_EXTERNAL_ASM\nnoinst_LTLIBRARIES = libarmasm.la\nlibarmasm_la_SOURCES = $(CELT_SOURCES_ARM_ASM:.s=-gnu.S)\nBUILT_SOURCES = $(CELT_SOURCES_ARM_ASM:.s=-gnu.S) \\\n $(CELT_AM_SOURCES_ARM_ASM:.s.in=.s) \\\n $(CELT_AM_SOURCES_ARM_ASM:.s.in=-gnu.S)\nendif\nendif\n\nCLEANFILES = $(CELT_SOURCES_ARM_ASM:.s=-gnu.S) \\\n $(CELT_AM_SOURCES_ARM_ASM:.s.in=-gnu.S)\n\ninclude celt_headers.mk\ninclude lpcnet_headers.mk\ninclude silk_headers.mk\ninclude opus_headers.mk\n\nLPCNET_HEAD =\nif ENABLE_DEEP_PLC\nLPCNET_HEAD += $(DEEP_PLC_HEAD)\nendif\nif ENABLE_DRED\nLPCNET_HEAD += $(DRED_HEAD)\nendif\nif ENABLE_OSCE\nLPCNET_HEAD += $(OSCE_HEAD)\nendif\nif ENABLE_LOSSGEN\nLPCNET_HEAD += $(LOSSGEN_HEAD)\nendif\n\nlibopus_la_SOURCES = $(CELT_SOURCES) $(SILK_SOURCES) $(LPCNET_SOURCES) $(OPUS_SOURCES)\nlibopus_la_LDFLAGS = -no-undefined -version-info @OPUS_LT_CURRENT@:@OPUS_LT_REVISION@:@OPUS_LT_AGE@\nlibopus_la_LIBADD = $(NE10_LIBS) $(LIBM)\nif OPUS_ARM_EXTERNAL_ASM\nlibopus_la_LIBADD += libarmasm.la\nendif\n\npkginclude_HEADERS = include/opus.h include/opus_multistream.h include/opus_types.h include/opus_defines.h include/opus_projection.h\n\nnoinst_HEADERS = $(OPUS_HEAD) $(SILK_HEAD) $(CELT_HEAD) $(LPCNET_HEAD)\n\nif EXTRA_PROGRAMS\nnoinst_PROGRAMS = celt/tests/test_unit_cwrs32 \\\n                  celt/tests/test_unit_dft \\\n                  celt/tests/test_unit_entropy \\\n                  celt/tests/test_unit_laplace \\\n                  celt/tests/test_unit_mathops \\\n                  celt/tests/test_unit_mdct \\\n                  celt/tests/test_unit_rotation \\\n                  celt/tests/test_unit_types \\\n                  opus_compare \\\n                  opus_demo \\\n                  repacketizer_demo \\\n                  silk/tests/test_unit_LPC_inv_pred_gain \\\n                  tests/test_opus_api \\\n                  tests/test_opus_decode \\\n                  tests/test_opus_dred \\\n                  tests/test_opus_encode \\\n                  tests/test_opus_extensions \\\n                  tests/test_opus_padding \\\n                  tests/test_opus_projection \\\n                  trivial_example\n\nTESTS = celt/tests/test_unit_cwrs32 \\\n        celt/tests/test_unit_dft \\\n        celt/tests/test_unit_entropy \\\n        celt/tests/test_unit_laplace \\\n        celt/tests/test_unit_mathops \\\n        celt/tests/test_unit_mdct \\\n        celt/tests/test_unit_rotation \\\n        celt/tests/test_unit_types \\\n        silk/tests/test_unit_LPC_inv_pred_gain \\\n        tests/test_opus_api \\\n        tests/test_opus_decode \\\n        tests/test_opus_encode \\\n        tests/test_opus_extensions \\\n        tests/test_opus_padding \\\n        tests/test_opus_projection\n\nopus_demo_SOURCES = src/opus_demo.c\nif ENABLE_LOSSGEN\nopus_demo_SOURCES += $(LOSSGEN_SOURCES)\nendif\n\nopus_demo_LDADD = libopus.la $(NE10_LIBS) $(LIBM)\n\nrepacketizer_demo_SOURCES = src/repacketizer_demo.c\n\nrepacketizer_demo_LDADD = libopus.la $(NE10_LIBS) $(LIBM)\n\nopus_compare_SOURCES = src/opus_compare.c\nopus_compare_LDADD = $(LIBM)\n\ntrivial_example_SOURCES = doc/trivial_example.c\ntrivial_example_LDADD = libopus.la $(LIBM)\n\ntests_test_opus_api_SOURCES = tests/test_opus_api.c tests/test_opus_common.h\ntests_test_opus_api_LDADD = libopus.la $(NE10_LIBS) $(LIBM)\n\ntests_test_opus_encode_SOURCES = tests/test_opus_encode.c tests/opus_encode_regressions.c tests/test_opus_common.h\ntests_test_opus_encode_LDADD = libopus.la $(NE10_LIBS) $(LIBM)\n\ntests_test_opus_decode_SOURCES = tests/test_opus_decode.c tests/test_opus_common.h\ntests_test_opus_decode_LDADD = libopus.la $(NE10_LIBS) $(LIBM)\n\ntests_test_opus_padding_SOURCES = tests/test_opus_padding.c tests/test_opus_common.h\ntests_test_opus_padding_LDADD = libopus.la $(NE10_LIBS) $(LIBM)\n\ntests_test_opus_dred_SOURCES = tests/test_opus_dred.c tests/test_opus_common.h\ntests_test_opus_dred_LDADD = libopus.la $(NE10_LIBS) $(LIBM)\n\nCELT_OBJ = $(CELT_SOURCES:.c=.lo)\nSILK_OBJ = $(SILK_SOURCES:.c=.lo)\nLPCNET_OBJ = $(LPCNET_SOURCES:.c=.lo)\nOPUS_OBJ = $(OPUS_SOURCES:.c=.lo)\n\ntests_test_opus_extensions_SOURCES = tests/test_opus_extensions.c tests/test_opus_common.h\ntests_test_opus_extensions_LDADD = $(OPUS_OBJ) $(SILK_OBJ) $(LPCNET_OBJ) $(CELT_OBJ) $(NE10_LIBS) $(LIBM)\nif OPUS_ARM_EXTERNAL_ASM\ntests_test_opus_extensions_LDADD += libarmasm.la\nendif\n\ntests_test_opus_projection_SOURCES = tests/test_opus_projection.c tests/test_opus_common.h\ntests_test_opus_projection_LDADD = $(OPUS_OBJ) $(SILK_OBJ) $(LPCNET_OBJ) $(CELT_OBJ) $(NE10_LIBS) $(LIBM)\nif OPUS_ARM_EXTERNAL_ASM\ntests_test_opus_projection_LDADD += libarmasm.la\nendif\n\nsilk_tests_test_unit_LPC_inv_pred_gain_SOURCES = silk/tests/test_unit_LPC_inv_pred_gain.c\nsilk_tests_test_unit_LPC_inv_pred_gain_LDADD = $(SILK_OBJ) $(LPCNET_OBJ) $(CELT_OBJ) $(NE10_LIBS) $(LIBM)\nif OPUS_ARM_EXTERNAL_ASM\nsilk_tests_test_unit_LPC_inv_pred_gain_LDADD += libarmasm.la\nendif\n\ncelt_tests_test_unit_cwrs32_SOURCES = celt/tests/test_unit_cwrs32.c\ncelt_tests_test_unit_cwrs32_LDADD = $(LIBM)\n\ncelt_tests_test_unit_dft_SOURCES = celt/tests/test_unit_dft.c\ncelt_tests_test_unit_dft_LDADD = $(CELT_OBJ) $(LPCNET_OBJ) $(NE10_LIBS) $(LIBM)\nif OPUS_ARM_EXTERNAL_ASM\ncelt_tests_test_unit_dft_LDADD += libarmasm.la\nendif\n\ncelt_tests_test_unit_entropy_SOURCES = celt/tests/test_unit_entropy.c\ncelt_tests_test_unit_entropy_LDADD = $(LIBM)\n\ncelt_tests_test_unit_laplace_SOURCES = celt/tests/test_unit_laplace.c\ncelt_tests_test_unit_laplace_LDADD = $(LIBM)\n\ncelt_tests_test_unit_mathops_SOURCES = celt/tests/test_unit_mathops.c\ncelt_tests_test_unit_mathops_LDADD = $(CELT_OBJ) $(LPCNET_OBJ) $(NE10_LIBS) $(LIBM)\nif OPUS_ARM_EXTERNAL_ASM\ncelt_tests_test_unit_mathops_LDADD += libarmasm.la\nendif\n\ncelt_tests_test_unit_mdct_SOURCES = celt/tests/test_unit_mdct.c\ncelt_tests_test_unit_mdct_LDADD = $(CELT_OBJ) $(LPCNET_OBJ) $(NE10_LIBS) $(LIBM)\nif OPUS_ARM_EXTERNAL_ASM\ncelt_tests_test_unit_mdct_LDADD += libarmasm.la\nendif\n\ncelt_tests_test_unit_rotation_SOURCES = celt/tests/test_unit_rotation.c\ncelt_tests_test_unit_rotation_LDADD = $(CELT_OBJ) $(LPCNET_OBJ) $(NE10_LIBS) $(LIBM)\nif OPUS_ARM_EXTERNAL_ASM\ncelt_tests_test_unit_rotation_LDADD += libarmasm.la\nendif\n\ncelt_tests_test_unit_types_SOURCES = celt/tests/test_unit_types.c\ncelt_tests_test_unit_types_LDADD = $(LIBM)\nendif\n\nif CUSTOM_MODES\npkginclude_HEADERS += include/opus_custom.h\nif EXTRA_PROGRAMS\nnoinst_PROGRAMS += opus_custom_demo\nopus_custom_demo_SOURCES = celt/opus_custom_demo.c\nopus_custom_demo_LDADD = libopus.la $(LIBM)\nendif\nendif\n\nif EXTRA_PROGRAMS\nif ENABLE_DEEP_PLC\nnoinst_PROGRAMS += fargan_demo dump_data dump_weights_blob\nfargan_demo_SOURCES = dnn/fargan_demo.c\nfargan_demo_LDADD = $(LPCNET_OBJ) $(CELT_OBJ) $(LIBM)\n\ndump_data_SOURCES = dnn/dump_data.c\ndump_data_LDADD = $(LPCNET_OBJ) $(CELT_OBJ) $(LIBM)\n\ndump_weights_blob_SOURCES = dnn/write_lpcnet_weights.c\ndump_weights_blob_LDADD = $(LIBM)\ndump_weights_blob_CFLAGS = $(AM_CFLAGS) -DDUMP_BINARY_WEIGHTS\nendif\nif ENABLE_DRED\nTESTS += tests/test_opus_dred\nendif\n\nif ENABLE_LOSSGEN\nnoinst_PROGRAMS += lossgen_demo\nlossgen_demo_SOURCES = dnn/lossgen_demo.c $(LOSSGEN_SOURCES)\nlossgen_demo_LDADD = $(LIBM)\nendif\n\nendif\n\n\nEXTRA_DIST = opus.pc.in \\\n             opus-uninstalled.pc.in \\\n             opus.m4 \\\n             Makefile.mips \\\n             Makefile.unix \\\n             CMakeLists.txt \\\n             cmake/CFeatureCheck.cmake \\\n             cmake/OpusBuildtype.cmake \\\n             cmake/OpusConfig.cmake \\\n             cmake/OpusConfig.cmake.in \\\n             cmake/OpusFunctions.cmake \\\n             cmake/OpusPackageVersion.cmake \\\n             cmake/OpusSources.cmake \\\n             cmake/README.md \\\n             cmake/RunTest.cmake \\\n             cmake/config.h.cmake.in \\\n             cmake/vla.c \\\n             cmake/cpu_info_by_asm.c \\\n             cmake/cpu_info_by_c.c \\\n             meson/get-version.py \\\n             meson/read-sources-list.py \\\n             meson/README.md \\\n             meson.build \\\n             meson_options.txt \\\n             include/meson.build \\\n             celt/meson.build \\\n             celt/tests/meson.build \\\n             dnn/meson.build \\\n             dnn/README.md \\\n             silk/meson.build \\\n             silk/tests/meson.build \\\n             src/meson.build \\\n             tests/meson.build \\\n             doc/meson.build \\\n             tests/run_vectors.sh \\\n             celt/arm/arm2gnu.pl \\\n             celt/arm/celt_pitch_xcorr_arm.s\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = opus.pc\n\nm4datadir = $(datadir)/aclocal\nm4data_DATA = opus.m4\n\n# Targets to build and install just the library without the docs\nopus check-opus install-opus: export NO_DOXYGEN = 1\n\nopus: all\ncheck-opus: check\ninstall-opus: install\n\n\n# Or just the docs\ndocs:\n\t( cd doc && $(MAKE) $(AM_MAKEFLAGS) )\n\ninstall-docs:\n\t( cd doc && $(MAKE) $(AM_MAKEFLAGS) install )\n\n\n# Or everything (by default)\nall-local:\n\t@[ -n \"$(NO_DOXYGEN)\" ] || ( cd doc && $(MAKE) $(AM_MAKEFLAGS) )\n\ninstall-data-local:\n\t@[ -n \"$(NO_DOXYGEN)\" ] || ( cd doc && $(MAKE) $(AM_MAKEFLAGS) install )\n\nclean-local:\n\t-( cd doc && $(MAKE) $(AM_MAKEFLAGS) clean )\n\nuninstall-local:\n\t( cd doc && $(MAKE) $(AM_MAKEFLAGS) uninstall )\n\n\n# We check this every time make is run, with configure.ac being touched to\n# trigger an update of the build system files if update_version changes the\n# current PACKAGE_VERSION (or if package_version was modified manually by a\n# user with either AUTO_UPDATE=no or no update_version script present - the\n# latter being the normal case for tarball releases).\n#\n# We can't just add the package_version file to CONFIGURE_DEPENDENCIES since\n# simply running autoconf will not actually regenerate configure for us when\n# the content of that file changes (due to autoconf dependency checking not\n# knowing about that without us creating yet another file for it to include).\n#\n# The MAKECMDGOALS check is a gnu-make'ism, but will degrade 'gracefully' for\n# makes that don't support it.  The only loss of functionality is not forcing\n# an update of package_version for `make dist` if AUTO_UPDATE=no, but that is\n# unlikely to be a real problem for any real user.\n$(top_srcdir)/configure.ac: force\n\t@case \"$(MAKECMDGOALS)\" in \\\n\t    dist-hook)                             exit 0       ;; \\\n\t    dist-* | dist | distcheck | distclean) _arg=release ;; \\\n\tesac; \\\n\tif ! $(top_srcdir)/update_version $$_arg 2> /dev/null; then \\\n\t    if [ ! -e $(top_srcdir)/package_version ]; then \\\n\t\techo 'PACKAGE_VERSION=\"unknown\"' > $(top_srcdir)/package_version; \\\n\t    fi; \\\n\t    . $(top_srcdir)/package_version || exit 1; \\\n\t    [ \"$(PACKAGE_VERSION)\" != \"$$PACKAGE_VERSION\" ] || exit 0; \\\n\tfi; \\\n\ttouch $@\n\nforce:\n\n# Create a minimal package_version file when make dist is run.\ndist-hook:\n\techo 'PACKAGE_VERSION=\"$(PACKAGE_VERSION)\"' > $(top_distdir)/package_version\n\n\n.PHONY: opus check-opus install-opus docs install-docs\n\n# automake doesn't do dependency tracking for asm files, that I can tell\n$(CELT_SOURCES_ARM_ASM:%.s=%-gnu.S): celt/arm/armopts-gnu.S\n$(CELT_SOURCES_ARM_ASM:%.s=%-gnu.S): $(top_srcdir)/celt/arm/arm2gnu.pl\n\n# convert ARM asm to GNU as format\n%-gnu.S: $(top_srcdir)/%.s\n\t$(top_srcdir)/celt/arm/arm2gnu.pl @ARM2GNU_PARAMS@ < $< > $@\n# For autoconf-modified sources (e.g., armopts.s)\n%-gnu.S: %.s\n\t$(top_srcdir)/celt/arm/arm2gnu.pl @ARM2GNU_PARAMS@ < $< > $@\n\nOPT_UNIT_TEST_OBJ = $(celt_tests_test_unit_mathops_SOURCES:.c=.o) \\\n                    $(celt_tests_test_unit_rotation_SOURCES:.c=.o) \\\n                    $(celt_tests_test_unit_mdct_SOURCES:.c=.o) \\\n                    $(celt_tests_test_unit_dft_SOURCES:.c=.o) \\\n                    $(silk_tests_test_unit_LPC_inv_pred_gain_SOURCES:.c=.o)\n\nif HAVE_SSE\nSSE_OBJ = $(CELT_SOURCES_SSE:.c=.lo)\n$(SSE_OBJ): CFLAGS += $(OPUS_X86_SSE_CFLAGS)\nendif\n\nif HAVE_SSE2\nSSE2_OBJ = $(CELT_SOURCES_SSE2:.c=.lo) \\\n           $(DNN_SOURCES_SSE2:.c=.lo)\n$(SSE2_OBJ): CFLAGS += $(OPUS_X86_SSE2_CFLAGS)\nendif\n\nif HAVE_SSE4_1\nSSE4_1_OBJ = $(CELT_SOURCES_SSE4_1:.c=.lo) \\\n             $(DNN_SOURCES_SSE4_1:.c=.lo) \\\n             $(SILK_SOURCES_SSE4_1:.c=.lo) \\\n             $(SILK_SOURCES_FIXED_SSE4_1:.c=.lo)\n$(SSE4_1_OBJ): CFLAGS += $(OPUS_X86_SSE4_1_CFLAGS)\nendif\n\nif HAVE_AVX2\nAVX2_OBJ = $(CELT_SOURCES_AVX2:.c=.lo) \\\n           $(SILK_SOURCES_AVX2:.c=.lo) \\\n           $(SILK_SOURCES_FLOAT_AVX2:.c=.lo) \\\n           $(DNN_SOURCES_AVX2:.c=.lo)\n$(AVX2_OBJ): CFLAGS += $(OPUS_X86_AVX2_CFLAGS)\nendif\n\nif HAVE_ARM_NEON_INTR\nARM_NEON_INTR_OBJ = $(CELT_SOURCES_ARM_NEON_INTR:.c=.lo) \\\n                    $(SILK_SOURCES_ARM_NEON_INTR:.c=.lo) \\\n                    $(DNN_SOURCES_NEON:.c=.lo) \\\n                    $(SILK_SOURCES_FIXED_ARM_NEON_INTR:.c=.lo)\n$(ARM_NEON_INTR_OBJ): CFLAGS += \\\n $(OPUS_ARM_NEON_INTR_CFLAGS)  $(NE10_CFLAGS)\nendif\n\nif HAVE_ARM_DOTPROD\nARM_DOTPROD_OBJ = $(DNN_SOURCES_DOTPROD:.c=.lo)\n$(ARM_DOTPROD_OBJ): CFLAGS += $(ARM_DOTPROD_INTR_CFLAGS)\nendif\n"
        },
        {
          "name": "Makefile.mips",
          "type": "blob",
          "size": 4.8115234375,
          "content": "#################### COMPILE OPTIONS #######################\n\n# Uncomment this for fixed-point build\nFIXED_POINT=1\n\n# It is strongly recommended to uncomment one of these\n# VAR_ARRAYS: Use C99 variable-length arrays for stack allocation\n# USE_ALLOCA: Use alloca() for stack allocation\n# If none is defined, then the fallback is a non-threadsafe global array\nCFLAGS := -DUSE_ALLOCA $(CFLAGS)\n#CFLAGS := -DVAR_ARRAYS $(CFLAGS)\n\n# These options affect performance\n# HAVE_LRINTF: Use C99 intrinsics to speed up float-to-int conversion\nCFLAGS := -DHAVE_LRINTF $(CFLAGS)\n\n###################### END OF OPTIONS ######################\n\n-include package_version\n\ninclude silk_sources.mk\ninclude celt_sources.mk\ninclude opus_sources.mk\n\nifdef FIXED_POINT\nSILK_SOURCES += $(SILK_SOURCES_FIXED)\nelse\nSILK_SOURCES += $(SILK_SOURCES_FLOAT)\nOPUS_SOURCES += $(OPUS_SOURCES_FLOAT)\nendif\n\nEXESUFFIX =\nLIBPREFIX = lib\nLIBSUFFIX = .a\nOBJSUFFIX = .o\n\nCC     = $(TOOLCHAIN_PREFIX)cc$(TOOLCHAIN_SUFFIX)\nAR     = $(TOOLCHAIN_PREFIX)ar\nRANLIB = $(TOOLCHAIN_PREFIX)ranlib\nCP     = $(TOOLCHAIN_PREFIX)cp\n\ncppflags-from-defines   = $(addprefix -D,$(1))\ncppflags-from-includes  = $(addprefix -I,$(1))\nldflags-from-ldlibdirs  = $(addprefix -L,$(1))\nldlibs-from-libs        = $(addprefix -l,$(1))\n\nWARNINGS = -Wall -W -Wstrict-prototypes -Wextra -Wcast-align -Wnested-externs -Wshadow\n\nCFLAGS  += -mips32r2 -mno-mips16 -std=gnu99 -O2 -g $(WARNINGS) -DENABLE_ASSERTIONS -DMIPSr1_ASM -DOPUS_BUILD -mdspr2 -march=74kc -mtune=74kc -mmt -mgp32\n\nCINCLUDES = include silk celt\n\nifdef FIXED_POINT\nCFLAGS += -DFIXED_POINT=1 -DDISABLE_FLOAT_API\nCINCLUDES += silk/fixed\nelse\nCINCLUDES += silk/float\nendif\n\n\nLIBS = m\n\nLDLIBDIRS = ./\n\nCFLAGS  += $(call cppflags-from-defines,$(CDEFINES))\nCFLAGS  += $(call cppflags-from-includes,$(CINCLUDES))\nLDFLAGS += $(call ldflags-from-ldlibdirs,$(LDLIBDIRS))\nLDLIBS  += $(call ldlibs-from-libs,$(LIBS))\n\nCOMPILE.c.cmdline   = $(CC) -c $(CFLAGS) -o $@ $<\nLINK.o              = $(CC) $(LDPREFLAGS) $(LDFLAGS)\nLINK.o.cmdline      = $(LINK.o) $^ $(LDLIBS) -o $@$(EXESUFFIX)\n\nARCHIVE.cmdline     = $(AR) $(ARFLAGS) $@ $^ && $(RANLIB) $@\n\n%$(OBJSUFFIX):%.c\n\t$(COMPILE.c.cmdline)\n\n%$(OBJSUFFIX):%.cpp\n\t$(COMPILE.cpp.cmdline)\n\n# Directives\n\n\n# Variable definitions\nLIB_NAME = opus\nTARGET = $(LIBPREFIX)$(LIB_NAME)$(LIBSUFFIX)\n\nSRCS_C = $(SILK_SOURCES) $(CELT_SOURCES) $(OPUS_SOURCES)\n\nOBJS := $(patsubst %.c,%$(OBJSUFFIX),$(SRCS_C))\n\nOPUSDEMO_SRCS_C = src/opus_demo.c\nOPUSDEMO_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(OPUSDEMO_SRCS_C))\n\nTESTOPUSAPI_SRCS_C = tests/test_opus_api.c\nTESTOPUSAPI_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(TESTOPUSAPI_SRCS_C))\n\nTESTOPUSDECODE_SRCS_C = tests/test_opus_decode.c\nTESTOPUSDECODE_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(TESTOPUSDECODE_SRCS_C))\n\nTESTOPUSENCODE_SRCS_C = tests/test_opus_encode.c tests/opus_encode_regressions.c\nTESTOPUSENCODE_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(TESTOPUSENCODE_SRCS_C))\n\nTESTOPUSEXTENSIONS_SRCS_C = tests/test_opus_extensions.c\nTESTOPUSEXTENSIONS_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(TESTOPUSEXTENSIONS_SRCS_C))\n\nTESTOPUSPADDING_SRCS_C = tests/test_opus_padding.c\nTESTOPUSPADDING_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(TESTOPUSPADDING_SRCS_C))\n\nOPUSCOMPARE_SRCS_C = src/opus_compare.c\nOPUSCOMPARE_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(OPUSCOMPARE_SRCS_C))\n\nTESTS := test_opus_api test_opus_decode test_opus_encode test_opus_extensions test_opus_padding\n\n# Rules\nall: lib opus_demo opus_compare $(TESTS)\n\nlib: $(TARGET)\n\ncheck: all\n\tfor test in $(TESTS); do ./$$test; done\n\n$(TARGET): $(OBJS)\n\t$(ARCHIVE.cmdline)\n\nopus_demo$(EXESUFFIX): $(OPUSDEMO_OBJS) $(TARGET)\n\t$(LINK.o.cmdline)\n\ntest_opus_api$(EXESUFFIX): $(TESTOPUSAPI_OBJS) $(TARGET)\n\t$(LINK.o.cmdline)\n\ntest_opus_decode$(EXESUFFIX): $(TESTOPUSDECODE_OBJS) $(TARGET)\n\t$(LINK.o.cmdline)\n\ntest_opus_encode$(EXESUFFIX): $(TESTOPUSENCODE_OBJS) $(TARGET)\n\t$(LINK.o.cmdline)\n\ntest_opus_extensions$(EXESUFFIX): $(TESTOPUSEXTENSIONS_OBJS) $(TARGET)\n\t$(LINK.o.cmdline)\n\ntest_opus_padding$(EXESUFFIX): $(TESTOPUSPADDING_OBJS) $(TARGET)\n\t$(LINK.o.cmdline)\n\nopus_compare$(EXESUFFIX): $(OPUSCOMPARE_OBJS)\n\t$(LINK.o.cmdline)\n\ncelt/celt.o: CFLAGS += -DPACKAGE_VERSION='$(PACKAGE_VERSION)'\ncelt/celt.o: package_version\n\npackage_version: force\n\t@if [ -x ./update_version ]; then \\\n\t\t./update_version || true; \\\n\telif [ ! -e ./package_version ]; then \\\n\t\techo 'PACKAGE_VERSION=\"unknown\"' > ./package_version; \\\n\tfi\n\nforce:\n\nclean:\n\trm -f opus_demo$(EXESUFFIX) opus_compare$(EXESUFFIX) $(TARGET) \\\n                test_opus_api$(EXESUFFIX) test_opus_decode$(EXESUFFIX) \\\n                test_opus_encode$(EXESUFFIX) test_opus_extensions$(EXESUFFIX) \\\n                test_opus_padding$(EXESUFFIX)\n\t\t$(OBJS) $(OPUSDEMO_OBJS) $(OPUSCOMPARE_OBJS) $(TESTOPUSAPI_OBJS) \\\n                $(TESTOPUSDECODE_OBJS) $(TESTOPUSENCODE_OBJS) \\\n                $(TESTOPUSEXTENSIONS_OBJS) $(TESTOPUSPADDING_OBJS)\n\n.PHONY: all lib clean force check\n"
        },
        {
          "name": "Makefile.unix",
          "type": "blob",
          "size": 4.7041015625,
          "content": "#################### COMPILE OPTIONS #######################\n\n# Uncomment this for fixed-point build\n#FIXED_POINT=1\n\n# It is strongly recommended to uncomment one of these\n# VAR_ARRAYS: Use C99 variable-length arrays for stack allocation\n# USE_ALLOCA: Use alloca() for stack allocation\n# If none is defined, then the fallback is a non-threadsafe global array\nCFLAGS := -DUSE_ALLOCA $(CFLAGS)\n#CFLAGS := -DVAR_ARRAYS $(CFLAGS)\n\n# These options affect performance\n# HAVE_LRINTF: Use C99 intrinsics to speed up float-to-int conversion\n#CFLAGS := -DHAVE_LRINTF $(CFLAGS)\n\n###################### END OF OPTIONS ######################\n\n-include package_version\n\ninclude silk_sources.mk\ninclude celt_sources.mk\ninclude opus_sources.mk\n\nifdef FIXED_POINT\nSILK_SOURCES += $(SILK_SOURCES_FIXED)\nelse\nSILK_SOURCES += $(SILK_SOURCES_FLOAT)\nOPUS_SOURCES += $(OPUS_SOURCES_FLOAT)\nendif\n\nEXESUFFIX =\nLIBPREFIX = lib\nLIBSUFFIX = .a\nOBJSUFFIX = .o\n\nCC     = $(TOOLCHAIN_PREFIX)cc$(TOOLCHAIN_SUFFIX)\nAR     = $(TOOLCHAIN_PREFIX)ar\nRANLIB = $(TOOLCHAIN_PREFIX)ranlib\nCP     = $(TOOLCHAIN_PREFIX)cp\n\ncppflags-from-defines   = $(addprefix -D,$(1))\ncppflags-from-includes  = $(addprefix -I,$(1))\nldflags-from-ldlibdirs  = $(addprefix -L,$(1))\nldlibs-from-libs        = $(addprefix -l,$(1))\n\nWARNINGS = -Wall -W -Wstrict-prototypes -Wextra -Wcast-align -Wnested-externs -Wshadow\nCFLAGS  += -O2 -g $(WARNINGS) -DOPUS_BUILD\nCINCLUDES = include silk celt\n\nifdef FIXED_POINT\nCFLAGS += -DFIXED_POINT=1 -DDISABLE_FLOAT_API\nCINCLUDES += silk/fixed\nelse\nCINCLUDES += silk/float\nendif\n\n\nLIBS = m\n\nLDLIBDIRS = ./\n\nCFLAGS  += $(call cppflags-from-defines,$(CDEFINES))\nCFLAGS  += $(call cppflags-from-includes,$(CINCLUDES))\nLDFLAGS += $(call ldflags-from-ldlibdirs,$(LDLIBDIRS))\nLDLIBS  += $(call ldlibs-from-libs,$(LIBS))\n\nCOMPILE.c.cmdline   = $(CC) -c $(CFLAGS) -o $@ $<\nLINK.o              = $(CC) $(LDPREFLAGS) $(LDFLAGS)\nLINK.o.cmdline      = $(LINK.o) $^ $(LDLIBS) -o $@$(EXESUFFIX)\n\nARCHIVE.cmdline     = $(AR) $(ARFLAGS) $@ $^ && $(RANLIB) $@\n\n%$(OBJSUFFIX):%.c\n\t$(COMPILE.c.cmdline)\n\n%$(OBJSUFFIX):%.cpp\n\t$(COMPILE.cpp.cmdline)\n\n# Directives\n\n\n# Variable definitions\nLIB_NAME = opus\nTARGET = $(LIBPREFIX)$(LIB_NAME)$(LIBSUFFIX)\n\nSRCS_C = $(SILK_SOURCES) $(CELT_SOURCES) $(OPUS_SOURCES)\n\nOBJS := $(patsubst %.c,%$(OBJSUFFIX),$(SRCS_C))\n\nOPUSDEMO_SRCS_C = src/opus_demo.c\nOPUSDEMO_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(OPUSDEMO_SRCS_C))\n\nTESTOPUSAPI_SRCS_C = tests/test_opus_api.c\nTESTOPUSAPI_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(TESTOPUSAPI_SRCS_C))\n\nTESTOPUSDECODE_SRCS_C = tests/test_opus_decode.c\nTESTOPUSDECODE_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(TESTOPUSDECODE_SRCS_C))\n\nTESTOPUSENCODE_SRCS_C = tests/test_opus_encode.c tests/opus_encode_regressions.c\nTESTOPUSENCODE_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(TESTOPUSENCODE_SRCS_C))\n\nTESTOPUSEXTENSIONS_SRCS_C = tests/test_opus_extensions.c\nTESTOPUSEXTENSIONS_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(TESTOPUSEXTENSIONS_SRCS_C))\n\nTESTOPUSPADDING_SRCS_C = tests/test_opus_padding.c\nTESTOPUSPADDING_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(TESTOPUSPADDING_SRCS_C))\n\nOPUSCOMPARE_SRCS_C = src/opus_compare.c\nOPUSCOMPARE_OBJS := $(patsubst %.c,%$(OBJSUFFIX),$(OPUSCOMPARE_SRCS_C))\n\nTESTS := test_opus_api test_opus_decode test_opus_encode test_opus_extensions test_opus_padding\n\n# Rules\nall: lib opus_demo opus_compare $(TESTS)\n\nlib: $(TARGET)\n\ncheck: all\n\tfor test in $(TESTS); do ./$$test; done\n\n$(TARGET): $(OBJS)\n\t$(ARCHIVE.cmdline)\n\nopus_demo$(EXESUFFIX): $(OPUSDEMO_OBJS) $(TARGET)\n\t$(LINK.o.cmdline)\n\ntest_opus_api$(EXESUFFIX): $(TESTOPUSAPI_OBJS) $(TARGET)\n\t$(LINK.o.cmdline)\n\ntest_opus_decode$(EXESUFFIX): $(TESTOPUSDECODE_OBJS) $(TARGET)\n\t$(LINK.o.cmdline)\n\ntest_opus_encode$(EXESUFFIX): $(TESTOPUSENCODE_OBJS) $(TARGET)\n\t$(LINK.o.cmdline)\n\ntest_opus_extensions$(EXESUFFIX): $(TESTOPUSEXTENSIONS_OBJS) $(TARGET)\n\t$(LINK.o.cmdline)\n\ntest_opus_padding$(EXESUFFIX): $(TESTOPUSPADDING_OBJS) $(TARGET)\n\t$(LINK.o.cmdline)\n\nopus_compare$(EXESUFFIX): $(OPUSCOMPARE_OBJS)\n\t$(LINK.o.cmdline)\n\ncelt/celt.o: CFLAGS += -DPACKAGE_VERSION='$(PACKAGE_VERSION)'\ncelt/celt.o: package_version\n\npackage_version: force\n\t@if [ -x ./update_version ]; then \\\n\t\t./update_version || true; \\\n\telif [ ! -e ./package_version ]; then \\\n\t\techo 'PACKAGE_VERSION=\"unknown\"' > ./package_version; \\\n\tfi\n\nforce:\n\nclean:\n\trm -f opus_demo$(EXESUFFIX) opus_compare$(EXESUFFIX) $(TARGET) \\\n                test_opus_api$(EXESUFFIX) test_opus_decode$(EXESUFFIX) \\\n                test_opus_encode$(EXESUFFIX) test_opus_extensions$(EXESUFFIX) \\\n                test_opus_padding$(EXESUFFIX)\n\t\t$(OBJS) $(OPUSDEMO_OBJS) $(OPUSCOMPARE_OBJS) $(TESTOPUSAPI_OBJS) \\\n                $(TESTOPUSDECODE_OBJS) $(TESTOPUSENCODE_OBJS) \\\n                $(TESTOPUSEXTENSIONS_OBJS) $(TESTOPUSPADDING_OBJS)\n\n.PHONY: all lib clean force check\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "README",
          "type": "blob",
          "size": 7.029296875,
          "content": "== Opus audio codec ==\n\nOpus is a codec for interactive speech and audio transmission over the Internet.\n\n  Opus can handle a wide range of interactive audio applications, including\nVoice over IP, videoconferencing, in-game  chat, and even remote live music\nperformances. It can scale from low bit-rate narrowband speech to very high\nquality stereo music.\n\n  Opus, when coupled with an appropriate container format, is also suitable\nfor non-realtime  stored-file applications such as music distribution, game\nsoundtracks, portable music players, jukeboxes, and other applications that\nhave historically used high latency formats such as MP3, AAC, or Vorbis.\n\n                    Opus is specified by IETF RFC 6716:\n                    https://tools.ietf.org/html/rfc6716\n\n  The Opus format and this implementation of it are subject to the royalty-\nfree patent and copyright licenses specified in the file COPYING.\n\nThis package implements a shared library for encoding and decoding raw Opus\nbitstreams. Raw Opus bitstreams should be used over RTP according to\n https://tools.ietf.org/html/rfc7587\n\nThe package also includes a number of test tools used for testing the\ncorrect operation of the library. The bitstreams read/written by these\ntools should not be used for Opus file distribution: They include\nadditional debugging data and cannot support seeking.\n\nOpus stored in files should use the Ogg encapsulation for Opus which is\ndescribed at:\n https://tools.ietf.org/html/rfc7845\n\nAn opus-tools package is available which provides encoding and decoding of\nOgg encapsulated Opus files and includes a number of useful features.\n\nOpus-tools can be found at:\n https://gitlab.xiph.org/xiph/opus-tools.git\nor on the main Opus website:\n https://opus-codec.org/\n\n== Deep Learning and Opus ==\n\nLossy networks continue to be a challenge for real-time communications.\nWhile the original implementation of Opus provides an excellent packet loss\nconcealment mechanism, the team has continued to advance the methodology used\nto improve audio quality in challenge network environments.\n\nIn Opus 1.5, we added a deep learning based redundancy encoder that enhances\naudio in lossy networks by embedding one second of recovery data in the padding\ndata of each packet. The underlying algorithm behind encoding and decoding the\nrecovery data is called the deep redundancy (DRED) algorithm. By leveraging\nthe padding data within the packet, Opus 1.5 is fully backward compatible with\nprior revisions of Opus. Please see the README under the \"dnn\" subdirectory to\nunderstand DRED.\n\nDRED was developed by a team that Amazon Web Services initially sponsored,\nwho open-sourced the implementation as well as began the\nstandardization process at the IETF:\n  https://datatracker.ietf.org/doc/draft-ietf-mlcodec-opus-extension/\nThe license behind Opus or the intellectual property position of Opus does\nnot change with Opus 1.5.\n\n== Compiling libopus ==\n\nTo build from a distribution tarball, you only need to do the following:\n\n    % ./configure\n    % make\n\nTo build from the git repository, the following steps are necessary:\n\n0) Set up a development environment:\n\nOn an Ubuntu or Debian family Linux distribution:\n\n    % sudo apt-get install git autoconf automake libtool gcc make\n\nOn a Fedora/Redhat based Linux:\n\n    % sudo dnf install git autoconf automake libtool gcc make\n\nOr for older Redhat/Centos Linux releases:\n\n    % sudo yum install git autoconf automake libtool gcc make\n\nOn Apple macOS, install Xcode and brew.sh, then in the Terminal enter:\n\n    % brew install autoconf automake libtool\n\n1) Clone the repository:\n\n    % git clone https://gitlab.xiph.org/xiph/opus.git\n    % cd opus\n\n2) Compiling the source\n\n    % ./autogen.sh\n    % ./configure\n    % make\n\nOn x86, it's a good idea to use a -march= option that allows the use of AVX2.\n\n3) Install the codec libraries (optional)\n\n    % sudo make install\n\nOnce you have compiled the codec, there will be a opus_demo executable\nin the top directory.\n\nUsage: opus_demo [-e] <application> <sampling rate (Hz)> <channels (1/2)>\n         <bits per second> [options] <input> <output>\n       opus_demo -d <sampling rate (Hz)> <channels (1/2)> [options]\n         <input> <output>\n\nmode: voip | audio | restricted-lowdelay\noptions:\n  -e                : only runs the encoder (output the bit-stream)\n  -d                : only runs the decoder (reads the bit-stream as input)\n  -cbr              : enable constant bitrate; default: variable bitrate\n  -cvbr             : enable constrained variable bitrate; default:\n                      unconstrained\n  -bandwidth <NB|MB|WB|SWB|FB>\n                    : audio bandwidth (from narrowband to fullband);\n                      default: sampling rate\n  -framesize <2.5|5|10|20|40|60>\n                    : frame size in ms; default: 20\n  -max_payload <bytes>\n                    : maximum payload size in bytes, default: 1024\n  -complexity <comp>\n                    : complexity, 0 (lowest) ... 10 (highest); default: 10\n  -inbandfec        : enable SILK inband FEC\n  -forcemono        : force mono encoding, even for stereo input\n  -dtx              : enable SILK DTX\n  -loss <perc>      : simulate packet loss, in percent (0-100); default: 0\n\ninput and output are little-endian signed 16-bit PCM files or opus\nbitstreams with simple opus_demo proprietary framing.\n\n== Testing ==\n\nThis package includes a collection of automated unit and system tests\nwhich SHOULD be run after compiling the package especially the first\ntime it is run on a new platform.\n\nTo run the integrated tests:\n\n    % make check\n\nThere is also collection of standard test vectors which are not\nincluded in this package for size reasons but can be obtained from:\nhttps://opus-codec.org/docs/opus_testvectors-rfc8251.tar.gz\n\nTo run compare the code to these test vectors:\n\n    % curl -OL https://opus-codec.org/docs/opus_testvectors-rfc8251.tar.gz\n    % tar -zxf opus_testvectors-rfc8251.tar.gz\n    % ./tests/run_vectors.sh ./ opus_newvectors 48000\n\n== Compiling libopus for Windows and alternative build systems ==\n\nSee cmake/README.md or meson/README.md.\n\n== Portability notes ==\n\nThis implementation uses floating-point by default but can be compiled to\nuse only fixed-point arithmetic by setting --enable-fixed-point (if using\nautoconf) or by defining the FIXED_POINT macro (if building manually).\nThe fixed point implementation has somewhat lower audio quality and is\nslower on platforms with fast FPUs, it is normally only used in embedded\nenvironments.\n\nThe implementation can be compiled with either a C89 or a C99 compiler.\nWhile it does not rely on any _undefined behavior_ as defined by C89 or\nC99, it relies on common _implementation-defined behavior_ for two's\ncomplement architectures:\n\no Right shifts of negative values are consistent with two's\n  complement arithmetic, so that a>>b is equivalent to\n  floor(a/(2^b)),\n\no For conversion to a signed integer of N bits, the value is reduced\n  modulo 2^N to be within range of the type,\n\no The result of integer division of a negative value is truncated\n  towards zero, and\n\no The compiler provides a 64-bit integer type (a C99 requirement\n  which is supported by most C89 compilers).\n"
        },
        {
          "name": "README.draft",
          "type": "blob",
          "size": 2.1279296875,
          "content": "To build this source code, simply type:\n\n% make\n\nIf this does not work, or if you want to change the default configuration\n(e.g., to compile for a fixed-point architecture), simply edit the options\nin the Makefile.\n\nAn up-to-date implementation conforming to this standard is available in a\nGit repository at https://gitlab.xiph.org/xiph/opus.git or on a website at:\nhttps://opus-codec.org/\nHowever, although that implementation is expected to remain conformant\nwith the standard, it is the code in this RFC that shall remain normative.\nTo build from the git repository instead of using this RFC, follow these\nsteps:\n\n1) Clone the repository (latest implementation of this standard at the time\nof publication)\n\n% git clone https://gitlab.xiph.org/xiph/opus.git\n% cd opus\n\n2) Compile\n\n% ./autogen.sh\n% ./configure\n% make\n\nOnce you have compiled the codec, there will be a opus_demo executable in\nthe top directory.\n\nUsage: opus_demo [-e] <application> <sampling rate (Hz)> <channels (1/2)>\n         <bits per second> [options] <input> <output>\n       opus_demo -d <sampling rate (Hz)> <channels (1/2)> [options]\n         <input> <output>\n\nmode: voip | audio | restricted-lowdelay\noptions:\n-e                   : only runs the encoder (output the bit-stream)\n-d                   : only runs the decoder (reads the bit-stream as input)\n-cbr                 : enable constant bitrate; default: variable bitrate\n-cvbr                : enable constrained variable bitrate; default: unconstrained\n-bandwidth <NB|MB|WB|SWB|FB> : audio bandwidth (from narrowband to fullband);\n                               default: sampling rate\n-framesize <2.5|5|10|20|40|60> : frame size in ms; default: 20\n-max_payload <bytes> : maximum payload size in bytes, default: 1024\n-complexity <comp>   : complexity, 0 (lowest) ... 10 (highest); default: 10\n-inbandfec           : enable SILK inband FEC\n-forcemono           : force mono encoding, even for stereo input\n-dtx                 : enable SILK DTX\n-loss <perc>         : simulate packet loss, in percent (0-100); default: 0\n\ninput and output are little endian signed 16-bit PCM files or opus bitstreams\nwith simple opus_demo proprietary framing.\n"
        },
        {
          "name": "autogen.bat",
          "type": "blob",
          "size": 0.35546875,
          "content": "@echo off\nREM Run this to set up the build system: configure, makefiles, etc.\n\nsetlocal enabledelayedexpansion\n\nREM Parse the real autogen.sh script for version\nfor /F \"tokens=2 delims= \" %%A in ('findstr \"dnn/download_model.sh\" autogen.sh') do (\n    set \"model=%%A\"\n)\n\ncall dnn\\download_model.bat %model%\n\necho Updating build configuration files, please wait....\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.4609375,
          "content": "#!/bin/sh\n# Copyright (c) 2010-2015 Xiph.Org Foundation and contributors.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the COPYING file.\n\n# Run this to set up the build system: configure, makefiles, etc.\nset -e\n\nsrcdir=`dirname $0`\ntest -n \"$srcdir\" && cd \"$srcdir\"\n\ndnn/download_model.sh \"160753e983198f29f1aae67c54caa0e30bd90f1ce916a52f15bdad2df8e35e58\"\n\necho \"Updating build configuration files, please wait....\"\n\nautoreconf -isf\n"
        },
        {
          "name": "celt",
          "type": "tree",
          "content": null
        },
        {
          "name": "celt_headers.mk",
          "type": "blob",
          "size": 1.14453125,
          "content": "CELT_HEAD = \\\ncelt/arch.h \\\ncelt/bands.h \\\ncelt/celt.h \\\ncelt/cpu_support.h \\\ninclude/opus_types.h \\\ninclude/opus_defines.h \\\ninclude/opus_custom.h \\\ncelt/cwrs.h \\\ncelt/ecintrin.h \\\ncelt/entcode.h \\\ncelt/entdec.h \\\ncelt/entenc.h \\\ncelt/fixed_debug.h \\\ncelt/fixed_generic.h \\\ncelt/float_cast.h \\\ncelt/_kiss_fft_guts.h \\\ncelt/kiss_fft.h \\\ncelt/laplace.h \\\ncelt/mathops.h \\\ncelt/mdct.h \\\ncelt/mfrngcod.h \\\ncelt/modes.h \\\ncelt/os_support.h \\\ncelt/pitch.h \\\ncelt/celt_lpc.h \\\ncelt/x86/celt_lpc_sse.h \\\ncelt/quant_bands.h \\\ncelt/rate.h \\\ncelt/stack_alloc.h \\\ncelt/vq.h \\\ncelt/static_modes_float.h \\\ncelt/static_modes_fixed.h \\\ncelt/static_modes_float_arm_ne10.h \\\ncelt/static_modes_fixed_arm_ne10.h \\\ncelt/arm/armcpu.h \\\ncelt/arm/fixed_armv4.h \\\ncelt/arm/fixed_armv5e.h \\\ncelt/arm/fixed_arm64.h \\\ncelt/arm/kiss_fft_armv4.h \\\ncelt/arm/kiss_fft_armv5e.h \\\ncelt/arm/pitch_arm.h \\\ncelt/arm/fft_arm.h \\\ncelt/arm/mdct_arm.h \\\ncelt/mips/celt_mipsr1.h \\\ncelt/mips/fixed_generic_mipsr1.h \\\ncelt/mips/kiss_fft_mipsr1.h \\\ncelt/mips/mdct_mipsr1.h \\\ncelt/mips/pitch_mipsr1.h \\\ncelt/mips/vq_mipsr1.h \\\ncelt/x86/pitch_sse.h \\\ncelt/x86/vq_sse.h \\\ncelt/x86/x86_arch_macros.h \\\ncelt/x86/x86cpu.h\n"
        },
        {
          "name": "celt_sources.mk",
          "type": "blob",
          "size": 0.9384765625,
          "content": "CELT_SOURCES = \\\ncelt/bands.c \\\ncelt/celt.c \\\ncelt/celt_encoder.c \\\ncelt/celt_decoder.c \\\ncelt/cwrs.c \\\ncelt/entcode.c \\\ncelt/entdec.c \\\ncelt/entenc.c \\\ncelt/kiss_fft.c \\\ncelt/laplace.c \\\ncelt/mathops.c \\\ncelt/mdct.c \\\ncelt/modes.c \\\ncelt/pitch.c \\\ncelt/celt_lpc.c \\\ncelt/quant_bands.c \\\ncelt/rate.c \\\ncelt/vq.c\n\nCELT_SOURCES_X86_RTCD = \\\ncelt/x86/x86cpu.c \\\ncelt/x86/x86_celt_map.c\n\nCELT_SOURCES_SSE = \\\ncelt/x86/pitch_sse.c\n\nCELT_SOURCES_SSE2 = \\\ncelt/x86/pitch_sse2.c \\\ncelt/x86/vq_sse2.c\n\nCELT_SOURCES_SSE4_1 = \\\ncelt/x86/celt_lpc_sse4_1.c \\\ncelt/x86/pitch_sse4_1.c\n\nCELT_SOURCES_AVX2 = \\\ncelt/x86/pitch_avx.c\n\nCELT_SOURCES_ARM_RTCD = \\\ncelt/arm/armcpu.c \\\ncelt/arm/arm_celt_map.c\n\nCELT_SOURCES_ARM_ASM = \\\ncelt/arm/celt_pitch_xcorr_arm.s\n\nCELT_AM_SOURCES_ARM_ASM = \\\ncelt/arm/armopts.s.in\n\nCELT_SOURCES_ARM_NEON_INTR = \\\ncelt/arm/celt_neon_intr.c \\\ncelt/arm/pitch_neon_intr.c\n\nCELT_SOURCES_ARM_NE10 = \\\ncelt/arm/celt_fft_ne10.c \\\ncelt/arm/celt_mdct_ne10.c\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 39.2353515625,
          "content": "dnl Process this file with autoconf to produce a configure script. -*-m4-*-\n\ndnl The package_version file will be automatically synced to the git revision\ndnl by the update_version script when configured in the repository, but will\ndnl remain constant in tarball releases unless it is manually edited.\nm4_define([CURRENT_VERSION],\n          m4_esyscmd([ ./update_version 2>/dev/null || true\n                       if test -e package_version; then\n                           . ./package_version\n                           printf \"$PACKAGE_VERSION\"\n                       else\n                           printf \"unknown\"\n                       fi ]))\n\nAC_INIT([opus],[CURRENT_VERSION],[opus@xiph.org])\n\nAC_CONFIG_SRCDIR(src/opus_encoder.c)\nAC_CONFIG_MACRO_DIR([m4])\n\ndnl enable silent rules on automake 1.11 and later\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\n# For libtool.\ndnl Please update these for releases.\nOPUS_LT_CURRENT=10\nOPUS_LT_REVISION=1\nOPUS_LT_AGE=10\n\nAC_SUBST(OPUS_LT_CURRENT)\nAC_SUBST(OPUS_LT_REVISION)\nAC_SUBST(OPUS_LT_AGE)\n\nAM_INIT_AUTOMAKE([no-define])\nAM_MAINTAINER_MODE([enable])\n\nAC_CANONICAL_HOST\nAC_MINGW32\nAM_PROG_LIBTOOL\nAM_PROG_CC_C_O\n\nAC_PROG_CC_C99\nAC_C_CONST\nAC_C_INLINE\n\nAM_PROG_AS\n\nAC_DEFINE([OPUS_BUILD], [], [This is a build of OPUS])\n\n#Use a hacked up version of autoconf's AC_C_RESTRICT because it's not\n#strong enough a test to detect old buggy versions of GCC (e.g. 2.95.3)\n#Note: Both this and the test for variable-size arrays below are also\n#      done by AC_PROG_CC_C99, but not thoroughly enough apparently.\nAC_CACHE_CHECK([for C/C++ restrict keyword], ac_cv_c_restrict,\n  [ac_cv_c_restrict=no\n   # The order here caters to the fact that C++ does not require restrict.\n   for ac_kw in __restrict __restrict__ _Restrict restrict; do\n     AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n      [[typedef int * int_ptr;\n        int foo (int_ptr $ac_kw ip, int * $ac_kw baz[]) {\n        return ip[0];\n       }]],\n      [[int s[1];\n        int * $ac_kw t = s;\n        t[0] = 0;\n        return foo(t, (void *)0)]])],\n      [ac_cv_c_restrict=$ac_kw])\n     test \"$ac_cv_c_restrict\" != no && break\n   done\n  ])\n\nAH_VERBATIM([restrict],\n[/* Define to the equivalent of the C99 'restrict' keyword, or to\n   nothing if this is not supported.  Do not define if restrict is\n   supported directly.  */\n#undef restrict\n/* Work around a bug in Sun C++: it does not support _Restrict or\n   __restrict__, even though the corresponding Sun C compiler ends up with\n   \"#define restrict _Restrict\" or \"#define restrict __restrict__\" in the\n   previous line.  Perhaps some future version of Sun C++ will work with\n   restrict; if so, hopefully it defines __RESTRICT like Sun C does.  */\n#if defined __SUNPRO_CC && !defined __RESTRICT\n# define _Restrict\n# define __restrict__\n#endif])\n\ncase $ac_cv_c_restrict in\n   restrict) ;;\n   no) AC_DEFINE([restrict], []) ;;\n   *)  AC_DEFINE_UNQUOTED([restrict], [$ac_cv_c_restrict]) ;;\nesac\n\nAC_MSG_CHECKING(for C99 variable-size arrays)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([],\n                   [[static int x; char a[++x]; a[sizeof a - 1] = 0; int N; return a[0];]])],\n    [ has_var_arrays=yes\n      use_alloca=\"no (using var arrays)\"\n      AC_DEFINE([VAR_ARRAYS], [1], [Use C99 variable-size arrays])\n    ],[\n      has_var_arrays=no\n    ])\nAC_MSG_RESULT([$has_var_arrays])\n\nAS_IF([test \"$has_var_arrays\" = \"no\"],\n  [\n   AC_CHECK_HEADERS([alloca.h])\n   AC_MSG_CHECKING(for alloca)\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <alloca.h>]],\n                                      [[int foo=10; int *array = alloca(foo);]])],\n     [ use_alloca=yes;\n       AC_DEFINE([USE_ALLOCA], [], [Make use of alloca])\n     ],[\n       use_alloca=no\n     ])\n   AC_MSG_RESULT([$use_alloca])\n  ])\n\nLT_LIB_M\n\nAC_ARG_ENABLE([fixed-point],\n    [AS_HELP_STRING([--enable-fixed-point],\n                    [compile without floating point (for machines without a fast enough FPU)])],,\n    [enable_fixed_point=no])\n\nAS_IF([test \"$enable_fixed_point\" = \"yes\"],[\n  enable_float=\"no\"\n  AC_DEFINE([FIXED_POINT], [1], [Compile as fixed-point (for machines without a fast enough FPU)])\n  PC_BUILD=\"fixed-point\"\n],[\n  enable_float=\"yes\";\n  PC_BUILD=\"floating-point\"\n])\n\nAM_CONDITIONAL([FIXED_POINT], [test \"$enable_fixed_point\" = \"yes\"])\n\nAC_ARG_ENABLE([fixed-point-debug],\n    [AS_HELP_STRING([--enable-fixed-point-debug], [debug fixed-point implementation])],,\n    [enable_fixed_point_debug=no])\n\nAS_IF([test \"$enable_fixed_point_debug\" = \"yes\"],[\n  AC_DEFINE([FIXED_DEBUG], [1], [Debug fixed-point implementation])\n])\n\nAC_ARG_ENABLE([float_api],\n    [AS_HELP_STRING([--disable-float-api],\n                    [compile without the floating point API (for machines with no float library)])],,\n    [enable_float_api=yes])\n\nAM_CONDITIONAL([DISABLE_FLOAT_API], [test \"$enable_float_api\" = \"no\"])\n\nAS_IF([test \"$enable_float_api\" = \"no\"],[\n  AC_DEFINE([DISABLE_FLOAT_API], [1], [Do not build the float API])\n])\n\nAC_ARG_ENABLE([custom-modes],\n    [AS_HELP_STRING([--enable-custom-modes], [enable non-Opus modes, e.g. 44.1 kHz & 2^n frames])],,\n    [enable_custom_modes=no])\n\nAS_IF([test \"$enable_custom_modes\" = \"yes\"],[\n  AC_DEFINE([CUSTOM_MODES], [1], [Custom modes])\n  PC_BUILD=\"$PC_BUILD, custom modes\"\n])\n\nAM_CONDITIONAL([CUSTOM_MODES], [test \"$enable_custom_modes\" = \"yes\"])\n\nAC_ARG_ENABLE([dred],\n    [AS_HELP_STRING([--enable-dred], [Use Deep REDundancy (DRED)])],,\n    [enable_dred=no])\n\nAS_IF([test \"$enable_dred\" = \"yes\"],[\n  AC_DEFINE([ENABLE_DRED], [1], [DRED])\n])\nAM_CONDITIONAL([ENABLE_DRED], [test \"$enable_dred\" = \"yes\"])\n\nAC_ARG_ENABLE([deep-plc],\n    [AS_HELP_STRING([--enable-deep-plc], [Use deep PLC for SILK])],,\n    [enable_deep_plc=no])\n\nAS_IF([test \"$enable_deep_plc\" = \"yes\" || test \"$enable_dred\" = \"yes\" || test \"$enable_osce\" = \"yes\" || test \"$enable_osce_training_data\" = \"yes\"],[\n  AC_DEFINE([ENABLE_DEEP_PLC], [1], [Deep PLC])\n])\nAM_CONDITIONAL([ENABLE_DEEP_PLC], [test \"$enable_deep_plc\" = \"yes\" || test \"$enable_dred\" = \"yes\" || test \"$enable_osce\" = \"yes\" || test \"$enable_osce_training_data\" = \"yes\"])\n\nAC_ARG_ENABLE([lossgen],\n    [AS_HELP_STRING([--enable-lossgen], [Build opus_demo with packet loss simulator])],,\n    [enable_lossgen=no])\n\nAS_IF([test \"$enable_lossgen\" = \"yes\"],[\n  AC_DEFINE([ENABLE_LOSSGEN], [1], [LOSSGEN])\n])\nAM_CONDITIONAL([ENABLE_LOSSGEN], [test \"$enable_lossgen\" = \"yes\"])\n\nhas_float_approx=no\ncase \"$host_cpu\" in\ni[[3456]]86 | x86_64 | arm* | aarch64* | powerpc64 | powerpc32 | ia64)\n  has_float_approx=yes\n  ;;\nesac\n\nAC_ARG_ENABLE([float-approx],\n    [AS_HELP_STRING([--enable-float-approx], [enable fast approximations for floating point])],\n    [if test \"$enable_float_approx\" = \"yes\"; then\n       AC_WARN([Floating point approximations are not supported on all platforms.])\n     fi\n    ],\n    [enable_float_approx=$has_float_approx])\n\nAS_IF([test \"$enable_float_approx\" = \"yes\"],[\n  AC_DEFINE([FLOAT_APPROX], [1], [Float approximations])\n])\n\nAC_ARG_ENABLE([asm],\n    [AS_HELP_STRING([--disable-asm], [Disable assembly optimizations])],,\n    [enable_asm=yes])\n\nAC_ARG_ENABLE([rtcd],\n    [AS_HELP_STRING([--disable-rtcd], [Disable run-time CPU capabilities detection])],,\n    [enable_rtcd=yes])\n\nAC_ARG_ENABLE([intrinsics],\n    [AS_HELP_STRING([--disable-intrinsics], [Disable intrinsics optimizations])],,\n    [enable_intrinsics=yes])\n\nrtcd_support=no\ncpu_arm=no\ncpu_x86=no\n\nAS_IF([test x\"${enable_asm}\" = x\"yes\"],[\n    inline_optimization=\"No inline ASM for your platform, please send patches\"\n    case $host_cpu in\n      arm*)\n        dnl Currently we only have asm for fixed-point\n        #AS_IF([test \"$enable_float\" != \"yes\"],[\n            cpu_arm=yes\n            AC_DEFINE([OPUS_ARM_ASM], [],  [Make use of ARM asm optimization])\n            AS_GCC_INLINE_ASSEMBLY(\n                [inline_optimization=\"ARM\"],\n                [inline_optimization=\"disabled\"]\n            )\n            AS_ASM_ARM_EDSP([OPUS_ARM_INLINE_EDSP=1],[OPUS_ARM_INLINE_EDSP=0])\n            AS_ASM_ARM_MEDIA([OPUS_ARM_INLINE_MEDIA=1],\n                [OPUS_ARM_INLINE_MEDIA=0])\n            AS_ASM_ARM_NEON([OPUS_ARM_INLINE_NEON=1],[OPUS_ARM_INLINE_NEON=0])\n            AS_IF([test x\"$inline_optimization\" = x\"ARM\"],[\n                AM_CONDITIONAL([OPUS_ARM_INLINE_ASM],[true])\n                AC_DEFINE([OPUS_ARM_INLINE_ASM], 1,\n                    [Use generic ARMv4 inline asm optimizations])\n                AS_IF([test x\"$OPUS_ARM_INLINE_EDSP\" = x\"1\"],[\n                    AC_DEFINE([OPUS_ARM_INLINE_EDSP], [1],\n                        [Use ARMv5E inline asm optimizations])\n                    inline_optimization=\"$inline_optimization (EDSP)\"\n                ])\n                AS_IF([test x\"$OPUS_ARM_INLINE_MEDIA\" = x\"1\"],[\n                    AC_DEFINE([OPUS_ARM_INLINE_MEDIA], [1],\n                        [Use ARMv6 inline asm optimizations])\n                    inline_optimization=\"$inline_optimization (Media)\"\n                ])\n                AS_IF([test x\"$OPUS_ARM_INLINE_NEON\" = x\"1\"],[\n                    AC_DEFINE([OPUS_ARM_INLINE_NEON], 1,\n                        [Use ARM NEON inline asm optimizations])\n                    inline_optimization=\"$inline_optimization (NEON)\"\n                ])\n            ])\n            dnl We need Perl to translate RVCT-syntax asm to gas syntax.\n            AC_CHECK_PROG([HAVE_PERL], perl, yes, no)\n            AS_IF([test x\"$HAVE_PERL\" = x\"yes\"],[\n                AM_CONDITIONAL([OPUS_ARM_EXTERNAL_ASM],[true])\n                asm_optimization=\"ARM\"\n                AS_IF([test x\"$OPUS_ARM_INLINE_EDSP\" = x\"1\"], [\n                    OPUS_ARM_PRESUME_EDSP=1\n                    OPUS_ARM_MAY_HAVE_EDSP=1\n                ],\n                [\n                    OPUS_ARM_PRESUME_EDSP=0\n                    OPUS_ARM_MAY_HAVE_EDSP=0\n                ])\n                AS_IF([test x\"$OPUS_ARM_INLINE_MEDIA\" = x\"1\"], [\n                    OPUS_ARM_PRESUME_MEDIA=1\n                    OPUS_ARM_MAY_HAVE_MEDIA=1\n                ],\n                [\n                    OPUS_ARM_PRESUME_MEDIA=0\n                    OPUS_ARM_MAY_HAVE_MEDIA=0\n                ])\n                AS_IF([test x\"$OPUS_ARM_INLINE_NEON\" = x\"1\"], [\n                    OPUS_ARM_PRESUME_NEON=1\n                    OPUS_ARM_MAY_HAVE_NEON=1\n                ],\n                [\n                    OPUS_ARM_PRESUME_NEON=0\n                    OPUS_ARM_MAY_HAVE_NEON=0\n                ])\n                AS_IF([test x\"$enable_rtcd\" = x\"yes\"],[\n                    AS_IF([test x\"$OPUS_ARM_MAY_HAVE_EDSP\" != x\"1\"],[\n                        AC_MSG_NOTICE(\n                          [Trying to force-enable armv5e EDSP instructions...])\n                        AS_ASM_ARM_EDSP_FORCE([OPUS_ARM_MAY_HAVE_EDSP=1])\n                    ])\n                    AS_IF([test x\"$OPUS_ARM_MAY_HAVE_MEDIA\" != x\"1\"],[\n                        AC_MSG_NOTICE(\n                          [Trying to force-enable ARMv6 media instructions...])\n                        AS_ASM_ARM_MEDIA_FORCE([OPUS_ARM_MAY_HAVE_MEDIA=1])\n                    ])\n                    AS_IF([test x\"$OPUS_ARM_MAY_HAVE_NEON\" != x\"1\"],[\n                        AC_MSG_NOTICE(\n                          [Trying to force-enable NEON instructions...])\n                        AS_ASM_ARM_NEON_FORCE([OPUS_ARM_MAY_HAVE_NEON=1])\n                    ])\n                ])\n                rtcd_support=\n                AS_IF([test x\"$OPUS_ARM_MAY_HAVE_EDSP\" = x\"1\"],[\n                    AC_DEFINE(OPUS_ARM_MAY_HAVE_EDSP, 1,\n                        [Define if assembler supports EDSP instructions])\n                    AS_IF([test x\"$OPUS_ARM_PRESUME_EDSP\" = x\"1\"],[\n                        AC_DEFINE(OPUS_ARM_PRESUME_EDSP, 1,\n                          [Define if binary requires EDSP instruction support])\n                        asm_optimization=\"$asm_optimization (EDSP)\"\n                    ],\n                        [rtcd_support=\"$rtcd_support (EDSP)\"]\n                    )\n                ])\n                AC_SUBST(OPUS_ARM_MAY_HAVE_EDSP)\n                AS_IF([test x\"$OPUS_ARM_MAY_HAVE_MEDIA\" = x\"1\"],[\n                    AC_DEFINE(OPUS_ARM_MAY_HAVE_MEDIA, 1,\n                      [Define if assembler supports ARMv6 media instructions])\n                    AS_IF([test x\"$OPUS_ARM_PRESUME_MEDIA\" = x\"1\"],[\n                        AC_DEFINE(OPUS_ARM_PRESUME_MEDIA, 1,\n                          [Define if binary requires ARMv6 media instruction support])\n                        asm_optimization=\"$asm_optimization (Media)\"\n                    ],\n                        [rtcd_support=\"$rtcd_support (Media)\"]\n                    )\n                ])\n                AC_SUBST(OPUS_ARM_MAY_HAVE_MEDIA)\n                AS_IF([test x\"$OPUS_ARM_MAY_HAVE_NEON\" = x\"1\"],[\n                    AC_DEFINE(OPUS_ARM_MAY_HAVE_NEON, 1,\n                      [Define if compiler supports NEON instructions])\n                    AS_IF([test x\"$OPUS_ARM_PRESUME_NEON\" = x\"1\"], [\n                        AC_DEFINE(OPUS_ARM_PRESUME_NEON, 1,\n                          [Define if binary requires NEON instruction support])\n                        asm_optimization=\"$asm_optimization (NEON)\"\n                    ],\n                        [rtcd_support=\"$rtcd_support (NEON)\"]\n                    )\n                ])\n                AC_SUBST(OPUS_ARM_MAY_HAVE_NEON)\n                AS_IF([test x\"$OPUS_ARM_MAY_HAVE_DOTPROD\" = x\"1\"],[\n                    AC_DEFINE(OPUS_ARM_MAY_HAVE_DOTPROD, 1,\n                      [Define if compiler supports DOTPROD instructions])\n                    AS_IF([test x\"$OPUS_ARM_PRESUME_DOTPROD\" = x\"1\"], [\n                        AC_DEFINE(OPUS_ARM_PRESUME_DOTPROD, 1,\n                          [Define if binary requires DOTPROD instruction support])\n                        asm_optimization=\"$asm_optimization (DOTPROD)\"\n                    ],\n                        [rtcd_support=\"$rtcd_support (DOTPROD)\"]\n                    )\n                ])\n                AC_SUBST(OPUS_ARM_MAY_HAVE_DOTPROD)\n                dnl Make sure turning on RTCD gets us at least one\n                dnl instruction set.\n                AS_IF([test x\"$rtcd_support\" != x\"\"],\n                    [rtcd_support=ARM\"$rtcd_support\"],\n                    [rtcd_support=\"no\"]\n                )\n                AC_MSG_CHECKING([for apple style tools])\n                AC_PREPROC_IFELSE([AC_LANG_PROGRAM([\n#ifndef __APPLE__\n#error 1\n#endif],[])],\n                    [AC_MSG_RESULT([yes]); ARM2GNU_PARAMS=\"--apple\"],\n                    [AC_MSG_RESULT([no]); ARM2GNU_PARAMS=\"\"])\n                AC_SUBST(ARM2GNU_PARAMS)\n            ],\n            [\n                AC_MSG_WARN(\n                  [*** ARM assembly requires perl -- disabling optimizations])\n                asm_optimization=\"(missing perl dependency for ARM)\"\n            ])\n        #])\n        ;;\n    esac\n],[\n   inline_optimization=\"disabled\"\n   asm_optimization=\"disabled\"\n])\n\nAM_CONDITIONAL([OPUS_ARM_INLINE_ASM],\n    [test x\"${inline_optimization%% *}\" = x\"ARM\"])\nAM_CONDITIONAL([OPUS_ARM_EXTERNAL_ASM],\n    [test x\"${asm_optimization%% *}\" = x\"ARM\"])\n\nAM_CONDITIONAL([HAVE_SSE], [false])\nAM_CONDITIONAL([HAVE_SSE2], [false])\nAM_CONDITIONAL([HAVE_SSE4_1], [false])\nAM_CONDITIONAL([HAVE_AVX2], [false])\n\nm4_define([DEFAULT_X86_SSE_CFLAGS], [-msse])\nm4_define([DEFAULT_X86_SSE2_CFLAGS], [-msse2])\nm4_define([DEFAULT_X86_SSE4_1_CFLAGS], [-msse4.1])\nm4_define([DEFAULT_X86_AVX2_CFLAGS], [-mavx -mfma -mavx2])\nm4_define([DEFAULT_ARM_NEON_INTR_CFLAGS], [-mfpu=neon])\nm4_define([DEFAULT_ARM_DOTPROD_INTR_CFLAGS], [\"-march=armv8.2-a+dotprod\"])\n# With GCC on ARM32 softfp architectures (e.g. Android, or older Ubuntu) you need to specify\n# -mfloat-abi=softfp for -mfpu=neon to work.  However, on ARM32 hardfp architectures (e.g. newer Ubuntu),\n# this option will break things.\n\n# As a heuristic, if host matches arm*eabi* but not arm*hf*, it's probably soft-float.\nm4_define([DEFAULT_ARM_NEON_SOFTFP_INTR_CFLAGS], [-mfpu=neon -mfloat-abi=softfp])\n\nAS_CASE([$host],\n        [arm*hf*], [AS_VAR_SET([RESOLVED_DEFAULT_ARM_NEON_INTR_CFLAGS], \"DEFAULT_ARM_NEON_INTR_CFLAGS\")],\n        [arm*eabi*], [AS_VAR_SET([RESOLVED_DEFAULT_ARM_NEON_INTR_CFLAGS], \"DEFAULT_ARM_NEON_SOFTFP_INTR_CFLAGS\")],\n        [AS_VAR_SET([RESOLVED_DEFAULT_ARM_NEON_INTR_CFLAGS], \"DEFAULT_ARM_NEON_INTR_CFLAGS\")])\n\nAC_ARG_VAR([X86_SSE_CFLAGS], [C compiler flags to compile SSE intrinsics @<:@default=]DEFAULT_X86_SSE_CFLAGS[@:>@])\nAC_ARG_VAR([X86_SSE2_CFLAGS], [C compiler flags to compile SSE2 intrinsics @<:@default=]DEFAULT_X86_SSE2_CFLAGS[@:>@])\nAC_ARG_VAR([X86_SSE4_1_CFLAGS], [C compiler flags to compile SSE4.1 intrinsics @<:@default=]DEFAULT_X86_SSE4_1_CFLAGS[@:>@])\nAC_ARG_VAR([X86_AVX2_CFLAGS], [C compiler flags to compile AVX2 intrinsics @<:@default=]DEFAULT_X86_AVX2_CFLAGS[@:>@])\nAC_ARG_VAR([ARM_NEON_INTR_CFLAGS], [C compiler flags to compile ARM NEON intrinsics @<:@default=]DEFAULT_ARM_NEON_INTR_CFLAGS / DEFAULT_ARM_NEON_SOFTFP_INTR_CFLAGS[@:>@])\nAC_ARG_VAR([ARM_DOTPROD_INTR_CFLAGS], [C compiler flags to compile ARM DOTPROD intrinsics @<:@default=]DEFAULT_ARM_DOTPROD_INTR_CFLAGS[@:>@])\n\nAS_VAR_SET_IF([X86_SSE_CFLAGS], [], [AS_VAR_SET([X86_SSE_CFLAGS], \"DEFAULT_X86_SSE_CFLAGS\")])\nAS_VAR_SET_IF([X86_SSE2_CFLAGS], [], [AS_VAR_SET([X86_SSE2_CFLAGS], \"DEFAULT_X86_SSE2_CFLAGS\")])\nAS_VAR_SET_IF([X86_SSE4_1_CFLAGS], [], [AS_VAR_SET([X86_SSE4_1_CFLAGS], \"DEFAULT_X86_SSE4_1_CFLAGS\")])\nAS_VAR_SET_IF([X86_AVX2_CFLAGS], [], [AS_VAR_SET([X86_AVX2_CFLAGS], \"DEFAULT_X86_AVX2_CFLAGS\")])\nAS_VAR_SET_IF([ARM_NEON_INTR_CFLAGS], [], [AS_VAR_SET([ARM_NEON_INTR_CFLAGS], [\"$RESOLVED_DEFAULT_ARM_NEON_INTR_CFLAGS\"])])\nAS_VAR_SET_IF([ARM_DOTPROD_INTR_CFLAGS], [], [AS_VAR_SET([ARM_DOTPROD_INTR_CFLAGS], [\"DEFAULT_ARM_DOTPROD_INTR_CFLAGS\"])])\n\nAC_DEFUN([OPUS_PATH_NE10],\n   [\n      AC_ARG_WITH(NE10,\n                  AC_HELP_STRING([--with-NE10=PFX],[Prefix where libNE10 is installed (optional)]),\n                  NE10_prefix=\"$withval\", NE10_prefix=\"\")\n      AC_ARG_WITH(NE10-libraries,\n                  AC_HELP_STRING([--with-NE10-libraries=DIR],\n                        [Directory where libNE10 library is installed (optional)]),\n                  NE10_libraries=\"$withval\", NE10_libraries=\"\")\n      AC_ARG_WITH(NE10-includes,\n                  AC_HELP_STRING([--with-NE10-includes=DIR],\n                                 [Directory where libNE10 header files are installed (optional)]),\n                  NE10_includes=\"$withval\", NE10_includes=\"\")\n\n      if test \"x$NE10_libraries\" != \"x\" ; then\n         NE10_LIBS=\"-L$NE10_libraries\"\n      elif test \"x$NE10_prefix\" = \"xno\" || test \"x$NE10_prefix\" = \"xyes\" ; then\n         NE10_LIBS=\"\"\n      elif test \"x$NE10_prefix\" != \"x\" ; then\n         NE10_LIBS=\"-L$NE10_prefix/lib\"\n      elif test \"x$prefix\" != \"xNONE\" ; then\n         NE10_LIBS=\"-L$prefix/lib\"\n      fi\n\n      if test \"x$NE10_prefix\" != \"xno\" ; then\n         NE10_LIBS=\"$NE10_LIBS -lNE10\"\n      fi\n\n      if test \"x$NE10_includes\" != \"x\" ; then\n         NE10_CFLAGS=\"-I$NE10_includes\"\n      elif test \"x$NE10_prefix\" = \"xno\" || test \"x$NE10_prefix\" = \"xyes\" ; then\n         NE10_CFLAGS=\"\"\n      elif test \"x$NE10_prefix\" != \"x\" ; then\n         NE10_CFLAGS=\"-I$NE10_prefix/include\"\n      elif test \"x$prefix\" != \"xNONE\"; then\n         NE10_CFLAGS=\"-I$prefix/include\"\n      fi\n\n      AC_MSG_CHECKING(for NE10)\n      save_CFLAGS=\"$CFLAGS\"; CFLAGS=\"$CFLAGS $NE10_CFLAGS\"\n      save_LIBS=\"$LIBS\"; LIBS=\"$LIBS $NE10_LIBS $LIBM\"\n      AC_LINK_IFELSE(\n         [\n            AC_LANG_PROGRAM(\n               [[#include <NE10_dsp.h>\n               ]],\n               [[\n                  ne10_fft_cfg_float32_t cfg;\n                  cfg = ne10_fft_alloc_c2c_float32_neon(480);\n               ]]\n            )\n         ],[\n            HAVE_ARM_NE10=1\n            AC_MSG_RESULT([yes])\n         ],[\n            HAVE_ARM_NE10=0\n            AC_MSG_RESULT([no])\n            NE10_CFLAGS=\"\"\n            NE10_LIBS=\"\"\n         ]\n      )\n      CFLAGS=\"$save_CFLAGS\"; LIBS=\"$save_LIBS\"\n      #Now we know if libNE10 is installed or not\n      AS_IF([test x\"$HAVE_ARM_NE10\" = x\"1\"],\n         [\n            AC_DEFINE([HAVE_ARM_NE10], 1, [NE10 library is installed on host. Make sure it is on target!])\n            AC_SUBST(HAVE_ARM_NE10)\n            AC_SUBST(NE10_CFLAGS)\n            AC_SUBST(NE10_LIBS)\n         ]\n      )\n   ]\n)\n\nAS_IF([test x\"$enable_intrinsics\" = x\"yes\"],[\n   intrinsics_support=\"\"\n   AS_CASE([$host_cpu],\n   [arm*|aarch64*],\n   [\n      cpu_arm=yes\n      OPUS_CHECK_INTRINSICS(\n         [ARM Neon],\n         [$ARM_NEON_INTR_CFLAGS],\n         [OPUS_ARM_MAY_HAVE_NEON_INTR],\n         [OPUS_ARM_PRESUME_NEON_INTR],\n         [[#include <arm_neon.h>\n         ]],\n         [[\n            static float32x4_t A0, A1, SUMM;\n            SUMM = vmlaq_f32(SUMM, A0, A1);\n            return (int)vgetq_lane_f32(SUMM, 0);\n         ]]\n      )\n      AS_IF([test x\"$OPUS_ARM_MAY_HAVE_NEON_INTR\" = x\"1\" && test x\"$OPUS_ARM_PRESUME_NEON_INTR\" != x\"1\"],\n          [\n             OPUS_ARM_NEON_INTR_CFLAGS=\"$ARM_NEON_INTR_CFLAGS\"\n             AC_SUBST([OPUS_ARM_NEON_INTR_CFLAGS])\n          ]\n      )\n\n      AS_IF([test x\"$OPUS_ARM_MAY_HAVE_NEON_INTR\" = x\"1\"],\n      [\n         AC_DEFINE([OPUS_ARM_MAY_HAVE_NEON_INTR], 1, [Compiler supports ARMv7/Aarch64 Neon Intrinsics])\n         intrinsics_support=\"$intrinsics_support (NEON)\"\n\n         AS_IF([test x\"$enable_rtcd\" != x\"no\" && test x\"$OPUS_ARM_PRESUME_NEON_INTR\" != x\"1\"],\n            [AS_IF([test x\"$rtcd_support\" = x\"no\"],\n               [rtcd_support=\"ARM (NEON Intrinsics)\"],\n               [rtcd_support=\"$rtcd_support (NEON Intrinsics)\"])])\n\n         AS_IF([test x\"$OPUS_ARM_PRESUME_NEON_INTR\" = x\"1\"],\n            [AC_DEFINE([OPUS_ARM_PRESUME_NEON_INTR], 1, [Define if binary requires NEON intrinsics support])])\n\n         OPUS_PATH_NE10()\n         AS_IF([test x\"$NE10_LIBS\" != x\"\"],\n         [\n              intrinsics_support=\"$intrinsics_support (NE10)\"\n              AS_IF([test x\"enable_rtcd\" != x\"\" \\\n               && test x\"$OPUS_ARM_PRESUME_NEON_INTR\" != x\"1\"],\n                 [rtcd_support=\"$rtcd_support (NE10)\"])\n         ])\n\n         OPUS_CHECK_INTRINSICS(\n            [Aarch64 Neon],\n            [$ARM_NEON_INTR_CFLAGS],\n            [OPUS_ARM_MAY_HAVE_AARCH64_NEON_INTR],\n            [OPUS_ARM_PRESUME_AARCH64_NEON_INTR],\n            [[#include <arm_neon.h>\n            ]],\n            [[\n               static int32_t IN;\n               static int16_t OUT;\n               OUT = vqmovns_s32(IN);\n            ]]\n         )\n\n         AS_IF([test x\"$OPUS_ARM_PRESUME_AARCH64_NEON_INTR\" = x\"1\"],\n         [\n            AC_DEFINE([OPUS_ARM_PRESUME_AARCH64_NEON_INTR], 1, [Define if binary requires Aarch64 Neon Intrinsics])\n            intrinsics_support=\"$intrinsics_support (NEON [Aarch64])\"\n         ])\n\n         OPUS_CHECK_INTRINSICS(\n            [Aarch64 dotprod],\n\t    [$ARM_DOTPROD_INTR_CFLAGS],\n            [OPUS_ARM_MAY_HAVE_DOTPROD],\n            [OPUS_ARM_PRESUME_DOTPROD],\n            [[#include <arm_neon.h>\n            ]],\n            [[\n               static int32x4_t acc;\n               static int8x16_t a, b;\n               acc = vdotq_s32(acc, a, b);\n            ]]\n         )\n         AS_IF([test x\"$OPUS_ARM_MAY_HAVE_DOTPROD\" = x\"1\" && test x\"$OPUS_ARM_PRESUME_DOTPROD\" != x\"1\"],\n             [\n                OPUS_ARM_DOTPROD_INTR_CFLAGS=\"$ARM_NEON_DOTPROD_CFLAGS\"\n                AC_SUBST([OPUS_ARM_DOTPROD_INTR_CFLAGS])\n             ]\n         )\n\n         AS_IF([test x\"$OPUS_ARM_MAY_HAVE_DOTPROD\" = x\"1\"],\n             [\n                AC_DEFINE([OPUS_ARM_MAY_HAVE_DOTPROD], 1, [Compiler supports Aarch64 DOTPROD Intrinsics])\n                intrinsics_support=\"$intrinsics_support (DOTPROD)\"\n\n                AS_IF([test x\"$OPUS_ARM_PRESUME_DOTPROD\" = x\"1\"],\n                [\n                   AC_DEFINE([OPUS_ARM_PRESUME_DOTPROD], 1, [Define if binary requires Aarch64 dotprod Intrinsics])\n                   intrinsics_support=\"$intrinsics_support (DOTPROD [Aarch64])\"\n                ])\n\n                AS_IF([test x\"$enable_rtcd\" != x\"no\" && test x\"$OPUS_ARM_PRESUME_DOTPROD\" != x\"1\"],\n                   [AS_IF([test x\"$rtcd_support\" = x\"no\"],\n                      [rtcd_support=\"ARM (DOTPROD Intrinsics)\"],\n                      [rtcd_support=\"$rtcd_support (DOTPROD Intrinsics)\"])])\n\n             ]\n         )\n\n\n         AS_IF([test x\"$intrinsics_support\" = x\"\"],\n            [intrinsics_support=no],\n            [intrinsics_support=\"ARM$intrinsics_support\"])\n      ],\n      [\n         AC_MSG_WARN([Compiler does not support ARM intrinsics])\n         intrinsics_support=no\n      ])\n   ],\n   [i?86|x86_64],\n   [\n      cpu_x86=yes\n      OPUS_CHECK_INTRINSICS(\n         [SSE],\n         [$X86_SSE_CFLAGS],\n         [OPUS_X86_MAY_HAVE_SSE],\n         [OPUS_X86_PRESUME_SSE],\n         [[#include <xmmintrin.h>\n           #include <time.h>\n         ]],\n         [[\n             __m128 mtest;\n             mtest = _mm_set1_ps((float)time(NULL));\n             mtest = _mm_mul_ps(mtest, mtest);\n             return _mm_cvtss_si32(mtest);\n         ]]\n      )\n      AS_IF([test x\"$OPUS_X86_MAY_HAVE_SSE\" = x\"1\" && test x\"$OPUS_X86_PRESUME_SSE\" != x\"1\"],\n          [\n             OPUS_X86_SSE_CFLAGS=\"$X86_SSE_CFLAGS\"\n             AC_SUBST([OPUS_X86_SSE_CFLAGS])\n          ]\n      )\n      OPUS_CHECK_INTRINSICS(\n         [SSE2],\n         [$X86_SSE2_CFLAGS],\n         [OPUS_X86_MAY_HAVE_SSE2],\n         [OPUS_X86_PRESUME_SSE2],\n         [[#include <emmintrin.h>\n           #include <time.h>\n         ]],\n         [[\n            __m128i mtest;\n            mtest = _mm_set1_epi32((int)time(NULL));\n            mtest = _mm_mul_epu32(mtest, mtest);\n            return _mm_cvtsi128_si32(mtest);\n         ]]\n      )\n      AS_IF([test x\"$OPUS_X86_MAY_HAVE_SSE2\" = x\"1\" && test x\"$OPUS_X86_PRESUME_SSE2\" != x\"1\"],\n          [\n             OPUS_X86_SSE2_CFLAGS=\"$X86_SSE2_CFLAGS\"\n             AC_SUBST([OPUS_X86_SSE2_CFLAGS])\n          ]\n      )\n      OPUS_CHECK_INTRINSICS(\n         [SSE4.1],\n         [$X86_SSE4_1_CFLAGS],\n         [OPUS_X86_MAY_HAVE_SSE4_1],\n         [OPUS_X86_PRESUME_SSE4_1],\n         [[#include <smmintrin.h>\n           #include <time.h>\n         ]],\n         [[\n            __m128i mtest;\n            mtest = _mm_set1_epi32((int)time(NULL));\n            mtest = _mm_mul_epi32(mtest, mtest);\n            return _mm_cvtsi128_si32(mtest);\n         ]]\n      )\n      AS_IF([test x\"$OPUS_X86_MAY_HAVE_SSE4_1\" = x\"1\" && test x\"$OPUS_X86_PRESUME_SSE4_1\" != x\"1\"],\n          [\n             OPUS_X86_SSE4_1_CFLAGS=\"$X86_SSE4_1_CFLAGS\"\n             AC_SUBST([OPUS_X86_SSE4_1_CFLAGS])\n          ]\n      )\n      OPUS_CHECK_INTRINSICS(\n         [AVX2],\n         [$X86_AVX2_CFLAGS],\n         [OPUS_X86_MAY_HAVE_AVX2],\n         [OPUS_X86_PRESUME_AVX2],\n         [[#include <immintrin.h>\n           #include <time.h>\n         ]],\n         [[\n             unsigned char utest[[16]] = {1};\n             __m256 mtest;\n             __m256i mtest1;\n             __m256i mtest2;\n             mtest = _mm256_set1_ps((float)time(NULL));\n             mtest = _mm256_fmadd_ps(mtest, mtest, mtest);\n             mtest1 = _mm256_set_m128i(_mm_loadu_si64(utest), _mm_loadu_si64(utest));\n             mtest2 =\n              _mm256_cvtepi16_epi32(_mm_loadu_si128(utest));\n             return _mm256_extract_epi16(_mm256_xor_si256(\n              _mm256_xor_si256(mtest1, mtest2), _mm256_cvttps_epi32(mtest)), 0);\n         ]]\n      )\n      AS_IF([test x\"$OPUS_X86_MAY_HAVE_AVX2\" = x\"1\" && test x\"$OPUS_X86_PRESUME_AVX2\" != x\"1\"],\n          [\n             OPUS_X86_AVX2_CFLAGS=\"$X86_AVX2_CFLAGS\"\n             AC_SUBST([OPUS_X86_AVX2_CFLAGS])\n          ]\n      )\n         AS_IF([test x\"$rtcd_support\" = x\"no\"], [rtcd_support=\"\"])\n         AS_IF([test x\"$OPUS_X86_MAY_HAVE_SSE\" = x\"1\"],\n         [\n            AC_DEFINE([OPUS_X86_MAY_HAVE_SSE], 1, [Compiler supports X86 SSE Intrinsics])\n            intrinsics_support=\"$intrinsics_support SSE\"\n\n            AS_IF([test x\"$OPUS_X86_PRESUME_SSE\" = x\"1\"],\n               [AC_DEFINE([OPUS_X86_PRESUME_SSE], 1, [Define if binary requires SSE intrinsics support])],\n               [rtcd_support=\"$rtcd_support SSE\"])\n         ],\n         [\n            AC_MSG_WARN([Compiler does not support SSE intrinsics])\n         ])\n\n         AS_IF([test x\"$OPUS_X86_MAY_HAVE_SSE2\" = x\"1\"],\n         [\n            AC_DEFINE([OPUS_X86_MAY_HAVE_SSE2], 1, [Compiler supports X86 SSE2 Intrinsics])\n            intrinsics_support=\"$intrinsics_support SSE2\"\n\n            AS_IF([test x\"$OPUS_X86_PRESUME_SSE2\" = x\"1\"],\n               [AC_DEFINE([OPUS_X86_PRESUME_SSE2], 1, [Define if binary requires SSE2 intrinsics support])],\n               [rtcd_support=\"$rtcd_support SSE2\"])\n         ],\n         [\n            AC_MSG_WARN([Compiler does not support SSE2 intrinsics])\n         ])\n\n         AS_IF([test x\"$OPUS_X86_MAY_HAVE_SSE4_1\" = x\"1\"],\n         [\n            AC_DEFINE([OPUS_X86_MAY_HAVE_SSE4_1], 1, [Compiler supports X86 SSE4.1 Intrinsics])\n            intrinsics_support=\"$intrinsics_support SSE4.1\"\n\n            AS_IF([test x\"$OPUS_X86_PRESUME_SSE4_1\" = x\"1\"],\n               [AC_DEFINE([OPUS_X86_PRESUME_SSE4_1], 1, [Define if binary requires SSE4.1 intrinsics support])],\n               [rtcd_support=\"$rtcd_support SSE4.1\"])\n         ],\n         [\n            AC_MSG_WARN([Compiler does not support SSE4.1 intrinsics])\n         ])\n         AS_IF([test x\"$OPUS_X86_MAY_HAVE_AVX2\" = x\"1\"],\n         [\n            AC_DEFINE([OPUS_X86_MAY_HAVE_AVX2], 1, [Compiler supports X86 AVX2 Intrinsics])\n            intrinsics_support=\"$intrinsics_support AVX2\"\n\n            AS_IF([test x\"$OPUS_X86_PRESUME_AVX2\" = x\"1\"],\n               [AC_DEFINE([OPUS_X86_PRESUME_AVX2], 1, [Define if binary requires AVX2 intrinsics support])],\n               [rtcd_support=\"$rtcd_support AVX2\"])\n         ],\n         [\n            AC_MSG_WARN([Compiler does not support AVX2 intrinsics])\n         ])\n\n         AS_IF([test x\"$intrinsics_support\" = x\"\"],\n            [intrinsics_support=no],\n            [intrinsics_support=\"x86$intrinsics_support\"]\n         )\n         AS_IF([test x\"$rtcd_support\" = x\"\"],\n            [rtcd_support=no],\n            [rtcd_support=\"x86$rtcd_support\"],\n        )\n\n    AS_IF([test x\"$enable_rtcd\" = x\"yes\" && test x\"$rtcd_support\" != x\"\"],[\n            get_cpuid_by_asm=\"no\"\n            AC_MSG_CHECKING([How to get X86 CPU Info])\n            AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n                 #include <stdio.h>\n            ]],[[\n                 unsigned int CPUInfo0;\n                 unsigned int CPUInfo1;\n                 unsigned int CPUInfo2;\n                 unsigned int CPUInfo3;\n                 unsigned int InfoType;\n                #if defined(__i386__) && defined(__PIC__)\n                 __asm__ __volatile__ (\n                 \"xchg %%ebx, %1\\n\"\n                 \"cpuid\\n\"\n                 \"xchg %%ebx, %1\\n\":\n                 \"=a\" (CPUInfo0),\n                 \"=r\" (CPUInfo1),\n                 \"=c\" (CPUInfo2),\n                 \"=d\" (CPUInfo3) :\n                 \"a\" (InfoType), \"c\" (0)\n                );\n               #else\n                 __asm__ __volatile__ (\n                 \"cpuid\":\n                 \"=a\" (CPUInfo0),\n                 \"=b\" (CPUInfo1),\n                 \"=c\" (CPUInfo2),\n                 \"=d\" (CPUInfo3) :\n                 \"a\" (InfoType), \"c\" (0)\n                );\n               #endif\n            ]])],\n            [get_cpuid_by_asm=\"yes\"\n             AC_MSG_RESULT([Inline Assembly])\n                 AC_DEFINE([CPU_INFO_BY_ASM], [1], [Get CPU Info by asm method])],\n             [AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n                 #include <cpuid.h>\n            ]],[[\n                 unsigned int CPUInfo0;\n                 unsigned int CPUInfo1;\n                 unsigned int CPUInfo2;\n                 unsigned int CPUInfo3;\n                 unsigned int InfoType;\n                 __get_cpuid_count(InfoType, 0, &CPUInfo0, &CPUInfo1, &CPUInfo2, &CPUInfo3);\n            ]])],\n            [AC_MSG_RESULT([C method])\n                 AC_DEFINE([CPU_INFO_BY_C], [1], [Get CPU Info by c method])],\n            [AC_MSG_ERROR([no supported Get CPU Info method, please disable run-time CPU capabilities detection or intrinsics])])])])\n   ],\n   [\n      AC_MSG_WARN([No intrinsics support for your architecture])\n      intrinsics_support=\"no\"\n   ])\n],\n[\n   intrinsics_support=\"no\"\n])\n\nAM_CONDITIONAL([CPU_ARM], [test \"$cpu_arm\" = \"yes\"])\nAM_CONDITIONAL([HAVE_ARM_DOTPROD],\n    [test x\"$OPUS_ARM_MAY_HAVE_DOTPROD\" = x\"1\"])\nAM_CONDITIONAL([HAVE_ARM_NEON_INTR],\n    [test x\"$OPUS_ARM_MAY_HAVE_NEON_INTR\" = x\"1\"])\nAM_CONDITIONAL([HAVE_ARM_NE10],\n    [test x\"$HAVE_ARM_NE10\" = x\"1\"])\nAM_CONDITIONAL([CPU_X86], [test \"$cpu_x86\" = \"yes\"])\nAM_CONDITIONAL([HAVE_SSE],\n    [test x\"$OPUS_X86_MAY_HAVE_SSE\" = x\"1\"])\nAM_CONDITIONAL([HAVE_SSE2],\n    [test x\"$OPUS_X86_MAY_HAVE_SSE2\" = x\"1\"])\nAM_CONDITIONAL([HAVE_SSE4_1],\n    [test x\"$OPUS_X86_MAY_HAVE_SSE4_1\" = x\"1\"])\nAM_CONDITIONAL([HAVE_AVX2],\n    [test x\"$OPUS_X86_MAY_HAVE_AVX2\" = x\"1\"])\n\nAM_CONDITIONAL([HAVE_RTCD],\n [test x\"$enable_rtcd\" = x\"yes\" -a x\"$rtcd_support\" != x\"no\"])\nAS_IF([test x\"$enable_rtcd\" = x\"yes\"],[\n    AS_IF([test x\"$rtcd_support\" != x\"no\"],[\n        AC_DEFINE([OPUS_HAVE_RTCD], [1],\n            [Use run-time CPU capabilities detection])\n        OPUS_HAVE_RTCD=1\n        AC_SUBST(OPUS_HAVE_RTCD)\n    ])\n],[\n    rtcd_support=\"disabled\"\n])\n\nAC_ARG_ENABLE([assertions],\n    [AS_HELP_STRING([--enable-assertions],[enable additional software error checking])],,\n    [enable_assertions=no])\n\nAS_IF([test \"$enable_assertions\" = \"yes\"], [\n  AC_DEFINE([ENABLE_ASSERTIONS], [1], [Assertions])\n])\n\nAC_ARG_ENABLE([hardening],\n    [AS_HELP_STRING([--disable-hardening],[disable run-time checks that are cheap and safe for use in production])],,\n    [enable_hardening=yes])\n\nAS_IF([test \"$enable_hardening\" = \"yes\"], [\n  AC_DEFINE([ENABLE_HARDENING], [1], [Hardening])\n])\n\nAC_ARG_ENABLE([fuzzing],\n\t      [AS_HELP_STRING([--enable-fuzzing],[causes the encoder to make random decisions (do not use in production)])],,\n    [enable_fuzzing=no])\n\nAS_IF([test \"$enable_fuzzing\" = \"yes\"], [\n  AC_DEFINE([FUZZING], [1], [Fuzzing])\n])\n\nAC_ARG_ENABLE([check-asm],\n    [AS_HELP_STRING([--enable-check-asm],\n                    [enable bit-exactness checks between optimized and c implementations])],,\n    [enable_check_asm=no])\n\nAS_IF([test \"$enable_check_asm\" = \"yes\"], [\n  AC_DEFINE([OPUS_CHECK_ASM], [1], [Run bit-exactness checks between optimized and c implementations])\n])\n\nAC_ARG_ENABLE([doc],\n    [AS_HELP_STRING([--disable-doc], [Do not build API documentation])],,\n    [enable_doc=yes])\n\nAS_IF([test \"$enable_doc\" = \"yes\"], [\n  AC_CHECK_PROG(HAVE_DOXYGEN, [doxygen], [yes], [no])\n  AC_CHECK_PROG(HAVE_DOT, [dot], [yes], [no])\n],[\n  HAVE_DOXYGEN=no\n])\n\nAC_ARG_ENABLE([dot-product],\n\t      AS_HELP_STRING([--disable-dot-product], [Disable dot product implementation]),,\n  enable_dot_product=yes)\n\nAS_IF([test \"$enable_dot_product\" = \"no\"], [\n       AC_DEFINE([DISABLE_DOT_PROD], [1], [Disable dot product instructions])\n])\n\nAC_ARG_ENABLE([dnn-debug-float],\n\t      AS_HELP_STRING([--enable-dnn-debug-float], [Use floating-point DNN computation everywhere]),,\n  enable_dnn_debug_float=no)\n\nAS_IF([test \"$enable_dnn_debug_float\" = \"no\"], [\n       AC_DEFINE([DISABLE_DEBUG_FLOAT], [1], [Disable DNN debug float])\n])\n\nAC_ARG_ENABLE([osce-training-data],\n  AS_HELP_STRING([--enable-osce-training-data], [enables feature output for SILK enhancement]),,\n  [enable_osc_training_data=no]\n)\n\nAS_IF([test \"$enable_osce_training_data\" = \"yes\"], [\n       AC_DEFINE([ENABLE_OSCE_TRAINING_DATA], [1], [Enable dumping of OSCE training data])\n])\n\nAC_MSG_CHECKING([argument osce training data])\nAS_IF([test \"$enable_osce_training_data\" = \"yes\"], [\n       AC_MSG_RESULT([yes])\n], [AC_MSG_RESULT([no])])\n\nAC_ARG_ENABLE([osce],\n  AS_HELP_STRING([--enable-osce], [enables speech coding enhancement]),,\n  [enable_osce=no]\n)\n\nAS_IF([test \"$enable_osce\" = \"yes\" || test \"$enable_osce_training_data\" = \"yes\"], [\n       AC_DEFINE([ENABLE_OSCE], [1], [Enable Opus Speech Coding Enhancement])\n])\n\nAM_CONDITIONAL([ENABLE_OSCE], [test \"$enable_osce\" = \"yes\" || test \"$enable_osce_training_data\" = \"yes\"])\n\nAM_CONDITIONAL([HAVE_DOXYGEN], [test \"$HAVE_DOXYGEN\" = \"yes\"])\n\nAC_ARG_ENABLE([extra-programs],\n    [AS_HELP_STRING([--disable-extra-programs], [Do not build extra programs (demo and tests)])],,\n    [enable_extra_programs=yes])\n\nAM_CONDITIONAL([EXTRA_PROGRAMS], [test \"$enable_extra_programs\" = \"yes\"])\n\n\nAC_ARG_ENABLE([rfc8251],\n\t      AS_HELP_STRING([--disable-rfc8251], [Disable bitstream fixes from RFC 8251]),,\n  [enable_rfc8251=yes])\n\nAS_IF([test \"$enable_rfc8251\" = \"no\"], [\n       AC_DEFINE([DISABLE_UPDATE_DRAFT], [1], [Disable bitstream fixes from RFC 8251])\n])\n\n\nsaved_CFLAGS=\"$CFLAGS\"\nCFLAGS=\"$CFLAGS -fvisibility=hidden\"\nAC_MSG_CHECKING([if ${CC} supports -fvisibility=hidden])\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n    [ AC_MSG_RESULT([yes]) ],\n    [ AC_MSG_RESULT([no])\n      CFLAGS=\"$saved_CFLAGS\"\n    ])\n\non_x86=no\ncase \"$host_cpu\" in\ni[[3456]]86 | x86_64)\n  on_x86=yes\n  ;;\nesac\n\non_windows=no\ncase $host in\n*cygwin*|*mingw*)\n  on_windows=yes\n  ;;\nesac\n\ndnl Enable stack-protector-all only on x86 where it's well supported.\ndnl on some platforms it causes crashes. Hopefully the OS's default's\ndnl include this on platforms that work but have been missed here.\nAC_ARG_ENABLE([stack-protector],\n    [AS_HELP_STRING([--disable-stack-protector],[Disable compiler stack hardening])],,\n    [\n      AS_IF([test \"$ac_cv_c_compiler_gnu\" = \"yes\" && test \"$on_x86\" = \"yes\" && test \"$on_windows\" = \"no\"],\n            [enable_stack_protector=yes],[enable_stack_protector=no])\n    ])\n\nAS_IF([test \"$enable_stack_protector\" = \"yes\"],\n [\n  saved_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -fstack-protector-strong\"\n  AC_MSG_CHECKING([if ${CC} supports -fstack-protector-strong])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([],[[char foo;]])],\n    [ AC_MSG_RESULT([yes]) ],\n    [\n      AC_MSG_RESULT([no])\n      enable_stack_protector=no\n      CFLAGS=\"$saved_CFLAGS\"\n    ])\n ])\n\nAS_IF([test x$ac_cv_c_compiler_gnu = xyes],\n    [AX_ADD_FORTIFY_SOURCE]\n)\n\nCFLAGS=\"$CFLAGS -W\"\n\nwarn_CFLAGS=\"-Wall -Wextra -Wcast-align -Wnested-externs -Wshadow -Wstrict-prototypes\"\nsaved_CFLAGS=\"$CFLAGS\"\nCFLAGS=\"$CFLAGS $warn_CFLAGS\"\nAC_MSG_CHECKING([if ${CC} supports ${warn_CFLAGS}])\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([[char foo;]])],\n    [ AC_MSG_RESULT([yes]) ],\n    [ AC_MSG_RESULT([no])\n      CFLAGS=\"$saved_CFLAGS\"\n    ])\n\nsaved_LIBS=\"$LIBS\"\nLIBS=\"$LIBS $LIBM\"\nAC_CHECK_FUNCS([lrintf])\nAC_CHECK_FUNCS([lrint])\nLIBS=\"$saved_LIBS\"\n\nAC_CHECK_FUNCS([__malloc_hook])\n\nAC_SUBST([PC_BUILD])\n\nAC_CONFIG_FILES([\n    Makefile\n    opus.pc\n    opus-uninstalled.pc\n    celt/arm/armopts.s\n    doc/Makefile\n    doc/Doxyfile\n])\nAC_CONFIG_HEADERS([config.h])\n\nAC_OUTPUT\n\nAC_MSG_NOTICE([\n------------------------------------------------------------------------\n  $PACKAGE_NAME $PACKAGE_VERSION:  Automatic configuration OK.\n\n    Compiler support:\n\n      C99 var arrays: ................ ${has_var_arrays}\n      C99 lrintf: .................... ${ac_cv_func_lrintf}\n      Use alloca: .................... ${use_alloca}\n\n    General configuration:\n\n      Floating point support: ........ ${enable_float}\n      Fast float approximations: ..... ${enable_float_approx}\n      Fixed point debugging: ......... ${enable_fixed_point_debug}\n      Inline Assembly Optimizations: . ${inline_optimization}\n      External Assembly Optimizations: ${asm_optimization}\n      Intrinsics Optimizations: ...... ${intrinsics_support}\n      Run-time CPU detection: ........ ${rtcd_support}\n      Custom modes: .................. ${enable_custom_modes}\n      Assertion checking: ............ ${enable_assertions}\n      Hardening: ..................... ${enable_hardening}\n      Fuzzing: ....................... ${enable_fuzzing}\n      Check ASM: ..................... ${enable_check_asm}\n\n      API documentation: ............. ${enable_doc}\n      Extra programs: ................ ${enable_extra_programs}\n------------------------------------------------------------------------\n\n Type \"make; make install\" to compile and install\n Type \"make check\" to run the test suite\n])\n\n"
        },
        {
          "name": "dnn",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lpcnet_headers.mk",
          "type": "blob",
          "size": 0.7587890625,
          "content": "DEEP_PLC_HEAD = \\\ndnn/lpcnet.h \\\ndnn/burg.h \\\ndnn/common.h \\\ndnn/freq.h \\\ndnn/fargan.h \\\ndnn/fargan_data.h \\\ndnn/lpcnet_private.h \\\ndnn/nnet.h \\\ndnn/plc_data.h \\\ndnn/vec.h \\\ndnn/vec_avx.h \\\ndnn/vec_neon.h \\\ndnn/pitchdnn.h \\\ndnn/pitchdnn_data.h \\\ndnn/x86/dnn_x86.h \\\ndnn/nnet_arch.h \\\ndnn/arm/dnn_arm.h\n\nDRED_HEAD = \\\ndnn/dred_coding.h \\\ndnn/dred_config.h \\\ndnn/dred_decoder.h \\\ndnn/dred_encoder.h \\\ndnn/dred_rdovae.h \\\ndnn/dred_rdovae_constants.h \\\ndnn/dred_rdovae_enc.h \\\ndnn/dred_rdovae_enc_data.h \\\ndnn/dred_rdovae_dec.h \\\ndnn/dred_rdovae_dec_data.h \\\ndnn/dred_rdovae_stats_data.h\n\nOSCE_HEAD= \\\ndnn/osce.h \\\ndnn/osce_config.h \\\ndnn/osce_structs.h \\\ndnn/osce_features.h \\\ndnn/nndsp.h \\\ndnn/lace_data.h \\\ndnn/nolace_data.h\n\nLOSSGEN_HEAD = \\\ndnn/lossgen.h \\\ndnn/lossgen_data.h\n"
        },
        {
          "name": "lpcnet_sources.mk",
          "type": "blob",
          "size": 0.908203125,
          "content": "DEEP_PLC_SOURCES = \\\ndnn/burg.c \\\ndnn/freq.c \\\ndnn/fargan.c \\\ndnn/fargan_data.c \\\ndnn/lpcnet_enc.c \\\ndnn/lpcnet_plc.c \\\ndnn/lpcnet_tables.c \\\ndnn/nnet.c \\\ndnn/nnet_default.c \\\ndnn/plc_data.c \\\ndnn/parse_lpcnet_weights.c \\\ndnn/pitchdnn.c \\\ndnn/pitchdnn_data.c\n\nDRED_SOURCES = \\\ndnn/dred_rdovae_enc.c \\\ndnn/dred_rdovae_enc_data.c \\\ndnn/dred_rdovae_dec.c \\\ndnn/dred_rdovae_dec_data.c \\\ndnn/dred_rdovae_stats_data.c \\\ndnn/dred_encoder.c \\\ndnn/dred_coding.c \\\ndnn/dred_decoder.c\n\nOSCE_SOURCES = \\\ndnn/osce.c \\\ndnn/osce_features.c \\\ndnn/nndsp.c \\\ndnn/lace_data.c \\\ndnn/nolace_data.c\n\nLOSSGEN_SOURCES = \\\ndnn/lossgen.c \\\ndnn/lossgen_data.c\n\nDNN_SOURCES_X86_RTCD = dnn/x86/x86_dnn_map.c\nDNN_SOURCES_AVX2 = dnn/x86/nnet_avx2.c\nDNN_SOURCES_SSE4_1 = dnn/x86/nnet_sse4_1.c\nDNN_SOURCES_SSE2 = dnn/x86/nnet_sse2.c\n\nDNN_SOURCES_ARM_RTCD = dnn/arm/arm_dnn_map.c\nDNN_SOURCES_DOTPROD = dnn/arm/nnet_dotprod.c\nDNN_SOURCES_NEON = dnn/arm/nnet_neon.c\n"
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 25.54296875,
          "content": "project('opus', 'c',\n  version: run_command('meson/get-version.py', '--package-version', check: true).stdout().strip(),\n  meson_version: '>=0.54.0',\n  default_options: ['warning_level=2',\n                    'c_std=gnu99',\n                    'buildtype=debugoptimized'])\n\nlibversion = run_command('meson/get-version.py', '--libtool-version', check: true).stdout().strip()\nmacosversion = run_command('meson/get-version.py', '--darwin-version', check: true).stdout().strip()\n\ncc = meson.get_compiler('c')\nhost_system = host_machine.system()\nhost_cpu_family = host_machine.cpu_family()\ntop_srcdir = meson.current_source_dir()\ntop_builddir = meson.current_build_dir()\n\nopus_includes = include_directories('.', 'include', 'celt', 'silk', 'dnn')\nopus_public_includes = include_directories('include')\n\nadd_project_arguments('-DOPUS_BUILD', language: 'c')\nadd_project_arguments('-DHAVE_CONFIG_H', language: 'c')\n\nif host_system == 'windows'\n  if cc.get_argument_syntax() == 'msvc'\n    add_project_arguments('-D_CRT_SECURE_NO_WARNINGS', language: 'c')\n  endif\nendif\n\nif cc.get_argument_syntax() == 'gnu'\n  add_project_arguments('-D_FORTIFY_SOURCE=2', language: 'c')\nendif\n\n# Check for extra compiler args\nadditional_c_args = []\nif cc.get_argument_syntax() != 'msvc'\n  additional_c_args += [\n    '-fvisibility=hidden',\n    '-Wcast-align',\n    '-Wnested-externs',\n    '-Wshadow',\n    '-Wstrict-prototypes',\n  ]\n\n  # On Windows, -fstack-protector-strong adds a libssp-0.dll dependency and\n  # prevents static linking\n  if host_system != 'windows'\n    additional_c_args += ['-fstack-protector-strong']\n  endif\nendif\n\nforeach arg : additional_c_args\n  if cc.has_argument(arg)\n    add_project_arguments(arg, language: 'c')\n  endif\nendforeach\n\n# Windows MSVC warnings\nif cc.get_id() == 'msvc'\n  # Ignore several spurious warnings.\n  # If a warning is completely useless and spammy, use '/wdXXXX' to suppress it\n  # If a warning is harmless but hard to fix, use '/woXXXX' so it's shown once\n  # NOTE: Only add warnings here if you are sure they're spurious\n  add_project_arguments('/wd4035', '/wd4715', '/wd4116', '/wd4046', '/wd4068',\n    '/wd4820', '/wd4244', '/wd4255', '/wd4668',\n    language : 'c')\nendif\n\nopus_version = meson.project_version()\n\nopus_conf = configuration_data()\nopus_conf.set('PACKAGE_BUGREPORT', '\"opus@xiph.org\"')\nopus_conf.set('PACKAGE_NAME', '\"opus\"')\nopus_conf.set('PACKAGE_STRING', '\"opus @0@\"'.format(opus_version))\nopus_conf.set('PACKAGE_TARNAME', '\"opus\"')\nopus_conf.set('PACKAGE_URL', '\"\"')\nopus_conf.set('PACKAGE_VERSION', '\"@0@\"'.format(opus_version))\n\n# FIXME: optional Ne10 dependency\nhave_arm_ne10 = false\n\nlibm = cc.find_library('m', required : false)\n\nopus_conf.set('HAVE_LRINTF', cc.has_function('lrintf', prefix: '#include <math.h>', dependencies: libm))\nopus_conf.set('HAVE_LRINT', cc.has_function('lrint', prefix: '#include <math.h>', dependencies: libm))\nopus_conf.set('HAVE___MALLOC_HOOK', cc.has_function('__malloc_hook', prefix: '#include <malloc.h>'))\nopus_conf.set('HAVE_STDINT_H', cc.check_header('stdint.h'))\n\n# Check for restrict keyword\nrestrict_tmpl = '''\ntypedef int * int_ptr;\nint foo (int_ptr @0@ ip, int * @0@ baz[]) {\n  return ip[0];\n}\nint main (int argc, char ** argv) {\n  int s[1];\n  int * @0@ t = s;\n  t[0] = 0;\n  return foo(t, (void *)0);\n}'''\n# Define restrict to the equivalent of the C99 restrict keyword, or to\n# nothing if this is not supported.  Do not define if restrict is\n# supported directly.\nif not cc.compiles(restrict_tmpl.format('restrict'), name : 'restrict keyword')\n  if cc.compiles(restrict_tmpl.format('__restrict'), name : '__restrict')\n    opus_conf.set('restrict', '__restrict')\n  elif cc.compiles(restrict_tmpl.format('__restrict__'), name : '__restrict__')\n    opus_conf.set('restrict', '__restrict')\n  elif cc.compiles(restrict_tmpl.format('_Restrict'), name : '_Restrict')\n    opus_conf.set('restrict', '_Restrict')\n  else\n    opus_conf.set('restrict', '/**/')\n  endif\nendif\n\n# Check for C99 variable-size arrays, or alloca() as fallback\nmsg_use_alloca = false\nif cc.compiles('''static int x;\n                  char some_func (void) {\n                    char a[++x];\n                    a[sizeof a - 1] = 0;\n                    int N;\n                    return a[0];\n                  }''', name : 'C99 variable-size arrays')\n  opus_conf.set('VAR_ARRAYS', 1)\n  msg_use_alloca = 'NO (using C99 variable-size arrays instead)'\nelif cc.compiles('''#include <alloca.h>\n                    void some_func (void) {\n                      int foo=10;\n                      int * array = alloca(foo);\n                    }''', name : 'alloca (alloca.h)')\n  opus_conf.set('USE_ALLOCA', true)\n  opus_conf.set('HAVE_ALLOCA_H', true)\n  msg_use_alloca = true\nelif cc.compiles('''#include <malloc.h>\n                    #include <stdlib.h>\n                    void some_func (void) {\n                      int foo=10;\n                      int * array = alloca(foo);\n                    }''', name : 'alloca (std)')\n  opus_conf.set('USE_ALLOCA', true)\n  msg_use_alloca = true\nendif\n\nopts = [\n  [ 'fixed-point', 'FIXED_POINT' ],\n  [ 'fixed-point-debug', 'FIXED_DEBUG' ],\n  [ 'custom-modes', 'CUSTOM_MODES' ],\n  [ 'float-approx', 'FLOAT_APPROX' ],\n  [ 'assertions', 'ENABLE_ASSERTIONS' ],\n  [ 'hardening', 'ENABLE_HARDENING' ],\n  [ 'fuzzing', 'FUZZING' ],\n  [ 'check-asm', 'OPUS_CHECK_ASM' ],\n]\n\nforeach opt : opts\n  # we assume these are all boolean options\n  opt_foo = get_option(opt[0])\n  if opt_foo\n    opus_conf.set(opt[1], 1)\n  endif\n  set_variable('opt_' + opt[0].underscorify(), opt_foo)\nendforeach\n\nfeat = [\n  [ 'deep-plc', 'ENABLE_DEEP_PLC' ],\n  [ 'dred', 'ENABLE_DRED' ],\n  [ 'osce', 'ENABLE_OSCE' ],\n]\n\nforeach opt : feat\n  # we assume these are all boolean options\n  opt_foo = get_option(opt[0])\n  if opt_foo.enabled()\n    opus_conf.set(opt[1], 1)\n  endif\n  set_variable('opt_' + opt[0].underscorify(), opt_foo)\nendforeach\n\nopt_asm = get_option('asm')\nopt_rtcd = get_option('rtcd')\nopt_intrinsics = get_option('intrinsics')\nextra_programs = get_option('extra-programs')\nopt_tests = get_option('tests')\n\ndisable_float_api = not get_option('float-api')\nif disable_float_api\n  opus_conf.set('DISABLE_FLOAT_API', 1)\nendif\n\nif not get_option('dnn-debug-float').enabled()\n  opus_conf.set('DISABLE_DEBUG_FLOAT', 1)\nendif\n\n# This is for the description in the pkg-config .pc file\nif opt_fixed_point\n  pc_build = 'fixed-point'\nelse\n  pc_build = 'floating-point'\nendif\nif opt_custom_modes\n  pc_build = pc_build + ', custom modes'\nendif\n\nrtcd_support = []\n# With GCC, Clang, ICC, etc, we differentiate between 'may support this SIMD'\n# and 'presume we have this SIMD' by checking whether the SIMD / intrinsics can\n# be compiled by the compiler as-is (presume) or with SIMD cflags (may have).\n# With MSVC, the compiler will always build SIMD/intrinsics targeting all\n# specific instruction sets supported by that version of the compiler. No\n# special arguments are ever needed. If runtime CPU detection is not disabled,\n# we must always assume that we only 'may have' it.\nopus_can_presume_simd = true\nif cc.get_argument_syntax() == 'msvc'\n  if opt_rtcd.disabled()\n    warning('Building with an MSVC-like compiler and runtime CPU detection is disabled. Outputs may not run on all @0@ CPUs.'.format(host_cpu_family))\n  else\n    opus_can_presume_simd = false\n  endif\nendif\n\nopus_arm_external_asm = false\n\nasm_tmpl = '''\nint main (int argc, char ** argv) {\n  __asm__(\"@0@\");\n  return 0;\n}'''\n\nasm_optimization = []\ninline_optimization = []\nif not opt_asm.disabled()\n  # Currently we only have inline asm for fixed-point\n  if host_cpu_family == 'arm' and opt_fixed_point\n    opus_conf.set('OPUS_ARM_ASM', true)\n\n    # Check if compiler supports gcc-style inline assembly\n    if cc.compiles('''#ifdef __GNUC_MINOR__\n                      #if (__GNUC__ * 1000 + __GNUC_MINOR__) < 3004\n                      #error GCC before 3.4 has critical bugs compiling inline assembly\n                      #endif\n                      #endif\n                      int main(int argc, char ** argv) { __asm__ (\"\"::); }''',\n                   name : 'compiler supports gcc-style inline assembly')\n\n      opus_conf.set('OPUS_ARM_INLINE_ASM', 1)\n\n      # AS_ASM_ARM_EDSP\n      if cc.compiles(asm_tmpl.format('qadd r3,r3,r3'),\n                     name : 'assembler supports EDSP instructions on ARM')\n        opus_conf.set('OPUS_ARM_INLINE_EDSP', 1)\n        inline_optimization += ['ESDP']\n      endif\n\n      # AS_ASM_ARM_MEDIA\n      if cc.compiles(asm_tmpl.format('shadd8 r3,r3,r3'),\n                     name : 'assembler supports ARMv6 media instructions on ARM')\n        opus_conf.set('OPUS_ARM_INLINE_MEDIA', 1)\n        inline_optimization += ['Media']\n      endif\n\n      # AS_ASM_ARM_NEON\n      if cc.compiles(asm_tmpl.format('vorr d0,d0,d0'),\n                     name : 'assembler supports NEON instructions on ARM')\n        opus_conf.set('OPUS_ARM_INLINE_NEON', 1)\n        inline_optimization += ['NEON']\n      endif\n\n      # AS_ASM_ARM_DOTPROD\n      if cc.compiles(asm_tmpl.format('udot v0.4s,v1.16b,v2.16b'),\n                     name : 'assembler supports DOTPROD instructions on ARM')\n        opus_conf.set('OPUS_ARM_INLINE_DOTPROD', 1)\n        inline_optimization += ['DOTPROD']\n      endif\n    endif\n\n    # We need Perl to translate RVCT-syntax asm to gas syntax\n    perl = find_program('perl', required: get_option('asm'))\n    if perl.found()\n      opus_arm_external_asm = true\n      # opus_arm_presume_* mean we can and will use those instructions\n      # directly without doing runtime CPU detection.\n      # opus_arm_may_have_* mean we can emit those instructions, but we can\n      # only use them after runtime detection.\n      # The same rules apply for x86 assembly and intrinsics.\n\n      opus_arm_may_have_edsp = opus_conf.has('OPUS_ARM_INLINE_EDSP')\n      opus_arm_presume_edsp = opus_arm_may_have_edsp and opus_can_presume_simd\n\n      opus_arm_may_have_media = opus_conf.has('OPUS_ARM_INLINE_MEDIA')\n      opus_arm_presume_media = opus_arm_may_have_media and opus_can_presume_simd\n\n      opus_arm_may_have_neon = opus_conf.has('OPUS_ARM_INLINE_NEON')\n      opus_arm_presume_neon = opus_arm_may_have_neon and opus_can_presume_simd\n\n      opus_arm_may_have_dotprod = opus_conf.has('OPUS_ARM_INLINE_DOTPROD')\n      opus_arm_presume_dotprod = opus_arm_may_have_dotprod and opus_can_presume_simd\n\n      if not opt_rtcd.disabled()\n        if not opus_arm_may_have_edsp\n          message('Trying to force-enable armv5e EDSP instructions...')\n          # AS_ASM_ARM_EDSP_FORCE\n          opus_arm_may_have_edsp = cc.compiles(asm_tmpl.format('.arch armv5te;.object_arch armv4t;qadd r3,r3,r3'),\n                                               name : 'Assembler supports EDSP instructions on ARM (forced)')\n        endif\n        if not opus_arm_may_have_media\n          message('Trying to force-enable ARMv6 media instructions...')\n          opus_arm_may_have_media = cc.compiles(asm_tmpl.format('.arch armv6;.object_arch armv4t;shadd8 r3,r3,r3'),\n                                                name : 'Assembler supports ARMv6 media instructions on ARM (forced)')\n        endif\n        if not opus_arm_may_have_neon\n          message('Trying to force-enable NEON instructions...')\n          opus_arm_may_have_neon = cc.compiles(asm_tmpl.format('.arch armv7-a;.fpu neon;.object_arch armv4t;vorr d0,d0,d0'),\n                                               name : 'Assembler supports NEON instructions on ARM (forced)')\n        endif\n      endif\n\n      if opus_arm_may_have_edsp\n        opus_conf.set('OPUS_ARM_MAY_HAVE_EDSP', 1)\n        if opus_arm_presume_edsp\n          opus_conf.set('OPUS_ARM_PRESUME_EDSP', 1)\n          asm_optimization += ['EDSP']\n        else\n          rtcd_support += ['EDSP']\n        endif\n      endif\n      if opus_arm_may_have_media\n        opus_conf.set('OPUS_ARM_MAY_HAVE_MEDIA', 1)\n        if opus_arm_presume_media\n          opus_conf.set('OPUS_ARM_PRESUME_MEDIA', 1)\n          asm_optimization += ['Media']\n        else\n          rtcd_support += ['Media']\n        endif\n      endif\n      if opus_arm_may_have_neon\n        opus_conf.set('OPUS_ARM_MAY_HAVE_NEON', 1)\n        if opus_arm_presume_neon\n          opus_conf.set('OPUS_ARM_PRESUME_NEON', 1)\n          asm_optimization += ['NEON']\n        else\n          rtcd_support += ['NEON']\n        endif\n      endif\n      if opus_arm_may_have_dotprod\n        opus_conf.set('OPUS_ARM_MAY_HAVE_DOTPROD', 1)\n        if opus_arm_presume_dotprod\n          opus_conf.set('OPUS_ARM_PRESUME_DOTPROD', 1)\n          asm_optimization += ['DOTPROD']\n        else\n          rtcd_support += ['DOTPROD']\n        endif\n      endif\n\n      if cc.get_define('__APPLE__') != ''\n        arm2gnu_args = ['--apple']\n      else\n        arm2gnu_args = []\n      endif\n    endif # found perl\n  else # arm + enable fixed point\n    if opt_asm.enabled()\n      error('asm option is enabled, but no assembly support for ' + host_cpu_family)\n    endif\n  endif\nendif # enable asm\n\n# Check whether we require assembly and we support assembly on this arch,\n# but none were detected. Can happen because of incorrect compiler flags, such\n# as missing -mfloat-abi=softfp on ARM32 softfp architectures.\nif opt_asm.enabled() and (asm_optimization.length() + inline_optimization.length()) == 0\n  error('asm option was enabled, but no assembly support was detected')\nendif\n\n# XXX: NEON has hardfp vs softfp compiler configuration issues\n# When targeting ARM32 softfp, we sometimes need to explicitly pass\n# -mfloat-abi=softfp to enable NEON. F.ex., on Android. It should\n# be set in the cross file.\narm_neon_intr_link_args = ['-mfpu=neon']\narm_dotprod_intr_link_args = ['-march=armv8.2-a+dotprod']\n\nhave_sse = false\nhave_sse2 = false\nhave_sse4_1 = false\nhave_avx2 = false\nhave_neon_intr = false\nhave_dotprod_intr = false\n\nintrinsics_support = []\nif not opt_intrinsics.disabled()\n  if host_cpu_family in ['arm', 'aarch64']\n    # Check for ARMv7/AArch64 neon intrinsics\n    intrin_check = '''\n    #include <arm_neon.h>\n      int main (void) {\n        static float32x4_t A0, A1, SUMM;\n        SUMM = vmlaq_f32(SUMM, A0, A1);\n        return (int)vgetq_lane_f32(SUMM, 0);\n      }'''\n    intrin_name = 'ARMv7/AArch64 NEON'\n    if cc.links(intrin_check,\n                name: 'compiler supports @0@ intrinsics'.format(intrin_name))\n      opus_arm_presume_neon_intr = opus_can_presume_simd\n      opus_arm_may_have_neon_intr = true\n    else\n      opus_arm_presume_neon_intr = false\n      if cc.links(intrin_check,\n                  args: arm_neon_intr_link_args,\n                  name: 'compiler supports @0@ intrinsics with @1@'.format(intrin_name, ' '.join(arm_neon_intr_link_args)))\n        opus_arm_may_have_neon_intr = true\n      else\n        opus_arm_may_have_neon_intr = false\n      endif\n    endif\n\n    if opus_arm_may_have_neon_intr\n      have_neon_intr = true\n      intrinsics_support += [intrin_name]\n      opus_conf.set('OPUS_ARM_MAY_HAVE_NEON_INTR', 1)\n      if opus_arm_presume_neon_intr\n        opus_conf.set('OPUS_ARM_PRESUME_NEON_INTR', 1)\n      else\n        rtcd_support += [intrin_name]\n        opus_neon_intr_args = arm_neon_intr_link_args\n      endif\n    else\n      message('Compiler does not support @0@ intrinsics'.format(intrin_name))\n    endif\n\n    # Check for aarch64 neon intrinsics\n    intrin_check = '''\n    #include <arm_neon.h>\n      int main (void) {\n        static int32_t IN;\n        static int16_t OUT;\n        OUT = vqmovns_s32(IN);\n      }'''\n    intrin_name = 'AArch64 NEON'\n    if cc.links(intrin_check,\n                name: 'compiler supports @0@ intrinsics'.format(intrin_name))\n      opus_arm_presume_aarch64_neon_intr = opus_can_presume_simd\n      opus_arm_may_have_aarch64_neon_intr = true\n    else\n      opus_arm_presume_aarch64_neon_intr = false\n      if cc.links(intrin_check,\n                  args: arm_neon_intr_link_args,\n                  name: 'compiler supports @0@ intrinsics with @1@'.format(intrin_name, ' '.join(arm_neon_intr_link_args)))\n        opus_arm_may_have_aarch64_neon_intr = true\n      else\n        opus_arm_may_have_aarch64_neon_intr = false\n      endif\n    endif\n\n    if opus_arm_may_have_aarch64_neon_intr\n      intrinsics_support += [intrin_name]\n      opus_conf.set('OPUS_X86_MAY_HAVE_AARCH64_NEON_INTR', 1)\n      if opus_arm_presume_aarch64_neon_intr\n        opus_conf.set('OPUS_X86_PRESUME_AARCH64_NEON_INTR', 1)\n      endif\n    else\n      message('Compiler does not support @0@ intrinsics'.format(intrin_name))\n    endif\n\n    # Check for ARMv8.2 dotprod intrinsics\n    intrin_check = '''\n    #include <arm_neon.h>\n      int main (void) {\n        static int8x16_t a, b;\n        static int32x4_t SUMM;\n        SUMM = vdotq_s32(SUMM, a, b);\n        return (int)vgetq_lane_s32(SUMM, 0);\n      }'''\n    intrin_name = 'AArch64 DOTPROD'\n    if cc.links(intrin_check,\n                name: 'compiler supports @0@ intrinsics'.format(intrin_name))\n      opus_arm_presume_dotprod_intr = opus_can_presume_simd\n      opus_arm_may_have_dotprod_intr = true\n    else\n      opus_arm_presume_dotprod_intr = false\n      if cc.links(intrin_check,\n                  args: arm_dotprod_intr_link_args,\n                  name: 'compiler supports @0@ intrinsics with @1@'.format(intrin_name, ' '.join(arm_dotprod_intr_link_args)))\n        opus_arm_may_have_dotprod_intr = true\n      else\n        opus_arm_may_have_dotprod_intr = false\n      endif\n    endif\n\n    if opus_arm_may_have_dotprod_intr\n      have_dotprod_intr = true\n      intrinsics_support += [intrin_name]\n      opus_conf.set('OPUS_ARM_MAY_HAVE_DOTPROD', 1)\n      if opus_arm_presume_dotprod_intr\n        opus_conf.set('OPUS_ARM_PRESUME_DOTPROD', 1)\n      else\n        rtcd_support += [intrin_name]\n        opus_dotprod_intr_args = arm_dotprod_intr_link_args\n      endif\n    else\n      message('Compiler does not support @0@ intrinsics'.format(intrin_name))\n    endif\n\n  elif host_cpu_family in ['x86', 'x86_64']\n    # XXX: allow external override/specification of the flags\n    x86_intrinsics = [\n      [ 'SSE', 'xmmintrin.h', '__m128', '_mm_setzero_ps()', ['-msse'], [] ],\n      [ 'SSE2', 'emmintrin.h', '__m128i', '_mm_setzero_si128()', ['-msse2'], [] ],\n      [ 'SSE4.1', 'smmintrin.h', '__m128i', '_mm_setzero_si128(); mtest = _mm_cmpeq_epi64(mtest, mtest)', ['-msse4.1'], [] ],\n      [ 'AVX2', 'immintrin.h', '__m256i', '_mm256_abs_epi32(_mm256_setzero_si256())', ['-mavx', '-mfma', '-mavx2'], ['/arch:AVX2'] ],\n    ]\n\n    foreach intrin : x86_intrinsics\n      intrin_check = '''#include <@0@>\n                        int main (int argc, char ** argv) {\n                          static @1@ mtest;\n                          mtest = @2@;\n                          return *((unsigned char *) &mtest) != 0;\n                        }'''.format(intrin[1],intrin[2],intrin[3])\n      intrin_name = intrin[0]\n      intrin_args = cc.get_argument_syntax() == 'msvc' ? intrin[5] : intrin[4]\n      if cc.get_argument_syntax() == 'msvc' and intrin_args.length() == 0 and cc.links(intrin_check, name : 'compiler supports @0@ intrinsics'.format(intrin_name))\n        may_have_intrin = true\n        presume_intrin = opus_can_presume_simd\n      elif cc.get_argument_syntax() != 'msvc' and cc.links(intrin_check, name : 'compiler supports @0@ intrinsics'.format(intrin_name))\n        may_have_intrin = true\n        presume_intrin = opus_can_presume_simd\n      elif intrin_args.length() > 0\n        presume_intrin = false\n        if cc.links(intrin_check,\n                    args : intrin_args,\n                    name : 'compiler supports @0@ intrinsics with @1@'.format(intrin_name, ' '.join(intrin_args)))\n          may_have_intrin = true\n        else\n          may_have_intrin = false\n        endif\n      endif\n      if may_have_intrin\n        intrinsics_support += [intrin_name]\n        intrin_lower_name = intrin_name.to_lower().underscorify()\n        set_variable('have_' + intrin_lower_name, true)\n        opus_conf.set('OPUS_X86_MAY_HAVE_' + intrin_name.underscorify(), 1)\n        if presume_intrin\n          opus_conf.set('OPUS_X86_PRESUME_' + intrin_name.underscorify(), 1)\n        else\n          rtcd_support += [intrin_name]\n          set_variable('opus_@0@_args'.format(intrin_lower_name), intrin_args)\n        endif\n      else\n        message('Compiler does not support @0@ intrinsics'.format(intrin_name))\n      endif\n    endforeach\n\n    if not opt_rtcd.disabled()\n      get_cpuid_by_asm = false\n      cpuid_asm_code = '''\n        #include <stdio.h>\n        int main (int argc, char ** argv) {\n                 unsigned int CPUInfo0;\n                 unsigned int CPUInfo1;\n                 unsigned int CPUInfo2;\n                 unsigned int CPUInfo3;\n                 unsigned int InfoType;\n                #if defined(__i386__) && defined(__PIC__)\n                 __asm__ __volatile__ (\n                 \"xchg %%ebx, %1\\n\"\n                 \"cpuid\\n\"\n                 \"xchg %%ebx, %1\\n\":\n                 \"=a\" (CPUInfo0),\n                 \"=r\" (CPUInfo1),\n                 \"=c\" (CPUInfo2),\n                 \"=d\" (CPUInfo3) :\n                 \"a\" (InfoType), \"c\" (0)\n                );\n               #else\n                 __asm__ __volatile__ (\n                 \"cpuid\":\n                 \"=a\" (CPUInfo0),\n                 \"=b\" (CPUInfo1),\n                 \"=c\" (CPUInfo2),\n                 \"=d\" (CPUInfo3) :\n                 \"a\" (InfoType), \"c\" (0)\n                );\n               #endif\n          return 0;\n        }'''\n      cpuid_c_code = '''\n        #include <cpuid.h>\n        int main (int argc, char ** argv) {\n          unsigned int CPUInfo0;\n          unsigned int CPUInfo1;\n          unsigned int CPUInfo2;\n          unsigned int CPUInfo3;\n          unsigned int InfoType;\n          __get_cpuid(InfoType, &CPUInfo0, &CPUInfo1, &CPUInfo2, &CPUInfo3);\n          return 0;\n        }'''\n      cpuid_msvc_code = '''\n        #include <intrin.h>\n        int main (void) {\n          int CPUInfo, InfoType;\n          __cpuid(&CPUInfo, InfoType);\n        }'''\n      if cc.links(cpuid_asm_code, name : 'Get X86 CPU info via inline assembly')\n        opus_conf.set('CPU_INFO_BY_ASM', 1)\n      elif cc.links(cpuid_c_code, name : 'Get X86 CPU info via C method')\n        opus_conf.set('CPU_INFO_BY_C', 1)\n      elif cc.get_define('_MSC_VER') != '' and cc.links(cpuid_msvc_code)\n        message('Getting X86 CPU info via __cpuid')\n      else\n        if opt_intrinsics.enabled() and opt_rtcd.enabled()\n          error('intrinsics and rtcd options are enabled, but no Get CPU Info method detected')\n        endif\n        warning('Get CPU Info method not detected, no rtcd for intrinsics')\n      endif\n    endif # opt_rtcd\n  else\n    if opt_intrinsics.enabled()\n      error('intrinsics option enabled, but no intrinsics support for ' + host_cpu_family)\n    endif\n    warning('No intrinsics support for ' + host_cpu_family)\n  endif\nendif\n\n# Check whether we require intrinsics and we support intrinsics on this arch,\n# but none were detected. Can happen because of incorrect compiler flags, such\n# as missing -mfloat-abi=softfp on ARM32 softfp architectures.\nif opt_intrinsics.enabled() and intrinsics_support.length() == 0\n  error('intrinsics option was enabled, but none were detected')\nendif\n\nif opt_rtcd.disabled()\n  rtcd_support = 'disabled'\nelse\n  if rtcd_support.length() > 0\n    opus_conf.set('OPUS_HAVE_RTCD', 1)\n  else\n    if intrinsics_support.length() == 0\n      rtcd_support = 'none'\n      if opt_rtcd.enabled()\n        error('rtcd option is enabled, but no support for intrinsics or assembly is available')\n      endif\n    else\n      rtcd_support = 'not needed'\n    endif\n  endif\nendif\n\n# extract source file lists from .mk files\nmk_files = [\n  'opus_headers.mk', 'opus_sources.mk',\n  'silk_headers.mk', 'silk_sources.mk',\n  'celt_sources.mk', 'celt_headers.mk',\n  'lpcnet_headers.mk', 'lpcnet_sources.mk',\n]\nlines = run_command('meson/read-sources-list.py', mk_files, check: true).stdout().strip().split('\\n')\nsources = {}\nforeach l : lines\n  a = l.split(' = ')\n  var_name = a[0]\n  file_list = a[1].split()\n  sources += {var_name: files(file_list)}\nendforeach\n\nsubdir('include')\nsubdir('celt')\nsubdir('silk')\nsubdir('dnn')\nsubdir('src')\n\nconfigure_file(output: 'config.h', configuration: opus_conf)\n\nif not opt_tests.disabled()\n  subdir('celt/tests')\n  subdir('silk/tests')\n  subdir('tests')\nendif\n\npkg = import('pkgconfig')\npkg.generate(opus_lib,\n  description: 'Opus IETF audio codec (floating-point build)',\n  subdirs: 'opus',\n)\n\ndoxygen = find_program('doxygen', required: get_option('docs'))\nif doxygen.found()\n  subdir('doc')\nendif\n\nsummary(\n  {\n    'C99 var arrays': opus_conf.has('VAR_ARRAYS'),\n    'C99 lrintf': opus_conf.has('HAVE_LRINTF'),\n    'Use alloca': msg_use_alloca,\n  },\n  section: 'Compiler support',\n  bool_yn: true,\n  list_sep: ', ',\n)\n\n# Parse optimization status\nforeach status : [['inline_optimization', opt_asm],\n                  ['asm_optimization', opt_asm],\n                  ['intrinsics_support', opt_intrinsics]]\n  res = status[0]\n  opt = status[1]\n  resval = get_variable(res)\n  if opt.disabled()\n    set_variable(res, 'disabled')\n  elif resval.length() == 0\n    if host_cpu_family not in ['arm', 'aarch64', 'x86', 'x86_64']\n      set_variable(res, 'No optimizations for your platform, please send patches')\n    else\n      set_variable(res, 'none')\n    endif\n  endif\nendforeach\n\nsummary(\n  {\n    'Floating point support': not opt_fixed_point,\n    'Fast float approximations': opt_float_approx,\n    'Fixed point debugging': opt_fixed_point_debug,\n    'Inline assembly optimizations': inline_optimization,\n    'External assembly optimizations': asm_optimization,\n    'Intrinsics optimizations': intrinsics_support,\n    'Run-time CPU detection': rtcd_support,\n  },\n  section: 'Optimizations',\n  bool_yn: true,\n  list_sep: ', ',\n)\nsummary(\n  {\n    'Custom modes': opt_custom_modes,\n    'Assertions': opt_assertions,\n    'Hardening': opt_hardening,\n    'Fuzzing': opt_fuzzing,\n    'Check ASM': opt_check_asm,\n    'API documentation': doxygen.found(),\n    'Extra programs': not extra_programs.disabled(),\n    'Tests': not opt_tests.disabled(),\n  },\n  section: 'General configuration',\n  bool_yn: true,\n  list_sep: ', ',\n)\n"
        },
        {
          "name": "meson",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 2.3515625,
          "content": "# Optimizations\noption('fixed-point', type : 'boolean', value : false, description : 'Compile without floating point (for machines without a fast enough FPU')\noption('fixed-point-debug', type : 'boolean', value : false, description : 'Debug fixed-point implementation')\noption('float-api', type : 'boolean', value : true, description : 'Compile with or without the floating point API (for machines with no float library')\noption('float-approx', type : 'boolean', value : false, description : 'Enable fast approximations for floating point (not supported on all platforms)')\noption('rtcd', type : 'feature', value : 'auto', description : 'Run-time CPU capabilities detection')\noption('asm', type : 'feature', value : 'auto', description : 'Assembly optimizations for ARM (fixed-point)')\noption('intrinsics', type : 'feature', value : 'auto', description : 'Intrinsics optimizations for ARM NEON or x86')\n\noption('deep-plc', type : 'feature', value : 'disabled', description : 'Enable Deep Packet Loss Concealment (PLC)')\noption('dred', type : 'feature', value : 'disabled', description : 'Enable Deep Redundancy (DRED)')\noption('osce', type : 'feature', value : 'disabled', description : 'Enable Opus Speech Coding Enhancement (OSCE)')\noption('dnn-debug-float', type : 'feature', value : 'disabled', description : 'Compute DNN using float weights')\n\noption('custom-modes', type : 'boolean', value : false, description : 'Enable non-Opus modes, e.g. 44.1 kHz & 2^n frames')\noption('extra-programs', type : 'feature', value : 'auto', description : 'Extra programs (demo and tests)')\noption('assertions', type : 'boolean', value : false, description : 'Additional software error checking')\noption('hardening', type : 'boolean', value : true, description : 'Run-time checks that are cheap and safe for use in production')\noption('fuzzing', type : 'boolean', value : false, description : 'Causes the encoder to make random decisions')\noption('check-asm', type : 'boolean', value : false, description : 'Run bit-exactness checks between optimized and c implementations')\n\n# common feature options\noption('tests', type : 'feature', value : 'auto', description : 'Build tests')\noption('docs', type: 'feature', value: 'auto', description: 'Build API documentation')\n\n# other options\noption('docdir', type: 'string', value: 'doc/opus', description: 'Directory to install documentation into (default: DATADIR/doc/opus')\n"
        },
        {
          "name": "opus-uninstalled.pc.in",
          "type": "blob",
          "size": 0.314453125,
          "content": "# Opus codec reference implementation uninstalled pkg-config file\n\nlibdir=${pcfiledir}/.libs\nincludedir=${pcfiledir}\n\nName: opus uninstalled\nDescription: Opus IETF audio codec (not installed, @PC_BUILD@)\nVersion: @VERSION@\nRequires:\nConflicts:\nLibs: ${libdir}/libopus.la @LIBM@\nCflags: -I${pcfiledir}/@top_srcdir@/include\n"
        },
        {
          "name": "opus.m4",
          "type": "blob",
          "size": 3.9873046875,
          "content": "# Configure paths for libopus\n# Gregory Maxwell <greg@xiph.org> 08-30-2012\n# Shamelessly stolen from Jack Moffitt (libogg) who\n# Shamelessly stole from Owen Taylor and Manish Singh\n\ndnl XIPH_PATH_OPUS([ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]])\ndnl Test for libopus, and define OPUS_CFLAGS and OPUS_LIBS\ndnl\nAC_DEFUN([XIPH_PATH_OPUS],\n[dnl\ndnl Get the cflags and libraries\ndnl\nAC_ARG_WITH(opus,AC_HELP_STRING([--with-opus=PFX],[Prefix where opus is installed (optional)]), opus_prefix=\"$withval\", opus_prefix=\"\")\nAC_ARG_WITH(opus-libraries,AC_HELP_STRING([--with-opus-libraries=DIR],[Directory where the opus library is installed (optional)]), opus_libraries=\"$withval\", opus_libraries=\"\")\nAC_ARG_WITH(opus-includes,AC_HELP_STRING([--with-opus-includes=DIR],[Directory where the opus header files are installed (optional)]), opus_includes=\"$withval\", opus_includes=\"\")\nAC_ARG_ENABLE(opustest,AC_HELP_STRING([--disable-opustest],[Do not try to compile and run a test opus program]),, enable_opustest=yes)\n\n  if test \"x$opus_libraries\" != \"x\" ; then\n    OPUS_LIBS=\"-L$opus_libraries\"\n  elif test \"x$opus_prefix\" = \"xno\" || test \"x$opus_prefix\" = \"xyes\" ; then\n    OPUS_LIBS=\"\"\n  elif test \"x$opus_prefix\" != \"x\" ; then\n    OPUS_LIBS=\"-L$opus_prefix/lib\"\n  elif test \"x$prefix\" != \"xNONE\" ; then\n    OPUS_LIBS=\"-L$prefix/lib\"\n  fi\n\n  if test \"x$opus_prefix\" != \"xno\" ; then\n    OPUS_LIBS=\"$OPUS_LIBS -lopus\"\n  fi\n\n  if test \"x$opus_includes\" != \"x\" ; then\n    OPUS_CFLAGS=\"-I$opus_includes\"\n  elif test \"x$opus_prefix\" = \"xno\" || test \"x$opus_prefix\" = \"xyes\" ; then\n    OPUS_CFLAGS=\"\"\n  elif test \"x$opus_prefix\" != \"x\" ; then\n    OPUS_CFLAGS=\"-I$opus_prefix/include\"\n  elif test \"x$prefix\" != \"xNONE\"; then\n    OPUS_CFLAGS=\"-I$prefix/include\"\n  fi\n\n  AC_MSG_CHECKING(for Opus)\n  if test \"x$opus_prefix\" = \"xno\" ; then\n    no_opus=\"disabled\"\n    enable_opustest=\"no\"\n  else\n    no_opus=\"\"\n  fi\n\n\n  if test \"x$enable_opustest\" = \"xyes\" ; then\n    ac_save_CFLAGS=\"$CFLAGS\"\n    ac_save_LIBS=\"$LIBS\"\n    CFLAGS=\"$CFLAGS $OPUS_CFLAGS\"\n    LIBS=\"$LIBS $OPUS_LIBS\"\ndnl\ndnl Now check if the installed Opus is sufficiently new.\ndnl\n      rm -f conf.opustest\n      AC_TRY_RUN([\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <opus.h>\n\nint main (void)\n{\n  system(\"touch conf.opustest\");\n  return 0;\n}\n\n],, no_opus=yes,[echo $ac_n \"cross compiling; assumed OK... $ac_c\"])\n       CFLAGS=\"$ac_save_CFLAGS\"\n       LIBS=\"$ac_save_LIBS\"\n  fi\n\n  if test \"x$no_opus\" = \"xdisabled\" ; then\n     AC_MSG_RESULT(no)\n     ifelse([$2], , :, [$2])\n  elif test \"x$no_opus\" = \"x\" ; then\n     AC_MSG_RESULT(yes)\n     ifelse([$1], , :, [$1])\n  else\n     AC_MSG_RESULT(no)\n     if test -f conf.opustest ; then\n       :\n     else\n       echo \"*** Could not run Opus test program, checking why...\"\n       CFLAGS=\"$CFLAGS $OPUS_CFLAGS\"\n       LIBS=\"$LIBS $OPUS_LIBS\"\n       AC_TRY_LINK([\n#include <stdio.h>\n#include <opus.h>\n],     [ return 0; ],\n       [ echo \"*** The test program compiled, but did not run. This usually means\"\n       echo \"*** that the run-time linker is not finding Opus or finding the wrong\"\n       echo \"*** version of Opus. If it is not finding Opus, you'll need to set your\"\n       echo \"*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point\"\n       echo \"*** to the installed location  Also, make sure you have run ldconfig if that\"\n       echo \"*** is required on your system\"\n       echo \"***\"\n       echo \"*** If you have an old version installed, it is best to remove it, although\"\n       echo \"*** you may also be able to get things to work by modifying LD_LIBRARY_PATH\"],\n       [ echo \"*** The test program failed to compile or link. See the file config.log for the\"\n       echo \"*** exact error that occurred. This usually means Opus was incorrectly installed\"\n       echo \"*** or that you have moved Opus since it was installed.\" ])\n       CFLAGS=\"$ac_save_CFLAGS\"\n       LIBS=\"$ac_save_LIBS\"\n     fi\n     OPUS_CFLAGS=\"\"\n     OPUS_LIBS=\"\"\n     ifelse([$2], , :, [$2])\n  fi\n  AC_SUBST(OPUS_CFLAGS)\n  AC_SUBST(OPUS_LIBS)\n  rm -f conf.opustest\n])\n"
        },
        {
          "name": "opus.pc.in",
          "type": "blob",
          "size": 0.3388671875,
          "content": "# Opus codec reference implementation pkg-config file\n\nprefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: Opus\nDescription: Opus IETF audio codec (@PC_BUILD@ build)\nURL: https://opus-codec.org/\nVersion: @VERSION@\nRequires:\nConflicts:\nLibs: -L${libdir} -lopus\nLibs.private: @LIBM@\nCflags: -I${includedir}/opus\n"
        },
        {
          "name": "opus_headers.mk",
          "type": "blob",
          "size": 0.1552734375,
          "content": "OPUS_HEAD = \\\ninclude/opus.h \\\ninclude/opus_multistream.h \\\ninclude/opus_projection.h \\\nsrc/opus_private.h \\\nsrc/analysis.h \\\nsrc/mapping_matrix.h \\\nsrc/mlp.h\n"
        },
        {
          "name": "opus_sources.mk",
          "type": "blob",
          "size": 0.34765625,
          "content": "OPUS_SOURCES = \\\nsrc/opus.c \\\nsrc/opus_decoder.c \\\nsrc/opus_encoder.c \\\nsrc/extensions.c \\\nsrc/opus_multistream.c \\\nsrc/opus_multistream_encoder.c \\\nsrc/opus_multistream_decoder.c \\\nsrc/repacketizer.c \\\nsrc/opus_projection_encoder.c \\\nsrc/opus_projection_decoder.c \\\nsrc/mapping_matrix.c\n\nOPUS_SOURCES_FLOAT = \\\nsrc/analysis.c \\\nsrc/mlp.c \\\nsrc/mlp_data.c\n"
        },
        {
          "name": "releases.sha2",
          "type": "blob",
          "size": 7.1484375,
          "content": "b2f75c4ac5ab837845eb028413fae2a28754bfb0a6d76416e2af1441ef447649  opus-0.9.0.tar.gz\n4e379a98ba95bbbfe9087ef10fdd05c8ac9060b6d695f587ea82a7b43a0df4fe  opus-0.9.10.tar.gz\nb1cad6846a8f819a141009fe3f8f10c946e8eff7e9c2339cd517bb136cc59eae  opus-0.9.14.tar.gz\n206221afc47b87496588013bd4523e1e9f556336c0813f4372773fc536dd4293  opus-0.9.1.tar.gz\n6e85c1b57e1d7b7dfe2928bf92586b96b73a9067e054ede45bd8e6d24bd30582  opus-0.9.2.tar.gz\nd916e34c18a396eb7dffc47af754f441af52a290b761e20db9aedb65928c699e  opus-0.9.3.tar.gz\n53801066fa97329768e7b871fd1495740269ec46802e1c9051aa7e78c6edee5b  opus-0.9.5.tar.gz\n3bfaeb25f4b4a625a0bc994d6fc6f6776a05193f60099e0a99f7530c6b256309  opus-0.9.6.tar.gz\n1b69772c31c5cbaa43d1dfa5b1c495fc29712e8e0ff69d6f8ad46459e5c6715f  opus-0.9.7.tar.gz\n4aa30d2e0652ffb4a7a22cc8a29c4ce78267626f560a2d9213b1d2d4e618cf36  opus-0.9.8.tar.gz\n2f62359f09151fa3b242040dc9b4c5b6bda15557c5daea59c8420f1a2ff328b7  opus-0.9.9.tar.gz\n43bcea51afa531f32a6a5fdd9cba4bd496993e26a141217db3cccce6caa7cd74  opus-1.0.0-rc.tar.gz\n9250fcc74472d45c1e14745542ec9c8d09982538aefed56962495614be3e0d2d  opus-1.0.0.tar.gz\n76bc0a31502a51dae9ab737b4db043b9ecfcd0b5861f0bfda41b662bd5b92227  opus-1.0.1-rc2.tar.gz\n3de8d6809dac38971ebb305532d4ea532519d3bed08985f25d6c557f9ce5e8ff  opus-1.0.1-rc3.tar.gz\n8044397a6365a07117b08cbe8f9818bf7c93746908806ba74a2917187bbdda5f  opus-1.0.1-rc.tar.gz\n80fa5c3caf2ac0fd68f8a22cce1564fc46b368c773a17554887d0066fe1841ef  opus-1.0.1.tar.gz\nda615edbee5d019c1833071d69a4782c19f178cf9ca1401375036ecef25cd78a  opus-1.0.2.tar.gz\n191a089c92dbc403de6980463dd3604b65beb12d283c607e246c8076363cb49c  opus-1.0.3.tar.gz\na8d40efe87f6c3e76725391457d46277878c7a816ae1642843261463133fa5c8  opus-1.1-alpha.tar.gz\nec1784287f385aef994b64734aaecae04860e61aa50fc6eef6643fa7e40dd193  opus-1.1-beta.tar.gz\n8aa16360f59a94d3e38f38f28d24039f7663179682cbae82aa42f1dd9e52e6ed  opus-1.1-rc.tar.gz\nebc87a086d4fe677c5e42d56888b1fd25af858e4179eae4f8656270410dffac3  opus-1.1-rc2.tar.gz\ncbfd09c58cc10a4d3fcb727ad5d46d7bb549f8185ac922ee28b4581b52a7bee9  opus-1.1-rc3.tar.gz\nb9727015a58affcf3db527322bf8c4d2fcf39f5f6b8f15dbceca20206cbe1d95  opus-1.1.tar.gz\n0c668639dcd16b14709fc9dc49e6686606f5a256f2eaa1ebaa2f39a66f8626cd  opus-1.1.1-beta.tar.gz\n66f2a5877c8803dc9a5a44b4f3d0bdc8f06bd066324222d144eb255612b68152  opus-1.1.1-rc.tar.gz\n9b84ff56bd7720d5554103c557664efac2b8b18acc4bbcc234cb881ab9a3371e  opus-1.1.1.tar.gz\n0e290078e31211baa7b5886bcc8ab6bc048b9fc83882532da4a1a45e58e907fd  opus-1.1.2.tar.gz\n58b6fe802e7e30182e95d0cde890c0ace40b6f125cffc50635f0ad2eef69b633  opus-1.1.3.tar.gz\n9122b6b380081dd2665189f97bfd777f04f92dc3ab6698eea1dbb27ad59d8692  opus-1.1.4.tar.gz\neb84981ca0f40a3e5d5e58d2e8582cb2fee05a022825a6dfe14d14b04eb563e4  opus-1.1.5.tar.gz\n654a9bebb73266271a28edcfff431e4cfd9bfcde71f42849a0cdd73bece803a7  opus-1.2-alpha.tar.gz\nc0e90507259cf21ce7b2c82fb9ac55367d8543dae91cc3d4d2c59afd37f44023  opus-1.2-alpha2.tar.gz\n291e979a8a2fb679ed35a5dff5d761a9d9a5e22586fd07934ed94461e2636c7a  opus-1.2-beta.tar.gz\n85343fdaed96529d94c1e1f3a210fa51240d04ca62fa01e97ef02f88020c2ce9  opus-1.2-rc1.tar.gz\n77db45a87b51578fbc49555ef1b10926179861d854eb2613207dc79d9ec0a9a9  opus-1.2.tar.gz\ncfafd339ccd9c5ef8d6ab15d7e1a412c054bf4cb4ecbbbcc78c12ef2def70732  opus-1.2.1.tar.gz\n7f56e058c9549d03ae35511ad9e16ef6d1eb257836830d54abff0f495f17e187  opus-1.3-beta.tar.gz\n96fa28598e8ccd558b297277ad59a045c551ba0e06d65a9675938e084f837669  opus-1.3-rc.tar.gz\nf6bab321fb81db984766f1e4d340a9e71a5ca2c5d4d53f4ee072e84afda271ca  opus-1.3-rc2.tar.gz\n4f3d69aefdf2dbaf9825408e452a8a414ffc60494c70633560700398820dc550  opus-1.3.tar.gz\n65b58e1e25b2a114157014736a3d9dfeaad8d41be1c8179866f144a2fb44ff9d  opus-1.3.1.tar.gz\nc9b32b4253be5ae63d1ff16eea06b94b5f0f2951b7a02aceef58e3a3ce49c51f  opus-1.4.tar.gz\nd8230bbeb99e6d558645aaad25d79de8f4f28fdcc55f8af230050586d62c4f2c  opus-1.5.tar.gz\nb84610959b8d417b611aa12a22565e0a3732097c6389d19098d844543e340f85  opus-1.5.1.tar.gz\n65c1d2f78b9f2fb20082c38cbe47c951ad5839345876e46941612ee87f9a7ce1  opus-1.5.2.tar.gz\n94ac78ca4f74c4e43bc9fe4ec1ad0aa36f38ab90f45b0727c40dd1e96096e767  opus_testvectors-draft11.tar.gz\n94ac78ca4f74c4e43bc9fe4ec1ad0aa36f38ab90f45b0727c40dd1e96096e767  opus_testvectors.tar.gz\n6b26a22f9ba87b2b836906a9bb7afec5f8e54d49553b1200382520ee6fedfa55  opus_testvectors-rfc8251.tar.gz\n5d2b99757bcb628bab2611f3ed27af6f35276ce3abc96c0ed4399d6c6463dda5  opus-tools-0.1.2.tar.gz\n008317297d6ce84f84992abf8cc948a048a4fa135e1d1caf429fafde8965a792  opus-tools-0.1.3.tar.gz\nde80485c5afa1fd83c0e16a0dd4860470c872997a7dd0a58e99b2ee8a93e5168  opus-tools-0.1.4.tar.gz\n76678d0eb7a9b3d793bd0243f9ced9ab0ecdab263f5232ed940c8f5795fb0405  opus-tools-0.1.5.tar.gz\ncc86dbc2a4d76da7e1ed9afee85448c8f798c465a5412233f178783220f3a2c1  opus-tools-0.1.6.tar.gz\ne0f08d301555dffc417604269b5a85d2bd197f259c7d6c957f370ffd33d6d9cd  opus-tools-0.1.7.tar.gz\ne4e188579ea1c4e4d5066460d4a7214a7eafe3539e9a4466fdc98af41ba4a2f6  opus-tools-0.1.8.tar.gz\nb1873dd78c7fbc98cf65d6e10cfddb5c2c03b3af93f922139a2104baedb4643a  opus-tools-0.1.9.tar.gz\na2357532d19471b70666e0e0ec17d514246d8b3cb2eb168f68bb0f6fd372b28c  opus-tools-0.1.10.tar.gz\nb4e56cb00d3e509acfba9a9b627ffd8273b876b4e2408642259f6da28fa0ff86  opus-tools-0.2.tar.gz\nbd6d14e8897a2f80065ef34a516c70e74f8e00060abdbc238e79e5f99bca3e96  libopusenc-0.1.tar.gz\n02e6e0b14cbbe0569d948a46420f9c9a81d93bba32dc576a4007cbf96da68ef3  libopusenc-0.1.1.tar.gz\nc79e95eeee43a0b965e9b2c59a243763a8f8b0a7e71441df2aa9084f6171c73a  libopusenc-0.2.tar.gz\n8298db61a8d3d63e41c1a80705baa8ce9ff3f50452ea7ec1c19a564fe106cbb9  libopusenc-0.2.1.tar.gz\n8071b968475c1a17f54b6840d6de9d9ee20f930e827b0401abe3c4cf4f3bf30a  opusfile-0.1.tar.gz\nb4a678b3b6c4adfb6aff1f67ef658becfe146ea7c7ff228e99543762171557f9  opusfile-0.2.tar.gz\n4248927f2c4e316ea5b84fb02bd100bfec8fa4624a6910d77f0af7f0c6cb8baa  opusfile-0.3.tar.gz\n9836ea11706c44f36de92c4c9b1248e03a4c521e7fb2cff18a0cb4f8b0e79140  opusfile-0.4.tar.gz\nf187906b1b35f7f0d7de6a759b4aab512a9279d23adb35d8009e7e33bd6a922a  opusfile-0.4.zip\n2ce52d006aeeec9f10260dbe3073c4636954a1ab19c82b8baafefe0180aa4a39  opusfile-0.5.tar.gz\nb940d62beb15b5974764574b9f265481fe5b6ee16902fb705727546caf956261  opusfile-0.5.zip\n2428717b356e139f18ed2fdb5ad990b5654a238907a0058200b39c46a7d03ea6  opusfile-0.6.tar.gz\n753339225193df605372944889023b9b3c5378d672e8784d69fa241cd465278c  opusfile-0.6.zip\n9e2bed13bc729058591a0f1cab2505e8cfd8e7ac460bf10a78bcc3b125e7c301  opusfile-0.7.tar.gz\n346967d7989bb83b05949483b76bd0f69a12c59bd8b4457e864902b52bb0ac34  opusfile-0.7.zip\n2c231ed3cfaa1b3173f52d740e5bbd77d51b9dfecb87014b404917fba4b855a4  opusfile-0.8.tar.gz\n89dff4342c3b789574cbea5c57f11b96d4ebe4d28ab90248c1783ea569b1e9e3  opusfile-0.8.zip\nf75fb500e40b122775ac1a71ad80c4477698842a8fe9da4a1b4a1a9f16e4e979  opusfile-0.9.tar.gz\ne9591da4d4c9e857436c2d46a28a9e470fa5355ea5a76d4d582f137d18755d36  opusfile-0.9.zip\n48e03526ba87ef9cf5f1c47b5ebe3aa195bd89b912a57060c36184a6cd19412f  opusfile-0.10.tar.gz\n9d9e95d01817ecf48bf6daaea8f071f9b45bd1751ca1fc8ce50e5075eb2bc3c8  opusfile-0.10.zip\n74ce9b6cf4da103133e7b5c95df810ceb7195471e1162ed57af415fabf5603bf  opusfile-0.11.tar.gz\n23c5168026c4f1fc34843650135b409d0fc8cf452508163b4ece8077256ac6ff  opusfile-0.11.zip\n118d8601c12dd6a44f52423e68ca9083cc9f2bfe72da7a8c1acb22a80ae3550b  opusfile-0.12.tar.gz\n7f44575596b78d7787c1865b9653e2a71546ff1ae77d87c53ab16dcc7af295ba  opusfile-0.12.zip\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "silk",
          "type": "tree",
          "content": null
        },
        {
          "name": "silk_headers.mk",
          "type": "blob",
          "size": 1.064453125,
          "content": "SILK_HEAD = \\\nsilk/debug.h \\\nsilk/control.h \\\nsilk/errors.h \\\nsilk/API.h \\\nsilk/typedef.h \\\nsilk/define.h \\\nsilk/main.h \\\nsilk/x86/main_sse.h \\\nsilk/PLC.h \\\nsilk/structs.h \\\nsilk/tables.h \\\nsilk/tuning_parameters.h \\\nsilk/Inlines.h \\\nsilk/MacroCount.h \\\nsilk/MacroDebug.h \\\nsilk/macros.h \\\nsilk/NSQ.h \\\nsilk/pitch_est_defines.h \\\nsilk/resampler_private.h \\\nsilk/resampler_rom.h \\\nsilk/resampler_structs.h \\\nsilk/SigProc_FIX.h \\\nsilk/x86/SigProc_FIX_sse.h \\\nsilk/arm/biquad_alt_arm.h \\\nsilk/arm/LPC_inv_pred_gain_arm.h \\\nsilk/arm/macros_armv4.h \\\nsilk/arm/macros_armv5e.h \\\nsilk/arm/macros_arm64.h \\\nsilk/arm/SigProc_FIX_armv4.h \\\nsilk/arm/SigProc_FIX_armv5e.h \\\nsilk/arm/NSQ_del_dec_arm.h \\\nsilk/arm/NSQ_neon.h \\\nsilk/fixed/main_FIX.h \\\nsilk/fixed/structs_FIX.h \\\nsilk/fixed/arm/warped_autocorrelation_FIX_arm.h \\\nsilk/fixed/mips/noise_shape_analysis_FIX_mipsr1.h \\\nsilk/fixed/mips/warped_autocorrelation_FIX_mipsr1.h \\\nsilk/float/main_FLP.h \\\nsilk/float/structs_FLP.h \\\nsilk/float/SigProc_FLP.h \\\nsilk/mips/macros_mipsr1.h \\\nsilk/mips/NSQ_del_dec_mipsr1.h \\\nsilk/mips/sigproc_fix_mipsr1.h\n"
        },
        {
          "name": "silk_sources.mk",
          "type": "blob",
          "size": 4.1591796875,
          "content": "SILK_SOURCES = \\\nsilk/CNG.c \\\nsilk/code_signs.c \\\nsilk/init_decoder.c \\\nsilk/decode_core.c \\\nsilk/decode_frame.c \\\nsilk/decode_parameters.c \\\nsilk/decode_indices.c \\\nsilk/decode_pulses.c \\\nsilk/decoder_set_fs.c \\\nsilk/dec_API.c \\\nsilk/enc_API.c \\\nsilk/encode_indices.c \\\nsilk/encode_pulses.c \\\nsilk/gain_quant.c \\\nsilk/interpolate.c \\\nsilk/LP_variable_cutoff.c \\\nsilk/NLSF_decode.c \\\nsilk/NSQ.c \\\nsilk/NSQ_del_dec.c \\\nsilk/PLC.c \\\nsilk/shell_coder.c \\\nsilk/tables_gain.c \\\nsilk/tables_LTP.c \\\nsilk/tables_NLSF_CB_NB_MB.c \\\nsilk/tables_NLSF_CB_WB.c \\\nsilk/tables_other.c \\\nsilk/tables_pitch_lag.c \\\nsilk/tables_pulses_per_block.c \\\nsilk/VAD.c \\\nsilk/control_audio_bandwidth.c \\\nsilk/quant_LTP_gains.c \\\nsilk/VQ_WMat_EC.c \\\nsilk/HP_variable_cutoff.c \\\nsilk/NLSF_encode.c \\\nsilk/NLSF_VQ.c \\\nsilk/NLSF_unpack.c \\\nsilk/NLSF_del_dec_quant.c \\\nsilk/process_NLSFs.c \\\nsilk/stereo_LR_to_MS.c \\\nsilk/stereo_MS_to_LR.c \\\nsilk/check_control_input.c \\\nsilk/control_SNR.c \\\nsilk/init_encoder.c \\\nsilk/control_codec.c \\\nsilk/A2NLSF.c \\\nsilk/ana_filt_bank_1.c \\\nsilk/biquad_alt.c \\\nsilk/bwexpander_32.c \\\nsilk/bwexpander.c \\\nsilk/debug.c \\\nsilk/decode_pitch.c \\\nsilk/inner_prod_aligned.c \\\nsilk/lin2log.c \\\nsilk/log2lin.c \\\nsilk/LPC_analysis_filter.c \\\nsilk/LPC_inv_pred_gain.c \\\nsilk/table_LSF_cos.c \\\nsilk/NLSF2A.c \\\nsilk/NLSF_stabilize.c \\\nsilk/NLSF_VQ_weights_laroia.c \\\nsilk/pitch_est_tables.c \\\nsilk/resampler.c \\\nsilk/resampler_down2_3.c \\\nsilk/resampler_down2.c \\\nsilk/resampler_private_AR2.c \\\nsilk/resampler_private_down_FIR.c \\\nsilk/resampler_private_IIR_FIR.c \\\nsilk/resampler_private_up2_HQ.c \\\nsilk/resampler_rom.c \\\nsilk/sigm_Q15.c \\\nsilk/sort.c \\\nsilk/sum_sqr_shift.c \\\nsilk/stereo_decode_pred.c \\\nsilk/stereo_encode_pred.c \\\nsilk/stereo_find_predictor.c \\\nsilk/stereo_quant_pred.c \\\nsilk/LPC_fit.c\n\nSILK_SOURCES_X86_RTCD = \\\nsilk/x86/x86_silk_map.c\n\nSILK_SOURCES_SSE4_1 = \\\nsilk/x86/NSQ_sse4_1.c \\\nsilk/x86/NSQ_del_dec_sse4_1.c \\\nsilk/x86/VAD_sse4_1.c \\\nsilk/x86/VQ_WMat_EC_sse4_1.c\n\nSILK_SOURCES_AVX2 =  \\\nsilk/x86/NSQ_del_dec_avx2.c\n\nSILK_SOURCES_ARM_RTCD = \\\nsilk/arm/arm_silk_map.c\n\nSILK_SOURCES_ARM_NEON_INTR = \\\nsilk/arm/biquad_alt_neon_intr.c \\\nsilk/arm/LPC_inv_pred_gain_neon_intr.c \\\nsilk/arm/NSQ_del_dec_neon_intr.c \\\nsilk/arm/NSQ_neon.c\n\nSILK_SOURCES_FIXED = \\\nsilk/fixed/LTP_analysis_filter_FIX.c \\\nsilk/fixed/LTP_scale_ctrl_FIX.c \\\nsilk/fixed/corrMatrix_FIX.c \\\nsilk/fixed/encode_frame_FIX.c \\\nsilk/fixed/find_LPC_FIX.c \\\nsilk/fixed/find_LTP_FIX.c \\\nsilk/fixed/find_pitch_lags_FIX.c \\\nsilk/fixed/find_pred_coefs_FIX.c \\\nsilk/fixed/noise_shape_analysis_FIX.c \\\nsilk/fixed/process_gains_FIX.c \\\nsilk/fixed/regularize_correlations_FIX.c \\\nsilk/fixed/residual_energy16_FIX.c \\\nsilk/fixed/residual_energy_FIX.c \\\nsilk/fixed/warped_autocorrelation_FIX.c \\\nsilk/fixed/apply_sine_window_FIX.c \\\nsilk/fixed/autocorr_FIX.c \\\nsilk/fixed/burg_modified_FIX.c \\\nsilk/fixed/k2a_FIX.c \\\nsilk/fixed/k2a_Q16_FIX.c \\\nsilk/fixed/pitch_analysis_core_FIX.c \\\nsilk/fixed/vector_ops_FIX.c \\\nsilk/fixed/schur64_FIX.c \\\nsilk/fixed/schur_FIX.c\n\nSILK_SOURCES_FIXED_SSE4_1 = \\\nsilk/fixed/x86/vector_ops_FIX_sse4_1.c \\\nsilk/fixed/x86/burg_modified_FIX_sse4_1.c\n\nSILK_SOURCES_FIXED_ARM_NEON_INTR = \\\nsilk/fixed/arm/warped_autocorrelation_FIX_neon_intr.c\n\nSILK_SOURCES_FLOAT = \\\nsilk/float/apply_sine_window_FLP.c \\\nsilk/float/corrMatrix_FLP.c \\\nsilk/float/encode_frame_FLP.c \\\nsilk/float/find_LPC_FLP.c \\\nsilk/float/find_LTP_FLP.c \\\nsilk/float/find_pitch_lags_FLP.c \\\nsilk/float/find_pred_coefs_FLP.c \\\nsilk/float/LPC_analysis_filter_FLP.c \\\nsilk/float/LTP_analysis_filter_FLP.c \\\nsilk/float/LTP_scale_ctrl_FLP.c \\\nsilk/float/noise_shape_analysis_FLP.c \\\nsilk/float/process_gains_FLP.c \\\nsilk/float/regularize_correlations_FLP.c \\\nsilk/float/residual_energy_FLP.c \\\nsilk/float/warped_autocorrelation_FLP.c \\\nsilk/float/wrappers_FLP.c \\\nsilk/float/autocorrelation_FLP.c \\\nsilk/float/burg_modified_FLP.c \\\nsilk/float/bwexpander_FLP.c \\\nsilk/float/energy_FLP.c \\\nsilk/float/inner_product_FLP.c \\\nsilk/float/k2a_FLP.c \\\nsilk/float/LPC_inv_pred_gain_FLP.c \\\nsilk/float/pitch_analysis_core_FLP.c \\\nsilk/float/scale_copy_vector_FLP.c \\\nsilk/float/scale_vector_FLP.c \\\nsilk/float/schur_FLP.c \\\nsilk/float/sort_FLP.c\n\nSILK_SOURCES_FLOAT_AVX2 = \\\nsilk/float/x86/inner_product_FLP_avx2.c"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tar_list.txt",
          "type": "blob",
          "size": 0.6513671875,
          "content": "dnn/models/lace_v2.pth\ndnn/models/nolace_v2.pth\ndnn/models/nolace_192_v2.pth\ndnn/models/nolace_160_v2.pth\ndnn/models/fargan48bbr_adv_50.pth\ndnn/models/rdovae_sparse5m_32.pth\ndnn/models/plc4ar_16.pth\ndnn/models/pitch_vsmallconv1.pth\ndnn/models/lossgen3_2000.pth\ndnn/lace_data.c\ndnn/lace_data.h\ndnn/nolace_data.c\ndnn/nolace_data.h\ndnn/fargan_data.c\ndnn/fargan_data.h\ndnn/pitchdnn_data.c\ndnn/pitchdnn_data.h\ndnn/plc_data.c\ndnn/plc_data.h\ndnn/dred_rdovae_constants.h\ndnn/dred_rdovae_stats_data.h\ndnn/dred_rdovae_enc_data.h\ndnn/dred_rdovae_stats_data.c\ndnn/dred_rdovae_dec_data.h\ndnn/dred_rdovae_enc_data.c\ndnn/dred_rdovae_dec_data.c\ndnn/lossgen_data.c\ndnn/lossgen_data.h\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "training",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_version",
          "type": "blob",
          "size": 2.279296875,
          "content": "#!/bin/bash\n\n# Creates and updates the package_version information used by configure.ac\n# (or other makefiles).  When run inside a git repository it will use the\n# version information that can be queried from it unless AUTO_UPDATE is set\n# to 'no'.  If no version is currently known it will be set to 'unknown'.\n#\n# If called with the argument 'release', the PACKAGE_VERSION will be updated\n# even if AUTO_UPDATE=no, but the value of AUTO_UPDATE shall be preserved.\n# This is used to force a version update whenever `make dist` is run.\n#\n# The exit status is 1 if package_version is not modified, else 0 is returned.\n#\n# This script should NOT be included in distributed tarballs, because if a\n# parent directory contains a git repository we do not want to accidentally\n# retrieve the version information from it instead.  Tarballs should ship\n# with only the package_version file.\n#\n# Ron <ron@debian.org>, 2012.\n\nSRCDIR=$(dirname $0)\n\nif [ -e \"$SRCDIR/package_version\" ]; then\n    . \"$SRCDIR/package_version\"\nfi\n\nif [ \"$AUTO_UPDATE\" = no ]; then\n    [ \"$1\" = release ] || exit 1\nelse\n    AUTO_UPDATE=yes\nfi\n\n# We run `git status` before describe here to ensure that we don't get a false\n# -dirty from files that have been touched but are not actually altered in the\n# working dir.\nGIT_VERSION=$(cd \"$SRCDIR\" && git status > /dev/null 2>&1 \\\n                           && git describe --tags --match 'v*' --dirty 2> /dev/null)\nGIT_VERSION=${GIT_VERSION#v}\n\nif [ -n \"$GIT_VERSION\" ]; then\n\n    [ \"$GIT_VERSION\" != \"$PACKAGE_VERSION\" ] || exit 1\n    PACKAGE_VERSION=\"$GIT_VERSION\"\n\nelif [ -z \"$PACKAGE_VERSION\" ]; then\n    # No current package_version and no git ...\n    # We really shouldn't ever get here, because this script should only be\n    # included in the git repository, and should usually be export-ignored.\n    PACKAGE_VERSION=\"unknown\"\nelse\n    exit 1\nfi\n\ncat > \"$SRCDIR/package_version\" <<-EOF\n\t# Automatically generated by update_version.\n\t# This file may be sourced into a shell script or makefile.\n\n\t# Set this to 'no' if you do not wish the version information\n\t# to be checked and updated for every build.  Most people will\n\t# never want to change this, it is an option for developers\n\t# making frequent changes that they know will not be released.\n\tAUTO_UPDATE=$AUTO_UPDATE\n\n\tPACKAGE_VERSION=\"$PACKAGE_VERSION\"\nEOF\n"
        }
      ]
    }
  ]
}