{
  "metadata": {
    "timestamp": 1736709986443,
    "page": 560,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "EtchedPixels/FUZIX",
      "stars": 2203,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.212890625,
          "content": "# SDCC stuff\n*.lnk\n*.lst\n*.map\n*.mem\n*.rel\n*.rst\n*.sym\n*.o\n*.o.d\ncscope.*\n/GPATH\n/GRTAGS\n/GTAGS\n# Library archives\n*.a\n# Emacs backup\n*~\n# Statistics from builds\nsize.report\n# Build system output\n.obj\n*.elf\nbin\n*.debug"
        },
        {
          "name": "Applications",
          "type": "tree",
          "content": null
        },
        {
          "name": "BUILD_REQUIREMENTS.md",
          "type": "blob",
          "size": 2.1103515625,
          "content": "# Build Requirements\n\nThis is a WIP list of the build requirements for Fuzix for diffferent\ntargets. At the moment lots of compilers are used according to the target.\nThe intent is to reduce this to gcc for bigger machines and the Fuzix native\ncompiler for the small ones.\n\n## General\n\nBash shell\nGNU Make\nByacc\n\n## 6303/6800/6803\n\nCC6303 head from https://github.com/EtchedPixels/CC6303\n\nThe compiler, tools and Fuzix are developed in parallel.\n\n## 6502 / 65C816\n\nAny vaguely modern cc65. The builds are currently tested with cc65 v2.18\n\n## 6809\n\n6809 gcc 4.6.4 with the lwtools patches and lwtools.\n\n## 68HC11\n\nGCC 3.4.6 built for 68HC11. This is about the last GCC before 68HC11 support\nwas dropped where it still actually works.\n\n## 68000\n\n*WARNING*: The Fedora gcc-m68k package appears to be completely broken.\n\nIn fact the gcc build environment appears to be a bit of a train-wreck for\nM68K options. See [README.68000.md](README.68000.md) for a working example.\n\n## 8080/8085\n\nFuzix Bintools\nhttps://github.com/EtchedPixels/Fuzix-Bintools\n\nmake\nmake install\n\nFuzix C Compiler\nhttps://github.com/EtchedPixels/Fuzix-Compiler-Kit\n\nBuild the assembler first and ensure it's on your path\n\nmake install\n\n## 8086\n\ngcc-8086\n\n## ARM (PI Pico)\n\nRaspberry Pi Pico SDK\n\n## ARM (TM4C129X)\n\n## ESP8266\n\nxtensa-lf106-elf gcc tool chain. The build is tested with the Debian\ngcc-xtensa-lx106 package.\n\nesptool\n\n## Rabbit 2000/3000\n\nDropped. We don't yet have a usable platform/emulator for this. Will come\nback once we have assembler and compiler support from ccz80.\n\n## Z80/Z180\n\nFuzix Bintools\nhttps://github.com/EtchedPixels/Fuzix-Bintools\n\nmake\nmake install\n\nFuzix C Compiler\nhttps://github.com/EtchedPixels/Fuzix-Compiler-Kit\n\nBuild the assembler first and ensure it's on your path\n\nmake install\n\nFor most kernels you still need a slightly modified SDCC from\nhttps://github.com/EtchedPixels/sdcc280. For all but banked kernels the\ncurrent 4.x SDCC ought to work.\n\nThis will gradually change.\n\n## eZ80\n\nTemporarily dropped. Will come back when the new C compiler has ez80 support\nand we have an actual meaningful ez80 platform for development (or a usable\nemulation).\n"
        },
        {
          "name": "Build",
          "type": "tree",
          "content": null
        },
        {
          "name": "CREDITS",
          "type": "blob",
          "size": 41.6943359375,
          "content": "This file may be incomplete: please consult the actual tree to confirm any\nlicensing details.\n\nPlease note the non-free software listed at the bottom of this file. Certain\nelements have a non-commercial use license but may be excluded without losing\nany other functionality (BCPL and some games)\n\nC Library (not including compiler runtime)\n------------------------------------------\n\n/*\n * ====================================================\n * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n *\n * Developed at SunSoft, a Sun Microsystems, Inc. business.\n * Permission to use, copy, modify, and distribute this\n * software is freely granted, provided that this notice\n * is preserved.\n * ====================================================\n */\n\nSome parts of the above\n/*\n * Conversion to float by Ian Lance Taylor, Cygnus Support, ian@cygnus.com.\n */\n\n/*\n * ====================================================\n * Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.\n *\n * Permission to use, copy, modify, and distribute this\n * software is freely granted, provided that this notice\n * is preserved.\n * ====================================================\n */\n\n/*\n * Copyright (C) 1995, 1996 Nat Friedman <ndf@linux.mit.edu>.\n * \n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Library General Public\n *  License as published by the Free Software Foundation; either\n *  version 2 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Library General Public License for more details.\n *\n *  You should have received a copy of the GNU Library General Public\n *  License along with this library; if not, write to the Free\n *  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n *\n */\n\n/*\n*   Copyright (c) 2007-2011 Ilya O. Levin, http://www.literatecode.com\n*   Other contributors: Hal Finney\n*\n*   Permission to use, copy, modify, and distribute this software for any\n*   purpose with or without fee is hereby granted, provided that the above\n*   copyright notice and this permission notice appear in all copies.\n*\n*   THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n*   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n*   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n*   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n*   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n*   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n*   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\n\n/* Copyright (C) 1996 Robert de Bath <rdebath@cix.compulink.co.uk>\n * This file is part of the Linux-8086 C library and is distributed\n * under the GNU Library General Public License.\n */\n\n * getopt -- public domain version of standard System V routine\n * \n * Strictly enforces the System V Command Syntax Standard; provided by D A\n * Gwyn of BRL for generic ANSI C implementations\n\n\n * From the public domain dlib library by\n *\n *    Dale Schumacher                         399 Beacon Ave.\n *    (alias: Dalnefre')                      St. Paul, MN  55104\n *    dal@syntel.UUCP                         United States of America\n *  \"It's not reality that's important, but how you perceive things.\"\n\n/*\n * ++Copyright++ 1983, 1990, 1993\n * -\n * Copyright (c) 1983, 1990, 1993\n *    The Regents of the University of California.  All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n * \tThis product includes software developed by the University of\n * \tCalifornia, Berkeley and its contributors.\n * 4. Neither the name of the University nor the names of its contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * -\n * Portions Copyright (c) 1993 by Digital Equipment Corporation.\n * \n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies, and that\n * the name of Digital Equipment Corporation not be used in advertising or\n * publicity pertaining to distribution of the document or software without\n * specific, written prior permission.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\" AND DIGITAL EQUIPMENT CORP. DISCLAIMS ALL\n * WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL EQUIPMENT\n * CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL\n * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR\n * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\n * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\n * SOFTWARE.\n * -\n * --Copyright--\n */\n\n/*\n * Copyright (c) 1983, 1993\n *\tThe Regents of the University of California.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the University nor the names of its contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n */\n\n *\n *\tCopyright (c) 1986 by University of Toronto.\n *\tWritten by Henry Spencer.  Not derived from licensed software.\n *\n *\tPermission is granted to anyone to use this software for any\n *\tpurpose on any computer system, and to redistribute it freely,\n *\tsubject to the following restrictions:\n *\n *\t1. The author is not responsible for the consequences of use of\n *\t\tthis software, no matter how awful, even if they arise\n *\t\tfrom defects in it.\n *\n *\t2. The origin of this software must not be misrepresented, either\n *\t\tby explicit claim or by omission.\n *\n *\t3. Altered versions must be plainly marked as such, and must not\n *\t\tbe misrepresented as being the original software.\n *\n * Beware that some of this code is subtly aware of the way operator\n * precedence is structured in regular expressions.  Serious changes in\n * regular-expression syntax might require a total rethink.\n *\n * Modified: ANSIfied for SDCC by Alan Cox.\n\n// DNS resolver\n//\n// Copyright (C) 2002 Michael Ringgaard. All rights reserved.\n// Portions Copyright (C) 1996-2002  Internet Software Consortium.\n// Portions Copyright (C) 1996-2001  Nominum, Inc.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n// \n// 1. Redistributions of source code must retain the above copyright \n//    notice, this list of conditions and the following disclaimer.  \n// 2. Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.  \n// 3. Neither the name of the project nor the names of its contributors\n//    may be used to endorse or promote products derived from this software\n//    without specific prior written permission. \n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AN\nD\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIAB\nLE\n// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF \n// SUCH DAMAGE.\n\n/* Copyright (C) 1997-2017 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <http://www.gnu.org/licenses/>.  */\n\n\n/* Copyright (C) 1991, 1992, 1993 Free Software Foundation, Inc.\nThis file is part of the GNU C Library.\n\nThe GNU C Library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Library General Public License as\npublished by the Free Software Foundation; either version 2 of the\nLicense, or (at your option) any later version.\n\nThe GNU C Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLibrary General Public License for more details.\n\nYou should have received a copy of the GNU Library General Public\nLicense along with the GNU C Library; see the file COPYING.LIB.  If\nnot, write to the Free Software Foundation, Inc., 675 Mass Ave,\nCambridge, MA 02139, USA.  */\n\nMUSL\n\nCopyright © 2005-2014 Rich Felker, et al.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nApplications (Open Source)\n--------------------------\n\nas09\tBruce Evans compiler tools (as09/dasm09/ld09 etc) are GPL\n\ncave\tFrom a long history of conversions of Adventure. Please see history.doc\n\ncpm\tWill Sowerbutts: GPL v2\n\ncpmfs:\n * Copyright (c) 1982, 1983, 1994 Helge Skrivervik\n *\n * All rights reserved.\n *\n * This program is free software.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n *\tThis product includes software developed by Joerg Wunsch\n * 4. The name of the developer may not be used to endorse or promote\n *    products derived from this software without specific prior written\n *    permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE DEVELOPERS BE LIABLE FOR ANY DIRECT, INDIRECT,\n * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\ncursesgames:\n\tinvaders: Thomas Munro, GPL v2+\n\nflashrom:\n\tWill Sowerbutts: GPL v2\n\nfview:\n\tBrett M Gordon: GPLv3\n\ngames/hamurabi:\n The MIT License\n\n  Copyright (c) 2010 Brian L. Troutwine\n  \n  Marginally rearranged for Fuzix by Alan Cox 2018\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated\n  documentation files (the \"Software\"), to deal in the\n  Software without restriction, including without limitation\n  the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to\n  do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall\n  be included in all copies or substantial portions of the\n  Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY\n  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n  PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\n  OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\ngames/qrun:\n\n    QRun: Quill game runner for Fuzix.\n    Copyright (C) 2015  Alan Cox\n    \n    Derived from\n \n    UnQuill: Disassemble games written with the \"Quill\" adventure game system\n    Copyright (C) 1996-2000  John Elliott\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n\ngames/startrek:\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n *\n * This is a C port of an old BASIC program: the classic Super Star Trek\n * game. It comes from the book _BASIC Computer Games_ edited by David Ahl\n * of Creative Computing fame. It was published in 1978 by Workman Publishing,\n * 1 West 39 Street, New York, New York, and the ISBN is: 0-89489-052-3.\n * \n * See http://www.cactus.org/~nystrom/startrek.html for more info.\n\ngames/fortune:\n The database is from\nhttps://github.com/shlomif/fortune-mod/blob/master/fortune-mod/datfiles/computers\n\n/*-\n * Copyright (c) 1986, 1993\n *\tThe Regents of the University of California.  All rights reserved.\n *\n * This code is derived from software contributed to Berkeley by\n * Ken Arnold.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n *\tThis product includes software developed by the University of\n *\tCalifornia, Berkeley and its contributors.\n * 4. Neither the name of the University nor the names of its contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n */\n\nlevee:\n * LEVEE, or Captain Video;  A vi clone\n *\n * Copyright (c) 1982-1997 David L Parsons\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms are permitted\n * provided that the above copyright notice and this paragraph are\n * duplicated in all such forms and that any documentation,\n * advertising materials, and other materials related to such\n * distribution and use acknowledge that the software was developed\n * by David L Parsons (orc@pell.chi.il.us).  My name may not be used\n * to endorse or promote products derived from this software without\n * specific prior written permission.  THIS SOFTWARE IS PROVIDED\n * AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,\n * WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE.\n\n\nMWC: (Mark Williams Company)\n\nLicense\n\nCopyright © 1977-1995 by Robert Swartz.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nThis software is provided by the copyright holders and contributors \"as is\" and\nany express or implied warranties, including, but not limited to, the implied\nwarranties of merchantability and fitness for a particular purpose are\ndisclaimed. In no event shall the copyright holder or contributors be liable for\nany direct, indirect, incidental, special, exemplary, or consequential damages\n(including, but not limited to, procurement of substitute goods or services;\nloss of use, data, or profits; or business interruption) however caused and on\nany theory of liability, whether in contract, strict liability, or tort\n(including negligence or otherwise) arising in any way out of the use of this\nsoftware, even if advised of the possibility of such damage.\n\nnetd (uIP)\n\n * Copyright (c) 2006, Swedish Institute of Computer Science.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the Institute nor the names of its contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n *\n * This file is part of the uIP TCP/IP stack\n *\n\nplato: GPLv3\n * PLATOTerm64 - A PLATO Terminal for the Commodore 64\n * Based on Steve Peltz's PAD\n * \n * Author: Thomas Cherryhomes <thom.cherryhomes at gmail dot com>\n\nrpilot: GPLv2\n\nSmallC: public domain (except copt which is GPL)\n\nTCL: picol is\n * Copyright (c) 2007-2016, Salvatore Sanfilippo <antirez at gmail dot com>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright notice,\n *     this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n\nue: public domain\n\nV7:\n\nThe following copyright notice applies to the UNIX Version 7 and\n32V UNIX portions of this distribution:\n\nCopyright (C) Caldera International Inc. 2001-2002.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\nRedistributions of source code and documentation must retain the\nabove copyright notice, this list of conditions and the following\ndisclaimer.  Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n\nAll advertising materials mentioning features or use of this software\nmust display the following acknowledgement:\n\nThis product includes software developed or owned by Caldera\nInternational, Inc.\n\nNeither the name of Caldera International, Inc. nor the names of\nother contributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.\n\nUSE OF THE SOFTWARE PROVIDED FOR UNDER THIS LICENCE BY CALDERA\nINTERNATIONAL, INC. AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL CALDERA INTERNATIONAL, BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT\nOF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\nBUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\nOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe following copyright notice applies to the Berkeley Software\nDistribution portions of this distribution:\n\nCopyright (c) 1979, 1980 The Regents of the University of California.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. All advertising materials mentioning features or use of this software\n   must display the following acknowledgement:\nThis product includes software developed by the University of\nCalifornia, Berkeley and its contributors.\n4. Neither the name of the University nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\nCopyright (c) 1999-2007 Robert Nordier.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in\n   the documentation and/or other materials provided with the\n   distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS''\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR\nOR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\nUSE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\nOF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\nutils:\n\nbanner: public domain (Brian Wallis)\noriginal UZI utilities: public domain\n\n * Copyright (c) 1989, 1993, 1994\n *      The Regents of the University of California.  All rights reserved.\n *\n * This code is derived from software contributed to Berkeley by\n * Kim Letkeman.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n *      This product includes software developed by the University of\n *      California, Berkeley and its contributors.\n * 4. Neither the name of the University nor the names of its contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n\n * Copyright (c) 1993 by David I. Bell\n * Permission is granted to use, distribute, or modify this source,\n * provided that this copyright notice remains intact.\n\n/* Copyright 1991 by Vincent Archer\n *\tYou may freely redistribute this software, in source or binary\n *\tform, provided that you do not alter this copyright mention in any\n *\tway.\n *\n\n *      Copyright 1989, Michael John Holme, All rights reserved.\n *      This code may be freely distributed, provided that this notice\n *      remains intact.\n *\n\n * This was written by John N. White on 6/30/91 and is Public Domain.\n * Patched to run under news by Will Rose, Feb 92.\n * J N White's (earlier) patches added by Will Rose, 20 Feb 92.\n * Unsigned int increment/wrap bug fixed by Will Rose, 24 Mar 92.\n * Argument bug fixed, stdio generalised by Will Rose, 25 Mar 92.\n\n/*\n * Copyright (c) 2003 Gunnar Ritter\n *\n * This software is provided 'as-is', without any express or implied\n * warranty. In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute\n * it freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n *\n * 2. Altered source versions must be plainly marked as such, and must not be\n *    misrepresented as being the original software.\n *\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\n\n *\tCopyright 1987, Joypace Ltd., London UK. All rights reserved.\n *\tThis code may be freely distributed, provided that this notice\n *\tremains attached.\n\n    Copyright 1999 by Philip Homburg and Kees Bot.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n      1. Redistributions of source code must retain the above copyright\n         notice, this list of conditions and the following disclaimer.\n      2. Redistributions in binary form must reproduce the above\n         copyright notice, this list of conditions and the following\n\t disclaimer in the documentation and/or other materials provided\n\t with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS\n    OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n    BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nCopyright (C) 2006, 2013 by Rob Landley <rob@landley.net>\nCopyright (C) 2015 by Erkin Alp Güney <erkinalp9035@gmail.com>\nOriginal by Rob-FUZIX porting by Erkin Alp\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n *  fdisk.c  Disk partitioning program.\n *  Copyright (C) 1997  David Murn\n *\n *  This program is distributed under the GNU General Public Licence, and\n *  as such, may be freely distributed.\n\n# fforth © 2015 David Given\n# All rights reserved.\n#\n# --- BSD 2 CLAUSE LICENSE FOLLOWS ---\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n# 1. Redistributions of source code must retain the above copyright notice,\n# this list of conditions and the following disclaimer.\n# \n# 2. Redistributions in binary form must reproduce the above copyright notice,\n# this list of conditions and the following disclaimer in the documentation\n# and/or other materials provided with the distribution.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE. is available here:\n#\n\n * Copyright (c) 1991 by Bert Gijsbers.  All rights reserved.\n * Permission to use and redistribute this software is hereby granted provided\n * that this copyright notice remains intact and that any modifications are\n * clearly marked as such.\n\n * Norbert Schlenker (nfs@princeton.edu)  1990-02-08\n * Released into the public domain.\n\n* (C) Robert de Bath 1997 under the terms of the GPL.\n\n * author:\t Shane Kerr <kerr@wizard.net>\n * copyright:\t 1998 by Shane Kerr <kerr@wizard.net>, under terms of GPL\n\n  Copyright (c) 1987,1997, Prentice Hall\n  All rights reserved.\n  \n  Redistribution and use of the MINIX operating system in source and\n  binary forms, with or without modification, are permitted provided\n  that the following conditions are met:\n  \n     * Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n  \n     * Redistributions in binary form must reproduce the above\n       copyright notice, this list of conditions and the following\n       disclaimer in the documentation and/or other materials provided\n       with the distribution.\n  \n     * Neither the name of Prentice Hall nor the names of the software\n       authors or contributors may be used to endorse or promote\n       products derived from this software without specific prior\n       written permission.\n  \n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS, AUTHORS, AND\n  CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,\n  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n  IN NO EVENT SHALL PRENTICE HALL OR ANY AUTHORS OR CONTRIBUTORS BE\n  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n *      Written 02/08/86 by John Woods, placed into public domain.  Enjoy.\n\n *\tVILE\t-\tVI Like Editor\n *\n *\tBased upon:\n *\n *        ae.c                Anthony's Editor  Mar '92\n *\n *        Public Domain 1991, 1992 by Anthony Howe.  All rights released.\n *\n *\tANSIfied, and extended eventually for Fuzix Alan Cox 2018\n *\n\n * Copyright 1998 Alistair Riddoch\n * ajr@ecs.soton.ac.uk\n *\n * This file may be distributed under the terms of the GNU General Public\n * License v2, or at your option any later version.\n\n\n\nApplications (Non Free)\n-----------------------\nBCPL\t(c) Copyright 1978-1980 Tripos Research Group\n\tUniversity of Cambridge\n\tComputer Laboratory\n\n\tNon-commercial use\n\nScott Adams Adventure Games (games/adv*.c)\n\nThese Scott Adams original text Adventure games are still copyrighted by\nScott Adams and are not Public Domain. They may be freely downloaded and\nenjoyed though. They are shareware but the contribution is strictly\nvoluntary and the amount left to your own discretion.\n\nPlease note that international checks (in small amounts) are usually more\nexpensive to cash than their face value is worth so please do not send same.\n\nIf you are unable or unwilling to pay for these games you may still freely\nenjoy them.\n\nPlease send any payments to\n\nScott Adams\n845 Badland Road\nPlatteville WI USA 53818-9760\n\nHomepage: http://www.msadams.com/\nEmail: msadams@msadams.com\nNovember 24, 1997\n\nPuzzles generated using SokEvo\nauthor:Lee J Haywood\nwebsite:http://fruise.googlepages.com/home.html\nCollection: SokEvo\n\nThese designs may be freely distributed and may be used commercially provided\nthey remain unchanged and I am credited with my name - Lee J Haywood.  Any\nsimilarity to anyone else's work is entirely coincidental and unintentional.\n\nThis collection of Sokoban puzzle designs was generated by a program written by\nLee J Haywood that used random numbers and a solving program to 'evolve' them.\n\n"
        },
        {
          "name": "CodingStyle.md",
          "type": "blob",
          "size": 4.431640625,
          "content": "# Coding Style\n\n:warning: This is a descriptive not a prescriptive document.\n\n## Shared Code\n\nCode that is part of the core tree used for everything should adhere to the\nfollowing rules\n\n### Compiler Limits\n\n#### No use of (void)foo() style casting\nThis is not supported by all the compilers we use.\n\n#### No floating point\nThe floating point support varies by platform and even when present is often\nvery slow on a small micro, and adds a lot of code.\n\n#### No long division in kernel code\nOn several platforms this sucks in large non re-entrant support routines tha\nwould require saving more state on a context switch\n\n#### Less than 256 bytes within any given stack frame\ncc65 can't handle large stack offsets, and on Z80, 8085 and 6800 series\nprocessors there is much great expense accessing beyond the 128 or 256 byte\nrange around the stack frame.\n\n#### All identifiers unique within 14 characters\nThis is the worst case for the compilers used.\n\n#### No // comments\nNot all compilers support them.\n\n### Performance\n\n#### Place initialized auto variables together when possible\nSeveral compilers generate shorter and cleaner initialization code on\nfunction entry if local variables are initialized in their declaration and\nthe initializers are together.\n\n#### Try to keep one active pointer at a time\nThere are limited indexing registers on some targets so generating a series\nof references to one pointer is far better than working with several. The\nkernel tries to cluster things into arrays of structs with all the\nproperties for this reason.\n\n#### Pre-calculate loop limit expressions when possible\n\n````\n\twhile (x < n + 2 * p) { func(); }\n````\n\noften requires the math is evaluated each time. On a modern processor nobody\nnotices. On an 8080 you do.\n\n#### Use uint_fast8_t not uint8_t unless you are working with arrays\nC has some annoying rules about type promotion and arithmetic which mean\nthat on certain systems uint8_t is actually expensive. On such systems\nuint_fast8_t will be a faster unsigned type.\n\n#### Use unsigned maths whenever possible\nSign extension is really expensive on some processors. The 8080 also lacks\nsigned comparisons making signed operations more expensive.\n\n### Coding Style\n\nCurrently the code mostly uses a Linux like style but with a confusion of 4\nand 8 character indenting. This should be moved to 8 character indenting for\ncore code.  Reformatting is being done gradually when appropriate.\n\n### Custom Defines\n\nThe kernel uses a few extra type defines of its own.\n\n#### \\_\\_packed\n\nTag an array as packed. On many systems this is the natural order of things\nand they don't support any \"packing\" attribute. On gcc based targets it\nexpands to the expected attribute notation.\n\n#### barrier()\n\nA store/load barrier. On many of the ports this is actually a no-op because\nthe compiler isn't smart enough to move load/stores over a statement\nboundary.\n\n#### inline\n\nMark a function as inlineable if supported by the compiler\n\n#### \\_\\_fastcall\n\nOn certain targets single argument functions have a special calling pattern,\nespecially with calls to assembly code. This is used to mark such functions.\nGenerally speaking the use of \\_\\_fastcall is only done for platform specific\nuses.\n\n#### staticfast\n\nMarks a variable that can be turned into a static for performance on\nprocessors that benefit from not having too many local variables to juggle\nat once. This notably affects Z80 - use with care. Various general purpose\nvalues used in syscalls are instead referenced via the udata for the same\neffect but without re-entrancy problems.\n\n#### regptr\n\nMark a variable that is used a lot (more than about 8 times) in a function\nas a pointer. This is used to help the 6502 compiler as the other compilers\ngenerally either do registerisation on their own or don't do it at all.\n\n#### used(x)\n\nTell the compiler that x is actually used and silence any warnings that it\nis not referenced.\n\n## Target specific code\n\nThis should be self consistent but the constraints on the core code do not\napply. Things like compiler extensions can be freely used, along with other\ntypes and features.\n\nTarget specific code that isn't maintained actively by a contributor is a\ncandidate for reformatting, particularly if the style is strange. Target\ncode that is actively changing is not.\n\n## Imported Code\n\nGenerally imported code keeps the style it had originally unless that style\nis sufficiently weird to be a problem (eg the Bourne Shell), or conflicts\nwiht the constraints of the tool chain for a platform using it.\n\n"
        },
        {
          "name": "ContributionRules",
          "type": "blob",
          "size": 0.7265625,
          "content": "# Copilot\n\nMicrosoft co-pilot laundered code is not accepted in this project\n\n# Licensing\n\nContributions should be made (and unless otherwise stated) will be assumed to be\nunder the same licensing as the project to which they pertain. You must have the\nright to make the relevant licence grant. If there are good reasons to contribute\nunder a different license to a component please discuss first.\n\n# Non-Free Dependencies\n\nThese are generally only acceptable where they are\n- Redistributable objects of historical interest (eg the BCPL environment)\n- Games or other redistributable creative works where the usual notion of open\n  source does not necessarily make sense\n\nDependencies on proprietary tool chains or tooling will not be accepted.\n"
        },
        {
          "name": "GUI",
          "type": "tree",
          "content": null
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 1.1083984375,
          "content": "\nEdit the top level Makefile and set TARGET\nRead Kernel/platform/platform-$ARCH/README.md\nAdjust anything it recommends for your platform\n\nThe Z80 build tools get stuck in /opt/fcc as will others in future. Right now\n/opt/fcc isn't moveable (yes we suck) but you can create that directory and\nchown it to the building user.\n\nMake sure you have the needed compilers on your path\nIf you are running cc65 remember you also need CC65_HOME set properly!\n\nIf you are using the lwtools gcc for 6809 ensure that $(pwd)/Build/tools is\non your path.\n\nCross fingers, type \"make\"\n\nThis should give you a build of libraries, user and kernel.\nStandalone/filesystem-src contains some scripts to build filesystems\nfuzix.org contains a bunch ready to download\n\nFor Z80 your VM needs at least 16GB including swap because sdcc is a bit of a\nmemory monster.\n\nFuzix expects yacc to be yacc not Bison. if your system for some reason thinks\nthat executing yacc should run bison you'll have a build failure. For Debian\nand derivatives (eg Ubuntu) this can be fixed with\n\n - sudo apt-get install -y byacc\n - sudo update-alternatives --set yacc /usr/bin/byacc\n\n"
        },
        {
          "name": "Images",
          "type": "tree",
          "content": null
        },
        {
          "name": "Kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENCE",
          "type": "blob",
          "size": 17.7568359375,
          "content": "[The libraries are LGPL, some files have more permissive licensing\n\n For the Applications please check the licence files in the relevant\n directories.\n\n]\n\n\nGNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc., <http://fsf.org/>\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {description}\n    Copyright (C) {year}  {fullname}\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  {signature of Ty Coon}, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n\n"
        },
        {
          "name": "Library",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.623046875,
          "content": "#\n# Set this to the desired platform to build\n#\n# Useful values for general work\n#\n# 2063:\t\tJohn Winans Z80 Retro system\n# 68knano:\tA small retrobrew 68000 platform with IDE disk\n# amprolb:\tThe legendary Ampro Littleboard\n# coco2cart:\tTandy COCO2 or Dragon with 64K and IDE or SDC + cartridge flash\n#\t\t(or xroar emulator )\n# coco3:\tTandy COCO3 512K (or MAME)\n# cpc6128: Amstrad CPC6128\n# cpm22:\tDesigned for S.100 and similar setups. Uses BIOS plus Z80\n#\t\tcustomisations\n# cromemco:\tCromemco with banked memory\n# dragon-mooh:\tDragon 32/64 with Mooh 512K card (or xroar emulator)\n# dragon-nx32:\tDragon 32/64 with Spinx 512K card (or xroar emulator)\n# dyno:\t\tZ180 based platform using RomWBW\n# easy-z80:\tEasy-Z80 RC2014 compatible system\n# esp8266:\tESP8266 module with added SD card\n# genie-eg64:\tVideo genie with a banked memory expander\n# kc87:\t\tEast German system\n# linc80:\tZ80 retrobrew system with custom RAM card or mods\n# mb020:\t68020 single board\n# micro80:\tBill Shen's micro80 design\n# mini11:\tMini11 68HC11A SBC\n# msx1:\t\tMSX1 as a cartridge\n# msx2:\t\tMSX2 with 128K or more and MegaFlashROM+SD interface\n#\t\t(or OpenMSX suitably configured)\n# mtx:\t\tMemotech MTX512 with SDX or SD (or MEMU emulator)\n# multicomp09:\tExtended multicomp 6809\n# n8:\t\tRetrobrew N8 home computer\n# nascom:\tNascom 2 or 3 with page mode RAM and CF on PIO\n# nc100:\tAmstrad NC100 (or emulator)\n# nc200:\tAmstrad NC200 (or emulator)\n# p112:\t\tDX Designs P112\n# pcw8256:\tAmstrad PCW series\n# pentagon:\tPentagon (spectrum not quite clone)\n# pentagon1024: Pentagon 1MB\n# pico68k:\tTiny 68K system using 6522/6850 and 128K RAM\n# rbc-mark4:\tRetrobrew Mark 4 Z180 system\n# rbc-minim68k:\tRetrobrew Mini 68K system\n# rc2014:\tRC2014 with 512K RAM/ROM and RTC\n# rc2014-tiny:\tRC2014 paged ROM system with Fuzix in ROM\n# rcbus-6303:\tRCBUS with 6303 or 6803 processor card\n# rcbus-6502:\tRCBUS with 65C02 or 65C816, VIA and 512K RAM/ROM\n# rcbus-68008:  RCBUS with 68008 CPU, PPIDE and flat 512/512K memory card\n# rcbus-6809:\tRCBUS with 6809 CPU card\n# rcbus-68hc11:\tRCBUS with 68HC11 CPU\n# rcbus-8085:\tRCBUs with 80C85 CPU and 8/56K memory banking\n# rcbus-ns32k:  RCBus with NS32K CPU\n# rcbus-sbc64:  RCBUS Z80SBC64 128K system and RTC\n# rcbus-z180:\tRCBUS Z180 systems running in Z180 mode (includes SC126 etc)\n# rhyophyre:\tAndrew Lynch's rhyohphre Z180/NEC7220 graphics\n# riz180:\tBill Shen's RIZ180 128K RAM Z180 platform (Fuzix in ROM)\n# rpipico:\tRaspberry Pi Pico\n# sam:\t\tSam Coupe\n# sbc2g:\tAnother banked Z80 system\n# sbcv2:\tRBC/N8VEM SBC v2\n# sc108:\tSmall Computer Central SC108 and SC114 systems\n# sc111:\tSmall Computer Central SC111 system\n# sc720:\tSmall Computer Central SC720 system\n# scorpion:\tScorpion 256K (and some relatives) with NemoIDE\n# scrumpel:\tScrumpel Z180 system\n# searle:\tSearle Z80 system with modified ROM and a timer added\n# simple80:\tBill Shen's Simple80 with board bugfix and a timer\n# smallz80:\tStack180 SmallZ80 system\n# socz80:\tWill Sowerbutt's FPGA SocZ80 or extended version\n# tc2068:\tTimex TC2068/TS2068 with DivIDE/DivMMC disk interface\n# tiny68k:\tBill Shen's Tiny68K or T68KRC\n# tm4c129x:\tTexas Instruments Tiva C Series Boards\n# to8:\t\tThomson TO8/TO9+\n# tomssbc:\tTom's SBC running in RAM\n# tomssbc-rom:\tTom's SBC using the 4x16K banked ROM for the kernel\n# trs80:\tTRS80 Model 4/4D/4P with 128K RAM (or some other mappers)\n# trs80m1:\tTRS80 Model I/III with suitable banker (also clones)\n# ubee:\t\tMicrobee\n# v8080:\t8080 development using Z80Pack\n# vz200:\tVZ200 with SDcard/memory\n# yaz180:\tYet another Z180 system\n# z1013:\tEast German system\n# z180itx:\tZ180ITX prototype\n# z80-mbc2:\tMBC2 Z80 with modern microcontroller as I/O\n# z80membership: Z80 membership card\n# z80pack:\tZ80Pack virtual Z80 platform\n# z80retro:\tPeter Wilson's Z80Retro\n# zeta-v2:\tZeta v2 retrobrew SBC (for Zeta V1 see sbcv2)\n# zrc:\t\tBill Shen's Zrc platform\n# zx+3:\t\tZX Spectrum +3\n# zxdiv:\tZX Spectrum 128K with DivIDE/DivMMC interface\n# zxuno:\tZX Uno FPGA system\n\nTARGET ?= zrc\n\ninclude version.mk\n\n# Get the CPU type\ninclude Kernel/platform/platform-$(TARGET)/target.mk\n\nifeq ($(USERCPU),)\n\tUSERCPU = $(CPU)\nendif\n\n# Base of the build directory\nFUZIX_ROOT = $(shell pwd)\n\n# FIXME: we should make it possible to do things entirely without /opt/fcc\nPATH := /opt/fcc/bin:$(PATH)\n# Add the tools directory\nPATH := $(FUZIX_ROOT)/Build/tools/:$(PATH)\n\n# Use Berkeley yacc always (Bison output is too large)\nYACC = byacc\n\n# TARGET is what we are building\n# CPU is the CPU type for the kernel\n# USERCPU is the CPU type for userspace and may be different\nexport TARGET CPU USERCPU PATH FUZIX_ROOT YACC\n\n# FUZIX_CCOPTS is the global CC optimization level\nifeq ($(FUZIX_CCOPTS),)\n\tFUZIX_CCOPTS = -O2\nendif\nexport FUZIX_CCOPTS\n\nall: tools stand ltools libs apps kernel\n\nstand:\n\t+(cd Standalone; $(MAKE))\n\nltools:\n\t+(cd Library; $(MAKE) && $(MAKE) install)\n\nlibs: ltools\n\t+(cd Library/libs; $(MAKE) -f Makefile.$(USERCPU) && \\\n\t\t$(MAKE) -f Makefile.$(USERCPU) install)\n\napps: libs\n\t+(cd Applications; $(MAKE))\n\ntools:\n\t(cd Tools; ./build-$(CPU))\n\n.PHONY: gtags\ngtags:\n\tgtags\n\nkernel: ltools\n\tmkdir -p Images/$(TARGET)\n\t+(cd Kernel; $(MAKE))\n\ndiskimage: stand ltools libs apps kernel\n\tmkdir -p Images/$(TARGET)\n\t+(cd Standalone/filesystem-src; ./build-filesystem $(ENDIANFLAG) $(FUZIX_ROOT)/Images/$(TARGET)/filesys.img 256 65535)\n\t+(cd Standalone/filesystem-src; ./build-filesystem $(ENDIANFLAG) $(FUZIX_ROOT)/Images/$(TARGET)/filesys8.img 256 16384)\n\t+(cd Kernel; $(MAKE) diskimage)\n\nkclean:\n\t+(cd Kernel; $(MAKE) clean)\n\nclean:\n\trm -f GPATH GRTAGS GTAGS\n\trm -f Images/$(TARGET)/*.img\n\trm -f Images/$(TARGET)/*.DSK\n\t+(cd Standalone; $(MAKE) clean)\n\t+(cd Library/libs; $(MAKE) -f Makefile.$(USERCPU) clean)\n\t+(cd Library; $(MAKE) clean)\n\t+(cd Kernel; $(MAKE) clean)\n\t+(cd Applications; $(MAKE) clean)\n"
        },
        {
          "name": "Patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.68000.md",
          "type": "blob",
          "size": 1.6123046875,
          "content": "# 68000 Tool Chain Issues\n\nSome 68000 gcc builds produce something that builds but doesn't quite work.\nIn particular you see a pattern where it gets to user space but you cannot\nlogin, or it starts init, then without running /etc/rc properly prompts for\na login, tells you it is unable to change the owner of the controlling tty\nand crashes.\n\nDo not use any gcc that is built m68k-linux-gnu, these are a weird broken\nucLinux target that doesn't actually work properly, despite being shipped\nwith Fedora Linux for years\n\nBuild yourself a binutils and gcc from the official GNU toolchain. I am\ncurrently using\n````\nm68k-elf-gcc -v\nUsing built-in specs.\nCOLLECT_GCC=m68k-elf-gcc\nCOLLECT_LTO_WRAPPER=/opt/gcc10-68k/libexec/gcc/m68k-elf/10.3.0/lto-wrapper\nTarget: m68k-elf\nConfigured with: ../gcc-10.3.0/configure --target=m68k-elf --prefix=/opt/gcc10-68k --disable-threads --enable-languages=c --disable-shared --without-headers --disable-libquadmath --disable-libssp --disable-libgcj --disable-gold --disable-libmpx --disable-libgomp --disable-libatomic --with-cpu=68000\nThread model: single\nSupported LTO compression algorithms: zlib\ngcc version 10.3.0 (GCC) \n````\n\nand\n````\nGNU assembler version 2.37 (m68k-elf) using BFD version (GNU Binutils) 2.37\n````\n\nIf you think you have this problem try running your kernel with a known good\nuser space image from fuzix.org or another user. If that works suspect your\ncompiler.\n\nSome gcc 11 also blow up with\n\n````\n/tmp/ccjcB3zX.s: Assembler messages:\n/tmp/ccjcB3zX.s:525: Error: value -684 out of range\n/tmp/ccjcB3zX.s:525: Error: value of -684 too large for field of 1 byte at 969\n````\n\ngcc 12 seems to be ok\n"
        },
        {
          "name": "README.binfmt",
          "type": "blob",
          "size": 4.3798828125,
          "content": "32bit\n\nUses binfmt_flat with tiny tweaks to avoid loading Linux binaries for now.\n\n\n8bit\n\n\n16 byte header for current style binary. We try to reflect the general\npattern of naming in classic Unixlike systems\n\nThe 16 byte header is replaced by stubs. The syscall interface for most\n8bit processors is to jump to the start of the stubs. Relocations are\ndone by the application itself if required, except the 6502 where because\nof the ZP relocations this is not practicable.\n\nstruct exec {\n\tuint16_t a_magic;\n#define EXEC_MAGIC\t0x80A8\t\t/* Just need something to id with */\n\tuint8_t a_cpu;\n#define A_8080\t\t1\t\t/* 8080 series processors (and Z80) */\n#define A_6800\t\t2\t\t/* 6800 series */\n#define A_6502\t\t3\t\t/* 6502 */\n#define A_6809\t\t4\t\t/* 6809 */\n#define A_RABBIT\t5\t\t/* Rabbit is unZ80 enough to be its own */\n#define A_MSP340\t6\t\t/* MSP340 series */\n#define A_PDP11\t\t7\t\t/* PDP-11 */\n#define A_8086\t\t8\t\t/* x86 16bit */\n#define A_68000\t\t9\t\t/* 68000 32bit */\n#define A_NS32K\t\t10\t\t/* NS32K 32bit */\n\tuint8_t a_cpufeat;\n#define AF_8080_8085\t1\t\t/* Uses 8085 instructions */\n#define AF_8080_Z80\t2\t\t/* Uses legal Z80 instructions */\n#define AF_8080_Z180\t4\t\t/* Uses Z180 instructions */\n#define AF_8080_Z280\t8\t\t/* Uses Z280 instructions */\n#define AF_8080_EZ80\t16\t\t/* Uses EZ80 extensions */\n\n#define AF_6800_6803\t1\t\t/* PSHX etc */\n#define AF_6800_6303\t2\t\t/* XGDX and similar */\n#define AF_6800_68HC11\t4\t\t/* Y register and other extensions */\n\n#define AF_6C502\t1\t\t/* CMOS 6502 extra instructions */\n#define AF_65C816\t2\t\t/* Uses 65C816 instructions */\n#define AF_65C816_B0\t4\t\t/* 65C816 assuming bank 0 (so can use\n\t\t\t\t\t   stack relative addressing) */\n#define AF_65C02_BITOP\t8\t\t/* SMB/RMB/TSB/TRB/BBR */\n\n#define AF_6809_6309\t1\t\t/* 6309 extensions */\n\n#define AF_RABBIT_R3K\t1\t\t/* Uses Rabbit 3000 additions */\n\n\tuint8_t a_base;\t\t\t/* Load address page */\n\tuint8_t a_hints;\n#define HINT_GRAPHICS\t1\t\t/* Hint that this binary uses graphics */\n#define HINT_DEBUG\t2\t\t/* Debug data follows binary image */\n\tuint16_t a_text;\n\tuint16_t a_data;\n\tuint16_t a_bss;\n\tuint8_t a_entry;\t\t/* Entry point - 0-255 bytes in only */\n\t/* These are kept in pages */\n\tuint8_t a_size;\t\t\t/* Binary memory request 0 = all */\n\tuint8_t a_stack;\t\t/* Stack size hint */\n\tuint8_t a_zp;\t\t\t/* Zero/Direct page space required */\n\n\t/* This isn't really part of the header but a location fixed after\n\t   it */\n\t/* uint16_t a_sigvec; */\n};\n\n\nEntry Conditions & System Calls\n\n6502/65C816:\n\tC stack pointer configured in zero page (ZP:0/1 before relocations)\n\tC stack will be placed at the top of memory as normal (C and\n\tCPU stack are separate)\n\n\t6502 stack set to end of 6502 stack space (may not be $1FF)\n\n\tX holds high byte of load address\n\tA holds first zero page value allocated\n\tY undefined\n\n\tSignal vector helper code must be present at offset 16\n\n\tSystem calls via \n\tArguments on C stack (ZP:0 + base)\n\tX holds the syscall number\n\tY holds the number of arguments\n\n\tBehaves like a cc65 non fast call, so the syscall unstacks the\n\tpassed arguments\n\n\tReturns in YX with error code in A and Z clear if no error\n\n68000:\n\tA7 is set to the C stack\n\tCode is always relocated\n\tOther registers are undefined\n\n\tSystem calls:\n\n\t32bit pointer / 32bit int unlike smaller ports\n\n\ttrap 15 causes a SIGTRAP\n\n\ttrap14 (currently - may relocate this)\n\td0 = syscall\n\td1 = arg1\n\ta0 = arg2\n\ta1 = arg3\n\ta2 = arg4\n\n\tThe only register we guarantee to save is A5, thus anything using\n\tbase relative addressing needs to use A5 as the base because signal\n\thandling at the wrong moment may mean all other registers are\n\tundefined. This might seem a pain but it saves us a load of clocks!\n\n\treturn value is in d0.l and a0.l (for convenience)\n\terror code is in d1.w\n\n6809:\n\tS is set to the C stack\n\tX holds the load address\n\tother registers undefined\n\n\tExecution begins at first byte of loaded binary\n\tNo signal vector helper required\n\n\tSystem calls are via swi\n\tArguments on the caller stack, call number in D when swi\n\tCaller unstacks\n\n\tReturns error code in D, return in X\n\n8080/8085/Z80:\n\tSP is set to the C stack\n\tDE holds the load address\n\n\tSystem calls:\n\tOn Z80 IX, IY and alternate registers are saved except AF' which\n\tmay be destroyed\n\n\tOn entry userspace stack holds the syscall arguments\n\tOn return HL holds the return value and carry is clear\n\tOn error return HL holds the error and carry is set\n\n\tSignal vector helper will be present at offset 16. This is needed\n\tfor ACK 8080 binaries but for current SDCC Z80 binaries it's just\n\n\tex de,hl\n\tjp (hl)\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.0029296875,
          "content": "** ENGINEERING WORK IN PROGRESS **\n\nThe Z80 side of the tree is currently moving to the new compiler including\nwork on the compiler, linker and kernel. Thus some bits of it require you\nhave absolutely bleeding edge pieces all around. I would suggest avoiding\nworking on this tree for Z80 stuff right now. Non Z80 should be just fine.\n\n**FuzixOS**: Because Small Is Beautiful\n\nThis is the initial public tree for the FuzixOS project. It is not yet useful although you can build and boot it and run\ntest application code. A lot of work is needed on the utilities and libraries.\n\n# FUZIX\n\nFUZIX is a fusion of various elements from the assorted UZI forks and\nbranches beaten together into some kind of semi-coherent platform and then\nextended from V7 to somewhere in the SYS3 to SYS5.x world with bits of POSIX\nthrown in for good measure. Various learnings and tricks from ELKS and from\nOMU also got blended in\n\n# Pre-built images\n\nSome pre-built filesystems are now available on www.fuzix.org, and other\nimages should follow in time.\n\n# Supporting Fuzix\n\nAs this gets asked a bit. The best way to support Fuzix is to contribute\ncode and/or docs. It's really an art project in computing. \n\nIf you want to spend money then please just buy a homeless person a pizza or a\ncoat or something like that. If you are changing electricity suppliers in the\nUK to Octopus then signing up through this link gets both of us £50. Not an\nendorsement, Octopus merely suck less than other UK energy suppliers.\n\nhttps://share.octopus.energy/amber-calf-514\n\n## Tools\n\nFor the 6800, 8080, 8085, Z80 and Z180 the code is now built with the Fuzix C\nCompiler and Bintools which are also in github. See instructions for\nbuilding them. Some kernels still need the customised SDCC 3.8 from from\nthis github. 65C816 and Z8 are a work in progress moving to this compiler.\n\n6502 is currently built with cc65 and a distribution version should work.\n\n6303/6803 are built with CC6303 (again in this github)\n\n6809 is built with lwtools and the including gcc fork.\n\nOther targets use gcc variants. See the target specific information.\n\n## What does FUZIX have over UZI\n\n* Support for multiple processes in banked memory (as per UZI180) but\n\twith Minix style chmem and efficient use of bank allocations.\n* Support for multiple processes via hard disk or non mappable RAM\n    drive switching (as per UZI, UZIX).\n* Support for \"real\" swapping combined with banked memory.\n* Proper sane off_t and lseek\n* Normal dev_t\n* 30 character filenames\n* Proper sane time_t\n* System 5 signals\n* Posix termios (does all the original UZI tty did but much can be added)\n* Blocking on carrier for terminals\n* Optimisations to avoid bogus uarea copying compared to UZI180\n* More modern system call API: 3 argument open, mkdir, rmdir, rename,\n\tchroot (with correct .. semantics), fchdir, fchmod, fchown, fstat,\n\tfcntl, setpgrp, sighold and friends, waitpid, setpgrp, nice\n\tO_NDELAY, O_CLOEXEC, F_SETFL, F_DUPFD etc\n* Address validation checks on all syscall copies\n* Builds with a modern ANSI C compiler (SDCC)\n* Kernel boots to userspace on 6303, 6502, 65C816, 6800, 68000, 6803, 6809, 68HC11, 8080, 8085, arm32, esp8266, MSP430 (bitrotted) and eZ80/Z80/Z180\n* Core code can be built for 6303, 6502, 65C816, 68000, 6800, 6803, 6809, 68HC11, 8080, 8085, 8086, arm32, esp8266, MSP430, pdp11, rabbit r2k/r3k and eZ80/Z80/Z180 so should be far more portable\n* Core architecture designed to support building and maintaining\n\tmultiple target machines without forking each one\n* Helpers to make many bits of implementation wrappers to core code\n* Lots more bugs right now\n\n## What does UZI have over FUZIX\n\n* Can run in 64K of RAM (32K kernel/32K user). FUZIX needs\n\tbanked ROM or similar to pull this off. If you have banked\n\tROM then our kernel footprint in RAM is about 8K plus userspace\n\tplus any framebuffers and similar overhead. On a 6809 it's just\n\tabout possible to run in a straight 64K\n\n## What do the UZI branches have that FUZIX has not yet integrated\n\n* Symbolic links (UZIX)\n* Various clever fusions of syscalls that may save a few bytes\n\t(UZIX)\n* setprio (UZIX)\n* Rather crude loadable drivers (UZIX)\n* Use of __naked and __asm for Z80 specific bits to avoid more\n\t.S files than are needed (UMZIX)\n\nPlus OMU has a really clever function passing trick for open/creat and\nfriends, while UMZIX has a neat unified \"make anything\" function.\n\n## What Key Features Are Missing Still\n\n* ptrace, most of ulimit\n* root reserved disk blocks\n* banked executables\n* TCP/IP (in progress)\n* select/poll() (in progress)\n* Support for > 32MB filesystems (but first figure out how to fsck\n\ta giant fs on a slow 8bit micro!)\n* Smarter scheduler\n* Optimisations for disk block/inode allocator (2.11BSD)\n\n## Tool Issues\n\n* 6809 gcc and cc65 don't have long long 64bit (for sane time_t)\n* None of the above have an O88 style common sequence compressor\n* CC65 can't handle larger objects on stack, and lacks float support\n* We need a 'proper' 65C816 C compiler\n\n[travis-image]: https://travis-ci.org/EtchedPixels/FUZIX.png?branch=master\n[travis-url]: https://travis-ci.org/EtchedPixels/FUZIX\n"
        },
        {
          "name": "ReleaseNotes-0.3.md",
          "type": "blob",
          "size": 9.7470703125,
          "content": "# Fuzix 0.3 Release Notes\n\nFuzix 0.3 is the third major release of the Fuzix OS. This release has mostly\nbeen focussed upon kernel improvements and supporting more platforms,\nparticularly ZX Spectrum derived ones. The 68000 code base is now usable\nbut not entirely debugged and optimized. 8080 and 8085 support has been added.\n\n## Documentation\n\nThere is now a documentation directory and rules to build it\ninto something. It's still very incomplete and badly formatted\n\n## Warning\n\nFuzix 0.4 will break ABI compatibility big time. There are a pile of bad\nand historic design decisions and behaviours that need to be dealt with.\n\n\n## User Space Changes:\n\nNew Commands: tty, vile, sok, fweeplet (Zork engine), fsh (sh with editing)\nMain Improved commands:\n\tcp,mv,ln now taken from Heirloom so full Unix style commands\n\tdd can use stdin/stdout\n\tfweep now generally available\n\tsh now correctly handles out of memory\n\tucp now behaves correctly if you ls a file.\n\tsort is now based on a different smaller codebase.\n\tfsck check on a clean file system is much faster.\n\n\n## Behavioural Changes:\n- Some systems had fd first not hd first. This has been unified so on\n  platforms where 0 was fd0, it's now 256 and hda is 0. If you use the fd\n  or hd names at boot prompts then it's not visible\n\n## Systems Added\n\n- Amstrad PCW 8256 with CF adapter (minimal early port)\n- Bill Shen\n--\tSBC64/MBC64\n--\tSimple80 (in test)\n--\tTiny68K (for 68K development - very glitchy still)\n- Cromemco with 16FDC and 8\" disks\n- Easy-Z80\n- Grant Searle Z80 CP/M design with small modifications\n- Linc80 with extra 16K RAM card\n- Pentagon 1024 with NemoIDE\n- RC2014 with 6502 Processor (emulation only board debug in process)\n- RC2014 with 8085 Processor\n- Sam Coupe (minimal port only at this point), Atomlite IDE\n- Small Computer Central\n--\tSC108\tZ80 128K RAM, CF\n--\tSC111\tZ180, 512K RAM, CF\n--\tSC114\tZ80 128K RAM, CF\n- SBC2G (Grant Searle style system with banked memory)\n- Scorpion with NemoIDE\n- Scrumpel (Z180)\n- SmallZ80\n- Timex TC2068/TS2068 with DivIDE and Fuzix on a cartridge\n- Tom's SBC (with small mods)\n- Video Genie with EG64B banker (and in theory TRS80 + Lubomir soft banker)\n- Z80-MBC2\n- Z80 Membership card\n- ZX Spectrum 128K with DivIDE or DivMMC\n- ZX Spectrum +3 with ZXMMC or similar\n\n## Existing Supported Systems\n\n- Amstrad NC100 with 1MB SRAM card\n- Amstrad NC200 with 1MB SRAM card and floppy disk drive\n- Dragon 32/64 with Spinx or MOOH cartridge\n- DX Designs P112 with 1MB RAM and G-IDE\n- EACA Video Genie (with suitable banked memory)\n- LNW Research LNW80 with suitable banked memory (TRS80 Model 1 compatible bits)\n- Memotech MTX512 with SDX disk (no Rememorizer or Rememotech support)\n- Microbee 256TC or Premium with 128K+ RAM and ideally hard disk\n- Multicomp09 with at least 128K RAM\n- RBC(*) Mark IV with optional PropIO V2\n- RBC(*) SBC v2 with optional PPIDE and/or PropIO V2\n- RC2014 SBC with 512K ROM/RAM, CF, SIO and RTC\n- RC2014 SBC with banked ROM, 64K RAM, CF, SIO and RTC\n- SOCZ80 (128MHz FPGA Z80 platform)\n- Tandy COCO2 with Cloud 9 IDE, or COCOSDC card and Fuzix partly in cartridge\n- Tandy COCO3 with suitable disk interface\n- TRS80 Model I/III with a hard disk and a supported banked RAM expansion\n- TRS80 Model 4/4D/4P 128K RAM\n -Zeta\n- Zeta V2\n\n(*) Formerly N8VEM now RBC (RetroBrewComputers)\n\n## Incomplete Ports\n\n- Apple IIc\t-\tinitial investigations\n- Atari ST\t-\tin progress\n- EZRetro\t\t-\tminimal development port for ez80\n- Gemini\t\t-\tearly design\n- Lucas Nascom\t-\tearly design\n- MSX1\t\t-\tworks in very limited configuration only\n- Pentagon\t-\tneeds the 0.4 ABI changes to be possible\n- ZX Uno\t-\tfor now run the 128K ZX Spectrum version as this also\n\t\t\tknows about some Uno features\n- Z80BIOS\t-\texperiment to see if things like S100 can be supported\n\t\t\tby having a Z80 BIOS akin to the CP/M BIOS etc.\n- Z280RC/ZZ80RC\t-\tearly sketches\n\n\n## New Virtual Platforms (Emulation Platforms For Fun or Development)\n\n- v8080\t\t-\t8080 development environment\n- v85\t\t-\t8085 development environment\n\n## Existing Virtual Platforms\n\n- V65C816\t\t-\t65C816 emulation work\n- V68\t\t-\t68000 development work\n- Z80Pack\t\t-\tVery flexible Z80 banked system emulator\n\n## Obsolete\n\n- MSX2\t\t-\tneeds a major rework and clean up\n\n## Major Changes To Existing Platforms\n\n- Dragon-MOOH\t-\tnow it's own port with full MOOH paging support.\n- MTX\t\t-\tsupport for CFX-I CFX-II, some rememorize support, base MTXPlus support, extra keys on PC adapter. Lots of bug fixes.\n\n## The Library/Application support has been built for\n\n- 6502\t\t\tno FP\n- 65C816\t\t\tno FP, using 6502 modes\n- 6809\t\t\tFP needs debug\n- 68000\t\t\tFP needs debug\n- 68HC11\t\t\ttest only\n- 8086\t\t\ttest only\n- MSP430X\n- NS32k\t\t\ttest only\n- PDP11\t\t\ttest only\n- Rabbit2000\t\ttest only\n- Z80\n- Z180\n- eZ80\t\t\tneeds a very recent SDCC\n\n## Core Changes\n\n- New memory banking model for 16K banks with a fixed common\n- Timer handling optimized massively.\n- Correct handling of platforms with an optional RTC when it is not present\n  (previously clock would drift or not run)\n- Correct problems if the console had carrier detect and could be hung up\n- Fix races in carrier and hangup logic\n- Clear error bits correctly on Z80 SIO\n- Printer ioctls added\n- 6502 platform support now complete including signal handling\n- eZ80 support\n- Z80 memory model support for machines with no usable common RAM\n- Z80 switch to a software interrupt disable tracker rather than doing the expensive NMOS Z80 workaround\n- Z80 memory model support for 32K/32K split\n- 8080/85 platform support complete\n- 68000 flat memory model\n- /dev/sys ioctl framework for platform / cpu specific ioctls\n- Unified lots of drivewire code\n- Support for \"swapon\"\n- Single process in memory systems not run parent first after fork. That usually means that we hit waitpid() and avoids an extra set of swaps.\n- Base support for Z180 CPU dropped into a Z80 environment\n- Clock set from root fs superblock timestamp on start up. This avoids clocks going backwards and usually means the date is right when you boot and get asked.\n- Use uint_fast8_t for platforms where uint8_t is slow, or the compiler sucks at handling them.\n- Move repeated swap helper into partition code.\n- udata offsets are now properly offsets of a symbol so it isn't repeated in kernel.def and can't end up wrong.\n- Support byte-swapped IDE\n- Termios masking in the core code to make termios handling in drivers easier\n\nBug Fixes\n- Z80 handling of NULL trap no longer crashes the system\n- Fix crash case where we could swap out a zombie process\n- Fixed some confusion around di and int_disabled state when making calls to banking code. A more general fixup will happen in 0.4\n- Microbeee totally mishandled memory banking but happened to sort of work. The bank rules are now corrected.\n- A failed fork corrupted memory.\n- Correct various problems with '..' transition introduced in older changes\n- Lots of platforms mishandled buffer reclaim of spare memory. Correct this and extract the code where possible.\n- Fix a tty and pre-emption deadlock\n- corrected bugs in valaddr() range checking\n- Fixed termios handling bugs in init\n- Fixed 5bit wide character default bug in boot up\n- cpuinfo no longer faults on Z180\n\nLibrary Fixes\n\n- isatty is much cleaner and simpler\n- ttyname is usually much faster\n- device name finding routines sped up a lot for the usual case\n- 6809 double is 4 bytes not 8.\n- curses handling of ROWS/COLS fixed also of wgetch(). ERR is now -1 so control-A is not confused.\n- New mini readline library\n\n\t\t\t\t---------\n\n\n\t\t\tFuzix 0.2 Release Notes\n\nFuzix 0.2 is the second major release of the Fuzix OS. The primary focus has\nbeen completing the core C library functionality. Applications have also been\nupdated and the kernel has a considerable number of bugs fixed and new\nplatforms.\n\nSupported Hardware\n\nAmstrad NC100 with 1MB SRAM card\nAmstrad NC200 with 1MB SRAM card and floppy disk drive\nDragon 32/64 with Spinx or MOOH cartridge\nDX Designs P112 with 1MB RAM and G-IDE\nEACA Video Genie (with suitable banked memory)\nLNW Research LNW80 with suitable banked memory (TRS80 Model 1 compatible bits)\nMemotech MTX512 with SDX disk (no Rememorizer or Rememotech support)\nMicrobee 256TC or Premium with 128K+ RAM and ideally hard disk\nMSX2 + MegaFlashROM with SD\nMulticomp09 with at least 128K RAM\nRBC(*) Mark IV with optional PropIO V2\nRBC(*) SBC v2 with optional PPIDE and/or PropIO V2\nRC2014 SBC with 512K ROM/RAM, CF, SIO and RTC\nRC2014 SBC with banked ROM, 64K RAM, CF, SIO and RTC\nSOCZ80 (128MHz FPGA Z80 platform)\nTandy COCO2 with Cloud 9 IDE, or COCOSDC card and Fuzix partly in cartridge\nTandy COCO3 with suitable disk interface\nTRS80 Model I/III with a hard disk and a supported banked RAM expansion\nTRS80 Model 4/4D/4P 128K RAM\nZeta\nZeta V2\n\n(*) Formerly N8VEM now RBC (RetroBrewComputers)\n\nVirtual Platforms (Emulation Platforms For Fun or Development)\n\nV65C816\t\t-\t65C816 emulation work\nV68\t\t-\t68000 development work\nZ80Pack\t\t-\tVery flexible Z80 banked system emulator\n\nObsolete/Dropped Platforms\n\nMSP430FR5969 - bitrotted\nMSX1 with MegaMem - bitrotted\nTGL6502 - project died\nZX128 (Spectrum 128K etc) - too difficult to make work well\n\nIncomplete Ports\n\n-Amstrad PCW8256/8512/9256/9512/10\n-Apple IIc\n-Cromemco\n-Dragon 32/64 MOOH (full MOOH support, use the Spinx/Mooh port for now)\n-Gemini\n-Lucas Nascom\n-Sam Coupe\n-SC108 (port complete for proposed hardware)\n-V65 (Virtual 6502 development platform)\n-Video Genie with EG64\n-Z280RC\n\n\nThe Library/Application support has been built for\n6502\t\t\tno FP\n65C816\t\t\tno FP, using 6502 modes\n6809\t\t\tFP needs debug\n68000\t\t\tFP needs debug\n68HC11\t\t\ttest only\n8086\t\t\ttest only\nMSP430X\nPDP11\t\t\ttest only\nRabbit2000\t\ttest only\nZ80\nZ180\n\n\n\nChanges From 0.2 to 0.2.1\n\no\tFixed a bug where zombies got swapped in error. Fixes the TRS80\n\thang at the date prompt\no\tFixed a warning about banking fixups on the Model1\no\tBetter debugging in swap.c\no\tBetter debugging in binmunge\no\tRemembered to add the release notes!\n\nChanges from 0.2.1 to 0.2.2\n\no\tSpell MOOH correctly\n"
        },
        {
          "name": "ReleaseNotes.md",
          "type": "blob",
          "size": 19.4580078125,
          "content": "# Fuzix 0.4 Release Notes\n\n** Work in progress as we move towards a release candidate **\n\n## Overview Of Changes\n\nThe core of the Fuzix kernel remains much the same for this release. A\nnumber of bugs have been fixed and some interfaces improved. The networking\nlayer has been completely reworked to be more modular so that in future it\ncan run in a different address space to the kenel on 8bit machines.\n\nExecutable formats have changed. The 8080, 8085 and Z80 binary formats are\nnow properly unified so that 8085 and Z80 can run 8080 binaries directly.\nThe 68HC11 and 6803 formats are somewhat different but the syscall ABI is\narranged so that the 68HC11 can run 6803 binaries.\n\nThe 32bit binaries that were using a bodged Linux binflt format are now\nusing a.out with some small extensions to handle the relocation maps. This\nshould hopefully now become a stable executable format for the future.\n\nBuilding has, where possible, been made easier. The tool chains remain a bit\nof pain because of the fact many are somewhat obscure, and those that are\nnot tend to get broken on a regular basis forcing specific releases to be\nused. The actual system build however now has a \"make diskimage\" target that\nputs together all the pieces for a bootable system in one go rather than\nrequiring the builder understands the finer details of the system in\nquestion and how to merge all the pieces together.\n\nThe make environment is much better than it was. It is still terrible\nhowever so a \"make clean\" is needed when switching processors and a \"make\nkclean\" is strongly recommended when tweaking any kernel config options or\nswitching target. A lot of the make rules have been merged which should make\nthe problem of sorting out all the rules and dependencies more tractable for\n0.5.\n\n## Naming Changes\n\nThe N8VEM project rebranded as 'Retrobrew' at the request of its founder who\nhad ceased to be so involved. The 0.3 release fixed most N8VEM naming, 0.4\ncompletes this.\n\nThere is now a distinction between RC2014 (the product line) and RCbus (the\nbus standard). In particular the bus has been extended beyond the original\nconcept and now has its own standard document and keepers. Fuzix should now\nonly use the 'RC2014' nomenclature for official RC2014 products but there\nmay be a few that have been missed. Systems that were previously rc2014-xyz\nare now rcbus-xyz.\n\n## Dropped Systems For Now\n\n- Pentagon\n- Pentagon 1024\n- Scorpion\n\nNone of the testers for this work are currently available.\n\n## Not Tested (even on emulator)\n\n- P112 (no working emulator, no access to machine)\n- SocZ80 (no emulator, need to fix system)\n\n## Supported Processors\n\n### 6303 / 6803\n\nHitachi 6303 and Motorola 6803 processors. These are supported by the CC68\ncompiler chain and tools derived from cc65 and specifically designed for\nFuzxi. Currently the only target board is the rcbus 6803/6303 processor\ncard. Floating point is not supported, but adding it would only require\nsomeone writes the basic underlying soft fp routines (add, subtract etc).\n\nOther targets should not be hard to add.\n\n### 6502 / 65C02 / 65C816\n\nThese are supported by cc65 (v2.18 or later). Due to compiler limits floating\npoint is not supported. 65C816 is treated as a 65C02 with extras because of\nthe lack of an open 65C816 compiler.\n\nCurrently this port targets the RCbus 65C02/65C816 cards and the PZ1. Most\nof the \"classic\" 6502 systems have neither the memory or the I/O, and in\nmost cases even when they are upgraded with some of the late era processor\nupgrades still lack decent I/O.\n\n### 6809\n\nThis port uses gcc 6809 and lwtools. It supports a range of classic and\nmodern systems including Dragon, Tandy COCO, Thomson and RCBus machines. You\nmay need to use an old lwtools (eg 4.13) if using a modern lwtoools and it\nreports a segmentation fault or similar from lwasm.\n\n### 68HC11\n\nThe final generation of the 6800 processor line this port uses gcc and has a\nvery different ABI to the 6800/6803. It can run 6800 and 6803 binaries\nhowever, but not 6303. At the moment this port targets the Mini11 SBC and\nthe RCbus 68HC11 card.\n\n### 68000\n\nMotorola 68000 series processors with flat memory space. The port is now a\nlot more stable and has a sensible binary format. Processors up to 68EC020\nare catered for. An additional memory model has been added for systems with\nlow memory and it is now just about possible to run Fuzix on a 128K system\nwithout relying on fast disks. GCC and binutils need to be built in a\nparticular way for pre 68020 processors otherwise they will insert\nunsupported instructions. See the README for 68000.\n\n### 8080\n\nThe 8080 is supported using the Fuziz C compiler. This is a new compiler so\nthere may be a few bugs left to shake out.\n\n### 8085\n\nThis port now uses the full 8085 instruction set (including the stuff Intel\ndecided to not to document). It uses a new compiler built specifically for\nFuzix. This port is thus currently a little bit flaky and there are tool and\nsystem bugs to nail down. Performance is several times faster than the pure\n8080 build as the extra instructions make a huge difference when executing\nhigh level languages. Floating point is not yet supported as it needs the\nbase low level FP routines for 8085 writing\n\nThe supported target is the rcbus 8085 card with onboard bank MMU.\n\n### ARM\n\nARM M0 is supported using gcc and targetting the Raspberry Pi Pico. ARM M4\ntargets for the DK-TM4C129X and EK-TM4C129X.\n\n### ESP8266\n\nThis target is specific to the ESP8266 variant of the Tensilica L106.\n\n### NS32K\n\nA complete port for MMUless NS32K processors. This port is new as of 0.4. It\ntargets the in-progress RCbus NS32FX16 processor card design.\n\n## Z80 / Z180 / 64180 / Z84C1X\n\nThese processors are all supported by the main tree using a fork of SDCC\n3.8. The newer SDCC changes a lot of calling conventions so no move to it\nhas been made at this point. That may change in the future.\n\nSupporting code libraries make most flat Z180 systems trivial and provide\nall the mapping and peripheral support.\n\n## Other Processors\n\nThese are processors which are in the tree but not yet fully functional. In\nsome cases this is merely used to help catch portability problems in the\nlibraries.\n\n### 6800\n\nWork in progress to extend CC68 and Fuzix to the original 6800/6808\nprocessor line. Not yet usable\n\n### 8086/8088/80C188/80C186\n\nThis is currently just the base sketches for a future PC and Rcbus-80C188\nport.\n\n### ESP32\n\nAn initial experimental port only\n\n### EZ80\n\nInitial support for booting on an ez80 based platform. In this case the Jee\nRetro development platform. This should form a good basis for enabling any\nother ez80 platform, but none have been enabled yet.\n\n### MSP430X\n\nRetired\n\n### PDP11\n\nTracking the state of the GCC PDP11 compiler and binutils. Not yet at a\npoint the toolchain works well enough.\n\n### Rabbit 2000/3000\n\nAt this point used as a build check on the user space. Hopefully some Rabbit\nboard enabling will happen during the 0.5 work.\n\n### RiscV 32\n\nTool chain testing and portability work. At the moment this is another\ncompiler chain that we break. In theory Fuzix should be able to run on some\nof the upcoming and recent RiscV micro-controllers with 128K or so of SRAM.\n\n### TMS9995\n\nThis target is being used to slowly debug the C compiler. Not a useable port\nas the compiler is still a fair way from working correctly.\n\n### WRX6\n\nWarrex CPU6. Being used for compiler debug but also on hold until the\ndocumentation of the system is in a better state to make progress.\n\n### Z280\n\nWork in progress. The Z280 is very Z80 like but the different privilege\nstructure and interrupt behaviour meand that for the Fuzix at least this\nwill need its own variant of the low level core code.\n\n## Supported Systems\n\nFor more details on each system consult the relevant README.md in that\nKernel/platform-xxxx directory. There are othee platforms but if not listed\nhere they are likely works in progress or special cases.\n\n### 2063\n\nJohn Winan's 2063-Retro system as featured in his \"John's Basement\" youtube\nseries. A fairly classic Z80 Retro system with somewhat slow bitbang SD card\ninterface.\n\nhttps://www.youtube.com/c/JohnsBasement\n\n### 68K-nano\n\nThe 68K nano design from Matt Sarnoff. A minimalist 68000 system with 16bit\nIDE interface. This makes a very nice and easy to build little Fuzix box.\n\nhttps://github.com/74hc595/68k-nano\n\n### Ampro Littleboard\n\nThe Ampro Littleboard was a classic Z80 CP/M board designed to be the same\nsize as a floppy disk. This port requires the Plus version of the board with\nSCSI controller.\n\n### Amstrad NC100\n\nAn pre-laptop portable word processing machine with PCMCIA slot.\n\n### Amstrad NC200\n\nThe sequel to the NC100 with a floppy drive and much nicer display.\n\n### CPM22\n\nA port that uses a customisation block plus the CP/M 2.2 BIOS. Intended to\nmake it practical to port Fuzix to systems like S.100 machines where the\nBIOS is basically the architecture and each machine tends to be a bit\nunique. If you need to port Fuzix to a platform and do not want to deal with\nthe Fuzix and C side of things this may be a good basis. At the moment it is\nvery basic, but easily extensible to cover other gaps in the CP/M BIOS.\n\n### COCO2\n\nSupport for the Tandy COCO2 with 64K RAM and CF or SD card adapter. The\nkernel is partly flashed onto a cartridge bank to make it all fit nicely.\nShould also work with a Dragon 64.\n\n### COCO3\n\nThe Tandy COCO3\n\n### Cromemco\n\nZ80 based system with 8\" floppy disk interface. The hard disk is not\ncurrently supported due to lack of documentation/example code.\n\n### DK-TM4C129X\n\nAn ARM development board.\n\n### Dragon 32\n\nThere are two ports specifically aimed at the Dragon machines. Each supports\none of Tormod Volden's SD and memory extensions - the NX and the later more\nfeatured MOOH. This port should, with the right build options, also work on\nCOCO machines with the same interface.\n\nhttp://tormod.me/mooh.html\n\n### Dyno\n\nA fairly generic flat memory Z180 retro system.\n\nhttps://homebrew.computer/dyno-computer/\n\n### Easy-Z80\n\nSergey Kiselev's EasyZ80. Very similar to the RCbus and RC2014 systems with\n512/512K RAM but integrated onto a single board with battery back up and\nalso IM2 interrupt mode support.\n\nhttps://github.com/skiselev/easy_z80\n\n### EK-TM4C129X\n\nAn ARM evaluation board.\n\n### ESP8266\n\nFuzix for the ExpressIf microcontroller. The onboard wireless is not\nsupported because a) it's not documented and b) we stole all the memory it\nuses and repurposed it. It does however support using a WizNet 5500 for\ninternet connectivity.\n\n### Genie EG64/3\n\nSupport for the Video Genie (aka Dick Smith System 80, PMC-80 etc)  with\nthe Genie EG64/3 CP/M adapter or the equivalent TRS80 Lubomir soft banker.\n\n### KC87\n\nRobotron KC87, KC85/1 and Z9001. Not the KC85/4. East German systems\nproduced by Robotron-Meßelektronik.\n\n### MB020\n\nA simple flat memory 68020 board by Bill Shen\n\nhttps://www.retrobrewcomputers.org/doku.php?id=builderpages:plasmo:mb020\n\n### Micro80\n\nA retro Z8C415 based machine using the single chip integrated Z80 and I/O.\n\n### Microbee\n\nThe classic Australian system yet almost unknown elsewhere. There are a long\nseries of these machines with growing power. At least 128K and some kind of\ndecent disk interface is required. Colour is recommended as the Fuzix kernel\ndoes not try and deal with video update flicker on the older video.\n\n### Mini11\n\nLow chip count 68HC11 SBC with 512K of RAM driven directly off a 68HC11, and\nthe upper address pins driven by the 68HC11 GPIO lines.\n\nhttps://github.com/EtchedPixels/Mini11\n\n### MSX\n\nThe are two MSX ports. The MSX1 port is a cartridge based port that can run\non any 64K mmeory machine with Sunrise style IDE. There is no support for\nthings like the MegaRAM at this point.\n\nThe MSX2 port requires V9938 or higher video, MSX2 style memory and at this\npoint a MegaFlashROM with SD card. There is no support for MSX1 systems with\nthe orignal video and MSX2 memory banking although that would be good to add.\n\n### MTX\n\nMemotech MTX512 with banked memory and suitable disk adapter. An obscure but\nrather beautiful British machine.\n\n### Multicomp09\n\nFPGA based retro system.\n\n### N8\n\nThe N8 is a fusion of Z180 retrocomputer and sort of not quite MSXish\nthings.\n\nhttps://www.retrobrewcomputers.org/doku.php?id=boards:sbc:n8:n8\n\n### P112\n\nDX Designs P112. An early 'retro' system using a Zilog ESCC.\n\n### PCW8256/512/9256/9512/10\n\nThe classic Amstrad wordprocessor / CP/M machine. Still somewhat of a work\nin progress. Note that the PCW16 is a completely different architecture and\nnot supported.\n\n### Pentagon\n\nEasten block ZX Spectrum clone. This port is targetted at systems with\n256/512K of RAM. For the 128K machines just use the 128K Spectrum targets\n\n### Pentagon 1024\n\nThe 1MB Pentagon with additional mapping capabilities\n\n### Pico68K\n\nA breadboard 68000 system using an ACIA and VIA plus bitbang SD card.\n\nhttps://hackaday.io/project/179200-68000-minimal-homebrew-computer\n\n### RBC Mark 4\n\nThe Retrobrew (formerly N8VEM) Mark 4. A Z180 based design for the ECB bus.\n\nhttps://www.retrobrewcomputers.org/doku.php?id=boards:sbc:z180_mark_iv:z180_mark_iv\n\nNote that 0.4 now requires RomWBW firmware.\n\n### RBC Mini M68K\n\nJohn Coffman's mini 68K system.\n\nhttps://www.retrobrewcomputers.org/doku.php?id=boards:ecb:mini-68k:start\n\n### RC2014\n\nThere are two Fuzix ports aimed at \"official\" RC2014 targets.\n\nThe RC2014 port requires a 512K RAM/ROM card and supports the bigger RC2014\nconfigurations along with a lot of other compatible RCBus hardware.\n\nThe RC2014-tiny port is a \"because we can\" port that puts the core of the\nFuzix kernel in the pageable ROM and pages it in and out in order to run\nFuzix on the 64K + pageable ROM setup. This works but isn't recommended.\nNote that you can (and should!) jumper the ROM card for a 28C256 not a\n27C256 part if you are doing this, that way you can quickly erase it and\nupdate it.\n\n### RCBus (Z80 and compatible)\n\nThe following RCbus compatible systems have their own ports referenced\nelsewhere in this document.\n\n- 2063 (with adapter)\n- Easy Z80\n- RIZ180\n- SC108\n- SC111\n- Simple80\n- T68KRC\n- ZRC\n\nThe SBC64/MBC64/ZRCC have their own rcbus-sbc64 target. In general the other\nZ80 boards are compatible and operate with the RC2014 tree. This knows how\nto handle Z180 processor cards with the banked memory card, and various\nvariant systems and I/O options.\n\nThe rcbus-z180 target handles the many near identical flat Z180 designs that\nuse the RCBus with a 512/512K flat 20bit memory space as well as the\nmodification sometimes used to allow for 1MB RAM.\n\n### RCBus (Other)\n\nThere are specific ports for RCbus systems with the following processors:\n6303 (and 6803), 6502, 6809, 8085, 68008, NS32K. The card requirements vary\nby port. Please consult the port documentation for detail.\n\n### Rhyophyre\n\nA Z180 SBC with uPD7220 GDC video. The video is not supported in Fuzix at\nthis time.\n\nhttps://github.com/lynchaj/rhyophyre\n\n### RIZ180\n\nA minimal system Z180 design by Bill Shen\n\nhttps://www.retrobrewcomputers.org/doku.php?id=builderpages:plasmo:riz180:riz180r1\n\n### Raspberry Pi Pico\n\nSupport for the Pi Pico embedded ARM board\n\n### Sam Coupe\n\nA \"super ZX Spectrum\" machine that proved to be too little, too late to\nsurvive the shift away from 8bit home computers.\n\n### SBC 2G\n\nA banked memory design that draws heavily on Grant Searle's machine.\n\n### SBC v2\n\nRetrobrew SBC v2. Z80 base ECB bus card with simple banked memory. This\ntarget is documented heavily and is designed to be a reference for anyone\ntrying to understand how to port Fuzix.\n\n### SC108\n\nSmall Computer Central design with CPU, RAM and OM on one card.\n\nhttps://smallcomputercentral.com/sc108-z80-processor-rc2014/\n\n### SC111\n\nSmall Computer Central Z180 design. This tree has been kept apart from the\nunification of various related Z180 RCbus systems because it also supports\nthe ability to boot from SCM firmware. With RomWBW firmware the SC111 can\nrun either.\n\nhttps://smallcomputercentral.com/sc111-z180-cpu-module-rc2014/\n\n### Scorpion\n\nAnother Eastern block ZX Spectrum clone that differs somewhat from the\nPentagon designs.\n\n### Searle\n\nFuzix for a slightly modified version of the Grant Searle classic design.\nThe modifications consist of a single wire and resistor mod to use the full\n128K of RAM and a tweak to allow an external timer to provide a timer tick.\n\n### Sinclair ZX Spectrum\n\nThere are multiple ports for the variants of this system. For the clones and\nnot quite compatible systems please see\n- Pentagon\n- Pentagon 1024\n- Scorpion\n- TC2068\n\nThe following configurations have ports\n\n#### 128K or later with DivIDE/DivMMC\n\nThis port uses the DivIDE/DivMMC memory in low space in order to run Fuzix\non the Spectrum systems that lack the ability to map RAM low directly. This\nport also knows about the ZX-Uno extensions and will use them.\n\n### 128K or later with SpectraNet and a disk controller\n\nSimilar to the DivIDE/DivMMC this port uses the SpectraNet memory in the\nsame way, and needs a disk controller such as a ZX-MMC to go with it.\n\n### +2A or +3 with ZX-MMC or similar disk controller\n\nUsing the additional memory features on the +2A and +3 machines in order to\ndo rather better memory banking.\n\n### Simple80\n\nBill Shen's glueless Z80 minimal design. Requires either a rev1 board or a\nsmall board mod to correct the memory banking error in the original.\n\nhttps://www.retrobrewcomputers.org/doku.php?id=builderpages:plasmo:simple80\n\n### SmallZ80\n\nTG Consulting Z80 system\n\n### SocZ80\n\nHigh speed FPGA based Z80 (T80) platform. Runs at 128MHz and supports 8MB of\nRAM.\n\nhttps://sowerbutts.com/socz80/\n\n### TC2068\n\nTimex reworking of the Sinclair ZX Spectrum. Incompatible, buggy and a bit\nof a flop. It does however have support for RAM/ROM cartridges and has a\nnice 512 pixel wide video mode.\n\n### Tiny68K / T68KRC\n\nA 68000 based system with 16MB of RAM and a CF interface. The T68KRC has\nless RAM but an RCbus connector. Both are supported.\n\n### TO8\n\nThomson TO8. An initial port to the TO8 platform.\n\n### Tom's SBC\n\nZ80 retro computer design with banked EPROM and 64K (or 128K with mod) RAM.\nFuzix can run from banked EPROM for a ROM based system or from RAM with the\n128K modifier.\n\n### TRS80\n\nTandy model 1 and model 3 systems (and clones) with an Alpha Supermem or Selector are\nsupported along with the Model 4. The 128K model 4 is supported without a\nmemory extender although the Dave Huffman style mod is supported. The XLR8R\nis not directly supported at this time.\n\n### VZ200\n\nVTech Laser 200 with the SDDrive adapter.\n\n### YAZ180\n\nYet another Z180 system.\n\nhttps://github.com/feilipu/yaz180\n\n### Z1013\n\nAn Easten block design and probably candidate for 'worst home computer\nkeyboard ever shipped'. Fuzix supports a suitable configuration which in\npractice probably means the modern re-creation.\n\n### Z50Bus\n\nFor all practical purposes the Z50Bus systems except the Linc80 are software\nequivalent to the RCbus ones and use the same kernel. The Linc80 has its own\nport but that requires building a DIY memory expansion.\n\n### Z80 MBC-2\n\nA small Z80 based system with an Arduino I/O subsystem.\n\n### Z80 Membership Card\n\nSunrise EV stackable retrocomputer. Fuzix requires the CPU/RAM/SD card\ncombination.\n\nhttp://www.sunrise-ev.com/z80.htm\n\n### Z80Pack\n\nZ80 emulated CP/M platform. Useful for debugging and development purposes.\n\nhttps://www.autometer.de/unix4fun/z80pack/\n\n### Z80Retro\n\nPeter Wilson's Z80 Retro design\n\nhttps://github.com/peterw8102/Z80-Retro\n\n### Zeta V2\n\nSregey's floppy disks sized Z80 system with banked memory, PPIDE and floppy\ncontroller.\n\nhttp://www.malinov.com/Home/sergeys-projects/zeta-sbc-v2\n\n### ZRC\n\nBill Shen's ZRC. A minimal Z80 system using a CPLD. The machine has 2MB of\nDRAM. Fuzix has no idea at this point how to use it all because it's not\nclear what you need 2MB for on a small Z80 system with no graphics.\n\nhttps://www.retrobrewcomputers.org/doku.php?id=builderpages:plasmo:zrc\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.953125,
          "content": "# Fuzix Security Policy\n\nThis is very simple. The code runs on MMUless, protectionless mostly 8bit machines\nso there is none. Things like Unix file permissions exist help users avoid\naccidents.\n\nSomewhat ridiculous to have to say this but apparently neccessary.\n\n## Things That Are Security Relevant\n\n- Problems in build and standalone tools run on an actually secure system whilst building Fuzix.\n- Bugs in network exposed code that are exploitable without any kind of login.\n\n## Things That Are Merely Bugs or Irrelevant\n\n- Stuff that crashes, exploits or otherwise makes apps misbehave\n- The fact you can trivially write programs that do anything.\n\nApp misbeaviours we care about but as bugs not security holes so please do\nreport them and post fixes. If you have something which applies to Fuzix as\na bug and to other protected mode systems as a security hole then please\nfile a bug but feel free to do it after fixing and disclosure on systems\nwhere it actually matters.\n"
        },
        {
          "name": "STATUS.md",
          "type": "blob",
          "size": 7.44921875,
          "content": "# Status of 0.5 Work\n\n## Move 8080 and 8085 to Fuzix C Compiler\n\nAll targets completed. Userspace also moved. No relocatable binaries (as\nbefore). Can build applications natively.\n\n## Move Z80 To Fuzix C Compiler\n\nUserspace entirely moved. Binaries relocatable as before. Need to move to\na better relocation solution for doing dynamic object modules.\n\nSwitched to the latest updates to the compiler and bintools kits. These put\neverything in a sensibly laid out location.\n\n### Completed\n\n- Nascom\n- RC2014-Tiny\n- SBC2G\n- SBCv2\n- SC720\n- Searle (and related)\n- Simple80\n- Tom's SBC (RAM based)\n- Z1013\n- Z80 MBC2\n- Z80 Membership Card\n- Z80Pack\n- ZRC\n\n### In Progress\n\n- Zeta V2\n\n### To Complete\n\nSome of these need an assembly macro expander adding, others need banking\nsupported added to the compiler and linker. For now they rely on the\nmodified SDCC 3.8 for building the kernel\n\n#### Needs macro expander\n- 2063\n- Ampro Littleboard\n- Cromemco\n- Easy Z80\n- Linc80\n- Micro80\n- Z80Retro\n\n#### Needs banking\n- KC87\n- Pentagon\n- Pentagon 1024\n- RC2014\n- Scorpion\n- Tom's SBC (ROM)\n- TRS80 model I/III\n- VZ200\n- ZX Spectrum with DIVMMC/DIVIDE\n\n#### Other\n- Amstrad NC series\n- CP/M 2.2\n- Dyno\n- EZRetro\n- Genie EG64\n- JeeRetro\n- MSX1\n- MSX2\n- Memotech MTX\n- N8\n- P112\n- PCW8256\n- RBC Mark 4\n- RCBUS SBC64\n- RCBUS Z180\n- Rhyophyre\n- RIZ180\n- SAM Coupe\n- SC108\n- SC111\n- Scrumpel\n- SmallZ80\n- SocZ80\n- TC2068\n- TRS80 model 4\n- ubee (Microbee)\n- YAZ180\n- Z180ITX\n- ZX Spectrum +3\n- ZX Uno\n\n### Work In Progress\n\nThese platforms are unfinished experimental work anyway\n\n- Adam (converted)\n- C128 Z80\n- Gemini\n- Genie IIs\n- VZ700\n- Z280RC\n- Z80 BIOS\n- ZX Spectrum 48K with extended DIVMMC/IDE\n- ZX Evolution\n- ZX Spectrum with SpectraNet\n\n# Target Status\n\nLast updated 2024/07/04\n\n## 2063\n\nBuilds, passes basic tests\n\n## 68KNano\n\nPasses basic tests.\n\n## Adam\n\nWork in progress, not targetted for 0.5\n\n## AmproLb (Ampro Littleboard)\n\nPasses basic tests.\n\n## Amstrad NC100\n\nPasses basic tests\n\n## Amstrad NC200\n\nPasses basic tests\n\n## AppleIIe\n\nLong term project - probably needs a better compiler. Not for 0.5\n\n## Atari ST\n\nEarly 68K work. Now core 68K is stable can be resurrected. Probably not for\n0.5\n\n## C128-Z80\n\nEarly experiments, broke VICE so on hold\n\n## Centurion\n\nEarly work in progress\n\n## Challenger III\n\nBuilds, needs a 0.5 test run\n\n## COCO2 (64K, no cartridge)\n\nBuilds, passes basic tests.\n\n## COCO2Cart (64K with cartridge ROM)\n\nPasses basic tests\n\n## COCO3\n\nBuilds, passes basic tests\n\n## CPM22\n\nExperimental only.\n\n## CROMEMCO\n\nPasses basic tests\n\n## Dragon (MOOH)\n\nPasses basic tests\n\n## Dragon (NX32)\n\nPasses basic tests\n\n## Dyno\n\nPasses basic tests\n\n## Easy-Z80\n\nPasses basic tests\n\n## ESP32\n\nEarly WIP only\n\n## ESP8266\n\nBuilds, testing pending\n\n## EZRetro\n\nBuilds, not tested\n\n## Gemini\n\nEarly WIP, probably not for 0.5\n\n## Geneve\n\nEarly WIP for TMS99xx. Needs compiler fixes and more yet\n\n## Genie-EG64\n\nBuilds, passes basic tests\n\n## IBMPC\n\nEarly sketches only\n\n## JackRabbit\n\nEarly sketches only\n\n## JeeRetro\n\nBuilds, not tested\n\n## KC87\n\nBuilds, passes basic tests\n\n## LINC80\n\nBuilds, passes basic tests\n\n## LOBO-MAX 80\n\nBuilds, passes basic tests\n\n## MB020 (Plasmo)\n\nBuilds, passes basic tests \n\n## Micro80 (Plasmo)\n\nBuilds, passes basic tests\n\n## Mini11 (Etched Pixels)\n\nBuilds, passes basic tests\n\n## MO6 (Thomson)\n\nWork in progress only (need info on cartridge headers to progress)\n\n## MSP430FR59\n\nRetired in 0.2, bitrotted\n\n## MSX1\n\nBuilds, passes basic tests\n\n## MSX2\n\nBuilds, passes basic tests\n\n## MTX (Memotech)\n\nBuilds, test pending\n\n## Multicomp09\n\nBuilds, not tested\n\n## N8 (Retrobrew)\n\nBuilds, passes basic tests\n\n## NASCOM\n\nBuilds, passes basic tests\n\n## OSI50x\n\nWIP only\n\n## P112\n\nBuilds, not tested\n\n## P90MB (Plasmo)\n\nBuilds, passes basic tests\n\n## PCW8256 (Amstrad)\n\nBuilds, passes basic tests\n\n## PDP11\n\nWork in progress - need a compiler that actually works (gcc still fails on\nbasic stuff alas)\n\n## Pentagon\n\nBuilds, passes basic tests\n\n## Pentagon 1024\n\nBuilds, passes basic tests\n\n## Pico68K\n\nBuilds, passes basic tests\n\n## PX4 plus (Epson)\n\nEarly WIP, probably never feasible\n\n## PZ1\n\nBuilds, passes basic tests\n\n## Rabbit 2000\n\nTo merge with jackrabbit\n\n## RBC-Mark4 (Retrobrew)\n\nBuilds, passes basic tests\n\n## RBC-Minim68k (Retrobrew)\n\nBuilds, passes basic tests\n\n## RC2014\n\nBuilds, passes basic tests\n\n## RC2014-Tiny\n\nBuilds, passes basic tests\n\n## rcbus-1802\n\nCompiler experimentation\n\n## rcbus-6303\n\nBuilds, passes basic tests. Needs compiler from 2024/06/18 or later.\n\n## rcbus-6502\n\nBuilds, passes basic tests\n\n## rcbus-65C816\n\nWIP compiler bring up\n\n## rcbus-6800\n\nWIP compiler bring up\n\n## rcbus-68008\n\nBuilds, passes basic tests\n\n## rcbus-6809\n\nBuilds, passes basic tests\n\n## rcbus-68hc11\n\nBuilds, passes basic tests\n\n## rcbus-8080\n\nBuilds, passes basic tests\n\n## rcbus-8085\n\nBuilds, passes basic tests\n\n## rcbus-80C188\n\nEarly WIP only\n\n## rcbus-ns32k\n\nBuilds, passes basic tests\n\n## rcbus-sbc64\n\nBuilds, passes basic tests\n\n## rcbus-super8\n\nCompiler bring up work\n\n## rcbus-tms9995\n\nCompiler bring up work\n\n## rcbus-tp128\n\nBuilds, passes basic tests\n\n## rcbus-z180\n\nBuilds, passes basic tests\n\n## rcbus-z8\n\nEarly work, dev board needs changes\n\n## rhyophyre\n\nBuilds, passes basic tests\n\n## riz180 (Plasmo)\n\nBuilds, passes basic tests\n\n## rpipico (Rapsberry Pi Pico0\n\nBuilds\n\n## sam (Sam Coupe)\n\nBuilds, passes basic tests\n\n## sbc08k\n\nBuilds, passes basic tests\n\n## sbc2g\n\nBuilds, passes basic tests\n\n## sbcv2\n\nBuilds, passes basic tests\n\n## sc108 (Small Computer Central)\n\nBuilds, passes basic tests\n\n## sc111 (Small Computer Central)\n\nBuilds, passes basic tests\n\n## sc720 (Small Computer Central)\n\nBuilds, passes basic tests\n\n## scorpion\n\nBuilds, passes basic tests\n\n## scrumpel\n\nBuilds\n\n## searle (Grant Searle Z80)\n\nBuilds, passes basic tests\n\n## simple80 (Plasmo)\n\nBuilds, passes basic tests\n\n## smallz80\n\nBuilds, passes basic tests\n\n## socz80\n\nBuilds, test pending\n\n## sorceror (Exidy)\n\nWork in progress only\n\n## T100\n\nEarly work in progress only\n\n## TC2068 (Timex)\n\nBuilds, passes basic tests, requires Fuzix bintools 2024/6/18 or later.\n\n## Tiny68K (Plasmo)\n\nBuilds, passes basic tests\n\n## TM4C129X\n\nBuilds, test pending\n\n## TO8 (Thomson) \n\nBuilds, test pending\n\n## TO9 (Thomson)\n\nWork in progress, stretch goal for 0.5\n\n## Toms SBC\n\nBuilds, passes basic tests\n\n## Toms SBC (ROM)\n\nBuilds, passes basic tests\n\n## TRS80 (Model 4, 4D, 4P)\n\nBuilds, passes basic tests\n\n## TRS80m1 (Model 1/3)\n\nBuilds, passes basic tests\n\n## ubee (Microbee)\n\nBuilds, passes basic tests\n\n## v65c816(-big)\n\nWork in progress only\n\n## v8080\n\nBuilds, passes basic tests\n\n## vrisc32\n\nRISCV toolchain still breaks on us\n\n## vz200\n\nBuilds, passes basic tests\n\n## vz700\n\nExperiment only, may well not be possible\n\n## yaz180\n\nBuilds\n\n## z1013 (Robotron)\n\nBuilds, passes basic tests\n\n## z180itx (Etched Pixels)\n\nBuilds, passes basic tests\n\n## z280rc\n\nWork in progress, post 0.5\n\n## z80all (Plasmo)\n\nBuilds, passes basic tests\n\n## z80-bios\n\nExperiment only\n\n## z80-mbc2\n\nBuilds, usually passes basic tests, debugging a possible interrupt problem\n\n## z80membership\n\nBuilds,passes basic tests\n\n## z80pack\n\nBuilds, passes basic tests\n\n## z80retro\n\nBuilds, test pending\n\n## zeta-v2\n\nCurrently converting to new compiler\n\n## zrc (Plasmo)\n\nBuilds, passes basic tests\n\n## zx128\n\nObsolete experiment (128K spectrum and microdrive)\n\n## ZX+3 (ZX Spectrum +3)\n\nBuilds, passes basic tests\n\n## ZXDiv (ZX Spectrum 128K with DIVIDE/DIVMMC)\n\nBuilds, test pending\n\n## ZXDiv48\n\nExperiment only\n\n## ZXEvo (Evolution)\n\nEarly WIP only\n\n## ZX Spectra\n\nWork in progress. 0.5 stretch goal\n\n## ZX Uno\n\nBuilds, passes basic tests\n"
        },
        {
          "name": "Standalone",
          "type": "tree",
          "content": null
        },
        {
          "name": "Target",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.mk",
          "type": "blob",
          "size": 0.0625,
          "content": "#\n#\tFuzix version\n#\nexport VERSION = 0.5\nexport SUBVERSION = \"\"\n"
        }
      ]
    }
  ]
}