{
  "metadata": {
    "timestamp": 1736709758199,
    "page": 185,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FRRouting/frr",
      "stars": 3482,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 6.28515625,
          "content": "# SPDX-License-Identifier: GPL-2.0\n# clang-format configuration file. Intended for clang-format >= 11.\n# If the version is changed also check that CI tool frrbot is updated.\n#\n# For more information, see:\n#\n#   Documentation/process/clang-format.rst\n#   https://clang.llvm.org/docs/ClangFormat.html\n#   https://clang.llvm.org/docs/ClangFormatStyleOptions.html\n#\n---\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\n# FRR: Right\nAlignEscapedNewlines: Right\nAlignOperands: Align\n# FRR: true\nAlignTrailingComments: true\n# FRR: true\nAlignConsecutiveMacros: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: false\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass: false\n  AfterControlStatement: false\n  AfterEnum: false\n  AfterFunction: true\n  AfterNamespace: true\n  AfterObjCDeclaration: false\n  AfterStruct: false\n  AfterUnion: false\n  AfterExternBlock: false\n  BeforeCatch: false\n  BeforeElse: false\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: false\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: false\nColumnLimit: 100\n# Linux: CommentPragmas: '^ IWYU pragma:'\nCommentPragmas: '\\$(FRR|clippy)'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 8\nContinuationIndentWidth: 8\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat: false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: false\n# Some taken from:\n#   git grep -h '^#define [^[:space:]]*frr_(each|with)[^[:space:]]*(' ./ \\\n#   | sed \"s,^#define \\([^[:space:]]*frr_(each|with)[^[:space:]]*\\)(.*$,  - '\\1',\" \\\n#   | LC_ALL=C sort -u\n# and\n#   git grep -h '^#define [^[:space:]]*FOREACH[^[:space:]]*(' ./\n#   | sed \"s,^#define \\([^[:space:]]*FOREACH[^)]*\\)(.*,  - '\\1',\"\n#   | LC_ALL=C sort -u\nForEachMacros:\n  # lib: outliers:\n  - 'FOR_ALL_INTERFACES'\n  # libyang outliers:\n  - 'LY_FOR_KEYS'\n  - 'LY_LIST_FOR'\n  - 'LYD_LIST_FOR_INST'\n  - 'LYD_LIST_FOR_INST_SAFE'\n  - 'LY_TREE_FOR'\n  - 'LY_TREE_DFS_BEGIN'\n  - 'LYD_TREE_DFS_BEGIN'\n  # ospfd outliers:\n  - 'LSDB_LOOP'\n  # first git grep\n  - 'darr_foreach_p'\n  - 'darr_foreach_i'\n  - 'frr_each'\n  - 'frr_each_safe'\n  - 'frr_each_from'\n  - 'frr_rev_each'\n  - 'frr_rev_each_safe'\n  - 'frr_rev_each_from'\n  - 'frr_with_mutex'\n  - 'frr_with_privs'\n  # second git grep\n  - 'AF_FOREACH'\n  - 'FOREACH_ADAPTER_IN_LIST'\n  - 'FOREACH_AFI_SAFI'\n  - 'FOREACH_AFI_SAFI_NSF'\n  - 'FOREACH_BE_APPLY_BATCH_IN_LIST'\n  - 'FOREACH_BE_CLIENT_BITS'\n  - 'FOREACH_BE_TXN_BATCH_IN_LIST'\n  - 'FOREACH_BE_TXN_IN_LIST'\n  - 'FOREACH_CMT_REC'\n  - 'FOREACH_MGMTD_BE_CLIENT_ID'\n  - 'FOREACH_MGMTD_DS_ID'\n  - 'FOREACH_SAFI'\n  - 'FOREACH_SESSION_IN_LIST'\n  - 'FOREACH_TXN_CFG_BATCH_IN_LIST'\n  - 'FOREACH_TXN_IN_LIST'\n  - 'FOREACH_TXN_REQ_IN_LIST'\n  - 'JSON_FOREACH'\n  - 'LIST_FOREACH'\n  - 'LIST_FOREACH_SAFE'\n  - 'RB_FOREACH'\n  - 'RB_FOREACH_REVERSE'\n  - 'RB_FOREACH_REVERSE_SAFE'\n  - 'RB_FOREACH_SAFE'\n  - 'RE_DEST_FOREACH_ROUTE'\n  - 'RE_DEST_FOREACH_ROUTE_SAFE'\n  - 'RNODE_FOREACH_RE'\n  - 'RNODE_FOREACH_RE_SAFE'\n  - 'SIMPLEQ_FOREACH'\n  - 'SIMPLEQ_FOREACH_SAFE'\n  - 'SLIST_FOREACH'\n  - 'SLIST_FOREACH_PREVPTR'\n  - 'SLIST_FOREACH_SAFE'\n  - 'SPLAY_FOREACH'\n  - 'STAILQ_FOREACH'\n  - 'STAILQ_FOREACH_SAFE'\n  - 'SUBGRP_FOREACH_ADJ'\n  - 'SUBGRP_FOREACH_ADJ_SAFE'\n  - 'SUBGRP_FOREACH_PEER'\n  - 'SUBGRP_FOREACH_PEER_SAFE'\n  - 'TAILQ_FOREACH'\n  - 'TAILQ_FOREACH_REVERSE'\n  - 'TAILQ_FOREACH_REVERSE_SAFE'\n  - 'TAILQ_FOREACH_SAFE'\n  - 'UPDGRP_FOREACH_SUBGRP'\n  - 'UPDGRP_FOREACH_SUBGRP_SAFE'\n  - 'XSIMPLEQ_FOREACH'\n  - 'XSIMPLEQ_FOREACH_SAFE'\nIncludeBlocks: Preserve\nIncludeCategories:\n  - Regex:           '^(<|lib)'\n    Priority:        0\n## New: XXX whats it mean?\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: false\nIndentGotoLabels: false\nIndentPPDirectives: None\nIndentWidth: 8\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd: ''\n## Linux: MaxEmptyLinesToKeep: 1\nMaxEmptyLinesToKeep: 2\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 8\nObjCSpaceAfterProperty: true\nObjCSpaceBeforeProtocolList: true\n\n## Lowest Penalty Value wins. Values are used by clang-format to influence\n## the brak decisions, it's a bit of voodoo magic though.\n## Originally from linux which was \"Taken from git's rules\"\nPenaltyBreakAssignment: 30\nPenaltyBreakComment: 10\nPenaltyBreakFirstLessLess: 0\n# Don't break a string into multi-string-fragments\nPenaltyBreakString: 1000\n# Allow going past the ColumnLimit to keep function arguments aligned\n# with the open parenthesis.\nPenaltyBreakBeforeFirstCallParameter: 1000\n# Try and stay under ColumnLimit, but not at the cost of incomprehensible code.\nPenaltyExcessCharacter: 30\nPenaltyReturnTypeOnItsOwnLine: 60\n\nPointerAlignment: Right\nReflowComments: false\nSortIncludes: false\nSortUsingDeclarations: false\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInContainerLiterals: false\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard: Cpp03\nTabWidth: 8\nUseTab: Always\nWhitespaceSensitiveMacros:\n  - \"DEFPY\"\n  - \"DEFPY_HIDDEN\"\n  - \"DEFPY_NOSH\"\n  - \"DEFPY_YANG\"\n  - \"DEFPY_YANG_HIDDEN\"\n  - \"DEFPY_YANG_NOSH\"\n  - \"DEFSH\"\n  - \"DEFSH_HIDDEN\"\n  - \"DEFUN\"\n  - \"DEFUN_HIDDEN\"\n  - \"DEFUN_NOSH\"\n  - \"DEFUN_YANG\"\n  - \"DEFUN_YANG_HIDDEN\"\n  - \"DEFUN_YANG_NOSH\"\n  - \"DEFUNSH\"\n  - \"DEFUNSH_HIDDEN\"\n  - \"ALIAS\"\n  - \"ALIAS_HIDDEN\"\n  - \"ALIAS_YANG\"\n  - \"ALIAS_DEPRECATED\"\n...\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.087890625,
          "content": ".git\n**/*.a\n**/*.o\n**/*.la\n**/*.lo\n**/*.so\n**/.libs\ndocker/alpine/pkgs\ndocker/centos/pkgs\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.048828125,
          "content": "[flake8]\nmax-line-length = 88\nextend-ignore = E203"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 1.0048828125,
          "content": "# Following revs are all whitespace changes; use with\n# git blame --ignore-revs-file .git-blame-ignore-revs <...>\n# or to make it permanent\n# git config blame.ignoreRevsFile .git-blame-ignore-revs\n9fa6ec14737b94fdfb41539d96c7e4f84f3514b6\n701a01920eee5431d2052aad92aefbdf50ac2139\nbf2394f08bdc91a6cbd3784a1bfa3af3247bb06f\n0157c327715ca367d13b7f02b2981f3484ccdeeb\n787e762445d50ca5b52fafcf8dd6de08ab90916f\nac2914d3261a78cf78eec7a6e20ebbe42bb57150\nac4d0be5874fafd14212d6007fff7495edc9b152\nd62a17aedeb0eebdba98238874bb13d62c48dbf9\nc14777c6bfd0a446c85243d3a9835054a259c276\n996c93142d3abfab0f6d6c800474e22a8cfbdbc5\n# require semicolon after macro XYZ\n67b0f40c98aeb9bbc95370fe2be29e56a00a8748\n80413c2073a20774b264ab04f7a4ea4515699790\n960b9a53837d1aefa16bd531c7087f800dbe147b\n96244aca23adec551c29b78f26605f8af8eea53e\n8451921b70044a2c1075e7ba391f095fabee2550\nbf8d3d6aca3f20255a621ed1c148fd05b3a8ae5c\n96941f80927ce31a41f7d1905717f099187be723\n# apply `black` python formatting for all tests/topotests\n1a1c2a9f84d0ad1bdadc0cb47d6175d4ccc32544\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1552734375,
          "content": "### autoconf/automake root stuff\n\n/compile\n/config.log\n/config.h\n/config.cache\n/config.status\n/config.guess\n/config.sub\n/config.version\n/ltmain.sh\n/stamp-h\n/stamp-h[0-9]*\n*-stamp\n/INSTALL\n/depcomp\n/missing\n/install-sh\n/mkinstalldirs\n/ylwrap\n/autom4te*.cache\n/configure.lineno\n/configure\n/config.h.in\n/confdefs.h\n/conftest\n/conftest.err\n/aclocal.m4\n/libtool\n/libtool.orig\n/test-driver\n/test-suite.log\n\n/Makefile\n/Makefile.in\n\n/symalyzer_report.html\n/jquery-3.4.1.min.js\n/jquery-3.4.1.min.js.tmp\n\n### autoconf/automake subdir stuff\n\n.deps\n.libs\n\n### build outputs\n\n*.o\n*.lo\n*.a\n*.la\n*.so\n*.loT\n*.pb.h\n*.pb-c.h\n*.pb-c.c\n*.pb.cc\n*_clippy.c\n*.bc\n*.ll\n*.cg.json\n*.cg.dot\n*.cg.svg\n*.xref\n*_tsexpand.h\n\n### gcov outputs\n\n*.gcno\n*.gcov\n*.gcda\n\n### dist\n\n*.tar.?z\n*.tar.?z.asc\n*.tar.asc\n*.deb\n*.ddeb\n*.dsc\n*.changes\n\n### other garbage\n\n.nfs*\n.arch-inventory\n.arch-ids\n{arch}\nbuild\n.cache\n.dir-locals.el\n.msg\n.rebase-*\n*~\n*.bak\n*.swp\n*.pyc\n*.dmp\n__pycache__\n*.patch\n*.diff\ncscope.*\nTAGS\ntags\nGTAGS\nGSYMS\nGRTAGS\nGPATH\ncompile_commands.json\n.ccls\n.ccls-cache\n.dirstamp\nrefix\n.vscode\n.kitchen\n.emacs.desktop*\n\n/test-suite.log\npceplib/test/*.log\npceplib/test/*.trs\n/tests/topotests/lib/mgmt_pb2.py\n"
        },
        {
          "name": ".isort.cfg",
          "type": "blob",
          "size": 0.0263671875,
          "content": "[settings]\nprofile = black\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 0.166015625,
          "content": "[MASTER]\ninit-hook=\"import sys; sys.path.insert(0, '..')\"\nsignature-mutators=common_config.retry,retry\n\n[FORMAT]\nmax-line-length = 88\n\n[MESSAGES CONTROL]\ndisable=I,C,R,W\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.7490234375,
          "content": "dist: focal\nos: linux\nlanguage: c\nservices:\n  - docker\njobs:\n  include:\n   - script:\n       - docker/centos-7/build.sh\n       - docker images\n     name: centos7\n   - script:\n       - docker/centos-8/build.sh\n       - docker images\n     name: centos8\n   - script:\n       - sudo apt install -y linux-modules-extra-$(uname -r)\n       - docker build -t frr-ubuntu18:latest -f docker/ubuntu18-ci/Dockerfile .\n       - docker images\n       - uname -a\n       - docker run -d --privileged --name frr-ubuntu18 --mount type=bind,source=/lib/modules,target=/lib/modules frr-ubuntu18:latest\n       - docker ps\n       - docker exec frr-ubuntu18 bash -c 'cd ~/frr ; make check'\n       - docker exec frr-ubuntu18 bash -c 'ps agxu ; lsmod | grep mpls || true'\n       - docker exec frr-ubuntu18 bash -c 'cd ~/frr/tests/topotests/ospf_topo1 ; sudo pytest test_ospf_topo1.py'\n       - docker exec frr-ubuntu18 bash -c 'cd ~/frr/tests/topotests/bgp_l3vpn_to_bgp_vrf ; sudo pytest test_bgp_l3vpn_to_bgp_vrf.py'\n     name: ubuntu18+minimalCI\n   - script:\n       - sudo apt install -y linux-modules-extra-$(uname -r)\n       - docker build -t frr-ubuntu20:latest -f docker/ubuntu20-ci/Dockerfile .\n       - docker images\n       - uname -a\n       - docker run -d --privileged --name frr-ubuntu20 --mount type=bind,source=/lib/modules,target=/lib/modules frr-ubuntu20:latest\n       - docker ps\n       - docker exec frr-ubuntu20 bash -c 'cd ~/frr ; make check'\n       - docker exec frr-ubuntu20 bash -c 'ps agxu ; lsmod | grep mpls || true'\n       - docker exec frr-ubuntu20 bash -c 'cd ~/frr/tests/topotests/ospf_topo1 ; sudo pytest test_ospf_topo1.py'\n       - docker exec frr-ubuntu20 bash -c 'cd ~/frr/tests/topotests/bgp_l3vpn_to_bgp_vrf ; sudo pytest test_bgp_l3vpn_to_bgp_vrf.py'\n     name: ubuntu20+minimalCI\n\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.875,
          "content": "The FRRouting project consists of parts with various licenses.  Any particular\nfile's license should be indicated at the top of the file with an SPDX License\nidentifier.\n\nThe full text of all licenses used can be found in doc/licenses.\n\nThe composite work (binary) resulting from compiling FRR is thought to always\nbe distributable under GPLv2 or later.  However, please note that this is\nsimply an expression of the community's best-effort understanding, it is not a\nlegal statement, guarantee, or advice of any kind.  If necessary, please\nfamiliarize yourself with the specifics and/or consult a lawyer.\n\nAlso please be advised that FRR's documentation is, for historical reasons,\nlicensed under a custom (but relatively permissive) license.  This license\ndates back to the GNU Zebra project and cannot easily be changed into something\nmore common, short of rewriting the entire documentation.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 10.1845703125,
          "content": "## Process this file with automake to produce Makefile.in.\n\nAUTOMAKE_OPTIONS = subdir-objects 1.12\nACLOCAL_AMFLAGS = -I m4 -Wall,no-override\n\nAM_CFLAGS = \\\n\t$(AC_CFLAGS) \\\n\t$(LIBYANG_CFLAGS) \\\n\t$(SQLITE3_CFLAGS) \\\n\t$(UNWIND_CFLAGS) \\\n\t$(SAN_FLAGS) \\\n\t$(WERROR) \\\n\t# end\nAM_CXXFLAGS = \\\n\t$(AC_CXXFLAGS) \\\n\t$(LIBYANG_CFLAGS) \\\n\t$(WERROR) \\\n\t# end\n\n# CPPFLAGS_BASE does not contain the include path for overriding assert.h,\n# therefore should be used in tools that do *not* link libfrr or do not want\n# assert() overridden\nCPPFLAGS_BASE = \\\n\t-I$(top_srcdir) -I$(top_srcdir)/include -I$(top_srcdir)/lib \\\n\t-I$(top_builddir) \\\n\t$(LUA_INCLUDE) \\\n\t# end\nAM_CPPFLAGS = \\\n\t-I$(top_srcdir)/lib/assert \\\n\t$(CPPFLAGS_BASE) \\\n\t# end\n\n# AM_LDFLAGS is used for executables (daemons).  LDFLAGS can be left alone,\n# but if it is changed it should include $(AM_LDFLAGS)\nAM_LDFLAGS = \\\n\t-export-dynamic \\\n\t$(AC_LDFLAGS) \\\n\t$(AC_LDFLAGS_EXEC) \\\n\t$(SAN_FLAGS) \\\n\t# end\n\n# libraries need to use libxxx_LDFLAGS = $(LIB_LDFLAGS) -version-info X:Y:Z\nLIB_LDFLAGS = \\\n\t-export-dynamic \\\n\t$(AC_LDFLAGS) \\\n\t$(SAN_FLAGS) \\\n\t# end\n\n# modules need to use xxx_LDFLAGS = $(MODULE_LDFLAGS)\nMODULE_LDFLAGS = \\\n\t-export-dynamic \\\n\t-avoid-version \\\n\t-module \\\n\t-shared \\\n\t$(AC_LDFLAGS) \\\n\t$(SAN_FLAGS) \\\n\t# end\n\nDEFS = @DEFS@ -DCONFDATE=$(CONFDATE)\n\nAR_FLAGS = @AR_FLAGS@\nARFLAGS = @ARFLAGS@\nRANLIB = @RANLIB@\n\n# these two targets are provided to easily grab autoconf/Makefile variables\n# you can use either:\n#   eval `make VARFD=3 shvar-CFLAGS 3>&1 1>&2`\n#   CFLAGS=\"`make VARFD=3 var-CFLAGS 3>&1 1>&2`\"\n# where the former can be used to set several variables at once.  Note the\n# fd redirections -- this is to prevent garbage from make rebuilding other\n# targets from causing issues.\n.PHONY: shvar-% var-%\nVARFD ?= 1\nshvar-%:\n\t@echo \"$*=\\\"$($*)\\\"\" >&$(VARFD)\nvar-%:\n\t@echo \"$($*)\" >&$(VARFD)\n\nif ONLY_CLIPPY\n.DEFAULT_GOAL := clippy-only\nendif\nclippy-only: Makefile lib/clippy config.h\n.PHONY: clippy-only\n\n# overwriting these vars breaks cross-compilation.  let's be helpful and warn.\n#\n# note: \"#AUTODERP# \" will be removed from Makefile by configure.  These are\n# GNU make directives & automake will f*ck them up by trying to process them\n# as automake directives.\n#\n#AUTODERP# null=\n#AUTODERP# SPACE=$(null) $(null)\n#AUTODERP# mkcheck_CC =       $(findstring $(SPACE)CC=,      $(SPACE)$(MAKEOVERRIDES))\n#AUTODERP# mkcheck_CFLAGS =   $(findstring $(SPACE)CFLAGS=,  $(SPACE)$(MAKEOVERRIDES))\n#AUTODERP# mkcheck_CPPFLAGS = $(findstring $(SPACE)CPPFLAGS=,$(SPACE)$(MAKEOVERRIDES))\n#AUTODERP# mkcheck_CCLD =     $(findstring $(SPACE)CCLD=,    $(SPACE)$(MAKEOVERRIDES))\n#AUTODERP# mkcheck_LD =       $(findstring $(SPACE)LD=,      $(SPACE)$(MAKEOVERRIDES))\n#AUTODERP# mkcheck_LDFLAGS =  $(findstring $(SPACE)LDFLAGS=, $(SPACE)$(MAKEOVERRIDES))\n#AUTODERP# #\n#AUTODERP# ifneq ($(mkcheck_CC),)\n#AUTODERP#   $(warning WARNING: you have overwritten the \"CC\" variable on the make command line.)\n#AUTODERP# endif\n#AUTODERP# ifneq ($(mkcheck_CFLAGS),)\n#AUTODERP#   $(warning WARNING: you have overwritten the \"CFLAGS\" variable on the make command line.)\n#AUTODERP# endif\n#AUTODERP# ifneq ($(mkcheck_CPPFLAGS),)\n#AUTODERP#   $(warning WARNING: you have overwritten the \"CPPFLAGS\" variable on the make command line.)\n#AUTODERP# endif\n#AUTODERP# ifneq ($(mkcheck_CCLD),)\n#AUTODERP#   $(warning WARNING: you have overwritten the \"CCLD\" variable on the make command line.)\n#AUTODERP# endif\n#AUTODERP# ifneq ($(mkcheck_LD),)\n#AUTODERP#   $(warning WARNING: you have overwritten the \"LD\" variable on the make command line.)\n#AUTODERP# endif\n#AUTODERP# ifneq ($(mkcheck_LDFLAGS),)\n#AUTODERP#   $(warning WARNING: you have overwritten the \"LDFLAGS\" variable on the make command line.)\n#AUTODERP# endif\n#AUTODERP# #\n#AUTODERP# ifneq ($(mkcheck_CC)$(mkcheck_CFLAGS)$(mkcheck_CPPFLAGS)$(mkcheck_CCLD)$(mkcheck_LD)$(mkcheck_LDFLAGS),)\n#AUTODERP#   $(warning ------)\n#AUTODERP#   $(warning While overwriting these variables works most of the time, it is not recommended and can cause confusing build errors.)\n#AUTODERP#   $(warning This is especially problematic when cross-compiling, since tools that run on the build system during the build process will not be compiled correctly.)\n#AUTODERP#   $(warning All of these variables should be supplied to 'configure', and they will be remembered and correctly applied during 'make'.)\n#AUTODERP#   $(warning ------)\n#AUTODERP# endif\n\nEXTRA_DIST =\nEXTRA_PROGRAMS =\nBUILT_SOURCES =\nCLEANFILES =\nDISTCLEANFILES =\nSUFFIXES =\n\nbin_PROGRAMS =\nsbin_PROGRAMS =\nsbin_SCRIPTS =\nnoinst_PROGRAMS =\nnoinst_HEADERS =\nnoinst_LIBRARIES =\nnodist_noinst_DATA =\nlib_LTLIBRARIES =\nmodule_LTLIBRARIES =\npkginclude_HEADERS =\nnodist_pkginclude_HEADERS =\ndist_yangmodels_DATA =\nman_MANS =\nvtysh_daemons =\nclippy_scan =\n\n## libtool, the self-made GNU scourge\n## ... this should fix relinking\n## ... and AUTOMAKE_DUMMY is needed to prevent automake from treating this\n##     as overriding the normal targets...\n$(AUTOMAKE_DUMMY)install-moduleLTLIBRARIES: install-libLTLIBRARIES\n$(AUTOMAKE_DUMMY)install-binPROGRAMS: install-libLTLIBRARIES\n$(AUTOMAKE_DUMMY)install-sbinPROGRAMS: install-libLTLIBRARIES\n\n# Include default rules to compile protobuf message sources\nSUFFIXES += .proto .pb-c.c .pb-c.h\n\n# Rules\n\nAM_V_PROTOC_C = $(am__v_PROTOC_C_$(V))\nam__v_PROTOC_C_ = $(am__v_PROTOC_C_$(AM_DEFAULT_VERBOSITY))\nam__v_PROTOC_C_0 = @echo \"  PROTOC_C\" $@;\nam__v_PROTOC_C_1 =\n\n%.pb-c.c %.pb-c.h : %.proto\n\t$(AM_V_PROTOC_C)$(PROTOC_C) -I$(top_srcdir) --c_out=$(top_builddir) $^\n\t$(AM_V_GEN)$(SED) -i -e '1i\\\n\t#include \"config.h\"' $@\n\ninclude doc/subdir.am\ninclude doc/user/subdir.am\ninclude doc/manpages/subdir.am\ninclude doc/developer/subdir.am\ninclude include/subdir.am\ninclude lib/subdir.am\ninclude mlag/subdir.am\ninclude zebra/subdir.am\ninclude watchfrr/subdir.am\ninclude qpb/subdir.am\ninclude fpm/subdir.am\ninclude grpc/subdir.am\ninclude tools/subdir.am\n\ninclude mgmtd/subdir.am\n\ninclude bgpd/subdir.am\ninclude bgpd/rfp-example/librfp/subdir.am\ninclude bgpd/rfp-example/rfptest/subdir.am\ninclude ripd/subdir.am\ninclude ripngd/subdir.am\ninclude ospfd/subdir.am\ninclude ospf6d/subdir.am\ninclude ospfclient/subdir.am\ninclude isisd/subdir.am\ninclude nhrpd/subdir.am\ninclude ldpd/subdir.am\ninclude babeld/subdir.am\ninclude eigrpd/subdir.am\ninclude sharpd/subdir.am\ninclude pimd/subdir.am\ninclude pbrd/subdir.am\ninclude staticd/subdir.am\ninclude bfdd/subdir.am\ninclude yang/subdir.am\ninclude yang/libyang_plugins/subdir.am\ninclude vrrpd/subdir.am\ninclude pceplib/subdir.am\ninclude pceplib/test/subdir.am\ninclude pathd/subdir.am\n\ninclude vtysh/subdir.am\ninclude tests/subdir.am\ninclude tests/topotests/subdir.am\n\nif PKGSRC\nrcdir=@pkgsrcrcdir@\nrc_SCRIPTS = \\\n\tpkgsrc/bgpd.sh \\\n\tpkgsrc/ospf6d.sh \\\n\tpkgsrc/ospfd.sh \\\n\tpkgsrc/ripd.sh \\\n\tpkgsrc/ripngd.sh \\\n\tpkgsrc/zebra.sh \\\n\tpkgsrc/mgmtd.sh \\\n\t# end\nendif\n\nEXTRA_DIST += \\\n\taclocal.m4 \\\n\tREADME.md \\\n\tm4/README.txt \\\n\tm4/libtool-whole-archive.patch \\\n\tconfig.version \\\n\t\\\n\tpython/clidef.py \\\n\tpython/clippy/__init__.py \\\n\tpython/clippy/elf.py \\\n\tpython/clippy/uidhash.py \\\n\tpython/makevars.py \\\n\tpython/makefile.py \\\n\tpython/tiabwarfo.py \\\n\tpython/xrelfo.py \\\n\tpython/xref2vtysh.py \\\n\tpython/test_xrelfo.py \\\n\tpython/runtests.py \\\n\t\\\n\tpython/xrefstructs.json \\\n\t\\\n\ttools/etc/logrotate.d/frr \\\n\tredhat/frr.pam \\\n\tredhat/frr.spec \\\n\t\\\n\tsnapcraft/snapcraft.yaml \\\n\tsnapcraft/README.snap_build.md \\\n\tsnapcraft/README.usage.md \\\n\tsnapcraft/extra_version_info.txt \\\n\tsnapcraft/scripts \\\n\tsnapcraft/defaults \\\n\tsnapcraft/helpers \\\n\tsnapcraft/snap \\\n\tbabeld/Makefile \\\n\tmgmtd/Makefile \\\n\tbgpd/Makefile \\\n\tbgpd/rfp-example/librfp/Makefile \\\n\tbgpd/rfp-example/rfptest/Makefile \\\n\tdoc/Makefile \\\n\tdoc/developer/Makefile \\\n\tdoc/manpages/Makefile \\\n\tdoc/user/Makefile \\\n\teigrpd/Makefile \\\n\tfpm/Makefile \\\n\tgrpc/Makefile \\\n\tisisd/Makefile \\\n\tldpd/Makefile \\\n\tlib/Makefile \\\n\tnhrpd/Makefile \\\n\tospf6d/Makefile \\\n\tospfclient/Makefile \\\n\tospfd/Makefile \\\n\tpbrd/Makefile \\\n\tpimd/Makefile \\\n\tqpb/Makefile \\\n\tripd/Makefile \\\n\tripngd/Makefile \\\n\tstaticd/Makefile \\\n\ttests/Makefile \\\n\ttools/Makefile \\\n\tvtysh/Makefile \\\n\twatchfrr/Makefile \\\n\tzebra/Makefile \\\n\tvrrpd/Makefile \\\n\t# end\n\nAM_V_LLVM_BC = $(am__v_LLVM_BC_$(V))\nam__v_LLVM_BC_ = $(am__v_LLVM_BC_$(AM_DEFAULT_VERBOSITY))\nam__v_LLVM_BC_0 = @echo \"  LLVM.BC \" $@;\nam__v_LLVM_BC_1 = \n\nAM_V_LLVM_LD = $(am__v_LLVM_LD_$(V))\nam__v_LLVM_LD_ = $(am__v_LLVM_LD_$(AM_DEFAULT_VERBOSITY))\nam__v_LLVM_LD_0 = @echo \"  LLVM.LD \" $@;\nam__v_LLVM_LD_1 = \n\nSUFFIXES += .lo.bc .o.bc\n\n.o.o.bc:\n\t$(AM_V_LLVM_BC)$(COMPILE) -emit-llvm -c -o $@ $(patsubst %.o,%.c,$<)\n.lo.lo.bc:\n\t$(AM_V_LLVM_BC)$(COMPILE) -emit-llvm -c -o $@ $(patsubst %.lo,%.c,$<)\n\n%.cg.json: %.bc tools/frr-llvm-cg\n\ttools/frr-llvm-cg -o $@ $<\n%.cg.dot: %.cg.json\n\t$(PYTHON) $(top_srcdir)/python/callgraph-dot.py $< $@\n%.cg.svg: %.cg.dot\n\t@echo if the following command fails, you need to install graphviz.\n\t@echo also, the output is nondeterministic. run it multiple times and use the nicest output.\n\t@echo tuning parameters may yield nicer looking graphs as well.\n\tfdp -GK=0.7 -Gstart=42231337 -Gmaxiter=2000 -Elen=2 -Gnodesep=1.5 -Tsvg -o$@ $<\n# don't delete intermediaries\n.PRECIOUS: %.cg.json %.cg.dot\n\n# <lib>.la.bc, <lib>.a.bc and <daemon>.bc targets are generated by\n# python/makefile.py\nLLVM_LINK = llvm-link-$(llvm_version)\n\nclean-local: clean-python clean-llvm-bitcode\n.PHONY: clean-python clean-llvm-bitcode\nclean-python:\n\tfind . -name __pycache__ -o -name .pytest_cache | xargs rm -rf\n\tfind . -name \"*.pyc\" -o -name \"*_clippy.c\" | xargs rm -f\n\nclean-llvm-bitcode:\n\tfind . -name \"*.bc\" -o -name \"*.cg.json\" -o -name \"*.cg.dot\" -o -name \"*.cg.svg\" | xargs rm -f\n\nredistclean:\n\t$(MAKE) distclean CONFIG_CLEAN_FILES=\"$(filter-out $(EXTRA_DIST), $(CONFIG_CLEAN_FILES))\"\n\nindent:\n\ttools/indent.py `find sharpd bgpd mgmtd eigrpd include isisd lib nhrpd ospf6d ospfd pimd qpb ripd vtysh zebra -name '*.[ch]' | grep -v include/linux`\n\nif HAVE_GCOV\n\ncoverage: check\n\t@ find . -name '*.o' -exec gcov {} \\;\n\nyorn:\n\t@ echo \"OK to upload coverage to https://coverage.io [y/N]:\"\n\t@ read yn; test \"$$yn\" = \"y\"\n\nupload-check-coverage:\n\t@ if [ \"x${COMMIT}\" = \"x\" ]; then echo \"COMMIT required\"; exit 1; fi\n\t@ if [ \"x${TOKEN}\" = \"x\" ]; then echo \"TOKEN required\"; exit 1; fi\n\tcurl -s https://codecov.io/bash | bash -s - -C ${COMMIT} -t ${TOKEN}\n\nforce-check-coverage: coverage upload-check-coverage\n\ncheck-coverage: coverage yorn upload-check-coverage\n\nendif\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.154296875,
          "content": "<p align=\"center\">\n<img src=\"http://docs.frrouting.org/en/latest/_static/frr-icon.svg\" alt=\"Icon\" width=\"20%\"/>\n</p>\n\nFRRouting\n=========\n\nFRR is free software that implements and manages various IPv4 and IPv6 routing\nprotocols. It runs on nearly all distributions of Linux and BSD and\nsupports all modern CPU architectures.\n\nFRR currently supports the following protocols:\n\n* BGP\n* OSPFv2\n* OSPFv3\n* RIPv1\n* RIPv2\n* RIPng\n* IS-IS\n* PIM-SM/MSDP\n* LDP\n* BFD\n* Babel\n* PBR\n* OpenFabric\n* VRRP\n* EIGRP (alpha)\n* NHRP (alpha)\n\nInstallation & Use\n------------------\n\nFor source tarballs, see the\n[releases page](https://github.com/FRRouting/frr/releases).\n\nFor Debian and its derivatives, use the APT repository at\n[https://deb.frrouting.org/](https://deb.frrouting.org/).\n\nInstructions on building and installing from source for supported platforms may\nbe found in the\n[developer docs](http://docs.frrouting.org/projects/dev-guide/en/latest/building.html).\n\nOnce installed, please refer to the [user guide](http://docs.frrouting.org/)\nfor instructions on use.\n\nCommunity\n---------\n\nThe FRRouting email list server is located\n[here](https://lists.frrouting.org/listinfo) and offers the following public\nlists:\n\n| Topic             | List                         |\n|-------------------|------------------------------|\n| Development       | dev@lists.frrouting.org      |\n| Users & Operators | frog@lists.frrouting.org     |\n| Announcements     | announce@lists.frrouting.org |\n\nFor chat, we currently use [Slack](https://frrouting.slack.com). You can join\nby clicking the \"Slack\" link under the\n[Participate](https://frrouting.org/community) section of our website.\n\n\nContributing\n------------\n\nFRR maintains [developer's documentation](http://docs.frrouting.org/projects/dev-guide/en/latest/index.html)\nwhich contains the [project workflow](http://docs.frrouting.org/projects/dev-guide/en/latest/workflow.html)\nand expectations for contributors. Some technical documentation on project\ninternals is also available.\n\nWe welcome and appreciate all contributions, no matter how small!\n\n\nSecurity\n--------\n\nTo report security issues, please use our security mailing list:\n\n```\nsecurity [at] lists.frrouting.org\n```\n"
        },
        {
          "name": "alpine",
          "type": "tree",
          "content": null
        },
        {
          "name": "babeld",
          "type": "tree",
          "content": null
        },
        {
          "name": "bfdd",
          "type": "tree",
          "content": null
        },
        {
          "name": "bgpd",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 0.21484375,
          "content": "#!/bin/sh\n\n# This file exists to document the proper way to initialize autotools,\n# and so that those used to the presence of bootstrap.sh or autogen.sh\n# will have an eaiser time.\n\nexec autoreconf -is -Wall,no-override\n"
        },
        {
          "name": "buildtest.sh",
          "type": "blob",
          "size": 2.4951171875,
          "content": "#!/bin/bash\n# SPDX-License-Identifier: NONE\n# written 2012-2013 by David Lamparter, placed in Public Domain.\n#\n# builds some git commit of FRR in some different configurations\n# usage: buildtest.sh [commit [configurations...]]\n\nbasecfg=\"--prefix=/usr --enable-user=frr --enable-group=frr --enable-vty-group=frr --enable-configfile-mask=0660 --enable-logfile-mask=0640 --enable-vtysh --sysconfdir=/etc --localstatedir=/var --libdir=/usr/lib64/frr  --enable-rtadv --disable-static --enable-isisd --enable-multipath=0 --enable-pimd --enable-werror\"\n\nconfigs_base=\"gcc|$basecfg\"\n\nconfigs_ext=\"gcc|$basecfg --enable-opaque-lsa --enable-ospf-te --enable-ospfclient --enable-isis-topology\"\nconfigs_snmp=\"gcc|$basecfg --enable-opaque-lsa --enable-ospf-te --enable-ospfclient --enable-isis-topology --enable-snmp\"\nconfigs_clang=\"clang|$basecfg --enable-opaque-lsa --enable-ospf-te --enable-ospfclient --enable-isis-topology\"\nconfigs_icc=\"icc|$basecfg --enable-opaque-lsa --enable-ospf-te --enable-ospfclient --enable-isis-topology\"\n\ndefconfigs=\"base ext\"\nnet-snmp-config --version\t&> /dev/null && defconfigs=\"$defconfigs snmp\"\nclang --version\t\t\t&> /dev/null && defconfigs=\"$defconfigs clang\"\nicc --version\t\t\t&> /dev/null && defconfigs=\"$defconfigs icc\"\n\necho \"enabled configurations: $defconfigs\"\n\ncc_gcc=\"CC=gcc; export CC\"\ncc_clang=\"CC=clang; export CC\"\ncc_icc=\"CC=icc; export CC\"\n\n###############################\n\nerrfunc() {\n\techo \"something went wrong! check $TEMP\"\n\texit 1\n}\n\nset -e\ntrap errfunc ERR\n\nCOMMITREF=\"$1\"\nCOMMITISH=\"`git rev-list --max-count=1 ${COMMITREF:-HEAD}`\"\nTEMP=\"`mktemp -d -t frrbuild.XXXXXX`\"\nBASE=\"`pwd`\"\nCONFIGS=\"$2\"\nMAKE=\"${MAKE:-make}\"\n\necho using temporary directory: $TEMP\necho git commit used:\ngit --no-pager log -n 1 --pretty=oneline \"$COMMITISH\"\n\ncd \"$TEMP\"\ngit clone \"$BASE\" \"source\"\ncd \"source\"\ngit checkout -b build \"$COMMITISH\"\ngit clean -d -f -x\nsh bootstrap.sh\n\ncd ..\n\necho -e \"\\n\\n\\n\\n\\033[33;1mmaking dist tarball\\033[m\"\n\nmkdir build_dist\ncd build_dist\n../source/configure\n${MAKE} distdir=sdist dist-gzip\ncd ..\ntar zxvf build_dist/sdist.tar.gz\n\nfor cfg in ${CONFIGS:-$defconfigs}; do\n\techo -e \"\\n\\n\\n\\n\\033[33;1mbuilding configuration $cfg\\033[m\"\n\tconfig=\"\\${configs_$cfg}\"\n\teval \"config=$config\"\n\n\tcc=\"${config%%|*}\"\n\targs=\"${config#*|}\"\n\n\tccset=\"\\${cc_$cc}\"\n\teval \"ccset=$ccset\"\n\teval \"$ccset\"\n\n\tbdir=\"build_$cfg\"\n\tmkdir \"$bdir\"\n\tcd \"$bdir\"\n\t../sdist/configure $args\n\t${MAKE} -j5\n\t${MAKE} check\n\t${MAKE} DESTDIR=\"$TEMP/inst_$cfg\" install\n\tcd ..\ndone\n\necho -e \"\\n\\n\\n\\neverything seems ok. you may now\\n\\trm -rf $TEMP\"\n"
        },
        {
          "name": "config.version.in",
          "type": "blob",
          "size": 0.189453125,
          "content": "# this file is used to carry --with-pkg-extra-version into tarballs\nEXTRAVERSION=\"@EXTRAVERSION@\"\n# for easy access by scripts before ./configure is run\nDIST_PACKAGE_VERSION=\"@PACKAGE_VERSION@\"\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 87.640625,
          "content": "##\n## Configure template file for FRRouting.\n## autoconf will generate a configure script.\n##\n##  Copyright (c) 1996, 97, 98, 99, 2000 Kunihiro Ishiguro <kunihiro@zebra.org>\n##  Portions Copyright (c) 2003 Paul Jakma <paul@dishone.st>\n##\nAC_PREREQ([2.69])\n\nAC_INIT([frr], [10.3-dev], [https://github.com/frrouting/frr/issues])\nPACKAGE_URL=\"https://frrouting.org/\"\nAC_SUBST([PACKAGE_URL])\nPACKAGE_FULLNAME=\"FRRouting\"\nAC_SUBST([PACKAGE_FULLNAME])\n\nCONFIG_ARGS=\"`echo $ac_configure_args | sed -e \\\"s% '[[A-Z]]*FLAGS=[[^']]\\+'%%g\\\"`\"\nAC_SUBST([CONFIG_ARGS])\n\nAC_CONFIG_SRCDIR([lib/zebra.h])\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_AUX_DIR([m4/ac])\n\ndnl ------------------------------\ndnl system paths\ndnl ------------------------------\ndnl Versions of FRR (or Quagga, or Zebra) before ca. 9.2 used sysconfdir and\ndnl localstatedir as-is, without appending /frr.  The /frr was expected to be\ndnl given on ./configure invocations.\ndnl\ndnl This does not match standard behavior by other packages and makes FRR\ndnl specific packaging changes necessary to add these options.  localstatedir\ndnl was also misused to include the /run part (it normally is only /var),\ndnl leaving no path configuration option that references /var itself.  This\ndnl is because runstatedir did not exist in ancient autoconf.\ndnl\ndnl The path options have been changed to expect plain / system prefix\ndnl directories.  As a temporary workaround to not break packaging, eventual\ndnl /frr suffixes are stripped and a warning is printed.\n\npath_warn_banner=false\n\nAC_MSG_CHECKING([whether --sysconfdir option is FRR-specific])\ncase \"$sysconfdir\" in\n  */frr)\n    AC_MSG_RESULT([yes, ends in /frr - removing suffix])\n    AC_MSG_WARN([Please remove /frr suffix from --sysconfdir=\"${sysconfdir}\" (it should be /etc in 99% of cases)])\n    sysconfdir=\"${sysconfdir%/frr}\"\n    path_warn_banner=true\n    ;;\n  *)\n    AC_MSG_RESULT([no, as expected])\n    ;;\nesac\n\nfrr_sysconfdir=\"\\${sysconfdir}/frr\"\n\nAC_MSG_CHECKING([whether --localstatedir option is FRR-specific])\ncase \"$localstatedir\" in\n  */run/frr)\n    AC_MSG_RESULT([yes, ends in /run/frr - removing suffix])\n    AC_MSG_WARN([Please remove /run/frr suffix from --localstatedir=${localstatedir} (it should be /var in 99% of cases)])\n    localstatedir=\"${localstatedir%/run/frr}\"\n    path_warn_banner=true\n    ;;\n  */frr)\n    AC_MSG_RESULT([yes, ends in /frr - removing suffix])\n    AC_MSG_WARN([The --localstatedir=${localstatedir} option seems to include /frr but not /run, this is unexpected.  Please check for consistency.)])\n    localstatedir=\"${localstatedir%/frr}\"\n    path_warn_banner=true\n    ;;\n  *)\n    AC_MSG_RESULT([no, as expected])\n    ;;\nesac\n\ndnl runstatedir is either ${localstatedir}/run or plain /run\ndnl the change of localstatedir above may impact this\ndnl\ndnl note runstatedir was never used with /frr as the other two above, so does\ndnl not need the same cleanup hack\n: \"${runstatedir:=\\${localstatedir\\}/run}\"\nfrr_runstatedir=\"\\${runstatedir}/frr\"\n\nif $path_warn_banner; then\n  AC_MSG_WARN([^])\n  AC_MSG_WARN([^])\n  AC_MSG_WARN([^ warnings regarding system path configuration were printed above])\n  AC_MSG_WARN([^ paths have been adjusted by temporary workarounds])\n  AC_MSG_WARN([^ please fix your ./configure invocation (remove /frr) so it will work without the workarounds])\n  AC_MSG_WARN([^])\n  AC_MSG_WARN([^])\nfi\n\nfrr_libstatedir=\"\\${localstatedir}/lib/frr\"\n\ndnl -----------------------------------\ndnl Get hostname and other information.\ndnl -----------------------------------\nAC_CANONICAL_BUILD()\nAC_CANONICAL_HOST()\n\nAC_ARG_VAR([AR],[archiver command])\nAC_ARG_VAR([LD],[linker command])\nAC_ARG_VAR([OBJCOPY],[objcopy command])\nAC_ARG_VAR([OBJDUMP],[objdump command])\nAC_ARG_VAR([RANLIB],[ranlib command])\nAC_ARG_VAR([STRIP],[strip command])\n\nhosttools_clippy=\"false\"\nbuild_clippy=\"true\"\n\ndnl case 1: external clippy\nif test -n \"$with_clippy\" -a \"$with_clippy\" != \"no\" -a \"$with_clippy\" != \"yes\"; then\n  if test \"$enable_clippy_only\" = \"yes\"; then\n    AC_MSG_ERROR([--enable-clippy-only does not make sense with --with-clippy])\n  fi\n\n  CLIPPY=\"$with_clippy\"\n  build_clippy=\"false\"\n  if test ! -x \"$with_clippy\"; then\n    AC_MSG_ERROR([clippy tool ($with_clippy) is not executable])\n  fi\n\ndnl case 2: cross-compiling internal clippy\nelif test \"$host\" != \"$build\"; then\n  if test \"$srcdir\" = \".\"; then\n    AC_MSG_ERROR([cross-compilation is only possible with builddir separate from srcdir or by building clippy separately and using the --with-clippy option.  create a separate directory and run as .../path-to-frr/configure.])\n  fi\n  test -d hosttools || mkdir hosttools\n  abssrc=\"`cd \\\"${srcdir}\\\"; pwd`\"\n\n  AC_MSG_NOTICE([...])\n  AC_MSG_NOTICE([... cross-compilation: creating hosttools directory and self-configuring for build platform tools])\n  AC_MSG_NOTICE([... use HOST_CPPFLAGS / HOST_CFLAGS / HOST_LDFLAGS if necessary])\n  AC_MSG_NOTICE([...])\n\n  (\n    for var in $ac_precious_vars; do\n      dnl special cases\n      case \"$var\" in\n      YACC|YFLAGS) continue;;\n      PYTHON*)     retain=true;;\n      *)           retain=false;\n      esac\n\n      eval \"hostvar=\\\"\\${HOST_$var}\\\"\"\n      eval \"targetvar=\\\"\\${$var}\\\"\"\n      if test -n \"$hostvar\"; then\n        eval \"$var='$hostvar'\"\n        _AS_ECHO_LOG([host $var='$hostvar'])\n      elif $retain; then\n        _AS_ECHO_LOG([host retain $var='$targetvar'])\n      else\n        eval \"unset $var\"\n        _AS_ECHO_LOG([host unset $var])\n      fi\n    done\n    cd hosttools\n    \"${abssrc}/configure\" \"--host=$build\" \"--build=$build\" \"--enable-clippy-only\" \"--disable-nhrpd\" \"--disable-vtysh\"\n  ) || exit 1\n\n  AC_MSG_NOTICE([...])\n  AC_MSG_NOTICE([... cross-compilation: finished self-configuring for build platform tools])\n  AC_MSG_NOTICE([...])\n\n  build_clippy=\"false\"\n  hosttools_clippy=\"true\"\n  CLIPPY=\"hosttools/lib/clippy\"\n\ndnl case 3: normal build internal clippy\nelse\n  CLIPPY=\"lib/clippy\\$(EXEEXT)\"\nfi\nAC_SUBST([CLIPPY])\nAM_CONDITIONAL([BUILD_CLIPPY], [$build_clippy])\nAM_CONDITIONAL([HOSTTOOLS_CLIPPY], [$hosttools_clippy])\nAM_CONDITIONAL([ONLY_CLIPPY], [test \"$enable_clippy_only\" = \"yes\"])\n\n# Disable portability warnings -- our automake code (in particular\n# common.am) uses some constructs specific to gmake.\nAM_INIT_AUTOMAKE([1.12 -Wno-portability foreign])\nm4_ifndef([AM_SILENT_RULES], [m4_define([AM_SILENT_RULES],[])])\nAM_SILENT_RULES([yes])\nAC_CONFIG_HEADERS([config.h])\n\nAC_PATH_PROG([PERL], [perl])\nPKG_PROG_PKG_CONFIG\n\ndnl default is to match previous behavior\npkgsrcrcdir=\"\"\nAC_ARG_ENABLE([pkgsrcrcdir],\n\t  AS_HELP_STRING([--enable-pkgsrcrcdir],\n\t\t\t [specify directory for rc.d scripts]),\n\t\t\t pkgsrcrcdir=\"$enableval\",)\ndnl XXX add --pkgsrcrcdir to autoconf standard directory list somehow\nAC_SUBST([pkgsrcrcdir])\nAM_CONDITIONAL([PKGSRC], [test \"$pkgsrcrcdir\" != \"\"])\n\nAC_ARG_WITH([moduledir], [AS_HELP_STRING([--with-moduledir=DIR], [module directory (${libdir}/frr/modules)])], [\n\tmoduledir=\"$withval\"\n], [\n\tmoduledir=\"\\${libdir}/frr/modules\"\n])\nAC_SUBST([moduledir], [$moduledir])\n\nAC_ARG_WITH([scriptdir], [AS_HELP_STRING([--with-scriptdir=DIR], [script directory (${sysconfdir}/frr/scripts)])], [\n\tscriptdir=\"$withval\"\n], [\n\tscriptdir=\"\\${frr_sysconfdir}/scripts\"\n])\nAC_SUBST([scriptdir], [$scriptdir])\n\nAC_ARG_WITH([yangmodelsdir], [AS_HELP_STRING([--with-yangmodelsdir=DIR], [yang models directory (${datarootdir}/yang)])], [\n\tyangmodelsdir=\"$withval\"\n], [\n\tyangmodelsdir=\"\\${datarootdir}/yang\"\n])\nAC_SUBST([yangmodelsdir])\n\nAC_ARG_WITH([vici-socket], [AS_HELP_STRING([--with-vici-socket=PATH], [vici-socket (/var/run/charon.vici)])], [\n\tvici_socket=\"$withval\"\n], [\n\tvici_socket=\"/var/run/charon.vici\"\n])\nAC_DEFINE_UNQUOTED([VICI_SOCKET], [\"$vici_socket\"], [StrongSWAN vici socket path])\n\nAC_ARG_ENABLE(tcmalloc,\n\tAS_HELP_STRING([--enable-tcmalloc], [Turn on tcmalloc]),\n[case \"${enableval}\" in\n  yes) tcmalloc_enabled=true\nLIBS=\"$LIBS -ltcmalloc_minimal\"\n ;;\n  no)  tcmalloc_enabled=false ;;\n  *) AC_MSG_ERROR([bad value ${enableval} for --enable-tcmalloc]) ;;\nesac],[tcmalloc_enabled=false])\n\n\ndnl Thanks autoconf, but we don't want a default -g -O2.  We have our own\ndnl flag determination logic.\nCFLAGS=\"${CFLAGS:-}\"\n\ndnl --------------------\ndnl Check CC and friends\ndnl --------------------\ndnl note orig_cflags is also used further down\norig_cflags=\"$CFLAGS\"\norig_cxxflags=\"$CXXFLAGS\"\nAC_LANG([C])\nAC_PROG_CC\nAC_PROG_CPP\nAC_PROG_CXX\nAM_PROG_CC_C_O\ndnl remove autoconf default \"-g -O2\"\nCFLAGS=\"$orig_cflags\"\nCXXFLAGS=\"$orig_cxxflags\"\n\ndnl Some special handling for ICC later on\nif test \"$CC\" = \"icc\"; then\n    cc_is_icc=\"yes\"\nfi\n\nPKG_PROG_PKG_CONFIG\n\ndnl it's 2019, sed is sed.\nSED=sed\nAC_SUBST([SED])\n\ndnl try and enable CFLAGS that are useful for FRR\ndnl - specifically, options to control warnings\n\nAC_SUBST([AC_CFLAGS])\nAC_USE_SYSTEM_EXTENSIONS\nAC_DEFUN([AC_C_FLAG], [{\n    m4_pushdef([cachename],[m4_translit([frr_cv_$1],[ =-+/{}$],[________])])\n    AC_CACHE_CHECK([[whether $CC supports $1]], cachename, [\n\tAC_LANG_PUSH([C])\n\tac_c_flag_save=\"$CFLAGS\"\n\tdnl GCC ignores unknown -Wno-whatever flags, but errors on -Wwhatever\n\tdnl except when it ignores them it prints:\n\tdnl   cc1: note: unrecognized command-line option ‘-Wno-whatever’ may have been intended to silence earlier diagnostics\n\tdnl which is annoying as hell.  So check for the positive flag instead.\n\tflag_add=\"$1\"\n\tif test \"$flag_add\" != \"${flag_add#-Wno-}\"; then\n\t    CFLAGS=\"$CFLAGS -W${flag_add#-Wno-}\"\n\telse\n\t    CFLAGS=\"$CFLAGS $flag_add\"\n\tfi\n\tAC_COMPILE_IFELSE(\n\t\t[AC_LANG_PROGRAM([[$4]])],\n\t\t[\n\t\t\tcachename=yes\n\t\t], [\n\t\t\tcachename=no\n\t\t])\n\tCFLAGS=\"$ac_c_flag_save\"\n\tAC_LANG_POP([C])\n    ])\n    if test \"$cachename\" = \"yes\"; then\n\tm4_if([$3], [], [AC_CFLAGS=\"$AC_CFLAGS $1\"], [$3])\n    else\n\t:\n\t$2\n    fi\n    m4_popdef([cachename])\n}])\n\nAC_DEFUN([AC_LINK_IFELSE_FLAGS], [{\n\tAC_LANG_PUSH([C])\n\tac_cflags_save=\"$CFLAGS\"\n\tac_libs_save=\"$LIBS\"\n\tCFLAGS=\"$CFLAGS $1\"\n\tLIBS=\"$LIBS $2\"\n\tAC_LINK_IFELSE(\n\t\t[$3],\n\t\t[\n\t\t\tCFLAGS=\"$ac_cflags_save\"\n\t\t\tLIBS=\"$ac_libs_save\"\n\t\t\tm4_default([$5], [\n\t\t\t\tAC_MSG_RESULT([yes])\n\t\t\t])\n\t\t], [\n\t\t\tCFLAGS=\"$ac_cflags_save\"\n\t\t\tLIBS=\"$ac_libs_save\"\n\t\t\tm4_default([$4], [\n\t\t\t\tAC_MSG_RESULT([no])\n\t\t\t])\n\t\t])\n\tAC_LANG_POP([C])\n\t}])\n\ndnl ICC won't bail on unknown options without -diag-error 10006\ndnl need to do this first so we get useful results for the other options\nif test \"$cc_is_icc\" = \"yes\"; then\n    AC_C_FLAG([-diag-error 10006])\nfi\n\ndnl autoconf 2.69 AC_PROG_CC_C99 is \"state of the art\"\ndnl autoconf 2.70 AC_PROG_CC_C99 is deprecated and AC_PROC_CC tries to do C11\nm4_if(m4_version_compare(m4_defn([AC_AUTOCONF_VERSION]), [2.70]), [-1], [dnl\n  dnl autoconf < 2.70\n  AC_PROG_CC_C99\n\n  dnl AC_PROG_CC_C99 may change CC to include -std=gnu99 or something\n  ac_cc=\"$CC\"\n  CC=\"${CC% -std=gnu99}\"\n  CC=\"${CC% -std=c99}\"\n\n  AC_C_FLAG([-std=gnu11], [CC=\"$ac_cc\"], [CC=\"$CC -std=gnu11\"])\n], [\n  dnl autoconf >= 2.70\n  if test \"$ac_cv_prog_cc_c11\" = \"no\"; then\n    AC_MSG_ERROR([ISO C11 compiler support (with GNU extensions) is required.])\n  fi\n])\n\ndnl if the user has specified any CFLAGS, override our settings\nif test \"$enable_gcov\" = \"yes\"; then\n   if test \"$orig_cflags\" = \"\"; then\n      AC_C_FLAG([--coverage])\n      AC_C_FLAG([-O0])\n   fi\n\n   AC_LDFLAGS=\"${AC_LDFLAGS} --coverage\"\nfi\n\nif test \"$enable_clang_coverage\" = \"yes\"; then\n   AC_C_FLAG([-fprofile-instr-generate], [\n     AC_MSG_ERROR([$CC does not support -fprofile-instr-generate.])\n   ])\n   AC_C_FLAG([-fcoverage-mapping], [\n     AC_MSG_ERROR([$CC does not support -fcoverage-mapping.])\n   ])\nfi\n\nAM_CONDITIONAL([SCRIPTING], [test \"$enable_scripting\" = \"yes\"])\n\nif test \"$enable_scripting\" = \"yes\"; then\n   AX_PROG_LUA([5.3], [5.4], [], [\n     AC_MSG_ERROR([Lua 5.3 is required to build with Lua support. No other version is supported.])\n   ])\n   AX_LUA_HEADERS([], [\n     AC_MSG_ERROR([Lua 5.3 headers are required to build with Lua support. No other version is supported.])\n   ])\n   PKG_CHECK_MODULES([LUA], [lua5.3], [\n     AC_DEFINE([HAVE_SCRIPTING], [1], [Have support for scripting])\n     LIBS=\"$LIBS $LUA_LIBS\"\n     SCRIPTING=true\n   ], [\n      AX_LUA_LIBS([\n        AC_DEFINE([HAVE_SCRIPTING], [1], [Have support for scripting])\n        LIBS=\"$LIBS $LUA_LIB\"\n        SCRIPTING=true\n      ], [\n        SCRIPTING=false\n        AC_MSG_ERROR([Lua 5.3 libraries are required to build with Lua support. No other version is supported.])\n      ])\n    ])\nfi\n\ndnl the following flags go in CFLAGS rather than AC_CFLAGS since they make\ndnl sense to be overridden by the user\nif test \"$enable_dev_build\" = \"yes\"; then\n   AC_DEFINE([DEV_BUILD], [1], [Build for development])\n   if test \"$orig_cflags\" = \"\"; then\n      AC_C_FLAG([-O0],,[CFLAGS=\"$CFLAGS -O0\"])\n      AC_C_FLAG([-g3],,[CFLAGS=\"$CFLAGS -g3\"])\n      AC_C_FLAG([-ggdb3],,[CFLAGS=\"$CFLAGS -ggdb3\"])\n   fi\nelse\n   if test \"$orig_cflags\" = \"\"; then\n      AC_C_FLAG([-g],,[CFLAGS=\"$CFLAGS -g\"])\n      AC_C_FLAG([-O2],,[CFLAGS=\"$CFLAGS -O2\"])\n   fi\nfi\n\ndnl just stick -g into LDFLAGS, if we don't have it in CFLAGS it won't do much\nLDFLAGS=\"$LDFLAGS -g\"\n\nAM_CONDITIONAL([DEV_BUILD], [test \"$enable_dev_build\" = \"yes\"])\n\ndnl -fms-extensions causes clang to have a built-in __wchar_t on OpenBSD,\ndnl which just straight up breaks compiling any code.\ndnl (2022-04-04 / OpenBSD 7 / clang 11.1.0)\nAH_VERBATIM([OpenBSD], [\n#ifdef __OpenBSD__\n#define __wchar_t __wchar_t_ignore\n#include <stdint.h>\n#undef __wchar_t\n#endif\n])\n\ndnl always want these CFLAGS\nAC_C_FLAG([-fms-extensions], [\n  AC_MSG_ERROR([$CC does not support unnamed struct fields (-fms-extensions)])\n])\nAC_C_FLAG([-fno-omit-frame-pointer])\nAC_C_FLAG([-funwind-tables])\nAC_C_FLAG([-Wall])\nAC_C_FLAG([-Wextra])\nAC_C_FLAG([-Wformat-nonliteral])\nAC_C_FLAG([-Wformat-security])\nAC_C_FLAG([-Wswitch-enum])\nAC_C_FLAG([-Wstrict-prototypes])\nAC_C_FLAG([-Wmissing-prototypes])\nAC_C_FLAG([-Wmissing-declarations])\nAC_C_FLAG([-Wpointer-arith])\nAC_C_FLAG([-Wbad-function-cast])\nAC_C_FLAG([-Wwrite-strings])\nAC_C_FLAG([-Wundef])\nAC_C_FLAG([-Wimplicit-fallthrough])\nif test \"$enable_gcc_ultra_verbose\" = \"yes\" ; then\n  AC_C_FLAG([-Wcast-qual])\n  AC_C_FLAG([-Wmissing-noreturn])\n  AC_C_FLAG([-Wmissing-format-attribute])\n  AC_C_FLAG([-Wunreachable-code])\n  AC_C_FLAG([-Wpacked])\n  AC_C_FLAG([-Wpadded])\n  AC_C_FLAG([-Wshadow])\nelse\n  AC_C_FLAG([-Wno-unused-result])\nfi\nAC_C_FLAG([-Wno-unused-parameter])\nAC_C_FLAG([-Wno-missing-field-initializers])\nAC_C_FLAG([-Wno-microsoft-anon-tag])\nAC_C_FLAG([-Wno-error=deprecated-declarations])\n\nAC_C_FLAG([-Wc++-compat], [], [CXX_COMPAT_CFLAGS=\"-Wc++-compat\"])\nAC_SUBST([CXX_COMPAT_CFLAGS])\n\ndnl ICC emits a broken warning for const char *x = a ? \"b\" : \"c\";\ndnl for some reason the string consts get 'promoted' to char *,\ndnl triggering a const to non-const conversion warning.\nif test \"$cc_is_icc\" = \"yes\"; then\n    AC_C_FLAG([-diag-disable 3179])\nfi\n\nif test \"$enable_werror\" = \"yes\" ; then\n  WERROR=\"-Werror\"\nfi\nAC_SUBST([WERROR])\n\nSAN_FLAGS=\"\"\nif test \"$enable_address_sanitizer\" = \"yes\"; then\n  AC_C_FLAG([-fsanitize=address], [\n    AC_MSG_ERROR([$CC does not support Address Sanitizer.])\n  ], [\n    SAN_FLAGS=\"$SAN_FLAGS -fsanitize=address\"\n  ])\nfi\nif test \"$enable_thread_sanitizer\" = \"yes\"; then\n  AC_C_FLAG([-fsanitize=thread], [\n    AC_MSG_ERROR([$CC does not support Thread Sanitizer.])\n  ], [\n    SAN_FLAGS=\"$SAN_FLAGS -fsanitize=thread\"\n  ])\nfi\nif test \"$enable_memory_sanitizer\" = \"yes\"; then\n  AC_C_FLAG([-fsanitize=memory -fPIE -pie], [\n    AC_MSG_ERROR([$CC does not support Memory Sanitizer.])\n  ], [\n    SAN_FLAGS=\"$SAN_FLAGS -fsanitize=memory -fPIE -pie\"\n  ])\nfi\nif test \"$enable_undefined_sanitizer\" = \"yes\"; then\n  AC_C_FLAG([-fsanitize=undefined], [\n    AC_MSG_ERROR([$CC does not support UndefinedBehaviorSanitizer.])\n  ], [\n    SAN_FLAGS=\"$SAN_FLAGS -fsanitize=undefined\"\n  ])\nfi\nAC_SUBST([SAN_FLAGS])\n\ndnl frr-format.so\nif test \"$with_frr_format\" != \"no\" -a \"$with_frr_format\" != \"yes\" -a -n \"$with_frr_format\"; then\n  AC_C_FLAG([-fplugin=${with_frr_format}], [\n    AC_MSG_ERROR([specified frr-format plugin ($with_frr_format) does not work])\n  ],,[\n#ifndef _FRR_ATTRIBUTE_PRINTFRR\n#error plugin not loaded\n#endif\n#if _FRR_ATTRIBUTE_PRINTFRR < 0x10000\n#error plugin too old\n#endif\n  ])\nelif test \"$with_frr_format\" = \"no\"; then\n  : #nothing\nelse\n  AC_C_FLAG([-fplugin=tools/gcc-plugins/frr-format.so],[\n    AC_C_FLAG([-fplugin=frr-format],[\n      if test \"$with_frr_format\" = \"yes\"; then\n        AC_MSG_ERROR([frr-format plugin requested but not found])\n      fi\n    ],,[\n#ifndef _FRR_ATTRIBUTE_PRINTFRR\n#error plugin not loaded\n#endif\n#if _FRR_ATTRIBUTE_PRINTFRR < 0x10000\n#error plugin too old\n#endif\n    ])\n  ],,[\n#ifndef _FRR_ATTRIBUTE_PRINTFRR\n#error plugin not loaded\n#endif\n#if _FRR_ATTRIBUTE_PRINTFRR < 0x10000\n#error plugin too old\n#endif\n  ])\nfi\n\nAC_MSG_CHECKING([whether linker supports __start/stop_section symbols])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <stdio.h>\nint __attribute__((section(\"secttest\"))) var = 1;\nextern int __start_secttest, __stop_secttest;\n]], [[\n  void *a = &var, *b = &__start_secttest, *c = &__stop_secttest;\n  printf(\"%p %p %p\\n\", a, b, c);\n]])], [\n  AC_MSG_RESULT(yes)\n  AC_DEFINE(HAVE_SECTION_SYMS, 1, [have __start/stop_section symbols])\n], [\n  AC_MSG_RESULT(no)\n])\n\ndnl ----------\ndnl Essentials\ndnl ----------\n\nAX_PTHREAD([\n  CC=\"$PTHREAD_CC\"\n  AC_CFLAGS=\"$AC_CFLAGS $PTHREAD_CFLAGS\"\n  LIBS=\"$PTHREAD_LIBS $LIBS\"\n], [\n  AC_MSG_FAILURE([This FRR version needs pthreads])\n])\n\norig_cflags=\"$CFLAGS\"\nCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n\nAC_SEARCH_LIBS([pthread_condattr_setclock], [],\n\t\t[frr_cv_pthread_condattr_setclock=yes],\n\t\t[frr_cv_pthread_condattr_setclock=no])\nif test \"$frr_cv_pthread_condattr_setclock\" = \"yes\"; then\n  AC_DEFINE([HAVE_PTHREAD_CONDATTR_SETCLOCK], [1], [Have pthread.h pthread_condattr_setclock])\nfi\n\nAC_CHECK_HEADERS([pthread_np.h],,, [\n#include <pthread.h>\n])\nAC_CHECK_FUNCS([pthread_setname_np pthread_set_name_np pthread_getthreadid_np])\n\nCFLAGS=\"$orig_cflags\"\n\ndnl --------------\ndnl Check programs\ndnl --------------\nAC_PROG_INSTALL\nAC_PROG_LN_S\nAC_CHECK_TOOL([AR], [ar])\n\ndnl -------\ndnl libtool\ndnl -------\nAC_ARG_ENABLE([static-bin],\n  AS_HELP_STRING([--enable-static-bin], [link binaries statically]))\nLT_INIT\n_LT_CONFIG_LIBTOOL([\n  patch -N -i \"${srcdir}/m4/libtool-whole-archive.patch\" libtool >&AS_MESSAGE_LOG_FD || \\\n    AC_MSG_WARN([Could not patch libtool for static linking support.  Loading modules into a statically linked daemon will fail.])\ndnl the -i option is not POSIX sed and the BSDs implement it differently\ndnl cat'ing the output back instead of mv/cp keeps permissions on libtool intact\n  sed -e 's%func_warning \"relinking%true #\\0%'                   libtool > libtool.sed && cat libtool.sed > libtool\n  sed -e 's%func_warning \"remember to run%true #\\0%'             libtool > libtool.sed && cat libtool.sed > libtool\n  sed -e 's%func_warning \".*has not been installed in%true #\\0%' libtool > libtool.sed && cat libtool.sed > libtool\n  test -f libtool.sed && rm libtool.sed\n])\nif test \"$enable_static_bin\" = \"yes\"; then\n  AC_LDFLAGS_EXEC=\"-static\"\n  if test \"$enable_static\" != \"yes\"; then\n    AC_MSG_ERROR([The --enable-static-bin option must be combined with --enable-static.])\n  fi\nfi\nif test \"$enable_shared\" != \"yes\"; then\n  AC_MSG_ERROR([FRR cannot be built with --disable-shared.  If you want statically linked daemons, use --enable-shared --enable-static --enable-static-bin])\nfi\nAC_SUBST([AC_LDFLAGS])\nAC_SUBST([AC_LDFLAGS_EXEC])\nAM_CONDITIONAL([STATIC_BIN], [test \"$enable_static_bin\" = \"yes\"])\n\ndnl libtool, the repository of all knowledge related linkers, is too stupid to\ndnl correctly tell the linker how to build modules.\nif test -z \"$module_cmds\"; then\n  module_cmds=\"`echo \\\"$archive_cmds\\\" | sed -e 's%$wl-soname $wl$soname%%'`\"\nfi\nif test -z \"$module_expsym_cmds\"; then\n  module_expsym_cmds=\"`echo \\\"$archive_expsym_cmds\\\" | sed -e 's%$wl-soname $wl$soname%%'`\"\nfi\n\nAC_ARG_ENABLE([rpath],\n  [AS_HELP_STRING([--enable-rpath], [set hardcoded rpaths in the executable @<:@default=yes@:>@])],\n  [],\n  [enable_rpath=yes])\n\ndnl $AR and $RANLIB are set by LT_INIT above\nAC_MSG_CHECKING([whether $AR supports D option])\nif $AR crD conftest.a >/dev/null 2>/dev/null; then\n  AC_MSG_RESULT([yes])\n  dnl ARFLAGS is for automake, AR_FLAGS for libtool m-(\n  ARFLAGS=\"crD\"\n  AR_FLAGS=\"crD\"\nelse\n  AC_MSG_RESULT([no])\n  ARFLAGS=\"cru\"\n  AR_FLAGS=\"cru\"\nfi\nAC_SUBST([ARFLAGS])\nAC_SUBST([AR_FLAGS])\n\nAC_MSG_CHECKING([whether $RANLIB supports D option])\nif $RANLIB -D conftest.a >conftest.err 2>&1; then\n  if grep -q -- '-D' conftest.err; then\n    AC_MSG_RESULT([no])\n  else\n    AC_MSG_RESULT([yes])\n    RANLIB=\"$RANLIB -D\"\n  fi\nelse\n  AC_MSG_RESULT([no])\nfi\nAC_SUBST([RANLIB])\n\ntest -f conftest.err && rm conftest.err\ntest -f conftest.a && rm conftest.a\n\ndnl ----------------------\ndnl Packages configuration\ndnl ----------------------\nif test -f config.version; then\n  . ./config.version\nelif test -f \"${srcdir}/config.version\"; then\n  . \"${srcdir}/config.version\"\nfi\nAC_ARG_WITH([pkg-extra-version],\n  AS_HELP_STRING([--with-pkg-extra-version=VER], [add extra version field, for packagers/distributions]), [\n  if test \"$withval\" = \"no\"; then\n    EXTRAVERSION=\n  else\n    EXTRAVERSION=$withval\n  fi\n], [])\nAC_ARG_WITH([pkg-git-version],\n\tAS_HELP_STRING([--with-pkg-git-version], [add git information to MOTD and build version string]),\n\t[ test \"$withval\" != \"no\" && with_pkg_git_version=\"yes\" ])\nAC_ARG_WITH([clippy],\n  AS_HELP_STRING([--with-clippy=PATH], [use external clippy helper program]))\nAC_ARG_WITH([vtysh_pager],\n\tAS_HELP_STRING([--with-vtysh-pager=PAGER], [control what pager is compiled in as default]),\n\tVTYSH_PAGER=$withval, VTYSH_PAGER=\"more\")\nAC_ARG_ENABLE([vtysh],\n  AS_HELP_STRING([--disable-vtysh], [do not build integrated vty shell for FRR]))\nAC_ARG_ENABLE([doc],\n  AS_HELP_STRING([--disable-doc], [do not build docs]))\nAC_ARG_ENABLE([doc-html],\n  AS_HELP_STRING([--enable-doc-html], [build HTML docs]))\nAC_ARG_ENABLE([zebra],\n  AS_HELP_STRING([--disable-zebra], [do not build zebra daemon]))\nAC_ARG_ENABLE([bgpd],\n  AS_HELP_STRING([--disable-bgpd], [do not build bgpd]))\nAC_ARG_ENABLE([mgmtd],\n  AS_HELP_STRING([--disable-mgmtd], [do not build mgmtd]))\nAC_ARG_ENABLE([mgmtd_local_validations],\n  AS_HELP_STRING([--enable-mgmtd-local-validations], [dev: unimplemented local validation]))\nAC_ARG_ENABLE([mgmtd_test_be_client],\n  AS_HELP_STRING([--enable-mgmtd-test-be-client], [build test backend client]))\nAC_ARG_ENABLE([fpm_listener],\n  AS_HELP_STRING([--enable-fpm-listener], [build fpm listener test program]))\nAC_ARG_ENABLE([ripd],\n  AS_HELP_STRING([--disable-ripd], [do not build ripd]))\nAC_ARG_ENABLE([ripngd],\n  AS_HELP_STRING([--disable-ripngd], [do not build ripngd]))\nAC_ARG_ENABLE([ospfd],\n  AS_HELP_STRING([--disable-ospfd], [do not build ospfd]))\nAC_ARG_ENABLE([ospf6d],\n  AS_HELP_STRING([--disable-ospf6d], [do not build ospf6d]))\nAC_ARG_ENABLE([ldpd],\n  AS_HELP_STRING([--disable-ldpd], [do not build ldpd]))\nAC_ARG_ENABLE([nhrpd],\n  AS_HELP_STRING([--disable-nhrpd], [do not build nhrpd]))\nAC_ARG_ENABLE([eigrpd],\n  AS_HELP_STRING([--disable-eigrpd], [do not build eigrpd]))\nAC_ARG_ENABLE([babeld],\n  AS_HELP_STRING([--disable-babeld], [do not build babeld]))\nAC_ARG_ENABLE([watchfrr],\n  AS_HELP_STRING([--disable-watchfrr], [do not build watchfrr]))\nAC_ARG_ENABLE([isisd],\n  AS_HELP_STRING([--disable-isisd], [do not build isisd]))\nAC_ARG_ENABLE([pimd],\n  AS_HELP_STRING([--disable-pimd], [do not build pimd]))\nAC_ARG_ENABLE([pim6d],\n  AS_HELP_STRING([--disable-pim6d], [do not build pim6d]))\nAC_ARG_ENABLE([pbrd],\n  AS_HELP_STRING([--disable-pbrd], [do not build pbrd]))\nAC_ARG_ENABLE([sharpd],\n  AS_HELP_STRING([--enable-sharpd], [build sharpd]))\nAC_ARG_ENABLE([staticd],\n  AS_HELP_STRING([--disable-staticd], [do not build staticd]))\nAC_ARG_ENABLE([fabricd],\n  AS_HELP_STRING([--disable-fabricd], [do not build fabricd]))\nAC_ARG_ENABLE([vrrpd],\n  AS_HELP_STRING([--disable-vrrpd], [do not build vrrpd]))\nAC_ARG_ENABLE([pathd],\n  AS_HELP_STRING([--disable-pathd], [do not build pathd]))\nAC_ARG_ENABLE([bgp-announce],\n  AS_HELP_STRING([--disable-bgp-announce], [turn off BGP route announcement]))\nAC_ARG_ENABLE([bgp-vnc],\n  AS_HELP_STRING([--disable-bgp-vnc],[turn off BGP VNC support]))\nAC_ARG_ENABLE([bgp-bmp],\n  AS_HELP_STRING([--disable-bgp-bmp],[turn off BGP BMP support]))\nAC_ARG_ENABLE([snmp],\n  AS_HELP_STRING([--enable-snmp], [enable SNMP support for agentx]))\nAC_ARG_ENABLE([config_rollbacks],\n  AS_HELP_STRING([--enable-config-rollbacks], [enable configuration rollbacks (requires sqlite3)]))\nAC_ARG_ENABLE([sysrepo],\n  AS_HELP_STRING([--enable-sysrepo], [enable sysrepo integration]))\nAC_ARG_ENABLE([grpc],\n  AS_HELP_STRING([--enable-grpc], [enable the gRPC northbound plugin]))\nAC_ARG_ENABLE([zeromq],\n  AS_HELP_STRING([--enable-zeromq], [enable ZeroMQ handler (libfrrzmq)]))\nAC_ARG_ENABLE([lttng],\n  AS_HELP_STRING([--enable-lttng], [enable LTTng tracing]))\nAC_ARG_ENABLE([usdt],\n  AS_HELP_STRING([--enable-usdt], [enable USDT probes]))\nAC_ARG_WITH([libpam],\n  AS_HELP_STRING([--with-libpam], [use libpam for PAM support in vtysh]))\nAC_ARG_ENABLE([ospfapi],\n  AS_HELP_STRING([--disable-ospfapi], [do not build OSPFAPI to access the OSPF LSA Database]))\nAC_ARG_ENABLE([ospfclient],\n  AS_HELP_STRING([--disable-ospfclient], [do not build OSPFAPI client for OSPFAPI,\n                          (this is the default if --disable-ospfapi is set)]))\nAC_ARG_WITH([log_timestamp_precision],\n  AS_HELP_STRING([--with-log-timestamp-precision=ARG], [set startup log timestamp precision, ARG must be 0-12]))\nAC_ARG_ENABLE([multipath],\n  AS_HELP_STRING([--enable-multipath=ARG], [enable multipath function, ARG must be digit]))\nAC_ARG_WITH([service_timeout],\n  AS_HELP_STRING([--with-service-timeout=ARG], [set service timeout value (2 minutes by default), ARG must be digit]))\nAC_ARG_ENABLE([user],\n  AS_HELP_STRING([--enable-user=USER], [user to run FRR suite as (default frr)]))\nAC_ARG_ENABLE([group],\n  AS_HELP_STRING([--enable-group=GROUP], [group to run FRR suite as (default frr)]))\nAC_ARG_ENABLE([vty_group],\n  AS_HELP_STRING([--enable-vty-group=ARG], [set vty sockets to have specified group as owner]))\nAC_ARG_ENABLE([configfile_mask],\n  AS_HELP_STRING([--enable-configfile-mask=ARG], [set mask for config files]))\nAC_ARG_ENABLE([logfile_mask],\n  AS_HELP_STRING([--enable-logfile-mask=ARG], [set mask for log files]))\nAC_ARG_ENABLE([realms],\n  AS_HELP_STRING([--enable-realms], [enable REALMS support under Linux]))\nAC_ARG_ENABLE([rtadv],\n  AS_HELP_STRING([--disable-rtadv], [disable IPV6 router advertisement feature]))\nAC_ARG_ENABLE([irdp],\n  AS_HELP_STRING([--enable-irdp], [enable IRDP server support in zebra]))\nAC_ARG_ENABLE([capabilities],\n  AS_HELP_STRING([--disable-capabilities], [disable using POSIX capabilities]))\nAC_ARG_ENABLE([gcc_ultra_verbose],\n  AS_HELP_STRING([--enable-gcc-ultra-verbose], [enable ultra verbose GCC warnings]))\nAC_ARG_ENABLE([backtrace],\n  AS_HELP_STRING([--disable-backtrace], [disable crash backtraces (default autodetect)]))\nAC_ARG_ENABLE([pcreposix],\n  AS_HELP_STRING([--enable-pcreposix], [enable using PCRE Posix libs for regex functions]))\nAC_ARG_ENABLE([pcre2posix],\n  AS_HELP_STRING([--enable-pcre2posix], [enable using PCRE2 Posix libs for regex functions]))\nAC_ARG_ENABLE([fpm],\n  AS_HELP_STRING([--enable-fpm], [enable Forwarding Plane Manager support]))\nAC_ARG_ENABLE([werror],\n  AS_HELP_STRING([--enable-werror], [enable -Werror (recommended for developers only)]))\nAC_ARG_ENABLE([cumulus],\n  AS_HELP_STRING([--enable-cumulus], [enable Cumulus Switch Special Extensions]))\nAC_ARG_ENABLE([datacenter],\n  AS_HELP_STRING([--enable-datacenter], [enable Compilation for Data Center Extensions]))\nAC_ARG_ENABLE([protobuf],\n  AS_HELP_STRING([--enable-protobuf], [Enable experimental protobuf support]))\nAC_ARG_ENABLE([oldvpn_commands],\n  AS_HELP_STRING([--enable-oldvpn-commands], [Keep old vpn commands]))\nAC_ARG_ENABLE([rpki],\n  AS_HELP_STRING([--enable-rpki], [enable RPKI prefix validation support]))\nAC_ARG_ENABLE([clippy-only],\n  AS_HELP_STRING([--enable-clippy-only], [Only build clippy]))\nAC_ARG_ENABLE([numeric_version],\n  AS_HELP_STRING([--enable-numeric-version], [Only numeric digits allowed in version (for Alpine)]))\nAC_ARG_ENABLE([gcov],\n  AS_HELP_STRING([--enable-gcov], [Collect coverage information with gcov]))\nAC_ARG_ENABLE([clang_coverage],\n  AS_HELP_STRING([--enable-clang-coverage], [Collect coverage information with Clang Coverage]))\nAC_ARG_ENABLE([bfdd],\n  AS_HELP_STRING([--disable-bfdd], [do not build bfdd]))\nAC_ARG_ENABLE([address-sanitizer],\n  AS_HELP_STRING([--enable-address-sanitizer], [enable AddressSanitizer support for detecting a wide variety of memory allocation and deallocation errors]))\nAC_ARG_ENABLE([thread-sanitizer],\n  AS_HELP_STRING([--enable-thread-sanitizer], [enable ThreadSanitizer support for detecting data races]))\nAC_ARG_ENABLE([memory-sanitizer],\n  AS_HELP_STRING([--enable-memory-sanitizer], [enable MemorySanitizer support for detecting uninitialized memory reads]))\nAC_ARG_ENABLE([undefined-sanitizer],\n  AS_HELP_STRING([--enable-undefined-sanitizer], [enable UndefinedBehaviorSanitizer support for detecting undefined behavior]))\nAC_ARG_WITH([crypto],\n  AS_HELP_STRING([--with-crypto=<internal|openssl>], [choose between different implementations of cryptographic functions(default value is --with-crypto=internal)]))\nAC_ARG_WITH([frr-format],\n  AS_HELP_STRING([--with-frr-format[=<.../frr-format.so>]], [use frr-format GCC plugin]))\n\nAC_ARG_ENABLE([version_build_config],\n  AS_HELP_STRING([--disable-version-build-config], [do not include build configs in show version command]))\n\nAC_ARG_ENABLE([python_runtime],\n  AS_HELP_STRING([--disable-python-runtime], [do not install python scripts or have python runtime dependency]))\n\n#if openssl, else use the internal\nAS_IF([test \"$with_crypto\" = \"openssl\"], [\nAC_CHECK_LIB([crypto], [EVP_DigestInit], [LIBS=\"$LIBS -lcrypto\"], [], [])\nif test \"$ac_cv_lib_crypto_EVP_DigestInit\" = \"no\"; then\n  AC_MSG_ERROR([build with openssl has been specified but openssl library was not found on your system])\nelse\n  AC_DEFINE([CRYPTO_OPENSSL], [1], [Compile with openssl support])\nfi\n], [test \"$with_crypto\" = \"internal\" || test \"$with_crypto\" = \"\" ], [AC_DEFINE([CRYPTO_INTERNAL], [1], [Compile with internal cryptographic implementation])\n], [AC_MSG_ERROR([Unknown value for --with-crypto])]\n)\n\nAS_IF([test \"$enable_clippy_only\" != \"yes\"], [\nAC_CHECK_HEADERS([json-c/json.h])\nAC_CHECK_LIB([json-c], [json_object_get], [LIBS=\"$LIBS -ljson-c\"], [], [-lm])\nif test \"$ac_cv_lib_json_c_json_object_get\" = \"no\"; then\n  AC_CHECK_LIB([json], [json_object_get], [LIBS=\"$LIBS -ljson\"])\n  if test \"$ac_cv_lib_json_json_object_get\" = \"no\"; then\n      AC_MSG_ERROR([libjson is needed to compile])\n  fi\nfi\n])\n\nAC_ARG_ENABLE([ccls],\nAS_HELP_STRING([--enable-ccls], [Write .ccls config for this build]))\n\nAC_ARG_ENABLE([dev_build],\n    AS_HELP_STRING([--enable-dev-build], [build for development]))\n\nAC_ARG_ENABLE([scripting],\n    AS_HELP_STRING([--enable-scripting], [Build with scripting support]))\n\nAC_ARG_ENABLE([netlink-debug],\n  AS_HELP_STRING([--disable-netlink-debug], [don't pretty print netlink debug messages]))\n\nif test \"$enable_netlink_debug\" != \"no\" ; then\n  AC_DEFINE([NETLINK_DEBUG], [1], [Netlink extra debugging code])\nfi\n\nAM_CONDITIONAL([NETLINK_DEBUG], [test \"$enable_netlink_debug\" != \"no\"])\n\nif test \"$enable_datacenter\" = \"yes\" ; then\n  AC_DEFINE([HAVE_DATACENTER], [1], [Compile extensions for a DataCenter])\n  DFLT_NAME=\"datacenter\"\nelse\n  DFLT_NAME=\"traditional\"\nfi\n\nif test \"$enable_cumulus\" = \"yes\" ; then\n  AC_DEFINE([HAVE_CUMULUS], [1], [Compile Special Cumulus Code in])\nfi\n\nAC_SUBST([DFLT_NAME])\nAC_DEFINE_UNQUOTED([DFLT_NAME], [\"$DFLT_NAME\"], [Name of the configuration default set])\n\n#\n# Python for clippy\n#\n\nAS_IF([test \"$host\" = \"$build\"], [\n  AM_PATH_PYTHON([3])\n  AC_CHECK_HEADER([gelf.h], [], [\n    AC_MSG_ERROR([libelf headers are required for building clippy.  (Host only when cross-compiling.)])\n  ])\n\n  LIBS_save=\"$LIBS\"\n  AC_CHECK_LIB([elf], [elf_memory], [], [\n    AC_MSG_ERROR([libelf is required for building clippy.  (Host only when cross-compiling.)])\n  ])\n\n  AC_CHECK_LIB([elf], [elf_getdata_rawchunk], [\n    AC_DEFINE([HAVE_ELF_GETDATA_RAWCHUNK], [1], [Have elf_getdata_rawchunk()])\n  ])\n  AC_CHECK_LIB([elf], [gelf_getnote], [\n    AC_DEFINE([HAVE_GELF_GETNOTE], [1], [Have gelf_getnote()])\n  ])\n  LIBS=\"$LIBS_save\"\n  unset LIBS_save\n\n  FRR_PYTHON_DEV\n], [\n  FRR_PYTHON\n])\n\nFRR_PYTHON_MODULES([pytest])\n\nif test \"$enable_doc\" != \"no\"; then\n  FRR_PYTHON_MODULES([sphinx], , [\n    if test \"$enable_doc\" = \"yes\"; then\n      AC_MSG_ERROR([Documentation was explicitly requested with --enable-doc but sphinx is not available for $PYTHON. Please disable docs or install sphinx.])\n    fi\n  ])\nfi\nAM_CONDITIONAL([DOC], [test \"$enable_doc\" != \"no\" -a \"$frr_py_mod_sphinx\" != \"false\"])\nAM_CONDITIONAL([DOC_HTML], [test \"$enable_doc_html\" = \"yes\"])\n\nFRR_PYTHON_MOD_EXEC([sphinx], [--version], [\n  PYSPHINX=\"-m sphinx\"\n], [\n  PYSPHINX=\"-c 'import sys; from sphinx import main; sys.exit(main(sys.argv))'\"\n])\nAC_SUBST([PYSPHINX])\n\n#\n# Logic for old vpn commands support.\n#\nif test \"$enable_oldvpn_commands\" = \"yes\"; then\n   AC_DEFINE([KEEP_OLD_VPN_COMMANDS], [1], [Define for compiling with old vpn commands])\nfi\n\nAC_MSG_CHECKING([if zebra should be configurable to send Route Advertisements])\nif test \"$enable_rtadv\" != \"no\"; then\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_RTADV], [1], [Enable IPv6 Routing Advertisement support])\nelse\n  AC_MSG_RESULT([no])\nfi\n\nif test \"$enable_user\" = \"no\"; then\n  enable_user=\"\"\nelse\n  if test \"$enable_user\" = \"yes\" || test \"$enable_user\" = \"\"; then\n    enable_user=\"frr\"\n  fi\n  AC_DEFINE_UNQUOTED([FRR_USER], [\"${enable_user}\"], [frr User])\nfi\n\nif test \"$enable_group\" = \"no\"; then\n  enable_group=\"\"\nelse\n  if test \"$enable_group\" = \"yes\" || test \"$enable_group\" = \"\"; then\n    enable_group=\"frr\"\n  fi\n  AC_DEFINE_UNQUOTED([FRR_GROUP], [\"${enable_group}\"], [frr Group])\nfi\n\nif test \"$enable_vty_group\" = \"yes\" ; then\n  AC_MSG_ERROR([--enable-vty-group requires a group as argument, not yes])\nelif test \"$enable_vty_group\" != \"\"; then\n  if test \"$enable_vty_group\" != \"no\"; then\n    AC_DEFINE_UNQUOTED([VTY_GROUP], [\"${enable_vty_group}\"], [VTY Sockets Group])\n  fi\nfi\nAC_SUBST([enable_user])\nAC_SUBST([enable_group])\nAC_SUBST([enable_vty_group])\n\nenable_configfile_mask=${enable_configfile_mask:-0600}\nAC_DEFINE_UNQUOTED([CONFIGFILE_MASK], [${enable_configfile_mask}], [Mask for config files])\nAC_SUBST([enable_configfile_mask])\n\nenable_logfile_mask=${enable_logfile_mask:-0600}\nAC_DEFINE_UNQUOTED([LOGFILE_MASK], [${enable_logfile_mask}], [Mask for log files])\n\nMPATH_NUM=16\n\ncase \"${enable_multipath}\" in\n  0)\n    MPATH_NUM=64\n    ;;\n  [[1-9]|[1-9][0-9]|[1-9][0-9][0-9]])\n    MPATH_NUM=\"${enable_multipath}\"\n    ;;\n  \"\")\n    ;;\n  *)\n    AC_MSG_FAILURE([Please specify digit to enable multipath ARG])\n    ;;\nesac\n\nAC_DEFINE_UNQUOTED([MULTIPATH_NUM], [$MPATH_NUM], [Maximum number of paths for a route])\n\ncase \"${with_log_timestamp_precision}\" in\n[[0-9]|1[012]])\n;;\n\"\")\n;;\n*)\nAC_MSG_FAILURE([Please specify a number from 0-12 for log precision ARG])\n;;\nesac\nwith_log_timestamp_precision=${with_log_timestamp_precision:-0}\nAC_DEFINE_UNQUOTED([LOG_TIMESTAMP_PRECISION], [${with_log_timestamp_precision}], [Startup zlog timestamp precision])\n\nAC_DEFINE_UNQUOTED([VTYSH_PAGER], [\"$VTYSH_PAGER\"], [What pager to use])\n\nTIMEOUT_MIN=2\ncase \"${with_service_timeout}\" in\n  [[1-9]|[1-9][0-9]|[1-9][0-9][0-9]])\n    TIMEOUT_MIN=\"${with_service_timeout}\"\n    ;;\n  0|\"\")\n    ;;\n  *)\n    AC_MSG_FAILURE([Please specify digit for timeout ARG])\n    ;;\nesac\nAC_SUBST([TIMEOUT_MIN])\n\ndnl --------------------\ndnl Enable code coverage\ndnl --------------------\nAM_CONDITIONAL([HAVE_GCOV], [test \"$enable_gcov\" != \"no\"])\n\ndnl ------------------------------------\ndnl Alpine only accepts numeric versions\ndnl ------------------------------------\nif test \"$enable_numeric_version\" != \"\" ; then\n  VERSION=\"`echo ${VERSION} | tr -c -d '[[.0-9]]'`\"\n  PACKAGE_VERSION=\"`echo ${PACKAGE_VERSION} | tr -c -d '[[.0-9]]'`\"\nfi\n\ndnl -----------------------------------\ndnl Add extra version string to package\ndnl name, string and version fields.\ndnl -----------------------------------\nif test \"$EXTRAVERSION\" != \"\" ; then\n  VERSION=\"${VERSION}${EXTRAVERSION}\"\n  PACKAGE_VERSION=\"${PACKAGE_VERSION}${EXTRAVERSION}\"\n  AC_SUBST(PACKAGE_EXTRAVERSION, [\"${EXTRAVERSION}\"])\n  PACKAGE_STRING=\"${PACKAGE_STRING}${EXTRAVERSION}\"\nfi\nAC_SUBST([EXTRAVERSION])\n\nif test \"$with_pkg_git_version\" = \"yes\"; then\n\tif test -e \"${srcdir}/.git\"; then\n\t\tAC_DEFINE([GIT_VERSION], [1], [include git version info])\n\telse\twith_pkg_git_version=\"no\"\n\t\tAC_MSG_WARN([--with-pkg-git-version given, but this is not a git checkout])\n\tfi\nfi\nAM_CONDITIONAL([GIT_VERSION], [test \"$with_pkg_git_version\" = \"yes\"])\n\nAC_CHECK_TOOL([OBJCOPY], [objcopy], [:])\nif test \"$OBJCOPY\" != \":\"; then\n  AC_CACHE_CHECK([for .interp value to use], [frr_cv_interp], [\n    frr_cv_interp=\"\"\n    AC_LINK_IFELSE([AC_LANG_SOURCE([[int main() { return 0; }]])], [\n      if $OBJCOPY -j.interp -Obinary conftest conftest.interp; then\n        frr_cv_interp=\"`xargs -0 echo < conftest.interp`\"\n      fi\n      test -f conftest.interp && rm conftest.interp\n    ])\n  ])\nfi\nif test -n \"$frr_cv_interp\"; then\n  AC_DEFINE_UNQUOTED([INTERP], [\"$frr_cv_interp\"], [.interp value])\nfi\n\ndnl -------------------------\ndnl Check other header files.\ndnl -------------------------\nAC_CHECK_HEADERS([stropts.h sys/ksym.h \\\n\tlinux/version.h asm/types.h endian.h sys/endian.h])\n\nAC_CHECK_LIB([atomic], [main], [LIBS=\"$LIBS -latomic\"], [], [])\n\nac_stdatomic_ok=false\nAC_DEFINE([FRR_AUTOCONF_ATOMIC], [1], [did autoconf checks for atomic funcs])\nAC_CHECK_HEADER([stdatomic.h],[\n\n  AC_MSG_CHECKING([whether _Atomic qualifier works])\n  AC_LINK_IFELSE([AC_LANG_SOURCE([[\n#include <stdatomic.h>\nint main(int argc, char **argv) {\n  _Atomic int i = 0;\n  return i;\n}\n]])], [\n    AC_DEFINE([HAVE_STDATOMIC_H], [1], [found stdatomic.h])\n    AC_MSG_RESULT([yes])\n    ac_stdatomic_ok=true\n  ], [\n    AC_MSG_RESULT([no])\n  ])\n])\n\nAS_IF([$ac_stdatomic_ok], [true], [\n  AC_MSG_CHECKING([for __atomic_* builtins])\n  AC_LINK_IFELSE([AC_LANG_SOURCE([[\nint main(int argc, char **argv) {\n  volatile int i = 1;\n  __atomic_store_n (&i, 0, __ATOMIC_RELEASE);\n  return __atomic_load_n (&i, __ATOMIC_ACQUIRE);\n}\n]])], [\n    AC_DEFINE([HAVE___ATOMIC], [1], [found __atomic builtins])\n    AC_MSG_RESULT([yes])\n  ], [\n    AC_MSG_RESULT([no])\n\n    dnl FreeBSD 9 has a broken stdatomic.h where _Atomic doesn't work\n    AC_MSG_CHECKING([for __sync_* builtins])\n    AC_LINK_IFELSE([AC_LANG_SOURCE([[\nint main(int argc, char **argv) {\n  volatile int i = 1;\n  __sync_fetch_and_sub (&i, 1);\n  return __sync_val_compare_and_swap (&i, 0, 1);\n}\n]])], [\n      AC_DEFINE([HAVE___SYNC], [1], [found __sync builtins])\n      AC_MSG_RESULT([yes])\n\n      AC_MSG_CHECKING([for __sync_swap builtin])\n      AC_LINK_IFELSE([AC_LANG_SOURCE([[\nint main(int argc, char **argv) {\n  volatile int i = 1;\n  return __sync_swap (&i, 2);\n}\n]])], [\n        AC_DEFINE([HAVE___SYNC_SWAP], 1, [found __sync_swap builtin])\n        AC_MSG_RESULT([yes])\n      ], [\n        AC_MSG_RESULT([no])\n      ])\n\n    ], [\n      AC_MSG_RESULT([no])\n      AC_MSG_FAILURE([stdatomic.h unavailable and $CC has neither __atomic nor __sync builtins])\n    ])\n  ])\n])\n\nneedsync=true\n\nAS_IF([$needsync], [\n  dnl Linux\n  AC_MSG_CHECKING([for Linux futex() support])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n#include <unistd.h>\n#include <limits.h>\n#include <sys/time.h>\n#include <sys/syscall.h>\n#include <linux/futex.h>\n\nint main(void);\n],\n[\n{\n  return syscall(SYS_futex, NULL, FUTEX_WAIT, 0, NULL, NULL, 0);\n}\n])], [\n    AC_MSG_RESULT([yes])\n    AC_DEFINE(HAVE_SYNC_LINUX_FUTEX,,Have Linux futex support)\n    needsync=false\n  ], [\n    AC_MSG_RESULT([no])\n  ])\n])\n\nAS_IF([$needsync], [\n  dnl FreeBSD\n  AC_MSG_CHECKING([for FreeBSD _umtx_op() support])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([\n#include <errno.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/umtx.h>\nint main(void);\n],\n[\n{\n  return _umtx_op(NULL, UMTX_OP_WAIT_UINT, 0, NULL, NULL);\n}\n])], [\n    AC_MSG_RESULT([yes])\n    AC_DEFINE(HAVE_SYNC_UMTX_OP,,Have FreeBSD _umtx_op() support)\n    needsync=false\n  ], [\n    AC_MSG_RESULT([no])\n  ])\n])\n\nAS_IF([$needsync], [\n  dnl OpenBSD patch (not upstream at the time of writing this)\n  dnl https://marc.info/?l=openbsd-tech&m=147299508409549&w=2\n  AC_MSG_CHECKING([for OpenBSD futex() support])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([\n#include <sys/futex.h>\nint main(void);\n],\n[\n{\n  return futex(NULL, FUTEX_WAIT, 0, NULL, NULL, 0);\n}\n])], [\n    AC_MSG_RESULT([yes])\n    AC_DEFINE(HAVE_SYNC_OPENBSD_FUTEX,,Have OpenBSD futex support)\n    needsync=false\n  ], [\n    AC_MSG_RESULT([no])\n  ])\n])\n\ndnl Utility macro to avoid retyping includes all the time\nm4_define([FRR_INCLUDES],\n[#ifdef SUNOS_5\n#define _POSIX_C_SOURCE 200809L\n#define __EXTENSIONS__\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <sys/types.h>\n/* sys/conf.h depends on param.h on FBSD at least */\n#include <sys/param.h>\n/* Required for MAXSIG */\n#include <signal.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <sys/time.h>\n#include <time.h>\n#include <net/if.h>\n])dnl\n\ndnl Same applies for HAVE_NET_IF_VAR_H, which HAVE_NETINET6_ND6_H and\ndnl HAVE_NETINET_IN_VAR_H depend upon. But if_var.h depends on if.h, hence\ndnl an additional round for it.\n\nAC_CHECK_HEADERS([net/if_var.h], [], [], [FRR_INCLUDES])\n\nm4_define([FRR_INCLUDES],\nFRR_INCLUDES\n[#ifdef HAVE_NET_IF_VAR_H\n# include <net/if_var.h>\n#endif\n])dnl\n\nAC_CHECK_HEADERS([netinet/in_var.h \\\n\tnet/if_dl.h net/netopt.h \\\n\tinet/nd.h netinet/ip_icmp.h \\\n\tsys/sysctl.h sys/sockio.h sys/conf.h],\n\t[], [], [FRR_INCLUDES])\n\nAC_CHECK_HEADERS([ucontext.h], [], [],\n[#ifndef __USE_GNU\n#define __USE_GNU\n#endif /* __USE_GNU */\nFRR_INCLUDES\n])\n\nm4_define([UCONTEXT_INCLUDES],\n[#include <ucontext.h>])dnl\n\nAC_CHECK_MEMBERS([ucontext_t.uc_mcontext.uc_regs],\n  [], [], [UCONTEXT_INCLUDES])\nAC_CHECK_MEMBERS([ucontext_t.uc_mcontext.regs],\n  [AC_CHECK_MEMBERS([ucontext_t.uc_mcontext.regs.nip],\n   [], [], [UCONTEXT_INCLUDES])],\n  [], [UCONTEXT_INCLUDES])\nAC_CHECK_MEMBERS([ucontext_t.uc_mcontext.gregs],\n  [], [], [UCONTEXT_INCLUDES])\n\nm4_define([FRR_INCLUDES],\nFRR_INCLUDES\n[\n#include <sys/un.h>\n#include <netinet/in_systm.h>\n#ifdef HAVE_NETINET_IN_VAR_H\n# include <netinet/in_var.h>\n#endif\n#ifdef HAVE_NET_IF_DL_H\n# include <net/if_dl.h>\n#endif\n#ifdef HAVE_NET_NETOPT_H\n# include <net/netopt.h>\n#endif\n#include <net/route.h>\n#ifdef HAVE_INET_ND_H\n# include <inet/nd.h>\n#endif\n#include <arpa/inet.h>\n/* Required for IDRP */\n#ifdef HAVE_NETINET_IP_ICMP_H\n# include <netinet/ip_icmp.h>\n#endif\n])dnl\n\ndnl V6 headers are checked below, after we check for v6\n\nis_linux=false\n\nAC_MSG_CHECKING([which operating system interface to use])\ncase \"$host_os\" in\n  sunos* | solaris2*)\n    AC_MSG_FAILURE([Solaris support has been removed please see versions prior or equal to 7.5])\n    ;;\n  linux*)\n    AC_MSG_RESULT([Linux])\n\n    AC_DEFINE([GNU_LINUX], [1], [GNU Linux])\n    AC_DEFINE([HAVE_NETLINK], [1], [netlink])\n    AC_DEFINE([LINUX_IPV6], [1], [Linux IPv6 stack])\n\n    dnl Linux has a compilation problem with mixing\n    dnl netinet/in.h and linux/in6.h they are not\n    dnl compatible.  There has been discussion on\n    dnl how to fix it but no real progress on implementation\n    dnl when they fix it, remove this\n    AC_DEFINE([IPV6_MINHOPCOUNT], [73], [Linux ipv6 Min Hop Count])\n\n    is_linux=true\n    ;;\n  openbsd*)\n    AC_MSG_RESULT([OpenBSD])\n\n    AC_DEFINE([OPEN_BSD], [1], [OpenBSD])\n    AC_DEFINE([KAME], [1], [KAME IPv6])\n    AC_DEFINE([BSD_V6_SYSCTL], [1], [BSD v6 sysctl to turn on and off forwarding])\n    ;;\n  *)\n    AC_MSG_RESULT([BSD])\n\n    AC_DEFINE([HAVE_NET_RT_IFLIST], [1], [NET_RT_IFLIST])\n    AC_DEFINE([KAME], [1], [KAME IPv6])\n    AC_DEFINE([BSD_V6_SYSCTL], [1], [BSD v6 sysctl to turn on and off forwarding])\n    ;;\nesac\nAM_CONDITIONAL([LINUX], [${is_linux}])\n\nAC_SYS_LARGEFILE\n\ndnl ------------------------\ndnl Integrated REALMS option\ndnl ------------------------\nif test \"$enable_realms\" = \"yes\"; then\n    case \"$host_os\" in\n      linux*)\n       AC_DEFINE([SUPPORT_REALMS], [1], [Realms support])\n       ;;\n      *)\n       echo \"Sorry, only Linux has REALMS support\"\n       exit 1\n       ;;\n    esac\nfi\n\ndnl ---------------\ndnl other functions\ndnl ---------------\nAC_CHECK_FUNCS([ \\\n\tstrlcat strlcpy \\\n\tgetgrouplist \\\n\topenat \\\n\tunlinkat \\\n\tposix_fallocate \\\n\tsendmmsg \\\n\texplicit_bzero \\\n\t])\n\nAC_CHECK_MEMBERS([struct mmsghdr.msg_hdr], [], [], FRR_INCLUDES)\n\ndnl ##########################################################################\ndnl LARGE if block spans a lot of \"configure\"!\nif test \"$enable_clippy_only\" != \"yes\"; then\ndnl ##########################################################################\n\n#\n# Logic for protobuf support.\n#\nPROTO3=false\n# Enable Protobuf by default at all times.\n# Check for protoc & protoc-c\n# protoc is not required, it's only for a \"be nice\" helper target\nAC_CHECK_PROGS([PROTOC], [protoc], [/bin/false])\n\nAC_CHECK_PROGS([PROTOC_C], [protoc-c], [/bin/false])\nif test \"$PROTOC_C\" = \"/bin/false\"; then\n  AC_MSG_FAILURE([protobuf requested but protoc-c not found.  Install protobuf-c.])\nfi\n\nPKG_CHECK_MODULES([PROTOBUF_C], [libprotobuf-c >= 1.1.0],, [\n  AC_MSG_FAILURE([minimum version (1.1.0) of libprotobuf-c not found.  Install minimum required version of protobuf-c.])\n])\n\nif test \"$enable_protobuf3\" = \"yes\"; then\n  PROTO3=true\n  AC_CHECK_HEADER([google/protobuf-c/protobuf-c.h],\n                  [AC_CHECK_DECLS(PROTOBUF_C_LABEL_NONE,\n                                  AC_DEFINE([HAVE_PROTOBUF_VERSION_3],\n                                            [1], [Have Protobuf version 3]),\n                                  [PROTO3=false],\n                                  [#include <google/protobuf-c/protobuf-c.h>])],\n                  [PROTO3=false && AC_MSG_FAILURE([protobuf3 requested but protobuf-c.h not found.  Install protobuf-c.])])\nfi\n\nif test \"$enable_protobuf\" != \"no\"; then\n  AC_DEFINE([HAVE_PROTOBUF], [1], [protobuf])\nfi\n#\n# End of logic for protobuf support.\n#\n\n\ndnl ---------------------\ndnl Integrated VTY option\ndnl ---------------------\ncase \"${enable_vtysh}\" in\n\"no\")\n  VTYSH=\"\";;\n*)\n  VTYSH=\"vtysh\";\n  AC_DEFINE([VTYSH], [1], [VTY shell])\n\n  prev_libs=\"$LIBS\"\n  AC_CHECK_LIB([readline], [readline], [\n    LIBREADLINE=\"-lreadline\"\n  ], [\n    dnl readline failed - it might be incorrectly linked and missing its\n    dnl termcap/tinfo/curses dependency.  see if we can fix that...\n    AC_SEARCH_LIBS([tputs], [termcap tinfo curses ncurses], [\n      LIBREADLINE=\"$ac_cv_search_tputs\"\n    ], [\n      AC_MSG_ERROR([libreadline (needed for vtysh) not found and/or missing dependencies])\n    ])\n\n    dnl re-try with the lib we found above\n    unset ac_cv_lib_readline_main\n    AC_CHECK_LIB([readline], [main], [\n      LIBREADLINE=\"-lreadline $LIBREADLINE\"\n    ], [\n      AC_MSG_ERROR([libreadline (needed for vtysh) not found and/or missing dependencies])\n    ], [$LIBREADLINE])\n  ], [])\n  LIBS=\"$LIBS -lreadline\"\n  AC_CHECK_FUNCS([rl_clear_visible_line])\n  LIBS=\"$prev_libs\"\n\n  AC_CHECK_HEADER([readline/history.h])\n  if test \"$ac_cv_header_readline_history_h\" = \"no\"; then\n    AC_MSG_ERROR([readline is too old to have readline/history.h, please update to the latest readline library.])\n  fi\n  AC_CHECK_LIB([readline], [rl_completion_matches], [true], [], [$LIBREADLINE])\n  if test \"$ac_cv_lib_readline_rl_completion_matches\" = \"no\"; then\n    AC_DEFINE([rl_completion_matches], [completion_matches], [Old readline])\n  fi\n  AC_CHECK_LIB([readline], [append_history], [frr_cv_append_history=yes], [frr_cv_append_history=no], [$LIBREADLINE])\n  if test \"$frr_cv_append_history\" = \"yes\"; then\n    AC_DEFINE([HAVE_APPEND_HISTORY], [1], [Have history.h append_history])\n  fi\n  ;;\nesac\nAC_SUBST([LIBREADLINE])\n\ndnl ----------\ndnl PAM module\ndnl\ndnl FRR detects the PAM library it is built against by checking for a\ndnl functional pam_misc.h (Linux-PAM) or openpam.h (OpenPAM) header. pam_misc.h\ndnl is known to #include pam_appl.h, the standard header of a PAM library, and\ndnl openpam.h doesn't do that, although depends on the header too. Hence a\ndnl little assistance to AC_CHECK_HEADER is necessary for the proper detection\ndnl of OpenPAM.\ndnl ----------\nif test \"$with_libpam\" = \"yes\"; then\n  AC_CHECK_HEADER([security/pam_misc.h],\n    [AC_DEFINE([HAVE_PAM_MISC_H], [1], [Have pam_misc.h])\n     AC_DEFINE([PAM_CONV_FUNC], [misc_conv], [Have misc_conv])\n     pam_conv_func=\"misc_conv\"\n    ],\n    [], FRR_INCLUDES)\n  AC_CHECK_HEADER([security/openpam.h],\n    [AC_DEFINE([HAVE_OPENPAM_H], [1], [Have openpam.h])\n     AC_DEFINE([PAM_CONV_FUNC], [openpam_ttyconv], [Have openpam_ttyconv])\n     pam_conv_func=\"openpam_ttyconv\"\n    ],\n    [], FRR_INCLUDES[#include <security/pam_appl.h>])\n  if test -z \"$ac_cv_header_security_pam_misc_h$ac_cv_header_security_openpam_h\" ; then\n    AC_MSG_WARN([*** pam support will not be built ***])\n    with_libpam=\"no\"\n  fi\nfi\n\nif test \"$with_libpam\" = \"yes\"; then\ndnl took this test from proftpds configure.in and suited to our needs\ndnl -------------------------------------------------------------------------\ndnl\ndnl This next check looks funky due to a linker problem with some versions\ndnl of the PAM library.  Prior to 0.72 release, the Linux PAM shared library\ndnl omitted requiring libdl linking information. PAM-0.72 or better ships\ndnl with RedHat 6.2 and Debian 2.2 or better.\nAC_CHECK_LIB([pam], [pam_start],\n  [AC_CHECK_LIB([pam], [$pam_conv_func],\n    [AC_DEFINE([USE_PAM], [1], [Use PAM for authentication])\n     LIBPAM=\"-lpam\"],\n    [AC_DEFINE([USE_PAM], [1], [Use PAM for authentication])\n     LIBPAM=\"-lpam -lpam_misc\"]\n    )\n  ],\n\n  [AC_CHECK_LIB([pam], [pam_end],\n    [AC_CHECK_LIB([pam], [$pam_conv_func],\n      [AC_DEFINE([USE_PAM], [1], [Use PAM for authentication])\n       LIBPAM=\"-lpam -ldl\"],\n      [AC_DEFINE([USE_PAM], [1], [Use PAM for authentication])\n       LIBPAM=\"-lpam -ldl -lpam_misc\"]\n     )\n  ],AC_MSG_WARN([*** pam support will not be built ***]),\n  [-ldl])\n  ]\n)\nfi\nAC_SUBST([LIBPAM])\n\ndnl -------------------------------\ndnl bgpd needs pow() and hence libm\ndnl -------------------------------\nTMPLIBS=\"$LIBS\"\nLIBS=\"\"\nAC_SEARCH_LIBS([pow], [m], [\n  LIBM=\"$LIBS\"\n], [\n  AC_MSG_WARN([Unable to find working pow function - bgpd may not link])\n])\nLIBS=\"$TMPLIBS\"\nAC_SUBST([LIBM])\n\nAC_CHECK_FUNCS([ppoll], [\n  AC_DEFINE([HAVE_PPOLL], [1], [have Linux/BSD ppoll()])\n])\nAC_CHECK_FUNCS([pollts], [\n  AC_DEFINE([HAVE_POLLTS], [1], [have NetBSD pollts()])\n])\n\nAC_CHECK_HEADER([asm-generic/unistd.h],\n                [AC_CHECK_DECL(__NR_setns,\n                               AC_DEFINE([HAVE_NETNS], [1], [Have netns]),,\n                               FRR_INCLUDES [#include <asm-generic/unistd.h>\n                               ])\n                 AC_CHECK_FUNCS([setns])]\n               )\n\ndnl --------------------------\ndnl Determine IS-IS I/O method\ndnl --------------------------\nAC_DEFINE([ISIS_METHOD_PFPACKET], [1], [constant value for isis method pfpacket])\nAC_DEFINE([ISIS_METHOD_DLPI], [2], [constant value for isis method dlpi])\nAC_DEFINE([ISIS_METHOD_BPF], [3], [constant value for isis method bpf])\nAC_CHECK_HEADER([net/bpf.h])\nAC_CHECK_HEADER([sys/dlpi.h])\nAC_MSG_CHECKING([zebra IS-IS I/O method])\n\ncase \"$host_os\" in\n  linux*)\n    AC_MSG_RESULT([pfpacket])\n    ISIS_METHOD_MACRO=\"ISIS_METHOD_PFPACKET\"\n    ;;\n  *)\n    if test \"$ac_cv_header_net_bpf_h\" = \"no\"; then\n      if test \"$ac_cv_header_sys_dlpi_h\" = \"no\"; then\n        AC_MSG_RESULT([none])\n        if test \"$enable_isisd\" = \"yes\" -o \"$enable_fabricd\" = \"yes\"; then\n          AC_MSG_FAILURE([IS-IS support requested but no packet backend found])\n        fi\n        AC_MSG_WARN([*** IS-IS support will not be built ***])\n        enable_isisd=\"no\"\n        enable_fabricd=\"no\"\n      else\n        AC_MSG_RESULT([DLPI])\n      fi\n      ISIS_METHOD_MACRO=\"ISIS_METHOD_DLPI\"\n    else\n      AC_MSG_RESULT([BPF])\n      ISIS_METHOD_MACRO=\"ISIS_METHOD_BPF\"\n    fi\n    ;;\nesac\nAC_DEFINE_UNQUOTED([ISIS_METHOD], [$ISIS_METHOD_MACRO], [selected method for isis, == one of the constants])\n\ndnl ---------------------------------------------------------------\ndnl figure out how to specify an interface in multicast sockets API\ndnl ---------------------------------------------------------------\nAC_CHECK_MEMBERS([struct ip_mreqn.imr_ifindex], [], [], FRR_INCLUDES)\n\nAC_CHECK_HEADERS([linux/mroute.h], [], [],[\n\t#include <sys/socket.h>\n\t#include <netinet/in.h>\n\t#define _LINUX_IN_H             /* For Linux <= 2.6.25 */\n\t#include <linux/types.h>\n])\n\nAC_CHECK_HEADERS([linux/mroute6.h], [], [],[\n\t#include <sys/socket.h>\n\t#include <netinet/in.h>\n\t#define _LINUX_IN_H             /* For Linux <= 2.6.25 */\n\t#include <linux/types.h>\n])\n\nm4_define([FRR_INCLUDES],\nFRR_INCLUDES\n[#ifdef HAVE_LINUX_MROUTE_H\n# include <linux/mroute.h>\n#endif\n])dnl\n\nAC_CHECK_HEADERS([netinet/ip_mroute.h], [], [],[\n\t#include <sys/socket.h>\n\t#include <sys/types.h>\n\t#include <netinet/in.h>\n\t#include <net/route.h>\n])\n\nm4_define([FRR_INCLUDES],\nFRR_INCLUDES\n[#ifdef HAVE_NETINET_IP_MROUTE_H\n# include <netinet/ip_mroute.h>\n#endif\n])dnl\n\nAC_CHECK_HEADERS([netinet6/ip6_mroute.h], [], [],[\n\t#include <sys/socket.h>\n\t#include <sys/param.h>\n\t#include <sys/types.h>\n\t#include <netinet/in.h>\n\t#include <net/route.h>\n])\n\nm4_define([FRR_INCLUDES],\nFRR_INCLUDES\n[#ifdef HAVE_NETINET_IP6_MROUTE_H\n# include <netinet6/ip6_mroute.h>\n#endif\n])dnl\n\nAC_MSG_CHECKING([for RFC3678 protocol-independed API])\nAC_COMPILE_IFELSE(\n[ AC_LANG_PROGRAM([[\n      #include <sys/types.h>\n      #include <netinet/in.h>\n  ]], [[\n      struct group_req gr;\n      int sock;\n      setsockopt(sock, IPPROTO_IP, MCAST_JOIN_GROUP, (void*)&gr, sizeof(gr));\n  ]])\n],[\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_RFC3678], [1], [Have RFC3678 protocol-independed API])\n],[\n  AC_MSG_RESULT(no)\n])\n\ndnl ---------------------------------------------------------------\ndnl figure out how to check link-state\ndnl ---------------------------------------------------------------\nAC_CHECK_HEADER([net/if_media.h],\n  [m4_define([LINK_DETECT_INCLUDES],\n    FRR_INCLUDES\n    [#include <net/if_media.h>\n  ])\n  AC_CHECK_MEMBERS([struct ifmediareq.ifm_status],\n    AC_DEFINE([HAVE_BSD_LINK_DETECT], [1], [BSD link-detect]),\n    [], LINK_DETECT_INCLUDES)],\n  [],\n  FRR_INCLUDES)\n\ndnl ---------------------------------------------------------------\ndnl Additional, newer way to check link-state using ifi_link_state.\ndnl Not available in all BSD's when ifmediareq available\ndnl ---------------------------------------------------------------\nAC_CHECK_MEMBERS([struct if_data.ifi_link_state],\n  AC_DEFINE([HAVE_BSD_IFI_LINK_STATE], [1], [BSD ifi_link_state available]),\n  [], FRR_INCLUDES)\n\ndnl ------------------------\ndnl TCP_MD5SIG socket option\ndnl ------------------------\n\nAC_CHECK_HEADER([netinet/tcp.h],\n   [m4_define([MD5_INCLUDES],\n      FRR_INCLUDES\n      [#include <netinet/tcp.h>\n    ])\n    AC_CHECK_DECLS([TCP_MD5SIG], [], [], MD5_INCLUDES)],\n   [],\n   FRR_INCLUDES)\nif test \"$ac_cv_have_decl_TCP_MD5SIG\" = \"no\"; then\n  AC_CHECK_HEADER([linux/tcp.h],\n       [m4_define([MD5_INCLUDES],\n          FRR_INCLUDES\n          [#include <linux/tcp.h>\n        ])\n       AC_CHECK_DECLS([TCP_MD5SIG], [], [], MD5_INCLUDES)])\nfi\n\nLIBS_save=\"$LIBS\"\nAC_CHECK_LIB([crypt], [crypt], [], [\n  AC_CHECK_LIB([crypto], [DES_crypt])\n])\nLIBCRYPT=\"$LIBS\"\nLIBCRYPT=\"${LIBCRYPT%$LIBS_save}\"\nLIBCRYPT=\"${LIBCRYPT#$LIBS_save}\"\nAC_SUBST([LIBCRYPT])\nLIBS=\"$LIBS_save\"\nunset LIBS_save\n\nAC_CHECK_LIB([resolv], [res_init])\n\ndnl ---------------------------\ndnl check system has PCRE regexp\ndnl ---------------------------\nif test \"$enable_pcreposix\" = \"yes\"; then\n  AC_CHECK_LIB([pcreposix], [regexec], [], [\n    AC_MSG_ERROR([--enable-pcreposix given but unable to find libpcreposix])\n  ])\nfi\nAC_SUBST([HAVE_LIBPCREPOSIX])\n\ndnl ---------------------------\ndnl check system has PCRE2 regexp\ndnl ---------------------------\nif test \"$enable_pcre2posix\" = \"yes\"; then\n  AC_CHECK_LIB([pcre2-posix], [regexec], [], [\n    AC_MSG_ERROR([--enable-pcre2posix given but unable to find libpcre2-posix])\n  ])\nfi\nAC_SUBST([HAVE_LIBPCRE2_POSIX])\n\ndnl ##########################################################################\ndnl test \"$enable_clippy_only\" != \"yes\"\nfi\ndnl END OF LARGE if block\ndnl ##########################################################################\n\ndnl ------------------\ndnl check C-Ares library\ndnl ------------------\nPKG_CHECK_MODULES([CARES], [libcares], [\n  c_ares_found=true\n],[\n  c_ares_found=false\n])\nAM_CONDITIONAL([CARES], [$c_ares_found])\n\n\ndnl ----------------------------------------------------------------------------\ndnl figure out if domainname is available in the utsname struct (GNU extension).\ndnl ----------------------------------------------------------------------------\nAC_CHECK_MEMBERS([struct utsname.domainname], [], [], [#include <sys/utsname.h>])\n\ndnl ------------------\ndnl IPv6 header checks\ndnl ------------------\nAC_CHECK_HEADERS([netinet6/in6.h netinet/in6_var.h \\\n\tnetinet6/in6_var.h netinet6/nd6.h], [], [],\n\tFRR_INCLUDES)\n\nm4_define([FRR_INCLUDES],dnl\nFRR_INCLUDES\n[#ifdef HAVE_NETINET6_IN6_H\n#include <netinet6/in6.h>\n#endif\n#ifdef HAVE_NETINET_IN6_VAR_H\n#include <netinet/in6_var.h>\n#endif\n#include <netinet/icmp6.h>\n#ifdef HAVE_NETINET6_IN6_VAR_H\n# include <netinet6/in6_var.h>\n#endif\n#ifdef HAVE_NETINET6_ND6_H\n# include <netinet6/nd6.h>\n#endif\n])dnl\n\ndnl --------------------\ndnl Daemon disable check\ndnl --------------------\n\nAS_IF([test \"$enable_bgpd\" != \"no\"], [\n  AC_DEFINE([HAVE_BGPD], [1], [bgpd])\n])\n\nAS_IF([test \"$enable_mgmtd\" != \"no\"], [\n\n  AC_DEFINE([HAVE_MGMTD], [1], [mgmtd])\n\n  # Enable MGMTD local validations\n  AS_IF([test \"$enable_mgmtd_local_validations\" == \"yes\"], [\n    AC_DEFINE([MGMTD_LOCAL_VALIDATIONS_ENABLED], [1], [Enable mgmtd local validations.])\n  ])\n])\n\nAS_IF([test \"$enable_mgmtd_test_be_client\" = \"yes\"], [\n  AC_DEFINE([HAVE_MGMTD_TESTC], [1], [mgmtd_testc])\n])\n\nAS_IF([test \"$enable_fpm_listener\" = \"yes\"], [\n  AC_DEFINE([HAVE_FPM_LISTENER], [1], [fpm_listener])\n])\n\nAS_IF([test \"$enable_ripd\" != \"no\"], [\n  AC_DEFINE([HAVE_RIPD], [1], [ripd])\n])\n\nAS_IF([test \"$enable_ripngd\" != \"no\"], [\n  AC_DEFINE([HAVE_RIPNGD], [1], [ripngd])\n])\n\nAS_IF([test \"$enable_ospfd\" != \"no\"], [\n  AC_DEFINE([HAVE_OSPFD], [1], [ospfd])\n])\n\nAS_IF([test \"$enable_ospf6d\" != \"no\"], [\n  AC_DEFINE([HAVE_OSPF6D], [1], [ospf6d])\n])\n\nAS_IF([test \"$enable_ldpd\" != \"no\"], [\n  AC_DEFINE([HAVE_LDPD], [1], [ldpd])\n])\n\nAS_IF([test \"$enable_nhrpd\" != \"no\"], [\n  AC_DEFINE([HAVE_NHRPD], [1], [nhrpd])\n])\n\nAS_IF([test \"$enable_eigrpd\" != \"no\"], [\n  AC_DEFINE([HAVE_EIGRPD], [1], [eigrpd])\n])\n\nAS_IF([test \"$enable_babeld\" != \"no\"], [\n  AC_DEFINE([HAVE_BABELD], [1], [babeld])\n])\n\nAS_IF([test \"$enable_isisd\" != \"no\"], [\n  AC_DEFINE([HAVE_ISISD], [1], [isisd])\n])\n\nAS_IF([test \"$enable_pimd\" != \"no\"], [\n  AC_DEFINE([HAVE_PIMD], [1], [pimd])\n])\n\nAS_IF([test \"$enable_pim6d\" != \"no\"], [\n  AC_DEFINE([HAVE_PIM6D], [1], [pim6d])\n])\n\nAS_IF([test \"$enable_pbrd\" != \"no\"], [\n  AC_DEFINE([HAVE_PBRD], [1], [pbrd])\n])\n\nAS_IF([test \"$enable_sharpd\" = \"yes\"], [\n  AC_DEFINE([HAVE_SHARPD], [1], [sharpd])\n])\n\nAS_IF([test \"$enable_staticd\" != \"no\"], [\n  AC_DEFINE([HAVE_STATICD], [1], [staticd])\n])\n\nAS_IF([test \"$enable_fabricd\" != \"no\"], [\n  AC_DEFINE([HAVE_FABRICD], [1], [fabricd])\n])\n\nAS_IF([test \"$enable_vrrpd\" != \"no\"], [\n  AC_DEFINE([HAVE_VRRPD], [1], [vrrpd])\n])\n\nif test \"$enable_bfdd\" = \"no\"; then\n  AC_DEFINE([HAVE_BFDD], [0], [bfdd])\n  BFDD=\"\"\nelse\n  AC_DEFINE([HAVE_BFDD], [1], [bfdd])\n  BFDD=\"bfdd\"\n\n  case $host_os in\n    linux*)\n      AC_DEFINE([BFD_LINUX], [1], [bfdd])\n      ;;\n\n    *)\n      AC_DEFINE([BFD_BSD], [1], [bfdd])\n      ;;\n  esac\nfi\n\nAS_IF([test \"$enable_pathd\" != \"no\"], [\n  AC_DEFINE([HAVE_PATHD], [1], [pathd])\n])\n\nif test \"$ac_cv_lib_json_c_json_object_get\" = \"no\" -a \"$BFDD\" = \"bfdd\"; then\n  AC_MSG_ERROR([\"you must use json-c library to use bfdd\"])\nfi\n\nNHRPD=\"\"\ncase \"$host_os\" in\n  linux*)\n    case \"${enable_nhrpd}\" in\n      no)\n        ;;\n      yes)\n\tif test \"$enable_clippy_only\" != \"yes\"; then\n        if test \"$c_ares_found\" != \"true\" ; then\n          AC_MSG_ERROR([nhrpd requires libcares.  Please install c-ares and its -dev headers.])\n        fi\n\tfi\n        NHRPD=\"nhrpd\"\n        ;;\n      *)\n        if test \"$c_ares_found\" = \"true\" ; then\n          NHRPD=\"nhrpd\"\n        fi\n        ;;\n    esac\n    ;;\n  *)\n    if test \"$enable_nhrpd\" = \"yes\"; then\n      AC_MSG_ERROR([nhrpd requires kernel APIs that are only present on Linux.])\n    fi\n    ;;\nesac\n\nif test \"$enable_watchfrr\" = \"no\";then\n  WATCHFRR=\"\"\nelse\n  WATCHFRR=\"watchfrr\"\nfi\n\nOSPFCLIENT=\"\"\nif test \"$enable_ospfapi\" != \"no\";then\n    AC_DEFINE([SUPPORT_OSPF_API], [1], [OSPFAPI])\n\n  if test \"$enable_ospfclient\" != \"no\";then\n      OSPFCLIENT=\"ospfclient\"\n  fi\nfi\n\nif test \"$enable_bgp_announce\" = \"no\";then\n  AC_DEFINE([DISABLE_BGP_ANNOUNCE], [1], [Disable BGP installation to zebra])\nelse\n  AC_DEFINE([DISABLE_BGP_ANNOUNCE], [0], [Disable BGP installation to zebra])\nfi\n\nif test \"$enable_bgp_vnc\" != \"no\";then\n  AC_DEFINE([ENABLE_BGP_VNC], [1], [Enable BGP VNC support])\nfi\n\nbgpd_bmp=false\ncase \"${enable_bgp_bmp}\" in\n  no)\n    ;;\n  yes)\n    if test \"$c_ares_found\" != \"true\" ; then\n      AC_MSG_ERROR([BMP support requires libcares.  Please install c-ares and its -dev headers.])\n    fi\n    bgpd_bmp=true\n    ;;\n  *)\n    if test \"$c_ares_found\" = \"true\" ; then\n      bgpd_bmp=true\n    fi\n    ;;\nesac\n\nif test \"$enable_version_build_config\" != \"no\";then\n  AC_DEFINE([ENABLE_VERSION_BUILD_CONFIG], [1], [Report build configs in show version])\nfi\n\ndnl ##########################################################################\ndnl LARGE if block\nif test \"$enable_clippy_only\" != \"yes\"; then\ndnl ##########################################################################\n\ndnl ------------------\ndnl check Net-SNMP library\ndnl ------------------\nif test \"$enable_snmp\" != \"\" -a \"$enable_snmp\" != \"no\"; then\n   AC_PATH_TOOL([NETSNMP_CONFIG], [net-snmp-config], [no])\n   if test \"$NETSNMP_CONFIG\" = \"no\"; then\n      AC_MSG_ERROR([--enable-snmp given but unable to find net-snmp-config])\n   fi\n   SNMP_LIBS=\"`${NETSNMP_CONFIG} --agent-libs`\"\n   SNMP_CFLAGS=\"`${NETSNMP_CONFIG} --base-cflags`\"\n   # net-snmp lists all of its own dependencies.  we absolutely do not want that\n   # among other things we avoid a GPL vs. OpenSSL license conflict here\n   for removelib in crypto ssl sensors pci wrap; do\n     SNMP_LIBS=\"`echo $SNMP_LIBS | sed -e 's/\\(^\\|\\s\\)-l'$removelib'\\b/ /g' -e 's/\\(^\\|\\s\\)\\([^\\s]*\\/\\)\\?lib'$removelib'\\.[^\\s]\\+\\b/ /g'`\"\n   done\n   AC_MSG_CHECKING([whether we can link to Net-SNMP])\n   AC_LINK_IFELSE_FLAGS([$SNMP_CFLAGS], [$SNMP_LIBS], [AC_LANG_PROGRAM([\nint main(void);\n],\n[\n{\n  return 0;\n}\n])], [\n     AC_MSG_RESULT([no])\n     AC_MSG_ERROR([--enable-snmp given but not usable])])\n   case \"${enable_snmp}\" in\n     yes)\n      SNMP_METHOD=agentx\n      ;;\n     agentx)\n      SNMP_METHOD=\"${enable_snmp}\"\n      ;;\n     *)\n      AC_MSG_ERROR([--enable-snmp given with an unknown method (${enable_snmp}). Use yes or agentx])\n      ;;\n   esac\n   AH_TEMPLATE([SNMP_AGENTX], [Use SNMP AgentX to interface with snmpd])\n   AC_DEFINE_UNQUOTED(AS_TR_CPP(SNMP_${SNMP_METHOD}),,[SNMP method to interface with snmpd])\nfi\nAC_SUBST([SNMP_LIBS])\nAC_SUBST([SNMP_CFLAGS])\n\ndnl ---------------\ndnl libyang\ndnl ---------------\nPKG_CHECK_MODULES([LIBYANG], [libyang >= 2.1.128], , [\nAC_MSG_ERROR([m4_normalize([libyang >= 2.1.128 is required, and was not found on your system.\nPlease consult doc/developer/building-libyang.rst for instructions on installing or building libyang.])])])\nac_cflags_save=\"$CFLAGS\"\nCFLAGS=\"$CFLAGS $LIBYANG_CFLAGS\"\nAC_CHECK_MEMBER([struct lyd_node.priv], [], [\n  AC_MSG_ERROR([m4_normalize([\n    libyang needs to be compiled with ENABLE_LYD_PRIV=ON.\n    Instructions for this are included in the build documentation for your platform at http://docs.frrouting.org/projects/dev-guide/en/latest/building.html])\n  ])\n], [[#include <libyang/libyang.h>]])\n\nAC_CHECK_LIB([yang],[lyd_find_xpath3],[],[AC_MSG_ERROR([m4_normalize([\nlibyang missing lyd_find_xpath3])])])\ndnl -- don't add lyd_new_list3 to this list unless bug is fixed upstream\ndnl -- https://github.com/CESNET/libyang/issues/2149\nAC_CHECK_FUNCS([ly_strerrcode ly_strvecode lyd_trim_xpath])\n\nCFLAGS=\"$ac_cflags_save\"\n\ndnl ---------------\ndnl configuration rollbacks\ndnl ---------------\nSQLITE3=false\nif test \"$enable_config_rollbacks\" = \"yes\"; then\n  PKG_CHECK_MODULES([SQLITE3], [sqlite3], [\n    AC_DEFINE([HAVE_CONFIG_ROLLBACKS], [1], [Enable configuration rollbacks])\n    AC_DEFINE([HAVE_SQLITE3], [1], [Enable sqlite3 database])\n    SQLITE3=true\n  ], [\n    AC_MSG_ERROR([--enable-config-rollbacks given but sqlite3 was not found on your system.])\n  ])\nfi\n\ndnl ---------------\ndnl sysrepo\ndnl ---------------\nif test \"$enable_sysrepo\" = \"yes\"; then\n  PKG_CHECK_MODULES([SYSREPO], [sysrepo >= 2.1.42],\n      [AC_DEFINE([HAVE_SYSREPO], [1], [Enable sysrepo integration])\n      SYSREPO=true],\n      [SYSREPO=false\n      AC_MSG_ERROR([sysrepo was not found on your system.])]\n  )\nfi\n\ndnl ---------------\ndnl gRPC\ndnl ---------------\nif test \"$enable_grpc\" = \"yes\"; then\n  AC_LANG_PUSH([C++])\n  AX_CXX_COMPILE_STDCXX([11], [ext])\n  PKG_CHECK_MODULES([GRPC], [grpc >= 6.0.0 grpc++ >= 1.16.1 protobuf >= 3.6.1 ], [\n    AC_CHECK_PROGS([PROTOC], [protoc], [/bin/false])\n    if test \"$PROTOC\" = \"/bin/false\"; then\n      AC_MSG_FAILURE([grpc requested but protoc not found.])\n    fi\n\n    AC_DEFINE([HAVE_GRPC], [1], [Enable the gRPC northbound plugin])\n    GRPC=true\n  ], [\n    GRPC=false\n    AC_MSG_ERROR([grpc/grpc++ were not found on your system.])\n  ])\n  AC_LANG_POP([C++])\nfi\n\ndnl ---------\ndnl DPDK\ndnl ---------\nif test \"$enable_dp_dpdk\" = \"yes\"; then\n  PKG_CHECK_MODULES([DPDK], [libdpdk], [\n    AC_DEFINE([HAVE_DPDK], [1], [Enable DPDK backend])\n    DPDK=true\n  ], [\n    AC_MSG_ERROR([configuration specifies --enable-dp-dpdk but DPDK libs were not found])\n  ])\nfi\n\ndnl -----\ndnl LTTng\ndnl -----\nif test \"$enable_lttng\" = \"yes\"; then\n  PKG_CHECK_MODULES([UST], [lttng-ust >= 2.9.0], [\n    AC_DEFINE([HAVE_LTTNG], [1], [Enable LTTng support])\n    LTTNG=true\n  ], [\n    AC_MSG_ERROR([configuration specifies --enable-lttng but lttng-ust was not found])\n  ])\nfi\n\ndnl ----\ndnl USDT\ndnl ----\nif test \"$enable_usdt\" = \"yes\"; then\n  AC_CHECK_HEADERS([sys/sdt.h], [\n    AC_DEFINE([HAVE_USDT], [1], [Enable USDT probes])\n    USDT=true\n  ], [\n    AC_MSG_ERROR([configuration specifies --enable-usdt but no USDT kernel headers (sys/sdt.h) found])\n  ])\nfi\n\ndnl ------\ndnl ZeroMQ\ndnl ------\nif test \"$enable_zeromq\" != \"no\"; then\n  PKG_CHECK_MODULES([ZEROMQ], [libzmq >= 4.0.0], [\n    AC_DEFINE([HAVE_ZEROMQ], [1], [Enable ZeroMQ support])\n    ZEROMQ=true\n  ], [\n    if test \"$enable_zeromq\" = \"yes\"; then\n      AC_MSG_ERROR([configuration specifies --enable-zeromq but libzmq was not found])\n    fi\n  ])\nfi\n\ndnl ------------------------------------\ndnl Enable RPKI and add librtr to libs\ndnl ------------------------------------\nif test \"$enable_rpki\" = \"yes\"; then\n  PKG_CHECK_MODULES([RTRLIB], [rtrlib >= 0.8.0],\n      [RPKI=true],\n      [RPKI=false\n      AC_MSG_ERROR([rtrlib was not found on your system or is too old.])]\n  )\nfi\n\ndnl ------------------------------------\ndnl pimd and pim6d not supported on OpenBSD and MacOS\ndnl ------------------------------------\nif test \"$enable_pimd\" != \"no\"; then\nAC_MSG_CHECKING([for pimd OS support])\ncase \"$host_os\" in\n  darwin*)\n    AC_MSG_RESULT([no])\n    enable_pimd=\"no\"\n    ;;\n  openbsd*)\n    AC_MSG_RESULT([no])\n    enable_pimd=\"no\"\n    ;;\n  *)\n    AC_MSG_RESULT([yes])\n    ;;\nesac\nfi\n\nif test \"$enable_pim6d\" != \"no\"; then\nAC_MSG_CHECKING([for pim6d OS support])\ncase \"$host_os\" in\n  linux*)\n    AC_MSG_RESULT([yes])\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    enable_pim6d=\"no\"\n    ;;\nesac\nfi\n\ndnl -------------------------------------\ndnl VRRP is only supported on linux\ndnl -------------------------------------\nif test \"$enable_vrrpd\" != \"no\"; then\nAC_MSG_CHECKING([for VRRP OS support])\ncase \"$host_os\" in\n  linux*)\n    AC_MSG_RESULT([yes])\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    enable_vrrpd=\"no\"\n    ;;\nesac\nfi\n\ndnl ------------------------------------------\ndnl Check whether rtrlib was build with ssh support\ndnl ------------------------------------------\nAC_MSG_CHECKING([whether the RTR Library is compiled with SSH])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[#include \"rtrlib/rtrlib.h\"]],\n\t\t\t[[struct tr_ssh_config config;]])],\n\t[AC_MSG_RESULT([yes])\n\tAC_DEFINE([FOUND_SSH], [1], [found_ssh])],\n\tAC_MSG_RESULT([no])\n)\n\ndnl ---------------\ndnl dlopen & dlinfo\ndnl ---------------\nLIBS_save=\"$LIBS\"\nAC_SEARCH_LIBS([dlopen], [dl dld], [], [\n  AC_MSG_ERROR([unable to find the dlopen()])\n])\n\nAC_CHECK_HEADERS([link.h])\n\nAC_CACHE_CHECK([for dlinfo(RTLD_DI_ORIGIN)], [frr_cv_rtld_di_origin], [\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <stdlib.h>\n#ifdef HAVE_LINK_H\n#include <link.h>\n#endif\n#include <dlfcn.h>\n]], [[\n  char origin[1];\n  dlinfo (NULL, RTLD_DI_ORIGIN, &origin);\n]])], [\n    frr_cv_rtld_di_origin=yes\n  ], [\n    frr_cv_rtld_di_origin=no\n  ])\n])\nif test \"$frr_cv_rtld_di_origin\" = \"yes\"; then\n  AC_DEFINE([HAVE_DLINFO_ORIGIN], [1], [Have dlinfo RTLD_DI_ORIGIN])\nfi\n\nAC_CACHE_CHECK([for dlinfo(RTLD_DI_LINKMAP)], [frr_cv_rtld_di_linkmap], [\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <stdlib.h>\n#ifdef HAVE_LINK_H\n#include <link.h>\n#endif\n#include <dlfcn.h>\n]], [[\n  struct link_map *lm = NULL;\n  dlinfo (NULL, RTLD_DI_LINKMAP, &lm);\n]])], [\n    frr_cv_rtld_di_linkmap=yes\n  ], [\n    frr_cv_rtld_di_linkmap=no\n  ])\n])\nif test \"$frr_cv_rtld_di_linkmap\" = \"yes\"; then\n  AC_DEFINE([HAVE_DLINFO_LINKMAP], [1], [Have dlinfo RTLD_DI_LINKMAP])\nfi\n\nLIBDL=\"$LIBS\"\nLIBDL=\"${LIBDL%$LIBS_save}\"\nLIBDL=\"${LIBDL#$LIBS_save}\"\nAC_SUBST([LIBDL])\nLIBS=\"$LIBS_save\"\nunset LIBS_save\n\ndnl ##########################################################################\ndnl test \"$enable_clippy_only\" != \"yes\"\nfi\ndnl END OF LARGE if block\ndnl ##########################################################################\n\ndnl ---------------------------\ndnl sockaddr and netinet checks\ndnl ---------------------------\nAC_CHECK_TYPES([\n\tstruct sockaddr_dl,\n\tstruct vifctl, struct mfcctl, struct sioc_sg_req,\n\tvifi_t, struct sioc_vif_req, struct igmpmsg,\n\tstruct ifaliasreq, struct if6_aliasreq, struct in6_aliasreq,\n\tstruct nd_opt_adv_interval,\n\tstruct nd_opt_homeagent_info, struct nd_opt_adv_interval,\n\tstruct nd_opt_rdnss, struct nd_opt_dnssl],\n\t[], [], FRR_INCLUDES)\n\nAC_CHECK_MEMBERS([struct sockaddr.sa_len,\n\tstruct sockaddr_in.sin_len, struct sockaddr_un.sun_len,\n\tstruct sockaddr_dl.sdl_len,\n\tstruct if6_aliasreq.ifra_lifetime,\n\tstruct nd_opt_adv_interval.nd_opt_ai_type],\n\t[], [], FRR_INCLUDES)\n\ndnl ---------------------------\ndnl IRDP/pktinfo/icmphdr checks\ndnl ---------------------------\n\nAC_CHECK_TYPES([struct in_pktinfo], [\n  AC_CHECK_TYPES([struct icmphdr], [\n    IRDP=true\n  ], [\n    IRDP=false\n  ], [FRR_INCLUDES])\n], [\n  IRDP=false\n], [FRR_INCLUDES])\n\ncase \"${enable_irdp}\" in\nyes)\n  $IRDP || AC_MSG_ERROR(['IRDP requires in_pktinfo at the moment!'])\n  ;;\nno)\n  IRDP=false\n  ;;\n*)\n  IRDP=false\n  ;;\nesac\n\n\ndnl -----------------------\ndnl checking for IP_PKTINFO\ndnl -----------------------\nAC_MSG_CHECKING([for IP_PKTINFO])\nAC_COMPILE_IFELSE(\n[ AC_LANG_PROGRAM([[\n        #include <netdb.h>\n   ]], [[\n        int opt = IP_PKTINFO;\n   ]])\n],[\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_IP_PKTINFO], [1], [Have IP_PKTINFO])\n],[\n  AC_MSG_RESULT([no])\n])\n\ndnl ---------------------------\ndnl checking for IP_RECVDSTADDR\ndnl ---------------------------\nAC_MSG_CHECKING([for IP_RECVDSTADDR])\nAC_COMPILE_IFELSE(\n[ AC_LANG_PROGRAM([[\n        #include <netinet/in.h>\n  ]], [[\n        int opt = IP_RECVDSTADDR;\n  ]])\n],[\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_IP_RECVDSTADDR], [1], [Have IP_RECVDSTADDR])\n],[\n  AC_MSG_RESULT([no])\n])\n\ndnl ----------------------\ndnl checking for IP_RECVIF\ndnl ----------------------\nAC_MSG_CHECKING([for IP_RECVIF])\nAC_COMPILE_IFELSE(\n[ AC_LANG_PROGRAM([[\n        #include <netinet/in.h>\n  ]], [[\n        int opt = IP_RECVIF;\n  ]])\n],[\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_IP_RECVIF], [1], [Have IP_RECVIF])\n],[\n  AC_MSG_RESULT([no])\n])\n\ndnl ----------------------\ndnl checking for SO_BINDANY\ndnl ----------------------\nAC_MSG_CHECKING([for SO_BINDANY])\nAC_COMPILE_IFELSE(\n[ AC_LANG_PROGRAM([[\n        #include <sys/socket.h>\n  ]], [[\n        int opt = SO_BINDANY;\n  ]])\n],[\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_SO_BINDANY], [1], [Have SO_BINDANY])\n],[\n  AC_MSG_RESULT([no])\n])\n\ndnl ----------------------\ndnl checking for IP_FREEBIND\ndnl ----------------------\nAC_MSG_CHECKING([for IP_FREEBIND])\nAC_COMPILE_IFELSE(\n[ AC_LANG_PROGRAM([[\n        #include <netinet/in.h>\n  ]], [[\n        int opt = IP_FREEBIND;\n  ]])\n],[\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_IP_FREEBIND], [1], [Have IP_FREEBIND])\n],[\n  AC_MSG_RESULT([no])\n])\n\ndnl --------------------------------------\ndnl checking for be32dec existence or not\ndnl --------------------------------------\nAC_CHECK_DECLS([be32enc, be32dec], [], [], [\n        #ifdef HAVE_SYS_ENDIAN_H\n        #include <sys/endian.h>\n        #endif\n        #ifdef HAVE_ENDIAN_H\n        #include <endian.h>\n        #endif\n])\n\ndnl --------------------------------------\ndnl checking for clock_time monotonic struct and call\ndnl --------------------------------------\nAC_CHECK_DECL([CLOCK_MONOTONIC],\n\t[AC_CHECK_LIB([rt], [clock_gettime], [LIBS=\"$LIBS -lrt\"])\n\t AC_DEFINE([HAVE_CLOCK_MONOTONIC], [1], [Have monotonic clock])\n], [AC_MSG_RESULT([no])], [FRR_INCLUDES])\n\nAC_CHECK_DECL([CLOCK_THREAD_CPUTIME_ID], [\n\t AC_DEFINE([HAVE_CLOCK_THREAD_CPUTIME_ID], [1], [Have cpu-time clock])\n], [AC_MSG_RESULT([no])], [FRR_INCLUDES])\n\nAC_SEARCH_LIBS([clock_nanosleep], [rt], [\n  AC_DEFINE([HAVE_CLOCK_NANOSLEEP], [1], [Have clock_nanosleep()])\n])\n\ndnl --------------------------------------\ndnl checking for flex and bison\ndnl --------------------------------------\n\ndnl autoconf 2.69 AC_PROG_LEX has no parameters\ndnl autoconf 2.70 AC_PROG_LEX prints a deprecation warning without params\nm4_if(m4_version_compare(m4_defn([AC_AUTOCONF_VERSION]), [2.70]), [-1], [dnl\n  dnl autoconf < 2.70\n  AC_PROG_LEX\n], [\n  dnl autoconf >= 2.70\n  AC_PROG_LEX([noyywrap])\n])\n\nAC_MSG_CHECKING([version of flex])\nfrr_ac_flex_version=\"$(eval $LEX -V | grep flex | head -n 1)\"\nfrr_ac_flex_version=\"${frr_ac_flex_version##* }\"\nAC_MSG_RESULT([$frr_ac_flex_version])\nAX_COMPARE_VERSION([$frr_ac_flex_version], [lt], [2.5.20], [\n  LEX=\"$SHELL $missing_dir/missing flex\"\n  if test -f \"${srcdir}/lib/command_lex.c\" -a -f \"${srcdir}/lib/command_lex.h\"; then\n    AC_MSG_WARN([using pregenerated flex output files])\n  else\n    AC_MSG_ERROR([flex failure and pregenerated files not included (probably a git build)])\n  fi\n  AC_SUBST([LEX_OUTPUT_ROOT], [lex.yy])\n  AC_SUBST([LEXLIB], [''])\n])\n\nAC_PROG_YACC\ndnl thanks GNU bison for this b*llshit...\nAC_MSG_CHECKING([version of bison])\nfrr_ac_bison_version=\"$(eval $YACC -V | grep bison | head -n 1)\"\nfrr_ac_bison_version=\"${frr_ac_bison_version##* }\"\nfrr_ac_bison_missing=\"false\"\ncase \"x${frr_ac_bison_version}x\" in\n  x2.7*)\n    BISON_OPENBRACE='\"'\n    BISON_CLOSEBRACE='\"'\n    BISON_VERBOSE=''\n    AC_MSG_RESULT([$frr_ac_bison_version - 2.7 or older])\n    ;;\n  x2.*|x1.*)\n    AC_MSG_RESULT([$frr_ac_bison_version])\n    AC_MSG_WARN([installed bison is too old.  Please install GNU bison 2.7.x or newer.])\n    frr_ac_bison_missing=\"true\"\n    ;;\n  x)\n    AC_MSG_RESULT([none])\n    AC_MSG_WARN([could not determine bison version.  Please install GNU bison 2.7.x or newer.])\n    frr_ac_bison_missing=\"true\"\n    ;;\n  x3.[012][^0-9]*)\n    BISON_OPENBRACE='{'\n    BISON_CLOSEBRACE='}'\n    BISON_VERBOSE='-Dparse.error=verbose'\n    AC_MSG_RESULT([$frr_ac_bison_version - 3.0 to 3.2])\n    ;;\n  *)\n    BISON_OPENBRACE='{'\n    BISON_CLOSEBRACE='}'\n    BISON_VERBOSE='-Dparse.error=verbose -Wno-yacc'\n    AC_MSG_RESULT([$frr_ac_bison_version - 3.3 or newer])\n    ;;\nesac\nAC_SUBST([BISON_OPENBRACE])\nAC_SUBST([BISON_CLOSEBRACE])\nAC_SUBST([BISON_VERBOSE])\n\nif $frr_ac_bison_missing; then\n  YACC=\"$SHELL $missing_dir/missing bison -y\"\n  if test -f \"${srcdir}/lib/command_parse.c\" -a -f \"${srcdir}/lib/command_parse.h\"; then\n    AC_MSG_WARN([using pregenerated bison output files])\n  else\n    AC_MSG_ERROR([bison failure and pregenerated files not included (probably a git build)])\n  fi\nfi\n\ndnl -------------------\ndnl capabilities checks\ndnl -------------------\nif test \"$enable_capabilities\" != \"no\"; then\n  AC_MSG_CHECKING([whether prctl PR_SET_KEEPCAPS is available])\n  AC_COMPILE_IFELSE(\n  [ AC_LANG_PROGRAM([[\n        #include <sys/prctl.h>\n    ]], [[\n        prctl(PR_SET_KEEPCAPS, 1, 0, 0, 0);\n    ]])\n  ],[AC_MSG_RESULT([yes])\n     AC_DEFINE([HAVE_PR_SET_KEEPCAPS], [1], [prctl])\n     frr_ac_keepcaps=\"yes\"\n  ],[AC_MSG_RESULT(no)\n  ])\n  if test \"$frr_ac_keepcaps\" = \"yes\"; then\n    AC_CHECK_HEADERS([sys/capability.h])\n  fi\n  if test \"$ac_cv_header_sys_capability_h\" = \"yes\"; then\n    AC_CHECK_LIB([cap], [cap_init],\n      [AC_DEFINE([HAVE_LCAPS], [1], [Capabilities])\n       LIBCAP=\"-lcap\"\n       frr_ac_lcaps=\"yes\"]\n    )\n  fi\n  if test \"$frr_ac_scaps\" = \"yes\" \\\n       -o \"$frr_ac_lcaps\" = \"yes\"; then\n    AC_DEFINE([HAVE_CAPABILITIES], [1], [capabilities])\n  fi\n\n  case \"$host_os\" in\n  linux*)\n    if test \"$enable_clippy_only\" != \"yes\"; then\n    if test \"$frr_ac_lcaps\" != \"yes\"; then\n      AC_MSG_ERROR([libcap and/or its headers were not found.  Running FRR without libcap support built in causes a huge performance penalty.])\n    fi\n    fi\n    ;;\n  esac\nelse\n  case \"$host_os\" in\n  linux*)\n    AC_MSG_WARN([Running FRR without libcap support built in causes a huge performance penalty.])\n    ;;\n  esac\nfi\nAC_SUBST([LIBCAP])\n\ndnl ---------------------------\ndnl check for glibc 'backtrace'\ndnl ---------------------------\nif test \"$enable_backtrace\" != \"no\" ; then\n  backtrace_ok=no\n  PKG_CHECK_MODULES([UNWIND], [libunwind], [\n    AC_DEFINE([HAVE_LIBUNWIND], [1], [libunwind])\n    backtrace_ok=yes\n  ], [\n    true\n  ])\n\n  if test \"$backtrace_ok\" = \"no\"; then\n    AC_CHECK_HEADER([unwind.h], [\n      AC_SEARCH_LIBS([unw_getcontext], [unwind], [\n        AC_DEFINE([HAVE_LIBUNWIND], [1], [libunwind])\n        backtrace_ok=yes\n      ])\n    ])\n  fi\n\n  if test \"$backtrace_ok\" = \"no\"; then\n    AC_CHECK_HEADER([execinfo.h], [\n      AC_SEARCH_LIBS([backtrace], [execinfo], [\n        AC_DEFINE([HAVE_GLIBC_BACKTRACE], [1], [Glibc backtrace])\n        backtrace_ok=yes\n      ],, [-lm])\n    ])\n  fi\n\n  if test \"$enable_backtrace\" = \"yes\" -a \"$backtrace_ok\" = \"no\"; then\n    dnl user explicitly requested backtrace but we failed to find support\n    AC_MSG_FAILURE([failed to find backtrace or libunwind support])\n  fi\nfi\n\ndnl -----------------------------------------\ndnl check for malloc mallinfo struct and call\ndnl this must try and link using LIBS, in\ndnl order to check no alternative allocator\ndnl has been specified, which might not provide\ndnl mallinfo\ndnl -----------------------------------------\nAC_CHECK_HEADERS([malloc.h malloc_np.h malloc/malloc.h],,, [FRR_INCLUDES])\n\nAC_CACHE_CHECK([whether mallinfo is available], [frr_cv_mallinfo], [\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([FRR_INCLUDES [\n#ifdef HAVE_MALLOC_H\n#include <malloc.h>\n#endif\n#ifdef HAVE_MALLOC_NP_H\n#include <malloc_np.h>\n#endif\n#ifdef HAVE_MALLOC_MALLOC_H\n#include <malloc/malloc.h>\n#endif\n]], [[\nstruct mallinfo ac_x; ac_x = mallinfo ();\n]])], [\n    frr_cv_mallinfo=yes\n  ], [\n    frr_cv_mallinfo=no\n  ])\n])\nif test \"$frr_cv_mallinfo\" = \"yes\"; then\n  AC_DEFINE([HAVE_MALLINFO], [1], [mallinfo])\nfi\n\nAC_CACHE_CHECK([whether mallinfo2 is available], [frr_cv_mallinfo2], [\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([FRR_INCLUDES [\n#ifdef HAVE_MALLOC_H\n#include <malloc.h>\n#endif\n#ifdef HAVE_MALLOC_NP_H\n#include <malloc_np.h>\n#endif\n#ifdef HAVE_MALLOC_MALLOC_H\n#include <malloc/malloc.h>\n#endif\n]], [[\nstruct mallinfo2 ac_x; ac_x = mallinfo2 ();\n]])], [\n    frr_cv_mallinfo2=yes\n  ], [\n    frr_cv_mallinfo2=no\n  ])\n])\nif test \"$frr_cv_mallinfo2\" = \"yes\"; then\n  AC_DEFINE([HAVE_MALLINFO2], [1], [mallinfo2])\nfi\n\nAC_MSG_CHECKING([whether malloc_usable_size is available])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([FRR_INCLUDES [\n#ifdef HAVE_MALLOC_H\n#include <malloc.h>\n#endif\n#ifdef HAVE_MALLOC_MALLOC_H\n#include <malloc/malloc.h>\n#endif\n]], [[\nsize_t ac_x; ac_x = malloc_usable_size(NULL);\n]])], [\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_MALLOC_USABLE_SIZE], [1], [malloc_usable_size])\n], [\n  AC_MSG_RESULT([no])\n\n  AC_MSG_CHECKING([whether malloc_size is available])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#ifdef HAVE_MALLOC_H\n#include <malloc.h>\n#endif\n#ifdef HAVE_MALLOC_MALLOC_H\n#include <malloc/malloc.h>\n#endif\n]], [[\nsize_t ac_x; ac_x = malloc_size(NULL);\n]])], [\n    AC_MSG_RESULT([yes])\n    AC_DEFINE([HAVE_MALLOC_SIZE], [1], [malloc_size])\n  ], [\n    AC_MSG_RESULT([no])\n  ])\n])\n\ndnl ----------\ndnl configure date\ndnl ----------\ndev_version=`echo $VERSION | grep dev`\n#don't expire deprecated code in non 'dev' branch\nif test \"$dev_version\" = \"\"; then\n   CONFDATE=0\nelse\n   CONFDATE=`date '+%Y%m%d'`\nfi\nAC_SUBST([CONFDATE])\n\ndnl get the full path, recursing through variables...\nAC_DEFUN([AX_SUBST_EXPANDED], [\n  AX_RECURSIVE_EVAL([[$]$1], [e_$1])\n  AC_SUBST([e_$1])\n])\n\nAX_SUBST_EXPANDED([bindir])\nAX_SUBST_EXPANDED([sbindir])\nAX_SUBST_EXPANDED([frr_sysconfdir])\nAX_SUBST_EXPANDED([frr_runstatedir])\nAX_SUBST_EXPANDED([frr_libstatedir])\nAX_SUBST_EXPANDED([moduledir])\nAX_SUBST_EXPANDED([yangmodelsdir])\nAX_SUBST_EXPANDED([scriptdir])\n\ndnl strip duplicate trailing slashes if necessary\ndnl note this uses e_bindir / e_sbindir created above\nwatchfrr_sh=\"\\${e_sbindir%/}/watchfrr.sh\"\nAX_SUBST_EXPANDED([watchfrr_sh])\nvtysh_bin=\"\\${e_bindir%/}/vtysh\"\nAX_SUBST_EXPANDED([vtysh_bin])\n\ndnl various features\nAM_CONDITIONAL([SUPPORT_REALMS], [test \"$enable_realms\" = \"yes\"])\nAM_CONDITIONAL([ENABLE_BGP_VNC], [test \"$enable_bgp_vnc\" != \"no\"])\nAM_CONDITIONAL([BGP_BMP], [$bgpd_bmp])\ndnl northbound\nAM_CONDITIONAL([SQLITE3], [$SQLITE3])\nAM_CONDITIONAL([SYSREPO], [test \"$enable_sysrepo\" = \"yes\"])\nAM_CONDITIONAL([GRPC], [test \"$enable_grpc\" = \"yes\"])\nAM_CONDITIONAL([ZEROMQ], [test \"$ZEROMQ\" = \"true\"])\ndnl plugins\nAM_CONDITIONAL([RPKI], [test \"$RPKI\" = \"true\"])\nAM_CONDITIONAL([SNMP], [test \"$SNMP_METHOD\" = \"agentx\"])\nAM_CONDITIONAL([IRDP], [$IRDP])\nAM_CONDITIONAL([FPM], [test \"$enable_fpm\" = \"yes\"])\nAM_CONDITIONAL([HAVE_PROTOBUF], [test \"$enable_protobuf\" != \"no\"])\nAM_CONDITIONAL([HAVE_PROTOBUF3], [$PROTO3])\n\ndnl PCEP plugin\nAS_IF([test \"$enable_pathd\" != \"no\"], [\n       AC_SUBST([PATHD_PCEP_LIBS], [\"pceplib/libpcep_pcc.la\"])\n       AC_SUBST([PATHD_PCEP_INCL], [\"-I./pceplib \"])\n       ])\nAC_CHECK_LIB([cunit], [CU_initialize_registry], [pcep_cunit=yes],[pcep_cunit=no])\nAM_CONDITIONAL([PATHD_PCEP_TEST], [test \"x${pcep_cunit}\" = xyes])\nAC_CHECK_PROG(VALGRIND_CHECK, valgrind, yes)\nAM_CONDITIONAL([HAVE_VALGRIND_PCEP], [test \"$VALGRIND_CHECK\" = \"yes\"])\n\ndnl daemons\nAM_CONDITIONAL([VTYSH], [test \"$VTYSH\" = \"vtysh\"])\nAM_CONDITIONAL([ZEBRA], [test \"$enable_zebra\" != \"no\"])\nAM_CONDITIONAL([BGPD], [test \"$enable_bgpd\" != \"no\"])\nAM_CONDITIONAL([MGMTD], [test \"$enable_mgmtd\" != \"no\"])\nAM_CONDITIONAL([MGMTD_TESTC], [test \"$enable_mgmtd_test_be_client\" = \"yes\"])\nAM_CONDITIONAL([FPM_LISTENER], [test \"enable_fpm_listener\" = \"yes\"])\nAM_CONDITIONAL([RIPD], [test \"$enable_ripd\" != \"no\"])\nAM_CONDITIONAL([OSPFD], [test \"$enable_ospfd\" != \"no\"])\nAM_CONDITIONAL([LDPD], [test \"$enable_ldpd\" != \"no\"])\nAM_CONDITIONAL([BFDD], [test \"$BFDD\" = \"bfdd\"])\nAM_CONDITIONAL([NHRPD], [test \"$NHRPD\" = \"nhrpd\"])\nAM_CONDITIONAL([EIGRPD], [test \"$enable_eigrpd\" != \"no\"])\nAM_CONDITIONAL([WATCHFRR], [test \"$WATCHFRR\" = \"watchfrr\"])\nAM_CONDITIONAL([OSPFCLIENT], [test \"$OSPFCLIENT\" = \"ospfclient\"])\nAM_CONDITIONAL([RIPNGD], [test \"$enable_ripngd\" != \"no\"])\nAM_CONDITIONAL([BABELD], [test \"$enable_babeld\" != \"no\"])\nAM_CONDITIONAL([OSPF6D], [test \"$enable_ospf6d\" != \"no\"])\nAM_CONDITIONAL([ISISD], [test \"$enable_isisd\" != \"no\"])\nAM_CONDITIONAL([PIMD], [test \"$enable_pimd\" != \"no\"])\nAM_CONDITIONAL([PIM6D], [test \"$enable_pim6d\" != \"no\"])\nAM_CONDITIONAL([PBRD], [test \"$enable_pbrd\" != \"no\"])\nAM_CONDITIONAL([SHARPD], [test \"$enable_sharpd\" = \"yes\"])\nAM_CONDITIONAL([STATICD], [test \"$enable_staticd\" != \"no\"])\nAM_CONDITIONAL([FABRICD], [test \"$enable_fabricd\" != \"no\"])\nAM_CONDITIONAL([VRRPD], [test \"$enable_vrrpd\" != \"no\"])\nAM_CONDITIONAL([PATHD], [test \"$enable_pathd\" != \"no\"])\nAM_CONDITIONAL([PATHD_PCEP], [test \"$enable_pathd\" != \"no\"])\nAM_CONDITIONAL([DP_DPDK], [test \"$enable_dp_dpdk\" = \"yes\"])\n\n\nAM_CONDITIONAL([PYTHON_RUNTIME_DEPENDENCY], [test \"$enable_python_runtime\" != \"no\"])\n\nAC_CONFIG_FILES([Makefile],[\n\ttest \"$enable_dev_build\" = \"yes\" && makefile_devbuild=\"--dev-build\"\n\t${PYTHON} \"${ac_abs_top_srcdir}/python/makefile.py\" ${makefile_devbuild} || exit 1\n], [\n\tPYTHON=\"$PYTHON\"\n\tenable_dev_build=\"$enable_dev_build\"\n])\n\nAC_CONFIG_FILES([\n\t  config.version\n\t  redhat/frr.spec\n\t  alpine/APKBUILD\n\t  snapcraft/snapcraft.yaml\n\t  lib/version.h\n\t  lib/config_paths.h\n\t  tests/lib/cli/test_cli.refout pkgsrc/mgmtd.sh\n\t  pkgsrc/bgpd.sh pkgsrc/ospf6d.sh pkgsrc/ospfd.sh\n\t  pkgsrc/ripd.sh pkgsrc/ripngd.sh pkgsrc/zebra.sh\n\t  pkgsrc/eigrpd.sh])\n\nAC_CONFIG_FILES([tools/frr], [chmod +x tools/frr])\nAC_CONFIG_FILES([tools/watchfrr.sh], [chmod +x tools/watchfrr.sh])\nAC_CONFIG_FILES([tools/frrinit.sh], [chmod +x tools/frrinit.sh])\nAC_CONFIG_FILES([tools/frrcommon.sh])\nAC_CONFIG_FILES([tools/frr.service])\nAC_CONFIG_FILES([tools/frr@.service])\n\n# dnl write out a ccls file with our compile configuration\n# dnl have to add -Wno-unused-function otherwise foobar_cmd_magic causes\n# dnl all DEFPY(), et al., macros to flag as errors.\nAS_IF([test \"$enable_ccls\" = \"yes\"], [\n    AC_CONFIG_COMMANDS([gen-dot-ccls], [\n        cat > \"${srcdir}/.ccls\" <<EOF\nclang\n-DHAVE_CONFIG_H\n-I.\n-I./include\n-I./lib\n-I./lib/assert\n-DSYSCONFDIR=\"${ac_frr_sysconfdir}\"\n-DCONFDATE=${ac_frr_confdate}\nEOF\n        if test \"$ac_abs_top_builddir\" != \"$ac_abs_top_srcdir\"; then\n            echo \"-I${ac_abs_top_builddir}\" >> \"${srcdir}/.ccls\"\n        fi\n        if test -n \"$FRR_ALL_CCLS_FLAGS\"; then\n            echo ${FRR_ALL_CCLS_FLAGS} | tr ' ' '\\n' >> \"${srcdir}/.ccls\"\n        fi\n        if test -n \"$FRR_ALL_CCLS_CFLAGS\"; then\n            cat >> \"${srcdir}/.ccls\" <<EOF\n%c $(echo ${FRR_ALL_CCLS_CFLAGS} | sed -e 's/  */\\n%c /g')\n%c -Wno-unused-function\n%c -Wno-microsoft\nEOF\nfi\n    ], [\n    FRR_ALL_CCLS_FLAGS=\"$(echo ${LIBYANG_CFLAGS} ${LUA_INCLUDE} ${SQLITE3_CFLAGS} | sed -e 's/  */ /g')\"\n    FRR_ALL_CCLS_CFLAGS=\"$(echo ${CFLAGS} ${WERROR} ${AC_CFLAGS} ${SAN_FLAGS} | sed -e 's/  */ /g')\"\n    ac_frr_confdate=\"${CONFDATE}\"\n    ac_frr_sysconfdir=\"${frr_sysconfdir}/\"\n    ])\n])\n\n\nAS_IF([test \"$with_pkg_git_version\" = \"yes\"], [\n    AC_CONFIG_COMMANDS([lib/gitversion.h], [\n\tdst=\"${ac_abs_top_builddir}/lib/gitversion.h\"\n\t${PERL} \"${ac_abs_top_srcdir}/lib/gitversion.pl\" \\\n\t\t\"${ac_abs_top_srcdir}\" \\\n\t\t> \"${dst}.tmp\"\n\ttest -f \"$dst\" \\\n\t\t&& diff \"${dst}.tmp\" \"${dst}\" >/dev/null 2>/dev/null \\\n\t\t&& rm \"${dst}.tmp\" \\\n\t\t|| mv \"${dst}.tmp\" \"${dst}\"\n    ], [\n\tPERL=\"$PERL\"\n    ])\n])\n\n## Hack, but working solution to avoid rebuilding of frr.info.\n## It's already in CVS until texinfo 4.7 is more common.\nAC_OUTPUT\n\nif test \"$enable_rpath\" = \"yes\" ; then\n\ttrue\nelse\n\t# See https://old-en.opensuse.org/openSUSE:Packaging_Guidelines#Removing_Rpath\n\tsed -e 's|^hardcode_libdir_flag_spec=.*|hardcode_libdir_flag_spec=\"\"|g' libtool > libtool.sed && cat libtool.sed > libtool\n\tsed -e 's|^runpath_var=LD_RUN_PATH|runpath_var=DIE_RPATH_DIE|g'         libtool > libtool.sed && cat libtool.sed > libtool\n\ttest -f libtool.sed && rm libtool.sed\nfi\n\necho \"\nFRRouting configuration\n------------------------------\nFRR version             : ${PACKAGE_VERSION}\nhost operating system   : ${host_os}\nsource code location    : ${srcdir}\ncompiler                : ${CC}\ncompiler flags          : ${CFLAGS} ${WERROR} ${AC_CFLAGS} ${SAN_FLAGS}\nmake                    : ${MAKE-make}\nlinker flags            : ${LDFLAGS} ${SAN_FLAGS} ${LIBS} ${LIBCAP} ${LIBREADLINE} ${LIBM}\nlocal state file dir    : ${e_frr_libstatedir}\nrun state file dir      : ${e_frr_runstatedir}\nconfig file directory   : ${e_frr_sysconfdir}\nmodule directory        : ${e_moduledir}\nscript directory        : ${e_scriptdir}\nuser to run as          : ${enable_user}\ngroup to run as         : ${enable_group}\ngroup for vty sockets   : ${enable_vty_group}\nconfig file mask        : ${enable_configfile_mask}\nlog file mask           : ${enable_logfile_mask}\nzebra protobuf enabled  : ${enable_protobuf:-no}\nvici socket path        : ${vici_socket}\n\nThe above user and group must have read/write access to the state file\ndirectory and to the config files in the config file directory.\"\n\nif test -n \"$enable_datacenter\"; then\n  AC_MSG_WARN([The --enable-datacenter compile time option is deprecated.  Please modify the init script to pass -F datacenter to the daemons instead.])\nfi\n\nif test \"$enable_doc\" != \"no\" -a \"$frr_py_mod_sphinx\" = \"false\"; then\n  AC_MSG_WARN([sphinx is missing but required to build documentation])\nfi\nif test \"$frr_py_mod_pytest\" = \"false\"; then\n  AC_MSG_WARN([pytest is missing, unit tests cannot be performed])\nfi\n\nif $path_warn_banner; then\n  AC_MSG_WARN([^])\n  AC_MSG_WARN([^])\n  AC_MSG_WARN([^ warnings regarding system path configuration were printed at the very top of output])\n  AC_MSG_WARN([^ paths have been adjusted by temporary workarounds])\n  AC_MSG_WARN([^ please fix your ./configure invocation (remove /frr) so it will work without the workarounds])\nfi\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "eigrpd",
          "type": "tree",
          "content": null
        },
        {
          "name": "fpm",
          "type": "tree",
          "content": null
        },
        {
          "name": "gdb",
          "type": "tree",
          "content": null
        },
        {
          "name": "grpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "isisd",
          "type": "tree",
          "content": null
        },
        {
          "name": "ldpd",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "mgmtd",
          "type": "tree",
          "content": null
        },
        {
          "name": "mlag",
          "type": "tree",
          "content": null
        },
        {
          "name": "nhrpd",
          "type": "tree",
          "content": null
        },
        {
          "name": "ospf6d",
          "type": "tree",
          "content": null
        },
        {
          "name": "ospfclient",
          "type": "tree",
          "content": null
        },
        {
          "name": "ospfd",
          "type": "tree",
          "content": null
        },
        {
          "name": "pathd",
          "type": "tree",
          "content": null
        },
        {
          "name": "pbrd",
          "type": "tree",
          "content": null
        },
        {
          "name": "pceplib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pimd",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkgsrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "qpb",
          "type": "tree",
          "content": null
        },
        {
          "name": "redhat",
          "type": "tree",
          "content": null
        },
        {
          "name": "ripd",
          "type": "tree",
          "content": null
        },
        {
          "name": "ripngd",
          "type": "tree",
          "content": null
        },
        {
          "name": "sharpd",
          "type": "tree",
          "content": null
        },
        {
          "name": "snapcraft",
          "type": "tree",
          "content": null
        },
        {
          "name": "stamp-h.in",
          "type": "blob",
          "size": 0.009765625,
          "content": "timestamp\n"
        },
        {
          "name": "staticd",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.h",
          "type": "blob",
          "size": 0.125,
          "content": "#include \"lib/compiler.h\"\nCPP_NOTICE(\"Trying to include version.h.  Please fix to use lib/version.h.\")\n#include \"lib/version.h\"\n"
        },
        {
          "name": "vrrpd",
          "type": "tree",
          "content": null
        },
        {
          "name": "vtysh",
          "type": "tree",
          "content": null
        },
        {
          "name": "watchfrr",
          "type": "tree",
          "content": null
        },
        {
          "name": "yang",
          "type": "tree",
          "content": null
        },
        {
          "name": "zebra",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}