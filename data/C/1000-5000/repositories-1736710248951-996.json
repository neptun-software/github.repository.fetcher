{
  "metadata": {
    "timestamp": 1736710248951,
    "page": 996,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pytorch/QNNPACK",
      "stars": 1533,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.5078125,
          "content": "---\nAccessModifierOffset: -1\nAlignAfterOpenBracket: AlwaysBreak\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: true\nAlignOperands:   false\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: false\nColumnLimit:     120\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nForEachMacros:   [ FOR_EACH_RANGE, FOR_EACH, ]\nIncludeCategories:\n  - Regex:           '^<.*\\.h(pp)?>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIndentCaseLabels: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 2000000\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSpaceAfterCStyleCast: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\n...\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2060546875,
          "content": "# Ninja files\nbuild.ninja\n\n# Build objects and artifacts\ndeps/\nbuild/\nbuild-*/\nbin/\nlib/\nout/\nobj/\nlibs/\n*.pyc\n*.pyo\n*.log\n\n# System files\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0859375,
          "content": "language: cpp\nos:\n - linux\n - osx\nscript:\n - scripts/build-local.sh\n - ctest --verbose\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 26.951171875,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates.\n# All rights reserved.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n\nCMAKE_MINIMUM_REQUIRED(VERSION 3.5 FATAL_ERROR)\n\nINCLUDE(GNUInstallDirs)\n\n# ---[ Project and semantic versioning.\nPROJECT(QNNPACK C CXX ASM)\n\n# ---[ Options.\nOPTION(QNNPACK_CUSTOM_THREADPOOL \"Build QNNPACK for custom thread pool\" OFF)\nSET(QNNPACK_LIBRARY_TYPE \"default\" CACHE STRING \"Type of library (shared, static, or default) to build\")\nSET_PROPERTY(CACHE QNNPACK_LIBRARY_TYPE PROPERTY STRINGS default static shared)\nOPTION(QNNPACK_BUILD_TESTS \"Build QNNPACK unit tests\" ON)\nOPTION(QNNPACK_BUILD_BENCHMARKS \"Build QNNPACK benchmarks\" ON)\n\n# ---[ CMake options\nIF(QNNPACK_BUILD_TESTS)\n  ENABLE_TESTING()\nENDIF()\n\n# ---[ Build flags\nIF(NOT CMAKE_SYSTEM_PROCESSOR)\n  IF(IOS)\n    LIST(LENGTH IOS_ARCH IOS_ARCH_COUNT)\n    IF(IOS_ARCH_COUNT GREATER 1)\n      MESSAGE(FATAL_ERROR \"Unsupported QNNPACK build with multiple iOS architectures (${IOS_ARCH}). \"\n        \"Specify a single architecture in IOS_ARCH and re-configure. \")\n    ENDIF()\n    IF(NOT IOS_ARCH MATCHES \"^(i386|x86_64|armv7.*|arm64.*)$\")\n      MESSAGE(FATAL_ERROR \"Unrecognized IOS_ARCH = ${IOS_ARCH}\")\n    ENDIF()\n  ELSE()\n    MESSAGE(FATAL_ERROR \"CMAKE_SYSTEM_PROCESSOR is not defined\")\n  ENDIF()\nELSEIF(NOT CMAKE_SYSTEM_PROCESSOR MATCHES \"^(i[3-6]86|x86_64|armv[5-8].*|aarch64)$\")\n  MESSAGE(FATAL_ERROR \"Unrecognized CMAKE_SYSTEM_PROCESSOR = ${CMAKE_SYSTEM_PROCESSOR}\")\nENDIF()\n\nIF(NOT CMAKE_SYSTEM_NAME)\n  MESSAGE(FATAL_ERROR \"CMAKE_SYSTEM_NAME not defined\")\nELSEIF(NOT CMAKE_SYSTEM_NAME MATCHES \"^(Darwin|Linux|Android)$\")\n  MESSAGE(FATAL_ERROR \"Unrecognized CMAKE_SYSTEM_NAME = ${CMAKE_SYSTEM_NAME}\")\nENDIF()\n\n# ---[ Download deps\nSET(CONFU_DEPENDENCIES_SOURCE_DIR \"${CMAKE_SOURCE_DIR}/deps\"\n  CACHE PATH \"Confu-style dependencies source directory\")\nSET(CONFU_DEPENDENCIES_BINARY_DIR \"${CMAKE_BINARY_DIR}/deps\"\n  CACHE PATH \"Confu-style dependencies binary directory\")\n\nIF(NOT DEFINED CLOG_SOURCE_DIR)\n  SET(CLOG_SOURCE_DIR \"${PROJECT_SOURCE_DIR}/deps/clog\")\nENDIF()\n\nIF(NOT DEFINED CPUINFO_SOURCE_DIR)\n  MESSAGE(STATUS \"Downloading cpuinfo to ${CONFU_DEPENDENCIES_SOURCE_DIR}/cpuinfo (define CPUINFO_SOURCE_DIR to avoid it)\")\n  CONFIGURE_FILE(cmake/DownloadCpuinfo.cmake \"${CONFU_DEPENDENCIES_BINARY_DIR}/cpuinfo-download/CMakeLists.txt\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/cpuinfo-download\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/cpuinfo-download\")\n  SET(CPUINFO_SOURCE_DIR \"${CONFU_DEPENDENCIES_SOURCE_DIR}/cpuinfo\" CACHE STRING \"cpuinfo source directory\")\nENDIF()\n\nIF(NOT DEFINED FP16_SOURCE_DIR)\n  MESSAGE(STATUS \"Downloading FP16 to ${CONFU_DEPENDENCIES_SOURCE_DIR}/fp16 (define FP16_SOURCE_DIR to avoid it)\")\n  CONFIGURE_FILE(cmake/DownloadFP16.cmake \"${CONFU_DEPENDENCIES_BINARY_DIR}/fp16-download/CMakeLists.txt\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/fp16-download\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/fp16-download\")\n  SET(FP16_SOURCE_DIR \"${CONFU_DEPENDENCIES_SOURCE_DIR}/fp16\" CACHE STRING \"FP16 source directory\")\nENDIF()\n\nIF(NOT DEFINED FXDIV_SOURCE_DIR)\n  MESSAGE(STATUS \"Downloading FXdiv to ${CONFU_DEPENDENCIES_SOURCE_DIR}/fxdiv (define FXDIV_SOURCE_DIR to avoid it)\")\n  CONFIGURE_FILE(cmake/DownloadFXdiv.cmake \"${CONFU_DEPENDENCIES_BINARY_DIR}/fxdiv-download/CMakeLists.txt\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/fxdiv-download\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/fxdiv-download\")\n  SET(FXDIV_SOURCE_DIR \"${CONFU_DEPENDENCIES_SOURCE_DIR}/fxdiv\" CACHE STRING \"FXdiv source directory\")\nENDIF()\n\nIF(NOT DEFINED PSIMD_SOURCE_DIR)\n  MESSAGE(STATUS \"Downloading PSimd to ${CONFU_DEPENDENCIES_SOURCE_DIR}/psimd (define PSIMD_SOURCE_DIR to avoid it)\")\n  CONFIGURE_FILE(cmake/DownloadPSimd.cmake \"${CONFU_DEPENDENCIES_BINARY_DIR}/psimd-download/CMakeLists.txt\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/psimd-download\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/psimd-download\")\n  SET(PSIMD_SOURCE_DIR \"${CONFU_DEPENDENCIES_SOURCE_DIR}/psimd\" CACHE STRING \"PSimd source directory\")\nENDIF()\n\nIF(NOT DEFINED PTHREADPOOL_SOURCE_DIR)\n  MESSAGE(STATUS \"Downloading pthreadpool to ${CONFU_DEPENDENCIES_SOURCE_DIR}/pthreadpool (define PTHREADPOOL_SOURCE_DIR to avoid it)\")\n  CONFIGURE_FILE(cmake/DownloadPThreadPool.cmake \"${CONFU_DEPENDENCIES_BINARY_DIR}/pthreadpool-download/CMakeLists.txt\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/pthreadpool-download\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/pthreadpool-download\")\n  SET(PTHREADPOOL_SOURCE_DIR \"${CONFU_DEPENDENCIES_SOURCE_DIR}/pthreadpool\" CACHE STRING \"pthreadpool source directory\")\nENDIF()\n\nIF(QNNPACK_BUILD_TESTS AND NOT DEFINED GOOGLETEST_SOURCE_DIR)\n  MESSAGE(STATUS \"Downloading Google Test to ${CONFU_DEPENDENCIES_SOURCE_DIR}/googletest (define GOOGLETEST_SOURCE_DIR to avoid it)\")\n  CONFIGURE_FILE(cmake/DownloadGoogleTest.cmake \"${CONFU_DEPENDENCIES_BINARY_DIR}/googletest-download/CMakeLists.txt\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/googletest-download\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/googletest-download\")\n  SET(GOOGLETEST_SOURCE_DIR \"${CONFU_DEPENDENCIES_SOURCE_DIR}/googletest\" CACHE STRING \"Google Test source directory\")\nENDIF()\n\nIF(QNNPACK_BUILD_BENCHMARKS AND NOT DEFINED GOOGLEBENCHMARK_SOURCE_DIR)\n  MESSAGE(STATUS \"Downloading Google Benchmark to ${CONFU_DEPENDENCIES_SOURCE_DIR}/googlebenchmark (define GOOGLEBENCHMARK_SOURCE_DIR to avoid it)\")\n  CONFIGURE_FILE(cmake/DownloadGoogleBenchmark.cmake \"${CONFU_DEPENDENCIES_BINARY_DIR}/googlebenchmark-download/CMakeLists.txt\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/googlebenchmark-download\")\n  EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n    WORKING_DIRECTORY \"${CONFU_DEPENDENCIES_BINARY_DIR}/googlebenchmark-download\")\n  SET(GOOGLEBENCHMARK_SOURCE_DIR \"${CONFU_DEPENDENCIES_SOURCE_DIR}/googlebenchmark\" CACHE STRING \"Google Benchmark source directory\")\nENDIF()\n\n# ---[ QNNPACK library\nSET(QNNPACK_INIT_SRCS\n  src/init.c\n  src/add.c\n  src/average-pooling.c\n  src/channel-shuffle.c\n  src/clamp.c\n  src/convolution.c\n  src/deconvolution.c\n  src/fully-connected.c\n  src/global-average-pooling.c\n  src/leaky-relu.c\n  src/max-pooling.c\n  src/sigmoid.c\n  src/softargmax.c\n  src/operator-delete.c)\n\nSET(QNNPACK_EXEC_SRCS\n  src/indirection.c\n  src/operator-run.c)\n\nSET(QNNPACK_SCALAR_UKERNELS\n  src/u8lut32norm/scalar.c\n  src/x8lut/scalar.c)\n\nSET(QNNPACK_PSIMD_UKERNELS\n  src/sgemm/6x8-psimd.c)\n\nSET(QNNPACK_ARM_NEON_UKERNELS\n  src/q8avgpool/mp8x9p8q-neon.c\n  src/q8avgpool/up8x9-neon.c\n  src/q8avgpool/up8xm-neon.c\n  src/q8conv/4x8-neon.c\n  src/q8conv/8x8-neon.c\n  src/q8dwconv/mp8x25-neon.c\n  src/q8dwconv/up8x9-neon.c\n  src/q8gavgpool/mp8x7p7q-neon.c\n  src/q8gavgpool/up8x7-neon.c\n  src/q8gavgpool/up8xm-neon.c\n  src/q8gemm/4x-sumrows-neon.c\n  src/q8gemm/4x8-neon.c\n  src/q8gemm/4x8c2-xzp-neon.c\n  src/q8gemm/6x4-neon.c\n  src/q8gemm/8x8-neon.c\n  src/q8vadd/neon.c\n  src/sgemm/5x8-neon.c\n  src/sgemm/6x8-neon.c\n  src/u8clamp/neon.c\n  src/u8maxpool/16x9p8q-neon.c\n  src/u8maxpool/sub16-neon.c\n  src/u8rmax/neon.c\n  src/x8zip/x2-neon.c\n  src/x8zip/x3-neon.c\n  src/x8zip/x4-neon.c\n  src/x8zip/xm-neon.c)\n\nSET(QNNPACK_AARCH32_ASM_UKERNELS\n  src/hgemm/8x8-aarch32-neonfp16arith.S\n  src/q8conv/4x8-aarch32-neon.S\n  src/q8dwconv/up8x9-aarch32-neon.S\n  src/q8gemm/4x8-aarch32-neon.S\n  src/q8gemm/4x8c2-xzp-aarch32-neon.S)\n\nSET(QNNPACK_AARCH64_ASM_UKERNELS\n  src/q8conv/8x8-aarch64-neon.S\n  src/q8gemm/8x8-aarch64-neon.S)\n\nSET(QNNPACK_X86_SSE2_UKERNELS\n  src/q8avgpool/mp8x9p8q-sse2.c\n  src/q8avgpool/up8x9-sse2.c\n  src/q8avgpool/up8xm-sse2.c\n  src/q8conv/4x4c2-sse2.c\n  src/q8dwconv/mp8x25-sse2.c\n  src/q8dwconv/up8x9-sse2.c\n  src/q8gavgpool/mp8x7p7q-sse2.c\n  src/q8gavgpool/up8x7-sse2.c\n  src/q8gavgpool/up8xm-sse2.c\n  src/q8gemm/2x4c8-sse2.c\n  src/q8gemm/4x4c2-sse2.c\n  src/q8vadd/sse2.c\n  src/u8clamp/sse2.c\n  src/u8maxpool/16x9p8q-sse2.c\n  src/u8maxpool/sub16-sse2.c\n  src/u8rmax/sse2.c\n  src/x8zip/x2-sse2.c\n  src/x8zip/x3-sse2.c\n  src/x8zip/x4-sse2.c\n  src/x8zip/xm-sse2.c)\n\nSET(QNNPACK_UKERNELS ${QNNPACK_SCALAR_UKERNELS} ${QNNPACK_PSIMD_UKERNELS})\nIF(CMAKE_SYSTEM_PROCESSOR MATCHES \"^armv[5-8]\" OR IOS_ARCH MATCHES \"^armv7\")\n  LIST(APPEND QNNPACK_UKERNELS ${QNNPACK_ARM_NEON_UKERNELS})\n  LIST(APPEND QNNPACK_UKERNELS ${QNNPACK_AARCH32_ASM_UKERNELS})\nENDIF()\nIF(CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\" OR IOS_ARCH MATCHES \"^arm64.*\")\n  LIST(APPEND QNNPACK_UKERNELS ${QNNPACK_ARM_NEON_UKERNELS})\n  LIST(APPEND QNNPACK_UKERNELS ${QNNPACK_AARCH64_ASM_UKERNELS})\nENDIF()\nIF(CMAKE_SYSTEM_PROCESSOR MATCHES \"^(i[3-6]86|x86_64)$\" OR IOS_ARCH MATCHES \"^(i386|x86_64)$\")\n  LIST(APPEND QNNPACK_UKERNELS ${QNNPACK_X86_SSE2_UKERNELS})\nENDIF()\n\nIF(QNNPACK_LIBRARY_TYPE STREQUAL \"default\")\n  ADD_LIBRARY(qnnpack ${QNNPACK_INIT_SRCS} ${QNNPACK_EXEC_SRCS} ${QNNPACK_UKERNELS})\nELSEIF(QNNPACK_LIBRARY_TYPE STREQUAL \"shared\")\n  ADD_LIBRARY(qnnpack SHARED ${QNNPACK_INIT_SRCS} ${QNNPACK_EXEC_SRCS} ${QNNPACK_UKERNELS})\nELSEIF(QNNPACK_LIBRARY_TYPE STREQUAL \"static\")\n  ADD_LIBRARY(qnnpack STATIC ${QNNPACK_INIT_SRCS} ${QNNPACK_EXEC_SRCS} ${QNNPACK_UKERNELS})\nELSE()\n  MESSAGE(FATAL_ERROR \"Unsupported QNNPACK library type \\\"${QNNPACK_LIBRARY_TYPE}\\\". Must be \\\"static\\\", \\\"shared\\\", or \\\"default\\\"\")\nENDIF()\nSET_TARGET_PROPERTIES(qnnpack PROPERTIES\n  C_STANDARD 99\n  C_EXTENSIONS YES)\nIF(CMAKE_SYSTEM_PROCESSOR MATCHES \"^armv[5-8]\" OR IOS_ARCH MATCHES \"^armv7\")\n  SET_PROPERTY(SOURCE ${QNNPACK_ARM_NEON_UKERNELS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -O2 -marm -mfpu=neon \")\n  IF(IOS)\n    SET_PROPERTY(SOURCE ${QNNPACK_AARCH32_ASM_UKERNELS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -arch ${IOS_ARCH} \")\n  ENDIF()\nENDIF()\nIF(CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\" OR IOS_ARCH MATCHES \"^arm64.*\")\n  SET_PROPERTY(SOURCE ${QNNPACK_ARM_NEON_UKERNELS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -O2 \")\n  IF(IOS)\n    SET_PROPERTY(SOURCE ${QNNPACK_AARCH64_ASM_UKERNELS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -arch ${IOS_ARCH} \")\n  ENDIF()\nENDIF()\nIF(CMAKE_SYSTEM_PROCESSOR MATCHES \"^(i[3-6]86|x86_64)$\" OR IOS_ARCH MATCHES \"^(i386|x86_64)$\")\n  SET_PROPERTY(SOURCE ${QNNPACK_X86_SSE2_UKERNELS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -O2 -msse2 \")\nENDIF()\nIF(CMAKE_SYSTEM_PROCESSOR MATCHES \"^armv[5-8]\" OR IOS_ARCH MATCHES \"^armv7\")\n  SET_PROPERTY(SOURCE ${QNNPACK_PSIMD_UKERNELS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -O2 -marm -mfpu=neon \")\n  SET_PROPERTY(SOURCE ${QNNPACK_SCALAR_UKERNELS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -O2 -marm \")\nELSE()\n  SET_PROPERTY(SOURCE ${QNNPACK_PSIMD_UKERNELS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -O2 \")\n  SET_PROPERTY(SOURCE ${QNNPACK_SCALAR_UKERNELS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -O2 \")\nENDIF()\nSET_PROPERTY(SOURCE ${QNNPACK_INIT_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -Os \")\nIF(NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  SET_PROPERTY(SOURCE ${QNNPACK_OPERATOR_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -O2 \")\nENDIF()\nTARGET_INCLUDE_DIRECTORIES(qnnpack PUBLIC include)\nTARGET_INCLUDE_DIRECTORIES(qnnpack PRIVATE src)\nSET_TARGET_PROPERTIES(qnnpack PROPERTIES PUBLIC_HEADER include/qnnpack.h)\n\n# ---[ Configure clog\nIF(NOT TARGET clog)\n  SET(CLOG_BUILD_TESTS OFF CACHE BOOL \"\")\n  SET(CLOG_RUNTIME_TYPE \"${CPUINFO_RUNTIME_TYPE}\" CACHE STRING \"\")\n  ADD_SUBDIRECTORY(\n    \"${CLOG_SOURCE_DIR}\"\n    \"${CONFU_DEPENDENCIES_BINARY_DIR}/clog\")\n  # We build static version of clog but a dynamic library may indirectly depend on it\n  SET_PROPERTY(TARGET clog PROPERTY POSITION_INDEPENDENT_CODE ON)\nENDIF()\nTARGET_LINK_LIBRARIES(qnnpack PRIVATE clog)\n\n# ---[ Configure cpuinfo\nIF(NOT TARGET cpuinfo)\n  SET(CPUINFO_BUILD_TOOLS OFF CACHE BOOL \"\")\n  SET(CPUINFO_BUILD_UNIT_TESTS OFF CACHE BOOL \"\")\n  SET(CPUINFO_BUILD_MOCK_TESTS OFF CACHE BOOL \"\")\n  SET(CPUINFO_BUILD_BENCHMARKS OFF CACHE BOOL \"\")\n  ADD_SUBDIRECTORY(\n    \"${CPUINFO_SOURCE_DIR}\"\n    \"${CONFU_DEPENDENCIES_BINARY_DIR}/cpuinfo\")\nENDIF()\nTARGET_LINK_LIBRARIES(qnnpack PRIVATE cpuinfo)\n\n# ---[ Configure pthreadpool\nIF(NOT TARGET pthreadpool)\n  SET(PTHREADPOOL_BUILD_TESTS OFF CACHE BOOL \"\")\n  SET(PTHREADPOOL_BUILD_BENCHMARKS OFF CACHE BOOL \"\")\n  ADD_SUBDIRECTORY(\n    \"${PTHREADPOOL_SOURCE_DIR}\"\n    \"${CONFU_DEPENDENCIES_BINARY_DIR}/pthreadpool\")\nENDIF()\nIF(QNNPACK_CUSTOM_THREADPOOL)\n  # Depend on pthreadpool interface, but not on implementation.\n  # This is used when QNNPACK user (e.g. Caffe2) provides its own threadpool implementation.\n  TARGET_LINK_LIBRARIES(qnnpack PUBLIC pthreadpool_interface)\nELSE()\n  TARGET_LINK_LIBRARIES(qnnpack PUBLIC pthreadpool)\nENDIF()\n\n# ---[ Configure FXdiv\nIF(NOT TARGET fxdiv)\n  SET(FXDIV_BUILD_TESTS OFF CACHE BOOL \"\")\n  SET(FXDIV_BUILD_BENCHMARKS OFF CACHE BOOL \"\")\n  ADD_SUBDIRECTORY(\n    \"${FXDIV_SOURCE_DIR}\"\n    \"${CONFU_DEPENDENCIES_BINARY_DIR}/fxdiv\")\nENDIF()\nTARGET_LINK_LIBRARIES(qnnpack PRIVATE fxdiv)\n\n# ---[ Configure psimd\nIF(NOT TARGET psimd)\n  ADD_SUBDIRECTORY(\n    \"${PSIMD_SOURCE_DIR}\"\n    \"${CONFU_DEPENDENCIES_BINARY_DIR}/psimd\")\nENDIF()\nTARGET_LINK_LIBRARIES(qnnpack PRIVATE psimd)\n\n# ---[ Configure FP16\nIF(NOT TARGET fp16)\n  SET(FP16_BUILD_TESTS OFF CACHE BOOL \"\")\n  SET(FP16_BUILD_BENCHMARKS OFF CACHE BOOL \"\")\n  ADD_SUBDIRECTORY(\n    \"${FP16_SOURCE_DIR}\"\n    \"${CONFU_DEPENDENCIES_BINARY_DIR}/fp16\")\nENDIF()\nTARGET_LINK_LIBRARIES(qnnpack PRIVATE fp16)\n\nINSTALL(TARGETS qnnpack\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\n# ---[ QNNPACK unit tests\nIF(QNNPACK_BUILD_TESTS)\n  # ---[ Build google test\n  IF(NOT TARGET gtest)\n    SET(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    ADD_SUBDIRECTORY(\n      \"${GOOGLETEST_SOURCE_DIR}\"\n      \"${CONFU_DEPENDENCIES_BINARY_DIR}/googletest\")\n  ENDIF()\n\n  # ---[ Build unit tests for high-level functionality\n  ADD_EXECUTABLE(convolution-test test/convolution.cc)\n  SET_TARGET_PROPERTIES(convolution-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(convolution-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(convolution-test PRIVATE qnnpack cpuinfo gtest gtest_main)\n  ADD_TEST(convolution-test convolution-test)\n\n  ADD_EXECUTABLE(deconvolution-test test/deconvolution.cc)\n  SET_TARGET_PROPERTIES(deconvolution-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(deconvolution-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(deconvolution-test PRIVATE qnnpack cpuinfo gtest gtest_main)\n  ADD_TEST(deconvolution-test deconvolution-test)\n\n  ADD_EXECUTABLE(fully-connected-test test/fully-connected.cc)\n  SET_TARGET_PROPERTIES(fully-connected-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(fully-connected-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(fully-connected-test PRIVATE qnnpack cpuinfo gtest gtest_main)\n  ADD_TEST(fully-connected-test fully-connected-test)\n\n  ADD_EXECUTABLE(channel-shuffle-test test/channel-shuffle.cc)\n  SET_TARGET_PROPERTIES(channel-shuffle-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(channel-shuffle-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(channel-shuffle-test PRIVATE qnnpack cpuinfo gtest gtest_main)\n  ADD_TEST(channel-shuffle-test channel-shuffle-test)\n\n  ADD_EXECUTABLE(add-test test/add.cc)\n  SET_TARGET_PROPERTIES(add-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(add-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(add-test PRIVATE qnnpack cpuinfo gtest gtest_main)\n  ADD_TEST(add-test add-test)\n\n  ADD_EXECUTABLE(leaky-relu-test test/leaky-relu.cc)\n  SET_TARGET_PROPERTIES(leaky-relu-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(leaky-relu-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(leaky-relu-test PRIVATE qnnpack cpuinfo gtest gtest_main)\n  ADD_TEST(leaky-relu-test leaky-relu-test)\n\n  ADD_EXECUTABLE(sigmoid-test test/sigmoid.cc)\n  SET_TARGET_PROPERTIES(sigmoid-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(sigmoid-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(sigmoid-test PRIVATE qnnpack cpuinfo gtest gtest_main)\n  ADD_TEST(sigmoid-test sigmoid-test)\n\n  ADD_EXECUTABLE(clamp-test test/clamp.cc)\n  SET_TARGET_PROPERTIES(clamp-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(clamp-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(clamp-test PRIVATE qnnpack cpuinfo gtest gtest_main)\n  ADD_TEST(clamp-test clamp-test)\n\n  ADD_EXECUTABLE(softargmax-test test/softargmax.cc)\n  SET_TARGET_PROPERTIES(softargmax-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(softargmax-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(softargmax-test PRIVATE qnnpack cpuinfo gtest gtest_main)\n  ADD_TEST(softargmax-test softargmax-test)\n\n  ADD_EXECUTABLE(max-pooling-test test/max-pooling.cc)\n  SET_TARGET_PROPERTIES(max-pooling-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(max-pooling-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(max-pooling-test PRIVATE qnnpack cpuinfo gtest gtest_main)\n  ADD_TEST(max-pooling-test max-pooling-test)\n\n  ADD_EXECUTABLE(average-pooling-test test/average-pooling.cc)\n  SET_TARGET_PROPERTIES(average-pooling-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(average-pooling-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(average-pooling-test PRIVATE qnnpack cpuinfo gtest gtest_main)\n  ADD_TEST(average-pooling-test average-pooling-test)\n\n  ADD_EXECUTABLE(global-average-pooling-test test/global-average-pooling.cc)\n  SET_TARGET_PROPERTIES(global-average-pooling-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(global-average-pooling-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(global-average-pooling-test PRIVATE qnnpack cpuinfo gtest gtest_main)\n  ADD_TEST(global-average-pooling-test global-average-pooling-test)\n\n  # ---[ Build unit tests for micro-kernels\n  ADD_EXECUTABLE(q8gemm-test test/q8gemm.cc)\n  SET_TARGET_PROPERTIES(q8gemm-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(q8gemm-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(q8gemm-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(q8gemm-test q8gemm-test)\n\n  ADD_EXECUTABLE(q8conv-test test/q8conv.cc)\n  SET_TARGET_PROPERTIES(q8conv-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(q8conv-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(q8conv-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(q8conv-test q8conv-test)\n\n  ADD_EXECUTABLE(q8dwconv-test test/q8dwconv.cc)\n  SET_TARGET_PROPERTIES(q8dwconv-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(q8dwconv-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(q8dwconv-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(q8dwconv-test q8dwconv-test)\n\n  ADD_EXECUTABLE(q8vadd-test test/q8vadd.cc)\n  SET_TARGET_PROPERTIES(q8vadd-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(q8vadd-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(q8vadd-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(q8vadd-test q8vadd-test)\n\n  ADD_EXECUTABLE(q8avgpool-test test/q8avgpool.cc)\n  SET_TARGET_PROPERTIES(q8avgpool-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(q8avgpool-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(q8avgpool-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(q8avgpool-test q8avgpool-test)\n\n  ADD_EXECUTABLE(q8gavgpool-test test/q8gavgpool.cc)\n  SET_TARGET_PROPERTIES(q8gavgpool-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(q8gavgpool-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(q8gavgpool-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(q8gavgpool-test q8gavgpool-test)\n\n  ADD_EXECUTABLE(u8maxpool-test test/u8maxpool.cc)\n  SET_TARGET_PROPERTIES(u8maxpool-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(u8maxpool-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(u8maxpool-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(u8maxpool-test u8maxpool-test)\n\n  ADD_EXECUTABLE(u8clamp-test test/u8clamp.cc)\n  SET_TARGET_PROPERTIES(u8clamp-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(u8clamp-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(u8clamp-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(u8clamp-test u8clamp-test)\n\n  ADD_EXECUTABLE(u8rmax-test test/u8rmax.cc)\n  SET_TARGET_PROPERTIES(u8rmax-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(u8rmax-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(u8rmax-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(u8rmax-test u8rmax-test)\n\n  ADD_EXECUTABLE(u8lut32norm-test test/u8lut32norm.cc)\n  SET_TARGET_PROPERTIES(u8lut32norm-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(u8lut32norm-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(u8lut32norm-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(u8lut32norm-test u8lut32norm-test)\n\n  ADD_EXECUTABLE(x8lut-test test/x8lut.cc)\n  SET_TARGET_PROPERTIES(x8lut-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(x8lut-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(x8lut-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(x8lut-test x8lut-test)\n\n  ADD_EXECUTABLE(x8zip-test test/x8zip.cc)\n  SET_TARGET_PROPERTIES(x8zip-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(x8zip-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(x8zip-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(x8zip-test x8zip-test)\n\n  ADD_EXECUTABLE(hgemm-test test/hgemm.cc)\n  SET_TARGET_PROPERTIES(hgemm-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(hgemm-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(hgemm-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(hgemm-test hgemm-test)\n\n  ADD_EXECUTABLE(sgemm-test test/sgemm.cc)\n  SET_TARGET_PROPERTIES(sgemm-test PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(sgemm-test PRIVATE src test)\n  TARGET_LINK_LIBRARIES(sgemm-test PRIVATE qnnpack cpuinfo fp16 gtest gtest_main)\n  ADD_TEST(sgemm-test sgemm-test)\nENDIF()\n\n# ---[ QNNPACK micro-benchmarks\nIF(QNNPACK_BUILD_BENCHMARKS)\n  # ---[ Build google benchmark\n  IF(NOT TARGET benchmark)\n    SET(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL \"\")\n    ADD_SUBDIRECTORY(\n      \"${GOOGLEBENCHMARK_SOURCE_DIR}\"\n      \"${CONFU_DEPENDENCIES_BINARY_DIR}/googlebenchmark\")\n  ENDIF()\n\n  ADD_EXECUTABLE(add-bench bench/add.cc)\n  SET_TARGET_PROPERTIES(add-bench PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_LINK_LIBRARIES(add-bench PRIVATE qnnpack benchmark)\n\n  ADD_EXECUTABLE(average-pooling-bench bench/average-pooling.cc)\n  SET_TARGET_PROPERTIES(average-pooling-bench PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_LINK_LIBRARIES(average-pooling-bench PRIVATE qnnpack benchmark)\n\n  ADD_EXECUTABLE(channel-shuffle-bench bench/channel-shuffle.cc)\n  SET_TARGET_PROPERTIES(channel-shuffle-bench PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_LINK_LIBRARIES(channel-shuffle-bench PRIVATE qnnpack benchmark)\n\n  ADD_EXECUTABLE(convolution-bench bench/convolution.cc)\n  SET_TARGET_PROPERTIES(convolution-bench PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_LINK_LIBRARIES(convolution-bench PRIVATE qnnpack benchmark)\n\n  ADD_EXECUTABLE(global-average-pooling-bench bench/global-average-pooling.cc)\n  SET_TARGET_PROPERTIES(global-average-pooling-bench PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_LINK_LIBRARIES(global-average-pooling-bench PRIVATE qnnpack benchmark)\n\n  ADD_EXECUTABLE(max-pooling-bench bench/max-pooling.cc)\n  SET_TARGET_PROPERTIES(max-pooling-bench PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_LINK_LIBRARIES(max-pooling-bench PRIVATE qnnpack benchmark)\n\n  ADD_EXECUTABLE(sigmoid-bench bench/sigmoid.cc)\n  SET_TARGET_PROPERTIES(sigmoid-bench PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_LINK_LIBRARIES(sigmoid-bench PRIVATE qnnpack benchmark)\n\n  ADD_EXECUTABLE(softargmax-bench bench/softargmax.cc)\n  SET_TARGET_PROPERTIES(softargmax-bench PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_LINK_LIBRARIES(softargmax-bench PRIVATE qnnpack benchmark)\n\n  ADD_EXECUTABLE(q8gemm-bench bench/q8gemm.cc)\n  SET_TARGET_PROPERTIES(q8gemm-bench PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(q8gemm-bench PRIVATE src)\n  TARGET_COMPILE_DEFINITIONS(q8gemm-bench PRIVATE QNNPACK_BENCHMARK_GEMMLOWP=0)\n  TARGET_LINK_LIBRARIES(q8gemm-bench PRIVATE qnnpack cpuinfo fp16 benchmark)\n\n  ADD_EXECUTABLE(hgemm-bench bench/hgemm.cc)\n  SET_TARGET_PROPERTIES(hgemm-bench PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(hgemm-bench PRIVATE src)\n  TARGET_LINK_LIBRARIES(hgemm-bench PRIVATE qnnpack cpuinfo fp16 benchmark)\n\n  ADD_EXECUTABLE(sgemm-bench bench/sgemm.cc)\n  SET_TARGET_PROPERTIES(sgemm-bench PROPERTIES\n    CXX_STANDARD 11\n    CXX_STANDARD_REQUIRED YES\n    CXX_EXTENSIONS NO)\n  TARGET_INCLUDE_DIRECTORIES(sgemm-bench PRIVATE src)\n  TARGET_LINK_LIBRARIES(sgemm-bench PRIVATE qnnpack cpuinfo benchmark)\nENDIF()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.23828125,
          "content": "# Code of Conduct\n\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to.\nPlease read the [full text](https://code.fb.com/codeofconduct/)\nso that you can understand what actions will and will not be tolerated.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.3349609375,
          "content": "# Contributing to QNNPACK\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Code of Conduct\nThe code of conduct is described in [`CODE_OF_CONDUCT.md`](CODE_OF_CONDUCT.md).\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests.\n3. If you've added new micro-kernels, update or add micro-benchmarks.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## License\nBy contributing to QNNPACK, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.498046875,
          "content": "BSD License\n\nFor QNNPACK software\n\nCopyright (c) Facebook, Inc. and its affiliates. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name Facebook nor the names of its contributors may be used to\n   endorse or promote products derived from this software without specific\n   prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.904296875,
          "content": "# QNNPACK\nQNNPACK (Quantized Neural Networks PACKage) is a mobile-optimized library for low-precision high-performance neural network inference. QNNPACK provides implementation of common neural network operators on quantized 8-bit tensors.\n\nQNNPACK is not intended to be directly used by machine learning researchers; instead it provides low-level performance primitives for high-level deep learning frameworks. As of today, QNNPACK is integrated in [PyTorch 1.0](https://github.com/pytorch/pytorch) with Caffe2 graph representation.\n\n## Operator Coverage\n\nCurrently implemented and planned for implementation operators are below:\n\n- [x] 2D Convolution\n- [x] 2D Deconvolution\n- [x] Channel Shuffle\n- [x] Fully Connected\n- [ ] Locally Connected\n- [x] 2D Max Pooling\n- [x] 2D Average Pooling\n- [x] Global Average Pooling\n- [x] Sigmoid\n- [x] Leaky ReLU\n- [x] Clamp (can be used for ReLU, ReLU6 if it is not fused in another operator)\n- [x] SoftArgMax (aka SoftMax)\n- [ ] Group Normalization\n\n## Building\n\nQNNPACK provides standard CMake-based build scripts.\n\n### Native compilation\n\nUsers are recommended to use `scripts/build-local.sh` script to build QNNPACK for the host machine.\n\n### Cross-compilation for Android\n\nTo cross-compile for Android, set `$ANDROID_NDK` environment variable (where `$ANDROID_NDK` is the path to Android NDK directory, e.g. `/opt/android-ndk-r15c`) and use one of the scripts from the table below:\n\n| ABI         | Build script                     | Restrictions               |\n| ----------- | ---------------------------------| -------------------------- |\n| armeabi-v7a | `scripts/build-android-armv7.sh` | Requires CPU with ARM NEON |\n| arm64-v8a   | `scripts/build-android-arm64.sh` |                            |\n| x86         | `scripts/build-android-x86.sh`   |                            |\n\nNotes:\n- On **armeabi-v7a** `qnnp_initialize` will fail with `qnnp_status_unsupported_hardware` if the mobile CPU does not support ARM NEON. Don't set `-DANDROID_ARM_NEON=1` for QNNPACK compilation as it can make `qnnp_initialize` crash on CPUs without ARM NEON.\n\n### Cross-compilation for iOS\n\nTo cross-compile for iOS, clone [ios-cmake](https://github.com/leetal/ios-cmake), and set `$IOS_CMAKE_TOOLCHAIN_FILE` environment variable (where `$IOS_CMAKE_TOOLCHAIN_FILE` is the path to `ios.toolchain.cmake` file in [ios-cmake](https://github.com/leetal/ios-cmake)), and use one of the scripts from the table below:\n\n| Architecture | Build script                  | Notes                     |\n| ------------ | ----------------------------- | ------------------------- |\n| armv7        | `scripts/build-ios-armv7.sh`  | iPhone 3GS/4/4S           |\n| armv7        | `scripts/build-ios-armv7s.sh` | iPhone 5 and newer        |\n| arm64        | `scripts/build-ios-arm64.sh`  | iPhone 5S and newer       |\n| arm64e       | `scripts/build-ios-arm64e.sh` | iPhone XS/XR              |\n| i386         | `scripts/build-ios-i386.sh`   | iPhone Simulator (32-bit) |\n| x86_64       | `scripts/build-ios-x86_64.sh` | iPhone Simulator (64-bit) |\n\n## End-to-End Benchmarking\n\nCaffe2 backend of PyTorch 1.0 natively integrates QNNPACK, and provides a [pre-trained quantized MobileNet v2 model](https://github.com/caffe2/models/tree/master/mobilenet_v2_quantized). Below are instructions for benchmarking this model end-to-end with QNNPACK.\n\n### Raspberry Pi 2 or 3\n\n```bash\n# Clone PyTorch 1.0 repo\ngit clone --recursive https://github.com/pytorch/pytorch.git\ncd pytorch\n\n# Optional: update QNNPACK submodule to latest revision\ngit submodule update --remote third_party/QNNPACK\n\n# Build Caffe2 (including binaries) for the host system\n# Use only 1 thread for build to avoid out-of-memory failures\nMAX_JOBS=1 scripts/build_local.sh -DBUILD_BINARY=ON -DBUILD_PYTHON=OFF \\\n\t-DUSE_OBSERVERS=OFF -DUSE_DISTRIBUTED=OFF\n\n# Download model weights\nwget https://s3.amazonaws.com/download.caffe2.ai/models/mobilenet_v2_1.0_224_quant/init_net.pb\n\n# Download model graph\nwget https://s3.amazonaws.com/download.caffe2.ai/models/mobilenet_v2_1.0_224_quant/predict_net.pb\n\n# Run speed benchmark with 50 warm-up iterations and 10 measurement iterations\nbuild/bin/speed_benchmark --net predict_net.pb --init_net init_net.pb \\\n\t--input data --input_dims 1,3,224,224 --input_type float \\\n\t--warmup 50 --iter 10\n```\n\n### ARMv7 (32-bit) Android\n\n```bash\n# Clone PyTorch 1.0 repo\ngit clone --recursive https://github.com/pytorch/pytorch.git\ncd pytorch\n\n# Optional: update QNNPACK submodule to latest revision\ngit submodule update --remote third_party/QNNPACK\n\n# Build Caffe2 (including binaries) for Android, and push to device\nscripts/build_android.sh -DANDROID_TOOLCHAIN=clang -DBUILD_BINARY=ON\nadb push build_android/bin/speed_benchmark /data/local/tmp/speed_benchmark\n\n# Download model weights and copy them to Android device\nwget https://s3.amazonaws.com/download.caffe2.ai/models/mobilenet_v2_1.0_224_quant/init_net.pb\nadb push init_net.pb /data/local/tmp/init_net.pb\n\n# Download model graph and copy it to Android device\nwget https://s3.amazonaws.com/download.caffe2.ai/models/mobilenet_v2_1.0_224_quant/predict_net.pb\nadb push predict_net.pb /data/local/tmp/predict_net.pb\n\n# Run speed benchmark with 50 warm-up iterations and 10 measurement iterations\nadb shell /data/local/tmp/speed_benchmark \\\n\t--net /data/local/tmp/predict_net.pb \\\n\t--init_net /data/local/tmp/init_net.pb \\\n\t--input data --input_dims 1,3,224,224 --input_type float \\\n\t--warmup 50 --iter 10\n```\n\n### ARM64 (64-bit) Android\n\n```bash\n# Clone PyTorch 1.0 repo\ngit clone --recursive https://github.com/pytorch/pytorch.git\ncd pytorch\n\n# Optional: update QNNPACK submodule to latest revision\ngit submodule update --remote third_party/QNNPACK\n\n# Build Caffe2 (including binaries) for Android, and push to device\nscripts/build_android.sh -DANDROID_ABI=arm64-v8a -DANDROID_TOOLCHAIN=clang -DBUILD_BINARY=ON\nadb push build_android/bin/speed_benchmark /data/local/tmp/speed_benchmark\n\n# Download model weights and copy them to Android device\nwget https://s3.amazonaws.com/download.caffe2.ai/models/mobilenet_v2_1.0_224_quant/init_net.pb\nadb push init_net.pb /data/local/tmp/init_net.pb\n\n# Download model graph and copy it to Android device\nwget https://s3.amazonaws.com/download.caffe2.ai/models/mobilenet_v2_1.0_224_quant/predict_net.pb\nadb push predict_net.pb /data/local/tmp/predict_net.pb\n\n# Run speed benchmark with 50 warm-up iterations and 10 measurement iterations\nadb shell /data/local/tmp/speed_benchmark \\\n\t--net /data/local/tmp/predict_net.pb \\\n\t--init_net /data/local/tmp/init_net.pb \\\n\t--input data --input_dims 1,3,224,224 --input_type float \\\n\t--warmup 50 --iter 10\n```\n\n### PEP (Performance Evaluation Platform) Method\n\n[Facebook AI Performance Evaluation Platform](https://github.com/facebook/FAI-PEP) is a framework and backend agnostic benchmarking platform to compare machine learning inferencing runtime metrics on a set of models and a variety of backends.\n\nWe use PEP to produce the results we have in our [blog](https://code.fb.com/ml-applications/qnnpack/)\n\nWith an ARMv7 device connected:\n\n```bash\n# Clone PyTorch 1.0 repo\nmkdir ~/Code && cd ~/Code\ngit clone --recursive https://github.com/pytorch/pytorch.git\ncd pytorch\n\n# Optional: update QNNPACK submodule to latest revision\ngit submodule update --remote third_party/QNNPACK\n\n# Clone PEP repo\ncd ~/Code\ngit clone --recursive https://github.com/facebook/FAI-PEP.git aibench\ncd aibench\n\n# Run PEP benchmark with cool specifications. Try changing that cmd with more specifications!\n# First time compile could take 20+ minutes\n./benchmarking/run_bench.py \\\n  --platform android \\\n  -b ~/Code/aibench/specifications/models/caffe2/mobilenet_v2/mobilenet_v2_quant.json \\\n  --platform android --repo_dir ~/Code/pytorch \\\n  --frameworks_dir ~/Code/aibench/specifications/frameworks --framework caffe2\n```\n\n## Acknowledgements\n\nQNNPACK is developed by Marat Dukhan, Yiming Wu, Hao Lu, and Bert Maher. We thank Andrew Tulloch and Yangqing Jia for advice during the development of QNNPACK.\n\n## License\n\nQNNPACK is BSD licensed, as found in the [`LICENSE`](LICENSE) file.\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.py",
          "type": "blob",
          "size": 10.7421875,
          "content": "#!/usr/bin/env python\n#\n# Copyright (c) Facebook, Inc. and its affiliates.\n# All rights reserved.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n\nimport confu\nfrom confu import arm, x86\nparser = confu.standard_parser()\n\n\ndef main(args):\n    options = parser.parse_args(args)\n    build = confu.Build.from_options(options)\n\n    build.export_cpath(\"include\", [\"q8gemm.h\"])\n\n    with build.options(source_dir=\"src\",\n            deps=[build.deps.cpuinfo, build.deps.clog, build.deps.psimd, build.deps.fxdiv, build.deps.pthreadpool, build.deps.FP16],\n            extra_include_dirs=\"src\"):\n\n        requantization_objects = [\n            build.cc(\"requantization/precise-scalar.c\"),\n            build.cc(\"requantization/fp32-scalar.c\"),\n            build.cc(\"requantization/q31-scalar.c\"),\n            build.cc(\"requantization/gemmlowp-scalar.c\"),\n        ]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            requantization_objects += [\n                build.cc(\"requantization/precise-psimd.c\"),\n                build.cc(\"requantization/fp32-psimd.c\"),\n            ]\n        if build.target.is_x86 or build.target.is_x86_64:\n            with build.options(isa=x86.sse2):\n                requantization_objects += [\n                    build.cc(\"requantization/precise-sse2.c\"),\n                    build.cc(\"requantization/fp32-sse2.c\"),\n                    build.cc(\"requantization/q31-sse2.c\"),\n                    build.cc(\"requantization/gemmlowp-sse2.c\"),\n                ]\n            with build.options(isa=x86.ssse3):\n                requantization_objects += [\n                    build.cc(\"requantization/precise-ssse3.c\"),\n                    build.cc(\"requantization/q31-ssse3.c\"),\n                    build.cc(\"requantization/gemmlowp-ssse3.c\"),\n                ]\n            with build.options(isa=x86.sse4_1):\n                requantization_objects += [\n                    build.cc(\"requantization/precise-sse4.c\"),\n                    build.cc(\"requantization/q31-sse4.c\"),\n                    build.cc(\"requantization/gemmlowp-sse4.c\"),\n                ]\n        if build.target.is_arm or build.target.is_arm64:\n            with build.options(isa=arm.neon if build.target.is_arm else None):\n                requantization_objects += [\n                    build.cc(\"requantization/precise-neon.c\"),\n                    build.cc(\"requantization/fp32-neon.c\"),\n                    build.cc(\"requantization/q31-neon.c\"),\n                    build.cc(\"requantization/gemmlowp-neon.c\"),\n                ]\n\n        qnnpack_objects = [\n            # Common parts\n            build.cc(\"init.c\"),\n            build.cc(\"operator-delete.c\"),\n            build.cc(\"operator-run.c\"),\n            # Operators\n            build.cc(\"add.c\"),\n            build.cc(\"average-pooling.c\"),\n            build.cc(\"channel-shuffle.c\"),\n            build.cc(\"clamp.c\"),\n            build.cc(\"convolution.c\"),\n            build.cc(\"indirection.c\"),\n            build.cc(\"deconvolution.c\"),\n            build.cc(\"fully-connected.c\"),\n            build.cc(\"global-average-pooling.c\"),\n            build.cc(\"leaky-relu.c\"),\n            build.cc(\"max-pooling.c\"),\n            build.cc(\"sigmoid.c\"),\n            build.cc(\"softargmax.c\"),\n            # Scalar micro-kernels\n            build.cc(\"u8lut32norm/scalar.c\"),\n            build.cc(\"x8lut/scalar.c\"),\n        ]\n\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            qnnpack_objects += [\n                build.cc(\"sconv/6x8-psimd.c\"),\n                build.cc(\"sdwconv/up4x9-psimd.c\"),\n                build.cc(\"sgemm/6x8-psimd.c\"),\n            ]\n\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            if build.target.is_arm or build.target.is_arm64:\n                qnnpack_objects += [\n                    build.cc(\"q8avgpool/mp8x9p8q-neon.c\"),\n                    build.cc(\"q8avgpool/up8x9-neon.c\"),\n                    build.cc(\"q8avgpool/up8xm-neon.c\"),\n                    build.cc(\"q8conv/4x8-neon.c\"),\n                    build.cc(\"q8conv/8x8-neon.c\"),\n                    build.cc(\"q8dwconv/mp8x25-neon.c\"),\n                    build.cc(\"q8dwconv/up8x9-neon.c\"),\n                    build.cc(\"q8gavgpool/mp8x7p7q-neon.c\"),\n                    build.cc(\"q8gavgpool/up8x7-neon.c\"),\n                    build.cc(\"q8gavgpool/up8xm-neon.c\"),\n                    build.cc(\"q8gemm/4x-sumrows-neon.c\"),\n                    build.cc(\"q8gemm/4x8-neon.c\"),\n                    build.cc(\"q8gemm/4x8c2-xzp-neon.c\"),\n                    build.cc(\"q8gemm/6x4-neon.c\"),\n                    build.cc(\"q8gemm/8x8-neon.c\"),\n                    build.cc(\"q8vadd/neon.c\"),\n                    build.cc(\"sgemm/5x8-neon.c\"),\n                    build.cc(\"sgemm/6x8-neon.c\"),\n                    build.cc(\"u8clamp/neon.c\"),\n                    build.cc(\"u8maxpool/16x9p8q-neon.c\"),\n                    build.cc(\"u8maxpool/sub16-neon.c\"),\n                    build.cc(\"u8rmax/neon.c\"),\n                    build.cc(\"x8zip/x2-neon.c\"),\n                    build.cc(\"x8zip/x3-neon.c\"),\n                    build.cc(\"x8zip/x4-neon.c\"),\n                    build.cc(\"x8zip/xm-neon.c\"),\n                ]\n            if build.target.is_arm:\n                qnnpack_objects += [\n                    build.cc(\"hgemm/8x8-aarch32-neonfp16arith.S\"),\n                    build.cc(\"q8conv/4x8-aarch32-neon.S\"),\n                    build.cc(\"q8dwconv/up8x9-aarch32-neon.S\"),\n                    build.cc(\"q8gemm/4x8-aarch32-neon.S\"),\n                    build.cc(\"q8gemm/4x8c2-xzp-aarch32-neon.S\"),\n                ]\n            if build.target.is_arm64:\n                qnnpack_objects += [\n                    build.cc(\"q8gemm/8x8-aarch64-neon.S\"),\n                    build.cc(\"q8conv/8x8-aarch64-neon.S\"),\n                ]\n            if build.target.is_x86 or build.target.is_x86_64:\n                with build.options(isa=x86.sse2):\n                    qnnpack_objects += [\n                        build.cc(\"q8avgpool/mp8x9p8q-sse2.c\"),\n                        build.cc(\"q8avgpool/up8x9-sse2.c\"),\n                        build.cc(\"q8avgpool/up8xm-sse2.c\"),\n                        build.cc(\"q8conv/4x4c2-sse2.c\"),\n                        build.cc(\"q8dwconv/mp8x25-sse2.c\"),\n                        build.cc(\"q8dwconv/up8x9-sse2.c\"),\n                        build.cc(\"q8gavgpool/mp8x7p7q-sse2.c\"),\n                        build.cc(\"q8gavgpool/up8x7-sse2.c\"),\n                        build.cc(\"q8gavgpool/up8xm-sse2.c\"),\n                        build.cc(\"q8gemm/2x4c8-sse2.c\"),\n                        build.cc(\"q8gemm/4x4c2-sse2.c\"),\n                        build.cc(\"q8vadd/sse2.c\"),\n                        build.cc(\"u8clamp/sse2.c\"),\n                        build.cc(\"u8maxpool/16x9p8q-sse2.c\"),\n                        build.cc(\"u8maxpool/sub16-sse2.c\"),\n                        build.cc(\"u8rmax/sse2.c\"),\n                        build.cc(\"x8zip/x2-sse2.c\"),\n                        build.cc(\"x8zip/x3-sse2.c\"),\n                        build.cc(\"x8zip/x4-sse2.c\"),\n                        build.cc(\"x8zip/xm-sse2.c\"),\n                    ]\n            build.static_library(\"qnnpack\", qnnpack_objects)\n\n    with build.options(source_dir=\"test\",\n            deps={\n                (build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googletest): any,\n                \"log\": build.target.is_android},\n            extra_include_dirs=[\"src\", \"test\"]):\n\n        build.unittest(\"hgemm-test\", build.cxx(\"hgemm.cc\"))\n        build.unittest(\"q8avgpool-test\", build.cxx(\"q8avgpool.cc\"))\n        build.unittest(\"q8conv-test\", build.cxx(\"q8conv.cc\"))\n        build.unittest(\"q8dwconv-test\", build.cxx(\"q8dwconv.cc\"))\n        build.unittest(\"q8gavgpool-test\", build.cxx(\"q8gavgpool.cc\"))\n        build.unittest(\"q8gemm-test\", build.cxx(\"q8gemm.cc\"))\n        build.unittest(\"q8vadd-test\", build.cxx(\"q8vadd.cc\"))\n        build.unittest(\"sconv-test\", build.cxx(\"sconv.cc\"))\n        build.unittest(\"sgemm-test\", build.cxx(\"sgemm.cc\"))\n        build.unittest(\"u8clamp-test\", build.cxx(\"u8clamp.cc\"))\n        build.unittest(\"u8lut32norm-test\", build.cxx(\"u8lut32norm.cc\"))\n        build.unittest(\"u8maxpool-test\", build.cxx(\"u8maxpool.cc\"))\n        build.unittest(\"u8rmax-test\", build.cxx(\"u8rmax.cc\"))\n        build.unittest(\"x8lut-test\", build.cxx(\"x8lut.cc\"))\n        build.unittest(\"x8zip-test\", build.cxx(\"x8zip.cc\"))\n\n        build.unittest(\"add-test\", build.cxx(\"add.cc\"))\n        build.unittest(\"average-pooling-test\", build.cxx(\"average-pooling.cc\"))\n        build.unittest(\"channel-shuffle-test\", build.cxx(\"channel-shuffle.cc\"))\n        build.unittest(\"clamp-test\", build.cxx(\"clamp.cc\"))\n        build.unittest(\"convolution-test\", build.cxx(\"convolution.cc\"))\n        build.unittest(\"deconvolution-test\", build.cxx(\"deconvolution.cc\"))\n        build.unittest(\"fully-connected-test\", build.cxx(\"fully-connected.cc\"))\n        build.unittest(\"global-average-pooling-test\", build.cxx(\"global-average-pooling.cc\"))\n        build.unittest(\"leaky-relu-test\", build.cxx(\"leaky-relu.cc\"))\n        build.unittest(\"max-pooling-test\", build.cxx(\"max-pooling.cc\"))\n        build.unittest(\"sigmoid-test\", build.cxx(\"sigmoid.cc\"))\n        build.unittest(\"softargmax-test\", build.cxx(\"softargmax.cc\"))\n        build.unittest(\"requantization-test\", [build.cxx(\"requantization.cc\")] + requantization_objects)\n\n    benchmark_isa = None\n    if build.target.is_arm:\n        benchmark_isa = arm.neon\n    elif build.target.is_x86:\n        benchmark_isa = x86.sse4_1\n    with build.options(source_dir=\"bench\",\n            deps={\n                (build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googlebenchmark): any,\n                \"log\": build.target.is_android},\n            isa=benchmark_isa,\n            extra_include_dirs=\"src\"):\n\n        build.benchmark(\"add-bench\", build.cxx(\"add.cc\"))\n        build.benchmark(\"average-pooling-bench\", build.cxx(\"average-pooling.cc\"))\n        build.benchmark(\"channel-shuffle-bench\", build.cxx(\"channel-shuffle.cc\"))\n        build.benchmark(\"convolution-bench\", build.cxx(\"convolution.cc\"))\n        build.benchmark(\"global-average-pooling-bench\", build.cxx(\"global-average-pooling.cc\"))\n        build.benchmark(\"max-pooling-bench\", build.cxx(\"max-pooling.cc\"))\n        build.benchmark(\"sigmoid-bench\", build.cxx(\"sigmoid.cc\"))\n        build.benchmark(\"softargmax-bench\", build.cxx(\"softargmax.cc\"))\n\n        build.benchmark(\"q8gemm-bench\", build.cxx(\"q8gemm.cc\"))\n        build.benchmark(\"hgemm-bench\", build.cxx(\"hgemm.cc\"))\n        build.benchmark(\"sgemm-bench\", build.cxx(\"sgemm.cc\"))\n        build.benchmark(\"requantization-bench\", [build.cxx(\"requantization.cc\")] + requantization_objects)\n\n    return build\n\nif __name__ == \"__main__\":\n    import sys\n    main(sys.argv[1:]).generate()\n"
        },
        {
          "name": "confu.yaml",
          "type": "blob",
          "size": 0.4990234375,
          "content": "name: qnnpack\ntitle: Quantized UINT8 Functions for Mobile\nlicense: Apache 2.0\ndeps:\n  - name: cpuinfo\n    url:  https://github.com/pytorch/cpuinfo.git\n  - name: fxdiv\n    url:  https://github.com/Maratyszcza/FXdiv.git\n  - name: psimd\n    url:  https://github.com/Maratyszcza/psimd.git\n  - name: pthreadpool\n    url:  https://github.com/Maratyszcza/pthreadpool.git\n  - name: FP16\n    url:  https://github.com/Maratyszcza/FP16.git\n  - name: clog\n    dir:  deps/clog\n  - name: googletest\n  - name: googlebenchmark\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "jni",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}