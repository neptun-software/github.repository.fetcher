{
  "metadata": {
    "timestamp": 1736710008447,
    "page": 601,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cashapp/zipline",
      "stars": 2105,
      "defaultBranch": "trunk",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1806640625,
          "content": "root = true\n\n[*]\nindent_size = 2\nij_continuation_indent_size = 2\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{kt, kts}]\nij_kotlin_imports_layout = *\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.0712890625,
          "content": "# Run './gradlew spotlessApply'\n782fd524b15c8de7952ed6dc944d83484d075082\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4462890625,
          "content": "# IntelliJ IDEA\n.idea\n!/.idea/copyright\n*.iml\n\n# Gradle\n.gradle\nbuild/\nlocal.properties\nreports\njacoco.exec\n.externalNativeBuild\n.cxx\n.kotlin\n\n# iOS\n*.pbxuser\n# Ignore generated Xcode projects\n*.xcworkspace\nxcuserdata\nPods\n\n# Release\ndocs/0.x\n\n# Testing\nzipline-gradle-plugin/src/test/projects/**/gradle/wrapper\n\n# Yarn\nsamples/**/yarn.lock\nzipline-gradle-plugin/src/test/projects/**/yarn.lock\n\ngenerated-zipline-webpack-config.js\n\n# Zig\n.zig-cache\nzig-out\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 24.52734375,
          "content": "# Change Log\n\n## Unreleased\n\nNothing yet!\n\n\n## [1.19.0] - 2024-12-03\n[1.19.0]: https://github.com/cashapp/zipline/releases/tag/1.19.0\n\n * Upgrade: [Kotlin 2.1.20](https://github.com/JetBrains/kotlin/releases/tag/v2.1.0)\n\n\n## [1.18.0] - 2024-11-14\n[1.18.0]: https://github.com/cashapp/zipline/releases/tag/1.18.0\n\n * Fix: Prevent clients from caching the dev server's responses.\n * New: \"compile\" subcommand in 'zipline-cli' compiles `.js` files to `.zipline` files.\n * Upgrade: [Kotlin Serialization 1.7.3][kotlin_serialization_1_7_3].\n * Upgrade: [kotlinx.coroutines 1.9.0][kotlinx_coroutines_1_9_0].\n * Upgrade: [Okio 3.9.1][okio_3_9_1].\n\n\n## [1.17.0] - 2024-08-28\n[1.17.0]: https://github.com/cashapp/zipline/releases/tag/1.17.0\n\n * New: Expose `globalThis.gc()` function into the guest code.\n * Upgrade: [Kotlin 2.0.20](https://github.com/JetBrains/kotlin/releases/tag/v2.0.20)\n\n\n## [1.16.0] - 2024-07-17\n\n * Fix: Support 16KB page sizes in our Android native library. This is necessary to prevent an\n   `UnsatisfiedLinkError` crash on Android 15 / API level 35.\n\n\n## [1.15.0] - 2024-07-16\n\n * New: Use different dispatchers for cache vs code execution. Both the cache and QuickJS need to be\n   thread-confined, but they don't need to be confined to the same thread. With this release we've\n   added a new `CoroutineDispatcher` parameter to `ZiplineLoader.withCache()`. It is used when\n   reading and writing the cache. The existing `CoroutineDispatcher` used to create the\n   `ZiplineLoader` is used to access QuickJS.\n * New: `EventListener.cacheHit()` is called on each cache hit.\n\n\n## [1.14.0] - 2024-07-09\n\n * New: `ZiplineLoader.load()` and `loadOnce()` now accept a suspending function.\n * New: Don't crash in `ZiplineLoader` when writing to the disk cache fails. Use the new\n   `LoaderEventListener` type to observe such failures.\n * Fix: Don't crash in Gradle if the Zipline runtime library is absent.\n * New: Extend Kotlin's `AutoCloseable` in `Zipline`, `ZiplineService` and `ZiplineScope`.\n * Upgrade: [Oracle Linux 8][oracle_linux_8] for x86_64 Linux (`amd64/oraclelinux:8` on Docker).\n * Upgrade: [Kotlin Serialization 1.7.1][kotlin_serialization_1_7_1].\n\n\n## [1.13.0] - 2024-06-14\n\n * Fix: Don't derive the Zipline compiler's output directory from the Kotlin/JS output directory.\n   Zipline's outputs are now emitted to directories named like `build/zipline/Development`, and\n   `build/zipline/ProductionWebpack`. This avoids a `PropertyQueryException` crash in Gradle.\n\n\n## [1.12.0] - 2024-06-13\n\n * Fix: Don't allocate a stack trace when canceling a coroutine or a job. We've observed that\n   applications create many instances of `CancellationException`, such as when canceling a flow\n   in routine business logic. Unfortunately, we've also seen that creating the stack traces for\n   these exceptions is slow on Kotlin/Native. With this update Zipline reuses a single instance of\n   CancellationException everywhere. We believe that losing the diagnostic information is worth\n   the performance benefit.\n * Fix: Don't break the configuration cache. Zipline's compile task violated a Gradle requirement\n   by reading another task's property before that task had completed.\n * New: `ZiplineFunction.asDynamicFunction()` short-circuits Kotlin Serialization in Kotlin/JS. This\n   new mechanism allows performance-sensitive code to reduce the amount of work required to call\n   bridged functions.\n * Upgrade: [Kotlin Serialization 1.7.0][kotlin_serialization_1_7_0].\n\n\n## [1.11.0] - 2024-06-05\n\n * New: `apiTracking` property on the `zipline { }` Gradle extension allows disabling API generation.\n * Fix: Calling `Zipline.close()` will now call `ZiplineService.close()` on all bound services. Strong\n   references to the services will also be cleared to prevent reference cycles on native.\n * Upgrade: [Kotlin 2.0.0][kotlin_2_0_0]\n\n\n## [1.10.1] - 2024-05-13\n\n * Fix: Build the released artifact on macOS instead of Linux to work around an issue packaging\n   native dependencies.\n\n\n## [1.10.0] - 2024-05-01\n\n * Fix: Clean source paths that show up in stack traces.\n * Fix: Don't leak Zipline instances. We had a bug where our memory-leak detection itself introduced\n   a memory leak. We held a reference to a Zipline instance that was intended to be used to report\n   services that were garbage collected but not closed.\n\n\n## [1.9.0] - 2024-04-11\n\n * Breaking: Reorder the parameters in `ZiplineLoader` so `FileSystem` always precedes `Path`.\n * Fix: Release unused services in `Zipline.close()`. This was a memory leak.\n * Fix: Don't break Gradle's configuration cache in the `ziplineApiDump` task.\n * New: `ZiplineCryptography` adds a `SecureRandom` API for guest code.\n * New: `Zipline.getOrPutAttachment()` lets you attach application data to a Zipline instance.\n * New: Support building Zipline with the new Kotlin K2 compiler.\n * Upgrade: [Kotlin 1.9.23][kotlin_1_9_23]\n * Upgrade: [kotlinx.coroutines 1.8.0][kotlinx_coroutines_1_8_0]\n * Upgrade: [Okio 3.9.0][okio_3_9_0]\n * Upgrade: [SQLDelight 2.0.2][sqldelight_2_0_2]\n\n\n## [1.8.0] - 2024-01-11\n\n * Fix: Don't crash validating signatures on Android 7.x. We incorrectly used an API that wasn't\n   available until API 26+.\n * New: `FreshnessChecker` decides whether to load cached code. If it returns false,\n   `EventListener.applicationLoadSkippedNotFresh()` will be called.\n * New: `EventListener.manifestReady()` is called when the manifest is fetched and verified, but\n   before any code is downloaded.\n * Upgrade: [Okio 3.7.0][okio_3_7_0]\n\n\n## [1.7.0] - 2023-11-30\n\n* New: Gradle APIs to optimize production builds for either small artifact size or developer\n  experience. Call the appropriate functions in the `zipline {}` block of your build file:\n    ```kotlin\n    zipline {\n      ...\n      optimizeForSmallArtifactSize()\n    }\n    ```\n * Fix: Don't crash when very large `Long` values are sent over a bridged API. Zipline uses JSON to\n   encode values shared between host and guest, and that converts all primitive numeric types to\n   `Double`. It is necessary to add `@Contextual` to all serialized `Long` values to get this fix.\n\n\n## [1.6.0] - 2023-11-20\n\n* Upgrade: [SQLDelight 2.0.0][sqldelight_2_0_0]\n\n\n## [1.5.1] - 2023-11-14\n\n * Fix: remove the Zipline version from the `klib` metadata in the `zipline-cinterop-quickjs`\n   artifact. This restores the behavior from 1.4.0 to work around [KT-62515].\n\n\n## [1.5.0] - 2023-11-02\n\n * New: `Zipline.eventListener` can be used to get the `EventListener` from a `Zipline` instance.\n * Upgrade: [Kotlin 1.9.20](https://square.github.io/okio/changelog/#version-360)\n\n\n## [1.4.0] - 2023-10-31\n\n * New: `EventListener.Factory` can be used to scope events to a particular `Zipline` instance.\n * New: Support arbitrary metadata in the `ZiplineManifest`. This new `Map<String, String>` can be\n   produced in your `build.gradle.kts` file, and consumed from the `ZiplineManifest` instance.\n\n    ```kotlin\n    zipline {\n      ...\n      metadata.put(\"build_timestamp\", \"2023-10-25T12:00:00T\")\n    }\n    ```\n\n * Upgrade: [OkHttp 4.12.0](https://square.github.io/okhttp/changelogs/changelog_4x/#version-4120)\n * Upgrade: [Okio 3.6.0](https://square.github.io/okio/changelog/#version-360)\n\n\n## [1.3.0] - 2023-09-20\n\n * Fix: Configure a 6 MiB stack size by default. Previously Zipline didn't enforce any stack\n   size limit, which resulted in difficult-to-diagnose crashes when the stack size was exceeded.\n   Callers must manually ensure their calling stack sizes are larger than 6 MiB!\n * Fix: Always include type parameters for nested parameterized types.\n * Fix: Don't double-free when calling `NSData.dataWithBytesNoCopy`. We had a bug where we were\n   double-freeing memory in the Kotlin/Native `EcdsaP256` signature verifier.\n * Upgrade: [Kotlin Serialization 1.6.0][kotlin_serialization_1_6_0].\n\n\n## [1.2.0] - 2023-08-09\n\n * Upgrade: [Kotlin 1.9.0](https://github.com/JetBrains/kotlin/releases/tag/v1.9.0)\n * Upgrade: [kotlinx.coroutines 1.7.3][kotlinx_coroutines_1_7_3]\n\n\n## [1.1.0] - 2023-07-30\n\n * New: Gradle tasks `ziplineApiCheck` and `ziplineApiDump`. These tasks work like Kotlin’s\n   [Binary compatibility validator](https://github.com/Kotlin/binary-compatibility-validator):\n   the _Dump_ task writes your public API to a file (`api/zipline-api.toml`) and the the _Check_\n   task confirms that your public API matches that file. These two tasks expose the IDs Zipline uses\n   for functions. The `:ziplineApiCheck` task configures itself a dependency of Gradle's `:check`\n   task: you'll need to run `:ziplineApiDump` when applying this update and each time your public\n   API changes going forward.\n * Upgrade: [Kotlin 1.8.21][kotlin_1_8_21].\n * Upgrade: [kotlinx.coroutines 1.7.2][kotlinx_coroutines_1_7_2].\n * Upgrade: [Kotlin Serialization 1.5.1][kotlin_serialization_1_5_1].\n\n\n## [1.0.0] - 2023-06-12\n\nThis is Zipline's initial stable release.\n\nWith this release we commit to compatibility between host and guest programs. In particular, host\napplications built with any Zipline 1.x release will be able to execute guest applications built\nwith any other 1.y release. (Application developers must write compatible interfaces to take\nadvantage of this!)\n\nThe following are now stable:\n\n * The manifest file format (`manifest.zipline.json`)\n * The library file format and bytecode within (`my-library.zipline`)\n * The host-guest call protocol\n * The internal host-guest APIs for async calls, console logging, and leak notifications\n\nAs we add features and performance improvements to future releases, we will test compatibility\nwith 1.0.\n\nWe expect to someday do ‘Zipline 2.0’ that uses WebAssembly. When that happens we’ll make sure the\n2.x tools can also produce programs that run on 1.x hosts.\n\n * Fix: Don't allow services with the different generic parameters to collide in the cache. We had\n   a severe bug where two services would share serializers for unrelated types. This would typically\n   result in a `ClassCastException` at runtime.\n\n\n## [0.9.20] - 2023-06-01\n\n * Downgrade: [Kotlin 1.8.20][kotlin_1_8_20]. (Our users aren't ready for 1.8.21 yet.)\n * Downgrade: [Kotlin Serialization 1.5.0][kotlin_serialization_1_5_1]. (Requires Kotlin 1.8.21.)\n\n\n## [0.9.19] - 2023-06-01\n\n * Breaking: Change the calling convention between host and guest code to identify functions by IDs\n   instead of by their signatures. We renamed `ZiplineFunction.name` to `signature` and added a new\n   `id` property.\n * Breaking: Change the built-in services to share a single identifier rather than bridging them\n   separately based on feature (`console`, `event_loop`, `event_listener`.)\n * Breaking: Move `ZiplineManifest` from `app.cash.zipline.loader` to `app.cash.zipline`. It was\n   also promoted to the main `zipline` artifact.\n * New: `ZiplineService.targetType` can be used to inspect the function declarations on the peer's\n   version of a service.\n * New: `EventListener.manifestVerified()` signals successful signature checks of the manifest.\n * New: Convert `zipline-profiler` into a multiplatform artifact.\n * Upgrade: [Kotlin 1.8.21][kotlin_1_8_21].\n * Upgrade: [kotlinx.coroutines 1.7.1][kotlinx_coroutines_1_7_1].\n * Upgrade: [Kotlin Serialization 1.5.1][kotlin_serialization_1_5_1].\n\n\n## [0.9.18] - 2023-04-17\n\n * New: Support pass-by-reference of `StateFlow` values.\n * Upgrade: [Kotlin 1.8.20][kotlin_1_8_20].\n * Fix: Don't crash applying source maps to QuickJS bytecode. We had a longstanding off-by-one\n   error interpreting an encoded function's flags.\n * Fix: Retry web sockets when polling for fresh code in development mode. Previously we fell back\n   to polling after a single web socket error.\n * Fix: Don't `ClassCastException` when running Gradle in continuous mode. We were failing to post\n   web socket updates when fresh code is available.\n\n\n## [0.9.17] - 2023-03-15\n\n * Upgrade: [Kotlin 1.8.10][kotlin_1_8_10].\n * Upgrade: [Kotlin Serialization 1.5.0][kotlin_serialization_1_5_0].\n * Fix: Support function overloads in `ZiplineService` interfaces.\n * Fix: Workaround a crash in Kotlin/JS incremental compilation. We were using a constant string in\n   a `js(...)` literal.\n\n\n## [0.9.16] - 2023-02-09\n\n * New `withDevelopmentServerPush()` subscribes to the local development server's websocket to\n   trigger hot reloads. This is lower-latency and more efficient than polling.\n * Upgrade: [Kotlin 1.8.0][kotlin_1_8_0].\n\n\n## [0.9.15] - 2023-01-25\n\n * Fix: Don't crash if canceled with a 0-delay job enqueued. We had a bug where calling\n   `Zipline.close()` could race with an enqueued job.\n * Fix: Don't crash in the JS CoroutineEventLoop. This replaces an `IllegalStateException` with a\n   `CancellationException` when making a suspending call after the Zipline is closed.\n * Fix: Do not set `-Xir-per-module`. This is no longer necessary, and may have prevented\n   whole-program module generation.\n * New: Support Webpack builds. In addition to modular builds that emit many `.zipline` files per\n   program, webpack builds emit a single minified `.zipline` file. (In both cases a single manifest\n   file is used.)\n * New: We've added event listener events for the loader's initializer and main function.\n\n\n## [0.9.14] - 2023-01-16\n\n * Fix: Don’t force `suspend` functions to suspend. We've changed our calling convention so\n   suspendable functions are executed inline and on the same call stack until they suspend. If such\n   functions return without suspending, the async dispatch is skipped.\n * Fix: Provide more information when calling a closed service.\n * Fix: Clean up file names in stack traces.\n * New: Add a `ZiplineManifest` to `LoadResult.Success`.\n\n\n## [0.9.13] - 2022-12-22\n\n * New: `ZiplineScope` is a new mechanism to close pass-by-reference services and flows. Pass a\n   `ZiplineScope` to `Zipline.take()` or implement `ZiplineScoped` in a `ZiplineService` to declare\n   a scope, then call `ZiplineScope.close()` to close all received services. Note that Flows\n   that were passed-by-reference previously needed to be collected exactly once; with this change\n   Flows may be collected any number of times.\n * New: Configure the development HTTP server's local port in Gradle:\n    ```kotlin\n    zipline {\n      ...\n      httpServerPort.set(22364)\n    }\n    ```\n * New: Include the service name in `ZiplineApiMismatchException`.\n * Fix: Prevent `.zipline` files from being stored in the HTTP cache. We've added\n   'Cache-Control: no-store' request headers to downloads to prevent caching that's redundant\n   with ZiplineLoader's cache.\n * Fix: Make `ZiplineService.close()` idempotent for outbound services.\n\n\n## [0.9.12] - 2022-12-06\n\n * New: Add `ZiplineFunction.isSuspending`.\n * New: Add events for `ziplineCreate()`, `moduleLoadStart()`, and `moduleLoadEnd()`.\n\n\n## [0.9.11] - 2022-12-05\n\n * New: Publish an event when Zipline is closed.\n * Fix: Avoid a linear search through endpoint names.\n\n\n## [0.9.10] - 2022-11-30\n\n * New: Add support for `var` and `val` declarations in service interfaces.\n * Fix: Update Gradle task to serve zipline files for compatibility with Gradle 7.6.\n\n\n## [0.9.9] - 2022-11-16\n\n * Changed: Roll back Kotlin 1.7.20 to ensure downstream users can still use Compose easily. The plugin remains compatible with 1.7.21.\n\n\n## [0.9.8] - 2022-11-16\n\n * New: Support Kotlin 1.7.21.\n\n\n## [0.9.7] - 2022-11-11\n\n * Breaking: Change `EventListener` to pass the `Zipline` instance when it is available.\n * Breaking: Introduce `EventListener.applicationLoadSkipped()` when a downloaded manifest hasn't\n   changed.\n * New: The development server (`serveDevelopmentZipline`) now notifies code changes via web socket.\n   Connect to `/ws` to receive `\"reload\"` messages.\n\n\n## [0.9.6] - 2022-10-13\n\n * Fix: Don't fail with `unexpected call` errors because code was not being rewritten by our Kotlin\n   compiler plugin.\n\n\n## [0.9.5] - 2022-10-06\n\n * New: Support `@Contextual` as a type annotation on `ZiplineService` parameters and return types.\n   This will attempt to find a contextual serializer for the annotated type.\n * Breaking: Rename `LoadedZipline` to `LoadResult`. This allows `ZiplineLoader.load()` to return\n   a flow that includes both successes and failures.\n * Breaking: Remove `eval()` support from QuickJs. As a security measure Zipline doesn't support\n   evaluating JavaScript at runtime.\n\n\n## [0.9.4] - 2022-09-07\n\n * New: Build in a basic HTTP client for Apple platforms.\n * Breaking change: Wrap exceptions thrown in bridged calls with `ZiplineException`. Previously\n   these were wrapped in `Exception` which was difficult to catch generically.\n\n\n## [0.9.3] - 2022-08-23\n\n * Breaking change: Move `SerializersModule` from a property of `ZiplineLoader` to a parameter in\n   `load()` and `loadOnce()`. This enables using a single loader for different applications that\n   have different serializers.\n * Breaking change: Make `ZiplineCache` a top-level type. It has its own lifecycle and is best\n   managed directly.\n * Breaking change: Pass a `startValue` parameter consistently to event listener callbacks.\n * New: Extension `OkHttpClient.asZiplineHttpClient()` makes it easier to use general-purpose\n   Zipline APIs from multiplatform code.\n\n\n## [0.9.2] - 2022-08-22\n\n * Breaking change: `ZiplineLoader.load(...)` is no longer suspending.\n * Breaking change: Don't require implementors of `ZiplineHttpClient` to implement URL resolution.\n * Breaking change: Include a default clock implementation on iOS.\n * Breaking change: Require callers to explicitly opt out of signature checks. Pass\n   `ManifestVerifier.Companion.NO_SIGNATURE_CHECKS` to use `ZiplineLoader` without code signature\n   verification.\n * New: Support ECDSA P-256 for signatures.\n\n\n## [0.9.1] - 2022-08-18\n\n * New: Gradle extension `zipline {}` block.\n * New: Compile files in parallel.\n * New: Replace webpack with a dedicated static file server. Use `serveDevelopmentZipline` or\n   `serveProductionZipline` to serve an application locally.\n * Fix: Always run Kotlin/JS in strict mode.\n * Upgrade: [Kotlin Serialization 1.4.0][kotlin_serialization_1_4_0].\n\n\n## [0.9.0] - 2022-08-05\n\n * New: `ZiplineLoader` is a new module to launch Zipline applications quickly. It supports caching\n   including offline launching, code signing, and launching from a flow.\n * New: Zipline's Gradle plugin makes it fast and easy to use build Zipline applications.\n * New: `EventListener` makes it easy to observe with Zipline performance and problems.\n * Upgrade: [Kotlin 1.7.10][kotlin_1_7_10].\n\n\n## [0.1.0] - 2021-09-30\n\nWe've changed this project to focus exclusively on executing Kotlin/JS libraries.\n\nWe plan to drop support for executing arbitrary JavaScript code. If you've been using either\nQuickJS Java (this project's name until September 2021) or Duktape Android (this project's name\nuntil June 2021), those projects remain as git branches but will not receive further updates.\n\nThe project's new Maven coordinates are `app.cash.zipline:zipline`.\n\n### Added\n\n* `Zipline` is a new entry point for connecting to Kotlin/JS libraries.\n* `ZiplineReference` supports sending service objects across platforms.\n* `ZiplineSerializer` supports sending serializers objects across platforms.\n* `FlowReference` supports sending `Flow` objects across platforms.\n* `InterruptHandler` interrupts executing JavaScript.\n* `MemoryUsage` interrogates the state of the JavaScript runtime.\n\n### Changed\n\n* `QuickJs` entry point moved to `app.cash.zipline`.\n\n\n# QuickJS Java change log\n\n## [0.9.2] - 2021-08-04\n\n### Added\n\n* `compile()` method takes JS source and produces a version-specific bytecode representation.\n* `execute()` method takes version-specific bytecode and runs it.\n\n\n### Changed\n\n* Methods are no longer `synchronized`. If you are performing concurrent access add your own synchronization.\n\n\n### Fixed\n\n* Self-extract native libraries from JAR when running on the JVM.\n* Correct UTF-8 handling of multi-byte graphemes to avoid mismatch between Java's modified UTF-8 and QuickJS's traditional UTF-8.\n\n\n## [0.9.1] - 2021-07-12\n\nJVM artifact is now available at `app.cash.quickjs:quickjs-jvm` for Linux and Mac OS!\n\n### Fixed\n\n* Handle null argument array which was sometimes supplied to native code instead of a zero-element array.\n* Properly track the associated proxy class from native code to avoid a segfault.\n* Eliminate a segfault during engine close when cleaning up proxied objects.\n\n\n## [0.9.0] - 2021-06-14\n\nBacking JS engine change to QuickJS.\nPackage name is now `app.cash.quickjs`.\nEntrypoint is `QuickJs` class.\nMaven coordinates are now `app.cash.quickjs:quickjs-android`.\nThe API and behavior should otherwise be unchanged.\n\n\n[Unreleased]: https://github.com/cashapp/quickjs-java/compare/0.10.0...HEAD\n[0.9.2]: https://github.com/cashapp/quickjs-java/releases/tag/0.9.2\n[0.9.1]: https://github.com/cashapp/quickjs-java/releases/tag/0.9.1\n[0.9.0]: https://github.com/cashapp/quickjs-java/releases/tag/0.9.0\n\n\n\n# Duktape Android change log\n\n## Version 1.4.0 *(2021-06-14)*\n\n * New: Update to Duktape 2.6.0.\n * Fix: Correct a few JNI reference leaks which may have eventually caused a native crash.\n * Migrated to AndroidX annotations.\n\n## Version 1.3.0 *(2018-08-02)*\n\n * New: update to Duktape 2.2.1.\n * Fix: update build settings to reduce AAR output size.\n\n## Version 1.2.0 *(2017-09-08)*\n\n * New: support for arrays of supported types as arguments between Java/JavaScript.\n * New: update to Duktape 1.8.0.\n * Fix: explicitly release temporary JVM objects when returning from calls to Java from JavaScript.\n * Fix: allocate a local frame when binding Java interfaces to allow many methods and arguments.\n\n## Version 1.1.0 *(2016-11-08)*\n\n * New: support parsing common date formats in JavaScript's \"new Date('str')\" constructor.\n * Fix: Duktape.evaluate returns null if the implicit return type is unsupported.\n\n## Version 1.0.0 *(2016-09-28)*\n\n * Renamed Duktape.proxy and Duktape.bind to Duktape.get and Duktape.set.\n * New: support for arguments of type Object between Java/JavaScript.\n * New: support variadic (VarArgs) functions on Java/JavaScript calls.\n * Fix: Make creation and use of a Duktape instance thread-safe.\n\n## Version 0.9.6 *(2016-08-31)*\n\n * New: call JavaScript methods from Java via proxies.\n * New: update to Duktape 1.5.0.\n\n## Version 0.9.5 *(2016-03-07)*\n\n * New: call Java methods from JavaScript.\n * New: improved stacktraces. Includes both JavaScript and Java code from the call stack.\n * New: update to Duktape 1.4.0.\n\n## Version 0.9.4 *(2015-11-02)*\n\n * New: expose JavaScript stacktraces when things fail.\n\n## Version 0.9.3 *(2015-10-07)*\n\n * Fix: Use global refs in JNI.\n\n## Version 0.9.2 *(2015-10-06)*\n\n * Fix: Get the timezone from Java rather than using UTC.\n * Fix: Use recommended flags for building.\n\n## Version 0.9.1 *(2015-09-22)*\n\n * Fix: Correctly propagate errors as exceptions.\n\n\n## Version 0.9.0 *(2015-09-08)*\n\nInitial release.\n\n\n[KT-62515]: https://youtrack.jetbrains.com/issue/KT-62515\n[kotlin_1_7_10]: https://github.com/JetBrains/kotlin/releases/tag/v1.7.10\n[kotlin_1_8_0]: https://github.com/JetBrains/kotlin/releases/tag/v1.8.0\n[kotlin_1_8_10]: https://github.com/JetBrains/kotlin/releases/tag/v1.8.10\n[kotlin_1_8_20]: https://github.com/JetBrains/kotlin/releases/tag/v1.8.20\n[kotlin_1_8_21]: https://github.com/JetBrains/kotlin/releases/tag/v1.8.21\n[kotlin_1_9_20]: https://github.com/JetBrains/kotlin/releases/tag/v1.9.20\n[kotlin_1_9_23]: https://github.com/JetBrains/kotlin/releases/tag/v1.9.23\n[kotlin_2_0_0]: https://github.com/JetBrains/kotlin/releases/tag/v2.0.0\n[kotlin_serialization_1_4_0]: https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.4.0\n[kotlin_serialization_1_5_0]: https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.5.0\n[kotlin_serialization_1_5_1]: https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.5.1\n[kotlin_serialization_1_6_0]: https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.6.0\n[kotlin_serialization_1_7_0]: https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.7.0\n[kotlin_serialization_1_7_1]: https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.7.1\n[kotlin_serialization_1_7_3]: https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.7.3\n[kotlinx_coroutines_1_7_1]: https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.7.1\n[kotlinx_coroutines_1_7_2]: https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.7.2\n[kotlinx_coroutines_1_7_3]: https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.7.3\n[kotlinx_coroutines_1_8_0]: https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.8.0\n[kotlinx_coroutines_1_9_0]: https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.9.0\n[okio_3_7_0]: https://square.github.io/okio/changelog/#version-370\n[okio_3_9_0]: https://square.github.io/okio/changelog/#version-390\n[okio_3_9_1]: https://square.github.io/okio/changelog/#version-391\n[oracle_linux_8]: https://docs.oracle.com/en/operating-systems/oracle-linux/8/\n[sqldelight_2_0_0]: https://cashapp.github.io/sqldelight/2.0.0/changelog/#200-2023-07-26\n[sqldelight_2_0_2]: https://cashapp.github.io/sqldelight/2.0.2/changelog/#202-2024-04-05\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.955078125,
          "content": "# Zipline\n\nThis library streamlines using Kotlin/JS libraries from Kotlin/JVM and Kotlin/Native programs. It\nmakes it fetching code as easy as fetching data:\n\n * For continuous deployment within mobile apps, just like we do for servers and web apps. It'd be\n   simpler to do continuous deploys via the app stores! But that process is too slow and we can't\n   guarantee that user’s devices will update immediately.\n * For user-customizable behavior and plugin systems\n * For updating business rules, like pricing or payments\n * For fresh content like games\n\nZipline works by embedding the [QuickJS JavaScript engine][qjs] in your Kotlin/JVM or Kotlin/Native\nprogram. It's a small and fast JavaScript engine that's well-suited to embedding in applications.\n\n_(Looking for [Duktape Android](#duktape-android)?)_\n\n\n### Code Example\n\nLet's make a trivia game that has fresh questions every day, even if our users don't update their\napps. We define [our interface][trivia.kt] in `commonMain` so that we can call it from Kotlin/JVM\nand implement it in Kotlin/JS.\n\n```kotlin\ninterface TriviaService : ZiplineService {\n  fun games(): List<TriviaGame>\n  fun answer(questionId: String, answer: String): AnswerResult\n}\n```\n\nNext we [implement it][triviaJs.kt] in `jsMain`:\n\n```kotlin\nclass RealTriviaService : TriviaService {\n  // ...\n}\n```\n\nLet's connect the implementation running in Kotlin/JS to the interface running in Kotlin/JVM. In\n`jsMain` we define an [exported function][launchZiplineJs.kt] to bind the implementation:\n\n```kotlin\n@JsExport\nfun launchZipline() {\n  val zipline = Zipline.get()\n  zipline.bind<TriviaService>(\"triviaService\", RealTriviaService())\n}\n```\n\nNow we can start a development server to serve our JavaScript to any running applications that\nrequest it.\n\n```console\n$ ./gradlew -p samples trivia:trivia-js:serveDevelopmentZipline --info --continuous\n```\n\nNote that this Gradle won't ever reach 100%. That's expected; we want the development server to stay\non. Also note that the `--continuous` flag will trigger a re-compile whenever the code changes.\n\nYou can see the served application manifest at\n[localhost:8080/manifest.zipline.json](http://localhost:8080/manifest.zipline.json). It references\nall the code modules for the application.\n\nIn `jvmMain` we need write [a program][launchZiplineJvm.kt] that downloads our Kotlin/JS code and\ncalls it. We use `ZiplineLoader` which handles code downloading, caching, and loading. We create a\n`Dispatcher` to run Kotlin/JS on. This must be a single-threaded dispatcher as each Zipline instance\nmust be confined to a single thread.\n\n```kotlin\nsuspend fun launchZipline(dispatcher: CoroutineDispatcher): Zipline {\n  val manifestUrl = \"http://localhost:8080/manifest.zipline.json\"\n  val loader = ZiplineLoader(\n    dispatcher,\n    ManifestVerifier.NO_SIGNATURE_CHECKS,\n    OkHttpClient(),\n  )\n  return loader.loadOnce(\"trivia\", manifestUrl)\n}\n```\n\nNow we build and run the JVM program to put it all together. Do this in a separate terminal from the\ndevelopment server!\n\n```console\n$ ./gradlew -p samples trivia:trivia-host:shadowJar\njava -jar samples/trivia/trivia-host/build/libs/trivia-host-all.jar\n```\n\n\n### Interface bridging\n\nZipline makes it easy to share interfaces with Kotlin/JS. Define an interface in `commonMain`,\nimplement it in Kotlin/JS, and call it from the host platform. Or do the opposite: implement it on\nthe host platform and call it from Kotlin/JS.\n\nBridged interfaces must extend `ZiplineService`, which defines a single `close()` method to release\nheld resources.\n\nBy default, arguments and return values are pass-by-value. Zipline uses [kotlinx.serialization] to\nencode and decode values passed across the boundary.\n\nInterface types that extend from `ZiplineService` are pass-by-reference: the receiver may call\nmethods on a live instance.\n\nInterface functions may be suspending. Internally Zipline implements `setTimeout()` to make\nasynchronous code work as it's supposed to in Kotlin/JS.\n\nZipline also supports `Flow<T>` as a parameter or return type. This makes it easy to build reactive\nsystems.\n\n\n### Fast\n\nOne potential bottleneck of embedding JavaScript is waiting for the engine to compile the input\nsource code. Zipline precompiles JavaScript into efficient QuickJS bytecode to eliminate this\nperformance penalty.\n\nAnother bottleneck is waiting for code to download. Zipline addresses this with support for modular\napplications. Each input module (Like Kotlin's standard, serialization, and coroutines libraries)\nis downloaded concurrently. Each downloaded module is cached. Modules can also be embedded with the\nhost application to avoid any downloads if the network is unreachable. If your application module\nchanges more frequently than your libraries, users only download what's changed.\n\nIf you run into performance problems in the QuickJS runtime, Zipline includes a sampling profiler.\nYou can use this to get a breakdown of how your application spends its CPU time.\n\n\n### Developer-Friendly\n\nZipline implements `console.log` by forwarding messages to the host platform. It uses\n`android.util.Log` on Android, `java.util.logging` on JVM, and `stdout` on Kotlin/Native.\n\nZipline integrates Kotlin source maps into QuickJS bytecode. If your process crashes, the stacktrace\nwill print `.kt` files and line numbers. Even though there's JavaScript underneath, developers don't\nneed to interface with `.js` files.\n\nAfter using a bridged interface it must be closed so the peer object can be garbage collected. This\nis difficult to get right, so Zipline borrows ideas from [LeakCanary] and aggressively detects\nwhen a `close()` call is missed.\n\n\n### Secure\n\nZipline supports [EdDSA Ed25519] and [ECDSA P-256] signatures to authenticate downloaded libraries.\n\nSet up is straightforward. Generate an EdDSA key pair. A task for this is installed with the Zipline\nGradle plugin.\n\n```\n$ ./gradlew :generateZiplineManifestKeyPairEd25519\n...\n---------------- ----------------------------------------------------------------\n      ALGORITHM: Ed25519\n     PUBLIC KEY: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n    PRIVATE KEY: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\n---------------- ----------------------------------------------------------------\n...\n```\n\nPut the private key on the build server and configure it to sign builds:\n\n```kotlin\nzipline {\n  signingKeys {\n    create(\"key1\") {\n      privateKeyHex.set(...)\n      algorithmId.set(app.cash.zipline.loader.SignatureAlgorithmId.Ed25519)\n    }\n  }\n}\n```\n\nPut the public key in each host application and configure it to verify signatures:\n\n```kotlin\nval manifestVerifier = ManifestVerifier.Builder()\n  .addEd25519(\"key1\", ...)\n  .build()\nval loader = ZiplineLoader(\n  manifestVerifier = manifestVerifier,\n  ...\n)\n```\n\nBoth signing and verifying accept multiple keys to support key rotation.\n\nZipline is designed to run your organization's code when and where you want it. It does not\noffer a sandbox or process-isolation and should not be used to execute untrusted code.\n\n### Trust Model for Signatures\n\nIt is essential to keep in mind that this design puts implicit trust on:\n1. The Host Application that verifies the signatures.\n2. The Build Server that generates the signature(Has access to the signing keys)\n\nIt does not protect against any kind of compromise of the above.\n\nAlso It does not yet provide a mechanism to outlaw older(signed) versions of executable code that have known problems.\n\n\n### Speeding Up Hot-Reload\nThere are a few things you can do to make sure that hot-reload is running as fast as it can:\n1. Ensure you are running Gradle 7.5 or later (previous versions had a delay in picking up changed\n   files).\n2. In your app's gradle.properties add `kotlin.incremental.js.ir=true` to enable Kotlin/JS\n   incremental compile.\n3. In your app's gradle.properties add `org.gradle.unsafe.configuration-cache=true` to enable the\n   Gradle configuration cache.\n4. In your app's build.gradle.kts add `tasks.withType(DukatTask::class) { enabled = false }`\n   to turn off the Dukat task if you are not using TypeScript type declarations.\n\n### Requirements\n\nZipline works on Android 4.3+ (API level 18+), Java 8+, and [Kotlin/Native].\n\nZipline uses unstable APIs in its implementation and is sensitive to version updates for these\ncomponents.\n\n| Component            | Supported Version | Notes                                                                       |\n|:---------------------|:------------------|:----------------------------------------------------------------------------|\n| Kotlin Compiler      | 2.1.0             | Kotlin compiler plugins do not yet have a stable API.                       |\n| Kotlin Serialization | 1.8.0             | For `decodeFromDynamic()`, `encodeToDynamic()`, and `ContextualSerializer`. |\n| Kotlin Coroutines    | 1.9.0             | For `transformLatest()` and `Deferred.getCompleted()`.                      |\n\nWe intend to use stable APIs as soon as they are available.\n\nWe intend to keep Zipline host and runtime releases interoperable so you can upgrade each\nindependently.\n\n| Host Zipline Version  | Supported Runtime Zipline Versions              |\n| --------------------: | :---------------------------------------------- |\n|                   0.x | Exact same 0.x version as the host.             |\n|                   1.x | Any 1.x version.                                |\n\n\n### License\n\n    Copyright 2015 Square, Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n# Duktape-Android\n\nThis project was previously known as Duktape-Android and packaged the\n[Duktape](https://duktape.org/) JavaScript engine for Android. The Duktape history is still present\nin this repo as are the release tags. Available versions are listed on\n[Maven central](https://search.maven.org/artifact/com.squareup.duktape/duktape-android).\n\n[ECDSA P-256]: https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm\n[EdDSA Ed25519]: https://en.wikipedia.org/wiki/EdDSA\n[Kotlin/Native]: https://kotlinlang.org/docs/multiplatform-dsl-reference.html#targets\n[LeakCanary]: https://square.github.io/leakcanary/\n[kotlinx.serialization]: https://github.com/Kotlin/kotlinx.serialization\n[launchZiplineJs.kt]: samples/trivia/trivia-js/src/jsMain/kotlin/app/cash/zipline/samples/trivia/launchZiplineJs.kt\n[launchZiplineJvm.kt]: samples/trivia/trivia-host/src/main/kotlin/app/cash/zipline/samples/trivia/launchZiplineJvm.kt\n[qjs]: https://bellard.org/quickjs/\n[trivia.kt]: samples/trivia/trivia-shared/src/commonMain/kotlin/app/cash/zipline/samples/trivia/trivia.kt\n[triviaJs.kt]: samples/trivia/trivia-js/src/jsMain/kotlin/app/cash/zipline/samples/trivia/triviaJs.kt\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 0.9853515625,
          "content": "# Releasing\n\n1. Update the `VERSION_NAME` in `gradle.properties` to the release version.\n\n2. Update the `CHANGELOG.md`:\n   1. Change the `Unreleased` header to the release version.\n   2. Add a link URL to ensure the header link works.\n   3. Add a new `Unreleased` section to the top.\n\n3. Update the `README.md` so the \"Download\" section reflects the new release version and the\n   snapshot section reflects the next \"SNAPSHOT\" version.\n\n4. Commit\n\n   ```\n   $ git commit -am \"Prepare version X.Y.X\"\n   ```\n\n5. Tag\n\n   ```\n   $ git tag -am \"Version X.Y.Z\" X.Y.Z\n   ```\n\n6. Update the `VERSION_NAME` in `gradle.properties` to the next \"SNAPSHOT\" version.\n\n7. Commit\n\n   ```\n   $ git commit -am \"Prepare next development version\"\n   ```\n\n8. Push!\n\n   ```\n   $ git push && git push --tags\n   ```\n\n   This will trigger a GitHub Action workflow which will create a GitHub release and upload the\n   release artifacts to Sonatype Nexus.\n\n9. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.\n"
        },
        {
          "name": "TROUBLESHOOTING.md",
          "type": "blob",
          "size": 2.1748046875,
          "content": "# Troubleshooting\n\nFor contributors to Zipline, the following can be exceptions encountered which don't have obvious fixes (yet).\n\n## Configure Android SDK Location for Gradle/IntelliJ\n\nTo let your build resolve Android SDK files, add the following in a `local.properties` file at the root of the Zipline repo directory. If you're using Android Studio to open the Zipline project, this step may not be necessary.\n\nOn macOS, you'll replace `{your username}` with your local account username. On other platforms the path will be different.\n\n```\nsdk.dir=/Users/{your username}/Library/Android/sdk\n```\n\nIf you don't have Android SDK downloaded yet, the easiest way is to install Android Studio with default configuration with `brew install android-studio`. It will download the Android SDK to the above location in macOS and setup required usage terms approvals.\n\n## Missing JNI Libraries\n\n```\njava.lang.ExceptionInInitializerError\n\tat app.cash.zipline.Zipline$Companion.create(Zipline.kt:175)\n\tat app.cash.zipline.Zipline$Companion.create$default(Zipline.kt:170)\n\tat app.cash.zipline.ConsoleTest.<init>(ConsoleTest.kt:36)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n  ...\nCaused by: java.lang.IllegalStateException: Unable to read /jni/aarch64/libquickjs.dylib from JAR\n\tat app.cash.zipline.QuickJsNativeLoaderKt.loadNativeLibrary(QuickJsNativeLoader.kt:36)\n\tat app.cash.zipline.QuickJs.<clinit>(QuickJs.kt:35)\n\t... 46 more\n```\n\nFor tests like `app.cash.zipline.ConsoleTest`, failures with the above stacktrace point to missing `.dylib` prebuilt C libraries necessary for using QuickJS from the JVM.\n\nDownload [the latest `jni-binaries` artifact](https://nightly.link/cashapp/zipline/workflows/build/trunk/jni-binaries) from our GitHub CI, and extract its contents to the `zipline/src/jvmMain/resources/jni/` directory.\n\n## Build JNI Libraries Locally\n\nZipline uses Zig to cross-compile its JVM native libraries to all platforms and architectures.\nThis is only tested on macOS, but may work on Linux, too. Windows is not supported.\n\nFirst, download or install Zig 0.13.0 to your system.\nThen, execute these commands:\n\n```\n$ cd zipline\n$ zig build -p src/jvmMain/resources/jni/\n```\n"
        },
        {
          "name": "build.gradle.kts",
          "type": "blob",
          "size": 8.173828125,
          "content": "import com.android.build.gradle.BaseExtension\nimport com.diffplug.gradle.spotless.SpotlessExtension\nimport com.vanniktech.maven.publish.MavenPublishBaseExtension\nimport com.vanniktech.maven.publish.SonatypeHost\nimport java.net.URI\nimport java.net.URL\nimport kotlinx.validation.ApiValidationExtension\nimport org.gradle.api.tasks.testing.logging.TestExceptionFormat\nimport org.gradle.api.tasks.testing.logging.TestLogEvent\nimport org.jetbrains.dokka.DokkaConfiguration.Visibility\nimport org.jetbrains.dokka.gradle.AbstractDokkaTask\nimport org.jetbrains.dokka.gradle.DokkaMultiModuleTask\nimport org.jetbrains.dokka.gradle.DokkaTaskPartial\nimport org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension\nimport org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension\nimport org.jetbrains.kotlin.gradle.targets.js.testing.KotlinJsTest\nimport org.jetbrains.kotlin.gradle.targets.jvm.tasks.KotlinJvmTest\nimport org.jetbrains.kotlin.gradle.targets.native.tasks.KotlinNativeTest\nimport org.jetbrains.kotlin.gradle.tasks.CInteropProcess\n\nbuildscript {\n  repositories {\n    mavenCentral()\n    google()\n    gradlePluginPortal()\n  }\n  dependencies {\n    classpath(libs.android.gradle.plugin)\n    classpath(libs.binary.compatibility.validator.gradle.plugin)\n    classpath(libs.mavenPublish.gradle.plugin)\n    classpath(libs.kotlin.gradle.plugin)\n    classpath(libs.kotlin.serialization)\n    classpath(libs.dokka.gradle.plugin)\n    classpath(libs.shadowJar.gradle.plugin)\n    classpath(libs.cklib.gradle.plugin)\n    classpath(libs.sqldelight.gradle.plugin)\n    classpath(libs.google.ksp)\n  }\n}\n\nplugins {\n  id(\"com.github.gmazzo.buildconfig\") version \"3.1.0\" apply false\n  alias(libs.plugins.spotless)\n}\n\napply(plugin = \"org.jetbrains.dokka\")\n\napply(plugin = \"com.vanniktech.maven.publish.base\")\n\nconfigure<SpotlessExtension> {\n  kotlin {\n    target(\"**/*.kt\")\n    ktlint()\n      .editorConfigOverride(\n        mapOf(\n          \"ktlint_standard_comment-spacing\" to \"disabled\", // TODO Re-enable\n          \"ktlint_standard_filename\" to \"disabled\",\n          \"ktlint_standard_indent\" to \"disabled\", // TODO Re-enable\n        )\n      )\n  }\n}\n\nallprojects {\n  group = \"app.cash.zipline\"\n  version = project.property(\"VERSION_NAME\") as String\n\n  repositories {\n    mavenCentral()\n    google()\n  }\n}\n\nsubprojects {\n  plugins.withId(\"com.android.library\") {\n    extensions.configure<BaseExtension> {\n      lintOptions {\n        textReport = true\n        textOutput(\"stdout\")\n        lintConfig = rootProject.file(\"lint.xml\")\n\n        isCheckDependencies = true\n        isCheckTestSources = false // TODO true https://issuetracker.google.com/issues/138247523\n        isExplainIssues = false\n\n        // We run a full lint analysis as build part in CI, so skip vital checks for assemble task.\n        isCheckReleaseBuilds = false\n      }\n    }\n  }\n\n  tasks.withType(Test::class).configureEach {\n    // https://github.com/cashapp/zipline/issues/848\n    jvmArgs = jvmArgs!! + \"-Xss2048k\"\n\n    testLogging {\n      if (System.getenv(\"CI\") == \"true\") {\n        events = setOf(TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED)\n      }\n      exceptionFormat = TestExceptionFormat.FULL\n    }\n  }\n}\n\ntasks.named(\"dokkaHtmlMultiModule\", DokkaMultiModuleTask::class.java).configure {\n  moduleName.set(\"Zipline\")\n}\n\nallprojects {\n  tasks.withType<DokkaTaskPartial>().configureEach {\n    dokkaSourceSets.configureEach {\n      documentedVisibilities.set(setOf(\n        Visibility.PUBLIC,\n        Visibility.PROTECTED\n      ))\n      reportUndocumented.set(false)\n      jdkVersion.set(11)\n\n      perPackageOption {\n        matchingRegex.set(\"app\\\\.cash\\\\.zipline\\\\.internal\\\\..*\")\n        suppress.set(true)\n      }\n      perPackageOption {\n        matchingRegex.set(\"app\\\\.cash\\\\.zipline\\\\.loader\\\\.internal\\\\..*\")\n        suppress.set(true)\n      }\n\n      sourceLink {\n        localDirectory.set(rootProject.projectDir)\n        remoteUrl.set(URL(\"https://github.com/cashapp/zipline/tree/trunk/\"))\n        remoteLineSuffix.set(\"#L\")\n      }\n    }\n  }\n\n  // Workaround for https://github.com/Kotlin/dokka/issues/2977.\n  // We disable the C Interop IDE metadata task when generating documentation using Dokka.\n  tasks.withType<AbstractDokkaTask> {\n    @Suppress(\"UNCHECKED_CAST\")\n    val taskClass = Class.forName(\"org.jetbrains.kotlin.gradle.targets.native.internal.CInteropMetadataDependencyTransformationTask\") as Class<Task>\n    parent?.subprojects?.forEach {\n      dependsOn(it.tasks.withType(taskClass))\n    }\n  }\n\n  // Don't attempt to sign anything if we don't have an in-memory key. Otherwise, the 'build' task\n  // triggers 'signJsPublication' even when we aren't publishing (and so don't have signing keys).\n  tasks.withType<Sign>().configureEach {\n    enabled = project.findProperty(\"signingInMemoryKey\") != null\n  }\n\n  plugins.withId(\"org.jetbrains.kotlin.multiplatform\") {\n    configure<KotlinMultiplatformExtension> {\n      jvmToolchain(11)\n      @Suppress(\"OPT_IN_USAGE\")\n      compilerOptions {\n        freeCompilerArgs.addAll(\"-opt-in=app.cash.zipline.EngineApi\")\n      }\n      // https://youtrack.jetbrains.com/issue/KT-61573\n      targets.configureEach {\n        compilations.configureEach {\n          compilerOptions.configure {\n            freeCompilerArgs.addAll(\"-Xexpect-actual-classes\")\n          }\n        }\n      }\n    }\n  }\n\n  plugins.withId(\"org.jetbrains.kotlin.jvm\") {\n    configure<KotlinJvmProjectExtension> {\n      jvmToolchain(11)\n    }\n  }\n\n  plugins.withId(\"com.vanniktech.maven.publish.base\") {\n    configure<PublishingExtension> {\n      repositories {\n        maven {\n          name = \"testMaven\"\n          url = rootProject.layout.buildDirectory.dir(\"testMaven\").get().asFile.toURI()\n        }\n\n        /*\n         * Want to push to an internal repository for testing?\n         * Set the following properties in ~/.gradle/gradle.properties.\n         *\n         * internalUrl=YOUR_INTERNAL_URL\n         * internalUsername=YOUR_USERNAME\n         * internalPassword=YOUR_PASSWORD\n         *\n         * Then run the following command to publish a new internal release:\n         *\n         * ./gradlew publishAllPublicationsToInternalRepository -DRELEASE_SIGNING_ENABLED=false\n         */\n        val internalUrl = providers.gradleProperty(\"internalUrl\").orNull\n        if (internalUrl != null) {\n          maven {\n            name = \"internal\"\n            url = URI(internalUrl)\n            credentials {\n              username = providers.gradleProperty(\"internalUsername\").get()\n              password = providers.gradleProperty(\"internalPassword\").get()\n            }\n          }\n        }\n      }\n    }\n    configure<MavenPublishBaseExtension> {\n      publishToMavenCentral(SonatypeHost.DEFAULT, automaticRelease = true)\n      signAllPublications()\n      pom {\n        description.set(\"Runs Kotlin/JS libraries in Kotlin/JVM and Kotlin/Native programs\")\n        name.set(project.name)\n        url.set(\"https://github.com/cashapp/zipline/\")\n        licenses {\n          license {\n            name.set(\"The Apache Software License, Version 2.0\")\n            url.set(\"http://www.apache.org/licenses/LICENSE-2.0.txt\")\n            distribution.set(\"repo\")\n          }\n        }\n        developers {\n          developer {\n            id.set(\"cashapp\")\n            name.set(\"Cash App\")\n          }\n        }\n        scm {\n          url.set(\"https://github.com/cashapp/zipline/\")\n          connection.set(\"scm:git:https://github.com/cashapp/zipline.git\")\n          developerConnection.set(\"scm:git:ssh://git@github.com/cashapp/zipline.git\")\n        }\n      }\n    }\n  }\n}\n\nallprojects {\n  tasks.withType<KotlinJvmTest>().configureEach {\n    environment(\"ZIPLINE_ROOT\", rootDir)\n  }\n\n  tasks.withType<KotlinNativeTest>().configureEach {\n    environment(\"SIMCTL_CHILD_ZIPLINE_ROOT\", rootDir)\n    environment(\"ZIPLINE_ROOT\", rootDir)\n  }\n\n  tasks.withType<KotlinJsTest>().configureEach {\n    environment(\"ZIPLINE_ROOT\", rootDir.toString())\n  }\n}\n\nsubprojects {\n  plugins.withId(\"binary-compatibility-validator\") {\n    configure<ApiValidationExtension> {\n      // Making this properly internal requires some SQLDelight work.\n      ignoredPackages += \"app.cash.zipline.loader.internal.cache\"\n      // Making this properly internal requires adopting test facets.\n      ignoredPackages += \"app.cash.zipline.loader.internal.fetcher\"\n    }\n  }\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.7529296875,
          "content": "org.gradle.caching=true\norg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\norg.gradle.parallel=true\n\nVERSION_NAME=1.20.0-SNAPSHOT\n\nandroid.useAndroidX=true\nandroid.enableJetifier=false\nandroid.defaults.buildfeatures.buildconfig=false\nandroid.defaults.buildfeatures.aidl=false\nandroid.defaults.buildfeatures.renderscript=false\nandroid.defaults.buildfeatures.resvalues=false\nandroid.defaults.buildfeatures.shaders=false\n\nsystemProp.org.gradle.internal.http.socketTimeout=120000\n\nkotlin.native.ignoreDisabledTargets=true\nkotlin.mpp.androidSourceSetLayoutVersion=2\nkotlin.mpp.stability.nowarn=true\nkotlin.mpp.commonizerLogLevel=info\nkotlin.mpp.enableCInteropCommonization=true\n\n# Signals to our own plugin that we are building within the repo.\napp.cash.zipline.internal=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.5576171875,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.896484375,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n@rem SPDX-License-Identifier: Apache-2.0\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "kotlin-js-store",
          "type": "tree",
          "content": null
        },
        {
          "name": "lint.xml",
          "type": "blob",
          "size": 0.0625,
          "content": "<lint>\n  <issue id=\"UnknownNullness\" severity=\"error\"/>\n</lint>\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 0.443359375,
          "content": "rootProject.name = \"zipline-root\"\n\ninclude(\":zipline\")\ninclude(\":zipline-api-validator\")\ninclude(\":zipline-bytecode\")\ninclude(\":zipline-cli\")\ninclude(\":zipline-cryptography\")\ninclude(\":zipline-gradle-plugin\")\ninclude(\":zipline-kotlin-plugin\")\ninclude(\":zipline-kotlin-plugin-tests\")\ninclude(\":zipline-loader\")\ninclude(\":zipline-loader-testing\")\ninclude(\":zipline-profiler\")\ninclude(\":zipline-testing\")\n\nenableFeaturePreview(\"TYPESAFE_PROJECT_ACCESSORS\")\n"
        },
        {
          "name": "update_quickjs.sh",
          "type": "blob",
          "size": 0.7177734375,
          "content": "#!/bin/bash\n\nset -e\n\nSRC_LOCATION=zipline/native/quickjs\n\n# Download the things: provide a link to the release binary (e.g. https://bellard.org/quickjs/quickjs-2019-07-09.tar.xz)\nwget -O quickjs.tar.xz $1\n# Extract the release\nmkdir tmp\ntar xvfC quickjs.tar.xz tmp/\n# Clear target location\nrm $SRC_LOCATION/*\n# Copy over the sources we care about\ncp tmp/quickjs-*/cutils.* $SRC_LOCATION\ncp tmp/quickjs-*/libreg*.* $SRC_LOCATION\ncp tmp/quickjs-*/libuni*.* $SRC_LOCATION\ncp tmp/quickjs-*/list.h $SRC_LOCATION\ncp tmp/quickjs-*/quickjs.* $SRC_LOCATION\ncp tmp/quickjs-*/quickjs-atom.* $SRC_LOCATION\ncp tmp/quickjs-*/quickjs-opcode.* $SRC_LOCATION\ncp tmp/quickjs-*/VERSION $SRC_LOCATION\n# Cleanup after ourselves\nrm quickjs.tar.xz\nrm -r tmp\n"
        },
        {
          "name": "zipline-api-validator",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipline-bytecode",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipline-cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipline-cryptography",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipline-gradle-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipline-kotlin-plugin-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipline-kotlin-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipline-loader-testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipline-loader",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipline-profiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipline-testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipline",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}