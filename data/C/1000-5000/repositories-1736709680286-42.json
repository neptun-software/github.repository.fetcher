{
  "metadata": {
    "timestamp": 1736709680286,
    "page": 42,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Cisco-Talos/clamav",
      "stars": 4595,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 6.0224609375,
          "content": "---\nLanguage:        Cpp\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: None\nAlignConsecutiveAssignments:\n  Enabled:         true\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    true\nAlignConsecutiveBitFields:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    false\nAlignConsecutiveDeclarations:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    false\nAlignConsecutiveMacros:\n  Enabled:         false\n  AcrossEmptyLines: false\n  AcrossComments:  false\n  AlignCompound:   false\n  PadOperators:    false\nAlignEscapedNewlines: Left\nAlignOperands:   Align\nAlignTrailingComments:\n  Kind:            Always\n  OverEmptyLines:  0\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortEnumsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: WithoutElse\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: MultiLine\nAttributeMacros:\n  - __capability\nBinPackArguments: true\nBinPackParameters: true\nBitFieldColonSpacing: Both\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      true\n  AfterControlStatement: Never\n  AfterEnum:       false\n  AfterExternBlock: false\n  AfterFunction:   true\n  AfterNamespace:  true\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  BeforeLambdaBody: false\n  BeforeWhile:     false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakAfterAttributes: Never\nBreakAfterJavaFieldAnnotations: false\nBreakArrays:     true\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: Always\nBreakBeforeBraces: Linux\nBreakBeforeInlineASMColon: OnlyMultiline\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeColon\nBreakInheritanceList: BeforeColon\nBreakStringLiterals: true\nColumnLimit:     0\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: true\nDisableFormat:   false\nEmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: LogicalBlock\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIfMacros:\n  - KJ_IF_MAYBE\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '.*'\n    Priority:        1\n    SortPriority:    0\n    CaseSensitive:   false\nIncludeIsMainRegex: '(Test)?$'\nIncludeIsMainSourceRegex: ''\nIndentAccessModifiers: false\nIndentCaseBlocks: false\nIndentCaseLabels: true\nIndentExternBlock: AfterExternBlock\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentRequiresClause: true\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nInsertBraces:    false\nInsertNewlineAtEOF: false\nInsertTrailingCommas: None\nIntegerLiteralSeparator:\n  Binary:          0\n  BinaryMinDigits: 0\n  Decimal:         0\n  DecimalMinDigits: 0\n  Hex:             0\n  HexMinDigits:    0\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nLambdaBodyIndentation: Signature\nLineEnding:      DeriveLF\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPackConstructorInitializers: BinPack\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyIndentedWhitespace: 0\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Right\nPPIndentWidth:   -1\nQualifierAlignment: Leave\nReferenceAlignment: Pointer\nReflowComments:  true\nRemoveBracesLLVM: false\nRemoveSemicolon: false\nRequiresClausePosition: OwnLine\nRequiresExpressionIndentation: OuterScope\nSeparateDefinitionBlocks: Leave\nShortNamespaceLines: 1\nSortIncludes:    Never\nSortJavaStaticImport: Before\nSortUsingDeclarations: LexicographicNumeric\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeParensOptions:\n  AfterControlStatements: true\n  AfterForeachMacros: true\n  AfterFunctionDefinitionName: false\n  AfterFunctionDeclarationName: false\n  AfterIfMacros:   true\n  AfterOverloadedOperator: false\n  AfterRequiresInClause: false\n  AfterRequiresInExpression: false\n  BeforeNonEmptyParentheses: false\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  Never\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInLineCommentPrefix:\n  Minimum:         1\n  Maximum:         -1\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Latest\nStatementAttributeLikeMacros:\n  - Q_EMIT\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        8\nUseTab:          Never\nWhitespaceSensitiveMacros:\n  - BOOST_PP_STRINGIZE\n  - CF_SWIFT_NAME\n  - NS_SWIFT_NAME\n  - PP_STRINGIZE\n  - STRINGIZE\n...\n\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0439453125,
          "content": "build/\nexamples/\nINSTALL*\nJenkinsfile\nwin32/\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.451171875,
          "content": "# Handle line endings automatically for files detected as text\n# and leave all files detected as binary untouched.\n* text=auto\n\n#\n# The above will handle all files NOT found below\n#\n\n# Files that should be left untouched (binary is macro for -text -diff)\n*.ref           binary\n\n# Preserve signature for .cargo/vendor files (from the tarabll)\n+/.cargo/vendor binary\n\n#\n# Exclude files from exporting\n#\n.gitattributes  export-ignore\n.gitignore      export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.103515625,
          "content": "# CMake\nCMakeLists.txt.user\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\n\n# Python\n__pycache__/\n*.py[cod]\n*$py.class\n\n# Ninja\n.ninja_deps\n.ninja_log\n\n# C Prerequisites\n*.d\n\n# C Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# C Linker output\n*.ilk\n*.exp\n\n# C Precompiled Headers\n*.gch\n*.pch\n\n# C Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# C Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# C Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# C Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n# C Kernel Module Compile Results\n*.mod*\n*.cmd\n.tmp_versions/\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf\n\n# Editor save files\n*~\n\n# Vim Swap\n[._]*.s[a-v][a-z]\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Vim Session\nSession.vim\n\n# Vim Temporary\n.netrwhist\n*~\n# Vim Auto-generated tag files\ntags\n# Vim Persistent undo\n[._]*.un~\n\n# VScode config\n.vscode\n\n# Build directories\ninstall/*\nbuild/*\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# gcov profiling files\n*.gcda\n*.gcno\n\n# ClamAV build system generated files\nClamAV.VC.db\nlibclamav.pc\nclamav-config.h\nplatform.h\n/target.h\nlibclamav/c++/FileCheck\nlibclamav/c++/count\nlibclamav/c++/clamavcxx-config.h\nlibclamav/c++/llc\nlibclamav/c++/lli\nlibclamav/c++/llvm-as\nlibclamav/c++/llvm-dis\nlibclamav/c++/llvm/Makefile.config\nlibclamav/c++/llvm/Debug/\nlibclamav/c++/llvm/Release\nlibclamav/c++/llvm/docs/doxygen.cfg\nlibclamav/c++/llvm/include/llvm/Config/*.def\nlibclamav/c++/llvm/include/llvm/Config/config.h\nlibclamav/c++/llvm/include/llvm/System/DataTypes.h\nlibclamav/c++/llvm/llvm.spec\nlibclamav/c++/llvm/mklib\nlibclamav/c++/llvm/test/*/Output\nlibclamav/c++/llvm/test/*/.dir\nlibclamav/c++/llvm/test/*/*/Output\nlibclamav/c++/llvm/test/*/*/*/Output\nlibclamav/c++/llvm/test/lit.site.cfg\nlibclamav/c++/llvm/test/Unit/lit.site.cfg\nlibclamav/c++/llvm/test/site.exp\nlibclamav/c++/llvm/tools/llvm-config/llvm-config.in\nlibclamav/c++/llvm/utils/lit/*.pyc\nlibclamav/c++/llvmunittest_ADT\nlibclamav/c++/llvmunittest_ExecutionEngine\nlibclamav/c++/llvmunittest_JIT\nlibclamav/c++/llvmunittest_Support\nlibclamav/c++/llvmunittest_VMCore\nlibclamav/c++/not\nlibclamav/c++/tblgen\nlibclamav/c++/llvm/tools/llvmc/plugins/Base/Base.td\nwin32/res/common.rc\n\n# Generated by Cargo\n# will have compiled files and executables\ndebug/\ntarget/\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 44.1435546875,
          "content": "\n# Copyright (C) 2019-2024 Cisco Systems, Inc. and/or its affiliates. All rights reserved.\n\nif(WIN32)\n    cmake_minimum_required( VERSION 3.16 ) # For file(GET_RUNTIME_DEPENDENCIES)\nelse()\n    cmake_minimum_required( VERSION 3.14 )\nendif()\n\nset(CMAKE_C_STANDARD 90)\nset(CMAKE_C_STANDARD_REQUIRED ON)\n# CMAKE_CXX_STANDARD not set because we may need to match the compiler used to build LLVM.\n# There's probably a good chance this issue will go away if using modern LLVM versions.\ncmake_policy(SET CMP0087 NEW) # support generator expressions in install(CODE) and install(SCRIPT)\n\n# Change this on a release:\n#  During active development: set(VERSION_SUFFIX \"-devel-${TODAY}\")\n#  For beta:                  set(VERSION_SUFFIX \"-beta\")\n#  For release candidate:     set(VERSION_SUFFIX \"-rc\")\n#  For release:               set(VERSION_SUFFIX \"\")\nstring(TIMESTAMP TODAY \"%Y%m%d\")\nset(VERSION_SUFFIX \"-devel-${TODAY}\")\n\nproject( ClamAV\n         VERSION \"1.5.0\"\n         DESCRIPTION \"ClamAV open source email, web, and end-point anti-virus toolkit.\" )\n\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\" ${CMAKE_MODULE_PATH})\ninclude(Version)\n\nset(PACKAGE_NAME      \"${PROJECT_NAME}\")\nset(PACKAGE_VERSION   \"${PROJECT_VERSION}\")\nset(PACKAGE_STRING    \"${PROJECT_NAME} ${PROJECT_VERSION}${VERSION_SUFFIX}\")\nset(PACKAGE_BUGREPORT \"https://github.com/Cisco-Talos/clamav/issues\")\nset(PACKAGE_URL       \"https://www.clamav.net/\")\nHexVersion(PACKAGE_VERSION_NUM ${PROJECT_VERSION_MAJOR} ${PROJECT_VERSION_MINOR} ${PROJECT_VERSION_PATCH})\n\n# libtool library versioning rules: http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\nset(LIBCLAMAV_CURRENT  12)\nset(LIBCLAMAV_REVISION 3)\nset(LIBCLAMAV_AGE      0)\n\nmath(EXPR LIBCLAMAV_SOVERSION \"${LIBCLAMAV_CURRENT} - ${LIBCLAMAV_AGE}\")\nset(LIBCLAMAV_VERSION \"${LIBCLAMAV_SOVERSION}.${LIBCLAMAV_AGE}.${LIBCLAMAV_REVISION}\")\nHexVersion(LIBCLAMAV_VERSION_NUM ${LIBCLAMAV_CURRENT} ${LIBCLAMAV_REVISION} ${LIBCLAMAV_AGE})\n\nset(LIBFRESHCLAM_CURRENT  3)\nset(LIBFRESHCLAM_REVISION 2)\nset(LIBFRESHCLAM_AGE      0)\n\nmath(EXPR LIBFRESHCLAM_SOVERSION \"${LIBFRESHCLAM_CURRENT} - ${LIBFRESHCLAM_AGE}\")\nset(LIBFRESHCLAM_VERSION \"${LIBFRESHCLAM_SOVERSION}.${LIBFRESHCLAM_AGE}.${LIBFRESHCLAM_REVISION}\")\nHexVersion(LIBFRESHCLAM_VERSION_NUM ${LIBFRESHCLAM_CURRENT} ${LIBFRESHCLAM_REVISION} ${LIBFRESHCLAM_AGE})\n\nset(GENERATE_WARNING \"WARNING: This file was generated by CMake. Do not edit!\")\n\n#\n# Define C_LINUX and C_BSD because CMake only defines UNIX, APPLE, WIN32, MSVC\n#\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    set(C_LINUX 1)\nelseif(APPLE OR CMAKE_SYSTEM_NAME MATCHES \"BSD\")\n    set(C_BSD 1)\nelseif(CMAKE_SYSTEM_NAME MATCHES \"AIX\")\n    set(AIX TRUE)\nendif()\n\n# Git optionally used to add commit info into build to differentiate in bug reports.\nfind_package(Git)\nif(Git_FOUND)\n    # Store git description into variable\n    execute_process(COMMAND ${GIT_EXECUTABLE} describe --tags --always\n        OUTPUT_VARIABLE REPO_VERSION ERROR_QUIET)\n    if(\"${REPO_VERSION}\" MATCHES \"\")\n        unset(REPO_VERSION)\n    else()\n        string(STRIP ${REPO_VERSION} REPO_VERSION)\n    endif()\nendif()\n\n# Enable use of pkg-config to find dependencies.\nfind_package(PkgConfig QUIET)\n\n#\n# Load Build Options\n#\n\n# CMake Option default values:\nset(MAINTAINER_MODE_DEFAULT         OFF)\nset(ENABLE_APP_DEFAULT              ON)\nif(WIN32 OR APPLE)\n    set(ENABLE_MILTER_DEFAULT       OFF)\nelse()\n    set(ENABLE_MILTER_DEFAULT       ON)\nendif()\nif(C_LINUX)\n    set(ENABLE_CLAMONACC_DEFAULT    ON)\nelse()\n    set(ENABLE_CLAMONACC_DEFAULT    OFF)\nendif()\nset(ENABLE_EXAMPLES_DEFAULT         OFF)\nset(ENABLE_TESTS_DEFAULT            ON)\nif(WIN32)\n    set(ENABLE_MAN_PAGES_DEFAULT    OFF)\nelse()\n    set(ENABLE_MAN_PAGES_DEFAULT    ON)\nendif()\nset(ENABLE_DOXYGEN_DEFAULT          OFF)\nset(ENABLE_UNRAR_DEFAULT            ON)\nset(ENABLE_SYSTEMD_DEFAULT          ON)\n\n# See CMakeOptions.cmake for additional options.\ninclude(CMakeOptions.cmake)\n\n# Set build type to RelWithDebInfo if not specified.\n# This must be done before pulling in the Rust module\n# or else the default build will be Debug for Rust stuffs.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING \"Choose the build type\" FORCE)\n\n    # Include \"None\" as option to disable any additional (optimization) flags,\n    # relying on just CMAKE_C_FLAGS and CMAKE_CXX_FLAGS (which are empty by\n    # default). These strings are presented in cmake-gui.\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n        \"None\" \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n\n#\n# Find Build Tools\n#\nif(MAINTAINER_MODE)\n    # Bison, Flex required to build Yara module for libclamav.\n    find_package(BISON REQUIRED)\n    find_package(FLEX  REQUIRED)\n\n    # TODO: Gperf required to generate JS-normalization code.\n    # find_package(GPERF REQUIRED)\nendif()\nfind_package(Rust REQUIRED)\n\nif(ENABLE_FUZZ)\n    # We'd like the fuzz targets to be statically linked\n    set(ENABLE_STATIC_LIB       ON)\n    set(ENABLE_SHARED_LIB       OFF)\n    set(ENABLE_LIBCLAMAV_ONLY   ON)\n    set(ENABLE_TESTS            OFF)\n    set(OPTIMIZE                OFF)\n    set(ENABLE_SYSTEMD          OFF)\n    set(HAVE_MMAP               OFF)\n\n    if(NOT DEFINED ENV{FUZZING_ENGINE})\n        # If you're not building in an oss-fuzz docker environment, you can build the fuzz targets by setting:\n        # bash:  export CC=`which clang` && export CXX=`which clang++` && export SANITIZER=address/undefined/memory\n        # fish:  export CC=(which clang) && export CXX=(which clang++) && export SANITIZER=address/undefined/memory\n        set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS} -fsanitize=$ENV{SANITIZER},fuzzer-no-link -fsanitize-coverage=edge,indirect-calls\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=$ENV{SANITIZER},fuzzer-no-link -fsanitize-coverage=edge,indirect-calls\")\n    endif()\nendif()\n\nif(ENABLE_STATIC_LIB AND NOT ENABLE_SHARED_LIB AND ENABLE_UNRAR)\n    # When building everything static, link in libunrar.\n    set(UNRAR_LINKED 1)\nendif()\n\nif(ENABLE_LIBCLAMAV_ONLY AND (ENABLE_APP OR ENABLE_EXAMPLES))\n    # Remember when disabled options are disabled for later diagnostics.\n    set(ENABLE_LIB_ONLY_DISABLED_OTHERS 1)\nelse()\n    set(ENABLE_LIB_ONLY_DISABLED_OTHERS 0)\nendif()\nif(ENABLE_LIBCLAMAV_ONLY)\n    set(ENABLE_APP                  OFF)\n    set(ENABLE_EXAMPLES             OFF)\nendif()\n\n#\n# Set RPATH for custom install prefixes\n#\nif(APPLE AND NOT DO_NOT_SET_RPATH)\n    set(CMAKE_MACOSX_RPATH 1)\nendif()\n\ninclude(GNUInstallDirs)\n\nif (NOT DEFINED CMAKE_INSTALL_RPATH AND NOT DO_NOT_SET_RPATH)\n    if(CMAKE_INSTALL_FULL_LIBDIR)\n        set(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_FULL_LIBDIR}\")\n    else()\n        set(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\n    endif()\nendif()\n\nif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n  set(USING_CLANG ON)\nelse()\n  set(USING_CLANG OFF)\nendif()\n\nif(C_LINUX)\n    if(CMAKE_COMPILER_IS_GNUCXX OR USING_CLANG)\n        # Set _GNU_SOURCE for O_LARGEFILE, O_CLOEXEC, O_DIRECTORY, O_NOFOLLOW, etc flags on older systems\n        # (pre POSIX.1-2008: glibc 2.11 and earlier). #4042\n        set(_GNU_SOURCE 1)\n    endif()\nendif()\n\n#\n# Use the `lib` prefix on Windows, to match previous ClamAV build\n#\nif(LLVM_FOUND)\n    list(JOIN LLVM_LIBRARIES \",\" LLVM_LIBS)\n    list(JOIN LLVM_LIBRARY_DIRS \",\" LLVM_DIRS)\nendif()\n\nif(WIN32)\n    set(CMAKE_SHARED_LIBRARY_PREFIX \"lib\")\n    set(CMAKE_STATIC_LIBRARY_PREFIX \"lib\")\nendif()\n\n#\n# Find Test dependencies\n#\nif(ENABLE_TESTS)\n    # Used for the libclamav unit test framework\n    find_package(Libcheck REQUIRED)\n\n    # Used to generate the test files and for the application feature test framework\n    # In distros that support multiple implementations of python it is helpful to specify the impl to use\n    if(DEFINED PYTHON_FIND_VERSION)\n        find_package(Python3 EXACT ${PYTHON_FIND_VERSION} REQUIRED)\n    else()\n        find_package(Python3 REQUIRED)\n        # Not requesting a specific python impl; try using pytest from the PATH\n        execute_process(\n            COMMAND pytest --version\n            RESULT_VARIABLE PYTEST_EXIT_CODE\n            ERROR_QUIET OUTPUT_QUIET\n        )\n\n        if(${PYTEST_EXIT_CODE} EQUAL 0)\n            # pytest found in the path.\n            set(PythonTest_COMMAND \"pytest;-v\")\n        endif()\n    endif()\n\n    if(\"${PythonTest_COMMAND}\" STREQUAL \"\")\n        # Not in the path or specified a python impl; try using: python3 -m pytest\n        execute_process(\n            COMMAND ${Python3_EXECUTABLE} -m pytest --version\n            RESULT_VARIABLE PYTEST_MODULE_EXIT_CODE\n            ERROR_QUIET OUTPUT_QUIET\n        )\n\n        if(${PYTEST_MODULE_EXIT_CODE} EQUAL 0)\n            # pytest isn't in the path, but the Python 3 we found has it.\n            set(PythonTest_COMMAND \"${Python3_EXECUTABLE};-m;pytest;-v\")\n        else()\n            # pytest couldn't be found, verify that we can at least use: python3 -m unittest\n            execute_process(\n                COMMAND ${Python3_EXECUTABLE} -m unittest --help\n                RESULT_VARIABLE UNITTEST_MODULE_EXIT_CODE\n                ERROR_QUIET OUTPUT_QUIET\n            )\n\n            if(${UNITTEST_MODULE_EXIT_CODE} EQUAL 0)\n                # No pytest :-(, but we'll get by with unittest\n                message(\"Python 3 package 'pytest' is not installed for ${Python3_EXECUTABLE} and is not available in your PATH.\")\n                message(\"Failed unit tests will be easier to read if you install pytest.\")\n                message(\"Eg:  python3 -m pip install --user pytest\")\n\n                set(PythonTest_COMMAND \"${Python3_EXECUTABLE};-m;unittest;--verbose\")\n            else()\n                # No unittest either!\n                # Some weird Python installations do exist that lack standard modules like unittest.\n                # Let's make sure these folks know the Python 3 install we found won't cut it.\n                message(\"Python 3 found: ${Python3_EXECUTABLE}, but it is missing the unittest module (weird!).\")\n                message(FATAL_ERROR \"The tests won't work with this Python installation. You can disable the tests by reconfiguring with: -D ENABLE_TESTS=OFF\")\n            endif()\n        endif()\n    endif()\n\n    # Check for valgrind. If it exists, we'll enable extra tests that use valgrind.\n    if(C_LINUX)\n        find_package(Valgrind)\n    endif()\nendif()\n\n#\n# Configure CPack\n#  - for installers\n#  - for source tarball\n#\n\nif (WIN32)\n    find_package(PThreadW32)\n    set(HAVE_PTHREAD_H 1)\n    set(_REENTRANT 1)\n    set(CL_THREAD_SAFE 1)\nelse()\n    set(CMAKE_THREAD_PREFER_PTHREAD 1)\n    find_package(Threads)\n    if(Threads_FOUND AND CMAKE_USE_PTHREADS_INIT)\n        set(HAVE_PTHREAD_H 1)\n        set(_REENTRANT 1)\n        set(CL_THREAD_SAFE 1)\n    endif()\nendif()\n\n#\n# Configure CPack\n#  - for installers\n#  - for source tarball\n#\n\nset(CPACK_PACKAGE_NAME ${PACKAGE_STRING})\n\n#set(CPACK_PACKAGE_ICON ${PROJECT_SOURCE_DIR}/logo.png)\n#set(CPACK_PACKAGE_RELOCATABLE TRUE)\nset(CPACK_STRIP_FILES TRUE)\n\nset(CPACK_PACKAGE_VERSION_MAJOR ${CLAMAV_VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR ${CLAMAV_VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH ${CLAMAV_VERSION_PATCH})\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${PROJECT_DESCRIPTION})\nset(CPACK_PACKAGE_CONTACT https://www.clamav.net/)\n\n# point to readme and license files\nset(CPACK_RESOURCE_FILE_README ${PROJECT_SOURCE_DIR}/README.md)\nset(CPACK_RESOURCE_FILE_LICENSE ${PROJECT_SOURCE_DIR}/COPYING.txt)\n\nset(CPACK_PACKAGE_FILE_NAME clamav-${PROJECT_VERSION}${VERSION_SUFFIX})\n\nset(CPACK_SOURCE_GENERATOR \"TGZ\")\nset(CPACK_SOURCE_PACKAGE_FILE_NAME ${CPACK_PACKAGE_FILE_NAME})\nset(CPACK_SOURCE_IGNORE_FILES \"\\\\.git/\" \".*~$\" \"^${CMAKE_BINARY_DIR}\")\nset(CPACK_VERBATIM_VARIABLES YES)\n\nif (WIN32)\n    set(CMAKE_INSTALL_SYSTEM_RUNTIME_DESTINATION .)\n    include(InstallRequiredSystemLibraries)\n\n    set(CPACK_GENERATOR                  \"ZIP;WIX\")\n    set(CPACK_PACKAGE_VENDOR             \"Cisco Systems, Inc.\")\n    set(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_FILE_NAME}.win.${CMAKE_VS_PLATFORM_NAME})\n\n    NumberToHex(${PROJECT_VERSION_MAJOR} HEX_MAJOR)\n    NumberToHex(${PROJECT_VERSION_MINOR} HEX_MINOR)\n    NumberToHex(${PROJECT_VERSION_PATCH} HEX_PATCH)\n    SET(CPACK_WIX_PRODUCT_GUID           \"D9F136C1-3691-47E3-9079-4FE9C9${HEX_MAJOR}${HEX_MINOR}${HEX_PATCH}\")\n    SET(CPACK_WIX_UPGRADE_GUID           \"D9F136C1-3691-47E3-9079-4FE9C9${HEX_MAJOR}0000\")\n\n    SET(CPACK_WIX_PRODUCT_ICON           ${CMAKE_CURRENT_SOURCE_DIR}/win32/res/clam.ico)\n    SET(CPACK_WIX_UI_BANNER              ${CMAKE_CURRENT_SOURCE_DIR}/win32/wix_ui_banner.bmp)\n    SET(CPACK_WIX_UI_DIALOG              ${CMAKE_CURRENT_SOURCE_DIR}/win32/wix_ui_dialog.bmp)\n    SET(CPACK_WIX_CMAKE_PACKAGE_REGISTRY ClamAV)\n    set(CPACK_PACKAGE_INSTALL_DIRECTORY  \"ClamAV\")\n\n    install(\n        FILES\n            ${CMAKE_CURRENT_SOURCE_DIR}/NEWS.md\n            ${CMAKE_CURRENT_SOURCE_DIR}/README.md\n        DESTINATION \".\")\n\nelseif(APPLE)\n    set(CPACK_PACKAGE_NAME      ClamAV)\n    set(CPACK_GENERATOR         productbuild)\n    set(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_FILE_NAME}.macos.universal)\n    set(CPACK_PACKAGE_VENDOR    \"cisco\")  # For Apple, creates short name com.cisco.clamav.xxx in pkgutil\n\n    # productbuild requires components or it won't add anything to the PKG\n    set(CPACK_COMPONENT_LIBRARIES_DISPLAY_NAME \"Libraries\")\n    set(CPACK_COMPONENT_LIBRARIES_DESCRIPTION \"The ClamAV libraries including the header files for C/C++ development.\")\n    set(CPACK_COMPONENT_DOCUMENTATION_DISPLAY_NAME \"Documentation\")\n    set(CPACK_COMPONENT_DOCUMENTATION_DESCRIPTION \"Manpages and HTML documentation.\")\n    set(CPACK_COMPONENT_PROGRAMS_DISPLAY_NAME \"Programs\")\n    set(CPACK_COMPONENT_PROGRAMS_DESCRIPTION \"The ClamAV toolkit.\")\n\n    # dependencies between components\n    set(CPACK_COMPONENT_DOCUMENTATION_DEPENDS libraries)\n    set(CPACK_COMPONENT_PROGRAMS_DEPENDS libraries)\n    set(CPACK_COMPONENT_LIBRARIES_REQUIRED ON) # always install the libs\n    set(CPACK_COMPONENTS_ALL libraries documentation programs)\n\n    if(CLAMAV_SIGN_FILE)\n        # This tells Xcode's signing phase to pretend that the binary was signed by the linker.\n        # Then install_name_tool is willing to revise the ad-hoc signature.\n        # See: https://gitlab.kitware.com/cmake/cmake/-/issues/21854#note_907691\n        set(CMAKE_XCODE_ATTRIBUTE_OTHER_CODE_SIGN_FLAGS \"-o linker-signed\")\n\n        # Stripping the files will invalidate the signatures.\n        set(CPACK_STRIP_FILES FALSE)\n\n        # Convert NEWS.md to HTML to match Apple productbuild requirements.\n        # Not in the path, try using: python3 -m pytest\n        execute_process(\n            COMMAND ${Python3_EXECUTABLE} -m markdown --version\n            RESULT_VARIABLE MARKDOWN_MODULE_EXIT_CODE\n            ERROR_QUIET OUTPUT_QUIET\n        )\n        if(${MARKDOWN_MODULE_EXIT_CODE} EQUAL 0)\n            # The markdown module is installed, we can do the conversion.\n            execute_process(\n                COMMAND echo \"<html><body>\"\n                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/prefix.html)\n            execute_process(\n                COMMAND ${Python3_EXECUTABLE} -m markdown ${CMAKE_CURRENT_SOURCE_DIR}/NEWS.md\n                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/body.html)\n            execute_process(\n                COMMAND echo \"</html></body>\"\n                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/suffix.html)\n            execute_process(\n                COMMAND cat ${CMAKE_CURRENT_BINARY_DIR}/prefix.html\n                            ${CMAKE_CURRENT_BINARY_DIR}/body.html\n                            ${CMAKE_CURRENT_BINARY_DIR}/suffix.html\n                OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/NEWS.html)\n\n            set(CPACK_RESOURCE_FILE_README ${PROJECT_BINARY_DIR}/NEWS.html)\n        else()\n            message(\"Failed to detect the Python 3 'markdown' package.\")\n            message(FATAL_ERROR \"Try running 'pip3 install --user markdown' and then try again.\")\n        endif()\n    endif()\n\nelseif(C_BSD)\n    # User must specify `-G FreeBSD` when building FreeBSD packages\n    # Disclaimer: doesn't seem to actually exist, despite being in the documentation.\n    set(CPACK_PACKAGE_NAME             clamav)\n    set(CPACK_PACKAGE_FILE_NAME        ${CPACK_PACKAGE_FILE_NAME}.freebsd.${CMAKE_SYSTEM_PROCESSOR})\n\n    set(CPACK_FREEBSD_PACKAGE_LICENSE \"GPLv2\")\n    set(CPACK_FREEBSD_PACKAGE_MAINTAINER \"https://www.clamav.net/\")\n\nelse()\n    # User must specify `-G DEB` or `-G RPM` when building Linux packages\n    set(CPACK_PACKAGE_NAME             clamav)\n    set(CPACK_PACKAGE_VERSION          ${PROJECT_VERSION}${VERSION_SUFFIX})\n    set(CPACK_PACKAGE_FILE_NAME        ${CPACK_PACKAGE_FILE_NAME}.linux.${CMAKE_SYSTEM_PROCESSOR})\n\n    set(CPACK_RPM_PACKAGE_LICENSE \"GPLv2\")\n    set(CPACK_RPM_PACKAGE_AUTOREQ \" no\")\n    set(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION \"/usr/sbin\"\n        \"/usr/local\"\n        \"/usr/local/bin\"\n        \"/usr/local/etc\"\n        \"/usr/local/include\"\n        \"/usr/local/lib\"\n        \"/usr/local/sbin\"\n        \"/usr/local/share\"\n        \"/usr/local/share/man\"\n        \"/usr/local/share/man/man1\"\n        \"/usr/local/share/man/man5\"\n        \"/usr/local/share/man/man8\"\n    )\nendif()\n\n# Including CPack must be the very last CPack thing we do.\ninclude(CPack)\n\n# libclamav efficacy dependencies\nfind_package(OpenSSL REQUIRED)\n\nfind_package(ZLIB REQUIRED)\n\nfind_package(BZip2 REQUIRED)\n\n# Disable CMAKE_FIND_PACKAGE_PREFER_CONFIG, temporarily, because\n# we don't presently support the using libxml2's Config.cmake\nset(PACKAGE_PREFER_CONFIG_BAK ${CMAKE_FIND_PACKAGE_PREFER_CONFIG})\nset(CMAKE_FIND_PACKAGE_PREFER_CONFIG FALSE)\n\nfind_package(LibXml2 REQUIRED)\n\n# Restore the requested CMAKE_FIND_PACKAGE_PREFER_CONFIG setting\nset(CMAKE_FIND_PACKAGE_PREFER_CONFIG ${PACKAGE_PREFER_CONFIG_BAK})\n\nfind_package(PCRE2 REQUIRED)\n\n# libclamav feature dependencies\nif(NOT WIN32)\n    find_package(Iconv REQUIRED)\n    # Set variable required by libclamav to use iconv\n    set(HAVE_ICONV 1)\nendif()\n\nif(ENABLE_JSON_SHARED)\n    set(JSONC_USE_STATIC OFF)\nelse()\n    set(JSONC_USE_STATIC ON)\nendif()\nfind_package(JSONC REQUIRED)\n\nset(LLVM_MAX_VER \"13\")\nset(LLVM_MIN_VER \"8\")\n\nstring (TOLOWER ${BYTECODE_RUNTIME} bytecodeRuntime)\nif(${bytecodeRuntime} STREQUAL \"llvm\")\n    if(DEFINED LLVM_ROOT_DIR AND DEFINED LLVM_FIND_VERSION)\n        find_package(LLVM EXACT ${LLVM_FIND_VERSION} REQUIRED HINTS ${LLVM_ROOT_DIR})\n    elseif(DEFINED LLVM_ROOT_DIR)\n        find_package(LLVM REQUIRED HINTS ${LLVM_ROOT_DIR})\n    elseif(DEFINED LLVM_FIND_VERSION)\n        find_package(LLVM EXACT ${LLVM_FIND_VERSION} REQUIRED)\n    else()\n        set (LLVM_FIND_VERSION ${LLVM_MIN_VER})\n        find_package(LLVM REQUIRED)\n    endif()\n    if(LLVM_FOUND)\n        if (LLVM_AVAILABLE_LIBS)\n            message(STATUS \"LLVM found using LLVMConfig.cmake\")\n            set(LLVM_LIBRARIES ${LLVM_AVAILABLE_LIBS})\n        else()\n            message(STATUS \"LLVM found using FindLLVM.cmake\")\n            set(LLVM_PACKAGE_VERSION ${LLVM_VERSION_STRING})\n\n            if (${LLVM_VERSION_STRING} VERSION_GREATER_EQUAL \"9.0.0\" AND ${LLVM_VERSION_STRING} VERSION_LESS \"10.0.0\")\n                set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DNDEBUG\")\n            endif()\n        endif()\n\n        math(EXPR TOO_HIGH_VERSION \"${LLVM_MAX_VER} + 1\" OUTPUT_FORMAT DECIMAL)\n\n        if(${LLVM_PACKAGE_VERSION} VERSION_LESS ${LLVM_MIN_VER})\n            message(FATAL_ERROR \"LLVM version ${LLVM_PACKAGE_VERSION} is too old\")\n        elseif (${LLVM_PACKAGE_VERSION} VERSION_GREATER_EQUAL ${TOO_HIGH_VERSION} )\n            message(FATAL_ERROR \"LLVM version ${LLVM_PACKAGE_VERSION} is too new\")\n        else()\n            message(STATUS \"LLVM version ${LLVM_PACKAGE_VERSION} found\")\n        endif()\n\n        # Set variable required by libclamav to use llvm instead of interpreter\n        set(LLVM_VERSION ${LLVM_VERSION_MAJOR}${LLVM_VERSION_MINOR})\n    endif()\nendif()\n\nif(APPLE)\n    find_library(APPLE_CORE_FOUNDATION CoreFoundation)\n    if (NOT APPLE_CORE_FOUNDATION)\n        message(FATAL_ERROR \"Apple CoreFoundation framework not found\")\n    endif()\n    find_library(APPLE_SECURITY Security)\n    if (NOT APPLE_SECURITY)\n        message(FATAL_ERROR \"Apple Security framework not found\")\n    endif()\nendif()\n\n# libfreshclam & application dependencies\nif(NOT ENABLE_LIBCLAMAV_ONLY)\n    find_package(CURL REQUIRED)\n\n    if(ENABLE_APP)\n        find_package(CURSES REQUIRED)\n\n        if(NOT WIN32 AND ENABLE_MILTER)\n            find_package(Milter REQUIRED)\n        endif()\n\n        if(C_LINUX AND ENABLE_SYSTEMD)\n            find_package(SYSTEMD)\n            if(SYSTEMD_FOUND)\n                set(HAVE_SYSTEMD 1)\n            endif()\n        endif()\n\n    endif()\nendif()\n\n\n# Do not disable assertions based on CMAKE_BUILD_TYPE.\nforeach(_build_type \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\n    foreach(_lang C CXX)\n        string(TOUPPER \"CMAKE_${_lang}_FLAGS_${_build_type}\" _var)\n        string(REGEX REPLACE \"(^|)[/-]D *NDEBUG($|)\" \" \" ${_var} \"${${_var}}\")\n    endforeach()\nendforeach()\n\n# Disable optimizations if OPTIMIZE=OFF\nif(NOT OPTIMIZE)\n    # Get rid of any previous optimization flag settings...\n    string(REGEX REPLACE \"(\\-O[011123456789])\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    string(REGEX REPLACE \"(\\-O[011123456789])\" \"\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n\n    # ...And substitute our own.\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O0\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -O0\")\nendif()\n\n# Support the latest c++ standard available.\ninclude(ExtractValidFlags)\nforeach(_cxx1x_flag -std=c++14 -std=c++11)\n    extract_valid_cxx_flags(_cxx1x_flag_supported ${_cxx1x_flag})\n    if(_cxx1x_flag_supported)\n        set(CXX1XCXXFLAGS ${_cxx1x_flag})\n        break()\n    endif()\nendforeach()\n\n# Always use '-fPIC'/'-fPIE' option if OS is not Haiku.\nif(NOT HAIKU)\n    set(CMAKE_POSITION_INDEPENDENT_CODE ON)\nendif()\n\n# Checks for header files.\ninclude(CheckIncludeFile)\ncheck_include_file(\"arpa/inet.h\"        HAVE_ARPA_INET_H)\ncheck_include_file(\"fcntl.h\"            HAVE_FCNTL_H)\ncheck_include_file(\"grp.h\"              HAVE_GRP_H)\ncheck_include_file(\"limits.h\"           HAVE_LIMITS_H)\ncheck_include_file(\"malloc.h\"           HAVE_MALLOC_H)\ncheck_include_file(\"netdb.h\"            HAVE_NETDB_H)\ncheck_include_file(\"netinet/in.h\"       HAVE_NETINET_IN_H)\ncheck_include_file(\"poll.h\"             HAVE_POLL_H)\ncheck_include_file(\"pwd.h\"              HAVE_PWD_H)\ncheck_include_file(\"stdbool.h\"          HAVE_STDBOOL_H)\ncheck_include_file(\"stdlib.h\"           HAVE_STDLIB_H)\ncheck_include_file(\"string.h\"           HAVE_STRING_H)\ncheck_include_file(\"strings.h\"          HAVE_STRINGS_H)\ncheck_include_file(\"sys/cdefs.h\"        HAVE_SYS_CDEFS_H)\ncheck_include_file(\"sys/dl.h\"           HAVE_SYS_DL_H)\ncheck_include_file(\"sys/fileio.h\"       HAVE_SYS_FILIO_H)\ncheck_include_file(\"sys/mman.h\"         HAVE_SYS_MMAN_H)\ncheck_include_file(\"sys/param.h\"        HAVE_SYS_PARAM_H)\ncheck_include_file(\"sys/queue.h\"        HAVE_SYS_QUEUE_H)\ncheck_include_file(\"sys/select.h\"       HAVE_SYS_SELECT_H)\ncheck_include_file(\"sys/socket.h\"       HAVE_SYS_SOCKET_H)\ncheck_include_file(\"sys/stat.h\"         HAVE_SYS_STAT_H)\ncheck_include_file(\"sys/time.h\"         HAVE_SYS_TIME_H)\ncheck_include_file(\"sys/times.h\"        HAVE_SYS_TIMES_H)\ncheck_include_file(\"sys/uio.h\"          HAVE_SYS_UIO_H)\ncheck_include_file(\"syslog.h\"           USE_SYSLOG)\ncheck_include_file(\"termios.h\"          HAVE_TERMIOS_H)\ncheck_include_file(\"time.h\"             HAVE_TIME_H)\ncheck_include_file(\"unistd.h\"           HAVE_UNISTD_H)\ncheck_include_file(\"sys/fanotify.h\"     HAVE_SYS_FANOTIFY_H)\n\nif(WIN32)\n    set(HAVE_RESOLV_H 1)\n    set(HAVE_DIRENT_H 1)\n    set(HAVE_DLFCN_H 1)\nelse()\n    if(APPLE)\n        set(BIND_8_COMPAT 1)\n    endif()\n    check_include_file(\"resolv.h\"       HAVE_RESOLV_H)\n    if(CMAKE_SYSTEM_NAME STREQUAL FreeBSD AND EXISTS /usr/include/resolv.h)\n        # This hack because check_include_file() can't find \"resolv.h\" on FreeBSD.\n        set(HAVE_RESOLV_H 1)\n    endif()\n    check_include_file(\"dirent.h\"       HAVE_DIRENT_H)\n    check_include_file(\"dlfcn.h\"        HAVE_DLFCN_H)\nendif()\n\n# int-types variants\ncheck_include_file(\"inttypes.h\"         HAVE_INTTYPES_H)\ncheck_include_file(\"sys/inttypes.h\"     HAVE_SYS_INTTYPES_H)\ncheck_include_file(\"sys/int_types.h\"    HAVE_SYS_INT_TYPES_H)\ncheck_include_file(\"stdint.h\"           HAVE_STDINT_H)\n\n# this hack required to silence warnings on systems with inttypes.h\n# because json-c's inttypes header isn't generated for each system. Hooray C!\nif(HAVE_INTTYPES_H)\n    set(JSON_C_HAVE_INTTYPES_H 1)\nendif()\n\ninclude(CheckTypeSize)\n# Checks for typedefs, structures, and compiler characteristics.\n# AC_TYPE_SIZE_T\ncheck_type_size(\"ssize_t\" SIZEOF_SSIZE_T)\nif(SIZEOF_SSIZE_T STREQUAL \"\")\n    # ssize_t is a signed type in POSIX storing at least -1.\n    # Set it to \"int\" to match the behavior of AC_TYPE_SSIZE_T (autotools).\n    set(SSIZE_T_DEF \"typedef int ssize_t;\")\nendif()\ncheck_type_size(\"off_t\" SIZEOF_OFF_T)\nif(SIZEOF_OFF_T STREQUAL \"\")\n    # off_t is a signed type in POSIX no narrower than int.\n    # Set it to \"long int\" to match the behavior of AC_TYPE_OFF_T (autotools).\n    set(OFF_T_DEF \"typedef long int off_t;\")\nendif()\n\ncheck_type_size(\"int\" SIZEOF_INT)\ncheck_type_size(\"short\" SIZEOF_SHORT)\ncheck_type_size(\"long\" SIZEOF_LONG)\ncheck_type_size(\"long long\" SIZEOF_LONG_LONG)\n\n#\n# Variables for clamav-types.h.in\n#\n#TODO: Move this to a .cmake file\nif(HAVE_SYS_INT_TYPES_H)\n    set(INT_TYPES_HEADER \"#include <sys/int_types.h>\")\nelseif(HAVE_INTTYPES_H)\n    set(INT_TYPES_HEADER \"#include <inttypes.h>\")\nelseif(HAVE_STDINT_H)\n    set(INT_TYPES_HEADER \"#include <stdint.h>\")\nelseif(WIN32 AND MSVC)\n    # Windows / Visual C++ (not Cygwin), stdint.h should exist.\n    set(INT_TYPES_HEADER \"#include <stdint.h>\")\nelse()\n    # No int types header available. We'll define the types manually.\n    set(INT8_DEF \"typedef signed char int8_t;\")\n    set(UINT8_DEF \"typedef unsigned char uint8_t;\")\n\n    if(SIZEOF_INT EQUAL 2)\n        set(INT16_DEF \"typedef signed int int16_t;\")\n        set(UINT16_DEF \"typedef unsigned int uint16_t;\")\n    elseif(SIZEOF_SHORT EQUAL 2)\n        set(INT16_DEF \"typedef signed short int16_t;\")\n        set(UINT16_DEF \"typedef unsigned short uint16_t;\")\n    endif()\n\n    if(SIZEOF_INT EQUAL 4)\n        set(INT32_DEF \"typedef signed int int32_t;\")\n        set(UINT32_DEF \"typedef unsigned int uint32_t;\")\n    elseif(SIZEOF_LONG EQUAL 4)\n        set(INT32_DEF \"typedef signed long int32_t;\")\n        set(UINT32_DEF \"typedef unsigned long uint32_t;\")\n    endif()\n\n    if(SIZEOF_LONG EQUAL 8)\n        set(INT64_DEF \"typedef signed long int64_t;\")\n        set(UINT64_DEF \"typedef unsigned long uint64_t;\")\n    elseif(SIZEOF_LONG_LONG EQUAL 8)\n        set(INT64_DEF \"typedef signed long long int64_t;\")\n        set(UINT64_DEF \"typedef unsigned long long uint64_t;\")\n    endif()\nendif()\n\n# Always do this\nif(SIZEOF_INT EQUAL 4)\n    set(DEFINE_SF32_PREFIX \"#define _SF32_PREFIX \\\"\\\"\")\nelseif(SIZEOF_LONG EQUAL 4)\n    set(DEFINE_SF32_PREFIX \"#define _SF32_PREFIX \\\"l\\\"\")\nendif()\nif(SIZEOF_LONG EQUAL 8)\n    set(DEFINE_SF64_PREFIX \"#define _SF64_PREFIX \\\"l\\\"\")\nelseif(SIZEOF_LONG_LONG EQUAL 8)\n    set(DEFINE_SF64_PREFIX \"#define _SF64_PREFIX \\\"ll\\\"\")\nendif()\n\n# Check for restrict keyword\n#TODO: Move this to a .cmake file\nforeach( ac_kw __restrict __restrict__ _Restrict restrict )\n    check_c_source_compiles(\n        \"\n        typedef int * int_ptr;\n        int foo (int_ptr ${ac_kw} ip) {\n            return ip[0];\n        }\n        int main() {\n            int s[1];\n            int * ${ac_kw} t = s;\n            t[0] = 0;\n            return foo(t);\n        }\n        \"\n        HAVE_RESTRICT )\n\n    if( HAVE_RESTRICT )\n        set( ac_cv_c_restrict ${ac_kw} )\n        break()\n    endif()\nendforeach()\nif( HAVE_RESTRICT )\n    set( restrict ${ac_cv_c_restrict} )\nendif()\n\n# Define inline macro as needed.\ninclude(TestInline)\n# Determine if _FILE_OFFSET_BITS 64 needs to be set to handle large files.\ninclude(CheckFileOffsetBits)\n# Determine how to pack structs on this platform.\ninclude(CheckStructPacking)\n# Check for signed right shift implementation.\ninclude(CheckSignedRightShift)\n# Check if systtem fts implementation available\ninclude(CheckFTS)\n# Check if uname(2) follows POSIX standard.\ninclude(CheckUnamePosix)\n# Check support for file descriptor passing\ninclude(CheckFDPassing)\n\n# Check if big-endian\ninclude(TestBigEndian)\nTEST_BIG_ENDIAN(WORDS_BIGENDIAN)\n\ninclude(CheckStructHasMember)\ncheck_struct_has_member(\"struct tm\" tm_gmtoff time.h HAVE_STRUCT_TM_TM_GMTOFF)\n\n# Check size of pointer to decide we need 8 bytes alignment adjustment.\ncheck_type_size(\"int *\"   SIZEOF_INT_P)\ncheck_type_size(\"time_t\"  SIZEOF_TIME_T)\n\n# Checks for library functions.\ninclude(CheckSymbolExists)\ncheck_symbol_exists(_Exit           \"stdlib.h\"      HAVE__EXIT)\ncheck_symbol_exists(accept4         \"sys/types.h\"   HAVE_ACCEPT4)\ncheck_symbol_exists(snprintf        \"stdio.h\"       HAVE_SNPRINTF)\ncheck_symbol_exists(stat64          \"sys/stat.h\"    HAVE_STAT64)\ncheck_symbol_exists(strcasestr      \"string.h\"      HAVE_STRCASESTR)\ncheck_symbol_exists(strerror_r      \"string.h\"      HAVE_STRERROR_R)\ncheck_symbol_exists(strlcat         \"string.h\"      HAVE_STRLCAT)\ncheck_symbol_exists(strlcpy         \"string.h\"      HAVE_STRLCPY)\ncheck_symbol_exists(strndup         \"string.h\"      HAVE_STRNDUP)\ncheck_symbol_exists(strnlen         \"string.h\"      HAVE_STRNLEN)\ncheck_symbol_exists(strnstr         \"string.h\"      HAVE_STRNSTR)\ncheck_symbol_exists(sysctlbyname    \"sysctl.h\"      HAVE_SYSCTLBYNAME)\ncheck_symbol_exists(timegm          \"time.h\"        HAVE_TIMEGM)\ncheck_symbol_exists(vsnprintf       \"stdio.h\"       HAVE_VSNPRINTF)\n\nif(WIN32)\n    #set(HAVE_FSEEKO 1)\n    set(HAVE_GETADDRINFO 1)\n    set(HAVE_GETPAGESIZE 1)\n    set(HAVE_MKSTEMP 1)\n    set(HAVE_POLL 1)\nelse()\n    check_symbol_exists(fseeko          \"stdio.h\"       HAVE_FSEEKO)\n    check_symbol_exists(getaddrinfo     \"netdb.h\"       HAVE_GETADDRINFO)\n    check_symbol_exists(getpagesize     \"unistd.h\"      HAVE_GETPAGESIZE)\n    check_symbol_exists(mkstemp         \"unistd.h\"      HAVE_MKSTEMP)\n    check_symbol_exists(poll            \"poll.h\"        HAVE_POLL)\n    check_symbol_exists(setgroups       \"unistd.h\"      HAVE_SETGROUPS)\n    check_symbol_exists(setsid          \"unistd.h\"      HAVE_SETSID)\nendif()\n\ninclude(CheckSymbolExists)\n# XXX does this correctly detect initgroups (un)availability on cygwin?\ncheck_symbol_exists(initgroups grp.h HAVE_INITGROUPS)\nif(NOT HAVE_INITGROUPS AND HAVE_UNISTD_H)\n    # FreeBSD declares initgroups() in unistd.h\n    check_symbol_exists(initgroups unistd.h HAVE_INITGROUPS2)\n    if(HAVE_INITGROUPS2)\n        set(HAVE_INITGROUPS 1)\n    endif()\nendif()\n\nset(WARNCFLAGS)\nset(WARNCXXFLAGS)\nif(CMAKE_C_COMPILER_ID MATCHES \"MSVC\")\n    if(ENABLE_WERROR)\n        set(WARNCFLAGS    /WX)\n        set(WARNCXXFLAGS  /WX)\n    endif()\nelse()\n    if(ENABLE_WERROR)\n        extract_valid_c_flags(WARNCFLAGS    -Werror)\n        extract_valid_c_flags(WARNCXXFLAGS  -Werror)\n    endif()\n\n    # For C compiler\n    extract_valid_c_flags(WARNCFLAGS\n        -Wall -Wextra\n        -Wformat-security\n    )\n    if(ENABLE_ALL_THE_WARNINGS)\n        extract_valid_c_flags(WARNCFLAGS\n            -Waddress\n            -Wattributes\n            -Wclobbered\n            -Wconversion\n            -Wdeclaration-after-statement\n            -Wdiv-by-zero\n            -Wempty-body\n            -Wendif-labels\n            -Wfloat-equal\n            -Wformat-nonliteral\n            -Winline\n            -Wmissing-declarations\n            -Wmissing-field-initializers\n            -Wmissing-noreturn\n            -Wmissing-prototypes\n            -Wnested-externs\n            #-Wno-format-nonliteral            # May be required to pass format string as \"const char*.\n            -Wpointer-arith\n            -Wpragmas\n            -Wredundant-decls\n            -Wshadow\n            -Wunreachable-code\n            -Wunused-parameter\n            -Wvla\n            -Wwrite-strings\n            -Wstrict-prototypes\n            -Wundef\n            -Wcast-align\n            -Wextended-offsetof               # May be missing from GCC\n            -Wheader-guard                    # Only work with Clang for the moment\n            -Wlanguage-extension-token        # May be missing from GCC\n            -Wmissing-variable-declarations   # May be missing from GCC\n            #-Wpadded                          # Not used because we cannot change public structs\n            -Wshorten-64-to-32                # May be missing from GCC\n            -Wsign-conversion\n            #-Wswitch-enum                     # Not used because this basically disallows default case\n            -Wunreachable-code-break          # May be missing from GCC\n            -Wunused-macros\n        )\n    endif()\n\n    # For C++ compiler\n    extract_valid_cxx_flags(WARNCXXFLAGS\n        -Wall\n        -Wformat-security\n        -Wno-comment                      # Disabled because LLVM's CFG.h has a warning about a multiline comment because of ascii-art of a graph with a `\\` in it.\n    )\nendif()\n\n# autotools-compatible names\n# Sphinx expects relative paths in the .rst files. Use the fact that the files\n# below are all one directory level deep.\nfile(RELATIVE_PATH top_srcdir   \"${CMAKE_CURRENT_BINARY_DIR}/dir\" \"${CMAKE_CURRENT_SOURCE_DIR}\")\nfile(RELATIVE_PATH top_builddir \"${CMAKE_CURRENT_BINARY_DIR}/dir\" \"${CMAKE_CURRENT_BINARY_DIR}\")\nset(abs_top_srcdir   \"${CMAKE_CURRENT_SOURCE_DIR}\")\nset(abs_top_builddir \"${CMAKE_CURRENT_BINARY_DIR}\")\n# libclamav.pc (pkg-config file)\nset(prefix      \"${CMAKE_INSTALL_PREFIX}\")\nset(exec_prefix \"${CMAKE_INSTALL_PREFIX}\")\nset(bindir      \"${CMAKE_INSTALL_FULL_BINDIR}\")\nset(sbindir     \"${CMAKE_INSTALL_FULL_SBINDIR}\")\nset(libdir      \"${CMAKE_INSTALL_FULL_LIBDIR}\")\nset(includedir  \"${CMAKE_INSTALL_FULL_INCLUDEDIR}\")\nset(VERSION     \"${PACKAGE_VERSION}\")\n\n# Absolute path of database directory\nif(IS_ABSOLUTE ${DATABASE_DIRECTORY})\n    set(DATADIR \"${DATABASE_DIRECTORY}\")\nelse()\n    set(DATADIR \"${CMAKE_INSTALL_PREFIX}/${DATABASE_DIRECTORY}\")\nendif()\n# Absolute path of the applications' config directory\nif(IS_ABSOLUTE ${APP_CONFIG_DIRECTORY})\n    set(CONFDIR \"${APP_CONFIG_DIRECTORY}\")\nelse()\n    set(CONFDIR \"${CMAKE_INSTALL_PREFIX}/${APP_CONFIG_DIRECTORY}\")\nendif()\n\nif(ENABLE_DEBUG)\n    set(CL_DEBUG 1)\nendif()\nif(ENABLE_EXPERIMENTAL)\n    set(CL_EXPERIMENTAL 1)\nendif()\nif(ENABLE_STRN_INTERNAL)\n    set(HAVE_STRNI 1)\nendif()\nif(ENABLE_FRESHCLAM_DNS_FIX)\n    set(FRESHCLAM_DNS_FIX 1)\nendif()\nif(ENABLE_FRESHCLAM_NO_CACHE)\n    set(FRESHCLAM_NO_CACHE 1)\nendif()\n\nset(SCANBUFF 131072) # scan buffer size\nset(FILEBUFF 8192)   # file i/o buffer size\n\nif(APPLE)\n    set(C_DARWIN 1)\nendif()\n\ninclude(CheckFmapFeatures)\nif(WIN32)\n    set(USE_MPOOL 1)\nendif()\n\nadd_definitions(-DHAVE_CONFIG_H)\nconfigure_file(clamav-config.h.cmake.in clamav-config.h)\nconfigure_file(target.h.cmake.in target.h)\nconfigure_file(platform.h.in platform.h)\nconfigure_file(clamav-version.h.in clamav-version.h)\nconfigure_file(clamav-types.h.in clamav-types.h)\n\nif(WIN32)\n    #\n    # Windows-specific config stuff\n    #\n\n    # Windows resource file\n    set(CLAMAV_RES \"\")\n    configure_file(\n        win32/res/common.rc.in\n        ${CMAKE_SOURCE_DIR}/win32/res/common.rc\n        @ONLY)\nelse()\n    #\n    # POSIX-specific config stuff\n    #\n\n    # Don't confuse clamav-config.in with clamav-config.h.in or clamav-config.h.cmake.in\n    configure_file(clamav-config.in\n        ${CMAKE_CURRENT_BINARY_DIR}/clamav-config\n        @ONLY)\n    install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/clamav-config\"\n            DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n        PERMISSIONS\n            OWNER_READ OWNER_WRITE OWNER_EXECUTE\n            GROUP_READ             GROUP_EXECUTE\n            WORLD_READ             WORLD_EXECUTE\n        COMPONENT libraries)\n\n    # pkg-config\n    configure_file(\n        libclamav.pc.in\n        ${CMAKE_CURRENT_BINARY_DIR}/libclamav.pc\n        @ONLY)\n    install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/libclamav.pc\"\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\"\n        COMPONENT libraries)\nendif()\n\n# include CTest to enable testing before we add any subdirectories which may\n# add additional tests (like with `add_rust_test()`)\nif(ENABLE_TESTS)\n    include(CTest)\nendif()\n\n#\n# ClamAV Build targets!\n#\n\n# Build targets for libraries.\nif(ENABLE_UNRAR)\n    # Only build libclamunrar if enabled.\n    # We still define the libclamunrar_iface's interface regardless,\n    # so that libclamav will have unrar_iface.h in the include path.\n    add_subdirectory( libclamunrar )\nendif()\nadd_subdirectory( libclamunrar_iface )\n\nif(NOT ENABLE_EXTERNAL_MSPACK)\n    add_subdirectory( libclammspack )\n    set(LIBMSPACK \"ClamAV::libmspack\")\nelse()\n    find_package(MSPack REQUIRED)\n    set(LIBMSPACK \"MSPack::mspack\")\nendif()\n\nif(WIN32)\n    add_subdirectory( win32/compat )\nendif()\n\nadd_subdirectory( libclamav )\nadd_subdirectory( libclamav_rust )\n\nif(NOT ENABLE_LIBCLAMAV_ONLY)\n    add_subdirectory( common )\n\n    add_subdirectory( libfreshclam )\n\n    if(ENABLE_APP)\n        # Build targets for primary applications.\n        add_subdirectory( clamconf )\n\n        add_subdirectory( clamd )\n\n        add_subdirectory( clamdscan )\n\n        if(C_LINUX AND ENABLE_CLAMONACC)\n            add_subdirectory( clamonacc )\n        endif()\n\n        if(ENABLE_MILTER)\n            add_subdirectory( clamav-milter )\n        endif()\n\n        add_subdirectory( clamscan )\n\n        add_subdirectory( sigtool )\n\n        add_subdirectory( clambc )\n\n        add_subdirectory( clamsubmit )\n\n        add_subdirectory( freshclam )\n\n        add_subdirectory( clamdtop )\n\n        if(WIN32)\n            add_subdirectory( win32/conf_examples )\n        else()\n            add_subdirectory( etc )\n        endif()\n    endif()\nendif()\n\nif(ENABLE_EXAMPLES)\n    add_subdirectory( examples )\nendif()\n\nadd_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND})\nif(ENABLE_TESTS)\n    add_subdirectory( unit_tests )\nendif()\n\nadd_subdirectory( docs )\n\nif(ENABLE_FUZZ)\n    add_subdirectory( fuzz )\nendif()\n\nif(WIN32)\n    # Include the license(s) in the installation\n    install(FILES ${CMAKE_SOURCE_DIR}/COPYING.txt DESTINATION . COMPONENT libraries)\n    install(DIRECTORY ${CMAKE_SOURCE_DIR}/COPYING DESTINATION . COMPONENT libraries)\nendif()\n\n#\n# The Summary Info.\n#\ninclude(ColourMessage)\nstring(TOUPPER \"${CMAKE_BUILD_TYPE}\" _build_type)\nmessage(STATUS \"${Y}Configuration Options Summary${e} --\n${c}    Package Version:        ${e}${PACKAGE_STRING}\n${c}    libclamav version:      ${e}${LIBCLAMAV_CURRENT}:${LIBCLAMAV_REVISION}:${LIBCLAMAV_AGE}\n${c}    libfreshclam version:   ${e}${LIBFRESHCLAM_CURRENT}:${LIBFRESHCLAM_REVISION}:${LIBFRESHCLAM_AGE}\n${c}    Install prefix:         ${e}${CMAKE_INSTALL_PREFIX}\n${c}    Install database dir:   ${e}${DATADIR}\n${c}    Install config dir:     ${e}${CONFDIR}\n${c}    Host system:            ${e}${CMAKE_HOST_SYSTEM}\n${c}    Target system:          ${e}${CMAKE_SYSTEM}\n${c}    Compiler:               ${e}\n${b}        Build type:         ${e}${CMAKE_BUILD_TYPE}\n${b}        C compiler:         ${e}${CMAKE_C_COMPILER}\n${b}        C++ compiler:       ${e}${CMAKE_CXX_COMPILER}\n${b}        Rust toolchain:     ${e}${cargo_EXECUTABLE} (${cargo_VERSION})\n${b}        CFLAGS:             ${e}${CMAKE_C_FLAGS_${_build_type}} ${CMAKE_C_FLAGS}\n${b}        CXXFLAGS:           ${e}${CMAKE_CXX_FLAGS_${_build_type}} ${CMAKE_CXX_FLAGS}\n${b}        WARNCFLAGS:         ${e}${WARNCFLAGS}\")\nif(VCPKG_TOOLCHAIN)\nmessage(\"\\\n${c}    Using vcpkg:            ${e}\n${b}        Target Triplet:     ${e}${VCPKG_TARGET_TRIPLET}\n${b}        Target Arch:        ${e}${VCPKG_TARGET_ARCHITECTURE}\n${b}        Get runtime DLLs:   ${e}${VCPKG_APPLOCAL_DEPS}\n${b}        Package root path:  ${e}${VCPKG_CMAKE_FIND_ROOT_PATH}\")\nendif()\nmessage(\"\\\n${c}    Build Options:          ${e}\n${b}        Build apps:         ${e}${ENABLE_APP}\n${b}        Shared library:     ${e}${ENABLE_SHARED_LIB}\n${b}        Static library:     ${e}${ENABLE_STATIC_LIB}\n${b}        Enable UnRAR:       ${e}${ENABLE_UNRAR}\n${b}        Examples:           ${e}${ENABLE_EXAMPLES}\n${b}        Tests:              ${e}${ENABLE_TESTS}\n${b}        Build man pages:    ${e}${ENABLE_MAN_PAGES}\n${b}        Build doxygen HTML: ${e}${ENABLE_DOXYGEN}\n${b}        Maintainer Mode:    ${e}${MAINTAINER_MODE}\")\nif(MAINTAINER_MODE)\nmessage(\"\\\n${R}    Maintainer Mode Tools:  ${e}\n${y}        bison:              ${e}${BISON_EXECUTABLE} (${BISON_VERSION})\n${y}        flex:               ${e}${FLEX_EXECUTABLE} (${FLEX_VERSION})\")\nendif()\nif(NOT WIN32)\nmessage(\"\\\n${c}    Build Extras:           ${e}\")\nmessage(\"\\\n${b}        Build milter:       ${e}${ENABLE_MILTER}  (toggle with -DENABLE_MILTER=ON/OFF)\")\nif(C_LINUX)\nmessage(\"\\\n${b}        Build clamonacc:    ${e}${ENABLE_CLAMONACC}  (toggle with -DENABLE_CLAMONACC=ON/OFF)\")\nendif()\nendif()\n\nif(LLVM_FOUND)\nmessage(STATUS \"${C}Engine Options${e} --\n${b}        Bytecode Runtime:   ${e}\n${_}            llvm            ${e}${LLVM_INCLUDE_DIRS}\n${_}                            ${e}${LLVM_LIBRARY_DIRS}\n${_}                            ${e}${LLVM_LIBRARIES}\")\nelse()\nmessage(STATUS \"${C}Engine Options${e} --\n${b}        Bytecode Runtime:   ${e}\n${_}            ${BYTECODE_RUNTIME}            ${e}\")\nendif()\nif(ENABLE_TESTS)\nmessage(STATUS \"${C}Test Dependencies${e} --\n${b}        Unit Test Framework:${e}\n${_}            libcheck        ${e}${LIBCHECK_INCLUDE_DIR}\n${_}                            ${e}${LIBCHECK_LIBRARY}\n${b}        Feature Test Framework:${e}\n${_}            python3         ${e}${Python3_EXECUTABLE}\n${_}            test command    ${e}${PythonTest_COMMAND}\")\nendif()\nmessage(STATUS \"${C}libclamav Dependencies${e} --\n${b}        Compression support:${e}\n${_}            bzip2           ${e}${BZIP2_INCLUDE_DIRS}\n${_}                            ${e}${BZIP2_LIBRARIES}\n${_}            zlib            ${e}${ZLIB_INCLUDE_DIRS}\n${_}                            ${e}${ZLIB_LIBRARIES}\n${b}        XML support:        ${e}\n${_}            libxml2         ${e}${LIBXML2_INCLUDE_DIRS}\n${_}                            ${e}${LIBXML2_LIBRARIES}\n${b}        RegEx support:      ${e}\n${_}            libpcre2        ${e}${PCRE2_INCLUDE_DIRS}\n${_}                            ${e}${PCRE2_LIBRARIES}\n${b}        Crypto support:     ${e}\n${_}            openssl         ${e}${OPENSSL_INCLUDE_DIR}\n${_}                            ${e}${OPENSSL_LIBRARIES}\n${b}        JSON support:       ${e}\n${_}            json-c          ${e}${JSONC_INCLUDE_DIRS}\n${_}                            ${e}${JSONC_LIBRARIES}\n${b}        Threading support:  ${e}\")\nif(WIN32)\nmessage(\"\\\n${_}            pthread-win32   ${e}${PThreadW32_INCLUDE_DIRS}\n${_}                            ${e}${PThreadW32_LIBRARIES}\")\nelseif(Threads_FOUND AND CMAKE_USE_PTHREADS_INIT)\nmessage(\"\\\n${_}            pthread         ${e}\")\nelse()\nmessage(\"\\\n${o}            no              ${e}\")\nendif()\nif(NOT WIN32)\nmessage(\"\\\n${b}        Locale support:     ${e}\n${_}            iconv           ${e}${Iconv_INCLUDE_DIRS}\n${_}                            ${e}${Iconv_LIBRARIES}\")\nendif()\n\nif(NOT ENABLE_LIBCLAMAV_ONLY)\nmessage(STATUS \"${C}libfreshclam Extra Dependencies${e} --\n${b}        HTTP support:       ${e}\n${_}            curl            ${e}${CURL_INCLUDE_DIRS}\n${_}                            ${e}${CURL_LIBRARIES}\")\nendif()\n\nif(HAVE_LIBNCURSES)\nmessage(STATUS \"${C}Application Extra Dependencies${e} --\n${b}        GUI support:        ${e}\n${_}            ncurses         ${e}${CURSES_INCLUDE_DIRS}\n${_}                            ${e}${CURSES_LIBRARIES}\")\nelseif(HAVE_LIBPDCURSES)\nmessage(STATUS \"${C}Application Extra Dependencies${e} --\n${b}        GUI support:        ${e}\n${_}            pdcurses        ${e}${CURSES_INCLUDE_DIRS}\n${_}                            ${e}${CURSES_LIBRARIES}\")\nendif()\n\nif(C_LINUX)\nif(SYSTEMD_PROGRAM_FOUND)\nmessage(\"\\\n${b}        systemd:            ${e}\n${_}            unit directory  ${e}${SYSTEMD_UNIT_DIR}\n${b}        systemd ctl support: ${e}\")\nif(SYSTEMD_FOUND)\nmessage(\"\\\n${_}            libsystemd      ${e}${SYSTEMD_INCLUDE_DIRS}\n${_}                            ${e}${SYSTEMD_LIBRARIES}\")\nelse()\nmessage(\"\\\n${_}            libsystemd      ${e}not found\")\nendif()\nelse()\nmessage(\"\\\n${b}        systemd:            ${e}not found\")\nendif()\nendif()\n\nif(ENABLE_MILTER)\nmessage(\"\\\n${b}        Milter Support:     ${e}\n${_}            libmilter       ${e}${Milter_INCLUDE_DIRS}\n${_}                            ${e}${Milter_LIBRARIES}\")\nendif()\nmessage(\"\")\n\nif(NOT JSONC_USE_STATIC)\n    message(STATUS \"${g}Warning:${e} libjson-c is known to share symbol names with other JSON libraries which may result in crashes for applications that use libclamav. Consider providing a static json-c library that was compiled with: CFLAGS=\\\"-fPIC\\\". Default build settings for json-c 0.15+ should also work. Use the `-DENABLE_JSON_SHARED=OFF` option to prefer detection of the static library, or use -DJSONC_INCLUDE_DIR and -DJSONC_LIBRARY to specify the static JSON library.\")\nendif()\n"
        },
        {
          "name": "CMakeOptions.cmake",
          "type": "blob",
          "size": 3.470703125,
          "content": "# Features that can be enabled for cmake (see CMakeLists.txt)\n\nif(WIN32)\n    set(APP_CONFIG_DIRECTORY\n        \".\" CACHE STRING\n        \"App Config directory.\")\n    set(DATABASE_DIRECTORY\n        \"database\" CACHE STRING\n        \"Database directory.\")\nelse()\n    set(APP_CONFIG_DIRECTORY\n        \"etc\" CACHE STRING\n        \"App Config directory.\")\n    set(DATABASE_DIRECTORY\n        \"share/clamav\" CACHE STRING\n        \"Database directory.\")\nendif()\n\nset(CLAMAV_USER \"clamav\" CACHE STRING \"ClamAV User\")\nset(CLAMAV_GROUP \"clamav\" CACHE STRING \"ClamAV Group\")\n\nset(MMAP_FOR_CROSSCOMPILING\n    0 CACHE STRING\n    \"Force MMAP support for cross-compiling.\")\nset(DISABLE_MPOOL\n    0 CACHE STRING\n    \"Disable mpool support entirely.\")\n\nset(BYTECODE_RUNTIME\n    \"interpreter\" CACHE STRING\n    \"Bytecode Runtime, may be: 'llvm', 'interpreter', 'none'.\")\nset_property(CACHE BYTECODE_RUNTIME PROPERTY STRINGS llvm interpreter none)\n\noption(OPTIMIZE\n    \"Allow compiler optimizations.  Set to OFF to disable (i.e. to set -O0).\"\n    ON)\n\noption(MAINTAINER_MODE\n    \"Update generated sources. Requires flex, bison.\"\n    ${MAINTAINER_MODE_DEFAULT})\n\noption(ENABLE_WERROR\n    \"Compile time warnings will cause build failures.\")\n\noption(ENABLE_ALL_THE_WARNINGS\n    \"Enable as many compiler warnings as possible.\")\n\noption(ENABLE_DEBUG\n    \"Turn on extra debug output.\")\n\noption(ENABLE_EXPERIMENTAL\n    \"Turn on experimental features (if any).\")\n\noption(ENABLE_FRESHCLAM_DNS_FIX\n    \"Enable workaround for broken DNS servers.\")\n\noption(ENABLE_FRESHCLAM_NO_CACHE\n    \"Use 'Cache-Control: no-cache' in freshclam.\")\n\noption(ENABLE_STRN_INTERNAL\n    \"Enables explicit use of internal strn functions to support cross-compilation against older libs.\")\n\noption(ENABLE_FUZZ\n    \"Build fuzz targets. Will enable ENABLE_STATIC_LIB for you.\")\n\noption(ENABLE_EXTERNAL_MSPACK\n    \"Use external mspack instead of internal libclammspack.\")\n\noption(ENABLE_JSON_SHARED\n    \"Prefer linking with libjson-c shared library instead of static.\"\n    ON)\n\noption(ENABLE_APP\n    \"Build applications (clamscan, clamd, clamdscan, clamonacc, sigtool, clambc, clamav-milter, clamdtop, clamsubmit, clamconf).\"\n    ${ENABLE_APP_DEFAULT})\n\noption(ENABLE_MILTER\n    \"Build clamav-milter (requires ENABLE_APP)).\"\n    ${ENABLE_MILTER_DEFAULT})\n\noption(ENABLE_CLAMONACC\n    \"Build clamonacc (Linux-only, requires ENABLE_APP)).\"\n    ${ENABLE_CLAMONACC_DEFAULT})\n\noption(ENABLE_MAN_PAGES\n    \"Generate man pages.\"\n    ${ENABLE_MAN_PAGES_DEFAULT})\n\noption(ENABLE_DOXYGEN\n    \"Generate doxygen HTML documentation for clamav.h, libfreshclam.h.\"\n    ${ENABLE_DOXYGEN_DEFAULT})\n\noption(ENABLE_EXAMPLES\n    \"Build examples.\"\n    ${ENABLE_EXAMPLES_DEFAULT})\n\noption(ENABLE_TESTS\n    \"Build/enable unit tests.\"\n    ${ENABLE_TESTS_DEFAULT})\n\noption(ENABLE_LIBCLAMAV_ONLY\n    \"Build libclamav only. Excludes libfreshclam too!\")\n\noption(ENABLE_STATIC_LIB\n    \"Build libclamav and/or libfreshclam static libraries.\")\n\noption(ENABLE_SHARED_LIB\n    \"Build libclamav and/or libfreshclam shared libraries.\"\n    ON)\n\noption(ENABLE_UNRAR\n    \"Build & install libclamunrar.\"\n    ${ENABLE_UNRAR_DEFAULT})\n\noption(ENABLE_SYSTEMD\n    \"Install systemd service files if systemd is found.\"\n    ${ENABLE_SYSTEMD_DEFAULT})\n\n# For reference determining target platform:\n#  Rust Targets:  https://doc.rust-lang.org/nightly/rustc/platform-support.html\noption(RUST_COMPILER_TARGET\n    \"Use a custom target triple to build the Rust components. Needed for cross-compiling.\")\n\noption(DO_NOT_SET_RPATH\n    \"Don't set the RPATH on UNIX systems.\")\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.513671875,
          "content": "# Citizen Code of Conduct\n\n## 1. Purpose\n\nA primary goal of the ClamAV community is to be inclusive to the largest number of contributors, with the most varied and diverse backgrounds possible. As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion (or lack thereof).  \n\nThis code of conduct outlines our expectations for all those who participate in our community, as well as the consequences for unacceptable behavior.\n\nWe invite all those who participate in ClamAV to help us create safe and positive experiences for everyone.\n\n## 2. Open [Source/Culture/Tech] Citizenship\n\nA supplemental goal of this Code of Conduct is to increase open [source/culture/tech] citizenship by encouraging participants to recognize and strengthen the relationships between our actions and their effects on our community.\n\nCommunities mirror the societies in which they exist and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society.\n\nIf you see someone who is making an extra effort to ensure our community is welcoming, friendly, and encourages all participants to contribute to the fullest extent, we want to know.\n\n## 3. Expected Behavior\n\nThe following behaviors are expected and requested of all community members:\n\n * Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this community.\n * Exercise consideration and respect in your speech and actions.\n * Attempt collaboration before conflict.\n * Refrain from demeaning, discriminatory, or harassing behavior and speech.\n * Be mindful of your surroundings and of your fellow participants. Alert community leaders if you notice a dangerous situation, someone in distress, or violations of this Code of Conduct, even if they seem inconsequential.\n * Remember that community event venues may be shared with members of the public; please be respectful to all patrons of these locations.\n\n## 4. Unacceptable Behavior\n\nThe following behaviors are considered harassment and are unacceptable within our community:\n\n * Violence, threats of violence or violent language directed against another person.\n * Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language.\n * Posting or displaying sexually explicit or violent material.\n * Posting or threatening to post other people's personally identifying information (\"doxing\").\n * Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability.\n * Inappropriate photography or recording.\n * Inappropriate physical contact. You should have someone's consent before touching them.\n * Unwelcome sexual attention. This includes, sexualized comments or jokes as well as inappropriate touching or unwelcomed sexual advances.\n * Deliberate intimidation, stalking or following (online or in person).\n * Advocating for, or encouraging, any of the above behavior.\n * Sustained disruption of community events, including talks and presentations.\n\n## 5. Consequences of Unacceptable Behavior\n\nUnacceptable behavior from any community member, including sponsors and those with decision-making authority, will not be tolerated.\n\nAnyone asked to stop unacceptable behavior is expected to comply immediately.\n\nIf a community member engages in unacceptable behavior, the community organizers may take any action they deem appropriate, up to and including a temporary ban or permanent expulsion from the community without warning (and without refund in the case of a paid event).\n\n## 6. Reporting Guidelines\n\nIf you are subject to or witness unacceptable behavior, or have any other concerns, please notify a community organizer as soon as possible. talos-external@cisco.com.\n\nAdditionally, community organizers are available to help community members engage with local law enforcement or to otherwise help those experiencing unacceptable behavior feel safe. In the context of in-person events, organizers will also provide escorts as desired by the person experiencing distress.\n\n## 7. Addressing Grievances\n\nIf you feel you have been falsely or unfairly accused of violating this Code of Conduct, you should notify Cisco-Talos with a concise description of your grievance. Your grievance will be handled in accordance with our existing governing policies. \n\n## 8. Scope\n\nWe expect all community participants (contributors, paid or otherwise; sponsors; and other guests) to abide by this Code of Conduct in all community venues--online and in-person--as well as in all one-on-one communications pertaining to community business.\n\nThis code of conduct and its related procedures also applies to unacceptable behavior occurring outside the scope of community activities when such behavior has the potential to adversely affect the safety and well-being of community members.\n\n## 9. Contact info\n\ntalos-external@cisco.com\n\n## 10. License and attribution\n\nThe Citizen Code of Conduct is distributed by Stumptown Syndicate under a [Creative Commons Attribution-ShareAlike license](http://creativecommons.org/licenses/by-sa/3.0/). \n\nPortions of text derived from the [Django Code of Conduct](https://www.djangoproject.com/conduct/) and the [Geek Feminism Anti-Harassment Policy](http://geekfeminism.wikia.com/wiki/Conference_anti-harassment/Policy).\n\n_Revision 2.3. Posted 6 March 2017._\n\n_Revision 2.2. Posted 4 February 2016._\n\n_Revision 2.1. Posted 23 June 2014._\n\n_Revision 2.0, adopted by the Stumptown Syndicate board on 10 January 2013. Posted 17 March 2013._\n"
        },
        {
          "name": "COPYING.txt",
          "type": "blob",
          "size": 18.298828125,
          "content": "\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n     51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Library General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\f\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\f\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\f\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\f\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\f\n\t    How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year  name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Library General\nPublic License instead of this License.\n\n            REGARDING OPENSSL\n\n In addition, as a special exception, the copyright holders give\n permission to link the code of portions of this program with the\n OpenSSL library under certain conditions as described in each\n individual source file, and distribute linked combinations\n including the two.\n\n You must obey the GNU General Public License in all respects\n for all of the code used other than OpenSSL.  If you modify\n file(s) with this exception, you may extend this exception to your\n version of the file(s), but you are not obligated to do so.  If you\n do not wish to do so, delete this exception statement from your\n version.  If you delete this exception statement from all source\n files in the program, then also delete it here.\n"
        },
        {
          "name": "COPYING",
          "type": "tree",
          "content": null
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 31.7587890625,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"adler32\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aae1277d39aeec15cb388266ecc24b11c80469deae6067e17a1a7aa9e5c1f234\"\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.21.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567\"\n\n[[package]]\nname = \"bindgen\"\nversion = \"0.65.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cfdf7b466f9a4903edc73f95d6d2bcd5baf8ae620638762244d3f60143643cc5\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cexpr\",\n \"clang-sys\",\n \"lazy_static\",\n \"lazycell\",\n \"log\",\n \"peeking_take_while\",\n \"prettyplease\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"rustc-hash\",\n \"shlex\",\n \"syn 2.0.60\",\n \"which\",\n]\n\n[[package]]\nname = \"bit_field\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc827186963e592360843fb5ba4b973e145841266c1357f7180c43526f2e5b61\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"bytemuck\"\nversion = \"1.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d6d68c57235a3a081186990eca2867354726650f42f7516ca50c28d6281fd15\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"514de17de45fdb8dc022b1a7975556c53c86f9f0aa5f534b98977b171857c2c9\"\n\n[[package]]\nname = \"bzip2-rs\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"beeb59e7e4c811ab37cc73680c798c7a5da77fc9989c62b09138e31ee740f735\"\ndependencies = [\n \"crc32fast\",\n \"tinyvec\",\n]\n\n[[package]]\nname = \"cbindgen\"\nversion = \"0.25.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"faeaa693e5a727975a79211b8f35c0cb09b031fdb6eaa4a788bc6713d01488ca\"\ndependencies = [\n \"heck\",\n \"indexmap\",\n \"log\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"tempfile\",\n \"toml\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"099a5357d84c4c61eb35fc8eafa9a79a902c2f76911e5747ced4e032edd8d9b4\"\n\n[[package]]\nname = \"cexpr\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766\"\ndependencies = [\n \"nom\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"num-traits\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"clamav_rust\"\nversion = \"0.0.1\"\ndependencies = [\n \"base64\",\n \"bindgen\",\n \"byteorder\",\n \"bzip2-rs\",\n \"cbindgen\",\n \"delharc\",\n \"flate2\",\n \"hex\",\n \"hex-literal\",\n \"image\",\n \"inflate\",\n \"libc\",\n \"log\",\n \"num-traits\",\n \"onenote_parser\",\n \"rustdct\",\n \"sha1\",\n \"sha2\",\n \"tempfile\",\n \"thiserror\",\n \"transpose\",\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"clang-sys\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67523a3b4be3ce1989d607a828d036249522dd9c1c8de7f4dd2dae43a37369d1\"\ndependencies = [\n \"glob\",\n \"libc\",\n \"libloading\",\n]\n\n[[package]]\nname = \"color_quant\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b\"\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53fe5e26ff1b7aef8bca9c6080520cfb8d9333c7568e1829cef191a9723e5504\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3855a8a784b474f333699ef2bbca9db2c4a1f6d9088a90a2d25b1eb53111eaa\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"248e3bacc7dc6baa3b21e405ee045c3047101a49145e7e9eca583ab4c2ca5345\"\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"delharc\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1c93ba2617f5094875af777b3e1e5d66e79d7c832e4ae2e25722c965a482e5a1\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"chrono\",\n \"memchr\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a47c1c47d2f5964e29c61246e81db715514cd532db6b5116a25ea3c03d6780a2\"\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b45de904aa0b010bce2ab45264d0631681847fa7b6f2eaa7dab7619943bc4f59\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"enum-primitive-derive\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c375b9c5eadb68d0a6efee2999fef292f45854c3444c86f09d8ab086ba942b0e\"\ndependencies = [\n \"num-traits\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a258e46cdc063eb8519c00b9fc845fc47bcfca4130e2f08e88665ceda8474245\"\ndependencies = [\n \"libc\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"exr\"\nversion = \"1.72.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"887d93f60543e9a9362ef8a21beedd0a833c5d9610e18c67abe15a5963dcb1a4\"\ndependencies = [\n \"bit_field\",\n \"flume\",\n \"half\",\n \"lebe\",\n \"miniz_oxide\",\n \"rayon-core\",\n \"smallvec\",\n \"zune-inflate\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fc0510504f03c51ada170672ac806f1f105a88aa97a5281117e1ddc3368e51a\"\n\n[[package]]\nname = \"fdeflate\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f9bfee30e4dedf0ab8b422f03af778d9612b63f502710fc500a334ebe2de645\"\ndependencies = [\n \"simd-adler32\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f54427cfd1c7829e2a139fcefea601bf088ebca651d2bf53ebc600eac295dae\"\ndependencies = [\n \"crc32fast\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"flume\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55ac459de2512911e4b674ce33cf20befaba382d05b62b008afc1c8b57cbf181\"\ndependencies = [\n \"spin\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"gif\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fb2d69b19215e18bb912fa30f7ce15846e301408695e44e0ef719f1da9e19f2\"\ndependencies = [\n \"color_quant\",\n \"weezl\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"half\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6dd08c532ae367adf81c312a4580bc67f1d0fe8bc9c460520283f4c0ff277888\"\ndependencies = [\n \"cfg-if\",\n \"crunchy\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"hex-literal\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fe2267d4ed49bc07b63801559be28c718ea06c4738b7a03c94df7386d2cde46\"\n\n[[package]]\nname = \"home\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5\"\ndependencies = [\n \"windows-sys\",\n]\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7ffbb5a1b541ea2561f8c41c087286cc091e21e556a4f09a8f6cbf17b69b141\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"image\"\nversion = \"0.24.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5690139d2f55868e080017335e4b94cb7414274c74f1669c84fb5feba2c9f69d\"\ndependencies = [\n \"bytemuck\",\n \"byteorder\",\n \"color_quant\",\n \"exr\",\n \"gif\",\n \"jpeg-decoder\",\n \"num-traits\",\n \"png\",\n \"qoi\",\n \"tiff\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"inflate\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1cdb29978cc5797bd8dcc8e5bf7de604891df2a8dc576973d71a281e916db2ff\"\ndependencies = [\n \"adler32\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"jpeg-decoder\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5d4a7da358eff58addd2877a45865158f0d78c911d43a5784ceb7bbf52833b0\"\ndependencies = [\n \"rayon\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"lebe\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03087c2bad5e1034e8cace5926dec053fb3790248370865f5117a7d0213354c8\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.155\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c\"\n\n[[package]]\nname = \"libloading\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c2a198fb6b0eada2a8df47933734e6d35d350665a33a3593d7164fa52c75c19\"\ndependencies = [\n \"cfg-if\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01cda141df6706de531b6c46c3a33ecca755538219bd484262fa09410c13539c\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c8640c5d730cb13ebd907d8d04b52f55ac9a2eec55b440c8892f40d56c76c1d\"\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d811f3e15f28568be3407c8e7fdb6514c1cda3cb30683f15b6a1a1dc4ea14a7\"\ndependencies = [\n \"adler\",\n \"simd-adler32\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"num-complex\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23c6602fda94a57c990fe0df199a035d83576b496aa29f4e634a8ac6004e68a6\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.46\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"onenote_parser\"\nversion = \"0.3.1\"\nsource = \"git+https://github.com/Cisco-Talos/onenote.rs.git?branch=CLAM-2329-new-from-slice#8b450447e58143004b68dd21c11b710fdb79be92\"\ndependencies = [\n \"bytes\",\n \"encoding_rs\",\n \"enum-primitive-derive\",\n \"itertools\",\n \"num-traits\",\n \"paste\",\n \"thiserror\",\n \"uuid\",\n \"widestring\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de3145af08024dea9fa9914f381a17b8fc6034dfb00f3a84013f7ff43f29ed4c\"\n\n[[package]]\nname = \"peeking_take_while\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099\"\n\n[[package]]\nname = \"png\"\nversion = \"0.17.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06e4b0d3d1312775e782c86c91a111aa1f910cbb65e1337f9975b5f9a554b5e1\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"crc32fast\",\n \"fdeflate\",\n \"flate2\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"prettyplease\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ac2cf0f2e4f42b49f5ffd07dae8d746508ef7526c13940e5f524012ae6c6550\"\ndependencies = [\n \"proc-macro2\",\n \"syn 2.0.60\",\n]\n\n[[package]]\nname = \"primal-check\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9df7f93fd637f083201473dab4fee2db4c429d32e55e3299980ab3957ab916a0\"\ndependencies = [\n \"num-integer\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.81\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d1597b0c024618f09a9c3b8655b7e430397a36d23fdafec26d6965e9eec3eba\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"qoi\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f6d64c71eb498fe9eae14ce4ec935c555749aef511cca85b5568910d6e48001\"\ndependencies = [\n \"bytemuck\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rayon\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa\"\ndependencies = [\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2\"\ndependencies = [\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c117dbdfde9c8308975b6a18d71f3f385c89461f7b3fb054288ecf2a2058ba4c\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86b83b8b9847f9bf95ef68afb0b8e6cdb80f498442f5179a29fad448fcc1eaea\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adad44e29e4c806119491a7f06f03de4d1af22c3a680dd47f1e6e179439d1f56\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustdct\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b61555105d6a9bf98797c063c362a1d24ed8ab0431655e38f1cf51e52089551\"\ndependencies = [\n \"rustfft\",\n]\n\n[[package]]\nname = \"rustfft\"\nversion = \"6.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43806561bc506d0c5d160643ad742e3161049ac01027b5e6d7524091fd401d86\"\ndependencies = [\n \"num-complex\",\n \"num-integer\",\n \"num-traits\",\n \"primal-check\",\n \"strength_reduce\",\n \"transpose\",\n \"version_check\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e86697c916019a8588c99b5fac3cead74ec0b4b819707a682fd4d23fa0ce1ba1\"\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.200\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ddc6f9cc94d67c0e21aaf7eda3a010fd3af78ebf6e096aa6e2e13c79749cce4f\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.200\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"856f046b9400cee3c8c94ed572ecdb752444c24528c035cd35882aad6f492bcb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.60\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.116\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e17db7126d17feb94eb3fad46bf1a96b034e8aacbc2e775fe81505f8b0b2813\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha1\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"simd-adler32\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\ndependencies = [\n \"lock_api\",\n]\n\n[[package]]\nname = \"strength_reduce\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe895eb47f22e2ddd4dabc02bce419d2e643c8e3b585c78158b349195bc24d82\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"909518bc7b1c9b779f1bbf07f2929d35af9f0f37e47c6e9ef7f9dddc1e1821f3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85b77fafb263dd9d05cbeac119526425676db3784113aa9295c88498cbf8bff1\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"rustix\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.59\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0126ad08bff79f29fc3ae6a55cc72352056dfff61e3ff8bb7129476d44b23aa\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.59\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1cd413b5d558b4c5bf3680e324a6fa5014e7b7c067a51e69dbdf47eb7148b66\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.60\",\n]\n\n[[package]]\nname = \"tiff\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba1310fcea54c6a9a4fd1aad794ecc02c31682f6bfbecdf460bf19533eed1e3e\"\ndependencies = [\n \"flate2\",\n \"jpeg-decoder\",\n \"weezl\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50\"\n\n[[package]]\nname = \"toml\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"transpose\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ad61aed86bc3faea4300c7aee358b4c6d0c8d6ccc36524c96e4c92ccf26e77e\"\ndependencies = [\n \"num-integer\",\n \"strength_reduce\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"uuid\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a183cf7feeba97b4dd1c0d46788634f6221d87fa961b305bed08c851829efcc0\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.60\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.60\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96\"\n\n[[package]]\nname = \"weezl\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53a85b86a771b1c87058196170769dd264f66c0782acf1ae6cc51bfd64b39082\"\n\n[[package]]\nname = \"which\"\nversion = \"4.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87ba24419a2078cd2b0f2ede2691b6c66d8e47836da3b6db8265ebad47afbfc7\"\ndependencies = [\n \"either\",\n \"home\",\n \"once_cell\",\n \"rustix\",\n]\n\n[[package]]\nname = \"widestring\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7219d36b6eac893fa81e84ebe06485e7dcbb616177469b142df14f1f4deb1311\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0\"\n\n[[package]]\nname = \"zune-inflate\"\nversion = \"0.2.54\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73ab332fe2f6680068f3582b16a24f90ad7096d5d39b974d1c0aff0125116f02\"\ndependencies = [\n \"simd-adler32\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.087890625,
          "content": "[workspace]\n\nmembers = [\n    \"libclamav_rust\",\n]\n\n[profile.dev.package.\"*\"]\nopt-level = 2\n"
        },
        {
          "name": "ChangeLog.md",
          "type": "blob",
          "size": 0.12109375,
          "content": "# ChangeLog\n\nClamAV is Open Source! So check out our work\n [on GitHub](https://github.com/Cisco-Talos/clamav-devel/commits)."
        },
        {
          "name": "INSTALL-cross-linux-arm64.md",
          "type": "blob",
          "size": 10.314453125,
          "content": "# Cross-compiling ClamAV on Linux for arm64\n\nThese are instructions to cross-compile ClamAV on Linux amd64 (`x86_64-unknown-linux-gnu`) with GCC for Linux arm64 (`aarch64-unknown-linux-gnu`).\n\n> _Note_: These build instructions were written for Ubuntu. You may need to change a few steps to work with your distro.\n\n## Install build tools, if missing\n\nInstall the GCC/G++ and Rust toolchains needed to cross-compile to aarch64:\n\n```bash\n# Install toolchain\nsudo apt install -y g++-aarch64-linux-gnu\nrustup target add aarch64-unknown-linux-gnu\n```\n\n## Install build dependencies\n\nIf you have a sysroot for your `aarch64-unknown-linux-gnu` target platform with the required dependencies installed, skip this step. Else, do these things to install arm64 (aarch64) versions of the ClamAV library dependencies on the local host.\n\n```bash\nsudo dpkg --add-architecture arm64\n```\n\nCreate a new .list file in `/etc/apt/sources.list.d`:\n\n```bash\nsudo vim  /etc/apt/sources.list.d/arm-cross-compile-sources.list\n```\n\nAdd arm64 package sources to this new list:\n```\ndeb [arch=arm64] http://ports.ubuntu.com/ focal main restricted\ndeb [arch=arm64] http://ports.ubuntu.com/ focal-updates main restricted\ndeb [arch=arm64] http://ports.ubuntu.com/ focal universe\ndeb [arch=arm64] http://ports.ubuntu.com/ focal-updates universe\ndeb [arch=arm64] http://ports.ubuntu.com/ focal multiverse\ndeb [arch=arm64] http://ports.ubuntu.com/ focal-updates multiverse\ndeb [arch=arm64] http://ports.ubuntu.com/ focal-backports main restricted universe multiverse\n```\n\n> _Tip_: \"focal\" is for Ubuntu 20.04LTS. You may need to swap to another to match your release:\n> - focal (20.04LTS)\n> - jammy (22.04LTS)\n> - kinetic (22.10)\n> - lunar (23.04)\n> - mantic (23.10)\n>\n> See https://packages.ubuntu.com/ for more.\n\nNow install the arm64 libraries:\n\n```bash\napt-get update && apt-get install -y \\\n  check:arm64 \\\n  libbz2-dev:arm64 \\\n  libcurl4-openssl-dev:arm64 \\\n  libjson-c-dev:arm64 \\\n  libmilter-dev:arm64 \\\n  libncurses5-dev:arm64 \\\n  libpcre2-dev:arm64 \\\n  libssl-dev:arm64 \\\n  libxml2-dev:arm64 \\\n  zlib1g-dev:arm64\n```\n\nAfter install, the `.a` and `.so` libraries will be found under `/usr/lib/aarch64-linux-gnu/`. The headers are the same as for any other arch, so those will be under `/usr/include/` as per usual.\n\n## Create a CMake toolchain file\n\nA CMake toolchain file specifies some toolchain specific variables.\n\nNote: The `CMAKE_SYSROOT` variable may **not** be set using the `cmake -D CMAKE_SYROOT=PATH` method and must be in this file. Meanwhile, some other variables (namely `CMAKE_INSTALL_PREFIX`) *cannot* be set in the toolchain file, and should be passed as a command parameter.\n\n## Help Cargo find GCC (possibly needed)\n\nOn some systems, `cargo` does not find the right GCC executable and emits this error:\n```\n = note: cc: error: unrecognized command-line option '-m64'\n```\n\n**If** this error occurs during the build, set the following environment variables and then try again:\n```sh\nexport HOST_CC=gcc\nexport CC_x86_64_unknown_linux_gnu=/usr/bin/x86_64-linux-gnu-gcc\nexport CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/x86_64-linux-gnu-gcc\n```\n\n> _Note_: Your specific path to and executable name for GCC may vary depending on your platform.\n\n> _Credit_: [Kornel on Stack Overflow](https://stackoverflow.com/a/72546887/3430496)\n\n### If using a sysroot\n\n`CMAKE_TOOLCHAIN_ARM64.cmake`:\n```cmake\n# Platform\nset(CMAKE_SYSTEM_NAME       Linux)\nset(CMAKE_SYSTEM_PROCESSOR  arm64)\nset(CMAKE_C_COMPILER        \"aarch64-linux-gnu-gcc\")\nset(CMAKE_CXX_COMPILER      \"aarch64-linux-gnu-g++\")\nset(RUST_COMPILER_TARGET    \"aarch64-unknown-linux-gnu\")\n\n# Project Variables needed to cross compile\nset(HAVE_ATTRIB_ALIGNED     1)\nset(HAVE_ATTRIB_PACKED      1)\nset(HAVE_UNAME_SYSCALL      1)\nset(HAVE_SAR                1)\nset(HAVE_FD_PASSING         1)\nset(MMAP_FOR_CROSSCOMPILING ON)\nset(ENABLE_SYSTEMD          OFF)\n\nset( test_run_result\n     \"PLEASE_FILL_OUT-FAILED_TO_RUN\"\n     CACHE STRING \"Result from try_run\" FORCE)\n\nset( test_run_result__TRYRUN_OUTPUT\n     \"PLEASE_FILL_OUT-NOTFOUND\"\n     CACHE STRING \"Output from try_run\" FORCE)\n\n#\n# Dependencies\n#\n\n# If using a sysroot / rootfs for the target, set these.\nset(CMAKE_SYSROOT           /opt/aarch64-wrs-linux-sysroot)\n\n# If your CMAKE_SYSROOT directory is readonly, or for some reason you want to install to a different staging prefix before copying  to your host, set this:\n#set(CMAKE_STAGING_PREFIX    /home/user/stage)\n\n# Note, you may need to set ENABLE_JSON_SHARED if your sysroot provides libjson-c.so instead of libjson-c.a.\n#set(ENABLE_JSON_SHARED      ON)\n\n# You may need to set the following if CMake has some trouble finding the dependencies.\n# For example if you have `libjson-c.a` in your sysroot, here: `/opt/aarch64-wrs-linux-sysroot/usr/lib64/libjson-c.a`\n# then you would set:\n#set(JSONC_LIBRARY           \"/usr/lib64/libjson-c.a\")\n\n#\n# Uncomment these as needed:\n#\n#set(JSONC_INCLUDE_DIR       \"/usr/include/json-c\")\n#set(JSONC_LIBRARY           \"/usr/lib64/libjson-c.a\")\n#set(ENABLE_JSON_SHARED      OFF)\n\n#set(BZIP2_INCLUDE_DIR       \"/usr/include/\")\n#set(BZIP2_LIBRARY           \"/usr/lib64/libbz2.a\")\n\n#set(OPENSSL_ROOT_DIR        \"/usr/\")\n#set(OPENSSL_INCLUDE_DIR     \"/usr/include/\")\n#set(OPENSSL_CRYPTO_LIBRARY  \"/usr/lib64/libcrypto.so\")\n#set(OPENSSL_SSL_LIBRARY     \"/usr/lib64/libssl.so\")\n\n#set(LIBXML2_INCLUDE_DIR     \"/usr/include/libxml2\")\n#set(LIBXML2_LIBRARY         \"/usr/lib64/libxml2.so\")\n\n#set(PCRE2_INCLUDE_DIR       \"/usr/include/\")\n#set(PCRE2_LIBRARY           \"/usr/lib64/libpcre2-8.so\")\n\n#set(CURSES_INCLUDE_DIR      \"/usr/include/\")\n#set(CURSES_LIBRARY          \"/usr/lib/aarch64-linux-gnu/libncurses.a;/usr/lib/aarch64-linux-gnu/libtinfo.a\")\n# Tip: You may not need to also link with libtinfo.a, depending on what your distribution provides:\n#set(CURSES_LIBRARY          \"/usr/lib/aarch64-linux-gnu/libncurses.a\")\n# Tip: Alternatively, you could link with the shared library:\n#set(CURSES_LIBRARY          \"/usr/lib/aarch64-linux-gnu/libncurses.so\")\n\n#set(ZLIB_INCLUDE_DIR        \"/usr/include/\")\n#set(ZLIB_LIBRARY            \"/usr/lib64/libz.so\")\n\n#set(LIBCHECK_INCLUDE_DIR    \"/usr/include/\")\n#set(LIBCHECK_LIBRARY        \"/usr/lib64/libcheck.a\")\n```\n\n### If not using a sysroot\n\nWithout a sysroot, you must tell CMake exactly where to find the library dependencies built for aarch64.\n\n> _IMPORTANT_: Without a sysroot, your runtime platform must have these EXACT SAME libraries.\n\n`CMAKE_TOOLCHAIN_ARM64.cmake`:\n```cmake\n# Platform\nset(CMAKE_SYSTEM_NAME       Linux)\nset(CMAKE_SYSTEM_PROCESSOR  arm64)\nset(CMAKE_C_COMPILER        \"aarch64-linux-gnu-gcc\")\nset(CMAKE_CXX_COMPILER      \"aarch64-linux-gnu-g++\")\nset(RUST_COMPILER_TARGET    \"aarch64-unknown-linux-gnu\")\n\n# Project Variables needed to cross compile\nset(HAVE_ATTRIB_ALIGNED     1)\nset(HAVE_ATTRIB_PACKED      1)\nset(HAVE_UNAME_SYSCALL      1)\nset(HAVE_SAR                1)\nset(HAVE_FD_PASSING         1)\nset(MMAP_FOR_CROSSCOMPILING ON)\nset(ENABLE_SYSTEMD          OFF)\n\nset( test_run_result\n     \"PLEASE_FILL_OUT-FAILED_TO_RUN\"\n     CACHE STRING \"Result from try_run\" FORCE)\n\nset( test_run_result__TRYRUN_OUTPUT\n     \"PLEASE_FILL_OUT-NOTFOUND\"\n     CACHE STRING \"Output from try_run\" FORCE)\n\n#\n# Dependencies\n#\n\nset(JSONC_INCLUDE_DIR       \"/usr/include/json-c\")\nset(JSONC_LIBRARY           \"/usr/lib/aarch64-linux-gnu/libjson-c.a\")\nset(ENABLE_JSON_SHARED      OFF)\n\nset(BZIP2_INCLUDE_DIR       \"/usr/include/\")\nset(BZIP2_LIBRARY           \"/usr/lib/aarch64-linux-gnu/libbz2.a\")\n\nset(OPENSSL_ROOT_DIR        \"/usr/\")\nset(OPENSSL_INCLUDE_DIR     \"/usr/include/\")\nset(OPENSSL_CRYPTO_LIBRARY  \"/usr/lib/aarch64-linux-gnu/libcrypto.so\")\nset(OPENSSL_SSL_LIBRARY     \"/usr/lib/aarch64-linux-gnu/libssl.so\")\n\nset(LIBXML2_INCLUDE_DIR     \"/usr/include/libxml2\")\nset(LIBXML2_LIBRARY         \"/usr/lib/aarch64-linux-gnu/libxml2.so\")\n\nset(PCRE2_INCLUDE_DIR       \"/usr/include/\")\nset(PCRE2_LIBRARY           \"/usr/lib/aarch64-linux-gnu/libpcre2-8.so\")\n\nset(CURSES_INCLUDE_DIR      \"/usr/include/\")\nset(CURSES_LIBRARY          \"/usr/lib/aarch64-linux-gnu/libncurses.a;/usr/lib/aarch64-linux-gnu/libtinfo.a\")\n# Tip: You may not need to also link with libtinfo.a, depending on what your distribution provides:\n#set(CURSES_LIBRARY          \"/usr/lib/aarch64-linux-gnu/libncurses.a\")\n# Tip: Alternatively, you could link with the shared library:\n#set(CURSES_LIBRARY          \"/usr/lib/aarch64-linux-gnu/libncurses.so\")\n\nset(ZLIB_INCLUDE_DIR        \"/usr/include/\")\nset(ZLIB_LIBRARY            \"/usr/lib/aarch64-linux-gnu/libz.so\")\n\nset(LIBCHECK_INCLUDE_DIR    \"/usr/include/\")\nset(LIBCHECK_LIBRARY        \"/usr/lib/aarch64-linux-gnu/libcheck.a\")\n```\n\n## Build ClamAV\n\nYou may need to adjust the paths in the command below to suit your needs.\n\nYou'll definitely need to set `CMAKE_STAGING_PREFIX` to your own path, or maybe remove it (see the note, below).\n\nYou may wish to set `CMAKE_INSTALL_PREFIX` to some directory other than `/usr`\n\n> _Note_: If using a sysroot and `CMAKE_SYSROOT` is set in your `CMAKE_TOOLCHAIN_ARM64.cmake` file, then the `make install` command will install to that sysroot directory. If you want, you can override it with `CMAKE_STAGING_PREFIX`. After the `make install`, it will be on you to copy the stuff from your staging directory to target system. The instructions below do this, because you may not wish to contaminate your sysroot with output from this build, or because your sysroot may be read-only.\n\n```bash\nmkdir build-arm64 && cd build-arm64\n\ncmake .. \\\n    -D CMAKE_TOOLCHAIN_FILE=(pwd)/../CMAKE_TOOLCHAIN_ARM64.cmake \\\n    -D ENABLE_STATIC_LIB=OFF \\\n    -D ENABLE_SHARED_LIB=ON \\\n    -D MAINTAINER_MODE=OFF \\\n    -D ENABLE_EXAMPLES=OFF \\\n    -D BYTECODE_RUNTIME=interpreter \\\n    -D CMAKE_BUILD_TYPE=Release \\\n    -D CMAKE_INSTALL_PREFIX=\"/usr\" \\\n    -D CMAKE_STAGING_PREFIX=/home/user/stage/usr\n\nmake\nmake install\n```\n\n## Verify it built for right platform\n\nWe cannot run the ClamAV unit test suite, because we're cross compiling and can't run the programs we build. But we can do a very small test with the Unix `file` command to see that it built for the right platform. For example:\n\n```bash\nfile install/bin/clamscan\n```\n\nExample output:\n`install/bin/clamscan: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID[sha1]=289a6b738e7421c5bb09c7ee5fc5bb20bfe98025, for GNU/Linux 3.7.0, with debug_info, not stripped`\n\nIf everything looks good, you can probably copy the install files to your system and run it.\n"
        },
        {
          "name": "INSTALL-cross-windows-arm64.md",
          "type": "blob",
          "size": 5.1455078125,
          "content": "# Cross-compiling ClamAV on Windows for ARM64\n\nThese are instructions to cross-compile ClamAV on Windows x64 (`x86_64-pc-windows-msvc`) with GCC for Linux arm64 (`aarch64-pc-windows-msvc`).\n\n## Install build tools, if missing\n\nUse the Visual Studio Installer tools to add the ARM64 components. E.g. this stuff:\n- MSVC v143 - VS 2022 C++ ARM build tools (Latest)\n- MSVC v143 - VS 2022 C++ ARM Spectre-mitigated libs (Latest)\n- MSVC v143 - VS 2022 C++ ARM64/ARM64EC build tools (Latest)\n- MSVC v143 - VS 2022 C++ ARM64/ARM64EC Spectre-mitigated libs (Latest)\n- C++ ATL for latest v143 build tools (ARM)\n- C++ ATL for latest v143 build tools (ARM64/ARM64EC)\n- C++ ATL for latest v143 build tools with Spectre-Mitigations (ARM)\n- C++ ATL for latest v143 build tools with Spectre-Mitigations (ARM64/ARM64EC)\n- C++ MFC for latest v143 build tools (ARM)\n- C++ MFC for latest v143 build tools (ARM64/ARM64EC)\n- C++ MFC for latest v143 build tools with Spectre-Mitigations (ARM)\n- C++ MFC for latest v143 build tools with Spectre-Mitigations (ARM64/ARM64EC)\n\nInstall the Rust toolchains needed to cross-compile to arm64:\n\n```powershell\nrustup target add aarch64-pc-windows-msvc\n```\n\n## Use Mussels to build ARM64 C-based library dependencies\n\nSee the [online documentation regarding building dependencies with Mussels](https://docs.clamav.net/manual/Development/build-installer-packages.html#windows). To build for ARM64, change the commands to build like this:\n\n```powershell\nmsl build -t arm64 clamav_deps\n```\n\nOnce the build is complete, you'll find the ARM64 compiled libraries under `~\\.mussels\\install\\arm64\\`.\n\n## Create a CMake toolchain file\n\nA CMake toolchain file specifies some toolchain specific variables.\n\n`CMAKE_TOOLCHAIN_ARM64.cmake`:\n```cmake\n# Platform\nset(CMAKE_SYSTEM_NAME       Windows)\nset(CMAKE_SYSTEM_PROCESSOR  arm64)\nset(RUST_COMPILER_TARGET    \"aarch64-pc-windows-msvc\")\n\n# Project Variables needed to cross compile\nset(HAVE_PRAGMA_PACK        1)\nset(HAVE_SAR                1)\nset(MMAP_FOR_CROSSCOMPILING OFF)\nset(ENABLE_SYSTEMD          OFF)\n\nset( test_run_result\n     \"PLEASE_FILL_OUT-FAILED_TO_RUN\"\n     CACHE STRING \"Result from try_run\" FORCE)\n\nset( test_run_result__TRYRUN_OUTPUT\n     \"PLEASE_FILL_OUT-NOTFOUND\"\n     CACHE STRING \"Output from try_run\" FORCE)\n```\n\n## Build ClamAV\n\nYou may need to adjust the paths in the command below to suit your needs.\n\n```powershell\nmkdir build-arm64\ncd build-arm64\n\ncmake .. -G \"Visual Studio 17 2022\" -A arm64 `\n    -D JSONC_INCLUDE_DIR=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\include\\\\json-c\" `\n    -D JSONC_LIBRARY=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\lib\\\\json-c.lib\" `\n    -D BZIP2_INCLUDE_DIR=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\include\" `\n    -D BZIP2_LIBRARY_RELEASE=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\lib\\\\libbz2.lib\" `\n    -D CURL_INCLUDE_DIR=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\include\" `\n    -D CURL_LIBRARY=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\lib\\\\libcurl_imp.lib\" `\n    -D OPENSSL_ROOT_DIR=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\\" `\n    -D OPENSSL_INCLUDE_DIR=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\include\" `\n    -D LIB_EAY_DEBUG=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\lib\\\\libcrypto.lib\" `\n    -D SSL_EAY_DEBUG=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\lib\\\\libssl.lib\" `\n    -D ZLIB_LIBRARY=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\lib\\\\libssl.lib\" `\n    -D LIBXML2_INCLUDE_DIR=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\include\\\\libxml\" `\n    -D LIBXML2_LIBRARY=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\lib\\\\libxml2.lib\" `\n    -D PCRE2_INCLUDE_DIR=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\include\" `\n    -D PCRE2_LIBRARY=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\lib\\\\pcre2-8.lib\" `\n    -D PDCURSES_INCLUDE_DIR=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\include\" `\n    -D CURSES_LIBRARY=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\lib\\\\pdcurses.lib\" `\n    -D PThreadW32_INCLUDE_DIR=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\include\" `\n    -D PThreadW32_LIBRARY=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\lib\\\\pthreadVC3.lib\" `\n    -D ZLIB_INCLUDE_DIR=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\include\" `\n    -D ZLIB_LIBRARY=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\lib\\\\zlibstatic.lib\" `\n    -D LIBCHECK_INCLUDE_DIR=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\include\" `\n    -D LIBCHECK_LIBRARY=\"$HOME\\\\.mussels\\\\install\\\\arm64\\\\lib\\\\checkDynamic.lib\" `\n    -D CMAKE_TOOLCHAIN_FILE=$pwd\\\\..\\\\CMAKE_TOOLCHAIN_ARM64.cmake `\n    -D ENABLE_STATIC_LIB=OFF `\n    -D ENABLE_SHARED_LIB=ON `\n    -D MAINTAINER_MODE=OFF `\n    -D ENABLE_EXAMPLES=OFF `\n    -D BYTECODE_RUNTIME=interpreter `\n    -D HAVE_PRAGMA_PACK=1 `\n    -D HAVE_SAR=1 `\n    -D CMAKE_INSTALL_PREFIX=\"install\"\n\ncmake --build . --config Release --target install\n```\n\n## Verify it built for right platform\n\nWe cannot run the ClamAV unit test suite, because we're cross compiling and can't run the programs we build. But we can do a very small test to see that it built for the right platform.\n\nPop into WSL2 (Windows Subsystem for Linux 2) to make use of the `file` utility:\n\n```powershell\n❯ wsl\nWelcome to fish, the friendly interactive shell\nType `help` for instructions on how to use fish\n\nclamav-micah-2/build-arm64 on  main [$] via C v9.4.0-gcc via △ v3.27.2\n❯ file install/clamscan.exe\ninstall/clamscan.exe: PE32+ executable (console) Aarch64, for MS Windows\n```\n\nIf everything looks good, you can probably copy the install files to your system and run it.\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 26.970703125,
          "content": "# Installing ClamAV\n\nSee our online documentation for installation instructions:\n- [Installing ClamAV Main Page](https://docs.clamav.net/manual/Installing.html)\n- [Third-Party Package Installation](https://docs.clamav.net/manual/Installing/Packages.html)\n\n**For step-by-step compiling instructions** for each major operating system\nand distribution, see:\n- [Unix/Linux/Mac](https://docs.clamav.net/manual/Installing/Installing-from-source-Unix.html)\n- [Windows](https://docs.clamav.net/manual/Installing/Installing-from-source-Windows.html)\n\nYou can find additional tips for development builds in our\n[online documentation](https://docs.clamav.net/manual/Development/development-builds.html).\n\n> _Tip_: If you have a source tarball from an official release, you can find\n> a copy of the online documentation in the `docs/html` directory.\n\nThe rest of this document serves as a reference, detailing each of the build\nconfiguration options.\n\n**Table Of Contents**\n\n- [Installing ClamAV](#installing-clamav)\n  - [Known Issues / To-do's:](#known-issues--to-dos)\n  - [Build Requirements](#build-requirements)\n    - [Build Tools](#build-tools)\n    - [External Library Dependencies](#external-library-dependencies)\n      - [libclamav dependencies](#libclamav-dependencies)\n      - [libfreshclam dependencies](#libfreshclam-dependencies)\n      - [Program dependencies](#program-dependencies)\n  - [Getting Started](#getting-started)\n  - [CMake Basics](#cmake-basics)\n    - [CMake Generators](#cmake-generators)\n    - [CMake Build Types](#cmake-build-types)\n    - [Customizing the Install Directories](#customizing-the-install-directories)\n    - [Running the Public Test Suite](#running-the-public-test-suite)\n  - [Custom CMake Config Options](#custom-cmake-config-options)\n  - [External Library Dependency Configuration Options](#external-library-dependency-configuration-options)\n    - [`libcheck`](#libcheck)\n    - [`bzip2`](#bzip2)\n    - [`zlib`](#zlib)\n    - [`libxml2`](#libxml2)\n    - [`libpcre2`](#libpcre2)\n    - [`openssl` (`libcrypto`, `libssl`)](#openssl-libcrypto-libssl)\n    - [`libjson-c`](#libjson-c)\n    - [`libmspack`](#libmspack)\n    - [`iconv` (POSIX-only)](#iconv-posix-only)\n    - [`pthreads-win32` (Windows-only)](#pthreads-win32-windows-only)\n    - [`llvm` (optional, _see \"Bytecode Runtime\" section_)](#llvm-optional-see-bytecode-runtime-section)\n    - [`libcurl`](#libcurl)\n    - [`ncurses` or `pdcurses`, for `clamdtop`](#ncurses-or-pdcurses-for-clamdtop)\n    - [Bytecode Runtime](#bytecode-runtime)\n      - [Interpreter Bytecode Runtime](#interpreter-bytecode-runtime)\n      - [LLVM JIT Bytecode Runtime](#llvm-jit-bytecode-runtime)\n      - [Disabling the Bytecode Runtime](#disabling-the-bytecode-runtime)\n  - [Compiling For Multiple Architectures (Cross-Compiling)](#compiling-for-multiple-architectures-cross-compiling)\n  - [Un-install](#un-install)\n\n## Known Issues / To-do's:\n\n- Complete the `MAINTAINER_MODE` option to generate jsparse files with GPerf.\n\n- The test suite will fail to run if you have `pytest` from Python2 installed\n  and you don't have `pytest` from Python3 installed. If this happens, run:\n  `python3 -m pip install pytest` and then delete your build directory before\n  recompiling clamav and trying again.\n\n- The documentation generated using Doxygen isn't very good.\n\n## Build Requirements\n\n### Build Tools\n\nAs of ClamAV 0.104, CMake is required to build ClamAV.\n\nThe Windows Visual Studio and Autotools build systems have been removed.\n\nYou will need:\n- CMake (3.14+ for Unix/Linux; 3.16+ for Windows)\n- A C compiler toolchain such as `gcc`, `clang`, or Microsoft Visual Studio.\n- The Rust compiler toolchain.\n\nRecommended tools:\n- pkg-config\n- Python 3 (to run the test suite)\n\nFor Maintainer-mode only (not recommended):\n- Flex\n- Bison\n- Gperf\n\nOn systems with multiple implementations of build-time tools it may be\ndesirable to select a specific implementation to use rather than relying on\nCMake's logic. See [Custom CMake Config Options](#custom-cmake-config-options)\nfor information on this topic.\n\n### External Library Dependencies\n\nFor installation instructions, see our online documentation:\n\n- [Dependencies - Unix/Linux/Mac ](https://docs.clamav.net/manual/Installing/Installing-from-source-Unix.html#install-prerequisites)\n\n- [Dependencies - Windows](https://docs.clamav.net/manual/Installing/Installing-from-source-Windows.html#building-the-library-dependencies)\n\n> _Important_: Linux users will need the \"-dev\" or \"-devel\" package variants\n> which include C headers. For macOS, Homebrew doesn't separate the headers.\n\n#### libclamav dependencies\n\nApp developers that only need libclamav can use the `-D ENABLE_LIBCLAMAV_ONLY`\noption to bypass the libfreshclam and program dependencies.\n\nlibclamav requires these library dependencies:\n\n- `libbz2` / `bzip2`\n- `libz` / `zlib`\n- `libxml2`\n- `libpcre2`\n- `openssl`\n- `json-c`\n- `libjson-c` / `json-c`\n- `libmspack` (built-in by default, enable with `ENABLE_EXTERNAL_MSPACK=ON`)\n- `libiconv` (built-in to `libc` 99% of the time, not requires on Windows)\n- `pthreads` (provided by Linux/Unix; requires `pthreads-win32` on Windows)\n- `llvm` (optional, see: [Bytecode Runtime](#bytecode-runtime), below)\n- `libcheck` (default, disable with `ENABLE_TESTS=OFF`)\n\n#### libfreshclam dependencies\n\nIf you are building an app and need libclamav _and_ libfreshclam but don't need\nto build the ClamAV programs, configure the build with `-D ENABLE_APP=OFF`.\n\nlibfreshclam adds these additional library dependencies:\n\n- `libcurl`\n\n#### Program dependencies\n\nFor regular folk who want the ClamAV apps, you'll also need:\n\n- `libmilter` (Unix/Linux-only, disable with `ENABLE_MILTER=OFF`)\n- `ncurses` or `pdcurses`, for ClamDTop.\n\nOptionally, if on a Linux distro with SystemD:\n\n- `systemd`, so ClamD, FreshClam, ClamOnAcc SystemD service.\n- `libsystemd`, so ClamD will support the `clamd.ctl` socket.\n\n## Getting Started\n\n***Important***: The following instructions assume that you have created a\n`build` subdirectory and that subsequent commands are performed from said\ndirectory, like so:\n\n```sh\nmkdir build && cd build\n```\n\n## CMake Basics\n\nCMake isn't actually a build system. It is a meta-build system. In other words,\nCMake is a build system *generator*.\n\nOn Unix systems, CMake generates Makefiles by default, just like Autotools.\nOn Windows, it generates Visual Studio projects by default.\n\nThe process for using CMake is very similar to Autotools:\n1. *Configure*: Generate the build system.\n2. *Build*: Compile the project.\n3. *Install*: Install to the \"prefix\" directory.\n\n### CMake Generators\n\nYou can choose to use a different generator using the `-G` option.\nFor example, on macOS you can generate Xcode projects.\n\nNinja is a popular build system, available on both Unix and Windows.\nIf you want to use Ninja, you could configure the project with:\n\n```sh\ncmake .. -G Ninja\n```\n\nFor more information about generators, refer to the\n[CMake documentation](https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html)\n\n### CMake Build Types\n\nCMake provides four build types. These are:\n- `Release`: Optimized for speed, with no debugging info, code or asserts.\n- `Debug`: No optimization, asserts enabled, debugging info included.\n- `RelWithDebInfo`: Like `Release`, but *with* debug info, but no asserts.\n- `MinSizeRel`: Like `Release` but optimizing for size rather than speed.\n\nThere are two basic types of generators. How you select the build type for\nyour build will depend on which type of generator you're using:\n\n1. **Single-config generators** (Unix Makefiles, Ninja)\n\n  These generate a build system that can only build a single build type.\n\n  With a single-config generator, you need to specify the build type up\n  front. You can do this using the `-G` option. For example:\n  ```sh\n  # Configure\n  cmake .. -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\n  # Build\n  cmake --build .\n  ```\n\n2. **Multi-config generators** (Xcode, Visual Studio, Ninja Multi-Config)\n\n  These generate a build system capable of building more than one build type.\n\n  With a multi-config generator, the generated build system can build all\n  of CMake's different build types. It's up to you to decide which type, or\n  \"config\" you want to build at build time instead of at configuration time.\n  You can do that with the `--config` option. For example:\n  ```sh\n  # Configure\n  cmake .. -G \"Ninja Multi-Config\"\n  # Build\n  cmake --build . --config RelWithDebInfo\n  ```\n\n> _Tip_: `RelWithDebInfo` is probably the best option for open source projects.\n> It will have the speed optimizations you need. And, if a crash occurs, the\n> crash backtrace you obtain with a debugger will significantly help in\n> identifying the bug.\n\nFor multi-config generators, you _will_ also need to specify the config when\nyou use `ctest` to run the test suite, or if using `cpack` to build a package.\n\n> _Tip_: When using the default generator on Unix operating systems, you can\n> also simply call `make` after the first `cmake` command, like so:\n> ```sh\n> # Configure\n> cmake ..\n> # Build\n> make -j12\n> # Install\n> sudo make install\n> ```\n>\n> Similarly, if using Ninja, you could call `ninja` directly instead.\n> ```sh\n> # Configure\n> cmake .. -G Ninja\n> # Build\n> ninja\n> # Install\n> sudo ninja install\n> ```\n>\n> And for Windows & Mac developers, if generating Visual Studio or Xcode\n> projects, you're free to open those project solutions in Visual Studio or\n> Xcode after the configure step, to use for compiling AND debugging, which\n> may be very useful.\n\n### Customizing the Install Directories\n\nA default from-source install on a Unix system will go in `/usr/local`, with:\n- applications in `bin`,\n- daemons in `sbin`,\n- libraries in `lib`,\n- headers in `include`,\n- configs in `etc`,\n- and databases in `share/clamav`.\n\nUse the following variables to customize the install paths:\n\n- `CMAKE_INSTALL_PREFIX`: Customize the install prefix.\n- `APP_CONFIG_DIRECTORY`: Customize the config directory, may be relative.\n- `DATABASE_DIRECTORY`: Customize the database directory, may be relative.\n- `SYSTEMD_UNIT_DIR`: Install SystemD service files to a specific directory.\n\nThis example configuration should be familiar if you've used the ClamAV\npackages provided by Debian, Ubuntu, Alpine, and some other distributions:\n```sh\n# Configure\ncmake .. \\\n    -D CMAKE_BUILD_TYPE=RelWithDebInfo \\\n    -D CMAKE_INSTALL_PREFIX=/usr \\\n    -D CMAKE_INSTALL_LIBDIR=/usr/lib \\\n    -D APP_CONFIG_DIRECTORY=/etc/clamav \\\n    -D DATABASE_DIRECTORY=/var/lib/clamav \\\n    -D ENABLE_JSON_SHARED=OFF # require libjson-c to be static\n# Build\ncmake --build .\n# Install\nsudo cmake --build . --target install\n```\n\nClamAV has a couple other important paths you can configure. At this time,\nthese are only configurable through the `clamd.conf` application config file:\n\n- `LocalSocket`: You may configure ClamD to listen on a TCP socket or on a\n  \"local\" socket (a Unix socket). A local socket is probably best, for safety.\n  But that means you'll need to select a path for the local socket. The sample\n  config suggests using the `/tmp` directory, but you may wish to select\n  a directory like `/var/run/clamav`.\n\n- `TemporaryDirectory`: ClamAV creates a lot of temp files when scanning.\n  By default, ClamD and ClamScan will use the system's default temp directory,\n  which is typically `/tmp` or `/var/tmp`. But it may be best to give ClamAV\n  its own directory. Maybe `/var/lib/clamav-tmp`.\n\n### Running the Public Test Suite\n\nThe option to build so that you can run the tests is enabled by default.\nIt requires that you provide `python3` and `libcheck`.\n\nIf you're building with `ENABLE_LIBCLAMAV_ONLY=ON` or `ENABLE_APP=OFF`, then\n`libcheck` will still be required and you can still run the tests, but it will\nskip all app tests and only run the libclamav unit tests.\n\nTo run the tests, first build ClamAV, then run `ctest`.\nUse the following options as needed:\n\n- `-V`: Verbose\n\n  This option will show the test output. You may wish to use Pip (`pip3`) to\n  install `pytest` as well. If detected at configure-time, `pytest` will be\n  used to run the tests and will make it so you only see output from failed\n  tests.\n\n- `-C <config>`: Specify which build type to test (e.g. `RelWithDebInfo`).\n\n  This option is *only* required if using a multi-config generator, such as\n  \"Visual Studio\", \"Xcode\", or \"Ninja Multi-Config\".\n\nOn a typical Linux system, you'll probably just run this:\n```sh\n# Configure\ncmake .. -D CMAKE_BUILD_TYPE=RelWithDebInfo #... other options snipped\n# Build\ncmake --build .\n# Test\nctest\n```\n\nOn Windows, you may run something like this:\n```sh\n# Configure\ncmake .. #... other options snipped\n# Build\ncmake --build . --config RelWithDebInfo\n# Test\nctest -C RelWithDebInfo -V\n```\n\nIf you encounter a test failure, please re-run `ctest` with `-V` enabled and\nsubmit the output in a bug report\n[on GitHub Issues](https://github.com/Cisco-Talos/clamav/issues).\nThe test output is also saved to log files in the `unit_tests` directory.\nYou can zip those up and attach those instead.\n\n> _Tip_: You can configure with `-D ENABLE_TESTS=OFF` to disable test support.\n> This will also remove the dependency on Python and libcheck.\n\n## Custom CMake Config Options\n\nThe following is a complete list of CMake options unique to configuring ClamAV:\n\n- `APP_CONFIG_DIRECTORY`: Program config directory.\n  Relative to the `CMAKE_INSTALL_PREFIX` unless an absolute path is given.\n\n  _Default: Windows: `.`, POSIX: `etc`_\n\n- `DATABASE_DIRECTORY`: Database directory.\n  Relative to the `CMAKE_INSTALL_PREFIX` unless an absolute path is given.\n\n  _Default: Windows: `database`, POSIX: `share/clamav`_\n\n- `CLAMAV_USER`: ClamAV User (POSIX-only).\n\n  _Default: `clamav`_\n\n- `CLAMAV_GROUP`: ClamAV Group (POSIX-only).\n\n  _Default: `clamav`_\n\n- `MMAP_FOR_CROSSCOMPILING`: Force MMAP support for cross-compiling.\n\n  _Default: `OFF`_\n\n- `DISABLE_MPOOL`: Disable mpool support entirely.\n\n  _Default: `OFF`_\n\n- `BYTECODE_RUNTIME`: Bytecode Runtime, may be: `llvm`, `interpreter`, `none`.\n\n  _Default: `interpreter`_\n\n- `OPTIMIZE`: Allow compiler optimizations (eg. `-O3`). Set to `OFF` to disable\n  them (`-O0`).\n\n  _Default: `ON`_\n\n- `DO_NOT_SET_RPATH`: By default RPATH is set in executables resulting using\n  paths set at build time instead of using system defaults. By setting this\n  `ON` system defaults are used.\n\n  _Default: `OFF`_\n\n- `ENABLE_WERROR`: Compile time warnings will cause build failures (i.e.\n  `-Werror`)\n\n  _Default: `OFF`_\n\n- `ENABLE_ALL_THE_WARNINGS`: By default we use `-Wall -Wextra -Wformat-security`\n  for ClamAV libraries and programs. This option enables a whole lot more.\n\n  _Default: `OFF`_\n\n- `ENABLE_DEBUG`: Turn on extra debug output.\n  Disclaimer: Does nothing in the current version.\n\n  _Default: `OFF`_\n\n- `ENABLE_FUZZ`: Build statically linked fuzz targets _and nothing else_.\n  This feature is for fuzzing with OSS-Fuzz and reproducing fuzz bug reports\n  and requires the following environment variables to be set:\n  - CC = `which clang`\n  - CXX = `which clang++`\n  - SANITIZER = \"address\" _or_ \"undefined\" _or_ \"memory\"\n\n  _Default: `OFF`_\n\n- `ENABLE_EXTERNAL_MSPACK`: Use external mspack instead of internal libclammspack.\n\n  _Default: `OFF`_\n\n- `ENABLE_JSON_SHARED`: Prefer linking with libjson-c shared library instead of\n  static.\n\n  **Important**: Please set this to `OFF` if you're an application developer\n  that uses a different JSON library in your app _OR_ if you provide libclamav\n  that others may use in their apps. If you link libclamav with the json-c\n  shared library then downstream applications which use a different JSON\n  library may crash!\n\n  This option is default \"ON\" only because the libjson-c static library is not\n  available on many systems by default.\n\n  _Default: `ON`_\n\n- `ENABLE_APP`: Build the ClamAV programs (clamscan, clamd, clamdscan, sigtool,\n  clambc, clamdtop, clamsubmit, clamconf).\n\n  _Default: `ON`_\n\n- `ENABLE_CLAMONACC`: (Linux-only) Build the ClamOnAcc on-access scanning\n  daemon. Requires: `ENABLE_APP`\n\n  ClamOnAcc will not compile on MUSL-based Linux distros such as Alpine.\n\n  _Default: `ON`_\n\n- `ENABLE_MILTER`: (Posix-only) Build the clamav-milter Sendmail filter daemon.\n  Requires: `ENABLE_APP`\n\n  _Default: `OFF` for Mac & Windows, `ON` for Linux/Unix_\n\n- `ENABLE_UNRAR`: Build & install libclamunrar (UnRAR) and libclamunrar_iface.\n\n  _Default: `ON`_\n\n- `ENABLE_MAN_PAGES`: Generate man pages.\n\n  _Default: `ON` for Linux/Unix, `OFF` for Windows_\n\n- `ENABLE_DOXYGEN`: Generate Doxygen HTML documentation for `clamav.h`,\n  and `libfreshclam.h`. Requires Doxygen. *To-do*: Needs work.\n\n  _Default: `OFF`_\n\n- `ENABLE_EXAMPLES`: Build the example programs.\n\n  _Default: `OFF`_\n\n- `ENABLE_TESTS`: Enable support for running the test suite with `ctest`.\n\n  _Default: `ON`_\n\n- `ENABLE_LIBCLAMAV_ONLY`: Build libclamav only.\n\n  > _Tip_: This Excludes libfreshclam too! Use `ENABLE_APP=OFF` instead if\n  > you want libclamav and libfreshclam.\n\n  _Default: `OFF`_\n\n- `ENABLE_STATIC_LIB`: Build libclamav and/or libfreshclam static libraries.\n\n  > _Tip_: If you wish to build `clamscan` and the other programs statically,\n  > you must also set `ENABLE_SHARED_LIB=OFF`.\n\n  _Default: `OFF`_\n\n- `ENABLE_SHARED_LIB`: Build libclamav and/or libfreshclam shared libraries.\n\n  _Default: `ON`_\n\n- `ENABLE_SYSTEMD`: Install SystemD service files if SystemD is found.\n\n  _Default: `ON`_\n\n- `MAINTAINER_MODE`: Generate Yara lexer and grammar C source with Flex & Bison.\n  Generate Rust bindings (`libclamav_rust/src/sys.rs`).\n  *To-do*: Also generate JS parse source with Gperf.\n\n  _Default: `OFF`_\n\n- `SYSTEMD_UNIT_DIR`: Install SystemD service files to a specific directory.\n  This will fail the build if SystemD not found.\n\n  _Default: not set_\n\n- `PYTHON_FIND_VER`: Select a specific implementation of Python that will\n  be called during the test phase.\n\n  _Default: not set_\n\n- `RUST_COMPILER_TARGET`: Use a custom target triple to build the Rust components.\n  Needed for cross-compiling. You must also have installed the target toolchain.\n  See: https://doc.rust-lang.org/nightly/rustc/platform-support.html\n\n  _Default: not set_\n\n## External Library Dependency Configuration Options\n\nThe CMake tooling is good about finding installed dependencies on POSIX systems\nprovided that you have pkg-config installed, and the dependencies are installed\nin the standard locations (i.e. `/usr` and `/usr/local`).\n\nBut if you:\n- have custom install paths for the dependencies,\n- want to target static libraries, or\n- are building on Windows...\n\n... you may need to use the following build configuration options.\n\n### `libcheck`\n\n```sh\n  -D LIBCHECK_ROOT_DIR=\"_path to libcheck install root_\"\n  -D LIBCHECK_INCLUDE_DIR=\"_filepath of libcheck header directory_\"\n  -D LIBCHECK_LIBRARY=\"_filepath of libcheck library_\"\n```\n\n### `bzip2`\n\n```sh\n  -D BZIP2_INCLUDE_DIR=\"_filepath of bzip2 header directory_\"\n  -D BZIP2_LIBRARY_RELEASE=\"_filepath of bzip2 library_\"\n```\n\n### `zlib`\n\n```sh\n  -D ZLIB_INCLUDE_DIR=\"_filepath of zlib header directory_\"\n  -D ZLIB_LIBRARY=\"_filepath of zlib library_\"\n```\n\n### `libxml2`\n\n```sh\n  -D LIBXML2_INCLUDE_DIR=\"_filepath of libxml2 header directory_\"\n  -D LIBXML2_LIBRARY=\"_filepath of libxml2 library_\"\n```\n\n### `libpcre2`\n\n```sh\n  -D PCRE2_INCLUDE_DIR=\"_filepath of libpcre2 header directory_\"\n  -D PCRE2_LIBRARY=\"_filepath of libcpre2 library_\"\n```\n\n### `openssl` (`libcrypto`, `libssl`)\n\n```sh\n  -D OPENSSL_ROOT_DIR=\"_path to openssl install root_\"\n  -D OPENSSL_INCLUDE_DIR=\"_filepath of openssl header directory_\"\n  -D OPENSSL_CRYPTO_LIBRARY=\"_filepath of libcrypto library_\"\n  -D OPENSSL_SSL_LIBRARY=\"_filepath of libssl library_\"\n```\n\n_Tip_: For Windows, you may need to do this instead:\n```sh\n  -D OPENSSL_ROOT_DIR=\"_path to openssl install root_\"\n  -D OPENSSL_INCLUDE_DIR=\"_filepath of openssl header directory_\"\n  -D LIB_EAY_RELEASE=\"_filepath of libcrypto library_\"  # or LIB_EAY_DEBUG for Debug builds\n  -D SSL_EAY_RELEASE=\"_filepath of libssl library_\"     # or SSL_EAY_DEBUG for Debug builds\n```\n\n### `libjson-c`\n\n_Tip_: You're strongly encouraged to link with the a static json-c library.\n\n```sh\n  -D JSONC_INCLUDE_DIR=\"_path to json-c header directory_\"\n  -D JSONC_LIBRARY=\"_filepath of json-c library_\"\n```\n\n### `libmspack`\n\nThese options only apply if you use the `-D ENABLE_EXTERNAL_MSPACK=ON` option.\n\n```sh\n  -D MSPack_INCLUDE_DIR=\"_path to mspack header directory_\"\n  -D MSPack_LIBRARY=\"_filepath of libmspack library_\"\n```\n\n### `iconv` (POSIX-only)\n\nOn POSIX platforms, iconv might be part of the C library in which case you\nwould not want to specify an external iconv library.\n\n```sh\n  -D Iconv_INCLUDE_DIR=\"_path to iconv header directory_\"\n  -D Iconv_LIBRARY=\"_filepath of iconv library_\"\n```\n\n### `pthreads-win32` (Windows-only)\n\nOn POSIX platforms, pthread support is detected automatically.  On Windows, you\nneed to specify the following:\n\n```sh\n  -D PThreadW32_INCLUDE_DIR=\"_path to pthread-win32 header directory_\"\n  -D PThreadW32_LIBRARY=\"_filepath of pthread-win32 library_\"\n```\n\n### `llvm` (optional, _see \"Bytecode Runtime\" section_)\n\nSet:\n```sh\n  -D BYTECODE_RUNTIME=\"llvm\"\n```\n\nOptions for a custom LLVM install path, or to select a specific version if you\nhave multiple LLVM installations:\n```sh\n  -D LLVM_ROOT_DIR=\"_path to llvm install root_\"\n  -D LLVM_FIND_VERSION=\"8.0.1\"\n```\n\n### `libcurl`\n\n```sh\n  -D CURL_INCLUDE_DIR=\"_path to curl header directory_\"\n  -D CURL_LIBRARY=\"_filepath of curl library_\"\n```\n\n### `ncurses` or `pdcurses`, for `clamdtop`\n\n```sh\n  -D NCURSES_INCLUDE_DIR=\"_path to ncurses header directory_\"\n```\n\nor:\n```sh\n  -D PDCURSES_INCLUDE_DIR=\"_path to pdcurses header directory_\"\n```\n\nand:\n```sh\n  -D CURSES_LIBRARY=\"_filepath of curses library_\"\n```\n\n### Bytecode Runtime\n\nBytecode signatures are a type of executable plugin that provide extra\ndetection capabilities.\n\nClamAV has two bytecode runtimes:\n\n1. **Interpreter**: The bytecode interpreter evaluates and executes bytecode\n   instructions one by one.\n\n   With the interpreter, signature database (re)loads are faster, but execution\n   time for scans that make use of the bytecode signatures is slower.\n\n2. **LLVM**: LLVM can be used to Just-in-Time (JIT) compile bytecode signatures\n   at database load time.\n\n   With LLVM, signature database loading is slower, but bytecode signature\n   execution should be faster. Not all scans will run bytecode signatures, so\n   performance testing will depend heavily depending on what files are tested.\n\n   We can work with LLVM 8.0 to 13.x. \n\n#### Interpreter Bytecode Runtime\n\nAt the moment, the *interpreter* is the default runtime, while we work out\ncompatibility issues with newer versions of libLLVM. This default equates to:\n\n```sh\ncmake .. -D BYTECODE_RUNTIME=\"interpreter\"\n```\n\n#### LLVM JIT Bytecode Runtime\n\nIf you wish to build using LLVM JIT for the bytecode runtime instead of the\nbytecode interpreter, you will need to install the LLVM development libraries.\nClamAV currently supports LLVM versions 8.0 through 13.x.\n\nTo build with LLVM for the bytecode runtime, build with this option:\n```sh\ncmake .. \\\n  -D BYTECODE_RUNTIME=\"llvm\"\n```\n\nIf you have multiple LLVM installations, or have a custom path for the LLVM\ninstallation, you may also set `LLVM_ROOT_DIR` and `LLVM_FIND_VERSION` options\nto help CMake find the right LLVm installation. For example:\n```sh\n  -D LLVM_ROOT_DIR=\"/opt/llvm/8.0\"\n  -D LLVM_FIND_VERSION=\"8.0.1\"\n```\n\nIf the build fails to detect LLVM or linking with LLVM fails using the above\noptions, you may try adding this CMake parameter to enable\n[CMake's package-config feature](https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_PACKAGE_PREFER_CONFIG.html):\n```\n  -D CMAKE_FIND_PACKAGE_PREFER_CONFIG=TRUE\n```\nNormally, ClamAV would use the `FindLLVM.cmake` module in our `<src>/cmake`\ndirectory to find LLVM. With this option enabled, it will instead try to use\n`<LLVM_ROOT_DIR>/lib/cmake/llvm/LLVMConfig.cmake` to determine the LLVM package\nconfiguration.\n\n> _Known Issues_: Known issues building with LLVM:\n> - Enabling `CMAKE_FIND_PACKAGE_PREFER_CONFIG` may fail to build with some LLVM\n>   packages that are missing the `libPolly.a` library. This includes some LLVM\n>   packages distributed by Debian, Ubuntu, and OpenSUSE.\n> - Not enabling `CMAKE_FIND_PACKAGE_PREFER_CONFIG` may fail to build with some\n>   LLVM packages using `gcc` when RTTI was disabled for the LLVM build, but is\n>   enabled for the ClamAV build. Using `clang` instead of `gcc` may have better\n>   results.\n> - Building ClamAV in Debug-mode with a Release-LLVM build may fail, and\n>   building ClamAV in Release-mode with a Debug-LLVM build may fail.\n> - The unit tests may fail in Debug-mode builds on the `libclamav` \"bytecode\"\n>   test due to an assertion/abort.\n> - Windows-only: CMake fails to collect library dependencies when building with\n>   LLVM. That is, the tests will fail because it can't load libssl.dll and\n>   other DLL dependencies. This issue only applies when not using VCPkg.\n\n#### Disabling the Bytecode Runtime\n\nTo disable bytecode signature support entirely, you may build with this option:\n\n```sh\ncmake .. -D BYTECODE_RUNTIME=\"none\"\n```\n\n## Compiling For Multiple Architectures (Cross-Compiling)\n\nCross-compiling in ClamAV with CMake & Rust is experimental at this time.\nIf you have a need to cross-compile, your help and feedback testing and\nvalidating cross-compilation support would be appreciated.\n\nThe CMake cross-compiling documentation can be found here:\n[CMake Manual](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html)\n\nFor a cross-build, the library dependencies must have also been built for the\ntarget platform, and the CMake options set to target these libraries.\n\nClamAV's Rust toolchain integration also complicates the build.\nIn addition to specifying the toolchain for C/C++ through the CMake options\ndescribed in the CMake Manual, you will need to also select the target triple\nfor the Rust compiler toolchain. If you have a mismatch of targets between the\nC and Rust toolchains, it will fail to compile properly.\n\nThe ClamAV project provides a CMake option `-D RUST_COMPILER_TARGET=<triple>`\nthat mimics the CMake option when using Clang to cross-compile.\n\nRust installations typically only come with the target for your current system.\nSo you will need to install the desired toolchain using `rustup target add`.\nRun `rustup target add --help` for help.\nFor a list of available target triples, see:\nhttps://doc.rust-lang.org/nightly/rustc/platform-support.html\n\nStep-by-step instructions for cross-compiling ClamAV:\n- [Linux GCC amd64 to arm64](./INSTALL-cross-linux-arm64.md)\n- [Windows MSVC x64 to arm64](./INSTALL-cross-windows-arm64.md)\n\n## Un-install\n\nCMake doesn't provide a simple command to uninstall. However, CMake does build\nan `install_manifest.txt` file when you do the install. You can use the\nmanifest to remove the installed files.\n\nYou will find the manifest in the directory where you compiled ClamAV. If you\nfollowed the recommendations (above), then you will find it at\n`<clamav source directory>/build/install_manifest.txt`.\n\nFeel free to inspect the file so you're comfortable knowing what you're about\nto delete.\n\nOpen a terminal and `cd` to that `<clamav source directory>/build` directory.\nThen run:\n```bash\nxargs rm < install_manifest.txt\n```\n\nThis will leave behind the directories, and will leave behind any files added\nafter install including the signature databases and any config files. You will\nhave to delete these extra files yourself.\n\n> _Tip_: You may need to use `sudo`, depending on where you installed to.\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 13.9931640625,
          "content": "properties(\n    [\n        disableConcurrentBuilds(),\n        buildDiscarder(logRotator(\n            artifactDaysToKeepStr: '15',\n            artifactNumToKeepStr: '15',\n            daysToKeepStr: '30',\n            numToKeepStr: '20')),\n\n        parameters(\n            [\n                string(name: 'VERSION',\n                       defaultValue: '1.5.0',\n                       description: 'ClamAV version string'),\n                string(name: 'FRAMEWORK_BRANCH',\n                       defaultValue: '1.5',\n                       description: 'test-framework branch'),\n                string(name: 'TESTS_BRANCH',\n                       defaultValue: '1.5',\n                       description: 'tests branch for the package and regular tests'),\n                string(name: 'TESTS_CUSTOM_BRANCH',\n                       defaultValue: '1.5',\n                       description: 'tests-custom branch'),\n                string(name: 'TESTS_FUZZ_BRANCH',\n                       defaultValue: '1.5',\n                       description: 'tests-fuzz-regression branch'),\n                string(name: 'BUILD_PIPELINES_PATH',\n                       defaultValue: 'ClamAV/build-pipelines',\n                       description: 'build-pipelines path for clamav in Jenkins'),\n                string(name: 'TEST_PIPELINES_PATH',\n                       defaultValue: 'ClamAV/test-pipelines',\n                       description: 'test-pipelines path for clamav in Jenkins'),\n                string(name: 'BUILD_PIPELINE',\n                       defaultValue: 'build-1.5',\n                       description: 'test-pipelines branch for build acceptance'),\n                string(name: 'PACKAGE_PIPELINE',\n                       defaultValue: 'package-1.5',\n                       description: 'test-pipelines branch for package tests.'),\n                string(name: 'REGULAR_PIPELINE',\n                       defaultValue: 'regular-1.5',\n                       description: 'test-pipelines branch for regular tests.'),\n                string(name: 'CUSTOM_PIPELINE',\n                       defaultValue: 'custom-1.5',\n                       description: 'test-pipelines branch for custom tests'),\n                string(name: 'FUZZ_PIPELINE',\n                       defaultValue: 'fuzz-regression-1.5',\n                       description: 'test-pipelines branch for fuzz regression tests'),\n                string(name: 'FUZZ_CORPUS_BRANCH',\n                       defaultValue: 'master',\n                       description: 'private-fuzz-corpus branch'),\n                string(name: 'SHARED_LIB_BRANCH',\n                       defaultValue: 'master',\n                       description: 'tests-jenkins-shared-libraries branch')\n            ]\n        )\n    ]\n)\n\npipeline {\n\n    agent {\n        label \"default\"\n    }\n\n    stages {\n\n        stage('GitGuardian Scan') {\n            environment {\n                GITGUARDIAN_API_KEY = credentials('gitguardian-token')\n                GITGUARDIAN_API_URL = 'https://gitguardian.cisco.com/'\n            }\n            agent { label \"docker\" }\n            steps {\n                withDockerContainer(args: \"-i --entrypoint=''\", image: 'gitguardian/ggshield:latest') {\n                    sh 'ggshield secret scan ci'\n                }\n            }\n        }\n\n        stage('Generate Tarball') {\n            steps {\n                cleanWs()\n\n                checkout scm\n\n                dir(path: 'clamav_documentation') {\n                    git(url: 'https://github.com/Cisco-Talos/clamav-documentation.git', branch: \"gh-pages\")\n                }\n\n                dir(path: 'docs/html') {\n                    sh \"\"\"# Move the clamav-documentation here.\n                        cp -r ../../clamav_documentation/* .\n                        # Clean-up\n                        rm -rf ../../clamav_documentation\n                        rm -rf .git .nojekyll CNAME Placeholder || true\n                    \"\"\"\n                }\n\n                dir(path: 'build') {\n                    sh \"\"\"# CPack\n                        cmake .. -D VENDOR_DEPENDENCIES=ON \\\n                            -D JSONC_INCLUDE_DIR=\"$HOME/.mussels/install/host-static/include/json-c\" \\\n                            -D JSONC_LIBRARY=\"$HOME/.mussels/install/host-static/lib/libjson-c.a\" \\\n                            -D ENABLE_JSON_SHARED=OFF \\\n                            -D BZIP2_INCLUDE_DIR=\"$HOME/.mussels/install/host-static/include\" \\\n                            -D BZIP2_LIBRARY_RELEASE=\"$HOME/bzip2-1.0.8-install/lib/libbz2.a\" \\\n                            -D OPENSSL_ROOT_DIR=\"$HOME/.mussels/install/host-static\" \\\n                            -D OPENSSL_INCLUDE_DIR=\"$HOME/.mussels/install/host-static/include\" \\\n                            -D OPENSSL_CRYPTO_LIBRARY=\"$HOME/.mussels/install/host-static/lib/libcrypto.a\" \\\n                            -D OPENSSL_SSL_LIBRARY=\"$HOME/.mussels/install/host-static/lib/libssl.a\" \\\n                            -D LIBXML2_INCLUDE_DIR=\"$HOME/.mussels/install/host-static/include/libxml2\" \\\n                            -D LIBXML2_LIBRARY=\"$HOME/.mussels/install/host-static/lib/libxml2.a\" \\\n                            -D PCRE2_INCLUDE_DIR=\"$HOME/.mussels/install/host-static/include\" \\\n                            -D PCRE2_LIBRARY=\"$HOME/.mussels/install/host-static/lib/libpcre2-8.a\" \\\n                            -D CURSES_INCLUDE_DIR=\"$HOME/.mussels/install/host-static/include\" \\\n                            -D CURSES_LIBRARY=\"$HOME/.mussels/install/host-static/lib/libncurses.a;$HOME/.mussels/install/host-static/lib/libtinfo.a\" \\\n                            -D ZLIB_INCLUDE_DIR=\"$HOME/.mussels/install/host-static/include\" \\\n                            -D ZLIB_LIBRARY=\"$HOME/.mussels/install/host-static/lib/libz.a\" \\\n                            -D LIBCHECK_INCLUDE_DIR=\"$HOME/.mussels/install/host-static/include\" \\\n                            -D LIBCHECK_LIBRARY=\"$HOME/.mussels/install/host-static/lib/libcheck.a\"\n\n                        cpack --config CPackSourceConfig.cmake\n                    \"\"\"\n                    archiveArtifacts(artifacts: \"clamav-${params.VERSION}*.tar.gz\", onlyIfSuccessful: true)\n\n                    sh \"\"\"\n                        jq -n '[ inputs | .package_version = (input_filename | split(\"/\") | .[-2])]' $HOME/.cargo/registry/src/*/*/.cargo_vcs_info.json > clamav_cargo_vcs_info.json\n                    \"\"\"\n\n                    archiveArtifacts(artifacts: \"clamav_cargo_vcs_info.json\", onlyIfSuccessful: true)\n\n                }\n                cleanWs()\n            }\n        }\n\n        stage('Build') {\n            steps {\n                script{\n                    buildResult = build(job: \"${params.BUILD_PIPELINES_PATH}/${params.BUILD_PIPELINE}\",\n                        propagate: true,\n                        wait: true,\n                        parameters: [\n                            [$class: 'StringParameterValue', name: 'CLAMAV_JOB_NAME', value: \"${JOB_NAME}\"],\n                            [$class: 'StringParameterValue', name: 'CLAMAV_JOB_NUMBER', value: \"${BUILD_NUMBER}\"],\n                            [$class: 'StringParameterValue', name: 'FRAMEWORK_BRANCH', value: \"${params.FRAMEWORK_BRANCH}\"],\n                            [$class: 'StringParameterValue', name: 'VERSION', value: \"${params.VERSION}\"],\n                            [$class: 'StringParameterValue', name: 'SHARED_LIB_BRANCH', value: \"${params.SHARED_LIB_BRANCH}\"]\n                        ]\n                    )\n                    echo \"${params.BUILD_PIPELINES_PATH}/${params.BUILD_PIPELINE} #${buildResult.number} succeeded.\"\n                }\n            }\n        }\n\n        stage('Tests') {\n            failFast false\n            parallel {\n                stage('Pipeline') {\n                    stages{\n                        stage(\"Package\") {\n                            steps {\n                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {\n                                    script{\n                                        packageResult = build(job: \"${params.TEST_PIPELINES_PATH}/${params.PACKAGE_PIPELINE}\",\n                                            propagate: true,\n                                            wait: true,\n                                            parameters: [\n                                                [$class: 'StringParameterValue', name: 'CLAMAV_JOB_NAME', value: \"${JOB_NAME}\"],\n                                                [$class: 'StringParameterValue', name: 'CLAMAV_JOB_NUMBER', value: \"${BUILD_NUMBER}\"],\n                                                [$class: 'StringParameterValue', name: 'TESTS_BRANCH', value: \"${params.TESTS_BRANCH}\"],\n                                                [$class: 'StringParameterValue', name: 'BUILD_JOB_NAME', value: \"${params.BUILD_PIPELINES_PATH}/${params.BUILD_PIPELINE}\"],\n                                                [$class: 'StringParameterValue', name: 'BUILD_JOB_NUMBER', value: \"${buildResult.number}\"],\n                                                [$class: 'StringParameterValue', name: 'FRAMEWORK_BRANCH', value: \"${params.FRAMEWORK_BRANCH}\"],\n                                                [$class: 'StringParameterValue', name: 'VERSION', value: \"${params.VERSION}\"],\n                                                [$class: 'StringParameterValue', name: 'SHARED_LIB_BRANCH', value: \"${params.SHARED_LIB_BRANCH}\"]\n                                            ]\n                                        )\n                                        echo \"${params.TEST_PIPELINES_PATH}/${params.PACKAGE_PIPELINE} #${packageResult.number} succeeded.\"\n                                    }\n                                }\n                            }\n                        }\n\n                        stage(\"Regular From-Source\") {\n                            steps {\n                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {\n                                    script{\n                                        regularResult = build(job: \"${params.TEST_PIPELINES_PATH}/${params.REGULAR_PIPELINE}\",\n                                            propagate: true,\n                                            wait: true,\n                                            parameters: [\n                                                [$class: 'StringParameterValue', name: 'CLAMAV_JOB_NAME', value: \"${JOB_NAME}\"],\n                                                [$class: 'StringParameterValue', name: 'CLAMAV_JOB_NUMBER', value: \"${BUILD_NUMBER}\"],\n                                                [$class: 'StringParameterValue', name: 'TESTS_BRANCH', value: \"${params.TESTS_BRANCH}\"],\n                                                [$class: 'StringParameterValue', name: 'FRAMEWORK_BRANCH', value: \"${params.FRAMEWORK_BRANCH}\"],\n                                                [$class: 'StringParameterValue', name: 'VERSION', value: \"${params.VERSION}\"],\n                                                [$class: 'StringParameterValue', name: 'SHARED_LIB_BRANCH', value: \"${params.SHARED_LIB_BRANCH}\"]\n                                            ]\n                                        )\n                                        echo \"${params.TEST_PIPELINES_PATH}/${params.REGULAR_PIPELINE} #${regularResult.number} succeeded.\"\n                                    }\n                                }\n                            }\n                        }\n\n                        stage(\"Custom From-Source\") {\n                            steps {\n                                script{\n                                    customResult = build(job: \"${params.TEST_PIPELINES_PATH}/${params.CUSTOM_PIPELINE}\",\n                                        propagate: true,\n                                        wait: true,\n                                        parameters: [\n                                            [$class: 'StringParameterValue', name: 'CLAMAV_JOB_NAME', value: \"${JOB_NAME}\"],\n                                            [$class: 'StringParameterValue', name: 'CLAMAV_JOB_NUMBER', value: \"${BUILD_NUMBER}\"],\n                                            [$class: 'StringParameterValue', name: 'TESTS_BRANCH', value: \"${params.TESTS_CUSTOM_BRANCH}\"],\n                                            [$class: 'StringParameterValue', name: 'FRAMEWORK_BRANCH', value: \"${params.FRAMEWORK_BRANCH}\"],\n                                            [$class: 'StringParameterValue', name: 'VERSION', value: \"${params.VERSION}\"],\n                                            [$class: 'StringParameterValue', name: 'SHARED_LIB_BRANCH', value: \"${params.SHARED_LIB_BRANCH}\"]\n                                        ]\n                                    )\n                                    echo \"${params.TEST_PIPELINES_PATH}/${params.CUSTOM_PIPELINE} #${customResult.number} succeeded.\"\n                                }\n                            }\n                        }\n                    }\n                }\n                stage(\"Fuzz Regression\") {\n                    steps {\n                        script{\n                            fuzzResult = build(job: \"${params.TEST_PIPELINES_PATH}/${params.FUZZ_PIPELINE}\",\n                                propagate: true,\n                                wait: true,\n                                parameters: [\n                                    [$class: 'StringParameterValue', name: 'CLAMAV_JOB_NAME', value: \"${JOB_NAME}\"],\n                                    [$class: 'StringParameterValue', name: 'CLAMAV_JOB_NUMBER', value: \"${BUILD_NUMBER}\"],\n                                    [$class: 'StringParameterValue', name: 'TESTS_FUZZ_BRANCH', value: \"${params.TESTS_FUZZ_BRANCH}\"],\n                                    [$class: 'StringParameterValue', name: 'FUZZ_CORPUS_BRANCH', value: \"${params.FUZZ_CORPUS_BRANCH}\"],\n                                    [$class: 'StringParameterValue', name: 'VERSION', value: \"${params.VERSION}\"]\n                                ]\n                            )\n                            echo \"${params.TEST_PIPELINES_PATH}/${params.FUZZ_PIPELINE} #${fuzzResult.number} succeeded.\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 244.876953125,
          "content": "# ClamAV News\n\nNote: This file refers to the official packages. Things described here may\ndiffer slightly from third-party binary packages.\n\n## 1.5.0\n\nClamAV 1.5.0 includes the following improvements and changes:\n\n### Major changes\n\n### Other improvements\n\n### Bug fixes\n\n### Acknowledgments\n\nSpecial thanks to the following people for code contributions and bug reports:\n\n\n## 1.4.0\n\nClamAV 1.4.0 includes the following improvements and changes:\n\n### Major changes\n\n- Added support for extracting ALZ archives.\n  The new ClamAV file type for ALZ archives is `CL_TYPE_ALZ`.\n  Added a [DCONF](https://docs.clamav.net/manual/Signatures/DynamicConfig.html)\n  option to enable or disable ALZ archive support.\n  > _Tip_: DCONF (Dynamic CONFiguration) is a feature that allows for some\n  > configuration changes to be made via ClamAV `.cfg` \"signatures\".\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1183)\n\n- Added support for extracting LHA/LZH archives.\n  The new ClamAV file type for LHA/LZH archives is `CL_TYPE_LHA_LZH`.\n  Added a [DCONF](https://docs.clamav.net/manual/Signatures/DynamicConfig.html)\n  option to enable or disable LHA/LZH archive support.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1192)\n\n- Added the ability to disable image fuzzy hashing, if needed. For context,\n  image fuzzy hashing is a detection mechanism useful for identifying malware\n  by matching images included with the malware or phishing email/document.\n\n  New ClamScan options:\n  ```\n  --scan-image[=yes(*)/no]\n  --scan-image-fuzzy-hash[=yes(*)/no]\n  ```\n\n  New ClamD config options:\n  ```\n  ScanImage yes(*)/no\n  ScanImageFuzzyHash yes(*)/no\n  ```\n\n  New libclamav scan options:\n  ```c\n  options.parse &= ~CL_SCAN_PARSE_IMAGE;\n  options.parse &= ~CL_SCAN_PARSE_IMAGE_FUZZY_HASH;\n  ```\n\n  Added a [DCONF](https://docs.clamav.net/manual/Signatures/DynamicConfig.html)\n  option to enable or disable image fuzzy hashing support.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1186)\n\n### Other improvements\n\n- Added cross-compiling instructions for targeting ARM64/aarch64 processors for\n  [Windows](https://github.com/Cisco-Talos/clamav/blob/main/INSTALL-cross-windows-arm64.md)\n  and\n  [Linux](https://github.com/Cisco-Talos/clamav/blob/main/INSTALL-cross-linux-arm64.md).\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1116)\n\n- Improved the Freshclam warning messages when being blocked or rate limited\n  so as to include the Cloudflare Ray ID, which helps with issue triage.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1195)\n\n- Removed unnecessary memory allocation checks when the size to be allocated\n  is fixed or comes from a trusted source.\n  We also renamed internal memory allocation functions and macros, so it is\n  more obvious what each function does.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1137)\n\n- Improved the Freshclam documentation to make it clear that the `--datadir`\n  option must be an absolute path to a directory that already exists, is\n  writable by Freshclam, and is readable by ClamScan and ClamD.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1199)\n\n- Added an optimization to avoid calculating the file hash if the clean file\n  cache has been disabled. The file hash may still be calculated as needed to\n  perform hash-based signature matching if any hash-based signatures exist that\n  target a file of the same size, or if any hash-based signatures exist that\n  target \"any\" file size.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1167)\n\n- Added an improvement to the SystemD service file for ClamOnAcc so that the\n  service will shut down faster on some systems.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1164)\n\n- Added a CMake build dependency on the version map files so that the build\n  will re-run if changes are made to the version map files.\n  Work courtesy of Sebastian Andrzej Siewior.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1294)\n\n- Added an improvement to the CMake build so that the RUSTFLAGS settings\n  are inherited from the environment.\n  Work courtesy of liushuyu.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1301)\n\n### Bug fixes\n\n- Silenced confusing warning message when scanning some HTML files.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1252)\n\n- Fixed minor compiler warnings.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1197)\n\n- Since the build system changed from Autotools to CMake, ClamAV no longer\n  supports building with configurations where bzip2, libxml2, libz, libjson-c,\n  or libpcre2 are not available. Libpcre is no longer supported in favor of\n  libpcre2. In this release, we removed all the dead code associated with those\n  unsupported build configurations.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1217)\n\n- Fixed assorted typos. Patch courtesy of RainRat.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1228)\n\n- Added missing documentation for the ClamScan `--force-to-disk` option.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1186)\n\n- Fixed an issue where ClamAV unit tests would prefer an older\n  libclamunrar_iface library from the install path, if present, rather than\n  the recently compiled library in the build path.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1258)\n\n- Fixed a build issue on Windows with newer versions of Rust.\n  Also upgraded GitHub Actions imports to fix CI failures.\n  Fixes courtesy of liushuyu.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1307)\n\n- Fixed an unaligned pointer dereference issue on select architectures.\n  Fix courtesy of Sebastian Andrzej Siewior.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1293)\n\n- Fixed a bug that prevented loading plaintext (non-CVD) signature files\n  when using the `--fail-if-cvd-older-than=DAYS` / `FailIfCvdOlderThan` option.\n  Fix courtesy of Bark.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1309)\n\n### Acknowledgments\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Bark\n- liushuyu\n- Sebastian Andrzej Siewior\n- RainRat\n\n## 1.3.1\n\nClamAV 1.3.1 is a critical patch release with the following fixes:\n\n- [CVE-2024-20380](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-20380):\n  Fixed a possible crash in the HTML file parser that could cause a\n  denial-of-service (DoS) condition.\n\n  This issue affects version 1.3.0 only and does not affect prior versions.\n\n  Thank you to Błażej Pawłowski for identifying this issue.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1242)\n\n- Updated select Rust dependencies to the latest versions.\n  This resolved Cargo audit complaints and included PNG parser bug fixes.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1227)\n\n- Fixed a bug causing some text to be truncated when converting from UTF-16.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1230)\n\n- Fixed assorted complaints identified by Coverity static analysis.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1235)\n\n- Fixed a bug causing CVDs downloaded by the `DatabaseCustomURL` Freshclam\n  config option to be pruned and then re-downloaded with every update.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1238)\n\n- Added the new 'valhalla' database name to the list of optional databases in\n  preparation for future work.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1238)\n\n- Added symbols to the `libclamav.map` file to enable additional build\n  configurations.\n\n  Patch courtesy of Neil Wilson.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1244)\n\n## 1.3.0\n\nClamAV 1.3.0 includes the following improvements and changes:\n\n### Major changes\n\n- Added support for extracting and scanning attachments found in Microsoft\n  OneNote section files.\n  OneNote parsing will be enabled by default, but may be optionally disabled\n  using one of the following options:\n  a. The `clamscan` command line option: `--scan-onenote=no`,\n  b. The `clamd.conf` config option: `ScanOneNote no`,\n  c. The libclamav scan option `options.parse &= ~CL_SCAN_PARSE_ONENOTE;`,\n  d. A signature change to the `daily.cfg` dynamic configuration (DCONF).\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1048)\n\n### Other improvements\n\n- Fixed issue when building ClamAV on the Haiku (BeOS-like) operating system.\n  Patch courtesy of Luca D'Amico\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1061)\n\n- ClamD: When starting, ClamD will now check if the directory specified by\n  `TemporaryDirectory` in `clamd.conf` exists. If it doesn't, ClamD\n  will print an error message and will exit with exit code 1.\n  Patch courtesy of Andrew Kiggins.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1037)\n\n- CMake: If configured to build static libraries, CMake will now also\n  install the libclamav_rust, libclammspack, libclamunrar_iface, and\n  libclamunrar static libraries required by libclamav.\n\n  Note: These libraries are all linked into the clamscan, clamd, sigtool,\n  and freshclam programs, which is why they did not need to be installed\n  to function. However, these libraries would be required if you wish to\n  build some other program that uses the libclamav static library.\n\n  Patch courtesy of driverxdw.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1100)\n\n- Added file type recognition for compiled Python (`.pyc`) files.\n  The file type appears as a string parameter for these callback functions:\n  - `clcb_pre_cache`\n  - `clcb_pre_scan`\n  - `clcb_file_inspection`\n  When scanning a `.pyc` file, the `type` parameter will now show\n  \"CL_TYPE_PYTHON_COMPILED\" instead of \"CL_TYPE_BINARY_DATA\".\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1111)\n\n- Improved support for decrypting PDF's with empty passwords.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1141)\n\n- Assorted minor improvements and typo fixes.\n\n### Bug fixes\n\n- Fixed a warning when scanning some HTML files.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1084)\n\n- Fixed an issue decrypting some PDF's with an empty password.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1079)\n\n- ClamOnAcc: Fixed an infinite loop when a watched directory does not exist.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1047)\n\n- ClamOnAcc: Fixed an infinite loop when a file has been deleted before a scan.\n  Patch courtesy of gsuehiro.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1150)\n\n- Fixed a possible crash when processing VBA files on HP-UX/IA 64bit.\n  Patch courtesy of Albert Chin-A-Young.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/526)\n\n- ClamConf: Fixed an issue printing `MaxScanSize` introduced with the change\n  to allow a MaxScanSize greater than 4 GiB.\n  Fix courtesy of teoberi.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1121)\n\n- Fixed an issue building a ClamAV RPM in some configurations.\n  The issue was caused by faulty CMake logic that intended to create an\n  empty database directory during the install.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1144)\n\n### Acknowledgments\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Albert Chin-A-Young\n- Andrew Kiggins\n- driverxdw\n- gsuehiro\n- Luca D'Amico\n- RainRat\n- teoberi\n\n## 1.2.3\n\nClamAV 1.2.3 is a critical patch release with the following fixes:\n\n- Updated select Rust dependencies to the latest versions.\n  This resolved Cargo audit complaints and included PNG parser bug fixes.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1226)\n\n- Fixed a bug causing some text to be truncated when converting from UTF-16.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1231)\n\n- Fixed assorted complaints identified by Coverity static analysis.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1236)\n\n- Fixed a bug causing CVDs downloaded by the `DatabaseCustomURL` Freshclam\n  config option to be pruned and then re-downloaded with every update.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1239)\n\n- Added the new 'valhalla' database name to the list of optional databases in\n  preparation for future work.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1239)\n\n- Silenced a warning \"Unexpected early end-of-file\" that occured when\n  scanning some PNG files.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1215)\n\n## 1.2.2\n\nClamAV 1.2.2 is a critical patch release with the following fix:\n\n- [CVE-2024-20290](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-20290):\n  Fixed a possible heap overflow read bug in the OLE2 file parser that could\n  cause a denial-of-service (DoS) condition.\n\n  Affected versions:\n  - 1.0.0 through 1.0.4 (LTS)\n  - 1.1 (all patch versions)\n  - 1.2.0 and 1.2.1\n\n  Thank you to OSS-Fuzz for identifying this issue.\n\n- [CVE-2024-20328](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-20328):\n  Fixed a possible command injection vulnerability in the `VirusEvent` feature\n  of ClamAV's ClamD service.\n\n  To fix this issue, we disabled the '%f' format string parameter.\n  ClamD administrators may continue to use the `CLAM_VIRUSEVENT_FILENAME`\n  environment variable, instead of '%f'. But you should do so only from within\n  an executable, such as a Python script, and not directly in the `clamd.conf`\n  `VirusEvent` command.\n\n  Affected versions:\n  - 0.104 (all patch versions)\n  - 0.105 (all patch versions)\n  - 1.0.0 through 1.0.4 (LTS)\n  - 1.1 (all patch versions)\n  - 1.2.0 and 1.2.1\n\n  Thank you to Amit Schendel for identifying this issue.\n\n## 1.2.1\n\nClamAV 1.2.1 is a patch release with the following fixes:\n\n- Eliminate security warning about unused \"atty\" dependency.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1033\n\n- Upgrade the bundled UnRAR library (libclamunrar) to version 6.2.12.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1056\n\n- Build system: Fix link error with Clang/LLVM/LLD version 17.\n  Patch courtesy of Yasuhiro Kimura.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1060\n\n- Fixed the alert-exceeds-max feature for files greater than 2 GiB and less\n  than max file size.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1039\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Yasuhiro Kimura\n\n## 1.2.0\n\nClamAV 1.2.0 includes the following improvements and changes:\n\n### Major changes\n\n- Added support for extracting Universal Disk Format (UDF) partitions.\n\n  Specifically, this version adds support for the Beginning Extended Area\n  Descriptor (BEA01) type of UDF files.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/941\n\n- Added an option to customize the size of ClamAV's clean file cache.\n\n  Increasing the size of the clean file cache may improve scan performance\n  but will require more RAM. The cache size value should be a square number\n  or will be rounded up to the nearest square number.\n\n  The cache size option for `clamd` and `clamscan` is `--cache-size`.\n  Alternatively, you can customize the cache size for ClamD by setting\n  `CacheSize` in `clamd.conf`.\n\n  Patch courtesy of Craig Andrews.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/882\n\n- Introduced a SystemD timer for running Freshclam updates, without sending\n  Freshclam into the background. This takes the \"burden of timing the updates\"\n  from Freshclam and puts it onto SystemD.\n  The timer can be activated, audited, and the logs inspected:\n  ```sh\n  sudo systemctl enable --now clamav-freshclam-once.timer\n  sudo systemctl list-timers\n  sudo systemctl status clamav-freshclam-once.timer\n  sudo systemctl status clamav-freshclam-once.service\n  journalctl -u clamav-freshclam-once.service\n  ```\n  If you want a different update interval you can edit the timer unit file:\n  ```sh\n  sudo systemctl edit clamav-freshclam-once.timer\n  ```\n  Patch courtesy of Nils Werner.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/962\n\n- Raised the MaxScanSize limit so the total amount of data scanned when\n  scanning a file or archive may exceed 4 gigabytes.\n\n  Introduced the ability to suffix the MaxScanSize and other config file size\n  options with a \"G\" or \"g\" for the number of gigabytes.\n  For example, for ClamD you may now specify `MaxScanSize 10G` in `clamd.conf`.\n  And for ClamScan, you may now specify `--max-scansize=10g`.\n\n  The `MaxFileSize` is still limited internally in ClamAV to 2 gigabytes.\n  Any file, or embedded file, larger than 2GB will be skipped.\n  You may use `clamscan --alert-exceeds-max`, or the `clamd.conf` option\n  `AlertExceedsMax yes` to tell if a scan is not completed because of\n  the scan limits.\n\n  Patch courtesy of matthias-fratz-bsz.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/945\n\n- Added ability for Freshclam to use a client certificate PEM file and a\n  private key PEM file for authentication to a private mirror by setting the\n  following environment variables:\n  - `FRESHCLAM_CLIENT_CERT`: May be set to the path of a file (PEM) containing\n    the client certificate.\n  - `FRESHCLAM_CLIENT_KEY`: May be set to the path of a file (PEM) containing\n    the client private key.\n  - `FRESHCLAM_CLIENT_KEY_PASSWD`: May be set to a password for the client key\n    PEM file, if it is password protected.\n\n  Patch courtesy of jedrzej.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/955\n\n## Other improvements\n\n- Fix an issue extracting files from ISO9660 partitions where the files are\n  listed in the plain ISO tree and there also exists an empty Joliet tree.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/938\n\n- CMake build system improvement to support compiling with OpenSSL 3.x on\n  macOS with the Xcode toolchain.\n\n  The official ClamAV installers and packages are now built with OpenSSL 3.1.1\n  or newer.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/970\n\n- The suggested path for the `clamd.pid` and `clamd.sock` file in the sample\n  configs have been updated to reflect the recommended locations for these files\n  in the Docker images. These are:\n  - `/run/clamav/clamd.pid`\n  - `/run/clamav/clamd.sock`\n\n  For consistency, it now specifies `clamd.sock` instead of `clamd.socket`.\n\n  Patch courtesy of computersalat.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/931\n\n### Bug fixes\n\n- Fixed an issue where ClamAV does not abort the signature load process after\n  partially loading an invalid signature. The bug would later cause a crash when\n  scanning certain files.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/934\n\n- Fixed a possible buffer over-read bug when unpacking PE files.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/927\n\n- Removed a warning message showing the HTTP response codes during the\n  Freshclam database update process.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/935\n\n- Added missing command line options to the ClamD and ClamAV-Milter `--help`\n  message and manpages.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/936\n\n- ClamOnAcc: Fixed error message when using `--wait` without `--ping` option.\n  Patch courtesy of Răzvan Cojocaru.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/984\n\n- Fixed an assortment of code quality issues identified by Coverity:\n  - GitHub pull requests:\n    - https://github.com/Cisco-Talos/clamav/pull/989\n    - https://github.com/Cisco-Talos/clamav/pull/998\n\n- Windows: Fixed a build issue with the CMake-Rust integration regarding\n  detecting native static libraries that caused builds to fail with Rust\n  version 1.70 and newer.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/992\n\n- Fixed a bounds check issue in the PDF parser that may result in a 1-byte\n  buffer over read but does not cause a crash.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/988\n\n- Upgraded the bundled UnRAR library (libclamunrar) to version 6.2.10.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1008\n\n- Fixed a compatibility issue with libjson-c version 0.17.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1002\n\n### Acknowledgments\n\nSpecial thanks to the following people for code contributions and bug reports:\n- computersalat\n- Craig Andrews\n- jedrzej\n- matthias-fratz-bsz\n- Nils Werner\n- Răzvan Cojocaru\n\n## 1.1.3\n\nClamAV 1.1.3 is a patch release with the following fixes:\n\n- Eliminate security warning about unused \"atty\" dependency.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1034\n\n- Upgrade the bundled UnRAR library (libclamunrar) to version 6.2.12.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1055\n\n- Windows: libjson-c 0.17 compatibility fix. with ssize_t type definition.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1063\n\n- Build system: Fix link error with Clang/LLVM/LLD version 17.\n  Patch courtesy of Yasuhiro Kimura.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1059\n\n- Fix alert-exceeds-max feature for files > 2GB and < max-filesize.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1040\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Yasuhiro Kimura\n\n## 1.1.2\n\nClamAV 1.1.2 is a critical patch release with the following fixes:\n\n- Upgrade the bundled UnRAR library (libclamunrar) to version 6.2.10.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1011\n\n## 1.1.1\n\nClamAV 1.1.1 is a critical patch release with the following fixes:\n\n- [CVE-2023-20197](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-20197)\n  Fixed a possible denial of service vulnerability in the HFS+ file parser.\n  This issue affects versions 1.1.0, 1.0.1 through 1.0.0, 0.105.2 through 0.105.0,\n  0.104.4 through 0.104.0, and 0.103.8 through 0.103.0.\n  Thank you to Steve Smith for reporting this issue.\n\n- Fixed a build issue when using the Rust nightly toolchain, which was\n  affecting the oss-fuzz build environment used for regression tests.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/997\n\n- Fixed a build issue on Windows when using Rust version 1.70 or newer.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/994\n\n- CMake build system improvement to support compiling with OpenSSL 3.x on\n  macOS with the Xcode toolchain.\n\n  The official ClamAV installers and packages are now built with OpenSSL 3.1.1\n  or newer.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/972\n\n- Removed a warning message showing the HTTP response codes during the\n  Freshclam database update process.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/939\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Steve Smith\n\n## 1.1.0\n\nClamAV 1.1.0 includes the following improvements and changes:\n\n### Major changes\n\n- Added the ability to extract images embedded in HTML CSS `<style>` blocks.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/813\n\n- Updated to Sigtool so that the `--vba` option will extract VBA code from\n  Microsoft Office documents the same way that libclamav extracts VBA.\n  This resolves several issues where Sigtool could not extract VBA.\n  Sigtool will also now display the normalized VBA code instead of the\n  pre-normalized VBA code.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/852\n\n- Added a new ClamScan and ClamD option: `--fail-if-cvd-older-than=days`.\n  Additionally, we introduce `FailIfCvdOlderThan` as a `clamd.conf` synonym for\n  `--fail-if-cvd-older-than`. When passed, it causes ClamD to exit on startup\n  with a non-zero return code if the virus database is older than the specified\n  number of days.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/867\n\n- Added a new function `cl_cvdgetage()` to the libclamav API.\n  This function will retrieve the age in seconds of the youngest file in a\n  database directory, or the age of a single CVD (or CLD) file.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/867\n\n- Added a new function `cl_engine_set_clcb_vba()` to the libclamav API.\n  Use this function to set a `cb_vba` callback function.\n  The cb_vba callback function will be run whenever VBA is extracted from\n  office documents. The provided data will be a normalized copy of the\n  extracted VBA.\n  This callback was added to support Sigtool so that it can use the same VBA\n  extraction logic that ClamAV uses to scan documents.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/852\n\n## Other improvements\n\n- Removed the vendored TomsFastMath library in favor of using OpenSSL to\n  perform \"big number\"/multiprecision math operations.\n  Work courtesy of Sebastian Andrzej Siewior.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/840\n\n- Build system: Added CMake option `DO_NOT_SET_RPATH` to avoid setting\n  `RPATH` on Unix systems.\n  Feature courtesy of Sebastian Andrzej Siewior.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/815\n\n- Build system: Enabled version-scripts with CMake to limit symbol exports for\n  libclamav, libfreshclam, libclamunrar_iface, and libclamunrar shared\n  libraries on Unix systems, excluding macOS.\n  Improvement courtesy of Orion Poplawski and Sebastian Andrzej Siewior.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/776\n\n- Build system: Enabled users to pass in custom Rust compiler flags using the\n  `RUSTFLAGS` CMake variable.\n  Feature courtesy of Orion Poplawski.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/835\n\n- Removed a hard-coded alert for CVE-2004-0597.\n  The CVE is old enough that it is no longer a threat and the detection had\n  occasional false-positives.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/855\n\n- Set Git attributes to prevent Git from altering line endings for Rust\n  vendored libraries. Third-party Rust libraries are bundled in the ClamAV\n  release tarball. We do not commit them to our own Git repository, but\n  community package maintainers may now store the tarball contents in Git.\n  The Rust build system verifies the library manifest, and this change\n  ensures that the hashes are correct.\n  Improvement courtesy of Nicolas R.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/800\n\n- Fixed compile time warnings.\n  Improvement courtesy of Răzvan Cojocaru.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/795\n\n- Added a minor optimization when matching domain name regex signatures for\n  PDB, WDB and CDB type signatures.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/837\n\n- Build system: Enabled the ability to select a specific Python version.\n  When building, you may use the CMake option `-D PYTHON_FIND_VER=<version>`\n  to choose a specific Python version.\n  Feature courtesy of Matt Jolly.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/787\n\n- Added improvements to the ClamOnAcc process log output so that it is\n  easier to diagnose bugs.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/822\n\n- Windows: Enabled the MSI installer to upgrade between feature versions more\n  easily when ClamAV is installed to a location different from the default\n  (i.e., not `C:\\Program Files\\ClamAV`). This means that the MSI installer can\n  find a previous ClamAV 1.0.x installation to upgrade to ClamAV 1.1.0.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/872\n\n- Sigtool: Added the ability to change the location of the temp directory\n  using the `--tempdir` option and added the ability to retain the temp files\n  created by Sigtool using the `--leave-temps` option.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/852\n\n- Other minor improvements.\n\n### Bug fixes\n\n- Fixed the broken `ExcludePUA` / `--exclude-pua` feature.\n  Fix courtesy of Ged Haywood and Shawn Iverson.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/780\n\n- Fixed an issue with integer endianness when parsing Windows executables on\n  big-endian systems.\n  Fix courtesy of Sebastian Andrzej Siewior.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/814\n\n- Fixed a possible stack overflow read when parsing WDB signatures.\n  This issue is not a vulnerability.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/807\n\n- Fixed a possible index out of bounds when loading CRB signatures.\n  This issue is not a vulnerability.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/810\n\n- Fixed a possible use after free when reading logical signatures.\n  This issue is not a vulnerability.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/811\n\n- Fixed a possible heap overflow read when reading PDB signatures.\n  This issue is not a vulnerability.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/812\n\n- Fixed a possible heap overflow read in javascript normalizer module.\n  This issue is not a vulnerability.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/868\n\n- Fixed two bugs that would cause Freshclam to fail update when applying a\n  CDIFF database patch if that patch adds a file to the database archive\n  or removes a file from the database archive.\n  This bug also caused Sigtool to fail to create such a patch.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/893\n\n- Fixed an assortment of complaints identified by Coverity static analysis.\n  - GitHub pull requests:\n    - https://github.com/Cisco-Talos/clamav/pull/891\n    - https://github.com/Cisco-Talos/clamav/pull/899\n\n- Fixed one of the Freshclam tests that was failing on some Fedora systems\n  due to a bug printing debug-level log messages to stdout.\n  Fix courtesy of Arjen de Korte.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/881\n\n- Correctly remove temporary files generated by the VBA and XLM extraction\n  modules so that the files are not leaked in patched versions of ClamAV\n  where temporary files are written directly to the temp-directory instead\n  of writing to a unique subdirectory.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/894\n\n### Acknowledgments\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Arjen de Korte\n- Craig Andrews\n- Ged Haywood\n- Matt Jolly\n- Orion Poplawski\n- Nicolas R.\n- Răzvan Cojocaru\n- Red\n- Shawn Iverson\n- Sebastian Andrzej Siewior\n- The OSS-Fuzz project\n\n## 1.0.6\n\nClamAV 1.0.6 is a critical patch release with the following fixes:\n\n- Updated select Rust dependencies to the latest versions.\n  This resolved Cargo audit complaints and included PNG parser bug fixes.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1225)\n\n- Fixed a bug causing some text to be truncated when converting from UTF-16.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1232)\n\n- Fixed assorted complaints identified by Coverity static analysis.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1237)\n\n- Fixed a bug causing CVDs downloaded by the `DatabaseCustomURL` Freshclam\n  config option to be pruned and then re-downloaded with every update.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1240)\n\n- Added the new 'valhalla' database name to the list of optional databases in\n  preparation for future work.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1240)\n\n- Silenced a warning \"Unexpected early end-of-file\" that occured when\n  scanning some PNG files.\n  - [GitHub pull request](https://github.com/Cisco-Talos/clamav/pull/1216)\n\n## 1.0.5\n\nClamAV 1.0.5 is a critical patch release with the following fixes:\n\n- [CVE-2024-20290](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-20290):\n  Fixed a possible heap overflow read bug in the OLE2 file parser that could\n  cause a denial-of-service (DoS) condition.\n\n  Affected versions:\n  - 1.0.0 through 1.0.4 (LTS)\n  - 1.1 (all patch versions)\n  - 1.2.0 and 1.2.1\n\n  Thank you to OSS-Fuzz for identifying this issue.\n\n- [CVE-2024-20328](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-20328):\n  Fixed a possible command injection vulnerability in the `VirusEvent` feature\n  of ClamAV's ClamD service.\n\n  To fix this issue, we disabled the '%f' format string parameter.\n  ClamD administrators may continue to use the `CLAM_VIRUSEVENT_FILENAME`\n  environment variable, instead of '%f'. But you should do so only from within\n  an executable, such as a Python script, and not directly in the `clamd.conf`\n  `VirusEvent` command.\n\n  Affected versions:\n  - 0.104 (all patch versions)\n  - 0.105 (all patch versions)\n  - 1.0.0 through 1.0.4 (LTS)\n  - 1.1 (all patch versions)\n  - 1.2.0 and 1.2.1\n\n  Thank you to Amit Schendel for identifying this issue.\n\n## 1.0.4\n\nClamAV 1.0.4 is a patch release with the following fixes:\n\n- Eliminate security warning about unused \"atty\" dependency.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1035\n\n- Upgrade the bundled UnRAR library (libclamunrar) to version 6.2.12.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1054\n\n- Windows: libjson-c 0.17 compatibility fix. with ssize_t type definition.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1064\n\n- Freshclam: Removed a verbose warning printed for each Freshclam HTTP request.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1042\n\n- Build system: Fix link error with Clang/LLVM/LLD version 17.\n  Patch courtesy of Yasuhiro Kimura.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1058\n\n- Fix alert-exceeds-max feature for files > 2GB and < max-filesize.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1041\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Yasuhiro Kimura\n\n## 1.0.3\n\nClamAV 1.0.3 is a critical patch release with the following fixes:\n\n- Upgrade the bundled UnRAR library (libclamunrar) to version 6.2.10.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1010\n\n## 1.0.2\n\nClamAV 1.0.2 is a critical patch release with the following fixes:\n\n- [CVE-2023-20197](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-20197)\n  Fixed a possible denial of service vulnerability in the HFS+ file parser.\n  This issue affects versions 1.1.0, 1.0.1 through 1.0.0, 0.105.2 through 0.105.0,\n  0.104.4 through 0.104.0, and 0.103.8 through 0.103.0.\n  Thank you to Steve Smith for reporting this issue.\n\n- [CVE-2023-20212](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-20212)\n  Fixed a possible denial of service vulnerability in the AutoIt file parser.\n  This issue affects versions 1.0.1 and 1.0.0.\n  This issue does not affect version 1.1.0.\n\n- Fixed a build issue when using the Rust nightly toolchain, which was\n  affecting the oss-fuzz build environment used for regression tests.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/996\n\n- Fixed a build issue on Windows when using Rust version 1.70 or newer.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/993\n\n- CMake build system improvement to support compiling with OpenSSL 3.x on\n  macOS with the Xcode toolchain.\n\n  The official ClamAV installers and packages are now built with OpenSSL 3.1.1\n  or newer.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/973\n\n- Fixed an issue where ClamAV does not abort the signature load process after\n  partially loading an invalid signature.\n  The bug would later cause a crash when scanning certain files.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/952\n\n- Fixed an issue so that ClamAV correctly removes temporary files generated\n  by the VBA and XLM extraction modules so that the files are not leaked in\n  patched versions of ClamAV where temporary files are written directly to the\n  temp-directory instead of writing to a unique subdirectory.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/900\n\n- Set Git attributes to prevent Git from altering line endings for bundled Rust\n  libraries. Third-party Rust libraries are bundled in the ClamAV release\n  tarball. We do not commit them to our own Git repository, but community\n  package maintainers may now store the tarball contents in Git.\n  The Rust build system verifies the library manifest, and this change\n  ensures that the hashes are correct.\n  Improvement courtesy of Nicolas R.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/856\n\n- Fixed two bugs that would cause Freshclam to fail update when applying a\n  CDIFF database patch if that patch adds a file to the database archive\n  or removes a file from the database archive.\n  This bug also caused Sigtool to fail to create such a patch.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/901\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Nicolas R.\n- Steve Smith\n\n## 1.0.1\n\nClamAV 1.0.1 is a critical patch release with the following fixes:\n\n- [CVE-2023-20032](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-20032):\n  Fixed a possible remote code execution vulnerability in the HFS+ file parser.\n  Issue affects versions 1.0.0 and earlier, 0.105.1 and earlier, and 0.103.7 and\n  earlier.\n  Thank you to Simon Scannell for reporting this issue.\n\n- [CVE-2023-20052](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-20052):\n  Fixed a possible remote information leak vulnerability in the DMG file parser.\n  Issue affects versions 1.0.0 and earlier, 0.105.1 and earlier, and 0.103.7 and\n  earlier.\n  Thank you to Simon Scannell for reporting this issue.\n\n- Fix allmatch detection issue with the preclass bytecode hook.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/825\n\n- Update vendored libmspack library to version 0.11alpha.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/828\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Simon Scannell\n\n## 1.0.0\n\nClamAV 1.0.0 includes the following improvements and changes.\n\n### Major changes\n\n- Support for decrypting read-only OLE2-based XLS files that are encrypted with\n  the default password.\n  Use of the default password will now appear in the metadata JSON.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/700\n\n- Overhauled the implementation of the all-match feature. The newer code is more\n  reliable and easier to maintain.\n  - This project fixed several known issues with signature detection in all-\n    match mode:\n    - Enabled embedded file-type recognition signatures to match when a malware\n      signature also matched in a scan of the same layer.\n    - Enabled bytecode signatures to run in all-match mode after a match has\n      occurred.\n    - Fixed an assortment of all-match edge case issues.\n  - Added multiple test cases to verify correct all-match behavior.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/687\n\n- Added a new callback to the public API for inspecting file content during a\n  scan at each layer of archive extraction.\n  - The new callback function type is `clcb_file_inspection` defined in\n    `clamav.h`.\n  - The function `cl_engine_set_clcb_file_inspection()` may be used to enable\n    the callback prior to performing a scan.\n  - This new callback is to be considered *unstable* for the 1.0 release.\n    We may alter this function in a subsequent feature version.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/170\n\n- Added a new function to the public API for unpacking CVD signature archives.\n  - The new function is `cl_cvdunpack()`. The last parameter for the function\n    may be set to verify if a CVD's signature is valid before unpacking the CVD\n    content to the destination directory.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/690\n\n- The option to build with an external TomsFastMath library has been removed.\n  ClamAV requires non-default build options for TomsFastMath to support bigger\n  floating point numbers. Without this change, database and Windows EXE/DLL\n  authenticode certificate validation may fail.\n  The `ENABLE_EXTERNAL_TOMSFASTMATH` build is now ignored.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/742\n\n- Moved the Dockerfile and supporting scripts from the main ClamAV repository\n  over to a new repository: https://github.com/Cisco-Talos/clamav-docker\n\n  The separate repository will make it easier to update the images and fix\n  issues with images for released ClamAV versions.\n\n  Any users building the ClamAV Docker image rather than pulling them from\n  Docker Hub will have to get the latest Docker files from the new location.\n\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/764\n\n- Increased the SONAME major version for libclamav because of ABI changes\n  between the 0.103 LTS release and the 1.0 LTS release.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/778\n\n### Other improvements\n\n- Add checks to limit PDF object extraction recursion.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/629\n\n- Increased the limit for memory allocations based on untrusted input and\n  altered the warning message when the limit is exceeded so that it is more\n  helpful and less dramatic.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/723\n\n- Dramatically improved the build time of libclamav-Rust unit tests.\n  The unit test build is included in the time limit for the test itself and was\n  timing out on slower systems. The ClamAV Rust code modules now share the same\n  build directory, which also reduces the amount of disk space used for the\n  build.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/694\n\n- For Windows: The debugging symbol (PDB) files are now installed alongside the\n  DLL and LIB library files when built in \"RelWithDebInfo\" or \"Debug\" mode.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/669\n\n- Relaxed the constraints on the check for overlapping ZIP file entries so as\n  not to alert on slightly malformed, but non-malicious, Java (JAR) archives.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/561\n\n- Increased the time limit in FreshClam before warning if the DNS entry is\n  stale. In combination with changes to update the DNS entry more\n  frequently, this should prevent false alarms of failures in the database\n  publication system.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/597\n\n- Docker: The C library header files are now included in the Docker image.\n  Patch courtesy of GitHub user TerminalFi.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/693\n\n- Show the BYTECODE_RUNTIME build options when using the `ccmake` GUI for CMake.\n  Patch courtesy of Дилян Палаузов.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/678\n\n- Added explicit minimum and maximum supported LLVM versions so that the build\n  will fail if you try to build with a version that is too old or too new and\n  will print a helpful message rather than simply failing to compile because of\n  compatibility issues. Patch courtesy of Matt Jolly.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/692\n\n- Moved the ClamAV Docker files for building containers to a new Git repository.\n  The Docker files are now in https://github.com/Cisco-Talos/clamav-docker.\n  This change enables us to fix issues with the images and with the supporting\n  scripts used to publish and update the images without committing changes\n  directly to files in the ClamAV release branches.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/764\n\n- Fixed compiler warnings that may turn into errors in Clang 16.\n  Patch courtesy of Michael Orlitzky.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/767\n\n- Allow building with a custom RPATH so that the executables may be moved after\n  build in a development environment to a final installation directory.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/768\n\n### Bug fixes\n\n- Assorted code quality fixes. These are not security issues and will not be\n  backported to prior feature versions:\n  - Several heap buffer overflows while loading PDB and WDB databases were found\n    by OSS-Fuzz and by Michał Dardas.\n    - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/530\n    - Follow-up Optimization: https://github.com/Cisco-Talos/clamav/pull/712\n\n  - oss-fuzz 43843: heap buffer overflow read (1) cli_sigopts_handler\n    - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/560\n\n  - oss-fuzz 44849: heap buffer overflow read (4) in HTML/js-norm\n    - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/503\n\n  - oss-fuzz 43816: heap buffer overflow read (8) in cli_bcomp_freemeta\n    - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/583\n\n  - oss-fuzz 43832: heap buffer overflow read (2) in cli_parse_add\n    - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/611\n\n  - oss-fuzz 44493: integer overflow in cli_scannulsft\n    - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/554\n\n  - CIFuzz leak detected in IDB parser\n    - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/547\n\n  - oss-fuzz assorted signature parser leaks\n    - GitHub pull requests:\n      - https://github.com/Cisco-Talos/clamav/pull/532\n      - https://github.com/Cisco-Talos/clamav/pull/533\n      - https://github.com/Cisco-Talos/clamav/pull/535\n\n  - oss-fuzz 40601: leak detected in pdf_parseobj\n    - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/553\n\n- Fixed a build failure when using LIBCLAMAV_ONLY mode with tests enabled.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/714\n\n- Fixed an issue verifying EXE/DLL authenticode signatures to determine a given\n  file can be trusted (skipped).\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/727\n\n- Fixed a caching bug relating to the Container and Intermediates logical\n  signature condition.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/724\n\n- Fixed a build issue when build with RAR disabled or when building with an\n  external libmspack library rather than the bundled library.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/672\n\n- Fixed the capitalization of the `-W` option for `clamonacc` in the `clamonacc`\n  manpage. Patch courtesy of GitHub user monkz.\n  - GitHub pull requests:\n    - https://github.com/Cisco-Talos/clamav/pull/709\n    - https://github.com/Cisco-Talos/clamav/pull/710\n\n- macOS: Fixed an issue with memory-map (`mmap`) system call detection affecting\n  versions 0.105 and 0.104. Memory maps may be used in ClamAV to improve\n  signature load performance and scan performance, as well as RAM usage.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/705\n\n- Fixed a performance issue with Rust code when the build type is not explicitly\n  set to \"Release\" or \"RelWithDebInfo\". The Rust default build type is now\n  \"RelWithDebInfo\" just like the C code, instead of Debug.\n  This means it is now optimized by default.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/701\n\n- Fixed an issue loading Yara rules containing regex strings with an escaped\n  forward-slash (`\\/`) followed by a colon (`:`).\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/696\n\n- Fixed an issue detecting and scanning ZIP file entries appended to very small\n  files. The fix is part of the all-match feature overhaul.\n\n- Fixed a detection issue with EXE/DLL import-address-table hash signatures that\n  specify a wildcard (`*`) for the size field. The fix is part of the all-match\n  feature overhaul.\n\n- Fixed the default bytecode timeout value listed in the manpages and in the\n  sample config files. Patches courtesy of Liam Jarvis and Ben Bodenmiller.\n  - GitHub pull requests:\n    - https://github.com/Cisco-Talos/clamav/pull/631\n    - https://github.com/Cisco-Talos/clamav/pull/661\n\n- Fixed an issue building the libclamav_rust test program when running `ctest`\n  if building with `BYTECODE_RUNTIME=llvm` and when the `FindLLVM.cmake` module\n  is used to find the LLVM libraries. Patch courtesy of GitHub user teoberi.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/572\n\n- Fixed an issue where scans sent to `clamd` with the all-match mode enabled\n  caused all subsequent scans to also use all-match mode.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/741\n\n- Fixed bug when starting `clamonacc` with the `--log=FILE` option that created\n  randomly named files in the current directory.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/751\n\n- Other assorted bug fixes.\n\n### Acknowledgments\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Anthony Chan\n- Ben Bodenmiller\n- Дилян Палаузов\n- Liam Jarvis\n- Matt Jolly\n- Michael Orlitzky\n- monkz\n- teoberi\n- TerminalFi\n\n## 0.105.2\n\nClamAV 0.105.2 is a critical patch release with the following fixes:\n\n- [CVE-2023-20032](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-20032):\n  Fixed a possible remote code execution vulnerability in the HFS+ file parser.\n  Issue affects versions 1.0.0 and earlier, 0.105.1 and earlier, and 0.103.7 and\n  earlier.\n  Thank you to Simon Scannell for reporting this issue.\n\n- [CVE-2023-20052](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-20052):\n  Fixed a possible remote information leak vulnerability in the DMG file parser.\n  Issue affects versions 1.0.0 and earlier, 0.105.1 and earlier, and 0.103.7 and\n  earlier.\n  Thank you to Simon Scannell for reporting this issue.\n\n- Fixed an issue loading Yara rules containing regex strings with an escaped\n  forward-slash (`\\/`) followed by a colon (`:`).\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/695\n\n- Moved the ClamAV Docker files for building containers to a new Git repository.\n  The Docker files are now in https://github.com/Cisco-Talos/clamav-docker.\n  This change enables us to fix issues with the images and with the supporting\n  scripts used to publish and update the images without committing changes\n  directly to files in the ClamAV release branches.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/765\n\n- Update vendored libmspack library to version 0.11alpha.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/829\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Simon Scannell\n\n## 0.105.1\n\nClamAV 0.105.1 is a critical patch release with the following fixes:\n\n- Upgrade the vendored UnRAR library to version 6.1.7.\n\n- Fix issue building macOS universal binaries in some configurations.\n\n- Silence error message when the logical signature maximum functionality level\n  is lower than the current functionality level.\n\n- Fix scan error when scanning files containing malformed images that cannot be\n  loaded to calculate an image fuzzy hash.\n\n- Fix logical signature \"Intermediates\" feature.\n\n- Relax constraints on slightly malformed zip archives that contain overlapping\n  file entries.\n\n## 0.105.0\n\nClamAV 0.105.0 includes the following improvements and changes.\n\n### New Requirements\n\n- Starting with ClamAV v0.105, the Rust toolchain is required to compile ClamAV.\n\n  You can install the Rust toolchain for your development environment by\n  following the instructions on the [`rustup`](https://rustup.rs/) website.\n  Some binary package distributions do provide relatively up-to-date packages of\n  the Rust toolchain, but many do not. Using `rustup` ensures that you have the\n  most up-to-date Rust compiler at the time of installation. Keep your toolchain\n  updated for new features and bug/security fixes by periodically executing:\n  ```sh\n  rustup update\n  ```\n\n  Building ClamAV requires, at a minimum, Rust compiler version 1.61, as it\n  relies on features introduced in the Rust 2021 Edition.\n\n  ClamAV's third-party Rust library dependencies are vendored into the release\n  tarball (`clamav-<version>.tar.gz`) file that we publish on\n  [clamav.net/downloads](https://www.clamav.net/downloads).\n  But, if you build from a Git clone or from an unofficial tarball taken from\n  GitHub.com, you will need the internet to download the Rust libraries during\n  the build.\n\n### Major changes\n\n- Increased the default limits for file-size and scan-size:\n  - MaxScanSize:        100M -> 400M\n  - MaxFileSize:        25M  -> 100M\n  - StreamMaxLength:    25M  -> 100M\n  - PCREMaxFileSize:    25M  -> 100M\n  - MaxEmbeddedPE:      10M  -> 40M\n  - MaxHTMLNormalize:   10M  -> 40M\n  - MaxScriptNormalize: 5M   -> 20M\n  - MaxHTMLNoTags:      2M   -> 8M\n\n- Added image fuzzy hash subsignatures for logical signatures.\n\n  Image fuzzy hash subsignatures are a new feature for detecting images known to\n  be used in phishing campaigns or otherwise used when distributing malware.\n\n  Image fuzzy hash subsignatures follow this format:\n  ```\n  fuzzy_img#<hash>\n  ```\n  For example:\n  ```\n  logo.png;Engine:150-255,Target:0;0;fuzzy_img#af2ad01ed42993c7\n  logo.png-2;Engine:150-255,Target:0;0&1;49484452;fuzzy_img#af2ad01ed42993c7\n  ```\n\n  This initial implementation does not support matching with a hamming distance.\n  Support for matching with a hamming distance may be added in a future release.\n\n  ClamAV's image fuzzy hash is very close to, but not 100% identical to, the\n  fuzzy hash generated by the Python `imagehash` package's `phash()` function.\n  Note that these are only clean-room approximations of the pHash™️ algorithm.\n  ClamAV's image fuzzy hashes are not expected to match the fuzzy hashes\n  generated using other tools. Some images may match, while others do not.\n\n  To generate the image fuzzy hash you can run this command:\n  ```\n  sigtool --fuzzy-img FILE(S)\n  ```\n  Or you may generate it through `clamscan` like this:\n  ```\n  clamscan --gen-json --debug /path/to/file\n  ```\n  The hash will appear in the JSON above the \"SCAN SUMMARY\" under the object\n  named \"ImageFuzzyHash\".\n\n- ClamScan & ClamDScan (Windows-only):\n  - Added a process memory scanning feature from ClamWin's ClamScan.\n\n    This adds three new options to ClamScan and ClamDScan on Windows:\n    * `--memory`\n    * `--kill`\n    * `--unload`\n\n    Special thanks to:\n    - Gianluigi Tiesi for allowing us to integrate the Windows process memory\n      scanning feature from ClamWin into the ClamAV.\n    - Grace Kang for integrating the ClamScan feature, and for extending it to\n      work with ClamDScan in addition.\n\n### Notable changes\n\n- Updated the LLVM bytecode runtime support so that it can use LLVM versions\n  8 through 12 and removed support for earlier LLVM versions.\n  Using LLVM JIT for the bytecode runtime may improve scan performance over the\n  built-in bytecode interpreter runtime, which is the default.\n  If you wish to build using LLVM, you must obtain a complete build of\n  the LLVM libraries including the development headers and static libraries.\n\n  There are some known issues both compiling and running the test suite with\n  some LLVM installations. We are working to further stabilize LLVM bytecode\n  runtime support, and document specific edge cases. Your feedback is welcome.\n\n  For details about building ClamAV with the LLVM bytecode runtime, see the\n  [install reference documentation](INSTALL.md#bytecode-runtime).\n\n- Added a `GenerateMetadataJson` option to ClamD.\n  The functionality is equivalent to the `clamscan --gen-json` option.\n  Scan metadata is useful for file analysis and for debugging scan behavior.\n  If `Debug` is enabled, ClamD will print out the JSON after each scan.\n  If `LeaveTemporaryFiles` is enabled, ClamD will drop a `metadata.json` file\n  in the scan-temp directory. You can customize the scan-temp directory path\n  using the `TemporaryDirectory` option.\n\n- The `libclamunrar.so` library's SO version now matches that of `libclamav.so`.\n  The upstream UnRAR library does not have an SO version that we should match.\n  This change is to prevent a possible collision when multiple ClamAV versions\n  are installed.\n\n- CMake: Added support for using an external TomsFastMath library (libtfm).\n\n  To use an external TomsFastMath library, configure the build with the new\n  option `-D ENABLE_EXTERNAL_TOMSFASTMATH=ON`. The following CMake variables may\n  also be set as needed:\n  - `-D TomsFastMath_INCLUDE_DIR=<path>` - The directory containing `tfm.h`.\n  - `-D TomsFastMath_LIBRARY=<path>` - The path to the TomsFastMath library.\n\n  Also updated the vendored TomsFastMath code to version 0.13.1.\n\n### Other improvements\n\n- Freshclam:\n  - Improve `ReceiveTimeout` behavior so that will abort a download attempt if\n    the download is not making significant progress. Previously this limit was\n    an absolute time limit for the download and could abort prematurely for\n    those on a slower connection.\n    Special thanks to Simon Arlott for this improvement.\n\n- Rewrote the ClamAV database archive incremental-update feature (CDIFF) from\n  scratch in Rust. The new implementation was our first module to be rewritten\n  in Rust. It is significantly faster at applying updates that remove large\n  numbers of signatures from a database, such as when migrating signatures from\n  `daily.cvd` to `main.cvd`.\n\n- Freshclam & ClamD:\n  - Increased the maximum line-length for `freshclam.conf` and `clamd.conf` from\n    512-characters to 1024-characters. This change was by request to accommodate\n    very long `DatabaseMirror` options when using access tokens in the URI.\n\n- Removed the Heuristics.PNG.CVE-2010-1205 detection. This alert had been placed\n  behind the `--alert-broken-media` (`SCAN_HEURISTIC_BROKEN_MEDIA`) option in\n  0.103.3 and 0.104 because of excessive alerts on slightly malformed but non-\n  malicious files. Now it is completely removed.\n\n- Added support for building ClamDTop using ncursesw if ncurses can not be\n  found. Patch courtesy of Carlos Velasco.\n\n### Bug fixes\n\nThe CVE's fixes below are also addressed in versions 0.104.3 and 0.103.6.\n\n- [CVE-2022-20803](CVE-2022-20803): Fixed a possible double-free vulnerability\n  in the OLE2 file parser.\n  Issue affects versions 0.104.0 through 0.104.2.\n  Issue identified by OSS-Fuzz.\n\n- [CVE-2022-20770](CVE-2022-20770): Fixed a possible infinite loop vulnerability\n  in the CHM file parser.\n  Issue affects versions 0.104.0 through 0.104.2 and LTS version 0.103.5 and\n  prior versions.\n  Thank you to Michał Dardas for reporting this issue.\n\n- [CVE-2022-20796](CVE-2022-20796): Fixed a possible NULL-pointer dereference\n  crash in the scan verdict cache check.\n  Issue affects versions 0.103.4, 0.103.5, 0.104.1, and 0.104.2.\n  Thank you to Alexander Patrakov and Antoine Gatineau for reporting this issue.\n\n- [CVE-2022-20771](CVE-2022-20771): Fixed a possible infinite loop vulnerability\n  in the TIFF file parser.\n  Issue affects versions 0.104.0 through 0.104.2 and LTS version 0.103.5 and\n  prior versions.\n  The issue only occurs if the \"--alert-broken-media\" ClamScan option is\n  enabled. For ClamD, the affected option is \"AlertBrokenMedia yes\", and for\n  libclamav it is the \"CL_SCAN_HEURISTIC_BROKEN_MEDIA\" scan option.\n  Thank you to Michał Dardas for reporting this issue.\n\n- [CVE-2022-20785](CVE-2022-20785): Fixed a possible memory leak in the\n  HTML file parser / Javascript normalizer.\n  Issue affects versions 0.104.0 through 0.104.2 and LTS version 0.103.5 and\n  prior versions.\n  Thank you to Michał Dardas for reporting this issue.\n\n- [CVE-2022-20792](CVE-2022-20792): Fixed a possible multi-byte heap buffer\n  overflow write vulnerability in the signature database load module.\n  The fix was to update the vendored regex library to the latest version.\n  Issue affects versions 0.104.0 through 0.104.2 and LTS version 0.103.5 and\n  prior versions.\n  Thank you to Michał Dardas for reporting this issue.\n\n- ClamOnAcc: Fixed a number of assorted stability issues and added niceties for\n  debugging ClamOnAcc. Patches courtesy of Frank Fegert.\n\n- Fixed an issue causing byte-compare subsignatures to cause an alert when they\n  match even if other conditions of the given logical signatures were not met.\n\n- Fixed an issue causing XLM macro false positives when scanning XLS documents\n  containing images if the `--alert-macros` (`AlertOLE2Macros`) option was\n  enabled.\n\n- Fixed an issue causing signature alerts for images in XLS files to be lost.\n\n- Fixed an issue preventing multiple matches when scanning in all-match mode.\n\n- Docker:\n  - Fixed an issue exposing the health check port. Patch courtesy of Sammy Chu.\n  - Fixed an issue with health check failure false positives during container\n    startup. Patch courtesy of Olliver Schinagl.\n  - Set the default time zone to `Etc/UTC`. The `--env` parameter can be used to\n    customize the time zone by setting `TZ` environment variable.\n    Patch courtesy of Olliver Schinagl.\n  - Fixed an issue where ClamD would listen only for IPv4 connections in\n    environments where IPv6 is preferred. ClamD will now listen to all\n    addresses available (IPv4 and IPv6). This is the default behavior of ClamD.\n    Patch courtesy of Andre Breiler.\n\n- Enable support for ncursesw, the wide-character / unicode version of ncurses.\n\n- Added support for detecting the curses library dependency even when the\n  associated pkg-config file is not present. This resolves a build issue on some\n  BSD distributions. Patch courtesy of Stuart Henderson.\n\n- Windows: Fix utf8 filepath issues affecting both scanning and log messages.\n\n- Assorted bug fixes and improvements.\n\n### Acknowledgments\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Ahmon Dancy\n- Alexander Patrakov\n- Alexander Sulfrian\n- Andre Breiler\n- Antoine Gatineau\n- Carlos Velasco\n- Bernd Kuhls\n- David Korczynski\n- Fabrice Fontaine\n- Frank Fegert\n- Gianluigi Tiesi\n- Giovanni Bechis\n- Grace Kang\n- John Humlick\n- Jordan Ernst\n- JunWei Song\n- Michał Dardas\n- mko-x\n- Olliver Schinagl\n- Răzvan Cojocaru\n- Sammy Chu\n- Sergey Valentey\n- Simon Arlott\n- Stuart Henderson\n- Yann E. Morin\n\n## 0.104.4\n\nClamAV 0.104.4 is a critical patch release with the following fixes:\n\n- Upgrade the vendored UnRAR library to version 6.1.7.\n\n- Fix logical signature \"Intermediates\" feature.\n\n- Relax constraints on slightly malformed zip archives that contain overlapping\n  file entries.\n\n## 0.104.3\n\nClamAV 0.104.3 is a critical patch release with the following fixes:\n\n- [CVE-2022-20803](CVE-2022-20803): Fixed a possible double-free vulnerability\n  in the OLE2 file parser.\n  Issue affects versions 0.104.0 through 0.104.2.\n  Issue identified by OSS-Fuzz.\n\n- [CVE-2022-20770](CVE-2022-20770): Fixed a possible infinite loop vulnerability\n  in the CHM file parser.\n  Issue affects versions 0.104.0 through 0.104.2 and LTS version 0.103.5 and\n  prior versions.\n  Thank you to Michał Dardas for reporting this issue.\n\n- [CVE-2022-20796](CVE-2022-20796): Fixed a possible NULL-pointer dereference\n  crash in the scan verdict cache check.\n  Issue affects versions 0.103.4, 0.103.5, 0.104.1, and 0.104.2.\n  Thank you to Alexander Patrakov and Antoine Gatineau for reporting this issue.\n\n- [CVE-2022-20771](CVE-2022-20771): Fixed a possible infinite loop vulnerability\n  in the TIFF file parser.\n  Issue affects versions 0.104.0 through 0.104.2 and LTS version 0.103.5 and\n  prior versions.\n  The issue only occurs if the \"--alert-broken-media\" ClamScan option is\n  enabled. For ClamD, the affected option is \"AlertBrokenMedia yes\", and for\n  libclamav it is the \"CL_SCAN_HEURISTIC_BROKEN_MEDIA\" scan option.\n  Thank you to Michał Dardas for reporting this issue.\n\n- [CVE-2022-20785](CVE-2022-20785): Fixed a possible memory leak in the\n  HTML file parser / Javascript normalizer.\n  Issue affects versions 0.104.0 through 0.104.2 and LTS version 0.103.5 and\n  prior versions.\n  Thank you to Michał Dardas for reporting this issue.\n\n- [CVE-2022-20792](CVE-2022-20792): Fixed a possible multi-byte heap buffer\n  overflow write vulnerability in the signature database load module.\n  The fix was to update the vendored regex library to the latest version.\n  Issue affects versions 0.104.0 through 0.104.2 and LTS version 0.103.5 and\n  prior versions.\n  Thank you to Michał Dardas for reporting this issue.\n\n- ClamOnAcc: Fixed a number of assorted stability issues and added niceties for\n  debugging ClamOnAcc. Patches courtesy of Frank Fegert.\n\n- Enable support for ncursesw, the wide-character / unicode version of ncurses.\n\n- Added support for detecting the curses library dependency even when the\n  associated pkg-config file is not present. This resolves a build issue on some\n  BSD distributions. Patch courtesy of Stuart Henderson.\n\n- Docker:\n  - Fixed an issue exposing the health check port. Patch courtesy of Sammy Chu.\n  - Fixed an issue with health check failure false positives during container\n    startup. Patch courtesy of Olliver Schinagl.\n  - Set the default time zone to `Etc/UTC`. The `--env` parameter can be used to\n    customize the time zone by setting `TZ` environment variable.\n    Patch courtesy of Olliver Schinagl.\n\n- Fixed an issue causing XLM macro false positives when scanning XLS documents\n  containing images if the `--alert-macros` (`AlertOLE2Macros`) option was\n  enabled.\n\n- Fixed an issue causing signature alerts for images in XLS files to be lost.\n\n- Fixed an issue causing byte-compare subsignatures to cause an alert when they\n  match even if other conditions of the given logical signatures were not met.\n\n- Assorted bug fixes and improvements.\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Alexander Patrakov\n- Antoine Gatineau\n- Frank Fegert\n- Michał Dardas\n- Olliver Schinagl\n- Sammy Chu\n- Stuart Henderson\n\n## 0.104.2\n\nClamAV 0.104.2 is a critical patch release with the following fixes:\n\n- [CVE-2022-20698](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-20698):\n  Fix for invalid pointer read that may cause a crash.\n  Affects 0.104.1, 0.103.4 and prior when ClamAV is compiled with libjson-c and\n  the `CL_SCAN_GENERAL_COLLECT_METADATA` scan option (the `clamscan --gen-json`\n  option) is enabled.\n\n  Cisco would like to thank Laurent Delosieres of ManoMano for reporting this\n  vulnerability.\n\n- Fixed ability to disable the file size limit with libclamav C API, like this:\n  ```c\n    cl_engine_set_num(engine, CL_ENGINE_MAX_FILESIZE, 0);\n  ```\n  This issue didn't impact ClamD or ClamScan which also can disable the limit by\n  setting it to zero using `MaxFileSize 0` in `clamd.conf` for ClamD, or\n  `clamscan --max-filesize=0` for ClamScan.\n\n  Note: Internally, the max file size is still set to 2 GiB. Disabling the limit\n  for a scan will fall back on the internal 2 GiB limitation.\n\n- Increased the maximum line length for ClamAV config files from 512 bytes to\n  1024 bytes to allow for longer config option strings.\n\nSpecial thanks to the following for code contributions and bug reports:\n- Laurent Delosieres\n\n## 0.104.1\n\nClamAV 0.104.1 is a critical patch release with the following fixes:\n\n- FreshClam:\n  - Add a 24-hour cool-down for FreshClam clients that have received an HTTP\n    403 (Forbidden) response from the CDN.\n    This is to reduce the volume of 403-response data served to blocked\n    FreshClam clients that are configured with a tight update-loop.\n  - Fixed a bug where FreshClam treats an empty CDIFF as an incremental update\n    failure instead of as an intentional request to download the whole CVD.\n\n- ClamDScan: Fix a scan error when broken symlinks are encountered on macOS with\n  \"FollowDirectorySymlinks\" and \"FollowFileSymlinks\" options disabled.\n\n- Overhauled the scan recursion / nested archive extraction logic and added new\n  limits on embedded file-type recognition performed during the \"raw\" scan of\n  each file. This limits embedded file-type misidentification and prevents\n  detecting embedded file content that is found/extracted and scanned at other\n  layers in the scanning process.\n\n- Fix an issue with the FMap module that failed to read from some nested files.\n\n- Fixed an issue where failing to load some rules from a Yara file containing\n  multiple rules may cause a crash.\n\n- Fixed assorted compiler warnings.\n\n- Fixed assorted Coverity static code analysis issues.\n\n- Scan limits:\n  - Added virus-name suffixes to the alerts that trigger when a scan limit has\n    been exceeded. Rather than simply `Heuristics.Limits.Exceeded`, you may now\n    see limit-specific virus-names, to include:\n    - `Heuristics.Limits.Exceeded.MaxFileSize`\n    - `Heuristics.Limits.Exceeded.MaxScanSize`\n    - `Heuristics.Limits.Exceeded.MaxFiles`\n    - `Heuristics.Limits.Exceeded.MaxRecursion`\n    - `Heuristics.Limits.Exceeded.MaxScanTime`\n  - Renamed the `Heuristics.Email.ExceedsMax.*` alerts to align with the other\n    limit alerts names. These alerts include:\n    - `Heuristics.Limits.Exceeded.EmailLineFoldcnt`\n    - `Heuristics.Limits.Exceeded.EmailHeaderBytes`\n    - `Heuristics.Limits.Exceeded.EmailHeaders`\n    - `Heuristics.Limits.Exceeded.EmailMIMEPartsPerMessage`\n    - `Heuristics.Limits.Exceeded.EmailMIMEArguments`\n  - Fixed an issue where the Email-related scan limits would alert even when the\n    \"AlertExceedsMax\" (`--alert-exceeds-max`) scan option is not enabled.\n  - Fixes an issue in the Zip parser where exceeding the \"MaxFiles\" limit or\n    the \"MaxFileSize\" limit would abort the scan but would fail to alert.\n    The Zip scan limit issues were independently identified and reported by\n    Aaron Leliaert and Max Allan.\n\n- Fixed a leak in the Email parser when using the `--gen-json` scan option.\n\n- Fixed an issue where a failure to record metadata in the Email parser when\n  using the `--gen-json` scan option could cause the Email parser to abort the\n  scan early and fail to extract and scan additional content.\n\n- Fixed a file name memory leak in the Zip parser.\n\n- Fixed an issue where certain signature patterns may cause a crash or cause\n  unintended matches on some systems when converting characters to uppercase if\n  a UTF-8 unicode single-byte grapheme becomes a multi-byte grapheme.\n  Patch courtesy of Andrea De Pasquale.\n\n- CMake:\n  - Fix a packaging issue with the Windows `*.msi` installer so that it will\n    include all of the required files.\n  - Add support for developer code-signing on macOS during the build.\n  - Fix an issue finding and linking with the `tinfo` library on systems where\n    `tinfo` is separate from `ncurses`. Patch courtesy of Luca Barbato.\n\n- Tests: Improved the Freshclam incremental update tests to verify correct\n  behavior when a zero-byte CDIFF is downloaded and the CVD served to FreshClam\n  is older than advertised.\n\n- Docker: Remove the `freshclam.dat` file when building the Docker image with\n  the databases-included so FreshClam agents running in the container will have\n  a unique ID in the HTTP User-Agent.\n\nSpecial thanks to the following for code contributions and bug reports:\n- Aaron Leliaert\n- Andrea De Pasquale\n- Luca Barbato\n- Max Allan\n\n## 0.104.0\n\nClamAV 0.104.0 includes the following improvements and changes.\n\n### New Requirements\n\n- As of ClamAV 0.104, CMake is required to build ClamAV.\n\n  We have added comprehensive build instructions for using CMake to the new\n  [`INSTALL.md`](INSTALL.md) file. The online documentation will also be\n  updated to include CMake build instructions.\n\n  The Autotools and the Visual Studio build systems have been removed.\n\n### Major changes\n\n- The built-in LLVM for the bytecode runtime has been removed.\n\n  The bytecode interpreter is the default runtime for bytecode signatures just\n  as it was in ClamAV 0.103.\n\n  We wished to add support for newer versions of LLVM but ran out of time.\n  If you're building ClamAV from source and you wish to use LLVM instead of the\n  bytecode interpreter, you will need to supply the development libraries for\n  LLVM version 3.6.2.\n  See [the \"bytecode runtime\" section in `INSTALL.md`](INSTALL.md#bytecode-runtime)\n  to learn more.\n\n- There are now official ClamAV images on Docker Hub.\n\n  > _Note_: Until ClamAV 0.104.0 is released, these images are limited to\n  > \"unstable\" versions, which are updated daily with the latest changes in the\n  > default branch on GitHub.\n\n  You can find the images on [Docker Hub under `clamav`](https://hub.docker.com/r/clamav/clamav).\n\n  Docker Hub ClamAV tags:\n\n  - `clamav/clamav:<version>`: A release preloaded with signature databases.\n\n    Using this container will save the ClamAV project some bandwidth.\n    Use this if you will keep the image around so that you don't download the\n    entire database set every time you start a new container. Updating with\n    FreshClam from existing databases set does not use much data.\n\n  - `clamav/clamav:<version>_base`: A release with no signature databases.\n\n    Use this container **only** if you mount a volume in your container under\n    `/var/lib/clamav` to persist your signature database databases.\n    This method is the best option because it will reduce data costs for ClamAV\n    and for the Docker registry, but it does require advanced familiarity with\n    Linux and Docker.\n\n    > _Caution_: Using this image without mounting an existing database\n    directory will cause FreshClam to download the entire database set each\n    time you start a new container.\n\n  You can use the `unstable` version (i.e. `clamav/clamav:unstable` or\n  `clamav/clamav:unstable_base`) to try the latest from our development branch.\n\n  Please, be kind when using 'free' bandwidth, both for the virus databases\n  but also the Docker registry. Try not to download the entire database set or\n  the larger ClamAV database images on a regular basis.\n\n  For more details, see\n  [the ClamAV Docker documentation](https://docs.clamav.net/manual/Installing/Docker.html).\n\n  Special thanks to Olliver Schinagl for his excellent work creating ClamAV's\n  new Docker files, image database deployment tooling, and user documentation.\n\n- `clamd` and `freshclam` are now available as Windows services. To install\n  and run them, use the `--install-service` option and `net start [name]` command.\n\n  Special thanks to Gianluigi Tiesi for his original work on this feature.\n\n### Notable changes\n\nThe following was added in 0.103.1 and is repeated here for awareness, as\npatch versions do not generally introduce new options:\n\n- Added a new scan option to alert on broken media (graphics) file formats.\n  This feature mitigates the risk of malformed media files intended to exploit\n  vulnerabilities in other software.\n  At present media validation exists for JPEG, TIFF, PNG, and GIF files.\n  To enable this feature, set `AlertBrokenMedia yes` in clamd.conf, or use\n  the `--alert-broken-media` option when using `clamscan`.\n  These options are disabled by default in this patch release, but may be\n  enabled in a subsequent release.\n  Application developers may enable this scan option by enabling\n  `CL_SCAN_HEURISTIC_BROKEN_MEDIA` for the `heuristic` scan option bit field.\n\n- Added CL_TYPE_TIFF, CL_TYPE_JPEG types to match GIF, PNG typing behavior.\n  BMP and JPEG 2000 files will continue to detect as CL_TYPE_GRAPHICS because\n  ClamAV does not yet have BMP or JPEG 2000 format checking capabilities.\n\n- Added progress callbacks to libclamav for:\n  - database load:  `cl_engine_set_clcb_sigload_progress()`\n  - engine compile: `cl_engine_set_clcb_engine_compile_progress()`\n  - engine free:    `cl_engine_set_clcb_engine_free_progress()`\n\n  These new callbacks enable an application to monitor and estimate load,\n  compile, and unload progress. See `clamav.h` for API details.\n\n- Added progress bars to ClamScan for the signature load and engine compile\n  steps before a scan begins.\n  The start-up progress bars won't be enabled if ClamScan isn't running in a\n  terminal (i.e. stdout is not a TTY), or if any of these options are used:\n    - `--debug`\n    - `--quiet`\n    - `--infected`\n    - `--no-summary`\n\n### Other improvements\n\n- Added the `%f` format string option to the ClamD VirusEvent feature to insert\n  the file path of the scan target when a virus-event occurs. This supplements\n  the VirusEvent `%v` option which prints the signature (virus) name.\n  The ClamD VirusEvent feature also provides two environment variables,\n  `$CLAM_VIRUSEVENT_FILENAME` and `$CLAM_VIRUSEVENT_VIRUSNAME` for a similar\n  effect.\n  Patch courtesy of Vasile Papp.\n\n- Improvements to the AutoIt extraction module. Patch courtesy of cw2k.\n\n- Added support for extracting images from Excel *.xls (OLE2) documents.\n\n- Trusted SHA256-based Authenticode hashes can now be loaded in from *.cat\n  files. For more information, visit our\n  [Authenticode documentation](https://docs.clamav.net/appendix/Authenticode.html)\n  about using *.cat files with *.crb rules to trust signed Windows executables.\n\n### Bug fixes\n\n- Fixed a memory leak affecting logical signatures that use the \"byte compare\"\n  feature. Patch courtesy of Andrea De Pasquale.\n\n- Fixed bytecode match evaluation for PDF bytecode hooks in PDF file scans.\n\n- Other minor bug fixes.\n\n### Acknowledgments\n\nThe ClamAV team thanks the following individuals for their code submissions:\n\n- Alexander Golovach\n- Andrea De Pasquale\n- Andrew Williams\n- Arjen de Korte\n- Armin Kuster\n- Brian Bergstrand\n- cw2k\n- Duane Waddle\n- Gianluigi Tiesi\n- Jonas Zaddach\n- Kenneth Hau\n- Mark Fortescue\n- Markus Strehle\n- Olliver Schinagl\n- Orion Poplawski\n- Sergey Valentey\n- Sven Rueß\n- Tom Briden\n- Vasile Papp\n- Yasuhiro Kimura\n\n## 0.103.11\n\nClamAV 0.103.11 is a patch release with the following fixes:\n\n- Upgrade the bundled UnRAR library (libclamunrar) to version 6.2.12.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1053\n\n- Windows: libjson-c 0.17 compatibility fix. with ssize_t type definition.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1065\n\n- Windows: Update build system to use OpenSSL 3 and PThreads-Win32 v3.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1057\n\n## 0.103.10\n\nClamAV 0.103.10 is a critical patch release with the following fixes:\n\n- Upgrade the bundled UnRAR library (libclamunrar) to version 6.2.10.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/1009\n\n## 0.103.9\n\nClamAV 0.103.9 is a critical patch release with the following fixes:\n\n- [CVE-2023-20197](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-20197)\n  Fixed a possible denial of service vulnerability in the HFS+ file parser.\n  This issue affects versions 1.1.0, 1.0.1 through 1.0.0, 0.105.2 through 0.105.0,\n  0.104.4 through 0.104.0, and 0.103.8 through 0.103.0.\n  Thank you to Steve Smith for reporting this issue.\n\n- Fixed compiler warnings that may turn into errors in Clang 16.\n  Patch courtesy of Michael Orlitzky.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/747\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Michael Orlitzky\n- Steve Smith\n\n## 0.103.8\n\nClamAV 0.103.8 is a critical patch release with the following fixes:\n\n- [CVE-2023-20032](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-20032):\n  Fixed a possible remote code execution vulnerability in the HFS+ file parser.\n  Issue affects versions 1.0.0 and earlier, 0.105.1 and earlier, and 0.103.7 and\n  earlier.\n  Thank you to Simon Scannell for reporting this issue.\n\n- [CVE-2023-20052](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-20052):\n  Fixed a possible remote information leak vulnerability in the DMG file parser.\n  Issue affects versions 1.0.0 and earlier, 0.105.1 and earlier, and 0.103.7 and\n  earlier.\n  Thank you to Simon Scannell for reporting this issue.\n\n- Update vendored libmspack library to version 0.11alpha.\n  - GitHub pull request: https://github.com/Cisco-Talos/clamav/pull/830\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Simon Scannell\n\n## 0.103.7\n\nClamAV 0.103.7 is a critical patch release with the following fixes:\n\n- Upgrade the vendored UnRAR library to version 6.1.7.\n\n- Fix logical signature \"Intermediates\" feature.\n\n- Relax constraints on slightly malformed zip archives that contain overlapping\n  file entries.\n\n## 0.103.6\n\nClamAV 0.103.6 is a critical patch release with the following fixes:\n\n- [CVE-2022-20770](CVE-2022-20770): Fixed a possible infinite loop vulnerability\n  in the CHM file parser.\n  Issue affects versions 0.104.0 through 0.104.2 and LTS version 0.103.5 and\n  prior versions.\n  Thank you to Michał Dardas for reporting this issue.\n\n- [CVE-2022-20796](CVE-2022-20796): Fixed a possible NULL-pointer dereference\n  crash in the scan verdict cache check.\n  Issue affects versions 0.103.4, 0.103.5, 0.104.1, and 0.104.2.\n  Thank you to Alexander Patrakov and Antoine Gatineau for reporting this issue.\n\n- [CVE-2022-20771](CVE-2022-20771): Fixed a possible infinite loop vulnerability\n  in the TIFF file parser.\n  Issue affects versions 0.104.0 through 0.104.2 and LTS version 0.103.5 and\n  prior versions.\n  The issue only occurs if the \"--alert-broken-media\" ClamScan option is\n  enabled. For ClamD, the affected option is \"AlertBrokenMedia yes\", and for\n  libclamav it is the \"CL_SCAN_HEURISTIC_BROKEN_MEDIA\" scan option.\n  Thank you to Michał Dardas for reporting this issue.\n\n- [CVE-2022-20785](CVE-2022-20785): Fixed a possible memory leak in the\n  HTML file parser / Javascript normalizer.\n  Issue affects versions 0.104.0 through 0.104.2 and LTS version 0.103.5 and\n  prior versions.\n  Thank you to Michał Dardas for reporting this issue.\n\n- [CVE-2022-20792](CVE-2022-20792): Fixed a possible multi-byte heap buffer\n  overflow write vulnerability in the signature database load module.\n  The fix was to update the vendored regex library to the latest version.\n  Issue affects versions 0.104.0 through 0.104.2 and LTS version 0.103.5 and\n  prior versions.\n  Thank you to Michał Dardas for reporting this issue.\n\n- ClamOnAcc: Fixed a number of assorted stability issues and added niceties for\n  debugging ClamOnAcc. Patches courtesy of Frank Fegert.\n\n- Fixed an issue causing byte-compare subsignatures to cause an alert when they\n  match even if other conditions of the given logical signatures were not met.\n\n- Fix memleak when using multiple byte-compare subsignatures.\n  This fix was backported from 0.104.0.\n  Thank you to Andrea De Pasquale for contributing the fix.\n\n- Assorted bug fixes and improvements.\n\nSpecial thanks to the following people for code contributions and bug reports:\n- Alexander Patrakov\n- Andrea De Pasquale\n- Antoine Gatineau\n- Frank Fegert\n- Michał Dardas\n\n## 0.103.5\n\nClamAV 0.103.5 is a critical patch release with the following fixes:\n\n- [CVE-2022-20698](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-20698):\n  Fix for invalid pointer read that may cause a crash.\n  Affects 0.104.1, 0.103.4 and prior when ClamAV is compiled with libjson-c and\n  the `CL_SCAN_GENERAL_COLLECT_METADATA` scan option (the `clamscan --gen-json`\n  option) is enabled.\n\n  Cisco would like to thank Laurent Delosieres of ManoMano for reporting this\n  vulnerability.\n\n- Fixed ability to disable the file size limit with libclamav C API, like this:\n  ```c\n    cl_engine_set_num(engine, CL_ENGINE_MAX_FILESIZE, 0);\n  ```\n  This issue didn't impact ClamD or ClamScan which also can disable the limit by\n  setting it to zero using `MaxFileSize 0` in `clamd.conf` for ClamD, or\n  `clamscan --max-filesize=0` for ClamScan.\n\n  Note: Internally, the max file size is still set to 2 GiB. Disabling the limit\n  for a scan will fall back on the internal 2 GiB limitation.\n\n- Increased the maximum line length for ClamAV config files from 512 bytes to\n  1024 bytes to allow for longer config option strings.\n\n- SigTool: Fix insufficient buffer size for `--list-sigs` that caused a failure\n  when listing a database containing one or more very long signatures.\n  This fix was backported from 0.104.\n\nSpecial thanks to the following for code contributions and bug reports:\n- Laurent Delosieres\n\n## 0.103.4\n\nClamAV 0.103.4 is a critical patch release with the following fixes:\n\n- FreshClam:\n  - Add a 24-hour cool-down for FreshClam clients that have received an HTTP\n    403 (Forbidden) response from the CDN.\n    This is to reduce the volume of 403-response data served to blocked\n    FreshClam clients that are configured with a tight update-loop.\n  - Fixed a bug where FreshClam treats an empty CDIFF as an incremental update\n    failure instead of as an intentional request to download the whole CVD.\n\n- ClamDScan: Fix a scan error when broken symlinks are encountered on macOS with\n  \"FollowDirectorySymlinks\" and \"FollowFileSymlinks\" options disabled.\n\n- Overhauled the scan recursion / nested archive extraction logic and added new\n  limits on embedded file-type recognition performed during the \"raw\" scan of\n  each file. This limits embedded file-type misidentification and prevents\n  detecting embedded file content that is found/extracted and scanned at other\n  layers in the scanning process.\n\n- Fix an issue with the FMap module that failed to read from some nested files.\n\n- Fixed an issue where failing to load some rules from a Yara file containing\n  multiple rules may cause a crash.\n\n- Fixed assorted compiler warnings.\n\n- Fixed assorted Coverity static code analysis issues.\n\n- Scan limits:\n  - Added virus-name suffixes to the alerts that trigger when a scan limit has\n    been exceeded. Rather than simply `Heuristics.Limits.Exceeded`, you may now\n    see limit-specific virus-names, to include:\n    - `Heuristics.Limits.Exceeded.MaxFileSize`\n    - `Heuristics.Limits.Exceeded.MaxScanSize`\n    - `Heuristics.Limits.Exceeded.MaxFiles`\n    - `Heuristics.Limits.Exceeded.MaxRecursion`\n    - `Heuristics.Limits.Exceeded.MaxScanTime`\n  - Renamed the `Heuristics.Email.ExceedsMax.*` alerts to align with the other\n    limit alerts names. These alerts include:\n    - `Heuristics.Limits.Exceeded.EmailLineFoldcnt`\n    - `Heuristics.Limits.Exceeded.EmailHeaderBytes`\n    - `Heuristics.Limits.Exceeded.EmailHeaders`\n    - `Heuristics.Limits.Exceeded.EmailMIMEPartsPerMessage`\n    - `Heuristics.Limits.Exceeded.EmailMIMEArguments`\n  - Fixed an issue where the Email-related scan limits would alert even when the\n    \"AlertExceedsMax\" (`--alert-exceeds-max`) scan option is not enabled.\n  - Fixes an issue in the Zip parser where exceeding the \"MaxFiles\" limit or\n    the \"MaxFileSize\" limit would abort the scan but would fail to alert.\n    The Zip scan limit issues were independently identified and reported by\n    Aaron Leliaert and Max Allan.\n\n- Fixed a leak in the Email parser when using the `--gen-json` scan option.\n\n- Fixed an issue where a failure to record metadata in the Email parser when\n  using the `--gen-json` scan option could cause the Email parser to abort the\n  scan early and fail to extract and scan additional content.\n\n- Fixed a file name memory leak in the Zip parser.\n\n- Fixed an issue where certain signature patterns may cause a crash or cause\n  unintended matches on some systems when converting characters to uppercase if\n  a UTF-8 unicode single-byte grapheme becomes a multi-byte grapheme.\n  Patch courtesy of Andrea De Pasquale.\n\nOther fixes backported from 0.104.0:\n\n- Fixed a crash in programs that use libclamav when the programs don't set a\n  callback for the \"virus found\" event.\n  Patch courtesy of Markus Strehle.\n\n- Added checks to the SIS archive parser to prevent an SIS file entry from\n  pointing to the archive, which would result in a loop. This was not an actual\n  infinite loop, as ClamAV's scan recursion limit limits the depth of nested\n  archive extraction.\n\n- ClamOnAcc: Fixed a socket file descriptor leak that could result in a crash\n  when all available file descriptors are exhausted.\n\n- FreshClam: Fixed an issue where FreshClam would download a CVD repeatedly if a\n  zero-byte CDIFF is downloaded or if the incremental update failed and if the\n  CVD downloaded after that is older than advertised.\n  Patch courtesy of Andrew Williams.\n\n- ClamDScan:\n  - Fixed a memory leak of the scan target filename when using the\n    `--fdpass` or `--stream` options.\n  - Fixed an issue where ClamDScan would fail to scan any file after excluding\n    a file with the \"ExcludePath\" option when using when using the `--multiscan`\n    (`-m`) option along with either `--fdpass` or `--stream`.\n    Also fixed a memory leak of the accidentally-excluded paths in this case.\n  - Fixed a single file path memory leak when using `--fdpass`.\n  - Fixed an issue where the \"ExcludePath\" regex may fail to exclude absolute\n    paths when the scan is invoked with a relative path.\n\nSpecial thanks to the following for code contributions and bug reports:\n- Aaron Leliaert\n- Andrea De Pasquale\n- Andrew Williams\n- Markus Strehle\n- Max Allan\n\n## 0.103.3\n\nClamAV 0.103.3 is a patch release with the following fixes:\n\n- Fixed a scan performance issue when ENGINE_OPTIONS_FORCE_TO_DISK is enabled.\n  This issue did not impacted most users but for those affected it caused every\n  scanned file to be copied to the temp directory before the scan.\n\n- Fix ClamDScan crashes when using the `--fdpass --multiscan` command-line\n  options in combination with the ClamD `ExcludePath` config file options.\n\n- Fixed an issue where the `mirrors.dat` file is owned by root when starting as\n  root (or with sudo) and using daemon-mode. File ownership will be set to the\n  `DatabaseOwner` just before FreshClam switches to run as that user.\n\n- Renamed the `mirrors.dat` file to `freshclam.dat`.\n\n  We used to recommend deleting `mirrors.dat` if FreshClam failed to update.\n  This is because `mirrors.dat` used to keep track of offline mirrors and\n  network interruptions were known to cause FreshClam to think that all mirrors\n  were offline. ClamAV now uses a paid CDN instead of a mirror network, and the\n  new FreshClam DAT file no longer stores that kind of information.\n  The UUID used in ClamAV's HTTP User-Agent is stored in the FreshClam DAT file\n  and we want the UUID to persist between runs, even if there was a failure.\n\n  Unfortunately, some users have FreshClam configured to automatically delete\n  `mirrors.dat` if FreshClam failed. Renaming `mirrors.dat` to `freshclam.dat`\n  should make it so those scripts don't delete important FreshClam data.\n\n- Disabled the `HTTPUserAgent` config option if the `DatabaseMirror` uses\n  clamav.net. This will prevent users from being inadvertently blocked and\n  will ensure that we can keep better metrics on which ClamAV versions are\n  being used.\n\n  This change effectively deprecates the `HTTPUserAgent` option for most users.\n\n- Moved the detection for Heuristics.PNG.CVE-2010-1205 behind the\n  ClamScan `--alert-broken-media` option (ClamD `AlertBrokenMedia yes`) option.\n  This type of PNG issue appears to be common enough to be an annoyance, and\n  the CVE is old enough that no one should be vulnerable at this point.\n\n- Fix ClamSubmit failures after changes to Cloudflare \"__cfduid\" cookies.\n  See: https://blog.cloudflare.com/deprecating-cfduid-cookie/\n\nSpecial thanks to the following for code contributions and bug reports:\n\n- Stephen Agate\n- Tom Briden\n\n## 0.103.2\n\nClamAV 0.103.2 is a security patch release with the following fixes:\n\n- [CVE-2021-1386](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-1386):\n  Fix for UnRAR DLL load privilege escalation.\n  Affects 0.103.1 and prior on Windows only.\n\n- [CVE-2021-1252](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-1252):\n  Fix for Excel XLM parser infinite loop.\n  Affects 0.103.0 and 0.103.1 only.\n\n- [CVE-2021-1404](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-1404):\n  Fix for PDF parser buffer over-read; possible crash.\n  Affects 0.103.0 and 0.103.1 only.\n\n- [CVE-2021-1405](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-1405):\n  Fix for mail parser NULL-dereference crash.\n  Affects 0.103.1 and prior.\n\n- Fix possible memory leak in PNG parser.\n\n- Fix ClamOnAcc scan on file-creation race condition so files are scanned after\n  their contents are written.\n\n- FreshClam: Deprecate the `SafeBrowsing` config option.\n  The `SafeBrowsing` option will no longer do anything.\n\n  For more details, see:\n  https://blog.clamav.net/2020/06/the-future-of-clamav-safebrowsing.html\n\n  > _Tip_: If creating and hosting your own `safebrowsing.gdb` database, you can\n  > use the `DatabaseCustomURL` option in `freshclam.conf` to download it.\n\n- FreshClam: Improved HTTP 304, 403, & 429 handling.\n\n- FreshClam: Add back the `mirrors.dat` file to the database directory.\n  This new `mirrors.dat` file will store:\n  - A randomly generated UUID for the FreshClam User-Agent.\n  - A retry-after timestamp that so FreshClam won't try to update after\n    having received an HTTP 429 response until the Retry-After timeout has\n    expired.\n\n- FreshClam will now exit with a failure in daemon mode if an HTTP 403\n  (Forbidden) was received, because retrying later won't help any.\n  The FreshClam user will have to take actions to get unblocked.\n\n- Fix the FreshClam mirror-sync issue where a downloaded database is \"older\n  than the version advertised.\"\n\n  If a new CVD download gets a version that is older than advertised, FreshClam\n  will keep the older version and retry the update so that the incremental\n  update process (CDIFF patch process) will update to the latest version.\n\n## 0.103.1\n\nClamAV 0.103.1 is a patch release with the following fixes and improvements.\n\n### Notable changes\n\n- Added a new scan option to alert on broken media (graphics) file formats.\n  This feature mitigates the risk of malformed media files intended to exploit\n  vulnerabilities in other software.\n  At present media validation exists for JPEG, TIFF, PNG, and GIF files.\n  To enable this feature, set `AlertBrokenMedia yes` in clamd.conf, or use\n  the `--alert-broken-media` option when using `clamscan`.\n  These options are disabled by default in this patch release, but may be\n  enabled in a subsequent release.\n  Application developers may enable this scan option by enabling\n  `CL_SCAN_HEURISTIC_BROKEN_MEDIA` for the `heuristic` scan option bit field.\n\n- Added CL_TYPE_TIFF, CL_TYPE_JPEG types to match GIF, PNG typing behavior.\n  BMP and JPEG 2000 files will continue to detect as CL_TYPE_GRAPHICS because\n  ClamAV does not yet have BMP or JPEG 2000 format checking capabilities.\n\n### Bug fixes\n\n- Fixed PNG parser logic bugs that caused an excess of parsing errors and fixed\n  a stack exhaustion issue affecting some systems when scanning PNG files.\n  PNG file type detection was disabled via signature database update for\n  ClamAV version 0.103.0 to mitigate the effects from these bugs.\n\n- Fixed an issue where PNG and GIF files no longer work with Target:5 graphics\n  signatures if detected as CL_TYPE_PNG/GIF rather than as CL_TYPE_GRAPHICS.\n  Target types now support up to 10 possible file types to make way for\n  additional graphics types in future releases.\n\n- Fixed clamonacc's `--fdpass` option.\n\n  File descriptor passing (or \"fd-passing\") is a mechanism by which clamonacc\n  and clamdscan may transfer an open file to clamd to scan, even if clamd is\n  running as a non-privileged user and wouldn't otherwise have read-access to\n  the file. This enables clamd to scan all files without having to run clamd as\n  root. If possible, clamd should never be run as root so as to mitigate the\n  risk in case clamd is somehow compromised while scanning malware.\n\n  Interprocess file descriptor passing for clamonacc was broken since version\n  0.102.0 due to a bug introduced by the switch to curl for communicating with\n  clamd. On Linux, passing file descriptors from one process to another is\n  handled by the kernel, so we reverted clamonacc to use standard system calls\n  for socket communication when fd passing is enabled.\n\n- Fixed a clamonacc stack corruption issue on some systems when using an older\n  version of libcurl. Patch courtesy of Emilio Pozuelo Monfort.\n\n- Allow clamscan and clamdscan scans to proceed even if the realpath lookup\n  failed. This alleviates an issue on Windows scanning files hosted on file-\n  systems that do not support the GetMappedFileNameW() API such as on ImDisk\n  RAM-disks.\n\n- Fixed freshclam --on-update-execute=EXIT_1 temporary directory cleanup issue.\n\n- `clamd`'s log output and VirusEvent now provide the scan target's file path\n  instead of a file descriptor. The clamd socket API for submitting a scan by\n  FD-passing doesn't include a file path, this feature works by looking up the\n  file path by file descriptor. This feature works on Mac and Linux but is not\n  yet implemented for other UNIX operating systems.\n  FD-passing is not available for Windows.\n\n- Fixed an issue where freshclam database validation didn't work correctly when\n  run in daemon mode on Linux/Unix.\n\n### Other improvements\n\n- Scanning JPEG, TIFF, PNG, and GIF files will no longer return \"parse\" errors\n  when file format validation fails. Instead, the scan will alert with the\n  \"Heuristics.Broken.Media\" signature prefix and a descriptive suffix to\n  indicate the issue, provided that the \"alert broken media\" feature is enabled.\n\n- GIF format validation will no longer fail if the GIF image is missing the\n  trailer byte, as this appears to be a relatively common issue in otherwise\n  functional GIF files.\n\n- Added a TIFF dynamic configuration (DCONF) option, which was missing.\n  This will allow us to disable TIFF format validation via signature database\n  update in the event that it proves to be problematic.\n  This feature already exists for many other file types.\n\n### Acknowledgments\n\nThe ClamAV team thanks the following individuals for their code submissions:\n\n- Emilio Pozuelo Monfort\n\n## 0.103.0\n\nClamAV 0.103.0 includes the following improvements and changes.\n\n### Major changes\n\n- Clamd can now reload the signature database without blocking scanning.\n  This multi-threaded database reload improvement was made possible thanks to\n  a community effort.\n\n  Non-blocking database reloads are now the default behavior. Some systems that\n  are more constrained on RAM may need to disable non-blocking reloads as it will\n  temporarily consume 2x as much memory. For this purpose we have added a new\n  clamd config option `ConcurrentDatabaseReload` which may be set to `no`.\n\n  Special thanks to the following for making this feature a reality:\n  - Alberto Wu\n  - Alexander Sulfrian\n  - Arjen de Korte\n  - David Heidelberg\n  - Ged Haywood\n  - Julius Plenz\n  - Michael Orlitzky\n\n  Thank you all for your patience waiting for this feature.\n\n### Notable changes\n\n- The DLP module has been enhanced with additional credit card ranges and a new\n  engine option which allows ClamAV to alert only on credit cards (and not, for\n  instance, gift cards) when scanning with the DLP module. This feature\n  enhancement was made by John Schember, with input from Alexander Sulfrian.\n\n- Support for Adobe Reader X PDF encryption, an overhaul of PNG scanning to\n  detect PNG specific exploits, and a major change to GIF parsing which makes\n  it more tolerant to problematic files and adds the ability to scan overlays,\n  all thanks to work and patches submitted by Aldo Mazzeo.\n\n- `clamdtop.exe` now available for Windows users. Functionality is somewhat\n  limited when compared with `clamdtop` on Linux. PDCurses is required to\n  build `clamdtop.exe` for ClamAV on Windows.\n\n- The phishing detection module will now print \"Suspicious link found!\" along\n  with the \"Real URL\" and \"Display URL\" each time phishing is detected. In a\n  future version, we would like to print out alert-related metadata like this\n  at the end of a scan, but for now this detail will help users understand why\n  a given file is being flagged as phishing.\n\n- Added new *experimental* CMake build tooling. CMake is not yet recommended for\n  production builds. Our team would appreciate any assistance improving the\n  CMake build tooling so we can one day deprecate Autotools and remove the\n  Visual Studio solutions.\n\n  Please see the new [CMake installation instructions](INSTALL.md) for\n  detailed instructions on how to build ClamAV with CMake.\n\n- Added `--ping` and `--wait` options to the `clamdscan` and `clamonacc` client\n  applications.\n\n  The `--ping` (`-p`) command will attempt to ping `clamd` up to a specified\n  maximum number of attempts at an optional interval. If the interval isn't\n  specified, a default 1-second interval is used. It will exit with status code\n  `0` when it receives a PONG from `clamd` or status code `21` if the timeout\n  expires before it receives a response.\n\n  Example:\n  `clamdscan -p 120` will attempt to ping `clamd` 120 at a 1 second interval.\n\n  The `--wait` (`-w`) command will wait up to 30 seconds for clamd to start.\n  This option may be used in tandem with the `--ping` option to customize the\n  max # of attempts and the attempt interval. As with `--ping`, the scanning\n  client may exit with status code `21` if the timeout expires before a\n  connection is made to `clamd`.\n\n  Example:\n  `clamdscan -p 30:2 -w <file>` will attempt a scan, waiting up to 60 seconds\n  for clamd to start and receive the scan request.\n\n  The ping-and-wait feature is particularly useful for those wishing to start\n  `clamd` and start `clamonacc` at startup, ensuring that `clamd` is ready\n  before `clamonacc` starts. It is also useful for those wishing to start\n  `clamd` immediately before initiating scans with `clamdscan` rather than\n  having the `clamd` service run continuously.\n\n- Added Excel 4.0 (XLM) macro detection and extraction support. Significantly\n  improved VBA detection and extraction as well. Work courtesy of Jonas Zaddach.\n\n  This support not yet added to `sigtool`, as the VBA extraction feature in\n  `sigtool` is separate from the one used for scanning and will still need to be\n  updated or replaced in the future.\n\n- Improvements to the layout and legibility of temp files created during a\n  scan. Improvements to legibility and content of the metadata JSON generated\n  during a scan.\n\n  To review the scan temp files and metadata JSON, run:\n  ```bash\n  clamscan --tempdir=<path> --leave-temps --gen-json <target>\n  ```\n\n  Viewing the scan temp files and `metadata.json` file provides some insight\n  into how ClamAV analyzes a given file and can also be useful to analysts for\n  initial triage of potentially malicious files.\n\n### Other improvements\n\n- Added ability for freshclam and clamsubmit to override default use of openssl\n  CA bundle with a custom CA bundle. On Linux/Unix platforms (excluding macOS),\n  users may specify a custom CA bundle by setting the CURL_CA_BUNDLE environment\n  variable. On macOS and Windows, users are expected to add CA certificates to\n  their respective system's keychain/certificate store.\n  Patch courtesy of Sebastian A. Siewior\n\n- `clamscan` and `clamdscan` now print the scan start and end dates in the scan\n  summary.\n\n- The `clamonacc` on-access scanning daemon for Linux now installs to `sbin`\n  instead of `bin`.\n\n- Improvements to the freshclam progress bar so the width of the text does not\n  shift around as information changes and will not spill exceed 80-characters\n  even on very slow connections. Time is now displayed in Xm XXs (or Xh XXm)\n  for values of 60 seconds or more. Bytes display now changes units at the\n  proper 1024 B/KiB instead of 2048 B/KiB.\n  Patch courtesy of Zachary Murden.\n\n- Improve column alignment and line wrap rendering for ClamdTOP. Also fixed\n  an issue on Windows where ClamdTOP would occasionally disconnect from clamd\n  and fail to reconnect.\n  Patch courtesy of Zachary Murden.\n\n- Improvements to the AutoIT parser.\n\n- Loosened the curl version requirements in order to build and use `clamonacc`.\n  You may now build ClamAV with any version of libcurl. However `clamonacc`'s\n  file descriptor-passing (FD-passing) capability will only be available with\n  libcurl 7.40 or newer. FD-passing is ordinarily the default way to perform\n  scans with clamonacc as it is significantly faster than streaming.\n\n- Added LZMA and BZip2 decompression routines to the bytecode signature API.\n\n- Disabled embedded type recognition for specific archive and disk image file\n  types. This change reduces file type misclassification and improves scan time\n  performance by reducing duplicated file scanning.\n\n- Use pkg-config to detect libpcre2-8 before resorting to pcre2-config or\n  pcre-config.\n  Patch courtesy of Michael Orlitzky.\n\n### Bug fixes\n\n- Fixed issue scanning directories on Windows with `clamdscan.exe` that was\n  introduced when mitigating against symlink quarantine attacks.\n\n- Fixed behavior of `freshclam --quiet` option. Patch courtesy of Reio Remma.\n\n- Fixed behavior of `freshclam`'s `OnUpdateExecute`, `OnErrorExecute`, and\n  `OnOutdatedExecute` config options on Windows when in daemon-mode so it can\n  handle multiple arguments.\n  Patch courtesy of Zachary Murden.\n\n- Fixed an error in the heuristic alert mechanism that would cause a single\n  detection within an archive to alert once for every subsequent file scanned,\n  potentially resulting in thousands of alerts for a single scan.\n\n- Fixed clamd, clamav-milter, and freshclam to create PID files before\n  dropping privileges, to avoid the possibility of an unprivileged user\n  from changing the PID file so that a service manager will kill a different\n  process. This change does make the services unable to clean up the PID\n  file on exit.\n\n- Fixed the false positive (.fp) signature feature. In prior versions, the hash\n  in a false positive signature would be checked only against the current\n  layer of a file being scanned. In 0.103, every file layer is hashed,\n  and the hashes for each in the scan recursion list are checked. This ensures\n  that .fp signatures containing a hash for any layer in the scan leading\n  up to the alert will negate the alert.\n\n  As an example, a hash for a zip containing the file which alerts would not\n  prevent the detection in prior versions. Only the hash of the embedded file\n  would work. For some file types where the outermost is always an archive,\n  eg. docx files, this made .fp signatures next to useless. For certain file\n  types where the scanned content was a normalized version of the original\n  content, eg. HTML, the normalized version was never hashed and this meant\n  that .fp signatures never worked.\n\n- Fixed Trusted & Revoked Windows executable (PE) file signature rules (.crb)\n  maximum functionality level (FLEVEL) which had been being treated as the\n  minimum FLEVEL. These signatures enable ClamAV to trust executables that\n  are digitally signed by trusted publishers, or to alert on executables signed\n  with compromised signing-certificates. The minimum and maximum FLEVELS enable\n  or disable signatures at load time depending on the current ClamAV version.\n\n- Fixed a bug wherein you could not build ClamAV with `--enable-libclamav-only`\n  if curl was not installed on the system.\n\n- Various other bug fixes, improvements, and documentation improvements.\n\n### New Requirements\n\n- Autotools (automake, autoconf, m4, pkg-config, libtool) are now required in\n  order to build from a Git clone because the files generated by these tools\n  have been removed from the Git repository. To generate theses files before\n  you compile ClamAV, run `autogen.sh`.\n  Users building with Autotools from the release tarball should be unaffected.\n\n### Acknowledgments\n\nThe ClamAV team thanks the following individuals for their code submissions:\n\n- Aldo Mazzeo\n- Ángel\n- Antonino Cangialosi\n- Clement Lecigne\n- Jamie Biggar\n- Jan Smutny\n- Jim Klimov\n- John Schember\n- Jonathan Sabbe\n- lutianxiong\n- Michael Orlitzky\n- Reio Remma\n- Sebastian A. Siewior\n- Zachary Murden\n\n## 0.102.4\n\nClamAV 0.102.4 is a bug patch release to address the following issues.\n\n- [CVE-2020-3350](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-3350):\n  Fix a vulnerability wherein a malicious user could replace a scan target's\n  directory with a symlink to another path to trick clamscan, clamdscan, or\n  clamonacc into removing or moving a different file (eg. a critical system\n  file). The issue would affect users that use the --move or --remove options\n  for clamscan, clamdscan, and clamonacc.\n\n  For more information about AV quarantine attacks using links, see the\n  [RACK911 Lab's report](https://www.rack911labs.com/research/exploiting-almost-every-antivirus-software).\n\n- [CVE-2020-3327](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-3327):\n  Fix a vulnerability in the ARJ archive parsing module in ClamAV 0.102.3 that\n  could cause a Denial-of-Service (DoS) condition. Improper bounds checking\n  results in an out-of-bounds read which could cause a crash.\n  The previous fix for this CVE in 0.102.3 was incomplete. This fix correctly\n  resolves the issue.\n\n- [CVE-2020-3481](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-3481):\n  Fix a vulnerability in the EGG archive module in ClamAV 0.102.0 - 0.102.3\n  could cause a Denial-of-Service (DoS) condition. Improper error handling\n  may result in a crash due to a NULL pointer dereference.\n  This vulnerability is mitigated for those using the official ClamAV\n  signature databases because the file type signatures in daily.cvd\n  will not enable the EGG archive parser in versions affected by the\n  vulnerability.\n\n## 0.102.3\n\nClamAV 0.102.3 is a bug patch release to address the following issues.\n\n- [CVE-2020-3327](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-3327):\n  Fix a vulnerability in the ARJ archive parsing module in ClamAV 0.102.2 that\n  could cause a Denial-of-Service (DoS) condition. Improper bounds checking of\n  an unsigned variable results in an out-of-bounds read which causes a crash.\n\n  Special thanks to Daehui Chang and Fady Othman for helping identify the ARJ\n  parsing vulnerability.\n\n- [CVE-2020-3341](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-3341):\n  Fix a vulnerability in the PDF parsing module in ClamAV 0.101 - 0.102.2 that\n  could cause a Denial-of-Service (DoS) condition. Improper size checking of\n  a buffer used to initialize AES decryption routines results in an out-of-\n  bounds read which may cause a crash. Bug found by OSS-Fuzz.\n\n- Fix \"Attempt to allocate 0 bytes\" error when parsing some PDF documents.\n\n- Fix a couple of minor memory leaks.\n\n- Updated libclamunrar to UnRAR 5.9.2.\n\n## 0.102.2\n\nClamAV 0.102.2 is a bug patch release to address the following issues.\n\n- [CVE-2020-3123](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-3123):\n  An Denial-of-Service (DoS) condition may occur when using the optional credit\n  card data-loss-prevention (DLP) feature. Improper bounds checking of an\n  unsigned variable resulted in an out-of-bounds read which causes a crash.\n\n- Significantly improved scan speed of PDF files on Windows.\n\n- Re-applied a fix to alleviate file access issues when scanning RAR files in\n  downstream projects that use libclamav where the scanning engine is operating\n  in a low-privilege process. This bug was originally fixed in 0.101.2 and the\n  fix was mistakenly omitted from 0.102.0.\n\n- Fixed an issue wherein freshclam failed to update if the database version\n  downloaded is 1 version older than advertised. This situation may occur after\n  a new database version is published. The issue affected users downloading the\n  whole CVD database file.\n\n- Changed the default freshclam ReceiveTimeout setting to 0 (infinite).\n  The ReceiveTimeout had caused needless database update failures for users with\n  slower internet connections.\n\n- Correctly display number of kilobytes (KiB) in progress bar and reduced the\n  size of the progress bar to accommodate 80-char width terminals.\n\n- Fixed an issue where running freshclam manually causes a daemonized freshclam\n  process to fail when it updates because the manual instance deletes the\n  temporary download directory. FreshClam temporary files will now download to a\n  unique directory created at the time of an update instead of using a hardcoded\n  directory created/destroyed at the program start/exit.\n\n- Fixed behavior of `freshclam`'s `OnOutdatedExecute` config option when in\n  foreground mode. Previously it would run the `OnUpdateExecute` command instead.\n  Patch courtesy of Antoine Deschênes.\n\n- Fixes a memory leak in the error condition handling for the email parser.\n\n- Improved bound checking and error handling in ARJ archive parser.\n\n- Improved error handling in PDF parser.\n\n- Fix for memory leak in byte-compare signature handler.\n\n- Updates to the unit test suite to support libcheck 0.13.\n\n- Updates to support autoconf 2.69 and automake 1.15.\n\nSpecial thanks to the following for code contributions and bug reports:\n\n- Antoine Deschênes\n- Eric Lindblad\n- Gianluigi Tiesi\n- Tuomo Soini\n\n## 0.102.1\n\nClamAV 0.102.1 is a security patch release to address the following issues.\n\n- Fix for the following vulnerability affecting 0.102.0 and 0.101.4 and prior:\n  - [CVE-2019-15961](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15961)\n    A Denial-of-Service (DoS) vulnerability may occur when scanning a specially\n    crafted email file as a result of excessively long scan times. The issue is\n    resolved by implementing several maximums in parsing MIME messages and by\n    optimizing use of memory allocation.\n\n- Build system fixes to build clamav-milter, to correctly link with libxml2 when\n  detected, and to correctly detect fanotify for on-access scanning feature\n  support.\n\n- Signature load time is significantly reduced by changing to a more efficient\n  algorithm for loading signature patterns and allocating the AC trie.\n  Patch courtesy of Alberto Wu.\n\n- Introduced a new configure option to statically link libjson-c with libclamav.\n  Static linking with libjson is highly recommended to prevent crashes in\n  applications that use libclamav alongside another JSON parsing library.\n\n- Null-dereference fix in email parser when using the `--gen-json` metadata\n  option.\n\n- Fixes for Authenticode parsing and certificate signature (.crb database) bugs.\n\nSpecial thanks to the following for code contributions and bug reports:\n\n- Alberto Wu\n- Joran Dirk Greef\n- Reio Remma\n\n## 0.102.0\n\nClamAV 0.102.0 includes an assortment improvements and a couple of significant\nchanges.\n\n### Major changes\n\n- The On-Access Scanning feature has been migrated out of `clamd` and into\n  a brand new utility named `clamonacc`. This utility is similar to\n  `clamdscan` and `clamav-milter` in that it acts as a client to `clamd`.\n  This separation from `clamd` means that `clamd` no longer needs to run\n  with root privileges while scanning potentially malicious files. Instead,\n  `clamd` may drop privileges to run under an account that does not have\n  super-user. In addition to improving the security posture of running\n  `clamd` with On-Access enabled, this update fixed a few outstanding defects:\n  - On-Access scanning for created and moved files (Extra-Scanning) is fixed.\n  - VirusEvent for On-Access scans is fixed.\n  - With `clamonacc`, it is now possible to copy, move, or remove a file if the\n    scan triggered an alert, just like with `clamdscan`.\n  For details on how to use the new `clamonacc` On-Access scanner, please\n  refer to the user manual on [ClamAV.net](https://docs.clamav.net/),\n  and keep an eye out for a new blog post on the topic\n- The `freshclam` database update utility has undergone a significant update.\n  This includes:\n  - Added support for HTTPS.\n  - Support for database mirrors hosted on ports other than 80.\n  - Removal of the mirror management feature (mirrors.dat).\n  - An all new libfreshclam library API.\n\n### Notable changes\n\n- Added support for extracting ESTsoft .egg archives.\n  This feature is new code developed from scratch using ESTsoft's Egg-archive\n  specification and without referencing the UnEgg library provided by ESTsoft.\n  This was necessary because the UnEgg library's license includes restrictions\n  limiting the commercial use of the UnEgg library.\n- The documentation has moved!\n  - Users should navigate to [ClamAV.net](https://docs.clamav.net/)\n    to view the documentation online.\n  - The documentation will continue to be provided in HTML format with each\n    release for offline viewing in the `docs/html` directory.\n  - The new home for the documentation markdown is in our\n    [ClamAV FAQ GitHub repository](https://github.com/Cisco-Talos/clamav-faq)\n- To remediate future denial of service conditions caused by excessive scan times,\n  we introduced a scan time limit.\n  The default value is 2 minutes (120000 milliseconds).\n\n  To customize the time limit:\n\n  - use the `clamscan` `--max-scantime` option\n  - use the `clamd` `MaxScanTime` config option\n\n  Libclamav users may customize the time limit using the `cl_engine_set_num`\n  function. For example:\n\n  ```c\n      cl_engine_set_num(engine, CL_ENGINE_MAX_SCANTIME, time_limit_milliseconds)\n  ```\n\n### Other improvements\n\n- Improved Windows executable Authenticode handling, enabling both allowing\n  and blocking of files based on code-signing certificates. Additional\n  improvements to Windows executable (PE file) parsing.\n  Work courtesy of Andrew Williams.\n- Added support for creating bytecode signatures for Mach-O and\n  ELF executable unpacking. Work courtesy of Jonas Zaddach.\n- Re-formatted the entire ClamAV code-base using `clang-format` in conjunction\n  with our new ClamAV code style specification. See the\n  [clamav.net blog post](https://blog.clamav.net/2019/02/clamav-adopts-clang-format.html)\n  for details.\n- Integrated ClamAV with Google's [OSS-Fuzz](https://github.com/google/oss-fuzz)\n  automated fuzzing service with the help of Alex Gaynor. This work has already\n  proven beneficial, enabling us to identify and fix subtle bugs in both legacy\n  code and newly developed code.\n- The `clamsubmit` tool is now available on Windows.\n- The `clamscan` metadata feature (`--gen-json`) is now available on Windows.\n- Significantly reduced number of warnings generated when compiling ClamAV with\n  \"-Wall\" and \"-Wextra\" compiler flags and made many subtle improvements to the\n  consistency of variable types throughout the code.\n- Updated the majority of third-party dependencies for ClamAV on Windows.\n  The source code for each has been removed from the clamav-devel repository.\n  This means that these dependencies have to be compiled independently of ClamAV.\n  The added build process complexity is offset by significantly reducing the\n  difficulty of releasing ClamAV with newer versions of those dependencies.\n- During the 0.102 development period, we've also improved our Continuous\n  Integration (CI) processes. Most recently, we added a CI pipeline definition\n  to the ClamAV Git repository. This chains together our build and quality\n  assurance test suites and enables automatic testing of all proposed changes\n  to ClamAV, with customizable parameters to suit the testing needs of any\n  given code change.\n- Added a new `clamav-version.h` generated header to provide version number\n  macros in text and numerical format for ClamAV, libclamav, and libfreshclam.\n- Improved cross-platform buildability of libxml2. Work courtesy of Eneas U de\n  Queiroz with supporting ideas pulled from the work of Jim Klimov.\n\n### Bug fixes\n\n- Fix to prevent a possible crash when loading LDB type signature databases\n  and PCRE is not available. Patch courtesy of Tomasz Kojm.\n- Fixes to the PDF parser that will improve PDF malware detection efficacy.\n  Patch courtesy of Clement Lecigne.\n- Fix for regular expression phishing signatures (PDB R-type signatures).\n- Various other bug fixes.\n\n### New Requirements\n\n- Libcurl has become a hard-dependency. Libcurl enables HTTPS support for\n  `freshclam` and `clamsubmit` as well as communication between `clamonacc`\n  and `clamd`.\n- Libcurl version >= 7.45 is required when building ClamAV from source with\n  the new On-Access Scanning application (`clamonacc`). Users on Linux operating\n  systems that package older versions of libcurl (e.g. all versions of CentOS\n  and Debian versions <= 8) have a number of options:\n\n  1. Wait for your package maintainer to provide a newer version of libcurl.\n  2. Install a newer version of libcurl [from source](https://curl.haxx.se/download.html).\n  3. Disable installation of `clamonacc` and On-Access Scanning capabilities\n    with the `./configure` flag `--disable-clamonacc`.\n\n  Non-Linux users will need to take no actions as they are unaffected by this\n  new requirement.\n\n### Acknowledgments\n\nThe ClamAV team thanks the following individuals for their code submissions:\n\n- Alex Gaynor\n- Andrew Williams\n- Carlo Landmeter\n- Chips\n- Clement Lecigne\n- Eneas U de Queiroz\n- Jim Klimov\n- Joe Cooper\n- Jonas Zaddach\n- Markus Kolb\n- Orion Poplawski\n- Ørjan Malde\n- Paul Arthur\n- Rick Wang\n- Romain Chollet\n- Rosen Penev\n- Thomas Jarosch\n- Tomasz Kojm\n- Tuomo Soini\n\nFinally, we'd like to thank Joe McGrath for building our quality assurance test suite\nand for working diligently to ensure knowledge transfer up until his last day\non the team. Working with you was a pleasure, Joe, and we wish you the best\nof luck in your next adventure!\n\n## 0.101.5\n\nClamAV 0.101.5 is a security patch release that addresses the following issues.\n\n- Fix for the following vulnerability affecting 0.102.0 and 0.101.4 and prior:\n  - [CVE-2019-15961](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15961)\n    A Denial-of-Service (DoS) vulnerability may occur when scanning a specially\n    crafted email file as a result of excessively long scan times. The issue is\n    resolved by implementing several maximums in parsing MIME messages and by\n    optimizing use of memory allocation.\n\n- Added the zip scanning improvements found in v0.102.0 where it scans files\n  using zip records from a sorted catalogue which provides deduplication of\n  file records resulting in faster extraction and scan time and reducing the\n  likelihood of alerting on non-malicious duplicate file entries as overlapping\n  files.\n\n- Signature load time is significantly reduced by changing to a more efficient\n  algorithm for loading signature patterns and allocating the AC trie.\n  Patch courtesy of Alberto Wu.\n\n- Introduced a new configure option to statically link libjson-c with libclamav.\n  Static linking with libjson is highly recommended to prevent crashes in\n  applications that use libclamav alongside another JSON parsing library.\n\n- Null-dereference fix in email parser when using the `--gen-json` metadata\n  option.\n\nSpecial thanks to the following for code contributions and bug reports:\n\n- Alberto Wu\n- Joran Dirk Greef\n\n## 0.101.4\n\nClamAV 0.101.4 is a security patch release that addresses the following issues.\n\n- An out of bounds write was possible within ClamAV's NSIS bzip2 library when\n  attempting decompression in cases where the number of selectors exceeded the\n  max limit set by the library (CVE-2019-12900). The issue has been resolved\n  by respecting that limit.\n\n  Thanks to Martin Simmons for reporting the issue [here](https://bugzilla.clamav.net/show_bug.cgi?id=12371)\n\n- The zip bomb vulnerability mitigated in 0.101.3 has been assigned the\n  CVE identifier CVE-2019-12625. Unfortunately, a workaround for the zip-bomb\n  mitigation was immediately identified. To remediate the zip-bomb scantime\n  issue, a scan time limit has been introduced in 0.101.4. This limit now\n  resolves ClamAV's vulnerability to CVE-2019-12625.\n\n  The default scan time limit is 2 minutes (120000 milliseconds).\n\n  To customize the time limit:\n\n  - use the `clamscan` `--max-scantime` option\n  - use the `clamd` `MaxScanTime` config option\n\n  Libclamav users may customize the time limit using the `cl_engine_set_num`\n  function. For example:\n\n  ```c\n      cl_engine_set_num(engine, CL_ENGINE_MAX_SCANTIME, time_limit_milliseconds)\n  ```\n\n  Thanks to David Fifield for reviewing the zip-bomb mitigation in 0.101.3\n  and reporting the issue.\n\n## 0.101.3\n\nClamAV 0.101.3 is a patch release to address a vulnerability to non-recursive\nzip bombs.\n\nA Denial-of-Service (DoS) vulnerability may occur when scanning a zip bomb as a\nresult of excessively long scan times. The issue is resolved by detecting the\noverlapping local file headers which characterize the non-recursive zip bomb\ndescribed by David Fifield,\n[here](https://www.bamsoftware.com/hacks/zipbomb/).\n\nThank you to Hanno Böck for reporting the issue as it relates to ClamAV,\n[here](https://bugzilla.clamav.net/show_bug.cgi?id=12356).\n\nAlso included in 0.101.3:\n\n- Update of bundled the libmspack library from 0.8alpha to 0.10alpha, to\n  address a buffer overflow vulnerability in libmspack < 0.9.1α.\n\n## 0.101.2\n\nClamAV 0.101.2 is a patch release to address a handful of security related bugs.\n\nThis patch release is being released alongside the 0.100.3 patch so that users\nwho are unable to upgrade to 0.101 due to libclamav API changes are protected.\n\nThis release includes 3 extra security related bug fixes that do not apply to\nprior versions. In addition, it includes a number of minor bug fixes and\nimprovements.\n\n- Fixes for the following vulnerabilities affecting 0.101.1 and prior:\n  - [CVE-2019-1787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1787):\n    An out-of-bounds heap read condition may occur when scanning PDF\n    documents. The defect is a failure to correctly keep track of the number\n    of bytes remaining in a buffer when indexing file data.\n  - [CVE-2019-1789](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1789):\n    An out-of-bounds heap read condition may occur when scanning PE files\n    (i.e. Windows EXE and DLL files) that have been packed using Aspack as a\n    result of inadequate bound-checking.\n  - [CVE-2019-1788](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1788):\n    An out-of-bounds heap write condition may occur when scanning OLE2 files\n    such as Microsoft Office 97-2003 documents. The invalid write happens when\n    an invalid pointer is mistakenly used to initialize a 32bit integer to\n    zero. This is likely to crash the application.\n\n- Fixes for the following vulnerabilities affecting 0.101.1 and 0.101.0 only:\n  - [CVE-2019-1786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1786):\n    An out-of-bounds heap read condition may occur when scanning malformed PDF\n    documents as a result of improper bounds-checking.\n  - [CVE-2019-1785](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1785):\n    A path-traversal write condition may occur as a result of improper input\n    validation when scanning RAR archives. Issue reported by aCaB.\n  - [CVE-2019-1798](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1798):\n    A use-after-free condition may occur as a result of improper error\n    handling when scanning nested RAR archives. Issue reported by David L.\n\n- Fixes for the following assorted bugs:\n  - Added checks to prevent shifts from causing undefined behavior in HTML\n    normalizer, UPX unpacker, ARJ extractor, CPIO extractor, OLE2 parser,\n    LZW decompressor used in the PDF parser, Xz decompressor, and UTF-16 to\n    ASCII transcoder.\n  - Added checks to prevent integer overflow in UPX unpacker.\n  - Fix for minor memory leak in OLE2 parser.\n  - Fix to speed up PDF parser when handling truncated (or malformed) PDFs.\n  - Fix for memory leak in ARJ decoder failure condition.\n  - Fix for potential memory and file descriptor leak in HTML normalization code.\n\n- Removed use of problematic feature that converted file descriptors to\n  file paths. The feature was intended to improve performance when scanning\n  file types, notably RAR archives, for which the API requires a file path.\n  This feature caused issues in environments where the ClamAV engine is run\n  in a low-permissions or sandboxed process. RAR archives are still supported\n  with this change, but performance may suffer slightly if the file path is not\n  provided in calls to `cl_scandesc_callback()`.\n  - Added filename and tempfile names to scandesc calls in clamd.\n  - Added general scan option `CL_SCAN_GENERAL_UNPRIVILEGED` to treat the scan\n    engine as unprivileged, meaning that the scan engine will not have read\n    access to the file. Provided file paths are for logging purposes only.\n  - Added ability to create a temp file when scanning RAR archives when the\n    process does not have read access to the file path provided (i.e.\n    unprivileged is set, or an access check fails).\n\nThank you to the Google OSS-Fuzz project for identifying and reporting many of\nthe bugs patched in this release.\n\nAdditional thanks to the following community members for submitting bug reports:\n\n- aCaB\n- David L.\n\n## 0.101.1\n\nClamAV 0.101.1 is an urgent patch release to address an issue in 0.101.0\nspecifically for developers that depend on libclamav.\n\nThe issue in 0.101.0 is that `clamav.h` required supporting headers that were\nnot provided on `make install`.\n\nTo address this issue, the internal `cltypes.h` header has been replaced by\na `clamav-types.h` that is generated on `./configure` and will be installed\nalongside `clamav.h`.\n\n### Other changes\n\n- Increased the default CommandReadTimeout to reduce the chance of mail loss\n  if using clamav-milter with the TCP socket. Contribution by Scott Kitterman.\n- Fixes for `--with-libjson` and `--with-libcurl` to correctly accept library\n  install path arguments.\n\n### Acknowledgments\n\nThe ClamAV team thanks the following individuals for their code submissions:\n\n- Scott Kitterman\n\n## 0.101.0\n\nClamAV 0.101.0 is a feature release with an assortment of improvements that\nwe've cooked up over the past 6 months.\n\n### Some of the more obvious changes\n\n- Our user manual has been converted from latex/pdf/html into **Markdown**!\n  Markdown is easier to read & edit than latex, and is easier to contribute\n  to as it eliminates the need to generate documents (the PDF, HTML).\n  Find the user manual under docs/UserManual[.md].\n  [Check it out!](https://github.com/Cisco-Talos/clamav-devel/blob/dev/0.101/docs/UserManual.md)\n- Support for RAR v5 archive extraction! We replaced the legacy C-based unrar\n  implementation with RarLabs UnRAR 5.6.5 library. Licensing is the same as\n  before, although our `libclamunrar_iface` supporting library has changed from\n  LGPL to the BSD 3-Clause license.\n- Libclamav API changes:\n  - The following scanning functions now require a filename argument.\n    This will enable ClamAV to report more details warning and error\n    information in the future, and will also allow for more sensible temp\n    file names. The filename argument may be `NULL` if a filename is not\n    available.\n    - `cl_scandesc`\n    - `cl_scandesc_callback`\n    - `cl_scanmap_callback`\n  - Scanning options have been converted from a single flag bit-field into\n    a structure of multiple categorized flag bit-fields. This change enabled\n    us to add new scanning options requested by the community. In addition,\n    the name of each scan option has changed a little.\n    As a result, the API changes will require libclamav users to modify\n    how they initialize and pass scan options into calls such as `cl_scandesc()`.\n    For details:\n    - [example code](https://github.com/Cisco-Talos/clamav-devel/blob/dev/0.101/examples/ex1.c#L89)\n    - [documentation](https://github.com/Cisco-Talos/clamav-devel/blob/dev/0.101/docs/UserManual/libclamav.md#data-scan-functions)\n  - With our move to openssl versions >1.0.1, the `cl_cleanup_crypto()` function\n    has been deprecated. This is because cleanup of open-ssl init functions is\n    now handled by an auto-deinit procedure within the openssl library, meaning\n    the call to `EVP_cleanup()` may cause problems to processes external to Clam.\n  - `CL_SCAN_HEURISTIC_ENCRYPTED` scan option was replaced by 2 new scan options:\n    - `CL_SCAN_HEURISTIC_ENCRYPTED_ARCHIVE`\n    - `CL_SCAN_HEURISTIC_ENCRYPTED_DOC`\n- `clamd.conf` and command line interface (CLI) changes:\n  - As in 0.100.2, the clamd.conf `OnAccessExtraScanning` has been temporarily\n    disabled in order to prevent resource cleanup issues from impacting clamd\n    stability. As noted below, `OnAccessExtraScanning` is an opt-in minor\n    feature of on-access scanning on Linux systems and its loss does not\n    significantly impact the effectiveness of on-access scanning.\n    The option still exists, but the feature will not be enabled and a warning\n    will show if `LogVerbose` is enabled.\n    For details, see: https://bugzilla.clamav.net/show_bug.cgi?id=12048\n  - \"Heuristic Alerts\" (aka \"Algorithmic Detection\") options have been changed\n    to make the names more consistent. The original options are deprecated in\n    0.101, and will be removed in a future feature release.\n  - In addition, _two new scan options_ were added to alert specifically on\n    encrypted archives or encrypted docs. Previous functionality did both, even\n    though it claimed to be specific to archives:\n  - Scan option details:\n\n    | Old `clamd.conf` option          | *New* `clamd.conf` option    |\n    | -------------------------------- | ---------------------------- |\n    | `AlgorithmicDetection`           | `HeuristicAlerts`            |\n    | `DetectBrokenExecutables`        | `AlertBrokenExecutables`     |\n    | `PhishingAlwaysBlockCloak`       | `AlertPhishingCloak`         |\n    | `PhishingAlwaysBlockSSLMismatch` | `AlertPhishingSSLMismatch`   |\n    | `PartitionIntersection`          | `AlertPartitionIntersection` |\n    | `BlockMax`                       | `AlertExceedsMax`            |\n    | `OLE2BlockMacros`                | `AlertOLE2Macros`            |\n    | `ArchiveBlockEncrypted`          | `AlertEncrypted`             |\n    |                                  | `AlertEncryptedArchive`      |\n    |                                  | `AlertEncryptedDoc`          |\n\n    | Old `clamscan` option      | *New* `clamscan` option          |\n    | -------------------------- | -------------------------------- |\n    | `--algorithmic-detection`  | `--heuristic-alerts`             |\n    | `--detect-broken`          | `--alert-broken`                 |\n    | `--phishing-cloak`         | `--alert-phishing-cloak`         |\n    | `--phishing-ssl`           | `--alert-phishing-ssl`           |\n    | `--partition-intersection` | `--alert-partition-intersection` |\n    | `--block-max`              | `--alert-exceeds-max`            |\n    | `--block-macros`           | `--alert-macros`                 |\n    | `--block-encrypted`        | `--alert-encrypted`              |\n    |                            | `--alert-encrypted-archive`      |\n    |                            | `--alert-encrypted-doc`          |\n\n### Some more subtle improvements\n\n- Logical signatures have been extended with a new subsignature type which\n  allows for numerical byte sequence comparison. For those familiar with\n  Snort, this byte comparison feature works similarly to the byte_extract\n  and byte_test feature, in that it allows signature writers to extract and\n  compare a specified number of bytes (offset from a match) against another\n  numeric value. You can read more about this feature, see how it works, and\n  look over examples in [our documentation](docs/UserManual/Signatures.md).\n- Backwards compatibility improvements for detecting the OpenSSL dependency.\n- FreshClam updated to match exit codes defined in the freshclam.1 man page.\n- Upgrade from libmspack 0.5alpha to libmspack 0.7.1alpha. As a reminder, we\n  support system-installed versions of libmspack. _However_, at this time the\n  ClamAV-provided version of libmspack provides additional abilities to parse\n  broken or non-standard CAB files beyond what the stock libmspack 0.7.1alpha\n  provides. We are working with the upstream project to incorporate our\n  modifications, and hopefully these changes will appear in a future release\n  of libmspack.\n- Updated the bundled 3rd party library libxml2 included for Windows builds to\n  version 2.9.8.\n- Updated the bundled 3rd party library pcre included for Windows builds to\n  pcre2 version 10.31.\n- Upgraded Aspack PE unpacking capability with support up to version 2.42.\n- Improvements to PDF parsing capability.\n- Replaced the Windows installer with a new installer built using InnoSetup 5.\n- Improved `curl-config` detection logic.\n  GitHub pull-request by Thomas Petazzoni.\n- Added file type `CL_TYPE_LNK` to more easily identify Windows Shortcut files\n  when writing signatures.\n- Improved parsing of Windows executable (PE) Authenticode signatures. Pull-\n  request by Andrew Williams.\n  - Added support for Authenticode signature properties commonly used by\n    Windows system files. These files are now much more likely to be\n    trusted correctly.\n  - Signature parsing now works correctly on big endian systems.\n\n- Some simplification to freshclam mirror management code, including changes\n  to reduce timeout on ignoring mirrors after errors, and to make freshclam\n  more tolerant when there is a delay between the time the new signature\n  database content is announced and the time that the content-delivery-network\n  has the content available for download.\n- Email MIME Header parsing changes to accept argument values with unbalanced\n  quotes. Improvement should improve detection of attachments on malformed\n  emails.\n  GitHub pull-request by monnerat.\n- Included the config filename when reporting errors parsing ClamAV configs.\n  GitHub pull-request by Josh Soref.\n- Improvement to build scripts for clamav-milter.\n  GitHub pull-request by Renato Botelho.\n\n### Other changes\n\n- Removed option handler for `AllowSupplementaryGroups` from libfreshclam.\n  This option was previously deprecated from freshclam in ClamAV 0.100.0 but\n  remained in libfreshclam by mistake.\n- In older versions of pcre2 and in pcre, a higher `PCRERecMatchLimit` may\n  cause `clamd` to crash on select files. We have lowered the default\n  `PCRERecMatchLimit` to 2000 to reduce the likelihood of a crash and have\n  added warnings to recommend using pcre2 v10.30 or higher to eliminate\n  the issue.\n\n### Supporting infrastructure\n\nAs you might imagine, ClamAV is much more than just the tarball or EXE you\ndownload and install. Here at Talos, we've been working hard on the support\ninfrastructure that's so easy to take for granted.\n\n- Test Frameworks\n  - Feature Testing:\n    Throughout the development of ClamAV 0.101, our quality assurance engineers\n    have been hard at work rebuilding our QA automation framework in Python from\n    the ground up to test ClamAV features on 32-and-64bit versions:\n    - Linux: Ubuntu, Debian, CentOS, Fedora\n    - FreeBSD 11\n    - Windows 10\n\n    In addition to building out the framework, they've written over 260\n    individual feature tests to validate correctness of the new features going\n    into 0.101 as well as to validate many existing features.\n\n  - Build Acceptance Testing:\n    Another major task accomplished during the development of 0.101 was the\n    creation of a build acceptance test framework that we run from our Jenkins\n    CI server.\n\n    Similar to the feature testing framework, our build acceptance framework\n    tests across 64bit and 32bit (where available):\n    - macOS 10 (.10, .11, .13)\n    - Windows (7, 10)\n    - Debian (8, 9), Ubuntu (16.04, 18.04), CentOS (6, 7)\n    - FreeBSD (10, 11)\n\n    This pipeline creates our release materials including the Windows installers,\n    and then validates that the basic install, update, start, scan, and stop\n    procedures all work as expected each time commits are made to our\n    development branches.\n\n- Signature Database Distribution:\n  During the course of ClamAV 0.101 development, our web and ops teams have been\n  able to migrate us from a network of third-party mirrors over to use the\n  services of CloudFlare to provide a more unified content-delivery-network.\n\n  With CloudFlare, some users in geographic regions that had few mirrors\n  will notice much improved signature update speeds and reliability.\n  In addition, we're excited to be able to finally see user metrics that will\n  help us continue to improve ClamAV.\n\n  We are of course grateful to all of the community members who have donated\n  their server bandwidth to mirror the ClamAV signature databases over the\n  years. Thank-you so much!\n\n- Development Processes:\n  As many of you know, ClamAV 0.100 was in development for a good two years.\n  Not only was this frustrating for users awaiting new features and bug-fixes,\n  it also made for a difficult transition for users that weren't expecting two\n  years worth of change when 0.100 landed.\n\n  We have learned from the experience and are committed to providing shorter\n  and more responsive ClamAV development cycles.\n\n  ClamAV 0.101 is the first of many smaller feature releases where we created\n  a roadmap with distinct deadlines and with specific planned features. We based\n  the feature list on both community requests and our own needs and then\n  executed that plan.\n\n  We're very proud of ClamAV 0.101 and we hope you enjoy it.\n\n### Acknowledgments\n\nThe ClamAV team thanks the following individuals for their code submissions:\n\n- Andrew Williams\n- Craig Andrews\n- Josh Soref\n- monnerat\n- Renato Botelho\n- tchernomax\n- Thomas Petazzoni\n\n## 0.100.2\n\nClamAV 0.100.2 is a patch release to address a set of vulnerabilities.\n\n- Fixes for the following ClamAV vulnerabilities:\n  - [CVE-2018-15378](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15378):\n    Vulnerability in ClamAV's MEW unpacking feature that could allow an\n    unauthenticated, remote attacker to cause a denial of service (DoS)\n    condition on an affected device.\n    Reported by Secunia Research at Flexera.\n  - Fix for a 2-byte buffer over-read bug in ClamAV's PDF parsing code.\n    Reported by Alex Gaynor.\n- Fixes for the following vulnerabilities in bundled third-party libraries:\n  - [CVE-2018-14680](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14680):\n    An issue was discovered in mspack/chmd.c in libmspack before 0.7alpha. It\n    does not reject blank CHM filenames.\n  - [CVE-2018-14681](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14681):\n    An issue was discovered in kwajd_read_headers in mspack/kwajd.c in\n    libmspack before 0.7alpha. Bad KWAJ file header extensions could cause\n    a one or two byte overwrite.\n  - [CVE-2018-14682](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14682):\n    An issue was discovered in mspack/chmd.c in libmspack before 0.7alpha.\n    There is an off-by-one error in the TOLOWER() macro for CHM decompression.\n  - Additionally, 0.100.2 reverted 0.100.1's patch for CVE-2018-14679, and applied\n    libmspack's version of the fix in its place.\n- Other changes:\n  - Some users have reported freshclam signature update failures as a result of\n    a delay between the time the new signature database content is announced and\n    the time that the content-delivery-network has the content available for\n    download. To mitigate these errors, this patch release includes some\n    modifications to freshclam to make it more lenient, and to reduce the time\n    that freshclam will ignore a mirror when it detects an issue.\n  - On-Access \"Extra Scanning\", an opt-in minor feature of OnAccess scanning on\n    Linux systems, has been disabled due to a known issue with resource cleanup.\n    OnAccessExtraScanning will be re-enabled in a future release when the issue\n    is resolved. In the mean-time, users who enabled the feature in clamd.conf\n    will see a warning informing them that the feature is not active.\n    For details, see: https://bugzilla.clamav.net/show_bug.cgi?id=12048\n\nThank you to the following ClamAV community members for your code submissions\nand bug reports!\n\n- Alex Gaynor\n- Hiroya Ito\n- Laurent Delosieres, Secunia Research at Flexera\n\n## 0.100.1\n\nClamAV 0.100.1 is a hotfix release to patch a set of vulnerabilities.\n\n- Fixes for the following CVE's:\n  - [CVE-2017-16932](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16932):\n    Vulnerability in libxml2 dependency (affects ClamAV on Windows only).\n  - [CVE-2018-0360](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0360):\n    HWP integer overflow, infinite loop vulnerability.\n    Reported by Secunia Research at Flexera.\n  - [CVE-2018-0361](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0361):\n    ClamAV PDF object length check, unreasonably long time to parse relatively\n    small file. Reported by aCaB.\n- Fixes for a few additional bugs:\n  - Buffer over-read in unRAR code due to missing max value checks in table\n    initialization. Reported by Rui Reis.\n  - Libmspack heap buffer over-read in CHM parser. Reported by Hanno Böck.\n  - PDF parser bugs reported by Alex Gaynor.\n    - Buffer length checks when reading integers from non-NULL terminated strings.\n    - Buffer length tracking when reading strings from dictionary objects.\n- HTTPS support for clamsubmit.\n- Fix for DNS resolution for users on IPv4-only machines where IPv6 is not\n  available or is link-local only. Patch provided by Guilherme Benkenstein.\n\nThank you to the following ClamAV community members for your code submissions\nand bug reports!\n\n- aCaB\n- Alex Gaynor\n- Guilherme Benkenstein\n- Hanno Böck\n- Rui Reis\n- Laurent Delosieres, Secunia Research at Flexera\n\n## 0.100.0\n\nClamAV 0.100.0 is a feature release which includes many code submissions\n from the ClamAV community. As always, it can be downloaded from our downloads\n page on clamav.net. Some of the more prominent submissions include:\n\n- Interfaces to the Prelude SIEM open source package for collecting\n  ClamAV virus events.\n- Support for Visual Studio 2015 for Windows builds. Please note that we\n  have deprecated support for Windows XP, and while Vista may still work,\n  we no longer test ClamAV on Windows XP or Vista.\n- Support libmspack internal code or as a shared object library.\n  The internal library is the default and includes modifications to enable\n  parsing of CAB files that do not entirely adhere to the CAB file format.\n- Linking with OpenSSL 1.1.0.\n- Deprecation of the AllowSupplementaryGroups parameter statement\n  in clamd, clamav-milter, and freshclam. Use of supplementary\n  is now in effect by default.\n- Numerous bug fixes, typo corrections, and compiler warning fixes.\n\nAdditionally, we have introduced important changes and new features in\nClamAV 0.100, including but not limited to:\n\n- Deprecating internal LLVM code support. The configure script has changed\n  to search the system for an installed instance of the LLVM development\n  libraries, and to otherwise use the bytecode interpreter for ClamAV\n  bytecode signatures. To use the LLVM Just-In-Time compiler for\n  executing bytecode signatures, please ensure that the LLVM development\n  package at version 3.6 or lower is installed. Using the deprecated LLVM\n  code is possible with the command: `./configure --with-system-llvm=no`,\n  but it no longer compiles on all platforms.\n- Compute and check PE import table hash (a.k.a. \"imphash\") signatures.\n- Support file property collection and analysis for MHTML files.\n- Raw scanning of PostScript files.\n- Fix clamsubmit to use the new virus and false positive submission web\n  interface.\n- Optionally, flag files with the virus \"Heuristics.Limits.Exceeded\" when\n  size limitations are exceeded.\n- Improved decoders for PDF files.\n- Reduced number of compile time warnings.\n- Improved support for C++11.\n- Improved detection of system installed libraries.\n- Fixes to ClamAV's Container system and the introduction of Intermediates\n  for more descriptive signatures.\n- Improvements to clamd's On-Access scanning capabilities for Linux.\n\n### Acknowledgments\n\nThe ClamAV team thanks the following individuals for their code submissions:\n\n- Andreas Schulze\n- Anthony Chan\n- Bill Parker\n- Chris Miserva\n- Daniel J. Luke\n- Georgy Salnikov\n- James Ralston\n- Jonas Zaddach\n- Keith Jones\n- Marc Deslauriers\n- Mark Allan\n- Matthew Boedicker\n- Michael Pelletier\n- Ningirsu\n- Sebastian Andrzej Siewior\n- Stephen Welker\n- Tuomo Soini\n\n### Known Issues\n\nClamAV has an active issue queue and enjoys continual improvement but as sad as\n I am to say it, we couldn't address every bug in this release. I want to draw\n your attention a couple bugs in particular so as not to frustrate users\n setting up ClamAV:\n\n- Platform: macOS:\n  - Bug:  If you attempt to build ClamAV with a system installed LLVM you may\n    receive a linker error. We recently changed default linking behavior to\n    prefer dynamic linking over static linking. As a result, we've uncovered a\n    bug in building on macOS where dynamic linking against the LLVM libraries\n    fails. To work around this bug, please add the --with-llvm-linking=static\n    option to your ./configure call.\n\n- Platform: CentOS 6 32bit, older versions of AIX:\n  - Bug:  On CentOS 6 32bit we observed that specific versions of zlib fail to\n    correctly decompress the CVD signature databases. If you are on an older\n    system such as CentoOS 6 32bit and observe failures loading the signature\n    database, please consider upgrading to a newer version of zlib.\n\n- Platform: Miscellaneous\n  - Bug:  When cross compiling on certain legacy systems (Solaris, AIX, OSX)\n    against older system libraries that do not support strn functions linking\n    may fail during compile time. While automatic checking is done during\n    configure time to check for unsupported libs, this problem can be manually\n    avoided using the --enable-strni configure flag if it is encountered.\n\n## 0.99.4\n\nClamAV 0.99.4 is a hotfix release to patch a set of vulnerabilities.\n\n- fixes for the following CVE's: CVE-2012-6706, CVE-2017-6419,\n  CVE-2017-11423, CVE-2018-0202, and CVE-2018-1000085.\n- also included are 2 fixes for file descriptor leaks as well fixes for\n  a handful of other important bugs, including patches to support g++ 6, C++11.\n\nThank you to the following ClamAV community members for your code\nsubmissions and bug reports!\n\nAlberto Garcia\nBernhard Vogel\nFrancisco Oca\nHanno Böck\nJeffrey Yasskin\nKeith Jones\nmtowalski\nSuleman Ali\nyongji.oy\nxrym\n\n## 0.99.3\n\nClamAV 0.99.3 is a hotfix release to patch a set of vulnerabilities.\n\n- fixes for the following CVE's: CVE-2017-6418, CVE-2017-6420,\n  CVE-2017-12374, CVE-2017-12375, CVE-2017-12376, CVE-2017-12377,\n  CVE-2017-12378, CVE-2017-12379, CVE-2017-12380.\n- also included are 2 minor fixes to properly detect openssl install\n  locations on FreeBSD 11, and prevent false warnings about zlib 1.2.1#\n  version numbers.\n\nThank you to the following ClamAV community members for your code\nsubmissions and bug reports!\n\n- Alberto Garcia\n- Daniel J. Luke\n- Francisco Oca\n- Sebastian A. Siewior\n- Suleman Ali\n\nSpecial thanks to Offensive Research at Salesforce.com for responsible disclosure.\n\n## 0.99.2\n\nClamAV 0.99.2 is a release of bug fixes and minor enhancements.\n\n- fix ups improving the reliability of several ClamAV file parsers.\n- sigtool now decodes file type signatures (e.g., daily.ftm CVD file).\n- now supporting libpcre2 in addition to libpcre.\n- systemd support for clamd and freshclam. Patch provided by\n  Andreas Cadhalpun.\n- fixed builds on Mac OS X 10.10 & 10.11.\n- improved debug info for certificate metadata.\n- improved freshclam messaging when using a proxy.\n- fixed some freshclam functionality when using private mirrors.\n- clamd refinements of open file limitations on Solaris. Patch by\n  Jim Morris\n- clamav-milter signal handling for improved clean up during\n  termination.\n\nThank you to the following ClamAV community members for your code\nsubmissions and bug reports!\n\n- Brandon Perry\n- Sebastian Andrzej Siewior\n- Andreas Cadhalpun\n- Jim Morris\n- Kai Risku\n- Bill Parker\n- Tomasz Kojm\n- Steve Basford\n- Daniel J. Luke\n- James Ralston\n- John Dodson\n\n## 0.99.1\n\nClamAV 0.99.1 contains a new feature for parsing Hancom Office files\nincluding extracting and scanning embedded objects. ClamAV 0.99.1\nalso contains important bug fixes. Please see ChangeLog for details.\n\nThanks to the following community members for code submissions used in\nClamAV 0.99.1:\n\n- Jim Morris\n- Andreas Cadhalpun\n- Mark Allan\n- Sebastian Siewior\n\n## 0.99\n\nClamAV 0.99 contains major new features and changes. YARA rules,\nPerl Compatible Regular Expressions, revamped on-access scanning\nfor Linux, and other new features join the many great features of ClamAV:\n\n- Processing of YARA rules(some limitations- see signatures.pdf).\n- Support in ClamAV logical signatures for many of the features\n  added for YARA, such as Perl Compatible Regular Expressions,\n  alternate strings, and YARA string attributes. See signatures.pdf\n  for full details.\n- New and improved on-access scanning for Linux. See the recent blog\n  post and clamdoc.pdf for details on the new on-access capabilities.\n- A new ClamAV API callback function that is invoked when a virus\n  is found. This is intended primarily for applications running in\n  all-match mode. Any applications using all-match mode must use\n  the new callback function to record and report detected viruses.\n- Configurable default password list to attempt zip file decryption.\n- TIFF file support.\n- Upgrade Windows pthread library to 2.9.1.\n- A new signature target type for designating signatures to run\n  against files with unknown file types.\n- Improved fidelity of the \"data loss prevention\" heuristic\n  algorithm. Code supplied by Bill Parker.\n- Support for LZMA decompression within Adobe Flash files.\n- Support for MSO attachments within Microsoft Office 2003 XML files.\n- A new sigtool option(--ascii-normalize) allowing signature authors\n  to more easily generate normalized versions of ascii files.\n- Windows installation directories changed from \\Program Files\\Sourcefire\\\n  ClamAV to \\Program Files\\ClamAV or \\Program Files\\ClamAV-x64.\n\nPLEASE NOTE:  If you are using clamd on-access scanning or have applications\nusing all-match mode, you will want to review the changes and make any necessary\nadjustments before using ClamAV 0.99. Users of windows binaries need to be\naware of the change of installation directories.\n\nThank you to the ClamAV community members who sent patches and bug reports\nincluded for ClamAV 0.99:\n\n- Steve Basford\n- Sebastian Andrzej Siewior\n- Bill Parker\n- Andreas Schulze\n- Yann E. Morin\n- Andreas Cadhalpun\n- Dmitry Marakasov\n- Michael Pelletier\n- Felix Groebert\n- Stephen Welker\n\n## 0.98.7\n\nClamAV 0.98.7 is here! This release contains new scanning features\nand bug fixes.\n\n- Improvements to PDF processing: decryption, escape sequence\n  handling, and file property collection.\n- Scanning/analysis of additional Microsoft Office 2003 XML format.\n- Fix infinite loop condition on crafted y0da cryptor file. Identified\n  and patch suggested by Sebastian Andrzej Siewior. CVE-2015-2221.\n- Fix crash on crafted petite packed file. Reported and patch\n  supplied by Sebastian Andrzej Siewior. CVE-2015-2222.\n- Fix false negatives on files within iso9660 containers. This issue\n  was reported by Minzhuan Gong.\n- Fix a couple crashes on crafted upack packed file. Identified and\n  patches supplied by Sebastian Andrzej Siewior.\n- Fix a crash during algorithmic detection on crafted PE file.\n  Identified and patch supplied by Sebastian Andrzej Siewior.\n- Fix an infinite loop condition on a crafted \"xz\" archive file.\n  This was reported by Dimitri Kirchner and Goulven Guiheux.\n  CVE-2015-2668.\n- Fix compilation error after ./configure --disable-pthreads.\n  Reported and fix suggested by John E. Krokes.\n- Apply upstream patch for possible heap overflow in Henry Spencer's\n  regex library. CVE-2015-2305.\n- Fix crash in upx decoder with crafted file. Discovered and patch\n  supplied by Sebastian Andrzej Siewior. CVE-2015-2170.\n- Fix segfault scanning certain HTML files. Reported with sample by\n  Kai Risku.\n- Improve detections within xar/pkg files.\n\nAs always, we appreciate contributions of bug reports, code fixes,\nand sample submission from the ClamAV community members:\n\nSebastian Andrzej Siewior\nMinzhuan Gong\nDimitri Kirchner\nGoulven Guiheux\nJohn E. Krokes\nKai Risku\n\n## 0.98.6\n\nClamAV 0.98.6 is a bug fix release correcting the following:\n\n- library shared object revisions.\n- installation issues on some Mac OS X and FreeBSD platforms.\n- includes a patch from Sebastian Andrzej Siewior making\n  ClamAV pid files compatible with systemd.\n- Fix a heap out of bounds condition with crafted Yoda's\n  crypter files. This issue was discovered by Felix Groebert\n  of the Google Security Team.\n- Fix a heap out of bounds condition with crafted mew packer\n  files. This issue was discovered by Felix Groebert of the\n  Google Security Team.\n- Fix a heap out of bounds condition with crafted upx packer\n  files. This issue was discovered by Kevin Szkudlapski of\n  Quarkslab.\n- Fix a heap out of bounds condition with crafted upack packer\n  files. This issue was discovered by Sebastian Andrzej Siewior.\n  CVE-2014-9328.\n- Compensate a crash due to incorrect compiler optimization when\n  handling crafted petite packer files. This issue was discovered\n  by Sebastian Andrzej Siewior.\n\nThanks to the following ClamAV community members for code submissions\nand bug reporting included in ClamAV 0.98.6:\n\nSebastian Andrzej Siewior\nFelix Groebert\nKevin Szkudlapski\nMark Pizzolato\nDaniel J. Luke\n\n## 0.98.5\n\nWelcome to ClamAV 0.98.5! ClamAV 0.98.5 includes important new features\nfor collecting and analyzing file properties. Software developers and\nanalysts may collect file property meta data using the ClamAV API for\nsubsequent analysis by ClamAV bytecode programs. Using these features\nwill require that libjson-c is installed, but otherwise libjson-c is not\nneeded.\n\nLook for our upcoming series of blog posts to learn more about using the\nClamAV API and bytecode facilities for collecting and analyzing file\nproperties.\n\nClamAV 0.98.5 also includes these new features and bug fixes:\n\n- Support for the XDP file format and extracting, decoding, and\n  scanning PDF files within XDP files.\n- Addition of shared library support for LLVM versions 3.1 - 3.5\n  for the purpose of just-in-time(JIT) compilation of ClamAV\n  bytecode signatures. Andreas Cadhalpun submitted the patch\n  implementing this support.\n- Enhancements to the clambc command line utility to assist\n  ClamAV bytecode signature authors by providing introspection\n  into compiled bytecode programs.\n- Resolution of many of the warning messages from ClamAV compilation.\n- Improved detection of malicious PE files.\n- Security fix for ClamAV crash when using 'clamscan -a'. This issue\n  was identified by Kurt Siefried of Red Hat.\n- Security fix for ClamAV crash when scanning maliciously crafted\n  yoda's crypter files. This issue, as well as several other bugs\n  fixed in this release, were identified by Damien Millescamp of\n  Oppida.\n- ClamAV 0.98.5 now works with OpenSSL in FIPS compliant mode.\n  Thanks to Reinhard Max for supplying the patch.\n- Bug fixes and other feature enhancements. See Changelog or\n  git log for details.\n\nThanks to the following ClamAV community members for code submissions\nand bug reporting included in ClamAV 0.98.5:\n\nAndreas Cadhalpun\nSebastian Andrzej Siewior\nDamien Millescamp\nReinhard Max\nKurt Seifried\n\n## 0.98.4\n\nClamAV 0.98.4 is a bug fix release. The following issues are now resolved:\n\n- Various build problems on Solaris, OpenBSD, AIX.\n- Crashes of clamd on Windows and Mac OS X platforms when reloading\n  the virus signature database.\n- Infinite loop in clamdscan when clamd is not running.\n- FreshClam failure on Solaris 10.\n- Buffer underruns when handling multi-part MIME email attachments.\n- Configuration of OpenSSL on various platforms.\n- Name collisions on Ubuntu 14.04, Debian sid, and Slackware 14.1.\n\nThanks to the following individuals for testing, writing patches, and\ninitiating quality improvements in this release:\n\nTuomo Soini\nScott Kitterman\nJim Klimov\nCurtis Smith\nSteve Basford\nMartin Preen\nLars Hecking\nStuart Henderson\nIsmail Paruk\nLarry Rosenbaum\nDave Simonson\nSebastian Andrzej Siewior\n\n## 0.98.2\n\nHere are the new features and improvements in ClamAV 0.98.2:\n\n- Support for common raw disk image formats using 512 byte sectors,\n  specifically GPT, APM, and MBR partitioning.\n- Experimental support of OpenIOC files. ClamAV will now extract file\n  hashes from OpenIOC files residing in the signature database location,\n  and generate ClamAV hash signatures. ClamAV uses no other OpenIOC\n  features at this time. No OpenIOC files will be delivered through\n  freshclam. See openioc.org and iocbucket.com for additional information\n  about OpenIOC.\n- All ClamAV sockets (clamd, freshclam, clamav-milter, clamdscan, clamdtop)\n  now support IPV6 addresses and configuration parameters.\n- Use OpenSSL file hash functions for improved performance. OpenSSL\n  is now prerequisite software for ClamAV 0.98.2.\n- Improved detection of malware scripts within image files. Issue reported\n  by Maarten Broekman.\n- Change to circumvent possible denial of service when processing icons within\n  specially crafted PE files. Icon limits are now in place with corresponding\n  clamd and clamscan configuration parameters. This issue was reported by\n  Joxean Koret.\n- Improvements to the fidelity of the ClamAV pattern matcher, an issue\n  reported by Christian Blichmann.\n- Opt-in collection of statistics. Statistics collected are: sizes and MD5\n  hashes of files, PE file section counts and section MD5 hashes, and names\n  and counts of detected viruses. Enable statistics collection with the\n  --enable-stats clamscan flag or StatsEnabled clamd configuration\n  parameter.\n- Improvements to ClamAV build process, unit tests, and platform support with\n  assistance and suggestions by Sebastian Andrzej Siewior, Scott Kitterman,\n  and Dave Simonson.\n- Patch by Arkadiusz Miskiewicz to improve error handling in freshclam.\n- ClamAV 0.98.2 also includes miscellaneous bug fixes and documentation\n  improvements.\n\nThanks to the following ClamAV community members for sending patches or reporting\nbugs and issues that are addressed in ClamAV 0.98.2:\n\nSebastian Andrzej Siewior\nScott Kitterman\nJoxean Koret\nArkadiusz Miskiewicz\nDave Simonson\nMaarten Broekman\nChristian Blichmann\n\n--\n\nREGARDING OPENSSL\n\nIn addition, as a special exception, the copyright holders give\npermission to link the code of portions of this program with the\nOpenSSL library under certain conditions as described in each\nindividual source file, and distribute linked combinations\nincluding the two.\n\nYou must obey the GNU General Public License in all respects\nfor all of the code used other than OpenSSL. If you modify\nfile(s) with this exception, you may extend this exception to your\nversion of the file(s), but you are not obligated to do so. If you\ndo not wish to do so, delete this exception statement from your\nversion. If you delete this exception statement from all source\nfiles in the program, then also delete it here.\n\n## 0.98.1\n\nClamAV 0.98.1 provides improved support of Mac OS X platform, support for new file types, and\nquality improvements. These include:\n\n- Extraction, decompression, and scanning of files within Apple Disk Image (DMG) format.\n\n- Extraction, decompression, and scanning of files within Extensible Archive (XAR) format.\n  XAR format is commonly used for software packaging, such as PKG and RPM, as well as\n  general archival.\n\n- Decompression and scanning of files in \"Xz\" compression format.\n\n- Recognition of Open Office XML formats.\n\n- Improvements and fixes to extraction and scanning of ole formats.\n\n- Option to force all scanned data to disk. This impacts only a few file types where\n  some embedded content is normally scanned in memory. Enabling this option\n  ensures that a file descriptor exists when callback functions are used, at a small\n  performance cost. This should only be needed when callback functions are used\n  that need file access.\n\n- Various improvements to ClamAV configuration, support of third party libraries,\n  and unit tests.\n\n## 0.98\n\nClamAV 0.98 includes many new features, across all the different components\nof ClamAV. There are new scanning options, extensions to the libclamav API,\nsupport for additional filetypes, and internal upgrades.\n\n- Signature improvements: New signature targets have been added for\n  PDF files, Flash files and Java class files. (NOTE: Java archive files\n  (JAR) are not part of the Java target.) Hash signatures can now specify\n  a '*' (wildcard)  size if the size is unknown. Using wildcard size\n  requires setting the minimum engine FLEVEL to avoid backwards\n  compatibility issues. For more details read the ClamAV Signatures\n  guide.\n\n- Scanning enhancements: New filetypes can be unpacked and scanned,\n  including ISO9660, Flash, and self-extracting 7z files. PDF\n  handling is now more robust and better handles encrypted PDF files.\n\n- Authenticode: ClamAV is now aware of the certificate chains when\n  scanning signed PE files. When the database contains signatures for\n  trusted root certificate authorities, the engine can trust\n  PE files with a valid signature. The same database file can also\n  include known compromised certificates to be rejected! This\n  feature can also be disabled in clamd.conf (DisableCertCheck) or\n  the command-line (nocerts).\n\n- New options: Several new options for clamscan and clamd have been\n  added. For example, ClamAV can be set to print infected files and\n  error files, and suppress printing OK results. This can be helpful\n  when scanning large numbers of files. This new option is \"-o\" for\n  clamscan and \"LogClean\" for clamd. Check clamd.conf or the clamscan\n  help message for specific details.\n\n- New callbacks added to the API: The libclamav API has additional hooks\n  for developers to use when wrapping ClamAV scanning. These function\n  types are prefixed with \"clcb_\" and allow developers to add logic at\n  certain steps of the scanning process without directly modifying the\n  library. For more details refer to the clamav.h file.\n\n- More configurable limits: Several hardcoded values are now configurable\n  parameters, providing more options for tuning the engine to match your\n  needs. Check clamd.conf or the clamscan help message for specific\n  details.\n\n- Performance improvements: This release furthers the use of memory maps\n  during scanning and unpacking, continuing the conversion started in\n  prior releases. Complex math functions have been switched from\n  libtommath to tomsfastmath functions. The A/C matcher code has also\n  been optimized to provide a speed boost.\n\n- Support for on-access scanning using Clamuko/Dazuko has been replaced\n  with fanotify. Accordingly, clamd.conf settings related to on-access\n  scanning have had Clamuko removed from the name. Clamuko-specific\n  configuration items have been marked deprecated and should no longer\n  be used.\n\nThere are also fixes for other minor issues and code quality changes. Please\nsee the ChangeLog file for details.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.97.8\n\nClamAV 0.97.8 addresses several reported potential security bugs. Thanks to\nFelix Groebert of the Google Security Team for finding and reporting these\nissues.\n\n## 0.97.7\n\nClamAV 0.97.7 addresses several reported potential security bugs. Thanks to\nFelix Groebert, Mateusz Jurczyk and Gynvael Coldwind of the Google Security\nTeam for finding and reporting these issues.\n\n## 0.97.6\n\nClamAV 0.97.6 includes minor bug fixes and detection improvements.\nClamAV 0.97.6 corrects bug 5252 \"CL_EFORMAT: Bad format or broken data ERROR\nreported as scan result.\"\n\n## 0.97.5\n\nClamAV 0.97.5 addresses possible evasion cases in some archive formats\n(CVE-2012-1457, CVE-2012-1458, CVE-2012-1459). It also addresses stability\nissues in portions of the bytecode engine. This release is recommended for\nall users.\n\n## 0.97.4\n\nClamAV 0.97.4 includes minor bugfixes, detection improvements and initial\nsupport for on-access scanning under Mac OS X (see contrib/ClamAuth).\nThis update is recommended for all users.\n\n## 0.97.3\n\nClamAV 0.97.3 is a minor bugfix release and is recommended for all\nusers. Please refer to the ChangeLog file for details.\n\n## 0.97.2\n\nClamAV 0.97.2 fixes problems with the bytecode engine, Safebrowsing detection,\nhash matcher, and other minor issues. Please see the ChangeLog file for\ndetails.\n\n## 0.97.1\n\nThis is a bugfix release recommended for all users. Please refer to the\nChangeLog file for details.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.97\n\nClamAV 0.97 brings many improvements, including complete Windows support\n(all major components compile out-of-box under Visual Studio), support for\nsignatures based on SHA1 and SHA256, better error detection, as well as\nspeed and memory optimizations. The complete list of changes is available\nin the ChangeLog file. For upgrade notes and tips please see:\nhttps://wiki.clamav.net/Main/UpgradeNotes097\n\nWith Sourcefire, Inc. acquisition of Immunet Corp., ClamAV for Windows\n3.0 has been renamed Immunet 3.0, powered by ClamAV. This release\ncontains the fully integrated LibClamAV 0.97 engine for offline,\nOnDemand, and OnAccess scanning. Immunet 3.0 users can now utilize\nthe full power of the LibClamAV engine, all the ClamAV signatures,\nand creation of custom signatures on any platform running Immunet 3.0,\npowered by ClamAV. If you run Windows systems in your environment and\nneed an AV solution to protect them, give Immunet 3.0, powered by ClamAV\na try; you can download it from https://www.clamav.net/download.html#otherversions\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.96.5\n\nClamAV 0.96.5 includes bugfixes and minor feature enhancements, such as\nimproved handling of detection statistics, better file logging,\nand support for custom database URLs in freshclam. Please refer to the\nChangeLog for details.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.96.4\n\nClamAV 0.96.4 is a bugfix release recommended for all users.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.96.3\n\nThis release fixes problems with the PDF parser and the internal bzip2\nlibrary. A complete list of changes is available in the Changelog file.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.96.2\n\nClamAV 0.96.2 brings a new PDF parser, performance and memory improvements,\nand a number of bugfixes and minor enhancements. This upgrade is recommended\nfor all users.\n\n## 0.96.1\n\nThis is a bugfix release, please refer to the ChangeLog for the complete\nlist of changes.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.96\n\nThis release of ClamAV introduces new malware detection mechanisms and other\nsignificant improvements to the scan engine. The key features include:\n\n- The Bytecode Interpreter: the interpreter built into LibClamAV allows\n  the signature writers to create and distribute very complex detection\n  routines and remotely enhance the scanner's functionality\n\n- Heuristic improvements: improve the PE heuristics detection engine by\n  adding support of bogus icons and fake PE header information. In a\n  nutshell, ClamAV can now detect malware that tries to disguise itself\n  as a harmless application by using the most common Windows program icons.\n\n- Signature Improvements: logical signature improvements to allow more\n  detailed matching and referencing groups of signatures. Additionally,\n  improvements to wildcard matching on word boundaries and newlines.\n\n- Support for new archives: 7zip, InstallShield and CPIO. LibClamAV\n  can now transparently unpack and inspect their contents.\n\n- Support for new executable file formats: 64-bit ELF files and OS X\n  Universal Binaries with Mach-O files. Additionally, the PE module\n  can now decompress and inspect executables packed with UPX 3.0.\n\n- Support for DazukoFS in clamd\n\n- Performance improvements: overall performance improvements and memory\n  optimizations for a better overall resource utilization experience.\n\n- Native Windows Support: ClamAV will now build natively under Visual\n  Studio. This will allow 3rd Party application developers on Windows\n  to easily integrate LibClamAV into their applications.\n\nThe complete list of changes is available in the ChangeLog file. For upgrade\nnotes and tips please see: https://wiki.clamav.net/Main/UpgradeNotes096\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.95.3\n\nClamAV 0.95.3 is a bugfix release recommended for all users.\nPlease refer to the ChangeLog included in the source distribution\nfor the list of changes.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.95.2\n\nThis version improves handling of archives, adds support for --file-list\nin clamscan and clamdscan, and fixes various issues found in previous\nreleases.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.95.1\n\nThis is a bugfix release only, please see the ChangeLog for details.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.95\n\nClamAV 0.95 introduces many bugfixes, improvements and additions. To make\nthe transition easier, we put various tips and upgrade notes on this page:\nhttps://wiki.clamav.net/Main/UpgradeNotes095. For detailed list of changes\nand bugfixes, please see the ChangeLog.\n\nThe following are the key features of this release:\n\n- Google Safe Browsing support: in addition to the heuristic and signature\n  based phishing detection mechanisms already available in ClamAV, the\n  scanner can now make use of the Google's block lists of suspected\n  phishing and malware sites. The ClamAV Project distributes a constantly\n  updated Safe Browsing database, which can be automatically fetched by\n  freshclam. For more information, please see freshclam.conf(5) and\n  https://docs.clamav.net/faq/faq-safebrowsing.html.\n\n- New clamav-milter: The program has been redesigned and rewritten from\n  scratch. The most notable difference is that the internal mode has been\n  dropped which means that now a working clamd companion is required.\n  The milter now also has its own configuration file.\n\n- Clamd extensions: The protocol has been extended to lighten the load\n  that clamd puts on the system, solve limitations of the old protocol,\n  and reduce latency when signature updates are received. For more\n  information about the new extensions please see the official\n  documentation and the upgrade notes.\n\n- Improved API: The API used to program ClamAV's engine (libclamav) has\n  been redesigned to use modern object-oriented techniques and solves\n  various API/ABI compatibility issues between old and new releases.\n  You can find more information in Section 6 of clamdoc.pdf and in\n  the upgrade notes.\n\n- ClamdTOP: This is a new program that allows system administrators to\n  monitor clamd. It provides information about the items in the clamd's\n  queue, clamd's memory usage, and the version of the signature database,\n  all in real-time and in nice curses-based interface.\n\n- Memory Pool Allocator: Libclamav now includes its own memory pool\n  allocator based on memory mapping. This new solution replaces the\n  traditional malloc/free system for the copy of the signatures that\n  is kept in memory. As a result, clamd requires much less memory,\n  particularly when signature updates are received and the database is\n  loaded into memory.\n\n- Unified Option Parser: Prior to version 0.95 each program in ClamAV's\n  suite of programs had its own set of runtime options. The new general\n  parser brings consistency of use and validation to these options across\n  the suite. Some command line switches of clamscan have been renamed\n  (the old ones will still be accepted but will have no effect and will\n  result in warnings), please see clamscan(1) and clamscan --help for\n  the details.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.94.2\n\nThis is a bugfix release, please refer to the ChangeLog for a complete\nlist of changes.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.94.1\n\nClamAV 0.94.1 fixes some issues that were found in previous releases and\nincludes one new feature, \"Malware Statistics Gathering.\" This is an optional\nfeature that allows ClamAV users optionally to submit statistics to us about\nwhat they detect in the field. We will then use these data to determine what\ntypes of malware are the most detected in the field and in what geographic\narea they are. It will also allow us to publish summary data on www.clamav.net\nwhere our users will be able to monitor the latest threats. You can help us\nby enabling SubmitDetectionStats in freshclam.conf.\n\nFor more details, please refer to the ChangeLog\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.94\n\nSourcefire and the ClamAV team are pleased to announce the release of\nClamAV 0.94. The following are the key features and improvements of this\nversion:\n\n- Logical Signatures: The logical signature technology uses operators\n  such as AND, OR and NOT to allow the combination of more than one\n  signature into one entry in the signature database resulting in\n  more detailed and flexible pattern matching.\n\n- Anti-phishing Technology: Users can now change the priority and reporting\n  of ClamAV's heuristic anti-phishing scanner within the detection engine\n  process. They can choose whether, when scanning a suspicious file, ClamAV\n  should stop scanning and report the phish, or continue to scan in case the\n  file contains other malware (clamd: HeuristicScanPrecedence,\n  clamscan: --heuristic-scan-precedence)\n\n- Disassembly Engine: The initial version of the disassembly engine improves\n  ClamAV's detection abilities.\n\n- PUA Detection: Users can now decide which PUA signatures should be loaded\n  (clamd: ExcludePUA, IncludePUA; clamscan: --exclude-pua, --include-pua)\n\n- Data Loss Prevention (DLP): This version includes a new module that, when\n  enabled, scans data for the inclusion of US formatted Social Security\n  Numbers and credit card numbers (clamd: StructuredDataDetection,\n  clamscan: --detect-structured; additional fine-tuning options are available)\n\n- IPv6 Support: FreshClam now supports IPv6\n\n- Improved Scanning of Scripts: The normalization of scripts now covers\n  JavaScript\n\n- Improved QA and Unit Testing: The improved QA process now includes\n  API testing and new library of test files in various formats that are\n  tested on a wide variety of systems (try running 'make check' in the source\n  directory)\n\nYou may need to run 'ldconfig' after installing this version.\n\n** This version drops the special support for Cygwin. Our QA process showed\n** serious problems with ClamAV builds under Cygwin due to some low-level\n** incompatibilities in the POSIX compatibility layer, resulting in unreliable\n** ClamAV behaviour.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.93.3\n\nThis release fixes a problem in handling of .cld files introduced in 0.93.2.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.93.2\n\nThis release fixes and re-enables the Petite unpacker, improves database\nloading and solves some other minor issues.\n\n## 0.93.1\n\nThis version improves handling of PDF, CAB, RTF, OLE2 and HTML files\nand includes various bugfixes for 0.93 issues.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.93\n\nThis release introduces many new features and engine enhancements, please\nsee the notes below for the list of major changes. The most visible one\nis the new logic in scan limits which affects some command line and config\noptions of clamscan and clamd. Please see clamscan(1) and clamd.conf(5)\nand the example config file for more information on the new options.\n\nMost important changes include:\n\n- libclamav:\n  - New logic in scan limits: provides much more efficient protection against\n    DoS attacks but also results in different command line and config options\n    to clamscan and clamd (see below)\n  - New/improved modules: unzip, SIS, cabinet, CHM, SZDD, text normalisator,\n    entity converter\n  - Improved filetype detection; filetype definitions can be remotely updated\n  - Support for .cld containers (which replace .inc directories)\n  - Improved pattern matcher and signature formats\n  - More efficient scanning of HTML files\n  - Many other improvements\n\n- clamd:\n  - NEW CONFIG FILE OPTIONS: MaxScanSize, MaxFileSize, MaxRecursion, MaxFiles\n  - ** THE FOLLOWING OPTIONS ARE NO LONGER SUPPORTED **: MailMaxRecursion,\n    ArchiveMaxFileSize, ArchiveMaxRecursion, ArchiveMaxFiles,\n    ArchiveMaxCompressionRatio, ArchiveBlockMax\n\n- clamscan:\n  - NEW CMDLINE OPTIONS: --max-filesize, --max-scansize\n  - REMOVED OPTIONS: --block-max, --max-space, --max-ratio\n\n- freshclam:\n  - NEW CONFIG OPTION CompressLocalDatabase\n  - NEW CMDLINE SWITCH --no-warnings\n  - main.inc and daily.inc directories are no longer used by ClamAV; please\n    remove them manually from your database directory\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.92.1\n\nThis is a bugfix release, please refer to the ChangeLog for a complete\nlist of changes.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.92\n\nThis release provides various bugfixes, optimizations and improvements\nto the scanning engine. The new features include support for ARJ and\nSFX-ARJ archives, AutoIt, basic SPF parser in clamav-milter (to reduce\nphishing false-positives), faster scanning and others (see ChangeLog).\nTo get a consistent behaviour of the anti-phishing module on all platforms,\nlibclamav now includes the regex library from OpenBSD.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.91.2\n\nThis release fixes various bugs in libclamav, freshclam and clamav-milter,\nand adds support for PUA (Potentially Unwanted Application) signatures\n(clamscan: --detect-pua, clamd: DetectPUA).\n\n** Announcement **\n\nDear ClamAV users,\n\nOn August 17, Sourcefire, the creators of Snort, acquired the ClamAV project.\nThe full announcement is available here:\n\nhttp://www.sourcefire.com/products/clamav/\n\nWe'd like to thank everyone in the ClamAV community for their dedication to\nthe project. The acquisition by Sourcefire is a testament to the hard work of\nthe entire ClamAV community in developing cutting edge technology that truly\nshowcases the promise of the open source model. With the additional resources\nSourcefire will provide we look forward to working with the community to\ncontinue the advancement of ClamAV.\n\nSourcefire now owns ClamAV project and related trademarks, as well as the\nsource code copyrights held by the five principal members of the ClamAV team.\nSourcefire will also assume control of the ClamAV project including: the\nClamAV.org domain, web site and web site content; and the ClamAV Sourceforge\nproject page.\n\nWhat's most important is that from the end-user perspective very little will\nchange beyond the additional resources Sourcefire will provide in our\ncontinued efforts to advance the ClamAV technology and improve our ability to\ninteract with the open source community. The core team will continue to lead\nthe advancement of ClamAV and the CVD as employees of Sourcefire. Both the\nClamAV engine and the signature database will remain under GPL.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.91.1\n\nThis release fixes stability and other issues of 0.91.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.91\n\nClamAV 0.91 is the first release to enable the anti-phishing technology\nin default builds. This technology combines heuristics with special\nsignatures and provides effective protection against phishing threats.\nOther important changes and add-ons in this version include:\n\n- unpacker for NSIS (Nullsoft Scriptable Install System) self-extracting\n  archives\n- unpacker for ASPack 2.12\n- new implementation of the Aho-Corasick pattern matcher providing\n  better detection for wildcard enabled signatures\n- support for nibble matching and floating offsets\n- improved handling of .mdb files (fixes long startup times)\n- extraction of PE files embedded into other executables\n- better handling of PE & UPX\n- removed dependency on libcurl (improves stability)\n- libclamav.dll available under Windows\n- IPv6 support in clamav-milter\n- many other improvements and bugfixes\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.90.3\n\nThis release fixes some security bugs in libclamav and improves stability\nunder Solaris. Please see ChangeLog for complete list of changes.\n\nIf your system is suffering from long clamscan startup times, please\nconsider installing 0.91rc1 which is due to be released shortly\nafter 0.90.3.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.90.2\n\nThis release fixes many problems in libclamav and freshclam.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.90.1\n\nThis release includes various bugfixes and code enhancements. Please\nsee ChangeLog for complete list of changes.\n\n** Important note **: please run 'ldconfig' after installing this version.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.90\n\nThe ClamAV team is proud to announce the long awaited ClamAV 0.90.\nThis version introduces lots of new interesting features and marks\na big step forward in the development of our antivirus engine.\n\nThe most important change is the introduction of scripted updates.\nInstead of transferring the whole cvd file at each update, only the\ndifferences between the latest cvds and the previous versions will be\ntransferred.\n\nIn case the local copy of the latest cvd is corrupted or the scripted\nupdate fails for some reason, freshclam will fallback to the old method.\nSimilarly to cvd files, scripted updates are compressed and digitally signed\nand are already being distributed. They will dramatically reduce traffic on\nour mirrors and will allow us to release even more updates in the future.\n\nAnother noticeable change is the new configuration syntax: you can now turn\nsingle options on and off, the old crude hack of \"DisableDefaultScanOptions\"\nis no longer required.\n\nCosmetic changes apart, the 0.9x series introduces lots of new code, but some\nparts are not compiled in by default because they are not ready for production\nsystems yet. You are encouraged to pass the --enable-experimental flag to\n./configure when compiling ClamAV. The experimental code introduces many\nimprovements in terms of detection rate and performances. If you find a bug,\nplease take some time to report it on our bugzilla: https://bugzilla.clamav.net.\nYour help in testing the new code is really appreciated. The experimental code\nintroduces many improvements in terms of detection rate and performances.\n\nRAR3, SIS and SFX archives support is finally available together with\nnew unpackers and decryptors: pespin, sue, yc, wwpack32, nspack, mew, upack\nand others. Additionally, ClamAV now includes better mechanisms for scanning\nELF, PDF and tar files. The email decoding has been improved to reduce both\nthe memory requirements and the time taken to process attachments.\n\nAs part of the Google Summer of Code program, we have introduced support for\na new phishing signatures format that has proved very effective in detecting\nphishing emails. The ClamAV phishing module allows better and more generic\ndetection of phishing emails by searching for URLs in email messages, and\ncomparing the real site with the URL displayed to the user in the message.\n\nOn the performance side, support for the MULTISCAN command has been\nimplemented in clamd, allowing to scan multiple files simultaneously.\nSupport for Sensory Networks' NodalCore acceleration technology\n(https://www.clamav.net/nodalcore/) is now available in ClamAV and will be\ncompiled in if the ncore libraries are detected at compile time. NodalCore\nacceleration allows highly improved scan speeds on systems equipped with\nNodalCore cards.\n\nDetailed list of changes:\n\n- libclamav:\n  - New unpacker for RAR3, RAR2 and RAR1\n  - Rewritten unpackers for Zip and CAB files\n  - Support for RAR-SFX, Zip-SFX and CAB-SFX archives\n  - New PE parsing model:\n    - Accurate virtual and raw size and offset calculations\n    - Proper parsing of executables with weird/handcrafted/uncommon headers\n    - Proper handling (or skipping) of ghost sections at various places in the\n      code\n    - Rebuild improvements for various unpackers\n    - Adjusted alignment on rebuilt executables\n    - Proper handling of out of sections offsets\n    - Broken exe detection now mimics the XPSP2 loader\n    - Lots of misc improvements and fixes\n  - Support for PE32+ (64-bit) executables\n  - Support for MD5 signatures based on PE sections (.mdb)\n  - ELF file parser\n  - Support for Sensory Networks' NodalCore hardware acceleration technology\n  - Advanced phishing detection module (experimental)\n  - Signatures are stored in separate trees depending on their target type\n  - Algorithmic detection can be controlled with CL_SCAN_GENERAL_HEURISTICS\n  - Support for new obfuscators: SUE, Y0da Cryptor, CryptFF\n  - Support for new packers: NsPack, wwpack32, MEW, Upack\n  - Support for SIS files (SymbianOS packages)\n  - Support for PDF and RTF files\n  - New encoding and entity normalizer (experimental)\n\n- clamd:\n  - New config file parser:\n    - all options require arguments (options without args must be now followed\n      by boolean values: (yes, no), (1, 0), or (true, false)\n    - optional arguments (as in NotifyClamd) are no longer supported\n    - removed \"DisableDefaultScanOptions\" option (scan options can be\n      configured individually)\n  - TCP and local sockets can be operated simultaneously\n  - New command: MULTISCAN (scan directory with multiple threads)\n  - New option AlgorithmicDetection\n  - New option ScanELF\n  - New option NodalCoreAcceleration (requires hardware accelerator)\n  - New option PhishingSignatures\n  - New options to control the phishing module:\n    - PhishingRestrictedScan\n    - PhishingScanURLs\n    - PhishingAlwaysBlockSSLMismatch\n    - PhishingAlwaysBlockCloak\n\n- clamav-milter:\n  - Block list mode: optionally block lists an IP for a configurable amount\n    of time\n  - Black hole mode: detects emails that will be discarded and refrains from\n    scanning them\n  - Reporting: ability to report phishing attempts to anti-phishing\n    organisations to help close the sites\n  - Improved load balancing for scanning with clusters\n  - Removed -b option (enable BOUNCE compile time option to re-enable the\n    option)\n\n- clamscan:\n  - New options: --no-phishing-sigs, --no-algorithmic (disable phishing and\n    algorithmic detection respectively)\n  - New options to control the phishing module: --no-phishing-scan-urls,\n    --no-phishing-restrictedscan, --phishing-ssl, --phishing-cloak\n  - New option: --ncore (requires hardware accelerator)\n  - New option: --no-elf\n  - New option: --copy\n\n- freshclam:\n  - Interpreter for .cdiff files (scripted updates)\n  - Initial version of mirror manager\n  - New option: --list-mirrors (list details on mirrors accessed by the mirror\n    manager)\n  - New option HTTPUserAgent to force different User-Agent header\n\n- sigtool:\n  - New option: --utf16-decode (decode UTF16 encoded files)\n  - New options: --diff, --run-cdiff, --verify-cdiff (update script management)\n  - New option: --mdb (generated .mdb compatible signatures)\n\n- clamconf: initial version of configuration utility for clamd and freshclam\n\nWe are happy to announce new interesting software with support for ClamAV:\n\n- AqMail - a POP3 client with additional filtering\n- ClamFS - a FUSE-based file system with on-access anti-virus scanning\n- c-icap - an ICAP server coded in C with support for ClamAV\n- MailCleaner - a complete email filtering gateway\n- mod_streamav - a ClamAV based antivirus filter for Apache 2\n- pyClamd - a python interface to Clamd\n\nMore information at https://www.clamav.net/download.html#tools\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.88.7\n\nThis version improves scanning of mail and tar files.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.88.6\n\nChanges in this release include better handling of network problems in\nfreshclam and other minor bugfixes.\n\nThe ClamAV developers encourage all users to give a try to the latest\nbeta version of 0.90!\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.88.5\n\nThis version fixes a crash in the CHM unpacker and a heap overflow in the\nfunction rebuilding PE files after unpacking.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.88.4\n\nThis release fixes a possible heap overflow in the UPX code.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.88.3\n\nThis version fixes handling of large binhex files and multiple alternatives in\nvirus signatures.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.88.2\n\nThis release improves virus detection, fixes zip handling on 64-bit\narchitectures and possible security problem in freshclam.\n\nFollowing the 0.88.1 release some portals and security related websites\npublished incorrect information on security problems of 0.88. To avoid\nsuch incidents in the future, every new ClamAV package will be released\ntogether with detailed information about security bugs it fixes.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.88.1\n\nThis version fixes a number of minor bugs and provides code updates\nto improve virus detection.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.88\n\nA possible heap overflow in the UPX code has been fixed. General improvements\ninclude better zip and mail processing, and support for a self-protection mode.\nThe security of the UPX, FSG and Petite modules has been improved, too.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.87.1\n\nThis release includes major bugfixes for problems with handling TNEF\nattachments, cabinet files and FSG compressed executables.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.87\n\nThis version fixes vulnerabilities in handling of UPX and FSG compressed\nexecutables. Support for PE files, Zip and Cabinet archives has been improved\nand other small bugfixes have been made. The new option \"--on-outdated-execute\"\nallows freshclam to run a command when system reports a new engine version.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.86.2\n\nChanges in this release include fixes for three possible integer overflows\nin libclamav, improved scanning of Cabinet and FSG compressed files, better\ndatabase handling in clamav-milter, and others.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.86.1\n\nA possible crash in the libmspack's Quantum decompressor has been fixed.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.86\n\nThis release introduces a number of bugfixes and cleanups. Possible descriptor\nleaks in archive unpackers and mishandling of fast track uuencoded files have\nbeen fixed in libclamav. Database reloading in clamav-milter has been improved.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.85.1\n\nA problem where an email with more than one content-disposition type line,\none or more of which was empty, could crash libclamav has been fixed. Other\nminor bugfixes have been made.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.85\n\nBugfixes in this release include correct signature offset calculation in large\nfiles, proper handling of encrypted zip archives, and others.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.84\n\nThis version improves detection of JPEG (MS04-028) based exploits, introduces\nsupport for TNEF files and new detection mechanisms. Various bugfixes\n(including problems with scanning of digest mail files) and improvements\nhave been made.\n\n- libclamav:\n  - JPEG exploit detector now also checks embedded Photoshop thumbnail images\n  - archive meta-data scanner (improves malware detection within encrypted\n    archives)\n  - support for TNEF (winmail.dat) decoding\n  - support for all tar archive formats\n  - MD5 implementation replaced with a slightly faster one\n  - improved database reloading with reference counter\n  - database updateable false positive eliminator\n  - speed improvements\n  - various bugfixes\n\n- clamd:\n  - VirusEvent now sets CLAM_VIRUSEVENT_FILENAME and CLAM_VIRUSEVENT_VIRUSNAME\n    environment variables\n\n- clamav-milter:\n  - improved database update detection when not --external\n\n- clamscan:\n  - new options --include-dir and exclude-dir\n  - new option --max-dir-recursion\n\n- freshclam:\n  - new directive LocalIPAddress\n\n- contrib:\n  - clamdmon 1.0 - clamdwatch replacement written in C\n\n- 3rd party software:\n  - hMailServer - open source e-mail server for Microsoft Window\n  - pop3.proxy - proxy server for the POP3 protocol\n  - HTTP Anti Virus Proxy\n  - SmarterMail Filter - ClamAV based plugin for SmarterMail Mail Server\n  - smf-clamd - small & fast virus filter for Sendmail\n  - Squidclam - replacement for SquidClamAV-Redirector.py written in C\n  - QtClamAVclient - remote clamd client based on the Qt Toolkit\n  - qpsmtp - flexible smtpd daemon written in Perl\n\nNews:\n\nPalo Alto, Calif. March 31st 2005 - Clam AntiVirus, the leading Open Source\nantivirus toolkit, and Sensory Networks, the leading provider of hardware\nacceleration for network security applications, announced a partnership\nto provide hardware acceleration support for the Clam AntiVirus suite.\n[...]\nSupport for Sensory Networks' NodalCore acceleration in ClamAV will be\navailable in version 0.90 of the software suite in Q3 2005. For more\ninformation please visit:\nhttp://www.sensorynetworks.com/\n\nThe ClamAV project announces the opening of the official merchandise store:\n\nhttp://www.cafepress.com/clamav/\n\nA big thank you to Finndesign (http://www.finndesign.fi) which\nvolunteered to design the whole line of products, including:\n\n- t-shirts (for women and men)\n- golf shirt\n- sweatshirt\n- coffee mug\n- mousepad\n- stickers\n- scrapbook\n\nBy purchasing our merchandise, you contribute to the development of ClamAV.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.83\n\nDue to a high number of bad files produced by broken software, the MS05-002\nexploit detector now only checks specific RIFF files. This version also fixes\na stability problem of clamav-milter/clamd and improves e-mail scanning.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.82\n\nThis release adds generic detection of MS05-002 (\"Vulnerability in Cursor and\nIcon Format Handling Could Allow Remote Code Execution\") based exploits.\nFixes include correct attachment scanning in e-mails generated by some\nInternet worms (broken in 0.81), removed false positive \"Suspect.Zip\"\nwarning on non-standard zip archives created by ICEOWS, better proxy support\nin freshclam, and speed improvements.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.81\n\nScan engine improvements were made. The internal mail scanner now supports\nmultipart/partial messages, and support for decoding non-standard mail files\nwas greatly enhanced. clamav-milter by default uses libclamav and scans emails\nitself without the use of clamd. libclamav can now extract RFC2397 encoded\ndata within HTML documents, block zip archives with modified information in\nlocal header, and scan HQX files. PE file structure rebuilding from compressed\nexecutables was improved.\n\nImportant note to clamdwatch users: please upgrade to the latest version\n(contrib/clamdwatch) as soon as possible.\n\n- libclamav:\n  - major improvements in the mail scanning engine:\n  - support for multipart/partial messages\n  - improved support for non-standard quoted-printable attachments\n  - in some situations it will try to guess a correct mode (e.g.\n    a good type for an incorrect content-type, a best guess for an\n    unknown encoding type, etc.)\n  - handling of RFC822 comments in the commands (e.g.: Co(foo)ntent-Type:\n    text/plain)\n  - better recovery if memory softlimit is hit\n  - new test code that decodes emails without parsing them first (must\n    be enabled manually before compilation)\n\n    - support for extracting RFC2397 encoded data within HTML documents\n    - blocking of zip archives with modified information in local header\n    - improved PE structure rebuilding from compressed executables\n    - improved support for zip archives\n    - support for Mac's HQX file format\n    - stability and (minor) security fixes\n    - a lot of minor improvements, including support for new platforms\n\n- clamd:\n  - new directive ExitOnOOM (stop the daemon when libclamav reports an out of\n    memory condition)\n  - new directives StreamMinPort and StreamMaxPort (port range specification\n    for a stream mode)\n  - support for passing of file descriptors\n\n- clamdscan:\n  - added support for --move and --remove\n\n- clamav-milter:\n  - by default uses libclamav to scan e-mails\n  - new option --external (enables the use of clamd)\n  - various optimizations\n\n- freshclam:\n  - the DNS mode is now enabled by default (no need for DNSDatabaseInfo in\n    freshclam.conf)\n  - --no-dns uses an If-Modified-Since method instead of a range GET\n  - added support for AllowSupplementaryGroups\n\n- sigtool:\n  - new options --vba and --vba-hex (extract VBA/Word6 macros and optionally\n    display the corresponding hex values; Word6 binary code will be\n    disassembled)\n\n- The list of third party programs with support for ClamAV is growing\n  rapidly. Here are the latest additions (see clamdoc.pdf for details):\n\n  - AVScan - a libclamav based GUI a-v scanner for Unix\n  - clamailfilter - a Python script that provides a-v scanning via procmailrc\n  - ClamAVPlugin - A ClamAV plugin for SpamAssassin 3.x\n  - ClamCour - an e-mail filter for Courier\n  - clamfilter - a small, secure, and efficient content filter for Postfix\n  - ClamMail - an anti-virus POP3 proxy for Windows\n  - ClamShell - a Java GUI for clamscan\n  - ClamTk - a perl-tk GUI for ClamAV\n  - clapf - a virus scanning and antispam content filter for Postfix\n  - D bindings for ClamAV - ClamAV bindings for the D programming language\n  - Frox - a transparent FTP proxy\n  - KMail - a fully-featured email client now supports ClamAV out of box\n  - Mail Avenger - a highly-configurable SMTP server with a-v support\n  - Mailnees - a mail content filter for Sendmail and Postfix\n  - Maverix - anti-spam and anti-virus solution for AOLServer\n  - Moodle - scan files submitted by students for viruses!\n  - php-clamav - scan files from within PHP\n  - pymavis - a powerful email parser, similar to the old amavis-perl\n  - QClam - a simple program to plug ClamAV to a qmail mailbox\n  - qmailmrtg7 - display graphs of viruses found by ClamAV\n  - qSheff - an e-mail filter for qmail\n  - SafeSquid - a feature rich content filtering internet proxy\n  - Scrubber - a server-side daemon for filtering mail content\n  - simscan - an e-mail and spam filter for qmail\n  - smtpfilter - scan SMTP session for viruses\n  - snort-inline - scan your network traffic for viruses with ClamAV\n  - SquidClamAV Redirector - a Squid helper script which adds virus scanning\n  - WRAVLib - a library for a-v integration with Mono/.NET applications\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.80\n\nStable version. Please read the release notes for the candidate versions below.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.80rc4\n\nImprovements in this release include better JPEG exploit verification,\nfaster base64 decoding, support for GNU tar files, updated on-access scanner,\nand others.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.80rc3\n\nThis release candidate eliminates possible false positive alerts in UPX/FSG\ncompressed files and clarifies behaviour of default actions in clamd and\nfreshclam.\n\nWe encourage users to take advantage of our new mirror structure. In order to\ndownload the database from the closest mirror you should configure freshclam\nto use db.XY.clamav.net where XY is your country code (see\nhttp://www.iana.org/cctld/cctld-whois.htm for the full list). Please add\nthe following lines to freshclam.conf:\n\n    DNSDatabaseInfo current.cvd.clamav.net\n    DatabaseMirror db.XY.clamav.net\n    DatabaseMirror database.clamav.net\n\nDNSDatabaseInfo enables database and software version verification through\nDNS TXT records, and the second database mirror acts as a fallback in case\na connection to the first mirror fails for some reason.\n\n## 0.80rc2\n\nThis update fixes a serious bug in e-mail scanner.\n\n## 0.80rc\n\nThe development version of ClamAV is ready for general testing! New mechanisms\nhave already proved very nasty to Internet worms successfully protecting\nagainst the new versions R, S, T, U, V and W of the infamous Mydoom worm\nand detecting them as Worm.Mydoom.Gen before they were analysed and specific\nsignatures added by the ClamAV database maintainers. That means servers running\nthe new version of ClamAV have detected and blocked 100% of Mydoom attacks!\n\nNew features in this release include:\n\n- libclamav\n  - Portable Executable analyser (CL_SCAN_PARSE_PE) featuring:\n  - UPX decompression (all versions)\n  - Petite decompression (2.x)\n  - FSG decompression (1.3, 1.31, 1.33)\n  - detection of broken executables (CL_SCAN_HEURISTIC_BROKEN)\n  - new, memory efficient, pattern matching algorithm (multipattern variant\n    of Boyer-Moore) - it's now primary matcher and Aho-Corasick is only used\n    for regular expression extended signatures\n  - new signature format with advanced target type and offset specification\n  - support for MD5 based signatures\n  - extended regular expression scanner\n  - added support for MS cabinet files\n  - added support for CHM files\n  - added support for POSIX tar archives\n  - scanning inside PowerPoint documents\n  - HTML normaliser with support for decoding of MS Script Encoder code\n  - great improvements in e-mail scanner (now handles even more worm tricks)\n  - new method of mail files detection\n  - all e-mail attachments are now scanned (previously only the first ten\n    attachments were scanned)\n  - added support for scanning URLs in e-mails (CL_SCAN_PARSE_MAILURL)\n  - detection of Worm.Mydoom.M.log\n  - updated API (still backward compatible but please consult clamdoc.pdf\n    (Section 6) and adapt your software)\n\n- clamd\n  - new directive ScanHTML (enables HTML normalisator and ScrEnc decoder)\n  - new directive ScanPE (win32 executable analyser and decompressor)\n  - new directive DetectBrokenExecutables (try to detect broken executables\n    and mark them as Broken.Executable)\n  - new directive MailFollowURLs (try to download and scan files from URLs\n    in mails. BE CAREFUL! DO NOT ENABLE IT ON LOADED MAIL SERVERS)\n  - new directive ArchiveBlockMax (archives that exceed limits will be\n    marked as viruses)\n  - clamav.conf was renamed clamd.conf\n\n- clamscan\n  - mail files are scanned by default, use --no-mail to disable it\n  - new option --no-html (disables HTML normalisator)\n  - new option --no-pe (disables PE analyser)\n  - new option --detect-broken\n  - new option --block-max\n  - new option --mail-follow-urls (download and scan files from URLs in mails)\n\n- clamdscan\n  - now prints warnings if some activated command line options are only\n    supported by clamscan\n  - added support for archive scanning in stdin mode\n\n- clamav-milter\n  - improved template file format\n  - quarantined file names now contain virus names\n  - initial support for SESSION mode of clamd\n\n- freshclam:\n  - new directive DNSDatabaseInfo that enables ultra lightweight version\n    verification method through DNS (using TXT records). Based on idea by\n    Christopher X. Candreva and enabled by default.\n    (see http://www.gossamer-threads.com/lists/clamav/users/11102)\n  - new option --no-dns (quick option to disable DNS method without editing\n    freshclam.conf)\n\n- sigtool\n  - removed ability of automatic signature generation (use MD5 sums to\n    create your own signatures, see signatures.pdf for details)\n  - new option --md5\n  - new option --html-normalise (saves HTML normalisation and decryption\n    results in three html files in current directory)\n\n- configure:\n  - new option --disable-gethostbyname_r (try enabling it if clamav-milter\n    compilation fails)\n  - new option --disable-dns (try enabling it if freshclam compilation fails)\n  - extended regular expression scanner\n\n- documentation\n  - included new Mac OS X installation instructions\n  - official documentation rewritten and outdated docs removed\n\n- new 3rd party software with support for ClamAV:\n  - OdeiaVir - an e-mail filter for qmail and Exim\n  - ClamSMTP - a lightweight (written in C) and simple filter for Postfix\n  - Protea AntiVirus Tools - a virus filter for Lotus Domino\n  - PTSMail Utilities - an e-mail filter for Sendmail\n  - mxGuard for IMail - a mail filter for Ipswitch IMail (W32)\n  - Zabit - a content and attachment filter for qmail\n  - BeClam - ClamAV port for BeOS\n  - clamXav - a virus scanner with GUI for Mac OS X\n\nSpecial thanks to aCaB for his work on UPX, FSG and Petite decompressors.\n\nThanks to good reaction times on new threats ClamAV was awarded as best\nsecurity tool for 2004 by Linux Journal: \"...With this year's outbreak of\ne-mail worms for non-Linux platforms, ClamAV has been getting quite a workout,\nand Linux admins on mailing lists report that database update times are keeping\nup with or beating the proprietary alternatives.\" Thanks!\n\nSourceWear.com is selling some very nice t-shirts and polo shirts powered by\nClamAV. Wear them and virus writers will stay away from you :- A quarter out\nof every dollar profited from the sale of these shirts will go to the ClamAV\nproject. Visit http://www.sourcewear.com and click on ClamAV logo!\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.75\n\nThis release fixes detection of e-mails generated by Worm.Mydoom.I.\n\nImportant notice for people using ClamAV 0.60:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOur logs show that there is still a small percentage of ClamAV 0.60\ninstallations updating their database. ClamAV 0.60 was released on\nJuly 29th, 2003 and it was the last release to use the old database\nformat. Starting from version 0.65, released on November 12nd, ClamAV\nuses a new database format, which is compressed and digitally signed.\nWe have been distributing the database in both formats till now, but\nwe plan to drop support for ClamAV 0.60 on September 1st.\n\nWe encourage _all_ users to upgrade to the latest release available.\nPeople running an old version of ClamAV are missing many viruses and\nmay experience stability problems.\n\nOn non-production systems you can try the latest development version.\nThe new engine not only speeds up the scanning process but also limits\nmemory usage by about 8 MB ! It's able to scan new formats, including\nCAB, CHM, UPX, HTML (normalisation), PowerPoint macros and can detect\nannoying e-mails with empty attachments generated by new Bagle variants.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.74\n\nBugfixes in this version include crashes with multipart/mixed messages\nand corrupted OLE2 and Zip files. Improvements include various optimizations\nof mail scanning and clamav-milter and clamdscan behaviour.\n\nNew members of our \"3rd party software\" list:\n\n  - MyClamMailFilter   an e-mail filter for procmail (written in C)\n  - clamaktion         scan files from the right-click Konqueror menu\n  - QMVC               Qmail Mail and Virus Control\n  - pyclamav           Python binding for ClamAV\n  - FETCAV             Front End To Clam AntiVirus based on Xdialog\n  - Famuko             an on-access scanner working in a userspace\n  - SoftlabsAV         a generic anti-virus filter for procmail\n\nJapanese users can take an advantage of the new ClamAV related site:\n    http://clamav-jp.sourceforge.jp/\nand join the clamav-jp-users mailing list.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.73\n\nThis version fixes memory management problems in the OLE2 decoder and\nimproves mail scanning.\n\nThank you for using ClamAV !\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.72\n\nMajor bugfixes in this release include crashes with corrupted BinHex messages\nand some Excel documents. Protection against archive bombs (not fully\nfunctional since 0.70) was improved and a number of other improvements were\nmade.\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.71\n\nThis release fixes all bugs found in 0.70 and introduces a few new features -\nthe noteworthy changes include:\n\n- libclamav:\n  - support nested OLE2 files\n  - support Word6 macro code\n  - ignore popular file types (media, graphics)\n  - support compress.exe (SZDD) compression (test/test.msc)\n  - improve virus detection in e-mails\n\n- clamscan:\n  - automatically decide (by comparing daily.cvd version numbers) which\n    database directory (hardcoded or clamav.conf's one) to use\n  - support compression ratio feature (--max-ratio)\n  - allow regular expressions in --[in|ex]clude\n  - do not overwrite old files in a quarantine directory but add a numerical\n    extension to new files\n  - respect --tempdir in libclamav\n  - fix access problem when calling external unpackers in a superuser mode\n  - fix file permission corruption with --deb in a superuser mode\n\n- clamd\n  - support log facility specification in syslog's style (LogFacility)\n  - new directive LeaveTemporaryFiles (Debug no longer leaves temporary\n    files not removed)\n\n- clamav-milter:\n  - include the virus name in the 550 rejection\n  - support user defined template for virus notifications (--template-file)\n  - sort quarantine messages by date\n  - improve thread management\n  - add X-Virus-Scanned and X-Infected-Received-From: headers\n  - improve load balancing (when using remote servers with --server)\n  - send 554 after DATA received, not 550\n  - save PID (--pidfile)\n\n- documentation:\n  - German clamdoc.pdf translation (Rupert Roesler-Schmidt and Karina\n    Schwarz, uplink coherent solutions, http://www.uplink.at)\n  - new Japanese documentation (Masaki Ogawa)\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\n\n## 0.70\n\nThe two major changes in this version are new thread manager in clamd\nand support for decoding MS Office VBA macros. Both of them have been\nimplemented by Trog. Besides, there are many improvements and bugfixes\n(all listed in ChangeLog), a short summary:\n\n- clamd\n  - new thread manager (with better SMP support)\n  - on-access scanning now also available on FreeBSD (with Dazuko 2.0)\n  - new directive ArchiveBlockEncrypted\n  - new directive ReadTimeout (replaces ThreadTimeout)\n  - handle SIGHUP (re-open logfile) and SIGUSR2 (reload database)\n  - respect TCPAddr in stream scanner\n\n- clamav-milter:\n  - TCPWrappers support\n\n- libclamav:\n  - support MS Office documents (OLE2) and VBA macro decoding\n  - support encrypted archive detection\n  - new flags: CL_OLE2, CL_ENCRYPTED (see clamdoc.pdf, Section 6.1)\n  - improve virus detection in big files\n  - improve support for multipart, bounce and embedded RFC822 messages\n  - improve RAR support\n  - include backup snprintf implementation\n\n- clamscan:\n  - new option: --block-encrypted\n\n- freshclam\n  - new option: --pid, -p (write pid file if run as daemon)\n  - handle SIGHUP (re-open logfile), SIGTERM (terminate with log message),\n    SIGALRM and SIGUSR1 (wake up and check mirror)\n  - fix bug with -u and -c handling\n\n- contrib\n  - windows clamd client now available with source code\n\n- documentation:\n  - new Polish documentation on ClamAV and Samba integration\n  - official documentation updated\n\nSpecial thanks to Dirk Mueller <mueller*kde.org> for his code review,\nmany bugfixes and cleanups.\n\nThanks to the help of many companies we have 49 very fast and reliable\nvirus database mirrors in 22 regions and the number is still growing.\nAs of March 2004 we attempt to redirect our users to the closest pool\nof mirrors by looking at their ip source address when they try to resolve\ndatabase.clamav.net. Our DNS servers can answer with a CNAME to:\ndb.europe.clamav.net, db.america.clamav.net, db.asia.clamav.net or\ndb.other.clamav.net. Our advanced push-mirroring mechanism (maintained by\nLuca Gibelli) allows database maintainers to update all the mirrors in less\nthan one minute !\n\nThere will be no major feature enhancements in the 0.7x series. Our work\nwill be concentrated on a new scanning engine and preliminary heuristics -\nplease help us and test CVS snapshots from time to time.\n\nWe are happy to announce new programs with support for ClamAV (all of them\nhave been reviewed by our team - more info in the documentation and\non our website: https://www.clamav.net/download.html#tools):\n\n- ClamWin - a GUI for Windows (!)\n- KlamAV - a collection of GUI tools for using ClamAV on KDE\n- clamscan-procfilter - a Perl procmail filter\n- j-chkmail - a powerful filter for sendmail\n- qscanq - Virus Scanning for Qmail\n- clamavr - a Ruby binding for ClamAV\n- DansGuardian Anti-Virus Plugin\n- Viralator - a Perl script that virus scans http downloads\n- ClamAssassin - a filter for procmail\n- Gadoyanvirus - a filter for Qmail\n- OpenProtect - a complete e-mail protection solution\n- RevolSys SMTP kit for Postfix - an antispam/antivirus tools installation\n- POP3 Virus Scanner Daemon\n- mailman-clamav - a virus filter for Mailman\n- wbmclamav - a webmin module to manage ClamAV\n- Scan Log Analyzer\n- mailgraph - a RRDtool frontend for Postfix Statistics\n- INSERT - a security toolkit on a credit card size CD\n- Local Area Security - a Live CD Linux distribution\n\n--\nThe ClamAV team (https://www.clamav.net/about.html#credits)\nApril 17, 2004\n\n## 0.68-1\n\nFixed RAR support.\n\n## 0.68\n\nThis version fixes a crash with some RAR archives generated by the Bagle worm,\nalso a few important fixes have been backported from CVS.\n\nWe strongly encourage users to install the 0.70-rc version (released today).\n\n## 0.67\n\nThis release fixes a memory management problem (platform dependent; can lead\nto a DoS attack) with messages that only have attachments (reported by Oliver\nBrandmueller). It also contains patches for a few problems found in 0.66 and\nhas better Cygwin support.\n\n## 0.66\n\nThis version is a response to the \"clamav 0.65 remote DOS exploit\" information\npublished on popular security-related mailing lists. Unfortunately we had\nnot been contacted by the author before he published that and had to release\nthis (unplanned) package very quickly (it should be mentioned that CVS version\nwas not vulnerable to the exploit). Untested code has been disabled also\nthe Dazuko support is temporarily not available (if you really need it please\nuse a CVS version or wait for a next stable release). Other noteworthy changes:\n\n- clamd:\n  - fixed database timestamp handling (and a double reload problem reported\n    by Alex Pleiner and Ole Stanstrup)\n  - new directive: ArchiveMaxCompressionRatio\n  - new command: SESSION (starts a clamd session and allows to do multiple\n    commands per TCP session)\n  - new directives: TemporaryDirectory, LogClean (Andrey V. Malyshev)\n\n- clamav-milter: (Nigel Horne)\n  - added support for AllowSupplementaryGroups and ThreadTimeout\n  - added --quarantine-dir (thanks to Michael Dankov)\n  - added --noreject (thanks to Vijay Sarvepalli)\n  - added --headers (thanks Leonid Zeitlin)\n  - added --sign option\n\n- libclamav:\n  - detect Worm.SCO.A bounces (Nigel)\n  - prevent buffer overflow in broken uuencoded files (Nigel)\n  - scan multipart alternatives that have no boundaries (Nigel)\n  - better handling of encapsulated messages (Nigel)\n  - locate uuencoded viruses hidden in text portions of multipart/mixed\n    mime messages (Nigel)\n  - initial support for BinHex (Nigel)\n  - fixed a mail recursion loop (problem reported by Alex Kah and Kristof\n    Petr)\n  - fixed bzip2 memory limit (improper call suggested by the buggy libbz2\n    documentation, problem reported by Tomasz Klim)\n  - fixed on error descriptor leak in CVD unpacker (Thomas Lamy)\n  - fixed memory leak in digital signature verification code (Thomas Lamy)\n  - added maximal compression ratio limit (cl_limits->maxratio)\n\n- clamscan:\n  - support for multiple arguments on command line (Thomas Lamy)\n  - fixed buffer overflow in --move (Denis De Messemacker)\n  - removed support for sendfile() under Linux\n\n- freshclam:\n  - support for freshclam.conf (that may be optionally merged with\n    clamav.conf, command line options overwrite config settings)\n  - work-around for potential database downgrade (subtle problem\n    in r-r dns handling) - reported by Daniel Mario Vega and patched\n    by Luca Gibelli\n\n- sigtool:\n  - list virus names with --list-sigs (-l)\n\n- contrib:\n  - clamdwatch (by Mike Cathey)\n  - windows clamd client with drag&drop support (Nigel Horne)\n\n- documentation:\n  - complete clamdoc.pdf French translation by Stephane Jeannenot\n  - Polish how-to on ClamAV and Sendmail integration (with clamav-milter)\n    by Przemyslaw Holowczyc\n\nNews:\n\nClamAV was the first anti-virus protecting against Worm.SCO.A (aka MyDoom.A) !\nThe signature was published by Diego d'Ambra in the daily update 105,\n26-Jan-2004 20:23 GMT and we were at least two hours faster than \"big\" AV\nvendors:\nhttp://sourceforge.net/mailarchive/forum.php?thread_id=3764826&forum_id=34654\nhttp://www.pcwelt.de/news/viren_bugs/37278/4.html\n\nclamav-devel is finally able to decode OLE2 (Microsoft Office) files and\ndecompress VBA streams ! The code is developed by Trog, official ClamAV\ndeveloper. Also we're testing new clamd implementation that will solve\nseveral important problems (especially that \"Time out\" related). Please\nhelp us and test the latest CVS version.\n\nThe virus database now contains more than 20.000 signatures ! On January 8,\nDenis De Messemacker (who joined our team 3 months ago) added signatures for\nabout 7700 new viruses. Also special thanks go to Tomasz Papszun for his\nhard work on daily submissions and forcing us to keep ClamAV quality on\nthe highest possible level.\n\nNew mirroring mechanisms. Luca Gibelli (ClamAV) and mirror administrators\n(22 sites) are converting mirrors to new \"push mirroring\"\nmethod. It uses advanced techniques to ensure all the mirrors are up-to-date.\n\nWe would like to thank our donors:\n\n- Jeremy Garcia (http://www.linuxquestions.org)\n- Andries Filmer (http://www.netexpo.nl)\n- David Eriksson (http://www.2good.nu)\n- Dynamic Network Services, Inc (http://www.dyndns.org)\n- epublica\n- Invisik Corporation (http://www.invisik.com)\n- Keith (http://www.textpad.com)\n- Explido Software USA Inc. (http://www.explido.us)\n- cheahch from Singapore\n- Electric Embers\n- Stephane Rault\n- Brad Koehn\n- David Farrick\n- ActiveIntra.net Inc. (http://www.activeintra.net)\n- An anonymous donor from Colorado, US\n\n--\nTomasz Kojm <tkojm*clamav.net>\nFebruary 10, 2004\n\n## 0.65\n\nIMPORTANT NOTE: The project has been moved into SourceForge. The only official\nClamAV's homepage is www.clamav.net (however clamav.elektrapro.\ncom still works). We would like to thank ElektraPro.com for\ntheir support for the open-source community  - THANKS !\n\nClamAV 0.65 introduces a new database container file format (called CVD) with\nsupport for digital signatures and compression. Please remove the old\ndatabases from your database directory before the installation. And the most\nimportant thing: clamd stability has been greatly improved (especially under\nFreeBSD) ! Also we have a new mirror infrastructure - you will find all the\ndetails in clamdoc.pdf. If you want to become an official ClamAV mirror\n(with entry in database.clamav.net) please read the clamav-mirror-howto.pdf\ndocument and contact our administrator - Luca Gibelli <nervous*clamav.net>.\n\nNoteworthy changes in this version:\n\n- clamd:\n  - fixed a race condition in database reloading code (random crashes\n    under high load)\n  - fixed a race condition with the improperly initialized session start time\n    (thanks to Michael Dankov)\n  - fixed PidFile permissions (Magnus Ekdahl, bug reported by Tomasz Papszun)\n  - fixed LogFile permissions (Magnus Ekdahl)\n  - new directive ScanRAR (because RAR support is now disabled by default)\n  - new directive VirusEvent\n  - new directive FixStaleSocket (Thomas Lamy and Mark Mielke)\n  - new directive TCPAddr (Bernard Quatermass, fixed by Damien Curtain)\n  - new directive Debug\n\n- clamav-milter: (Nigel Horne <njh*clamav.net>)\n  - new --force-scan flag\n  - new -P and -q flags by Nicholas M. Kirsch\n    WARNING: clamav-milter and our mail scanner are still in high development\n    and may be unstable. You should always use the CVS version.\n\n- libclamav:\n  - support for a new database container format (CVD) - compressed and\n    digitally signed\n  - better protection against malformed zip archives (such as Mimail)\n  - mail decoder fixes (thanks to Rene Bellora, Bernd Kuhls, Thomas Lamy,\n    Tomasz Papszun) (Nigel Horne)\n  - memory leak fixes (Thomas Lamy)\n  - new scan option CL_DISABLERAR (disables built-in RAR unpacker)\n\n- freshclam:\n  - fixed --on-error-execute behaviour (David Woakes)\n  - new option --user (-u) USER - run as USER instead of the default user.\n    Patch by Damien Curtain.\n  - rewritten to use database.clamav.net and CVD\n\n- documentation:\n  - new Spanish documentation on ClamAV and Sendmail integration by\n    Erick Ivaan Lopez Carreon\n  - included clamdoc.pdf Turkish translation by yavuz kaya and �brahim erken\n  - included clamav-mirror-howto.pdf by Luca Gibelli\n  - included clamd+daemontools HOWTO by Jesse D. Guardiani\n  - included signatures.pdf\n  - man pages: updated\n  - clamdoc.pdf: rewritten\n\nNew members of our list of ClamAV certified software (see clamdoc.pdf for\ndetails):\n  - cgpav\n  - smtp-vilter\n  - IVS Milter\n  - scanexi\n  - Mail::ClamAV\n  - OpenAntiVirus samba-vscan\n  - Sylpheed Claws\n  - nclamd\n\nThanks to Mia Kalenius and Sergei Pronin we have a new official logo !\n\nThank you for using ClamAV !\n\n--\nTomasz Kojm <tkojm*clamav.net>\nNovember 12, 2003\n\n## 0.60\n\nHello again...\n\nThis is a new, (very?) stable release of Clam AntiVirus. 0.60 was developed\nand stabilized for over seven months and many people had contributed to the\nfinal release. This version introduces many enhancements and a new program:\nclamav-milter written by ClamAV developer Nigel Horne. This is a mail scanner\nfor Sendmail/milter written entirely in C, which uses clamd for virus scanning.\nClamav-milter and clamd duet is a powerful solution for systems where high\nperformance is required. Please check clamdoc for more detail.\n\n    Many people get confused with ClamAV database status because of\n    the OpenAntiVirus update information at:\n    http://openantivirus.org/latest.php\n    (last update at 17 October, 2002). The ClamAV virus database contains\n    the OAV database (with some signatures fixed or removed) but we\n    develop it independently of the OAV project. Our database is updated\n    frequently (on average 4-5 times a week). You can help (or join) us -\n    will find some basic but useful instructions at\n    http://clamav.elektrapro.com/doc/signatures.pdf\n\nNews from ClamAV world:\n\n- New email address for virus submitting: virus@clamav.elektrapro.com\n   You don't need to encrypt a virus sample, but if your system doesn't allow\n   you to send infected files just put it into an encrypted zip archive\n   (password: virus)\n\n   Special thanks to Nicholas Chua, Diego D'Ambra, Hrvoje Habjanic, Nigel Kukard\n   and Chris van Meerendonk for a big number of samples submitted.\n\n- New mailing list: virusdb@clamav.elektrapro.com\n   After each update an email with subject \"[clamav-virusdb] Update\" and a list\n   of viruses added is sent to it. You can set up a procmail rule for freshclam\n   to react on such a mails (and update the database just after an update).\n\n- New official mirrors:\n  - clamav.ozforces.com: database mirror updated manually (thanks to\n    Andrew <andrew@ozforces.com>)\n  - clamav.essentkabel.com: full (automatic) mirror of clamav.elektrapro.com\n    (thanks to Chris van Meerendonk <cvm@castel.nl>)\n  - clamav.linux-sxs.org: database mirror - rsync from clamav.ozforces.com\n    (thanks to Douglas J Hunley <doug@hunley.homeip.net>)\n\n    FreshClam will automatically use them when the main server is not\n    accessible.\n\n- Official port in FreeBSD available ! (maintained by Masahiro Teramoto\n   <markun@onohara.to>)\n\n- Unofficial port for OpenBSD is available at:\n\thttp://www.activeintra.net/openbsd/article.php?id=5\n  (maintained by Flinn Mueller <flinn@activeintra.net>)\n\n- there are many new programs that use ClamAV, eg. mod_clamav (Apache\n  virus scanning filter), clamdmail or Sagator. You will find more\n  info in clamdoc.\n\nChanges:\n\n- libclamav:\n  - fixed buffer overflow in unrarlib (patch by Robbert Kouprie\n    <robbert@exx.nl>)\n\n  - various mbox code updates (fixed memory leak; added support for decoding\n    viruses sent in message bodies, detection of viruses that put their\n    payloads after the end of message marker (thanks to Stephen White\n    <stephen@earth.li> for the bug report and useful CGI tools);\n\n  - zziplib updated to 0.10.81 (some problems with older version were reported\n    by Martin Schitter)\n  - direct scanning of mbox/maildir files (new directive CL_MAIL)\n  - file scanner optimization (patch by Hendrik Muhs\n    <Hendrik.Muhs@student.uni-magdeburg.de>)\n  - bzip2 support\n  - faster detection of malformed Zip archives (eg. 'Zip of Death'), they are\n    reported as a viruses\n  - fixed strcasecmp() compile problem in zziplib on Free/NetBSD and others\n\n- clamd:\n  - fixed descriptor leak in directory scanner - it was causing random\n    clamd crashes and locks, especially on highly loaded servers. Reported\n    by Kristof Petr <Kristof.P@fce.vutbr.cz>.\n\n  - fixed crash with archive scanning on BSD (increased thread stack size)\n    (Nigel Horne)\n  - fixed CONTSCAN command (used by clamdscan) - it had archive support\n    disabled (hardcoded)\n  - fixed SelfCheck option (there was a logic bug, and the option was\n    disabled) it now checks a databases time stamps and reloads them\n    if needed.\n  - fixed possible writing to undefined descriptors (bug found by\n    Brian May <bam@debian.org>)\n  - new STREAM command (scanning data on socket) and directives:\n    StreamSaveToDisk (save stream to disk to allow scanning within archives),\n    StreamMaxLength. This option allows scanning data on socket (might be\n    sent from another host), currently only clamav-milter uses this.\n\n  - new ScanMail directive for scanning into mbox/Maildir files\n  - new directive: ArchiveLimitMemoryUsage (limit memory usage with bzip2)\n  - new directive: AllowSupplementaryGroups (feature requested by Exiscan\n    users)\n  - syslog support (LogSyslog) (patch by Hrvoje Habjanic\n    <hrvoje.habjanic@zg.hinet.hr>)\n  - fixed parser segfault with extra space between option and argument\n    in config file (Magnus Ekdahl <magnus@debian.org>)\n\n- clamscan:\n  - fixed --remove option (didn't work when the file was scanned with an\n    internal unpacker) (patch by Damien Curtain <damien@pagefault.org>)\n  - --move option for moving infected files into a specified directory\n    (by Damien Curtain <damien@pagefault.org>)\n  - --mbox enables a direct support for mbox files\n    (ex. clamscan --mbox /var/spool/mail)\n  - fixed --log (-l) option\n  - fixed -i option (patch by Magnus Ekdahl <magnus@debian.org>)\n  - enabled default archive limits (max-files = 500, max-size = 10M,\n    max-recursion = 5)\n  - use arj instead of non-free unarj (patch by Magnus Ekdahl)\n  - use unzoo instead of non-free zoo (patch by Magnus Ekdahl)\n  - removed thread support\n\nfreshclam:\n  - mirror support (implemented by Damien Curtain <damien@pagefault.org>)\n  - --proxy-user: proxy authorization support (implemented by Gernot Tenchio\n    <g.tenchio@telco-tech.de>)\n  - new options --on-error-execute, --on-update-execute\n    (ex. freshclam -d -c 6 --on-error-execute \"sendsms 23332243 Can't\n    update virus database\"). Idea by Douglas J Hunley <doug@hunley.homeip.net>\n\nconfigure:\n  - --disable-cr (don't link with C reentrant library (needed on some newer\n    versions of OpenBSD))\n\n- Enhanced AIX (thanks to Mike Loewen <mloewen@sturgeon.cac.psu.edu>) and\n   Tru64 support (thanks to Christophe Varoqui <ext.devoteam.varoqui@sncf.fr>)\n\n- documentation:\n  - included how-to in Portuguese by Alexandre de Jesus Marcolino\n  - clamdoc.pdf and system manual updates\n\nMany thanks to Luca 'NERvOus' Gibelli from ElektraPro for his support,\nto Ken McKittrick from USA DataNet for a fully accessible FreeBSD box and\nto mailing list subscribers for a constructive discussions.\n\n--\nTomasz Kojm\nJune 21, 2003\n\n## 0.54\n\nMany major changes this time...\n\n- libclamav:\n  - fixed segfault with some strange zip archives (there is a bug in zziplib,\n    libclamav contains a work around for it) (the problem was reported by\n    Oliver Paukstadt <pstadt@stud.fh-heilbronn.de>)\n  - engine improvements (better support for a detection of new viruses,\n    limited memory usage (consumes ~ 5 Mb now))\n  - mbox code updated and moved into the library: fixed core dump when an\n    embedded message includes a mime header with the line Content-Type:\n    without specifying the type of content, fixed (theoretical) memory leak,\n    support for multipart/report messages, fixed bug causing some formats to\n    fail to scan) (Nigel)\n- clamd:\n  - new commands: CONTSCAN (it doesn't stop scanning even when virus is\n    found), VERSION\n  - disable logging of a unnecessary time stamps with LogTime when\n    LogVerbose isn't used (patch by Ed Phillips <ed@UDel.Edu>)\n- freshclam:\n  - \"Cache-Control: no-cache\" enabled by default\n  - Cygwin support fix\n- clamdscan:\n  - initial version\n- all tools:\n  - removed huge printf() in help() (there was a buffer overflow problem with\n    --help option under Windows and SCO Unix (reported by Wojciech Noworyta\n    <wnow@konarski.edu.pl> and Nigel respectively)\n- configure:\n  - allow configuration of the clamav user and group with --with-user and\n    --with-group (patch by Patrick Bihan-Faou <patrick@mindstep.com>)\n  - --enable-id-check - it uses the check procedure from Jason Englander\n    <jason@englanders.cc>, currently it will fail on systems with getent\n    which doesn't detect clamav group.\n  - do not overwrite the existing config file\n\nThere are initial packages for Windows available at:\n    http://clamav.elektrapro.com/binary\n\n--tk\n\n## 0.53\n\nThis release has removed the limit for a file name length in clamscan. Some\nviruses (eg. W32/Yaha.E) are using very long file names, and they were\nignored in mbox mode. Users of AMaViS-ng and other wrappers were not\nvulnerable to this problem, because that programs don't use original\nattachment file names.\n\n- clamscan:\n  - removed limit for a file name length (thanks to Odhiambo Washington\n    <wash@wananchi.com> for the test files and extensive mbox testing)\n  - mbox: adapted to the new changes, enabled thread support (Nigel),\n    re-enabled temporary directory removing.\n\n## 0.52\n\nThis version contains a portability fixes - it should compile on OpenBSD,\nMacOSX and NetBSD (support for them was broken in 0.51).\n\n- clamd: various fixes:\n  - drop supplementary groups (suggested by Enrico Scholz\n    <enrico.scholz@informatik.tu-chemnitz.de>) (this has been implemented\n    in freshclam, too)\n  - work-around for the segmentation fault at QUIT under FreeBSD\n  - check timeouts when waiting for threads in RELOAD mode\n  - SelfCheck - internal integrity check (by default every 1 hour)\n  - fixed problem with directory scanning on non typical file systems\n    (bug reported by Jason Englander <jason@englanders.cc>)\n  - clamd is a system command (clamd.1 -> clamd.8, /usr/local/bin ->\n    /usr/local/sbin) (Magnus Ekdahl)\n- clamscan:\n  - mbox code updates (Nigel Horne) - it fixes some problems on *BSD\n    systems (see mailing lists archives for the details)\n  - enable core dumping (Nigel Horne) [ with --enable-debug ]\n- freshclam:\n  - applied http-proxy patch from http://bugs.debian.org/clamav (by\n    Martin Lesser <admin-debian@bettercom.de>)\n  - when configured with --disable-cache, freshclam forces 'no-cache'\n    option in proxy servers (patch by Ant La Porte <ant@dvere.net>)\n\n- HPUX (10.20/11.0 tested) support (thanks to Joe Oaks <joe.oaks@hp.com>)\n- fixed support for SCO Unix and BeOS (Nigel Horne)\n- support/mboxscan: new version with SpamAssassin support (Nigel Horne)\n- re-included TrashScan 0.08 (by Trashware <trashware@gmx.de>) - the security\n  issue has been fixed.\n- included \"Installing qmail-scanner, Clam Antivirus and SpamAssassin under\n  FreeBSD\" how-to by Paul Hoadley and Eric Parsonage\n\n## 0.51\n\nOAV database is up-to-date ! There was a problem with signature parsing,\nbecause some hex strings were upper case. Anyway, I still recommend you\nfreshclam for a database updating.\n\n- support for the genuine OAV database\n- limited memory usage (at the cost of speed, increase CL_MIN_LENGTH in\n  libclamav/clamav.h to make it faster, it's safe to set it on 3-4 for\n  the OAV database)\n- fixed compile problem on TurboLinux 6.5 (probably others, too), the bug\n  was reported by Henk Kuipers <henk@opensourcesolutions.nl>.\n- clamd: fixed THREXIT (thanks to Piotr Gackiewicz <gacek@intertele.pl>)\n- clamd: fixed serious bug with thread argument type\n- clamscan: mbox: don't scan empty attachments (Nigel Horne)\n- configure: --with-db1, --with-db2 (suggested by Magnus Ekdahl)\n\n## 0.50\n\nHere it is...\nClam AntiVirus 0.50 contains an anti-virus library - libclamav, a fully\nmulti-threaded daemon clamd(1) and a quite long list of changes. The\ndocumentation was rewritten and you _should_ review it. By courtesy of\nNERvOus <nervous@nervous.it> and ElektraPro, there are three mailing lists\navailable - you can subscribe via www at http://clamav.elektrapro.com/ml.\nPlease check the manual for more information.\n\nNew software:\n\n- libclamav with RAR, Zip and Gzip support built-in. The library is thread\n  safe and should be very secure, also. It uses UniquE RAR File\n  Library by Christian Scheurer and Johannes Winkelmann (RAR 2.0 support only)\n  and zziplib library by Guido Draheim and Tomi Ollila. Both of them are\n  included and slightly modified in the clamav sources. You need the zlib\n  library for the Zip/Gzip support, though. The API is described with\n  examples in the clamdoc.\n\n- clamd: a modern anti-virus daemon. It uses configuration file clamav.conf\n  described in the clamav.conf(5) manual. The program was written with\n  security as a goal.\n\n- clamuko: on-access scanning under Linux. It utilizes Dazuko kernel module\n  (GPL, http://dazuko.org) and is clamd-based.\n\nNew features / improvements:\n\n- enhanced scanner engine (better detection of some complex polymorphic\n  viruses)\n\n- clamscan: Nigel Horne <njh@bandsman.co.uk> has added the ability to scan\n  mail attachments in a filter. For example:\n\n  $ clamscan -i --mbox - < /var/spool/mail/john\n  /tmp/aa6b9fc06bc477ae/setup.exe: Worm/Klez.H FOUND\n\n  Nigel is the author of the whole mbox code in clamscan. Currently it only\n  works in a filter mode, but there are plans to move the code into the\n  libclamav and allow clamd using it. Please check support/mboxscan, also.\n\n- clamscan: support for including and excluding multiple patterns with\n  --include and --exclude (patch by Alejandro Dubrovsky\n  <s328940@student.uq.edu.au>).\n  Example: clamscan --include .exe --include .obj --include .scr /mnt/windows\n\n- clamscan: don't scan /proc files (Linux, st_dev comparing). No more\n  /proc/kcore related mails :))\n\n- clamscan: use libclamav's archive support by default (it's enabled by default\n  and may be disabled with --disable-archive) and switch to the external\n  unpackers (if specified) in the case of libclamav archive code error.\n\n- freshclam: proxy support (via $http_proxy variable and --http-proxy).\n  I started implementing proxy support some time ago, but never finished.\n  Nigel Horne did the great job and has finished the proxy support !\n\n- freshclam: --daemon-notify. freshclam will send the RELOAD command to the\n  daemon after database update (supports both tcp and local sockets, it reads\n  clamav.conf to determine the socket type).\n\n- freshclam: support for viruses.db2\n\nBug fixes:\n\n- freshclam: log 'Database updated' message (thanks to Jeffrey Moskot\n  <jef@math.miami.edu> for the bug report). It now prints a number\n  of signatures in a database, also.\n\n- clamscan: fixed compile problem on Solaris 8 and some other systems -\n  #include <signal.h> lack in others.c (thanks Mike Loewen\n  <mloewen@sturgeon.cac.psu.edu> for the bug report)\n\nDocumentation:\n\n- included Japanese documentation by Masaki Ogawa <proc@mac.com>\n\n- updated Spanish \"Sendmail + Amavis + ClamAv - Como\" by Erick I. Lopez\n   Carreon <elopezc@technitrade.com>\n\n- rewritten clamdoc, included clamdoc-html, removed PostScript version (.ps)\n\n- Clam-Mutant ;) logo update by Michal Hajduczenia <michalis@mat.uni.torun.pl>\n\n- new man pages: clamd(1), clamav.conf(5); others updated\n\n!!!\n    Please don't use the oav-update script with this version. It doesn't\nupdate viruses.db2 and supports OpenAntiVirus.org site only (the last\nupdate of the OAV database was 1 July !). Nicholas Chua <nicholas@ncmbox.net>\nhas generated over 200 new signatures, ClamAV's database is also frequently\nupdated (especially when new wild virus/worm appears, eg. W32/BugBear.A).\n\n    This software is still in development (new software == new bugs), however\nclamscan should be very stable. You shouldn't use clamd/clamuko (well, clamd is\nstable, clamuko isn't) on production systems, yet. Please wait for 0.51 at\nleast ;). ClamAV 0.50 was tested on Linux and Solaris and should work fine.\nThere is a problem with clamd on FreeBSD (tested on my FreeBSD 5.0-CURRENT) -\nthe daemon crashes with Zip/Gzip files (disabling ScanArchive should help).\n\nEnjoy !\n--\nTomasz Kojm\nOctober 5, 2002\n\n## 0.24\n\n- fixed threads deadlock in a critical error situation (bug found by David\n  Sanchez <dsanchez@veloxia.com>)\n- fixed sigtool bug (negative seeking)\n- fixed potential clamscan segfault in the case of memory allocation error\n- unpacker execution error is no longer treated as critical - a few programs\n  (eg. Qmail-Scanner, TrashScan) have clamscan command hardcoded with all\n  archive options turned on. Now, if unpacker can't be executed, raw file is\n  scanned and scan process is continued.\n- reverted to pthread.h detection\n- TrashScan 0.07 (Trashware <trashware@gmx.net>)\n- --exclude (regular expressions are not supported !)\n  [ex: clamscan --exclude=\"/proc/kcore\" /], but please use it with care.\n- included html documentation\n\nIMPORTANT NOTE:\n~~~~~~~~~~~~~~~\nYou will probably have a problem with a default Qmail-Scanner (1.13 or newer)\ninstallation. You need to increase qmail-smtpd softlimit or disable it. You\ncan force clamscan to use only half of the memory which it uses by default, too.\nPlease change the following line in the clamscan/matcher.h file:\n    #define MIN_LENGTH 5\nto:\n    #define MIN_LENGTH 3\nand recompile the program. Unhappily, scanning may be a little slower in some\ncases, but it shouldn't be significant. Then you can safely set the qmail\nsoftlimit to 8 MB. I want to thank Doug Monroe <doug@planetconnect.com> for\nhis contribution in the problem analysis.\n---\n\nNew ClamAV version is in a heavy development. It has currently built-in\nsupport for RAR, Zip, Gzip and tar. The daemon will support only built-in\ncompression/archive support. Snapshot will be available for a few days.\n\n## 0.23\n\n- fixed compile problem on FreeBSD (thanks to Wieslaw Glod <wkg@x2.pl> and\n  Ken McKittrick <klmac@usadatanet.com>)\n- clamscan reads all .db files from data directory, so you can put your\n  own databases there and they won't be overwritten by the updaters. viruses.db\n  is still the main database file (if --database isn't used).\n- --deb (debian binary packages scanning) by Magnus Ekdahl <magnus@debian.org>\n- --remove option, but be careful with it !\n- new clam logo ;) (GPL) by Michal Hajduczenia <michalis@mat.uni.torun.pl>.\n- TrashScan 0.06 (by Trashware <trashware@gmx.net>) - a script for scanning\n  mail with procmail. I recommend it. (support/trashscan)\n- documentation updates\n\n0.30 release will contain a daemon and an anti-virus library (with simple API),\nso you can use it directly in your projects. I want to build in zip and rar\nsupport, also.\n\nThere are binary packages for AIX available. Please check the documentation.\n\n## 0.22\n\nThis release fixes bug with scanning archives in unaccessible directories with\n*superuser* privileges (after dropping privileges scanner wasn't able to\naccess the archive, although the same archive was accessible), thanks\nfor Sergei Pronin <sp@finndesign.fi> for the problem description. Now all\narchives unaccessible directly by the clamav user are copied (with a respect to\n--max-space) to the temporary directory. All old filesystem tricks were removed.\n\nOther fixes / improvements:\n\n- better error handling, new error codes\n- improved -i (--infected) option\n- removed --strange-unzip option\n- removed eicar test files and logos from the documentation due to the GPL\n  (thanks for Magnus Ekdahl <magnus@debian.org>), ClamAV-Test-Signature is\n  used instead\n- removed Qmail-Scanner patch, ClamAV is supported by Q-S 1.13 (thanks guys!)\n- code cleanups\n\n## 0.21 Release\n\nIt fixes following problems:\n\n- database downloading in freshclam/0.20\n- malformed amavis-perl patch from 0.20\n- clamscan problems with some unzip versions, please try --strange-unzip\n  option\n\nClamAV 0.21 source package contains initial support for NetBSD\n(thanks to Marc Baudoin <babafou@babafou.eu.org>, Jean-Edouard BABIN\n<Jeb@jeb.com.fr>), better support for Mac OS X (Masaki Ogawa <proc@mac.com>),\nand clamdoc documentation corrected by Dennis Leeuw <dleeuw@made-it.com>.\n\n## 0.20 Release\n\nThe most important change in this release is a new, linear pattern matching\nalgorithm. You will find more informations about it in clamscan/matcher.c -\nin the sources and in clamdoc. Summary (since 0.15):\n\nNew features:\n\n- fast pattern matching algorithm\n- sigtool utility, check `man sigtool` and clamdoc\n- Linux: threads autodetection on various architectures\n  (Magnus Ekdahl <magnus@debian.org>)\n- -i, --infected: clamscan prints only infected files\n- 'Data scanned' in summary, size in megabytes with 16 Kb precision\n- configure: --with-dbdir sets the database location\n- support/sigmake shell script by Dennis Leeuw <leeuw@stone-it.com>\n- Spanish \"Sendmail+Amavis+ClamAv installation how-to\" by\n  Erick I. Lopez Carreon <elopezc@technitrade.com>\n\nUpdates:\n\n- \"Debian GNU/Linux Mail Server v. 0.2.0\" by Dennis Leeuw <leeuw@stone-it.com>\n- qmail-scanner patch from Kazuhiko <kazuhiko@fdiary.net>\n- general documentation cleanups / updates\n- freshclam / Internet database location\n\nFixes:\n\n- threads autodetection on not-x86 Linux systems\n- gcc 3.x support (David Ford <david+cert@blue-labs.org>)\n- data type fix on Mac OS X (Peter N Lewis <peter@stairways.com.au>)\n- removed -w, --whole-file, now clamscan scans whole files by default\n  -w is still supported by internal getopt(), because it is used in\n  various patches\n- removed --one-virus, still supported by getopt(); removed 'Found viruses'\n  from summary, clamscan stops file scanning after first virus\n- fixed old problem with scanning stdin\n- removed amavisd-patch - strange problems have been reported\n\nOpenAntiVirus Update is a great tool written by Matthew A. Grant\n<grantma@anathoth.gen.nz> and it will be the primary updater for ClamAV\nin the near future. In contrast to freshclam it has proxy support and many\nspecific features. Please check clamdoc for more informations and how to\nobtain it.\n\n## 0.15 Notes\n\nThis version contains minor bugfixes only, such as:\n- multiple fixes in freshclam (it has problems, when one of the\n  hosts wasn't accessible), there were logic flaws in the code\n- fixed problem with password protected archives (unpackers were waiting\n  for password)\n\nNew features:\n- OpenBSD support (thanks to Kamil Andrusz <wizz@mniam.net>)\n- added support for amavisd, qmail-scanner (see ./support)\n\nThere were no major bugs and I was very busy, that's why new version is\nreleased just today. In the next 2 months, clamav development will be much\nfaster. Here are some of my plans:\n\n~ 0.20 : New pattern-matching algorithm\n~ 0.30 : clamlib; clamscan and the daemon based on it\n\nThere is a new homepage:\n- http://clamav.elektrapro.com\n\nThanks to ElektraPro.com for sponsoring this site (it's very fast).\nThanks to NERvOus <nervous@nervous.it>.\n\nIf you are interested in current development versions, please check\nsnapshots link.\n\n### Resource usage limits in 0.14\n\nTwo new features: --max-files, --max-space have been implemented. If you have\nenabled one of this options, clamscan monitors resource usage (number of\ncreated files and used space) and stops extractor when it has exceeded\nthe limit. You should use these options to protect your machine against\nDenial of Service attacks. In the near future --max-levels (limit for\nrecursive archives extracting) and --max-time (spent on checking/extracting\nfiles) will be implemented.\n\n### FreeBSD: AMaViS compile problems\n\nPlease check FAQ.\n\n### !!! Strange signatures in VirusSignatures-2002.04.15.10.51.zip !!!\n\nLast version of signatures was ~90 kb, this version is ~474 kb.\nBut I don't understand, why some signatures are mega-huge. When I decoded\nthem, they looked like regular files. In CA they were removed from the\ndatabase and I probably add them later, in normal sizes.\n\n### Installation :\n\nPlease view documentation in ./docs. There are several formats - pdf, ps\nand plain latex, if you want to compile it yourself.\n\nYou need GNU make (on Solaris you should have gmake).\nIt was tested only with gcc 2.9x compilers.\n"
        },
        {
          "name": "README.Docker.md",
          "type": "blob",
          "size": 18.8193359375,
          "content": "# ClamAV in Docker\n\nClamAV can be run within a Docker container. This provides isolation from other\nprocesses by running it in a containerized environment. If new or unfamiliar\nwith Docker, containers or cgroups see [docker.com](https://www.docker.com).\n\n## The official images on Docker Hub\n\nClamAV image tags [on Docker Hub](https://hub.docker.com/u/clamav/clamav)\nfollow this naming convention:\n\n  - `clamav/clamav:<version>`: A release preloaded with signature databases.\n\n    Using this container will save the ClamAV project some bandwidth.\n    Use this if you will keep the image around so that you don't download the\n    entire database set every time you start a new container. Updating with\n    FreshClam from existing databases set does not use much data.\n\n  - `clamav/clamav:<version>_base`: A release with no signature databases.\n\n    Use this container **only** if you mount a volume in your container under\n    `/var/lib/clamav` to persist your signature database databases.\n    This method is the best option because it will reduce data costs for ClamAV\n    and for the Docker registry, but it does require advanced familiarity with\n    Linux and Docker.\n\n    > _Caution_: Using this image without mounting an existing database\n    directory will cause FreshClam to download the entire database set each\n    time you start a new container.\n\nYou can use the `unstable` version (i.e. `clamav/clamav:unstable` or\n`clamav/clamav:unstable_base`) to try the latest from our development branch.\n\n## Building the ClamAV image\n\nWhile it is recommended to pull the image from our\n[Docker Hub registry](https://hub.docker.com/u/clamav/clamav), some may want\nto build the image locally instead.\n\nTo do this, you will need to get the  `Dockerfile` and the supporting `scripts/`\ndirectory from the\n[clamav-docker Git repository](https://github.com/Cisco-Talos/clamav-docker).\nBe sure to select the correct one for this ClamAV release.\n\n> _Tip_: For unreleased ClamAV versions, such as when building from the `main`\n> git branch, you should select the files from the\n> `clamav-docker/clamav/unstable/<distro>` directory.\n\nPlace the `Dockerfile` and `scripts/` directory in the ClamAV source directory.\nThen you can build the image. For example, run:\n```bash\ndocker build --tag \"clamav:TICKET-123\" .\n```\nin the current directory. This will build the ClamAV image and tag it with\nthe name \"clamav:TICKET-123\". Any name can generally be used and it is this\nname that needs to be referred to later when running the image.\n\n## Running ClamD\n\nTo run `clamd` in a Docker container, first, an image either has to be built\nor pulled from a Docker registry.\n\n### Running ClamD using the official ClamAV images from Docker Hub\n\nTo pull the ClamAV \"unstable\" image from Docker Hub, run:\n\n```bash\ndocker pull clamav/clamav:unstable\n```\n\n> _Tip_: Substitute `unstable` with a different version as needed.\n\nTo pull _and run_ the official ClamAV images from the Docker Hub registry,\ntry the following command:\n\n```bash\ndocker run \\\n    --interactive \\\n    --tty \\\n    --rm \\\n    --name \"clam_container_01\" \\\n    clamav/clamav:unstable\n```\n\nThe above creates an interactive container with the current TTY connected to\nit. This is optional but useful when getting started as it allows one to\ndirectly see the output and, in the case of `clamd`, send `ctrl-c` to close the\ncontainer. The `--rm` parameter ensures the container is cleaned up again after\nit exits and the `--name` parameter names the container, so it can be\nreferenced through other (Docker) commands, as several containers of the same\nimage can be started without conflicts.\n\n> _Note_: Pulling is not always required. `docker run` will pull the image\nif it cannot be found locally. `docker run --pull always` will always pull\nbeforehand to ensure the most up-to-date container is being used.\nDo not use `--pull always` with the larger ClamAV images.\n\n> _Tip_: It's common to see `-it` instead of `--interactive --tty`.\n\nIn some situations it may be desirable to set (any of) the containers to a\nspecific timezone. The `--env` parameter can be used to set the `TZ` variable\nto change the default of `Etc/UTC`.\n\n### Running ClamD using a Locally Built Image\n\nYou can run a container using an image built locally\n([see \"Building the ClamAV Image\"](#building-the-clamav-image)). Just run:\n```bash\ndocker run -it --rm \\\n    --name \"clam_container_01\" \\\n    clamav:TICKET-123\n```\n\n### Persisting the virus database (volume)\n\nThe virus database in `/var/lib/clamav` is by default unique to each container\nand thus is normally not shared. For simple setups this is fine, where only one\ninstance of `clamd` is expected to run in a dockerized environment. However\nsome use cases may want to efficiently share the database or at least persist\nit across short-lived ClamAV containers.\n\nTo do so, you have two options:\n\n1. Create a [Docker volume](https://docs.docker.com/storage/volumes/) using the\n   `docker volume` command.\n   Volumes are completely managed by Docker and are the best choice for\n   creating a persistent database volume.\n\n   For example, create a \"clam_db\" volume:\n   ```bash\n   docker volume create clam_db\n   ```\n\n   Then start one or more containers using this volume. The first container\n   to use a new database volume will download the full database set. Subsequent\n   containers will use the existing databases and may update them as needed:\n   ```bash\n   docker run -it --rm \\\n       --name \"clam_container_01\" \\\n       --mount source=clam_db,target=/var/lib/clamav \\\n       clamav/clamav:unstable_base\n   ```\n\n2. Create a [Bind Mount](https://docs.docker.com/storage/bind-mounts/) that\n   maps a file system directory to a path within the container.\n   Bind Mounts depend on the directory structure, permissions, and operating\n   system of the Docker host machine.\n\n   Run the container with these arguments to mount the a directory from your host\n   environment as a volume in the container.\n   ```bash\n       --mount type=bind,source=/path/to/databases,target=/var/lib/clamav\n   ```\n\n   When doing this, it's best to use the `<version>_base` image tags so as to\n   save on bandwidth. E.g.:\n   ```bash\n   docker run -it --rm \\\n       --name \"clam_container_01\" \\\n       --mount type=bind,source=/path/to/databases,target=/var/lib/clamav \\\n       clamav/clamav:unstable_base\n   ```\n\n   > _Disclaimer_: When using a Bind Mount, the container's entrypoint script\n   will change ownership of this directory to its \"clamav\" user. This enables\n   FreshClam and ClamD with the required permissions to read and write to the\n   directory, though these changes will also affect those files on the host.\n\nIf you're thinking about running multiple containers that share a single\ndatabase volume, [here are some notes on how this might work](#multiple-containers-sharing-the-same-mounted-databases).\n\n## Running Clam(D)Scan\n\nScanning files using `clamscan` or `clamdscan` is possible in various ways with\nDocker. This section briefly describes them, but the other sections of this\ndocument are best read before hand to better understand some of the concepts.\n\nOne important aspect is however to realize that Docker by default does not have\naccess to any of the hosts files. And so to scan these within Docker, they need\nto be mounted with a [bind mount](https://docs.docker.com/storage/bind-mounts/)\nto be made accessible.\n\nFor example, running the container with these arguments ...\n```bash\n    --mount type=bind,source=/path/to/scan,target=/scandir\n    --mount type=bind,source=/path/to/scan,target=/scandir\n```\n... would make the hosts file/directory `/path/to/scan` available in the\ncontainer as `/scandir` and thus invoking `clamscan` would thus be done on\n`/scandir`.\n\nNote that while technically possible to run either scanners via `docker exec`\nthis is not described as it is unlikely the container has access to the files\nto be scanned.\n\n### ClamScan\n\nUsing `clamscan` outside of the Docker container is how normally `clamscan` is\ninvoked. To make use of the available shared dockerized resources however, it\nis possible to expose the virus database and share that for example. E.g. it\ncould be possible to run a Docker container with only the `freshclam` daemon\nrunning, and share the virus database directory `/var/lib/clamav`. This could\nbe useful for file servers for example, where only `clamscan` is installed on\nthe host, and `freshclam` is managed in a Docker container.\n\n> _Note_: Running the `freshclam` daemon separated from `clamd` is less\nrecommended, unless the `clamd` socket is shared with `freshclam` as\n`freshclam` would not be able to inform `clamd` of database updates.\n\n### Dockerized ClamScan\n\nTo run `clamscan` in a Docker container, the Docker container can be invoked\nas:\n```bash\ndocker run -it --rm \\\n    --mount type=bind,source=/path/to/scan,target=/scandir \\\n    clamav/clamav:unstable \\\n    clamscan /scandir\n```\n\nHowever, this will use whatever signatures are found in the image, which may be\nslightly out of date. If using `clamscan` in this way, it would be best to use\na [database volume](#running-with-a-mounted-database-directory-volume) that is\nup-to-date so that you scan with the latest signatures. E.g.:\n```bash\ndocker run -it --rm \\\n    --mount type=bind,source=/path/to/scan,target=/scandir \\\n    --mount type=bind,source=/path/to/databases,target=/var/lib/clamav \\\n    clamav/clamav:unstable_base \\\n    clamscan /scandir\n```\n\n### ClamDScan\n\nAs with `clamscan`, `clamdscan` can also be run when installed on the host, by\nconnecting to the dockerized `clamd`. This can be done by either pointing\n`clamdscan` to the exposed TCP/UDP port or unix socket.\n\n### Dockerized ClamDScan\n\nRunning both `clamd` and `clamdscan` is also easily possible, as all that is\nneeded is the shared socket between the two containers. The only caveat here\nis to:\n1. mount the files to be scanned in the container that will run `clamd`, or\n2. mount the files to be scanned in the container that will `clamdscan` run if\n   using `clamdscan --stream`. The `--stream` option will be slower, but\n   enables submitting files from a different machine on a network.\n\nFor example:\n```bash\ndocker run -it --rm \\\n    --mount type=bind,source=/path/to/scan,target=/scandir \\\n    --mount type=bind,source=/var/lib/docker/data/clamav/sockets/,target=/run/clamav/\n    clamav/clamav:unstable\n```\n\n```bash\ndocker run -it --rm \\\n    --mount type=bind,source=/path/to/scan,target=/scandir \\\n    --mount type=bind,source=/var/lib/docker/data/clamav/sockets/,target=/run/clamav/\n    clamav/clamav:unstable_base \\\n    clamdscan /scandir\n```\n\n## Controlling the container\n\nThe ClamAV container actually runs both `freshclam` and `clamd` daemons by\ndefault. Optionally available to the container is ClamAV's milter daemon.\nTo control the behavior of the services started within the container, the\nfollowing flags can be passed to the `docker run` command with the\n`--env` (`-e`) parameter.\n\n* CLAMAV_NO_CLAMD [true|**false**] Do not start `clamd`.\n  (default: start `clamd`)\n* CLAMAV_NO_FRESHCLAMD [true|**false**] Do not start the `freshclam` daemon.\n  (default: start the `freshclam` daemon)\n* CLAMAV_NO_MILTERD [**true**|false] Do not start the `clamav-milter` daemon.\n  (default: start the `clamav-milter` daemon )\n* CLAMD_STARTUP_TIMEOUT [integer] Seconds to wait for `clamd` to start.\n  (default: 1800)\n* FRESHCLAM_CHECKS [integer] `freshclam` daily update frequency.\n  (default: once per day)\n\nSo to additionally also enable `clamav-milter`, the following flag can be\nadded:\n```bash\n    --env 'CLAMAV_NO_MILTERD=false'\n```\n\nFurther more, all of the configuration files that live in `/etc/clamav` can be\noverridden by doing a volume-mount to the specific file. The following argument\ncan be added for this purpose. The example uses the entire configuration\ndirectory, but this can be supplied multiple times if individual files deem to\nbe replaced.\n```bash\n    --mount type=bind,source=/full/path/to/clamav/,target/etc/clamav\n```\n\n> _Note_: Even when disabling the `freshclam` daemon, `freshclam` will always\nrun at least once during container startup if there is no virus database.\nWhile not recommended, the virus database location itself `/var/lib/clamav/`\ncould be a persistent Docker volume. This however is slightly more advanced\nand out of scope of this document.\n\n## Connecting to the container\n\n### Executing commands within a running container\n\nTo connect to a running ClamAV container, `docker exec` can be used to run a\ncommand on an already running container. To do so, the name needs to be either\nobtained from `docker ps` or supplied during container start via the `--name`\nparameter. The most interesting command in this case can be `clamdtop`.\n```bash\ndocker exec --interactive --tty \"clamav_container_01\" clamdtop\n```\nAlternatively, a shell can be started to inspect and run commands within the\ncontainer as well.\n```bash\ndocker exec --interactive --tty \"clamav_container_01\" /bin/sh\n```\n\n### Unix sockets\n\nThe default socket for `clamd` is located inside the container as\n`/run/clamav/clamd.sock` and can be connected to when exposed via a Docker\nvolume mount. To ensure, that `clamd` within the container can freely create\nand remove the socket, the path for the socket is to be volume-mounted, to\nexpose it for others on the same host to use. The following volume can be used\nfor this purpose. Do ensure that the directory on the host actually exists and\nclamav inside the container has permission to access it.\nCaution is required when managing permissions, as incorrect permission could\nopen clamd for anyone on the host system.\n```bash\n    --mount type=bind,source=/var/lib/docker/data/clamav/sockets/,target=/run/clamav/\n```\n\nWith the socket exposed to the host, any other service can now talk to `clamd`\nas well. If for example `clamdtop` where installed on the local host, calling\n```bash\nclamdtop \"/var/lib/docker/data/clamav/sockets/clamd.sock\"\n```\nshould work just fine. Likewise, running `clamdtop` in a different container,\nbut sharing the socket will equally work. While `clamdtop` works well as an\nexample here, it is of course important to realize, this can also be used to\nconnect a mail server to `clamd`.\n\n### TCP\n\nClamAV in the official Docker images is configured to listen for TCP\nconnections on these ports:\n- `clamd`: 3310\n- `clamav-milter`: 7357\n\nWhile `clamd` and `clamav-milter` will listen on the above TCP ports, Docker\ndoes not expose these by default to the host.\nOnly within containers can these ports be accessed. To expose, or \"publish\",\nthese ports to the host, and thus potentially over the (inter)network, the\n`--publish` (or `--publish-all`) flag to `docker run` can be used. While more\nadvanced/secure mappings can be done as per documentation, the basic way is to\n`--publish [<host_port>:]<container_port>` to make the port available to the\nhost.\n```bash\n    --publish 73310:3310 \\\n    --publish 7357\n```\nThe above would thus publish the milter port 3310 as 73310 on the host and the\nclamd port 7357 as a random to the host. The random port can be inspected via\n`docker ps`.\n\n> **Warning**: Extreme caution is to be taken when using `clamd` over TCP as\nthere are no protections on that level. All traffic is un-encrypted. Extra\ncare is to be taken when using TCP communications.\n\n## Container ClamD health-check\n\nDocker has the ability to run simple `ping` checks on services running inside\ncontainers. If `clamd` is running inside the container, Docker will on\noccasion send a `ping` to `clamd` on the default port and wait for the pong\nfrom `clamd`. If `clamd` fails to respond, Docker will treat this as an error.\nThe healthcheck results can be viewed with `docker inspect`.\n\nWhen the container starts up, the health-check also starts up. As loading the\nvirus database can take some time, there is a delay configured in the\n`Dockerfile` to try to avoid this race condition.\n\n## Performance\n\nThe performance impact of running `clamd` in Docker is negligible. Docker is\nin essence just a wrapper around Linux's cgroups and cgroups can be thought of\nas `chroot` or FreeBSD's `jail`. All code is executed on the host without any\ntranslation. Docker does however do some isolation (through cgroups) to isolate\nthe various systems somewhat.\n\nOf course, nothing in life is free, and so there is some overhead. Disk-space\nbeing the most prominent one. The Docker container might have some duplication\nof files for example between the host and the container. Further more, also RAM\nmemory may be duplicated for each instance, as there is no RAM-deduplication.\nBoth of which can be solved on the host however. A filesystem that supports\ndisk-deduplication and a memory manager that does RAM-deduplication.\n\nThe base container in itself is already very small ~16 MiB, at the time of this\nwriting, this cost is still very tiny, where the advantages are very much worth\nthe cost in general.\n\nThe container including the virus database is about ~240 MiB at the time of\nthis writing.\n\n## Bandwidth\n\nPlease, be kind when using 'free' bandwidth, both for the virus databases\nbut also the Docker registry. Try not to download the entire database set or\nthe larger ClamAV database images on a regular basis.\n\n## Advanced container configurations\n\n### Multiple containers sharing the same mounted databases\n\nYou can run multiple containers that share the same database volume, but be\naware that the FreshClam daemons on each would compete to update the databases.\nMost likely, one would update the databases and trigger its ClamD to load the\nnew databases, while the others would be oblivious to the new databases and\nwould continue with the old signatures until the next ClamD self-check.\n\nThis is fine, honestly. It won't take that long before the new signatures are\ndetected by ClamD's self-check and the databases are reloaded automatically.\n\nTo reload the databases on all ClamD containers immediately after an update,\nyou could [disable the FreshClam daemon](#controlling-the-container) when you\nstart the containers. Later, use `docker exec` to perform an update and again\nas needed to have ClamD load updated databases.\n\n> _Note_: This really isn't necessary but you could do this if you wish.\n\nExactly how you orchestrate this will depend on your environment.\nYou might do something along these lines:\n\n1. Create a \"clam_db\" volume, if you don't already have one:\n   ```bash\n   docker volume create clam_db\n   ```\n\n2. Start your containers:\n   ```bash\n   docker run -it --rm \\\n       --name \"clam_container_01\" \\\n       --mount source=clam_db,target=/var/lib/clamav \\\n       --env 'CLAMAV_NO_FRESHCLAMD=true' \\\n       clamav/clamav:unstable_base\n   ```\n   Wait for the first one to download the databases (if it's a new database\n   volume). Then start more:\n   ```bash\n   docker run -it --rm \\\n       --name \"clam_container_02\" \\\n       --mount source=clam_db,target=/var/lib/clamav \\\n       --env 'CLAMAV_NO_FRESHCLAMD=true' \\\n       clamav/clamav:unstable_base\n   ```\n3. Check for updates, as needed:\n   ```bash\n   docker exec -it clam_container_01 freshclam --on-update-execute=EXIT_1 || \\\n   if [ $? == 1 ]; then \\\n       docker exec -it clam_container_01 clamdscan --reload; \\\n       docker exec -it clam_container_02 clamdscan --reload; \\\n   fi\n   ```\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.5263671875,
          "content": "# ClamAV\n\n<p align=\"center\">\n  <img width=\"250\" height=\"250\" src=\"https://raw.githubusercontent.com/Cisco-Talos/clamav/main/logo.png\" alt='Maeve, the ClamAV mascot'>\n</p>\n\n<p align=\"center\">\n  ClamAV® is an open source antivirus engine for detecting trojans, viruses,\n  malware & other malicious threats.\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/Cisco-Talos/clamav/actions\"><img src=\"https://github.com/Cisco-Talos/clamav/workflows/CMake%20Build/badge.svg\" height=\"18\"></a>\n  <a href=\"https://discord.gg/6vNAqWnVgw\"><img src=\"https://img.shields.io/discord/636023333074370595.svg?logo=discord\" height=\"18\"/></a>\n  <a href=\"https://twitter.com/clamav\"><img src=\"https://abs.twimg.com/favicons/twitter.ico\" width=\"18\" height=\"18\"></a>\n</p>\n\n## Documentation & FAQ\n\nClamAV documentation is hosted at [docs.clamav.net](https://docs.clamav.net/).\nThe source archive for each release also includes a copy of the documentation\nfor [offline](docs/html/index.html) reading.\n\nYou can contribute to the documentation by submitting improvements to\n[Cisco-Talos/clamav-documentation](https://github.com/Cisco-Talos/clamav-documentation)\n\n## ClamAV News\n\nFor information about the features in this and prior releases, read\n[the news](NEWS.md).\n\nCatch up on the latest about ClamAV by reading our\n[blog](http://blog.clamav.net) and follow us on Twitter `@clamav`.\n\n## ClamAV Signatures\n\nAnyone can learn to read and write ClamAV signatures. To get started, see our\n[signature writing manual](https://docs.clamav.net/manual/Signatures.html).\n\n## Installation Instructions\n\n### Using Docker\n\nClamAV can be run using Docker. For details, visit to the online manual under\n[\"Docker\"](https://docs.clamav.net/manual/Installing/Docker.html) and check out\nour images on [Docker Hub](https://hub.docker.com/r/clamav/clamav).\n\n### Using a Package Manager\n\nFor help installing from a package manager, refer to the online manual under\n[\"Packages\"](https://docs.clamav.net/manual/Installing/Packages.html).\n\n### Using an Installer\n\nThe following install packages are available for download from\n[clamav.net/downloads](https://www.clamav.net/downloads):\n\n- Linux - Debian and RPM packages for x86_64 and i686. *New in v0.104.*\n- macOS - PKG installer for x86_64 and arm64 (universal). *New in v0.104.*\n- Windows - MSI installers and portable ZIP packages for win32 and x64.\n\nTo learn how to use these packages, refer to the online manual under\n[\"Installing\"](https://docs.clamav.net/manual/Installing.html#installing-with-an-installer).\n\n### Build from Source\n\nFor step-by-step instructions, refer to the online manual:\n- [Unix/Linux/Mac](https://docs.clamav.net/manual/Installing/Installing-from-source-Unix.html)\n- [Windows](https://docs.clamav.net/manual/Installing/Installing-from-source-Windows.html)\n\nThe source archive for each release includes a copy of the documentation for\n[offline](docs/html/UserManual.html) reading.\n\nA reference with all of the available build options can be found in the\n[INSTALL.md](INSTALL.md) file.\n\nYou can find additional advice for developers in the online manual under\n[\"For Developers\"](https://docs.clamav.net/manual/Development.html).\n\n### Upgrading from a previous version\n\nVisit [the FAQ](https://docs.clamav.net/faq/faq-upgrade.html) for tips on how\nto upgrade from a previous version.\n\n## Join the ClamAV Community\n\nThe best way to get in touch with the ClamAV community is to join our\n[mailing lists](https://docs.clamav.net/faq/faq-ml.html).\n\nYou can also join the community on our\n[ClamAV Discord chat server](https://discord.gg/6vNAqWnVgw).\n\n## Want to make a contribution?\n\nThe ClamAV development team welcomes\n[code contributions](https://github.com/Cisco-Talos/clamav),\nimprovements to\n[our documentation](https://github.com/Cisco-Talos/clamav-documentation),\nand also [bug reports](https://github.com/Cisco-Talos/clamav/issues).\n\nThanks for joining us!\n\n## Licensing\n\nClamAV is licensed for public/open source use under the GNU General Public\nLicense, Version 2 (GPLv2).\n\nSee `COPYING.txt` for a copy of the license.\n\n### 3rd Party Code\n\nClamAV contains a number of components that include code copied in part or in\nwhole from 3rd party projects and whose code is not owned by Cisco and which\nare licensed differently than ClamAV. These include:\n\n- Yara: Apache 2.0 license\n  - Yara has since switched to the BSD 3-Clause License;\n    Our source is out-of-date and needs to be updated.\n- 7z / lzma: public domain\n- libclamav's NSIS/NulSoft parser includes:\n  - zlib: permissive free software license\n  - bzip2 / libbzip2: BSD-like license\n- OpenBSD's libc/regex: BSD license\n- file: BSD license\n- str.c: Contains BSD licensed modified-implementations of strtol(), stroul()\n  functions, Copyright (c) 1990 The Regents of the University of California.\n- pngcheck (png.c): MIT/X11-style license\n- getopt.c: MIT license\n- Curl: license inspired by MIT/X, but not identical\n- libmspack: LGPL license\n- UnRAR (libclamunrar): a non-free/restricted open source license\n  - Note: The UnRAR license is incompatible with GPLv2 because it contains a\n    clause that prohibits reverse engineering a RAR compression algorithm from\n    the UnRAR decompression code.\n    For this reason, libclamunrar/libclamunrar_iface is not linked at all with\n    libclamav. It is instead loaded at run-time. If it fails to load, ClamAV\n    will continue running without RAR support.\n\nSee the `COPYING` directory for a copy of the 3rd party project licenses.\n\n## Acknowledgements\n\nCredit for contributions to each release can be found in the [News](NEWS.md).\n\nClamAV is brought to you by\n[the ClamAV Team](https://www.clamav.net/about.html#credits)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 6.8515625,
          "content": "# ClamAV Security Policy\n\n## What constitutes a security issue / vulnerability?\n\nA security issue, or vulnerability, may be any bug that represents a threat to the security of the ClamAV users or any issue that a malicious person could use to cause a Denial of Service (DoS) attack on a network service running ClamAV, such as a mail filter or file upload scanner.\n\nThis definition includes issues where untrusted user input such as scanning a file or loading a signature database`*` may cause a severe memory leak, cause a crash, cause an infinite loop, or provide any other means to impair or disable ClamAV.\n\nA vulnerability also includes all other traditional security vectors such as privilege escalation, remote code execution, information disclosure, etc.\n\nIf you are unsure if your bug is a security issue, please report it as a security issue.\n\n> `*`Bytecode signatures are cross-platform executable plugins. ClamAV will not load bytecode signatures unless they are signed by Cisco-Talos or the user has intentionally enabled unsigned bytecode signatures. Issues that require disabling this security mechanism and then loading unsigned bytecode signatures or loading unsigned bytecode signatures with the ClamBC signature testing tool are not considered to be vulnerabilities.\n\n## Vulnerability reporting best practices.\n\nDo **not** discuss the issue in a public forum, the project mailing lists, in chat, or anywhere else.\n\nDo **not** create a ticket on GitHub Issues. GitHub Issues are public. Submitting any information there on how to exploit ClamAV puts the ClamAV community at risk. If you do report a vulnerability via GitHub issues, your issue will be promptly removed.\n\nSubmit your report by email to psirt@cisco.com. Support requests submitted to Cisco PSIRT that are received via email are typically acknowledged within 48 hours. PSIRT will provide you with additional information on how to proceed. Cisco PSIRT will work with the ClamAV developers to confirm or reject the security vulnerability.\n\nIf the report is rejected, PSIRT or the ClamAV developers will write to you to explain why.\n\nIf the report is accepted, the ClamAV team will craft a fix and may request your help to verify that you find it satisfactory. Cisco will assign a CVE ID and will work with you to identify a disclosure date when the CVE summary will become public and when it will be safe to discuss in public.\n\nPlease allow us at least 90 days (about 3 months) to craft a fix and publish a security patch version with the fix before you tell anyone else about it. This non-disclosure window is critical to the security of your fellow ClamAV users and to the security of other products using libclamav.\n\n## How do I submit my vulnerability report?\n\nSecurity issues should be reported to Cisco PSIRT. The recommended method is to submit in email form to psirt@cisco.com. For details, see: https://tools.cisco.com/security/center/resources/security_vulnerability_policy.html\n\n## What should I include in my vulnerability report?\n\nFollow the same best practices for reporting a regular bug, but do not submit it on GitHub Issues! Instead, craft an email with the detailed report and attached files and submit it to psirt@cisco.com.\n\nFirst, verify that the bug exists in the latest stable patch release. This may not be the latest release provided by your package manager.\n\nAt a minimum include the following:\n\n- Include step-by-step instructions for how to reproduce the issue.\n\n- If the issue is triggered by scanning a specific file, either:\n\n  - Include the file in an encrypted zip along with the password.\n\n  - Include instructions for how to generate a file that can be used to reproduce the issue.\n\n- Describe your working environment:\n\n  - Use the `clamconf` tool provided with ClamAV to describe your configuration. The `clamconf` tool will include operating system name, version, architecture, configuration information, etc. If you cannot use `clamconf`, describe this information in your report by hand.\n\n  - If you found the bug using a fuzzer or some other system, describe the system and provide instructions for how we can reproduce the issue using the same or similar tools.\n\n- If you are reporting a crash when scanning a file with ClamScan or ClamD, include a backtrace. See below for instructions on how to obtain a crash backtrace.\n\n## How to obtain a crash backtrace.\n\nWhen reporting a crash, please send us the backtrace obtained from `gdb`, the GNU Project Debugger, if possible. Here are step by step instructions which will guide you through the process.\n\n### ClamScan\n\nAssuming you get something like this, then you can use these instructions to help collect a backtrace for the report:\n```bash\nclamscan --some-options some_file\n\nSegmentation fault\n```\n\n1. Have the kernel write a core dump.\n\n    For bourne-like shells (e.g. bash):\n    ```bash\n    ulimit -c unlimited\n    ```\n\n    For C-like shells (e.g. tcsh):\n\n    ```sh\n    limit coredumpsize unlimited\n    ```\n\n2. Now you should see the core dumped message:\n    ```bash\n    clamscan --some-options some_file\n\n    Segmentation fault (core dumped)\n    ```\n\n    Looking at your current working directory should reveal a file named core.\n\n3. Load the core file into gdb:\n    ```bash\n    gdb -core=core --args clamscan --some-options some_file\n    ```\n\n    You should now see the gdb prompt, as: `(gdb)`\n\n4. Just use the `bt` command at the prompt to make gdb print a full backtrace. Copy and paste it into the bug report. You can use the `q` command to leave gdb.\n\n### ClamD\n\nFollow these instructions to attach gdb to a running ClamD process so you can record a crash backtrace.\n\n1. Use `ps` to get the PID of ClamD (first number from the left):\n    ```bash\n    ps -aux (or ps -elf on SysV)\n\n    clamav 24897 0.0 1.9 38032 10068 ? S Jan13 0:00 clamd\n    ```\n\n2. Attach gdb to the running process. *Replace `24897` with the pid of ClamD and adjust the path of ClamD as needed*:\n    ```bash\n    gdb /usr/sbin/clamd 24897\n    ```\n\n    You should now get the gdb prompt, as: `(gdb)`\n\n3. If you want ClamD to continue running (i.e. until a segmentation fault occurs), issue the `continue gdb` command. Then perform the commands to trigger the crash (like scanning a specific file with ClamDScan).\n\n4. When the crash occurs, gdb will return to its prompt. As with the ClamScan instructions, use the `bt` command at the prompt to make gdb print a full backtrace. Copy and paste it into the bug report. You can use the `q` command to leave gdb.\n\n### GDB Commands\n\n- `bt` - will give a backtrace for the current thread.\n\n- `info threads` - will tell you how many threads there are.\n\n- `thread n` - will change to the specified thread, after which you can use the bt command again to get it’s backtrace.\n\nSo, you basically want to use `info threads` to get the number of threads and their id numbers; and for each thread do `thread id_number`; then `bt`. Exit from gdb with the `quit` command. Reply `y` to the question about the program still running.\n"
        },
        {
          "name": "clam-format",
          "type": "blob",
          "size": 3.7177734375,
          "content": "#!/bin/bash\n\nclang-format-16 -style='{ Language: Cpp, UseTab: Never, IndentWidth: 4, AlignTrailingComments: true, AlignConsecutiveAssignments: true, AlignAfterOpenBracket: true, AlignEscapedNewlines: Left, AlignOperands: true, AllowShortFunctionsOnASingleLine: Empty, AllowShortIfStatementsOnASingleLine: true, AllowShortLoopsOnASingleLine: true, BreakBeforeBraces: Linux, BreakBeforeTernaryOperators: true, ColumnLimit: 0, FixNamespaceComments: true, SortIncludes: false, MaxEmptyLinesToKeep: 1, SpaceBeforeParens: ControlStatements, IndentCaseLabels: true, DerivePointerAlignment: true }' -dump-config > .clang-format\n\nclang-format-16 -i -verbose clamav-milter/*.c\nclang-format-16 -i -verbose clamav-milter/*.h\nclang-format-16 -i -verbose clambc/*.c\nclang-format-16 -i -verbose clambc/*.h\nclang-format-16 -i -verbose clamconf/*.c\nclang-format-16 -i -verbose clamconf/*.h\nclang-format-16 -i -verbose clamd/*.c\nclang-format-16 -i -verbose clamd/*.h\nclang-format-16 -i -verbose clamdscan/*.c\nclang-format-16 -i -verbose clamdscan/*.h\nclang-format-16 -i -verbose clamdtop/*.c\nclang-format-16 -i -verbose clamdtop/*.h\nclang-format-16 -i -verbose clamscan/*.c\nclang-format-16 -i -verbose clamscan/*.h\nclang-format-16 -i -verbose clamsubmit/*.c\nclang-format-16 -i -verbose clamsubmit/*.h\nclang-format-16 -i -verbose examples/*.c\nclang-format-16 -i -verbose examples/*.h\nclang-format-16 -i -verbose examples/fileprop_analysis/*.c\nclang-format-16 -i -verbose examples/fileprop_analysis/old/*.c\nclang-format-16 -i -verbose freshclam/*.c\nclang-format-16 -i -verbose freshclam/*.h\nclang-format-16 -i -verbose libclamav/*.c\nclang-format-16 -i -verbose libclamav/*.h\nclang-format-16 -i -verbose libclamav/jsparse/*.c\nclang-format-16 -i -verbose libclamav/jsparse/*.h\nclang-format-16 -i -verbose libclamav/lzw/*.c\nclang-format-16 -i -verbose libclamav/lzw/*.h\nclang-format-16 -i -verbose libclamav/nsis/nulsft.*\nclang-format-16 -i -verbose libclamav/c++/*.cpp\nclang-format-16 -i -verbose libclamav/c++/*.h\nclang-format-16 -i -verbose libclamunrar_iface/*.cpp\nclang-format-16 -i -verbose libclamunrar_iface/*.h\nclang-format-16 -i -verbose libfreshclam/*.c\nclang-format-16 -i -verbose libfreshclam/*.h\nclang-format-16 -i -verbose common/*.c\nclang-format-16 -i -verbose common/*.h\nclang-format-16 -i -verbose sigtool/*.c\nclang-format-16 -i -verbose sigtool/*.h\nclang-format-16 -i -verbose clamonacc/*.c\nclang-format-16 -i -verbose clamonacc/*.h\nclang-format-16 -i -verbose clamonacc/*/*.c\nclang-format-16 -i -verbose clamonacc/*/*.h\nclang-format-16 -i -verbose unit_tests/*.c\nclang-format-16 -i -verbose unit_tests/*.h\nclang-format-16 -i -verbose win32/compat/*.c\nclang-format-16 -i -verbose win32/compat/*.h\n\nrustfmt `find . -name \"*.rs\"`\n\n# Undo changes to specific files that we don't really want to reformat\ngit checkout libclamav/iana_cctld.h\ngit checkout libclamav/bytecode_api_decl.c\ngit checkout libclamav/bytecode_api_impl.h\ngit checkout libclamav/bytecode_hooks.h\ngit checkout libclamav/rijndael.c\ngit checkout libclamav/rijndael.h\ngit checkout libclamav/yara_lexer.c\ngit checkout libclamav/yara_grammar.c\ngit checkout libclamav/yara_grammar.h\ngit checkout libclamav/yara_exec.c\ngit checkout libclamav/yara_exec.h\ngit checkout libclamav/yara_compiler.h\ngit checkout libclamav/yara_compiler.h\ngit checkout libclamav/yara_parser.h\ngit checkout libclamav/yara_hash.c\ngit checkout libclamav/yara_hash.h\ngit checkout libclamav/yara_arena.c\ngit checkout libclamav/yara_arena.h\ngit checkout libclamav/inffixed64.h\ngit checkout libclamav/inflate64.h\ngit checkout libclamav/inflate64.c\ngit checkout libclamav/inflate64_priv.h\ngit checkout libclamav/queue.h\ngit checkout clamonacc/c-thread-pool/thpool.c\ngit checkout clamonacc/c-thread-pool/thpool.h\ngit checkout clamonacc/misc/fts.c\ngit checkout clamonacc/misc/priv_fts.h\n"
        },
        {
          "name": "clamav-config.h.cmake.in",
          "type": "blob",
          "size": 15.7392578125,
          "content": "/* clamav-config.h.cmake.in.  Autoconf compatibility layer for CMake.  */\n\n/* Define if building universal (internal helper macro) */\n#cmakedefine AC_APPLE_UNIVERSAL_BUILD 1\n\n/* mmap flag for anonymous maps */\n#cmakedefine ANONYMOUS_MAP @ANONYMOUS_MAP@\n\n/* bind 8 compatibility mode, required on some systems to get T_TXT, etc from nameser_compat.h */\n#cmakedefine BIND_8_COMPAT 1\n\n/* name of the clamav group */\n#define CLAMAVGROUP \"@CLAMAV_GROUP@\"\n\n/* name of the clamav user */\n#define CLAMAVUSER \"@CLAMAV_USER@\"\n\n/* enable debugging */\n#cmakedefine CL_DEBUG 1\n\n/* enable experimental code */\n#cmakedefine CL_EXPERIMENTAL 1\n\n/* thread safe */\n#cmakedefine CL_THREAD_SAFE 1\n\n/* curses header location */\n#cmakedefine CURSES_INCLUDE @CURSES_INCLUDE@\n\n/* os is aix */\n#cmakedefine C_AIX 1\n\n/* os is beos */\n#cmakedefine C_BEOS 1\n\n/* Increase thread stack size. */\n#cmakedefine C_BIGSTACK 1\n\n/* os is bsd flavor */\n#cmakedefine C_BSD 1\n\n/* os is darwin */\n#cmakedefine C_DARWIN 1\n\n/* target is gnu-hurd */\n#cmakedefine C_GNU_HURD 1\n\n/* os is hpux */\n#cmakedefine C_HPUX 1\n\n/* os is interix */\n#cmakedefine C_INTERIX 1\n\n/* os is irix */\n#cmakedefine C_IRIX 1\n\n/* target is kfreebsd-gnu */\n#cmakedefine C_KFREEBSD_GNU 1\n\n/* target is linux */\n#cmakedefine C_LINUX 1\n\n/* os is OS/2 */\n#cmakedefine C_OS2 1\n\n/* os is osf/tru64 */\n#cmakedefine C_OSF 1\n\n/* os is QNX 6.x.x */\n#cmakedefine C_QNX6 1\n\n/* os is solaris */\n#cmakedefine C_SOLARIS 1\n\n#ifndef _WIN32\n/* Path to virus database directory. */\n#define DATADIR \"@DATADIR@\"\n\n/* where to look for the config file */\n#define CONFDIR \"@CONFDIR@\"\n#endif\n\n/* Have sys/fanotify.h */\n#cmakedefine HAVE_SYS_FANOTIFY_H 1\n\n/* whether _XOPEN_SOURCE needs to be defined for fd passing to work */\n#cmakedefine FDPASS_NEED_XOPEN 1\n\n/* file i/o buffer size */\n#cmakedefine FILEBUFF @FILEBUFF@\n\n/* scan buffer size */\n#cmakedefine SCANBUFF @SCANBUFF@\n\n/* enable workaround for broken DNS servers */\n#cmakedefine FRESHCLAM_DNS_FIX 1\n\n/* use \"Cache-Control: no-cache\" in freshclam */\n#cmakedefine FRESHCLAM_NO_CACHE 1\n\n/* attrib aligned */\n#cmakedefine HAVE_ATTRIB_ALIGNED 1\n\n/* attrib packed */\n#cmakedefine HAVE_ATTRIB_PACKED 1\n\n/* Define to 1 if you have the `ctime_r' function. */\n#cmakedefine HAVE_CTIME_R 1\n\n/* ctime_r takes 2 arguments */\n#cmakedefine HAVE_CTIME_R_2 1\n\n/* ctime_r takes 3 arguments */\n#cmakedefine HAVE_CTIME_R_3 1\n\n/* Define to 1 if you have the declaration of `cygwin_conv_path', and to 0 if\n   you don't. */\n#cmakedefine HAVE_DECL_CYGWIN_CONV_PATH 1\n\n/* Define to 1 if you have the <dirent.h> header file. */\n#cmakedefine HAVE_DIRENT_H 1\n\n/* Define if you have the GNU dld library. */\n#cmakedefine HAVE_DLD 1\n\n/* Define to 1 if you have the <dld.h> header file. */\n#cmakedefine HAVE_DLD_H 1\n\n/* Define to 1 if you have the `dlerror' function. */\n#cmakedefine HAVE_DLERROR 1\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n#cmakedefine HAVE_DLFCN_H 1\n\n/* Define to 1 if you have the <dl.h> header file. */\n#cmakedefine HAVE_DL_H 1\n\n/* Define if you have the _dyld_func_lookup function. */\n#cmakedefine HAVE_DYLD 1\n\n/* Define to 1 if you have the `enable_extended_FILE_stdio' function. */\n#cmakedefine HAVE_ENABLE_EXTENDED_FILE_STDIO 1\n\n/* Define to 1 if the system has the type `error_t'. */\n#cmakedefine HAVE_ERROR_T 1\n\n/* have working file descriptor passing support */\n#cmakedefine HAVE_FD_PASSING 1\n\n/* Define to 1 if fseeko (and presumably ftello) exists and is declared. */\n#cmakedefine HAVE_FSEEKO 1\n\n/* have getaddrinfo() */\n#cmakedefine HAVE_GETADDRINFO 1\n\n/* Define to 1 if you have the `getnameinfo' function. */\n#cmakedefine HAVE_GETNAMEINFO 1\n\n/* Define to 1 if getpagesize() is available */\n#cmakedefine HAVE_GETPAGESIZE 1\n\n/* Define to 1 if you have the <grp.h> header file. */\n#cmakedefine HAVE_GRP_H 1\n\n/* Define if you have the iconv() function and it works. */\n#cmakedefine HAVE_ICONV 1\n\n/* Define to 1 if you have the `initgroups' function. */\n#cmakedefine HAVE_INITGROUPS 1\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#cmakedefine HAVE_INTTYPES_H 1\n\n/* Define to 1 if you have the <inttypes.h> header file (for libjson-c). */\n#cmakedefine JSON_C_HAVE_INTTYPES_H 1\n\n/* Define to '1' if you have the check.h library */\n#cmakedefine HAVE_LIBCHECK 1\n\n/* Define to '1' if you have the ncurses.h library */\n#cmakedefine HAVE_LIBNCURSES 1\n\n/* Define to '1' if you have the curses.h library */\n#cmakedefine HAVE_LIBPDCURSES 1\n\n/* Define to 1 if you have the <limits.h> header file. */\n#cmakedefine HAVE_LIMITS_H 1\n\n/* Define to 1 if you have the `madvise' function. */\n#cmakedefine HAVE_MADVISE 1\n\n/* Define to 1 if you have the `mallinfo' function. */\n#cmakedefine HAVE_MALLINFO 1\n\n/* Define to 1 if you have the <malloc.h> header file. */\n#cmakedefine HAVE_MALLOC_H 1\n\n/* Define to 1 if you have the `mkstemp' function. */\n#cmakedefine HAVE_MKSTEMP 1\n\n/* Define to 1 if you have a working `mmap' system call that supports\n   MAP_PRIVATE. */\n#cmakedefine HAVE_MMAP 1\n\n/* Define to 1 if you have the `poll' function. */\n#cmakedefine HAVE_POLL 1\n\n/* Define to 1 if you have the <poll.h> header file. */\n#cmakedefine HAVE_POLL_H 1\n\n/* \"pragma pack\" */\n#cmakedefine HAVE_PRAGMA_PACK 1\n\n/* \"pragma pack hppa/hp-ux style\" */\n#cmakedefine HAVE_PRAGMA_PACK_HPPA 1\n\n/* Define if libtool can extract symbol lists from object files. */\n#cmakedefine HAVE_PRELOADED_SYMBOLS 1\n\n/* Define to 1 if you have the <pthread.h> header file */\n#cmakedefine HAVE_PTHREAD_H 1\n\n/* Define to 1 if you have the <pwd.h> header file. */\n#cmakedefine HAVE_PWD_H 1\n\n/* Define to 1 if you have the `readdir' function. */\n#cmakedefine HAVE_READDIR 1\n\n/* Define to 1 if you have the `recvmsg' function. */\n#cmakedefine HAVE_RECVMSG 1\n\n/* have resolv.h */\n#cmakedefine HAVE_RESOLV_H 1\n\n/* Define signed right shift implementation */\n#cmakedefine HAVE_SAR 1\n\n/* Define to 1 if you have the `sched_yield' function. */\n#cmakedefine HAVE_SCHED_YIELD 1\n\n/* Define to 1 if you have the `sendmsg' function. */\n#cmakedefine HAVE_SENDMSG 1\n\n/* Define to 1 if you have the `setgroups' function. */\n#cmakedefine HAVE_SETGROUPS 1\n\n/* Define to 1 if you have the `setsid' function. */\n#cmakedefine HAVE_SETSID 1\n\n/* Define to 1 if you have the `snprintf' function. */\n#cmakedefine HAVE_SNPRINTF 1\n\n/* enable stat64 */\n#cmakedefine HAVE_STAT64 1\n\n/* Define to 1 if you have the <stdbool.h> header file. */\n#cmakedefine HAVE_STDBOOL_H 1\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#cmakedefine HAVE_STDINT_H 1\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#cmakedefine HAVE_STDLIB_H 1\n\n/* Define to 1 if you have the `strcasestr' function. */\n#cmakedefine HAVE_STRCASESTR 1\n\n/* Define to 1 if you have the `strerror_r' function. */\n#cmakedefine HAVE_STRERROR_R 1\n\n/* Define to 1 if you have the <strings.h> header file. */\n#cmakedefine HAVE_STRINGS_H 1\n\n/* Define to 1 if you have the <string.h> header file. */\n#cmakedefine HAVE_STRING_H 1\n\n/* Define to 1 if you have the `strlcat' function. */\n#cmakedefine HAVE_STRLCAT 1\n\n/* Define to 1 if you have the `strlcpy' function. */\n#cmakedefine HAVE_STRLCPY 1\n\n/* Define to 1 if you have the `strndup' function. */\n#cmakedefine HAVE_STRNDUP 1\n\n/* using internal strn functions */\n#cmakedefine HAVE_STRNI 1\n\n/* Define to 1 if you have the `strnlen' function. */\n#cmakedefine HAVE_STRNLEN 1\n\n/* Define to 1 if you have the `strnstr' function. */\n#cmakedefine HAVE_STRNSTR 1\n\n/* Define to 1 if sysconf(_SC_PAGESIZE) is available */\n#cmakedefine HAVE_SYSCONF_SC_PAGESIZE 1\n\n/* Define to 1 if you have the `sysctlbyname' function. */\n#cmakedefine HAVE_SYSCTLBYNAME 1\n\n/* systemd is supported */\n#cmakedefine HAVE_SYSTEMD 1\n\n/* Use private fts() implementation which is LFS safe */\n#cmakedefine HAVE_SYSTEM_LFS_FTS 1\n\n/* Define to 1 if you have the <sys/cdefs.h> header file. */\n#cmakedefine HAVE_SYS_CDEFS_H 1\n\n/* Define to 1 if you have the <sys/dl.h> header file. */\n#cmakedefine HAVE_SYS_DL_H 1\n\n/* Define to 1 if you have the <sys/filio.h> header file. */\n#cmakedefine HAVE_SYS_FILIO_H 1\n\n/* Define to 1 if you have the <sys/inttypes.h> header file. */\n#cmakedefine HAVE_SYS_INTTYPES_H 1\n\n/* Define to 1 if you have the <sys/int_types.h> header file. */\n#cmakedefine HAVE_SYS_INT_TYPES_H 1\n\n/* Define to 1 if you have the <sys/mman.h> header file. */\n#cmakedefine HAVE_SYS_MMAN_H 1\n\n/* Define to 1 if you have the <sys/param.h> header file. */\n#cmakedefine HAVE_SYS_PARAM_H 1\n\n/* Define to 1 if you have the <sys/queue.h> header file. */\n#cmakedefine HAVE_SYS_QUEUE_H 1\n\n/* \"have <sys/select.h>\" */\n#cmakedefine HAVE_SYS_SELECT_H 1\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#cmakedefine HAVE_SYS_STAT_H 1\n\n/* Define to 1 if you have the <sys/times.h> header file. */\n#cmakedefine HAVE_SYS_TIMES_H 1\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#cmakedefine HAVE_SYS_TYPES_H 1\n\n/* Define to 1 if you have the <sys/uio.h> header file. */\n#cmakedefine HAVE_SYS_UIO_H 1\n\n/* Define to 1 if you have the <termios.h> header file. */\n#cmakedefine HAVE_TERMIOS_H 1\n\n/* Define to 1 if you have the `timegm' function. */\n#cmakedefine HAVE_TIMEGM 1\n\n/* Define this if uname(2) is POSIX */\n#cmakedefine HAVE_UNAME_SYSCALL 1\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#cmakedefine HAVE_UNISTD_H 1\n\n/* Define to 1 if you have the `vsnprintf' function. */\n#cmakedefine HAVE_VSNPRINTF 1\n\n/* This value is set to 1 to indicate that the system argz facility works */\n#cmakedefine HAVE_WORKING_ARGZ 1\n\n/* yara sources are compiled in */\n#define HAVE_YARA 1\n\n/* For internal use only - DO NOT DEFINE */\n#cmakedefine HAVE__INTERNAL__SHA_COLLECT 1\n\n/* Define as const if the declaration of iconv() needs const. */\n#cmakedefine ICONV_CONST @ICONV_CONST@\n\n/* Define if UNRAR is linked instead of loaded. */\n#cmakedefine UNRAR_LINKED 1\n\n/* \"Full clamav library version number\" */\n#define LIBCLAMAV_FULLVER \"@LIBCLAMAV_VERSION@\"\n\n/* \"Major clamav library version number\" */\n#define LIBCLAMAV_MAJORVER @LIBCLAMAV_SOVERSION@\n\n/* \"Full freshclam library version number\" */\n#define LIBFRESHCLAM_FULLVER \"@LIBFRESHCLAM_VERSION@\"\n\n/* \"Major freshclam library version number\" */\n#define LIBFRESHCLAM_MAJORVER @LIBFRESHCLAM_SOVERSION@\n\n/* The archive extension */\n#define LT_LIBEXT \"@CMAKE_STATIC_LIBRARY_SUFFIX@\"\n\n/* The archive prefix */\n#define LT_LIBPREFIX \"@CMAKE_STATIC_LIBRARY_PREFIX@\"\n\n/* Define to the extension used for runtime loadable modules, say, \".so\" or \".dylib\". */\n#define LT_MODULE_EXT \"@CMAKE_SHARED_LIBRARY_SUFFIX@\"\n\n/* Define to the name of the environment variable that determines the run-time\n   module search path. */\n#ifdef _WIN32\n#define SEARCH_LIBDIR \"@CMAKE_INSTALL_PREFIX@\"\n#else\n#define SEARCH_LIBDIR \"@CMAKE_INSTALL_FULL_LIBDIR@\"\n#endif\n\n/* Define to the shared library suffix, say, \".dylib\". */\n#define LT_SHARED_EXT \"@CMAKE_SHARED_LIBRARY_SUFFIX@\"\n\n/* disable assertions */\n#cmakedefine NDEBUG 1\n\n/* Define if dlsym() requires a leading underscore in symbol names. */\n#cmakedefine NEED_USCORE 1\n\n/* bzip functions do not have bz2 prefix */\n#cmakedefine NOBZ2PREFIX 1\n\n/* \"no fd_set\" */\n#cmakedefine NO_FD_SET 1\n\n/* Name of package */\n#define PACKAGE \"@PACKAGE_NAME@\"\n\n/* Define to the address where bug reports for this package should be sent. */\n#cmakedefine PACKAGE_BUGREPORT \"@PACKAGE_BUGREPORT@\"\n\n/* Define to the full name of this package. */\n#cmakedefine PACKAGE_NAME \"@PACKAGE_NAME@\"\n\n/* Define to the full name and version of this package. */\n#cmakedefine PACKAGE_STRING \"@PACKAGE_STRING@\"\n\n/* Define to the one symbol short name of this package. */\n#cmakedefine PACKAGE_TARNAME \"@PACKAGE_TARNAME@\"\n\n/* Define to the home page for this package. */\n#cmakedefine PACKAGE_URL \"@PACKAGE_URL@\"\n\n/* Define to the version of this package. */\n#cmakedefine PACKAGE_VERSION \"@PACKAGE_VERSION@\"\n\n/* Libprelude support enabled */\n#cmakedefine PRELUDE 1\n\n/* Define whether application use libtool >= 2.0 */\n#cmakedefine PRELUDE_APPLICATION_USE_LIBTOOL2 1\n\n/* Define to if the `setpgrp' function takes no argument. */\n#cmakedefine SETPGRP_VOID 1\n\n/* The number of bytes in type int */\n#cmakedefine SIZEOF_INT @SIZEOF_INT@\n\n/* The number of bytes in type long */\n#cmakedefine SIZEOF_LONG @SIZEOF_LONG@\n\n/* The number of bytes in type long long */\n#cmakedefine SIZEOF_LONG_LONG @SIZEOF_LONG_LONG@\n\n/* The number of bytes in type short */\n#cmakedefine SIZEOF_SHORT @SIZEOF_SHORT@\n\n/* The number of bytes in type void * */\n#define SIZEOF_VOID_P @CMAKE_SIZEOF_VOID_P@\n\n/* Define to if you have the ANSI C header files. */\n#cmakedefine STDC_HEADERS 1\n\n/* enable memory pools */\n#cmakedefine USE_MPOOL 1\n\n/* use syslog */\n#cmakedefine USE_SYSLOG 1\n\n/* Enable extensions on AIX 3, Interix.  */\n#ifndef _ALL_SOURCE\n#cmakedefine _ALL_SOURCE 1\n#endif\n/* Enable GNU extensions on systems that have them.  */\n#ifndef _GNU_SOURCE\n#cmakedefine _GNU_SOURCE 1\n#endif\n/* Enable threading extensions on Solaris.  */\n#ifndef _POSIX_PTHREAD_SEMANTICS\n#cmakedefine _POSIX_PTHREAD_SEMANTICS 1\n#endif\n/* Enable extensions on HP NonStop.  */\n#ifndef _TANDEM_SOURCE\n#cmakedefine _TANDEM_SOURCE 1\n#endif\n/* Enable general extensions on Solaris.  */\n#ifndef __EXTENSIONS__\n#cmakedefine __EXTENSIONS__ 1\n#endif\n\n/* LLVM version (if found) */\n#cmakedefine LLVM_VERSION @LLVM_VERSION_MAJOR@@LLVM_VERSION_MINOR@\n\n/* Version number of package */\n#cmakedefine VERSION \"@PACKAGE_VERSION@\"\n\n/* Version suffix for package */\n#define VERSION_SUFFIX \"@VERSION_SUFFIX@\"\n\n/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n   significant byte first (like Motorola and SPARC, unlike Intel). */\n#if defined AC_APPLE_UNIVERSAL_BUILD\n# if defined __BIG_ENDIAN__\n#  define WORDS_BIGENDIAN 1\n# endif\n#else\n# ifndef WORDS_BIGENDIAN\n#cmakedefine WORDS_BIGENDIAN 1\n# endif\n#endif\n\n/* Define to 1 if `lex' declares `yytext' as a `char *' by default, not a\n   `char[]'. */\n#cmakedefine YYTEXT_POINTER 1\n\n/* Enable large inode numbers on Mac OS X 10.5.  */\n#ifndef _DARWIN_USE_64_BIT_INODE\n# define _DARWIN_USE_64_BIT_INODE 1\n#endif\n\n/* Number of bits in a file offset, on hosts where this is settable. */\n#cmakedefine _FILE_OFFSET_BITS @_FILE_OFFSET_BITS@\n\n/* Define to 1 to make fseeko visible on some hosts (e.g. glibc 2.2). */\n#cmakedefine _LARGEFILE_SOURCE 1\n\n/* Define for large files, on AIX-style hosts. */\n#cmakedefine _LARGE_FILES 1\n\n/* Define to 1 if on MINIX. */\n#cmakedefine _MINIX 1\n\n/* Define to 2 if the system does not provide POSIX.1 features except with\n   this defined. */\n#cmakedefine _POSIX_1_SOURCE 2\n\n/* POSIX compatibility */\n#cmakedefine _POSIX_PII_SOCKET 1\n\n/* Define to 1 if you need to in order for `stat' and other things to work. */\n#cmakedefine _POSIX_SOURCE 1\n\n/* thread safe */\n#cmakedefine _REENTRANT 1\n\n/* Define so that glibc/gnulib argp.h does not typedef error_t. */\n#cmakedefine __error_t_defined 1\n\n/* Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  */\n#ifndef __cplusplus\n#define inline @INLINE_KEYWORD@\n#endif\n\n/* Define to `int' if <sys/types.h> does not define. */\n#ifndef SSIZE_T_DEFINED\n   #if defined(_MSC_VER)\n      #include <BaseTsd.h>\n      typedef SSIZE_T ssize_t;\n   #else\n      @SSIZE_T_DEF@\n   #endif\n   # define SSIZE_T_DEFINED\n#endif\n\n/* Define to `long int' if <sys/types.h> does not define. */\n#ifndef OFF_T_DEFINED\n   @OFF_T_DEF@\n   #define OFF_T_DEFINED\n#endif\n\n/* Define to the equivalent of the C99 'restrict' keyword, or to\n   nothing if this is not supported.  Do not define if restrict is\n   supported directly.  */\n#cmakedefine restrict @restrict@\n\n/* Work around a bug in Sun C++: it does not support _Restrict or\n   __restrict__, even though the corresponding Sun C compiler ends up with\n   \"#define restrict _Restrict\" or \"#define restrict __restrict__\" in the\n   previous line.  Perhaps some future version of Sun C++ will work with\n   restrict; if so, hopefully it defines __RESTRICT like Sun C does.  */\n#if defined __SUNPRO_CC && !defined __RESTRICT\n# define _Restrict\n# define __restrict__\n#endif\n\n/* Define to \"int\" if <sys/socket.h> does not define. */\n#cmakedefine socklen_t @socklen_t@\n\n#include \"platform.h\"\n"
        },
        {
          "name": "clamav-config.in",
          "type": "blob",
          "size": 0.9990234375,
          "content": "#! /bin/sh\n# Originally from libxml, Copyright (C) Daniel Veillard\n\nprefix=@prefix@\nexec_prefix=@exec_prefix@\nincludedir=@includedir@\nlibdir=@libdir@\n\nusage()\n{\n    cat <<EOF\nUsage: clamav-config [OPTION]\n\nKnown values for OPTION are:\n\n  --prefix=DIR\t\tchange libclamav prefix [default $prefix]\n  --libs\t\tprint library linking information\n  --cflags\t\tprint pre-processor and compiler flags\n  --help\t\tdisplay this help and exit\n  --version\t\toutput version information\nEOF\n\n    exit $1\n}\n\nif test $# -eq 0; then\n    usage 1\nfi\n\ncflags=false\nlibs=false\n\nwhile test $# -gt 0; do\n    case \"$1\" in\n    -*=*) optarg=`echo \"$1\" | sed 's/[-_a-zA-Z0-9]*=//'` ;;\n    *) optarg= ;;\n    esac\n\n    case \"$1\" in\n    --prefix=*)\n\tprefix=$optarg\n\t;;\n\n    --prefix)\n\techo $prefix\n\t;;\n\n    --version)\n\techo @VERSION@\n\texit 0\n\t;;\n\n    --help)\n\tusage 0\n\t;;\n\n    --cflags)\n       \techo -I@includedir@ @CFLAGS@\n       \t;;\n\n    --libs)\n       \techo -L@libdir@ @LIBCLAMAV_LIBS@\n       \t;;\n\n    *)\n\tusage\n\texit 1\n\t;;\n    esac\n    shift\ndone\n\nexit 0\n\n"
        },
        {
          "name": "clamav-milter",
          "type": "tree",
          "content": null
        },
        {
          "name": "clamav-types.h.in",
          "type": "blob",
          "size": 1.8525390625,
          "content": "/*\n *  Copyright (C) 2013-2024 Cisco Systems, Inc. and/or its affiliates. All rights reserved.\n *  Copyright (C) 2007-2013 Sourcefire, Inc.\n *\n *  Authors: Tomasz Kojm, Micah Snyder\n *\n *  @GENERATE_WARNING@\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License version 2 as\n *  published by the Free Software Foundation.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n *  MA 02110-1301, USA.\n */\n\n#ifndef __CLAMAV_TYPES_H\n#define __CLAMAV_TYPES_H\n\n@INT_TYPES_HEADER@\n\n@INT8_DEF@\n@UINT8_DEF@\n\n@INT16_DEF@\n@UINT16_DEF@\n\n@INT32_DEF@\n@UINT32_DEF@\n\n@INT64_DEF@\n@UINT64_DEF@\n\n/* Ensure we have print format types */\n/* PRIu64 should be in <inttypes.h> */\n#ifndef _SF64_PREFIX\n    @DEFINE_SF64_PREFIX@\n#endif\n\n#ifndef PRIu64\n    #define PRIu64 _SF64_PREFIX \"u\"\n#endif\n#ifndef PRIx64\n    #define PRIx64 _SF64_PREFIX \"i\"\n#endif\n#ifndef PRIi64\n    #define PRIi64 _SF64_PREFIX \"x\"\n#endif\n\n#ifndef STDu64\n    #define STDu64 \"%\" PRIu64\n    #define STDi64 \"%\" PRIi64\n    #define STDx64 \"%\" PRIx64\n#endif\n\n/* PRIu32 should also be in <inttypes.h> */\n#ifndef PRIu32\n    #ifndef _SF32_PREFIX\n        @DEFINE_SF32_PREFIX@\n    #endif\n\n    #define PRIu32 _SF32_PREFIX \"u\"\n    #define PRIi32 _SF32_PREFIX \"i\"\n    #define PRIx32 _SF32_PREFIX \"x\"\n#endif\n\n#ifndef STDu32\n    #define STDu32 \"%\" PRIu32\n    #define STDi32 \"%\" PRIi32\n    #define STDx32 \"%\" PRIx32\n#endif\n\n#ifndef INT32_MAX\n    #define INT32_MAX 2147483647\n#endif\n\n#endif\n"
        },
        {
          "name": "clamav-version.h.in",
          "type": "blob",
          "size": 2.0556640625,
          "content": "/*\n *  Copyright (C) 2019-2024 Cisco Systems, Inc. and/or its affiliates. All rights reserved.\n *\n *  Authors: Micah Snyder\n *\n *  @GENERATE_WARNING@\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License version 2 as\n *  published by the Free Software Foundation.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n *  MA 02110-1301, USA.\n */\n\n#ifndef CLAMAV_VER_H\n#define CLAMAV_VER_H\n\n/**\n * @macro\n * Version number of the clamav package release\n */\n#define CLAMAV_VERSION \"@PACKAGE_VERSION@\"\n\n/**\n * @macro\n * Numerical representation of the version number of the clamav package\n * release. This is a 24 bit number with 8 bits for major number, 8 bits\n * for minor and 8 bits for patch. Version 1.2.3 becomes 0x010203.\n */\n#define CLAMAV_VERSION_NUM @PACKAGE_VERSION_NUM@\n\n/**\n * @macro\n * Version number of the clamav library release\n */\n#define LIBCLAMAV_VERSION \"@LIBCLAMAV_VERSION@\"\n\n/**\n * @macro\n * Numerical representation of the version number of the libclamav library\n * release. This is a 24 bit number with 8 bits for major number, 8 bits\n * for minor and 8 bits for patch. Version 1.2.3 becomes 0x010203.\n */\n#define LIBCLAMAV_VERSION_NUM @LIBCLAMAV_VERSION_NUM@\n\n/**\n * @macro\n * Version number of the clamav library release\n */\n#define LIBFRESHCLAM_VERSION \"@LIBFRESHCLAM_VERSION@\"\n\n/**\n * @macro\n * Numerical representation of the version number of the libfreshclam library\n * release. This is a 24 bit number with 8 bits for major number, 8 bits\n * for minor and 8 bits for patch. Version 1.2.3 becomes 0x010203.\n */\n#define LIBFRESHCLAM_VERSION_NUM @LIBFRESHCLAM_VERSION_NUM@\n\n#endif /* CLAMAV_VER_H */\n"
        },
        {
          "name": "clambc",
          "type": "tree",
          "content": null
        },
        {
          "name": "clamconf",
          "type": "tree",
          "content": null
        },
        {
          "name": "clamd",
          "type": "tree",
          "content": null
        },
        {
          "name": "clamdscan",
          "type": "tree",
          "content": null
        },
        {
          "name": "clamdtop",
          "type": "tree",
          "content": null
        },
        {
          "name": "clamonacc",
          "type": "tree",
          "content": null
        },
        {
          "name": "clamscan",
          "type": "tree",
          "content": null
        },
        {
          "name": "clamsubmit",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "freshclam",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "libclamav.pc.in",
          "type": "blob",
          "size": 0.236328125,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: libclamav\nDescription: A GPL virus scanner\nVersion: @PACKAGE_VERSION@\nLibs: -L${libdir} -lclamav\nLibs.private: @LIBCLAMAV_LIBS@\nCflags: -I${includedir}\n\n"
        },
        {
          "name": "libclamav",
          "type": "tree",
          "content": null
        },
        {
          "name": "libclamav_rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "libclammspack",
          "type": "tree",
          "content": null
        },
        {
          "name": "libclamunrar",
          "type": "tree",
          "content": null
        },
        {
          "name": "libclamunrar_iface",
          "type": "tree",
          "content": null
        },
        {
          "name": "libfreshclam",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 24.87890625,
          "content": null
        },
        {
          "name": "platform.h.in",
          "type": "blob",
          "size": 3.072265625,
          "content": "#ifndef __PLATFORM_H\n#define __PLATFORM_H\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <io.h>\n#include <fcntl.h>\n#include <direct.h>\n#include <Ws2tcpip.h>\n#include <process.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#include \"gettimeofday.h\"\n#include \"snprintf.h\"\n#include \"net.h\"\n#include \"w32_errno.h\"\n#include \"w32_stat.h\"\n#include \"random.h\"\n#include \"utf8_util.h\"\n\n#ifdef __cplusplus\n}\n#else\ntypedef unsigned short mode_t;\n#endif\n\n#define strcasecmp lstrcmpi\n#define strncasecmp strnicmp\n#define mkdir(path, mode) mkdir(path)\n#define sleep(sex) Sleep(1000 * (sex))\n#define getuid() 0\n#define getgid() 0\n\nchar *strptime(const char *s, const char *format, struct tm *tm);\n\n#define srand w32_srand\n#define rand w32_rand\n#define socket w32_socket\n#define getsockopt w32_getsockopt\n#define setsockopt w32_setsockopt\n#define bind w32_bind\n#define listen w32_listen\n#define accept w32_accept\n#define connect w32_connect\n#define shutdown w32_shutdown\n#define send w32_send\n#define recv w32_recv\n#define closesocket w32_closesocket\n#define getservbyname w32_getservbyname\n#define getaddrinfo w32_getaddrinfo\n#ifdef gai_strerror\n#undef gai_strerror\n#endif\n#define gai_strerror w32_strerror\n#define freeaddrinfo w32_freeaddrinfo\n#define inet_ntop w32_inet_ntop\n#define inet_ntoa w32_inet_ntoa\n#define getpeername w32_getpeername\n#define select w32_select\n#define poll w32_poll\n#define strerror w32_strerror\n#define strerror_r w32_strerror_r\n#define ftruncate _chsize\n#define getpid GetCurrentProcessId\n\n#define PATH_MAX 32767\n#define WORDS_BIGENDIAN 0\n#define EAI_SYSTEM 0\n\n#else\n#define closesocket(s) close(s)\n#define cli_to_utf8_maybe_alloc(x) (x)\n#define cli_strdup_to_utf8(x) strdup(x)\n#endif\n\n#ifndef O_BINARY\n#define O_BINARY 0\n#endif\n\n#ifndef\tFALSE\n#define FALSE (0)\n#endif\n#ifndef\tTRUE\n#define TRUE (1)\n#endif\n\n#ifndef MIN\n#define MIN(a, b)\t(((a) < (b)) ? (a) : (b))\n#endif\n#ifndef MAX\n#define MAX(a,b)\t(((a) > (b)) ? (a) : (b))\n#endif\n\n#ifndef HAVE_IN_PORT_T\ntypedef unsigned short in_port_t;\n#endif\n\n#ifndef HAVE_IN_ADDR_T\ntypedef unsigned int in_addr_t;\n#endif\n\n#ifdef _WIN32\n#define PATHSEP \"\\\\\"\n#else\n#define PATHSEP \"/\"\n#endif\n\n#ifndef _WIN32\n#define CONFDIR_CLAMD CONFDIR PATHSEP \"clamd.conf\"\n#define CONFDIR_FRESHCLAM CONFDIR PATHSEP \"freshclam.conf\"\n#define CONFDIR_MILTER CONFDIR PATHSEP \"clamav-milter.conf\"\n#endif\n\n#ifndef WORDS_BIGENDIAN\n#define WORDS_BIGENDIAN 0\n#endif\n\n#ifdef _WIN32\n\nvoid w32_glob(int *argc_ptr, char ***argv_ptr);\n\n#if !defined(THIS_IS_LIBCLAMAV) && defined(_MSC_VER)\n#define LIBCLAMAV_EXPORT __declspec(dllimport)\n#else\n#define LIBCLAMAV_EXPORT\n#endif\n#undef HAVE_CONFIG_H\n\n#ifdef OUT\n#undef OUT\n#endif\n\nint real_main(int, char **);\n#define main                                 \\\n    main(int argc, char **argv)              \\\n    {                                        \\\n        _setmode(_fileno(stdin), _O_BINARY); \\\n        w32_glob(&argc, &argv);              \\\n        return real_main(argc, argv);        \\\n    };                                       \\\n    int real_main\n\n#else\n#define LIBCLAMAV_EXPORT\n#endif\n\n#endif /* __PLATFORM_H */\n"
        },
        {
          "name": "sigtool",
          "type": "tree",
          "content": null
        },
        {
          "name": "target.h.cmake.in",
          "type": "blob",
          "size": 0.4072265625,
          "content": "/*\n * cmake-target.h.in.\n *\n * Autoconf compatibility layer for CMake.\n *\n * This header provides macros used by ClamAV that autoconf would've provided\n * with AC_CREATE_TARGET_H\n */\n\n#ifndef TARGET_OS_TYPE\n#define TARGET_OS_TYPE \"@CMAKE_SYSTEM_NAME@\"\n#endif\n\n#ifndef TARGET_ARCH_TYPE\n#define TARGET_ARCH_TYPE \"@CMAKE_SYSTEM_PROCESSOR@\"\n#endif\n\n#ifndef TARGET_CPU_TYPE\n#define TARGET_CPU_TYPE TARGET_ARCH_TYPE\n#endif\n"
        },
        {
          "name": "unit_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "win32",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}