{
  "metadata": {
    "timestamp": 1736709858374,
    "page": 332,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hydradatabase/hydra",
      "stars": 2883,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".env.example",
          "type": "blob",
          "size": 0.064453125,
          "content": "POSTGRES_PORT=5432\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=hydra\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": ".DS_Store\n/.env\n/volumes\n/tmp\n"
        },
        {
          "name": ".golangci_lint_version",
          "type": "blob",
          "size": 0.0078125,
          "content": "v1.54.2\n"
        },
        {
          "name": ".images",
          "type": "tree",
          "content": null
        },
        {
          "name": "BENCHMARKS.md",
          "type": "blob",
          "size": 4.970703125,
          "content": "# Benchmarks\n\nWe use two test suites for benchmarking: [clickbench][] against the standard 100M row\n(80GB) dataset, and a data warehouse benchmark suite similar to TPC-H, with a\n10GB dataset. These suites are called `clickbench-100M` and `warehouse-10G`\nrespectively. The [benchmarking code is open source][benchmarks].\n\nThe high level results we track are below: the total query execution time of the\n`SELECT` queries run in the benchmark (i.e. without setup or data load time)\nof each suite. Every query is individually tracked in Bencher,\nand can be explored in detail on our [Bencher project page][bencher project].\n\nAll benchmarks are query time, reported in milliseconds. Lower values are better.\n\n## Release Benchmarking\n\nHydra benchmarks each of its releases. These tests are run on a `c6a.4xlarge`\ninstance (16 vCPU, 32 GiB RAM) with 500 GiB of GP2 storage.\n\n### clickbench-100M\n\n<a href=\"https://bencher.dev/perf/hydra-postgres?benchmarks_page=6&testbeds_page=1&branches_page=1&reports_page=1&tab=testbeds&branches=bf6a468c-7b8a-4917-b3d1-c66216eb95db&testbeds=245d9139-a1f3-484c-8449-1c9422800618&measures=c20a9c30-e20a-45b7-bba5-4a6e940f951f&benchmarks=c4efd5bb-f4c4-4b75-9137-f2a841c04cfe\"><img src=\"https://api.bencher.dev/v0/projects/hydra-postgres/perf/img?measures=c20a9c30-e20a-45b7-bba5-4a6e940f951f&branches=bf6a468c-7b8a-4917-b3d1-c66216eb95db&testbeds=245d9139-a1f3-484c-8449-1c9422800618&benchmarks=c4efd5bb-f4c4-4b75-9137-f2a841c04cfe&title=hydra+-+clickbench-100M+-+release\" title=\"hydra - clickbench-100M - release\" alt=\"hydra - clickbench-100M - release for hydra-postgres - Bencher\" /></a>\n\n### warehouse-10G\n\n<a href=\"https://bencher.dev/perf/hydra-postgres?benchmarks_page=9&testbeds_page=1&branches_page=1&reports_page=1&tab=benchmarks&branches=bf6a468c-7b8a-4917-b3d1-c66216eb95db&testbeds=245d9139-a1f3-484c-8449-1c9422800618&measures=c20a9c30-e20a-45b7-bba5-4a6e940f951f&benchmarks=4cda199f-0eb9-40cf-96b5-1706efb6724c\"><img src=\"https://api.bencher.dev/v0/projects/hydra-postgres/perf/img?measures=c20a9c30-e20a-45b7-bba5-4a6e940f951f&branches=bf6a468c-7b8a-4917-b3d1-c66216eb95db&testbeds=245d9139-a1f3-484c-8449-1c9422800618&benchmarks=4cda199f-0eb9-40cf-96b5-1706efb6724c&title=hydra+-+clickbench-100M+-+release\" title=\"hydra - clickbench-100M - release\" alt=\"hydra - clickbench-100M - release for hydra-postgres - Bencher\" /></a>\n\n## Continuous Benchmarking\n\nHydra uses [Bencher][bencher home] to continuously track benchmarks after every\ncommit to `main`. This allows us to determine the impact of performance improvements\nas well as track performance regressions.\n\nThese tests use the open source Docker image and run on\n[GitHub's 4-core test runners][runners]. You can review\n[the GitHub action][action] for more methodology details.\n\n### Reading the graphs\n\nSince many commits will not affect performance, it is normal for graphs to be\nprincipally flat for many commits in a row. These graphs do not have historical data from\nprevious releases.\n\n\n### clickbench-100M\n\n<a href=\"https://bencher.dev/perf/hydra-postgres?benchmarks_page=6&testbeds_page=1&branches_page=1&reports_page=1&tab=benchmarks&branches=e6bcbe0c-210d-4ab1-8fe4-5d9498800980&testbeds=1d3283b3-3e52-4dd0-a018-fb90c9361a2e&measures=c20a9c30-e20a-45b7-bba5-4a6e940f951f&benchmarks=c4efd5bb-f4c4-4b75-9137-f2a841c04cfe\"><img src=\"https://api.bencher.dev/v0/projects/hydra-postgres/perf/img?measures=c20a9c30-e20a-45b7-bba5-4a6e940f951f&branches=e6bcbe0c-210d-4ab1-8fe4-5d9498800980&testbeds=1d3283b3-3e52-4dd0-a018-fb90c9361a2e&benchmarks=c4efd5bb-f4c4-4b75-9137-f2a841c04cfe&title=hydra+-+clickbench-100M\" title=\"hydra - clickbench-100M\" alt=\"hydra - clickbench-100M for hydra-postgres - Bencher\" /></a>\n\n### warehouse-10G\n\n<a href=\"https://bencher.dev/perf/hydra-postgres?benchmarks_page=9&testbeds_page=1&branches_page=1&reports_page=1&tab=benchmarks&branches=e6bcbe0c-210d-4ab1-8fe4-5d9498800980&testbeds=1d3283b3-3e52-4dd0-a018-fb90c9361a2e&measures=c20a9c30-e20a-45b7-bba5-4a6e940f951f&benchmarks=4cda199f-0eb9-40cf-96b5-1706efb6724c\"><img src=\"https://api.bencher.dev/v0/projects/hydra-postgres/perf/img?measures=c20a9c30-e20a-45b7-bba5-4a6e940f951f&branches=e6bcbe0c-210d-4ab1-8fe4-5d9498800980&testbeds=1d3283b3-3e52-4dd0-a018-fb90c9361a2e&benchmarks=4cda199f-0eb9-40cf-96b5-1706efb6724c&title=hydra+-+warehouse-10G\" title=\"hydra - warehouse-10G\" alt=\"hydra - warehouse-10G for hydra-postgres - Bencher\" /></a>\n\n[bencher home]: https://bencher.dev/\n[clickbench]: https://github.com/ClickHouse/ClickBench\n[benchmarks]: https://github.com/hydradatabase/benchmarks\n[runners]: https://docs.github.com/en/actions/using-github-hosted-runners/about-larger-runners\n[action]: https://github.com/hydradatabase/hydra/blob/main/.github/workflows/benchmark.yaml\n[bencher project]: https://bencher.dev/perf/hydra-postgres?benchmarks_page=6&testbeds_page=1&branches_page=1&reports_page=1&tab=benchmarks&branches=e6bcbe0c-210d-4ab1-8fe4-5d9498800980&testbeds=1d3283b3-3e52-4dd0-a018-fb90c9361a2e&measures=c20a9c30-e20a-45b7-bba5-4a6e940f951f&benchmarks=c4efd5bb-f4c4-4b75-9137-f2a841c04cfe\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.828125,
          "content": "# CHANGELOG\n\n## 1.1.2\n\n* turn off column cache when building an index, vacuum, and analyze ([#250][])\n* fix memory leak when executing vectorized quals ([#242][])\n* do not release the chunk group state if there is data ([#245][])\n* fix case sensitivity bug in columnar.alter_table_set_access_method ([#237][])\n* fix a crash when chunk_group_row_limit is larger than 110000 ([#235][])\n* add extensions: wrappers, pgsodium, and supabase_vault (PG >=14) ([#236][])\n\nThanks to @japinli for multiple bug fixes in this release!\n\n[#250]: https://github.com/hydradatabase/hydra/pull/250\n[#242]: https://github.com/hydradatabase/hydra/pull/242\n[#245]: https://github.com/hydradatabase/hydra/pull/245\n[#237]: https://github.com/hydradatabase/hydra/pull/237\n[#235]: https://github.com/hydradatabase/hydra/pull/235\n[#236]: https://github.com/hydradatabase/hydra/pull/236\n\n## 1.1.1\n\n* fix uncapped memory growth when importing data via logical replication ([#226][])\n* fix handling of large data columns (e.g. text or json) causing overflow of 1GB\n  chunk size ([#220][])\n* restrict the maximum singular datum size to 256MB to ensure that the maximum\n  datum size of 1GB is not exceeded in columnar metadata ([#222][])\n* do not insert vectorization node into the plan if columnar scan isn't being used\n  ([#228][])\n\n[#226]: https://github.com/hydradatabase/hydra/pull/226\n[#220]: https://github.com/hydradatabase/hydra/pull/220\n[#222]: https://github.com/hydradatabase/hydra/pull/222\n[#228]: https://github.com/hydradatabase/hydra/pull/228\n\n## 1.1.0\n\n* added support for upserts and other `ON CONFLICT` clauses for `INSERT`\n  queries ([#174][])\n* added a custom index-backed scan ([#205][]). This scan is disabled by default as it\n  may adversely affect performance. To enable this scan, use:\n  `SET columnar.enable_columnar_index_scan = true;`\n* added Postgres 16 support ([#200][])\n  * parquet_s3_fdw and multicorn-based FDWs are not yet supported in PG 16. These\n    extensions are included only on PG 13-15 builds.\n* update pg_ivm to 1.7.0 ([#200][])\n* update pgsql-http to 1.6.0 ([#200][])\n\n[#174]: https://github.com/hydradatabase/hydra/pull/174\n[#205]: https://github.com/hydradatabase/hydra/pull/205\n[#200]: https://github.com/hydradatabase/hydra/pull/200\n\n## 1.0.2\n\nThis version of Hydra Columnar requires `ALTER EXTENSION columnar\nUPDATE` after installation.\n\n* fix incorrect results when using an aggregate `FILTER` by not vectorizing\n  these aggregates ([#181][])\n* fix possible bypass of table constraints by forcing constraints to be checked\n  during multi-insert ([#182][])\n* fix possible table corruption when running `columnar.vacuum`\n  ([#190][])\n* support chunk filtering for types that have a family comparator, namely\n  `varchar` ([#184][])\n* allow higher values (up to 10M) for `chunk_group_row_limit` and\n  `stripe_row_limit` ([#186][])\n* fix txid wraparound ([#190][])\n\n[#181]: https://github.com/hydradatabase/hydra/pull/181\n[#182]: https://github.com/hydradatabase/hydra/pull/182\n[#184]: https://github.com/hydradatabase/hydra/pull/184\n[#190]: https://github.com/hydradatabase/hydra/pull/190\n[#186]: https://github.com/hydradatabase/hydra/pull/186\n[#190]: https://github.com/hydradatabase/hydra/pull/190\n\n## 1.0.1\n\n* updated pgvector to 0.5.1, allowing [use of HNSW indexes][pgvector-HNSW].\n  Users of pgvector should run `ALTER EXTENSION vector UPDATE` in any\n  database where the extension is installed. ([#171][])\n* stop resetting to default columnar on Hydra Cloud (spilo). This will allow\n  the user to change the default. ([#173][])\n* improve handling of stripe assignment to workers to reduce spinlock\n  contention, which can cause a crash ([#170][])\n* change default `qual_pushdown_correlation_threshold` from 0.9 to 0.4. This\n  addresses a performance regression we observed in some clickbench queries.\n  ([#159][])\n\n[#173]: https://github.com/hydradatabase/hydra/pull/173\n[#171]: https://github.com/hydradatabase/hydra/pull/171\n[#170]: https://github.com/hydradatabase/hydra/pull/170\n[#159]: https://github.com/hydradatabase/hydra/pull/159\n[pgvector-HNSW]: https://github.com/pgvector/pgvector#hnsw\n\n## 1.0.0\n\nNo changes since 1.0.0-rc2.\n\n## 1.0.0-rc2\n\n* bugfix: disable custom vectorization on non-column arguments ([#147][])\n\n[#147]: https://github.com/hydradatabase/hydra/pull/147\n\n## 1.0.0-rc\n\nIn addition to bug fixes, this release includes significant vectorization optimization for aggregates (e.g. COUNT and SUM), enabled new index types, and added `pg_hint_plan`.\n\n* vectorization of direct aggregates - PG14+ only ([#143][])\n* fix an inefficiency with vacuum if there is only one stripe ([#143][])\n* enable `O3` compilation optimizations ([#143][])\n* disable parallelism for `CREATE TABLE ... AS` queries ([#138][])\n* allow gin, gist, spgist, and rum indexes on columnar tables ([#133][])\n* add [pg_hint_plan][] extension ([#134][])\n* extensions are now installed during the build process using pgxman ([#137][])\n* bugfix: `columnar.alter_table_set_access_method` should correctly disallow conversion of heap tables that have foreign keys ([#136][])\n* bugfix: crash when using `explain` when cache is enabled ([#125][])\n* bugfix: cache could evict a chunk currently in use ([#142][])\n\n[#143]: https://github.com/hydradatabase/hydra/pull/143\n[#138]: https://github.com/hydradatabase/hydra/pull/138\n[#133]: https://github.com/hydradatabase/hydra/pull/133\n[#134]: https://github.com/hydradatabase/hydra/pull/134\n[#136]: https://github.com/hydradatabase/hydra/pull/136\n[#125]: https://github.com/hydradatabase/hydra/pull/125\n[#137]: https://github.com/hydradatabase/hydra/pull/137\n[#142]: https://github.com/hydradatabase/hydra/pull/137\n[pg_hint_plan]: https://github.com/ossc-db/pg_hint_plan\n\n## 1.0.0-beta\n\nColumnar-optimized vacuuming allows columnar tables to be compacted after updates and deletes without full rewrite, which will also improve peformance after vacuum. Auto-vacuum support combines recent inserts into a single stripe. A new column cache makes JOIN queries more efficient. Vector similarity search and data types are now available via pgvector.\n\n* default table access method is now columnar ([#107][])\n* add [pgvector][] extension ([#106][])\n* add vacuum_full UDF ([#93][])\n* bugfix: vacuum udf could get into a look and overwrite stripes ([#92][])\n* add columnar decompressed chunk cache ([#86][])\n* bugfix: vacuum hanging indefinitely in some cases ([#80][])\n* bugfix: release memory during long sequential scans ([#78][])\n* add user function to allow for incremental vacuum and space reclamation ([#71][])\n* add support for postgres 15 ([#75][])\n* add columnar vacuum to combine latest stripe into 1 stripe ([#51][], [#74][])\n\n## 0.3.0-alpha\n\nThis release adds update and delete support for columnar tables. Incremental materialized views are now available via pg_ivm.\n\n* add incremental materialized views (pg_ivm extension) ([#67][])\n* bugfix: WHERE clause with certain custom types ([4f5b508][])\n* add counts of deleted rows, optimize if no data has been deleted ([c987c6e][])\n* add columnar updates and deletes ([f33b0bd][], [4f939f4][], [f5e0cc1][], [7e15b4c][])\n\n## 0.2.0-alpha\n\nThis release has huge gains for performance, bringing parallelization to columnar scans and vectorization of WHERE clauses.\n\n* upgrade to spilo 2.1-p9 ([4e06ec5][])\n* bugfix: memory leak when decompressing chunks ([15193be][])\n* bugfix: vectorization with NULL values ([e35a429][])\n* add vectorization of WHERE clauses when comparing to a const value ([a470460][])\n* add parallel execution with JOIN clauses ([3370bf9][])\n* add conversion from columnar to heap ([d0db6a2][])\n* add vectorization of WHERE clauses ([0d41837][])\n* add parallel execution ([f399474][])\n\n## 0.1.0-alpha\n\nThe initial release focuses on adding several new FDWs and productionization work for our cloud service.\n\n* add parquet_s3_fdw ([02d2253][])\n* add multicorn2, s3csv_fdw, and gspreadsheet_fdw extensions ([1d7cb47][], [a22ecdc][])\n* add mysql_fdw extension ([92ae91e][], [bc47d31][])\n* add pgsql-http extension, but disable for spilo ([dae1e07][], [59b37be][])\n* change to using the official `postgres` image as our base image; spilo is maintained for Hydra hosted service ([fec064b][])\n* add tests for upgrading from previous image to current image ([#31][])\n* move all functions into `columnar` schema\n* add user function to convert from heap to columnar\n* upgrade to spilo 2.1-p7 ([#26][])\n* use docker-compose to have a stable storage ([#16][])\n* add pg_cron extension ([#15][])\n* build Hydra with bake files (`buildx bake`) ([#7][])\n* add acceptance tests and CI\n* add Hydra to spilo image\n* change build scripts to allow columnar to build as standalone extension\n\n[#7]: https://github.com/hydradatabase/hydra/pull/7\n[#15]: https://github.com/hydradatabase/hydra/pull/15\n[#16]: https://github.com/hydradatabase/hydra/pull/16\n[#26]: https://github.com/hydradatabase/hydra/pull/26\n[#31]: https://github.com/hydradatabase/hydra/pull/31\n[#51]: https://github.com/hydradatabase/hydra/pull/51\n[#67]: https://github.com/hydradatabase/hydra/pull/67\n[#71]: https://github.com/hydradatabase/hydra/pull/71\n[#74]: https://github.com/hydradatabase/hydra/pull/74\n[#75]: https://github.com/hydradatabase/hydra/pull/75\n[#78]: https://github.com/hydradatabase/hydra/pull/78\n[#80]: https://github.com/hydradatabase/hydra/pull/80\n[#86]: https://github.com/hydradatabase/hydra/pull/86\n[#92]: https://github.com/hydradatabase/hydra/pull/92\n[#93]: https://github.com/hydradatabase/hydra/pull/93\n[#106]: https://github.com/hydradatabase/hydra/pull/106\n[#107]: https://github.com/hydradatabase/hydra/pull/107\n[02d2253]: https://github.com/hydradatabase/hydra/commit/02d2253\n[0d41837]: https://github.com/hydradatabase/hydra/commit/0d41837\n[15193be]: https://github.com/hydradatabase/hydra/commit/15193be\n[1d7cb47]: https://github.com/hydradatabase/hydra/commit/1d7cb47\n[3370bf9]: https://github.com/hydradatabase/hydra/commit/3370bf9\n[4e06ec5]: https://github.com/hydradatabase/hydra/commit/4e06ec5\n[4f5b508]: https://github.com/hydradatabase/hydra/commit/4f5b508\n[4f939f4]: https://github.com/hydradatabase/hydra/commit/4f939f4\n[59b37be]: https://github.com/hydradatabase/hydra/commit/59b37be\n[7e15b4c]: https://github.com/hydradatabase/hydra/commit/7e15b4c\n[92ae91e]: https://github.com/hydradatabase/hydra/commit/92ae91e\n[a22ecdc]: https://github.com/hydradatabase/hydra/commit/a22ecdc\n[a470460]: https://github.com/hydradatabase/hydra/commit/a470460\n[bc47d31]: https://github.com/hydradatabase/hydra/commit/bc47d31\n[c987c6e]: https://github.com/hydradatabase/hydra/commit/c987c6e\n[d0db6a2]: https://github.com/hydradatabase/hydra/commit/d0db6a2\n[dae1e07]: https://github.com/hydradatabase/hydra/commit/dae1e07\n[e35a429]: https://github.com/hydradatabase/hydra/commit/e35a429\n[f33b0bd]: https://github.com/hydradatabase/hydra/commit/f33b0bd\n[f399474]: https://github.com/hydradatabase/hydra/commit/f399474\n[f5e0cc1]: https://github.com/hydradatabase/hydra/commit/f5e0cc1\n[fec064b]: https://github.com/hydradatabase/hydra/commit/fec064b\n[pgvector]: https://github.com/pgvector/pgvector\n"
        },
        {
          "name": "DEVELOPERS.md",
          "type": "blob",
          "size": 1.7119140625,
          "content": "# Developing Hydra\n\nMost of the work on Hydra exists outside of this repo through various extensions that we add to the image.\nThe hydra project exists for coordination and to build the final Docker image which contains Postgres and\nthese extensions.\n\nCurrently active projects are:\n\n* [the Hydra columnar engine](https://github.com/hydradatabase/citus)\n\n## Build\n\nThe Hydra Docker image is based on [zalando/spilo](https://github.com/zalando/spilo).\nThe image is a distribution of Spilo and the [Columnar PostgreSQL extension](https://github.com/hydradatabase/citus).\n\nTo build, run:\n\n```\nTAG=1234 TARGET=hydra make docker_build\n```\n\n## Image Build Tags\n\nImage build tag is in the format of `${SPILO_SHA}_${COLUMNAR_EXT_SHA}`, e.g. `72fb97e_ff32dd9`.\nThe `latest` tag is always tagged to the latest main branch.\n\n## Hydra Production Version\n\nThe `HYDRA_PROD_VER` file stores the version that Hydra runs in production.\nPlease bump it when a new production version is released.\n\n## Spilo Version Update\n\nHydra Docker build overrides the following Spilo scripts to enable extra PostgreSQL extensions:\n\n* [configure_spilo.py](https://github.com/zalando/spilo/blob/master/postgres-appliance/scripts/configure_spilo.py)\n* [spilo_commons.py](https://github.com/zalando/spilo/blob/master/postgres-appliance/scripts/spilo_commons.py)\n* [post_init.sh](https://github.com/zalando/spilo/blob/master/postgres-appliance/scripts/post_init.sh)\n\nTo update to a newer Spilo version, you need to copy the above files from the specific Spilo version and add the corresponding bits to enable the Columnar extensions.\nMake sure you use `diff` to understand what needs to be added first before updating.\nIn the future, we may provide a script to simplify the update process.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7080078125,
          "content": "#syntax=docker/dockerfile:1\n\nFROM postgres_base\n\nRUN set -eux; \\\n  apt-get update; \\\n  apt-get install -y --no-install-recommends \\\n  curl \\\n  ca-certificates \\\n  ; \\\n  rm -rf /var/lib/apt/lists/*\n\n# columnar ext\n# NOTE(owenthereal): build columnar with pgxman in this repo\nCOPY --from=columnar /pg_ext /\n\nCOPY files/postgres/docker-entrypoint-initdb.d /docker-entrypoint-initdb.d/\n\nARG POSTGRES_BASE_VERSION\n# Install pgxman extensions\n# Always force rebuild of this layer\nARG TIMESTAMP=1\nCOPY third-party/pgxman /tmp/pgxman/\nRUN curl -sfL https://install.pgx.sh | sh -s -- /tmp/pgxman/pgxman_${POSTGRES_BASE_VERSION}.yaml && \\\n  pgxman install pgsql-http=1.6.0 --pg ${POSTGRES_BASE_VERSION} --yes && \\\n  rm -rf /tmp/pgxman\n"
        },
        {
          "name": "Dockerfile.spilo",
          "type": "blob",
          "size": 1.08203125,
          "content": "#syntax=docker/dockerfile:1\n\nFROM spilo_base\n\nRUN set -eux; \\\n  apt-get update; \\\n  apt-get install -y --no-install-recommends \\\n  curl \\\n  ca-certificates \\\n  ; \\\n  rm -rf /var/lib/apt/lists/*\n\n# See https://github.com/docker-library/postgres/issues/415\nRUN set -eux; \\\n  locale-gen en_US.UTF-8; \\\n  echo \"LC_ALL=en_US.UTF-8\" >> /etc/environment; \\\n  echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen; \\\n  echo \"LANG=en_US.UTF-8\" > /etc/locale.conf\n\n# columnar ext\n# NOTE(owenthereal): build columnar with pgxman in this repo\nCOPY --from=columnar_13 /pg_ext /\nCOPY --from=columnar_14 /pg_ext /\nCOPY --from=columnar_15 /pg_ext /\n\n# configuration\nCOPY files/spilo/postgres-appliance/scripts /scripts/\n\nARG POSTGRES_BASE_VERSION\n# Default envs\nENV PGVERSION=${POSTGRES_BASE_VERSION} SPILO_PROVIDER=local PGUSER_SUPERUSER=postgres PGPASSWORD_SUPERUSER=hydra\n\n# Install pgxman extensions\n# Always force rebuild of this layer\nARG TIMESTAMP=1\nCOPY third-party/pgxman /tmp/pgxman/\nRUN curl -sfL https://install.pgx.sh | sh -s -- /tmp/pgxman/pgxman_13_spilo.yaml /tmp/pgxman/pgxman_14_spilo.yaml && \\\n  rm -rf /tmp/pgxman\n"
        },
        {
          "name": "HYDRA_PROD_VER",
          "type": "blob",
          "size": 0.0400390625,
          "content": "3cdf8367ae8717e67c60daf4e5eafd7134de589a\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.490234375,
          "content": "SHELL=/bin/bash -o pipefail\n\nTARGET ?= default\nPOSTGRES_BASE_VERSION ?= 14\n\nECR_REGISTRY ?= 011789831835.dkr.ecr.us-east-1.amazonaws.com\n\nGOLANGCI_LINT_VERSION ?= $$(cat .golangci_lint_version)\n\nTEST_ARTIFACT_DIR ?= $(CURDIR)/tmp/test_artifacts\n$(TEST_ARTIFACT_DIR):\n\tmkdir -p $(TEST_ARTIFACT_DIR)\n\n.PHONY: docker_build\n# Runs a full multi-platform docker build\ndocker_build:\n\tPOSTGRES_BASE_VERSION=$(POSTGRES_BASE_VERSION) docker buildx bake --pull $(TARGET)\n\nuname_m := $(shell uname -m)\nifeq ($(uname_m),x86_64)\n       PLATFORM ?= linux/amd64\nelse\n       PLATFORM ?= linux/$(uname_m)\nendif\n\n.PHONY: docker_build_local\n# Runs a docker build for the target platform and loads it into the local docker\n# environment\ndocker_build_local:\n\tPOSTGRES_BASE_VERSION=$(POSTGRES_BASE_VERSION) docker buildx bake --set *.platform=$(PLATFORM) --pull --load $(TARGET)\n\n.PHONY: docker_build_local_postgres\ndocker_build_local_postgres: TARGET = postgres\n# Runs a local docker build for the target platform for postgres and loads it\n# into the local docker\ndocker_build_local_postgres: docker_build_local\n\n.PHONY: docker_build_local_spilo\ndocker_build_local_spilo: TARGET = spilo\n# Runs a local docker build for the target platform for spilo and loads it\n# into the local docker\ndocker_build_local_spilo: docker_build_local\n\n.PHONY: docker_push_local\ndocker_push_local:\n\tPOSTGRES_BASE_VERSION=$(POSTGRES_BASE_VERSION) docker buildx bake --set *.platform=$(PLATFORM) --set *.tags=$(IMAGE) --pull --push $(TARGET)\n\nPOSTGRES_IMAGE ?= ghcr.io/hydradatabase/hydra:dev\n.PHONY: docker_push_postgres\ndocker_push_postgres: TARGET = postgres\ndocker_push_postgres: IMAGE = $(POSTGRES_IMAGE)\ndocker_push_postgres: docker_push_local\n\nSPILO_IMAGE ?= $(ECR_REGISTRY)/spilo:dev\n.PHONY: docker_push_spilo\ndocker_push_spilo: TARGET = spilo\ndocker_push_spilo: IMAGE = $(SPILO_IMAGE)\ndocker_push_spilo: docker_push_local\n\n.PHONY: docker_check_columnar\ndocker_check_columnar:\n\tdocker buildx bake --set *.platform=$(PLATFORM) --set columnar.target=checker columnar_13 columnar_14\n\nGO_TEST_FLAGS ?=\n\n.PHONY: acceptance_test\n# Runs the acceptance tests\nacceptance_test: postgres_acceptance_test spilo_acceptance_test\n\n.PHONY: acceptance_build_test\n# Builds local images then runs the acceptance tests\nacceptance_build_test: postgres_acceptance_build_test spilo_acceptance_build_test\n\nPOSTGRES_IMAGE ?= ghcr.io/hydradatabase/hydra:latest\nPOSTGRES_UPGRADE_FROM_IMAGE ?= ghcr.io/hydradatabase/hydra:$(POSTGRES_BASE_VERSION)\n\n.PHONY: postgres_acceptance_test\n# Runs the postgres acceptance tests\npostgres_acceptance_test: $(TEST_ARTIFACT_DIR)\n\texport ARTIFACT_DIR=$(TEST_ARTIFACT_DIR) && \\\n\t\texport POSTGRES_IMAGE=$(POSTGRES_IMAGE) && \\\n\t\texport POSTGRES_UPGRADE_FROM_IMAGE=$(POSTGRES_UPGRADE_FROM_IMAGE) && \\\n\t\texport EXPECTED_POSTGRES_VERSION=$(POSTGRES_BASE_VERSION) && \\\n\t\tcd acceptance && \\\n\t\tgo test ./postgres/... $(GO_TEST_FLAGS) -count=1 -v\n\n.PHONY: postgres_pull_upgrade_image\npostgres_pull_upgrade_image:\n\tdocker pull $(POSTGRES_UPGRADE_FROM_IMAGE)\n\n.PHONY: postgres_acceptance_build_test\n# Builds the postgres image then runs the acceptance tests\npostgres_acceptance_build_test: docker_build_local_postgres postgres_pull_upgrade_image postgres_acceptance_test\n\n.PHONY: ecr_login\necr_login:\n\taws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $(ECR_REGISTRY)\n\nSPILO_REPO ?= $(ECR_REGISTRY)/spilo\nSPILO_IMAGE ?= $(SPILO_REPO):latest\nSPILO_UPGRADE_FROM_IMAGE ?= $(SPILO_REPO):$$(cat HYDRA_PROD_VER)\n\n# Runs the spilo acceptance tests\n.PHONY: spilo_acceptance_test\nspilo_acceptance_test: $(TEST_ARTIFACT_DIR)\n\texport ARTIFACT_DIR=$(TEST_ARTIFACT_DIR) && \\\n\t\texport SPILO_IMAGE=$(SPILO_IMAGE) && \\\n\t\texport SPILO_UPGRADE_FROM_IMAGE=$(SPILO_UPGRADE_FROM_IMAGE) && \\\n\t\tcd acceptance && \\\n\t\tgo test ./spilo/... $(GO_TEST_FLAGS) -count=1 -v\n\n.PHONY: spilo_pull_upgrade_image\nspilo_pull_upgrade_image: ecr_login\n\tdocker pull $(SPILO_UPGRADE_FROM_IMAGE)\n\n.PHONY: spilo_acceptance_build_test\n# Builds the spilo image then runs acceptance tests\nspilo_acceptance_build_test: docker_build_local_spilo spilo_pull_upgrade_image spilo_acceptance_test\n\n.PHONY: lint_acceptance\n# Runs the go linter\nlint_acceptance:\n\tdocker run --rm -v $(CURDIR)/acceptance:/app -w /app golangci/golangci-lint:$(GOLANGCI_LINT_VERSION) \\\n\t\tgolangci-lint run --timeout 5m --out-format colored-line-number\n\n.PHONY: lint_fix_acceptance\n# Runs the go linter with the auto-fixer\nlint_fix_acceptance:\n\tdocker run --rm -v $(CURDIR)/acceptance:/app -w /app golangci/golangci-lint:$(GOLANGCI_LINT_VERSION) \\\n\t\tgolangci-lint run --fix\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.54296875,
          "content": "[![Hydra - the open source data warehouse](https://raw.githubusercontent.com/hydradatabase/hydra/main/.images/header.png)](https://hydra.so)\n\n# 🐘🤘 Hydra\n\n**Hydra is open source, column-oriented Postgres. You can query billions of rows instantly on Postgres without code changes. Parallelized analytics in minutes, not weeks.**\n\n## 🚀 Quick start\n\nTry the [Hydra Free Tier](https://dashboard.hydra.so/signup) to create a column-oriented Postgres instance. Then connect to it with your preferred Postgres client (psql, dbeaver, etc).\n\nAlternatively, you can run Hydra [locally](#run-locally).\n\n## 💪 Benchmarks - fastest Postgres aggregates on earth\n\nBenchmarks were run on a c6a.4xlarge (16 vCPU, 32 GB RAM) with 500 GB of GP2 storage.\nResults in seconds, smaller is better.\n\n![Hydra - the open source data warehouse](https://raw.githubusercontent.com/hydradatabase/hydra/main/.images/ReadmeBenchmarks.png)\n\n[Review Clickbench](https://tinyurl.com/clickbench) for comprehensive results and the list of 42 queries tested.\n\nThis benchmark represents typical workload in the following areas: clickstream and traffic analysis, web analytics, machine-generated data, structured logs, and events data.\n\n![Hydra - the open source data warehouse](https://raw.githubusercontent.com/hydradatabase/hydra/main/.images/FasterthanPG.png)\n\n### For our continuous benchmark results, see [BENCHMARKS](https://github.com/hydradatabase/hydra/blob/main/BENCHMARKS.md).\n\n## 🙋 FAQs\n\nView complete answers in [our documentation](https://docs.hydra.so/concepts/faqs).\n\n### Q: Why is Hydra so fast?\n\nA: Columnar storage, query parallelization, vectorized execution, column-level caching, and tuning Postgres.\n\n### Q: How do I start using the columnar format on Postgres?\n\nA: Data is loaded into columnar format by default. Use Postgres normally.\n\n### Q: What operations is Hydra meant for? Provide examples.\n\nA: Aggregates (COUNT, SUM, AVG), WHERE clauses, bulk INSERTS, UPDATE, DELETE…\n\n### Q: What is columnar not meant for?\n\nA: Frequent large updates, small transactions…\n\n### Q: What Postgres features are unsupported on columnar?\n\n* Logical replication.\n* Columnar tables don’t typically use indexes, only supporting btree and hash indexes, and their associated constraints.\n\n### Q: Is Hydra a fork?\n\nA: Hydra is a Postgres extension, not a fork. Hydra makes use of `tableam` (table access method API), which was added in Postgres 12 released in 2019.\n\n## 🤝 Community and Status\n\n- [x] Alpha: Limited to select design partners\n- [x] Public Alpha: available for use, but with noted frictions\n- [x] Hydra 1.0 beta: Stable for non-enterprise use cases\n- [x] Hydra 1.0 Release: Generally Available (GA) and ready for production use\n\n## :technologist: Developer resources\n\n- [CHANGELOG](https://github.com/hydradatabase/hydra/blob/main/CHANGELOG.md) for details of recent changes\n- [GitHub Issues](https://github.com/hydradatabase/hydra/issues) for bugs and missing features\n- [Discord](https://hydra.so/discord) discussion with the Community and Hydra team\n- [Docs](https://docs.hydra.so/) for Hydra features and warehouse ops\n\n## 💻 Run locally\n\nThe Hydra [Docker image](https://github.com/hydradatabase/hydra/pkgs/container/hydra) is a drop-in replacement for [postgres Docker image](https://hub.docker.com/_/postgres).\n\nYou can try out Hydra locally using [docker-compose](https://docs.docker.com/compose/).\n\n```bash\ngit clone https://github.com/hydradatabase/hydra && cd hydra\ncp .env.example .env\ndocker compose up\npsql postgres://postgres:hydra@127.0.0.1:5432\n```\n\n## 📝 License\n\nHydra is only possible by building on the shoulders of giants.\n\nThe code in this repo is licensed under:\n\n- [AGPL 3.0](https://github.com/hydradatabase/hydra/tree/main/columnar/LICENSE) for [Hydra Columnar](https://github.com/hydradatabase/hydra/tree/main/columnar)\n- All other code is [Apache 2.0](https://github.com/hydradatabase/hydra/blob/main/LICENSE)\n\nThe docker image is built on the [Postgres docker image](https://hub.docker.com/_/postgres/), which contains a large number of open source projects, including:\n\n- Postgres - [the Postgres license](https://www.postgresql.org/about/licence/)\n- Debian or Alpine Linux image, depending on the image used\n- Hydra includes the following additional software in the image:\n    - multicorn - BSD license\n    - mysql_fdw - MIT-style license\n    - parquet_s3_fdw - MIT-style license\n    - pgsql-http - MIT license\n\nAs for any pre-built image usage, it is the image user's responsibility to ensure that any use of this image complies with any relevant licenses for all software contained within.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "1.1.2\n"
        },
        {
          "name": "acceptance",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "columnar",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-bake.hcl",
          "type": "blob",
          "size": 2.0595703125,
          "content": "variable \"POSTGRES_REPO\" {\n  default = \"ghcr.io/hydradatabase/hydra\"\n}\n\nvariable \"SPILO_REPO\" {\n  default = \"011789831835.dkr.ecr.us-east-1.amazonaws.com/spilo\"\n}\n\nvariable \"SPILO_VERSION\" {\n  default = \"3.2-p2\"\n}\n\nvariable \"POSTGRES_BASE_VERSION\" {\n  default = \"14\"\n}\n\nvariable \"SPILO_POSTGRES_VERSION\" {\n  default = \"14\"\n}\n\nvariable \"SPILO_POSTGRES_OLD_VERSIONS\" {\n  default = \"13\"\n}\n\ngroup \"default\" {\n  targets = [\"postgres\", \"spilo\"]\n}\n\ntarget \"shared\" {\n  platforms = [\n    \"linux/amd64\",\n    \"linux/arm64\"\n  ]\n\n  args = {\n    TIMESTAMP = \"${timestamp()}\"\n  }\n}\n\ntarget \"postgres\" {\n  inherits = [\"shared\"]\n\n  contexts = {\n    columnar = \"target:columnar_${POSTGRES_BASE_VERSION}\"\n    postgres_base = \"docker-image://postgres:${POSTGRES_BASE_VERSION}-bookworm\"\n  }\n\n  args = {\n    POSTGRES_BASE_VERSION = \"${POSTGRES_BASE_VERSION}\"\n  }\n\n  tags = [\n    \"${POSTGRES_REPO}:latest\",\n    \"${POSTGRES_REPO}:${POSTGRES_BASE_VERSION}\"\n  ]\n}\n\ntarget \"spilo\" {\n  inherits = [\"shared\"]\n\n  dockerfile = \"Dockerfile.spilo\"\n\n  contexts = {\n    spilo_base = \"target:spilo_base\"\n    columnar_13 = \"target:columnar_13\"\n    columnar_14 = \"target:columnar_14\"\n    columnar_15 = \"target:columnar_15\"\n  }\n\n  args = {\n    POSTGRES_BASE_VERSION = \"${SPILO_POSTGRES_VERSION}\"\n  }\n\n  tags = [\n    \"${SPILO_REPO}:latest\",\n    \"${SPILO_REPO}:${SPILO_VERSION}-latest\"\n  ]\n}\n\ntarget \"spilo_base\" {\n  inherits = [\"shared\"]\n\n  context = \"https://github.com/zalando/spilo.git#${SPILO_VERSION}:postgres-appliance\"\n\n  args = {\n    TIMESCALEDB = \"\"\n    PGVERSION = \"${SPILO_POSTGRES_VERSION}\"\n    PGOLDVERSIONS = \"${SPILO_POSTGRES_OLD_VERSIONS}\"\n  }\n}\n\ntarget \"columnar\" {\n  inherits = [\"shared\"]\n  context = \"columnar\"\n  target = \"output\"\n}\n\ntarget \"columnar_13\" {\n  inherits = [\"columnar\"]\n\n  args = {\n    POSTGRES_BASE_VERSION = 13\n  }\n}\n\ntarget \"columnar_14\" {\n  inherits = [\"columnar\"]\n\n  args = {\n    POSTGRES_BASE_VERSION = 14\n  }\n}\n\ntarget \"columnar_15\" {\n  inherits = [\"columnar\"]\n\n  args = {\n    POSTGRES_BASE_VERSION = 15\n  }\n}\n\ntarget \"columnar_16\" {\n  inherits = [\"columnar\"]\n\n  args = {\n    POSTGRES_BASE_VERSION = 16\n  }\n}\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.42578125,
          "content": "services:\n  hydra:\n    container_name: hydra\n    image: ghcr.io/hydradatabase/hydra:latest\n    ports:\n      - ${POSTGRES_PORT}:5432\n    environment:\n      POSTGRES_USER: ${POSTGRES_USER}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n    volumes:\n      - ./volumes/db:/var/lib/postgresql/data\n      - ./files/postgres/postgresql.conf:/etc/postgresql/postgresql.conf\n    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'\n"
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "third-party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}