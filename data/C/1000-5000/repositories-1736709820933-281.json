{
  "metadata": {
    "timestamp": 1736709820933,
    "page": 281,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NetHack/NetHack",
      "stars": 3057,
      "defaultBranch": "NetHack-3.7",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.9345703125,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  LLVM\nAccessModifierOffset: -2\nAlignAfterOpenBracket: true\nAlignEscapedNewlinesLeft: true\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAlwaysBreakAfterDefinitionReturnType: true\nAlwaysBreakTemplateDeclarations: false\nAlwaysBreakBeforeMultilineStrings: false\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBinPackParameters: true\nBinPackArguments: true\nColumnLimit:     78\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nDerivePointerAlignment: false\nExperimentalAutoDetectBinPacking: false\nIndentCaseLabels: false\nIndentWrappedFunctionNames: false\nIndentFunctionDeclarationAfterType: false\nMaxEmptyLinesToKeep: 1\nKeepEmptyLinesAtTheStartOfBlocks: false\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakString: 1000\nPenaltyBreakFirstLessLess: 120\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 100\nPointerAlignment: Right\nSpacesBeforeTrailingComments: 1\nCpp11BracedListStyle: false\nStandard:        Cpp03\nIndentWidth:     4\nTabWidth:        8\nUseTab:          Never\nBreakBeforeBraces: Linux\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpacesInAngles:  false\nSpaceInEmptyParentheses: false\nSpacesInCStyleCastParentheses: false\nSpaceAfterCStyleCast: true\nSpacesInContainerLiterals: true\nSpaceBeforeAssignmentOperators: true\nContinuationIndentWidth: 4\nCommentPragmas:  '^ NetHack 3'\nForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]\nSpaceBeforeParens: ControlStatements\nDisableFormat:   false\n...\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3310546875,
          "content": "*.[ch] NHSUBST\n*.cpp NHSUBST\n*.sh NHSUBST\n*.pl NHSUBST\nPorting NHSUBST\nREADME NHSUBST\n* text=auto\n*.hqx -text\n*.sln -text\n*.vcxproj -text\n*.doc !diff\n*.DOC !diff\n*.uu NH_header=no\n*.xpm NH_header=no\n.git* NH_header=no\n* NH_filestag=(file%s_in_top_directory)\nNetHack.dsw NH_filestag=(file%s_for_win32_that_are_moved_into_._at_compile_time)\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.314453125,
          "content": "# CVS default ignores begin\ntags\nTAGS\n.make.state\n.nse_depinfo\n*~\n\\#*\n.#*\n,*\n_$*\n*$\n*.old\n*.bak\n*.BAK\n*.orig\n*.rej\n.del-*\n*.a\n*.olb\n*.o\n*.obj\n*.so\n*.exe\n*.Z\n*.elc\n*.ln\ncore\n# CVS default ignores end\n.*.swp\n\n# We generate makefiles by shell script\nMakefile\n\n# Win32-specific ignores\nDebug/\nRelease/\nbinary/\npackage/*\nvspackage/\nvsbinary/\nbuild/\nipch/\nlib/*\nNethack.sln\nNethack.sdf\nNethack.opensdf\nMakefile.bcc\nMakefile.gcc\nMakefile-orig\nMakefile.bcc-orig\nMakefile.gcc-orig\n*.suo\n*.pdb\n*.ilk\n# VS2013 extension to auto-whine about questionable code generates these\n*.lastcodeanalysissucceeded\n# VS 2017 caches data into the hidden directory .vs\n.vs\n# Win32-specific ignores end\n.DS_Store\n# ms-dos \n# resulting zip\nNH*DOS.ZIP\n# 8.3 versions\ndat/data.bas\nsys/share/posixreg.c\ninclude/patchlev.h\ndoc/guidebk.txt\n# folders compiler, target objs, binary results\ndjgpp/\nsrc/msdos_o/\nmsdos-binary/\ndat/NHTILES.BMP\ndat/msdoshlp.txt\nsrc/host_o/\nutil/djgpp-linux64-gcc550.tar.bz2\nutil/djgpp-osx-gcc550.tar.bz2\nutil/djgpp-mingw-gcc550-standalone.zip\nutil/dlb_main\nutil/thintile\nutil/til2bin2\nutil/tile2bin\nwin/share/monthin.txt\nwin/share/objthin.txt\nwin/share/oththin.txt\n# end of ms-dos\n\n#libnethack\ntargets/*\nbundle/*\n#test.js\n#sys/lib/npm-package/build/nethack.js\n#sys/lib/npm-package/build/nethack.wasm\n*.user\nutil/*.lib\nutil/*.exp\nsubmodules/CHKSUMS.tmp\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.3125,
          "content": "[submodule \"submodules/lua\"]\n\tpath = submodules/lua\n\turl = https://github.com/lua/lua.git\n[submodule \"submodules/pdcurses\"]\n\tpath = submodules/pdcurses\n\turl = https://github.com/wmcbrine/PDCurses.git\n[submodule \"submodules/pdcursesmod\"]\n\tpath = submodules/pdcursesmod\n\turl = https://github.com/Bill-Gray/PDCursesMod.git\n"
        },
        {
          "name": "Cross-compiling",
          "type": "blob",
          "size": 33.556640625,
          "content": "Cross-compiling NetHack 3.7 Last edit: February 18, 2023\n\nThe NetHack 3.7 build process differs from the build process of previous\nversions in some important ways. Those differences make it possible to use\na cross-compiler running on one platform (the \"host\" platform of the build)\nto produce a binary NetHack package that can execute on an entirely different\nplatform.\n\nPart A Contents:\n    A1. Why cross-compile?\n    A2. Building NetHack 3.6 (before)\n    A3. Building NetHack 3.7 (going forward)\n    A4. How was the build procedure reduced to 5 steps?\n    A5. How can I help with the cross-compiling initiative?\n\nPart B Contents:\n    B1. Two sets of compiles and procedures\n    B2. What needs to be built and executed on the HOST?\n    B3. What needs to be built for the TARGET?\n    B4. Case sample: msdos\n    B5. Case sample: amiga (started but incomplete)\n    B6. Case sample: Web Assembly, libnh\n    B7. Case sample: mips\n\n--------------------------------------------------------------------------------\n Part A - Cross-compiling NetHack\n--------------------------------------------------------------------------------\n\n  +--------------------------+\n  | A1. Why cross-compile?   |\n  +--------------------------+\n\nBy using cross-compilers on host platforms with fast processors, plenty of RAM\nand storage resources, and an available cross-compiler, it may be possible to\nkeep or resurrect a working version of NetHack on platforms that are now too\nconstrained to carry out the build process natively on the platform anymore.\n\nSome of the constraints in carrying out a native build on the desired target\nmay include, but not necessarily be limited to, any of the following:\n\n  o Access: Somebody with a working knowledge of the NetHack build process may\n    not have the desired target build platform available to them. Conversely,\n    somebody with a keen knowledge of the target platform, and access to it,\n    may not be all that familiar with the NetHack build process.\n\n  o Resources: Address space limitations, insufficient RAM, low amounts of disk\n    storage, slow processor performance, may impede the ability to execute the\n    compile process on the target platform.\n\n  o Compilers: Some of the native compilers on historical platforms may only\n    support the dialect of C that was popular when the platform and compiler\n    were in their prime.\n\nAnother useful potential result of cross-compiling, is that it paves the way\nfor carrying out test and production builds of NetHack for multiple target\nplatforms through automated steps carried out on the host platform(s).\n\n\n  +-------------------------------------+\n  | A2. Building NetHack 3.6 (before)   |\n  +-------------------------------------+\n\nVery generally, the build of NetHack in past versions required the following\nsteps to be carried out:\n\n    1. Compile and link util/makedefs.\n    2. Run makedefs repeatedly with different command line options to produce\n       several output files that are required for:\n        (a) additional build steps to follow, including some header\n            files: pm.h, onames.h, date.h.\n        (b) creation of files, containing information required by,\n            or about the game during its execution, that are stored in a\n            portable, platform-independent way, that need to be inserted\n            into the game package.\n        (c) creation of files containing information required by, or about\n            the game during its execution, that are stored in an architecture\n            and/or platform and/or operating system dependent way, that need\n            to be inserted into the game package (the quest text format is\n            one example).\n    3. Compile and link the level compiler. This step needs to execute\n       work-alike tools to lex and yacc, or needs to build pre-built lex and\n       yacc output (.c, .h files) that are provided in the sys/share part of\n       the NetHack source code tree.\n    4. Execute the level compiler to read dat/*.des files and create\n       a set of binary output files that are architecture and/or operating\n       system dependent on the build platform, for use by the game during\n       its execution.\n    5. Compile and link the dungeon compiler. Like the level compiler, this\n       step needs to execute work-alike tools to lex and yacc, or needs to\n       build pre-built lex and yacc output (.c, .h files) that are provided\n       in the sys/share part of the NetHack source code tree.\n    6. Execute the dungeon compiler to read dat/dungeon.def and create\n       a set of binary output files that are architecture and/or operating\n       system dependent on the build platform, for use by the game during\n       its execution.\n    7. Compile and link several less critical utilities such as uudecode,\n       tile-generation utilities, and so forth, all of which need to execute\n       on the build platform during the build process to produce output files\n       for use during the game, that are reasonably portable (not architecture\n       and/or operating system dependent; only the output of the utilities\n       becomes part of the game package, not the executable utilities\n       themselves.\n    8. Compile and link the game itself.\n    9. Package the game and its required files including the output from\n       previous steps 2b, 2c, 4, 6, 7 and 8 above.\n\nSteps 1, 2a, 2b, 7, and 9 above are not impediments to cross-compiling NetHack.\n\nSteps 2c, 3, 4, 5, 6 and 8 above are impediments to cross-compiling NetHack.\n\nThat's because the files that those steps produce are very much tied to the\nplatform where the build of NetHack is being carried out. Variations between\nplatforms (such as 32-bit vs 64-bit, integer sizes, pointer sizes, processor\nbyte order, data alignment requirements, struct padding and the way bitfields\nare stored) impact the portability of those data files between different\nplatforms and operating systems. If all those things happen to match, the files\nmight, just might, be usable across platforms, but the chances are against it,\nand that certainly cannot be counted on.\n\n  +------------------------------------------+\n  | A3. Building NetHack 3.7 (going forward) |\n  +------------------------------------------+\n\nAgain, very generally, the build of NetHack in 3.7 requires the following\nsteps to be carried out:\n\n    1. Compile and link util/makedefs.\n    2. Run makedefs repeatedly with different command line options to produce\n       several required output files that contain information required by the\n       game, or contain information about the game during its execution, that\n       are stored in a portable, platform-independent way, that need to be\n       inserted into the game package (makedefs -d, -o, -r, -h, -s).\n    3. Compile and link several less critical utilities such as uudecode,\n       tile-generation utilities, and so forth, all of which need to execute\n       on the build platform during the build process to produce output files\n       for use during the game, that are reasonably portable (not architecture\n       and/or operating system dependent; only the output of the utilities\n       becomes part of the game package, not the executable utilities\n       themselves.\n    4. Compile and link the game components for the TARGET; that includes\n       NetHack itself, Lua, and any optional regular-expression or window port\n       libraries that you plan to link into the NetHack game executable.\n    5. Package the game and its required files including the output from\n       previous steps 2, 3 and 4 above.\n\nStep 4 is now the only impediment to cross-compiling NetHack. That impediment\nis resolved by executing step 4 using a cross-compiler that runs on the build (host)\nplatform to produce a resulting binary for the target platform, instead of\nexecuting the native compiler.\n\n  +-----------------------------------------------------+\n  | A4. How was the build procedure reduced to 5 steps? |\n  +-----------------------------------------------------+\n\nThe following are among several design changes planned in NetHack 3.7,\nand these specific changes are what altered the build process to make\ncross-compiling possible:\n\n    o  There is no creation of platform-dependent files, such as the quest\n       text files, by makedefs during the build process. Instead, the quest\n       text files have been converted to Lua and are inserted into the game\n       package for processing by the embedded Lua during execution of NetHack.\n\n    o  There is no build-time level compiler involved. Instead, the level\n       descriptions have been converted to Lua and are inserted into the game\n       package for processing by the embedded Lua during execution of NetHack.\n\n    o  There is no build-time dungeon compiler involved. Instead, the dungeon\n       description has been converted to Lua and is inserted into the game\n       package for processing by the embedded Lua during execution of NetHack.\n\n    o  Some of the build and option information that was formerly produced\n       during build time by makedefs, and contained information about the\n       build-platform specifically, is now produced at runtime within the\n       game under a cross-compiled build. As such, it now produces information\n       applicable to the target NetHack environment, not the build environment.\n\n  +------------------------------------------------------------+\n  | A5. How can I help with the cross-compiling initiative?    |\n  +------------------------------------------------------------+\n\n    o  If you have a favourite target platform (let's call it XX-Platform for\n       example purposes) that you'd like to see NetHack be able to run on, do\n       some research to find out if a cross-compiler exists that:\n           - produces output for XX-Platform.\n           - executes on a platform that you use and love (Linux, Windows,\n             macOS are some examples of platforms that have cross-compilers\n             for other targets available)\n\n    o  Then, make the community, devteam, and others aware that you're starting\n       a cross-compile of NetHack for XX-Platform. You might need to ask some\n       \"starting out\" questions initially, and as you get deeper into it, you\n       might need to ask some tougher questions.\n\n    o  Perhaps consider forking from NetHack on GitHub, and do the\n       cross-compiler work there in your fork. Strive to get it to a point where\n       it's ready to play-test on XX-Platform, or perhaps even use an emulator\n       of XX-Platform if one is available. We live in a time where plenty do.\n\n       Doing your work on a GitHub fork has the following advantages:\n           - It will make it really simple to integrate your work back into\n             the NetHack source tree if that's one of your goals.\n           - It will make it possible and straightforward to merge upstream\n             NetHack changes into your work for the XX-Platform cross-compile\n             so that it stays current with the game as it evolves.\n           - You may get help from others in the form of suggestions, or\n             pull-requests, or offers to join the development. Chances are,\n             you aren't the only person out there that would like to\n             establish/resurrect/maintain NetHack on XX-Platform.\n\n       Have fun!\n\n-----------------------------------------------------------------------------\n Part B - Cross-compiling details\n-----------------------------------------------------------------------------\n\nPart B Contents:\n    B1. Two sets of compiles and procedures\n    B2. What needs to be built and executed on the HOST?\n    B3. What needs to be built for the TARGET?\n    B4. Case sample: msdos\n\n  +-----------------------------------------+\n  | B1. Two sets of compiles and procedures |\n  +-----------------------------------------+\n\nThe HOST is the platform/place that you're running the build procedures using\nthe native compiler/linker, and the cross-compiler/linker that runs on the HOST\nto build the game for a TARGET platform.\n\nYou have to:\n    1. Build mandatory utilities on the HOST.\n    2. Execute the mandatory utilities to generate components that will be used\n       during step 4 to build the game itself, or that will generate components\n       that will become part of the TARGET game package.\n    3. Build optional or enhancing utilities on the HOST, execute those\n       optional or enhancing utilities on the HOST to generate components that\n       will become part of the TARGET game package.\n    4. Execute a supported cross-compiler to compile the rest of the game\n       components like NetHack, Lua, and any optional libraries (the word\n       \"supported\", in this sense, means a compiler that runs on your HOST\n       build platform, and generates output executable files for the TARGET\n       platform).\n\nIt should be mentioned that you can execute the cross-compile build approach\nto generate binaries for the same platform as the host, where the HOST\ncompiler and the TARGET compiler are the same.\n\n\n  +------------------------------------------------------+\n  | B2. What needs to be built and executed on the HOST? |\n  +------------------------------------------------------+\n\nOn the HOST, here are the mandatory things that have to be built.\n\n    a) Using the HOST native compiler, build  HOST native utility makedefs\n\n       Compile and link the following with these compiler switches:\n         -DCROSSCOMPILE\n       from sources: util/makedefs.c, src/mdlib.c, src/monst.c, src/objects.c\n                     src/date.c, src/alloc.c\n\n    b) Execute HOST native makedefs utility, util/makedefs, as follows:\n          Required for complete packaging of the game, but not the C source\n          game compile:\n              util/makedefs -d\n              util/makedefs -r\n              util/makedefs -h\n              util/makedefs -s\n\n    c) Using the HOST native compiler, build these additional utilities if your\n       target platform requires components that they produce. It is important\n       to note that all of the required source files need to be compiled to\n       native obj files for linking into the HOST-side utility. Some of the\n       source files (src/monst.c, src/objects.c) were likely already compiled\n       as native HOST-side obj files in order to build the native HOST utility\n       'makedefs' HOST utility above, and you don't need to compile them again\n       for use in linking other HOST utilities if the HOST-native obj files\n       produced from them are still around.\n\n       NOTE: There are some source files that need to be compiled for linking\n       into utilities that are needed on the HOST side, but that are also\n       needed again later as TARGET obj files for linking into the TARGET\n       executable, and therefore must be compiled twice.\n       They include: src/drawing.c, src/objects.c, src/monst.c,\n       src/alloc.c, util/panic.c. It is important to keep the compiled\n       HOST-side obj files produced by the HOST native compiler distinct from\n       the TARGET-side obj files produced by the cross-compiler. That can be\n       accomplished either by naming the generated object files a little\n       differently (perhaps with a suffix) between the HOST-side and the\n       TARGET-side, or by placing the HOST-side obj files and the TARGET-side\n       obj files into distinct, different directories during the build process.\n       Use whatever method works best for your cross-compile effort and tools.\n\n          util/dlb\n\n                   from sources: src/dlb.c, src/dlb_main.c, src/alloc.c,\n                                 util/panic.c\n                   purpose:      For packaging up many files that are\n                                 required components of the TARGET game\n                                 into a single nhdat or nhdat370 combined\n                                 file\n\n          util/uudecode\n\n                   from sources: sys/share/uudecode.c\n                   purpose:      convert some binary files, that are\n                                 distributed in the NetHack sources in\n                                 uuencoded format, back into their\n                                 original binary state\n          util/tilemap\n\n                   from sources: win/share/tilemap.c\n                   purpose:      produce output file src/tile.c that is\n                                 required for building TARGET packages with\n                                 tile support\n\n          util/tile2bmp\n\n                   from sources: win/share/tile2bmp.c, win/share/tiletext.c,\n                                 win/share/tilemap.c, src/drawing.c,\n                                 src/monst.c, src/objects.c\n                   purpose:      Read win/share/monsters.txt,\n                                 win/share/objects.txt and win/share/other.txt\n                                 files and produce a .bmp file.\n\n          util/gif2txt\n\n                   from sources: win/share/gifread.c, win/share/tiletext.c,\n                                 win/share/tilemap.c, src/drawing.c,\n                                 src/monst.c, src/objects.c,\n                                 src/alloc.c, util/panic.c\n                   purpose:      Read win/share/monsters.txt,\n                                 win/share/objects.txt and win/share/other.txt\n                                 files and produce a .gif file.\n\n          util/ppmwrite\n\n                   from sources: win/share/ppmwrite.c, win/share/tiletext.c,\n                                 win/share/tilemap.c, src/drawing.c,\n                                 src/monst.c, src/objects.c,\n                                 src/alloc.c, util/panic.c\n                   purpose:      Read win/share/monsters.txt,\n                                 win/share/objects.txt and win/share/other.txt\n                                 files and produce a .ppm file.\n\n\n  +--------------------------------------------+\n  | B3. What needs to be built for the TARGET? |\n  +--------------------------------------------+\n\n\nFor the TARGET side, here are the mandatory things that have to be built via\nthe HOST-executed cross-compiler that generates code for the TARGET platform.\n\nUsing the cross-compiler, build the following targets:\n\n    a) NetHack sources (core is mandatory)\n\n       With the cross-compiler and linker for the TARGET platform,\n       cross-compile and link with these compiler switches:\n         -DCROSSCOMPILE and -DCROSSCOMPILE_TARGET\n\n       core sources (2024): src/allmain.c, src/alloc.c, src/apply.c,\n                           src/artifact.c, src/attrib.c, src/ball.c,\n                           src/bones.c, src/botl.c, src/calendar.c,\n                           src/coloratt.c, src/cmd.c, src/dbridge.c,\n                           src/decl.c, src/detect.c, src/dig.c, src/display.c,\n                           src/dlb.c, src/do.c, src/do_name.c, src/do_wear.c,\n                           src/dog.c, src/dogmove.c, src/dokick.c,\n                           src/dothrow.c, src/drawing.c, src/dungeon.c,\n                           src/eat.c, src/end.c, src/engrave.c, src/exper.c,\n                           src/explode.c, src/extralev.c, src/files.c,\n                           src/fountain.c, src/getpos.c, src/glyphs.c,\n                           src/hack.c, src/hacklib.c, src/insight.c,\n                           src/invent.c, src/isaac64.c, src/light.c,\n                           src/lock.c, src/mail.c, src/makemon.c, src/mcastu.c,\n                           src/mdlib.c, src/mhitm.c, src/mhitu.c, src/minion.c,\n                           src/mklev.c, src/mkmap.c, src/mkmaze.c, src/mkobj.c,\n                           src/mkroom.c, src/mon.c, src/mondata.c,\n                           src/monmove.c, src/monst.c, src/mplayer.c,\n                           src/mthrowu.c, src/muse.c, src/music.c,\n                           src/nhlua.c, src/nhlsel.c, src/nhlobj.c,\n                           src/nhmd4.c, src/objects.c, src/o_init.c,\n                           src/objnam.c, src/options.c, src/pager.c,\n                           src/pickup.c, src/pline.c, src/polyself.c,\n                           src/potion.c, src/pray.c, src/priest.c, src/quest.c,\n                           src/questpgr.c, src/read.c, src/rect.c,\n                           src/region.c, src/report.c, src/restore.c,src/rip.c,\n                           src/rnd.c, src/role.c, src/rumors.c, src/save.c,\n                           src/selvar.c, src/sfstruct.c, src/shk.c,\n                           src/shknam.c, src/sit.c, src/sounds.c, src/sp_lev.c,\n                           src/spell.c, src/stairs.c, src/steal.c, src/steed.c,\n                           src/symbols.c, src/sys.c, src/teleport.c,\n                           src/timeout.c, src/topten.c, src/track.c,\n                           src/trap.c, src/u_init.c, src/uhitm.c,\n                           src/utf8map.c, src/vault.c, src/version.c,\n                           src/vision.c, src/weapon.c, src/were.c, src/wield.c,\n                           src/windows.c, src/wizard.c, src/wizcmds.c,\n                           src/worm.c, src/worn.c, src/write.c, src/zap.c,\n                           sys/share/cppregex.cpp\n\n       tty sources:        win/tty/getline.c, win/tty/termcap.c,\n                           win/tty/topl.c, win/tty/wintty.c\n\n       generated (if req'd):\n                          src/tile.c\n\n       plus your platform-specific source files that contain main, typically\n       *main.c, and unix support in *unix.c, tty support in *tty.c, and other\n       system support in *sys.c as well as others sources pertaining to your\n       specific target platform(s).\n\n    b) Lua (mandatory in 3.7)\n\n          lib/lua-5.4.6/src\n\n                   from sources: lua.c, lapi.c, lauxlib.c, lbaselib.c, lcode.c,\n                                 lcorolib.c, lctype.c, ldblib.c, ldebug.c,\n                                 ldo.c, ldump.c, lfunc.c, lgc.c, linit.c,\n                                 liolib.c, llex.c, lmathlib.c, lmem.c,\n                                 loadlib.c, lobject.c, lopcodes.c,\n                                 loslib.c, lparser.c, lstate.c, lstring.c,\n                                 lstrlib.c, ltable.c, ltablib.c, ltm.c,\n                                 lundump.c, lutf8lib.c, lvm.c, lzio.c,\n                                 lbitlib.c\n                   purpose:      links into the game executable to interpret\n                                 lua level description files, lua dungeon\n                                 description files, and a lua quest text file.\n\n    d) recover (optional if desired/required; some targets have recover\n       functionality built into NetHack itself)\n\n    c) Additional optional library packages/obj files as required\n\n          lib/pdcurses/...\n          or lib/pdcursesmod/...\n\n                   from sources: addch.c, addchstr.c, addstr.c, attr.c, beep.c,\n                                 bkgd.c, border.c, clear.c, color.c, delch.c,\n                                 deleteln.c, getch.c, getstr.c, getyx.c,\n                                 inch.c, inchstr.c, initscr.c, inopts.c,\n                                 insch.c, insstr.c, instr.c, kernel.c,\n                                 keyname.c, mouse.c, move.c, outopts.c,\n                                 overlay.c, pad.c, panel.c, printw.c,\n                                 refresh.c, scanw.c, scr_dump.c, scroll.c,\n                                 slk.c, termattr.c, touch.c, util.c, window.c,\n                                 debug.c, pdcclip.c, pdcdisp.c, pdcgetsc.c,\n                                 pdckbd.c, pdcutil.c\n                   purpose:      underlying curses platform support for some\n                                 target platforms where inclusion of the\n                                 NetHack curses window port in win/curses is\n                                 desired\n\n  +-------------------------+\n  | B4. Case sample: msdos  |\n  +-------------------------+\n\nCross-compiler used:     Andrew Wu's djgpp cross-compiler\nCross-compiler url:      https://github.com/andrewwutw/build-djgpp\nCross-compiler pre-built binary downloads:\n    https://github.com/andrewwutw/build-djgpp/releases\n\n    Cross-compiler bits tested:\n           https://github.com/andrewwutw/build-djgpp\n       and the pre-built binary for your platform from:\n           https://github.com/andrewwutw/build-djgpp/releases\n       and a DOS-extender (for including in msdos packaging) from\n           http://sandmann.dotster.com/cwsdpmi/csdpmi7b.zip\n       and pdcurses from:\n           https://github.com/wmcbrine/PDCurses.git\n       or pdcursesmod from:\n           https://github.com/Bill-Gray/PDCursesMod.git\n\n    - A bash script to download that djgpp cross-compiler and associated\n      pieces for either linux or macOS is available:\n\n           bash sys/msdos/fetch-cross-compiler.sh\n\n    That script won't install anything, it just does file fetches and stores\n    them in subfolders of lib. The linux.370 and macOS.370 hints files are\n    configured to find the cross-compiler there if you add\n        CROSS_TO_MSDOS=1\n    on your make command line.\n\n    Note: Both the fetch-cross-compiler.sh bash script and the msdos\n    cross-compile and package procedures require unzip and zip to be available\n    on your host build system.\n\n    On your linux host:\n\n        cd sys/unix ; sh setup.sh hints/linux.370 ; cd ../..\n        make fetch-lua\n\n    On your macOS host:\n\n        cd sys/unix ; sh setup.sh hints/macOS.370 ; cd ../..\n        make fetch-lua\n\n    The MSDOS cross-compile can then be carried out by specifying\n    CROSS_TO_MSDOS=1 on the make command line:\n\n        make CROSS_TO_MSDOS=1 all\n        make CROSS_TO_MSDOS=1 package\n\n    You can explicitly include tty and curses support if desired. The default\n    you'll end up with is a tty-only cross-compile build:\n\n        make WANT_WIN_TTY=1 WANT_WIN_CURSES=1 CROSS_TO_MSDOS=1 package\n\n    Result: The \"make package\" target will bundle all of the necessary\n            components to run NetHack on msdos into a folder:\n                targets/msdos/pkg\n            and then it zips the contents of that folder into:\n                targets/msdos/nh370dos.zip\n\n    Also note that building the msdos targets using the make command\n    above, does not preclude you from building local linux or macOS\n    targets as well. Just drop the CROSS_TO_MSDOS=1 from the make\n    command line. That's because the cross-compiler hints additions are\n    enclosed inside ifdef sections and won't interfere with the\n    non-cross-compile build in that case.\n\n  +-------------------------+\n  | B5. Case sample: amiga  |\n  +-------------------------+\n\nDisclaimer: This is a minimal recipe, just to help someone else get\n            started if they have a desire to get a full cross-compile of\n            NetHack going for the Amiga.\n            See CAVEATS below.\n\nCross-compiler used:     bebbo's amiga-gcc\nCross-compiler url:      https://github.com/bebbo/amiga-gcc\n\n    To our knowledge, a pre-built copy of the cross-compiler isn't available,\n    so you will likely have to obtain the cross-compiler sources via git and\n    build it on your system.\n\n    The build prerequisite packages for building the compiler on Ubuntu can be\n    easily obtained:\n\n        sudo apt install make wget git gcc g++ lhasa libgmp-dev \\\n            libmpfr-dev libmpc-dev flex bison gettext texinfo ncurses-dev \\\n            autoconf rsync\n\n    The build prerequisite packages for macOS via homebrew are documented but\n    not tested by us any of us to date.\n\n        brew install bash wget make lhasa gmp mpfr libmpc flex gettext \\\n        texinfo gcc make autoconf\n\n    After installing the prerequite packages and the cross-compiler\n    it was a straightforward build:\n\n            git clone https://github.com/bebbo/amiga-gcc.git\n            cd amiga-gcc\n            make update\n\n           [Note that you may have to take ownership of the files in the bebbo\n            repo via chown before successfully carrying out the next steps]\n\n            make clean\n            make clean-prefix\n            date; make all -j3 >&b.log; date\n\n    The compiler pieces are installed in /opt/amiga by default. If you prefer,\n    you can alter the prefix before you build if you want. The instructions\n    for doing so were spelled out at the time of this writing at:\n\n        https://github.com/bebbo/amiga-gcc\n\n    On your linux host:\n\n        cd sys/unix ; sh setup.sh hints/linux.370 ; cd ../..\n        make fetch-lua\n\n    On your macOS host:\n\n        cd sys/unix ; sh setup.sh hints/macOS.370 ; cd ../..\n        make fetch-lua\n\n    The Amiga cross-compile can then be carried out by specifying\n    CROSS_TO_AMIGA=1 on the make command line:\n\n        make CROSS_TO_AMIGA=1 all\n        make CROSS_TO_AMIGA=1 package\n\n    You can explicitly include tty and curses support if desired, otherwise\n    you'll end up with a tty-only cross-compile build. The SDL1 pdcurses\n    support has not been tested.\n\n        make WANT_WIN_TTY=1 WANT_WIN_CURSES=1 CROSS_TO_AMIGA=1 all\n\n    Result: The \"make package\" target will bundle the (hopefully) necessary\n            components to run NetHack on msdos into a folder:\n                targets/amiga/pkg\n            and then it zips the contents of that folder into:\n                targets/amiga/nh370ami.zip\n\n    Also note that building the amiga targets using the make command\n    above, does not preclude you from building local linux or macOS\n    targets as well. Just drop the CROSS_TO_AMIGA=1 from the make\n    command line.\n\n    The cross-compiler hints additions are enclosed inside ifdef sections\n    and won't interfere with the non-cross-compile build in that case.\n\n    CAVEATS: The original NetHack Amiga build steps included the source for\n             some utilities that were built and executed on the amiga:\n                 txt2iff and xpm2iff\n             as part of the NetHack build procedure on amiga.\n             Those did not compile out-of-the-box on the linux host. They\n             will either have to be:\n             - ported to build and run on the linux or macOS cross-compile\n               host\n          or\n\n             - their functionality will have to be rolled into amiga NetHack\n               itself and executed on the target Amiga the first time the game\n               is run, perhaps.\n\n    If you make headway, or are successful getting a working copy of\n    NetHack going on the amiga, drop us a note at devteam@nethack.org.\n\n  +--------------------------------+\n  | B6. Case sample: Web Assembly  |\n  +--------------------------------+\n\nCredit: The initial Web Assembly cross compile was found in a pull request:\n            https://github.com/NetHack/NetHack/pull/385\n        by apowers313. The pull request was merged with some accompanying\n        NetHack source tree integration changes in early October 2020.\n\nCross-compiler used: emscripten\nCross-compiler url: https://emscripten.org/docs/getting_started/downloads.html\n\n    Here's a brief guide to obtaining the cross-compiler sources via git and\n    building it on your system.\n\n    For Ubuntu, the build prerequisite packages for building the compiler can\n    be easily obtained:\n\n        sudo apt-get install python3 cmake default-jre\n\n    For macOS, you will need to install Xcode, git, cmake, Python 3.5 or new\n    (at time of this writing).\n\n    After installing the prerequite packages above, obtain the cross-compiler\n    via git and build it from the directory of your choice using steps similar\n    to these:\n\n            git clone https://github.com/emscripten-core/emsdk.git\n            cd emsdk\n            git pull\n            ./emsdk install latest\n            ./emsdk activate latest\n            source ./emsdk_env.sh\n\n    The steps above reflect what was outlined at this url at the time\n    of writing:\n\n            https://emscripten.org/docs/getting_started/downloads.html\n\n    That is the definitive source and trumps anything documented here.\n\n    On your linux host, prepare to cross-compile NetHack as follows:\n\n        cd sys/unix ; sh setup.sh hints/linux.370 ; cd ../..\n        make fetch-lua\n\n    On your macOS host, prepare to cross-compile NetHack as follows:\n\n        cd sys/unix ; sh setup.sh hints/macOS.370 ; cd ../..\n        make fetch-lua\n\n    Then, cross-compile to targets/wasm as follows:\n\n        make CROSS_TO_WASM=1\n\n    You can build src/libnh.a from pull request 385 as follows:\n\n        make WANT_LIBNH=1\n\n    Do not add any additional windowport interfaces to your build\n    (such as WANT_WIN_TTY=1 WANT_WIN_CURSES=1 WANT_WIN_X11=1 or\n    WANT_WIN_QT=1) as those aren't applicable to the Web Assembly\n    or nethacklib builds. A \"shim\" pseudo-windowport is included\n    from pull request 385.\n\n    Result: As mentioned, the wasm cross-compile will end up in\n            targets/wasm and the nethacklib.a will end up in\n            src.\n\n    The cross-compiler hints additions are enclosed inside ifdef sections\n    and shouldn't interfere with the non-cross-compile builds using\n    hints/linux.370 or hints/macOS.370.\n\n\n  +--------------------------------+\n  | B7. Case sample: mips          |\n  +--------------------------------+\n\nCross-compiler used: gcc-mipsel-linux-gnu, g++-mipsel-linux-gnu\nCross-compiler url:\n\n    Here's a brief guide to obtaining the cross-compiler sources on an\n    Ubuntu system and building NetHack with it.\n\n    For Ubuntu, the build prerequisite packages for building the compiler can\n    be easily obtained:\n        sudo apt install gcc-mipsel-linux-gnu\n        sudo apt install g++-mipsel-linux-gnu\n\n    On your linux host, prepare to cross-compile NetHack as follows:\n        cd sys/unix ; sh setup.sh hints/linux.370 ; cd ../..\n        make fetch-lua\n\n    Then, cross-compile to targets/mips as follows:\n        make CROSS_TO_MIPS=1 fetch-ncurses\n        make CROSS_TO_MIPS=1 package\n\n    Do not add any additional windowport interfaces to your build\n    (such as WANT_WIN_TTY=1 WANT_WIN_CURSES=1 WANT_WIN_X11=1 or\n    WANT_WIN_QT=1) as those aren't applicable to the mips cross-compile.\n\n    The cross-compiler hints additions are enclosed inside ifdef sections\n    and shouldn't interfere with the non-cross-compile builds using\n    hints/linux.370 or hints/macOS.370.\n\n\n---\n\n"
        },
        {
          "name": "DEVEL",
          "type": "tree",
          "content": null
        },
        {
          "name": "Files",
          "type": "blob",
          "size": 25.4580078125,
          "content": "This is a listing of all files in a full NetHack 3.7 distribution, organized\nin their standard manner on a UNIX system.  It indicates which files are\nnecessary for which versions, so that you can tell which files may be deleted\nfrom or not transferred to your system if you wish.\n\n(Note: we ignore various dot files related to git.)\n\n.:\n(files in top directory)\n.clang-format        Cross-compiling      Files\nPorting              README               azure-pipelines.yml\n\nDEVEL:\n(files for people developing changes to NetHack)\nDeveloper.txt      VERSION            code_features.txt  code_style.txt\ngit_recipes.txt    gitinfo.pl         nhgitset.pl\n\nDEVEL/DOTGIT:\n(file for people developing changes to NetHack)\nTARGET\n\nDEVEL/hooksdir:\n(files for people developing changes to NetHack)\nNHadd               NHgithook.pm        NHsubst\nNHtext              TARGET              applypatch-msg\ncommit-msg          nhhelp              nhsub\npost-applypatch     post-checkout       post-commit\npost-merge          post-rewrite        pre-applypatch\npre-auto-gc         pre-commit          pre-push\npre-rebase          prepare-commit-msg\n\ndat:\n(files for all versions)\nArc-fila.lua  Arc-filb.lua  Arc-goal.lua  Arc-loca.lua  Arc-strt.lua\nBar-fila.lua  Bar-filb.lua  Bar-goal.lua  Bar-loca.lua  Bar-strt.lua\nCav-fila.lua  Cav-filb.lua  Cav-goal.lua  Cav-loca.lua  Cav-strt.lua\nGENFILES      Hea-fila.lua  Hea-filb.lua  Hea-goal.lua  Hea-loca.lua\nHea-strt.lua  Kni-fila.lua  Kni-filb.lua  Kni-goal.lua  Kni-loca.lua\nKni-strt.lua  Mon-fila.lua  Mon-filb.lua  Mon-goal.lua  Mon-loca.lua\nMon-strt.lua  Pri-fila.lua  Pri-filb.lua  Pri-goal.lua  Pri-loca.lua\nPri-strt.lua  Ran-fila.lua  Ran-filb.lua  Ran-goal.lua  Ran-loca.lua\nRan-strt.lua  Rog-fila.lua  Rog-filb.lua  Rog-goal.lua  Rog-loca.lua\nRog-strt.lua  Sam-fila.lua  Sam-filb.lua  Sam-goal.lua  Sam-loca.lua\nSam-strt.lua  Tou-fila.lua  Tou-filb.lua  Tou-goal.lua  Tou-loca.lua\nTou-strt.lua  Val-fila.lua  Val-filb.lua  Val-goal.lua  Val-loca.lua\nVal-strt.lua  Wiz-fila.lua  Wiz-filb.lua  Wiz-goal.lua  Wiz-loca.lua\nWiz-strt.lua  air.lua       asmodeus.lua  astral.lua    baalz.lua\nbigrm-1.lua   bigrm-2.lua   bigrm-3.lua   bigrm-4.lua   bigrm-5.lua\nbigrm-6.lua   bigrm-7.lua   bigrm-8.lua   bigrm-9.lua   bigrm-10.lua\nbigrm-11.lua  bigrm-12.lua  bogusmon.txt  castle.lua    cmdhelp\ndata.base     dungeon.lua   earth.lua     engrave.txt   epitaph.txt\nfakewiz1.lua  fakewiz2.lua  fire.lua      hellfill.lua  help\nhh            history       juiblex.lua   keyhelp       knox.lua\nlicense       luahelper     medusa-1.lua  medusa-2.lua  medusa-3.lua\nmedusa-4.lua  minefill.lua  minend-1.lua  minend-2.lua  minend-3.lua\nminetn-1.lua  minetn-2.lua  minetn-3.lua  minetn-4.lua  minetn-5.lua\nminetn-6.lua  minetn-7.lua  nhcore.lua    nhlib.lua     opthelp\noptmenu       oracle.lua    oracles.txt   orcus.lua     quest.lua\nrumors.fal    rumors.tru    sanctum.lua   soko1-1.lua   soko1-2.lua\nsoko2-1.lua   soko2-2.lua   soko3-1.lua   soko3-2.lua   soko4-1.lua\nsoko4-2.lua   symbols       themerms.lua  tower1.lua    tower2.lua\ntower3.lua    tribute       tut-1.lua     tut-2.lua     usagehlp\nvalley.lua    water.lua     wizard1.lua   wizard2.lua   wizard3.lua\nwizhelp\n\ndoc:\n(files for all versions)\nGbk-1pg-pfx.mn     Gbk-1pg-sfx.mn     Guidebook.mn       Guidebook.tex\nGuidebook.txt      config.nh          dlb.6              dlb.txt\nfixes1-0.txt       fixes1-4-f.txt     fixes2-2.txt       fixes2-3-e.txt\nfixes3-0.txt       fixes3-0-pl01.txt  fixes3-0-pl02.txt  fixes3-0-pl03.txt\nfixes3-0-pl04.txt  fixes3-0-pl05.txt  fixes3-0-pl06.txt  fixes3-0-pl07.txt\nfixes3-0-pl08.txt  fixes3-0-pl09.txt  fixes3-0-pl10.txt  fixes3-1-1.txt\nfixes3-1-2.txt     fixes3-1-3.txt     fixes3-2-0.txt     fixes3-2-1.txt\nfixes3-2-2.txt     fixes3-2-3.txt     fixes3-3-0.txt     fixes3-3-1.txt\nfixes3-4-0.txt     fixes3-4-1.txt     fixes3-4-2.txt     fixes3-4-3.txt\nfixes3-5-0.txt     fixes3-6-0.txt     fixes3-6-1.txt     fixes3-6-2.txt\nfixes3-6-3.txt     fixes3-6-4.txt     fixes3-6-5.txt     fixes3-6-6.txt\nfixes3-6-7.txt     fixes3-7-0.txt     fixesX-X-X.txt     lua.adoc\nmakedefs.6         makedefs.txt       mn.7               mn.txt\nmnh.7              mnh.txt            nethack.6          nethack.txt\noptions.txt        recover.6          recover.txt        sound.txt\ntmac.n             tmac.nh            window.txt\n\ninclude:\n(files for X versions)\ntile2x11.h  winX.h      xwindow.h   xwindowp.h\n\n(files for all versions)\nalign.h       artifact.h    artilist.h    attrib.h      botl.h\ncolor.h       config.h      config1.h     context.h     coord.h\ncstd.h        decl.h        defsym.h      dgn_file.h    display.h\ndlb.h         dungeon.h     engrave.h     extern.h      flag.h\nfnamesiz.h    func_tab.h    global.h      hack.h        hacklib.h\ninteger.h     isaac64.h     lint.h        mail.h        mextra.h\nmfndpos.h     micro.h       mkroom.h      monattk.h     mondata.h\nmonflag.h     monst.h       monsters.h    nhmd4.h       nhregex.h\nobj.h         objclass.h    objects.h     optlist.h     patchlevel.h\npcconf.h      permonst.h    prop.h        quest.h       rect.h\nregion.h      rm.h          seffects.h    selvar.h      skills.h\nsndprocs.h    sp_lev.h      spell.h       stairs.h      sym.h\nsys.h         tcap.h        tileset.h     timeout.h     tradstdc.h\ntrap.h        unixconf.h    vision.h      vmsconf.h     warnings.h\nwinami.h      wincurs.h     windconf.h    winprocs.h    wintype.h\nyou.h         youprop.h\n\n(file for tty versions)\nwintty.h\n\noutdated:\n(files that are no longer maintained for current game code)\n.travis.yml\n\noutdated/dat:\n(files that are no longer maintained for current game code)\nsymbols\n\noutdated/include:\n(files for GEM versions)\nbitmfile.h  gem_rsc.h   load_img.h  wingem.h\n\n(file for GNOME versions)\nwinGnome.h\n\n(files for all versions)\namiconf.h   beconf.h    def_os2.h   os2conf.h   system.h    tosconf.h\ntrampoli.h  wceconf.h\n\n(files for various Macintosh versions)\nmac-carbon.h  mac-qt.h      mac-term.h    macconf.h     macpopup.h\nmactty.h      macwin.h      mttypriv.h\n\noutdated/sys/amiga:\n(files for Amiga versions - untested for 3.7)\nBuild.ami     Install.ami   Makefile.agc  Makefile.ami  NetHack.cnf\namidos.c      amidos.p      amifont.uu    amifont8.uu   amigst.c\namii.hlp      amimenu.c     amirip.c      amistack.c    amitty.c\namiwind.c     amiwind.p     clipwin.c     colorwin.c    grave16.xpm\nifchange      mkdmake       txt2iff.c     winamenu.c    winami.c\nwinami.p      winchar.c     windefs.h     winext.h      winfuncs.c\nwinkey.c      winproto.h    winreq.c      winstr.c      xpm2iff.c\n\noutdated/sys/atari:\n(files for Atari version - untested for 3.7)\nInstall.tos   atarifnt.uue  nethack.mnu   setup.g       tos.c\nunx2atar.sed\n\noutdated/sys/be:\n(files for BeOS version - untested for 3.7)\nREADME    bemain.c\n\noutdated/sys/mac:\n(files for 68K Macintosh versions)\nFiles.r       Install.mw    MacHelp       NHDeflts      NHrsrc.hqx\nNHsound.hqx   News          README        carbon.plist  dprintf.c\nmaccurs.c     macerrs.c     macfile.c     machelp.hqx   macmain.c\nmacmenu.c     mactopl.c     mactty.c      macunix.c     macwin.c\nmgetline.c    mmodal.c      mrecover.c    mrecover.hqx  mttymain.c\n\noutdated/sys/msdos:\n(files for deprecated real mode msdos version)\nMakefile.BC   Makefile.MSC  SCHEMA35.MSC  moveinit.pat  ovlinit.c\nschema1.BC    schema2.BC    schema3.MSC\n\noutdated/sys/os2:\n(files for OS/2 version - untested for 3.7)\nInstall.os2   Makefile.os2  nhpmico.uu    os2.c\n\noutdated/sys/unix:\n(files that are no longer maintained for current game code)\nREADME.linux    cross-amiga.sh\n\noutdated/sys/unix/hints:\n(files that are no longer maintained for current game code)\ncross-amiga     linux           linux-chroot    linux-qt4\nlinux-qt5       linux-x11       macosx          macosx10.5\nmacosx10.7      macosx10.8      macosx10.10     macosx10.10-qt\nmacosx10.14\n\noutdated/sys/unix/hints/include:\n(files that are no longer maintained for current game code)\ncross-amiga-post  cross-amiga-pre\n\noutdated/sys/vms:\n(files that are no longer maintained for current game code)\nlev_lex.h\n\noutdated/sys/wince:\n(files for Windows CE and PocketPC - untested for 3.7)\nInstall.ce    bootstrp.mak  celib.c       cesetup.bat   cesound.c\ndefaults.nh   keypad.uu     menubar.uu    mhaskyn.c     mhaskyn.h\nmhcmd.c       mhcmd.h       mhcolor.c     mhcolor.h     mhdlg.c\nmhdlg.h       mhfont.c      mhfont.h      mhinput.c     mhinput.h\nmhmain.c      mhmain.h      mhmap.c       mhmap.h       mhmenu.c\nmhmenu.h      mhmsg.h       mhmsgwnd.c    mhmsgwnd.h    mhrip.c\nmhrip.h       mhstatus.c    mhstatus.h    mhtext.c      mhtext.h\nmhtxtbuf.c    mhtxtbuf.h    mswproc.c     newres.h      nhico.uu\nresource.h    winMS.h       winhack.c     winhack.rc    winhcksp.rc\nwinmain.c\n\noutdated/sys/wince/ceinc:\n(header files for Windows CE and PocketPC - untested for 3.7)\nassert.h  errno.h   fcntl.h\n\noutdated/sys/wince/ceinc/sys:\n(sys/stat.h for Windows CE and PocketPC - untested for 3.6.2)\nstat.h\n\noutdated/sys/windows:\n(files that are no longer maintained for current game code)\ntravis-gcc.sh\n\noutdated/sys/windows/vs:\n(files that are no longer maintained for current game code)\ntravisci.sh\n\noutdated/win/Qt3:\n(files for the Qt 3 widget library - X11, Windows, Mac OS X, or Qtopia)\nInfo.plist           Install.Qt           knethack.lnk\nknh-mini.xpm         knh.xpm              qpe-nethack.control\nqt3_clust.cpp        qt3_clust.h          qt3_kde0.h\nqt3_win.cpp          qt3_win.h            qt3_xpms.h\nqt3tableview.cpp     qt3tableview.h       tileedit.cpp\ntileedit.h\n\noutdated/win/gem:\n(files for GEM versions - untested for 3.7)\nInstall.gem  bitmfile.c   gem_rsc.uu   gem_rso.uu   gr_rect.c    gr_rect.h\nload_img.c   tile2img.c   title.uu     wingem.c     wingem1.c    xpm2img.c\n\noutdated/win/gnome:\n(files for GNOME versions - untested for 3.7)\nREADME      gn_xpms.h   gnaskstr.c  gnaskstr.h  gnbind.c    gnbind.h\ngnglyph.c   gnglyph.h   gnmain.c    gnmain.h    gnmap.c     gnmap.h\ngnmenu.c    gnmenu.h    gnmesg.c    gnmesg.h    gnomeprv.h  gnopts.c\ngnopts.h    gnplayer.c  gnplayer.h  gnsignal.c  gnsignal.h  gnstatus.c\ngnstatus.h  gntext.c    gntext.h    gnworn.c    gnworn.h    gnyesno.c\ngnyesno.h   mapbg.xpm\n\nsound/fmod:\n(file in top directory)\nfmod.c\n\nsound/macsound:\n(file in top directory)\nmacsound.m\n\nsound/qtsound:\n(file in top directory)\nREADME.md\n\nsound/wav:\n(files in top directory)\nREADME                       attributions.txt\nsa2_xpleveldown.uu           sa2_xplevelup.uu\nse_squeak_A.uu               se_squeak_B.uu\nse_squeak_B_flat.uu          se_squeak_C.uu\nse_squeak_D.uu               se_squeak_D_flat.uu\nse_squeak_E.uu               se_squeak_E_flat.uu\nse_squeak_F.uu               se_squeak_F_sharp.uu\nse_squeak_G.uu               se_squeak_G_sharp.uu\nsound_Bell.uu                sound_Bugle_A.uu\nsound_Bugle_B.uu             sound_Bugle_C.uu\nsound_Bugle_D.uu             sound_Bugle_E.uu\nsound_Bugle_F.uu             sound_Bugle_G.uu\nsound_Drum_Of_Earthquake.uu  sound_Fire_Horn.uu\nsound_Frost_Horn.uu          sound_Leather_Drum.uu\nsound_Magic_Flute_A.uu       sound_Magic_Flute_B.uu\nsound_Magic_Flute_C.uu       sound_Magic_Flute_D.uu\nsound_Magic_Flute_E.uu       sound_Magic_Flute_F.uu\nsound_Magic_Flute_G.uu       sound_Magic_Harp_A.uu\nsound_Magic_Harp_B.uu        sound_Magic_Harp_C.uu\nsound_Magic_Harp_D.uu        sound_Magic_Harp_E.uu\nsound_Magic_Harp_F.uu        sound_Magic_Harp_G.uu\nsound_Tooled_Horn_A.uu       sound_Tooled_Horn_B.uu\nsound_Tooled_Horn_C.uu       sound_Tooled_Horn_D.uu\nsound_Tooled_Horn_E.uu       sound_Tooled_Horn_F.uu\nsound_Tooled_Horn_G.uu       sound_Wooden_Flute_A.uu\nsound_Wooden_Flute_B.uu      sound_Wooden_Flute_C.uu\nsound_Wooden_Flute_D.uu      sound_Wooden_Flute_E.uu\nsound_Wooden_Flute_F.uu      sound_Wooden_Flute_G.uu\nsound_Wooden_Harp_A.uu       sound_Wooden_Harp_B.uu\nsound_Wooden_Harp_C.uu       sound_Wooden_Harp_D.uu\nsound_Wooden_Harp_E.uu       sound_Wooden_Harp_F.uu\nsound_Wooden_Harp_G.uu       uu2wav.cmd\nuu2wav.sh\n\nsound/windsound:\n(file in top directory)\nwindsound.c\n\nsrc:\n(files for all versions)\nallmain.c   alloc.c     apply.c     artifact.c  attrib.c    ball.c\nbones.c     botl.c      calendar.c  cmd.c       coloratt.c  date.c\ndbridge.c   decl.c      detect.c    dig.c       display.c   dlb.c\ndo.c        do_name.c   do_wear.c   dog.c       dogmove.c   dokick.c\ndothrow.c   drawing.c   dungeon.c   eat.c       end.c       engrave.c\nexper.c     explode.c   extralev.c  files.c     fountain.c  getpos.c\nglyphs.c    hack.c      hacklib.c   insight.c   invent.c    isaac64.c\nlight.c     lock.c      mail.c      makemon.c   mcastu.c    mdlib.c\nmhitm.c     mhitu.c     minion.c    mklev.c     mkmap.c     mkmaze.c\nmkobj.c     mkroom.c    mon.c       mondata.c   monmove.c   monst.c\nmplayer.c   mthrowu.c   muse.c      music.c     nhlobj.c    nhlsel.c\nnhlua.c     nhmd4.c     o_init.c    objects.c   objnam.c    options.c\npager.c     pickup.c    pline.c     polyself.c  potion.c    pray.c\npriest.c    quest.c     questpgr.c  read.c      rect.c      region.c\nreport.c    restore.c   rip.c       rnd.c       role.c      rumors.c\nsave.c      selvar.c    sfstruct.c  shk.c       shknam.c    sit.c\nsounds.c    sp_lev.c    spell.c     stairs.c    steal.c     steed.c\nstrutil.c   symbols.c   sys.c       teleport.c  timeout.c   topten.c\ntrack.c     trap.c      u_init.c    uhitm.c     utf8map.c   vault.c\nversion.c   vision.c    weapon.c    were.c      wield.c     windows.c\nwizard.c    wizcmds.c   worm.c      worn.c      write.c     zap.c\n\nsubmodules:\n(files in top directory)\nCHKSUMS      lua          pdcurses     pdcursesmod\n\nsys/libnh:\n(files in top directory)\nREADME.md    libnhmain.c  sysconf\n\nsys/libnh/test:\n(files in top directory)\nREADME.md  libtest.c  run.sh\n\nsys/msdos:\n(files for MSDOS version)\nInstall.dos              Makefile.GCC             exceptn.S.patch\nfetch-cross-compiler.sh  font.c                   font.h\nmsdos.c                  msdoshlp.txt             nhlua.h\npckeys.c                 pctiles.c                pctiles.h\npcvideo.h                portio.h                 setup.bat\nsysconf                  tile2bin.c               vesa.h\nvideo.c                  vidtxt.c                 vidvesa.c\nvidvga.c\n\n(files for running MSDOS binary under Windows)\nnhico.uu  nhpif.uu\n\nsys/msdos/fonts:\n(files for MSDOS version)\nREADME.txt    makefont.lua  nh-u16b.bdf   nh-u16v.bdf   nh-u18b.bdf\nnh-u20b.bdf   nh-u22b.bdf   nh-u24b.bdf   nh-u28b.bdf   nh-u32b.bdf\n\nsys/share:\n(Berkeley random number file, which may be included in any version)\nrandom.c\n\n(Berkeley uudecode file, which may be used in build process of any version)\nuudecode.c\n\n(file for MSDOS, OS/2, Amiga, and Atari versions - only MSDOS tested for 3.7)\npcmain.c\n\n(file for MSDOS, OS/2, and Atari versions - only MSDOS tested for 3.7)\nNetHack.cnf  pctty.c\n\n(file for MSDOS, OS/2, and VMS versions)\ntermcap\n\n(file for VMS version)\ntclib.c\n\n(files for MSDOS, OS/2 and Atari versions - only MSDOS tested for 3.7)\npcsys.c   pcunix.c\n\n(files for OS/2 version - untested for 3.7)\nMakefile.lib  termcap.uu\n\n(files for UNIX and Be versions)\nioctl.c    unixtty.c\n\n(posix regex for versions that include regex in their C library)\nposixregex.c\n\n(c++ regex code for versions that can build a C++ module and link it in)\ncppregex.cpp\n\n(pmatch regex for other versions)\npmatchregex.c\n\nsys/unix:\n(files for UNIX versions)\nInstall.unx     Makefile.check  Makefile.dat    Makefile.doc\nMakefile.src    Makefile.top    Makefile.utl    NewInstall.unx\nREADME-hints    README.xcode    XCode.xcconfig  depend.awk\ngitinfo.sh      mkmkfile.sh     nethack.sh      setup.sh\nsysconf         unixmain.c      unixres.c       unixunix.c\n\nsys/unix/NetHack.xcodeproj:\n(file for macOS Xcode)\nproject.pbxproj\n\nsys/unix/NetHack.xcodeproj/project.xcworkspace:\n(file for macOS Xcode)\ncontents.xcworkspacedata\n\nsys/unix/NetHack.xcodeproj/project.xcworkspace/xcshareddata:\n(files for macOS Xcode)\nIDEWorkspaceChecks.plist      WorkspaceSettings.xcsettings\n\nsys/unix/NetHack.xcodeproj/xcshareddata/xcschemes:\n(files for macOS Xcode)\nNetHack.xcscheme   makedefs.xcscheme  recover.xcscheme\n\nsys/unix/hints:\n(files for configuring UNIX NetHack versions)\nlinux-minimal       linux.370           macOS.370\nmacosx.sh           solaris             solaris-playground\nunix\n\nsys/unix/hints/include:\n(files for configuring UNIX NetHack versions)\ncompiler.370       cross-post.370     cross-pre1.370     cross-pre2.370\ngbdates-post.370   gbdates-pre.370    misc.370           multisnd-post.370\nmultisnd1-pre.370  multisnd2-pre.370  multiw-1.370       multiw-2.370\n\nsys/vms:\n(files for VMS version)\nInstall.vms       Install370.vms    Makefile.dat      Makefile.doc\nMakefile.src      Makefile.top      Makefile.utl      Makefile_dat.vms\nMakefile_doc.vms  Makefile_src.vms  Makefile_top.vms  Makefile_utl.vms\ninstall.com       nethack.com       oldcrtl.c         spec_lev.com\nsysconf           vmsbuild.com      vmsfiles.c        vmsmail.c\nvmsmain.c         vmsmisc.c         vmssetup.com      vmstty.c\nvmsunix.c\n\nsys/windows:\n(files for Windows 7/8.x/10/11 version)\nGNUmakefile         GNUmakefile.depend  Install.windows\nMakefile.nmake      build-msys2.txt     build-nmake.txt\nbuild-vs.txt        console.rc          consoletty.c\nfetch.cmd           guitty.c            nethack.def\nnethackrc.template  nhico.uu            nhsetup.bat\nporthelp            sysconf.template    win10.c\nwin10.h             win32api.h          windmain.c\nwindsys.c           winos.h\n\nsys/windows/vs:\n(files for Visual Studio 2019 or 2022 Community Edition builds)\nNetHack.sln                   NetHackPackage.appxmanifest\nNetHackPackage.wapproj        NetHackProperties.props\nPackage.StoreAssociation.xml  ScreenShot.PNG\nbuild.bat                     common.props\nconfig.props                  console.props\ncpp.hint                      default.props\ndefault_dll.props             default_lib.props\ndirs.props                    dll.props\nfiles.props\n\nsys/windows/vs/FetchPrereq:\n(files for Visual Studio 2019 or 2022 Community Edition builds)\nfetchprereq.nmake    fetchprereq.vcxproj\n\nsys/windows/vs/Images:\n(files for Visual Studio 2019 or 2022 Community Edition builds)\nBadgeLogo.scale-100.png\nBadgeLogo.scale-125.png\nBadgeLogo.scale-150.png\nBadgeLogo.scale-200.png\nBadgeLogo.scale-400.png\nLargeTile.scale-100.png\nLargeTile.scale-125.png\nLargeTile.scale-150.png\nLargeTile.scale-200.png\nLargeTile.scale-400.png\nLockScreenLogo.scale-200.png\nSmallTile.scale-100.png\nSmallTile.scale-125.png\nSmallTile.scale-150.png\nSmallTile.scale-200.png\nSmallTile.scale-400.png\nSplashScreen.scale-100.png\nSplashScreen.scale-125.png\nSplashScreen.scale-150.png\nSplashScreen.scale-200.png\nSplashScreen.scale-400.png\nSquare150x150Logo.scale-100.png\nSquare150x150Logo.scale-125.png\nSquare150x150Logo.scale-150.png\nSquare150x150Logo.scale-200.png\nSquare150x150Logo.scale-400.png\nSquare44x44Logo.altform-unplated_targetsize-16.png\nSquare44x44Logo.altform-unplated_targetsize-256.png\nSquare44x44Logo.altform-unplated_targetsize-32.png\nSquare44x44Logo.altform-unplated_targetsize-48.png\nSquare44x44Logo.scale-100.png\nSquare44x44Logo.scale-125.png\nSquare44x44Logo.scale-150.png\nSquare44x44Logo.scale-200.png\nSquare44x44Logo.scale-400.png\nSquare44x44Logo.targetsize-16.png\nSquare44x44Logo.targetsize-24.png\nSquare44x44Logo.targetsize-24_altform-unplated.png\nSquare44x44Logo.targetsize-256.png\nSquare44x44Logo.targetsize-32.png\nSquare44x44Logo.targetsize-48.png\nStoreLogo.backup.png\nStoreLogo.scale-100.png\nStoreLogo.scale-125.png\nStoreLogo.scale-150.png\nStoreLogo.scale-200.png\nStoreLogo.scale-400.png\nWide310x150Logo.scale-100.png\nWide310x150Logo.scale-125.png\nWide310x150Logo.scale-150.png\nWide310x150Logo.scale-200.png\nWide310x150Logo.scale-400.png\n\nsys/windows/vs/NetHack:\n(files for Visual Studio 2019 or 2022 Community Edition builds)\nNetHack.vcxproj    afternethack.proj\n\nsys/windows/vs/NetHackW:\n(file for Visual Studio 2019 or 2022 Community Edition builds)\nNetHackW.vcxproj\n\nsys/windows/vs/PDCurses:\n(file for Visual Studio 2019 or 2022 Community Edition builds)\nPDCurses.vcxproj\n\nsys/windows/vs/PDCursesGui:\n(file for Visual Studio 2019 or 2022 Community Edition builds)\npdcursesgui.vcxproj\n\nsys/windows/vs/dlb:\n(files for Visual Studio 2019 or 2022 Community Edition builds)\nafterdlb.proj  dlb.vcxproj\n\nsys/windows/vs/hacklib:\n(file for Visual Studio 2019 or 2022 Community Edition builds)\nhacklib.vcxproj\n\nsys/windows/vs/lualib:\n(file for Visual Studio 2019 or 2022 Community Edition builds)\nlualib.vcxproj\n\nsys/windows/vs/makedefs:\n(files for Visual Studio 2019 or 2022 Community Edition builds)\naftermakedefs.proj  makedefs.vcxproj\n\nsys/windows/vs/package:\n(files for Visual Studio 2019 or 2022 Community Edition builds)\npackage.nmake    package.vcxproj\n\nsys/windows/vs/recover:\n(files for Visual Studio 2019 or 2022 Community Edition builds)\nafterrecover.proj  recover.vcxproj\n\nsys/windows/vs/tile2bmp:\n(files for Visual Studio 2019 or 2022 Community Edition builds)\naftertile2bmp.proj  tile2bmp.vcxproj\n\nsys/windows/vs/tilemap:\n(files for Visual Studio 2019 or 2022 Community Edition builds)\naftertilemap.proj  tilemap.vcxproj\n\nsys/windows/vs/tiles:\n(file for Visual Studio 2019 or 2022 Community Edition builds)\ntiles.vcxproj\n\nsys/windows/vs/uudecode:\n(files for Visual Studio 2019 or 2022 Community Edition builds)\nafteruudecode.proj  uudecode.vcxproj\n\ntest:\n(files for testing)\ntest_cnf.lua  test_des.lua  test_lev.lua  test_obj.lua  test_sel.lua\ntest_shk.lua  test_src.lua  testmove.lua  testwish.lua\n\nutil:\n(files for all versions)\ndlb_main.c  makedefs.c  mdgrep.h    mdgrep.pl   panic.c     recover.c\n\nwin/Qt:\n(files for the Qt 4 or 5 widget library - X11, Windows, Mac OS X)\nQt-issues.txt  qt_bind.cpp    qt_bind.h      qt_click.cpp   qt_click.h\nqt_clust.cpp   qt_clust.h     qt_delay.cpp   qt_delay.h     qt_glyph.cpp\nqt_glyph.h     qt_icon.cpp    qt_icon.h      qt_inv.cpp     qt_inv.h\nqt_kde0.h      qt_key.cpp     qt_key.h       qt_line.cpp    qt_line.h\nqt_main.cpp    qt_main.h      qt_map.cpp     qt_map.h       qt_menu.cpp\nqt_menu.h      qt_msg.cpp     qt_msg.h       qt_plsel.cpp   qt_plsel.h\nqt_post.h      qt_pre.h       qt_rip.cpp     qt_rip.h       qt_set.cpp\nqt_set.h       qt_stat.cpp    qt_stat.h      qt_str.cpp     qt_str.h\nqt_streq.cpp   qt_streq.h     qt_svsel.cpp   qt_svsel.h     qt_win.cpp\nqt_win.h       qt_xcmd.cpp    qt_xcmd.h      qt_xpms.h      qt_yndlg.cpp\nqt_yndlg.h\n\nwin/X11:\n(files for X versions)\nInstall.X11     NetHack.ad      Window.c        X11-issues.txt\ndialogs.c       ibm.bdf         nethack.rc      nh10.bdf\nnh32icon        nh56icon        nh72icon        nh_icon.xpm\npet_mark.xbm    pilemark.xbm    rip.xpm         tile2x11.c\nwinX.c          winmap.c        winmenu.c       winmesg.c\nwinmisc.c       winstat.c       wintext.c       winval.c\n\nwin/chain:\n(files for stacking window systems)\nwc_chainin.c   wc_chainout.c  wc_trace.c\n\nwin/curses:\n(files in top directory)\nBugs.txt    Readme.txt  Todo.txt    cursdial.c  cursdial.h  cursinit.c\ncursinit.h  cursinvt.c  cursinvt.h  cursmain.c  cursmesg.c  cursmesg.h\ncursmisc.c  cursmisc.h  cursstat.c  cursstat.h  curswins.c  curswins.h\n\nwin/macosx:\n(files for macosx versions)\nNetHackGuidebook.applescript  NetHackRecover.applescript\nNetHackTerm.applescript       recover.pl\n\nwin/share:\n(files for versions using optional tiles)\nbmptiles.c     gifread.c      giftiles.c     monsters.txt   nhicns.uu\nnhsplash.xpm   objects.txt    other.txt      ppmwrite.c     renumtiles.pl\nsafeproc.c     thintile.c     tile.doc       tile.h         tile2bmp.c\ntilemap.c      tileset.c      tiletext.c     tiletxt.c\n\nwin/shim:\n(file in top directory)\nwinshim.c\n\nwin/tty:\n(files for tty versions)\ngetline.c  termcap.c  topl.c     wintty.c\n\nwin/win32:\n(files for Windows versions - tested up to Windows 11)\nNetHackW.c             NetHackW.exe.manifest  NetHackW.rc\nmhaskyn.c              mhaskyn.h              mhdlg.c\nmhdlg.h                mhfont.c               mhfont.h\nmhinput.c              mhinput.h              mhmain.c\nmhmain.h               mhmap.c                mhmap.h\nmhmenu.c               mhmenu.h               mhmsg.h\nmhmsgwnd.c             mhmsgwnd.h             mhrip.c\nmhrip.h                mhsplash.c             mhsplash.h\nmhstatus.c             mhstatus.h             mhtext.c\nmhtext.h               mnsel.uu               mnselcnt.uu\nmnunsel.uu             mswproc.c              nethack.rc\nnhresource.h           petmark.uu             pilemark.uu\nrecord.uu              resource.h             rip.uu\nsplash.uu              tiles-mingw32.mak      tiles.mak\nwinMS.h\n\nThis is a list of files produced by auxiliary programs.  They can all be\nregenerated from the files in the distribution.\n\ndat:\n(files generated by makedefs at playground creation time)\ndata     options  oracles  rumors\n\n(files generated for Qt interface on macOS)\nInfo.plist    nethack.icns\n\n(files generated for windows at compile time)\ndlb.lst   porthelp\n\n(files generated for windows gui at compile time)\nguioptions\n\n(files generated for windows tty at compile time)\nttyoptions\n\n(tile files optionally generated for X ports at playground creation time)\npet_mark.xbm  rip.xpm       x11tiles\n\nsrc:\n(files for win32 that are moved into src at compile time)\nGNUmakefile  Makefile\n\n(files generated by 'moc' for Qt interface at compile time)\nqt_kde0.moc   qt_main.moc   qt_map.moc    qt_menu.moc   qt_msg.moc\nqt_plsel.moc  qt_set.moc    qt_stat.moc   qt_xcmd.moc   qt_yndlg.moc\n\n(file generated by makedefs -m but unused in 3.7)\nmonstr.c\n\n(file optionally generated by tilemap at compile time)\ntile.c\n\nsys/windows:\n(file generated by uudecode at compile time)\nnethack.ico\n\nutil:\n(file generated for unix at compile time if various tiles utilities are built)\ntiletxt.c\n\n(file generated for windows at compile time)\nuudecode.exe\n\nNOTE: If your binaries were compiled with the data librarian (DLB) option,\n      your playground will not contain all of the files listed here.  All\n      of the files listed as being required for the playground must still\n      have been built by your compiler, but the DLB code will roll them up\n      into another file (or files).\n\n"
        },
        {
          "name": "Porting",
          "type": "blob",
          "size": 10.5947265625,
          "content": "  NetHack Porting Guidelines\t\tv 3.7\t\t\t2023-04-23\n\n\n     1.0\tIntroduction\n\n\tThis document goes through the steps required to port NetHack to a\nnew machine, with the intention of compiling natively on that machine. If\nyou are cross-compiling for one platform on another, it is suggested that\nyou read Cross-compiling.\n\nThe basic steps in porting the program using a native compiler are:\n\n\t1.  Get the code onto your build machine.  The parts of the current\n\t    directory setup you definitely need include src (NetHack code\n\t    shared by all systems), include (include files), util (code\n\t    for utility programs), and dat (various data files).  The\n\t    documentation in doc is strongly recommended.  You already\n\t    have the files in the top directory since you're reading this\n\t    one. :-)\n\n\t    If you will be cross-compiling for your target platform on\n            a different platform, you may want to read Cross-compiling\n            in the Top folder as well.\n\n\t    A full list of the distribution files and their associated\n\t    OSes may be found in the top-level file \"Files\".\n\n\t    If your machine uses an OS already supported, you need the sys\n\t    subdirectory for that OS and possibly sys/share.  Otherwise,\n\t    get the closest match (say sys/msdos for single-tasking OSes\n\t    and sys/unix for multi-user OSes, along with sys/share, if\n\t    nothing else comes to mind).  You may want others for\n\t    comparison.\n\n\t    If your machine uses a windowing system already supported,\n\t    you need the win subdirectory for that system (or the\n\t    appropriate sys subdirectory if the windowing system was\n\t    previously considered restricted to one OS) and possibly\n\t    win/share.\n\n\t2.  Modify the appropriate include files to customize NetHack to\n\t    your system.  You may need to add a new OS-specific \"*conf.h\"\n\t    file (see unixconf.h, windconf.h, pcconf.h, etc. as examples).\n\n\t3.  If your machine uses a new OS instead of a variant of existing\n\t    OSes, add a new sys subdirectory.  Add, if required, a OS-\n\t    specific copy of \"main.c\", \"tty.c\" and \"unix.c\".  Possibly\n\t    add an OS-specific library (see \"msdos.c\" and \"tos.c\" as\n\t    examples) to provide functions NetHack wants and your OS lacks.\n\n\t4.  If your machine uses a new windowing system, follow doc/window.txt\n\t    carefully.  Put files implementing these routines in a win or\n\t    sys subdirectory as appropriate.\n\n\t5.  If your compilation environment isn't close to one already\n\t    supported, try starting from the UNIX makefiles.  Modify the\n\t    top level makefile and the src makefile as required.  Then run\n\t    an initial compile.  You are bound to get some errors.  You\n\t    should be able to fix them in a fairly simple fashion.  If\n\t    things seem to be getting too complex, take a step back, and\n\t    possibly send us some mail.  We might be able to help.\n\n\t6.  Mail all of your fixes to us in a contextual form so that we can\n\t    easily integrate them into the code, or fork the NetHack\n            repository on GitHub and issue a pull-request for your changes.\n\n\tOne general rule of thumb exists.  Always add code.  Don't delete\nsomebody else's code for yours -- it won't work on their machine if you do.\nAlways add your OS specific code inside #ifdef / #else / #endif constructs\nso that it will be able to be folded back into the original code easily.\n\n\n     2.0\tInclude Files\n\n     2.1\tconfig.h\n\n\tThe file \"config.h\" is a master configuration file that determines\nthe basic features of the game, as well as many of the security options.\nIt is intended that end users configure the game by editing \"config.h\" and\nan appropriate \"*conf.h\" file, so any #defines for individual preferences\nshould be added to those files.  OS-specific #defines that are not intended\nto be changed should also go in \"*conf.h\"; try to find the most appropriate\nplace for other #defines.\n\n\tThe following sections may require modification:\n\n     -\tSection 1:\tOS and window system selection.\n\t\t\tYou may have to put a #define for your OS here.\n\t\t\tIf your OS is yet another UNIX variant, put the\n\t\t\t#define in unixconf.h instead.\n\t\t\tAn unfortunately large amount of stuff shares\n\t\t\tthis section because the #definitions have to\n\t\t\tbe seen before *conf.h is reached.  Don't add\n\t\t\tto this unless necessary.\n\n     -\tSection 2:\tGlobal parameters and filenames.\n\t\t\tThese will have to be customized to your system.\n\n     -\tSection 3:\tType definitions and other compiler behavior.\n\t\t\tThese will have to be matched to your compiler.\n\n     2.2\tglobal.h\n\n\tThis file defines things specific to NetHack that should not\nrequire modification by an end user.  For a new port, you may have to add\nautomatic inclusion of another auxiliary config file (*conf.h) which you\nwrote for your system.\n\n     2.3\textern.h\n\n\tIf you create any new source modules or new functions in old modules,\nyou must enter the names of the new external references (the functions defined\nthere for external use) in this file.\n\n\n     3.0\tSource files\n\n\tThe first step in getting the game up is to get the \"makedefs\"\nprogram running.  This program is used to create configuration-specific\nfiles for the game.\n\n\tOnce \"makedefs\" has been built, the rest of the game can be compiled.\nYou may have to create an OS-specific module to handle things you want to\nuse, like a mouse or a ram-disk.\n\n     3.1\tMakefiles\n\n\tThis distribution provides makefiles for several kinds of systems.\nThere are joint makefiles for the various varieties of UNIX, makefiles for\nMSDOS, a makefile for NT, and so on.  You may have to create a new\nmakefile for your specific machine.  You may even have to translate some\nmakefiles into a form more congenial to your system.  If possible, however,\nadd to one of those provided.\n\n     3.2\ttermcap.c\n\n\tIf your system wants to use tty windowing and it doesn't run off\nof a termcap or terminfo database, you may have to put the appropriate\nterminal control strings into termcap.c. You can also consider using the\ntermcap code from sys/share/tclib.c or sys/share/termcap.uu, especially if\nyour system supports multiple kinds of terminals. Alternatively, you can\ndefine NO_TERMS and provide alternative screen handling in a \nplatform-specific module. That has already been done for MSDOS and for\nthe Windows console, and those mods can be used as an example.\n\n     3.4\ttty.c\n\n\tYou may need to create a new \"tty.c\" module.  If you do, call it\n[OS]tty.c where the [OS] is replaced with the name of the OS you are porting\nto.  This file contains the routines that configure the terminal/console\nfor raw I/O, etc.\n\n     3.5\tunix.c\n\n\tYou may need to create a new \"unix.c\" module.  If you do, call it\n[OS]unix.c where the [OS] is replaced with the name of the OS you are porting\nto.  This file contains some OS dependencies concerning time and filename\ncreation.\n\n\tAn object of the NetHack development project is to get the game\nworking on as many different types of hardware and under as many different\noperating systems as is practical.  Any assistance will be appreciated.\n\nCross-compiling may allow porting of NetHack to a machine where there may\nbe challenges building on the platform directly, and may help maintain a\nworking version of NetHack on that platform. See the file Cross-compiling\nfor more information.\n\n     4.0\tBuild Process\n\nNetHack requires the following steps to be carried out:\n\n     4.1. makedefs\n\nCompile and link util/makedefs. Run makedefs repeatedly with different command\nline options to produce several output files that are required for:\n          (a) creation of files, containing information required by,\n              or about the game during its execution, that are stored in a\n              portable, platform-independent way, that need to be inserted\n              into the final game package.\n\n          Required for complete packaging of the game, but not the C source\n          game compile:\n              util/makedefs -d\n              util/makedefs -r\n              util/makedefs -h\n              util/makedefs -s\n\n          For reference purposes, but no longer a required prerequisite for the\n          game compile process:\n              util/makedefs -v\n              util/makedefs -o\n              util/makedefs -p\n\n     4.2. Other utilities\n\n\tCompile and link other utilities such as uudecode, tile-generation\nutilities, and so forth. Those produce output files for use during the game and\nneed to be included in the packaging of the game.\n\n     4.3. Lua\n\n\tCompile and link into a library, or obtain a prebuilt Lua library for\nyour platform. Place the Lua source into lib/lua-5.4.6 (or other folder\nrepresenting an appropriate Lua version); place the compiled Lua library into\nlib.\n\n     4.4  Compile NetHack sources\n\n\tCompile the source code of the game, including a suitable\nregular-expression choice from several options available in sys/share. Pick one\nthat is supported by your OS or that you have obtained a 3rd party library for.\n\n     4.5  Compile optional window port components into a library\n\n\tIf your platform requires 3rd party sources in order to support the\nwindow port options that you have chosen, such as curses sources for the curses\nwindow port, you may store the sources for that library in a subfolder under\nlib.\n\n     4.6. Link the game\n\n\tLink the game to the Lua library, and to any window port support\nlibraries.\n\n     4.7  Package the game\n\n\n\n     5.0\tDesign Updates\n\nThe following design updates were introduced in NetHack 3.7.\n\n     5.1  Quest text files\n\n\tThe quest text files that were formerly converted from their source\ntext by makedefs during the build process, have been replaced by Lua versions\nand are inserted into the game package for processing by the embedded Lua\ninterpreter during game execution.\n\n     5.2  Level Compiler\n\n\tThere is no longer a build-time level compiler. Instead, the level\ndescriptions have been converted to Lua and are inserted into the game package\nfor processing by the embedded Lua interpreter during game execution.\n\n     5.3  Dungeon Compiler\n\n\tThere is no longer a build-time dungeon compiler. Instead, the dungeon\ndescription has been converted to Lua and is inserted into the game package for\nprocessing by the embedded Lua interpreter during game execution.\n\n\n     5.4  Run-time Options\n\n\tSome of the build and option information that was formerly produced at\nbuild-time by makedefs, and contained information about the game platform and\noptions selected during the build of the game, can now be produced at run-time\nby code within the game itself. That was done to facilitate cross-compiling of\nNetHack on one platform for game execution on another.\n\n\n# NetHack 3.7  Porting       $NHDT-Date: 1643491454 2022/01/29 21:24:14 $  $NHDT-Branch: NetHack-3.7 $:$NHDT-Revision: 1.17 $\n# Copyright (c) 2005 by Michael Allison\n# NetHack may be freely redistributed.  See license for details.\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 10.4853515625,
          "content": "         NetHack 3.7.0 work-in-progress -- General information\n\nNetHack 3.7 is an enhancement to the dungeon exploration game NetHack,\nwhich is a distant descendent of Rogue and Hack, and a direct descendent of\nNetHack 3.6.\n\nNetHack 3.7.0 work-in-progress is not a release of NetHack. As a .0 version,\nand still very early in its development cycle, there has already been changes\nmade, and there will continue to be many more prior to an eventual release.\nThe file doc/fixes3-7-0.txt in the source distribution will be updated with\na list of fixes as they are committed.\n\nIn short -- there are likely to be bugs. Don't treat NetHack-3.7 branch as\nreleased code, and if stability is paramount, then the most recent\nNetHack 3.6.7 release is safest for you.\n\nWe're making the .0 work-in-progress available so that you can observe, test\nout, and contribute to its development. Constructive suggestions, GitHub pull\nrequests, and bug reports are all welcome and encouraged.\n\nThe file doc/fixes3-7-0.txt in the source distribution has a full list of\nbug-fixes included so far, as well as brief mentions of some of the other code\nchanges. The text in there was written for the development team's own use and is\nprovided  \"as is\", so please do not ask us to further explain the entries in\nthat file. Some entries might be considered \"spoilers\", particularly in the\n\"new features\" section.\n\nAlong with the game improvements and bug fixes, NetHack 3.7 strives to make\nsome general architectural improvements to the game or to its building\nprocess. Among them:\n\n *  Remove barriers to building NetHack on one platform and operating system,\n    for later execution on another (possibly quite different) platform and/or\n    operating system. That capability is generally known as \"cross-compiling.\"\n    See the file \"Cross-compiling\" in the top-level folder for more information\n    on that.\n\n *  Replace the build-time \"yacc and lex\"-based level compiler, the \"yacc and\n    lex\"-based dungeon compiler, and the quest text file processing done\n    by NetHack's \"makedefs\" utility, with Lua text alternatives that are\n    loaded and processed by the game during play.\n\n *  Write game savefiles and bonesfiles in a more portable and consistent way\n    to open up the possibility of utilizing them between different platforms,\n    such as between your desktop computer and your hand-held device.\n\n *  Add support to make the game restartable without exit (a.k.a. \"play again\"\n    support). Toward that end, many previously scattered and separate variables\n    have been gathered into central 'ga' through 'gz' structures in\n    decl.h/decl.c. That central ability to reinitialize the variables will\n    benefit the porting effort to some platforms that are under consideration\n    where \"play again\" is typical.\n\nHere are some other general notes on the changes in NetHack 3.7 that were not\nconsidered spoilers:\n -  automatic annotation \"gateway to Moloch's Sanctum\" for vibrating square\n        level once that square's location becomes known (found or magic\n        mapped); goes away once sanctum temple is found (entered or high altar\n        mapped)\n -  savefile: add support to deconstruct internal data structures down into\n        their individual fields and save those fields instead of the entire\n        struct\n -  savefile: use little-endian format for fields where that makes a difference\n\n                        - - - - - - - - - - -\n\nPlease read items (1), (2) and (3) BEFORE doing anything with your new code.\n\n1.  Unpack the code in a dedicated new directory.  We will refer to that\n    directory as the 'Top' directory.  It makes no difference what you\n    call it.\n\n2.  Having unpacked, you should have a file called 'Files' in your Top\n    directory.\n\n    This file contains the list of all the files you now SHOULD\n    have in each directory.  Please check the files in each directory\n    against this list to make sure that you have a complete set.\n\n    This file also contains a list of what files are created during\n    the build process.\n\n    The names of the directories listed should not be changed unless you\n    are ready to go through the makefiles and the makedefs program and change\n    all the directory references in them.\n\n3.  Before you do anything else, please read carefully the file called\n    \"license\" in the 'dat' subdirectory.  It is expected that you comply\n    with the terms of that license, and we are very serious about it.\n\n4.  If you are attempting to build NetHack on one platform/processor, to\n    produce a game on a different platform/processor it may behoove you to\n    read the file \"Cross-compiling\" in your Top directory.\n\n5.  If everything is in order, you can now turn to trying to get the program\n    to compile and run on your particular system.  It is worth mentioning\n    that the default configuration is SysV/Sun/Solaris2.x (simply because\n    the code was housed on such a system).\n\n    The files sys/*/Install.* were written to guide you in configuring the\n    program for your operating system.  The files win/*/Install.* are\n    available, where necessary, to help you in configuring the program\n    for particular windowing environments.  Reading them, and the man pages,\n    should answer most of your questions.\n\n\n    At the time of the most recent official release, NetHack 3.6, it had\n    been tested to run/compile on:\n\n        Intel Pentium or better running Linux, BSDI\n        Intel Pentium or better running Windows 10 or 11\n        Intel-based, or Apple M1, M2, M3 Macs running\n            macOS 10.11 (El Capitan) to macOS 14 (Sonoma)\n            (follow the instructions in sys/unix/NewInstall.unx)\n        Intel 80386 or greater running MS-DOS with DPMI\n            built via djgpp compiler (native or Linux-hosted cross-compiler)\n        OpenVMS (aka VMS) V8.4 on Alpha and on Integrity/Itanium/IA64\n\n    Previous versions of NetHack were tested and known to run on the\n    following systems, but it is unknown if they can still build and\n    execute NetHack 3.6 or NetHack 3.7:\n\n        Apple Macintosh running MacOS 7.5 or higher, LinuxPPC, BeOS 4.0\n        Atari ST/TT/Falcon running TOS (or MultiTOS) with GCC\n        AT&T 3B1 running System V (3.51)\n        AT&T 3B2/600 & 3B2/622 running System V R3.2.1\n        AT&T 3B2/1000 Model 80 running System V R3.2.2\n        AT&T 3B4000 running System V\n        AT&T 6386 running System V R3.2\n        Commodore Amiga running AmigaDOS 3.0 or higher with SAS/C 6.x\n                (but see Makefile.ami about DICE and Manx)\n        Data General AViiON systems running DG/UX\n        DEC Alpha/VMS (aka OpenVMS AXP), running V1.x through V7.1\n        DEC VAX/VMS, running V4.6 through V7.1\n        DEC vaxen running BSD, Ultrix\n        Decstations running Ultrix 3.1, 4.x\n        Encore Multimax running UMAX 4.2\n        Gould NP1 running UTX 3/2\n        HP 9000s300 running HP-UX\n        HP 9000s700 running HP-UX 9.x, 10.x, 11.x\n        H/PC Pro devices running Windows CE 2.11 and higher.\n        IBM PC/RT and RS/6000 running AIX 3.x\n        IBM PS/2 and AT compatibles running OS/2 - 2.0 and up with GCC emx\n        IBM PS/2 and AT compatibles running OS/2 1.1 - 2.0 (and probably\n           Warp) with Microsoft 6.0, and OS/2 2.0 and up with IBM CSet++ 2.0.\n        Intel 80386 or greater (or clone) running 386BSD\n        Intel x86 running a version of Windows 7 or 8 or prior to XP.\n        Mips M2000 running RiscOS 4.1\n        NeXT running Mach (using BSD configuration)\n        Palm Size PC 1.1 devices running Windows CE 2.11\n        Pocket PC devices running Windows CE 3.0 and higher\n        Pyramid 9820x running OSx 4.4c\n        SGI Iris running IRIX\n        Stardent Vistra 800 running SysV R4.0\n        Stride 460 running UniStride 2.1\n        Sun-3s, -4s, and -386is running SunOS 3.x\n        Sun-3s and -386is running SunOS 4.x\n        \"Sun SPARC\"-based machine running SunOS 4.x, Solaris 2.x, or Solaris 7\n        Valid Logic Systems SCALD-System\n\n    Previous versions, using a cross-compiler hosted on another platform,\n    such as  win32, could also build the following from source:\n        Pocket PC devices running Windows CE 3.0 and higher\n        H/PC Pro devices running Windows CE 2.11 and higher\n        Palm Size PC 1.1 devices running Windows CE 2.11\n\n    Unless otherwise mentioned, the compiler used was the OS-vendor's\n    C compiler.\n\n                        - - - - - - - - - - -\n\nIf you have problems building the game, or you find bugs in it, we recommend\nfiling a bug report from our \"Contact Us\" web page at:\n    https://www.nethack.org/common/contact.html\nPlease include the version information from #version or the command line\noption --version in the appropriate field.\n\nA public repository of the latest NetHack code that we've made\navailable can be obtained via git here:\n    https://github.com/NetHack/NetHack\n      or\n    https://sourceforge.net/p/nethack/NetHack/\n\nWhen sending correspondence, please observe the following:\no Please be sure to include your machine type, OS, and patchlevel.\no Please avoid sending us binary files (e.g. save files or bones files).\n  If you have found a bug and think that your save file would aid in solving\n  the problem, send us a description in words of the problem, your machine\n  type, your operating system, and the version of NetHack.  Tell us that you\n  have a save file, but do not actually send it.\n  You may then be contacted by a member of the development team with the\n  address of a specific person to send the save file to.\no Though we make an effort to reply to each bug report, it may take some\n  time before you receive feedback.  This is especially true during the\n  period immediately after a new release, when we get the most bug reports.\no We don't give hints for playing the game.\no Don't bother to ask when the next version will be out or you can expect\n  to receive a stock answer.\n\nIf you want to submit a patch for the NetHack source code via email directly,\nyou can direct it to this address:\n    nethack-bugs (at) nethack.org\n\nIf a feature is not accepted you are free, of course, to post the patches\nto the net yourself and let the marketplace decide their worth.\n\nAll of this amounts to the following:  If you decide to apply a free-lanced\npatch to your 3.6 code, you are welcome to do so, of course, but we won't\nbe able to provide support or receive bug reports for it.\n\nIn our own patches, we will assume that your code is synchronized with ours.\n\n                  -- Good luck, and happy Hacking --\n\n# $NHDT-Date: 1652133501 2022/05/09 21:58:21 $ $NHDT-Branch: NetHack-3.7 $:$NHDT-Revision: 1.97 $\n# Copyright (c) 2012 by Michael Allison\n# NetHack may be freely redistributed.  See license for details.\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 8.4443359375,
          "content": "strategy:\n  matrix:\n    linux_latest_gcc9_minimal:\n      imageName: 'ubuntu-latest'\n      toolchainName: gcc9\n      buildTargetName: minimal\n    linux_noble_clang_all:\n      imageName: 'ubuntu-24.04'\n      toolchainName: clang\n      buildTargetName: all\n    linux_jammy_gcc9_all:\n      imageName: 'ubuntu-22.04'\n      toolchainName: gcc9\n      buildTargetName: all\n    linux_noble_gcc13_all:\n      imageName: 'ubuntu-24.04'\n      toolchainName: gcc13\n      buildTargetName: all\n    macOS_latest_clang_all:\n      imageName: 'macOS-latest'\n      toolchainName: clang\n      buildTargetName: all\n    macOS_Sequoia_clang15_all:\n      imageName: 'macOS-15'\n      toolchainName: clang\n      buildTargetName: all\n    windows-visualstudio:\n      imageName: 'windows-latest'\n      toolchainName: vs\n      buildTargetName: all\n    windows-mingw:\n      imageName: 'windows-2019'\n      toolchainName: mingw\n      buildTargetName: all\n    linux_noble_cross_msdos:\n      imageName: 'ubuntu-24.04'\n      toolchainName: cross\n      buildTargetName: msdos\n    linux_noble_docs:\n      imageName: 'ubuntu-24.04'\n      toolchainName: docs\n      buildTargetName: all\n      continueOnError: true\n\npool:\n  vmImage: $(imageName)\n\n# resources:\n#  repositories:\n#  - repository: pdcursesrepo\n#    type: github\n#    name: wmcbrine/PDCurses\n#    ref: refs/heads/master\n#    endpoint: github.com_barthouse\n\nvariables:\n  toolchain: $(toolchainName)\n  buildTarget: $(buildTargetName)\n  netHackPath: s/NetHack\n\nsteps:\n- bash: |\n    if [ \"$(toolchain)\" == \"gcc9\" ]\n    then\n      echo \"##vso[task.setvariable variable=CC]gcc-9\"\n      echo \"##vso[task.setvariable variable=CXX]g++-9\"\n    fi\n    if [ \"$(toolchain)\" == \"gcc13\" ]\n    then\n      echo \"##vso[task.setvariable variable=CC]gcc-13\"\n      echo \"##vso[task.setvariable variable=CXX]g++-13\"\n    fi\n    if [ \"$(toolchain)\" == \"clang\" ]\n    then\n      echo \"##vso[task.setvariable variable=CC]clang\"\n      echo \"##vso[task.setvariable variable=CXX]clang++\"\n    fi\n    if [ \"$(toolchain)\" == \"cross\" ]\n    then\n      echo \"##vso[task.setvariable variable=CC]gcc-13\"\n      echo \"##vso[task.setvariable variable=CXX]g++-13\"\n    fi\n  displayName: 'Setting variables'\n\n- bash: |\n    echo \"toolchain: $(toolchain)\"\n    echo \"buildTarget: $(buildTarget)\"\n    echo \"netHackPath: $NETHACKPATH\"\n    echo \"CC: $CC\"\n    echo \"CXX: $CXX\"\n  displayName: 'Echoing variables'\n\n- checkout: git://NetHack/NetHack@NetHack-3.7\n  submodules: true\n  path: $(netHackPath) # $(Agent.BuildDirectory)/$(netHackPath)\n\n- task: DownloadSecureFile@1\n  name: storeKey\n  inputs:\n    secureFile: 'NetHackPackage_StoreKey.pfx'\n  condition: eq( variables.toolchain, 'vs' )\n  displayName: 'Store Key Download'\n\n- task: CopyFiles@2\n  inputs:\n    contents: NetHackPackage_StoreKey.pfx\n    SourceFolder: $(Agent.TempDirectory)\n    TargetFolder: $(Agent.BuildDirectory)/$(netHackPath)/sys/windows/vs\n  condition: eq( variables.toolchain, 'vs' )\n  displayName: 'Copying store key'\n\n- task: MSBuild@1\n  inputs:\n    solution: $(Agent.BuildDirectory)/$(netHackPath)/sys/windows/vs/NetHack.sln\n    platform: Win32\n    configuration: Debug\n  condition: eq( variables.toolchain, 'vs' )\n  displayName: 'Visual Studio Build'\n\n- bash: |\n    export ADD_LUA=Y\n    export WANT_LUAC=N\n    export LUATOP=../submodules/lua\n    export LUASRC=../submodules/lua\n    export ADD_CURSES=Y\n    export PDCURSES_TOP=../submodules/pdcursesmod\n    export LUA_VERSION=5.4.6\n    #\n    # 64-bit\n    #export CURLSRC=https://github.com/brechtsanders/winlibs_mingw/releases/download/11.2.0-9.0.0-ucrt-r5/winlibs-x86_64-posix-seh-gcc-11.2.0-mingw-w64ucrt-9.0.0-r5.zip\n    #export CURLSRC=https://github.com/brechtsanders/winlibs_mingw/releases/download/14.2.0posix-19.1.1-12.0.0-ucrt-r2/winlibs-x86_64-posix-seh-gcc-14.2.0-llvm-19.1.1-mingw-w64ucrt-12.0.0-r2.zip\n    #export CURLDST=mingw-x64.zip\n    #export MINGWBIN=mingw64\n    #export MSYSTEM=MINGW64\n    #\n    # 32-bit\n    #export CURLSRC=https://github.com/brechtsanders/winlibs_mingw/releases/download/11.2.0-9.0.0-ucrt-r5/winlibs-i686-posix-dwarf-gcc-11.2.0-mingw-w64ucrt-9.0.0-r5.zip\n    export CURLSRC=https://github.com/brechtsanders/winlibs_mingw/releases/download/14.2.0posix-19.1.1-12.0.0-ucrt-r2/winlibs-i686-posix-dwarf-gcc-14.2.0-llvm-19.1.1-mingw-w64ucrt-12.0.0-r2.zip\n    export CURLDST=mingw-x86.zip\n    export MINGWBIN=mingw32\n    export MSYSTEM=MINGW32\n    # all\n    mkdir -p ../lib\n    cd ../lib\n    mkdir -p mingw\n    curl -L $CURLSRC -o $CURLDST\n    #tar -C mingw -xvf $CURLDST\n    #/c/Windows/System32/tar -C mingw -xvf $CURLDST\n    powershell -command \"Expand-Archive -Force $CURLDST mingw\"\n    export PATH=../lib/mingw/$MINGWBIN/bin:$PATH\n    export\n    cd ../src\n    pwd\n    cp ../sys/windows/GNUmakefile* .\n    mingw32-make -f GNUmakefile CI_COMPILER=1 GIT=1 MSYSTEM=$MSYSTEM LUA_VERSION=$LUA_VERSION clean\n    mingw32-make -f GNUmakefile CI_COMPILER=1 GIT=1 MSYSTEM=$MSYSTEM LUA_VERSION=$LUA_VERSION depend\n    mingw32-make -f GNUmakefile CI_COMPILER=1 GIT=1 MSYSTEM=$MSYSTEM LUA_VERSION=$LUA_VERSION\n  condition: eq( variables.toolchain, 'mingw' )\n  workingDirectory: $(Agent.BuildDirectory)/$(netHackPath)/src\n  displayName: 'MinGW Build'\n\n- bash: |\n    sudo apt-get -qq -y update\n    sudo apt-get -qq -y install libncurses-dev\n    sudo apt-get -qq -y install libx11-dev libxaw7-dev xfonts-utils qtbase5-dev qtmultimedia5-dev qtbase5-dev-tools\n  condition: and(eq( variables['Agent.OS'], 'Linux' ), eq( variables.buildTarget, 'all'))\n  workingDirectory: $(Agent.BuildDirectory)/$(netHackPath)\n  displayName: 'Getting linux build dependencies'\n\n- bash: |\n    cd sys/unix\n    sh setup.sh hints/linux.370\n    cd ../..\n    make fetch-lua\n    make WANT_WIN_ALL=1 QT_SELECT=5 MOC=moc all\n  condition: and(eq( variables['Agent.OS'], 'Linux' ), eq( variables.buildTarget, 'all'))\n  workingDirectory: $(Agent.BuildDirectory)/$(netHackPath)\n  displayName: 'Building linux full build'\n\n- bash: |\n    cd sys/unix\n    sh setup.sh hints/linux-minimal\n    cd ../..\n    sed -i '/^#[ \t]*define CLIPPING/d'       include/config.h\n    sed -i '/^#[ \t]*define COMPRESS/d'       include/config.h\n    sed -i '/^#[ \t]*define CRASHREPORT/d'    include/config.h\n    #sed -i '/^#[ \t]*define DOAGAIN/d'        include/config.h\n    sed -i '/^#[ \t]*define DUMPLOG/d'        include/config.h\n    sed -i '/^#[ \t]*define DUMPLOG_CORE/d'   include/config.h\n    #sed -i '/^#[ \t]*define GDBPATH/d'        include/config.h\n    #sed -i '/^#[ \t]*define GREPPATH/d'       include/config.h\n    sed -i '/^#[ \t]*define INSURANCE/d'      include/config.h\n    sed -i '/^#[ \t]*define ENHANCED_SYMBOLS/d' include/config.h\n    sed -i '/^#[ \t]*define LOGFILE/d'        include/config.h\n    sed -i '/^#[ \t]*define NEWS/d'           include/config.h\n    sed -i '/^#[ \t]*define PANICLOG/d'       include/config.h\n    #sed -i '/^#[ \t]*define STATUS_HILITES/d' include/config.h\n    sed -i '/^#[ \t]*define SYSCF/d'          include/config.h\n    sed -i '/^#[ \t]*define USER_SOUNDS/d'    include/config.h\n    sed -i '/^#[ \t]*define XLOGFILE/d'       include/config.h\n    sed -i '/^#[ \t]*define HANGUPHANDLING/d' include/global.h\n    sed -i '/^#[ \t]*define MAIL/d'           include/unixconf.h\n    sed -i '/^#[ \t]*define SHELL/d'          include/unixconf.h\n    sed -i '/^#[ \t]*define SUSPEND/d'        include/unixconf.h\n    make fetch-lua\n    make WANT_WIN_ALL=1 NOCRASHREPORT=1 all\n  condition: and(eq( variables['Agent.OS'], 'Linux' ), eq( variables.buildTarget, 'minimal'))\n  displayName: 'Building linux minimal build'\n  workingDirectory: $(Agent.BuildDirectory)/$(netHackPath)\n\n- bash: |\n    cd sys/unix\n    sh setup.sh hints/macos.370\n    cd ../..\n    make fetch-lua\n    make WANT_MACSOUND=1 all\n  condition: eq( variables['Agent.OS'], 'Darwin' )\n  workingDirectory: $(Agent.BuildDirectory)/$(netHackPath)\n  displayName: 'Building mac full build'\n\n- bash: |\n    sudo apt -qq -y install libfl2\n    export GCCVER=gcc1220\n    cd sys/unix\n    sh setup.sh hints/linux.370\n    cd ../..\n    make fetch-lua\n    sys/msdos/fetch-cross-compiler.sh\n    retVal=$?\n    if [ $retVal -eq 0 ]; then\n        make LUA_VERSION=5.4.6 WANT_WIN_TTY=1 WANT_WIN_CURSES=1 CROSS_TO_MSDOS=1 package\n    fi\n  condition: and(eq( variables['Agent.OS'], 'Linux' ), eq( variables.toolchain, 'cross'))\n  workingDirectory: $(Agent.BuildDirectory)/$(netHackPath)\n  displayName: 'Building MSDOS build'\n- bash: |\n    sudo apt-get install texlive\n    make Guidebook\n    make Guidebook.txt\n    make Guidebook.pdf\n  condition: and(eq( variables['Agent.OS'], 'Linux' ), eq( variables.toolchain, 'docs'))\n  workingDirectory: $(Agent.BuildDirectory)/$(netHackPath)\n  displayName: 'Building NetHack documentation'\n"
        },
        {
          "name": "dat",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "outdated",
          "type": "tree",
          "content": null
        },
        {
          "name": "sound",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "submodules",
          "type": "tree",
          "content": null
        },
        {
          "name": "sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "win",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}