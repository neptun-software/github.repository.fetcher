{
  "metadata": {
    "timestamp": 1736709885514,
    "page": 371,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mbebenita/Broadway",
      "stars": 2741,
      "defaultBranch": "master",
      "files": [
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.357421875,
          "content": "The following authors have all licensed their contributions to the project\nunder the licensing terms detailed in LICENSE.\n\nMichael Bebenita <mbebenita@gmail.com>\nAlon Zakai <alonzakai@gmail.com>\nAndreas Gal <gal@mozilla.com>\nMathieu 'p01' Henri <mathieu@p01.org>\nMatthias 'soliton4' Behrens <matthias.behrens@gmail.com>\nSam Leitch @oneam - provided the webgl canvas\n"
        },
        {
          "name": "Decoder",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.6611328125,
          "content": "Copyright (c) 2011, Project Authors (see AUTHORS file)\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n  *  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n  *  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n  *  Neither the names of the Project Authors nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n--\n\nThe 3-clause BSD above applies to all code except for code originating\nfrom the Android project (the .cpp files in Avc/). Those files are under\nthe Android project's Apache 2.0 license.\n\n"
        },
        {
          "name": "Player",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.markdown",
          "type": "blob",
          "size": 2.75,
          "content": "Broadway.js\n===========\nA JavaScript H.264 decoder.\n\n\nView a Live Demo:  \nhttp://mbebenita.github.io/Broadway/foxDemo.html  \nhttp://mbebenita.github.io/Broadway/storyDemo.html  \nhttp://mbebenita.github.io/Broadway/treeDemo.html  \n\nThe video player first needs to download the entire video before it can start playing, thus appearing to be a bit slow at first, so have patience. You can start the video by clicking on each player. The top left player runs on the main thread, while the remaining players run in background worker threads.\n\nUse an example node app as template:  \nhttps://github.com/soliton4/BroadwayStream  \n\nTechnical info\n==============\n\nThe demo is Android's H.264 decoder compiled with Emscripten to JavaScript, then further optimized with\nGoogle's JavaScript closure compiler and further optimized by hand to use WebGL.\n\nBuilding the demo:\n\nInstall and configure Emscripten (https://github.com/kripken/emscripten)  \nThe current version of Broadway was built with emscripten 1.35.12  \n\nThe code for the demo is in the Decoder folder, to build it run the make.py python script. (Requires at least python 2.7)\n\nEncoding Video\n==============\n\nThe decoder expects an .mp4 file and does not support weighted prediction for P-frames and CABAC entropy encoding. To create such bitstreams use ffmpeg and x264 with the following command line options:\n\n```\nffmpeg -y -i sourceFile -r 30000/1001 -b:a 2M -bt 4M -vcodec libx264 -pass 1 -coder 0 -bf 0 -flags -loop -wpredp 0 -an targetFile.mp4\n```\n\nAPI\n===\n\nPlayer.js, Decoder.js and YUVWebGLCanvas.js all have a unified module definition.  \nYou can use them as plain js files or with common.js / AMD  \n\n# Player.js:  \n\n```\nvar p = new Player({\n  <options>\n});\n\np.canvas; // the canvas - put it where you want it\n\np.decode(<h264 data>);\n```\n\n## Options:  \n\nuseWorker true / false  \nDecode in a worker thread  \n\nworkerFile <string>  \nPath to Decoder.js. Only neccessary when using worker. Defaults to \"Decoder.js\"  \n\nwebgl true / \"auto\" / false  \nUse webgl. defaults to \"auto\"  \n\nsize { width: <num>, height: <num> }  \nInitial size of the canvas. Canvas will resize after video starts streaming.  \n\n## Properties:  \n\ncanvas  \ndomNode  \n\nrefers to the canvas element.  \n\n## methods:  \n\ndecode (<bin>)\n\nFeed the decoder with h264 stream data.  \n\n\n# Decoder.js:  \n\n```\nvar p = new Decoder({\n  <options>\n});\n\np.onPictureDecoded; // override with a callback function\n\np.decode(<h264 data>);\n```\n\n## options:  \n\nrgb true / false  \nIf true will convert the image to rgb. sligtly slower.  \n\n## properties:  \n\nonPictureDecoded  callback function(<bin>, width, height)\n\nWill be called for each frame.\n\n## methods:  \n\ndecode (<bin>)\n\nFeed the decoder with h264 stream data.  \n\n\n# [Real World Uses of Broadway.js](https://github.com/mbebenita/Broadway/wiki/Real-World-Uses)\n"
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}