{
  "metadata": {
    "timestamp": 1736710242731,
    "page": 983,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "snavely/bundler_sfm",
      "stars": 1551,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.51171875,
          "content": "# Compiled source and libraries\n*.o\n*.a\n*.so\n*.dll\n*.exe\n\n# emacs temp files\n*~\n\n# Compiled binaries and temporary library files\nbin/Bundle2PMVS\nbin/Bundle2Ply\nbin/Bundle2Vis\nbin/KeyMatchFull\nbin/RadialUndistort\nbin/FisheyeUndistort\nbin/bundler\nlib/ann_1.1_char/lib\nlib/f2c/arith.h\nlib/f2c/signal1.h\nlib/f2c/sysdep1.h\nsrc/Bundle2PMVS\nsrc/Bundle2Ply\nsrc/Bundle2Vis\nsrc/KeyMatchFull\nsrc/RadialUndistort\nsrc/FisheyeUndistort\nsrc/bundler\n\n# Binaries we depend on\nbin/sift\n\n# misc\nlist_keys.txt\nlist_tmp.txt\noptions.txt\nsift.txt\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 0.9091796875,
          "content": "2013-12-29  Noah Snavely  <snavely@cs.cornell.edu>\n\n        * Added support for Ceres solver\n        * Cleaning up the code a bit\n\n\n2010-04-03  Noah Snavely  <snavely@cs.cornell.edu>\n\n        * Upgrade to v0.4\n        * Removed reference implementations of LAPACK and BLAS due to\n          bugs in 64-bit version\n        * Updated Bundle2PMVS to work with new version of PMVS\n        * Updated RadialUndistort (note that you now must specify an \n        * output directory)\n        * Added Bundle2Vis tool\n\n\n2009-05-04  Noah Snavely  <snavely@cs.cornell.edu>\n\n\t* Upgrade to v0.3\n\t* Added Visual Studio project files\n\t* Added reference implementations of required libs: LAPACK, BLAS,\n\t  MINPACK, CBLAS, f2c, etc.\n\t* Several bug fixes\n\t* Added Bundle2PMVS utility program\n\t* Cleaner Makefiles and scripts (thanks to Bart van Andel)\n\n\t\n2008-10-08  Noah Snavely  <snavely@cs.cornell.edu>\n\n\t* Upgrade to v0.2\n\t* Mainly code refactoring\n"
        },
        {
          "name": "INSTALL.txt",
          "type": "blob",
          "size": 3.4775390625,
          "content": "--------------------------------------------------------------------------\n  Bundler Installation Guide\n    copyright 2009-2013 Noah Snavely (snavely@cs.cornell.edu)\n  \n  based on the Photo Tourism work of Noah Snavely, Steven M. Seitz, \n    (University of Washington) and Richard Szeliski (Microsoft Research)\n\n  For more technical information, visit http://phototour.cs.washington.edu\n\n  The source provided in this distribution can be accessed at\n    https://github.com/snavely/bundler_sfm\n      or at\n    http://phototour.cs.washington.edu/bundler/\n--------------------------------------------------------------------------\n\nThis distribution contains source code for Bundler as well as several\nlibraries and utility programs.  Note that you'll need several other\nlibraries installed on your system in order to successfully compile\nand link Bundler.  Note that the binary distribution is *highly\nrecommended*, as compiling from source is currently much less\nuser-friendly than using the pre-compiled binaries.  Compilation has\nbeen tested on Linux, but has also worked under Windows using Cygwin\nand Visual Studio 2005.\n\nBundler relies on several libraries.  Reference implementations from\nnetlib are included with this distribution (and available from\nwww.netlib.org, but you may want to install and link to optimized\nversions (e.g., GotoBLAS, or the Intel MKL)).  In Ubuntu, LAPACK,\nBLAS, and MINPACK and their dependencies can all be installed as\nstandard packages.  The required libraries are:\n\n - LAPACK  (the Linear Algebra PACKage) \n - BLAS    (Basic Linear Algebra Subprograms)\n - CBLAS   (C interface to BLAS)\n\n   (Note that LAPACK, BLAS, and CBLAS implementations are also\n    provided as part of Intel's Math Kernel Library -- these\n    implementations can be significantly faster than the ones linked\n    to here.)\n\n - MINPACK   (non-linear minimization library)\n - f2c       (fortran to C library)\n - gfortran  (GNU Fortran compiler package)\n\nIf you install alternate versions of these libraries, you may need to\nedit the Bundler Makefile (src/Makefile) to make sure that these\nlibraries are all visible at link-time (or just copy the compiled\nlibraries to the $(BASE_PATH)/lib directory).  In addition to these\nlibraries, the standard libjpeg and libz libraries must be installed\non your system.\n\nThis distribution also contains a modified version of the Approximate\nNearest Neighbors (ANN) v1.1 library of David M. Mount and Sunil Arya\n(http://www.cs.umd.edu/~mount/ANN/), and the Sparse Bundle Adjustment\n(SBA) v.1.2.1 package of Manolis Lourakis and Antonis Argyros\n(http://www.ics.forth.gr/~lourakis/sba/).\n\nOn a Linux (or cygwin) system, typing \"make\" in the base directory\nwill compile Bundler and its dependencies (assuming all goes well).\nUpon successful compilation, an executable called 'bundler' will be\ncopied to the bin directory, along with an executable called\n'KeyMatchAll'.  Note that bundler optionally can use Ceres solver for\nbundle adjustment (the default solver is SBA, but Ceres is often much\nfaster).  Assuming you have installed Ceres and its dependencies, you\ncan enable compilation with Ceres by editing 'src/Makefile' and\nuncommenting the USE_CERES=true line.  If you are using RunBundler.sh\nto run the bundler pipeline, you will also need to create a\nRunBundler.sh config file with the line USE_CERES=true (see\nRunBundler.sh for more details).\n\nFor Windows systems, see the vc++ directory for a Visual Studio 2005\nsolution file (vc++/Bundler.sln).\n\nSee the README.txt file for more information on running Bundler.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.318359375,
          "content": "#-----------------------------------------------------------------------------\n# Top level makefile for Bundler\n#\n# Bundler: Structure from Motion for Unordered Photo Collections\n# Version: 0.4 04/03/2010\n#    http://phototour.cs.washington.edu/bundler/\n#-----------------------------------------------------------------------------\n# Copyright (c) 2008-2010 University of Washington and Noah Snavely\n# All Rights Reserved.\n#-----------------------------------------------------------------------------\n\nANN_TARGET = linux-g++-shared\n\nOS = $(shell uname -o)\nifeq ($(OS), Cygwin)\nANN_TARGET = win32-g++-shared\nendif\n\ndefault:\n# Make libraries\n\tcd lib/5point; $(MAKE)\n\tcd lib/ann_1.1_char; $(MAKE) $(ANN_TARGET)\n\tcd lib/imagelib; $(MAKE)\n\tcd lib/matrix; $(MAKE)\n\tcd lib/sba-1.5; $(MAKE)\n\tcd lib/sfm-driver; $(MAKE)\n# Auxiliary libraries\n\tcd lib/minpack; $(MAKE)\n\tcd lib/cblas; $(MAKE)\n\tcd lib/f2c; $(MAKE)\n# Main program\n\tcd src; $(MAKE)\n\n\nclean:\n\tcd lib/5point; $(MAKE) clean\n\tcd lib/ann_1.1_char; $(MAKE) clean\n\tcd lib/imagelib; $(MAKE) clean\n\tcd lib/matrix; $(MAKE) clean\n\tcd lib/sba-1.5; $(MAKE) clean\n\tcd lib/sfm-driver; $(MAKE) clean\n\tcd lib/minpack; $(MAKE) clean\n\tcd lib/cblas; $(MAKE) clean\n\tcd lib/f2c; $(MAKE) clean\n\tcd src; $(MAKE) clean\n\trm -f bin/bundler bin/KeyMatchFull bin/Bundle2PMVS bin/Bundle2Vis bin/RadialUndistort\n\trm -f lib/*.a\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.1328125,
          "content": "Bundler User's Manual\n---------------------\nwritten by Noah Snavely (snavely@cs.cornell.edu)\n\nbased on the Photo Tourism work of Noah Snavely, Steven M. Seitz, \n  (University of Washington) and Richard Szeliski (Microsoft Research)\n\nFor more information, see the Bundler homepage at \n    http://www.cs.cornell.edu/~snavely/bundler/\nor see the FAQ at \n    http://www.cs.cornell.edu/~snavely/bundler/faq.html\n\nWhat is Bundler?\n----------------\n\nBundler is a structure-from-motion system for unordered image\ncollections (for instance, images from the Internet). Bundler takes a\nset of images, image features, and image matches as input, and\nproduces a 3D reconstruction of the camera and (sparse) scene geometry\nas output. The system, described in [1] and [2], reconstructs the\nscene incrementally, a few images at a time, using a modified version\nof the Sparse Bundle Adjustment package of Lourakis and Argyros [3] as\nthe underlying optimization engine.\n\nCurrently, Bundler has been primarily compiled and tested under Linux\n(though it may also compile in Windows under Cygwin, and a Visual\nStudio solution file is also provided).\n\nConditions of use\n-----------------\n\nBundler is distributed under the GNU General Public License.  For\ninformation on commercial licensing, please contact the authors at the\ncontact address below.  If you use Bundler for a publication, please\ncite the following paper:\n\n  Noah Snavely, Steven M. Seitz, and Richard Szeliski. Photo Tourism:\n  Exploring Photo Collections in 3D. SIGGRAPH Conf. Proc., 2006.\n\nWhat's included\n---------------\n\nIncluded with the binary distribution is the Bundler executable\n(bin/bundler), as well as a number of other utility scripts and\nexecutables (in the bin/ directory). In addition, there are a number\nof example image sets (and example results) under the examples/\ndirectory. A version of the approximate nearest neighbors (ANN)\nlibrary of David M. Mount and Sunil Arya, customized for searching\nverctors of unsigned bytes, is also included.\n\nA utility program for converting bundle files (.out) to the input\nrequired by Dr. Yasutaka Furukawa's PMVS multi-view stereo system\n(http://www.di.ens.fr/pmvs/)\ncalled Bundle2PMVS is also included.  Finally, this distribution\nincludes a program called RadialUndistort for generating undistorted\nimages (based on the undistortion parameters estimated by Bundler).\n\n\nBefore you begin\n----------------\n\nYou'll first need to download the Bundler distribution from GitHub:\n\nor visit the Bundler homepage at \n\n   http://phototour.cs.washington.edu/bundler \n\nand extract it into a directory (to be referred to as BASE_PATH).\n\nYou'll also need a feature detector components to get the system\nworking. Assuming you will be using SIFT features generated by David\nLowe's SIFT binary, you'll need to download that binary from\n\n    http://www.cs.ubc.ca/~lowe/keypoints/\n\nand copy it to BASE_PATH/bin (making sure it is called 'sift', or\n'siftWin32.exe' under Windows).\n\nYou'll also need the 'jhead' program installed, for computing focal\nlengths from Exif metadata.  This is available, for instance, as the\njhead package on Ubuntu.\n\nFinally, make sure you have the ImageMagick library installed.\n\nThe utils/bundler.py script requires that you have Python and the\nPython Image Library (PIL) installed on your computer.\n\nTo make bundler, just type 'make' in the main bundler directory.\nNote that if you plan to run Bundler on large problems, you may wish\nto enable the use of the Ceres solver for bundle adjustment, which can\nimprove speed over the default SBA bundle adjuster.  To do so, edit\nthe file 'src/Makefile' and uncomment the line\n\n    USE_CERES=true\n\nNote that this assumes you have Ceres and its dependencies installed\non your system.  See the Ceres solver page at\n\n   https://code.google.com/p/ceres-solver/\n\nfor more information.\n\nFinally, once Bundler is compiled, copy the approximate nearest\nneighbors (ANN) shared library at BASE_PATH/bin/libANN_char.so\n(Linux/cygwin) or BASE_PATH/bin/ann_1.1_char.dll (Windows VS2005) to a\nlocation in your LD_LIBRARY_PATH, or add BASE_PATH/bin to\nLD_LIBRARY_PATH with a command like (in bash):\n\n    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/bundler/bin\n\n\nRunning bundler\n---------------\n\nThe easiest way to start using Bundler is to either use the provided\nRunBundler.sh bash script, or the included Python script (by Isaac\nLenton), utils/bundler.py.  Just execute either script in a directory\nwith a set of images in JPEG format, and it will automatically run all\nthe steps needed to run structure from motion on the images (assuming\neverything goes well).  For RunBundler.sh, you may optionally provide\na configuration file as a command line argument---see RunBundler.sh\nfor a description of the configuration options available.  Notably,\nyou can choose to use Ceres when running Bundler.\n\nTo get help on using the Python script bundler.py:\n\n  > bundler.py -h\n\nTo run bundler.py with verbose output on a single thread (this acts\nsimilar to the older RunBundler.sh bash script):\n\n  > bundler.py --verbose --no-parallel\n\nbundler.py can also be imported into your own Python modules to\nenable easy access to the bundler system.  Type 'help(bundler)'\nat the python command prompt after importing bundler.py for more\ninformation.\n\nThe Bundler exectutable is actually the last in a sequence of steps\nthat need to be run to reconstruct a scene.  bundler.py takes care\nof all these steps for you, but it's useful to know what's going on.\nThe main initial steps are to generate features and pairwise feature\nmatches for the image set.  Any type of image features can be used,\nbut Bundler assumes the features are in the SIFT format, and so David\nLowe's SIFT detector, available at\nhttp://www.cs.ubc.ca/~lowe/keypoints/, is probably the easiest to get\nworking with Bundler (bundler.py assumes that SIFT is used).  A\nlist of images containing estimating focal length information also\nmust be created.  The four steps to creating a reconstruction are\ntherefore:\n\n1. Create a list of images using the function extract_focal_length.\n   (this extracts focal length information, when available, from each\n   image, and stores it in an image list).\n2. Generate (SIFT) features for each image.\n3. Match features between each pairs of images (this step can take a\n   while).  The computed feature matches are stored in a file called\n   'matches.init.txt'.\n4. Run 'bundler' with a suitable options file.\n\nAgain, running the RunBundler.sh or bundler.py script is the easiest\nway to perform these steps.  Steps 1-3 can also be invoked\nindividually from functions contained in the bundler.py script.\n\nBundler itself is typically invoked as follows:\n\n > bundler list.txt --options_file options.txt\n\nThe first argument is the list of images to be reconstructed.  Next,\nan options file containing settings to be used for the current run is\ngiven.  The RunBundler.sh and bundler.py scripts create an options\nfile that will work in many situations (and some of these options can\nbe controlled by the configuration file passed to RunBundler.sh).\nCommon options are described later in this document.  To generate only\nthe list of images, run:\n\n > bundler.py --extract-focal\n\n\nOutput format\n-------------\n\nBundler produces files typically called 'bundle_*.out' (we'll call\nthese \"bundle files\").  With the default commands, Bundler outputs a\nbundle file called 'bundle_<n>.out' containing the current state of\nthe scene after each set of images has been registered (n = the number\nof currently registered cameras).  After all possible images have been\nregistered, Bundler outputs a final file named 'bundle.out'.  In\naddition, a \"ply\" file containing the reconstructed cameras and points\nis written after each round.  These ply files can be viewed with the\n\"scanalyze\" mesh viewer, available at\nhttp://graphics.stanford.edu/software/scanalyze/.\n\nThe bundle files contain the estimated scene and camera geometry have\nthe following format:\n\n    # Bundle file v0.3\n    <num_cameras> <num_points>   [two integers]\n    <camera1>\n    <camera2>\n     ...\n    <cameraN>\n    <point1>\n    <point2>\n     ...\n    <pointM>\n\nEach camera entry <cameraI> contains the estimated camera intrinsics\nand extrinsics, and has the form:\n\n    <f> <k1> <k2>   [the focal length, followed by two radial distortion coeffs]\n    <R>             [a 3x3 matrix representing the camera rotation]\n    <t>             [a 3-vector describing the camera translation]\n\nThe cameras are specified in the order they appear in the list of\nimages.\n\nEach point entry <pointI> has the form:\n\n    <position>      [a 3-vector describing the 3D position of the point]\n    <color>         [a 3-vector describing the RGB color of the point]\n    <view list>     [a list of views the point is visible in]\n\nThe view list begins with the length of the list (i.e., the number of\ncameras the point is visible in).  The list is then given as a list of\nquadruplets <camera> <key> <x> <y>, where <camera> is a camera index,\n<key> the index of the SIFT keypoint where the point was detected in\nthat camera, and <x> and <y> are the detected positions of that\nkeypoint.  Both indices are 0-based (e.g., if camera 0 appears in the\nlist, this corresponds to the first camera in the scene file and the\nfirst image in \"list.txt\").  \n\nWe use a pinhole camera model; the parameters we estimate for each\ncamera are a focal length (f), two radial distortion parameters (k1\nand k2), a rotation (R), and translation (t), as described in the file\nspecification above.  The formula for projecting a 3D point X into a\ncamera (R, t, f) is:\n\n    P = R * X + t       (conversion from world to camera coordinates)\n    p = -P / P.z        (perspective division)\n    p' = f * r(p) * p   (conversion to pixel coordinates)\n\nwhere P.z is the third coordinate of P.  In the last equation, r(p) is\na function that computes a scaling factor to undo the radial\ndistortion:\n\n    r(p) = 1.0 + k1 * ||p||^2 + k2 * ||p||^4.\n\nThis gives a projection in pixels, where the origin of the image is\nthe center of the image, the positive x-axis points right, and the\npositive y-axis points up (in addition, in the camera coordinate\nsystem, the positive z-axis points backwards, so the camera is looking\ndown the negative z-axis, as in OpenGL).\n\nFinally, the equations above imply that the camera viewing direction\nis:\n\n    R' * [0 0 -1]'  (i.e., the third row of R or third column of R')\n\n(where ' indicates the transpose of a matrix or vector).\n\nand the 3D position of a camera is \n\n    -R' * t .\n\n\nCommand-line options\n--------------------\n\nBundler has a number of internal parameters, so there are a large\nnumber of command-line options.  That said, we've found that a common\nset of parameters works well for most image collections we've tried,\nso it is probably safe to start with the recommended options (used by\nthe RunBundler.sh and bundler.py scripts).  One very useful option is\n\"--options_file <file>\", which tells Bundler to read a list of options\nfrom a file.  The default options file created by RunBundler.sh or\nbundler.py includes the following options:\n\n  --match_table matches.init.txt\n     [specifies the file where the match files are stored]\n\n  --output bundle.out\n     [specifies the name of the final output reconstruction]\n\n  --output_all bundle_\n     [specifies that all intermediate reconstructions should be\n      output to files with prefix \"bundle_\"]\n\n  --output_dir bundle\n     [the directory all output files should be written to, typically\n      called \"bundle\"]\n\n  --variable_focal_length\n     [directs bundler to optimize for an independent focal length for\n      each image]\n\n  --use_focal_estimate\n     [directs bundler to use the estimated focal lengths obtained from\n      the Exif tags for each image]\n\n  --constrain_focal\n     [constrain the focal length of each camera to be close to the\n      initial focal length estimate (from Exif tags).  This option\n      adds penalty terms to the bundle adjustment objective function]\n\n  --constrain_focal_weight 0.0001\n     [weight on the penalty terms for the focal length constraints (a\n      small weight is typically sufficient)]\n\n  --estimate_distortion\n     [directs bundler to estimate radial distortion parameters for\n      each image]\n\n  --run_bundle\n     [run structure from motion (as opposed to other operations on\n      existing reconstructions)]\n\nThere are a number of other useful options in addition to the default\nones listed above, including:\n\n  --init_pair1 <image_idx1>\n  --init_pair2 <image_idx2>\n     [Specifies which images to use as the initial pair.  Very useful\n      when the automatically chosen pair results in a bad\n      reconstruction.]\n\n  --options_file <options_file>\n     [Read in a list of options from the specified file.]\n\n  --sift_binary <sift>\n     [The location of the SIFT binary on your installation, e.g.,\n     '/usr/bin/sift' or '/cygdrive/c/usr/bin/siftWin32.exe'.]\n\n  --add_images <add_list>\n     [Given an existing reconstruction specified with the --bundle\n      option, attempts to add the images listed in the file <add_list>\n      to the reconstruction, writing the results to the file\n      'bundle.added.out'.  The new list of images is written to\n      'list.added.txt'.  Use the 'extract_focal.pl' script to generate\n      the file <add_list> from a directory of JPEGs, but note that the\n      correct path to these images must be included -- which may\n      require editing the add list file.  Do not include the\n      '--run_bundle' option when adding new images.  If the SIFT key\n      files have not yet been generated for the new images, bundler\n      will try to extract features, but this requires that the\n      --sift_binary option be set.]\n\n  --help\n     [Print out the complete list of command-line options.]\n\n\nLinks\n-----\nPierre Moulon has a cmake version of Bundler available here: \n    https://github.com/TheFrenchLeaf/Bundler.\n\nAcknowledgements\n----------------\n\nThis work was supported by Microsoft Research, the University of\nWashington Animation Research Labs, an Achievement Rewards for College\nScientists (ARCS) fellowship, National Science Foundation grants\nIIS-0413198 and DGE-0203031, and an endowment by Emer Dooley and Rob\nShort.\n\nThanks to Manolis Lourakis and Antonis Argyros for their sparse bundle\nadjustment package (http://www.ics.forth.gr/~lourakis/sba/), to David\nLowe for SIFT (http://www.cs.ubc.ca/~lowe/keypoints/), to David\nM. Mount and Sunil Arya for their approximate nearest neighbors\nlibrary (http://www.cs.umd.edu/~mount/ANN/), and to Matthias Wandel\nfor his 'jhead' program.\n\nThanks as well to Kathleen Tuite and Sebastian Koch for testing this\ndistribution.\n\n\nContact information\n-------------------\n\nQuestions?  Comments?  Bug reports?  Please see the FAQ at\nhttp://www.cs.cornell.edu/~snavely/bundler/faq.html, or send email to\nNoah Snavely at snavely@cs.cornell.edu.\n\n\n[1] Noah Snavely, Steven M. Seitz, and Richard Szeliski.  Photo\n    Tourism: Exploring Photo Collections in 3D.  SIGGRAPH Conf. Proc.,\n    2006.\n\n[2] Noah Snavely, Steven M. Seitz, Richard Szeliski.  Modeling the\n    World from Internet Photo Collections. International Journal of\n    Computer Vision, 2007.\n\n[3] M.I.A. Lourakis and A.A. Argyros.  The Design and Implementation\n    of a Generic Sparse Bundle Adjustment Software Package Based on\n    the Levenberg-Marquardt Algorithm.  Tech.  Rep. 340, Inst. of\n    Computer Science-FORTH, Heraklion, Crete, Greece. Available from\n    http://www.ics.forth.gr/~lourakis/sba.\n"
        },
        {
          "name": "RunBundler.sh",
          "type": "blob",
          "size": 4.1181640625,
          "content": "#!/bin/bash\n#\n# RunBundler.sh\n#   copyright (c) 2008-2013 Noah Snavely\n#\n# A script for preparing a set of image for use with the Bundler \n# structure-from-motion system.\n#\n# Usage: RunBundler.sh [config_file]\n#\n# config_file describes [optional] configuration options, including:\n#\n#   IMAGE_LIST=<list.txt> # file with input list of images / focal lengths\n#   IMAGE_DIR=<dir> # directory containing the images you'd like to process\n#   MATCH_WINDOW_RADIUS=<num> # only match images in a sliding \n#                             # window of size 2rad+1 \n#   INIT_FOCAL=<num>   # value to use for initial focal length\n#   FOCAL_WEIGHT=<num> # weight used to constrain focal length\n#   TRUST_FOCAL=true   # tell bundler to trust the provided focal lengths\n#   RAY_ANGLE_THRESHOLD=<num> # used to remove ill-conditioned points\n#   USE_CERES=true # enables use of Ceres solver for bundle adjustment\n#                  # (if this is enabled at compile time)\n#   NUM_MATCHES_ADD_CAMERA=<num> # number of matches above which bundler\n#                                # will definitely attempt to add a camera\n#                                # (e.g., you might use 500)\n#\n\nBASE_PATH=$(dirname $(which $0));\n\nif [ $BASE_PATH == \"TODO\" ]\nthen\n    echo \"Please modify this script (RunBundler.sh) with the base path of your bundler installation in the BASE_PATH variable.\";\n    exit;\nfi\n\nEXTRACT_FOCAL=$BASE_PATH/bin/extract_focal.pl\n\nOS=`uname -o`\n\nif [ $OS == \"Cygwin\" ]\nthen\n    MATCHKEYS=$BASE_PATH/bin/KeyMatchFull.exe\n    BUNDLER=$BASE_PATH/bin/Bundler.exe\nelse\n    MATCHKEYS=$BASE_PATH/bin/KeyMatchFull\n    BUNDLER=$BASE_PATH/bin/bundler\nfi\n\nTO_SIFT=$BASE_PATH/bin/ToSift.sh\nTO_SIFT_LIST=$BASE_PATH/bin/ToSiftList.sh\n\n# Default config options\nIMAGE_DIR=\".\"\nMATCH_WINDOW_RADIUS=\"-1\"  # infinite window\nFOCAL_WEIGHT=\"0.0001\"\nRAY_ANGLE_THRESHOLD=\"2.0\"\n\n# Read any user-provided config options\nif [ $# -eq 1 ]\nthen\n    echo \"Using config file '$1'\"\n    source $1\nelse\n    echo \"Using default config options\"\nfi\n\nif [ \"$IMAGE_LIST\" == \"\" ]\nthen\n  # Prepare the list of images\n\n  # Rename \".JPG\" to \".jpg\"\n  for d in `ls -1 $IMAGE_DIR | egrep \".JPG$\"`\n  do \n      mv $IMAGE_DIR/$d $IMAGE_DIR/`echo $d | sed 's/\\.JPG/\\.jpg/'`\n  done\n\n  # Create the list of images\n  find $IMAGE_DIR -maxdepth 1 | egrep \".jpg$\" | sort > list_tmp.txt\n\n  if [ \"$INIT_FOCAL\" == \"\" ]\n  then\n    # Extract focal lengths using Exif data\n    $EXTRACT_FOCAL list_tmp.txt || exit 1\n    cp prepare/list.txt .\n  else\n    # Use the provided focal length\n    awk \"{print \\$1, 0, $INIT_FOCAL}\" list_tmp.txt > list.txt\n  fi\n\n  IMAGE_LIST=list.txt\nfi\n\n# Run the ToSift script to generate a list of SIFT commands\nif [ \"$SKIP_FEATURES\" != \"true\" ]\nthen\n    echo \"[- Extracting keypoints -]\"\n    rm -f sift.txt\n    $TO_SIFT_LIST $IMAGE_LIST > sift.txt || exit 1\n\n    # Execute the SIFT commands\n    sh sift.txt\nfi\n\n# Match images (can take a while)\necho \"[- Matching keypoints (this can take a while) -]\"\nawk '{print $1}' $IMAGE_LIST | sed 's/\\.jpg$/\\.key/' > list_keys.txt\nsleep 1\necho $MATCHKEYS list_keys.txt matches.init.txt $MATCH_WINDOW_RADIUS\n$MATCHKEYS list_keys.txt matches.init.txt $MATCH_WINDOW_RADIUS\n\n# Generate the options file for running bundler \nmkdir -p bundle\nrm -f options.txt\n\necho \"--match_table matches.init.txt\" >> options.txt\necho \"--output bundle.out\" >> options.txt\necho \"--output_all bundle_\" >> options.txt\necho \"--output_dir bundle\" >> options.txt\necho \"--variable_focal_length\" >> options.txt\necho \"--use_focal_estimate\" >> options.txt\necho \"--constrain_focal\" >> options.txt\necho \"--constrain_focal_weight $FOCAL_WEIGHT\" >> options.txt\n\nif [ \"$TRUST_FOCAL\" != \"\" ]\nthen\n    echo \"--trust_focal\" >> options.txt\nfi\n\necho \"--estimate_distortion\" >> options.txt\necho \"--ray_angle_threshold $RAY_ANGLE_THRESHOLD\" >> options.txt\n\nif [ \"$NUM_MATCHES_ADD_CAMERA\" != \"\" ]\nthen\n    echo \"--num_matches_add_camera $NUM_MATCHES_ADD_CAMERA\" >> options.txt\nfi\n\nif [ \"$USE_CERES\" != \"\" ]\nthen\n    echo \"--use_ceres\" >> options.txt\nfi\n\necho \"--run_bundle\" >> options.txt\n\n# Run Bundler!\necho \"[- Running Bundler -]\"\nrm -f constraints.txt\nrm -f pairwise_scores.txt\n$BUNDLER $IMAGE_LIST --options_file options.txt > bundle/bundle.log\n\necho \"[- Done -]\"\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "vc++",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}