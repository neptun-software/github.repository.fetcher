{
  "metadata": {
    "timestamp": 1736709815833,
    "page": 274,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rvaiya/warpd",
      "stars": 3076,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.1748046875,
          "content": "IndentWidth: 8\nTabWidth: 8\nUseTab: Always\nBreakBeforeBraces: Linux\nAlignConsecutiveMacros: true\nAlignConsecutiveAssignments: false\nPointerAlignment: Right\nObjCBlockIndentWidth: 8\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0673828125,
          "content": "*swp\n*swn\n*swo\ntags\n*.out\n*gch\nNOTES\nlib/\nbin/\n*.o\ndist/\n*.obj\n*.exe\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.185546875,
          "content": "# v1.3.5\n- macos: Various input bugfixes\n- macos: Introduce launchd service (the user should no longer run warpd explicitly)\n- macos: Fix multi-user support\n- linux: Merge X/Wayland support into a single binary\n- Improve portrait mode support\n- Make the drag button configurable\n- Fix config key precedence bug\n\n# v1.3.4\n - Fix initial pointer position on wayland\n - Add support middle click support for macos\n - Add support for platform keymaps (non-qwerty layouts)\n - Various bugfixes\n\n# v1.3.3\n - Fix wayland initialization issue\n\n# v1.3.2\n - Improve config handling (allow for shadowed values to gracefully handle conflicts)\n - Make undo keys in hint based modes configurable\n\n# v1.3.1\n\n - Allow secondary mode selection with --oneshot --normal.\n - Add identifying information to print keys and -q\n - Fix -c\n\n# v1.3.0\n\n - Add more scripting facilities (e.g --oneshot --record)\n - Allow oneshot activation while the daemon is running\n - Fix -q flag\n - Add print key\n - Make hint size specification consistent\n - Add --query\n - Fix dialog occlusion issue (#134)\n - Implement 2 stage hint mode\n - Add history mode\n - Fix modified button presses (#86)\n - Fix macos compilation issues\n - Add an optional visual indicator for normal mode (#121)\n - Check for zxdg_output_manager before adding screens (#116)\n - Make scroll speed configurable (#112)\n - wayland: Make font configurable (#137)\n - wayland: Fix multi-screen support (#135)\n - Various bugfixes\n\n# v1.2.2\n\n - Use XDG compliant config paths + eliminate ~/.config pollution\n - wayland: Lower the required layer_shell version\n - Eliminate hint asymmetry (alters the unit of hint_size)\n - Add dedicated `hint_exit` key (#99)\n - Add --config, and --help\n - Misc bugfixes\n\n# v1.2.1\n\n - Add multi-screen support to wayland\n - Add dedicated hint_exit key (distinct from exit)\n\n# v1.2.0\n\n - Add experimental wayland support\n - Add --hint/--normal/--grid flags\n - Fix missing key up bug\n\n# v1.1.4-beta\n\n - Fix alternate (english) layout support\n\n# v1.1.3-beta\n\n - Hide cursor when scrolling\n - Fix full hint drawing issue caused by switching VTs\n\n# v1.1.2-beta\n\n - Add support for modified button presses\n - Add accelerator key\n\n# v1.1.1-beta\n\n - Add support for shifted hint characters\n - Fix screen boundary issue\n - Limit maximum hint size for multi-screen/resolution setups\n - Change the config list delimiter from comma to space\n - Update man page\n - Misc bugfixes\n\n# v1.1.0-beta\n\n - Add Multiscreen support\n - Make the default colour scheme less appalling\n - Make other modes accessible from grid mode\n\n# v1.0.3-beta\n\n - macos: solicit accessibility whitelisting on initialization (#64)\n - macos: cleanup input handling code + fix freezing (#65)\n - Account for different X maps\n\n# v1.0.2-beta\n\n - macos: Fix sticky key visual indicators\n - Add pointer acceleration (`acceleration`)\n - Add `grid_border_size` and `grid_border_color`\n - Add `hint_oneshot_key`\n - Show cursor in grid mode\n\n# v1.0.0-beta\n\n - Add MacOS support\n - Internal code cleanup\n - Normal movement keys are now continuous rather than discrete.\n - Remove 'normal_' prefix from normal options.\n - Eliminate hint opacity variable in favour of rgba hex values.\n - Eliminate scroll flinging\n\n# v0.0.1\n\nIn the beginning there was only darkness.\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.533203125,
          "content": "# Issues\n\nWhen filing an issue please include:\n\n - A complete description of the problem, as well as the minimal setup required to reproduce it.\n - The platform (wayland/macos/X).\n - The output of `warpd -v`.\n - The smallest possible config (if any) required to replicate the behaviour.\n - Your screen setup (the number of your monitors you have).\n\nBefore reporting a bug, please ensure it is present on the latest commit.\n\nAlso be aware that the master branch is the main development branch and\nthat things are liable to break between releases.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0673828125,
          "content": "MIT/X Consortium License\n\nÂ© 2019 Raheman Vaiya <r.vaiya@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.734375,
          "content": "VERSION=1.3.5\nPREFIX?=/usr/local\nCOMMITSTR=$(shell commit=$$(git rev-parse --short HEAD 2> /dev/null) && echo \" (built from: $$commit)\")\n\nifeq ($(shell uname -s), Darwin)\n\tPLATFORM?=macos\nendif\n\nifeq ($(PLATFORM), macos)\n\tVERSION:=$(VERSION)-osx\nendif\n\n%.o: %.c Makefile mk/*.mk\n\t$(CC) -c $< -o $@ $(CFLAGS)\n\nCFLAGS:=-g\\\n       -Wall\\\n       -Wextra\\\n       -pedantic\\\n       -Wno-deprecated-declarations\\\n       -Wno-unused-parameter\\\n       -std=c99\\\n       -DVERSION='\"v$(VERSION)$(COMMITSTR)\"'\\\n       -D_DEFAULT_SOURCE \\\n       -D_FORTIFY_SOURCE=2  $(CFLAGS)\n\nifeq ($(PLATFORM), macos)\n\tinclude mk/macos.mk\nelse ifeq ($(PLATFORM), windows)\n\tinclude mk/windows.mk\nelse\n\tinclude mk/linux.mk\nendif\n\nman:\n\tscdoc < warpd.1.md | gzip > files/warpd.1.gz\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.3525390625,
          "content": "# What\n\nA modal keyboard driven interface for mouse manipulation.\n\n# Demo\n\n## Hint Mode `Alt-Meta-x`\n\n<p align=\"center\">\n<img src=\"demo/hints.gif\" height=\"400px\"/>\n</p>\n\n## Grid Mode `Alt-Meta-g`\n\n<p align=\"center\">\n<img src=\"demo/warp.gif\" height=\"400px\"/>\n</p>\n\n## Normal Mode `Alt-Meta-c`\n\n<p align=\"center\">\n<img src=\"demo/discrete.gif\" height=\"400px\"/>\n<img src=\"demo/discrete2.gif\" height=\"400px\" width=\"711px\"/>\n</p>\n\n\n# Dependencies\n\n## X\n\nThe usual array of X libraries:\n\n - libxi\n - libxinerama\n - libxft\n - libxfixes\n - libxtst\n - libx11\n\n## Wayland (sway/wlroots only (**no gnome support**))\n\n - libwayland-client\n - cairo\n - xkbcommon\n\n*Note:* The wayland port has several limitations due\nto the nature of Wayland's architecture.\n\nSee the LIMITATIONS section of the man page for more details.\n\n## MacOS:\n\n - The standard Xcode command line developer tools.\n\n# Installation\n\nMake sure you have the appropriate dependencies for your system:\n\nE.g\n\n## debian/ubuntu:\n\n```\ngit clone https://github.com/rvaiya/warpd.git\ncd warpd\nsudo apt-get install \\\n\tlibxi-dev \\\n\tlibxinerama-dev \\\n\tlibxft-dev \\\n\tlibxfixes-dev \\\n\tlibxtst-dev \\\n\tlibx11-dev \\\n\tlibcairo2-dev \\\n\tlibxkbcommon-dev \\\n\tlibwayland-dev &&\nmake && sudo make install\n```\n\nBy default warpd will build a single binary for both X and wayland. An X or\nWayland only binary can be generated by setting either `DISABLE_WAYLAND` or\n`DISABLE_X` at compile time.\n\n## macos:\n\n```\ncurl -L https://github.com/rvaiya/warpd/releases/download/v1.3.5/warpd-1.3.5-osx.tar.gz |  sudo tar xzvfC - / && launchctl load /Library/LaunchAgents/com.warpd.warpd.plist\n```\n\nUninstallation:\n\n```\nsudo rm /usr/local/bin/warpd /usr/local/share/man/man1/warpd.1.gz /Library/LaunchAgents/com.warpd.warpd.plist\n```\n\nor (from source)\n\n```\n# Install the xcode command line tools if you\n# don't already have them.\nxcode-select --install\n\nmake && sudo make install && launchctl load /Library/LaunchAgents/com.warpd.warpd.plist\n```\n\nUninstallation:\n\n```\nsudo make uninstall\n```\n\n*Note:* On initialization you may be prompted to add the warpd binary to your\naccessibility settings. **If you are upgrading it may also be necessary to run\n`sudo tccutil reset Accessibility` (this will remove all applications\nfrom your accessibility settings)**. The service is now also managed by a\nlaunchd service (see below) and should not be explicitly started by the\nuser.\n\n*Note 2:* Some programs (e.g iTerm) have a 'secure input mode' that may need to be\ndisabled in order for warpd to work properly.\n\nThe service can be disabled with\n\n```\nlaunchctl unload /Library/LaunchAgents/com.warpd.warpd.plist\n```\n\n# Quickstart\n\n1. Run `warpd`\n\n## Hint Mode\n2. Press `A-M-x` (`alt+meta+x`) to generate a list of hints\n3. Enter the key sequence associated with the desired target to warp the pointer to that location and enter normal mode.\n4. Use the normal mode movement keys to select the final desination (see Normal Mode).\n\n## Grid Mode\n2. Press `A-M-g` (meta is the command key) to activate the warping process.\n3. Use `u`,`i`,`j`,`k` to repeatedly navigate to different quadrants.\n4. Press `m` to left click, `,` to middle click or `.` to right click.\n5. See Normal Mode\n\n## Normal Mode\n2. Press `A-M-c` to activate normal mode.\n3. Use the normal movement keys (default `hjkl`) to adjust the cursor.\n4. Press `m` to left click, `,` to middle click or `.` to right click.\n5. Press `escape` to quit.\n\nA drag movement can be simulated from any of the above modes by focusing on the\nsource and then pressing the `drag_key` (default `v`) which will cause normal\nmode to be activated for selection of the drag target.\n\nA more comprehensive description can be found in the [man page](warpd.1.md) (along with a list of options).\n\n## Wayland\n\n*Note:* Wayland does not permit clients to globally bind hotkeys. These must be\nbound within the compositor using warpd's oneshot flags.\n\nE.g\n\n**On sway**:\n\n```\n# warpd hotkeys\n\nbindsym Mod4+Mod1+x exec warpd --hint\nbindsym Mod4+Mod1+c exec warpd --normal\nbindsym Mod4+Mod1+g exec warpd --grid\n```\n\n**Using sxhkd**:\n\n```\n# warpd hotkeys\n\nAlt + super + x\n  exec warpd --hint\n\nAlt + super + c\n  warpd --normal\n\nAlt + super + g\n  warpd --grid\n```\n\n# Packages:\n\n`warpd` is currently available on the following distributions:\n\n## Arch\n\nAvailable in the [AUR](https://aur.archlinux.org/): [warpd](https://aur.archlinux.org/packages/warpd/), [warpd-wayland](https://aur.archlinux.org/packages/warpd-wayland), [warpd-git](https://aur.archlinux.org/packages/warpd-git) maintained by Matheus Fillipe.\n\nIf you are interesting in adding warpd to your distribution's repository please contact me.\n\n# Limitations/Bugs\n\n- Programs which use Xinput and or Xtest for keyboard may not work correctly\n  (e.g synergy). If a specific program which you feel should be working does\n  not please file an [issue](https://github.com/rvaiya/warpd/issues).\n\n- The hack used for pointer hiding on OSX doesn't work on some programs (e.g\n  iTerm). The original cursor will consequently be visible in such cases,\n  though functionality should be otherwise unaffected.\n\n- Wayland support has several limitations (see CAVEATS in the man page).\n\n# Contributions\n\nA special thanks to\n\n - Pete Fein - For encouragement and early adoption.\n - Matheus Fillipe - For the original border radius patch as well as numerous bug reports and feature requests.\n - The Kaleidoscope/Vimperator projects - For inspiration.\n - Drew Devault - For making the Wayland ecosystem inhabitable.\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.3037109375,
          "content": "- update docs (emphasize vi-*like* (but non-vi) nature)\n- create brew formula\n- improve demos\n- cleanup gen_assets.py\n- screen hotplugging\n- accelerator key\n- insert mode\n- cursor centering hacks\n- screen selection mode\n\nmaybe:\n\n- config hot reloading\n- visual grab indicator\n- grid undo/history\n- wayland port\n"
        },
        {
          "name": "codesign",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "mk",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "warpd.1.md",
          "type": "blob",
          "size": 12.458984375,
          "content": "warpd(1)\n\n# DESCRIPTION\n\nA modal keyboard driven pointer manipulation program.\n\n# SYNOPSIS\n\nwarpd [options]\n\n# OPTIONS\n\n\t*-f*, *--foreground*: Run warpd in the foreground. Mainly useful for debugging.\n\n\t*-l*, *--list-keys*: Print a list of valid keys which can be used as config values.\n\n\t*--list-options*: Print all configurable options.\n\n\t*-v*, *--version*: Print the current version.\n\n\t*-c*, *--config* <config file>: Use the provided config file (- corresponds to stdin).\n\nMode Flags:\n\n\t*--hint*: Run warpd in (daemonless) hint mode.\n\n\t*--hint2*: Run warpd in 2 stage hint mode.\n\n\t*--grid*: Run warpd in grid mode.\n\n\t*--normal*: Run warpd in normal mode.\n\n\t*--history*: Run warpd in history hint mode.\n\n\t*--screen*: Run warpd in screen selection mode.\n\n\t*--oneshot*: When paired with one of the mode flags, exit warpd as soon as the mode is complete (i.e don't drop into normal mode). When used with normal mode, exit as soon as a mouse button is pressed (without pressing it). If no mode flag is specified, the default behaviour is the same as --normal --oneshot. Principally useful for scripting.\n\n\t*-q*, *--query*: Consume a list of hints from stdin and print the result to stdout (in the form <x> <y> <hint>). Each line should have the form _<label> <x> <y>_. May be used in conjunction with --click.\n\n\t*--drag*: Automatically start a drag operation when paired with --normal.\n\n\t*--move '<x> <y>'*: Move the pointer to the specified coordinates and exit.\n\n\t*--click <button>*: Send a mouse click corresponding to the supplied button and exit. May be paired with --move or --oneshot (in which case the click will occur at the end of the selection).\n\n\t*--record*: When used with --click, adds the click event to warpd's history.\n\n# DESCRIPTION\n\nwarpd has three main modes which can be used to manipulate the pointer. The\nprimary mode is called 'normal mode' (A-M-c) and facilitates local pointer\nmovement using vi-like bindings (_h_ _j_ _k_ _l_). The other two modes, *hint*\nand *grid* mode are used to effect larger movements across the screen and are\nexpected to be used in combination with normal mode to achieve the desired end.\n\nFor example, the user might activate warpd in hint mode (_A-M-x_) to pinpoint\nthe start of a text region before starting a drag operation (_v_) and\nultimately using normal mode to complete the selection. If the selection is a\nlarge body of text, it may be desirable to activate grid (_g_) or hint (_x_)\nmode for a second time to warp the pointer to the desired region's terminal\npoint.  \n\nIn its simplest form, warpd can be used as a poor man's xdotool (--move/--click).\nScrolling can be acheived by using _e_ and _y_ in normal mode. For a full list of\nbindings see _--list-options_.\n\nA description of each mode follows (see also _USAGE_NOTES_):\n\n## Normal Mode (A-M-c)\n\nThis is the default mode (and the endpoint of both grid and normal mode) which\nis designed for short distance pointer manipulation. It is particularly useful\nfor manipulating popup menus and selecting text (see _Dragging_). The default\nbehaviour is vi-like. Pressing the mapped directional keys (default hjkl) moves\nthe cursor in a continuous fashion, but the pointer can also be warped to the edges\nof the screen using the home (_H_), middle (_M_), and last (_L_) mappings.\nFinally, a numeric multiplier can be supplied to the\ndirectional keys as an input prefix in order to move the cursor by a\nproportional increment in the given direction (e.g 10j moves 10 units down). \n\n## Hint Mode (A-M-x or simply 'x' within normal mode)\n\nThis mode populates the screen with a list of labels and allows the\nuser to immediately warp the pointer to a given location by pressing the\ncorresponding key sequence. It is similar to functionality provided by browser\nplugins like Vimperator but works outside of the browser and indiscriminately\ncovers the entire screen. Once a target has been selected 'normal mode' is\nentered for further manipulation.\n\n*Note:* While it may at first be tempting to saturate the screen with hints,\nthe user is cautioned against this. A balance must be struck between hint size,\nthe number of hints, and the size of the screen. Enough space must be left to\nprovide contextual awareness, while enough hints must be present to facilitate\ntargetting UI elements without the need for too much adjustment. Once this\nequilibrium has been achieved, using hint mode become second nature and is (in\nthe author's opinion) superior to grid mode for quickly pinpointing elements.\n\nFor finer movements, a two phase hint mode can be activated by pressing 'X'\nwithin normal mode.\n\n## History Mode (';' within normal mode)\n\nIdentical to hint mode but exclusively displays hints over previously\nselected targets.\n\n## Grid Mode ('A-M-g' or simply 'g' within normal mode)\n\nBy default grid mode divides the screen into a 2x2 grid. Each time a key\nis pressed the grid shrinks to cover the targeted quadrant. The cursor is placed\nin the middle of the grid.\n\ncovers the desired target a mouse button (e.g 'm') can be pressed.\n\n\nE.G\n\n```\n         +--------+--------+            +--------+--------+\n         |        |        |            |  u |  i |       |\n         |   u    |   i    |            |----m----+       |\n M-x     |        |        |     u      |  j |  k |       |\n----->   +--------m--------+   ----->   +---------+       |\n         |        |        |            |                 |\n         |   j    |   k    |            |                 |\n         |        |        |            |                 |\n         +--------+--------+            +--------+--------+\n```\n\n## Screen Selection Mode ('A-M-s' or simply 's' within normal mode)\n\nThis mode is intended for multi-screen setups and provides the user with a\ndedicated set of hints for switching monitors and dropping them into normal\nmode.\n\n## Dragging\n\nPressing _v_ whilst in normal mode toggles a drag operation. The cursor can\nthen be warped around the screen as normal in order to select text or move\nobjects until the drag key is hit again or a mouse button is pressed.\nAdditionally, the *copy_and_exit* key (_c_) may be used to copy the selected\ntext to the system clipboard and terminate the current session.\n\n## Wayland\n\nWayland's architecture does not allow clients to globally bind hotkeys. In\norder to run warpd, one of the mode flags must be used. These can be bound\nto the corresponding hotkeys in your compositor.\n\nE.G\n\nOn sway:\n\n```\nbindsym Mod4+Mod1+x exec warpd --hint\nbindsym Mod4+Mod1+c exec warpd --normal\nbindsym Mod4+Mod1+g exec warpd --grid\n```\n\nNon-wayland users should favour the daemon, since it also caches some of the\ndraw operations to improve performance.\n\n# CONFIG OPTIONS\n\nThe program can be modified by placing configuration options in \n*~/.config/warpd/config*, a complete list of which can be obtained\nwith _--list-options_.\n\nEach option must be specified on its own line and have the format:\n\n<option>: <value>\n\nOptions which take one or more keys may optionally be unset using the value\n\"unbind\".\n\n## RULES\n\n- Options which expect one or more keys may be specified multiple times, in which case all accepted mappings are interchangeable. \n\n- Options which accept multiple keys (e.g _buttons_) expect each key to be separated by a space.\n\n- For options expecting only a single key, it is possible to specify all desired bindings as space separated values in a single declaration.\n\n- If a key is bound to multiple config options, the most recently defined one takes precedence.\n\n## E.G\n\n```\nhint_mode: f a\n```\n\nis identical to\n\n```\nhint_mode: f\nhint_mode: a\n```\n\nand will bind both *f* and *a* to hint mode activation keys.\n\nwhile\n\n```\nbuttons: m , .\nbuttons: j k l\n```\n\nwill bind both the sequences *m* *,* *.* and *j* *k* *l* to mouse buttons *1* *2*\nand *3* respectively. Note that the latter set of bindings override the default\nnormal mode movements keys.\n\n# SCRIPTING\n\nJudicious use of warpd's flags makes creating custom modes fairly easy.\n\nFor example, the --oneshot flag may be used in conjunction with one of the mode\nflags to facilitate target selection at which point subsequent action can be\ntaken by the script.\n\n## Examples\n\n\t# Prompt the user for a target using two stage hint mode and \n\t# left click on the result. \n\t#\n\t# This particular example can be achieved more concisely with:\n\t#\n\t# warpd --hint2 --click 1\n\n\twarpd --hint2 --oneshot; warpd --click 1\n\n\t# Interactively create a hint file.\n\t#\n\t# Points can be added by navigating around as usual and pressing 'p'.\n\t# The process is terminated by using the exit key.\n\n\twarpd --normal|awk '{print substr(\"asdfghjkl;qwertyuiopzxcv,./;\", NR, 1), $0}' > hints\n\n\t# Prompt the user for one of the recorded hints and click on the\n\t# result.\n\n\twarpd --click 1 --query < hints \n\n\n# USAGE NOTES\n\nThe key to using warpd effectively is to learn when to exit normal mode. Much\nof one's time at a computer is spent moving the mouse between windows,\ninteracting with UI elements, and reading text. What one might call 'browse\nmode'. It is in this mode of operation that it makes sense to keep warpd\nactive.\n\nDeveloping facility with the scroll and oneshot mouse buttons is key to\nachieving this. For example, if you happen to have two documents open and wish\nto switch between them, you can simply type _x fx_ (where _fx_ is a hint) if\nnormal mode is already active. Scrolling can subsequently be achieved using _e_ and\n_r_. Once you finally wish to type something, you can do _x fx n_ to focus on\nthe UI element, click, and exit.\n\nConversely, warpd can complement an input heavy workflow with its oneshot\nfunctionality and dedicated activation keys (E.G _n_, _A-M-l_, _A-M-x_, etc).  \n\nIt is important to note that warpd is not intended to replace mouse heavy\nworkflows, and will likely always be inferior for rapid precise local\nmovements. When confronted with an IDE, or some other pointer driven\nabomination, the author still sometimes reaches for his mouse.\n\n## On Dragging\n\nActivating discrete mode and pressing v can provide a familiar environment to a\n_vi_ user but it is important to remember that cursor manipulation is\napplication agnostic and consequently ignorant of the text on the screen. All\nmovement is necessarily pixel based, consequently, drag + hint\nmode can be a superior method for surgically selecting text (though it may at\nfirst be less intuitive).\n\n# FILES\n\n*$XDG_CONFIG_HOME/warpd/config*++\n*~/.config/warpd/config*\n\tThe path of the configuration file (searched in order).\n\n# EXIT STATUS\n\nOn error warpd will exit with a status of 255, otherwise the exit code will\ncorrespond to the button used to terminate warpd (in the case of oneshot\nbuttons or in the presence of --oneshot).  If warpd is terminated explicitly\n(i.e with the exit key) it will exit with a status of 0.\n\n# BUGS/LIMITATIONS\n\nwarpd uses various platform specific hacks to bypass limitations\nof the display server. All implementations were written by the\nsame author, who presently uses X.\n\nConsequently testing on non-X platforms has been minimal.\n\nYMMV\n\nBugs can be reported here:\n\nhttps://github.com/rvaiya/warpd/issues/\n\nA list of known limitations follow:\n\n- Multiscreen support currently does not support hotplugging. This means that\n  you must restart warpd after making any changes to your screen configuration.\n\n- For implementation reasons, the cursor position is not horizontally centered,\n  but to the right of the actual pointer. This generally isn't an issue,\n  but may become more noticeable as you increase _cursor_size_.\n\n## X\n\n- Unplugging the keyboard while warpd is one of its active modes will cause\n  pandemonium.  If you do this (don't :P), you may need to remotely ssh into\n  the machine or switch to a VT to kill the process.\n\n- warpd uses Xinput for input processing to bypass certain limitation of the X\n  input system. A byproduct of this is that certain remapping tools will not\n  work (e.g xcape). If you are in the habit of making unorthodox changes to\n  your keymap (like remapping capslock to control/escape) you may want to try\n  an evdev based remapper like keyd (https://github.com/rvaiya/keyd).\n\n- Programs which use Xinput to directly manipulate input devices may misbehave.\n  See [Issue #3](https://github.com/rvaiya/warpd/issues/3#issuecomment-628936249) for details.\n\n## MacOS\n\n- Cursor hiding relies on a hack that some programs ignore (e.g iTerm).\n- Some programs (e.g iTerm) have a 'secure input mode' (which can usually be\ndisabled) that causes interference.\n\n## Wayland\n\n- Cursor hiding doesn't work.\n- Running as a daemon doesn't work (can't listen for hotkeys).\n- UI elements (e.g input fields) which require focus can't be selected.\n\n# AUTHORS\n\nWritten and maintained by Raheman Vaiya (2019-).\nSee https://github.com/rvaiya/warpd for more information.\n"
        }
      ]
    }
  ]
}