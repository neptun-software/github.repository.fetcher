{
  "metadata": {
    "timestamp": 1736710001473,
    "page": 587,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "way-cooler/way-cooler",
      "stars": 2132,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".build.yml",
          "type": "blob",
          "size": 0.974609375,
          "content": "image: archlinux\npackages:\n  - lua\n  - meson\n  - ninja\n  - wayland\n  - wayland-protocols\n  - mesa\n  - xorg-server-xwayland\n  - cairo\n  - xcb-util-image\n  - libinput\n  - pixman\n  - libxkbcommon\n  - gdk-pixbuf2\n  - xcb-util-image\n  - libcap\n  - clang\n  - libxcb\n  - xcb-util-image\n  - xcb-util-cursor\n  - xcb-util-wm\n  - python\nsources:\n  - https://github.com/way-cooler/way-cooler\n  - https://github.com/swaywm/wlroots\ntasks:\n  - check-c-style: |\n      cd way-cooler\n      python ./run-clang-format.py -r ./way-cooler/\n  - wlroots: |\n      cd wlroots\n      # TODO Update to 0.8.2 or 0.9.0 whichever comes first\n      git checkout cde544de\n      meson --prefix=/usr build -Drootston=false -Dexamples=false\n      ninja -C build\n      sudo ninja -C build install\n  - way-cooler-common: |\n      cd way-cooler\n      CC=gcc meson build-gcc\n      CC=clang meson build-clang\n  - way-cooler-gcc: |\n      cd way-cooler/build-gcc\n      ninja\n  - way-cooler-clang: |\n      cd way-cooler/build-clang\n      ninja\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.607421875,
          "content": "---\nLanguage: Cpp\nBasedOnStyle: Chromium\n\nAccessModifierOffset: -1\n\nAlignAfterOpenBracket: DontAlign\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Left\nAlignOperands:   false\nAlignTrailingComments: false\n\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\n\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\n\nBinPackArguments: true\nBinPackParameters: true\n\n# NOTE: Only takes effect if BreakBeforeBraces is \"Custom\"\nBraceWrapping:   \n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\n\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: false\nBreakStringLiterals: true\n\nColumnLimit:     80\n\nContinuationIndentWidth: 8\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\n\nIncludeBlocks:   Preserve\nIncludeCategories: \n  - Regex:           '^<ext/.*\\.h>'\n    Priority:        2\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIncludeIsMainRegex: '([-_](test|unittest))?$'\n\nIndentCaseLabels: false\nIndentPPDirectives: None\nIndentWidth:     4\nIndentWrappedFunctionNames: false\n\nKeepEmptyLinesAtTheStartOfBlocks: false\nMaxEmptyLinesToKeep: 1\n\n# TODO What?\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\n\nPointerAlignment: Right\n\nSortIncludes:    true\n\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\n\nStandard:        Auto\nTabWidth:        4\nUseTab:          ForContinuationAndIndentation\n...\n\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1162109375,
          "content": "# Compiled files\n*.o\n*.so\n*.rlib\n*.dll\n\n# Generated by meson\nbuild\n\n# For building wlroots as a subproject\nsubprojects\n"
        },
        {
          "name": "Contributing.md",
          "type": "blob",
          "size": 0.419921875,
          "content": "# Style Guide\n\n## General Guidelines\n\n## Git\n\n[Use good git commit messages](https://chris.beams.io/posts/git-commit/). Please\nsquash/rebase liberally.\n\n## C formatting\n\nWay Cooler formats its C code using clang-format. This format is mostly the same\nformat as wlroots, though there are some differences. Whatever clang-format\ncorrects to is the correct style.\n\nImports are grouped as described by the Google import style guide.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Immington Industries \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.740234375,
          "content": "# <img src=\"http://i.imgur.com/OGeL1nN.png\" width=\"60\"> Way Cooler\n[![Downloads](https://img.shields.io/crates/d/way-cooler.svg)](https://crates.io/crates/way-cooler)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/way-cooler/way-cooler/)\n\nWay Cooler is the compositor component of [AwesomeWM][] for [Wayland][]. \n\n## Building\n\nTo build Way Cooler, ensure you have meson installed \n(as well as [wlroots][], or use the `subprojects/` directory \nand build it locally).\n\nThen, execute:\n\n```bash\nmeson build\nninja -C build\n```\n\nTo run the compositor simply execute `build/way-cooler/way-cooler` in a TTY or\nany existing window manager.\n\nIt can run with [this patched version of the Awesome\nclient](https://github.com/way-cooler/awesome). The simplest way to execute both\nis to run `way-cooler -c </path/to/patched/awesome>`.\n\nThough technically they can run standalone, the compositor is not usable by\nitself and the client will fail out in other compositor due to the custom\nprotocols not being present.\n\n## Development\n\nWay Cooler is under active development. If you would like to contribute you can\ncontact me best on [IRC][] (I also hang out on freenode).\n\n**Master is not usable for production**. There are old versions of Way Cooler\nthat do work, however:\n\n* Is written in Rust and must be built with `cargo`.\n* They use an old framework, [wlc][], and thus are very limited and buggy.\n* Was not designed to emulate Awesome, but instead has [i3][] tiling and its own\n  (very incomplete) Lua libraries.\n\n[Wayland]: https://wayland.freedesktop.org/\n[wlc]: https://github.com/Cloudef/wlc\n[AwesomeWM]: https://awesomewm.org/\n[wlroots]: https://github.com/swaywm/wlroots\n[IRC]: https://webchat.oftc.net/?channels=awesome&uio=d4\n[i3]: https://i3wm.org\n"
        },
        {
          "name": "changelog",
          "type": "tree",
          "content": null
        },
        {
          "name": "makedocs.sh",
          "type": "blob",
          "size": 1.23046875,
          "content": "#!/bin/sh\n\nman() {\n  file=$1\n  dir=$2\n\n  lang=\"$(dirname $file)\"\n  basename=$(basename $file .md)\n  section=${basename##*.}\n\n  mkdir -p \"$dir/$lang/man$section\"\n  echo \"$file > $dir/$lang/man$section/$basename.gz\"\n  asciidoctor -d manpage -b manpage -o - \"$file\" | gzip > \"$dir/$lang/man$section/$basename.gz\"\n}\n\nhtml() {\n  file=$1\n  dir=$2\n  basename=$(basename $file .md)\n\n  lang=\"$(dirname $file)\"\n  out=\"$dir/$lang/$basename.html\"\n\n  mkdir -p \"$dir/$lang\"\n  echo \"$file > $out\"\n  asciidoctor -o - \"$file\" > \"$out\"\n}\n\n# defaults, do all\ndo_man=true\ndo_html=true\n\nfor i in \"$@\"; do\n  case $i in\n    -m|--manualonly)\n      do_html=false\n    ;;\n    -h|--htmlonly)\n      do_man=false\n    ;;\n    *)\n      if [ -z \"$input\" ]; then\n        input=$i\n      else\n        output=\"$PWD/$i\"\n      fi\n    ;;\n  esac\ndone\n\nwhich \"asciidoctor\" > /dev/null\nif [ \"$?\" -eq 1 ]; then\n  echo \"The asciidoctor executable is required to build man files\"\n  exit 1\nfi\n\nif [ -z \"$output\" -o -z \"$input\" ]; then\n  echo \"Way-cooler's documentation maker\\nUsage: ./makedocs.sh [-m|--manualonly] [-h|--htmlonly] input output\"\n  exit 1\nfi\n\ncd $input\nfor file in */*.md *.md; do\n  [ \"$do_html\" = true ] && html $file $output\n  [ \"$do_man\" = true ] && man $file $output\ndone\ncd - > /dev/null"
        },
        {
          "name": "manpages",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 0.93359375,
          "content": "project(\n    'way-cooler',\n    'c',\n    version: '0.8.0',\n    license: 'MIT',\n    meson_version: '>=0.48.0',\n    default_options: [\n        'c_std=c11',\n        'warning_level=2',\n        'werror=true',\n    ]\n)\n\nadd_project_arguments(\n    [\n        '-DWLR_USE_UNSTABLE',\n\n        '-Wno-unused-parameter',\n        '-Wno-unused-result',\n        '-Wundef',\n        '-Wvla',\n    ],\n    language: 'c'\n)\n\ngit = find_program('git', native: true, required: false)\n\nif git.found()\n\tgit_commit_hash = run_command([git.path(), 'describe', '--always', '--tags'])\n\tgit_branch = run_command([git.path(), 'rev-parse', '--abbrev-ref', 'HEAD'])\n\tif git_commit_hash.returncode() == 0 and git_branch.returncode() == 0\n\t\tversion = '\"@0@ (\" __DATE__ \", branch \\'@1@\\')\"'.format(git_commit_hash.stdout().strip(), git_branch.stdout().strip())\n\tendif\nendif\nadd_project_arguments('-DWAY_COOLER_VERSION=@0@'.format(version), language: 'c')\n\nsubdir('protocols')\nsubdir('way-cooler')\n"
        },
        {
          "name": "protocols",
          "type": "tree",
          "content": null
        },
        {
          "name": "run-clang-format.py",
          "type": "blob",
          "size": 9.720703125,
          "content": "#!/usr/bin/env python\n\"\"\"A wrapper script around clang-format, suitable for linting multiple files\nand to use for continuous integration.\n\nTaken from https://github.com/Sarcasm/run-clang-format\n\nThis is an alternative API for the clang-format command line.\nIt runs over multiple files and directories in parallel.\nA diff output is produced and a sensible exit code is returned.\n\n\"\"\"\n\nfrom __future__ import print_function, unicode_literals\n\nimport argparse\nimport codecs\nimport difflib\nimport fnmatch\nimport io\nimport multiprocessing\nimport os\nimport signal\nimport subprocess\nimport sys\nimport traceback\n\nfrom functools import partial\n\nDEFAULT_EXTENSIONS = 'c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx'\n\n\nclass ExitStatus:\n    SUCCESS = 0\n    DIFF = 1\n    TROUBLE = 2\n\n\ndef list_files(files, recursive=False, extensions=None, exclude=None):\n    if extensions is None:\n        extensions = []\n    if exclude is None:\n        exclude = []\n\n    out = []\n    for file in files:\n        if recursive and os.path.isdir(file):\n            for dirpath, dnames, fnames in os.walk(file):\n                fpaths = [os.path.join(dirpath, fname) for fname in fnames]\n                for pattern in exclude:\n                    # os.walk() supports trimming down the dnames list\n                    # by modifying it in-place,\n                    # to avoid unnecessary directory listings.\n                    dnames[:] = [\n                        x for x in dnames\n                        if\n                        not fnmatch.fnmatch(os.path.join(dirpath, x), pattern)\n                    ]\n                    fpaths = [\n                        x for x in fpaths if not fnmatch.fnmatch(x, pattern)\n                    ]\n                for f in fpaths:\n                    ext = os.path.splitext(f)[1][1:]\n                    if ext in extensions:\n                        out.append(f)\n        else:\n            out.append(file)\n    return out\n\n\ndef make_diff(file, original, reformatted):\n    return list(\n        difflib.unified_diff(\n            original,\n            reformatted,\n            fromfile='{}\\t(original)'.format(file),\n            tofile='{}\\t(reformatted)'.format(file),\n            n=3))\n\n\nclass DiffError(Exception):\n    def __init__(self, message, errs=None):\n        super(DiffError, self).__init__(message)\n        self.errs = errs or []\n\n\nclass UnexpectedError(Exception):\n    def __init__(self, message, exc=None):\n        super(UnexpectedError, self).__init__(message)\n        self.formatted_traceback = traceback.format_exc()\n        self.exc = exc\n\n\ndef run_clang_format_diff_wrapper(args, file):\n    try:\n        ret = run_clang_format_diff(args, file)\n        return ret\n    except DiffError:\n        raise\n    except Exception as e:\n        raise UnexpectedError('{}: {}: {}'.format(file, e.__class__.__name__,\n                                                  e), e)\n\n\ndef run_clang_format_diff(args, file):\n    try:\n        with io.open(file, 'r', encoding='utf-8') as f:\n            original = f.readlines()\n    except IOError as exc:\n        raise DiffError(str(exc))\n    invocation = [args.clang_format_executable, file]\n\n    # Use of utf-8 to decode the process output.\n    #\n    # Hopefully, this is the correct thing to do.\n    #\n    # It's done due to the following assumptions (which may be incorrect):\n    # - clang-format will returns the bytes read from the files as-is,\n    #   without conversion, and it is already assumed that the files use utf-8.\n    # - if the diagnostics were internationalized, they would use utf-8:\n    #   > Adding Translations to Clang\n    #   >\n    #   > Not possible yet!\n    #   > Diagnostic strings should be written in UTF-8,\n    #   > the client can translate to the relevant code page if needed.\n    #   > Each translation completely replaces the format string\n    #   > for the diagnostic.\n    #   > -- http://clang.llvm.org/docs/InternalsManual.html#internals-diag-translation\n    #\n    # It's not pretty, due to Python 2 & 3 compatibility.\n    encoding_py3 = {}\n    if sys.version_info[0] >= 3:\n        encoding_py3['encoding'] = 'utf-8'\n\n    try:\n        proc = subprocess.Popen(\n            invocation,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True,\n            **encoding_py3)\n    except OSError as exc:\n        raise DiffError(str(exc))\n    proc_stdout = proc.stdout\n    proc_stderr = proc.stderr\n    if sys.version_info[0] < 3:\n        # make the pipes compatible with Python 3,\n        # reading lines should output unicode\n        encoding = 'utf-8'\n        proc_stdout = codecs.getreader(encoding)(proc_stdout)\n        proc_stderr = codecs.getreader(encoding)(proc_stderr)\n    # hopefully the stderr pipe won't get full and block the process\n    outs = list(proc_stdout.readlines())\n    errs = list(proc_stderr.readlines())\n    proc.wait()\n    if proc.returncode:\n        raise DiffError(\"clang-format exited with status {}: '{}'\".format(\n            proc.returncode, file), errs)\n    return make_diff(file, original, outs), errs\n\n\ndef bold_red(s):\n    return '\\x1b[1m\\x1b[31m' + s + '\\x1b[0m'\n\n\ndef colorize(diff_lines):\n    def bold(s):\n        return '\\x1b[1m' + s + '\\x1b[0m'\n\n    def cyan(s):\n        return '\\x1b[36m' + s + '\\x1b[0m'\n\n    def green(s):\n        return '\\x1b[32m' + s + '\\x1b[0m'\n\n    def red(s):\n        return '\\x1b[31m' + s + '\\x1b[0m'\n\n    for line in diff_lines:\n        if line[:4] in ['--- ', '+++ ']:\n            yield bold(line)\n        elif line.startswith('@@ '):\n            yield cyan(line)\n        elif line.startswith('+'):\n            yield green(line)\n        elif line.startswith('-'):\n            yield red(line)\n        else:\n            yield line\n\n\ndef print_diff(diff_lines, use_color):\n    if use_color:\n        diff_lines = colorize(diff_lines)\n    if sys.version_info[0] < 3:\n        sys.stdout.writelines((l.encode('utf-8') for l in diff_lines))\n    else:\n        sys.stdout.writelines(diff_lines)\n\n\ndef print_trouble(prog, message, use_colors):\n    error_text = 'error:'\n    if use_colors:\n        error_text = bold_red(error_text)\n    print(\"{}: {} {}\".format(prog, error_text, message), file=sys.stderr)\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument(\n        '--clang-format-executable',\n        metavar='EXECUTABLE',\n        help='path to the clang-format executable',\n        default='clang-format')\n    parser.add_argument(\n        '--extensions',\n        help='comma separated list of file extensions (default: {})'.format(\n            DEFAULT_EXTENSIONS),\n        default=DEFAULT_EXTENSIONS)\n    parser.add_argument(\n        '-r',\n        '--recursive',\n        action='store_true',\n        help='run recursively over directories')\n    parser.add_argument('files', metavar='file', nargs='+')\n    parser.add_argument(\n        '-q',\n        '--quiet',\n        action='store_true')\n    parser.add_argument(\n        '-j',\n        metavar='N',\n        type=int,\n        default=0,\n        help='run N clang-format jobs in parallel'\n        ' (default number of cpus + 1)')\n    parser.add_argument(\n        '--color',\n        default='auto',\n        choices=['auto', 'always', 'never'],\n        help='show colored diff (default: auto)')\n    parser.add_argument(\n        '-e',\n        '--exclude',\n        metavar='PATTERN',\n        action='append',\n        default=[],\n        help='exclude paths matching the given glob-like pattern(s)'\n        ' from recursive search')\n\n    args = parser.parse_args()\n\n    # use default signal handling, like diff return SIGINT value on ^C\n    # https://bugs.python.org/issue14229#msg156446\n    signal.signal(signal.SIGINT, signal.SIG_DFL)\n    try:\n        signal.SIGPIPE\n    except AttributeError:\n        # compatibility, SIGPIPE does not exist on Windows\n        pass\n    else:\n        signal.signal(signal.SIGPIPE, signal.SIG_DFL)\n\n    colored_stdout = False\n    colored_stderr = False\n    if args.color == 'always':\n        colored_stdout = True\n        colored_stderr = True\n    elif args.color == 'auto':\n        colored_stdout = sys.stdout.isatty()\n        colored_stderr = sys.stderr.isatty()\n\n    retcode = ExitStatus.SUCCESS\n    files = list_files(\n        args.files,\n        recursive=args.recursive,\n        exclude=args.exclude,\n        extensions=args.extensions.split(','))\n\n    if not files:\n        return\n\n    njobs = args.j\n    if njobs == 0:\n        njobs = multiprocessing.cpu_count() + 1\n    njobs = min(len(files), njobs)\n\n    if njobs == 1:\n        # execute directly instead of in a pool,\n        # less overhead, simpler stacktraces\n        it = (run_clang_format_diff_wrapper(args, file) for file in files)\n        pool = None\n    else:\n        pool = multiprocessing.Pool(njobs)\n        it = pool.imap_unordered(\n            partial(run_clang_format_diff_wrapper, args), files)\n    while True:\n        try:\n            outs, errs = next(it)\n        except StopIteration:\n            break\n        except DiffError as e:\n            print_trouble(parser.prog, str(e), use_colors=colored_stderr)\n            retcode = ExitStatus.TROUBLE\n            sys.stderr.writelines(e.errs)\n        except UnexpectedError as e:\n            print_trouble(parser.prog, str(e), use_colors=colored_stderr)\n            sys.stderr.write(e.formatted_traceback)\n            retcode = ExitStatus.TROUBLE\n            # stop at the first unexpected error,\n            # something could be very wrong,\n            # don't process all files unnecessarily\n            if pool:\n                pool.terminate()\n            break\n        else:\n            sys.stderr.writelines(errs)\n            if outs == []:\n                continue\n            if not args.quiet:\n                print_diff(outs, use_color=colored_stdout)\n            if retcode == ExitStatus.SUCCESS:\n                retcode = ExitStatus.DIFF\n    return retcode\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n"
        },
        {
          "name": "way-cooler",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}