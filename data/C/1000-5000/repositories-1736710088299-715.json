{
  "metadata": {
    "timestamp": 1736710088299,
    "page": 715,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "varnish/hitch",
      "stars": 1885,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4287109375,
          "content": "conf\nebtree*\ncore\ncore.*\n*.a\n*.o\n*.in\n*~\n.deps\n*.sw[op]\n/src/hitch\nMakefile\n/aclocal.m4\n/stamp-h1\n/config.log\n/config.status\n/config.h\n/configure\n/autom4te.cache\n/hitch.8\n# Flex/Bison output files.\n/src/cfg_lex.c\n/src/cfg_parser.c\n/src/cfg_parser.h\n/src/cfg_parser.output\n/ylwrap\nsrc/tests/utils/parse_proxy_v2\nsrc/tests/test*.trs\nsrc/tests/test*.log\nsrc/test-suite.log\nparse_proxy_v2\n/build-aux/\nhitch.conf.5\n.dirstamp\nhitch.conf.example\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2412109375,
          "content": "language: c\n\nbefore_install:\n  - sudo apt-get update\n  - sudo apt-get install libev-dev libssl-dev automake python-docutils flex bison\n\nbefore_script:\n  - ./bootstrap\n  - make -j4\n\nscript:\n  - make -j4 check VERBOSE=1\n\ncompiler:\n  - clang\n  - gcc\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 19.212890625,
          "content": "List of changes\n===============\n\nThis file contains the running log of changes applied to each released hitch\nversion.\n\nhitch-1.8.0 (2023-08-09)\n------------------------\n\n* Added command line option ``--backend-connect-timeout`` and\n  corresponding configuration file setting\n  ``backend-connect-timeout``.\n* Added command line option ``--ssl-handshake-timeout`` and\n  corresponding configuration file setting ``ssl-handshake-timeout``.\n* The ``client-verify`` configuration file setting can now also be\n  applied at the ``pem-file`` level, making it only apply if that\n  particular certificate is chosen.\n* Fixed a bug where we would change file ownership of the output log\n  file also when not needed. (Issue: 371_)\n* Number of worker processes can now be specified as ``auto``, which\n  will automatically create one worker per CPU on the system. This\n  setting is available both for the ``--workers`` command line option\n  and for the ``workers`` configuration file setting. Thanks to\n  Thierry Magnien (@tmagnien) for the contribution.\n* Fixed a bug that prevented configuring a UNIX domain socket backend\n  when the ``--chroot`` setting was specified.\n\n.. _371: https://github.com/varnish/hitch/issues/371\n\n\nhitch-1.7.3 (2022-09-14)\n------------------------\n\n* Fixes build for OpenSSL 3.0.\n\n\nhitch-1.7.2 (2021-11-29)\n------------------------\n\n* pem-dir now works correctly also for file systems without proper\n  file type classification in readdir(). Thanks got Xavier G\n  (@xavierog).\n* Fix an issue in ``proxy-proxy`` error handling.\n* Minor build-related fixes.\n\n\nhitch-1.7.1 (2021-04-19)\n------------------------\n\n* Drop the requirement that PROXYv2 needs to be configured in order to\n  use ALPN.\n* Minor (inconsequential) memory leak fixed.\n* Minor build-related fixes.\n\nhitch-1.7.0 (2020-10-23)\n------------------------\n\n* The following command line settings now accept a '--<setting>=on' or\n  '--<setting>=off' option: ``--prefer-server-ciphers``,\n  ``--enable-tcp-fastopen``, ``--quiet``, ``--syslog``, ``--daemon``,\n  ``--write-ip``, ``--write-proxy-v1``, ``--write-proxy-v2``,\n  ``--write-proxy``, ``--proxy-proxy`` and ``--sni-nomatch-abort``.\n* Added command line option ``--tls-protos``. This is equivalent to\n  the configuration file setting ``tls-protos``, and lets you specify\n  which TLS protocols to configure. The default setting is\n  ``--tls-protos=\"TLSv1.2 TLSv1.3\"``.\n* Fixed an issue relating to imbalanced load distribution when running\n  with multiple worker processes. Hitch will now distribute work much\n  more evenly in multi-worker setups. (Issue: 142_)\n* The ``--proxy-proxy`` setting will now also parse and forward\n  PROXYv2 (Issue: 249_).\n* Added PROXY setting ``proxy-client-cert``, which will amend the\n  PROXYv2 header with the full PEM-formatted client certificate as a\n  custom TLV value (0xe0).\n\n.. _142: https://github.com/varnish/hitch/issues/142\n.. _249: https://github.com/varnish/hitch/issues/249\n\n\nhitch-1.6.1 (2020-08-31)\n------------------------\n\n* Fix an issue in our PROXYv2 handling that caused us to sometimes\n  transmit a wrong 'verify' status code for client certificate\n  validation.\n* Fix build for OpenSSL without NPN/APLN support. Thanks to Wataru\n  Ashihara.\n\nhitch-1.6.0 (2020-06-25)\n------------------------\n\n* Added support for client certificate validation. This is specified\n  via the new ``client-verify`` and ``client-verify-ca`` configuration\n  settings. See hitch.conf(5) for more details.\n* Added support for a few PROXY properties for client certificate\n  validation. When Hitch is used alongside Varnish, one may make use\n  of vmod-proxy's proxy.client_has_cert_sess(),\n  proxy.ssl_verify_result() and proxy.client_has_cert_conn().\n* TLSv1.3 cipher suites can now be configured via the ``ciphersuites``\n  configuration file setting.\n* Added ``ecdh-curve`` configuration file setting for specifying the\n  list of supported TLS curves.\n* Default ``log-level`` is now set to 1, making Hitch slightly more\n  chatty by default.\n* Fixed a bug related to session resumption with client certificate\n  verification enabled, where some clients would fail resumption with\n  a \"session id context uninitialized\" error message.\n* Fixed a very minor memory leak, and a few other minor code cleanups.\n* Various minor documentation fixes\n\nhitch-1.6.0~beta3 (2020-06-22)\n------------------------------\n\n* Fix a bug related to session resumption with client certificate\n  verification enabled, where some clients would fail resumption with\n  a \"session id context uninitialized\" error message.\n\nhitch-1.6.0~beta2 (2020-05-29)\n------------------------------\n\n* Added support for a few PROXY properties for client certificate\n  validation. When Hitch is used alongside Varnish, one may make use\n  of vmod-proxy's proxy.client_has_cert_sess(),\n  proxy.ssl_verify_result() and proxy.client_has_cert_conn().\n\nhitch-1.6.0-beta1 (2020-05-27)\n------------------------------\n\n* TLSv1.3 cipher suites can now be configured via the ``ciphersuites``\n  configuration file setting.\n* Added ``ecdh-curve`` configuration file setting for specifying the\n  list of supported TLS curves.\n* Default ``log-level`` is now set to 1, making Hitch slightly more\n  chatty by default.\n* Added support for client certificate validation. This is specified\n  via the new ``client-verify`` and ``client-verify-ca`` configuration\n  settings. See hitch.conf(5) for more details.\n* Fixed a very minor memory leak, and a few other minor code cleanups.\n\n\nhitch-1.5.2 (2019-11-27)\n------------------------\n\n* Fix a problem introduced in the previous release that prevented us\n  from running as a non-privileged user (Issue: 322_).\n\n.. _322: https://github.com/varnish/hitch/issues/322\n\n\nhitch-1.5.1 (2019-11-26)\n------------------------\n\n* Support for TCP Fast Open. Is is disabled by default (Issue: 185_)\n* Various code cleanups and minor bug fixes.\n\n.. _185: https://github.com/varnish/hitch/issues/185\n\n\nhitch-1.5.0 (2018-12-17)\n------------------------\n\n* Support for UNIX domain socket connections. A backend endpoint can\n  now be specified as a UNIX domain socket, via ``backend = \"/path/to/socket\"``.\n* New configuration file settings ``pem-dir`` and ``pem-dir-glob``.\n  ``pem-dir`` can be used to specify a directory\n  for loading certificates, without specifying each file individually.\n* Support for TLS 1.3. Thanks to Lasse Karstensen.\n* Fixed a bug that would cause a crash on reload if ``ocsp-dir`` was\n  changed.\n* Add ``log-level``. This supersedes the previous ``quiet`` setting,\n  which is now deprecated.\n* Add ``proxy-tlv``. This enables extra reporting of cipher and\n  protocol as part of the PROXYv2 protocol.\n* Drop TLSv1.1 from the default TLS protocols list.\n\nhitch-1.4.8 (2018-04-19)\n------------------------\n\n* Reworked the dynamic backend bits.\n* Update docs to recommend running Hitch as a separate non-privileged\n  user.\n\nhitch-1.4.7 (2018-01-11)\n------------------------\n\n* Massive test suite refactor and update.\n* Fix OpenBSD/FreeBSD/POSIX portability issues: restrict fstat(1) to OpenBSD,\n  bring sockstat(1) support back, drop pathchk(1) usage in the test suite,\n  switch from sockstat(1) to fstat(1) (Issue: 234_)\n* Add an OCSP refresh timeout parameter (Issue: 229_)\n* Autotools polish (Issue: 231_)\n* Random usage of config section if reduntant (Issue: 192_)\n* Support for separate key files (Issue: 65_)\n* Fix logging to syslog even when set to syslog = off (Issue: 187_)\n* Making log-filename, recv-bufsize and send-bufsize parameters available\n  though command line and config file.\n* Fix: global backaddr is assumed to be static (Issue: 84_)\n* Add support for session-cache in config file and as cmdline option\n  (Issue: 166_)\n* Plug file descriptor leak: killing worker processes would leave the pipe's\n  write end open, leaking one file descriptor per worker upon reload\n  (Issue: 193_)\n\n.. _234: https://github.com/varnish/hitch/issues/234\n.. _229: https://github.com/varnish/hitch/issues/229\n.. _231: https://github.com/varnish/hitch/issues/231\n.. _192: https://github.com/varnish/hitch/issues/192\n.. _65:  https://github.com/varnish/hitch/issues/65\n.. _187: https://github.com/varnish/hitch/issues/187\n.. _84:  https://github.com/varnish/hitch/issues/84\n.. _166: https://github.com/varnish/hitch/issues/166\n.. _193: https://github.com/varnish/hitch/issues/193\n\n\nhitch-1.4.6 (2017-06-06)\n------------------------\n\n* Fix a problem that broke mock-based builds for el6/el7 (Issue 181_)\n\n.. _181:  https://github.com/varnish/hitch/issues/181\n\n\nhitch-1.4.5 (2017-05-31)\n------------------------\n\n* Set SSL_OP_SINGLE_ECDH_USE to force a fresh ECDH key pair per\n  handshake (Issue 155_)\n* Fix a bug where we ended up leaking a zombie process on reload\n  (Issue 167_). Thank you to @dward\n* Fix a bug where the management process could not find its\n  configuration files after a reload when chroot was configured (Issue 176_)\n* Output the offending line on a configuration file parsing error\n* Fix build for non-C99/C11 compilers (Issue 173_)\n* Fix the shared cache code to make it work also with OpenSSL 1.1.0\n* Fix an unchecked loop situation that could occur when running\n  with shared cache enabled (Issue 152_)\n* Various autotools configuration fixes\n* A few minor doc fixes\n\n.. _155: https://github.com/varnish/hitch/issues/155\n.. _167: https://github.com/varnish/hitch/issues/167\n.. _176: https://github.com/varnish/hitch/issues/176\n.. _173: https://github.com/varnish/hitch/issues/173\n.. _152: https://github.com/varnish/hitch/issues/152\n\n\nhitch-1.4.4 (2016-12-22)\n------------------------\n\n* OpenSSL 1.1.0 compatibility fixes. OpenSSL 1.1.0 is now fully\n  supported with Hitch.\n* Fix a bug in the OCSP refresh code that could make it loop with\n  immediate refreshes flooding an OCSP responder.\n* Force the SSL_OP_SINGLE_DH_USE setting. This protects against an\n  OpenSSL vulnerability where a remote attacker could discover private\n  DH exponents (CVE-2016-0701).\n\n\nhitch-1.4.3 (2016-11-14)\n------------------------\n\n* OCSP stapling is now enabled by default.\n  Users should create ocsp-dir (default: /var/lib/hitch/) and make it\n  writable for the hitch user.\n\n* Build error due to man page generation on FreeBSD (most likely non-Linux)\n  has been fixed.\n\n\nhitch-1.4.2 (2016-11-08)\n------------------------\n\n* Example configuration file hitch.conf.example has been shortened and\n  defaults moved into Hitch itself. Default cipher string is now what we\n  believe to be secure. Users are recommended to use the built-in default\n  from now on, unless they have special requirements.\n\n* hitch.conf(5) manual has been added.\n\n* Hitch will now send a TLS Close notification during connection teardown.\n  This fixes an incomplete read with a GnuTLS client when the backend\n  (thttpd) used EOF to signal end of data, leaving some octets discarded\n  by gnutls client-side. (Issue 127_)\n\n* Autotools will now detect SO_REUSEPORT availability. (Issue 122_)\n\n* Improved error handling on memory allocation failure.\n\n.. _122: https://github.com/varnish/hitch/issues/122\n.. _127: https://github.com/varnish/hitch/issues/127\n\n\nhitch-1.4.1 (2016-09-23)\n------------------------\n\n* Add a new ``tls-protos`` configuration option for specifying the\n  permitted TLS/SSL protocols. This new option supersedes settings\n  ``ssl`` and ``tls`` which are now deprecated and will be kept for\n  backwards compatibility.\n\n\nhitch-1.4.0 (2016-09-12)\n------------------------\n\n* Fix a bug in the OCSP request code where it broke if the OCSP\n  responder required a Host header. (Issue 113_)\n\n* Add support for ECC certificates. (Issue 116_)\n\n.. _113: https://github.com/varnish/hitch/issues/113\n.. _116: https://github.com/varnish/hitch/issues/116\n\n\nhitch-1.4.0-beta1 (2016-08-26)\n------------------------------\n\n* NPN/ALPN support for negotiating a protocol in the SSL\n  handshake. This lets you use Hitch for terminating TLS in front of\n  an HTTP/2 capable backend. For ALPN, OpenSSL 1.0.2 is needed, while\n  NPN requires OpenSSL 1.0.1.\n\n* Expanded PROXY protocol support for communicating an ALPN/NPN\n  negotiated protocol to the backend. Hitch will now include the\n  ALPN/NPN protocol that was selected during the handshake as part of\n  the PROXYv2 header.\n\n\nhitch-1.3.1 (2016-08-16)\n------------------------\n\n* Fixes a bug in the autotools configuration which led to man pages not being built.\n\n\nhitch-1.3.0 (2016-08-16)\n------------------------\n\n* Fix a bug where we crashed in the OCSP handling if there was no\n  default SSLCTX configured.\n\n* Minor documentation fix.\n\n\nhitch-1.3.0-beta3 (2016-07-26)\n------------------------------\n\n* Fully automated retrieval and refreshes of OCSP responses (see\n  configuration.md for details).\n* New parameters ``ocsp-dir``, ``ocsp-resp-tmo`` and ``ocsp-connect-tmo``.\n* Cleanup of various log messages.\n* Verification of OCSP staples. Enabled by setting\n  ``ocsp-verify-staple = on``.\n* Make rst2man an optional requirement (Issue 93_). Thanks to Barry Allard.\n* Avoid stapling expired OCSP responses.\n* A few fixes to the shared cache updating code. Thanks to Piyush Dewnani.\n\n.. _93: https://github.com/varnish/hitch/issues/93\n\nhitch-1.3.0-beta2 (2016-05-31)\n------------------------------\n\n* Options given on the command line now take presedence over\n  configuration file settings. I.e. there is no longer a need to\n  specify ``--config`` first to get this behavior.\n* Config file regression: \"yes\" and \"no\" are now accepted by the\n  config file parser as boolean values.\n* Documentation improvements and spelling fixes.\n* Various minor autotools build fixes.\n\nhitch-1.3.0-beta1 (2016-05-11)\n------------------------------\n\n* Support for OCSP stapling (see configuration.md for details)\n* Initialize OpenSSL locking callback if an engine is loaded. Some SSL\n  accelerator cards have their custom SSL engine running in a\n  multithreaded context. For these to work correctly, Hitch needs to\n  initialize a set of mutexes utilized by the OpenSSL library.\n* Issue 82_: A mistake in the SNI lookup code caused us to inspect the wrong\n  list when looking for wildcard certificate matches.\n\n.. _82: https://github.com/varnish/hitch/issues/82\n\n\nhitch-1.2.0 (2016-04-19)\n------------------------\n\n* Fixes two minor leaks discovered by Coverity\n* Issue 72_: Fix a error handling for command line --frontend option.\n* Various autotools improvements\n* Parallel make check\n\n.. _72: https://github.com/varnish/hitch/issues/72\n\n\nhitch-1.2.0-beta1 (2016-02-25)\n------------------------------\n\n* Expanded configuration file format to permit settings various\n  options at a more granular level.\n* The following options can now be set on a per-frontend basis:\n  ``pem-file``, ``ssl``, ``tls``, ``ciphers``,\n  ``prefer-server-ciphers``, ``sni-nomatch-abort``\n* Added options ``host`` and ``port`` for specifying the listening\n  endpoint in a ``frontend`` block.\n* Added option ``match-global-certs`` (available in a ``frontend``\n  declaration)\n\n\nhitch-1.1.1 (2016-01-26)\n------------------------\n\n* Remove compiler warning on FreeBSD.\n* Fix fatal build error for manpage on FreeBSD.\n* Issue 55_: Fix a bug which caused the Hitch worker threads to sometimes\n  hit an assert after a configuration reload.\n* Issue 57_: Slightly reorganize assertion handling.\n* Issue 52_: Fix a bug where we would crash on --help.\n* Various minor documentation changes.\n\n.. _57: https://github.com/varnish/hitch/issues/57\n.. _55: https://github.com/varnish/hitch/issues/55\n.. _52: https://github.com/varnish/hitch/issues/52\n\n\nhitch-1.1.0 (2015-11-20)\n------------------------\n\n* Avoid leaking memory if failing to create an SSL context. (Coverity)\n* Fix possible memory leak in create_listen_sock(). (Coverity)\n\n\nhitch-1.1.0-beta1 (2015-11-06)\n------------------------------\n\n* [dist] init.hitch file has been removed, CHANGES.rst is now distributed.\n* [configure] session cache support can now be enabled. (default off)\n* Fixes an off-by-one bug that broke wildcard certificate matching.\n* Set the IPV6_V6ONLY socket option for IPv6 listen sockets in order\n  to avoid conflicts between INADDR_ANY and IN6ADDR_ANY.\n* Uninterrupted configuration reload of PEM files and frontend listen\n  endpoints.\n* Priv-sep: To permit configuration reloads, privileges are now\n  dropped in the child processes, and elevated privileges are retained\n  in the management process.\n* Various error messages are now rewritten to be more specific about\n  what went wrong.\n* A warning is issued if multiple certificates contain identical\n  server name entries.\n* Initialize ECDH also for certificates without DH parameters (patch\n  from Fedor Indutny).\n\n\nhitch-1.0.1 (2015-10-15)\n------------------------\n\n* Fix configuration parsing bug skipping short values, typically \"workers = 1\".\n* Tarball now contains an example configuration file.\n\n\nhitch-1.0.0 (2015-10-07)\n------------------------\n\n* A hash table is now used for faster SNI lookups.\n* Hitch binary has been renamed back to `hitch`, previously `hitch-openssl`.\n* Man page is updated.\n\n\nhitch-1.0.0-beta5 (2015-08-17)\n------------------------------\n\n* Issue 37_: Fixes a bug related to a varargs buffer that was consumed twice\n  with syslog logging enabled.\n* --default-config retired and replaced by shipping a sample configuration file.\n* Use accept4() where supported.\n* --write-proxy now defaults to PROXY v2. This is a BREAKING CHANGE if PROXY1\n  is used. For PROXY v1, use --write-proxy-v1 explicitly.\n* Various minor error handling fixes.\n\n.. _37: https://github.com/varnish/hitch/issues/37\n\n\nhitch 1.0.0-beta4 (2015-07-08)\n------------------------------\n\nIn general beta4 contains fixes to problems found with Coverity. These\nwere all of minor character, but were fixed for completeness.\n\nSource code has been reindented from 3-4 different formatting\nstyles to FreeBSD style.\n\n\nhitch 1.0.0-beta3 (2015-06-18)\n------------------------------\n\n* Drop supplementary groups when doing setgid(). (Issue 31_)\n* Add --sni-nomatch-abort which abort connections on unknown SNI server\n  name. (useful for avoiding certificate warnings in clients attempting\n  probabilistic TLS upgrades)\n* Remove cosmetic NULL-check before free(). (Issue 26_)\n* Avoid segfault when testing configuration with -t. (Issue 22_)\n* Minor helptext changes.\n\n.. _31: https://github.com/varnish/hitch/issues/31\n.. _26: https://github.com/varnish/hitch/issues/26\n.. _22: https://github.com/varnish/hitch/issues/22\n\n\nhitch 1.0.0-beta2 (2015-05-22)\n------------------------------\n\n* New --pidfile argument.\n* Fixed bug in certificate ordering, avoiding wrong cert being provided when\n  running on dualstack servers. (found by test framework!)\n* Rudimentary test framework implemented.\n* Init script updates provided by Denis Brækhus.\n* FreeBSD installation instructions added. (contributed by Ryan Steinmetz)\n* autoconf configuration updated to work on EL6.\n* Some forgotten references to stud were updated.\n\n\nhitch 1.0.0-beta1 (2015-05-13)\n------------------------------\n\nHitch 1.0.0-beta1 is based on stud 0.3.2. A selected set of public patches from\ngithub forks were applied.\n\nNotable changes:\n\n* TLS v1.0, TLS v1.1 and TLS v1.2 support.\n* Support for SNI added.\n* Support PROXYv1 and PROXYv2 protocol to origin.\n* Multiple listening sockets with possibly different default key/certificate.\n* Wildcard certificates are supported. (with and without SNI.)\n* SSL3.0 must now be enabled explicitly.\n\n\nVarious minor and stylistic fixed issues:\n\n* Properly clean SSL error queue.\n* Do not segfault if backend is not ready.\n* Logging now knows about IPv6.\n* IPv6 adresses should now use bracketed notation.\n* Additional timeouts for backend connect and SSL handshake added.\n* autoconf/automake is now used for building hitch.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5283203125,
          "content": "Copyright 2015-2016 Varnish Software\nCopyright 2012 Bump Technologies, Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are\npermitted provided that the following conditions are met:\n\n   1. Redistributions of source code must retain the above copyright notice, this list of\n      conditions and the following disclaimer.\n\n   2. Redistributions in binary form must reproduce the above copyright notice, this list\n      of conditions and the following disclaimer in the documentation and/or other materials\n      provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY BUMP TECHNOLOGIES, INC. ``AS IS'' AND ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BUMP TECHNOLOGIES, INC. OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThe views and conclusions contained in the software and documentation are those of the\nauthors and should not be interpreted as representing official policies, either expressed\nor implied, of Bump Technologies, Inc.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.7109375,
          "content": "ACLOCAL_AMFLAGS = -I .\n\nSUBDIRS = src/util src\n\ndist_man_MANS = hitch.8 hitch.conf.5\n\nif ENABLE_DOCUMENTATION\nhitch.8: hitch.man.rst\n\t${RST2MAN} --halt=2 $(srcdir)/hitch.man.rst $@\n\nhitch.conf.5: hitch.conf.man.rst\n\t${RST2MAN} --halt=2 $(srcdir)/hitch.conf.man.rst $@\n\ncheck-recursive: hitch.conf.example\n\nhitch.conf.example: hitch.conf.man.rst\n\techo \"# Run 'man hitch.conf' for a description of all options.\" > $@.tmp\n\tsed -e '1,/^.. example-start/d' \\\n\t\t-e '/.. example-end/,$$d' \\\n\t\t-e '/^[^ ]/d' \\\n\t\t-e 's/^    //' $(srcdir)/hitch.conf.man.rst >> $@.tmp\n\tmv $@.tmp $@\nCLEANFILES = hitch.conf.example\nendif\n\ndist_doc_DATA = hitch.conf.example CHANGES.rst README.md\n\nEXTRA_DIST = LICENSE hitch.man.rst hitch.conf.man.rst docs\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.5615234375,
          "content": "hitch TLS proxy\n===============\n\n[![CircleCI Build Status](https://circleci.com/gh/varnish/hitch/tree/master.svg?style=svg)](https://circleci.com/gh/varnish/hitch/tree/master)\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/5137/badge.svg)](https://scan.coverity.com/projects/hitch)\n\n`hitch` is a network proxy that terminates TLS/SSL connections and forwards the\nunencrypted traffic to some backend. It's designed to handle 10s of thousands of\nconnections efficiently on multicore machines.\n\nSee the [web page](https://hitch-tls.org) for more information.\n"
        },
        {
          "name": "bootstrap",
          "type": "blob",
          "size": 0.27734375,
          "content": "#!/bin/sh\n\nset -e\nset -u\n\nWORK_DIR=$(pwd)\nROOT_DIR=$(dirname \"$0\")\n\ntest -n \"$ROOT_DIR\"\ncd \"$ROOT_DIR\"\n\nmkdir -p build-aux\nautoreconf -i\n\ncd \"$WORK_DIR\"\n\"$ROOT_DIR\"/configure \\\n\t--enable-silent-rules \\\n\t--enable-documentation \\\n\t--enable-warnings \\\n\t--with-lex \\\n\t--with-yacc \\\n\t\"$@\"\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 6.86328125,
          "content": "#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_PREREQ([2.59])\nAC_INIT([hitch], [1.8.0], [opensource@varnish-software.com])\nAC_CONFIG_SRCDIR([src/configuration.c])\nAC_CONFIG_HEADERS([config.h])\nAC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_MACRO_DIR([.])\n\nAC_USE_SYSTEM_EXTENSIONS\n\nAM_INIT_AUTOMAKE([\n\t-Wall\n\t-Werror\n\tforeign\n\tcolor-tests\n\tparallel-tests\n\tsubdir-objects\n])\nAM_PROG_AR\n\n# Checks for programs.\nAM_PROG_CC_C_O\nAC_PROG_RANLIB\nAC_PROG_INSTALL\nAC_PROG_MAKE_SET\n\nAC_ARG_WITH([lex],\n\tAS_HELP_STRING([--with-lex], [Build with lex]),\n\t[], [with_lex=no])\nAC_ARG_WITH([yacc],\n\tAS_HELP_STRING([--with-yacc], [Build with yacc]),\n\t[], [with_yacc=no])\nAC_ARG_ENABLE([documentation],\n\tAS_HELP_STRING([--enable-documentation], [Build the documentation]),\n\t[], [enable_documentation=no])\nAC_ARG_ENABLE([warnings],\n\tAS_HELP_STRING([--enable-warnings], [Enable warnings]),\n\t[], [enable_warnings=no])\n\nif test \"$with_lex\" = yes\nthen\n\tAC_PROG_LEX\n\tif test \"$LEX\" = :\n\tthen\n\t\tAC_MSG_ERROR([flex or lex not found])\n\n\tfi\nfi\n\nif test \"$with_yacc\" = yes\nthen\n\tAC_PROG_YACC\n\tif test -z \"$YACC\" || ! $YACC -V >/dev/null 2>&1\n\tthen\n\t\tAC_MSG_ERROR([bison, byacc or yacc not found])\n\tfi\nfi\n\nAM_CONDITIONAL([ENABLE_DOCUMENTATION], [test \"$enable_documentation\" = yes])\nAM_CONDITIONAL([ENABLE_WARNINGS], [test \"$enable_warnings\" = yes])\n\nAM_COND_IF([ENABLE_DOCUMENTATION], [\n\tAC_CHECK_PROGS(RST2MAN, [rst2man rst2man.py], [no])\n\tif test \"$RST2MAN\" = no\n\tthen\n\t\tAC_MSG_ERROR([rst2man is needed to build the documentation])\n\tfi\n])\n\nAC_CHECK_PROGS(SOCKSTAT, [lsof sockstat fstat], [no])\nif test \"x$SOCKSTAT\" = xno; then\n\tAC_MSG_WARN([No tool found for socket inspection, tests will fail.])\nfi\n\nAM_MAINTAINER_MODE([disable])\n\n# Checks for libraries.\nPKG_CHECK_EXISTS([libev], [\n\tPKG_CHECK_MODULES([EV], [libev])], [\n\tHITCH_SEARCH_LIBS([EV], [ev], [ev_default_loop],\n\t\t[AC_MSG_ERROR([Cannot find libev.])])\n])\n\nPKG_CHECK_MODULES([SSL], [libssl])\nPKG_CHECK_MODULES([CRYPTO], [libcrypto])\nHITCH_SEARCH_LIBS([SOCKET], [socket], [socket])\nHITCH_SEARCH_LIBS([NSL], [nsl], [inet_ntop])\nHITCH_SEARCH_LIBS([RT], [rt], [clock_gettime])\n\nAC_CHECK_MEMBERS([struct stat.st_mtim, struct stat.st_mtimespec])\n\nAC_ARG_ENABLE(sessioncache,\n    AC_HELP_STRING([--enable-sessioncache],\n\t\t   [Enable TLS session cache. (default is off)]),\n    [use_shctx=\"$enableval\"],\n    [use_shctx=no])\nif test x\"$use_shctx\" != xno; then\n  if test ! -e 'src/ebtree/ebtree.h'; then\n    AC_MSG_ERROR([Must clone https://github.com/haproxy/ebtree to src/ebtree/])\n  fi\n  AC_DEFINE([USE_SHARED_CACHE], [1], [sessioncache is enabled])\nfi\nAM_CONDITIONAL(USE_SHCTX, test xno != x\"$use_shctx\")\n\n# Checks for header files.\nAC_CHECK_HEADERS([stdlib.h unistd.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_TYPE_UID_T\nAC_C_INLINE\nAC_TYPE_INT32_T\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\nAC_TYPE_SSIZE_T\nAC_TYPE_UINT32_T\n\n# Checks for library functions.\nAC_FUNC_FORK\nAC_FUNC_MMAP\nAC_CHECK_FUNCS([accept4])\n\nAC_CACHE_CHECK([whether SO_REUSEPORT works],\n  [ac_cv_so_reuseport_works],\n  [AC_RUN_IFELSE(\n    [AC_LANG_PROGRAM([[\n#include <sys/types.h>\n#include <sys/socket.h>\n    ]], [[\n\tint s = socket(AF_INET, SOCK_STREAM, 0);\n\tint i = 5;\n\tif (setsockopt(s, SOL_SOCKET, SO_REUSEPORT, &i, sizeof i) < 0)\n\t  return (1);\n\treturn (0);\n]])],\n  [ac_cv_so_reuseport_works=yes],\n  [ac_cv_so_reuseport_works=no])\n  ]\n)\nif test \"$ac_cv_so_reuseport_works\" = yes; then\n  AC_DEFINE([SO_REUSEPORT_WORKS], [1], [Define if SO_REUSEPORT works])\nfi\n\nAC_CACHE_CHECK([whether sysconf(_SC_NPROCESSORS_ONLN) works],\n  [ac_cv_sysconf_nprocs_works],\n  [AC_RUN_IFELSE(\n    [AC_LANG_PROGRAM([[\n#include <unistd.h>\n    ]], [[\n\tif (sysconf(_SC_NPROCESSORS_ONLN) > 0)\n\t  return (0);\n\treturn (1);\n]])],\n  [ac_cv_sysconf_nprocs_works=yes],\n  [ac_cv_sysconf_nprocs_works=no])\n  ]\n)\n\nif test \"$ac_cv_sysconf_nprocs_works\" = yes; then\n  AC_DEFINE([SC_NPROCESSORS_ONLN_WORKS], [1], [Define if sysconf(_SC_NPROCESSORS_ONLN) works])\nfi\n\nAC_ARG_ENABLE(tcp-fastopen,\n\tAC_HELP_STRING([--enable-tcp-fastopen],\n\t\t[Enable TCP Fast Open. (default is auto)]),\n\t[use_tfo=\"$enableval\"],\n\t[use_tfo=auto])\n\nif test x\"$use_tfo\" != xno; then\n\tAC_CACHE_CHECK([whether TCP_FASTOPEN works],\n\t\t[ac_cv_so_tfo],\n\t\t[AC_RUN_IFELSE(\n\t\t\t[AC_LANG_PROGRAM([[\n\t\t\t\t#include <sys/types.h>\n\t\t\t\t#include <sys/socket.h>\n\t\t\t\t#include <netinet/tcp.h>\n\t\t\t]], [[\n\t\t\t\tint s = socket(AF_INET, SOCK_STREAM, 0);\n\t\t\t\tint i = 5;\n\t\t\t\tif (setsockopt(s, SOL_TCP, TCP_FASTOPEN, &i, sizeof i) < 0)\n\t\t\t\treturn (1);\n\t\t\t\treturn (0);\n\t\t\t]])],\n\t\t[ac_cv_so_tfo=yes],\n\t\t[ac_cv_so_tfo=no])\n\t\t]\n\t)\n\tif test \"$ac_cv_so_tfo\" != yes && test use_tfo = yes; then\n\t\tAC_MSG_ERROR([Socket option TCP_FASTOPEN is not supported by the kernel])\n\tfi\n\tif test \"$ac_cv_so_tfo\" = yes; then\n\t\tAC_DEFINE([TCP_FASTOPEN_WORKS], [1], [TCP Fast Open is enabled])\n\tfi\nfi\n\nAC_CHECK_HEADERS([linux/futex.h])\nAM_CONDITIONAL([HAVE_LINUX_FUTEX], [test $ac_cv_header_linux_futex_h = yes])\n\nHITCH_CHECK_FUNC([SSL_get0_alpn_selected], [$SSL_LIBS], [\n\tAC_DEFINE([OPENSSL_WITH_ALPN], [1], [OpenSSL supports ALPN])\n])\n\nHITCH_CHECK_FUNC([SSL_get0_next_proto_negotiated], [$SSL_LIBS], [\n\tAC_DEFINE([OPENSSL_WITH_NPN], [1], [OpenSSL supports NPN])\n])\n\nHITCH_CHECK_FUNC([SSL_CTX_get_default_passwd_cb], [$SSL_LIBS], [\n\tAC_DEFINE([HAVE_SSL_CTX_GET_DEFAULT_PASSWD_CB], [1],\n\t\t[OpenSSL has SSL_CTX_get_default_passwd_cb()])\n])\n\nHITCH_CHECK_FUNC([SSL_CTX_get_default_passwd_cb_userdata], [$SSL_LIBS], [\n\tAC_DEFINE([HAVE_SSL_CTX_GET_DEFAULT_PASSWD_CB_USERDATA], [1],\n\t\t[OpenSSL has SSL_CTX_get_default_passwd_cb_userdata()])\n])\n\nHITCH_CHECK_FUNC([CRYPTO_get_locking_callback], [$CRYPTO_LIBS], [\n\tAC_DEFINE([OPENSSL_WITH_LOCKS], [1], [OpenSSL needs explicit locking])\n])\n\nHITCH_CHECK_FUNC([X509_NAME_ENTRY_get_data], [$CRYPTO_LIBS], [\n\tAC_DEFINE([HAVE_X509_NAME_ENTRY_GET_DATA], [1],\n\t\t[OpenSSL has X509_NAME_ENTRY_get_data()])\n])\n\nHITCH_CHECK_FUNC([X509_STORE_get0_objects], [$CRYPTO_LIBS], [\n\tAC_DEFINE([HAVE_X509_STORE_GET0_OBJECTS], [1],\n\t\t[OpenSSL has X509_STORE_get0_objects()])\n])\n\nHITCH_CHECK_FUNC([X509_OBJECT_get0_X509], [$CRYPTO_LIBS], [\n\tAC_DEFINE([HAVE_X509_OBJECT_GET0_X509], [1],\n\t\t[OpenSSL has X509_OBJECT_get0_X509()])\n])\n\nAC_CHECK_MEMBERS([struct ssl_st.s3], [], [], [[#include <openssl/ssl.h>]])\n\nAS_VERSION_COMPARE([$($PKG_CONFIG --modversion openssl)], [1.1.1],\n\t[openssl111=no],\n\t[openssl111=yes], [openssl111=yes])\n\nAS_IF([test \"x$openssl111\" = xyes],\n\t[AC_DEFINE([HAVE_TLS_1_3], [1], [Define to 1 if TLSv1.3 is available])], [])\n\nSH_TESTS=\"$(cd $srcdir/src && echo tests/test*.sh)\"\nAC_SUBST(SH_TESTS)\n\ndnl Desired CFLAGS\nHITCH_CHECK_FLAGS([HITCH_CFLAGS], [\n\t-g\n\t-O2\n\t-DOPENSSL_SUPPRESS_DEPRECATED\n])\n\nAM_COND_IF([ENABLE_WARNINGS], [\n\tdnl XXX: expand developer warnings?\n\tHITCH_CHECK_FLAGS([HITCH_CFLAGS], [\n\t\t-Wall\n\t\t-W\n\t\t-Werror\n\t])\n])\n\nAC_SUBST([HITCH_CFLAGS])\n\ndnl Help libev macros\nHITCH_CHECK_FLAGS([EV_CFLAGS], [-fno-strict-aliasing])\n\nAC_CONFIG_FILES([\n\tMakefile\n\tsrc/Makefile\n\tsrc/util/Makefile\n])\n\nAC_OUTPUT\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "hitch.conf.man.rst",
          "type": "blob",
          "size": 14.130859375,
          "content": "\n.. _hitch.conf(5):\n\n==========\nHitch.conf\n==========\n\n----------------------------\nConfiguration file for Hitch\n----------------------------\n\n:Manual section: 5\n\nDescription\n===========\n\nhitch.conf is the configuration file for `hitch(8)`. The configuration\nfile is loaded using the Hitch option --config=, and can thus have\ndifferent names and can exist in different locations.\n\nAlmost all options available in hitch.conf can be specified or\noverridden in the command line of Hitch, as described in hitch(8).\n\nThe Hitch configuration file consists of a series of option\nassignments.  Some options (pem-file, frontend) can be be set several\ntimes, and the effect is that multiple certificate files and\n\"listening frontends\" are defined. Other options can only be assigned\nonce.\n\nThe hash mark, or pound sign (\"#\"), is used as a \"comment\"\ncharacter. You can use it to annotate your config file. All text after\nthe comment character to the end of the line is ignored. Empty lines\nare ignored.\n\nOptions\n=======\n\nOptions can either be in the top level of the configuration file\n(global scope), or inside a *frontend block*. Options inside a\nfrontend block only affect the frontend, while options in the top\nlevel sets defaults for all frontends.\n\nUnless otherwise noted below, options can only be used in the top\nlevel.\n\nalpn-protos = <protocol-list>\n-----------------------------\n\nComma separated list of protocols supported by the backend in a quoted\nstring. The list is used select protocols when the client supports\nNext Protocol Negotiation (NPN) or Application-Layer Protocol\nNegotiation (ALPN). If Hitch is compiled against a OpenSSL version\nthat does not support ALPN, only NPN will be used to select a\nprotocol.\n\nThe result of the NPN/ALPN negotiation will be communicated to the\nbackend if and only if write-proxy-v2 or proxy-proxy is used. For\nHTTP/2 to work with modern browsers, ALPN negotiation is required.\n\nbackend = ...\n-------------\n\nThe endpoint Hitch connects to when receiving a connection. Only\na single backend is supported.\n\nThis is either specified as \"[HOST]:port\" for IPv4/IPv6 endpoints::\n\n  backend = \"[localhost]:8080\"\n\nOr it can be specified as a path to a UNIX domain socket::\n\n  backend = \"/path/to/sock\"\n\nIf the ``chroot`` setting is in effect, the UNIX domain socket path\nwill be at runtime resolved from within the chroot, and must be\nspecified with the path it is accessible from within the\nchroot. I.e. for a ``/run/hitch`` chroot and a ``/run/hitch/sock``\nUNIX domain socket, configure the backend argument as ``/sock``.\n\nbacklog = <number>\n------------------\n\nListen backlog size\n\nchroot = <string>\n-----------------\n\nChroot directory\n\nciphers = ...\n-------------\n\nList of ciphers to use in the secure communication. Refer to the\nOpenSSL documentation for a complete list of supported ciphers.\n\nEach cipher in the list must be separated by a colon (``:``), in order\nof preference. See ``ciphers(1)`` for further description of the\nformat.\n\nIf not specified, OpenSSL will allow all ciphers. System\nadministrators are advised to either only support strong ciphers (as in\nthe example file below) or to pay close attention to security advisories\nrelated OpenSSL's ciphers.\n\nThis option applies to TLSv1.2 and below. For TLSv1.3, see\n``ciphersuites``.\n\nThis option is also available in frontend blocks.\n\nciphersuites = <string>\n-----------------------\n\nSpecifies available ciphersuites for TLSv1.3. Similar to ``ciphers``,\nentries must be separated by colon (``:``) and sorted in order of\npreference.\n\nThis option is also available in frontend blocks.\n\nclient-verify = required|optional|none\n--------------------------------------\n\nConfigures client certificate validation. The setting must be one of\n``none``, ``required`` or ``optional``.\n\nThe default setting is ``client-verify = none``, in which case Hitch\nwill not send a certificate request to the client.\n\nIf ``client-verify = require`` is configured, Hitch will only permit\nconnections that present a valid certificate. The certificate will be\nverified using the certificate provided in the ``client-verify-ca``\nparameter.\n\nIf ``optional``, Hitch will send certificate requests, but still\npermit connections that do not present one.\n\nFor settings ``optional`` and ``required``, we also require that the\n``client-verify-ca`` is configured.\n\nThis option is also available in ``frontend`` blocks and ``pem-file``\nblocks. If specified in a ``frontend`` block, the client verification\nsetting will only apply to the ``pem-file`` records for that\nparticular frontend. This can also be further refined by using the\noption in a ``pem-file`` block, which has the effect of having it only\napply to that particular ``pem-file`` record.\n\nclient-verify-ca = <string>\n---------------------------\n\nSpecifies a file containing the certificates of the CAs that will be\nused to verify a client certificate.\n\nFor multiple CAs, this file can be a concatenation of multiple\npem-files for the relevant certificate authorities.\n\nThis option is also available in frontend blocks and in pem-file blocks.\n\ndaemon = on|off\n---------------\n\nRun as daemon. Default is off.\n\nfrontend = ...\n--------------\n\nThis specifies the port and interface (the *listen endpoint*) that\nHitch binds to when listening for connections. It is possible define\nseveral frontends, and Hitch will bind to several ports and/or several\ninterfaces.\n\nIf \"*\" is used as the host, then Hitch will bind on all interfaces for\nthe given port.\n\nA frontend can be specified either in a single line:\n\n::\n\n    frontend = \"[HOST]:PORT[+CERT]\"\n\nOr in a *frontend block*:\n\n::\n\n    frontend = {\n        host = \"HOST\"\n        port = \"PORT\"\n        <other frontend options>\n    }\n\ngroup = <string>\n----------------\n\nIf given, Hitch will change to this group after binding to listen\nsockets.\n\nkeepalive = <number>\n--------------------\n\nNumber of seconds a TCP socket is kept alive\n\nbackend-refresh = <number>\n--------------------------\n\nNumber of seconds between periodic backend IP lookups, 0 to disable.\nDefault is 0.\n\nocsp-dir = <string>\n-------------------\n\nDirectory where Hitch will store and read OCSP responses for\nstapling. Default is \"/var/lib/hitch/\".\n\nDirectory must be readable and writable for the configured Hitch user, or\nautomatic retrieval and updating of OCSP responses will not take place.\n\nIf you have a manually pre-loaded OCSP staple, an alternative\npem-file syntax can be used for stapling:\n\n::\n\n   pem-file = {\n       cert = \"mycert.pem\"\n       ocsp-resp-file = \"ocsp-resp.der\"\n   }\n\n\nocsp-connect-tmo = <number>\n---------------------------\n\nOCSP fetch connect timeout.\n\nThis does normally not need to be changed.\n\nDefault is 4.0 seconds.\n\n\nocsp-resp-tmo = <number>\n------------------------\n\nOCSP fetch response timeout.\n\nThis does normally not need to be changed.\n\nDefault is 10 seconds.\n\nocsp-refresh-interval = <number>\n--------------------------------\n\nOCSP refresh interval.\n\nIf the OCSP response does not carry any refresh information, use this as the\ninterval for refreshing.\n\nDefault is 1800 seconds.\n\nocsp-verify-staple = on|off\n---------------------------\n\nIf set, OCSP responses will be verified against the certificate\nafter retrieval.\n\nDefault is off.\n\n\npem-file = <string>\n-------------------\n\nSpecify a SSL x509 certificate file. Server Name Indication (SNI) is\nsupported by using one certificate file per SNI name.\n\nA file suitable for Hitch is a concatenation of a private key and a\ncorresponding certificate or certificate chain.\n\nAt least one PEM file is needed for Hitch to start, but it can be\nsupplied on the command line.\n\nCertificates are used in the order they are listed; the last\ncertificate listed will be used if none of the others match.\n\nIn the event that we have multiple certificates that provide the same\nSNI string, an error will be logged. The last loaded certificate will\nin that case take precedence.\n\nFor partial overlap in names, e.g. if one certificate provides\n\"www.example.com\" and another one \"\\*.example.com\", the most specific\nmatch will always take precedence at SNI lookup.\n\nThis option is also available in a frontend declaration, to make a\ncertificate only available for a specific listen endpoint.\n\nprivate-key = <string>\n----------------------\n\nIf set, the private key is read from specified location, not from the cert file.\n\n::\n\n   pem-file = {\n       cert = \"mycert.pem\"\n       private-key = \"myprivate.key\"\n   }\n\n\npem-dir = <string>\n------------------\n\nSpecify a directory for loading x509 certificates.\n\nA fallback certificate for non-SNI clients may be specified by also\nincluding a separate ``pem-file`` definition.\n\nThe files are processed in lexicographic order. In the absence of any\n``pem-file`` definitions, the first file entry will be used as the\nfallback default.\n\n::\n   \n   pem-dir = \"/etc/hitch/cert.d\"\n\n\npem-dir-glob = <string>\n-----------------------\n\nMatching filter for filenames loaded from ``pem-dir``.\n\nDefault is none (match any).\n\n::\n   \n  pem-dir-glob = \"*.pem\"\n\n\nprefer-server-ciphers = on|off\n------------------------------\n\nTurns on or off enforcement of the cipher ordering set in Hitch.\n\nThis option is also available in frontend blocks.\n\nDefault is off.\n\nproxy-proxy = on|off\n--------------------\n\nProxy an incoming PROXY protocol header through to the\nbackend. Supports both version 1 and 2 of the PROXY protocol.\n\nThis option is mutually exclusive with option write-proxy-v2, write-ip\nand write-proxy-v1.\n\nDefault is off.\n\nlog-level = <num>\n-----------------\n\nLog chattiness. 0=silence, 1=errors, 2=info/debug.\n\nThis setting can also be changed at run-time by editing the\nconfiguration file followed by a reload (SIGHUP).\n\nDefault is 0.\n\n\nquiet = on|off\n--------------\n\nIf quiet is turned on, only error messages will be shown. This setting\nis deprecated in favor of ``log-level``.\n\n\ntls-protos = ...\n----------------\n\nThe SSL/TLS protocols to be used. This is an unquoted list of\ntokens. Available tokens are SSLv3, TLSv1.0, TLSv1.1, TLSv1.2 and\nTLSv1.3.\n\nThe default is TLSv1.2 and TLSv1.3.\n\nThere are two deprecated options, ssl= and tls=, that also select\nprotocols. If \"ssl=on\" is used, then all protocols are selected. This\nis known to be insecure, and is strongly discouraged. If \"tls=on\" is\nused, the three TLS protocol versions will be used. Turning on SSLv3\nand TLSv1.0 is not recommended - support for these protocols are only\nkept for backwards compatibility.\n\nThe availability of protocol versions depend on OpenSSL version and\nsystem configuration. In particular for TLS 1.3, openssl 1.1.1 or\nlater is required.\n\nFor supporting legacy protocol versions you may also need to lower the\n``MinProtocol`` property in your OpenSSL configuration (typically\n``/etc/ssl/openssl.cnf``).\n\nThis option is also available in frontend blocks.\n\necdh-curve = <string>\n~~~~~~~~~~~~~~~~~~~~~\n\nSets the list of supported TLS curves. A special value of ``auto``\nwill leave it up to OpenSSL to automatically pick the most appropriate\ncurve for a client.\n\n::\n\n   ecdh-curve = \"X25519:prime256v1:secp384r1\"\n\n\nsni-nomatch-abort = on|off\n--------------------------\n\nAbort handshake when the client submits an unrecognized SNI server name.\n\nThis option is also available in a frontend declaration.\n\nssl-engine = <string>\n---------------------\n\nSet the SSL engine. This is used with SSL accelerator cards. See the\nOpenSSL documentation for legal values.\n\nsyslog = on|off\n----------------\n\nSend messages to syslog. Default is off.\n\nsyslog-facility = <string>\n--------------------------\n\nSet the syslog facility. Default is \"daemon\".\n\nuser = <string>\n---------------\n\nUser to run as. If Hitch is started as root, it will insist on\nchanging to a user with lower rights after binding to sockets.\n\nworkers = <number>|auto\n-----------------------\n\nNumber of worker processes. One per CPU core is recommended.\nUsing auto value creates 1 worker per CPU core.\n\nwrite-ip = on|off\n-----------------\n\nReport the client ip to the backend by writing IP before sending\ndata.\n\nThis option is mutually exclusive with each of the options\nwrite-proxy-v2, write-proxy-v1 and proxy-proxy.\n\nDefault is off.\n\nwrite-proxy-v1 = on|off\n-----------------------\n\nReport client address using the PROXY protocol.\n\nThis option is mutually exclusive with option write-proxy-v2, write-ip\nand proxy-proxy.\n\nDefault is off.\n\nwrite-proxy-v2 = on|off\n-----------------------\n\nReport client address using PROXY v2 protocol.\n\nThis option is mutually exclusive with option write-ip, write-proxy-v1\nand proxy-proxy.\n\nDefault is off.\n\nproxy-tlv = on|off\n------------------\n\nReport extra information as part of the PROXYv2 header.\n\nCurrently the following will be transmitted when proxy-tlv is enabled:\n\n - Cipher\n - Protocol version\n - Client certificate verification result\n - Whether the client transmitted a certificate as part of this\n   connection/session (PP2_CLIENT_CERT_CONN, PP2_CLIENT_CERT_SESS)\n\nDefault is on.\n\nproxy-client-cert = on|off\n--------------------------\n\nTransmit the authenticated client certificate as part of the PROXYv2\nheader.\n\nThe PEM-formatted client certificate will be transmitted as a TLV\nfield of type 0xe0.\n\nThis is a custom application-specific type, requiring a a custom\nhandler at the recipient end. Note that using this feature will\ninflate the size of the PROXY header substantially, possibly also\nrequiring tweaking at the receiving end.\n\n\ntcp-fastopen = on|off\n---------------------\n\nEnable TCP Fast Open.\n\nDefault is off.\n\nbackend-connect-timeout = <number>\n----------------------------------\n\nConfigures the backend connect timeout.\n\nssl-handshake-timeout = <number>\n--------------------------------\n\nConfigures the TLS handshake timeout.\n\n\nExample\n=======\n\n.. example-start\n\nThe following file shows the syntax needed to get started with::\n\n    frontend = {\n        host = \"*\"\n        port = \"443\"\n    }\n    backend = \"[127.0.0.1]:6086\"    # 6086 is the default Varnish PROXY port.\n    workers = 4                     # number of CPU cores\n\n    daemon = on\n\n    # We strongly recommend you create a separate non-privileged hitch\n    # user and group\n    user = \"hitch\"\n    group = \"hitch\"\n\n    # Enable to let clients negotiate HTTP/2 with ALPN. (default off)\n    # alpn-protos = \"h2, http/1.1\"\n\n    # run Varnish as backend over PROXY; varnishd -a :80 -a localhost:6086,PROXY ..\n    write-proxy-v2 = on             # Write PROXY header\n\n\n.. example-end\n\nAuthor\n======\n\nThis manual was written by Pål Hermunn Johansen <hermunn@varnish-software.com>\n"
        },
        {
          "name": "hitch.m4",
          "type": "blob",
          "size": 1.0087890625,
          "content": "# HITCH_SEARCH_LIBS(VAR, LIBS, FUNC, NOTFOUND)\n# --------------------------------------------\nAC_DEFUN([HITCH_SEARCH_LIBS], [\n\thitch_save_LIBS=$LIBS\n\tLIBS=\"\"\n\tAC_SEARCH_LIBS([$3], [$2], [], [$4])\n\tAC_SUBST([$1_LIBS], [$LIBS])\n\tLIBS=$hitch_save_LIBS\n])\n\n# HITCH_CHECK_FUNC(FUNC, LIBS, FOUND, NOTFOUND)\n# --------------------------------------------\nAC_DEFUN([HITCH_CHECK_FUNC], [\n\thitch_save_LIBS=$LIBS\n\tLIBS=\"$2\"\n\tAC_CHECK_FUNC([$1], [$3], [$4])\n\tLIBS=$hitch_save_LIBS\n])\n\n# _HITCH_CHECK_FLAG(VAR, FLAG)\n------------------------------\nAC_DEFUN([_HITCH_CHECK_FLAG], [\n\n\tAC_MSG_CHECKING([whether the compiler accepts $2])\n\thitch_save_CFLAGS=$CFLAGS\n\tCFLAGS=\"[$]$1 $2 $CFLAGS\"\n\tAC_LINK_IFELSE(\n\t\t[AC_LANG_SOURCE([int main(void) { return (0); }])],\n\t\t[AC_MSG_RESULT([yes]); $1=\"[$]$1 $2\"],\n\t\t[AC_MSG_RESULT([no])])\n\tCFLAGS=$hitch_save_CFLAGS\n])\n\n# HITCH_CHECK_FLAGS(VAR, FLAGS)\n-------------------------------\nAC_DEFUN([HITCH_CHECK_FLAGS], [\n\n\tm4_foreach([_flag],\n\t\tm4_split(m4_normalize([$2])),\n\t\t\t[_HITCH_CHECK_FLAG([$1], _flag)])\n\n])\n"
        },
        {
          "name": "hitch.man.rst",
          "type": "blob",
          "size": 5.5380859375,
          "content": ".. role:: ref(emphasis)\n\n.. _hitch(8):\n\n=====\nHitch\n=====\n\n--------------------------\nhigh performance TLS proxy\n--------------------------\n\n:Manual section: 8\n\nSynopsis\n========\n\nhitch [OPTIONS] [PEM]\n\n\nDescription\n===========\n\nHitch is a network proxy that terminates TLS/SSL connections and forwards the\nunencrypted traffic to some backend. It's designed to handle 10s of thousands of\nconnections efficiently on multicore machines.\n\nHitch has very few features -- it's designed to be paired with an intelligent\nbackend like Varnish Cache. It maintains a strict 1:1 connection pattern\nwith this backend handler so that the backend can dictate throttling behavior,\nmaximum connection behavior, availability of service, etc.\n\nThe only required argument is a path to a PEM file that contains the certificate\n(or a chain of certificates) and private key. It should also contain\nDH parameter if you wish to use Diffie-Hellman cipher suites.\n\n\nCommand line arguments\n======================\n\n``--config=FILE``\n-----------------\n\nLoad configuration from specified file.  See `hitch.conf(5)` for\ndetails.\n\n``--tls-protos=LIST``\n---------------------\n\nSpecifies which SSL/TLS protocols to use.  Available tokens are\n``SSLv3``, ``TLSv1.0``, ``TLSv1.1``, ``TLSv1.2`` and\n``TLSv1.3``. (Default \"TLSv1.2 TLSv1.3\")\n\n``-c  --ciphers=SUITE``\n-----------------------\n\nSets allowed ciphers (Default:\n\"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\")\n\n``-e  --ssl-engine=NAME``\n-------------------------\n\nSets OpenSSL engine (Default: \"\")\n\n``-O  --prefer-server-ciphers[=on|off]``\n----------------------------------------\n\nPrefer server list order (Default: \"off\")\n\n``--client``\n------------\n\nEnable client proxy mode\n\n``-b  --backend=[HOST]:PORT``\n-----------------------------\n\nBackend endpoint (default is \"[127.0.0.1]:8000\") The -b argument can\nalso take a UNIX domain socket path E.g. --backend=\"/path/to/sock\"\n\nIf ``--chroot`` is also specified, the UNIX domain socket path will be\nat runtime resolved from within the chroot, and must be specified with\nthe path it is accessible from within the chroot. I.e. for a\n``/run/hitch`` chroot and a ``/run/hitch/sock`` UNIX domain socket,\nconfigure the backend argument as ``/sock``.\n\n``-f  --frontend=[HOST]:PORT[+CERT]``\n-------------------------------------\n\nFrontend listen endpoint (default is \"[*]:8443\") (Note: brackets are\nmandatory in endpoint specifiers.)\n\n``-n  --workers=NUM|auto``\n--------------------------\n\nNumber of worker processes (Default: 1)\nUsing auto value creates 1 worker per CPU core.\n\n``-B  --backlog=NUM``\n---------------------\n\nSet listen backlog size (Default: 100)\n\n``-k  --keepalive=SECS``\n------------------------\n\nTCP keepalive on client socket (Default: 3600)\n\n``-R  --backend-refresh=SECS``\n------------------------------\n\nPeriodic backend IP lookup, 0 to disable (Default: 0)\n\n``--enable-tcp-fastopen[=on|off]``\n----------------------------------\n\nEnable client-side TCP Fast Open. (Default: off)\n\n``-r  --chroot=DIR``\n--------------------\n\nSets chroot directory (Default: \"\")\n\n``-u  --user=USER``\n-------------------\n\nSet uid/gid after binding the socket (Default: \"\")\n\n``-g  --group=GROUP``\n---------------------\n\nSet gid after binding the socket (Default: \"\")\n\n``-q  --quiet[=on|off]``\n------------------------\n\nBe quiet; emit only error messages (deprecated, use 'log-level')\n\n``-L  --log-level=NUM``\n-----------------------\n\nLog level. 0=silence, 1=err, 2=info/debug (Default: 1)\n\n``-l  --log-filename=FILE``\n---------------------------\n\nSend log message to a logfile instead of stderr/stdout\n\n``-s  --syslog[=on|off]``\n-------------------------\n\nSend log message to syslog in addition to stderr/stdout\n\n``--syslog-facility=FACILITY``\n------------------------------\n\nSyslog facility to use (Default: \"daemon\")\n\n``--daemon[=on|off]``\n---------------------\n\nFork into background and become a daemon (Default: off)\n\n``--write-ip[=on|off]``\n-----------------------\n\nWrite 1 octet with the IP family followed by the IP address in 4\n(IPv4) or 16 (IPv6) octets little-endian to backend before the actual\ndata (Default: off)\n\n``--write-proxy-v1[=on|off]``\n-----------------------------\n\nWrite HAProxy's PROXY v1 (IPv4 or IPv6) protocol line before actual\ndata (Default: off)\n\n``--write-proxy-v2[=on|off]``\n-----------------------------\n\nWrite HAProxy's PROXY v2 binary (IPv4 or IPv6) protocol line before\nactual data (Default: off)\n\n``--write-proxy[=on|off]``\n--------------------------\n\nEquivalent to --write-proxy-v2. For PROXY version 1\nuse --write-proxy-v1 explicitly\n\n``--proxy-proxy[=on|off]``\n--------------------------\n\nProxy HAProxy's PROXY (IPv4 or IPv6) protocol before actual data\n(PROXYv1 and PROXYv2) (Default: off)\n\n``--sni-nomatch-abort[=on|off]``\n--------------------------------\n\nAbort handshake when client submits an unrecognized SNI server name\n(Default: off)\n\n``--alpn-protos=LIST``\n----------------------\n\nSets the protocols for ALPN/NPN negotiation, provided as a list of\ncomma-separated tokens.\n\n``--ocsp-dir=DIR``\n------------------\n\nSet OCSP staple cache directory This enables automated retrieval and\nstapling of OCSP responses (Default: \"/var/lib/hitch/\")\n\n``--backend-connect-timeout=SECS``\n----------------------------------\n\nBackend connect timeout.\n\n``--ssl-handshake-timeout=SECS``\n--------------------------------\n\nTLS handshake timeout.\n\n``-t  --test``\n--------------\n\nTest configuration and exit\n\n``-p  --pidfile=FILE``\n----------------------\n\nPID file\n\n``-V  --version``\n-----------------\n\nPrint program version and exit\n\n``-h  --help``\n--------------\n\nThis help message\n\n\nHistory\n=======\n\nHitch was originally called stud and was written by Jamie Turner at Bump.com.\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}