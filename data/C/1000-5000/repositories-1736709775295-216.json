{
  "metadata": {
    "timestamp": 1736709775295,
    "page": 216,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "skeeto/w64devkit",
      "stars": 3302,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0078125,
          "content": "* -crlf\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 18.203125,
          "content": "FROM debian:bookworm-slim\n\nARG VERSION=2.0.0\nARG PREFIX=/w64devkit\nARG Z7_VERSION=2301\nARG BINUTILS_VERSION=2.43\nARG BUSYBOX_VERSION=FRP-5467-g9376eebd8\nARG CTAGS_VERSION=6.0.0\nARG EXPAT_VERSION=2.6.3\nARG GCC_VERSION=14.2.0\nARG GDB_VERSION=15.2\nARG GMP_VERSION=6.3.0\nARG LIBICONV_VERSION=1.17\nARG MAKE_VERSION=4.4.1\nARG MINGW_VERSION=12.0.0\nARG MPC_VERSION=1.3.1\nARG MPFR_VERSION=4.2.1\nARG PDCURSES_VERSION=3.9\nARG VIM_VERSION=9.0\n\nRUN apt-get update && apt-get install --yes --no-install-recommends \\\n  build-essential curl libgmp-dev libmpc-dev libmpfr-dev m4 p7zip-full\n\n# Download, verify, and unpack\n\nRUN curl --insecure --location --remote-name-all --remote-header-name \\\n    https://downloads.sourceforge.net/project/sevenzip/7-Zip/23.01/7z$Z7_VERSION-src.tar.xz \\\n    https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS_VERSION.tar.xz \\\n    https://ftp.gnu.org/gnu/gcc/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz \\\n    https://ftp.gnu.org/gnu/gdb/gdb-$GDB_VERSION.tar.xz \\\n    https://fossies.org/linux/www/expat-$EXPAT_VERSION.tar.xz \\\n    https://ftp.gnu.org/gnu/gmp/gmp-$GMP_VERSION.tar.xz \\\n    https://ftp.gnu.org/gnu/mpc/mpc-$MPC_VERSION.tar.gz \\\n    https://ftp.gnu.org/gnu/mpfr/mpfr-$MPFR_VERSION.tar.xz \\\n    https://ftp.gnu.org/gnu/make/make-$MAKE_VERSION.tar.gz \\\n    https://ftp.gnu.org/gnu/libiconv/libiconv-$LIBICONV_VERSION.tar.gz \\\n    https://frippery.org/files/busybox/busybox-w32-$BUSYBOX_VERSION.tgz \\\n    http://ftp.vim.org/pub/vim/unix/vim-$VIM_VERSION.tar.bz2 \\\n    https://github.com/universal-ctags/ctags/archive/refs/tags/v$CTAGS_VERSION.tar.gz \\\n    https://downloads.sourceforge.net/project/mingw-w64/mingw-w64/mingw-w64-release/mingw-w64-v$MINGW_VERSION.tar.bz2 \\\n    https://downloads.sourceforge.net/project/pdcurses/pdcurses/$PDCURSES_VERSION/PDCurses-$PDCURSES_VERSION.tar.gz\nCOPY src/SHA256SUMS $PREFIX/src/\nRUN sha256sum -c $PREFIX/src/SHA256SUMS \\\n && tar xJf 7z$Z7_VERSION-src.tar.xz --xform 's%^%7z/%' \\\n && tar xJf binutils-$BINUTILS_VERSION.tar.xz \\\n && tar xzf busybox-w32-$BUSYBOX_VERSION.tgz \\\n && tar xzf ctags-$CTAGS_VERSION.tar.gz \\\n && tar xJf gcc-$GCC_VERSION.tar.xz \\\n && tar xJf gdb-$GDB_VERSION.tar.xz \\\n && tar xJf expat-$EXPAT_VERSION.tar.xz \\\n && tar xzf libiconv-$LIBICONV_VERSION.tar.gz \\\n && tar xJf gmp-$GMP_VERSION.tar.xz \\\n && tar xzf mpc-$MPC_VERSION.tar.gz \\\n && tar xJf mpfr-$MPFR_VERSION.tar.xz \\\n && tar xzf make-$MAKE_VERSION.tar.gz \\\n && tar xjf mingw-w64-v$MINGW_VERSION.tar.bz2 \\\n && tar xzf PDCurses-$PDCURSES_VERSION.tar.gz \\\n && tar xjf vim-$VIM_VERSION.tar.bz2\nCOPY src/w64devkit.c src/w64devkit.ico src/libmemory.c src/libchkstk.S \\\n     src/alias.c src/debugbreak.c src/pkg-config.c src/vc++filt.c \\\n     src/peports.c src/profile $PREFIX/src/\n\nARG ARCH=x86_64-w64-mingw32\n\n# Build cross-compiler\n\nWORKDIR /binutils-$BINUTILS_VERSION\nCOPY src/binutils-*.patch $PREFIX/src/\nRUN sed -ri 's/(static bool insert_timestamp = )/\\1!/' ld/emultempl/pe*.em \\\n && sed -ri 's/(int pe_enable_stdcall_fixup = )/\\1!!/' ld/emultempl/pe*.em \\\n && sed -ri 's/(static int use_big_obj = )/\\1!/' gas/config/tc-i386.c \\\n && cat $PREFIX/src/binutils-*.patch | patch -p1\nWORKDIR /x-binutils\nRUN /binutils-$BINUTILS_VERSION/configure \\\n        --prefix=/bootstrap \\\n        --with-sysroot=/bootstrap/$ARCH \\\n        --target=$ARCH \\\n        --disable-nls \\\n        --with-static-standard-libraries \\\n        --disable-multilib \\\n && make MAKEINFO=true -j$(nproc) \\\n && make MAKEINFO=true install\n\n# Fixes i686 Windows XP regression\n# https://sourceforge.net/p/mingw-w64/bugs/821/\nRUN sed -i /OpenThreadToken/d /mingw-w64-v$MINGW_VERSION/mingw-w64-crt/lib32/kernel32.def\n\nWORKDIR /x-mingw-headers\nRUN /mingw-w64-v$MINGW_VERSION/mingw-w64-headers/configure \\\n        --prefix=/bootstrap/$ARCH \\\n        --host=$ARCH \\\n        --with-default-msvcrt=msvcrt-os \\\n && make -j$(nproc) \\\n && make install\n\nWORKDIR /bootstrap\nRUN ln -s $ARCH mingw\n\nWORKDIR /x-gcc\nCOPY src/gcc-*.patch $PREFIX/src/\nRUN cat $PREFIX/src/gcc-*.patch | patch -d/gcc-$GCC_VERSION -p1 \\\n && /gcc-$GCC_VERSION/configure \\\n        --prefix=/bootstrap \\\n        --with-sysroot=/bootstrap \\\n        --target=$ARCH \\\n        --enable-static \\\n        --disable-shared \\\n        --with-pic \\\n        --enable-languages=c,c++,fortran \\\n        --enable-libgomp \\\n        --enable-threads=posix \\\n        --enable-version-specific-runtime-libs \\\n        --disable-dependency-tracking \\\n        --disable-nls \\\n        --disable-lto \\\n        --disable-multilib \\\n        CFLAGS_FOR_TARGET=\"-Os\" \\\n        CXXFLAGS_FOR_TARGET=\"-Os\" \\\n        LDFLAGS_FOR_TARGET=\"-s\" \\\n        CFLAGS=\"-Os\" \\\n        CXXFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) all-gcc \\\n && make install-gcc\n\nENV PATH=\"/bootstrap/bin:${PATH}\"\n\nRUN mkdir -p $PREFIX/$ARCH/lib \\\n && CC=$ARCH-gcc DESTDIR=$PREFIX/$ARCH/lib/ sh $PREFIX/src/libmemory.c \\\n && ln $PREFIX/$ARCH/lib/libmemory.a /bootstrap/$ARCH/lib/ \\\n && CC=$ARCH-gcc DESTDIR=$PREFIX/$ARCH/lib/ sh $PREFIX/src/libchkstk.S \\\n && ln $PREFIX/$ARCH/lib/libchkstk.a /bootstrap/$ARCH/lib/\n\nWORKDIR /x-mingw-crt\nRUN /mingw-w64-v$MINGW_VERSION/mingw-w64-crt/configure \\\n        --prefix=/bootstrap/$ARCH \\\n        --with-sysroot=/bootstrap/$ARCH \\\n        --host=$ARCH \\\n        --with-default-msvcrt=msvcrt-os \\\n        --disable-dependency-tracking \\\n        --disable-lib32 \\\n        --enable-lib64 \\\n        CFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) \\\n && make install\n\nWORKDIR /x-winpthreads\nRUN /mingw-w64-v$MINGW_VERSION/mingw-w64-libraries/winpthreads/configure \\\n        --prefix=/bootstrap/$ARCH \\\n        --with-sysroot=/bootstrap/$ARCH \\\n        --host=$ARCH \\\n        --enable-static \\\n        --disable-shared \\\n        CFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) \\\n && make install\n\nWORKDIR /x-gcc\nRUN make -j$(nproc) \\\n && make install\n\n# Cross-compile GCC\n\nWORKDIR /binutils\nRUN /binutils-$BINUTILS_VERSION/configure \\\n        --prefix=$PREFIX \\\n        --with-sysroot=$PREFIX/$ARCH \\\n        --host=$ARCH \\\n        --target=$ARCH \\\n        --disable-nls \\\n        --with-static-standard-libraries \\\n        CFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make MAKEINFO=true -j$(nproc) \\\n && make MAKEINFO=true install \\\n && rm $PREFIX/bin/elfedit.exe $PREFIX/bin/readelf.exe\n\nWORKDIR /gmp\nRUN /gmp-$GMP_VERSION/configure \\\n        --prefix=/deps \\\n        --host=$ARCH \\\n        --disable-assembly \\\n        --enable-static \\\n        --disable-shared \\\n        CFLAGS=\"-Os\" \\\n        CXXFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) \\\n && make install\n\nWORKDIR /mpfr\nRUN /mpfr-$MPFR_VERSION/configure \\\n        --prefix=/deps \\\n        --host=$ARCH \\\n        --with-gmp-include=/deps/include \\\n        --with-gmp-lib=/deps/lib \\\n        --enable-static \\\n        --disable-shared \\\n        CFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) \\\n && make install\n\nWORKDIR /mpc\nRUN /mpc-$MPC_VERSION/configure \\\n        --prefix=/deps \\\n        --host=$ARCH \\\n        --with-gmp-include=/deps/include \\\n        --with-gmp-lib=/deps/lib \\\n        --with-mpfr-include=/deps/include \\\n        --with-mpfr-lib=/deps/lib \\\n        --enable-static \\\n        --disable-shared \\\n        CFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) \\\n && make install\n\nWORKDIR /mingw-headers\nRUN /mingw-w64-v$MINGW_VERSION/mingw-w64-headers/configure \\\n        --prefix=$PREFIX/$ARCH \\\n        --host=$ARCH \\\n        --with-default-msvcrt=msvcrt-os \\\n && make -j$(nproc) \\\n && make install\n\nWORKDIR /mingw-crt\nRUN /mingw-w64-v$MINGW_VERSION/mingw-w64-crt/configure \\\n        --prefix=$PREFIX/$ARCH \\\n        --with-sysroot=$PREFIX/$ARCH \\\n        --host=$ARCH \\\n        --with-default-msvcrt=msvcrt-os \\\n        --disable-dependency-tracking \\\n        --disable-lib32 \\\n        --enable-lib64 \\\n        CFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) \\\n && make install\n\nWORKDIR /winpthreads\nRUN /mingw-w64-v$MINGW_VERSION/mingw-w64-libraries/winpthreads/configure \\\n        --prefix=$PREFIX/$ARCH \\\n        --with-sysroot=$PREFIX/$ARCH \\\n        --host=$ARCH \\\n        --enable-static \\\n        --disable-shared \\\n        CFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) \\\n && make install\n\nWORKDIR /gcc\nRUN /gcc-$GCC_VERSION/configure \\\n        --prefix=$PREFIX \\\n        --with-sysroot=$PREFIX/$ARCH \\\n        --with-native-system-header-dir=/include \\\n        --target=$ARCH \\\n        --host=$ARCH \\\n        --enable-static \\\n        --disable-shared \\\n        --with-pic \\\n        --with-gmp-include=/deps/include \\\n        --with-gmp-lib=/deps/lib \\\n        --with-mpc-include=/deps/include \\\n        --with-mpc-lib=/deps/lib \\\n        --with-mpfr-include=/deps/include \\\n        --with-mpfr-lib=/deps/lib \\\n        --enable-languages=c,c++,fortran \\\n        --enable-libgomp \\\n        --enable-threads=posix \\\n        --enable-version-specific-runtime-libs \\\n        --disable-dependency-tracking \\\n        --disable-lto \\\n        --disable-multilib \\\n        --disable-nls \\\n        --disable-win32-registry \\\n        --enable-mingw-wildcard \\\n        CFLAGS_FOR_TARGET=\"-Os\" \\\n        CXXFLAGS_FOR_TARGET=\"-Os\" \\\n        LDFLAGS_FOR_TARGET=\"-s\" \\\n        CFLAGS=\"-Os\" \\\n        CXXFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) \\\n && make install \\\n && rm -rf $PREFIX/$ARCH/bin/ $PREFIX/bin/$ARCH-* \\\n        $PREFIX/bin/ld.bfd.exe $PREFIX/bin/c++.exe \\\n && $ARCH-gcc -DEXE=g++.exe -DCMD=c++ \\\n        -Os -fno-asynchronous-unwind-tables \\\n        -Wl,--gc-sections -s -nostdlib \\\n        -o $PREFIX/bin/c++.exe \\\n        $PREFIX/src/alias.c -lkernel32\n\n# Create various tool aliases\nRUN $ARCH-gcc -DEXE=gcc.exe -DCMD=cc \\\n        -Os -fno-asynchronous-unwind-tables -Wl,--gc-sections -s -nostdlib \\\n        -o $PREFIX/bin/cc.exe $PREFIX/src/alias.c -lkernel32 \\\n && $ARCH-gcc -DEXE=gcc.exe -DCMD=\"cc -std=c99\" \\\n        -Os -fno-asynchronous-unwind-tables -Wl,--gc-sections -s -nostdlib \\\n        -o $PREFIX/bin/c99.exe $PREFIX/src/alias.c -lkernel32 \\\n && $ARCH-gcc -DEXE=gcc.exe -DCMD=\"cc -ansi\" \\\n        -Os -fno-asynchronous-unwind-tables -Wl,--gc-sections -s -nostdlib \\\n        -o $PREFIX/bin/c89.exe $PREFIX/src/alias.c -lkernel32 \\\n && printf '%s\\n' addr2line ar as c++filt cpp dlltool dllwrap elfedit g++ \\\n      gcc gcc-ar gcc-nm gcc-ranlib gcov gcov-dump gcov-tool ld nm objcopy \\\n      objdump ranlib readelf size strings strip windmc windres gfortran \\\n    | xargs -I{} -P$(nproc) \\\n          $ARCH-gcc -DEXE={}.exe -DCMD=$ARCH-{} \\\n            -Os -fno-asynchronous-unwind-tables \\\n            -Wl,--gc-sections -s -nostdlib \\\n            -o $PREFIX/bin/$ARCH-{}.exe $PREFIX/src/alias.c -lkernel32\n\n# Build some extra development tools\n\nWORKDIR /mingw-tools/gendef\nCOPY src/gendef-silent.patch $PREFIX/src/\nRUN patch -d/mingw-w64-v$MINGW_VERSION -p1 <$PREFIX/src/gendef-silent.patch \\\n && /mingw-w64-v$MINGW_VERSION/mingw-w64-tools/gendef/configure \\\n        --host=$ARCH \\\n        CFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) \\\n && cp gendef.exe $PREFIX/bin/\n\nWORKDIR /expat\nRUN /expat-$EXPAT_VERSION/configure \\\n        --prefix=/deps \\\n        --host=$ARCH \\\n        --disable-shared \\\n        --without-docbook \\\n        --without-examples \\\n        --without-tests \\\n        CFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) \\\n && make install\n\nWORKDIR /PDCurses-$PDCURSES_VERSION\nRUN make -j$(nproc) -C wincon \\\n        CC=$ARCH-gcc AR=$ARCH-ar CFLAGS=\"-I.. -Os -DPDC_WIDE\" pdcurses.a \\\n && cp wincon/pdcurses.a /deps/lib/libcurses.a \\\n && cp curses.h /deps/include\n\nWORKDIR /libiconv\nRUN /libiconv-$LIBICONV_VERSION/configure \\\n        --prefix=/deps \\\n        --host=$ARCH \\\n        --disable-nls \\\n        --disable-shared \\\n        CFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) \\\n && make install\n\nWORKDIR /gdb\nCOPY src/gdb-*.patch $PREFIX/src/\nRUN cat $PREFIX/src/gdb-*.patch | patch -d/gdb-$GDB_VERSION -p1 \\\n && sed -i 's/quiet = 0/quiet = 1/' /gdb-$GDB_VERSION/gdb/main.c \\\n && /gdb-$GDB_VERSION/configure \\\n        --host=$ARCH \\\n        --enable-tui \\\n        CFLAGS=\"-Os -D__MINGW_USE_VC2005_COMPAT -DPDC_WIDE -I/deps/include\" \\\n        CXXFLAGS=\"-Os -D__MINGW_USE_VC2005_COMPAT -DPDC_WIDE -I/deps/include\" \\\n        LDFLAGS=\"-s -L/deps/lib\" \\\n && make MAKEINFO=true -j$(nproc) \\\n && cp gdb/.libs/gdb.exe gdbserver/gdbserver.exe $PREFIX/bin/\n\nWORKDIR /make\nRUN /make-$MAKE_VERSION/configure \\\n        --host=$ARCH \\\n        --disable-nls \\\n        CFLAGS=\"-Os\" \\\n        LDFLAGS=\"-s\" \\\n && make -j$(nproc) \\\n && cp make.exe $PREFIX/bin/ \\\n && $ARCH-gcc -DEXE=make.exe -DCMD=make \\\n        -Os -fno-asynchronous-unwind-tables \\\n        -Wl,--gc-sections -s -nostdlib \\\n        -o $PREFIX/bin/mingw32-make.exe $PREFIX/src/alias.c -lkernel32\n\nWORKDIR /busybox-w32\nCOPY src/busybox-* $PREFIX/src/\nRUN cat $PREFIX/src/busybox-*.patch | patch -p1 \\\n && make mingw64u_defconfig \\\n && sed -ri 's/^(CONFIG_AR)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_ASCII)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_DPKG\\w*)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_FTP\\w*)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_LINK)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_MAN)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_MAKE)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_PDPMAKE)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_RPM\\w*)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_STRINGS)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_TEST2)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_TSORT)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_UNLINK)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_VI)=y/\\1=n/' .config \\\n && sed -ri 's/^(CONFIG_XXD)=y/\\1=n/' .config \\\n && make -j$(nproc) CROSS_COMPILE=$ARCH- \\\n    CONFIG_EXTRA_CFLAGS=\"-D_WIN32_WINNT=0x502\" \\\n && cp busybox.exe $PREFIX/bin/\n\n# Create BusyBox command aliases (like \"busybox --install\")\nRUN $ARCH-gcc -Os -fno-asynchronous-unwind-tables -Wl,--gc-sections -s \\\n      -nostdlib -o alias.exe $PREFIX/src/busybox-alias.c -lkernel32 \\\n && printf '%s\\n' arch ash awk base32 base64 basename bash bc bunzip2 bzcat \\\n      bzip2 cal cat chattr chmod cksum clear cmp comm cp cpio crc32 cut date \\\n      dc dd df diff dirname dos2unix du echo ed egrep env expand expr factor \\\n      false fgrep find fold free fsync getopt grep groups gunzip gzip hd \\\n      head hexdump httpd iconv id inotifyd install ipcalc jn kill killall \\\n      lash less ln logname ls lsattr lzcat lzma lzop lzopcat md5sum mkdir \\\n      mktemp mv nc nl nproc od paste patch pgrep pidof pipe_progress pkill \\\n      printenv printf ps pwd readlink realpath reset rev rm rmdir sed seq sh \\\n      sha1sum sha256sum sha3sum sha512sum shred shuf sleep sort split \\\n      ssl_client stat su sum sync tac tail tar tee test time timeout touch \\\n      tr true truncate ts ttysize uname uncompress unexpand uniq unix2dos \\\n      unlzma unlzop unxz unzip uptime usleep uudecode uuencode watch \\\n      wc wget which whoami whois xargs xz xzcat yes zcat \\\n    | xargs -I{} cp alias.exe $PREFIX/bin/{}.exe\n\n# TODO: Either somehow use $VIM_VERSION or normalize the workdir\nWORKDIR /vim90/src\nRUN ARCH= make -j$(nproc) -f Make_ming.mak \\\n        OPTIMIZE=SIZE STATIC_STDCPLUS=yes HAS_GCC_EH=no \\\n        UNDER_CYGWIN=yes CROSS=yes CROSS_COMPILE=$ARCH- \\\n        FEATURES=HUGE VIMDLL=yes NETBEANS=no WINVER=0x0501 \\\n && $ARCH-strip vimrun.exe \\\n && rm -rf ../runtime/tutor/tutor.* \\\n && cp -r ../runtime $PREFIX/share/vim \\\n && cp vimrun.exe gvim.exe vim.exe *.dll $PREFIX/share/vim/ \\\n && cp xxd/xxd.exe $PREFIX/bin \\\n && printf '@set SHELL=\\r\\n@start \"\" \"%%~dp0/../share/vim/gvim.exe\" %%*\\r\\n' \\\n        >$PREFIX/bin/gvim.bat \\\n && printf '@set SHELL=\\r\\n@\"%%~dp0/../share/vim/vim.exe\" %%*\\r\\n' \\\n        >$PREFIX/bin/vim.bat \\\n && printf '@set SHELL=\\r\\n@\"%%~dp0/../share/vim/vim.exe\" %%*\\r\\n' \\\n        >$PREFIX/bin/vi.bat \\\n && printf '@vim -N -u NONE \"+read %s\" \"+write\" \"%s\"\\r\\n' \\\n        '$VIMRUNTIME/tutor/tutor' '%TMP%/tutor%RANDOM%' \\\n        >$PREFIX/bin/vimtutor.bat\n\nWORKDIR /ctags-$CTAGS_VERSION\nRUN sed -i /RT_MANIFEST/d win32/ctags.rc \\\n && make -j$(nproc) -f mk_mingw.mak CC=gcc packcc.exe \\\n && make -j$(nproc) -f mk_mingw.mak \\\n        CC=$ARCH-gcc WINDRES=$ARCH-windres \\\n        OPT= CFLAGS=-Os LDFLAGS=-s \\\n && cp ctags.exe $PREFIX/bin/\n\nWORKDIR /7z\nCOPY src/7z.mak $PREFIX/src/\nRUN sed -i s/CommCtrl/commctrl/ $(grep -Rl CommCtrl CPP/) \\\n && sed -i s%7z\\\\.ico%$PREFIX/src/w64devkit.ico% \\\n           CPP/7zip/Bundles/SFXWin/resource.rc \\\n && make -f $PREFIX/src/7z.mak -j$(nproc) CROSS=$ARCH-\n\n# Pack up a release\n\nWORKDIR /\nRUN rm -rf $PREFIX/share/man/ $PREFIX/share/info/ $PREFIX/share/gcc-* \\\n && rm -rf $PREFIX/lib/*.a $PREFIX/lib/*.la $PREFIX/include/*.h\nCOPY README.md Dockerfile src/w64devkit.ini $PREFIX/\nRUN printf \"id ICON \\\"$PREFIX/src/w64devkit.ico\\\"\" >w64devkit.rc \\\n && $ARCH-windres -o w64devkit.o w64devkit.rc \\\n && $ARCH-gcc -DVERSION=$VERSION -nostdlib -fno-asynchronous-unwind-tables \\\n        -fno-builtin -Wl,--gc-sections -s -o $PREFIX/w64devkit.exe \\\n        $PREFIX/src/w64devkit.c w64devkit.o -lkernel32 -luser32 \\\n && $ARCH-gcc \\\n        -Os -fno-asynchronous-unwind-tables \\\n        -Wl,--gc-sections -s -nostdlib \\\n        -o $PREFIX/bin/debugbreak.exe $PREFIX/src/debugbreak.c \\\n        -lkernel32 \\\n && $ARCH-gcc \\\n        -Os -fno-asynchronous-unwind-tables -fno-builtin -Wl,--gc-sections \\\n        -s -nostdlib -DPKG_CONFIG_PREFIX=\"\\\"/$ARCH\\\"\" \\\n        -o $PREFIX/bin/pkg-config.exe $PREFIX/src/pkg-config.c \\\n        -lkernel32 \\\n && $ARCH-gcc \\\n        -Os -fno-asynchronous-unwind-tables -fno-builtin -Wl,--gc-sections \\\n        -s -nostdlib -o $PREFIX/bin/vc++filt.exe $PREFIX/src/vc++filt.c \\\n        -lkernel32 -lshell32 -ldbghelp \\\n && $ARCH-gcc \\\n        -Os -fno-asynchronous-unwind-tables -fno-builtin -Wl,--gc-sections \\\n        -s -nostdlib -o $PREFIX/bin/peports.exe $PREFIX/src/peports.c \\\n        -lkernel32 -lshell32 \\\n && $ARCH-gcc -DEXE=pkg-config.exe -DCMD=pkg-config \\\n        -Os -fno-asynchronous-unwind-tables -Wl,--gc-sections -s -nostdlib \\\n        -o $PREFIX/bin/$ARCH-pkg-config.exe $PREFIX/src/alias.c -lkernel32 \\\n && sed -i s/'\\<ARCH\\>'/$ARCH/g $PREFIX/src/profile \\\n && mkdir -p $PREFIX/$ARCH/lib/pkgconfig \\\n && cp /mingw-w64-v$MINGW_VERSION/COPYING.MinGW-w64-runtime/COPYING.MinGW-w64-runtime.txt \\\n        $PREFIX/ \\\n && printf \"\\n===========\\nwinpthreads\\n===========\\n\\n\" \\\n        >>$PREFIX/COPYING.MinGW-w64-runtime.txt . \\\n && cat /mingw-w64-v$MINGW_VERSION/mingw-w64-libraries/winpthreads/COPYING \\\n        >>$PREFIX/COPYING.MinGW-w64-runtime.txt \\\n && echo $VERSION >$PREFIX/VERSION.txt \\\n && 7z a -mx=9 -mtm=- $PREFIX.7z $PREFIX\nENV PREFIX=${PREFIX}\nCMD cat /7z/7z.sfx $PREFIX.7z\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.0966796875,
          "content": "# Portable C, C++, and Fortran Development Kit for x64 and x86 Windows\n\n[w64devkit][] is a Dockerfile that builds from source a small, portable\ndevelopment suite for creating C and C++ applications on and for x86 and\nx64 Windows. See \"Releases\" for pre-built, ready-to-use kits.\n\nIncluded tools:\n\n* [Mingw-w64 GCC][w64] : compilers, linker, assembler\n* [GDB][gdb] : debugger\n* [GNU Make][make] : standard build tool\n* [busybox-w32][bb] : standard unix utilities, including sh\n* [Vim][vim] : powerful text editor\n* [Universal Ctags][ctags] : source navigation\n\nIt is an MSVCRT toolchain with pthreads, C++11 threads, and OpenMP. All\nincluded runtime components are static. **Docker/Podman is not required to\nuse the development kit**. It's merely a reliable, clean environment for\nbuilding the kit itself.\n\n## Build\n\nBuild the image, then run it to produce a self-extracting 7z archive:\n\n    docker build -t w64devkit .\n    docker run --rm w64devkit >w64devkit-x64.exe\n\nThis takes about 15 minutes on modern systems. You will need an internet\nconnection during the first few minutes of the build. **Note:** Do not use\nPowerShell because it lacks file redirection.\n\n## Usage\n\nThe self-extracting 7z archive contains tools in a typical unix-like\nconfiguration. Extract wherever is convenient. Inside is `w64devkit.exe`,\nwhich launches a console window with the environment configured and ready\nto go. It is the easiest way to enter the development environment, and\nrequires no system changes. It also sets two extra environment variables:\n`W64DEVKIT_HOME` to the installation root and `W64DEVKIT` to the version.\n\nAlternatively, add the `bin/` directory to your path. For example, inside\na `cmd.exe` console or batch script:\n\n    set PATH=c:\\path\\to\\w64devkit\\bin;%PATH%\n\nThen to start an interactive unix shell:\n\n    sh -l\n\n## Main features\n\n* No installation required. Run it anywhere as any user. Simply delete\n  when no longer needed.\n\n* Fully offline. No internet access is ever required or attempted.\n\n* A focus on static linking all runtime components. The runtime is\n  optimized for size.\n\n* Trivial to build from source, meaning it's easy to tweak and adjust any\n  part of the kit for your own requirements.\n\n* [Complements Go][go] for cgo and bootstrapping.\n\n## Operating system support\n\nThe x64 kit requires Windows 7 or later, though some tools only support\nUnicode (\"wide\") paths, inputs, and outputs on Windows 10 or later. The\ntoolchain targets Windows 7 by default.\n\nThe x86 kit requires Windows XP or later and an SSE2-capable processor\n(e.g. at least Pentium 4); limited Unicode support. The toolchain targets\nthe same by default. Runtimes contain SSE2 instructions, so GCC `-march`\nwill not reliably target less capable processors when runtimes are linked\n(exceptions: `-lmemory`, `-lchkstk`).\n\n## Optimized for size\n\nRuntime components are optimized for size, leading to smaller application\nexecutables. Unique to w64devkit, `libmemory.a` is a library of `memset`,\n`memcpy`, `memmove`, `memcmp`, and `strlen` implemented as x86 string\ninstructions. When [not linking a CRT][crt], linking `-lmemory` provides\ntiny definitions, particularly when GCC requires them.\n\nAlso unique to w64devkit, `libchkstk.a` has a leaner, faster definition of\n`___chkstk_ms` than GCC (`-lgcc`), as well as `__chkstk`, sometimes needed\nwhen linking MSVC artifacts. Both are in the public domain and so, unlike\ndefault implementations, do not involve complex licensing. When required\nin a `-nostdlib` build, link `-lchkstk`.\n\nUnlike traditional toolchains, import tables are not populated with junk\nordinal hints. If an explicit hint is not provided (i.e. via a DEF file),\nthen the hint is zeroed: \"no data.\" Eliminating this random data makes\nbinaries more compressible and *theoretically* faster loading. See also:\n`peports`.\n\n## Recommended downloadable, offline documentation\n\nWith a few exceptions, such as Vim's built-in documentation (`:help`),\nw64devkit does not include documentation. However, you need not forgo\noffline documentation alongside your offline development tools. This is a\nlist of recommended, no-cost, downloadable documentation complementing\nw64devkit's capabilities. In rough order of importance:\n\n* [cppreference][doc-cpp] (HTML), friendly documentation for the C and C++\n  standard libraries.\n\n* [GCC manuals][doc-gcc] (PDF, HTML), to reference GCC features,\n  especially built-ins, intrinsics, and command line switches.\n\n* [Win32 Help File][doc-win32] (CHM) is old, but official, Windows API\n  documentation. Unfortunately much is missing, such as Winsock. (Offline\n  Windows documentation has always been very hard to come by.)\n\n* [C and C++ Standards (drafts)][doc-std] (PDF), for figuring out how\n  corner cases are intended to work.\n\n* [Intel Intrinsics Guide][doc-intr] (interactive HTML), a great resource\n  when working with SIMD intrinsics. (Search for \"Download\" on the left.)\n\n* [GNU Make manual][doc-make] (PDF, HTML)\n\n* [GNU Binutils manuals][doc-ld] (PDF, HTML), particularly `ld` and `as`.\n\n* [GDB manual][doc-gdb] (PDF)\n\n* [BusyBox man pages][doc-bb] (TXT), though everything here is also\n  available via `-h` option inside w64devkit.\n\n* [Intel Software Developer Manuals][doc-intel] (PDF), for referencing x86\n  instructions, when either studying compiler output with `objdump` or\n  writing assembly.\n\n## Library installation\n\nExcept for the standard libraries and Win32 import libraries, w64devkit\ndoes not include libraries, but you can install additional libraries such\nthat the toolchain can find them naturally. There are three options:\n\n1. Install it under the sysroot at `w64devkit/$ARCH/`. The easiest option,\n   but will require re-installation after upgrading w64devkit. If it\n   defines `.pc` files, the `pkg-config` command will automatically find\n   and use them.\n\n2. Append its installation directory to your `CPATH` and `LIBRARY_PATH`\n   environment variables. Use `;` to delimit directories. You would likely\n   do this in your `.profile`.\n\n3. If it exists, append its `pkgconfig` directory to the `PKG_CONFIG_PATH`\n   environment variable, then use the `pkg-config` command as usual. Use\n   `;` to delimit directories\n\nBoth (1) and (3) are designed to work correctly even if w64devkit or the\nlibraries have paths containing spaces.\n\n## Unique command-line programs\n\n* `peports`: displays export and import tables of EXEs and DLLs. Like MSVC\n  `dumpbin` options `/exports` and `/imports`; narrower and more precise\n  than Binutils `objdump -p`. Useful for checking if exports and imports\n  match your expectations. Complemented by `c++filt` and `vc++filt`, i.e.\n  in a pipeline. Pronounced like *purports*.\n\n* `vc++filt`: a `c++filt` for [Visual C++ name decorations][names]. Used\n  to examine GCC-incompatible binaries, potentially to make some use of\n  them anyway.\n\n* [`debugbreak`][debugbreak]: causes all debugee processes to break in the\n  debugger, like using Windows' F12 debugger hotkey. Especially useful for\n  console subsystem programs.\n\n## Notes\n\n`$HOME` can be set through the adjacent `w64devkit.ini` configuration, and\nmay even be relative to the `w64devkit/` directory. This is useful for\nencapsulating the entire development environment, with home directory, on\nremovable, even read-only, media. Use a `.profile` in the home directory\nto configure the environment further.\n\nNeither Address Sanitizer (ASan) nor Thread Sanitizer (TSan) [has been\nported to Mingw-w64][san] ([also][san2]), but Undefined Behavior Sanitizer\n(UBSan) works perfectly under GDB. With both `-fsanitize=undefined` and\n`-fsanitize-trap`, GDB will [break precisely][break] on undefined\nbehavior, and it does not require linking with libsanitizer.\n\n[GCC does not fully support AVX on Windows][avx] and may use aligned moves\non unaligned addresses. When targeting AVX, consider disabling all aligned\nmoves in the assembler: `-Wa,-muse-unaligned-vector-move`.\n\n## Licenses\n\nWhen distributing binaries built using w64devkit, your .exe will include\nparts of this distribution. For the GCC runtime, including OpenMP, you're\ncovered by the [GCC Runtime Library Exception][gpl] so you do not need to\ndo anything. However the Mingw-w64 runtime [has the usual software license\nheadaches][bs] and you may need to comply with various BSD-style licenses\ndepending on the functionality used by your program: [MinGW-w64 runtime\nlicensing][lic1] and [winpthreads license][lic2]. To make this easy,\nw64devkit includes the concatenated set of all licenses in the file\n`COPYING.MinGW-w64-runtime.txt`, which should be distributed with your\nbinaries.\n\n\n[avx]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412\n[bb]: https://frippery.org/busybox/\n[break]: https://nullprogram.com/blog/2022/06/26/\n[bs]: https://www.rdegges.com/2016/i-dont-give-a-shit-about-licensing/\n[crt]: https://nullprogram.com/blog/2023/02/15/\n[ctags]: https://github.com/universal-ctags/ctags\n[debugbreak]: https://nullprogram.com/blog/2022/07/31/\n[doc-bb]: https://busybox.net/downloads/BusyBox.txt\n[doc-cpp]: https://en.cppreference.com/w/Cppreference:Archives\n[doc-gcc]: https://gcc.gnu.org/onlinedocs/\n[doc-gdb]: https://sourceware.org/gdb/current/onlinedocs/gdb.pdf\n[doc-intel]: https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html\n[doc-intr]: https://software.intel.com/sites/landingpage/IntrinsicsGuide/\n[doc-ld]: https://sourceware.org/binutils/docs/\n[doc-make]: https://www.gnu.org/software/make/manual/\n[doc-std]: https://stackoverflow.com/a/83763\n[doc-win32]: https://web.archive.org/web/20220922051031/http://www.laurencejackson.com/win32/\n[gdb]: https://www.gnu.org/software/gdb/\n[go]: https://nullprogram.com/blog/2021/06/29/\n[gpl]: https://www.gnu.org/licenses/gcc-exception-3.1.en.html\n[lic1]: https://sourceforge.net/p/mingw-w64/mingw-w64/ci/master/tree/COPYING.MinGW-w64-runtime/COPYING.MinGW-w64-runtime.txt\n[lic2]: https://sourceforge.net/p/mingw-w64/mingw-w64/ci/master/tree/mingw-w64-libraries/winpthreads/COPYING\n[make]: https://www.gnu.org/software/make/\n[names]: https://learn.microsoft.com/en-us/cpp/build/reference/decorated-names\n[san]: http://mingw-w64.org/doku.php/contribute#sanitizers_asan_tsan_usan\n[san2]: https://groups.google.com/forum/#!topic/address-sanitizer/q0e5EBVKZT4\n[vim]: https://www.vim.org/\n[w64]: http://mingw-w64.org/\n[w64devkit]: https://github.com/skeeto/w64devkit\n"
        },
        {
          "name": "UNLICENSE",
          "type": "blob",
          "size": 1.1826171875,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "multibuild.sh",
          "type": "blob",
          "size": 2.123046875,
          "content": "#!/bin/sh\n\n# Convenience build script for w64devkit, primarily for automatic builds of\n# multiple release flavors in one shot. By default it does a standard build\n# at the current commit.\n#\n# Example, build a full release on an arbitrary commit:\n#   $ ./multibuild.sh -as \"$(git describe | tr v -)\"\n\nset -e\narch=\"\"\ndryrun=\nflavors=\"\"\nsuffix=\"$(git describe --exact-match 2>/dev/null | tr v - || true)\"\n\nusage() {\n    cat <<EOF\nusage: multibuild.sh [-48abfhnOs] [-s SUFFIX]\n  -4         Enable x86 build (default: no)\n  -8         Enable x64 build (default: auto)\n  -a         All: Enable all builds\n  -h         Print this help message\n  -n         Dry run, print commands but do nothing\n  -O         Compact with advzip (default: no, less compatible)\n  -s SUFFIX  Append a version suffix (e.g. \"-s -1.2.3\", default:auto)\nEOF\n}\n\nwhile getopts 48abfhmnOs: opt; do\n    case $opt in\n        4) arch=\"$arch w64devkit-x86\";;\n        8) arch=\"$arch w64devkit-x64\";;\n        a) flavors=\"X\"; arch=\"w64devkit-x64 w64devkit-x86\";;\n        h) usage; exit 0;;\n        n) dryrun=echo;;\n        s) suffix=\"$OPTARG\";;\n        ?) usage >&2; exit 1;;\n    esac\ndone\nshift $((OPTIND - 1))\n\nif [ $# -gt 0 ]; then\n    printf 'multibuild.sh: Too many arguments\\n' >&2\n    usage >&2\n    exit 1\nfi\n\nif [ -z \"$arch\" ]; then\n    arch=\"w64devkit-x64\"\nfi\nif [ -z \"$flavors\" ]; then\n    flavors=\"X\"\nfi\n\nbuilds=\nfor base in $arch; do\n    for flavor in $flavors; do\n        builds=\"$builds $base$(echo $flavor | tr -d X)\"\n    done\ndone\n\ntarget=\"tmp-w64-$$\"\ncleanup() {\n    $dryrun git checkout .\n    $dryrun git stash pop\n    $dryrun docker rmi --no-prune $target || true\n}\ntrap cleanup INT TERM\n\n$dryrun git stash\nfor build in $builds; do\n    $dryrun git checkout .\n    (\n        IFS=-\n        set $build; shift\n        for flavor in \"$@\"; do\n            if [ -e src/variant-$flavor.patch ]; then\n                $dryrun patch -p1 -i src/variant-$flavor.patch\n            fi\n        done\n    )\n    $dryrun docker build -t $target .\n    if [ -n \"$dryrun\" ]; then\n        $dryrun docker run --rm $target \">$build$suffix.exe\"\n    else\n        docker run --rm $target >$build$suffix.exe\n    fi\ndone\n\ncleanup\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}