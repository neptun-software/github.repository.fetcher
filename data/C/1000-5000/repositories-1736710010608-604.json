{
  "metadata": {
    "timestamp": 1736710010608,
    "page": 604,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebookresearch/darkforestGo",
      "stars": 2099,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.07421875,
          "content": "*.o\n*.so\n*.swp\n*.bin\nmodels\ntest_playout_multithread\ncnnPlayerV2/game-*.sgf\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.685546875,
          "content": "# Contributing to DarkForest Go engine\nWe want to make contributing to this project as easy and transparent as possible.  \nWe also welcome any fork attempt from this project.  \n\n## Our Development Process\nDarkForest Go engine has been developed mainly by Yuandong Tian and Yan Zhu from Facebook AI Research since May 2015.  \nSince it opens to the public, its future development will be conducted in this open source branch.  \n\n## Bug reports\nPlease follow the steps when you find a bug:\n\n1. use the Github issue search to check if the issue has been addressed before. \n2. Make sure if the issue has been fixed by synchronizing the most recent branch in the repository. \n3. Write a simple and easy-to-understand test case that reveals the issue. We use github issues to track public bugs. please ensure your description is clear and has sufficient instructions to be able to reproduce the issue.\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Coding Style  \n* 2 spaces for indentation rather than tabs\n* 80 character line length\n\n## License\nBy contributing to DarkForest Go engine, you agree that your contributions will be licensed under its BSD license.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.498046875,
          "content": "BSD License\n\nFor DarkForest Go software\n\nCopyright (c) 2016-present, Facebook, Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name Facebook nor the names of its contributors may be used to\n   endorse or promote products derived from this software without specific\n   prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "PATENTS",
          "type": "blob",
          "size": 1.9375,
          "content": "Additional Grant of Patent Rights Version 2\n\n\"Software\" means the DarkForest Go software distributed by Facebook, Inc.\n\nFacebook, Inc. (\"Facebook\") hereby grants to each recipient of the Software\n(\"you\") a perpetual, worldwide, royalty-free, non-exclusive, irrevocable\n(subject to the termination provision below) license under any Necessary\nClaims, to make, have made, use, sell, offer to sell, import, and otherwise\ntransfer the Software. For avoidance of doubt, no license is granted under\nFacebookâ€™s rights in any patent claims that are infringed by (i) modifications\nto the Software made by you or any third party or (ii) the Software in\ncombination with any software or other technology.\n\nThe license granted hereunder will terminate, automatically and without notice,\nif you (or any of your subsidiaries, corporate affiliates or agents) initiate\ndirectly or indirectly, or take a direct financial interest in, any Patent\nAssertion: (i) against Facebook or any of its subsidiaries or corporate\naffiliates, (ii) against any party if such Patent Assertion arises in whole or\nin part from any software, technology, product or service of Facebook or any of\nits subsidiaries or corporate affiliates, or (iii) against any party relating\nto the Software. Notwithstanding the foregoing, if Facebook or any of its\nsubsidiaries or corporate affiliates files a lawsuit alleging patent\ninfringement against you in the first instance, and you respond by filing a\npatent infringement counterclaim in that lawsuit against that party that is\nunrelated to the Software, the license granted hereunder will not terminate\nunder section (i) of this paragraph due to such counterclaim.\n\nA \"Necessary Claim\" is a claim of a patent owned by Facebook that is\nnecessarily infringed by the Software standing alone.\n\nA \"Patent Assertion\" is any lawsuit or other action alleging direct, indirect,\nor contributory infringement or inducement to infringe any patent, including a\ncross-claim or counterclaim.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.7451171875,
          "content": "DarkForest, the Facebook Go engine\n========\n\n**Update[12/11/2017]** DarkForestGo has been incorporated into ELF [platform](https://github.com/facebookresearch/ELF/tree/master/go).\n\n**Update**: The training code is open source now. See below for detailed instructions.\n\nDarkForest is a Go game engine powered by Deep Learning and developed at Facebook AI Research.\n* [It has a stable rank of 5d on the KGS servers](http://www.gokgs.com/graphPage.jsp?user=darkfmcts3)\n* [Pure Policy Network achieves a stable rank of 3d on KGS](http://www.gokgs.com/graphPage.jsp?user=darkfores2)\n* [It received the 3rd place in the KGS Go Tournament](http://www.weddslist.com/kgs/past/119/index.html)\n* [It received the 2nd place in UEC Computer Go Cup](http://jsb.cs.uec.ac.jp/~igo/eng/result2.html)\n\nWe hope that releasing the source code and pre-trained [models](https://www.dropbox.com/sh/6nm8g8z163omb9f/AABQxJyV7EIdbHKd9rnPQGnha?dl=0) are beneficial to the community.\n\nDetails of the engine are given in our [paper](http://arxiv.org/abs/1511.06410) and [poster](http://yuandong-tian.com/ICLR2016-poster.pdf), and if you use our engine in future research, cite our paper:\n\n```\nBetter Computer Go Player with Neural Network and Long-term Prediction, ICLR 2016\nYuandong Tian, Yan Zhu\n\n@article{tian2015better,\n  title={Better Computer Go Player with Neural Network and Long-term Prediction},\n  author={Tian, Yuandong and Zhu, Yan},\n  journal={arXiv preprint arXiv:1511.06410},\n  year={2015}\n}\n```\n\n![Architecture](../master/figure.png?raw=true)\n\nAlthough DarkForest is standalone and does not depend on external libraries, some portions of the tactics and pattern code were inspired by the Pachi [engine](https://github.com/pasky/pachi).\n\nBuild\n------------\nDependencies:\n\n1. Install [torch7](http://torch.ch/docs/getting-started.html).\n2. [Install CUDA / CuDNN](https://github.com/facebook/fb.resnet.torch/blob/master/INSTALL.md)\n2. Install a few packages\n```bash\nluarocks install class\nluarocks install image\nluarocks install tds\nluarocks install cudnn\n```\n This program supports 1 to 4 GPUs.\n\nThen just compile with the following command:\n\n```bash\nsh ./compile.sh\n```\n\nGCC 4.8+ is required. Depending on the location of your C++ compiler, please change the script accordingly.\nTested in CentOS 6.5 and Ubuntu 14.04, 15.04.\n\n\nInstall gcc-4.9 as a second compiler and create symlink as:\n\n    sudo ln -s /usr/bin/gcc-4.9 /usr/local/cuda/bin/gcc\n    sudo ln -s /usr/bin/g++-4.9 /usr/local/cuda/bin/g++\nDuring the installation of torch and cudnn, either change the build script or replace symlink at /usr/bin/cc with:\n\n    sudo ln -s /usr/bin/gcc-4.9 /usr/bin/cc\n\nMore info at (http://stackoverflow.com/questions/6622454/cuda-incompatible-with-my-gcc-version)\n\n\nAfter the compilation `cc` symlink can be reverted back to latest version.\n\nIf you get errors like:\n\n    These bindings are for version 5005 or above ...\n\nDownload latest cuDNN from nvidia at (https://developer.nvidia.com/rdp/cudnn-download), registration required.\n\n\n\nUsage\n------------\nStep 1: Download the models.\n\nCreate `./models` directory and download trained [models](https://www.dropbox.com/sh/6nm8g8z163omb9f/AABQxJyV7EIdbHKd9rnPQGnha?dl=0).\n\nStep 2: First run the GPU server\n\n```bash\ncd ./local_evaluator\nsh cnn_evaluator.sh [num_gpu] [pipe file path]\n```\n\n* `num_gpu`         the number of GPUs (1-8) you have for the current machine.\n* `pipe file path`  The path that the pipe file is settled. Default is `/data/local/go`. If you have specific other path, then you need to specify the same when running `cnnPlayerMCTSV2.lua`\n\nExample: `sh cnn_evaluator.sh 4 /data/local/go`\n\nStep 3: Run the main program\n\n```bash\ncd ./cnnPlayerV2\nth cnnPlayerMCTSV2.lua [options]\n```\n\nSee `cnnPlayerV2/cnnPlayerMCTSV2.lua` for a lot of options. For a simple first run (assuming you have 4 GPUs), you could use:\n\n```bash\nth cnnPlayerMCTSV2.lua --num_gpu [num_gpu] --time_limit 10\n```\nor (if you want to use a set of plausibly good parameters):\n\n```bash\nth cnnPlayerMCTSV2.lua --use_formal_params --num_gpu [num_gpu] --time_limit 10\n```\n\nTo load an existing game up to move 23:\n```bash\nth cnnPlayerMCTSV2.lua [other_options] --setup_board \"/path/to/sgf 23\"\n```\n\nWhen you are in the interactive environment, type\n\n* `clear_board` to clear the board\n* `genmove b`    to genmove the black move.\n* `play w Q4`    to play a move at Q4 for specific color.\n* `quit`         to quit.\n\nA complete game may look like:\n\n```bash\nclear_board\n[MCTS initialization ...]\nplace_free_handicap 3\ngenmove b\n[MCTS generates moves..e.g., it returns Q16]\nplay w D4\ngenmove b\n[MCTS generates moves...]\nquit\n```\n\nFor more commands, please use command `list_commands`, check the details of [GTP protocol](http://senseis.xmp.net/?GTP) or take a look at the source code.\n\nTraining\n--------------\nTo train the policy network from scratch, please run `./train.sh`. 1 GPU is needed. Please install\n`torchnet` first (e.g., `luarocks install torchnet`).\n\nDifferences with the award-winning versions\n--------------\nThe difference between this open source version (A) and that in KGS/competitions (B) is the following:\n* (A) runs on a single machine and uses pipe as client/server communications. (B) uses thrift RPC services as a way to communicate.\n* (B) uses more computational resources.\n* We might have tuned parameters for (B) extensively, but not for (A). We will give the tip of parameter tuning soon.\n\nTroubleshooting\n----------------\n**Q**: My program hanged on genmove/quit, what happened?\n**A**: Make sure you run the GPU server under ./local\\_evaluator, the server remains active and the pipe file path matches between the server and the client.\n\nIf you have any questions or find any bugs, please **open a Github issue** by clicking *\"Issues\"* tab and then click *\"New Issue\"*.\n\nCode Overview\n-------------\n\nThe system consists of the following parts.\n\n* `./CNNPlayerV2`\nLua (terminal) interface for Go.\n\n1. `CNNPlayerV3.lua`              Run Pure-DCNN player\n2. `CNNPlayerMCTSV2.lua`          Run player with DCNN + MCTS\n\n* `./board`\nThings about board and its evaluations. Board data structure and different playout policy.\n\n* `./mctsv2`\nImplementation of Monte Carlo Tree Search\n\n* `./local_evaluator`\nSimple GPU-based server. Communication with search threads via pipe.\n\n* `./utils`\nSimple utilities, e.g., read/write sgf files.\n\n* `./test`\nTest utilities.\n\n* `./train`\nTraining code\n\n* `./dataset`\nDataset used for training. Please download them [here](https://www.dropbox.com/sh/ihzvzajywmfvbhm/AACIgYxew4daP1LXY_HCKwNla?dl=0) and save to the `./dataset` directory.\n\n* `./models`\nAll pre-trained models. Please download them [here](https://www.dropbox.com/sh/6nm8g8z163omb9f/AABQxJyV7EIdbHKd9rnPQGnha?dl=0) and save to the `./models` directory.\n\n* `./sgfs`\nSome exemplar sgf files.\n\nLicense\n----------\nPlease check the LICENSE file for the license of Facebook DarkForest Go engine.\n\n"
        },
        {
          "name": "board",
          "type": "tree",
          "content": null
        },
        {
          "name": "cnnPlayerV2",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "compile.sh",
          "type": "blob",
          "size": 3.169921875,
          "content": "#\n# Copyright (c) 2016-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree. An additional grant \n# of patent rights can be found in the PATENTS file in the same directory.\n# \n\n#!/bin/bash\n\nCPP_FLAGS=\"-O4 -fPIC -std=c++11 -I/usr/include/malloc/ -Wl,-export-dynamic\"\nCXX=g++\n\necho Compiling\n$CXX $CPP_FLAGS -I./common -c common/common.c common/comm.c common/comm_pipe.c \n$CXX $CPP_FLAGS -I./common -I./board -c board/board.c board/default_policy.c board/default_policy_common.c board/pattern.c board/pattern_v2.c board/ownermap.c board/sample_pattern_v2.c \n$CXX $CPP_FLAGS -I./common -I./board -c tsumego/rank_move.c \n\n$CXX $CPP_FLAGS -fpermissive -I./common -I./board -c pachi_tactics/moggy.c pachi_tactics/board_interface.c\n$CXX $CPP_FLAGS -fpermissive -I./common -I./board -c pachi_tactics/tactics/1lib.c pachi_tactics/tactics/2lib.c pachi_tactics/tactics/ladder.c pachi_tactics/tactics/nakade.c pachi_tactics/tactics/nlib.c pachi_tactics/tactics/selfatari.c \n\necho Create moggy\n$CXX -shared -o libmoggy.so moggy.o board.o board_interface.o 1lib.o 2lib.o ladder.o nakade.o nlib.o selfatari.o pattern.o \n\n$CXX $CPP_FLAGS -I./common -I./board -I./mctsv2 -c mctsv2/tree.c mctsv2/playout_multithread.c mctsv2/playout_callbacks.c mctsv2/event_count.cpp mctsv2/tree_search.c\n$CXX $CPP_FLAGS -I./common -c ./local_evaluator/cnn_local_exchanger.c\n\necho Create libboard and libcomm\n$CXX -shared -Wl,-export-dynamic -o libcommon.so common.o\n$CXX -shared -Wl,-export-dynamic -o libboard.so board.o common.o\n$CXX -shared -Wl,-export-dynamic -o libdefault_policy.so default_policy_common.o default_policy.o board.o common.o pattern.o pattern_v2.o\n$CXX -shared -Wl,-export-dynamic -o libownermap.so board.o common.o ownermap.o\n$CXX -shared -Wl,-export-dynamic -o libpattern_v2.so pattern_v2.o board.o common.o ownermap.o\n$CXX -shared -Wl,-export-dynamic -o libcomm.so comm.o\n\necho Create libplayout_multithread.so\n$CXX -shared -o libplayout_multithread.so tree.o playout_multithread.o board.o tree_search.o playout_callbacks.o common.o cnn_local_exchanger.o comm_pipe.o default_policy.o pattern.o pattern_v2.o default_policy_common.o rank_move.o event_count.o moggy.o board_interface.o 1lib.o 2lib.o ladder.o nakade.o nlib.o selfatari.o -lm\n\necho Create liblocalexchanger.so\n$CXX -shared -o liblocalexchanger.so comm_pipe.o cnn_local_exchanger.o board.o common.o -lm \n\necho Compile all test codes\n$CXX $CPP_FLAGS -lm -pthread mctsv2/test_playout_multithread.c tree.o playout_multithread.o board.o common.o playout_callbacks.o comm_pipe.o event_count.o tree_search.o cnn_local_exchanger.o default_policy.o default_policy_common.o pattern.o pattern_v2.o rank_move.o moggy.o board_interface.o 1lib.o 2lib.o ladder.o nakade.o nlib.o selfatari.o -I./common -I./board -o test_playout_multithread\n\necho Put all .so file into directory so that lua could load\nDEST_DIR=./libs\n\ncp libboard.so $DEST_DIR\ncp libownermap.so $DEST_DIR\ncp libpattern_v2.so $DEST_DIR\ncp libdefault_policy.so $DEST_DIR\ncp libcomm.so $DEST_DIR\ncp libcommon.so $DEST_DIR\ncp libplayout_multithread.so $DEST_DIR\ncp libmoggy.so $DEST_DIR\ncp liblocalexchanger.so $DEST_DIR\n"
        },
        {
          "name": "figure.png",
          "type": "blob",
          "size": 248.2529296875,
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "local_evaluator",
          "type": "tree",
          "content": null
        },
        {
          "name": "mctsv2",
          "type": "tree",
          "content": null
        },
        {
          "name": "pachi_tactics",
          "type": "tree",
          "content": null
        },
        {
          "name": "sgfs",
          "type": "tree",
          "content": null
        },
        {
          "name": "train.lua",
          "type": "blob",
          "size": 4.4951171875,
          "content": "--\n-- Copyright (c) 2016-present, Facebook, Inc.\n-- All rights reserved.\n--\n-- This source code is licensed under the BSD-style license found in the\n-- LICENSE file in the root directory of this source tree. An additional grant\n-- of patent rights can be found in the PATENTS file in the same directory.\n--\n\nrequire 'torch'\nrequire 'cutorch'\nrequire 'nn'\nrequire 'cunn'\nrequire 'cudnn'\nrequire 'nngraph'\n\nrequire 'xlua'\n\nlocal framework = require 'train.rl_framework.infra.framework'\nlocal rl = require 'train.rl_framework.infra.env'\nlocal pl = require 'pl.import_into'()\n\nrequire 'train.rl_framework.infra.bundle'\nrequire 'train.rl_framework.infra.agent'\n\nlocal tnt = require 'torchnet'\n\n-- cutorch.setDevice(3)\n\n-- Build simple models.\nfunction build_policy_model(opt)\n    local network_maker = require('train.rl_framework.examples.go.models.' .. opt.model_name)\n    local network, crit, outputdim, monitor_list = network_maker({1, 25, 19, 19}, opt)\n    return network:cuda(), crit:cuda()\nend\n\nlocal opt = pl.lapp[[\n    --actor          (default \"policy\")\n    --sampling       (default \"replay\")\n    --optim          (default \"supervised\")\n    --loss           (default 'policy')\n    --alpha          (default 0.1)\n    --nthread        (default 8)\n    --batchsize      (default 256)\n    --num_forward_models  (default 4096)       Number of forward models.\n    --progress                                 Whether to print the progress\n    --epoch_size          (default 12800)      Epoch size\n    --epoch_size_test     (default 128000)      Epoch size for test.\n    --data_augmentation                        Whether to use data_augmentation\n\n    --nGPU                (default 1)          Number of GPUs to use.\n    --nstep               (default 3)          Number of steps.\n    --model_name          (default 'model-12-parallel-384-n-output-bn')\n    --datasource          (default 'kgs')\n    --feature_type        (default 'extended')\n]]\n\nopt.userank = true\nopt.intermediate_step = opt.epoch_size / opt.batchsize / 10\nprint(pl.pretty.write(opt))\n\nlocal model, crits = build_policy_model(opt)\n\nlocal bundle = rl.Bundle{\n    models = {\n        policy = model,\n    },\n    crits = crits\n}\n\nlocal agent = rl.Agent{\n    bundle = bundle,\n    opt = opt\n}\n\nlocal stats = {\n    sgf_idx = { },\n    board_freq = torch.FloatTensor(19, 19):zero(),\n    ply = { },\n    count = 0\n}\n\nlocal callbacks = {\n    thread_init = function()\n       require 'train.rl_framework.examples.go.ParallelCriterion2'\n    end,\n    forward_model_init = function(partition)\n        local tnt = require 'torchnet'\n        return tnt.IndexedDataset{\n            fields = { opt.datasource .. \"_\" .. partition },\n            path = './dataset'\n        }\n    end,\n    forward_model_generator = function(dataset, partition)\n        local fm_go = require 'train.rl_framework.examples.go.fm_go'\n        return fm_go.FMGo(dataset, partition, opt)\n    end,\n    onSample = function(state)\n        -- Compute the stats.\n        --[[\n        if state.signature == 'train' then return end\n        for i = 1, state.sample.sgf_idx:size(1) do\n            local idx = state.sample.sgf_idx[i]\n            if stats.sgf_idx[idx] == nil then stats.sgf_idx[idx] = 0 end\n            stats.sgf_idx[idx] = stats.sgf_idx[idx] + 1\n\n            local xy = state.sample.xy[i]\n            local x = xy[1]\n            local y = xy[2]\n\n            stats.board_freq[x][y] = stats.board_freq[x][y] + 1\n            stats.count = stats.count + 1\n\n            local ply = state.sample.ply[i]\n            if stats.ply[ply] == nil then stats.ply[ply] = 0 end\n            stats.ply[ply] = stats.ply[ply] + 1\n        end\n\n        if stats.count % (2000 * opt.batchsize) == 0 then\n            print(stats.board_freq:clone():mul(1.0 / stats.count))\n            require 'fb.debugger'.enter()\n        end\n        ]]\n    end,\n    --[[\n    onStartEpoch = function()\n        print(\"In onStartEpoch\")\n    end,\n    onStart = function()\n        print(\"In onStart\")\n    end,\n    onSample = function()\n        print(\"In onSample\")\n    end,\n    onUpdate = function()\n        print(\"In onUpdate\")\n    end,\n    onEndEpoch = function()\n        print(\"In onEndEpoch\")\n    end\n    ]]\n}\n\n-- callbacks:\n--    forward_model_generator\n--    checkpoint_filename(state, err): Get checkpoint filename\n--    tune_lr(state): tune the learning rate\n--    print(log, state): print the current state\n--      (All the remaining functions take state as input)\n--    onStartEpoch\n--    onStart\n--    onSample\n--    onUpdate\n-- For now just shortcut the trainloss/testloss.\nframework.run_rl(agent, callbacks, opt)\n"
        },
        {
          "name": "train.sh",
          "type": "blob",
          "size": 0.4345703125,
          "content": "#\n# Copyright (c) 2016-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree. An additional grant\n# of patent rights can be found in the PATENTS file in the same directory.\n#\n\n#!/bin/bash -e\nth train.lua --nGPU 1 --datasource kgs --num_forward_models 2048 --nthread 4 --alpha 0.05 --epoch_size 128000 --data_augmentation\n"
        },
        {
          "name": "train",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsumego",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}