{
  "metadata": {
    "timestamp": 1736710019237,
    "page": 621,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "amadvance/snapraid",
      "stars": 2065,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".drone.yml",
          "type": "blob",
          "size": 0.2509765625,
          "content": "# Build configuration for https://www.tea-ci.org\n\nbuild:\n  image: teaci/msys$$arch\n  shell: mingw$$arch\n  pull: true\n  commands:\n    - autoreconf -i\n    - ./configure --enable-warning-as-error\n    - make\n    - make check\n\nmatrix:\n  arch:\n    - 64\n    - 32\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5234375,
          "content": "# archives\n*.zip\n*.tar.gz\n*.tgz\n\n# backups\n*~\n\n# logs\n*.log\nstream*.bin\n\n# upload\nmakepush.sh\nmakemount.sh\nmakeumount.sh\n\n# autotools\nMakefile\nMakefile.in\ncompile\naclocal.m4\nautom4te.cache/\nconfig.guess\nconfig.h\nconfig.h.in\nconfig.log\nconfig.status\nconfig.sub\nconfigure\ninstall-sh\nmissing\nstamp-h1\n.dirstamp\n\n# objects\nsnapraid\nmktest\nmkstream\n*.exe\n*.o\n*.gcda\n*.gcno\n*.gcov\n\n# projects\n*.dst\n*.epr\n*.geany\n\n# AFL\nmakeafl.sh\nafl/\nafl_corpus/\n\n# specific\ncov/\ncontrib/\npaper/\nkernel/\nobj/\nbench/\nsupport/\narchive/\nwww/\nwiki/\nbeta/\nftp/\n\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.5966796875,
          "content": "SnapRAID AUTHORS\n================\n\nThe author of SnapRAID is Andrea Mazzoleni.\n\nYou can contact me sending an email at:\n\n    amadvance@gmail.com\n\nPlease don't send support requests at this address, but use the\nSnapRAID Forum.\n\n\nACKNOWLEDGMENTS\n===============\n\nSpecial thanks to Leifi, the king of the Forum!\n\nThanks for the testing, suggestions and bug reports to klbl,\njwill42, tholiin, uhclem, reardonia, Jens, rubylaser and the\nwhole SnapRAID Forum.\n\nThanks to Maxim Tikhonov for making the Ubuntu packages.\n\nAlso thanks for the support to Ben_in_COSprings, Darin, micksh, RamanRB\nand the whole AVS Forum.\n\n"
        },
        {
          "name": "CHECK",
          "type": "blob",
          "size": 0.7470703125,
          "content": "SnapRAID CHECK\n==============\n\nThe regression test of SnapRAID is run using the command:\n\n\tmake check\n\nYou can also run the regression test in valgrind with:\n\n\t./configure --enable-valgrind\n\tmake check\n\nTo run a coverage test you should use:\n\n\t./configure --enable-coverage\n\tmake lcov_reset\n\tmake check\n\tmake lcov_capture\n\tmake lcov_html\n\nand open the file ./cov/index.html in your browser to see the results.\n\nPlease note that in the coverage analysis we exclude the handling of all\nthe error conditions that result in an immediate termination of the program.\nYou can recognize this excluded code because it's enclosed between\nthe LCOV_EXCL_START and LCOV_EXCL_STOP keywords.\n\nTo test with the clang static analyzer use:\n\n\tscan-build ./configure\n\tscan-build make\n\n"
        },
        {
          "name": "CHECKSUMS",
          "type": "blob",
          "size": 13.5302734375,
          "content": "sha256\n761eaf08937139a89d79d1ffbad42508f270d3aa603eac50475f7449ae278dcf  snapraid-1.2.tar.gz\n10e64f2629eb469a32eabc84e1f9a59593cbbf61282ead964b622af1ec0c4681  snapraid-1.2-windows-x64.zip\n27da3c54fe408ab53c6e2b4b398ae46328a2dbc701b785a55bf76ffed6046eb2  snapraid-1.2-windows-x86.zip\n2e6aaa660a5a74665044ead40959006632dcd1ee1e21091e6260f5b845304f96  snapraid-1.3.tar.gz\n0d0cefeabf8230b66414a8731ceb52a0adaaedb5be0fa11d07a6be44e9f2fb6d  snapraid-1.3-windows-x64.zip\n4358802fb022ba5e2f8d1323ce963155adccea99069abd5f901eadf1411b6366  snapraid-1.3-windows-x86.zip\n157b0ca7cfa9cba43cf995b4c32b0b206e299f5ffff58062069bb6ec41c77c0d  snapraid-1.4.tar.gz\n5b210dd4667369799fd02757e8efc4d733c704cfe72319d297d4ab969b80c962  snapraid-1.4-windows-x64.zip\n77047e1fa1bfcb12db7d5c3167e7dbbbb1718909f1003fd185cdf219cd952427  snapraid-1.4-windows-x86.zip\nf460bf9aee4b02b6c08f19b0caa2928b075c73ca4cfc41c7f426f015f67cffbc  snapraid-1.5.tar.gz\nd19262bdf9e572fa80285887886a8fbe9a7b9bd4159496f112d383bf9b4db797  snapraid-1.5-windows-x64.zip\n28816c0cde4cf8ce8e91a585eb9aab5552344a331237b6a2afd50396685814fd  snapraid-1.5-windows-x86.zip\ne0684d036cfd6b9fcdf23792c057fec4f4531d25aab7c677ff35e7a8be07b098  snapraid-1.6.tar.gz\n9c13f99d67aafe43f5c540d97d0f6b40289856f547b8f33ee8aee27b270a7fae  snapraid-1.6-windows-x64.zip\nae94db99a06068e17134ce69009492c4bfd8f6e54ea1848df105bb89f9f7ba28  snapraid-1.6-windows-x86.zip\n1cf7a8f58533d6bc717ff6d396114ec4ed61eb66ff2756370e4cc730ee4edc4d  snapraid-1.7.tar.gz\n0cb49c676f3f9fd1f0fc938513b6dcaaf15390b64098e17cff5066667e4d01d5  snapraid-1.7-windows-x64.zip\n44bc6b947ba845a89ecf812b82e751dca2dd4a6143ff06391c3b8b285a7ed3a2  snapraid-1.7-windows-x86.zip\nda1c09f0139e683c03942c2b9489c2d9b989c59d147f7c28258c8e58c3938037  snapraid-1.8.tar.gz\nfca7352fece5d7243af45ba8c5a07e08cc0e24d226468a619b9d86a3767e7099  snapraid-1.8-windows-x64.zip\n35520cab33b3b3f9efc4ba4d7a968a7d7d49637b5e256921e0091424f5dd60ee  snapraid-1.8-windows-x86.zip\n504c3fe288b66c84bc65173979e7cede06370ca2a5f02ef3ca200c2fc8b09ea9  snapraid-1.9.tar.gz\nddba596451a05c61b20ce1e82c8039ba3c13be67b7469f2c75c6b0b7b4b18356  snapraid-1.9-windows-x64.zip\n5a0dd3cdc0edf69cd03d926b594e41f5ca7e07564ef1cb3d6ac417c76f16b77b  snapraid-1.9-windows-x86.zip\n5e4eee49748faf966ebcc1cb3b9127ad7047542baf8952c6e0a9cbb32dac4d88  snapraid-1.10.tar.gz\n7812a37f8767beb9542def762b2e131caafffc1b1b21f1d9422030e93e367f12  snapraid-1.10-windows-x64.zip\nb899784498050c5d41752464bd31cec7de9e77ec865f55e2192fea75f52787d5  snapraid-1.10-windows-x86.zip\nc349c4c25e3cb794d908dc75422ca9b04b44162c295b41d4ea55081af1a3451f  snapraid-1.11.tar.gz\n47e8f09f3d012d0a34d71e6ece7b9171c82af27766cca709fc9bbd104328cc7d  snapraid-1.11-windows-x64.zip\n8a8b0562192732022ae1732f5ae48e5f8745e217f73683123b2822e316918204  snapraid-1.11-windows-x86.zip\nbd89ef0ddc3909c50fecc30da1d5d70342b92952b5d3ae0a2e31a66c8755dc8a  snapraid-1.12.tar.gz\n290c5ac8667ca7ada12a0d550e06c9fbc5f4e29abb5af0ef105eba38fb274c5d  snapraid-1.12-windows-x64.zip\n8cbc4e447f2152c3e76025cdbad03c54e7c85e004bb535f9dc7dde9b86605fe8  snapraid-1.12-windows-x86.zip\n7c824abf6cacd8b847467916a1b4c28f48161e4b9f9b6c2f607c4de473a663c9  snapraid-1.13.tar.gz\n22f6e9bf1dff5df4abff29b7cf364dc029959991dc158257f2a283721581abf4  snapraid-1.13-windows-x64.zip\n9801b1a0331c461ce70c7824e2624dd2866358d61d923ff854253f340985947e  snapraid-1.13-windows-x86.zip\n68a48c961fcc15ffcfb86e4c5ea2371d562252e61f58fe87a529f479e81fb2bb  snapraid-2.0.tar.gz\na2e1fb0610c8bfc57d73da1dbd276c238a032bf9b4c73a41977fcc57e773fff4  snapraid-2.0-windows-x64.zip\n0fc3bee4d107bcd5e55a1c5bb81015558d9791d66a44f9ae2e3723906c3199df  snapraid-2.0-windows-x86.zip\n788377f579486c2b16548563a3d25f385594ae4276f1328c8f82cd0d5e0af9b6  snapraid-2.1.tar.gz\n6e32fc0603136c4d3ad60fc1f04e6c919b7e7159267750ebf0dd8ad20ee6b442  snapraid-2.1-windows-x64.zip\nd2813aec37f96506bcf98f2b5196204f065786731a5874f495f18f58fe87064b  snapraid-2.1-windows-x86.zip\nfaf9545f0a66865e754ad587731483becf895a954c22e023501a2f28af44682a  snapraid-2.2.tar.gz\n2ea4b610c8d99f3766f6d2c89be5eafd1e16a17454d9df02d982fa184b517744  snapraid-2.2-windows-x64.zip\ne2dac0663546f06ac3e679a93ba5de9e7de91563e09c1396fd367c5b16e011be  snapraid-2.2-windows-x86.zip\n68e610d67087c02715289934472c5fa3d7aa77c8085298ba54f02f26f7d396ad  snapraid-3.0.tar.gz\nca7943f270a940554ddbd8c09698228120da2bac5b6d78486a34f5b301e24f47  snapraid-3.0-windows-x64.zip\nc6a47d8bf544e69d9b301fe525d193c8faa8ef056c78f8a0649637d2e99b93c6  snapraid-3.0-windows-x86.zip\nb5b22350c221e145c3347426f186f188f5d64616d03f196b35d75db564e78f7f  snapraid-3.1.tar.gz\n6d275cf3d579a5050e936879db85acbcb34b6522b36d5bc81b2f3764ca011c87  snapraid-3.1-windows-x64.zip\n66f5967e559368193aef7b13a1c641694ca62f64e4b5749a7e2709aac6dc5759  snapraid-3.1-windows-x86.zip\n99617ef379c4e46cc4366f2b3baced653f786ef08a40d74dca23a11a9240b096  snapraid-3.2.tar.gz\n94d121d8cc0b9ab7ef1648e42edbfe1cfc602231c86a086d21984177da566f77  snapraid-3.2-windows-x64.zip\n1d1ed69d3eab8247a7444e603ba09a56ec77979d3865489b2d8a7fc5db65848f  snapraid-3.2-windows-x86.zip\nc5a6e77613fab5cecb1aa55750f2045934d9374ba70471b6d35296c34509e5a9  snapraid-4.0.tar.gz\na59c911fef0d4d3e95d5521c6a180b40c455870be3ee9dbb5991b05b2cdd2f05  snapraid-4.0-windows-x64.zip\n97ec4ae7b6ec6cd05e0c2ae835def526d12c35fa3546d27bd93978d978cd62aa  snapraid-4.0-windows-x86.zip\n7f5a37be7b8b78056d6602cef8ef702fe4f0d0b6ac3fa4bcefeb70743425b6fe  snapraid-4.2.tar.gz\nbf7861274639f2e9e5819ec3a89eed911cd79a212824fe3a6b64e45c0d1e2cc4  snapraid-4.2-windows-x64.zip\nc7d9330be1936d7d7b07c51668fc8d3f88ce270e9e74945288d75eda2405a377  snapraid-4.2-windows-x86.zip\n09f1ebfb5c45680c50651e94287d59e58260c46aee922d8864fb06fd591740e8  snapraid-4.3.tar.gz\nba1008452ff679c1e144206c73a81e4cb2689006c9ce37b60ceab45ef4c99dda  snapraid-4.3-windows-x64.zip\n23b21e162d5d18a4f68c8635e1f111fddb91d380514d8ddab9040b18a49d9994  snapraid-4.3-windows-x86.zip\naa22ea2e01a8db45ba43a3139d763cb2d12548de96f957a1ea1b5f80f04a4d83  snapraid-4.4.tar.gz\nca68dd88741290a6ee6494a9186b58766cab2b838f4a55ab23921b524b15ee82  snapraid-4.4-windows-x64.zip\n3d9cccc2080d1435e7e747c7eeeffc85e0b68ad45b390c236de321b8aca44d46  snapraid-4.4-windows-x86.zip\nba43b0534197c6064b7a171321762be2ac2c848d4849c578007cc65aa963bed5  snapraid-5.1.tar.gz\n54a31c5c979b9c3ad481cd918a48e220f11ce04de0a8ec6f41a957af7ba259fc  snapraid-5.1-windows-x64.zip\n6758966b3a120bf5b97f21748f649b2f147800b10377a0ee69d922be318ee399  snapraid-5.1-windows-x86.zip\neab07c21201eceb4204f8039f021ff0032515719aa5e640c330da45dd8b8e7a3  snapraid-5.2.tar.gz\n554cc7be40fff0a0f249522bda957dfba229066e81102624b979213666b1aaae  snapraid-5.2-windows-x64.zip\n44f909157ba89d769af59e971c71b15bd38dfd62359b2e2c7eeb8cef0f9dc081  snapraid-5.2-windows-x86.zip\n81e00fced6bb040d49aa6e3dc6fda97f22bf677d00f6c0c490e312c23222b421  snapraid-5.3.tar.gz\n2627b2491b4d432a311cca1c924f4b40cef7a64c930b7e5eca55b3b9a8a62e61  snapraid-5.3-windows-x64.zip\nd1019dc29922d4787c3fd9d4222dfc3b84a6a2e0c6b2db298340747238d8fb46  snapraid-5.3-windows-x86.zip\nd836200058b98f189e576ad5619d4ffcd867e5dc8d2a4b775bff07d4f201c938  snapraid-6.0.tar.gz\n06f2e56bc30c89e4a1561ec32cf72b240765456505f17da539af4b4338a6b12c  snapraid-6.0-windows-x64.zip\n6ae0a3fa973a28c64489bc28d7a7f4b354d3fc6703bcb83ef661cf76e994b34d  snapraid-6.0-windows-x86.zip\n1709c09b0e0699ce38452be7340c279c561b91433a6810600386bb9d8c0491e3  snapraid-6.1.tar.gz\n40d995a88a23d799a32eba15f64c983a012771c527208cec2ad98787a45ef4c3  snapraid-6.1-windows-x64.zip\nf8e09b3300717d1f9ee9b69bb132038642839c19a15a1f47810f3de10ad559eb  snapraid-6.1-windows-x86.zip\nb182328227ed9b87b01037f7d005d38a6e3cfb0f675e919978c696dcc6246787  snapraid-6.2.tar.gz\n72ccfbf6548b83bd6f229d4862763a4e4cf6001c94d9ee84bf7b2a379a9a7743  snapraid-6.2-windows-x64.zip\n55f1bc131f9148ed2b52e0e252c7155e50f5b4383fe82cd74ec2edace2ddc9c6  snapraid-6.2-windows-x86.zip\n1f1961385b865bff5282bd16aff76f372f3ed19b685ef7a3b27d907a499385d2  snapraid-6.3.tar.gz\nbb55d74d6b3cb08b21f70fded8b706ec1e790222cb265524cb2dc5499ec73391  snapraid-6.3-windows-x64.zip\n3e4fa161ea26b8472dbbbfb4e61b34aca904ff9621f5afafbc83280d334a89b2  snapraid-6.3-windows-x86.zip\n7cad74422d45c8a05435a03d3228a2d621a962fb866caedde0497f180bd9f60d  snapraid-6.4.tar.gz\n59471b49733c36acfbdeb16b28fbee063c4582abab2c9168abc7abc75610f9fc  snapraid-6.4-windows-x64.zip\nabe80b7c019980da2af5e07e0ea8b1ac1e1cdb2eb663483c07dab6ad6bd15985  snapraid-6.4-windows-x86.zip\n554684520204d45f8b7cee9abb0269dd2bdba272cb0130c3b26062bea551a791  snapraid-7.0.tar.gz\na617b435f97cd746b4076d00cde68f947cca21adaca6ce603fec4676827b7ae9  snapraid-7.0-windows-x64.zip\n301af727522912184f6d4a8290757950fed4577da625d9951809ff69f50b6e4f  snapraid-7.0-windows-x86.zip\ndd9005b6d7ea701e4aa0f854a0e34dabe68d7765b75f12fc6b3e1fda4d5c2cef  snapraid-7.1.tar.gz\n0d3a9625a6156ffe9b9eb4703aa2fc63141c51b83c69e98fbecce5430b1980e4  snapraid-7.1-windows-x64.zip\ne0afdb753ae6a3bb3484a1bfe1cf01b9178010a8c11604e4bbc44b2f83884842  snapraid-7.1-windows-x86.zip\na912628dd003b3d70f2736629d48eeb738e7d27cba74014001dcc46fce3bc3be  snapraid-8.0.tar.gz\n9c2158fb9e2c08570f6a03f5cea7ab68d2a424adb1f42bb6b3d970ba9dc8a15d  snapraid-8.0-windows-x64.zip\n3c2c4357450564010d80bbd2cb1d5583281885b32cf659a0cf3dadce4766e167  snapraid-8.0-windows-x86.zip\n6bf89a1319ac3403958cd2c98a9c6102728c0070cfa1aedd90c4561d93c54e5d  snapraid-8.1.tar.gz\n83ad064d5c3938fdacb989983c6b0fafa0932c236dc4baa93512f3c97fa019bc  snapraid-8.1-windows-x64.zip\n25e5cffade3667348a242f44fb23719328d578010d79bb28a5cab662fc75916b  snapraid-8.1-windows-x86.zip\ndff5f4e9a41865313ddd60b6379d5c0b308880d33f197934f98313e8241c6274  snapraid-9.0.tar.gz\n624c3aa6cb0bdb7c90566545ca831721ea5e543c843418a00ff4de753af07953  snapraid-9.0-windows-x64.zip\n6ace6dafacd902bdf058e42c7d39591e327aef1bb19a94b05496f0f14aca8e1e  snapraid-9.0-windows-x86.zip\n397fdd7709e941e372b37025457794f8b0ce63a5a8455703ad17770cbccd3823  snapraid-9.1.tar.gz\n4c56b2c5d556a3685239e444cb58ce84c398e86a173be34ff7cfa3a2b31a5b34  snapraid-9.1-windows-x64.zip\n515ca2078cdcb58b59afc005770a06648d8f17adb27afa5751ca6f68de2c05c6  snapraid-9.1-windows-x86.zip\n77de90645a5debd177995d7897d58277b7c778632f0d9852740f5670f3321176  snapraid-9.2.tar.gz\n483d96dc8937f6df48b7f454f8ec8f7ee51b5e973fa8f004e59048d60525d2fb  snapraid-9.2-windows-x64.zip\n99c950ff31c73cc55a1b83e4dfdbb6e1717420af54721f8bbe813fbbba484e04  snapraid-9.2-windows-x86.zip\n61c4f3ce8bd5ebb1178fe76ab5933e90c4cead6dba31669f11e262d258c2b2ba  snapraid-9.3.tar.gz\n178e743b6246265f936e63ab47fe2a942bf414992cd752478854b81bdf264913  snapraid-9.3-windows-x64.zip\n2cb888833cdddc82431822f818de0cfd046ceda5a7aa17bf9c410b6147ed7e20  snapraid-9.3-windows-x86.zip\nf7dcf19480256fc2c1db9ab976aa12f786e76da6044cc397f0451524e8031ad6  snapraid-10.0.tar.gz\na3b4b2563f44f17072bb20963d61aae53d9f0e6b9446509fee76bbfa9b51fd23  snapraid-10.0-windows-x64.zip\n95a1859163beb8c8d02208b27ecf5298068972498c7e2b99b488693ad5f8f133  snapraid-10.0-windows-x86.zip\n30a72b8853ea750128c96784b73bb55f7faa4b16367b2e03f40c1f78515c5771  snapraid-11.0.tar.gz\naf6f24adb81008e7ccdb7a8f2c46d1187542bd290294563de90acf5d817d772d  snapraid-11.0-windows-x64.zip\nfedc7591c8de0ce2775482e6b18033cdaca62078a0a16d45421d5fb5dd5615d6  snapraid-11.0-windows-x86.zip\nb9acafeb6cece61fd426f08362b596ba89eea0564231955b82156fd09c0e6884  snapraid-11.1.tar.gz\n6468d1a55a9a8043eae3c7c292c908c0fbd1974af3f175df23d39dd4748d9bf9  snapraid-11.1-windows-x64.zip\ne70929b44ed88701b542abbccadc57dd89469f58cf7d6ca0bf80ce706d854553  snapraid-11.1-windows-x86.zip\n735cdeb7656ac48cbb0b4a89a203dd566505071e465d5effbcc56bcb8fd3a0d7  snapraid-11.2.tar.gz\n025faabb6390b6af600034523e5988e14160015b835541d8427475ca7fa52057  snapraid-11.2-windows-x64.zip\nde16e2083054f34e1206b552bd05c64218c0dffcf787d716c6639f8728457d20  snapraid-11.2-windows-x86.zip\nd35ad92157936db3411e2cf7325665fc59e2d159204f9424895cfa9f33122af1  snapraid-11.3.tar.gz\nb764a3341783d4694242412e0fca7c112e44e84a4a89a7c27b0f74a836a84baf  snapraid-11.3-windows-x64.zip\nf8e51bee80ae0223f402afe68f5192f1036434bab816c42333bf2e5f9fbc82a2  snapraid-11.3-windows-x86.zip\n1de47b8277c7dd9c339396efdd2b12a865ff82fdf6ab47cb945f2e21717451c9  snapraid-11.4.tar.gz\n0734ca7a521ba7c05eea6898f481ca812d2a2d78da4545f7990cd27e6381dc75  snapraid-11.4-windows-x64.zip\n061075df60b584ade5c76551ca54d76726441421576a544cdfd621acb23d55e1  snapraid-11.4-windows-x86.zip\n1f5267261bdbcf4d48b9359ce67184df11905590739140f740327fb73bcecafa  snapraid-11.5.tar.gz\ne18f6b825a25b71947c2c41a315440a3d394de348afca80e2ab13a525bbb8a2b  snapraid-11.5-windows-x64.zip\na66753201e55c115699df78f89dd562c1b71e876aba5be35fcaf507bfe1e9e52  snapraid-11.5-windows-x86.zip\nf030a3830449a78d10af41320da0be21c60f88dc8d328ebd056e0eb7596161cf  snapraid-11.6.tar.gz\n8a3b8fd240285b5abf62c3ce222a5c674b475a83b3c48a40e457d34bfbcd1744  snapraid-11.6-windows-x64.zip\ne8e9140423552cbccbe9a162100a830cd7d2e29bae0893cca9f5bd1943393508  snapraid-11.6-windows-x86.zip\nf07652261e9821a5adfbfa8dad3350aae3e7c285f42a6bd7d96a854e5bc56dda  snapraid-12.0.tar.gz\na9cd1e30042b09ecc42b508955a1c1144b446a0399c83ecfb78b5455d528938c  snapraid-12.0-windows-x64.zip\na037d16bb9d226da2c88df00e410f9e637f1acb6153ac078c9a3805e721282a6  snapraid-12.0-windows-x86.zip\n49337d9bafa96c2beac0125463bd22622be2fc00f3b4dee7e4b0e864d2a49661  snapraid-12.1.tar.gz\n23196a373b4c7a327a207f019ea833f888977f6e48743b0060706f67fbb1c13e  snapraid-12.1-windows-x64.zip\n488e3b57323fd55c1bccc14a051d4048a1a7b7b5d6440ece30b5161bda9f5498  snapraid-12.1-windows-x86.zip\n9d30993aef7fd390369dcaf422ac35f3990e8c91f0fb26151f5b84ccb73d3e01  snapraid-12.2.tar.gz\n1f08ee889b4e0d221267ad011cfbd6f3ebdf94a8809ba2b2d79dbb0751a7c06a  snapraid-12.2-windows-x64.zip\ndaaccc71a2b2cf3d16d021d0c1f7db20e49fbaebea5cda6c301bf41bce8df073  snapraid-12.2-windows-x86.zip\n1f27aba6e5db3929474da9c472fc4a3bc51d4a83aa5385af6b09afc9f68d6d44  snapraid-12.3.tar.gz\nffdd430f5f1ad8fba5bd0707bd860b0d3dca55cb8aeca633804638d64b5f0550  snapraid-12.3-windows-x64.zip\n579d24cc607d0668e6f17c905eb75e409086a58f466c6fae2943c8e2fc8de039  snapraid-12.3-windows-x86.zip\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "HISTORY",
          "type": "blob",
          "size": 37.107421875,
          "content": "SnapRAID HISTORY\n================\n\n12.3 2024/01\n============\n * Fix potential integer overflow when computing the completion percentage.\n   No effect on the functionality.\n * Documentation improvements.\n\n12.2 2022/08\n============\n * Fix build issue with GLIBC 2.36\n\n12.1 2022/01\n============\n * Reduce stack usage to work in environments with limited stack size, like\n   MUSL.\n * Increase the default disk cache from 8 MiB to 16 MiB.\n\n12.0 2021/12\n============\n * Parallel disk scanning. It's always enabled but it doesn't cover the -m\n   option that still process disks sequentially.\n\n11.6 2021/10\n============\n * The 'fix' and 'check' command with the -e option now process the whole\n   files that have bad blocks, and not only the block marked bad.\n   This allows to restore the timestamp and to print the paths of\n   processed files and the final state of the files like 'recovered' or\n   'unrecovered'. The previous behaviour is available with the -b,\n   --filter-block-error option.\n * Improved the speed of the filtering in 'fix' and 'check'. This phase\n   happens after the \"Selecting...\" message.  [UhClem]\n\n11.5 2020/05\n============\n * Removed the default -march=native to allow to deploy in any machine.\n * Fixed typos [Andrea Gelmini]\n\n11.4 2020/05\n============\n * Fix build errors due new gcc 10 default for -fno-common.\n * In fixing, if a parity is filtered out, don't attempt to recover its size,\n   and proceed without it if missing.\n * Avoid unnecessary parity read when fixing the parity itself.\n   This improves the 'fix' speed when a parity file is completely missing.\n * Removed a build warning about major/minor defined now in sys/sysmacros.h.\n\n11.3 2018/11\n============\n * Fixed handing of Linux devices that have multiple slaves. This affects\n   the smart/list/devices/down commands [Valentin Hilbig].\n * The 'list' command in verbose mode prints the full nanosecond\n   timestamp precision.\n * After writing content files also sync their directory.\n * Fix a invalid time computation that could result in future scrub dates.\n   Such dates are fixed automatically at the next scrub or sync.\n\n11.2 2017/12\n============\n * Fixed recognition of NTFS hardlinks. They behave differently than\n   standard Unix hardlinks and this could result in SnapRAID reporting\n   internal inconsistency errors for detecting links to the same file\n   with different metadata attributes.\n * More efficient 'pool' command that updates only the links\n   that need to be updated. This ensures that no change is\n   done, avoiding to trigger a directory rescan of other programs.\n * In Linux use by default the advise \"discard\" mode instead of \"flush\".\n   This avoids to swap-out the other process memory, leaving the system\n   more responsive.\n * Changed the fallocate() use to work better with Btrfs with parity disks.\n * Changed the --test-io-stats screen to print the file name in process\n   for each disk.\n\n11.1 2017/05\n============\n * Fixed the check command to correctly ignore errors on unused parity.\n   This was broken in version 9.0.\n * Allow increasing the number of parity splits of existing parity.\n * Fixed quoting when printing in Linux. This fixes the UTF-8 screen\n   output. Windows version was not affected.\n * Fixed recognition of 'hashsize' in the configuration file.\n   The previous incorrect 'hash_size' is still supported for backward\n   compatibility.\n * Fixed building in platforms that don't provide major/minor definitions\n   in sys/types.h.\n * When creating 'pool' symbolic links, set their time as the linked files.\n * Added support for the Windows 10 symbolic link unprivileged creation,\n   using SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE.\n * Windows binaries built with gcc 4.9.4 using the MXE cross compiler at\n   commit ae56efa2b23a793b0146508bfef33027cdb09fd2 with targets\n   i686-w64-mingw32 and x86_64-w64-mingw32 and optimization -O2.\n\n11.0 2016/11\n============\n * Added support for splitting the parity in multiple partitions. You\n   can now specify multiple files for a single parity. As soon a file\n   cannot grow anymore, the next one starts growing.\n   In the configuration file, just put more files in the same 'parity'\n   line, separated by , (comma).\n   Note that if this feature is used, the saved content file won't be\n   read by older SnapRAID versions.\n   In Windows, 256 MB are left free in each disk to avoid the warning\n   about full disks.\n * Added a new 'hashsize' configuration option. It could be useful in\n   systems with low memory, to reduce the memory usage.\n   Note that if this feature is used, the saved content file won't be\n   read by older SnapRAID versions.\n * In Linux added the missing support for Btrfs file-systems. Note that\n   to have full support you need also the 'libblkid' library, otherwise\n   you won't get the UUIDs.\n * In screen messages don't print the disk directory in file path. You\n   can control the format with the test option:\n   --test-fmt file|disk|path.\n * In Windows allows to use the escape char '^' to handle file patterns\n   containing real characters matching the globbing '*?[]' ones. In Unix\n   it was already possible to do the same escaping with '\\'.\n * Added a new -R, --force-realloc option to reallocate all the\n   parity information keeping the precomputed hash.\n   This is the previous -F, --force-full that instead now maintains the\n   same parity organization and just recomputes it.\n * Added test options for selecting the file advise mode to use:\n   --test-io-advise-none for standard mode\n   --test-io-advise-sequential advise sequential access (Linux/Windows)\n   --test-io-advise-flush flush cache after every operation (Linux)\n   --test-io-advise-flush-window flush cache every 8 MB (Linux)\n   --test-io-advise-discard discard cache after every operation (Linux)\n   --test-io-advise-discard-window discard cache every 8 MB (Linux)\n   --test-io-advise-direct use direct/unbuffered mode (Linux/Windows)\n   The new default mode is 'flush' in Linux (before it was 'sequential'),\n   and 'sequential' in Windows (like before).\n * For Seagate SMR (Shingled Magnetic Recording) ignore the SMART\n   attribute Command_Timeout 188 as not reliable.\n * Fixed running in Windows platforms that miss the RtlGenRandom()\n   function.\n * Added the --test-io-cache=1 option to disable the multi-thread IO\n   mode.\n\n10.0 2016/02\n============\n * Boosts the speed of the 'sync' and 'scrub' commands with a new\n   multi-thread implementation. It uses one thread for each disk,\n   dedicated exclusively to read-ahead data and parity and to\n   write-behind parity. This maximizes the data throughput keeping\n   disks always busy.\n   You can control the number of blocks to cache with the option\n   --test-io-cache=NUMBER, where the number is between 3 and 128.\n   The default is 8 MiB of blocks.\n   You can show run-time stats during the process with the\n   --test-io-stats option. You will see a graph with the number of\n   cached blocks, and a graph with the wait time percentage for all the\n   disks and computations.\n * The -h, --pre-hash command, saves the content file only after having\n   verified all the hashes. This allows recovering of moved files in\n   case a silent error is found during the hash verification check.\n * Allows to use the -d, --filter-disk option in the 'up' and 'down'\n   commands.\n * Allows to run the 'smart' command without a configuration file.\n   In such case it operates on all the disks of the machine.\n * In the configuration file 'data' is now a synonymous of 'disk'.\n * Adds the 'touch' command intended to arbitrarily set all the zero\n   sub-second timestamps. This improves the SnapRAID capabilities to\n   identify files. The 'status' command recommends to run 'touch' if\n   required.\n * Restores the functionality of the -D, --force-device option when used\n   to workaround the use of the same disk for two logical data drives\n   when running the 'fix' command.\n * Uses a correct shell quoting in the example commands that involve\n   files.\n * The minimum Windows version supported is now Windows Vista. This is\n   required to use the native Windows thread support for the new\n   multi-thread implementation. If you need to run on Windows XP, you\n   have to stick on SnapRAID 9.x.\n\n9.3 2016/01\n===========\n * Fixes an invalid assumption in the copy detection mechanism that\n   could result in an internal inconsistency, and with the impossibility\n   to run the 'sync' and 'diff' commands.\n   This was triggered by a very specific pattern of identical files.\n   At least three of them, with one already in the parity, and at a\n   higher disk number than the others that should be instead new ones.\n   This had no bad effect, if not preventing the 'sync' command to run.\n   A workaround was to just run 'sync' one time with the -N,\n   --force-nocopy option to disable the copy detection.\n * Restored the -O2 optimization option for Windows binaries, as -Og has\n   a too big performance penalty.\n\n9.2 2016/01\n===========\n * Fixes support for symlinks pointing to an empty target. Before they\n   were only partially supported, and their presence could result in a\n   content file not readable.\n   This also disables multi-thread content write, as this was the issue\n   we tried to detect with this feature, and it doesn't provide a\n   performance advantage. Content verification is instead still multi\n   thread.\n * Autorename disks using the matching UUID. To rename a disk you can\n   now change directly the name in the configuration file, and run a\n   'sync' command.\n * Improves the physical offset ordering for the Btrfs file-system,\n   correctly detecting files that have not a physical offset, for\n   whatever reason.\n * Adds UUID support to Btrfs file-systems. It's present only if the\n   'libblkid' development library is available on the system.\n   Usually this requires to install the libblkid-dev or libblkid-devel\n   package.\n * Added a new --no-warnings option to disable some repetitive warnings\n   that could be annoying to power users.\n * Improves the error reporting, printing a complete stack trace, that\n   can be used to track down bugs more easily.\n   For this reason the Windows binaries are now built with optimization\n   option -Og, instead than -O2.\n\n9.1 2015/11\n===========\n * Fixes a bug when reading a content file with a deleted entry bigger\n   than 4 GB. This was a regression introduced in version 9.0 that could\n   result in the impossibility to read a valid content file, after a\n   deletion of a file bigger than 4 GB in the array.\n   If this happened to you, just upgrading to 9.1 fixes the issue, and\n   it allows you to continue to work.\n   Note that this bug only prevented to run 9.0, but your data was still\n   protected and could have been recovered using the versions 8.1 or\n   9.1.\n * In Windows disables the file zero check requiring the --force-zero\n   option. This check is intended for possible case using ext3/4 in\n   Linux, and there is no evidence that in Windows it's possible at all.\n * Windows binaries built with gcc 4.9.3 using the MXE cross compiler at\n   commit 62bcdbee56e87c81f1faa105b8777a5879d4e2e with targets\n   i686-w64-mingw32 and x86_64-w64-mingw32 and optimization -O2.\n\n9.0 2015/11\n===========\n * Fixes an invalid assumption that could happen when using the -e,\n   --filter-error option with \"fix\" or \"check\".\n   This was triggered by a very specific pattern of fragmented files\n   and bad blocks combination, not so easy to reproduce.\n   This had no bad effect, if not preventing the command to run.\n * Drastically reduces the memory usage. For each block, it now uses 17\n   bytes of memory, instead of the previous 28 bytes (for 32 bit) or 36\n   bytes (for 64 bit).\n   This could result is a memory saving of up the 50%.\n * The -p, --plan option (old --percentage) can be used to define a\n   scrub plan: \"new\", \"bad\" and \"full\".\n   The \"new\" plan scrubs all the new synced  blocks not yet scrubbed.\n   This allows to verify as early as possible that the written parity\n   during sync is really correct. You can use the \"status\" command to\n   show the amount blocks not yet scrubbed.\n   The \"bad\" plan scrubs only bad blocks.\n   The \"full\" plan scrubs all blocks.\n * The graph in the \"status\" command now show scrubbed blocks with '*',\n   and synced, but not yet scrubbed, blocks with 'o'.\n   Note that when upgrading from a previous version, all blocks are\n   assumed scrubbed the first time.\n * Content files are now written asynchronously from different threads\n   to avoid the unfortunate condition that a memory error affects all of\n   them in the same way.\n   After writing, they are read again to verify their CRC.\n   This is done to ensure that they are really OK, even in the case of\n   the worst possible silent errors.\n * Extends the -D, --force-device option to ignore more erroneous\n   conditions in the 'fix' command, like inaccessible disks,  or disks\n   sharing the same physical device.\n * Extends the -d, --filter-disk option to allow to filter also by\n   parity disk.\n * Extends the -h, --pre-hash option to also verify moved and copied\n   files into the array before running a 'sync'.\n * Updates 'best' RAID functions for recent Atom CPUs.\n * Validates filters specifications rejecting relative paths.\n\n8.1 2015/05\n===========\n * Fixes build issues in generic Unix platforms, including Mac OS X.\n * The \"diff\" command returns with error code 2 if a \"sync\" is required,\n   to differentiate with the generic error code 1.\n * Reduces the effect of SMART attribute 193 on the failure probability\n   to avoid some false positive reports.\n\n8.0 2015/04\n===========\n * Allows \"sync\" and \"scrub\" to continue after the first bunch of disk\n   errors. Blocks with errors are marked as bad, and you can fix them\n   with the \"fix -e\" command.\n   The fix is expected to force the disk firmware to reallocate the\n   bad sector, likely fixing the problem.\n   You can control the number of allowed errors with the new\n   -L, --error-limit option. The default is 100.\n * The -e, --filter-error option doesn't write anymore fixes to\n   unsynced files. This helps in case you are running it on a not\n   synced array, removing the risk to revert some files to an old state.\n * The -e, --filter-error option is now optimal and reads only the\n   minimal amount of data necessary to fix the errors.\n * The \"diff\" command returns with an error code if a \"sync\" is\n   required.\n * Adds new \"smart\" command to print a SMART report of the array.\n * Adds new \"up\" and \"down\" commands to spin up and down the disks of\n   the array.\n * Adds new \"devices\" command to print the devices associations in the\n   array.\n * Changes the log handling. If no log file is specified, all the\n   warnings and not fatal errors messages goes to stderr. If a log file\n   is specified, only fatal error messages are printed on the screen.\n   You can control the amount of informative messages on stdout with\n   the -q, --quiet and -v, --verbose options, that can be specified\n   multiple times to be more quiet or verbose.\n * In the \"status\" command the \"Wasted\" column now shows a negative\n   number for the amount of space that you can still waste without\n   filling up the parity.\n * In the \"status\" and others commands we now use GB instead of GiB,\n   when referring to disk space.\n * Renames the -s and -t options to -S and -B as they are intended to\n   be manual only operations.\n * Windows binary built with gcc 4.8.1 using the MXE cross compiler\n   2.23, with targets i686-w64-mingw32 and x86_64-w64-mingw32. Before\n   the x86 target was i686-pc-mingw32.\n\n7.1 2015/01\n===========\n * In 'scrub' and 'sync' detects and reports Input/Output errors\n   separately from generic file system errors.\n * In 'diff' doesn't print the \"add\" entry if a \"copy\" one is already\n   printed.\n * Fixes build with old compilers in the x64 platforms [Leigh Phillips].\n * Fixes out-of-dir builds [Christoph Junghans].\n\n7.0 2014/11\n===========\n * In 'check' and 'fix' the array is scanned to find any moved files\n   that could be used to recover missing data. Files are identified by\n   time-stamp, and then they are recognized also if moved to a different\n   disk. Note that even if there are false positive they are identified\n   checking the hash, so they have not effect, besides making the\n   process a little slower. To disable this new behavior you can use\n   the -N, --force-nocopy option.\n * The -i, --import command now identifies files by time-stamp making it\n   very fast in importing directories.\n * More detailed 'status' report with single disk stats and free space\n   available.\n * A lot faster directory listing for Windows.\n * Adds AVX2 support to improve parity generation speed.\n * Prints the time spent waiting for each disk also in 'scrub'.\n * The CPU usage, speed and ETA estimations are now based on the last\n   100 seconds rather than from the start.\n * Keeps track of the UUID of the parity disks to check them before\n   operating.\n * Windows binary built with gcc 4.8.1 using the MXE cross compiler\n   2.23.\n\n6.4 2014/11\n===========\n * Adds support for the new binary format of SnapRAID 7.0.\n   This allows to downgrade from version 7.0 to 6.x or previous.\n\n6.3 2014/7\n==========\n * The -N, --force-nocopy option now also works if you used previously\n   \"sync\" commands without it.\n * In 'sync' keeps stats about the amount of time spent waiting for each\n   disk and what is spent in CPU computation.\n * Auto exclude the lock file.\n * A more precise counting of how may block to scrub. Now it's exact\n   regardless the order of the blocks timing.\n * Don't prints the 'UUID set' message anymore because it's the normal\n   condition for empty disks.\n * In Windows, if the disk doesn't support reading physical offsets,\n   allows SnapRAID to continue anyway.\n * Added a new -F, --force-full option that forces a full sync reusing\n   the hash data present in the content file.\n\n6.2 2014/5\n==========\n * Fixed the regression test when run as root.\n * Added a new heuristic to detect file copies. Now a file is assumed\n   to be a copy if name, size and nanosecond time-stamp are matching,\n   but if the nanosecond part of the time-stamp is 0, it requires\n   the full path matching and not only the name.\n * Added the -N, --force-nocopy option to disable completely the copy\n   detection. SnapRAID also suggests to use this option in the error\n   message of a data mismatch if likely caused by the copy detection.\n\n6.1 2014/4\n==========\n * Fixed build and regression test in Mac OS X.\n\n6.0 2014/3\n==========\n * In \"sync\", even if a silent error is found, continue to update the\n   parity if it's possible to correct the error.\n   Note that the block will be marked bad, and the data will be fixed\n   only at the next \"fix -e\" call.\n   But any new data added will be protected if you are using enough\n   parity to fix both the silent error and at least another potential\n   error.\n * Detect copied files from one disk to another and reuse the already\n   computed hash information to validate them in \"sync\".\n   Files are assumed copied if they matches the name, size and\n   time-stamp.\n * For \"sync\", added a new -h, --pre-hash option to run a preliminary\n   hashing step for all the new files to ensure to detect silent errors\n   caused by the heavy machine usage of the parity computation.\n * In \"fix\", if a previous fixing attempt was made resulting in a\n   .unrecoverable file, uses this file as starting point for the\n   new attempt.\n * In the log file name allows the use of the '>>', %D, %T modifiers\n   to select append mode, and to insert the date and time in the name.\n * The options  -p, --percentage and -o, --older-than now keep their\n   default value even if the other one is specified.\n * Moved the .lock file in the same dir of the first specified content\n   file. This avoid to spin-up the parity disks in all commands.\n * The \"diff\", \"list\", \"dup\", \"status\" and \"pool\" commands don't access\n   anymore the parity disks that can now stay powered down.\n * The default configuration file in Windows is now searched in the same\n   directory where the snapraid.exe file resides.\n * New source code organization. The RAID engine is now an external\n   component usable also in other projects.\n\n5.3 2014/3\n==========\n * Don't warn about UUID changed if it's for an empty disk.\n * Fixed the number of blocks that scrub has to process when\n   selecting a high percentage of the array.\n * Removed duplicate recovery attempts in synced state.\n\n5.2 2013/12\n===========\n * If a disk changes UUID, automatically disable the inode\n   recognition, because this is likely a new file-system with\n   all the inodes reassigned, and we don't want to risk a false\n   positive when searching for inode/time-stamp/size.\n * Allow to run a fix command with disks that doesn't need to be\n   fixed mounted as read-only.\n * After a failed sync, always reallocates new files with a not\n   yet computed parity to ensure to minimize the parity usage,\n   if some other file is deleted in the meantime.\n * Doesn't count empty dirs as files in the diff counters.\n * Added a new \"share\" configuration option to allow to share\n   in the network the pool directory also in Windows.\n * Fixed build problems in OpenBSD due the old assembler.\n * Fixed build problems in platforms different than x86.\n\n5.1 2013/12\n===========\n * Fixed a potential crash if a file is deleted during a \"sync/scrub\".\n   This is a problem introduced in version 5.0 due new logging.\n   If happened to you to have a crash in sync, you don't need to take\n   any special action, just run \"sync\" again.\n * Restored the functionality of -C, --gen-conf command.\n * Prints the files with duplicate physical offset if the -v, --verbose\n   option is specified.\n\n5.0 2013/11\n===========\n * Added support for up to six levels of parity.\n * Added a specific and faster triple parity format for CPUs that\n   don't support SSSE3 instructions like ARM and AMD Phenom, Athlon\n   and Opteron.\n * Faster RAID5 and RAID6 implementation for ARM 64 bit CPUs.\n * If a silent error is found during a \"sync\" command, directly marks\n   the block as bad like in \"scrub\", without stopping the \"sync\"\n   process.\n * Sort files by inode when listing the directory. This improves\n   the scanning performance.\n * For files with changes only in some blocks, updates the parity\n   only for blocks that really are changed.\n   This improves the performance in sync for modified files.\n * Added a new \"list\" command to see the stored list of files.\n * Removed the detailed list of errors from the screen output.\n   To get it you must explicitly use the -l, --log option.\n   It's now too detailed for the screen, because it contains a lot\n   of info.\n * Changed the output format of some commands to make it similar\n   at the new \"list\" one.\n * Reduced memory usage removing some unnecessary allocations.\n * Added a memory test on the memory buffers used in sync, scrub, check,\n   fix before using them.\n\n4.4 2013/10\n===========\n * Relaxed the check about small parity files, to allow to recover after\n   a failed sync before resizing the parity files.\n\n4.3 2013/10\n===========\n * Fixed the scrub command with the -p0 option. Now it really scrubs\n   only the blocks marked as bad and not the full array.\n\n4.2 2013/10\n===========\n * Fixed the wrong warning about physical offsets not supported caused\n   by files not having a real offset because too small.\n   For example, in NTFS it's possible to store such files in the MFT.\n   It's just a cosmetic change, and not a functional one.\n * Remove unexpected 'Restore' entries in the diff output when dealing\n   with file-system without persistent inodes like NTFS in Linux.\n * Added support for filenames containing newlines. This happens in Mac\n   OS X.\n\n4.1 2013/9\n==========\n * If the underline file-system doesn't support the FIEMAP command,\n   automatically fall back to use FIBMAP for sorting files.\n * Fixed the import of content files from previous version of SnapRAID\n   that are the result of an incomplete sync.\n * Added a new -C, --gen-conf option to generate a dummy configuration\n   file from the info in the content file.\n   Just in case that you lose everything, except the content file.\n * At the end of sync/scrub/check/fix prints \"Everything OK\" if no error\n   was found. This should make clear that everything is really OK.\n\n4.0 2013/9\n==========\n * New 'scrub' command to periodically check the oldest blocks for\n   silent errors without the need to scan the whole array.\n * New 'status' command to check the fragmentation, the last check time\n   distribution, and the silent error status of the array.\n * Added the new Spooky hash. It's faster in 64 bit architectures.\n   To convert you can use the new 'rehash' command.\n * Changed to a binary content file to improve speed and reduce size.\n * Removed the --find-by-name, -N option. Now it always searches\n   by name if a file is not found searching by inode, automatically\n   reassigning inodes in restored files without needing to sync\n   again the file.\n   This happens only if the file has the same path, size and timestamp\n   at nanosecond precision.\n * Added a hash seed to make harder intentional collision attacks.\n * When inserting files for the first time, sort them by their physical\n   address to improve read performance.\n * Optimized the cache use for the all the RAID computations.\n   This improves a lot the RAID performance.\n * Better selection of the RAID6 implementation for different CPUs.\n * Added RAID5/RAID6 mmx and sse2 implementations with unrolling by 4.\n   They are a little faster than the previous unroll by 2.\n * Added a lock file to avoid multiple running instances on the same\n   array. The file is named as parity file adding the .lock extension.\n   There is also the undocumented --test-skip-lock to avoid to check it.\n * Automatically ignores, with warning, mount points inside the array\n   directory tree.\n * Changes the 'dup' output format to include the size of each duplicate\n   file.\n\n3.2 2013/7\n==========\n * Fixed a directory creation problem in Windows when the \"disk\" option\n   points to the root directory of a drive. Now SnapRAID won't complain\n   about the inability to create such directory.\n   If you encounter this problem when trying to recover your data, just\n   upgrade to this version, and you'll be able to complete the\n   recovering process.\n   No need to upgrade for platforms different than Windows.\n\n3.1 2013/5\n==========\n * Direct use of Windows API for disk access to improve error reporting.\n * If the 'fix' process is aborted, it removes all the new files\n   partially recovered, to allow to reuse again the -m, --filter-missing\n   flag.\n * In Windows don't exclude anymore system files. Only system\n   directories are excluded.\n * In Windows applies filters in case insensitive way.\n * The Windows binaries are now built with gcc 4.7.2.\n * Reduced memory occupation for hardlinks and directories.\n * In 'dup' don't list files with 0 size.\n\n3.0 2013/3\n==========\n * Added pooling support with the new 'pool' command. It creates a\n   virtual view of the array using symbolic links pointing to the\n   original files.\n * Added a new -m, --filter-missing option that allow to undelete files,\n   without checking/fixing the others.\n * Added a new -i, --import option to automatically import deleted files\n   when fixing.\n * Added a new -l, --log option to save to disk the detailed log.\n * Added support for hardlinks and empty directories.\n * Added support to save symlinks to files in Windows. Note that only\n   the symlink is saved and not the linked file.\n   Note that Windows Symlinks to dirs and junctions are still not\n   supported.\n * Files without read permission generate an error instead of a warning.\n   You now must explicitly exclude them in the configuration file with\n   exclusion rules.\n * In 'check' and 'fix', if verbose is enabled, prints the result for\n   each processed file.\n * Added an UUID check to detect when a disk is replaced, and to prevent\n   unwanted disk swaps.\n\n2.1 2013/1\n==========\n * Checks for wrong empty fields in the configuration file.\n * Filter rules for files are not anymore applied to directories.\n\n2.0 2012/12\n===========\n * Added a new -a option to make the 'check' command to only check file\n   hashes without checking the parity data.\n * Added a new -d option to filter by disk name.\n * The file modification time is now saved using nanosecond precision.\n   This allows to restore the exact modification time in 'fix'.\n   The new 'content' files written with this version are not backward\n   compatible, but it's still possible to read the old format.\n * Fixed hard-links automatic exclusion. All the hardlinks after the\n   first one are now correctly ignored.\n * If it isn't possible to grow a parity file, prints the list of files\n   outside the maximum size allocated.\n * Autosave isn't triggered if we are near the end of the 'sync'\n   process.\n * Before starting a 'sync', we wait for two seconds, to workaround the\n   FAT limitation of having two seconds modification time precision.\n   This a safe measure to be 100% sure to always detect file changes.\n * Always fill the memory after allocating it to avoid the OOM (Out Of\n   Memory) killer in Linux.\n * Fixed compilation in Solaris/OpenIndiana for lacking both futimes()\n   and futimens().\n * Now 'sync' ensures that the parity files are not too small to contain\n   the just loaded data.\n * Removed the '-H,--filter-nohidden' option. It doesn't make sense to\n   have it as command line option.\n   You must use the 'nohidden' option in the configuration file.\n * When opening files in read-only mode, also specify the noatime flag,\n   to avoid to update the file access time.\n * Exclude rules for files are now also applied to directories.\n   This allows to excludes some file/directory without the need to call\n   the stat() function on them.\n * The -N, --find-by-name option also ignores the nanosecond part of\n   timestamps to work with copy programs not supporting nanoseconds.\n * Fixed deduplicated files handling in Windows Server 2012.\n * Removed MD5 support.\n\n1.13 2012/11\n============\n * Fixed a Segmentation Fault when checking/fixing if there are three\n   or more errors in a specific block.\n\n1.12 2012/9\n===========\n * Fixed file renaming in Windows during a 'fix' command.\n   This is only a Windows only issue, no reason to upgrade for other\n   platforms.\n\n1.11 2012/7\n===========\n * Fixed again directories inclusion. Exclusion rules for directories\n   were ignored.\n\n1.10 2012/6\n===========\n * Fixed directory inclusion, in case the last rule is an \"include\" one.\n * Fixed very long paths in Windows. We now always use the special '\\\\?'\n   prefix to remove the 260 chars limitation.\n * If a file is excluded, it prints explicitly which attribute caused\n   the exclusion.\n * Automatically excludes also the temporary copy of content file,\n   the one with the \".tmp\" extension.\n * Avoid Windows to go in automatic sleep mode when running.\n\n1.9 2012/3\n==========\n * Implemented a more sophisticated recovering in case a harddisk\n   failure happens during a 'sync' command.\n   When using RAID6 it improves the chances of recovering data with\n   partially computed parity, after an aborted 'sync'.\n * Fixed the count of new files.\n * Added a new 'autosave' configuration option to save the intermediate\n   'sync' state.\n * Supported file-systems with read requests returning less data than\n   requested.\n * In Windows ensures that the disk serial number is not zero.\n\n1.8 2012/1\n==========\n * Added a new \"dup\" command to find all the duplicate files.\n * Added a new option \"--filter-nohidden\" to exclude hidden files.\n * Faster and parallel writing of content files.\n * The example configuration files now put the content files in the data\n   disks instead than in the parity disks.\n * Added a checksum at the content file to ensure its integrity.\n * Using fallocate() instead posix_fallocate() to avoid the very slow\n   posix_fallocate() fall back of writing the whole file.\n\n1.7 2011/11\n===========\n * If a file is modified or removed during a sync, the sync process\n   doesn't stop anymore, but it will simply skip the file, resulting in\n   an incomplete sync. Note that the sync will terminate with an error.\n * If the content file is placed in a data disk, it's automatically\n   excluded from the sync process.\n * Increased by one the minimum number of content files. Before it was\n   only a suggestion, but now it's a requirement because you are allowed\n   to put content files in data disks.\n * Added checks to ensure that data and parity disks are different, and\n   to correctly count the number of copies of \"content\" files in\n   different disks.\n * Removed the dependency of the \"disk\" order specification in the\n   configuration file. The used order is now saved in the content file\n   to avoid to damage the dual parity in case the order is changed by\n   the user. It easily allows to remove or add disks from the array when\n   using a dual parity.\n * Improved the \"fix\" performance when a lot of files or the parity have\n   to be recreated from scratch.\n * When getting unrecoverable errors, the printed log line now starts\n   with \"unrecoverable:\" instead of \"error:\" to allow an easier\n   identification.\n * Added a new option \"--find-by-name\" to allow to sync using only the\n   file path and not the inode. This is useful to avoid long sync when\n   you replace one disk with another copying manually the files.\n * If \"fix\" cannot recover a file, it's renamed adding the\n   \".unrecoverable\" extension.\n * Checking and fixing also empty files with size 0.\n\n1.6 2011/9\n==========\n * The content file is now saved also at the start of the \"sync\"\n   command. This avoids parity errors if the sync process is aborted\n   without saving the content file and you made changes at the disk\n   array before another \"sync\" command was done.\n   More specifically, deletions or truncations of not yet synced files\n   after the aborted sync, and before the next sync command, may have\n   damaged the parity data. New file additions were instead safe.\n   If these conditions may have happened to you a \"check\" command (also\n   with older version of the program) is recommended to ensure the\n   correctness of your parity data.\n * The \"diff\" command now recognizes the reuse of inodes.\n * Windows hidden files are now saved like any other files.\n * Symbolic links are now saved in *nix. Not supported in Windows.\n * The \"fix\" command restores also the original modification time.\n * The message asking to use the --force-empty option now lists all the\n   empty disks.\n\n1.5 2011/7\n==========\n * Ignores extra spaces in the configuration file.\n * Changed the output of check/fix to allow a more easy post-processing\n   with other tools like awk and sort.\n * Added the hidden option -G/--gui to enable the output of progress\n   information for a potential GUI for SnapRAID.\n * Added a new \"diff\" command to print the list of changes detected at\n   file level.\n * Faster loading of content file. Approx three times faster.\n\n1.4 2011/6\n==========\n * Ignoring in sync System and Hidden files in Windows.\n * Files without read permission are ignored in sync.\n * If a file is ignored a warning message is printed. You have to\n   exclude it to remove the warning.\n * In fixing, if a file cannot be written for missing permission, an\n   error is reported only if a write is effectively required.\n * Ignores any symbolic links. They are not saved.\n\n1.3 2011/5\n==========\n * Fixed the restore of directory with unicode chars in Windows.\n * Fixed support of file names starting or ending with a space.\n * Removes files before inserting new ones to minimize the parity size.\n\n1.2 2011/5\n==========\n * Fixed use of file names out of the codepage in Windows. All the names\n   are now stored in UTF8 in the content file.\n\n1.1 2011/5\n==========\n * Fixed a bug in the check command when detecting garbage data over the\n   expected end of the file.\n   The parity data was anyway computed correctly, and no special action\n   is required to update.\n * Changed the default checksum to Murmur3 hash. It's a lot faster than\n   MD5. You can check its speed with the \"snapraid -T\" command.\n   MD5 is still supported for backward compatibility.\n   To convert to the new Murmur3 hash, simply remove the 'content' file,\n   and start a new complete 'sync'.\n * Added RAID6 support. It's used the very good RAID6 library made by H.\n   Peter Anvin also used in the Linux Kernel. It contains optimized\n   implementations for SSE2 and MMX.\n * Added support for multiple 'content' files. You can save extra copies\n   to be able to verify the checksums also if you lose all the 'content'\n   files in the parity disks.\n * Added a filtering include logic, where anything not explicitly\n   included is excluded. For example, it allow to include only the files\n   in a predefined set of directories.\n * The check command returns with an error code if any kind of error is\n   present. Previously it was returning an error only if unrecoverable\n   errors were present.\n * Opening the files in sequential mode in Windows. This should give a\n   speedup in Windows.\n * In Windows you can use the backslash \\ in the filter definitions\n   instead of the forward slash /.\n\n1.0 2011/4\n==========\n * No relevant change.\n\n0.4 2011/4\n==========\n * Added hidden 'dry' command mainly for speed measurement.\n * As default, uses the OpenSSL crypto MD5 implementation.\n\n0.3 2011/4\n==========\n * Added --filter option to select a subset of file in check and fix.\n * Better ETA estimation in all the commands.\n * Added support for OpenSSL crypto library to use its optimized MD5\n   implementation.\n * Added test vectors and a speed test for MD5.\n\n0.2 2011/3\n==========\n * Second public test release of SnapRAID.\n * Functionally complete in check and fix.\n * Files are identified by inode and not anymore by name.\n * Exclusion list of files and directories.\n * Precise error management.\n * More regression tests.\n\n0.1 2011/3\n==========\n * First public test release of SnapRAID.\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.7421875,
          "content": "SnapRAID INSTALL\n================\n\nTo build and install SnapRAID you need to download the source\ncode from http://www.snapraid.it and unpack it with:\n\n    tar xf snapraid-*.tar.gz\n    cd snapraid-*\n\nTo configure and build, run:\n\n    ./configure\n    make\n\nTo run the correctness tests for the application:\n\n    make check\n\nIf this terminates with \"Success\", you can install the application and\nthe documentation by running:\n\n    sudo make install\n\n(The snapraid application itself does not require root privileges.)\n\nTo start using SnapRAID, change the example configuration\nfile snapraid.conf.example to fit your needs and copy it to /etc/snapraid.conf\n\nTo get more help, see the \"Getting Started\" section in the snapraid manpage\nby typing:\n\n    man snapraid\n\n"
        },
        {
          "name": "INSTALL.windows",
          "type": "blob",
          "size": 0.3212890625,
          "content": "SnapRAID INSTALL for Windows\n============================\n\nTo start using SnapRAID you have to change the example configuration\nfile snapraid.conf.example to fit your needs and copy it with the\nname snapraid.conf in the directory where you run snapraid.exe.\n\nTo get more help, see the \"Getting Started\" section in snapraid.txt.\n\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 44.359375,
          "content": "bin_PROGRAMS = snapraid\ncheck_PROGRAMS = mktest mkstream\n\nAM_CPPFLAGS = -DSYSCONFDIR=\"\\\"${sysconfdir}\\\"\"\n\nsnapraid_SOURCES = \\\n\traid/raid.c \\\n\traid/check.c \\\n\traid/module.c \\\n\traid/tables.c \\\n\traid/int.c \\\n\traid/x86.c \\\n\traid/intz.c \\\n\traid/x86z.c \\\n\traid/helper.c \\\n\traid/memory.c \\\n\traid/test.c \\\n\traid/tag.c \\\n\ttommyds/tommy.c \\\n\tcmdline/snapraid.c \\\n\tcmdline/io.c \\\n\tcmdline/util.c \\\n\tcmdline/stream.c \\\n\tcmdline/support.c \\\n\tcmdline/elem.c \\\n\tcmdline/state.c \\\n\tcmdline/scan.c \\\n\tcmdline/sync.c \\\n\tcmdline/check.c \\\n\tcmdline/dry.c \\\n\tcmdline/rehash.c \\\n\tcmdline/scrub.c \\\n\tcmdline/status.c \\\n\tcmdline/dup.c \\\n\tcmdline/list.c \\\n\tcmdline/pool.c \\\n\tcmdline/parity.c \\\n\tcmdline/handle.c \\\n\tcmdline/touch.c \\\n\tcmdline/device.c \\\n\tcmdline/fnmatch.c \\\n\tcmdline/selftest.c \\\n\tcmdline/speed.c \\\n\tcmdline/import.c \\\n\tcmdline/search.c \\\n\tcmdline/mingw.c \\\n\tcmdline/unix.c\n\nnoinst_HEADERS = \\\n\traid/raid.h \\\n\traid/helper.h \\\n\traid/internal.h \\\n\traid/cpu.h \\\n\traid/gf.h \\\n\traid/combo.h \\\n\traid/memory.h \\\n\traid/test.h \\\n\ttommyds/tommyarray.h \\\n\ttommyds/tommyarrayblkof.h \\\n\ttommyds/tommychain.h \\\n\ttommyds/tommyhash.h \\\n\ttommyds/tommyhashdyn.h \\\n\ttommyds/tommylist.h \\\n\ttommyds/tommytree.h \\\n\ttommyds/tommytypes.h \\\n\ttommyds/tommyarray.c \\\n\ttommyds/tommyarrayblkof.c \\\n\ttommyds/tommyhash.c \\\n\ttommyds/tommyhashdyn.c \\\n\ttommyds/tommylist.c \\\n\ttommyds/tommytree.c \\\n\tcmdline/portable.h \\\n\tcmdline/snapraid.h \\\n\tcmdline/io.h \\\n\tcmdline/util.h \\\n\tcmdline/stream.h \\\n\tcmdline/support.h \\\n\tcmdline/elem.h \\\n\tcmdline/state.h \\\n\tcmdline/parity.h \\\n\tcmdline/handle.h \\\n\tcmdline/murmur3.c \\\n\tcmdline/murmur3test.c \\\n\tcmdline/spooky2.c \\\n\tcmdline/spooky2test.c \\\n\tcmdline/metro.c \\\n\tcmdline/fnmatch.h \\\n\tcmdline/import.h \\\n\tcmdline/search.h \\\n\tcmdline/mingw.h \\\n\tcmdline/unix.h\n\nmktest_SOURCES = \\\n\tcmdline/mktest.c \\\n\tcmdline/mingw.c \\\n\tcmdline/unix.c \\\n\tcmdline/support.c\n\nmkstream_SOURCES = \\\n\tcmdline/mkstream.c \\\n\tcmdline/mingw.c \\\n\tcmdline/unix.c \\\n\tcmdline/support.c \\\n\tcmdline/util.c \\\n\tcmdline/stream.c \\\n\traid/memory.c\n\n# Add the .version file in the distribution\ndist-hook:\n\t$(srcdir)/autover.sh > $(distdir)/.version\n\nEXTRA_DIST = \\\n\tautogen.sh autover.sh \\\n\tREADME AUTHORS HISTORY INSTALL COPYING TODO CHECK INSTALL.windows \\\n\tsnapraid.d snapraid.1 snapraid.txt \\\n\ttest/test-par1.conf \\\n\ttest/test-par2.conf \\\n\ttest/test-par3.conf \\\n\ttest/test-par4.conf \\\n\ttest/test-par5.conf \\\n\ttest/test-par6.conf \\\n\ttest/test-par6-hole.conf \\\n\ttest/test-par6-noaccess.conf \\\n\ttest/test-par6-rename.conf \\\n\tsnapraid.conf.example \\\n\tconfigure.windows-x86 configure.windows-x64 snapraid.conf.example.windows \\\n\tacinclude.m4 \\\n\ttommyds/LICENSE \\\n\traid/COPYING \\\n\traid/test/Makefile \\\n\traid/test/fulltest.c \\\n\traid/test/selftest.c \\\n\traid/test/speedtest.c \\\n\traid/test/invtest.c\n\nman_MANS = snapraid.1\n\nclean-local:\n\trm -f valgrind.log callgrind.log cachegrind.log\n\trm -rf bench\n\trm -f test*.log output.log stream*.bin\n\trm -f cmdline/*.gcda cmdline/*.gcno cmdline/*.gcov\n\trm -f raid/*.gcda raid/*.gcno raid/*.gcov\n\trm -f tommyds/*.gcda tommyds/*.gcno tommyds/*.gcov\n\trm -f lcov.info\n\trm -f gmon.out\n\nmaintainer-clean-local:\n\trm -f snapraid.1 snapraid.txt\n\n# Automatic testing\n\n# Common options\n# --test-skip-device\n# Is required to allow testing in the same disk\n#\n# --test-skip-self\n# It just makes the test a little faster\nCHECKFLAGS_COMMON = --test-skip-device --test-skip-self --test-force-progress --no-warnings --test-parity-limit=3333333\n\n# --test-force-order-alpha\n# Ensures to process files always in the same order despite\n# the inode, physical location, and dir order assigned by the OS.\nCHECKFLAGS_ALPHA = $(CHECKFLAGS_COMMON) --test-force-order-alpha\n\n# Physical offset options\nCHECKFLAGS_PHYSICAL = $(CHECKFLAGS_COMMON) --test-force-order-physical -q -q -q\n\n# Verbose options\nCHECKFLAGS_VERBOSE = $(CHECKFLAGS_ALPHA) -v -G\n\n# Quiet options\nCHECKFLAGS = $(CHECKFLAGS_ALPHA) -q -q -q\n\n# Number of files to create\nif !HAVE_MEMORY_CHECKER\nif HAVE_POSIX\nCHECKCOUNT = 1000\nelse\nCHECKCOUNT = 500\nendif\nelse\nCHECKCOUNT = 500\nendif\n\n# Size of files to create\nif !HAVE_MEMORY_CHECKER\nCHECKSIZE = 4000\nelse\nCHECKSIZE = 100\nendif\n\nCONF = $(srcdir)/test/test-par6.conf\nHOLE = $(srcdir)/test/test-par6-hole.conf\nNOACCESS = $(srcdir)/test/test-par6-noaccess.conf\nRENAME = $(srcdir)/test/test-par6-rename.conf\nPAR1 = $(srcdir)/test/test-par1.conf\nPAR2 = $(srcdir)/test/test-par2.conf\nPAR3 = $(srcdir)/test/test-par3.conf\nPAR4 = $(srcdir)/test/test-par4.conf\nPAR5 = $(srcdir)/test/test-par5.conf\nPAR6 = $(srcdir)/test/test-par6.conf\nMSG = @echo =====\n\ncheck-local:\n\trm -rf bench\n\trm -f test.log\n\tmkdir bench\n\tmkdir bench/disk1\n\tmkdir bench/disk2\n\tmkdir bench/disk3\n\tmkdir bench/disk4\n\tmkdir bench/disk5\n\tmkdir bench/disk6\n\tmkdir bench/pool\n\t$(MSG) Stream\n\t$(TESTENV) ./mkstream$(EXEEXT)\nif HAVE_THREAD_CHECKER\n#### THREAD TEST ####\n\t$(MSG) Create some files\n\t$(TESTENV) ./mktest$(EXEEXT) generate 1 6 $(CHECKCOUNT) $(CHECKSIZE)\n\t$(MSG) Some commands that use threads\n# First sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n# Remove, move and add some more\n\trm bench/disk4/a/9*\n\trm bench/disk5/a/9*\n\trm bench/disk6/a/9*\n\tmv bench/disk1/a/9* bench/disk4/a\n\tmv bench/disk2/a/9* bench/disk5/a\n\tmv bench/disk3/a/9* bench/disk6/a\n\t$(TESTENV) ./mktest$(EXEEXT) change 2 500 bench/disk2/b/* bench/disk3/b/*\n# Sync again\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n# Other commands that uses threads\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) test-rewrite\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) scrub -p full\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) scrub -p full --test-io-cache 3\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) scrub -p full --test-io-cache 128\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync -F --test-io-cache 1\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) scrub -p full --test-io-cache 1\nelse\n#### COMMAND LINE ####\n\t$(MSG) Pre test\n\t$(TESTENV) ./snapraid$(EXEEXT) --test-skip-device -H\n\t$(TESTENV) ./snapraid$(EXEEXT) --test-skip-device -V\n\t$(TESTENV) ./snapraid$(EXEEXT) test\n\t$(TESTENV) ./mktest$(EXEEXT)\nif !HAVE_MEMORY_CHECKER\nif HAVE_EMULATOR\n\t$(MSG) Speed\n# Run the self test in AVX2\n\t$(TESTENV_AVX2) ./snapraid$(EXEEXT) --test-skip-device -c $(CONF) status\n# Run the speed test in different architectures\n\t$(TESTENV_SSE2) ./snapraid$(EXEEXT) --test-skip-device -T\n\t$(TESTENV_SSSE3) ./snapraid$(EXEEXT) --test-skip-device -T\n\t$(TESTENV_SSE42) ./snapraid$(EXEEXT) --test-skip-device -T\n\t$(TESTENV_AVX2) ./snapraid$(EXEEXT) --test-skip-device -T\nelse\n# Run the self test natively\n\t$(TESTENV) ./snapraid$(EXEEXT) --test-skip-device -c $(CONF) status\n# Run the speed test natively\n\t$(TESTENV) ./snapraid$(EXEEXT) --test-skip-device -T\nendif\nendif\n#### EMPTY ####\n\t$(MSG) Some commands with empty array\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) diff\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) dup\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) list > output.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status -l \">&1\"\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status -l \">&2\"\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status -l \">>test.log\"\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status -l test-%D-%T.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) up\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) down -d parity -d disk1\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) devices\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) smart --no-warnings\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) smart --test-fake-device --test-expect-failure\nif HAVE_POSIX\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) pool\nendif\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -a check\n#### CONTROLLED ####\n\t$(MSG) Filesystem allocation test\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk1/TEST\n# Copy the file to trigger the copy optimization check\n\tcp -a bench/disk1/TEST bench/disk2/TEST\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n# Now delete the file, and do a partial sync to force a deallocation in the middle of a file\n\trm bench/disk1/TEST\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -E -S 1 -B 1 sync\n# Now force a deallocation at the end\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -E -S 7 -B 1 sync\n\trm bench/disk2/TEST\n# Have the sync to fail for empty disk\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync --test-expect-failure\n# Now sync will complete with -E\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -E sync\n\t$(MSG) Filesystem fragmentation test\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk1/TEST1\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk1/TEST2\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk1/TEST3\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk1/TEST4\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk1/TEST5\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk1/TEST6\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n# Now delete some files, and create a bigger one to fill the holes\n\trm bench/disk1/TEST1\n\trm bench/disk1/TEST3\n\trm bench/disk1/TEST5\n\tdd bs=1 count=65536 if=/dev/zero of=bench/disk1/TESTX\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync -l \">&1\"\n\trm -r bench/disk1/TEST*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -E sync\n# Now enforce copy detection of a file without parity\n# Create a file in a high number disk\n\tdd bs=1 count=8192 if=/dev/urandom of=bench/disk6/STEP1\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n# Create two new copies. The one in disk1 will copy\n# the hash from the one in disk6, and the one in disk2\n# will copy the hash from the one in disk1, that\n# doesn't have parity\n\tcp -a bench/disk6/STEP1 bench/disk1/STEP1\n\tcp -a bench/disk6/STEP1 bench/disk2/STEP1\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n# Now create, duplicate, move and partial sync\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk1/INVA1\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk1/INVA2\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk1/INVA3\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk1/MOVE1\n\tcp -a bench/disk1/MOVE1 bench/disk1/MOVE2\n\tcp -a bench/disk1/MOVE1 bench/disk1/MOVE3\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\tmv bench/disk1/MOVE2 bench/disk2/MOVE2\n\tmv bench/disk1/MOVE3 bench/disk3/MOVE3\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk4/MOVE4\n\tcp -a bench/disk1/INVA1 bench/disk1/EXTRA1\n\tcp -a bench/disk1/INVA2 bench/disk1/EXTRA2\n\tcp -a bench/disk1/INVA3 bench/disk1/EXTRA3\n\trm bench/disk1/INVA1\n\ttouch bench/disk1/INVA2\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-kill-after-sync sync\n# Diff should report the need of a sync for invalid parity\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(PAR1) --test-expect-need-sync diff\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status\n\tmv bench/disk2/MOVE2 bench/disk4/MOVE4\n\tmv bench/disk3/MOVE3 bench/disk5/MOVE5\n\tmv bench/disk4/MOVE4 bench/disk6/MOVE6\n\trm bench/disk1/EXTRA1\n\ttouch bench/disk1/EXTRA2\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -E sync\n# Change UUID\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-fake-uuid sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n#### NOT EMPTY ####\n\t$(MSG) Create some files\n\t$(TESTENV) ./mktest$(EXEEXT) generate 1 6 $(CHECKCOUNT) $(CHECKSIZE)\n\techo DUP > bench/disk1/DUP1\n\techo DUP > bench/disk1/DUP2\n\techo -n > bench/disk1/ZERO\n\t$(MSG) Some commands with a not empty array\n# Run a sync using physical offset\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_PHYSICAL) -c $(CONF) --test-expect-need-sync diff > output.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_PHYSICAL) -c $(CONF) sync\n# Now reset the array, as we normally test with alpha order and murmur3\n\trm bench/content bench/?-content\n# Now rebuild the array with alpha order and murmur3 and do some commands\n# Later we will convert it to spooky2 to test both hashes\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) --test-expect-need-sync diff > output.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-force-murmur3 --test-force-autosave-at 100 sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) dup -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) list -l test.log > output.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) test-rewrite\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) test-read\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status -l test.log\nif HAVE_POSIX\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) pool\nendif\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -a check\n\t$(MSG) Dry\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) test-dry\n\t$(MSG) Copy detection\n# Create a file and sync with it\n\techo 123 > bench/disk1/COPY\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n# Corrupt and move it to another disk\n\t$(TESTENV) ./mktest$(EXEEXT) damage 1 1 1 bench/disk1/COPY\n\tmv bench/disk1/COPY bench/disk2/COPY\n# Now sync with failure as the data won't match. We have two points of failure, pre-hash and sync\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-expect-failure -h sync\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-expect-failure sync\n# Now sync with force-nocopy\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --force-nocopy sync\n\t$(MSG) Nano\n\ttouch -t 200102011234.56 bench/disk1/a/a*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) touch\n\t$(MSG) Check the --gen-conf command\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --gen-conf bench/content\n\t$(MSG) Filter\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) -d disk1 check > output.log\nif HAVE_POSIX\n# Only in real unix, as with MingW the * trigger path replacement\n# Like /b/a* -> B:/a* and SnapRAID then complain about relative paths\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) -f \\\\*a -f a/ -f /b/a\\\\* check > output.log\nendif\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) --test-expect-failure -f . check > output.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) --test-expect-failure -f ./ check > output.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) --test-expect-failure -f a/a check > output.log\n\t$(MSG) Delete some files and sync\n\trm bench/disk4/a/9*\n\trm bench/disk5/a/9*\n\trm bench/disk6/a/9*\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) --test-expect-need-sync diff > output.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) sync -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Move some files, sync and check\n\tmv bench/disk1/a/9* bench/disk4/a\n\tmv bench/disk2/a/9* bench/disk5/a\n\tmv bench/disk3/a/9* bench/disk6/a\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(CONF) --test-expect-need-sync diff > output.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n#### MORE FILES ####\n\t$(MSG) Create some more files, hardlinks and empty directories, delete others, sync PAR1 and check\n\trm bench/disk4/a/8*\n\trm bench/disk5/a/8*\n\trm bench/disk6/a/8*\n\t$(TESTENV) ./mktest$(EXEEXT) generate 2 6 $(CHECKCOUNT) $(CHECKSIZE)\n\tmkdir bench/disk1/empty1\n\tmkdir bench/disk2/empty2\n\tmkdir bench/disk3/empty3a\n\tmkdir bench/disk3/empty3a/emptyinner\n\tmkdir bench/disk3/empty3b\n\techo TARGET1 > bench/disk1/target1\n\tln bench/disk1/target1 bench/disk1/file_hardlink1\n\tln bench/disk1/target1 bench/disk1/file_hardlink2\n\tln bench/disk1/target1 bench/disk1/file_hardlink3\nif HAVE_POSIX\n\tln -s bench/disk1/target1 bench/disk1/file_symlink1\n\tln -s bench/disk1/target1 bench/disk1/file_symlink2\n\tln -s bench/disk1/target1 bench/disk1/file_symlink3\nendif\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(PAR1) --test-expect-need-sync diff > output.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-skip-fallocate -c $(PAR1) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-io-advise-none -c $(PAR1) sync -F --test-io-cache 1\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-io-advise-sequential -c $(PAR1) sync -F --test-io-stats\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-io-advise-flush-window -c $(PAR1) sync -F\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-io-advise-discard-window -c $(PAR1) sync -F\n#### CHANGE LINKS ####\n# Use a different size (\"22\" instead of \"1\") to ensure to recognize the file different\n# even if it gets the same timestamp in case subsecond timestamp is no available\n\techo TARGET22 > bench/disk1/target2\n\trm bench/disk1/file_hardlink1\n\tln bench/disk1/target2 bench/disk1/file_hardlink1\nif HAVE_POSIX\n\trm bench/disk1/file_symlink1\n\tln -s bench/disk1/target2 bench/disk1/file_symlink1\nendif\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) --test-expect-need-sync diff > output.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) sync -l \">&1\"\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) check -l \">&1\"\n#### MISC COMMANDS ####\n\t$(MSG) Some commands with a not empty array\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(PAR1) dup\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(PAR1) list --test-fmt file > output.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(PAR1) list --test-fmt disk > output.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) -c $(PAR1) list --test-fmt path > output.log\nif HAVE_POSIX\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) pool\nendif\n\t$(MSG) Extend PAR1 to max parity with fix and check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(CONF) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) fix -d 2-parity -d 3-parity -d 4-parity -d 5-parity -d 6-parity -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check -l \">&1\"\n\t$(MSG) Fix with unaccessible parity and disk\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(NOACCESS) fix --test-expect-failure\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(NOACCESS) fix --force-device --test-expect-recoverable -l test.log\n\t$(MSG) Rename a disk\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(RENAME) --test-match-first-uuid sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-match-first-uuid sync\n#### SCRUB ####\n\t$(MSG) Scrub some times\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-force-scrub-at 100 scrub\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-force-scrub-at 1000 scrub\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-force-scrub-at 100000 scrub\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status\n#### SYNC WITH RUNTIME CHANGE ####\n\t$(MSG) Modify files during a sync\n\techo RUN > bench/disk1/RUN-RM\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-run \"rm bench/disk1/RUN-RM\" --test-expect-failure sync\n\techo RUN > bench/disk1/RUN-CHMOD\nif HAVE_POSIX\n# Doesn't run this test as root because the root user override permissions\n\tif [[ $$EUID -ne 0 ]]; then \\\n\t\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-run \"chmod a-r bench/disk1/RUN-CHMOD\" --test-expect-failure sync; \\\n\tfi\nendif\n\techo RUN > bench/disk1/RUN-SIZE\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-run \"echo RUNRUN > bench/disk1/RUN-SIZE\" --test-expect-failure sync\n\techo RUN > bench/disk1/RUN-TOUCH\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-run \"touch -t 200001011200 bench/disk1/RUN-TOUCH\" --test-expect-failure sync\n\techo RUN > bench/disk1/RUN-INODE\n\tcp -p bench/disk1/RUN-INODE bench/disk1/RUN-INODE-COPY\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-run \"mv bench/disk1/RUN-INODE-COPY bench/disk1/RUN-INODE\" --test-expect-failure sync\n\trm bench/disk1/RUN-CHMOD\n\trm bench/disk1/RUN-SIZE\n\trm bench/disk1/RUN-TOUCH\n\trm bench/disk1/RUN-INODE\n\techo HASH > bench/disk1/HASH-RM\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-run \"rm bench/disk1/HASH-RM\" --test-expect-failure -h sync\n\techo HASH > bench/disk1/HASH-CHMOD\nif HAVE_POSIX\n# Doesn't run this test as root because the root user override permissions\n\tif [[ $$EUID -ne 0 ]]; then \\\n\t\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-run \"chmod a-r bench/disk1/HASH-CHMOD\" --test-expect-failure -h sync; \\\n\tfi\nendif\n\techo HASH > bench/disk1/HASH-SIZE\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-run \"echo HASHHASH > bench/disk1/HASH-SIZE\" --test-expect-failure -h sync\n\techo HASH > bench/disk1/HASH-TOUCH\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-run \"touch -t 200001011200 bench/disk1/HASH-TOUCH\" --test-expect-failure -h sync\n\techo HASH > bench/disk1/HASH-INODE\n\tcp -p bench/disk1/HASH-INODE bench/disk1/HASH-INODE-COPY\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-run \"mv bench/disk1/HASH-INODE-COPY bench/disk1/HASH-INODE\" --test-expect-failure -h sync\n\trm bench/disk1/HASH-CHMOD\n\trm bench/disk1/HASH-SIZE\n\trm bench/disk1/HASH-TOUCH\n\trm bench/disk1/HASH-INODE\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n#### SILENT ERRORS ####\n\t$(MSG) Silently corrupt some files, scrub and fix filtering for error. Test scrub patterns.\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./mktest$(EXEEXT) damage 1 1 1 bench/disk1/a/*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-expect-recoverable --test-force-scrub-at 100000 scrub\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) fix -e\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --percentage bad scrub\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --plan 1 scrub\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -o 0 scrub\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -p full scrub\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -p new scrub\n\t$(MSG) Silently corrupt some files, and sync with error presents\n\t$(TESTENV) ./mktest$(EXEEXT) write 2 1 1 bench/disk1/a/*\n\t$(TESTENV) ./mktest$(EXEEXT) damage 3 1 1 bench/disk2/a/*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-expect-recoverable sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status\n# Note that this fix -e command doesn't fix all the errors because\n# only the blocks touched by the sync are marked bad\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) fix -e\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check --test-expect-recoverable\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) fix\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -p full scrub\n\t$(MSG) Full sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -F sync\n\t$(MSG) Realloc sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -R sync\n#### SYNC PARTIAL ####\n\t$(MSG) Abort sync with additions. Delete some of them, and add others and sync again.\n\t$(MSG) This triggers files reallocation inside parity\n\tmkdir bench/disk1/c\n\tmkdir bench/disk1/d\n\tmkdir bench/disk1/e\n\tcp -pR bench/disk2/a/c* bench/disk1/c\n\tcp -pR bench/disk2/a/d* bench/disk1/d\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-kill-after-sync sync\n\trm -r bench/disk1/c\n\tcp -pR bench/disk2/a/e* bench/disk1/e\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(MSG) Abort sync with both deletions and additions. And delete and add some more and sync again.\n# Note that here we are depending of the previous state leaving dirs \"d\" and \"e\"\n\tmkdir bench/disk1/f\n\tcp -pR bench/disk3/a/f* bench/disk1/f\n\trm -r bench/disk1/d\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-kill-after-sync sync\n\tmkdir bench/disk1/g\n\tcp -pR bench/disk4/a/g* bench/disk1/g\n\trm -r bench/disk1/e\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\trm -r bench/disk1/f\n\trm -r bench/disk1/g\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Make a hole in the disk array and sync with --force-empty\n\tmv bench/disk2 bench/disk2.old\n\tmkdir bench/disk2\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --force-empty sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Use with the hole\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(HOLE) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(HOLE) check\n\trm -r bench/disk1/a\n\trm -r bench/disk3/a\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(HOLE) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(HOLE) check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(HOLE) test-dry\n\t$(MSG) Fill the hole with a new disk\n\trm -r bench/disk2\n\tmv bench/disk2.old bench/disk2\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Corrupt the content file\n\t$(TESTENV) ./mktest$(EXEEXT) write 1 100 100 bench/content\n\t$(FAILENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-failure -c $(CONF) sync\n\trm bench/content\n#### AGAIN MORE FILES ####\n\t$(MSG) Delete some files, create some new, sync and check\n\trm bench/disk1/a/1*\n\trm bench/disk2/a/2*\n\trm bench/disk3/a/3*\n\trm bench/disk4/a/4*\n\t$(TESTENV) ./mktest$(EXEEXT) generate 3 6 $(CHECKCOUNT) $(CHECKSIZE)\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Move some files, sync and check\n\tmv bench/disk1/a/7* bench/disk1/b/\n\tmv bench/disk2/a/7* bench/disk2/b/\n\tmv bench/disk3/a/7* bench/disk3/b/\n\tmv bench/disk4/a/7* bench/disk4/b/\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\nif !HAVE_MEMORY_CHECKER\n#### RECOVER 1 ####\n\t$(MSG) Delete one disk, fix and check with PAR1\n\trm -r bench/disk3\n\tmkdir bench/disk3\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR1) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n#### RECOVER 2 ####\n\t$(MSG) Delete two disks, fix and check with PAR2\n\trm -r bench/disk1\n\tmkdir bench/disk1\n\trm -r bench/disk2\n\tmkdir bench/disk2\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-unrecoverable -c $(PAR1) fix -l test-fail-strategy1.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR2) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n#### RECOVER 3 ####\n\t$(MSG) Delete three disks, fix and check with PAR3\n\trm -r bench/disk1\n\tmkdir bench/disk1\n\trm -r bench/disk2\n\tmkdir bench/disk2\n\trm -r bench/disk3\n\tmkdir bench/disk3\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-unrecoverable -c $(PAR2) fix -l test-fail-strategy2.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR3) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR3) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n#### RECOVER 4 ####\n\t$(MSG) Delete four disks, fix and check with PAR4\n\trm -r bench/disk3\n\tmkdir bench/disk3\n\trm -r bench/disk4\n\tmkdir bench/disk4\n\trm -r bench/disk5\n\tmkdir bench/disk5\n\trm -r bench/disk6\n\tmkdir bench/disk6\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-unrecoverable -c $(PAR3) fix -l test-fail-strategy3.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR4) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR4) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n#### RECOVER 5 ####\n\t$(MSG) Delete five disks, fix and check with PAR5\n\trm -r bench/disk1\n\tmkdir bench/disk1\n\trm -r bench/disk2\n\tmkdir bench/disk2\n\trm -r bench/disk3\n\tmkdir bench/disk3\n\trm -r bench/disk5\n\tmkdir bench/disk5\n\trm -r bench/disk6\n\tmkdir bench/disk6\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-unrecoverable -c $(PAR4) fix -l test-fail-strategy4.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR5) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR5) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n#### RECOVER 6 ####\n\t$(MSG) Delete six disks, fix and check with PAR6\n\trm -r bench/disk1\n\tmkdir bench/disk1\n\trm -r bench/disk2\n\tmkdir bench/disk2\n\trm -r bench/disk3\n\tmkdir bench/disk3\n\trm -r bench/disk4\n\tmkdir bench/disk4\n\trm -r bench/disk5\n\tmkdir bench/disk5\n\trm -r bench/disk6\n\tmkdir bench/disk6\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-unrecoverable -c $(PAR5) fix -l test-fail-strategy5.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR6) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR6) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\nendif\n#### MULTI STEP ####\n\t$(MSG) Delete some files and create some new, sync and check in multiple steps\n\trm bench/disk1/a/4*\n\trm bench/disk2/a/5*\n\trm bench/disk3/a/6*\n\trm bench/disk4/a/6*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -B 10 sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check -l test.log\n\t$(TESTENV) ./mktest$(EXEEXT) generate 4 6 $(CHECKCOUNT) $(CHECKSIZE)\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -B 100 sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -B 1000 sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Rehash to spooky2 and rehash even blocks\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-force-spooky2 rehash\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-force-scrub-even scrub\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) status\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Full sync to complete rehash\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -F sync\n\t$(MSG) Delete files from three disks and check/fix with import by data in PAR2\n\trm -r bench/disk1/a\n\trm -r bench/disk2/a\n\tmv bench/disk3/a bench/a\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-import-content bench/a -c $(PAR2) fix -l test.log\n\trm -r bench/a\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(MSG) Delete files from three disks and check/fix with import by timestamp in PAR2\n\trm -r bench/disk1/a\n\trm -r bench/disk2/a\n\tmv bench/disk3/a bench/a\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -i bench/a -c $(PAR2) fix -l test.log\n\trm -r bench/a\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(MSG) Delete files from three disks and check/fix with automatic import in PAR2\n\trm -r bench/disk1/a\n\trm -r bench/disk2/a\n\tmv bench/disk3/a bench/disk1/a_from_disk3\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) fix -l test.log\n\trm -r bench/disk1/a_from_disk3\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n#### SYNC ABORT ####\n\t$(MSG) Abort sync late with additions, delete them and recover with PAR2\n\t$(MSG) This triggers the recovering with q using p to check the validity\n\tcp -pR bench/disk1/a bench/disk1/a_copy\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-kill-after-sync -c $(CONF) sync\n\trm -r bench/disk1/a_copy\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) fix -l test.log\n\trm -r bench/disk1/a_copy\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(MSG) Abort sync early with additions, delete them and recover with PAR2\n\t$(MSG) This triggers the recovering with q using p to check the validity, but failing for new blocks being filled with zero\n\tcp -pR bench/disk1/a bench/disk1/a_copy\n# Ensure that there is at least one zero filled file\n\tdd bs=1 count=8192 if=/dev/zero of=bench/disk1/a_copy/ZERO_FILLED\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -B 1 --test-kill-after-sync -c $(CONF) sync\n\trm -r bench/disk1/a_copy\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-unrecoverable -c $(PAR2) fix -l test-fail-earlysyncadd.log\n\trm -r bench/disk1/a_copy\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(MSG) Abort sync late with additions with prehash and then delete the new additions and sync again\n\tcp -pR bench/disk1/a bench/disk1/a_copy\n\tcp -pR bench/disk2/a bench/disk2/a_copy\n\tcp -pR bench/disk3/a bench/disk3/a_copy\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-kill-after-sync -c $(CONF) -h sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\trm -r bench/disk1/a_copy\n\trm -r bench/disk2/a_copy\n\trm -r bench/disk3/a_copy\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(MSG) Abort sync late with additions and then delete the new additions and sync again\n\tcp -pR bench/disk1/a bench/disk1/a_copy\n\tcp -pR bench/disk2/a bench/disk2/a_copy\n\tcp -pR bench/disk3/a bench/disk3/a_copy\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-kill-after-sync -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\trm -r bench/disk1/a_copy\n\trm -r bench/disk2/a_copy\n\trm -r bench/disk3/a_copy\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(MSG) Abort sync late with additions and then delete some unchanged stuff and fix with PAR1\n\tcp -pR bench/disk1/b bench/disk1/b_copy\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) --test-kill-after-sync sync\n\trm -r bench/disk2\n\tmkdir bench/disk2\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) fix -l test.log\n\t$(MSG) Fixes again to restore all the parity\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) fix -l test.log\n\trm -r bench/disk1/b_copy\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(MSG) Abort sync late with more deletions than additions and then delete some unchanged stuff and fix with PAR1\n\tcp -pR bench/disk1/a bench/disk1/a_copy\n\tmv bench/disk1/a bench/a\n\tmv bench/disk1/b bench/b\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) --test-kill-after-sync sync\n\trm -r bench/disk2\n\tmkdir bench/disk2\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) fix -l test.log\n\t$(MSG) Fixes again to restore all the parity\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) fix -l test.log\n\t-rm -r bench/disk1/a\n\t-rm -r bench/disk1/b\n\trm -r bench/disk1/a_copy\n\tmv bench/a bench/disk1/a\n\tmv bench/b bench/disk1/b\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Abort sync early with more deletions than additions and then delete some unchanged stuff and fix with PAR2\n\tcp -pR bench/disk1/a bench/disk1/a_copy\n\tmv bench/disk1/a bench/a\n\tmv bench/disk1/b bench/b\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -B 1 --test-kill-after-sync sync\n\trm -r bench/disk2\n\tmkdir bench/disk2\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-unrecoverable -c $(PAR1) fix -l test-fail-earlysyncdel.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) fix -l test.log\n\t-rm -r bench/disk1/a\n\t-rm -r bench/disk1/b\n\trm -r bench/disk1/a_copy\n\tmv bench/a bench/disk1/a\n\tmv bench/b bench/disk1/b\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n#### RECOVER MISSING ####\n\t$(MSG) Delete some files, fix with -m and check with PAR1\n\trm bench/disk1/a/8*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR1) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) -m fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Delete some dirs in six disk, fix with -m and check\n\trm -r bench/disk1/b\n\trm -r bench/disk2/b\n\trm -r bench/disk3/b\n\trm -r bench/disk4/b\n\trm -r bench/disk5/b\n\trm -r bench/disk6/b\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-unrecoverable -c $(PAR5) fix -l test-full5.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(CONF) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -m fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n#### RECOVER BY DISK ####\n\t$(MSG) Delete some dirs in two disks, fix and check with PAR2 using the -d option for each disk\n\trm -r bench/disk2/b\n\trm -r bench/disk5/b\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-unrecoverable -c $(PAR1) check -l test-full1.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) -d disk2 fix -l test-part1.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) -d disk5 fix -l test-part2.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n#### RECOVER PARITY ####\n\t$(MSG) Delete the parity, fix and check with PAR1\n\trm bench/parity*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Delete the parity and the 2-parity, fix and check with PAR2\n\trm bench/parity*\n\trm bench/2-parity*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Delete the parity and a disk, fix and check with PAR2\n\trm bench/parity*\n\trm -r bench/disk2/b\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Delete the 2-parity and a disk, fix and check with PAR2\n\trm bench/2-parity*\n\trm -r bench/disk3/a\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Corrupt the parity, fix and check with PAR1\n\t$(TESTENV) ./mktest$(EXEEXT) write 1 100 10000 bench/parity*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR1) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) -a check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Corrupt the parity and the 2-parity, fix and check with PAR2\n\t$(TESTENV) ./mktest$(EXEEXT) write 2 100 10000 bench/parity*\n\t$(TESTENV) ./mktest$(EXEEXT) write 2 100 10000 bench/2-parity*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR2) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) -a check\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n#### RECOVER FILES AND PARITY ####\n\t$(MSG) Corrupt some files, fix and check with PAR1\n\t$(TESTENV) ./mktest$(EXEEXT) change 3 500 bench/disk2/b/*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR1) -a check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR1) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR1) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Corrupt some files, fix and check with PAR2 in verbose mode\n\t$(TESTENV) ./mktest$(EXEEXT) change 4 500 bench/disk2/b/*\n\t$(TESTENV) ./mktest$(EXEEXT) change 4 500 bench/disk3/b/*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) --test-expect-unrecoverable -c $(PAR1) check -l test.log > /dev/null\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS_VERBOSE) --test-expect-unrecoverable -c $(PAR1) fix -l test-fail-corrupt-verbose.log > /dev/null\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR2) -a check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR2) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Corrupt some files, fix and check with PAR2\n\t$(TESTENV) ./mktest$(EXEEXT) change 5 500 bench/disk2/b/*\n\t$(TESTENV) ./mktest$(EXEEXT) change 5 500 bench/disk3/b/*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-unrecoverable -c $(PAR1) check -l test-fail-corrupt-data.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR2) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Corrupt the parity and some files, fix and check with PAR2\n\t$(TESTENV) ./mktest$(EXEEXT) write 6 100 10000 bench/parity*\n\t$(TESTENV) ./mktest$(EXEEXT) change 6 500 bench/disk1/a/*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-unrecoverable -c $(PAR1) check -l test-fail-corrupt-parity.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR2) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Corrupt the 2-parity and some files, fix and check with PAR2\n\t$(TESTENV) ./mktest$(EXEEXT) write 7 100 10000 bench/2-parity*\n\t$(TESTENV) ./mktest$(EXEEXT) change 7 500 bench/disk1/a/*\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR1) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) --test-expect-recoverable -c $(PAR2) check -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(PAR2) fix -l test.log\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\n\t$(MSG) Sync after all the fixes\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) sync\n\t$(TESTENV) ./snapraid$(EXEEXT) $(CHECKFLAGS) -c $(CONF) check\nendif\n\t$(MSG) Regression test completed with SUCCESS!\n\t$(MSG) Please ignore any error message printed above, they are expected!\n\t$(MSG) Everything OK\n\n# Manual testing\n\nMANUAL = ./snapraid --test-skip-device -c test/test-par1.conf sync\n\nvalgrind:\n\tvalgrind \\\n\t\t--tool=memcheck \\\n\t\t--track-origins=yes \\\n\t\t--read-var-info=yes \\\n\t\t--leak-check=full \\\n\t\t-v $(MANUAL) \\\n\t\t2> valgrind.log\n\t\ttail valgrind.log\n\ncallgrind:\n\tvalgrind \\\n\t\t--tool=callgrind \\\n\t\t--dump-instr=yes \\\n\t\t--trace-jump=yes \\\n\t\t--collect-systime=yes \\\n\t\t-v $(MANUAL) \\\n\t\t2> callgrind.log\n\t\ttail callgrind.log\n\ncachegrind:\n\tvalgrind \\\n\t\t--tool=cachegrind \\\n\t\t-v $(MANUAL) \\\n\t\t2> cachegrind.log\n\t\ttail cachegrind.log\n\nlcov_reset:\n\tlcov --directory . -z\n\trm -f ./lcov.info\n\nlcov_capture:\n\tlcov --directory . --capture -o lcov.info\n\nlcov_html:\n\trm -rf ./cov\n\tmkdir cov\n\tgenhtml -o ./cov lcov.info\n\n# Rules for documentation\n\nif HAVE_ADVD2\nsnapraid.1 : snapraid.d\n\tadvd2 man < $(srcdir)/$< > $@\n\nsnapraid.txt : snapraid.d\n\tadvd2 txt < $(srcdir)/$< | todos > $@\n\nsnapraid.html : snapraid.d\n\tadvd2 html < $(srcdir)/$< > $@\n\nsnapraid.hh : snapraid.d\n\tadvd2 frame < $(srcdir)/$< > $@\nendif\n\n# Windows distribution\n\nDISTWIN = \\\n\tsnapraid.txt \\\n\tsnapraid.exe\n\ndistwindows-x86: $(DISTWIN)\n\trm -f $(PACKAGE)-$(VERSION)-windows-x86.zip\n\tmkdir tmp\n\tcp $(DISTWIN) tmp\n\tcp support/smartctl.exe tmp/smartctl.exe\n\ttodos < snapraid.conf.example.windows > tmp/snapraid.conf.example\n\ttodos < INSTALL.windows > tmp/install.txt\n\ttodos < README > tmp/readme.txt\n\ttodos < AUTHORS > tmp/authors.txt\n\ttodos < HISTORY > tmp/history.txt\n\ttodos < COPYING > tmp/copying.txt\n\ttodos < TODO > tmp/todo.txt\n\tcd tmp && zip -r ../$(PACKAGE)-$(VERSION)-windows-x86.zip *\n\trm -r tmp\n\ndistwindows-x64: $(DISTWIN)\n\trm -f $(PACKAGE)-$(VERSION)-windows-x64.zip\n\tmkdir tmp\n\tcp $(DISTWIN) tmp\n\tcp support/smartctl.exe tmp/smartctl.exe\n\ttodos < snapraid.conf.example.windows > tmp/snapraid.conf.example\n\ttodos < INSTALL.windows > tmp/install.txt\n\ttodos < README > tmp/readme.txt\n\ttodos < AUTHORS > tmp/authors.txt\n\ttodos < HISTORY > tmp/history.txt\n\ttodos < COPYING > tmp/copying.txt\n\ttodos < TODO > tmp/todo.txt\n\tcd tmp && zip -r ../$(PACKAGE)-$(VERSION)-windows-x64.zip *\n\trm -r tmp\n\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 1.0244140625,
          "content": "SnapRAID\n========\n\nSnapRAID is a backup program designed for disk arrays, storing\nparity information for data recovery in the event of up to six\ndisk failures.\n\nPrimarily intended for home media centers with large,\ninfrequently changing files, SnapRAID offers several features:\n\n* You can utilize disks already filled with files without the\n  need to reformat them, accessing them as usual.\n* All your data is hashed to ensure data integrity and prevent\n  silent corruption.\n* When the number of failed disks exceeds the parity count,\n  data loss is confined to the affected disks; data on\n  other disks remains accessible.\n* If you accidentally delete files on a disk, recovery is\n  possible.\n* Disks can have different sizes.\n* You can add disks at any time.\n* SnapRAID doesn't lock in your data; you can stop using it\n  anytime without reformatting or moving data.\n* To access a file, only a single disk needs to spin, saving\n  power and reducing noise.\n\nFor more information, please visit the official SnapRAID site:\n\n\t\t:http://www.snapraid.it/\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 18.421875,
          "content": "SnapRAID TODO\n=============\n\nThis is the list of TODO items for SnapRAID.\n\n- Next\n\n* Add an option to ignore a specific Smart attribute. This solves PullRequest #17 an #21\n\n* Support BTRFS subvolumes. Keep track of the subvolumeid, along with the inode, and use it when searching/comparing inodes.\nThe value 0 can be used for the root volume, like a normal filesystem.\nSee: https://github.com/kdave/btrfs-progs/tree/master/libbtrfsutil\n\n* A \"dependents\" output option to [--test-fmt file|disk|path|dependents] for LIST. \nExample, snapraid LIST --test-fmt dependents >FileList_with_dependents.txt\nThe goal is a filelist that, for every file, includes full paths to the dependent files \non other data disks needed to repair that file (in addition to the parity data).\n\nI created a thread about it here: https://sourceforge.net/p/snapraid/discussion/1677233/thread/6e872fdae0/\n- Minor\n\n* Add a new -u, --filter-updated command that filters files\nwith a different timestamp, to be able to restore only them to the previous state.\nSee: https://sourceforge.net/p/snapraid/discussion/1677233/thread/e26e787d/\n\n* Allow to filter in diff/list by disk name.\nNot checked disks should be allowed to be missing.\n\n* Add an option to ignore subsecond timestamp.\nLike when you copy data to a filesystem with less timestamp precision.\n\n* Use threads to scan all the disks at the same time.\n- After 7.0 Windows changes it seems fast enough even\nwith a mono thread implementation with 100.0000 files.\n+ But if you have millions of files, it could take minutes.\n\n* Support more parity levels\nIt can be done with a generic computation function, using\nintrinsic for SSSE3 and AVX instructions.\nIt would be interesting to compare performance with the hand-written\nassembler functions. Eventually we can convert them to use intrinsic also.\nhttps://sourceforge.net/p/snapraid/discussion/1677233/thread/9dbd7581/\n\n* Extend haspdeep to support the SnapRAID hash :\nhttps://github.com/jessek/hashdeep/\nhttps://sourceforge.net/p/snapraid/discussion/1677233/thread/90b0e9b2/?limit=25\n\n* Add a \"noaccessdenied\" config option to exclude not readable files/dirs.\nLike the \"nohidden\".\nSee: https://sourceforge.net/p/snapraid/discussion/1677233/thread/1409c26a/\n\n* Don't insert new files if they are new opened by other applications.\nNot yet sure how to check if a file is open in a fast way.\nIn case we can exclude files created too recently, like with a --min-age option.\nSee: https://sourceforge.net/p/snapraid/discussion/1677233/thread/a1683dd9/?limit=25#1e16\n\n* Add markdown support for output\nSee: https://sourceforge.net/p/snapraid/discussion/1677233/thread/661cce8b/\n\n* Add ZFS support for SMART and UUID.\nSee latest messages at: https://sourceforge.net/p/snapraid/discussion/1677233/thread/42defa3b/\n\n* Change all the path printed in the terminal as relative and not absolute.\nhttps://sourceforge.net/p/snapraid/discussion/1677233/thread/648955ec/ (Leifi in diff)\nhttps://sourceforge.net/p/snapraid/discussion/1677233/thread/5b6ef1b9/ (Miles in check + filter)\nPartially done. Now you can control it with --test-fmt\n\n* Add ReFS support with 128 bits inode\nSee: https://sourceforge.net/p/snapraid/discussion/1677233/thread/2be14f63/\nhttps://github.com/Microsoft/Windows-driver-samples/blob/master/filesys/miniFilter/avscan/filter/utility.h\nhttps://github.com/Microsoft/Windows-driver-samples/blob/master/filesys/miniFilter/avscan/filter/utility.c\nhttps://github.com/Microsoft/Windows-driver-samples/blob/master/filesys/miniFilter/delete/delete.c\nPartially done. Until the inodes are less than 64 bit, everything works.\nIf a 128 bit inode is found, it aborts with \"Invalid inode number! Is this ReFS?\"\n\n* When a disk is replaced, and SnapRAID detect this by a UUID change, we could clear the\nscrub information for that disk.\nhttps://sourceforge.net/p/snapraid/discussion/1677233/thread/ee87901b/\n\n* In fix, automatic --import excluded directory in the config file.\nhttps://sourceforge.net/p/snapraid/discussion/1677233/thread/c80c42e5/?limit=25\n\n* Allow to have \"partial\" parity disks, smaller than required ?\nhttps://sourceforge.net/p/snapraid/discussion/1677233/thread/e924c663/\n\n* How to handle corrupt copied/moved files ? At now pre-hash checks them,\nbut if a corruption is found, it stops the sync process.\nThis is not optimal, because the 'sync' command is stopped instead to continue.\nA possible solution could be:\nIf a copied block is corrupt, we can recover the original one from parity (if moved),\nor read it directly from disk (if copied), and we can use this one to build the parity,\nworking around the corruption, that can be later fixed with \"fix\".\nThis requires to allocate blocks of moved files in parity positions *after* the\ncurrently used one.\n\n* Some programs are misusing the FILE_ATTRIBUTE_TEMPORARY.\nIn fact, it makes sense as it's a good way to control the cache on the file,\nso, despite the name, that usage could be common for not temporary files.\nhttps://sourceforge.net/p/snapraid/discussion/1677233/thread/57d40108/\n\n* Restore ownership and permissions, at least in Unix.\n\n* Restore directory timestamps.\n\n* Add an option for dup to list only duplicates with different name.\nThis supposing that if a file has the same name, it's intentionally duplicated.\n\n* In fix an existing symlink with the same name of a file to be recovered may stop\nthe process making the create() operation to fail.\nThe same for directories, when recreating the directory tree.\n\n* If a directory exists with the same name of a parity/content file be more explicative\non the error message. See: https://sourceforge.net/projects/snapraid/forums/forum/1677233/topic/4861034\n\n* We don't try to do partial block recovering. A block is correct or not.\nBut if only some bytes, or a sector, is wrong, it should be possible to recover all the\nrest of the block.\nThe problem is that we don't have any hash to ensure that the block is partially recovered,\nor completely garbage. But it makes sense to anyway write the \"most likely\" correct one.\n\n- Naming\n\n* A new 'init' command to differentiate the first 'sync' operation.\nThis 'init' will work also without a content file, and parity files.\nInstead 'sync' will require all of them.\nThis will also help when running with the parity filesystem unmounted.\n\n* Rename sync->backup and fix->restore. It seems to me a naming expressing\nbetter the meaning of the commands. But not yet sure.\n\n- Pooling\n\n* Add a new \"commit\" command to move changes from the pool to the array.\nIt should:\n- Move files copied into the pool (that are no links) to the array.\nThe files should be moved to the disk that contains most of the files\nin the directory. If no space, try with the disk with less files\nin the directory, and eventually the disk in the array with more free space.\n- Detect renames, and apply them in the array.\nThe file will be renamed and moved to the new directory, if changed,\nbut kept in the same disk of the array.\n- Detect deletes, and move file in the array to a \"/trash/\" directory\nof the same disk. For safety no real deletion is done.\nFile with the same name will get an extra extension like \".1\", \".2\".\n\n- Major\n\n* Uses a separated file for storing hashes, to allow to use a memory\nmapped file to decrease memory utilization.\nThe file can contains hashes stored in the same order they are accessed\nin sync/check/scrub.\n+ A lot less memory utilization\n- It will be slow in --pre-hash as the files are accessed in another order,\nbut no much slow.\n- How to handle multiple .content file copy ? When working we can have\nonly a single file. When storing the .content we'll have to copy it\nin all the places.\n* Can we mix the existing and new approach ? We can create this\nhash file at startup in a memory mapped \"temporary\" file.\nIt may takes some time to create it, but then it will be fast.\nSee: https://sourceforge.net/p/snapraid/discussion/1677233/thread/cdea773f/\n\n* Allocate parity minimizing concurrent use of it\nEach parity allocation should check for a parity\nrange with less utilization by other disks.\nWe need to take care do disable this mechanism when the parity space\nis near to fillup the parity partition.\nSee: https://sourceforge.net/p/snapraid/discussion/1677233/thread/1797bf7d/\n+ This increase the possibility of recovering with multiple failures with not\nenough parity, as the benefit of existing parity is maximized.\n- Possible increase of fragmentation of parity allocation\n- No real benefit when the array is filled\n\n\nRejected TODO\n=============\n\nThis is a list of rejected TODO items.\n\n* Allow multiple parity files and to coexist with data\nin the same disk.\nThis is possible if the data in the same disk uses parity addresses not\ncontained in the parity file present in the same disk.\n+ It's a nice trick. The disk containing parity, will have less space available,\nand then it will need less parity, resolving the problem of the parity disk being too small.\n+ We can also think at an automated parity files naming and creation, removing\nthe need of the user to specify that. We can also completely remove the\nconcept of parity drive, automatically allocating parity in the most free data drives.\n- It won't be not nice to have the program to automatically\nchoose where to create the parity, because the choice cannot be optimal.\nWith a dedicated disk manually chosen, it's instead optimal.\n+ We can limit this coexist possibility only to latest parity file,\nallowing the user to choose where to put it.\n- It won't work with disks of different size.\nSuppose to have all disks of size N, with only one of size M>N.\nTo fully use the M space, you can allocate a full N parity in such disk,\nbut the remaining space will also need additional parity in the other disks,\nin fact requiring a total of M parity for the array.\nIn the end, we cannot avoid that the first biggest disk added is fully\ndedicated to parity, even if it means to leave some space unused.\n\n* Directly access disks for parity skipping the filesystem layer\n- No real performance or space gain compared to a custom filesystem configuration like:\nmkfs.ext3 -i 16777216 -m0 -O ^dir_index,large_file,sparse_super /dev/sdX1\nSee: https://sourceforge.net/p/snapraid/discussion/1677233/thread/9c0ef324/?limit=25\n\n* Allow to specify more than one disk directories to cover the case of multi partitions.\nDifferent partitions have duplicate inode. The only way to support this is to\nadd also a kind of device_id, increasing the memory required.\nBut it should be only few bits for each file. So, it should be manageable.\nA lot of discussions about this feature :)\nhttps://sourceforge.net/p/snapraid/discussion/1677233/thread/b2cd9385/\n- The only benefit is to distribute better the data. This could help the recovery process,\nin case of multiple failures. But no real usability or functionality benefit in the normal\ncase.\n\n* https://sourceforge.net/p/snapraid/discussion/1677233/thread/2cb97e8a/\nHave two hashes for each file. One for the first segment, that may use only a part of the first parity block.\nAnd a second hash that takes care of the final segment, also using only part of a parity block.\nIntermediate blocks can be handled like now.\nThe first and last segment can use only a part of the parity block, sharing it with other files,\nand then allowing big parity blocks.\n+ Big parity block, like 1MB, and small file allocation, like 4KB.\n- It won't be possible to copy hash info from one disk to another, as copied files\nmay have a different block splitting. Copied file should be allocated with the same exact\nsplitting.\n- Dup detection can be handled with a dedicated hash covering the full file. But increasing\nthe number of hash for each file to three.\n- No way to handle block import.\n\n* Create a filesystem snapshot at every sync, and use it in all the other commands\nautomatically.\nAt the next sync, drop the old snapshot and create a new one.\nThis should help recovering, because we'll have the exact copy used by sync.\nThis feature can be enabled with a specific option, and available\nin Windows using Shadow Copy, and in Linux using Btrfs, and in a generic\nUnix using ZFS.\nSee Jens's Windows script at: http://sourceforge.net/p/snapraid/discussion/1677233/thread/a1707211/\nNote that a different between Windows and Unix is that in Windows old snapshots\nare automatically deleted.\n\n* Checks if splitting hash/parity computation in 4K pages\ncan improve speed in sync. That should increase cache locality,\nbecause we read the data two times for hash and parity,\nand if we manage to keep it in the cache, we should save time.\n- We now hash first the faster disks, and this could\nreduce performance as we'll have to wait for all disks.\n\n* Enable storing of creation time NTFS, crtime/birth time EXT4.\nBut see: http://unix.stackexchange.com/questions/50177/birth-is-empty-on-ext4\ncoreutils stat has an example, but it doesn't work in Linux (see lib/stat-time.h)\n- Not supported in Linux.\n\n* In the content file save the timestamp of the parity files.\nIf they do not match, stop the processing.\nThis can be done to avoid to use not synchronized parity and content files,\nresulting in wrong data.\nBut if the sync process is killed we need a way to resyncronize them.\nOr maybe we should allow parity newer than content, but not viceversa.\n- The corner cases are too many. A fixed parity may be never.\nA someway modified content may be never. So, the time is not really significant.\n\n* Use Async IO for Linux (libaio).\nSee thread: https://sourceforge.net/p/snapraid/discussion/1677233/thread/a300a10b/\nDocs at: http://www.fsl.cs.sunysb.edu/~vass/linux-aio.txt\n- Implemented for scrub in the \"libaio\" branch, but it's slower of\nabout 20% in my machine.\n\n* Allow to put parity directly into the underline block device without the need\nof any filesystem.\nThat would allow to increase a lot the free space for parity.\nWe can implement some kind of filesystem detection to avoid to overwrite an already\nexisting filesystem.\n- Still risky if stuffs go wrong.\n- In Linux with largefile4 there is only a very small amount of space wasted.\nIn the order of 0.01%. Not really worth to do it.\n- With NTFS the saving is also limited, because the \"reserved\" MFT of 12.5% is\nnot really exclusively reserved, but can be used also for normal files,\nwhen all the remaining space is filled.\n\n* The data could be compressed before processing, resulting in parity block of\nfixed size, but matching different data block sizes.\nThe complexity is that a file blocks will have to be allocated at runtime,\nand you may run out of them in the middle of the processing.\nWe need also a way to compress a stream until the compressed data reach the\nblock size, but no more, and then start a new block.\nFor each block, we'll have also to store. \"size_uncompressed\", \"size_compressed\",\n\"hash\".\n- It will be too slow.\n- Not addressing the problem of a lot of small files, as still one block will be\nallocated for each file.\n\n* Uses different block size for parity and file allocation.\nWe can use a big size, like 1MB for parity allocation and hash computation,\nand at the same time using a 4K blocks for files allocation.\nThis means that a parity blocks may contain more than one file.\n- We'll have to drop the dup and import feature,\nbecause it won't be possible anymore to compare the hash of files,\nas it would depend also on the start address inside the parity block.\n- When a hash fail, it won't be possible to tell which file is really\nbroken, because more file may share the same parity block.\n\n* Have special parity blocks containing the last blocks of more files\nuntil it's filled up.\nFor such parity blocks, we'll have more than one hash. One for each\nfile contained.\n- Parity will be too fragmented, because we'll have parity blocks\ncontaining the last blocks of many files.\n\n* In \"pool\" for Windows, and for unique directories a junction to the\ndirectory could be used, avoiding to use symlinks to files.\nThis allows to overcome the problem of sharing symlinks.\n- It would work, in fact it would work to well. The problem is that\nWindows will treat the junction as the real directory, like *really*\ndeleting its content from Explorer pressing \"del\" and also from the\ncommand line with \"rd\". Too dangerous.\n\n* When fixing, before overwriting the present file, make a copy of it just in\ncase that the original file cannot be completely recovered.\nWe can always open files in read-only mode, if a write is required, we close it,\nrename it to with a .bak extension, and rewrite it up to the required size.\nThe same for symlink if a file with the same name exist or viceversa.\n- The idea behind this is to avoid to leave untouched a file if we cannot\nrestore it completely. But it's debatable what's better in this case.\nAnyway, considering the typical use, it's not really relevant.\n\n* In the import list, uses also all the blocks in the array.\nBut we must cover the case of bad blocks. Likely we can just check the\nhash after reading, and in case, skip it, and retry with another copy.\n- It will work only for duplicate files. Not really worth do to it.\n\n* Save the content file in compressed .gz format to save space.\n- Compression is too slow. Even using the very fast lzo.\n$ time lzop  -1 < content > content.lzo\nreal    1m23.014s\nuser    0m40.822s\nsys     0m3.389s\n\n$ time ./gzip -1 < content > content.gz\nreal    1m47.463s\nuser    1m23.732s\nsys     0m3.290s\n\n$ time ./gzip --huffonly < content > contentH.gz\nreal    1m51.607s\nuser    1m30.032s\nsys     0m3.245s\n\nSimilar command done with snapraid without compression, and involving also decoding\nand encoding takes less time.\n\n$ time ./snapraid --test-skip-device --test-skip-self -v -c ./test.conf test-rewrite\nreal    0m59.087s\nuser    0m14.164s\nsys     0m4.398s\n\n* Recognizes that a file is moved from one disk to another, and if the parity\ndata doesn't overlap, do not recompute it.\n- It's going to work only in RAID5 mode and only in special cases.\n\n* Implements a multithread sync command to share HASH and RAID computations\nto different CPUs.\n- At now it's questionable if it will result in a performance improvement.\nThe murmur3 hash, and the RAID5/6 computations are so fast that even a single\nthread should be able to do them.\nUse the \"snapraid -T\" comment to see the speed.\n\n* In the repair() function the heuristic to detect if we recovered after the sync,\ncan be extended to all the previous blocks, because we always proceed in block\norder during a sync.\nSo, if for a block we can detect that we recovered using updated parity data,\nalso for all the previous blocks this is true.\nAnyway, the case where this information could be useful should be present\nonly if changes are committed after an aborted sync.\n- No real advantage on that, beside some speed gain in fix.\nThe risk would be instead to miss some recovery opportunity.\nSo, makes sense to have it a little slower but trying any\npossible recovery strategy.\n\n\n"
        },
        {
          "name": "acinclude.m4",
          "type": "blob",
          "size": 0.3916015625,
          "content": "dnl @synopsis AC_CHECK_CC_OPT(flag, ifyes, ifno)\ndnl \ndnl Shows a message as like \"checking whether gcc accepts flag ... no\"\ndnl and executes ifyes or ifno.\n\nAC_DEFUN([AC_CHECK_CC_OPT],\n[\nAC_MSG_CHECKING([whether ${CC-cc} accepts $1])\necho 'void f(){}' > conftest.c\nif test -z \"`${CC-cc} -c $1 conftest.c 2>&1`\"; then\n  AC_MSG_RESULT([yes])\n  $2\nelse\n  AC_MSG_RESULT([no])\n  $3\nfi\nrm -f conftest*\n])\n\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.1865234375,
          "content": "#!/bin/sh\n#\necho \"Generating build information using autoreconf\"\n\n# All is done by autoreconf\nautoreconf -f -i\n\n# Run configure for this platform\necho \"Now you are ready to run ./configure\"\n\n"
        },
        {
          "name": "autover.sh",
          "type": "blob",
          "size": 0.3232421875,
          "content": "#!/bin/sh\n#\n\nif [ -d .git ]; then\n    # Get version from git tags, removing the 'v' prefix\n    VERSION=`git describe --match 'v*' 2>/dev/null | sed 's/^v//'`\nfi\n\nif [ -f .version ]; then\n    # Get version from the .version file\n    VERSION=`cat .version`\nfi\n\nif [ -z $VERSION ]; then\n    VERSION=\"none\"\nfi\n\nprintf '%s' \"$VERSION\"\n\n"
        },
        {
          "name": "cmdline",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 11.2451171875,
          "content": "dnl Process this file with autoconf to produce a configure script.\nAC_PREREQ([2.65])\ndnl Get version number from git\nm4_define([git_revision], m4_esyscmd_s([./autover.sh]))\nAC_INIT([snapraid], [git_revision], [], [], [http://www.snapraid.it])\nAM_INIT_AUTOMAKE([foreign no-dependencies subdir-objects])\nAC_CONFIG_SRCDIR([cmdline/snapraid.c])\nAC_CONFIG_HEADERS([config.h])\nAC_CANONICAL_HOST\n\ndnl Checks for programs.\nAC_PROG_CC\nAC_USE_SYSTEM_EXTENSIONS\nAC_CHECK_PROG([VALGRIND],[valgrind],[valgrind],[])\nAC_CHECK_PROG([WINE],[wine],[wine],[])\nAC_CHECK_PROG([SDE],[sde],[sde],[])\nAC_CHECK_PROG([ADVD2],[advd2],[advd2],[])\nAM_CONDITIONAL(HAVE_ADVD2, [test x\"$ADVD2\" != x])\n\ndnl Options to improve stacktrace\nAC_CHECK_CC_OPT([-fno-omit-frame-pointer], CFLAGS=\"$CFLAGS -fno-omit-frame-pointer\", [])\nAC_CHECK_CC_OPT([-fno-inline-functions-called-once], CFLAGS=\"$CFLAGS -fno-inline-functions-called-once\", [])\nAC_CHECK_CC_OPT([-fno-inline-small-functions], CFLAGS=\"$CFLAGS -fno-inline-small-functions\", [])\nAC_CHECK_CC_OPT([-rdynamic], CFLAGS=\"$CFLAGS -rdynamic\", [])\n# This the new default for gcc 10\nAC_CHECK_CC_OPT([-fno-common], CFLAGS=\"$CFLAGS -fno-common\", [])\n\ndnl Checks for system.\nAC_SYS_LARGEFILE\n\ndnl Checks for header files.\nAC_HEADER_ASSERT\nAC_HEADER_DIRENT\nAC_HEADER_TIME\nAC_HEADER_SYS_WAIT\nAC_CHECK_HEADERS([fcntl.h stddef.h stdint.h stdlib.h string.h limits.h])\nAC_CHECK_HEADERS([unistd.h getopt.h fnmatch.h io.h inttypes.h byteswap.h])\nAC_CHECK_HEADERS([pthread.h math.h])\nAC_CHECK_HEADERS([sys/file.h sys/ioctl.h sys/sysmacros.h sys/mkdev.h])\nAC_CHECK_HEADERS([linux/fiemap.h linux/fs.h mach/mach_time.h execinfo.h])\n\ndnl Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_C_INLINE\nAC_C_RESTRICT\nAC_C_VOLATILE\nAC_TYPE_SIZE_T\nAC_TYPE_OFF_T\nAC_TYPE_SIZE_T\nAC_TYPE_SSIZE_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\nAC_TYPE_UINT8_T\nAC_TYPE_INT8_T\nAC_STRUCT_DIRENT_D_INO\nAC_STRUCT_DIRENT_D_TYPE\nAC_CHECK_MEMBERS([struct stat.st_nlink, struct stat.st_mtim.tv_nsec, struct stat.st_mtimensec, struct stat.st_mtimespec.tv_nsec], [], [], [[\n#if HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#if HAVE_SYS_STAT_H\n#include <sys/stat.h>\n#endif\n#if HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n]])\n\ndnl Checks for library functions.\nAC_CHECK_FUNCS([memset strchr strerror strrchr mkdir gettimeofday strtoul])\nAC_CHECK_FUNCS([getopt getopt_long snprintf vsnprintf sigaction])\nAC_CHECK_FUNCS([ftruncate fallocate access])\nAC_CHECK_FUNCS([fsync posix_fadvise sync_file_range])\nAC_CHECK_FUNCS([getc_unlocked ferror_unlocked fnmatch])\nAC_CHECK_FUNCS([futimes futimens futimesat localtime_r lutimes utimensat])\nAC_CHECK_FUNCS([fstatat flock])\nAC_CHECK_FUNCS([mach_absolute_time])\nAC_CHECK_FUNCS([backtrace backtrace_symbols])\nAC_SEARCH_LIBS([clock_gettime], [rt])\nAC_CHECK_FUNCS([clock_gettime])\nAC_CHECK_CC_OPT([-pthread], CFLAGS=\"$CFLAGS -pthread\", CFLAGS=\"$CFLAGS -D_REENTRANT\")\nAC_CHECK_FUNCS([pthread_create])\nAC_SEARCH_LIBS([exp], [m])\n\ndnl Checks for statfs for linux avoiding to include sys/mount.h that is required only in darwin\ndnl In glibc since 7eae6a91e9b1670330c9f15730082c91c0b1d570, milestone 2.36, sys/mount.h defines fsconfig_command which conflicts with linux/mount.h\nAC_CHECK_HEADERS([sys/vfs.h sys/statfs.h])\nAC_CHECK_DECLS([statfs], [], [\n\tAC_CHECK_HEADERS([sys/param.h sys/mount.h])\n\t], [[\n#if HAVE_SYS_VFS_H\n#include <sys/vfs.h>\n#endif\n#if HAVE_SYS_STATFS_H\n#include <sys/statfs.h>\n#endif\n]])\nAC_CHECK_FUNCS([statfs])\n\nAC_CHECK_MEMBERS([struct statfs.f_type], [], [], [[\n#if HAVE_SYS_PARAM_H\n#include <sys/param.h>\n#endif\n#if HAVE_SYS_MOUNT_H\n#include <sys/mount.h>\n#endif\n#if HAVE_SYS_VFS_H\n#include <sys/vfs.h>\n#endif\n#if HAVE_SYS_STATFS_H\n#include <sys/statfs.h>\n#endif\n]])\n\nAC_CHECK_MEMBERS([struct statfs.f_fstypename], [], [], [[\n#if HAVE_SYS_PARAM_H\n#include <sys/param.h>\n#endif\n#if HAVE_SYS_MOUNT_H\n#include <sys/mount.h>\n#endif\n#if HAVE_SYS_VFS_H\n#include <sys/vfs.h>\n#endif\n#if HAVE_SYS_STATFS_H\n#include <sys/statfs.h>\n#endif\n]])\n\ndnl Checks for libblkid\nAC_ARG_WITH([blkid],\n    AS_HELP_STRING([--without-blkid], [Ignore presence of blkid and disable it]))\nAS_IF([test \"x$with_blkid\" != \"xno\"],\n\t[AC_SEARCH_LIBS([blkid_probe_all], [blkid], [have_blkid=yes], [have_blkid=no])],\n\t[have_blkid=no])\nAS_IF([test \"x$have_blkid\" = \"xyes\"],\n\t[\n\t\tAC_CHECK_HEADERS([blkid/blkid.h])\n\t\tAC_CHECK_FUNCS([blkid_devno_to_devname blkid_get_tag_value])\n\t],\n\t[AS_IF([test \"x$with_blkid\" = \"xyes\"],\n\t\t[AC_MSG_ERROR([blkid requested but not found])\n\t])\n])\n\ndnl Checks for architecture\nAC_C_BIGENDIAN\n\ndnl Checks for compiler\nAC_CHECK_CC_OPT([-Wall], CFLAGS=\"$CFLAGS -Wall\", [])\nAC_CHECK_CC_OPT([-Wextra], CFLAGS=\"$CFLAGS -Wextra\", [])\nAC_CHECK_CC_OPT([-Wuninitialized], CFLAGS=\"$CFLAGS -Wuninitialized\", [])\nAC_CHECK_CC_OPT([-Wshadow], CFLAGS=\"$CFLAGS -Wshadow\", [])\n\ndnl Disable warning about zero-length-bounds raised by gcc 10 on linux kernel header on the fm_extents field\nAC_CHECK_CC_OPT([-Wno-zero-length-bounds], CFLAGS=\"$CFLAGS -Wno-zero-length-bounds\", [])\n\ndnl Checks for asm\nAC_ARG_ENABLE([asm],\n\tAS_HELP_STRING([--disable-asm], [Disable inline assembly]))\nAS_IF([test \"x$enable_asm\" != \"xno\"],\n\t[AC_DEFINE([HAVE_ASSEMBLY], [1], [Define to 1 if inline assembly should be used.])]\n\ndnl AS_IF(HAVE_ASSEMBLY) NOT closed here\n\ndnl Checks for AS supporting the SSE2 instructions.\nAC_MSG_CHECKING([for sse2])\nasmsse2=no\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#if defined(__i386__) || defined(__x86_64__)\n\tvoid f(void)\n\t{\n\t\tasm volatile(\"pxor %xmm0,%xmm1\");\n\t}\n#else\n#error not x86\n#endif\n]])],\n[AC_DEFINE([HAVE_SSE2], [1], [Define to 1 if sse2 is supported by the assembler.]) asmsse2=yes])\nAC_MSG_RESULT([$asmsse2])\n\ndnl Checks for AS supporting the SSSE3 instructions.\nAC_MSG_CHECKING([for ssse3])\nasmssse3=no\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#if defined(__i386__) || defined(__x86_64__)\n\tvoid f(void)\n\t{\n\t\tasm volatile(\"pshufb %xmm0,%xmm1\");\n\t}\n#else\n#error not x86\n#endif\n]])],\n[AC_DEFINE([HAVE_SSSE3], [1], [Define to 1 if ssse3 is supported by the assembler.]) asmssse3=yes])\nAC_MSG_RESULT([$asmssse3])\n\ndnl Checks for AS supporting the SSE4.2 instructions.\nAC_MSG_CHECKING([for sse42])\nasmsse42=no\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#if defined(__i386__) || defined(__x86_64__)\n\tunsigned f(unsigned crc, unsigned char b)\n\t{\n\t\tasm volatile(\"crc32b %1, %0\" : \"+r\" (crc) : \"rm\" (b));\n\t\treturn crc;\n\t}\n#else\n#error not x86\n#endif\n]])],\n[AC_DEFINE([HAVE_SSE42], [1], [Define to 1 if sse4.2 is supported by the assembler.]) asmsse42=yes])\nAC_MSG_RESULT([$asmsse42])\n\ndnl Checks for AS supporting the AVX2 instructions.\nAC_MSG_CHECKING([for avx2])\nasmavx2=no\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#if defined(__i386__) || defined(__x86_64__)\n\tvoid f(void* ptr)\n\t{\n\t\tasm volatile(\"vbroadcasti128 %0, %%ymm0\" : : \"m\" (ptr));\n\t}\n#else\n#error not x86\n#endif\n]])],\n[AC_DEFINE([HAVE_AVX2], [1], [Define to 1 if avx2 is supported by the assembler.]) asmavx2=yes])\nAC_MSG_RESULT([$asmavx2])\n\ndnl AS_IF(HAVE_ASSEMBLY) closed here\n)\n\ndnl Checks for test environment\nAS_CASE([$host],\n\t[*-*-mingw*],\n\t[\n\tTESTENV=\"$WINE\"\n\tFAILENV=\"$TESTENV\"\n\t],\n\t[POSIX=1]\n)\nAM_CONDITIONAL(HAVE_POSIX, [test x\"$POSIX\" != x])\n\nAC_ARG_ENABLE([profiler],\n\t[AS_HELP_STRING([--enable-profiler],[enable the use of gprof for code coverage])],\n\t[\n\tCFLAGS=\"-O2 -pg -g -pthread\"\n\t],\n\t[])\n\nAC_ARG_ENABLE([coverage],\n\t[AS_HELP_STRING([--enable-coverage],[enable the use of gcov for code coverage])],\n\t[\n\tCFLAGS=\"-O0 -g -fprofile-arcs -ftest-coverage -pthread\"\n\t],\n\t[])\n\nAC_ARG_ENABLE([valgrind],\n\t[AS_HELP_STRING([--enable-valgrind],[enable the use of valgrind in testing])],\n\t[\n\tTESTENV=\"$VALGRIND --leak-check=full --error-exitcode=1\"\n\tFAILENV=\"$VALGRIND --error-exitcode=1\"\n\tCFLAGS=\"$CFLAGS -DCHECKER\"\n\tMEMORY_CHECKER=1\n\t],\n\t[])\n\nAC_ARG_ENABLE([sgcheck],\n\t[AS_HELP_STRING([--enable-sgcheck],[enable the use of sgcheck in testing])],\n\t[\n\tTESTENV=\"$VALGRIND --tool=exp-sgcheck --suppressions=valgrind.supp --error-exitcode=1\"\n\tFAILENV=\"$TESTENV\"\n\tCFLAGS=\"$CFLAGS -DCHECKER\"\n\tMEMORY_CHECKER=1\n\t],\n\t[])\n\nAC_ARG_ENABLE([helgrind],\n\t[AS_HELP_STRING([--enable-helgrind],[enable the use of helgrind in testing])],\n\t[\n\tTESTENV=\"$VALGRIND --tool=helgrind --fair-sched=try --error-exitcode=1\"\n\tFAILENV=\"$TESTENV\"\n\tCFLAGS=\"$CFLAGS -DCHECKER\"\n\tTHREAD_CHECKER=1\n\t],\n\t[])\n\nAC_ARG_ENABLE([drd],\n\t[AS_HELP_STRING([--enable-drd],[enable the use of drd in testing])],\n\t[\n\tTESTENV=\"$VALGRIND --tool=drd --fair-sched=try --error-exitcode=1\"\n\tFAILENV=\"$TESTENV\"\n\tCFLAGS=\"$CFLAGS -DCHECKER\"\n\tTHREAD_CHECKER=1\n\t],\n\t[])\n\nAC_ARG_ENABLE([asan],\n\t[AS_HELP_STRING([--enable-asan],[enable the use of AddressSanitizer in testing])],\n\t[\n\tCFLAGS=\"$CFLAGS -DCHECKER -fsanitize=address\"\n\tMEMORY_CHECKER=1\n\t],\n\t[])\n\nAC_ARG_ENABLE([msan],\n\t[AS_HELP_STRING([--enable-msan],[enable the use of MemorySanitizer in testing])],\n\t[\n\tCFLAGS=\"$CFLAGS -DCHECKER -fsanitize=memory\"\n\tMEMORY_CHECKER=1\n\t],\n\t[])\n\nAC_ARG_ENABLE([ubsan],\n\t[AS_HELP_STRING([--enable-ubsan],[enable the use of UndefinedBehaviourSanitizer in testing])],\n\t[\n\tCFLAGS=\"$CFLAGS -DCHECKER -fsanitize=undefined\"\n\tMEMORY_CHECKER=1\n\t],\n\t[])\n\nAC_ARG_ENABLE([tsan],\n\t[AS_HELP_STRING([--enable-tsan],[enable the use of ThreadSanitizer in testing])],\n\t[\n\tCFLAGS=\"$CFLAGS -DCHECKER -fsanitize=thread\"\ndnl Use MEMORY_CHECKER instead of THREAD_CHECKER to run the full and long test\n\tMEMORY_CHECKER=1\n\t],\n\t[])\n\nAM_CONDITIONAL(HAVE_MEMORY_CHECKER, [test x\"$MEMORY_CHECKER\" != x])\nAM_CONDITIONAL(HAVE_THREAD_CHECKER, [test x\"$THREAD_CHECKER\" != x])\n\nAC_ARG_ENABLE([sde],\n\t[AS_HELP_STRING([--enable-sde],[enable the use of SDE emulator in testing])],\ndnl p4p -> Pentium4 Prescott with SSE2\ndnl mrm -> Merom with SSSE3\ndnl nhm -> Nehalem with SSE4.2\ndnl hsw -> Haswell with AVX2\ndnl knl -> Knights Landing with AVX512\n\t[\n\tTESTENV_SSE2=\"$SDE -p4p --\"\n\tTESTENV_SSSE3=\"$SDE -mrm --\"\n\tTESTENV_SSE42=\"$SDE -nhm --\"\n\tTESTENV_AVX2=\"$SDE -hsw --\"\n\tEMULATOR=1\n\t# Target CPU compatible with P4 Prescott\n\tCFLAGS=\"$CFLAGS -march=athlon64\"\n\t],\n\t[])\nAM_CONDITIONAL(HAVE_EMULATOR, [test x\"$EMULATOR\" != x])\n\nAC_ARG_ENABLE([debug],\n\t[AS_HELP_STRING([--enable-debug],[enable debugging])],\n\t[\n\tCFLAGS=\"-Og -g -pthread -Wall -Wextra\"\n\tAC_CHECK_CC_OPT([-rdynamic], CFLAGS=\"$CFLAGS -rdynamic\", [])\n\t],\n\t[])\n\nAC_ARG_ENABLE([warning-as-error],\n\t[AS_HELP_STRING([--enable-warning-as-error],[stop build on warnings])],\n\t[\n\tAC_CHECK_CC_OPT([-Werror], CFLAGS=\"$CFLAGS -Werror\", [])\n\tdnl This avoid the Darwin error: clang: error: argument unused during compilation: '-pthread'\n\tdnl See: https://llvm.org/bugs/show_bug.cgi?id=7798\n\tAC_CHECK_CC_OPT([-Wno-error=unused-command-line-argument], CFLAGS=\"$CFLAGS -Wno-error=unused-command-line-argument\", [])\n\t],\n\t[])\n\nAC_ARG_ENABLE([warning],\n\t[AS_HELP_STRING([--enable-warning],[enable extra warning])],\n\t[\n\tAC_CHECK_CC_OPT([-Wpointer-arith], CFLAGS=\"$CFLAGS -Wpointer-arith\", [])\n\tAC_CHECK_CC_OPT([-Wcast-qual], CFLAGS=\"$CFLAGS -Wcast-qual\", [])\n\tAC_CHECK_CC_OPT([-Wunused], CFLAGS=\"$CFLAGS -Wunused\", [])\n\tAC_CHECK_CC_OPT([-Wunreachable-code], CFLAGS=\"$CFLAGS -Wunreachable-code\", [])\n\tAC_CHECK_CC_OPT([-Wpadded], CFLAGS=\"$CFLAGS -Wpadded\", [])\n\tAC_CHECK_CC_OPT([-Weverything], CFLAGS=\"$CFLAGS -Weverything\", [])\n\t],\n\t[])\n\nAC_ARG_VAR([TESTENV], [Test environment])\nAC_ARG_VAR([FAILENV], [Test environment for failing tests])\nAC_ARG_VAR([TESTENV_SSE2], [Test environment for SSE2])\nAC_ARG_VAR([TESTENV_SSSE3], [Test environment for SSSE3])\nAC_ARG_VAR([TESTENV_SSE42], [Test environment for SSE42])\nAC_ARG_VAR([TESTENV_AVX2], [Test environment for AVX2])\n\nAC_CONFIG_FILES([Makefile])\nAC_OUTPUT\n\n"
        },
        {
          "name": "configure.windows-x64",
          "type": "blob",
          "size": 0.0732421875,
          "content": "./configure --host=x86_64-w64-mingw32.static --build=`./config.guess` $@\n\n\n"
        },
        {
          "name": "configure.windows-x86",
          "type": "blob",
          "size": 0.0712890625,
          "content": "./configure --host=i686-w64-mingw32.static --build=`./config.guess` $@\n\n\n"
        },
        {
          "name": "makecov.sh",
          "type": "blob",
          "size": 0.185546875,
          "content": "#!/bin/sh\n#\n# Run the Coverage test\n#\n\nmake distclean\n\nif ! ./configure --enable-coverage --enable-sde; then\n\texit 1\nfi\n\nif ! make lcov_reset check lcov_capture lcov_html; then\n\texit 1\nfi\n\n\n"
        },
        {
          "name": "makedist.sh",
          "type": "blob",
          "size": 0.533203125,
          "content": "#!/bin/sh\n#\n\nCHECK=check\nDEBUG=\n\nif test \"x$1\" = \"x-f\"; then\nCHECK=all\nfi\n\nif test \"x$1\" = \"x-d\"; then\nDEBUG=--enable-debug\nfi\n\nmake distclean\n\n# Reconfigure (with force) to get the latest revision from git\nautoreconf -f\n\nif ! ./configure.windows-x86 $DEBUG; then\n\texit 1\nfi\n\nif ! make distwindows-x86 distclean; then\n\texit 1\nfi\n\nif ! ./configure.windows-x64 $DEBUG; then\n\texit 1\nfi\n\nif ! make -j4 $CHECK; then\n\texit 1\nfi\n\nif ! make distwindows-x64 distclean; then\n\texit 1\nfi\n\nif ! ./configure ; then\n\texit 1\nfi\n\nif ! make dist; then\n\texit 1\nfi\n\n"
        },
        {
          "name": "makesan.sh",
          "type": "blob",
          "size": 0.984375,
          "content": "#!/bin/sh\n#\n# Run all the Sanitizers available\n#\n\n# Compiler to use\nCOMPILER=clang\n\n# Options for configure\n# --disable-asm\n#   Inline assembly is not supported by the Sanitizers\n# --without-blkid\n#   External libraries are not supported by the Sanitizers\nOPTIONS=\"--disable-asm --without-blkid\"\n\n# Source directory\nSOURCE=`pwd`\n\n# Dest directory\nDEST=`mktemp -d`\n\nmake distclean\n\ncd $DEST\n\n# AddressSanitizer\nif ! $SOURCE/configure --enable-asan $OPTIONS CC=$COMPILER; then\n\texit 1\nfi\n\nif ! make check distclean; then\n\texit 1\nfi\n\n# UndefinedBehaviourSanitizer\nif ! $SOURCE/configure --enable-ubsan $OPTIONS CC=$COMPILER; then\n\texit 1\nfi\n\nif ! make check distclean; then\n\texit 1\nfi\n\n# MemorySanitizer\nif ! $SOURCE/configure --enable-msan $OPTIONS CC=$COMPILER; then\n\texit 1\nfi\n\nif ! make check distclean; then\n\texit 1\nfi\n\n# ThreadSanitizer\nif ! $SOURCE/configure --enable-tsan $OPTIONS CC=$COMPILER; then\n\texit 1\nfi\n\nif ! make check distclean; then\n\texit 1\nfi\n\ncd $SOURCE\n\nif ! ./configure; then\n\texit 1\nfi\n\n"
        },
        {
          "name": "makescan.sh",
          "type": "blob",
          "size": 0.48046875,
          "content": "#!/bin/sh\n#\n# Run the Coverity Scan static analyzer\n#\n\nrm -r cov-int\n\nmake distclean\n\n# Reconfigure (with force) to get the latest revision from git\nautoreconf -f\n\nif ! ./configure ; then\n\texit 1\nfi\n\nexport PATH=$PATH:contrib/cov-analysis-linux64-2020.09/bin\n\nif ! cov-build --dir cov-int make; then\n\texit 1\nfi\n\nREVISION=`sh autover.sh`\n\ntar czf snapraid-$REVISION.tgz cov-int\n\nrm -r cov-int\n\necho snapraid-$REVISION.tgz ready to upload to https://scan.coverity.com/projects/1986/builds/new\n\n"
        },
        {
          "name": "makesum.sh",
          "type": "blob",
          "size": 0.0908203125,
          "content": "#!/bin/sh\n\necho sha256 > CHECKSUMS\ncd archive && sha256sum * | sort -k 2 -V >> ../CHECKSUMS\n\n"
        },
        {
          "name": "maketest.sh",
          "type": "blob",
          "size": 0.724609375,
          "content": "#!/bin/sh\n#\n# Run all the Coverage and Valgrind tests\n#\n\n# Source directory\nSOURCE=`pwd`\n\n# Dest directory\nDEST=`mktemp -d`\n\nmake distclean\n\ncd $DEST\n\n# Coverage\nif ! $SOURCE/configure --enable-coverage --enable-sde; then\n\texit 1\nfi\n\nif ! make lcov_reset check lcov_capture lcov_html; then\n\texit 1\nfi\n\ncp -a cov $SOURCE/cov\n\nif ! make distclean; then\n\texit 1\nfi\n\n# Valgrind\nif ! $SOURCE/configure --enable-valgrind; then\n\texit 1\nfi\n\nif ! make check distclean; then\n\texit 1\nfi\n\n# Helgrind\nif ! $SOURCE/configure --enable-helgrind; then\n\texit 1\nfi\n\nif ! make check distclean; then\n\texit 1\nfi\n\n# Drd\nif ! $SOURCE/configure --enable-drd; then\n\texit 1\nfi\n\nif ! make check distclean; then\n\texit 1\nfi\n\ncd $SOURCE\n\nif ! ./configure; then\n\texit 1\nfi\n\n"
        },
        {
          "name": "raid",
          "type": "tree",
          "content": null
        },
        {
          "name": "snapraid-rpm.spec",
          "type": "blob",
          "size": 0.8310546875,
          "content": "Name:           snapraid\nSummary:        Disk array backup for many large rarely-changed files\nVersion:        12.2\nRelease:        3%{?dist}\nLicense:        GPLv3+\nGroup:          Applications/System\nURL:            http://www.snapraid.it/\nSource:         https://github.com/amadvance/snapraid/releases/download/v%{version}/snapraid-%{version}.tar.gz\nBuildRequires:  gcc\n\n%description\nSnapRAID is a backup program for disk arrays. It stores parity\ninformation of your data and it's able to recover from up to six disk\nfailures. SnapRAID is mainly targeted for a home media center, with a\nlot of big files that rarely change.\n\n%prep\n%setup -q\n\n%build\n%configure\nmake %{?_smp_mflags}\n\n%check\nmake check\n\n%install\nmake install DESTDIR=%{buildroot}\n\n%files\n%doc COPYING AUTHORS HISTORY README\n%{_bindir}/snapraid\n%{_mandir}/man1/snapraid.1*\n\n%changelog\n\n"
        },
        {
          "name": "snapraid.1",
          "type": "blob",
          "size": 52.119140625,
          "content": ".TH \"SnapRAID Backup For Disk Arrays\" 1\n.SH NAME\nsnapraid \\- SnapRAID Backup For Disk Arrays\n.SH SYNOPSIS \nsnapraid [\\-c, \\-\\-conf CONFIG]\n.PD 0\n.PP\n.PD\n\t[\\-f, \\-\\-filter PATTERN] [\\-d, \\-\\-filter\\-disk NAME]\n.PD 0\n.PP\n.PD\n\t[\\-m, \\-\\-filter\\-missing] [\\-e, \\-\\-filter\\-error]\n.PD 0\n.PP\n.PD\n\t[\\-a, \\-\\-audit\\-only] [\\-h, \\-\\-pre\\-hash] [\\-i, \\-\\-import DIR]\n.PD 0\n.PP\n.PD\n\t[\\-p, \\-\\-plan PERC|bad|new|full]\n.PD 0\n.PP\n.PD\n\t[\\-o, \\-\\-older\\-than DAYS] [\\-l, \\-\\-log FILE]\n.PD 0\n.PP\n.PD\n\t[\\-Z, \\-\\-force\\-zero] [\\-E, \\-\\-force\\-empty]\n.PD 0\n.PP\n.PD\n\t[\\-U, \\-\\-force\\-uuid] [\\-D, \\-\\-force\\-device]\n.PD 0\n.PP\n.PD\n\t[\\-N, \\-\\-force\\-nocopy] [\\-F, \\-\\-force\\-full]\n.PD 0\n.PP\n.PD\n\t[\\-R, \\-\\-force\\-realloc]\n.PD 0\n.PP\n.PD\n\t[\\-S, \\-\\-start BLKSTART] [\\-B, \\-\\-count BLKCOUNT]\n.PD 0\n.PP\n.PD\n\t[\\-L, \\-\\-error\\-limit NUMBER]\n.PD 0\n.PP\n.PD\n\t[\\-v, \\-\\-verbose] [\\-q, \\-\\-quiet]\n.PD 0\n.PP\n.PD\n\tstatus|smart|up|down|diff|sync|scrub|fix|check|list|dup\n.PD 0\n.PP\n.PD\n\t|pool|devices|touch|rehash\n.PD 0\n.PP\n.PD\n.PP\nsnapraid [\\-V, \\-\\-version] [\\-H, \\-\\-help] [\\-C, \\-\\-gen\\-conf CONTENT]\n.PD 0\n.PP\n.PD\n.SH DESCRIPTION \nSnapRAID is a backup program designed for disk arrays, storing\nparity information for data recovery in the event of up to six\ndisk failures.\n.PP\nPrimarily intended for home media centers with large,\ninfrequently changing files, SnapRAID offers several features:\n.PD 0\n.IP \\(bu\nYou can utilize disks already filled with files without the\nneed to reformat them, accessing them as usual.\n.IP \\(bu\nAll your data is hashed to ensure data integrity and prevent\nsilent corruption.\n.IP \\(bu\nWhen the number of failed disks exceeds the parity count,\ndata loss is confined to the affected disks; data on\nother disks remains accessible.\n.IP \\(bu\nIf you accidentally delete files on a disk, recovery is\npossible.\n.IP \\(bu\nDisks can have different sizes.\n.IP \\(bu\nYou can add disks at any time.\n.IP \\(bu\nSnapRAID doesn\\'t lock in your data; you can stop using it\nanytime without reformatting or moving data.\n.IP \\(bu\nTo access a file, only a single disk needs to spin, saving\npower and reducing noise.\n.PD\n.PP\nFor more information, please visit the official SnapRAID site:\n.PP\n.RS 4\nhttp://www.snapraid.it/\n.PD 0\n.PP\n.PD\n.RE\n.SH LIMITATIONS \nSnapRAID is in between a RAID and a Backup program trying to get the best\nbenefits of them. Although it also has some limitations that you should\nconsider before using it.\n.PP\nThe main one is that if a disk fails, and you haven\\'t recently synced,\nyou may be unable to do a complete recover.\nMore specifically, you may be unable to recover up to the size of\nthe changed or deleted files from the last sync operation.\nThis happens even if the files changed or deleted are not in the\nfailed disk. This is why SnapRAID is better suited for\ndata that rarely change.\n.PP\nOn the other hand, newly added files don\\'t prevent recovering already\nexisting files. You may only lose the recently added files, if they are on\nthe failed disk.\n.PP\nOther SnapRAID limitations are:\n.PD 0\n.IP \\(bu\nWith SnapRAID, you still have separate file\\-systems for each disk.\nWith RAID you get a single large file\\-system.\n.IP \\(bu\nSnapRAID doesn\\'t stripe data.\nWith RAID you get a speed boost with striping.\n.IP \\(bu\nSnapRAID doesn\\'t support real\\-time recovery.\nWith RAID you do not have to stop working when a disk fails.\n.IP \\(bu\nSnapRAID is able to recover damages only from a limited number of disks.\nWith a Backup you can recover from a complete\nfailure of the whole disk array.\n.IP \\(bu\nOnly file, time\\-stamps, symlinks and hardlinks are saved.\nPermissions, ownership and extended attributes are not saved.\n.PD\n.SH GETTING STARTED \nTo use SnapRAID you need to first select one disk of your disk array\nto dedicate at the \\[dq]parity\\[dq] information. With one disk for parity you\nwill be able to recover from a single disk failure, like RAID5.\n.PP\nIf you want to be able to recover from more disk failures, like RAID6,\nyou must reserve additional disks for parity. Any additional parity\ndisk allow to recover from one more disk failure.\n.PP\nAs parity disks, you have to pick the biggest disks in the array,\nas the parity information may grow in size as the biggest data\ndisk in the array.\n.PP\nThese disks will be dedicated to store the \\[dq]parity\\[dq] files.\nYou should not store your data in them.\n.PP\nThen you have to define the \\[dq]data\\[dq] disks that you want to protect\nwith SnapRAID. The protection is more effective if these disks\ncontain data that rarely change. For this reason it\\'s better to\nDO NOT include the Windows C:\\\\ disk, or the Unix /home, /var and /tmp\ndisks.\n.PP\nThe list of files is saved in the \\[dq]content\\[dq] files, usually\nstored in the data, parity or boot disks.\nThese files contain the details of your backup, with all the\ncheck\\-sums to verify its integrity.\nThe \\[dq]content\\[dq] file is stored in multiple copies, and each one must\nbe in a different disk, to ensure that in even in case of multiple\ndisk failures at least one copy is available.\n.PP\nFor example, suppose that you are interested only at one parity level\nof protection, and that your disks are present in:\n.PP\n.RS 4\n/mnt/diskp <\\- selected disk for parity\n.PD 0\n.PP\n.PD\n/mnt/disk1 <\\- first disk to protect\n.PD 0\n.PP\n.PD\n/mnt/disk2 <\\- second disk to protect\n.PD 0\n.PP\n.PD\n/mnt/disk3 <\\- third disk to protect\n.PD 0\n.PP\n.PD\n.RE\n.PP\nyou have to create the configuration file /etc/snapraid.conf with\nthe following options:\n.PP\n.RS 4\nparity /mnt/diskp/snapraid.parity\n.PD 0\n.PP\n.PD\ncontent /var/snapraid/snapraid.content\n.PD 0\n.PP\n.PD\ncontent /mnt/disk1/snapraid.content\n.PD 0\n.PP\n.PD\ncontent /mnt/disk2/snapraid.content\n.PD 0\n.PP\n.PD\ndata d1 /mnt/disk1/\n.PD 0\n.PP\n.PD\ndata d2 /mnt/disk2/\n.PD 0\n.PP\n.PD\ndata d3 /mnt/disk3/\n.PD 0\n.PP\n.PD\n.RE\n.PP\nIf you are in Windows, you should use the Windows path format, with drive\nletters and backslashes instead of slashes.\n.PP\n.RS 4\nparity E:\\\\snapraid.parity\n.PD 0\n.PP\n.PD\ncontent C:\\\\snapraid\\\\snapraid.content\n.PD 0\n.PP\n.PD\ncontent F:\\\\array\\\\snapraid.content\n.PD 0\n.PP\n.PD\ncontent G:\\\\array\\\\snapraid.content\n.PD 0\n.PP\n.PD\ndata d1 F:\\\\array\\\\\n.PD 0\n.PP\n.PD\ndata d2 G:\\\\array\\\\\n.PD 0\n.PP\n.PD\ndata d3 H:\\\\array\\\\\n.PD 0\n.PP\n.PD\n.RE\n.PP\nIf you have many disks, and you run out of drive letters, you can mount\ndisks directly in sub folders. See:\n.PP\n.RS 4\nhttps://www.google.com/search?q=Windows+mount+point\n.PD 0\n.PP\n.PD\n.RE\n.PP\nAt this point you are ready to start the \\[dq]sync\\[dq] command to build the\nparity information.\n.PP\n.RS 4\nsnapraid sync\n.PD 0\n.PP\n.PD\n.RE\n.PP\nThis process may take some hours the first time, depending on the size\nof the data already present in the disks. If the disks are empty\nthe process is immediate.\n.PP\nYou can stop it at any time pressing Ctrl+C, and at the next run it\nwill start where interrupted.\n.PP\nWhen this command completes, your data is SAFE.\n.PP\nNow you can start using your array as you like, and periodically\nupdate the parity information running the \\[dq]sync\\[dq] command.\n.SS Scrubbing \nTo periodically check the data and parity for errors, you can\nrun the \\[dq]scrub\\[dq] command.\n.PP\n.RS 4\nsnapraid scrub\n.PD 0\n.PP\n.PD\n.RE\n.PP\nThis command verifies the data in your array comparing it with\nthe hash computed in the \\[dq]sync\\[dq] command.\n.PP\nEvery run of the command checks about the 8% of the array, but not data\nalready scrubbed in the previous 10 days.\nYou can use the \\-p, \\-\\-plan option to specify a different amount,\nand the \\-o, \\-\\-older\\-than option to specify a different age in days.\nFor example, to check 5% of the array older than 20 days use:\n.PP\n.RS 4\nsnapraid \\-p 5 \\-o 20 scrub\n.PD 0\n.PP\n.PD\n.RE\n.PP\nIf during the process, silent or input/output errors are found,\nthe corresponding blocks are marked as bad in the \\[dq]content\\[dq] file,\nand listed in the \\[dq]status\\[dq] command.\n.PP\n.RS 4\nsnapraid status\n.PD 0\n.PP\n.PD\n.RE\n.PP\nTo fix them, you can use the \\[dq]fix\\[dq] command filtering for bad blocks with\nthe \\-e, \\-\\-filter\\-error options:\n.PP\n.RS 4\nsnapraid \\-e fix\n.PD 0\n.PP\n.PD\n.RE\n.PP\nAt the next \\[dq]scrub\\[dq] the errors will disappear from the \\[dq]status\\[dq] report\nif really fixed. To make it fast, you can use \\-p bad to scrub only blocks\nmarked as bad.\n.PP\n.RS 4\nsnapraid \\-p bad scrub\n.PD 0\n.PP\n.PD\n.RE\n.PP\nTake care that running \\[dq]scrub\\[dq] on a not synced array may result in\nerrors caused by removed or modified files. These errors are reported\nin the \\[dq]scrub\\[dq] result, but related blocks are not marked as bad.\n.SS Pooling \nTo have all the files in your array shown in the same directory tree,\nyou can enable the \\[dq]pooling\\[dq] feature. It consists in creating a\nread\\-only virtual view of all the files in your array using symbolic\nlinks.\n.PP\nYou can configure the \\[dq]pooling\\[dq] directory in the configuration file with:\n.PP\n.RS 4\npool /pool\n.PD 0\n.PP\n.PD\n.RE\n.PP\nor, if you are in Windows, with:\n.PP\n.RS 4\npool C:\\\\pool\n.PD 0\n.PP\n.PD\n.RE\n.PP\nand then run the \\[dq]pool\\[dq] command to create or update the virtual view.\n.PP\n.RS 4\nsnapraid pool\n.PD 0\n.PP\n.PD\n.RE\n.PP\nIf you are using a Unix platform and you want to share such directory\nin the network to either Windows or Unix machines, you should add\nto your /etc/samba/smb.conf the following options:\n.PP\n.RS 4\n# In the global section of smb.conf\n.PD 0\n.PP\n.PD\nunix extensions = no\n.PD 0\n.PP\n.PD\n.RE\n.PP\n.RS 4\n# In the share section of smb.conf\n.PD 0\n.PP\n.PD\n[pool]\n.PD 0\n.PP\n.PD\ncomment = Pool\n.PD 0\n.PP\n.PD\npath = /pool\n.PD 0\n.PP\n.PD\nread only = yes\n.PD 0\n.PP\n.PD\nguest ok = yes\n.PD 0\n.PP\n.PD\nwide links = yes\n.PD 0\n.PP\n.PD\nfollow symlinks = yes\n.PD 0\n.PP\n.PD\n.RE\n.PP\nIn Windows the same sharing operation is not so straightforward,\nbecause Windows shares the symbolic links as they are, and that\nrequires the network clients to resolve them remotely.\n.PP\nTo make it working, besides sharing in the network the pool directory,\nyou must also share all the disks independently, using as share points\nthe disk names as defined in the configuration file. You must also specify in\nthe \\[dq]share\\[dq] option of the configure file, the Windows UNC path that remote\nclients needs to use to access such shared disks.\n.PP\nFor example, operating from a server named \\[dq]darkstar\\[dq], you can use\nthe options:\n.PP\n.RS 4\ndata d1 F:\\\\array\\\\\n.PD 0\n.PP\n.PD\ndata d2 G:\\\\array\\\\\n.PD 0\n.PP\n.PD\ndata d3 H:\\\\array\\\\\n.PD 0\n.PP\n.PD\npool C:\\\\pool\n.PD 0\n.PP\n.PD\nshare \\\\\\\\darkstar\n.PD 0\n.PP\n.PD\n.RE\n.PP\nand share the following dirs in the network:\n.PP\n.RS 4\n\\\\\\\\darkstar\\\\pool \\-> C:\\\\pool\n.PD 0\n.PP\n.PD\n\\\\\\\\darkstar\\\\d1 \\-> F:\\\\array\n.PD 0\n.PP\n.PD\n\\\\\\\\darkstar\\\\d2 \\-> G:\\\\array\n.PD 0\n.PP\n.PD\n\\\\\\\\darkstar\\\\d3 \\-> H:\\\\array\n.PD 0\n.PP\n.PD\n.RE\n.PP\nto allow remote clients to access all the files at \\\\\\\\darkstar\\\\\\\\pool.\n.PP\nYou may also need to configure remote clients enabling access at remote\nsymlinks with the command:\n.PP\n.RS 4\nfsutil behavior set SymlinkEvaluation L2L:1 R2R:1 L2R:1 R2L:1\n.PD 0\n.PP\n.PD\n.RE\n.SS Undeleting \nSnapRAID is more like a backup program than a RAID system, and it\ncan be used to restore or undelete files to their previous state using\nthe \\-f, \\-\\-filter option :\n.PP\n.RS 4\nsnapraid fix \\-f FILE\n.PD 0\n.PP\n.PD\n.RE\n.PP\nor for a directory:\n.PP\n.RS 4\nsnapraid fix \\-f DIR/\n.PD 0\n.PP\n.PD\n.RE\n.PP\nYou can also use it to recover only accidentally deleted files inside\na directory using the \\-m, \\-\\-filter\\-missing option, that restores\nonly missing files, leaving untouched all the others.\n.PP\n.RS 4\nsnapraid fix \\-m \\-f DIR/\n.PD 0\n.PP\n.PD\n.RE\n.PP\nOr to recover all the deleted files in all the drives with:\n.PP\n.RS 4\nsnapraid fix \\-m\n.PD 0\n.PP\n.PD\n.RE\n.SS Recovering \nThe worst happened, and you lost one or more disks!\n.PP\nDO NOT PANIC! You will be able to recover them!\n.PP\nThe first thing you have to do is to avoid further changes at your disk array.\nDisable any remote connection to it, any scheduled process, including any\nscheduled SnapRAID nightly sync or scrub.\n.PP\nThen proceed with the following steps.\n.SS STEP 1 \\-> Reconfigure \nYou need some space to recover, even better if you already have additional\nspare disks, but in case, also an external USB or remote disk is enough.\n.PP\nChange the SnapRAID configuration file to make the \\[dq]data\\[dq] or \\[dq]parity\\[dq]\noption of the failed disk to point to the place where you have enough empty\nspace to recover the files.\n.PP\nFor example, if you have that disk \\[dq]d1\\[dq] failed, you can change from:\n.PP\n.RS 4\ndata d1 /mnt/disk1/\n.PD 0\n.PP\n.PD\n.RE\n.PP\nto:\n.PP\n.RS 4\ndata d1 /mnt/new_spare_disk/\n.PD 0\n.PP\n.PD\n.RE\n.PP\nIf the disk to recover is a parity disk, change the appropriate \\[dq]parity\\[dq]\noption.\nIf you have more broken disks, change all their configuration options.\n.SS STEP 2 \\-> Fix \nRun the fix command, storing the log in an external file with:\n.PP\n.RS 4\nsnapraid \\-d NAME \\-l fix.log fix\n.PD 0\n.PP\n.PD\n.RE\n.PP\nWhere NAME is the name of the disk, like \\[dq]d1\\[dq] as in our previous example.\nIn case the disk to recover is a parity disk, use the \\[dq]parity\\[dq], \\[dq]2\\-parity\\[dq]\nnames.\nIf you have more broken disks, use multiple \\-d options to specify all\nof them.\n.PP\nThis command will take a long time.\n.PP\nTake care that you need also few gigabytes free to store the fix.log file.\nRun it from a disk with some free space.\n.PP\nNow you have recovered all the recoverable. If some file is partially or totally\nunrecoverable, it will be renamed adding the \\[dq].unrecoverable\\[dq] extension.\n.PP\nYou can get a detailed list of all the unrecoverable blocks in the fix.log file\nchecking all the lines starting with \\[dq]unrecoverable:\\[dq]\n.PP\nIf you are not satisfied of the recovering, you can retry it as many\ntime you wish.\n.PP\nFor example, if you have removed files from the array after the last\n\\[dq]sync\\[dq], this may result in some other files not recovered.\nIn this case, you can retry the \\[dq]fix\\[dq] using the \\-i, \\-\\-import option,\nspecifying where these files are now, to include them again in the\nrecovering process.\n.PP\nIf you are satisfied of the recovering, you can now proceed further,\nbut take care that after syncing you cannot retry the \\[dq]fix\\[dq] command\nanymore!\n.SS STEP 3 \\-> Check \nAs paranoid check, you can now run a \\[dq]check\\[dq] command to ensure that\neverything is OK on the recovered disk.\n.PP\n.RS 4\nsnapraid \\-d NAME \\-a check\n.PD 0\n.PP\n.PD\n.RE\n.PP\nWhere NAME is the name of the disk, like \\[dq]d1\\[dq] as in our previous example.\n.PP\nThe options \\-d and \\-a tell SnapRAID to check only the specified disk,\nand ignore all the parity data.\n.PP\nThis command will take a long time, but if you are not paranoid,\nyou can skip it.\n.SS STEP 4 \\-> Sync \nRun the \\[dq]sync\\[dq] command to re\\-synchronize the array with the new disk.\n.PP\n.RS 4\nsnapraid sync\n.PD 0\n.PP\n.PD\n.RE\n.PP\nIf everything is recovered, this command is immediate.\n.SH COMMANDS \nSnapRAID provides a few simple commands that allow to:\n.PD 0\n.IP \\(bu\nPrints the status of the array \\-> \\[dq]status\\[dq]\n.IP \\(bu\nControls the disks \\-> \\[dq]smart\\[dq], \\[dq]up\\[dq], \\[dq]down\\[dq]\n.IP \\(bu\nMakes a backup/snapshot \\-> \\[dq]sync\\[dq]\n.IP \\(bu\nPeriodically checks data \\-> \\[dq]scrub\\[dq]\n.IP \\(bu\nRestore the last backup/snapshot \\-> \\[dq]fix\\[dq].\n.PD\n.PP\nTake care that the commands have to be written in lower case.\n.SS status \nPrints a summary of the state of the disk array.\n.PP\nIt includes information about the parity fragmentation, how old\nare the blocks without checking, and all the recorded silent\nerrors encountered while scrubbing.\n.PP\nNote that the information presented refers at the latest time you\nrun \\[dq]sync\\[dq]. Later modifications are not taken into account.\n.PP\nIf bad blocks were detected, their block numbers are listed.\nTo fix them, you can use the \\[dq]fix \\-e\\[dq] command.\n.PP\nIt also shows a graph representing the last time each block\nwas scrubbed or synced. Scrubbed blocks are shown with \\'*\\',\nblocks synced but not yet scrubbed with \\'o\\'.\n.PP\nNothing is modified.\n.SS smart \nPrints a SMART report of all the disks of the array.\n.PP\nIt includes an estimation of the probability of failure in the next\nyear allowing to plan maintenance replacements of the disks that show\nsuspicious attributes.\n.PP\nThis probability estimation obtained correlating the SMART attributes\nof the disks, with the Backblaze data available at:\n.PP\n.RS 4\nhttps://www.backblaze.com/hard\\-drive\\-test\\-data.html\n.PD 0\n.PP\n.PD\n.RE\n.PP\nIf SMART reports that a disk is failing, \\[dq]FAIL\\[dq] or \\[dq]PREFAIL\\[dq] is printed\nfor that disk, and SnapRAID returns with an error.\nIn this case an immediate replacement of the disk is highly recommended.\n.PP\nOther possible strings are:\n.RS 4\n.PD 0\n.HP 4\n.I logfail\nIn the past some attributes were lower than\nthe threshold.\n.HP 4\n.I logerr\nThe device error log contains errors.\n.HP 4\n.I selferr\nThe device self\\-test log contains errors.\n.PD\n.RE\n.PP\nIf the \\-v, \\-\\-verbose option is specified a deeper statistical analysis\nis provided. This analysis can help you to decide if you need more\nor less parity.\n.PP\nThis command uses the \\[dq]smartctl\\[dq] tool, and it\\'s equivalent to run\n\\[dq]smartctl \\-a\\[dq] on all the devices.\n.PP\nIf your devices are not auto\\-detected correctly, you can configure\na custom command using the \\[dq]smartctl\\[dq] option in the configuration\nfile.\n.PP\nNothing is modified.\n.SS up \nSpins up all the disks of the array.\n.PP\nYou can spin\\-up only some specific disks using the \\-d, \\-\\-filter\\-disk option.\n.PP\nTake care that spinning\\-up all the disks at the same time needs a lot of power.\nEnsure that your power\\-supply can sustain that.\n.PP\nNothing is modified.\n.SS down \nSpins down all the disks of the array.\n.PP\nThis command uses the \\[dq]smartctl\\[dq] tool, and it\\'s equivalent to run\n\\[dq]smartctl \\-s standby,now\\[dq] on all the devices.\n.PP\nYou can spin\\-down only some specific disks using the \\-d, \\-\\-filter\\-disk option.\n.PP\nNothing is modified.\n.SS diff \nLists all the files modified from the last \\[dq]sync\\[dq] that need to have\ntheir parity data recomputed.\n.PP\nThis command doesn\\'t check the file data, but only the file time\\-stamp\nsize and inode.\n.PP\nAt the end of the command, you\\'ll get a summary of the file changes\ngrouped by:\n.RS 4\n.PD 0\n.HP 4\n.I equal\nFiles equal at before.\n.HP 4\n.I added\nFiles added that were not present before.\n.HP 4\n.I removed\nFiles removed.\n.HP 4\n.I updated\nFiles with a different size or time\\-stamp, meaning that\nthey were modified.\n.HP 4\n.I moved\nFiles moved to a different directory of the same disk.\nThey are identified by having the same name, size, time\\-stamp\nand inode, but different directory.\n.HP 4\n.I copied\nFiles copied in the same or different disk. Note that if in\ntrue they are moved to a different disk, you\\'ll also have\nthem counted in \\[dq]removed\\[dq].\nThey are identified by having the same name, size, and\ntime\\-stamp. But if the sub\\-second time\\-stamp is zero,\nthen the full path should match, and not only the name.\n.HP 4\n.I restored\nFiles with a different inode but with name, size and time\\-stamp\nmatching. These are usually files restored after being deleted.\n.PD\n.RE\n.PP\nIf a \\[dq]sync\\[dq] is required, the process return code is 2, instead of the\ndefault 0. The return code 1 is instead for a generic error condition.\n.PP\nNothing is modified.\n.SS sync \nUpdates the parity information. All the modified files\nin the disk array are read, and the corresponding parity\ndata is updated.\n.PP\nYou can stop this process at any time pressing Ctrl+C,\nwithout losing the work already done.\nAt the next run the \\[dq]sync\\[dq] process will start where\ninterrupted.\n.PP\nIf during the process, silent or input/output errors are found,\nthe corresponding blocks are marked as bad.\n.PP\nFiles are identified by path and/or inode and checked by\nsize and time\\-stamp.\nIf the file size or time\\-stamp are different, the parity data\nis recomputed for the whole file.\nIf the file is moved or renamed in the same disk, keeping the\nsame inode, the parity is not recomputed.\nIf the file is moved to another disk, the parity is recomputed,\nbut the previously computed hash information is kept.\n.PP\nThe \\[dq]content\\[dq] and \\[dq]parity\\[dq] files are modified if necessary.\nThe files in the array are NOT modified.\n.SS scrub \nScrubs the array, checking for silent or input/output errors in data\nand parity disks.\n.PP\nFor each command invocation, about the 8% of the array is checked, but\nnothing that was already scrubbed in the last 10 days.\nThis means that scrubbing once a week, every bit of data is checked\nat least one time every three months.\n.PP\nYou can define a different scrub plan or amount using the \\-p, \\-\\-plan\noption that takes as argument:\nbad \\- Scrub blocks marked bad.\nnew \\- Scrub just synced blocks not yet scrubbed.\nfull \\- Scrub everything.\n0\\-100 \\- Scrub the exact percentage of blocks.\n.PP\nIf you specify a percentage amount, you can also use the \\-o, \\-\\-older\\-than\noption to define how old the block should be.\nThe oldest blocks are scrubbed first ensuring an optimal check.\nIf instead you want to scrub the just synced blocks, not yet scrubbed,\nyou should use the \\[dq]\\-p new\\[dq] option.\n.PP\nTo get the details of the scrub status use the \\[dq]status\\[dq] command.\n.PP\nFor any silent or input/output error found the corresponding blocks\nare marked as bad in the \\[dq]content\\[dq] file.\nThese bad blocks are listed in \\[dq]status\\[dq], and can be fixed with \\[dq]fix \\-e\\[dq].\nAfter the fix, at the next scrub they will be rechecked, and if found\ncorrected, the bad mark will be removed.\nTo scrub only the bad blocks, you can use the \\[dq]scrub \\-p bad\\[dq] command.\n.PP\nIt\\'s recommended to run \\[dq]scrub\\[dq] only on a synced array, to avoid to\nhave reported error caused by unsynced data. These errors are recognized\nas not being silent errors, and the blocks are not marked as bad,\nbut such errors are reported in the output of the command.\n.PP\nFiles are identified only by path, and not by inode.\n.PP\nThe \\[dq]content\\[dq] file is modified to update the time of the last check\nof each block, and to mark bad blocks.\nThe \\[dq]parity\\[dq] files are NOT modified.\nThe files in the array are NOT modified.\n.SS fix \nFix all the files and the parity data.\n.PP\nAll the files and the parity data are compared with the snapshot\nstate saved in the last \\[dq]sync\\[dq].\nIf a difference is found, it\\'s reverted to the stored snapshot.\n.PP\nThe \\[dq]fix\\[dq] command doesn\\'t differentiate between errors and\nintentional modifications. It unconditionally reverts the file state\nat the last \\[dq]sync\\[dq].\n.PP\nIf no other option is specified the full array is processed.\nUse the filter options to select a subset of files or disks to operate on.\n.PP\nTo only fix the blocks marked bad during \\[dq]sync\\[dq] and \\[dq]scrub\\[dq],\nuse the \\-e, \\-\\-filter\\-error option.\nAs difference from other filter options, with this one the fixes are\napplied only to files that are not modified from the latest \\[dq]sync\\[dq].\n.PP\nAll the files that cannot be fixed are renamed adding the\n\\[dq].unrecoverable\\[dq] extension.\n.PP\nBefore fixing, the full array is scanned to find any moved file,\nafter the last \\[dq]sync\\[dq] operation.\nThese files are identified by their time\\-stamp, ignoring their name\nand directory, and are used in the recovering process if necessary.\nIf you moved some of them outside the array, you can use the \\-i, \\-\\-import\noption to specify additional directories to scan.\n.PP\nFiles are identified only by path, and not by inode.\n.PP\nThe \\[dq]content\\[dq] file is NOT modified.\nThe \\[dq]parity\\[dq] files are modified if necessary.\nThe files in the array are modified if necessary.\n.SS check \nVerify all the files and the parity data.\n.PP\nIt works like \\[dq]fix\\[dq], but it only simulates a recovery and no change\nis written in the array.\n.PP\nThis command is mostly intended for manual verification,\nlike after a recovery process or in other special conditions.\nFor periodic and scheduled checks uses \\[dq]scrub\\[dq].\n.PP\nIf you use the \\-a, \\-\\-audit\\-only option, only the file\ndata is checked, and the parity data is ignored for a\nfaster run.\n.PP\nFiles are identified only by path, and not by inode.\n.PP\nNothing is modified.\n.SS list \nLists all the files contained in the array at the time of the\nlast \\[dq]sync\\[dq].\n.PP\nNothing is modified.\n.SS dup \nLists all the duplicate files. Two files are assumed equal if their\nhashes are matching. The file data is not read, but only the\npre\\-computed hashes are used.\n.PP\nNothing is modified.\n.SS pool \nCreates or updates in the \\[dq]pooling\\[dq] directory a virtual view of all\nthe files of your disk array.\n.PP\nThe files are not really copied here, but just linked using\nsymbolic links.\n.PP\nWhen updating, all the present symbolic links and empty\nsub\\-directories are deleted and replaced with the new\nview of the array. Any other regular file is left in place.\n.PP\nNothing is modified outside the pool directory.\n.SS devices \nPrints the low level devices used by the array.\n.PP\nThis command prints the devices associations in place in the array,\nand it\\'s mainly intended as a script interface.\n.PP\nThe first two columns are the low level device id and path.\nThe next two columns are the high level device id and path.\nThe latest column if the disk name in the array.\n.PP\nIn most cases you have one low level device for each disk in the\narray, but in some more complex configurations, you may have multiple\nlow level devices used by a single disk in the array.\n.PP\nNothing is modified.\n.SS touch \nSets arbitrarily the sub\\-second time\\-stamp of all the files\nthat have it at zero.\n.PP\nThis improves the SnapRAID capability to recognize moved\nand copied files as it makes the time\\-stamp almost unique,\nremoving possible duplicates.\n.PP\nMore specifically, if the sub\\-second time\\-stamp is not zero,\na moved or copied file is identified as such if it matches\nthe name, size and time\\-stamp. If instead the sub\\-second time\\-stamp\nis zero, it\\'s considered a copy only if it matches the full path,\nsize and time\\-stamp.\n.PP\nNote that the second precision time\\-stamp is not modified,\nand all the dates and times of your files will be maintained.\n.SS rehash \nSchedules a rehash of the whole array.\n.PP\nThis command changes the hash kind used, typically when upgrading\nfrom a 32 bits system to a 64 bits one, to switch from\nMurmurHash3 to the faster SpookyHash.\n.PP\nIf you are already using the optimal hash, this command\ndoes nothing and tells you that nothing has to be done.\n.PP\nThe rehash isn\\'t done immediately, but it takes place\nprogressively during \\[dq]sync\\[dq] and \\[dq]scrub\\[dq].\n.PP\nYou can get the rehash state using \\[dq]status\\[dq].\n.PP\nDuring the rehash, SnapRAID maintains full functionality,\nwith the only exception of \\[dq]dup\\[dq] not able to detect duplicated\nfiles using a different hash.\n.SH OPTIONS \nSnapRAID provides the following options:\n.TP\n.B \\-c, \\-\\-conf CONFIG\nSelects the configuration file to use. If not specified in Unix\nit\\'s used the file \\[dq]/usr/local/etc/snapraid.conf\\[dq] if it exists,\nor \\[dq]/etc/snapraid.conf\\[dq] otherwise.\nIn Windows it\\'s used the file \\[dq]snapraid.conf\\[dq] in the same\ndirectory of \\[dq]snapraid.exe\\[dq].\n.TP\n.B \\-f, \\-\\-filter PATTERN\nFilters the files to process in \\[dq]check\\[dq] and \\[dq]fix\\[dq].\nOnly the files matching the entered pattern are processed.\nThis option can be used many times.\nSee the PATTERN section for more details in the\npattern specifications.\nIn Unix, ensure to quote globbing chars if used.\nThis option can be used only with \\[dq]check\\[dq] and \\[dq]fix\\[dq].\nNote that it cannot be used with \\[dq]sync\\[dq] and \\[dq]scrub\\[dq], because they always\nprocess the whole array.\n.TP\n.B \\-d, \\-\\-filter\\-disk NAME\nFilters the disks to process in \\[dq]check\\[dq], \\[dq]fix\\[dq], \\[dq]up\\[dq] and \\[dq]down\\[dq].\nYou must specify a disk name as named in the configuration\nfile.\nYou can also specify parity disks with the names: \\[dq]parity\\[dq], \\[dq]2\\-parity\\[dq],\n\\[dq]3\\-parity\\[dq], ... to limit the operations a specific parity disk.\nIf you combine more \\-\\-filter, \\-\\-filter\\-disk and \\-\\-filter\\-missing options,\nonly files matching all the set of filters are selected.\nThis option can be used many times.\nThis option can be used only with \\[dq]check\\[dq], \\[dq]fix\\[dq], \\[dq]up\\[dq] and \\[dq]down\\[dq].\nNote that it cannot be used with \\[dq]sync\\[dq] and \\[dq]scrub\\[dq], because they always\nprocess the whole array.\n.TP\n.B \\-m, \\-\\-filter\\-missing\nFilters the files to process in \\[dq]check\\[dq] and \\[dq]fix\\[dq].\nOnly the files missing/deleted from the array are processed.\nWhen used with \\[dq]fix\\[dq], this is a kind of \\[dq]undelete\\[dq] command.\nIf you combine more \\-\\-filter, \\-\\-filter\\-disk and \\-\\-filter\\-missing options,\nonly files matching all the set of filters are selected.\nThis option can be used only with \\[dq]check\\[dq] and \\[dq]fix\\[dq].\nNote that it cannot be used with \\[dq]sync\\[dq] and \\[dq]scrub\\[dq], because they always\nprocess the whole array.\n.TP\n.B \\-e, \\-\\-filter\\-error\nProcess the files with errors in \\[dq]check\\[dq] and \\[dq]fix\\[dq].\nIt processes only files that have blocks marked with silent\nor input/output errors during \\[dq]sync\\[dq] and \\[dq]scrub\\[dq], and listed in \\[dq]status\\[dq].\nThis option can be used only with \\[dq]check\\[dq] and \\[dq]fix\\[dq].\n.TP\n.B \\-p, \\-\\-plan PERC|bad|new|full\nSelects the scrub plan. If PERC is a numeric value from 0 to 100,\nit\\'s interpreted as the percentage of blocks to scrub.\nInstead of a percentage, you can also specify a plan:\n\\[dq]bad\\[dq] scrubs bad blocks, \\[dq]new\\[dq] the blocks not yet scrubbed,\nand \\[dq]full\\[dq] for everything.\nThis option can be used only with \\[dq]scrub\\[dq].\n.TP\n.B \\-o, \\-\\-older\\-than DAYS\nSelects the older the part of the array to process in \\[dq]scrub\\[dq].\nDAYS is the minimum age in days for a block to be scrubbed,\ndefault is 10.\nBlocks marked as bad are always scrubbed despite this option.\nThis option can be used only with \\[dq]scrub\\[dq].\n.TP\n.B \\-a, \\-\\-audit\\-only\nIn \\[dq]check\\[dq] verifies the hash of the files without\ndoing any kind of check on the parity data.\nIf you are interested in checking only the file data this\noption can speedup a lot the checking process.\nThis option can be used only with \\[dq]check\\[dq].\n.TP\n.B \\-h, \\-\\-pre\\-hash\nIn \\[dq]sync\\[dq] runs a preliminary hashing phase of all the new data\nto have an additional verification before the parity computation.\nUsually in \\[dq]sync\\[dq] no preliminary hashing is done, and the new\ndata is hashed just before the parity computation when it\\'s read\nfor the first time.\nUnfortunately, this process happens when the system is under\nheavy load, with all disks spinning and with a busy CPU.\nThis is an extreme condition for the machine, and if it has a\nlatent hardware problem, it\\'s possible to encounter silent errors\nwhat cannot be detected because the data is not yet hashed.\nTo avoid this risk, you can enable the \\[dq]pre\\-hash\\[dq] mode and have\nall the data read two times to ensure its integrity.\nThis option also verifies the files moved inside the array,\nto ensure that the move operation went successfully, and in case\nto block the sync and to allow to run a fix operation.\nThis option can be used only with \\[dq]sync\\[dq].\n.TP\n.B \\-i, \\-\\-import DIR\nImports from the specified directory any file that you deleted\nfrom the array after the last \\[dq]sync\\[dq].\nIf you still have such files, they could be used by \\[dq]check\\[dq]\nand \\[dq]fix\\[dq] to improve the recover process.\nThe files are read also in sub\\-directories and they are\nidentified regardless of their name.\nThis option can be used only with \\[dq]check\\[dq] and \\[dq]fix\\[dq].\n.TP\n.B \\-Z, \\-\\-force\\-zero\nForces the insecure operation of syncing a file with zero\nsize that before was not.\nIf SnapRAID detects a such condition, it stops proceeding\nunless you specify this option.\nThis allows to easily detect when after a system crash,\nsome accessed files were truncated.\nThis is a possible condition in Linux with the ext3/ext4\nfile\\-systems.\nThis option can be used only with \\[dq]sync\\[dq].\n.TP\n.B \\-E, \\-\\-force\\-empty\nForces the insecure operation of syncing a disk with all\nthe original files missing.\nIf SnapRAID detects that all the files originally present\nin the disk are missing or rewritten, it stops proceeding\nunless you specify this option.\nThis allows to easily detect when a data file\\-system is not\nmounted.\nThis option can be used only with \\[dq]sync\\[dq].\n.TP\n.B \\-U, \\-\\-force\\-uuid\nForces the insecure operation of syncing, checking and fixing\nwith disks that have changed their UUID.\nIf SnapRAID detects that some disks have changed UUID,\nit stops proceeding unless you specify this option.\nThis allows to detect when your disks are mounted in the\nwrong mount points.\nIt\\'s anyway allowed to have a single UUID change with\nsingle parity, and more with multiple parity, because it\\'s\nthe normal case of replacing disks after a recovery.\nThis option can be used only with \\[dq]sync\\[dq], \\[dq]check\\[dq] or\n\\[dq]fix\\[dq].\n.TP\n.B \\-D, \\-\\-force\\-device\nForces the insecure operation of fixing with inaccessible disks,\nor with disks on the same physical device.\nLike if you lost two data disks, and you have a spare disk to recover\nonly the first one, and you want to ignore the second inaccessible disk.\nOr if you want to recover a disk in the free space left in an\nalready used disk, sharing the same physical device.\nThis option can be used only with \\[dq]fix\\[dq].\n.TP\n.B \\-N, \\-\\-force\\-nocopy\nIn \\[dq]sync\\[dq], \\[dq]check and \\[dq]fix\\[dq], disables the copy detection heuristic.\nWithout this option SnapRAID assumes that files with same\nattributes, like name, size and time\\-stamp are copies with the\nsame data.\nThis allows to identify copied or moved files from one disk\nto another, and to reuse the already computed hash information\nto detect silent errors or to recover missing files.\nThis behavior, in some rare cases, may result in false positives,\nor in a slow process due the many hash verification, and this\noption allows to resolve them.\nThis option can be used only with \\[dq]sync\\[dq], \\[dq]check\\[dq] and \\[dq]fix\\[dq].\n.TP\n.B \\-F, \\-\\-force\\-full\nIn \\[dq]sync\\[dq] forces a full recomputation of the parity.\nThis option can be used when you add a new parity level, or if\nyou reverted back to an old content file using a more recent parity data.\nInstead of recreating the parity from scratch, this allows\nto reuse the hashes present in the content file to validate data,\nand to maintain data protection during the \\[dq]sync\\[dq] process using\nthe parity data you have.\nThis option can be used only with \\[dq]sync\\[dq].\n.TP\n.B \\-R, \\-\\-force\\-realloc\nIn \\[dq]sync\\[dq] forces a full reallocation of files and rebuild of the parity.\nThis option can be used to completely reallocate all the files\nremoving the fragmentation, but reusing the hashes present in the content\nfile to validate data.\nThis option can be used only with \\[dq]sync\\[dq].\nWARNING! This option is for experts only, and it\\'s highly\nrecommended to not use it.\nYou DO NOT have data protection during the \\[dq]sync\\[dq] operation.\n.TP\n.B \\-l, \\-\\-log FILE\nWrite a detailed log in the specified file.\nIf this option is not specified, unexpected errors are printed\non the screen, likely resulting in too much output in case of\nmany errors. When \\-l, \\-\\-log is specified, on the screen, go only\nfatal errors that makes SnapRAID to stop progress.\nIf the path starts with \\'>>\\' the file is opened\nin append mode. Occurrences of \\'%D\\' and \\'%T\\' in the name are\nreplaced with the date and time in the format YYYYMMDD and\nHHMMSS. Note that in Windows batch files, you\\'ll have to double\nthe \\'%\\' char, like result\\-%%D.log. And to use \\'>>\\' you\\'ll have\nto enclose the name in \\[dq], like \\[dq]>>result.log\\[dq].\nTo output the log to standard output or standard error,\nyou can use respectively \\[dq]>&1\\[dq] and \\[dq]>&2\\[dq].\n.TP\n.B \\-L, \\-\\-error\\-limit\nSets a new error limit before stopping execution.\nBy default SnapRAID stops if it encounters more than 100\nInput/Output errors, meaning that likely a disk is going to\ndie.\nThis options affects \\[dq]sync\\[dq] and \\[dq]scrub\\[dq], that are allowed\nto continue after the first bunch of disk errors, to try\nto complete at most their operations.\nInstead, \\[dq]check\\[dq] and \\[dq]fix\\[dq] always stop at the first error.\n.TP\n.B \\-S, \\-\\-start BLKSTART\nStarts the processing from the specified\nblock number. It could be useful to retry to check\nor fix some specific block, in case of a damaged disk.\nIt\\'s present mainly for advanced manual recovering.\n.TP\n.B \\-B, \\-\\-count BLKCOUNT\nProcesses only the specified number of blocks.\nIt\\'s present mainly for advanced manual recovering.\n.TP\n.B \\-C, \\-\\-gen\\-conf CONTENT_FILE\nGenerates a dummy configuration file from an existing\ncontent file.\nThe configuration file is written in the standard output,\nand it doesn\\'t overwrite an existing one.\nThis configuration file also contains the information\nneeded to reconstruct the disk mount points, in case you\nlose the entire system.\n.TP\n.B \\-v, \\-\\-verbose\nPrints more information on the screen.\nIf specified one time, it prints excluded files\nand more stats.\nThis option has no effect on the log files.\n.TP\n.B \\-q, \\-\\-quiet\nPrints less information on the screen.\nIf specified one time, removes the progress bar, if two\ntimes, the running operations, three times, the info\nmessages, four times the status messages.\nFatal errors are always printed on the screen.\nThis option has no effect on the log files.\n.TP\n.B \\-H, \\-\\-help\nPrints a short help screen.\n.TP\n.B \\-V, \\-\\-version\nPrints the program version.\n.SH CONFIGURATION \nSnapRAID requires a configuration file to know where your disk array\nis located, and where storing the parity information.\n.PP\nIn Unix it\\'s used the file \\[dq]/usr/local/etc/snapraid.conf\\[dq] if it exists,\nor \\[dq]/etc/snapraid.conf\\[dq] otherwise.\nIn Windows it\\'s used the file \\[dq]snapraid.conf\\[dq] in the same\ndirectory of \\[dq]snapraid.exe\\[dq].\n.PP\nIt should contain the following options (case sensitive):\n.SS parity FILE [,FILE] ... \nDefines the files to use to store the parity information.\nThe parity enables the protection from a single disk\nfailure, like RAID5.\n.PP\nYou can specify multiples files that should be in different disks.\nWhen a file cannot grow anymore, the next one is used.\nThe total space available must be as big as the biggest data disk in\nthe array.\n.PP\nYou can add additional parity files at later time, but you\ncannot reorder or remove them.\n.PP\nLeaving the parity disks reserved for parity ensures that\nit doesn\\'t get fragmented, improving the performance.\n.PP\nIn Windows 256 MB are left unused in each disk to avoid the\nwarning about full disks.\n.PP\nThis option is mandatory and it can be used only one time.\n.SS (2,3,4,5,6)\\-parity FILE [,FILE] ... \nDefines the files to use to store extra parity information.\n.PP\nFor each parity specified, one additional level of protection\nis enabled:\n.PD 0\n.IP \\(bu\n2\\-parity enables RAID6 dual parity.\n.IP \\(bu\n3\\-parity enables triple parity\n.IP \\(bu\n4\\-parity enables quad (four) parity\n.IP \\(bu\n5\\-parity enables penta (five) parity\n.IP \\(bu\n6\\-parity enables hexa (six) parity\n.PD\n.PP\nEach parity level requires the presence of all the previous parity\nlevels.\n.PP\nThe same considerations of the \\'parity\\' option apply.\n.PP\nThese options are optional and they can be used only one time.\n.SS z\\-parity FILE [,FILE] ... \nDefines an alternate file and format to store the triple parity.\n.PP\nThis option is an alternative at \\'3\\-parity\\' mainly intended for\nlow\\-end CPUs like ARM or AMD Phenom, Athlon and Opteron that don\\'t\nsupport the SSSE3 instructions set. In such cases it provides\na better performance.\n.PP\nThis format is similar, but faster, at the one used by the ZFS RAIDZ3.\nLike ZFS, it doesn\\'t work beyond triple parity.\n.PP\nWhen using \\'3\\-parity\\' you will be warned if it\\'s recommended to use\nthe \\'z\\-parity\\' format for a performance improvement.\n.PP\nIt\\'s possible to convert from one format to another, adjusting\nthe configuration file with the wanted z\\-parity or 3\\-parity file,\nand using \\'fix\\' to recreate it.\n.SS content FILE \nDefines the file to use to store the list and check\\-sums of all the\nfiles present in your disk array.\n.PP\nIt can be placed in the disk used to store data, parity, or\nany other disk available.\nIf you use a data disk, this file is automatically excluded\nfrom the \\[dq]sync\\[dq] process.\n.PP\nThis option is mandatory and it can be used more times to save\nmore copies of the same files.\n.PP\nYou have to store at least one copy for each parity disk used\nplus one. Using some more doesn\\'t hurt.\n.SS data NAME DIR \nDefines the name and the mount point of the data disks of\nthe array. NAME is used to identify the disk, and it must\nbe unique. DIR is the mount point of the disk in the\nfile\\-system.\n.PP\nYou can change the mount point as you like, as long you\nkeep the NAME fixed.\n.PP\nYou should use one option for each data disk of the array.\n.PP\nYou can rename later a disk, changing the NAME directly\nin the configuration file, and then run a \\'sync\\' command.\nIn the rename case, the association is done using the stored\nUUID of the disks.\n.SS nohidden \nExcludes all the hidden files and directory.\nIn Unix hidden files are the ones starting with \\[dq].\\[dq].\nIn Windows they are the ones with the hidden attribute.\n.SS exclude/include PATTERN \nDefines the file or directory patterns to exclude and include\nin the sync process.\nAll the patterns are processed in the specified order.\n.PP\nIf the first pattern that matches is an \\[dq]exclude\\[dq] one, the file\nis excluded. If it\\'s an \\[dq]include\\[dq] one, the file is included.\nIf no pattern matches, the file is excluded if the last pattern\nspecified is an \\[dq]include\\[dq], or included if the last pattern\nspecified is an \\[dq]exclude\\[dq].\n.PP\nSee the PATTERN section for more details in the pattern\nspecifications.\n.PP\nThis option can be used many times.\n.SS blocksize SIZE_IN_KIBIBYTES \nDefines the basic block size in kibi bytes of the parity.\nOne kibi bytes is 1024 bytes.\n.PP\nThe default blocksize is 256 and it should work for most cases.\n.PP\nWARNING! This option is for experts only, and it\\'s highly\nrecommended to not change it. To change again this value in\nfuture you\\'ll have to recreate the whole parity!\n.PP\nA reason to use a different blocksize is if you have a lot of small\nfiles. In the order of many millions.\n.PP\nFor each file, even of few bytes, a whole block of parity is allocated,\nand with many files this may result in a lot of unused parity space.\nAnd when you completely fill the parity disk, you are not\nallowed to add more files in the data disks.\nAnyway, the wasted parity doesn\\'t sum between data disks. Wasted space\nresulting from a high number of files in a data disk, limits only\nthe amount of data in such data disk and not in others.\n.PP\nAs approximation, you can assume that half of the block size is\nwasted for each file. For example, with 100000 files and a 256 KiB\nblock size, you are going to waste 13 GB of parity, that may result\nin 13 GB less space available in the data disk.\n.PP\nYou can get the amount of wasted space in each disk using \\[dq]status\\[dq].\nThis is the amount of space that you must leave free in the data\ndisks, or use for files not included in the array.\nIf this value is negative, it means that your are near to fill\nthe parity, and it represents the space you can still waste.\n.PP\nTo avoid the problem, you can use a bigger partition for parity.\nFor example, if you have the parity partition bigger than 13 GB\nthan data disks, you have enough extra space to handle up to 100000\nfiles in each data disk.\n.PP\nA trick to get a bigger parity partition in Linux, is to format it\nwith the command:\n.PP\n.RS 4\nmkfs.ext4 \\-m 0 \\-T largefile4 DEVICE\n.PD 0\n.PP\n.PD\n.RE\n.PP\nThis results in about 1.5% of extra space. Meaning about 60 GB for\na 4 TB disk, that allows about 460000 files in each data disk without\nany wasted space.\n.SS hashsize SIZE_IN_BYTES \nDefines the hash size in bytes of the saved blocks.\n.PP\nThe default hashsize is 16 bytes (128 bits), and it should work\nfor most cases.\n.PP\nWARNING! This option is for experts only, and it\\'s highly\nrecommended to not change it. To change again this value in\nfuture you\\'ll have to recreate the whole parity!\n.PP\nA reason to use a different hashsize is if your system has\nsmall memory. As a rule of thumb SnapRAID usually requires\n1 GiB of RAM memory for each 16 TB of data in the array.\n.PP\nSpecifically, to store the hashes of the data, SnapRAID requires\nabout TS*(1+HS)/BS bytes of RAM memory.\nWhere TS is the total size in bytes of your disk array, BS is the\nblock size in bytes, and HS is the hash size in bytes.\n.PP\nFor example with 8 disks of 4 TB and a block size of 256 KiB\n(1 KiB = 1024 bytes), and an hash size of 16, you get:\n.PP\nRAM = (8 * 4 * 10^12) * (1+16) / (256 * 2^10) = 1.93 GiB\n.PD 0\n.PP\n.PD\n.PP\nSwitching to a hash size of 8, you get:\n.PP\nRAM = (8 * 4 * 10^12) * (1+8) / (256 * 2^10) = 1.02 GiB\n.PD 0\n.PP\n.PD\n.PP\nSwitching to a block size of 512, you get:\n.PP\nRAM = (8 * 4 * 10^12) * (1+16) / (512 * 2^10) = 0.96 GiB\n.PD 0\n.PP\n.PD\n.PP\nSwitching to both a hash size of 8, and a block size of 512 you get:\n.PP\nRAM = (8 * 4 * 10^12) * (1+8) / (512 * 2^10) = 0.51 GiB\n.PD 0\n.PP\n.PD\n.SS autosave SIZE_IN_GIGABYTES \nAutomatically save the state when syncing or scrubbing after the specified amount\nof GB processed.\nThis option is useful to avoid to restart from scratch long \\[dq]sync\\[dq]\ncommands interrupted by a machine crash, or any other event that\nmay interrupt SnapRAID.\n.SS pool DIR \nDefines the pooling directory where the virtual view of the disk\narray is created using the \\[dq]pool\\[dq] command.\n.PP\nThe directory must already exist.\n.SS share UNC_DIR \nDefines the Windows UNC path required to access the disks remotely.\n.PP\nIf this option is specified, the symbolic links created in the pool\ndirectory use this UNC path to access the disks.\nWithout this option the symbolic links generated use only local paths,\nnot allowing to share the pool directory in the network.\n.PP\nThe symbolic links are formed using the specified UNC path, adding the\ndisk name as specified in the \\[dq]disk\\[dq] option, and finally adding the\nfile dir and name.\n.PP\nThis option is only required for Windows.\n.SS smartctl DISK/PARITY OPTIONS... \nDefines a custom smartctl command to obtain the SMART attributes\nfor each disk. This may be required for RAID controllers and for\nsome USB disk that cannot be auto\\-detected.\n.PP\nDISK is the same disk name specified in the \\[dq]disk\\[dq] option.\nPARITY is one of the parity name as \\[dq]parity,(1,2,3,4,5,6,z)\\-parity\\[dq].\n.PP\nIn the specified OPTIONS, the \\[dq]%s\\[dq] string is replaced by the\ndevice name. Note that in case of RAID controllers the device is likely\nfixed, and you don\\'t have to use \\[dq]%s\\[dq].\n.PP\nRefers at the smartmontools documentation about the possible options:\n.PP\n.RS 4\nhttps://www.smartmontools.org/wiki/Supported_RAID\\-Controllers\n.PD 0\n.PP\n.PD\nhttps://www.smartmontools.org/wiki/Supported_USB\\-Devices\n.PD 0\n.PP\n.PD\n.RE\n.SS Examples \nAn example of a typical configuration for Unix is:\n.PP\n.RS 4\nparity /mnt/diskp/snapraid.parity\n.PD 0\n.PP\n.PD\ncontent /mnt/diskp/snapraid.content\n.PD 0\n.PP\n.PD\ncontent /var/snapraid/snapraid.content\n.PD 0\n.PP\n.PD\ndata d1 /mnt/disk1/\n.PD 0\n.PP\n.PD\ndata d2 /mnt/disk2/\n.PD 0\n.PP\n.PD\ndata d3 /mnt/disk3/\n.PD 0\n.PP\n.PD\nexclude /lost+found/\n.PD 0\n.PP\n.PD\nexclude /tmp/\n.PD 0\n.PP\n.PD\nsmartctl d1 \\-d sat %s\n.PD 0\n.PP\n.PD\nsmartctl d2 \\-d usbjmicron %s\n.PD 0\n.PP\n.PD\nsmartctl parity \\-d areca,1/1 /dev/sg0\n.PD 0\n.PP\n.PD\nsmartctl 2\\-parity \\-d areca,2/1 /dev/sg0\n.PD 0\n.PP\n.PD\n.RE\n.PP\nAn example of a typical configuration for Windows is:\n.PP\n.RS 4\nparity E:\\\\snapraid.parity\n.PD 0\n.PP\n.PD\ncontent E:\\\\snapraid.content\n.PD 0\n.PP\n.PD\ncontent C:\\\\snapraid\\\\snapraid.content\n.PD 0\n.PP\n.PD\ndata d1 G:\\\\array\\\\\n.PD 0\n.PP\n.PD\ndata d2 H:\\\\array\\\\\n.PD 0\n.PP\n.PD\ndata d3 I:\\\\array\\\\\n.PD 0\n.PP\n.PD\nexclude Thumbs.db\n.PD 0\n.PP\n.PD\nexclude \\\\$RECYCLE.BIN\n.PD 0\n.PP\n.PD\nexclude \\\\System Volume Information\n.PD 0\n.PP\n.PD\nsmartctl d1 \\-d sat %s\n.PD 0\n.PP\n.PD\nsmartctl d2 \\-d usbjmicron %s\n.PD 0\n.PP\n.PD\nsmartctl parity \\-d areca,1/1 /dev/arcmsr0\n.PD 0\n.PP\n.PD\nsmartctl 2\\-parity \\-d areca,2/1 /dev/arcmsr0\n.PD 0\n.PP\n.PD\n.RE\n.SH PATTERN \nPatterns are used to select a subset of files to exclude or include in\nthe process.\n.PP\nThere are four different types of patterns:\n.TP\n.B FILE\nSelects any file named as FILE. You can use any globbing\ncharacter like * and ?, and char classes like [a\\-z].\nThis pattern is applied only to files and not to directories.\n.TP\n.B DIR/\nSelects any directory named DIR and everything inside.\nYou can use any globbing character like * and ?.\nThis pattern is applied only to directories and not to files.\n.TP\n.B /PATH/FILE\nSelects the exact specified file path. You can use any\nglobbing character like * and ? but they never match a\ndirectory slash.\nThis pattern is applied only to files and not to directories.\n.TP\n.B /PATH/DIR/\nSelects the exact specified directory path and everything\ninside. You can use any globbing character like * and ? but\nthey never match a directory slash.\nThis pattern is applied only to directories and not to files.\n.PP\nNote that when you specify an absolute path starting with /, it\\'s\napplied at the array root dir and not at the local file\\-system root dir.\n.PP\nIn Windows you can use the backslash \\\\ instead of the forward slash /.\nNote that Windows system directories, junctions, mount points, and any\nother Windows special directory are treated just as files, meaning that\nto exclude them you must use a file rule, and not a directory one.\n.PP\nIf the file name you want to use really contains a \\'*\\', \\'?\\', \\'[\\',\nor \\']\\' char, you have to escape it to avoid to have interpreted as a\nglobbing character. In Unix the escape char is \\'\\\\\\', in Windows it\\'s \\'^\\'.\nNote that when the pattern is on the command line, you have to double the\nescape character to avoid to have it interpreted by the command shell.\n.PP\nIn the configuration file, you can use different strategies to filter\nthe files to process.\nThe simplest one is to use only \\[dq]exclude\\[dq] rules to remove all the\nfiles and directories you do not want to process. For example:\n.PP\n.RS 4\n# Excludes any file named \\[dq]*.unrecoverable\\[dq]\n.PD 0\n.PP\n.PD\nexclude *.unrecoverable\n.PD 0\n.PP\n.PD\n# Excludes the root directory \\[dq]/lost+found\\[dq]\n.PD 0\n.PP\n.PD\nexclude /lost+found/\n.PD 0\n.PP\n.PD\n# Excludes any sub\\-directory named \\[dq]tmp\\[dq]\n.PD 0\n.PP\n.PD\nexclude tmp/\n.PD 0\n.PP\n.PD\n.RE\n.PP\nThe opposite way is to define only the file you want to process, using\nonly \\[dq]include\\[dq] rules. For example:\n.PP\n.RS 4\n# Includes only some directories\n.PD 0\n.PP\n.PD\ninclude /movies/\n.PD 0\n.PP\n.PD\ninclude /musics/\n.PD 0\n.PP\n.PD\ninclude /pictures/\n.PD 0\n.PP\n.PD\n.RE\n.PP\nThe final way, is to mix \\[dq]exclude\\[dq] and \\[dq]include\\[dq] rules. In this case take\ncare that the order of rules is important. Previous rules have the\nprecedence over the later ones.\nTo get things simpler you can first have all the \\[dq]exclude\\[dq] rules and then\nall the \\[dq]include\\[dq] ones. For example:\n.PP\n.RS 4\n# Excludes any file named \\[dq]*.unrecoverable\\[dq]\n.PD 0\n.PP\n.PD\nexclude *.unrecoverable\n.PD 0\n.PP\n.PD\n# Excludes any sub\\-directory named \\[dq]tmp\\[dq]\n.PD 0\n.PP\n.PD\nexclude tmp/\n.PD 0\n.PP\n.PD\n# Includes only some directories\n.PD 0\n.PP\n.PD\ninclude /movies/\n.PD 0\n.PP\n.PD\ninclude /musics/\n.PD 0\n.PP\n.PD\ninclude /pictures/\n.PD 0\n.PP\n.PD\n.RE\n.PP\nOn the command line, using the \\-f option, you can only use \\[dq]include\\[dq]\npatterns. For example:\n.PP\n.RS 4\n# Checks only the .mp3 files.\n.PD 0\n.PP\n.PD\n# Note the \\[dq]\\[dq] use to avoid globbing expansion by the shell in Unix.\n.PD 0\n.PP\n.PD\nsnapraid \\-f \\[dq]*.mp3\\[dq] check\n.PD 0\n.PP\n.PD\n.RE\n.PP\nIn Unix, when using globbing chars in the command line, you have to\nquote them. Otherwise the shell will try to expand them.\n.SH CONTENT \nSnapRAID stores the list and check\\-sums of your files in the content file.\n.PP\nIt\\'s a binary file, listing all the files present in your disk array,\nwith all the check\\-sums to verify their integrity.\n.PP\nThis file is read and written by the \\[dq]sync\\[dq] and \\[dq]scrub\\[dq] commands, and\nread by \\[dq]fix\\[dq], \\[dq]check\\[dq] and \\[dq]status\\[dq].\n.SH PARITY \nSnapRAID stores the parity information of your array in the parity\nfiles.\n.PP\nThey are binary files, containing the computed parity of all the\nblocks defined in the \\[dq]content\\[dq] file.\n.PP\nThese files are read and written by the \\[dq]sync\\[dq] and \\[dq]fix\\[dq] commands, and\nonly read by \\[dq]scrub\\[dq] and \\[dq]check\\[dq].\n.SH ENCODING \nSnapRAID in Unix ignores any encoding. It reads and stores the\nfile names with the same encoding used by the file\\-system.\n.PP\nIn Windows all the names read from the file\\-system are converted and\nprocessed in the UTF\\-8 format.\n.PP\nTo have the file names printed correctly you have to set the Windows\nconsole in the UTF\\-8 mode, with the command \\[dq]chcp 65001\\[dq], and use\na TrueType font like \\[dq]Lucida Console\\[dq] as console font.\nNote that it has effect only on the printed file names, if you\nredirect the console output to a file, the resulting file is always\nin the UTF\\-8 format.\n.SH COPYRIGHT \nThis file is Copyright (C) 2011 Andrea Mazzoleni\n.SH SEE ALSO \nrsync(1)\n"
        },
        {
          "name": "snapraid.conf.example",
          "type": "blob",
          "size": 3.458984375,
          "content": "# Example configuration for snapraid\n\n# Defines the file to use as parity storage\n# It must NOT be in a data disk\n# Format: \"parity FILE [,FILE] ...\"\nparity /mnt/diskp/snapraid.parity\n\n# Defines the files to use as additional parity storage.\n# If specified, they enable the multiple failures protection\n# from two to six level of parity.\n# To enable, uncomment one parity file for each level of extra\n# protection required. Start from 2-parity, and follow in order.\n# It must NOT be in a data disk\n# Format: \"X-parity FILE [,FILE] ...\"\n#2-parity /mnt/diskq/snapraid.2-parity\n#3-parity /mnt/diskr/snapraid.3-parity\n#4-parity /mnt/disks/snapraid.4-parity\n#5-parity /mnt/diskt/snapraid.5-parity\n#6-parity /mnt/disku/snapraid.6-parity\n\n# Defines the files to use as content list\n# You can use multiple specification to store more copies\n# You must have least one copy for each parity file plus one. Some more don't hurt\n# They can be in the disks used for data, parity or boot,\n# but each file must be in a different disk\n# Format: \"content FILE\"\ncontent /var/snapraid.content\ncontent /mnt/disk1/snapraid.content\ncontent /mnt/disk2/snapraid.content\n\n# Defines the data disks to use\n# The name and mount point association is relevant for parity, do not change it\n# WARNING: Adding here your /home, /var or /tmp disks is NOT a good idea!\n# SnapRAID is better suited for files that rarely changes!\n# Format: \"data DISK_NAME DISK_MOUNT_POINT\"\ndata d1 /mnt/disk1/\ndata d2 /mnt/disk2/\ndata d3 /mnt/disk3/\n\n# Excludes hidden files and directories (uncomment to enable).\n#nohidden\n\n# Defines files and directories to exclude\n# Remember that all the paths are relative at the mount points\n# Format: \"exclude FILE\"\n# Format: \"exclude DIR/\"\n# Format: \"exclude /PATH/FILE\"\n# Format: \"exclude /PATH/DIR/\"\nexclude *.unrecoverable\nexclude /tmp/\nexclude /lost+found/\n\n# Defines the block size in kibi bytes (1024 bytes) (uncomment to enable).\n# WARNING: Changing this value is for experts only!\n# Default value is 256 -> 256 kibi bytes -> 262144 bytes\n# Format: \"blocksize SIZE_IN_KiB\"\n#blocksize 256\n\n# Defines the hash size in bytes (uncomment to enable).\n# WARNING: Changing this value is for experts only!\n# Default value is 16 -> 128 bits\n# Format: \"hashsize SIZE_IN_BYTES\"\n#hashsize 16\n\n# Automatically save the state when syncing after the specified amount\n# of GB processed (uncomment to enable).\n# This option is useful to avoid to restart from scratch long 'sync'\n# commands interrupted by a machine crash.\n# It also improves the recovering if a disk break during a 'sync'.\n# Default value is 0, meaning disabled.\n# Format: \"autosave SIZE_IN_GB\"\n#autosave 500\n\n# Defines the pooling directory where the virtual view of the disk\n# array is created using the \"pool\" command (uncomment to enable).\n# The files are not really copied here, but just linked using\n# symbolic links.\n# This directory must be outside the array.\n# Format: \"pool DIR\"\n#pool /pool\n\n# Defines a custom smartctl command to obtain the SMART attributes\n# for each disk. This may be required for RAID controllers and for\n# some USB disk that cannot be autodetected.\n# In the specified options, the \"%s\" string is replaced by the device name.\n# Refers at the smartmontools documentation about the possible options:\n# RAID -> https://www.smartmontools.org/wiki/Supported_RAID-Controllers\n# USB -> https://www.smartmontools.org/wiki/Supported_USB-Devices\n#smartctl d1 -d sat %s\n#smartctl d2 -d usbjmicron %s\n#smartctl parity -d areca,1/1 /dev/sg0\n#smartctl 2-parity -d areca,2/1 /dev/sg0\n\n"
        },
        {
          "name": "snapraid.conf.example.windows",
          "type": "blob",
          "size": 3.9755859375,
          "content": "# Example configuration for snapraid for Windows\n\n# Defines the file to use as parity storage\n# It must NOT be in a data disk\n# Format: \"parity FILE [,FILE] ...\"\nparity E:\\snapraid.parity\n\n# Defines the files to use as additional parity storage.\n# If specified, they enable the multiple failures protection\n# from two to six level of parity.\n# To enable, uncomment one parity file for each level of extra\n# protection required. Start from 2-parity, and follow in order.\n# It must NOT be in a data disk\n# Format: \"X-parity FILE [,FILE] ...\"\n#2-parity F:\\snapraid.2-parity\n#3-parity G:\\snapraid.3-parity\n#4-parity H:\\snapraid.4-parity\n#5-parity I:\\snapraid.5-parity\n#6-parity J:\\snapraid.6-parity\n\n# Defines the files to use as content list\n# You can use multiple specification to store more copies\n# You must have least one copy for each parity file plus one. Some more don't hurt\n# They can be in the disks used for data, parity or boot,\n# but each file must be in a different disk\n# Format: \"content FILE\"\ncontent C:\\snapraid\\snapraid.content\ncontent K:\\array\\snapraid.content\ncontent L:\\array\\snapraid.content\n\n# Defines the data disks to use\n# The name and mount point association is relevant for parity, do not change it\n# WARNING: Adding here your boot C:\\ disk is NOT a good idea!\n# SnapRAID is better suited for files that rarely changes!\n# Format: \"data DISK_NAME DISK_MOUNT_POINT\"\ndata d1 K:\\array\\\ndata d2 L:\\array\\\ndata d3 M:\\array\\\n\n# Excludes hidden files and directories (uncomment to enable).\n#nohidden\n\n# Defines files and directories to exclude\n# Remember that all the paths are relative at the mount points\n# Format: \"exclude FILE\"\n# Format: \"exclude DIR\\\"\n# Format: \"exclude \\PATH\\FILE\"\n# Format: \"exclude \\PATH\\DIR\\\"\nexclude *.unrecoverable\nexclude Thumbs.db\nexclude \\$RECYCLE.BIN\nexclude \\System Volume Information\nexclude \\Program Files\\\nexclude \\Program Files (x86)\\\nexclude \\Windows\\\n\n# Defines the block size in kibi bytes (1024 bytes) (uncomment to enable).\n# WARNING: Changing this value is for experts only!\n# Default value is 256 -> 256 kibi bytes -> 262144 bytes\n# Format: \"blocksize SIZE_IN_KiB\"\n#blocksize 256\n\n# Defines the hash size in bytes (uncomment to enable).\n# WARNING: Changing this value is for experts only!\n# Default value is 16 -> 128 bits\n# Format: \"hashsize SIZE_IN_BYTES\"\n#hashsize 16\n\n# Automatically save the state when syncing after the specified amount\n# of GB processed (uncomment to enable).\n# This option is useful to avoid to restart from scratch long 'sync'\n# commands interrupted by a machine crash.\n# It also improves the recovering if a disk break during a 'sync'.\n# Default value is 0, meaning disabled.\n# Format: \"autosave SIZE_IN_GB\"\n#autosave 500\n\n# Defines the pooling directory where the virtual view of the disk\n# array is created using the \"pool\" command (uncomment to enable).\n# The files are not really copied here, but just linked using\n# symbolic links.\n# This directory must be outside the array.\n# Format: \"pool DIR\"\n#pool C:\\pool\n\n# Defines the Windows UNC path required to access disks from the pooling\n# directory when shared in the network.\n# If present (uncomment to enable), the symbolic links created in the\n# pool virtual view, instead of using local paths, are created using the\n# specified UNC path, adding the disk names and file path.\n# This allows to share the pool directory in the network.\n# See the manual page for more details.\n#\n# Format: \"share UNC_DIR\"\n#share \\\\server\n\n# Defines a custom smartctl command to obtain the SMART attributes\n# for each disk. This may be required for RAID controllers and for\n# some USB disk that cannot be autodetected.\n# In the specified options, the \"%s\" string is replaced by the device name.\n# Refers at the smartmontools documentation about the possible options:\n# RAID -> https://www.smartmontools.org/wiki/Supported_RAID-Controllers\n# USB -> https://www.smartmontools.org/wiki/Supported_USB-Devices\n#smartctl d1 -d sat %s\n#smartctl d2 -d usbjmicron %s\n#smartctl parity -d areca,1/1 /dev/arcmsr0\n#smartctl 2-parity -d areca,2/1 /dev/arcmsr0\n\n"
        },
        {
          "name": "snapraid.d",
          "type": "blob",
          "size": 47.97265625,
          "content": "Name{number}\n\tsnapraid - SnapRAID Backup For Disk Arrays\n\nSynopsis\n\t:snapraid [-c, --conf CONFIG]\n\t:\t[-f, --filter PATTERN] [-d, --filter-disk NAME]\n\t:\t[-m, --filter-missing] [-e, --filter-error]\n\t:\t[-a, --audit-only] [-h, --pre-hash] [-i, --import DIR]\n\t:\t[-p, --plan PERC|bad|new|full]\n\t:\t[-o, --older-than DAYS] [-l, --log FILE]\n\t:\t[-Z, --force-zero] [-E, --force-empty]\n\t:\t[-U, --force-uuid] [-D, --force-device]\n\t:\t[-N, --force-nocopy] [-F, --force-full]\n\t:\t[-R, --force-realloc]\n\t:\t[-S, --start BLKSTART] [-B, --count BLKCOUNT]\n\t:\t[-L, --error-limit NUMBER]\n\t:\t[-v, --verbose] [-q, --quiet]\n\t:\tstatus|smart|up|down|diff|sync|scrub|fix|check|list|dup\n\t:\t|pool|devices|touch|rehash\n\n\t:snapraid [-V, --version] [-H, --help] [-C, --gen-conf CONTENT]\n\nDescription\n\tSnapRAID is a backup program designed for disk arrays, storing\n\tparity information for data recovery in the event of up to six\n\tdisk failures.\n\n\tPrimarily intended for home media centers with large,\n\tinfrequently changing files, SnapRAID offers several features:\n\n\t* You can utilize disks already filled with files without the\n\t\tneed to reformat them, accessing them as usual.\n\t* All your data is hashed to ensure data integrity and prevent\n\t\tsilent corruption.\n\t* When the number of failed disks exceeds the parity count,\n\t\tdata loss is confined to the affected disks; data on\n\t\tother disks remains accessible.\n\t* If you accidentally delete files on a disk, recovery is\n\t\tpossible.\n\t* Disks can have different sizes.\n\t* You can add disks at any time.\n\t* SnapRAID doesn't lock in your data; you can stop using it\n\t\tanytime without reformatting or moving data.\n\t* To access a file, only a single disk needs to spin, saving\n\t\tpower and reducing noise.\n\n\tFor more information, please visit the official SnapRAID site:\n\n\t\t:http://www.snapraid.it/\n\nLimitations\n\tSnapRAID is in between a RAID and a Backup program trying to get the best\n\tbenefits of them. Although it also has some limitations that you should\n\tconsider before using it.\n\n\tThe main one is that if a disk fails, and you haven't recently synced,\n\tyou may be unable to do a complete recover.\n\tMore specifically, you may be unable to recover up to the size of\n\tthe changed or deleted files from the last sync operation.\n\tThis happens even if the files changed or deleted are not in the\n\tfailed disk. This is why SnapRAID is better suited for\n\tdata that rarely change.\n\n\tOn the other hand, newly added files don't prevent recovering already\n\texisting files. You may only lose the recently added files, if they are on\n\tthe failed disk.\n\n\tOther SnapRAID limitations are:\n\n\t* With SnapRAID, you still have separate file-systems for each disk.\n\t\tWith RAID you get a single large file-system.\n\t* SnapRAID doesn't stripe data.\n\t\tWith RAID you get a speed boost with striping.\n\t* SnapRAID doesn't support real-time recovery.\n\t\tWith RAID you do not have to stop working when a disk fails.\n\t* SnapRAID is able to recover damages only from a limited number of disks.\n\t\tWith a Backup you can recover from a complete\n\t\tfailure of the whole disk array.\n\t* Only file, time-stamps, symlinks and hardlinks are saved.\n\t\tPermissions, ownership and extended attributes are not saved.\n\nGetting Started\n\tTo use SnapRAID you need to first select one disk of your disk array\n\tto dedicate at the \"parity\" information. With one disk for parity you\n\twill be able to recover from a single disk failure, like RAID5.\n\n\tIf you want to be able to recover from more disk failures, like RAID6,\n\tyou must reserve additional disks for parity. Any additional parity\n\tdisk allow to recover from one more disk failure.\n\n\tAs parity disks, you have to pick the biggest disks in the array,\n\tas the parity information may grow in size as the biggest data\n\tdisk in the array.\n\n\tThese disks will be dedicated to store the \"parity\" files.\n\tYou should not store your data in them.\n\n\tThen you have to define the \"data\" disks that you want to protect\n\twith SnapRAID. The protection is more effective if these disks\n\tcontain data that rarely change. For this reason it's better to\n\tDO NOT include the Windows C:\\ disk, or the Unix /home, /var and /tmp\n\tdisks.\n\n\tThe list of files is saved in the \"content\" files, usually\n\tstored in the data, parity or boot disks.\n\tThese files contain the details of your backup, with all the\n\tcheck-sums to verify its integrity.\n\tThe \"content\" file is stored in multiple copies, and each one must\n\tbe in a different disk, to ensure that in even in case of multiple\n\tdisk failures at least one copy is available.\n\n\tFor example, suppose that you are interested only at one parity level\n\tof protection, and that your disks are present in:\n\n\t\t:/mnt/diskp <- selected disk for parity\n\t\t:/mnt/disk1 <- first disk to protect\n\t\t:/mnt/disk2 <- second disk to protect\n\t\t:/mnt/disk3 <- third disk to protect\n\n\tyou have to create the configuration file /etc/snapraid.conf with\n\tthe following options:\n\n\t\t:parity /mnt/diskp/snapraid.parity\n\t\t:content /var/snapraid/snapraid.content\n\t\t:content /mnt/disk1/snapraid.content\n\t\t:content /mnt/disk2/snapraid.content\n\t\t:data d1 /mnt/disk1/\n\t\t:data d2 /mnt/disk2/\n\t\t:data d3 /mnt/disk3/\n\n\tIf you are in Windows, you should use the Windows path format, with drive\n\tletters and backslashes instead of slashes.\n\n\t\t:parity E:\\snapraid.parity\n\t\t:content C:\\snapraid\\snapraid.content\n\t\t:content F:\\array\\snapraid.content\n\t\t:content G:\\array\\snapraid.content\n\t\t:data d1 F:\\array\\\n\t\t:data d2 G:\\array\\\n\t\t:data d3 H:\\array\\\n\n\tIf you have many disks, and you run out of drive letters, you can mount\n\tdisks directly in sub folders. See:\n\n\t\t:https://www.google.com/search?q=Windows+mount+point\n\n\tAt this point you are ready to start the \"sync\" command to build the\n\tparity information.\n\n\t\t:snapraid sync\n\n\tThis process may take some hours the first time, depending on the size\n\tof the data already present in the disks. If the disks are empty\n\tthe process is immediate.\n\n\tYou can stop it at any time pressing Ctrl+C, and at the next run it\n\twill start where interrupted.\n\n\tWhen this command completes, your data is SAFE.\n\n\tNow you can start using your array as you like, and periodically\n\tupdate the parity information running the \"sync\" command.\n\n  Scrubbing\n\tTo periodically check the data and parity for errors, you can\n\trun the \"scrub\" command.\n\n\t\t:snapraid scrub\n\n\tThis command verifies the data in your array comparing it with\n\tthe hash computed in the \"sync\" command.\n\n\tEvery run of the command checks about the 8% of the array, but not data\n\talready scrubbed in the previous 10 days.\n\tYou can use the -p, --plan option to specify a different amount,\n\tand the -o, --older-than option to specify a different age in days.\n\tFor example, to check 5% of the array older than 20 days use:\n\n\t\t:snapraid -p 5 -o 20 scrub\n\n\tIf during the process, silent or input/output errors are found,\n\tthe corresponding blocks are marked as bad in the \"content\" file,\n\tand listed in the \"status\" command.\n\n\t\t:snapraid status\n\n\tTo fix them, you can use the \"fix\" command filtering for bad blocks with\n\tthe -e, --filter-error options:\n\n\t\t:snapraid -e fix\n\n\tAt the next \"scrub\" the errors will disappear from the \"status\" report\n\tif really fixed. To make it fast, you can use -p bad to scrub only blocks\n\tmarked as bad.\n\n\t\t:snapraid -p bad scrub\n\n\tTake care that running \"scrub\" on a not synced array may result in\n\terrors caused by removed or modified files. These errors are reported\n\tin the \"scrub\" result, but related blocks are not marked as bad.\n\n  Pooling\n\tTo have all the files in your array shown in the same directory tree,\n\tyou can enable the \"pooling\" feature. It consists in creating a\n\tread-only virtual view of all the files in your array using symbolic\n\tlinks.\n\n\tYou can configure the \"pooling\" directory in the configuration file with:\n\n\t\t:pool /pool\n\n\tor, if you are in Windows, with:\n\n\t\t:pool C:\\pool\n\n\tand then run the \"pool\" command to create or update the virtual view.\n\n\t\t:snapraid pool\n\n\tIf you are using a Unix platform and you want to share such directory\n\tin the network to either Windows or Unix machines, you should add\n\tto your /etc/samba/smb.conf the following options:\n\n\t\t:# In the global section of smb.conf\n\t\t:unix extensions = no\n\n\t\t:# In the share section of smb.conf\n\t\t:[pool]\n\t\t:comment = Pool\n\t\t:path = /pool\n\t\t:read only = yes\n\t\t:guest ok = yes\n\t\t:wide links = yes\n\t\t:follow symlinks = yes\n\n\tIn Windows the same sharing operation is not so straightforward,\n\tbecause Windows shares the symbolic links as they are, and that\n\trequires the network clients to resolve them remotely.\n\n\tTo make it working, besides sharing in the network the pool directory,\n\tyou must also share all the disks independently, using as share points\n\tthe disk names as defined in the configuration file. You must also specify in\n\tthe \"share\" option of the configure file, the Windows UNC path that remote\n\tclients needs to use to access such shared disks.\n\n\tFor example, operating from a server named \"darkstar\", you can use\n\tthe options:\n\n\t\t:data d1 F:\\array\\\n\t\t:data d2 G:\\array\\\n\t\t:data d3 H:\\array\\\n\t\t:pool C:\\pool\n\t\t:share \\\\darkstar\n\n\tand share the following dirs in the network:\n\n\t\t:\\\\darkstar\\pool -> C:\\pool\n\t\t:\\\\darkstar\\d1 -> F:\\array\n\t\t:\\\\darkstar\\d2 -> G:\\array\n\t\t:\\\\darkstar\\d3 -> H:\\array\n\n\tto allow remote clients to access all the files at \\\\darkstar\\\\pool.\n\n\tYou may also need to configure remote clients enabling access at remote\n\tsymlinks with the command:\n\n\t\t:fsutil behavior set SymlinkEvaluation L2L:1 R2R:1 L2R:1 R2L:1\n\n  Undeleting\n\tSnapRAID is more like a backup program than a RAID system, and it\n\tcan be used to restore or undelete files to their previous state using\n\tthe -f, --filter option :\n\n\t\t:snapraid fix -f FILE\n\n\tor for a directory:\n\n\t\t:snapraid fix -f DIR/\n\n\tYou can also use it to recover only accidentally deleted files inside\n\ta directory using the -m, --filter-missing option, that restores\n\tonly missing files, leaving untouched all the others.\n\n\t\t:snapraid fix -m -f DIR/\n\n\tOr to recover all the deleted files in all the drives with:\n\n\t\t:snapraid fix -m\n\n  Recovering\n\tThe worst happened, and you lost one or more disks!\n\n\tDO NOT PANIC! You will be able to recover them!\n\n\tThe first thing you have to do is to avoid further changes at your disk array.\n\tDisable any remote connection to it, any scheduled process, including any\n\tscheduled SnapRAID nightly sync or scrub.\n\n\tThen proceed with the following steps.\n\n    STEP 1 -> Reconfigure\n\tYou need some space to recover, even better if you already have additional\n\tspare disks, but in case, also an external USB or remote disk is enough.\n\n\tChange the SnapRAID configuration file to make the \"data\" or \"parity\"\n\toption of the failed disk to point to the place where you have enough empty\n\tspace to recover the files.\n\n\tFor example, if you have that disk \"d1\" failed, you can change from:\n\n\t\t:data d1 /mnt/disk1/\n\n\tto:\n\n\t\t:data d1 /mnt/new_spare_disk/\n\n\tIf the disk to recover is a parity disk, change the appropriate \"parity\"\n\toption.\n\tIf you have more broken disks, change all their configuration options.\n\n    STEP 2 -> Fix\n\tRun the fix command, storing the log in an external file with:\n\n\t\t:snapraid -d NAME -l fix.log fix\n\n\tWhere NAME is the name of the disk, like \"d1\" as in our previous example.\n\tIn case the disk to recover is a parity disk, use the \"parity\", \"2-parity\"\n\tnames.\n\tIf you have more broken disks, use multiple -d options to specify all\n\tof them.\n\n\tThis command will take a long time.\n\n\tTake care that you need also few gigabytes free to store the fix.log file.\n\tRun it from a disk with some free space.\n\n\tNow you have recovered all the recoverable. If some file is partially or totally\n\tunrecoverable, it will be renamed adding the \".unrecoverable\" extension.\n\n\tYou can get a detailed list of all the unrecoverable blocks in the fix.log file\n\tchecking all the lines starting with \"unrecoverable:\"\n\n\tIf you are not satisfied of the recovering, you can retry it as many\n\ttime you wish.\n\n\tFor example, if you have removed files from the array after the last\n\t\"sync\", this may result in some other files not recovered.\n\tIn this case, you can retry the \"fix\" using the -i, --import option,\n\tspecifying where these files are now, to include them again in the\n\trecovering process.\n\n\tIf you are satisfied of the recovering, you can now proceed further,\n\tbut take care that after syncing you cannot retry the \"fix\" command\n\tanymore!\n\n    STEP 3 -> Check\n\tAs paranoid check, you can now run a \"check\" command to ensure that\n\teverything is OK on the recovered disk.\n\n\t\t:snapraid -d NAME -a check\n\n\tWhere NAME is the name of the disk, like \"d1\" as in our previous example.\n\n\tThe options -d and -a tell SnapRAID to check only the specified disk,\n\tand ignore all the parity data.\n\n\tThis command will take a long time, but if you are not paranoid,\n\tyou can skip it.\n\n    STEP 4 -> Sync\n\tRun the \"sync\" command to re-synchronize the array with the new disk.\n\n\t\t:snapraid sync\n\n\tIf everything is recovered, this command is immediate.\n\nCommands\n\tSnapRAID provides a few simple commands that allow to:\n\n\t* Prints the status of the array -> \"status\"\n\t* Controls the disks -> \"smart\", \"up\", \"down\"\n\t* Makes a backup/snapshot -> \"sync\"\n\t* Periodically checks data -> \"scrub\"\n\t* Restore the last backup/snapshot -> \"fix\".\n\n\tTake care that the commands have to be written in lower case.\n\n  status\n\tPrints a summary of the state of the disk array.\n\n\tIt includes information about the parity fragmentation, how old\n\tare the blocks without checking, and all the recorded silent\n\terrors encountered while scrubbing.\n\n\tNote that the information presented refers at the latest time you\n\trun \"sync\". Later modifications are not taken into account.\n\n\tIf bad blocks were detected, their block numbers are listed.\n\tTo fix them, you can use the \"fix -e\" command.\n\n\tIt also shows a graph representing the last time each block\n\twas scrubbed or synced. Scrubbed blocks are shown with '*',\n\tblocks synced but not yet scrubbed with 'o'.\n\n\tNothing is modified.\n\n  smart\n\tPrints a SMART report of all the disks of the array.\n\n\tIt includes an estimation of the probability of failure in the next\n\tyear allowing to plan maintenance replacements of the disks that show\n\tsuspicious attributes.\n\n\tThis probability estimation obtained correlating the SMART attributes\n\tof the disks, with the Backblaze data available at:\n\n\t\t:https://www.backblaze.com/hard-drive-test-data.html\n\n\tIf SMART reports that a disk is failing, \"FAIL\" or \"PREFAIL\" is printed\n\tfor that disk, and SnapRAID returns with an error.\n\tIn this case an immediate replacement of the disk is highly recommended.\n\n\tOther possible strings are:\n\t\tlogfail - In the past some attributes were lower than\n\t\t\tthe threshold.\n\t\tlogerr - The device error log contains errors.\n\t\tselferr - The device self-test log contains errors.\n\n\tIf the -v, --verbose option is specified a deeper statistical analysis\n\tis provided. This analysis can help you to decide if you need more\n\tor less parity.\n\n\tThis command uses the \"smartctl\" tool, and it's equivalent to run\n\t\"smartctl -a\" on all the devices.\n\n\tIf your devices are not auto-detected correctly, you can configure\n\ta custom command using the \"smartctl\" option in the configuration\n\tfile.\n\n\tNothing is modified.\n\n  up\n\tSpins up all the disks of the array.\n\n\tYou can spin-up only some specific disks using the -d, --filter-disk option.\n\n\tTake care that spinning-up all the disks at the same time needs a lot of power.\n\tEnsure that your power-supply can sustain that.\n\n\tNothing is modified.\n\n  down\n\tSpins down all the disks of the array.\n\n\tThis command uses the \"smartctl\" tool, and it's equivalent to run\n\t\"smartctl -s standby,now\" on all the devices.\n\n\tYou can spin-down only some specific disks using the -d, --filter-disk option.\n\n\tNothing is modified.\n\n  diff\n\tLists all the files modified from the last \"sync\" that need to have\n\ttheir parity data recomputed.\n\n\tThis command doesn't check the file data, but only the file time-stamp\n\tsize and inode.\n\n\tAt the end of the command, you'll get a summary of the file changes\n\tgrouped by:\n\t\tequal - Files equal at before.\n\t\tadded - Files added that were not present before.\n\t\tremoved - Files removed.\n\t\tupdated - Files with a different size or time-stamp, meaning that\n\t\t\tthey were modified.\n\t\tmoved - Files moved to a different directory of the same disk.\n\t\t\tThey are identified by having the same name, size, time-stamp\n\t\t\tand inode, but different directory.\n\t\tcopied - Files copied in the same or different disk. Note that if in\n\t\t\ttrue they are moved to a different disk, you'll also have\n\t\t\tthem counted in \"removed\".\n\t\t\tThey are identified by having the same name, size, and\n\t\t\ttime-stamp. But if the sub-second time-stamp is zero,\n\t\t\tthen the full path should match, and not only the name.\n\t\trestored - Files with a different inode but with name, size and time-stamp\n\t\t\tmatching. These are usually files restored after being deleted.\n\n\tIf a \"sync\" is required, the process return code is 2, instead of the\n\tdefault 0. The return code 1 is instead for a generic error condition.\n\n\tNothing is modified.\n\n  sync\n\tUpdates the parity information. All the modified files\n\tin the disk array are read, and the corresponding parity\n\tdata is updated.\n\n\tYou can stop this process at any time pressing Ctrl+C,\n\twithout losing the work already done.\n\tAt the next run the \"sync\" process will start where\n\tinterrupted.\n\n\tIf during the process, silent or input/output errors are found,\n\tthe corresponding blocks are marked as bad.\n\n\tFiles are identified by path and/or inode and checked by\n\tsize and time-stamp.\n\tIf the file size or time-stamp are different, the parity data\n\tis recomputed for the whole file.\n\tIf the file is moved or renamed in the same disk, keeping the\n\tsame inode, the parity is not recomputed.\n\tIf the file is moved to another disk, the parity is recomputed,\n\tbut the previously computed hash information is kept.\n\n\tThe \"content\" and \"parity\" files are modified if necessary.\n\tThe files in the array are NOT modified.\n\n  scrub\n\tScrubs the array, checking for silent or input/output errors in data\n\tand parity disks.\n\n\tFor each command invocation, about the 8% of the array is checked, but\n\tnothing that was already scrubbed in the last 10 days.\n\tThis means that scrubbing once a week, every bit of data is checked\n\tat least one time every three months.\n\n\tYou can define a different scrub plan or amount using the -p, --plan\n\toption that takes as argument:\n\tbad - Scrub blocks marked bad.\n\tnew - Scrub just synced blocks not yet scrubbed.\n\tfull - Scrub everything.\n\t0-100 - Scrub the exact percentage of blocks.\n\n\tIf you specify a percentage amount, you can also use the -o, --older-than\n\toption to define how old the block should be.\n\tThe oldest blocks are scrubbed first ensuring an optimal check.\n\tIf instead you want to scrub the just synced blocks, not yet scrubbed,\n\tyou should use the \"-p new\" option.\n\n\tTo get the details of the scrub status use the \"status\" command.\n\n\tFor any silent or input/output error found the corresponding blocks\n\tare marked as bad in the \"content\" file.\n\tThese bad blocks are listed in \"status\", and can be fixed with \"fix -e\".\n\tAfter the fix, at the next scrub they will be rechecked, and if found\n\tcorrected, the bad mark will be removed.\n\tTo scrub only the bad blocks, you can use the \"scrub -p bad\" command.\n\n\tIt's recommended to run \"scrub\" only on a synced array, to avoid to\n\thave reported error caused by unsynced data. These errors are recognized\n\tas not being silent errors, and the blocks are not marked as bad,\n\tbut such errors are reported in the output of the command.\n\n\tFiles are identified only by path, and not by inode.\n\n\tThe \"content\" file is modified to update the time of the last check\n\tof each block, and to mark bad blocks.\n\tThe \"parity\" files are NOT modified.\n\tThe files in the array are NOT modified.\n\n  fix\n\tFix all the files and the parity data.\n\n\tAll the files and the parity data are compared with the snapshot\n\tstate saved in the last \"sync\".\n\tIf a difference is found, it's reverted to the stored snapshot.\n\n\tThe \"fix\" command doesn't differentiate between errors and\n\tintentional modifications. It unconditionally reverts the file state\n\tat the last \"sync\".\n\n\tIf no other option is specified the full array is processed.\n\tUse the filter options to select a subset of files or disks to operate on.\n\n\tTo only fix the blocks marked bad during \"sync\" and \"scrub\",\n\tuse the -e, --filter-error option.\n\tAs difference from other filter options, with this one the fixes are\n\tapplied only to files that are not modified from the latest \"sync\".\n\n\tAll the files that cannot be fixed are renamed adding the\n\t\".unrecoverable\" extension.\n\n\tBefore fixing, the full array is scanned to find any moved file,\n\tafter the last \"sync\" operation.\n\tThese files are identified by their time-stamp, ignoring their name\n\tand directory, and are used in the recovering process if necessary.\n\tIf you moved some of them outside the array, you can use the -i, --import\n\toption to specify additional directories to scan.\n\n\tFiles are identified only by path, and not by inode.\n\n\tThe \"content\" file is NOT modified.\n\tThe \"parity\" files are modified if necessary.\n\tThe files in the array are modified if necessary.\n\n  check\n\tVerify all the files and the parity data.\n\n\tIt works like \"fix\", but it only simulates a recovery and no change\n\tis written in the array.\n\n\tThis command is mostly intended for manual verification,\n\tlike after a recovery process or in other special conditions.\n\tFor periodic and scheduled checks uses \"scrub\".\n\n\tIf you use the -a, --audit-only option, only the file\n\tdata is checked, and the parity data is ignored for a\n\tfaster run.\n\n\tFiles are identified only by path, and not by inode.\n\n\tNothing is modified.\n\n  list\n\tLists all the files contained in the array at the time of the\n\tlast \"sync\".\n\n\tNothing is modified.\n\n  dup\n\tLists all the duplicate files. Two files are assumed equal if their\n\thashes are matching. The file data is not read, but only the\n\tpre-computed hashes are used.\n\n\tNothing is modified.\n\n  pool\n\tCreates or updates in the \"pooling\" directory a virtual view of all\n\tthe files of your disk array.\n\n\tThe files are not really copied here, but just linked using\n\tsymbolic links.\n\n\tWhen updating, all the present symbolic links and empty\n\tsub-directories are deleted and replaced with the new\n\tview of the array. Any other regular file is left in place.\n\n\tNothing is modified outside the pool directory.\n\n  devices\n\tPrints the low level devices used by the array.\n\n\tThis command prints the devices associations in place in the array,\n\tand it's mainly intended as a script interface.\n\n\tThe first two columns are the low level device id and path.\n\tThe next two columns are the high level device id and path.\n\tThe latest column if the disk name in the array.\n\n\tIn most cases you have one low level device for each disk in the\n\tarray, but in some more complex configurations, you may have multiple\n\tlow level devices used by a single disk in the array.\n\n\tNothing is modified.\n\n  touch\n\tSets arbitrarily the sub-second time-stamp of all the files\n\tthat have it at zero.\n\n\tThis improves the SnapRAID capability to recognize moved\n\tand copied files as it makes the time-stamp almost unique,\n\tremoving possible duplicates.\n\n\tMore specifically, if the sub-second time-stamp is not zero,\n\ta moved or copied file is identified as such if it matches\n\tthe name, size and time-stamp. If instead the sub-second time-stamp\n\tis zero, it's considered a copy only if it matches the full path,\n\tsize and time-stamp.\n\n\tNote that the second precision time-stamp is not modified,\n\tand all the dates and times of your files will be maintained.\n\n  rehash\n\tSchedules a rehash of the whole array.\n\n\tThis command changes the hash kind used, typically when upgrading\n\tfrom a 32 bits system to a 64 bits one, to switch from\n\tMurmurHash3 to the faster SpookyHash.\n\n\tIf you are already using the optimal hash, this command\n\tdoes nothing and tells you that nothing has to be done.\n\n\tThe rehash isn't done immediately, but it takes place\n\tprogressively during \"sync\" and \"scrub\".\n\n\tYou can get the rehash state using \"status\".\n\n\tDuring the rehash, SnapRAID maintains full functionality,\n\twith the only exception of \"dup\" not able to detect duplicated\n\tfiles using a different hash.\n\nOptions\n\tSnapRAID provides the following options:\n\n\t-c, --conf CONFIG\n\t\tSelects the configuration file to use. If not specified in Unix\n\t\tit's used the file \"/usr/local/etc/snapraid.conf\" if it exists,\n\t\tor \"/etc/snapraid.conf\" otherwise.\n\t\tIn Windows it's used the file \"snapraid.conf\" in the same\n\t\tdirectory of \"snapraid.exe\".\n\n\t-f, --filter PATTERN\n\t\tFilters the files to process in \"check\" and \"fix\".\n\t\tOnly the files matching the entered pattern are processed.\n\t\tThis option can be used many times.\n\t\tSee the PATTERN section for more details in the\n\t\tpattern specifications.\n\t\tIn Unix, ensure to quote globbing chars if used.\n\t\tThis option can be used only with \"check\" and \"fix\".\n\t\tNote that it cannot be used with \"sync\" and \"scrub\", because they always\n\t\tprocess the whole array.\n\n\t-d, --filter-disk NAME\n\t\tFilters the disks to process in \"check\", \"fix\", \"up\" and \"down\".\n\t\tYou must specify a disk name as named in the configuration\n\t\tfile.\n\t\tYou can also specify parity disks with the names: \"parity\", \"2-parity\",\n\t\t\"3-parity\", ... to limit the operations a specific parity disk.\n\t\tIf you combine more --filter, --filter-disk and --filter-missing options,\n\t\tonly files matching all the set of filters are selected.\n\t\tThis option can be used many times.\n\t\tThis option can be used only with \"check\", \"fix\", \"up\" and \"down\".\n\t\tNote that it cannot be used with \"sync\" and \"scrub\", because they always\n\t\tprocess the whole array.\n\n\t-m, --filter-missing\n\t\tFilters the files to process in \"check\" and \"fix\".\n\t\tOnly the files missing/deleted from the array are processed.\n\t\tWhen used with \"fix\", this is a kind of \"undelete\" command.\n\t\tIf you combine more --filter, --filter-disk and --filter-missing options,\n\t\tonly files matching all the set of filters are selected.\n\t\tThis option can be used only with \"check\" and \"fix\".\n\t\tNote that it cannot be used with \"sync\" and \"scrub\", because they always\n\t\tprocess the whole array.\n\n\t-e, --filter-error\n\t\tProcess the files with errors in \"check\" and \"fix\".\n\t\tIt processes only files that have blocks marked with silent\n\t\tor input/output errors during \"sync\" and \"scrub\", and listed in \"status\".\n\t\tThis option can be used only with \"check\" and \"fix\".\n\n\t-p, --plan PERC|bad|new|full\n\t\tSelects the scrub plan. If PERC is a numeric value from 0 to 100,\n\t\tit's interpreted as the percentage of blocks to scrub.\n\t\tInstead of a percentage, you can also specify a plan:\n\t\t\"bad\" scrubs bad blocks, \"new\" the blocks not yet scrubbed,\n\t\tand \"full\" for everything.\n\t\tThis option can be used only with \"scrub\".\n\n\t-o, --older-than DAYS\n\t\tSelects the older the part of the array to process in \"scrub\".\n\t\tDAYS is the minimum age in days for a block to be scrubbed,\n\t\tdefault is 10.\n\t\tBlocks marked as bad are always scrubbed despite this option.\n\t\tThis option can be used only with \"scrub\".\n\n\t-a, --audit-only\n\t\tIn \"check\" verifies the hash of the files without\n\t\tdoing any kind of check on the parity data.\n\t\tIf you are interested in checking only the file data this\n\t\toption can speedup a lot the checking process.\n\t\tThis option can be used only with \"check\".\n\n\t-h, --pre-hash\n\t\tIn \"sync\" runs a preliminary hashing phase of all the new data\n\t\tto have an additional verification before the parity computation.\n\t\tUsually in \"sync\" no preliminary hashing is done, and the new\n\t\tdata is hashed just before the parity computation when it's read\n\t\tfor the first time.\n\t\tUnfortunately, this process happens when the system is under\n\t\theavy load, with all disks spinning and with a busy CPU.\n\t\tThis is an extreme condition for the machine, and if it has a\n\t\tlatent hardware problem, it's possible to encounter silent errors\n\t\twhat cannot be detected because the data is not yet hashed.\n\t\tTo avoid this risk, you can enable the \"pre-hash\" mode and have\n\t\tall the data read two times to ensure its integrity.\n\t\tThis option also verifies the files moved inside the array,\n\t\tto ensure that the move operation went successfully, and in case\n\t\tto block the sync and to allow to run a fix operation.\n\t\tThis option can be used only with \"sync\".\n\n\t-i, --import DIR\n\t\tImports from the specified directory any file that you deleted\n\t\tfrom the array after the last \"sync\".\n\t\tIf you still have such files, they could be used by \"check\"\n\t\tand \"fix\" to improve the recover process.\n\t\tThe files are read also in sub-directories and they are\n\t\tidentified regardless of their name.\n\t\tThis option can be used only with \"check\" and \"fix\".\n\n\t-Z, --force-zero\n\t\tForces the insecure operation of syncing a file with zero\n\t\tsize that before was not.\n\t\tIf SnapRAID detects a such condition, it stops proceeding\n\t\tunless you specify this option.\n\t\tThis allows to easily detect when after a system crash,\n\t\tsome accessed files were truncated.\n\t\tThis is a possible condition in Linux with the ext3/ext4\n\t\tfile-systems.\n\t\tThis option can be used only with \"sync\".\n\n\t-E, --force-empty\n\t\tForces the insecure operation of syncing a disk with all\n\t\tthe original files missing.\n\t\tIf SnapRAID detects that all the files originally present\n\t\tin the disk are missing or rewritten, it stops proceeding\n\t\tunless you specify this option.\n\t\tThis allows to easily detect when a data file-system is not\n\t\tmounted.\n\t\tThis option can be used only with \"sync\".\n\n\t-U, --force-uuid\n\t\tForces the insecure operation of syncing, checking and fixing\n\t\twith disks that have changed their UUID.\n\t\tIf SnapRAID detects that some disks have changed UUID,\n\t\tit stops proceeding unless you specify this option.\n\t\tThis allows to detect when your disks are mounted in the\n\t\twrong mount points.\n\t\tIt's anyway allowed to have a single UUID change with\n\t\tsingle parity, and more with multiple parity, because it's\n\t\tthe normal case of replacing disks after a recovery.\n\t\tThis option can be used only with \"sync\", \"check\" or\n\t\t\"fix\".\n\n\t-D, --force-device\n\t\tForces the insecure operation of fixing with inaccessible disks,\n\t\tor with disks on the same physical device.\n\t\tLike if you lost two data disks, and you have a spare disk to recover\n\t\tonly the first one, and you want to ignore the second inaccessible disk.\n\t\tOr if you want to recover a disk in the free space left in an\n\t\talready used disk, sharing the same physical device.\n\t\tThis option can be used only with \"fix\".\n\n\t-N, --force-nocopy\n\t\tIn \"sync\", \"check and \"fix\", disables the copy detection heuristic.\n\t\tWithout this option SnapRAID assumes that files with same\n\t\tattributes, like name, size and time-stamp are copies with the\n\t\tsame data.\n\t\tThis allows to identify copied or moved files from one disk\n\t\tto another, and to reuse the already computed hash information\n\t\tto detect silent errors or to recover missing files.\n\t\tThis behavior, in some rare cases, may result in false positives,\n\t\tor in a slow process due the many hash verification, and this\n\t\toption allows to resolve them.\n\t\tThis option can be used only with \"sync\", \"check\" and \"fix\".\n\n\t-F, --force-full\n\t\tIn \"sync\" forces a full recomputation of the parity.\n\t\tThis option can be used when you add a new parity level, or if\n\t\tyou reverted back to an old content file using a more recent parity data.\n\t\tInstead of recreating the parity from scratch, this allows\n\t\tto reuse the hashes present in the content file to validate data,\n\t\tand to maintain data protection during the \"sync\" process using\n\t\tthe parity data you have.\n\t\tThis option can be used only with \"sync\".\n\n\t-R, --force-realloc\n\t\tIn \"sync\" forces a full reallocation of files and rebuild of the parity.\n\t\tThis option can be used to completely reallocate all the files\n\t\tremoving the fragmentation, but reusing the hashes present in the content\n\t\tfile to validate data.\n\t\tThis option can be used only with \"sync\".\n\t\tWARNING! This option is for experts only, and it's highly\n\t\trecommended to not use it.\n\t\tYou DO NOT have data protection during the \"sync\" operation.\n\n\t-l, --log FILE\n\t\tWrite a detailed log in the specified file.\n\t\tIf this option is not specified, unexpected errors are printed\n\t\ton the screen, likely resulting in too much output in case of\n\t\tmany errors. When -l, --log is specified, on the screen, go only\n\t\tfatal errors that makes SnapRAID to stop progress.\n\t\tIf the path starts with '>>' the file is opened\n\t\tin append mode. Occurrences of '%D' and '%T' in the name are\n\t\treplaced with the date and time in the format YYYYMMDD and\n\t\tHHMMSS. Note that in Windows batch files, you'll have to double\n\t\tthe '%' char, like result-%%D.log. And to use '>>' you'll have\n\t\tto enclose the name in \", like \">>result.log\".\n\t\tTo output the log to standard output or standard error,\n\t\tyou can use respectively \">&1\" and \">&2\".\n\n\t-L, --error-limit\n\t\tSets a new error limit before stopping execution.\n\t\tBy default SnapRAID stops if it encounters more than 100\n\t\tInput/Output errors, meaning that likely a disk is going to\n\t\tdie.\n\t\tThis options affects \"sync\" and \"scrub\", that are allowed\n\t\tto continue after the first bunch of disk errors, to try\n\t\tto complete at most their operations.\n\t\tInstead, \"check\" and \"fix\" always stop at the first error.\n\n\t-S, --start BLKSTART\n\t\tStarts the processing from the specified\n\t\tblock number. It could be useful to retry to check\n\t\tor fix some specific block, in case of a damaged disk.\n\t\tIt's present mainly for advanced manual recovering.\n\n\t-B, --count BLKCOUNT\n\t\tProcesses only the specified number of blocks.\n\t\tIt's present mainly for advanced manual recovering.\n\n\t-C, --gen-conf CONTENT_FILE\n\t\tGenerates a dummy configuration file from an existing\n\t\tcontent file.\n\t\tThe configuration file is written in the standard output,\n\t\tand it doesn't overwrite an existing one.\n\t\tThis configuration file also contains the information\n\t\tneeded to reconstruct the disk mount points, in case you\n\t\tlose the entire system.\n\n\t-v, --verbose\n\t\tPrints more information on the screen.\n\t\tIf specified one time, it prints excluded files\n\t\tand more stats.\n\t\tThis option has no effect on the log files.\n\n\t-q, --quiet\n\t\tPrints less information on the screen.\n\t\tIf specified one time, removes the progress bar, if two\n\t\ttimes, the running operations, three times, the info\n\t\tmessages, four times the status messages.\n\t\tFatal errors are always printed on the screen.\n\t\tThis option has no effect on the log files.\n\n\t-H, --help\n\t\tPrints a short help screen.\n\n\t-V, --version\n\t\tPrints the program version.\n\nConfiguration\n\tSnapRAID requires a configuration file to know where your disk array\n\tis located, and where storing the parity information.\n\n\tIn Unix it's used the file \"/usr/local/etc/snapraid.conf\" if it exists,\n\tor \"/etc/snapraid.conf\" otherwise.\n\tIn Windows it's used the file \"snapraid.conf\" in the same\n\tdirectory of \"snapraid.exe\".\n\n\tIt should contain the following options (case sensitive):\n\n  parity FILE [,FILE] ...\n\tDefines the files to use to store the parity information.\n\tThe parity enables the protection from a single disk\n\tfailure, like RAID5.\n\n\tYou can specify multiples files that should be in different disks.\n\tWhen a file cannot grow anymore, the next one is used.\n\tThe total space available must be as big as the biggest data disk in\n\tthe array.\n\n\tYou can add additional parity files at later time, but you\n\tcannot reorder or remove them.\n\n\tLeaving the parity disks reserved for parity ensures that\n\tit doesn't get fragmented, improving the performance.\n\n\tIn Windows 256 MB are left unused in each disk to avoid the\n\twarning about full disks.\n\n\tThis option is mandatory and it can be used only one time.\n\n  (2,3,4,5,6)-parity FILE [,FILE] ...\n\tDefines the files to use to store extra parity information.\n\n\tFor each parity specified, one additional level of protection\n\tis enabled:\n\n\t* 2-parity enables RAID6 dual parity.\n\t* 3-parity enables triple parity\n\t* 4-parity enables quad (four) parity\n\t* 5-parity enables penta (five) parity\n\t* 6-parity enables hexa (six) parity\n\n\tEach parity level requires the presence of all the previous parity\n\tlevels.\n\n\tThe same considerations of the 'parity' option apply.\n\n\tThese options are optional and they can be used only one time.\n\n  z-parity FILE [,FILE] ...\n\tDefines an alternate file and format to store the triple parity.\n\n\tThis option is an alternative at '3-parity' mainly intended for\n\tlow-end CPUs like ARM or AMD Phenom, Athlon and Opteron that don't\n\tsupport the SSSE3 instructions set. In such cases it provides\n\ta better performance.\n\n\tThis format is similar, but faster, at the one used by the ZFS RAIDZ3.\n\tLike ZFS, it doesn't work beyond triple parity.\n\n\tWhen using '3-parity' you will be warned if it's recommended to use\n\tthe 'z-parity' format for a performance improvement.\n\n\tIt's possible to convert from one format to another, adjusting\n\tthe configuration file with the wanted z-parity or 3-parity file,\n\tand using 'fix' to recreate it.\n\n  content FILE\n\tDefines the file to use to store the list and check-sums of all the\n\tfiles present in your disk array.\n\n\tIt can be placed in the disk used to store data, parity, or\n\tany other disk available.\n\tIf you use a data disk, this file is automatically excluded\n\tfrom the \"sync\" process.\n\n\tThis option is mandatory and it can be used more times to save\n\tmore copies of the same files.\n\n\tYou have to store at least one copy for each parity disk used\n\tplus one. Using some more doesn't hurt.\n\n  data NAME DIR\n\tDefines the name and the mount point of the data disks of\n\tthe array. NAME is used to identify the disk, and it must\n\tbe unique. DIR is the mount point of the disk in the\n\tfile-system.\n\n\tYou can change the mount point as you like, as long you\n\tkeep the NAME fixed.\n\n\tYou should use one option for each data disk of the array.\n\n\tYou can rename later a disk, changing the NAME directly\n\tin the configuration file, and then run a 'sync' command.\n\tIn the rename case, the association is done using the stored\n\tUUID of the disks.\n\n  nohidden\n\tExcludes all the hidden files and directory.\n\tIn Unix hidden files are the ones starting with \".\".\n\tIn Windows they are the ones with the hidden attribute.\n\n  exclude/include PATTERN\n\tDefines the file or directory patterns to exclude and include\n\tin the sync process.\n\tAll the patterns are processed in the specified order.\n\n\tIf the first pattern that matches is an \"exclude\" one, the file\n\tis excluded. If it's an \"include\" one, the file is included.\n\tIf no pattern matches, the file is excluded if the last pattern\n\tspecified is an \"include\", or included if the last pattern\n\tspecified is an \"exclude\".\n\n\tSee the PATTERN section for more details in the pattern\n\tspecifications.\n\n\tThis option can be used many times.\n\n  blocksize SIZE_IN_KIBIBYTES\n\tDefines the basic block size in kibi bytes of the parity.\n\tOne kibi bytes is 1024 bytes.\n\n\tThe default blocksize is 256 and it should work for most cases.\n\n\tWARNING! This option is for experts only, and it's highly\n\trecommended to not change it. To change again this value in\n\tfuture you'll have to recreate the whole parity!\n\n\tA reason to use a different blocksize is if you have a lot of small\n\tfiles. In the order of many millions.\n\n\tFor each file, even of few bytes, a whole block of parity is allocated,\n\tand with many files this may result in a lot of unused parity space.\n\tAnd when you completely fill the parity disk, you are not\n\tallowed to add more files in the data disks.\n\tAnyway, the wasted parity doesn't sum between data disks. Wasted space\n\tresulting from a high number of files in a data disk, limits only\n\tthe amount of data in such data disk and not in others.\n\n\tAs approximation, you can assume that half of the block size is\n\twasted for each file. For example, with 100000 files and a 256 KiB\n\tblock size, you are going to waste 13 GB of parity, that may result\n\tin 13 GB less space available in the data disk.\n\n\tYou can get the amount of wasted space in each disk using \"status\".\n\tThis is the amount of space that you must leave free in the data\n\tdisks, or use for files not included in the array.\n\tIf this value is negative, it means that your are near to fill\n\tthe parity, and it represents the space you can still waste.\n\n\tTo avoid the problem, you can use a bigger partition for parity.\n\tFor example, if you have the parity partition bigger than 13 GB\n\tthan data disks, you have enough extra space to handle up to 100000\n\tfiles in each data disk.\n\n\tA trick to get a bigger parity partition in Linux, is to format it\n\twith the command:\n\n\t\t:mkfs.ext4 -m 0 -T largefile4 DEVICE\n\n\tThis results in about 1.5% of extra space. Meaning about 60 GB for\n\ta 4 TB disk, that allows about 460000 files in each data disk without\n\tany wasted space.\n\n  hashsize SIZE_IN_BYTES\n\tDefines the hash size in bytes of the saved blocks.\n\n\tThe default hashsize is 16 bytes (128 bits), and it should work\n\tfor most cases.\n\n\tWARNING! This option is for experts only, and it's highly\n\trecommended to not change it. To change again this value in\n\tfuture you'll have to recreate the whole parity!\n\n\tA reason to use a different hashsize is if your system has\n\tsmall memory. As a rule of thumb SnapRAID usually requires\n\t1 GiB of RAM memory for each 16 TB of data in the array.\n\n\tSpecifically, to store the hashes of the data, SnapRAID requires\n\tabout TS*(1+HS)/BS bytes of RAM memory.\n\tWhere TS is the total size in bytes of your disk array, BS is the\n\tblock size in bytes, and HS is the hash size in bytes.\n\n\tFor example with 8 disks of 4 TB and a block size of 256 KiB\n\t(1 KiB = 1024 bytes), and an hash size of 16, you get:\n\n\t:RAM = (8 * 4 * 10^12) * (1+16) / (256 * 2^10) = 1.93 GiB\n\n\tSwitching to a hash size of 8, you get:\n\n\t:RAM = (8 * 4 * 10^12) * (1+8) / (256 * 2^10) = 1.02 GiB\n\n\tSwitching to a block size of 512, you get:\n\n\t:RAM = (8 * 4 * 10^12) * (1+16) / (512 * 2^10) = 0.96 GiB\n\n\tSwitching to both a hash size of 8, and a block size of 512 you get:\n\n\t:RAM = (8 * 4 * 10^12) * (1+8) / (512 * 2^10) = 0.51 GiB\n\n  autosave SIZE_IN_GIGABYTES\n\tAutomatically save the state when syncing or scrubbing after the specified amount\n\tof GB processed.\n\tThis option is useful to avoid to restart from scratch long \"sync\"\n\tcommands interrupted by a machine crash, or any other event that\n\tmay interrupt SnapRAID.\n\n  pool DIR\n\tDefines the pooling directory where the virtual view of the disk\n\tarray is created using the \"pool\" command.\n\n\tThe directory must already exist.\n\n  share UNC_DIR\n\tDefines the Windows UNC path required to access the disks remotely.\n\n\tIf this option is specified, the symbolic links created in the pool\n\tdirectory use this UNC path to access the disks.\n\tWithout this option the symbolic links generated use only local paths,\n\tnot allowing to share the pool directory in the network.\n\n\tThe symbolic links are formed using the specified UNC path, adding the\n\tdisk name as specified in the \"disk\" option, and finally adding the\n\tfile dir and name.\n\n\tThis option is only required for Windows.\n\n  smartctl DISK/PARITY OPTIONS...\n\tDefines a custom smartctl command to obtain the SMART attributes\n\tfor each disk. This may be required for RAID controllers and for\n\tsome USB disk that cannot be auto-detected.\n\n\tDISK is the same disk name specified in the \"disk\" option.\n\tPARITY is one of the parity name as \"parity,(1,2,3,4,5,6,z)-parity\".\n\n\tIn the specified OPTIONS, the \"%s\" string is replaced by the\n\tdevice name. Note that in case of RAID controllers the device is likely\n\tfixed, and you don't have to use \"%s\".\n\n\tRefers at the smartmontools documentation about the possible options:\n\n\t\t:https://www.smartmontools.org/wiki/Supported_RAID-Controllers\n\t\t:https://www.smartmontools.org/wiki/Supported_USB-Devices\n\n  Examples\n\tAn example of a typical configuration for Unix is:\n\n\t\t:parity /mnt/diskp/snapraid.parity\n\t\t:content /mnt/diskp/snapraid.content\n\t\t:content /var/snapraid/snapraid.content\n\t\t:data d1 /mnt/disk1/\n\t\t:data d2 /mnt/disk2/\n\t\t:data d3 /mnt/disk3/\n\t\t:exclude /lost+found/\n\t\t:exclude /tmp/\n\t\t:smartctl d1 -d sat %s\n\t\t:smartctl d2 -d usbjmicron %s\n\t\t:smartctl parity -d areca,1/1 /dev/sg0\n\t\t:smartctl 2-parity -d areca,2/1 /dev/sg0\n\n\tAn example of a typical configuration for Windows is:\n\n\t\t:parity E:\\snapraid.parity\n\t\t:content E:\\snapraid.content\n\t\t:content C:\\snapraid\\snapraid.content\n\t\t:data d1 G:\\array\\\n\t\t:data d2 H:\\array\\\n\t\t:data d3 I:\\array\\\n\t\t:exclude Thumbs.db\n\t\t:exclude \\$RECYCLE.BIN\n\t\t:exclude \\System Volume Information\n\t\t:smartctl d1 -d sat %s\n\t\t:smartctl d2 -d usbjmicron %s\n\t\t:smartctl parity -d areca,1/1 /dev/arcmsr0\n\t\t:smartctl 2-parity -d areca,2/1 /dev/arcmsr0\n\nPattern\n\tPatterns are used to select a subset of files to exclude or include in\n\tthe process.\n\n\tThere are four different types of patterns:\n\n\t=FILE\n\t\tSelects any file named as FILE. You can use any globbing\n\t\tcharacter like * and ?, and char classes like [a-z].\n\t\tThis pattern is applied only to files and not to directories.\n\n\t=DIR/\n\t\tSelects any directory named DIR and everything inside.\n\t\tYou can use any globbing character like * and ?.\n\t\tThis pattern is applied only to directories and not to files.\n\n\t=/PATH/FILE\n\t\tSelects the exact specified file path. You can use any\n\t\tglobbing character like * and ? but they never match a\n\t\tdirectory slash.\n\t\tThis pattern is applied only to files and not to directories.\n\n\t=/PATH/DIR/\n\t\tSelects the exact specified directory path and everything\n\t\tinside. You can use any globbing character like * and ? but\n\t\tthey never match a directory slash.\n\t\tThis pattern is applied only to directories and not to files.\n\n\tNote that when you specify an absolute path starting with /, it's\n\tapplied at the array root dir and not at the local file-system root dir.\n\n\tIn Windows you can use the backslash \\ instead of the forward slash /.\n\tNote that Windows system directories, junctions, mount points, and any\n\tother Windows special directory are treated just as files, meaning that\n\tto exclude them you must use a file rule, and not a directory one.\n\n\tIf the file name you want to use really contains a '*', '?', '[',\n\tor ']' char, you have to escape it to avoid to have interpreted as a\n\tglobbing character. In Unix the escape char is '\\', in Windows it's '^'.\n\tNote that when the pattern is on the command line, you have to double the\n\tescape character to avoid to have it interpreted by the command shell.\n\n\tIn the configuration file, you can use different strategies to filter\n\tthe files to process.\n\tThe simplest one is to use only \"exclude\" rules to remove all the\n\tfiles and directories you do not want to process. For example:\n\n\t\t:# Excludes any file named \"*.unrecoverable\"\n\t\t:exclude *.unrecoverable\n\t\t:# Excludes the root directory \"/lost+found\"\n\t\t:exclude /lost+found/\n\t\t:# Excludes any sub-directory named \"tmp\"\n\t\t:exclude tmp/\n\n\tThe opposite way is to define only the file you want to process, using\n\tonly \"include\" rules. For example:\n\n\t\t:# Includes only some directories\n\t\t:include /movies/\n\t\t:include /musics/\n\t\t:include /pictures/\n\n\tThe final way, is to mix \"exclude\" and \"include\" rules. In this case take\n\tcare that the order of rules is important. Previous rules have the\n\tprecedence over the later ones.\n\tTo get things simpler you can first have all the \"exclude\" rules and then\n\tall the \"include\" ones. For example:\n\n\t\t:# Excludes any file named \"*.unrecoverable\"\n\t\t:exclude *.unrecoverable\n\t\t:# Excludes any sub-directory named \"tmp\"\n\t\t:exclude tmp/\n\t\t:# Includes only some directories\n\t\t:include /movies/\n\t\t:include /musics/\n\t\t:include /pictures/\n\n\tOn the command line, using the -f option, you can only use \"include\"\n\tpatterns. For example:\n\n\t\t:# Checks only the .mp3 files.\n\t\t:# Note the \"\" use to avoid globbing expansion by the shell in Unix.\n\t\t:snapraid -f \"*.mp3\" check\n\n\tIn Unix, when using globbing chars in the command line, you have to\n\tquote them. Otherwise the shell will try to expand them.\n\nContent\n\tSnapRAID stores the list and check-sums of your files in the content file.\n\n\tIt's a binary file, listing all the files present in your disk array,\n\twith all the check-sums to verify their integrity.\n\n\tThis file is read and written by the \"sync\" and \"scrub\" commands, and\n\tread by \"fix\", \"check\" and \"status\".\n\nParity\n\tSnapRAID stores the parity information of your array in the parity\n\tfiles.\n\n\tThey are binary files, containing the computed parity of all the\n\tblocks defined in the \"content\" file.\n\n\tThese files are read and written by the \"sync\" and \"fix\" commands, and\n\tonly read by \"scrub\" and \"check\".\n\nEncoding\n\tSnapRAID in Unix ignores any encoding. It reads and stores the\n\tfile names with the same encoding used by the file-system.\n\n\tIn Windows all the names read from the file-system are converted and\n\tprocessed in the UTF-8 format.\n\n\tTo have the file names printed correctly you have to set the Windows\n\tconsole in the UTF-8 mode, with the command \"chcp 65001\", and use\n\ta TrueType font like \"Lucida Console\" as console font.\n\tNote that it has effect only on the printed file names, if you\n\tredirect the console output to a file, the resulting file is always\n\tin the UTF-8 format.\n\nCopyright\n\tThis file is Copyright (C) 2011 Andrea Mazzoleni\n\nSee Also\n\trsync(1)\n\n"
        },
        {
          "name": "snapraid.txt",
          "type": "blob",
          "size": 51.205078125,
          "content": "                        ===============================\r\n                        SnapRAID Backup For Disk Arrays\r\n                        ===============================\r\n\r\n\r\n1 SYNOPSIS\r\n==========\r\n\r\nsnapraid [-c, --conf CONFIG]\r\n\t[-f, --filter PATTERN] [-d, --filter-disk NAME]\r\n\t[-m, --filter-missing] [-e, --filter-error]\r\n\t[-a, --audit-only] [-h, --pre-hash] [-i, --import DIR]\r\n\t[-p, --plan PERC|bad|new|full]\r\n\t[-o, --older-than DAYS] [-l, --log FILE]\r\n\t[-Z, --force-zero] [-E, --force-empty]\r\n\t[-U, --force-uuid] [-D, --force-device]\r\n\t[-N, --force-nocopy] [-F, --force-full]\r\n\t[-R, --force-realloc]\r\n\t[-S, --start BLKSTART] [-B, --count BLKCOUNT]\r\n\t[-L, --error-limit NUMBER]\r\n\t[-v, --verbose] [-q, --quiet]\r\n\tstatus|smart|up|down|diff|sync|scrub|fix|check|list|dup\r\n\t|pool|devices|touch|rehash\r\n\r\nsnapraid [-V, --version] [-H, --help] [-C, --gen-conf CONTENT]\r\n\r\n\r\n2 DESCRIPTION\r\n=============\r\n\r\nSnapRAID is a backup program designed for disk arrays, storing\r\nparity information for data recovery in the event of up to six\r\ndisk failures.\r\n\r\nPrimarily intended for home media centers with large,\r\ninfrequently changing files, SnapRAID offers several features:\r\n\r\n* You can utilize disks already filled with files without the\r\n  need to reformat them, accessing them as usual.\r\n* All your data is hashed to ensure data integrity and prevent\r\n  silent corruption.\r\n* When the number of failed disks exceeds the parity count,\r\n  data loss is confined to the affected disks; data on\r\n  other disks remains accessible.\r\n* If you accidentally delete files on a disk, recovery is\r\n  possible.\r\n* Disks can have different sizes.\r\n* You can add disks at any time.\r\n* SnapRAID doesn't lock in your data; you can stop using it\r\n  anytime without reformatting or moving data.\r\n* To access a file, only a single disk needs to spin, saving\r\n  power and reducing noise.\r\n\r\nFor more information, please visit the official SnapRAID site:\r\n\r\n    http://www.snapraid.it/\r\n\r\n\r\n3 LIMITATIONS\r\n=============\r\n\r\nSnapRAID is in between a RAID and a Backup program trying to get the best\r\nbenefits of them. Although it also has some limitations that you should\r\nconsider before using it.\r\n\r\nThe main one is that if a disk fails, and you haven't recently synced,\r\nyou may be unable to do a complete recover.\r\nMore specifically, you may be unable to recover up to the size of\r\nthe changed or deleted files from the last sync operation.\r\nThis happens even if the files changed or deleted are not in the\r\nfailed disk. This is why SnapRAID is better suited for\r\ndata that rarely change.\r\n\r\nOn the other hand, newly added files don't prevent recovering already\r\nexisting files. You may only lose the recently added files, if they are on\r\nthe failed disk.\r\n\r\nOther SnapRAID limitations are:\r\n\r\n* With SnapRAID, you still have separate file-systems for each disk.\r\n  With RAID you get a single large file-system.\r\n* SnapRAID doesn't stripe data.\r\n  With RAID you get a speed boost with striping.\r\n* SnapRAID doesn't support real-time recovery.\r\n  With RAID you do not have to stop working when a disk fails.\r\n* SnapRAID is able to recover damages only from a limited number of disks.\r\n  With a Backup you can recover from a complete\r\n  failure of the whole disk array.\r\n* Only file, time-stamps, symlinks and hardlinks are saved.\r\n  Permissions, ownership and extended attributes are not saved.\r\n\r\n\r\n4 GETTING STARTED\r\n=================\r\n\r\nTo use SnapRAID you need to first select one disk of your disk array\r\nto dedicate at the \"parity\" information. With one disk for parity you\r\nwill be able to recover from a single disk failure, like RAID5.\r\n\r\nIf you want to be able to recover from more disk failures, like RAID6,\r\nyou must reserve additional disks for parity. Any additional parity\r\ndisk allow to recover from one more disk failure.\r\n\r\nAs parity disks, you have to pick the biggest disks in the array,\r\nas the parity information may grow in size as the biggest data\r\ndisk in the array.\r\n\r\nThese disks will be dedicated to store the \"parity\" files.\r\nYou should not store your data in them.\r\n\r\nThen you have to define the \"data\" disks that you want to protect\r\nwith SnapRAID. The protection is more effective if these disks\r\ncontain data that rarely change. For this reason it's better to\r\nDO NOT include the Windows C:\\ disk, or the Unix /home, /var and /tmp\r\ndisks.\r\n\r\nThe list of files is saved in the \"content\" files, usually\r\nstored in the data, parity or boot disks.\r\nThese files contain the details of your backup, with all the\r\ncheck-sums to verify its integrity.\r\nThe \"content\" file is stored in multiple copies, and each one must\r\nbe in a different disk, to ensure that in even in case of multiple\r\ndisk failures at least one copy is available.\r\n\r\nFor example, suppose that you are interested only at one parity level\r\nof protection, and that your disks are present in:\r\n\r\n    /mnt/diskp <- selected disk for parity\r\n    /mnt/disk1 <- first disk to protect\r\n    /mnt/disk2 <- second disk to protect\r\n    /mnt/disk3 <- third disk to protect\r\n\r\nyou have to create the configuration file /etc/snapraid.conf with\r\nthe following options:\r\n\r\n    parity /mnt/diskp/snapraid.parity\r\n    content /var/snapraid/snapraid.content\r\n    content /mnt/disk1/snapraid.content\r\n    content /mnt/disk2/snapraid.content\r\n    data d1 /mnt/disk1/\r\n    data d2 /mnt/disk2/\r\n    data d3 /mnt/disk3/\r\n\r\nIf you are in Windows, you should use the Windows path format, with drive\r\nletters and backslashes instead of slashes.\r\n\r\n    parity E:\\snapraid.parity\r\n    content C:\\snapraid\\snapraid.content\r\n    content F:\\array\\snapraid.content\r\n    content G:\\array\\snapraid.content\r\n    data d1 F:\\array\\\r\n    data d2 G:\\array\\\r\n    data d3 H:\\array\\\r\n\r\nIf you have many disks, and you run out of drive letters, you can mount\r\ndisks directly in sub folders. See:\r\n\r\n    https://www.google.com/search?q=Windows+mount+point\r\n\r\nAt this point you are ready to start the \"sync\" command to build the\r\nparity information.\r\n\r\n    snapraid sync\r\n\r\nThis process may take some hours the first time, depending on the size\r\nof the data already present in the disks. If the disks are empty\r\nthe process is immediate.\r\n\r\nYou can stop it at any time pressing Ctrl+C, and at the next run it\r\nwill start where interrupted.\r\n\r\nWhen this command completes, your data is SAFE.\r\n\r\nNow you can start using your array as you like, and periodically\r\nupdate the parity information running the \"sync\" command.\r\n\r\n4.1 Scrubbing\r\n-------------\r\n\r\nTo periodically check the data and parity for errors, you can\r\nrun the \"scrub\" command.\r\n\r\n    snapraid scrub\r\n\r\nThis command verifies the data in your array comparing it with\r\nthe hash computed in the \"sync\" command.\r\n\r\nEvery run of the command checks about the 8% of the array, but not data\r\nalready scrubbed in the previous 10 days.\r\nYou can use the -p, --plan option to specify a different amount,\r\nand the -o, --older-than option to specify a different age in days.\r\nFor example, to check 5% of the array older than 20 days use:\r\n\r\n    snapraid -p 5 -o 20 scrub\r\n\r\nIf during the process, silent or input/output errors are found,\r\nthe corresponding blocks are marked as bad in the \"content\" file,\r\nand listed in the \"status\" command.\r\n\r\n    snapraid status\r\n\r\nTo fix them, you can use the \"fix\" command filtering for bad blocks with\r\nthe -e, --filter-error options:\r\n\r\n    snapraid -e fix\r\n\r\nAt the next \"scrub\" the errors will disappear from the \"status\" report\r\nif really fixed. To make it fast, you can use -p bad to scrub only blocks\r\nmarked as bad.\r\n\r\n    snapraid -p bad scrub\r\n\r\nTake care that running \"scrub\" on a not synced array may result in\r\nerrors caused by removed or modified files. These errors are reported\r\nin the \"scrub\" result, but related blocks are not marked as bad.\r\n\r\n4.2 Pooling\r\n-----------\r\n\r\nTo have all the files in your array shown in the same directory tree,\r\nyou can enable the \"pooling\" feature. It consists in creating a\r\nread-only virtual view of all the files in your array using symbolic\r\nlinks.\r\n\r\nYou can configure the \"pooling\" directory in the configuration file with:\r\n\r\n    pool /pool\r\n\r\nor, if you are in Windows, with:\r\n\r\n    pool C:\\pool\r\n\r\nand then run the \"pool\" command to create or update the virtual view.\r\n\r\n    snapraid pool\r\n\r\nIf you are using a Unix platform and you want to share such directory\r\nin the network to either Windows or Unix machines, you should add\r\nto your /etc/samba/smb.conf the following options:\r\n\r\n    # In the global section of smb.conf\r\n    unix extensions = no\r\n\r\n    # In the share section of smb.conf\r\n    [pool]\r\n    comment = Pool\r\n    path = /pool\r\n    read only = yes\r\n    guest ok = yes\r\n    wide links = yes\r\n    follow symlinks = yes\r\n\r\nIn Windows the same sharing operation is not so straightforward,\r\nbecause Windows shares the symbolic links as they are, and that\r\nrequires the network clients to resolve them remotely.\r\n\r\nTo make it working, besides sharing in the network the pool directory,\r\nyou must also share all the disks independently, using as share points\r\nthe disk names as defined in the configuration file. You must also specify in\r\nthe \"share\" option of the configure file, the Windows UNC path that remote\r\nclients needs to use to access such shared disks.\r\n\r\nFor example, operating from a server named \"darkstar\", you can use\r\nthe options:\r\n\r\n    data d1 F:\\array\\\r\n    data d2 G:\\array\\\r\n    data d3 H:\\array\\\r\n    pool C:\\pool\r\n    share \\\\darkstar\r\n\r\nand share the following dirs in the network:\r\n\r\n    \\\\darkstar\\pool -> C:\\pool\r\n    \\\\darkstar\\d1 -> F:\\array\r\n    \\\\darkstar\\d2 -> G:\\array\r\n    \\\\darkstar\\d3 -> H:\\array\r\n\r\nto allow remote clients to access all the files at \\\\darkstar\\\\pool.\r\n\r\nYou may also need to configure remote clients enabling access at remote\r\nsymlinks with the command:\r\n\r\n    fsutil behavior set SymlinkEvaluation L2L:1 R2R:1 L2R:1 R2L:1\r\n\r\n4.3 Undeleting\r\n--------------\r\n\r\nSnapRAID is more like a backup program than a RAID system, and it\r\ncan be used to restore or undelete files to their previous state using\r\nthe -f, --filter option :\r\n\r\n    snapraid fix -f FILE\r\n\r\nor for a directory:\r\n\r\n    snapraid fix -f DIR/\r\n\r\nYou can also use it to recover only accidentally deleted files inside\r\na directory using the -m, --filter-missing option, that restores\r\nonly missing files, leaving untouched all the others.\r\n\r\n    snapraid fix -m -f DIR/\r\n\r\nOr to recover all the deleted files in all the drives with:\r\n\r\n    snapraid fix -m\r\n\r\n4.4 Recovering\r\n--------------\r\n\r\nThe worst happened, and you lost one or more disks!\r\n\r\nDO NOT PANIC! You will be able to recover them!\r\n\r\nThe first thing you have to do is to avoid further changes at your disk array.\r\nDisable any remote connection to it, any scheduled process, including any\r\nscheduled SnapRAID nightly sync or scrub.\r\n\r\nThen proceed with the following steps.\r\n\r\n---- 4.4.1 STEP 1 -> Reconfigure ----\r\nYou need some space to recover, even better if you already have additional\r\nspare disks, but in case, also an external USB or remote disk is enough.\r\n\r\nChange the SnapRAID configuration file to make the \"data\" or \"parity\"\r\noption of the failed disk to point to the place where you have enough empty\r\nspace to recover the files.\r\n\r\nFor example, if you have that disk \"d1\" failed, you can change from:\r\n\r\n    data d1 /mnt/disk1/\r\n\r\nto:\r\n\r\n    data d1 /mnt/new_spare_disk/\r\n\r\nIf the disk to recover is a parity disk, change the appropriate \"parity\"\r\noption.\r\nIf you have more broken disks, change all their configuration options.\r\n\r\n---- 4.4.2 STEP 2 -> Fix ----\r\nRun the fix command, storing the log in an external file with:\r\n\r\n    snapraid -d NAME -l fix.log fix\r\n\r\nWhere NAME is the name of the disk, like \"d1\" as in our previous example.\r\nIn case the disk to recover is a parity disk, use the \"parity\", \"2-parity\"\r\nnames.\r\nIf you have more broken disks, use multiple -d options to specify all\r\nof them.\r\n\r\nThis command will take a long time.\r\n\r\nTake care that you need also few gigabytes free to store the fix.log file.\r\nRun it from a disk with some free space.\r\n\r\nNow you have recovered all the recoverable. If some file is partially or totally\r\nunrecoverable, it will be renamed adding the \".unrecoverable\" extension.\r\n\r\nYou can get a detailed list of all the unrecoverable blocks in the fix.log file\r\nchecking all the lines starting with \"unrecoverable:\"\r\n\r\nIf you are not satisfied of the recovering, you can retry it as many\r\ntime you wish.\r\n\r\nFor example, if you have removed files from the array after the last\r\n\"sync\", this may result in some other files not recovered.\r\nIn this case, you can retry the \"fix\" using the -i, --import option,\r\nspecifying where these files are now, to include them again in the\r\nrecovering process.\r\n\r\nIf you are satisfied of the recovering, you can now proceed further,\r\nbut take care that after syncing you cannot retry the \"fix\" command\r\nanymore!\r\n\r\n---- 4.4.3 STEP 3 -> Check ----\r\nAs paranoid check, you can now run a \"check\" command to ensure that\r\neverything is OK on the recovered disk.\r\n\r\n    snapraid -d NAME -a check\r\n\r\nWhere NAME is the name of the disk, like \"d1\" as in our previous example.\r\n\r\nThe options -d and -a tell SnapRAID to check only the specified disk,\r\nand ignore all the parity data.\r\n\r\nThis command will take a long time, but if you are not paranoid,\r\nyou can skip it.\r\n\r\n---- 4.4.4 STEP 4 -> Sync ----\r\nRun the \"sync\" command to re-synchronize the array with the new disk.\r\n\r\n    snapraid sync\r\n\r\nIf everything is recovered, this command is immediate.\r\n\r\n\r\n5 COMMANDS\r\n==========\r\n\r\nSnapRAID provides a few simple commands that allow to:\r\n\r\n* Prints the status of the array -> \"status\"\r\n* Controls the disks -> \"smart\", \"up\", \"down\"\r\n* Makes a backup/snapshot -> \"sync\"\r\n* Periodically checks data -> \"scrub\"\r\n* Restore the last backup/snapshot -> \"fix\".\r\n\r\nTake care that the commands have to be written in lower case.\r\n\r\n5.1 status\r\n----------\r\n\r\nPrints a summary of the state of the disk array.\r\n\r\nIt includes information about the parity fragmentation, how old\r\nare the blocks without checking, and all the recorded silent\r\nerrors encountered while scrubbing.\r\n\r\nNote that the information presented refers at the latest time you\r\nrun \"sync\". Later modifications are not taken into account.\r\n\r\nIf bad blocks were detected, their block numbers are listed.\r\nTo fix them, you can use the \"fix -e\" command.\r\n\r\nIt also shows a graph representing the last time each block\r\nwas scrubbed or synced. Scrubbed blocks are shown with '*',\r\nblocks synced but not yet scrubbed with 'o'.\r\n\r\nNothing is modified.\r\n\r\n5.2 smart\r\n---------\r\n\r\nPrints a SMART report of all the disks of the array.\r\n\r\nIt includes an estimation of the probability of failure in the next\r\nyear allowing to plan maintenance replacements of the disks that show\r\nsuspicious attributes.\r\n\r\nThis probability estimation obtained correlating the SMART attributes\r\nof the disks, with the Backblaze data available at:\r\n\r\n    https://www.backblaze.com/hard-drive-test-data.html\r\n\r\nIf SMART reports that a disk is failing, \"FAIL\" or \"PREFAIL\" is printed\r\nfor that disk, and SnapRAID returns with an error.\r\nIn this case an immediate replacement of the disk is highly recommended.\r\n\r\nOther possible strings are:\r\n    logfail - In the past some attributes were lower than\r\n        the threshold.\r\n    logerr - The device error log contains errors.\r\n    selferr - The device self-test log contains errors.\r\n\r\nIf the -v, --verbose option is specified a deeper statistical analysis\r\nis provided. This analysis can help you to decide if you need more\r\nor less parity.\r\n\r\nThis command uses the \"smartctl\" tool, and it's equivalent to run\r\n\"smartctl -a\" on all the devices.\r\n\r\nIf your devices are not auto-detected correctly, you can configure\r\na custom command using the \"smartctl\" option in the configuration\r\nfile.\r\n\r\nNothing is modified.\r\n\r\n5.3 up\r\n------\r\n\r\nSpins up all the disks of the array.\r\n\r\nYou can spin-up only some specific disks using the -d, --filter-disk option.\r\n\r\nTake care that spinning-up all the disks at the same time needs a lot of power.\r\nEnsure that your power-supply can sustain that.\r\n\r\nNothing is modified.\r\n\r\n5.4 down\r\n--------\r\n\r\nSpins down all the disks of the array.\r\n\r\nThis command uses the \"smartctl\" tool, and it's equivalent to run\r\n\"smartctl -s standby,now\" on all the devices.\r\n\r\nYou can spin-down only some specific disks using the -d, --filter-disk option.\r\n\r\nNothing is modified.\r\n\r\n5.5 diff\r\n--------\r\n\r\nLists all the files modified from the last \"sync\" that need to have\r\ntheir parity data recomputed.\r\n\r\nThis command doesn't check the file data, but only the file time-stamp\r\nsize and inode.\r\n\r\nAt the end of the command, you'll get a summary of the file changes\r\ngrouped by:\r\n    equal - Files equal at before.\r\n    added - Files added that were not present before.\r\n    removed - Files removed.\r\n    updated - Files with a different size or time-stamp, meaning that\r\n        they were modified.\r\n    moved - Files moved to a different directory of the same disk.\r\n        They are identified by having the same name, size, time-stamp\r\n        and inode, but different directory.\r\n    copied - Files copied in the same or different disk. Note that if in\r\n        true they are moved to a different disk, you'll also have\r\n        them counted in \"removed\".\r\n        They are identified by having the same name, size, and\r\n        time-stamp. But if the sub-second time-stamp is zero,\r\n        then the full path should match, and not only the name.\r\n    restored - Files with a different inode but with name, size and time-stamp\r\n        matching. These are usually files restored after being deleted.\r\n\r\nIf a \"sync\" is required, the process return code is 2, instead of the\r\ndefault 0. The return code 1 is instead for a generic error condition.\r\n\r\nNothing is modified.\r\n\r\n5.6 sync\r\n--------\r\n\r\nUpdates the parity information. All the modified files\r\nin the disk array are read, and the corresponding parity\r\ndata is updated.\r\n\r\nYou can stop this process at any time pressing Ctrl+C,\r\nwithout losing the work already done.\r\nAt the next run the \"sync\" process will start where\r\ninterrupted.\r\n\r\nIf during the process, silent or input/output errors are found,\r\nthe corresponding blocks are marked as bad.\r\n\r\nFiles are identified by path and/or inode and checked by\r\nsize and time-stamp.\r\nIf the file size or time-stamp are different, the parity data\r\nis recomputed for the whole file.\r\nIf the file is moved or renamed in the same disk, keeping the\r\nsame inode, the parity is not recomputed.\r\nIf the file is moved to another disk, the parity is recomputed,\r\nbut the previously computed hash information is kept.\r\n\r\nThe \"content\" and \"parity\" files are modified if necessary.\r\nThe files in the array are NOT modified.\r\n\r\n5.7 scrub\r\n---------\r\n\r\nScrubs the array, checking for silent or input/output errors in data\r\nand parity disks.\r\n\r\nFor each command invocation, about the 8% of the array is checked, but\r\nnothing that was already scrubbed in the last 10 days.\r\nThis means that scrubbing once a week, every bit of data is checked\r\nat least one time every three months.\r\n\r\nYou can define a different scrub plan or amount using the -p, --plan\r\noption that takes as argument:\r\nbad - Scrub blocks marked bad.\r\nnew - Scrub just synced blocks not yet scrubbed.\r\nfull - Scrub everything.\r\n0-100 - Scrub the exact percentage of blocks.\r\n\r\nIf you specify a percentage amount, you can also use the -o, --older-than\r\noption to define how old the block should be.\r\nThe oldest blocks are scrubbed first ensuring an optimal check.\r\nIf instead you want to scrub the just synced blocks, not yet scrubbed,\r\nyou should use the \"-p new\" option.\r\n\r\nTo get the details of the scrub status use the \"status\" command.\r\n\r\nFor any silent or input/output error found the corresponding blocks\r\nare marked as bad in the \"content\" file.\r\nThese bad blocks are listed in \"status\", and can be fixed with \"fix -e\".\r\nAfter the fix, at the next scrub they will be rechecked, and if found\r\ncorrected, the bad mark will be removed.\r\nTo scrub only the bad blocks, you can use the \"scrub -p bad\" command.\r\n\r\nIt's recommended to run \"scrub\" only on a synced array, to avoid to\r\nhave reported error caused by unsynced data. These errors are recognized\r\nas not being silent errors, and the blocks are not marked as bad,\r\nbut such errors are reported in the output of the command.\r\n\r\nFiles are identified only by path, and not by inode.\r\n\r\nThe \"content\" file is modified to update the time of the last check\r\nof each block, and to mark bad blocks.\r\nThe \"parity\" files are NOT modified.\r\nThe files in the array are NOT modified.\r\n\r\n5.8 fix\r\n-------\r\n\r\nFix all the files and the parity data.\r\n\r\nAll the files and the parity data are compared with the snapshot\r\nstate saved in the last \"sync\".\r\nIf a difference is found, it's reverted to the stored snapshot.\r\n\r\nThe \"fix\" command doesn't differentiate between errors and\r\nintentional modifications. It unconditionally reverts the file state\r\nat the last \"sync\".\r\n\r\nIf no other option is specified the full array is processed.\r\nUse the filter options to select a subset of files or disks to operate on.\r\n\r\nTo only fix the blocks marked bad during \"sync\" and \"scrub\",\r\nuse the -e, --filter-error option.\r\nAs difference from other filter options, with this one the fixes are\r\napplied only to files that are not modified from the latest \"sync\".\r\n\r\nAll the files that cannot be fixed are renamed adding the\r\n\".unrecoverable\" extension.\r\n\r\nBefore fixing, the full array is scanned to find any moved file,\r\nafter the last \"sync\" operation.\r\nThese files are identified by their time-stamp, ignoring their name\r\nand directory, and are used in the recovering process if necessary.\r\nIf you moved some of them outside the array, you can use the -i, --import\r\noption to specify additional directories to scan.\r\n\r\nFiles are identified only by path, and not by inode.\r\n\r\nThe \"content\" file is NOT modified.\r\nThe \"parity\" files are modified if necessary.\r\nThe files in the array are modified if necessary.\r\n\r\n5.9 check\r\n---------\r\n\r\nVerify all the files and the parity data.\r\n\r\nIt works like \"fix\", but it only simulates a recovery and no change\r\nis written in the array.\r\n\r\nThis command is mostly intended for manual verification,\r\nlike after a recovery process or in other special conditions.\r\nFor periodic and scheduled checks uses \"scrub\".\r\n\r\nIf you use the -a, --audit-only option, only the file\r\ndata is checked, and the parity data is ignored for a\r\nfaster run.\r\n\r\nFiles are identified only by path, and not by inode.\r\n\r\nNothing is modified.\r\n\r\n5.10 list\r\n---------\r\n\r\nLists all the files contained in the array at the time of the\r\nlast \"sync\".\r\n\r\nNothing is modified.\r\n\r\n5.11 dup\r\n--------\r\n\r\nLists all the duplicate files. Two files are assumed equal if their\r\nhashes are matching. The file data is not read, but only the\r\npre-computed hashes are used.\r\n\r\nNothing is modified.\r\n\r\n5.12 pool\r\n---------\r\n\r\nCreates or updates in the \"pooling\" directory a virtual view of all\r\nthe files of your disk array.\r\n\r\nThe files are not really copied here, but just linked using\r\nsymbolic links.\r\n\r\nWhen updating, all the present symbolic links and empty\r\nsub-directories are deleted and replaced with the new\r\nview of the array. Any other regular file is left in place.\r\n\r\nNothing is modified outside the pool directory.\r\n\r\n5.13 devices\r\n------------\r\n\r\nPrints the low level devices used by the array.\r\n\r\nThis command prints the devices associations in place in the array,\r\nand it's mainly intended as a script interface.\r\n\r\nThe first two columns are the low level device id and path.\r\nThe next two columns are the high level device id and path.\r\nThe latest column if the disk name in the array.\r\n\r\nIn most cases you have one low level device for each disk in the\r\narray, but in some more complex configurations, you may have multiple\r\nlow level devices used by a single disk in the array.\r\n\r\nNothing is modified.\r\n\r\n5.14 touch\r\n----------\r\n\r\nSets arbitrarily the sub-second time-stamp of all the files\r\nthat have it at zero.\r\n\r\nThis improves the SnapRAID capability to recognize moved\r\nand copied files as it makes the time-stamp almost unique,\r\nremoving possible duplicates.\r\n\r\nMore specifically, if the sub-second time-stamp is not zero,\r\na moved or copied file is identified as such if it matches\r\nthe name, size and time-stamp. If instead the sub-second time-stamp\r\nis zero, it's considered a copy only if it matches the full path,\r\nsize and time-stamp.\r\n\r\nNote that the second precision time-stamp is not modified,\r\nand all the dates and times of your files will be maintained.\r\n\r\n5.15 rehash\r\n-----------\r\n\r\nSchedules a rehash of the whole array.\r\n\r\nThis command changes the hash kind used, typically when upgrading\r\nfrom a 32 bits system to a 64 bits one, to switch from\r\nMurmurHash3 to the faster SpookyHash.\r\n\r\nIf you are already using the optimal hash, this command\r\ndoes nothing and tells you that nothing has to be done.\r\n\r\nThe rehash isn't done immediately, but it takes place\r\nprogressively during \"sync\" and \"scrub\".\r\n\r\nYou can get the rehash state using \"status\".\r\n\r\nDuring the rehash, SnapRAID maintains full functionality,\r\nwith the only exception of \"dup\" not able to detect duplicated\r\nfiles using a different hash.\r\n\r\n\r\n6 OPTIONS\r\n=========\r\n\r\nSnapRAID provides the following options:\r\n\r\n    -c, --conf CONFIG\r\n        Selects the configuration file to use. If not specified in Unix\r\n        it's used the file \"/usr/local/etc/snapraid.conf\" if it exists,\r\n        or \"/etc/snapraid.conf\" otherwise.\r\n        In Windows it's used the file \"snapraid.conf\" in the same\r\n        directory of \"snapraid.exe\".\r\n\r\n    -f, --filter PATTERN\r\n        Filters the files to process in \"check\" and \"fix\".\r\n        Only the files matching the entered pattern are processed.\r\n        This option can be used many times.\r\n        See the PATTERN section for more details in the\r\n        pattern specifications.\r\n        In Unix, ensure to quote globbing chars if used.\r\n        This option can be used only with \"check\" and \"fix\".\r\n        Note that it cannot be used with \"sync\" and \"scrub\", because they always\r\n        process the whole array.\r\n\r\n    -d, --filter-disk NAME\r\n        Filters the disks to process in \"check\", \"fix\", \"up\" and \"down\".\r\n        You must specify a disk name as named in the configuration\r\n        file.\r\n        You can also specify parity disks with the names: \"parity\", \"2-parity\",\r\n        \"3-parity\", ... to limit the operations a specific parity disk.\r\n        If you combine more --filter, --filter-disk and --filter-missing options,\r\n        only files matching all the set of filters are selected.\r\n        This option can be used many times.\r\n        This option can be used only with \"check\", \"fix\", \"up\" and \"down\".\r\n        Note that it cannot be used with \"sync\" and \"scrub\", because they always\r\n        process the whole array.\r\n\r\n    -m, --filter-missing\r\n        Filters the files to process in \"check\" and \"fix\".\r\n        Only the files missing/deleted from the array are processed.\r\n        When used with \"fix\", this is a kind of \"undelete\" command.\r\n        If you combine more --filter, --filter-disk and --filter-missing options,\r\n        only files matching all the set of filters are selected.\r\n        This option can be used only with \"check\" and \"fix\".\r\n        Note that it cannot be used with \"sync\" and \"scrub\", because they always\r\n        process the whole array.\r\n\r\n    -e, --filter-error\r\n        Process the files with errors in \"check\" and \"fix\".\r\n        It processes only files that have blocks marked with silent\r\n        or input/output errors during \"sync\" and \"scrub\", and listed in \"status\".\r\n        This option can be used only with \"check\" and \"fix\".\r\n\r\n    -p, --plan PERC|bad|new|full\r\n        Selects the scrub plan. If PERC is a numeric value from 0 to 100,\r\n        it's interpreted as the percentage of blocks to scrub.\r\n        Instead of a percentage, you can also specify a plan:\r\n        \"bad\" scrubs bad blocks, \"new\" the blocks not yet scrubbed,\r\n        and \"full\" for everything.\r\n        This option can be used only with \"scrub\".\r\n\r\n    -o, --older-than DAYS\r\n        Selects the older the part of the array to process in \"scrub\".\r\n        DAYS is the minimum age in days for a block to be scrubbed,\r\n        default is 10.\r\n        Blocks marked as bad are always scrubbed despite this option.\r\n        This option can be used only with \"scrub\".\r\n\r\n    -a, --audit-only\r\n        In \"check\" verifies the hash of the files without\r\n        doing any kind of check on the parity data.\r\n        If you are interested in checking only the file data this\r\n        option can speedup a lot the checking process.\r\n        This option can be used only with \"check\".\r\n\r\n    -h, --pre-hash\r\n        In \"sync\" runs a preliminary hashing phase of all the new data\r\n        to have an additional verification before the parity computation.\r\n        Usually in \"sync\" no preliminary hashing is done, and the new\r\n        data is hashed just before the parity computation when it's read\r\n        for the first time.\r\n        Unfortunately, this process happens when the system is under\r\n        heavy load, with all disks spinning and with a busy CPU.\r\n        This is an extreme condition for the machine, and if it has a\r\n        latent hardware problem, it's possible to encounter silent errors\r\n        what cannot be detected because the data is not yet hashed.\r\n        To avoid this risk, you can enable the \"pre-hash\" mode and have\r\n        all the data read two times to ensure its integrity.\r\n        This option also verifies the files moved inside the array,\r\n        to ensure that the move operation went successfully, and in case\r\n        to block the sync and to allow to run a fix operation.\r\n        This option can be used only with \"sync\".\r\n\r\n    -i, --import DIR\r\n        Imports from the specified directory any file that you deleted\r\n        from the array after the last \"sync\".\r\n        If you still have such files, they could be used by \"check\"\r\n        and \"fix\" to improve the recover process.\r\n        The files are read also in sub-directories and they are\r\n        identified regardless of their name.\r\n        This option can be used only with \"check\" and \"fix\".\r\n\r\n    -Z, --force-zero\r\n        Forces the insecure operation of syncing a file with zero\r\n        size that before was not.\r\n        If SnapRAID detects a such condition, it stops proceeding\r\n        unless you specify this option.\r\n        This allows to easily detect when after a system crash,\r\n        some accessed files were truncated.\r\n        This is a possible condition in Linux with the ext3/ext4\r\n        file-systems.\r\n        This option can be used only with \"sync\".\r\n\r\n    -E, --force-empty\r\n        Forces the insecure operation of syncing a disk with all\r\n        the original files missing.\r\n        If SnapRAID detects that all the files originally present\r\n        in the disk are missing or rewritten, it stops proceeding\r\n        unless you specify this option.\r\n        This allows to easily detect when a data file-system is not\r\n        mounted.\r\n        This option can be used only with \"sync\".\r\n\r\n    -U, --force-uuid\r\n        Forces the insecure operation of syncing, checking and fixing\r\n        with disks that have changed their UUID.\r\n        If SnapRAID detects that some disks have changed UUID,\r\n        it stops proceeding unless you specify this option.\r\n        This allows to detect when your disks are mounted in the\r\n        wrong mount points.\r\n        It's anyway allowed to have a single UUID change with\r\n        single parity, and more with multiple parity, because it's\r\n        the normal case of replacing disks after a recovery.\r\n        This option can be used only with \"sync\", \"check\" or\r\n        \"fix\".\r\n\r\n    -D, --force-device\r\n        Forces the insecure operation of fixing with inaccessible disks,\r\n        or with disks on the same physical device.\r\n        Like if you lost two data disks, and you have a spare disk to recover\r\n        only the first one, and you want to ignore the second inaccessible disk.\r\n        Or if you want to recover a disk in the free space left in an\r\n        already used disk, sharing the same physical device.\r\n        This option can be used only with \"fix\".\r\n\r\n    -N, --force-nocopy\r\n        In \"sync\", \"check and \"fix\", disables the copy detection heuristic.\r\n        Without this option SnapRAID assumes that files with same\r\n        attributes, like name, size and time-stamp are copies with the\r\n        same data.\r\n        This allows to identify copied or moved files from one disk\r\n        to another, and to reuse the already computed hash information\r\n        to detect silent errors or to recover missing files.\r\n        This behavior, in some rare cases, may result in false positives,\r\n        or in a slow process due the many hash verification, and this\r\n        option allows to resolve them.\r\n        This option can be used only with \"sync\", \"check\" and \"fix\".\r\n\r\n    -F, --force-full\r\n        In \"sync\" forces a full recomputation of the parity.\r\n        This option can be used when you add a new parity level, or if\r\n        you reverted back to an old content file using a more recent parity data.\r\n        Instead of recreating the parity from scratch, this allows\r\n        to reuse the hashes present in the content file to validate data,\r\n        and to maintain data protection during the \"sync\" process using\r\n        the parity data you have.\r\n        This option can be used only with \"sync\".\r\n\r\n    -R, --force-realloc\r\n        In \"sync\" forces a full reallocation of files and rebuild of the parity.\r\n        This option can be used to completely reallocate all the files\r\n        removing the fragmentation, but reusing the hashes present in the content\r\n        file to validate data.\r\n        This option can be used only with \"sync\".\r\n        WARNING! This option is for experts only, and it's highly\r\n        recommended to not use it.\r\n        You DO NOT have data protection during the \"sync\" operation.\r\n\r\n    -l, --log FILE\r\n        Write a detailed log in the specified file.\r\n        If this option is not specified, unexpected errors are printed\r\n        on the screen, likely resulting in too much output in case of\r\n        many errors. When -l, --log is specified, on the screen, go only\r\n        fatal errors that makes SnapRAID to stop progress.\r\n        If the path starts with '>>' the file is opened\r\n        in append mode. Occurrences of '%D' and '%T' in the name are\r\n        replaced with the date and time in the format YYYYMMDD and\r\n        HHMMSS. Note that in Windows batch files, you'll have to double\r\n        the '%' char, like result-%%D.log. And to use '>>' you'll have\r\n        to enclose the name in \", like \">>result.log\".\r\n        To output the log to standard output or standard error,\r\n        you can use respectively \">&1\" and \">&2\".\r\n\r\n    -L, --error-limit\r\n        Sets a new error limit before stopping execution.\r\n        By default SnapRAID stops if it encounters more than 100\r\n        Input/Output errors, meaning that likely a disk is going to\r\n        die.\r\n        This options affects \"sync\" and \"scrub\", that are allowed\r\n        to continue after the first bunch of disk errors, to try\r\n        to complete at most their operations.\r\n        Instead, \"check\" and \"fix\" always stop at the first error.\r\n\r\n    -S, --start BLKSTART\r\n        Starts the processing from the specified\r\n        block number. It could be useful to retry to check\r\n        or fix some specific block, in case of a damaged disk.\r\n        It's present mainly for advanced manual recovering.\r\n\r\n    -B, --count BLKCOUNT\r\n        Processes only the specified number of blocks.\r\n        It's present mainly for advanced manual recovering.\r\n\r\n    -C, --gen-conf CONTENT_FILE\r\n        Generates a dummy configuration file from an existing\r\n        content file.\r\n        The configuration file is written in the standard output,\r\n        and it doesn't overwrite an existing one.\r\n        This configuration file also contains the information\r\n        needed to reconstruct the disk mount points, in case you\r\n        lose the entire system.\r\n\r\n    -v, --verbose\r\n        Prints more information on the screen.\r\n        If specified one time, it prints excluded files\r\n        and more stats.\r\n        This option has no effect on the log files.\r\n\r\n    -q, --quiet\r\n        Prints less information on the screen.\r\n        If specified one time, removes the progress bar, if two\r\n        times, the running operations, three times, the info\r\n        messages, four times the status messages.\r\n        Fatal errors are always printed on the screen.\r\n        This option has no effect on the log files.\r\n\r\n    -H, --help\r\n        Prints a short help screen.\r\n\r\n    -V, --version\r\n        Prints the program version.\r\n\r\n\r\n7 CONFIGURATION\r\n===============\r\n\r\nSnapRAID requires a configuration file to know where your disk array\r\nis located, and where storing the parity information.\r\n\r\nIn Unix it's used the file \"/usr/local/etc/snapraid.conf\" if it exists,\r\nor \"/etc/snapraid.conf\" otherwise.\r\nIn Windows it's used the file \"snapraid.conf\" in the same\r\ndirectory of \"snapraid.exe\".\r\n\r\nIt should contain the following options (case sensitive):\r\n\r\n7.1 parity FILE [,FILE] ...\r\n---------------------------\r\n\r\nDefines the files to use to store the parity information.\r\nThe parity enables the protection from a single disk\r\nfailure, like RAID5.\r\n\r\nYou can specify multiples files that should be in different disks.\r\nWhen a file cannot grow anymore, the next one is used.\r\nThe total space available must be as big as the biggest data disk in\r\nthe array.\r\n\r\nYou can add additional parity files at later time, but you\r\ncannot reorder or remove them.\r\n\r\nLeaving the parity disks reserved for parity ensures that\r\nit doesn't get fragmented, improving the performance.\r\n\r\nIn Windows 256 MB are left unused in each disk to avoid the\r\nwarning about full disks.\r\n\r\nThis option is mandatory and it can be used only one time.\r\n\r\n7.2 (2,3,4,5,6)-parity FILE [,FILE] ...\r\n---------------------------------------\r\n\r\nDefines the files to use to store extra parity information.\r\n\r\nFor each parity specified, one additional level of protection\r\nis enabled:\r\n\r\n* 2-parity enables RAID6 dual parity.\r\n* 3-parity enables triple parity\r\n* 4-parity enables quad (four) parity\r\n* 5-parity enables penta (five) parity\r\n* 6-parity enables hexa (six) parity\r\n\r\nEach parity level requires the presence of all the previous parity\r\nlevels.\r\n\r\nThe same considerations of the 'parity' option apply.\r\n\r\nThese options are optional and they can be used only one time.\r\n\r\n7.3 z-parity FILE [,FILE] ...\r\n-----------------------------\r\n\r\nDefines an alternate file and format to store the triple parity.\r\n\r\nThis option is an alternative at '3-parity' mainly intended for\r\nlow-end CPUs like ARM or AMD Phenom, Athlon and Opteron that don't\r\nsupport the SSSE3 instructions set. In such cases it provides\r\na better performance.\r\n\r\nThis format is similar, but faster, at the one used by the ZFS RAIDZ3.\r\nLike ZFS, it doesn't work beyond triple parity.\r\n\r\nWhen using '3-parity' you will be warned if it's recommended to use\r\nthe 'z-parity' format for a performance improvement.\r\n\r\nIt's possible to convert from one format to another, adjusting\r\nthe configuration file with the wanted z-parity or 3-parity file,\r\nand using 'fix' to recreate it.\r\n\r\n7.4 content FILE\r\n----------------\r\n\r\nDefines the file to use to store the list and check-sums of all the\r\nfiles present in your disk array.\r\n\r\nIt can be placed in the disk used to store data, parity, or\r\nany other disk available.\r\nIf you use a data disk, this file is automatically excluded\r\nfrom the \"sync\" process.\r\n\r\nThis option is mandatory and it can be used more times to save\r\nmore copies of the same files.\r\n\r\nYou have to store at least one copy for each parity disk used\r\nplus one. Using some more doesn't hurt.\r\n\r\n7.5 data NAME DIR\r\n-----------------\r\n\r\nDefines the name and the mount point of the data disks of\r\nthe array. NAME is used to identify the disk, and it must\r\nbe unique. DIR is the mount point of the disk in the\r\nfile-system.\r\n\r\nYou can change the mount point as you like, as long you\r\nkeep the NAME fixed.\r\n\r\nYou should use one option for each data disk of the array.\r\n\r\nYou can rename later a disk, changing the NAME directly\r\nin the configuration file, and then run a 'sync' command.\r\nIn the rename case, the association is done using the stored\r\nUUID of the disks.\r\n\r\n7.6 nohidden\r\n------------\r\n\r\nExcludes all the hidden files and directory.\r\nIn Unix hidden files are the ones starting with \".\".\r\nIn Windows they are the ones with the hidden attribute.\r\n\r\n7.7 exclude/include PATTERN\r\n---------------------------\r\n\r\nDefines the file or directory patterns to exclude and include\r\nin the sync process.\r\nAll the patterns are processed in the specified order.\r\n\r\nIf the first pattern that matches is an \"exclude\" one, the file\r\nis excluded. If it's an \"include\" one, the file is included.\r\nIf no pattern matches, the file is excluded if the last pattern\r\nspecified is an \"include\", or included if the last pattern\r\nspecified is an \"exclude\".\r\n\r\nSee the PATTERN section for more details in the pattern\r\nspecifications.\r\n\r\nThis option can be used many times.\r\n\r\n7.8 blocksize SIZE_IN_KIBIBYTES\r\n-------------------------------\r\n\r\nDefines the basic block size in kibi bytes of the parity.\r\nOne kibi bytes is 1024 bytes.\r\n\r\nThe default blocksize is 256 and it should work for most cases.\r\n\r\nWARNING! This option is for experts only, and it's highly\r\nrecommended to not change it. To change again this value in\r\nfuture you'll have to recreate the whole parity!\r\n\r\nA reason to use a different blocksize is if you have a lot of small\r\nfiles. In the order of many millions.\r\n\r\nFor each file, even of few bytes, a whole block of parity is allocated,\r\nand with many files this may result in a lot of unused parity space.\r\nAnd when you completely fill the parity disk, you are not\r\nallowed to add more files in the data disks.\r\nAnyway, the wasted parity doesn't sum between data disks. Wasted space\r\nresulting from a high number of files in a data disk, limits only\r\nthe amount of data in such data disk and not in others.\r\n\r\nAs approximation, you can assume that half of the block size is\r\nwasted for each file. For example, with 100000 files and a 256 KiB\r\nblock size, you are going to waste 13 GB of parity, that may result\r\nin 13 GB less space available in the data disk.\r\n\r\nYou can get the amount of wasted space in each disk using \"status\".\r\nThis is the amount of space that you must leave free in the data\r\ndisks, or use for files not included in the array.\r\nIf this value is negative, it means that your are near to fill\r\nthe parity, and it represents the space you can still waste.\r\n\r\nTo avoid the problem, you can use a bigger partition for parity.\r\nFor example, if you have the parity partition bigger than 13 GB\r\nthan data disks, you have enough extra space to handle up to 100000\r\nfiles in each data disk.\r\n\r\nA trick to get a bigger parity partition in Linux, is to format it\r\nwith the command:\r\n\r\n    mkfs.ext4 -m 0 -T largefile4 DEVICE\r\n\r\nThis results in about 1.5% of extra space. Meaning about 60 GB for\r\na 4 TB disk, that allows about 460000 files in each data disk without\r\nany wasted space.\r\n\r\n7.9 hashsize SIZE_IN_BYTES\r\n--------------------------\r\n\r\nDefines the hash size in bytes of the saved blocks.\r\n\r\nThe default hashsize is 16 bytes (128 bits), and it should work\r\nfor most cases.\r\n\r\nWARNING! This option is for experts only, and it's highly\r\nrecommended to not change it. To change again this value in\r\nfuture you'll have to recreate the whole parity!\r\n\r\nA reason to use a different hashsize is if your system has\r\nsmall memory. As a rule of thumb SnapRAID usually requires\r\n1 GiB of RAM memory for each 16 TB of data in the array.\r\n\r\nSpecifically, to store the hashes of the data, SnapRAID requires\r\nabout TS*(1+HS)/BS bytes of RAM memory.\r\nWhere TS is the total size in bytes of your disk array, BS is the\r\nblock size in bytes, and HS is the hash size in bytes.\r\n\r\nFor example with 8 disks of 4 TB and a block size of 256 KiB\r\n(1 KiB = 1024 bytes), and an hash size of 16, you get:\r\n\r\nRAM = (8 * 4 * 10^12) * (1+16) / (256 * 2^10) = 1.93 GiB\r\n\r\nSwitching to a hash size of 8, you get:\r\n\r\nRAM = (8 * 4 * 10^12) * (1+8) / (256 * 2^10) = 1.02 GiB\r\n\r\nSwitching to a block size of 512, you get:\r\n\r\nRAM = (8 * 4 * 10^12) * (1+16) / (512 * 2^10) = 0.96 GiB\r\n\r\nSwitching to both a hash size of 8, and a block size of 512 you get:\r\n\r\nRAM = (8 * 4 * 10^12) * (1+8) / (512 * 2^10) = 0.51 GiB\r\n\r\n7.10 autosave SIZE_IN_GIGABYTES\r\n-------------------------------\r\n\r\nAutomatically save the state when syncing or scrubbing after the specified amount\r\nof GB processed.\r\nThis option is useful to avoid to restart from scratch long \"sync\"\r\ncommands interrupted by a machine crash, or any other event that\r\nmay interrupt SnapRAID.\r\n\r\n7.11 pool DIR\r\n-------------\r\n\r\nDefines the pooling directory where the virtual view of the disk\r\narray is created using the \"pool\" command.\r\n\r\nThe directory must already exist.\r\n\r\n7.12 share UNC_DIR\r\n------------------\r\n\r\nDefines the Windows UNC path required to access the disks remotely.\r\n\r\nIf this option is specified, the symbolic links created in the pool\r\ndirectory use this UNC path to access the disks.\r\nWithout this option the symbolic links generated use only local paths,\r\nnot allowing to share the pool directory in the network.\r\n\r\nThe symbolic links are formed using the specified UNC path, adding the\r\ndisk name as specified in the \"disk\" option, and finally adding the\r\nfile dir and name.\r\n\r\nThis option is only required for Windows.\r\n\r\n7.13 smartctl DISK/PARITY OPTIONS...\r\n------------------------------------\r\n\r\nDefines a custom smartctl command to obtain the SMART attributes\r\nfor each disk. This may be required for RAID controllers and for\r\nsome USB disk that cannot be auto-detected.\r\n\r\nDISK is the same disk name specified in the \"disk\" option.\r\nPARITY is one of the parity name as \"parity,(1,2,3,4,5,6,z)-parity\".\r\n\r\nIn the specified OPTIONS, the \"%s\" string is replaced by the\r\ndevice name. Note that in case of RAID controllers the device is likely\r\nfixed, and you don't have to use \"%s\".\r\n\r\nRefers at the smartmontools documentation about the possible options:\r\n\r\n    https://www.smartmontools.org/wiki/Supported_RAID-Controllers\r\n    https://www.smartmontools.org/wiki/Supported_USB-Devices\r\n\r\n7.14 Examples\r\n-------------\r\n\r\nAn example of a typical configuration for Unix is:\r\n\r\n    parity /mnt/diskp/snapraid.parity\r\n    content /mnt/diskp/snapraid.content\r\n    content /var/snapraid/snapraid.content\r\n    data d1 /mnt/disk1/\r\n    data d2 /mnt/disk2/\r\n    data d3 /mnt/disk3/\r\n    exclude /lost+found/\r\n    exclude /tmp/\r\n    smartctl d1 -d sat %s\r\n    smartctl d2 -d usbjmicron %s\r\n    smartctl parity -d areca,1/1 /dev/sg0\r\n    smartctl 2-parity -d areca,2/1 /dev/sg0\r\n\r\nAn example of a typical configuration for Windows is:\r\n\r\n    parity E:\\snapraid.parity\r\n    content E:\\snapraid.content\r\n    content C:\\snapraid\\snapraid.content\r\n    data d1 G:\\array\\\r\n    data d2 H:\\array\\\r\n    data d3 I:\\array\\\r\n    exclude Thumbs.db\r\n    exclude \\$RECYCLE.BIN\r\n    exclude \\System Volume Information\r\n    smartctl d1 -d sat %s\r\n    smartctl d2 -d usbjmicron %s\r\n    smartctl parity -d areca,1/1 /dev/arcmsr0\r\n    smartctl 2-parity -d areca,2/1 /dev/arcmsr0\r\n\r\n\r\n8 PATTERN\r\n=========\r\n\r\nPatterns are used to select a subset of files to exclude or include in\r\nthe process.\r\n\r\nThere are four different types of patterns:\r\n\r\n    FILE\r\n        Selects any file named as FILE. You can use any globbing\r\n        character like * and ?, and char classes like [a-z].\r\n        This pattern is applied only to files and not to directories.\r\n\r\n    DIR/\r\n        Selects any directory named DIR and everything inside.\r\n        You can use any globbing character like * and ?.\r\n        This pattern is applied only to directories and not to files.\r\n\r\n    /PATH/FILE\r\n        Selects the exact specified file path. You can use any\r\n        globbing character like * and ? but they never match a\r\n        directory slash.\r\n        This pattern is applied only to files and not to directories.\r\n\r\n    /PATH/DIR/\r\n        Selects the exact specified directory path and everything\r\n        inside. You can use any globbing character like * and ? but\r\n        they never match a directory slash.\r\n        This pattern is applied only to directories and not to files.\r\n\r\nNote that when you specify an absolute path starting with /, it's\r\napplied at the array root dir and not at the local file-system root dir.\r\n\r\nIn Windows you can use the backslash \\ instead of the forward slash /.\r\nNote that Windows system directories, junctions, mount points, and any\r\nother Windows special directory are treated just as files, meaning that\r\nto exclude them you must use a file rule, and not a directory one.\r\n\r\nIf the file name you want to use really contains a '*', '?', '[',\r\nor ']' char, you have to escape it to avoid to have interpreted as a\r\nglobbing character. In Unix the escape char is '\\', in Windows it's '^'.\r\nNote that when the pattern is on the command line, you have to double the\r\nescape character to avoid to have it interpreted by the command shell.\r\n\r\nIn the configuration file, you can use different strategies to filter\r\nthe files to process.\r\nThe simplest one is to use only \"exclude\" rules to remove all the\r\nfiles and directories you do not want to process. For example:\r\n\r\n    # Excludes any file named \"*.unrecoverable\"\r\n    exclude *.unrecoverable\r\n    # Excludes the root directory \"/lost+found\"\r\n    exclude /lost+found/\r\n    # Excludes any sub-directory named \"tmp\"\r\n    exclude tmp/\r\n\r\nThe opposite way is to define only the file you want to process, using\r\nonly \"include\" rules. For example:\r\n\r\n    # Includes only some directories\r\n    include /movies/\r\n    include /musics/\r\n    include /pictures/\r\n\r\nThe final way, is to mix \"exclude\" and \"include\" rules. In this case take\r\ncare that the order of rules is important. Previous rules have the\r\nprecedence over the later ones.\r\nTo get things simpler you can first have all the \"exclude\" rules and then\r\nall the \"include\" ones. For example:\r\n\r\n    # Excludes any file named \"*.unrecoverable\"\r\n    exclude *.unrecoverable\r\n    # Excludes any sub-directory named \"tmp\"\r\n    exclude tmp/\r\n    # Includes only some directories\r\n    include /movies/\r\n    include /musics/\r\n    include /pictures/\r\n\r\nOn the command line, using the -f option, you can only use \"include\"\r\npatterns. For example:\r\n\r\n    # Checks only the .mp3 files.\r\n    # Note the \"\" use to avoid globbing expansion by the shell in Unix.\r\n    snapraid -f \"*.mp3\" check\r\n\r\nIn Unix, when using globbing chars in the command line, you have to\r\nquote them. Otherwise the shell will try to expand them.\r\n\r\n\r\n9 CONTENT\r\n=========\r\n\r\nSnapRAID stores the list and check-sums of your files in the content file.\r\n\r\nIt's a binary file, listing all the files present in your disk array,\r\nwith all the check-sums to verify their integrity.\r\n\r\nThis file is read and written by the \"sync\" and \"scrub\" commands, and\r\nread by \"fix\", \"check\" and \"status\".\r\n\r\n\r\n10 PARITY\r\n=========\r\n\r\nSnapRAID stores the parity information of your array in the parity\r\nfiles.\r\n\r\nThey are binary files, containing the computed parity of all the\r\nblocks defined in the \"content\" file.\r\n\r\nThese files are read and written by the \"sync\" and \"fix\" commands, and\r\nonly read by \"scrub\" and \"check\".\r\n\r\n\r\n11 ENCODING\r\n===========\r\n\r\nSnapRAID in Unix ignores any encoding. It reads and stores the\r\nfile names with the same encoding used by the file-system.\r\n\r\nIn Windows all the names read from the file-system are converted and\r\nprocessed in the UTF-8 format.\r\n\r\nTo have the file names printed correctly you have to set the Windows\r\nconsole in the UTF-8 mode, with the command \"chcp 65001\", and use\r\na TrueType font like \"Lucida Console\" as console font.\r\nNote that it has effect only on the printed file names, if you\r\nredirect the console output to a file, the resulting file is always\r\nin the UTF-8 format.\r\n\r\n\r\n12 COPYRIGHT\r\n============\r\n\r\nThis file is Copyright (C) 2011 Andrea Mazzoleni\r\n\r\n\r\n13 SEE ALSO\r\n===========\r\n\r\nrsync(1)\r\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tommyds",
          "type": "tree",
          "content": null
        },
        {
          "name": "valgrind.supp",
          "type": "blob",
          "size": 0.123046875,
          "content": "{\n   printf reports false positives when printing more than one variables at time\n   exp-sgcheck:SorG\n   ...\n   fun:printf\n}\n\n"
        }
      ]
    }
  ]
}