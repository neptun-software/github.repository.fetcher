{
  "metadata": {
    "timestamp": 1736709980086,
    "page": 545,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wiredtiger/wiredtiger",
      "stars": 2245,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 4.3896484375,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  LLVM\nAccessModifierOffset: -4\nAlignAfterOpenBracket: DontAlign\nAlignConsecutiveMacros: false\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Left\nAlignOperands:   false\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: AllDefinitions\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: MultiLine\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     100\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 2\nCpp11BracedListStyle: true\nDeriveLineEnding: false\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - Q_FOREACH\n  - BOOST_FOREACH\n  - TAILQ_FOREACH\n  - WT_CELL_FOREACH\n  - WT_CELL_FOREACH_ADDR \n  - WT_CELL_FOREACH_FIX_TIMESTAMPS\n  - WT_CELL_FOREACH_FIX_TIMESTAMPS_VRFY\n  - WT_CELL_FOREACH_KV\n  - WT_CELL_FOREACH_VRFY\n  - WT_CKPT_FOREACH\n  - WT_COL_FIX_FOREACH_BITS\n  - WT_COL_FOREACH\n  - WT_EXT_FOREACH\n  - WT_EXT_FOREACH_OFF\n  - WT_INTL_FOREACH_BEGIN\n  - WT_INTL_FOREACH_REVERSE_BEGIN\n  - WT_MODIFY_FOREACH_BEGIN\n  - WT_MODIFY_FOREACH_REVERSE\n  - WT_ROW_FOREACH\n  - WT_ROW_FOREACH_REVERSE\n  - WT_SKIP_FOREACH\n  - WTI_CKPT_FOREACH_NAME_OR_ORDER\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n    SortPriority:    0\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n    SortPriority:    0\n  - Regex:           '.*'\n    Priority:        1\n    SortPriority:    0\nIncludeIsMainRegex: '(Test)?$'\nIncludeIsMainSourceRegex: ''\nIndentCaseLabels: false\nIndentGotoLabels: false\nIndentPPDirectives: None\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: '^WT_PACKED_STRUCT_BEGIN$'\nMacroBlockEnd:   '^WT_PACKED_STRUCT_END$'\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Right\nReflowComments:  true\nSortIncludes:    false\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nStandard:        Latest\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        8\nUseCRLF:         false\nUseTab:          Never\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2939453125,
          "content": "**/.DS_Store\n**/tags\n**/*.sw?\n.vscode/\n.cache/\n.ccls-cache/\ncompile_commands.json\ncscope.in.out\ncscope.out\ncscope.po.out\nbuild/\ndist/clang-format\n/docs/\ntest-compatibility-run/\nTCMALLOC_LIB/\n\n# Python artifacts\n**/*.pyc\n\n# CLion related files & directories\n.idea\ncmake-build-release\ncmake-build-debug\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.609375,
          "content": "cmake_minimum_required(VERSION 3.10.0)\n\n# Try to use CCACHE if available - speeds up build times.\nfind_program(CCACHE_FOUND ccache)\nif(CCACHE_FOUND)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\nendif(CCACHE_FOUND)\n\nproject(WiredTiger C CXX ASM)\n\n# Import our available build types prior to initializing the\n# project.\ninclude(cmake/configs/modes.cmake)\n# Import our helpers.\ninclude(cmake/helpers.cmake)\ninclude(cmake/define_libwiredtiger.cmake)\ninclude(cmake/gdb_autoloader_setup.cmake)\n\n# If the user doesn't manually specify the target ARCH and OS (i.e not cross-compiling)\n# we will infer the target from the host. This is checked prior to the config option\n# being defined (in base.cmake) since it will prevent it having a default value.\nif(NOT WT_ARCH)\n    # Defer to our hosts architecture as our target architecture.\n    # PROCESSOR_ARCHITECTURE env variable could be unset on certain Windows systems,\n    # in that case map the architecture to x86.\n    if (\"${CMAKE_HOST_SYSTEM_PROCESSOR}\" MATCHES \"^(x86_64|AMD64|)$\")\n        set(WT_ARCH \"x86\")\n    elseif (\"${CMAKE_HOST_SYSTEM_PROCESSOR}\" MATCHES \"^(arm64|aarch64)$\")\n        set(WT_ARCH \"aarch64\")\n    else()\n        set(WT_ARCH \"${CMAKE_HOST_SYSTEM_PROCESSOR}\")\n    endif()\nendif()\nif(NOT WT_OS)\n    # Defer to our hosts OS as our target OS.\n    string(TOLOWER \"${CMAKE_HOST_SYSTEM_NAME}\" host_os)\n    set(WT_OS \"${host_os}\")\nendif()\n\nif(NOT EXISTS \"${CMAKE_CURRENT_LIST_DIR}/cmake/configs/${WT_ARCH}/${WT_OS}/config.cmake\")\n    message(FATAL_ERROR \"cmake/configs/${WT_ARCH}/${WT_OS}/config.cmake does not exist\")\nendif()\n\n# Load any configuration variables special to our target.\ninclude(cmake/configs/${WT_ARCH}/${WT_OS}/config.cmake)\n# Load auto-configure variables (e.g. environment-related configs).\ninclude(cmake/configs/auto.cmake)\n# Load WiredTiger related configuration options.\ninclude(cmake/configs/base.cmake)\n\n# Import our third party library definitions.\ninclude(cmake/third_party/aws_sdk.cmake)\ninclude(cmake/third_party/gcp_sdk.cmake)\ninclude(cmake/third_party/lazyfs.cmake)\ninclude(cmake/third_party/lz4.cmake)\ninclude(cmake/third_party/memkind.cmake)\ninclude(cmake/third_party/snappy.cmake)\ninclude(cmake/third_party/sodium.cmake)\ninclude(cmake/third_party/zlib.cmake)\ninclude(cmake/third_party/zstd.cmake)\ninclude(cmake/third_party/iaa.cmake)\ninclude(cmake/third_party/voidstar.cmake)\n\n# Skip the AZURE SDK build step if the extension is not enabled.\nif(ENABLE_AZURE)\n    include(cmake/third_party/azure_sdk.cmake)\nendif()\n\nif(NOT ENABLE_SHARED AND NOT ENABLE_STATIC)\n    message(FATAL_ERROR \"Both ENABLE_SHARED & ENABLE_STATIC are disabled. Need to enable at least one build flavour.\")\nendif()\n\n# Set the C++ 17 standard. Have to use this method to make it consistent across the platforms\n# as cmake is doing funny things with the versions we have (including setting -std on MSVC).\nif(MSVC)\n    set(CMAKE_CXX_STANDARD)\n    add_cmake_flag(CMAKE_CXX_FLAGS /std:c++17)\nelse()\n    set(CMAKE_CXX_STANDARD 17)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\n    set(CMAKE_CXX_EXTENSIONS OFF)\nendif()\n\nif(ENABLE_COLORIZE_OUTPUT)\n    # Colorize the build error output\n    if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\" OR \"${CMAKE_C_COMPILER_ID}\" STREQUAL \"GNU\")\n        add_compile_options(-fdiagnostics-color=always)\n    elseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR \"${CMAKE_C_COMPILER_ID}\" STREQUAL \"Clang\")\n        add_compile_options(-fcolor-diagnostics)\n    endif()\nendif()\n\nif(ENABLE_STRICT)\n    if(\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"GNU\")\n        include(cmake/strict/gcc_strict.cmake)\n    elseif(\"${CMAKE_C_COMPILER_ID}\" MATCHES \"^(Apple)?(C|c?)lang\")\n        include(cmake/strict/clang_strict.cmake)\n    elseif(\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"MSVC\")\n        include(cmake/strict/cl_strict.cmake)\n    endif()\n    if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n        include(cmake/strict/gxx_strict.cmake)\n    elseif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"^(Apple)?(C|c?)lang\")\n        include(cmake/strict/clangxx_strict.cmake)\n    elseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"MSVC\")\n        include(cmake/strict/clxx_strict.cmake)\n    endif()\nendif()\n\nif(HAVE_UNITTEST)\n    Include(FetchContent)\n\n    FetchContent_Declare(\n        Catch2\n        GIT_REPOSITORY https://github.com/catchorg/Catch2.git\n        GIT_TAG        v2.13.8\n    )\n\n    # Note, the preferred solution of using FetchContent_MakeAvailable()\n    # is not available in 3.11.0 (it arrived in 3.11.4), so we do some extra steps to achieve the same result.\n    #\n    # See https://cmake.org/cmake/help/v3.23/module/FetchContent.html\n    #\n    # Once we can rely on having 3.11.4 or greater, then the following call can be restored, and the\n    # code between the Start and End comments below can be removed.\n\n    # FetchContent_MakeAvailable(Catch2)\n\n    # Start of code that achieves what FetchContent_MakeAvailable(Catch2) would do.\n    FetchContent_Populate(Catch2)\n    add_subdirectory(${catch2_SOURCE_DIR} ${catch2_BINARY_DIR})\n    # End of code that achieves what FetchContent_MakeAvailable(Catch2) would do.\nendif()\n\n# Enable CTest. Subsequent targets may additionally define their own ctest definitions.\nenable_testing()\n\n# Include the extensions to the build.\nadd_subdirectory(ext)\n\n# Collect all the library sources we need to compile from the source filelist.\nparse_filelist_source(${CMAKE_CURRENT_LIST_DIR}/dist/filelist wt_sources)\n\nif(\"${CMAKE_BUILD_TYPE}\" MATCHES \"^MSan$\")\n    list(APPEND wt_sources ${CMAKE_SOURCE_DIR}/src/support/msan_fstat_suppression_wrappers.c)\nendif()\n\nif(WT_WIN)\n    list(APPEND wt_source ${CMAKE_SOURCE_DIR}/cmake/configs/wiredtiger.def)\n    set_source_files_properties(${CMAKE_SOURCE_DIR}/cmake/configs/wiredtiger.def PROPERTIES HEADER_FILE_ONLY TRUE)\nendif()\n\nset(builtin_objs)\nif(HAVE_BUILTIN_EXTENSION_LZ4)\n    list(APPEND builtin_objs $<TARGET_OBJECTS:wiredtiger_lz4>)\nendif()\n\nif(HAVE_BUILTIN_EXTENSION_SNAPPY)\n    list(APPEND builtin_objs $<TARGET_OBJECTS:wiredtiger_snappy>)\nendif()\n\nif(HAVE_BUILTIN_EXTENSION_SODIUM)\n    list(APPEND builtin_objs $<TARGET_OBJECTS:wiredtiger_sodium>)\nendif()\n\nif(HAVE_BUILTIN_EXTENSION_ZLIB)\n    list(APPEND builtin_objs $<TARGET_OBJECTS:wiredtiger_zlib>)\nendif()\n\nif(HAVE_BUILTIN_EXTENSION_ZSTD)\n    list(APPEND builtin_objs $<TARGET_OBJECTS:wiredtiger_zstd>)\nendif()\n\nif(HAVE_BUILTIN_EXTENSION_IAA)\n    list(APPEND builtin_objs $<TARGET_OBJECTS:wiredtiger_iaa>)\nendif()\n\n# Generate wiredtiger.h include file.\nconfigure_file(src/include/wiredtiger.in \"include/wiredtiger.h\" @ONLY)\n# Generate our wiredtiger_config.h include file.\nconfigure_file(cmake/configs/wiredtiger_config.h.in \"config/wiredtiger_config.h\" @ONLY)\n\n# If compiling with fPIC, we can create a intermediate library of\n# position independent objects, that both the static and shared builds\n# can use. This saving on the cost of recompiling the WiredTiger sources\n# two times over.\nif(WITH_PIC OR ENABLE_SHARED)\n    add_library(wt_objs OBJECT ${wt_sources})\n    target_include_directories(wt_objs\n        PRIVATE\n        ${CMAKE_CURRENT_BINARY_DIR}/include\n        ${CMAKE_CURRENT_BINARY_DIR}/config\n        ${CMAKE_CURRENT_LIST_DIR}/src/include\n    )\n    # Append any provided C flags.\n    if(COMPILER_DIAGNOSTIC_C_FLAGS)\n        target_compile_options(wt_objs PRIVATE ${COMPILER_DIAGNOSTIC_C_FLAGS})\n    endif()\n    if(ENABLE_MEMKIND)\n        target_include_directories(wt_objs PRIVATE ${HAVE_LIBMEMKIND_INCLUDES})\n    endif()\n    if(ENABLE_ANTITHESIS)\n        target_include_directories(wt_objs PRIVATE ${CMAKE_SOURCE_DIR}/tools/voidstar/include)\n    endif()\n    if(HAVE_LIBPTHREAD)\n        target_include_directories(wt_objs PRIVATE ${HAVE_LIBPTHREAD_INCLUDES})\n    endif()\n    if(HAVE_LIBRT)\n        target_include_directories(wt_objs PRIVATE ${HAVE_LIBRT_INCLUDES})\n    endif()\n    if(HAVE_LIBDL)\n        target_include_directories(wt_objs PRIVATE ${HAVE_LIBDL_INCLUDES})\n    endif()\n    set_property(TARGET wt_objs PROPERTY POSITION_INDEPENDENT_CODE ON)\nendif()\n\nif(ENABLE_STATIC)\n    if(WITH_PIC)\n        define_wiredtiger_library(wiredtiger_static STATIC\n            SOURCES $<TARGET_OBJECTS:wt_objs> ${builtin_objs}\n            PUBLIC_INCLUDES ${CMAKE_CURRENT_BINARY_DIR}/include\n            PRIVATE_INCLUDES ${CMAKE_CURRENT_BINARY_DIR}/config ${CMAKE_CURRENT_LIST_DIR}/src/include\n        )\n    else()\n        define_wiredtiger_library(wiredtiger_static STATIC\n            SOURCES ${wt_sources} ${builtin_objs}\n            PUBLIC_INCLUDES ${CMAKE_CURRENT_BINARY_DIR}/include\n            PRIVATE_INCLUDES ${CMAKE_CURRENT_BINARY_DIR}/config ${CMAKE_CURRENT_LIST_DIR}/src/include\n        )\n    endif()\nendif()\n\nif(ENABLE_SHARED)\n    define_wiredtiger_library(wiredtiger_shared SHARED\n        SOURCES $<TARGET_OBJECTS:wt_objs> ${builtin_objs}\n        PUBLIC_INCLUDES ${CMAKE_CURRENT_BINARY_DIR}/include\n        PRIVATE_INCLUDES ${CMAKE_CURRENT_BINARY_DIR}/config ${CMAKE_CURRENT_LIST_DIR}/src/include\n    )\n    # Set the SOVERSION property of the wiredtiger library, so we can export the appropriately versioned symlinks.\n    set_target_properties(wiredtiger_shared PROPERTIES SOVERSION \"${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}\")\n\n    setup_gdb_autoloader()\n\n    # For MacOS builds we need to generate a dSYM bundle that contains the debug symbols for the \n    # WiredTiger library.\n    if (WT_DARWIN)\n        add_custom_command(\n            TARGET wiredtiger_shared POST_BUILD\n            COMMAND dsymutil libwiredtiger.${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.dylib\n            COMMENT \"Running dsymutil on libwiredtiger.${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.dylib\"\n            VERBATIM\n        )\n    endif()\nendif()\n\n# Define an alias target for the WiredTiger library. This being a general target other\n# executables can use to link against. Preference the static library build if available\n# otherwise fallback to the shared library. We also namespace (::) the target to\n# tell CMake that the target name is associated with an ALIAS target, allowing CMake\n# to issue a diagnostic message if the target isn't found on subsequent linking commands.\nif (ENABLE_STATIC)\n    add_library(wt::wiredtiger ALIAS wiredtiger_static)\nelse()\n    add_library(wt::wiredtiger ALIAS wiredtiger_shared)\nendif()\n\n# Build the wt utility.\nadd_subdirectory(src/utilities)\n\n# Establish our install target configuration.\ninclude(cmake/install/install.cmake)\n\n\nif(ENABLE_PYTHON)\n    add_subdirectory(lang/python)\n    add_subdirectory(bench/workgen)\nendif()\n\n# Build the wiredtiger test suites.\nadd_subdirectory(bench/wtperf)\nadd_subdirectory(bench/tiered)\nadd_subdirectory(bench/wt2853_perf)\nadd_subdirectory(examples)\nadd_subdirectory(test)\nif(ENABLE_LLVM)\n    add_subdirectory(tools/xray_to_optrack)\nendif()\n\n# Build other tools.\nadd_subdirectory(tools/checksum_bitflip)\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 6.3671875,
          "content": "Contributing to the WiredTiger project\n======================================\n\nPull requests are always welcome, and the WiredTiger dev team appreciates any help the community can\ngive to help make WiredTiger better.\n\nFor more information about how to contribute, please read `the WiredTiger Wiki on GitHub`_.\n\n.. _the WiredTiger Wiki on GitHub: https://github.com/wiredtiger/wiredtiger/wiki/Contributing-to-WiredTiger\n\n\nCoding Style\n============\n\nA consistent style makes it easier for engineers to read the sources\nand to move between different parts of the code base. A coding style\nalso specifies important information that should be provided in the\ncode, through naming conventions and commenting guidelines. Coding\nconventions also make it easier for tools to parse the code.\n\nA good code style helps programmers avoid bugs by specifying idioms\nthat are less error-prone.\n\nWiredTiger has separate coding styles for C and C++. This is because\nthe C coding style contains guidelines that are not appropriate (and\nin some cases are bad practices) in C++. WiredTiger itself is written\nin C, while tools like cppsuite and workgen are written in C++.\n\n\nWiredTiger C Coding Style\n=========================\n\nThe WiredTiger C coding standard is loosely based on K&R indentation\nand formatted using Clang-Format. Some specific points are listed\nbelow. This is not an exhaustive list, however. If in doubt, find an\nexisting example in the source code and copy it.\n\n* Use space characters rather than tabs\n* Line re-indents are always 2 space characters\n* Lines wrap at 100 characters, split after an operator\n* All groups of things should be in alphabetical order where possible\n  (local variable declarations, flags, stat fields, etc)\n* *struct* variables declarations should appear before the ``WT_*``\n  structure declarations in a function. ``WT_*`` structure declarations\n  should be in alphabetical order e.g.::\n\n    struct timeval start, end;\n    WT_CKPT *ckpt;\n    WT_CONNECTION_IMPL *conn;\n\n* Comments should:\n\n  * Describe intended functionality\n  * Not reference variable names where possible\n  * Not reference JIRA ticket numbers nor pull request numbers\n  * Be fully formed sentences\n  * Use C-style with ``/* ... */`` and not C++ style double-slash comments\n  * Single-line comments should place the delimiters on the same line as the text\n\n* Multi-line comments should place the delimiters on their own lines,\n  and begin each line of text with an asterisk::\n\n    /* This is a valid comment. */\n    // This is not a valid comment.\n\n    /*\n     * This is a valid\n     * multi-line comment.\n     */\n    // This is not a\n    // valid multi-line comment.\n\n* Lines that need to be wrapped should be split so successive lines\n  are longer if possible. This applies to function signatures too\n  (exceptions are possible here). If in doubt, Clang-Format will\n  handle this for you.\n* Functions used across multiple files across directories and sub-systems\n  begin with a ``__wt_`` prefix, where prefix is a sub-system identifier (e.g log or btree)\n* Functions used across multiple files but within a sub-system directory\n  begin with a ``__wti_`` prefix, where prefix is a sub-system identifier (e.g log or btree)\n* Static functions should begin with an `__` prefix, where prefix is a\n  sub-system identifier (e.g log or btree)\n* In a function declaration, the return value should be on a separate\n  line so that the function name is at the left margin as shown below::\n\n    int\n    __wt_square(int x)\n    {\n\treturn (x * x);\n    }\n\n* Names for function output parameters should end with \"p\" and should\n  appear at the end of the argument list, as shown below::\n\n    static inline void\n    __ref_index_slot(WT_SESSION_IMPL *session, WT_REF *ref,\n      WT_PAGE_INDEX **pindexp, uint32_t *slotp)\n\n* If a function takes a return value pointer as an argument (e.g.,\n  ``WT_FH **fhpp``) and the function always fills in the pointer on\n  successful return, then the function should always set the pointer\n  to NULL at the beginning of the function. This is simpler than\n  requiring all callers to initialize the argument. It also ensures\n  that the caller is never surprised by finding random data in the\n  return value (or at least we drop core if we're not doing the\n  correct error handling).\n* Use descriptive variable and function names. Use all lowercase\n  letters with a ``_`` separator.  Use standard names for common\n  WiredTiger structures (``WT_SESSION`` and ``WT_CONNECTION`` are\n  \"wt_session\" and \"wt_conn\", ``WT_SESSION_IMPL`` and\n  ``WT_CONNECTION_IMPL`` are \"session\" and \"conn)\n* It is strongly preferred, but not required, that variables are declared\n  and initialized where they are first used, i.e. the scope of each variable\n  should be as limited as possible.\n* Initializing a variable at the time it is declared should be preferred\n  to declaring separately from initialisation.\n* For the cases where the initialization isn't required, but a\n  compiler wants it, tag them with this comment\n  ``/* -Werror=maybe-uninitialized */``\n* Pointers are compared to ``NULL`` , so \"``(p == NULL)``\",\n  not \"``(p == 0)``\" or \"``(!p)``\"\n* Use ``for(;;)`` to create an infinite loop, rather than\n  ``while(true)``\n* When returning a value from a function, use parentheses around the\n  return value: ``return (0)``;\n* Single statement blocks in conditions and loops do not use braces\n  unless required to avoid ambiguity.\n* Use names from WiredTiger namespaces to avoid collisions with\n  application code and system include files:\n\n  * WiredTiger's public function names begin with the string\n    wiredtiger. For example, wiredtiger_open.\n  * WiredTiger's public #define and structure typedef declarations\n    begin with the string ``WT_``. For example ``WT_ERR`` and\n    ``WT_SESSION``.\n  * WiredTiger's private function names begin with the string\n    ``__wt_``. For example, ``__wt_cursor_set_key``.\n* When there is code shared with fail/non-fail cases, use the\n  following style::\n\n        if (0) {\n    err:\n            <non-shared fail code>\n        }\n\t<shared fail/non-fail code>\n\treturn (ret);\n\n* When there is no code shared with fail/non-fail cases, use the\n  following style::\n\n\t<non-fail code>\n\treturn (0);\n    err:\n\t<fail code>\n\treturn (ret);\n\nRun the ``./s_all`` script once your coding is finished. It will\nreformat your code to adhere to many parts of our coding standard. But\nit does not check everything. No tool can, for example, determine\nwhether your function names are sufficiently descriptive.\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.3447265625,
          "content": "WiredTiger 12.0.0: (November 15, 2024)\n\nThis is version 12.0.0 of WiredTiger.\n\nInstructions for configuring, building, and installing WiredTiger are available online.\n\n    For Linux, MacOS, and other POSIX systems:\n    https://source.wiredtiger.com/develop/build-posix.html\n\n    For Windows:\n    https://source.wiredtiger.com/develop/build-windows.html\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.787109375,
          "content": "Copyright (c) 2014-present MongoDB, Inc.\nCopyright (c) 2008-2014 WiredTiger, Inc.\n\tAll rights reserved.\n\nThis program is free software: you can redistribute it and/or modify it under\nthe terms of either version 2 or version 3 of the GNU General Public License\nas published by the Free Software Foundation.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\nFOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\ndetails.\n\nFor a license to use the WiredTiger software under conditions other than those\ndescribed by the GNU General Public License, or for technical support for this\nsoftware, contact MongoDB, Inc.\n\nFor further information, see the licensing section in the documentation.\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 0.6025390625,
          "content": "WiredTiger 12.0.0: (November 15, 2024)\n\nThis is version 12.0.0 of WiredTiger.\n\nWiredTiger release packages and documentation can be found at:\n\n    https://source.wiredtiger.com\n\nThe WiredTiger source code can be found at:\n\n    https://github.com/wiredtiger/wiredtiger\n\nWiredTiger uses JIRA for issue management:\n\n    https://jira.mongodb.org/browse/WT\n\nPlease do not report issues through GitHub.\n\nWiredTiger licensing information can be found at:\n\n    https://source.wiredtiger.com/license.html\n\nFor general questions and discussion, there's a WiredTiger group:\n\n    https://groups.google.com/group/wiredtiger-users\n"
        },
        {
          "name": "RELEASE_INFO",
          "type": "blob",
          "size": 0.4072265625,
          "content": "WIREDTIGER_VERSION_MAJOR=12\nWIREDTIGER_VERSION_MINOR=0\nWIREDTIGER_VERSION_PATCH=0\nWIREDTIGER_VERSION=\"$WIREDTIGER_VERSION_MAJOR.$WIREDTIGER_VERSION_MINOR.$WIREDTIGER_VERSION_PATCH\"\n\nWIREDTIGER_RELEASE_DATE=`date \"+%B %e, %Y\"`\n\nWIREDTIGER_VERSION_STRING=\"WiredTiger $WIREDTIGER_VERSION: ($WIREDTIGER_RELEASE_DATE)\"\n\nWIREDTIGER_VERSION_UNIQUE_NAME=`printf \"_%d%03d\" $WIREDTIGER_VERSION_MAJOR $WIREDTIGER_VERSION_MINOR`\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "lang",
          "type": "tree",
          "content": null
        },
        {
          "name": "oss",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}