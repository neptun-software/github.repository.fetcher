{
  "metadata": {
    "timestamp": 1736709972236,
    "page": 530,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "madMAx43v3r/chia-plotter",
      "stars": 2269,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": "/build\n*.out\n*.tmp\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2998046875,
          "content": "[submodule \"lib/BLAKE3\"]\n\tpath = lib/BLAKE3\n\turl = https://github.com/BLAKE3-team/BLAKE3.git\n[submodule \"lib/libbech32\"]\n\tpath = lib/libbech32\n\turl = https://github.com/dcdpr/libbech32.git\n[submodule \"lib/bls-signatures\"]\n\tpath = lib/bls-signatures\n\turl = https://github.com/Chia-Network/bls-signatures.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.255859375,
          "content": "cmake_minimum_required(VERSION 3.10)\nset(CMAKE_CXX_STANDARD 17)\nfind_package(Git)\nexecute_process(\n  COMMAND ${GIT_EXECUTABLE} log -1 --format=%h\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  OUTPUT_VARIABLE GIT_COMMIT_HASH\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n)\nadd_definitions(\"-DGIT_COMMIT_HASH=\\\"${GIT_COMMIT_HASH}\\\"\")\n\nproject(chia-plotter C CXX ASM)\n\n# Add path for custom modules\nset(CMAKE_MODULE_PATH\n\t${CMAKE_MODULE_PATH}\n\t${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules\n)\n\nif (${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL \"amd64\")\n\tset(TARGET_ARCH \"x86_64\")\nelse()\n\tset(TARGET_ARCH ${CMAKE_HOST_SYSTEM_PROCESSOR})\nendif()\nmessage(STATUS \"Architecture: ${TARGET_ARCH}\")\n\n#set(ENV{RELIC_MAIN} \"1\")\nadd_subdirectory(lib/bls-signatures)\n\nadd_subdirectory(lib/libbech32)\n\nfind_package(Threads REQUIRED)\n\nif (SODIUM_FOUND)\n  message(STATUS \"Found libsodium\")\n  message(STATUS \"Sodium include dir = ${sodium_INCLUDE_DIR}\")\n  include_directories(${sodium_INCLUDE_DIR})\nendif()\n\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wno-unused-function\")\n\nset(BLAKE3_PATH lib/BLAKE3/c)\nset(FSE_PATH lib/FSE/lib)\n\ninclude_directories(\n\tlib\n\tinclude\n\tlib/bls-signatures/src\n\tlib/libbech32/include/libbech32\n\t${BLAKE3_PATH}\n\t${CMAKE_BINARY_DIR}/_deps/relic-src/include\n\t${CMAKE_BINARY_DIR}/_deps/relic-build/include\n)\n\nIF (WIN32)\nset(BLAKE3_SRC\n    ${BLAKE3_PATH}/blake3.c\n    ${BLAKE3_PATH}/blake3_portable.c\n    ${BLAKE3_PATH}/blake3_dispatch.c\n    ${BLAKE3_PATH}/blake3_sse41_x86-64_windows_gnu.S\n    ${BLAKE3_PATH}/blake3_sse2_x86-64_windows_gnu.S\n)\nELSEIF(TARGET_ARCH STREQUAL \"x86_64\")\nset(BLAKE3_SRC\n    ${BLAKE3_PATH}/blake3.c\n    ${BLAKE3_PATH}/blake3_portable.c\n    ${BLAKE3_PATH}/blake3_dispatch.c\n    ${BLAKE3_PATH}/blake3_avx2_x86-64_unix.S\n    ${BLAKE3_PATH}/blake3_avx512_x86-64_unix.S\n    ${BLAKE3_PATH}/blake3_sse41_x86-64_unix.S\n    ${BLAKE3_PATH}/blake3_sse2_x86-64_unix.S\n)\nELSE()\nset(BLAKE3_SRC\n    ${BLAKE3_PATH}/blake3.c\n    ${BLAKE3_PATH}/blake3_portable.c\n    ${BLAKE3_PATH}/blake3_dispatch.c\n)\nENDIF()\n\nset(FSE_SRC\n    ${FSE_PATH}/fse_compress.c\n    ${FSE_PATH}/fse_decompress.c\n    ${FSE_PATH}/entropy_common.c\n    ${FSE_PATH}/hist.c\n)\n\nadd_library(blake3 STATIC ${BLAKE3_SRC})\n\nadd_library(fse STATIC ${FSE_SRC})\n\nadd_library(chia_plotter STATIC\n\tlib/chacha8.c\n\tsrc/settings.cpp\n)\n\ntarget_link_libraries(chia_plotter blake3 fse bech32 Threads::Threads)\n\nadd_executable(test_copy test/test_copy.cpp)\nadd_executable(test_disk_sort test/test_disk_sort.cpp)\n\nadd_executable(test_phase_1 test/test_phase_1.cpp)\nadd_executable(test_phase_2 test/test_phase_2.cpp)\nadd_executable(test_phase_3 test/test_phase_3.cpp)\nadd_executable(test_phase_4 test/test_phase_4.cpp)\n\nadd_executable(check_phase_1 test/check_phase_1.cpp)\n\nadd_executable(chia_plot src/chia_plot.cpp)\nadd_executable(chia_plot_k34 src/chia_plot.cpp)\n\ntarget_compile_definitions(chia_plot_k34 PUBLIC CHIA_K34=1)\n\ntarget_link_libraries(test_copy chia_plotter)\ntarget_link_libraries(test_disk_sort chia_plotter)\n\ntarget_link_libraries(test_phase_1 chia_plotter)\ntarget_link_libraries(test_phase_2 chia_plotter)\ntarget_link_libraries(test_phase_3 chia_plotter)\ntarget_link_libraries(test_phase_4 chia_plotter)\n\ntarget_link_libraries(check_phase_1 chia_plotter)\n\ntarget_link_libraries(chia_plot chia_plotter bls sodium)\ntarget_link_libraries(chia_plot_k34 chia_plotter bls sodium)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.6962890625,
          "content": "# Compiler image\n# -------------------------------------------------------------------------------------------------\nFROM alpine:3.13.5 AS compiler\n\nWORKDIR /root\n\nRUN apk --no-cache add \\\n    gcc \\\n    g++ \\\n    build-base \\\n    cmake \\\n    gmp-dev \\\n    libsodium-dev \\\n    libsodium-static \\\n    git\n\nCOPY . .\nRUN /bin/sh ./make_devel.sh\n\n# Runtime image\n# -------------------------------------------------------------------------------------------------\nFROM alpine:3.13.5 AS runtime\n\nWORKDIR /root\n\nRUN apk --no-cache add \\\n    gmp-dev \\\n    libsodium-dev\n\nCOPY --from=compiler /root/build /usr/lib/chia-plotter\nRUN ln -s /usr/lib/chia-plotter/chia_plot /usr/bin/chia_plot\n\nENTRYPOINT [\"/usr/bin/chia_plot\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.392578125,
          "content": "# chia-plotter (pipelined multi-threaded)\n\nThis is a new implementation of a chia plotter which is designed as a processing pipeline,\nsimilar to how GPUs work, only the \"cores\" are normal software CPU threads.\n\nAs a result this plotter is able to fully max out any storage device's bandwidth,\nsimply by increasing the number of \"cores\", ie. threads.\n\nSponsored by [Flexpool.io](https://www.flexpool.io/) - Check them out if you're looking for a secure and scalable Chia pool.\n\n## Usage\n\nJoin the Discord for support: [https://discord.gg/BswFhNkMzY](https://discord.gg/BswFhNkMzY)\n\n```\nFor <poolkey> and <farmerkey> see output of `chia keys show`.\nTo plot for pools, specify <contract> address via -c instead of <poolkey>, see `chia plotnft show`.\n<tmpdir> needs about 220 GiB space, it will handle about 25% of all writes. (Examples: './', '/mnt/tmp/')\n<tmpdir2> needs about 110 GiB space and ideally is a RAM drive, it will handle about 75% of all writes.\nCombined (tmpdir + tmpdir2) peak disk usage is less than 256 GiB.\nIn case of <count> != 1, you may press Ctrl-C for graceful termination after current plot is finished,\nor double press Ctrl-C to terminate immediately.\n\nUsage:\n  chia_plot [OPTION...]\n\n  -k, --size arg       K size (default = 32, k <= 32)\n  -x, --port arg       Network port (default = 8444, chives = 9699, mmx = 11337)\n  -n, --count arg      Number of plots to create (default = 1, -1 = infinite)\n  -r, --threads arg    Number of threads (default = 4)\n  -u, --buckets arg    Number of buckets (default = 256)\n  -v, --buckets3 arg   Number of buckets for phase 3+4 (default = buckets)\n  -t, --tmpdir arg     Temporary directory, needs ~220 GiB (default = $PWD)\n  -2, --tmpdir2 arg    Temporary directory 2, needs ~110 GiB [RAM] (default = <tmpdir>)\n  -d, --finaldir arg   Final directory to copy plot in parallel (default = <tmpdir>)\n  -s, --stagedir arg   Stage directory to write plot file (default = <tmpdir>)\n  -w, --waitforcopy    Wait for copy to start next plot\n  -p, --poolkey arg    Pool Public Key (48 bytes)\n  -c, --contract arg   Pool Contract Address (62 chars)\n  -f, --farmerkey arg  Farmer Public Key (48 bytes)\n  -G, --tmptoggle      Alternate tmpdir/tmpdir2 (default = false)\n  -D, --directout      Create plot directly in finaldir (default = false)\n  -Z, --unique         Make unique plot (default = false)\n  -K, --rmulti2 arg    Thread multiplier for P2 (default = 1)\n      --version        Print version\n      --help           Print help\n```\n\nMake sure to crank up `<threads>` if you have plenty of cores, the default is 4.\nDepending on the phase more threads will be launched, the setting is just a multiplier.\n\nRAM usage depends on `<threads>` and `<buckets>`.\nWith the new default of 256 buckets it's about 0.5 GB per thread at most.\n\n`-G` option will alternate the temp dirs used while plotting to give each one, tmpdir and tmpdir2, equal usage. The first plot creation will use tmpdir and tmpdir2 as expected. The next run, if -n equals 2 or more, will swap the order to tmpdir2 and tmpdir. The next run swaps again to tmpdir and tmpdir2. This will occur until the number of plots created is reached or until stopped.\n\n### RAM disk setup on Linux\n`sudo mount -t tmpfs -o size=110G tmpfs /mnt/ram/`\n\nNote: 128 GiB System RAM minimum required for RAM disk.\n\n## How to Support\n\nXCH: xch1w5c2vv5ak08pczeph7tp5xmkl5762pdf3pyjkg9z4ks4ed55j3psgay0zh\n\nXFX: xfx1succfn2z3uwmq50ukztjanrvs9kw294mqn4lv22rk6tzmcu7e2xsyxyaa5\n\nXCC: xcc16j65y35fs8u289nq6krcyehsmp5eqd4we493rxf36pg7eymcqrqqltsrat\n\n## Results\n\nOn a dual Xeon® E5-2650v2<span>@</span>2.60GHz R720 with 256GB RAM and a 3x800GB SATA SSD RAID0, using a 110G tmpfs for `<tmpdir2>`:\n\n<details>\n  <summary>Click to expand</summary>\n  \n  ```\n  Number of Threads: 16\n  Number of Buckets: 2^8 (256)\n  Working Directory:   /mnt/tmp3/chia/tmp/ \n  Working Directory 2: /mnt/tmp3/chia/tmp/ram/\n  [P1] Table 1 took 17.2488 sec\n  [P1] Table 2 took 145.011 sec, found 4294911201 matches\n  [P1] Table 3 took 170.86 sec, found 4294940789 matches\n  [P1] Table 4 took 203.713 sec, found 4294874801 matches\n  [P1] Table 5 took 201.346 sec, found 4294830453 matches\n  [P1] Table 6 took 195.928 sec, found 4294681297 matches\n  [P1] Table 7 took 158.053 sec, found 4294486972 matches\n  Phase 1 took 1092.2 sec\n  [P2] max_table_size = 4294967296\n  [P2] Table 7 scan took 15.5542 sec\n  [P2] Table 7 rewrite took 37.7806 sec, dropped 0 entries (0 %)\n  [P2] Table 6 scan took 46.7014 sec\n  [P2] Table 6 rewrite took 65.7315 sec, dropped 581295425 entries (13.5352 %)\n  [P2] Table 5 scan took 45.4663 sec\n  [P2] Table 5 rewrite took 61.9683 sec, dropped 761999997 entries (17.7423 %)\n  [P2] Table 4 scan took 44.8217 sec\n  [P2] Table 4 rewrite took 61.36 sec, dropped 828847725 entries (19.2985 %)\n  [P2] Table 3 scan took 44.9121 sec\n  [P2] Table 3 rewrite took 61.5872 sec, dropped 855110820 entries (19.9097 %)\n  [P2] Table 2 scan took 43.641 sec\n  [P2] Table 2 rewrite took 59.6939 sec, dropped 865543167 entries (20.1528 %)\n  Phase 2 took 620.488 sec\n  Wrote plot header with 268 bytes\n  [P3-1] Table 2 took 73.1018 sec, wrote 3429368034 right entries\n  [P3-2] Table 2 took 42.3999 sec, wrote 3429368034 left entries, 3429368034 final\n  [P3-1] Table 3 took 68.9318 sec, wrote 3439829969 right entries\n  [P3-2] Table 3 took 43.8179 sec, wrote 3439829969 left entries, 3439829969 final\n  [P3-1] Table 4 took 71.3236 sec, wrote 3466027076 right entries\n  [P3-2] Table 4 took 46.2887 sec, wrote 3466027076 left entries, 3466027076 final\n  [P3-1] Table 5 took 70.6369 sec, wrote 3532830456 right entries\n  [P3-2] Table 5 took 45.5857 sec, wrote 3532830456 left entries, 3532830456 final\n  [P3-1] Table 6 took 75.8534 sec, wrote 3713385872 right entries\n  [P3-2] Table 6 took 48.8266 sec, wrote 3713385872 left entries, 3713385872 final\n  [P3-1] Table 7 took 83.2586 sec, wrote 4294486972 right entries\n  [P3-2] Table 7 took 56.3803 sec, wrote 4294486972 left entries, 4294486972 final\n  Phase 3 took 733.323 sec, wrote 21875928379 entries to final plot\n  [P4] Starting to write C1 and C3 tables  \n  [P4] Finished writing C1 and C3 tables   \n  [P4] Writing C2 table\n  [P4] Finished writing C2 table\n  Phase 4 took 84.6697 sec, final plot size is 108828428322 bytes\n  Total plot creation time was 2530.76 sec \n  ```\n</details>\n\n## How to Verify\n\nTo make sure the plots are valid you can use the `ProofOfSpace` tool from [chiapos](https://github.com/Chia-Network/chiapos):\n\n```bash\ngit clone https://github.com/Chia-Network/chiapos.git\ncd chiapos && mkdir build && cd build && cmake .. && make -j8\n./ProofOfSpace check -f plot-k32-???.plot [num_iterations]\n```\n\n## How to update to latest version\n\n```bash\ncd chia-plotter\ngit checkout master\ngit pull\ngit submodule update --init\n./make_devel.sh\n```\n\n## Future Plans\n\nI do have some history with GPU mining, back in 2014 I was the first to open source [a XPM GPU miner,](https://github.com/madMAx43v3r/xpmclient)\nwhich was about 40x more efficient than the CPU miner. [See my other repos.](https://github.com/madMAx43v3r?tab=repositories)\n\nAs such, it's only a matter of time until I add OpenCL support to speed up the plotter even more,\nkeeping most of the load off the CPUs.\n\n## Dependencies\n\n- cmake (>=3.14)\n- libsodium-dev\n\n## Install\n\n<details>\n  <summary>Windows</summary>\n  \n  Binaries built by [stotiks](https://github.com/stotiks) can be found here:\nhttps://github.com/stotiks/chia-plotter/releases\n\n</details>\n\n<details>\n  <summary>Arch Linux</summary>\n\n  First, install dependencies from pacman:\n  ```bash\n  sudo pacman -S cmake libsodium gmp gcc11\n  ```\n  Then, clone and compile the project:\n  ```bash\n  # Checkout the source and install\n  git clone https://github.com/madMAx43v3r/chia-plotter.git\n  cd chia-plotter\n\n  git submodule update --init\n  ./make_devel.sh\n  ./build/chia_plot --help\n  ```\n</details>\n\n<details>\n  <summary>CentOS 7</summary>\n  \n  ```bash\n  git clone https://github.com/madMAx43v3r/chia-plotter.git\n  cd chia-plotter\n\n  git submodule update --init\n  sudo yum install epel-release -y\n  sudo yum install cmake3 libsodium libsodium-static -y\n  ln /usr/bin/cmake3 /usr/bin/cmake\n  # Install a package with repository for your system:\n  # On CentOS, install package centos-release-scl available in CentOS repository:\n  sudo yum install centos-release-scl -y\n  # Install the collection:\n  sudo yum install devtoolset-7 -y\n  # Start using software collections:\n  scl enable devtoolset-7 bash\n  ./make_devel.sh\n  ./build/chia_plot --help\n  ```\n</details>\n\n<details>\n  <summary>Clear Linux</summary>\n  \n  ```bash\n  sudo swupd update\n  sudo swupd bundle-add c-basic devpkg-libsodium git wget\n\n  echo PATH=$PATH:/usr/local/bin/ # for statically compiled cmake if not already in your PATH\n\n  # Install libsodium\n  cd /tmp\n  wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gz\n  tar -xvf LATEST.tar.gz\n  cd libsodium-stable\n  ./configure\n  make && make check\n  sudo make install\n  # Checkout the source and install\n  cd ~/\n  git clone https://github.com/madMAx43v3r/chia-plotter.git \n  cd ~/chia-plotter\n  git submodule update --init\n  ./make_devel.sh\n  ./build/chia_plot --help\n  ```\n</details>\n\n<details>\n  <summary>Ubuntu 20.04</summary>\n  \n  ```bash\n  sudo apt install -y libsodium-dev cmake g++ git build-essential\n  # Checkout the source and install\n  git clone https://github.com/madMAx43v3r/chia-plotter.git \n  cd chia-plotter\n\n  git submodule update --init\n  ./make_devel.sh\n  ./build/chia_plot --help\n  ```\n\n  The binaries will end up in `build/`, you can copy them elsewhere freely (on the same machine, or similar OS).\n</details>\n\n<details>\n  <summary>Debian 10 (\"buster\")</summary>\n\n  Make sure to add buster-backports to your sources.list otherwise the installation will fail because an older cmake version. See the [debian backport documentation](https://backports.debian.org/Instructions/) for reference.\n\n  ```bash\n  # Install cmake 3.16 from buster-backports\n  sudo apt install -t buster-backports cmake\n  sudo apt install -y libsodium-dev g++ git\n  # Checkout the source and install\n  git clone https://github.com/madMAx43v3r/chia-plotter.git \n  cd chia-plotter\n\n  git submodule update --init\n  ./make_devel.sh\n  ./build/chia_plot --help\n  ```\n  The binaries will end up in `build/`, you can copy them elsewhere freely (on the same machine, or similar OS).\n</details>\n\n<details>\n  <summary>macOS</summary>\n  \n  First you need to install the [Brew](https://brew.sh/) package manager and [Xcode](https://apps.apple.com/app/xcode/id497799835) OR [Xcode Command Line Tools](https://developer.apple.com/download/).\n  ```bash\n  # Download Xcode Command Line Tools (skip if you already have Xcode)\n  xcode-select --install\n\n  # Now download chia-plotter's dependencies\n  brew install libsodium cmake git autoconf automake libtool wget\n  brew link cmake\n  git clone https://github.com/madMAx43v3r/chia-plotter.git \n  cd chia-plotter\n  git submodule update --init\n  ./make_devel.sh\n  ./build/chia_plot --help\n  ```\n\n  Linking libsodium should be performed automatically, but in case of failure please follow these instructions:\n  ```\n  # If you downloaded Xcode run these:\n  sudo ln -s /usr/local/include/sodium.h /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/\n  sudo ln -s /usr/local/include/sodium /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/\n\n  # If you downloaded CommandLineTools run these:\n  sudo ln -s /usr/local/include/sodium.h /Library/Developer/CommandLineTools/usr/include\n  sudo ln -s /usr/local/include/sodium /Library/Developer/CommandLineTools/usr/include\n\n  ```\n\n  Confirm which directory you have on YOUR Mac before applying following commands\n  ```\n  # For x86_64 Macs\n  wget https://raw.githubusercontent.com/facebookincubator/fizz/master/build/fbcode_builder/CMake/FindSodium.cmake -O /usr/local/opt/cmake/share/cmake/Modules/FindSodium.cmake\n  ```\n   or\n  ``` \n  # For ARM64 (M1) Macs\n  wget https://raw.githubusercontent.com/facebookincubator/fizz/master/build/fbcode_builder/CMake/FindSodium.cmake -O /opt/homebrew/Cellar/cmake/*/share/cmake/Modules/FindSodium.cmake\n  ```\n\n  If a maximum open file limit error occurs (as default OS setting is 256, which is too low for default bucket size of `256`), run this before starting the plotter\n  ```\n  ulimit -n 3000\n  ```\n  This file limit change will only affect the current session.\n</details>\n\n<details>\n  <summary>Running in a Docker container</summary>\n\n  In some setups and scenarios, it could be useful to run your plotter inside a Docker container. This could be potentially useful while running `chia-plotter` in Windows.\n\n  To do so, [install Docker](https://docs.docker.com/get-docker/) on your computer and them run the following command:\n\n  ```sh\n  docker run \\\n    -v <path-to-your-tmp-dir>:/mnt/harvester \\\n    -v <path-to-your-final-dir>:/mnt/farm \\\n    odelucca/chia-plotter \\\n      -t /mnt/harvester/ \\\n      -d /mnt/farm/ \\\n      -p <pool-key> \\\n      -f <farm-key> \\\n      -r <number-of-CPU-cores>\n  ```\n  > 💡 You can provide any of the plotter arguments after the image name (`odelucca/chia-plotter`)\n\n  In a Linux benchmark, we were able to find that running in Docker is only 5% slower than running in native OS.\n\n  For Windows users, you should check if your Docker configuration has any RAM or CPU limits. Since Docker runs inside HyperV, that could potentially constrain your hardware usage. In any case, you can set the RAM limits with the `-m` flag (after the `docker run` command).\n\n  ### Regarding multithread in Docker\n\n  While running in Windows, you may need to proper configure your Docker to allow multi CPUs. You can do so by following [this article](https://www.thorsten-hans.com/docker-container-cpu-limits-explained/)\n\n  In a nutshell, you could also pass the `--cpus` flag to your `docker run` command in order to achieve the same result.\n\n  So, for example, the following command...\n  ```sh\n  docker run \\\n    -v <path-to-your-tmp-dir>:/mnt/harvester \\\n    -v <path-to-your-final-dir>:/mnt/farm \\\n    -m 8G \\\n    --cpus 8 \\\n    odelucca/chia-plotter \\\n      -t /mnt/harvester/ \\\n      -d /mnt/farm/ \\\n      -p <pool-key> \\\n      -f <farm-key> \\\n      -r 8\n  ```\n\n  ...would run your plotter with 8 CPU cores and 8GB of RAM.\n\n  ### Building a Docker container\n  Make sure your submodules are up-to-date by running `git submodule update --init`, then simply build with `docker build .`\n</details>\n\n---\n\n## Known Issues\n\n- Needs at least cmake 3.14 (because of bls-signatures)\n\n[How to install latest cmake on Ubuntu 18.04](https://askubuntu.com/questions/1203635/installing-latest-cmake-on-ubuntu-18-04-3-lts-run-via-wsl-openssl-error)\n"
        },
        {
          "name": "clean_all.sh",
          "type": "blob",
          "size": 0.0263671875,
          "content": "#!/bin/bash\n\nrm -rf build\n\n"
        },
        {
          "name": "cmake_modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "make_debug.sh",
          "type": "blob",
          "size": 0.146484375,
          "content": "#!/bin/bash\n\nmkdir -p build\n\ncd build\n\ncmake -D CMAKE_CXX_FLAGS=\"-g -fmax-errors=1\" -DARITH=\"easy\" -DBUILD_BLS_PYTHON_BINDINGS=false ..\n\nmake -j8 $@\n\n"
        },
        {
          "name": "make_devel.sh",
          "type": "blob",
          "size": 0.2021484375,
          "content": "#!/bin/bash\n\nmkdir -p build\n\ncd build\n\ncmake -D CMAKE_CXX_FLAGS=\"-g -O3 -fmax-errors=1\" -DARITH=\"easy\" -DBUILD_BLS_PYTHON_BINDINGS=false -DBUILD_BLS_TESTS=false -DBUILD_BLS_BENCHMARKS=false ..\n\nmake -j8 $@\n\n"
        },
        {
          "name": "make_release.sh",
          "type": "blob",
          "size": 0.1474609375,
          "content": "#!/bin/bash\n\nmkdir -p build\n\ncd build\n\ncmake -D CMAKE_CXX_FLAGS=\"-O3 -fmax-errors=1\" -DARITH=\"easy\" -DBUILD_BLS_PYTHON_BINDINGS=false ..\n\nmake -j8 $@\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}