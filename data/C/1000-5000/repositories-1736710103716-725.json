{
  "metadata": {
    "timestamp": 1736710103716,
    "page": 725,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "arkdb/inception",
      "stars": 1870,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": "*.out\n*.swp\ntags\n.DS_Store\n"
        },
        {
          "name": "BUILD-CMAKE",
          "type": "blob",
          "size": 0.1005859375,
          "content": "The latest information about building MySQL with CMake is located on \nhttp://forge.mysql.com/wiki/CMake"
        },
        {
          "name": "BUILD",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 9.9599609375,
          "content": "# Copyright (c) 2006, 2012, Oracle and/or its affiliates. All rights reserved.\n# \n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n# \n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA\n\nCMAKE_MINIMUM_REQUIRED(VERSION 2.6)\n# Avoid warnings in higher versions\nif(\"${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}\" GREATER 2.6)\n CMAKE_POLICY(VERSION 2.8)\nendif()\n\nMESSAGE(STATUS \"Running cmake version ${CMAKE_VERSION}\")\n\nSET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)\n\n# First, decide about build type (debug or release)\n# If custom compiler flags are set or cmake is invoked with -DCMAKE_BUILD_TYPE, \n# respect user wishes and do not (re)define CMAKE_BUILD_TYPE. If WITH_DEBUG{_FULL} \n# is given, set CMAKE_BUILD_TYPE = Debug. Otherwise, use Relwithdebinfo.\n\n\nIF(DEFINED CMAKE_BUILD_TYPE)\n  SET(HAVE_CMAKE_BUILD_TYPE TRUE)\nENDIF()\nSET(CUSTOM_C_FLAGS $ENV{CFLAGS})\n\nOPTION(WITH_DEBUG \"Use dbug/safemutex\" OFF)\n\n# Use a default manufacturer if no manufacturer was identified.\nSET(MANUFACTURER_DOCSTRING\n  \"Set the entity that appears as the manufacturer of packages that support a manufacturer field.\")\nIF(NOT DEFINED MANUFACTURER) \n  SET(MANUFACTURER \"Built from Source\" CACHE  STRING ${MANUFACTURER_DOCSTRING})\n  MARK_AS_ADVANCED(MANUFACTURER)\nENDIF()\n\n# We choose to provide WITH_DEBUG as alias to standard CMAKE_BUILD_TYPE=Debug\n# which turns out to be not trivial, as this involves synchronization \n# between CMAKE_BUILD_TYPE and WITH_DEBUG. Besides, we have to deal with cases\n# where WITH_DEBUG is  reset from ON to OFF  and here we need to reset \n# CMAKE_BUILD_TYPE to either none or default RelWithDebInfo\n\nSET(BUILDTYPE_DOCSTRING\n \"Choose the type of build, options are: None(CMAKE_CXX_FLAGS or\n CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel\")\n\n# Possibly temporary fix: Clang on 32 bit causes non-debug server to crash\nIF(CMAKE_OSX_ARCHITECTURES MATCHES \"i386\")\n  SET(CMAKE_CXX_COMPILER g++)\nENDIF()\n\nIF(WITH_DEBUG)\n  SET(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING ${BUILDTYPE_DOCSTRING} FORCE)\n  SET(MYSQL_MAINTAINER_MODE ON CACHE BOOL\n      \"MySQL maintainer-specific development environment\")\n  IF(UNIX AND NOT APPLE)\n    # Compiling with PIC speeds up embedded build, on PIC sensitive systems \n    # Predefine it to ON, in case user chooses to build embedded. \n    SET(WITH_PIC ON CACHE BOOL \"Compile with PIC\")\n  ENDIF()\n  SET(OLD_WITH_DEBUG 1 CACHE INTERNAL \"\" FORCE)\nELSEIF(NOT HAVE_CMAKE_BUILD_TYPE OR OLD_WITH_DEBUG)\n  IF(CUSTOM_C_FLAGS)\n    SET(CMAKE_BUILD_TYPE \"\" CACHE STRING ${BUILDTYPE_DOCSTRING} FORCE)\n  ELSE(CMAKE_BUILD_TYPE MATCHES \"Debug\" OR NOT HAVE_CMAKE_BUILD_TYPE)\n    SET(CMAKE_BUILD_TYPE \"RelWithDebInfo\" CACHE STRING \n       ${BUILDTYPE_DOCSTRING} FORCE)\n  ENDIF()\n  SET(OLD_WITH_DEBUG 0 CACHE INTERNAL \"\" FORCE)\nENDIF()\n\n# Optionally set project name, e.g.\n# foo.xcodeproj (mac) or foo.sln (windows)\nSET(MYSQL_PROJECT_NAME_DOCSTRING \"MySQL project name\")\nIF(DEFINED MYSQL_PROJECT_NAME)\n  SET(MYSQL_PROJECT_NAME ${MYSQL_PROJECT_NAME} CACHE STRING\n      ${MYSQL_PROJECT_NAME_DOCSTRING} FORCE)\nELSE()\n  SET(MYSQL_PROJECT_NAME \"Inception\" CACHE STRING\n      ${MYSQL_PROJECT_NAME_DOCSTRING} FORCE)\n  MARK_AS_ADVANCED(MYSQL_PROJECT_NAME)\nENDIF()\nPROJECT(${MYSQL_PROJECT_NAME})\n\nOPTION(WITH_DEFAULT_COMPILER_OPTIONS\n  \"Use flags from cmake/build_configurations/compiler_options.cmake\"\n  ON)\nIF(BUILD_CONFIG)\n  INCLUDE(\n  ${CMAKE_SOURCE_DIR}/cmake/build_configurations/${BUILD_CONFIG}.cmake)\nENDIF()\n\n#cmake on 64bit windows/mac/solaris doesn't set CMAKE_SYSTEM_PROCESSOR correctly\nSET(MYSQL_MACHINE_TYPE ${CMAKE_SYSTEM_PROCESSOR})\n\n\n# Include the platform-specific file. To allow exceptions, this code\n# looks for files in order of how specific they are. If there is, for\n# example, a generic Linux.cmake and a version-specific\n# Linux-2.6.28-11-generic, it will pick Linux-2.6.28-11-generic and\n# include it. It is then up to the file writer to include the generic\n# version if necessary.\nFOREACH(_base\n    ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}-${CMAKE_SYSTEM_PROCESSOR}\n    ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}\n    ${CMAKE_SYSTEM_NAME})\n  SET(_file ${CMAKE_SOURCE_DIR}/cmake/os/${_base}.cmake)\n  IF(EXISTS ${_file})\n    INCLUDE(${_file})\n    BREAK()\n  ENDIF()\nENDFOREACH()\n \n# Following autotools tradition, add preprocessor definitions\n# specified in environment variable CPPFLAGS\nIF(DEFINED ENV{CPPFLAGS})\n  ADD_DEFINITIONS($ENV{CPPFLAGS})\nENDIF()\n\nINCLUDE(CheckTypeSize)\nCHECK_TYPE_SIZE(\"void *\" SIZEOF_VOIDP)\nIF(WITH_DEFAULT_COMPILER_OPTIONS)\n  INCLUDE(${CMAKE_SOURCE_DIR}/cmake/build_configurations/compiler_options.cmake)\nENDIF()\n\n# Add macros\nINCLUDE(character_sets)\nINCLUDE(cpu_info)\nINCLUDE(zlib)\nINCLUDE(libevent)\nINCLUDE(ssl)\nINCLUDE(readline)\nINCLUDE(mysql_version)\nINCLUDE(libutils)\nINCLUDE(dtrace)\nINCLUDE(plugin)\nINCLUDE(install_macros)\nINCLUDE(install_layout)\nINCLUDE(mysql_add_executable)\n\nOPTION(WITH_FAST_MUTEXES \"Compile with fast mutexes\" OFF)\nMARK_AS_ADVANCED(WITH_FAST_MUTEXES)\n\n# Set DBUG_OFF and other optional release-only flags for non-debug project types\nFOREACH(BUILD_TYPE RELEASE RELWITHDEBINFO MINSIZEREL)\n  FOREACH(LANG C CXX)\n    SET(CMAKE_${LANG}_FLAGS_${BUILD_TYPE} \n     \"${CMAKE_${LANG}_FLAGS_${BUILD_TYPE}} -DDBUG_OFF\")\n    IF(WITH_FAST_MUTEXES)\n      SET(CMAKE_${LANG}_FLAGS_${BUILD_TYPE} \n        \"${CMAKE_${LANG}_FLAGS_${BUILD_TYPE}} -DMY_PTHREAD_FASTMUTEX=1\")\n    ENDIF()\n  ENDFOREACH()\nENDFOREACH()\n\nIF(NOT CMAKE_BUILD_TYPE\n    AND NOT CMAKE_GENERATOR MATCHES \"Visual Studio\" \n    AND NOT CMAKE_GENERATOR MATCHES \"Xcode\") \n    # This is the case of no CMAKE_BUILD_TYPE choosen, typical for VS and Xcode\n    # or if custom C flags are set. In VS and Xcode for non-Debug configurations \n    # DBUG_OFF is already correctly set. Use DBUG_OFF for Makefile based projects \n    # without build type too, unless user specifically requests DBUG. \n    IF(NOT CMAKE_C_FLAGS MATCHES \"-DDBUG_ON\")\n      ADD_DEFINITIONS(-DDBUG_OFF)\n    ENDIF()\nENDIF()\n\n# Add safemutex for debug configurations, except on Windows\n# (safemutex has never worked on Windows)\nIF(WITH_DEBUG AND NOT WIN32 AND NOT WITH_INNODB_MEMCACHED)\n  FOREACH(LANG C CXX)\n      SET(CMAKE_${LANG}_FLAGS_DEBUG\n          \"${CMAKE_${LANG}_FLAGS_DEBUG} -DSAFE_MUTEX\")\n  ENDFOREACH()\nENDIF()\n\n# Run platform tests\nINCLUDE(configure.cmake)\n\n# Common defines and includes\nADD_DEFINITIONS(-DHAVE_CONFIG_H)\nINCLUDE_DIRECTORIES(\n    ${CMAKE_CURRENT_BINARY_DIR}/include\n    ${CMAKE_SOURCE_DIR}/extra/rapidjson/include)\n\n\n# Add bundled or system zlib.\nMYSQL_CHECK_ZLIB_WITH_COMPRESS()\n# Add bundled yassl/taocrypt or system openssl.\n# Add readline or libedit.\nMYSQL_CHECK_SSL()\nMYSQL_CHECK_READLINE()\n# Add libevent\n\n#\n# Setup maintainer mode options by the end. Platform checks are\n# not run with the warning options as to not perturb fragile checks\n# (i.e. do not make warnings into errors).\n#\n# Why doesn't these flags affect the entire build?\n# Because things may already have been included with ADD_SUBDIRECTORY\n#\nIF(MYSQL_MAINTAINER_MODE)\n  # Set compiler flags required under maintainer mode.\n  MESSAGE(STATUS \"C warning options: ${MY_MAINTAINER_C_WARNINGS}\")\n  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${MY_MAINTAINER_C_WARNINGS}\")\n  MESSAGE(STATUS \"C++ warning options: ${MY_MAINTAINER_CXX_WARNINGS}\")\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${MY_MAINTAINER_CXX_WARNINGS}\")\nENDIF()\n\nIF(CMAKE_COMPILER_IS_GNUCXX)\n  STRING(REGEX MATCH \"-Werror\"\n    BUILD_WITH_WERROR ${CMAKE_CXX_FLAGS})\n  IF(BUILD_WITH_WERROR)\n    SET(\"COMPILE_FLAG_WERROR\" 1)\n  ENDIF()\nENDIF()\n\nIF(WITH_UNIT_TESTS)\n ENABLE_TESTING()\nENDIF()\n\nIF(NOT WITHOUT_SERVER)\nSET (MYSQLD_STATIC_PLUGIN_LIBS \"\" CACHE INTERNAL \"\")\n # Add storage engines and plugins.\n CONFIGURE_PLUGINS()\nENDIF()\n\nADD_SUBDIRECTORY(include)\nADD_SUBDIRECTORY(dbug)\nADD_SUBDIRECTORY(strings)\nADD_SUBDIRECTORY(vio)\nADD_SUBDIRECTORY(regex)\nADD_SUBDIRECTORY(mysys)\nADD_SUBDIRECTORY(mysys_ssl)\nADD_SUBDIRECTORY(libmysql)\n\nIF(NOT WITHOUT_SERVER)\n  ADD_SUBDIRECTORY(client)\n  ADD_SUBDIRECTORY(sql)\n  ADD_SUBDIRECTORY(sql/share)\n  ADD_SUBDIRECTORY(support-files)\n  ADD_SUBDIRECTORY(sql-bench)\n  IF(UNIX)\n    ADD_SUBDIRECTORY(man)\n  ENDIF()\n  IF(EXISTS ${CMAKE_SOURCE_DIR}/internal/CMakeLists.txt)\n    ADD_SUBDIRECTORY(internal)\n  ENDIF()\n  ADD_SUBDIRECTORY(packaging/rpm-uln)\nENDIF()\n\nINCLUDE(cmake/abi_check.cmake)\nINCLUDE(cmake/tags.cmake)\n\nCONFIGURE_FILE(config.h.cmake   ${CMAKE_BINARY_DIR}/include/my_config.h)\nCONFIGURE_FILE(config.h.cmake   ${CMAKE_BINARY_DIR}/include/config.h)\nCONFIGURE_FILE(${CMAKE_SOURCE_DIR}/include/mysql_version.h.in\n               ${CMAKE_BINARY_DIR}/include/mysql_version.h )\nCONFIGURE_FILE(${CMAKE_SOURCE_DIR}/sql/sql_builtin.cc.in\n    ${CMAKE_BINARY_DIR}/sql/sql_builtin.cc)\nCONFIGURE_FILE(\n    ${CMAKE_SOURCE_DIR}/cmake/info_macros.cmake.in ${CMAKE_BINARY_DIR}/info_macros.cmake @ONLY)\n\n# Handle the \"INFO_*\" files.\nINCLUDE(${CMAKE_BINARY_DIR}/info_macros.cmake)\n# Source: This can be done during the cmake phase, all information is\n# available, but should be repeated on each \"make\" just in case someone\n# does \"cmake ; make ; bzr pull ; make\".\n# Build flags: This must be postponed to the make phase.\n\n# Packaging\nIF(WIN32)\n  SET(CPACK_GENERATOR \"ZIP\")\nELSE()\n  SET(CPACK_GENERATOR \"TGZ\")\nENDIF() \nADD_SUBDIRECTORY(packaging/WiX)\nADD_SUBDIRECTORY(packaging/solaris)\n\n# Create a single package with \"make package\"\n# (see http://public.kitware.com/Bug/view.php?id=11452)\nSET(CPACK_MONOLITHIC_INSTALL 1 CACHE INTERNAL \"\")\n\nLINK_LIBRARIES(jemalloc)\n#SET(CMAKE_EXE_LINK_DIRECTORIES)\nSET(CMAKE_EXE_LINKER_FLAGS_DEBUG \"${CMAKE_EXE_LINKER_FLAGS_DEBUG}\n-fprofile-arcs -ftest-coverage -lgcov -ljemalloc -L/usr/lib64/libjemalloc.so\")\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.5654296875,
          "content": "\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\t    How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "Docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "Doxyfile-perfschema",
          "type": "blob",
          "size": 64.412109375,
          "content": "#\n# MySQL Doxyfile for the performance_schema.\n#\n# To run doxygen:\n# - mkdir -p ./generated/doxygen\n# - doxygen Doxyfile-perfschema\n# - see the logs in ./doxyerror.log\n# - see the doc in ./generated/doxygen/html/index.html\n\n#===========================================================================\n# Doxyfile 1.6.2\n\n# This file describes the settings to be used by the documentation system\n# doxygen (www.doxygen.org) for a project\n#\n# All text after a hash (#) is considered a comment and will be ignored\n# The format is:\n#       TAG = value [value, ...]\n# For lists items can also be appended using:\n#       TAG += value [value, ...]\n# Values that contain spaces should be placed between quotes (\" \")\n\n#---------------------------------------------------------------------------\n# Project related configuration options\n#---------------------------------------------------------------------------\n\n# This tag specifies the encoding used for all characters in the config file\n# that follow. The default is UTF-8 which is also the encoding used for all\n# text before the first occurrence of this tag. Doxygen uses libiconv (or the\n# iconv built into libc) for the transcoding. See\n# http://www.gnu.org/software/libiconv for the list of possible encodings.\n\nDOXYFILE_ENCODING      = UTF-8\n\n# The PROJECT_NAME tag is a single word (or a sequence of words surrounded\n# by quotes) that should identify the project.\n\nPROJECT_NAME           = \"PERFORMANCE SCHEMA\"\n\n# The PROJECT_NUMBER tag can be used to enter a project or revision number.\n# This could be handy for archiving the generated documentation or\n# if some version control system is used.\n\nPROJECT_NUMBER         =\n\n# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)\n# base path where the generated documentation will be put.\n# If a relative path is entered, it will be relative to the location\n# where doxygen was started. If left blank the current directory will be used.\n\nOUTPUT_DIRECTORY       = generated/doxygen\n\n# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create\n# 4096 sub-directories (in 2 levels) under the output directory of each output\n# format and will distribute the generated files over these directories.\n# Enabling this option can be useful when feeding doxygen a huge amount of\n# source files, where putting all generated files in the same directory would\n# otherwise cause performance problems for the file system.\n\nCREATE_SUBDIRS         = NO\n\n# The OUTPUT_LANGUAGE tag is used to specify the language in which all\n# documentation generated by doxygen is written. Doxygen will use this\n# information to generate all constant output in the proper language.\n# The default language is English, other supported languages are:\n# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional,\n# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German,\n# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English\n# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian,\n# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrilic, Slovak,\n# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.\n\nOUTPUT_LANGUAGE        = English\n\n# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will\n# include brief member descriptions after the members that are listed in\n# the file and class documentation (similar to JavaDoc).\n# Set to NO to disable this.\n\nBRIEF_MEMBER_DESC      = YES\n\n# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend\n# the brief description of a member or function before the detailed description.\n# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the\n# brief descriptions will be completely suppressed.\n\nREPEAT_BRIEF           = YES\n\n# This tag implements a quasi-intelligent brief description abbreviator\n# that is used to form the text in various listings. Each string\n# in this list, if found as the leading text of the brief description, will be\n# stripped from the text and the result after processing the whole list, is\n# used as the annotated text. Otherwise, the brief description is used as-is.\n# If left blank, the following values are used (\"$name\" is automatically\n# replaced with the name of the entity): \"The $name class\" \"The $name widget\"\n# \"The $name file\" \"is\" \"provides\" \"specifies\" \"contains\"\n# \"represents\" \"a\" \"an\" \"the\"\n\nABBREVIATE_BRIEF       =\n\n# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then\n# Doxygen will generate a detailed section even if there is only a brief\n# description.\n\nALWAYS_DETAILED_SEC    = NO\n\n# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n# inherited members of a class in the documentation of that class as if those\n# members were ordinary class members. Constructors, destructors and assignment\n# operators of the base classes will not be shown.\n\nINLINE_INHERITED_MEMB  = NO\n\n# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full\n# path before files name in the file list and in the header files. If set\n# to NO the shortest path that makes the file name unique will be used.\n\nFULL_PATH_NAMES        = YES\n\n# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag\n# can be used to strip a user-defined part of the path. Stripping is\n# only done if one of the specified strings matches the left-hand part of\n# the path. The tag can be used to show relative paths in the file list.\n# If left blank the directory from which doxygen is run is used as the\n# path to strip.\n\nSTRIP_FROM_PATH        =\n\n# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of\n# the path mentioned in the documentation of a class, which tells\n# the reader which header file to include in order to use a class.\n# If left blank only the name of the header file containing the class\n# definition is used. Otherwise one should specify the include paths that\n# are normally passed to the compiler using the -I flag.\n\nSTRIP_FROM_INC_PATH    =\n\n# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter\n# (but less readable) file names. This can be useful is your file systems\n# doesn't support long names like on DOS, Mac, or CD-ROM.\n\nSHORT_NAMES            = NO\n\n# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen\n# will interpret the first line (until the first dot) of a JavaDoc-style\n# comment as the brief description. If set to NO, the JavaDoc\n# comments will behave just like regular Qt-style comments\n# (thus requiring an explicit @brief command for a brief description.)\n\nJAVADOC_AUTOBRIEF      = NO\n\n# If the QT_AUTOBRIEF tag is set to YES then Doxygen will\n# interpret the first line (until the first dot) of a Qt-style\n# comment as the brief description. If set to NO, the comments\n# will behave just like regular Qt-style comments (thus requiring\n# an explicit \\brief command for a brief description.)\n\nQT_AUTOBRIEF           = NO\n\n# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen\n# treat a multi-line C++ special comment block (i.e. a block of //! or ///\n# comments) as a brief description. This used to be the default behaviour.\n# The new default is to treat a multi-line C++ comment block as a detailed\n# description. Set this tag to YES if you prefer the old behaviour instead.\n\nMULTILINE_CPP_IS_BRIEF = NO\n\n# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented\n# member inherits the documentation from any documented member that it\n# re-implements.\n\nINHERIT_DOCS           = YES\n\n# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce\n# a new page for each member. If set to NO, the documentation of a member will\n# be part of the file/class/namespace that contains it.\n\nSEPARATE_MEMBER_PAGES  = NO\n\n# The TAB_SIZE tag can be used to set the number of spaces in a tab.\n# Doxygen uses this value to replace tabs by spaces in code fragments.\n\nTAB_SIZE               = 8\n\n# This tag can be used to specify a number of aliases that acts\n# as commands in the documentation. An alias has the form \"name=value\".\n# For example adding \"sideeffect=\\par Side Effects:\\n\" will allow you to\n# put the command \\sideeffect (or @sideeffect) in the documentation, which\n# will result in a user-defined paragraph with heading \"Side Effects:\".\n# You can put \\n's in the value part of an alias to insert newlines.\n\nALIASES                =\n\n# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C\n# sources only. Doxygen will then generate output that is more tailored for C.\n# For instance, some of the names that are used will be different. The list\n# of all members will be omitted, etc.\n\nOPTIMIZE_OUTPUT_FOR_C  = NO\n\n# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java\n# sources only. Doxygen will then generate output that is more tailored for\n# Java. For instance, namespaces will be presented as packages, qualified\n# scopes will look different, etc.\n\nOPTIMIZE_OUTPUT_JAVA   = NO\n\n# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran\n# sources only. Doxygen will then generate output that is more tailored for\n# Fortran.\n\nOPTIMIZE_FOR_FORTRAN   = NO\n\n# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL\n# sources. Doxygen will then generate output that is tailored for\n# VHDL.\n\nOPTIMIZE_OUTPUT_VHDL   = NO\n\n# Doxygen selects the parser to use depending on the extension of the files it parses.\n# With this tag you can assign which parser to use for a given extension.\n# Doxygen has a built-in mapping, but you can override or extend it using this tag.\n# The format is ext=language, where ext is a file extension, and language is one of\n# the parsers supported by doxygen: IDL, Java, Javascript, C#, C, C++, D, PHP,\n# Objective-C, Python, Fortran, VHDL, C, C++. For instance to make doxygen treat\n# .inc files as Fortran files (default is PHP), and .f files as C (default is Fortran),\n# use: inc=Fortran f=C. Note that for custom extensions you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.\n\nEXTENSION_MAPPING      =\n\n# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want\n# to include (a tag file for) the STL sources as input, then you should\n# set this tag to YES in order to let doxygen match functions declarations and\n# definitions whose arguments contain STL classes (e.g. func(std::string); v.s.\n# func(std::string) {}). This also make the inheritance and collaboration\n# diagrams that involve STL classes more complete and accurate.\n\nBUILTIN_STL_SUPPORT    = NO\n\n# If you use Microsoft's C++/CLI language, you should set this option to YES to\n# enable parsing support.\n\nCPP_CLI_SUPPORT        = NO\n\n# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only.\n# Doxygen will parse them like normal C++ but will assume all classes use public\n# instead of private inheritance when no explicit protection keyword is present.\n\nSIP_SUPPORT            = NO\n\n# For Microsoft's IDL there are propget and propput attributes to indicate getter\n# and setter methods for a property. Setting this option to YES (the default)\n# will make doxygen to replace the get and set methods by a property in the\n# documentation. This will only work if the methods are indeed getting or\n# setting a simple type. If this is not the case, or you want to show the\n# methods anyway, you should set this option to NO.\n\nIDL_PROPERTY_SUPPORT   = YES\n\n# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n# tag is set to YES, then doxygen will reuse the documentation of the first\n# member in the group (if any) for the other members of the group. By default\n# all members of a group must be documented explicitly.\n\nDISTRIBUTE_GROUP_DOC   = NO\n\n# Set the SUBGROUPING tag to YES (the default) to allow class member groups of\n# the same type (for instance a group of public functions) to be put as a\n# subgroup of that type (e.g. under the Public Functions section). Set it to\n# NO to prevent subgrouping. Alternatively, this can be done per class using\n# the \\nosubgrouping command.\n\nSUBGROUPING            = YES\n\n# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum\n# is documented as struct, union, or enum with the name of the typedef. So\n# typedef struct TypeS {} TypeT, will appear in the documentation as a struct\n# with name TypeT. When disabled the typedef will appear as a member of a file,\n# namespace, or class. And the struct will be named TypeS. This can typically\n# be useful for C code in case the coding convention dictates that all compound\n# types are typedef'ed and only the typedef is referenced, never the tag name.\n\nTYPEDEF_HIDES_STRUCT   = NO\n\n# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to\n# determine which symbols to keep in memory and which to flush to disk.\n# When the cache is full, less often used symbols will be written to disk.\n# For small to medium size projects (<1000 input files) the default value is\n# probably good enough. For larger projects a too small cache size can cause\n# doxygen to be busy swapping symbols to and from disk most of the time\n# causing a significant performance penality.\n# If the system has enough physical memory increasing the cache will improve the\n# performance by keeping more symbols in memory. Note that the value works on\n# a logarithmic scale so increasing the size by one will rougly double the\n# memory usage. The cache size is given by this formula:\n# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0,\n# corresponding to a cache size of 2^16 = 65536 symbols\n\nSYMBOL_CACHE_SIZE      = 0\n\n#---------------------------------------------------------------------------\n# Build related configuration options\n#---------------------------------------------------------------------------\n\n# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in\n# documentation are documented, even if no documentation was available.\n# Private class members and static file members will be hidden unless\n# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES\n\nEXTRACT_ALL            = NO\n\n# If the EXTRACT_PRIVATE tag is set to YES all private members of a class\n# will be included in the documentation.\n\nEXTRACT_PRIVATE        = YES\n\n# If the EXTRACT_STATIC tag is set to YES all static members of a file\n# will be included in the documentation.\n\nEXTRACT_STATIC         = YES\n\n# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs)\n# defined locally in source files will be included in the documentation.\n# If set to NO only classes defined in header files are included.\n\nEXTRACT_LOCAL_CLASSES  = YES\n\n# This flag is only useful for Objective-C code. When set to YES local\n# methods, which are defined in the implementation section but not in\n# the interface are included in the documentation.\n# If set to NO (the default) only methods in the interface are included.\n\nEXTRACT_LOCAL_METHODS  = NO\n\n# If this flag is set to YES, the members of anonymous namespaces will be\n# extracted and appear in the documentation as a namespace called\n# 'anonymous_namespace{file}', where file will be replaced with the base\n# name of the file that contains the anonymous namespace. By default\n# anonymous namespace are hidden.\n\nEXTRACT_ANON_NSPACES   = NO\n\n# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all\n# undocumented members of documented classes, files or namespaces.\n# If set to NO (the default) these members will be included in the\n# various overviews, but no documentation section is generated.\n# This option has no effect if EXTRACT_ALL is enabled.\n\nHIDE_UNDOC_MEMBERS     = NO\n\n# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all\n# undocumented classes that are normally visible in the class hierarchy.\n# If set to NO (the default) these classes will be included in the various\n# overviews. This option has no effect if EXTRACT_ALL is enabled.\n\nHIDE_UNDOC_CLASSES     = NO\n\n# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all\n# friend (class|struct|union) declarations.\n# If set to NO (the default) these declarations will be included in the\n# documentation.\n\nHIDE_FRIEND_COMPOUNDS  = NO\n\n# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any\n# documentation blocks found inside the body of a function.\n# If set to NO (the default) these blocks will be appended to the\n# function's detailed documentation block.\n\nHIDE_IN_BODY_DOCS      = NO\n\n# The INTERNAL_DOCS tag determines if documentation\n# that is typed after a \\internal command is included. If the tag is set\n# to NO (the default) then the documentation will be excluded.\n# Set it to YES to include the internal documentation.\n\nINTERNAL_DOCS          = NO\n\n# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate\n# file names in lower-case letters. If set to YES upper-case letters are also\n# allowed. This is useful if you have classes or files whose names only differ\n# in case and if your file system supports case sensitive file names. Windows\n# and Mac users are advised to set this option to NO.\n\nCASE_SENSE_NAMES       = NO\n\n# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen\n# will show members with their full class and namespace scopes in the\n# documentation. If set to YES the scope will be hidden.\n\nHIDE_SCOPE_NAMES       = NO\n\n# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen\n# will put a list of the files that are included by a file in the documentation\n# of that file.\n\nSHOW_INCLUDE_FILES     = YES\n\n# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen\n# will list include files with double quotes in the documentation\n# rather than with sharp brackets.\n\nFORCE_LOCAL_INCLUDES   = NO\n\n# If the INLINE_INFO tag is set to YES (the default) then a tag [inline]\n# is inserted in the documentation for inline members.\n\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen\n# will sort the (detailed) documentation of file and class members\n# alphabetically by member name. If set to NO the members will appear in\n# declaration order.\n\nSORT_MEMBER_DOCS       = YES\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the\n# brief documentation of file, namespace and class members alphabetically\n# by member name. If set to NO (the default) the members will appear in\n# declaration order.\n\nSORT_BRIEF_DOCS        = NO\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the (brief and detailed) documentation of class members so that constructors and destructors are listed first. If set to NO (the default) the constructors will appear in the respective orders defined by SORT_MEMBER_DOCS and SORT_BRIEF_DOCS. This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.\n\nSORT_MEMBERS_CTORS_1ST = NO\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the\n# hierarchy of group names into alphabetical order. If set to NO (the default)\n# the group names will appear in their defined order.\n\nSORT_GROUP_NAMES       = NO\n\n# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be\n# sorted by fully-qualified names, including namespaces. If set to\n# NO (the default), the class list will be sorted only by class name,\n# not including the namespace part.\n# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.\n# Note: This option applies only to the class list, not to the\n# alphabetical list.\n\nSORT_BY_SCOPE_NAME     = NO\n\n# The GENERATE_TODOLIST tag can be used to enable (YES) or\n# disable (NO) the todo list. This list is created by putting \\todo\n# commands in the documentation.\n\nGENERATE_TODOLIST      = YES\n\n# The GENERATE_TESTLIST tag can be used to enable (YES) or\n# disable (NO) the test list. This list is created by putting \\test\n# commands in the documentation.\n\nGENERATE_TESTLIST      = YES\n\n# The GENERATE_BUGLIST tag can be used to enable (YES) or\n# disable (NO) the bug list. This list is created by putting \\bug\n# commands in the documentation.\n\nGENERATE_BUGLIST       = YES\n\n# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or\n# disable (NO) the deprecated list. This list is created by putting\n# \\deprecated commands in the documentation.\n\nGENERATE_DEPRECATEDLIST= YES\n\n# The ENABLED_SECTIONS tag can be used to enable conditional\n# documentation sections, marked by \\if sectionname ... \\endif.\n\nENABLED_SECTIONS       =\n\n# The MAX_INITIALIZER_LINES tag determines the maximum number of lines\n# the initial value of a variable or define consists of for it to appear in\n# the documentation. If the initializer consists of more lines than specified\n# here it will be hidden. Use a value of 0 to hide initializers completely.\n# The appearance of the initializer of individual variables and defines in the\n# documentation can be controlled using \\showinitializer or \\hideinitializer\n# command in the documentation regardless of this setting.\n\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated\n# at the bottom of the documentation of classes and structs. If set to YES the\n# list will mention the files that were used to generate the documentation.\n\nSHOW_USED_FILES        = YES\n\n# If the sources in your project are distributed over multiple directories\n# then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy\n# in the documentation. The default is NO.\n\nSHOW_DIRECTORIES       = NO\n\n# Set the SHOW_FILES tag to NO to disable the generation of the Files page.\n# This will remove the Files entry from the Quick Index and from the\n# Folder Tree View (if specified). The default is YES.\n\nSHOW_FILES             = YES\n\n# Set the SHOW_NAMESPACES tag to NO to disable the generation of the\n# Namespaces page.\n# This will remove the Namespaces entry from the Quick Index\n# and from the Folder Tree View (if specified). The default is YES.\n\nSHOW_NAMESPACES        = YES\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command <command> <input-file>, where <command> is the value of\n# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file\n# provided by doxygen. Whatever the program writes to standard output\n# is used as the file version. See the manual for examples.\n\nFILE_VERSION_FILTER    =\n\n# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed by\n# doxygen. The layout file controls the global structure of the generated output files\n# in an output format independent way. The create the layout file that represents\n# doxygen's defaults, run doxygen with the -l option. You can optionally specify a\n# file name after the option, if omitted DoxygenLayout.xml will be used as the name\n# of the layout file.\n\nLAYOUT_FILE            =\n\n#---------------------------------------------------------------------------\n# configuration options related to warning and progress messages\n#---------------------------------------------------------------------------\n\n# The QUIET tag can be used to turn on/off the messages that are generated\n# by doxygen. Possible values are YES and NO. If left blank NO is used.\n\nQUIET                  = NO\n\n# The WARNINGS tag can be used to turn on/off the warning messages that are\n# generated by doxygen. Possible values are YES and NO. If left blank\n# NO is used.\n\nWARNINGS               = YES\n\n# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings\n# for undocumented members. If EXTRACT_ALL is set to YES then this flag will\n# automatically be disabled.\n\nWARN_IF_UNDOCUMENTED   = YES\n\n# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for\n# potential errors in the documentation, such as not documenting some\n# parameters in a documented function, or documenting parameters that\n# don't exist or using markup commands wrongly.\n\nWARN_IF_DOC_ERROR      = YES\n\n# This WARN_NO_PARAMDOC option can be abled to get warnings for\n# functions that are documented, but have no documentation for their parameters\n# or return value. If set to NO (the default) doxygen will only warn about\n# wrong or incomplete parameter documentation, but not about the absence of\n# documentation.\n\nWARN_NO_PARAMDOC       = NO\n\n# The WARN_FORMAT tag determines the format of the warning messages that\n# doxygen can produce. The string should contain the $file, $line, and $text\n# tags, which will be replaced by the file and line number from which the\n# warning originated and the warning text. Optionally the format may contain\n# $version, which will be replaced by the version of the file (if it could\n# be obtained via FILE_VERSION_FILTER)\n\nWARN_FORMAT            = \"$file:$line: $text\"\n\n# The WARN_LOGFILE tag can be used to specify a file to which warning\n# and error messages should be written. If left blank the output is written\n# to stderr.\n\nWARN_LOGFILE           = doxyerror.log\n\n#---------------------------------------------------------------------------\n# configuration options related to the input files\n#---------------------------------------------------------------------------\n\n# The INPUT tag can be used to specify the files and/or directories that contain\n# documented source files. You may enter file names like \"myfile.cpp\" or\n# directories like \"/usr/src/myproject\". Separate the files or directories\n# with spaces.\n\nINPUT                  = .\n\n# This tag can be used to specify the character encoding of the source files\n# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is\n# also the default input encoding. Doxygen uses libiconv (or the iconv built\n# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for\n# the list of possible encodings.\n\nINPUT_ENCODING         = UTF-8\n\n# If the value of the INPUT tag contains directories, you can use the\n# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n# and *.h) to filter out the source-files in the directories. If left\n# blank the following patterns are tested:\n# *.c *.cc *.cxx *.cpp *.c++ *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh *.hxx\n# *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.py *.f90\n\nFILE_PATTERNS          =\n\n# The RECURSIVE tag can be used to turn specify whether or not subdirectories\n# should be searched for input files as well. Possible values are YES and NO.\n# If left blank NO is used.\n\nRECURSIVE              = YES\n\n# The EXCLUDE tag can be used to specify files and/or directories that should\n# excluded from the INPUT source files. This way you can easily exclude a\n# subdirectory from a directory tree whose root is specified with the INPUT tag.\n\nEXCLUDE                = extra libmysql libmysql_r libmysqld mysql-test storage/innodb storage/ndb support-files unittest zlib\n\n# The EXCLUDE_SYMLINKS tag can be used select whether or not files or\n# directories that are symbolic links (a Unix filesystem feature) are excluded\n# from the input.\n\nEXCLUDE_SYMLINKS       = NO\n\n# If the value of the INPUT tag contains directories, you can use the\n# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude\n# certain files from those directories. Note that the wildcards are matched\n# against the file with absolute path, so to exclude all test directories\n# for example use the pattern */test/*\n\nEXCLUDE_PATTERNS       =\n\n# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names\n# (namespaces, classes, functions, etc.) that should be excluded from the\n# output. The symbol name can be a fully qualified name, a word, or if the\n# wildcard * is used, a substring. Examples: ANamespace, AClass,\n# AClass::ANamespace, ANamespace::*Test\n\nEXCLUDE_SYMBOLS        =\n\n# The EXAMPLE_PATH tag can be used to specify one or more files or\n# directories that contain example code fragments that are included (see\n# the \\include command).\n\nEXAMPLE_PATH           =\n\n# If the value of the EXAMPLE_PATH tag contains directories, you can use the\n# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n# and *.h) to filter out the source-files in the directories. If left\n# blank all files are included.\n\nEXAMPLE_PATTERNS       =\n\n# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be\n# searched for input files to be used with the \\include or \\dontinclude\n# commands irrespective of the value of the RECURSIVE tag.\n# Possible values are YES and NO. If left blank NO is used.\n\nEXAMPLE_RECURSIVE      = NO\n\n# The IMAGE_PATH tag can be used to specify one or more files or\n# directories that contain image that are included in the documentation (see\n# the \\image command).\n\nIMAGE_PATH             =\n\n# The INPUT_FILTER tag can be used to specify a program that doxygen should\n# invoke to filter for each input file. Doxygen will invoke the filter program\n# by executing (via popen()) the command <filter> <input-file>, where <filter>\n# is the value of the INPUT_FILTER tag, and <input-file> is the name of an\n# input file. Doxygen will then use the output that the filter program writes\n# to standard output.\n# If FILTER_PATTERNS is specified, this tag will be\n# ignored.\n\nINPUT_FILTER           =\n\n# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern\n# basis.\n# Doxygen will compare the file name with each pattern and apply the\n# filter if there is a match.\n# The filters are a list of the form:\n# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further\n# info on how filters are used. If FILTER_PATTERNS is empty, INPUT_FILTER\n# is applied to all files.\n\nFILTER_PATTERNS        =\n\n# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using\n# INPUT_FILTER) will be used to filter the input files when producing source\n# files to browse (i.e. when SOURCE_BROWSER is set to YES).\n\nFILTER_SOURCE_FILES    = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to source browsing\n#---------------------------------------------------------------------------\n\n# If the SOURCE_BROWSER tag is set to YES then a list of source files will\n# be generated. Documented entities will be cross-referenced with these sources.\n# Note: To get rid of all source code in the generated output, make sure also\n# VERBATIM_HEADERS is set to NO.\n\nSOURCE_BROWSER         = NO\n\n# Setting the INLINE_SOURCES tag to YES will include the body\n# of functions and classes directly in the documentation.\n\nINLINE_SOURCES         = NO\n\n# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct\n# doxygen to hide any special comment blocks from generated source code\n# fragments. Normal C and C++ comments will always remain visible.\n\nSTRIP_CODE_COMMENTS    = YES\n\n# If the REFERENCED_BY_RELATION tag is set to YES\n# then for each documented function all documented\n# functions referencing it will be listed.\n\nREFERENCED_BY_RELATION = NO\n\n# If the REFERENCES_RELATION tag is set to YES\n# then for each documented function all documented entities\n# called/used by that function will be listed.\n\nREFERENCES_RELATION    = NO\n\n# If the REFERENCES_LINK_SOURCE tag is set to YES (the default)\n# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from\n# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will\n# link to the source code.\n# Otherwise they will link to the documentation.\n\nREFERENCES_LINK_SOURCE = YES\n\n# If the USE_HTAGS tag is set to YES then the references to source code\n# will point to the HTML generated by the htags(1) tool instead of doxygen\n# built-in source browser. The htags tool is part of GNU's global source\n# tagging system (see http://www.gnu.org/software/global/global.html). You\n# will need version 4.8.6 or higher.\n\nUSE_HTAGS              = NO\n\n# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen\n# will generate a verbatim copy of the header file for each class for\n# which an include is specified. Set to NO to disable this.\n\nVERBATIM_HEADERS       = YES\n\n#---------------------------------------------------------------------------\n# configuration options related to the alphabetical class index\n#---------------------------------------------------------------------------\n\n# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index\n# of all compounds will be generated. Enable this if the project\n# contains a lot of classes, structs, unions or interfaces.\n\nALPHABETICAL_INDEX     = NO\n\n# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then\n# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns\n# in which this list will be split (can be a number in the range [1..20])\n\nCOLS_IN_ALPHA_INDEX    = 5\n\n# In case all classes in a project start with a common prefix, all\n# classes will be put under the same header in the alphabetical index.\n# The IGNORE_PREFIX tag can be used to specify one or more prefixes that\n# should be ignored while generating the index headers.\n\nIGNORE_PREFIX          =\n\n#---------------------------------------------------------------------------\n# configuration options related to the HTML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_HTML tag is set to YES (the default) Doxygen will\n# generate HTML output.\n\nGENERATE_HTML          = YES\n\n# The HTML_OUTPUT tag is used to specify where the HTML docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `html' will be used as the default path.\n\nHTML_OUTPUT            = html\n\n# The HTML_FILE_EXTENSION tag can be used to specify the file extension for\n# each generated HTML page (for example: .htm,.php,.asp). If it is left blank\n# doxygen will generate files with .html extension.\n\nHTML_FILE_EXTENSION    = .html\n\n# The HTML_HEADER tag can be used to specify a personal HTML header for\n# each generated HTML page. If it is left blank doxygen will generate a\n# standard header.\n\nHTML_HEADER            =\n\n# The HTML_FOOTER tag can be used to specify a personal HTML footer for\n# each generated HTML page. If it is left blank doxygen will generate a\n# standard footer.\n\nHTML_FOOTER            =\n\n# The HTML_STYLESHEET tag can be used to specify a user-defined cascading\n# style sheet that is used by each HTML page. It can be used to\n# fine-tune the look of the HTML output. If the tag is left blank doxygen\n# will generate a default style sheet. Note that doxygen will try to copy\n# the style sheet file to the HTML output directory, so don't put your own\n# stylesheet in the HTML output directory as well, or it will be erased!\n\nHTML_STYLESHEET        =\n\n# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML\n# page will contain the date and time when the page was generated. Setting\n# this to NO can help when comparing the output of multiple runs.\n\nHTML_TIMESTAMP         = NO\n\n# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes,\n# files or namespaces will be aligned in HTML using tables. If set to\n# NO a bullet list will be used.\n\nHTML_ALIGN_MEMBERS     = YES\n\n# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML\n# documentation will contain sections that can be hidden and shown after the\n# page has loaded. For this to work a browser that supports\n# JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox\n# Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).\n\nHTML_DYNAMIC_SECTIONS  = NO\n\n# If the GENERATE_DOCSET tag is set to YES, additional index files\n# will be generated that can be used as input for Apple's Xcode 3\n# integrated development environment, introduced with OSX 10.5 (Leopard).\n# To create a documentation set, doxygen will generate a Makefile in the\n# HTML output directory. Running make will produce the docset in that\n# directory and running \"make install\" will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find\n# it at startup.\n# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html for more information.\n\nGENERATE_DOCSET        = NO\n\n# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the\n# feed. A documentation feed provides an umbrella under which multiple\n# documentation sets from a single provider (such as a company or product suite)\n# can be grouped.\n\nDOCSET_FEEDNAME        = \"Doxygen generated docs\"\n\n# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that\n# should uniquely identify the documentation set bundle. This should be a\n# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen\n# will append .docset to the name.\n\nDOCSET_BUNDLE_ID       = org.doxygen.Project\n\n# If the GENERATE_HTMLHELP tag is set to YES, additional index files\n# will be generated that can be used as input for tools like the\n# Microsoft HTML help workshop to generate a compiled HTML help file (.chm)\n# of the generated HTML documentation.\n\nGENERATE_HTMLHELP      = NO\n\n# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can\n# be used to specify the file name of the resulting .chm file. You\n# can add a path in front of the file if the result should not be\n# written to the html output directory.\n\nCHM_FILE               =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can\n# be used to specify the location (absolute path including file name) of\n# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run\n# the HTML help compiler on the generated index.hhp.\n\nHHC_LOCATION           =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag\n# controls if a separate .chi index file is generated (YES) or that\n# it should be included in the master .chm file (NO).\n\nGENERATE_CHI           = NO\n\n# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING\n# is used to encode HtmlHelp index (hhk), content (hhc) and project file\n# content.\n\nCHM_INDEX_ENCODING     =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag\n# controls whether a binary table of contents is generated (YES) or a\n# normal table of contents (NO) in the .chm file.\n\nBINARY_TOC             = NO\n\n# The TOC_EXPAND flag can be set to YES to add extra items for group members\n# to the contents of the HTML help documentation and to the tree view.\n\nTOC_EXPAND             = NO\n\n# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and QHP_VIRTUAL_FOLDER\n# are set, an additional index file will be generated that can be used as input for\n# Qt's qhelpgenerator to generate a Qt Compressed Help (.qch) of the generated\n# HTML documentation.\n\nGENERATE_QHP           = NO\n\n# If the QHG_LOCATION tag is specified, the QCH_FILE tag can\n# be used to specify the file name of the resulting .qch file.\n# The path specified is relative to the HTML output folder.\n\nQCH_FILE               =\n\n# The QHP_NAMESPACE tag specifies the namespace to use when generating\n# Qt Help Project output. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#namespace\n\nQHP_NAMESPACE          = org.doxygen.Project\n\n# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating\n# Qt Help Project output. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#virtual-folders\n\nQHP_VIRTUAL_FOLDER     = doc\n\n# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to add.\n# For more information please see\n# http://doc.trolltech.com/qthelpproject.html#custom-filters\n\nQHP_CUST_FILTER_NAME   =\n\n# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the custom filter to add.For more information please see\n# <a href=\"http://doc.trolltech.com/qthelpproject.html#custom-filters\">Qt Help Project / Custom Filters</a>.\n\nQHP_CUST_FILTER_ATTRS  =\n\n# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this project's\n# filter section matches.\n# <a href=\"http://doc.trolltech.com/qthelpproject.html#filter-attributes\">Qt Help Project / Filter Attributes</a>.\n\nQHP_SECT_FILTER_ATTRS  =\n\n# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can\n# be used to specify the location of Qt's qhelpgenerator.\n# If non-empty doxygen will try to run qhelpgenerator on the generated\n# .qhp file.\n\nQHG_LOCATION           =\n\n# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files\n#  will be generated, which together with the HTML files, form an Eclipse help\n#  plugin. To install this plugin and make it available under the help contents\n# menu in Eclipse, the contents of the directory containing the HTML and XML\n# files needs to be copied into the plugins directory of eclipse. The name of\n# the directory within the plugins directory should be the same as\n# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before the help appears.\n\nGENERATE_ECLIPSEHELP   = NO\n\n# A unique identifier for the eclipse help plugin. When installing the plugin\n# the directory name containing the HTML and XML files should also have\n# this name.\n\nECLIPSE_DOC_ID         = org.doxygen.Project\n\n# The DISABLE_INDEX tag can be used to turn on/off the condensed index at\n# top of each HTML page. The value NO (the default) enables the index and\n# the value YES disables it.\n\nDISABLE_INDEX          = NO\n\n# This tag can be used to set the number of enum values (range [1..20])\n# that doxygen will group on one line in the generated HTML documentation.\n\nENUM_VALUES_PER_LINE   = 4\n\n# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index\n# structure should be generated to display hierarchical information.\n# If the tag value is set to YES, a side panel will be generated\n# containing a tree-like index structure (just like the one that\n# is generated for HTML Help). For this to work a browser that supports\n# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser).\n# Windows users are probably better off using the HTML help feature.\n\nGENERATE_TREEVIEW      = NO\n\n# By enabling USE_INLINE_TREES, doxygen will generate the Groups, Directories,\n# and Class Hierarchy pages using a tree view instead of an ordered list.\n\nUSE_INLINE_TREES       = NO\n\n# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be\n# used to set the initial width (in pixels) of the frame in which the tree\n# is shown.\n\nTREEVIEW_WIDTH         = 250\n\n# Use this tag to change the font size of Latex formulas included\n# as images in the HTML documentation. The default is 10. Note that\n# when you change the font size after a successful doxygen run you need\n# to manually remove any form_*.png images from the HTML output directory\n# to force them to be regenerated.\n\nFORMULA_FONTSIZE       = 10\n\n# When the SEARCHENGINE tag is enabled doxygen will generate a search box for the HTML output. The underlying search engine uses javascript\n# and DHTML and should work on any modern browser. Note that when using HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets (GENERATE_DOCSET) there is already a search function so this one should\n# typically be disabled. For large projects the javascript based search engine\n# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.\n\nSEARCHENGINE           = YES\n\n# When the SERVER_BASED_SEARCH tag is enabled the search engine will be implemented using a PHP enabled web server instead of at the web client using Javascript. Doxygen will generate the search PHP script and index\n# file to put on the web server. The advantage of the server based approach is that it scales better to large projects and allows full text search. The disadvances is that it is more difficult to setup\n# and does not have live searching capabilities.\n\nSERVER_BASED_SEARCH    = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the LaTeX output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will\n# generate Latex output.\n\nGENERATE_LATEX         = NO\n\n# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `latex' will be used as the default path.\n\nLATEX_OUTPUT           = latex\n\n# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be\n# invoked. If left blank `latex' will be used as the default command name.\n# Note that when enabling USE_PDFLATEX this option is only used for\n# generating bitmaps for formulas in the HTML output, but not in the\n# Makefile that is written to the output directory.\n\nLATEX_CMD_NAME         = latex\n\n# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to\n# generate index for LaTeX. If left blank `makeindex' will be used as the\n# default command name.\n\nMAKEINDEX_CMD_NAME     = makeindex\n\n# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact\n# LaTeX documents. This may be useful for small projects and may help to\n# save some trees in general.\n\nCOMPACT_LATEX          = NO\n\n# The PAPER_TYPE tag can be used to set the paper type that is used\n# by the printer. Possible values are: a4, a4wide, letter, legal and\n# executive. If left blank a4wide will be used.\n\nPAPER_TYPE             = a4wide\n\n# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX\n# packages that should be included in the LaTeX output.\n\nEXTRA_PACKAGES         =\n\n# The LATEX_HEADER tag can be used to specify a personal LaTeX header for\n# the generated latex document. The header should contain everything until\n# the first chapter. If it is left blank doxygen will generate a\n# standard header. Notice: only use this tag if you know what you are doing!\n\nLATEX_HEADER           =\n\n# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated\n# is prepared for conversion to pdf (using ps2pdf). The pdf file will\n# contain links (just like the HTML output) instead of page references\n# This makes the output suitable for online browsing using a pdf viewer.\n\nPDF_HYPERLINKS         = YES\n\n# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of\n# plain latex in the generated Makefile. Set this option to YES to get a\n# higher quality PDF documentation.\n\nUSE_PDFLATEX           = YES\n\n# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\\\batchmode.\n# command to the generated LaTeX files. This will instruct LaTeX to keep\n# running if errors occur, instead of asking the user for help.\n# This option is also used when generating formulas in HTML.\n\nLATEX_BATCHMODE        = NO\n\n# If LATEX_HIDE_INDICES is set to YES then doxygen will not\n# include the index chapters (such as File Index, Compound Index, etc.)\n# in the output.\n\nLATEX_HIDE_INDICES     = NO\n\n# If LATEX_SOURCE_CODE is set to YES then doxygen will include source code with syntax highlighting in the LaTeX output. Note that which sources are shown also depends on other settings such as SOURCE_BROWSER.\n\nLATEX_SOURCE_CODE      = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the RTF output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output\n# The RTF output is optimized for Word 97 and may not look very pretty with\n# other RTF readers or editors.\n\nGENERATE_RTF           = NO\n\n# The RTF_OUTPUT tag is used to specify where the RTF docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `rtf' will be used as the default path.\n\nRTF_OUTPUT             = rtf\n\n# If the COMPACT_RTF tag is set to YES Doxygen generates more compact\n# RTF documents. This may be useful for small projects and may help to\n# save some trees in general.\n\nCOMPACT_RTF            = NO\n\n# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated\n# will contain hyperlink fields. The RTF file will\n# contain links (just like the HTML output) instead of page references.\n# This makes the output suitable for online browsing using WORD or other\n# programs which support those fields.\n# Note: wordpad (write) and others do not support links.\n\nRTF_HYPERLINKS         = NO\n\n# Load stylesheet definitions from file. Syntax is similar to doxygen's\n# config file, i.e. a series of assignments. You only have to provide\n# replacements, missing definitions are set to their default value.\n\nRTF_STYLESHEET_FILE    =\n\n# Set optional variables used in the generation of an rtf document.\n# Syntax is similar to doxygen's config file.\n\nRTF_EXTENSIONS_FILE    =\n\n#---------------------------------------------------------------------------\n# configuration options related to the man page output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_MAN tag is set to YES (the default) Doxygen will\n# generate man pages\n\nGENERATE_MAN           = NO\n\n# The MAN_OUTPUT tag is used to specify where the man pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `man' will be used as the default path.\n\nMAN_OUTPUT             = man\n\n# The MAN_EXTENSION tag determines the extension that is added to\n# the generated man pages (default is the subroutine's section .3)\n\nMAN_EXTENSION          = .3\n\n# If the MAN_LINKS tag is set to YES and Doxygen generates man output,\n# then it will generate one additional man file for each entity\n# documented in the real man page(s). These additional files\n# only source the real man page, but without them the man command\n# would be unable to find the correct page. The default is NO.\n\nMAN_LINKS              = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the XML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_XML tag is set to YES Doxygen will\n# generate an XML file that captures the structure of\n# the code including all documentation.\n\nGENERATE_XML           = NO\n\n# The XML_OUTPUT tag is used to specify where the XML pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `xml' will be used as the default path.\n\nXML_OUTPUT             = xml\n\n# The XML_SCHEMA tag can be used to specify an XML schema,\n# which can be used by a validating XML parser to check the\n# syntax of the XML files.\n\nXML_SCHEMA             =\n\n# The XML_DTD tag can be used to specify an XML DTD,\n# which can be used by a validating XML parser to check the\n# syntax of the XML files.\n\nXML_DTD                =\n\n# If the XML_PROGRAMLISTING tag is set to YES Doxygen will\n# dump the program listings (including syntax highlighting\n# and cross-referencing information) to the XML output. Note that\n# enabling this will significantly increase the size of the XML output.\n\nXML_PROGRAMLISTING     = YES\n\n#---------------------------------------------------------------------------\n# configuration options for the AutoGen Definitions output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will\n# generate an AutoGen Definitions (see autogen.sf.net) file\n# that captures the structure of the code including all\n# documentation. Note that this feature is still experimental\n# and incomplete at the moment.\n\nGENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES Doxygen will\n# generate a Perl module file that captures the structure of\n# the code including all documentation. Note that this\n# feature is still experimental and incomplete at the\n# moment.\n\nGENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES Doxygen will generate\n# the necessary Makefile rules, Perl scripts and LaTeX code to be able\n# to generate PDF and DVI output from the Perl module output.\n\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be\n# nicely formatted so it can be parsed by a human reader.\n# This is useful\n# if you want to understand what is going on.\n# On the other hand, if this\n# tag is set to NO the size of the Perl module output will be much smaller\n# and Perl will parse it just the same.\n\nPERLMOD_PRETTY         = YES\n\n# The names of the make variables in the generated doxyrules.make file\n# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX.\n# This is useful so different doxyrules.make files included by the same\n# Makefile don't overwrite each other's variables.\n\nPERLMOD_MAKEVAR_PREFIX =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the preprocessor\n#---------------------------------------------------------------------------\n\n# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will\n# evaluate all C-preprocessor directives found in the sources and include\n# files.\n\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro\n# names in the source code. If set to NO (the default) only conditional\n# compilation will be performed. Macro expansion can be done in a controlled\n# way by setting EXPAND_ONLY_PREDEF to YES.\n\nMACRO_EXPANSION        = NO\n\n# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES\n# then the macro expansion is limited to the macros specified with the\n# PREDEFINED and EXPAND_AS_DEFINED tags.\n\nEXPAND_ONLY_PREDEF     = NO\n\n# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files\n# in the INCLUDE_PATH (see below) will be search if a #include is found.\n\nSEARCH_INCLUDES        = YES\n\n# The INCLUDE_PATH tag can be used to specify one or more directories that\n# contain include files that are not input files but should be processed by\n# the preprocessor.\n\nINCLUDE_PATH           = . include include/mysql sql\n\n# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard\n# patterns (like *.h and *.hpp) to filter out the header-files in the\n# directories. If left blank, the patterns specified with FILE_PATTERNS will\n# be used.\n\nINCLUDE_FILE_PATTERNS  =\n\n# The PREDEFINED tag can be used to specify one or more macro names that\n# are defined before the preprocessor is started (similar to the -D option of\n# gcc). The argument of the tag is a list of macros of the form: name\n# or name=definition (no spaces). If the definition and the = are\n# omitted =1 is assumed. To prevent a macro definition from being\n# undefined via #undef or recursively expanded use the := operator\n# instead of the = operator.\n\nPREDEFINED             = WITH_PERFSCHEMA_STORAGE_ENGINE HAVE_PSI_INTERFACE HAVE_PSI_1 HAVE_PSI_2 USE_PSI_1\n\n# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then\n# this tag can be used to specify a list of macro names that should be expanded.\n# The macro definition that is found in the sources will be used.\n# Use the PREDEFINED tag if you want to use a different macro definition.\n\nEXPAND_AS_DEFINED      =\n\n# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then\n# doxygen's preprocessor will remove all function-like macros that are alone\n# on a line, have an all uppercase name, and do not end with a semicolon. Such\n# function macros are typically used for boiler-plate code, and will confuse\n# the parser if not removed.\n\nSKIP_FUNCTION_MACROS   = YES\n\n#---------------------------------------------------------------------------\n# Configuration::additions related to external references\n#---------------------------------------------------------------------------\n\n# The TAGFILES option can be used to specify one or more tagfiles.\n# Optionally an initial location of the external documentation\n# can be added for each tagfile. The format of a tag file without\n# this location is as follows:\n#\n# TAGFILES = file1 file2 ...\n# Adding location for the tag files is done as follows:\n#\n# TAGFILES = file1=loc1 \"file2 = loc2\" ...\n# where \"loc1\" and \"loc2\" can be relative or absolute paths or\n# URLs. If a location is present for each tag, the installdox tool\n# does not have to be run to correct the links.\n# Note that each tag file must have a unique name\n# (where the name does NOT include the path)\n# If a tag file is not located in the directory in which doxygen\n# is run, you must also specify the path to the tagfile here.\n\nTAGFILES               =\n\n# When a file name is specified after GENERATE_TAGFILE, doxygen will create\n# a tag file that is based on the input files it reads.\n\nGENERATE_TAGFILE       =\n\n# If the ALLEXTERNALS tag is set to YES all external classes will be listed\n# in the class index. If set to NO only the inherited external classes\n# will be listed.\n\nALLEXTERNALS           = NO\n\n# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed\n# in the modules index. If set to NO, only the current project's groups will\n# be listed.\n\nEXTERNAL_GROUPS        = YES\n\n# The PERL_PATH should be the absolute path and name of the perl script\n# interpreter (i.e. the result of `which perl').\n\nPERL_PATH              = /usr/bin/perl\n\n#---------------------------------------------------------------------------\n# Configuration options related to the dot tool\n#---------------------------------------------------------------------------\n\n# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will\n# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base\n# or super classes. Setting the tag to NO turns the diagrams off. Note that\n# this option is superseded by the HAVE_DOT option below. This is only a\n# fallback. It is recommended to install and use dot, since it yields more\n# powerful graphs.\n\nCLASS_DIAGRAMS         = YES\n\n# You can define message sequence charts within doxygen comments using the \\msc\n# command. Doxygen will then run the mscgen tool (see\n# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the\n# documentation. The MSCGEN_PATH tag allows you to specify the directory where\n# the mscgen tool resides. If left empty the tool is assumed to be found in the\n# default search path.\n\nMSCGEN_PATH            =\n\n# If set to YES, the inheritance and collaboration graphs will hide\n# inheritance and usage relations if the target is undocumented\n# or is not a class.\n\nHIDE_UNDOC_RELATIONS   = YES\n\n# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is\n# available from the path. This tool is part of Graphviz, a graph visualization\n# toolkit from AT&T and Lucent Bell Labs. The other options in this section\n# have no effect if this option is set to NO (the default)\n\nHAVE_DOT               = NO\n\n# By default doxygen will write a font called FreeSans.ttf to the output\n# directory and reference it in all dot files that doxygen generates. This\n# font does not include all possible unicode characters however, so when you need\n# these (or just want a differently looking font) you can specify the font name\n# using DOT_FONTNAME. You need need to make sure dot is able to find the font,\n# which can be done by putting it in a standard location or by setting the\n# DOTFONTPATH environment variable or by setting DOT_FONTPATH to the directory\n# containing the font.\n\nDOT_FONTNAME           = FreeSans\n\n# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs.\n# The default size is 10pt.\n\nDOT_FONTSIZE           = 10\n\n# By default doxygen will tell dot to use the output directory to look for the\n# FreeSans.ttf font (which doxygen will put there itself). If you specify a\n# different font using DOT_FONTNAME you can set the path where dot\n# can find it using this tag.\n\nDOT_FONTPATH           =\n\n# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for each documented class showing the direct and\n# indirect inheritance relations. Setting this tag to YES will force the\n# the CLASS_DIAGRAMS tag to NO.\n\nCLASS_GRAPH            = YES\n\n# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for each documented class showing the direct and\n# indirect implementation dependencies (inheritance, containment, and\n# class references variables) of the class with other documented classes.\n\nCOLLABORATION_GRAPH    = YES\n\n# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for groups, showing the direct groups dependencies\n\nGROUP_GRAPHS           = YES\n\n# If the UML_LOOK tag is set to YES doxygen will generate inheritance and\n# collaboration diagrams in a style similar to the OMG's Unified Modeling\n# Language.\n\nUML_LOOK               = NO\n\n# If set to YES, the inheritance and collaboration graphs will show the\n# relations between templates and their instances.\n\nTEMPLATE_RELATIONS     = NO\n\n# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT\n# tags are set to YES then doxygen will generate a graph for each documented\n# file showing the direct and indirect include dependencies of the file with\n# other documented files.\n\nINCLUDE_GRAPH          = YES\n\n# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and\n# HAVE_DOT tags are set to YES then doxygen will generate a graph for each\n# documented header file showing the documented files that directly or\n# indirectly include this file.\n\nINCLUDED_BY_GRAPH      = YES\n\n# If the CALL_GRAPH and HAVE_DOT options are set to YES then\n# doxygen will generate a call dependency graph for every global function\n# or class method. Note that enabling this option will significantly increase\n# the time of a run. So in most cases it will be better to enable call graphs\n# for selected functions only using the \\callgraph command.\n\nCALL_GRAPH             = NO\n\n# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then\n# doxygen will generate a caller dependency graph for every global function\n# or class method. Note that enabling this option will significantly increase\n# the time of a run. So in most cases it will be better to enable caller\n# graphs for selected functions only using the \\callergraph command.\n\nCALLER_GRAPH           = NO\n\n# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen\n# will graphical hierarchy of all classes instead of a textual one.\n\nGRAPHICAL_HIERARCHY    = YES\n\n# If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES\n# then doxygen will show the dependencies a directory has on other directories\n# in a graphical way. The dependency relations are determined by the #include\n# relations between the files in the directories.\n\nDIRECTORY_GRAPH        = YES\n\n# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n# generated by dot. Possible values are png, jpg, or gif\n# If left blank png will be used.\n\nDOT_IMAGE_FORMAT       = png\n\n# The tag DOT_PATH can be used to specify the path where the dot tool can be\n# found. If left blank, it is assumed the dot tool can be found in the path.\n\nDOT_PATH               =\n\n# The DOTFILE_DIRS tag can be used to specify one or more directories that\n# contain dot files that are included in the documentation (see the\n# \\dotfile command).\n\nDOTFILE_DIRS           =\n\n# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of\n# nodes that will be shown in the graph. If the number of nodes in a graph\n# becomes larger than this value, doxygen will truncate the graph, which is\n# visualized by representing a node as a red box. Note that doxygen if the\n# number of direct children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note\n# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n\nDOT_GRAPH_MAX_NODES    = 50\n\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the\n# graphs generated by dot. A depth value of 3 means that only nodes reachable\n# from the root by following a path via at most 3 edges will be shown. Nodes\n# that lay further from the root node will be omitted. Note that setting this\n# option to 1 or 2 may greatly reduce the computation time needed for large\n# code bases. Also note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n\nMAX_DOT_GRAPH_DEPTH    = 0\n\n# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent\n# background. This is disabled by default, because dot on Windows does not\n# seem to support this out of the box. Warning: Depending on the platform used,\n# enabling this option may lead to badly anti-aliased labels on the edges of\n# a graph (i.e. they become hard to read).\n\nDOT_TRANSPARENT        = NO\n\n# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output\n# files in one run (i.e. multiple -o and -T options on the command line). This\n# makes dot run faster, but since only newer versions of dot (>1.8.10)\n# support this, this feature is disabled by default.\n\nDOT_MULTI_TARGETS      = NO\n\n# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will\n# generate a legend page explaining the meaning of the various boxes and\n# arrows in the dot generated graphs.\n\nGENERATE_LEGEND        = YES\n\n# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will\n# remove the intermediate dot files that are used to generate\n# the various graphs.\n\nDOT_CLEANUP            = YES\n"
        },
        {
          "name": "INSTALL-SOURCE",
          "type": "blob",
          "size": 296.5634765625,
          "content": "\nChapter 2. Installing and Upgrading MySQL\n\n   This chapter describes how to obtain and install MySQL. A summary\n   of the procedure follows and later sections provide the details.\n   If you plan to upgrade an existing version of MySQL to a newer\n   version rather than install MySQL for the first time, see Section\n   2.11.1, \"Upgrading MySQL,\" for information about upgrade\n   procedures and about issues that you should consider before\n   upgrading.\n\n   If you are interested in migrating to MySQL from another database\n   system, you may wish to read Section B.8, \"MySQL 5.6 FAQ:\n   Migration,\" which contains answers to some common questions\n   concerning migration issues.\n\n    1. Determine whether MySQL runs and is supported on your\n       platform.\n       Please note that not all platforms are equally suitable for\n       running MySQL, and that not all platforms on which MySQL is\n       known to run are officially supported by Oracle Corporation:\n\n    2. Choose which distribution to install.\n       Several versions of MySQL are available, and most are\n       available in several distribution formats. You can choose from\n       pre-packaged distributions containing binary (precompiled)\n       programs or source code. When in doubt, use a binary\n       distribution. We also provide public access to our current\n       source tree for those who want to see our most recent\n       developments and help us test new code. To determine which\n       version and type of distribution you should use, see Section\n       2.1.2, \"Choosing Which MySQL Distribution to Install.\"\n\n    3. Download the distribution that you want to install.\n       For instructions, see Section 2.1.3, \"How to Get MySQL.\" To\n       verify the integrity of the distribution, use the instructions\n       in Section 2.1.4, \"Verifying Package Integrity Using MD5\n       Checksums or GnuPG.\"\n\n    4. Install the distribution.\n       To install MySQL from a binary distribution, use the\n       instructions in Section 2.2, \"Installing MySQL from Generic\n       Binaries on Unix/Linux.\"\n       To install MySQL from a source distribution or from the\n       current development source tree, use the instructions in\n       Section 2.9, \"Installing MySQL from Source.\"\n\n    5. Perform any necessary postinstallation setup.\n       After installing MySQL, read Section 2.10, \"Postinstallation\n       Setup and Testing.\" This section contains important\n       information about making sure the MySQL server is working\n       properly. It also describes how to secure the initial MySQL\n       user accounts, which have no passwords until you assign\n       passwords. The section applies whether you install MySQL using\n       a binary or source distribution.\n\n    6. If you want to run the MySQL benchmark scripts, Perl support\n       for MySQL must be available. See Section 2.13, \"Perl\n       Installation Notes.\"\n\n   Instructions for installing MySQL on different platforms and\n   environments is available on a platform by platform basis:\n\n     * Unix, Linux, FreeBSD\n       For instructions on installing MySQL on most Linux and Unix\n       platforms using a generic binary (for example, a .tar.gz\n       package), see Section 2.2, \"Installing MySQL from Generic\n       Binaries on Unix/Linux.\"\n       For information on building MySQL entirely from the source\n       code distributions or the source code repositories, see\n       Section 2.9, \"Installing MySQL from Source\"\n       For specific platform help on installation, configuration, and\n       building from source see the corresponding platform section:\n\n          + Linux, including notes on distribution specific methods,\n            see Section 2.5, \"Installing MySQL on Linux.\"\n\n          + Solaris and OpenSolaris, including PKG and IPS formats,\n            see Section 2.6, \"Installing MySQL on Solaris and\n            OpenSolaris.\"\n\n          + IBM AIX, see Section 2.6, \"Installing MySQL on Solaris\n            and OpenSolaris.\"\n\n          + Hewlett-Packard HP-UX, including the DEPOT package\n            format, see Section 2.7, \"Installing MySQL on HP-UX.\"\n\n          + FreeBSD, see Section 2.8, \"Installing MySQL on FreeBSD.\"\n\n     * Microsoft Windows\n       For instructions on installing MySQL on Microsoft Windows,\n       using either a Zipped binary or an MSI package, see Section\n       2.3, \"Installing MySQL on Microsoft Windows.\"\n       For details and instructions on building MySQL from source\n       code using Microsoft Visual Studio, see Section 2.9,\n       \"Installing MySQL from Source.\"\n\n     * Mac OS X\n       For installation on Mac OS X, including using both the binary\n       package and native PKG formats, see Section 2.4, \"Installing\n       MySQL on Mac OS X.\"\n       For information on making use of the MySQL Startup Item to\n       automatically start and stop MySQL, see Section 2.4.3,\n       \"Installing the MySQL Startup Item.\"\n       For information on the MySQL Preference Pane, see Section\n       2.4.4, \"Installing and Using the MySQL Preference Pane.\"\n\n2.1. General Installation Guidance\n\n   The immediately following sections contain the information\n   necessary to choose, download, and verify your distribution. The\n   instructions in later sections of the chapter describe how to\n   install the distribution that you choose. For binary\n   distributions, see the instructions at Section 2.2, \"Installing\n   MySQL from Generic Binaries on Unix/Linux\" or the corresponding\n   section for your platform if available. To build MySQL from\n   source, use the instructions in Section 2.9, \"Installing MySQL\n   from Source.\"\n\n2.1.1. Operating Systems Supported by MySQL Community Server\n\n   This section lists the operating systems on which MySQL Community\n   Server is known to run.\n   Important\n\n   Oracle Corporation does not necessarily provide official support\n   for all the platforms listed in this section. For information\n   about those platforms that are officially supported, see\n   http://www.mysql.com/support/supportedplatforms.html on the MySQL\n   Web site.\n\n   We use CMake, so it is possible to port MySQL to all modern\n   systems that have a C++ compiler and a working implementation of\n   POSIX threads. (Thread support is needed for the server. To\n   compile only the client code, the only requirement is a C++\n   compiler.)\n\n   MySQL has been reported to compile successfully on the following\n   combinations of operating system and thread package.\n\n     * FreeBSD 5.x and up with native threads. See Section 2.8,\n       \"Installing MySQL on FreeBSD.\"\n\n     * HP-UX 11.x with the native threads. See Section 2.7,\n       \"Installing MySQL on HP-UX.\"\n\n     * Linux. Builds on all recent Linux distributions based on the\n       2.6 kernel. See Section 2.5, \"Installing MySQL on Linux.\"\n\n     * Mac OS X. See Section 2.4, \"Installing MySQL on Mac OS X.\"\n\n     * Solaris 2.8 on SPARC and x86, including support for native\n       threads. See Section 2.6, \"Installing MySQL on Solaris and\n       OpenSolaris.\"\n\n     * Windows XP, Windows Vista, Windows Server 2003, and Windows\n       Server 2008. See Section 2.3, \"Installing MySQL on Microsoft\n       Windows.\"\n\n   MySQL has also been known to run on other systems in the past. See\n   Section 2.1, \"General Installation Guidance.\" Some porting effort\n   might be required for current versions of MySQL on these systems.\n\n   Not all platforms are equally well-suited for running MySQL. How\n   well a certain platform is suited for a high-load mission-critical\n   MySQL server is determined by the following factors:\n\n     * General stability of the thread library. A platform may have\n       an excellent reputation otherwise, but MySQL is only as stable\n       as the thread library it calls, even if everything else is\n       perfect.\n\n     * The capability of the kernel and the thread library to take\n       advantage of symmetric multi-processor (SMP) systems. In other\n       words, when a process creates a thread, it should be possible\n       for that thread to run on a CPU different from the original\n       process.\n\n     * The capability of the kernel and the thread library to run\n       many threads that acquire and release a mutex over a short\n       critical region frequently without excessive context switches.\n       If the implementation of pthread_mutex_lock() is too anxious\n       to yield CPU time, this hurts MySQL tremendously. If this\n       issue is not taken care of, adding extra CPUs actually makes\n       MySQL slower.\n\n     * General file system stability and performance.\n\n     * Table size. If your tables are large, performance is affected\n       by the ability of the file system to deal with large files and\n       dealing with them efficiently.\n\n     * Our level of expertise here at Oracle Corporation with the\n       platform. If we know a platform well, we enable\n       platform-specific optimizations and fixes at compile time. We\n       can also provide advice on configuring your system optimally\n       for MySQL.\n\n     * The amount of testing we have done internally for similar\n       configurations.\n\n     * The number of users that have run MySQL successfully on the\n       platform in similar configurations. If this number is high,\n       the likelihood of encountering platform-specific surprises is\n       much smaller.\n\n2.1.2. Choosing Which MySQL Distribution to Install\n\n   When preparing to install MySQL, you should decide which version\n   to use. MySQL development occurs in several release series, and\n   you can pick the one that best fits your needs. After deciding\n   which version to install, you can choose a distribution format.\n   Releases are available in binary or source format.\n\n2.1.2.1. Choosing Which Version of MySQL to Install\n\n   The first decision to make is whether you want to use a production\n   (stable) release or a development release. In the MySQL\n   development process, multiple release series co-exist, each at a\n   different stage of maturity.\n\nProduction Releases\n\n\n     * MySQL 5.5: Latest General Availability (Production) release\n\n     * MySQL 5.1: Previous stable (production-quality) release\n\n     * MySQL 5.0: Older stable release nearing the end of the product\n       lifecycle\n\nDevelopment Release\n\n\n     * MySQL 5.6: Current release under development (pre-Production)\n\n   MySQL 4.1, 4.0, and 3.23 are old releases that are no longer\n   supported.\n\n   See http://www.mysql.com/about/legal/lifecycle/ for information\n   about support policies and schedules.\n\n   Normally, if you are beginning to use MySQL for the first time or\n   trying to port it to some system for which there is no binary\n   distribution, use the most recent General Availability series\n   listed in the preceding descriptions. All MySQL releases, even\n   those from development series, are checked with the MySQL\n   benchmarks and an extensive test suite before being issued.\n\n   If you are running an older system and want to upgrade, but do not\n   want to take the chance of having a nonseamless upgrade, you\n   should upgrade to the latest version in the same release series\n   you are using (where only the last part of the version number is\n   newer than yours). We have tried to fix only fatal bugs and make\n   only small, relatively \"safe\" changes to that version.\n\n   If you want to use new features not present in the production\n   release series, you can use a version from a development series.\n   Be aware that development releases are not as stable as production\n   releases.\n\n   We do not use a complete code freeze because this prevents us from\n   making bugfixes and other fixes that must be done. We may add\n   small things that should not affect anything that currently works\n   in a production release. Naturally, relevant bugfixes from an\n   earlier series propagate to later series.\n\n   If you want to use the very latest sources containing all current\n   patches and bugfixes, you can use one of our source code\n   repositories (see Section 2.9.3, \"Installing MySQL from a\n   Development Source Tree\"). These are not \"releases\" as such, but\n   are available as previews of the code on which future releases are\n   to be based.\n\n   The naming scheme in MySQL 5.6 uses release names that consist of\n   three numbers and a suffix; for example, mysql-5.6.1-m1. The\n   numbers within the release name are interpreted as follows:\n\n     * The first number (5) is the major version and describes the\n       file format. All MySQL 5 releases have the same file format.\n\n     * The second number (6) is the release level. Taken together,\n       the major version and release level constitute the release\n       series number.\n\n     * The third number (1) is the version number within the release\n       series. This is incremented for each new release. Usually you\n       want the latest version for the series you have chosen.\n\n   For each minor update, the last number in the version string is\n   incremented. When there are major new features or minor\n   incompatibilities with previous versions, the second number in the\n   version string is incremented. When the file format changes, the\n   first number is increased.\n\n   Release names also include a suffix to indicates the stability\n   level of the release. Releases within a series progress through a\n   set of suffixes to indicate how the stability level improves. The\n   possible suffixes are:\n\n     * mN (for example, m1, m2, m3, ...) indicate a milestone number.\n       MySQL development uses a milestone model, in which each\n       milestone proceeds through a small number of versions with a\n       tight focus on a small subset of thoroughly tested features.\n       Following the releases for one milestone, development proceeds\n       with another small number of releases that focuses on the next\n       small set of features, also thoroughly tested. Features within\n       milestone releases may be considered to be of pre-production\n       quality.\n\n     * rc indicates a Release Candidate. Release candidates are\n       believed to be stable, having passed all of MySQL's internal\n       testing, and with all known fatal runtime bugs fixed. However,\n       the release has not been in widespread use long enough to know\n       for sure that all bugs have been identified. Only minor fixes\n       are added.\n\n     * If there is no suffix, it indicates that the release is a\n       General Availability (GA) or Production release. GA releases\n       are stable, having successfully passed through all earlier\n       release stages and are believed to be reliable, free of\n       serious bugs, and suitable for use in production systems. Only\n       critical bugfixes are applied to the release.\n\n   All releases of MySQL are run through our standard tests and\n   benchmarks to ensure that they are relatively safe to use. Because\n   the standard tests are extended over time to check for all\n   previously found bugs, the test suite keeps getting better.\n\n   All releases have been tested at least with these tools:\n\n     * An internal test suite.  The mysql-test directory contains an\n       extensive set of test cases. We run these tests for every\n       server binary. See Section 22.1.2, \"The MySQL Test Suite,\" for\n       more information about this test suite.\n\n     * The MySQL benchmark suite.  This suite runs a range of common\n       queries. It is also a test to determine whether the latest\n       batch of optimizations actually made the code faster. See\n       Section 8.12.2, \"The MySQL Benchmark Suite.\"\n\n   We also perform additional integration and nonfunctional testing\n   of the latest MySQL version in our internal production\n   environment. Integration testing is done with different\n   connectors, storage engines, replication modes, backup,\n   partitioning, stored programs, and so forth in various\n   combinations. Additional nonfunctional testing is done in areas of\n   performance, concurrency, stress, high volume, upgrade and\n   downgrade.\n\n2.1.2.2. Choosing a Distribution Format\n\n   After choosing which version of MySQL to install, you should\n   decide whether to use a binary distribution or a source\n   distribution. In most cases, you should probably use a binary\n   distribution, if one exists for your platform. Binary\n   distributions are available in native format for many platforms,\n   such as RPM files for Linux or PKG package installers for Mac OS X\n   or Solaris. Distributions also are available as Zip archives or\n   compressed tar files.\n\n   Reasons to choose a binary distribution include the following:\n\n     * Binary distributions generally are easier to install than\n       source distributions.\n\n     * To satisfy different user requirements, we provide several\n       servers in binary distributions. mysqld is an optimized server\n       that is a smaller, faster binary. mysqld-debug is compiled\n       with debugging support.\n       Each of these servers is compiled from the same source\n       distribution, though with different configuration options. All\n       native MySQL clients can connect to servers from either MySQL\n       version.\n\n   Under some circumstances, you may be better off installing MySQL\n   from a source distribution:\n\n     * You want to install MySQL at some explicit location. The\n       standard binary distributions are ready to run at any\n       installation location, but you might require even more\n       flexibility to place MySQL components where you want.\n\n     * You want to configure mysqld to ensure that features are\n       available that might not be included in the standard binary\n       distributions. Here is a list of the most common extra options\n       that you may want to use to ensure feature availability:\n\n          + -DWITH_LIBWRAP=1 for TCP wrappers support.\n\n          + -DWITH_ZLIB={system|bundled} for features that depend on\n            compression\n\n          + -DWITH_DEBUG=1 for debugging support\n\n     * You want to configure mysqld without some features that are\n       included in the standard binary distributions. For example,\n       distributions normally are compiled with support for all\n       character sets. If you want a smaller MySQL server, you can\n       recompile it with support for only the character sets you\n       need.\n\n     * You want to use the latest sources from one of the Bazaar\n       repositories to have access to all current bugfixes. For\n       example, if you have found a bug and reported it to the MySQL\n       development team, the bugfix is committed to the source\n       repository and you can access it there. The bugfix does not\n       appear in a release until a release actually is issued.\n\n     * You want to read (or modify) the C and C++ code that makes up\n       MySQL. For this purpose, you should get a source distribution,\n       because the source code is always the ultimate manual.\n\n     * Source distributions contain more tests and examples than\n       binary distributions.\n\n2.1.2.3. How and When Updates Are Released\n\n   MySQL is evolving quite rapidly and we want to share new\n   developments with other MySQL users. We try to produce a new\n   release whenever we have new and useful features that others also\n   seem to have a need for.\n\n   We also try to help users who request features that are easy to\n   implement. We take note of what our licensed users want, and we\n   especially take note of what our support customers want and try to\n   help them in this regard.\n\n   No one is required to download a new release. The Release Notes\n   (http://dev.mysql.com/doc/relnotes/mysql/5.6/en/) help you\n   determine whether the new release has something you really want.\n\n   We use the following policy when updating MySQL:\n\n     * Enterprise Server releases are meant to appear every 18\n       months, supplemented by quarterly service packs and monthly\n       rapid updates. Community Server releases are meant to appear 2\n       to 3 times per year.\n\n     * Releases are issued within each series. For each release, the\n       last number in the version is one more than the previous\n       release within the same series.\n\n     * Binary distributions for some platforms are made by us for\n       major releases. Other people may make binary distributions for\n       other systems, but probably less frequently.\n\n     * We make fixes available as soon as we have identified and\n       corrected small or noncritical but annoying bugs. The fixes\n       are available in source form immediately from our public\n       Bazaar repositories, and are included in the next release.\n\n     * If by any chance a security vulnerability or critical bug is\n       found in a release, our policy is to fix it in a new release\n       as soon as possible. (We would like other companies to do\n       this, too!)\n\n2.1.3. How to Get MySQL\n\n   Check our downloads page at http://dev.mysql.com/downloads/ for\n   information about the current version of MySQL and for downloading\n   instructions. For a complete up-to-date list of MySQL download\n   mirror sites, see http://dev.mysql.com/downloads/mirrors.html. You\n   can also find information there about becoming a MySQL mirror site\n   and how to report a bad or out-of-date mirror.\n\n   To obtain the latest development source, see Section 2.9.3,\n   \"Installing MySQL from a Development Source Tree.\"\n\n2.1.4. Verifying Package Integrity Using MD5 Checksums or GnuPG\n\n   After you have downloaded the MySQL package that suits your needs\n   and before you attempt to install it, you should make sure that it\n   is intact and has not been tampered with. There are three means of\n   integrity checking:\n\n     * MD5 checksums\n\n     * Cryptographic signatures using GnuPG, the GNU Privacy Guard\n\n     * For RPM packages, the built-in RPM integrity verification\n       mechanism\n\n   The following sections describe how to use these methods.\n\n   If you notice that the MD5 checksum or GPG signatures do not\n   match, first try to download the respective package one more time,\n   perhaps from another mirror site.\n\n2.1.4.1. Verifying the MD5 Checksum\n\n   After you have downloaded a MySQL package, you should make sure\n   that its MD5 checksum matches the one provided on the MySQL\n   download pages. Each package has an individual checksum that you\n   can verify with the following command, where package_name is the\n   name of the package you downloaded:\nshell> md5sum package_name\n\n   Example:\nshell> md5sum mysql-standard-5.6.11-linux-i686.tar.gz\naaab65abbec64d5e907dcd41b8699945  mysql-standard-5.6.11-linux-i686.ta\nr.gz\n\n   You should verify that the resulting checksum (the string of\n   hexadecimal digits) matches the one displayed on the download page\n   immediately below the respective package.\n   Note\n\n   Make sure to verify the checksum of the archive file (for example,\n   the .zip or .tar.gz file) and not of the files that are contained\n   inside of the archive.\n\n   Note that not all operating systems support the md5sum command. On\n   some, it is simply called md5, and others do not ship it at all.\n   On Linux, it is part of the GNU Text Utilities package, which is\n   available for a wide range of platforms. You can download the\n   source code from http://www.gnu.org/software/textutils/ as well.\n   If you have OpenSSL installed, you can use the command openssl md5\n   package_name instead. A Windows implementation of the md5 command\n   line utility is available from http://www.fourmilab.ch/md5/.\n   winMd5Sum is a graphical MD5 checking tool that can be obtained\n   from http://www.nullriver.com/index/products/winmd5sum.\n\n2.1.4.2. Signature Checking Using GnuPG\n\n   Another method of verifying the integrity and authenticity of a\n   package is to use cryptographic signatures. This is more reliable\n   than using MD5 checksums, but requires more work.\n\n   We sign MySQL downloadable packages with GnuPG (GNU Privacy\n   Guard). GnuPG is an Open Source alternative to the well-known\n   Pretty Good Privacy (PGP) by Phil Zimmermann. See\n   http://www.gnupg.org/ for more information about GnuPG and how to\n   obtain and install it on your system. Most Linux distributions\n   ship with GnuPG installed by default. For more information about\n   GnuPG, see http://www.openpgp.org/.\n\n   To verify the signature for a specific package, you first need to\n   obtain a copy of our public GPG build key, which you can download\n   from http://pgp.mit.com/. The key that you want to obtain is named\n   mysql-build@oss.oracle.com. Alternatively, you can cut and paste\n   the key directly from the following text:\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: PGP Universal 2.9.1 (Build 347)\n\nmQGiBD4+owwRBAC14GIfUfCyEDSIePvEW3SAFUdJBtoQHH/nJKZyQT7h9bPlUWC3\nRODjQReyCITRrdwyrKUGku2FmeVGwn2u2WmDMNABLnpprWPkBdCk96+OmSLN9brZ\nfw2vOUgCmYv2hW0hyDHuvYlQA/BThQoADgj8AW6/0Lo7V1W9/8VuHP0gQwCgvzV3\nBqOxRznNCRCRxAuAuVztHRcEAJooQK1+iSiunZMYD1WufeXfshc57S/+yeJkegNW\nhxwR9pRWVArNYJdDRT+rf2RUe3vpquKNQU/hnEIUHJRQqYHo8gTxvxXNQc7fJYLV\nK2HtkrPbP72vwsEKMYhhr0eKCbtLGfls9krjJ6sBgACyP/Vb7hiPwxh6rDZ7ITnE\nkYpXBACmWpP8NJTkamEnPCia2ZoOHODANwpUkP43I7jsDmgtobZX9qnrAXw+uNDI\nQJEXM6FSbi0LLtZciNlYsafwAPEOMDKpMqAK6IyisNtPvaLd8lH0bPAnWqcyefep\nrv0sxxqUEMcM3o7wwgfN83POkDasDbs3pjwPhxvhz6//62zQJ7Q2TXlTUUwgUmVs\nZWFzZSBFbmdpbmVlcmluZyA8bXlzcWwtYnVpbGRAb3NzLm9yYWNsZS5jb20+iGYE\nExECACYCGyMGCwkIBwMCBBUCCAMEFgIDAQIeAQIXgAUCTnc+KgUJE/sCFQAKCRCM\ncY07UHLh9SbMAJ4l1+qBz2BZNSGCZwwA6YbhGPC7FwCgp8z5TzIw4YQuL5NGJ/sy\n0oSazqmJASIEEAECAAwFAk53QS4FAwASdQAACgkQlxC4m8pXrXwJ8Qf/be/UO9mq\nfoc2sMyhwMpN4/fdBWwfLkA12FXQDOQMvwH9HsmEjnfUgYKXschZRi+DuHXe1P7l\n8G2aQLubhBsQf9ejKvRFTzuWMQkdIq+6Koulxv6ofkCcv3d1xtO2W7nb5yxcpVBP\nrRfGFGebJvZa58DymCNgyGtAU6AOz4veavNmI2+GIDQsY66+tYDvZ+CxwzdYu+HD\nV9HmrJfc6deM0mnBn7SRjqzxJPgoTQhihTav6q/R5/2p5NvQ/H84OgS6GjosfGc2\nduUDzCP/kheMRKfzuyKCOHQPtJuIj8++gfpHtEU7IDUX1So3c9n0PdpeBvclsDbp\nRnCNxQWU4mBot7kCDQQ+PqMdEAgA7+GJfxbMdY4wslPnjH9rF4N2qfWsEN/lxaZo\nJYc3a6M02WCnHl6ahT2/tBK2w1QI4YFteR47gCvtgb6O1JHffOo2HfLmRDRiRjd1\nDTCHqeyX7CHhcghj/dNRlW2Z0l5QFEcmV9U0Vhp3aFfWC4Ujfs3LU+hkAWzE7zaD\n5cH9J7yv/6xuZVw411x0h4UqsTcWMu0iM1BzELqX1DY7LwoPEb/O9Rkbf4fmLe11\nEzIaCa4PqARXQZc4dhSinMt6K3X4BrRsKTfozBu74F47D8Ilbf5vSYHbuE5p/1oI\nDznkg/p8kW+3FxuWrycciqFTcNz215yyX39LXFnlLzKUb/F5GwADBQf+Lwqqa8CG\nrRfsOAJxim63CHfty5mUc5rUSnTslGYEIOCR1BeQauyPZbPDsDD9MZ1ZaSafanFv\nwFG6Llx9xkU7tzq+vKLoWkm4u5xf3vn55VjnSd1aQ9eQnUcXiL4cnBGoTbOWI39E\ncyzgslzBdC++MPjcQTcA7p6JUVsP6oAB3FQWg54tuUo0Ec8bsM8b3Ev42LmuQT5N\ndKHGwHsXTPtl0klk4bQk4OajHsiy1BMahpT27jWjJlMiJc+IWJ0mghkKHt926s/y\nmfdf5HkdQ1cyvsz5tryVI3Fx78XeSYfQvuuwqp2H139pXGEkg0n6KdUOetdZWhe7\n0YGNPw1yjWJT1IhUBBgRAgAMBQJOdz3tBQkT+wG4ABIHZUdQRwABAQkQjHGNO1By\n4fUUmwCbBYr2+bBEn/L2BOcnw9Z/QFWuhRMAoKVgCFm5fadQ3Afi+UQlAcOphrnJ\n=Eto8\n-----END PGP PUBLIC KEY BLOCK-----\n\n   To import the build key into your personal public GPG keyring, use\n   gpg --import. For example, if you have saved the key in a file\n   named mysql_pubkey.asc, the import command looks like this:\nshell> gpg --import mysql_pubkey.asc\ngpg: key 5072E1F5: public key \"MySQL Release Engineering\n<mysql-build@oss.oracle.com>\" imported\ngpg: Total number processed: 1\ngpg:               imported: 1\ngpg: no ultimately trusted keys found\n\n   You can also download the key from the public keyserver using the\n   public key id, 5072E1F5:\nshell> gpg --recv-keys 5072E1F5\ngpg: requesting key 5072E1F5 from hkp server keys.gnupg.net\ngpg: key 5072E1F5: \"MySQL Release Engineering <mysql-build@oss.oracle\n.com>\"\n1 new user ID\ngpg: key 5072E1F5: \"MySQL Release Engineering <mysql-build@oss.oracle\n.com>\"\n53 new signatures\ngpg: no ultimately trusted keys found\ngpg: Total number processed: 1\ngpg:           new user IDs: 1\ngpg:         new signatures: 53\n\n   If you want to import the key into your RPM configuration to\n   validate RPM install packages, you should be able to import the\n   key directly:\nshell> rpm --import mysql_pubkey.asc\n\n   If you experience problems, try exporting the key from gpg and\n   importing:\nshell> gpg --export -a 5072e1f5 > 5072e1f5.asc\nshell> rpm --import 5072e1f5.asc\n\n   Alternatively, rpm also supports loading the key directly from a\n   URL, and you cas use this manual page:\nshell> rpm --import http://dev.mysql.com/doc/refman/5.6/en/checking-g\npg-signature.html\n\n   After you have downloaded and imported the public build key,\n   download your desired MySQL package and the corresponding\n   signature, which also is available from the download page. The\n   signature file has the same name as the distribution file with an\n   .asc extension, as shown by the examples in the following table.\n\n   Table 2.1. MySQL Package and Signature Files\n       File Type                      File Name\n   Distribution file mysql-standard-5.6.11-linux-i686.tar.gz\n   Signature file    mysql-standard-5.6.11-linux-i686.tar.gz.asc\n\n   Make sure that both files are stored in the same directory and\n   then run the following command to verify the signature for the\n   distribution file:\nshell> gpg --verify package_name.asc\n\n   Example:\nshell> gpg --verify mysql-standard-5.6.11-linux-i686.tar.gz.asc\ngpg: Signature made Tue 01 Feb 2011 02:38:30 AM CST using DSA key ID\n5072E1F5\ngpg: Good signature from \"MySQL Release Engineering <mysql-build@oss.\noracle.com>\"\n\n   The Good signature message indicates that everything is all right.\n   You can ignore any insecure memory warning you might obtain.\n\n   See the GPG documentation for more information on how to work with\n   public keys.\n\n2.1.4.3. Signature Checking Using RPM\n\n   For RPM packages, there is no separate signature. RPM packages\n   have a built-in GPG signature and MD5 checksum. You can verify a\n   package by running the following command:\nshell> rpm --checksig package_name.rpm\n\n   Example:\nshell> rpm --checksig MySQL-server-5.6.11-0.glibc23.i386.rpm\nMySQL-server-5.6.11-0.glibc23.i386.rpm: md5 gpg OK\n\n   Note\n\n   If you are using RPM 4.1 and it complains about (GPG) NOT OK\n   (MISSING KEYS: GPG#5072e1f5), even though you have imported the\n   MySQL public build key into your own GPG keyring, you need to\n   import the key into the RPM keyring first. RPM 4.1 no longer uses\n   your personal GPG keyring (or GPG itself). Rather, RPM maintains a\n   separate keyring because it is a system-wide application and a\n   user's GPG public keyring is a user-specific file. To import the\n   MySQL public key into the RPM keyring, first obtain the key as\n   described in Section 2.1.4.2, \"Signature Checking Using GnuPG.\"\n   Then use rpm --import to import the key. For example, if you have\n   saved the public key in a file named mysql_pubkey.asc, import it\n   using this command:\nshell> rpm --import mysql_pubkey.asc\n\n   If you need to obtain the MySQL public key, see Section 2.1.4.2,\n   \"Signature Checking Using GnuPG.\"\n\n2.1.5. Installation Layouts\n\n   The installation layout differs for different installation types\n   (for example, native packages, binary tarballs, and source\n   tarballs), which can lead to confusion when managing different\n   systems or using different installation sources. The individual\n   layouts are given in the corresponding installation type or\n   platform chapter, as described following. Note that the layout of\n   installations from vendors other than Oracle may differ from these\n   layouts.\n\n     * Section 2.3.1, \"MySQL Installation Layout on Microsoft\n       Windows\"\n\n     * Section 2.9.1, \"MySQL Layout for Source Installation\"\n\n     * Section 2.2, \"MySQL Installation Layout for Generic Unix/Linux\n       Binary Package\"\n\n     * Section 2.5.1, \"MySQL Installation Layout for Linux RPM\"\n\n     * Section 2.4.2, \"MySQL Installation Layout on Mac OS X\"\n\n2.1.6. Compiler-Specific Build Characteristics\n\n   In some cases, the compiler used to build MySQL affects the\n   features available for use. The notes in this section apply for\n   binary distributions provided by Oracle Corporation or that you\n   compile yourself from source.\n\n   icc (Intel C++ Compiler) Builds\n\n   A server built with icc has these characteristics:\n\n     * SSL support is not included.\n\n2.2. Installing MySQL from Generic Binaries on Unix/Linux\n\n   Oracle provides a set of binary distributions of MySQL. These\n   include binary distributions in the form of compressed tar files\n   (files with a .tar.gz extension) for a number of platforms, as\n   well as binaries in platform-specific package formats for selected\n   platforms.\n\n   This section covers the installation of MySQL from a compressed\n   tar file binary distribution. For other platform-specific package\n   formats, see the other platform-specific sections. For example,\n   for Windows distributions, see Section 2.3, \"Installing MySQL on\n   Microsoft Windows.\"\n\n   To obtain MySQL, see Section 2.1.3, \"How to Get MySQL.\"\n\n   MySQL compressed tar file binary distributions have names of the\n   form mysql-VERSION-OS.tar.gz, where VERSION is a number (for\n   example, 5.6.11), and OS indicates the type of operating system\n   for which the distribution is intended (for example, pc-linux-i686\n   or winx64).\n\n   To install MySQL from a compressed tar file binary distribution,\n   your system must have GNU gunzip to uncompress the distribution\n   and a reasonable tar to unpack it. If your tar program supports\n   the z option, it can both uncompress and unpack the file.\n\n   GNU tar is known to work. The standard tar provided with some\n   operating systems is not able to unpack the long file names in the\n   MySQL distribution. You should download and install GNU tar, or if\n   available, use a preinstalled version of GNU tar. Usually this is\n   available as gnutar, gtar, or as tar within a GNU or Free Software\n   directory, such as /usr/sfw/bin or /usr/local/bin. GNU tar is\n   available from http://www.gnu.org/software/tar/.\n   Warning\n\n   If you have previously installed MySQL using your operating system\n   native package management system, such as yum or apt-get, you may\n   experience problems installing using a native binary. Make sure\n   your previous MySQL previous installation has been removed\n   entirely (using your package management system), and that any\n   additional files, such as old versions of your data files, have\n   also been removed. You should also check the existence of\n   configuration files such as /etc/my.cnf or the /etc/mysql\n   directory have been deleted.\n\n   If you run into problems and need to file a bug report, please use\n   the instructions in Section 1.7, \"How to Report Bugs or Problems.\"\n\n   On Unix, to install a compressed tar file binary distribution,\n   unpack it at the installation location you choose (typically\n   /usr/local/mysql). This creates the directories shown in the\n   following table.\n\n   Table 2.2. MySQL Installation Layout for Generic Unix/Linux Binary\n   Package\n   Directory Contents of Directory\n   bin Client programs and the mysqld server\n   data Log files, databases\n   docs Manual in Info format\n   man Unix manual pages\n   include Include (header) files\n   lib Libraries\n   scripts mysql_install_db\n   share Miscellaneous support files, including error messages,\n   sample configuration files, SQL for database installation\n   sql-bench Benchmarks\n\n   Debug versions of the mysqld binary are available as mysqld-debug.\n   To compile your own debug version of MySQL from a source\n   distribution, use the appropriate configuration options to enable\n   debugging support. For more information on compiling from source,\n   see Section 2.9, \"Installing MySQL from Source.\"\n\n   To install and use a MySQL binary distribution, the basic command\n   sequence looks like this:\nshell> groupadd mysql\nshell> useradd -r -g mysql mysql\nshell> cd /usr/local\nshell> tar zxvf /path/to/mysql-VERSION-OS.tar.gz\nshell> ln -s full-path-to-mysql-VERSION-OS mysql\nshell> cd mysql\nshell> chown -R mysql .\nshell> chgrp -R mysql .\nshell> scripts/mysql_install_db --user=mysql\nshell> chown -R root .\nshell> chown -R mysql data\n# Next command is optional\nshell> cp support-files/my-medium.cnf /etc/my.cnf\nshell> bin/mysqld_safe --user=mysql &\n# Next command is optional\nshell> cp support-files/mysql.server /etc/init.d/mysql.server\n\n   A more detailed version of the preceding description for\n   installing a binary distribution follows.\n   Note\n\n   This procedure assumes that you have root (administrator) access\n   to your system. Alternatively, you can prefix each command using\n   the sudo (Linux) or pfexec (OpenSolaris) command.\n\n   The procedure does not set up any passwords for MySQL accounts.\n   After following the procedure, proceed to Section 2.10,\n   \"Postinstallation Setup and Testing.\"\n\nCreate a mysql User and Group\n\n   If your system does not already have a user and group for mysqld\n   to run as, you may need to create one. The following commands add\n   the mysql group and the mysql user. You might want to call the\n   user and group something else instead of mysql. If so, substitute\n   the appropriate name in the following instructions. The syntax for\n   useradd and groupadd may differ slightly on different versions of\n   Unix, or they may have different names such as adduser and\n   addgroup.\nshell> groupadd mysql\nshell> useradd -r -g mysql mysql\n\n   Note\n\n   Because the user is required only for ownership purposes, not\n   login purposes, the useradd command uses the -r option to create a\n   user that does not have login permissions to your server host.\n   Omit this option to permit logins for the user (or if your useradd\n   does not support the option).\n\nObtain and Unpack the Distribution\n\n   Pick the directory under which you want to unpack the distribution\n   and change location into it. The example here unpacks the\n   distribution under /usr/local. The instructions, therefore, assume\n   that you have permission to create files and directories in\n   /usr/local. If that directory is protected, you must perform the\n   installation as root.\nshell> cd /usr/local\n\n   Obtain a distribution file using the instructions in Section\n   2.1.3, \"How to Get MySQL.\" For a given release, binary\n   distributions for all platforms are built from the same MySQL\n   source distribution.\n\n   Unpack the distribution, which creates the installation directory.\n   Then create a symbolic link to that directory. tar can uncompress\n   and unpack the distribution if it has z option support:\nshell> tar zxvf /path/to/mysql-VERSION-OS.tar.gz\nshell> ln -s full-path-to-mysql-VERSION-OS mysql\n\n   The tar command creates a directory named mysql-VERSION-OS. The ln\n   command makes a symbolic link to that directory. This enables you\n   to refer more easily to the installation directory as\n   /usr/local/mysql.\n\n   If your tar does not have z option support, use gunzip to unpack\n   the distribution and tar to unpack it. Replace the preceding tar\n   command with the following alternative command to uncompress and\n   extract the distribution:\nshell> gunzip < /path/to/mysql-VERSION-OS.tar.gz | tar xvf -\n\nPerform Postinstallation Setup\n\n   The remainder of the installation process involves setting up the\n   configuration file, creating the core databases, and starting the\n   MySQL server. For instructions, see Section 2.10,\n   \"Postinstallation Setup and Testing.\"\n   Note\n\n   The accounts that are listed in the MySQL grant tables initially\n   have no passwords. After starting the server, you should set up\n   passwords for them using the instructions in Section 2.10,\n   \"Postinstallation Setup and Testing.\"\n\n2.3. Installing MySQL on Microsoft Windows\n\n   A native Windows distribution of MySQL has been available since\n   version 3.21 and represents a sizable percentage of the daily\n   downloads of MySQL. This section describes the process for\n   installing MySQL on Windows.\n   Note\n\n   If you are upgrading MySQL from an existing installation older\n   than MySQL 4.1.5, you must first perform the procedure described\n   in Section 2.3.6, \"Upgrading MySQL on Windows.\"\n\n   To run MySQL on Windows, you need the following:\n\n     * A Windows operating system such as Windows XP, Windows Vista,\n       Windows Server 2003, Windows Server 2008, or Windows 7. Both\n       32-bit and 64-bit versions are supported. See the supported\n       platforms\n       (http://www.mysql.com/support/supportedplatforms/database.html\n       ) listing for a detailed list.\n       A Windows operating system permits you to run the MySQL server\n       as a service. See Section 2.3.4.8, \"Starting MySQL as a\n       Windows Service.\"\n       Generally, you should install MySQL on Windows using an\n       account that has administrator rights. Otherwise, you may\n       encounter problems with certain operations such as editing the\n       PATH environment variable or accessing the Service Control\n       Manager. Once installed, MySQL does not need to be executed\n       using a user with Administrator privileges.\n\n     * TCP/IP protocol support.\n\n     * Enough space on the hard drive to unpack, install, and create\n       the databases in accordance with your requirements (generally\n       a minimum of 200 megabytes is recommended.)\n\n   For a list of limitations within the Windows version of MySQL, see\n   Section E.10.5, \"Windows Platform Limitations.\"\n\n   There may also be other requirements, depending on how you plan to\n   use MySQL:\n\n     * If you plan to connect to the MySQL server using ODBC, you\n       need a Connector/ODBC driver. See Section 21.1, \"MySQL\n       Connector/ODBC.\"\n\n     * If you plan to use MySQL server with ADO.NET applications, you\n       need the Connector/Net driver. See Section 21.2, \"MySQL\n       Connector/Net.\"\n\n     * If you need tables with a size larger than 4GB, install MySQL\n       on an NTFS or newer file system. Do not forget to use MAX_ROWS\n       and AVG_ROW_LENGTH when you create tables. See Section\n       13.1.14, \"CREATE TABLE Syntax.\"\n\n   MySQL for Windows is available in several distribution formats:\n\n     * Binary distributions are available that contain a setup\n       program that installs everything you need so that you can\n       start the server immediately. For details, see Section 2.3.2,\n       \"Choosing An Installation Package.\"\n\n     * Or the source distribution that contains all of the code and\n       support files for building the executables using the Visual\n       Studio compiler system.\n\n   Generally speaking, you should use a binary distribution that\n   includes MySQL Installer. It is simpler to use than the others,\n   and you do not require additional tools to get MySQL up and\n   running. The MySQL Installer is used to both install and upgrade\n   MySQL products, and includes a GUI interface to configure the\n   MySQL Server during set up, which also creates a MySQL Server\n   configuration file, starts the server, and configures the default\n   user accounts.\n   Caution\n\n   Using virus scanning software such as Norton/Symantec Anti-Virus\n   on directories containing MySQL data and temporary tables can\n   cause issues, both in terms of the performance of MySQL and the\n   virus-scanning software mis-identifying the contents of the files\n   as containing spam. This is because of the fingerprinting\n   mechanism used by the virus scanning software, and the way in\n   which MySQL rapidly updates different files, which may be\n   identified as a potential security risk.\n\n   After installing MySQL Server, it is recommended that you disable\n   virus scanning on the main directory (datadir) being used to store\n   your MySQL table data. There is usually a system built into the\n   virus scanning software to enable certain directories to be\n   specifically ignored during virus scanning.\n\n   In addition, by default, MySQL creates temporary files in the\n   standard Windows temporary directory. To prevent the temporary\n   files also being scanned, you should configure a separate\n   temporary directory for MySQL temporary files and add this to the\n   virus scanning exclusion list. To do this, add a configuration\n   option for the tmpdir parameter to your my.ini configuration file.\n   For more information, see Section 2.3.4.2, \"Creating an Option\n   File.\"\n\n   The following section describes how to install MySQL on Windows\n   using a binary distribution. To use an installation package that\n   does not include an installer, follow the procedure described in\n   Section 2.3.4, \"Installing MySQL on Microsoft Windows Using a\n   noinstall Zip Archive.\" To install using a source distribution,\n   see Section 2.9, \"Installing MySQL from Source.\"\n\n   MySQL distributions for Windows can be downloaded from\n   http://dev.mysql.com/downloads/. See Section 2.1.3, \"How to Get\n   MySQL.\"\n\n2.3.1. MySQL Installation Layout on Microsoft Windows\n\n   For MySQL 5.6 on Windows, the default installation directory is\n   C:\\Program Files\\MySQL\\MySQL Server 5.6. Some Windows users prefer\n   to install in C:\\mysql, the directory that formerly was used as\n   the default. However, the layout of the subdirectories remains the\n   same.\n\n   All of the files are located within this parent directory, using\n   the structure shown in the following table.\n\n   Table 2.3. MySQL Installation Layout for Windows\n   Directory Contents of Directory\n   bin Client programs and the mysqld server\n   C:\\Documents and Settings\\All Users\\Application Data\\MySQL Log\n   files, databases (Windows XP, Windows Server 2003)\n   C:\\ProgramData\\MySQL Log files, databases (Windows 7, Windows\n   Server 2008)\n   examples Example programs and scripts\n   include Include (header) files\n   lib Libraries\n   scripts Utility scripts\n   share Miscellaneous support files, including error messages,\n   character set files, sample configuration files, SQL for database\n   installation\n\n   If you install MySQL using the MySQL Installer, this package\n   creates and sets up the data directory that the installed server\n   will use, but also creates a pristine \"template\" data directory\n   named data under the installation directory. After an installation\n   has been performed using this package, the template data directory\n   can be copied to set up additional MySQL instances. See Section\n   5.6, \"Running Multiple MySQL Instances on One Machine.\"\n\n2.3.2. Choosing An Installation Package\n\n   For MySQL 5.6, there are installation package formats to choose\n   from when installing MySQL on Windows:\n\n     * MySQL Installer: This package has a file name similar to\n       mysql-installer-community-5.6.11-rc.0.msi and is recommended\n       for most users. It is used to both install and upgrade the\n       MySQL Server, along with other MySQL products such as the\n       MySQL Notifier for Microsoft Windows.\n\n     * The Noinstall Archive: This package has a file name similar to\n       mysql-5.6.11-win32.zip and contains all the files found in the\n       Complete install package, with the exception of the GUI. This\n       package does not include an automated installer, and must be\n       manually installed and configured.\n\n     * The source code: This package has a file name similar to\n       mysql-5.6.11.zip and contains the source code for compiling\n       the MySQL Server on Windows.\n\n   Your choice of install package affects the installation process\n   you must follow. If you choose to use MySQL Installer, see Section\n   2.3.3, \"Installing MySQL on Microsoft Windows Using MySQL\n   Installer.\" If you choose to install a Noinstall archive, see\n   Section 2.3.4, \"Installing MySQL on Microsoft Windows Using a\n   noinstall Zip Archive.\"\n\n2.3.3. Installing MySQL on Microsoft Windows Using MySQL Installer\n\n   MySQL Installer is an application that simplifies the installation\n   and updating process for a wide range of MySQL products, including\n   MySQL Notifier for Microsoft Windows, MySQL Workbench, and MySQL\n   for Excel. From this central application, you can see which MySQL\n   products are already installed, configure them, and update or\n   remove them if necessary. The installer can also install plugins,\n   documentation, tutorials, and example databases. The MySQL\n   Installer is only available for Microsoft Windows, and includes\n   both a GUI and command-line interface.\n\n   Download MySQL Installer at\n   http://dev.mysql.com/downloads/installer/\n\n   For release notes detailing the changes in each release of MySQL\n   Installer, see MySQL Installer Release Notes\n   (http://dev.mysql.com/doc/relnotes/mysql-installer/en/).\n\n   MySQL Installer is compatible with pre-existing installations, and\n   adds them to its list of installed components. And while the MySQL\n   Installer is bundled with a specific version of MySQL Server, a\n   single MySQL Installer instance can install and manage multiple\n   MySQL Server versions. For example, a single MySQL Installer\n   instance can install versions 5.1, 5.5, and 5.6. It can also\n   manage both commercial and community versions of the MySQL Server.\n\n   MySQL Installer handles the initial configuration and setup of the\n   applications. For example:\n\n    1. It will create MySQL Server connections in MySQL Workbench.\n\n    2. It creates the configuration file (my.ini) that is used to\n       configure the MySQL Server.\n\n    3. It imports example databases.\n\n    4. It creates MySQL Server user accounts with configurable\n       permissions based on general roles, such as DB Administrator,\n       DB Designer, and Backup Admin. It optionally creates a Windows\n       user named MysqlSys with limited privileges, which would then\n       run the MySQL Server.\n       This feature is only available during the initial installation\n       of the MySQL Server, and not during future updates. User\n       accounts may also be added with MySQL Workbench.\n\n    5. If the \"Advanced Configuration\" option is checked, then the\n       Logging Options are also configured. This includes defining\n       file paths for the error log, general log, slow query log\n       (including the configuration of seconds it requires to execute\n       a query), and the binary log.\n\n   MySQL Installer can optionally check for updated components and\n   download them for you automatically.\n\n2.3.3.1. MySQL Installer GUI\n\n   After installation of the GUI version, the installer will have add\n   its own Start Menu item under MySQL.\n   Note\n\n   Files that are generated by MySQL Installer grant full permissions\n   to the user that executes MySQL Installer, including my.ini. This\n   does not apply to files and directories for specific products such\n   as the MySQL Server data directory in ProgramData, that is owned\n   by SYSTEM.\n\n   After the installer itself has been installed and started, the\n   following screen is displayed:\n\n   Figure 2.1. MySQL Installer - Welcome Screen\n   MySQL Installer - Welcome Screen\n\n   There are three main options:\n\n    1. Install MySQL Products - The Installation Wizard.\n\n    2. About MySQL - Learn about MySQL products and features.\n\n    3. Resources - Information to help install and configure MySQL.\n\n   To Install MySQL Products after executing MySQL Installer for the\n   first time, you must accept the license agreement before\n   proceeding with the installation process.\n\n   Figure 2.2. MySQL Installer - License Agreement\n   MySQL Installer - License Agreement\n\n   If you are connected to the Internet, then the Installer will\n   search for the latest MySQL components and add them to the\n   installation bundle. Click Connect to the Internet to complete\n   this step, or otherwise check the Skip checkbox and then Continue.\n\n   Figure 2.3. MySQL Installer - Find latest products\n   MySQL Installer - Find latest products\n\n   If you chose \"Connect to the Internet,\" the next page will show\n   the progress of MySQL Installer's search for available updates.\n   When the search is complete (or if you opted to skip the search),\n   you will be taken to the Choose Setup Type page:\n\n   Figure 2.4. MySQL Installer - Choose Setup Type\n   MySQL Installer - Choose Setup Type\n\n   Each type contains a description, so read the Setup Type\n   Description to determine the option most compatible with your\n   preferences.\n\n   The Installation and Data paths are also defined here, and a\n   caution flag will notify you if the data path you define already\n   exists.\n\n   After you select a setup type, the MySQL Installer will check your\n   system for the necessary external requirements and download then\n   install missing components onto your system.\n\n   Figure 2.5. MySQL Installer - Check Requirements\n   MySQL Installer - Check Requirements\n\n   The next window lists the MySQL components that are scheduled to\n   be installed:\n\n   Figure 2.6. MySQL Installer - Installation Progress\n   MySQL Installer - Installation Progress\n\n   As components are installed, you'll see their status change from\n   \"to be installed\" to \"install success.\"\n\n   Figure 2.7. MySQL Installer - Installation Progress status\n   MySQL Installer - Installation Progress status\n\n   After all components are installed, the next step involves\n   configuring the products. The Configuration Overview window\n   displays the progress and then loads a configuration window if it\n   is required.\n\n   Figure 2.8. MySQL Installer - Configuration Overview\n   MySQL Installer - Configuration Overview\n\n   The ideal MySQL Server configuration depends on your intended use,\n   as explained in the next window. Choose the description that most\n   closely applies to your machine.\n\n   You may enable TCP/IP Networking here as otherwise only localhost\n   connections are allowed.\n\n   Checking the \"Advanced Configuration\" option provides additional\n   Logging Options to configure. This includes defining file paths\n   for the error log, general log, slow query log (including the\n   configuration of seconds it requires to execute a query), and the\n   binary log.\n\n   Figure 2.9. MySQL Installer - MySQL Server Configuration: Define\n   platform, networking, and logging options\n   MySQL Installer- MySQL Server Configuration: Define platform,\n   networking, and logging options\n\n   Next, choose your account information. Defining a root password is\n   required, whereas it's optional to create additional users. There\n   are several different predefined user roles that each have\n   different permission levels. For example, a \"DB Admin\" will have\n   more privileges than a \"DB Designer.\".\n\n   Figure 2.10. MySQL Installer - MySQL Server Configuration: User\n   accounts\n   MySQL Installer - MySQL Server Configuration: User accounts\n   Note\n\n   If the MySQL Server is already installed, then the Current Root\n   Password will also be needed.\n\n   Next, configure the Windows Service Details. This includes the\n   name, whether MySQL Server should be loaded at startup, and how\n   the Windows Service for MySQL Server will be run. Choosing\n   MysqlSys User will create a MySQL Windows user with limited\n   privileges that will run the MySQL Server.\n\n   Figure 2.11. MySQL Installer - MySQL Server Configuration: Windows\n   service details\n   MySQL Installer - MySQL Server Configuration: Windows service\n   details\n   Note\n\n   When configuring Run Windows Services as ... using a Custom User,\n   the custom user must have privileges to log on to Windows as a\n   service. And the Next button will be disabled until this user is\n   given these user rights.\n\n   On Microsoft Windows 7, this is configured by loading the Start\n   Menu, Control Panel, Administrative Tools, Local Security Policy,\n   Local Policies, User Rights Assignment, then Log On As A Service.\n   Choose Add User or Group here to add the custom user, and then OK,\n   OK to save.\n\n   The final configuration step is available if the Advanced\n   Configuration option was checked, and it includes configuration\n   options related to log file names:\n\n   Figure 2.12. MySQL Installer - MySQL Server Configuration: Logging\n   options\n   MySQL Installer - MySQL Server Configuration: Logging options\n\n   After the MySQL Installer configuration process is completed, you\n   may save the installation log, and then load MySQL Workbench if\n   the Start MySQL Workbench after Setup option is checked:\n\n   Figure 2.13. MySQL Installer - Installation Complete\n   MySQL Installer - Installation Complete\n\n   You can now open MySQL Installer from the Microsoft Windows Start\n   menu under the MySQL group, which will load the MySQL Installer\n   Maintenance Screen. This is used to add, update, and remove\n   features.\n\n   Figure 2.14. MySQL Installer - Maintenance Screen\n   MySQL Installer - Maintenance Screen\n   Note\n\n   An Update Screen screen is shown if MySQL Installer is used on a\n   machine with older products installed, as opposed to the\n   Maintenance Screen shown above. However, the functionality remains\n   the same.\n\n   See also the MySQL Workbench documentation\n   (http://dev.mysql.com/doc/workbench/en/).\n\n2.3.3.2. MySQL Installer Console\n\n   MySQLInstallerConsole provides functionality similar to the GUI\n   version of MySQL Installer, but from the command-line. It is\n   installed when MySQL Installer is initially executed, and then\n   available within the MySQL Installer directory. Typically that is\n   in C:\\Program Files (x86)\\MySQL\\MySQL Installer\\, and the console\n   must be executed with administrative privileges.\n\n   To use, invoke the Command Prompt with administrative privileges\n   by choosing Start, Accessories, then right-click on Command Prompt\n   and choose Run as administrator. And from the command-line,\n   optionally change the directory to where MySQLInstallerConsole is\n   located:\nC:\\> cd \"C:\\Program Files (x86)\\MySQL\\MySQL Installer\"\n\n   MySQLInstallerConsole supports the following options, which are\n   specified on the command line:\n\n     * --help, -h, or -?\n       Displays a help message with usage examples, and then exits.\nC:\\> MySQLInstallerConsole --help\n\n     * --updates (or -u)\n       Checks for new products before any further action is taken.\n       Disabled by default.\n\n     * --nowait\n       Skips the final pause when the program finishes. Otherwise, a\n       \"Press Enter to continue.\" dialogue is generated. It is used\n       in conjunction with other options.\n\n     * --catalog=catalog_name (or -c)\n       Sets the default catalog. Use --list to view a list of\n       available catalogs.\n\n     * --type=installation_type (or -t)\n       Sets the installation type.\n       The possible values for installation_type are: developer,\n       server, client, full, and custom.\n\n     * --action=action_name\n       The action being performed.\n       The possible values are: install, remove, upgrade, list, and\n       status.\n\n          + install: Installs a product or products, as defined by\n            --products\n\n          + upgrade: Upgrades a product or products, as defined by\n            --products.\n\n          + remove: Removes a product or products, as defined by\n            --products.\n\n          + list: Lists the product manifest, both installed and\n            available products.\n\n          + status: Shows the status after another action is\n            performed.\n\n     * --product=product_name[:feature1],[feature2], [...] (or -p)\n       Set the feature list of a product. Use --list to view\n       available products, or pass in --product=* (an asterisk) to\n       install all available products.\n\n     * --config=product_name:passwd=root_password[;parameter1=value],\n       [;parameter2=value], ...\n       The configuration parameters for the most recently listed\n       products.\n\n     * --user=product_name:name=username,host:hostname,role=rolename,\n       password=password or\n       --user=product_name:name=username,host:hostname,role=rolename,\n       tokens=tokens\n       Creates a new user.\n       Requires: name, host, role, and the password or tokens. Tokens\n       are separated by pipe (\"|\") characters.\n\n2.3.4. Installing MySQL on Microsoft Windows Using a noinstall Zip\nArchive\n\n   Users who are installing from the Noinstall package can use the\n   instructions in this section to manually install MySQL. The\n   process for installing MySQL from a Zip archive is as follows:\n\n    1. Extract the archive to the desired install directory\n\n    2. Create an option file\n\n    3. Choose a MySQL server type\n\n    4. Start the MySQL server\n\n    5. Secure the default user accounts\n\n   This process is described in the sections that follow.\n\n2.3.4.1. Extracting the Install Archive\n\n   To install MySQL manually, do the following:\n\n    1. If you are upgrading from a previous version please refer to\n       Section 2.3.6, \"Upgrading MySQL on Windows,\" before beginning\n       the upgrade process.\n\n    2. Make sure that you are logged in as a user with administrator\n       privileges.\n\n    3. Choose an installation location. Traditionally, the MySQL\n       server is installed in C:\\mysql. The MySQL Installer installs\n       MySQL under C:\\Program Files\\MySQL. If you do not install\n       MySQL at C:\\mysql, you must specify the path to the install\n       directory during startup or in an option file. See Section\n       2.3.4.2, \"Creating an Option File.\"\n\n    4. Extract the install archive to the chosen installation\n       location using your preferred Zip archive tool. Some tools may\n       extract the archive to a folder within your chosen\n       installation location. If this occurs, you can move the\n       contents of the subfolder into the chosen installation\n       location.\n\n2.3.4.2. Creating an Option File\n\n   If you need to specify startup options when you run the server,\n   you can indicate them on the command line or place them in an\n   option file. For options that are used every time the server\n   starts, you may find it most convenient to use an option file to\n   specify your MySQL configuration. This is particularly true under\n   the following circumstances:\n\n     * The installation or data directory locations are different\n       from the default locations (C:\\Program Files\\MySQL\\MySQL\n       Server 5.6 and C:\\Program Files\\MySQL\\MySQL Server 5.6\\data).\n\n     * You need to tune the server settings, such as memory, cache,\n       or InnoDB configuration information.\n\n   When the MySQL server starts on Windows, it looks for option files\n   in several locations, such as the Windows directory, C:\\, and the\n   MySQL installation directory (for the full list of locations, see\n   Section 4.2.3.3, \"Using Option Files\"). The Windows directory\n   typically is named something like C:\\WINDOWS. You can determine\n   its exact location from the value of the WINDIR environment\n   variable using the following command:\nC:\\> echo %WINDIR%\n\n   MySQL looks for options in each location first in the my.ini file,\n   and then in the my.cnf file. However, to avoid confusion, it is\n   best if you use only one file. If your PC uses a boot loader where\n   C: is not the boot drive, your only option is to use the my.ini\n   file. Whichever option file you use, it must be a plain text file.\n   Note\n\n   When using the MySQL Installer to install MySQL Server, it will\n   create the my.ini at the default location. And as of MySQL Server\n   5.5.27, the user running MySQL Installer is granted full\n   permissions to this new my.ini.\n\n   In other words, be sure that the MySQL Server user has permission\n   to read the my.ini file.\n\n   You can also make use of the example option files included with\n   your MySQL distribution; see Section 5.1.2, \"Server Configuration\n   Defaults.\"\n\n   An option file can be created and modified with any text editor,\n   such as Notepad. For example, if MySQL is installed in E:\\mysql\n   and the data directory is in E:\\mydata\\data, you can create an\n   option file containing a [mysqld] section to specify values for\n   the basedir and datadir options:\n[mysqld]\n# set basedir to your installation path\nbasedir=E:/mysql\n# set datadir to the location of your data directory\ndatadir=E:/mydata/data\n\n   Note that Windows path names are specified in option files using\n   (forward) slashes rather than backslashes. If you do use\n   backslashes, double them:\n[mysqld]\n# set basedir to your installation path\nbasedir=E:\\\\mysql\n# set datadir to the location of your data directory\ndatadir=E:\\\\mydata\\\\data\n\n   The rules for use of backslash in option file values are given in\n   Section 4.2.3.3, \"Using Option Files.\"\n\n   The data directory is located within the AppData directory for the\n   user running MySQL.\n\n   If you would like to use a data directory in a different location,\n   you should copy the entire contents of the data directory to the\n   new location. For example, if you want to use E:\\mydata as the\n   data directory instead, you must do two things:\n\n    1. Move the entire data directory and all of its contents from\n       the default location (for example C:\\Program Files\\MySQL\\MySQL\n       Server 5.6\\data) to E:\\mydata.\n\n    2. Use a --datadir option to specify the new data directory\n       location each time you start the server.\n\n2.3.4.3. Selecting a MySQL Server Type\n\n   The following table shows the available servers for Windows in\n   MySQL 5.6.\n   Binary Description\n   mysqld Optimized binary with named-pipe support\n   mysqld-debug Like mysqld, but compiled with full debugging and\n   automatic memory allocation checking\n\n   All of the preceding binaries are optimized for modern Intel\n   processors, but should work on any Intel i386-class or higher\n   processor.\n\n   Each of the servers in a distribution support the same set of\n   storage engines. The SHOW ENGINES statement displays which engines\n   a given server supports.\n\n   All Windows MySQL 5.6 servers have support for symbolic linking of\n   database directories.\n\n   MySQL supports TCP/IP on all Windows platforms. MySQL servers on\n   Windows support named pipes as indicated in the following list.\n   However, the default is to use TCP/IP regardless of platform.\n   (Named pipes are slower than TCP/IP in many Windows\n   configurations.)\n\n   Named pipes are enabled only if you start the server with the\n   --enable-named-pipe option. It is necessary to use this option\n   explicitly because some users have experienced problems with\n   shutting down the MySQL server when named pipes were used.\n\n2.3.4.4. Starting the Server for the First Time\n\n   This section gives a general overview of starting the MySQL\n   server. The following sections provide more specific information\n   for starting the MySQL server from the command line or as a\n   Windows service.\n\n   The information here applies primarily if you installed MySQL\n   using the Noinstall version, or if you wish to configure and test\n   MySQL manually rather than with the GUI tools.\n   Note\n\n   The MySQL server will automatically start after using the MySQL\n   Installer, and the MySQL Notifier for Microsoft Windows GUI can be\n   used to start/stop/restart at any time.\n\n   The examples in these sections assume that MySQL is installed\n   under the default location of C:\\Program Files\\MySQL\\MySQL Server\n   5.6. Adjust the path names shown in the examples if you have MySQL\n   installed in a different location.\n\n   Clients have two options. They can use TCP/IP, or they can use a\n   named pipe if the server supports named-pipe connections.\n\n   MySQL for Windows also supports shared-memory connections if the\n   server is started with the --shared-memory option. Clients can\n   connect through shared memory by using the --protocol=MEMORY\n   option.\n\n   For information about which server binary to run, see Section\n   2.3.4.3, \"Selecting a MySQL Server Type.\"\n\n   Testing is best done from a command prompt in a console window (or\n   \"DOS window\"). In this way you can have the server display status\n   messages in the window where they are easy to see. If something is\n   wrong with your configuration, these messages make it easier for\n   you to identify and fix any problems.\n\n   To start the server, enter this command:\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqld\" --console\n\n   For a server that includes InnoDB support, you should see the\n   messages similar to those following as it starts (the path names\n   and sizes may differ):\nInnoDB: The first specified datafile c:\\ibdata\\ibdata1 did not exist:\nInnoDB: a new database to be created!\nInnoDB: Setting file c:\\ibdata\\ibdata1 size to 209715200\nInnoDB: Database physically writes the file full: wait...\nInnoDB: Log file c:\\iblogs\\ib_logfile0 did not exist: new to be creat\ned\nInnoDB: Setting log file c:\\iblogs\\ib_logfile0 size to 31457280\nInnoDB: Log file c:\\iblogs\\ib_logfile1 did not exist: new to be creat\ned\nInnoDB: Setting log file c:\\iblogs\\ib_logfile1 size to 31457280\nInnoDB: Log file c:\\iblogs\\ib_logfile2 did not exist: new to be creat\ned\nInnoDB: Setting log file c:\\iblogs\\ib_logfile2 size to 31457280\nInnoDB: Doublewrite buffer not found: creating new\nInnoDB: Doublewrite buffer created\nInnoDB: creating foreign key constraint system tables\nInnoDB: foreign key constraint system tables created\n011024 10:58:25  InnoDB: Started\n\n   When the server finishes its startup sequence, you should see\n   something like this, which indicates that the server is ready to\n   service client connections:\nmysqld: ready for connections\nVersion: '5.6.11'  socket: ''  port: 3306\n\n   The server continues to write to the console any further\n   diagnostic output it produces. You can open a new console window\n   in which to run client programs.\n\n   If you omit the --console option, the server writes diagnostic\n   output to the error log in the data directory (C:\\Program\n   Files\\MySQL\\MySQL Server 5.6\\data by default). The error log is\n   the file with the .err extension, and may be set using the\n   --log-error option.\n   Note\n\n   The accounts that are listed in the MySQL grant tables initially\n   have no passwords. After starting the server, you should set up\n   passwords for them using the instructions in Section 2.10,\n   \"Postinstallation Setup and Testing.\"\n\n2.3.4.5. Starting MySQL from the Windows Command Line\n\n   The MySQL server can be started manually from the command line.\n   This can be done on any version of Windows.\n   Note\n\n   The MySQL Notifier for Microsoft Windows GUI can also be used to\n   start/stop/restart the MySQL server.\n\n   To start the mysqld server from the command line, you should start\n   a console window (or \"DOS window\") and enter this command:\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqld\"\n\n   The path to mysqld may vary depending on the install location of\n   MySQL on your system.\n\n   You can stop the MySQL server by executing this command:\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqladmin\" -u root\n shutdown\n\n   Note\n\n   If the MySQL root user account has a password, you need to invoke\n   mysqladmin with the -p option and supply the password when\n   prompted.\n\n   This command invokes the MySQL administrative utility mysqladmin\n   to connect to the server and tell it to shut down. The command\n   connects as the MySQL root user, which is the default\n   administrative account in the MySQL grant system. Note that users\n   in the MySQL grant system are wholly independent from any login\n   users under Windows.\n\n   If mysqld doesn't start, check the error log to see whether the\n   server wrote any messages there to indicate the cause of the\n   problem. By default, the error log is located in the C:\\Program\n   Files\\MySQL\\MySQL Server 5.6\\data directory. It is the file with a\n   suffix of .err, or may be specified by passing in the --log-error\n   option. Alternatively, you can try to start the server as mysqld\n   --console; in this case, you may get some useful information on\n   the screen that may help solve the problem.\n\n   The last option is to start mysqld with the --standalone and\n   --debug options. In this case, mysqld writes a log file\n   C:\\mysqld.trace that should contain the reason why mysqld doesn't\n   start. See MySQL Internals: Porting to Other Systems\n   (http://dev.mysql.com/doc/internals/en/porting.html).\n\n   Use mysqld --verbose --help to display all the options that mysqld\n   supports.\n\n2.3.4.6. MySQL Notifier for Microsoft Windows\n\n   The MySQL Notifier for Microsoft Windows is a tool that allows you\n   to monitor and adjust the status of your local MySQL Server\n   instances through an indicator that resides in the system tray.\n   The MySQL Notifier for Microsoft Windows also gives quick access\n   to several MySQL GUI tools (such as MySQL Workbench) through its\n   context menu.\n\n   The MySQL Notifier for Microsoft Windows is installed by MySQL\n   Installer, and (by default) will start-up when Microsoft Windows\n   is started.\n   Note\n\n   To install, download and execute the MySQL Installer\n   (http://dev.mysql.com/downloads/installer/), be sure the MySQL\n   Notifier for Microsoft Windows product is selected, then proceed\n   with the installation. See the MySQL Installer manual for\n   additional details.\n\n   For release notes detailing the changes in each release of MySQL\n   Notifier for Microsoft Windows, see MySQL Notifier Release Notes\n   (http://dev.mysql.com/doc/relnotes/mysql-notifier/en/).\n\n   Visit the MySQL Notifier forum\n   (http://forums.mysql.com/list.php?173) for additional MySQL\n   Notifier for Microsoft Windows help and support.\n\n   Features include:\n\n     * Start, Stop, and Restart instances of the MySQL Server.\n\n     * Automatically detects (and adds) new MySQL Server services.\n       These are listed under Manage Services, and may also be\n       configured.\n\n     * The Tray icon changes, depending on the status. It's green if\n       all monitored MySQL Server instances are running, or red if at\n       least one service is stopped.\n\n     * Links to other applications like MySQL Workbench, Windows\n       Installer, and the MySQL Utilities. For example, choosing\n       Configure Instance will load the MySQL Workbench Server\n       Administration window for that particular instance.\n\n     * If MySQL Workbench is also installed, then the Configure\n       Instance and SQL Editor options are available.\n\n   The MySQL Notifier for Microsoft Windows resides in the system\n   tray and provides visual status information for your MySQL Server\n   instances. A green icon is displayed at the top left corner of the\n   tray icon if the current MySQL Server is running, or a red icon if\n   the service is stopped.\n\n   The MySQL Notifier for Microsoft Windows automatically adds\n   discovered MySQL Services on the local machine, and each service\n   is saved and configurable. By default, the Automatically add new\n   services that match this pattern option is enabled and set to\n   .*mysqld.*. Related Notifications Options include being notified\n   when new services are either discovered or experience status\n   changes, and are also enabled by default. And uninstalling a\n   service will also remove the service from the MySQL Notifier for\n   Microsoft Windows.\n\n   Clicking the system tray icon will reveal several options, as seen\n   in the screenshots below:\n\n   The Service Instance menu is the main MySQL Notifier for Microsoft\n   Windows window, and allows you to Stop, Start, and Restart the\n   MySQL Server.\n\n   Figure 2.15. MySQL Notifier for Microsoft Windows Service Instance\n   menu\n   MySQL Notifier for Microsoft Windows Service Instance menu\n\n   The Actions menu actions include several links to external\n   applications (if they are installed).\n   Note\n\n   The main menu will not show the Actions menu when there are no\n   services being monitored by MySQL Notifier for Microsoft Windows.\n\n   Figure 2.16. MySQL Notifier for Microsoft Windows Actions menu\n   MySQL Notifier for Microsoft Windows Actions menu\n\n   The Actions, Options menu configures MySQL Notifier for Microsoft\n   Windows and includes options to:\n\n     * Use colorful status icons: Enables a colorful style of icons\n       for the tray of the MySQL Notifier for Microsoft Windows.\n\n     * Run at Windows Startup: Allows the application to be loaded\n       when Microsoft Windows starts.\n\n     * Automatically Check For Updates Every # Weeks: Checks for a\n       new version of MySQL Notifier for Microsoft Windows, and runs\n       this check every # weeks.\n\n     * Automatically add new services that match this pattern: A\n       custom regular expression that filters the monitored services,\n       and also filters the list of the Microsoft Windows services\n       for the Add New Service dialog.\n\n     * Notify me when a service is automatically added: Will display\n       a notification from the taskbar when a newly discovered\n       service is added to the monitored services list.\n\n     * Notify me when a service changes status: Will display a\n       notification from the taskbar when a monitored service changes\n       its status.\n\n   Figure 2.17. MySQL Notifier for Microsoft Windows Options menu\n   MySQL Notifier for Microsoft Windows Options menu\n\n   The Actions, Manage Services menu allows you to configure the\n   monitored services.\n\n   Figure 2.18. MySQL Notifier for Microsoft Windows Service Instance\n   menu\n   MySQL Notifier for Microsoft Windows Manage Services menu\n\n   Adding a service (after clicking Add in the Manage Services\n   window) allows you to select a running Microsoft Windows service,\n   and configure MySQL Notifier for Microsoft Windows to monitor it.\n   Add a new service by clicking service name from the list, then OK\n   to accept. Multiple services may be selected.\n\n   Figure 2.19. MySQL Notifier for Microsoft Windows Adding a new\n   services\n   MySQL Notifier for Microsoft Windows Adding new services\n\n2.3.4.7. Customizing the PATH for MySQL Tools\n\n   To make it easier to invoke MySQL programs, you can add the path\n   name of the MySQL bin directory to your Windows system PATH\n   environment variable:\n\n     * On the Windows desktop, right-click the My Computer icon, and\n       select Properties.\n\n     * Next select the Advanced tab from the System Properties menu\n       that appears, and click the Environment Variables button.\n\n     * Under System Variables, select Path, and then click the Edit\n       button. The Edit System Variable dialogue should appear.\n\n     * Place your cursor at the end of the text appearing in the\n       space marked Variable Value. (Use the End key to ensure that\n       your cursor is positioned at the very end of the text in this\n       space.) Then enter the complete path name of your MySQL bin\n       directory (for example, C:\\Program Files\\MySQL\\MySQL Server\n       5.6\\bin)\n       Note\n       There must be a semicolon separating this path from any values\n       present in this field.\n       Dismiss this dialogue, and each dialogue in turn, by clicking\n       OK until all of the dialogues that were opened have been\n       dismissed. You should now be able to invoke any MySQL\n       executable program by typing its name at the DOS prompt from\n       any directory on the system, without having to supply the\n       path. This includes the servers, the mysql client, and all\n       MySQL command-line utilities such as mysqladmin and mysqldump.\n       You should not add the MySQL bin directory to your Windows\n       PATH if you are running multiple MySQL servers on the same\n       machine.\n\n   Warning\n\n   You must exercise great care when editing your system PATH by\n   hand; accidental deletion or modification of any portion of the\n   existing PATH value can leave you with a malfunctioning or even\n   unusable system.\n\n2.3.4.8. Starting MySQL as a Windows Service\n\n   On Windows, the recommended way to run MySQL is to install it as a\n   Windows service, whereby MySQL starts and stops automatically when\n   Windows starts and stops. A MySQL server installed as a service\n   can also be controlled from the command line using NET commands,\n   or with the graphical Services utility. Generally, to install\n   MySQL as a Windows service you should be logged in using an\n   account that has administrator rights.\n   Note\n\n   The MySQL Notifier for Microsoft Windows GUI can also be used to\n   monitor the status of the MySQL service.\n\n   The Services utility (the Windows Service Control Manager) can be\n   found in the Windows Control Panel (under Administrative Tools on\n   Windows 2000, XP, Vista, and Server 2003). To avoid conflicts, it\n   is advisable to close the Services utility while performing server\n   installation or removal operations from the command line.\n\n   Before installing MySQL as a Windows service, you should first\n   stop the current server if it is running by using the following\n   command:\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqladmin\"\n          -u root shutdown\n\n   Note\n\n   If the MySQL root user account has a password, you need to invoke\n   mysqladmin with the -p option and supply the password when\n   prompted.\n\n   This command invokes the MySQL administrative utility mysqladmin\n   to connect to the server and tell it to shut down. The command\n   connects as the MySQL root user, which is the default\n   administrative account in the MySQL grant system. Note that users\n   in the MySQL grant system are wholly independent from any login\n   users under Windows.\n\n   Install the server as a service using this command:\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqld\" --install\n\n   The service-installation command does not start the server.\n   Instructions for that are given later in this section.\n\n   To make it easier to invoke MySQL programs, you can add the path\n   name of the MySQL bin directory to your Windows system PATH\n   environment variable:\n\n     * On the Windows desktop, right-click the My Computer icon, and\n       select Properties.\n\n     * Next select the Advanced tab from the System Properties menu\n       that appears, and click the Environment Variables button.\n\n     * Under System Variables, select Path, and then click the Edit\n       button. The Edit System Variable dialogue should appear.\n\n     * Place your cursor at the end of the text appearing in the\n       space marked Variable Value. (Use the End key to ensure that\n       your cursor is positioned at the very end of the text in this\n       space.) Then enter the complete path name of your MySQL bin\n       directory (for example, C:\\Program Files\\MySQL\\MySQL Server\n       5.6\\bin), Note that there should be a semicolon separating\n       this path from any values present in this field. Dismiss this\n       dialogue, and each dialogue in turn, by clicking OK until all\n       of the dialogues that were opened have been dismissed. You\n       should now be able to invoke any MySQL executable program by\n       typing its name at the DOS prompt from any directory on the\n       system, without having to supply the path. This includes the\n       servers, the mysql client, and all MySQL command-line\n       utilities such as mysqladmin and mysqldump.\n       You should not add the MySQL bin directory to your Windows\n       PATH if you are running multiple MySQL servers on the same\n       machine.\n\n   Warning\n\n   You must exercise great care when editing your system PATH by\n   hand; accidental deletion or modification of any portion of the\n   existing PATH value can leave you with a malfunctioning or even\n   unusable system.\n\n   The following additional arguments can be used when installing the\n   service:\n\n     * You can specify a service name immediately following the\n       --install option. The default service name is MySQL.\n\n     * If a service name is given, it can be followed by a single\n       option. By convention, this should be\n       --defaults-file=file_name to specify the name of an option\n       file from which the server should read options when it starts.\n       The use of a single option other than --defaults-file is\n       possible but discouraged. --defaults-file is more flexible\n       because it enables you to specify multiple startup options for\n       the server by placing them in the named option file.\n\n     * You can also specify a --local-service option following the\n       service name. This causes the server to run using the\n       LocalService Windows account that has limited system\n       privileges. This account is available only for Windows XP or\n       newer. If both --defaults-file and --local-service are given\n       following the service name, they can be in any order.\n\n   For a MySQL server that is installed as a Windows service, the\n   following rules determine the service name and option files that\n   the server uses:\n\n     * If the service-installation command specifies no service name\n       or the default service name (MySQL) following the --install\n       option, the server uses the a service name of MySQL and reads\n       options from the [mysqld] group in the standard option files.\n\n     * If the service-installation command specifies a service name\n       other than MySQL following the --install option, the server\n       uses that service name. It reads options from the [mysqld]\n       group and the group that has the same name as the service in\n       the standard option files. This enables you to use the\n       [mysqld] group for options that should be used by all MySQL\n       services, and an option group with the service name for use by\n       the server installed with that service name.\n\n     * If the service-installation command specifies a\n       --defaults-file option after the service name, the server\n       reads options the same way as described in the previous item,\n       except that it reads options only from the the named file and\n       ignores the standard option files.\n\n   As a more complex example, consider the following command:\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqld\"\n          --install MySQL --defaults-file=C:\\my-opts.cnf\n\n   Here, the default service name (MySQL) is given after the\n   --install option. If no --defaults-file option had been given,\n   this command would have the effect of causing the server to read\n   the [mysqld] group from the standard option files. However,\n   because the --defaults-file option is present, the server reads\n   options from the [mysqld] option group, and only from the named\n   file.\n\n   You can also specify options as Start parameters in the Windows\n   Services utility before you start the MySQL service.\n\n   Once a MySQL server has been installed as a service, Windows\n   starts the service automatically whenever Windows starts. The\n   service also can be started immediately from the Services utility,\n   or by using a NET START MySQL command. The NET command is not case\n   sensitive.\n\n   When run as a service, mysqld has no access to a console window,\n   so no messages can be seen there. If mysqld does not start, check\n   the error log to see whether the server wrote any messages there\n   to indicate the cause of the problem. The error log is located in\n   the MySQL data directory (for example, C:\\Program\n   Files\\MySQL\\MySQL Server 5.6\\data). It is the file with a suffix\n   of .err.\n\n   When a MySQL server has been installed as a service, and the\n   service is running, Windows stops the service automatically when\n   Windows shuts down. The server also can be stopped manually by\n   using the Services utility, the NET STOP MySQL command, or the\n   mysqladmin shutdown command.\n\n   You also have the choice of installing the server as a manual\n   service if you do not wish for the service to be started\n   automatically during the boot process. To do this, use the\n   --install-manual option rather than the --install option:\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqld\" --install-m\nanual\n\n   To remove a server that is installed as a service, first stop it\n   if it is running by executing NET STOP MySQL. Then use the\n   --remove option to remove it:\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqld\" --remove\n\n   If mysqld is not running as a service, you can start it from the\n   command line. For instructions, see Section 2.3.4.5, \"Starting\n   MySQL from the Windows Command Line.\"\n\n   If you encounter difficulties during installation. see Section\n   2.3.5, \"Troubleshooting a Microsoft Windows MySQL Server\n   Installation.\"\n\n2.3.4.9. Testing The MySQL Installation\n\n   You can test whether the MySQL server is working by executing any\n   of the following commands:\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqlshow\"\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqlshow\" -u root\nmysql\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqladmin\" version\n status proc\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysql\" test\n\n   If mysqld is slow to respond to TCP/IP connections from client\n   programs, there is probably a problem with your DNS. In this case,\n   start mysqld with the --skip-name-resolve option and use only\n   localhost and IP addresses in the Host column of the MySQL grant\n   tables.\n\n   You can force a MySQL client to use a named-pipe connection rather\n   than TCP/IP by specifying the --pipe or --protocol=PIPE option, or\n   by specifying . (period) as the host name. Use the --socket option\n   to specify the name of the pipe if you do not want to use the\n   default pipe name.\n\n   Note that if you have set a password for the root account, deleted\n   the anonymous account, or created a new user account, then you\n   must use the appropriate -u and -p options with the commands shown\n   above to connect with the MySQL Server. See Section 4.2.2,\n   \"Connecting to the MySQL Server.\"\n\n   For more information about mysqlshow, see Section 4.5.6,\n   \"mysqlshow --- Display Database, Table, and Column Information.\"\n\n2.3.5. Troubleshooting a Microsoft Windows MySQL Server Installation\n\n   When installing and running MySQL for the first time, you may\n   encounter certain errors that prevent the MySQL server from\n   starting. This section helps you diagnose and correct some of\n   these errors.\n\n   Your first resource when troubleshooting server issues is the\n   error log. The MySQL server uses the error log to record\n   information relevant to the error that prevents the server from\n   starting. The error log is located in the data directory specified\n   in your my.ini file. The default data directory location is\n   C:\\Program Files\\MySQL\\MySQL Server 5.6\\data, or\n   C:\\ProgramData\\Mysql on Windows 7 and Windows Server 2008. The\n   C:\\ProgramData directory is hidden by default. You need to change\n   your folder options to see the directory and contents. For more\n   information on the error log and understanding the content, see\n   Section 5.2.2, \"The Error Log.\"\n\n   For information regarding possible errors, also consult the\n   console messages displayed when the MySQL service is starting. Use\n   the NET START MySQL command from the command line after installing\n   mysqld as a service to see any error messages regarding the\n   starting of the MySQL server as a service. See Section 2.3.4.8,\n   \"Starting MySQL as a Windows Service.\"\n\n   The following examples show other common error messages you might\n   encounter when installing MySQL and starting the server for the\n   first time:\n\n     * If the MySQL server cannot find the mysql privileges database\n       or other critical files, it displays these messages:\nSystem error 1067 has occurred.\nFatal error: Can't open and lock privilege tables:\nTable 'mysql.user' doesn't exist\n       These messages often occur when the MySQL base or data\n       directories are installed in different locations than the\n       default locations (C:\\Program Files\\MySQL\\MySQL Server 5.6 and\n       C:\\Program Files\\MySQL\\MySQL Server 5.6\\data, respectively).\n       This situation can occur when MySQL is upgraded and installed\n       to a new location, but the configuration file is not updated\n       to reflect the new location. In addition, old and new\n       configuration files might conflict. Be sure to delete or\n       rename any old configuration files when upgrading MySQL.\n       If you have installed MySQL to a directory other than\n       C:\\Program Files\\MySQL\\MySQL Server 5.6, ensure that the MySQL\n       server is aware of this through the use of a configuration\n       (my.ini) file. Put the my.ini file in your Windows directory,\n       typically C:\\WINDOWS. To determine its exact location from the\n       value of the WINDIR environment variable, issue the following\n       command from the command prompt:\nC:\\> echo %WINDIR%\n       You can create or modify an option file with any text editor,\n       such as Notepad. For example, if MySQL is installed in\n       E:\\mysql and the data directory is D:\\MySQLdata, you can\n       create the option file and set up a [mysqld] section to\n       specify values for the basedir and datadir options:\n[mysqld]\n# set basedir to your installation path\nbasedir=E:/mysql\n# set datadir to the location of your data directory\ndatadir=D:/MySQLdata\n       Note that Windows path names are specified in option files\n       using (forward) slashes rather than backslashes. If you do use\n       backslashes, double them:\n[mysqld]\n# set basedir to your installation path\nbasedir=C:\\\\Program Files\\\\MySQL\\\\MySQL Server 5.6\n# set datadir to the location of your data directory\ndatadir=D:\\\\MySQLdata\n       The rules for use of backslash in option file values are given\n       in Section 4.2.3.3, \"Using Option Files.\"\n       If you change the datadir value in your MySQL configuration\n       file, you must move the contents of the existing MySQL data\n       directory before restarting the MySQL server.\n       See Section 2.3.4.2, \"Creating an Option File.\"\n\n     * If you reinstall or upgrade MySQL without first stopping and\n       removing the existing MySQL service and install MySQL using\n       the MySQL Installer, you might see this error:\nError: Cannot create Windows service for MySql. Error: 0\n       This occurs when the Configuration Wizard tries to install the\n       service and finds an existing service with the same name.\n       One solution to this problem is to choose a service name other\n       than mysql when using the configuration wizard. This enables\n       the new service to be installed correctly, but leaves the\n       outdated service in place. Although this is harmless, it is\n       best to remove old services that are no longer in use.\n       To permanently remove the old mysql service, execute the\n       following command as a user with administrative privileges, on\n       the command line:\nC:\\> sc delete mysql\n[SC] DeleteService SUCCESS\n       If the sc utility is not available for your version of\n       Windows, download the delsrv utility from\n       http://www.microsoft.com/windows2000/techinfo/reskit/tools/exi\n       sting/delsrv-o.asp and use the delsrv mysql syntax.\n\n2.3.6. Upgrading MySQL on Windows\n\n   This section lists some of the steps to take when upgrading MySQL\n   on Windows.\n\n    1. Review Section 2.11.1, \"Upgrading MySQL,\" for additional\n       information on upgrading MySQL that is not specific to\n       Windows.\n\n    2. Always back up your current MySQL installation before\n       performing an upgrade. See Section 7.2, \"Database Backup\n       Methods.\"\n\n    3. Download the latest Windows distribution of MySQL from\n       http://dev.mysql.com/downloads/.\n\n    4. Before upgrading MySQL, stop the server. If the server is\n       installed as a service, stop the service with the following\n       command from the command prompt:\nC:\\> NET STOP MySQL\n       If you are not running the MySQL server as a service, use\n       mysqladmin to stop it. For example, before upgrading from\n       MySQL 5.5 to 5.6, use mysqladmin from MySQL 5.5 as follows:\nC:\\> \"C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin\\mysqladmin\" -u root\n shutdown\n       Note\n       If the MySQL root user account has a password, invoke\n       mysqladmin with the -p option and supply the password when\n       prompted.\n\n    5. Before upgrading to MySQL 5.6 from a version previous to\n       4.1.5, or from a version of MySQL installed from a Zip archive\n       to a version of MySQL installed with the MySQL Installation\n       Wizard, you must first manually remove the previous\n       installation and MySQL service (if the server is installed as\n       a service).\n       To remove the MySQL service, use the following command:\nC:\\> C:\\mysql\\bin\\mysqld --remove\n       If you do not remove the existing service, the MySQL\n       Installation Wizard may fail to properly install the new MySQL\n       service.\n\n    6. If you are using the MySQL Installer, start it as described in\n       Section 2.3.3, \"Installing MySQL on Microsoft Windows Using\n       MySQL Installer.\"\n\n    7. If you are installing MySQL from a Zip archive, extract the\n       archive. You may either overwrite your existing MySQL\n       installation (usually located at C:\\mysql), or install it into\n       a different directory, such as C:\\mysql5. Overwriting the\n       existing installation is recommended.\n\n    8. If you were running MySQL as a Windows service and you had to\n       remove the service earlier in this procedure, reinstall the\n       service. (See Section 2.3.4.8, \"Starting MySQL as a Windows\n       Service.\")\n\n    9. Restart the server. For example, use NET START MySQL if you\n       run MySQL as a service, or invoke mysqld directly otherwise.\n   10. As Administrator, run mysql_upgrade to check your tables,\n       attempt to repair them if necessary, and update your grant\n       tables if they have changed so that you can take advantage of\n       any new capabilities. See Section 4.4.7, \"mysql_upgrade ---\n       Check and Upgrade MySQL Tables.\"\n   11. If you encounter errors, see Section 2.3.5, \"Troubleshooting a\n       Microsoft Windows MySQL Server Installation.\"\n\n2.3.7. Windows Postinstallation Procedures\n\n   GUI tools exist that perform most of the tasks described below,\n   including:\n\n     * MySQL Installer: Used to install and upgrade MySQL products.\n\n     * MySQL Workbench: Manages the MySQL server and edits SQL\n       queries.\n\n     * MySQL Notifier: Starts, stops, or restarts the MySQL server,\n       and monitors its status.\n\n     * MySQL for Excel: Edits MySQL data with Microsoft Excel.\n\n   On Windows, you need not create the data directory and the grant\n   tables. MySQL Windows distributions include the grant tables with\n   a set of preinitialized accounts in the mysql database under the\n   data directory. Regarding passwords, if you installed MySQL using\n   the MySQL Installer, you may have already assigned passwords to\n   the accounts. (See Section 2.3.3, \"Installing MySQL on Microsoft\n   Windows Using MySQL Installer.\") Otherwise, use the\n   password-assignment procedure given in Section 2.10.2, \"Securing\n   the Initial MySQL Accounts.\"\n\n   Before setting up passwords, you might want to try running some\n   client programs to make sure that you can connect to the server\n   and that it is operating properly. Make sure that the server is\n   running (see Section 2.3.4.4, \"Starting the Server for the First\n   Time\"), and then issue the following commands to verify that you\n   can retrieve information from the server. You may need to specify\n   directory different from C:\\mysql\\bin on the command line. If you\n   used the MySQL Installer, the default directory is C:\\Program\n   Files\\MySQL\\MySQL Server 5.6, and the mysql and mysqlshow client\n   programs are in C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin. See\n   Section 2.3.3, \"Installing MySQL on Microsoft Windows Using MySQL\n   Installer,\" for more information.\n\n   Use mysqlshow to see what databases exist:\nC:\\> C:\\mysql\\bin\\mysqlshow\n+--------------------+\n|     Databases      |\n+--------------------+\n| information_schema |\n| mysql              |\n| test               |\n+--------------------+\n\n   The list of installed databases may vary, but will always include\n   the minimum of mysql and information_schema. In most cases, the\n   test database will also be installed automatically.\n\n   The preceding command (and commands for other MySQL programs such\n   as mysql) may not work if the correct MySQL account does not\n   exist. For example, the program may fail with an error, or you may\n   not be able to view all databases. If you installed using MySQL\n   Installer, then the root user will have been created automatically\n   with the password you supplied. In this case, you should use the\n   -u root and -p options. (You will also need to use the -u root and\n   -p options if you have already secured the initial MySQL\n   accounts.) With -p, you will be prompted for the root password.\n   For example:\nC:\\> C:\\mysql\\bin\\mysqlshow -u root -p\nEnter password: (enter root password here)\n+--------------------+\n|     Databases      |\n+--------------------+\n| information_schema |\n| mysql              |\n| test               |\n+--------------------+\n\n   If you specify a database name, mysqlshow displays a list of the\n   tables within the database:\nC:\\> C:\\mysql\\bin\\mysqlshow mysql\nDatabase: mysql\n+---------------------------+\n|          Tables           |\n+---------------------------+\n| columns_priv              |\n| db                        |\n| event                     |\n| func                      |\n| help_category             |\n| help_keyword              |\n| help_relation             |\n| help_topic                |\n| host                      |\n| plugin                    |\n| proc                      |\n| procs_priv                |\n| servers                   |\n| tables_priv               |\n| time_zone                 |\n| time_zone_leap_second     |\n| time_zone_name            |\n| time_zone_transition      |\n| time_zone_transition_type |\n| user                      |\n+---------------------------+\n\n   Use the mysql program to select information from a table in the\n   mysql database:\nC:\\> C:\\mysql\\bin\\mysql -e \"SELECT Host,Db,User FROM mysql.db\"\n+------+--------+------+\n| host | db     | user |\n+------+--------+------+\n| %    | test   |      |\n| %    | test_% |      |\n+------+--------+------+\n\n   For more information about mysqlshow and mysql, see Section 4.5.6,\n   \"mysqlshow --- Display Database, Table, and Column Information,\"\n   and Section 4.5.1, \"mysql --- The MySQL Command-Line Tool.\"\n\n   If you are running a version of Windows that supports services,\n   you can set up the MySQL server to run automatically when Windows\n   starts. See Section 2.3.4.8, \"Starting MySQL as a Windows\n   Service.\"\n\n2.4. Installing MySQL on Mac OS X\n\n   MySQL for Mac OS X is available in a number of different forms:\n\n     * Native Package Installer format, which uses the native Mac OS\n       X installer to walk you through the installation of MySQL. For\n       more information, see Section 2.4.2, \"Installing MySQL on Mac\n       OS X Using Native Packages.\" You can use the package installer\n       with Mac OS X 10.3 and later, and the package is available for\n       both PowerPC and Intel architectures, and 32-bit and 64-bit\n       architectures. There is no Universal Binary available using\n       the package installation method. The user you use to perform\n       the installation must have administrator privileges.\n\n     * Tar package format, which uses a file packaged using the Unix\n       tar and gzip commands. To use this method, you will need to\n       open a Terminal window. You do not need administrator\n       privileges using this method, as you can install the MySQL\n       server anywhere using this method. For more information on\n       using this method, you can use the generic instructions for\n       using a tarball, Section 2.2, \"Installing MySQL from Generic\n       Binaries on Unix/Linux.\"You can use the package installer with\n       Mac OS X 10.3 and later, and available for both PowerPC and\n       Intel architectures, and both 32-bit and 64-bit architectures.\n       A Universal Binary, incorporating both Power PC and Intel\n       architectures and 32-bit and 64-bit binaries is available.\n       In addition to the core installation, the Package Installer\n       also includes Section 2.4.3, \"Installing the MySQL Startup\n       Item\" and Section 2.4.4, \"Installing and Using the MySQL\n       Preference Pane,\" both of which simplify the management of\n       your installation.\n\n     * Mac OS X server includes a version of MySQL as standard. If\n       you want to use a more recent version than that supplied with\n       the Mac OS X server release, you can make use of the package\n       or tar formats. For more information on using the MySQL\n       bundled with Mac OS X, see Section 2.4.5, \"Using the Bundled\n       MySQL on Mac OS X Server.\"\n\n   For additional information on using MySQL on Mac OS X, see Section\n   2.4.1, \"General Notes on Installing MySQL on Mac OS X.\"\n\n2.4.1. General Notes on Installing MySQL on Mac OS X\n\n   You should keep the following issues and notes in mind:\n\n     * The default location for the MySQL Unix socket is different on\n       Mac OS X and Mac OS X Server depending on the installation\n       type you chose. The following table shows the default\n       locations by installation type.\n       Table 2.4. MySQL Unix Socket Locations on Mac OS X by\n       Installation Type\n\n               Installation Type             Socket Location\n       Package Installer from MySQL       /tmp/mysql.sock\n       Tarball from MySQL                 /tmp/mysql.sock\n       MySQL Bundled with Mac OS X Server /var/mysql/mysql.sock\n       To prevent issues, you should either change the configuration\n       of the socket used within your application (for example,\n       changing php.ini), or you should configure the socket location\n       using a MySQL configuration file and the socket option. For\n       more information, see Section 5.1.3, \"Server Command Options.\"\n\n     * You may need (or want) to create a specific mysql user to own\n       the MySQL directory and data. On Mac OS X 10.4 and lower you\n       can do this by using the Netinfo Manager application, located\n       within the Utilities folder within the Applications folder. On\n       Mac OS X 10.5 and later you can do this through the Directory\n       Utility. From Mac OS X 10.5 and later (including Mac OS X\n       Server 10.5) the mysql should already exist. For use in single\n       user mode, an entry for _mysql (note the underscore prefix)\n       should already exist within the system /etc/passwd file.\n\n     * Due to a bug in the Mac OS X package installer, you may see\n       this error message in the destination disk selection dialog:\nYou cannot install this software on this disk. (null)\n       If this error occurs, click the Go Back button once to return\n       to the previous screen. Then click Continue to advance to the\n       destination disk selection again, and you should be able to\n       choose the destination disk correctly. We have reported this\n       bug to Apple and it is investigating this problem.\n\n     * Because the MySQL package installer installs the MySQL\n       contents into a version and platform specific directory, you\n       can use this to upgrade and migrate your database between\n       versions. You will need to either copy the data directory from\n       the old version to the new version, or alternatively specify\n       an alternative datadir value to set location of the data\n       directory.\n\n     * You might want to add aliases to your shell's resource file to\n       make it easier to access commonly used programs such as mysql\n       and mysqladmin from the command line. The syntax for bash is:\nalias mysql=/usr/local/mysql/bin/mysql\nalias mysqladmin=/usr/local/mysql/bin/mysqladmin\n       For tcsh, use:\nalias mysql /usr/local/mysql/bin/mysql\nalias mysqladmin /usr/local/mysql/bin/mysqladmin\n       Even better, add /usr/local/mysql/bin to your PATH environment\n       variable. You can do this by modifying the appropriate startup\n       file for your shell. For more information, see Section 4.2.1,\n       \"Invoking MySQL Programs.\"\n\n     * After you have copied over the MySQL database files from the\n       previous installation and have successfully started the new\n       server, you should consider removing the old installation\n       files to save disk space. Additionally, you should also remove\n       older versions of the Package Receipt directories located in\n       /Library/Receipts/mysql-VERSION.pkg.\n\n2.4.2. Installing MySQL on Mac OS X Using Native Packages\n\n   You can install MySQL on Mac OS X 10.3.x (\"Panther\") or newer\n   using a Mac OS X binary package in PKG format instead of the\n   binary tarball distribution. Please note that older versions of\n   Mac OS X (for example, 10.1.x or 10.2.x) are not supported by this\n   package.\n\n   The package is located inside a disk image (.dmg) file that you\n   first need to mount by double-clicking its icon in the Finder. It\n   should then mount the image and display its contents.\n   Note\n\n   Before proceeding with the installation, be sure to stop all\n   running MySQL server instances by using either the MySQL Manager\n   Application (on Mac OS X Server) or mysqladmin shutdown on the\n   command line.\n\n   When installing from the package version, you should also install\n   the MySQL Preference Pane, which will enable you to control the\n   startup and execution of your MySQL server from System\n   Preferences. For more information, see Section 2.4.4, \"Installing\n   and Using the MySQL Preference Pane.\"\n\n   When installing using the package installer, the files are\n   installed into a directory within /usr/local matching the name of\n   the installation version and platform. For example, the installer\n   file mysql-5.1.39-osx10.5-x86_64.pkg installs MySQL into\n   /usr/local/mysql-5.1.39-osx10.5-x86_64 . The following table shows\n   the layout of the installation directory.\n\n   Table 2.5. MySQL Installation Layout on Mac OS X\n   Directory Contents of Directory\n   bin Client programs and the mysqld server\n   data Log files, databases\n   docs Manual in Info format\n   include Include (header) files\n   lib Libraries\n   man Unix manual pages\n   mysql-test MySQL test suite\n   scripts mysql_install_db\n   share Miscellaneous support files, including error messages,\n   sample configuration files, SQL for database installation\n   sql-bench Benchmarks\n   support-files Scripts and sample configuration files\n   /tmp/mysql.sock Location of the MySQL Unix socket\n\n   During the package installer process, a symbolic link from\n   /usr/local/mysql to the version/platform specific directory\n   created during installation will be created automatically.\n\n    1. Download and open the MySQL package installer, which is\n       provided on a disk image (.dmg) that includes the main MySQL\n       installation package, the MySQLStartupItem.pkg installation\n       package, and the MySQL.prefPane. Double-click the disk image\n       to open it.\n\n    2. Double-click the MySQL installer package. It will be named\n       according to the version of MySQL you have downloaded. For\n       example, if you have downloaded MySQL 5.1.39, double-click\n       mysql-5.1.39-osx10.5-x86.pkg.\n\n    3. You will be presented with the opening installer dialog. Click\n       Continue to begin installation.\n       MySQL Package Installer: Step 1\n\n    4. A copy of the installation instructions and other important\n       information relevant to this installation are displayed. Click\n       Continue .\n\n    5. If you have downloaded the community version of MySQL, you\n       will be shown a copy of the relevant GNU General Public\n       License. Click Continue .\n\n    6. Select the drive you want to use to install the MySQL Startup\n       Item. The drive must have a valid, bootable, Mac OS X\n       operating system installed. Click Continue.\n       MySQL Package Installer: Step 4\n\n    7. You will be asked to confirm the details of the installation,\n       including the space required for the installation. To change\n       the drive on which the startup item is installed, click either\n       Go Back or Change Install Location.... To install the startup\n       item, click Install.\n\n    8. Once the installation has been completed successfully, you\n       will be shown an Install Succeeded message.\n\n   For convenience, you may also want to install the startup item and\n   preference pane. See Section 2.4.3, \"Installing the MySQL Startup\n   Item,\" and Section 2.4.4, \"Installing and Using the MySQL\n   Preference Pane.\"\n\n2.4.3. Installing the MySQL Startup Item\n\n   The MySQL Installation Package includes a startup item that can be\n   used to automatically start and stop MySQL.\n\n   To install the MySQL Startup Item:\n\n    1. Download and open the MySQL package installer, which is\n       provided on a disk image (.dmg) that includes the main MySQL\n       installation package, the MySQLStartupItem.pkg installation\n       package, and the MySQL.prefPane. Double-click the disk image\n       to open it.\n\n    2. Double-click the MySQLStartItem.pkg file to start the\n       installation process.\n\n    3. You will be presented with the Install MySQL Startup Item\n       dialog.\n       MySQL Startup Item Installer: Step 1\n       Click Continue to continue the installation process.\n\n    4. A copy of the installation instructions and other important\n       information relevant to this installation are displayed. Click\n       Continue .\n\n    5. Select the drive you want to use to install the MySQL Startup\n       Item. The drive must have a valid, bootable, Mac OS X\n       operating system installed. Click Continue.\n       MySQL Startup Item Installer: Step 3\n\n    6. You will be asked to confirm the details of the installation.\n       To change the drive on which the startup item is installed,\n       click either Go Back or Change Install Location.... To install\n       the startup item, click Install.\n\n    7. Once the installation has been completed successfully, you\n       will be shown an Install Succeeded message.\n       MySQL Startup Item Installer: Step 5\n\n   The Startup Item for MySQL is installed into\n   /Library/StartupItems/MySQLCOM. The Startup Item installation adds\n   a variable MYSQLCOM=-YES- to the system configuration file\n   /etc/hostconfig. If you want to disable the automatic startup of\n   MySQL, change this variable to MYSQLCOM=-NO-.\n\n   After the installation, you can start and stop MySQL by running\n   the following commands in a terminal window. You must have\n   administrator privileges to perform these tasks, and you may be\n   prompted for your password.\n\n   If you have installed the Startup Item, use this command to start\n   the server:\nshell> sudo /Library/StartupItems/MySQLCOM/MySQLCOM start\n\n   If you have installed the Startup Item, use this command to stop\n   the server:\nshell> sudo /Library/StartupItems/MySQLCOM/MySQLCOM stop\n\n2.4.4. Installing and Using the MySQL Preference Pane\n\n   The MySQL Package installer disk image also includes a custom\n   MySQL Preference Pane that enables you to start, stop, and control\n   automated startup during boot of your MySQL installation.\n\n   To install the MySQL Preference Pane:\n\n    1. Download and open the MySQL package installer package, which\n       is provided on a disk image (.dmg) that includes the main\n       MySQL installation package, the MySQLStartupItem.pkg\n       installation package, and the MySQL.prefPane. Double-click the\n       disk image to open it.\n\n    2. Double-click the MySQL.prefPane. The MySQL System Preferences\n       will open.\n\n    3. If this is the first time you have installed the preference\n       pane, you will be asked to confirm installation and whether\n       you want to install the preference pane for all users, or only\n       the current user. To install the preference pane for all users\n       you will need administrator privileges. If necessary, you will\n       be prompted for the username and password for a user with\n       administrator privileges.\n\n    4. If you already have the MySQL Preference Pane installed, you\n       will be asked to confirm whether you want to overwrite the\n       existing MySQL Preference Pane.\n\n   Note\n\n   The MySQL Preference Pane only starts and stops MySQL installation\n   installed from the MySQL package installation that have been\n   installed in the default location.\n\n   Once the MySQL Preference Pane has been installed, you can control\n   your MySQL server instance using the preference pane. To use the\n   preference pane, open the System Preferences... from the Apple\n   menu. Select the MySQL preference pane by clicking the MySQL logo\n   within the Other section of the preference panes list.\n   MySQL Preference Pane\n\n   The MySQL Preference Pane shows the current status of the MySQL\n   server, showing stopped (in red) if the server is not running and\n   running (in green) if the server has already been started. The\n   preference pane also shows the current setting for whether the\n   MySQL server has been set to start automatically.\n\n     * To start MySQL using the preference pane: \n       Click Start MySQL Server. You may be prompted for the username\n       and password of a user with administrator privileges to start\n       the MySQL server.\n\n     * To stop MySQL using the preference pane: \n       Click Stop MySQL Server. You may be prompted for the username\n       and password of a user with administrator privileges to stop\n       the MySQL server.\n\n     * To automatically start the MySQL server when the system boots:\n       Check the check box next to Automatically Start MySQL Server\n       on Startup.\n\n     * To disable automatic MySQL server startup when the system\n       boots:\n       Uncheck the check box next to Automatically Start MySQL Server\n       on Startup.\n\n   You can close the System Preferences... window once you have\n   completed your settings.\n\n2.4.5. Using the Bundled MySQL on Mac OS X Server\n\n   If you are running Mac OS X Server, a version of MySQL should\n   already be installed. The following table shows the versions of\n   MySQL that ship with Mac OS X Server versions.\n\n   Table 2.6. MySQL Versions Preinstalled with Mac OS X Server\n   Mac OS X Server Version MySQL Version\n   10.2-10.2.2             3.23.51\n   10.2.3-10.2.6           3.23.53\n   10.3                    4.0.14\n   10.3.2                  4.0.16\n   10.4.0                  4.1.10a\n   10.5.0                  5.0.45\n   10.6.0                  5.0.82\n\n   The following table shows the installation layout of MySQL on Mac\n   OS X Server.\n\n   Table 2.7. MySQL Directory Layout for Preinstalled MySQL\n   Installations on Mac OS X Server\n   Directory Contents of Directory\n   /usr/bin Client programs\n   /var/mysql Log files, databases\n   /usr/libexec The mysqld server\n   /usr/share/man Unix manual pages\n   /usr/share/mysql/mysql-test MySQL test suite\n   /usr/share/mysql Miscellaneous support files, including error\n   messages, character set files, sample configuration files, SQL for\n   database installation\n   /var/mysql/mysql.sock Location of the MySQL Unix socket\n\nAdditional Resources\n\n\n     * For more information on managing the bundled MySQL instance in\n       Mac OS X Server 10.5, see Mac OS X Server: Web Technologies\n       Administration For Version 10.5 Leopard\n       (http://images.apple.com/server/macosx/docs/Web_Technologies_A\n       dmin_v10.5.pdf).\n\n     * For more information on managing the bundled MySQL instance in\n       Mac OS X Server 10.6, see Mac OS X Server: Web Technologies\n       Administration Version 10.6 Snow Leopard\n       (http://manuals.info.apple.com/en_US/WebTech_v10.6.pdf).\n\n     * The MySQL server bundled with Mac OS X Server does not include\n       the MySQL client libraries and header files required to access\n       and use MySQL from a third-party driver, such as Perl DBI or\n       PHP. For more information on obtaining and installing MySQL\n       libraries, see Mac OS X Server version 10.5: MySQL libraries\n       available for download (http://support.apple.com/kb/TA25017).\n       Alternatively, you can ignore the bundled MySQL server and\n       install MySQL from the package or tarball installation.\n\n2.5. Installing MySQL on Linux\n\n   Linux supports a number of different solutions for installing\n   MySQL. The recommended method is to use one of the distributions\n   from Oracle. If you choose this method, there are three options\n   available:\n\n     * Installing from a generic binary package in .tar.gz format.\n       See Section 2.2, \"Installing MySQL from Generic Binaries on\n       Unix/Linux\" for more information.\n\n     * Extracting and compiling MySQL from a source distribution. For\n       detailed instructions, see Section 2.9, \"Installing MySQL from\n       Source.\"\n\n     * Installing using a pre-compiled RPM package. For more\n       information on using the RPM solution, see Section 2.5.1,\n       \"Installing MySQL from RPM Packages on Linux.\"\n\n   As an alternative, you can use the native package manager within\n   your Linux distribution to automatically download and install\n   MySQL for you. Native package installations can take of the\n   download and dependencies required to run MySQL, but the MySQL\n   version will often be some way behind the currently available\n   release. You will also normally be unable to install developmental\n   releases, as these are not usually made available in the native\n   repository. For more information on using the native package\n   installers, see Section 2.5.2, \"Installing MySQL on Linux using\n   Native Package Manager.\"\n   Note\n\n   For many Linux installations, you will want to set up MySQL to be\n   started automatically when your machine starts. Many of the native\n   package installations perform this operation for you, but for\n   source, binary and RPM solutions you may need to set this up\n   separately. The required script, mysql.server, can be found in the\n   support-files directory under the MySQL installation directory or\n   in a MySQL source tree. You can install it as /etc/init.d/mysql\n   for automatic MySQL startup and shutdown. See Section 2.10.1.2,\n   \"Starting and Stopping MySQL Automatically.\"\n\n2.5.1. Installing MySQL from RPM Packages on Linux\n\n   The recommended way to install MySQL on RPM-based Linux\n   distributions is by using the RPM packages. The RPMs that we\n   provide to the community should work on all versions of Linux that\n   support RPM packages and use glibc 2.3. To obtain RPM packages,\n   see Section 2.1.3, \"How to Get MySQL.\"\n\n   For non-RPM Linux distributions, you can install MySQL using a\n   .tar.gz package. See Section 2.2, \"Installing MySQL from Generic\n   Binaries on Unix/Linux.\"\n\n   Installations created from our Linux RPM distributions result in\n   files under the following system directories.\n\n   Table 2.8. MySQL Installation Layout for Linux RPM\n   Directory Contents of Directory\n   /usr/bin Client programs and scripts\n   /usr/sbin The mysqld server\n   /var/lib/mysql Log files, databases\n   /usr/share/info Manual in Info format\n   /usr/share/man Unix manual pages\n   /usr/include/mysql Include (header) files\n   /usr/lib/mysql Libraries\n   /usr/share/mysql Miscellaneous support files, including error\n   messages, character set files, sample configuration files, SQL for\n   database installation\n   /usr/share/sql-bench Benchmarks\n   Note\n\n   RPM distributions of MySQL are also provided by other vendors. Be\n   aware that they may differ from those built by us in features,\n   capabilities, and conventions (including communication setup), and\n   that the instructions in this manual do not necessarily apply to\n   installing them. The vendor's instructions should be consulted\n   instead. Because of these differences, RPM packages built by us\n   check whether such RPMs built by other vendors are installed. If\n   so, the RPM does not install and produces a message explaining\n   this.\n\n   In most cases, you need to install only the MySQL-server and\n   MySQL-client packages to get a functional MySQL installation. The\n   other packages are not required for a standard installation.\n\n   As of MySQL 5.6.8, new RPM install operations (not upgrades)\n   invoke mysql_install_db with the --random-passwords option that\n   provides for more secure MySQL installation. Invoking\n   mysql_install_db with --random-passwords causes it to assign a\n   random password to the MySQL root accounts, set the \"password\n   expired\" flag for those accounts, and remove the anonymous-user\n   MySQL accounts. It will be necessary after installation to start\n   the server, connect as root using the password written to the\n   $HOME/.mysql.secret file, and assign a new root password. Until\n   this is done, root cannot do anything else. This must be done for\n   each root account you intend to use. To change the password, you\n   can use the SET PASSWORD statement (for example, with the mysql\n   client). You can also use mysqladmin or mysql_secure_installation.\n   For additional details, see Section 4.4.3, \"mysql_install_db ---\n   Initialize MySQL Data Directory.\" (Install operations using RPMs\n   for Unbreakable Linux Network are unaffected because they do not\n   use mysql_install_db.)\n\n   RPMs for MySQL Cluster.  Standard MySQL server RPMs built by MySQL\n   do not provide support for the NDBCLUSTER\n   (http://dev.mysql.com/doc/refman/5.5/en/mysql-cluster.html)\n   storage engine.\n   Important\n\n   When upgrading a MySQL Cluster RPM installation, you must upgrade\n   all installed RPMs, including the Server and Client RPMs.\n\n   For more information about installing MySQL Cluster from RPMs, see\n   MySQL Cluster Installation\n   (http://dev.mysql.com/doc/refman/5.5/en/mysql-cluster-installation\n   .html).\n\n   For upgrades, if your installation was originally produced by\n   installing multiple RPM packages, it is best to upgrade all the\n   packages, not just some. For example, if you previously installed\n   the server and client RPMs, do not upgrade just the server RPM.\n\n   If you get a dependency failure when trying to install MySQL\n   packages (for example, error: removing these packages would break\n   dependencies: libmysqlclient.so.10 is needed by ...), you should\n   also install the MySQL-shared-compat package, which includes the\n   shared libraries for older releases for backward compatibility.\n\n   The RPM packages shown in the following list are available. The\n   names shown here use a suffix of .glibc23.i386.rpm, but particular\n   packages can have different suffixes, described later.\n\n     * MySQL-server-VERSION.glibc23.i386.rpm\n       The MySQL server. You need this unless you only want to\n       connect to a MySQL server running on another machine.\n\n     * MySQL-client-VERSION.glibc23.i386.rpm\n       The standard MySQL client programs. You probably always want\n       to install this package.\n\n     * MySQL-devel-VERSION.glibc23.i386.rpm\n       The libraries and include files that are needed if you want to\n       compile other MySQL clients, such as the Perl modules.\n\n     * MySQL-shared-VERSION.glibc23.i386.rpm\n       This package contains the shared libraries\n       (libmysqlclient.so*) that certain languages and applications\n       need to dynamically load and use MySQL. It contains\n       single-threaded and thread-safe libraries.\n\n     * MySQL-shared-compat-VERSION.glibc23.i386.rpm\n       This package includes the shared libraries for older releases,\n       but not the libraries for the current release. It contains\n       single-threaded and thread-safe libraries. Install this\n       package if you have applications installed that are\n       dynamically linked against older versions of MySQL but you\n       want to upgrade to the current version without breaking the\n       library dependencies.\n       As of MySQL 5.6.5, the MySQL-shared-compat RPM package enables\n       users of Red Hat-provided mysql-*-5.1 RPM packages to migrate\n       to Oracle-provided MySQL-*-5.5 packages. MySQL-shared-compat\n       replaces the Red Hat mysql-libs package by replacing\n       libmysqlclient.so files of the latter package, thus satisfying\n       dependencies of other packages on mysql-libs. This change\n       affects only users of Red Hat (or Red Hat-compatible) RPM\n       packages. Nothing is different for users of Oracle RPM\n       packages.\n\n     * MySQL-embedded-VERSION.glibc23.i386.rpm\n       The embedded MySQL server library.\n\n     * MySQL-test-VERSION.glibc23.i386.rpm\n       This package includes the MySQL test suite.\n\n     * MySQL-VERSION.src.rpm\n       This contains the source code for all of the previous\n       packages. It can also be used to rebuild the RPMs on other\n       architectures (for example, Alpha or SPARC).\n\n   The suffix of RPM package names (following the VERSION value) has\n   the following syntax:\n.PLATFORM.CPU.rpm\n\n   The PLATFORM and CPU values indicate the type of system for which\n   the package is built. PLATFORM indicates the platform and CPU\n   indicates the processor type or family.\n\n   All packages are dynamically linked against glibc 2.3. The\n   PLATFORM value indicates whether the package is platform\n   independent or intended for a specific platform, as shown in the\n   following table.\n\n   Table 2.9. MySQL Linux Installation Packages\n   PLATFORM Value Intended Use\n   glibc23 Platform independent, should run on any Linux distribution\n   that supports glibc 2.3\n   rhel4, rhel5 Red Hat Enterprise Linux 4 or 5\n   el6 Enterprise Linux 6\n   sles10, sles11 SuSE Linux Enterprise Server 10 or 11\n\n   In MySQL 5.6, only glibc23 packages are available currently.\n\n   The CPU value indicates the processor type or family for which the\n   package is built.\n\n   Table 2.10. MySQL Installation Packages for Linux CPU Identifier\n      CPU Value      Intended Processor Type or Family\n   i386, i586, i686 Pentium processor or better, 32 bit\n   x86_64           64-bit x86 processor\n   ia64             Itanium (IA-64) processor\n\n   To see all files in an RPM package (for example, a MySQL-server\n   RPM), run a command like this:\nshell> rpm -qpl MySQL-server-VERSION.glibc23.i386.rpm\n\n   To perform a standard minimal installation, install the server and\n   client RPMs:\nshell> rpm -i MySQL-server-VERSION.glibc23.i386.rpm\nshell> rpm -i MySQL-client-VERSION.glibc23.i386.rpm\n\n   To install only the client programs, install just the client RPM:\nshell> rpm -i MySQL-client-VERSION.glibc23.i386.rpm\n\n   RPM provides a feature to verify the integrity and authenticity of\n   packages before installing them. If you would like to learn more\n   about this feature, see Section 2.1.4, \"Verifying Package\n   Integrity Using MD5 Checksums or GnuPG.\"\n\n   The server RPM places data under the /var/lib/mysql directory. The\n   RPM also creates a login account for a user named mysql (if one\n   does not exist) to use for running the MySQL server, and creates\n   the appropriate entries in /etc/init.d/ to start the server\n   automatically at boot time. (This means that if you have performed\n   a previous installation and have made changes to its startup\n   script, you may want to make a copy of the script so that you do\n   not lose it when you install a newer RPM.) See Section 2.10.1.2,\n   \"Starting and Stopping MySQL Automatically,\" for more information\n   on how MySQL can be started automatically on system startup.\n\n   In MySQL 5.6, during a new installation, the server boot scripts\n   are installed, but the MySQL server is not started at the end of\n   the installation, since the status of the server during an\n   unattended installation is not known.\n\n   In MySQL 5.6, during an upgrade installation using the RPM\n   packages, if the MySQL server is running when the upgrade occurs,\n   the MySQL server is stopped, the upgrade occurs, and the MySQL\n   server is restarted. If the MySQL server is not already running\n   when the RPM upgrade occurs, the MySQL server is not started at\n   the end of the installation.\n\n   If something goes wrong, you can find more information in the\n   binary installation section. See Section 2.2, \"Installing MySQL\n   from Generic Binaries on Unix/Linux.\"\n   Note\n\n   The accounts that are listed in the MySQL grant tables initially\n   have no passwords. After starting the server, you should set up\n   passwords for them using the instructions in Section 2.10,\n   \"Postinstallation Setup and Testing.\"\n\n   During RPM installation, a user named mysql and a group named\n   mysql are created on the system. This is done using the useradd,\n   groupadd, and usermod commands. Those commands require appropriate\n   administrative privileges, which is required for locally managed\n   users and groups (as listed in the /etc/passwd and /etc/group\n   files) by the RPM installation process being run by root.\n\n   If you log in as the mysql user, you may find that MySQL displays\n   \"Invalid (old?) table or database name\" errors that mention\n   .mysqlgui, lost+found, .mysqlgui, .bash_history, .fonts.cache-1,\n   .lesshst, .mysql_history, .profile, .viminfo, and similar files\n   created by MySQL or operating system utilities. You can safely\n   ignore these error messages or remove the files or directories\n   that cause them if you do not need them.\n\n   For nonlocal user management (LDAP, NIS, and so forth), the\n   administrative tools may require additional authentication (such\n   as a password), and will fail if the installing user does not\n   provide this authentication. Even if they fail, the RPM\n   installation will not abort but succeed, and this is intentional.\n   If they failed, some of the intended transfer of ownership may be\n   missing, and it is recommended that the system administrator then\n   manually ensures some appropriate user and group exists and\n   manually transfers ownership following the actions in the RPM spec\n   file.\n\n2.5.2. Installing MySQL on Linux using Native Package Manager\n\n   Many Linux distributions include a version of the MySQL server,\n   client tools, and development components into the standard package\n   management system built into distributions such as Fedora, Debian,\n   Ubuntu, and Gentoo. This section provides basic instructions for\n   installing MySQL using these systems.\n   Important\n\n   Native package installations can take care of the download and\n   dependencies required to run MySQL, but the MySQL version will\n   often be some way behind the currently available release. You will\n   also normally be unable to install developmental releases, as\n   these are not usually made available in the native repository.\n\n   Distribution specific instructions are shown below:\n\n     * Red Hat Linux, Fedora, CentOS\n       For Red Hat and similar distributions, the MySQL distribution\n       is divided into a number of separate packages, mysql for the\n       client tools, mysql-server for the server and associated\n       tools, and mysql-libs for the libraries. The libraries are\n       required if you want to provide connectivity from different\n       languages and environments such as Perl, Python and others.\n       To install, use the yum command to specify the packages that\n       you want to install. For example:\nroot-shell> yum install mysql mysql-server mysql-libs mysql-server\nLoaded plugins: presto, refresh-packagekit\nSetting up Install Process\nResolving Dependencies\n--> Running transaction check\n---> Package mysql.x86_64 0:5.1.48-2.fc13 set to be updated\n---> Package mysql-libs.x86_64 0:5.1.48-2.fc13 set to be updated\n---> Package mysql-server.x86_64 0:5.1.48-2.fc13 set to be updated\n--> Processing Dependency: perl-DBD-MySQL for package: mysql-server-5\n.1.48-2.fc13.x86_64\n--> Running transaction check\n---> Package perl-DBD-MySQL.x86_64 0:4.017-1.fc13 set to be updated\n--> Finished Dependency Resolution\n\nDependencies Resolved\n\n=====================================================================\n===========\n Package               Arch          Version               Repository\n      Size\n=====================================================================\n===========\nInstalling:\n mysql                 x86_64        5.1.48-2.fc13         updates\n     889 k\n mysql-libs            x86_64        5.1.48-2.fc13         updates\n     1.2 M\n mysql-server          x86_64        5.1.48-2.fc13         updates\n     8.1 M\nInstalling for dependencies:\n perl-DBD-MySQL        x86_64        4.017-1.fc13          updates\n     136 k\n\nTransaction Summary\n=====================================================================\n===========\nInstall       4 Package(s)\nUpgrade       0 Package(s)\n\nTotal download size: 10 M\nInstalled size: 30 M\nIs this ok [y/N]: y\nDownloading Packages:\nSetting up and reading Presto delta metadata\nProcessing delta metadata\nPackage(s) data still to download: 10 M\n(1/4): mysql-5.1.48-2.fc13.x86_64.rpm                    | 889 kB\n 00:04\n(2/4): mysql-libs-5.1.48-2.fc13.x86_64.rpm               | 1.2 MB\n 00:06\n(3/4): mysql-server-5.1.48-2.fc13.x86_64.rpm             | 8.1 MB\n 00:40\n(4/4): perl-DBD-MySQL-4.017-1.fc13.x86_64.rpm            | 136 kB\n 00:00\n---------------------------------------------------------------------\n-----------\nTotal                                           201 kB/s |  10 MB\n 00:52\nRunning rpm_check_debug\nRunning Transaction Test\nTransaction Test Succeeded\nRunning Transaction\n  Installing     : mysql-libs-5.1.48-2.fc13.x86_64\n       1/4\n  Installing     : mysql-5.1.48-2.fc13.x86_64\n       2/4\n  Installing     : perl-DBD-MySQL-4.017-1.fc13.x86_64\n       3/4\n  Installing     : mysql-server-5.1.48-2.fc13.x86_64\n       4/4\n\nInstalled:\n  mysql.x86_64 0:5.1.48-2.fc13            mysql-libs.x86_64 0:5.1.48-\n2.fc13\n  mysql-server.x86_64 0:5.1.48-2.fc13\n\nDependency Installed:\n  perl-DBD-MySQL.x86_64 0:4.017-1.fc13\n\n\nComplete!\n       MySQL and the MySQL server should now be installed. A sample\n       configuration file is installed into /etc/my.cnf. An init\n       script, to start and stop the server, will have been installed\n       into /etc/init.d/mysqld. To start the MySQL server use\n       service:\nroot-shell> service mysqld start\n       To enable the server to be started and stopped automatically\n       during boot, use chkconfig:\nroot-shell> chkconfig --levels 235 mysqld on\n       Which enables the MySQL server to be started (and stopped)\n       automatically at the specified the run levels.\n       The database tables will have been automatically created for\n       you, if they do not already exist. You should, however, run\n       mysql_secure_installation to set the root passwords on your\n       server.\n\n     * Debian, Ubuntu, Kubuntu\n       On Debian and related distributions, there are two packages,\n       mysql-client and mysql-server, for the client and server\n       components respectively. You should specify an explicit\n       version, for example mysql-client-5.1, to ensure that you\n       install the version of MySQL that you want.\n       To download and install, including any dependencies, use the\n       apt-get command, specifying the packages that you want to\n       install.\n       Note\n       Before installing, make sure that you update your apt-get\n       index files to ensure you are downloading the latest available\n       version.\n       A sample installation of the MySQL packages might look like\n       this (some sections trimmed for clarity):\nroot-shell> apt-get install mysql-client-5.1 mysql-server-5.1\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following packages were automatically installed and are no longer\n required:\n  linux-headers-2.6.28-11 linux-headers-2.6.28-11-generic\nUse 'apt-get autoremove' to remove them.\nThe following extra packages will be installed:\n  bsd-mailx libdbd-mysql-perl libdbi-perl libhtml-template-perl\n  libmysqlclient15off libmysqlclient16 libnet-daemon-perl libplrpc-pe\nrl mailx\n  mysql-common postfix\nSuggested packages:\n  dbishell libipc-sharedcache-perl tinyca procmail postfix-mysql post\nfix-pgsql\n  postfix-ldap postfix-pcre sasl2-bin resolvconf postfix-cdb\nThe following NEW packages will be installed\n  bsd-mailx libdbd-mysql-perl libdbi-perl libhtml-template-perl\n  libmysqlclient15off libmysqlclient16 libnet-daemon-perl libplrpc-pe\nrl mailx\n  mysql-client-5.1 mysql-common mysql-server-5.1 postfix\n0 upgraded, 13 newly installed, 0 to remove and 182 not upgraded.\nNeed to get 1907kB/25.3MB of archives.\nAfter this operation, 59.5MB of additional disk space will be used.\nDo you want to continue [Y/n]? Y\nGet: 1 http://gb.archive.ubuntu.com jaunty-updates/main mysql-common\n5.1.30really5.0.75-0ubuntu10.5 [63.6kB]\nGet: 2 http://gb.archive.ubuntu.com jaunty-updates/main libmysqlclien\nt15off 5.1.30really5.0.75-0ubuntu10.5 [1843kB]\nFetched 1907kB in 9s (205kB/s)\n\nPreconfiguring packages ...\nSelecting previously deselected package mysql-common.\n(Reading database ... 121260 files and directories currently installe\nd.)\n...\nProcessing 1 added doc-base file(s)...\nRegistering documents with scrollkeeper...\nSetting up libnet-daemon-perl (0.43-1) ...\nSetting up libplrpc-perl (0.2020-1) ...\nSetting up libdbi-perl (1.607-1) ...\nSetting up libmysqlclient15off (5.1.30really5.0.75-0ubuntu10.5) ...\n\nSetting up libdbd-mysql-perl (4.008-1) ...\nSetting up libmysqlclient16 (5.1.31-1ubuntu2) ...\n\nSetting up mysql-client-5.1 (5.1.31-1ubuntu2) ...\n\nSetting up mysql-server-5.1 (5.1.31-1ubuntu2) ...\n\n * Stopping MySQL database server mysqld\n   ...done.\n100825 11:46:15  InnoDB: Started; log sequence number 0 46409\n100825 11:46:15  InnoDB: Starting shutdown...\n100825 11:46:17  InnoDB: Shutdown completed; log sequence number 0 46\n409\n100825 11:46:17 [Warning] Forcing shutdown of 1 plugins\n\n * Starting MySQL database server mysqld\n   ...done.\n\n * Checking for corrupt, not cleanly closed and upgrade needing table\ns.\n...\nProcessing triggers for libc6 ...\nldconfig deferred processing now taking place\n       Note\n       The apt-get command will install a number of packages,\n       including the MySQL server, in order to provide the typical\n       tools and application environment. This can mean that you\n       install a large number of packages in addition to the main\n       MySQL package.\n       During installation, the initial database will be created, and\n       you will be prompted for the MySQL root password (and\n       confirmation). A configuration file will have been created in\n       /etc/mysql/my.cnf. An init script will have been created in\n       /etc/init.d/mysql.\n       The server will already be started. You can manually start and\n       stop the server using:\nroot-shell> service mysql [start|stop]\n       The service will automatically be added to the 2, 3 and 4 run\n       levels, with stop scripts in the single, shutdown and restart\n       levels.\n\n     * Gentoo Linux\n       As a source-based distribution, installing MySQL on Gentoo\n       involves downloading the source, patching the Gentoo\n       specifics, and then compiling the MySQL server and installing\n       it. This process is handled automatically by the emerge\n       command. Depending on the version of MySQL that you want to\n       install, you may need to unmask the specific version that you\n       want for your chosen platform.\n       The MySQL server and client tools are provided within a single\n       package, dev-db/mysql. You can obtain a list of the versions\n       available to install by looking at the portage directory for\n       the package:\nroot-shell> ls /usr/portage/dev-db/mysql/mysql-5.1*\nmysql-5.1.39-r1.ebuild\nmysql-5.1.44-r1.ebuild\nmysql-5.1.44-r2.ebuild\nmysql-5.1.44-r3.ebuild\nmysql-5.1.44.ebuild\nmysql-5.1.45-r1.ebuild\nmysql-5.1.45.ebuild\nmysql-5.1.46.ebuild\n       To install a specific MySQL version, you must specify the\n       entire atom. For example:\nroot-shell> emerge =dev-db/mysql-5.1.46\n       A simpler alternative is to use the virtual/mysql-5.1 package,\n       which will install the latest version:\nroot-shell> emerge =virtual/mysql-5.1\n       If the package is masked (because it is not tested or\n       certified for the current platform), use the ACCEPT_KEYWORDS\n       environment variable. For example:\nroot-shell> ACCEPT_KEYWORDS=\"~x86\" emerge =virtual/mysql-5.1\n       After installation, you should create a new database using\n       mysql_install_db, and set the password for the root user on\n       MySQL. You can use the configuration interface to set the\n       password and create the initial database:\nroot-shell> emerge --config =dev-db/mysql-5.1.46\n       A sample configuration file will have been created for you in\n       /etc/mysql/my.cnf, and an init script will have been created\n       in /etc/init.d/mysql.\n       To enable MySQL to start automatically at the normal (default)\n       run levels, you can use:\nroot-shell> rc-update add mysql default\n\n2.6. Installing MySQL on Solaris and OpenSolaris\n\n   MySQL on Solaris and OpenSolaris is available in a number of\n   different formats.\n\n     * For information on installing using the native Solaris PKG\n       format, see Section 2.6.1, \"Installing MySQL on Solaris using\n       a Solaris PKG.\"\n\n     * On OpenSolaris, the standard package repositories include\n       MySQL packages specially built for OpenSolaris that include\n       entries for the Service Management Framework (SMF) to enable\n       control of the installation using the SMF administration\n       commands. For more information, see Section 2.6.2, \"Installing\n       MySQL on OpenSolaris using IPS.\"\n\n     * To use a standard tar binary installation, use the notes\n       provided in Section 2.2, \"Installing MySQL from Generic\n       Binaries on Unix/Linux.\" Check the notes and hints at the end\n       of this section for Solaris specific notes that you may need\n       before or after installation.\n\n   To obtain a binary MySQL distribution for Solaris in tarball or\n   PKG format, http://dev.mysql.com/downloads/mysql/5.6.html.\n\n   Additional notes to be aware of when installing and using MySQL on\n   Solaris:\n\n     * If you want to use MySQL with the mysql user and group, use\n       the groupadd and useradd commands:\ngroupadd mysql\nuseradd -g mysql mysql\n\n     * If you install MySQL using a binary tarball distribution on\n       Solaris, you may run into trouble even before you get the\n       MySQL distribution unpacked, as the Solaris tar cannot handle\n       long file names. This means that you may see errors when you\n       try to unpack MySQL.\n       If this occurs, you must use GNU tar (gtar) to unpack the\n       distribution. In Solaris 10 and OpenSolaris gtar is normally\n       located in /usr/sfw/bin/gtar, but may not be included in the\n       default path definition.\n\n     * When using Solaris 10 for x86_64, you should mount any file\n       systems on which you intend to store InnoDB files with the\n       forcedirectio option. (By default mounting is done without\n       this option.) Failing to do so will cause a significant drop\n       in performance when using the InnoDB storage engine on this\n       platform.\n\n     * If you would like MySQL to start automatically, you can copy\n       support-files/mysql.server to /etc/init.d and create a\n       symbolic link to it named /etc/rc3.d/S99mysql.server.\n\n     * If too many processes try to connect very rapidly to mysqld,\n       you should see this error in the MySQL log:\nError in accept: Protocol error\n       You might try starting the server with the --back_log=50\n       option as a workaround for this.\n\n     * To configure the generation of core files on Solaris you\n       should use the coreadm command. Because of the security\n       implications of generating a core on a setuid() application,\n       by default, Solaris does not support core files on setuid()\n       programs. However, you can modify this behavior using coreadm.\n       If you enable setuid() core files for the current user, they\n       will be generated using the mode 600 and owned by the\n       superuser.\n\n2.6.1. Installing MySQL on Solaris using a Solaris PKG\n\n   You can install MySQL on Solaris and OpenSolaris using a binary\n   package using the native Solaris PKG format instead of the binary\n   tarball distribution.\n\n   To use this package, download the corresponding\n   mysql-VERSION-solaris10-PLATFORM.pkg.gz file, then decompress it.\n   For example:\nshell> gunzip mysql-5.6.11-solaris10-x86_64.pkg.gz\n\n   To install a new package, use pkgadd and follow the onscreen\n   prompts. You must have root privileges to perform this operation:\nshell> pkgadd -d mysql-5.6.11-solaris10-x86_64.pkg\n\nThe following packages are available:\n  1  mysql     MySQL Community Server (GPL)\n               (i86pc) 5.6.11\n\nSelect package(s) you wish to process (or 'all' to process\nall packages). (default: all) [?,??,q]:\n\n   The PKG installer installs all of the files and tools needed, and\n   then initializes your database if one does not exist. To complete\n   the installation, you should set the root password for MySQL as\n   provided in the instructions at the end of the installation.\n   Alternatively, you can run the mysql_secure_installation script\n   that comes with the installation.\n\n   The default installation directory is /opt/mysql. You can only\n   change the root path of the installation when using pkgadd, which\n   can be used to install MySQL in a different Solaris zone. If you\n   need to install in a specific directory, use the binary tar file.\n\n   The pkg installer copies a suitable startup script for MySQL into\n   /etc/init.d/mysql. To enable MySQL to startup and shutdown\n   automatically, you should create a link between this file and the\n   init script directories. For example, to ensure safe startup and\n   shutdown of MySQL you could use the following commands to add the\n   right links:\nshell> ln /etc/init.d/mysql /etc/rc3.d/S91mysql\nshell> ln /etc/init.d/mysql /etc/rc0.d/K02mysql\n\n   To remove MySQL, the installed package name is mysql. You can use\n   this in combination with the pkgrm command to remove the\n   installation.\n\n   To upgrade when using the Solaris package file format, you must\n   remove the existing installation before installing the updated\n   package. Removal of the package does not delete the existing\n   database information, only the server, binaries and support files.\n   The typical upgrade sequence is therefore:\nshell> mysqladmin shutdown\nshell> pkgrm mysql\nshell> pkgadd -d mysql-5.6.11-solaris10-x86_64.pkg\nshell> mysqld_safe &\nshell> mysql_upgrade\n\n   You should check the notes in Section 2.11, \"Upgrading or\n   Downgrading MySQL\" before performing any upgrade.\n\n2.6.2. Installing MySQL on OpenSolaris using IPS\n\n   OpenSolaris includes standard packages for MySQL in the core\n   repository. The MySQL packages are based on a specific release of\n   MySQL and updated periodically. For the latest release you must\n   use either the native Solaris PKG, tar, or source installations.\n   The native OpenSolaris packages include SMF files so that you can\n   easily control your MySQL installation, including automatic\n   startup and recovery, using the native service management tools.\n\n   To install MySQL on OpenSolaris, use the pkg command. You will\n   need to be logged in as root, or use the pfexec tool, as shown in\n   the example below:\nshell> pfexec pkg install SUNWmysql56\n\n   The package set installs three individual packages,\n   SUNWmysql56lib, which contains the MySQL client libraries;\n   SUNWmysql56r which contains the root components, including SMF and\n   configuration files; and SUNWmysql56u which contains the scripts,\n   binary tools and other files. You can install these packages\n   individually if you only need the corresponding components.\n\n   The MySQL files are installed into /usr/mysql which symbolic links\n   for the sub directories (bin, lib, etc.) to a version specific\n   directory. For MySQL 5.6, the full installation is located in\n   /usr/mysql/5.6. The default data directory is /var/mysql/5.6/data.\n   The configuration file is installed in /etc/mysql/5.6/my.cnf. This\n   layout permits multiple versions of MySQL to be installed, without\n   overwriting the data and binaries from other versions.\n\n   Once installed, you must run mysql_install_db to initialize the\n   database, and use the mysql_secure_installation to secure your\n   installation.\n\nUsing SMF to manage your MySQL installation\n\n   Once installed, you can start and stop your MySQL server using the\n   installed SMF configuration. The service name is mysql, or if you\n   have multiple versions installed, you should use the full version\n   name, for example mysql:version_56. To start and enable MySQL to\n   be started at boot time:\nshell> svcadm enable mysql\n\n   To disable MySQL from starting during boot time, and shut the\n   MySQL server down if it is running, use:\nshell> svcadm disable mysql\n\n   To restart MySQL, for example after a configuration file changes,\n   use the restart option:\nshell> svcadm restart mysql\n\n   You can also use SMF to configure the data directory and enable\n   full 64-bit mode. For example, to set the data directory used by\n   MySQL:\nshell> svccfg\nsvc:> select mysql:version_56\nsvc:/application/database/mysql:version_56> setprop mysql/data=/data0\n/mysql\n\n\n   By default, the 32-bit binaries are used. To enable the 64-bit\n   server on 64-bit platforms, set the enable_64bit parameter. For\n   example:\nsvc:/application/database/mysql:version_56> setprop mysql/enable_64bi\nt=1\n\n   You need to refresh the SMF after settings these options:\nshell> svcadm refresh mysql\n\n2.7. Installing MySQL on HP-UX\n\n   MySQL for HP-UX is available in a number of different forms:\n\n     * Using a DEPOT distribution provided at\n       http://dev.mysql.com/downloads/. Please read the general notes\n       on HP-UX installation before continuing. For more information\n       on DEPOT installations, see Section 2.7.2, \"Installing MySQL\n       on HP-UX using DEPOT.\"\n\n     * Using a binary tarball distribution provided at\n       http://dev.mysql.com/downloads/. Please read the general notes\n       on HP-UX installation before continuing. For more information\n       on binary installations, see Section 2.2, \"Installing MySQL\n       from Generic Binaries on Unix/Linux.\"\n\n2.7.1. General Notes on Installing MySQL on HP-UX\n\n   Some additional notes on installing and using MySQL on HP-UX:\n\n     * If you install MySQL using a binary tarball distribution on\n       HP-UX, you may run into trouble even before you get the MySQL\n       distribution unpacked, as the HP-UX tar cannot handle long\n       file names. This means that you may see errors when you try to\n       unpack MySQL.\n       If this occurs, you must use GNU tar (gtar) to unpack the\n       distribution.\n\n     * Because of some critical bugs in the standard HP-UX libraries,\n       you should install the following patches before trying to run\n       MySQL on HP-UX 11.0:\nPHKL_22840 Streams cumulative\nPHNE_22397 ARPA cumulative\n       This solves the problem of getting EWOULDBLOCK from recv() and\n       EBADF from accept() in threaded applications.\n\n2.7.2. Installing MySQL on HP-UX using DEPOT\n\n   The HP-UX DEPOT format packages can be installed using the\n   swinstall command. You should install the ncurses and zlib\n   libraries before installing the MySQL DEPOT package. You can use\n   the free software depothelper tool to install these packages and\n   any dependencies for you automatically.\n\n   To install using the MySQL DEPOT packages, follow this guide:\n\n    1. Download the MySQL DEPOT package from\n       http://dev.mysql.com/downloads/. You must decompress the\n       package before installation:\nroot-shell> gunzip mysql-5.1.48-hpux11.31-ia64-64bit.depot.gz\n\n    2. Install the DEPOT package using swinstall:\nroot-shell> swinstall -s mysql-5.1.49-hpux11.31-ia64-64bit.depot\n       MySQL will be installed into a directory matching the depot\n       package name, within /usr/local. For convenience, you may want\n       to create a symbolic link to the installed directory, for\n       example:\nroot-shell> ln -s mysql-5.1.49-hpux11.31-ia64-64bit mysql\n\n    3. Your package is now installed. You should complete the\n       configuration of MySQL by creating a user and group:\nroot-shell> /usr/sbin/groupadd mysql\nroot-shell> /usr/sbin/useradd -g mysql -d /var/lib/mysql/ -s /bin/fal\nse mysql\n\n    4. Create the standard database using the new user/group you have\n       created, and set the permissions:\nroot-shell> cd /usr/local/\nroot-shell> scripts/mysql_install_db --user=mysql\nroot-shell> chown -R root .\nroot-shell> chown -R mysql data\n\n    5. Finally, secure your new installation by setting the root\n       passwords, and then start your MySQL server using the mysql\n       user:\nroot-shell> mysql_secure_installation\nroot-shell> mysqld_safe --user=mysql &\n\n2.8. Installing MySQL on FreeBSD\n\n   This section provides information about installing MySQL on\n   variants of FreeBSD Unix.\n\n   You can install MySQL on FreeBSD by using the binary distribution\n   provided by Oracle. For more information, see Section 2.2,\n   \"Installing MySQL from Generic Binaries on Unix/Linux.\"\n\n   The easiest (and preferred) way to install MySQL is to use the\n   mysql-server and mysql-client ports available at\n   http://www.freebsd.org/. Using these ports gives you the following\n   benefits:\n\n     * A working MySQL with all optimizations enabled that are known\n       to work on your version of FreeBSD.\n\n     * Automatic configuration and build.\n\n     * Startup scripts installed in /usr/local/etc/rc.d.\n\n     * The ability to use pkg_info -L to see which files are\n       installed.\n\n     * The ability to use pkg_delete to remove MySQL if you no longer\n       want it on your machine.\n\n   The MySQL build process requires GNU make (gmake) to work. If GNU\n   make is not available, you must install it first before compiling\n   MySQL.\n\n   To install using the ports system:\n# cd /usr/ports/databases/mysql51-server\n# make\n...\n# cd /usr/ports/databases/mysql51-client\n# make\n...\n\n   The standard port installation places the server into\n   /usr/local/libexec/mysqld, with the startup script for the MySQL\n   server placed in /usr/local/etc/rc.d/mysql-server.\n\n   Some additional notes on the BSD implementation:\n\n     * To remove MySQL after installation using the ports system:\n# cd /usr/ports/databases/mysql51-server\n# make deinstall\n...\n# cd /usr/ports/databases/mysql51-client\n# make deinstall\n...\n\n     * If you get problems with the current date in MySQL, setting\n       the TZ variable should help. See Section 2.12, \"Environment\n       Variables.\"\n\n2.9. Installing MySQL from Source\n\n   Building MySQL from the source code enables you to customize build\n   parameters, compiler optimizations, and installation location. For\n   a list of systems on which MySQL is known to run, see Section\n   2.1.1, \"Operating Systems Supported by MySQL Community Server.\"\n\n   Before you proceed with an installation from source, check whether\n   Oracle produces a precompiled binary distribution for your\n   platform and whether it works for you. We put a great deal of\n   effort into ensuring that our binaries are built with the best\n   possible options for optimal performance. Instructions for\n   installing binary distributions are available in Section 2.2,\n   \"Installing MySQL from Generic Binaries on Unix/Linux.\"\n\nSource Installation Methods\n\n   There are two methods for installing MySQL from source:\n\n     * Use a standard MySQL source distribution. To obtain a standard\n       distribution, see Section 2.1.3, \"How to Get MySQL.\" For\n       instructions on building from a standard distribution, see\n       Section 2.9.2, \"Installing MySQL from a Standard Source\n       Distribution.\"\n       Standard distributions are available as compressed tar files,\n       Zip archives, or RPM packages. Distribution files have names\n       of the form mysql-VERSION.tar.gz, mysql-VERSION.zip, or\n       mysql-VERSION.rpm, where VERSION is a number like 5.6.11. File\n       names for source distributions can be distinguished from those\n       for precompiled binary distributions in that source\n       distribution names are generic and include no platform name,\n       whereas binary distribution names include a platform name\n       indicating the type of system for which the distribution is\n       intended (for example, pc-linux-i686 or winx64).\n\n     * Use a MySQL development tree. Development trees have not\n       necessarily received the same level of testing as standard\n       release distributions, so this installation method is usually\n       required only if you need the most recent code changes. For\n       information on building from one of the development trees, see\n       Section 2.9.3, \"Installing MySQL from a Development Source\n       Tree.\"\n\nSource Installation System Requirements\n\n   Installation of MySQL from source requires several development\n   tools. Some of these tools are needed no matter whether you use a\n   standard source distribution or a development source tree. Other\n   tool requirements depend on which installation method you use.\n\n   To install MySQL from source, your system must have the following\n   tools, regardless of installation method:\n\n     * CMake, which is used as the build framework on all platforms.\n       CMake can be downloaded from http://www.cmake.org.\n\n     * A good make program. Although some platforms come with their\n       own make implementations, it is highly recommended that you\n       use GNU make 3.75 or newer. It may already be available on\n       your system as gmake. GNU make is available from\n       http://www.gnu.org/software/make/.\n\n     * A working ANSI C++ compiler. GCC 4.2.1 or later, Sun Studio 10\n       or later, Visual Studio 2008 or later, and many current\n       vendor-supplied compilers are known to work.\n\n     * Perl is needed if you intend to run test scripts. Most\n       Unix-like systems include Perl. On Windows, you can use a\n       version such as ActiveState Perl.\n\n   To install MySQL from a standard source distribution, one of the\n   following tools is required to unpack the distribution file:\n\n     * For a .tar.gz compressed tar file: GNU gunzip to uncompress\n       the distribution and a reasonable tar to unpack it. If your\n       tar program supports the z option, it can both uncompress and\n       unpack the file.\n       GNU tar is known to work. The standard tar provided with some\n       operating systems is not able to unpack the long file names in\n       the MySQL distribution. You should download and install GNU\n       tar, or if available, use a preinstalled version of GNU tar.\n       Usually this is available as gnutar, gtar, or as tar within a\n       GNU or Free Software directory, such as /usr/sfw/bin or\n       /usr/local/bin. GNU tar is available from\n       http://www.gnu.org/software/tar/.\n\n     * For a .zip Zip archive: WinZip or another tool that can read\n       .zip files.\n\n     * For an .rpm RPM package: The rpmbuild program used to build\n       the distribution unpacks it.\n\n   To install MySQL from a development source tree, the following\n   additional tools are required:\n\n     * To obtain the source tree, you must have Bazaar installed. The\n       Bazaar VCS Web site (http://bazaar-vcs.org) has instructions\n       for downloading and installing Bazaar on different platforms.\n       Bazaar is supported on any platform that supports Python, and\n       is therefore compatible with any Linux, Unix, Windows, or Mac\n       OS X host.\n\n     * bison is needed to generate sql_yacc.cc from sql_yacc.yy You\n       should use the latest version of bison where possible.\n       Versions 1.75 and 2.1 are known to work. There have been\n       reported problems with bison 1.875. If you experience\n       problems, upgrade to a later, rather than earlier, version.\n       bison is available from http://www.gnu.org/software/bison/.\n       bison for Windows can be downloaded from\n       http://gnuwin32.sourceforge.net/packages/bison.htm. Download\n       the package labeled \"Complete package, excluding sources\". On\n       Windows, the default location for bison is the C:\\Program\n       Files\\GnuWin32 directory. Some utilities may fail to find\n       bison because of the space in the directory name. Also, Visual\n       Studio may simply hang if there are spaces in the path. You\n       can resolve these problems by installing into a directory that\n       does not contain a space; for example C:\\GnuWin32.\n\n     * On OpenSolaris and Solaris Express, m4 must be installed in\n       addition to bison. m4 is available from\n       http://www.gnu.org/software/m4/.\n\n   Note\n\n   If you have to install any programs, modify your PATH environment\n   variable to include any directories in which the programs are\n   located. See Section 4.2.4, \"Setting Environment Variables.\"\n\n   If you run into problems and need to file a bug report, please use\n   the instructions in Section 1.7, \"How to Report Bugs or Problems.\"\n\n2.9.1. MySQL Layout for Source Installation\n\n   By default, when you install MySQL after compiling it from source,\n   the installation step installs files under /usr/local/mysql. The\n   component locations under the installation directory are the same\n   as for binary distributions. See Section 2.2, \"MySQL Installation\n   Layout for Generic Unix/Linux Binary Package,\" and Section 2.3.1,\n   \"MySQL Installation Layout on Microsoft Windows.\" To configure\n   installation locations different from the defaults, use the\n   options described at Section 2.9.4, \"MySQL Source-Configuration\n   Options.\"\n\n2.9.2. Installing MySQL from a Standard Source Distribution\n\n   To install MySQL from a standard source distribution:\n\n    1. Verify that your system satisfies the tool requirements listed\n       at Section 2.9, \"Installing MySQL from Source.\"\n\n    2. Obtain a distribution file using the instructions in Section\n       2.1.3, \"How to Get MySQL.\"\n\n    3. Configure, build, and install the distribution using the\n       instructions in this section.\n\n    4. Perform postinstallation procedures using the instructions in\n       Section 2.10, \"Postinstallation Setup and Testing.\"\n\n   In MySQL 5.6, CMake is used as the build framework on all\n   platforms. The instructions given here should enable you to\n   produce a working installation. For additional information on\n   using CMake to build MySQL, see How to Build MySQL Server with\n   CMake (http://dev.mysql.com/doc/internals/en/cmake.html).\n\n   If you start from a source RPM, use the following command to make\n   a binary RPM that you can install. If you do not have rpmbuild,\n   use rpm instead.\nshell> rpmbuild --rebuild --clean MySQL-VERSION.src.rpm\n\n   The result is one or more binary RPM packages that you install as\n   indicated in Section 2.5.1, \"Installing MySQL from RPM Packages on\n   Linux.\"\n\n   The sequence for installation from a compressed tar file or Zip\n   archive source distribution is similar to the process for\n   installing from a generic binary distribution (see Section 2.2,\n   \"Installing MySQL from Generic Binaries on Unix/Linux\"), except\n   that it is used on all platforms and includes steps to configure\n   and compile the distribution. For example, with a compressed tar\n   file source distribution on Unix, the basic installation command\n   sequence looks like this:\n# Preconfiguration setup\nshell> groupadd mysql\nshell> useradd -r -g mysql mysql\n# Beginning of source-build specific instructions\nshell> tar zxvf mysql-VERSION.tar.gz\nshell> cd mysql-VERSION\nshell> cmake .\nshell> make\nshell> make install\n# End of source-build specific instructions\n# Postinstallation setup\nshell> cd /usr/local/mysql\nshell> chown -R mysql .\nshell> chgrp -R mysql .\nshell> scripts/mysql_install_db --user=mysql\nshell> chown -R root .\nshell> chown -R mysql data\n# Next command is optional\nshell> cp support-files/my-medium.cnf /etc/my.cnf\nshell> bin/mysqld_safe --user=mysql &\n# Next command is optional\nshell> cp support-files/mysql.server /etc/init.d/mysql.server\n\n   A more detailed version of the source-build specific instructions\n   is shown following.\n   Note\n\n   The procedure shown here does not set up any passwords for MySQL\n   accounts. After following the procedure, proceed to Section 2.10,\n   \"Postinstallation Setup and Testing,\" for postinstallation setup\n   and testing.\n\nPerform Preconfiguration Setup\n\n   On Unix, set up the mysql user and group that will be used to run\n   and execute the MySQL server and own the database directory. For\n   details, see Creating a mysql System User and Group, in Section\n   2.2, \"Installing MySQL from Generic Binaries on Unix/Linux.\" Then\n   perform the following steps as the mysql user, except as noted.\n\nObtain and Unpack the Distribution\n\n   Pick the directory under which you want to unpack the distribution\n   and change location into it.\n\n   Obtain a distribution file using the instructions in Section\n   2.1.3, \"How to Get MySQL.\"\n\n   Unpack the distribution into the current directory:\n\n     * To unpack a compressed tar file, tar can uncompress and unpack\n       the distribution if it has z option support:\nshell> tar zxvf mysql-VERSION.tar.gz\n       If your tar does not have z option support, use gunzip to\n       unpack the distribution and tar to unpack it:\nshell> gunzip < mysql-VERSION.tar.gz | tar xvf -\n       Alternatively, CMake can uncompress and unpack the\n       distribution:\nshell> cmake -E tar zxvf mysql-VERSION.tar.gz\n\n     * To unpack a Zip archive, use WinZip or another tool that can\n       read .zip files.\n\n   Unpacking the distribution file creates a directory named\n   mysql-VERSION.\n\nConfigure the Distribution\n\n   Change location into the top-level directory of the unpacked\n   distribution:\nshell> cd mysql-VERSION\n\n   Configure the source directory. The minimum configuration command\n   includes no options to override configuration defaults:\nshell> cmake .\n\n   On Windows, specify the development environment. For example, the\n   following commands configure MySQL for 32-bit or 64-bit builds,\n   respectively:\nshell> cmake . -G \"Visual Studio 9 2008\"\nshell> cmake . -G \"Visual Studio 9 2008 Win64\"\n\n   On Mac OS X, to use the Xcode IDE:\nshell> cmake . -G Xcode\n\n   When you run cmake, you might want to add options to the command\n   line. Here are some examples:\n\n     * -DBUILD_CONFIG=mysql_release: Configure the source with the\n       same build options used by Oracle to produce binary\n       distributions for official MySQL releases.\n\n     * -DCMAKE_INSTALL_PREFIX=dir_name: Configure the distribution\n       for installation under a particular location.\n\n     * -DCPACK_MONOLITHIC_INSTALL=1: Cause make package to generate a\n       single installation file rather than multiple files.\n\n     * -DWITH_DEBUG=1: Build the distribution with debugging support.\n\n   For a more extensive list of options, see Section 2.9.4, \"MySQL\n   Source-Configuration Options.\"\n\n   To list the configuration options, use one of the following\n   commands:\nshell> cmake . -L   # overview\nshell> cmake . -LH  # overview with help text\nshell> cmake . -LAH # all params with help text\nshell> ccmake .     # interactive display\n\n   If CMake fails, you might need to reconfigure by running it again\n   with different options. If you do reconfigure, take note of the\n   following:\n\n     * If CMake is run after it has previously been run, it may use\n       information that was gathered during its previous invocation.\n       This information is stored in CMakeCache.txt. When CMake\n       starts up, it looks for that file and reads its contents if it\n       exists, on the assumption that the information is still\n       correct. That assumption is invalid when you reconfigure.\n\n     * Each time you run CMake, you must run make again to recompile.\n       However, you may want to remove old object files from previous\n       builds first because they were compiled using different\n       configuration options.\n\n   To prevent old object files or configuration information from\n   being used, run these commands on Unix before re-running CMake:\nshell> make clean\nshell> rm CMakeCache.txt\n\n   Or, on Windows:\nshell> devenv MySQL.sln /clean\nshell> del CMakeCache.txt\n\n   If you build out of the source tree (as described later), the\n   CMakeCache.txt file and all built files are in the build\n   directory, so you can remove that directory to object files and\n   cached configuration information.\n\n   If you are going to send mail to a MySQL mailing list to ask for\n   configuration assistance, first check the files in the CMakeFiles\n   directory for useful information about the failure. To file a bug\n   report, please use the instructions in Section 1.7, \"How to Report\n   Bugs or Problems.\"\n\nBuild the Distribution\n\n   On Unix:\nshell> make\nshell> make VERBOSE=1\n\n   The second command sets VERBOSE to show the commands for each\n   compiled source.\n\n   Use gmake instead on systems where you are using GNU make and it\n   has been installed as gmake.\n\n   On Windows:\nshell> devenv MySQL.sln /build RelWithDebInfo\n\n   It is possible to build out of the source tree to keep the tree\n   clean. If the top-level source directory is named mysql-src under\n   your current working directory, you can build in a directory named\n   build at the same level like this:\nshell> mkdir build\nshell> cd build\nshell> cmake ../mysql-src\n\n   If you have gotten to the compilation stage, but the distribution\n   does not build, see Section 2.9.5, \"Dealing with Problems\n   Compiling MySQL,\" for help. If that does not solve the problem,\n   please enter it into our bugs database using the instructions\n   given in Section 1.7, \"How to Report Bugs or Problems.\" If you\n   have installed the latest versions of the required tools, and they\n   crash trying to process our configuration files, please report\n   that also. However, if you get a command not found error or a\n   similar problem for required tools, do not report it. Instead,\n   make sure that all the required tools are installed and that your\n   PATH variable is set correctly so that your shell can find them.\n\nInstall the Distribution\n\n   On Unix:\nshell> make install\n\n   This installs the files under the configured installation\n   directory (by default, /usr/local/mysql). You might need to run\n   the command as root.\n\n   To install in a specific directory, add a DESTDIR parameter to the\n   command line:\nshell> make install DESTDIR=\"/opt/mysql\"\n\n   Alternatively, generate installation package files that you can\n   install where you like:\nshell> make package\n\n   This operation produces one or more .tar.gz files that can be\n   installed like generic binary distribution packages. See Section\n   2.2, \"Installing MySQL from Generic Binaries on Unix/Linux.\" If\n   you run CMake with -DCPACK_MONOLITHIC_INSTALL=1, the operation\n   produces a single file. Otherwise, it produces multiple files.\n\n   On Windows, generate the data directory, then create a .zip\n   archive installation package:\nshell> devenv MySQL.sln /build RelWithDebInfo /project initial_databa\nse\nshell> devenv MySQL.sln /build RelWithDebInfo /project package\n\n   You can install the resulting .zip archive where you like. See\n   Section 2.3.4, \"Installing MySQL on Microsoft Windows Using a\n   noinstall Zip Archive.\"\n\nPerform Postinstallation Setup\n\n   The remainder of the installation process involves setting up the\n   configuration file, creating the core databases, and starting the\n   MySQL server. For instructions, see Section 2.10,\n   \"Postinstallation Setup and Testing.\"\n   Note\n\n   The accounts that are listed in the MySQL grant tables initially\n   have no passwords. After starting the server, you should set up\n   passwords for them using the instructions in Section 2.10,\n   \"Postinstallation Setup and Testing.\"\n\n2.9.3. Installing MySQL from a Development Source Tree\n\n   This section discusses how to install MySQL from the latest\n   development source code. Development trees have not necessarily\n   received the same level of testing as standard release\n   distributions, so this installation method is usually required\n   only if you need the most recent code changes. Do not use a\n   development tree for production systems. If your goal is simply to\n   get MySQL up and running on your system, you should use a standard\n   release distribution (either a binary or source distribution). See\n   Section 2.1.3, \"How to Get MySQL.\"\n\n   MySQL development projects are hosted on Launchpad\n   (http://launchpad.net/). MySQL projects, including MySQL Server,\n   MySQL Workbench, and others are available from the Oracle/MySQL\n   Engineering (http://launchpad.net/~mysql) page. For the\n   repositories related only to MySQL Server, see the MySQL Server\n   (http://launchpad.net/mysql-server) page.\n\n   To install MySQL from a development source tree, your system must\n   satisfy the tool requirements listed at Section 2.9, \"Installing\n   MySQL from Source,\" including the requirements for Bazaar and\n   bison.\n\n   To create a local branch of the MySQL development tree on your\n   machine, use this procedure:\n\n    1. To obtain a copy of the MySQL source code, you must create a\n       new Bazaar branch. If you do not already have a Bazaar\n       repository directory set up, you must initialize a new\n       directory:\nshell> mkdir mysql-server\nshell> bzr init-repo --trees mysql-server\n       This is a one-time operation.\n\n    2. Assuming that you have an initialized repository directory,\n       you can branch from the public MySQL server repositories to\n       create a local source tree. To create a branch of a specific\n       version:\nshell> cd mysql-server\nshell> bzr branch lp:mysql-server/5.6 mysql-5.6\n       This is a one-time operation per source tree. You can branch\n       the source trees for several versions of MySQL under the\n       mysql-server directory.\n\n    3. The initial download will take some time to complete,\n       depending on the speed of your connection. Please be patient.\n       Once you have downloaded the first tree, additional trees\n       should take significantly less time to download.\n\n    4. When building from the Bazaar branch, you may want to create a\n       copy of your active branch so that you can make configuration\n       and other changes without affecting the original branch\n       contents. You can achieve this by branching from the original\n       branch:\nshell> bzr branch mysql-5.6 mysql-5.6-build\n\n    5. To obtain changes made after you have set up the branch\n       initially, update it using the pull option periodically. Use\n       this command in the top-level directory of the local copy:\nshell> bzr pull\n       To examine the changeset comments for the tree, use the log\n       option to bzr:\nshell> bzr log\n       You can also browse changesets, comments, and source code\n       online at the Launchpad MySQL Server\n       (http://launchpad.net/mysql-server) page.\n       If you see diffs (changes) or code that you have a question\n       about, do not hesitate to send email to the MySQL internals\n       mailing list. See Section 1.6.1, \"MySQL Mailing Lists.\" If you\n       think you have a better idea on how to do something, send an\n       email message to the list with a patch.\n\n   After you have the local branch, you can build MySQL server from\n   the source code. For information, see Section 2.9.2, \"Installing\n   MySQL from a Standard Source Distribution,\" except that you skip\n   the part about obtaining and unpacking the distribution.\n\n   Be careful about installing a build from a distribution source\n   tree on a production machine. The installation command may\n   overwrite your live release installation. If you already have\n   MySQL installed and do not want to overwrite it, run CMake with\n   values for the CMAKE_INSTALL_PREFIX, MYSQL_TCP_PORT, and\n   MYSQL_UNIX_ADDR options different from those used by your\n   production server. For additional information about preventing\n   multiple servers from interfering with each other, see Section\n   5.6, \"Running Multiple MySQL Instances on One Machine.\"\n\n   Play hard with your new installation. For example, try to make new\n   features crash. Start by running make test. See Section 22.1.2,\n   \"The MySQL Test Suite.\"\n\n2.9.4. MySQL Source-Configuration Options\n\n   The CMake program provides a great deal of control over how you\n   configure a MySQL source distribution. Typically, you do this\n   using options on the CMake command line. For information about\n   options supported by CMake, run either of these commands in the\n   top-level source directory:\nshell> cmake . -LH\nshell> ccmake .\n\n   You can also affect CMake using certain environment variables. See\n   Section 2.12, \"Environment Variables.\"\n\n   The following table shows the available CMake options. In the\n   Default column, PREFIX stands for the value of the\n   CMAKE_INSTALL_PREFIX option, which specifies the installation base\n   directory. This value is used as the parent location for several\n   of the installation subdirectories.\n\n   Table 2.11. MySQL Source-Configuration Option Reference (CMake)\n   Formats Description Default Introduced Removed\n   BUILD_CONFIG Use same build options as official releases\n   CMAKE_BUILD_TYPE Type of build to produce RelWithDebInfo\n   CMAKE_INSTALL_PREFIX Installation base directory /usr/local/mysql\n\n   COMPILATION_COMMENT Comment about compilation environment\n   CPACK_MONOLITHIC_INSTALL Whether package build produces single\n   file OFF\n   DEFAULT_CHARSET The default server character set latin1\n   DEFAULT_COLLATION The default server collation latin1_swedish_ci\n\n   ENABLE_DEBUG_SYNC Whether to enable Debug Sync support ON\n   ENABLE_DOWNLOADS Whether to download optional files OFF\n   ENABLE_DTRACE Whether to include DTrace support\n   ENABLE_GCOV Whether to include gcov support 5.6.3\n   ENABLE_GPROF Enable gprof (optimized Linux builds only) OFF 5.6.6\n\n   ENABLED_LOCAL_INFILE Whether to enable LOCAL for LOAD DATA INFILE\n   OFF\n   ENABLED_PROFILING Whether to enable query profiling code ON\n   INSTALL_BINDIR User executables directory PREFIX/bin\n   INSTALL_DOCDIR Documentation directory PREFIX/docs\n   INSTALL_DOCREADMEDIR README file directory PREFIX\n   INSTALL_INCLUDEDIR Header file directory PREFIX/include\n   INSTALL_INFODIR Info file directory PREFIX/docs\n   INSTALL_LAYOUT Select predefined installation layout STANDALONE\n\n   INSTALL_LIBDIR Library file directory PREFIX/lib\n   INSTALL_MANDIR Manual page directory PREFIX/man\n   INSTALL_MYSQLSHAREDIR Shared data directory PREFIX/share\n   INSTALL_MYSQLTESTDIR mysql-test directory PREFIX/mysql-test\n   INSTALL_PLUGINDIR Plugin directory PREFIX/lib/plugin\n   INSTALL_SBINDIR Server executable directory PREFIX/bin\n   INSTALL_SCRIPTDIR Scripts directory PREFIX/scripts\n   INSTALL_SHAREDIR aclocal/mysql.m4 installation directory\n   PREFIX/share\n   INSTALL_SQLBENCHDIR sql-bench directory PREFIX\n   INSTALL_SUPPORTFILESDIR Extra support files directory\n   PREFIX/support-files\n   MYSQL_DATADIR Data directory\n   MYSQL_MAINTAINER_MODE Whether to enable MySQL maintainer-specific\n   development environment OFF\n   MYSQL_PROJECT_NAME Windows/Mac OS X project name 3306 5.6.5\n   MYSQL_TCP_PORT TCP/IP port number 3306\n   MYSQL_UNIX_ADDR Unix socket file /tmp/mysql.sock\n   ODBC_INCLUDES ODBC includes directory\n   ODBC_LIB_DIR ODBC library directory\n   SYSCONFDIR Option file directory\n   WITH_DEBUG Whether to include debugging support OFF\n   WITH_DEFAULT_COMPILER_OPTIONS Whether to use default compiler\n   options ON 5.6.6\n   WITH_DEFAULT_FEATURE_SET Whether to use default feature set ON\n   5.6.6\n   WITH_EMBEDDED_SERVER Whether to build embedded server OFF\n   WITH_xxx_STORAGE_ENGINE Compile storage engine xxx statically into\n   server\n   WITH_EXTRA_CHARSETS Which extra character sets to include all\n   WITH_LIBWRAP Whether to include libwrap (TCP wrappers) support OFF\n\n   WITH_READLINE Use bundled readline OFF   5.6.5\n   WITH_SSL Type of SSL support no\n   WITH_UNIXODBC Enable unixODBC support OFF\n   WITH_ZLIB Type of zlib support system\n   WITHOUT_xxx_STORAGE_ENGINE Exclude storage engine xxx from build\n\n   The following sections provide more information about CMake\n   options.\n\n     * General Options\n\n     * Installation Layout Options\n\n     * Feature Options\n\n     * Compiler Flags\n\n   For boolean options, the value may be specified as 1 or ON to\n   enable the option, or as 0 or OFF to disable the option.\n\n   Many options configure compile-time defaults that can be\n   overridden at server startup. For example, the\n   CMAKE_INSTALL_PREFIX, MYSQL_TCP_PORT, and MYSQL_UNIX_ADDR options\n   that configure the default installation base directory location,\n   TCP/IP port number, and Unix socket file can be changed at server\n   startup with the --basedir, --port, and --socket options for\n   mysqld. Where applicable, configuration option descriptions\n   indicate the corresponding mysqld startup option.\n\nGeneral Options\n\n\n     * -DBUILD_CONFIG=mysql_release\n       This option configures a source distribution with the same\n       build options used by Oracle to produce binary distributions\n       for official MySQL releases.\n\n     * -DCMAKE_BUILD_TYPE=type\n       The type of build to produce:\n\n          + RelWithDebInfo: Enable optimizations and generate\n            debugging information. This is the default MySQL build\n            type.\n\n          + Debug: Disable optimizations and generate debugging\n            information. This build type is also used if the\n            WITH_DEBUG option is enabled. That is, -DWITH_DEBUG=1 has\n            the same effect as -DCMAKE_BUILD_TYPE=Debug.\n\n     * -DCPACK_MONOLITHIC_INSTALL=bool\n       This option affects whether the make package operation\n       produces multiple installation package files or a single file.\n       If disabled, the operation produces multiple installation\n       package files, which may be useful if you want to install only\n       a subset of a full MySQL installation. If enabled, it produces\n       a single file for installing everything.\n\nInstallation Layout Options\n\n   The CMAKE_INSTALL_PREFIX option indicates the base installation\n   directory. Other options with names of the form INSTALL_xxx that\n   indicate component locations are interpreted relative to the\n   prefix and their values are relative pathnames. Their values\n   should not include the prefix.\n\n     * -DCMAKE_INSTALL_PREFIX=dir_name\n       The installation base directory.\n       This value can be set at server startup with the --basedir\n       option.\n\n     * -DINSTALL_BINDIR=dir_name\n       Where to install user programs.\n\n     * -DINSTALL_DOCDIR=dir_name\n       Where to install documentation.\n\n     * -DINSTALL_DOCREADMEDIR=dir_name\n       Where to install README files.\n\n     * -DINSTALL_INCLUDEDIR=dir_name\n       Where to install header files.\n\n     * -DINSTALL_INFODIR=dir_name\n       Where to install Info files.\n\n     * -DINSTALL_LAYOUT=name\n       Select a predefined installation layout:\n\n          + STANDALONE: Same layout as used for .tar.gz and .zip\n            packages. This is the default.\n\n          + RPM: Layout similar to RPM packages.\n\n          + SVR4: Solaris package layout.\n\n          + DEB: DEB package layout (experimental).\n       You can select a predefined layout but modify individual\n       component installation locations by specifying other options.\n       For example:\nshell> cmake . -DINSTALL_LAYOUT=SVR4 -DMYSQL_DATADIR=/var/mysql/data\n\n     * -DINSTALL_LIBDIR=dir_name\n       Where to install library files.\n\n     * -DINSTALL_MANDIR=dir_name\n       Where to install manual pages.\n\n     * -DINSTALL_MYSQLSHAREDIR=dir_name\n       Where to install shared data files.\n\n     * -DINSTALL_MYSQLTESTDIR=dir_name\n       Where to install the mysql-test directory.\n\n     * -DINSTALL_PLUGINDIR=dir_name\n       The location of the plugin directory.\n       This value can be set at server startup with the --plugin_dir\n       option.\n\n     * -DINSTALL_SBINDIR=dir_name\n       Where to install the mysqld server.\n\n     * -DINSTALL_SCRIPTDIR=dir_name\n       Where to install mysql_install_db.\n\n     * -DINSTALL_SHAREDIR=dir_name\n       Where to install aclocal/mysql.m4.\n\n     * -DINSTALL_SQLBENCHDIR=dir_name\n       Where to install the sql-bench directory. To not install this\n       directory, use an empty value (-DINSTALL_SQLBENCHDIR=).\n\n     * -DINSTALL_SUPPORTFILESDIR=dir_name\n       Where to install extra support files.\n\n     * -DMYSQL_DATADIR=dir_name\n       The location of the MySQL data directory.\n       This value can be set at server startup with the --datadir\n       option.\n\n     * -DSYSCONFDIR=dir_name\n       The default my.cnf option file directory.\n       This location cannot be set at server startup, but you can\n       start the server with a given option file using the\n       --defaults-file=file_name option, where file_name is the full\n       path name to the file.\n\n     * -DODBC_INCLUDES=dir_name\n       The location of the ODBC includes directory, and may be used\n       while configuring Connector/ODBC.\n\n     * -DODBC_LIB_DIR=dir_name\n       The location of the ODBC library directory, and may be used\n       while configuring Connector/ODBC.\n\nStorage Engine Options\n\n   Storage engines are built as plugins. You can build a plugin as a\n   static module (compiled into the server) or a dynamic module\n   (built as a dynamic library that must be installed into the server\n   using the INSTALL PLUGIN statement or the --plugin-load option\n   before it can be used). Some plugins might not support static or\n   dynamic building.\n\n   The MyISAM, MERGE, MEMORY, and CSV engines are mandatory (always\n   compiled into the server) and need not be installed explicitly.\n\n   To compile a storage engine statically into the server, use\n   -DWITH_engine_STORAGE_ENGINE=1. Some permissible engine values are\n   ARCHIVE, BLACKHOLE, EXAMPLE, FEDERATED, INNOBASE (InnoDB),\n   PARTITION (partitioning support), and PERFSCHEMA (Performance\n   Schema). Examples:\n-DWITH_INNOBASE_STORAGE_ENGINE=1\n-DWITH_ARCHIVE_STORAGE_ENGINE=1\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1\n-DWITH_PERFSCHEMA_STORAGE_ENGINE=1\n\n   To exclude a storage engine from the build, use\n   -DWITHOUT_engine_STORAGE_ENGINE=1. Examples:\n-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1\n-DWITHOUT_FEDERATED_STORAGE_ENGINE=1\n-DWITHOUT_PARTITION_STORAGE_ENGINE=1\n\n   If neither -DWITH_engine_STORAGE_ENGINE nor\n   -DWITHOUT_engine_STORAGE_ENGINE are specified for a given storage\n   engine, the engine is built as a shared module, or excluded if it\n   cannot be built as a shared module.\n\nFeature Options\n\n\n     * -DCOMPILATION_COMMENT=string\n       A descriptive comment about the compilation environment.\n\n     * -DDEFAULT_CHARSET=charset_name\n       The server character set. By default, MySQL uses the latin1\n       (cp1252 West European) character set.\n       charset_name may be one of binary, armscii8, ascii, big5,\n       cp1250, cp1251, cp1256, cp1257, cp850, cp852, cp866, cp932,\n       dec8, eucjpms, euckr, gb2312, gbk, geostd8, greek, hebrew,\n       hp8, keybcs2, koi8r, koi8u, latin1, latin2, latin5, latin7,\n       macce, macroman, sjis, swe7, tis620, ucs2, ujis, utf8,\n       utf8mb4, utf16, utf16le, utf32. The permissible character sets\n       are listed in the cmake/character_sets.cmake file as the value\n       of CHARSETS_AVAILABLE.\n       This value can be set at server startup with the\n       --character_set_server option.\n\n     * -DDEFAULT_COLLATION=collation_name\n       The server collation. By default, MySQL uses\n       latin1_swedish_ci. Use the SHOW COLLATION statement to\n       determine which collations are available for each character\n       set.\n       This value can be set at server startup with the\n       --collation_server option.\n\n     * -DENABLE_DEBUG_SYNC=bool\n       Whether to compile the Debug Sync facility into the server.\n       This facility is used for testing and debugging. This option\n       is enabled by default, but has no effect unless MySQL is\n       configured with debugging enabled. If debugging is enabled and\n       you want to disable Debug Sync, use -DENABLE_DEBUG_SYNC=0.\n       When compiled in, Debug Sync is disabled by default at\n       runtime. To enable it, start mysqld with the\n       --debug-sync-timeout=N option, where N is a timeout value\n       greater than 0. (The default value is 0, which disables Debug\n       Sync.) N becomes the default timeout for individual\n       synchronization points.\n       For a description of the Debug Sync facility and how to use\n       synchronization points, see MySQL Internals: Test\n       Synchronization\n       (http://dev.mysql.com/doc/internals/en/test-synchronization.ht\n       ml).\n\n     * -DENABLE_DOWNLOADS=bool\n       Whether to download optional files. For example, with this\n       option enabled, CMake downloads the Google Test distribution\n       that is used by the test suite to run unit tests.\n\n     * -DENABLE_DTRACE=bool\n       Whether to include support for DTrace probes. For information\n       about DTrace, wee Section 5.7, \"Tracing mysqld Using DTrace\"\n\n     * -DENABLE_GCOV=bool\n       Whether to include gcov support (Linux only).\n\n     * -DENABLE_GPROF=bool\n       Whether to enable gprof (optimized Linux builds only). This\n       option was added in MySQL 5.6.6.\n\n     * -DENABLED_LOCAL_INFILE=bool\n       Whether to enable LOCAL capability in the client library for\n       LOAD DATA INFILE.\n       This option controls client-side LOCAL capability, but the\n       capability can be set on the server side at server startup\n       with the --local-infile option. See Section 6.1.6, \"Security\n       Issues with LOAD DATA LOCAL.\"\n\n     * -DENABLED_PROFILING=bool\n       Whether to enable query profiling code (for the SHOW PROFILE\n       and SHOW PROFILES statements).\n\n     * -DMYSQL_MAINTAINER_MODE=bool\n       Whether to enable a MySQL maintainer-specific development\n       environment. If enabled, this option causes compiler warnings\n       to become errors.\n\n     * -DMYSQL_PROJECT_NAME=name\n       For Windows or Mac OS X, the project name to incorporate into\n       the project file name. This option was added in MySQL 5.6.5.\n\n     * -DMYSQL_TCP_PORT=port_num\n       The port number on on which the server listens for TCP/IP\n       connections. The default is 3306.\n       This value can be set at server startup with the --port\n       option.\n\n     * -DMYSQL_UNIX_ADDR=file_name\n       The Unix socket file path on which the server listens for\n       socket connections. This must be an absolute path name. The\n       default is /tmp/mysql.sock.\n       This value can be set at server startup with the --socket\n       option.\n\n     * -DWITH_DEBUG=bool\n       Whether to include debugging support.\n       Configuring MySQL with debugging support enables you to use\n       the --debug=\"d,parser_debug\" option when you start the server.\n       This causes the Bison parser that is used to process SQL\n       statements to dump a parser trace to the server's standard\n       error output. Typically, this output is written to the error\n       log.\n\n     * -DWITH_DEFAULT_COMPILER_OPTIONS=bool\n       Whether to use the flags from\n       cmake/build_configurations/compiler_options.cmake. This option\n       was added in MySQL 5.6.6.\n\n     * -DWITH_DEFAULT_FEATURE_SET=bool\n       Whether to use the flags from\n       cmake/build_configurations/feature_set.cmake. This option was\n       added in MySQL 5.6.6.\n\n     * -DWITH_EMBEDDED_SERVER=bool\n       Whether to build the libmysqld embedded server library.\n\n     * -DWITH_EXTRA_CHARSETS=name\n       Which extra character sets to include:\n\n          + all: All character sets. This is the default.\n\n          + complex: Complex character sets.\n\n          + none: No extra character sets.\n\n     * -DWITH_LIBWRAP=bool\n       Whether to include libwrap (TCP wrappers) support.\n\n     * -DWITH_READLINE=bool\n       Whether to use the readline library bundled with the\n       distribution. This option was removed in MySQL 5.6.5 because\n       readline is no longer bundled.\n\n     * -DWITH_SSL=ssl_type\n       The type of SSL support to include, if any:\n\n          + no: No SSL support. This is the default before MySQL\n            5.6.6. As of 5.6.6, this is no longer a permitted value\n            and the default is bundled.\n\n          + yes: Use the system SSL library if present, else the\n            library bundled with the distribution.\n\n          + bundled: Use the SSL library bundled with the\n            distribution. This is the default as of MySQL 5.6.6.\n\n          + system: Use the system SSL library.\n\n          + path_name: As of MySQL 5.6.7, it is permitted to specify\n            the path name to the OpenSSL installation to use. This\n            can be useful instead of a value of system when CMake\n            detects an older or incorrect installed OpenSSL version.\n            (Another permitted way to do the same thing is to set the\n            CMAKE_PREFIX_PATH option to path_name.)\n       For information about using SSL support, see Section 6.3.8,\n       \"Using SSL for Secure Connections.\"\n\n     * -DWITH_ZLIB=zlib_type\n       Some features require that the server be built with\n       compression library support, such as the COMPRESS() and\n       UNCOMPRESS() functions, and compression of the client/server\n       protocol. The WITH_ZLIB indicates the source of zlib support:\n\n          + bundled: Use the zlib library bundled with the\n            distribution.\n\n          + system: Use the system zlib library. This is the default.\n\n     * -DWITH_UNIXODBC=1\n       Enables unixODBC support, for Connector/ODBC.\n\nCompiler Flags\n\n   To specify compiler flags, set the CFLAGS and CXXFLAGS environment\n   variables before running CMake. Example:\nshell> CFLAGS=-DDISABLE_GRANT_OPTIONS\nshell> CXXFLAGS=-DDISABLE_GRANT_OPTIONS\nshell> export CFLAGS CXXFLAGS\nshell> cmake [options]\n\n   The following flags control configuration features:\n\n     * DISABLE_GRANT_OPTIONS\n       If this flag is defined, it causes the --bootstrap,\n       --skip-grant-tables, and --init-file options for mysqld to be\n       disabled.\n\n     * HAVE_EMBEDDED_PRIVILEGE_CONTROL\n       By default, authentication for connections to the embedded\n       server is disabled. To enable connection authentication,\n       define this flag.\n\n2.9.5. Dealing with Problems Compiling MySQL\n\n   The solution to many problems involves reconfiguring. If you do\n   reconfigure, take note of the following:\n\n     * If CMake is run after it has previously been run, it may use\n       information that was gathered during its previous invocation.\n       This information is stored in CMakeCache.txt. When CMake\n       starts up, it looks for that file and reads its contents if it\n       exists, on the assumption that the information is still\n       correct. That assumption is invalid when you reconfigure.\n\n     * Each time you run CMake, you must run make again to recompile.\n       However, you may want to remove old object files from previous\n       builds first because they were compiled using different\n       configuration options.\n\n   To prevent old object files or configuration information from\n   being used, run these commands on Unix before re-running CMake:\nshell> make clean\nshell> rm CMakeCache.txt\n\n   Or, on Windows:\nshell> devenv MySQL.sln /clean\nshell> del CMakeCache.txt\n\n   If you build out of the source tree, remove and recreate your\n   build directory before re-running CMake. For instructions on\n   building outside of the source tree, see How to Build MySQL Server\n   with CMake (http://dev.mysql.com/doc/internals/en/cmake.html).\n\n   On some systems, warnings may occur due to differences in system\n   include files. The following list describes other problems that\n   have been found to occur most often when compiling MySQL:\n\n     * To define flags to be used by your C or C++ compilers, specify\n       them using the CFLAGS and CXXFLAGS environment variables. You\n       can also specify the compiler names this way using CC and CXX.\n       For example:\nshell> CC=gcc\nshell> CFLAGS=-O3\nshell> CXX=g++\nshell> CXXFLAGS=-O3\nshell> export CC CFLAGS CXX CXXFLAGS\n       To see what flags you might need to specify, invoke\n       mysql_config with the --cflags and --cxxflags options.\n\n     * If compilation fails, check whether the MYSQL_MAINTAINER_MODE\n       option is enabled. This mode causes compiler warnings to\n       become errors, so disabling it may enable compilation to\n       proceed.\n\n     * If your compile fails with errors such as any of the\n       following, you must upgrade your version of make to GNU make:\nmake: Fatal error in reader: Makefile, line 18:\nBadly formed macro assignment\n       Or:\nmake: file `Makefile' line 18: Must be a separator (:\n       Or:\npthread.h: No such file or directory\n       Solaris and FreeBSD are known to have troublesome make\n       programs.\n       GNU make 3.75 is known to work.\n\n     * The sql_yacc.cc file is generated from sql_yacc.yy. Normally,\n       the build process does not need to create sql_yacc.cc because\n       MySQL comes with a pregenerated copy. However, if you do need\n       to re-create it, you might encounter this error:\n\"sql_yacc.yy\", line xxx fatal: default action causes potential...\n       This is a sign that your version of yacc is deficient. You\n       probably need to install bison (the GNU version of yacc) and\n       use that instead.\n       Versions of bison older than 1.75 may report this error:\nsql_yacc.yy:#####: fatal error: maximum table size (32767) exceeded\n       The maximum table size is not actually exceeded; the error is\n       caused by bugs in older versions of bison.\n\n   For information about acquiring or updating tools, see the system\n   requirements in Section 2.9, \"Installing MySQL from Source.\"\n\n2.9.6. MySQL Configuration and Third-Party Tools\n\n   Third-party tools that need to determine the MySQL version from\n   the MySQL source can read the VERSION file in the top-level source\n   directory. The file lists the pieces of the version separately.\n   For example, if the version is 5.5.8, the file looks like this:\nMYSQL_VERSION_MAJOR=5\nMYSQL_VERSION_MINOR=5\nMYSQL_VERSION_PATCH=8\nMYSQL_VERSION_EXTRA=\n\n   If the source is not for a General Availability (GA) release, the\n   MYSQL_VERSION_EXTRA value will be nonempty. For example, the value\n   for a Release Candidate release would look like this:\nMYSQL_VERSION_EXTRA=rc\n\n   To construct a five-digit number from the version components, use\n   this formula:\nMYSQL_VERSION_MAJOR*10000 + MYSQL_VERSION_MINOR*100 + MYSQL_VERSION_P\nATCH\n\n2.10. Postinstallation Setup and Testing\n\n   After installing MySQL, there are some issues that you should\n   address. For example, on Unix, you should initialize the data\n   directory and create the MySQL grant tables. On all platforms, an\n   important security concern is that the initial accounts in the\n   grant tables have no passwords. You should assign passwords to\n   prevent unauthorized access to the MySQL server. Optionally, you\n   can create time zone tables to enable recognition of named time\n   zones.\n\n   The following sections include postinstallation procedures that\n   are specific to Windows systems and to Unix systems. Another\n   section, Section 2.10.1.3, \"Starting and Troubleshooting the MySQL\n   Server,\" applies to all platforms; it describes what to do if you\n   have trouble getting the server to start. Section 2.10.2,\n   \"Securing the Initial MySQL Accounts,\" also applies to all\n   platforms. You should follow its instructions to make sure that\n   you have properly protected your MySQL accounts by assigning\n   passwords to them.\n\n   When you are ready to create additional user accounts, you can\n   find information on the MySQL access control system and account\n   management in Section 6.2, \"The MySQL Access Privilege System,\"\n   and Section 6.3, \"MySQL User Account Management.\"\n\n2.10.1. Unix Postinstallation Procedures\n\n   After installing MySQL on Unix, you must initialize the grant\n   tables, start the server, and make sure that the server works\n   satisfactorily. You may also wish to arrange for the server to be\n   started and stopped automatically when your system starts and\n   stops. You should also assign passwords to the accounts in the\n   grant tables.\n\n   On Unix, the grant tables are set up by the mysql_install_db\n   program. For some installation methods, this program is run for\n   you automatically if an existing database cannot be found.\n\n     * If you install MySQL on Linux using RPM distributions, the\n       server RPM runs mysql_install_db.\n\n     * Using the native packaging system on many platforms, including\n       Debian Linux, Ubuntu Linux, Gentoo Linux and others, the\n       mysql_install_db command is run for you.\n\n     * If you install MySQL on Mac OS X using a PKG distribution, the\n       installer runs mysql_install_db.\n\n   For other platforms and installation types, including generic\n   binary and source installs, you will need to run mysql_install_db\n   yourself.\n\n   The following procedure describes how to initialize the grant\n   tables (if that has not previously been done) and start the\n   server. It also suggests some commands that you can use to test\n   whether the server is accessible and working properly. For\n   information about starting and stopping the server automatically,\n   see Section 2.10.1.2, \"Starting and Stopping MySQL Automatically.\"\n\n   After you complete the procedure and have the server running, you\n   should assign passwords to the accounts created by\n   mysql_install_db and perhaps restrict access to test databases.\n   For instructions, see Section 2.10.2, \"Securing the Initial MySQL\n   Accounts.\"\n\n   In the examples shown here, the server runs under the user ID of\n   the mysql login account. This assumes that such an account exists.\n   Either create the account if it does not exist, or substitute the\n   name of a different existing login account that you plan to use\n   for running the server. For information about creating the\n   account, see Creating a mysql System User and Group, in Section\n   2.2, \"Installing MySQL from Generic Binaries on Unix/Linux.\"\n\n    1. Change location into the top-level directory of your MySQL\n       installation, represented here by BASEDIR:\nshell> cd BASEDIR\n       BASEDIR is the installation directory for your MySQL instance.\n       It is likely to be something like /usr/local/mysql or\n       /usr/local. The following steps assume that you have changed\n       location to this directory.\n       You will find several files and subdirectories in the BASEDIR\n       directory. The most important for installation purposes are\n       the bin and scripts subdirectories:\n\n          + The bin directory contains client programs and the\n            server. You should add the full path name of this\n            directory to your PATH environment variable so that your\n            shell finds the MySQL programs properly. See Section\n            2.12, \"Environment Variables.\"\n\n          + The scripts directory contains the mysql_install_db\n            script used to initialize the mysql database containing\n            the grant tables that store the server access\n            permissions.\n\n    2. If necessary, ensure that the distribution contents are\n       accessible to mysql. If you installed the distribution as\n       mysql, no further action is required. If you installed the\n       distribution as root, its contents will be owned by root.\n       Change its ownership to mysql by executing the following\n       commands as root in the installation directory. The first\n       command changes the owner attribute of the files to the mysql\n       user. The second changes the group attribute to the mysql\n       group.\nshell> chown -R mysql .\nshell> chgrp -R mysql .\n\n    3. If necessary, run the mysql_install_db program to set up the\n       initial MySQL grant tables containing the privileges that\n       determine how users are permitted to connect to the server.\n       You will need to do this if you used a distribution type for\n       which the installation procedure does not run the program for\n       you.\nshell> scripts/mysql_install_db --user=mysql\n       Typically, mysql_install_db needs to be run only the first\n       time you install MySQL, so you can skip this step if you are\n       upgrading an existing installation, However, mysql_install_db\n       does not overwrite any existing privilege tables, so it should\n       be safe to run in any circumstances.\n       It might be necessary to specify other options such as\n       --basedir or --datadir if mysql_install_db does not identify\n       the correct locations for the installation directory or data\n       directory. For example:\nshell> scripts/mysql_install_db --user=mysql \\\n         --basedir=/opt/mysql/mysql \\\n         --datadir=/opt/mysql/mysql/data\n       The mysql_install_db script creates the server's data\n       directory with mysql as the owner. Under the data directory,\n       it creates directories for the mysql database that holds the\n       grant tables and the test database that you can use to test\n       MySQL. The script also creates privilege table entries for\n       root and anonymous-user accounts. The accounts have no\n       passwords initially. Section 2.10.2, \"Securing the Initial\n       MySQL Accounts,\" describes the initial privileges. Briefly,\n       these privileges permit the MySQL root user to do anything,\n       and permit anybody to create or use databases with a name of\n       test or starting with test_. See Section 6.2, \"The MySQL\n       Access Privilege System,\" for a complete listing and\n       description of the grant tables.\n       For a more secure installation, invoke mysql_install_db with\n       the --random-passwords option. This causes it to assign a\n       random password to the MySQL root accounts, set the \"password\n       expired\" flag for those accounts, and remove the\n       anonymous-user MySQL accounts. For additional details, see\n       Section 4.4.3, \"mysql_install_db --- Initialize MySQL Data\n       Directory.\" (Install operations using RPMs for Unbreakable\n       Linux Network are unaffected because they do not use\n       mysql_install_db.)\n       It is important to make sure that the database directories and\n       files are owned by the mysql login account so that the server\n       has read and write access to them when you run it later. To\n       ensure this if you run mysql_install_db as root, include the\n       --user option as shown. Otherwise, you should execute the\n       script while logged in as mysql, in which case you can omit\n       the --user option from the command.\n       If you do not want to have the test database, you can remove\n       it after starting the server, using the instructions in\n       Section 2.10.2, \"Securing the Initial MySQL Accounts.\"\n       If you have trouble with mysql_install_db at this point, see\n       Section 2.10.1.1, \"Problems Running mysql_install_db.\"\n\n    4. Most of the MySQL installation can be owned by root if you\n       like. The exception is that the data directory must be owned\n       by mysql. To accomplish this, run the following commands as\n       root in the installation directory:\nshell> chown -R root .\nshell> chown -R mysql data\n\n    5. If the plugin directory (the directory named by the plugin_dir\n       system variable) is writable by the server, it may be possible\n       for a user to write executable code to a file in the directory\n       using SELECT ... INTO DUMPFILE. This can be prevented by\n       making plugin_dir read only to the server or by setting\n       --secure-file-priv to a directory where SELECT writes can be\n       made safely.\n\n    6. If you installed MySQL using a source distribution, you may\n       want to optionally copy one of the provided configuration\n       files from the support-files directory into your /etc\n       directory. There are different sample configuration files for\n       different use cases, server types, and CPU and RAM\n       configurations. If you want to use one of these standard\n       files, you should copy it to /etc/my.cnf, or /etc/mysql/my.cnf\n       and edit and check the configuration before starting your\n       MySQL server for the first time.\n       If you do not copy one of the standard configuration files,\n       the MySQL server will be started with the default settings.\n       If you want MySQL to start automatically when you boot your\n       machine, you can copy support-files/mysql.server to the\n       location where your system has its startup files. More\n       information can be found in the mysql.server script itself,\n       and in Section 2.10.1.2, \"Starting and Stopping MySQL\n       Automatically.\"\n\n    7. Start the MySQL server:\nshell> bin/mysqld_safe --user=mysql &\n       It is important that the MySQL server be run using an\n       unprivileged (non-root) login account. To ensure this if you\n       run mysqld_safe as root, include the --user option as shown.\n       Otherwise, you should execute the script while logged in as\n       mysql, in which case you can omit the --user option from the\n       command.\n       For further instructions for running MySQL as an unprivileged\n       user, see Section 6.1.5, \"How to Run MySQL as a Normal User.\"\n       If the command fails immediately and prints mysqld ended, look\n       for information in the error log (which by default is the\n       host_name.err file in the data directory).\n       If you neglected to create the grant tables by running\n       mysql_install_db before proceeding to this step, the following\n       message appears in the error log file when you start the\n       server:\nmysqld: Can't find file: 'host.frm'\n       This error also occurs if you run mysql_install_db as root\n       without the --user option. Remove the data directory and run\n       mysql_install_db with the --user option as described\n       previously.\n       If you have other problems starting the server, see Section\n       2.10.1.3, \"Starting and Troubleshooting the MySQL Server.\" For\n       more information about mysqld_safe, see Section 4.3.2,\n       \"mysqld_safe --- MySQL Server Startup Script.\"\n\n    8. Use mysqladmin to verify that the server is running. The\n       following commands provide simple tests to check whether the\n       server is up and responding to connections:\nshell> bin/mysqladmin version\nshell> bin/mysqladmin variables\n       The output from mysqladmin version varies slightly depending\n       on your platform and version of MySQL, but should be similar\n       to that shown here:\nshell> bin/mysqladmin version\nmysqladmin  Ver 14.12 Distrib 5.6.11, for pc-linux-gnu on i686\n...\n\nServer version          5.6.11\nProtocol version        10\nConnection              Localhost via UNIX socket\nUNIX socket             /var/lib/mysql/mysql.sock\nUptime:                 14 days 5 hours 5 min 21 sec\n\nThreads: 1  Questions: 366  Slow queries: 0\nOpens: 0  Flush tables: 1  Open tables: 19\nQueries per second avg: 0.000\n       To see what else you can do with mysqladmin, invoke it with\n       the --help option.\n\n    9. Verify that you can shut down the server:\nshell> bin/mysqladmin -u root shutdown\n   10. Verify that you can start the server again. Do this by using\n       mysqld_safe or by invoking mysqld directly. For example:\nshell> bin/mysqld_safe --user=mysql &\n       If mysqld_safe fails, see Section 2.10.1.3, \"Starting and\n       Troubleshooting the MySQL Server.\"\n   11. Run some simple tests to verify that you can retrieve\n       information from the server. The output should be similar to\n       what is shown here:\nshell> bin/mysqlshow\n+--------------------+\n|     Databases      |\n+--------------------+\n| information_schema |\n| mysql              |\n| test               |\n+--------------------+\n\nshell> bin/mysqlshow mysql\nDatabase: mysql\n+---------------------------+\n|          Tables           |\n+---------------------------+\n| columns_priv              |\n| db                        |\n| event                     |\n| func                      |\n| help_category             |\n| help_keyword              |\n| help_relation             |\n| help_topic                |\n| host                      |\n| plugin                    |\n| proc                      |\n| procs_priv                |\n| servers                   |\n| tables_priv               |\n| time_zone                 |\n| time_zone_leap_second     |\n| time_zone_name            |\n| time_zone_transition      |\n| time_zone_transition_type |\n| user                      |\n+---------------------------+\n\nshell> bin/mysql -e \"SELECT Host,Db,User FROM db\" mysql\n+------+--------+------+\n| host | db     | user |\n+------+--------+------+\n| %    | test   |      |\n| %    | test_% |      |\n+------+--------+------+\n   12. There is a benchmark suite in the sql-bench directory (under\n       the MySQL installation directory) that you can use to compare\n       how MySQL performs on different platforms. The benchmark suite\n       is written in Perl. It requires the Perl DBI module that\n       provides a database-independent interface to the various\n       databases, and some other additional Perl modules:\nDBI\nDBD::mysql\nData::Dumper\nData::ShowTable\n       These modules can be obtained from CPAN\n       (http://www.cpan.org/). See also Section 2.13.1, \"Installing\n       Perl on Unix.\"\n       The sql-bench/Results directory contains the results from many\n       runs against different databases and platforms. To run all\n       tests, execute these commands:\nshell> cd sql-bench\nshell> perl run-all-tests\n       If you do not have the sql-bench directory, you probably\n       installed MySQL using RPM files other than the source RPM.\n       (The source RPM includes the sql-bench benchmark directory.)\n       In this case, you must first install the benchmark suite\n       before you can use it. There are separate benchmark RPM files\n       named mysql-bench-VERSION.i386.rpm that contain benchmark code\n       and data.\n       If you have a source distribution, there are also tests in its\n       tests subdirectory that you can run. For example, to run\n       auto_increment.tst, execute this command from the top-level\n       directory of your source distribution:\nshell> mysql -vvf test < ./tests/auto_increment.tst\n       The expected result of the test can be found in the\n       ./tests/auto_increment.res file.\n   13. At this point, you should have the server running. However,\n       none of the initial MySQL accounts have a password, and the\n       server permits permissive access to test databases. To tighten\n       security, follow the instructions in Section 2.10.2, \"Securing\n       the Initial MySQL Accounts.\"\n\n   The MySQL 5.6 installation procedure creates time zone tables in\n   the mysql database but does not populate them. To do so, use the\n   instructions in Section 10.6, \"MySQL Server Time Zone Support.\"\n\n   To make it more convenient to invoke programs installed in the bin\n   directory under the installation directory, you can add that\n   directory to your PATH environment variable setting. That enables\n   you to run a program by typing only its name, not its entire path\n   name. See Section 4.2.4, \"Setting Environment Variables.\"\n\n   You can set up new accounts using the bin/mysql_setpermission\n   script if you install the DBI and DBD::mysql Perl modules. See\n   Section 4.6.14, \"mysql_setpermission --- Interactively Set\n   Permissions in Grant Tables.\" For Perl module installation\n   instructions, see Section 2.13, \"Perl Installation Notes.\"\n\n   If you would like to use mysqlaccess and have the MySQL\n   distribution in some nonstandard location, you must change the\n   location where mysqlaccess expects to find the mysql client. Edit\n   the bin/mysqlaccess script at approximately line 18. Search for a\n   line that looks like this:\n$MYSQL     = '/usr/local/bin/mysql';    # path to mysql executable\n\n   Change the path to reflect the location where mysql actually is\n   stored on your system. If you do not do this, a Broken pipe error\n   will occur when you run mysqlaccess.\n\n2.10.1.1. Problems Running mysql_install_db\n\n   The purpose of the mysql_install_db script is to generate new\n   MySQL privilege tables. It does not overwrite existing MySQL\n   privilege tables, and it does not affect any other data.\n\n   If you want to re-create your privilege tables, first stop the\n   mysqld server if it is running. Then rename the mysql directory\n   under the data directory to save it, and then run\n   mysql_install_db. Suppose that your current directory is the MySQL\n   installation directory and that mysql_install_db is located in the\n   bin directory and the data directory is named data. To rename the\n   mysql database and re-run mysql_install_db, use these commands.\nshell> mv data/mysql data/mysql.old\nshell> scripts/mysql_install_db --user=mysql\n\n   When you run mysql_install_db, you might encounter the following\n   problems:\n\n     * mysql_install_db fails to install the grant tables\n       You may find that mysql_install_db fails to install the grant\n       tables and terminates after displaying the following messages:\nStarting mysqld daemon with databases from XXXXXX\nmysqld ended\n       In this case, you should examine the error log file very\n       carefully. The log should be located in the directory XXXXXX\n       named by the error message and should indicate why mysqld did\n       not start. If you do not understand what happened, include the\n       log when you post a bug report. See Section 1.7, \"How to\n       Report Bugs or Problems.\"\n\n     * There is a mysqld process running\n       This indicates that the server is running, in which case the\n       grant tables have probably been created already. If so, there\n       is no need to run mysql_install_db at all because it needs to\n       be run only once (when you install MySQL the first time).\n\n     * Installing a second mysqld server does not work when one\n       server is running\n       This can happen when you have an existing MySQL installation,\n       but want to put a new installation in a different location.\n       For example, you might have a production installation, but you\n       want to create a second installation for testing purposes.\n       Generally the problem that occurs when you try to run a second\n       server is that it tries to use a network interface that is in\n       use by the first server. In this case, you should see one of\n       the following error messages:\nCan't start server: Bind on TCP/IP port:\nAddress already in use\nCan't start server: Bind on unix socket...\n       For instructions on setting up multiple servers, see Section\n       5.6, \"Running Multiple MySQL Instances on One Machine.\"\n\n     * You do not have write access to the /tmp directory\n       If you do not have write access to create temporary files or a\n       Unix socket file in the default location (the /tmp directory)\n       or the TMP_DIR environment variable, if it has been set, an\n       error occurs when you run mysql_install_db or the mysqld\n       server.\n       You can specify different locations for the temporary\n       directory and Unix socket file by executing these commands\n       prior to starting mysql_install_db or mysqld, where\n       some_tmp_dir is the full path name to some directory for which\n       you have write permission:\nshell> TMPDIR=/some_tmp_dir/\nshell> MYSQL_UNIX_PORT=/some_tmp_dir/mysql.sock\nshell> export TMPDIR MYSQL_UNIX_PORT\n       Then you should be able to run mysql_install_db and start the\n       server with these commands:\nshell> scripts/mysql_install_db --user=mysql\nshell> bin/mysqld_safe --user=mysql &\n       If mysql_install_db is located in the scripts directory,\n       modify the first command to scripts/mysql_install_db.\n       See Section C.5.4.5, \"How to Protect or Change the MySQL Unix\n       Socket File,\" and Section 2.12, \"Environment Variables.\"\n\n   There are some alternatives to running the mysql_install_db script\n   provided in the MySQL distribution:\n\n     * If you want the initial privileges to be different from the\n       standard defaults, you can modify mysql_install_db before you\n       run it. However, it is preferable to use GRANT and REVOKE to\n       change the privileges after the grant tables have been set up.\n       In other words, you can run mysql_install_db, and then use\n       mysql -u root mysql to connect to the server as the MySQL root\n       user so that you can issue the necessary GRANT and REVOKE\n       statements.\n       If you want to install MySQL on several machines with the same\n       privileges, you can put the GRANT and REVOKE statements in a\n       file and execute the file as a script using mysql after\n       running mysql_install_db. For example:\nshell> scripts/mysql_install_db --user=mysql\nshell> bin/mysql -u root < your_script_file\n       By doing this, you can avoid having to issue the statements\n       manually on each machine.\n\n     * It is possible to re-create the grant tables completely after\n       they have previously been created. You might want to do this\n       if you are just learning how to use GRANT and REVOKE and have\n       made so many modifications after running mysql_install_db that\n       you want to wipe out the tables and start over.\n       To re-create the grant tables, remove all the .frm, .MYI, and\n       .MYD files in the mysql database directory. Then run the\n       mysql_install_db script again.\n\n     * You can start mysqld manually using the --skip-grant-tables\n       option and add the privilege information yourself using mysql:\nshell> bin/mysqld_safe --user=mysql --skip-grant-tables &\nshell> bin/mysql mysql\n       From mysql, manually execute the SQL commands contained in\n       mysql_install_db. Make sure that you run mysqladmin\n       flush-privileges or mysqladmin reload afterward to tell the\n       server to reload the grant tables.\n       Note that by not using mysql_install_db, you not only have to\n       populate the grant tables manually, you also have to create\n       them first.\n\n2.10.1.2. Starting and Stopping MySQL Automatically\n\n   Generally, you start the mysqld server in one of these ways:\n\n     * Invoke mysqld directly. This works on any platform.\n\n     * Run the MySQL server as a Windows service. The service can be\n       set to start the server automatically when Windows starts, or\n       as a manual service that you start on request. For\n       instructions, see Section 2.3.4.8, \"Starting MySQL as a\n       Windows Service.\"\n\n     * Invoke mysqld_safe, which tries to determine the proper\n       options for mysqld and then runs it with those options. This\n       script is used on Unix and Unix-like systems. See Section\n       4.3.2, \"mysqld_safe --- MySQL Server Startup Script.\"\n\n     * Invoke mysql.server. This script is used primarily at system\n       startup and shutdown on systems that use System V-style run\n       directories (that is, /etc/init.d and run-level specific\n       directories), where it usually is installed under the name\n       mysql. The mysql.server script starts the server by invoking\n       mysqld_safe. See Section 4.3.3, \"mysql.server --- MySQL Server\n       Startup Script.\"\n\n     * On Mac OS X, install a separate MySQL Startup Item package to\n       enable the automatic startup of MySQL on system startup. The\n       Startup Item starts the server by invoking mysql.server. See\n       Section 2.4.3, \"Installing the MySQL Startup Item,\" for\n       details. A MySQL Preference Pane also provides control for\n       starting and stopping MySQL through the System Preferences,\n       see Section 2.4.4, \"Installing and Using the MySQL Preference\n       Pane.\"\n\n     * Use the Solaris/OpenSolaris service management framework (SMF)\n       system to initiate and control MySQL startup. For more\n       information, see Section 2.6.2, \"Installing MySQL on\n       OpenSolaris using IPS.\"\n\n   The mysqld_safe and mysql.server scripts, Windows server,\n   Solaris/OpenSolaris SMF, and the Mac OS X Startup Item (or MySQL\n   Preference Pane) can be used to start the server manually, or\n   automatically at system startup time. mysql.server and the Startup\n   Item also can be used to stop the server.\n\n   To start or stop the server manually using the mysql.server\n   script, invoke it with start or stop arguments:\nshell> mysql.server start\nshell> mysql.server stop\n\n   Before mysql.server starts the server, it changes location to the\n   MySQL installation directory, and then invokes mysqld_safe. If you\n   want the server to run as some specific user, add an appropriate\n   user option to the [mysqld] group of the /etc/my.cnf option file,\n   as shown later in this section. (It is possible that you will need\n   to edit mysql.server if you've installed a binary distribution of\n   MySQL in a nonstandard location. Modify it to change location into\n   the proper directory before it runs mysqld_safe. If you do this,\n   your modified version of mysql.server may be overwritten if you\n   upgrade MySQL in the future, so you should make a copy of your\n   edited version that you can reinstall.)\n\n   mysql.server stop stops the server by sending a signal to it. You\n   can also stop the server manually by executing mysqladmin\n   shutdown.\n\n   To start and stop MySQL automatically on your server, you need to\n   add start and stop commands to the appropriate places in your\n   /etc/rc* files.\n\n   If you use the Linux server RPM package\n   (MySQL-server-VERSION.rpm), or a native Linux package\n   installation, the mysql.server script may be installed in the\n   /etc/init.d directory with the name mysql. See Section 2.5.1,\n   \"Installing MySQL from RPM Packages on Linux,\" for more\n   information on the Linux RPM packages.\n\n   Some vendors provide RPM packages that install a startup script\n   under a different name such as mysqld.\n\n   If you install MySQL from a source distribution or using a binary\n   distribution format that does not install mysql.server\n   automatically, you can install it manually. The script can be\n   found in the support-files directory under the MySQL installation\n   directory or in a MySQL source tree.\n\n   To install mysql.server manually, copy it to the /etc/init.d\n   directory with the name mysql, and then make it executable. Do\n   this by changing location into the appropriate directory where\n   mysql.server is located and executing these commands:\nshell> cp mysql.server /etc/init.d/mysql\nshell> chmod +x /etc/init.d/mysql\n\n   Note\n\n   Older Red Hat systems use the /etc/rc.d/init.d directory rather\n   than /etc/init.d. Adjust the preceding commands accordingly.\n   Alternatively, first create /etc/init.d as a symbolic link that\n   points to /etc/rc.d/init.d:\nshell> cd /etc\nshell> ln -s rc.d/init.d .\n\n   After installing the script, the commands needed to activate it to\n   run at system startup depend on your operating system. On Linux,\n   you can use chkconfig:\nshell> chkconfig --add mysql\n\n   On some Linux systems, the following command also seems to be\n   necessary to fully enable the mysql script:\nshell> chkconfig --level 345 mysql on\n\n   On FreeBSD, startup scripts generally should go in\n   /usr/local/etc/rc.d/. The rc(8) manual page states that scripts in\n   this directory are executed only if their basename matches the\n   *.sh shell file name pattern. Any other files or directories\n   present within the directory are silently ignored. In other words,\n   on FreeBSD, you should install the mysql.server script as\n   /usr/local/etc/rc.d/mysql.server.sh to enable automatic startup.\n\n   As an alternative to the preceding setup, some operating systems\n   also use /etc/rc.local or /etc/init.d/boot.local to start\n   additional services on startup. To start up MySQL using this\n   method, you could append a command like the one following to the\n   appropriate startup file:\n/bin/sh -c 'cd /usr/local/mysql; ./bin/mysqld_safe --user=mysql &'\n\n   For other systems, consult your operating system documentation to\n   see how to install startup scripts.\n\n   You can add options for mysql.server in a global /etc/my.cnf file.\n   A typical /etc/my.cnf file might look like this:\n[mysqld]\ndatadir=/usr/local/mysql/var\nsocket=/var/tmp/mysql.sock\nport=3306\nuser=mysql\n\n[mysql.server]\nbasedir=/usr/local/mysql\n\n   The mysql.server script supports the following options: basedir,\n   datadir, and pid-file. If specified, they must be placed in an\n   option file, not on the command line. mysql.server supports only\n   start and stop as command-line arguments.\n\n   The following table shows which option groups the server and each\n   startup script read from option files.\n\n   Table 2.12. MySQL Startup scripts and supported server option\n   groups\n      Script                  Option Groups\n   mysqld       [mysqld], [server], [mysqld-major_version]\n   mysqld_safe  [mysqld], [server], [mysqld_safe]\n   mysql.server [mysqld], [mysql.server], [server]\n\n   [mysqld-major_version] means that groups with names like\n   [mysqld-5.5] and [mysqld-5.6] are read by servers having versions\n   5.5.x, 5.6.x, and so forth. This feature can be used to specify\n   options that can be read only by servers within a given release\n   series.\n\n   For backward compatibility, mysql.server also reads the\n   [mysql_server] group and mysqld_safe also reads the [safe_mysqld]\n   group. However, you should update your option files to use the\n   [mysql.server] and [mysqld_safe] groups instead when using MySQL\n   5.6.\n\n   For more information on MySQL configuration files and their\n   structure and contents, see Section 4.2.3.3, \"Using Option Files.\"\n\n2.10.1.3. Starting and Troubleshooting the MySQL Server\n\n   This section provides troubleshooting suggestions for problems\n   starting the server on Unix. If you are using Windows, see Section\n   2.3.5, \"Troubleshooting a Microsoft Windows MySQL Server\n   Installation.\"\n\n   If you have problems starting the server, here are some things to\n   try:\n\n     * Check the error log to see why the server does not start. Log\n       files are located in the data directory (typically C:\\Program\n       Files\\MySQL\\MySQL Server 5.6\\data on Windows,\n       /usr/local/mysql/data for a Unix binary distribution, and\n       /usr/local/var for a Unix source distribution). Look in the\n       data directory for files with names of the form host_name.err\n       and host_name.log, where host_name is the name of your server\n       host. Then examine the last few lines of these files. On Unix,\n       use tail to display them:\nshell> tail host_name.err\nshell> tail host_name.log\n\n     * Specify any special options needed by the storage engines you\n       are using. You can create a my.cnf file and specify startup\n       options for the engines that you plan to use. If you are going\n       to use storage engines that support transactional tables\n       (InnoDB, NDB\n       (http://dev.mysql.com/doc/refman/5.5/en/mysql-cluster.html)),\n       be sure that you have them configured the way you want before\n       starting the server. If you are using InnoDB tables, see\n       Section 14.2.1.2, \"Configuring InnoDB\" for guidelines and\n       Section 14.2.6, \"InnoDB Startup Options and System Variables\"\n       for option syntax.\n       Although storage engines use default values for options that\n       you omit, Oracle recommends that you review the available\n       options and specify explicit values for any options whose\n       defaults are not appropriate for your installation.\n\n     * Make sure that the server knows where to find the data\n       directory. The mysqld server uses this directory as its\n       current directory. This is where it expects to find databases\n       and where it expects to write log files. The server also\n       writes the pid (process ID) file in the data directory.\n       The default data directory location is hardcoded when the\n       server is compiled. To determine what the default path\n       settings are, invoke mysqld with the --verbose and --help\n       options. If the data directory is located somewhere else on\n       your system, specify that location with the --datadir option\n       to mysqld or mysqld_safe, on the command line or in an option\n       file. Otherwise, the server will not work properly. As an\n       alternative to the --datadir option, you can specify mysqld\n       the location of the base directory under which MySQL is\n       installed with the --basedir, and mysqld looks for the data\n       directory there.\n       To check the effect of specifying path options, invoke mysqld\n       with those options followed by the --verbose and --help\n       options. For example, if you change location into the\n       directory where mysqld is installed and then run the following\n       command, it shows the effect of starting the server with a\n       base directory of /usr/local:\nshell> ./mysqld --basedir=/usr/local --verbose --help\n       You can specify other options such as --datadir as well, but\n       --verbose and --help must be the last options.\n       Once you determine the path settings you want, start the\n       server without --verbose and --help.\n       If mysqld is currently running, you can find out what path\n       settings it is using by executing this command:\nshell> mysqladmin variables\n       Or:\nshell> mysqladmin -h host_name variables\n       host_name is the name of the MySQL server host.\n\n     * Make sure that the server can access the data directory. The\n       ownership and permissions of the data directory and its\n       contents must allow the server to read and modify them.\n       If you get Errcode 13 (which means Permission denied) when\n       starting mysqld, this means that the privileges of the data\n       directory or its contents do not permit server access. In this\n       case, you change the permissions for the involved files and\n       directories so that the server has the right to use them. You\n       can also start the server as root, but this raises security\n       issues and should be avoided.\n       On Unix, change location into the data directory and check the\n       ownership of the data directory and its contents to make sure\n       the server has access. For example, if the data directory is\n       /usr/local/mysql/var, use this command:\nshell> ls -la /usr/local/mysql/var\n       If the data directory or its files or subdirectories are not\n       owned by the login account that you use for running the\n       server, change their ownership to that account. If the account\n       is named mysql, use these commands:\nshell> chown -R mysql /usr/local/mysql/var\nshell> chgrp -R mysql /usr/local/mysql/var\n       Even with correct ownership, MySQL might fail to start up if\n       there is other security software running on your system that\n       manages application access to various parts of the file\n       system. In this case, reconfigure that software to enable\n       mysqld to access the directories it uses during normal\n       operation.\n\n     * Verify that the network interfaces the server wants to use are\n       available.\n       If either of the following errors occur, it means that some\n       other program (perhaps another mysqld server) is using the\n       TCP/IP port or Unix socket file that mysqld is trying to use:\nCan't start server: Bind on TCP/IP port: Address already in use\nCan't start server: Bind on unix socket...\n       Use ps to determine whether you have another mysqld server\n       running. If so, shut down the server before starting mysqld\n       again. (If another server is running, and you really want to\n       run multiple servers, you can find information about how to do\n       so in Section 5.6, \"Running Multiple MySQL Instances on One\n       Machine.\")\n       If no other server is running, execute the command telnet\n       your_host_name tcp_ip_port_number. (The default MySQL port\n       number is 3306.) Then press Enter a couple of times. If you do\n       not get an error message like telnet: Unable to connect to\n       remote host: Connection refused, some other program is using\n       the TCP/IP port that mysqld is trying to use. Track down what\n       program this is and disable it, or tell mysqld to listen to a\n       different port with the --port option. In this case, specify\n       the same non-default port number for client programs when\n       connecting to the server using TCP/IP.\n       Another reason the port might be inaccessible is that you have\n       a firewall running that blocks connections to it. If so,\n       modify the firewall settings to permit access to the port.\n       If the server starts but you cannot connect to it, make sure\n       that you have an entry in /etc/hosts that looks like this:\n127.0.0.1       localhost\n\n     * If you cannot get mysqld to start, try to make a trace file to\n       find the problem by using the --debug option. See MySQL\n       Internals: Porting to Other Systems\n       (http://dev.mysql.com/doc/internals/en/porting.html).\n\n2.10.2. Securing the Initial MySQL Accounts\n\n   Part of the MySQL installation process is to set up the mysql\n   database that contains the grant tables:\n\n     * Windows distributions contain preinitialized grant tables.\n\n     * On Unix, the mysql_install_db program populates the grant\n       tables. Some installation methods run this program for you.\n       Others require that you execute it manually. For details, see\n       Section 2.10.1, \"Unix Postinstallation Procedures.\"\n\n   The mysql.user grant table defines the initial MySQL user accounts\n   and their access privileges:\n\n     * Some accounts have the user name root. These are superuser\n       accounts that have all privileges and can do anything. The\n       initial root account passwords are empty, so anyone can\n       connect to the MySQL server as root without a password and be\n       granted all privileges.\n\n          + On Windows, root accounts are created that permit\n            connections from the local host only. Connections can be\n            made by specifying the host name localhost, the IP\n            address 127.0.0.1, or the IPv6 address ::1. If the user\n            selects the Enable root access from remote machines\n            option during installation, the Windows installer creates\n            another root account that permits connections from any\n            host.\n\n          + On Unix, each root account permits connections from the\n            local host. Connections can be made by specifying the\n            host name localhost, the IP address 127.0.0.1, the IPv6\n            address ::1, or the actual host name or IP address.\n       An attempt to connect to the host 127.0.0.1 normally resolves\n       to the localhost account. However, this fails if the server is\n       run with the --skip-name-resolve option, so the 127.0.0.1\n       account is useful in that case. The ::1 account is used for\n       IPv6 connections.\n\n     * Some accounts are for anonymous users. These have an empty\n       user name. The anonymous accounts have no password, so anyone\n       can use them to connect to the MySQL server.\n\n          + On Windows, there is one anonymous account that permits\n            connections from the local host. Connections can be made\n            by specifying a host name of localhost.\n\n          + On Unix, each anonymous account permits connections from\n            the local host. Connections can be made by specifying a\n            host name of localhost for one of the accounts, or the\n            actual host name or IP address for the other.\n\n   To display which accounts exist in the mysql.user table and check\n   whether their passwords are empty, use the following statement:\nmysql> SELECT User, Host, Password FROM mysql.user;\n+------+--------------------+----------+\n| User | Host               | Password |\n+------+--------------------+----------+\n| root | localhost          |          |\n| root | myhost.example.com |          |\n| root | 127.0.0.1          |          |\n| root | ::1                |          |\n|      | localhost          |          |\n|      | myhost.example.com |          |\n+------+--------------------+----------+\n\n   This output indicates that there are several root and\n   anonymous-user accounts, none of which have passwords. The output\n   might differ on your system, but the presence of accounts with\n   empty passwords means that your MySQL installation is unprotected\n   until you do something about it:\n\n     * You should assign a password to each MySQL root account.\n\n     * If you want to prevent clients from connecting as anonymous\n       users without a password, you should either assign a password\n       to each anonymous account or else remove the accounts.\n\n   In addition, the mysql.db table contains rows that permit all\n   accounts to access the test database and other databases with\n   names that start with test_. This is true even for accounts that\n   otherwise have no special privileges such as the default anonymous\n   accounts. This is convenient for testing but inadvisable on\n   production servers. Administrators who want database access\n   restricted only to accounts that have permissions granted\n   explicitly for that purpose should remove these mysql.db table\n   rows.\n\n   The following instructions describe how to set up passwords for\n   the initial MySQL accounts, first for the root accounts, then for\n   the anonymous accounts. The instructions also cover how to remove\n   the anonymous accounts, should you prefer not to permit anonymous\n   access at all, and describe how to remove permissive access to\n   test databases. Replace newpwd in the examples with the password\n   that you want to use. Replace host_name with the name of the\n   server host. You can determine this name from the output of the\n   preceding SELECT statement. For the output shown, host_name is\n   myhost.example.com.\n   Note\n\n   For additional information about setting passwords, see Section\n   6.3.5, \"Assigning Account Passwords.\" If you forget your root\n   password after setting it, see Section C.5.4.1, \"How to Reset the\n   Root Password.\"\n\n   You might want to defer setting the passwords until later, to\n   avoid the need to specify them while you perform additional setup\n   or testing. However, be sure to set them before using your\n   installation for production purposes.\n\n   To set up additional accounts, see Section 6.3.2, \"Adding User\n   Accounts.\"\n\nAssigning root Account Passwords\n\n   The root account passwords can be set several ways. The following\n   discussion demonstrates three methods:\n\n     * Use the SET PASSWORD statement\n\n     * Use the UPDATE statement\n\n     * Use the mysqladmin command-line client program\n\n   To assign passwords using SET PASSWORD, connect to the server as\n   root and issue a SET PASSWORD statement for each root account\n   listed in the mysql.user table. Be sure to encrypt the password\n   using the PASSWORD() function.\n\n   For Windows, do this:\nshell> mysql -u root\nmysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpwd');\nmysql> SET PASSWORD FOR 'root'@'127.0.0.1' = PASSWORD('newpwd');\nmysql> SET PASSWORD FOR 'root'@'::1' = PASSWORD('newpwd');\nmysql> SET PASSWORD FOR 'root'@'%' = PASSWORD('newpwd');\n\n   The last statement is unnecessary if the mysql.user table has no\n   root account with a host value of %.\n\n   For Unix, do this:\nshell> mysql -u root\nmysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpwd');\nmysql> SET PASSWORD FOR 'root'@'127.0.0.1' = PASSWORD('newpwd');\nmysql> SET PASSWORD FOR 'root'@'::1' = PASSWORD('newpwd');\nmysql> SET PASSWORD FOR 'root'@'host_name' = PASSWORD('newpwd');\n\n   You can also use a single statement that assigns a password to all\n   root accounts by using UPDATE to modify the mysql.user table\n   directly. This method works on any platform:\nshell> mysql -u root\nmysql> UPDATE mysql.user SET Password = PASSWORD('newpwd')\n    ->     WHERE User = 'root';\nmysql> FLUSH PRIVILEGES;\n\n   The FLUSH statement causes the server to reread the grant tables.\n   Without it, the password change remains unnoticed by the server\n   until you restart it.\n\n   To assign passwords to the root accounts using mysqladmin, execute\n   the following commands:\nshell> mysqladmin -u root password \"newpwd\"\nshell> mysqladmin -u root -h host_name password \"newpwd\"\n\n   Those commands apply both to Windows and to Unix. The double\n   quotation marks around the password are not always necessary, but\n   you should use them if the password contains spaces or other\n   characters that are special to your command interpreter.\n\n   The mysqladmin method of setting the root account passwords does\n   not work for the 'root'@'127.0.0.1' or 'root'@'::1' account. Use\n   the SET PASSWORD method shown earlier.\n\n   After the root passwords have been set, you must supply the\n   appropriate password whenever you connect as root to the server.\n   For example, to shut down the server with mysqladmin, use this\n   command:\nshell> mysqladmin -u root -p shutdown\nEnter password: (enter root password here)\n\nAssigning Anonymous Account Passwords\n\n   The mysql commands in the following instructions include a -p\n   option based on the assumption that you have set the root account\n   passwords using the preceding instructions and must specify that\n   password when connecting to the server.\n\n   To assign passwords to the anonymous accounts, connect to the\n   server as root, then use either SET PASSWORD or UPDATE. Be sure to\n   encrypt the password using the PASSWORD() function.\n\n   To use SET PASSWORD on Windows, do this:\nshell> mysql -u root -p\nEnter password: (enter root password here)\nmysql> SET PASSWORD FOR ''@'localhost' = PASSWORD('newpwd');\n\n   To use SET PASSWORD on Unix, do this:\nshell> mysql -u root -p\nEnter password: (enter root password here)\nmysql> SET PASSWORD FOR ''@'localhost' = PASSWORD('newpwd');\nmysql> SET PASSWORD FOR ''@'host_name' = PASSWORD('newpwd');\n\n   To set the anonymous-user account passwords with a single UPDATE\n   statement, do this (on any platform):\nshell> mysql -u root -p\nEnter password: (enter root password here)\nmysql> UPDATE mysql.user SET Password = PASSWORD('newpwd')\n    ->     WHERE User = '';\nmysql> FLUSH PRIVILEGES;\n\n   The FLUSH statement causes the server to reread the grant tables.\n   Without it, the password change remains unnoticed by the server\n   until you restart it.\n\nRemoving Anonymous Accounts\n\n   If you prefer to remove any anonymous accounts rather than\n   assigning them passwords, do so as follows on Windows:\nshell> mysql -u root -p\nEnter password: (enter root password here)\nmysql> DROP USER ''@'localhost';\n\n   On Unix, remove the anonymous accounts like this:\nshell> mysql -u root -p\nEnter password: (enter root password here)\nmysql> DROP USER ''@'localhost';\nmysql> DROP USER ''@'host_name';\n\nSecuring Test Databases\n\n   By default, the mysql.db table contains rows that permit access by\n   any user to the test database and other databases with names that\n   start with test_. (These rows have an empty User column value,\n   which for access-checking purposes matches any user name.) This\n   means that such databases can be used even by accounts that\n   otherwise possess no privileges. If you want to remove any-user\n   access to test databases, do so as follows:\nshell> mysql -u root -p\nEnter password: (enter root password here)\nmysql> DELETE FROM mysql.db WHERE Db LIKE 'test%';\nmysql> FLUSH PRIVILEGES;\n\n   The FLUSH statement causes the server to reread the grant tables.\n   Without it, the privilege change remains unnoticed by the server\n   until you restart it.\n\n   With the preceding change, only users who have global database\n   privileges or privileges granted explicitly for the test database\n   can use it. However, if you do not want the database to exist at\n   all, drop it:\nmysql> DROP DATABASE test;\n\n   Note\n\n   On Windows, you can also perform the process described in this\n   section during installation with MySQL Installer (see Section\n   2.3.3, \"Installing MySQL on Microsoft Windows Using MySQL\n   Installer\"). On other platforms, the MySQL distribution includes\n   mysql_secure_installation, a command-line utility that automates\n   much of the process of securing a MySQL installation. And MySQL\n   Workbench is available on all platforms, and also offers the\n   ability to manage user accounts (see Chapter 24, \"MySQL Workbench\"\n   ).\n\n2.11. Upgrading or Downgrading MySQL\n\n   This section describes the steps to upgrade or downgrade a MySQL\n   installation.\n\n   Upgrading is a common procedure, as you pick up bug fixes within\n   the same MySQL release series or significant features between\n   major MySQL releases. You perform this procedure first on some\n   test systems to make sure everything works smoothly, and then on\n   the production systems.\n\n   Downgrading is less common. Typically, you undo an upgrade because\n   of some compatibility or performance issue that occurs on a\n   production system, and was not uncovered during initial upgrade\n   verification on the test systems. As with the upgrade procedure,\n   perform and verify the downgrade procedure on some test systems\n   first, before using it on a production system.\n\n2.11.1. Upgrading MySQL\n\n   As a general rule, to upgrade from one release series to another,\n   go to the next series rather than skipping a series. To upgrade\n   from a release series previous to MySQL 5.5, upgrade to each\n   successive release series in turn until you have reached MySQL\n   5.5, and then proceed with the upgrade to MySQL 5.6. For example,\n   if you currently are running MySQL 5.1 and wish to upgrade to a\n   newer series, upgrade to MySQL 5.5 first before upgrading to 5.6,\n   and so forth. For information on upgrading to MySQL 5.5, see the\n   MySQL 5.5 Reference Manual.\n\n   To upgrade to MySQL 5.6, use the items in the following checklist\n   as a guide:\n\n     * Before any upgrade, back up your databases, including the\n       mysql database that contains the grant tables. See Section\n       7.2, \"Database Backup Methods.\"\n\n     * Read all the notes in Section 2.11.1.1, \"Upgrading from MySQL\n       5.5 to 5.6.\" These notes enable you to identify upgrade issues\n       that apply to your current MySQL installation. Some\n       incompatibilities discussed in that section require your\n       attention before upgrading. Others require some action after\n       upgrading.\n\n     * Read the Release Notes\n       (http://dev.mysql.com/doc/relnotes/mysql/5.6/en/) as well,\n       which provide information about features that are new in MySQL\n       5.6 or differ from from those found in earlier MySQL releases.\n\n     * After upgrading to a new version of MySQL, run mysql_upgrade\n       (see Section 4.4.7, \"mysql_upgrade --- Check and Upgrade MySQL\n       Tables\"). This program checks your tables, and attempts to\n       repair them if necessary. It also updates your grant tables to\n       make sure that they have the current structure so that you can\n       take advantage of any new capabilities. (Some releases of\n       MySQL introduce changes to the structure of the grant tables\n       to add new privileges or features.)\n       mysql_upgrade does not upgrade the contents of the help\n       tables. For upgrade instructions, see Section 5.1.10,\n       \"Server-Side Help.\"\n       mysql_upgrade should not be used when the server is running\n       with --gtid-mode=ON, since it may make changes in\n       nontransactional system tables in the mysql database, many of\n       which are MyISAM and cannot be changed to use a different\n       storage engine. See Section 16.1.3.3, \"GTID mode and\n       mysql_upgrade.\"\n\n     * If you run MySQL Server on Windows, see Section 2.3.6,\n       \"Upgrading MySQL on Windows.\"\n\n     * If you use replication, see Section 16.4.3, \"Upgrading a\n       Replication Setup,\" for information on upgrading your\n       replication setup.\n\n     * If you upgrade an installation originally produced by\n       installing multiple RPM packages, it is best to upgrade all\n       the packages, not just some. For example, if you previously\n       installed the server and client RPMs, do not upgrade just the\n       server RPM.\n\n     * If you have created a user-defined function (UDF) with a given\n       name and upgrade MySQL to a version that implements a new\n       built-in function with the same name, the UDF becomes\n       inaccessible. To correct this, use DROP FUNCTION to drop the\n       UDF, and then use CREATE FUNCTION to re-create the UDF with a\n       different nonconflicting name. The same is true if the new\n       version of MySQL implements a built-in function with the same\n       name as an existing stored function. See Section 9.2.4,\n       \"Function Name Parsing and Resolution,\" for the rules\n       describing how the server interprets references to different\n       kinds of functions.\n\n   For upgrades between versions of a MySQL release series that has\n   reached General Availability status, you can move the MySQL format\n   files and data files between different versions on systems with\n   the same architecture. For upgrades to a version of a MySQL\n   release series that is in development status, that is not\n   necessarily true. Use of development releases is at your own risk.\n\n   If you are cautious about using new versions, you can always\n   rename your old mysqld before installing a newer one. For example,\n   if you are using a version of MySQL 5.5 and want to upgrade to\n   5.6, rename your current server from mysqld to mysqld-5.5. If your\n   new mysqld then does something unexpected, you can simply shut it\n   down and restart with your old mysqld.\n\n   If problems occur, such as that the new mysqld server does not\n   start or that you cannot connect without a password, verify that\n   you do not have an old my.cnf file from your previous\n   installation. You can check this with the --print-defaults option\n   (for example, mysqld --print-defaults). If this command displays\n   anything other than the program name, you have an active my.cnf\n   file that affects server or client operation.\n\n   If, after an upgrade, you experience problems with compiled client\n   programs, such as Commands out of sync or unexpected core dumps,\n   you probably have used old header or library files when compiling\n   your programs. In this case, check the date for your mysql.h file\n   and libmysqlclient.a library to verify that they are from the new\n   MySQL distribution. If not, recompile your programs with the new\n   headers and libraries. Recompilation might also be necessary for\n   programs compiled against the shared client library if the library\n   major version number has changed (for example from\n   libmysqlclient.so.15 to libmysqlclient.so.16.\n\n   If your MySQL installation contains a large amount of data that\n   might take a long time to convert after an in-place upgrade, you\n   might find it useful to create a \"dummy\" database instance for\n   assessing what conversions might be needed and the work involved\n   to perform them. Make a copy of your MySQL instance that contains\n   a full copy of the mysql database, plus all other databases\n   without data. Run your upgrade procedure on this dummy instance to\n   see what actions might be needed so that you can better evaluate\n   the work involved when performing actual data conversion on your\n   original database instance.\n\n   It is a good idea to rebuild and reinstall the Perl DBD::mysql\n   module whenever you install a new release of MySQL. The same\n   applies to other MySQL interfaces as well, such as PHP mysql\n   extensions and the Python MySQLdb module.\n\n2.11.1.1. Upgrading from MySQL 5.5 to 5.6\n\n   Note\n\n   Beginning with MySQL 5.6.6, several MySQL Server parameters have\n   defaults that differ from previous releases. See the notes\n   regarding these changes later in this section, particularly\n   regarding overriding them to preserve backward compatibility if\n   that is a concern.\n   Note\n\n   It is good practice to back up your data before installing any new\n   version of software. Although MySQL works very hard to ensure a\n   high level of quality, protect your data by making a backup.\n\n   To upgrade to 5.6 from any previous version, MySQL recommends that\n   you dump your tables with mysqldump before upgrading and reload\n   the dump file after upgrading. Use the --all-databases option to\n   include all databases in the dump. If your databases include\n   stored programs, use the --routines and --events options as well.\n\n   In general, do the following when upgrading from MySQL 5.5 to 5.6:\n\n     * Read all the items in these sections to see whether any of\n       them might affect your applications:\n\n          + Section 2.11.1, \"Upgrading MySQL,\" has general update\n            information.\n\n          + The items in the change lists provided later in this\n            section enable you to identify upgrade issues that apply\n            to your current MySQL installation. Some\n            incompatibilities discussed there require your attention\n            before upgrading. Others should be dealt with after\n            upgrading.\n\n          + The MySQL 5.6 Release Notes\n            (http://dev.mysql.com/doc/relnotes/mysql/5.6/en/)\n            describe significant new features you can use in 5.6 or\n            that differ from those found in earlier MySQL releases.\n            Some of these changes may result in incompatibilities.\n       Note particularly any changes that are marked Known issue or\n       Incompatible change. These incompatibilities with earlier\n       versions of MySQL may require your attention before you\n       upgrade. Our aim is to avoid these changes, but occasionally\n       they are necessary to correct problems that would be worse\n       than an incompatibility between releases. If any upgrade issue\n       applicable to your installation involves an incompatibility\n       that requires special handling, follow the instructions given\n       in the incompatibility description. Sometimes this involves\n       dumping and reloading tables, or use of a statement such as\n       CHECK TABLE or REPAIR TABLE.\n       For dump and reload instructions, see Section 2.11.4,\n       \"Rebuilding or Repairing Tables or Indexes.\" Any procedure\n       that involves REPAIR TABLE with the USE_FRM option must be\n       done before upgrading. Use of this statement with a version of\n       MySQL different from the one used to create the table (that\n       is, using it after upgrading) may damage the table. See\n       Section 13.7.2.5, \"REPAIR TABLE Syntax.\"\n\n     * Before upgrading to a new version of MySQL, Section 2.11.3,\n       \"Checking Whether Tables or Indexes Must Be Rebuilt,\" to see\n       whether changes to table formats or to character sets or\n       collations were made between your current version of MySQL and\n       the version to which you are upgrading. If so and these\n       changes result in an incompatibility between MySQL versions,\n       you will need to upgrade the affected tables using the\n       instructions in Section 2.11.4, \"Rebuilding or Repairing\n       Tables or Indexes.\"\n\n     * After upgrading to a new version of MySQL, run mysql_upgrade\n       (see Section 4.4.7, \"mysql_upgrade --- Check and Upgrade MySQL\n       Tables\"). This program checks your tables, and attempts to\n       repair them if necessary. It also updates your grant tables to\n       make sure that they have the current structure so that you can\n       take advantage of any new capabilities. (Some releases of\n       MySQL introduce changes to the structure of the grant tables\n       to add new privileges or features.)\n       mysql_upgrade does not upgrade the contents of the help\n       tables. For upgrade instructions, see Section 5.1.10,\n       \"Server-Side Help.\"\n\n     * If you run MySQL Server on Windows, see Section 2.3.6,\n       \"Upgrading MySQL on Windows.\"\n\n     * If you use replication, see Section 16.4.3, \"Upgrading a\n       Replication Setup,\" for information on upgrading your\n       replication setup.\n\n   If your MySQL installation contains a large amount of data that\n   might take a long time to convert after an in-place upgrade, you\n   might find it useful to create a \"dummy\" database instance for\n   assessing what conversions might be needed and the work involved\n   to perform them. Make a copy of your MySQL instance that contains\n   a full copy of the mysql database, plus all other databases\n   without data. Run your upgrade procedure on this dummy instance to\n   see what actions might be needed so that you can better evaluate\n   the work involved when performing actual data conversion on your\n   original database instance.\n\n   Read all the items in the following sections to see whether any of\n   them might affect your applications:\n\nConfiguration Changes\n\n\n     * Beginning with MySQL 5.6.6, several MySQL Server parameters\n       have defaults that differ from previous releases. The\n       motivation for these changes is to provide better out-of-box\n       performance and to reduce the need for the database\n       administrator to change settings manually. These changes are\n       subject to possible revision in future releases as we gain\n       feedback.\n       In some cases, a parameter has a different static default\n       value. In other cases, the server autosizes a parameter at\n       startup using a formula based on other related parameters or\n       server host configuration, rather than using a static value.\n       For example, the setting for back_log now is its previous\n       default of 50, adjusted up by an amount proportional to the\n       value of max_connections. The idea behind autosizing is that\n       when the server has information available to make a decision\n       about a parameter setting likely to be better than a fixed\n       default, it will.\n       The following table summarizes changes to defaults. Any of\n       these can be overridden by specifying an explicit value at\n       server startup.\n\n   Parameter Old Default New Default\n   back_log 50 Autosized using max_connections\n   binlog_checksum NONE CRC32\n   --binlog-row-event-max-size 1024 8192\n   flush_time 1800 (on Windows) 0\n   innodb_autoextend_increment 8 64\n   innodb_buffer_pool_instances 1 8 (platform dependent)\n   innodb_checksum_algorithm INNODB CRC32\n   innodb_concurrency_tickets 500 5000\n   innodb_file_per_table 0 1\n   innodb_old_blocks_time 0 1000\n   innodb_open_files 300 Autosized using innodb_file_per_table,\n   table_open_cache\n   innodb_stats_on_metadata ON OFF\n   join_buffer_size 128KB 256KB\n   max_allowed_packet 1MB 4MB\n   max_connect_errors 10 100\n   sync_master_info 0 10000\n   sync_relay_log 0 10000\n   sync_relay_log_info 0 10000\n       With regard to compatibility with previous releases, the most\n       important changes are:\n\n          + innodb_file_per_table is enabled (previously disabled).\n\n          + innodb_checksum_algorithm is CRC32 (previously INNODB).\n\n          + binlog_checksum is CRC32 (previously NONE).\n       Therefore, if you are upgrading an existing MySQL\n       installation, have not already changed the values of these\n       parameters from their previous defaults, and backward\n       compatibility is a concern, you may want to explicitly set\n       these parameters to their previous defaults. For example, put\n       these lines in the server option file:\n[mysqld]\ninnodb_file_per_table=0\ninnodb_checksum_algorithm=INNODB\nbinlog_checksum=NONE\n       Those settings preserve compatibility as follows:\n\n          + With the new default of innodb_file_per_table enabled,\n            ALTER TABLE operations following an upgrade will move\n            InnoDB tables that are in the system tablespace to\n            individual .ibd files. Using innodb_file_per_table=0 will\n            prevent this from happening.\n\n          + Setting innodb_checksum_algorithm=INNODB permits binary\n            downgrades after upgrading to this release. With a\n            setting of CRC32, InnoDB would use checksumming that\n            older MySQL versions cannot use.\n\n          + With binlog_checksum=NONE, the server can be used as a\n            replication master without causing failure of older\n            slaves that do not understand binary log checksums.\n\nServer Changes\n\n\n     * Incompatible change: As of MySQL 5.6, the full-text stopword\n       file is loaded and searched using latin1 if\n       character_set_server is ucs2, utf16, utf16le, or utf32. If any\n       table was created with FULLTEXT indexes while the server\n       character set was ucs2, utf16, utf16le, or utf32, repair it\n       using this statement:\nREPAIR TABLE tbl_name QUICK;\n\nSQL Changes\n\n\n     * Some keywords may be reserved in MySQL 5.6 that were not\n       reserved in MySQL 5.5. See Section 9.3, \"Reserved Words.\"\n\n     * The YEAR(2) data type has certain issues that you should\n       consider before choosing to use it. As of MySQL 5.6.6, YEAR(2)\n       is deprecated. YEAR(2) columns in existing tables are treated\n       as before, but YEAR(2) in new or altered tables are converted\n       to YEAR(4). For more information, see Section 11.3.4, \"YEAR(2)\n       Limitations and Migrating to YEAR(4).\"\n\n     * As of MySQL 5.6.6, it is explicitly disallowed to assign the\n       value DEFAULT to stored procedure or function parameters or\n       stored program local variables (for example with a SET\n       var_name = DEFAULT statement). This was not previously\n       supported, or documented as permitted, but is flagged as an\n       incompatible change in case existing code inadvertantly used\n       this construct. It remains permissible to assign DEFAULT to\n       system variables, as before, but assigning DEFAULT to\n       parameters or local variables now results in a syntax error.\n       After an upgrade to MySQL 5.6.6 or later, existing stored\n       programs that use this construct produce a syntax error when\n       invoked. If a mysqldump file from 5.6.5 or earlier is loaded\n       into 5.6.6 or later, the load operation fails and affected\n       stored program definitions must be changed.\n\n     * In MySQL, the TIMESTAMP data type differs in nonstandard ways\n       from other data types:\n\n          + TIMESTAMP columns not explicitly declared with the NULL\n            attribute are assigned the NOT NULL attribute. (Columns\n            of other data types, if not explicitly declared as NOT\n            NULL, permit NULL values.) Setting such a column to NULL\n            sets it to the current timestamp.\n\n          + The first TIMESTAMP column in a table, if not declared\n            with the NULL attribute or an explicit DEFAULT or ON\n            UPDATE clause, is automatically assigned the DEFAULT\n            CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP\n            attributes.\n\n          + TIMESTAMP columns following the first one, if not\n            declared with the NULL attribute or an explicit DEFAULT\n            clause, are automatically assigned DEFAULT '0000-00-00\n            00:00:00' (the \"zero\" timestamp). For inserted rows that\n            specify no explicit value for such a column, the column\n            is assigned '0000-00-00 00:00:00' and no warning occurs.\n       Those nonstandard behaviors remain the default for TIMESTAMP\n       but as of MySQL 5.6.6 are deprecated and this warning appears\n       at startup:\n[Warning] TIMESTAMP with implicit DEFAULT value is deprecated.\nPlease use --explicit_defaults_for_timestamp server option (see\ndocumentation for more details).\n       As indicated by the warning, to turn off the nonstandard\n       behaviors, enable the new explicit_defaults_for_timestamp\n       system variable at server startup. With this variable enabled,\n       the server handles TIMESTAMP as follows instead:\n\n          + TIMESTAMP columns not explicitly declared as NOT NULL\n            permit NULL values. Setting such a column to NULL sets it\n            to NULL, not the current timestamp.\n\n          + No TIMESTAMP column is assigned the DEFAULT\n            CURRENT_TIMESTAMP or ON UPDATE CURRENT_TIMESTAMP\n            attributes automatically. Those attributes must be\n            explicitly specified.\n\n          + TIMESTAMP columns declared as NOT NULL and without an\n            explicit DEFAULT clause are treated as having no default\n            value. For inserted rows that specify no explicit value\n            for such a column, the result depends on the SQL mode. If\n            strict SQL mode is enabled, an error occurs. If strict\n            SQL mode is not enabled, the column is assigned the\n            implicit default of '0000-00-00 00:00:00' and a warning\n            occurs. This is similar to how MySQL treats other\n            temporal types such as DATETIME.\n       To upgrade servers used for replication, upgrade the slaves\n       first, then the master. Replication between the master and its\n       slaves should work provided that all use the same value of\n       explicit_defaults_for_timestamp:\n\n         1. Bring down the slaves, upgrade them, configure them with\n            the desired value of explicit_defaults_for_timestamp, and\n            bring them back up.\n            The slaves will recognize from the format of the binary\n            logs received from the master that the master is older\n            (predates the introduction of\n            explicit_defaults_for_timestamp) and that operations on\n            TIMESTAMP columns coming from the master use the old\n            TIMESTAMP behavior.\n\n         2. Bring down the master, upgrade it, and configure it with\n            the same explicit_defaults_for_timestamp value used on\n            the slaves, and bring it back up.\n\n2.11.2. Downgrading MySQL\n\n   This section describes what to do to downgrade to an older MySQL\n   version, in the unlikely case that the previous version worked\n   better than the new one.\n\n   To downgrade within the same release series (for example, from\n   5.5.13 to 5.5.12), typically you just install the new binaries on\n   top of the old ones and do not make any changes to the databases.\n   There are exceptions for some features that are introduced partway\n   through the development cycle for a release, such as InnoDB\n   support for small page sizes and FULLTEXT indexes, introduced in\n   MySQL 5.6.4. As always, it is a good idea to make a backup\n   beforehand, in case a downgrade fails and leaves the instance in\n   an unusable state.\n\n   The following items form a checklist of things to do whenever you\n   perform a downgrade:\n\n     * Read the upgrading section for the release series from which\n       you are downgrading to be sure that it does not have any\n       features you really need. See Section 2.11.1, \"Upgrading\n       MySQL.\"\n\n     * If there is a downgrading section for that version, read that\n       as well.\n\n     * To see which new features were added between the version to\n       which you are downgrading and your current version, see the\n       Release Notes\n       (http://dev.mysql.com/doc/relnotes/mysql/5.6/en/).\n\n     * Check Section 2.11.3, \"Checking Whether Tables or Indexes Must\n       Be Rebuilt,\" to see whether changes to table formats or to\n       character sets or collations were made between your current\n       version of MySQL and the version to which you are downgrading.\n       If so and these changes result in an incompatibility between\n       MySQL versions, you will need to downgrade the affected tables\n       using the instructions in Section 2.11.4, \"Rebuilding or\n       Repairing Tables or Indexes.\"\n\n   In most cases, you can move the MySQL format files and data files\n   between different versions on the same architecture as long as you\n   stay within versions for the same release series of MySQL.\n\n   If you downgrade from one release series to another, there may be\n   incompatibilities in table storage formats. In this case, use\n   mysqldump to dump your tables before downgrading. After\n   downgrading, reload the dump file using mysql or mysqlimport to\n   re-create your tables. For examples, see Section 2.11.5, \"Copying\n   MySQL Databases to Another Machine.\"\n\n   A typical symptom of a downward-incompatible table format change\n   when you downgrade is that you cannot open tables. In that case,\n   use the following procedure:\n\n    1. Stop the older MySQL server that you are downgrading to.\n\n    2. Restart the newer MySQL server you are downgrading from.\n\n    3. Dump any tables that were inaccessible to the older server by\n       using mysqldump to create a dump file.\n\n    4. Stop the newer MySQL server and restart the older one.\n\n    5. Reload the dump file into the older server. Your tables should\n       be accessible.\n\n   If system tables in the mysql database changed, downgrading might\n   introduce some loss of functionality or require some adjustments.\n   Here are some examples:\n\n     * Trigger creation requires the TRIGGER privilege as of MySQL\n       5.1. In MySQL 5.0, there is no TRIGGER privilege and SUPER is\n       required instead. If you downgrade from MySQL 5.1 to 5.0, you\n       will need to give the SUPER privilege to those accounts that\n       had the TRIGGER privilege in 5.1.\n\n     * Triggers were added in MySQL 5.0, so if you downgrade from 5.0\n       to 4.1, you cannot use triggers at all.\n\n     * The mysql.proc.comment column definition changed between MySQL\n       5.1 and 5.5. After a downgrade from 5.5 to 5.1, this table is\n       seen as corrupt and in need of repair. To workaround this\n       problem, execute mysql_upgrade from the version of MySQL to\n       which you downgraded.\n\n2.11.2.1. Downgrading to MySQL 5.5\n\n   When downgrading to MySQL 5.5 from MySQL 5.6, keep in mind the\n   following issues relating to features found in MySQL 5.6, but not\n   in MySQL 5.5:\n\nInnoDB\n\n\n     * InnoDB search indexes (with a type of FULLTEXT), introduced in\n       MySQL 5.6.4, are not compatible with earlier versions of\n       MySQL, including earlier releases in the 5.6 series. Drop such\n       indexes before performing a downgrade.\n\n     * InnoDB small page sizes specified by the innodb_page_size\n       configuration option, introduced in MySQL 5.6.4, are not\n       compatible with earlier versions of MySQL, including earlier\n       releases in the 5.6 series. Dump all InnoDB tables in\n       instances that use a smaller InnoDB page size, drop the\n       tables, and re-create and reload them after the downgrade.\n\nReplication\n\n\n     * As of MySQL 5.6, the relay-log.info file contains a line count\n       and a replication delay value, so the file format differs from\n       that in older versions. See Section 16.2.2.2, \"Slave Status\n       Logs.\" If you downgrade a slave server to a version older than\n       MySQL 5.6, the older server will not read the file correctly.\n       To address this, modify the file in a text editor to delete\n       the initial line containing the number of lines.\n\n2.11.3. Checking Whether Tables or Indexes Must Be Rebuilt\n\n   A binary upgrade or downgrade is one that installs one version of\n   MySQL \"in place\" over an existing version, without dumping and\n   reloading tables:\n\n    1. Stop the server for the existing version if it is running.\n\n    2. Install a different version of MySQL. This is an upgrade if\n       the new version is higher than the original version, a\n       downgrade if the version is lower.\n\n    3. Start the server for the new version.\n\n   In many cases, the tables from the previous version of MySQL can\n   be used without problem by the new version. However, sometimes\n   changes occur that require tables or table indexes to be rebuilt,\n   as described in this section. If you have tables that are affected\n   by any of the issues described here, rebuild the tables or indexes\n   as necessary using the instructions given in Section 2.11.4,\n   \"Rebuilding or Repairing Tables or Indexes.\"\n\nTable Incompatibilities\n\n   After a binary upgrade to MySQL 5.1 from a MySQL 5.0 installation\n   that contains ARCHIVE tables, accessing those tables causes the\n   server to crash, even if you have run mysql_upgrade or CHECK TABLE\n   ... FOR UPGRADE. To work around this problem, use mysqldump to\n   dump all ARCHIVE tables before upgrading, and reload them into\n   MySQL 5.1 after upgrading. The same problem occurs for binary\n   downgrades from MySQL 5.1 to 5.0.\n\n   The upgrade problem is fixed in MySQL 5.6.4: The server can open\n   ARCHIVE tables created in MySQL 5.0. However, it remains the\n   recommended upgrade procedure to dump 5.0 ARCHIVE tables before\n   upgrading and reload them after upgrading.\n\nIndex Incompatibilities\n\n   In MySQL 5.6.3, the length limit for index prefix keys is\n   increased from 767 bytes to 3072 bytes, for InnoDB tables using\n   ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED. See Section 14.2.7,\n   \"Limits on InnoDB Tables\" for details. This change is also\n   backported to MySQL 5.5.14. If you downgrade from one of these\n   releases or higher, to an earlier release with a lower length\n   limit, the index prefix keys could be truncated at 767 bytes or\n   the downgrade could fail. This issue could only occur if the\n   configuration option innodb_large_prefix was enabled on the server\n   being downgraded.\n\n   If you perform a binary upgrade without dumping and reloading\n   tables, you cannot upgrade directly from MySQL 4.1 to 5.1 or\n   higher. This occurs due to an incompatible change in the MyISAM\n   table index format in MySQL 5.0. Upgrade from MySQL 4.1 to 5.0 and\n   repair all MyISAM tables. Then upgrade from MySQL 5.0 to 5.1 and\n   check and repair your tables.\n\n   Modifications to the handling of character sets or collations\n   might change the character sort order, which causes the ordering\n   of entries in any index that uses an affected character set or\n   collation to be incorrect. Such changes result in several possible\n   problems:\n\n     * Comparison results that differ from previous results\n\n     * Inability to find some index values due to misordered index\n       entries\n\n     * Misordered ORDER BY results\n\n     * Tables that CHECK TABLE reports as being in need of repair\n\n   The solution to these problems is to rebuild any indexes that use\n   an affected character set or collation, either by dropping and\n   re-creating the indexes, or by dumping and reloading the entire\n   table. In some cases, it is possible to alter affected columns to\n   use a different collation. For information about rebuilding\n   indexes, see Section 2.11.4, \"Rebuilding or Repairing Tables or\n   Indexes.\"\n\n   To check whether a table has indexes that must be rebuilt, consult\n   the following list. It indicates which versions of MySQL\n   introduced character set or collation changes that require indexes\n   to be rebuilt. Each entry indicates the version in which the\n   change occurred and the character sets or collations that the\n   change affects. If the change is associated with a particular bug\n   report, the bug number is given.\n\n   The list applies both for binary upgrades and downgrades. For\n   example, Bug #27877 was fixed in MySQL 5.1.24 and 5.4.0, so it\n   applies to upgrades from versions older than 5.1.24 to 5.1.24 or\n   newer, and to downgrades from 5.1.24 or newer to versions older\n   than 5.1.24.\n\n   In many cases, you can use CHECK TABLE ... FOR UPGRADE to identify\n   tables for which index rebuilding is required. It will report this\n   message:\nTable upgrade required.\nPlease do \"REPAIR TABLE `tbl_name`\" or dump/reload to fix it!\n\n   In these cases, you can also use mysqlcheck --check-upgrade or\n   mysql_upgrade, which execute CHECK TABLE. However, the use of\n   CHECK TABLE applies only after upgrades, not downgrades. Also,\n   CHECK TABLE is not applicable to all storage engines. For details\n   about which storage engines CHECK TABLE supports, see Section\n   13.7.2.2, \"CHECK TABLE Syntax.\"\n\n   These changes cause index rebuilding to be necessary:\n\n     * MySQL 5.1.24, 5.4.0 (Bug #27877)\n       Affects indexes that use the utf8_general_ci or\n       ucs2_general_ci collation for columns that contain 'ß' LATIN\n       SMALL LETTER SHARP S (German). The bug fix corrected an error\n       in the original collations but introduced an incompatibility\n       such that 'ß' compares equal to characters with which it\n       previously compared different.\n       Affected tables can be detected by CHECK TABLE ... FOR UPGRADE\n       as of MySQL 5.1.30, 5.4.0 (see Bug #40053).\n       A workaround for this issue is implemented as of MySQL 5.1.62,\n       5.5.21, and 5.6.5. The workaround involves altering affected\n       columns to use the utf8_general_mysql500_ci and\n       ucs2_general_mysql500_ci collations, which preserve the\n       original pre-5.1.24 ordering of utf8_general_ci and\n       ucs2_general_ci.\n\n     * MySQL 5.0.48, 5.1.23 (Bug #27562)\n       Affects indexes that use the ascii_general_ci collation for\n       columns that contain any of these characters: '`' GRAVE\n       ACCENT, '[' LEFT SQUARE BRACKET, '\\' REVERSE SOLIDUS, ']'\n       RIGHT SQUARE BRACKET, '~' TILDE\n       Affected tables can be detected by CHECK TABLE ... FOR UPGRADE\n       as of MySQL 5.1.29, 5.4.0 (see Bug #39585).\n\n     * MySQL 5.0.48, 5.1.21 (Bug #29461)\n       Affects indexes for columns that use any of these character\n       sets: eucjpms, euc_kr, gb2312, latin7, macce, ujis\n       Affected tables can be detected by CHECK TABLE ... FOR UPGRADE\n       as of MySQL 5.1.29, 5.4.0 (see Bug #39585).\n\n2.11.4. Rebuilding or Repairing Tables or Indexes\n\n   This section describes how to rebuild a table, following changes\n   to MySQL such as how data types or character sets are handled. For\n   example, an error in a collation might have been corrected,\n   requiring a table rebuild to update the indexes for character\n   columns that use the collation. (For examples, see Section 2.11.3,\n   \"Checking Whether Tables or Indexes Must Be Rebuilt.\") You might\n   also need to repair or upgrade a table, as indicated by a table\n   check operation such as that performed by CHECK TABLE, mysqlcheck,\n   or mysql_upgrade.\n\n   Methods for rebuilding a table include dumping and reloading it,\n   or using ALTER TABLE or REPAIR TABLE.\n   Note\n\n   If you are rebuilding tables because a different version of MySQL\n   will not handle them after a binary (in-place) upgrade or\n   downgrade, you must use the dump-and-reload method. Dump the\n   tables before upgrading or downgrading using your original version\n   of MySQL. Then reload the tables after upgrading or downgrading.\n\n   If you use the dump-and-reload method of rebuilding tables only\n   for the purpose of rebuilding indexes, you can perform the dump\n   either before or after upgrading or downgrading. Reloading still\n   must be done afterward.\n\n   To rebuild a table by dumping and reloading it, use mysqldump to\n   create a dump file and mysql to reload the file:\nshell> mysqldump db_name t1 > dump.sql\nshell> mysql db_name < dump.sql\n\n   To rebuild all the tables in a single database, specify the\n   database name without any following table name:\nshell> mysqldump db_name > dump.sql\nshell> mysql db_name < dump.sql\n\n   To rebuild all tables in all databases, use the --all-databases\n   option:\nshell> mysqldump --all-databases > dump.sql\nshell> mysql < dump.sql\n\n   To rebuild a table with ALTER TABLE, use a \"null\" alteration; that\n   is, an ALTER TABLE statement that \"changes\" the table to use the\n   storage engine that it already has. For example, if t1 is a MyISAM\n   table, use this statement:\nmysql> ALTER TABLE t1 ENGINE = MyISAM;\n\n   If you are not sure which storage engine to specify in the ALTER\n   TABLE statement, use SHOW CREATE TABLE to display the table\n   definition.\n\n   If you must rebuild a table because a table checking operation\n   indicates that the table is corrupt or needs an upgrade, you can\n   use REPAIR TABLE if that statement supports the table's storage\n   engine. For example, to repair a MyISAM table, use this statement:\nmysql> REPAIR TABLE t1;\n\n   For storage engines such as InnoDB that REPAIR TABLE does not\n   support, use mysqldump to create a dump file and mysql to reload\n   the file, as described earlier.\n\n   For specifics about which storage engines REPAIR TABLE supports,\n   see Section 13.7.2.5, \"REPAIR TABLE Syntax.\"\n\n   mysqlcheck --repair provides command-line access to the REPAIR\n   TABLE statement. This can be a more convenient means of repairing\n   tables because you can use the --databases or --all-databases\n   option to repair all tables in specific databases or all\n   databases, respectively:\nshell> mysqlcheck --repair --databases db_name ...\nshell> mysqlcheck --repair --all-databases\n\n   For incompatibilities introduced in MySQL 5.1.24 by the fix for\n   Bug #27877 that corrected the utf8_general_ci and ucs2_general_ci\n   collations, a workaround is implemented as of MySQL 5.1.62,\n   5.5.21, and 5.6.5. Upgrade to one of those versions, then convert\n   each affected table using one of the following methods. In each\n   case, the workaround altering affected columns to use the\n   utf8_general_mysql500_ci and ucs2_general_mysql500_ci collations,\n   which preserve the original pre-5.1.24 ordering of utf8_general_ci\n   and ucs2_general_ci.\n\n     * To convert an affected table after a binary upgrade that\n       leaves the table files in place, alter the table to use the\n       new collation. Suppose that the table t1 contains one or more\n       problematic utf8 columns. To convert the table at the table\n       level, use a statement like this:\nALTER TABLE t1\nCONVERT TO CHARACTER SET utf8 COLLATE utf8_general_mysql500_ci;\n       To apply the change on a column-specific basis, use a\n       statement like this (be sure to repeat the column definition\n       as originally specified except for the COLLATE clause):\nALTER TABLE t1\nMODIFY c1 CHAR(N) CHARACTER SET utf8 COLLATE utf8_general_mysql500_ci\n;\n\n     * To upgrade the table using a dump and reload procedure, dump\n       the table using mysqldump, modify the CREATE TABLE statement\n       in the dump file to use the new collation, and reload the\n       table.\n\n   After making the appropriate changes, CHECK TABLE should report no\n   error.\n\n2.11.5. Copying MySQL Databases to Another Machine\n\n   You can copy the .frm, .MYI, and .MYD files for MyISAM tables\n   between different architectures that support the same\n   floating-point format. (MySQL takes care of any byte-swapping\n   issues.) See Section 14.3, \"The MyISAM Storage Engine.\"\n\n   In cases where you need to transfer databases between different\n   architectures, you can use mysqldump to create a file containing\n   SQL statements. You can then transfer the file to the other\n   machine and feed it as input to the mysql client.\n\n   Use mysqldump --help to see what options are available.\n\n   The easiest (although not the fastest) way to move a database\n   between two machines is to run the following commands on the\n   machine on which the database is located:\nshell> mysqladmin -h 'other_hostname' create db_name\nshell> mysqldump db_name | mysql -h 'other_hostname' db_name\n\n   If you want to copy a database from a remote machine over a slow\n   network, you can use these commands:\nshell> mysqladmin create db_name\nshell> mysqldump -h 'other_hostname' --compress db_name | mysql db_na\nme\n\n   You can also store the dump in a file, transfer the file to the\n   target machine, and then load the file into the database there.\n   For example, you can dump a database to a compressed file on the\n   source machine like this:\nshell> mysqldump --quick db_name | gzip > db_name.gz\n\n   Transfer the file containing the database contents to the target\n   machine and run these commands there:\nshell> mysqladmin create db_name\nshell> gunzip < db_name.gz | mysql db_name\n\n   You can also use mysqldump and mysqlimport to transfer the\n   database. For large tables, this is much faster than simply using\n   mysqldump. In the following commands, DUMPDIR represents the full\n   path name of the directory you use to store the output from\n   mysqldump.\n\n   First, create the directory for the output files and dump the\n   database:\nshell> mkdir DUMPDIR\nshell> mysqldump --tab=DUMPDIR db_name\n\n   Then transfer the files in the DUMPDIR directory to some\n   corresponding directory on the target machine and load the files\n   into MySQL there:\nshell> mysqladmin create db_name           # create database\nshell> cat DUMPDIR/*.sql | mysql db_name   # create tables in databas\ne\nshell> mysqlimport db_name DUMPDIR/*.txt   # load data into tables\n\n   Do not forget to copy the mysql database because that is where the\n   grant tables are stored. You might have to run commands as the\n   MySQL root user on the new machine until you have the mysql\n   database in place.\n\n   After you import the mysql database on the new machine, execute\n   mysqladmin flush-privileges so that the server reloads the grant\n   table information.\n\n2.12. Environment Variables\n\n   This section lists all the environment variables that are used\n   directly or indirectly by MySQL. Most of these can also be found\n   in other places in this manual.\n\n   Note that any options on the command line take precedence over\n   values specified in option files and environment variables, and\n   values in option files take precedence over values in environment\n   variables.\n\n   In many cases, it is preferable to use an option file instead of\n   environment variables to modify the behavior of MySQL. See Section\n   4.2.3.3, \"Using Option Files.\"\n   Variable Description\n   CXX The name of your C++ compiler (for running CMake).\n   CC The name of your C compiler (for running CMake).\n   CFLAGS Flags for your C compiler (for running CMake).\n   CXXFLAGS Flags for your C++ compiler (for running CMake).\n   DBI_USER The default user name for Perl DBI.\n   DBI_TRACE Trace options for Perl DBI.\n   HOME The default path for the mysql history file is\n   $HOME/.mysql_history.\n   LD_RUN_PATH Used to specify the location of libmysqlclient.so.\n   LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN Enable mysql_clear_password\n   authentication plugin; see Section 6.3.6.3, \"The Cleartext\n   Client-Side Authentication Plugin.\"\n   MYSQL_DEBUG Debug trace options when debugging.\n   MYSQL_GROUP_SUFFIX Option group suffix value (like specifying\n   --defaults-group-suffix).\n   MYSQL_HISTFILE The path to the mysql history file. If this\n   variable is set, its value overrides the default for\n   $HOME/.mysql_history.\n   MYSQL_HISTIGNORE Patterns specifying statements not to log to\n   $HOME/.mysql_history.\n   MYSQL_HOME The path to the directory in which the server-specific\n   my.cnf file resides.\n   MYSQL_HOST The default host name used by the mysql command-line\n   client.\n   MYSQL_PS1 The command prompt to use in the mysql command-line\n   client.\n   MYSQL_PWD The default password when connecting to mysqld. Note\n   that using this is insecure. See Section 6.1.2.1, \"End-User\n   Guidelines for Password Security.\"\n   MYSQL_TCP_PORT The default TCP/IP port number.\n   MYSQL_TEST_LOGIN_FILE The name of the .mylogin.cnf login file.\n   MYSQL_UNIX_PORT The default Unix socket file name; used for\n   connections to localhost.\n   PATH Used by the shell to find MySQL programs.\n   TMPDIR The directory where temporary files are created.\n   TZ This should be set to your local time zone. See Section\n   C.5.4.6, \"Time Zone Problems.\"\n   UMASK The user-file creation mode when creating files. See note\n   following table.\n   UMASK_DIR The user-directory creation mode when creating\n   directories. See note following table.\n   USER The default user name on Windows when connecting to mysqld.\n\n   For information about the mysql history file, see Section 4.5.1.3,\n   \"mysql History File.\"\n\n   MYSQL_TEST_LOGIN_FILE is the path name of the login file (the file\n   created by mysql_config_editor). If not set, the default value is\n   %APPDATA%\\MySQL\\.mylogin.cnf directory on Windows and\n   $HOME/.mylogin.cnf on non-Windows systems. See Section 4.6.6,\n   \"mysql_config_editor --- MySQL Configuration Utility.\"\n\n   The UMASK and UMASK_DIR variables, despite their names, are used\n   as modes, not masks:\n\n     * If UMASK is set, mysqld uses ($UMASK | 0600) as the mode for\n       file creation, so that newly created files have a mode in the\n       range from 0600 to 0666 (all values octal).\n\n     * If UMASK_DIR is set, mysqld uses ($UMASK_DIR | 0700) as the\n       base mode for directory creation, which then is AND-ed with\n       ~(~$UMASK & 0666), so that newly created directories have a\n       mode in the range from 0700 to 0777 (all values octal). The\n       AND operation may remove read and write permissions from the\n       directory mode, but not execute permissions.\n\n   MySQL assumes that the value for UMASK or UMASK_DIR is in octal if\n   it starts with a zero.\n\n2.13. Perl Installation Notes\n\n   The Perl DBI module provides a generic interface for database\n   access. You can write a DBI script that works with many different\n   database engines without change. To use DBI, you must install the\n   DBI module, as well as a DataBase Driver (DBD) module for each\n   type of database server you want to access. For MySQL, this driver\n   is the DBD::mysql module.\n\n   Perl, and the DBD::MySQL module for DBI must be installed if you\n   want to run the MySQL benchmark scripts; see Section 8.12.2, \"The\n   MySQL Benchmark Suite.\"\n   Note\n\n   Perl support is not included with MySQL distributions. You can\n   obtain the necessary modules from http://search.cpan.org for Unix,\n   or by using the ActiveState ppm program on Windows. The following\n   sections describe how to do this.\n\n   The DBI/DBD interface requires Perl 5.6.0, and 5.6.1 or later is\n   preferred. DBI does not work if you have an older version of Perl.\n   You should use DBD::mysql 4.009 or higher. Although earlier\n   versions are available, they do not support the full functionality\n   of MySQL 5.6.\n\n2.13.1. Installing Perl on Unix\n\n   MySQL Perl support requires that you have installed MySQL client\n   programming support (libraries and header files). Most\n   installation methods install the necessary files. If you install\n   MySQL from RPM files on Linux, be sure to install the developer\n   RPM as well. The client programs are in the client RPM, but client\n   programming support is in the developer RPM.\n\n   The files you need for Perl support can be obtained from the CPAN\n   (Comprehensive Perl Archive Network) at http://search.cpan.org.\n\n   The easiest way to install Perl modules on Unix is to use the CPAN\n   module. For example:\nshell> perl -MCPAN -e shell\ncpan> install DBI\ncpan> install DBD::mysql\n\n   The DBD::mysql installation runs a number of tests. These tests\n   attempt to connect to the local MySQL server using the default\n   user name and password. (The default user name is your login name\n   on Unix, and ODBC on Windows. The default password is \"no\n   password.\") If you cannot connect to the server with those values\n   (for example, if your account has a password), the tests fail. You\n   can use force install DBD::mysql to ignore the failed tests.\n\n   DBI requires the Data::Dumper module. It may be installed; if not,\n   you should install it before installing DBI.\n\n   It is also possible to download the module distributions in the\n   form of compressed tar archives and build the modules manually.\n   For example, to unpack and build a DBI distribution, use a\n   procedure such as this:\n\n    1. Unpack the distribution into the current directory:\nshell> gunzip < DBI-VERSION.tar.gz | tar xvf -\n       This command creates a directory named DBI-VERSION.\n\n    2. Change location into the top-level directory of the unpacked\n       distribution:\nshell> cd DBI-VERSION\n\n    3. Build the distribution and compile everything:\nshell> perl Makefile.PL\nshell> make\nshell> make test\nshell> make install\n\n   The make test command is important because it verifies that the\n   module is working. Note that when you run that command during the\n   DBD::mysql installation to exercise the interface code, the MySQL\n   server must be running or the test fails.\n\n   It is a good idea to rebuild and reinstall the DBD::mysql\n   distribution whenever you install a new release of MySQL. This\n   ensures that the latest versions of the MySQL client libraries are\n   installed correctly.\n\n   If you do not have access rights to install Perl modules in the\n   system directory or if you want to install local Perl modules, the\n   following reference may be useful:\n   http://servers.digitaldaze.com/extensions/perl/modules.html#module\n   s\n\n   Look under the heading \"Installing New Modules that Require\n   Locally Installed Modules.\"\n\n2.13.2. Installing ActiveState Perl on Windows\n\n   On Windows, you should do the following to install the MySQL DBD\n   module with ActiveState Perl:\n\n    1. Get ActiveState Perl from\n       http://www.activestate.com/Products/ActivePerl/ and install\n       it.\n\n    2. Open a console window.\n\n    3. If necessary, set the HTTP_proxy variable. For example, you\n       might try a setting like this:\nC:\\> set HTTP_proxy=my.proxy.com:3128\n\n    4. Start the PPM program:\nC:\\> C:\\perl\\bin\\ppm.pl\n\n    5. If you have not previously done so, install DBI:\nppm> install DBI\n\n    6. If this succeeds, run the following command:\nppm> install DBD-mysql\n\n   This procedure should work with ActiveState Perl 5.6 or newer.\n\n   If you cannot get the procedure to work, you should install the\n   ODBC driver instead and connect to the MySQL server through ODBC:\nuse DBI;\n$dbh= DBI->connect(\"DBI:ODBC:$dsn\",$user,$password) ||\n  die \"Got error $DBI::errstr when connecting to $dsn\\n\";\n\n2.13.3. Problems Using the Perl DBI/DBD Interface\n\n   If Perl reports that it cannot find the ../mysql/mysql.so module,\n   the problem is probably that Perl cannot locate the\n   libmysqlclient.so shared library. You should be able to fix this\n   problem by one of the following methods:\n\n     * Copy libmysqlclient.so to the directory where your other\n       shared libraries are located (probably /usr/lib or /lib).\n\n     * Modify the -L options used to compile DBD::mysql to reflect\n       the actual location of libmysqlclient.so.\n\n     * On Linux, you can add the path name of the directory where\n       libmysqlclient.so is located to the /etc/ld.so.conf file.\n\n     * Add the path name of the directory where libmysqlclient.so is\n       located to the LD_RUN_PATH environment variable. Some systems\n       use LD_LIBRARY_PATH instead.\n\n   Note that you may also need to modify the -L options if there are\n   other libraries that the linker fails to find. For example, if the\n   linker cannot find libc because it is in /lib and the link command\n   specifies -L/usr/lib, change the -L option to -L/lib or add -L/lib\n   to the existing link command.\n\n   If you get the following errors from DBD::mysql, you are probably\n   using gcc (or using an old binary compiled with gcc):\n/usr/bin/perl: can't resolve symbol '__moddi3'\n/usr/bin/perl: can't resolve symbol '__divdi3'\n\n   Add -L/usr/lib/gcc-lib/... -lgcc to the link command when the\n   mysql.so library gets built (check the output from make for\n   mysql.so when you compile the Perl client). The -L option should\n   specify the path name of the directory where libgcc.a is located\n   on your system.\n\n   Another cause of this problem may be that Perl and MySQL are not\n   both compiled with gcc. In this case, you can solve the mismatch\n   by compiling both with gcc.\n\n   You may see the following error from DBD::mysql when you run the\n   tests:\nt/00base............install_driver(mysql) failed:\nCan't load '../blib/arch/auto/DBD/mysql/mysql.so' for module DBD::mys\nql:\n../blib/arch/auto/DBD/mysql/mysql.so: undefined symbol:\nuncompress at /usr/lib/perl5/5.00503/i586-linux/DynaLoader.pm line 16\n9.\n\n   This means that you need to include the -lz compression library on\n   the link line. That can be done by changing the following line in\n   the file lib/DBD/mysql/Install.pm:\n$sysliblist .= \" -lm\";\n\n   Change that line to:\n$sysliblist .= \" -lm -lz\";\n\n   After this, you must run make realclean and then proceed with the\n   installation from the beginning.\n\n   Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights\n   reserved. Legal Notices\n"
        },
        {
          "name": "INSTALL-WIN-SOURCE",
          "type": "blob",
          "size": 0.3154296875,
          "content": "\nYou can find information about how to install from a Windows source\ndistributions at\n\n  http://dev.mysql.com/doc/refman/5.5/en/source-installation.html\n\nThe MySQL Reference Manual is also available in various formats on\nhttp://dev.mysql.com/doc; if you're interested in the DocBook XML\nsources go to http://svn.mysql.com.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.3427734375,
          "content": "# 关于Inception\r\n\r\nMySQL语句的审核，在业界都已经基本被认同了，实际上也是对MySQL语句写法的统一化，标准化，而之前的人工审核，针对标准这个问题其实是很吃力的，标准越多，DBA越累，开发也越累。\r\n那么在这个都追求自动化运维的时代，审核也必须要跟上步伐，因此Inception诞生了。而Inception可以做的工作远不止是一个自动化审核工具，同时还具备执行，生成对影响数据的回滚语句（类似闪回的功能），这样一条龙服务的工具，将会给DBA的工作带来翻天覆地的变化，DBA从此就从繁重的审核、登上去执行，出错了很难回滚（如果提前没有备份的话）的被动局面解放了出来，突然发现，做DBA原来可以这么轻松，工作可以不饱和了，那就有更多的自由时间学习、进一步向自动化运维平台的实现等更智能化的方向去发展，是具有里程碑意义的。\r\n\r\n## 声明\r\n\r\nInception是一个开源系统，每个人或者每个公司都可以自由使用，由于MySQL代码的复杂性，在审核过程中不可能入戏太深，主要是将最重要的审核完成即可，面对很多复杂的子查询、表达式等是不容易检查到的，所以有些就直接忽略了，那么大家在使用过程中，有任何疑问或者发现任何BUG，都直接提出来，我们大家一起将Inception维护得更好。\r\n\r\n平时工作压力比较大，这个工具首先是为了解决问题的，可能还会存在一些没有测试过的代码，有些地方可能也是值得推敲的，还有待优化，本人会不遗余力的维护好，不断的改进，争取成为一个功能更加完善，使用更加友好的系统，同时正在酝酿一些新的更高大上的功能，敬请期待。\r\n\r\n## 新版本新增功能\r\nInception Gate：用来实时异构地从MySQL从步到其它数据库，可以解决从OP到TP的数据传输问题，可以自动保证数据准确性，完整性，支持数据源的高可用性，支持自动切换的功能。  \r\nInception Gate文档路径：document/docs/inception_gate_dba.md, document/docs/inception_gate_rd.md，分别是DBA侧的手册和开发者侧的手册。  \r\nInception审核：完全替换了几年前的开源版本，修复了一些执行过程中的Bug，提升了稳定性以及执行效率。\r\n\r\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0859375,
          "content": "MYSQL_VERSION_MAJOR=5\nMYSQL_VERSION_MINOR=6\nMYSQL_VERSION_PATCH=10\nMYSQL_VERSION_EXTRA=\n"
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd-line-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.h.cmake",
          "type": "blob",
          "size": 19.1201171875,
          "content": "/* Copyright (c) 2009, 2011, 2012 Oracle and/or its affiliates. All rights reserved.\n \n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; version 2 of the License.\n \n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n \n You should have received a copy of the GNU General Public License\n along with this program; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA */\n\n#ifndef MY_CONFIG_H\n#define MY_CONFIG_H\n#cmakedefine DOT_FRM_VERSION @DOT_FRM_VERSION@\n/* Headers we may want to use. */\n#cmakedefine STDC_HEADERS 1\n#cmakedefine _GNU_SOURCE 1\n#cmakedefine HAVE_ALLOCA_H 1\n#cmakedefine HAVE_AIO_H 1\n#cmakedefine HAVE_ARPA_INET_H 1\n#cmakedefine HAVE_ASM_MSR_H 1\n#cmakedefine HAVE_ASM_TERMBITS_H 1\n#cmakedefine HAVE_BSEARCH 1\n#cmakedefine HAVE_CRYPT_H 1\n#cmakedefine HAVE_CURSES_H 1\n#cmakedefine HAVE_CXXABI_H 1\n#cmakedefine HAVE_NCURSES_H 1\n#cmakedefine HAVE_NDIR_H 1\n#cmakedefine HAVE_DIRENT_H 1\n#cmakedefine HAVE_DLFCN_H 1\n#cmakedefine HAVE_EXECINFO_H 1\n#cmakedefine HAVE_FCNTL_H 1\n#cmakedefine HAVE_FENV_H 1\n#cmakedefine HAVE_FLOAT_H 1\n#cmakedefine HAVE_FLOATINGPOINT_H 1\n#cmakedefine HAVE_FNMATCH_H 1\n#cmakedefine HAVE_FPU_CONTROL_H 1\n#cmakedefine HAVE_GRP_H 1\n#cmakedefine HAVE_IA64INTRIN_H 1\n#cmakedefine HAVE_IEEEFP_H 1\n#cmakedefine HAVE_INTTYPES_H 1\n#cmakedefine HAVE_LIMITS_H 1\n#cmakedefine HAVE_LOCALE_H 1\n#cmakedefine HAVE_MALLOC_H 1\n#cmakedefine HAVE_MEMORY_H 1\n#cmakedefine HAVE_NETINET_IN_H 1\n#cmakedefine HAVE_PATHS_H 1\n#cmakedefine HAVE_POLL_H 1\n#cmakedefine HAVE_PORT_H 1\n#cmakedefine HAVE_PWD_H 1\n#cmakedefine HAVE_SCHED_H 1\n#cmakedefine HAVE_SELECT_H 1\n#cmakedefine HAVE_SOLARIS_LARGE_PAGES 1\n#cmakedefine HAVE_STDDEF_H 1\n#cmakedefine HAVE_STDLIB_H 1\n#cmakedefine HAVE_STDARG_H 1\n#cmakedefine HAVE_STRINGS_H 1\n#cmakedefine HAVE_STRING_H 1\n#cmakedefine HAVE_STDINT_H 1\n#cmakedefine HAVE_SEMAPHORE_H 1\n#cmakedefine HAVE_SYNCH_H 1\n#cmakedefine HAVE_SYSENT_H 1\n#cmakedefine HAVE_SYS_DIR_H 1\n#cmakedefine HAVE_SYS_CDEFS_H 1\n#cmakedefine HAVE_SYS_FILE_H 1\n#cmakedefine HAVE_SYS_FPU_H 1\n#cmakedefine HAVE_SYS_IOCTL_H 1\n#cmakedefine HAVE_SYS_IPC_H 1\n#cmakedefine HAVE_SYS_MALLOC_H 1\n#cmakedefine HAVE_SYS_MMAN_H 1\n#cmakedefine HAVE_SYS_NDIR_H 1\n#cmakedefine HAVE_SYS_PTE_H 1\n#cmakedefine HAVE_SYS_PTEM_H 1\n#cmakedefine HAVE_SYS_PRCTL_H 1\n#cmakedefine HAVE_SYS_RESOURCE_H 1\n#cmakedefine HAVE_SYS_SELECT_H 1\n#cmakedefine HAVE_SYS_SHM_H 1\n#cmakedefine HAVE_SYS_SOCKET_H 1\n#cmakedefine HAVE_SYS_STAT_H 1\n#cmakedefine HAVE_SYS_STREAM_H 1\n#cmakedefine HAVE_SYS_TERMCAP_H 1\n#cmakedefine HAVE_SYS_TIMEB_H 1\n#cmakedefine HAVE_SYS_TIMES_H 1\n#cmakedefine HAVE_SYS_TIME_H 1\n#cmakedefine HAVE_SYS_TYPES_H 1\n#cmakedefine HAVE_SYS_UN_H 1\n#cmakedefine HAVE_SYS_VADVISE_H 1\n#cmakedefine HAVE_TERM_H 1\n#cmakedefine HAVE_TERMBITS_H 1\n#cmakedefine HAVE_TERMIOS_H 1\n#cmakedefine HAVE_TERMIO_H 1\n#cmakedefine HAVE_TERMCAP_H 1\n#cmakedefine HAVE_TIME_H 1\n#cmakedefine HAVE_UNISTD_H 1\n#cmakedefine HAVE_UTIME_H 1\n#cmakedefine HAVE_VARARGS_H 1\n#cmakedefine HAVE_VIS_H 1\n#cmakedefine HAVE_SYS_UTIME_H 1\n#cmakedefine HAVE_SYS_WAIT_H 1\n#cmakedefine HAVE_SYS_PARAM_H 1\n\n/* Libraries */\n#cmakedefine HAVE_LIBPTHREAD 1\n#cmakedefine HAVE_LIBM 1\n#cmakedefine HAVE_LIBDL 1\n#cmakedefine HAVE_LIBRT 1\n#cmakedefine HAVE_LIBSOCKET 1\n#cmakedefine HAVE_LIBNSL 1\n#cmakedefine HAVE_LIBCRYPT 1\n#cmakedefine HAVE_LIBMTMALLOC 1\n#cmakedefine HAVE_LIBWRAP 1\n#cmakedefine HAVE_LIBRESOLV 1\n/* Does \"struct timespec\" have a \"sec\" and \"nsec\" field? */\n#cmakedefine HAVE_TIMESPEC_TS_SEC 1\n\n/* Readline */\n#cmakedefine HAVE_HIST_ENTRY 1\n#cmakedefine USE_LIBEDIT_INTERFACE 1\n#cmakedefine USE_NEW_READLINE_INTERFACE 1\n\n#cmakedefine FIONREAD_IN_SYS_IOCTL 1\n#cmakedefine GWINSZ_IN_SYS_IOCTL 1\n#cmakedefine TIOCSTAT_IN_SYS_IOCTL 1\n#cmakedefine FIONREAD_IN_SYS_FILIO 1\n\n/* Functions we may want to use. */\n#cmakedefine HAVE_ALIGNED_MALLOC 1\n#cmakedefine HAVE_ALIGNED_FREE 1\n#cmakedefine HAVE_AIOWAIT 1\n#cmakedefine HAVE_ALARM 1\n#cmakedefine HAVE_ALLOCA 1\n#cmakedefine HAVE_BMOVE 1\n#cmakedefine HAVE_INDEX 1\n#cmakedefine HAVE_CHOWN 1\n#cmakedefine HAVE_CLOCK_GETTIME 1\n#cmakedefine HAVE_CRYPT 1\n#cmakedefine HAVE_CUSERID 1\n#cmakedefine HAVE_DIRECTIO 1\n#cmakedefine HAVE_DLERROR 1\n#cmakedefine HAVE_DLOPEN 1\n#cmakedefine HAVE_DOPRNT 1\n#cmakedefine HAVE_FCHMOD 1\n#cmakedefine HAVE_FCNTL 1\n#cmakedefine HAVE_FCONVERT 1\n#cmakedefine HAVE_FDATASYNC 1\n#cmakedefine HAVE_FESETROUND 1\n#cmakedefine HAVE_FINITE 1\n#cmakedefine HAVE_FP_EXCEPT 1\n#cmakedefine HAVE_FPSETMASK 1\n#cmakedefine HAVE_FSEEKO 1\n#cmakedefine HAVE_FSYNC 1\n#cmakedefine HAVE_FTIME 1\n#cmakedefine HAVE_GETADDRINFO 1\n#cmakedefine HAVE_GETCWD 1\n#cmakedefine HAVE_GETHOSTBYADDR_R 1\n#cmakedefine HAVE_GETHRTIME 1\n#cmakedefine HAVE_GETLINE 1\n#cmakedefine HAVE_GETNAMEINFO 1\n#cmakedefine HAVE_GETPAGESIZE 1\n#cmakedefine HAVE_GETPASS 1\n#cmakedefine HAVE_GETPASSPHRASE 1\n#cmakedefine HAVE_GETPWNAM 1\n#cmakedefine HAVE_GETPWUID 1\n#cmakedefine HAVE_GETRLIMIT 1\n#cmakedefine HAVE_GETRUSAGE 1\n#cmakedefine HAVE_GETTIMEOFDAY 1\n#cmakedefine HAVE_GETWD 1\n#cmakedefine HAVE_GMTIME_R 1\n#cmakedefine gmtime_r @gmtime_r@\n#cmakedefine HAVE_INITGROUPS 1\n#cmakedefine HAVE_ISSETUGID 1\n#cmakedefine HAVE_GETUID 1\n#cmakedefine HAVE_GETEUID 1\n#cmakedefine HAVE_GETGID 1\n#cmakedefine HAVE_GETEGID 1\n#cmakedefine HAVE_ISNAN 1\n#cmakedefine HAVE_ISINF 1\n#cmakedefine HAVE_LARGE_PAGE_OPTION 1\n#cmakedefine HAVE_LDIV 1\n#cmakedefine HAVE_LRAND48 1\n#cmakedefine HAVE_LOCALTIME_R 1\n#cmakedefine HAVE_LOG2 1\n#cmakedefine HAVE_LONGJMP 1\n#cmakedefine HAVE_LSTAT 1\n#cmakedefine HAVE_MEMALIGN 1\n/* #cmakedefine HAVE_MLOCK 1 see Bug#54662 */\n#cmakedefine HAVE_NPTL 1\n#cmakedefine HAVE_NL_LANGINFO 1\n#cmakedefine HAVE_MADVISE 1\n#cmakedefine HAVE_DECL_MADVISE 1\n#cmakedefine HAVE_DECL_TGOTO 1\n#cmakedefine HAVE_DECL_MHA_MAPSIZE_VA\n#cmakedefine HAVE_MALLINFO 1\n#cmakedefine HAVE_MEMCPY 1\n#cmakedefine HAVE_MEMMOVE 1\n#cmakedefine HAVE_MKSTEMP 1\n#cmakedefine HAVE_MLOCKALL 1\n#cmakedefine HAVE_MMAP 1\n#cmakedefine HAVE_MMAP64 1\n#cmakedefine HAVE_PERROR 1\n#cmakedefine HAVE_POLL 1\n#cmakedefine HAVE_PORT_CREATE 1\n#cmakedefine HAVE_POSIX_FALLOCATE 1\n#cmakedefine HAVE_POSIX_MEMALIGN 1\n#cmakedefine HAVE_PREAD 1\n#cmakedefine HAVE_PAUSE_INSTRUCTION 1\n#cmakedefine HAVE_FAKE_PAUSE_INSTRUCTION 1\n#cmakedefine HAVE_RDTSCLL 1\n#cmakedefine HAVE_READ_REAL_TIME 1\n#cmakedefine HAVE_PTHREAD_ATTR_CREATE 1\n#cmakedefine HAVE_PTHREAD_ATTR_GETSTACKSIZE 1\n#cmakedefine HAVE_PTHREAD_ATTR_SETPRIO 1\n#cmakedefine HAVE_PTHREAD_ATTR_SETSCHEDPARAM 1\n#cmakedefine HAVE_PTHREAD_ATTR_SETSCOPE 1\n#cmakedefine HAVE_PTHREAD_ATTR_SETSTACKSIZE 1\n#cmakedefine HAVE_PTHREAD_CONDATTR_CREATE 1\n#cmakedefine HAVE_PTHREAD_CONDATTR_SETCLOCK 1\n#cmakedefine HAVE_PTHREAD_KEY_DELETE 1\n#cmakedefine HAVE_PTHREAD_KEY_DELETE 1\n#cmakedefine HAVE_PTHREAD_KILL 1\n#cmakedefine HAVE_PTHREAD_RWLOCK_RDLOCK 1\n#cmakedefine HAVE_PTHREAD_SETPRIO_NP 1\n#cmakedefine HAVE_PTHREAD_SETSCHEDPARAM 1\n#cmakedefine HAVE_PTHREAD_SIGMASK 1\n#cmakedefine HAVE_PTHREAD_THREADMASK 1\n#cmakedefine HAVE_PTHREAD_YIELD_NP 1\n#cmakedefine HAVE_PTHREAD_YIELD_ZERO_ARG 1\n#cmakedefine PTHREAD_ONCE_INITIALIZER @PTHREAD_ONCE_INITIALIZER@\n#cmakedefine HAVE_PUTENV 1\n#cmakedefine HAVE_RE_COMP 1\n#cmakedefine HAVE_REGCOMP 1\n#cmakedefine HAVE_READDIR_R 1\n#cmakedefine HAVE_READLINK 1\n#cmakedefine HAVE_REALPATH 1\n#cmakedefine HAVE_RENAME 1\n#cmakedefine HAVE_RINT 1\n#cmakedefine HAVE_RWLOCK_INIT 1\n#cmakedefine HAVE_SCHED_YIELD 1\n#cmakedefine HAVE_SELECT 1\n#cmakedefine HAVE_SETFD 1\n#cmakedefine HAVE_SETENV 1\n#cmakedefine HAVE_SETLOCALE 1\n#cmakedefine HAVE_SIGADDSET 1\n#cmakedefine HAVE_SIGEMPTYSET 1\n#cmakedefine HAVE_SIGHOLD 1\n#cmakedefine HAVE_SIGSET 1\n#cmakedefine HAVE_SIGSET_T 1\n#cmakedefine HAVE_SIGACTION 1\n#cmakedefine HAVE_SIGTHREADMASK 1\n#cmakedefine HAVE_SIGWAIT 1\n#cmakedefine HAVE_SLEEP 1\n#cmakedefine HAVE_SNPRINTF 1\n#cmakedefine HAVE_STPCPY 1\n#cmakedefine HAVE_STRERROR 1\n#cmakedefine HAVE_STRCOLL 1\n#cmakedefine HAVE_STRSIGNAL 1\n#cmakedefine HAVE_STRLCPY 1\n#cmakedefine HAVE_STRLCAT 1\n#cmakedefine HAVE_FGETLN 1\n#cmakedefine HAVE_STRNLEN 1\n#cmakedefine HAVE_STRPBRK 1\n#cmakedefine HAVE_STRSEP 1\n#cmakedefine HAVE_STRSTR 1\n#cmakedefine HAVE_STRTOK_R 1\n#cmakedefine HAVE_STRTOL 1\n#cmakedefine HAVE_STRTOLL 1\n#cmakedefine HAVE_STRTOUL 1\n#cmakedefine HAVE_STRTOULL 1\n#cmakedefine HAVE_SHMAT 1\n#cmakedefine HAVE_SHMCTL 1\n#cmakedefine HAVE_SHMDT 1\n#cmakedefine HAVE_SHMGET 1\n#cmakedefine HAVE_TELL 1\n#cmakedefine HAVE_TEMPNAM 1\n#cmakedefine HAVE_THR_SETCONCURRENCY 1\n#cmakedefine HAVE_THR_YIELD 1\n#cmakedefine HAVE_TIME 1\n#cmakedefine HAVE_TIMES 1\n#cmakedefine HAVE_VALLOC 1\n#define HAVE_VIO_READ_BUFF 1\n#cmakedefine HAVE_VASPRINTF 1\n#cmakedefine HAVE_VPRINTF 1\n#cmakedefine HAVE_VSNPRINTF 1\n#cmakedefine HAVE_FTRUNCATE 1\n#cmakedefine HAVE_TZNAME 1\n#cmakedefine HAVE_AIO_READ 1\n/* Symbols we may use */\n/* used by stacktrace functions */\n#cmakedefine HAVE_BSS_START 1\n#cmakedefine HAVE_BACKTRACE 1\n#cmakedefine HAVE_BACKTRACE_SYMBOLS 1\n#cmakedefine HAVE_BACKTRACE_SYMBOLS_FD 1\n#cmakedefine HAVE_PRINTSTACK 1\n#cmakedefine HAVE_STRUCT_SOCKADDR_IN6 1\n#cmakedefine HAVE_STRUCT_IN6_ADDR 1\n#cmakedefine HAVE_NETINET_IN6_H 1\n#cmakedefine HAVE_IPV6 1\n#cmakedefine ss_family @ss_family@\n#cmakedefine HAVE_SOCKADDR_IN_SIN_LEN 1\n#cmakedefine HAVE_SOCKADDR_IN6_SIN6_LEN 1\n#cmakedefine HAVE_TIMESPEC_TS_SEC 1\n#cmakedefine STRUCT_DIRENT_HAS_D_INO 1\n#cmakedefine STRUCT_DIRENT_HAS_D_NAMLEN 1\n#cmakedefine SPRINTF_RETURNS_INT 1\n\n#cmakedefine DNS_USE_CPU_CLOCK_FOR_ID 1\n#cmakedefine HAVE_EPOLL 1\n#cmakedefine HAVE_EPOLL_CTL 1\n/* #cmakedefine HAVE_EVENT_PORTS 1 */\n#cmakedefine HAVE_INET_NTOP 1\n#cmakedefine HAVE_KQUEUE 1\n#cmakedefine HAVE_WORKING_KQUEUE 1\n#cmakedefine HAVE_SIGNAL 1\n#cmakedefine HAVE_TIMERADD 1\n#cmakedefine HAVE_TIMERCLEAR 1\n#cmakedefine HAVE_TIMERCMP 1\n#cmakedefine HAVE_TIMERISSET 1\n\n#cmakedefine HAVE_DEVPOLL 1\n#cmakedefine HAVE_SIGNAL_H 1\n#cmakedefine HAVE_SYS_DEVPOLL_H 1\n#cmakedefine HAVE_SYS_EPOLL_H 1\n#cmakedefine HAVE_SYS_EVENT_H 1\n#cmakedefine HAVE_SYS_QUEUE_H 1\n#cmakedefine HAVE_TAILQFOREACH 1\n#define USE_MB 1\n#define USE_MB_IDENT 1\n\n#cmakedefine HAVE_VALGRIND\n\n/* Types we may use */\n#ifdef __APPLE__\n  /*\n    Special handling required for OSX to support universal binaries that \n    mix 32 and 64 bit architectures.\n  */\n  #if(__LP64__)\n    #define SIZEOF_LONG 8\n  #else\n    #define SIZEOF_LONG 4\n  #endif\n  #define SIZEOF_VOIDP   SIZEOF_LONG\n  #define SIZEOF_CHARP   SIZEOF_LONG\n  #define SIZEOF_SIZE_T  SIZEOF_LONG\n#else\n/* No indentation, to fetch the lines from verification scripts */\n#cmakedefine SIZEOF_LONG   @SIZEOF_LONG@\n#cmakedefine SIZEOF_VOIDP  @SIZEOF_VOIDP@\n#cmakedefine SIZEOF_CHARP  @SIZEOF_CHARP@\n#cmakedefine SIZEOF_SIZE_T @SIZEOF_CHARP@\n#endif\n\n#cmakedefine SIZEOF_CHAR @SIZEOF_CHAR@\n#define HAVE_CHAR 1\n#define HAVE_LONG 1\n#define HAVE_CHARP 1\n#cmakedefine SIZEOF_SHORT @SIZEOF_SHORT@\n#define HAVE_SHORT 1\n#cmakedefine SIZEOF_INT @SIZEOF_INT@\n#define HAVE_INT 1\n#cmakedefine SIZEOF_LONG_LONG @SIZEOF_LONG_LONG@\n#cmakedefine HAVE_LONG_LONG 1\n#cmakedefine SIZEOF_OFF_T @SIZEOF_OFF_T@\n#cmakedefine HAVE_OFF_T 1\n#cmakedefine SIZEOF_SIGSET_T @SIZEOF_SIGSET_T@\n#cmakedefine HAVE_SIGSET_T 1\n#cmakedefine HAVE_SIZE_T 1\n#cmakedefine SIZEOF_UCHAR @SIZEOF_UCHAR@\n#cmakedefine HAVE_UCHAR 1\n#cmakedefine SIZEOF_UINT @SIZEOF_UINT@\n#cmakedefine HAVE_UINT 1\n#cmakedefine SIZEOF_ULONG @SIZEOF_ULONG@\n#cmakedefine HAVE_ULONG 1\n#cmakedefine SIZEOF_INT8 @SIZEOF_INT8@\n#cmakedefine HAVE_INT8 1\n#cmakedefine SIZEOF_UINT8 @SIZEOF_UINT8@\n#cmakedefine HAVE_UINT8 1\n#cmakedefine SIZEOF_INT16 @SIZEOF_INT16@\n#cmakedefine HAVE_INT16 1\n#cmakedefine SIZEOF_UINT16 @SIZEOF_UINT16@\n#cmakedefine HAVE_UINT16 1\n#cmakedefine SIZEOF_INT32 @SIZEOF_INT32@\n#cmakedefine HAVE_INT32 1\n#cmakedefine SIZEOF_UINT32 @SIZEOF_UINT32@\n#cmakedefine HAVE_UINT32 1\n#cmakedefine SIZEOF_U_INT32_T @SIZEOF_U_INT32_T@\n#cmakedefine HAVE_U_INT32_T 1\n#cmakedefine SIZEOF_INT64 @SIZEOF_INT64@\n#cmakedefine HAVE_INT64 1\n#cmakedefine SIZEOF_UINT64 @SIZEOF_UINT64@\n#cmakedefine HAVE_UINT64 1\n#cmakedefine SIZEOF_BOOL @SIZEOF_BOOL@\n#cmakedefine HAVE_BOOL 1\n\n#cmakedefine SOCKET_SIZE_TYPE @SOCKET_SIZE_TYPE@\n\n#cmakedefine HAVE_MBSTATE_T\n\n#define MAX_INDEXES 64U\n\n#cmakedefine QSORT_TYPE_IS_VOID 1\n#cmakedefine RETQSORTTYPE @RETQSORTTYPE@\n\n#cmakedefine SIGNAL_RETURN_TYPE_IS_VOID 1\n#cmakedefine RETSIGTYPE @RETSIGTYPE@\n#cmakedefine VOID_SIGHANDLER 1\n#define STRUCT_RLIMIT struct rlimit\n\n#ifdef __APPLE__\n  #if __BIG_ENDIAN\n    #define WORDS_BIGENDIAN 1\n  #endif\n#else\n#cmakedefine WORDS_BIGENDIAN 1 \n#endif\n\n/*\n  Define to `__inline__' or `__inline' if that's what the C compiler calls it.\n*/\n#cmakedefine C_HAS_inline 1\n#if !(C_HAS_inline)\n#ifndef __cplusplus\n# define inline @C_INLINE@\n#endif\n#endif\n\n\n#cmakedefine TARGET_OS_LINUX 1\n\n#cmakedefine HAVE_WCTYPE_H 1\n#cmakedefine HAVE_WCHAR_H 1\n#cmakedefine HAVE_LANGINFO_H 1\n#cmakedefine HAVE_MBRLEN\n#cmakedefine HAVE_MBSCMP\n#cmakedefine HAVE_MBSRTOWCS\n#cmakedefine HAVE_WCRTOMB\n#cmakedefine HAVE_MBRTOWC\n#cmakedefine HAVE_WCSCOLL\n#cmakedefine HAVE_WCSDUP\n#cmakedefine HAVE_WCWIDTH\n#cmakedefine HAVE_WCTYPE\n#cmakedefine HAVE_ISWLOWER 1\n#cmakedefine HAVE_ISWUPPER 1\n#cmakedefine HAVE_TOWLOWER 1\n#cmakedefine HAVE_TOWUPPER 1\n#cmakedefine HAVE_ISWCTYPE 1\n#cmakedefine HAVE_WCHAR_T 1\n#cmakedefine HAVE_WCTYPE_T 1\n#cmakedefine HAVE_WINT_T 1\n\n\n#cmakedefine HAVE_STRCASECMP 1\n#cmakedefine HAVE_STRNCASECMP 1\n#cmakedefine HAVE_STRDUP 1\n#cmakedefine HAVE_LANGINFO_CODESET \n#cmakedefine HAVE_TCGETATTR 1\n#cmakedefine HAVE_FLOCKFILE 1\n\n#cmakedefine HAVE_WEAK_SYMBOL 1\n#cmakedefine HAVE_ABI_CXA_DEMANGLE 1\n\n\n#cmakedefine HAVE_POSIX_SIGNALS 1\n#cmakedefine HAVE_BSD_SIGNALS 1\n#cmakedefine HAVE_SVR3_SIGNALS 1\n#cmakedefine HAVE_V7_SIGNALS 1\n\n\n#cmakedefine HAVE_SOLARIS_STYLE_GETHOST 1\n\n#cmakedefine MY_ATOMIC_MODE_DUMMY 1\n#cmakedefine MY_ATOMIC_MODE_RWLOCKS 1\n#cmakedefine HAVE_GCC_ATOMIC_BUILTINS 1\n#cmakedefine HAVE_SOLARIS_ATOMIC 1\n#cmakedefine HAVE_DECL_SHM_HUGETLB 1\n#cmakedefine HAVE_LARGE_PAGES 1\n#cmakedefine HUGETLB_USE_PROC_MEMINFO 1\n#cmakedefine NO_FCNTL_NONBLOCK 1\n#cmakedefine NO_ALARM 1\n\n#cmakedefine _LARGE_FILES 1\n#cmakedefine _LARGEFILE_SOURCE 1\n#cmakedefine _LARGEFILE64_SOURCE 1\n#cmakedefine _FILE_OFFSET_BITS @_FILE_OFFSET_BITS@\n\n#cmakedefine TIME_WITH_SYS_TIME 1\n\n#cmakedefine STACK_DIRECTION @STACK_DIRECTION@\n\n#define SYSTEM_TYPE \"@SYSTEM_TYPE@\"\n#define MACHINE_TYPE \"@MYSQL_MACHINE_TYPE@\"\n#cmakedefine HAVE_DTRACE 1\n\n#cmakedefine SIGNAL_WITH_VIO_CLOSE 1\n\n/* Windows stuff, mostly functions, that have Posix analogs but named differently */\n#cmakedefine S_IROTH @S_IROTH@\n#cmakedefine S_IFIFO @S_IFIFO@\n#cmakedefine IPPROTO_IPV6 @IPPROTO_IPV6@\n#cmakedefine IPV6_V6ONLY @IPV6_V6ONLY@\n#cmakedefine sigset_t @sigset_t@\n#cmakedefine mode_t @mode_t@\n#cmakedefine SIGQUIT @SIGQUIT@\n#cmakedefine SIGPIPE @SIGPIPE@\n#cmakedefine isnan @isnan@\n#cmakedefine finite @finite@\n#cmakedefine popen @popen@\n#cmakedefine pclose @pclose@\n#cmakedefine ssize_t @ssize_t@\n#cmakedefine strcasecmp @strcasecmp@\n#cmakedefine strncasecmp @strncasecmp@\n#cmakedefine snprintf @snprintf@\n#cmakedefine strtok_r @strtok_r@\n#cmakedefine strtoll @strtoll@\n#cmakedefine strtoull @strtoull@\n#cmakedefine vsnprintf @vsnprintf@\n#if (_MSC_VER > 1310)\n# define HAVE_SETENV\n#define setenv(a,b,c) _putenv_s(a,b)\n#endif\n/* We don't want the min/max macros */\n#ifdef __WIN__\n#define NOMINMAX\n#endif\n\n/*\n   Memcached config options\n*/\n#cmakedefine WITH_INNODB_MEMCACHED 1\n#cmakedefine ENABLE_MEMCACHED_SASL 1\n#cmakedefine ENABLE_MEMCACHED_SASL_PWDB 1\n#cmakedefine HAVE_SASL_SASL_H 1\n#cmakedefine HAVE_HTONLL 1\n\n/*\n  MySQL features\n*/\n#cmakedefine ENABLED_LOCAL_INFILE 1\n#cmakedefine ENABLED_PROFILING 1\n#cmakedefine EXTRA_DEBUG 1\n#cmakedefine BACKUP_TEST 1\n#cmakedefine CYBOZU 1\n#cmakedefine OPTIMIZER_TRACE 1\n#cmakedefine USE_SYMDIR 1\n\n/*\n   InnoDB config options\n*/\n#cmakedefine INNODB_COMPILER_HINTS\n\n/* Character sets and collations */\n#cmakedefine MYSQL_DEFAULT_CHARSET_NAME \"@MYSQL_DEFAULT_CHARSET_NAME@\"\n#cmakedefine MYSQL_DEFAULT_COLLATION_NAME \"@MYSQL_DEFAULT_COLLATION_NAME@\"\n\n#cmakedefine USE_MB 1\n#cmakedefine USE_MB_IDENT 1\n#cmakedefine USE_STRCOLL 1\n\n/* This should mean case insensitive file system */\n#cmakedefine FN_NO_CASE_SENSE 1\n\n#cmakedefine HAVE_CHARSET_armscii8 1\n#cmakedefine HAVE_CHARSET_ascii 1\n#cmakedefine HAVE_CHARSET_big5 1\n#cmakedefine HAVE_CHARSET_cp1250 1\n#cmakedefine HAVE_CHARSET_cp1251 1\n#cmakedefine HAVE_CHARSET_cp1256 1\n#cmakedefine HAVE_CHARSET_cp1257 1\n#cmakedefine HAVE_CHARSET_cp850 1\n#cmakedefine HAVE_CHARSET_cp852 1 \n#cmakedefine HAVE_CHARSET_cp866 1\n#cmakedefine HAVE_CHARSET_cp932 1\n#cmakedefine HAVE_CHARSET_dec8 1\n#cmakedefine HAVE_CHARSET_eucjpms 1\n#cmakedefine HAVE_CHARSET_euckr 1\n#cmakedefine HAVE_CHARSET_gb2312 1\n#cmakedefine HAVE_CHARSET_gbk 1\n#cmakedefine HAVE_CHARSET_geostd8 1\n#cmakedefine HAVE_CHARSET_greek 1\n#cmakedefine HAVE_CHARSET_hebrew 1\n#cmakedefine HAVE_CHARSET_hp8 1\n#cmakedefine HAVE_CHARSET_keybcs2 1\n#cmakedefine HAVE_CHARSET_koi8r 1\n#cmakedefine HAVE_CHARSET_koi8u 1\n#cmakedefine HAVE_CHARSET_latin1 1\n#cmakedefine HAVE_CHARSET_latin2 1\n#cmakedefine HAVE_CHARSET_latin5 1\n#cmakedefine HAVE_CHARSET_latin7 1\n#cmakedefine HAVE_CHARSET_macce 1\n#cmakedefine HAVE_CHARSET_macroman 1\n#cmakedefine HAVE_CHARSET_sjis 1\n#cmakedefine HAVE_CHARSET_swe7 1\n#cmakedefine HAVE_CHARSET_tis620 1\n#cmakedefine HAVE_CHARSET_ucs2 1\n#cmakedefine HAVE_CHARSET_ujis 1\n#cmakedefine HAVE_CHARSET_utf8mb4 1\n#cmakedefine HAVE_CHARSET_utf8mb3 1\n#cmakedefine HAVE_CHARSET_utf8 1\n#cmakedefine HAVE_CHARSET_utf16 1\n#cmakedefine HAVE_CHARSET_utf32 1\n#cmakedefine HAVE_UCA_COLLATIONS 1\n#cmakedefine HAVE_COMPRESS 1\n#cmakedefine COMPILE_FLAG_WERROR 1\n\n/*\n  Stuff that always need to be defined (compile breaks without it)\n*/\n#define HAVE_SPATIAL 1\n#define HAVE_RTREE_KEYS 1\n#define HAVE_QUERY_CACHE 1\n#define BIG_TABLES 1\n\n/*\n  Important storage engines (those that really need define \n  WITH_<ENGINE>_STORAGE_ENGINE for the whole server)\n*/\n#cmakedefine WITH_MYISAM_STORAGE_ENGINE 1\n#cmakedefine WITH_MYISAMMRG_STORAGE_ENGINE 1\n#cmakedefine WITH_HEAP_STORAGE_ENGINE 1\n#cmakedefine WITH_CSV_STORAGE_ENGINE 1\n#cmakedefine WITH_PARTITION_STORAGE_ENGINE 1\n#cmakedefine WITH_PERFSCHEMA_STORAGE_ENGINE 1\n#cmakedefine WITH_NDBCLUSTER_STORAGE_ENGINE 1\n#if (WITH_NDBCLUSTER_STORAGE_ENGINE) && !defined(EMBEDDED_LIBRARY)\n# define HAVE_NDB_BINLOG 1\n#endif\n\n#cmakedefine DEFAULT_MYSQL_HOME \"@DEFAULT_MYSQL_HOME@\"\n#cmakedefine SHAREDIR \"@SHAREDIR@\"\n#cmakedefine DEFAULT_BASEDIR \"@DEFAULT_BASEDIR@\"\n#cmakedefine MYSQL_DATADIR \"@MYSQL_DATADIR@\"\n#cmakedefine DEFAULT_CHARSET_HOME \"@DEFAULT_CHARSET_HOME@\"\n#cmakedefine PLUGINDIR \"@PLUGINDIR@\"\n#cmakedefine DEFAULT_SYSCONFDIR \"@DEFAULT_SYSCONFDIR@\"\n\n#cmakedefine SO_EXT \"@CMAKE_SHARED_MODULE_SUFFIX@\"\n\n#define MYSQL_VERSION_MAJOR @MAJOR_VERSION@\n#define MYSQL_VERSION_MINOR @MINOR_VERSION@\n#define MYSQL_VERSION_PATCH @PATCH_VERSION@\n#define MYSQL_VERSION_EXTRA \"@EXTRA_VERSION@\"\n\n#define PACKAGE \"mysql\"\n#define PACKAGE_BUGREPORT \"\"\n#define PACKAGE_NAME \"MySQL Server\"\n#define PACKAGE_STRING \"MySQL Server @VERSION@\"\n#define PACKAGE_TARNAME \"mysql\"\n#define PACKAGE_VERSION \"@VERSION@\"\n#define VERSION \"@VERSION@\"\n#define PROTOCOL_VERSION 10\n\n\n/* time_t related defines */\n\n#cmakedefine SIZEOF_TIME_T @SIZEOF_TIME_T@\n#cmakedefine TIME_T_UNSIGNED @TIME_T_UNSIGNED@\n\n/* CPU information */\n\n#cmakedefine CPU_LEVEL1_DCACHE_LINESIZE @CPU_LEVEL1_DCACHE_LINESIZE@\n\n#endif\n"
        },
        {
          "name": "configure.cmake",
          "type": "blob",
          "size": 34.93359375,
          "content": "# Copyright (c) 2009, 2011, Oracle and/or its affiliates. All rights reserved.\n# \n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n# \n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n#\n\nINCLUDE (CheckCSourceCompiles)\nINCLUDE (CheckCXXSourceCompiles)\nINCLUDE (CheckStructHasMember)\nINCLUDE (CheckLibraryExists)\nINCLUDE (CheckFunctionExists)\nINCLUDE (CheckCCompilerFlag)\nINCLUDE (CheckCSourceRuns)\nINCLUDE (CheckSymbolExists)\n\n\n# WITH_PIC options.Not of much use, PIC is taken care of on platforms\n# where it makes sense anyway.\nIF(UNIX)\n  IF(APPLE)  \n    # OSX  executable are always PIC\n    SET(WITH_PIC ON)\n  ELSE()\n    OPTION(WITH_PIC \"Generate PIC objects\" OFF)\n    IF(WITH_PIC)\n      SET(CMAKE_C_FLAGS \n        \"${CMAKE_C_FLAGS} ${CMAKE_SHARED_LIBRARY_C_FLAGS}\")\n      SET(CMAKE_CXX_FLAGS \n        \"${CMAKE_CXX_FLAGS} ${CMAKE_SHARED_LIBRARY_CXX_FLAGS}\")\n    ENDIF()\n  ENDIF()\nENDIF()\n\n\n\n# System type affects version_compile_os variable \nIF(NOT SYSTEM_TYPE)\n  IF(PLATFORM)\n    SET(SYSTEM_TYPE ${PLATFORM})\n  ELSE()\n    SET(SYSTEM_TYPE ${CMAKE_SYSTEM_NAME})\n  ENDIF()\nENDIF()\n\n# As a consequence of ALARMs no longer being used, thread\n# notification for KILL must close the socket to wake up\n# other threads.\nSET(SIGNAL_WITH_VIO_CLOSE 1)\n\n# Always enable -Wall for gnu C/C++\nIF(CMAKE_COMPILER_IS_GNUCXX)\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wno-unused-parameter\")\nENDIF()\nIF(CMAKE_COMPILER_IS_GNUCC)\n  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall\")\nENDIF()\n\n# The default C++ library for SunPro is really old, and not standards compliant.\n# http://developers.sun.com/solaris/articles/cmp_stlport_libCstd.html\n# Use stlport rather than Rogue Wave.\nIF(CMAKE_SYSTEM_NAME MATCHES \"SunOS\")\n  IF(CMAKE_CXX_COMPILER_ID MATCHES \"SunPro\")\n    SET(CMAKE_CXX_FLAGS\n      \"${CMAKE_CXX_FLAGS} -library=stlport4\")\n  ENDIF()\nENDIF()\n\nMACRO(DIRNAME IN OUT)\n  GET_FILENAME_COMPONENT(${OUT} ${IN} PATH)\nENDMACRO()\n\nIF(CMAKE_SYSTEM_NAME MATCHES \"SunOS\" AND CMAKE_C_COMPILER_ID MATCHES \"SunPro\")\n  DIRNAME(${CMAKE_CXX_COMPILER} CXX_PATH)\n  SET(STLPORT_SUFFIX \"lib/stlport4\")\n  IF(CMAKE_SIZEOF_VOID_P EQUAL 8 AND CMAKE_SYSTEM_PROCESSOR MATCHES \"sparc\")\n    SET(STLPORT_SUFFIX \"lib/stlport4/v9\")\n  ENDIF()\n  IF(CMAKE_SIZEOF_VOID_P EQUAL 8 AND CMAKE_SYSTEM_PROCESSOR MATCHES \"i386\")\n    SET(STLPORT_SUFFIX \"lib/stlport4/amd64\")\n  ENDIF()\n\n  FIND_LIBRARY(STL_LIBRARY_NAME\n    NAMES \"stlport\"\n    PATHS ${CXX_PATH}/../${STLPORT_SUFFIX}\n  )\n  MESSAGE(STATUS \"STL_LIBRARY_NAME ${STL_LIBRARY_NAME}\")\n  IF(STL_LIBRARY_NAME)\n    DIRNAME(${STL_LIBRARY_NAME} STLPORT_PATH)\n    # We re-distribute libstlport.so which is a symlink to libstlport.so.1\n    # There is no 'readlink' on solaris, so we use perl to follow links:\n    SET(PERLSCRIPT\n      \"my $link= $ARGV[0]; use Cwd qw(abs_path); my $file = abs_path($link); print $file;\")\n    EXECUTE_PROCESS(\n      COMMAND perl -e \"${PERLSCRIPT}\" ${STL_LIBRARY_NAME}\n      RESULT_VARIABLE result\n      OUTPUT_VARIABLE real_library\n    )\n    MESSAGE(STATUS \"INSTALL ${STL_LIBRARY_NAME} ${real_library}\")\n    INSTALL(FILES ${STL_LIBRARY_NAME} ${real_library}\n            DESTINATION ${INSTALL_LIBDIR} COMPONENT Development)\n    # Using the $ORIGIN token with the -R option to locate the libraries\n    # on a path relative to the executable:\n    # We need an extra backslash to pass $ORIGIN to the mysql_config script...\n    SET(QUOTED_CMAKE_CXX_LINK_FLAGS\n      \"${CMAKE_CXX_LINK_FLAGS} -R'\\\\$ORIGIN/../lib' -R${STLPORT_PATH}\")\n    SET(CMAKE_CXX_LINK_FLAGS\n      \"${CMAKE_CXX_LINK_FLAGS} -R'\\$ORIGIN/../lib' -R${STLPORT_PATH}\")\n    MESSAGE(STATUS \"CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS}\")\n  ENDIF()\nENDIF()\n\nIF(CMAKE_COMPILER_IS_GNUCXX)\n  IF (CMAKE_EXE_LINKER_FLAGS MATCHES \" -static \" \n     OR CMAKE_EXE_LINKER_FLAGS MATCHES \" -static$\")\n     SET(HAVE_DLOPEN FALSE CACHE \"Disable dlopen due to -static flag\" FORCE)\n     SET(WITHOUT_DYNAMIC_PLUGINS TRUE)\n  ENDIF()\nENDIF()\n\nIF(WITHOUT_DYNAMIC_PLUGINS)\n  MESSAGE(\"Dynamic plugins are disabled.\")\nENDIF(WITHOUT_DYNAMIC_PLUGINS)\n\n# Large files, common flag\nSET(_LARGEFILE_SOURCE  1)\n\n# If finds the size of a type, set SIZEOF_<type> and HAVE_<type>\nFUNCTION(MY_CHECK_TYPE_SIZE type defbase)\n  CHECK_TYPE_SIZE(\"${type}\" SIZEOF_${defbase})\n  IF(SIZEOF_${defbase})\n    SET(HAVE_${defbase} 1 PARENT_SCOPE)\n  ENDIF()\nENDFUNCTION()\n\n# Same for structs, setting HAVE_STRUCT_<name> instead\nFUNCTION(MY_CHECK_STRUCT_SIZE type defbase)\n  CHECK_TYPE_SIZE(\"struct ${type}\" SIZEOF_${defbase})\n  IF(SIZEOF_${defbase})\n    SET(HAVE_STRUCT_${defbase} 1 PARENT_SCOPE)\n  ENDIF()\nENDFUNCTION()\n\n# Searches function in libraries\n# if function is found, sets output parameter result to the name of the library\n# if function is found in libc, result will be empty \nFUNCTION(MY_SEARCH_LIBS func libs result)\n  IF(${${result}})\n    # Library is already found or was predefined\n    RETURN()\n  ENDIF()\n  CHECK_FUNCTION_EXISTS(${func} HAVE_${func}_IN_LIBC)\n  IF(HAVE_${func}_IN_LIBC)\n    SET(${result} \"\" PARENT_SCOPE)\n    RETURN()\n  ENDIF()\n  FOREACH(lib  ${libs})\n    CHECK_LIBRARY_EXISTS(${lib} ${func} \"\" HAVE_${func}_IN_${lib}) \n    IF(HAVE_${func}_IN_${lib})\n      SET(${result} ${lib} PARENT_SCOPE)\n      SET(HAVE_${result} 1 PARENT_SCOPE)\n      RETURN()\n    ENDIF()\n  ENDFOREACH()\nENDFUNCTION()\n\n# Find out which libraries to use.\nIF(UNIX)\n  MY_SEARCH_LIBS(floor m LIBM)\n  IF(NOT LIBM)\n    MY_SEARCH_LIBS(__infinity m LIBM)\n  ENDIF()\n  MY_SEARCH_LIBS(gethostbyname_r  \"nsl_r;nsl\" LIBNSL)\n  MY_SEARCH_LIBS(bind \"bind;socket\" LIBBIND)\n  MY_SEARCH_LIBS(crypt crypt LIBCRYPT)\n  MY_SEARCH_LIBS(setsockopt socket LIBSOCKET)\n  MY_SEARCH_LIBS(dlopen dl LIBDL)\n  MY_SEARCH_LIBS(sched_yield rt LIBRT)\n  IF(NOT LIBRT)\n    MY_SEARCH_LIBS(clock_gettime rt LIBRT)\n  ENDIF()\n  FIND_PACKAGE(Threads)\n\n  SET(CMAKE_REQUIRED_LIBRARIES \n    ${LIBM} ${LIBNSL} ${LIBBIND} ${LIBCRYPT} ${LIBSOCKET} ${LIBDL} ${CMAKE_THREAD_LIBS_INIT} ${LIBRT})\n\n  LIST(LENGTH CMAKE_REQUIRED_LIBRARIES required_libs_length)\n  IF(${required_libs_length} GREATER 0)\n    LIST(REMOVE_DUPLICATES CMAKE_REQUIRED_LIBRARIES)\n  ENDIF()  \n  LINK_LIBRARIES(${CMAKE_THREAD_LIBS_INIT})\n  \n  OPTION(WITH_LIBWRAP \"Compile with tcp wrappers support\" OFF)\n  IF(WITH_LIBWRAP)\n    SET(SAVE_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})\n    SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} wrap)\n    CHECK_C_SOURCE_COMPILES(\n    \"\n    #include <tcpd.h>\n    int allow_severity = 0;\n    int deny_severity  = 0;\n    int main()\n    {\n      hosts_access(0);\n    }\"\n    HAVE_LIBWRAP)\n    SET(CMAKE_REQUIRED_LIBRARIES ${SAVE_CMAKE_REQUIRED_LIBRARIES})\n    IF(HAVE_LIBWRAP)\n      SET(MYSYS_LIBWRAP_SOURCE  ${CMAKE_SOURCE_DIR}/mysys/my_libwrap.c)\n      SET(LIBWRAP \"wrap\")\n    ENDIF()\n  ENDIF()\nENDIF()\n\n#\n# Tests for header files\n#\nINCLUDE (CheckIncludeFiles)\n\nCHECK_INCLUDE_FILES (\"stdlib.h;stdarg.h;string.h;float.h\" STDC_HEADERS)\nCHECK_INCLUDE_FILES (sys/types.h HAVE_SYS_TYPES_H)\nCHECK_INCLUDE_FILES (alloca.h HAVE_ALLOCA_H)\nCHECK_INCLUDE_FILES (aio.h HAVE_AIO_H)\nCHECK_INCLUDE_FILES (arpa/inet.h HAVE_ARPA_INET_H)\nCHECK_INCLUDE_FILES (crypt.h HAVE_CRYPT_H)\nCHECK_INCLUDE_FILES (cxxabi.h HAVE_CXXABI_H)\nCHECK_INCLUDE_FILES (dirent.h HAVE_DIRENT_H)\nCHECK_INCLUDE_FILES (dlfcn.h HAVE_DLFCN_H)\nCHECK_INCLUDE_FILES (execinfo.h HAVE_EXECINFO_H)\nCHECK_INCLUDE_FILES (fcntl.h HAVE_FCNTL_H)\nCHECK_INCLUDE_FILES (fenv.h HAVE_FENV_H)\nCHECK_INCLUDE_FILES (float.h HAVE_FLOAT_H)\nCHECK_INCLUDE_FILES (floatingpoint.h HAVE_FLOATINGPOINT_H)\nCHECK_INCLUDE_FILES (fpu_control.h HAVE_FPU_CONTROL_H)\nCHECK_INCLUDE_FILES (grp.h HAVE_GRP_H)\nCHECK_INCLUDE_FILES (ieeefp.h HAVE_IEEEFP_H)\nCHECK_INCLUDE_FILES (inttypes.h HAVE_INTTYPES_H)\nCHECK_INCLUDE_FILES (langinfo.h HAVE_LANGINFO_H)\nCHECK_INCLUDE_FILES (limits.h HAVE_LIMITS_H)\nCHECK_INCLUDE_FILES (locale.h HAVE_LOCALE_H)\nCHECK_INCLUDE_FILES (malloc.h HAVE_MALLOC_H)\nCHECK_INCLUDE_FILES (memory.h HAVE_MEMORY_H)\nCHECK_INCLUDE_FILES (ndir.h HAVE_NDIR_H)\nCHECK_INCLUDE_FILES (netinet/in.h HAVE_NETINET_IN_H)\nCHECK_INCLUDE_FILES (paths.h HAVE_PATHS_H)\nCHECK_INCLUDE_FILES (port.h HAVE_PORT_H)\nCHECK_INCLUDE_FILES (poll.h HAVE_POLL_H)\nCHECK_INCLUDE_FILES (pwd.h HAVE_PWD_H)\nCHECK_INCLUDE_FILES (sched.h HAVE_SCHED_H)\nCHECK_INCLUDE_FILES (select.h HAVE_SELECT_H)\nCHECK_INCLUDE_FILES (semaphore.h HAVE_SEMAPHORE_H)\nCHECK_INCLUDE_FILES (\"sys/types.h;sys/dir.h\" HAVE_SYS_DIR_H)\nCHECK_INCLUDE_FILES (sys/ndir.h HAVE_SYS_NDIR_H)\nCHECK_INCLUDE_FILES (sys/pte.h HAVE_SYS_PTE_H)\nCHECK_INCLUDE_FILES (stddef.h HAVE_STDDEF_H)\nCHECK_INCLUDE_FILES (stdint.h HAVE_STDINT_H)\nCHECK_INCLUDE_FILES (stdlib.h HAVE_STDLIB_H)\nCHECK_INCLUDE_FILES (strings.h HAVE_STRINGS_H)\nCHECK_INCLUDE_FILES (string.h HAVE_STRING_H)\nCHECK_INCLUDE_FILES (synch.h HAVE_SYNCH_H)\nCHECK_INCLUDE_FILES (sysent.h HAVE_SYSENT_H)\nCHECK_INCLUDE_FILES (sys/cdefs.h HAVE_SYS_CDEFS_H)\nCHECK_INCLUDE_FILES (sys/file.h HAVE_SYS_FILE_H)\nCHECK_INCLUDE_FILES (sys/fpu.h HAVE_SYS_FPU_H)\nCHECK_INCLUDE_FILES (sys/ioctl.h HAVE_SYS_IOCTL_H)\nCHECK_INCLUDE_FILES (sys/ipc.h HAVE_SYS_IPC_H)\nCHECK_INCLUDE_FILES (sys/malloc.h HAVE_SYS_MALLOC_H)\nCHECK_INCLUDE_FILES (sys/mman.h HAVE_SYS_MMAN_H)\nCHECK_INCLUDE_FILES (sys/prctl.h HAVE_SYS_PRCTL_H)\nCHECK_INCLUDE_FILES (sys/resource.h HAVE_SYS_RESOURCE_H)\nCHECK_INCLUDE_FILES (sys/select.h HAVE_SYS_SELECT_H)\nCHECK_INCLUDE_FILES (sys/shm.h HAVE_SYS_SHM_H)\nCHECK_INCLUDE_FILES (sys/socket.h HAVE_SYS_SOCKET_H)\nCHECK_INCLUDE_FILES (sys/stat.h HAVE_SYS_STAT_H)\nCHECK_INCLUDE_FILES (sys/stream.h HAVE_SYS_STREAM_H)\nCHECK_INCLUDE_FILES (sys/termcap.h HAVE_SYS_TERMCAP_H)\nCHECK_INCLUDE_FILES (\"time.h;sys/timeb.h\" HAVE_SYS_TIMEB_H)\nCHECK_INCLUDE_FILES (\"curses.h;term.h\" HAVE_TERM_H)\nCHECK_INCLUDE_FILES (asm/termbits.h HAVE_ASM_TERMBITS_H)\nCHECK_INCLUDE_FILES (termbits.h HAVE_TERMBITS_H)\nCHECK_INCLUDE_FILES (termios.h HAVE_TERMIOS_H)\nCHECK_INCLUDE_FILES (termio.h HAVE_TERMIO_H)\nCHECK_INCLUDE_FILES (termcap.h HAVE_TERMCAP_H)\nCHECK_INCLUDE_FILES (unistd.h HAVE_UNISTD_H)\nCHECK_INCLUDE_FILES (utime.h HAVE_UTIME_H)\nCHECK_INCLUDE_FILES (varargs.h HAVE_VARARGS_H)\nCHECK_INCLUDE_FILES (sys/time.h HAVE_SYS_TIME_H)\nCHECK_INCLUDE_FILES (sys/utime.h HAVE_SYS_UTIME_H)\nCHECK_INCLUDE_FILES (sys/wait.h HAVE_SYS_WAIT_H)\nCHECK_INCLUDE_FILES (sys/param.h HAVE_SYS_PARAM_H)\nCHECK_INCLUDE_FILES (sys/vadvise.h HAVE_SYS_VADVISE_H)\nCHECK_INCLUDE_FILES (fnmatch.h HAVE_FNMATCH_H)\nCHECK_INCLUDE_FILES (stdarg.h  HAVE_STDARG_H)\nCHECK_INCLUDE_FILES (\"stdlib.h;sys/un.h\" HAVE_SYS_UN_H)\nCHECK_INCLUDE_FILES (vis.h HAVE_VIS_H)\nCHECK_INCLUDE_FILES (wchar.h HAVE_WCHAR_H)\nCHECK_INCLUDE_FILES (wctype.h HAVE_WCTYPE_H)\nCHECK_INCLUDE_FILES (sasl/sasl.h HAVE_SASL_SASL_H)\n\n# For libevent\nCHECK_INCLUDE_FILES(sys/devpoll.h HAVE_DEVPOLL)\nCHECK_INCLUDE_FILES(signal.h HAVE_SIGNAL_H)\nCHECK_INCLUDE_FILES(sys/devpoll.h HAVE_SYS_DEVPOLL_H)\nCHECK_INCLUDE_FILES(sys/epoll.h HAVE_SYS_EPOLL_H)\nCHECK_INCLUDE_FILES(sys/event.h HAVE_SYS_EVENT_H)\nCHECK_INCLUDE_FILES(sys/queue.h HAVE_SYS_QUEUE_H)\nCHECK_SYMBOL_EXISTS (TAILQ_FOREACH \"sys/queue.h\" HAVE_TAILQFOREACH)\n\nIF(HAVE_SYS_STREAM_H)\n  # Needs sys/stream.h on Solaris\n  CHECK_INCLUDE_FILES (\"sys/stream.h;sys/ptem.h\" HAVE_SYS_PTEM_H)\nELSE()\n  CHECK_INCLUDE_FILES (sys/ptem.h HAVE_SYS_PTEM_H)\nENDIF()\n\n# Figure out threading library\n# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\nFIND_PACKAGE (Threads)\n\nFUNCTION(MY_CHECK_PTHREAD_ONCE_INIT)\n  CHECK_C_COMPILER_FLAG(\"-Werror\" HAVE_WERROR_FLAG)\n  IF(HAVE_WERROR_FLAG)\n    SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -Werror\")\n  ENDIF()\n  CHECK_C_SOURCE_COMPILES(\"\n    #include <pthread.h>\n    void foo(void) {}\n    int main()\n    {\n      pthread_once_t once_control = PTHREAD_ONCE_INIT;\n      pthread_once(&once_control, foo);\n      return 0;\n    }\"\n    HAVE_PTHREAD_ONCE_INIT\n  )\n  # http://bugs.opensolaris.org/bugdatabase/printableBug.do?bug_id=6611808\n  IF(NOT HAVE_PTHREAD_ONCE_INIT)\n    CHECK_C_SOURCE_COMPILES(\"\n      #include <pthread.h>\n      void foo(void) {}\n      int main()\n      {\n        pthread_once_t once_control = { PTHREAD_ONCE_INIT };\n        pthread_once(&once_control, foo);\n        return 0;\n      }\"\n      HAVE_ARRAY_PTHREAD_ONCE_INIT\n    )\n  ENDIF()\n  IF(HAVE_PTHREAD_ONCE_INIT)\n    SET(PTHREAD_ONCE_INITIALIZER \"PTHREAD_ONCE_INIT\" PARENT_SCOPE)\n  ENDIF()\n  IF(HAVE_ARRAY_PTHREAD_ONCE_INIT)\n    SET(PTHREAD_ONCE_INITIALIZER \"{ PTHREAD_ONCE_INIT }\" PARENT_SCOPE)\n  ENDIF()\nENDFUNCTION()\n\nIF(CMAKE_USE_PTHREADS_INIT)\n  MY_CHECK_PTHREAD_ONCE_INIT()\nENDIF()\n\n#\n# Tests for functions\n#\nCHECK_FUNCTION_EXISTS (_aligned_malloc HAVE_ALIGNED_MALLOC)\nCHECK_FUNCTION_EXISTS (_aligned_free HAVE_ALIGNED_FREE)\n#CHECK_FUNCTION_EXISTS (aiowait HAVE_AIOWAIT)\nCHECK_FUNCTION_EXISTS (aio_read HAVE_AIO_READ)\nCHECK_FUNCTION_EXISTS (alarm HAVE_ALARM)\nSET(HAVE_ALLOCA 1)\nCHECK_FUNCTION_EXISTS (backtrace HAVE_BACKTRACE)\nCHECK_FUNCTION_EXISTS (backtrace_symbols HAVE_BACKTRACE_SYMBOLS)\nCHECK_FUNCTION_EXISTS (backtrace_symbols_fd HAVE_BACKTRACE_SYMBOLS_FD)\nCHECK_FUNCTION_EXISTS (printstack HAVE_PRINTSTACK)\nCHECK_FUNCTION_EXISTS (bmove HAVE_BMOVE)\nCHECK_FUNCTION_EXISTS (bsearch HAVE_BSEARCH)\nCHECK_FUNCTION_EXISTS (index HAVE_INDEX)\nCHECK_FUNCTION_EXISTS (clock_gettime HAVE_CLOCK_GETTIME)\nCHECK_FUNCTION_EXISTS (cuserid HAVE_CUSERID)\nCHECK_FUNCTION_EXISTS (directio HAVE_DIRECTIO)\nCHECK_FUNCTION_EXISTS (_doprnt HAVE_DOPRNT)\nCHECK_FUNCTION_EXISTS (flockfile HAVE_FLOCKFILE)\nCHECK_FUNCTION_EXISTS (ftruncate HAVE_FTRUNCATE)\nCHECK_FUNCTION_EXISTS (getline HAVE_GETLINE)\nCHECK_FUNCTION_EXISTS (compress HAVE_COMPRESS)\nCHECK_FUNCTION_EXISTS (crypt HAVE_CRYPT)\nCHECK_FUNCTION_EXISTS (dlerror HAVE_DLERROR)\nCHECK_FUNCTION_EXISTS (dlopen HAVE_DLOPEN)\nCHECK_FUNCTION_EXISTS (fchmod HAVE_FCHMOD)\nCHECK_FUNCTION_EXISTS (fcntl HAVE_FCNTL)\nCHECK_FUNCTION_EXISTS (fconvert HAVE_FCONVERT)\nCHECK_FUNCTION_EXISTS (fdatasync HAVE_FDATASYNC)\nCHECK_SYMBOL_EXISTS(fdatasync \"unistd.h\" HAVE_DECL_FDATASYNC)\nCHECK_FUNCTION_EXISTS (fedisableexcept HAVE_FEDISABLEEXCEPT)\nCHECK_FUNCTION_EXISTS (fpsetmask HAVE_FPSETMASK)\nCHECK_FUNCTION_EXISTS (fseeko HAVE_FSEEKO)\nCHECK_FUNCTION_EXISTS (fsync HAVE_FSYNC)\nCHECK_FUNCTION_EXISTS (getcwd HAVE_GETCWD)\nCHECK_FUNCTION_EXISTS (gethostbyaddr_r HAVE_GETHOSTBYADDR_R)\nCHECK_FUNCTION_EXISTS (gethrtime HAVE_GETHRTIME)\nCHECK_FUNCTION_EXISTS (getnameinfo HAVE_GETNAMEINFO)\nCHECK_FUNCTION_EXISTS (getpass HAVE_GETPASS)\nCHECK_FUNCTION_EXISTS (getpassphrase HAVE_GETPASSPHRASE)\nCHECK_FUNCTION_EXISTS (getpwnam HAVE_GETPWNAM)\nCHECK_FUNCTION_EXISTS (getpwuid HAVE_GETPWUID)\nCHECK_FUNCTION_EXISTS (getrlimit HAVE_GETRLIMIT)\nCHECK_FUNCTION_EXISTS (getrusage HAVE_GETRUSAGE)\nCHECK_FUNCTION_EXISTS (getwd HAVE_GETWD)\nCHECK_FUNCTION_EXISTS (gmtime_r HAVE_GMTIME_R)\nCHECK_FUNCTION_EXISTS (initgroups HAVE_INITGROUPS)\nCHECK_FUNCTION_EXISTS (issetugid HAVE_ISSETUGID)\nCHECK_FUNCTION_EXISTS (getuid HAVE_GETUID)\nCHECK_FUNCTION_EXISTS (geteuid HAVE_GETEUID)\nCHECK_FUNCTION_EXISTS (getgid HAVE_GETGID)\nCHECK_FUNCTION_EXISTS (getegid HAVE_GETEGID)\nCHECK_FUNCTION_EXISTS (ldiv HAVE_LDIV)\nCHECK_FUNCTION_EXISTS (localtime_r HAVE_LOCALTIME_R)\nCHECK_FUNCTION_EXISTS (longjmp HAVE_LONGJMP)\nCHECK_FUNCTION_EXISTS (lstat HAVE_LSTAT)\nCHECK_FUNCTION_EXISTS (madvise HAVE_MADVISE)\nCHECK_FUNCTION_EXISTS (mallinfo HAVE_MALLINFO)\nCHECK_FUNCTION_EXISTS (memcpy HAVE_MEMCPY)\nCHECK_FUNCTION_EXISTS (memmove HAVE_MEMMOVE)\nCHECK_FUNCTION_EXISTS (mkstemp HAVE_MKSTEMP)\nCHECK_FUNCTION_EXISTS (mlock HAVE_MLOCK)\nCHECK_FUNCTION_EXISTS (mlockall HAVE_MLOCKALL)\nCHECK_FUNCTION_EXISTS (mmap HAVE_MMAP)\nCHECK_FUNCTION_EXISTS (mmap64 HAVE_MMAP64)\nCHECK_FUNCTION_EXISTS (perror HAVE_PERROR)\nCHECK_FUNCTION_EXISTS (poll HAVE_POLL)\nCHECK_FUNCTION_EXISTS (port_create HAVE_PORT_CREATE)\nCHECK_FUNCTION_EXISTS (posix_fallocate HAVE_POSIX_FALLOCATE)\nCHECK_FUNCTION_EXISTS (posix_memalign HAVE_POSIX_MEMALIGN)\nCHECK_FUNCTION_EXISTS (pread HAVE_PREAD)\nCHECK_FUNCTION_EXISTS (pthread_attr_create HAVE_PTHREAD_ATTR_CREATE)\nCHECK_FUNCTION_EXISTS (pthread_attr_getstacksize HAVE_PTHREAD_ATTR_GETSTACKSIZE)\nCHECK_FUNCTION_EXISTS (pthread_attr_setscope HAVE_PTHREAD_ATTR_SETSCOPE)\nCHECK_FUNCTION_EXISTS (pthread_attr_setstacksize HAVE_PTHREAD_ATTR_SETSTACKSIZE)\nCHECK_FUNCTION_EXISTS (pthread_condattr_create HAVE_PTHREAD_CONDATTR_CREATE)\nCHECK_FUNCTION_EXISTS (pthread_condattr_setclock HAVE_PTHREAD_CONDATTR_SETCLOCK)\nCHECK_FUNCTION_EXISTS (pthread_key_delete HAVE_PTHREAD_KEY_DELETE)\nCHECK_FUNCTION_EXISTS (pthread_rwlock_rdlock HAVE_PTHREAD_RWLOCK_RDLOCK)\nCHECK_FUNCTION_EXISTS (pthread_sigmask HAVE_PTHREAD_SIGMASK)\nCHECK_FUNCTION_EXISTS (pthread_threadmask HAVE_PTHREAD_THREADMASK)\nCHECK_FUNCTION_EXISTS (pthread_yield_np HAVE_PTHREAD_YIELD_NP)\nCHECK_FUNCTION_EXISTS (putenv HAVE_PUTENV)\nCHECK_FUNCTION_EXISTS (readdir_r HAVE_READDIR_R)\nCHECK_FUNCTION_EXISTS (readlink HAVE_READLINK)\nCHECK_FUNCTION_EXISTS (re_comp HAVE_RE_COMP)\nCHECK_FUNCTION_EXISTS (regcomp HAVE_REGCOMP)\nCHECK_FUNCTION_EXISTS (realpath HAVE_REALPATH)\nCHECK_FUNCTION_EXISTS (rename HAVE_RENAME)\nCHECK_FUNCTION_EXISTS (rwlock_init HAVE_RWLOCK_INIT)\nCHECK_FUNCTION_EXISTS (sched_yield HAVE_SCHED_YIELD)\nCHECK_FUNCTION_EXISTS (setenv HAVE_SETENV)\nCHECK_FUNCTION_EXISTS (setlocale HAVE_SETLOCALE)\nCHECK_FUNCTION_EXISTS (setfd HAVE_SETFD)\nCHECK_FUNCTION_EXISTS (sigaction HAVE_SIGACTION)\nCHECK_FUNCTION_EXISTS (sigthreadmask HAVE_SIGTHREADMASK)\nCHECK_FUNCTION_EXISTS (sigwait HAVE_SIGWAIT)\nCHECK_FUNCTION_EXISTS (sigaddset HAVE_SIGADDSET)\nCHECK_FUNCTION_EXISTS (sigemptyset HAVE_SIGEMPTYSET)\nCHECK_FUNCTION_EXISTS (sighold HAVE_SIGHOLD) \nCHECK_FUNCTION_EXISTS (sigset HAVE_SIGSET)\nCHECK_FUNCTION_EXISTS (sleep HAVE_SLEEP)\nCHECK_FUNCTION_EXISTS (snprintf HAVE_SNPRINTF)\nCHECK_FUNCTION_EXISTS (stpcpy HAVE_STPCPY)\nCHECK_FUNCTION_EXISTS (strcoll HAVE_STRCOLL)\nCHECK_FUNCTION_EXISTS (strerror HAVE_STRERROR)\nCHECK_FUNCTION_EXISTS (strlcpy HAVE_STRLCPY)\nCHECK_FUNCTION_EXISTS (strnlen HAVE_STRNLEN)\nCHECK_FUNCTION_EXISTS (strlcat HAVE_STRLCAT)\nCHECK_FUNCTION_EXISTS (strsignal HAVE_STRSIGNAL)\nCHECK_FUNCTION_EXISTS (fgetln HAVE_FGETLN)\nCHECK_FUNCTION_EXISTS (strpbrk HAVE_STRPBRK)\nCHECK_FUNCTION_EXISTS (strsep HAVE_STRSEP)\nCHECK_FUNCTION_EXISTS (strstr HAVE_STRSTR)\nCHECK_FUNCTION_EXISTS (strtok_r HAVE_STRTOK_R)\nCHECK_FUNCTION_EXISTS (strtol HAVE_STRTOL)\nCHECK_FUNCTION_EXISTS (strtoll HAVE_STRTOLL)\nCHECK_FUNCTION_EXISTS (strtoul HAVE_STRTOUL)\nCHECK_FUNCTION_EXISTS (strtoull HAVE_STRTOULL)\nCHECK_FUNCTION_EXISTS (strcasecmp HAVE_STRCASECMP)\nCHECK_FUNCTION_EXISTS (strncasecmp HAVE_STRNCASECMP)\nCHECK_FUNCTION_EXISTS (strdup HAVE_STRDUP)\nCHECK_FUNCTION_EXISTS (shmat HAVE_SHMAT) \nCHECK_FUNCTION_EXISTS (shmctl HAVE_SHMCTL)\nCHECK_FUNCTION_EXISTS (shmdt HAVE_SHMDT)\nCHECK_FUNCTION_EXISTS (shmget HAVE_SHMGET)\nCHECK_FUNCTION_EXISTS (tell HAVE_TELL)\nCHECK_FUNCTION_EXISTS (tempnam HAVE_TEMPNAM)\nCHECK_FUNCTION_EXISTS (thr_setconcurrency HAVE_THR_SETCONCURRENCY)\nCHECK_FUNCTION_EXISTS (thr_yield HAVE_THR_YIELD)\nCHECK_FUNCTION_EXISTS (vasprintf HAVE_VASPRINTF)\nCHECK_FUNCTION_EXISTS (vsnprintf HAVE_VSNPRINTF)\nCHECK_FUNCTION_EXISTS (vprintf HAVE_VPRINTF)\nCHECK_FUNCTION_EXISTS (valloc HAVE_VALLOC)\nCHECK_FUNCTION_EXISTS (memalign HAVE_MEMALIGN)\nCHECK_FUNCTION_EXISTS (chown HAVE_CHOWN)\nCHECK_FUNCTION_EXISTS (nl_langinfo HAVE_NL_LANGINFO)\nCHECK_FUNCTION_EXISTS (ntohll HAVE_HTONLL)\n\nCHECK_FUNCTION_EXISTS (clock_gettime DNS_USE_CPU_CLOCK_FOR_ID)\nCHECK_FUNCTION_EXISTS (epoll_create HAVE_EPOLL)\nCHECK_FUNCTION_EXISTS (epoll_ctl HAVE_EPOLL_CTL)\n# Temperarily  Quote event port out as we encounter error in port_getn\n# on solaris x86\n# CHECK_FUNCTION_EXISTS (port_create HAVE_EVENT_PORTS)\nCHECK_FUNCTION_EXISTS (inet_ntop HAVE_INET_NTOP)\nCHECK_FUNCTION_EXISTS (kqueue HAVE_KQUEUE)\nCHECK_FUNCTION_EXISTS (kqueue HAVE_WORKING_KQUEUE)\nCHECK_FUNCTION_EXISTS (signal HAVE_SIGNAL)\nCHECK_SYMBOL_EXISTS (timeradd \"sys/time.h\" HAVE_TIMERADD)\nCHECK_SYMBOL_EXISTS (timerclear \"sys/time.h\" HAVE_TIMERCLEAR)\nCHECK_SYMBOL_EXISTS (timercmp \"sys/time.h\" HAVE_TIMERCMP)\nCHECK_SYMBOL_EXISTS (timerisset \"sys/time.h\" HAVE_TIMERISSET)\n\n\n#--------------------------------------------------------------------\n# Support for WL#2373 (Use cycle counter for timing)\n#--------------------------------------------------------------------\n\nCHECK_INCLUDE_FILES(time.h HAVE_TIME_H)\nCHECK_INCLUDE_FILES(sys/time.h HAVE_SYS_TIME_H)\nCHECK_INCLUDE_FILES(sys/times.h HAVE_SYS_TIMES_H)\nCHECK_INCLUDE_FILES(asm/msr.h HAVE_ASM_MSR_H)\n#msr.h has rdtscll()\n\nCHECK_INCLUDE_FILES(ia64intrin.h HAVE_IA64INTRIN_H)\n\nCHECK_FUNCTION_EXISTS(times HAVE_TIMES)\nCHECK_FUNCTION_EXISTS(gettimeofday HAVE_GETTIMEOFDAY)\nCHECK_FUNCTION_EXISTS(read_real_time HAVE_READ_REAL_TIME)\n# This should work on AIX.\n\nCHECK_FUNCTION_EXISTS(ftime HAVE_FTIME)\n# This is still a normal call for milliseconds.\n\nCHECK_FUNCTION_EXISTS(time HAVE_TIME)\n# We can use time() on Macintosh if there is no ftime().\n\nCHECK_FUNCTION_EXISTS(rdtscll HAVE_RDTSCLL)\n# I doubt that we'll ever reach the check for this.\n\n\n#\n# Tests for symbols\n#\n\nCHECK_SYMBOL_EXISTS(madvise \"sys/mman.h\" HAVE_DECL_MADVISE)\nCHECK_SYMBOL_EXISTS(tzname \"time.h\" HAVE_TZNAME)\nCHECK_SYMBOL_EXISTS(lrand48 \"stdlib.h\" HAVE_LRAND48)\nCHECK_SYMBOL_EXISTS(getpagesize \"unistd.h\" HAVE_GETPAGESIZE)\nCHECK_SYMBOL_EXISTS(TIOCGWINSZ \"sys/ioctl.h\" GWINSZ_IN_SYS_IOCTL)\nCHECK_SYMBOL_EXISTS(FIONREAD \"sys/ioctl.h\" FIONREAD_IN_SYS_IOCTL)\nCHECK_SYMBOL_EXISTS(TIOCSTAT \"sys/ioctl.h\" TIOCSTAT_IN_SYS_IOCTL)\nCHECK_SYMBOL_EXISTS(FIONREAD \"sys/filio.h\" FIONREAD_IN_SYS_FILIO)\nCHECK_SYMBOL_EXISTS(gettimeofday \"sys/time.h\" HAVE_GETTIMEOFDAY)\n\nCHECK_SYMBOL_EXISTS(finite  \"math.h\" HAVE_FINITE_IN_MATH_H)\nIF(HAVE_FINITE_IN_MATH_H)\n  SET(HAVE_FINITE TRUE CACHE INTERNAL \"\")\nELSE()\n  CHECK_SYMBOL_EXISTS(finite  \"ieeefp.h\" HAVE_FINITE)\nENDIF()\nCHECK_SYMBOL_EXISTS(log2  math.h HAVE_LOG2)\nCHECK_SYMBOL_EXISTS(isnan math.h HAVE_ISNAN)\nCHECK_SYMBOL_EXISTS(rint  math.h HAVE_RINT)\n\n# isinf() prototype not found on Solaris\nCHECK_CXX_SOURCE_COMPILES(\n\"#include  <math.h>\nint main() { \n  isinf(0.0); \n  return 0;\n}\" HAVE_ISINF)\n\n\n# fesetround() prototype not found in gcc compatibility file fenv.h\nCHECK_CXX_SOURCE_COMPILES(\n\"#include  <fenv.h>\nint main() { \n  fesetround(FE_TONEAREST);\n  return 0;\n}\" HAVE_FESETROUND)\n\n\n\n#\n# Test for endianess\n#\nINCLUDE(TestBigEndian)\nIF(APPLE)\n  # Cannot run endian test on universal PPC/Intel binaries \n  # would return inconsistent result.\n  # config.h.cmake includes a special #ifdef for Darwin\nELSE()\n  TEST_BIG_ENDIAN(WORDS_BIGENDIAN)\nENDIF()\n\n#\n# Tests for type sizes (and presence)\n#\nINCLUDE (CheckTypeSize)\nset(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS}\n        -D_LARGEFILE_SOURCE -D_LARGE_FILES -D_FILE_OFFSET_BITS=64\n        -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS)\nSET(CMAKE_EXTRA_INCLUDE_FILES signal.h)\nMY_CHECK_TYPE_SIZE(sigset_t SIGSET_T)\nIF(NOT SIZEOF_SIGSET_T)\n SET(sigset_t int)\nENDIF()\nMY_CHECK_TYPE_SIZE(mode_t MODE_T)\nIF(NOT SIZEOF_MODE_T)\n SET(mode_t int)\nENDIF()\n\n\nIF(HAVE_STDINT_H)\n  SET(CMAKE_EXTRA_INCLUDE_FILES stdint.h)\nENDIF(HAVE_STDINT_H)\n\nSET(HAVE_VOIDP 1)\nSET(HAVE_CHARP 1)\nSET(HAVE_LONG 1)\nSET(HAVE_SIZE_T 1)\n\nIF(NOT APPLE)\nMY_CHECK_TYPE_SIZE(\"void *\" VOIDP)\nMY_CHECK_TYPE_SIZE(\"char *\" CHARP)\nMY_CHECK_TYPE_SIZE(long LONG)\nMY_CHECK_TYPE_SIZE(size_t SIZE_T)\nENDIF()\n\nMY_CHECK_TYPE_SIZE(char CHAR)\nMY_CHECK_TYPE_SIZE(short SHORT)\nMY_CHECK_TYPE_SIZE(int INT)\nMY_CHECK_TYPE_SIZE(\"long long\" LONG_LONG)\nSET(CMAKE_EXTRA_INCLUDE_FILES stdio.h sys/types.h)\nMY_CHECK_TYPE_SIZE(off_t OFF_T)\nMY_CHECK_TYPE_SIZE(uchar UCHAR)\nMY_CHECK_TYPE_SIZE(uint UINT)\nMY_CHECK_TYPE_SIZE(ulong ULONG)\nMY_CHECK_TYPE_SIZE(int8 INT8)\nMY_CHECK_TYPE_SIZE(uint8 UINT8)\nMY_CHECK_TYPE_SIZE(int16 INT16)\nMY_CHECK_TYPE_SIZE(uint16 UINT16)\nMY_CHECK_TYPE_SIZE(int32 INT32)\nMY_CHECK_TYPE_SIZE(uint32 UINT32)\nMY_CHECK_TYPE_SIZE(u_int32_t U_INT32_T)\nMY_CHECK_TYPE_SIZE(int64 INT64)\nMY_CHECK_TYPE_SIZE(uint64 UINT64)\nMY_CHECK_TYPE_SIZE(time_t TIME_T)\nSET (CMAKE_EXTRA_INCLUDE_FILES sys/types.h)\nMY_CHECK_TYPE_SIZE(bool  BOOL)\nSET(CMAKE_EXTRA_INCLUDE_FILES)\nIF(HAVE_SYS_SOCKET_H)\n  SET(CMAKE_EXTRA_INCLUDE_FILES sys/socket.h)\nENDIF(HAVE_SYS_SOCKET_H)\nMY_CHECK_TYPE_SIZE(socklen_t SOCKLEN_T)\nSET(CMAKE_EXTRA_INCLUDE_FILES)\n\nIF(HAVE_IEEEFP_H)\n  SET(CMAKE_EXTRA_INCLUDE_FILES ieeefp.h)\n  MY_CHECK_TYPE_SIZE(fp_except FP_EXCEPT)\nENDIF()\n\n\n#\n# Code tests\n#\n\n# check whether time_t is unsigned\nCHECK_C_SOURCE_COMPILES(\"\nint main()\n{\n  int array[(((time_t)-1) > 0) ? 1 : -1];\n  return 0;\n}\"\nTIME_T_UNSIGNED)\n\n\nCHECK_C_SOURCE_COMPILES(\"\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#endif\nint main()\n{\n  getaddrinfo( 0, 0, 0, 0);\n  return 0;\n}\"\nHAVE_GETADDRINFO)\n\nCHECK_C_SOURCE_COMPILES(\"\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#endif\nint main()\n{\n  select(0,0,0,0,0);\n  return 0;\n}\"\nHAVE_SELECT)\n\n#\n# Check if timespec has ts_sec and ts_nsec fields\n#\n\nCHECK_C_SOURCE_COMPILES(\"\n#include <pthread.h>\n\nint main(int ac, char **av)\n{\n  struct timespec abstime;\n  abstime.ts_sec = time(NULL)+1;\n  abstime.ts_nsec = 0;\n}\n\" HAVE_TIMESPEC_TS_SEC)\n\n\n#\n# Check return type of qsort()\n#\nCHECK_C_SOURCE_COMPILES(\"\n#include <stdlib.h>\n#ifdef __cplusplus\nextern \\\"C\\\"\n#endif\nvoid qsort(void *base, size_t nel, size_t width,\n  int (*compar) (const void *, const void *));\nint main(int ac, char **av) {}\n\" QSORT_TYPE_IS_VOID)\nIF(QSORT_TYPE_IS_VOID)\n  SET(RETQSORTTYPE \"void\")\nELSE(QSORT_TYPE_IS_VOID)\n  SET(RETQSORTTYPE \"int\")\nENDIF(QSORT_TYPE_IS_VOID)\n\nIF(WIN32)\nSET(SOCKET_SIZE_TYPE int)\nELSE()\nCHECK_CXX_SOURCE_COMPILES(\"\n#include <sys/socket.h>\nint main(int argc, char **argv)\n{\n  getsockname(0,0,(socklen_t *) 0);\n  return 0; \n}\"\nHAVE_SOCKET_SIZE_T_AS_socklen_t)\n\nIF(HAVE_SOCKET_SIZE_T_AS_socklen_t)\n  SET(SOCKET_SIZE_TYPE socklen_t)\nELSE()\n  CHECK_CXX_SOURCE_COMPILES(\"\n  #include <sys/socket.h>\n  int main(int argc, char **argv)\n  {\n    getsockname(0,0,(int *) 0);\n    return 0; \n  }\"\n  HAVE_SOCKET_SIZE_T_AS_int)\n  IF(HAVE_SOCKET_SIZE_T_AS_int)\n    SET(SOCKET_SIZE_TYPE int)\n  ELSE()\n    CHECK_CXX_SOURCE_COMPILES(\"\n    #include <sys/socket.h>\n    int main(int argc, char **argv)\n    {\n      getsockname(0,0,(size_t *) 0);\n      return 0; \n    }\"\n    HAVE_SOCKET_SIZE_T_AS_size_t)\n    IF(HAVE_SOCKET_SIZE_T_AS_size_t)\n      SET(SOCKET_SIZE_TYPE size_t)\n    ELSE()\n      SET(SOCKET_SIZE_TYPE int)\n    ENDIF()\n  ENDIF()\nENDIF()\nENDIF()\n\nCHECK_CXX_SOURCE_COMPILES(\"\n#include <pthread.h>\nint main()\n{\n  pthread_yield();\n  return 0;\n}\n\" HAVE_PTHREAD_YIELD_ZERO_ARG)\n\nIF(NOT STACK_DIRECTION)\n  IF(CMAKE_CROSSCOMPILING)\n   MESSAGE(FATAL_ERROR \n   \"STACK_DIRECTION is not defined.  Please specify -DSTACK_DIRECTION=1 \"\n   \"or -DSTACK_DIRECTION=-1 when calling cmake.\")\n  ELSE()\n    TRY_RUN(STACKDIR_RUN_RESULT STACKDIR_COMPILE_RESULT    \n     ${CMAKE_BINARY_DIR} \n     ${CMAKE_SOURCE_DIR}/cmake/stack_direction.c\n     )\n     # Test program returns 0 (down) or 1 (up).\n     # Convert to -1 or 1\n     IF(STACKDIR_RUN_RESULT EQUAL 0)\n       SET(STACK_DIRECTION -1 CACHE INTERNAL \"Stack grows direction\")\n     ELSE()\n       SET(STACK_DIRECTION 1 CACHE INTERNAL \"Stack grows direction\")\n     ENDIF()\n     MESSAGE(STATUS \"Checking stack direction : ${STACK_DIRECTION}\")\n   ENDIF()\nENDIF()\n\n#\n# Check return type of signal handlers\n#\nCHECK_C_SOURCE_COMPILES(\"\n#include <signal.h>\n#ifdef signal\n# undef signal\n#endif\n#ifdef __cplusplus\nextern \\\"C\\\" void (*signal (int, void (*)(int)))(int);\n#else\nvoid (*signal ()) ();\n#endif\nint main(int ac, char **av) {}\n\" SIGNAL_RETURN_TYPE_IS_VOID)\nIF(SIGNAL_RETURN_TYPE_IS_VOID)\n  SET(RETSIGTYPE void)\n  SET(VOID_SIGHANDLER 1)\nELSE(SIGNAL_RETURN_TYPE_IS_VOID)\n  SET(RETSIGTYPE int)\nENDIF(SIGNAL_RETURN_TYPE_IS_VOID)\n\n\nCHECK_INCLUDE_FILES(\"time.h;sys/time.h\" TIME_WITH_SYS_TIME)\nCHECK_SYMBOL_EXISTS(O_NONBLOCK \"unistd.h;fcntl.h\" HAVE_FCNTL_NONBLOCK)\nIF(NOT HAVE_FCNTL_NONBLOCK)\n SET(NO_FCNTL_NONBLOCK 1)\nENDIF()\n\n#\n# Test for how the C compiler does inline.\n# If both of these tests fail, then there is probably something wrong\n# in the environment (flags and/or compiling and/or linking).\n#\nCHECK_C_SOURCE_COMPILES(\"\nstatic inline int foo(){return 0;}\nint main(int argc, char *argv[]){return 0;}\"\n                            C_HAS_inline)\nIF(NOT C_HAS_inline)\n  CHECK_C_SOURCE_COMPILES(\"\n  static __inline int foo(){return 0;}\n  int main(int argc, char *argv[]){return 0;}\"\n                            C_HAS___inline)\n  SET(C_INLINE __inline)\nENDIF()\n\nIF(NOT C_HAS_inline AND NOT C_HAS___inline)\n  MESSAGE(FATAL_ERROR \"It seems like ${CMAKE_C_COMPILER} does not support \"\n    \"inline or __inline. Please verify compiler and flags. \"\n    \"See CMakeFiles/CMakeError.log for why the test failed to compile/link.\")\nENDIF()\n\nIF(NOT CMAKE_CROSSCOMPILING AND NOT MSVC)\n  STRING(TOLOWER ${CMAKE_SYSTEM_PROCESSOR}  processor)\n  IF(processor MATCHES \"86\" OR processor MATCHES \"amd64\" OR processor MATCHES \"x64\")\n  #Check for x86 PAUSE instruction\n  # We have to actually try running the test program, because of a bug\n  # in Solaris on x86_64, where it wrongly reports that PAUSE is not\n  # supported when trying to run an application.  See\n  # http://bugs.opensolaris.org/bugdatabase/printableBug.do?bug_id=6478684\n  CHECK_C_SOURCE_RUNS(\"\n  int main()\n  { \n    __asm__ __volatile__ (\\\"pause\\\"); \n    return 0;\n  }\"  HAVE_PAUSE_INSTRUCTION)\n  ENDIF()\n  IF (NOT HAVE_PAUSE_INSTRUCTION)\n    CHECK_C_SOURCE_COMPILES(\"\n    int main()\n    {\n     __asm__ __volatile__ (\\\"rep; nop\\\");\n     return 0;\n    }\n   \" HAVE_FAKE_PAUSE_INSTRUCTION)\n  ENDIF()\nENDIF()\n  \nCHECK_SYMBOL_EXISTS(tcgetattr \"termios.h\" HAVE_TCGETATTR 1)\n\n#\n# Check type of signal routines (posix, 4.2bsd, 4.1bsd or v7)\n#\nCHECK_C_SOURCE_COMPILES(\"\n  #include <signal.h>\n  int main(int ac, char **av)\n  {\n    sigset_t ss;\n    struct sigaction sa;\n    sigemptyset(&ss); sigsuspend(&ss);\n    sigaction(SIGINT, &sa, (struct sigaction *) 0);\n    sigprocmask(SIG_BLOCK, &ss, (sigset_t *) 0);\n  }\"\n  HAVE_POSIX_SIGNALS)\n\nIF(NOT HAVE_POSIX_SIGNALS)\n CHECK_C_SOURCE_COMPILES(\"\n  #include <signal.h>\n  int main(int ac, char **av)\n  {\n    int mask = sigmask(SIGINT);\n    sigsetmask(mask); sigblock(mask); sigpause(mask);\n  }\"\n  HAVE_BSD_SIGNALS)\n  IF (NOT HAVE_BSD_SIGNALS)\n    CHECK_C_SOURCE_COMPILES(\"\n    #include <signal.h>\n    void foo() { }\n    int main(int ac, char **av)\n    {\n      int mask = sigmask(SIGINT);\n      sigset(SIGINT, foo); sigrelse(SIGINT);\n      sighold(SIGINT); sigpause(SIGINT);\n    }\"\n   HAVE_SVR3_SIGNALS)  \n   IF (NOT HAVE_SVR3_SIGNALS)\n    SET(HAVE_V7_SIGNALS 1)\n   ENDIF(NOT HAVE_SVR3_SIGNALS)\n ENDIF(NOT HAVE_BSD_SIGNALS)\nENDIF(NOT HAVE_POSIX_SIGNALS)\n\n# Assume regular sprintf\nSET(SPRINTFS_RETURNS_INT 1)\n\nIF(CMAKE_COMPILER_IS_GNUCXX AND HAVE_CXXABI_H)\nCHECK_CXX_SOURCE_COMPILES(\"\n #include <cxxabi.h>\n int main(int argc, char **argv) \n  {\n    char *foo= 0; int bar= 0;\n    foo= abi::__cxa_demangle(foo, foo, 0, &bar);\n    return 0;\n  }\"\n  HAVE_ABI_CXA_DEMANGLE)\nENDIF()\n\nCHECK_C_SOURCE_COMPILES(\"\n  int main(int argc, char **argv) \n  {\n    extern char *__bss_start;\n    return __bss_start ? 1 : 0;\n  }\"\nHAVE_BSS_START)\n\nCHECK_C_SOURCE_COMPILES(\"\n    int main()\n    {\n      extern void __attribute__((weak)) foo(void);\n      return 0;\n    }\"\n    HAVE_WEAK_SYMBOL\n)\n\n\nCHECK_CXX_SOURCE_COMPILES(\"\n    #undef inline\n    #if !defined(SCO) && !defined(__osf__) && !defined(_REENTRANT)\n    #define _REENTRANT\n    #endif\n    #include <pthread.h>\n    #include <sys/types.h>\n    #include <sys/socket.h>\n    #include <netinet/in.h>\n    #include <arpa/inet.h>\n    #include <netdb.h>\n    int main()\n    {\n\n       struct hostent *foo =\n       gethostbyaddr_r((const char *) 0,\n          0, 0, (struct hostent *) 0, (char *) NULL,  0, (int *)0);\n       return 0;\n    }\n  \"\n  HAVE_SOLARIS_STYLE_GETHOST)\n\nIF(CMAKE_COMPILER_IS_GNUCXX)\nIF(WITH_ATOMIC_OPS STREQUAL \"up\")\n  SET(MY_ATOMIC_MODE_DUMMY 1 CACHE BOOL \"Assume single-CPU mode, no concurrency\")\nELSEIF(WITH_ATOMIC_OPS STREQUAL \"rwlocks\")\n  SET(MY_ATOMIC_MODE_RWLOCK 1 CACHE BOOL \"Use pthread rwlocks for atomic ops\")\nELSEIF(WITH_ATOMIC_OPS STREQUAL \"smp\")\nELSEIF(NOT WITH_ATOMIC_OPS)\n  CHECK_CXX_SOURCE_COMPILES(\"\n  int main()\n  {\n    int foo= -10; int bar= 10;\n    long long int foo64= -10; long long int bar64= 10;\n    if (!__sync_fetch_and_add(&foo, bar) || foo)\n      return -1;\n    bar= __sync_lock_test_and_set(&foo, bar);\n    if (bar || foo != 10)\n      return -1;\n    bar= __sync_val_compare_and_swap(&bar, foo, 15);\n    if (bar)\n      return -1;\n    if (!__sync_fetch_and_add(&foo64, bar64) || foo64)\n      return -1;\n    bar64= __sync_lock_test_and_set(&foo64, bar64);\n    if (bar64 || foo64 != 10)\n      return -1;\n    bar64= __sync_val_compare_and_swap(&bar64, foo, 15);\n    if (bar64)\n      return -1;\n    return 0;\n  }\"\n  HAVE_GCC_ATOMIC_BUILTINS)\nELSE()\n  MESSAGE(FATAL_ERROR \"${WITH_ATOMIC_OPS} is not a valid value for WITH_ATOMIC_OPS!\")\nENDIF()\nENDIF()\n\nSET(WITH_ATOMIC_LOCKS \"${WITH_ATOMIC_LOCKS}\" CACHE STRING\n\"Implement atomic operations using pthread rwlocks or atomic CPU\ninstructions for multi-processor or uniprocessor\nconfiguration. By default gcc built-in sync functions are used,\nif available and 'smp' configuration otherwise.\")\nMARK_AS_ADVANCED(WITH_ATOMIC_LOCKS MY_ATOMIC_MODE_RWLOCK MY_ATOMIC_MODE_DUMMY)\n\nIF(WITH_VALGRIND)\n  SET(VALGRIND_HEADERS \"valgrind/memcheck.h;valgrind/valgrind.h\")\n  CHECK_INCLUDE_FILES(\"${VALGRIND_HEADERS}\" HAVE_VALGRIND_HEADERS)\n  IF(HAVE_VALGRIND_HEADERS)\n    SET(HAVE_VALGRIND 1)\n  ELSE()\n    MESSAGE(FATAL_ERROR \"Unable to find Valgrind header files ${VALGRIND_HEADERS}. Make sure you have them in your include path.\")\n  ENDIF()\nENDIF()\n\n#--------------------------------------------------------------------\n# Check for IPv6 support\n#--------------------------------------------------------------------\nCHECK_INCLUDE_FILE(netinet/in6.h HAVE_NETINET_IN6_H)\n\nIF(UNIX)\n  SET(CMAKE_EXTRA_INCLUDE_FILES sys/types.h netinet/in.h sys/socket.h)\n  IF(HAVE_NETINET_IN6_H)\n    SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} netinet/in6.h)\n  ENDIF()\nELSEIF(WIN32)\n  SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} winsock2.h ws2ipdef.h)\nENDIF()\n\nMY_CHECK_STRUCT_SIZE(\"sockaddr_in6\" SOCKADDR_IN6)\nMY_CHECK_STRUCT_SIZE(\"in6_addr\" IN6_ADDR)\n\nIF(HAVE_STRUCT_SOCKADDR_IN6 OR HAVE_STRUCT_IN6_ADDR)\n  SET(HAVE_IPV6 TRUE CACHE INTERNAL \"\")\nENDIF()\n\n\n# Check for sockaddr_storage.ss_family\n# It is called differently under OS400 and older AIX\n\nCHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_storage\"\n ss_family \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_STORAGE_SS_FAMILY)\nIF(NOT HAVE_SOCKADDR_STORAGE_SS_FAMILY)\n  CHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_storage\"\n  __ss_family \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_STORAGE___SS_FAMILY)\n  IF(HAVE_SOCKADDR_STORAGE___SS_FAMILY)\n    SET(ss_family __ss_family)\n  ENDIF()\nENDIF()\n\n#\n# Check if struct sockaddr_in::sin_len is available.\n#\n\nCHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_in\" sin_len\n  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_IN_SIN_LEN)\n\n#\n# Check if struct sockaddr_in6::sin6_len is available.\n#\n\nCHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_in6\" sin6_len\n  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_IN6_SIN6_LEN)\n\nSET(CMAKE_EXTRA_INCLUDE_FILES) \n\nCHECK_STRUCT_HAS_MEMBER(\"struct dirent\" d_ino \"dirent.h\"  STRUCT_DIRENT_HAS_D_INO)\nCHECK_STRUCT_HAS_MEMBER(\"struct dirent\" d_namlen \"dirent.h\"  STRUCT_DIRENT_HAS_D_NAMLEN)\nSET(SPRINTF_RETURNS_INT 1)\n"
        },
        {
          "name": "dbug",
          "type": "tree",
          "content": null
        },
        {
          "name": "document",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "inception_build.sh",
          "type": "blob",
          "size": 0.96484375,
          "content": "#!/bin/bash\n\ndebug_dir=$1\nplatform=$2\n\nif [ $# -eq 1 ]\nthen \n\techo \"building project in $1\"\n\tplatform=\"x\"\nelif [ $# -ne 2 ]\nthen\n\techo \"Usage: $0 builddir [platform(linux:Xcode)]\"\n\techo \"EXAPMLE: $0 debug [Xcode]\"\n\texit\nfi\n\nGplatform=\"\"\nmakerule=\"\"\nif [ $platform == \"Xcode\" ]\nthen\n    Gplatform=\"-G Xcode\"\nelse\n    makerule=\"make -j 24 install\"\nfi\n\nif [ -d $debug_dir ]\nthen\n  cd $debug_dir\nelse\n  mkdir $debug_dir\n  cd $debug_dir\n\n  # cmake && make && make install\n  cmake -DWITH_DEBUG=off -DWITH_ZLIB=system -DCMAKE_INSTALL_PREFIX=./mysql  -DMYSQL_DATADIR=./mysql/data \\\n    -DWITH_SSL=bundled -DCMAKE_BUILD_TYPE=RELEASE -DWITH_ZLIB=bundled\\\n    -DMY_MAINTAINER_CXX_WARNINGS=\"-Wall -Wextra -Wunused -Wwrite-strings -Wno-strict-aliasing  -Wno-unused-parameter -Woverloaded-virtual\" \\\n    -DMY_MAINTAINER_C_WARNINGS=\"-Wall -Wextra -Wunused -Wwrite-strings -Wno-strict-aliasing -Wdeclaration-after-statement\" \\\n    $Gplatform\\\n    ..\nfi\n\nif [ $platform != \"Xcode\" ]\nthen\n    $makerule\nfi\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "libevent",
          "type": "tree",
          "content": null
        },
        {
          "name": "libmysql",
          "type": "tree",
          "content": null
        },
        {
          "name": "libmysqld",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "mysys",
          "type": "tree",
          "content": null
        },
        {
          "name": "mysys_ssl",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "regex",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sql-bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "sql-common",
          "type": "tree",
          "content": null
        },
        {
          "name": "sql",
          "type": "tree",
          "content": null
        },
        {
          "name": "strings",
          "type": "tree",
          "content": null
        },
        {
          "name": "support-files",
          "type": "tree",
          "content": null
        },
        {
          "name": "unittest",
          "type": "tree",
          "content": null
        },
        {
          "name": "vio",
          "type": "tree",
          "content": null
        },
        {
          "name": "win",
          "type": "tree",
          "content": null
        },
        {
          "name": "zlib",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}