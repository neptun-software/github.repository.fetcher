{
  "metadata": {
    "timestamp": 1736710034356,
    "page": 644,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "BandarHL/BHTwitter",
      "stars": 2014,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.015625,
          "content": ".DS_Store\n.theos"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0859375,
          "content": "[submodule \"libflex/FLEX\"]\n\tpath = libflex/FLEX\n\turl = https://github.com/FLEXTool/FLEX\n"
        },
        {
          "name": "1.png",
          "type": "blob",
          "size": 432.796875,
          "content": null
        },
        {
          "name": "2.png",
          "type": "blob",
          "size": 950.2958984375,
          "content": null
        },
        {
          "name": "3.png",
          "type": "blob",
          "size": 833.970703125,
          "content": null
        },
        {
          "name": "4.png",
          "type": "blob",
          "size": 807.400390625,
          "content": null
        },
        {
          "name": "AppIcon",
          "type": "tree",
          "content": null
        },
        {
          "name": "BHDownload",
          "type": "tree",
          "content": null
        },
        {
          "name": "BHDownloadInlineButton.h",
          "type": "blob",
          "size": 1.6142578125,
          "content": "//\n//  BHDownloadInlineButton.h\n//  BHTwitter\n//\n//  Created by BandarHelal on 09/04/2022.\n//\n\n#import <UIKit/UIKit.h>\n#import \"BHTManager.h\"\n\n@interface BHDownloadInlineButton : UIButton\n{\n    NSUInteger _displayType;\n    NSUInteger _inlineActionType;\n    T1StatusInlineActionsView *_delegate;\n    id _buttonAnimator;\n    id _viewModel;\n}\n\n+ (CGSize)buttonImageSizeUsingViewModel:(id)arg1 options:(NSUInteger)arg2 overrideButtonSize:(CGSize)arg3 account:(id)arg4;\n@property(retain, nonatomic) id buttonAnimator;\n@property(retain, nonatomic) T1StatusInlineActionsView *delegate;\n@property(nonatomic, assign) UIEdgeInsets hitTestEdgeInsets;\n@property (nonatomic, assign, readwrite) UIEdgeInsets touchInsets;\n@property(nonatomic) NSUInteger inlineActionType;\n@property(nonatomic) NSUInteger displayType;\n@property (nonatomic) id viewModel;\n- (void)setTouchInsets:(UIEdgeInsets)arg1;\n- (id)_t1_imageNamed:(id)arg1 fitSize:(CGSize)arg2 fillColor:(id)arg3;\n- (_Bool)shouldShowCount;\n- (double)extraWidth;\n- (CGFloat)trailingEdgeInset;\n- (NSUInteger)touchInsetPriority;\n- (NSUInteger)alternateInlineActionType;\n- (NSUInteger)visibility;\n- (NSString *)actionSheetTitle;\n- (_Bool)enabled;\n- (void)statusDidUpdate:(id)arg1 options:(NSUInteger)arg2 displayTextOptions:(NSUInteger)arg3 animated:(BOOL)arg4;\n- (void)statusDidUpdate:(id)arg1 options:(NSUInteger)arg2 displayTextOptions:(NSUInteger)arg3 animated:(BOOL)arg4 featureSwitches:(id)arg5;\n- (instancetype)initWithOptions:(NSUInteger)arg1 overrideSize:(id)arg2 account:(id)arg3;\n- (instancetype)initWithInlineActionType:(NSUInteger)arg1 options:(NSUInteger)arg2 overrideSize:(id)arg3 account:(id)arg4;\n@end\n"
        },
        {
          "name": "BHDownloadInlineButton.m",
          "type": "blob",
          "size": 15.80078125,
          "content": "//\n//  BHDownloadInlineButton.m\n//  BHTwitter\n//\n//  Created by BandarHelal on 09/04/2022.\n//\n\n#import \"BHDownloadInlineButton.h\"\n#import \"Colours/Colours.h\"\n#import \"BHTBundle/BHTBundle.h\"\n\n@interface BHDownloadInlineButton () <BHDownloadDelegate>\n@property (nonatomic, strong) JGProgressHUD *hud;\n@end\n\n@implementation BHDownloadInlineButton\nstatic const NSString *KEY_HIT_TEST_EDGE_INSETS = @\"HitTestEdgeInsets\";\n\n+ (CGSize)buttonImageSizeUsingViewModel:(id)arg1 options:(NSUInteger)arg2 overrideButtonSize:(CGSize)arg3 account:(id)arg4 {\n    return CGSizeZero;\n}\n\n- (void)statusDidUpdate:(id)arg1 options:(NSUInteger)arg2 displayTextOptions:(NSUInteger)arg3 animated:(BOOL)arg4 featureSwitches:(id)arg5 {\n    [self statusDidUpdate:arg1 options:arg2 displayTextOptions:arg3 animated:arg4];\n}\n\n- (void)statusDidUpdate:(id)arg1 options:(NSUInteger)arg2 displayTextOptions:(NSUInteger)arg3 animated:(BOOL)arg4 {\n    if ([self.delegate.delegate isKindOfClass:objc_getClass(\"T1SlideshowStatusView\")]) {\n        [self setTintColor:UIColor.whiteColor];\n    } else if ([self.delegate.delegate isKindOfClass:objc_getClass(\"T1ImmersiveExploreCardView\")]) {\n        [self setTintColor:UIColor.whiteColor];\n    } else if ([self.delegate.delegate isKindOfClass:objc_getClass(\"T1TwitterSwift.ImmersiveExploreCardViewHelper\")]) {\n        [self setTintColor:UIColor.whiteColor];\n    } else {\n        [self setTintColor:[UIColor colorFromHexString:@\"6D6E70\"]];\n    }\n}\n- (instancetype)initWithOptions:(NSUInteger)arg1 overrideSize:(id)arg2 account:(id)arg3 {\n    self = [super initWithFrame:CGRectZero];\n    if (self != nil) {\n        [self setInlineActionType:131];\n        [self setTintColor:[UIColor colorFromHexString:@\"6D6E70\"]];\n        [self setImage:[UIImage systemImageNamed:@\"arrow.down\"] forState:UIControlStateNormal];\n        [self addTarget:self action:@selector(DownloadHandler:) forControlEvents:UIControlEventTouchUpInside];\n    }\n    return self;\n}\n- (instancetype)initWithInlineActionType:(NSUInteger)arg1 options:(NSUInteger)arg2 overrideSize:(id)arg3 account:(id)arg4 {\n    self = [super initWithFrame:CGRectZero];\n    if (self != nil) {\n        [self setInlineActionType:arg1];\n        [self setTintColor:[UIColor colorFromHexString:@\"6D6E70\"]];\n        [self setImage:[UIImage systemImageNamed:@\"arrow.down\"] forState:UIControlStateNormal];\n        [self addTarget:self action:@selector(DownloadHandler:) forControlEvents:UIControlEventTouchUpInside];\n    }\n    return self;\n}\n- (id)_t1_imageNamed:(id)arg1 fitSize:(CGSize)arg2 fillColor:(id)arg3 {\n    return nil;\n}\n- (void)DownloadHandler:(UIButton *)sender {\n    NSAttributedString *AttString = [[NSAttributedString alloc] initWithString:[[BHTBundle sharedBundle] localizedStringForKey:@\"DOWNLOAD_MENU_TITLE\"] attributes:@{\n        NSFontAttributeName: [[objc_getClass(\"TAEStandardFontGroup\") sharedFontGroup] headline2BoldFont],\n        NSForegroundColorAttributeName: UIColor.labelColor\n    }];\n    TFNActiveTextItem *title = [[objc_getClass(\"TFNActiveTextItem\") alloc] initWithTextModel:[[objc_getClass(\"TFNAttributedTextModel\") alloc] initWithAttributedString:AttString] activeRanges:nil];\n    \n    NSMutableArray *actions = [[NSMutableArray alloc] init];\n    [actions addObject:title];\n    NSMutableArray *innerActions = [[NSMutableArray alloc] init];\n    [innerActions addObject:title];\n    \n    \n    if ([self.delegate.delegate isKindOfClass:objc_getClass(\"T1SlideshowStatusView\")]) {\n        T1SlideshowStatusView *selectedMedia = self.delegate.delegate;\n        \n        for (TFSTwitterEntityMediaVideoVariant *video in selectedMedia.media.videoInfo.variants) {\n            if ([video.contentType isEqualToString:@\"video/mp4\"]) {\n                TFNActionItem *option = [objc_getClass(\"TFNActionItem\") actionItemWithTitle:[BHTManager getVideoQuality:video.url] imageName:@\"arrow_down_circle_stroke\" action:^{\n                    BHDownload *dwManager = [[BHDownload alloc] init];\n                    [dwManager downloadFileWithURL:[NSURL URLWithString:video.url]];\n                    [dwManager setDelegate:self];\n                    \n                    if (![BHTManager DirectSave]) {\n                        self.hud = [JGProgressHUD progressHUDWithStyle:JGProgressHUDStyleDark];\n                        self.hud.textLabel.text = [[BHTBundle sharedBundle] localizedStringForKey:@\"PROGRESS_DOWNLOADING_STATUS_TITLE\"];\n                        [self.hud showInView:topMostController().view];\n                    }\n                }];\n                \n                [actions addObject:option];\n            }\n            \n            if ([video.contentType isEqualToString:@\"application/x-mpegURL\"]) {\n                TFNActionItem *option = [objc_getClass(\"TFNActionItem\") actionItemWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"FFMPEG_DOWNLOAD_OPTION_TITLE\"] imageName:@\"arrow_down_circle_stroke\" action:^{\n                    \n                    self.hud = [JGProgressHUD progressHUDWithStyle:JGProgressHUDStyleDark];\n                    self.hud.textLabel.text = [[BHTBundle sharedBundle] localizedStringForKey:@\"FETCHING_PROGRESS_TITLE\"];\n                    [self.hud showInView:topMostController().view];\n                    \n                    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n                        MediaInformation *mediaInfo = [BHTManager getM3U8Information:[NSURL URLWithString:video.url]];\n                        dispatch_async(dispatch_get_main_queue(), ^(void) {\n                            [self.hud dismiss];\n                            \n                            TFNMenuSheetViewController *alert2 = [BHTManager newFFmpegDownloadSheet:mediaInfo downloadingURL:[NSURL URLWithString:video.url] progressView:self.hud];\n                            [alert2 tfnPresentedCustomPresentFromViewController:topMostController() animated:YES completion:nil];\n                        });\n                    });\n                    \n                }];\n                \n                [actions addObject:option];\n            }\n        }\n    } else {\n        if (self.delegate.viewModel.representedMediaEntities.count > 1) {\n            [self.delegate.viewModel.representedMediaEntities enumerateObjectsUsingBlock:^(TFSTwitterEntityMedia * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n                \n                if (obj.mediaType == 2 || obj.mediaType == 3) {\n                    TFNActionItem *option = [objc_getClass(\"TFNActionItem\") actionItemWithTitle:[NSString stringWithFormat:@\"Video %lu\", (unsigned long)idx+1] imageName:@\"arrow_down_circle_stroke\" action:^{\n                        \n                        for (TFSTwitterEntityMediaVideoVariant *video in obj.videoInfo.variants) {\n                            if ([video.contentType isEqualToString:@\"video/mp4\"]) {\n                                TFNActionItem *innerOption = [objc_getClass(\"TFNActionItem\") actionItemWithTitle:[BHTManager getVideoQuality:video.url] imageName:@\"arrow_down_circle_stroke\" action:^{\n                                    \n                                    BHDownload *dwManager = [[BHDownload alloc] init];\n                                    [dwManager downloadFileWithURL:[NSURL URLWithString:video.url]];\n                                    [dwManager setDelegate:self];\n                                    \n                                    if (![BHTManager DirectSave]) {\n                                        self.hud = [JGProgressHUD progressHUDWithStyle:JGProgressHUDStyleDark];\n                                        self.hud.textLabel.text = [[BHTBundle sharedBundle] localizedStringForKey:@\"PROGRESS_DOWNLOADING_STATUS_TITLE\"];\n                                        [self.hud showInView:topMostController().view];\n                                    }\n                                    \n                                }];\n                                \n                                [innerActions addObject:innerOption];\n                            }\n                            \n                            if ([video.contentType isEqualToString:@\"application/x-mpegURL\"]) {\n                                TFNActionItem *option = [objc_getClass(\"TFNActionItem\") actionItemWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"FFMPEG_DOWNLOAD_OPTION_TITLE\"] imageName:@\"arrow_down_circle_stroke\" action:^{\n                                    \n                                    self.hud = [JGProgressHUD progressHUDWithStyle:JGProgressHUDStyleDark];\n                                    self.hud.textLabel.text = [[BHTBundle sharedBundle] localizedStringForKey:@\"FETCHING_PROGRESS_TITLE\"];\n                                    [self.hud showInView:topMostController().view];\n                                    \n                                    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n                                        MediaInformation *mediaInfo = [BHTManager getM3U8Information:[NSURL URLWithString:video.url]];\n                                        dispatch_async(dispatch_get_main_queue(), ^(void) {\n                                            [self.hud dismiss];\n                                            \n                                            TFNMenuSheetViewController *alert2 = [BHTManager newFFmpegDownloadSheet:mediaInfo downloadingURL:[NSURL URLWithString:video.url] progressView:self.hud];\n                                            [alert2 tfnPresentedCustomPresentFromViewController:topMostController() animated:YES completion:nil];\n                                        });\n                                    });\n                                }];\n                                \n                                [innerActions addObject:option];\n                            }\n                        }\n                        \n                        TFNMenuSheetViewController *innerAlert = [[objc_getClass(\"TFNMenuSheetViewController\") alloc] initWithActionItems:[NSArray arrayWithArray:innerActions]];\n                        [innerAlert tfnPresentedCustomPresentFromViewController:topMostController() animated:YES completion:nil];\n                    }];\n                    \n                    [actions addObject:option];\n                }\n            }];\n        } else {\n            for (TFSTwitterEntityMediaVideoVariant *video in self.delegate.viewModel.representedMediaEntities.firstObject.videoInfo.variants) {\n                if ([video.contentType isEqualToString:@\"video/mp4\"]) {\n                    \n                    TFNActionItem *option = [objc_getClass(\"TFNActionItem\") actionItemWithTitle:[BHTManager getVideoQuality:video.url] imageName:@\"arrow_down_circle_stroke\" action:^{\n                        BHDownload *dwManager = [[BHDownload alloc] init];\n                        [dwManager downloadFileWithURL:[NSURL URLWithString:video.url]];\n                        [dwManager setDelegate:self];\n                        \n                        if (![BHTManager DirectSave]) {\n                            self.hud = [JGProgressHUD progressHUDWithStyle:JGProgressHUDStyleDark];\n                            self.hud.textLabel.text = [[BHTBundle sharedBundle] localizedStringForKey:@\"PROGRESS_DOWNLOADING_STATUS_TITLE\"];\n                            [self.hud showInView:topMostController().view];\n                        }\n                    }];\n                    \n                    [actions addObject:option];\n                }\n                if ([video.contentType isEqualToString:@\"application/x-mpegURL\"]) {\n                    TFNActionItem *option = [objc_getClass(\"TFNActionItem\") actionItemWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"FFMPEG_DOWNLOAD_OPTION_TITLE\"] imageName:@\"arrow_down_circle_stroke\" action:^{\n                        \n                        self.hud = [JGProgressHUD progressHUDWithStyle:JGProgressHUDStyleDark];\n                        self.hud.textLabel.text = [[BHTBundle sharedBundle] localizedStringForKey:@\"FETCHING_PROGRESS_TITLE\"];\n                        [self.hud showInView:topMostController().view];\n                        \n                        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n                            MediaInformation *mediaInfo = [BHTManager getM3U8Information:[NSURL URLWithString:video.url]];\n                            dispatch_async(dispatch_get_main_queue(), ^(void) {\n                                [self.hud dismiss];\n                                \n                                TFNMenuSheetViewController *alert2 = [BHTManager newFFmpegDownloadSheet:mediaInfo downloadingURL:[NSURL URLWithString:video.url] progressView:self.hud];\n                                [alert2 tfnPresentedCustomPresentFromViewController:topMostController() animated:YES completion:nil];\n                            });\n                        });\n                    }];\n                    \n                    [actions addObject:option];\n                }\n            }\n        }\n    }\n    \n    TFNMenuSheetViewController *alert = [[objc_getClass(\"TFNMenuSheetViewController\") alloc] initWithActionItems:[NSArray arrayWithArray:actions]];\n    [alert tfnPresentedCustomPresentFromViewController:topMostController() animated:YES completion:nil];\n}\n\n\n\n- (void)setTouchInsets:(UIEdgeInsets)arg1 {\n    if ([self.delegate.delegate isKindOfClass:objc_getClass(\"T1StandardStatusInlineActionsViewAdapter\")]) {\n        [self setImageEdgeInsets:arg1];\n        [self setHitTestEdgeInsets:arg1];\n    }\n}\n\n// https://stackoverflow.com/a/13067285\n- (void)setHitTestEdgeInsets:(UIEdgeInsets)hitTestEdgeInsets {\n    NSValue *value = [NSValue value:&hitTestEdgeInsets withObjCType:@encode(UIEdgeInsets)];\n    objc_setAssociatedObject(self, &KEY_HIT_TEST_EDGE_INSETS, value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n- (UIEdgeInsets)hitTestEdgeInsets {\n    NSValue *value = objc_getAssociatedObject(self, &KEY_HIT_TEST_EDGE_INSETS);\n    if (value) {\n        UIEdgeInsets edgeInsets; [value getValue:&edgeInsets]; return edgeInsets;\n    } else {\n        return UIEdgeInsetsZero;\n    }\n}\n\n- (bool)enabled {\n    return true;\n}\n\n- (NSString *)actionSheetTitle {\n    return @\"BHDownload\";\n}\n\n- (NSUInteger)visibility {\n    return 1;\n}\n\n- (NSUInteger)alternateInlineActionType {\n    return 6;\n}\n\n- (NSUInteger)touchInsetPriority {\n    return 2;\n}\n\n- (double)extraWidth {\n    return 40;\n}\n\n- (CGFloat)trailingEdgeInset {\n    return 6;\n}\n\n- (bool)shouldShowCount {\n    return false;\n}\n\n- (NSUInteger)displayType {\n    return self->_displayType;\n}\n\n- (NSUInteger)inlineActionType {\n    return self->_inlineActionType;\n}\n\n- (T1StatusInlineActionsView *)delegate {\n    return self->_delegate;\n}\n\n- (id)buttonAnimator {\n    return self->_buttonAnimator;\n}\n\n- (id)viewModel {\n    return self->_viewModel;\n}\n\n- (void)downloadProgress:(float)progress {\n    self.hud.detailTextLabel.text = [BHTManager getDownloadingPersent:progress];\n}\n\n- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event {\n    if (UIEdgeInsetsEqualToEdgeInsets(self.hitTestEdgeInsets, UIEdgeInsetsZero) || !self.enabled || self.hidden) {\n        return [super pointInside:point withEvent:event];\n    }\n    \n    CGRect relativeFrame = self.bounds;\n    CGRect hitFrame = UIEdgeInsetsInsetRect(relativeFrame, self.hitTestEdgeInsets);\n    \n    return CGRectContainsPoint(hitFrame, point);\n}\n\n- (void)downloadDidFinish:(NSURL *)filePath Filename:(NSString *)fileName {\n    NSString *DocPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, true).firstObject;\n    NSFileManager *manager = [NSFileManager defaultManager];\n    NSURL *newFilePath = [[NSURL fileURLWithPath:DocPath] URLByAppendingPathComponent:[NSString stringWithFormat:@\"%@.mp4\", NSUUID.UUID.UUIDString]];\n    [manager moveItemAtURL:filePath toURL:newFilePath error:nil];\n    if (!([BHTManager DirectSave])) {\n        [self.hud dismiss];\n        [BHTManager showSaveVC:newFilePath];\n    } else {\n        [BHTManager save:newFilePath];\n    }\n}\n- (void)downloadDidFailureWithError:(NSError *)error {\n    if (error) {\n        [self.hud dismiss];\n    }\n}\n\n@end\n"
        },
        {
          "name": "BHTBundle",
          "type": "tree",
          "content": null
        },
        {
          "name": "BHTManager.h",
          "type": "blob",
          "size": 1.6025390625,
          "content": "//\n//  BHTdownloadManager.h\n//  BHT\n//\n//  Created by BandarHelal on 24/12/1441 AH.\n//\n\n#import \"TWHeaders.h\"\n\n\n@interface BHTManager : NSObject\n+ (NSString *)getDownloadingPersent:(float)per;\n+ (void)cleanCache;\n+ (NSString *)getVideoQuality:(NSString *)url;\n+ (BOOL)isVideoCell:(id <T1StatusViewModel>)model;\n+ (bool)isDMVideoCell:(T1InlineMediaView *)view;\n+ (BOOL)doesContainDigitsOnly:(NSString *)string;\n+ (UIViewController *)BHTSettingsWithAccount:(TFNTwitterAccount *)twAccount;\n+ (void)showSaveVC:(NSURL *)url;\n+ (void)save:(NSURL *)url;\n+ (MediaInformation *)getM3U8Information:(NSURL *)mediaURL;\n+ (TFNMenuSheetViewController *)newFFmpegDownloadSheet:(MediaInformation *)mediaInformation downloadingURL:(NSURL *)downloadingURL progressView:(JGProgressHUD *)hud;\n\n+ (BOOL)DownloadingVideos;\n+ (BOOL)DirectSave;\n+ (BOOL)UndoTweet;\n+ (BOOL)NoHistory;\n+ (BOOL)BioTranslate;\n+ (BOOL)LikeConfirm;\n+ (BOOL)TweetConfirm;\n+ (BOOL)FollowConfirm;\n+ (BOOL)HidePromoted;\n+ (BOOL)HideTopics;\n+ (BOOL)DisableVODCaptions;\n+ (BOOL)Padlock;\n+ (BOOL)OldStyle;\n+ (BOOL)changeFont;\n+ (BOOL)FLEX;\n+ (BOOL)autoHighestLoad;\n+ (BOOL)disableSensitiveTweetWarnings;\n+ (BOOL)showScrollIndicator;\n+ (BOOL)CopyProfileInfo;\n+ (BOOL)tweetToImage;\n+ (BOOL)hideSpacesBar;\n+ (BOOL)disableRTL;\n+ (BOOL)alwaysOpenSafari;\n+ (BOOL)hideWhoToFollow;\n+ (BOOL)hideTopicsToFollow;\n+ (BOOL)hideViewCount;\n+ (BOOL)hidePremiumOffer;\n+ (BOOL)hideTrendVideos;\n+ (BOOL)forceTweetFullFrame;\n+ (BOOL)stripTrackingParams;\n+ (BOOL)alwaysFollowingPage;\n+ (BOOL)stopHidingTabBar;\n+ (BOOL)changeBackground;\n+ (bool)backgroundImage;\n+ (BOOL)hideBookmarkButton;\n+ (BOOL)customVoice;\n@end\n\n"
        },
        {
          "name": "BHTManager.m",
          "type": "blob",
          "size": 11.80078125,
          "content": "//\n//  BHTdownloadManager.m\n//  BHT\n//\n//  Created by BandarHelal on 24/12/1441 AH.\n//\n\n#import \"BHTManager.h\"\n#import \"SettingsViewController.h\"\n#import \"BHTBundle/BHTBundle.h\"\n\n@implementation BHTManager\n+ (bool)isDMVideoCell:(T1InlineMediaView *)view {\n    if (view.playerIconViewType == 4) {\n        return true;\n    } else {\n        return false;\n    }\n}\n+ (void)cleanCache {\n    NSArray <NSURL *> *DocumentFiles = [[NSFileManager defaultManager] contentsOfDirectoryAtURL:[NSURL fileURLWithPath:NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, true).firstObject] includingPropertiesForKeys:@[] options:NSDirectoryEnumerationSkipsHiddenFiles error:nil];\n    \n    for (NSURL *file in DocumentFiles) {\n        if ([file.pathExtension.lowercaseString isEqualToString:@\"mp4\"]) {\n            [[NSFileManager defaultManager] removeItemAtURL:file error:nil];\n        }\n    }\n    \n    NSArray <NSURL *> *TempFiles = [[NSFileManager defaultManager] contentsOfDirectoryAtURL:[NSURL fileURLWithPath:NSTemporaryDirectory()] includingPropertiesForKeys:@[] options:NSDirectoryEnumerationSkipsHiddenFiles error:nil];\n    \n    for (NSURL *file in TempFiles) {\n        if ([file.pathExtension.lowercaseString isEqualToString:@\"mp4\"]) {\n            [[NSFileManager defaultManager] removeItemAtURL:file error:nil];\n        }\n        if ([file.pathExtension.lowercaseString isEqualToString:@\"mov\"]) {\n            [[NSFileManager defaultManager] removeItemAtURL:file error:nil];\n        }\n        if ([file.pathExtension.lowercaseString isEqualToString:@\"tmp\"]) {\n            [[NSFileManager defaultManager] removeItemAtURL:file error:nil];\n        }\n        if ([file hasDirectoryPath]) {\n            if ([BHTManager isEmpty:file]) {\n                [[NSFileManager defaultManager] removeItemAtURL:file error:nil];\n            }\n        }\n    }\n}\n+ (BOOL)isEmpty:(NSURL *)url {\n    NSArray *FolderFiles = [[NSFileManager defaultManager] contentsOfDirectoryAtURL:url includingPropertiesForKeys:@[] options:NSDirectoryEnumerationSkipsHiddenFiles error:nil];\n    if (FolderFiles.count == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n+ (NSString *)getDownloadingPersent:(float)per {\n    NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];\n    [numberFormatter setNumberStyle:NSNumberFormatterPercentStyle];\n    NSNumber *number = [NSNumber numberWithFloat:per];\n    return [numberFormatter stringFromNumber:number];\n}\n+ (NSString *)getVideoQuality:(NSString *)url {\n    NSMutableArray *q = [NSMutableArray new];\n    NSArray *splits = [url componentsSeparatedByString:@\"/\"];\n    for (int i = 0; i < [splits count]; i++) {\n        NSString *item = [splits objectAtIndex:i];\n        NSArray *dir = [item componentsSeparatedByString:@\"x\"];\n        for (int k = 0; k < [dir count]; k++) {\n            NSString *item2 = [dir objectAtIndex:k];\n            if (!(item2.length == 0)) {\n                if ([BHTManager doesContainDigitsOnly:item2]) {\n                    if (!(item2.integerValue > 10000)) {\n                        if (!(q.count == 2)) {\n                            [q addObject:item2];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (q.count == 0) {\n        return @\"GIF\";\n    }\n    return [NSString stringWithFormat:@\"%@x%@\", q.firstObject, q.lastObject];\n}\n+ (BOOL)isVideoCell:(id <T1StatusViewModel>)model {\n    return model.isMediaEntityVideo || model.isGIF;\n}\n+ (void)save:(NSURL *)url {\n    [[PHPhotoLibrary sharedPhotoLibrary] performChangesAndWait:^{\n        [PHAssetChangeRequest creationRequestForAssetFromVideoAtFileURL:url];\n    } error:nil];\n}\n+ (void)showSaveVC:(NSURL *)url {\n    UIActivityViewController *acVC = [[UIActivityViewController alloc] initWithActivityItems:@[url] applicationActivities:nil];\n    if (is_iPad()) {\n        acVC.popoverPresentationController.sourceView = topMostController().view;\n        acVC.popoverPresentationController.sourceRect = CGRectMake(topMostController().view.bounds.size.width / 2.0, topMostController().view.bounds.size.height / 2.0, 1.0, 1.0);\n    }\n    [topMostController() presentViewController:acVC animated:true completion:nil];\n}\n\n+ (MediaInformation *)getM3U8Information:(NSURL *)mediaURL {\n    MediaInformationSession *mediaInformationSession = [FFprobeKit getMediaInformation:mediaURL.absoluteString];\n    MediaInformation *mediaInformation = [mediaInformationSession getMediaInformation];\n    return mediaInformation;\n}\n+ (TFNMenuSheetViewController *)newFFmpegDownloadSheet:(MediaInformation *)mediaInformation downloadingURL:(NSURL *)downloadingURL progressView:(JGProgressHUD *)hud {\n    NSAttributedString *AttString = [[NSAttributedString alloc] initWithString:[[BHTBundle sharedBundle] localizedStringForKey:@\"DOWNLOAD_MENU_TITLE\"] attributes:@{\n        NSFontAttributeName: [[objc_getClass(\"TAEStandardFontGroup\") sharedFontGroup] headline2BoldFont],\n        NSForegroundColorAttributeName: UIColor.labelColor\n    }];\n    TFNActiveTextItem *title = [[objc_getClass(\"TFNActiveTextItem\") alloc] initWithTextModel:[[objc_getClass(\"TFNAttributedTextModel\") alloc] initWithAttributedString:AttString] activeRanges:nil];\n    \n    NSMutableArray *actions = [[NSMutableArray alloc] init];\n    [actions addObject:title];\n    \n    for (StreamInformation *stream in [mediaInformation getStreams]) {\n        NSNumber *width = [stream getWidth];\n        NSNumber *height = [stream getHeight];\n        if (width != nil && height != nil) {\n            NSString *resolution = [NSString stringWithFormat:@\"%@x%@\", width, height];\n            TFNActionItem *downloadOption = [objc_getClass(\"TFNActionItem\") actionItemWithTitle:resolution imageName:@\"arrow_down_circle_stroke\" action:^{\n                hud.textLabel.text = [[BHTBundle sharedBundle] localizedStringForKey:@\"PROGRESS_DOWNLOADING_STATUS_TITLE\"];\n                [hud showInView:topMostController().view];\n\n                NSURL *newFilePath = [[NSURL fileURLWithPath:NSTemporaryDirectory()] URLByAppendingPathComponent:[NSString stringWithFormat:@\"%@.mp4\", NSUUID.UUID.UUIDString]];\n                [FFmpegKit executeAsync:[NSString stringWithFormat:@\"-i %@ -vf scale=%@:flags=lanczos -b:v 2M -c:a copy %@\", downloadingURL.absoluteString, resolution, newFilePath.path] withCompleteCallback:^(FFmpegSession *session) {\n                    ReturnCode *returnCode = [session getReturnCode];\n                    dispatch_async(dispatch_get_main_queue(), ^(void) {\n                        if ([ReturnCode isSuccess:returnCode]) {\n                            if (!([BHTManager DirectSave])) {\n                                [hud dismiss];\n                                [BHTManager showSaveVC:newFilePath];\n                            } else {\n                                [BHTManager save:newFilePath];\n                            }\n                        } else {\n                            [hud dismiss];\n                        }\n                    });\n                }];\n            }];\n            [actions addObject:downloadOption];\n        }\n    }\n    \n    TFNMenuSheetViewController *alert = [[objc_getClass(\"TFNMenuSheetViewController\") alloc] initWithActionItems:[NSArray arrayWithArray:actions]];\n    return alert;\n}\n+ (BOOL)DownloadingVideos {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"dw_v\"];\n}\n+ (BOOL)DirectSave {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"direct_save\"];\n}\n+ (BOOL)LikeConfirm {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"like_con\"];\n}\n+ (BOOL)TweetConfirm {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"tweet_con\"];\n}\n+ (BOOL)FollowConfirm {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"follow_con\"];\n}\n+ (BOOL)HidePromoted {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"hide_promoted\"];\n}\n+ (BOOL)HideTopics {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"hide_topics\"];\n}\n+ (BOOL)DisableVODCaptions {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"dis_VODCaptions\"];\n}\n+ (BOOL)UndoTweet {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"undo_tweet\"];\n}\n+ (BOOL)NoHistory {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"no_his\"];\n}\n+ (BOOL)BioTranslate {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"bio_translate\"];\n}\n+ (BOOL)Padlock {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"padlock\"];\n}\n+ (BOOL)OldStyle {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"old_style\"];\n}\n+ (BOOL)changeFont {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"en_font\"];\n}\n+ (BOOL)FLEX {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"flex_twitter\"];\n}\n+ (BOOL)autoHighestLoad {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"autoHighestLoad\"];\n}\n+ (BOOL)disableSensitiveTweetWarnings {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"disableSensitiveTweetWarnings\"];\n}\n+ (BOOL)showScrollIndicator {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"showScollIndicator\"];\n}\n+ (BOOL)CopyProfileInfo {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"CopyProfileInfo\"];\n}\n+ (BOOL)tweetToImage {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"TweetToImage\"];\n}\n+ (BOOL)hideSpacesBar {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"hide_spaces\"];\n}\n+ (BOOL)disableRTL {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"dis_rtl\"];\n}\n+ (BOOL)alwaysOpenSafari {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"openInBrowser\"];\n}\n+ (BOOL)hideWhoToFollow {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"hide_who_to_follow\"];\n}\n+ (BOOL)hideTopicsToFollow {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"hide_topics_to_follow\"];\n}\n+ (BOOL)hideViewCount {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"hide_view_count\"];\n}\n+ (BOOL)hidePremiumOffer {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"hide_premium_offer\"];\n}\n+ (BOOL)hideTrendVideos {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"hide_trend_videos\"];\n}\n+ (BOOL)forceTweetFullFrame {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"force_tweet_full_frame\"];\n}\n+ (BOOL)stripTrackingParams {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"strip_tracking_params\"];\n}\n+ (BOOL)alwaysFollowingPage {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"always_following_page\"];\n}\n+ (BOOL)stopHidingTabBar {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"no_tab_bar_hiding\"];\n}\n+ (BOOL)changeBackground {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"change_msg_background\"];\n}\n+ (bool)backgroundImage {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"background_image\"];\n}\n+ (BOOL)hideBookmarkButton {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"hide_bookmark_button\"];\n}\n+ (BOOL)customVoice {\n    return [[NSUserDefaults standardUserDefaults] boolForKey:@\"custom_voice_upload\"];\n}\n+ (UIViewController *)BHTSettingsWithAccount:(TFNTwitterAccount *)twAccount {\n    SettingsViewController *pref = [[SettingsViewController alloc] initWithTwitterAccount:twAccount];\n    [pref.navigationItem setTitleView:[objc_getClass(\"TFNTitleView\") titleViewWithTitle:@\"BHTwitter\" subtitle:twAccount.displayUsername]];\n    return pref;\n}\n\n// https://stackoverflow.com/a/45356575/9910699\n+ (BOOL)doesContainDigitsOnly:(NSString *)string {\n    NSCharacterSet *nonDigits = [[NSCharacterSet decimalDigitCharacterSet] invertedSet];\n\n    BOOL containsDigitsOnly = [string rangeOfCharacterFromSet:nonDigits].location == NSNotFound;\n\n    return containsDigitsOnly;\n}\n\n+ (BOOL)doesContainNonDigitsOnly:(NSString *)string {\n    NSCharacterSet *digits = [NSCharacterSet decimalDigitCharacterSet];\n\n    BOOL containsNonDigitsOnly = [string rangeOfCharacterFromSet:digits].location == NSNotFound;\n\n    return containsNonDigitsOnly;\n}\n\n@end\n\n"
        },
        {
          "name": "BHTwitter.plist",
          "type": "blob",
          "size": 0.0546875,
          "content": "{ Filter = { Bundles = ( \"com.atebits.Tweetie2\" ); }; }\n"
        },
        {
          "name": "Colours",
          "type": "tree",
          "content": null
        },
        {
          "name": "CustomTabBar",
          "type": "tree",
          "content": null
        },
        {
          "name": "JGProgressHUD",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.033203125,
          "content": "ARCHS = arm64\nTARGET := iphone:clang:latest:14.0\nINSTALL_TARGET_PROCESSES = Twitter\ninclude $(THEOS)/makefiles/common.mk\n\nTWEAK_NAME = BHTwitter\n\nBHTwitter_FILES = Tweak.x $(wildcard *.m BHDownload/*.m BHTBundle/*.m Colours/*.m JGProgressHUD/*.m SAMKeychain/*.m AppIcon/*.m CustomTabBar/*.m ThemeColor/*.m)\nBHTwitter_FRAMEWORKS = UIKit Foundation AVFoundation AVKit CoreMotion GameController VideoToolbox Accelerate CoreMedia CoreImage CoreGraphics ImageIO Photos CoreServices SystemConfiguration SafariServices Security QuartzCore WebKit SceneKit\nBHTwitter_PRIVATE_FRAMEWORKS = Preferences\nBHTwitter_EXTRA_FRAMEWORKS = Cephei CepheiPrefs CepheiUI\nBHTwitter_OBJ_FILES = $(shell find lib -name '*.a')\nBHTwitter_LIBRARIES = sqlite3 bz2 c++ iconv z\nBHTwitter_CFLAGS = -fobjc-arc -Wno-deprecated-declarations -Wno-nullability-completeness -Wno-unused-function -Wno-unused-property-ivar -Wno-error\n\ninclude $(THEOS_MAKE_PATH)/tweak.mk\n\nifdef SIDELOADED\nSUBPROJECTS += libflex keychainfix\nelse\nSUBPROJECTS += libflex\nendif\n\ninclude $(THEOS_MAKE_PATH)/aggregate.mk\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.70703125,
          "content": "# BHTwitter\n- Awesome tweak for Twitter\n\n# Features\n- Download Videos (even if account private).\n- Custom Tab Bar\n- No history feature.\n- Hide topics tweet feature.\n- Disable video layer caption.\n- Padlock.\n- Font changer.\n- Enable the new UI of DM search.\n- Auto load photos in highest quality feature.\n- Undo tweet feature.\n- Theme (like Twitter Blue).\n- App icon changer\n- Twitter Circle feature.\n- Copying profile information feature.\n- Save tweet as an image.\n- Hide spaces bar.\n- Disable RTL.\n- Always open in Safari.\n- Translate bio.\n- Disable new tweet style (A.K.A edge to edge tweet)\n- Enable voice tweet and voice message in DM.\n- Hide promoted tweet from the timeline.\n- Confirm alert when hit the tweet button.\n- Confirm alert when hit like button.\n- Confirm alert when hit follow button.\n- FLEX for debugging.\n\n| | | |\n|:-------------------------:|:-------------------------:|:-------------------------:|\n|<img width=\"1604\" alt=\"screen shot 2017-08-07 at 12 18 15 pm\" src=\"1.png\"> |  <img width=\"1604\" alt=\"screen shot 2017-08-07 at 12 18 15 pm\" src=\"2.png\">|<img width=\"1604\" alt=\"screen shot 2017-08-07 at 12 18 15 pm\" src=\"3.png\">|\n|<img width=\"1604\" alt=\"screen shot 2017-08-07 at 12 18 15 pm\" src=\"4.png\">  |\n\n# How to build the project\n\n## Local\n\n- install [Theos](https://github.com/theos/theos)\n- install [cyan](https://github.com/asdfzxcvbn/pyzule-rw) if you want to build for sideload or TrollStore\n\n- Clone the BHTwitter project repository:\n```bash\ngit clone --recursive https://github.com/BandarHL/BHTwitter\ncd BHTwitter\n```\n- Make the script executable:\n```bash\nchmod +x ./build.sh\n```\n- Run the script with the desired options:\n```bash\n./build.sh [OPTIONS]\n```\n- Replace [OPTIONS] with one of the following:\n\n```\n--sideloaded: Build BHTwitter project for sideloaded deployment.\n--rootless: Build BHTwitter project for rootless deployment.\n--trollstore: Build BHTwitter project for TrollStore deployment.\nNo option: Build BHTwitter project for rootfull deployment.\n```\n\n## Using GitHub Actions\n\n- Fork this repository.\n- Open \"Actions\" tab on your fork, and press \"I understand my workflows, go ahead and enable them\" to proceed.\n- Select \"Build and Release BHTwitter\" workflow.\n- Press \"Run workflow\" menu, and enter parameters in the popup that appears.\n  - Don't forget to choose deployment format (`rootfull`, `rootless`, `sideloaded`, `trollstore`).\n  - For `sideloaded` and `trollstore` builds, a valid URL of decrypted IPA is required. For `rootfull` and `rootless` builds, enter any value (it won't be used).\n  - For other parameters, defaults are usually sufficient.\n- Press \"Run workflow\" button, and after a while you should see build artifacts on \"Releases\" page.\n\n# Example Usages\n## Build for Sideloaded Deployment\n- Download an IPA file for X or Twitter from AppDB or decrypt it by your self.\n- Then rename the IPA file to `com.atebits.Tweetie2.ipa` and move it to `packages` folder.\n```bash\n./build.sh --sideloaded\n```\n- After the build we'll find `BHTwitter-sideloaded.ipa` inside `packages` folder.\n\n## Build for TrollStore Deployment\n- Download an IPA file for X or Twitter from AppDB or decrypt it by your self.\n- Then rename the IPA file to `com.atebits.Tweetie2.ipa` and move it to `packages` folder.\n```bash\n./build.sh --trollstore\n```\n- After the build we'll find `BHTwitter-trollstore.tipa` inside `packages` folder.\n\n\n## Build for Rootless Deployment\n- Just run the build command with rootless flag.\n```bash\n./build.sh --rootless\n```\n- After the build we'll find `com.bandarhl.bhtwitter_4.2_iphoneos-arm64.deb` inside `packages` folder.\n\n\n## Build for Rootfull Deployment\n- Just run the build command without any flag.\n```bash\n./build.sh\n```\n- After the build we'll find `com.bandarhl.bhtwitter_4.2_iphoneos-arm.deb` inside `packages` folder.\n"
        },
        {
          "name": "SAMKeychain",
          "type": "tree",
          "content": null
        },
        {
          "name": "SettingsViewController.h",
          "type": "blob",
          "size": 0.5771484375,
          "content": "//\n//  SettingsViewController.h\n//  FlexCrack\n//\n//  Created by BandarHelal on 25/11/2021.\n//\n\n#import \"TWHeaders.h\"\n#import <CepheiPrefs/CepheiPrefs.h>\n#import <Cephei/HBPreferences.h>\n\ntypedef NS_ENUM(NSInteger, DynamicSpecifierOperatorType) {\n  EqualToOperatorType,\n  NotEqualToOperatorType,\n  GreaterThanOperatorType,\n  LessThanOperatorType,\n};\n\n@interface SettingsViewController : HBListController\n- (instancetype)initWithTwitterAccount:(TFNTwitterAccount *)account;\n@end\n\n@interface BHButtonTableViewCell : HBTintedTableCell\n@end\n\n@interface BHSwitchTableCell : PSSwitchTableCell\n@end\n"
        },
        {
          "name": "SettingsViewController.m",
          "type": "blob",
          "size": 41.0654296875,
          "content": "//\n//  SettingsViewController.m\n//  BHTwitter\n//\n//  Created by BandarHelal\n//\n\n#import \"SettingsViewController.h\"\n#import \"BHTBundle/BHTBundle.h\"\n#import \"Colours/Colours.h\"\n#import \"AppIcon/BHAppIconViewController.h\"\n#import \"ThemeColor/BHColorThemeViewController.h\"\n#import \"CustomTabBar/BHCustomTabBarViewController.h\"\n\n@interface SettingsViewController () <UIFontPickerViewControllerDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, UIColorPickerViewControllerDelegate>\n@property (nonatomic, strong) TFNTwitterAccount *twAccount;\n@property (nonatomic, assign) BOOL hasDynamicSpecifiers;\n@property (nonatomic, retain) NSMutableDictionary *dynamicSpecifiers;\n@end\n\n@implementation SettingsViewController\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        [self setupAppearance];\n    }\n    return self;\n}\n- (instancetype)initWithTwitterAccount:(TFNTwitterAccount *)account {\n    self = [super init];\n    if (self) {\n        self.twAccount = account;\n        [self setupAppearance];\n        [self.navigationController.navigationBar setPrefersLargeTitles:false];\n        [[NSUserDefaults standardUserDefaults] addObserver:self forKeyPath:@\"bh_color_theme_selectedColor\" options:NSKeyValueObservingOptionNew context:nil];\n        [[NSUserDefaults standardUserDefaults] addObserver:self forKeyPath:@\"T1ColorSettingsPrimaryColorOptionKey\" options:NSKeyValueObservingOptionNew context:nil];\n    }\n    return self;\n}\n- (void)dealloc {\n    [[NSUserDefaults standardUserDefaults] removeObserver:self forKeyPath:@\"bh_color_theme_selectedColor\"];\n    [[NSUserDefaults standardUserDefaults] removeObserver:self forKeyPath:@\"T1ColorSettingsPrimaryColorOptionKey\"];\n}\n\n- (void)setupAppearance {\n    TAEColorSettings *colorSettings = [objc_getClass(\"TAEColorSettings\") sharedSettings];\n    UIColor *primaryColor;\n    \n    if ([[NSUserDefaults standardUserDefaults] objectForKey:@\"bh_color_theme_selectedColor\"]) {\n        primaryColor = [[[colorSettings currentColorPalette] colorPalette] primaryColorForOption:[[NSUserDefaults standardUserDefaults] integerForKey:@\"bh_color_theme_selectedColor\"]];\n    } else if ([[NSUserDefaults standardUserDefaults] objectForKey:@\"T1ColorSettingsPrimaryColorOptionKey\"]) {\n        primaryColor = [[[colorSettings currentColorPalette] colorPalette] primaryColorForOption:[[NSUserDefaults standardUserDefaults] integerForKey:@\"T1ColorSettingsPrimaryColorOptionKey\"]];\n    } else {\n        primaryColor = nil;\n    }\n    \n    HBAppearanceSettings *appearanceSettings = [[HBAppearanceSettings alloc] init];\n    appearanceSettings.tintColor = primaryColor;\n    appearanceSettings.largeTitleStyle = HBAppearanceSettingsLargeTitleStyleNever;\n    self.hb_appearanceSettings = appearanceSettings;\n}\n\n- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSKeyValueChangeKey,id> *)change context:(void *)context {\n    if ([keyPath isEqualToString:@\"bh_color_theme_selectedColor\"] || [keyPath isEqualToString:@\"T1ColorSettingsPrimaryColorOptionKey\"]) {\n        [self setupAppearance];\n    }\n}\n\n- (UITableViewStyle)tableViewStyle {\n    return UITableViewStyleInsetGrouped;\n}\n\n- (PSSpecifier *)newSectionWithTitle:(NSString *)header footer:(NSString *)footer {\n    PSSpecifier *section = [PSSpecifier preferenceSpecifierNamed:header target:self set:nil get:nil detail:nil cell:PSGroupCell edit:nil];\n    if (footer != nil) {\n        [section setProperty:footer forKey:@\"footerText\"];\n    }\n    return section;\n}\n- (PSSpecifier *)newSwitchCellWithTitle:(NSString *)titleText detailTitle:(NSString *)detailText key:(NSString *)keyText defaultValue:(BOOL)defValue changeAction:(SEL)changeAction {\n    PSSpecifier *switchCell = [PSSpecifier preferenceSpecifierNamed:titleText target:self set:@selector(setPreferenceValue:specifier:) get:@selector(readPreferenceValue:) detail:nil cell:PSSwitchCell edit:nil];\n    \n    [switchCell setProperty:keyText forKey:@\"key\"];\n    [switchCell setProperty:keyText forKey:@\"id\"];\n    [switchCell setProperty:@YES forKey:@\"big\"];\n    [switchCell setProperty:BHSwitchTableCell.class forKey:@\"cellClass\"];\n    [switchCell setProperty:NSBundle.mainBundle.bundleIdentifier forKey:@\"defaults\"];\n    [switchCell setProperty:@(defValue) forKey:@\"default\"];\n    [switchCell setProperty:NSStringFromSelector(changeAction) forKey:@\"switchAction\"];\n    if (detailText != nil) {\n        [switchCell setProperty:detailText forKey:@\"subtitle\"];\n    }\n    return switchCell;\n}\n- (PSSpecifier *)newButtonCellWithTitle:(NSString *)titleText detailTitle:(NSString *)detailText dynamicRule:(NSString *)rule action:(SEL)action {\n    PSSpecifier *buttonCell = [PSSpecifier preferenceSpecifierNamed:titleText target:self set:@selector(setPreferenceValue:specifier:) get:@selector(readPreferenceValue:) detail:nil cell:PSButtonCell edit:nil];\n    \n    [buttonCell setButtonAction:action];\n    [buttonCell setProperty:@YES forKey:@\"big\"];\n    [buttonCell setProperty:BHButtonTableViewCell.class forKey:@\"cellClass\"];\n    if (detailText != nil ){\n        [buttonCell setProperty:detailText forKey:@\"subtitle\"];\n    }\n    if (rule != nil) {\n        [buttonCell setProperty:@44 forKey:@\"height\"];\n        [buttonCell setProperty:rule forKey:@\"dynamicRule\"];\n    }\n    return buttonCell;\n}\n- (PSSpecifier *)newHBLinkCellWithTitle:(NSString *)titleText detailTitle:(NSString *)detailText url:(NSString *)url {\n    PSSpecifier *HBLinkCell = [PSSpecifier preferenceSpecifierNamed:titleText target:self set:@selector(setPreferenceValue:specifier:) get:@selector(readPreferenceValue:) detail:nil cell:PSButtonCell edit:nil];\n    \n    [HBLinkCell setButtonAction:@selector(hb_openURL:)];\n    [HBLinkCell setProperty:HBLinkTableCell.class forKey:@\"cellClass\"];\n    [HBLinkCell setProperty:url forKey:@\"url\"];\n    if (detailText != nil) {\n        [HBLinkCell setProperty:detailText forKey:@\"subtitle\"];\n    }\n    return HBLinkCell;\n}\n- (PSSpecifier *)newHBTwitterCellWithTitle:(NSString *)titleText twitterUsername:(NSString *)user customAvatarURL:(NSString *)avatarURL {\n    PSSpecifier *TwitterCell = [PSSpecifier preferenceSpecifierNamed:titleText target:self set:@selector(setPreferenceValue:specifier:) get:@selector(readPreferenceValue:) detail:nil cell:1 edit:nil];\n    \n    [TwitterCell setButtonAction:@selector(hb_openURL:)];\n    [TwitterCell setProperty:HBTwitterCell.class forKey:@\"cellClass\"];\n    [TwitterCell setProperty:user forKey:@\"user\"];\n    [TwitterCell setProperty:@YES forKey:@\"big\"];\n    [TwitterCell setProperty:@56 forKey:@\"height\"];\n    [TwitterCell setProperty:avatarURL forKey:@\"iconURL\"];\n    return TwitterCell;\n}\n- (NSArray *)specifiers {\n    if (!_specifiers) {\n        \n        PSSpecifier *mainSection = [self newSectionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"MAIN_SECTION_HEADER_TITLE\"] footer:nil];\n        PSSpecifier *twitterBlueSection = [self newSectionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"TWITTER_BLUE_SECTION_HEADER_TITLE\"] footer:[[BHTBundle sharedBundle] localizedStringForKey:@\"TWITTER_BLUE_SECTION_FOOTER_TITLE\"]];\n        PSSpecifier *layoutSection = [self newSectionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"LAYOUT_CUS_SECTION_HEADER_TITLE\"] footer:[[BHTBundle sharedBundle] localizedStringForKey:@\"LAYOUT_CUS_SECTION_FOOTER_TITLE\"]];\n        PSSpecifier *debug = [self newSectionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"DEBUG_SECTION_HEADER_TITLE\"] footer:nil];\n        PSSpecifier *legalSection = [self newSectionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"LEGAL_SECTION_HEADER_TITLE\"] footer:nil];\n        PSSpecifier *developer = [self newSectionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"DEVELOPER_SECTION_HEADER_TITLE\"] footer:[NSString stringWithFormat:@\"BHTwitter v%@\", [[BHTBundle sharedBundle] BHTwitterVersion]]];\n        \n        PSSpecifier *download = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"DOWNLOAD_VIDEOS_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"DOWNLOAD_VIDEOS_OPTION_DETAIL_TITLE\"] key:@\"dw_v\" defaultValue:true changeAction:nil];\n        \n        PSSpecifier *directSave = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"DIRECT_SAVE_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"DIRECT_SAVE_OPTION_DETAIL_TITLE\"] key:@\"direct_save\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *hideAds = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_ADS_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_ADS_OPTION_DETAIL_TITLE\"] key:@\"hide_promoted\" defaultValue:true changeAction:nil];\n        \n        PSSpecifier *customVoice = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"UPLOAD_CUSTOM_VOICE_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"UPLOAD_CUSTOM_VOICE_OPTION_DETAIL_TITLE\"] key:@\"custom_voice_upload\" defaultValue:true changeAction:nil];\n\n        PSSpecifier *hideTopics = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_TOPICS_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_TOPICS_OPTION_DETAIL_TITLE\"] key:@\"hide_topics\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *hideWhoToFollow = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_WHO_FOLLOW_OPTION\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_WHO_FOLLOW_OPTION_DETAIL_TITLE\"] key:@\"hide_who_to_follow\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *hideTopicsToFollow = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_TOPICS_TO_FOLLOW_OPTION\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_TOPICS_TO_FOLLOW_OPTION_DETAIL_TITLE\"] key:@\"hide_topics_to_follow\" defaultValue:false changeAction:nil];\n\n        PSSpecifier *hidePremiumOffer = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_PREMIUM_OFFER_OPTION\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_PREMIUM_OFFER_OPTION_DETAIL_TITLE\"] key:@\"hide_premium_offer\" defaultValue:false changeAction:nil];\n\n        PSSpecifier *hideTrendVideos = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_TREND_VIDEOS_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_TREND_VIDEOS_OPTION_DETAIL_TITLE\"] key:@\"hide_trend_videos\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *videoLayerCaption = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"DISABLE_VIDEO_LAYER_CAPTIONS_OPTION_TITLE\"] detailTitle:nil key:@\"dis_VODCaptions\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *noHistory = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"NO_HISTORY_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"NO_HISTORY_OPTION_DETAIL_TITLE\"] key:@\"no_his\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *bioTranslate = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"BIO_TRANSALTE_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"BIO_TRANSALTE_OPTION_DETAIL_TITLE\"] key:@\"bio_translate\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *likeConfrim = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"LIKE_CONFIRM_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"LIKE_CONFIRM_OPTION_DETAIL_TITLE\"] key:@\"like_con\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *tweetConfirm = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"TWEET_CONFIRM_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"TWEET_CONFIRM_OPTION_DETAIL_TITLE\"] key:@\"tweet_con\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *followConfirm = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"FOLLOW_CONFIRM_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"FOLLOW_CONFIRM_OPTION_DETAIL_TITLE\"] key:@\"follow_con\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *padLock = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"PADLOCK_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"PADLOCK_OPTION_DETAIL_TITLE\"] key:@\"padlock\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *autoHighestLoad = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"AUTO_HIGHEST_LOAD_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"AUTO_HIGHEST_LOAD_OPTION_DETAIL_TITLE\"] key:@\"autoHighestLoad\" defaultValue:true changeAction:nil];\n        \n        PSSpecifier *disableSensitiveTweetWarnings = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"DISABLE_SENSITIVE_TWEET_WARNINGS_OPTION_TITLE\"] detailTitle:nil key:@\"disableSensitiveTweetWarnings\" defaultValue:true changeAction:nil];\n\n        PSSpecifier *copyProfileInfo = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"COPY_PROFILE_INFO_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"COPY_PROFILE_INFO_OPTION_DETAIL_TITLE\"] key:@\"CopyProfileInfo\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *tweetToImage = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"TWEET_TO_IMAGE_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"TWEET_TO_IMAGE_OPTION_DETAIL_TITLE\"] key:@\"TweetToImage\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *hideSpace = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_SPACE_OPTION_TITLE\"] detailTitle:nil key:@\"hide_spaces\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *disableRTL = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"DISABLE_RTL_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"DISABLE_RTL_OPTION_DETAIL_TITLE\"] key:@\"dis_rtl\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *alwaysOpenSafari = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"ALWAYS_OPEN_SAFARI_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"ALWAYS_OPEN_SAFARI_OPTION_DETAIL_TITLE\"] key:@\"openInBrowser\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *stripTrackingParams = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"STRIP_URL_TRACKING_PARAMETERS_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"STRIP_URL_TRACKING_PARAMETERS_DETAIL_TITLE\"] key:@\"strip_tracking_params\" defaultValue:false changeAction:nil];\n\n        PSSpecifier *urlHost = [self newButtonCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"SELECT_URL_HOST_AFTER_COPY_OPTION_TITLE\"] detailTitle:[[NSUserDefaults standardUserDefaults] objectForKey:@\"tweet_url_host\"] dynamicRule:@\"strip_tracking_params, ==, 0\" action:@selector(showURLHostSelectionViewController:)];\n\n        // Twitter bule section\n        PSSpecifier *undoTweet = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"UNDO_TWEET_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"UNDO_TWEET_OPTION_DETAIL_TITLE\"] key:@\"undo_tweet\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *appTheme = [self newButtonCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"THEME_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"THEME_OPTION_DETAIL_TITLE\"] dynamicRule:nil action:@selector(showThemeViewController:)];\n        \n        PSSpecifier *appIcon = [self newButtonCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"APP_ICON_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"APP_ICON_DETAIL_TITLE\"] dynamicRule:nil action:@selector(showBHAppIconViewController:)];\n        \n        PSSpecifier *customTabBarVC = [self newButtonCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"CUSTOM_TAB_BAR_OPTION_TITLE\"] detailTitle:nil dynamicRule:nil action:@selector(showCustomTabBarVC:)];\n        \n        // Layout customization section\n        PSSpecifier *customDirectBackgroundView = [self newButtonCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"CUSTOM_DIRECT_BACKGROUND_VIEW_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"CUSTOM_DIRECT_BACKGROUND_VIEW_DETAIL_TITLE\"] dynamicRule:nil action:@selector(showCustomBackgroundViewViewController:)];\n        \n        PSSpecifier *origTweetStyle = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"ORIG_TWEET_STYLE_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"ORIG_TWEET_STYLE_OPTION_DETAIL_TITLE\"] key:@\"old_style\" defaultValue:true changeAction:nil];\n        \n        PSSpecifier *stopHidingTabBar = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"STOP_HIDING_TAB_BAR_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"STOP_HIDING_TAB_BAR_DETAIL_TITLE\"] key:@\"no_tab_bar_hiding\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *hideViewCount = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_VIEW_COUNT_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_VIEW_COUNT_OPTION_DETAIL_TITLE\"] key:@\"hide_view_count\" defaultValue:false changeAction:nil];\n\n        PSSpecifier *hideBookmarkButton = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_MARKBOOK_BUTTON_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"HIDE_MARKBOOK_BUTTON_OPTION_DETAIL_TITLE\"] key:@\"hide_bookmark_button\" defaultValue:false changeAction:nil];\n\n        PSSpecifier *forceFullFrame = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"FORCE_TWEET_FULL_FRAME_TITLE\"] detailTitle:nil key:@\"force_tweet_full_frame\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *showScrollIndicator = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"SHOW_SCOLL_INDICATOR_OPTION_TITLE\"] detailTitle:nil key:@\"showScollIndicator\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *font = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"FONT_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"FONT_OPTION_DETAIL_TITLE\"] key:@\"en_font\" defaultValue:false changeAction:nil];\n        \n        PSSpecifier *regularFontsPicker = [self newButtonCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"REQULAR_FONTS_PICKER_OPTION_TITLE\"] detailTitle:[[NSUserDefaults standardUserDefaults] objectForKey:@\"bhtwitter_font_1\"] dynamicRule:@\"en_font, ==, 0\" action:@selector(showRegularFontPicker:)];\n        \n        PSSpecifier *boldFontsPicker = [self newButtonCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"BOLD_FONTS_PICKER_OPTION_TITLE\"] detailTitle:[[NSUserDefaults standardUserDefaults] objectForKey:@\"bhtwitter_font_2\"] dynamicRule:@\"en_font, ==, 0\" action:@selector(showBoldFontPicker:)];\n        \n        // debug section\n        PSSpecifier *flex = [self newSwitchCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"FLEX_OPTION_TITLE\"] detailTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"FLEX_OPTION_DETAIL_TITLE\"] key:@\"flex_twitter\" defaultValue:false changeAction:@selector(FLEXAction:)];\n        \n        // legal section\n        PSSpecifier *acknowledgements = [self newButtonCellWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"LEGAL_BUTTON_TITLE\"] detailTitle:nil dynamicRule:nil action:@selector(showAcknowledgements:)];\n        \n        // dvelopers section\n        PSSpecifier *bandarHL = [self newHBTwitterCellWithTitle:@\"BandarHelal\" twitterUsername:@\"BandarHL\" customAvatarURL:@\"https://unavatar.io/twitter/BandarHL\"];\n        PSSpecifier *tipJar = [self newHBLinkCellWithTitle:@\"Tip Jar\" detailTitle:@\"Donate Via Paypal\" url:@\"https://www.paypal.me/BandarHL\"];\n        PSSpecifier *buymecoffee = [self newHBLinkCellWithTitle:@\"Buy Me A Coffee\" detailTitle:nil url:@\"https://www.buymeacoffee.com/bandarHL\"];\n        PSSpecifier *sourceCode = [self newHBLinkCellWithTitle:@\"BHTwitter\" detailTitle:@\"Code source of BHTwitter\" url:@\"https://github.com/BandarHL/BHTwitter/\"];\n        \n        _specifiers = [NSMutableArray arrayWithArray:@[\n            \n            mainSection, // 0\n            download,\n            hideAds,\n            customVoice,\n            hideTopics,\n            hideWhoToFollow,\n            hideTopicsToFollow,\n            hidePremiumOffer,\n            hideTrendVideos,\n            videoLayerCaption,\n            directSave,\n            noHistory,\n            bioTranslate,\n            likeConfrim,\n            tweetConfirm,\n            followConfirm,\n            padLock,\n            autoHighestLoad,\n            disableSensitiveTweetWarnings,\n            copyProfileInfo,\n            tweetToImage,\n            hideSpace,\n            disableRTL,\n            alwaysOpenSafari,\n            stripTrackingParams,\n            urlHost,\n            \n            twitterBlueSection, // 1\n            undoTweet,\n            appTheme,\n            appIcon,\n            customTabBarVC,\n            \n            layoutSection, // 2\n            customDirectBackgroundView,\n            origTweetStyle,\n            stopHidingTabBar,\n            hideViewCount,\n            hideBookmarkButton,\n            forceFullFrame,\n            showScrollIndicator,\n            font,\n            regularFontsPicker,\n            boldFontsPicker,\n            \n            legalSection, // 3\n            acknowledgements,\n            \n            debug, // 4\n            flex,\n            \n            developer, // 5\n            bandarHL,\n            tipJar,\n            buymecoffee,\n            sourceCode\n        ]];\n        \n        [self collectDynamicSpecifiersFromArray:_specifiers];\n    }\n    \n    return _specifiers;\n}\n- (void)reloadSpecifiers {\n    [super reloadSpecifiers];\n    \n    [self collectDynamicSpecifiersFromArray:self.specifiers];\n}\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n    if (self.hasDynamicSpecifiers) {\n        PSSpecifier *dynamicSpecifier = [self specifierAtIndexPath:indexPath];\n        BOOL __block shouldHide = false;\n        \n        [self.dynamicSpecifiers enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {\n            NSMutableArray *specifiers = obj;\n            if ([specifiers containsObject:dynamicSpecifier]) {\n                shouldHide = [self shouldHideSpecifier:dynamicSpecifier];\n                \n                UITableViewCell *specifierCell = [dynamicSpecifier propertyForKey:PSTableCellKey];\n                specifierCell.clipsToBounds = shouldHide;\n            }\n        }];\n        if (shouldHide) {\n            return 0;\n        }\n    }\n    \n    return UITableViewAutomaticDimension;\n}\n\n- (void)collectDynamicSpecifiersFromArray:(NSArray *)array {\n    if (!self.dynamicSpecifiers) {\n        self.dynamicSpecifiers = [NSMutableDictionary new];\n        \n    } else {\n        [self.dynamicSpecifiers removeAllObjects];\n    }\n    \n    for (PSSpecifier *specifier in array) {\n        NSString *dynamicSpecifierRule = [specifier propertyForKey:@\"dynamicRule\"];\n        \n        if (dynamicSpecifierRule.length > 0) {\n            NSArray *ruleComponents = [dynamicSpecifierRule componentsSeparatedByString:@\", \"];\n            \n            if (ruleComponents.count == 3) {\n                NSString *opposingSpecifierID = [ruleComponents objectAtIndex:0];\n                if ([self.dynamicSpecifiers objectForKey:opposingSpecifierID]) {\n                    NSMutableArray *specifiers = [[self.dynamicSpecifiers objectForKey:opposingSpecifierID] mutableCopy];\n                    [specifiers addObject:specifier];\n                    \n                    \n                    [self.dynamicSpecifiers removeObjectForKey:opposingSpecifierID];\n                    [self.dynamicSpecifiers setObject:specifiers forKey:opposingSpecifierID];\n                } else {\n                    [self.dynamicSpecifiers setObject:[NSMutableArray arrayWithArray:@[specifier]] forKey:opposingSpecifierID];\n                }\n                \n            } else {\n                [NSException raise:NSInternalInconsistencyException format:@\"dynamicRule key requires three components (Specifier ID, Comparator, Value To Compare To). You have %ld of 3 (%@) for specifier '%@'.\", ruleComponents.count, dynamicSpecifierRule, [specifier propertyForKey:PSTitleKey]];\n            }\n        }\n    }\n    \n    self.hasDynamicSpecifiers = (self.dynamicSpecifiers.count > 0);\n}\n- (DynamicSpecifierOperatorType)operatorTypeForString:(NSString *)string {\n    NSDictionary *operatorValues = @{ @\"==\" : @(EqualToOperatorType), @\"!=\" : @(NotEqualToOperatorType), @\">\" : @(GreaterThanOperatorType), @\"<\" : @(LessThanOperatorType) };\n    return [operatorValues[string] intValue];\n}\n- (BOOL)shouldHideSpecifier:(PSSpecifier *)specifier {\n    if (specifier) {\n        NSString *dynamicSpecifierRule = [specifier propertyForKey:@\"dynamicRule\"];\n        NSArray *ruleComponents = [dynamicSpecifierRule componentsSeparatedByString:@\", \"];\n        \n        PSSpecifier *opposingSpecifier = [self specifierForID:[ruleComponents objectAtIndex:0]];\n        id opposingValue = [self readPreferenceValue:opposingSpecifier];\n        id requiredValue = [ruleComponents objectAtIndex:2];\n        \n        if ([opposingValue isKindOfClass:NSNumber.class]) {\n            DynamicSpecifierOperatorType operatorType = [self operatorTypeForString:[ruleComponents objectAtIndex:1]];\n            \n            switch (operatorType) {\n                case EqualToOperatorType:\n                    return ([opposingValue intValue] == [requiredValue intValue]);\n                    break;\n                    \n                case NotEqualToOperatorType:\n                    return ([opposingValue intValue] != [requiredValue intValue]);\n                    break;\n                    \n                case GreaterThanOperatorType:\n                    return ([opposingValue intValue] > [requiredValue intValue]);\n                    break;\n                    \n                case LessThanOperatorType:\n                    return ([opposingValue intValue] < [requiredValue intValue]);\n                    break;\n            }\n        }\n        \n        if ([opposingValue isKindOfClass:NSString.class]) {\n            return [opposingValue isEqualToString:requiredValue];\n        }\n        \n        if ([opposingValue isKindOfClass:NSArray.class]) {\n            return [opposingValue containsObject:requiredValue];\n        }\n    }\n    \n    return NO;\n}\n\n- (void)setPreferenceValue:(id)value specifier:(PSSpecifier *)specifier {\n    NSUserDefaults *Prefs = [NSUserDefaults standardUserDefaults];\n    [Prefs setValue:value forKey:[specifier identifier]];\n    \n    if (self.hasDynamicSpecifiers) {\n        NSString *specifierID = [specifier propertyForKey:PSIDKey];\n        PSSpecifier *dynamicSpecifier = [self.dynamicSpecifiers objectForKey:specifierID];\n        \n        if (dynamicSpecifier) {\n            [self.table beginUpdates];\n            [self.table endUpdates];\n        }\n    }\n}\n- (id)readPreferenceValue:(PSSpecifier *)specifier {\n    NSUserDefaults *Prefs = [NSUserDefaults standardUserDefaults];\n    return [Prefs valueForKey:[specifier identifier]]?:[specifier properties][@\"default\"];\n}\n\n\n- (void)fontPickerViewControllerDidPickFont:(UIFontPickerViewController *)viewController {\n    NSString *fontName = viewController.selectedFontDescriptor.fontAttributes[UIFontDescriptorNameAttribute];\n    NSString *fontFamily = viewController.selectedFontDescriptor.fontAttributes[UIFontDescriptorFamilyAttribute];\n    \n    if (viewController.configuration.includeFaces) {\n        PSSpecifier *fontSpecifier = [self specifierForID:@\"Bold Font\"];\n        [[NSUserDefaults standardUserDefaults] setObject:fontName forKey:@\"bhtwitter_font_2\"];\n        [fontSpecifier setProperty:fontName forKey:@\"subtitle\"];\n    } else {\n        PSSpecifier *fontSpecifier = [self specifierForID:@\"Font\"];\n        [[NSUserDefaults standardUserDefaults] setObject:fontFamily forKey:@\"bhtwitter_font_1\"];\n        [fontSpecifier setProperty:fontName forKey:@\"subtitle\"];\n    }\n    [self reloadSpecifiers];\n    [viewController.navigationController popViewControllerAnimated:true];\n}\n- (void)showRegularFontPicker:(PSSpecifier *)specifier {\n    UIFontPickerViewControllerConfiguration *configuration = [[UIFontPickerViewControllerConfiguration alloc] init];\n    [configuration setFilteredTraits:UIFontDescriptorClassMask];\n    [configuration setIncludeFaces:false];\n    \n    UIFontPickerViewController *fontPicker = [[UIFontPickerViewController alloc] initWithConfiguration:configuration];\n    fontPicker.delegate = self;\n    \n    if (self.twAccount != nil) {\n        [fontPicker.navigationItem setTitleView:[objc_getClass(\"TFNTitleView\") titleViewWithTitle:@\"Choose Font\" subtitle:self.twAccount.displayUsername]];\n    }\n    [self.navigationController pushViewController:fontPicker animated:true];\n}\n- (void)showBoldFontPicker:(PSSpecifier *)specifier {\n    UIFontPickerViewControllerConfiguration *configuration = [[UIFontPickerViewControllerConfiguration alloc] init];\n    [configuration setIncludeFaces:true];\n    [configuration setFilteredTraits:UIFontDescriptorClassModernSerifs];\n    [configuration setFilteredTraits:UIFontDescriptorClassMask];\n    \n    UIFontPickerViewController *fontPicker = [[UIFontPickerViewController alloc] initWithConfiguration:configuration];\n    fontPicker.delegate = self;\n    \n    if (self.twAccount != nil) {\n        [fontPicker.navigationItem setTitleView:[objc_getClass(\"TFNTitleView\") titleViewWithTitle:@\"Choose Font\" subtitle:self.twAccount.displayUsername]];\n    }\n    [self.navigationController pushViewController:fontPicker animated:true];\n}\n- (void)showAcknowledgements:(PSSpecifier *)specifier {\n    T1RichTextFormatViewController *acknowledgementsVC = [[objc_getClass(\"T1RichTextFormatViewController\") alloc] initWithRichTextFormatDocumentPath:[[BHTBundle sharedBundle] pathForFile:@\"Acknowledgements.rtf\"].path];\n    if (self.twAccount != nil) {\n        [acknowledgementsVC.navigationItem setTitleView:[objc_getClass(\"TFNTitleView\") titleViewWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"ACKNOWLEDGEMENTS_SETTINGS_NAVIGATION_TITLE\"] subtitle:self.twAccount.displayUsername]];\n    }\n    [self.navigationController pushViewController:acknowledgementsVC animated:true];\n}\n- (void)showCustomTabBarVC:(PSSpecifier *)specifier {\n    BHCustomTabBarViewController *customTabBarVC = [[BHCustomTabBarViewController alloc] init];\n    if (self.twAccount != nil) {\n        [customTabBarVC.navigationItem setTitleView:[objc_getClass(\"TFNTitleView\") titleViewWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"CUSTOM_TAB_BAR_SETTINGS_NAVIGATION_TITLE\"] subtitle:self.twAccount.displayUsername]];\n    }\n    [self.navigationController pushViewController:customTabBarVC animated:true];\n}\n- (void)showThemeViewController:(PSSpecifier *)specifier {\n    // I create my own Color Theme ViewController for two main reasons:\n    // 1- Twitter use swift to build their view controller, so I can't hook anything on it.\n    // 2- Twitter knows you do not actually subscribe with Twitter Blue, so it keeps resting the changes and resting 'T1ColorSettingsPrimaryColorOptionKey' key, so I had to create another key to track the original one and keep sure no changes, but it still not enough to keep the new theme after relaunching app, so i had to force the changes again with new lunch.\n    BHColorThemeViewController *themeVC = [[BHColorThemeViewController alloc] init];\n    if (self.twAccount != nil) {\n        [themeVC.navigationItem setTitleView:[objc_getClass(\"TFNTitleView\") titleViewWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"THEME_SETTINGS_NAVIGATION_TITLE\"] subtitle:self.twAccount.displayUsername]];\n    }\n    [self.navigationController pushViewController:themeVC animated:true];\n}\n- (void)showBHAppIconViewController:(PSSpecifier *)specifier {\n    BHAppIconViewController *appIconVC = [[BHAppIconViewController alloc] init];\n    if (self.twAccount != nil) {\n        [appIconVC.navigationItem setTitleView:[objc_getClass(\"TFNTitleView\") titleViewWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"APP_ICON_NAV_TITLE\"] subtitle:self.twAccount.displayUsername]];\n    }\n    [self.navigationController pushViewController:appIconVC animated:true];\n}\n- (void)showURLHostSelectionViewController:(PSSpecifier *)specifier {\n    UITableViewCell *specifierCell = [specifier propertyForKey:PSTableCellKey];\n    PSSpecifier *selectionSpecifier = [self specifierForID:@\"Select URL host\"];\n\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"BHTwitter\" message:@\"plaese select what host you prefre\" preferredStyle:UIAlertControllerStyleActionSheet];\n\n    if (alert.popoverPresentationController != nil) {\n        CGFloat midX = CGRectGetMidX(specifierCell.frame);\n        CGFloat midY = CGRectGetMidY(specifierCell.frame);\n\n        alert.popoverPresentationController.sourceRect = CGRectMake(midX, midY, 0, 0);\n        alert.popoverPresentationController.sourceView = specifierCell;\n    }\n\n    UIAlertAction *xHostAction = [UIAlertAction actionWithTitle:@\"x.com\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        [[NSUserDefaults standardUserDefaults] setObject:@\"x.com\" forKey:@\"tweet_url_host\"];\n        [selectionSpecifier setProperty:@\"x.com\" forKey:@\"subtitle\"];\n        [self reloadSpecifiers];\n    }];\n    UIAlertAction *twitterHostAction = [UIAlertAction actionWithTitle:@\"twitter.com\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        [[NSUserDefaults standardUserDefaults] setObject:@\"twitter.com\" forKey:@\"tweet_url_host\"];\n        [selectionSpecifier setProperty:@\"twitter.com\" forKey:@\"subtitle\"];\n        [self reloadSpecifiers];\n    }];\n    UIAlertAction *fxHostAction = [UIAlertAction actionWithTitle:@\"fxtwitter.com\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        [[NSUserDefaults standardUserDefaults] setObject:@\"fxtwitter.com\" forKey:@\"tweet_url_host\"];\n        [selectionSpecifier setProperty:@\"fxtwitter.com\" forKey:@\"subtitle\"];\n        [self reloadSpecifiers];\n    }];\n    UIAlertAction *vxHostAction = [UIAlertAction actionWithTitle:@\"vxtwitter.com\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        [[NSUserDefaults standardUserDefaults] setObject:@\"vxtwitter.com\" forKey:@\"tweet_url_host\"];\n        [selectionSpecifier setProperty:@\"vxtwitter.com\" forKey:@\"subtitle\"];\n        [self reloadSpecifiers];\n    }];\n\n    UIAlertAction *cancel = [UIAlertAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"CANCEL_BUTTON_TITLE\"] style:UIAlertActionStyleCancel handler:nil];\n    \n    [alert addAction:xHostAction];\n    [alert addAction:twitterHostAction];\n    [alert addAction:fxHostAction];\n    [alert addAction:vxHostAction];\n    [alert addAction:cancel];\n    \n    [self presentViewController:alert animated:true completion:nil];\n}\n- (void)showCustomBackgroundViewViewController:(PSSpecifier *)specifier {\n    UITableViewCell *specifierCell = [specifier propertyForKey:PSTableCellKey];\n    \n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"BHTwitter\" message:nil preferredStyle:UIAlertControllerStyleActionSheet];\n    \n    if (alert.popoverPresentationController != nil) {\n        CGFloat midX = CGRectGetMidX(specifierCell.frame);\n        CGFloat midY = CGRectGetMidY(specifierCell.frame);\n\n        alert.popoverPresentationController.sourceRect = CGRectMake(midX, midY, 0, 0);\n        alert.popoverPresentationController.sourceView = specifierCell;\n    }\n    \n    UIAlertAction *imageAction = [UIAlertAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"CUSTOM_DIRECT_BACKGROUND_ALERT_OPTION_1\"] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        UIImagePickerController *imagePicker = [[UIImagePickerController alloc] init];\n        imagePicker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;\n        imagePicker.delegate = self;\n        [self presentViewController:imagePicker animated:YES completion:nil];\n    }];\n    \n    UIAlertAction *colorAction = [UIAlertAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"CUSTOM_DIRECT_BACKGROUND_ALERT_OPTION_2\"] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        UIColorPickerViewController *colorPicker = [[UIColorPickerViewController alloc] init];\n        colorPicker.delegate = self;\n        [self presentViewController:colorPicker animated:true completion:nil];\n    }];\n    \n    UIAlertAction *resetAction = [UIAlertAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"CUSTOM_DIRECT_BACKGROUND_ALERT_OPTION_3\"] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        [[NSUserDefaults standardUserDefaults] setBool:false forKey:@\"change_msg_background\"];\n        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"background_image\"];\n        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"background_color\"];\n    }];\n    \n    UIAlertAction *cancel = [UIAlertAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"CANCEL_BUTTON_TITLE\"] style:UIAlertActionStyleCancel handler:nil];\n    \n    [alert addAction:imageAction];\n    [alert addAction:colorAction];\n    [alert addAction:resetAction];\n    [alert addAction:cancel];\n    \n    [self presentViewController:alert animated:true completion:nil];\n}\n\n- (void)FLEXAction:(UISwitch *)sender {\n    if (sender.isOn) {\n        [[objc_getClass(\"FLEXManager\") sharedManager] showExplorer];\n    } else {\n        [[objc_getClass(\"FLEXManager\") sharedManager] hideExplorer];\n    }\n}\n\n\n- (void)colorPickerViewControllerDidSelectColor:(UIColorPickerViewController *)viewController {\n    [[NSUserDefaults standardUserDefaults] setBool:true forKey:@\"change_msg_background\"];\n    [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"background_image\"];\n    \n    \n    UIColor *selectedColor = viewController.selectedColor;\n    [[NSUserDefaults standardUserDefaults] setObject:selectedColor.hexString forKey:@\"background_color\"];\n}\n- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey,id> *)info {\n    NSFileManager *manager = [NSFileManager defaultManager];\n    NSString *DocPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, true).firstObject;\n    \n    NSURL *oldImgPath = info[UIImagePickerControllerImageURL];\n    NSURL *newImgPath = [[NSURL fileURLWithPath:DocPath] URLByAppendingPathComponent:@\"msg_background.png\"];\n    \n    if ([manager fileExistsAtPath:newImgPath.path]) {\n        [manager removeItemAtURL:newImgPath error:nil];\n    }\n    \n    [manager copyItemAtURL:oldImgPath toURL:newImgPath error:nil];\n    \n    [[NSUserDefaults standardUserDefaults] setBool:true forKey:@\"change_msg_background\"];\n    [[NSUserDefaults standardUserDefaults] setBool:true forKey:@\"background_image\"];\n    [[NSUserDefaults standardUserDefaults] removeObjectForKey:@\"background_color\"];\n    \n    [picker dismissViewControllerAnimated:true completion:nil];\n}\n- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker {\n    [picker dismissViewControllerAnimated:true completion:nil];\n}\n@end\n\n@implementation BHButtonTableViewCell\n- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier specifier:(PSSpecifier *)specifier {\n    self = [super initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:reuseIdentifier specifier:specifier];\n    if (self) {\n        NSString *subTitle = [specifier.properties[@\"subtitle\"] copy];\n        BOOL isBig = specifier.properties[@\"big\"] ? ((NSNumber *)specifier.properties[@\"big\"]).boolValue : NO;\n        self.detailTextLabel.text = subTitle;\n        self.detailTextLabel.numberOfLines = isBig ? 0 : 1;\n        self.detailTextLabel.textColor = [UIColor secondaryLabelColor];\n    }\n    return self;\n}\n\n@end\n\n@implementation BHSwitchTableCell\n- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier specifier:(PSSpecifier *)specifier {\n    if ((self = [super initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:reuseIdentifier specifier:specifier])) {\n        NSString *subTitle = [specifier.properties[@\"subtitle\"] copy];\n        BOOL isBig = specifier.properties[@\"big\"] ? ((NSNumber *)specifier.properties[@\"big\"]).boolValue : NO;\n        self.detailTextLabel.text = subTitle;\n        self.detailTextLabel.numberOfLines = isBig ? 0 : 1;\n        self.detailTextLabel.textColor = [UIColor secondaryLabelColor];\n        \n        if (specifier.properties[@\"switchAction\"]) {\n            UISwitch *targetSwitch = ((UISwitch *)[self control]);\n            NSString *strAction = [specifier.properties[@\"switchAction\"] copy];\n            [targetSwitch addTarget:[self cellTarget] action:NSSelectorFromString(strAction) forControlEvents:UIControlEventValueChanged];\n        }\n    }\n    return self;\n}\n@end\n"
        },
        {
          "name": "TWHeaders.h",
          "type": "blob",
          "size": 21.0966796875,
          "content": "//\n//  TWHeaders.h\n//  BHT\n//\n//  Created by BandarHelal on 23/12/1441 AH.\n//\n\n#import <objc/runtime.h>\n#import <Foundation/Foundation.h>\n#import <UIKit/UIKit.h>\n#import <MobileCoreServices/MobileCoreServices.h>\n#import <AVKit/AVKit.h>\n#import <Photos/Photos.h>\n#import <SafariServices/SafariServices.h>\n#import \"BHDownload/BHDownload.h\"\n#import \"CustomTabBar/BHCustomTabBarUtility.h\"\n#import \"JGProgressHUD/JGProgressHUD.h\"\n#import \"SAMKeychain/keychain.h\"\n#import <Preferences/PSListController.h>\n#import <Preferences/PSSpecifier.h>\n#import <Preferences/PSEditableTableCell.h>\n#import <Preferences/PSSwitchTableCell.h>\n#import \"ffmpeg/FFmpegKit.h\"\n#import \"ffmpeg/FFprobeKit.h\"\n#import \"ffmpeg/MediaInformationSession.h\"\n#import \"ffmpeg/MediaInformation.h\"\n\n\ntypedef UIFont *(*BH_BaseImp)(id,SEL,...);\nstatic NSMutableDictionary<NSString*, NSValue*>* originalFontsIMP;\nstatic id _PasteboardChangeObserver;\nstatic NSDictionary<NSString*, NSArray<NSString*>*> *trackingParams;\nstatic NSString *_lastCopiedURL;\n\n@interface T1AppDelegate : UIResponder <UIApplicationDelegate>\n@property(retain, nonatomic) UIWindow *window;\n@end\n\n\n@interface TTMAssetVideoFile: NSObject\n@property (nonatomic, copy, readonly) NSString *filePath;\n@property (nonatomic, assign, readonly) CGFloat duration;\n\n@end\n\n@interface TTMAssetVoiceRecording: TTMAssetVideoFile\n@property (nonatomic, strong, readwrite) NSNumber *totalDurationMillis;\n@end\n\n@interface T1MediaAttachmentsViewCell: UICollectionViewCell\n@property (nonatomic, strong, readwrite) id attachment;\n@property (nonatomic, strong) UIButton *uploadButton;\n@end\n\n@interface T1MediaAttachmentsViewCell () <UINavigationControllerDelegate, UIImagePickerControllerDelegate>\n@end\n\n@interface TCRVoiceRecordingViewController: UIViewController\n@property (nonatomic, assign, readwrite) CGFloat clipDuration;\n- (void)_tcr_pauseRecording;\n- (void)_tcr_endRecording;\n@end\n\n@interface TCRVoiceRecordingView: UIView\n@property (nonatomic, strong) NSTimer *recordingTimer;\n@property (nonatomic, assign) CGFloat desiredRecordingDuration;\n@property (nonatomic, weak, readwrite) id delegate;\n@end\n\n@interface NSParagraphStyle ()\n+ (NSWritingDirection)_defaultWritingDirection;\n@end\n\n@interface SFSafariViewController ()\n- (NSURL *)initialURL;\n@end\n\n@interface TFNTwitterAccount : NSObject\n@property (nonatomic, strong) NSString *displayFullName;\n@property (nonatomic, strong) NSString *username;\n@property (nonatomic, strong) NSString *displayUsername;\n@property (nonatomic, strong) NSString *fullName;\n@property (nonatomic, strong) id scribe;\n@end\n\n@interface T1StandardStatusAttachmentViewAdapter : NSObject\n@property (nonatomic, assign, readonly) NSUInteger attachmentType;\n@end\n\n@interface T1DirectMessageConversationEntriesViewController: UIViewController\n@end\n\n@interface TFNTableView : UITableView\n- (void)setShowsVerticalScrollIndicator:(BOOL)arg1;\n@end\n\n@interface TFNDataViewController : UIViewController\n@property(readonly, nonatomic) TFNTableView *tableView;\n@property(readonly, nonatomic) NSString *adDisplayLocation;\n@end\n\n@interface TFNItemsDataViewController : TFNDataViewController\n@property(copy, nonatomic) NSArray *sections;\n- (void)updateSections:(id)arg1 withRowAnimation:(long long)arg2;\n- (id)itemAtIndexPath:(id)arg1;\n@end\n\n@interface TFNItemsDataViewControllerBackingStore: NSObject\n- (void)insertSection:(id)section atIndex:(NSUInteger)index;\n- (void)insertItem:(id)item atIndexPath:(NSIndexPath *)indexPath;\n- (void)_tfn_insertSection:(id)section atIndex:(NSUInteger)index;\n- (void)_tfn_insertItem:(id)item atIndexPath:(NSIndexPath *)indexPath;\n@end\n\n@interface T1TabView : UIView\n@property(readonly, nonatomic) UILabel *titleLabel;\n@property(readonly, nonatomic) long long panelID;\n@property(copy, nonatomic) NSString *scribePage;\n@end\n\n@interface T1TabBarViewController : UIViewController\n@property(copy, nonatomic) NSArray *tabViews;\n@end\n\n@interface T1GenericSettingsViewController: UIViewController\n@property (nonatomic, strong) TFNItemsDataViewControllerBackingStore *backingStore;\n@property (nonatomic, strong) NSArray *sections;\n@property (nonatomic, strong) TFNTwitterAccount *account;\n@end\n\n@interface TFNNavigationController : UINavigationController\n@end\n\n@interface TTSSearchTypeaheadViewController : TFNItemsDataViewController\n- (void)clearActionControlWantsClear:(id)arg1;\n@end\n@interface T1SearchTypeaheadViewController : TFNItemsDataViewController\n- (void)clearActionControlWantsClear:(id)arg1;\n@end\n\n@interface T1ColorThemeSettingsViewController : TFNItemsDataViewController\n- (instancetype)initWithAccount:(TFNTwitterAccount *)acoount scribeContext:(id)context;\n@end\n\n@interface TAEStandardFontGroup : NSObject\n+ (instancetype)sharedFontGroup;\n- (UIFont *)fixedLargeBoldFont;\n- (UIFont *)headline2BoldFont;\n@end\n\n@interface TFNActionItem : NSObject\n+ (instancetype)cancelActionItemWithAction:(void (^)(void))arg1;\n+ (instancetype)cancelActionItemWithTitle:(NSString *)arg1;\n+ (instancetype)actionItemWithTitle:(NSString *)arg1 action:(void (^)(void))arg2;\n+ (instancetype)actionItemWithTitle:(NSString *)arg1 imageName:(NSString *)arg2 action:(void (^)(void))arg3;\n+ (instancetype)actionItemWithTitle:(NSString *)arg1 subtitle:(NSString *)arg2 imageName:(NSString *)arg3 action:(void (^) (void))arg4;\n+ (instancetype)actionItemWithTitle:(NSString *)arg1 systemImageName:(NSString *)arg2 action:(void (^)(void))arg3;\n@end\n\n@interface TFNMenuSheetCenteredIconItem : NSObject\n- (instancetype)initWithIconImageName:(id)imageName height:(CGFloat)arg1 fillColor:(id)Color;\n@end\n\n@interface TFNAttributedTextModel : NSObject\n- (instancetype)initWithAttributedString:(NSMutableAttributedString *)arg;\n@end\n\n@interface TFNActiveTextItem : NSObject\n- (instancetype)initWithTextModel:(id)arg activeRanges:(id)arg1;\n@end\n\n@interface TFNMenuSheetViewController : TFNItemsDataViewController\n@property(nonatomic, assign, readwrite) BOOL shouldPresentAsMenu;\n@property(retain, nonatomic) UIView *sourceView;\n- (instancetype)initWithTitle:(NSString *)sheetTitle actionItems:(NSArray *)actionItems;\n- (instancetype)initWithMessage:(NSString *)sheetMessage actionItems:(NSArray *)actionItems;\n- (instancetype)initWithActionItems:(NSArray *)actionItems;\n- (instancetype)initWithTitle:(NSString *)sheetTitle titleStyle:(long long)sheetTitleStyle message:(NSString *)sheetMessage messageIconName:(id)sheetMessageIconName actionItemSections:(NSArray *)actionItemSections;\n- (void)tfnPresentedCustomPresentFromViewController:(id)arg1 animated:(BOOL)arg2 completion:(void (^) (void))arg3;\n@end\n\n@interface T1SettingsViewController : UIViewController\n@property (nonatomic, strong) TFNItemsDataViewControllerBackingStore *backingStore;\n@property (nonatomic, strong) NSArray *sections;\n@property (nonatomic, strong) TFNTwitterAccount *account;\n@end\n\n@interface TFNSettingsNavigationItem : NSObject\n- (instancetype)initWithTitle:(NSString *)arg1 detail:(NSString *)arg2 iconName:(NSString *)arg3 controllerFactory:(UIViewController* (^)(void))arg4;\n- (instancetype)initWithTitle:(NSString *)arg1 detail:(NSString *)arg2 systemIconName:(NSString *)arg3 controllerFactory:(UIViewController* (^)(void))arg4;\n- (instancetype)initWithTitle:(NSString *)arg1 detail:(NSString *)arg2 controllerFactory:(UIViewController* (^)(void))arg4;\n@end\n\n@interface TFNTextCell: UITableViewCell\n@end\n\n@interface TFNButton : UIButton\n+ (id)buttonWithImage:(id)arg1 style:(long long)arg2 sizeClass:(long long)arg3;\n@end\n\n@interface TFNLegacyButtonAnimator : NSObject\n@end\n\n@interface TFNAnimatableButton : TFNButton\n@property(nonatomic) __weak id animationCoordinator;\n@end\n\n@interface T1ProfileActionButtonsView : UIView\n@end\n\n@interface T1ProfileHeaderView : UIView\n@property(readonly, nonatomic) T1ProfileActionButtonsView *actionButtonsView;\n@end\n\n@interface T1ProfileUserViewModel : NSObject\n@property(readonly, copy, nonatomic) NSString *location;\n@property(readonly, copy, nonatomic) NSString *fullName;\n@property(readonly, copy, nonatomic) NSString *username;\n@property(readonly, copy, nonatomic) NSString *bio;\n@property(readonly, copy, nonatomic) NSString *url;\n@end\n\n@interface T1ProfileHeaderViewController: UIViewController\n- (void)copyButtonHandler;\n@property(retain, nonatomic) T1ProfileUserViewModel *viewModel;\n@end\n\n@protocol T1StatusInlineActionButtonDelegate <NSObject>\n@end\n@protocol TTAStatusInlineActionButtonDelegate <NSObject>\n@end\n\n@interface T1StatusInlineShareButton : UIView\n@property(nonatomic) __weak id <T1StatusInlineActionButtonDelegate> delegate;\n@end\n\n@interface TTAStatusInlineShareButton : UIView\n@property(nonatomic) __weak id <T1StatusInlineActionButtonDelegate> delegate;\n@end\n\n@protocol TTACoreStatusViewEventHandler <NSObject>\n@end\n\n@interface T1StatusCell : UITableViewCell <TTACoreStatusViewEventHandler>\n@end\n\n@interface T1TweetDetailsFocalStatusViewTableViewCell : T1StatusCell\n@end\n\n@interface TFSTwitterEntityMediaVideoVariant : NSObject\n@property(readonly, copy, nonatomic) NSString *contentType;\n@property(readonly, copy, nonatomic) NSString *url;\n@end\n\n@interface TFSTwitterEntityMediaVideoInfo : NSObject\n@property(readonly, copy, nonatomic) NSArray *variants;\n@property(readonly, copy, nonatomic) NSString *primaryUrl;\n@end\n\n@interface TFSTwitterEntityMedia : NSObject\n@property(readonly, nonatomic) TFSTwitterEntityMediaVideoInfo *videoInfo;\n@property(readonly, copy, nonatomic) NSString *mediaURL;\n@property(nonatomic, assign, readonly) NSInteger mediaType; // 1 = photo, 2 = GIF, 3 = video\n@end\n\n@interface TFSTwitterEntitySet : NSObject\n@property(readonly, copy, nonatomic) NSArray *media;\n@end\n\n@protocol T1StatusViewModel <NSObject>\n@property(nonatomic, readonly) TFSTwitterEntitySet *entities;\n@property(nonatomic, assign, readonly) NSArray <TFSTwitterEntityMedia *> *representedMediaEntities;\n@property (nonatomic, assign, readonly) BOOL isMediaEntityVideo;\n@property (nonatomic, assign, readonly) BOOL isGIF;\n@end\n\n@interface T1StatusInlineActionsView : UIView <T1StatusInlineActionButtonDelegate>\n@property(readonly, nonatomic) id <T1StatusViewModel> viewModel;\n@property(nonatomic) id delegate;\n@end\n\n@interface TTAStatusInlineActionsView : UIView <TTAStatusInlineActionButtonDelegate>\n@property(readonly, nonatomic) id <T1StatusViewModel> viewModel;\n@property(nonatomic) id delegate;\n@end\n\n@interface T1SlideshowStatusView : UIView\n@property (nonatomic, strong, readwrite) TFSTwitterEntityMedia *media;\n@end\n\n@interface T1StandardStatusView : UIView\n@property(nonatomic) __weak id <TTACoreStatusViewEventHandler> eventHandler;\n@property(readonly, nonatomic) UIView *visibleInlineActionsView;\n@end\n\n@interface T1TweetDetailsFocalStatusView : UIView\n@property(nonatomic) __weak id <TTACoreStatusViewEventHandler> eventHandler;\n@end\n\n@interface T1ConversationFocalStatusView : UIView\n@property(nonatomic) __weak id <TTACoreStatusViewEventHandler> eventHandler;\n@end\n\n@interface TFNButtonBarView : UIView\n@property(nonatomic) double trailingViewsSpacing;\n@property(nonatomic) double leadingViewsSpacing;\n@property(copy, nonatomic) NSArray *leadingViews;\n@end\n\n@interface T1TweetComposeViewController : UIViewController\n@property(retain, nonatomic) TFNButton *voiceButton;\n@property(retain, nonatomic) TFNButtonBarView *buttonBarView;\n- (void)_t1_insertVoiceButtonIfNeeded;\n@end\n\n@interface T1PlayerMediaEntitySessionProducible : NSObject\n@property(readonly, nonatomic) TFSTwitterEntityMedia *mediaEntity;\n@end\n\n@protocol T1PlayerSessionProducible <NSObject>\n@end\n\n@interface T1PlayerSessionProducer : NSObject\n@property(readonly, nonatomic) id <T1PlayerSessionProducible> sessionProducible;\n@end\n\n\n@protocol T1InlineMediaViewModel <NSObject>\n@property(nonatomic, readonly) T1PlayerSessionProducer *playerSessionProducer;\n@end\n\n@interface T1InlineMediaView : UIView\n@property (retain, nonatomic) id <T1InlineMediaViewModel> viewModel;\n@property (readonly, nonatomic) UIImageView *previewImageView;\n@property (retain, nonatomic) UIView *playerIconView;\n@property (nonatomic, assign, readwrite) NSUInteger playerIconViewType;\n@end\n\n@interface T1DirectMessageAbstractConversationEntryViewModel : NSObject\n@property(retain, nonatomic) UIImage *previewImage;\n@end\n\n@interface T1DirectMessageEntryViewModel : T1DirectMessageAbstractConversationEntryViewModel\n@property(nonatomic) _Bool isOutgoingMessage;\n@end\n\n@interface T1DirectMessageEntryBaseCell: UICollectionViewCell\n@property(nonatomic, readonly) T1DirectMessageEntryViewModel *messageEntryViewModel;\n@property(nonatomic, readonly) UIImage *profileImage;\n@end\n\n@interface T1DirectMessageEntryMediaCell : T1DirectMessageEntryBaseCell\n@property (nonatomic, strong) JGProgressHUD *hud;\n// @property (nonatomic, strong) NSURL *ffmepgExportURL;\n- (void)mediaUploadProgress:(id)arg1;\n@property(nonatomic, readonly) T1InlineMediaView *inlineMediaView; // @synthesize inlineMediaView;\n- (void)updateConstraints;\n- (_Bool)accessibilityActivate;\n- (void)dealloc;\n- (void)layoutSubviews;\n- (instancetype)initWithFrame:(struct CGRect)arg1;\n- (void)DownloadHandler;\n@end\n\n@interface T1DirectMessageEntryMediaCell () <BHDownloadDelegate, UIContextMenuInteractionDelegate>\n@end\n\n@protocol TFNTwitterStatusBanner <NSObject>\n@end\n\n@interface TFNTwitterURTTimelineStatusBanner : NSObject <TFNTwitterStatusBanner>\n@end\n\n@interface TFNTwitterURTTimelineStatusTopicBanner : TFNTwitterURTTimelineStatusBanner\n@end\n\n@interface T1URTTimelineStatusItemViewModel : NSObject\n@property(nonatomic, readonly) NSString *text;\n@property(nonatomic, readonly) _Bool isPromoted;\n@property(nonatomic, retain) id <TFNTwitterStatusBanner> banner;\n@end\n\n@interface TFNTwitterStatus : NSObject\n@property(readonly, nonatomic) NSDictionary *scribeParameters;\n@property(readonly, nonatomic) _Bool isPromoted;\n@property(readonly, nonatomic) NSString *mediaScribeContentID;\n@end\n\n@interface TFSTwitterEntityURL : NSObject\n@property(readonly, copy, nonatomic) NSString *expandedURL;\n@end\n\n@interface T1StatusBodyTextView : UIView\n@property(readonly, nonatomic) id viewModel; // @synthesize viewModel=_viewModel;\n@end\n\n@interface T1RichTextFormatViewController : UIViewController\n- (instancetype)initWithRichTextFormatDocumentPath:(NSString *)documentPath;\n@end\n\n@interface TFNTitleView: UIView\n+ (instancetype)titleViewWithTitle:(NSString *)title subtitle:(NSString *)subTitle;\n@end\n\n@interface _TtC10TwitterURT32URTTimelineEventSummaryViewModel : NSObject\n@property(nonatomic, readonly) NSDictionary *scribeItem;\n@end\n\n@interface _TtC10TwitterURT25URTTimelineTrendViewModel : NSObject\n@property(nonatomic, readonly) NSDictionary *scribeItem;\n@end\n\n@class FLEXAlert, FLEXAlertAction;\n\ntypedef void (^FLEXAlertReveal)(void);\ntypedef void (^FLEXAlertBuilder)(FLEXAlert *make);\ntypedef FLEXAlert * _Nonnull (^FLEXAlertStringProperty)(NSString * _Nullable);\ntypedef FLEXAlert * _Nonnull (^FLEXAlertStringArg)(NSString * _Nullable);\ntypedef FLEXAlert * _Nonnull (^FLEXAlertTextField)(void(^configurationHandler)(UITextField *textField));\ntypedef FLEXAlertAction * _Nonnull (^FLEXAlertAddAction)(NSString *title);\ntypedef FLEXAlertAction * _Nonnull (^FLEXAlertActionStringProperty)(NSString * _Nullable);\ntypedef FLEXAlertAction * _Nonnull (^FLEXAlertActionProperty)(void);\ntypedef FLEXAlertAction * _Nonnull (^FLEXAlertActionBOOLProperty)(BOOL);\ntypedef FLEXAlertAction * _Nonnull (^FLEXAlertActionHandler)(void(^handler)(NSArray<NSString *> *strings));\n\n@interface FLEXAlert : NSObject\n\n/// Shows a simple alert with one button which says \"Dismiss\"\n+ (void)showAlert:(NSString * _Nullable)title message:(NSString * _Nullable)message from:(UIViewController *)viewController;\n\n/// Shows a simple alert with no buttons and only a title, for half a second\n+ (void)showQuickAlert:(NSString *)title from:(UIViewController *)viewController;\n\n/// Construct and display an alert\n+ (void)makeAlert:(FLEXAlertBuilder)block showFrom:(UIViewController *)viewController;\n/// Construct and display an action sheet-style alert\n+ (void)makeSheet:(FLEXAlertBuilder)block\n         showFrom:(UIViewController *)viewController\n           source:(id)viewOrBarItem;\n\n/// Construct an alert\n+ (UIAlertController *)makeAlert:(FLEXAlertBuilder)block;\n/// Construct an action sheet-style alert\n+ (UIAlertController *)makeSheet:(FLEXAlertBuilder)block;\n\n/// Set the alert's title.\n///\n/// Call in succession to append strings to the title.\n@property (nonatomic, readonly) FLEXAlertStringProperty title;\n/// Set the alert's message.\n///\n/// Call in succession to append strings to the message.\n@property (nonatomic, readonly) FLEXAlertStringProperty message;\n/// Add a button with a given title with the default style and no action.\n@property (nonatomic, readonly) FLEXAlertAddAction button;\n/// Add a text field with the given (optional) placeholder text.\n@property (nonatomic, readonly) FLEXAlertStringArg textField;\n/// Add and configure the given text field.\n///\n/// Use this if you need to more than set the placeholder, such as\n/// supply a delegate, make it secure entry, or change other attributes.\n@property (nonatomic, readonly) FLEXAlertTextField configuredTextField;\n\n@end\n\n@interface FLEXAlertAction : NSObject\n\n/// Set the action's title.\n///\n/// Call in succession to append strings to the title.\n@property (nonatomic, readonly) FLEXAlertActionStringProperty title;\n/// Make the action destructive. It appears with red text.\n@property (nonatomic, readonly) FLEXAlertActionProperty destructiveStyle;\n/// Make the action cancel-style. It appears with a bolder font.\n@property (nonatomic, readonly) FLEXAlertActionProperty cancelStyle;\n/// Enable or disable the action. Enabled by default.\n@property (nonatomic, readonly) FLEXAlertActionBOOLProperty enabled;\n/// Give the button an action. The action takes an array of text field strings.\n@property (nonatomic, readonly) FLEXAlertActionHandler handler;\n/// Access the underlying UIAlertAction, should you need to change it while\n/// the encompassing alert is being displayed. For example, you may want to\n/// enable or disable a button based on the input of some text fields in the alert.\n/// Do not call this more than once per instance.\n@property (nonatomic, readonly) UIAlertAction *action;\n\n@end\n@interface FLEXManager : NSObject\n+ (instancetype)sharedManager;\n- (void)showExplorer;\n- (void)hideExplorer;\n- (void)toggleExplorer;\n@end\n\n@protocol TAEColorPalette\n- (UIColor *)primaryColorForOption:(NSUInteger)colorOption;\n@end\n\n@interface TAETwitterColorPaletteSettingInfo : NSObject\n@property(readonly, nonatomic) id <TAEColorPalette> colorPalette;\n@property(readonly, nonatomic) _Bool isDark;\n@end\n\n@interface TAEColorSettings : NSObject\n@property(retain, nonatomic) TAETwitterColorPaletteSettingInfo *currentColorPalette;\n- (void)setPrimaryColorOption:(NSInteger)colorOption;\n+ (instancetype)sharedSettings;\n@end\n\nstatic void BH_changeTwitterColor(NSInteger colorID) {\n    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n    TAEColorSettings *colorSettings = [objc_getClass(\"TAEColorSettings\") sharedSettings];\n    \n    [defaults setObject:@(colorID) forKey:@\"T1ColorSettingsPrimaryColorOptionKey\"];\n    [colorSettings setPrimaryColorOption:colorID];\n}\nstatic UIImage *BH_imageFromView(UIView *view) {\n    TAEColorSettings *colorSettings = [objc_getClass(\"TAEColorSettings\") sharedSettings];\n    bool opaque = [colorSettings.currentColorPalette isDark] ? true : false;\n    UIGraphicsBeginImageContextWithOptions(view.frame.size, opaque, 0.0);\n    [view drawViewHierarchyInRect:view.bounds afterScreenUpdates:false];\n    UIImage *img = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    \n    return img;\n}\n\nstatic  UIFont * _Nullable BH_getDefaultFont(UIFont *font) {\n    if ([[NSUserDefaults standardUserDefaults] boolForKey:@\"en_font\"]) {\n        // https://stackoverflow.com/a/20515367/16619237\n        UIFontDescriptorSymbolicTraits fontDescriptorSymbolicTraits = font.fontDescriptor.symbolicTraits;\n        BOOL isBold = (fontDescriptorSymbolicTraits & UIFontDescriptorTraitBold) != 0;\n\n        if ([[NSUserDefaults standardUserDefaults] objectForKey:isBold ? @\"bhtwitter_font_2\" : @\"bhtwitter_font_1\"]) {\n            NSString *fontName = [[NSUserDefaults standardUserDefaults] objectForKey:isBold ? @\"bhtwitter_font_2\" : @\"bhtwitter_font_1\"];\n            return [UIFont fontWithName:fontName size:font.pointSize];\n        }\n        return nil;\n    }\n    return nil;\n}\nstatic BOOL isDeviceLanguageRTL() {\n    return [NSParagraphStyle _defaultWritingDirection] == NSWritingDirectionRightToLeft;\n}\nstatic BOOL is_iPad() {\n    if ([(NSString *)[UIDevice currentDevice].model hasPrefix:@\"iPad\"]) {\n        return YES;\n    }\n    return NO;\n}\n\n// https://github.com/julioverne/MImport/blob/0275405812ff41ed2ca56e98f495fd05c38f41f2/mimporthook/MImport.xm#L59\nstatic UIViewController * _Nullable _topMostController(UIViewController * _Nonnull cont) {\n    UIViewController *topController = cont;\n    while (topController.presentedViewController) {\n        topController = topController.presentedViewController;\n    }\n    if ([topController isKindOfClass:[UINavigationController class]]) {\n        UIViewController *visible = ((UINavigationController *)topController).visibleViewController;\n        if (visible) {\n            topController = visible;\n        }\n    }\n    return (topController != cont ? topController : nil);\n}\nstatic UIViewController * _Nonnull topMostController() {\n    UIViewController *topController = [UIApplication sharedApplication].keyWindow.rootViewController;\n    UIViewController *next = nil;\n    while ((next = _topMostController(topController)) != nil) {\n        topController = next;\n    }\n    return topController;\n}\n"
        },
        {
          "name": "ThemeColor",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tweak.x",
          "type": "blob",
          "size": 57.9208984375,
          "content": "#import \"SAMKeychain/AuthViewController.h\"\n#import \"Colours/Colours.h\"\n#import \"BHTManager.h\"\n#import \"BHTBundle/BHTBundle.h\"\n\nstatic UIFont * _Nullable TAEStandardFontGroupReplacement(UIFont *self, SEL _cmd, CGFloat arg1, CGFloat arg2) {\n    BH_BaseImp orig  = originalFontsIMP[NSStringFromSelector(_cmd)].pointerValue;\n    NSUInteger nArgs = [[self class] instanceMethodSignatureForSelector:_cmd].numberOfArguments;\n    UIFont *origFont;\n    switch (nArgs) {\n        case 2:\n            origFont = orig(self, _cmd);\n            break;\n        case 3:\n            origFont = orig(self, _cmd, arg1);\n            break;\n        case 4:\n            origFont = orig(self, _cmd, arg1, arg2);\n            break;\n        default:\n            // Should not be reachable, as it was verified before swizzling\n            origFont = orig(self, _cmd);\n            break;\n    };\n    \n    UIFont *newFont  = BH_getDefaultFont(origFont);\n    return newFont != nil ? newFont : origFont;\n}\nstatic void batchSwizzlingOnClass(Class cls, NSArray<NSString*>*origSelectors, IMP newIMP){\n    for (NSString *sel in origSelectors) {\n        SEL origSel = NSSelectorFromString(sel);\n        Method origMethod = class_getInstanceMethod(cls, origSel);\n        if (origMethod != NULL) {\n            IMP oldImp = class_replaceMethod(cls, origSel, newIMP, method_getTypeEncoding(origMethod));\n            [originalFontsIMP setObject:[NSValue valueWithPointer:oldImp] forKey:sel];\n        } else {\n            NSLog(@\"[BHTwitter] Can't find method (%@) in Class (%@)\", sel, NSStringFromClass(cls));\n        }\n    }\n}\n\n// MARK: Clean cache and Padlock\n%hook T1AppDelegate\n- (_Bool)application:(UIApplication *)application didFinishLaunchingWithOptions:(id)arg2 {\n    %orig;\n    if (![[NSUserDefaults standardUserDefaults] objectForKey:@\"FirstRun_4.3\"]) {\n        [[NSUserDefaults standardUserDefaults] setValue:@\"1strun\" forKey:@\"FirstRun_4.3\"];\n        [[NSUserDefaults standardUserDefaults] setBool:true forKey:@\"dw_v\"];\n        [[NSUserDefaults standardUserDefaults] setBool:true forKey:@\"hide_promoted\"];\n        [[NSUserDefaults standardUserDefaults] setBool:true forKey:@\"voice\"];\n        [[NSUserDefaults standardUserDefaults] setBool:true forKey:@\"undo_tweet\"];\n        [[NSUserDefaults standardUserDefaults] setBool:true forKey:@\"TrustedFriends\"];\n        [[NSUserDefaults standardUserDefaults] setBool:true forKey:@\"disableSensitiveTweetWarnings\"];\n        [[NSUserDefaults standardUserDefaults] setBool:true forKey:@\"disable_immersive_player\"];\n        [[NSUserDefaults standardUserDefaults] setBool:true forKey:@\"custom_voice_upload\"];\n    }\n    [BHTManager cleanCache];\n    if ([BHTManager FLEX]) {\n        [[%c(FLEXManager) sharedManager] showExplorer];\n    }\n    return true;\n}\n\n- (void)applicationDidBecomeActive:(id)arg1 {\n    %orig;\n    if ([BHTManager Padlock]) {\n        NSDictionary *keychainData = [[keychain shared] getData];\n        if (keychainData != nil) {\n            id isAuthenticated = [keychainData valueForKey:@\"isAuthenticated\"];\n            if (isAuthenticated == nil || [isAuthenticated isEqual:@NO]) {\n                dispatch_async(dispatch_get_main_queue(), ^{\n                    AuthViewController *auth = [[AuthViewController alloc] init];\n                    [auth setModalPresentationStyle:UIModalPresentationFullScreen];\n                    [self.window.rootViewController presentViewController:auth animated:true completion:nil];\n                });\n            }\n        }\n        UIImageView *image = [self.window viewWithTag:909];\n        if (image != nil) {\n            [image removeFromSuperview];\n        }\n    }\n}\n\n- (void)applicationWillTerminate:(id)arg1 {\n    %orig;\n    if ([BHTManager Padlock]) {\n        [[keychain shared] saveDictionary:@{@\"isAuthenticated\": @NO}];\n    }\n}\n\n- (void)applicationWillResignActive:(id)arg1 {\n    %orig;\n    if ([BHTManager Padlock]) {\n        UIImageView *image = [[UIImageView alloc] initWithFrame:self.window.bounds];\n        [image setTag:909];\n        [image setBackgroundColor:UIColor.systemBackgroundColor];\n        [image setContentMode:UIViewContentModeCenter];\n        [self.window addSubview:image];\n    }\n    if ([BHTManager FLEX]) {\n        [[%c(FLEXManager) sharedManager] showExplorer];\n    }\n}\n%end\n\n// MARK: Custom Tab bar\n%hook T1TabBarViewController\n- (void)loadView {\n    %orig;\n    NSArray <NSString *> *hiddenBars = [BHCustomTabBarUtility getHiddenTabBars];\n    for (T1TabView *tabView in self.tabViews) {\n        if ([hiddenBars containsObject:tabView.scribePage]) {\n            [tabView setHidden:true];\n        }\n    }\n}\n\n- (void)setTabBarHidden:(BOOL)arg1 withDuration:(CGFloat)arg2 {\n    if ([BHTManager stopHidingTabBar]) {\n        return;\n    }\n    \n    return %orig;\n}\n- (void)setTabBarHidden:(BOOL)arg1 {\n    if ([BHTManager stopHidingTabBar]) {\n        return;\n    }\n    \n    return %orig;\n}\n%end\n\n\n%hook T1DirectMessageConversationEntriesViewController\n- (void)viewDidLoad {\n    %orig;\n    if ([BHTManager changeBackground]) {\n        if ([BHTManager backgroundImage]) { // set the backgeound as image\n            NSFileManager *manager = [NSFileManager defaultManager];\n            NSString *DocPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, true).firstObject;\n            NSURL *imagePath = [[NSURL fileURLWithPath:DocPath] URLByAppendingPathComponent:@\"msg_background.png\"];\n            \n            if ([manager fileExistsAtPath:imagePath.path]) {\n                UIImageView *backgroundImage = [[UIImageView alloc] initWithFrame:UIScreen.mainScreen.bounds];\n                backgroundImage.image = [UIImage imageNamed:imagePath.path];\n                [backgroundImage setContentMode:UIViewContentModeScaleAspectFill];\n                [self.view insertSubview:backgroundImage atIndex:0];\n            }\n        }\n        \n        if ([[NSUserDefaults standardUserDefaults] objectForKey:@\"background_color\"]) { // set the backgeound as color\n            NSString *hexCode = [[NSUserDefaults standardUserDefaults] objectForKey:@\"background_color\"];\n            UIColor *selectedColor = [UIColor colorFromHexString:hexCode];\n            self.view.backgroundColor = selectedColor;\n        }\n    }\n}\n%end\n\n// MARK: Copy user information\n%hook T1ProfileHeaderViewController\n- (void)viewDidAppear:(_Bool)arg1 {\n    %orig(arg1);\n    if ([BHTManager CopyProfileInfo]) {\n        T1ProfileHeaderView *headerView = [self valueForKey:@\"_headerView\"];\n        UIView *innerContentView = [headerView.actionButtonsView valueForKey:@\"_innerContentView\"];\n        UIButton *copyButton = [UIButton buttonWithType:UIButtonTypeCustom];\n        [copyButton setImage:[UIImage systemImageNamed:@\"doc.on.clipboard\"] forState:UIControlStateNormal];\n        if (@available(iOS 14.0, *)) {\n            [copyButton setShowsMenuAsPrimaryAction:true];\n            \n            [copyButton setMenu:[UIMenu menuWithTitle:@\"\" children:@[\n                [UIAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"COPY_PROFILE_INFO_MENU_OPTION_1\"] image:[UIImage systemImageNamed:@\"doc.on.clipboard\"] identifier:nil handler:^(__kindof UIAction * _Nonnull action) {\n                if (self.viewModel.bio != nil)\n                    UIPasteboard.generalPasteboard.string = self.viewModel.bio;\n            }],\n                [UIAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"COPY_PROFILE_INFO_MENU_OPTION_2\"] image:[UIImage systemImageNamed:@\"doc.on.clipboard\"] identifier:nil handler:^(__kindof UIAction * _Nonnull action) {\n                if (self.viewModel.username != nil)\n                    UIPasteboard.generalPasteboard.string = self.viewModel.username;\n            }],\n                [UIAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"COPY_PROFILE_INFO_MENU_OPTION_3\"] image:[UIImage systemImageNamed:@\"doc.on.clipboard\"] identifier:nil handler:^(__kindof UIAction * _Nonnull action) {\n                if (self.viewModel.fullName != nil)\n                    UIPasteboard.generalPasteboard.string = self.viewModel.fullName;\n            }],\n                [UIAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"COPY_PROFILE_INFO_MENU_OPTION_4\"] image:[UIImage systemImageNamed:@\"doc.on.clipboard\"] identifier:nil handler:^(__kindof UIAction * _Nonnull action) {\n                if (self.viewModel.url != nil)\n                    UIPasteboard.generalPasteboard.string = self.viewModel.url;\n            }],\n                [UIAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"COPY_PROFILE_INFO_MENU_OPTION_5\"] image:[UIImage systemImageNamed:@\"doc.on.clipboard\"] identifier:nil handler:^(__kindof UIAction * _Nonnull action) {\n                if (self.viewModel.location != nil)\n                    UIPasteboard.generalPasteboard.string = self.viewModel.location;\n            }],\n            ]]];\n            \n        } else {\n            [copyButton addTarget:self action:@selector(copyButtonHandler:) forControlEvents:UIControlEventTouchUpInside];\n        }\n        [copyButton setTintColor:UIColor.labelColor];\n        [copyButton.layer setCornerRadius:32/2];\n        [copyButton.layer setBorderWidth:1];\n        [copyButton.layer setBorderColor:[UIColor colorFromHexString:@\"2F3336\"].CGColor];\n        [copyButton setTranslatesAutoresizingMaskIntoConstraints:false];\n        [headerView.actionButtonsView addSubview:copyButton];\n        \n        [NSLayoutConstraint activateConstraints:@[\n            [copyButton.centerYAnchor constraintEqualToAnchor:headerView.actionButtonsView.centerYAnchor],\n            [copyButton.widthAnchor constraintEqualToConstant:32],\n            [copyButton.heightAnchor constraintEqualToConstant:32],\n        ]];\n        \n        if (isDeviceLanguageRTL()) {\n            [NSLayoutConstraint activateConstraints:@[\n                [copyButton.leadingAnchor constraintEqualToAnchor:innerContentView.trailingAnchor constant:7],\n            ]];\n        } else {\n            [NSLayoutConstraint activateConstraints:@[\n                [copyButton.trailingAnchor constraintEqualToAnchor:innerContentView.leadingAnchor constant:-7],\n            ]];\n        }\n    }\n}\n%new - (void)copyButtonHandler:(UIButton *)sender {\n    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"hi\" message:nil preferredStyle:UIAlertControllerStyleActionSheet];\n    if (is_iPad()) {\n        alert.popoverPresentationController.sourceView = self.view;\n        alert.popoverPresentationController.sourceRect = sender.frame;\n    }\n    UIAlertAction *bio = [UIAlertAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"COPY_PROFILE_INFO_MENU_OPTION_1\"] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        if (self.viewModel.bio != nil)\n            UIPasteboard.generalPasteboard.string = self.viewModel.bio;\n    }];\n    UIAlertAction *username = [UIAlertAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"COPY_PROFILE_INFO_MENU_OPTION_2\"] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        if (self.viewModel.username != nil)\n            UIPasteboard.generalPasteboard.string = self.viewModel.username;\n    }];\n    UIAlertAction *fullusername = [UIAlertAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"COPY_PROFILE_INFO_MENU_OPTION_3\"] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        if (self.viewModel.fullName != nil)\n            UIPasteboard.generalPasteboard.string = self.viewModel.fullName;\n    }];\n    UIAlertAction *url = [UIAlertAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"COPY_PROFILE_INFO_MENU_OPTION_4\"] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        if (self.viewModel.url != nil)\n            UIPasteboard.generalPasteboard.string = self.viewModel.url;\n    }];\n    UIAlertAction *location = [UIAlertAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"COPY_PROFILE_INFO_MENU_OPTION_5\"] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n        if (self.viewModel.location != nil)\n            UIPasteboard.generalPasteboard.string = self.viewModel.location;\n    }];\n    [alert addAction:bio];\n    [alert addAction:username];\n    [alert addAction:fullusername];\n    [alert addAction:url];\n    [alert addAction:location];\n    [alert addAction:[UIAlertAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"CANCEL_BUTTON_TITLE\"] style:UIAlertActionStyleCancel handler:nil]];\n    [self presentViewController:alert animated:true completion:nil];\n}\n%end\n\n%hook T1ProfileSummaryView\n- (BOOL)shouldShowGetVerifiedButton {\n    return [BHTManager hidePremiumOffer] ? false : %orig;\n}\n%end\n\n// MARK: hide ADs\n// credit goes to haoict https://github.com/haoict/twitter-no-ads\n%hook TFNItemsDataViewController\n- (id)tableViewCellForItem:(id)arg1 atIndexPath:(id)arg2 {\n    UITableViewCell *_orig = %orig;\n    id tweet = [self itemAtIndexPath:arg2];\n    NSString *class_name = NSStringFromClass([tweet classForCoder]);\n    \n    if ([BHTManager HidePromoted] && [tweet respondsToSelector:@selector(isPromoted)] && [tweet performSelector:@selector(isPromoted)]) {\n        [_orig setHidden:YES];\n    }\n    \n    \n    if ([self.adDisplayLocation isEqualToString:@\"PROFILE_TWEETS\"]) {\n        if ([BHTManager hideWhoToFollow]) {\n            if ([class_name isEqualToString:@\"T1URTTimelineUserItemViewModel\"] || [class_name isEqualToString:@\"T1TwitterSwift.URTTimelineCarouselViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTModuleHeaderViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTModuleFooterViewModel\"]) {\n                [_orig setHidden:true];\n            }\n        }\n        \n        if ([BHTManager hideTopicsToFollow]) {\n            if ([class_name isEqualToString:@\"T1TwitterSwift.URTTimelineTopicCollectionViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTModuleHeaderViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTModuleFooterViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTTimelineCarouselViewModel\"]) {\n                [_orig setHidden:true];\n            }\n        }\n    }\n    \n    if ([self.adDisplayLocation isEqualToString:@\"OTHER\"]) {\n        if ([BHTManager HidePromoted] && ([class_name isEqualToString:@\"TwitterURT.URTModuleHeaderViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTModuleFooterViewModel\"] || [class_name isEqualToString:@\"T1URTTimelineMessageItemViewModel\"])) {\n            [_orig setHidden:true];\n        }\n        \n        if ([BHTManager HidePromoted] && [class_name isEqualToString:@\"TwitterURT.URTTimelineEventSummaryViewModel\"]) {\n            _TtC10TwitterURT32URTTimelineEventSummaryViewModel *trendModel = tweet;\n            if ([[trendModel.scribeItem allKeys] containsObject:@\"promoted_id\"]) {\n                [_orig setHidden:true];\n            }\n        }\n        if ([BHTManager HidePromoted] && [class_name isEqualToString:@\"TwitterURT.URTTimelineTrendViewModel\"]) {\n            _TtC10TwitterURT25URTTimelineTrendViewModel *trendModel = tweet;\n            if ([[trendModel.scribeItem allKeys] containsObject:@\"promoted_id\"]) {\n                [_orig setHidden:true];\n            }\n        }\n        if ([BHTManager hideTrendVideos] && ([class_name isEqualToString:@\"TwitterURT.URTModuleHeaderViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTModuleFooterViewModel\"] || [class_name isEqualToString:@\"T1TwitterSwift.URTTimelineCarouselViewModel\"])) {\n            [_orig setHidden:true];\n        }\n    }\n    \n    if ([self.adDisplayLocation isEqualToString:@\"TIMELINE_HOME\"]) {\n        if ([tweet isKindOfClass:%c(T1URTTimelineStatusItemViewModel)]) {\n            T1URTTimelineStatusItemViewModel *fullTweet = tweet;\n            if ([BHTManager HideTopics]) {\n                if ((fullTweet.banner != nil) && [fullTweet.banner isKindOfClass:%c(TFNTwitterURTTimelineStatusTopicBanner)]) {\n                    [_orig setHidden:true];\n                }\n            }\n        }\n        \n        if ([BHTManager HideTopics]) {\n            if ([tweet isKindOfClass:%c(_TtC10TwitterURT26URTTimelinePromptViewModel)]) {\n                [_orig setHidden:true];\n            }\n        }\n\n        if ([BHTManager hidePremiumOffer]) {\n            if ([class_name isEqualToString:@\"T1URTTimelineMessageItemViewModel\"]) {\n                [_orig setHidden:true];\n            }\n        }\n    }\n    \n    return _orig;\n}\n- (double)tableView:(id)arg1 heightForRowAtIndexPath:(id)arg2 {\n    id tweet = [self itemAtIndexPath:arg2];\n    NSString *class_name = NSStringFromClass([tweet classForCoder]);\n    \n    if ([BHTManager HidePromoted] && [tweet respondsToSelector:@selector(isPromoted)] && [tweet performSelector:@selector(isPromoted)]) {\n        return 0;\n    }\n    \n    if ([self.adDisplayLocation isEqualToString:@\"PROFILE_TWEETS\"]) {\n        if ([BHTManager hideWhoToFollow]) {\n            if ([class_name isEqualToString:@\"T1URTTimelineUserItemViewModel\"] || [class_name isEqualToString:@\"T1TwitterSwift.URTTimelineCarouselViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTModuleHeaderViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTModuleFooterViewModel\"]) {\n                return 0;\n            }\n        }\n        if ([BHTManager hideTopicsToFollow]) {\n            if ([class_name isEqualToString:@\"T1TwitterSwift.URTTimelineTopicCollectionViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTModuleHeaderViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTModuleFooterViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTTimelineCarouselViewModel\"]) {\n                return 0;\n            }\n        }\n    }\n    \n    if ([self.adDisplayLocation isEqualToString:@\"OTHER\"]) {\n        if ([BHTManager HidePromoted] && ([class_name isEqualToString:@\"TwitterURT.URTModuleHeaderViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTModuleFooterViewModel\"] || [class_name isEqualToString:@\"T1URTTimelineMessageItemViewModel\"])) {\n            return 0;\n        }\n        \n        if ([BHTManager HidePromoted] && [class_name isEqualToString:@\"TwitterURT.URTTimelineEventSummaryViewModel\"]) {\n            _TtC10TwitterURT32URTTimelineEventSummaryViewModel *trendModel = tweet;\n            if ([[trendModel.scribeItem allKeys] containsObject:@\"promoted_id\"]) {\n                return 0;\n            }\n        }\n        if ([BHTManager HidePromoted] && [class_name isEqualToString:@\"TwitterURT.URTTimelineTrendViewModel\"]) {\n            _TtC10TwitterURT25URTTimelineTrendViewModel *trendModel = tweet;\n            if ([[trendModel.scribeItem allKeys] containsObject:@\"promoted_id\"]) {\n                return 0;\n            }\n        }\n\n        if ([BHTManager hideTrendVideos] && ([class_name isEqualToString:@\"TwitterURT.URTModuleHeaderViewModel\"] || [class_name isEqualToString:@\"TwitterURT.URTModuleFooterViewModel\"] || [class_name isEqualToString:@\"T1TwitterSwift.URTTimelineCarouselViewModel\"])) {\n            return 0;\n        }\n    }\n    \n    if ([self.adDisplayLocation isEqualToString:@\"TIMELINE_HOME\"]) {\n        if ([tweet isKindOfClass:%c(T1URTTimelineStatusItemViewModel)]) {\n            T1URTTimelineStatusItemViewModel *fullTweet = tweet;\n            \n            if ([BHTManager HideTopics]) {\n                if ((fullTweet.banner != nil) && [fullTweet.banner isKindOfClass:%c(TFNTwitterURTTimelineStatusTopicBanner)]) {\n                    return 0;\n                }\n            }\n        }\n        \n        if ([BHTManager HideTopics]) {\n            if ([tweet isKindOfClass:%c(_TtC10TwitterURT26URTTimelinePromptViewModel)]) {\n                return 0;\n            }\n        }\n\n        if ([BHTManager hidePremiumOffer]) {\n            if ([class_name isEqualToString:@\"T1URTTimelineMessageItemViewModel\"]) {\n                return 0;\n            }\n        }\n    }\n    \n    return %orig;\n}\n- (double)tableView:(id)arg1 heightForHeaderInSection:(long long)arg2 {\n    if (self.sections && self.sections[arg2] && ((NSArray* )self.sections[arg2]).count && self.sections[arg2][0]) {\n        NSString *sectionClassName = NSStringFromClass([self.sections[arg2][0] classForCoder]);\n        if ([sectionClassName isEqualToString:@\"TFNTwitterUser\"]) {\n            return 0;\n        }\n    }\n    return %orig;\n}\n%end\n\n%hook TFNTwitterStatus\n- (_Bool)isCardHidden {\n    return ([BHTManager HidePromoted] && [self isPromoted]) ? true : %orig;\n}\n%end\n\n// MARK: DM download\n%hook T1DirectMessageEntryMediaCell\n%property (nonatomic, strong) JGProgressHUD *hud;\n- (void)setEntryViewModel:(id)arg1 {\n    %orig;\n    if ([BHTManager DownloadingVideos]) {\n        UIContextMenuInteraction *menuInteraction = [[UIContextMenuInteraction alloc] initWithDelegate:self];\n        [self setUserInteractionEnabled:true];\n        \n        if ([BHTManager isDMVideoCell:self.inlineMediaView]) {\n            [self addInteraction:menuInteraction];\n        }\n    }\n}\n%new - (UIContextMenuConfiguration *)contextMenuInteraction:(UIContextMenuInteraction *)interaction configurationForMenuAtLocation:(CGPoint)location {\n    return [UIContextMenuConfiguration configurationWithIdentifier:nil previewProvider:nil actionProvider:^UIMenu * _Nullable(NSArray<UIMenuElement *> * _Nonnull suggestedActions) {\n        UIAction *saveAction = [UIAction actionWithTitle:@\"Download\" image:[UIImage systemImageNamed:@\"square.and.arrow.down\"] identifier:nil handler:^(__kindof UIAction * _Nonnull action) {\n            [self DownloadHandler];\n        }];\n        return [UIMenu menuWithTitle:@\"\" children:@[saveAction]];\n    }];\n}\n%new - (void)DownloadHandler {\n    NSAttributedString *AttString = [[NSAttributedString alloc] initWithString:[[BHTBundle sharedBundle] localizedStringForKey:@\"DOWNLOAD_MENU_TITLE\"] attributes:@{\n        NSFontAttributeName: [[%c(TAEStandardFontGroup) sharedFontGroup] headline2BoldFont],\n        NSForegroundColorAttributeName: UIColor.labelColor\n    }];\n    TFNActiveTextItem *title = [[%c(TFNActiveTextItem) alloc] initWithTextModel:[[%c(TFNAttributedTextModel) alloc] initWithAttributedString:AttString] activeRanges:nil];\n    \n    NSMutableArray *actions = [[NSMutableArray alloc] init];\n    [actions addObject:title];\n    \n    T1PlayerMediaEntitySessionProducible *session = self.inlineMediaView.viewModel.playerSessionProducer.sessionProducible;\n    for (TFSTwitterEntityMediaVideoVariant *i in session.mediaEntity.videoInfo.variants) {\n        if ([i.contentType isEqualToString:@\"video/mp4\"]) {\n            TFNActionItem *download = [%c(TFNActionItem) actionItemWithTitle:[BHTManager getVideoQuality:i.url] imageName:@\"arrow_down_circle_stroke\" action:^{\n                BHDownload *DownloadManager = [[BHDownload alloc] init];\n                self.hud = [JGProgressHUD progressHUDWithStyle:JGProgressHUDStyleDark];\n                self.hud.textLabel.text = [[BHTBundle sharedBundle] localizedStringForKey:@\"PROGRESS_DOWNLOADING_STATUS_TITLE\"];\n                [DownloadManager downloadFileWithURL:[NSURL URLWithString:i.url]];\n                [DownloadManager setDelegate:self];\n                [self.hud showInView:topMostController().view];\n            }];\n            [actions addObject:download];\n        }\n        \n        if ([i.contentType isEqualToString:@\"application/x-mpegURL\"]) {\n            TFNActionItem *option = [objc_getClass(\"TFNActionItem\") actionItemWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"FFMPEG_DOWNLOAD_OPTION_TITLE\"] imageName:@\"arrow_down_circle_stroke\" action:^{\n                \n                self.hud = [JGProgressHUD progressHUDWithStyle:JGProgressHUDStyleDark];\n                self.hud.textLabel.text = [[BHTBundle sharedBundle] localizedStringForKey:@\"FETCHING_PROGRESS_TITLE\"];\n                [self.hud showInView:topMostController().view];\n                \n                dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n                    MediaInformation *mediaInfo = [BHTManager getM3U8Information:[NSURL URLWithString:i.url]];\n                    dispatch_async(dispatch_get_main_queue(), ^(void) {\n                        [self.hud dismiss];\n\n                        TFNMenuSheetViewController *alert2 = [BHTManager newFFmpegDownloadSheet:mediaInfo downloadingURL:[NSURL URLWithString:i.url] progressView:self.hud];\n                        [alert2 tfnPresentedCustomPresentFromViewController:topMostController() animated:YES completion:nil];\n                    });\n                });\n                \n            }];\n            \n            [actions addObject:option];\n        }\n    }\n    \n    TFNMenuSheetViewController *alert = [[%c(TFNMenuSheetViewController) alloc] initWithActionItems:[NSArray arrayWithArray:actions]];\n    [alert tfnPresentedCustomPresentFromViewController:topMostController() animated:YES completion:nil];\n}\n%new - (void)downloadProgress:(float)progress {\n    self.hud.detailTextLabel.text = [BHTManager getDownloadingPersent:progress];\n}\n\n%new - (void)downloadDidFinish:(NSURL *)filePath Filename:(NSString *)fileName {\n    NSString *DocPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, true).firstObject;\n    NSFileManager *manager = [NSFileManager defaultManager];\n    NSURL *newFilePath = [[NSURL fileURLWithPath:DocPath] URLByAppendingPathComponent:[NSString stringWithFormat:@\"%@.mp4\", NSUUID.UUID.UUIDString]];\n    [manager moveItemAtURL:filePath toURL:newFilePath error:nil];\n    [self.hud dismiss];\n    [BHTManager showSaveVC:newFilePath];\n}\n%new - (void)downloadDidFailureWithError:(NSError *)error {\n    if (error) {\n        [self.hud dismiss];\n    }\n}\n%end\n\n// upload custom voice\n%hook T1MediaAttachmentsViewCell\n%property (nonatomic, strong) UIButton *uploadButton;\n- (void)updateCellElements {\n    %orig;\n\n    if ([BHTManager customVoice]) {\n        TFNButton *removeButton = [self valueForKey:@\"_removeButton\"];\n\n        if ([self.attachment isKindOfClass:%c(TTMAssetVoiceRecording)]) {\n            if (self.uploadButton == nil) {\n                self.uploadButton = [UIButton buttonWithType:UIButtonTypeCustom];\n                UIImageSymbolConfiguration *smallConfig = [UIImageSymbolConfiguration configurationWithScale:UIImageSymbolScaleSmall];\n                UIImage *arrowUpImage = [UIImage systemImageNamed:@\"arrow.up\" withConfiguration:smallConfig];\n                [self.uploadButton setImage:arrowUpImage forState:UIControlStateNormal];\n                [self.uploadButton addTarget:self action:@selector(handleUploadButton:) forControlEvents:UIControlEventTouchUpInside];\n                [self.uploadButton setTintColor:UIColor.labelColor];\n                [self.uploadButton setBackgroundColor:[UIColor blackColor]];\n                [self.uploadButton.layer setCornerRadius:29/2];\n                [self.uploadButton setTranslatesAutoresizingMaskIntoConstraints:false];\n\n                if (self.uploadButton.superview == nil) {\n                    [self addSubview:self.uploadButton];\n                    [NSLayoutConstraint activateConstraints:@[\n                        [self.uploadButton.trailingAnchor constraintEqualToAnchor:removeButton.leadingAnchor constant:-10],\n                        [self.uploadButton.topAnchor constraintEqualToAnchor:removeButton.topAnchor],\n                        [self.uploadButton.widthAnchor constraintEqualToConstant:29],\n                        [self.uploadButton.heightAnchor constraintEqualToConstant:29],\n                    ]];\n                }\n            }\n        }\n    }\n}\n%new - (void)handleUploadButton:(UIButton *)sender {\n    UIImagePickerController *videoPicker = [[UIImagePickerController alloc] init];\n    videoPicker.mediaTypes = @[(NSString*)kUTTypeMovie];\n    videoPicker.delegate = self;\n    \n    [topMostController() presentViewController:videoPicker animated:YES completion:nil];\n}\n%new - (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey,id> *)info {\n    NSURL *videoURL = info[UIImagePickerControllerMediaURL];\n    TTMAssetVoiceRecording *attachment = self.attachment;\n    NSURL *recorder_url = [NSURL fileURLWithPath:attachment.filePath];\n    \n    if (recorder_url != nil) {\n        NSFileManager *fileManager = [NSFileManager defaultManager];\n        \n        NSError *error = nil;\n        if ([fileManager fileExistsAtPath:[recorder_url path]]) {\n            [fileManager removeItemAtURL:recorder_url error:&error];\n            if (error) {\n                NSLog(@\"[BHTwitter] Error removing existing file: %@\", error);\n            }\n        }\n        \n        [fileManager copyItemAtURL:videoURL toURL:recorder_url error:&error];\n        if (error) {\n            NSLog(@\"[BHTwitter] Error copying file: %@\", error);\n        }\n    }\n    \n    [picker dismissViewControllerAnimated:true completion:nil];\n}\n%new - (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker {\n    [picker dismissViewControllerAnimated:true completion:nil];\n}\n%end\n\n\n// MARK: Color theme\n%hook TFNPagingViewController\n- (void)viewDidAppear:(_Bool)animated {\n    %orig(animated);\n    \n    static dispatch_once_t once;\n    dispatch_once(&once, ^ {\n        if ([[NSUserDefaults standardUserDefaults] objectForKey:@\"bh_color_theme_selectedColor\"]) {\n            BH_changeTwitterColor([[NSUserDefaults standardUserDefaults] integerForKey:@\"bh_color_theme_selectedColor\"]);\n        }\n    });\n}\n%end\n\n%hook TFNNavigationController\n- (void)viewDidAppear:(_Bool)animated {\n    %orig(animated);\n    \n    static dispatch_once_t once;\n    dispatch_once(&once, ^ {\n        if ([[NSUserDefaults standardUserDefaults] objectForKey:@\"bh_color_theme_selectedColor\"]) {\n            BH_changeTwitterColor([[NSUserDefaults standardUserDefaults] integerForKey:@\"bh_color_theme_selectedColor\"]);\n        }\n    });\n}\n%end\n\n%hook T1AppSplitViewController\n- (void)viewDidAppear:(_Bool)animated {\n    %orig(animated);\n    \n    static dispatch_once_t once;\n    dispatch_once(&once, ^ {\n        if ([[NSUserDefaults standardUserDefaults] objectForKey:@\"bh_color_theme_selectedColor\"]) {\n            BH_changeTwitterColor([[NSUserDefaults standardUserDefaults] integerForKey:@\"bh_color_theme_selectedColor\"]);\n        }\n    });\n}\n%end\n\n%hook NSUserDefaults\n- (void)setObject:(id)value forKey:(NSString *)defaultName {\n    if ([defaultName isEqualToString:@\"T1ColorSettingsPrimaryColorOptionKey\"]) {\n        id selectedColor = [[NSUserDefaults standardUserDefaults] objectForKey:@\"bh_color_theme_selectedColor\"];\n        if (selectedColor != nil) {\n            if ([value isEqual:selectedColor]) {\n                return %orig;\n            } else {\n                return;\n            }\n        }\n        return %orig;\n    }\n    return %orig;\n}\n%end\n\n%hook TFNNavigationBar\n- (void)setPrefersLargeTitles:(BOOL)largeTitles {\n    largeTitles = false;\n    return %orig(largeTitles);\n}\n%end\n\n// MARK: Save tweet as an image\n// Twitter 9.31 and higher\n%hook TTAStatusInlineShareButton\n- (void)didLongPressActionButton:(UILongPressGestureRecognizer *)gestureRecognizer {\n    if ([BHTManager tweetToImage]) {\n        if (gestureRecognizer.state == UIGestureRecognizerStateBegan) {\n            T1StatusInlineActionsView *actionsView = (T1StatusInlineActionsView *)self.delegate;\n            T1StatusCell *tweetView;\n            \n            if ([actionsView.superview isKindOfClass:%c(T1StandardStatusView)]) { // normal tweet in the time line\n                tweetView = [(T1StandardStatusView *)actionsView.superview eventHandler];\n            } else if ([actionsView.superview isKindOfClass:%c(T1TweetDetailsFocalStatusView)]) { // Focus tweet\n                tweetView = [(T1TweetDetailsFocalStatusView *)actionsView.superview eventHandler];\n            } else if ([actionsView.superview isKindOfClass:%c(T1ConversationFocalStatusView)]) { // Focus tweet\n                tweetView = [(T1ConversationFocalStatusView *)actionsView.superview eventHandler];\n            } else {\n                return %orig;\n            }\n            \n            UIImage *tweetImage = BH_imageFromView(tweetView);\n            UIActivityViewController *acVC = [[UIActivityViewController alloc] initWithActivityItems:@[tweetImage] applicationActivities:nil];\n            if (is_iPad()) {\n                acVC.popoverPresentationController.sourceView = self;\n                acVC.popoverPresentationController.sourceRect = self.frame;\n            }\n            [topMostController() presentViewController:acVC animated:true completion:nil];\n            return;\n        }\n    }\n    return %orig;\n}\n%end\n\n// Twitter 9.30 and lower\n%hook T1StatusInlineShareButton\n- (void)didLongPressActionButton:(UILongPressGestureRecognizer *)gestureRecognizer {\n    if ([BHTManager tweetToImage]) {\n        if (gestureRecognizer.state == UIGestureRecognizerStateBegan) {\n            T1StatusInlineActionsView *actionsView = self.delegate;\n            T1StatusCell *tweetView;\n            \n            if ([actionsView.superview isKindOfClass:%c(T1StandardStatusView)]) { // normal tweet in the time line\n                tweetView = [(T1StandardStatusView *)actionsView.superview eventHandler];\n            } else if ([actionsView.superview isKindOfClass:%c(T1TweetDetailsFocalStatusView)]) { // Focus tweet\n                tweetView = [(T1TweetDetailsFocalStatusView *)actionsView.superview eventHandler];\n            } else if ([actionsView.superview isKindOfClass:%c(T1ConversationFocalStatusView)]) { // Focus tweet\n                tweetView = [(T1ConversationFocalStatusView *)actionsView.superview eventHandler];\n            } else {\n                return %orig;\n            }\n            \n            UIImage *tweetImage = BH_imageFromView(tweetView);\n            UIActivityViewController *acVC = [[UIActivityViewController alloc] initWithActivityItems:@[tweetImage] applicationActivities:nil];\n            if (is_iPad()) {\n                acVC.popoverPresentationController.sourceView = self;\n                acVC.popoverPresentationController.sourceRect = self.frame;\n            }\n            [topMostController() presentViewController:acVC animated:true completion:nil];\n            return;\n        }\n    }\n    return %orig;\n}\n%end\n\n// MARK: Timeline download\n// THIS SOLUTION WAS TAKEN FROM Translomatic AFTER DISASSEMBLING THE DYLIB\n// SO THANKS: @foxfortmobile\n// Twitter 9.31 and higher\n%hook TTAStatusInlineActionsView\n+ (NSArray *)_t1_inlineActionViewClassesForViewModel:(id)arg1 options:(NSUInteger)arg2 displayType:(NSUInteger)arg3 account:(id)arg4 {\n    NSArray *_orig = %orig;\n    NSMutableArray *newOrig = [_orig mutableCopy];\n    \n    if ([BHTManager isVideoCell:arg1] && [BHTManager DownloadingVideos]) {\n        [newOrig addObject:%c(BHDownloadInlineButton)];\n    }\n    \n    if ([newOrig containsObject:%c(TTAStatusInlineAnalyticsButton)] && [BHTManager hideViewCount]) {\n        [newOrig removeObject:%c(TTAStatusInlineAnalyticsButton)];\n    }\n\n    if ([newOrig containsObject:%c(TTAStatusInlineBookmarkButton)] && [BHTManager hideBookmarkButton]) {\n        [newOrig removeObject:%c(TTAStatusInlineBookmarkButton)];\n    }\n    \n    return [newOrig copy];\n}\n%end\n\n// Twitter 9.30 and lower\n%hook T1StatusInlineActionsView\n+ (NSArray *)_t1_inlineActionViewClassesForViewModel:(id)arg1 options:(NSUInteger)arg2 displayType:(NSUInteger)arg3 account:(id)arg4 {\n    NSArray *_orig = %orig;\n    NSMutableArray *newOrig = [_orig mutableCopy];\n    \n    if ([BHTManager isVideoCell:arg1] && [BHTManager DownloadingVideos]) {\n        [newOrig addObject:%c(BHDownloadInlineButton)];\n    }\n    \n    return [newOrig copy];\n}\n%end\n\n\n// MARK: Always open in Safrai\n// Thanks nyuszika7h https://github.com/nyuszika7h/noinappsafari/\n%hook SFSafariViewController\n- (void)viewWillAppear:(BOOL)animated {\n    if (![BHTManager alwaysOpenSafari]) {\n        return %orig;\n    }\n    \n    NSURL *url = [self initialURL];\n    NSString *urlStr = [url absoluteString];\n    \n    // In-app browser is used for two-factor authentication with security key,\n    // login will not complete successfully if it's redirected to Safari\n    if ([urlStr containsString:@\"twitter.com/account/\"] || [urlStr containsString:@\"twitter.com/i/flow/\"]) {\n        return %orig;\n    }\n    \n    [[UIApplication sharedApplication] openURL:url options:@{} completionHandler:nil];\n    [self dismissViewControllerAnimated:NO completion:nil];\n}\n%end\n\n%hook SFInteractiveDismissController\n- (void)animateTransition:(id<UIViewControllerContextTransitioning>)transitionContext {\n    if (![BHTManager alwaysOpenSafari]) {\n        return %orig;\n    }\n    [transitionContext completeTransition:NO];\n}\n%end\n\n%hook TFSTwitterEntityURL\n- (NSString *)url {\n    // https://github.com/haoict/twitter-no-ads/blob/master/Tweak.xm#L195\n    return self.expandedURL;\n}\n%end\n\n// MARK: Disable RTL\n%hook NSParagraphStyle\n+ (NSWritingDirection)defaultWritingDirectionForLanguage:(id)lang {\n    return [BHTManager disableRTL] ? NSWritingDirectionLeftToRight : %orig;\n}\n+ (NSWritingDirection)_defaultWritingDirection {\n    return [BHTManager disableRTL] ? NSWritingDirectionLeftToRight : %orig;\n}\n%end\n\n// MARK: Bio Translate\n%hook TFNTwitterCanonicalUser\n- (_Bool)isProfileBioTranslatable {\n    return [BHTManager BioTranslate] ? true : %orig;\n}\n%end\n\n// MARK: No search history\n%hook T1SearchTypeaheadViewController // for old Twitter versions\n- (void)viewDidLoad {\n    if ([BHTManager NoHistory]) { // thanks @CrazyMind90\n        if ([self respondsToSelector:@selector(clearActionControlWantsClear:)]) {\n            [self performSelector:@selector(clearActionControlWantsClear:)];\n        }\n    }\n    %orig;\n}\n%end\n\n%hook TTSSearchTypeaheadViewController\n- (void)viewDidLoad {\n    if ([BHTManager NoHistory]) { // thanks @CrazyMind90\n        if ([self respondsToSelector:@selector(clearActionControlWantsClear:)]) {\n            [self performSelector:@selector(clearActionControlWantsClear:)];\n        }\n    }\n    %orig;\n}\n%end\n\n// MARK: Voice, SensitiveTweetWarnings, autoHighestLoad, VideoZoom, VODCaptions, disableSpacesBar feature\n%hook TPSTwitterFeatureSwitches\n// Twitter save all the features and keys in side JSON file in bundle of application fs_embedded_defaults_production.json, and use it in TFNTwitterAccount class but with DM voice maybe developers forget to add boolean variable in the class, so i had to change it from the file.\n// also, you can find every key for every feature i used in this tweak, i can remove all the codes below and find every key for it but I'm lazy to do that, :)\n- (BOOL)boolForKey:(NSString *)key {\n    if ([key isEqualToString:@\"edit_tweet_enabled\"] || [key isEqualToString:@\"edit_tweet_ga_composition_enabled\"] || [key isEqualToString:@\"edit_tweet_pdp_dialog_enabled\"] || [key isEqualToString:@\"edit_tweet_upsell_enabled\"]) {\n        return true;\n    }\n    \n    if ([key isEqualToString:@\"conversational_replies_ios_pinned_replies_consumption_enabled\"] || [key isEqualToString:@\"conversational_replies_ios_pinned_replies_creation_enabled\"]) {\n        return true;\n    }\n    \n    return %orig;\n}\n%end\n\n// MARK: Force Tweets to show images as Full frame: https://github.com/BandarHL/BHTwitter/issues/101\n%hook T1StandardStatusAttachmentViewAdapter\n- (NSUInteger)displayType {\n    if (self.attachmentType == 2) {\n        return [BHTManager forceTweetFullFrame] ? 1 : %orig;\n    }\n    return %orig;\n}\n%end\n\n%hook T1HomeTimelineItemsViewController\n- (void)_t1_initializeFleets {\n    if ([BHTManager hideSpacesBar]) {\n        return;\n    }\n    return %orig;\n}\n%end\n\n%hook THFHomeTimelineItemsViewController\n- (void)_t1_initializeFleets {\n    if ([BHTManager hideSpacesBar]) {\n        return;\n    }\n    return %orig;\n}\n%end\n\n%hook THFHomeTimelineContainerViewController\n- (void)_t1_showPremiumUpsellIfNeeded {\n    if ([BHTManager hidePremiumOffer]) {\n        return;\n    }\n    return %orig;\n}\n- (void)_t1_showPremiumUpsellIfNeededWithScribing:(BOOL)arg1 {\n    if ([BHTManager hidePremiumOffer]) {\n        return;\n    }\n    return %orig;\n}\n%end\n\n%hook TFNTwitterMediaUploadConfiguration\n- (_Bool)photoUploadHighQualityImagesSettingIsVisible {\n    return [BHTManager autoHighestLoad] ? true : %orig;\n}\n%end\n\n%hook T1SlideshowViewController\n- (_Bool)_t1_shouldDisplayLoadHighQualityImageItemForImageDisplayView:(id)arg1 highestQuality:(_Bool)arg2 {\n    return [BHTManager autoHighestLoad] ? true : %orig;\n}\n- (id)_t1_loadHighQualityActionItemWithTitle:(id)arg1 forImageDisplayView:(id)arg2 highestQuality:(_Bool)arg3 {\n    if ([BHTManager autoHighestLoad]) {\n        arg3 = true;\n    }\n    return %orig(arg1, arg2, arg3);\n}\n%end\n\n%hook T1ImageDisplayView\n- (_Bool)_tfn_shouldUseHighestQualityImage {\n    return [BHTManager autoHighestLoad] ? true : %orig;\n}\n- (_Bool)_tfn_shouldUseHighQualityImage {\n    return [BHTManager autoHighestLoad] ? true : %orig;\n}\n%end\n\n%hook T1HighQualityImagesUploadSettings\n- (_Bool)shouldUploadHighQualityImages {\n    return [BHTManager autoHighestLoad] ? true : %orig;\n}\n%end\n\n%hook TFSTwitterAPICommandAccountStateProvider\n- (_Bool)allowPromotedContent {\n    return [BHTManager HidePromoted] ? true : %orig;\n}\n%end\n\n%hook TFNTwitterAccount\n- (_Bool)isEditProfileUsernameEnabled {\n    return true;\n}\n- (_Bool)isEditTweetConsumptionEnabled {\n    return true;\n}\n- (_Bool)isSensitiveTweetWarningsComposeEnabled {\n    return [BHTManager disableSensitiveTweetWarnings] ? false : %orig;\n}\n- (_Bool)isSensitiveTweetWarningsConsumeEnabled {\n    return [BHTManager disableSensitiveTweetWarnings] ? false : %orig;\n}\n- (_Bool)isVideoDynamicAdEnabled {\n    return [BHTManager HidePromoted] ? false : %orig;\n}\n\n- (_Bool)isVODCaptionsEnabled {\n    return [BHTManager DisableVODCaptions] ? false : %orig;\n}\n- (_Bool)photoUploadHighQualityImagesSettingIsVisible {\n    return [BHTManager autoHighestLoad] ? true : %orig;\n}\n- (_Bool)loadingHighestQualityImageVariantPermitted {\n    return [BHTManager autoHighestLoad] ? true : %orig;\n}\n- (_Bool)isDoubleMaxZoomFor4KImagesEnabled {\n    return [BHTManager autoHighestLoad] ? true : %orig;\n}\n%end\n\n// MARK: Tweet confirm\n%hook T1TweetComposeViewController\n- (void)_t1_didTapSendButton:(UIButton *)tweetButton {\n    if ([BHTManager TweetConfirm]) {\n        [%c(FLEXAlert) makeAlert:^(FLEXAlert *make) {\n            make.message([[BHTBundle sharedBundle] localizedStringForKey:@\"CONFIRM_ALERT_MESSAGE\"]);\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"YES_BUTTON_TITLE\"]).handler(^(NSArray<NSString *> *strings) {\n                %orig;\n            });\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"NO_BUTTON_TITLE\"]).cancelStyle();\n        } showFrom:topMostController()];\n    } else {\n        return %orig;\n    }\n}\n- (void)_t1_handleTweet {\n    if ([BHTManager TweetConfirm]) {\n        [%c(FLEXAlert) makeAlert:^(FLEXAlert *make) {\n            make.message([[BHTBundle sharedBundle] localizedStringForKey:@\"CONFIRM_ALERT_MESSAGE\"]);\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"YES_BUTTON_TITLE\"]).handler(^(NSArray<NSString *> *strings) {\n                %orig;\n            });\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"NO_BUTTON_TITLE\"]).cancelStyle();\n        } showFrom:topMostController()];\n    } else {\n        return %orig;\n    }\n}\n\n// MARK: Status tweet\n- (BOOL)_t1_isVibeCompositionEnabled {\n    return true;\n}\n// MARK: CoTweet\n- (BOOL)isTweetCollaborationEnabled {\n    return true;\n}\n- (BOOL)_t1_canEnableCollaboration {\n    return true;\n}\n%end\n\n// MARK: Follow confirm\n%hook TUIFollowControl\n- (void)_followUser:(id)arg1 event:(id)arg2 {\n    if ([BHTManager FollowConfirm]) {\n        [%c(FLEXAlert) makeAlert:^(FLEXAlert *make) {\n            make.message([[BHTBundle sharedBundle] localizedStringForKey:@\"CONFIRM_ALERT_MESSAGE\"]);\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"YES_BUTTON_TITLE\"]).handler(^(NSArray<NSString *> *strings) {\n                %orig;\n            });\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"NO_BUTTON_TITLE\"]).cancelStyle();\n        } showFrom:topMostController()];\n    } else {\n        return %orig;\n    }\n}\n%end\n\n// MARK: Like confirm\n%hook TTAStatusInlineFavoriteButton\n- (void)didTap {\n    if ([BHTManager LikeConfirm]) {\n        [%c(FLEXAlert) makeAlert:^(FLEXAlert *make) {\n            make.message([[BHTBundle sharedBundle] localizedStringForKey:@\"CONFIRM_ALERT_MESSAGE\"]);\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"YES_BUTTON_TITLE\"]).handler(^(NSArray<NSString *> *strings) {\n                %orig;\n            });\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"NO_BUTTON_TITLE\"]).cancelStyle();\n        } showFrom:topMostController()];\n    } else {\n        return %orig;\n    }\n}\n%end\n\n%hook T1StatusInlineFavoriteButton\n- (void)didTap {\n    if ([BHTManager LikeConfirm]) {\n        [%c(FLEXAlert) makeAlert:^(FLEXAlert *make) {\n            make.message([[BHTBundle sharedBundle] localizedStringForKey:@\"CONFIRM_ALERT_MESSAGE\"]);\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"YES_BUTTON_TITLE\"]).handler(^(NSArray<NSString *> *strings) {\n                %orig;\n            });\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"NO_BUTTON_TITLE\"]).cancelStyle();\n        } showFrom:topMostController()];\n    } else {\n        return %orig;\n    }\n}\n%end\n\n%hook T1ImmersiveExploreCardView\n- (void)handleDoubleTap:(id)arg1 {\n    if ([BHTManager LikeConfirm]) {\n        [%c(FLEXAlert) makeAlert:^(FLEXAlert *make) {\n            make.message([[BHTBundle sharedBundle] localizedStringForKey:@\"CONFIRM_ALERT_MESSAGE\"]);\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"YES_BUTTON_TITLE\"]).handler(^(NSArray<NSString *> *strings) {\n                %orig;\n            });\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"NO_BUTTON_TITLE\"]).cancelStyle();\n        } showFrom:topMostController()];\n    } else {\n        return %orig;\n    }\n}\n%end\n\n%hook T1TweetDetailsViewController\n- (void)_t1_toggleFavoriteOnCurrentStatus {\n    if ([BHTManager LikeConfirm]) {\n        [%c(FLEXAlert) makeAlert:^(FLEXAlert *make) {\n            make.message([[BHTBundle sharedBundle] localizedStringForKey:@\"CONFIRM_ALERT_MESSAGE\"]);\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"YES_BUTTON_TITLE\"]).handler(^(NSArray<NSString *> *strings) {\n                %orig;\n            });\n            make.button([[BHTBundle sharedBundle] localizedStringForKey:@\"NO_BUTTON_TITLE\"]).cancelStyle();\n        } showFrom:topMostController()];\n    } else {\n        return %orig;\n    }\n}\n%end\n\n// MARK: Undo tweet\n%hook TFNTwitterToastNudgeExperimentModel\n- (BOOL)shouldShowShowUndoTweetSentToast {\n    return [BHTManager UndoTweet] ? true : %orig;\n}\n%end\n\n// MARK: Old tweet style\n%hook TTACoreAnatomyFeatures\n- (BOOL)isUnifiedCardEnabled {\n    return [BHTManager OldStyle] ? false : %orig;\n}\n- (BOOL)isModernStatusViewsQuoteTweetEnabled {\n    return [BHTManager OldStyle] ? false : %orig;\n}\n- (BOOL)isEdgeToEdgeContentEnabled {\n    return [BHTManager OldStyle] ? false : %orig;\n}\n%end\n\n// MARK: BHTwitter settings\n%hook TFNActionItem\n%new + (instancetype)actionItemWithTitle:(NSString *)arg1 systemImageName:(NSString *)arg2 action:(void (^)(void))arg3 {\n    TFNActionItem *_self = [%c(TFNActionItem) actionItemWithTitle:arg1 imageName:nil action:arg3];\n    [_self setValue:[UIImage systemImageNamed:arg2] forKey:@\"_image\"];\n    return _self;\n}\n%end\n\n%hook TFNSettingsNavigationItem\n%new - (instancetype)initWithTitle:(NSString *)arg1 detail:(NSString *)arg2 systemIconName:(NSString *)arg3 controllerFactory:(UIViewController* (^)(void))arg4 {\n    TFNSettingsNavigationItem *_self = [[%c(TFNSettingsNavigationItem) alloc] initWithTitle:arg1 detail:arg2 iconName:arg3 controllerFactory:arg4];\n    [_self setValue:[UIImage systemImageNamed:arg3] forKey:@\"_icon\"];\n    return _self;\n}\n%end\n\n%hook T1GenericSettingsViewController\n- (void)viewWillAppear:(BOOL)arg1 {\n    %orig;\n    if ([self.sections count] == 1) {\n        TFNItemsDataViewControllerBackingStore *backingStore = self.backingStore;\n        TFNSettingsNavigationItem *bhtwitter = [[%c(TFNSettingsNavigationItem) alloc] initWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"BHTWITTER_SETTINGS_TITLE\"] detail:[[BHTBundle sharedBundle] localizedStringForKey:@\"BHTWITTER_SETTINGS_DETAIL\"] systemIconName:@\"gear\" controllerFactory:^UIViewController *{\n            return [BHTManager BHTSettingsWithAccount:self.account];\n        }];\n        \n        if ([backingStore respondsToSelector:@selector(insertSection:atIndex:)]) {\n            [backingStore insertSection:0 atIndex:0];\n        } else {\n            [backingStore _tfn_insertSection:0 atIndex:0];\n        }\n        if ([backingStore respondsToSelector:@selector(insertItem:atIndexPath:)]) {\n            [backingStore insertItem:bhtwitter atIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];\n        } else {\n            [backingStore _tfn_insertItem:bhtwitter atIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];\n        }\n    }\n}\n%end\n\n%hook T1SettingsViewController\n- (void)viewWillAppear:(BOOL)arg1 {\n    %orig;\n    if ([self.sections count] == 2) {\n        TFNItemsDataViewControllerBackingStore *DataViewControllerBackingStore = self.backingStore;\n        [DataViewControllerBackingStore insertSection:0 atIndex:0];\n        [DataViewControllerBackingStore insertItem:@\"Row 0 \" atIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];\n        [DataViewControllerBackingStore insertItem:@\"Row1\" atIndexPath:[NSIndexPath indexPathForRow:1 inSection:0]];\n    }\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n    if (indexPath.section == 0 && indexPath.row ==1 ) {\n        \n        TFNTextCell *Tweakcell = [[%c(TFNTextCell) alloc] init];\n        [Tweakcell setAccessoryType:UITableViewCellAccessoryDisclosureIndicator];\n        [Tweakcell.textLabel setText:[[BHTBundle sharedBundle] localizedStringForKey:@\"BHTWITTER_SETTINGS_DETAIL\"]];\n        return Tweakcell;\n    } else if (indexPath.section == 0 && indexPath.row ==0 ) {\n        \n        TFNTextCell *Settingscell = [[%c(TFNTextCell) alloc] init];\n        [Settingscell setBackgroundColor:[UIColor clearColor]];\n        Settingscell.textLabel.textColor = [UIColor colorWithRed:0.40 green:0.47 blue:0.53 alpha:1.0];\n        [Settingscell.textLabel setText:[[BHTBundle sharedBundle] localizedStringForKey:@\"BHTWITTER_SETTINGS_TITLE\"]];\n        return Settingscell;\n    }\n    \n    \n    return %orig;\n}\n\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {\n    if ([indexPath section]== 0 && [indexPath row]== 1) {\n        [self.navigationController pushViewController:[BHTManager BHTSettingsWithAccount:self.account] animated:true];\n    } else {\n        return %orig;\n    }\n}\n%end\n\n// MARK: Change font\n%hook UIFontPickerViewController\n- (void)viewWillAppear:(BOOL)arg1 {\n    %orig(arg1);\n    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"CUSTOM_FONTS_NAVIGATION_BUTTON_TITLE\"] style:UIBarButtonItemStylePlain target:self action:@selector(customFontsHandler)];\n}\n%new - (void)customFontsHandler {\n    if ([[NSFileManager defaultManager] fileExistsAtPath:@\"/var/mobile/Library/Fonts/AddedFontCache.plist\"]) {\n        NSAttributedString *AttString = [[NSAttributedString alloc] initWithString:[[BHTBundle sharedBundle] localizedStringForKey:@\"CUSTOM_FONTS_MENU_TITLE\"] attributes:@{\n            NSFontAttributeName: [[%c(TAEStandardFontGroup) sharedFontGroup] headline2BoldFont],\n            NSForegroundColorAttributeName: UIColor.labelColor\n        }];\n        TFNActiveTextItem *title = [[%c(TFNActiveTextItem) alloc] initWithTextModel:[[%c(TFNAttributedTextModel) alloc] initWithAttributedString:AttString] activeRanges:nil];\n        \n        NSMutableArray *actions = [[NSMutableArray alloc] init];\n        [actions addObject:title];\n        \n        NSPropertyListFormat plistFormat;\n        NSMutableDictionary *plistDictionary = [NSPropertyListSerialization propertyListWithData:[NSData dataWithContentsOfURL:[NSURL fileURLWithPath:@\"/var/mobile/Library/Fonts/AddedFontCache.plist\"]] options:NSPropertyListImmutable format:&plistFormat error:nil];\n        [plistDictionary enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {\n            @try {\n                NSString *fontName = ((NSMutableArray *)[[plistDictionary valueForKey:key] valueForKey:@\"psNames\"]).firstObject;\n                TFNActionItem *fontAction = [%c(TFNActionItem) actionItemWithTitle:fontName action:^{\n                    if (self.configuration.includeFaces) {\n                        [self setSelectedFontDescriptor:[UIFontDescriptor fontDescriptorWithFontAttributes:@{\n                            UIFontDescriptorNameAttribute: fontName\n                        }]];\n                    } else {\n                        [self setSelectedFontDescriptor:[UIFontDescriptor fontDescriptorWithFontAttributes:@{\n                            UIFontDescriptorFamilyAttribute: fontName\n                        }]];\n                    }\n                    [self.delegate fontPickerViewControllerDidPickFont:self];\n                }];\n                [actions addObject:fontAction];\n            } @catch (NSException *exception) {\n                NSLog(@\"Unable to find installed fonts /n reason: %@\", exception.reason);\n            }\n        }];\n        \n        TFNMenuSheetViewController *alert = [[%c(TFNMenuSheetViewController) alloc] initWithActionItems:[NSArray arrayWithArray:actions]];\n        [alert tfnPresentedCustomPresentFromViewController:self animated:YES completion:nil];\n    } else {\n        UIAlertController *errAlert = [UIAlertController alertControllerWithTitle:@\"BHTwitter\" message:[[BHTBundle sharedBundle] localizedStringForKey:@\"CUSTOM_FONTS_TUT_ALERT_MESSAGE\"] preferredStyle:UIAlertControllerStyleAlert];\n        \n        [errAlert addAction:[UIAlertAction actionWithTitle:@\"iFont application\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {\n            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@\"https://apps.apple.com/sa/app/ifont-find-install-any-font/id1173222289\"] options:@{} completionHandler:nil];\n        }]];\n        [errAlert addAction:[UIAlertAction actionWithTitle:[[BHTBundle sharedBundle] localizedStringForKey:@\"OK_BUTTON_TITLE\"] style:UIAlertActionStyleCancel handler:nil]];\n        [self presentViewController:errAlert animated:true completion:nil];\n    }\n}\n%end\n\n%hook TAEStandardFontGroup\n+ (TAEStandardFontGroup *)sharedFontGroup {\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        NSMutableArray *fontsMethods = [NSMutableArray arrayWithArray:@[]];\n        \n        unsigned int methodCount = 0;\n        Method *methods = class_copyMethodList([self class], &methodCount);\n        for (unsigned int i = 0; i < methodCount; ++i) {\n            Method method = methods[i];\n            SEL sel = method_getName(method);\n            NSString *selStr = NSStringFromSelector(sel);\n            \n            NSMethodSignature *methodSig = [self instanceMethodSignatureForSelector:sel];\n            if (strcmp(methodSig.methodReturnType, @encode(void)) == 0) {\n                // Only add methods that return an object\n                continue;\n            } else if (methodSig.numberOfArguments == 2) {\n                // - (id)bodyFont; ...\n                [fontsMethods addObject:selStr];\n            } else if (methodSig.numberOfArguments == 3\n                       && strcmp([methodSig getArgumentTypeAtIndex:2], @encode(CGFloat)) == 0) {\n                // - (id)fontOfSize:(CGFloat); ...\n                [fontsMethods addObject:selStr];\n            } else if (methodSig.numberOfArguments == 4\n                       && strcmp([methodSig getArgumentTypeAtIndex:2], @encode(CGFloat)) == 0\n                       && strcmp([methodSig getArgumentTypeAtIndex:3], @encode(CGFloat)) == 0) {\n                // - (id)monospacedDigitalFontOfSize:(CGFloat) weight:(CGFloat); ...\n                [fontsMethods addObject:selStr];\n            } else {\n                NSLog(@\"[BHTwitter] Method (%@) with unknown signiture (%@) in TAEStandardFontGroup\", selStr, methodSig);\n            }\n        }\n        free(methods);\n        \n        originalFontsIMP = [NSMutableDictionary new];\n        batchSwizzlingOnClass([self class], [fontsMethods copy], (IMP)TAEStandardFontGroupReplacement);\n    });\n    return %orig;\n}\n%end\n\n%hook HBForceCepheiPrefs\n+ (BOOL)forceCepheiPrefsWhichIReallyNeedToAccessAndIKnowWhatImDoingISwear {\n    return YES;\n}\n%end\n\n// MARK: Show Scroll Bar\n%hook TFNTableView\n- (void)setShowsVerticalScrollIndicator:(BOOL)arg1 {\n    %orig([BHTManager showScrollIndicator]);\n}\n%end\n\n// MARK: Clean tracking from copied links: https://github.com/BandarHL/BHTwitter/issues/75\n%ctor {\n    NSNotificationCenter *center = [NSNotificationCenter defaultCenter];\n    NSOperationQueue *mainQueue = [NSOperationQueue mainQueue];\n    // Someone needs to hold reference the to Notification\n    _PasteboardChangeObserver = [center addObserverForName:UIPasteboardChangedNotification object:nil queue:mainQueue usingBlock:^(NSNotification * _Nonnull note){\n        \n        static dispatch_once_t onceToken;\n        dispatch_once(&onceToken, ^{\n            trackingParams = @{\n                @\"twitter.com\" : @[@\"s\", @\"t\"],\n                @\"x.com\" : @[@\"s\", @\"t\"],\n            };\n        });\n        \n        if ([BHTManager stripTrackingParams]) {\n            if (UIPasteboard.generalPasteboard.hasURLs) {\n                NSURL *pasteboardURL = UIPasteboard.generalPasteboard.URL;\n                NSArray<NSString*>* params = trackingParams[pasteboardURL.host];\n                \n                if ([pasteboardURL.absoluteString isEqualToString:_lastCopiedURL] == NO && params != nil && pasteboardURL.query != nil) {\n                    // to prevent endless copy loop\n                    _lastCopiedURL = pasteboardURL.absoluteString;\n                    NSURLComponents *cleanedURL = [NSURLComponents componentsWithURL:pasteboardURL resolvingAgainstBaseURL:NO];\n                    NSMutableArray<NSURLQueryItem*> *safeParams = [NSMutableArray arrayWithCapacity:0];\n                    \n                    for (NSURLQueryItem *item in cleanedURL.queryItems) {\n                        if ([params containsObject:item.name] == NO) {\n                            [safeParams addObject:item];\n                        }\n                    }\n                    cleanedURL.queryItems = safeParams.count > 0 ? safeParams : nil;\n\n                    if ([[NSUserDefaults standardUserDefaults] objectForKey:@\"tweet_url_host\"]) {\n                        NSString *selectedHost = [[NSUserDefaults standardUserDefaults] objectForKey:@\"tweet_url_host\"];\n                        cleanedURL.host = selectedHost;\n                    }\n                    UIPasteboard.generalPasteboard.URL = cleanedURL.URL;\n                }\n            }\n        }\n    }];\n    %init;\n}\n\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 2.509765625,
          "content": "#!/bin/bash\n\nLONG=sideloaded:,rootless:,trollstore\nOPTS=$(getopt -a weather --longoptions \"$LONG\" -- \"$@\")\n\nwhile :; do\n  case \"$1\" in\n    --sideloaded)\n      echo -e '\\033[1m\\033[32mBuilding BHTwitter project for sideloaded.\\033[0m'\n\n      make clean\n      rm -rf .theos\n      make SIDELOADED=1\n\n      if [ $? -eq 0 ]; then\n        echo -e '\\033[1m\\033[32mMake command succeeded.\\033[0m'\n      else\n        echo -e '\\033[1m\\033[31mMake command failed.\\033[0m'\n        exit 1\n      fi\n\n      if [ -e ./packages/com.atebits.Tweetie2.ipa ]; then\n        echo -e '\\033[1m\\033[32mBuilding the IPA.\\033[0m'\n        cyan -i packages/com.atebits.Tweetie2.ipa -o packages/BHTwitter-sideloaded --ignore-encrypted \\\n          -uwf .theos/obj/debug/keychainfix.dylib .theos/obj/debug/libbhFLEX.dylib \\\n          .theos/obj/debug/BHTwitter.dylib layout/Library/Application\\ Support/BHT/BHTwitter.bundle\n\n        echo -e '\\033[1m\\033[32mDone, thanks for using BHTwitter.\\033[0m'\n      else\n        echo -e '\\033[1m\\033[0;31mpackages/com.atebits.Tweetie2.ipa not found.\\033[0m'\n      fi\n      break\n      ;;\n    --rootless)\n      echo -e '\\033[1m\\033[32mBuilding BHTwitter project for Rootless.\\033[0m'\n\n      make clean\n      rm -rf .theos\n      export THEOS_PACKAGE_SCHEME=rootless\n      make package\n\n      echo -e '\\033[1m\\033[32mDone, thanks for using BHTwitter.\\033[0m'\n      break\n      ;;\n    --trollstore)\n      echo -e '\\033[1m\\033[32mBuilding BHTwitter project for TrollStore.\\033[0m'\n\n      make clean\n      rm -rf .theos\n      make\n\n      if [ $? -eq 0 ]; then\n        echo -e '\\033[1m\\033[32mMake command succeeded.\\033[0m'\n      else\n        echo -e '\\033[1m\\033[31mMake command failed.\\033[0m'\n        exit 1\n      fi\n\n      if [ -e ./packages/com.atebits.Tweetie2.ipa ]; then\n        echo -e '\\033[1m\\033[32mBuilding the IPA.\\033[0m'\n\n        cyan -i packages/com.atebits.Tweetie2.ipa -o packages/BHTwitter-trollstore.tipa --ignore-encrypted \\\n          -uwf .theos/obj/debug/BHTwitter.dylib .theos/obj/debug/libbhFLEX.dylib layout/Library/Application\\ Support/BHT/BHTwitter.bundle\n\n        echo -e '\\033[1m\\033[32mDone, thanks for using BHTwitter.\\033[0m'\n      else\n        echo -e '\\033[1m\\033[0;31mpackages/com.atebits.Tweetie2.ipa not found.\\033[0m'\n      fi\n      break\n      ;;\n    *)\n      echo -e '\\033[1m\\033[32mBuilding BHTwitter project for Rootfull.\\033[0m'\n\n      make clean\n      rm -rf .theos\n      unset THEOS_PACKAGE_SCHEME\n      make package\n\n      echo -e '\\033[1m\\033[32mDone, thanks for using BHTwitter.\\033[0m'\n      break\n      ;;\n  esac\ndone\n"
        },
        {
          "name": "control",
          "type": "blob",
          "size": 0.2333984375,
          "content": "Package: com.bandarhl.bhtwitter\nName: BHTwitter\nVersion: 4.3\nArchitecture: iphoneos-arm\nDescription: Awesome tweak for Twitter\nMaintainer: Bandar Alruwaili\nAuthor: Bandar Alruwaili\nSection: Tweaks\nDepends: mobilesubstrate, ws.hbang.common\n"
        },
        {
          "name": "ffmpeg",
          "type": "tree",
          "content": null
        },
        {
          "name": "keychainfix",
          "type": "tree",
          "content": null
        },
        {
          "name": "layout",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libflex",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}