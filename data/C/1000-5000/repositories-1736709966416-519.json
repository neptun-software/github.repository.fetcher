{
  "metadata": {
    "timestamp": 1736709966416,
    "page": 519,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "satori-com/tcpkali",
      "stars": 2294,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.3271484375,
          "content": "---\nLanguage:        Cpp\nBasedOnStyle:  Google\nAllowShortFunctionsOnASingleLine: None\nAlwaysBreakAfterDefinitionReturnType: TopLevel\nBreakBeforeBinaryOperators: NonAssignment\nForEachMacros:       [ TQ_FOR ]\nIndentCaseLabels:    false\nIndentWidth:         4\nMaxEmptyLinesToKeep: 2\nSpaceBeforeParens:   false\nTabWidth:            4\n...\n\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.341796875,
          "content": "# Editor swaps\n*.swp\n*~\n.libs\n.deps\n*.o\n*.la\n*.lo\n*.log\n*.trs\n\ndeps/libev/ev.3\n\nm4/*\nconfig/\nautom4te.cache\n\n# Regenerated by autoreconf -iv\naclocal.m4\nconfig.h.in\nconfigure\n\n# Regenerated by ./configure\nconfig.log\nconfig.status\nlibtool\nstamp-h1\nconfig.h\n\nMakefile\nMakefile.in\n\ntcpkali\ncheck_*\n\n# Ignore package generated by `make dist`\ntcpkali-*.gz\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1767578125,
          "content": "language: c\nsudo: false\ncompiler:\n  - gcc\n  - clang\nbefore_script:\n  - pip install --user pep8 pylint\nscript:\n  - autoreconf -iv && ./configure\n  - make -C test lint\n  - make check\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 3.3896484375,
          "content": "\n1.1.3:\n    * Fix for \\{message.marker} in presence of -1.\n    * Switch to hexadecimal output of non-printable characters (-d).\n\n1.1.1:  2017-Jan-20\n    * Release distribution fix.\n\n1.1:    2017-Jan-19\n    * Support rsv1, rsv2, rsv3 reserved flags in in \\{ws.* <reserved-flag>}.\n    * Fix statsd output for connections.opened.\n    * Support for \\{raw Expression}, which removes ws framing.\n    * '-vvv' option does not dump the traffic. Use -d or --dump-* options.\n    * Added units (ms) to latency percentiles output.\n    * Add ability to specify host in -l [host:]port.\n    * \\{message.marker} inserts a detectable timestamp to count messages/s.\n\n1.0:    2016-Sep-29\n    * Export --latency-connect and --latency-first-bytes to statsd.\n    * --latency-percentiles now affect --statsd reporting as well.\n    * Added -H, --header to add HTTP headers to WebSocket handshake.\n    * Added --message-stop to quickly die if a given message is seen.\n\n0.9:\t2016-Aug-24\n    * Added -r@<Latency> form to measure message rate at a given latency.\n    * Websocket frame types in expressions: \\{ws.ping}, \\{ws.pong}, etc.\n    * Websocket frames accept files: \\{ws.binary <image.png>}.\n    * Websocket frames can be non-final: \\{ws.binary ...}.\n    * Regular expressions as data generators: \\{re <regex>}.\n    * Display last received bytes with --verbose 2.\n\n0.8:    2016-Jan-15\n    * Added --latency-connect to measure connect latency.\n    * Added --latency-first-byte to measure latency to first byte.\n    * Added --latency-percentiles to control percentile reporting.\n    * Mean/max latencies for messages are not reported, for UI consistency.\n      Use --latency-percentiles 50,100 to display.\n    * Added --dump-{one,all}{,-in,-out} to dump all or one connections' i/o.\n    * Added --write-combine=off to emit high packet rates.\n\n0.7:    2015-Dec-11\n    * Added a manual page.\n    * Exceed 64k connections limit by using IP aliases on network interfaces.\n      This is a default behavior.\n    * --latency-marker-skip <N> to ignore the first occurrences of a marker.\n    * --listen-mode=active to send data for connections received through -l.\n    * --source-ip <IP> option to restrict or change source IPs.\n    * \"Bandwidth per channel:\" output changed to â‡… to reflect bi-direction.\n\n0.6:    2015-May-13\n    * Parse \\{connection.uid} type expressions in\n      --first-message, --message, --latency-marker parameters,\n      allowing constructing payloads unique per connection.\n    * Added \"k\" multiplier to --connections;\n      allowing for a -c10k option (inside joke ;)\n\n0.5:    2015-Apr-14\n    * --enable-asan and --enable-tsan flags to enable address/thread sanitizer.\n    * Do not account latencies for --first-message.\n\n0.4.9:\t2015-Apr-09\n    * Maximum storable latency increased from 10s to 100s.\n    * -e (--unescape-message-args) now affect --latency-marker string as well.\n    * --websocket now awaits response after sending HTTP upgrade headers.\n    * Add WebSocket masking on client->server communication (mandated by RFC).\n    * Use Boyer-Moore-Horspool to search --latency-marker in the stream.\n    * Add --sndbuf and --rcvbuf command line options to adjust kernel buffers\n      via setsockopt(SO_*BUF).\n    * Record latencies even if only a portion of a message has been sent.\n\n0.4.2:  2015-Feb-23\n    * --channel-bandwidth limit is now applicable to sink mode (--listen-port).\n    * Build and run on 32-bit platforms.\n\n0.4:    2015-Feb-03\n    * Initial release.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.314453125,
          "content": "tcpkali\n\nCopyright (c) 2014, 2015, 2016  Machine Zone, Inc.\n\nOriginal author: Lev Walkin <lwalkin@machinezone.com>\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.3935546875,
          "content": "\nACLOCAL_AMFLAGS = -I m4\n\nSUBDIRS = asn1 doc deps src test\n\nif GNU_STYLE_OPTIONAL_INCLUDE\n##\n## Building MZ-specific RPM.\n##\nPKG_NAME=@PACKAGE@\nPKG_VERSION=@PACKAGE_VERSION@\nPKG_PREFIX=/usr/local\n.PHONY: pkgroot\npkgroot:: src\n\trm -rf pkgroot\n\tmkdir -p pkgroot/bin pkgroot/share/man/man1\n\tcp $(builddir)/src/tcpkali pkgroot/bin\n\tcp $(srcdir)/doc/tcpkali.1 pkgroot/share/man/man1\n-include mz-rpm.mk\nendif\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.396484375,
          "content": "\n# About\n\n`tcpkali` is a high performance TCP and WebSocket load generator and sink.\n\n![tcpkali mascot](doc/images/tcpkali-mascot.png)\n\n# Features\n\n * Opens millions of connections from a single host by using available interface aliases.\n * Efficient multi-core operation (`--workers`); utilizes all available cores by default.\n * Allows opening massive number of connections (`--connections`)\n * Allows limiting an upstream and downstream of a single connection throughput (`--channel-bandwidth-downstream`, `--channel-bandwidth-upstream` or `--message-rate`)\n * Allows specifying the first and subsequent messages (`--message`, `--first-message`).\n * Measures response latency percentiles using [HdrHistogram](https://github.com/HdrHistogram) (`--latency-marker`)\n * Sends stats to StatsD/DataDog (`--statsd`)\n\n# Quick example: testing a web server\n\n    tcpkali -em \"GET / HTTP/1.1\\r\\nHost: google.com\\r\\n\\r\\n\" -r 10 \\\n            --latency-marker \"HTTP/1.1\" google.com:80\n\n# Install\n\n## From packages\n\n| OS       | Package manager                         | Command                |\n| -------- | --------------------------------------- | ---------------------- |\n| Mac OS X | [Homebrew](http://brew.sh/)             | `brew install tcpkali` |\n| Mac OS X | [MacPorts](https://www.macports.org/)   | `port install tcpkali` |\n| FreeBSD  | [pkgng](https://wiki.freebsd.org/pkgng) | `pkg install tcpkali`  |\n| Linux    | [nix](https://nixos.org/nix/)           | `nix-env -i tcpkali`   |\n\n## From sources\n\nInstall the following packages first:\n\n * autoconf\n * automake\n * libtool\n * bison\n * flex\n * gcc-c++\n * ncurses-devel or equivalent ncurses package, *optional*.\n\n**Build and install:**\n\n    test -f configure || autoreconf -iv\n    ./configure\n    make\n    sudo make install\n\n[![Build Status](https://travis-ci.org/satori-com/tcpkali.svg?branch=master)](https://travis-ci.org/satori-com/tcpkali)\n\n# Usage (Short version)\n\n    Usage: tcpkali [OPTIONS] [-l <port>] [<host:port>...]\n    Where some OPTIONS are:\n      -h                   Print this help screen, then exit\n      --help               Print long help screen, then exit\n      -d                   Dump i/o data for a single connection\n\n      -c <N>               Connections to keep open to the destinations\n      -l <port>            Listen on the specified port\n      --ws, --websocket    Use RFC6455 WebSocket transport\n      -T <Time=10s>        Exit after the specified amount of time\n\n      -e                   Unescape backslash-escaping in a message string\n      -1 <string>          Message to send to the remote host once\n      -m <string>          Message to repeatedly send to the remote\n      -r <Rate>            Messages per second to send in a connection\n\n    Variable units and recognized multipliers:\n      <N>, <Rate>:  k (1000, as in \"5k\" is 5000), m (1000000)\n      <Time>:       ms, s, m, h, d (milliseconds, seconds, minutes, hours, days)\n      <Rate> and <Time> can be fractional values, such as 0.25.\n\nYou can get the full list of options using `tcpkali --help`, from\n`man tcpkali`, and by consulting the\n[tcpkali man page source](doc/tcpkali.man.md).\n\n# Usage Examples\n<details>\n<summary>A few command line examples</summary>\n\n## TCP Examples\n\nConnect to a local web server and do nothing:\n\n    tcpkali 127.0.0.1:80\n\nConnect to a local echo server and hammer it with stream of dollars:\n\n    tcpkali --message '$' localhost:echo\n    tcpkali -m '$' localhost:echo\n\nOpen 10000 connections to two remote servers:\n\n    tcpkali --connections 10000 yahoo.com:80 google.com:80\n    tcpkali -c 10k yahoo.com:80 google.com:80\n\nOpen 100 connections to itself and do nothing:\n\n    tcpkali --connections 100 --listen-port 12345 127.0.0.1:12345\n    tcpkali -c100 -l12345 127.1:12345\n\nOpen a connection to itself and send lots of cookies:\n\n    tcpkali --listen-port 12345 --message \"cookies\" 127.0.0.1:12345\n    tcpkali -l 12345 -m \"cookies\" 127.1:12345\n\nListen for incoming connections and throw away data for 3 hours:\n\n    tcpkali --listen-port 12345 --duration 3h\n    tcpkali -l12345 -T3h\n\n## WebSocket examples\n\nOpen connection to the local WebSocket server, send hello, and wait:\n\n    tcpkali --websocket --first-message \"hello\" 127.0.0.1:80\n\nOpen connection to the local server and send tons of empty JSON frames:\n\n    tcpkali --websocket --message \"\\{ws.text}\" 127.1:80\n\nSend a binary frame with a picture every second (angle brackets are literal):\n\n    tcpkali --ws -m \"\\{ws.binary <image.png>}\" -r1 127.1:80\n\n</details>\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 0.16015625,
          "content": "\nThese are things that'd make the tcpkali useful in more contexts.\n\n * Recover and replay a TCP stream from a given PCAP(3) file against a target.\n * TLS support.\n\n"
        },
        {
          "name": "asn1",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 5.607421875,
          "content": "AC_INIT([tcpkali],[1.2.0],[lwalkin@machinezone.com])\n\nAC_CONFIG_SRCDIR([src/tcpkali.c])\nAC_CONFIG_AUX_DIR(config)\nAM_INIT_AUTOMAKE(foreign)\nAC_CONFIG_MACRO_DIR(m4)\n\nAC_CONFIG_HEADER([config.h])\n\nLT_INIT\n\nAC_PROG_CC\nAC_PROG_CPP\nAC_PROG_INSTALL\nAM_PROG_LEX\n\nAX_PTHREAD([])\ndnl Global CFLAGS, for tcpkali and its third-party dependencies.\n\nCC=\"${PTHREAD_CC}\"\nLIBS=\"${PTHREAD_LIBS} ${LIBS}\"\nCFLAGS=\"${CFLAGS} ${PTHREAD_CFLAGS}\"\n\nAC_CHECK_PROGS([YACC], ['bison -y' byacc])\nAS_IF([test \"x${YACC}\" == \"x\"], [AC_MSG_ERROR([\n    ${PACKAGE_NAME} requires bison or byacc, plain yacc doesn't count.\n    Install 'bison' package first.])])\n\ndnl Third-party dependencies.\nm4_include([deps/libev/libev.m4])\nm4_include([deps/libstatsd/libstatsd.m4])\n\ndnl Import locally defined macros.\nm4_include([m4/ax_check_compile_flag.m4])\nm4_include([m4/ax_check_openssl.m4])\nm4_include([m4/ax_make_optional_include.m4])\n\nAX_CHECK_GNU_STYLE_OPTIONAL_INCLUDE()\n\ndnl tcpkali-specific CFLAGS.\nAX_CHECK_COMPILE_FLAG([-W], [TK_CFLAGS=\"$TK_CFLAGS -W\"])\nAX_CHECK_COMPILE_FLAG([-Wall], [TK_CFLAGS=\"$TK_CFLAGS -Wall\"])\nAX_CHECK_COMPILE_FLAG([-Wno-strict-aliasing], [TK_CFLAGS=\"$TK_CFLAGS -Wno-strict-aliasing\"])\nAX_CHECK_COMPILE_FLAG([-fno-strict-aliasing], [TK_CFLAGS=\"$TK_CFLAGS -fno-strict-aliasing\"])\n\ndnl Apply TK_CFLAGS only for tcpkali sources, not third-party dependencies.\nAC_SUBST(TK_CFLAGS)\n\nAC_CHECK_SIZEOF([size_t])\n\nAC_CHECK_HEADERS(sched.h uv.h)\nAC_CHECK_FUNCS(sched_getaffinity)\nAC_CHECK_FUNCS(sysctlbyname)\nAC_CHECK_FUNCS(srandomdev)\n\nAC_ARG_WITH([libuv],\n    [AS_HELP_STRING([--with-libuv],\n      [Enable support for libuv (2-4% slower than libev)])],\n    [],\n    [with_libuv=no])\n  LIBUV=\n  AS_IF([test \"x$with_libuv\" != xno],\n    [AC_CHECK_LIB([uv], [uv_now],\n      [AC_SUBST([LIBUV], [\"-luv\"])\n       AC_DEFINE([HAVE_LIBUV], [1],\n                 [Define if you have libuv])\n      ],\n      [AC_MSG_FAILURE(\n         [--with-libuv was given, but test for libuv failed])],\n      [])])\n\nAC_CHECK_HEADERS(curses.h term.h termios.h)\nAC_CHECK_LIB([ncurses], [tgetent])\n\ndnl Enable Address Sanitizer, if supported by gcc (4.8+) or clang.\ndnl http://clang.llvm.org/docs/AddressSanitizer.html\ndnl https://code.google.com/p/address-sanitizer/wiki/HowToBuild\nAC_ARG_ENABLE([asan],\n    [AS_HELP_STRING([--enable-asan], [Enable Address Sanitizer])],\n    [enable_asan=$enableval], [enable_asan=no])\n  AS_IF([test \"x$enable_asan\" != xno], [\n    AX_CHECK_COMPILE_FLAG([-fsanitize=address],\n                          [CFLAGS=\"$CFLAGS -fsanitize=address\"],\n                          [enable_asan=no], [${TK_CFLAGS}])\n    AS_IF([test \"x$enable_asan\" = xno], [\n        AC_MSG_FAILURE(\n            [--enable-asan is given, but not supported on this platform.\n Check out https://code.google.com/p/address-sanitizer/wiki/HowToBuild])])\n    dnl Keep error messages nice. Also consider:\n    dnl export ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer\n    dnl export ASAN_OPTIONS=symbolize=1\n    AX_CHECK_COMPILE_FLAG([-fno-omit-frame-pointer],\n                          [CFLAGS=\"$CFLAGS -fno-omit-frame-pointer\"],\n                          [], [${TK_CFLAGS}])\n  ])\n\ndnl Enable Thread Sanitizer, if supported by clang.\ndnl http://clang.llvm.org/docs/ThreadSanitizer.html\ndnl https://code.google.com/p/address-sanitizer/wiki/HowToBuild\nAC_ARG_ENABLE([tsan],\n    [AS_HELP_STRING([--enable-tsan], [Enable Thread Sanitizer])],\n    [enable_tsan=$enableval], [enable_tsan=no])\n  AS_IF([test \"x$enable_tsan\" != xno], [\n    AX_CHECK_COMPILE_FLAG([-fsanitize=thread],\n                          [CFLAGS=\"$CFLAGS -fsanitize=thread\"],\n                          [enable_tsan=no], [${TK_CFLAGS}])\n    AS_IF([test \"x$enable_tsan\" = xno], [\n        AC_MSG_FAILURE(\n            [--enable-tsan is given, but not supported on this platform.\n Check out https://code.google.com/p/address-sanitizer/wiki/HowToBuild])])\n    dnl Keep error messages nice.\n    AX_CHECK_COMPILE_FLAG([-fno-omit-frame-pointer],\n                          [CFLAGS=\"$CFLAGS -fno-omit-frame-pointer\"],\n                          [], [${TK_CFLAGS}])\n    dnl -fsanitize=thread linking must be done with -pie or -shared\n    dnl We can't do anything about this message in GCC; use clang.\n  ])\n\nAX_CHECK_OPENSSL(\n    [AC_DEFINE([HAVE_OPENSSL], [1], [Define to 1 if you have OpenSSL])\nTK_LIBS=\"${OPENSSL_LIBS}\"\nTK_LDFLAGS=\"${OPENSSL_LDFLAGS}\"\nTK_CPPFLAGS=\"${OPENSSL_INCLUDES}\"\nAC_CHECK_FUNC(SSL_CTX_set_ecdh_auto,\n        [AC_DEFINE([HAVE_SSL_CTX_SET_ECDH_AUTO], [1],\n            [Define to 1 if you have SSL_CTX_set_ecdh_auto function defined in OpenSSL])])\n    ],\n    [])\nAC_SUBST(TK_LIBS)\nAC_SUBST(TK_LDFLAGS)\nAC_SUBST(TK_CPPFLAGS)\n\ndnl We use pandoc to generate documentation.\nAC_PATH_PROG([PANDOC], pandoc)\nAM_CONDITIONAL([HAVE_PANDOC], [test -n \"$PANDOC\"])\n\ndnl Use clang-format to standardize on a style.\nAC_PATH_PROG([CLANG_FORMAT], clang-format, [:])\nAM_CONDITIONAL([HAVE_CLANG_FORMAT], [test \"${CLANG_FORMAT}\" != \":\"])\n\ndnl Python is used for tests.\nAM_PATH_PYTHON(,, [:])\nAM_CONDITIONAL([HAVE_PYTHON], [test \"$PYTHON\" != :])\n\ndnl Python linters\nAC_PATH_PROG([PEP8], pep8, [:])\nAC_PATH_PROG([PYLINT], pylint, [:])\n\ndnl Shell linters\nAC_PATH_PROG([SHELLCHECK], shellcheck, [:])\n\nAC_CONFIG_FILES([Makefile\n                 asn1/Makefile\n                 test/Makefile\n                 src/Makefile\n                 doc/Makefile\n                 deps/Makefile\n                 deps/libev/Makefile\n                 deps/libcows/Makefile\n                 deps/libstatsd/Makefile\n                 deps/libstatsd/man/Makefile\n                 deps/libstatsd/src/Makefile\n                 deps/pcg-c-basic/Makefile\n                 deps/HdrHistogram/Makefile\n                 deps/boyer-moore-horspool/Makefile\n                ])\nAC_OUTPUT\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}