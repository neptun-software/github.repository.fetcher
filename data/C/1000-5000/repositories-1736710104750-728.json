{
  "metadata": {
    "timestamp": 1736710104750,
    "page": 728,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "asdcorp/ohook",
      "stars": 1869,
      "defaultBranch": "principalis",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "Copyright 2023 asdcorp\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the “Software”), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.525390625,
          "content": "OPT=-Os -Wall\r\nCFLAGS=-fno-ident\r\nLDFLAGS=-L. -nostartfiles -nostdlib -lkernel32 -lshlwapi -ladvapi32 -Wl,--exclude-all-symbols,--enable-stdcall-fixup,--dynamicbase,--nxcompat,--subsystem,windows:6.0\r\n\r\nPREFIX32=C:/mingw32/bin/\r\nPREFIX64=C:/mingw64/bin/\r\n\r\nCC32=gcc -Wl,-e_DllMain -municode\r\nCC64=gcc -Wl,-eDllMain -municode\r\n\r\nall: sppc32.dll sppc64.dll sppcplus32.dll sppcplus64.dll\r\n\r\nsppc32.dll: sppc.c sppc32.res.o libsppcs32.a\r\n\t$(PREFIX32)$(CC32) $(OPT) $< sppc.def sppc32.res.o -shared -o $@ $(CFLAGS) $(LDFLAGS) -lsppcs32\r\n\tstrip -s $@\r\n\r\nsppc64.dll: sppc.c sppc64.res.o libsppcs64.a\r\n\t$(PREFIX64)$(CC64) $(OPT) $< sppc.def sppc64.res.o -shared -o $@ $(CFLAGS) $(LDFLAGS) -lsppcs64\r\n\tstrip -s $@\r\n\r\nsppcplus32.dll: sppc.c sppcplus32.res.o libsppcs32.a\r\n\t$(PREFIX32)$(CC32) -DPLUS_BUILD $(OPT) $< sppc.def sppcplus32.res.o -shared -o $@ $(CFLAGS) $(LDFLAGS) -lsppcs32\r\n\tstrip -s $@\r\n\r\nsppcplus64.dll: sppc.c sppcplus64.res.o libsppcs64.a\r\n\t$(PREFIX64)$(CC64) -DPLUS_BUILD $(OPT) $< sppc.def sppcplus64.res.o -shared -o $@ $(CFLAGS) $(LDFLAGS) -lsppcs64\r\n\tstrip -s $@\r\n\r\nsppc32.res.o: sppc.rc\r\n\t$(PREFIX32)windres --codepage=65001 $< $@\r\n\r\nsppc64.res.o: sppc.rc\r\n\t$(PREFIX64)windres --codepage=65001 $< $@\r\n\r\nsppcplus32.res.o: sppc.rc\r\n\t$(PREFIX32)windres --codepage=65001 -DPLUS_BUILD $< $@\r\n\r\nsppcplus64.res.o: sppc.rc\r\n\t$(PREFIX64)windres --codepage=65001 -DPLUS_BUILD $< $@\r\n\r\nlibsppcs32.a:\r\n\t$(PREFIX32)dlltool -k -dsppcs32.def -llibsppcs32.a\r\n\r\nlibsppcs64.a:\r\n\t$(PREFIX64)dlltool -k -dsppcs64.def -llibsppcs64.a\r\n\r\nclean:\r\n\trm -f *.dll *.res.o *.a\r\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 4.0263671875,
          "content": "ohook\r\n=====\r\nAn universal Office \"activation\" hook with main focus of enabling full functionality of subscription editions.\r\n\r\nThis project is released mainly for [our partners](https://massgrave.dev/ohook.html). We won't be directly providing any kind of support for users.\r\n\r\nInstallation\r\n------------\r\nExample steps for 64-bit C2R Office running on a 64-bit version of Windows:\r\n\r\n1. Create a symlink of the system `sppc.dll` in the Office C2R `System` directory as `sppcs.dll`:\r\n```\r\nmklink \"%programfiles%\\Microsoft Office\\root\\vfs\\System\\sppcs.dll\" \"%windir%\\System32\\sppc.dll\"\r\n```\r\n\r\n2. Copy the hook library as `sppc.dll` to the Office C2R `System` directory\r\n```\r\ncopy /y sppc64.dll \"%programfiles%\\Microsoft Office\\root\\vfs\\System\\sppc.dll\"\r\n```\r\n\r\n3. (optional) In case of some Office editions which show \"There was a problem checking this device's license status\" banner, you may need to add the following to the `hosts` file:\r\n```\r\n0.0.0.0 ols.officeapps.live.com\r\n```\r\n\r\n4. Install a blank key for the edition you want to use.\r\n\r\nPlease note these steps are an example and are based on our internal tests. As stated before, no direct support will be provided for usage of this method. You should use one of the solutions provided by [our **authorized** partners](https://massgrave.dev/ohook.html) and direct your support queries to them.\r\n\r\nBlank keys\r\n----------\r\nThe table contains keys for probably the most needed editions.\r\n\r\n|Edition|Marketing Name|Key|\r\n|-------|--------------|---|\r\n|O365HomePrem|Microsoft 365|`NBBBB-BBBBB-BBBBB-BBBBG-234RY`|\r\n|O365ProPlus|Microsoft 365 Apps for enterprise|`NBBBB-BBBBB-BBBBB-BBBCF-PPK9C`|\r\n\r\nHow does this even work?\r\n------------------------\r\nAs some would say, \"It's trivial.\"\r\n\r\n* The `sppc.dll` copied to the `System` directory in the Office is used instead of the system library.\r\n\r\n* The only real license check is done during the startup of the Office applications using the `SLGetLicensingStatusInformation` function.\r\n\r\n* The `SLGetLicensingStatusInformation` function can be easily hooked to lie about the activation status.\r\n\r\nFAQ\r\n---\r\n### Why not just use a subscription edition with Mondo licenses?\r\nThis will be probably the most frequently asked question.\r\n\r\nWhile Mondo 2016 licenses allow all the Office applications to work and support KMS activation, these are only partially updated for newer versions of Office. Thus, the product policy provided by these licenses lack some of the policies found in licenses for newer versions. Since Office product policy mainly consist of entries like `office-UUID`, there is no way to verify which features may not work.\r\n\r\nWith this method, a correct license for the installed edition is used, meaning every feature should work as intended.\r\n\r\nThere are also other issues with installing license files from other editions but we won't be bothering with them.\r\n\r\n### Why is the modification of TimeOfLastHeartbeatFailure or the hosts file required in some cases?\r\nAfter the license check, some Office editions make a request to the `ols.officeapps.live.com` service to retrieve an expiration date of user's subscription. This is done in order to evaluate should the local license be renewed. Since the service replies there is no subscription associated with the device, a notification is shown. Setting TimeOfLastHeartbeatFailure to some date in the future or modifying the hosts file prevents Office from doing this check.\r\n\r\n### Will this enable 1TB of storage on OneDrive, Python in Excel or some other online feature?\r\nNo.\r\n\r\n### ohook vs ohook+\r\nA regular ohook build provides only a basic functionality of hooking up a licensing state response from the system.\r\n\r\nA \"plus\" build of ohook, in addition to the functionality of regular ohook, modifies the TimeOfLastHeartbeatFailure value in the registry to prevent an online subscription check.\r\n\r\nGenerally, it is recommended to use a regular build of ohook, as it is much less invasive to the system and less likely to be falsely detected by an antivirus software.\r\n\r\nLicense\r\n-------\r\nThe project is licensed under the terms of the MIT License.\r\n"
        },
        {
          "name": "sl.h",
          "type": "blob",
          "size": 1.212890625,
          "content": "#ifndef OHOOKSL_H\r\n#define OHOOKSL_H\r\n\r\ntypedef GUID SLID;\r\ntypedef void *HSLC;\r\n\r\ntypedef enum _tagSLDATATYPE {\r\n    SL_DATA_NONE        = REG_NONE,\r\n    SL_DATA_SZ          = REG_SZ,\r\n    SL_DATA_DWORD       = REG_DWORD,\r\n    SL_DATA_BINARY      = REG_BINARY,\r\n    SL_DATA_MULTI_SZ    = REG_MULTI_SZ,\r\n    SL_DATA_SUM         = 100,\r\n} SLDATATYPE;\r\n\r\ntypedef enum _tagSLLICENSINGSTATUS {\r\n    SL_LICENSING_STATUS_UNLICENSED,\r\n    SL_LICENSING_STATUS_LICENSED,\r\n    SL_LICENSING_STATUS_IN_GRACE_PERIOD,\r\n    SL_LICENSING_STATUS_NOTIFICATION,\r\n    SL_LICENSING_STATUS_LAST\r\n} SLLICENSINGSTATUS;\r\n\r\ntypedef struct _tagSL_LICENSING_STATUS {\r\n    SLID SkuId;\r\n    SLLICENSINGSTATUS eStatus;\r\n    DWORD dwGraceTime;\r\n    DWORD dwTotalGraceDays;\r\n    HRESULT hrReason;\r\n    UINT64 qwValidityExpiration;\r\n} SL_LICENSING_STATUS;\r\n\r\nHRESULT WINAPI SLGetLicensingStatusInformation(\r\n    HSLC hSLC,\r\n    SLID *pAppID,\r\n    SLID *pProductSkuId,\r\n    PWSTR pwszRightName,\r\n    UINT *pnStatusCount,\r\n    SL_LICENSING_STATUS **ppLicensingStatus\r\n);\r\n\r\nHRESULT WINAPI SLGetProductSkuInformation(\r\n    HSLC hSLC,\r\n    const SLID *pProductSkuId,\r\n    PCWSTR pwszValueName,\r\n    SLDATATYPE *peDataType,\r\n    UINT *pcbValue,\r\n    PBYTE *ppbValue\r\n);\r\n\r\n#endif\r\n"
        },
        {
          "name": "sppc.c",
          "type": "blob",
          "size": 2.4072265625,
          "content": "#define _WIN32_WINNT _WIN32_WINNT_WIN10\r\n#include <windows.h>\r\n#include <shlwapi.h>\r\n#include \"sl.h\"\r\n\r\n#ifdef PLUS_BUILD\r\nBOOL bIsHeartbeatRegistryModified = FALSE;\r\n#endif\r\n\r\nBOOL IsGracePeriodProduct(HSLC hSLC, SLID *pProductSkuId) {\r\n    PBYTE pBuffer = 0;\r\n    UINT cbSize = 0;\r\n\r\n    if(SLGetProductSkuInformation(hSLC, pProductSkuId, L\"Name\", NULL, &cbSize, &pBuffer) != S_OK) {\r\n        LocalFree(pBuffer);\r\n        return FALSE;\r\n    }\r\n\r\n    if(StrStrNIW((PWSTR)pBuffer, L\"Grace\", cbSize) != NULL) {\r\n        LocalFree(pBuffer);\r\n        return TRUE;\r\n    }\r\n\r\n    LocalFree(pBuffer);\r\n    return FALSE;\r\n}\r\n\r\n#ifdef PLUS_BUILD\r\nVOID ModifyHeartbeatRegistry() {\r\n    HKEY hKey = 0;\r\n\r\n    LSTATUS lStatus = RegOpenKeyExW(\r\n        HKEY_CURRENT_USER,\r\n        L\"Software\\\\Microsoft\\\\Office\\\\16.0\",\r\n        0,\r\n        KEY_ALL_ACCESS,\r\n        &hKey\r\n    );\r\n\r\n    if(lStatus != ERROR_SUCCESS) return;\r\n\r\n    RegSetKeyValueW(\r\n        hKey,\r\n        L\"Common\\\\Licensing\\\\Resiliency\",\r\n        L\"TimeOfLastHeartbeatFailure\",\r\n        REG_SZ,\r\n        L\"2040-01-01T00:00:00Z\",\r\n        42\r\n    );\r\n\r\n    RegCloseKey(hKey);\r\n}\r\n#endif\r\n\r\nHRESULT WINAPI SLGetLicensingStatusInformationHook(\r\n    HSLC hSLC,\r\n    SLID *pAppID,\r\n    SLID *pProductSkuId,\r\n    PWSTR pwszRightName,\r\n    UINT *pnStatusCount,\r\n    SL_LICENSING_STATUS **ppLicensingStatus\r\n) {\r\n    HRESULT hResult = SLGetLicensingStatusInformation(\r\n        hSLC,\r\n        pAppID,\r\n        pProductSkuId,\r\n        pwszRightName,\r\n        pnStatusCount,\r\n        ppLicensingStatus\r\n    );\r\n\r\n    if(hResult != S_OK)\r\n        return hResult;\r\n\r\n    for(int i = 0; i < *pnStatusCount; i++) {\r\n        if((*ppLicensingStatus+i)->eStatus == SL_LICENSING_STATUS_UNLICENSED)\r\n            continue;\r\n\r\n        if(IsGracePeriodProduct(hSLC, &((*ppLicensingStatus+i)->SkuId)))\r\n            continue;\r\n\r\n        (*ppLicensingStatus+i)->eStatus = SL_LICENSING_STATUS_LICENSED;\r\n        (*ppLicensingStatus+i)->dwGraceTime = 0;\r\n        (*ppLicensingStatus+i)->dwTotalGraceDays = 0;\r\n        (*ppLicensingStatus+i)->hrReason = 0;\r\n        (*ppLicensingStatus+i)->qwValidityExpiration = 0;\r\n    }\r\n\r\n#ifdef PLUS_BUILD\r\n    if(!bIsHeartbeatRegistryModified) {\r\n        ModifyHeartbeatRegistry();\r\n        bIsHeartbeatRegistryModified = TRUE;\r\n    }\r\n#endif\r\n\r\n    return hResult;\r\n}\r\n\r\nBOOL APIENTRY WINAPI DllMain(\r\n    HINSTANCE hinstDLL,\r\n    DWORD fdwReason,\r\n    LPVOID lpvReserved\r\n) {\r\n    return TRUE;\r\n}\r\n"
        },
        {
          "name": "sppc.def",
          "type": "blob",
          "size": 3.73046875,
          "content": "LIBRARY sppc.dll\r\nEXPORTS\r\n;hooked function\r\nSLGetLicensingStatusInformation = SLGetLicensingStatusInformationHook\r\n\r\n;everything else\r\nSLCallServer = SPPCS.SLCallServer\r\nSLpAuthenticateGenuineTicketResponse = SPPCS.SLpAuthenticateGenuineTicketResponse\r\nSLpBeginGenuineTicketTransaction = SPPCS.SLpBeginGenuineTicketTransaction\r\nSLpClearActivationInProgress = SPPCS.SLpClearActivationInProgress\r\nSLpDepositDownlevelGenuineTicket = SPPCS.SLpDepositDownlevelGenuineTicket\r\nSLpDepositTokenActivationResponse = SPPCS.SLpDepositTokenActivationResponse\r\nSLpGenerateTokenActivationChallenge = SPPCS.SLpGenerateTokenActivationChallenge\r\nSLpGetGenuineBlob = SPPCS.SLpGetGenuineBlob\r\nSLpGetGenuineLocal = SPPCS.SLpGetGenuineLocal\r\nSLpGetLicenseAcquisitionInfo = SPPCS.SLpGetLicenseAcquisitionInfo\r\nSLpGetMSPidInformation = SPPCS.SLpGetMSPidInformation\r\nSLpGetMachineUGUID = SPPCS.SLpGetMachineUGUID\r\nSLpGetTokenActivationGrantInfo = SPPCS.SLpGetTokenActivationGrantInfo\r\nSLpIAActivateProduct = SPPCS.SLpIAActivateProduct\r\nSLpIsCurrentInstalledProductKeyDefaultKey = SPPCS.SLpIsCurrentInstalledProductKeyDefaultKey\r\nSLpProcessVMPipeMessage = SPPCS.SLpProcessVMPipeMessage\r\nSLpSetActivationInProgress = SPPCS.SLpSetActivationInProgress\r\nSLpTriggerServiceWorker = SPPCS.SLpTriggerServiceWorker\r\nSLpVLActivateProduct = SPPCS.SLpVLActivateProduct\r\nSLClose = SPPCS.SLClose\r\nSLConsumeRight = SPPCS.SLConsumeRight\r\nSLDepositMigrationBlob = SPPCS.SLDepositMigrationBlob\r\nSLDepositOfflineConfirmationId = SPPCS.SLDepositOfflineConfirmationId\r\nSLDepositOfflineConfirmationIdEx = SPPCS.SLDepositOfflineConfirmationIdEx\r\nSLDepositStoreToken = SPPCS.SLDepositStoreToken\r\nSLFireEvent = SPPCS.SLFireEvent\r\nSLGatherMigrationBlob = SPPCS.SLGatherMigrationBlob\r\nSLGatherMigrationBlobEx = SPPCS.SLGatherMigrationBlobEx\r\nSLGenerateOfflineInstallationId = SPPCS.SLGenerateOfflineInstallationId\r\nSLGenerateOfflineInstallationIdEx = SPPCS.SLGenerateOfflineInstallationIdEx\r\nSLGetActiveLicenseInfo = SPPCS.SLGetActiveLicenseInfo\r\nSLGetApplicationInformation = SPPCS.SLGetApplicationInformation\r\nSLGetApplicationPolicy = SPPCS.SLGetApplicationPolicy\r\nSLGetAuthenticationResult = SPPCS.SLGetAuthenticationResult\r\nSLGetEncryptedPIDEx = SPPCS.SLGetEncryptedPIDEx\r\nSLGetGenuineInformation = SPPCS.SLGetGenuineInformation\r\nSLGetInstalledProductKeyIds = SPPCS.SLGetInstalledProductKeyIds\r\nSLGetLicense = SPPCS.SLGetLicense\r\nSLGetLicenseFileId = SPPCS.SLGetLicenseFileId\r\nSLGetLicenseInformation = SPPCS.SLGetLicenseInformation\r\nSLGetPKeyId = SPPCS.SLGetPKeyId\r\nSLGetPKeyInformation = SPPCS.SLGetPKeyInformation\r\nSLGetPolicyInformation = SPPCS.SLGetPolicyInformation\r\nSLGetPolicyInformationDWORD = SPPCS.SLGetPolicyInformationDWORD\r\nSLGetProductSkuInformation = SPPCS.SLGetProductSkuInformation\r\nSLGetSLIDList = SPPCS.SLGetSLIDList\r\nSLGetServiceInformation = SPPCS.SLGetServiceInformation\r\nSLInstallLicense = SPPCS.SLInstallLicense\r\nSLInstallProofOfPurchase = SPPCS.SLInstallProofOfPurchase\r\nSLInstallProofOfPurchaseEx = SPPCS.SLInstallProofOfPurchaseEx\r\nSLIsGenuineLocalEx = SPPCS.SLIsGenuineLocalEx\r\nSLLoadApplicationPolicies = SPPCS.SLLoadApplicationPolicies\r\nSLOpen = SPPCS.SLOpen\r\nSLPersistApplicationPolicies = SPPCS.SLPersistApplicationPolicies\r\nSLPersistRTSPayloadOverride = SPPCS.SLPersistRTSPayloadOverride\r\nSLReArm = SPPCS.SLReArm\r\nSLRegisterEvent = SPPCS.SLRegisterEvent\r\nSLRegisterPlugin = SPPCS.SLRegisterPlugin\r\nSLSetAuthenticationData = SPPCS.SLSetAuthenticationData\r\nSLSetCurrentProductKey = SPPCS.SLSetCurrentProductKey\r\nSLSetGenuineInformation = SPPCS.SLSetGenuineInformation\r\nSLUninstallLicense = SPPCS.SLUninstallLicense\r\nSLUninstallProofOfPurchase = SPPCS.SLUninstallProofOfPurchase\r\nSLUnloadApplicationPolicies = SPPCS.SLUnloadApplicationPolicies\r\nSLUnregisterEvent = SPPCS.SLUnregisterEvent\r\nSLUnregisterPlugin = SPPCS.SLUnregisterPlugin\r\n"
        },
        {
          "name": "sppc.rc",
          "type": "blob",
          "size": 0.8525390625,
          "content": "#ifdef PLUS_BUILD\r\n    #define PRODNAME \"ohook+\"\r\n#else\r\n    #define PRODNAME \"ohook\"\r\n#endif\r\n\r\n1 VERSIONINFO\r\nFILEVERSION    0,5,0,0\r\nPRODUCTVERSION 0,5,0,0\r\nFILEOS 0x40004L\r\nFILETYPE 0x2L\r\nBEGIN\r\n    BLOCK \"StringFileInfo\"\r\n    BEGIN\r\n        BLOCK \"040904E4\"\r\n        BEGIN\r\n            VALUE \"CompanyName\",      \"Anomalous Software Deterioration Corporation\"\r\n            VALUE \"FileDescription\",  PRODNAME \" SPPC\"\r\n            VALUE \"FileVersion\",      \"0.5.0.0\"\r\n            VALUE \"InternalName\",     \"sppc\"\r\n            VALUE \"LegalCopyright\",   \"© 2024 Anomalous Software Deterioration Corporation\"\r\n            VALUE \"OriginalFilename\", \"sppc.dll\"\r\n            VALUE \"ProductName\",      PRODNAME\r\n            VALUE \"ProductVersion\",   \"0.5.0.0\"\r\n        END\r\n    END\r\n\r\n    BLOCK \"VarFileInfo\"\r\n    BEGIN\r\n        VALUE \"Translation\", 0x409, 1252\r\n    END\r\nEND\r\n"
        },
        {
          "name": "sppcs32.def",
          "type": "blob",
          "size": 0.0927734375,
          "content": "LIBRARY sppcs.dll\r\nEXPORTS\r\nSLGetLicensingStatusInformation@24\r\nSLGetProductSkuInformation@24\r\n"
        },
        {
          "name": "sppcs64.def",
          "type": "blob",
          "size": 0.0869140625,
          "content": "LIBRARY sppcs.dll\r\nEXPORTS\r\nSLGetLicensingStatusInformation\r\nSLGetProductSkuInformation\r\n"
        }
      ]
    }
  ]
}