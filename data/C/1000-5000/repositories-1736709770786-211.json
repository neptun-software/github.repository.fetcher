{
  "metadata": {
    "timestamp": 1736709770786,
    "page": 211,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "c3lang/c3c",
      "stars": 3335,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.1162109375,
          "content": "---\n# Configure clang-tidy for this project.\n\nIndentWidth: 4\nUseCRLF: false\nIndentCaseLabels: true\nUseTab: UT_ForIndentation\nTabWidth: 4\nBreakBeforeBraces: Allman\nAllowShortBlocksOnASingleLine: SBS_Empty\nAllowShortIfStatementsOnASingleLine: SIS_WithoutElse\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeParens: SBPO_ControlStatementsExceptControlMacros\nSpacesInCStyleCastParentheses: false\nSpacesInConditionalStatement: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\n\n# Disabled:\n#  -google-readability-namespace-comments the *_CLIENT_NS is a macro, and\n#   clang-tidy fails to match it against the initial value.\nChecks: >\n  -*,\n  bugprone-*,\n  google-*,\n  misc-*,\n  modernize-*,\n  performance-*,\n  portability-*,\n  readability-*,\n  -google-readability-namespace-comments,\n  -google-runtime-int,\n  -google-runtime-references,\n  -misc-non-private-member-variables-in-classes,\n  -readability-named-parameter,\n  -readability-magic-numbers,\n  -readability-braces-around-statements,\n  -misc-no-recursion,\n\n# Turn all the warnings from the checks above into errors.\nWarningsAsErrors: \"*\"\n\nCheckOptions:\n  - { key: readability-function-cognitive-complexity.Threshold,    value: 100 }\n  - { key: readability-identifier-naming.StructCase,             value: CamelCase  }\n  - { key: readability-identifier-naming.FunctionCase,           value: lower_case  }\n  - { key: readability-identifier-naming.VariableCase,           value: lower_case }\n  - { key: readability-identifier-naming.MacroDefinitionCase,    value: UPPER_CASE }\n  - { key: readability-identifier-naming.EnumConstantCase,         value: UPPER_CASE }\n  - { key: readability-identifier-naming.ConstexprVariableCase,    value: CamelCase }\n  - { key: readability-identifier-naming.ConstexprVariablePrefix,  value: k         }\n  - { key: readability-identifier-naming.GlobalConstantCase,       value: CamelCase }\n  - { key: readability-identifier-naming.GlobalConstantPrefix,     value: k         }\n  - { key: readability-identifier-naming.StaticConstantCase,       value: CamelCase }\n  - { key: readability-identifier-naming.StaticConstantPrefix,     value: k         }"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.30859375,
          "content": "# EditorConfig is awesome: https://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\n\n[CMakeLists.txt]\nindent_style = space\nindent_size = 4\n\n[*.{c,cc,h}]\nindent_style = tab\n\n[*.{c3}]\nindent_style = tab\n\n[*.{json,toml,yml,gyp}]\nindent_style = space\nindent_size = 2\n\n[*.{py,pyi}]\nindent_style = tab\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0322265625,
          "content": "$ cat .gitattributes\n* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.763671875,
          "content": "# Prerequisites\n*.d\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n*.ll\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.tlb\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n# Kernel Module Compile Results\n*.mod*\n*.cmd\n.tmp_versions/\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf\n/build/\n.idea/\n/resources/grammar.tab.c\n/resources/grammar.vcg\n/resources/lex.yy.c\n/resources/y.tab.c\n/resources/y.tab.h\n/bin/\n\n#visual studio files\n.vs/\n.vscode/\nout/\n\n/cmake-build-debug/\n/cmake-build-release/\n\n# Emacs files\nTAGS\n\n# Clangd LSP files\n/.cache/\n/compile_commands.json\n\n# 'nix build' resulting symlink\nresult\n\n# macOS\n.DS_Store"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0947265625,
          "content": "[submodule \"tilde-backend\"]\n\tpath = tilde-backend\n\turl = https://github.com/c3lang/tilde-backend\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 20.8046875,
          "content": "cmake_minimum_required(VERSION 3.20)\n\n# Grab the version\nfile(READ \"src/version.h\" ver)\nif (NOT ${ver} MATCHES \"COMPILER_VERSION \\\"([0-9]+.[0-9]+.[0-9]+)\\\"\")\n    message(FATAL_ERROR \"Compiler version could not be parsed from version.h\")\nendif()\n\n# Set the project and version\nproject(c3c VERSION ${CMAKE_MATCH_1})\nmessage(\"C3C version: ${CMAKE_PROJECT_VERSION}\")\n\n# Avoid warning for FetchContent\nif (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.24.0\")\n    cmake_policy(SET CMP0135 NEW)\nendif()\n\nif (NOT DEFINED CMAKE_INSTALL_LIBDIR)\n    if (MSVC)\n        set(CMAKE_INSTALL_LIBDIR \"c:\\\\c3c\\\\lib\")\n        set(CMAKE_INSTALL_BINDIR \"c:\\\\c3c\")\n    else ()\n        set(CMAKE_INSTALL_LIBDIR \"/usr/local/lib/c3\")\n        set(CMAKE_INSTALL_BINDIR \"/usr/local/bin/c3c\")\n    endif()\nendif ()\n\n# Enable fetching (for Windows)\ninclude(FetchContent)\ninclude(FeatureSummary)\n\nset(CMAKE_FIND_PACKAGE_SORT_ORDER NATURAL)\nset(CMAKE_FIND_PACKAGE_SORT_DIRECTION DEC)\n\n# We use C11 and C++17\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_CXX_STANDARD 17)\n\nif(MSVC)\n    message(STATUS \"MSVC version ${MSVC_VERSION}\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /O2 /EHsc /utf-8\")\n    set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /O2 /EHsc /utf-8\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /Od /Zi /EHa /utf-8\")\n    set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /Od /Zi /EHa /utf-8\")\nelse()\n    if (true)\n        set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -O3 -fno-exceptions\")\n        set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -gdwarf-3 -fno-exceptions\")\n        set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -gdwarf-3 -O3 -fno-exceptions\")\n        set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -gdwarf-3 -fno-exceptions\")\n    else()\n        set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -gdwarf-3 -O3 -fsanitize=undefined,address -fno-exceptions\")\n        set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -gdwarf-3 -O1 -fsanitize=undefined,address -fno-exceptions\")\n        set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -gdwarf-3 -O3 -fsanitize=undefined,address -fno-exceptions\")\n        set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -gdwarf-3 -O1 -fsanitize=undefined,address -fno-exceptions\")\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=undefined,address -fno-exceptions\")\n    endif()\nendif()\n\noption(C3_LINK_DYNAMIC \"link dynamically with LLVM/LLD libs\")\n\nset(C3_LLVM_VERSION \"auto\" CACHE STRING \"Use LLVM version [default: auto]\")\noption(C3_USE_MIMALLOC \"Use built-in mimalloc\" OFF)\noption(C3_USE_TB \"Use TB\" OFF)\nset(C3_MIMALLOC_TAG \"v1.7.3\" CACHE STRING \"Used version of mimalloc\")\noption(C3_WITH_LLVM \"Build with LLVM\" ON)\noption(C3_LLD_DIR \"Use custom LLD directory\" \"\")\n\nset(C3_USE_MIMALLOC OFF)\nif(C3_USE_MIMALLOC)\n    option(MI_BUILD_TESTS OFF)\n    option(MI_BUILD_SHARED OFF)\n    option(MI_PADDING OFF)\n    option(MI_DEBUG_FULL OFF)\n    FetchContent_Declare(\n            mimalloc\n            GIT_REPOSITORY https://github.com/microsoft/mimalloc.git\n            GIT_TAG ${C3_MIMALLOC_TAG}\n    )\n    FetchContent_MakeAvailable(mimalloc)\nendif()\nif (NOT WIN32)\n    find_package(CURL)\nendif()\nif(C3_WITH_LLVM)\n    if (NOT C3_LLVM_VERSION STREQUAL \"auto\")\n        if (${C3_LLVM_VERSION} VERSION_LESS 17 OR ${C3_LLVM_VERSION} VERSION_GREATER 20)\n            message(FATAL_ERROR \"LLVM ${C3_LLVM_VERSION} is not supported!\")\n        endif()\n    endif()\nendif()\n\nfind_package(Git QUIET)\nif(C3_USE_TB AND GIT_FOUND AND EXISTS \"${CMAKE_SOURCE_DIR}/.git\")\n    # Update submodules as needed\n    option(GIT_SUBMODULE \"Check submodules during build\" ON)\n    if(GIT_SUBMODULE)\n        message(STATUS \"Submodule update\")\n        execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive\n                WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n                RESULT_VARIABLE GIT_SUBMOD_RESULT)\n        if(NOT GIT_SUBMOD_RESULT EQUAL \"0\")\n            message(FATAL_ERROR \"git submodule update --init --recursive failed with ${GIT_SUBMOD_RESULT}, please checkout submodules\")\n        endif()\n    endif()\nendif()\n\n# Clangd LSP support\noption(C3_ENABLE_CLANGD_LSP \"Enable/Disable output of compile commands during generation.\" OFF)\nif(C3_ENABLE_CLANGD_LSP)\n    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n    execute_process(\n            COMMAND ${CMAKE_COMMAND} -E create_symlink\n            ${CMAKE_BINARY_DIR}/compile_commands.json\n            ${CMAKE_SOURCE_DIR}/compile_commands.json\n    )\nendif(C3_ENABLE_CLANGD_LSP)\n\nif(C3_WITH_LLVM)\n    if(CMAKE_C_COMPILER_ID STREQUAL \"MSVC\")\n        if (C3_LLVM_VERSION STREQUAL \"auto\")\n            set(C3_LLVM_VERSION \"19\")\n        endif()\n        FetchContent_Declare(\n                LLVM_Windows\n                URL https://github.com/c3lang/win-llvm/releases/download/llvm_19_1_5/llvm-19.1.5-windows-amd64-msvc17-libcmt.7z\n        )\n        FetchContent_Declare(\n                LLVM_Windows_debug\n                URL https://github.com/c3lang/win-llvm/releases/download/llvm_19_1_5/llvm-19.1.5-windows-amd64-msvc17-libcmt-dbg.7z\n        )\n        if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n            message(\"Loading Windows LLVM debug libraries, this may take a while...\")\n            FetchContent_MakeAvailable(LLVM_Windows_debug)\n            set(llvm_dir ${llvm_windows_debug_SOURCE_DIR})\n        else()\n            message(\"Loading Windows LLVM libraries, this may take a while...\")\n            FetchContent_MakeAvailable(LLVM_Windows)\n            set(llvm_dir ${llvm_windows_SOURCE_DIR})\n        endif()\n        set(CMAKE_SYSTEM_PREFIX_PATH ${llvm_dir} ${CMAKE_SYSTEM_PREFIX_PATH})\n\n        find_package(LLVM REQUIRED CONFIG)\n        find_package(LLD REQUIRED CONFIG)\n    else()\n        if (NOT C3_LLVM_VERSION STREQUAL \"auto\")\n            find_package(LLVM ${C3_LLVM_VERSION} REQUIRED CONFIG)\n        else()\n            find_package(LLVM REQUIRED CONFIG)\n        endif()\n    endif()\n\n    if (EXISTS /usr/lib)\n        # Some systems (such as Alpine Linux) seem to put some of the relevant\n        # LLVM files in /usr/lib, but this doesn't seem to be included in the\n        # value of LLVM_LIBRARY_DIRS.\n        list(APPEND LLVM_LIBRARY_DIRS /usr/lib)\n    endif()\n\n    message(STATUS \"Found LLVM ${LLVM_PACKAGE_VERSION}\")\n    message(STATUS \"Using LLVMConfig.cmake in: ${LLVM_DIR}\")\n    message(STATUS \"Libraries located in: ${LLVM_LIBRARY_DIRS}\")\n\n    if (NOT LLVM_PACKAGE_VERSION VERSION_GREATER_EQUAL 15.0)\n        message(FATAL_ERROR \"LLVM version 15.0 or later is required.\")\n    endif()\n\n    if(LLVM_ENABLE_RTTI)\n        message(STATUS \"LLVM was built with RTTI\")\n    else()\n        message(STATUS \"LLVM was not built with RTTI\")\n    endif()\n\n    string(REPLACE \".\" \";\" VERSION_LIST ${LLVM_PACKAGE_VERSION})\n    list(GET VERSION_LIST 0 LLVM_MAJOR_VERSION)\n\n    include_directories(${LLVM_INCLUDE_DIRS})\n    link_directories(${LLVM_LIBRARY_DIRS})\n    add_definitions(${LLVM_DEFINITIONS})\n\n    if(NOT C3_LINK_DYNAMIC)\n        set(LLVM_LINK_COMPONENTS\n                AllTargetsAsmParsers\n                AllTargetsCodeGens\n                AllTargetsDescs\n                AllTargetsDisassemblers\n                AllTargetsInfos\n                Analysis\n                AsmPrinter\n                BitReader\n                Core\n                DebugInfoPDB\n                InstCombine\n                IrReader\n                LibDriver\n                Linker\n                LTO\n                MC\n                MCDisassembler\n                native\n                nativecodegen\n                Object\n                Option\n                ScalarOpts\n                Support\n                Target\n                TransformUtils\n                WindowsManifest\n                WindowsDriver\n        )\n\n        llvm_map_components_to_libnames(llvm_libs ${LLVM_LINK_COMPONENTS})\n\n        if(NOT ${C3_LLD_DIR} EQUAL \"\" AND EXISTS ${C3_LLD_DIR})\n            message(\"C3_LLD_DIR: \" ${C3_LLD_DIR})\n            set(LLVM_LIBRARY_DIRS\n                    \"${LLVM_LIBRARY_DIRS}\"\n                    \"${C3_LLD_DIR}\"\n            )\n            list(REMOVE_DUPLICATES LLVM_LIBRARY_DIRS)\n        endif()\n\n        # These don't seem to be reliable on windows.\n        message(STATUS \"using find_library\")\n        find_library(LLD_COFF NAMES liblldCOFF.dylib lldCOFF.lib lldCOFF.a liblldCOFF.dll.a liblldCOFF.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_COMMON NAMES liblldCommon.dylib lldCommon.lib lldCommon.a liblldCommon.dll.a liblldCommon.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_ELF NAMES liblldELF.dylib lldELF.lib lldELF.a liblldELF.dll.a liblldELF.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_MACHO NAMES liblldMachO.dylib lldMachO.lib lldMachO.a liblldMachO.dll.a liblldMachO.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_MINGW NAMES liblldMinGW.dylib lldMinGW.lib lldMinGW.a liblldMinGW.dll.a liblldMinGW.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_WASM NAMES liblldWasm.dylib lldWasm.lib lldWasm.a liblldWasm.dll.a liblldWasm.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n    else()\n        find_library(LLVM NAMES libLLVM.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        set(llvm_libs ${LLVM})\n\n        # These don't seem to be reliable on windows.\n        message(STATUS \"using find_library\")\n        find_library(LLD_COFF NAMES liblldCOFF.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_COMMON NAMES liblldCommon.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_ELF NAMES liblldELF.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_MACHO NAMES liblldMachO.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_MINGW NAMES liblldMinGW.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n        find_library(LLD_WASM NAMES liblldWasm.so PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n    endif()\nendif()\n\nif (NOT(${CMAKE_BINARY_DIR} EQUAL ${CMAKE_SOURCE_DIR}))\n    file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib)\n    file(COPY ${CMAKE_SOURCE_DIR}/lib DESTINATION ${CMAKE_BINARY_DIR})\nendif()\n\nif(C3_WITH_LLVM)\n    find_library(LLD_LOONG NAMES libLLVMLoongArchCodeGen.lib libLLVMLoongArchAsmParser.lib libLLVMLoongArchCodeGen.a libLLVMLoongArchAsmParser.a PATHS ${LLVM_LIBRARY_DIRS} NO_DEFAULT_PATH)\n    set(lld_libs\n            ${LLD_COFF}\n            ${LLD_COMMON}\n            ${LLD_WASM}\n            ${LLD_MINGW}\n            ${LLD_ELF}\n            ${LLD_MACHO}\n    )\n\n    if (APPLE)\n        set(lld_libs ${lld_libs} xar)\n        find_file(RT_ASAN_DYNAMIC NAMES libclang_rt.asan_osx_dynamic.dylib PATHS \"${LLVM_LIBRARY_DIR}/clang/${LLVM_MAJOR_VERSION}/lib/darwin\")\n        find_file(RT_TSAN_DYNAMIC NAMES libclang_rt.tsan_osx_dynamic.dylib PATHS \"${LLVM_LIBRARY_DIR}/clang/${LLVM_MAJOR_VERSION}/lib/darwin\")\n        find_file(RT_UBSAN_DYNAMIC NAMES libclang_rt.ubsan_osx_dynamic.dylib PATHS \"${LLVM_LIBRARY_DIR}/clang/${LLVM_MAJOR_VERSION}/lib/darwin\")\n        find_file(RT_LSAN_DYNAMIC NAMES libclang_rt.lsan_osx_dynamic.dylib PATHS \"${LLVM_LIBRARY_DIR}/clang/${LLVM_MAJOR_VERSION}/lib/darwin\")\n        set(sanitizer_runtime_libraries\n                ${RT_ASAN_DYNAMIC}\n                ${RT_TSAN_DYNAMIC}\n                # Unused\n                # ${RT_UBSAN_DYNAMIC}\n                # ${RT_LSAN_DYNAMIC}\n        )\n    endif()\n\n    message(STATUS \"linking to llvm libs ${lld_libs}\")\n    message(STATUS \"Found lld libs ${lld_libs}\")\nendif()\n\nadd_library(miniz STATIC dependencies/miniz/miniz.c)\n\nadd_executable(c3c\n        src/build/builder.c\n        src/build/build_options.c\n        src/build/project_creation.c\n        src/build/project_manipulation.c\n        src/build/libraries.c\n        src/compiler/ast.c\n        src/compiler/bigint.c\n        src/compiler/codegen_general.c\n        src/compiler/compiler.c\n        src/compiler/compiler.h\n        src/compiler/subprocess.c\n        src/compiler/subprocess.h\n        src/compiler/context.c\n        src/compiler/copying.c\n        src/compiler/diagnostics.c\n        src/compiler/float.c\n        src/compiler/headers.c\n        src/compiler/json_output.c\n        src/compiler/lexer.c\n        src/compiler/linker.c\n        src/compiler/abi/c_abi_aarch64.c\n        src/compiler/abi/c_abi.c\n        src/compiler/abi/c_abi_riscv.c\n        src/compiler/abi/c_abi_wasm.c\n        src/compiler/abi/c_abi_win64.c\n        src/compiler/abi/c_abi_x64.c\n        src/compiler/abi/c_abi_x86.c\n        src/compiler/module.c\n        src/compiler/number.c\n        src/compiler/parse_expr.c\n        src/compiler/parse_global.c\n        src/compiler/parser.c\n        src/compiler/parser_internal.h\n        src/compiler/parse_stmt.c\n        src/compiler/sema_casts.c\n        src/compiler/sema_decls.c\n        src/compiler/sema_expr.c\n        src/compiler/sema_internal.h\n        src/compiler/sema_name_resolution.c\n        src/compiler/sema_errors.c\n        src/compiler/sema_builtins.c\n        src/compiler/sema_initializers.c\n        src/compiler/semantic_analyser.c\n        src/compiler/sema_passes.c\n        src/compiler/sema_stmts.c\n        src/compiler/sema_types.c\n        src/compiler/source_file.c\n        src/compiler/symtab.c\n        src/compiler/target.c\n        src/compiler/sema_asm.c\n        src/compiler_tests/benchmark.c\n        src/compiler_tests/tests.c\n        src/compiler/tokens.c\n        src/compiler/types.c\n        src/main.c\n        src/utils/errors.c\n        src/utils/file_utils.c\n        src/utils/find_msvc.c\n        src/utils/malloc.c\n        src/utils/stringutils.c\n        src/utils/taskqueue.c\n        src/utils/json.c\n        src/build/project.c\n        src/utils/vmem.c\n        src/utils/vmem.h\n        src/utils/whereami.c\n        src/utils/cpus.c\n        src/utils/unzipper.c\n        src/compiler/c_codegen.c\n        src/compiler/decltable.c\n        src/compiler/mac_support.c\n        src/compiler/windows_support.c\n        src/compiler/codegen_asm.c\n        src/compiler/asm_target.c\n        src/compiler/expr.c\n        src/utils/time.c\n        src/utils/http.c\n        src/compiler/sema_liveness.c\n        src/build/common_build.c\n        src/compiler/sema_const.c\n        ${CMAKE_BINARY_DIR}/git_hash.h\n)\n\nif(GIT_FOUND AND EXISTS \"${CMAKE_SOURCE_DIR}/.git\")\n    # We are inside of a git repository so rebuilding the hash every time something changes.\n    add_custom_command(\n            OUTPUT ${CMAKE_BINARY_DIR}/git_hash.h\n            COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_CURRENT_LIST_DIR}/git_hash.cmake\"\n            DEPENDS \"${CMAKE_CURRENT_LIST_DIR}/.git\")\nelse()\n    # We are NOT inside of a git repository. Building the has only once.\n    add_custom_command(\n            OUTPUT ${CMAKE_BINARY_DIR}/git_hash.h\n            COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_CURRENT_LIST_DIR}/git_hash.cmake\")\nendif()\n\nif(C3_WITH_LLVM)\n    target_sources(c3c PRIVATE\n            src/compiler/llvm_codegen.c\n            src/compiler/llvm_codegen_debug_info.c\n            src/compiler/llvm_codegen_expr.c\n            src/compiler/llvm_codegen_function.c\n            src/compiler/llvm_codegen_instr.c\n            src/compiler/llvm_codegen_module.c\n            src/compiler/llvm_codegen_stmt.c\n            src/compiler/llvm_codegen_type.c\n            src/compiler/llvm_codegen_value.c\n            src/compiler/llvm_codegen_storeload.c\n            src/compiler/llvm_codegen_builtins.c)\n\n    target_compile_definitions(c3c PUBLIC LLVM_AVAILABLE=1)\n    add_library(c3c_wrappers STATIC wrapper/src/wrapper.cpp)\nelse()\n    target_sources(c3c PRIVATE src/utils/hostinfo.c)\n    target_compile_definitions(c3c PUBLIC LLVM_AVAILABLE=0)\nendif()\n\ntarget_include_directories(c3c PRIVATE\n        \"${CMAKE_SOURCE_DIR}/src/\"\n        \"${CMAKE_BINARY_DIR}\")\n\ntarget_include_directories(miniz PUBLIC\n        \"${CMAKE_SOURCE_DIR}/dependencies/miniz/\")\n\nif (C3_USE_TB)\n    file(GLOB tilde-sources\n            tilde-backend/src/tb/*.c\n            tilde-backend/src/tb/codegen/*.c\n            tilde-backend/src/tb/bigint/*.c\n            tilde-backend/src/tb/objects/*.c\n            tilde-backend/src/tb/system/*.c\n            tilde-backend/src/tb/debug/cv/*.c\n            tilde-backend/src/tb/opt/*.c\n            tilde-backend/src/tb/x64/*.c\n            tilde-backend/src/tb/wasm/*.c\n            tilde-backend/src/tb/aarch64/*.c\n    )\n    target_sources(c3c PRIVATE\n            src/compiler/tilde_codegen.c\n            src/compiler/tilde_codegen_instr.c\n            src/compiler/tilde_codegen_value.c\n            src/compiler/tilde_codegen_storeload.c\n            src/compiler/tilde_codegen_expr.c\n            src/compiler/tilde_codegen_stmt.c\n            src/compiler/tilde_codegen_type.c\n            src/compiler/tilde_codegen_abi.c\n            src/compiler/tilde_codegen_storeload.c)\n\n    target_compile_definitions(c3c PUBLIC TB_AVAILABLE=1)\n    target_link_libraries(c3c tilde-backend)\n    add_library(tilde-backend STATIC ${tilde-sources})\n    target_include_directories(tilde-backend PRIVATE\n            \"${CMAKE_SOURCE_DIR}/tilde-backend/src/\" \"${CMAKE_SOURCE_DIR}/tilde-backend/include\")\n\n    target_include_directories(c3c PRIVATE\n            \"${CMAKE_SOURCE_DIR}/tilde-backend/include/\")\n\nelse()\n\n    target_compile_definitions(c3c PUBLIC TB_AVAILABLE=0)\n\nendif()\n\nif(C3_WITH_LLVM)\n    target_link_libraries(c3c ${llvm_libs} miniz c3c_wrappers ${lld_libs})\n\n    target_include_directories(c3c PRIVATE\n            \"${CMAKE_SOURCE_DIR}/wrapper/include/\")\n\n    target_include_directories(c3c_wrappers PRIVATE\n            \"${CMAKE_SOURCE_DIR}/wrapper/include/\")\n\n    target_link_libraries(c3c_wrappers ${llvm_libs} ${lld_libs})\n\nelse()\n\n    target_link_libraries(c3c ${llvm_libs} miniz ${lld_libs})\n\nendif()\n\nif(C3_USE_MIMALLOC)\n    target_link_libraries(c3c mimalloc-static)\nendif()\n\nif (WIN32)\n    target_link_libraries(c3c Winhttp.lib)\nendif()\n\nif(MINGW)\n    message(\"Increase stack for msys\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,--stack,8388608\")\nendif ()\n\nif (CURL_FOUND)\n    target_link_libraries(c3c ${CURL_LIBRARIES})\n    target_include_directories(c3c PRIVATE ${CURL_INCLUDES})\n    target_compile_definitions(c3c PUBLIC CURL_FOUND=1)\nelse()\n    target_compile_definitions(c3c PUBLIC CURL_FOUND=0)\nendif()\n\n\nif(MSVC)\n    message(\"Adding MSVC options\")\n    target_compile_options(c3c PRIVATE /wd4068 /wd4090 /WX /Wv:18)\n    if(C3_WITH_LLVM)\n        target_compile_options(c3c_wrappers PUBLIC /wd4624 /wd4267 /wd4244 /WX /Wv:18)\n        if(NOT LLVM_ENABLE_RTTI)\n            target_compile_options(c3c_wrappers PUBLIC /GR-)\n        endif()\n        target_link_options(c3c_wrappers PUBLIC /ignore:4099)\n    endif()\n    if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n        target_compile_options(c3c PUBLIC /MTd)\n        if (C3_WITH_LLVM)\n            target_compile_options(c3c_wrappers PUBLIC /MTd)\n        endif()\n        target_compile_options(miniz PUBLIC /MTd)\n        if (C3_USE_TB)\n            target_compile_options(tilde-backend PUBLIC /MTd)\n        endif()\n    else()\n        target_compile_options(c3c PUBLIC /MT)\n        if (C3_WITH_LLVM)\n            target_compile_options(c3c_wrappers PUBLIC /MT)\n        endif()\n        target_compile_options(miniz PUBLIC /MT)\n        if (C3_USE_TB)\n            target_compile_options(tilde-backend PUBLIC /MT)\n        endif()\n    endif()\n    if(C3_WITH_LLVM)\n        set(clang_lib_dir ${llvm_dir}/lib/clang/${C3_LLVM_VERSION}/lib/windows)\n        set(sanitizer_runtime_libraries\n                ${clang_lib_dir}/clang_rt.asan-x86_64.lib\n                ${clang_lib_dir}/clang_rt.asan_dynamic-x86_64.lib\n                ${clang_lib_dir}/clang_rt.asan_dynamic-x86_64.dll\n                ${clang_lib_dir}/clang_rt.asan_dynamic_runtime_thunk-x86_64.lib)\n    endif()\nelse()\n    message(STATUS \"using gcc/clang warning switches\")\n    target_link_options(c3c PRIVATE -pthread)\n    if (C3_WITH_LLVM AND NOT LLVM_ENABLE_RTTI)\n        target_compile_options(c3c_wrappers PRIVATE -fno-rtti)\n    endif()\n    target_compile_options(c3c PRIVATE -pthread -Wall -Werror -Wno-unknown-pragmas -Wno-unused-result\n            -Wno-unused-function -Wno-unused-variable -Wno-unused-parameter)\nendif()\n\ninstall(TARGETS c3c DESTINATION bin)\ninstall(DIRECTORY lib/ DESTINATION lib/c3)\n\n# Man page install (OSX/Linux only)\nif (NOT WIN32)\n    install(FILES c3c.1 DESTINATION \"share/man/man1\")\nendif()\n\nif (C3_WITH_LLVM AND DEFINED sanitizer_runtime_libraries)\n    add_custom_command(TARGET c3c POST_BUILD\n            COMMAND \"${CMAKE_COMMAND}\" -E rm -rf -- $<TARGET_FILE_DIR:c3c>/c3c_rt\n            COMMAND \"${CMAKE_COMMAND}\" -E make_directory $<TARGET_FILE_DIR:c3c>/c3c_rt\n            COMMAND \"${CMAKE_COMMAND}\" -E copy ${sanitizer_runtime_libraries} $<TARGET_FILE_DIR:c3c>/c3c_rt\n            VERBATIM\n            COMMENT \"Copying sanitizer runtime libraries to output directory\")\n\n    if (APPLE)\n        # Change LC_ID_DYLIB to be rpath-based instead of having an absolute path\n        add_custom_command(TARGET c3c POST_BUILD\n                COMMAND find $<TARGET_FILE_DIR:c3c>/c3c_rt -type f -name \"*.dylib\" -execdir ${LLVM_TOOLS_BINARY_DIR}/llvm-install-name-tool -id @rpath/{} {} $<SEMICOLON>\n                VERBATIM)\n    endif()\n\n    install(DIRECTORY $<TARGET_FILE_DIR:c3c>/c3c_rt/ DESTINATION bin/c3c_rt)\nendif()\n\nfeature_summary(WHAT ALL)\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 0.48046875,
          "content": "﻿{\n  \"configurations\": [\n    {\n      \"name\": \"build\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Release\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-DLLVM_DIR=C:\\\\llvm\\\\llvm\\\\build\\\\lib\\\\cmake\\\\llvm -DCMAKE_CXX_FLAGS:STRING=\\\"${CMAKE_CXX_FLAGS} /J\\\"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\"\n    }\n  ]\n}"
        },
        {
          "name": "CODESTYLE.md",
          "type": "blob",
          "size": 3.5341796875,
          "content": "# C3C Coding style for contributors\n\nThis is a rough guide to the coding style used for the C source code in c3c.\n\n## Visual conventions\n\n### Naming Conventions\n\n- Constants use upper snake case, e.g. `THIS_IS_A_CONSTANT`\n- Macros use upper snake case, e.g. `MY_MACRO(123)`\n- User defined types use capitalized camel case. e.g. `MyLittleType`\n- Function names use snake case, e.g. `my_little_function(123)`\n- Variables use snake case, e.g. `context`  \n\nIn addition, function names that act on a particular object, should\nbe prefixed with the type name in snake case, with the name of\nthe function following e.g. `type_info_new` (and not \"new_type_info\").\n\n### Brace placement\n\nThe source Allman style:\n\n    if (foo) \n    {\n        ... code here ...\n    }\n\n### Case and label indentation\n\nGoto labels have no indentation:\n\n    int foo()\n    {\n        x = 0;\n    LABEL1:\n        if (foo) \n        {\n            ... code ...\n        }\n    }\n\nCase statements have one tab indentation:\n\n    switch foo()\n    {\n        case 1:\n            do_something();\n            break;\n        case 2:\n            do_something_else();\n            FALLTHROUGH;\n        default:\n            do_default();\n    }\n\n### Spacing\n\nSpaces between control statements and `()`:\n\n    if (foo) ...\n    while (foo) ...\n\nSpace after `,` and between expressions:\n\n    if (foo && bar) return (Baz) { 1, 2, 3 };\n\nSpace around assignment:\n\n    a += b;\n\nNo space inside parenthesis:\n\n    int x = c * (foo(b) + b);\n\n### Tab vs spaces\n\nRecommendation: tabs, 4 spaces wide. No CRLF in the source.\n\n### If, braces and new lines\n\nAny `if` statement with `else` should use braces.\n\n    if (foo)\n    {\n        ...\n    }\n    else\n    {\n        ...\n    }\n\nSingle line `if` statements are allowed without braces.\n\n    if (this_is_fine()) return true;\n\nOtherwise use braces.\n\n## General principles\n\nGeneral principles for coding.\n\n### Keep big headers\n\nKeep fairly large headers that can be used across multiple files, e.g. `sema_internal.h`\ninstead of fragmenting into one header file per c file.\n\n### Keep the code simple and to the point\n\nDon't add things \"just because\", because this requires more code to maintain.\n\n### If it isn't tested it doesn't work\n\nCode that works without testing are rare things. Test your code and preferably add\nmore tests as you go along.\n\n### Don't bring in dependencies\n\nExternal libraries has maintainability issues. Try to depend on as few libraries\nas possible. Currently, c3c only depends on LLVM and libc with an optional \ndependency on libcurl.\n\nDo use rewrites of subsets of other libraries to bring in functionality, but avoid\ncopying in libraries that needs to be updated separately.\n\n## Internals\n\nSome notes about the internals.\n\n### The arena allocator\n\nThe compiler uses an arena allocator that isn't released until the compiler closes.\nIn addition to this general allocator, there are allocators for certain types,\nsuch as `Decl` `Ast` etc. These are discarded before code generation. Consequently\nyou need to make sure that none of those are used in the code generation phase.\n\n### Dynamic array\n\nDynamic arrays are used throughout the compiler. They use the arena allocator and\nthus will use up memory until the compiler ends. To create a dynamic array, just\ndeclare a null pointer to the type and use `vec_add` to add elements:\n\n    Foo *foos = NULL;\n    vec_add(foos, (Foo) { 1, 2 });\n\nIterating over the elements are done using `VECEACH`.\n\n### Scratch buffer for strings.\n\nThere is a scratch buffer for strings in the `global_context` prefer using that\none with related functions when working on temporary strings."
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.908203125,
          "content": "# Contributor Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a good experience for everyone, no exceptions.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Being respectful of differing viewpoints and experiences\n* Accept and give constructive criticism\n* Treat others as you want to be treated\n\nExamples of unacceptable behavior by participants include:\n\n* Trolling, insulting/derogatory comments and personal attacks\n* Harassment of any kind\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n* Bringing up politics of any kind (see below!)\n\n#### Politics\nDue to the volatile nature of political discussions, and the potential danger\nin disrupting the community's efforts, discussion on politics is banned from \nthis project. This includes, but is not limited to, politicized arguments,\ntalking about the political affiliation of members and pushing changes to the\nproject for political reasons. Community members should feel free to hold any\npolitical views from left to right, and that they are treated equal regardless\nof political view. Members are free and encouraged to engage in political \nactivities outside of this project.\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at . All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 7.47265625,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "LICENSE_STDLIB",
          "type": "blob",
          "size": 1.052734375,
          "content": "Copyright (c) 2022 Christoffer Lernö and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.990234375,
          "content": "# C3 Language\n\nC3 is a programming language that builds on the syntax and semantics of the C language,\nwith the goal of evolving it while still retaining familiarity for C programmers. \n\nIt's an evolution, not a revolution: the C-like \nfor programmers who like C.\n\nPrecompiled binaries for the following operating systems are available:\n \n- Windows x64 [download](https://github.com/c3lang/c3c/releases/download/latest/c3-windows.zip), [install instructions](#installing-on-windows-with-precompiled-binaries).\n- Debian x64 [download](https://github.com/c3lang/c3c/releases/download/latest/c3-linux.tar.gz), [install instructions](#installing-on-debian-with-precompiled-binaries).\n- Ubuntu x86 [download](https://github.com/c3lang/c3c/releases/download/latest/c3-ubuntu-20.tar.gz), [install instructions](#installing-on-ubuntu-with-precompiled-binaries).\n- MacOS Arm64 [download](https://github.com/c3lang/c3c/releases/download/latest/c3-macos.zip), [install instructions](#installing-on-mac-with-precompiled-binaries).\n\nThe manual for C3 can be found at [www.c3-lang.org](http://www.c3-lang.org).\n\n![vkQuake](https://github.com/c3lang/c3c/blob/master/resources/images/vkQuake.png?raw=true)\n\nThanks to full ABI compatibility with C, it's possible to mix C and C3 in the same project with no effort. As a demonstration, vkQuake was compiled with a small portion of the code converted to C3 and compiled with the c3c compiler. (The fork can be found at https://github.com/c3lang/vkQuake)\n\n### Design Principles\n- Procedural \"get things done\"-type of language.\n- Try to stay close to C - only change what's really necessary.\n- C ABI compatibility and excellent C integration.\n- Learning C3 should be easy for a C programmer.\n- Data is inert.\n- Avoid \"big ideas\" & the \"more is better\" fallacy.\n- Introduce some higher level conveniences where the value is great.\n\nC3 owes its inspiration to the [C2 language](http://c2lang.org): to iterate on top of C without trying to be a\nwhole new language.\n\n### Example code\n\nThe following code shows [generic modules](https://c3-lang.org/references/docs/generics/) (more examples can be found at https://c3-lang.org/references/docs/examples/). \n\n```cpp\nmodule stack (<Type>);\n// Above: the parameterized type is applied to the entire module.\n\nstruct Stack\n{\n    usz capacity;\n    usz size;\n    Type* elems;\n}\n\n// The type methods offers dot syntax calls,\n// so this function can either be called \n// Stack.push(&my_stack, ...) or\n// my_stack.push(...)\nfn void Stack.push(Stack* this, Type element)\n{\n    if (this.capacity == this.size)\n    {\n        this.capacity *= 2;\n        if (this.capacity < 16) this.capacity = 16;\n        this.elems = realloc(this.elems, Type.sizeof * this.capacity);\n    }\n    this.elems[this.size++] = element;\n}\n\nfn Type Stack.pop(Stack* this)\n{\n    assert(this.size > 0);\n    return this.elems[--this.size];\n}\n\nfn bool Stack.empty(Stack* this)\n{\n    return !this.size;\n}\n```\n\nTesting it out:\n\n```cpp\nimport stack;\n\n// Define our new types, the first will implicitly create \n// a complete copy of the entire Stack module with \"Type\" set to \"int\"\ndef IntStack = Stack(<int>);\n// The second creates another copy with \"Type\" set to \"double\"\ndef DoubleStack = Stack(<double>);\n\n// If we had added \"define IntStack2 = Stack(<int>)\"\n// no additional copy would have been made (since we already\n// have an parameterization of Stack(<int>)) so it would\n// be same as declaring IntStack2 an alias of IntStack\n\n// Importing an external C function is straightforward\n// here is an example of importing libc's printf:\nextern fn int printf(char* format, ...);\n\nfn void main()\n{\n    IntStack stack;\n    // Note that C3 uses zero initialization by default\n    // so the above is equivalent to IntStack stack = {};\n    \n    stack.push(1);\n    // The above can also be written IntStack.push(&stack, 1); \n    \n    stack.push(2);\n    \n    // Prints pop: 2\n    printf(\"pop: %d\\n\", stack.pop());\n    // Prints pop: 1\n    printf(\"pop: %d\\n\", stack.pop());\n    \n    DoubleStack dstack;\n    dstack.push(2.3);\n    dstack.push(3.141);\n    dstack.push(1.1235);\n    // Prints pop: 1.123500\n    printf(\"pop: %f\\n\", dstack.pop());\n}\n```\n\n### In what ways does C3 differ from C?\n\n- No mandatory header files\n- New semantic macro system\n- Module based name spacing\n- Slices\n- Compile time reflection\n- Enhanced compile time execution\n- Generics based on generic modules\n- \"Result\"-based zero overhead error handling\n- Defer\n- Value methods\n- Associated enum data\n- No preprocessor\n- Less undefined behaviour and added runtime checks in \"safe\" mode\n- Limited operator overloading to enable userland dynamic arrays\n- Optional pre and post conditions\n\n### Current status\n\nThe current stable version of the compiler is **version 0.6.5**.\n\nThe upcoming 0.6.x releases will focus on expanding the standard library.\nFollow the issues [here](https://github.com/c3lang/c3c/issues).\n\nIf you have suggestions on how to improve the language, either [file an issue](https://github.com/c3lang/c3c/issues) \nor discuss C3 on its dedicated Discord: [https://discord.gg/qN76R87](https://discord.gg/qN76R87).\n\nThe compiler is currently verified to compile on Linux, Windows and MacOS.\n\n**Support matrix**\n\n| Platform                 | Native C3 compiler available? | Target supported        | Stack trace | Threads  | Sockets  | Inline asm |\n|--------------------------|-------------------------------|-------------------------|-------------|----------|----------|------------|\n| Win32 x64                | Yes                           | Yes + cross compilation | Yes         | Yes      | Yes      | Yes*       |\n| Win32 Aarch64            | Untested                      | Untested                | Untested    | Untested | Untested | Yes*       |\n| MacOS x64                | Yes                           | Yes + cross compilation | Yes         | Yes      | Yes      | Yes*       |\n| MacOS Aarch64            | Yes                           | Yes + cross compilation | Yes         | Yes      | Yes      | Yes*       |\n| iOS Aarch64              | No                            | Untested                | Untested    | Yes      | Yes      | Yes*       |\n| Linux x86                | Yes                           | Yes                     | Yes         | Yes      | Yes      | Yes*       |\n| Linux x64                | Yes                           | Yes                     | Yes         | Yes      | Yes      | Yes*       |\n| Linux Aarch64            | Yes                           | Yes                     | Yes         | Yes      | Yes      | Yes*       |\n| Linux Riscv32            | Yes                           | Yes                     | Yes         | Yes      | Yes      | Untested   |\n| Linux Riscv64            | Yes                           | Yes                     | Yes         | Yes      | Yes      | Untested   |\n| ELF freestanding x86     | No                            | Untested                | No          | No       | No       | Yes*       |\n| ELF freestanding x64     | No                            | Untested                | No          | No       | No       | Yes*       |\n| ELF freestanding Aarch64 | No                            | Untested                | No          | No       | No       | Yes*       |\n| ELF freestanding Riscv64 | No                            | Untested                | No          | No       | No       | Untested   |\n| ELF freestanding Riscv32 | No                            | Untested                | No          | No       | No       | Untested   |\n| FreeBSD x86              | Untested                      | Untested                | No          | Yes      | Untested | Yes*       |\n| FreeBSD x64              | Untested                      | Untested                | No          | Yes      | Untested | Yes*       |\n| NetBSD x86               | Untested                      | Untested                | No          | Yes      | Untested | Yes*       |\n| NetBSD x64               | Untested                      | Untested                | No          | Yes      | Untested | Yes*       |\n| OpenBSD x86              | Untested                      | Untested                | No          | Yes      | Untested | Yes*       |\n| OpenBSD x64              | Untested                      | Untested                | No          | Yes      | Untested | Yes*       |\n| MCU x86                  | No                            | Untested                | No          | No       | No       | Yes*       |\n| Wasm32                   | No                            | Yes                     | No          | No       | No       | No         |\n| Wasm64                   | No                            | Untested                | No          | No       | No       | No         |\n\n*\\* Inline asm is still a work in progress*\n\nMore platforms will be supported in the future.\n\n#### What can you help with?\n\n- If you wish to contribute with ideas, please file issues or discuss on Discord.\n- Interested in contributing to the stdlib? Please get in touch on Discord.\n- Compilation instructions for other Linux and Unix variants are appreciated.\n- Would you like to contribute bindings to some library? It would be nice to have support for SDL, Raylib and more.\n- Build something with C3 and show it off and give feedback. The language is still open for significant tweaks.\n- Start work on the C -> C3 converter which takes C code and does a \"best effort\" to translate it to C3. The first version only needs to work on C headers.\n- Do you have some specific area you have deep knowledge of and could help make C3 even better at doing? File or comment on issues.\n\n### Installing\n\n#### Installing on Windows with precompiled binaries\n1. Download the zip file: [https://github.com/c3lang/c3c/releases/download/latest/c3-windows.zip](https://github.com/c3lang/c3c/releases/download/latest/c3-windows.zip) \n(debug version [here](https://github.com/c3lang/c3c/releases/download/latest/c3-windows-debug.zip))\n2. Unzip exe and standard lib.\n3. If you don't have Visual Studio 17 installed you can either do so, or run the `msvc_build_libraries.py` Python script which will download the necessary files to compile on Windows. \n4. Run `c3c.exe`.\n\n#### Installing on Debian with precompiled binaries\n1. Download tar file: [https://github.com/c3lang/c3c/releases/download/latest/c3-linux.tar.gz](https://github.com/c3lang/c3c/releases/download/latest/c3-linux.tar.gz)\n   (debug version [here](https://github.com/c3lang/c3c/releases/download/latest/c3-linux-debug.tar.gz))\n2. Unpack executable and standard lib.\n3. Run `./c3c`.\n\n#### Installing on Ubuntu with precompiled binaries\n1. Download tar file: [https://github.com/c3lang/c3c/releases/download/latest/c3-ubuntu-20.tar.gz](https://github.com/c3lang/c3c/releases/download/latest/c3-ubuntu-20.tar.gz)\n   (debug version [here](https://github.com/c3lang/c3c/releases/download/latest/c3-ubuntu-20-debug.tar.gz))\n2. Unpack executable and standard lib.\n3. Run `./c3c`.\n\n#### Installing on MacOS with precompiled binaries\n1. Make sure you have XCode with command line tools installed.\n2. Download the zip file: [https://github.com/c3lang/c3c/releases/download/latest/c3-macos.zip](https://github.com/c3lang/c3c/releases/download/latest/c3-macos.zip)\n   (debug version [here](https://github.com/c3lang/c3c/releases/download/latest/c3-macos-debug.zip))\n3. Unzip executable and standard lib.\n4. Run `./c3c`.\n\n(*Note that there is a known issue with debug symbol generation on MacOS 13, see [issue #1086](https://github.com/c3lang/c3c/issues/1086))\n\n#### Installing on Arch Linux\nArch includes c3c in the official 'extra' repo. It can be easily installed the usual way:\n\n```sh\nsudo pacman -S c3c\n# or paru -S c3c\n# or yay -S c3c\n# or aura -A c3c\n```\n\nThere is also an AUR package for the c3c compiler : [c3c-git](https://aur.archlinux.org/packages/c3c-git).\n\nYou can use your AUR package manager:\n```sh\nparu -S c3c-git\n# or yay -S c3c-git\n# or aura -A c3c-git\n```\n\nOr clone it manually:\n```sh\ngit clone https://aur.archlinux.org/c3c-git.git\ncd c3c-git\nmakepkg -si\n```\n\n#### Building via Docker\n\nYou can build `c3c` using either an Ubuntu 18.04 or 20.04 container:\n\n```\n./build-with-docker.sh 18\n```\n\nReplace `18` with `20` to build through Ubuntu 20.04.\n\nFor a release build specify:\n```\n./build-with-docker.sh 20 Release\n```\n\nA `c3c` executable will be found under `bin/`.\n\n#### Installing on OS X using Homebrew\n\n2. Install CMake: `brew install cmake`\n3. Install LLVM 17+: `brew install llvm`\n4. Clone the C3C github repository: `git clone https://github.com/c3lang/c3c.git`\n5. Enter the C3C directory `cd c3c`.\n6. Create a build directory `mkdir build`\n7. Change directory to the build directory `cd build`\n8. Set up CMake build for debug: `cmake ..`\n9. Build: `cmake --build .`\n\n#### Getting started with a \"hello world\"\n\nCreate a `main.c3` file with:\n```c++\nmodule hello_world;\nimport std::io;\n\nfn void main()\n{\n   io::printn(\"Hello, world!\");\n}\n```\n\nMake sure you have the standard libraries at either `../lib/std/` or `/lib/std/`.\n\nThen run\n```sh\nc3c compile main.c3\n```\n\nThe generated binary will by default be named after the module that contains the main\nfunction. In our case that is `hello_world`, so the resulting binary will be\ncalled `hello_world` or `hello_world.exe`depending on platform.\n\n### Compiling\n\n#### Compiling on Windows\n\n1. Make sure you have Visual Studio 17 2022 installed or alternatively install the \"Buildtools for Visual Studio\" (https://aka.ms/vs/17/release/vs_BuildTools.exe) and then select \"Desktop development with C++\"\n2. Install CMake\n3. Clone the C3C github repository: `git clone https://github.com/c3lang/c3c.git`\n4. Enter the C3C directory `cd c3c`.\n5. Set up the CMake build `cmake -B build -G \"Visual Studio 17 2022\" -A x64 -DCMAKE_BUILD_TYPE=Release`\n6. Build: `cmake --build build --config Release`\n7. You should now have the c3c.exe\n\nYou should now have a `c3c` executable.\n\nYou can try it out by running some sample code: `c3c.exe compile ../resources/examples/hash.c3`\n\n*Note that if you run into linking issues when building, make sure that you are using the latest version of VS17.*\n\n\n#### Compiling on Ubuntu 24.04 LTS\n\n1. Make sure you have a C compiler that handles C11 and a C++ compiler, such as GCC or Clang. Git also needs to be installed.\n2. Install LLVM 18 `sudo apt-get install cmake git clang zlib1g zlib1g-dev libllvm18 llvm llvm-dev llvm-runtime liblld-dev liblld-18 libpolly-18-dev`\n3. Clone the C3C github repository: `git clone https://github.com/c3lang/c3c.git`\n4. Enter the C3C directory `cd c3c`.\n5. Create a build directory `mkdir build`\n6. Change directory to the build directory `cd build`\n7. Set up CMake build: `cmake ..`\n8. Build: `cmake --build .`\n\nYou should now have a `c3c` executable.\n\nYou can try it out by running some sample code: `./c3c compile ../resources/examples/hash.c3`\n\n\n#### Compiling on Void Linux\n\n1. As root, ensure that all project dependencies are installed: `xbps-install git cmake llvm17 llvm17-devel lld17-devel libcurl-devel ncurses-devel zlib-devel libzstd-devel libxml2-devel`\n2. Clone the C3C repository: `git clone https://github.com/c3lang/c3c.git`\n    - If you only need the latest commit, you may want to make a shallow clone instead: `git clone https://github.com/c3lang/c3c.git --depth=1`\n3. Enter the directory: `cd c3c`\n4. Create a build directory: `mkdir build`\n5. Enter the build directory: `cd build`\n6. Create the CMake build cache: `cmake ..`\n7. Build: `cmake --build .`\n\nYour c3c executable should have compiled properly. You may want to test it: `./c3c compile ../resources/examples/hash.c3`  \nFor a sytem-wide installation, run the following as root: `cmake --install .`\n\n\n#### Compiling on Fedora\n\n1. Install required project dependencies: `dnf install cmake clang git llvm llvm-devel lld lld-devel ncurses-devel`\n2. Optionally, install additional dependencies: `dnf install libcurl-devel zlib-devel libzstd-devel libxml2-devel libffi-devel`\n3. Clone the C3C repository: `git clone https://github.com/c3lang/c3c.git`\n    - If you only need the latest commit, you may want to make a shallow clone: `git clone https://github.com/c3lang/c3c.git --depth=1`\n4. Enter the C3C directory: `cd c3c`\n5. Create a build directory and navigate into it: `mkdir build && cd build`\n6. Create the CMake build cache. The Fedora repositories provide `.so` libraries for lld, so you need to set the C3_LINK_DYNAMIC flag: `cmake .. -DC3_LINK_DYNAMIC=1`\n7. Build the project: `cmake --build .`\n\nThe c3c binary should be created in the build directory. You can try it out by running some sample code: `./c3c compile ../resources/examples/hash.c3`\n\n\n#### Compiling on other Linux / Unix variants\n\n1. Install CMake.\n2. Install or compile LLVM and LLD *libraries* (version 17+ or higher)\n3. Clone the C3C github repository: `git clone https://github.com/c3lang/c3c.git`\n4. Enter the C3C directory `cd c3c`.\n5. Create a build directory `mkdir build`\n6. Change directory to the build directory `cd build`\n7. Set up CMake build for debug: `cmake ..`. At this point you may need to manually \nprovide the link path to the LLVM CMake directories, e.g. `cmake -DLLVM_DIR=/usr/local/opt/llvm/lib/cmake/llvm/ ..`\n8. Build: `cmake --build .`\n\n*A note on compiling for Linux/Unix/MacOS: to be able to fetch vendor libraries\nlibcurl is needed. The CMake script should detect it if it is available. Note that\nthis functionality is non-essential and it is perfectly fine to user the compiler without it.*\n\n#### Licensing\n\nThe C3 compiler is licensed under LGPL 3.0, the standard library itself is\nMIT licensed.\n\n#### Editor plugins\n\nEditor plugins can be found at https://github.com/c3lang/editor-plugins.\n\n#### Contributing unit tests\n\n1. Write the test, either adding to existing test files in `/test/unit/` or add\n   a new file. (If testing the standard library, put it in the `/test/unit/stdlib/` subdirectory).\n2. Make sure that the test functions have the `@test` attribute. \n3. Run tests and see that they pass. (Recommended settings: `c3c compile-test -O0 test/unit`.\n   - in this example `test/unit/` is the relative path to the test directory, so adjust as required)\n4. Make a pull request for the new tests.\n\n## Thank yous\n\nA huge **THANK YOU** goes out to all contributors and sponsors.\n\nA special thank you to sponsors [Caleb-o](https://github.com/Caleb-o) and [devdad](https://github.com/devdad) for going the extra mile.\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-with-docker.sh",
          "type": "blob",
          "size": 1.1669921875,
          "content": "#!/bin/bash\n\n: ${DOCKER:=docker}\n: ${IMAGE:=\"c3c-builder\"}\n: ${CMAKE_BUILD_TYPE:=Release}\n: ${LLVM_VERSION:=18}\n: ${UBUNTU_VERSION:=\"22.04\"}\n: ${CMAKE_VERSION:=\"3.20.0\"}\n\ncd docker || exit 1  # Exit if the 'docker' directory doesn't exist\n\n$DOCKER build \\\n    --build-arg LLVM_VERSION=$LLVM_VERSION \\\n    --build-arg CMAKE_VERSION=$CMAKE_VERSION \\\n    --build-arg UBUNTU_VERSION=$UBUNTU_VERSION \\\n    -t $IMAGE .\n\nif [ $? -ne 0 ]; then\n    echo \"Docker image build failed. Exiting.\"\n    exit 1\nfi\n\ncd ..\n\nrm -rf build bin\nmkdir -p build bin\n\nchmod -R 777 build bin\n\nexec $DOCKER run -i --rm \\\n    -v \"$PWD\":/home/c3c/source \\\n    -w /home/c3c/source $IMAGE bash -c \\\n    \"cmake -S . -B build \\\n            -G Ninja \\\n            -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \\\n            -DCMAKE_C_COMPILER=clang-$LLVM_VERSION \\\n            -DCMAKE_CXX_COMPILER=clang++-$LLVM_VERSION \\\n            -DCMAKE_LINKER=lld-$LLVM_VERSION \\\n            -DCMAKE_OBJCOPY=llvm-objcopy-$LLVM_VERSION \\\n            -DCMAKE_STRIP=llvm-strip-$LLVM_VERSION \\\n            -DCMAKE_DLLTOOL=llvm-dlltool-$LLVM_VERSION \\\n            -DC3_LLVM_VERSION=auto && \\\n    cmake --build build && \\\n    cp -r build/c3c build/lib bin\""
        },
        {
          "name": "c3c.1",
          "type": "blob",
          "size": 8.603515625,
          "content": ".TH \"c3c\" \"1\" \"2024-10-27\" \"C3 Compiler\" \"User Commands\"\n.SH NAME\nc3c \\- Compiler for the C3 programming language\n\n.SH SYNOPSIS\n.B c3c\n[\\fIoptions\\fR ...] \\fIcommand\\fR [\\fIargs\\fR ...]\n\n.SH DESCRIPTION\n.B c3c\nis the compiler for the C3 language, providing commands for compilation, project\nmanagement, testing, and distribution. The available commands allow users to \ncompile files, initialize projects, build targets, run benchmarks, clean build \nfiles, and more.\n\n.SH COMMANDS\n.PP\n.B c3c compile \n\\fIfile1\\fR [\\fIfile2\\fR ...]\n.RS\nCompile files without a project into an executable.\n.RE\n.PP\n.B c3c init \n\\fIproject name\\fR\n.RS\nInitialize a new project structure.\n.RE\n.PP\n.B c3c init-lib \n\\fIlibrary name\\fR\n.RS\nInitialize a new library structure.\n.RE\n.PP\n.B c3c build \n[\\fItarget\\fR]\n.RS\nBuild the target in the current project.\n.RE\n.PP\n.B c3c benchmark\n.RS\nRun the benchmarks in the current project.\n.RE\n.PP\n.B c3c test\n.RS\nRun the unit tests in the current project.\n.RE\n.PP\n.B c3c clean\n.RS\nClean all build files.\n.RE\n.PP\n.B c3c run \n[\\fItarget\\fR] [-- [\\fIarg1\\fR ...]]\n.RS\nRun (and build if needed) the target in the current project.\n.RE\n.PP\n.B c3c dist \n[\\fItarget\\fR]\n.RS\nClean and build a target for distribution.\n.RE\n.PP\n.B c3c directives \n[\\fItarget\\fR]\n.RS\nGenerate documentation for the target.\n.RE\n.PP\n.B c3c bench \n[\\fItarget\\fR]\n.RS\nBenchmark a target.\n.RE\n.PP\n.B c3c clean-run \n[\\fItarget\\fR] [-- [\\fIarg1\\fR ...]]\n.RS\nClean, then run the target.\n.RE\n.PP\n.B c3c compile-run \n\\fIfile1\\fR [\\fIfile2\\fR ...] [-- [\\fIarg1\\fR ...]]\n.RS\nCompile files then immediately run the result.\n.RE\n.PP\n.B c3c compile-only \n\\fIfile1\\fR [\\fIfile2\\fR ...]\n.RS\nCompile files but do not perform linking.\n.RE\n.PP\n.B c3c compile-benchmark \n\\fIfile1\\fR [\\fIfile2\\fR ...]\n.RS\nCompile files into an executable and run benchmarks.\n.RE\n.PP\n.B c3c compile-test \n\\fIfile1\\fR [\\fIfile2\\fR ...]\n.RS\nCompile files into an executable and run unit tests.\n.RE\n.PP\n.B c3c static-lib \n\\fIfile1\\fR [\\fIfile2\\fR ...]\n.RS\nCompile files without a project into a static library.\n.RE\n.PP\n.B c3c dynamic-lib \n\\fIfile1\\fR [\\fIfile2\\fR ...]\n.RS\nCompile files without a project into a dynamic library.\n.RE\n.PP\n.B c3c headers \n\\fIfile1\\fR [\\fIfile2\\fR ...]\n.RS\nAnalyze files and generate C headers for public methods.\n.RE\n.PP\n.B c3c vendor-fetch \n\\fIlibrary\\fR ...\n.RS\nFetch one or more libraries from the vendor collection.\n.RE\n.PP\n.B c3c project \n\\fIsubcommand\\fR ...\n.RS\nManipulate or view project files.\n.RE\n\n.SH OPTIONS\n.PP\n.B --stdlib \n\\fIdir\\fR\n.RS\nUse this directory as the C3 standard library path.\n.RE\n.PP\n.B --no-entry\n.RS\nDo not generate (or require) a main function.\n.RE\n.PP\n.B --libdir \n\\fIdir\\fR\n.RS\nAdd this directory to the C3 library search paths.\n.RE\n.PP\n.B --lib \n\\fIname\\fR\n.RS\nAdd this library to the compilation.\n.RE\n.PP\n.B --path \n\\fIdir\\fR\n.RS\nUse this as the base directory for the current command.\n.RE\n.PP\n.B --template \n\\fItemplate\\fR\n.RS\nSelect template for 'init': \"exe\", \"static-lib\", \"dynamic-lib\" or a path.\n.RE\n.PP\n.B --about\nPrints a short description of C3.\n.PP\n.B --symtab \n\\fIvalue\\fR\n.RS\nSets the preferred symtab size.\n.RE\n.PP\n.B --max-mem \n\\fIvalue\\fR\n.RS\nSets the preferred max memory size.\n.RE\n.PP\n.B --run-once\n.RS\nAfter running the output file, delete it immediately.\n.RE\n.PP\n.B -V, --version\nPrint version information.\n.PP\n.B -E\nLex only.\n.PP\n.B -P\nOnly parse and output the AST as JSON.\n.PP\n.B -C\nOnly lex, parse and check.\n.PP\n.B -\n\\fIcode\\fR...\n.RS\nRead code from standard in.\n.RE\n.PP\n.B -o \n\\fIfile\\fR\n.RS\nWrite output to \\fIfile\\fR.\n.RE\n.PP\n.B -O0\nSafe, no optimizations, emit debug info.\n.PP\n.B -O1\nSafe, high optimization, emit debug info.\n.PP\n.B -O2\nUnsafe, high optimization, emit debug info.\n.PP\n.B -O3\nUnsafe, high optimization, single module, emit debug info.\n.PP\n.B -O4\nUnsafe, highest optimization, relaxed maths, single module, emit debug info, no panic messages.\n.PP\n.B -O5\nUnsafe, highest optimization, fast maths, single module, emit debug info, no panic messages, no backtrace.\n.PP\n.B -Os\nUnsafe, high optimization, small code, single module, no debug info, no panic messages.\n.PP\n.B -Oz\nUnsafe, high optimization, tiny code, single module, no debug info, no panic messages, no backtrace.\n.PP\n.B -D \n\\fIname\\fR\n.RS\nAdd feature flag \\fIname\\fR.\n.RE\n.PP\n.B -U \n\\fIname\\fR\n.RS\nRemove feature flag \\fIname\\fR.\n.RE\n.PP\n.B --trust=\n\\fIoption\\fR\n.RS\nTrust level: none (default), include ($include allowed), full ($exec / exec allowed).\n.RE\n.PP\n.B --output-dir \n\\fIdir\\fR\n.RS\nOverride general output directory.\n.RE\n.PP\n.B --threads \n\\fInumber\\fR\n.RS\nSet the number of threads to use for compilation.\n.RE\n.PP\n.B --show-backtrace=\n\\fIyes|no\\fR\n.RS\nShow detailed backtrace on segfaults.\n.RE\n\n.PP\n.B -g\nEmit debug info.\n.PP\n.B -g0\nEmit no debug info.\n\n\n.PP\n.B -l \n\\fIlibrary\\fR\n.RS\nLink with the library provided.\n.RE\n.PP\n.B -L \n\\fIlibrary\\fR \\fIdir\\fR\n.RS\nAppend the directory to the linker search paths.\n.RE\n.PP\n.B -z \n\\fIargument\\fR\n.RS\nSend the \\fIargument\\fR as a parameter to the linker.\n.RE\n.PP\n.B --cc \n\\fIpath\\fR\n.RS\nSet C compiler (for C files in projects and use as system linker).\n.RE\n.PP\n.B --linker=\n\\fIoption\\fR [\\fIpath\\fR]\n.RS\nSpecify the linker: builtin, cc, custom (default is 'cc'). 'Custom' requires a path.\n.RE\n\n.PP\n.B --use-stdlib=\n\\fIyes|no\\fR\n.RS\nInclude the standard library (default: yes).\n.RE\n.PP\n.B --link-libc=\n\\fIyes|no\\fR\n.RS\nLink libc and other default libraries (default: yes).\n.RE\n.PP\n.B --emit-stdlib=\n\\fIyes|no\\fR\n.RS\nOutput files for the standard library (default: yes).\n.RE\n.PP\n.B --panicfn \n\\fIname\\fR\n.RS\nOverride the panic function name.\n.RE\n.PP\n.B --testfn \n\\fIname\\fR\n.RS\nOverride the test runner function name.\n.RE\n.PP\n.B --benchfn \n\\fIname\\fR\n.RS\nOverride the benchmark runner function name.\n.RE\n\n.PP\n.B --reloc=\n\\fIoption\\fR\n.RS\nSpecify the relocation model: none, pic, PIC, pie, PIE.\n.RE\n.PP\n.B --x86cpu=\n\\fIoption\\fR\n.RS\nSet general level of x64 CPU: baseline, ssse3, sse4, avx1, avx2-v1, avx2-v2 (Skylake/Zen1+), avx512 (Icelake/Zen4+), native.\n.RE\n.PP\n.B --x86vec=\n\\fIoption\\fR\n.RS\nSet maximum type of vector use: none, mmx, sse, avx, avx512, default.\n.RE\n.PP\n.B --riscvfloat=\n\\fIoption\\fR\n.RS\nSet type of RISC-V float support: none, float, double.\n.RE\n.PP\n.B --memory-env=\n\\fIoption\\fR\n.RS\nSet the memory environment: normal, small, tiny, none.\n.RE\n.PP\n.B --strip-unused=\n\\fIyes|no\\fR\n.RS\nStrip unused code and globals from the output (default: yes).\n.RE\n.PP\n.B --fp-math=\n\\fIoption\\fR\n.RS\nSpecify floating-point math behavior: strict, relaxed, fast.\n.RE\n.PP\n.B --win64-simd=\n\\fIoption\\fR\n.RS\nWindows SIMD ABI: array, full.\n.RE\n\n.PP\n.B --debug-stats\nPrint debug statistics.\n.PP\n.B --print-linking\nPrint linker arguments.\n.PP\n.B --debug-log\nPrint debug logging to stdout.\n\n\n.PP\n.B --benchmarking\nRun built-in benchmarks.\n.PP\n.B --testing\nRun built-in tests.\n\n\n.PP\n.B --list-attributes\nList all attributes.\n.PP\n.B --list-builtins\nList all builtins.\n.PP\n.B --list-keywords\nList all keywords.\n.PP\n.B --list-operators\nList all operators.\n.PP\n.B --list-precedence\nList operator precedence order.\n.PP\n.B --list-project-properties\nList all available keys used in project.json files.\n.PP\n.B --list-manifest-properties\nList all available keys used in manifest.json files.\n.PP\n.B --list-targets\nList all architectures the compiler supports.\n.PP\n.B --list-type-properties\nList all type properties.\n\n\n.PP\n.B --print-output\nPrint the object files created to stdout.\n.PP\n.B --print-input\nPrint inputted C3 files to stdout.\n\n\n.PP\n.B --winsdk \n\\fIdir\\fR\n.RS\nSet the directory for Windows system library files for cross-compilation.\n.RE\n.PP\n.B --wincrt=\n\\fIoption\\fR\n.RS\nWindows CRT linking: none, static-debug, static, dynamic-debug (default if debug info enabled), dynamic (default).\n.RE\n.PP\n.B --windef \n\\fIfile\\fR\n.RS\nUse Windows 'def' file for function exports instead of 'dllexport'.\n.RE\n\n.PP\n.B --macossdk \n\\fIdir\\fR\n.RS\nSet the directory for the MacOS SDK for cross-compilation.\n.RE\n.PP\n.B --macos-min-version \n\\fIver\\fR\n.RS\nSet the minimum MacOS version to compile for.\n.RE\n.PP\n.B --macos-sdk-version \n\\fIver\\fR\n.RS\nSet the MacOS SDK version to compile for.\n.RE\n\n.PP\n.B --linux-crt \n\\fIdir\\fR\n.RS\nSet the directory to use for finding crt1.o and related files.\n.RE\n.PP\n.B --linux-crtbegin \n\\fIdir\\fR\n.RS\nSet the directory to use for finding crtbegin.o and related files.\n.RE\n\n.PP\n.B --vector-conv=\n\\fIoption\\fR\n.RS\nSet vector conversion behavior: default, old.\n.RE\n.PP\n.B --sanitize=\n\\fIoption\\fR\n.RS\nEnable a sanitizer: address, memory, thread.\n.RE\n\n.SH EXAMPLES\n.PP\nCreate a project:\n.RS\n.B c3c init new_project\n.RE\n.PP\nCreate a library project:\n.RS\n.B c3c init-lib new_library\n.RE\n.PP\nCompile a file:\n.RS\n.B c3c compile main.c3\n.RE\n.PP\nBuild the current project:\n.RS\n.B c3c build\n.RE\n.PP\nRun tests for the current project:\n.RS\n.B c3c test\n.RE\n"
        },
        {
          "name": "dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.4638671875,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1726560853,\n        \"narHash\": \"sha256-X6rJYSESBVr3hBoH0WbKE5KvhPU5bloyZ2L4K60/fPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"c1dfcf08411b08f6b8615f7d8971a2bfa81d5e8a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1730958623,\n        \"narHash\": \"sha256-JwQZIGSYnRNOgDDoIgqKITrPVil+RMWHsZH1eE1VGN0=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"85f7e662eda4fa3a995556527c87b2524b691933\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.037109375,
          "content": "{\n  description = \"C3 compiler flake\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs?ref=nixpkgs-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n\n  outputs = { self, ... } @ inputs: inputs.flake-utils.lib.eachDefaultSystem \n  (system: \n    let pkgs = import inputs.nixpkgs { inherit system; }; \n        call = set: pkgs.callPackage ./nix/default.nix ( \n          set // { \n            rev = self.rev or \"unknown\"; \n          } \n        );\n    in {\n      packages = {\n        default = self.packages.${system}.c3c;\n\n        c3c = call {};\n        \n        c3c-checks = pkgs.callPackage ./nix/default.nix { \n          checks = true; \n        };\n\n        c3c-debug = pkgs.callPackage ./nix/default.nix { \n          debug = true; \n        };\n\n        c3c-debug-checks = pkgs.callPackage ./nix/default.nix { \n          debug = true; \n          checks = true; \n        };\n      };\n\n      devShells = {\n        default = pkgs.callPackage ./nix/shell.nix {\n          c3c = self.packages.${system}.c3c-debug; \n        };\n      };\n    }\n  );\n}\n"
        },
        {
          "name": "git_hash.cmake",
          "type": "blob",
          "size": 0.44140625,
          "content": "find_package(Git QUIET)\n\nset(GIT_HASH \"unknown\")\n\nif(GIT_FOUND AND EXISTS \"${CMAKE_CURRENT_LIST_DIR}/.git\")\n    execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse HEAD\n                    OUTPUT_VARIABLE GIT_HASH\n                    OUTPUT_STRIP_TRAILING_WHITESPACE\n                    COMMAND_ERROR_IS_FATAL ANY)\nendif()\n\nmessage(\"Git Hash: ${GIT_HASH}\")\n\nfile(WRITE ${CMAKE_BINARY_DIR}/git_hash.h \"#pragma once\\n#define GIT_HASH \\\"${GIT_HASH}\\\"\\n\")\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "msvc_build_libraries.py",
          "type": "blob",
          "size": 7.2919921875,
          "content": "#!/usr/bin/env python3\n\n# Script based on https://gist.github.com/mmozeiko/7f3162ec2988e81e56d5c4e22cde9977\n# by Mārtiņš Možeiko.\n# Changes and additions to the gist are licensed under the CC0 License.\n\nimport platform\nimport io\nimport json\nimport shutil\nimport hashlib\nimport zipfile\nimport argparse\nimport subprocess\nimport urllib.request\nimport os\nimport ssl\nimport tempfile\nfrom pathlib import Path\n\nif (platform.system() == \"Windows\"):\n\tprint(\"Creating msvc_sdk for compilation without VS.\")\nelse:\n\tprint(\"Creating msvc_sdk for cross platform compilation to Windows.\")\n\nOUTPUT = Path(tempfile.mkdtemp()) # output folder\nSDK_OUTPUT = Path(\"msvc_sdk\")\n\nif (not os.environ.get('PYTHONHTTPSVERIFY', '') and\n\t\tgetattr(ssl, '_create_unverified_context', None)):\n\tssl._create_default_https_context = ssl._create_unverified_context\n\nMANIFEST_URL = \"https://aka.ms/vs/17/release/channel\"\n\ndef download(url):\n\twith urllib.request.urlopen(url) as res:\n\t\treturn res.read()\n\ndef download_progress(url, check, name, f):\n\tdata = io.BytesIO()\n\twith urllib.request.urlopen(url) as res:\n\t\ttotal = int(res.headers[\"Content-Length\"])\n\t\tsize = 0\n\t\twhile True:\n\t\t\tblock = res.read(1<<20)\n\t\t\tif not block:\n\t\t\t\tbreak\n\t\t\tf.write(block)\n\t\t\tdata.write(block)\n\t\t\tsize += len(block)\n\t\t\tperc = size * 100 // total\n\t\t\tprint(f\"\\r{name} ... {perc}%\", end=\"\")\n\tprint()\n\tdata = data.getvalue()\n\tdigest = hashlib.sha256(data).hexdigest()\n\tif check.lower() != digest:\n\t\texit(f\"Hash mismatch for f{pkg}\")\n\treturn data\n\n# super crappy msi format parser just to find required .cab files\ndef get_msi_cabs(msi):\n\tindex = 0\n\twhile True:\n\t\tindex = msi.find(b\".cab\", index+4)\n\t\tif index < 0:\n\t\t\treturn\n\t\tyield msi[index-32:index+4].decode(\"ascii\")\n\ndef first(items, cond):\n\treturn next(item for item in items if cond(item))\n\n### parse command-line arguments\n\nap = argparse.ArgumentParser()\nap.add_argument(\"--show-versions\", const=True, action=\"store_const\", help=\"Show available MSVC and Windows SDK versions\")\nap.add_argument(\"--accept-license\", const=True, action=\"store_const\", help=\"Automatically accept license\")\nap.add_argument(\"--msvc-version\", help=\"Get specific MSVC version\")\nap.add_argument(\"--sdk-version\", help=\"Get specific Windows SDK version\")\nargs = ap.parse_args()\n\n\n### get main manifest\n\nmanifest = json.loads(download(MANIFEST_URL))\n\n\n### download VS manifest\n\nvs = first(manifest[\"channelItems\"], lambda x: x[\"id\"] == \"Microsoft.VisualStudio.Manifests.VisualStudio\")\npayload = vs[\"payloads\"][0][\"url\"]\n\nvsmanifest = json.loads(download(payload))\n\n\n### find MSVC & WinSDK versions\n\npackages = {}\nfor p in vsmanifest[\"packages\"]:\n\tpackages.setdefault(p[\"id\"].lower(), []).append(p)\n\nmsvc = {}\nsdk_path = {}\n\nfor pid,p in packages.items():\n\tif pid.startswith(\"Microsoft.VisualStudio.Component.VC.\".lower()) and pid.endswith(\".x86.x64\".lower()):\n\t\tpver = \".\".join(pid.split(\".\")[4:6])\n\t\tif pver[0].isnumeric():\n\t\t\tmsvc[pver] = pid\n\telif pid.startswith(\"Microsoft.VisualStudio.Component.Windows10SDK.\".lower()) or \\\n\t\t\t pid.startswith(\"Microsoft.VisualStudio.Component.Windows11SDK.\".lower()):\n\t\tpver = pid.split(\".\")[-1]\n\t\tif pver.isnumeric():\n\t\t\tsdk_path[pver] = pid\n\nif args.show_versions:\n\tprint(\"MSVC versions:\", \" \".join(sorted(msvc.keys())))\n\tprint(\"Windows SDK versions:\", \" \".join(sorted(sdk_path.keys())))\n\texit(0)\n\nmsvc_ver = args.msvc_version or max(sorted(msvc.keys()))\nsdk_ver = args.sdk_version or max(sorted(sdk_path.keys()))\n\nif msvc_ver in msvc:\n\tmsvc_pid = msvc[msvc_ver]\n\tmsvc_ver = \".\".join(msvc_pid.split(\".\")[4:-2])\nelse:\n\texit(f\"Unknown MSVC version: f{args.msvc_version}\")\n\nif sdk_ver in sdk_path:\n\tsdk_pid = sdk_path[sdk_ver]\nelse:\n\texit(f\"Unknown Windows SDK version: f{args.sdk_version}\")\n\nprint(f\"Downloading MSVC v{msvc_ver} and Windows SDK v{sdk_ver}\")\n\n\n### agree to license\n\ntools = first(manifest[\"channelItems\"], lambda x: x[\"id\"] == \"Microsoft.VisualStudio.Product.BuildTools\")\nresource = first(tools[\"localizedResources\"], lambda x: x[\"language\"] == \"en-us\")\nlicense = resource[\"license\"]\n\nif not args.accept_license:\n\taccept = input(f\"Do you accept Visual Studio license at {license}, and also confirm that you have a valid license Visual Studio license allowing you to download the VS Build Tools [Y/N] ?\")\n\tif not accept or accept[0].lower() != \"y\":\n\t\texit(0)\n\nshutil.rmtree(SDK_OUTPUT, ignore_errors = True)\ntotal_download = 0\n\n### download Windows SDK\n\narchs = [\n\t#\"arm\",\n\t#\"arm64\",\n\t\"x64\",\n\t#\"x86\"\n]\n\nmsvc_packages = [\n\tf\"microsoft.vc.{msvc_ver}.asan.headers.base\",\n]\n\nfor arch in archs:\n\tmsvc_packages.append(f\"microsoft.vc.{msvc_ver}.crt.{arch}.desktop.base\")\n\tmsvc_packages.append(f\"microsoft.vc.{msvc_ver}.crt.{arch}.store.base\")\n\tmsvc_packages.append(f\"microsoft.vc.{msvc_ver}.asan.{arch}.base\")\n\nfor pkg in msvc_packages:\n\tp = first(packages[pkg], lambda p: p.get(\"language\") in (None, \"en-US\"))\n\tfor payload in p[\"payloads\"]:\n\t\twith tempfile.TemporaryFile() as f:\n\t\t\tdata = download_progress(payload[\"url\"], payload[\"sha256\"], pkg, f)\n\t\t\ttotal_download += len(data)\n\t\t\twith zipfile.ZipFile(f) as z:\n\t\t\t\tfor name in z.namelist():\n\t\t\t\t\tif name.startswith(\"Contents/\"):\n\t\t\t\t\t\tout = OUTPUT / Path(name).relative_to(\"Contents\")\n\t\t\t\t\t\tout.parent.mkdir(parents=True, exist_ok=True)\n\t\t\t\t\t\tout.write_bytes(z.read(name))\n\nsdk_packages = [\n\t# Windows SDK libs\n\t\"Windows SDK for Windows Store Apps Libs-x86_en-us.msi\",\n\t\"Windows SDK Desktop Libs x64-x86_en-us.msi\",\n\t# CRT headers & libs\n\t\"Universal CRT Headers Libraries and Sources-x86_en-us.msi\",\n]\n\nwith tempfile.TemporaryDirectory() as d:\n\tdst = Path(d)\n\n\tsdk_pkg = packages[sdk_pid][0]\n\tsdk_pkg = packages[first(sdk_pkg[\"dependencies\"], lambda x: True).lower()][0]\n\n\tmsi = []\n\tcabs = []\n\n\t# download msi files\n\tfor pkg in sdk_packages:\n\t\tpayload = first(sdk_pkg[\"payloads\"], lambda p: p[\"fileName\"] == f\"Installers\\\\{pkg}\")\n\t\tmsi.append(dst / pkg)\n\t\twith open(dst / pkg, \"wb\") as f:\n\t\t\tdata = download_progress(payload[\"url\"], payload[\"sha256\"], pkg, f)\n\t\t\ttotal_download += len(data)\n\t\t\tcabs += list(get_msi_cabs(data))\n\n\t# download .cab files\n\tfor pkg in cabs:\n\t\tpayload = first(sdk_pkg[\"payloads\"], lambda p: p[\"fileName\"] == f\"Installers\\\\{pkg}\")\n\t\twith open(dst / pkg, \"wb\") as f:\n\t\t\tdownload_progress(payload[\"url\"], payload[\"sha256\"], pkg, f)\n\n\tprint(\"Unpacking msi files...\")\n\n\t# run msi installers\n\tfor m in msi:\n\t\tif (platform.system() == \"Windows\"):\n\t\t\tsubprocess.check_call([\"msiexec.exe\", \"/a\", m, \"/quiet\", \"/qn\", f\"TARGETDIR={OUTPUT.resolve()}\"])\n\t\telse:\n\t\t\tsubprocess.check_call([\"msiextract\", m, '-C', OUTPUT.resolve()])\n\n\n### versions\n\nif (platform.system() == \"Windows\"):\n\twindow_kit = OUTPUT / \"Windows Kits/\"\nelse:\n\twindow_kit = OUTPUT / \"Program Files/Windows Kits/\"\n\nucrt = list(window_kit.glob(\"*/Lib/*/ucrt\"))[0]\num = list(window_kit.glob(\"*/Lib/*/um\"))[0]\nlib = list((OUTPUT / \"VC/Tools/MSVC/\").glob(\"*/lib\"))[0]\n\nSDK_OUTPUT.mkdir(exist_ok=True)\n\ndef copy(src, dst):\n\tlow = dst.lower()\n\tbase = os.path.basename(low)\n\tif base == \"msvcrt.lib\" or base == \"oldnames.lib\":\n\t\tbase = base[:-3].upper() + \"lib\"\n\t\tpath = os.path.join(os.path.dirname(low), base);\n\t\tshutil.copy(src, path)\n\tshutil.copy(src, low)\n\nfor arch in archs:\n\tout_dir = SDK_OUTPUT / arch\n\tshutil.copytree(ucrt / arch, out_dir, copy_function=copy, dirs_exist_ok=True)\n\tshutil.copytree(um / arch, out_dir, copy_function=copy, dirs_exist_ok=True)\n\tshutil.copytree(lib / arch, out_dir, copy_function=copy, dirs_exist_ok=True)\n\nprint(\"Congratulations! The 'msvc_sdk' directory was successfully generated.\")\n"
        },
        {
          "name": "nix",
          "type": "tree",
          "content": null
        },
        {
          "name": "project_suggestions.md",
          "type": "blob",
          "size": 0.61328125,
          "content": "# Project ideas\n\n- HTTPS engine, allowing TLS etc on top of HTTP\n- Open GL bindings\n- Vulcan bindings\n- Imgui library\n- Job queue\n- TOML serialization and deserialization\n- Classic games: Tetris, Asteroids, Snake, Space Invaders, Pac Man, Defender, Frogger, Donkey Kong, Surround, Breakout, Galaxian, Centipede, Pole Position, Lunar Lander, Q*bert!, Dig Dug.   \n- Protobuf library\n- MySQL bindings\n- Postgres bindings\n- Thread safe allocators\n- Lua bindings for embedding Lua\n- SVG library\n- Proxy server\n- Emulators, GBA, Atari 2600 etc emulators\n- Cross platform sound and music library\n- XML serialization and deserialization"
        },
        {
          "name": "releasenotes.md",
          "type": "blob",
          "size": 52.0537109375,
          "content": "# C3C Release Notes\n\n## 0.6.6 Change list\n\n### Changes / improvements\n- Split help into normal and \"full\" help, #1703\n- Removed 'headers' command line option.\n- Add `enum.from_ordinal` and `fault.from_ordinal`\n- Deprecate cast-style conversion from integer <-> enum.\n- Make deprecation an error in test mode.\n- Add `--win-vs-dirs` to override VS detection dirs.\n- Add `\"name\"` project property to override the name of the resulting binary. #1719\n- Improved `add-project` to take arguments.\n- Improve error reporting when using type names as the function argument #1750.\n- Improve ordering of method registration to support adding methods to generic modules with method constraints #1746\n- Support experimental `@operator(construct)` operator overload.\n- Allow using 'var' to declare lambdas in functions.\n- Add 'validation' setting and make dead code a warning.\n- Allow compile time `$foreach` iteration over constant Strings and bytes.\n- Improved error message when accessing `@private` from other modules #1769.\n- Include `@name` when searching for possible matches to `name` in the error message. #1779\n- Improve `@param` parse errors #1777\n- Improved `#foo` resolution inside of the compiler.\n- Deprecated '&' macro arguments.\n- Deprecate `fn void! main() type main functions.\n- Deprecate old `void!` @benchmark and @test functions.\n- Allow test runners to take String[] arguments.\n- Added `--lsp` output.\n- Improve the error message when running out of memory.\n- Allowed passing arguments to @test / @benchmark runners via `c3c test[benchmark] -- -o --opt1 <arg1>`\n- Handle bytes and string literals the same way in terms of zero termination.\n- Function comments are stored and displayed with -P.\n- Prevent `#hash` arguments from taking code that modifies ct variables. #1794\n\n### Fixes\n- Fix case trying to initialize a `char[*]*` from a String.\n- Fix Map & HashMap `put_all_for_create` not copying all elements, causing `init_from_map` to create incomplete copy.\n- Fix bug when a macro calling an extern function was called in another module also declaring and calling the same function. #1690\n- `static-lib` and `dynamic-lib` options from the command line now produces headers.\n- Fix bug outputting exported functions without predefined extname.\n- Fix problem where crt1 was linked for dynamic libraries on Linux and BSD. #1710\n- Fix CRT detection on Arch Linux.\n- Fix lexer allowing a trailing underscore (_) with hex and binary literals.\n- Fix `--list-operators` CLI command printing underscore (_) and hash (#).\n- Fix bug in temp allocator when temp memory is exhausted and allocation needs overaligned mem. #1715\n- Incorrectly handles distinct enums and pointers with '+=' and '-=' #1717.\n- Prevent DString from being initialized with \"\".\n- Fix bug in OnStackAllocator when freeing overallocated data. #1720\n- Use `weak_odr` rather than `weak` on Windows which seems to prevent issues such as #1704.\n- Use `weak` on dyn-symbols on Linux.\n- Fix crash on project.json not having an empty set of targets.\n- Miscompile when indexing an array with small unsigned types for enums.\n- Change CBool to be 1 byte.\n- `any_to_int` checks value to be int and no longer works with enum.\n- Add check in formatter printing \"%c\".\n- Fix bug where `!!` and `!` was not recognized to jump out of the current scope.\n- Fix bug when including compile time parameters in trailing body more than once.\n- Fix issue with compiling a constant struct containing a string array in a local context.\n- Fix error where panic would not properly stop the program when stacktrace couldn't be printed #1751.\n- Macros with default arguments to `&`, `#` and type parameters didn't work as expected. #1754.\n- `net::poll()` with negative timeout behaved incorrectly.\n- Return type inference bugs with macros #1757\n- `$defined` in a global scope should accept testing normal macros.\n- Assert on add to uninitialized ct variable #1765.\n- Dynamic function lookup fails after changing type without dummy anycast #1761\n- $vasplat was allowed inside of a function when passed as an argument to a function.\n- Prohibit raw vaargs in regular functions with a function body.\n- Assert on certain slice to slice casts. #1768.\n- Fix vector float -> bool conversion.\n- Fix `+a = 1` erronously being accepted.\n- Fix not freeing a zero length String\n- Macros with trailing bodys aren't allowed as the single statement after a while loop with no body #1772.\n- Deref subscripts as needed for macro ref method arguments. #1789\n- Change ordering to simplify adding methods to type in conditional modules.\n- `#foo` style arguments were not type checked when given a type. #1790\n- Bug when using +++ on value build a slice or array: the rhs cast was not done.\n- Fix bug preventing compile time slices from being iterated over with `$foreach`.\n- Fix bug with defer assignment in macro #1807.\n- Fix regression with swizzle references for vectors #1810.\n- Assert when partially initializing a constant struct containing a slice #1812.\n- Assert concatenating constant slices #1805.\n- Do not link \"ld\" on Linux with no libc.\n- Fix bug when multiple `$else` clauses followed an `$if` #1824.\n\n### Stdlib changes\n- Increase BitWriter.write_bits limit up to 32 bits.\n- Updates to `Slice2d`, like `get_xy` and others.\n- Added `iter()` `value_iter()` and `key_iter()` to HashMap.\n- Add \"tokenizer\" to String.\n- Add \"skip_empty\" to split methods. Add split_to_buffer method.\n- Add `@enum_from_value`.\n- Updated hash function.\n- Added URL parser.\n- Added convenience functions to `Maybe`.\n- Added `String.trim_left()` and `.trim_right()`.\n- Deprecation of several `&` macros.\n- Format functions for timedates.\n- Add `@assert_leak()` to assert on memory leaks in the scope.\n\n## 0.6.5 Change list\n\n### Changes / improvements\n- Allow splat in initializers.\n- Init command will now add `test-sources` to `project.json` #1520\n- `a++` may be discarded if `a` is optional and ++/-- works for overloaded operators.\n- Improve support for Windows cross compilation on targets with case sensitive file systems.\n- Add \"sources\" support to library `manifest.json`, defaults to root folder if unspecified.\n- Add char_at method in DString and operators [], len, []= and &[].\n- Add `-q` option, make `--run-once` implicitly `-q`.\n- Add `-v`, `-vv` and `-vvv` options for increasing verbosity, replacing debug-log and debug-stats options.\n\n### Fixes\n- Fix bug where `a > 0 ? f() : g()` could cause a compiler crash if both returned `void!`.\n- `@builtin` was not respected for generic modules #1617.\n- Fix issue writing a single byte in the WriteBuffer\n- A distinct inline pointer type can now participate in pointer arithmetics.\n- Support &a[0] returning the distinct type when applying it to a distinct of a pointer.\n- Fix error when calling `HashMap.remove` on uninitialized `HashMap`.\n- Fix issue with resolved try-unwrap in defer.\n- Fix issue with overloaded subscript and ++/-- and assign ops (e.g. `*=`)\n- Fix issue with properties in different targets not being respected #1633.\n- Indexing an Optional slice would crash in codegen #1636.\n- SimpleHeapAllocator bug when splitting blocks allowed memory overrun.\n- Not possible to alias or take reference for extension methods on non-user defined types. #1637\n- Prevent methods from using names of properties or fields. #1638\n- b64 / hex data strings can now be used with \\` as well.\n- Contracts on generic modules would evaluate too late, sometimes not catching the error until it already occurred elsewhere.\n- Fix bug preventing optionals from being used in ranges or as indices.\n- Crash compiling for arm64 when returning 16 byte and smaller structs by value not a power of 2 #1649.\n- Enforce single module compilation for static libraries to make constructors run properly.\n- Crash when using --no-obj without compile-only. #1653\n- Do not produce expression locations for windows.\n- Issue where multiple methods were accepted for the same type.\n- Issue where a method was linked to a type alias instead of the underlying type.\n- Fix Fnv1a encoding.\n- Fix issue with accessing arrays in access-overloaded types, e.g. `list[1][2]` #1665.\n- Cast removing arbitrary array indices and converting them to pointers should always be fine #1664\n- Incorrect \"no-libc\" definition of `cos`, making it unavailable for wasm.\n- Fix issue with the adjoint and inverse calculations for `Matrix2x2`.\n- It was possible to create 0 length arrays using byte literals. #1678\n- Crash when a constant null typeid is checked for properties. #1679\n\n### Stdlib changes\n- Add `io::MultiReader`, `io::MultiWriter`, and `io::TeeReader` structs.\n- Updated Base32 API.\n- Add `file::save`.\n- Add `memcpy` / `memset` / `memcmp` to nolibc.\n- Add `sort::quickselect` to find the k-th smallest element in an unordered list.\n- Add `sort::is_sorted` to determine if a list is sorted.\n\n## 0.6.4 Change list\n\n### Changes / improvements\n- Const vector -> const slice implicit conversion.\n- Slicing arrays, slices and bytes at compile time #1466.\n- Better error for `int a[4] = ...`. #1518\n- Better error for `int Foo(int a)` declarations #1516\n- Improve error message in the case of `MyInterface x = foo;` #1522\n- Deprecate `@adhoc`, allow non-nested ad hoc generic types.\n- Constant bytes <=> char[] conversion should work #1514.\n- Infer now works across ternary.\n- Interfaces now support .ptr and .type directly without casting to `any`.\n- Switch to `<* *>` docs.\n- Improve error messages on expressions like `var $type = int;` #1553.\n- Disallow casting a `void*` to `any` or an interface, unless it is `null`.\n- Defer resolution of declarations when looked up in `def` aliased #1559.\n- Adding constants to the Json AST #1540\n- Adding info to the globals inside Json AST #1541\n- Null-check function pointer invocation #1573.\n- `string::new_struct_to_str` and `io::struct_to_format` to dump struct data.\n- `io::print` will now print structs.\n- Improve error message when using `void` aliases as variable storage type.\n- Add a target type: \"prepare\" which doesn't compile anything (but may run `exec`)\n\n### Fixes\n- `Unsupported int[*] $x = { 1, 2, 3, 4 }` #1489.\n- Unexpected compile error using a typed constant with `copysign` #1517\n- Incorrect subscript resolution #1519.\n- Segfault with passing a program with `-` using stdin.\n- Using no module with `-` would reject the program.\n- Unintended deref of pointers with methods caused regression with hash function.\n- Fix broken sincos function.\n- Bug when a continue is copied in a defer.\n- Compiler error when any/interface initialized using {} #1533.\n- Bug when defers and $if were combined in a macro, which would cause miscompilation.\n- Fixes to the CSV reader.\n- Crash returning struct or vector from function using ternary expression #1537.\n- Improved error message on invalid subscript index type #1535.\n- Improved error message when declaring a variable `void!`.\n- Cannot use void as a generic parameter #1546\n- Interfaces not correctly copied with generics #1545\n- Memory leak in keys.new_list fixed.\n- Standard library is now correctly weakly linked, fixing the use of C3 .so together with executable. #1549, #1107.\n- Wrong error message for interface methods with body #1536.\n- Empty expression block would crash compiler with debug on #1554.\n- Improve infer conversions on constants, e.g. `ZString a = foo ? \"a\" : \"b\";` #1561\n- Show error when declarations do not start with `fn` in interfaces. #1565\n- `if (try foo)` was handled incorrectly inside a defer.\n- `&self` argument not implicitly null checked. #1556.\n- `(uptr)&((Foo*)null).a` incorrectly inserts a null check. #1544\n- Incorrect error message when `$eval` is provided an invalid string. #1570\n- `HashMap.copy_keys` did not properly copy keys which needed to be allocated #1569\n- Named vector component access would not fold at compile time. #1574\n- `$define` would occasionally not properly evaluate declarations it encountered.\n- Fixes with error handling recursive `@tag` #1583.\n- Sometimes generating introspection info would not be in the global scope causing a crash #1586.\n- @tag on macros cannot be retrieved with tagof #1582\n- Taking the $typeof of a wildcard optional returns `void!`.\n\n### Stdlib changes\n- Remove unintended print of `char[]` as String\n- Add read/write to stream with big endian ints.\n- Move accidently hidden \"wrap_bytes\".\n- Added CBool #1530.\n- Added encoding/base32 module.\n\n## 0.6.3 Change list\n\n### Changes / improvements\n- Introduce `arg: x` named arguments instead of `.arg = x`, deprecate old style.\n- Support splat for varargs #1352.\n- Allow `var` in lambdas in macros.\n- Support `int[*] { 1, 2, 3 }` expressions.\n- Support inline struct designated init as if inline was anonymous.\n- Introduce the `.paramsof` property.\n- Support environment variable 'C3C_LIB' to find the standard library.\n- Support environment variable 'C3C_CC' to find the default C compiler.\n- Support casting bitstructs to bool.\n- Allow user-defined attributes to have typed parameters.\n- Add `.gitkeep` files to project subfolders.\n- Add `env::COMPILER_BUILD_HASH` and `env::COMPILER_BUILD_DATE`\n- Support linking .o files in compilation command. #1417\n- Slicing constant strings at compile time works.\n- Add `project fetch` subcommand to fetch missing project dependencies (general and target specific)\n- Ability of `vendor-fetch` to download the dependencies in the first specified path `dependencies-search-path`\n- Ability of `vendor-fetch` to register the fetched dependencies in the project file.\n- Allow the \"self\" parameter to be $/# for macro methods.\n- Support compile time slicing of untyped lists.\n- Allow specifying an import module using `@wasm` #1305.\n- Deprecated inline generic types outside of struct definitions and macros unless marked `@adhoc`.\n- Improved method detection in earlier stages of checking.\n- Allow `@norecurse` attribute for non-recursive imports #1480.\n- wasm32 / wasm64 targets are use-libc=no by default.\n- Add hash/sha256 module \n\n### Fixes\n- Issue where a lambda wasn't correctly registered as external. #1408\n- Generic methods were incorrectly registered as functions, leading to naming collisions. #1402\n- Deprecated tuple / triple types.\n- Converting a slice to a vector/array would copy too little data.\n- Crash when reading an empty 'manifest.json'.\n- \"optsize\" did not work correctly in project.json.\n- `l[0].a = 1` now supported for overloads due to better lvalue handling #1357.\n- Asserts are retained regardless of optimization when running tests.\n- Limit object filename lengths. #1415\n- Fix regression for `$include`.\n- Correct '.so' suffix on dynamic libraries on Linux.\n- Fix bug where inline index access to array in a struct would crash the compiler.\n- Asserts are now correctly included and traced in when running tests.\n- Use atexit to fix finalizers on Windows #1361.\n- Fix bugs in \"trap-on-wrap\" #1434.\n- Bug with casting anyfault to error.\n- Lambda / function type would accidentally be processed as a method.\n- Fix error message when not finding a particular function.\n- Crash invoking a `@body` argument with the wrong number of parameters.\n- Fix reordering semantics in struct assignment.\n- Regression when passing types as `#expr` arguments. #1461\n- Temp allocator overwrites data when doing reset on extra allocated pages. #1462\n- User defined attributes could not have more than 1 parameter due to bug.\n- Folding a constant array of structs at compile time would cause an assert.\n- Enum attributes would be overwritten by enum value attributes.\n- LLVM issue with try when bool is combined #1467.\n- Segfault using ternary with no assignment #1468.\n- Inner types make some errors misleading #1471.\n- Fix bug when passing a type as a compile time value.\n- Fix bug due to enum associated values not being checked for liveness.\n- Regression when compile time accessing a union field not last assigned to.\n- Safer seed of rand() for WASM without libc.\n- Bad error message aliasing an ident with a path. #1481.\n- Error when slicing a struct with an inline array #1488.\n- Improved error messages on `Foo a = foo { 1 };` #1496\n- Bug in json decoder escape handling.\n- Fix bug when reading zip manifest, that would not return a zero terminated string. #1490\n- Fix thread tests.\n- Detect recursion errors on non-recursive mutexes in safe mode.\n- Foreach over distinct pointer failed to be caught as error #1506.\n- Foreach over distinct iterable would ignore operator(len).\n- Compiler crash when compiling c code in a library without --obj-out #1503.\n\n### Stdlib changes\n- Additional init functions for hashmap.\n- `format` functions are now functions and work better with splat.\n- Add support for the QOI format.\n- Add `io::read_new_fully` for reading to the end of a stream.\n- Add `io::wrap_bytes` for reading bytes with `io` functions.\n- Add `rnd` and `rand_in_range` default random functions.\n- Additional timezone related functions for `datetime`.\n- Added MD5 and crypto::safe_compare.\n- Added generic HMAC.\n- Added generic PBKDF2 implementation.\n- DString `reverse`.\n- `DString.insert_at` now has variants for other types.\n\n## 0.6.2 Change list\n\n### Changes / improvements\n\n- Updated LLVM passes\n- Added `is_substruct` type property.\n- Scalar -> vector not implicit in call or assign.\n- Added `--vector-conv` to enable the old scalar->vector conversion behaviour.\n- Added \"weak\" type aliases `def Foo = my_foo::Foo @weak;`\n- `*-add` keys in targets in `manifest.json` and `project.json` are deprecated.\n- Made \"add\" the default for things like `sources`, `dependencies` and other keys in project and library files.\n- Give some symbol name suggestions when the path is matched.\n- Don't generate .o files on `compile` and `compile-run` if there is no `main`.\n- c3c init-lib does not create the directory with the .c3l suffix #1253\n- Permit foreach values to be optional.\n- Add `--show-backtrace` option to disable backtrace for even smaller binary.\n- Untested Xtensa support.\n- && doesn't work correctly with lambdas #1279.\n- Fix incorrect override of optimization levels when using projects.\n- Add experimental `@noalias` attribute.\n- Add a `--run-once` option to delete the output file after running it.\n- Add `@const` attribute for macros, for better error messages with constant macros.\n- Add `wincrt` setting to libraries.\n- Add `+++` `&&&` `|||` as replacement for `$concat`, `$and` and `$or`.\n- Add `methodsof` to type info for struct, union and bitstruct.\n- Added `@tag` `tagof` and `has_tagof` to user defined types and members.\n- Added `c-include-dirs` project/manifest setting.\n- The compiler now skips UTF8 BOM.\n- Printable values passed to the Formatter as pointers, will print as if passed by value.\n- Pointers are rendered with \"0x\" prefix when passed to '%s'.\n- Add temp allocator scribble.\n- Use PIC by default on Linux.\n- `$exec` may now provide a stdin parameter.\n- Introduce `$vaarg[...]` syntax and deprecate the old `$vaarg(...)`.\n- Similar change to `$vasplat`: `$vasplat` and `$vasplat[1..]`.\n- Add `$member.get(value)` to replace `value.$eval($member.nameof)`\n- Improve the error message when the compilation does not produce any files #1390.\n- Add `fmod` implementation for nolibc.\n\n### Fixes\n\n- Broken WASM library code.\n- Regression: Invalid is_random implementation due to changes in 0.6.\n- `dbghelp.lib` was linked even on nolibc on Windows.\n- Fix incorrect linker selection on some platforms.\n- Struct members declared in a single line declaration were not sharing attributes. #1266\n- `opt` project setting now properly documented.\n- Incorrect justify formatting of integers.\n- Assertion with duplicate function pointer signatures #1286\n- Distinct func type would not accept direct function address assign. #1287\n- Distinct inline would not implement protocol if the inlined implemented it. #1292\n- Distinct inline can now be called if it is aliasing a function pointer.\n- Bug in List add_array when reserving memory.\n- Fix issue where a compile time parameter is followed by \"...\".\n- Fix issue with some conversions to untyped list.\n- Issue where a `if (catch e = ...)` in a defer would be incorrectly copied. Causing codegen error.\n- Variable in if-try / if-catch cannot be a reused variable name.\n- Vararg interfaces were broken.\n- LLVM codegen for constants in enums could fail.\n- Fixes to the socket functions.\n- Improved output when pointer is out of range.\n- Better error when casting to a distinct fails.\n- With single module, name the .o file after what `-o` provides. #1306\n- Bitstruct members can now have attributes.\n- `%` analysis was incorrect for int vectors.\n- When resolving inherited interfaces, the interface type wasn't always resolved.\n- Fix issues when checking methods and interfaces hasn't been resolved yet.\n- Fix Vec2.angle\n- Update to libc::setjmp on Win32, to do no stack unwinding.\n- Recursively follow interfaces when looking up method.\n- Int128 alignment change in LLVM fixed on x64.\n- Fix interface lazy resolution errors.\n- Interface resolution when part of generics #1348.\n- Assert not properly traced #1354.\n- Ordering issues with `$include` / `$exec` fixed #1302.\n- Issues with wincrt linking.\n- Debug info with recursive canonical type usage could cause segfault.\n- Missing check on optional left hand side for `s.x`.\n- Incorrect zero analysis on `foo[\"test\"] = {}` #1360.\n- Bug converting untyped list #1360.\n- Benchmark / test no longer suppresses debug info. #1364.\n- Bug when compile time subtracting a distinct type.\n- `insert_at` incorrectly prevented inserts at the end of a list.\n- Fix aligned alloc for Win32 targets.\n- Compiler didn't detect when a module name was used both as a generic and regular module.\n- Assigning a const zero to an aliased distinct caused an error.\n- `--path` is now properly respected.\n- `--test` will now provide the full filename and the column.\n- Fix of bug in `defer (catch err)` with a direct return error.\n- Too restrictive compile time checks for @const.\n- Fixes to wasm nolibc in the standard library.\n- Fixed int128 div/mod.\n- Fix WASM memory init priority.\n- Fix bug with `defer (catch err)` when used together with regular defer.\n- Methods can now properly be aliased using `def` #1393.\n- Memory leak in Object when not using temp allocators.\n- Tracking allocator would double the allocations in the report.\n- `printf` will now show errors in the output when there are errors.\n- Bug where `if try` would work incorrectly in a macro.\n- Prevent loading / storing large structs with LLVM.\n\n### Stdlib changes\n\n- `send` and `recv` added to `libc` for Posix / Win32.\n- Add support to destroy temp allocators.\n- Deprecated `path.append`, `path.tappend`, `getcwd`, `tgetcwd`, `path.absolute`, `ls`.\n- Deprecated `env::get_config_dir`, replaced by `env::new_get_config_dir`.\n- Added `path.has_extension`, `path.new_append`, `path.temp_append`, `new_cwd`, `temp_cwd`, `path.new_absolute`, `new_ls`, `temp_ls`.\n- Added `dstring.replace`\n- New hashmap type, `Map`\n- Added `ElasticArray`.\n- Added `types::is_signed`, `types::is_unsigned` and `types::inner_type`.\n\n## 0.6.1 Change list\n\n### Changes / improvements\n- Addition of $append and $concat functions.\n- Added $$str_hash, $$str_upper, $$str_lower, $$str_find builtins.\n- Improved error notes when call expressions have errors.\n- Trailing body arguments may now be `&ref`, `#hash`, `$const` and `$Type` arguments.\n- \"panic-msg\" setting to suppress panic message output.\n- Require `@export` functions to have `@export` types.\n- Disallow leading/trailing/duplicate '_' in module names.\n- Updated mangling.\n- Added `$$unaligned_load` and `$$unaligned_store`.\n- `--no-headers` option to suppress creating headers when generating a library.\n- Support c-file compilation in libraries.\n- Allow using $defined(&a[1]) to check if the operation is supported.\n- Max number of members in a struct is limited to 65535.\n- The maximum number of parameters in a call is now 255, up from 127.\n- Array comparison now uses built-in memcmp on LLVM to enable optimizations.\n- Prevent implicit array casts to pointers with higher alignment #1237.\n- Macro `$case` statements now pick the first match and does not evaluate the rest.\n- `manifest.json` is now checked for incorrect keys.\n- Added `--list-manifest-properties` to list the available properties in `manifest.json`.\n- Indexing into a constant array / struct now works at compile time.\n- Improved error message when trying user foreach with an untyped list.\n- RISCV asm support.\n\n### Fixes\n- Error with unsigned compare in `@ensure` when early returning 0 #1207.\n- Prevent Mach-O from removing `@init` and `@dynamic` in a more reliable way #1200.\n- Fix of missing copy of parameterized custom attributes.\n- Fixed crash on certain recursive function definitions #1209.\n- Return the typekind \"FUNC\" for a function pointer.\n- No longer possible to dereference a function pointer.\n- Fix bug with @jump miscompile.\n- Bit negate does implicit integer promotion.\n- Bitstructs, unions and flexible arrays now correctly emitted in headers.\n- Fix distinct inline conversions.\n- Bit negating const zero flags would give an incorrect result.\n- Fix to scalar -> vector conversions.\n- Bug fix for rethrow + defer catch. \n- Wrong size for structs containing overaligned structs #1219\n- $typeof(*x) should be valid when x is an `[out]` parameter #1226\n- Fix ABI lowering for 128 bit vectors on Linux.\n- Bad error message when using a generic method without generic parameters #1228\n- Private function called from nested macro not visible to linker #1232\n- Bitstructs in structs would not be correctly be handled in some cases.\n- Fix problem where a $$FUNC would return \"<GLOBAL>\" when evaluated for a static in a function #1236.\n- `ordinal` is no longer a valid associated value name for enums.\n- Constants defined by indexing into another constant could fail codegen.\n- Stdlib nolibc code bugs fixed.\n- Regression: duplicate symbols with static variable declared in macro #1248.\n- Unsplat with named parameters was accidentally disallowed.\n- Reference parameter doesn't work with vector subscript #1250.\n- The msvc_sdk script failed to work properly on windows when run in folders with spaces.\n- Using winmain would call the wrong definition #1265.\n- DynamicArenaAllocator would not correctly free.\n\n### Stdlib changes\n- Added `remove_first_item` `remove_last_item` and `remove_item` as aliases for the `match` functions.\n- Added @str_hash, @str_upper, @str_lower, @str_find compile time macros.\n- Remove \"panic\" text from unreachable() when safe mode is turned off.\n- Added `@unaligned_store` and `@unaligned_load`.\n- Null ZString, DString or pointer prints \"(null)\" for printf.\n- Updated sorting API.\n- Insertion sort and counting sort added.\n- Added missing `mem` and `mem::allocator` functions for aligned allocations.\n- Added `new_init_with_array` and `temp_init_with_array` for List.\n- Fixed posix `NativeMutex.lock_timeout`.\n- Fixed `env::ARCH_32_BIT` and `env::ARCH_64_BIT`.\n- Added `time::us`.\n\n## 0.6.0 Change list\n\n### Changes / improvements\n- `@default` implementations for interfaces removed.\n- `any*` => `any`, same for interfaces.\n- Private / local globals now have `internal` visibility in LLVM.\n- Updated enum syntax.\n- 'rgba' also available for swizzling.\n- The name \"subarray\" has been replaced by the more well known name \"slice' across the codebase.\n- Improved alignment handling.\n- Add `--output-dir` to command line. #1155\n- Allow making distinct types out of \"void\", \"typeid\", \"anyfault\" and faults.\n- Removed `--system-linker` setting.\n- \"Try\" expressions may not be any binary or unary expressions. So for example `try foo() + 1` is disallowed.\n- Added `$$REGISTER_SIZE` for int register size.\n- `assert(false)` only allowed in unused branches or in tests. Compile time failed asserts is a compile time error.\n- Require expression blocks returning values to have the value used.\n- Detect \"unsigned >= 0\" as errors.\n- Improve callstack debug information #1184.\n- Request jump table using @jump for switches.\n- Improved inline debug information.\n- Improved error messages on inlined macros.\n- Introduce MSVC compatible SIMD ABI.\n- `$foreach` doesn't create an implicit syntactic scope.\n- Error of `@if` depends on `@if`\n- Support `defer (catch err)`\n- Added `print-input` command argument to print all files used for compilation\n- Allow recursive function definitions as long as they are pointers. #1182\n- Default CPU to native if less than AVX, otherwise use AVX.\n- Bounds checking on length for `foo[1:2]` slicing #1191.\n- Foreach uses non-wrapping add/dec.\n\n### Fixes\n- Fixed issue in safe mode when converting enums.\n- Better checking of operator methods.\n- Bug when assigning an optional from an optional.\n- Lambdas were not type checked thoroughly #1185. \n- Fix problems using reflection on interface types #1203.\n- `@param` with unnamed macro varargs could crash the compiler. \n- Compiler crash using enum nameof from different module #1205.\n- Incorrect length passed to scratch buffer printf.\n- Casting to a bitstruct would be allowed even if the type was the wrong size.\n- Generic modules parameterized with constants would sometimes get the wrong parameterized module name causing conversion errors #1192.\n- Duplicate emit of expressions on negation would incorrectly compile negated macros.\n- Casting a slice address to its pointer type should not compile #1193.\n- Union is not properly zero-initialized with designated initializer #1194.\n- Compile time fmod evaluates to 0 #1195.\n- Assertion failed when casting (unsigned) argument to enum #1196\n- Correct debug info on parameters without storage.\n- Fix location on foreach debug output.\n- Compiler crash on designated initializer for structs with bitstruct.\n\n### Stdlib changes\n- \"init_new/init_temp\" removed. \n- LinkedList API rewritten. \n- List \"pop\" and \"remove\" function now return Optionals. \n- RingBuffer API rewritten. Allocator interface changed. \n- Deprecated Allocator, DString and mem functions removed. \n- \"identity\" functions are now constants for Matrix and Complex numbers.\n- Removed 'append' from Object and List, replaced by 'push'.\n- `GenericList` renamed `AnyList`.\n- Proper handling of '.' and Win32 '//server' paths.\n- Path normalization - fix possible null terminator out of bounds.\n- Add 'zstr' variants for `string::new_format` / `string::tformat`.\n- Fix mutex and wait signatures for Win32.\n\n## 0.5.5 Change list\n\n### Changes / improvements\n- Disallow multiple `_` in a row in digits, e.g. `1__000`.\n- Added `@link` attribute.\n- New 'linker' build option.\n- \"linker\" project setting updated, \"system-linker\" removed.\n\n### Fixes\n- Struct/union members now correctly rejects members without storage size #1147.\n- `math::pow` will now correctly promote integer arguments.\n- Pointer difference would fail where alignment != size (structs etc) #1150\n- Fixed array calculation for npot2 vectors.\n- $$memcpy_inline and $$memset_inline fixed.\n- `.$Type = ...` and `.$foo = ...` now works #1156.\n- `int.min` incorrect behaviour #1154.\n- Bitstruct cast to other bitstruct by way of underlying type would fail #1159.\n- Bug in `time.add_seconds` #1162.\n- Remove initial './' in Win32 and convert '/' to '\\' for paths when running a binary.\n- 'output' directory for projects was incorrect in templates.\n- Regression: no stacktrace.\n- For MacOS, running with higher optimization would crash as initializers were removed.\n- `compile-run` and `run` now returns the proper return code.\n- Allow String constants -> ichar*, and allow integer pointers to explicitly convert between unsigned signed.\n- Bug in unaligned return value lowering for Aarch64.\n\n### Stdlib changes\n- Added `new_aligned` and `alloc_aligned` functions to prevent accidental under-alignment when allocating simd.\n- Fixes to realloc of aligned allocations\n- Use native Windows calls on aligned allocations on Windows.\n- mem::copy_inline, mem::clear_inline and mem::set_inline added.\n- mem::copy / clear / set no longer has an `$inline` attribute.\n- Native aligned libc malloc on Windows & POSIX.\n- Simplification of the allocator interface.\n- CoreFoundation only linked on MacOS when used.\n\n## 0.5.4 Change list\n\n### Changes / improvements\n- Hash variables may now take a designated initializer.\n- Added @safemacro to override the `@` requirement for non-function-like macros.\n- More information available with debug log in non debug builds.\n- Removed install_win_reqs.bat which didn't work well.\n- Support `**` to mean `./**`\n- MacOS init/finalizer now respects priority.\n- Bitstructs supports `!=` and `==`.\n- Support Windows `.def` files using `--windef`.\n- Bitstructs now fold compile time constant bit ops.\n- Fix issue where in some cases a constant global with a string wasn't folded (e.g. in asm stmts)\n- Lateral implicit imports removed.\n- Default to '.' if no libdir is specified.\n- Improved error messages for `--lib`.\n- Added `--linker` to set the linker #1067.\n\n### Fixes\n- Fixes to macro context evaluation with macro varargs.\n- Dynamic methods registered before init functions on MacOS.\n- Fixed clobber on x86 `cpuid` instruction.\n- Removed invalid syntax from grammar.y.\n- `output` project setting now respected.\n- Aliased declarations caused errors when used in initializers.\n- Aliased consts used as constant initializers caused errors.\n- Exported module names replace `::` by `_`.\n- Const ternary would evaluate incorrectly for ?:\n- `$$MODULE` would report the incorrect module name in macros.\n- Fixed debug info for globals and for/switch scopes.\n- `out` now correctly detects subscript[] use.\n- Ambiguous recursive imports are now correctly detected.\n- Overzealous local escape check corrected #1127.\n- Fixes to the matrix functions #1130.\n\n### Stdlib changes\n- Deprecated `Allocator` helper functions.\n- Added `mem::allocator` functions corresponding to removed allocator functions.\n- Changed `mem::new` / `mem::temp_new` to accept an optional initializer, and will clear by default.\n- Mem `_clear` and `_zero` variants deprecated. \"new_*\" functions will clear by default.\n- Mem \"alloc_*\" functions replace old \"new_*\" behaviour.\n- Fixed temp memory issue with formatter.\n- Added temp_push and temp_pop for pushing / popping the temp allocator manually (or from C).\n- Added byte_size to `List`\n- Added `GenericList`.\n\n## 0.5.3 Change list\n\n### Changes / improvements\n- Migrate from using actual type with GEP, use i8 or i8 array instead.\n- Optimize foreach for single element arrays.\n- Move all calls to panic due to checks to the end of the function.\n\n### Fixes\n- Single module command line option was not respected.\n- Fixed issue with compile time defined types (String in this case), which would crash the compiler in certain cases.\n- Projects now correctly respect optimization directives.\n- Generic modules now correctly follow the implicit import rules of regular modules.\n- Passing an untyped list to a macro and then using it as a vaarg would crash the compiler.\n- Extern const globals now work correctly.\n\n### Stdlib changes\n- init_new/init_temp deprecated, replaced by new_init and temp_init.\n\n## 0.5.2 Change list\n\n### Changes / improvements\n- Allow trailing comma in calls and parameters #1092.\n\n### Fixes\n- Fixes issue where single character filenames like 'a.c3' would be rejected.\n- Better errors when index type doesn't match len() when doing user defined foreach.\n- Fixes to `to_int` for hexadecimal strings.\n- Fixed issue when using a generic type from a generic type.\n- Bug with vector parameters when the size > 2 and modified.\n- Missing error on assigning to in-parameters through subscripting.\n- Inference of a vector on the lhs of a binary expression would cause a crash.\n- Fixes to PriorityQueue\n\n### Stdlib changes\n- Allow `to_int` family functions take a base, parsing base 2-10 and 16.\n\n## 0.5.1 Change list\n\n### Changes / improvements\n- Improved error messages for const errors.\n- Do not link with debug libraries unless using static libraries.\n- Add 'print-linking' build option.\n- System linker may be used even if the target arch is different from current.\n- Slice -> array/vector works for constant slice lengths.\n\n### Fixes\n- On Aarch64 use the correct frame pointer type.\n- On Aarch64 macOS, ensure the minimum version is 11.0 (Big Sur)\n- Fixes to the yacc grammar.\n- Dsym generation on macOS will correctly emit -arch.\n- Stacktrace on signals on Linux when backtrace is available.\n\n### Stdlib changes\n- `delete` and `delete_range` added to DString.\n- `Splitter` iterator added.\n- `splitter` and `iterator` String methods.\n- `load_new`, `load_buffer` and `load_temp` std::io::file functions.\n\n## 0.5.0 Change List\n\n### Changes / improvements\n- Trackable allocator with leak allocation backtraces.\n- `$defined` can take a list of expressions.\n- `$and` compile time \"and\" which does not check expressions after the first is an error.\n- `$is_const` returns true if an expression is compile time const.\n- `$assignable` returns true is an expression may be implicitly cast to a type.\n- `$checks` and `@checked` removed, replaced by an improved `$defined`\n- Asm string blocks use AT&T syntax for better reliability.\n- Distinct methods changed to separate syntax.\n- 'exec' directive to run scripts at compile time.\n- Project key descriptions in --list command.\n- Added `init-lib` to simplify library creation.\n- Local `const` work like namespaced global `const`.\n- Added `$$atomic_fetch_*` builtins.\n- vectors may now contain pointers.\n- `void!` does not convert to `anyfault`.\n- `$$masked_load` / `$$masked_store` / `$$gather` / `$$scatter` for vector masked load/store.\n- `$$select` builtin for vector masked select.\n- Added builtin benchmarks by `benchmark`, `compile-benchmark` commands and `@benchmark` attribute.\n- Subtype matching in type switches.\n- Added parentof typeid property.\n- Slice assignment is expanded.\n- Enforced optional handling.\n- Better dead code analysis, and added dead code errors.\n- Exhaustive switches with enums has better analysis.\n- Globals may now be initialized with optional values.\n- New generic syntax.\n- Slice initialization.\n- `$feature` for feature flags.\n- Native stacktrace for Linux, MacOS and Windows.\n- Macro ref parameters are now of pointer type and ref parameters are not assignable.\n- Added `nextcase default`.\n- Added `$embed` to embed binary data.\n- Ad hoc generics are now allowed.\n- Allow inferred type on method first argument.\n- Fix to void expression blocks\n- Temporary objects may now invoke methods using ref parameters.\n- Delete object files after successful linking.\n- Compile time subscript of constant strings and bytes.\n- `@if` introduced, other top level conditional compilation removed.\n- Dynamically dispatched interfaces with optional methods.\n- `$if` now uses `$if <expr>:` syntax.\n- `$assert` now uses `$assert <expr> : <optional message>`\n- `$error` is syntax sugar for `$assert false : \"Some message\"`\n- `$include`, `$echo` no longer has mandatory `()` around the arguments.\n- `$exec` for including the output of files.\n- `assert` no longer allows \"try unwrap\"\n- Updated cpu arguments for x86\n- Removed support for ranged case statements that were floats or enums, or non-constant.\n- `nextcase` with a constant expression that does not match any case is an error.\n- Dropped support for LLVM 13-14.\n- Updated grammar and lexer definition.\n- Removal of `$elif`.\n- any / anyfault may now be aliased.\n- `@stdcall` etc removed in favor of `@callconv`\n- Empty fault definitions is now an error.\n- Better errors on incorrect bitstruct syntax.\n- Internal use wildcard type rather than optional wildcard.\n- Experimental scaled vector type removed.\n- Disallow parameterize attributes without parameters eg `define @Foo() = { @inline }`.\n- Handle `@optreturn` contract, renamed `@return!`.\n- Restrict interface style functions.\n- Optional propagation and assignment '!' and '?' are flipped.\n- Add `l` suffix (alias for i64).\n- Allow getting the underlying type of anyfault.\n- De-duplicate string constants.\n- Change @extname => @extern.\n- `define` and `typedef` removed.\n- `define` is replaced by `def`.\n- LLVM \"wrapper\" library compilation is exception free.\n- `private` is replaced by attribute `@private`. \n- Addition of `@local` for file local visibility.\n- Addition of `@public` for overriding default visibility.\n- Default visibility can be overridden per module compile unit. Eg `module foo @private`.\n- Optimized macro codegen for -O0.\n- Addition of unary `+`.\n- Remove possibility to elide length when using ':' for slices.\n- Remove the `:` and `;` used in $if, $switch etc.\n- Faults have an ordinal.\n- Generic module contracts.\n- Type inference on enum comparisons, e.g `foo_enum == ABC`.\n- Allow {} to initialize basic types.\n- String literals default to `String`.\n- More const modification detection.\n- C3L zip support.\n- Support printing object files.\n- Downloading of libraries using vendor \"fetch\".\n- Structural casts removed.\n- Added \"native\" option for vector capability.\n- `$$shufflevector` replaced with `$$swizzle` and `$$swizzle2`.\n- Builtin swizzle accessors.\n- Lambdas, e.g `a = int(x, y) => x + y`.\n- $$FILEPATH builtin constant.\n- `variant` renamed `any`.\n- `anyerr` renamed `anyfault`.\n- Added `$$wasm_memory_size` and `$$wasm_memory_grow` builtins.\n- Add \"link-args\" for project.\n- Possible to suppress entry points using `--no-entry`.\n- Added `memory-env` option.\n- Use the .wasm extension on WASM binaries.\n- Update precedence clarification rules for ^|&.\n- Support for casting any expression to `void`.\n- Win 32-bit processor target removed.\n- Insert null-check for contracts declaring & params.\n- Support user defined attributes in generic modules.\n- `--strip-unused` directive for small binaries.\n- `$$atomic_store` and `$$atomic_load` added.\n- `usz`/`isz` replaces `usize` and `isize`.\n- `@export` attribute to determine what is visible in precompiled libraries.\n- Disallow obviously wrong code returning a pointer to a stack variable.\n- Add &^| operations for bitstructs.\n- `@noinit` replaces `= void` to opt-out of implicit zeroing.\n- Multiple declarations are now allowed in most places, eg `int a, b;`.\n- Allow simplified (boolean) bitstruct definitions.\n- Allow `@test` to be placed on module declarations.\n- Updated name mangling for non-exports.\n- `defer catch` and `defer try` statements added.\n- Better errors from `$assert`.\n- `@deprecated` attribute added.\n- Allow complex array length inference, eg `int[*][2][*] a = ...`.\n- Cleanup of cast code.\n- Removal of `generic` keyword.\n- Remove implicit cast enum <-> int.\n- Allow enums to use a distinct type as the backing type.\n- Update addition and subtraction on enums.\n- `@ensure` checks only non-optional results.\n- `assert` may now take varargs for formatting.\n\n### Stdlib changes\n\n- Tracking allocator with location.\n- `init_new`/`init_temp` for allocating init methods.\n- `DString.printf` is now `DString.appendf`.\n- Tuple and Maybe types.\n- `.as_str()` replaced by `.str_view()`\n- Added `math::log(x , base)` and `math::ln(x)`.\n- Hashmap keys implicitly copied if copy/free are defined.\n- Socket handling.\n- `csv` package.\n- Many random functions.\n- Updated posix/win32 stdlib namespacing\n- `process` stdlib\n- Stdlib updates to string.\n- Many additions to `List`: `remove`, `array_view`, `add_all`, `compact` etc\n- Added dstringwriter.\n- Improved printf formatting.\n- is_finite/is_nam/is_inf added.\n- OnStack allocator to easily allocate a stack buffer.\n- File enhancements: mkdir, rmdir, chdir.\n- Path type for file path handling.\n- Distinct `String` type.\n- VarString replaced by DString.\n- Removal of std::core::str.\n- JSON parser and general Object type.\n- Addition of `EnumMap`.\n- RC4 crypto.\n- Matrix identity macros.\n- compare_exchange added.\n- `printfln` and `println` renamed `printfn` and `printn`.\n- Support of roundeven.\n- Added easings.\n- Updated complex/matrix, added quaternion maths.\n- Improved support for freestanding.\n- Improved windows main support, with @winmain annotations.\n- `SimpleHeapAllocator` added.\n- Added win32 standard types.\n- Added `saturated` math.\n- Added `@expect`, `@unlikely` and `@likely` macros.\n- Temp allocator uses memory-env to determine starting size.\n- Temp allocator is now accessed using `mem::temp()`, heap allocator using `allocator::heap()`.\n- Float parsing added.\n- Additions to std::net, ipv4/ipv6 parsing.\n- Stream api.\n- Random api.\n- Sha1 hash function.\n- Extended enumset functionality.\n- Updated malloc/calloc/realloc/free removing old helper functions.\n- Added TrackingAllocator.\n- Add checks to prevent incorrect alignment on malloc.\n- Updated clamp.\n- Added `Clock` and `DateTime`.\n- Added posix socket functions.\n\n### Fixes\n- Structs returned from macros and then indexed into directly could previously be miscompiled.\n- Naked functions now correctly handles `asm`.\n- Indexing into arrays would not always widen the index safely.\n- Macros with implicit return didn't correctly deduct the return type.\n- Reevaluating a bitstruct (due to checked) would break.\n- Fix missing comparison between `any`.\n- Fix issue of designated initializers containing bitstructs.\n- Fix issue of designated initializers that had optional arguments.\n- Fixed ++ and -- for bitstructs.\n- Fix to bug where library source files were sometimes ignored.\n- Types of arrays and vectors are consistently checked to be valid.\n- Anonymous bitstructs check of duplicate member names fixed.\n- Assignment to anonymous bitstruct members in structs.\n- Fix casts on empty initializers.\n- Fix to DString reserve.\n- Fix where aliases did not do arithmetic promotion.\n- @local declarations in generic modules available by accident.\n- Fixes missing checks to body arguments.\n- Do not create debug declaration for value-only parameter.\n- Bug in alignment for atomics.\n- Fix to bug when comparing nested arrays.\n- Fix to bug when a macro is using rethrow.\n- Fixes bug initializing a const struct with a const struct value.\n- Fixes bug when `void` is passed to an \"any\"-vararg.\n- Fixed defer/return value ordering in certain cases.\n- Fixes to the x64 ABI.\n- Updates to how variadics are implemented.\n- Fixes to shift checks.\n- Fixes to string parsing.\n- Bug when rethrowing an optional from a macro which didn't return an optional.\n- Fixed issues with ranged cases.\n- Disallow trailing ',' in function parameter list.\n- Fixed errors on flexible array slices.\n- Fix of `readdir` issues on macOS.\n- Fix to slice assignment of distinct types.\n- Fix of issue casting slices to distinct types.\n- Fixes to `split`, `rindex_of`.\n- List no longer uses the temp allocator by default.\n- Remove test global when not in test mode.\n- Fix sum/product on floats.\n- Fix error on void! return of macros.\n- Removed too permissive casts on slices.\n- Using C files correctly places objects in the build folder.\n- Fix of overaligned deref.\n- Fix negating a float vector.\n- Fix where $typeof(x) { ... } would not be a valid compound literal.\n- Fix so that using `var` in `if (var x = ...)` works correctly.\n- Fix int[] -> void* casts.\n- Fix in utf8to16 conversions.\n- Updated builtin checking.\n- Reduce formatter register memory usage.\n- Fixes to the \"any\" type.\n- Fix bug in associated values.\n- More RISC-V tests and fixes to the ABI.\n- Fix issue with hex floats assumed being double despite `f` suffix.\n- Fix of the `tan` function.\n- Fixes to the aarch64 ABI when passing invalid vectors.\n- Fix creating typed compile time variables.\n- Fix bug in !floatval codegen.\n- Fix of visibility issues for generic methods.\n- Fixes to `$include`.\n- Fix of LLVM codegen for optionals in certain cases.\n- Fix of `$vasplat` when invoked repeatedly.\n- Fix to `$$DATE`.\n- Fix of attributes on nested bitstructs.\n- Fix comparing const values > 64 bits.\n- Defer now correctly invoked in expressions like `return a > 0 ? Foo.ABC! : 1`.\n- Fix conversion in `if (int x = foo())`.\n- Delay C ABI lowering until requested to prevent circular dependencies.\n- Fix issue with decls accidentally invalidated during `$checked` eval.\n- Fold optional when casting slice to pointer.\n- Fixed issue when using named arguments after varargs.\n- Fix bug initializing nested struct/unions.\n- Fix of bool -> vector cast.\n- Correctly widen C style varargs for distinct types and optionals.\n- Fix of too aggressive codegen in ternary codegen with array indexing.\n\n## 0.4.0 Change List\n\n- Compatibility with LLVM 16.\n- Dropped LLVM 12 support.\n- Updated vector comparisons.\n- Built in unit testing with @test and compile-test\n- Updated memory allocators. Added `@scoped` and `@pool` macros.\n- Various bug fixes.\n- Generic modules may now be generic over integers and booleans.\n- Constant pointers may be compile time evaluated.\n- Added many new builtins.\n- Emit asm using `--emit-asm`.\n- Added `--nostdlib` and `--nolibc`.\n- Compiling for AVX can now select \"native\".\n- Fixes to adding libraries at link time.\n- Various improved error messages.\n- Windows debug info fixes.\n- Add of `foreach_r` for reverse list traversal.\n- Script downloading the MSVC SDK to cross compile to windows.\n- Many standard library additions.\n- Extension methods may be added for built-in types.\n- Macros may take vector and array arguments generic over length.\n- Macro varargs with $vaarg, $vacount etc.\n- Many vector builtins added as dot methods.\n- in / out / inout doc parameters checked.\n- Initial inline asm support for aarch64 and x64.\n- Single line short function declaration.\n- Added `$checks` builtin.\n- Added `$include` builtin for including other text files.\n- Optional single module compilation.\n- Static initialization / finalization to have code running at start/end.\n- C3 custom printf function in the stdlib.\n- `[]=` overload now works correctly.\n- Static libraries may now be built.\n- More compile time reflection added and general cleanup done.\n- usize/isize/iptrdiff/uptrdiff replaced by usz/isz.\n- Add `var` to allow type inference on regular variables.\n- LLVM codegen optimizations.\n- `??` now allows chaining another optional.\n- int128 support on all platforms.\n- `import` is now allowed anywhere at the top level.\n- `project.c3p` renamed `project.json`\n- Update to project properties, e.g. \"libs\" -> \"dependencies\" etc.\n- $$TIME, $$DATE and $$FUNCTION builtin defines added.\n- `$echo` function to print messages at compile time.\n- Improvements to untyped lists.\n- Various builtins added: $$prefetch, $$reverse, $$shufflevector etc.\n\n## 0.3.0 Change List\n\n### Changes / improvements:\n\n- Allow any expression as default expression.\n- Allow using enums for indexing arrays.\n- Added $convertable / $castable compile time functions.\n- Removed ´func´ deprecated keyword\n- Slicing a distinct type now returns the distinct type.\n- Renamed @autoimport -> @builtin\n- Zero length arrays not allowed\n- Allow methods may use ref, pointer and value arguments as \"self\"\n- Updated external name mangling\n- More advanced introspection.\n- @maydiscard and @nodiscard annotations\n- New type promotion rules: The common type of int[x]* and int[y]* is int[]\n- Added type.inner and type.len reflection.\n- Support float mod operations.\n- Add float.max/min.\n- Allow [in] contract to be used on slices.\n- Add linker and linked dir arguments to build files.\n- Auto-import std::core.\n- LLVM 15 support.\n- Beter native file handling for MSVC\n- New import rules – recursive imports\n- Add lld linking for FreeBSD\n- User defined attributes. @Foo = @inline\n- Support enum associated values.\n- @ is now part of the name of an attribute or a macro. Macros without '@' must be function-like.\n- Ordinal based enums.\n- Allow locals to shadow global variables.\n- Prefer inferred constant over global in the case of MyEnum f = BAR;\n- Enum and fault name reflection.\n- Deref null error now panics in safe mode.\n\n### Changes to stdlib:\n\n- Updated allocators.\n- Added enum_by_name.\n- Moved bitcast to builtin module.\n- Native printf for files and strings.\n- Updated String.\n- Comparison macros\n- Added Binary-Heap Based Priority Queue by David Kopec\n- Matrix Math Library by PixelRifts\n- UTF conversions in \"conv\" module.\n\n### Fixes:\n\n- Attributes correctly checks for recursive definitions now.\n- Added a max bitstruct size.\n- Fix of expr location in args.\n- Fixing distinct, typedef and bitstruct copying. Fix where global constants did not need to be constant.\n- Better error on all upper parameter names.\n- Fix constant typeid comparisons.\n- Simplify and corrected if try/catch parsing.\n- Fix bug with { [A] = 1 }\n- Conversion unsigned int -> enum fixed.\n- Fix bug preventing implicit & on optionals.\n- More efficient int[] a = {}\n- Fix bug in extension methods for generic types and typedefs\n- Fix to extension methods in other modules.\n- Disallow complist as a regular macro parameter.\n- Fix in nested block handling\n- Fix of error where {| |} with value return could have no final return\n- Vararg abi fix\n- Fix \"libs\" in project creation\n- Fix bug with bit struct initialization and zeros\n- Reduce size of memory pages used.\n- Fix issues with union of const.\n- Fix initialization of anonymous structs.\n- Fix conversion between distinct void* and null\n- Fix of default project creation target format.\n- Fix of $sizeof(Type) => Type.sizeof\n- Fix stack setting after error return.\n- Fix module assignment of declarations\n- Global @align fixed\n- Fixes enum set with new ordinal based enums\n- SysV ABI fix for passing certain things by struct.\n- Fix implicitly converting to float in the case of myfloat *= -1 \n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "wrapper",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}