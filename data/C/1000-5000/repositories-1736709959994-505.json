{
  "metadata": {
    "timestamp": 1736709959994,
    "page": 505,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "huangzworks/annotated_redis_source",
      "stars": 2332,
      "defaultBranch": "unstable",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.244140625,
          "content": ".*.swp\n*.o\n*.rdb\n*.log\nredis-*\ndoc-tools\nrelease\nmisc/*\nsrc/release.h\nappendonly.aof\nSHORT_TERM_TODO\nrelease.h\nsrc/transfer.sh\nsrc/configs\nredis.ds\nsrc/redis.conf\ndeps/lua/src/lua\ndeps/lua/src/luac\ndeps/lua/src/liblua.a\n.make-*\n.prerequisites\n*.dSYM\n"
        },
        {
          "name": "00-RELEASENOTES",
          "type": "blob",
          "size": 3.732421875,
          "content": "Redis 2.6 release notes\n\nMigrating from 2.4 to 2.6\n=========================\n\nRedis 2.4 is mostly a strict subset of 2.6. However there are a few things\nthat you should be aware of:\n\n* You can't use .rdb and AOF files generated with 2.6 into a 2.4 instance.\n* 2.6 slaves can be attached to 2.4 masters, but not the contrary, and only\n  for the time needed to perform the version upgrade.\n\nThere are also a few API differences, that are unlikely to cause problems,\nbut it is better to keep them in mind:\n\n* SORT now will refuse to sort in numerical mode elements that can't be parsed\n  as numbers.\n* EXPIREs now all have millisecond resolution (but this is very unlikely to\n  break code that was not conceived exploting the previous resolution error\n  in some way.)\n* INFO output is a bit different now, and contains empty lines and comments\n  starting with '#'. All the major clients should be already fixed to work\n  with the new INFO format.\n\nAlso the following redis.conf and CONFIG GET / SET parameters changed name:\n\n    * hash-max-zipmap-entries, now replaced by hash-max-ziplist-entries\n    * hash-max-zipmap-value, now replaced by hash-max-ziplist-value\n    * glueoutputbuf was no completely removed as it does not make sense\n\n---------\nCHANGELOG\n---------\n\nWhat's new in Redis 2.6.0\n=========================\n\nUPGRADE URGENCY: We suggest new users to start with 2.6.0, and old users to\n                 upgrade after some testing of the application with the new\n                 Redis version.\n\n* Server side Lua scripting, see http://redis.io/commands/eval\n* Virtual Memory removed (was deprecated in 2.4)\n* Hardcoded limits about max number of clients removed.\n* AOF low level semantics is generally more sane, and especially when used\n  in slaves.\n* Milliseconds resolution expires, also added new commands with milliseconds\n  precision (PEXPIRE, PTTL, ...).\n* Clinets max output buffer soft and hard limits. You can specifiy different\n  limits for different classes of clients (normal,pubsub,slave).\n* AOF is now able to rewrite aggregate data types using variadic commands,\n  often producing an AOF that is faster to save, load, and is smaller in size.\n* Every redis.conf directive is now accepted as a command line option for the\n  redis-server binary, with the same name and number of arguments.\n* Hash table seed randomization for protection against collisions attacks.\n* Performances improved when writing large objects to Redis.\n* Significant parts of the core refactored or rewritten. New internal APIs\n  and core changes allowed to develop Redis Cluster on top of the new code,\n  however for 2.6 all the cluster code was removed, and will be released with\n  Redis 3.0 when it is more complete and stable.\n* Redis ASCII art logo added at startup.\n* Crash report on memory violation or failed asserts improved significantly\n  to make debugging of hard to catch bugs simpler.\n* redis-benchmark improvements: ability to run selected tests,\n  CSV output, faster, better help.\n* redis-cli improvements: --eval for comfortable development of Lua scripts.\n* SHUTDOWN now supports two optional arguments: \"SAVE\" and \"NOSAVE\".\n* INFO output split into sections, the command is now able to just show \n  pecific sections.\n* New statistics about how many time a command was called, and how much\n  execution time it used (INFO commandstats).\n* More predictable SORT behavior in edge cases.\n* INCRBYFLOAT and HINCRBYFLOAT commands.\n\n--------------------------------------------------------------------------------\n\nCredits: Where not specified the implementation and design are done by\nSalvatore Sanfilippo and Pieter Noordhuis. Thanks to VMware for making all\nthis possible. Also many thanks to all the other contributors and the amazing\ncommunity we have.\n\nSee commit messages for more credits.\n\nCheers,\nSalvatore\n"
        },
        {
          "name": "BUGS",
          "type": "blob",
          "size": 0.05078125,
          "content": "Plese check https://github.com/antirez/redis/issues\n"
        },
        {
          "name": "CONTRIBUTING",
          "type": "blob",
          "size": 1.314453125,
          "content": "Note: by contributing code to the Redis project in any form, including sending\na pull request via Github, a code fragment or patch via private email or\npublic discussion groups, you agree to release your code under the terms\nof the BSD license that you can find in the COPYING file included in the Redis\nsource distribution.\n\n# IMPORTANT: HOW TO USE REDIS GITHUB ISSUES\n\n* Github issues SHOULD ONLY BE USED to report bugs, and for DETAILED feature\n  requests. Everything else belongs to the Redis Google Group.\n\n  PLEASE DO NOT POST GENERAL QUESTIONS that are not about bugs or suspected\n  bugs in the Github issues system. We'll be very happy to help you and provide\n  all the support in the Redis Google Group.\n\n  Redis Google Group address:\n  \n      https://groups.google.com/forum/?fromgroups#!forum/redis-db\n\n# How to provide a patch for a new feature\n\n1. Drop a message to the Redis Google Group with a proposal of semantics/API.\n\n2. If in steps 1 you get an acknowledge from the project leaders, use the\n   following procedure to submit a patch:\n\n    a. Fork Redis on github ( http://help.github.com/fork-a-repo/ )\n    b. Create a topic branch (git checkout -b my_branch)\n    c. Push to your branch (git push origin my_branch)\n    d. Initiate a pull request on github ( http://help.github.com/send-pull-requests/ )\n    e. Done :)\n\nThanks!\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.4521484375,
          "content": "Copyright (c) 2006-2012, Salvatore Sanfilippo\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n    * Neither the name of Redis nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Changelog",
          "type": "blob",
          "size": 82.080078125,
          "content": "2010-07-01 gitignore modified (antirez)\n2010-06-22 redis.c split into many different C files. (antirez)\n2010-06-16 more pub/sub tests (Pieter Noordhuis)\n2010-06-15 initial basic pub/sub tests (Pieter Noordhuis)\n2010-06-15 fix BLPOP/BRPOP to use the wrapped function for list length (Pieter Noordhuis)\n2010-06-15 tests for BLPOP/BRPOP via an option in the tcl client that defers reading the reply (Pieter Noordhuis)\n2010-06-14 TODO updated (antirez)\n2010-06-14 Merge branch 'ltrim-tests' of git://github.com/pietern/redis (antirez)\n2010-06-14 rename \"list\" to \"linkedlist\" to be more verbose (Pieter Noordhuis)\n2010-06-14 allow running the test suite against an external Redis instance, without auto spawning (antirez)\n2010-06-14 change ltrim tests to cover all min/max cases and add stronger stresser (Pieter Noordhuis)\n2010-06-13 Fixed deps in makefile and mkreleasehdr.sh script to really take advantage of the new trick to avoid recompilation of redis.c on git sha1 or dirty status change (antirez)\n2010-06-13 hopefully faster recompiling with a trick (antirez)\n2010-06-13 fixed a bug in rdbLoadObject abount specially encoded objects (antirez)\n2010-06-13 use raw strings when loading a hash from the rdb into a zipmap (Pieter Noordhuis)\n2010-06-12 Merge branch 'expire' of git://github.com/pietern/redis (antirez)\n2010-06-11 Merge branch 'lists' of git://github.com/pietern/redis (antirez)\n2010-06-11 LPUSHX, RPUSHX, LINSERT only work on non-empty lists, so there are no clients waiting for a push (Pieter Noordhuis)\n2010-06-11 make LINSERT return -1 when the value could not be inserted (Pieter Noordhuis)\n2010-06-11 check if the list encoding needs to be changed on LPUSHX, RPUSHX, LINSERT (Pieter Noordhuis)\n2010-06-11 make sure the value to insert is string encoded (Pieter Noordhuis)\n2010-06-11 rename vars, move arguments, add comments (Pieter Noordhuis)\n2010-06-11 always iterate from head to tail on LINSERT (Pieter Noordhuis)\n2010-06-11 use REDIS_TAIL to insert AFTER an entry and REDIS_HEAD to insert BEFORE an entry (Pieter Noordhuis)\n2010-06-11 move listTypeInsert to be grouped with other wrapper functions (Pieter Noordhuis)\n2010-06-11 squashed merge from robey/twitter3: LINSERT BEFORE|AFTER, LPUSHX, RPUSHX (Pieter Noordhuis)\n2010-06-09 remove pop function and the sds dependency; can be implemented using get+delete (Pieter Noordhuis)\n2010-06-07 compute swappability for ziplist encoded lists (Pieter Noordhuis)\n2010-06-07 reuse the sds from the main dictionary in the expiration dictionary (Pieter Noordhuis)\n2010-06-07 TODO updated (antirez)\n2010-06-07 encode integers while loading an hash (antirez)\n2010-06-05 Merge branch 'lists' of git://github.com/pietern/redis (antirez)\n2010-06-05 fixed two leaks for the dual encoded lists (Pieter Noordhuis)\n2010-06-04 TODO updated (antirez)\n2010-06-04 DISCSARD now unwatches all keys, as it should (antirez)\n2010-06-04 generated tests for different encodings to avoid test code duplication (Pieter Noordhuis)\n2010-06-04 refactor list tests to test both encodings; implemented assert functions (Pieter Noordhuis)\n2010-06-04 renamed hash wrapper functions to match wrapper function naming convention: \"<type>Type<func>\" (Pieter Noordhuis)\n2010-06-04 Merge branch 'lists' of git://github.com/pietern/redis (antirez)\n2010-06-04 Merge branch 'smallkeys' (antirez)\n2010-06-04 safety assert in listTypeNext (Pieter Noordhuis)\n2010-06-04 renamed list wrapper functions to be more verbose (Pieter Noordhuis)\n2010-06-04 add thresholds for converting a ziplist to a real list (Pieter Noordhuis)\n2010-06-04 merge antirez/smallkeys (Pieter Noordhuis)\n2010-06-03 test restored (antirez)\n2010-06-03 memory leak introduced in the latest big changes fixed (antirez)\n2010-06-03 Fixed VM bugs introduced with the top level keys as sds strings changes (antirez)\n2010-06-03 top level keys are no longer redis objects but sds strings. There are still a few bugs to fix when VM is enabled (antirez)\n2010-06-03 update Makefile to include ziplist.o (Pieter Noordhuis)\n2010-06-03 use ziplists in SORT STORE until the thresholds are determined (Pieter Noordhuis)\n2010-06-03 Merge branch 'testsuite' of git://github.com/pietern/redis (antirez)\n2010-06-03 Merge branch 'testsuite' of git://github.com/pietern/redis into smallkeys (antirez)\n2010-06-03 tag memory leak check on kill server as \"leaks\" (Pieter Noordhuis)\n2010-06-03 tag test with sleep() as slow (Pieter Noordhuis)\n2010-06-03 make sure the config it returned when called without code (Pieter Noordhuis)\n2010-06-03 tag more slow tests (Pieter Noordhuis)\n2010-06-03 change how arguments are passed from the AOF tests (Pieter Noordhuis)\n2010-06-03 scope res variable outside test (Pieter Noordhuis)\n2010-06-02 tags for existing tests (Pieter Noordhuis)\n2010-06-02 pass tags to filter and match via arguments (Pieter Noordhuis)\n2010-06-02 basic support to tag tests (Pieter Noordhuis)\n2010-06-02 changed how server.tcl accepts options to support more directives without requiring more arguments to the proc (Pieter Noordhuis)\n2010-06-02 removed obsolete code (Pieter Noordhuis)\n2010-06-02 catch exceptions in the server proc, to be able to kill the entire chain of running servers (Pieter Noordhuis)\n2010-06-02 Merge branch 'master' into smallkeys (antirez)\n2010-06-02 smarter swapout policy on AOF too (antirez)\n2010-06-02 better swapout policy while loading RDB file (antirez)\n2010-06-02 minor code comment change (antirez)\n2010-06-01 use integer types from stdint.h to be more verbose on the size in bytes of encoded elements. update list length to use 2 bytes instead of 1. (Pieter Noordhuis)\n2010-06-01 added stress test for heavy i/o in ziplists (Pieter Noordhuis)\n2010-06-01 fix signedness errors in ziplist testing code (Pieter Noordhuis)\n2010-06-01 minor code movements and free object pull restored to 1 million (antirez)\n2010-06-01 TODO updated with syslog plans for 2.2 (antirez)\n2010-06-01 Debug message was printing stuff that are sometimes not initialized/valid (antirez)\n2010-06-01 Merge branch 'smallkeys' of github.com:antirez/redis into smallkeys (antirez)\n2010-06-01 fixed a few comments (antirez)\n2010-06-01 fixed bugs introduced in the rewrite of the new VM engine (antirez)\n2010-05-31 support rewriting the AOF with dual list encoding (Pieter Noordhuis)\n2010-05-31 small refactor of fwrite* commands for AOF rewrite to allow writing a bulk long long (Pieter Noordhuis)\n2010-05-31 use list wrapper functions in computing the dataset digest (Pieter Noordhuis)\n2010-05-31 ziplistNext should work as expected when called with a pointer to ZIP_END (Pieter Noordhuis)\n2010-05-31 update SORT to work with the dual list encoding (Pieter Noordhuis)\n2010-05-31 function to create a new ziplist encoded list (Pieter Noordhuis)\n2010-05-31 fixed missing incrRefCount (antirez)\n2010-05-31 support rdb saving/loading with dual list encoding (Pieter Noordhuis)\n2010-05-31 fixed signedness and disambiguate variable names (Pieter Noordhuis)\n2010-05-31 added rdb save function to directly save long long values (Pieter Noordhuis)\n2010-05-31 update RPOPLPUSH to support dual encoding (Pieter Noordhuis)\n2010-05-31 update list iteration semantic to work as expected (i.e. \"while(lNext(..))\") (Pieter Noordhuis)\n2010-05-31 ziplistDelete no longer needs a direction now ziplistPrev is fixed (Pieter Noordhuis)\n2010-05-31 ziplistPrev should return the tail when the argument is ZIP_END (Pieter Noordhuis)\n2010-05-31 first step of VM rewrite. blocking VM tests passing, more work needed in the async side (antirez)\n2010-05-31 Merge branch 'no-appendfsync-on-rewrite' (antirez)\n2010-05-30 fix LREM to remove *all* occurances when a zero argument is given (Pieter Noordhuis)\n2010-05-30 fixed LINDEX to always return bulk response (Pieter Noordhuis)\n2010-05-30 the tail offset must be an integer pointer to hold a 32-bit offset (Pieter Noordhuis)\n2010-05-30 update LREM to support dual encoding via extra iteration primitives (Pieter Noordhuis)\n2010-05-30 support dual encoding in LTRIM (Pieter Noordhuis)\n2010-05-30 update LRANGE to use basic iteration code to support dual encoding (Pieter Noordhuis)\n2010-05-30 inline support for dual encoding in the LINDEX and LSET commands (Pieter Noordhuis)\n2010-05-30 generic pop and length function for ziplist encoding (Pieter Noordhuis)\n2010-05-30 generic push function that supports the dual encoding (Pieter Noordhuis)\n2010-05-30 change delete function to accept a direction argument, so \"p\" can be properly updated (Pieter Noordhuis)\n2010-05-30 expose extra functionality from ziplist.c (Pieter Noordhuis)\n2010-05-30 code style consistency fixes (Pieter Noordhuis)\n2010-05-29 ziplistIndex now accepts negative indices (Pieter Noordhuis)\n2010-05-29 fix compile warnings (Pieter Noordhuis)\n2010-05-29 use simpler encoding for the length of the previous entry (Pieter Noordhuis)\n2010-05-29 replace functions to get pointers to head and tail by macros (Pieter Noordhuis)\n2010-05-29 function to insert an element at an arbitrary position in the list (Pieter Noordhuis)\n2010-05-29 extract a generic delete function that can be used in pop and delete(range) (Pieter Noordhuis)\n2010-05-29 use the entry struct in zipRawEntryLength (Pieter Noordhuis)\n2010-05-29 rename argument names to s* to disambiguate from e* (Pieter Noordhuis)\n2010-05-29 change ziplistRepr to use the entry struct (Pieter Noordhuis)\n2010-05-29 modify compare function to check if the encoding is equal before comparing (Pieter Noordhuis)\n2010-05-29 use a struct to retrieve all details for an entry (Pieter Noordhuis)\n2010-05-29 initial implementation for making the ziplist doubly linked (Pieter Noordhuis)\n2010-05-29 fix some warnings (Pieter Noordhuis)\n2010-05-29 add function to retrieve ziplist size in bytes (Pieter Noordhuis)\n2010-05-22 fix compare function of ziplist to only load integer from ziplist when it is encoded as integer (Pieter Noordhuis)\n2010-05-22 add function to retrieve length of ziplist (Pieter Noordhuis)\n2010-05-22 re-introduce ZIP_BIGLEN for clarity (Pieter Noordhuis)\n2010-05-22 added header ziplist.h (Pieter Noordhuis)\n2010-05-22 code to compare strings with entries in ziplist, regardless of their encoding (Pieter Noordhuis)\n2010-05-22 updated iteration code to work well with different encodings (Pieter Noordhuis)\n2010-05-22 move code from zip.c to ziplist.c (Pieter Noordhuis)\n2010-05-22 partial revert of c80df5 because ziplist functions are starting to divert too much from zipmap functions (Pieter Noordhuis)\n2010-05-22 initial work for integer encoding in ziplists (Pieter Noordhuis)\n2010-05-22 move length housekeeping to a macro (Pieter Noordhuis)\n2010-05-21 allow entries to be deleted in place when iterating over a ziplist (Pieter Noordhuis)\n2010-05-21 allow pointer to be stored to current element when iterating over ziplist (Pieter Noordhuis)\n2010-05-21 rename ziplistDelete to ziplistDeleteRange (Pieter Noordhuis)\n2010-05-21 code to delete an inner range from the ziplist (Pieter Noordhuis)\n2010-05-21 check if *value is non-NULL before setting it (Pieter Noordhuis)\n2010-05-21 change iteration code to avoid allocating a new sds for each traversed entry (Pieter Noordhuis)\n2010-05-21 code to iterate over a ziplist (Pieter Noordhuis)\n2010-05-21 implementation for a ziplist with push and pop support (Pieter Noordhuis)\n2010-05-21 extracted general methods to zip.c for reuse in other zip* structures (Pieter Noordhuis)\n2010-05-28 command table size calculated with sizeof (antirez)\n2010-05-28 use qsort and bsearch to lookup commands in O(log(N)) instead of O(N) (Pieter Noordhuis)\n2010-05-28 Merge branch 'cli-stdin' of git://github.com/pietern/redis (antirez)\n2010-05-28 Fixed ZINCR Nan bugs leading to server crash and added tests (antirez)\n2010-05-28 redis.conf new features the new option, a minor typo preventing the compilation fixed (antirez)\n2010-05-28 don't fsync after a rewrite if appendfsync is set to no. use aof_fsycn instead of fsync where appropriate (antirez)\n2010-05-28 added new option no-appendfsync-on-rewrite to avoid blocking on fsync() in the main thread while a background process is doing big I/O (antirez)\n2010-05-28 Added Git sha1 and dirty status in redis-server -v output (antirez)\n2010-05-28 changed the message in the Makefile with the new command like to run the test suite (antirez)\n2010-05-27 Fixed typo. (Vincent Palmer)\n2010-05-27 new multi/exec tests (antirez)\n2010-05-26 build command outside while loop (Pieter Noordhuis)\n2010-05-26 require the flag \"-c\" to be used for redis-cli to read the last argument from stdin (Pieter Noordhuis)\n2010-05-26 Merge branch 'master' into nested-multi (antirez)\n2010-05-26 Fix EXEC bug that was leaving the client in dirty status when used with WATCH (antirez)\n2010-05-26 raise error on nested MULTI and WATCH inside multi (antirez)\n2010-05-25 allow regular sets to be passed to zunionstore/zinterstore (Pieter Noordhuis)\n2010-05-25 Version is now 2.1.1 (antirez)\n2010-05-25 RENAME is now WATCH-aware (antirez)\n2010-05-25 TODO updated (antirez)\n2010-05-25 WATCH is now able to detect keys removed by FLUSHALL and FLUSHDB (antirez)\n2010-05-25 WATCH tests (antirez)\n2010-05-25 minor bug fixed in WATCH (antirez)\n2010-05-25 WATCH for MULTI/EXEC (CAS alike concurrency) (antirez)\n2010-05-25 gitignore updated (antirez)\n2010-05-21 Master is now already unfreezed, unstable, and ready to hacking sessions! (antirez)\n2010-05-21 Merge branch 'solaris' of git://github.com/pietern/redis (antirez)\n2010-05-21 Changelog updated (antirez)\n2010-05-21 redis version is now 1.3.14 (aka 2.0.0 RC1) (antirez)\n2010-05-21 html doc updated (antirez)\n2010-05-21 by default test with valgrind does not show full leak info (antirez)\n2010-05-21 minor fix for the skiplist code, resulting in a false positive with valgrind, and in general into a useless small allocation (antirez)\n2010-05-21 Merge branch 'master' of git@github.com:antirez/redis (antirez)\n2010-05-21 tests suite initial support for valgrind, fixed the old test suite until the new one is able to target a specific host/port (antirez)\n2010-05-21 include solaris fixes in sha1.c (Pieter Noordhuis)\n2010-05-20 Don't exit with error in tests temp file cleanup if there are no files to clean (antirez)\n2010-05-20 fix memory leak on 32-bit builds (Pieter Noordhuis)\n2010-05-20 Merge branch 'master' of github.com:antirez/redis (antirez)\n2010-05-20 Fix for DEBUG DIGEST (antirez)\n2010-05-20 Merge branch 'test_vm' of git://github.com/pietern/redis (antirez)\n2010-05-20 code to enable running tests with the vm enabled (Pieter Noordhuis)\n2010-05-20 minor change to shutdown (antirez)\n2010-05-20 shutdown on SIGTERM (antirez)\n2010-05-20 Merge http://github.com/ngmoco/redis (antirez)\n2010-05-20 fix compile error on solaris (Pieter Noordhuis)\n2010-05-20 added regression for zipmap bug (antirez)\n2010-05-20 fix lookup of keys with length larger than ZIPMAP_BIGLEN (Pieter Noordhuis)\n2010-05-19 TODO updated (antirez)\n2010-05-19 initial tests for AOF (and small changes to server.tcl to support these) (Pieter Noordhuis)\n2010-05-19 Merge branch 'master' into integration (Pieter Noordhuis)\n2010-05-19 Fix for 'CONFIG SET appendonly no' (antirez)\n2010-05-19 It's now possible to turn off and on the AOF via CONFIG (antirez)\n2010-05-18 git hash 00000000 in reelase.h when git is not found enabled again after some shell scripting fix that is now compatible with most shells (antirez)\n2010-05-18 build fixed when simpler shells are used to create release.h (antirez)\n2010-05-18 use git diff when generating release.h to check for dirty status (antirez)\n2010-05-18 Solaris fixes (antirez)\n2010-05-18 html doc rebuild (antirez)\n2010-05-18 buliding of release.h moved into an external script. Avoided recompialtion of redis.c if git sha1 is the same as the previous one (antirez)\n2010-05-17 create release.h in make process and add this information to INFO listing (Pieter Noordhuis)\n2010-05-16 Redis version is now 1.3.12 (antirez)\n2010-05-16 redis version is now 1.3.11 (antirez)\n2010-05-16 random refactoring and speedups (antirez)\n2010-05-16 faster INCR with very little efforts... (antirez)\n2010-05-15 print warnings in redis log when a test raises an exception (very likely to be caused by something like a failed assertion) (Pieter Noordhuis)\n2010-05-15 Merge branch 'redis-cli-fix' of http://github.com/tizoc/redis (antirez)\n2010-05-15 added pid info to the check memory leaks test, so that those tests don't appear to be duplicated (antirez)\n2010-05-15 Merge branch 'integration' of git://github.com/pietern/redis (antirez)\n2010-05-14 more endianess detection fix for SHA1 (antirez)\n2010-05-14 fixed a warning seen with some GCC version under Linux (antirez)\n2010-05-14 initial rough integration test for replication (Pieter Noordhuis)\n2010-05-14 store entire server object on the stack instead of just the client (Pieter Noordhuis)\n2010-05-14 proc to retrieve values from INFO properties (Pieter Noordhuis)\n2010-05-14 one more fix for endianess detection (antirez)\n2010-05-14 Fixed sha1.c compilation on Linux, due to endianess detection lameness (antirez)\n2010-05-14 ZUNION,ZINTER -> ZUNIONSTORE,ZINTERSTORE (antirez)\n2010-05-14 minor fixes to the new test suite, html doc updated (antirez)\n2010-05-14 wait for redis-server to be settled and ready for connections (Pieter Noordhuis)\n2010-05-14 fix cleaning up tmp folder (Pieter Noordhuis)\n2010-05-14 update makefile to use the new test suite (Pieter Noordhuis)\n2010-05-14 check for memory leaks before killing a server (Pieter Noordhuis)\n2010-05-14 extract code to kill a server to a separate proc (Pieter Noordhuis)\n2010-05-14 start servers on different ports to prevent conflicts (Pieter Noordhuis)\n2010-05-14 use DEBUG DIGEST in new test suite (Pieter Noordhuis)\n2010-05-14 split test suite into multiple files; runs redis-server in isolation (Pieter Noordhuis)\n2010-05-14 use DEBUG DIGEST in the test instead of a function that was doing a similar work, but in a much slower and buggy way (antirez)\n2010-05-14 Don't rely on cliReadReply being able to return on shutdown (Bruno Deferrari)\n2010-05-14 If command is a shutdown, ignore errors on reply (Bruno Deferrari)\n2010-05-14 DEBUG DIGEST implemented, in order to improve the ability to test persistence and replication consistency (antirez)\n2010-05-13 Add SIGTERM shutdown handling. (Ashley Martens)\n2010-05-13 makefile deps updated (antirez)\n2010-05-13 conflicts resolved (antirez)\n2010-05-13 feed SETEX as SET and EXPIREAT to AOF (Pieter Noordhuis)\n2010-05-13 very strong speedup in saving time performance when there are many integers in the dataset. Instead of decoding the object before to pass them to the rdbSaveObject layer we check asap if the object is integer encoded and can be written on disk as an integer. (antirez)\n2010-05-13 include limits.h otherwise no double precison macros (antirez)\n2010-05-13 explicitly checks with ifdefs if our floating point and long long assumptions are verified (antirez)\n2010-05-13 Yet another version of the double saving code, with comments explaining what's happening there (antirez)\n2010-05-12 added overflow check in the double -> long long conversion trick to avoid integer overflows. I think this was not needed in practical terms, but it is safer (antirez)\n2010-05-12 use withscores when performing the dataset digest (antirez)\n2010-05-12 If a float can be casted to a long long without rounding loss, we can use the integer conversion function to write the score on disk. This is a seriuous speedup (antirez)\n2010-05-12 fixed compilation warnings in the AOF sanity check tool (antirez)\n2010-05-12 Merge branch 'vm-speedup' (antirez)\n2010-05-11 fix to return error when calling INCR on a non-string type (Pieter Noordhuis)\n2010-05-11 load objects encoded from disk directly without useless conversion (antirez)\n2010-05-11 fixed a problem leading to crashes, as keys can't be currently specially encoded, so we can't encode integers at object loading time... For now this can be fixed passing a few flags, or later can be fixed allowing encoded keys as well (antirez)\n2010-05-11 long long to string conversion speedup applied in other places as well. Still the code has bugs, fixing right now... (antirez)\n2010-05-11 hand written code to turn a long long into a string -> very big speed win (antirez)\n2010-05-11 added specialized function to compare string objects for perfect match that is optimized for this task (antirez)\n2010-05-11 better use of encoding inforamtion in dictEncObjKeyCompare (antirez)\n2010-05-10 CONFIG now can change appendfsync policy at run time (antirez)\n2010-05-10 CONFIG command now supports hot modification of RDB saving parameters. (antirez)\n2010-05-10 while loading the rdb file don't add the key to the dictionary at all if it's already expired, instead of removing it just after the insertion. (antirez)\n2010-05-10 Merge branch 'check-aof' of git://github.com/pietern/redis (antirez)\n2010-05-08 minor changes to improve code readability (antirez)\n2010-05-08 swap objects out directly while loading an RDB file if we detect we can't stay in the vm max memory limits anyway (antirez)\n2010-05-07 change command names no longer used to zunion/zinter (Pieter Noordhuis)\n2010-05-07 DEBUG POPULATE command for fast creation of test databases (antirez)\n2010-05-07 update TODO (Pieter Noordhuis)\n2010-05-07 swap arguments in blockClientOnSwappedKeys to be consistent (Pieter Noordhuis)\n2010-05-07 added function that preloads all keys needed to execute a MULTI/EXEC block (Pieter Noordhuis)\n2010-05-07 add sanity check to zunionInterBlockClientOnSwappedKeys, as the number of keys used is provided as argument to the function (Pieter Noordhuis)\n2010-05-07 make prototype of custom function to preload keys from the vm match the prototype of waitForMultipleSwappedKeys (Pieter Noordhuis)\n2010-05-07 extract preloading of multiple keys according to the command prototype to a separate function (Pieter Noordhuis)\n2010-05-07 make append only filename configurable (Pieter Noordhuis)\n2010-05-07 don't load value from VM for EXISTS (Pieter Noordhuis)\n2010-05-07 swap file name pid expansion removed. Not suited for mission critical software... (antirez)\n2010-05-07 Swap file is now locked (antirez)\n2010-05-06 Merge branch 'master' into aof-speedup (antirez)\n2010-05-06 log error and quit when the AOF contains an unfinished MULTI (antirez)\n2010-05-06 log error and quit when the AOF contains an unfinished MULTI (Pieter Noordhuis)\n2010-05-06 Merge branch 'master' into check-aof (Pieter Noordhuis)\n2010-05-06 hincrby should report an error when called against a hash key that doesn't contain an integer (Pieter Noordhuis)\n2010-05-06 AOF writes are now accumulated into a buffer and flushed into disk just before re-entering the event loop. A lot less writes but still this guarantees that AOF is written before the client gets a positive reply about a write operation, as no reply is trasnmitted before re-entering into the event loop. (antirez)\n2010-05-06 clarified a few messages in redis.conf (antirez)\n2010-05-05 ask for confirmation before AOF is truncated (Pieter Noordhuis)\n2010-05-05 str can be free'd outside readString (Pieter Noordhuis)\n2010-05-05 moved argument parsing around (Pieter Noordhuis)\n2010-05-05 ignore redis-check-aof binary (Pieter Noordhuis)\n2010-05-05 allow AOF to be fixed by truncating to the portion of the file that is valid (Pieter Noordhuis)\n2010-05-05 tool to check if AOF is valid (Pieter Noordhuis)\n2010-05-02 included fmacros.h in linenose.c to avoid compilation warnings on Linux (antirez)\n2010-05-02 compilation fix for mac os x (antirez)\n2010-05-02 Merge branch 'master' of git@github.com:antirez/redis (antirez)\n2010-05-02 On Linux now fdatasync() is used insetad of fsync() in order to flush the AOF file kernel buffers (antirez)\n2010-04-30 More tests for APPEND and tests for SUBSTR (antirez)\n2010-04-30 linenoise.c updated, now redis-cli can be used in a pipe (antirez)\n2010-04-29 redis-cli minor fix (less segfault is better) (antirez)\n2010-04-29 New MONITOR output format with timestamp, every command in a single line, string representations (antirez)\n2010-04-29 redis-cli INFO output format is now raw again (antirez)\n2010-04-29 Added more information about slave election in Redis Cluster alternative doc (antirez)\n2010-04-29 Redis cluster version 2 (antirez)\n2010-04-27 Fixed a redis-cli bug, was using free instead of zfree call (antirez)\n2010-04-27 AOF is now rewritten on slave after SYNC with master. Thanks to @_km for finding this bug and any others' (antirez)\n2010-04-27 redis-cli is now using only the new protocol (antirez)\n2010-04-27 Minimal support for subscribe/psubscribe in redis-cli (antirez)\n2010-04-26 don't output the newline when stdout is not a tty (antirez)\n2010-04-26 redis-cli now is able to also output the string representation instead of the raw string. Much better for debugging (antirez)\n2010-04-26 Initial support for quoted strings in redis-cli (antirez)\n2010-04-23 SETEX implemented (antirez)\n2010-04-23 Pub/Sub API change: now messages received via pattern matching have a different message type and an additional field representing the original pattern the message matched (antirez)\n2010-04-22 typo fixed, reloaded (antirez)\n2010-04-22 typo fixed (antirez)\n2010-04-22 REDIS-CLUSTER doc updated (antirez)\n2010-04-22 Virtual memory design document removed, no longer needed as we have a full specification and implementation (antirez)\n2010-04-22 new units for bytes specification (antirez)\n2010-04-22 Now in redis.conf it is possible to specify units where appropriate instead of amounts of bytes, like 2Gi or 4M and so forth (antirez)\n2010-04-21 binary safe keys ready implementation of RANDOMKEYS (antirez)\n2010-04-21 Now that's the right 1.3.10 (antirez)\n2010-04-21 Revert \"fsync always now uses O_DIRECT on Linux\" (antirez)\n2010-04-21 Revert \"define __USE_GNU to get O_DIRECT\" (antirez)\n2010-04-21 Merge branch 'master' of github.com:antirez/redis (antirez)\n2010-04-21 Revert \"version 1.3.10\" (antirez)\n2010-04-21 version 1.3.10 (antirez)\n2010-04-20 define __USE_GNU to get O_DIRECT (antirez)\n2010-04-20 fsync always now uses O_DIRECT on Linux (antirez)\n2010-04-20 More precise memory used guesswork in zmalloc.c (antirez)\n2010-04-19 Fix for MULTI/EXEC and Replication/AOF: now the block is correctly sent as MULTI/..writing operations../EXEC. Ok for slaves but more work needed for the AOF as it should be a write-all-or-nothing business (antirez)\n2010-04-19 running the test using tcl8.5 directly instead of tclsh that too often it's a symlink to 8.4 (antirez)\n2010-04-19 Added package require Tcl 8.5 in redis.tcl so it will show a clear error when the test suit is attempted to run under 8.4 (antirez)\n2010-04-18 Fix for a SORT bug introduced with commit 16fa22f1, regression test added (antirez)\n2010-04-18 Guru mediation -> meditation (antirez)\n2010-04-16 check eptr inline (Pieter Noordhuis)\n2010-04-16 refactor code that retrieves value from object or replies to client (Pieter Noordhuis)\n2010-04-17 Merge branch 'hash' of git://github.com/pietern/redis (antirez)\n2010-04-17 redisAssert(0) => redisPanic(\"something meaningful\") (antirez)\n2010-04-17 make sure that the resulting value in hincrby is encoded when possible (Pieter Noordhuis)\n2010-04-17 increment dirty counter after hmset (Pieter Noordhuis)\n2010-04-17 strip tryObjectEncoding from hashSet, to enable the arguments being encoded in-place (Pieter Noordhuis)\n2010-04-17 Added support for Guru Mediation, and raising a guru mediation if refCount <= 0 but decrRefCount is called against such an object (antirez)\n2010-04-16 fix small error and memory leaks in SORT (Pieter Noordhuis)\n2010-04-16 SORT/GET test added (antirez)\n2010-04-16 Added tests for GET/BY against hashes fields (antirez)\n2010-04-16 Merge branch 'hash-refactor' of git://github.com/pietern/redis (antirez)\n2010-04-16 check object type in lookupKeyByPattern (Pieter Noordhuis)\n2010-04-16 make sortCommand aware that lookupKeyByPattern always increased the refcount of the returned value (Pieter Noordhuis)\n2010-04-16 revert 0c390a to stop using tricks with o->refcount (Pieter Noordhuis)\n2010-04-16 store the hash iterator on the heap instead of the stack (Pieter Noordhuis)\n2010-04-16 drop inline directive (Pieter Noordhuis)\n2010-04-16 rename hashReplace to hashSet (Pieter Noordhuis)\n2010-04-16 added dictFetchValue() to dict.c to make hash table API a bit less verbose in the common cases (antirez)\n2010-04-03 Don't set expire to keys with ttl=0, remove them immediately. (antirez)\n2010-04-15 make sure that cmpobj is in decoded form when sorting by ALPHA (this solves edge case from previous commit where (!sortby && alpha) == 1) (Pieter Noordhuis)\n2010-04-15 enable hash dereference in SORT on BY and GET (Pieter Noordhuis)\n2010-04-15 use shared replies for hset (Pieter Noordhuis)\n2010-04-15 set refcount of string objects retrieved from zipmaps to 0, so we don't have to touch the refcount of the objects inside dicts (Pieter Noordhuis)\n2010-04-15 added HSETNX (Pieter Noordhuis)\n2010-04-14 refactor of hash commands to use specialized api that abstracts zipmap and dict apis (Pieter Noordhuis)\n2010-04-13 move retrieval of long up to prevent an empty hash from being created (Pieter Noordhuis)\n2010-04-15 more advanced leaks detection in test redis (antirez)\n2010-04-15 ability to select port/host from make test (antirez)\n2010-04-15 Active rehashing (antirez)\n2010-04-15 Incrementally rehahsing hash table! Thanks to Derek Collison and Pieter Noordhuis for feedbacks/help (antirez)\n2010-04-14 Does not allow commands other than Pub/Sub commands when there is at least one pattern (antirez)\n2010-04-13 Fixed a tiny memory leak when loading the configuration file. (Alex McHale)\n2010-04-13 Merge branch 'hmget' of git://github.com/pietern/redis (antirez)\n2010-03-29 Validate numeric inputs. (Alex McHale)\n2010-03-24 Remove trailing whitespace. (Alex McHale)\n2010-04-12 Now all the commands returning a multi bulk reply against non existing keys will return an empty multi bulk, not a nil one (antirez)\n2010-04-12 implemented HMGET (Pieter Noordhuis)\n2010-04-12 implemented HMSET (Pieter Noordhuis)\n2010-04-12 Sharing of small integer objects: may save a lot of memory with datasets having many of this (antirez)\n2010-04-10 dict.c fixed to play well with enabling/disabling of the hash table (antirez)\n2010-04-09 removed a no longer true assert in the VM code (antirez)\n2010-04-09 shareobjects feautres killed - no gains most of the time, but VM complexities (antirez)\n2010-04-09 use directly the real key object in VM I/O jobs to match by pointer, and to handle different keys with the same name living in different DBs, but being at the same moment in the IO job queues (antirez)\n2010-04-08 last change reverted as it was unstable... more testing needed (antirez)\n2010-04-08 Prevent hash table resize while there are active child processes in order to play well with copy on write (antirez)\n2010-04-08 Merge branch 'issue_218' of git://github.com/pietern/redis (antirez)\n2010-04-08 -1 not needed... (antirez)\n2010-04-08 Skiplist theoretical fix (antirez)\n2010-04-07 Now when a child is terminated by a signal, the signal number is logged as well (antirez)\n2010-04-07 First version of evented Redis Tcl client, that will be used for BLPOP and Pub/Sub tests (antirez)\n2010-04-05 use long long reply type for HINCRBY (Pieter Noordhuis)\n2010-04-05 last argument is never encoded for HINCRBY (Pieter Noordhuis)\n2010-04-02 Now PUBLISH commands are replicated to slaves (antirez)\n2010-04-01 use the right object when cleaning up after zunion/zinter (fixes issue 216) (Pieter Noordhuis)\n2010-04-01 Merge branch 'zipmap' of git://github.com/pietern/redis (antirez)\n2010-04-01 reduce code complexity because zipmapLen now is O(1) (Pieter Noordhuis)\n2010-04-01 update the zipmap entry in-place instead of appending it (Pieter Noordhuis)\n2010-04-01 updated zipmap documentation to match the implementation (Pieter Noordhuis)\n2010-04-01 allow 4 free trailing bytes for each value (Pieter Noordhuis)\n2010-04-01 Pub/Sub pattern matching capabilities (antirez)\n2010-04-01 use function to determine length of a single entry (Pieter Noordhuis)\n2010-03-31 Deny EXEC under out of memory (antirez)\n2010-03-29 No timeouts nor other commands for clients in a Pub/Sub context (antirez)\n2010-03-29 free hash table entries about no longer active classes, so that PUBSUB can be abused with millions of different classes (antirez)\n2010-03-29 Fixed a refcount stuff leading to PUBSUB crashes (antirez)\n2010-03-29 fmacros added to linenoise, avoiding all the nice warnings... (antirez)\n2010-03-29 First pubsub fix (antirez)\n2010-03-29 PUBSUB implemented (antirez)\n2010-03-29 Redis version is now 1.3.8 (antirez)\n2010-03-28 removed references in code to ZIPMAP_EMPTY (Pieter Noordhuis)\n2010-03-28 use first byte of zipmap to store length (Pieter Noordhuis)\n2010-03-28 implemented strategy that doesn't use free blocks in zipmaps (Pieter Noordhuis)\n2010-03-26 Merge branch 'hincrby' of git://github.com/pietern/redis (antirez)\n2010-03-26 removed unnecessary refcount increase that caused the HINCRBY memleak (Pieter Noordhuis)\n2010-03-26 implements HINCRBY and tests (todo: find and fix small memleak) (Pieter Noordhuis)\n2010-03-26 Removed a useless if spotted by Pieter Noordhuis (antirez)\n2010-03-26 Fixed a critical replication bug: binary values issued with the multi bulk protocol caused a protocol desync with slaves. (antirez)\n2010-03-24 Fixed the reply about denied  write commands under maxmemory reached condition: now the error will no longer lead to a client-server protocol desync (antirez)\n2010-03-24 CONFIG command implemened -- just a start but already useful (antirez)\n2010-03-24 redis-cli prompt is now redis> (antirez)\n2010-03-23 with --help states that you can use - as config file name to feed config via stdin (antirez)\n2010-03-23 New INFO field: expired_keys (antirez)\n2010-03-23 the Cron timer function is now called 10 times per second instead of 1 time per second to make Redis more responsibe to BGSAVE and to delete expired keys more incrementally (antirez)\n2010-03-23 Use linenoise for line editing on redis-cli. (Michel Martens)\n2010-03-23 Fix authentication for redis-cli on non-interactive mode. (Michel Martens)\n2010-03-23 key deletion on empty value fix + some refactoring (antirez)\n2010-03-23 Empty value trigger key removal in all the operations (antirez)\n2010-03-22 Merged gnrfan patches fixing issues 191, 193, 194 (antirez)\n2010-03-22 Merge branch 'issue_193' of git://github.com/gnrfan/redis (antirez)\n2010-03-22 Merge branch 'issue_191' of git://github.com/gnrfan/redis (antirez)\n2010-03-22 Redis master version is now 1.3.7 (antirez)\n2010-03-19 support for include directive in config parser (Jeremy Zawodny)\n2010-03-19 Removed a stupid overriding of config values due to a wrong cut&paste (antirez)\n2010-03-19 VM hash type swappability implemented. Handling of failed pthread_create() call. (antirez)\n2010-03-19 Solving issue #191 on Google Code: -v and --version should print the version of Redis (Antonio Ognio)\n2010-03-19 Solves issue #194 on Google Code: --help parameter to redis-srver prints the usage message (Antonio Ognio)\n2010-03-19 Fixing issue 193 (Antonio Ognio)\n2010-03-18 increment server.dirty on HDEL (antirez)\n2010-03-18 Redis 1.3.6 (antirez)\n2010-03-18 test-redis.tcl dataset digest function Hash support (antirez)\n2010-03-18 zipmap fix for large values (antirez)\n2010-03-18 Optimization fixed and re-activated (antirez)\n2010-03-18 reverted an optimization that makes Redis not stable (antirez)\n2010-03-18 Fixed redis-cli auth code (antirez)\n2010-03-17 HDEL fix, an optimization for comparison of objects in hash table lookups when they are integer encoding (antirez)\n2010-03-17 Version is now 1.3.5 (antirez)\n2010-03-17 Merged Pietern patch for VM key args helper function. Fixed an obvious bug in the redis-cli passwd auth stuff (antirez)\n2010-03-17 Merge branch 'aggregates' of git://github.com/pietern/redis (antirez)\n2010-03-17 Added Authentication to redis-cli.c using -a switch Update usage fixed Makefile to delete redis-check-dump during make clean (root)\n2010-03-17 HEXISTS and tests implemented (antirez)\n2010-03-17 More hash tests (antirez)\n2010-03-17 better HSET test (antirez)\n2010-03-17 Fixed a bug in HSET, a memory leak, and a theoretical bug in dict.c (antirez)\n2010-03-17 More Hash tests (antirez)\n2010-03-13 added preloading keys from VM when using ZINTER or ZUNION (Pieter Noordhuis)\n2010-03-13 added explicit AGGREGATE [SUM|MIN|MAX] option to ZUNION/ZINTER (Pieter Noordhuis)\n2010-03-16 HGET fix for integer encoded field against zipmap encoded hash (antirez)\n2010-03-16 zrevrank support in redis-cli (antirez)\n2010-03-16 HKEYS / HVALS / HGETALL (antirez)\n2010-03-16 Solved a memory leak with Hashes (antirez)\n2010-03-15 pretty big refactoring (antirez)\n2010-03-15 An interesting refactoring + more expressive internal API (antirez)\n2010-03-15 Fixed the same problem in ZREVRANK (antirez)\n2010-03-15 Fixed a ZRANK bug (antirez)\n2010-03-15 zipmap to hash conversion in HSET (antirez)\n2010-03-14 max zipmap entries and max zipmap value parameters added into INFO output (antirez)\n2010-03-14 HDEL and some improvement in DEBUG OBJECT command (antirez)\n2010-03-14 Append only file support for hashes (antirez)\n2010-03-13 utility to check rdb files for unprocessable opcodes (Pieter Noordhuis)\n2010-03-12 A minor fix and a few debug messages removed (antirez)\n2010-03-12 Applied the replication bug patch provided by Jeremy Zawodny, removing temp file collision after the slave got the dump.rdb file in the SYNC stage (antirez)\n2010-03-11 Fix for HGET against non Hash type, debug messages used to understand a bit better a corrupted rdb file (antirez)\n2010-03-09 fix: use zmalloc instead of malloc (Pieter Noordhuis)\n2010-03-09 Merged zsetops branch from Pietern (antirez)\n2010-03-09 Merged ZREMBYRANK from Pietern (antirez)\n2010-03-09 Merged ZREVRANK from Pietern (antirez)\n2010-03-09 use a struct to store both a dict and its weight for ZUNION and ZINTER, so qsort can be applied (Pieter Noordhuis)\n2010-03-09 Hash auto conversion from zipmap to hash table, type fixed for hashes, hash loading from disk (antirez)\n2010-03-09 replaced ZMERGE by ZUNION and ZINTER. note: key preloading by the VM does not yet work (Pieter Noordhuis)\n2010-03-08 Hashes saving / fixes (antirez)\n2010-03-08 use ZMERGE as starting point (Pieter Noordhuis)\n2010-03-07 HSET fixes, now the new pointer is stored back in the object pointer field (antirez)\n2010-03-07 added ZREVRANK (Pieter Noordhuis)\n2010-03-06 Fix for replicaiton with over 2GB dump file initial SYNC stage (antirez)\n2010-03-06 first implementation of HSET/HSET. More work needed (antirez)\n2010-03-05 zipmaps functions to get, iterate, test for existence. Initial works for Hash data type (antirez)\n2010-03-04 redis-benchmark now implements Set commands benchmarks (antirez)\n2010-03-04 zipmap iteration code (antirez)\n2010-03-04 moved code to delete a single node from a zset to a separate function (Pieter Noordhuis)\n2010-03-04 rename zslDeleteRange to zslDeleteRangeByScore (to differentiate between deleting using score or rank) (Pieter Noordhuis)\n2010-03-04 use 1-based rank across zsl*Rank functions consistently (Pieter Noordhuis)\n2010-03-04 implemented ZREMBYRANK (Pieter Noordhuis)\n2010-03-04 A fix for initialization of augmented skip lists (antirez)\n2010-03-04 A fix for an invalid access when VM is disabled (antirez)\n2010-03-04 Merge branch 'zsl-get-rank' of git://github.com/pietern/redis (antirez)\n2010-03-04 redis-cli now runs in interactive mode if no command is provided (antirez)\n2010-03-04 merged memory reduction patch (Pieter Noordhuis)\n2010-03-04 Now list push commands return the length of the new list, thanks to Gustavo Picon (antirez)\n2010-03-04 first check if starting point is trivial (head or tail) before applying log(N) search (Pieter Noordhuis)\n2010-03-04 use rank to find starting point for ZRANGE and ZREVRANGE (Pieter Noordhuis)\n2010-03-04 lookup rank of a zset entry in a different function (Pieter Noordhuis)\n2010-03-04 SUBSTR fix for integer encoded vals (antirez)\n2010-03-04 fix ZRANK (realize that rank is 1-based due to the skip list header) (Pieter Noordhuis)\n2010-03-03 initial implementation of SUBSTR (antirez)\n2010-03-03 TODO updated (antirez)\n2010-03-03 fpurge call removed from redis-cli (antirez)\n2010-03-03 ZRANK stress tester (antirez)\n2010-03-03 use less memory as element->span[0] will always be 1; any level 0 skip list is essentially a linked list (Pieter Noordhuis)\n2010-03-03 rank is very unlikely to overflow integer range (Pieter Noordhuis)\n2010-03-03 x->backward never equals zsl->header (Pieter Noordhuis)\n2010-03-03 initial implementation for augmented zsets and the zrank command (Pieter Noordhuis)\n2010-03-03 zipampDel() implemented (antirez)\n2010-03-03 added quit and exit commands to redis-cli in order to quit the interactive mode (antirez)\n2010-03-03 Merge remote branch 'djanowski/interactive' (antirez)\n2010-03-02 Add support for MULTI/EXEC. (Damian Janowski & Michel Martens)\n2010-03-02 Remove trailing newline in interactive mode. (Damian Janowski & Michel Martens)\n2010-03-02 minor fix for a Linux warning (antirez)\n2010-03-02 Add interactive mode to redis-cli. (Michel Martens & Damian Janowski)\n2010-03-02 Better to increment the version minor number when a VM bug is fixed... it will be simpler to understand what's going on when users will report problems with the INFO trace. (antirez)\n2010-03-02 Fixed a subtle VM bug... was not flushing the buffer so the child process read truncated data (antirez)\n2010-03-01 KEYS now returns a multi bulk reply (antirez)\n2010-02-27 Add DISCARD command to discard queued MULTI commands. (antirez)\n2010-03-01 Swappability bug due to a typo fixed thanks to code review by Felix Geisendörfer @felixge (antirez)\n2010-02-28 minor fixes for zipmap.c (antirez)\n2010-02-27 first zipmap fix of a long sequence in the days to come ;) (antirez)\n2010-02-27 initial zipmap.c implementation (antirez)\n2010-02-27 Bug #169 fixed (BLOP/BRPOP interrupted connections are not cleared from the queue) (antirez)\n2010-02-22 Fixed 32bit make target to work on Linux out of the box (antirez)\n2010-02-19 A problem with replication with multiple slaves connectiong to a single master fixed. It was due to a typo, and reported on github by the user micmac. Also the copyright year fixed from many files. (antirez)\n2010-02-10 Saner VM defaults for redis.conf (antirez)\n2010-02-09 VM now is able to block clients on swapped keys for all the commands (antirez)\n2010-02-07 ZCOUNT and ZRANGEBYSCORE new tests (antirez)\n2010-02-07 ZRANGEBYSCORE now supports open intervals, prefixing double values with a open paren. Added ZCOUNT that can count the elements inside an interval of scores, this supports open intervals too (antirez)\n2010-02-07 WITHSCORES in ZRANGEBYSCORE thanks to Sam Hendley (antirez)\n2010-02-06 Added \"withscores\" option to zrangebyscore command. Based on withscores support in zrange function, ugliest part was the argument parsing to handle using it with the limit option. (Sam Hendley)\n2010-02-06 DEBUG OBJECT provide info about serialized object length even when VM is disabled (antirez)\n2010-02-06 multi bulk requests in redis-benchmark, default fsync policy changed to everysec, added a prefix character for DEBUG logs (antirez)\n2010-02-04 APPEND tests (antirez)\n2010-02-04 APPEND command (antirez)\n2010-02-02 Faster version of the function hashing possibly encoded objects, leading to a general speed gain when working with Sets of integers (antirez)\n2010-02-02 faster Set loading time from .rdb file resizing the hash table to the right size before loading elements (antirez)\n2010-02-02 Log time taken to load the DB at startup, in seconds (antirez)\n2010-01-31 Fixed VM corruption due to child fclosing the VM file directly or indirectly calling exit(), now replaced with _exit() in all the sensible places. Masked a few signals from IO threads. (antirez)\n2010-01-28 loading side of the threaded VM (antirez)\n2010-01-26 TODO cahnges (antirez)\n2010-01-23 Fixed memory human style memory reporting, removed server.usedmemory, now zmalloc_used_memory() is used always. (antirez)\n2010-01-22 VM tuning thanks to redis-stat vmstat. Now it performs much better under high load (antirez)\n2010-01-21 Changelog updated (antirez)\n2010-01-21 REDIS_MAX_COMPLETED_JOBS_PROCESSED is now in percentage, not number of jobs. Moved a debugging message a few lines forward as it was called where a few logged parameters where invalid, leading to a crash (antirez)\n2010-01-20 fixed a deadlock caused by too much finished processes in queue so that I/O clients writing to the wirte side of the pipe used to awake the main thread where blocking. Then a BGSAVE started waiting for the last active thread to finish, condition impossible because all the I/O threads where blocking on threads. Takes this as a note to myself... (antirez)\n2010-01-20 ae.c event loop does no longer support exception notifications, as they are fully pointless. Also a theoretical bug that never happens in practice fixed. (antirez)\n2010-01-19 commercial tools stuff removed from the Redis makefile. cotools are now migrated into a different repos (antirez)\n2010-01-19 removed a bug in the function to cancel an I/O job (antirez)\n2010-01-17 static symbols update (antirez)\n2010-01-16 removed support for REDIS_HELGRIND_FRIENDLY since Helgrind 3.5.0 is friendly enough even with many threads created and destroyed (antirez)\n2010-01-15 now redis-cli understands -h (antirez)\n2010-01-15 Create swap file only if not exists (antirez)\n2010-01-15 I hate warnings (antirez)\n2010-01-15 fixed a minor memory leak in configuration file parsing (antirez)\n2010-01-15 minor fix (antirez)\n2010-01-15 support for named VM swap file. Fixed a few important interaction issues between the background saving processes and IO threads (antirez)\n2010-01-15 fix for the just added new test (antirez)\n2010-01-15 useless debugging messages removed (antirez)\n2010-01-15 new test added (antirez)\n2010-01-15 thread safe zmalloc used memory counter (antirez)\n2010-01-15 A define to make Redis more helgrind friendly (antirez)\n2010-01-15 removed a few races from threaded VM (antirez)\n2010-01-14 Fixed a never experienced, theoretical bug that can actually happen in practice. Basically when a thread is working on a I/O Job we need to wait it to finish before to cancel the Job in vmCancelThreadedIOJob(), otherwise the thread may mess with an object that is being manipulated by the main thread as well. (antirez)\n2010-01-14 Set the new threads stack size to a LZF friendly amount (antirez)\n2010-01-13 access to already freed job structure fixed by statements reoredering (antirez)\n2010-01-13 removed a useless debugging message (antirez)\n2010-01-13 Wait zero active threads condition before to fork() for BGSAVE or BGREWRITEAOF (antirez)\n2010-01-13 list API is now thread safe (antirez)\n2010-01-13 minor TODO and debugging info changes (antirez)\n2010-01-12 support for blocking VM in config file (antirez)\n2010-01-12 more non blocking VM changes (antirez)\n2010-01-12 fix for test #11 (antirez)\n2010-01-12 a few more stuff in INFO about VM. Test #11 changed a bit in order to be less lame (antirez)\n2010-01-12 Added a define to configure how many completed IO jobs the handler should process at every call. (antirez)\n2010-01-11 Fixed a bug in the IO Job canceling funtion (antirez)\n2010-01-11 more steps towards a working non blocking VM (antirez)\n2010-01-11 converted random printfs in debug logs (antirez)\n2010-01-11 removed a bug introduced with non blocking VM (antirez)\n2010-01-11 a few non blocking VM bugs fixed (antirez)\n2010-01-11 More work on non-blocking VM. Should work in a few days (antirez)\n2010-01-11 More threaded I/O VM work + Redis init script (antirez)\n2010-01-10 more work on VM threaded I/O. Still nothing of usable (antirez)\n2010-01-09 non-blocking VM data structures, just a start (antirez)\n2010-01-08 used_memory_human added to INFO output. Human readable amount of memory used. (antirez)\n2010-01-07 Now DEBUG OBJECT plays well with swapped out objects (antirez)\n2010-01-07 fflush VM swap file after object swapping (antirez)\n2010-01-07 added the fmacros to enable support for fseeko() lseeko() with 64bit off_t (antirez)\n2010-01-07 VM now swaps objects out while loading datasets not fitting into vm-max-memory bytes of RAM (antirez)\n2010-01-07 added process id information in INFO (antirez)\n2010-01-06 vm-enabled set to no by default in redis.conf (antirez)\n2010-01-06 a new default redis.conf (antirez)\n2010-01-06 VM stats in INFO command (antirez)\n2010-01-06 Introduced a new log verbosity level, so now DEBUG is really for debugging. Refactored a bit maxmemory. When virtual memory is short in RAM free the objects freelist as well as swapping things out. (antirez)\n2010-01-05 fixed a bug in bgsave when VM is off but still it was testing for obj->storage field (antirez)\n2010-01-05 converted a few calls to assert() => redisAssert() to print stack trace (antirez)\n2010-01-05 BGREWRITEAOF now works with swapping on (antirez)\n2010-01-05 A first fix for SET key overwrite (antirez)\n2010-01-05 SAVE now works with VM (antirez)\n2010-01-05 swapping algorithm a bit more aggressive under low memory (antirez)\n2010-01-05 basic VM mostly working! (antirez)\n2010-01-05 New object field (one of the unused bytes) to hold the type of the swapped out value object in key objects (antirez)\n2010-01-05 VM internals bugfixes, set 1 (antirez)\n2010-01-05 load key from swap on key lookup (antirez)\n2010-01-05 more object-level VM primitives (antirez)\n2010-01-05 Redis objects swapping / loading (antirez)\n2010-01-05 rdbLoadObject() as a separated function to load objects from disk. Dropped support for RDB version 0, I guess no longer has this legacy DBs around (antirez)\n2010-01-04 VM low level pages handling (antirez)\n2010-01-04 vm swap file creation, and some basic configuration (antirez)\n2010-01-04 version marked 1.3.2 (antirez)\n2010-01-04 saving code refactored a bit, added a function returning the number of bytes an object will use on disk (antirez)\n2010-01-02 Now the PUSH side of RPOPLPUSH is able to unblock clients blocked on BLPOP (antirez)\n2010-01-02 Version is now 1.3.1 (antirez)\n2010-01-02 New vararg BLPOP able to block against multiple keys (antirez)\n2009-12-29 fixed a problem with BLPOP timeout of zero, now it blocks forever (antirez)\n2009-12-29 BLPOP timeouts implemented (antirez)\n2009-12-29 first working implementation of BLPOP and BRPOP, still everything is to test well (antirez)\n2009-12-29 a few more fixes, still broken (antirez)\n2009-12-29 First fix, still broken (antirez)\n2009-12-29 minor fix for Linux 64 bit (antirez)\n2009-12-29 not yet working BLPOP implementation (antirez)\n2009-12-27 AOFSYNC removed, got a better idea... (antirez)\n2009-12-27 AOFSYNC command implemented (antirez)\n2009-12-27 Version changed to 1.3.0, welcome to the new unstable (antirez)\n2009-12-27 Now MULTI returns +OK as well (antirez)\n2009-12-27 MULTI/EXEC first implementation (antirez)\n2009-12-24 Fixed a minor bug in GETSET, now the SET part is not performed if the GET fails because the key does not contain a string value (antirez)\n2009-12-23 html doc readded (antirez)\n2009-12-23 ZRANGE WITHSCORES test added (antirez)\n2009-12-23 version is now 1.1.94 (antirez)\n2009-12-23 Add the command name in the unknown command error message. (antirez)\n2009-12-22 ZRANGE, ZREVRANGE now support WITHSCORES options (antirez)\n2009-12-22 html docs update (ZINCRBY added) (antirez)\n2009-12-18 TODO list update (antirez)\n2009-12-18 the pipelining test was ran against DB 1 for error, now it runs on DB 9 like all the other tests (antirez)\n2009-12-18 still more tests (antirez)\n2009-12-18 SORT STORE test added (antirez)\n2009-12-18 Now SORT returns an empty bulk reply if the key does not exist (antirez)\n2009-12-18 modified a bit the ZREVRANGE test to cover a few lines of code more (antirez)\n2009-12-18 SHUTDOWN now does the right thing when append only is on, that is, fsync instead to save the snapshot. (antirez)\n2009-12-18 Added a missing server.dirty increment in a non critical place, added more tests (antirez)\n2009-12-18 LTRIM stress testing test added (antirez)\n2009-12-18 LTRIM now returns +OK against non existing keys. More tests in test-redis.tcl (antirez)\n2009-12-18 added sdstoupper() declaration in sds.h (antirez)\n2009-12-18 Fixed sds.c bug #124 (antirez)\n2009-12-16 LZF compression re-enabled by default, but with INIT_HTAB set to 0 to avoid the very costly memset initialization. Note that with this option set valgrind will output some false positive about lzf_c.c (antirez)\n2009-12-16 lzf compression switched off by default now, with config file option to enable it in redis.conf (antirez)\n2009-12-16 Regression for epoll bug in redis-test.tcl, version is now 1.1.93 (antirez)\n2009-12-16 Fixed a lame epoll issue (antirez)\n2009-12-15 html doc updated (antirez)\n2009-12-15 version is now 1.1.92 (antirez)\n2009-12-15 Two important fixes to append only file: zero length values and expires. A pretty neat new test to check consistency of randomly build datasets against snapshotting and AOF. (antirez)\n2009-12-15 debug loadaof implemented in order to add more consistency tests in test-redis.tcl (antirez)\n2009-12-15 Added a new test able to stress a lot the snapshotting engine (antirez)\n2009-12-15 Unified handling of empty queries with normal queries. (antirez)\n2009-12-15 Fixed some subtle bug in the command processing code almost impossible to spot in the real world, thanks to gcov (antirez)\n2009-12-15 Regression test for SINTERSTORE added (antirez)\n2009-12-15 Fixed issue #121 (antirez)\n2009-12-14 a few more tests and ability to run a specific test in test-redis.tcl (antirez)\n2009-12-13 Changed the reply of BGSAVE and BGREWRITEAOF from +OK to a more meaningful message that makes the user aware of an operation that just started and is not yet finished. (antirez)\n2009-12-13 Set the master->slave logical client as authenticated on creation, so that if the slave requires a password replication works anyway (antirez)\n2009-12-13 TODO update (antirez)\n2009-12-12 bgrewriteaof_in_progress added to INFO (antirez)\n2009-12-12 TODO list modified. What's planned for 1.4 is now written in the stone ;) (antirez)\n2009-12-12 better handling of non blocking connect on redis-benchmark: EPIPE on read does not print an error message now (antirez)\n2009-12-11 some change to redis-sha1.rb utility to make it more robust against non-meaningful changes in the dataset (antirez)\n2009-12-10 redis-sha1.rb utility updated (antirez)\n2009-12-10 a bit more verbose -ERR wrong number o arguments error, now gives info about the command name causing the error (antirez)\n2009-12-10 TODO change and minor SETNX optimization (antirez)\n2009-12-06 in rdbLoadDoubleValue now the buffer is nul terminated correctly. Thanks valgrind. (antirez)\n2009-12-06 printf format warnings fixed by casting (antirez)\n2009-12-06 Regression tests for SETNX and MSETNX bugs added (antirez)\n2009-12-06 SETNX and MSETNX now respect the delete-on-write operation of EXPIREing keys (antirez)\n2009-12-06 Fixed daemonization when using kqueue/kevent. Now the server initialization is performed *after* the daemonization (antirez)\n2009-12-05 more HTML doc changes (antirez)\n2009-12-05 HTML doc update (antirez)\n2009-12-05 a few redis-cli format specified fixed (antirez)\n2009-12-05 use __attribute__ format in sdscatprintf() when the compiler is GCC. Fixed format bugs resulting from the new warnings. (antirez)\n2009-12-01 TODO update (antirez)\n2009-12-01 compilation problem on 64bit mac os x 10.5 possibly fixed (antirez)\n2009-12-01 virtual memory design doc typos (antirez)\n2009-12-01 design documents added to the project (antirez)\n2009-11-30 Fixed issued #85 (getDecodedObject: Assertion 1 != 1 failed. While sorting a set), added a smarter assert() function to dump the stacktrace, provided a macro to initalize Redis objects on the stack to avoid this kind of bugs. (antirez)\n2009-11-30 fixed a subtle bug in redis-cli not having visible effects (antirez)\n2009-11-29 TODO updated (antirez)\n2009-11-29 Version chagned to 1.100, also known as the first first 2.0 beta version (antirez)\n2009-11-29 more tests in test-redis.tcl, some minor fix (antirez)\n2009-11-29 SORT support for sorted sets (antirez)\n2009-11-28 Implemented LIMIT option in ZRANGEBYSCORE. We now enter feature-freeze (antirez)\n2009-11-28 Changelog updated (antirez)\n2009-11-28 html doc updated (antirez)\n2009-11-28 enable kqueue/kevent only for Mac OS X 10.6.x as it seems that 10.5.x has a broken implementation of this syscalls. (antirez)\n2009-11-28 TODO updated (antirez)\n2009-11-28 ZRANGEBYSCORE fuzzy test (antirez)\n2009-11-28 ZRANGEBYSCORE memory leak fixed, ZRANGEBYSCORE initial test added (antirez)\n2009-11-28 INFO refactored. Stack trace on memory corruption now dumps the same information as the INFO command (antirez)\n2009-11-28 ifdefs added to use kevent on Free Open and Net BSD as well. INFO and ae.c modified in order to report the multiplexing API in use (antirez)\n2009-11-28 Enabled object encoding for multiple keys in MSET. Added a test for memory leaks in test-redis.tcl when running on Mac OS X (antirez)\n2009-11-28 Merge branch 'kqueue' of git://github.com/mallipeddi/redis (antirez)\n2009-11-28 Changes to TODO list, commented a function in redis.c (antirez)\n2009-11-28 Added support for kqueue. (Harish Mallipeddi)\n2009-11-27 TODO updated (antirez)\n2009-11-26 zero length bulk data reading fixed in loadAppendOnlyFile() (antirez)\n2009-11-26 append only file fixes (antirez)\n2009-11-26 log rebuilding, random refactoring, work in progress please wait for an OK commit before to use this version (antirez)\n2009-11-24 DEBUG RELOAD implemented, and test-redis.tcl modified to use it to check for persistence consistency. (antirez)\n2009-11-24 Redis version set to 1.07 (antirez)\n2009-11-24 sorted sets saving fixed (antirez)\n2009-11-24 minor TODO change (antirez)\n2009-11-24 minor fix to avoid a false valgrind warning. (antirez)\n2009-11-23 epoll support enabled by default for Linux builds (antirez)\n2009-11-23 epoll module for ae.c implemented. Some more testing needed (antirez)\n2009-11-23 commented the HAVE_EPOLL test in config.h to allow compilation under Linux now that the epoll module is still missing (antirez)\n2009-11-23 ae_select module added (antirez)\n2009-11-23 ae.c now supports multiple polling API modules, even if only ae_select.c is implemented currently. Also adding and removing an event is now O(1). (antirez)\n2009-11-23 ae.c initial refactoring for epoll implementation (antirez)\n2009-11-21 version incremented up to 1.06 (antirez)\n2009-11-21 TODO aesthetic changes (antirez)\n2009-11-21 TODO updated with plans up to 1.5 (antirez)\n2009-11-21 SRANDMEMBER test (antirez)\n2009-11-21 Fixed a SORT memory leak that should never happen in practice (antirez)\n2009-11-21 SORT GET # implemented, with a test (antirez)\n2009-11-21 EXPIREAT test (antirez)\n2009-11-20 EXPIRE tests (antirez)\n2009-11-20 more RPOPLPUSH tests (antirez)\n2009-11-20 RPOPLPUSH tests added (antirez)\n2009-11-20 ZINCRBY return value fixed (antirez)\n2009-11-20 ZINCRSCOREBY => ZINCRBY (antirez)\n2009-11-19 ZINCRSCOREBY implemented (antirez)\n2009-11-19 writev() finally uncommented again (antirez)\n2009-11-19 redis-benchmark hopefully last bug with multi bulk reply fixed (antirez)\n2009-11-19 debug mode in redis-bench (antirez)\n2009-11-19 Use writev(2) if glue output buffers is disabled (antirez)\n2009-11-19 benchmark.c fixes (antirez)\n2009-11-18 more experiments with long replies, glue output buffer, and writev. (antirez)\n2009-11-18 benchmarking with different number of LRANGE elements. Ability to change the glue output buffer limit by #define (antirez)\n2009-11-18 more writev tests/work (antirez)\n2009-11-18 redis-benchmark multi bulk reply support hopefully fixed (antirez)\n2009-11-17 support for writev implemented but currently ifdef-ed in order to understan why I can't see the improvements expected. Btw code provided by Stefano Barbato (antirez)\n2009-11-17 multi-bulk reply support for redis-bench, and as a result LRANGE is not tested, providing some number for the tuning of multi-bulk requests performances server-side (antirez)\n2009-11-12 Solaris fix thanks to Alan Harder (antirez)\n2009-11-12 Merge git://github.com/ianxm/redis (antirez)\n2009-11-12 ZSCORE fixed, now returns NULL on missing key or missing element (antirez)\n2009-11-12 Redis test will not fail the SAVE test even if a background save is in progress (antirez)\n2009-11-12 LPOPPUSH renamed into RPOPLPUSH (antirez)\n2009-11-11 can select db num (ian)\n2009-11-11 Workaround for test-redis.tcl and Tcl 8.4.x about ZSCORE test (antirez)\n2009-11-11 Removed a long time warning compiling with recent GCC on Linux (antirez)\n2009-11-11 TODO updated (antirez)\n2009-11-11 LPUSHPOP first implementation (antirez)\n2009-11-10 Tcl script, make target, and redis.c changes to build the static symbol table automagically (antirez)\n2009-11-10 Implemented a much better lazy expiring algorithm for EXPIRE (antirez)\n2009-11-10 Fixed issue 92 in redis: redis-cli (nil) return value lacks CR/LF (antirez)\n2009-11-10 Minor TODO change with new expiring algorithm description. New expiring algorithm moved since it'll go in 1.1 (antirez)\n2009-11-04 redis-test is now a better Redis citizen, testing everything against DB 9 and 10 and only if this DBs are empty. (antirez)\n2009-11-04 fixed a refcounting bug with SORT ... STORE leading to random crashes (root)\n2009-11-04 masterauth option merged, thanks to Anthony Lauzon (antirez)\n2009-11-03 ZSets double to string serialization fixed (antirez)\n2009-11-03 client-libraries directory readded (antirez)\n2009-11-03 redis.tcl put at toplevel since it's uesd for the test-redis.tcl script (antirez)\n2009-11-03 client libs removed from Redis git (antirez)\n2009-11-03 redis-cli now accepts a -r (repeat) switch. Still there is a memory leaks to fix (antirez)\n2009-11-01 TODO updated again (antirez)\n2009-11-01 TODO updated (antirez)\n2009-11-01 redis-cli now makes clear when the returned string is an integer (antirez)\n2009-11-01 SORT STORE option (antirez)\n2009-11-01 now Redis prints DB stats just after the startup without to wait a second for the first report (antirez)\n2009-11-01 another fix for append only mode, now read-only operations are not appended (antirez)\n2009-11-01 appendfsync parsing in config file fixed. If you benchmarked Redis against different appendfsync options is time to try again ;) (antirez)\n2009-11-01 append only file loading fixed (antirez)\n2009-11-01 first version of append only file loading -- STILL BROKEN don't use it (antirez)\n2009-10-31 Fixed Issue 83:Using TYPE on a zset results in a malformed response from the Redis server (antirez)\n2009-10-31 Fixed compilation on Linux (antirez)\n2009-10-30 append only mode is now able to translate EXPIRE into EXPIREAT transparently (antirez)\n2009-10-30 appendfsync is now set to NO by default (antirez)\n2009-10-30 support for appendonly mode no, always, everysec (antirez)\n2009-10-30 first fix for append only mode (antirez)\n2009-10-30 Initial implementation of append-only mode. Loading still not implemented. (antirez)\n2009-10-30 EXPIRE behaviour changed a bit, a negative TTL or an EXPIREAT with unix time in the past will now delete the key. It seems saner to me than doing nothing. (antirez)\n2009-10-30 EXPIREAT implemented, will be useful for the append-only mode (antirez)\n2009-10-29 Fixed Issue 74 (ERR just returned on invalid password), now the error message is -ERR invalid password. (antirez)\n2009-10-29 Fixed issue 72 (SLAVEOF shutdowns redis-server on malformed reply) (antirez)\n2009-10-29 Fixed issue 77 (Incorrect time in log files) thanks to youwantalex (antirez)\n2009-10-29 Fixed  Issue 76 (redis-server crashes when it can't connect to MASTER and client connects to SLAVE) (antirez)\n2009-10-29 ZREMRANGEBYSCORE implemented. Remove a range of elements with score between min and max (antirez)\n2009-10-28 TODO changes and mostly theoretical minor skiplist change (antirez)\n2009-10-28 ZLEN renamed ZCARD for consistency with SCARD (antirez)\n2009-10-27 TODO reworked to reflect the real roadmap (antirez)\n2009-10-27 Fix for 'make 32bit' (antirez)\n2009-10-27 a fix for the solaris fix itself ;) (antirez)\n2009-10-27 More Solaris fixes (antirez)\n2009-10-27 A lot of ZSETs tests implemented, and a bug fixed thanks to this new tests (antirez)\n2009-10-27 zmalloc Solaris fixes thanks to Alan Harder (antirez)\n2009-10-27 ZSCORE implemented (antirez)\n2009-10-26 fix for ZRANGEBYSCORE (antirez)\n2009-10-26 ZRANGEBYSCORE implemented. Redis got range queries! (antirez)\n2009-10-26 A trivial change makes the new implementation O(log(N)) instead of O(log(N))+O(M) when there are M repeated scores! (antirez)\n2009-10-26 ZSET now saved on disk like any other type (antirez)\n2009-10-26 double serialization routines implemented (antirez)\n2009-10-26 ZSETs random fixes. Now the implementation appears to be pretty stable (antirez)\n2009-10-26 another leak fixed. Can't find more for now, but still a bug in ZSETs to fix (antirez)\n2009-10-26 ZSETs memory leak #1 solved, another one missing (antirez)\n2009-10-26 Fix for skiplists backward link (antirez)\n2009-10-26 Merged Solaris patches provided by Alan Harder (antirez)\n2009-10-26 backward support to skiplists for ZREVRANGE, still broken, committing since I've to merge the Solaris patches (antirez)\n2009-10-26 TODO updated (antirez)\n2009-10-26 ZREM implemented (antirez)\n2009-10-24 fix for ZADD in score update mode (antirez)\n2009-10-24 some work on ZADD against existing element (score update), still broken... (antirez)\n2009-10-23 zrange now starts to work. zadd still does not support update and will crash or leak or b000mmmmm (antirez)\n2009-10-23 zrange initial hack (not working for now) (antirez)\n2009-10-23 first skiplist fix, courtesy of valgrind (antirez)\n2009-10-23 zset symbols added to stack trace code. ZSets will simply crash at the moment (antirez)\n2009-10-23 more work on ZSETs and a new make target called 32bit to build i386 binaries on mac os x leopard (antirez)\n2009-10-23 initial skiplist implementation. Most memory checks removed and zmalloc() modified to fail with an error message and abort. Anyway Redis is not designed to recover from out of memory conditions. (antirez)\n2009-10-23 Fixed compilation in mac os x snow leopard when compiling a 32 bit binary. (antirez)\n2009-10-22 version incremented to 1.050 to distinguish from 1.001 stable and next stable versions with minor fixes (antirez)\n2009-10-21 TODO updated (antirez)\n2009-10-21 SRANDMEMBER added (antirez)\n2009-10-20 Imporant bug leading to data corruption fixed (NOT affecting stable distribution), Tcl client lib MSET/MSETNX implementation fixed, Added new tests for MSET and MSETNX in test-redis.tcl (antirez)\n2009-10-17 added multi-bulk protocol support to redis-cli and support for MSET and MSETNX (antirez)\n2009-10-17 MSET fixed, was not able to replace keys already set for a stupid bug (antirez)\n2009-10-16 some dead code removed (antirez)\n2009-10-16 multi bulk input protocol fixed (antirez)\n2009-10-16 MSET and MSETNX commands implemented (antirez)\n2009-10-07 undoed all the sds hacking that lead just to random bugs and no memory saving ;) (antirez)\n2009-10-07 initial multi-bulk query protocol, this will allow MSET and other interesting features. (antirez)\n2009-10-03 benchmark now outputs the right command line to shorten the TIME_WAIT interval on Mac OS X when keep alive is set (antirez)\n2009-10-02 Issue 69 fixed. Object integer encoding now works with replication and MONITORing again. (antirez)\n2009-09-18 LREM fixed, used to crash since the new object integer encoding is on the stage (antirez)\n2009-09-17 maxmemory didn't worked in 64 systems for values > 4GB since it used to be an unsigned int. Fixed (antirez)\n2009-09-10 incremented version number to 1.001, AKA Redis edge is no longer stable... (antirez)\n2009-09-10 in-memory specialized object encoding (for now 32 signed integers only) (antirez)\n2009-09-03 Latest doc changes for 1.0 (antirez)\n2009-09-03 Redis 1.0.0 release (antirez)\n2009-09-02 Redis version pushed to 1.0 (antirez)\n2009-09-02 Ruby client lib updated to the latest git version (antirez)\n2009-09-02 update-scala-client script added (antirez)\n2009-09-02 Scala client added thanks to Alejanro Crosa (antirez)\n2009-09-02 QuickStart added (antirez)\n2009-09-01 Fixed crash with only space and newline as command (issue 61), thanks to a guy having as nick \"fixxxerrr\" (antirez)\n2009-08-11 TODO list modified (antirez)\n2009-07-24 more snow leopard related fixes (for 32bit systems) (antirez)\n2009-07-24 fixed compilation with Snow Leopard, thanks to Lon Baker for providing SSH access to Snow Leopard box (antirez)\n2009-07-22 Fixed NetBSD compile problems (antirez)\n2009-07-17 now the size of the shared pool can be really modified via config, also the number of objects in the sharing pool is logged when the log level is set to debug. Thanks to Aman Gupta (antirez)\n2009-07-05 added utils/redis-copy.rb, a script that is able to copy data from one Redis server to another one on the fly. (antirez)\n2009-07-04 Applied three different patches thanks to Chris Lamb, one to fix compilation and get the IP register value on Linux IA64 and other systems. One in order to log the overcommit problem on the logs instead of the standard output when Redis is demonized. The latest in order to suggest a more consistent way in order to switch to 1 the memory overcommit Linux feature. (antirez)\n2009-07-03 bugfix: EXPIRE now propagates to the Slave. (antirez)\n2009-06-16 Redis version modified to 0.900 (antirez)\n2009-06-16 update-ruby-client script already points to ezmobius repo (antirez)\n2009-06-16 client libraries updated (antirez)\n2009-06-16 Redis release candidate 1 (antirez)\n2009-06-16 Better handling of background saving process killed or crashed (antirez)\n2009-06-14 number of keys info in INFO command thanks to Diego Rosario Brogna (antirez)\n2009-06-14 SPOP documented (antirez)\n2009-06-14 Clojure library thanks to Ragnar Dahlén (antirez)\n2009-06-10 It is now possible to specify - as config file name to read it from stdin (antirez)\n2009-06-10 sync with jodosha redis-rb (antirez)\n2009-06-10 Redis-rb sync (antirez)\n2009-06-10 max inline request raised again to 1024*1024*256 bytes (antirez)\n2009-06-10 max bytes in an inline command raised to 1024*1024 bytes, in order to allow for very large MGETs and still protect from client crashes (antirez)\n2009-06-08 SPOP implemented. Hash table resizing for Sets and Expires too. Changed the resize policy to play better with RANDOMKEY and SPOP. (antirez)\n2009-06-07 some minor changes to the backtrace code (antirez)\n2009-06-07 enable backtrace capabilities only for Linux and MacOSX (antirez)\n2009-06-07 Dump a backtrace on sigsegv/sigbus, original coded thanks to Diego Rosario Brogna, modified in order to work on different OSes and to enhance reliability (antirez)\n2009-06-06 Merge git://github.com/dierbro/redis (antirez)\n2009-06-06 add more output (hrothgar)\n2009-06-06 store static function pointer for a useful stack trace (hrothgar)\n2009-06-06 TODO updated (antirez)\n2009-06-06 Makefile dependencies updated (antirez)\n2009-06-05 Avoid a busy loop while sending very large replies against very fast links, this allows to be more responsive with other clients even under a KEY * against the loopback interface (antirez)\n2009-06-05 Kill the background saving process before performing SHUTDOWN to avoid races (antirez)\n2009-06-05 LREM now returns :0 for non existing keys (antirez)\n2009-06-05 - put some order in code - better output (hrothgar)\n2009-06-05 added config.h for #ifdef business isolation, added fstat64 for Mac OS X (antirez)\n2009-06-04 remove die() :-) (hrothgar)\n2009-06-04 add compile options to debug (hrothgar)\n2009-06-04 initial commit print stack trace (hrothgar)\n2009-06-04 initial commit print stack trace (hrothgar)\n2009-06-04 macosx specific zmalloc.c, uses malloc_size function in order to avoid to waste memory and time to put an additional header (antirez)\n2009-06-04 DEBUG OBJECT implemented (antirez)\n2009-06-04 backtrace support removed: unreliable stack trace :( (antirez)\n2009-06-04 initial backtrace dumping on sigsegv/sigbus + debug command (antirez)\n2009-06-03 Python lib updated (antirez)\n2009-06-03 shareobjectspoolsize implemented in reds.conf, in order to control the pool size when object sharing is on (antirez)\n2009-05-30 Erlang client updated (antirez)\n2009-05-30 Python client library updated (antirez)\n2009-05-29 Redis-rb minor bool convertion fix (antirez)\n2009-05-29 ruby library client is not Redis-rb merged with RubyRedis \"engine\" by Brian McKinney (antirez)\n2009-05-28 __P completely removed from pqsort.c/h (antirez)\n2009-05-28 another minor fix for Solaris boxes (antirez)\n2009-05-28 minor fix for Solaris boxes (antirez)\n2009-05-28 minor fix for Solaris boxes (antirez)\n2009-05-27 maxmemory implemented (antirez)\n2009-05-26 Redis git version modified to 0.101 in order to distinguish that from the latest tar.gz via INFO ;) (antirez)\n2009-05-26 Redis 0.100 released (antirez)\n2009-05-26 client libraries synched in git (antirez)\n2009-05-26 ignore gcc warning about write() return code not checked. It is esplicitily this way since the \"max number of clients reached\" is a best-effort error (antirez)\n2009-05-26 max bytes of a received command enlarged from 1k to 16k (antirez)\n2009-05-26 RubyRedis: set TCP_NODELAY TCP socket option to to disable the neagle algorithm. Makes a huge difference under some OS, notably Linux (antirez)\n2009-05-25 maxclients implemented, see redis.conf for details (antirez)\n2009-05-25 INFO command now reports replication info (antirez)\n2009-05-25 minor fix to RubyRedis about bulk commands sent without arguments (antirez)\n2009-05-24 Warns if using the default config (antirez)\n2009-05-24 Issue with redis-client used in scripts solved, now to check if the latest argument must come from standard input we do not check that stdin is or not a tty but the command arity (antirez)\n2009-05-23 RubyRedis: now sets are returned as arrays again, and not as Set objects (antirez)\n2009-05-23 SLAVEOF command documented (antirez)\n2009-05-23 SLAVEOF command implemented for replication remote control (antirez)\n2009-05-22 Fix: no connection timeout for the master! (antirez)\n2009-05-22 replication slave timeout when receiving the initial bulk data set to 3600 seconds, now that replication is non-blocking the server must save the db before to start the async replication and this can take a lot of time with huge datasets (antirez)\n2009-05-22 README tutorial now reflects the new proto (antirez)\n2009-05-22 critical bug about glueoutputbuffers=yes fixed. Under load and with pipelining and clients disconnecting on the middle of the chat with the server, Redis could block. Now it's ok (antirez)\n2009-05-22 TTL command doc added (antirez)\n2009-05-22 TTL command implemented (antirez)\n2009-05-22 S*STORE now return the cardinality of the resulting set (antirez)\n2009-05-22 rubyredis more compatible with Redis-rb (antirez)\n2009-05-21 minor indentation fix (antirez)\n2009-05-21 timeout support and Redis-rb compatibility aliases implemented in RubyRedis (antirez)\n2009-05-21 RubyRedis info postprocessor rewritten in a more functional way (antirez)\n2009-05-21 dead code removed from RubyRedis (antirez)\n2009-05-21 command postprocessing implemented into RubyRedis (antirez)\n2009-05-20 Automagically reconnection of RubyRedis (antirez)\n2009-05-20 RubyRedis: Array alike operators implemented (antirez)\n2009-05-20 random testing code removed (antirez)\n2009-05-20 RubyRedis DB selection forced at object creation (antirez)\n2009-05-20 Initial version of an alternative Ruby client added (antirez)\n2009-05-20 SDIFF / SDIFFSTORE added to doc (antirez)\n2009-05-20 Aman Gupta changes merged (antirez)\n2009-05-20 Merge git://github.com/tmm1/redis (antirez)\n2009-05-19 Allow timeout=0 config to disable client timeouts (Aman Gupta)\n2009-05-19 Partial qsort implemented in SORT command, only when both BY and LIMIT is used. minor fix for a warning compiling under Linux. (antirez)\n2009-05-19 psort.c/h added. This is a partial qsort implementation that Redis will use when SORT+LIMIT is requested (antirez)\n2009-05-17 Fix SINTER/UNIONSTORE to allow for &=/|= style operations (i.e. SINTERSTORE set1 set1 set2) (Aman Gupta)\n2009-05-17 Optimize SDIFF to return as soon as the result set is empty (Aman Gupta)\n2009-05-17 SDIFF/SDIFFSTORE implemnted unifying it with the implementation of SUNION/SUNIONSTORE (antirez)\n2009-05-11 timestamp in log lines (antirez)\n2009-05-11 Python client updated pushing from Ludo's repository (antirez)\n2009-05-11 disconnect when we cannot read from the socket (Ludovico Magnocavallo)\n2009-05-11 benchmark utility now supports random keys (antirez)\n2009-05-10 minor doc changes (antirez)\n2009-05-09 added tests for vararg DEL (antirez)\n2009-05-09 DEL is now a vararg, IMPORTANT: memory leak fixed in loading DB code (antirez)\n2009-05-09 doc changes (antirez)\n2009-05-09 CPP client added thanks to Brian Hammond (antirez)\n2009-05-06 Infinite number of arguments for MGET and all the other commands (antirez)\n2009-05-04 Warns if /proc/sys/vm/overcommit_memory is set to 0 on Linux. Also make sure to don't resize the hash tables while the child process is saving in order to avoid copy-on-write of memory pages (antirez)\n2009-04-30 zmalloc fix, return NULL or real malloc failure (antirez)\n2009-04-30 more fixes for dict.c and the 150 million keys limit (antirez)\n2009-04-30 dict.c modified to be able to handle more than 150,000,000 keys (antirez)\n2009-04-29 fuzz stresser implemented in redis-test (antirez)\n2009-04-29 fixed for HT resize check 32bits overflow (antirez)\n2009-04-29 Check for fork() failure in background saving (antirez)\n2009-04-29 fix for the LZF off-by-one bug added (antirez)\n2009-04-28 print bytes used at exit on SHUTDOWN (antirez)\n2009-04-28 SMOVE test added (antirez)\n2009-04-28 SMOVE command implemented (antirez)\n2009-04-28 less CPU usage in command parsing, case insensitive config directives (antirez)\n2009-04-28 GETSET command doc added (antirez)\n2009-04-28 GETSET tests (antirez)\n2009-04-28 GETSET implemented (antirez)\n2009-04-27 ability to specify a different file name for the DB (antirez)\n2009-04-27 log file parsing code improved a bit (antirez)\n2009-04-27 bgsave_in_progress field in INFO output (antirez)\n2009-04-27 INCRBY/DECRBY now support 64bit increments, with tests (antirez)\n2009-04-23 RANDOMKEY regression test added (antirez)\n2009-04-23 dictGetRandomKey bug fixed, RANDOMKEY will not block the server anymore (antirez)\n2009-04-22 FLUSHALL/FLUSHDB no longer sync on disk. Just increment the dirty counter by the number of elements removed, that will probably trigger a background saving operation (antirez)\n2009-04-21 forgot to comment testing code in PHP lib. Now it is ok (antirez)\n2009-04-21 PHP client ported to PHP5 and fixed (antirez)\n2009-04-21 doc update (antirez)\n2009-04-20 Non blocking replication (finally!). C-side linked lists API improved. (antirez)\n2009-04-19 SUNION, SUNIONSTORE, Initial work on non blocking replication (antirez)\n2009-04-10 Redis 0.091 released (antirez)\n2009-04-10 SINTER/SINTERSTORE/SLEMENTS fix: misisng keys are now not errors, but just like empty sets (antirez)\n2009-04-09 doc changes (antirez)\n2009-04-08 TODO changes, minor change to default redis.conf (antirez)\n2009-04-08 html doc updated (antirez)\n2009-04-08 library clients update scripts (antirez)\n2009-04-08 Ruby client updated (antirez)\n2009-04-08 Lua client updated (antirez)\n2009-04-08 Changelog updated (antirez)\n2009-04-08 Merge git://github.com/ludoo/redis (antirez)\n2009-04-08 add expire command to the php lib (Ludovico Magnocavallo)\n2009-04-08 fix decode bug, add flush and info commands (Ludovico Magnocavallo)\n2009-04-07 Rearrange redisObject struct to reduce memory usage in 64bit environments (as recommended http://groups.google.com/group/redis-db/msg/68f5a743f8f4e287) (Bob Potter)\n2009-04-07 ruby19 compat: use each_line on string (Bob Potter)\n2009-04-07 64bit fixes for usedmemory (Bob Potter)\n2009-04-08 RANDOMKEY issue 26 fixed, generic test + regression added (antirez)\n2009-04-06 Don't accept SAVE if BGSAVE is in progress (antirez)\n2009-04-06 add expire command to the python lib (Ludovico Magnocavallo)\n2009-04-03 persistent EXPIRE (antirez)\n2009-04-03 dirty increment was missing in two points. TODO updated (antirez)\n2009-04-02 LZF configured to initalize the HT in order to be determinsitic and play well with valgrind (antirez)\n2009-04-02 fix select test (Ludovico Magnocavallo)\n2009-04-02 fix trailing cr+nl in values (Ludovico Magnocavallo)\n2009-04-02 compression/decompression of large values on disk now working (antirez)\n2009-04-02 disable LZF compression since it's not able to load the DB for now, the load part is missing (antirez)\n2009-04-02 new LZF files added (antirez)\n2009-04-02 Fixed issue 23 about AUTH (antirez)\n2009-04-02 Issue 22 fixed (antirez)\n2009-04-01 non-lazy expired keys purging implemented (antirez)\n2009-04-01 fastlz dependence removed (antirez)\n2009-04-01 Initial implementation of EXPIRE (antirez)\n2009-03-30 TODO updated (antirez)\n2009-03-30 changelog added (antirez)\n2009-03-28 redis-sha1 utility added (antirez)\n2009-03-28 Integer encoding implemented in dump file. Doc updated (antirez)\n2009-03-27 feature macros defined to play well with C99 (antirez)\n2009-03-27 feature macros defined to play well with C99 (antirez)\n2009-03-27 now Redis is C99-ok (antirez)\n2009-03-27 IMPORTANT FIX: new dump format implementation was broken. Now it's ok but tests for the 32-bit case values are needed (antirez)\n2009-03-27 ANSI-C compatibility changes (antirez)\n2009-03-27 Ruby client library updated. Important changes in this new version! (antirez)\n2009-03-26 Lua client added thanks to Daniele Alessandri (antirez)\n2009-03-26 Lua client added thanks to Daniele Alessandri (antirez)\n2009-03-26 AUTH merged from Brian Hammond fork, reworked a bit to fix minor problems (antirez)\n2009-03-25 Adds AUTH command. (Brian Hammond)\n2009-03-25 Nasty bug of the new DB format fixed, objects sharing implemented (antirez)\n2009-03-25 doc update (antirez)\n2009-03-25 Erlang client synched with Valentiono's repo (antirez)\n2009-03-25 New file dump format, perl client library added (antirez)\n2009-03-25 New protocol fix for LREM (antirez)\n2009-03-24 two typos fixed (antirez)\n2009-03-24 Now the Redis test uses the proper Tcl client library (antirez)\n2009-03-24 Tcl client library (antirez)\n2009-03-24 redis-benchmark sync with the new protocol (antirez)\n2009-03-24 git mess :) (Ludovico Magnocavallo)\n2009-03-24 sync python client to the new protocol (Ludovico Magnocavallo)\n2009-03-24 protocol fix in SORT reply with null elements (antirez)\n2009-03-24 protocol doc changed (antirez)\n2009-03-24 Server replies now in the new format, test-redis.tcl and redis-cli modified accordingly (antirez)\n2009-03-24 Python client library updated, thanks to Ludo! (antirez)\n2009-03-24 random tested mode for test-redis.tcl, minor other stuff, version switched to 0.8 (antirez)\n2009-03-23 Now MONITOR/SYNC cannot be issued multiple times (antirez)\n2009-03-23 MONITOR command implemented. (antirez)\n2009-03-23 lucsky changes imported. pid file path can now be configured, redis-cli fixes (antirez)\n2009-03-23 Merge git://github.com/lucsky/redis (antirez)\n2009-03-23 another missing free->zfree replacement fixed. Thanks to Ludo (antirez)\n2009-03-23 Fixed redis-cli readLine loop to correctly handle EOF. (Luc Heinrich)\n2009-03-23 Display the port on server startup. (Luc Heinrich)\n2009-03-23 Allow to specify the pid file from the config file. (Luc Heinrich)\n2009-03-23 Added gitignore file. (Luc Heinrich)\n2009-03-22 MGET tests added (antirez)\n2009-03-22 doc changes (antirez)\n2009-03-22 added doc for MGET (antirez)\n2009-03-22 redis-cli now checks the arity of vararg commnads (antirez)\n2009-03-22 INFO fixed, MGET implemented, redis-cli implements INFO/MGET (antirez)\n2009-03-22 first commit (antirez)"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.0107421875,
          "content": "See README\n"
        },
        {
          "name": "MANIFESTO",
          "type": "blob",
          "size": 3.943359375,
          "content": "[Note: this is the Redis manifesto, for general information about\n       installing and running Redis read the README file instead.]\n\nRedis Manifesto\n===============\n\n1 - A DSL for Abstract Data Types. Redis is a DSL (Domain Specific Language) that manipulates abstract data types and implemented as a TCP daemon. Commands manipulate a key space where keys are binary-safe strings and values are different kinds of abstract data types. Every data type represents an abstract version of a fundamental data structure. For instance Redis Lists are an abstract representation of linked lists. In Redis, the essence of a data type isn't just the kind of operations that the data types support, but also the space and time complexity of the data type and the operations performed upon it.\n\n2 - Memory storage is #1. The Redis data set, composed of defined key-value pairs, is primarily stored in the computer's memory. The amount of memory in all kinds of computers, including entry-level servers, is increasing significantly each year. Memory is fast, and allows Redis to have very predictable performance.  Datasets composed of 10k or 40 millions keys will perform similarly.  Complex data types like Redis Sorted Sets are easy to implement and manipulate in memory with good performance, making Redis very simple.  Redis will continue to explore alternative options (where data can be optionally stored on disk, say) but the main goal of the project remains the development of an in-memory database.\n\n3 - Fundamental data structures for a fundamental API. The Redis API is a direct consequence of fundamental data structures. APIs can often be arbitrary but not an API that resembles the nature of fundamental data structures. If we ever meet intelligent life forms from another part of the universe, they'll likely know, understand and recognize the same basic data structures we have in our computer science books. Redis will avoid intermediate layers in API, so that the complexity is obvious and more complex operations can be performed as the sum of the basic operations.\n\n4 - Code is like a poem; it's not just something we write to reach some practical result.  Sometimes people that are far from the Redis philosophy suggest using other  code written by other authors (frequently in other languages) in order to implement something Redis currently lacks. But to us this is like if Shakespeare decided to end Enrico IV using the Paradiso from the Divina Commedia. Is using any external code a bad idea? Not at all. Like in \"One Thousand and One Nights\" smaller self contained stories are embedded in a bigger story, we'll be happy to use beautiful self contained libraries when needed. At the same time, when writing the Redis story we're trying to write smaller stories that will fit in to other code.\n\n5 - We're against complexity. We believe designing systems is a fight against complexity. We'll accept to fight the complexity when it's worthwhile but we'll try hard to recognize when a small feature is not worth 1000s of lines of code. Most of the time the best way to fight complexity is by not creating it at all.\n\n6 - Two levels of API. The Redis API has two levels: 1) a subset of the API fits naturally into a distributed version of Redis and 2) a more complex API that supports multi-key operations. Both are useful if used judiciously but there's no way to make the more complex multi-keys API distributed in an opaque way without violating our other principles. We don't want to provide the illusion of something that will work magically when actually it can't in all cases. Instead we'll provide commands to quickly migrate keys from one instance to another to perform multi-key operations and expose the tradeoffs to the user.\n\n7 - We optimize for joy. We believe writing code is a lot of hard work, and the only way it can be worth is by enjoying it.  When there is no longer joy in writing code, the best thing to do is stop. To prevent this, we'll avoid taking paths that will make Redis less of a joy to develop.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.1474609375,
          "content": "# Top level makefile, the real shit is at src/Makefile\n\ndefault: all\n\n.DEFAULT:\n\tcd src && $(MAKE) $@\n\ninstall:\n\tcd src && $(MAKE) $@\n\n.PHONY: install\n"
        },
        {
          "name": "ORIGINAL_README",
          "type": "blob",
          "size": 3.9638671875,
          "content": "Where to find complete Redis documentation?\n-------------------------------------------\n\nThis README is just a fast \"quick start\" document. You can find more detailed\ndocumentation at http://redis.io\n\nBuilding Redis\n--------------\n\nRedis can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD.\nWe support big endian and little endian architectures.\n\nIt may compile on Solaris derived systems (for instance SmartOS) but our\nsupport for this platform is \"best effort\" and Redis is not guaranteed to\nwork as well as in Linux, OSX, and *BSD there.\n\nIt is as simple as:\n\n    % make\n\nYou can run a 32 bit Redis binary using:\n\n    % make 32bit\n\nAfter building Redis is a good idea to test it, using:\n\n    % make test\n\nNOTE: if after building Redis with a 32 bit target you need to rebuild it\n      with a 64 bit target you need to perform a \"make clean\" in the root\n      directory of the Redis distribution.\n\nAllocator\n---------\n\nSelecting a non-default memory allocator when building Redis is done by setting\nthe `MALLOC` environment variable. Redis is compiled and linked against libc\nmalloc by default, with the exception of jemalloc being the default on Linux\nsystems. This default was picked because jemalloc has proven to have fewer\nfragmentation problems than libc malloc.\n\nTo force compiling against libc malloc, use:\n\n    % make MALLOC=libc\n\nTo compile against jemalloc on Mac OS X systems, use:\n\n    % make MALLOC=jemalloc\n\nVerbose build\n-------------\n\nRedis will build with a user friendly colorized output by default.\nIf you want to see a more verbose output use the following:\n\n    % make V=1\n\nRunning Redis\n-------------\n\nTo run Redis with the default configuration just type:\n\n    % cd src\n    % ./redis-server\n    \nIf you want to provide your redis.conf, you have to run it using an additional\nparameter (the path of the configuration file):\n\n    % cd src\n    % ./redis-server /path/to/redis.conf\n\nIt is possible to alter the Redis configuration passing parameters directly\nas options using the command line. Examples:\n\n    % ./redis-server --port 9999 --slaveof 127.0.0.1 6379\n    % ./redis-server /etc/redis/6379.conf --loglevel debug\n\nAll the options in redis.conf are also supported as options using the command\nline, with exactly the same name.\n\nPlaying with Redis\n------------------\n\nYou can use redis-cli to play with Redis. Start a redis-server instance,\nthen in another terminal try the following:\n\n    % cd src\n    % ./redis-cli\n    redis> ping\n    PONG\n    redis> set foo bar\n    OK\n    redis> get foo\n    \"bar\"\n    redis> incr mycounter\n    (integer) 1\n    redis> incr mycounter\n    (integer) 2\n    redis> \n\nYou can find the list of all the available commands here:\n\n    http://redis.io/commands\n\nInstalling Redis\n-----------------\n\nIn order to install Redis binaries into /usr/local/bin just use:\n\n    % make install\n\nYou can use \"make PREFIX=/some/other/directory install\" if you wish to use a\ndifferent destination.\n\nMake install will just install binaries in your system, but will not configure\ninit scripts and configuration files in the appropriate place. This is not\nneeded if you want just to play a bit with Redis, but if you are installing\nit the proper way for a production system, we have a script doing this\nfor Ubuntu and Debian systems:\n\n    % cd utils\n    % ./install_server\n\nThe script will ask you a few questions and will setup everything you need\nto run Redis properly as a background daemon that will start again on\nsystem reboots.\n\nYou'll be able to stop and start Redis using the script named\n/etc/init.d/redis_<portnumber>, for instance /etc/init.d/redis_6379.\n\nCode contributions\n---\n\nNote: by contributing code to the Redis project in any form, including sending\na pull request via Github, a code fragment or patch via private email or\npublic discussion groups, you agree to release your code under the terms\nof the BSD license that you can find in the COPYING file included in the Redis\nsource distribution.\n\nPlease see the CONTRIBUTING file in this source distribution for more\ninformation.\n\nEnjoy!\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 0.6083984375,
          "content": "关于\n=========\n\n本项目是注释版的 Redis 2.6 源码。\n\n原始源码来自： https://github.com/antirez/redis \n\n基本上所有单机 Redis 模块都已经注释了：只有 SENTINEL 模块、REPLICATION 模块、 CLUSTER 模块和一些小的辅助模块没有注释。\n\n除了一些空格/空行/缩进方面的调整外，没有对原始代码进行其他改动。\n\n这份注释源码是《Redis 设计与实现》一书的附属项目，可以到 www.redisbook.com 阅读本书。\n\nhave fun!\n\n| huangz\n| 2013.3.5 \n\n----\n\n另有 Redis 3.0 源码注释提供： https://github.com/huangz1990/redis-3.0-annotated\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "redis.conf",
          "type": "blob",
          "size": 23.5146484375,
          "content": "# Redis configuration file example\n\n# Note on units: when memory size is needed, it is possible to specify\n# it in the usual form of 1k 5GB 4M and so forth:\n#\n# 1k => 1000 bytes\n# 1kb => 1024 bytes\n# 1m => 1000000 bytes\n# 1mb => 1024*1024 bytes\n# 1g => 1000000000 bytes\n# 1gb => 1024*1024*1024 bytes\n#\n# units are case insensitive so 1GB 1Gb 1gB are all the same.\n\n# By default Redis does not run as a daemon. Use 'yes' if you need it.\n# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.\ndaemonize no\n\n# When running daemonized, Redis writes a pid file in /var/run/redis.pid by\n# default. You can specify a custom pid file location here.\npidfile /var/run/redis.pid\n\n# Accept connections on the specified port, default is 6379.\n# If port 0 is specified Redis will not listen on a TCP socket.\nport 6379\n\n# If you want you can bind a single interface, if the bind option is not\n# specified all the interfaces will listen for incoming connections.\n#\n# bind 127.0.0.1\n\n# Specify the path for the unix socket that will be used to listen for\n# incoming connections. There is no default, so Redis will not listen\n# on a unix socket when not specified.\n#\n# unixsocket /tmp/redis.sock\n# unixsocketperm 755\n\n# Close the connection after a client is idle for N seconds (0 to disable)\ntimeout 0\n\n# Set server verbosity to 'debug'\n# it can be one of:\n# debug (a lot of information, useful for development/testing)\n# verbose (many rarely useful info, but not a mess like the debug level)\n# notice (moderately verbose, what you want in production probably)\n# warning (only very important / critical messages are logged)\nloglevel notice\n\n# Specify the log file name. Also 'stdout' can be used to force\n# Redis to log on the standard output. Note that if you use standard\n# output for logging but daemonize, logs will be sent to /dev/null\nlogfile stdout\n\n# To enable logging to the system logger, just set 'syslog-enabled' to yes,\n# and optionally update the other syslog parameters to suit your needs.\n# syslog-enabled no\n\n# Specify the syslog identity.\n# syslog-ident redis\n\n# Specify the syslog facility.  Must be USER or between LOCAL0-LOCAL7.\n# syslog-facility local0\n\n# Set the number of databases. The default database is DB 0, you can select\n# a different one on a per-connection basis using SELECT <dbid> where\n# dbid is a number between 0 and 'databases'-1\ndatabases 16\n\n################################ SNAPSHOTTING  #################################\n#\n# Save the DB on disk:\n#\n#   save <seconds> <changes>\n#\n#   Will save the DB if both the given number of seconds and the given\n#   number of write operations against the DB occurred.\n#\n#   In the example below the behaviour will be to save:\n#   after 900 sec (15 min) if at least 1 key changed\n#   after 300 sec (5 min) if at least 10 keys changed\n#   after 60 sec if at least 10000 keys changed\n#\n#   Note: you can disable saving at all commenting all the \"save\" lines.\n#\n#   It is also possible to remove all the previously configured save\n#   points by adding a save directive with a single empty string argument\n#   like in the following example:\n#\n#   save \"\"\n\nsave 900 1\nsave 300 10\nsave 60 10000\n\n# By default Redis will stop accepting writes if RDB snapshots are enabled\n# (at least one save point) and the latest background save failed.\n# This will make the user aware (in an hard way) that data is not persisting\n# on disk properly, otherwise chances are that no one will notice and some\n# distater will happen.\n#\n# If the background saving process will start working again Redis will\n# automatically allow writes again.\n#\n# However if you have setup your proper monitoring of the Redis server\n# and persistence, you may want to disable this feature so that Redis will\n# continue to work as usually even if there are problems with disk,\n# permissions, and so forth.\nstop-writes-on-bgsave-error yes\n\n# Compress string objects using LZF when dump .rdb databases?\n# For default that's set to 'yes' as it's almost always a win.\n# If you want to save some CPU in the saving child set it to 'no' but\n# the dataset will likely be bigger if you have compressible values or keys.\nrdbcompression yes\n\n# Since verison 5 of RDB a CRC64 checksum is placed at the end of the file.\n# This makes the format more resistant to corruption but there is a performance\n# hit to pay (around 10%) when saving and loading RDB files, so you can disable it\n# for maximum performances.\n#\n# RDB files created with checksum disabled have a checksum of zero that will\n# tell the loading code to skip the check.\nrdbchecksum yes\n\n# The filename where to dump the DB\ndbfilename dump.rdb\n\n# The working directory.\n#\n# The DB will be written inside this directory, with the filename specified\n# above using the 'dbfilename' configuration directive.\n# \n# Also the Append Only File will be created inside this directory.\n# \n# Note that you must specify a directory here, not a file name.\ndir ./\n\n################################# REPLICATION #################################\n\n# Master-Slave replication. Use slaveof to make a Redis instance a copy of\n# another Redis server. Note that the configuration is local to the slave\n# so for example it is possible to configure the slave to save the DB with a\n# different interval, or to listen to another port, and so on.\n#\n# slaveof <masterip> <masterport>\n\n# If the master is password protected (using the \"requirepass\" configuration\n# directive below) it is possible to tell the slave to authenticate before\n# starting the replication synchronization process, otherwise the master will\n# refuse the slave request.\n#\n# masterauth <master-password>\n\n# When a slave lost the connection with the master, or when the replication\n# is still in progress, the slave can act in two different ways:\n#\n# 1) if slave-serve-stale-data is set to 'yes' (the default) the slave will\n#    still reply to client requests, possibly with out of date data, or the\n#    data set may just be empty if this is the first synchronization.\n#\n# 2) if slave-serve-stale data is set to 'no' the slave will reply with\n#    an error \"SYNC with master in progress\" to all the kind of commands\n#    but to INFO and SLAVEOF.\n#\nslave-serve-stale-data yes\n\n# You can configure a slave instance to accept writes or not. Writing against\n# a slave instance may be useful to store some ephemeral data (because data\n# written on a slave will be easily deleted after resync with the master) but\n# may also cause problems if clients are writing to it because of a\n# misconfiguration.\n#\n# Since Redis 2.6 by default slaves are read-only.\n#\n# Note: read only slaves are not designed to be exposed to untrusted clients\n# on the internet. It's just a protection layer against misuse of the instance.\n# Still a read only slave exports by default all the administrative commands\n# such as CONFIG, DEBUG, and so forth. To a limited extend you can improve\n# security of read only slaves using 'rename-command' to shadow all the\n# administrative / dangerous commands.\nslave-read-only yes\n\n# Slaves send PINGs to server in a predefined interval. It's possible to change\n# this interval with the repl_ping_slave_period option. The default value is 10\n# seconds.\n#\n# repl-ping-slave-period 10\n\n# The following option sets a timeout for both Bulk transfer I/O timeout and\n# master data or ping response timeout. The default value is 60 seconds.\n#\n# It is important to make sure that this value is greater than the value\n# specified for repl-ping-slave-period otherwise a timeout will be detected\n# every time there is low traffic between the master and the slave.\n#\n# repl-timeout 60\n\n# The slave priority is an integer number published by Redis in the INFO output.\n# It is used by Redis Sentinel in order to select a slave to promote into a\n# master if the master is no longer working correctly.\n#\n# A slave with a low priority number is considered better for promotion, so\n# for instance if there are three slaves with priority 10, 100, 25 Sentinel will\n# pick the one wtih priority 10, that is the lowest.\n#\n# However a special priority of 0 marks the slave as not able to perform the\n# role of master, so a slave with priority of 0 will never be selected by\n# Redis Sentinel for promotion.\n#\n# By default the priority is 100.\nslave-priority 100\n\n################################## SECURITY ###################################\n\n# Require clients to issue AUTH <PASSWORD> before processing any other\n# commands.  This might be useful in environments in which you do not trust\n# others with access to the host running redis-server.\n#\n# This should stay commented out for backward compatibility and because most\n# people do not need auth (e.g. they run their own servers).\n# \n# Warning: since Redis is pretty fast an outside user can try up to\n# 150k passwords per second against a good box. This means that you should\n# use a very strong password otherwise it will be very easy to break.\n#\n# requirepass foobared\n\n# Command renaming.\n#\n# It is possible to change the name of dangerous commands in a shared\n# environment. For instance the CONFIG command may be renamed into something\n# of hard to guess so that it will be still available for internal-use\n# tools but not available for general clients.\n#\n# Example:\n#\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\n#\n# It is also possible to completely kill a command renaming it into\n# an empty string:\n#\n# rename-command CONFIG \"\"\n\n################################### LIMITS ####################################\n\n# Set the max number of connected clients at the same time. By default\n# this limit is set to 10000 clients, however if the Redis server is not\n# able ot configure the process file limit to allow for the specified limit\n# the max number of allowed clients is set to the current file limit\n# minus 32 (as Redis reserves a few file descriptors for internal uses).\n#\n# Once the limit is reached Redis will close all the new connections sending\n# an error 'max number of clients reached'.\n#\n# maxclients 10000\n\n# Don't use more memory than the specified amount of bytes.\n# When the memory limit is reached Redis will try to remove keys\n# accordingly to the eviction policy selected (see maxmemmory-policy).\n#\n# If Redis can't remove keys according to the policy, or if the policy is\n# set to 'noeviction', Redis will start to reply with errors to commands\n# that would use more memory, like SET, LPUSH, and so on, and will continue\n# to reply to read-only commands like GET.\n#\n# This option is usually useful when using Redis as an LRU cache, or to set\n# an hard memory limit for an instance (using the 'noeviction' policy).\n#\n# WARNING: If you have slaves attached to an instance with maxmemory on,\n# the size of the output buffers needed to feed the slaves are subtracted\n# from the used memory count, so that network problems / resyncs will\n# not trigger a loop where keys are evicted, and in turn the output\n# buffer of slaves is full with DELs of keys evicted triggering the deletion\n# of more keys, and so forth until the database is completely emptied.\n#\n# In short... if you have slaves attached it is suggested that you set a lower\n# limit for maxmemory so that there is some free RAM on the system for slave\n# output buffers (but this is not needed if the policy is 'noeviction').\n#\n# maxmemory <bytes>\n\n# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory\n# is reached? You can select among five behavior:\n# \n# volatile-lru -> remove the key with an expire set using an LRU algorithm\n# allkeys-lru -> remove any key accordingly to the LRU algorithm\n# volatile-random -> remove a random key with an expire set\n# allkeys-random -> remove a random key, any key\n# volatile-ttl -> remove the key with the nearest expire time (minor TTL)\n# noeviction -> don't expire at all, just return an error on write operations\n# \n# Note: with all the kind of policies, Redis will return an error on write\n#       operations, when there are not suitable keys for eviction.\n#\n#       At the date of writing this commands are: set setnx setex append\n#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd\n#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby\n#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby\n#       getset mset msetnx exec sort\n#\n# The default is:\n#\n# maxmemory-policy volatile-lru\n\n# LRU and minimal TTL algorithms are not precise algorithms but approximated\n# algorithms (in order to save memory), so you can select as well the sample\n# size to check. For instance for default Redis will check three keys and\n# pick the one that was used less recently, you can change the sample size\n# using the following configuration directive.\n#\n# maxmemory-samples 3\n\n############################## APPEND ONLY MODE ###############################\n\n# By default Redis asynchronously dumps the dataset on disk. This mode is\n# good enough in many applications, but an issue with the Redis process or\n# a power outage may result into a few minutes of writes lost (depending on\n# the configured save points).\n#\n# The Append Only File is an alternative persistence mode that provides\n# much better durability. For instance using the default data fsync policy\n# (see later in the config file) Redis can lose just one second of writes in a\n# dramatic event like a server power outage, or a single write if something\n# wrong with the Redis process itself happens, but the operating system is\n# still running correctly.\n#\n# AOF and RDB persistence can be enabled at the same time without problems.\n# If the AOF is enabled on startup Redis will load the AOF, that is the file\n# with the better durability guarantees.\n#\n# Please check http://redis.io/topics/persistence for more information.\n\nappendonly no\n\n# The name of the append only file (default: \"appendonly.aof\")\n# appendfilename appendonly.aof\n\n# The fsync() call tells the Operating System to actually write data on disk\n# instead to wait for more data in the output buffer. Some OS will really flush \n# data on disk, some other OS will just try to do it ASAP.\n#\n# Redis supports three different modes:\n#\n# no: don't fsync, just let the OS flush the data when it wants. Faster.\n# always: fsync after every write to the append only log . Slow, Safest.\n# everysec: fsync only one time every second. Compromise.\n#\n# The default is \"everysec\" that's usually the right compromise between\n# speed and data safety. It's up to you to understand if you can relax this to\n# \"no\" that will let the operating system flush the output buffer when\n# it wants, for better performances (but if you can live with the idea of\n# some data loss consider the default persistence mode that's snapshotting),\n# or on the contrary, use \"always\" that's very slow but a bit safer than\n# everysec.\n#\n# More details please check the following article:\n# http://antirez.com/post/redis-persistence-demystified.html\n#\n# If unsure, use \"everysec\".\n\n# appendfsync always\nappendfsync everysec\n# appendfsync no\n\n# When the AOF fsync policy is set to always or everysec, and a background\n# saving process (a background save or AOF log background rewriting) is\n# performing a lot of I/O against the disk, in some Linux configurations\n# Redis may block too long on the fsync() call. Note that there is no fix for\n# this currently, as even performing fsync in a different thread will block\n# our synchronous write(2) call.\n#\n# In order to mitigate this problem it's possible to use the following option\n# that will prevent fsync() from being called in the main process while a\n# BGSAVE or BGREWRITEAOF is in progress.\n#\n# This means that while another child is saving the durability of Redis is\n# the same as \"appendfsync none\", that in practical terms means that it is\n# possible to lost up to 30 seconds of log in the worst scenario (with the\n# default Linux settings).\n# \n# If you have latency problems turn this to \"yes\". Otherwise leave it as\n# \"no\" that is the safest pick from the point of view of durability.\nno-appendfsync-on-rewrite no\n\n# Automatic rewrite of the append only file.\n# Redis is able to automatically rewrite the log file implicitly calling\n# BGREWRITEAOF when the AOF log size will growth by the specified percentage.\n# \n# This is how it works: Redis remembers the size of the AOF file after the\n# latest rewrite (or if no rewrite happened since the restart, the size of\n# the AOF at startup is used).\n#\n# This base size is compared to the current size. If the current size is\n# bigger than the specified percentage, the rewrite is triggered. Also\n# you need to specify a minimal size for the AOF file to be rewritten, this\n# is useful to avoid rewriting the AOF file even if the percentage increase\n# is reached but it is still pretty small.\n#\n# Specify a percentage of zero in order to disable the automatic AOF\n# rewrite feature.\n\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n\n################################ LUA SCRIPTING  ###############################\n\n# Max execution time of a Lua script in milliseconds.\n#\n# If the maximum execution time is reached Redis will log that a script is\n# still in execution after the maximum allowed time and will start to\n# reply to queries with an error.\n#\n# When a long running script exceed the maximum execution time only the\n# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be\n# used to stop a script that did not yet called write commands. The second\n# is the only way to shut down the server in the case a write commands was\n# already issue by the script but the user don't want to wait for the natural\n# termination of the script.\n#\n# Set it to 0 or a negative value for unlimited execution without warnings.\nlua-time-limit 5000\n\n################################ REDIS CLUSTER  ###############################\n#\n# Normal Redis instances can't be part of a Redis Cluster, only nodes that are\n# started as cluster nodes can. In order to start a Redis instance as a\n# cluster node enable the cluster support uncommenting the following:\n#\n# cluster-enabled yes\n\n# Every cluster node has a cluster configuration file. This file is not\n# intended to be edited by hand. It is created and updated by Redis nodes.\n# Every Redis Cluster node requires a different cluster configuration file.\n# Make sure that instances running in the same system does not have\n# overlapping cluster configuration file names.\n#\n# cluster-config-file nodes-6379.conf\n\n# In order to setup your cluster make sure to read the documentation\n# available at http://redis.io web site.\n\n################################## SLOW LOG ###################################\n\n# The Redis Slow Log is a system to log queries that exceeded a specified\n# execution time. The execution time does not include the I/O operations\n# like talking with the client, sending the reply and so forth,\n# but just the time needed to actually execute the command (this is the only\n# stage of command execution where the thread is blocked and can not serve\n# other requests in the meantime).\n# \n# You can configure the slow log with two parameters: one tells Redis\n# what is the execution time, in microseconds, to exceed in order for the\n# command to get logged, and the other parameter is the length of the\n# slow log. When a new command is logged the oldest one is removed from the\n# queue of logged commands.\n\n# The following time is expressed in microseconds, so 1000000 is equivalent\n# to one second. Note that a negative number disables the slow log, while\n# a value of zero forces the logging of every command.\nslowlog-log-slower-than 10000\n\n# There is no limit to this length. Just be aware that it will consume memory.\n# You can reclaim memory used by the slow log with SLOWLOG RESET.\nslowlog-max-len 128\n\n############################### ADVANCED CONFIG ###############################\n\n# Hashes are encoded using a memory efficient data structure when they have a\n# small number of entries, and the biggest entry does not exceed a given\n# threshold. These thresholds can be configured using the following directives.\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\n\n# Similarly to hashes, small lists are also encoded in a special way in order\n# to save a lot of space. The special representation is only used when\n# you are under the following limits:\nlist-max-ziplist-entries 512\nlist-max-ziplist-value 64\n\n# Sets have a special encoding in just one case: when a set is composed\n# of just strings that happens to be integers in radix 10 in the range\n# of 64 bit signed integers.\n# The following configuration setting sets the limit in the size of the\n# set in order to use this special memory saving encoding.\nset-max-intset-entries 512\n\n# Similarly to hashes and lists, sorted sets are also specially encoded in\n# order to save a lot of space. This encoding is only used when the length and\n# elements of a sorted set are below the following limits:\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\n\n# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in\n# order to help rehashing the main Redis hash table (the one mapping top-level\n# keys to values). The hash table implementation Redis uses (see dict.c)\n# performs a lazy rehashing: the more operation you run into an hash table\n# that is rehashing, the more rehashing \"steps\" are performed, so if the\n# server is idle the rehashing is never complete and some more memory is used\n# by the hash table.\n# \n# The default is to use this millisecond 10 times every second in order to\n# active rehashing the main dictionaries, freeing memory when possible.\n#\n# If unsure:\n# use \"activerehashing no\" if you have hard latency requirements and it is\n# not a good thing in your environment that Redis can reply form time to time\n# to queries with 2 milliseconds delay.\n#\n# use \"activerehashing yes\" if you don't have such hard requirements but\n# want to free memory asap when possible.\nactiverehashing yes\n\n# The client output buffer limits can be used to force disconnection of clients\n# that are not reading data from the server fast enough for some reason (a\n# common reason is that a Pub/Sub client can't consume messages as fast as the\n# publisher can produce them).\n#\n# The limit can be set differently for the three different classes of clients:\n#\n# normal -> normal clients\n# slave  -> slave clients and MONITOR clients\n# pubsub -> clients subcribed to at least one pubsub channel or pattern\n#\n# The syntax of every client-output-buffer-limit directive is the following:\n#\n# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>\n#\n# A client is immediately disconnected once the hard limit is reached, or if\n# the soft limit is reached and remains reached for the specified number of\n# seconds (continuously).\n# So for instance if the hard limit is 32 megabytes and the soft limit is\n# 16 megabytes / 10 seconds, the client will get disconnected immediately\n# if the size of the output buffers reach 32 megabytes, but will also get\n# disconnected if the client reaches 16 megabytes and continuously overcomes\n# the limit for 10 seconds.\n#\n# By default normal clients are not limited because they don't receive data\n# without asking (in a push way), but just after a request, so only\n# asynchronous clients may create a scenario where data is requested faster\n# than it can read.\n#\n# Instead there is a default limit for pubsub and slave clients, since\n# subscribers and slaves receive data in a push fashion.\n#\n# Both the hard or the soft limit can be disabled just setting it to zero.\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n################################## INCLUDES ###################################\n\n# Include one or more other config files here.  This is useful if you\n# have a standard template that goes to all Redis server but also need\n# to customize a few per-server settings.  Include files can include\n# other files, so use this wisely.\n#\n# include /path/to/local.conf\n# include /path/to/other.conf\n"
        },
        {
          "name": "runtest",
          "type": "blob",
          "size": 0.15625,
          "content": "#!/bin/sh\nTCL=tclsh8.5\nwhich $TCL\nif [ \"$?\" != \"0\" ]\nthen\n    echo \"You need '$TCL' in order to run the Redis test\"\n    exit 1\nfi\n$TCL tests/test_helper.tcl $*\n"
        },
        {
          "name": "sentinel.conf",
          "type": "blob",
          "size": 5.619140625,
          "content": "# Example sentinel.conf\n\n# port <sentinel-port>\n# The port that this sentinel instance will run on\nport 26379\n\n# sentinel monitor <master-name> <ip> <redis-port> <quorum>\n#\n# Tells Sentinel to monitor this slave, and to consider it in O_DOWN\n# (Objectively Down) state only if at least <quorum> sentinels agree.\n#\n# Note: master name should not include special characters or spaces.\n# The valid charset is A-z 0-9 and the three characters \".-_\".\nsentinel monitor mymaster 127.0.0.1 6379 2\n\n# sentinel auth-pass <master-name> <password>\n#\n# Set the password to use to authenticate with the master and slaves.\n# Useful if there is a password set in the Redis instances to monitor.\n#\n# Note that the master password is also used for slaves, so it is not\n# possible to set a different password in masters and slaves instances\n# if you want to be able to monitor these instances with Sentinel.\n#\n# However you can have Redis instances without the authentication enabled\n# mixed with Redis instances requiring the authentication (as long as the\n# password set is the same for all the instances requiring the password) as\n# the AUTH command will have no effect in Redis instances with authentication\n# switched off.\n#\n# Example:\n#\n# sentinel auth-pass mymaster MySUPER--secret-0123passw0rd\n\n# sentinel down-after-milliseconds <master-name> <milliseconds>\n#\n# Number of milliseconds the master (or any attached slave or sentinel) should\n# be unreachable (as in, not acceptable reply to PING, continuously, for the\n# specified period) in order to consider it in S_DOWN state (Subjectively\n# Down).\n#\n# Default is 30 seconds.\nsentinel down-after-milliseconds mymaster 30000\n\n# sentinel can-failover <master-name> <yes|no>\n#\n# Specify if this Sentinel can start the failover for this master.\nsentinel can-failover mymaster yes\n\n# sentinel parallel-syncs <master-name> <numslaves>\n#\n# How many slaves we can reconfigure to point to the new slave simultaneously\n# during the failover. Use a low number if you use the slaves to serve query\n# to avoid that all the slaves will be unreachable at about the same\n# time while performing the synchronization with the master.\nsentinel parallel-syncs mymaster 1\n\n# sentinel failover-timeout <master-name> <milliseconds>\n#\n# Specifies the failover timeout in milliseconds. When this time has elapsed\n# without any progress in the failover process, it is considered concluded by\n# the sentinel even if not all the attached slaves were correctly configured\n# to replicate with the new master (however a \"best effort\" SLAVEOF command\n# is sent to all the slaves before).\n#\n# Also when 25% of this time has elapsed without any advancement, and there\n# is a leader switch (the sentinel did not started the failover but is now\n# elected as leader), the sentinel will continue the failover doing a\n# \"takeover\".\n#\n# Default is 15 minutes.\nsentinel failover-timeout mymaster 900000\n\n# SCRIPTS EXECTION\n#\n# sentinel notification-script and sentinel reconfig-script are used in order\n# to configure scripts that are called to notify the system administrator\n# or to reconfigure clients after a failover. The scripts are executed\n# with the following rules for error handling:\n#\n# If script exists with \"1\" the execution is retried later (up to a maximum\n# number of times currently set to 10).\n#\n# If script exists with \"2\" (or an higher value) the script execution is\n# not retried.\n#\n# If script terminates because it receives a signal the behavior is the same\n# as exit code 1.\n#\n# A script has a maximum running time of 60 seconds. After this limit is\n# reached the script is terminated with a SIGKILL and the execution retried.\n\n# NOTIFICATION SCRIPT\n#\n# sentinel notification-script <master-name> <script-path>\n# \n# Call the specified notification script for any sentienl event that is\n# generated in the WARNING level (for instance -sdown, -odown, and so forth).\n# This script should notify the system administrator via email, SMS, or any\n# other messaging system, that there is something wrong with the monitored\n# Redis systems.\n#\n# The script is called with just two arguments: the first is the event type\n# and the second the event description.\n#\n# The script must exist and be executable in order for sentinel to start if\n# this option is provided.\n#\n# Example:\n#\n# sentinel notification-script mymaster /var/redis/notify.sh\n\n# CLIENTS RECONFIGURATION SCRIPT\n#\n# sentinel client-reconfig-script <master-name> <script-path>\n#\n# When the failover starts, ends, or is aborted, a script can be called in\n# order to perform application-specific tasks to notify the clients that the\n# configuration has changed and the master is at a different address.\n# \n# The script is called in the following cases:\n#\n# Failover started (a slave is already promoted)\n# Failover finished (all the additional slaves already reconfigured)\n# Failover aborted (in that case the script was previously called when the\n#                   failover started, and now gets called again with swapped\n#                   addresses).\n#\n# The following arguments are passed to the script:\n#\n# <master-name> <role> <state> <from-ip> <from-port> <to-ip> <to-port>\n#\n# <state> is \"start\", \"end\" or \"abort\"\n# <role> is either \"leader\" or \"observer\"\n# \n# The arguments from-ip, from-port, to-ip, to-port are used to communicate\n# the old address of the master and the new address of the elected slave\n# (now a master) in the case state is \"start\" or \"end\".\n#\n# For abort instead the \"from\" is the address of the promoted slave and\n# \"to\" is the address of the original master address, since the failover\n# was aborted.\n#\n# This script should be resistant to multiple invocations.\n#\n# Example:\n#\n# sentinel client-reconfig-script mymaster /var/redis/reconfig.sh\n\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}