{
  "metadata": {
    "timestamp": 1736709886699,
    "page": 374,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pgbackrest/pgbackrest",
      "stars": 2735,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 3.5537109375,
          "content": "# Cirrus CI Build Definitions\n# ----------------------------------------------------------------------------------------------------------------------------------\n\n# Build the branch if it is integration, a pull request, or ends in -ci/-cic (-cic targets only Cirrus CI)\nonly_if: $CIRRUS_BRANCH == 'integration' || $CIRRUS_PR != '' || $CIRRUS_BRANCH =~ '.*-ci$' || $CIRRUS_BRANCH =~ '.*-cic$'\n\n# No auto-cancel on integration\nauto_cancellation: $CIRRUS_BRANCH != 'integration'\n\n# Arm64 - disabled because it often takes several hours for the test to get queued in Cirrus CI\n# ----------------------------------------------------------------------------------------------------------------------------------\n# arm64_task:\n#   arm_container:\n#     image: ubuntu:20.04\n#     cpu: 4\n#     memory: 2G\n\n#   install_script:\n#     - apt-get update && apt-get install -y perl sudo locales\n#     - sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen\n#     - dpkg-reconfigure --frontend=noninteractive locales\n#     - update-locale LANG=en_US.UTF-8\n#     - adduser --disabled-password --gecos \"\" testuser\n#     - echo '%testuser ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers\n#     - chown -R testuser ${CIRRUS_WORKING_DIR?}\n\n#   script:\n#     - su - testuser -c \"${CIRRUS_WORKING_DIR?}/test/ci.pl test --sudo --no-tempfs --param=c-only --param=no-coverage\"\n\n# FreeBSD 13\n# ----------------------------------------------------------------------------------------------------------------------------------\nfreebsd_13_task:\n  freebsd_instance:\n    image_family: freebsd-13-3\n    cpu: 4\n    memory: 4G\n\n  install_script: pkg update && pkg upgrade -y libiconv && pkg install -y bash git postgresql-libpqxx pkgconf libxml2 gmake perl5 libyaml p5-YAML-LibYAML rsync meson\n\n  script:\n    - rsync --version\n    - cd .. && perl ${CIRRUS_WORKING_DIR}/test/test.pl --make-cmd=gmake --vm-max=2 --no-coverage --no-valgrind --module=command --test=backup\n\n  debug_script:\n    - ls -lah ${CIRRUS_WORKING_DIR}\n\n# FreeBSD 14\n# ----------------------------------------------------------------------------------------------------------------------------------\nfreebsd_14_task:\n  freebsd_instance:\n    image_family: freebsd-14-0\n    cpu: 4\n    memory: 4G\n\n  install_script: pkg update && pkg upgrade -y libiconv && pkg install -y bash git postgresql-libpqxx pkgconf libxml2 gmake perl5 libyaml p5-YAML-LibYAML rsync meson\n\n  script:\n    - cd .. && perl ${CIRRUS_WORKING_DIR}/test/test.pl --make-cmd=gmake --vm-max=2 --no-coverage --no-valgrind --module=command --test=backup\n\n  debug_script:\n    - ls -lah ${CIRRUS_WORKING_DIR}\n\n# MacOS Ventura\n# ----------------------------------------------------------------------------------------------------------------------------------\nmacos_ventura_task:\n  osx_instance:\n    image: ghcr.io/cirruslabs/macos-runner:sonoma\n\n  environment:\n    LDFLAGS: -L/opt/homebrew/opt/openssl@3/lib -L/opt/homebrew/opt/libpq/lib -L/opt/homebrew/opt/libxml2/lib -L/opt/homebrew/opt/libyaml/lib\n    CPPFLAGS: -I/opt/homebrew/opt/openssl@3/include -I/opt/homebrew/opt/libpq/include -I/opt/homebrew/opt/libxml2/include/libxml2 -I/opt/homebrew/opt/libyaml/include\n    PERL5LIB: /opt/homebrew/opt/perl5/lib/perl5\n    PKG_CONFIG_PATH: /opt/homebrew/opt/libpq/lib/pkgconfig:/opt/homebrew/opt/openssl@3/lib/pkgconfig\n\n  install_script:\n     - brew install -q pkg-config openssl@3 libpq libxml2 libyaml meson\n\n  script:\n    - cd ..\n    - ${CIRRUS_WORKING_DIR}/test/test.pl --vm-max=2 --no-coverage --no-valgrind --module=command --test=backup --test=info\n\n  debug_script:\n    - ls -lah ${CIRRUS_WORKING_DIR}\n    - ls -lahR /opt/homebrew/opt\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1748046875,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{yaml,yml}]\nindent_size = 2\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.31640625,
          "content": "# Reformat code with uncrustify.\nd4070c90641a61fa3cb1169f3bd53067193bab4e\n\n# Fix formatting errors.\nb2202c36d9e7c4557ac37087757df80193d516b5\n\n# Remove double spaces from comments and documentation.\n1bd5530a59cd8ddbabc279802d1ede4f8fbd5314\n\n# Remove double spaces missed in 1bd5530a.\nd49907239eb37c3e4e905f97543824181a1bd406\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0849609375,
          "content": "# Classify all .h/c.inc files as C\n*.h linguist-language=C\n*.c.inc linguist-language=C\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0244140625,
          "content": "**/*~\n*~\n*.swp\n.DS_Store\n"
        },
        {
          "name": "CODING.md",
          "type": "blob",
          "size": 10.4443359375,
          "content": "# pgBackRest <br/> Coding Standards\n\n## Formatting with uncrustify\n\npgBackRest uses uncrustify to check/update the code formatting. If the `code-format` test fails in CI then reformat the code:\n```\npgbackrest/test/test.pl --code-format\n```\nAlso review the standards in the following sections below. Some standards require further explanation and others are not enforced by uncrustify.\n\n## Standards\n\n### Indentation\n\nIndentation is four spaces -- no tabs. Only file types that absolutely require tabs (e.g. `Makefile`) may use them.\n\n### Line Length\n\nWith the exception of documentation code, no line of any code or test file shall exceed 132 characters. If a line break is required, then it shall be after the first function parenthesis:\n```\n// CORRECT - location of line break after first function parenthesis if line length is greater than 132\nStringList *removeList = infoBackupDataLabelList(\n    infoBackup, strNewFmt(\"^%s.*\", strZ(strLstGet(currentBackupList, fullIdx))));\n\n// INCORRECT\nStringList *removeList = infoBackupDataLabelList(infoBackup, strNewFmt(\"^%s.*\", strZ(strLstGet(currentBackupList,\n    fullIdx))));\n```\nIf a conditional, then after a completed conditional, for example:\n```\n// CORRECT - location of line break after a completed conditional if line length is greater than 132\nif (archiveInfoPgHistory.id != backupInfoPgHistory.id ||\n    archiveInfoPgHistory.systemId != backupInfoPgHistory.systemId ||\n    archiveInfoPgHistory.version != backupInfoPgHistory.version)\n\n// INCORRECT\nif (archiveInfoPgHistory.id != backupInfoPgHistory.id || archiveInfoPgHistory.systemId !=\n    backupInfoPgHistory.systemId || archiveInfoPgHistory.version != backupInfoPgHistory.version)\n```\n\n### Function Comments\n\nComments for `extern` functions should be included in the `.h` file. Comments for `static` functions and implementation-specific notes for `extern` functions (i.e., not of interest to the general user) should be included in the `.c` file.\n\n### Inline Comment\n\nInline comments shall start at character 69 and must not exceed the line length of 132. For example:\n```\ntypedef struct InlineCommentExample\n{\n    const String *comment;                                          // Inline comment example\n    const String *longComment;                                      // Inline comment example that exceeds 132 characters should\n                                                                    // then go to next line but this should be avoided\n} InlineCommentExample;\n```\n\n### Naming\n\n#### Variables\n\nVariable names use camel case with the first letter lower-case.\n\n- `stanzaName` - the name of the stanza\n\n- `nameIdx` - loop variable for iterating through a list of names\n\nVariable names should be descriptive. Avoid `i`, `j`, etc.\n\n#### Types\n\nType names use camel case with the first letter upper case:\n\n`typedef struct MemContext <...>`\n\n`typedef enum {<...>} ErrorState;`\n\n#### Constants\n\n**#define Constants**\n\n`#define` constants should be all caps with `_` separators.\n```c\n#define MY_CONSTANT                                                 \"STRING\"\n```\nThe value should be aligned at column 69 whenever possible.\n\nThis type of constant should mostly be used for strings. Use enums whenever possible for integer constants.\n\n**String Constants**\n\nString constants can be declared using the `STRING_STATIC()` macro for local strings and `STRING_EXTERN()` for strings that will be externed for use in other modules.\n\nExterned strings should be declared in the header file as:\n```c\n#define SAMPLE_VALUE                                                \"STRING\"\n    STRING_DECLARE(SAMPLE_VALUE_STR);\n```\nAnd in the C file as:\n```c\nSTRING_EXTERN(SAMPLE_VALUE_STR,                                     SAMPLE_VALUE);\n```\nStatic strings declared in the C file are not required to have a `#define` if the `#define` version is not used. Externed strings must always have the `#define` in the header file.\n\n**Enum Constants**\n\nEnum elements follow the same case rules as variables. They are strongly typed so this shouldn't present any confusion.\n```c\ntypedef enum\n{\n    cipherModeEncrypt,\n    cipherModeDecrypt,\n} CipherMode;\n```\nNote the comma after the last element. This reduces diff churn when new elements are added.\n\n#### Macros\n\nMacro names should be upper-case with underscores between words. Macros (except simple constants) should be avoided whenever possible as they make code less clear and test coverage harder to measure.\n\nMacros should follow the format:\n```c\n#define MACRO(paramName1, paramName2)   \\\n    <code>\n```\nIf the macro defines a block it should look like:\n```c\n#define MACRO_2(paramName1, paramName2) \\\n{                                       \\\n    <code>                              \\\n}\n```\nContinuation characters should be aligned at column 132 (unlike the examples above that have been shortened for display purposes).\n\nTo avoid conflicts, variables in a macro will be named `[macro name]_[var name]`, e.g. `TEST_RESULT_resultExpected`. Variables that need to be accessed in wrapped code should be provided accessor macros.\n\n[Variadic functions](#variadic-functions) are an exception to the capitalization rule.\n\n#### Begin / End\n\nUse `Begin` / `End` for names rather than `Start` / `Finish`, etc.\n\n#### New / Free\n\nUse `New` / `Free` for constructors and destructors rather than `Create` / `Destroy`, etc.\n\n### Formatting\n\n#### Braces\n\nC allows braces to be excluded for a single statement. However, braces should be used when the control statement (if, while, etc.) spans more than one line or the statement to be executed spans more than one line.\n\nNo braces needed:\n```c\nif (condition)\n    return value;\n```\nBraces needed:\n```c\nif (conditionThatUsesEntireLine1 &&\n    conditionThatUsesEntireLine2)\n{\n    return value;\n}\n```\n```c\nif (condition)\n{\n    return\n        valueThatUsesEntireLine1 &&\n        valueThatUsesEntireLine2;\n}\n```\nBraces should be added to `switch` statement cases that have a significant amount of code. As a general rule of thumb, if the code block in the `case` is large enough to have blank lines and/or multiple comments then it should be enclosed in braces.\n```c\nswitch (int)\n{\n    case 1:\n        a = 2;\n        break;\n\n    case 2:\n    {\n        # Comment this more complex code\n        a = 1;\n        b = 2;\n\n        c = func(a, b);\n\n        break;\n    }\n}\n```\n\n#### Hints, Warnings, and Errors\n\nHints are to be formatted with capitalized `HINT:` followed by a space and a sentence. The sentence shall only begin with a capital letter if the first word is an acronym (e.g. TLS) or a proper name (e.g. PostgreSQL). The sentence must end with a period, question mark or exclamation point as appropriate.\n\nWarning and errors shall be lowercase with the exceptions for proper names and acronyms and end without punctuation.\n\n## Language Elements\n\n### Data Types\n\nDon't get exotic - use the simplest type that will work.\n\nUse `int` or `unsigned int` for general cases. `int` will be at least 32 bits. When not using `int` use one of the types defined in `common/type.h`.\n\n### Macros\n\nDon't use a macro when a function could be used instead. Macros make it hard to measure code coverage.\n\n### Objects\n\nObject-oriented programming is used extensively. The object pointer is always referred to as `this`.\n\nAn object can expose internal struct members by defining a public struct that contains the members to be exposed and using inline functions to get/set the members.\n\nThe header file:\n```c\n/***********************************************************************************************************************************\nGetters/setters\n***********************************************************************************************************************************/\ntypedef struct ListPub\n{\n    unsigned int listSize;                                          // List size\n} ListPub;\n\n// List size\nFN_INLINE_ALWAYS unsigned int\nlstSize(const List *const this)\n{\n    return THIS_PUB(List)->listSize;\n}\n```\n`THIS_PUB()` ensures that `this != NULL` so there is no need to check that in the calling function.\n\nAnd the C file:\n```c\nstruct List\n{\n    ListPub pub;                                                    // Publicly accessible variables\n    ...\n};\n```\nThe public struct must be the first member of the private struct. The naming convention for the public struct is to add `Pub` to the end of the private struct name.\n\n### Variadic Functions\n\nVariadic functions can take a variable number of parameters. While the `printf()` pattern is variadic, it is not very flexible in terms of optional parameters given in any order.\n\nThis project implements variadic functions using macros (which are exempt from the normal macro rule of being all caps). A typical variadic function definition:\n```c\ntypedef struct StoragePathCreateParam\n{\n    bool errorOnExists;\n    bool noParentCreate;\n    mode_t mode;\n} StoragePathCreateParam;\n\n#define storagePathCreateP(this, pathExp, ...)                              \\\n    storagePathCreate(this, pathExp, (StoragePathCreateParam){__VA_ARGS__})\n#define storagePathCreateP(this, pathExp)                                  \\\n    storagePathCreate(this, pathExp, (StoragePathCreateParam){0})\n\nvoid storagePathCreate(const Storage *this, const String *pathExp, StoragePathCreateParam param);\n```\nContinuation characters should be aligned at column 132 (unlike the example above that has been shortened for display purposes).\n\nThis function can be called without variable parameters:\n```c\nstoragePathCreateP(storageLocal(), \"/tmp/pgbackrest\");\n```\nOr with variable parameters:\n```c\nstoragePathCreateP(storageLocal(), \"/tmp/pgbackrest\", .errorOnExists = true, .mode = 0777);\n```\nIf the majority of functions in a module or object are variadic it is best to provide macros for all functions even if they do not have variable parameters. Do not use the base function when variadic macros exist.\n\n## Testing\n\n### Uncoverable/Uncovered Code\n\n#### Uncoverable Code\n\nThe `uncoverable` keyword marks code that can never be covered. For instance, a function that never returns because it always throws an error. Uncoverable code should be rare to non-existent outside the common libraries and test code.\n```c\n}   // {uncoverable - function throws error so never returns}\n```\nSubsequent code that is uncoverable for the same reason is marked with `// {+uncoverable}`.\n\n#### Uncovered Code\n\nMarks code that is not tested for one reason or another. This should be kept to a minimum and an excuse given for each instance.\n```c\nexit(EXIT_FAILURE); // {uncovered - test harness does not support non-zero exit}\n```\nSubsequent code that is uncovered for the same reason is marked with `// {+uncovered}`.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 37.3017578125,
          "content": "# pgBackRest <br/> Contributing to pgBackRest\n\n## Table of Contents\n\n[Introduction](#introduction)\n\n[Building a Development Environment](#building-a-development-environment)\n\n[Coding](#coding)\n\n[Testing](#testing)\n\n[Submitting a Pull Request](#submitting-a-pull-request)\n\n## Introduction\n\nThis documentation is intended to assist contributors to pgBackRest by outlining some basic steps and guidelines for contributing to the project.\n\nCode fixes or new features can be submitted via pull requests. Ideas for new features and improvements to existing functionality or documentation can be [submitted as issues](https://github.com/pgbackrest/pgbackrest/issues). You may want to check the [Project Boards](https://github.com/pgbackrest/pgbackrest/projects) to see if your suggestion has already been submitted.\n\nBug reports should be [submitted as issues](https://github.com/pgbackrest/pgbackrest/issues). Please provide as much information as possible to aid in determining the cause of the problem.\n\nYou will always receive credit in the [release notes](http://www.pgbackrest.org/release.html) for your contributions.\n\nCoding standards are defined in [CODING.md](https://github.com/pgbackrest/pgbackrest/blob/main/CODING.md) and some important coding details and an example are provided in the [Coding](#coding) section below. At a minimum, unit tests must be written and run and the documentation generated before [submitting a Pull Request](#submitting-a-pull-request); see the [Testing](#testing) section below for details.\n\n## Building a Development Environment\n\nThis example is based on Ubuntu 20.04, but it should work on many versions of Debian and Ubuntu.\n\npgbackrest-dev => Install development tools\n```\nsudo apt-get install rsync git devscripts build-essential valgrind autoconf \\\n       autoconf-archive libssl-dev zlib1g-dev libxml2-dev libpq-dev pkg-config \\\n       libxml-checker-perl libyaml-perl libdbd-pg-perl liblz4-dev liblz4-tool \\\n       zstd libzstd-dev bzip2 libbz2-dev libyaml-dev ccache python3-distutils meson\n```\n\nSome unit tests and all the integration tests require Docker. Running in containers allows us to simulate multiple hosts, test on different distributions and versions of PostgreSQL, and use sudo without affecting the host system.\n\npgbackrest-dev => Install Docker\n```\ncurl -fsSL https://get.docker.com | sudo sh\nsudo usermod -aG docker `whoami`\n```\n\nThis clone of the pgBackRest repository is sufficient for experimentation. For development, create a fork and clone that instead.\n\npgbackrest-dev => Clone pgBackRest repository\n```\ngit clone https://github.com/pgbackrest/pgbackrest.git\n```\n\nIf using a RHEL-based system, the CPAN XML parser is required to run `test.pl` and `doc.pl`. Instructions for installing Docker and the XML parser can be found in the `README.md` file of the pgBackRest [doc](https://github.com/pgbackrest/pgbackrest/blob/main/doc) directory in the section \"The following is a sample RHEL 7 configuration that can be used for building the documentation\". NOTE that the \"Install latex (for building PDF)\" section is not required since testing of the docs need only be run for HTML output.\n\n## Coding\n\nThe following sections provide information on some important concepts needed for coding within pgBackRest.\n\n### Memory Contexts\n\nMemory is allocated inside contexts and can be long lasting (for objects) or temporary (for functions). In general, use `OBJ_NEW_BEGIN(MyObj)` for objects and `MEM_CONTEXT_TEMP_BEGIN()` for functions. See [memContext.h](https://github.com/pgbackrest/pgbackrest/blob/main/src/common/memContext.h) for more details and the [Coding Example](#coding-example) below.\n\n### Logging\n\nLogging is used for debugging with the built-in macros `FUNCTION_LOG_*()` and `FUNCTION_TEST_*()` which are used to trace parameters passed to/returned from functions. `FUNCTION_LOG_*()` macros are used for production logging whereas `FUNCTION_TEST_*()` macros will be compiled out of production code. For functions where no parameter is valuable enough to justify the cost of debugging in production, use `FUNCTION_TEST_BEGIN()/FUNCTION_TEST_END()`, else use `FUNCTION_LOG_BEGIN(someLogLevel)/FUNCTION_LOG_END()`. See [debug.h](https://github.com/pgbackrest/pgbackrest/blob/main/src/common/debug.h) for more details and the [Coding Example](#coding-example) below.\n\nLogging is also used for providing information to the user via the `LOG_*()` macros, such as `LOG_INFO(\"some informational message\")` and `LOG_WARN_FMT(\"no prior backup exists, %s backup has been changed to full\", strZ(cfgOptionDisplay(cfgOptType)))` and also via `THROW_*()` macros for throwing an error. See [log.h](https://github.com/pgbackrest/pgbackrest/blob/main/src/common/log.h) and [error.h](https://github.com/pgbackrest/pgbackrest/blob/main/src/common/error/error.h) for more details and the [Coding Example](#coding-example) below.\n\n### Coding Example\n\nThe example below is not structured like an actual implementation and is intended only to provide an understanding of some of the more common coding practices. The comments in the example are only here to explain the example and are not representative of the coding standards. Refer to the Coding Standards document ([CODING.md](https://github.com/pgbackrest/pgbackrest/blob/main/CODING.md)) and sections above for an introduction to the concepts provided here. For an actual implementation, see [db.h](https://github.com/pgbackrest/pgbackrest/blob/main/src/db/db.h) and [db.c](https://github.com/pgbackrest/pgbackrest/blob/main/src/db/db.c).\n\n#### Example: hypothetical basic object construction\n```c\n/*\n * HEADER FILE - see db.h for a complete implementation example\n */\n\n// Typedef the object declared in the C file\ntypedef struct MyObj MyObj;\n\n// Constructor, and any functions in the header file, are all declared on one line\nMyObj *myObjNew(unsigned int myData, const String *secretName);\n\n// Declare the publicly accessible variables in a structure with Pub appended to the name\ntypedef struct MyObjPub         // First letter upper case\n{\n    unsigned int myData;        // Contents of the myData variable\n} MyObjPub;\n\n// Declare getters and setters inline for the publicly visible variables\n// Only setters require \"Set\" appended to the name\nFN_INLINE_ALWAYS unsigned int\nmyObjMyData(const MyObj *const this)\n{\n    return THIS_PUB(MyObj)->myData;    // Use the built-in THIS_PUB macro\n}\n\n// Destructor\nFN_INLINE_ALWAYS void\nmyObjFree(MyObj *const this)\n{\n    objFree(this);\n}\n\n// TYPE and FORMAT macros for function logging\n#define FUNCTION_LOG_MY_OBJ_TYPE                                            \\\n    MyObj *\n#define FUNCTION_LOG_MY_OBJ_FORMAT(value, buffer, bufferSize)               \\\n    FUNCTION_LOG_OBJECT_FORMAT(value, myObjToLog, buffer, bufferSize)\n\n/*\n * C FILE - see db.c for a more complete and actual implementation example\n */\n\n// Declare the object type\nstruct MyObj\n{\n    MyObjPub pub;               // Publicly accessible variables must be first and named \"pub\"\n    const String *name;         // Pointer to lightweight string object - see string.h\n};\n\n// Object constructor, and any functions in the C file, have the return type and function signature on separate lines\nMyObj *\nmyObjNew(unsigned int myData, const String *secretName)\n{\n    FUNCTION_LOG_BEGIN(logLevelDebug);              // Use FUNCTION_LOG_BEGIN with a log level for displaying in production\n        FUNCTION_LOG_PARAM(UINT, myData);           // When log level is debug, myData variable will be logged\n        FUNCTION_TEST_PARAM(STRING, secretName);    // FUNCTION_TEST_PARAM will not display secretName value in production logging\n    FUNCTION_LOG_END();\n\n    ASSERT(secretName != NULL || myData > 0);       // Development-only assertions (will be compiled out of production code)\n\n    OBJ_NEW_BEGIN(MyObj)                // Create a long lasting memory context with the name of the object\n    {\n        *this = (MyObj)                 // Initialize the object\n        {\n            .pub =\n            {\n                .myData = myData,                       // Copy the simple data type to this object\n            },\n            .name = strDup(secretName),     // Duplicate the String data type to the this object's memory context\n        };\n    }\n    OBJ_NEW_END();\n\n    FUNCTION_LOG_RETURN(MyObj, this);\n}\n\n// Function using temporary memory context\nString *\nmyObjDisplay(unsigned int myData)\n{\n    FUNCTION_TEST_BEGIN();                      // No parameters passed to this function will be logged in production\n        FUNCTION_TEST_PARAM(UINT, myData);\n    FUNCTION_TEST_END();\n\n    String *result = NULL;     // Result is created in the caller's memory context (referred to as \"prior context\" below)\n\n    MEM_CONTEXT_TEMP_BEGIN()   // Begin a new temporary context\n    {\n        String *resultStr = strNewZ(\"Hello\");    // Allocate a string in the temporary memory context\n\n        if (myData > 1)\n            resultStr = strCatZ(\" World\");      // Append a value to the string still in the temporary memory context\n        else\n            LOG_WARN(\"Am I not your World?\");   // Log a warning to the user\n\n        MEM_CONTEXT_PRIOR_BEGIN()           // Switch to the prior context so the string duplication is in the caller's context\n        {\n            result = strDup(resultStr);     // Create a copy of the string in the caller's context\n        }\n        MEM_CONTEXT_PRIOR_END();            // Switch back to the temporary context\n    }\n    MEM_CONTEXT_TEMP_END();      // Free everything created inside this temporary memory context - i.e resultStr\n\n    FUNCTION_TEST_RETURN(STRING, result);    // Return result but do not log the value in production\n}\n\n// Create the logging function for displaying important information from the object\nString *\nmyObjToLog(const MyObj *this)\n{\n    return strNewFmt(\n        \"{name: %s, myData: %u}\", this->name == NULL ? NULL_Z : strZ(this->name), myObjMyData(this));\n}\n```\n\n## Testing\n\nA list of all possible test combinations can be viewed by running:\n```\npgbackrest/test/test.pl --dry-run\n```\nWhile some files are automatically generated during `make`, others are generated by running the test harness as follows:\n```\npgbackrest/test/test.pl --gen-only\n```\nPrior to any submission, the html version of the documentation should also be run and the output checked by viewing the generated html on the local file system under `pgbackrest/doc/output/html`. More details can be found in the pgBackRest [doc/README.md](https://github.com/pgbackrest/pgbackrest/blob/main/doc/README.md) file.\n```\npgbackrest/doc/doc.pl --out=html\n```\n> **NOTE:** `ERROR: [028]` regarding cache is invalid is OK; it just means there have been changes and the documentation will be built from scratch. In this case, be patient as the build could take 20 minutes or more depending on your system.\n\n### Running Tests\n\nExamples of test runs are provided in the following sections. There are several important options for running a test:\n\n- `--dry-run` - without any other options, this will list all the available tests\n\n- `--module` - identifies the module in which the test is located\n\n- `--test` - the actual test set to be run\n\n- `--run` - a number identifying the run within a test if testing a single run rather than the entire test\n\n- `--vm-out` - displays the test output (helpful for monitoring the progress)\n\n- `--vm` - identifies the pre-built container when using Docker, otherwise the setting should be `none`. See [test.yml](https://github.com/pgbackrest/pgbackrest/blob/main/.github/workflows/test.yml) for a list of valid vm codes noted by `param: test`.\n\nFor more options, run the test or documentation engine with the `--help` option:\n```\npgbackrest/test/test.pl --help\npgbackrest/doc/doc.pl --help\n```\n\n#### Without Docker\n\nIf Docker is not installed, then the available tests can be listed using `--dry-run`. Some tests require containers and will only be available when Docker is installed.\n\npgbackrest-dev => List tests that don't require a container\n```\npgbackrest/test/test.pl --dry-run\n\n--- output ---\n\n    P00   INFO: test begin on x86_64 - log level info\n    P00   INFO: clean autogenerate code\n--> P00   INFO: 83 tests selected\n                \n    P00   INFO: P1-T01/83 - vm=none, module=common, test=error\n           [filtered 80 lines of output]\n    P00   INFO: P1-T82/83 - vm=none, module=performance, test=type\n    P00   INFO: P1-T83/83 - vm=none, module=performance, test=storage\n--> P00   INFO: DRY RUN COMPLETED SUCCESSFULLY\n```\n\npgbackrest-dev => Run a test\n```\npgbackrest/test/test.pl --vm-out --module=common --test=wait\n\n--- output ---\n\n    P00   INFO: test begin on x86_64 - log level info\n    P00   INFO: cleanup old data\n    P00   INFO: autogenerate configure\n    P00   INFO:     autogenerated version in configure.ac script: no changes\n    P00   INFO:     autogenerated configure script: no changes\n    P00   INFO: autogenerate code\n    P00   INFO: build for none (/home/vagrant/test/build/none)\n    P00   INFO: 1 test selected\n                \n    P00   INFO: P1-T1/1 - vm=none, module=common, test=wait\n                \n        P00   INFO: test command begin 2.54.1: [common/wait] --log-level=info --no-log-timestamp --repo-path=/home/vagrant/test/repo --scale=1 --test-path=/home/vagrant/test --vm=none --vm-id=0\n        P00   INFO: test command end: completed successfully\n        run 1 - waitNew(), waitMore, and waitFree()\n                      L0018     expect AssertError: assertion 'waitTime <= 999999000' failed\n        \n        run 1/1 ----- L0021 0ms wait\n                      L0025     new wait\n                      L0026         check wait time\n                      L0027         check sleep time\n                      L0028         check sleep prev time\n                      L0029         no wait more\n        \n        run 1/2 ----- L0032 100ms with retries after time expired\n                      L0034     new wait\n                      L0037         time expired, first retry\n                      L0038         time expired, second retry\n                      L0039         time expired, retries expired\n        \n        run 1/3 ----- L0042 200ms wait\n                      L0046     new wait = 0.2 sec\n                      L0047         check wait time\n                      L0048         check sleep time\n                      L0049         check sleep prev time\n                      L0050         check begin time\n                      L0052         first retry\n                      L0053         check retry\n                      L0055         second retry\n                      L0056         check retry\n                      L0058         still going because of time\n                      L0064         lower range check\n                      L0065         upper range check\n                      L0067         free wait\n        \n        run 1/4 ----- L0070 1100ms wait\n                      L0074     new wait = 1.1 sec\n                      L0075         check wait time\n                      L0076         check sleep time\n                      L0077         check sleep prev time\n                      L0078         check begin time\n                      L0084         lower range check\n                      L0085         upper range check\n                      L0087         free wait\n        \n        run 1/5 ----- L0090 waitRemainder()\n                      L0092     new wait = 500ms\n                      L0093     check initial wait remainder\n                      L0094     check initial wait remainder\n                      L0098     check updated wait remainder\n                      L0099     check updated wait remainder\n        \n        TESTS COMPLETED SUCCESSFULLY\n    \n    P00   INFO: P1-T1/1 - vm=none, module=common, test=wait\n    P00   INFO: tested modules have full coverage\n    P00   INFO: TESTS COMPLETED SUCCESSFULLY\n```\n\nAn entire module can be run by using only the `--module` option.\n\npgbackrest-dev => Run a module\n```\npgbackrest/test/test.pl --module=postgres\n\n--- output ---\n\n    P00   INFO: test begin on x86_64 - log level info\n    P00   INFO: cleanup old data\n    P00   INFO: autogenerate configure\n    P00   INFO:     autogenerated version in configure.ac script: no changes\n    P00   INFO:     autogenerated configure script: no changes\n    P00   INFO: autogenerate code\n    P00   INFO: build for none (/home/vagrant/test/build/none)\n    P00   INFO: 2 tests selected\n                \n    P00   INFO: P1-T1/2 - vm=none, module=postgres, test=client\n    P00   INFO: P1-T2/2 - vm=none, module=postgres, test=interface\n    P00   INFO: tested modules have full coverage\n    P00   INFO: TESTS COMPLETED SUCCESSFULLY\n```\n\n#### With Docker\n\nBuild a container to run tests. The vm must be pre-configured but a variety are available. A vagrant file is provided in the test directory as an example of running in a virtual environment. The vm names are all three character abbreviations, e.g. `u20` for Ubuntu 20.04.\n\npgbackrest-dev => Build a VM\n```\npgbackrest/test/test.pl --vm-build --vm=u20\n\n--- output ---\n\n    P00   INFO: test begin on x86_64 - log level info\n    P00   INFO: Using cached pgbackrest/test:u20-base-20241016A image (711ee90bf3ea0e8bb054285193811266b9b1f2f3) ...\n    P00   INFO: Building pgbackrest/test:u20-test image ...\n    P00   INFO: Build Complete\n```\n> **NOTE:** to build all the vms, just omit the `--vm` option above.\n\npgbackrest-dev => Run a Specific Test Run\n```\npgbackrest/test/test.pl --vm=u20 --module=postgres --test=interface --run=2\n\n--- output ---\n\n    P00   INFO: test begin on x86_64 - log level info\n    P00   INFO: cleanup old data and containers\n    P00   INFO: autogenerate configure\n    P00   INFO:     autogenerated version in configure.ac script: no changes\n    P00   INFO:     autogenerated configure script: no changes\n    P00   INFO: autogenerate code\n    P00   INFO: clean build for u20 (/home/vagrant/test/build/u20)\n    P00   INFO: 1 test selected\n                \n    P00   INFO: P1-T1/1 - vm=u20, module=postgres, test=interface, run=2\n    P00   INFO: TESTS COMPLETED SUCCESSFULLY\n```\n\n### Writing a Unit Test\n\nThe goal of unit testing is to have 100 percent code coverage. Two files will usually be involved in this process:\n\n- **define.yaml** - defines the number of tests to be run for each module and test file. There is a comment at the top of the file that provides more information about this file.\n\n- **src/module/somefileTest.c** - where \"somefile\" is the path and name of the test file where the unit tests are located for the code being updated (e.g. `src/module/command/expireTest.c`).\n\n#### define.yaml\n\nEach module is separated by a line of asterisks (*) and each test within is separated by a line of dashes (-). In the example below, the module is `command` and the unit test is `check`. The number of calls to `testBegin()` in a unit test file will dictate the number following `total:`, in this case 4. Under `coverage:`, the list of files that will be tested.\n```\n# ********************************************************************************************************************************\n  - name: command\n\n    test:\n      # ----------------------------------------------------------------------------------------------------------------------------\n      - name: check\n        total: 4\n        containerReq: true\n\n        coverage:\n          - command/check/common\n          - command/check/check\n```\n\n#### somefileTest.c\n\nUnit test files are organized in the `test/src/module` directory with the same directory structure as the source code being tested. For example, if new code is added to src/**command/expire**.c then test/src/module/**command/expire**Test.c will need to be updated.\n\nAssuming that a test file already exists, new unit tests will either go in a new `testBegin()` section or be added to an existing section. Each such section is a test run. The comment string passed to `testBegin()` should reflect the function(s) being tested in the test run. Tests within a run should use `TEST_TITLE()` with a comment string describing the test.\n```\n// *****************************************************************************************************************************\nif (testBegin(\"expireBackup()\"))\n{\n    // -------------------------------------------------------------------------------------------------------------------------\n    TEST_TITLE(\"manifest file removal\");\n```\n\n#### Setting up the command to be run\n\nThe [harnessConfig.h](https://github.com/pgbackrest/pgbackrest/blob/main/test/src/common/harnessConfig.h) describes a list of functions that should be used when configuration options are required for a command being tested. Options are set in a `StringList` which must be defined and passed to the `HRN_CFG_LOAD()` macro with the command. For example, the following will set up a test to run `pgbackrest --repo-path=test/test-0/repo info` command on multiple repositories, one of which is encrypted:\n```\nStringList *argList = strLstNew();                                  // Create an empty string list\nhrnCfgArgRawZ(argList, cfgOptRepoPath, TEST_PATH \"/repo\");          // Add the --repo-path option\nhrnCfgArgKeyRawZ(argList, cfgOptRepoPath, 2, TEST_PATH \"/repo2\");   // Add the --repo2-path option\nhrnCfgArgKeyRawStrId(argList, cfgOptRepoCipherType, 2, cipherTypeAes256Cbc);  // Add the --repo2-cipher-type option\nhrnCfgEnvKeyRawZ(cfgOptRepoCipherPass, 2, TEST_CIPHER_PASS);        // Set environment variable for the --repo2-cipher-pass option\nHRN_CFG_LOAD(cfgCmdInfo, argList);                                  // Load the command and option list into the test harness\n```\n\n#### Storing a file\n\nSometimes it is desirable to store or manipulate files before or during a test and then confirm the contents. The [harnessStorage.h](https://github.com/pgbackrest/pgbackrest/blob/main/test/src/common/harnessStorage.h) file contains macros (e.g. `HRN_STORAGE_PUT` and `TEST_STORAGE_GET`) for doing this. In addition, `HRN_INFO_PUT` is convenient for writing out info files (archive.info, backup.info, backup.manifest) since it will automatically add header and checksum information.\n```\nHRN_STORAGE_PUT_EMPTY(\n    storageRepoWrite(), STORAGE_REPO_ARCHIVE \"/10-1/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz\");\n```\n\n#### Testing results\n\nTests are run and results confirmed via macros that are described in [harnessTest.h](https://github.com/pgbackrest/pgbackrest/blob/main/test/src/common/harnessTest.h). With the exception of TEST_ERROR, the third parameter is a short description of the test. Some of the more common macros are:\n\n- `TEST_RESULT_STR` - Test the actual value of the string returned by the function.\n\n- `TEST_RESULT_UINT` / `TEST_RESULT_INT` - Test for an unsigned integer / integer.\n\n- `TEST_RESULT_BOOL` - Test a boolean value.\n\n- `TEST_RESULT_PTR` / `TEST_RESULT_PTR_NE` - Test a pointer: useful for testing if the pointer is `NULL` or not equal (`NE`) to `NULL`.\n\n- `TEST_RESULT_VOID` - The function being tested returns a `void`. This is then usually followed by tests that ensure other actions occurred (e.g. a file was written to disk).\n\n- `TEST_ERROR` / `TEST_ERROR_FMT` - Test that a specific error code was raised with specific wording.\n> **NOTE:** `HRN_*` macros should be used only for test setup and cleanup. `TEST_*` macros must be used for testing results.\n\n#### Testing a log message\n\nIf a function being tested logs something with `LOG_WARN`, `LOG_INFO` or other `LOG_*()` macro, then the logged message must be cleared before the end of the test by using the `TEST_RESULT_LOG()/TEST_RESULT_LOG_FMT()` macros.\n```\nTEST_RESULT_LOG(\n    \"P00   WARN: WAL segment '000000010000000100000001' was not pushed due to error [25] and was manually skipped: error\");\n```\nIn the above, `Pxx` indicates the process (P) and the process number (xx), e.g. P00, P01.\n\n#### Testing using child process\n\nSometimes it is useful to use a child process for testing. Below is a simple example. See [harnessFork.h](https://github.com/pgbackrest/pgbackrest/blob/main/test/src/common/harnessFork.h) for more details.\n```\nHRN_FORK_BEGIN()\n{\n    HRN_FORK_CHILD_BEGIN()\n    {\n        TEST_RESULT_BOOL(cmdLockAcquireP(), true, \"create backup/expire lock\");\n\n        // Notify parent that lock has been acquired\n        HRN_FORK_CHILD_NOTIFY_PUT();\n\n        // Wait for parent to allow release lock\n        HRN_FORK_CHILD_NOTIFY_GET();\n\n        cmdLockReleaseP();\n    }\n    HRN_FORK_CHILD_END();\n\n    HRN_FORK_PARENT_BEGIN()\n    {\n        // Wait for child to acquire lock\n        HRN_FORK_PARENT_NOTIFY_GET(0);\n\n        HRN_CFG_LOAD(cfgCmdInfo, argListText);\n        TEST_RESULT_STR_Z(\n            infoRender(),\n            \"stanza: stanza1\\n\"\n            \"    status: error (no valid backups, backup/expire running)\\n\"\n            \"    cipher: none\\n\"\n            \"\\n\"\n            \"    db (current)\\n\"\n            \"        wal archive min/max (9.6): none present\\n\",\n            \"text - single stanza, no valid backups, backup/expire lock detected\");\n\n        // Notify child to release lock\n        HRN_FORK_PARENT_NOTIFY_PUT(0);\n    }\n    HRN_FORK_PARENT_END();\n}\nHRN_FORK_END();\n```\n\n#### Testing using a shim\n\nA PostgreSQL libpq shim is provided to simulate interactions with PostgreSQL. Below is a simple example. See [harnessPq.h](https://github.com/pgbackrest/pgbackrest/blob/main/test/src/common/harnessPq.h) for more details.\n```\n// Set up two standbys but no primary\nHRN_PQ_SCRIPT_SET(\n    HRN_PQ_SCRIPT_OPEN_GE_96(1, \"dbname='postgres' port=5432\", PG_VERSION_96, \"/pgdata\", true, NULL, NULL),\n    HRN_PQ_SCRIPT_OPEN_GE_96(8, \"dbname='postgres' port=5433\", PG_VERSION_96, \"/pgdata\", true, NULL, NULL),\n\n    // Close the \"inner\" session first (8) then the outer (1)\n    HRN_PQ_SCRIPT_CLOSE(8),\n    HRN_PQ_SCRIPT_CLOSE(1));\n\nTEST_ERROR(cmdCheck(), ConfigError, \"primary database not found\\nHINT: check indexed pg-path/pg-host configurations\");\n```\n\n### Running a Unit Test\n\n**Code Coverage**\n\nUnit tests are run for all files that are listed in `define.yaml` and a coverage report generated for each file listed under the tag `coverage:`. Note that some files are listed in multiple `coverage:` sections for a module; in this case, each test for the file being modified should be specified for the module in which the file exists (e.g. `--module=storage --test=posix --test=gcs`, etc.) or, alternatively, simply run the module without the `--test` option. It is recommended that a `--vm` be specified since running the same test for multiple vms is unnecessary for coverage. The following example would run the test set from the **define.yaml** section detailed above.\n```\npgbackrest/test/test.pl --vm-out --module=command --test=check --vm=u20\n```\n> **NOTE:** Not all systems perform at the same speed, so if a test is timing out, try rerunning with another vm.\n\nA coverage report will be generated and written to the local file system under the pgBackRest repository in `test/result/coverage.html`.\n\nIf 100 percent code coverage has not been achieved, an error message will be displayed, for example: `ERROR: [125]: c module command/check/check is not fully covered`\n\n**Debugging with files**\n\nSometimes it is useful to look at files that were generated during the test. The default for running any test is that, at the start/end of the test, the test harness will clean up all files and directories created. To override this behavior, a single test run must be specified and the option `--no-cleanup` provided. Again, continuing with the check command, from **define.yaml** above, there are four tests. Below, test one will be run and nothing will be cleaned up so that the files and directories in `test/test-0` can be inspected.\n```\npgbackrest/test/test.pl --vm-out --module=command --test=check --run=1 --no-cleanup\n```\n\n### Understanding Test Output\n\nThe following is a small sample of a typical test output.\n```\nrun 8 - expireTimeBasedBackup()\n\nrun 8/1 ------------- L2285 no current backups\n    000.002s          L2298     empty backup.info\n    000.009s 000.007s L2300     no backups to expire\n```\n**run 8 - expireTimeBasedBackup()** - indicates the run number (8) within the module and the parameter provided to testBegin, e.g. `testBegin(\"expireTimeBasedBackup()\")`\n\n**run 8/1 ------------- L2285 no current backups** - this is the first test (1) in run 8 which is the `TEST_TITLE(\"no current backups\");` at line number 2285.\n\n**000.002s L2298 empty backup.info** - the first number, 000.002s, is the time in seconds that the test started from the beginning of the run. L2298 is the line number of the test and `empty backup.info` is the test comment.\n\n**000.009s 000.007s L2300 no backups to expire** - again, 000.009s, is the time in seconds that the test started from the beginning of the run. The second number, 000.007s, is the run time of the **previous** test (i.e. `empty backup.info` test took 000.007 seconds to execute). L2300 is the line number of the test and `no backups to expire` is the test comment.\n\n## Adding an Option\n\nOptions can be added to a command or multiple commands. Options can be configuration file only, command-line only or valid for both. Once an option is successfully added, the `config.auto.h` and `parse.auto.c.inc` files will automatically be generated by the build system.\n\nTo add an option, two files need be to be modified:\n\n- `src/build/config/config.yaml`\n\n- `src/build/help/help.xml`\n\nThese files are discussed in the following sections along with how to verify the `help` command output.\n\n### config.yaml\n\nThere are detailed comment blocks above each section that explain the rules for defining commands and options. Regarding options, there are two types: 1) command line only, and 2) configuration file. With the exception of secrets, all configuration file options can be passed on the command line. To configure an option for the configuration file, the `section:` key must be present.\n\nThe `option:` section is broken into sub-sections by a simple comment divider (e.g. `# Repository options`) under which the options are organized alphabetically by option name. To better explain this section, two hypothetical examples will be discussed. For more details, see [config.yaml](https://github.com/pgbackrest/pgbackrest/blob/main/src/build/config/config.yaml).\n\n#### EXAMPLE 1 hypothetical command line only option\n```\nset:\n    type: string\n    command:\n      backup:\n        depend:\n          option: stanza\n        required: false\n      restore:\n        default: latest\n    command-role:\n      main: {}\n```\n\nNote that `section:` is not present thereby making this a command-line only option defined as follows:\n\n- `set` - the name of the option\n\n- `type` - the type of the option. Valid values for types are: `boolean`, `hash`, `integer`, `list`, `path`, `size`, `string`, and `time`\n\n- `command` - list each command for which the option is valid. If a command is not listed, then the option is not valid for the command and an error will be thrown if it is attempted to be used for that command. In this case the valid commands are `backup` and `restore`.\n\n- `backup` - details the requirements for the `--set` option for the `backup` command. It is dependent on the option `--stanza`, meaning it is only allowed to be specified for the `backup` command if the `--stanza` option has been specified. And `required: false` indicates that the `--set` option is never required, even with the dependency.\n\n- `restore` - details the requirements for the `--set` option for the `restore` command. Since `required:` is omitted, it is not required to be set by the user but it is required by the command and will default to `latest` if it has not been specified by the user.\n\n- `command-role` - defines the processes for which the option is valid. `main` indicates the option will be used by the main process and not be passed on to other local/remote processes.\n\n#### EXAMPLE 2 hypothetical configuration file option\n```\nrepo-test-type:\n    section: global\n    type: string\n    group: repo\n    default: full\n    allow-list:\n      - full\n      - diff\n      - incr\n    command:\n      backup: {}\n      restore: {}\n    command-role:\n      main: {}\n```\n\n- `repo-test-type` - the name of the option\n\n- `section` - the section of the configuration file where this option is valid (omitted for command line only options, see [Example 1](#example-1-hypothetical-command-line-only-option) above)\n\n- `type` - the type of the option. Valid values for types are: `boolean`, `hash`, `integer`, `list`, `path`, `size`, `string`, and `time`\n\n- `group` - indicates that this option is part of the `repo` group of indexed options and therefore will follow the indexing rules e.g. `repo1-test-type`.\n\n- `default` - sets a default for the option if the option is not provided when the command is run. The default can be global (as it is here) or it can be specified for a specific command in the command section (as in [Example 1](#example-1-hypothetical-command-line-only-option) above).\n\n- `allow-list` - lists the allowable values for the option for all commands for which the option is valid.\n\n- `command` - list each command for which the option is valid. If a command is not listed, then the option is not valid for the command and an error will be thrown if it is attempted to be used for that command. In this case the valid commands are `backup` and `restore`.\n\n- `command-role` - defines the processes for which the option is valid. `main` indicates the option will be used by the main process and not be passed on to other local/remote processes.\n\nWhen `test.pl` is run the `config.auto.h` file will be generated to contain the constants used for options in the code. For the C enums, any dashes in the option name will be removed, camel-cased and prefixed with `cfgOpt`, e.g. `repo-path` becomes `cfgOptRepoPath`.\n\n### help.xml\n\nAll options must be documented or the system will error during the build. To add an option, find the command section identified by `command id=\"COMMAND\"` section where `COMMAND` is the name of the command (e.g. `expire`) or, if the option is used by more than one command and the definition for the option is the same for all of the commands, the `operation-general title=\"General Options\"` section.\n\nTo add an option, add the following to the `<option-list>` section; if it does not exist, then wrap the following in `<option-list>` `</option-list>`. This example uses the boolean option `force` of the `restore` command. Simply replace that with your new option and the appropriate `summary`, `text` and `example`.\n```\n<option id=\"force\" name=\"Force\">\n    <summary>Force a restore.</summary>\n\n    <text>By itself this option forces the <postgres/> data and tablespace paths to be completely overwritten. In combination with <br-option>--delta</br-option> a timestamp/size delta will be performed instead of using checksums.</text>\n\n    <example>y</example>\n</option>\n```\n> **IMPORTANT:** A period (.) is required to end the `summary` section.\n\n### Testing the help\n\nIt is important to run the `help` command unit test after adding an option in case a change is required:\n```\npgbackrest/test/test.pl --module=command --test=help --vm-out\n```\nTo verify the `help` command output, build the pgBackRest executable:\n```\npgbackrest/test/test.pl --build-only\n```\nUse the pgBackRest executable to test the help output:\n```\ntest/bin/none/pgbackrest help backup repo-type\n```\n\n### Testing the documentation\n\nTo quickly view the HTML documentation, the `--no-exe` option can be passed to the documentation generator in order to bypass executing the code elements:\n```\npgbackrest/doc/doc.pl --out=html --no-exe\n```\nThe generated HTML files will be placed in the `doc/output/html` directory where they can be viewed locally in a browser.\n\nIf Docker is installed, it will be used by the documentation generator to execute the code elements while building the documentation, therefore, the `--no-exe` should be omitted, (i.e. `pgbackrest/doc/doc.pl --output=html`). `--no-cache` may be used to force a full build even when no code elements have changed since the last build. `--pre` will reuse the container definitions from the prior build and saves time during development.\n\nThe containers created for documentation builds can be useful for manually testing or trying out new code or features. The following demonstrates building through just the `quickstart` section of the `user-guide` without encryption.\n```\npgbackrest/doc/doc.pl --out=html --include=user-guide --require=/quickstart --var=encrypt=n --no-cache --pre\n```\nThe resulting Docker containers can be listed with `docker ps` and the container can be entered with `docker exec doc-pg-primary bash`. Additionally, the `-u` option can be added for entering the container as a specific user (e.g. `postgres`).\n\n## Submitting a Pull Request\n\nBefore submitting a Pull Request:\n\n- Does it meet the [coding standards](https://github.com/pgbackrest/pgbackrest/blob/main/CODING.md)?\n\n- Have [Unit Tests](#writing-a-unit-test) been written and [run](#running-a-unit-test) with 100% coverage?\n\n- If your submission includes changes to the help or online documentation, have the [help](#testing-the-help) and [documentation](#testing-the-documentation) tests been run?\n\n- Has it passed continuous integration testing? Simply renaming your branch with the appendix `-cig` and pushing it to your GitHub account will initiate GitHub Actions to run CI tests.\n\nWhen submitting a Pull Request:\n\n- Provide a short submission title.\n\n- Write a detailed comment to describe the purpose of your submission and any issue(s), if any, it is resolving; a link to the GitHub issue is also helpful.\n\n- Select the `integration` branch as the base for your PR, do not select `main` nor any other branch.\n\nAfter submitting a Pull Request:\n\n- One or more reviewers will be assigned.\n\n- Respond to any issues (conversations) in GitHub but do not resolve the conversation; the reviewer is responsible for ensuring the issue raised has been resolved and marking the conversation resolved. It is helpful to supply the commit in your reply if one was submitted to fix the issue.\n\nLastly, thank you for contributing to pgBackRest!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.140625,
          "content": "The MIT License (MIT)\n\nPortions Copyright (c) 2015-2025, The PostgreSQL Global Development Group\nPortions Copyright (c) 2013-2025, David Steele\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.2470703125,
          "content": "# pgBackRest <br/> Reliable PostgreSQL Backup & Restore\n\n## Introduction\n\npgBackRest is a reliable backup and restore solution for PostgreSQL that seamlessly scales up to the largest databases and workloads.\n\npgBackRest [v2.54.1](https://github.com/pgbackrest/pgbackrest/releases/tag/release/2.54.1) is the current stable release. Release notes are on the [Releases](http://www.pgbackrest.org/release.html) page.\n\nPlease give us a star on [GitHub](https://github.com/pgbackrest/pgbackrest) if you like pgBackRest!\n\n## Features\n\n### Parallel Backup & Restore\n\nCompression is usually the bottleneck during backup operations so pgBackRest solves this problem with parallel processing and more efficient compression algorithms such as lz4 and zstd.\n\n### Local or Remote Operation\n\nA custom protocol allows pgBackRest to backup, restore, and archive locally or remotely via TLS/SSH with minimal configuration. An interface to query PostgreSQL is also provided via the protocol layer so that remote access to PostgreSQL is never required, which enhances security.\n\n### Multiple Repositories\n\nMultiple repositories allow, for example, a local repository with minimal retention for fast restores and a remote repository with a longer retention for redundancy and access across the enterprise.\n\n### Full, Differential, & Incremental Backups (at File or Block Level)\n\nFull, differential, and incremental backups are supported. pgBackRest is not susceptible to the time resolution issues of rsync, making differential and incremental backups safe without the requirement to checksum each file. Block-level backups save space by only copying the parts of files that have changed.\n\n### Backup Rotation & Archive Expiration\n\nRetention polices can be set for full and differential backups to create coverage for any time frame. The WAL archive can be maintained for all backups or strictly for the most recent backups. In the latter case WAL required to make older backups consistent will be maintained in the archive.\n\n### Backup Integrity\n\nChecksums are calculated for every file in the backup and rechecked during a restore or verify. After a backup finishes copying files, it waits until every WAL segment required to make the backup consistent reaches the repository.\n\nBackups in the repository may be stored in the same format as a standard PostgreSQL cluster (including tablespaces). If compression is disabled and hard links are enabled it is possible to snapshot a backup in the repository and bring up a PostgreSQL cluster directly on the snapshot. This is advantageous for terabyte-scale databases that are time consuming to restore in the traditional way.\n\nAll operations utilize file and directory level fsync to ensure durability.\n\n### Page Checksums\n\nIf page checksums are enabled pgBackRest will validate the checksums for every file that is copied during a backup. All page checksums are validated during a full backup and checksums in files that have changed are validated during differential and incremental backups.\n\nValidation failures do not stop the backup process, but warnings with details of exactly which pages have failed validation are output to the console and file log.\n\nThis feature allows page-level corruption to be detected early, before backups that contain valid copies of the data have expired.\n\n### Backup Resume\n\nAn interrupted backup can be resumed from the point where it was stopped. Files that were already copied are compared with the checksums in the manifest to ensure integrity. Since this operation can take place entirely on the repository host, it reduces load on the PostgreSQL host and saves time since checksum calculation is faster than compressing and retransmitting data.\n\n### Streaming Compression & Checksums\n\nCompression and checksum calculations are performed in stream while files are being copied to the repository, whether the repository is located locally or remotely.\n\nIf the repository is on a repository host, compression is performed on the PostgreSQL host and files are transmitted in a compressed format and simply stored on the repository host. When compression is disabled a lower level of compression is utilized to make efficient use of available bandwidth while keeping CPU cost to a minimum.\n\n### Delta Restore\n\nThe manifest contains checksums for every file in the backup so that during a restore it is possible to use these checksums to speed processing enormously. On a delta restore any files not present in the backup are first removed and then checksums are generated for the remaining files. Files that match the backup are left in place and the rest of the files are restored as usual. Parallel processing can lead to a dramatic reduction in restore times.\n\n### Parallel, Asynchronous WAL Push & Get\n\nDedicated commands are included for pushing WAL to the archive and getting WAL from the archive. Both commands support parallelism to accelerate processing and run asynchronously to provide the fastest possible response time to PostgreSQL.\n\nWAL push automatically detects WAL segments that are pushed multiple times and de-duplicates when the segment is identical, otherwise an error is raised. Asynchronous WAL push allows transfer to be offloaded to another process which compresses WAL segments in parallel for maximum throughput. This can be a critical feature for databases with extremely high write volume.\n\nAsynchronous WAL get maintains a local queue of WAL segments that are decompressed and ready for replay. This reduces the time needed to provide WAL to PostgreSQL which maximizes replay speed. Higher-latency connections and storage (such as S3) benefit the most.\n\nThe push and get commands both ensure that the database and repository match by comparing PostgreSQL versions and system identifiers. This virtually eliminates the possibility of misconfiguring the WAL archive location.\n\n### Tablespace & Link Support\n\nTablespaces are fully supported and on restore tablespaces can be remapped to any location. It is also possible to remap all tablespaces to one location with a single command which is useful for development restores.\n\nFile and directory links are supported for any file or directory in the PostgreSQL cluster. When restoring it is possible to restore all links to their original locations, remap some or all links, or restore some or all links as normal files or directories within the cluster directory.\n\n### S3, Azure, and GCS Compatible Object Store Support\n\npgBackRest repositories can be located in S3, Azure, and GCS compatible object stores to allow for virtually unlimited capacity and retention.\n\n### Encryption\n\npgBackRest can encrypt the repository to secure backups wherever they are stored.\n\n### Compatibility with ten versions of PostgreSQL\n\npgBackRest includes support for ten versions of PostgreSQL, the five supported versions and the last five EOL versions. This allows ample time to upgrade to a supported version.\n\n## Getting Started\n\npgBackRest strives to be easy to configure and operate:\n\n- [User guides](http://www.pgbackrest.org/user-guide-index.html) for various operating systems and PostgreSQL versions.\n\n- [Command reference](http://www.pgbackrest.org/command.html) for command-line operations.\n\n- [Configuration reference](http://www.pgbackrest.org/configuration.html) for creating pgBackRest configurations.\n\nDocumentation for v1 can be found [here](http://www.pgbackrest.org/1). No further releases are planned for v1 because v2 is backward-compatible with v1 options and repositories.\n\n## Contributions\n\nContributions to pgBackRest are always welcome! Please see our [Contributing Guidelines](https://github.com/pgbackrest/pgbackrest/blob/main/CONTRIBUTING.md) for details on how to contribute features, improvements or issues.\n\n## Support\n\npgBackRest is completely free and open source under the [MIT](https://github.com/pgbackrest/pgbackrest/blob/main/LICENSE) license. You may use it for personal or commercial purposes without any restrictions whatsoever. Bug reports are taken very seriously and will be addressed as quickly as possible.\n\nCreating a robust disaster recovery policy with proper replication and backup strategies can be a very complex and daunting task. You may find that you need help during the architecture phase and ongoing support to ensure that your enterprise continues running smoothly.\n\n[Crunchy Data](http://www.crunchydata.com) provides packaged versions of pgBackRest for major operating systems and expert full life-cycle commercial support for pgBackRest and all things PostgreSQL. [Crunchy Data](http://www.crunchydata.com) is committed to providing open source solutions with no vendor lock-in, ensuring that cross-compatibility with the community version of pgBackRest is always strictly maintained.\n\nPlease visit [Crunchy Data](http://www.crunchydata.com) for more information.\n\n## Recognition\n\nPrimary recognition goes to Stephen Frost for all his valuable advice and criticism during the development of pgBackRest.\n\n[Crunchy Data](http://www.crunchydata.com) has contributed significant time and resources to pgBackRest and continues to actively support development. [Resonate](http://www.resonate.com) also contributed to the development of pgBackRest and allowed early (but well tested) versions to be installed as their primary PostgreSQL backup solution.\n\n[Armchair](https://thenounproject.com/search/?q=lounge+chair&i=129971) graphic by [Sandor Szabo](https://thenounproject.com/sandorsz).\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 9.865234375,
          "content": "####################################################################################################################################\n# pgBackRest Project\n####################################################################################################################################\nproject(\n    'pgbackrest',\n    ['c'],\n    version: '2.55dev',\n    license: 'MIT',\n    meson_version: '>=0.47',\n    default_options: [\n        # Core options\n        'buildtype=release',\n        'warning_level=2',\n\n        # Base options\n        'b_ndebug=if-release',\n\n        # Perform unity builds in a single file\n        'unity_size=100000',\n\n        # Compiler options\n        'c_std=c99',\n    ],\n)\n\n# Selected C compiler\ncc = meson.get_compiler('c')\n\n####################################################################################################################################\n# OS-specific settings\n####################################################################################################################################\nif host_machine.system() == 'linux'\n    add_global_arguments('-D_POSIX_C_SOURCE=200809L', language: 'c')\nelif host_machine.system() == 'darwin'\n    add_global_arguments('-D_DARWIN_C_SOURCE', language: 'c')\nendif\n\n####################################################################################################################################\n# Enable/disable warnings\n####################################################################################################################################\n# Enable as many additional warnings as possible to catch potential errors\nwarning_enable = [\n    # Warn whenever a pointer is cast so as to remove a type qualifier from the target type\n    '-Wcast-qual',\n\n    # Warn for implicit conversions that may alter a value\n    '-Wconversion',\n\n    # Warn about duplicated conditions in an if-else-if chain\n    '-Wduplicated-cond',\n\n    # Warn when an if-else has identical branches\n    '-Wduplicated-branches',\n\n    # Warn if floating-point values are used in equality comparisons\n    '--Wfloat-equal',\n\n    # Warn if the format string is not a string literal and cannot be checked\n    '-Wformat-nonliteral',\n\n    # Enable -Wformat plus additional format checks\n    '-Wformat=2',\n\n    # Warn if the format string requires an unsigned argument and the argument is signed and vice versa\n    '-Wformat-signedness',\n\n    # Warn about uninitialized variables which are initialized with themselves\n    '-Winit-self',\n\n    # Warn if a global function is defined without a previous prototype declaration\n    '-Wmissing-prototypes',\n\n    # Warn if a global variable is defined without a previous declaration\n    '-Wmissing-variable-declarations',\n\n    # Warn about anything that depends on the “size of” a function type or of void\n    '-Wpointer-arith',\n\n    # Warn if anything is declared more than once in the same scope, even when the extra declaration is valid and changes nothing\n    '-Wredundant-decls',\n\n    # Warn if a function is declared or defined without specifying the argument types\n    '-Wstrict-prototypes',\n\n    # Warn if a variable-length array is used\n    '-Wvla',\n\n    # Give string constants the type const char[length] so that copying the address of one into a non-const char * pointer produces\n    # a warning\n    '-Wwrite-strings',\n]\n\n# Disable various unhelpful warnings\nwarning_disable = [\n    # Warn for variables that might be changed by longjmp or vfork. Disable because of constant false positives/negatives.\n    '-Wno-clobbered',\n\n    # Warn if a structure’s initializer has some fields missing. Disable so we can initialize with {0}.\n    '-Wno-missing-field-initializers',\n\n    # Warn when a switch case falls through. Disable because this an useful aspect of switches and tests should catch problems.\n    '-Wno-implicit-fallthrough',\n]\n\nadd_project_arguments(cc.get_supported_arguments(warning_enable, warning_disable), language: 'c')\n\n####################################################################################################################################\n# Enable additional optimizations for release builds. We would prefer to use `get_option('optimization') in ['2', '3']` when our\n# minimum version is high enough to allow it.\n####################################################################################################################################\nif get_option('buildtype') == 'release'\n    optimization_enable = [\n        # Unroll loops whose number of iterations can be determined at compile time or upon entry to the loop\n        '-funroll-loops',\n\n        # Perform loop vectorization on trees\n        '-ftree-vectorize',\n    ]\n\n    add_project_arguments(cc.get_supported_arguments(optimization_enable), language: 'c')\nendif\n\n####################################################################################################################################\n# Stop after the first error when error on warn enabled. Subsequent errors are often caused by the first error.\n####################################################################################################################################\nif get_option('fatal-errors')\n    add_project_arguments(cc.get_supported_arguments('-Wfatal-errors'), language: 'c')\nendif\n\n####################################################################################################################################\n# Generate -fmacro-prefix-map so the relative path to the source directory is not included in the __FILE__ macro. This provides\n# reproducible builds and minimizes the file path in debug messages, just like an in-tree make build. For test source, prefix with\n# test/ in case there are any module name collisions.\n####################################################################################################################################\npython = import('python').find_installation()\n\nfile_prefix = run_command(\n    [\n        python,\n        '-c',\n        'import sys, os; print(os.path.relpath(sys.argv[1], sys.argv[2]))',\n        meson.current_source_dir(),\n        meson.current_build_dir(),\n    ],\n    check: true,\n).stdout().strip()\n\nadd_project_arguments(cc.get_supported_arguments('-fmacro-prefix-map=@0@/src/=' . format(file_prefix)), language: 'c')\nadd_project_arguments(cc.get_supported_arguments('-fmacro-prefix-map=@0@/test/src/=test/' . format(file_prefix)), language: 'c')\n\n####################################################################################################################################\n# Build configuration\n####################################################################################################################################\nconfiguration = configuration_data()\n\n# Ensure the C compiler supports __builtin_clzl()\nif not cc.links('''int main(int arg, char **argv) {__builtin_clzl(1);}''')\n    error('compiler must support __builtin_clzl()')\nendif\n\n# Ensure the C compiler supports __builtin_bswap64()\nif not cc.links('''int main(int arg, char **argv) {__builtin_bswap64(1);}''')\n    error('compiler must support __builtin_bswap64()')\nendif\n\n# Find optional backtrace library\nlib_backtrace = cc.find_library('backtrace', required: false)\n\nif lib_backtrace.found()\n    configuration.set('HAVE_LIBBACKTRACE', true, description: 'Is libbacktrace present?')\nendif\n\n# Find required bz2 library\nlib_bz2 = cc.find_library('bz2')\n\n# Find required lz4 library\nlib_lz4 = dependency('liblz4')\n\n# Find required openssl library\nlib_openssl = dependency('openssl', version : '>=1.1.1')\n\n# Find required pq library\nlib_pq = dependency('libpq')\n\n# Find required xml library\nlib_xml = dependency('libxml-2.0')\n\n# Find required yaml library (only used for build)\nlib_yaml = dependency('yaml-0.1')\n\n# Find required gz library\nlib_z = dependency('zlib')\n\nconfiguration.set('ZLIB_CONST', true, description: 'Require zlib const input buffer')\n\n# Find optional libssh2 library\nlib_ssh2 = dependency('libssh2', required: get_option('libssh2'))\n\nif lib_ssh2.found()\n    configuration.set('HAVE_LIBSSH2', true, description: 'Is libssh2 present?')\nendif\n\n# Find optional zstd library\nlib_zstd = dependency('libzstd', version: '>=1.0', required: get_option('libzstd'))\n\nif lib_zstd.found()\n    configuration.set('HAVE_LIBZST', true, description: 'Is libzstd present?')\nendif\n\n# Check if the C compiler supports _Static_assert()\nif cc.compiles('''int main(int arg, char **argv) {({ _Static_assert(1, \"foo\");});} ''')\n  configuration.set('HAVE_STATIC_ASSERT', true, description: 'Does the compiler provide _Static_assert()?')\nendif\n\n# Enable debug code. We would prefer to use `get_option('debug')` when our minimum version is high enough to allow it.\nif get_option('buildtype') == 'debug' or get_option('buildtype') == 'debugoptimized'\n    configuration.set('DEBUG', true, description: 'Enable debug code')\nendif\n\n# Set configuration path\nconfiguration.set_quoted('CFGOPTDEF_CONFIG_PATH', get_option('configdir'), description: 'Configuration path')\n\n# Set FN_NO_RETURN macro\nconfiguration.set('FN_NO_RETURN', '__attribute__((__noreturn__))', description: 'Indicate that a function does not return')\n\n# Set FN_INLINE_ALWAYS macro\nconfiguration.set(\n    'FN_INLINE_ALWAYS', '__attribute__((always_inline)) static inline',\n    description: 'Indicate that a function should always be inlined'\n)\n\n# Set FN_PRINTF macro\nconfiguration.set(\n    'FN_PRINTF(fmt, args)', '__attribute__((format(printf, fmt, args)))',\n    description: 'Indicate that a function is formatted like printf (and provide format and args position)'\n)\n\n# Set FN_STRFTIME macro\nconfiguration.set(\n    'FN_STRFTIME(fmt)', '__attribute__((format(strftime, fmt, 0)))',\n    description: 'Indicate that a function is formatted like strftime (and provide format position)'\n)\n\n####################################################################################################################################\n# Include subdirs\n####################################################################################################################################\nsubdir('src')\nsubdir('doc/src')\nsubdir('test/src')\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.3916015625,
          "content": "option('configdir', type: 'string', value: '/etc/pgbackrest', description: 'Configuration directory')\noption('fatal-errors', type: 'boolean', value: false, description: 'Stop compilation on first error')\noption('libssh2', type: 'feature', value: 'auto', description: 'Enable SFTP storage support')\noption('libzstd', type: 'feature', value: 'auto', description: 'Enable Zstandard compression support')\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}