{
  "metadata": {
    "timestamp": 1736709775088,
    "page": 215,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "premake/premake-core",
      "stars": 3303,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4619140625,
          "content": "root = true\n\n[*]\nindent_style = tab\nindent_size = 4\ntab_width = 4\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n# Yaml does not accept indentation by tab, so use space for indentation\n[*.yml]\nindent_style = space\nindent_size = 2\n\n# External files are not formatted.\n[{**/pepperfish_profiler.lua,mobdebug.lua,/binmodules/**,/contrib/**}]\nindent_style = unset\nindent_size = unset\ntab_width = unset\ntrim_trailing_whitespace = unset\ninsert_final_newline = unset\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.02734375,
          "content": "Bootstrap.bat text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.392578125,
          "content": "syntax: glob\n\n.DS_Store\n\n*.bak\n*.orig\n*~\n\nbuild\nbin\nobj\nrelease\nipch\nsrc/scripts.c\n**.lnt\n**.vlstatus\n\nMakefile\n*.make\n*.xcodeproj\n*.xcworkspace\n*.swp\n*.sdf\n*.sln\n*.suo\n*.ncb\n*.vcproj*\n*.vcxproj*\n*.VC.opendb\n*.VC.db\n*.opensdf\n*.workspace\n*.project\n*.tags\n*.sublime-*\n.cproject\n.settings\n.buildpath\n*.vs\n\n*.bbprojectsettings\nScratchpad.txt\nUnix Worksheet.worksheet\nproject.bbprojectdata\nPremake4.tmproj\n"
        },
        {
          "name": "BUILD.txt",
          "type": "blob",
          "size": 4.2177734375,
          "content": "PREMAKE BUILD INSTRUCTIONS\n\n Premake is written in a mix of C and Lua. A small host executable,\n written in C, launches the app and prepares the environment, at which\n point control is handed off to a Lua script. Almost all of Premake is\n written in Lua scripts, which allow it to be easily extended and\n customized. The catch is that it is slightly more complicated to build\n it than your typical C/C++ application.\n\n If you find all of this very confusing and need some help, visit the\n Premake website for help and community links. We will be glad to help!\n\n\nBUILDING FROM A SOURCE PACKAGE\n\n If you downloaded a source code package (as opposed to pulling the sources\n directory from the repository) you will find project files for all of the\n officially supported toolsets in the build/ folder. Build the release\n configuration and you will be ready to go. For makefiles:\n\n    $ cd build/gmake2.unix\n    $ make config=release\n\n The binaries will be placed in the ./bin/release directory.\n\n\nBUILDING FROM THE REPOSITORY\n\n If you have pulled sources from the Premake source repository, you can\n use `Bootstrap.sh` or `Bootstrap.bat` to generate your first premake executable:\n\n On Windows:\n\n    $ ./Bootstrap.bat\n\n On other platforms:\n\n    $ ./Bootstrap.sh\n\nAlternatively, you may call the Makefile directly:\n\n    $ make -f Bootstrap.mak PLATFORM\n\n Where PLATFORM can be osx or linux.\n On Windows with Visual Studio use nmake:\n\n    $ nmake -f Bootstrap.mak windows\n\n Or on Windows with MinGW use mingw32-make:\n\n    $ CC=mingw32-gcc mingw32-make -f Bootstrap.mak mingw\n\n If your toolset is not supported by the bootstrap Makefile, you will need\n to embed the scripts into a C source file so they may be built into the\n executable, and also generate the project files for your chosen toolset. In\n order do either of these things, you will need a working Premake executable.\n\n The easiest way to get an executable is to download one of the prebuilt\n binaries from the project website. If that isn't possible, or if not binary\n is provided for your platform, you can build from a source package as\n described above, as they also include pre-generated project files.\n\n Once you have a working Premake available, you can generate the project\n files for your toolset by running a command like the following in the\n top-level Premake directory:\n\n    $ premake5 gmake2  # for makefiles\n    $ premake5 vs2012 # for a Visual Studio 2012 solution\n    $ premake --help  # to see a list of supported toolsets\n\n If this is the first time you have built Premake, or if you have made\n changes to the Lua scripts, you should prepare them to be embedded into the\n Premake executable.\n\n    $ premake5 embed\n\n This creates a C file (at src/host/scripts.c) which contains all of the\n Lua scripts as static string buffers. These then get compiled into the\n executable, which is how we get away with shipping a single file instead\n of a whole bunch of scripts.\n\n You should now have a solution/makefile/workspace in the top-level folder,\n which you can go ahead and build.\n\n\nRUNNING THE TESTS\n\n Once you have built an executable, you can verify it by running Premake's\n unit test suites. From the top-level Premake folder, run:\n\n    $ bin/release/premake5 test\n\n\nRUNTIME SCRIPT LOADING\n\n If you are modifying or extending Premake, you can skip the embedding\n and compilation steps and run the scripts directly from the disk. This\n removes the build from the change-build-test cycle and really speeds up\n development.\n\n If you are running Premake from the top of its own source tree (where its\n premake5.lua is located) you will get this behavior automatically. If you\n are running Premake from some other location, use the --scripts option to\n provide the path to that top-level folder:\n\n    $ bin/release/premake5 --scripts=../path/to/premake test\n\n If you find yourself doing this repeatedly, or if you want Premake to be\n able to find other, custom scripts, you can also set a search path with the\n PREMAKE_PATH environment variable. Set it just like you would set your\n system PATH variable.\n\nBUILDING deb BINARY PACKAGE\n\n 0. sudo apt install devscripts\n 1. bootstrap the premake\n 2. ./bin/release/premake5 gmake2\n 3. cp ./packages/debian ./debian\n 4. debuild --no-lintian --no-sign\n 5. the built package should appear in the parent dir.\n"
        },
        {
          "name": "Bootstrap.bat",
          "type": "blob",
          "size": 4.5244140625,
          "content": "@ECHO OFF\nSETLOCAL\nSETLOCAL ENABLEDELAYEDEXPANSION\n\nREM ===========================================================================\n\nSET SelfPath=\"%0\"\nSET VsWherePath=\"C:/Program Files (x86)/Microsoft Visual Studio/Installer/vswhere.exe\"\n\nREM ===========================================================================\n\nSET \"PlatformArg=\"\nSET \"ConfigArg=\"\n\nIF NOT \"%PLATFORM%\" == \"\" (\n\tSET \"PlatformArg=PLATFORM=%PLATFORM%\"\n)\n\nIF NOT \"%CONFIG%\" == \"\" (\n\tSET \"ConfigArg=CONFIG=%CONFIG%\"\n)\n\nSET vsversion=%1\nIF \"%vsversion%\" == \"\" (\n\tCALL :BootstrapLatest\n\tEXIT /B %ERRORLEVEL%\n)\n\nIF \"%vsversion%\" == \"vs2010\" (\n\tCALL :LegacyVisualBootstrap \"%vsversion%\" \"100\"\n\n) ELSE IF \"%vsversion%\" == \"vs2012\" (\n\tCALL :LegacyVisualBootstrap \"%vsversion%\" \"110\"\n\n) ELSE IF \"%vsversion%\" == \"vs2013\" (\n\tCALL :LegacyVisualBootstrap \"%vsversion%\" \"120\"\n\n) ELSE IF \"%vsversion%\" == \"vs2015\" (\n\tCALL :LegacyVisualBootstrap \"%vsversion%\" \"140\"\n\n) ELSE IF \"%vsversion%\" == \"vs2017\" (\n\tCALL :VsWhereVisualBootstrap \"%vsversion%\" \"15.0\" \"16.0\"\n\n) ELSE IF \"%vsversion%\" == \"vs2019\" (\n\tCALL :VsWhereVisualBootstrap \"%vsversion%\" \"16.0\" \"17.0\"\n\n) ELSE IF \"%vsversion%\" == \"vs2022\" (\n\tCALL :VsWhereVisualBootstrap \"%vsversion%\" \"17.0\" \"18.0\"\n\n) ELSE (\n\tECHO Unrecognized Visual Studio version %vsversion%\n\tEXIT /B 2\n)\n\nREM On error, pause to allow user to notice it if script was launched through explorer\nIF %ERRORLEVEL% NEQ 0 (\n\tPAUSE\n)\n\nEXIT /B %ERRORLEVEL%\n\nREM ===========================================================================\n\nREM Utils\n\nREM ===========================================================================\n\nREM %1: PremakeVsVersion -> ex: vs2015\nREM %2: VsVersion envvar -> ex: 140\n:LegacyVisualBootstrap\n\nSET \"VsVersion_NoPoint=%~2\"\nSET \"VsEnvVar=VS%VsVersion_NoPoint%COMNTOOLS\"\nSET \"VsPath=!%VsEnvVar%!\"\n\nIF NOT EXIST \"%VsPath%vsdevcmd.bat\" (\n\tECHO Could not find vsdevcmd.bat to setup Visual Studio environment\n\tEXIT /B 2\n)\n\nCALL \"%VsPath%vsdevcmd.bat\" && nmake MSDEV=\"%~1\" %PlatformArg% %ConfigArg% -f Bootstrap.mak windows\nEXIT /B %ERRORLEVEL%\n\nREM :LegacyVisualBootstrap\n\n\nREM ===========================================================================\n\nREM %1: PremakeVsVersion -> ex: vs2010\nREM %2: VisualStudio-style VSversionMin -> ex: 15.0\nREM %3: VisualStudio-style VSversionMax -> ex: 16.0\n:VsWhereVisualBootstrap\nSET \"PremakeVsVersion=%~1\"\nSET \"VsVersionMin=%~2\"\nSET \"VsVersionMax=%~3\"\n\nREM ref: https://github.com/Microsoft/vswhere/wiki/Start-Developer-Command-Prompt\n\nIF NOT EXIST %VsWherePath% (\n\tECHO Could not find vswhere.exe\n\tEXIT /B 2\n)\n\nSET VsWhereCmdLine=\"!VsWherePath! -nologo -latest -version [%VsVersionMin%,%VsVersionMax%) -property installationPath\"\n\nFOR /F \"usebackq delims=\" %%i in (`!VsWhereCmdLine!`) DO (\n\n\tIF EXIST \"%%i\\VC\\Auxiliary\\Build\\vcvars64.bat\" (\n\t\tCALL \"%%i\\VC\\Auxiliary\\Build\\vcvars64.bat\" && nmake MSDEV=\"%PremakeVsVersion%\" %PlatformArg% %ConfigArg% -f Bootstrap.mak windows\n\t\tEXIT /B %ERRORLEVEL%\n\t) ELSE (\n\t\tIF EXIST \"%%i\\VC\\Auxiliary\\Build\\vcvars32.bat\" (\n\t\t\tCALL \"%%i\\VC\\Auxiliary\\Build\\vcvars32.bat\" && nmake MSDEV=\"%PremakeVsVersion%\" %PlatformArg% %ConfigArg% -f Bootstrap.mak windows\n\t\t\tEXIT /B %ERRORLEVEL%\n\t\t)\n\t)\n)\n\nECHO Could not find vcvars64.bat or vcvars32.bat to setup Visual Studio environment\nEXIT /B 2\n\nREM :VsWhereVisualBootstrap\n\nREM ===========================================================================\n\n:BootstrapLatest\n\nIF EXIST %VsWherePath% (\n\n\tREM First try for not legacy Visual Studios ( >vs2017 )\n\n\tSET VsWhereCmdLine=\"!VsWherePath! -nologo -latest -property catalog.productLineVersion\"\n\n\tFOR /F \"usebackq delims=\" %%i in (`!VsWhereCmdLine!`) DO (\n\n\t\tCALL %SelfPath% vs%%i\n\n\t\tEXIT /B %ERRORLEVEL%\n\t)\n\n)\n\nSET LegacyVSVersions=\n\nREM Get latest Visual Studio legacy version\n\nREM For all env var starting with VS\nFOR /F \"usebackq delims==\" %%i in (`SET VS`) DO (\n\n\tREM Check if env var match pattern VS*COMNTOOLS (ie: VS140COMNTOOLS)\n\tECHO \"%%i\" | FINDSTR /R /C:VS.*COMNTOOLS >nul && (\n\n\t\tSET \"LegacyVSVersions=%%i\"\n\t)\n)\n\nREM Strip VS\nSET LegacyVSVersions=%LegacyVSVersions:VS=%\nREM Strip COMNTOOLS\nSET LegacyVSVersions=%LegacyVSVersions:COMNTOOLS=%\n\nSET \"VsVersionMap=140-vs2015;120-vs2013;110-vs2012;100-vs2010\"\nCALL SET PremakeVsVersion=%%VsVersionMap:*%LegacyVSVersions%-=%%\nSET PremakeVsVersion=%PremakeVsVersion:;=&REM.%\n\nIF NOT \"%PremakeVsVersion%\" == \"\" (\n\tCALL %SelfPath% %PremakeVsVersion%\n\tEXIT /B %ERRORLEVEL%\n)\n\nECHO Could not find a Visual Studio installation\nEXIT /B 2\n\nREM :BootstrapLatest\n\nREM ===========================================================================\n\nREM SETLOCAL ENABLEDELAYEDEXPANSION\nENDLOCAL\nREM SETLOCAL\nENDLOCAL\n"
        },
        {
          "name": "Bootstrap.mak",
          "type": "blob",
          "size": 6.140625,
          "content": "MSDEV       = vs2012\nCONFIG      = release\nPLATFORM    = x86\nLUA_DIR     = contrib/lua/src\nLUASHIM_DIR = contrib/luashim\nPREMAKE_OPTS =\n\nSRC\t\t= src/host/*.c\t\t\t\\\n\t\t$(LUA_DIR)/lapi.c\t\t\\\n\t\t$(LUA_DIR)/lauxlib.c\t\\\n\t\t$(LUA_DIR)/lbaselib.c\t\\\n\t\t$(LUA_DIR)/lbitlib.c\t\\\n\t\t$(LUA_DIR)/lcode.c\t\t\\\n\t\t$(LUA_DIR)/lcorolib.c\t\\\n\t\t$(LUA_DIR)/lctype.c\t\t\\\n\t\t$(LUA_DIR)/ldblib.c\t\t\\\n\t\t$(LUA_DIR)/ldebug.c\t\t\\\n\t\t$(LUA_DIR)/ldo.c\t\t\\\n\t\t$(LUA_DIR)/ldump.c\t\t\\\n\t\t$(LUA_DIR)/lfunc.c\t\t\\\n\t\t$(LUA_DIR)/lgc.c\t\t\\\n\t\t$(LUA_DIR)/linit.c\t\t\\\n\t\t$(LUA_DIR)/liolib.c\t\t\\\n\t\t$(LUA_DIR)/llex.c\t\t\\\n\t\t$(LUA_DIR)/lmathlib.c\t\\\n\t\t$(LUA_DIR)/lmem.c\t\t\\\n\t\t$(LUA_DIR)/loadlib.c\t\\\n\t\t$(LUA_DIR)/lobject.c\t\\\n\t\t$(LUA_DIR)/lopcodes.c\t\\\n\t\t$(LUA_DIR)/loslib.c\t\t\\\n\t\t$(LUA_DIR)/lparser.c\t\\\n\t\t$(LUA_DIR)/lstate.c\t\t\\\n\t\t$(LUA_DIR)/lstring.c\t\\\n\t\t$(LUA_DIR)/lstrlib.c\t\\\n\t\t$(LUA_DIR)/ltable.c\t\t\\\n\t\t$(LUA_DIR)/ltablib.c\t\\\n\t\t$(LUA_DIR)/ltm.c\t\t\\\n\t\t$(LUA_DIR)/lundump.c\t\\\n\t\t$(LUA_DIR)/lutf8lib.c\t\\\n\t\t$(LUA_DIR)/lvm.c\t\t\\\n\t\t$(LUA_DIR)/lzio.c\t\t\\\n\nHOST_PLATFORM= none\n\n.PHONY: default none clean nix-clean windows-clean \\\n\tmingw-clean mingw macosx macosx-clean osx-clean osx \\\n\tlinux-clean linux bsd-clean bsd solaris-clean solaris \\\n\thaiku-clean haiku windows-base windows windows-msbuild\n\ndefault: $(HOST_PLATFORM)\n\nnone:\n\t@echo \"Please do\"\n\t@echo \"   nmake -f Bootstrap.mak windows\"\n\t@echo \"or\"\n\t@echo \"   CC=mingw32-gcc mingw32-make -f Bootstrap.mak mingw CONFIG=x64\"\n\t@echo \"or\"\n\t@echo \"   make -f Bootstrap.mak HOST_PLATFORM\"\n\t@echo \"where HOST_PLATFORM is one of these:\"\n\t@echo \"   osx linux bsd\"\n\t@echo \"\"\n\t@echo \"To clean the source tree, run the same command by adding a '-clean' suffix to the target name.\"\n\t\t@echo \"Example\"\n\t@echo \"   make -f Bootstrap.mak HOST_PLATFORM-clean\"\n\nclean:\n\t@echo \"Please run the same command used for building by adding a '-clean' suffix to the target name.\"\n\t@echo \"   nmake -f Bootstrap.mak windows-clean\"\n\t@echo \"or\"\n\t@echo \"   CC=mingw32-gcc mingw32-make -f Bootstrap.mak mingw-clean CONFIG=x64\"\n\t@echo \"or\"\n\t@echo \"   make -f Bootstrap.mak HOST_PLATFORM-clean\"\n\t@echo \"where HOST_PLATFORM is one of these:\"\n\t@echo \"   osx linux bsd\"\n\nnix-clean:\n\t$(SILENT) rm -rf ./bin\n\t$(SILENT) rm -rf ./build\n\t$(SILENT) rm -rf ./obj\n\nwindows-clean:\n\t$(SILENT) if exist .\\bin rmdir /s /q .\\bin\n\t$(SILENT) if exist .\\build rmdir /s /q .\\build\n\t$(SILENT) if exist .\\obj rmdir /s /q .\\obj\n\nmingw-clean: nix-clean\n\nmingw: mingw-clean\n\tmkdir -p build/bootstrap\n\t$(CC) -o build/bootstrap/premake_bootstrap -DPREMAKE_NO_BUILTIN_SCRIPTS -DLUA_STATICLIB -I\"$(LUA_DIR)\" -I\"$(LUASHIM_DIR)\" $(SRC) -lole32 -lversion\n\t./build/bootstrap/premake_bootstrap embed\n\t./build/bootstrap/premake_bootstrap --arch=$(PLATFORM) --os=windows --to=build/bootstrap --cc=mingw $(PREMAKE_OPTS) gmake2\n\t$(MAKE) -C build/bootstrap -j`getconf _NPROCESSORS_ONLN` config=$(CONFIG)_$(PLATFORM:x86=win32)\n\nmacosx: osx\n\nmacosx-clean: osx-clean\n\nosx-clean: nix-clean\n\nosx: osx-clean\n\tmkdir -p build/bootstrap\n\t$(CC) -o build/bootstrap/premake_bootstrap -DPREMAKE_NO_BUILTIN_SCRIPTS -DLUA_STATICLIB -DLUA_USE_MACOSX -I\"$(LUA_DIR)\" -I\"$(LUASHIM_DIR)\" -framework CoreServices -framework Foundation -framework Security -lreadline $(SRC)\n\t./build/bootstrap/premake_bootstrap embed\n\t./build/bootstrap/premake_bootstrap --arch=$(PLATFORM) --to=build/bootstrap $(PREMAKE_OPTS) gmake2\n\t$(MAKE) -C build/bootstrap -j`getconf _NPROCESSORS_ONLN` config=$(CONFIG)\n\nlinux-clean: nix-clean\n\nlinux: linux-clean\n\tmkdir -p build/bootstrap\n\t$(CC) -o build/bootstrap/premake_bootstrap -DPREMAKE_NO_BUILTIN_SCRIPTS -DLUA_STATICLIB -DLUA_USE_POSIX -DLUA_USE_DLOPEN -I\"$(LUA_DIR)\" -I\"$(LUASHIM_DIR)\" $(SRC) -lm -ldl -lrt -luuid\n\t./build/bootstrap/premake_bootstrap embed\n\t./build/bootstrap/premake_bootstrap --to=build/bootstrap $(PREMAKE_OPTS) gmake2\n\t$(MAKE) -C build/bootstrap -j`getconf _NPROCESSORS_ONLN` config=$(CONFIG)\n\nbsd-clean: nix-clean\n\nbsd: bsd-clean\n\tmkdir -p build/bootstrap\n\t$(CC) -o build/bootstrap/premake_bootstrap -DPREMAKE_NO_BUILTIN_SCRIPTS -DLUA_STATICLIB -DLUA_USE_POSIX -DLUA_USE_DLOPEN -I\"$(LUA_DIR)\" -I\"$(LUASHIM_DIR)\" $(SRC) -lm\n\t./build/bootstrap/premake_bootstrap embed\n\t./build/bootstrap/premake_bootstrap --to=build/bootstrap $(PREMAKE_OPTS) gmake2\n\t$(MAKE) -C build/bootstrap -j`getconf NPROCESSORS_ONLN` config=$(CONFIG)\n\nsolaris-clean: nix-clean\n\nsolaris: solaris-clean\n\tmkdir -p build/bootstrap\n\t$(CC) -o build/bootstrap/premake_bootstrap -DPREMAKE_NO_BUILTIN_SCRIPTS -DLUA_STATICLIB -DLUA_USE_POSIX -DLUA_USE_DLOPEN -I\"$(LUA_DIR)\" -I\"$(LUASHIM_DIR)\" $(SRC) -lm\n\t./build/bootstrap/premake_bootstrap embed\n\t./build/bootstrap/premake_bootstrap --to=build/bootstrap $(PREMAKE_OPTS) gmake2\n\t$(MAKE) -C build/bootstrap -j`getconf NPROCESSORS_ONLN` config=$(CONFIG)\n\nhaiku-clean: nix-clean\n\nhaiku: haiku-clean\n\tmkdir -p build/bootstrap\n\t$(CC) -o build/bootstrap/premake_bootstrap -DPREMAKE_NO_BUILTIN_SCRIPTS -DLUA_STATICLIB -DLUA_USE_POSIX -DLUA_USE_DLOPEN -D_BSD_SOURCE -I\"$(LUA_DIR)\" -I\"$(LUASHIM_DIR)\" $(SRC) -lbsd\n\t./build/bootstrap/premake_bootstrap embed\n\t./build/bootstrap/premake_bootstrap --to=build/bootstrap $(PREMAKE_OPTS) gmake2\n\t$(MAKE) -C build/bootstrap -j`getconf _NPROCESSORS_ONLN` config=$(CONFIG)\n\nwindows-base: windows-clean\n\tif not exist build\\bootstrap (mkdir build\\bootstrap)\n\tcl /Fo.\\build\\bootstrap\\ /Fe.\\build\\bootstrap\\premake_bootstrap.exe /DPREMAKE_NO_BUILTIN_SCRIPTS /DLUA_STATICLIB /I\"$(LUA_DIR)\" /I\"$(LUASHIM_DIR)\" user32.lib ole32.lib advapi32.lib $(SRC)\n\t.\\build\\bootstrap\\premake_bootstrap.exe embed\n\t.\\build\\bootstrap\\premake_bootstrap --arch=$(PLATFORM) --to=build/bootstrap $(PREMAKE_OPTS) $(MSDEV)\n\nwindows: windows-base\n\tdevenv .\\build\\bootstrap\\Premake5.sln /Upgrade\n\tdevenv .\\build\\bootstrap\\Premake5.sln /Build \"$(CONFIG)|$(PLATFORM:x86=win32)\"\n\nwindows-msbuild: windows-base\n\tmsbuild /p:Configuration=$(CONFIG) /p:Platform=$(PLATFORM:x86=win32) .\\build\\bootstrap\\Premake5.sln\n\ncosmo-clean: nix-clean\n\ncosmo: cosmo-clean\n\tmkdir -p build/bootstrap\n\tcosmocc -o build/bootstrap/premake_bootstrap -DPREMAKE_NO_BUILTIN_SCRIPTS -DLUA_STATICLIB -DLUA_USE_POSIX -DLUA_USE_DLOPEN -I\"$(LUA_DIR)\" -I\"$(LUASHIM_DIR)\" $(SRC) -lm -ldl -lrt\n\t./build/bootstrap/premake_bootstrap embed\n\t./build/bootstrap/premake_bootstrap --to=build/bootstrap --cc=cosmocc gmake2\n\t$(MAKE) -C build/bootstrap -j`getconf _NPROCESSORS_ONLN` config=$(CONFIG)\n"
        },
        {
          "name": "Bootstrap.sh",
          "type": "blob",
          "size": 1.330078125,
          "content": "#!/bin/sh\n\nDIR=$( cd \"$( dirname \"$0\" )\" && pwd )\ncd \"$DIR\"\n\nCOSMO_FLAG=\"\"\nfor arg in \"$@\"; do\n  if [ \"$arg\" = \"-cosmo\" ]; then\n    COSMO_FLAG=\"cosmo\"\n    break\n  fi\ndone\n\nPLATFORM_ARG=\"\"\nCONFIG_ARG=\"\"\nPREMAKE_OPTS_ARG=\"\"\n\nif [ -n \"$PLATFORM\" ]; then\n  PLATFORM_ARG=\"PLATFORM=$PLATFORM\"\nfi\n\nif [ -n \"$CONFIG\" ]; then\n  CONFIG_ARG=\"CONFIG=$CONFIG\"\nfi\n\nif [ -n \"$PREMAKE_OPTS\" ]; then\n  PREMAKE_OPTS_ARG=\"PREMAKE_OPTS=$PREMAKE_OPTS\"\nelse\n  PREMAKE_OPTS_ARG=\"PREMAKE_OPTS=\"\nfi\n\nSYSTEM=$(uname -s)\ncase \"${SYSTEM}\" in\n   Linux)\n     NPROC=$(nproc --all)\n     make -f Bootstrap.mak ${COSMO_FLAG:-linux} $PLATFORM_ARG $CONFIG_ARG \"$PREMAKE_OPTS_ARG\" -j$NPROC\n     ;;\n   Darwin)\n     NPROC=$(sysctl -n hw.ncpu)\n     make -f Bootstrap.mak ${COSMO_FLAG:-osx} $PLATFORM_ARG $CONFIG_ARG \"$PREMAKE_OPTS_ARG\" -j$NPROC\n     ;;\n   FreeBSD|OpenBSD|NetBSD|DragonFly)\n     NPROC=$(sysctl -n hw.ncpu)\n     gmake -f Bootstrap.mak ${COSMO_FLAG:-bsd} $PLATFORM_ARG $CONFIG_ARG \"$PREMAKE_OPTS_ARG\" -j$NPROC\n     ;;\n   CYGWIN*|MINGW32*|MSYS*|MINGW*)\n     make -f Bootstrap.mak ${COSMO_FLAG:-mingw} $PLATFORM_ARG $CONFIG_ARG \"$PREMAKE_OPTS_ARG\" -j$NPROC\n     ;;\n   SunOS)\n     NPROC=$(nproc --all)\n     gmake -f Bootstrap.mak ${COSMO_FLAG:-solaris} $PLATFORM_ARG $CONFIG_ARG \"$PREMAKE_OPTS_ARG\" -j$NPROC\n     ;;\n   *)\n    echo \"Unsupported platform: '${SYSTEM}'\"\n    exit 1\n     ;;\nesac\n"
        },
        {
          "name": "CHANGES.txt",
          "type": "blob",
          "size": 48.2705078125,
          "content": "--------------------\n  5.0-beta4\n--------------------\n\nSee https://github.com/premake/premake-core/wiki/What's-New-in-5.0\nfor the complete list of changes from the Premake 4.x series.\n\nSince 5.0-beta3:\n\n* PR #2327  Removes deprecated language version flags (@nickclark2016)\n* PR #2329  Use `_SC_NPROCESSORS_ONLN` for CPU detection in BSDs. (@tritao)\n* PR #2331  Remove Deprecated Flags with Replacements, Fix Tests (@nickclark2016)\n* PR #2333  Update package repos before installing deps on Linux (@nickclark2016)\n* PR #2334  Replace MFC flag with a dedicated API (@nickclark2016)\n* PR #2341  fix documentationfile bug (@lolrobbe2)\n* PR #2342  Fix debug optimization flag for Clang (@nickclark2016)\n* PR #2343  Replace LTO flag with dedicated API (@nickclark2016)\n* PR #2347  Deprecate FatalWarnings flags in favor of fatalwarnings API (@nickclark2016)\n* PR #2349  premake.h - added e2k definition (@r-a-sattarov)\n* PR #2352  Symbolic link support in Premake (@nickclark2016)\n* PR #2355  Added ability to use system zlib (@LORgames)\n* PR #2356  Added support for riscv64 (@kxxt)\n* PR #2357  Added API for Action Deprecation (@nickclark2016)\n* PR #2358  Fixed creation of links on Unix-like OSes (@nickclark2016)\n* PR #2359  Added FreeBSD CI job (@LORgames)\n* PR #2360  Updated mbedTLS to 3.6.2 (@LORgames)\n* PR #2361  Added Clang CI jobs to Linux and FreeBSD (@LORgames)\n* PR #2362  Cleaned up minor issues in premake5.lua scripts (@LORgames)\n* PR #2363  Add support for loongarch64 (@Leoforever123)\n* PR #2364  Override Lua functions without injecting code into the library (@LORgames)\n* PR #2366  Integrated Android module into vstudio module (@LORgames)\n* PR #2367  Fixed potential use-after-free bug when calling os.getversion (@LORgames)\n* PR #2368  Add SunOS support to Bootstrap.sh (@LORgames)\n* PR #2369  Fix documentation for linkgroups (@nickclark2016)\n* PR #2370  Add ability to use system lua (@LORgames)\n* PR #2371  Add OpenBSD CI job (@LORgames)\n* PR #2372  Add NetBSD CI job (@LORgames)\n* PR #2373  Add DragonflyBSD CI job (@LORgames)\n* PR #2374  Add Solaris CI job (@LORgames)\n* PR #2375  Cleaned up VM-based CI jobs (@LORgames)\n* PR #2376  Add Emscripten system and emcc toolset support (@tritao)\n* PR #2378  Fixed configuration properties on VS Linux (@redorav)\n* PR #2381  Fix gmake/gmake2 Emscripten default toolset type. (@tritao)\n* PR #2382  Fatal warnings API fixes (@redorav)\n* PR #2383  Added CI timeout to 30 minutes (@nickclark2016)\n* PR #2385  Road to 5.0 Roadmap Publishing (@nickclark2016)\n* PR #2388  Add support for e2k (@r-a-sattarov)\n* PR #2390  [CI] Fix dependencies as ubuntu-latest becomes ubuntu-24.04 (@Jarod42)\n* PR #2392  [CI] Add depsrc matrix to mingw build (@Jarod42)\n* PR #2394  Bump jinja2 from 3.1.4 to 3.1.5 in /contrib/mbedtls/docs (@dependabot)\n* PR #2395  Fix line endings of `Bootstrap.bat`. (@tritao)\n* PR #2397  Fixes XCode Compiler C++ Version/Dialect Output (@nickclark2016)\n* PR #2400  Fix token ordering for LINKFILE/LINKDIR (@nickclark2016)\n\nSince 5.0-beta2:\n\n* PR #1841  Update shadertype.md (@TylerDahl)\n* PR #1842  Update shaderobjectfileoutput.md (@TylerDahl)\n* PR #1843  Update shadermodel.md (@TylerDahl)\n* PR #1942  Release/v5.0 beta2 (@premake)\n* PR #1951  [Codelite] Fix custom build with missing directory (@Jarod42)\n* PR #1952  vstudio: add usestandardpreprocessor option (@flakey5)\n* PR #1954  Add newoption.catagory to documentation, mark os.is as deprecated (@thomashope)\n* PR #1959  Use admonitions in documentation for things marked as deprecated (@thomashope)\n* PR #1970  Updated Android docs (@LORgames)\n* PR #1971  Fixed a couple of issues with the Custom Rules docs (@LORgames)\n* PR #1975  Strip linking decorators for sibling projects (@LORgames)\n* PR #1976  Android projects use IncludePath instead of ExternalIncludePath (@LORgames)\n* PR #1978  Added support for CopyFileToFolders via Copy buildaction (@LORgames)\n* PR #1980  Added UWP support for VS projects (@LORgames)\n* PR #1981  Update usefullpaths.md (@nepp95)\n* PR #1985  Update defaultplatform.md (@GiacomoMaino)\n* PR #1992  Add AntTarget to vsandroid project file (@0x416c69)\n* PR #1997  Add validation for toolset. (@Jarod42)\n* PR #2003  Allow to specify \"--cc=msc\" as command line. (@Jarod42)\n* PR #2004  Handle entrypoint for msc. (@Jarod42)\n* PR #2006  `externalwarnings`, `externalanglebrackets`, `externalincludedirs` was already available in vs2019 (@Jarod42)\n* PR #2009  Fix typos in comment. (@Jarod42)\n* PR #2010  Typo fix (@brno32)\n* PR #2011  Add support for unity builds (@Sharlock93)\n* PR #2022  Fix Debian build recepie. (@KOLANICH-tools)\n* PR #2023  Fix support of openmp for visual studio with clang toolset. (@Jarod42)\n* PR #2024  Fix typo in bytecode description. (@Jarod42)\n* PR #2025  Fix missing targets file issue in some C++ nuget packages (@hanagasira)\n* PR #2027  `sanitize { \"Address\" }` should set link flags too for gcc/clang. (@Jarod42)\n* PR #2028  Add support for idirafter flag in GCC/Clang (@nickclark2016)\n* PR #2032  Change to minimize differences after Codelite re-save the file (@Jarod42)\n* PR #2034  Robustify `http.get` tests with retry. (@Jarod42)\n* PR #2039  gmake2: Fix detecting msdos vs posix shell (@Peter0x44)\n* PR #2042  Fix `compileas \"C\"` and `\"C++\"` for gcc (shared with clang). (@Jarod42)\n* PR #2052  Fix typo (@rafaelcn)\n* PR #2061  Fixed issue with Codelite unit test (@LORgames)\n* PR #2064  Updated actions from v2 to v3 (@LORgames)\n* PR #2066  Improve error message of `include` (@Jarod42)\n* PR #2070  Add support of prelink steps (similar to prebuild steps) for Codelite. (@Jarod42)\n* PR #2072  Fix prelink step dependencies for gmake (to be done after compilation). (@Jarod42)\n* PR #2075  remove trailing whitespaces and add new line at eof (@hanagasira)\n* PR #2076  Allow to select specific version of msc in command line. (@Jarod42)\n* PR #2081  Add some missing flags for msc toolset (@Jarod42)\n* PR #2084  Update debugdir.md docs to clarify feature support (@thomashope)\n* PR #2087  Add clarification for relative paths (@learn-more)\n* PR #2088  Fix nil indexing for codelite (@Jarod42)\n* PR #2090  Add support to `undefines` for Codelite. (@Jarod42)\n* PR #2102  remove reference to non existent example. (@mcarlson-nvidia)\n* PR #2104  Add VS2022 to list of valid kinds for Android Packaging (@premake)\n* PR #2117  Require unistd.h for macosx in libzip (@nickclark2016)\n* PR #2118  Changes target of HTTP tests to hopefully resolve test issues in CI (@nickclark2016)\n* PR #2122  Fix `premake.findProjectScript` of previous commit. (@Jarod42)\n* PR #2127  Fixes for using debugger under Linux (@vadz)\n* PR #2131  Use call array for MSVS filters file generation too (@vadz)\n* PR #2135  Fix libzip missing a library (@KanuX-14)\n* PR #2172  Custom LLVM Versions for VS2019+ (@nickclark2016)\n* PR #2187  Enable code analysis via clang-tidy in Visual Studio (@theComputeKid)\n* PR #2194  [vs*] Allow to have per-file `cdialect`/`cppdialect`. (@Jarod42)\n* PR #2195  [vs2010+] Handle `compileas` for files with \"unknown\" extensions. (@Jarod42)\n* PR #2203  Add CA root certificate path for Haiku (@augiedoggie)\n* PR #2217  Add Library to available shadertypes (@vkaytsanov)\n* PR #2237  [CI] add dependabot.yml to maintain version action up to date (@Jarod42)\n* PR #2238  Bump the github-actions group with 3 updates (@premake)\n* PR #2243  Fix stack manipulation in Premake's `luaL_loadfilex` override. (@tritao)\n* PR #2251  Add a `os.hostarch()` function to get the host system architecture. (@tritao)\n* PR #2252  Document `os.rename` and `os.getenv` APIs (@tritao)\n* PR #2253  Add `term.clearToEndOfLine` and `term.moveLeft` API additions. (@tritao)\n* PR #2254  Adds `desktop` system tag to desktop systems. (@tritao)\n* PR #2255  Move sanitize, visibility and inlinesvisibility to shared table. (@alex-rass-88)\n* PR #2261  Add tests for `table.merge`. (@tritao)\n* PR #2263  Adds a new `os.targetarch()` function. (@tritao)\n* PR #2264  Show error messages from broken includes (@richard-sim)\n* PR #2268  Re-structure common docs files into sub-folders. (@tritao)\n* PR #2269  Upgrade docs to latest Docusaurus version. (@tritao)\n* PR #2271  Add `linker` flag and `LLD` support. (@tritao)\n* PR #2272  Fixed issue with include failing to find embedded files (@LORgames)\n* PR #2274  Port Premake to Cosmopolitan Libc (@tritao)\n* PR #2277  Add C++23 cppdialect (@jlaumon)\n* PR #2278  Prevent empty arrays as expected values for test.contains and test.excludes (@LORgames)\n* PR #2279  Added ci job to simplify required checks in PRs (@LORgames)\n* PR #2280  Upgrade `libcurl` to latest. (@tritao)\n* PR #2281  Fix vstudio/MSC not supporting the C++23 flag yet (@jlaumon)\n* PR #2283  Miscelanneous cleanups (@tritao)\n* PR #2284  Fix `os.host` for Cosmopolitan build (@tritao)\n* PR #2287  [doc] Write doc for `unsignedchar` (@Jarod42)\n* PR #2294  Add projects web and github (@Jarod42)\n* PR #2299  Remove generated \"website/node_modules\"'s files from project (@Jarod42)\n* PR #2301  Fix spelling insice -> inside (@jonesy-b-dev)\n* PR #2316  Update modules.md (@day-garwood)\n\nSince 5.0-beta1:\n\n* PR #1737  Change Visual Studio Version to 17 so sln is opened with VS2022 (@simco50)\n* PR #1744  Add check for missing values in documentation (@LORgames)\n* PR #1745  Adding documentation for module options (@hannes-harnisch)\n* PR #1747  Added API for CompileAsWinRT (@LORgames)\n* PR #1749  Changed C++20 to emit C++20 instead of C++Latest in MSVC (@nickclark2016)\n* PR #1750  Added support for AppxManifest files (@LORgames)\n* PR #1752  Added C17/GNU17 support to gmake/gmake2 exporters (@nickclark2016)\n* PR #1753  Update documentation link in README (@nickclark2016)\n* PR #1754  Improve external include & warning support (@englercj)\n* PR #1757  Add support for `kind \"None\"` as do nothing for gmake/gmake2 (@Jarod42)\n* PR #1760  Add Community Update #10 (@starkos)\n* PR #1762  Add support of kind \"None\" for Codelite (@Jarod42)\n* PR #1763  Fix `make clean` handling of generated files (@starkos)\n* PR #1771  Codelite PCH Fix for obsolete `UseDifferentPCHFlags=\"no\"` (@Jarod42)\n* PR #1777  Migrate website to latest DocSearch (@starkos)\n* PR #1785  add \"vs2022\" to the list of available actions (@Enhex)\n* PR #1787  Remove unavailable modules (@KyrietS)\n* PR #1788  Add a new \"ScanForModuleDependencies\" flag. (@LoneBoco)\n* PR #1789  Include the configuration condition for ExternalWarningLevel. (@LoneBoco)\n* PR #1790  Adding C++ module file extensions and implementing \"allmodulespublic\" (@hannes-harnisch)\n* PR #1796  Fix #1795: project generation fails with \"Error: attempt to index a function value\" (@somyungoh)\n* PR #1809  Feature for disabling inherited dependencies (@hannes-harnisch)\n* PR #1820  Use windows-2019 instead of windows-lastest (temporarily) (@KyrietS)\n* PR #1821  Use vswhere.exe in Windows pipeline (@KyrietS)\n* PR #1826  Added documentation for static and shared linking suffixes (@nickclark2016)\n* PR #1834  contrib/curl: update ifdef condition for MCST-LCC compiler (@r-a-sattarov)\n* PR #1851  Updated LICENSE.txt copyright year (@nickclark2016)\n* PR #1855  Changed MMD to MD in gmake/gmake2 outputs for gcc/clang. (@nickclark2016)\n* PR #1860  Add support of openmp for gcc/clang. (@Jarod42)\n* PR #1861  Fix Codelite generation of empty source tree project. (@Jarod42)\n* PR #1863  Fix build failed in mingw x86 (@simbit18)\n* PR #1867  Improve uuid generation on Linux (@flakey5)\n* PR #1876  Escape group names when creating rules (@nickclark2016)\n* PR #1882  Added Unit Test for Workspace Generation (@nickclark2016)\n* PR #1883  Fixes the generation of source projects (@nickclark2016)\n* PR #1886  Added MinGW CI job (@LORgames)\n* PR #1893  Add docs for embed and embedAndSign Xcode options (@thomashope)\n* PR #1894  Fix openmp for xcode. (@Jarod42)\n* PR #1900  Updated Bug Report Template to add exporter selection (@nickclark2016)\n* PR #1904  `usingdirs` wiki typo (@BttrDrgn)\n* PR #1909  Typo in title (@CeruttiNicolas)\n* PR #1910  Fix case.  (@Jarod42)\n* PR #1913  Fix Codelite/gmake2 `buildmessage` escaping. (@Jarod42)\n* PR #1923  Add address sanitizer flags (@englercj)\n\nSince 5.0-alpha16:\n\n* PR #1555  Added API to disable fast up to date checks (@nickclark2016)\n* PR #1570  Initial C++20 module support for Visual Studio (@hannes-harnisch)\n* PR #1619  Xcode embed libraries (@kellygravelyn)\n* PR #1625  Remove \"*ng\" action deprecation (@noresources)\n* PR #1629  Added support for Premake on macOS universal binary (@tempura-sukiyaki)\n* PR #1635  Fix typo in Using Premake documentation (@abhiss)\n* PR #1638  Fix broken links in docs (@KyrietS)\n* PR #1642  Fix spelling mistake (@Troplo)\n* PR #1644  Fix author name and update time on pages (@KyrietS)\n* PR #1645  Add missing support for prebuildmessage/postbuildmessage for Codelite. (@Jarod42)\n* PR #1649  Fix curl header search path (@depinxi)\n* PR #1654  xcode4: Fix missing link of sibling project with custom targetextension (@depinxi)\n* PR #1655  Compiler Version support for Visual Studion 2017+ (@nickclark2016)\n* PR #1657  Renormalize line endings (@nickclark2016)\n* PR #1661  Add frameworkdirs support to gmake and gmake2 with gcc/clang toolsets (@depinxi)\n* PR #1663  compilebuildoutputs make some comments obsolete. (@Jarod42)\n* PR #1668  Fix v6 bootstrapping from v5 (@starkos)\n* PR #1673  Updated sidebar to include toolsversion link (@premake)\n* PR #1680  Fix some build issues with mingw (@Biswa96)\n* PR #1682  Add Community Update #9 (@starkos)\n* PR #1687  Update deprecated entry for `newaction` (@Jarod42)\n* PR #1704  VS2022 Exporter (@nickclark2016)\n* PR #1710  Add support for SSE 4.2. (@ActuallyaDeviloper)\n* PR #1712  Add OpenMP support for Visual Studio (@T-rvw)\n* PR #1713  Upgrade docusaurus version to beta.6 (@KyrietS)\n* PR #1715  Docs maintenance (@KyrietS)\n* PR #1718  Deprecate `configuration()` (@starkos)\n* PR #1720  Improve `justmycode` (@T-rvw)\n* PR #1723  Add condition to `.csproj` references ItemGroup (@cicanci)\n* PR #1726  Updated cdialect and cppdialect docs (@LORgames)\n* PR #1727  Updated architecture docs (@LORgames)\n* PR #1730  Added missing compileas values to docs (@LORgames)\n* PR #1734  Add VS 2022 bootstrapping support (@afxw)\n* PR #1736  Update showcase to include Orx (@sausagejohnson)\n* PR #1662  Handle buildcommand for Codelite (@Jarod42)\n* PR #1658  Fix D module compiler output for Visual Studio (@nickclark2016)\n* PR #1728  Add action to check for and generate missing documentation (@LORgames)\n* PR #1721  Add custom rules for Gmake2 & Codelite (@Jarod42)\n* PR #1739  Fix #1628 failing macOS os.findlib() test (@starkos)\n\nSince 5.0-alpha15:\n\n* PR #1430  Fixed adding LD_LIBRARY_PATH to the executable run command. (@Enhex)\n* PR #1439  Disable XP deprecation warning for Visual Studio projects (@withmorten)\n* PR #1446  Do not add <Link> for .NET resources or the resource will not be properly embedded. (@rhuvendiek)\n* PR #1447  Added /Wall to possible warning levels for Visual Studio (@ethan-wallace)\n* PR #1454  Bootstrap.mak clean target(s) (@noresources)\n* PR #1460  Add C++20 cppdialect for C++ projects (@nickclark2016)\n* PR #1462  Added clang as a valid option for projects generated with vs2019 (@nickclark2016)\n* PR #1468  macOS deployment target support for gcc and clang (@noresources)\n* PR #1473  macOS os.getversion() improvements (@noresources)\n* PR #1477  Add support for .swift file for xcode (@socialpoint)\n* PR #1481  Improved ability to override XCode generator (@LORgames)\n* PR #1482  Disable redirect test until HTTP endpoint is fixed (@LORgames)\n* PR #1483  Add file details to Windows builds including version number (@LORgames)\n* PR #1484  Fixed issue with os.matchfiles and symlinks (@LORgames)\n* PR #1485  Added Windows implementation to os.touchfile to avoid issues with truncating the file (@LORgames)\n* PR #1499  GitHub Actions: Artifacts (@sphene)\n* PR #1503  Update cxx standard; (@continue98)\n* PR #1505  Fix sysincludedirs for codelite. (@Jarod42)\n* PR #1506  Fix quote escaping in Codelite. (@Jarod42)\n* PR #1515  ConformanceMode flag implemented for >= vs2017 (@cos-public)\n* PR #1519  Add Metal shader files as source code (@nickgravelyn)\n* PR #1522  Fixed external library linking for Clang in VS2019+ (@nickclark2016)\n* PR #1523  Added C++1z and C++2a dialect options for XCode (@nickclark2016)\n* PR #1525  [Codelite] Only active (i.e. unique) configuration should be selected. (@Jarod42)\n* PR #1527  Removed old CI build files (@LORgames)\n* PR #1528  Added COPYFILE and COPYDIR tokens (@LORgames)\n* PR #1529  NMake projects can now specify buildoptions and cppdialect (@LORgames)\n* PR #1530  Remove unused code in vs2010_vcxproj.lua (@LORgames)\n* PR #1532  Disable network tests; add --test-all flag to enable (@starkos)\n* PR #1534  Added Ability to Disable JMC in Visual Studio (@nickclark2016)\n* PR #1540  Xcode improvements (@noresources)\n* PR #1542  Improve the user contribution resources (@premake)\n* PR #1551  Added NetCore to CLR API (@nickclark2016)\n* PR #1552  Fix MSC LTO, runtime, subsystem (@JoelLinn)\n* PR #1554  clang Use `llvm-ar` linker when LTO flag is set. (@JoelLinn)\n* PR #1560  Added newer shader versions (@dpeter99)\n* PR #1562  Remove moduledownloader to avoid RCE. (@xenia-project)\n* PR #1564  Improved net version check to also support net5.0 and beyond (@ClxS)\n* PR #1565  AllowUnsafeBlocks will now be a project level property in new format (@ClxS)\n* PR #1566  Set execute bit on Bootstrap.bat (@ratzlaff)\n* PR #1571  useFullPaths config property for Visual Studio projects (@cos-public)\n* PR #1576  Mesh and amplification shader type for Visual Studio (@pkurth)\n* PR #1587  Introduce new website with docs with docusaurus (@KyrietS)\n* PR #1589  os.outputof: add a second argument to select which stream to output (@noresources)\n* PR #1593  Update to mbedtls 2.25 (@susnux)\n* PR #1594  Added reference pages to docs (@KyrietS)\n* PR #1597  Port user guide pages from wiki (@starkos)\n* PR #1600  Add GitHub Action workflow for website deployment (@KyrietS)\n* PR #1602  Rework website home & download pages (@starkos)\n* PR #1604  Break out community section on website (@starkos)\n* PR #1606  add RemoveUnreferencedCodeData option to disable /Zc:inline (@withmorten)\n* PR #1607  Add Algolia search (@KyrietS)\n* PR #1608  Fix Premake logo in README (@KyrietS)\n* PR #1609  Encourage contributors to align the docs (@KyrietS)\n* PR #1610  Improve new user website navigation (@starkos)\n* PR #1614  Set up blog; move community updates (@starkos)\n\nSince 5.0-alpha14:\n\n* PR #1086  Added support for Objective-C and Objective-C++ in xcode and gmake2nil (@LORgames)\n* PR #1192  Update path.lua (@dsvi)\n* PR #1229  Generated makefiles no longer error when a configuration can be missing (@LORgames)\n* PR #1275  Fixed various issues with escaping in CodeLite generator (@LORgames)\n* PR #1280  Bootstrap.bat: Default to latest Visual Studio available (@tdesveauxPKFX)\n* PR #1281  Source package improvements (@tdesveauxPKFX)\n* PR #1282  Fix VS2019 solution icons (@ifarbod)\n* PR #1285  Use correct values for MinimumVisualStudioVersion in Android projects (@ifarbod)\n* PR #1289  Haiku fixes (@mmuman)\n* PR #1296  Fix source packaging (@tdesveauxPKFX)\n* PR #1298  Update D module to VS2019 and latest D compiler options. (@TurkeyMan)\n* PR #1305  Reconcile logic within os_matchisfile() (@cfs-pure)\n* PR #1313  Activating Open Collective (@opencollective)\n* PR #1316  Add FUNDING.yml for GitHub Sponsors (@starkos)\n* PR #1318  Updated mismatched android config to the value in the allowed stl table (@LORgames)\n* PR #1323  Update copyright year in support files (@starkos)\n* PR #1324  Add a CONTRIBUTING.md (@starkos)\n* PR #1325  Improve the README (@starkos)\n* PR #1326  Update issue templates (@premake)\n* PR #1327  Add a pull request template (@premake)\n* PR #1332  Account for filename collisions on systems with case-insensitive file… (@ratzlaff)\n* PR #1333  Cleanup related to #1332 (@ratzlaff)\n* PR #1334  Implement 'compileas' for vc2008 (@ratzlaff)\n* PR #1337  On OSX, convert systemversion to MACOSX_DEPLOYMENT_TARGET (@baconpaul)\n* PR #1340  Upgrade Lua from 5.3.4 to 5.3.5 (@jp31415926)\n* PR #1341  Add new issue template \"Get help\" (@premake)\n* PR #1342  Improve bug reporting template (@premake)\n* PR #1343  Improve feature request template (@premake)\n* PR #1345  New 'listWindowsRegistry' OS API method for enumerating content of single registry subkey (@kaldap)\n* PR #1351  Added support for vcxitems project generation for VS2013+ (@LORgames)\n* PR #1352  Improved test runner usage (@LORgames)\n* PR #1353  Fix premake4.lua bootstrap build script (@fountainment)\n* PR #1355  Add shaderincludedirs to fxcompile configuration (@starkos)\n* PR #1356  Allow wildcards in xcodebuildresources (@starkos)\n* PR #1357  Replace debuggerflavor with debugger (take #2) (@starkos)\n* PR #1358  Added support for Dx11.3 shader model (@zlnimda)\n* PR #1359  Add assemblyDebug for vs2017 (@tbasnoopy)\n* PR #1360  Fix the return value of some os functions (@sp-jordi-vilalta)\n* PR #1361  Simplified unit test to resolve path issues (@LORgames)\n* PR #1362  Fixed inconsistencies in Android VS project test (@LORgames)\n* PR #1365  E2K: fixed build by MCST lcc compiler (@r-a-sattarov)\n* PR #1385  Fix pull request template (@tempura-sukiyaki)\n* PR #1386  Initial support for generating netcore and netstandard projects (@ClxS)\n* PR #1395  Fixed edge case in path.normalize (@LORgames)\n* PR #1396  Fixed bug with linkgroups only working on Premake projects (@LORgames)\n* PR #1401  Remove commands optimization which breaks tokens (@starkos)\n* PR #1402  Remove checkFunc from Resource files (@yuyoyuppe)\n* PR #1403  Add build steps to Visual Studio (@redorav)\n* PR #1404  Place all generated files in separate GENERATED list, so they all can… (@Mikhael-Danilov)\n* PR #1406  Change deferred join delimiter to non-printable character (@starkos)\n* PR #1415  Add .c++ extension support to a few spots it was missing (@englercj)\n* PR #1419  Fix #1411: Remove \"|\"  from Codelite config names (@starkos)\n* PR #1420  Fix MinGW builds of Premake (@premake)\n* PR #1421  Enable enablewarnings() for MSC (@starkos)\n* PR #1422  Added GitHub Actions (@LORgames)\n* PR #1424  Fix systemversion(\"latest\") on VS2017 (@starkos)\n* PR #1427  Fix up and improve the release docs and script (@premake)\n\nSince 5.0-alpha13:\n\n* PR #1067 Add 'Default', 'Dwarf' and 'SplitDwarf' arguments to 'debugformat' (@ratzlaff)\n* PR #1160 use ';' as default separator for vs (@WorldofBay)\n* PR #1177 Enable property categories in VS projects (@WorldofBay)\n* PR #1178 Avoid impl dependent multi-char constants (@cengizIO)\n* PR #1179 fix `xcodebuildsettings` using false (@tempura-sukiyaki)\n* PR #1180 Add `os.ios` option in xcode4 (@tempura-sukiyaki)\n* PR #1181 Release 5.0 alpha13 (@premake)\n* PR #1189 Host path.normalize: Fix normalization for paths containing tokens (@tdesveauxPKFX)\n* PR #1191 Fix objname collisions (@ratzlaff)\n* PR #1193 Add tests for xcode id generator (@ratzlaff)\n* PR #1194 Move rule property string expansion into modules (@WorldofBay)\n* PR #1197 Added missing elements in Visual Studio Makefile projects (@LORgames)\n* PR #1202 Support %{file.name} token in VS (@Blizzard)\n* PR #1203 Add support for JavaCompile in vsandroid (@tempura-sukiyaki)\n* PR #1206 Updated code lite to properly add LD_LIBRARY_PATH is set if libdirs is set (@pintodragon)\n* PR #1218 Add support & tests for XCTest sharedlibtype (@Dingobloo)\n* PR #1220 Implement the androidapilevel() API in Android packaging projects (@ifarbod)\n* PR #1221 add nil check to fileconfig.hasFileSetting (gmake) (@WorldofBay)\n* PR #1224 add missing local (@WorldofBay)\n* PR #1228 Added Win64 as a recognized platform (@LORgames)\n* PR #1230 Removed excessive escaping in CodeLite generator (@LORgames)\n* PR #1231 Fixed issue with per-configuration build commands not returning errors correctly (@LORgames)\n* PR #1236 Added support for Dx12 shader models (@CosmicRey)\n* PR #1239 Implemented the startproject option for xcode (@macsforme)\n* PR #1240 allow linking of mixed c++ assemblies (@WorldofBay)\n* PR #1244 Fixed issue with detoken not handling deferred joins correctly (@LORgames)\n* PR #1247 Added support for `csversion` API to dotnet toolset. (@tritao)\n* PR #1248 Default to Roslyn-based `csc` compiler on all platforms. (@tritao)\n* PR #1249 do not clear _isIncludingExternal in nested calls (@WorldofBay)\n* PR #1253 Xcode newid determinism (@ratzlaff)\n* PR #1258 Added support for Visual Studio 2019 solutions (@CosmicRey)\n* PR #1264 Android changes, stage 1 (#1263) (@ifarbod)\n* PR #1266 Implement the 'visibility' API for Android projects (@ifarbod)\n* PR #1267 Provide access to  json implementation (@ratzlaff)\n* PR #1276 Added support for forceincludes in CodeLite (@LORgames)\n* PR #1278 Packaging script improvement (@tdesveauxPKFX)\n\nSince 5.0-alpha12:\n\n* PR #880 Allow tokens to start with a ! to disable making paths relative. (@Blizzard)\n* PR #882 Allow filtering on host. (@Blizzard)\n* PR #883 Added basic iOS support to XCode4 (@LORgames)\n* PR #889 Fix context.mergeFilters (@tdesveaux)\n* PR #897 Fix c(pp)dialect generating uppercase C(++)xx for Xcode, replace gnu99 with compiler-default (@hsandt)\n* PR #902 VS fix for projects with multiple manifest files (@Blizzard)\n* PR #913 Fix subtle bug in table.translate (@Blizzard)\n* PR #919 Add perfile flags test for gmake backend. (@Blizzard)\n* PR #920 small fix in self-test module. (@Blizzard)\n* PR #921 Compiler warnings (@Blizzard)\n* PR #922 gmake2 bug fix.  When generating gmake file with pch headers (@Blizzard)\n* PR #923 Add Visual Studio ARM64 support.  (@Blizzard)\n* PR #926 Fixes translateCommandsAndPaths, and debugargs. (@Blizzard)\n* PR #927 bug fix for recursive token expansion (@Blizzard)\n* PR #928 sometimes due to ordering of test, we're in a rule scope. (@Blizzard)\n* PR #931 Added synchronous and C-Throw to VS projects. (@CreativeAssembly)\n* PR #932 Added extra information for Windows platform when copyfile fails. (@pjohalloran)\n* PR #938 Added `staticruntime` API. (#163) (@premake)\n* PR #939 Resolve the rule properties for gmake (#162) (@premake)\n* PR #941 Fix makefile PCH tab problem (@premake)\n* PR #944 C++0x dialect support (@premake)\n* PR #945 Natvis files have an item group. (@premake)\n* PR #948 Fixed a bug in gmake2 with clang and pch. (@Gereld)\n* PR #949 Added DPI awareness support to VS2010+ projects (@LORgames)\n* PR #950 Added defaultplatform support to gmake and gmake2 actions (@LORgames)\n* PR #952 Add support for `targetextension` in xcode4 (@tempura-sukiyaki)\n* PR #957 fix gmake2 utility  (@Blizzard)\n* PR #958 fix context.addFilter (@Blizzard)\n* PR #959 Multiple gmake2 fixes (@Blizzard)\n* PR #960 Improve determinism in sln output. (@Blizzard)\n* PR #961 add 64-bit support on windows (@Blizzard)\n* PR #962 fix table.insertkeyed (@Blizzard)\n* PR #964 Add support for wildcards in mapconfig. (@Blizzard)\n* PR #965 Move part of the workspace baking up (@premake)\n* PR #966 utility projects also allow configuration of the executable path. (@Blizzard)\n* PR #967 return generated fileconfig. (@Blizzard)\n* PR #969 Fix buildoutput pathvars (@Blizzard)\n* PR #970 Table fix indexof (@Blizzard)\n* PR #979 Define _HAS_EXCEPTIONS=0 from vs2010 for exceptionhandling off (@tdesveauxPKFX)\n* PR #980 src/base and modules: change links to industriousone.com to working HTTPS github links (@catb0t)\n* PR #988 Fixed a bug with normalizing paths that contain dot folders (@LORgames)\n* PR #990 Extended Instructions sets (@tdesveauxPKFX)\n* PR #993 Fix /usr/lib64 being used as search dir before project's libdir (@alexandre-janniaux)\n* PR #994 added a 'latest' systemversion for vs2017 (@dcourtois)\n* PR #1005 Fix gmake dependencies (@premake)\n* PR #1011 Fixes an issue with custom rules tracking files. (@Dandielo)\n* PR #1018 Added release info badges to the readme (@LORgames)\n* PR #1019 Remove git submodule commands (@Passw)\n* PR #1020 Embed luasocket, add mobdebug and --debugger command line option (@redorav)\n* PR #1021 Clear additional global state between unit test runs (@starkos)\n* PR #1023 Include library directories in Codelite projects (@Gaztin)\n* PR #1029 Replace last global state block in api.reset (@starkos)\n* PR #1030 Fix vstudio symbolspath (@tdesveauxPKFX)\n* PR #1031 Fix gmake2 Makefile projects callArray (@tdesveauxPKFX)\n* PR #1033 vstudio staticlib symbolspath (@tdesveauxPKFX)\n* PR #1034 Add 'modules/android/' from premake-android (@LORgames)\n* PR #1037 HLSL Shader compilation in Visual Studio (@tdesveauxPKFX)\n* PR #1040 Get 'compileas' working when using a 'filter \"files: ...\"' scope. (@ratzlaff)\n* PR #1041 Fleshed out CI builds (@LORgames)\n* PR #1042 Add UnsignedChar API (@tdesveauxPKFX)\n* PR #1043 Add omitframepointer API (@tdesveauxPKFX)\n* PR #1044 Add Visibility API for gcc/clang toolsets (@tdesveauxPKFX)\n* PR #1045 Add debuggerflavor API (@tdesveauxPKFX)\n* PR #1046 Add structmemberalign API (@tdesveauxPKFX)\n* PR #1048 Add conditional behavior to global variables, add systemversion as first implementation (@redorav)\n* PR #1049 Add InlinesVisibility API (@tdesveauxPKFX)\n* PR #1053 Fixed issue with floatingpoint \"Strict\" causing errors in XCode (@LORgames)\n* PR #1062 Allow system(\"android\") per configuration (@redorav)\n* PR #1064 Tiny gcc fix from PR #506. (@tvandijck)\n* PR #1065 Fixes a few luasocket compile warnings. (@tvandijck)\n* PR #1066 fix a few compiler warnings. (@tvandijck)\n* PR #1068 Fix constructing executable path from argv[0] (@lanurmi)\n* PR #1069 Support successfully bootstrapping on Solaris (OpenIndiana). (@lanurmi)\n* PR #1070 Support successfully bootstrapping on OpenBSD. (@lanurmi)\n* PR #1075 Fixed bug with alias tests that caused one to three extra tests to be run (@LORgames)\n* PR #1077 Do not output colors e.g. into a pipe, unless forced. (@lanurmi)\n* PR #1078 Added GoogleTest style output for unit tests (@LORgames)\n* PR #1080 Fix curl compilation on Debian PowerPC. (@lanurmi)\n* PR #1081 cache results of shouldUseColors() (@tvandijck)\n* PR #1084 Fix httpbin useragent response format. (@SchmidtD)\n* PR #1087 Fix missing DebugInformationFormat when symbols are set to full (@rorydriscoll)\n* PR #1089 Import paths weren't translated properly (@TurkeyMan)\n* PR #1092 CodeLite workspace folders (groups) (@Gaztin)\n* PR #1093 Implemented 'debugenvs' for CodeLite (@Gaztin)\n* PR #1096 gmake2: Fix dependency for pch (@tdesveauxPKFX)\n* PR #1098 Prevent D module from adding D block in unrelated projects (@tdesveauxPKFX)\n* PR #1100 gmake2: Remove pch from FORCE_INCLUDE to allow NoPCH per-file (@tdesveauxPKFX)\n* PR #1103 gmake*: fix shell type identification (@tdesveauxPKFX)\n* PR #1104 Xcode Fixes (@erincatto)\n* PR #1105 gmake: Add rules and dependencies for directory creation (@tdesveauxPKFX)\n* PR #1107 Only set WindowsSDKDesktopARMSupport for windows systems (#172) (@Blizzard)\n* PR #1108 Fix gmake2 (@Blizzard)\n* PR #1113 Support buildaction for C++ projects (@Blizzard)\n* PR #1115 Remove Xbox 360 code from core to move and expand onto a standalone module (@redorav)\n* PR #1117 Fix Xcode autocompletion with excluded files (@sp-jordi-vilalta)\n* PR #1118 gmake2: fix cpp perfileflags (@tdesveauxPKFX)\n* PR #1125 Swap order of applying project specific config (@Blizzard)\n* PR #1126 vpath android.link fix (@Blizzard)\n* PR #1132 Refactor path.normalize and handle path ending with . (@tdesveauxPKFX)\n* PR #1136 Support server paths (@Gaztin)\n* PR #1137 Fix gmake multiple-output rule issue. (@Blizzard)\n* PR #1142 Support for CSDialect (@Blizzard)\n* PR #1143 Fix `targetextension` in xcode4 (@tempura-sukiyaki)\n* PR #1144 Add `sharedlibtype` in xcode4 (@tempura-sukiyaki)\n* PR #1145 Add support `kind:Utility` in xcode4 (@tempura-sukiyaki)\n* PR #1161 Add `xcodesystemcapabilities` in xcode4 (@tempura-sukiyaki)\n* PR #1164 ! fixed pepper fish to work with lua 5.3.4 (@neo2buha)\n* PR #1167 Add support for per-file custom build commands in xcode4 (@tempura-sukiyaki)\n* PR #1176 path.normalize: Fix when call with path surrounded with quotes (@tdesveauxPKFX)\n\nSince 5.0-alpha11:\n\n* PR #617 fix switch/separator in rules_xml (@Blizzard)\n* PR #639 Add MSBuild target to Bootstrap.mak (@nta)\n* PR #644 Don't treat \"dependson\" libraries as \"links\" libraries in Xcode (@macsforme)\n* PR #659 Add C11 flag support for GCC (@resetnow)\n* PR #668 Fix sporadic failures when using make -j# (@UmbraSoftware)\n* PR #672 Fix issue with msc.getlinks and vstudio.getLinks returning different results when 'explicit' is true. (@Blizzard)\n* PR #673 Add additional tokens to fileconfig and vs2010+. (@Blizzard)\n* PR #675 update semver.lua (@Blizzard)\n* PR #678 Escape string literals passed to defines() for Xcode (@macsforme)\n* PR #679 Better detect debug build (@TurkeyMan)\n* PR #685 Detect native source files. (@TurkeyMan)\n* PR #686 Refactor language flags to go through the language API. (@Blizzard)\n* PR #687 Windows Registry (@tvandijck)\n* PR #690 make buffered_io available for c code too. (@Blizzard)\n* PR #707 Fix missing CA certs on Windows (@Jusonex)\n* PR #718 Adding support for NotSet characterset in VS2010+ (#79) (@Blizzard)\n* PR #721 Fix CodeLite linking issues (@Blizzard)\n* PR #728 Add support of UTF-8 for Windows (@DrLynix)\n* PR #732 Fix VS2013 and older always rebuilding when debug symbols explicitly … (@jstewart)\n* PR #733 Generated project files are now correctly located beside script (@LORgames)\n* PR #734 NuGet fixes (@aleksijuvani)\n* PR #735 Fixed issue with Clang not actually supporting floatingpoint 'strict' (@LORgames)\n* PR #736 Fixed issue where VS2010+ projects didn't support floatingpoint 'Default' (@LORgames)\n* PR #737 Add string.escapepattern function (@aleksijuvani)\n* PR #738 Update curl to 7.53.1 (@aleksijuvani)\n* PR #739 Refactor _OS, os.get() & os.is() (@Blizzard)\n* PR #740 Properly deprecate WinMain flag (@LORgames)\n* PR #742 Added BSD support (@LORgames)\n* PR #743 Clean up the deprecated APIs (@industriousone)\n* PR #745 Fixed issue with using startproject API in CodeLite (@LORgames)\n* PR #746 Fixed erroneous escape usages in VS2010+ (@LORgames)\n* PR #747 Bootstrap makefile now cleans up previous builds before building (@LORgames)\n* PR #748 os.translateCommands now supports multiple tokens (@LORgames)\n* PR #749 Updated packaging script (@LORgames)\n* PR #751 CompileAs element handles C++ now (@LORgames)\n* PR #752 Fixed various issues with compiling with VS2012 (@LORgames)\n* PR #753 Added proxy URL to http options (@LORgames)\n* PR #754 Fixed issue with the OBJDIR value not being escaped (@LORgames)\n* PR #755 Add 'supports_language' callback to action (@Blizzard)\n* PR #756 Fix a call to deprecated os.get() (@Blizzard)\n* PR #757 Increased consistency of p. usage (@LORgames)\n* PR #758 Cleaned up inconsistencies in whitespace (@LORgames)\n* PR #760 Adding ARM support for Visual Studio. (@Blizzard)\n* PR #761 Removed echo off in VS rules prop generator (@LORgames)\n* PR #763 [core] Print warnings in purple (@Blizzard)\n* PR #764 [core] get file/line information on deprecated API's. (@Blizzard)\n* PR #768 [core] Fix Visual Studio ExecutablePath settings. (@Blizzard)\n* PR #769 [core] new cmd path decorations with %[] syntax (@Blizzard)\n* PR #771 [core] Use 'compileAs' API (@Blizzard)\n* PR #772 [core] Don't set default entrypoint, rely on visual studio default. (@Blizzard)\n* PR #774 Assure a default toolset is always set. (@Blizzard)\n* PR #776 [core] Use 'cdialect' and 'cppdialect' instead of 'language'. (@Blizzard)\n* PR #778 Added support at the file level for the NoPCH flag in VS200x projects (@LORgames)\n* PR #779 add os.findheader() (@noresources)\n* PR #781 Allow filters to be written as tables: (@Blizzard)\n* PR #785 Unicode file functions for Windows (@DrLynix)\n* PR #786 Fix typo in embed.lua (@DrLynix)\n* PR #787 os.comparefiles function (@DrLynix)\n* PR #788 Provide a way to 'tag' systems, and filter on those tags. (@Blizzard)\n* PR #789 Add 'tags' filter api. (@Blizzard)\n* PR #790 [self-test] fix nil dereference crash in test.isequal (@Blizzard)\n* PR #798 create object directory before generating precompiled header (@noresources)\n* PR #801 Groups in XCode workspace working. (@ricka)\n* PR #802 Suppress mkdir warning on Windows if the folder already exists (@aleksijuvani)\n* PR #803 Gmake2 module (@Blizzard)\n* PR #804 Update to Lua 5.3.4 (@Blizzard)\n* PR #805 Add --insecure option for SSL curl requests. (@Blizzard)\n* PR #806 Add premake.isSemVer function (@Blizzard)\n* PR #807 Added visual studio support for dot net .tt files (@Blizzard)\n* PR #808 Added per file rtti generation for Visual Studio (@Blizzard)\n* PR #809 Added os touchfile and a workaround for vs2010 reloading (@Blizzard)\n* PR #810 Added masm handling of seh exception handling for VS2010 and above (@Blizzard)\n* PR #811 Add 'preferredtoolarchitecture' API (@Blizzard)\n* PR #812 Add support for cppdialect in VS2015 & VS2017 actions. (@Blizzard)\n* PR #813 Add json.encode_pretty wrapper. (@Blizzard)\n* PR #814 Add premake.info message function. (@Blizzard)\n* PR #815 Errors in red. (@Blizzard)\n* PR #816 Fixed C++17 flag to work with current versions of Clang. (@Blizzard)\n* PR #817 A few gmake2 fixes due to it moving into a module. (@premake)\n* PR #818 Make module of 'gmake' action. (@Blizzard)\n* PR #821 Attempt at colors on linux (@Blizzard)\n* PR #822 Move VStudio action into a module. (@Blizzard)\n* PR #824 Set default toolsets for vs2005 and vs2008. (@Blizzard)\n* PR #825 Use workspace everywhere (@Blizzard)\n* PR #826 Escape '&' -> '&amp;' (@Mikhael)\n* PR #827 Added option to create bundle and frameworks on macOS. (@Blizzard)\n* PR #828 Normalize path in 'getfileinfo' for local host. (@Blizzard)\n* PR #829 Reduced vs2010+ file sizes by removing redundant config settings (@Blizzard)\n* PR #830 Resource generator access (@Blizzard)\n* PR #831 Fix in oven, for options that are not strings. (@Blizzard)\n* PR #832 Fix a few compiler warnings (@Blizzard)\n* PR #833 Fix empty rules. (@Blizzard)\n* PR #834 Allow modules to register C code too. (@Blizzard)\n* PR #836 Hook setTextColor in tests, so on linux/mac we don't get random color… (@Blizzard)\n* PR #837 Removed \"installer\" kinds from vs2017. (@premake)\n* PR #838 Fix bug in 'action.isConfigurable' not checking for onWorkspace. (@Blizzard)\n* PR #839 Expand {...} macros in pre|post build commands for codelite (@Mikhael)\n* PR #840 Proof of concept for binary modules. (@tvandijck)\n* PR #842 Add bsd to the output of possible platforms (@ejb1123)\n* PR #843 fix bug in testing framework leaving tests in random working folders. (@tvandijck)\n* PR #844 fix unreferenced argument warning. (@tvandijck)\n* PR #849 Write out build log element for VS utility projects (@mendsley)\n* PR #851 Fix handling of unconventional NuGet .NET Framework folders (@aleksijuvani)\n* PR #854 [core] Add High as a new warning level (@Blizzard)\n* PR #855 Add filter for <Image> files (#135) (@Blizzard)\n* PR #856 Fix path_getrelative for Windows (@Blizzard)\n* PR #857 Fix action override targetos (@Blizzard)\n* PR #858 Fix Nuget package handling to support Unix-style paths (@tritao)\n* PR #859 Use NuGet package cache instead of the API if possible (@aleksijuvani)\n* PR #860 fix for build failure on macOS in debug. (@Blizzard)\n* PR #861 Allow embedding of binary resources. (@Blizzard)\n* PR #862 small optimization in oven. (@Blizzard)\n* PR #863 fix for duplicate 'allowed'. (@Blizzard)\n* PR #864 move tags into globally accessible table, so we don't have to overload… (@Blizzard)\n* PR #865 Remove \"test.print\" calls. (@Blizzard)\n* PR #866 fix os.istarget and os.ishost to use the systemTags table as well. (@Blizzard)\n* PR #867 Fix path translate (@Blizzard)\n* PR #868 Filters always have to use \\ regardless of target platform. (@Blizzard)\n* PR #870 Fix prj.system bug in oven. (@Blizzard)\n* PR #872 Rework binmodule example to silence unit test console output (@starkos)\n* PR #874 Disable failing `os.findheader()` unit test on macOS (@starkos)\n\n\nSince 5.0-alpha10:\n\n* PR 523 New API symbols() replaces and extends \"Symbols\" flag\n* PR 524 New API symbolspath() specifies location of symbol database\n* PR 556 Add initialization hook for actions\n* PR 553 Enable \"list of paths\" for rule properties\n* PR 555 Allow multiple extensions for custom rules\n* PR 561 Add IA32 to vectorextensions()\n* PR 568 New API runpathdirs() adds rpath support\n* PR 525 Add support for Visual Studio Debug Fast Link setting\n* PR 401 Enable GCC link mode with \":static\", \":shared\"\n* PR 543 Remove architecture specific include paths on macOS\n* PR 554 Improve token expansion in rules\n* PR 570 Normalize paths to os.execute()\n* PR 546 Switch from openssl to mbedtls\n* PR 545 compilebuildoutputs() adds generated files to build\n* PR 575 New \"raw\" exporter\n* PR 581 Fix path.normalize() handling of \"..\" sequences\n* PR 587 Fix os.copyfile() handling of paths with spaces\n* PR 597 Enable edit-and-continue for VS 2015 64-bit builds\n* PR 583 Allow duplicate build commands\n* PR 605 Fix for objdir() forced path operator \"!\"\n* PR 603 Allow toolset-specific arguments to static linker\n* PR 608 Allow Visual Studio StaticLib projects to link dependencies\n* PR 610 Add defines and include paths to makefile projects\n* PR 611 Prevent force includes from breaking precompiled headers\n* PR 613 Fix os.match() detection of dot files\n* PR 607 Remove support for deprecated MonoDevelop project formats\n* PR 600 Fix VS support for symbolpath()\n* PR 521 Make Clang default toolset for macOS\n* PR 624 GCC support for C90 and C99\n* PR 628 New API linkbuildoutputs() disables automatic linking of *.obj files\n* PR 635 Improved parallelization of Makefile builds\n* PR 619 Per-file configuration support for C# projects\n* PR 649 Fix Visual Studio 2015 solution version identifier\n* PR 645 Add initial Visual Studio 2017 support\n\nSince 5.0-alpha9:\n\n* New: `symbols()`, replaces and extends flags {\"Symbols\"}\n* New: `symbolspath()` to specify location of symbol database\n* New: `table.shallowcopy()`\n* New: `vectorextensions` value \"IA32\"\n* Fix: --start-group/--end-group now only enclose project libraries\n\nSince 5.0-alpha8:\n\n* New: `buildcustomizations()` imports custom .props files for VS\n* New: `frameworksdir()` for Xcode and Make OS X projects\n* New: `nuget()` to specify NuGet packages for VS projects\n* New: `systemversion()` to specify VS target platform\n* New: `io.readfile()` and `io.writefile()`\n* New: Configurations may now be filtered by toolset\n* New: HTTP calls now support authentication\n* New: Support for XSD files in VS C# projects\n* New: MASM file categorization for VS\n* New: Integrated test framework for Premake module developers\n* Fix: VS filter ordering is now deterministic\n* Fix: VS projects and groups may now have the same name\n* Fix: May now use '.' within shell variable tokens\n* Fix: path.translate() now defaults to target system separator\n* Fix: getextension() now handles multiple dots\n* Fix: replaceextension() no longer adds leading dot\n* Fix: Improved configuration baking performance\n* Fix: Use -O0 for Clang debug optimization level\n* Fix: CodeLite now uses portable path separators\n* Fix: Improved ability to find precompiled headers in Makefiles\n* Fix: Properly escape defines in Makefile projects\n* Fix: Correct casing of UTF8 marker on Visual Studio rule files\n\nSince 5.0-alpha7:\n\n* New API: characterset()\n* New API: editorintegration()\n* New API: largeaddressaware()\n* New: Visual Studio projects now default to Unicode\n* New: Utility and Makefile project support for GMake exporter\n* New: Updated Curl to 7.45.0\n* Fix: Absolute path handling and error reporting in tokens\n* Fix: Limit use of TargetMachine to static resource library projects\n* Fix: Embed minified scripts by default, rather than bytecode\n* Fix: os.isfile() now detects Windows symbolic links\n* Fix: Correct handling of DOS environment variables in paths\n* Fix: Buffer overflow in buffered writes of large strings\n* Fix: Improved handling of absolute vs. relative path tokens\n* Fix: --cc command line option works again (stream009)\n* Fix: Use relative paths for PCH in Makefiles (stream009)\n\nSince 5.0-alpha6:\n\n* New API: additionalusingdirectories()\n* New API: largeaddressaware()\n* New: Embed bytecode to enable better debugging information\n* New: Display elapsed time at completion\n* New: Utility project support for Makefiles\n* New: Enabled SSL support in HTTP functions\n* Fix: Reduce memory usage during baking\n* Fix: Improve performance of wildcard processing\n* Fix: Preserve environment in recursive token expansion\n* Fix: Added missing defines in bootstrap script\n* Fix: Remove /usr/lib64 directories from Mac builds\n* Fix: Added newline after UTF-8 marker in Visual Studio projects\n* Fix: Duplicate escaping on include directories in Makefiles\n* Fix: os.isdir() now works with Windows symbolic links\n* Fix: Use correct path separators in C# response files\n\nSince 5.0-alpha5:\n\n* New API: ignoredefaultlibraries()\n* New: Support LLVM platform toolset in Visual Studio\n* New: Add framework folder path support\n* Fix: Improved path.normalize() handling of DOS drive letters (StiX)\n* Fix: os.match...() now supports more complex patterns\n* Fix: Only generate project files if changed\n* Fix: Improve handling of user platform names in Visual Studio\n* Fix: Duplicate \".lib\" extensions in Visual Studio\n* Fix: Improve handling of mixed case command line options\n* Fix: Remove `/E` option from Windows copy operations\n* Fix: Multiple externalproject() calls to same project\n* Fix: Improved determinism of generated project elements\n* Fix: Set platform toolset for emtpty Visual Studio projects\n* Fix: Better \"..\" handling for path.join()\n\nSince 5.0-alpha4:\n\n* New: Rename solution() to workspace()\n* New API: customtoolnamespace() (tbasnoopy)\n* New API: debuggertype() (tbasnoopy)\n* New API: entrypoint() (Blizzard)\n* New API: exceptionhandling() and rtti() (Blizzard)\n* New API: http.get() and http.download() (Blizzard)\n* New API: inlining() (Blizzard)\n* New API: zip.extract() (Blizzard)\n* New: `require()` now accepts optional version ranges\n* New: Preloaded modules now return a \"should load\" test function\n* New: Added support for IDL files in VC 2010+ (rhuvendiek)\n* New: Added `file.directory` to token environment (Gabi Davar)\n* New: Solution configurations are now fully baked (Blizzard)\n* New: Enabled per-file configuration queries (Blizzard)\n* New: Added more table functions (Blizzard)\n* New: Added more values for floatingpoint()\n* Fix: Enabled link-time optimization for Clang and GCC\n* Fix: Module loader now reports script errors correctly (Tim Wharton)\n* Fix: Wrap makefile targets in quotes (leeonix)\n* Fix: Provide better default target directories (Blizzard)\n* Fix: Escape backslashes in tokens (Damien Courtois)\n* Fix: No longer generates containers marked as external\n* Fix: Re-enable validation of supported action features (Blizzard)\n* Fix: Match Visual C PDB output to target path (leeonix)\n* Fix: Remove \".\" and \"..\" when joining paths (multiple contributors)\n* Fix: Remove trailing newlines from os.outputof() (Tim Wharton)\n* Fix: Improve token handling (multiple contributors)\n\nSince 5.0-alpha2:\n\n* New: CodeLite support\n* New: D language support\n* New: MonoDevelop support\n* New API: buildlog()\n* New API: callingconvention() (Tim Wharton)\n* New API: os.writefile_ifnotequal()\n* New API: sysincludedirs()\n* New API: syslibdirs()\n* New: toolset() can now specify a version number\n* New: Default values and categories for command line options\n* New: Add bootstrapping script for Git repository (Tim Wharton)\n* Fix: Modules are now loaded correctly in all situations (Damien Courtois)\n* Fix: Make Visual Studio debug commands absolute (amc522)\n* Fix: Allow tokens in vpaths()\n* Fix: Silence xcopy output from {COPY} command token (StiX)\n* Fix: Remove \"..\" sequences in path.join()\n* Fix: Allow CC and CXX overrides from command line (Tim Wharton)\n* Fix: Enable solution level filtering on system values\n* Fix: Make configuration flag mapping order deterministic\n* Fix: Map \"Win32\" to x86 architecture for Visual Studio\n* Fix: Correct formatting for Visual Studio rule paths\n* Fix: Make project APIs consistently lowercase\n* Fix: Disable SSE/SSE2 flags for Visual Studio 64-bit builds\n* Fix: io.open() now creates directory append (\"a\") mode\n\nSince 5.0-alpha1:\n\n* Many new debugger APIs\n* New API: endian()\n* New API: fpu()\n* New API: gccprefix()\n* New API: pic()\n* New API: runtime() (Tom van Dijck)\n* New API: undefines()\n* New API: disablewarnings(), enablewarnings(), fatalwarnings()\n* Added Visual Studio 2015 support (Tom van Dijck)\n* filter() now accepts field value aliases in the conditions\n* Fixed _ACTION and _OPTIONS filter prefixes\n* Main application logic can now be extended by modules\n* Action arguments (_ARGS) are now keyed by both index and value\n* Configuration baking and validation now skipped for execute only actions\n* os.findlib() now accepts paths to search as argument\n* Visual Studio .user files are now only generated if not empty\n* Xcode4 exporter is now available\n* Modules may now be loaded on demand where feasible\n* os.outputof() now returns command exit code as second value\n* Added AVX2 to vectorextensions()\n* Checks to prevent self-linking (Mark Chandler)\n* Added path.replaceextension() (M Skibbe)\n* Made clean functions overridable\n* Migrated x32/x64 to x86/x86_64\n* Added new debugger selection APIs\n* Fixed handling of ../ sequences in path.normalize() (Tom van Dijck)\n* Added table.tostring() (Tom van Dijck)\n* Added .editorconfig file\n* Added string.sha1() (Tom van Dijck)\n* Added verbosef() and --verbose flag (Tom van Dijck)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.1474609375,
          "content": "# Contributing to Premake\n\nThanks for your interest in contributing to Premake! :tada: We love getting [pull requests](https://www.quora.com/GitHub-What-is-a-pull-request) and rely heavily on the contributions of our community to keep Premake healthy and growing.\n\nWe want to keep it as easy as possible to contribute changes. These guidelines are intended to help smooth that process, and allow us to review and approve your changes quickly and easily. Improvements are always welcome! Feel free to [open an issue][issue-tracker] or [submit a new pull request][submit-pr]. And finally, these are just guidelines, not rules, so use your best judgement when necessary.\n\nWe do everything in [Git][git] hosted on [GitHub][github]. If you're new to this environment, you may want to begin with [Getting Started with GitHub](gh-start) and [Thinkful's GitHub Pull Request Tutorial](thinkful).\n\n## Reporting Bugs\n\nBugs should be reported on our [GitHub Issue Tracker][issue-tracker].\n\nPlease consider if this is something [you can contribute](#contributing-a-fix-or-feature) yourself. Premake is a community project run by volunteers; the best way to get something fixed is to become a contributor!\n\nBefore opening an issue, use the search feature at the top of that page to see if it has already been reported.\n\nIf you've discovered a new bug, please follow the advice in [How do I ask a good question?][how-to-ask]. While the article is intended for people asking questions on [StackOverflow](https://stackoverflow.com/), it all applies to writing a good bug report too.\n\n## Requesting New Features\n\nFeature requests should be sent to our [GitHub Issue Tracker][issue-tracker].\n\nPlease consider if this is something [you can contribute](#contributing-a-fix-or-feature) yourself. Premake is a community project run by volunteers; the best way to get a feature built is to become a contributor!\n\nBefore opening a new request, use the search feature at the top of that page to see if it has already been requested.\n\n- Explain the problem that you're having, and anything you've tried to solve it using the currently available features\n\n- Explain how this new feature will help\n\n- If possible, provide an example, like a code snippet, showing what your new feature might look like in use\n\nAlso, much of the advice in [How do I ask a good question?][how-to-ask] applies here too.\n\n## Contributing a Fix or Feature\n\nYou've created a new fix or feature for Premake. Awesome!\n\n1. If you haven't already, create a fork of the Premake repository\n\n2. Create a topic branch, and make all of your changes on that branch\n\n3. Submit a pull request; see [Writing a Good Pull Request](#writing-a-good-pull-request)\n\n4. Give us a moment. Premake is maintained volunteers on their free time, so we might not be able to respond right away. We're working on improving our turnaround time with resources like this guide and [our OpenCollective][collective].\n\nIf you're not sure what any of that means, check out [Getting Started with GitHub](gh-start) and [Thinkful's GitHub Pull Request Tutorial](thinkful) for a complete walkthrough of the process. Gain a life skill!\n\nSome tips...\n\n- Don't hesitate to ask questions on the [issue tracker](issue-tracker) if you get stuck. We're always happy to help people who are trying to contribute. Help us help you help us!\n\n- See [BUILD.txt](https://github.com/premake/premake-core/blob/master/BUILD.txt) for help getting your first build of Premake working. Be sure to run the unit tests!\n\n- Understand exactly what needs to change in Premake's output to get the effect you want. Start by manually creating a working project script to use as a reference, either by adjusting Visual Studio project settings and inspecting the results, or by hand-editing Premake generated project files. Know exactly what you need Premake to do differently before diving in.\n\n- Search the Premake code to find the element you want to change, or those nearby. This should turn up the right location to cut in your change, and also highlight the unit tests that cover that part of the code.\n\n- Copy and paste one of the existing unit tests, and then modify it to match the output you're trying to achieve. If you run the tests again you should see your new test (and only your new test) fail.\n\n- If you need to add new configuration switch(es) to support your feature, you can do that using `api.register()` in [_premake_init.lua](https://github.com/premake/premake-core/blob/master/src/_premake_init.lua).\n\n- [Overrides and Call Arrays](https://github.com/premake/premake-core/wiki/Overrides-and-Call-Arrays) explains how and why we're organizing the code the way we are. Bonus points for converting older code (i.e. GMake and Xcode exporters) to this new and improved format.\n\n- Once everything is working the way you like it, you're ready to submit a pull request for us to merge!\n\n\n### Writing a Good Pull Request\n\n- Stay focused on a single fix or feature. If you submit multiple changes in a single request, we may like some but spot issues with others. When that happens, we have to reject the whole thing. If you submit each change in its own request it is easier for us to review and approve.\n\n- Limit your changes to only what is required to implement the fix or feature. In particular, avoid style or formatting tools that may modify the formatting of other areas of the code. If your code editor supports [EditorConfig](https://editorconfig.org), turn it on to use [the .editorconfig settings](https://github.com/premake/premake-core/blob/master/.editorconfig) supplied with the Premake sources.\n\n- Write tests! You don't need to go crazy, but we will expect a unit test or two to show that your fix or feature does what it says, and doesn't break in the future. There are many test examples in Premake's source code, covering both the [modules](https://github.com/premake/premake-core/tree/master/modules) and the [core](https://github.com/premake/premake-core/tree/master/tests). Feel free to copy!\n\n- Align [documentation](https://github.com/premake/premake-core/tree/master/website) to your changes. Keeping docs up to date is very important for all users of Premake.\n\n- When you submit a change, try to limit the number of commits involved. A single commit is ideal.\n\n- Follow our coding conventions, which we've intentionally kept quite minimal.\n\n### Coding Conventions\n\n- For symbols that will be visible to project script authors, follow the Lua all-lowercase standard for names: `dosomethingcool`. It's a terrible convention, but it helps us be consistent with Lua's core libraries. Everywhere else, use the much more readable camel case: `doSomethingCool`. (We know this is confusing, and may revisit it in a future major release.)\n\n- Use tabs for indentation, not spaces\n\n- Use Unix (LF) end-of-line sequence\n\n- When in doubt, match the code that's already there\n\n\n[collective]: https://opencollective.com/premake\n[gh-start]: https://help.github.com/en/categories/getting-started-with-github\n[git]: https://git-scm.com\n[github]: https://github.com\n[how-to-ask]: https://stackoverflow.com/help/how-to-ask\n[issue-tracker]: https://github.com/premake/premake-core/issues\n[submit-pr]: https://github.com/premake/premake-core/pulls\n[thinkful]: https://www.thinkful.com/learn/github-pull-request-tutorial/\n"
        },
        {
          "name": "CONTRIBUTORS.txt",
          "type": "blob",
          "size": 2.73046875,
          "content": "As the number of Premake contributors has grown, this list has become more\ndifficult to manage in a meaningful way. I'm leaving it here as part of the\nhistorical records. If you find yourself in need of a list of contributors,\nconsider running:\n\n     git shortlog -sn\n\n--------------------------------------------------------------------------\n\nThis file contains a list of people who've made non-trivial contributions\nto Premake 5.  People who commit code to the project are encouraged to\nadd their names here. And many thanks to those who contributed fixes and\nimprovements to earlier versions of Premake (feel free to add your name\nin here too)!\n\nOriginal design and implementation:\n  Jess Perkins <starkos@industriousone.com>\n\nMain Contributors\n  Blizzard Entertainment (contact tvandijck@blizzard.com)\n  Manu Evans <https://github.com/TurkeyMan>\n  Sam Surtees <s.surtees@lorgames.com>\n\nBuilds and Infrastructure:\n  Mihai Sebea <http://twitter.com/mihai_sebea>\n    * Nightly binary packages\n    * Nightly Jenkins builds and error reports\n\nPatch contributors:\n  Bastien Brunnenstein <bastien.brunnenstein@ubisoft.com>\n    * support wildcards in path tokens\n  Damien Courtois <https://github.com/dcourtois>\n    * module loading fixes\n    * bug fixes\n  David Ely <https://github.com/megaeels>\n    * symbols() API and flag deprecation\n  Gabi Davar <gabi.davar@discretix.com>\n    * added file.directory to token environment\n  João Matos (joao@tritao.eu)\n    * HTTP download support\n    * C# / C++/CLI language support improvements and bugfixes\n    * Visual Studio and Make improvements and bugfixes\n    * response files support for Make backend\n    * numerous bug fixes and smaller features\n  leeonix <real-like@yeah.net>\n    * bug fixes\n  Lusito <core@roughael.net>\n    * path.join() fixes\n  Mark Chandler <https://bitbucket.org/mchandler_blizzard>\n    * prevent self-linking\n  Matthew Endsley <https://github.com/mendsley>\n    * File matching improvements\n  Mark Sararu <mark.sararu@gmail.com>\n    * Makefile bug fixes\n  Mihai Sebea <http://twitter.com/mihai_sebea>\n    * Xcode exporter fixes and improvements\n  M Skibbe\n    * path.replaceextension()\n  Renaud Guillard <https://bitbucket.org/noresources>\n    * add library search paths argument to os.findlib()\n    * return command exit code from os.outputof()\n    * bug fixes and smaller improvements\n  rhuvendiek <rhuvendiek@schueco.com>\n    * Visual C 2010 IDL file support\n  Sami Kankaristo <sami@indiumgames.fi>\n    * Utility project support for Makefiles\n  tbasnoopy <tba-snoopy@gmx.de>\n    * customtoolnamespace()\n    * debuggertype()\n  Tim Wharton <https://github.com/moomalade>\n    * boostrapping scripts\n    * callingconvention()\n    * makefile environment overrides\n    * module loading improvements\n    * os.outputof() improvements\n"
        },
        {
          "name": "FUNDING.yml",
          "type": "blob",
          "size": 0.0244140625,
          "content": "open_collective: premake\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.498046875,
          "content": "Copyright (c) 2003-2022 Jess Perkins and individual contributors.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  1. Redistributions of source code must retain the above copyright notice,\n     this list of conditions and the following disclaimer.\n\n  2. Redistributions in binary form must reproduce the above copyright notice,\n     this list of conditions and the following disclaimer in the documentation\n     and/or other materials provided with the distribution.\n\n  3. Neither the name of Premake nor the names of its contributors may be\n     used to endorse or promote products derived from this software without\n     specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1201171875,
          "content": "<p align=\"center\">\n  <a href=\"https://premake.github.io/\" target=\"blank\"><img src=\"https://premake.github.io/img/premake-logo.png\" height=\"200\" width=\"200\" alt=\"Premake\" /></a>\n</p>\n\n<p align=\"center\">\n    <img src=\"https://img.shields.io/github/release/premake/premake-core/all.svg\" alt=\"Latest release\" />\n    <img src=\"https://img.shields.io/github/release-date-pre/premake/premake-core.svg\" alt=\"Release date\" />\n    <img src=\"https://img.shields.io/github/commits-since/premake/premake-core/v5.0.0-beta4.svg\" alt=\"Commits\" />\n    <a href=\"https://opensource.org/licenses/BSD-3-Clause\" target=\"_blank\">\n        <img src=\"https://img.shields.io/github/license/premake/premake-core\" alt=\"BSD 3-Clause\" />\n    </a>\n    <br/>\n    <a href=\"https://github.com/premake/premake-core\" target=\"_blank\">\n        <img src=\"https://github.com/premake/premake-core/actions/workflows/ci-workflow.yml/badge.svg?branch=master\" alt=\"master\" />\n    </a>\n    <a href=\"https://github.com/premake/premake-core/graphs/contributors\" target=\"_blank\">\n        <img src=\"https://img.shields.io/github/contributors/premake/premake-core?label=code+contributors\" alt=\"Contributors\" />\n    </a>\n    <a href=\"https://opencollective.com/premake\" _target=\"blank\">\n        <img src=\"https://opencollective.com/premake/all/badge.svg?label=financial+contributors\" alt=\"Contributors\" />\n    </a>\n    <a href=\"https://twitter.com/premakeapp\" target=\"_blank\">\n        <img src=\"https://img.shields.io/twitter/follow/premakeapp.svg?style=social&label=Follow\">\n    </a>\n</p>\n\n\n# Welcome to Premake\n\nPremake is a command line utility which reads a scripted definition of a software project, then uses it to perform build configuration tasks or generate project files for toolsets like Visual Studio, Xcode, and GNU Make. Premake's scripts are little [Lua](http://www.lua.org/) programs, so the sky's the limit!\n\n```lua\nworkspace \"MyWorkspace\"\n    configurations { \"Debug\", \"Release\" }\n\nproject \"MyProject\"\n    kind \"ConsoleApp\"\n    language \"C++\"\n    files { \"**.h\", \"**.cpp\" }\n\n    filter { \"configurations:Debug\" }\n        defines { \"DEBUG\" }\n        symbols \"On\"\n\n    filter { \"configurations:Release\" }\n        defines { \"NDEBUG\" }\n        optimize \"On\"\n```\n\n## Getting Started\n\n* [Documentation](https://premake.github.io/docs/)\n* [Contributing](https://github.com/premake/premake-core/blob/master/CONTRIBUTING.md)\n* [Issue Tracker](https://github.com/premake/premake-core/issues)\n\n## Sponsors\n\nPremake is a BSD-licensed open source project. Our many thanks to these fine people who help us spend more time adding features and supporting the community. :tada:\n\nWant to join them? [Learn more here](https://opencollective.com/premake). Use Premake at work? Ask your manager or marketing team about contributing too; your company logo will appear on our [website](https://premake.github.io/) and README, as well as all of our [release pages](https://github.com/premake/premake-core/releases).\n\n### Organizations\n\n<a href=\"https://opencollective.com/premake#sponsors\" target=\"_blank\"><img src=\"https://opencollective.com/premake/sponsors.svg?width=890&avatarHeight=92&button=false\"/></a>\n\n### Individuals\n\n<a href=\"https://opencollective.com/premake#backers\" target=\"_blank\"><img src=\"https://opencollective.com/premake/backers.svg?width=890&button=false\"/></a>\n\n## Contributing\n\nWe love getting [pull requests](https://www.quora.com/GitHub-What-is-a-pull-request) and rely heavily on the contributions of our community to keep Premake healthy and growing. If you're new to the project, [our Contributing Guide is here](https://github.com/premake/premake-core/blob/master/CONTRIBUTING.md).\n\nA great big thank you to all of you who have already contributed your time and know-how!\n\n<a href=\"https://github.com/premake/premake-core/graphs/contributors\"><img src=\"https://opencollective.com/premake/contributors.svg?width=890&avatarHeight=32&button=false\" /></a>\n\n## Stay in touch\n\n* Website - https://premake.github.io\n* Twitter - [@premakeapp](https://twitter.com/premakeapp)\n\n## License\n\n[BSD 3-Clause](https://opensource.org/licenses/BSD-3-Clause)\n\nThe Lua language and runtime library is &copy; TeCGraf, PUC-Rio.\nSee their website at http://www.lua.org/\n"
        },
        {
          "name": "binmodules",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doxyfile",
          "type": "blob",
          "size": 9.31640625,
          "content": "# Doxyfile 1.5.1-p1\n\n#---------------------------------------------------------------------------\n# Project related configuration options\n#---------------------------------------------------------------------------\nPROJECT_NAME           = \"Premake Internals\"\nPROJECT_NUMBER         =\nOUTPUT_DIRECTORY       = doc\nCREATE_SUBDIRS         = NO\nOUTPUT_LANGUAGE        = English\nBRIEF_MEMBER_DESC      = YES\nREPEAT_BRIEF           = YES\nABBREVIATE_BRIEF       = \"The $name class\" \\\n                         \"The $name widget\" \\\n                         \"The $name file\" \\\n                         is \\\n                         provides \\\n                         specifies \\\n                         contains \\\n                         represents \\\n                         a \\\n                         an \\\n                         the\nALWAYS_DETAILED_SEC    = YES\nINLINE_INHERITED_MEMB  = NO\nFULL_PATH_NAMES        = NO\nSTRIP_FROM_PATH        = \"\"\nSTRIP_FROM_INC_PATH    =\nSHORT_NAMES            = NO\nJAVADOC_AUTOBRIEF      = NO\nMULTILINE_CPP_IS_BRIEF = NO\nDETAILS_AT_TOP         = NO\nINHERIT_DOCS           = YES\nSEPARATE_MEMBER_PAGES  = NO\nTAB_SIZE               = 4\nALIASES                =\nOPTIMIZE_OUTPUT_FOR_C  = YES\nOPTIMIZE_OUTPUT_JAVA   = NO\nBUILTIN_STL_SUPPORT    = NO\nDISTRIBUTE_GROUP_DOC   = NO\nSUBGROUPING            = YES\n#---------------------------------------------------------------------------\n# Build related configuration options\n#---------------------------------------------------------------------------\nEXTRACT_ALL            = NO\nEXTRACT_PRIVATE        = NO\nEXTRACT_STATIC         = NO\nEXTRACT_LOCAL_CLASSES  = YES\nEXTRACT_LOCAL_METHODS  = NO\nHIDE_UNDOC_MEMBERS     = YES\nHIDE_UNDOC_CLASSES     = YES\nHIDE_FRIEND_COMPOUNDS  = NO\nHIDE_IN_BODY_DOCS      = NO\nINTERNAL_DOCS          = NO\nCASE_SENSE_NAMES       = NO\nHIDE_SCOPE_NAMES       = NO\nSHOW_INCLUDE_FILES     = YES\nINLINE_INFO            = YES\nSORT_MEMBER_DOCS       = YES\nSORT_BRIEF_DOCS        = NO\nSORT_BY_SCOPE_NAME     = NO\nGENERATE_TODOLIST      = YES\nGENERATE_TESTLIST      = YES\nGENERATE_BUGLIST       = YES\nGENERATE_DEPRECATEDLIST= YES\nENABLED_SECTIONS       =\nMAX_INITIALIZER_LINES  = 30\nSHOW_USED_FILES        = YES\nSHOW_DIRECTORIES       = NO\nFILE_VERSION_FILTER    =\n#---------------------------------------------------------------------------\n# configuration options related to warning and progress messages\n#---------------------------------------------------------------------------\nQUIET                  = YES\nWARNINGS               = YES\nWARN_IF_UNDOCUMENTED   = YES\nWARN_IF_DOC_ERROR      = YES\nWARN_NO_PARAMDOC       = NO\nWARN_FORMAT            = \"$file:$line: $text\"\nWARN_LOGFILE           =\n#---------------------------------------------------------------------------\n# configuration options related to the input files\n#---------------------------------------------------------------------------\nINPUT                  = src\nFILE_PATTERNS          = *.c \\\n                         *.cc \\\n                         *.cxx \\\n                         *.cpp \\\n                         *.c++ \\\n                         *.d \\\n                         *.java \\\n                         *.ii \\\n                         *.ixx \\\n                         *.ipp \\\n                         *.i++ \\\n                         *.inl \\\n                         *.h \\\n                         *.hh \\\n                         *.hxx \\\n                         *.hpp \\\n                         *.h++ \\\n                         *.idl \\\n                         *.odl \\\n                         *.cs \\\n                         *.php \\\n                         *.php3 \\\n                         *.inc \\\n                         *.m \\\n                         *.mm \\\n                         *.dox \\\n                         *.py\nRECURSIVE              = YES\nEXCLUDE                =\nEXCLUDE_SYMLINKS       = NO\nEXCLUDE_PATTERNS       = */UnitTest++/* */lua-5.1.1/*\nEXAMPLE_PATH           =\nEXAMPLE_PATTERNS       = *\nEXAMPLE_RECURSIVE      = NO\nIMAGE_PATH             =\nINPUT_FILTER           =\nFILTER_PATTERNS        =\nFILTER_SOURCE_FILES    = NO\n#---------------------------------------------------------------------------\n# configuration options related to source browsing\n#---------------------------------------------------------------------------\nSOURCE_BROWSER         = NO\nINLINE_SOURCES         = NO\nSTRIP_CODE_COMMENTS    = YES\nREFERENCED_BY_RELATION = NO\nREFERENCES_RELATION    = NO\nREFERENCES_LINK_SOURCE = YES\nUSE_HTAGS              = NO\nVERBATIM_HEADERS       = NO\n#---------------------------------------------------------------------------\n# configuration options related to the alphabetical class index\n#---------------------------------------------------------------------------\nALPHABETICAL_INDEX     = NO\nCOLS_IN_ALPHA_INDEX    = 5\nIGNORE_PREFIX          =\n#---------------------------------------------------------------------------\n# configuration options related to the HTML output\n#---------------------------------------------------------------------------\nGENERATE_HTML          = YES\nHTML_OUTPUT            = html\nHTML_FILE_EXTENSION    = .html\nHTML_HEADER            =\nHTML_FOOTER            =\nHTML_STYLESHEET        =\nHTML_ALIGN_MEMBERS     = YES\nGENERATE_HTMLHELP      = NO\nCHM_FILE               =\nHHC_LOCATION           =\nGENERATE_CHI           = NO\nBINARY_TOC             = NO\nTOC_EXPAND             = NO\nDISABLE_INDEX          = NO\nENUM_VALUES_PER_LINE   = 4\nGENERATE_TREEVIEW      = NO\nTREEVIEW_WIDTH         = 250\n#---------------------------------------------------------------------------\n# configuration options related to the LaTeX output\n#---------------------------------------------------------------------------\nGENERATE_LATEX         = NO\nLATEX_OUTPUT           = latex\nLATEX_CMD_NAME         = latex\nMAKEINDEX_CMD_NAME     = makeindex\nCOMPACT_LATEX          = NO\nPAPER_TYPE             = a4wide\nEXTRA_PACKAGES         =\nLATEX_HEADER           =\nPDF_HYPERLINKS         = NO\nUSE_PDFLATEX           = NO\nLATEX_BATCHMODE        = NO\nLATEX_HIDE_INDICES     = NO\n#---------------------------------------------------------------------------\n# configuration options related to the RTF output\n#---------------------------------------------------------------------------\nGENERATE_RTF           = NO\nRTF_OUTPUT             = rtf\nCOMPACT_RTF            = NO\nRTF_HYPERLINKS         = NO\nRTF_STYLESHEET_FILE    =\nRTF_EXTENSIONS_FILE    =\n#---------------------------------------------------------------------------\n# configuration options related to the man page output\n#---------------------------------------------------------------------------\nGENERATE_MAN           = NO\nMAN_OUTPUT             = man\nMAN_EXTENSION          = .3\nMAN_LINKS              = NO\n#---------------------------------------------------------------------------\n# configuration options related to the XML output\n#---------------------------------------------------------------------------\nGENERATE_XML           = NO\nXML_OUTPUT             = xml\nXML_SCHEMA             =\nXML_DTD                =\nXML_PROGRAMLISTING     = YES\n#---------------------------------------------------------------------------\n# configuration options for the AutoGen Definitions output\n#---------------------------------------------------------------------------\nGENERATE_AUTOGEN_DEF   = NO\n#---------------------------------------------------------------------------\n# configuration options related to the Perl module output\n#---------------------------------------------------------------------------\nGENERATE_PERLMOD       = NO\nPERLMOD_LATEX          = NO\nPERLMOD_PRETTY         = YES\nPERLMOD_MAKEVAR_PREFIX =\n#---------------------------------------------------------------------------\n# Configuration options related to the preprocessor\n#---------------------------------------------------------------------------\nENABLE_PREPROCESSING   = YES\nMACRO_EXPANSION        = NO\nEXPAND_ONLY_PREDEF     = NO\nSEARCH_INCLUDES        = YES\nINCLUDE_PATH           =\nINCLUDE_FILE_PATTERNS  =\nPREDEFINED             =\nEXPAND_AS_DEFINED      =\nSKIP_FUNCTION_MACROS   = YES\n#---------------------------------------------------------------------------\n# Configuration::additions related to external references\n#---------------------------------------------------------------------------\nTAGFILES               =\nGENERATE_TAGFILE       =\nALLEXTERNALS           = NO\nEXTERNAL_GROUPS        = YES\nPERL_PATH              = /usr/bin/perl\n#---------------------------------------------------------------------------\n# Configuration options related to the dot tool\n#---------------------------------------------------------------------------\nCLASS_DIAGRAMS         = NO\nHIDE_UNDOC_RELATIONS   = YES\nHAVE_DOT               = NO\nCLASS_GRAPH            = YES\nCOLLABORATION_GRAPH    = YES\nGROUP_GRAPHS           = YES\nUML_LOOK               = NO\nTEMPLATE_RELATIONS     = NO\nINCLUDE_GRAPH          = YES\nINCLUDED_BY_GRAPH      = YES\nCALL_GRAPH             = NO\nCALLER_GRAPH           = NO\nGRAPHICAL_HIERARCHY    = YES\nDIRECTORY_GRAPH        = YES\nDOT_IMAGE_FORMAT       = png\nDOT_PATH               =\nDOTFILE_DIRS           =\nMAX_DOT_GRAPH_DEPTH    = 1000\nDOT_TRANSPARENT        = NO\nDOT_MULTI_TARGETS      = NO\nGENERATE_LEGEND        = YES\nDOT_CLEANUP            = YES\n#---------------------------------------------------------------------------\n# Configuration::additions related to the search engine\n#---------------------------------------------------------------------------\nSEARCHENGINE           = NO\n"
        },
        {
          "name": "mobdebug.lua",
          "type": "blob",
          "size": 67.23828125,
          "content": "--\n-- MobDebug -- Lua remote debugger\n-- Copyright 2011-15 Paul Kulchenko\n-- Based on RemDebug 1.0 Copyright Kepler Project 2005\n--\n\n-- use loaded modules or load explicitly on those systems that require that\nlocal require = require\nlocal io = io or require \"io\"\nlocal table = table or require \"table\"\nlocal string = string or require \"string\"\nlocal coroutine = coroutine or require \"coroutine\"\nlocal debug = require \"debug\"\n-- protect require \"os\" as it may fail on embedded systems without os module\nlocal os = os or (function(module)\n  local ok, res = pcall(require, module)\n  return ok and res or nil\nend)(\"os\")\n\nlocal mobdebug = {\n  _NAME = \"mobdebug\",\n  _VERSION = \"0.702\",\n  _COPYRIGHT = \"Paul Kulchenko\",\n  _DESCRIPTION = \"Mobile Remote Debugger for the Lua programming language\",\n  port = os and os.getenv and tonumber((os.getenv(\"MOBDEBUG_PORT\"))) or 8172,\n  checkcount = 200,\n  yieldtimeout = 0.02, -- yield timeout (s)\n  connecttimeout = 2, -- connect timeout (s)\n}\n\nlocal HOOKMASK = \"lcr\"\nlocal error = error\nlocal getfenv = getfenv\nlocal setfenv = setfenv\nlocal loadstring = loadstring or load -- \"load\" replaced \"loadstring\" in Lua 5.2\nlocal pairs = pairs\nlocal setmetatable = setmetatable\nlocal tonumber = tonumber\nlocal unpack = table.unpack or unpack\nlocal rawget = rawget\nlocal gsub, sub, find = string.gsub, string.sub, string.find\n\n-- if strict.lua is used, then need to avoid referencing some global\n-- variables, as they can be undefined;\n-- use rawget to avoid complaints from strict.lua at run-time.\n-- it's safe to do the initialization here as all these variables\n-- should get defined values (if any) before the debugging starts.\n-- there is also global 'wx' variable, which is checked as part of\n-- the debug loop as 'wx' can be loaded at any time during debugging.\nlocal genv = _G or _ENV\nlocal jit = rawget(genv, \"jit\")\nlocal MOAICoroutine = rawget(genv, \"MOAICoroutine\")\n\n-- ngx_lua debugging requires a special handling as its coroutine.*\n-- methods use a different mechanism that doesn't allow resume calls\n-- from debug hook handlers.\n-- Instead, the \"original\" coroutine.* methods are used.\n-- `rawget` needs to be used to protect against `strict` checks, but\n-- ngx_lua hides those in a metatable, so need to use that.\nlocal metagindex = getmetatable(genv) and getmetatable(genv).__index\nlocal ngx = type(metagindex) == \"table\" and metagindex.rawget and metagindex:rawget(\"ngx\") or nil\nlocal corocreate = ngx and coroutine._create or coroutine.create\nlocal cororesume = ngx and coroutine._resume or coroutine.resume\nlocal coroyield = ngx and coroutine._yield or coroutine.yield\nlocal corostatus = ngx and coroutine._status or coroutine.status\nlocal corowrap = coroutine.wrap\n\nif not setfenv then -- Lua 5.2+\n  -- based on http://lua-users.org/lists/lua-l/2010-06/msg00314.html\n  -- this assumes f is a function\n  local function findenv(f)\n    local level = 1\n    repeat\n      local name, value = debug.getupvalue(f, level)\n      if name == '_ENV' then return level, value end\n      level = level + 1\n    until name == nil\n    return nil end\n  getfenv = function (f) return(select(2, findenv(f)) or _G) end\n  setfenv = function (f, t)\n    local level = findenv(f)\n    if level then debug.setupvalue(f, level, t) end\n    return f end\nend\n\n-- check for OS and convert file names to lower case on windows\n-- (its file system is case insensitive, but case preserving), as setting a\n-- breakpoint on x:\\Foo.lua will not work if the file was loaded as X:\\foo.lua.\n-- OSX and Windows behave the same way (case insensitive, but case preserving).\n-- OSX can be configured to be case-sensitive, so check for that. This doesn't\n-- handle the case of different partitions having different case-sensitivity.\nlocal win = os and os.getenv and (os.getenv('WINDIR') or (os.getenv('OS') or ''):match('[Ww]indows')) and true or false\nlocal mac = not win and (os and os.getenv and os.getenv('DYLD_LIBRARY_PATH') or not io.open(\"/proc\")) and true or false\nlocal iscasepreserving = win or (mac and io.open('/library') ~= nil)\n\n-- turn jit off based on Mike Pall's comment in this discussion:\n-- http://www.freelists.org/post/luajit/Debug-hooks-and-JIT,2\n-- \"You need to turn it off at the start if you plan to receive\n-- reliable hook calls at any later point in time.\"\nif jit and jit.off then jit.off() end\n\nlocal socket = require \"socket\"\nlocal coro_debugger\nlocal coro_debugee\nlocal coroutines = {}; setmetatable(coroutines, {__mode = \"k\"}) -- \"weak\" keys\nlocal events = { BREAK = 1, WATCH = 2, RESTART = 3, STACK = 4 }\nlocal breakpoints = {}\nlocal watches = {}\nlocal lastsource\nlocal lastfile\nlocal watchescnt = 0\nlocal abort -- default value is nil; this is used in start/loop distinction\nlocal seen_hook = false\nlocal checkcount = 0\nlocal step_into = false\nlocal step_over = false\nlocal step_level = 0\nlocal stack_level = 0\nlocal server\nlocal buf\nlocal outputs = {}\nlocal iobase = {print = print}\nlocal basedir = \"\"\nlocal deferror = \"execution aborted at default debugee\"\nlocal debugee = function ()\n  local a = 1\n  for _ = 1, 10 do a = a + 1 end\n  error(deferror)\nend\nlocal function q(s) return string.gsub(s, '([%(%)%.%%%+%-%*%?%[%^%$%]])','%%%1') end\n\nlocal serpent = (function() ---- include Serpent module for serialization\nlocal n, v = \"serpent\", \"0.30\" -- (C) 2012-17 Paul Kulchenko; MIT License\nlocal c, d = \"Paul Kulchenko\", \"Lua serializer and pretty printer\"\nlocal snum = {[tostring(1/0)]='1/0 --[[math.huge]]',[tostring(-1/0)]='-1/0 --[[-math.huge]]',[tostring(0/0)]='0/0'}\nlocal badtype = {thread = true, userdata = true, cdata = true}\nlocal getmetatable = debug and debug.getmetatable or getmetatable\nlocal pairs = function(t) return next, t end -- avoid using __pairs in Lua 5.2+\nlocal keyword, globals, G = {}, {}, (_G or _ENV)\nfor _,k in ipairs({'and', 'break', 'do', 'else', 'elseif', 'end', 'false',\n  'for', 'function', 'goto', 'if', 'in', 'local', 'nil', 'not', 'or', 'repeat',\n  'return', 'then', 'true', 'until', 'while'}) do keyword[k] = true end\nfor k,v in pairs(G) do globals[v] = k end -- build func to name mapping\nfor _,g in ipairs({'coroutine', 'debug', 'io', 'math', 'string', 'table', 'os'}) do\n  for k,v in pairs(type(G[g]) == 'table' and G[g] or {}) do globals[v] = g..'.'..k end end\n\nlocal function s(t, opts)\n  local name, indent, fatal, maxnum = opts.name, opts.indent, opts.fatal, opts.maxnum\n  local sparse, custom, huge = opts.sparse, opts.custom, not opts.nohuge\n  local space, maxl = (opts.compact and '' or ' '), (opts.maxlevel or math.huge)\n  local maxlen, metatostring = tonumber(opts.maxlength), opts.metatostring\n  local iname, comm = '_'..(name or ''), opts.comment and (tonumber(opts.comment) or math.huge)\n  local numformat = opts.numformat or \"%.17g\"\n  local seen, sref, syms, symn = {}, {'local '..iname..'={}'}, {}, 0\n  local function gensym(val) return '_'..(tostring(tostring(val)):gsub(\"[^%w]\",\"\"):gsub(\"(%d%w+)\",\n    -- tostring(val) is needed because __tostring may return a non-string value\n    function(s) if not syms[s] then symn = symn+1; syms[s] = symn end return tostring(syms[s]) end)) end\n  local function safestr(s) return type(s) == \"number\" and tostring(huge and snum[tostring(s)] or numformat:format(s))\n    or type(s) ~= \"string\" and tostring(s) -- escape NEWLINE/010 and EOF/026\n    or (\"%q\"):format(s):gsub(\"\\010\",\"n\"):gsub(\"\\026\",\"\\\\026\") end\n  local function comment(s,l) return comm and (l or 0) < comm and ' --[['..select(2, pcall(tostring, s))..']]' or '' end\n  local function globerr(s,l) return globals[s] and globals[s]..comment(s,l) or not fatal\n    and safestr(select(2, pcall(tostring, s))) or error(\"Can't serialize \"..tostring(s)) end\n  local function safename(path, name) -- generates foo.bar, foo[3], or foo['b a r']\n    local n = name == nil and '' or name\n    local plain = type(n) == \"string\" and n:match(\"^[%l%u_][%w_]*$\") and not keyword[n]\n    local safe = plain and n or '['..safestr(n)..']'\n    return (path or '')..(plain and path and '.' or '')..safe, safe end\n  local alphanumsort = type(opts.sortkeys) == 'function' and opts.sortkeys or function(k, o, n) -- k=keys, o=originaltable, n=padding\n    local maxn, to = tonumber(n) or 12, {number = 'a', string = 'b'}\n    local function padnum(d) return (\"%0\"..tostring(maxn)..\"d\"):format(tonumber(d)) end\n    table.sort(k, function(a,b)\n      -- sort numeric keys first: k[key] is not nil for numerical keys\n      return (k[a] ~= nil and 0 or to[type(a)] or 'z')..(tostring(a):gsub(\"%d+\",padnum))\n           < (k[b] ~= nil and 0 or to[type(b)] or 'z')..(tostring(b):gsub(\"%d+\",padnum)) end) end\n  local function val2str(t, name, indent, insref, path, plainindex, level)\n    local ttype, level, mt = type(t), (level or 0), getmetatable(t)\n    local spath, sname = safename(path, name)\n    local tag = plainindex and\n      ((type(name) == \"number\") and '' or name..space..'='..space) or\n      (name ~= nil and sname..space..'='..space or '')\n    if seen[t] then -- already seen this element\n      sref[#sref+1] = spath..space..'='..space..seen[t]\n      return tag..'nil'..comment('ref', level) end\n    -- protect from those cases where __tostring may fail\n    if type(mt) == 'table' then\n      local to, tr = pcall(function() return mt.__tostring(t) end)\n      local so, sr = pcall(function() return mt.__serialize(t) end)\n      if (opts.metatostring ~= false and to or so) then -- knows how to serialize itself\n        seen[t] = insref or spath\n        t = so and sr or tr\n        ttype = type(t)\n      end -- new value falls through to be serialized\n    end\n    if ttype == \"table\" then\n      if level >= maxl then return tag..'{}'..comment('maxlvl', level) end\n      seen[t] = insref or spath\n      if next(t) == nil then return tag..'{}'..comment(t, level) end -- table empty\n      if maxlen and maxlen < 0 then return tag..'{}'..comment('maxlen', level) end\n      local maxn, o, out = math.min(#t, maxnum or #t), {}, {}\n      for key = 1, maxn do o[key] = key end\n      if not maxnum or #o < maxnum then\n        local n = #o -- n = n + 1; o[n] is much faster than o[#o+1] on large tables\n        for key in pairs(t) do if o[key] ~= key then n = n + 1; o[n] = key end end end\n      if maxnum and #o > maxnum then o[maxnum+1] = nil end\n      if opts.sortkeys and #o > maxn then alphanumsort(o, t, opts.sortkeys) end\n      local sparse = sparse and #o > maxn -- disable sparsness if only numeric keys (shorter output)\n      for n, key in ipairs(o) do\n        local value, ktype, plainindex = t[key], type(key), n <= maxn and not sparse\n        if opts.valignore and opts.valignore[value] -- skip ignored values; do nothing\n        or opts.keyallow and not opts.keyallow[key]\n        or opts.keyignore and opts.keyignore[key]\n        or opts.valtypeignore and opts.valtypeignore[type(value)] -- skipping ignored value types\n        or sparse and value == nil then -- skipping nils; do nothing\n        elseif ktype == 'table' or ktype == 'function' or badtype[ktype] then\n          if not seen[key] and not globals[key] then\n            sref[#sref+1] = 'placeholder'\n            local sname = safename(iname, gensym(key)) -- iname is table for local variables\n            sref[#sref] = val2str(key,sname,indent,sname,iname,true) end\n          sref[#sref+1] = 'placeholder'\n          local path = seen[t]..'['..tostring(seen[key] or globals[key] or gensym(key))..']'\n          sref[#sref] = path..space..'='..space..tostring(seen[value] or val2str(value,nil,indent,path))\n        else\n          out[#out+1] = val2str(value,key,indent,insref,seen[t],plainindex,level+1)\n          if maxlen then\n            maxlen = maxlen - #out[#out]\n            if maxlen < 0 then break end\n          end\n        end\n      end\n      local prefix = string.rep(indent or '', level)\n      local head = indent and '{\\n'..prefix..indent or '{'\n      local body = table.concat(out, ','..(indent and '\\n'..prefix..indent or space))\n      local tail = indent and \"\\n\"..prefix..'}' or '}'\n      return (custom and custom(tag,head,body,tail,level) or tag..head..body..tail)..comment(t, level)\n    elseif badtype[ttype] then\n      seen[t] = insref or spath\n      return tag..globerr(t, level)\n    elseif ttype == 'function' then\n      seen[t] = insref or spath\n      if opts.nocode then return tag..\"function() --[[..skipped..]] end\"..comment(t, level) end\n      local ok, res = pcall(string.dump, t)\n      local func = ok and \"((loadstring or load)(\"..safestr(res)..\",'@serialized'))\"..comment(t, level)\n      return tag..(func or globerr(t, level))\n    else return tag..safestr(t) end -- handle all other types\n  end\n  local sepr = indent and \"\\n\" or \";\"..space\n  local body = val2str(t, name, indent) -- this call also populates sref\n  local tail = #sref>1 and table.concat(sref, sepr)..sepr or ''\n  local warn = opts.comment and #sref>1 and space..\"--[[incomplete output with shared/self-references skipped]]\" or ''\n  return not name and body..warn or \"do local \"..body..sepr..tail..\"return \"..name..sepr..\"end\"\nend\n\nlocal function deserialize(data, opts)\n  local env = (opts and opts.safe == false) and G\n    or setmetatable({}, {\n        __index = function(t,k) return t end,\n        __call = function(t,...) error(\"cannot call functions\") end\n      })\n  local f, res = (loadstring or load)('return '..data, nil, nil, env)\n  if not f then f, res = (loadstring or load)(data, nil, nil, env) end\n  if not f then return f, res end\n  if setfenv then setfenv(f, env) end\n  return pcall(f)\nend\n\nlocal function merge(a, b) if b then for k,v in pairs(b) do a[k] = v end end; return a; end\nreturn { _NAME = n, _COPYRIGHT = c, _DESCRIPTION = d, _VERSION = v, serialize = s,\n  load = deserialize,\n  dump = function(a, opts) return s(a, merge({name = '_', compact = true, sparse = true}, opts)) end,\n  line = function(a, opts) return s(a, merge({sortkeys = true, comment = true}, opts)) end,\n  block = function(a, opts) return s(a, merge({indent = '  ', sortkeys = true, comment = true}, opts)) end }\nend)() ---- end of Serpent module\n\nmobdebug.line = serpent.line\nmobdebug.dump = serpent.dump\nmobdebug.linemap = nil\nmobdebug.loadstring = loadstring\n\nlocal function removebasedir(path, basedir)\n  if iscasepreserving then\n    -- check if the lowercased path matches the basedir\n    -- if so, return substring of the original path (to not lowercase it)\n    return path:lower():find('^'..q(basedir:lower()))\n      and path:sub(#basedir+1) or path\n  else\n    return string.gsub(path, '^'..q(basedir), '')\n  end\nend\n\nlocal function stack(start)\n  local function vars(f)\n    local func = debug.getinfo(f, \"f\").func\n    local i = 1\n    local locals = {}\n    -- get locals\n    while true do\n      local name, value = debug.getlocal(f, i)\n      if not name then break end\n      if string.sub(name, 1, 1) ~= '(' then\n        locals[name] = {value, select(2,pcall(tostring,value))}\n      end\n      i = i + 1\n    end\n    -- get varargs (these use negative indices)\n    i = 1\n    while true do\n      local name, value = debug.getlocal(f, -i)\n      -- `not name` should be enough, but LuaJIT 2.0.0 incorrectly reports `(*temporary)` names here\n      if not name or name ~= \"(*vararg)\" then break end\n      locals[name:gsub(\"%)$\",\" \"..i..\")\")] = {value, select(2,pcall(tostring,value))}\n      i = i + 1\n    end\n    -- get upvalues\n    i = 1\n    local ups = {}\n    while func do -- check for func as it may be nil for tail calls\n      local name, value = debug.getupvalue(func, i)\n      if not name then break end\n      ups[name] = {value, select(2,pcall(tostring,value))}\n      i = i + 1\n    end\n    return locals, ups\n  end\n\n  local stack = {}\n  local linemap = mobdebug.linemap\n  for i = (start or 0), 100 do\n    local source = debug.getinfo(i, \"Snl\")\n    if not source then break end\n\n    local src = source.source\n    if src:find(\"@\") == 1 then\n      src = src:sub(2):gsub(\"\\\\\", \"/\")\n      if src:find(\"%./\") == 1 then src = src:sub(3) end\n    end\n\n    table.insert(stack, { -- remove basedir from source\n      {source.name, removebasedir(src, basedir),\n       linemap and linemap(source.linedefined, source.source) or source.linedefined,\n       linemap and linemap(source.currentline, source.source) or source.currentline,\n       source.what, source.namewhat, source.short_src},\n      vars(i+1)})\n    if source.what == 'main' then break end\n  end\n  return stack\nend\n\nlocal function set_breakpoint(file, line)\n  if file == '-' and lastfile then file = lastfile\n  elseif iscasepreserving then file = string.lower(file) end\n  if not breakpoints[line] then breakpoints[line] = {} end\n  breakpoints[line][file] = true\nend\n\nlocal function remove_breakpoint(file, line)\n  if file == '-' and lastfile then file = lastfile\n  elseif file == '*' and line == 0 then breakpoints = {}\n  elseif iscasepreserving then file = string.lower(file) end\n  if breakpoints[line] then breakpoints[line][file] = nil end\nend\n\nlocal function has_breakpoint(file, line)\n  return breakpoints[line]\n     and breakpoints[line][iscasepreserving and string.lower(file) or file]\nend\n\nlocal function restore_vars(vars)\n  if type(vars) ~= 'table' then return end\n\n  -- locals need to be processed in the reverse order, starting from\n  -- the inner block out, to make sure that the localized variables\n  -- are correctly updated with only the closest variable with\n  -- the same name being changed\n  -- first loop find how many local variables there is, while\n  -- the second loop processes them from i to 1\n  local i = 1\n  while true do\n    local name = debug.getlocal(3, i)\n    if not name then break end\n    i = i + 1\n  end\n  i = i - 1\n  local written_vars = {}\n  while i > 0 do\n    local name = debug.getlocal(3, i)\n    if not written_vars[name] then\n      if string.sub(name, 1, 1) ~= '(' then\n        debug.setlocal(3, i, rawget(vars, name))\n      end\n      written_vars[name] = true\n    end\n    i = i - 1\n  end\n\n  i = 1\n  local func = debug.getinfo(3, \"f\").func\n  while true do\n    local name = debug.getupvalue(func, i)\n    if not name then break end\n    if not written_vars[name] then\n      if string.sub(name, 1, 1) ~= '(' then\n        debug.setupvalue(func, i, rawget(vars, name))\n      end\n      written_vars[name] = true\n    end\n    i = i + 1\n  end\nend\n\nlocal function capture_vars(level, thread)\n  level = (level or 0)+2 -- add two levels for this and debug calls\n  local func = (thread and debug.getinfo(thread, level, \"f\") or debug.getinfo(level, \"f\") or {}).func\n  if not func then return {} end\n\n  local vars = {['...'] = {}}\n  local i = 1\n  while true do\n    local name, value = debug.getupvalue(func, i)\n    if not name then break end\n    if string.sub(name, 1, 1) ~= '(' then vars[name] = value end\n    i = i + 1\n  end\n  i = 1\n  while true do\n    local name, value\n    if thread then\n      name, value = debug.getlocal(thread, level, i)\n    else\n      name, value = debug.getlocal(level, i)\n    end\n    if not name then break end\n    if string.sub(name, 1, 1) ~= '(' then vars[name] = value end\n    i = i + 1\n  end\n  -- get varargs (these use negative indices)\n  i = 1\n  while true do\n    local name, value\n    if thread then\n      name, value = debug.getlocal(thread, level, -i)\n    else\n      name, value = debug.getlocal(level, -i)\n    end\n    -- `not name` should be enough, but LuaJIT 2.0.0 incorrectly reports `(*temporary)` names here\n    if not name or name ~= \"(*vararg)\" then break end\n    vars['...'][i] = value\n    i = i + 1\n  end\n  -- returned 'vars' table plays a dual role: (1) it captures local values\n  -- and upvalues to be restored later (in case they are modified in \"eval\"),\n  -- and (2) it provides an environment for evaluated chunks.\n  -- getfenv(func) is needed to provide proper environment for functions,\n  -- including access to globals, but this causes vars[name] to fail in\n  -- restore_vars on local variables or upvalues with `nil` values when\n  -- 'strict' is in effect. To avoid this `rawget` is used in restore_vars.\n  setmetatable(vars, { __index = getfenv(func), __newindex = getfenv(func) })\n  return vars\nend\n\nlocal function stack_depth(start_depth)\n  for i = start_depth, 0, -1 do\n    if debug.getinfo(i, \"l\") then return i+1 end\n  end\n  return start_depth\nend\n\nlocal function is_safe(stack_level)\n  -- the stack grows up: 0 is getinfo, 1 is is_safe, 2 is debug_hook, 3 is user function\n  if stack_level == 3 then return true end\n  for i = 3, stack_level do\n    -- return if it is not safe to abort\n    local info = debug.getinfo(i, \"S\")\n    if not info then return true end\n    if info.what == \"C\" then return false end\n  end\n  return true\nend\n\nlocal function in_debugger()\n  local this = debug.getinfo(1, \"S\").source\n  -- only need to check few frames as mobdebug frames should be close\n  for i = 3, 7 do\n    local info = debug.getinfo(i, \"S\")\n    if not info then return false end\n    if info.source == this then return true end\n  end\n  return false\nend\n\nlocal function is_pending(peer)\n  -- if there is something already in the buffer, skip check\n  if not buf and checkcount >= mobdebug.checkcount then\n    peer:settimeout(0) -- non-blocking\n    buf = peer:receive(1)\n    peer:settimeout() -- back to blocking\n    checkcount = 0\n  end\n  return buf\nend\n\nlocal function readnext(peer, num)\n  peer:settimeout(0) -- non-blocking\n  local res, err, partial = peer:receive(num)\n  peer:settimeout() -- back to blocking\n  return res or partial or '', err\nend\n\nlocal function handle_breakpoint(peer)\n  -- check if the buffer has the beginning of SETB/DELB command;\n  -- this is to avoid reading the entire line for commands that\n  -- don't need to be handled here.\n  if not buf or not (buf:sub(1,1) == 'S' or buf:sub(1,1) == 'D') then return end\n\n  -- check second character to avoid reading STEP or other S* and D* commands\n  if #buf == 1 then buf = buf .. readnext(peer, 1) end\n  if buf:sub(2,2) ~= 'E' then return end\n\n  -- need to read few more characters\n  buf = buf .. readnext(peer, 5-#buf)\n  if buf ~= 'SETB ' and buf ~= 'DELB ' then return end\n\n  local res, _, partial = peer:receive() -- get the rest of the line; blocking\n  if not res then\n    if partial then buf = buf .. partial end\n    return\n  end\n\n  local _, _, cmd, file, line = (buf..res):find(\"^([A-Z]+)%s+(.-)%s+(%d+)%s*$\")\n  if cmd == 'SETB' then set_breakpoint(file, tonumber(line))\n  elseif cmd == 'DELB' then remove_breakpoint(file, tonumber(line))\n  else\n    -- this looks like a breakpoint command, but something went wrong;\n    -- return here to let the \"normal\" processing to handle,\n    -- although this is likely to not go well.\n    return\n  end\n\n  buf = nil\nend\n\nlocal function normalize_path(file)\n  local n\n  repeat\n    file, n = file:gsub(\"/+%.?/+\",\"/\") -- remove all `//` and `/./` references\n  until n == 0\n  -- collapse all up-dir references: this will clobber UNC prefix (\\\\?\\)\n  -- and disk on Windows when there are too many up-dir references: `D:\\foo\\..\\..\\bar`;\n  -- handle the case of multiple up-dir references: `foo/bar/baz/../../../more`;\n  -- only remove one at a time as otherwise `../../` could be removed;\n  repeat\n    file, n = file:gsub(\"[^/]+/%.%./\", \"\", 1)\n  until n == 0\n  -- there may still be a leading up-dir reference left (as `/../` or `../`); remove it\n  return (file:gsub(\"^(/?)%.%./\", \"%1\"))\nend\n\nlocal function debug_hook(event, line)\n  -- (1) LuaJIT needs special treatment. Because debug_hook is set for\n  -- *all* coroutines, and not just the one being debugged as in regular Lua\n  -- (http://lua-users.org/lists/lua-l/2011-06/msg00513.html),\n  -- need to avoid debugging mobdebug's own code as LuaJIT doesn't\n  -- always correctly generate call/return hook events (there are more\n  -- calls than returns, which breaks stack depth calculation and\n  -- 'step' and 'step over' commands stop working; possibly because\n  -- 'tail return' events are not generated by LuaJIT).\n  -- the next line checks if the debugger is run under LuaJIT and if\n  -- one of debugger methods is present in the stack, it simply returns.\n  if jit then\n    -- when luajit is compiled with LUAJIT_ENABLE_LUA52COMPAT,\n    -- coroutine.running() returns non-nil for the main thread.\n    local coro, main = coroutine.running()\n    if not coro or main then coro = 'main' end\n    local disabled = coroutines[coro] == false\n      or coroutines[coro] == nil and coro ~= (coro_debugee or 'main')\n    if coro_debugee and disabled or not coro_debugee and (disabled or in_debugger())\n    then return end\n  end\n\n  -- (2) check if abort has been requested and it's safe to abort\n  if abort and is_safe(stack_level) then error(abort) end\n\n  -- (3) also check if this debug hook has not been visited for any reason.\n  -- this check is needed to avoid stepping in too early\n  -- (for example, when coroutine.resume() is executed inside start()).\n  if not seen_hook and in_debugger() then return end\n\n  if event == \"call\" then\n    stack_level = stack_level + 1\n  elseif event == \"return\" or event == \"tail return\" then\n    stack_level = stack_level - 1\n  elseif event == \"line\" then\n    if mobdebug.linemap then\n      local ok, mappedline = pcall(mobdebug.linemap, line, debug.getinfo(2, \"S\").source)\n      if ok then line = mappedline end\n      if not line then return end\n    end\n\n    -- may need to fall through because of the following:\n    -- (1) step_into\n    -- (2) step_over and stack_level <= step_level (need stack_level)\n    -- (3) breakpoint; check for line first as it's known; then for file\n    -- (4) socket call (only do every Xth check)\n    -- (5) at least one watch is registered\n    if not (\n      step_into or step_over or breakpoints[line] or watchescnt > 0\n      or is_pending(server)\n    ) then checkcount = checkcount + 1; return end\n\n    checkcount = mobdebug.checkcount -- force check on the next command\n\n    -- this is needed to check if the stack got shorter or longer.\n    -- unfortunately counting call/return calls is not reliable.\n    -- the discrepancy may happen when \"pcall(load, '')\" call is made\n    -- or when \"error()\" is called in a function.\n    -- in either case there are more \"call\" than \"return\" events reported.\n    -- this validation is done for every \"line\" event, but should be \"cheap\"\n    -- as it checks for the stack to get shorter (or longer by one call).\n    -- start from one level higher just in case we need to grow the stack.\n    -- this may happen after coroutine.resume call to a function that doesn't\n    -- have any other instructions to execute. it triggers three returns:\n    -- \"return, tail return, return\", which needs to be accounted for.\n    stack_level = stack_depth(stack_level+1)\n\n    local caller = debug.getinfo(2, \"S\")\n\n    -- grab the filename and fix it if needed\n    local file = lastfile\n    if (lastsource ~= caller.source) then\n      file, lastsource = caller.source, caller.source\n      -- technically, users can supply names that may not use '@',\n      -- for example when they call loadstring('...', 'filename.lua').\n      -- Unfortunately, there is no reliable/quick way to figure out\n      -- what is the filename and what is the source code.\n      -- If the name doesn't start with `@`, assume it's a file name if it's all on one line.\n      if find(file, \"^@\") or not find(file, \"[\\r\\n]\") then\n        file = gsub(gsub(file, \"^@\", \"\"), \"\\\\\", \"/\")\n        -- normalize paths that may include up-dir or same-dir references\n        -- if the path starts from the up-dir or reference,\n        -- prepend `basedir` to generate absolute path to keep breakpoints working.\n        -- ignore qualified relative path (`D:../`) and UNC paths (`\\\\?\\`)\n        if find(file, \"^%.%./\") then file = basedir..file end\n        if find(file, \"/%.%.?/\") then file = normalize_path(file) end\n        -- need this conversion to be applied to relative and absolute\n        -- file names as you may write \"require 'Foo'\" to\n        -- load \"foo.lua\" (on a case insensitive file system) and breakpoints\n        -- set on foo.lua will not work if not converted to the same case.\n        if iscasepreserving then file = string.lower(file) end\n        if find(file, \"^%./\") then file = sub(file, 3)\n        else file = gsub(file, \"^\"..q(basedir), \"\") end\n        -- some file systems allow newlines in file names; remove these.\n        file = gsub(file, \"\\n\", ' ')\n      else\n        file = mobdebug.line(file)\n      end\n\n      -- set to true if we got here; this only needs to be done once per\n      -- session, so do it here to at least avoid setting it for every line.\n      seen_hook = true\n      lastfile = file\n    end\n\n    if is_pending(server) then handle_breakpoint(server) end\n\n    local vars, status, res\n    if (watchescnt > 0) then\n      vars = capture_vars(1)\n      for index, value in pairs(watches) do\n        setfenv(value, vars)\n        local ok, fired = pcall(value)\n        if ok and fired then\n          status, res = cororesume(coro_debugger, events.WATCH, vars, file, line, index)\n          break -- any one watch is enough; don't check multiple times\n        end\n      end\n    end\n\n    -- need to get into the \"regular\" debug handler, but only if there was\n    -- no watch that was fired. If there was a watch, handle its result.\n    local getin = (status == nil) and\n      (step_into\n      -- when coroutine.running() return `nil` (main thread in Lua 5.1),\n      -- step_over will equal 'main', so need to check for that explicitly.\n      or (step_over and step_over == (coroutine.running() or 'main') and stack_level <= step_level)\n      or has_breakpoint(file, line)\n      or is_pending(server))\n\n    if getin then\n      vars = vars or capture_vars(1)\n      step_into = false\n      step_over = false\n      status, res = cororesume(coro_debugger, events.BREAK, vars, file, line)\n    end\n\n    -- handle 'stack' command that provides stack() information to the debugger\n    while status and res == 'stack' do\n      -- resume with the stack trace and variables\n      if vars then restore_vars(vars) end -- restore vars so they are reflected in stack values\n      status, res = cororesume(coro_debugger, events.STACK, stack(3), file, line)\n    end\n\n    -- need to recheck once more as resume after 'stack' command may\n    -- return something else (for example, 'exit'), which needs to be handled\n    if status and res and res ~= 'stack' then\n      if not abort and res == \"exit\" then mobdebug.onexit(1, true); return end\n      if not abort and res == \"done\" then mobdebug.done(); return end\n      abort = res\n      -- only abort if safe; if not, there is another (earlier) check inside\n      -- debug_hook, which will abort execution at the first safe opportunity\n      if is_safe(stack_level) then error(abort) end\n    elseif not status and res then\n      error(res, 2) -- report any other (internal) errors back to the application\n    end\n\n    if vars then restore_vars(vars) end\n\n    -- last command requested Step Over/Out; store the current thread\n    if step_over == true then step_over = coroutine.running() or 'main' end\n  end\nend\n\nlocal function stringify_results(params, status, ...)\n  if not status then return status, ... end -- on error report as it\n\n  params = params or {}\n  if params.nocode == nil then params.nocode = true end\n  if params.comment == nil then params.comment = 1 end\n\n  local t = {...}\n  for i,v in pairs(t) do -- stringify each of the returned values\n    local ok, res = pcall(mobdebug.line, v, params)\n    t[i] = ok and res or (\"%q\"):format(res):gsub(\"\\010\",\"n\"):gsub(\"\\026\",\"\\\\026\")\n  end\n  -- stringify table with all returned values\n  -- this is done to allow each returned value to be used (serialized or not)\n  -- intependently and to preserve \"original\" comments\n  return pcall(mobdebug.dump, t, {sparse = false})\nend\n\nlocal function isrunning()\n  return coro_debugger and (corostatus(coro_debugger) == 'suspended' or corostatus(coro_debugger) == 'running')\nend\n\n-- this is a function that removes all hooks and closes the socket to\n-- report back to the controller that the debugging is done.\n-- the script that called `done` can still continue.\nlocal function done()\n  if not (isrunning() and server) then return end\n\n  if not jit then\n    for co, debugged in pairs(coroutines) do\n      if debugged then debug.sethook(co) end\n    end\n  end\n\n  debug.sethook()\n  server:close()\n\n  coro_debugger = nil -- to make sure isrunning() returns `false`\n  seen_hook = nil -- to make sure that the next start() call works\n  abort = nil -- to make sure that callback calls use proper \"abort\" value\nend\n\nlocal function debugger_loop(sev, svars, sfile, sline)\n  local command\n  local app, osname\n  local eval_env = svars or {}\n  local function emptyWatch () return false end\n  local loaded = {}\n  for k in pairs(package.loaded) do loaded[k] = true end\n\n  while true do\n    local line, err\n    local wx = rawget(genv, \"wx\") -- use rawread to make strict.lua happy\n    if (wx or mobdebug.yield) and server.settimeout then server:settimeout(mobdebug.yieldtimeout) end\n    while true do\n      line, err = server:receive()\n      if not line and err == \"timeout\" then\n        -- yield for wx GUI applications if possible to avoid \"busyness\"\n        app = app or (wx and wx.wxGetApp and wx.wxGetApp())\n        if app then\n          local win = app:GetTopWindow()\n          local inloop = app:IsMainLoopRunning()\n          osname = osname or wx.wxPlatformInfo.Get():GetOperatingSystemFamilyName()\n          if win and not inloop then\n            -- process messages in a regular way\n            -- and exit as soon as the event loop is idle\n            if osname == 'Unix' then wx.wxTimer(app):Start(10, true) end\n            local exitLoop = function()\n              win:Disconnect(wx.wxID_ANY, wx.wxID_ANY, wx.wxEVT_IDLE)\n              win:Disconnect(wx.wxID_ANY, wx.wxID_ANY, wx.wxEVT_TIMER)\n              app:ExitMainLoop()\n            end\n            win:Connect(wx.wxEVT_IDLE, exitLoop)\n            win:Connect(wx.wxEVT_TIMER, exitLoop)\n            app:MainLoop()\n          end\n        elseif mobdebug.yield then mobdebug.yield()\n        end\n      elseif not line and err == \"closed\" then\n        error(\"Debugger connection closed\", 0)\n      else\n        -- if there is something in the pending buffer, prepend it to the line\n        if buf then line = buf .. line; buf = nil end\n        break\n      end\n    end\n    if server.settimeout then server:settimeout() end -- back to blocking\n    command = string.sub(line, string.find(line, \"^[A-Z]+\"))\n    if command == \"SETB\" then\n      local _, _, _, file, line = string.find(line, \"^([A-Z]+)%s+(.-)%s+(%d+)%s*$\")\n      if file and line then\n        set_breakpoint(file, tonumber(line))\n        server:send(\"200 OK\\n\")\n      else\n        server:send(\"400 Bad Request\\n\")\n      end\n    elseif command == \"DELB\" then\n      local _, _, _, file, line = string.find(line, \"^([A-Z]+)%s+(.-)%s+(%d+)%s*$\")\n      if file and line then\n        remove_breakpoint(file, tonumber(line))\n        server:send(\"200 OK\\n\")\n      else\n        server:send(\"400 Bad Request\\n\")\n      end\n    elseif command == \"EXEC\" then\n      -- extract any optional parameters\n      local params = string.match(line, \"--%s*(%b{})%s*$\")\n      local _, _, chunk = string.find(line, \"^[A-Z]+%s+(.+)$\")\n      if chunk then\n        local func, res = mobdebug.loadstring(chunk)\n        local status\n        if func then\n          local pfunc = params and loadstring(\"return \"..params) -- use internal function\n          params = pfunc and pfunc()\n          params = (type(params) == \"table\" and params or {})\n          local stack = tonumber(params.stack)\n          -- if the requested stack frame is not the current one, then use a new capture\n          -- with a specific stack frame: `capture_vars(0, coro_debugee)`\n          local env = stack and coro_debugee and capture_vars(stack-1, coro_debugee) or eval_env\n          setfenv(func, env)\n          status, res = stringify_results(params, pcall(func, unpack(env['...'] or {})))\n        end\n        if status then\n          if mobdebug.onscratch then mobdebug.onscratch(res) end\n          server:send(\"200 OK \" .. tostring(#res) .. \"\\n\")\n          server:send(res)\n        else\n          -- fix error if not set (for example, when loadstring is not present)\n          if not res then res = \"Unknown error\" end\n          server:send(\"401 Error in Expression \" .. tostring(#res) .. \"\\n\")\n          server:send(res)\n        end\n      else\n        server:send(\"400 Bad Request\\n\")\n      end\n    elseif command == \"LOAD\" then\n      local _, _, size, name = string.find(line, \"^[A-Z]+%s+(%d+)%s+(%S.-)%s*$\")\n      size = tonumber(size)\n\n      if abort == nil then -- no LOAD/RELOAD allowed inside start()\n        if size > 0 then server:receive(size) end\n        if sfile and sline then\n          server:send(\"201 Started \" .. sfile .. \" \" .. tostring(sline) .. \"\\n\")\n        else\n          server:send(\"200 OK 0\\n\")\n        end\n      else\n        -- reset environment to allow required modules to load again\n        -- remove those packages that weren't loaded when debugger started\n        for k in pairs(package.loaded) do\n          if not loaded[k] then package.loaded[k] = nil end\n        end\n\n        if size == 0 and name == '-' then -- RELOAD the current script being debugged\n          server:send(\"200 OK 0\\n\")\n          coroyield(\"load\")\n        else\n          -- receiving 0 bytes blocks (at least in luasocket 2.0.2), so skip reading\n          local chunk = size == 0 and \"\" or server:receive(size)\n          if chunk then -- LOAD a new script for debugging\n            local func, res = mobdebug.loadstring(chunk, \"@\"..name)\n            if func then\n              server:send(\"200 OK 0\\n\")\n              debugee = func\n              coroyield(\"load\")\n            else\n              server:send(\"401 Error in Expression \" .. tostring(#res) .. \"\\n\")\n              server:send(res)\n            end\n          else\n            server:send(\"400 Bad Request\\n\")\n          end\n        end\n      end\n    elseif command == \"SETW\" then\n      local _, _, exp = string.find(line, \"^[A-Z]+%s+(.+)%s*$\")\n      if exp then\n        local func, res = mobdebug.loadstring(\"return(\" .. exp .. \")\")\n        if func then\n          watchescnt = watchescnt + 1\n          local newidx = #watches + 1\n          watches[newidx] = func\n          server:send(\"200 OK \" .. tostring(newidx) .. \"\\n\")\n        else\n          server:send(\"401 Error in Expression \" .. tostring(#res) .. \"\\n\")\n          server:send(res)\n        end\n      else\n        server:send(\"400 Bad Request\\n\")\n      end\n    elseif command == \"DELW\" then\n      local _, _, index = string.find(line, \"^[A-Z]+%s+(%d+)%s*$\")\n      index = tonumber(index)\n      if index > 0 and index <= #watches then\n        watchescnt = watchescnt - (watches[index] ~= emptyWatch and 1 or 0)\n        watches[index] = emptyWatch\n        server:send(\"200 OK\\n\")\n      else\n        server:send(\"400 Bad Request\\n\")\n      end\n    elseif command == \"RUN\" then\n      server:send(\"200 OK\\n\")\n\n      local ev, vars, file, line, idx_watch = coroyield()\n      eval_env = vars\n      if ev == events.BREAK then\n        server:send(\"202 Paused \" .. file .. \" \" .. tostring(line) .. \"\\n\")\n      elseif ev == events.WATCH then\n        server:send(\"203 Paused \" .. file .. \" \" .. tostring(line) .. \" \" .. tostring(idx_watch) .. \"\\n\")\n      elseif ev == events.RESTART then\n        -- nothing to do\n      else\n        server:send(\"401 Error in Execution \" .. tostring(#file) .. \"\\n\")\n        server:send(file)\n      end\n    elseif command == \"STEP\" then\n      server:send(\"200 OK\\n\")\n      step_into = true\n\n      local ev, vars, file, line, idx_watch = coroyield()\n      eval_env = vars\n      if ev == events.BREAK then\n        server:send(\"202 Paused \" .. file .. \" \" .. tostring(line) .. \"\\n\")\n      elseif ev == events.WATCH then\n        server:send(\"203 Paused \" .. file .. \" \" .. tostring(line) .. \" \" .. tostring(idx_watch) .. \"\\n\")\n      elseif ev == events.RESTART then\n        -- nothing to do\n      else\n        server:send(\"401 Error in Execution \" .. tostring(#file) .. \"\\n\")\n        server:send(file)\n      end\n    elseif command == \"OVER\" or command == \"OUT\" then\n      server:send(\"200 OK\\n\")\n      step_over = true\n\n      -- OVER and OUT are very similar except for\n      -- the stack level value at which to stop\n      if command == \"OUT\" then step_level = stack_level - 1\n      else step_level = stack_level end\n\n      local ev, vars, file, line, idx_watch = coroyield()\n      eval_env = vars\n      if ev == events.BREAK then\n        server:send(\"202 Paused \" .. file .. \" \" .. tostring(line) .. \"\\n\")\n      elseif ev == events.WATCH then\n        server:send(\"203 Paused \" .. file .. \" \" .. tostring(line) .. \" \" .. tostring(idx_watch) .. \"\\n\")\n      elseif ev == events.RESTART then\n        -- nothing to do\n      else\n        server:send(\"401 Error in Execution \" .. tostring(#file) .. \"\\n\")\n        server:send(file)\n      end\n    elseif command == \"BASEDIR\" then\n      local _, _, dir = string.find(line, \"^[A-Z]+%s+(.+)%s*$\")\n      if dir then\n        basedir = iscasepreserving and string.lower(dir) or dir\n        -- reset cached source as it may change with basedir\n        lastsource = nil\n        server:send(\"200 OK\\n\")\n      else\n        server:send(\"400 Bad Request\\n\")\n      end\n    elseif command == \"SUSPEND\" then\n      -- do nothing; it already fulfilled its role\n    elseif command == \"DONE\" then\n      coroyield(\"done\")\n      return -- done with all the debugging\n    elseif command == \"STACK\" then\n      -- first check if we can execute the stack command\n      -- as it requires yielding back to debug_hook it cannot be executed\n      -- if we have not seen the hook yet as happens after start().\n      -- in this case we simply return an empty result\n      local vars, ev = {}\n      if seen_hook then\n        ev, vars = coroyield(\"stack\")\n      end\n      if ev and ev ~= events.STACK then\n        server:send(\"401 Error in Execution \" .. tostring(#vars) .. \"\\n\")\n        server:send(vars)\n      else\n        local params = string.match(line, \"--%s*(%b{})%s*$\")\n        local pfunc = params and loadstring(\"return \"..params) -- use internal function\n        params = pfunc and pfunc()\n        params = (type(params) == \"table\" and params or {})\n        if params.nocode == nil then params.nocode = true end\n        if params.sparse == nil then params.sparse = false end\n        -- take into account additional levels for the stack frames and data management\n        if tonumber(params.maxlevel) then params.maxlevel = tonumber(params.maxlevel)+4 end\n\n        local ok, res = pcall(mobdebug.dump, vars, params)\n        if ok then\n          server:send(\"200 OK \" .. tostring(res) .. \"\\n\")\n        else\n          server:send(\"401 Error in Execution \" .. tostring(#res) .. \"\\n\")\n          server:send(res)\n        end\n      end\n    elseif command == \"OUTPUT\" then\n      local _, _, stream, mode = string.find(line, \"^[A-Z]+%s+(%w+)%s+([dcr])%s*$\")\n      if stream and mode and stream == \"stdout\" then\n        -- assign \"print\" in the global environment\n        local default = mode == 'd'\n        genv.print = default and iobase.print or corowrap(function()\n          -- wrapping into coroutine.wrap protects this function from\n          -- being stepped through in the debugger.\n          -- don't use vararg (...) as it adds a reference for its values,\n          -- which may affect how they are garbage collected\n          while true do\n            local tbl = {coroutine.yield()}\n            if mode == 'c' then iobase.print(unpack(tbl)) end\n            for n = 1, #tbl do\n              tbl[n] = select(2, pcall(mobdebug.line, tbl[n], {nocode = true, comment = false})) end\n            local file = table.concat(tbl, \"\\t\")..\"\\n\"\n            server:send(\"204 Output \" .. stream .. \" \" .. tostring(#file) .. \"\\n\" .. file)\n          end\n        end)\n        if not default then genv.print() end -- \"fake\" print to start printing loop\n        server:send(\"200 OK\\n\")\n      else\n        server:send(\"400 Bad Request\\n\")\n      end\n    elseif command == \"EXIT\" then\n      server:send(\"200 OK\\n\")\n      coroyield(\"exit\")\n    else\n      server:send(\"400 Bad Request\\n\")\n    end\n  end\nend\n\nlocal function output(stream, data)\n  if server then return server:send(\"204 Output \"..stream..\" \"..tostring(#data)..\"\\n\"..data) end\nend\n\nlocal function connect(controller_host, controller_port)\n  local sock, err = socket.tcp()\n  if not sock then return nil, err end\n\n  if sock.settimeout then sock:settimeout(mobdebug.connecttimeout) end\n  local res, err = sock:connect(controller_host, tostring(controller_port))\n  if sock.settimeout then sock:settimeout() end\n\n  if not res then return nil, err end\n  return sock\nend\n\nlocal lasthost, lastport\n\n-- Starts a debug session by connecting to a controller\nlocal function start(controller_host, controller_port)\n  -- only one debugging session can be run (as there is only one debug hook)\n  if isrunning() then return end\n\n  lasthost = controller_host or lasthost\n  lastport = controller_port or lastport\n\n  controller_host = lasthost or \"localhost\"\n  controller_port = lastport or mobdebug.port\n\n  local err\n  server, err = mobdebug.connect(controller_host, controller_port)\n  if server then\n    -- correct stack depth which already has some calls on it\n    -- so it doesn't go into negative when those calls return\n    -- as this breaks subsequence checks in stack_depth().\n    -- start from 16th frame, which is sufficiently large for this check.\n    stack_level = stack_depth(16)\n\n    -- provide our own traceback function to report errors remotely\n    -- but only under Lua 5.1/LuaJIT as it's not called under Lua 5.2+\n    -- (http://lua-users.org/lists/lua-l/2016-05/msg00297.html)\n    local function f() return function()end end\n    if f() ~= f() then -- Lua 5.1 or LuaJIT\n      local dtraceback = debug.traceback\n      debug.traceback = function (...)\n        if select('#', ...) >= 1 then\n          local thr, err, lvl = ...\n          if type(thr) ~= 'thread' then err, lvl = thr, err end\n          local trace = dtraceback(err, (lvl or 1)+1)\n          if genv.print == iobase.print then -- no remote redirect\n            return trace\n          else\n            genv.print(trace) -- report the error remotely\n            return -- don't report locally to avoid double reporting\n          end\n        end\n        -- direct call to debug.traceback: return the original.\n        -- debug.traceback(nil, level) doesn't work in Lua 5.1\n        -- (http://lua-users.org/lists/lua-l/2011-06/msg00574.html), so\n        -- simply remove first frame from the stack trace\n        local tb = dtraceback(\"\", 2) -- skip debugger frames\n        -- if the string is returned, then remove the first new line as it's not needed\n        return type(tb) == \"string\" and tb:gsub(\"^\\n\",\"\") or tb\n      end\n    end\n    coro_debugger = corocreate(debugger_loop)\n    debug.sethook(debug_hook, HOOKMASK)\n    seen_hook = nil -- reset in case the last start() call was refused\n    step_into = true -- start with step command\n    return true\n  else\n    print((\"Could not connect to %s:%s: %s\")\n      :format(controller_host, controller_port, err or \"unknown error\"))\n  end\nend\n\nlocal function controller(controller_host, controller_port, scratchpad)\n  -- only one debugging session can be run (as there is only one debug hook)\n  if isrunning() then return end\n\n  lasthost = controller_host or lasthost\n  lastport = controller_port or lastport\n\n  controller_host = lasthost or \"localhost\"\n  controller_port = lastport or mobdebug.port\n\n  local exitonerror = not scratchpad\n  local err\n  server, err = mobdebug.connect(controller_host, controller_port)\n  if server then\n    local function report(trace, err)\n      local msg = err .. \"\\n\" .. trace\n      server:send(\"401 Error in Execution \" .. tostring(#msg) .. \"\\n\")\n      server:send(msg)\n      return err\n    end\n\n    seen_hook = true -- allow to accept all commands\n    coro_debugger = corocreate(debugger_loop)\n\n    while true do\n      step_into = true -- start with step command\n      abort = false -- reset abort flag from the previous loop\n      if scratchpad then checkcount = mobdebug.checkcount end -- force suspend right away\n\n      coro_debugee = corocreate(debugee)\n      debug.sethook(coro_debugee, debug_hook, HOOKMASK)\n      local status, err = cororesume(coro_debugee, unpack(arg or {}))\n\n      -- was there an error or is the script done?\n      -- 'abort' state is allowed here; ignore it\n      if abort then\n        if tostring(abort) == 'exit' then break end\n      else\n        if status then -- no errors\n          if corostatus(coro_debugee) == \"suspended\" then\n            -- the script called `coroutine.yield` in the \"main\" thread\n            error(\"attempt to yield from the main thread\", 3)\n          end\n          break -- normal execution is done\n        elseif err and not string.find(tostring(err), deferror) then\n          -- report the error back\n          -- err is not necessarily a string, so convert to string to report\n          report(debug.traceback(coro_debugee), tostring(err))\n          if exitonerror then break end\n          -- check if the debugging is done (coro_debugger is nil)\n          if not coro_debugger then break end\n          -- resume once more to clear the response the debugger wants to send\n          -- need to use capture_vars(0) to capture only two (default) level,\n          -- as even though there is controller() call, because of the tail call,\n          -- the caller may not exist for it;\n          -- This is not entirely safe as the user may see the local\n          -- variable from console, but they will be reset anyway.\n          -- This functionality is used when scratchpad is paused to\n          -- gain access to remote console to modify global variables.\n          local status, err = cororesume(coro_debugger, events.RESTART, capture_vars(0))\n          if not status or status and err == \"exit\" then break end\n        end\n      end\n    end\n  else\n    print((\"Could not connect to %s:%s: %s\")\n      :format(controller_host, controller_port, err or \"unknown error\"))\n    return false\n  end\n  return true\nend\n\nlocal function scratchpad(controller_host, controller_port)\n  return controller(controller_host, controller_port, true)\nend\n\nlocal function loop(controller_host, controller_port)\n  return controller(controller_host, controller_port, false)\nend\n\nlocal function on()\n  if not (isrunning() and server) then return end\n\n  -- main is set to true under Lua5.2 for the \"main\" chunk.\n  -- Lua5.1 returns co as `nil` in that case.\n  local co, main = coroutine.running()\n  if main then co = nil end\n  if co then\n    coroutines[co] = true\n    debug.sethook(co, debug_hook, HOOKMASK)\n  else\n    if jit then coroutines.main = true end\n    debug.sethook(debug_hook, HOOKMASK)\n  end\nend\n\nlocal function off()\n  if not (isrunning() and server) then return end\n\n  -- main is set to true under Lua5.2 for the \"main\" chunk.\n  -- Lua5.1 returns co as `nil` in that case.\n  local co, main = coroutine.running()\n  if main then co = nil end\n\n  -- don't remove coroutine hook under LuaJIT as there is only one (global) hook\n  if co then\n    coroutines[co] = false\n    if not jit then debug.sethook(co) end\n  else\n    if jit then coroutines.main = false end\n    if not jit then debug.sethook() end\n  end\n\n  -- check if there is any thread that is still being debugged under LuaJIT;\n  -- if not, turn the debugging off\n  if jit then\n    local remove = true\n    for _, debugged in pairs(coroutines) do\n      if debugged then remove = false; break end\n    end\n    if remove then debug.sethook() end\n  end\nend\n\n-- Handles server debugging commands\nlocal function handle(params, client, options)\n  -- when `options.verbose` is not provided, use normal `print`; verbose output can be\n  -- disabled (`options.verbose == false`) or redirected (`options.verbose == function()...end`)\n  local verbose = not options or options.verbose ~= nil and options.verbose\n  local print = verbose and (type(verbose) == \"function\" and verbose or print) or function() end\n  local file, line, watch_idx\n  local _, _, command = string.find(params, \"^([a-z]+)\")\n  if command == \"run\" or command == \"step\" or command == \"out\"\n  or command == \"over\" or command == \"exit\" then\n    client:send(string.upper(command) .. \"\\n\")\n    client:receive() -- this should consume the first '200 OK' response\n    while true do\n      local done = true\n      local breakpoint = client:receive()\n      if not breakpoint then\n        print(\"Program finished\")\n        return nil, nil, false\n      end\n      local _, _, status = string.find(breakpoint, \"^(%d+)\")\n      if status == \"200\" then\n        -- don't need to do anything\n      elseif status == \"202\" then\n        _, _, file, line = string.find(breakpoint, \"^202 Paused%s+(.-)%s+(%d+)%s*$\")\n        if file and line then\n          print(\"Paused at file \" .. file .. \" line \" .. line)\n        end\n      elseif status == \"203\" then\n        _, _, file, line, watch_idx = string.find(breakpoint, \"^203 Paused%s+(.-)%s+(%d+)%s+(%d+)%s*$\")\n        if file and line and watch_idx then\n          print(\"Paused at file \" .. file .. \" line \" .. line .. \" (watch expression \" .. watch_idx .. \": [\" .. watches[watch_idx] .. \"])\")\n        end\n      elseif status == \"204\" then\n        local _, _, stream, size = string.find(breakpoint, \"^204 Output (%w+) (%d+)$\")\n        if stream and size then\n          local size = tonumber(size)\n          local msg = size > 0 and client:receive(size) or \"\"\n          print(msg)\n          if outputs[stream] then outputs[stream](msg) end\n          -- this was just the output, so go back reading the response\n          done = false\n        end\n      elseif status == \"401\" then\n        local _, _, size = string.find(breakpoint, \"^401 Error in Execution (%d+)$\")\n        if size then\n          local msg = client:receive(tonumber(size))\n          print(\"Error in remote application: \" .. msg)\n          return nil, nil, msg\n        end\n      else\n        print(\"Unknown error\")\n        return nil, nil, \"Debugger error: unexpected response '\" .. breakpoint .. \"'\"\n      end\n      if done then break end\n    end\n  elseif command == \"done\" then\n    client:send(string.upper(command) .. \"\\n\")\n    -- no response is expected\n  elseif command == \"setb\" or command == \"asetb\" then\n    _, _, _, file, line = string.find(params, \"^([a-z]+)%s+(.-)%s+(%d+)%s*$\")\n    if file and line then\n      -- if this is a file name, and not a file source\n      if not file:find('^\".*\"$') then\n        file = string.gsub(file, \"\\\\\", \"/\") -- convert slash\n        file = removebasedir(file, basedir)\n      end\n      client:send(\"SETB \" .. file .. \" \" .. line .. \"\\n\")\n      if command == \"asetb\" or client:receive() == \"200 OK\" then\n        set_breakpoint(file, line)\n      else\n        print(\"Error: breakpoint not inserted\")\n      end\n    else\n      print(\"Invalid command\")\n    end\n  elseif command == \"setw\" then\n    local _, _, exp = string.find(params, \"^[a-z]+%s+(.+)$\")\n    if exp then\n      client:send(\"SETW \" .. exp .. \"\\n\")\n      local answer = client:receive()\n      local _, _, watch_idx = string.find(answer, \"^200 OK (%d+)%s*$\")\n      if watch_idx then\n        watches[watch_idx] = exp\n        print(\"Inserted watch exp no. \" .. watch_idx)\n      else\n        local _, _, size = string.find(answer, \"^401 Error in Expression (%d+)$\")\n        if size then\n          local err = client:receive(tonumber(size)):gsub(\".-:%d+:%s*\",\"\")\n          print(\"Error: watch expression not set: \" .. err)\n        else\n          print(\"Error: watch expression not set\")\n        end\n      end\n    else\n      print(\"Invalid command\")\n    end\n  elseif command == \"delb\" or command == \"adelb\" then\n    _, _, _, file, line = string.find(params, \"^([a-z]+)%s+(.-)%s+(%d+)%s*$\")\n    if file and line then\n      -- if this is a file name, and not a file source\n      if not file:find('^\".*\"$') then\n        file = string.gsub(file, \"\\\\\", \"/\") -- convert slash\n        file = removebasedir(file, basedir)\n      end\n      client:send(\"DELB \" .. file .. \" \" .. line .. \"\\n\")\n      if command == \"adelb\" or client:receive() == \"200 OK\" then\n        remove_breakpoint(file, line)\n      else\n        print(\"Error: breakpoint not removed\")\n      end\n    else\n      print(\"Invalid command\")\n    end\n  elseif command == \"delallb\" then\n    local file, line = \"*\", 0\n    client:send(\"DELB \" .. file .. \" \" .. tostring(line) .. \"\\n\")\n    if client:receive() == \"200 OK\" then\n      remove_breakpoint(file, line)\n    else\n      print(\"Error: all breakpoints not removed\")\n    end\n  elseif command == \"delw\" then\n    local _, _, index = string.find(params, \"^[a-z]+%s+(%d+)%s*$\")\n    if index then\n      client:send(\"DELW \" .. index .. \"\\n\")\n      if client:receive() == \"200 OK\" then\n        watches[index] = nil\n      else\n        print(\"Error: watch expression not removed\")\n      end\n    else\n      print(\"Invalid command\")\n    end\n  elseif command == \"delallw\" then\n    for index, exp in pairs(watches) do\n      client:send(\"DELW \" .. index .. \"\\n\")\n      if client:receive() == \"200 OK\" then\n        watches[index] = nil\n      else\n        print(\"Error: watch expression at index \" .. index .. \" [\" .. exp .. \"] not removed\")\n      end\n    end\n  elseif command == \"eval\" or command == \"exec\"\n      or command == \"load\" or command == \"loadstring\"\n      or command == \"reload\" then\n    local _, _, exp = string.find(params, \"^[a-z]+%s+(.+)$\")\n    if exp or (command == \"reload\") then\n      if command == \"eval\" or command == \"exec\" then\n        exp = (exp:gsub(\"%-%-%[(=*)%[.-%]%1%]\", \"\") -- remove comments\n                  :gsub(\"%-%-.-\\n\", \" \") -- remove line comments\n                  :gsub(\"\\n\", \" \")) -- convert new lines\n        if command == \"eval\" then exp = \"return \" .. exp end\n        client:send(\"EXEC \" .. exp .. \"\\n\")\n      elseif command == \"reload\" then\n        client:send(\"LOAD 0 -\\n\")\n      elseif command == \"loadstring\" then\n        local _, _, _, file, lines = string.find(exp, \"^([\\\"'])(.-)%1%s(.+)\")\n        if not file then\n           _, _, file, lines = string.find(exp, \"^(%S+)%s(.+)\")\n        end\n        client:send(\"LOAD \" .. tostring(#lines) .. \" \" .. file .. \"\\n\")\n        client:send(lines)\n      else\n        local file = io.open(exp, \"r\")\n        if not file and pcall(require, \"winapi\") then\n          -- if file is not open and winapi is there, try with a short path;\n          -- this may be needed for unicode paths on windows\n          winapi.set_encoding(winapi.CP_UTF8)\n          local shortp = winapi.short_path(exp)\n          file = shortp and io.open(shortp, \"r\")\n        end\n        if not file then return nil, nil, \"Cannot open file \" .. exp end\n        -- read the file and remove the shebang line as it causes a compilation error\n        local lines = file:read(\"*all\"):gsub(\"^#!.-\\n\", \"\\n\")\n        file:close()\n\n        local file = string.gsub(exp, \"\\\\\", \"/\") -- convert slash\n        file = removebasedir(file, basedir)\n        client:send(\"LOAD \" .. tostring(#lines) .. \" \" .. file .. \"\\n\")\n        if #lines > 0 then client:send(lines) end\n      end\n      while true do\n        local params, err = client:receive()\n        if not params then\n          return nil, nil, \"Debugger connection \" .. (err or \"error\")\n        end\n        local done = true\n        local _, _, status, len = string.find(params, \"^(%d+).-%s+(%d+)%s*$\")\n        if status == \"200\" then\n          len = tonumber(len)\n          if len > 0 then\n            local status, res\n            local str = client:receive(len)\n            -- handle serialized table with results\n            local func, err = loadstring(str)\n            if func then\n              status, res = pcall(func)\n              if not status then err = res\n              elseif type(res) ~= \"table\" then\n                err = \"received \"..type(res)..\" instead of expected 'table'\"\n              end\n            end\n            if err then\n              print(\"Error in processing results: \" .. err)\n              return nil, nil, \"Error in processing results: \" .. err\n            end\n            print(unpack(res))\n            return res[1], res\n          end\n        elseif status == \"201\" then\n          _, _, file, line = string.find(params, \"^201 Started%s+(.-)%s+(%d+)%s*$\")\n        elseif status == \"202\" or params == \"200 OK\" then\n          -- do nothing; this only happens when RE/LOAD command gets the response\n          -- that was for the original command that was aborted\n        elseif status == \"204\" then\n          local _, _, stream, size = string.find(params, \"^204 Output (%w+) (%d+)$\")\n          if stream and size then\n            local size = tonumber(size)\n            local msg = size > 0 and client:receive(size) or \"\"\n            print(msg)\n            if outputs[stream] then outputs[stream](msg) end\n            -- this was just the output, so go back reading the response\n            done = false\n          end\n        elseif status == \"401\" then\n          len = tonumber(len)\n          local res = client:receive(len)\n          print(\"Error in expression: \" .. res)\n          return nil, nil, res\n        else\n          print(\"Unknown error\")\n          return nil, nil, \"Debugger error: unexpected response after EXEC/LOAD '\" .. params .. \"'\"\n        end\n        if done then break end\n      end\n    else\n      print(\"Invalid command\")\n    end\n  elseif command == \"listb\" then\n    for l, v in pairs(breakpoints) do\n      for f in pairs(v) do\n        print(f .. \": \" .. l)\n      end\n    end\n  elseif command == \"listw\" then\n    for i, v in pairs(watches) do\n      print(\"Watch exp. \" .. i .. \": \" .. v)\n    end\n  elseif command == \"suspend\" then\n    client:send(\"SUSPEND\\n\")\n  elseif command == \"stack\" then\n    local opts = string.match(params, \"^[a-z]+%s+(.+)$\")\n    client:send(\"STACK\" .. (opts and \" \"..opts or \"\") ..\"\\n\")\n    local resp = client:receive()\n    local _, _, status, res = string.find(resp, \"^(%d+)%s+%w+%s+(.+)%s*$\")\n    if status == \"200\" then\n      local func, err = loadstring(res)\n      if func == nil then\n        print(\"Error in stack information: \" .. err)\n        return nil, nil, err\n      end\n      local ok, stack = pcall(func)\n      if not ok then\n        print(\"Error in stack information: \" .. stack)\n        return nil, nil, stack\n      end\n      for _,frame in ipairs(stack) do\n        print(mobdebug.line(frame[1], {comment = false}))\n      end\n      return stack\n    elseif status == \"401\" then\n      local _, _, len = string.find(resp, \"%s+(%d+)%s*$\")\n      len = tonumber(len)\n      local res = len > 0 and client:receive(len) or \"Invalid stack information.\"\n      print(\"Error in expression: \" .. res)\n      return nil, nil, res\n    else\n      print(\"Unknown error\")\n      return nil, nil, \"Debugger error: unexpected response after STACK\"\n    end\n  elseif command == \"output\" then\n    local _, _, stream, mode = string.find(params, \"^[a-z]+%s+(%w+)%s+([dcr])%s*$\")\n    if stream and mode then\n      client:send(\"OUTPUT \"..stream..\" \"..mode..\"\\n\")\n      local resp, err = client:receive()\n      if not resp then\n        print(\"Unknown error: \"..err)\n        return nil, nil, \"Debugger connection error: \"..err\n      end\n      local _, _, status = string.find(resp, \"^(%d+)%s+%w+%s*$\")\n      if status == \"200\" then\n        print(\"Stream \"..stream..\" redirected\")\n        outputs[stream] = type(options) == 'table' and options.handler or nil\n      -- the client knows when she is doing, so install the handler\n      elseif type(options) == 'table' and options.handler then\n        outputs[stream] = options.handler\n      else\n        print(\"Unknown error\")\n        return nil, nil, \"Debugger error: can't redirect \"..stream\n      end\n    else\n      print(\"Invalid command\")\n    end\n  elseif command == \"basedir\" then\n    local _, _, dir = string.find(params, \"^[a-z]+%s+(.+)$\")\n    if dir then\n      dir = string.gsub(dir, \"\\\\\", \"/\") -- convert slash\n      if not string.find(dir, \"/$\") then dir = dir .. \"/\" end\n\n      local remdir = dir:match(\"\\t(.+)\")\n      if remdir then dir = dir:gsub(\"/?\\t.+\", \"/\") end\n      basedir = dir\n\n      client:send(\"BASEDIR \"..(remdir or dir)..\"\\n\")\n      local resp, err = client:receive()\n      if not resp then\n        print(\"Unknown error: \"..err)\n        return nil, nil, \"Debugger connection error: \"..err\n      end\n      local _, _, status = string.find(resp, \"^(%d+)%s+%w+%s*$\")\n      if status == \"200\" then\n        print(\"New base directory is \" .. basedir)\n      else\n        print(\"Unknown error\")\n        return nil, nil, \"Debugger error: unexpected response after BASEDIR\"\n      end\n    else\n      print(basedir)\n    end\n  elseif command == \"help\" then\n    print(\"setb <file> <line>    -- sets a breakpoint\")\n    print(\"delb <file> <line>    -- removes a breakpoint\")\n    print(\"delallb               -- removes all breakpoints\")\n    print(\"setw <exp>            -- adds a new watch expression\")\n    print(\"delw <index>          -- removes the watch expression at index\")\n    print(\"delallw               -- removes all watch expressions\")\n    print(\"run                   -- runs until next breakpoint\")\n    print(\"step                  -- runs until next line, stepping into function calls\")\n    print(\"over                  -- runs until next line, stepping over function calls\")\n    print(\"out                   -- runs until line after returning from current function\")\n    print(\"listb                 -- lists breakpoints\")\n    print(\"listw                 -- lists watch expressions\")\n    print(\"eval <exp>            -- evaluates expression on the current context and returns its value\")\n    print(\"exec <stmt>           -- executes statement on the current context\")\n    print(\"load <file>           -- loads a local file for debugging\")\n    print(\"reload                -- restarts the current debugging session\")\n    print(\"stack                 -- reports stack trace\")\n    print(\"output stdout <d|c|r> -- capture and redirect io stream (default|copy|redirect)\")\n    print(\"basedir [<path>]      -- sets the base path of the remote application, or shows the current one\")\n    print(\"done                  -- stops the debugger and continues application execution\")\n    print(\"exit                  -- exits debugger and the application\")\n  else\n    local _, _, spaces = string.find(params, \"^(%s*)$\")\n    if spaces then\n      return nil, nil, \"Empty command\"\n    else\n      print(\"Invalid command\")\n      return nil, nil, \"Invalid command\"\n    end\n  end\n  return file, line\nend\n\n-- Starts debugging server\nlocal function listen(host, port)\n  host = host or \"*\"\n  port = port or mobdebug.port\n\n  local socket = require \"socket\"\n\n  print(\"Lua Remote Debugger\")\n  print(\"Run the program you wish to debug\")\n\n  local server = socket.bind(host, port)\n  local client = server:accept()\n\n  client:send(\"STEP\\n\")\n  client:receive()\n\n  local breakpoint = client:receive()\n  local _, _, file, line = string.find(breakpoint, \"^202 Paused%s+(.-)%s+(%d+)%s*$\")\n  if file and line then\n    print(\"Paused at file \" .. file )\n    print(\"Type 'help' for commands\")\n  else\n    local _, _, size = string.find(breakpoint, \"^401 Error in Execution (%d+)%s*$\")\n    if size then\n      print(\"Error in remote application: \")\n      print(client:receive(size))\n    end\n  end\n\n  while true do\n    io.write(\"> \")\n    local file, line, err = handle(io.read(\"*line\"), client)\n    if not file and err == false then break end -- completed debugging\n  end\n\n  client:close()\nend\n\nlocal cocreate\nlocal function coro()\n  if cocreate then return end -- only set once\n  cocreate = cocreate or coroutine.create\n  coroutine.create = function(f, ...)\n    return cocreate(function(...)\n      mobdebug.on()\n      return f(...)\n    end, ...)\n  end\nend\n\nlocal moconew\nlocal function moai()\n  if moconew then return end -- only set once\n  moconew = moconew or (MOAICoroutine and MOAICoroutine.new)\n  if not moconew then return end\n  MOAICoroutine.new = function(...)\n    local thread = moconew(...)\n    -- need to support both thread.run and getmetatable(thread).run, which\n    -- was used in earlier MOAI versions\n    local mt = thread.run and thread or getmetatable(thread)\n    local patched = mt.run\n    mt.run = function(self, f, ...)\n      return patched(self,  function(...)\n        mobdebug.on()\n        return f(...)\n      end, ...)\n    end\n    return thread\n  end\nend\n\n-- make public functions available\nmobdebug.setbreakpoint = set_breakpoint\nmobdebug.removebreakpoint = remove_breakpoint\nmobdebug.listen = listen\nmobdebug.loop = loop\nmobdebug.scratchpad = scratchpad\nmobdebug.handle = handle\nmobdebug.connect = connect\nmobdebug.start = start\nmobdebug.on = on\nmobdebug.off = off\nmobdebug.moai = moai\nmobdebug.coro = coro\nmobdebug.done = done\nmobdebug.pause = function() step_into = true end\nmobdebug.yield = nil -- callback\nmobdebug.output = output\nmobdebug.onexit = os and os.exit or done\nmobdebug.onscratch = nil -- callback\nmobdebug.basedir = function(b) if b then basedir = b end return basedir end\n\nreturn mobdebug\n"
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "premake4.lua",
          "type": "blob",
          "size": 2.849609375,
          "content": "--\n-- Premake 5.x build configuration script\n-- Use this script to configure the project with Premake4.\n--\n\n--\n-- Define the project. Put the release configuration first so it will be the\n-- default when folks build using the makefile. That way they don't have to\n-- worry about the /scripts argument and all that.\n--\n\n\tsolution \"Premake5\"\n\t\tconfigurations { \"Release\", \"Debug\" }\n\t\tlocation ( _OPTIONS[\"to\"] )\n\n\tproject \"Premake5\"\n\t\ttargetname  \"premake5\"\n\t\tlanguage    \"C\"\n\t\tkind        \"ConsoleApp\"\n\t\tdefines     { \"PREMAKE_NO_BUILTIN_SCRIPTS\" }\n\t\tflags       { \"No64BitChecks\", \"ExtraWarnings\", \"StaticRuntime\" }\n\t\tincludedirs { \"contrib/lua/src\", \"contrib/luashim\" }\n\n\t\tfiles\n\t\t{\n\t\t\t\"*.txt\", \"**.lua\",\n\t\t\t\"contrib/lua/src/*.c\", \"contrib/lua/src/*.h\",\n\t\t\t\"src/host/*.c\"\n\t\t}\n\n\t\texcludes\n\t\t{\n\t\t\t\"contrib/lua/src/lauxlib.c\",\n\t\t\t\"contrib/lua/src/lua.c\",\n\t\t\t\"contrib/lua/src/luac.c\",\n\t\t\t\"contrib/lua/src/print.c\",\n\t\t\t\"contrib/lua/**.lua\",\n\t\t\t\"contrib/lua/etc/*.c\"\n\t\t}\n\n\t\tconfiguration \"Debug\"\n\t\t\ttargetdir   \"bin/debug\"\n\t\t\tdefines     \"_DEBUG\"\n\t\t\tflags       { \"Symbols\" }\n\n\t\tconfiguration \"Release\"\n\t\t\ttargetdir   \"bin/release\"\n\t\t\tdefines     \"NDEBUG\"\n\t\t\tflags       { \"OptimizeSize\" }\n\n\t\tconfiguration \"vs*\"\n\t\t\tdefines     { \"_CRT_SECURE_NO_WARNINGS\" }\n\n\t\tconfiguration \"vs2005\"\n\t\t\tdefines\t{\"_CRT_SECURE_NO_DEPRECATE\" }\n\n\t\tconfiguration \"windows\"\n\t\t\tlinks { \"ole32\", \"advapi32\" }\n\n\t\tconfiguration \"linux or bsd or hurd\"\n\t\t\tdefines     { \"LUA_USE_POSIX\", \"LUA_USE_DLOPEN\" }\n\t\t\tlinks       { \"m\" }\n\t\t\tlinkoptions { \"-rdynamic\" }\n\n\t\tconfiguration \"linux or hurd\"\n\t\t\tlinks       { \"dl\", \"rt\" }\n\n\t\tconfiguration \"macosx\"\n\t\t\tdefines     { \"LUA_USE_MACOSX\" }\n\t\t\tlinks       { \"CoreServices.framework\" }\n\n\t\tconfiguration { \"macosx\", \"gmake\" }\n\t\t\t-- toolset \"clang\"  (not until a 5.0 binary is available)\n\t\t\tbuildoptions { \"-mmacosx-version-min=10.4\" }\n\t\t\tlinkoptions  { \"-mmacosx-version-min=10.4\" }\n\n\t\tconfiguration { \"solaris\" }\n\t\t\tlinks       { \"m\", \"socket\", \"nsl\" }\n\n\t\tconfiguration \"aix\"\n\t\t\tdefines     { \"LUA_USE_POSIX\", \"LUA_USE_DLOPEN\" }\n\t\t\tlinks       { \"m\" }\n\n\n--\n-- A more thorough cleanup.\n--\n\n\tif _ACTION == \"clean\" then\n\t\tos.rmdir(\"bin\")\n\t\tos.rmdir(\"build\")\n\tend\n\n\n\n--\n-- Use the --to=path option to control where the project files get generated. I use\n-- this to create project files for each supported toolset, each in their own folder,\n-- in preparation for deployment.\n--\n\n\tnewoption {\n\t\ttrigger = \"to\",\n\t\tvalue   = \"path\",\n\t\tdescription = \"Set the output location for the generated files\"\n\t}\n\n\n\n--\n-- This new embed action is slightly hardcoded for the 4.x executable, and is\n-- really only intended to get folks bootstrapped on to 5.x\n--\n\n\tnewaction {\n\t\ttrigger = \"embed\",\n\t\tdescription = \"Embed scripts in scripts.c; required before release builds\",\n\t\texecute = function ()\n\t\t\t_MAIN_SCRIPT_DIR = os.getcwd()\n\t\t\t_SCRIPT_DIR = path.join(_MAIN_SCRIPT_DIR, \"scripts\")\n\t\t\tdofile(\"scripts/embed.lua\")\n\t\tend\n\t}\n"
        },
        {
          "name": "premake5.lua",
          "type": "blob",
          "size": 9.6455078125,
          "content": "---\n-- Premake 5.x build configuration script\n-- Use this script to configure the project with Premake5.\n---\n\n--\n-- Remember my location; I will need it to locate sub-scripts later.\n--\n\n\tlocal corePath = _SCRIPT_DIR\n\n\n--\n-- Disable deprecation warnings for myself, so that older development\n-- versions of Premake can be used to bootstrap new builds.\n--\n\n\tpremake.api.deprecations \"off\"\n\n\n--\n-- Register supporting actions and options.\n--\n\n\tnewaction {\n\t\ttrigger = \"embed\",\n\t\tdescription = \"Embed scripts in scripts.c; required before release builds\",\n\t\texecute = function ()\n\t\t\tinclude (path.join(corePath, \"scripts/embed.lua\"))\n\t\tend\n\t}\n\n\n\tnewaction {\n\t\ttrigger = \"package\",\n\t\tdescription = \"Creates source and binary packages\",\n\t\texecute = function ()\n\t\t\tinclude (path.join(corePath, \"scripts/package.lua\"))\n\t\tend\n\t}\n\n\n\tnewaction {\n\t\ttrigger = \"docs-check\",\n\t\tdescription = \"Validates documentation files for Premake APIs\",\n\t\texecute = function ()\n\t\t\tinclude (path.join(corePath, \"scripts/docscheck.lua\"))\n\t\tend\n\t}\n\n\n\tnewaction {\n\t\ttrigger = \"test\",\n\t\tdescription = \"Run the automated test suite\",\n\t\texecute = function ()\n\t\t\ttest = require \"self-test\"\n\t\t\tpremake.action.call(\"self-test\")\n\t\tend\n\t}\n\n\n\tnewoption {\n\t\ttrigger = \"test-all\",\n\t\tdescription = \"Run all unit tests, including slower network and I/O\"\n\t}\n\n\n\tnewoption {\n\t\ttrigger = \"test-only\",\n\t\tdescription = \"When testing, run only the specified suite or test\"\n\t}\n\n\n\tnewoption {\n\t\ttrigger = \"to\",\n\t\tvalue   = \"path\",\n\t\tdescription = \"Set the output location for the generated files\"\n\t}\n\n\n\tnewoption {\n\t\ttrigger = \"curl-src\",\n\t\tdescription = \"Specify the source of the Curl 3rd party library\",\n\t\tallowed = {\n\t\t\t{ \"none\", \"Disables Curl\" },\n\t\t\t{ \"contrib\", \"Uses Curl in contrib folder\" },\n\t\t\t{ \"system\", \"Uses Curl from the host system\" },\n\t\t},\n\t\tdefault = \"contrib\",\n\t}\n\n\tnewoption {\n\t\ttrigger = \"no-curl\",\n\t\tdescription = \"Disable Curl 3rd party lib\"\n\t}\n\tif _OPTIONS[\"no-curl\"] then\n\t\tpremake.warn(\"--no-curl is deprecated, please use --curl-src=none\")\n\t\t_OPTIONS[\"curl-src\"] = \"none\"\n\tend\n\n\n\tnewoption {\n\t\ttrigger = \"zlib-src\",\n\t\tdescription = \"Specify the source of the Zlib/Zip 3rd party library\",\n\t\tallowed = {\n\t\t\t{ \"none\", \"Disables Zlib/Zip\" },\n\t\t\t{ \"contrib\", \"Uses Zlib/Zip in contrib folder\" },\n\t\t\t{ \"system\", \"Uses Zlib/Zip from the host system\" },\n\t\t},\n\t\tdefault = \"contrib\",\n\t}\n\n\tnewoption {\n\t\ttrigger = \"no-zlib\",\n\t\tdescription = \"Disable Zlib/Zip 3rd party lib\"\n\t}\n\tif _OPTIONS[\"no-zlib\"] then\n\t\tpremake.warn(\"--no-zlib is deprecated, please use --zlib-src=none\")\n\t\t_OPTIONS[\"zlib-src\"] = \"none\"\n\tend\n\n\tnewoption {\n\t\ttrigger = \"no-luasocket\",\n\t\tdescription = \"Disable Luasocket 3rd party lib\"\n\t}\n\n\tnewoption {\n\t\ttrigger = \"lua-src\",\n\t\tdescription = \"Specify the source of the Lua 3rd party library\",\n\t\tallowed = {\n\t\t\t{ \"contrib\", \"Uses Lua in contrib folder\" },\n\t\t\t{ \"system\", \"Uses Lua from the host system\" },\n\t\t},\n\t\tdefault = \"contrib\",\n\t}\n\n\tnewoption {\n\t\ttrigger = \"lib-src\",\n\t\tdescription = \"Specify the source of all 3rd party libraries\",\n\t\tallowed = {\n\t\t\t{ \"none\", \"Disables all optional 3rd party libraries\" },\n\t\t\t{ \"contrib\", \"Uses 3rd party libraries in contrib folder\" },\n\t\t\t{ \"system\", \"Uses 3rd party libraries from the host system\" },\n\t\t}\n\t}\n\n\tif _OPTIONS[\"lib-src\"] == \"none\" then\n\t\t_OPTIONS[\"curl-src\"] = \"none\"\n\t\t_OPTIONS[\"zlib-src\"] = \"none\"\n\t\t-- Lua is not optional\n\telseif _OPTIONS[\"lib-src\"] == \"contrib\" then\n\t\t_OPTIONS[\"curl-src\"] = \"contrib\"\n\t\t_OPTIONS[\"zlib-src\"] = \"contrib\"\n\t\t_OPTIONS[\"lua-src\"] = \"contrib\"\n\telseif _OPTIONS[\"lib-src\"] == \"system\" then\n\t\t_OPTIONS[\"curl-src\"] = \"system\"\n\t\t_OPTIONS[\"zlib-src\"] = \"system\"\n\t\t_OPTIONS[\"lua-src\"] = \"system\"\n\tend\n\n\tnewoption {\n\t\ttrigger     = \"bytecode\",\n\t\tdescription = \"Embed scripts as bytecode instead of stripped source code\"\n\t}\n\n\tnewoption {\n\t\ttrigger = \"arch\",\n\t\tvalue = \"arch\",\n\t\tdescription = \"Set the architecture of the binary to be built.\",\n\t\tallowed = {\n\t\t\t{ \"ARM\", \"ARM (On macOS, same as ARM64.)\" },\n\t\t\t{ \"ARM64\", \"ARM64\" },\n\t\t\t{ \"x86\", \"x86 (On macOS, same as x86_64.)\" },\n\t\t\t{ \"x86_64\", \"x86_64\" },\n\t\t\t{ \"Universal\", \"Universal Binary (macOS only)\" },\n\t\t\t--\n\t\t\t{ \"Win32\", \"Same as x86\" },\n\t\t\t{ \"x64\", \"Same as x86_64\" },\n\t\t},\n\t\t-- \"Generates default platforms for targets, x86 and x86_64 projects for Windows.\" }\n\t\tdefault = nil,\n\t}\n\n--\n-- Define the project. Put the release configuration first so it will be the\n-- default when folks build using the makefile. That way they don't have to\n-- worry about the /scripts argument and all that.\n--\n-- TODO: Switch to these new APIs once they've had a chance to land everywhere\n--\n--    defaultConfiguration \"Release\"\n--    symbols \"On\"\n--\n\n\tsolution \"Premake5\"\n\t\tconfigurations { \"Release\", \"Debug\" }\n\t\tlocation ( _OPTIONS[\"to\"] )\n\n\t\tflags { \"MultiProcessorCompile\" }\n\t\twarnings \"Extra\"\n\n\t\tfilter { \"options:not zlib-src=none\" }\n\t\t\tdefines { \"PREMAKE_COMPRESSION\" }\n\n\t\tfilter { \"options:not curl-src=none\" }\n\t\t\tdefines { \"PREMAKE_CURL\" }\n\t\tfilter { \"options:curl-src=contrib\" }\n\t\t\tdefines { \"CURL_STATICLIB\" }\n\n\t\tfilter { \"options:lua-src=contrib\" }\n\t\t\tdefines { \"LUA_STATICLIB\" }\n\n\t\tfilter { \"system:macosx\", \"options:arch=ARM or arch=ARM64\" }\n\t\t\tbuildoptions { \"-arch arm64\" }\n\t\t\tlinkoptions { \"-arch arm64\" }\n\n\t\tfilter { \"system:macosx\", \"options:arch=x86 or arch=x86_64 or arch=Win32 or arch=x64\" }\n\t\t\tbuildoptions { \"-arch x86_64\" }\n\t\t\tlinkoptions { \"-arch x86_64\" }\n\n\t\tfilter { \"system:macosx\", \"options:arch=Universal\" }\n\t\t\tbuildoptions { \"-arch arm64\", \"-arch x86_64\" }\n\t\t\tlinkoptions { \"-arch arm64\", \"-arch x86_64\" }\n\n\t\tfilter { \"system:windows\", \"options:arch=ARM\" }\n\t\t\tplatforms { \"ARM\" }\n\n\t\tfilter { \"system:windows\", \"options:arch=ARM64\" }\n\t\t\tplatforms { \"ARM64\" }\n\n\t\tfilter { \"system:windows\", \"options:arch=x86 or arch=Win32\" }\n\t\t\tplatforms { \"Win32\" }\n\n\t\tfilter { \"system:windows\", \"options:arch=x86_64 or arch=x64\" }\n\t\t\tplatforms { \"x64\" }\n\n\t\tfilter { \"system:windows\", \"options:not arch\" }\n\t\t\tplatforms { \"x86\", \"x64\" }\n\n\t\tfilter \"configurations:Debug\"\n\t\t\tdefines     \"_DEBUG\"\n\t\t\tsymbols\t    \"On\"\n\n\t\tfilter \"configurations:Release\"\n\t\t\tdefines     \"NDEBUG\"\n\t\t\toptimize    \"Full\"\n\t\t\tflags       { \"NoBufferSecurityCheck\", \"NoRuntimeChecks\" }\n\n\t\tfilter \"action:vs*\"\n\t\t\tdefines     { \"_CRT_SECURE_NO_DEPRECATE\", \"_CRT_SECURE_NO_WARNINGS\", \"_CRT_NONSTDC_NO_WARNINGS\" }\n\n\t\tfilter { \"system:windows\", \"configurations:Release\" }\n\t\t\tflags       { \"NoIncrementalLink\" }\n\n\t\t-- MinGW AR does not handle LTO out of the box and need a plugin to be setup\n\t\tfilter { \"system:windows\", \"configurations:Release\", \"toolset:not mingw\" }\n\t\t\tflags\t\t{ \"LinkTimeOptimization\" }\n\n\t\tfilter { \"system:uwp\" }\n\t\t\tsystemversion \"latest:latest\"\n\t\t\tconsumewinrtextension \"false\"\n\n\tproject \"Premake5\"\n\t\ttargetname  \"premake5\"\n\t\tlanguage    \"C\"\n\t\tkind        \"ConsoleApp\"\n\n\t\tfiles\n\t\t{\n\t\t\t\"*.txt\", \"**.lua\",\n\t\t\t\"src/**.h\", \"src/**.c\",\n\t\t\t\"modules/**\"\n\t\t}\n\n\t\texcludes\n\t\t{\n\t\t\t\"contrib/**.*\",\n\t\t\t\"binmodules/**.*\"\n\t\t}\n\n\t\tfilter { \"options:lua-src=contrib\" }\n\t\t\tincludedirs { \"contrib/lua/src\", \"contrib/luashim\" }\n\t\t\tlinks       { \"lua-lib\" }\n\n\t\tfilter { \"options:lua-src=system\" }\n\t\t\tlinks { \"lua5.3\" }\n\n\t\t-- optional 3rd party libraries\n\t\tfilter { \"options:zlib-src=contrib\" }\n\t\t\tincludedirs { \"contrib/zlib\", \"contrib/libzip\" }\n\t\t\tlinks { \"zip-lib\", \"zlib-lib\" }\n\n\t\tfilter { \"options:zlib-src=system\" }\n\t\t\tlinks { \"zip\", \"z\" }\n\n\t\tfilter { \"options:curl-src=contrib\" }\n\t\t\tincludedirs { \"contrib/curl/include\" }\n\t\t\tlinks { \"curl-lib\" }\n\n\t\tfilter { \"options:curl-src=system\" }\n\t\t\tlinks { \"curl\" }\n\n\t\tfilter \"configurations:Debug\"\n\t\t\ttargetdir   \"bin/debug\"\n\t\t\tdebugargs   { \"--scripts=%{prj.location}/%{path.getrelative(prj.location, prj.basedir)}\", \"test\" }\n\t\t\tdebugdir    \".\"\n\n\t\tfilter \"configurations:Release\"\n\t\t\ttargetdir   \"bin/release\"\n\n\t\tfilter \"system:windows\"\n\t\t\tlinks       { \"ole32\", \"ws2_32\", \"advapi32\", \"version\" }\n\t\t\tfiles { \"src/**.rc\" }\n\n\t\tfilter \"toolset:mingw\"\n\t\t\tlinks\t\t{ \"crypt32\", \"bcrypt\" }\n\n\t\tfilter \"system:linux or bsd or hurd\"\n\t\t\tdefines     { \"LUA_USE_POSIX\", \"LUA_USE_DLOPEN\" }\n\t\t\tlinks       { \"m\" }\n\t\t\tlinkoptions { \"-rdynamic\" }\n\n\t\tfilter \"system:linux or hurd\"\n\t\t\tlinks       { \"dl\", \"rt\" }\n\n\t\tfilter { \"system:not windows\", \"system:not macosx\", \"options:curl-src=contrib\" }\n\t\t\tlinks       { \"mbedtls-lib\" }\n\n\t\tfilter \"system:macosx\"\n\t\t\tdefines     { \"LUA_USE_MACOSX\" }\n\t\t\tlinks       { \"CoreServices.framework\", \"Foundation.framework\", \"Security.framework\", \"readline\" }\n\n\t\tfilter { \"system:linux\", \"toolset:not cosmocc\" }\n\t\t\tlinks\t\t{ \"uuid\" }\n\n\t\tfilter { \"system:macosx\", \"action:gmake\" }\n\t\t\ttoolset \"clang\"\n\n\t\tfilter { \"system:solaris\" }\n\t\t\tlinks       { \"m\", \"socket\", \"nsl\" }\n\n\t\tfilter \"system:aix\"\n\t\t\tdefines     { \"LUA_USE_POSIX\", \"LUA_USE_DLOPEN\" }\n\t\t\tlinks       { \"m\" }\n\n\t\tfilter \"system:haiku\"\n\t\t\tdefines     { \"LUA_USE_POSIX\", \"LUA_USE_DLOPEN\", \"_BSD_SOURCE\" }\n\t\t\tlinks       { \"network\", \"bsd\" }\n\nif premake.action.supports(\"None\") then\n\tproject \"Web\"\n\t\tkind \"None\"\n\n\t\tfiles\n\t\t{\n\t\t\t\"website/blog/**\",\n\t\t\t\"website/community/**\",\n\t\t\t\"website/doc/**\",\n\t\t\t\"website/src/**\",\n\t\t\t\"website/static/**\",\n\t\t\t\"website/*\"\n\t\t}\n\t\t-- ensure that \"website/node_modules/**\" is not there (generated files)\n\n\tproject \"Github\"\n\t\tkind \"None\"\n\n\t\tfiles \".github/**\"\nend\n\n\t-- optional 3rd party libraries\n\tgroup \"contrib\"\n\t\tif _OPTIONS[\"lua-src\"] == \"contrib\" then\n\t\t\tinclude \"contrib/lua\"\n\t\t\tinclude \"contrib/luashim\"\n\t\tend\n\n\t\tif _OPTIONS[\"zlib-src\"] == \"contrib\" then\n\t\t\tinclude \"contrib/zlib\"\n\t\t\tinclude \"contrib/libzip\"\n\t\tend\n\n\t\tif _OPTIONS[\"curl-src\"] == \"contrib\" then\n\t\t\tinclude \"contrib/mbedtls\"\n\t\t\tinclude \"contrib/curl\"\n\t\tend\n\n\tif _OPTIONS[\"lua-src\"] == \"contrib\" and _OPTIONS[\"cc\"] ~= \"cosmocc\" then\n\t\tgroup \"Binary Modules\"\n\t\t\tinclude \"binmodules/example\"\n\n\t\t\tif not _OPTIONS[\"no-luasocket\"] then\n\t\t\t\tinclude \"binmodules/luasocket\"\n\t\t\tend\n\tend\n\n--\n-- A more thorough cleanup.\n--\n\n\tif _ACTION == \"clean\" then\n\t\tos.rmdir(\"bin\")\n\t\tos.rmdir(\"build\")\n\tend\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}