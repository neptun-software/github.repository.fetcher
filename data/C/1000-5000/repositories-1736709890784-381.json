{
  "metadata": {
    "timestamp": 1736709890784,
    "page": 381,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yitter/IdGenerator",
      "stars": 2703,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.189453125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n*.editorconfig\n__*.bat\n.dccache\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n**/.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\ntarget/\n\n\n# macOS\n.DS_Store\n\n# python\n__pycache__\n\n"
        },
        {
          "name": "C#",
          "type": "tree",
          "content": null
        },
        {
          "name": "C++",
          "type": "tree",
          "content": null
        },
        {
          "name": "C",
          "type": "tree",
          "content": null
        },
        {
          "name": "Delphi",
          "type": "tree",
          "content": null
        },
        {
          "name": "Go",
          "type": "tree",
          "content": null
        },
        {
          "name": "Java",
          "type": "tree",
          "content": null
        },
        {
          "name": "JavaScript",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2021 yitter\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "PHP",
          "type": "tree",
          "content": null
        },
        {
          "name": "Python",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.74609375,
          "content": "# 雪花算法中非常好用的数字ID生成器\n\n## 💎 最佳实践（置顶）\n\n针对大家在使用中经常出现的性能疑问，我给出以下3组最佳实践：\n\n❄ 如果ID生成需求不超过5W个/s，不用修改任何配置参数\n\n❄ 如果超过5W个/s，低于50W个/s，推荐修改：SeqBitLength=10\n\n❄ 如果超过50W个/s，接近500W个/s，推荐修改：SeqBitLength=12\n\n总之，增加 SeqBitLength 会让性能更高，但生成的 ID 会更长。\n\n\n## 💎 算法介绍\n\n❄ 这是优化的雪花算法（雪花漂移），它生成的ID更短、速度更快。\n\n❄ 支持 k8s 等容器环境自动扩容（自动注册 WorkerId），可在单机或分布式环境生成数字型唯一ID。\n\n❄ 原生支持 C#/Java/Go/C/Rust/Python/Node.js/PHP(C扩展)/SQL/ 等语言，并提供多线程安全调用动态库（FFI）。\n\n❄ 兼容所有雪花算法（号段模式或经典模式，大厂或小厂），将来你可做任意的升级切换。\n\n❄ 这是计算机历史上最全面的雪花ID生成工具。【截至2022年8月】\n\n\n#### 需求来源\n\n💧  作为架构设计的你，想要解决数据库主键唯一的问题，特别是在分布式系统多数据库中。\n\n💧  你希望数据表主键用最少的存储空间，索引速度更快，Select、Insert 和 Update 更迅速。\n\n💧  你要考虑在分库分表（合库合表）时，主键值可直接使用，并能反映业务时序。\n\n💧  如果这样的主键值太长，超过前端 js Number 类型最大值，须把 Long 型转换为 String 型，你会觉得有点沮丧。\n\n💧  尽管 Guid 能自增，但占用空间大，索引速度慢，你不想用它。\n\n💧  应用实例可能超过50个，每个并发请求可达10W/s。\n\n💧  要在容器环境部署应用，支持水平复制、自动扩容。\n\n💧  不想依赖 redis 的自增操作获得连续的主键ID，因为连续的ID存在业务数据安全风险。\n\n💧  你希望系统运行 100 年以上。\n\n\n#### 传统算法问题\n\n❌ 生成的ID太长。\n\n❌ 瞬时并发量不够。\n\n❌ 不能解决时间回拨问题。\n\n❌ 不支持后补生成前序ID。\n\n❌ 可能依赖外部存储系统。\n\n\n#### 新算法特点\n\n✔ 整形数字，随时间单调递增（不一定连续），长度更短，用50年都不会超过 js Number类型最大值。（默认配置）\n\n✔ 速度更快，是传统雪花算法的2-5倍，0.1秒可生成50万个（基于8代低压i7）。\n\n✔ 支持时间回拨处理。比如服务器时间回拨1秒，本算法能自动适应生成临界时间的唯一ID。\n\n✔ 支持手工插入新ID。当业务需要在历史时间生成新ID时，用本算法的预留位能生成5000个每秒。\n\n✔ 不依赖任何外部缓存和数据库。（k8s环境下自动注册 WorkerId 的动态库依赖 redis）\n\n✔ 基础功能，开箱即用，无需配置文件、数据库连接等。\n\n\n#### 性能数据\n\n(参数：10位自增序列，1000次漂移最大值)\n| 连续请求量 |  5K  |  5W  |  50W  |\n|  ----  | ----  |  ----  | ----  |\n| 传统雪花算法 | 0.0045s | 0.053s  |  0.556s |\n| 雪花漂移算法  | 0.0015s | 0.012s |  0.113s |\n\n💍 极致性能：500W/s~3000W/s。（所有测试数据均基于8代低压i7计算）\n\n\n#### 如何处理时间回拨\n\n🔶 当发生系统时间回拨时，算法采用过去时序的预留序数生成新的ID。\n\n🔶 回拨生成的ID序号，默认靠前，也可以调整为靠后。\n\n🔶 允许时间回拨至本算法预设基数（参数可调）。\n\n\n## 💎 ID组成说明\n\n * 本算法生成的ID由3部分组成（沿用雪花算法定义）：\n * +-------------------------+--------------+----------+\n * | 1.相对基础时间的时间差 | 2.WorkerId | 3.序列数 |\n * +-------------------------+--------------+----------+\n * \n * 第1部分，时间差，是生成ID时的系统时间减去 BaseTime 的总时间差（毫秒单位）。\n * 第2部分，WorkerId，是区分不同机器或不同应用的唯一ID，最大值由 WorkerIdBitLength（默认6）限定。\n * 第3部分，序列数，是每毫秒下的序列数，由参数中的 SeqBitLength（默认6）限定。\n\n#### ID示例\n\n🟣 本算法生成的 ID ，是整数（占用空间最多8字节），以下是基于默认配置生成的ID：\n```\n129053495681099        (运行1年，长度：15)\n387750301904971        (运行3年，长度：15)\n646093214093387        (运行5年，长度：15)\n1292658282840139       (运行10年，长度：16)\n9007199254740992       (运行70年，达到 js Number 最大值，长度：16)\n165399880288699493     (运行1000年，等同普通雪花算法运行1年，长度：18)\n```\n\n🟣 本算法生成的 ID 值，是 js Number 最大值的 1%-10%，是普通雪花算法值的千分之一，而生成速度却超过普通雪花算法。\n\n🟣 js Number 类型最大数值：9007199254740992，本算法在保持并发性能（5W+/0.01s）和最大64个 WorkerId（6bit）的同时，能用70年才到 js Number Max 值。\n\n\n### 长度估算\n\n```\n💍 每增加 1位 WorkerIdBitLength 或 SeqBitLength，生成的ID数字值将会乘以2（基础长度可参考前一节“ID示例”），反之则除以2。\n```\n\n### 能用多久\n\n能用多久的解释，是指生成的ID数字，何时能增长到超过 long（有符号64位，8字节）最大值。\n\n🔵 在默认配置下，ID可用 71000 年不重复。\n\n🔵 在支持 1024 个工作节点时，ID可用 4480 年不重复。\n\n🔵 在支持 4096 个工作节点时，ID可用 1120 年不重复。\n\n\n## 💎 参数设置\n\n❄ ***WorkerIdBitLength***，机器码位长，决定 WorkerId 的最大值，**默认值6**，取值范围 [1, 19]，实际上有些语言采用 无符号 ushort (uint16)  类型接收该参数，所以最大值是16，如果是采用 有符号 short (int16)，则最大值为15。\n\n❄ **WorkerId**，机器码，**最重要参数**，无默认值，必须 **全局唯一**（或相同 DataCenterId 内唯一），必须 **程序设定**，缺省条件（WorkerIdBitLength取默认值）时最大值63，理论最大值 2^WorkerIdBitLength-1（不同实现语言可能会限定在 65535 或 32767，原理同 WorkerIdBitLength 规则）。不同机器或不同应用实例 **不能相同**，你可通过应用程序配置该值，也可通过调用外部服务获取值。针对自动注册WorkerId需求，本算法提供默认实现：通过 redis 自动注册 WorkerId 的动态库，详见“Tools\\AutoRegisterWorkerId”。\n\n**特别提示**：如果一台服务器部署多个独立服务，需要为每个服务指定不同的 WorkerId。\n\n❄ ***SeqBitLength***，序列数位长，**默认值6**，取值范围 [3, 21]（建议不小于4），决定每毫秒基础生成的ID个数。如果每秒请求数不超过5W，保持默认值6即可；如果超过5W，不超过50W，建议赋值10或更大，以此类推。规则要求：WorkerIdBitLength + SeqBitLength 不超过 22。\n\n❄ ***MinSeqNumber***，最小序列数，默认值5，取值范围 [5, MaxSeqNumber]，每毫秒的前5个序列数对应编号0-4是保留位，其中1-4是时间回拨相应预留位，0是手工新值预留位。\n\n❄ ***MaxSeqNumber***，最大序列数，设置范围 [MinSeqNumber, 2^SeqBitLength-1]，默认值0，真实最大序列数取最大值（2^SeqBitLength-1），不为0时，取其为真实最大序列数，一般无需设置，除非多机共享WorkerId分段生成ID（此时还要正确设置最小序列数）。\n\n❄ ***BaseTime***，基础时间（也称：基点时间、原点时间、纪元时间），有默认值（2020年），是毫秒时间戳（是整数，.NET是DatetTime类型），作用是：用生成ID时的系统时间与基础时间的差值（毫秒数）作为生成ID的时间戳。基础时间一般无需设置，如果觉得默认值太老，你可以重新设置，不过要注意，这个值以后最好不变。\n\n\n第二版计划增加参数：\n\n❄ ***DataCenterId***，数据中心ID（机房ID，默认0），请确保全局唯一。\n\n❄ ***DataCenterIdBitLength***，数据中心ID长度（默认0）。\n\n❄ ***TimestampType***，时间戳类型（0-毫秒，1-秒），默认0。\n\n\n#### 常规集成\n\n1️⃣ 用单例模式调用。本算法采用单线程生成ID，多方调用会被互斥。在同一应用实例内，调用者使用多线程（或并行）方式调用本算法，不会增加ID产出速度。\n\n2️⃣ 指定唯一的 WorkerId。必须由外部系统确保 WorkerId 的全局唯一性，并赋值给本算法入口参数。\n\n3️⃣ 单机多实例部署时使用不同 WorkerId。并非所有实现都支持跨进程的并发唯一，保险起见，在同一主机上部署多应用实例时，请确保各 WorkerId 唯一。\n\n4️⃣ 异常处理。算法会抛出所有 Exception，外部系统应 catch 异常并做好应对处理，以免引发更大的系统崩溃。\n\n5️⃣ 认真理解 IdGeneratorOptions 的定义，这对集成和使用本算法有帮助。\n\n6️⃣ 使用雪花漂移算法。虽然代码里包含了传统雪花算法的定义，并且你可以在入口处指定（Method=2）来启用传统算法，但仍建议你使用雪花漂移算法（Method=1，默认的），毕竟它具有更好的伸缩力和更高的性能。\n\n7️⃣ 不要修改核心算法。本算法内部参数较多，逻辑较为复杂，在你尚未掌握核心逻辑时，请勿修改核心代码且用于生产环境，除非通过大量细致、科学的测试验证。\n\n8️⃣ 应用域内配置策略相同。当系统运行一段时间后，项目需要从程序指定 WorkerId 转到自动注册 WorkerId 时，请确保同一应用域内所有在用实例采用一致的配置策略，这不仅仅针对 WorkerId，也包含其他配置参数。\n\n9️⃣ 管理好服务器时间。雪花算法依赖系统时间，不要手工大幅度回调操作系统时间。如果一定要调整，切记：确保服务再次启动时的系统时间大于最后一次关闭时的时间。（注：世界级或网络级的时间同步或回拨，引起的系统时间小幅度变化，对本算法没影响）\n\n\n#### 配置变更\n\n配置变更是指系统运行一段时间后，再调整运行参数（IdGeneratorOptions 对象属性），请注意：\n\n🔴 1.首要原则是：BaseTime **只能更旧**（距现在更远），让生成的ID值较历史最大值更大，确保没有时间重叠区，不产生重复ID。[**不推荐** 在系统运行之后调整 BaseTime]\n\n🔴 2.任何时候增加 WorkerIdBitLength 或 SeqBitLength，都是允许的，但应慎用 “减小”操作，因为这可能导致在未来某天生成的 ID 与旧配置时相同。[允许在系统运行之后 **增加** 任何一个 xxxBitLength 值]\n\n🔴 3.如果必须减小 WorkerIdBitLength 或 SeqBitLength 其中的一项，一定要满足条件：新的两个 xxxBitLength 之和要大于旧值之和。[**不推荐** 在运行之后缩小任何一个 BitLength 值]\n\n🔴 4.上述3条规则，并未在本算法内做逻辑控制，使用者应在确认新配置符合要求后，再实施配置变更。\n\n\n## 自动注册WorkerId\n\n🔍 唯一ID生成器，依赖WorkerId，当业务服务需要水平无差别复制（自动扩容）时，这就要求能自动注册全局唯一WorkerId，然后才能生产唯一ID。\n\n🔍 本算法提供开源动态库（go语言实现），能在容器 k8s 等容器环境下，通过 redis 自动注册 WorkerId。\n\n🔍 通过redis注册WorkerId，并非唯一方法。你还可以开发中心化的配置服务，各端点服务启动时，通过中心服务获取唯一 WorkerId。\n\n🔍 当然，如果你的服务无需自动扩容，那就不必自动注册WorkerId，而是为它们分别设置全局唯一值。\n\n🔍 方法还有很多，例如：开发中心化的ID生成服务，由它为各端点服务（单个或批量）生成可用ID。\n\n\n#### 自动注册流程图\n\n图片链接：https://github.com/yitter/IdGenerator/blob/master/Tools/AutoRegisterWorkerId/regprocess.jpg\n\n源码路径：/Go/source/regworkerid/reghelper.go\n\n#### 动态库下载\n\n下载链接：https://github.com/yitter/IdGenerator/releases/download/v1.3.3/workeridgo_lib_v1.3.3.zip\n\n#### 动态库接口定义\n```\n// 注册一个 WorkerId，会先注销所有本机已注册的记录\n// address: Redis连接地址，单机模式示例：127.0.0.1:6379，哨兵/集群模式示例：127.0.0.1:26380,127.0.0.1:26381,127.0.0.1:26382\n// password: Redis连接密码\n// db: Redis指定存储库，示例：1\n// sentinelMasterName: Redis 哨兵模式下的服务名称，示例：mymaster，非哨兵模式传入空字符串即可\n// minWorkerId: WorkerId 最小值，示例：30\n// maxWorkerId: WorkerId 最大值，示例：63\n// lifeTimeSeconds: WorkerId缓存时长（秒，3的倍数），推荐值15\nextern GoInt32 RegisterOne(char* server, char* password, GoInt32 db, char* sentinelMasterName, GoInt32 minWorkerId, GoInt32 maxWorkerId, GoInt32 lifeTimeSeconds);\n\n// 注销本机已注册的 WorkerId\nextern void UnRegister();\n\n```\n\n## 已实现的语言\n\n| 语言 |  github  | \n|  ----  | ----  |  \n| 🌲 C# | [查看示例][1]  | \n| 🌲 Java | [查看示例][2]  | \n| 🌲 Go| [查看示例][3]  | \n| 🌲 Rust | [查看示例][4]  | \n| 🌲 Python | [查看示例][10]  | \n| 🌲 C | [查看示例][5]  |\n| 🌲 C (PHP扩展) | [查看示例][7]  |\n| 🌲 Delphi (Pascal) | [查看示例][6]  |\n| 🌲 JavaScript | [查看示例][8]  |\n| 🌲 TypeScript | [查看示例][9]  |\n| 🌲 V | [查看示例][6]  | \n| 🌲 D | [查看示例][72]  | \n\n\n## 技术支持\n\n开源地址：https://github.com/yitter/IdGenerator\n\nQQ群：646049993\n\n\n[comment]: <> (\t## 为什么用雪花ID？)\n[comment]: <> (\t❄ 因为大厂也在用，推特、百度、美团、滴滴等等。)\n[comment]: <> (\t❄ 雪花ID是走向分布式架构的垫脚石，如果只会Guid和数据库自增，怎敢说会分布式系统架构。)\n[comment]: <> (\t❄ 雪花ID适合小项目、大项目、超级大项目。)\n[comment]: <> (\t## 为什么不用大厂的？)\n[comment]: <> (\t❄ 首先，大厂们不但自己用雪花ID，而且还开源：[百度][81] | [美团][82] | [滴滴][83] | [Sony][84] | [雪花ID鼻祖-推特][80]。)\n[comment]: <> (\t❄ 然而，大厂的雪花算法分为“经典算法”和“号段算法”两种，其中“号段算法”依赖网络或外部存储系统，不适合“非大厂”，且存在无法反应业务时序的缺点。)\n[comment]: <> (\t❄ 至于其“经典算法”，在“ID长度和生成性能”方面，未做过优化，而这正式本算法——雪花漂移算法的核心所在。)\n\n\n[1]: https://github.com/yitter/idgenerator/tree/master/C%23.NET\n[2]: https://github.com/yitter/idgenerator/tree/master/Java\n[3]: https://github.com/yitter/idgenerator/tree/master/Go\n[4]: https://github.com/yitter/idgenerator/tree/master/Rust\n[5]: https://github.com/yitter/idgenerator/tree/master/C\n[6]: https://github.com/yitter/idgenerator/tree/master/Delphi\n[7]: https://github.com/yitter/idgenerator/tree/master/PHP\n[8]: https://github.com/yitter/IdGenerator/tree/master/JavaScript\n[9]: https://github.com/yitter/IdGenerator/tree/master/TypeScript\n[10]: https://github.com/yitter/IdGenerator/tree/master/Python\n\n[11]: https://github.com/yitter/idgenerator/tree/master/C%23.NET\n[21]: https://github.com/yitter/idgenerator/tree/master/Java\n[31]: https://github.com/yitter/idgenerator/tree/master/Go\n[41]: https://github.com/yitter/idgenerator/tree/master/Rust\n[51]: https://github.com/yitter/idgenerator/tree/master/C\n[61]: https://github.com/yitter/idgenerator/tree/master/Delphi\n[71]: https://github.com/yitter/idgenerator/tree/master/PHP\n\n[72]: https://github.com/yitter/idgenerator/tree/master/zzz-OtherLanguages/D\n[73]: https://github.com/yitter/idgenerator/tree/master/zzz-OtherLanguages/D\n\n[80]: https://github.com/twitter-archive/snowflake\n[81]: https://github.com/baidu/uid-generator\n[82]: https://github.com/Meituan-Dianping/Leaf\n[83]: https://github.com/didi/tinyid\n[84]: https://github.com/sony/sonyflake\n\n"
        },
        {
          "name": "Rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "SQL",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "TypeScript",
          "type": "tree",
          "content": null
        },
        {
          "name": "zzz (FFI for Python-Node-PHP)",
          "type": "tree",
          "content": null
        },
        {
          "name": "zzz-OtherLanguages",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}