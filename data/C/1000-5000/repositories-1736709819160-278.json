{
  "metadata": {
    "timestamp": 1736709819160,
    "page": 278,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rubinius/rubinius",
      "stars": 3068,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".autotest",
          "type": "blob",
          "size": 2.8974609375,
          "content": "# -*- ruby -*-\n\nrequire 'autotest/timestamp'\n\n$f = true # quickstart\n$q = ! $v # don't print all the files unless we run -v\n\nENV['PRETTY'] = \"1\"\n\nAutotest.add_hook :run_command do |at|\n  system \"rake\"\nend\n\nclass Autotest\n  alias :old_ruby :ruby\n  def ruby\n    ENV[\"RUBY\"] || \"bin/mspec ci -fu\"\n  end\n\n  alias :old_consolidate_failures :consolidate_failures\n  def consolidate_failures(failed)\n    filters = new_hash_of_arrays\n\n    failed.each do |spec, failed_trace|\n      failed_trace.scan(/ at ([^:]+)/).each do |file,|\n        file.sub!(/^\\.\\//, '')\n        next unless file =~ /^spec/\n          test_files_for(file).each do |f|\n            filters[f] # mspec doesn't have real spec filtering yet\n          end\n        break\n      end\n    end\n\n    return filters\n  end\n\n  alias :old_make_test_cmd :make_test_cmd\n  def make_test_cmd files_to_test\n    # until bin/ci and bin/mspec allow for regexps, run the whole file again\n    classes = reorder(files_to_test).map { |k,v| k }.join(' ')\n    \"PRETTY=1 #{ruby} #{classes} | #{unit_diff}\"\n  end\nend\n\nAutotest.add_hook :initialize do |at|\n  at.order = :natural\n\n  at.sleep = 2\n\n  at.add_exception(/\\.rbc$/)\n  at.add_exception(/shotgun\\/external_libs/)\n  at.add_exception(/README/)\n  at.add_exception(/spec.tags.critical.txt/)\n\n  at.find_directories.clear\n  at.find_directories.push(\n                           'kernel',\n                           'lib',\n                           'shotgun',\n                           'spec/ruby/1.8/core',\n                           'spec/ruby/1.8/language',\n                           'spec/ruby/1.8/library',\n                           'spec/compiler',\n                           'spec/parser',\n                           'spec/tags'\n                           )\n\n  at.failed_results_re = /^\\d+\\)\\n([^\\n]*)(?:FAILED|ERROR)?\\n(.*?)\\n\\n/m\n  at.completed_re = /\\Z/ # FIX: some sort of summary line at the end?\n\n  at.add_mapping %r%^spec/tags/(.*)_tags.txt$% do |_, m|\n    Dir[\"spec/#{m[1]}_spec.rb\"]\n  end\n\n  at.add_mapping %r%^spec/.*([^/]+)/(shared|fixtures)/% do |_, m|\n    at.files_matching(%r%^spec/.*#{m[1]}/.*_spec.rb$%)\n  end\n\n  at.add_mapping %r%^spec/spec_helper.rb% do\n    at.files_matching(%r%^spec/.*_spec.rb$%)\n  end\n\n  at.add_mapping %r%^spec/compiler/spec_helper.rb% do\n    at.files_matching(%r%^spec/compiler/.*_spec.rb$%)\n  end\n\n  at.add_mapping %r%^spec/parser/sexp_expectations.rb% do\n    at.files_matching(%r%^spec/parser/.*_spec.rb$%)\n  end\n\n  at.add_mapping %r%^spec/.*_spec\\.rb$% do |filename, _|\n    filename\n  end\n\n  at.add_mapping %r%^kernel/(.*)/(.*).rb$% do |_, m|\n    Dir[\"spec/#{m[1]}/#{m[2]}/*_spec.rb\"]\n  end\n\n  at.add_mapping %r%^compiler/(bytecode|sexp|translation)/*.rb$% do |_, m|\n    Dir[\"spec/compiler/rubinius/*_spec.rb\"] + Dir[\"spec/language/*_spec.rb\"]\n  end\n\n  at.add_mapping %r%^lib/(.*).rb% do |_, m|\n    Dir[\"spec/library/#{m[1]}*_spec.rb\"]\n  end\n\n  at.add_mapping %r%^shotgun% do |_, m|\n    at.files_matching(/^spec.*_spec\\.rb/)\n  end\nend\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1201171875,
          "content": "root = true\n\n[*]\nend_of_line = lf\nindent_style = spaces\ntrim_trailing_whitespace = true\n\n[*.{hpp,cpp,c,h}]\nindent_size = 2\n"
        },
        {
          "name": ".gdbinit",
          "type": "blob",
          "size": 0.3740234375,
          "content": "define rbt\np __printbt__()\nend\n\ndefine rp\np __show__($arg0)\nend\n\ndefine rps\np __show_simple__($arg0)\nend\n\ndefine rph\np __show_subtend__($arg0)\nend\n\ndefine validate\np rubinius::VM::current()->om->validate_object($arg0)\nend\n\ndefine refs\np print_references($arg0)\nend\n\ndefine memstat\np x_memstat()\nend\n\ndefine snapshot\np x_snapshot()\nend\n\ndefine print_snapshot\np x_print_snapshot()\nend\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.6025390625,
          "content": "*.a\n*.bundle\n.bundle/install.log\n!.bundle\n*.dSYM\n*.dot\n*.dylib\n*.la\n*.lo\n*.o\n*.so\n*.rbc\n.rbx\n*.so\n*.swp\n*~\n.*.d\n.DS_Store\n.\\#*\n.dotest\n.gdb_history\n.glimpse*\n.hg\n.hgignore\n.libs\n.spec/bm.yml\n.depends.mf\n/rubinius_tasks.dot\n/nbproject\n/coverage\n.project\nCI-specs\nCOMMIT\nTAGS\n\\#*\nautom4te.cache\ncode-cache\n/config.rb\n/config.rb.in\ncscope.files\ncscope.out\nconfigure.log\nrakelib/ryan.rake\ncodedb\nscratch\nstamp-h1\nstats\ntmp\ntmtags\n/tags\n/lib/site\n/share\n/work\n/build/artifacts\n/build/bin/c++\n/build/bin/cc\n/build/codetools\n/build/config/config.rb\n/build/libraries/cache\n/build/libraries/gems\n/build/rubinius\n/build/stdlib\nrubinius-codedb-cache.bz2*\nrubinius-codetools-cache.bz2*\nrubinius-stdlib-cache.bz2*\n\n# .revision tracks configure and code revision consistency\n.revision\n\n# ignore gems and commands installed by gems\n/gems/*\n/bin/*\n\n# don't ignore our commands\n!/bin/benchmark\n!/bin/laces.rb\n!/bin/mkspec\n!/bin/mspec\n!/bin/testrb\n\n# don't ignore spec/tags\n!/spec/tags\n\n/machine/log\n/machine/.deps\n/machine/vm.exe\n\n/machine/test/ruby.h\n\n# rubysl-digest installs this header\nmachine/include/capi/ruby/digest.h\n\n/core/build_config.rb\n\n# Ignore generated headers\nmachine/config.h\nmachine/paths.h\nmachine/release.h\nmachine/signature.h\nmachine/dtrace/probes.h\nmachine/accessor_primitives.hpp\nmachine/config_variables.h\nmachine/encoding_database.hpp\nmachine/includes.hpp\nmachine/invoke_primitives.hpp\nmachine/invoke_resolver.hpp\nmachine/kind_of.hpp\nmachine/method_primitives.hpp\nmachine/method_resolver.hpp\nmachine/object_types.hpp\nmachine/primitives_declare.hpp\nmachine/transcoder_database.hpp\nmachine/typechecks.hpp\n\n.build_ruby\n.build_signature\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.9697265625,
          "content": "language: cpp\nsudo: required\ndist: bionic\ncompiler:\n- clang\nos:\n- linux\nruby: 2.2.0\nbefore_install:\n- echo $LANG\n- echo $LC_ALL\n- if [ $TRAVIS_OS_NAME == linux ]; then ./scripts/dependencies.sh; fi\n- if [ $TRAVIS_OS_NAME == osx ]; then brew update && brew install llvm38 && brew install openssl && brew link --force --overwrite llvm38; fi\nscript:\n- if [ $TRAVIS_OS_NAME == linux ]; then ./build.sh --llvm-config=llvm-config --cc=clang --cxx=clang++; fi\n- if [ $TRAVIS_OS_NAME == osx ]; then ./build.sh --with-include-dir=$OPENSSL_DIR/include --with-lib-dir=$OPENSSL_DIR/lib --llvm-config=llvm-config-3.8 --cc=clang-3.8 --cxx=clang++-3.8; fi\nafter_success:\n- if [ $TRAVIS_OS_NAME == linux ]; then ./scripts/build_support.sh archive_codedb; fi\n- if [ $TRAVIS_BRANCH == $TRAVIS_TAG ]; then ./scripts/deploy.sh release github website triggers; fi\nbranches:\n  only:\n  - master\n  - \"/^v\\\\d+\\\\./\"\nnotifications:\n  email: false\n  irc:\n    channels:\n    - chat.freenode.net#rubinius\n    template:\n    - \"%{repository}/%{branch} (%{commit} - %{author}): %{build_url}: %{message}\"\n  webhooks:\n    urls:\n      secure: h2oTAbAZF6+c6iv/kHoDGtl1mzQDF2vQSKWnO1pwfEz+L80lX9u3+JB+jsbYUcZ9smBRnRRghqxpLBmyzH3QZCrBdxKnTWfGc7I7lkTCFQZ5O3pPmIusO6W5zX+YUc+NHPPZXouHuHFmEeEB9vJnt/YB/fyGAGOIq+qXV4s+R9M=\n    on_success: always\n    on_failure: always\n    on_start: always\nenv:\n  global:\n  - OPENSSL_DIR=$(brew --prefix openssl)\n  - RBXOPT=-Xcodedb.cache.enabled=no\n  - LANG=\"en_US.UTF-8\"\n  - secure: olbok/GN6rOYvPnHBYWGz7giCoCdLFpT/7WSBHukYO3E0uNeqAUOOgW2BFOwCVWdSEJ/iTvJXZQ4qVZHX+6jRfvILZeGv+D2P93VdD8UFQRoTOfFC7esAo525s9fuKm9ehUGWZxlzGOBHHckky1jn6pEf8mlXAVM5e76dlH0fck=\n  - secure: aqG9eB/PrzQ7XJQN6YX/00sNVvwSB77saxXQzguL2WFjAXB74h6168Hzq+awHtNX/vfOb6ta7fpWLHrA0D+gmZnvTR29VlP6nd0vs1tkdX1/jWbiBHjamRffp+NWVdKbJKYn5iLOGXcuUMOzY/opLKOdvxKZfkxGMxR2tTNLZUE=\n  - secure: NaiH/2wYgzWT3xcscU6Bzw1Zd9lZYPG6OkCRZcQcIXZXwQTmZrGTcZfy5fDe2Vzotvwfr+2B4Ko6axE3KFrsmjTIVD/lI44Y3K+UFHOKhrm6niVtMD6Rx/oUO30hoB3/OkmZnI578F4M5y7x17sDei4L0NKPgnUhm0P0/WPCze4=\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 5.9462890625,
          "content": "#  Authors\n# =========\n#\n# This is a reasonably complete list of everyone who has committed\n# code to Rubinius, although there are probably a few persons still\n# missing. The list is just ordered by first name here, but the file\n# is (and should be kept) YAML-formatted.\n#\n# Please feel free to add any personal details.\n\n---\n\n- Adam Gardiner:        { irc:  agardiner }\n- Adam Shelly:          { irc:  therealadam }\n- Adam Wiggins:\n- Aki Reijonen:         { irc:  loop }\n- Akshay Rawat:\n- Alan Hurdle:          { irc:  hurdlea }\n- Alexander Kellett:    { irc:  lypanov }\n- Alexandre Perrin:\n- Alister Lee:\n- Amarkj:\n- Andrew Goodney:\n- Andrew Thompson:      { irc: Vagabond }\n- Anup Nivargi:         { irc: noopq }\n- Ari Brown:            { seydar }\n- Arthur Schreiber:     { irc: NoKarma }\n- Arthur Zapparoli:\n- aquasync:\n- Ben Askins:\n- Ben Brinckerhoff:\n- Ben Burkert:\n- Ben Curren:\n- Ben Feng:             { github: fengb }\n- Ben Hughes:\n- Benjamin Andresen:\n- Benjamin Klotz:       { irc: bennyklotz, github: bennyklotz, twitter: BennyKlotz }\n- Benjamin Stiglitz:\n- Bremac:\n- Brian Donovan:\n- Brian Ford:           { irc: brixen }\n- Brian Takita:\n- Bryan Helmkamp:\n- Carsten Bormann:      { irc: cabo }\n- Caleb Tennis:         { irc: ctennis }\n- Cezar Sa Espinola:\n- Chad Fowler:\n- Charles Comstock:     { irc: dgtized }\n- Charles Lowe:\n- Charles Oliver Nutter:{ irc: headius }\n- Chen Yufei:\n- Christopher Bertels:  { irc: bakkdoor, github: bakkdoor, twitter: bakkdoor, email: chris@fancy-lang.org }\n- Chris Pettitt:\n- Chris Shea:\n- Chris Shoemaker:      { irc: shoe }\n- Christopher Thompson:\n- Chris Wanstrath:      { irc: defunkt }\n- Chuck Remes:          { irc: cremes }\n- Curtis Schofield:\n- Daniel Lucraft:       { irc: dan_lucraft }\n- Daniel Luz:\n- David Altenburg:\n- David Boot:           { github: kodnin, twitter: kodnin, email: kodnin@gmail.com }\n- David Salamon:\n- David Waite:          { irc: ddubs }\n- David Whittington:    { irc: djwhitt }\n- David Yip:\n- Davor Babic:          { irc: davorb, github: davorb, email: davor@davor.se }\n- Defn:\n- Dirkjan Bussink:      { irc: dbussink }\n- Drew Olson:\n- Eero Saynatkari:      { irc: rue,           email: rubinius@projects.kittensoft.org }\n- Eric Hodel:           { irc: drbrain }\n- Evan Phoenix:         { irc: evan }\n- Federico Builes:      { irc: fbuilesv }\n- Florian Gross:        { irc: flgr }\n- Franck Verrot:        { irc: cesario, github: cesario, twitter: cesariogw, email: franck@verrot.fr }\n- Gaston Ramos:\n- Gerardo Santana:\n- Gianluigi Spagnuolo:\n- Glenn Davy:\n- Graham:\n- Gregor Schmidt:\n- Guillermo Iguaran:    { irc: guilleiguaran, github: guilleiguaran }\n- Haofei Wang:\n- Hapk:\n- Hemant Kumar:         { irc: gnufied }\n- Hongli Lai:           { irc: FooBarWidget }\n- Hunter Kelly:\n- Ian Leitch:           { irc: idl, github: ileitch }\n- Jacob Maine:\n- Jan A. Steffens:      { irc: heftig, github: heftig }\n- Janico Greifenberg:\n- Jared Luxenberg:\n- Jason Yates:\n- Jeff Rose:\n- Jeremy Durham:        { irc/github: jeremydurham }\n- Jeremy Roach:         { irc: jero5 }\n- Jesse Cooke:          { github: jc00ke }\n- Joachim Martensson:\n- Joe Van Dyk:\n- John Barnette:\n- John Downey:          { irc: jtdowney, github: jtdowney, twitter: jtdowney }\n- John Firebaugh:       { irc: jfire }\n- John Hornbeck:        { irc: hornbeck }\n- Jon Guymon:\n- Jonas Pfenniger:      { irc: zimbatm }\n- Jonathan Younger:\n- Juha Pohjalainen:\n- Julian Leviston:\n- Justin Weiss:\n- Kamal Fariz Mahyuddin: { irc: kamal_fariz }\n- Kenichi Kamiya:       { github: kachick }\n- Kevin Clark:\n- Konstantin Haase:     { irc: khaase, github: rkh }\n- Lachie Cox:           { irc: lachie }\n- Le Huy:\n- Lee Jensen:\n- Leo Cassarani:        { irc: leocassarani, github: leocassarani, twitter: cassarani }\n- Lincoln Stoll:\n- Luis Lavena:\n- Luke Randall:\n- Makoto Kuwata:\n- Marc-Andre Lafortune: { irc: marcandre }\n- Marcus Crafter:       { irc: crafterm }\n- Marius Nuennerich:\n- Mark Somerville:\n- Marnen Laibow-Koser:\n- Martin Kuehl:\n- Martin Stannard:\n- Matijs van Zuijlen:\n- Matt Palmer:\n- Matt Pelletier:\n- Matthew Draper:\n- Matthew Elder:        { irc: mae }\n- Matthias Reitinger:\n- Matthijs Langenberg:\n- Maximilian Lupke:     { irc: malumalu }\n- MenTaLguY:            { irc: MenTaLguY }\n- Michael Fellinger:    { irc: manveru }\n- Michael Klishin:\n- Miguel Herranz:       { irc: IPGlider }\n- Mitchell Riley:\n- Mutwin Kraus:         { irc: mutle }\n- Myles Byrne:\n- Nathan Sobo:\n- Nathan Witmer:\n- Nic Williams:         { irc: dr_nic }\n- Nikolai Lugovoi:\n- Nitay:\n- Nolan Darilek:\n- Norgg:\n- nikosd:\n- Oleg Dashevskii:\n- Pat Eyler:            { irc: pate }\n- Patrick Hurley:\n- Paul Meserve:\n- Paul Thornthwaite:\n- Pavel Argentov:       { irc: argent-smith, github: argent-smith }\n- Pedro Del Gallego:\n- Phil Hagelberg:       { irc: technomancy }\n- Philipp Bruschweiler:\n- Pierre Yager:\n- Przemek Owczarek:     { github: nazgob, twitter: powczarek }\n- Ragnar Dahlen:\n- Richard Heycock:\n- Ruben Nine:\n- Ryan Davis:           { irc: zenspider }\n- Ryan T Mulligan:\n- rnicholson:\n- Sam Aaron:\n- Scott Olson:          { irc: tsion, github: tsion }\n- Scott Taylor:\n- Sean Bryant:\n- Shane Emmons:         { irc: semmons99 }\n- Shoaib Kamil:\n- Stephen Bannasch:\n- Stephen Touset:       { irc: stouset, github: stouset, email: stephen@touset.org }\n- Steve Klabnik:        { irc: steveklabnik }\n- Stuart Halloway:\n- Sylvester Keil:       { irc: inukshuk }\n- Thomas Lachmann:\n- Tilman Sauerbeck:     { irc: tilman }\n- Todd A. Fisher:\n- Thomas Lockney:\n- Tom Mornini:          { irc: tmornini }\n- Tom Preston-Warner:   { irc: mojombo }\n- Tony Arcieri:         { irc: tarcieri }\n- Trotter Cashion:\n- Tyler McMullen:\n- Victor Hugo Borja:    { irc: vborja, twitter: vborja, github: vic, email: vic.borja@gmail.com }\n- Vincent Lu:           { irc: vlu }\n- Vitaliy Geraymovych:\n- Vladimir Sizikov:     { irc: VVSiz }\n- Warren Seen:\n- William Morgan:       { irc: wmorgan }\n- Wilson Bilkovich:     { irc: Defiler }\n- Yehuda Katz:          { irc: wycats }\n- Yorick Peterse:       { irc: yorickpeterse, github: YorickPeterse }\n- Zhang Chiyuan:        { irc: pluskid }\n"
        },
        {
          "name": "BSD_LICENSE",
          "type": "blob",
          "size": 1.482421875,
          "content": "BSD 3-clause License\n\nCopyright (c) 2007-2015, Evan Phoenix and contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n* Neither the name of Rubinius nor the names of its contributors\n  may be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 15.5830078125,
          "content": "Copyright (c) 2016, Rubinius, Inc.\n\nMozilla Public License, version 2.0\n\n1. Definitions\n\n1.1. \"Contributor\"\n\n     means each individual or legal entity that creates, contributes to the\n     creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n\n     means the combination of the Contributions of others (if any) used by a\n     Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n\n     means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n\n     means Source Code Form to which the initial Contributor has attached the\n     notice in Exhibit A, the Executable Form of such Source Code Form, and\n     Modifications of such Source Code Form, in each case including portions\n     thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n     means\n\n     a. that the initial Contributor has attached the notice described in\n        Exhibit B to the Covered Software; or\n\n     b. that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the terms of\n        a Secondary License.\n\n1.6. \"Executable Form\"\n\n     means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n\n     means a work that combines Covered Software with other material, in a\n     separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n\n     means this document.\n\n1.9. \"Licensable\"\n\n     means having the right to grant, to the maximum extent possible, whether\n     at the time of the initial grant or subsequently, any and all of the\n     rights conveyed by this License.\n\n1.10. \"Modifications\"\n\n     means any of the following:\n\n     a. any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered Software; or\n\n     b. any new file in Source Code Form that contains any Covered Software.\n\n1.11. \"Patent Claims\" of a Contributor\n\n      means any patent claim(s), including without limitation, method,\n      process, and apparatus claims, in any patent Licensable by such\n      Contributor that would be infringed, but for the grant of the License,\n      by the making, using, selling, offering for sale, having made, import,\n      or transfer of either its Contributions or its Contributor Version.\n\n1.12. \"Secondary License\"\n\n      means either the GNU General Public License, Version 2.0, the GNU Lesser\n      General Public License, Version 2.1, the GNU Affero General Public\n      License, Version 3.0, or any later versions of those licenses.\n\n1.13. \"Source Code Form\"\n\n      means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n\n      means an individual or a legal entity exercising rights under this\n      License. For legal entities, \"You\" includes any entity that controls, is\n      controlled by, or is under common control with You. For purposes of this\n      definition, \"control\" means (a) the power, direct or indirect, to cause\n      the direction or management of such entity, whether by contract or\n      otherwise, or (b) ownership of more than fifty percent (50%) of the\n      outstanding shares or beneficial ownership of such entity.\n\n\n2. License Grants and Conditions\n\n2.1. Grants\n\n     Each Contributor hereby grants You a world-wide, royalty-free,\n     non-exclusive license:\n\n     a. under intellectual property rights (other than patent or trademark)\n        Licensable by such Contributor to use, reproduce, make available,\n        modify, display, perform, distribute, and otherwise exploit its\n        Contributions, either on an unmodified basis, with Modifications, or\n        as part of a Larger Work; and\n\n     b. under Patent Claims of such Contributor to make, use, sell, offer for\n        sale, have made, import, and otherwise transfer either its\n        Contributions or its Contributor Version.\n\n2.2. Effective Date\n\n     The licenses granted in Section 2.1 with respect to any Contribution\n     become effective for each Contribution on the date the Contributor first\n     distributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\n     The licenses granted in this Section 2 are the only rights granted under\n     this License. No additional rights or licenses will be implied from the\n     distribution or licensing of Covered Software under this License.\n     Notwithstanding Section 2.1(b) above, no patent license is granted by a\n     Contributor:\n\n     a. for any code that a Contributor has removed from Covered Software; or\n\n     b. for infringements caused by: (i) Your and any other third party's\n        modifications of Covered Software, or (ii) the combination of its\n        Contributions with other software (except as part of its Contributor\n        Version); or\n\n     c. under Patent Claims infringed by Covered Software in the absence of\n        its Contributions.\n\n     This License does not grant any rights in the trademarks, service marks,\n     or logos of any Contributor (except as may be necessary to comply with\n     the notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\n     No Contributor makes additional grants as a result of Your choice to\n     distribute the Covered Software under a subsequent version of this\n     License (see Section 10.2) or under the terms of a Secondary License (if\n     permitted under the terms of Section 3.3).\n\n2.5. Representation\n\n     Each Contributor represents that the Contributor believes its\n     Contributions are its original creation(s) or it has sufficient rights to\n     grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\n     This License is not intended to limit any rights You have under\n     applicable copyright doctrines of fair use, fair dealing, or other\n     equivalents.\n\n2.7. Conditions\n\n     Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in\n     Section 2.1.\n\n\n3. Responsibilities\n\n3.1. Distribution of Source Form\n\n     All distribution of Covered Software in Source Code Form, including any\n     Modifications that You create or to which You contribute, must be under\n     the terms of this License. You must inform recipients that the Source\n     Code Form of the Covered Software is governed by the terms of this\n     License, and how they can obtain a copy of this License. You may not\n     attempt to alter or restrict the recipients' rights in the Source Code\n     Form.\n\n3.2. Distribution of Executable Form\n\n     If You distribute Covered Software in Executable Form then:\n\n     a. such Covered Software must also be made available in Source Code Form,\n        as described in Section 3.1, and You must inform recipients of the\n        Executable Form how they can obtain a copy of such Source Code Form by\n        reasonable means in a timely manner, at a charge no more than the cost\n        of distribution to the recipient; and\n\n     b. You may distribute such Executable Form under the terms of this\n        License, or sublicense it under different terms, provided that the\n        license for the Executable Form does not attempt to limit or alter the\n        recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\n     You may create and distribute a Larger Work under terms of Your choice,\n     provided that You also comply with the requirements of this License for\n     the Covered Software. If the Larger Work is a combination of Covered\n     Software with a work governed by one or more Secondary Licenses, and the\n     Covered Software is not Incompatible With Secondary Licenses, this\n     License permits You to additionally distribute such Covered Software\n     under the terms of such Secondary License(s), so that the recipient of\n     the Larger Work may, at their option, further distribute the Covered\n     Software under the terms of either this License or such Secondary\n     License(s).\n\n3.4. Notices\n\n     You may not remove or alter the substance of any license notices\n     (including copyright notices, patent notices, disclaimers of warranty, or\n     limitations of liability) contained within the Source Code Form of the\n     Covered Software, except that You may alter any license notices to the\n     extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\n     You may choose to offer, and to charge a fee for, warranty, support,\n     indemnity or liability obligations to one or more recipients of Covered\n     Software. However, You may do so only on Your own behalf, and not on\n     behalf of any Contributor. You must make it absolutely clear that any\n     such warranty, support, indemnity, or liability obligation is offered by\n     You alone, and You hereby agree to indemnify every Contributor for any\n     liability incurred by such Contributor as a result of warranty, support,\n     indemnity or liability terms You offer. You may include additional\n     disclaimers of warranty and limitations of liability specific to any\n     jurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n\n   If it is impossible for You to comply with any of the terms of this License\n   with respect to some or all of the Covered Software due to statute,\n   judicial order, or regulation then You must: (a) comply with the terms of\n   this License to the maximum extent possible; and (b) describe the\n   limitations and the code they affect. Such description must be placed in a\n   text file included with all distributions of the Covered Software under\n   this License. Except to the extent prohibited by statute or regulation,\n   such description must be sufficiently detailed for a recipient of ordinary\n   skill to be able to understand it.\n\n5. Termination\n\n5.1. The rights granted under this License will terminate automatically if You\n     fail to comply with any of its terms. However, if You become compliant,\n     then the rights granted under this License from a particular Contributor\n     are reinstated (a) provisionally, unless and until such Contributor\n     explicitly and finally terminates Your grants, and (b) on an ongoing\n     basis, if such Contributor fails to notify You of the non-compliance by\n     some reasonable means prior to 60 days after You have come back into\n     compliance. Moreover, Your grants from a particular Contributor are\n     reinstated on an ongoing basis if such Contributor notifies You of the\n     non-compliance by some reasonable means, this is the first time You have\n     received notice of non-compliance with this License from such\n     Contributor, and You become compliant prior to 30 days after Your receipt\n     of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\n     infringement claim (excluding declaratory judgment actions,\n     counter-claims, and cross-claims) alleging that a Contributor Version\n     directly or indirectly infringes any patent, then the rights granted to\n     You by any and all Contributors for the Covered Software under Section\n     2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user\n     license agreements (excluding distributors and resellers) which have been\n     validly granted by You or Your distributors under this License prior to\n     termination shall survive termination.\n\n6. Disclaimer of Warranty\n\n   Covered Software is provided under this License on an \"as is\" basis,\n   without warranty of any kind, either expressed, implied, or statutory,\n   including, without limitation, warranties that the Covered Software is free\n   of defects, merchantable, fit for a particular purpose or non-infringing.\n   The entire risk as to the quality and performance of the Covered Software\n   is with You. Should any Covered Software prove defective in any respect,\n   You (not any Contributor) assume the cost of any necessary servicing,\n   repair, or correction. This disclaimer of warranty constitutes an essential\n   part of this License. No use of  any Covered Software is authorized under\n   this License except under this disclaimer.\n\n7. Limitation of Liability\n\n   Under no circumstances and under no legal theory, whether tort (including\n   negligence), contract, or otherwise, shall any Contributor, or anyone who\n   distributes Covered Software as permitted above, be liable to You for any\n   direct, indirect, special, incidental, or consequential damages of any\n   character including, without limitation, damages for lost profits, loss of\n   goodwill, work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses, even if such party shall have been\n   informed of the possibility of such damages. This limitation of liability\n   shall not apply to liability for death or personal injury resulting from\n   such party's negligence to the extent applicable law prohibits such\n   limitation. Some jurisdictions do not allow the exclusion or limitation of\n   incidental or consequential damages, so this exclusion and limitation may\n   not apply to You.\n\n8. Litigation\n\n   Any litigation relating to this License may be brought only in the courts\n   of a jurisdiction where the defendant maintains its principal place of\n   business and such litigation shall be governed by laws of that\n   jurisdiction, without reference to its conflict-of-law provisions. Nothing\n   in this Section shall prevent a party's ability to bring cross-claims or\n   counter-claims.\n\n9. Miscellaneous\n\n   This License represents the complete agreement concerning the subject\n   matter hereof. If any provision of this License is held to be\n   unenforceable, such provision shall be reformed only to the extent\n   necessary to make it enforceable. Any law or regulation which provides that\n   the language of a contract shall be construed against the drafter shall not\n   be used to construe this License against a Contributor.\n\n\n10. Versions of the License\n\n10.1. New Versions\n\n      Mozilla Foundation is the license steward. Except as provided in Section\n      10.3, no one other than the license steward has the right to modify or\n      publish new versions of this License. Each version will be given a\n      distinguishing version number.\n\n10.2. Effect of New Versions\n\n      You may distribute the Covered Software under the terms of the version\n      of the License under which You originally received the Covered Software,\n      or under the terms of any subsequent version published by the license\n      steward.\n\n10.3. Modified Versions\n\n      If you create software not governed by this License, and you want to\n      create a new license for such software, you may create and use a\n      modified version of this License if you rename the license and remove\n      any references to the name of the license steward (except to note that\n      such modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\n      Licenses If You choose to distribute Source Code Form that is\n      Incompatible With Secondary Licenses under the terms of this version of\n      the License, the notice described in Exhibit B of this License must be\n      attached.\n\nExhibit A - Source Code Form License Notice\n\n      This Source Code Form is subject to the\n      terms of the Mozilla Public License, v.\n      2.0. If a copy of the MPL was not\n      distributed with this file, You can\n      obtain one at\n      http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file,\nthen You may include the notice in a location (such as a LICENSE file in a\nrelevant directory) where a recipient would be likely to look for such a\nnotice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n\n      This Source Code Form is \"Incompatible\n      With Secondary Licenses\", as defined by\n      the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.4130859375,
          "content": "# This Makefile is a stub to invoke the actual build system to conform to\n# common expectations about building software by running:\n#\n#  configure && make && make install\n#\n\n.PHONY: depend build install clean\n\nall: install\n\ndepend:\n\t@echo TODO: implement 'make depend'\n\nbuild:\n\t@RBX_SUPRESS_DEPRECATION=1 rake -q build\n\ninstall:\n\t@RBX_SUPRESS_DEPRECATION=1 rake -q install\n\nclean:\n\t@RBX_SUPRESS_DEPRECATION=1 rake -q clean\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.62890625,
          "content": "[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/rubinius/rubinius?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) [![Build Status](https://travis-ci.org/rubinius/rubinius.svg?branch=master)](https://travis-ci.org/rubinius/rubinius)\n\n# The Rubinius Language Platform\n\nRubinius is a modern language platform that supports a number of programming languages.\n\nThe philosophy and high-level architecture of Rubinius are described below.\n\nRubinius runs on macOS and many Unix/Linux operating systems. Microsoft Windows is not supported.\n\n## Code of Conduct\n\nParticipation in the Rubinius project is governed by the Rubinius [Code of Conduct](https://rubinius.com/code-of-conduct/).\n\n## Issues & Support\n\nPlease [file tickets](http://github.com/rubinius/rubinius/issues) for bugs or problems.\n\nFor additional help, visit the [Rubinius Gitter chat room](https://gitter.im/rubinius/rubinius).\n\n## Contributing\n\nWe welcome contributions. For more information, see the FAQ below and read the [contributing](https://github.com/rubinius/rubinius/blob/master/.github/contributing.md) file.\n\n## License\n\nAll source code in this repository is subject to the terms of the Mozilla Public License, version 2.0 unless stated otherwise. A copy of this license can be found the file \"LICENSE\" or at <https://www.mozilla.org/MPL/2.0/>.\n\nContributions made prior to January 3rd, 2016 are licensed under the old BSD 3-clause license. A copy of this license can be found in the file \"BSD_LICENSE\".\n\nIn the event a directory contains a \"LICENSE\", \"LICENSE.txt\" or \"COPYING\" file the license specified in said file applies to the contents of said directory and all sub directories, overwriting the licenses specified above.\n\n## Installing Rubinius\n\nTo install Rubinius from source, use the following steps:\n\n1. Ensure that MRI 2.0+, rubygems, rake, and git are installed\n2. `git clone git://github.com/rubinius/rubinius.git`\n3. `cd rubinius`\n4. `./configure --prefix=/path/to/install/dir && make install`\n\nWhen the install process finishes, follow the directions printed to the terminal to add the Rubinius executable (bin) directory to your PATH.\n\nCertain setups of openssl require you to pass along additional options, `--with-lib-dir` and `--with-include-dir`\npointing to include the relevant openssl directories. \n\nE.g If you are installing via RVM / homebrew on OS X.\n```\nrvm install rbx-3 -C \\\n  --with-lib-dir=$(brew --prefix openssl)/lib \\\n  --with-include-dir=$(brew --prefix openssl)/include\n```\n\n*See https://book.rubinius.com/manuscript/getting_rubinius.html\nfor a more complete guide to installing Rubinius from source.*\n\n## Philosophy & Architecture\n\nRubinius is a virtual computing machine. As a computing machine, it possesses several mechanisms that physical computers possess to support computation.\n\nIt runs in an environment that provides various capabilities. These are presented to the machine through the Environment object.\n\nIt has certain configuration values that influence how the machine operates. This is managed by the Configuration object.\n\nThe machine has a boot process that carefully builds up the components in a precise order until the machine is ready to run user code. When the user code completes executing, the machine halts, again following a precise sequence of deconstructing the various components.\n\nThe rest of the components of the machine are described below.\n\n### Instructions\n\nThe Rubinius instruction set includes different categories of instructions. One key aspect of the Rubinius philosophy is that the instruction set should represent any machine semantic. This contrasts with the way Rubinius has been implemented historically, which relied heavily on C++ \"primitives\" modeled on the Smalltalk 80 virtual machine. All the primitives are being replaced as the instruction set evolves richer capabilities.\n\nThe categories of instructions are:\n\n1. *Stack* instructions that push, pop, and get operands from a stack;\n2. *Register* instructions that read from and write to a set of registers;\n3. *Assertion* instructions that can halt execution but cannot change the semantics of the program;\n4. *Instrumentation* instructions that cannot change the semantics of the program but can emit data from the program;\n5. *Parsing Expression Grammar* (PEG) instructions. PEGs are an elegant formalism for describing recognizers;\n6. *Foreign Function Interface* (FFI) instructions for binding and calling external functions;\n7. *Concurrency* instructions for execution threads and concurrent data;\n8. *System* instructions for accessing files, directories, and other systam capabilities.\n\n**TODO: There's plenty of places to help out here if parsers, compilers, and instruction sets interest you.**\n\n### Heaps & Garbage Collector\n\nRubinius has two kinds of managed objects: object-oriented ones that can support inheriting from a superclass, and data objects that have no concept of object-orientation.\n\nRubinius has three concepts for heaps, the space where managed objects live:\n\n1. The *open* heap is one where any object in the heap can contain a reference to any other object. Think normal Ruby land;\n2. The *closed* heap is one where an object in the heap can contain a reference to an object outside the closed heap, but no object outside can contain a reference to an object in the closed heap;\n3. The *isolated* heap is one where no object in the isolated heap can contain a reference to an object outside the heap, and no object outside can contain a reference to an object in the isolated heap.\n\nThreads that use isolated heaps can execute fully independent of any other thread and only must synchronize with the process during boot, fork, and halt. The garbage collector for isolated heaps is run in that thread.\n\nRubinius uses a single mechanism for garbage collection, the [Immix mark-region collector](http://www.cs.williams.edu/~dbarowy/cs334s18/assets/immix-pldi-2008.pdf).\n\nThe Rubinius garbage collector currently runs on a single separate thread and must fully synchronize all threads that mutate managed memory (ie it stops the world). In the future, the single open heap will introduce a second generational area, and the isolated heaps will provide for parallel collection.\n\n**TODO: There's plenty of places to help out here if garbage collectors interest you.**\n\n### CodeDB\n\nThe Rubinius CodeDB is where all compiled code for the core and standard libraries is stored. Every executable context (in Ruby, these are scripts, class & module bodies, methods, and blocks) has a unique ID and is cached in the CodeDB. In the future, all user code will also be cached in the CodeDB.\n\nThe unique ID of every executable context allows for associating arbitrary dimensions of data with that instance of executable code. For example, type information seen at run time, profile and coverage information, call graphs, and memory allocations data can all be associated with the executable code.\n\n**TODO: There's plenty of places to help out here if databases and code analytics interest you.**\n\n### Console\n\nThe Console is an interprocess communication (IPC) mechanism. In contrast to Ruby's IRB, which executes in the same process, the Rubinius Console is intended to be a general purpose mechanism to interact with the virtual machine. The capabilities of the Console include the ability to execute code and return the result, start/step/stop the Debugger, start/stop the Profiler, access data from the Profiler and Diagnostics, and fetch the call graph and object graph data.\n\n**TODO: There's plenty of places to help out here if developer tools interest you.**\n\n### Debugger\n\nThe Debugger uses instruction replacement (ie substituting the debug instruction for the existing instruction at that point in the instruction sequence) to cause an executing instance of code to stop and allow you to inspect values and step to the next instruction, or step into or out of another instance of code (eg a method, function, or block).\n\n**TODO: There's plenty of places to help out here if developer tools interest you.**\n\n### Profiler\n\nThe Profiler is a randomized-interval sampling profiler that is always running. At a randomized interval, the code instances that are currently executing in a thread have their sample count incremented. In addition, all code instances have a call count that is incremented each time they are invoked. At every call site, the number of times the call site executes is tracked for each type of object seen. The call sites enable deriving the call graph for the program from the object graph because the call sites have a normal (Ruby) object interface.\n\n**TODO: There's plenty of places to help out here if developer tools interest you.**\n\n### Diagnostics & Logging\n\nThe Diagnostics facility provides metrics on all components of the virtual machine. The logging facility includes different log levels (ie debug, info, warn, error) and provides a descriptive account of virtual machine lifecycle events.\n\n**TODO: There's plenty of places to help out here if developer tools interest you.**\n\n### Machine-code Compiler\n\nThe machine-code compiler is based on LLVM and compiles a managed code instance to machine code. The first generation Rubinius JIT (just-in-time compiler) included type inference, custom code passes, and inlining facilities all implemented in C++. The next generation compiler uses a [nanopass](http://nanopass.org) architecture and builds a single managed code instance that can be compiled to native machine code.\n\n**TODO: There's plenty of places to help out here if native machine code compilers interest you.**\n\n### Data Types & Functions\n\nRubinius has functions. No, really.\n\n  ```\n  $ bin/rbx compile -N plus -B -e 'fun plus(a, b) a + b end'\n\n  ================ :plus =================\n  Arguments:   2 required, 0 post, 2 total\n  Arity:       2\n  Locals:      2: a, b\n  Stack size:  4\n  Registers:   0\n  Literals:    1: :+\n  Line:        1\n  Lines to IP:\n\n  0000:  push_local                 0    # a\n  0002:  push_local                 1    # b\n  0004:  send_stack                 :+, 1\n  0007:  unwind                     0\n  0009:  ret                        0\n  ----------------------------------------\n  ```\n\nThere are several ways that types can be added. First, it's important to distinguish the \"behavior\" of object-oriented code from the \"types\" of data. See [Objects are for interactions, functions are for data](https://medium.com/metalanguage/objects-are-for-interactions-functions-are-for-data-936e044cc729).\n\nFor objects, instead of types, we want to be able to easily convey that objects should represent themselves differently:\n\n  ```ruby\n  class A\n    def m(a: Integer(2), b: Integer(3))\n      # If the values passed for a and b are not Integers,\n      # the Integer() constructor will be called on them.\n      # If a value isn't passed for a, the default value is 2.\n      # Similarly for b, the default value is 3.\n    end\n  end\n  ```\n\nFor functions, the situation is similar, but different:\n\n  ```ruby\n  type :int, fun +(a: int, b: int)\n    # The type of a and b must be machine integers.\n    # The return type is specified by an annotation\n  end\n  \n  fun +(a: int, b: int, return: int)\n    # The type of the return value is int.\n    # The 'return' argument is elided.\n  end\n  \n  fun +(a: int, b: int): int\n    # This form would require modifying the parser.\n  end\n  ```\n\nEach of these three represent a possibility for implementing types, including the return type for a function. The form that will be implemented hasn't been chosen yet.\n\nBoth namespacing and explicit data definition (using either `type` or `data`) are not implemented yet, but are definitely being considered. Examples of these would be:\n\n  ```ruby\n  namespace my_funcs\n    data size_cat\n      value = 'big' | 'small'\n      \n      fun big?\n        value == 'big'\n      end\n      \n      fun small?\n        value == 'small'\n      end\n    end\n  end\n  \n  a = my_funcs::size_cat('big')\n  my_funcs::size_cat::small?(a)  # => false\n  ```\n  \nFunctions became particularly interesting when they can be co-mingled with object-oriented code. In Rubinius, the lexical scope is represented by a Ruby object much like any other Ruby object. Since Ruby does not contain language features for manipulating the lexical scope, it's a natural place to stash functions so that lookup seems unsurprising.\n\n  ```ruby\n  class A\n    import \"my_funcs\"\n    \n    def m(a, b)\n      if small?(a) and big?(b)\n        puts \"We have a mixed mode\"\n      end\n    end\n  end\n  \n  A.new.m('small', 'big')\n  \"We have a mixed mode\"\n  ```\n\nIn Ruby, any method call that does not explicitly use a receiver could resolve to a function that has been imported to that lexical scope or an exclosing lexical scope.\n\nWhile the functions and types described in this part are experimental and may or may not actually exist when you read this, the ideas are legitimate. If you are really excited by these features, let us know.\n\n**TODO: There's plenty of places to help out here if functions and data types interest you.**\n\n### C-API\n\nThe C-API provides an element of compatibility with Ruby C-extensions. However, the C-API is deprecated and will likely eventually be removed.\n\n## FAQ\n\n**Q. There's this other \\<programming language, project, concept, application> that seems \\<better, faster, cheaper>, shouldn't I use that instead?**\n\nA. Yes, absolutely. The sooner the better, really.\n\n**Q. Why are there no tickets tagged for beginners?**\n\nA. We have a lot of respect for your abilities, whether you've ever written a line of code before or not, whether you've ever worked on a compiler, virtual machine, garbage collector, or debugger before.\n\n  Find something that interests you and dive in. If you get stuck, ask a question.\n\n**Q. Why isn't \\<my pet feature> done already? When will it be done?**\n\n**A.** Do you have 1,000,000 USD? No, really.\n\n**Q. Why won't you accept my PR to rewrite the virtual machine in \\<Rust, Go, Node, TypeScript> or add static typing to the Ruby core library or my other terrific idea?**\n\n**A.** There are a lot of fascinating ideas out there. Fork Rubinius, whip up your idea, show that other people find it useful, and let's talk. You might find you've got a far better project than Rubinius. After all, that's what we're doing, trying to figure out what might be useful.\n\n**Q. Is there more documentation?**\n\n**A.** Yes, there is a [book](https://rubinius.com/book/) that needs a lot of love and attention.\n\n**Q. Can I embed Rubinius into my favorite C/C++ application?**\n\n**A.** Yes, you can! More of the facilities to support interacting with the Machine will be added over time.\n\n  ```c++\n  #include \"machine.hpp\"\n  \n  int main(int argc, char** argv) {\n    rubinius::Machine machine(argc, argv);\n    \n    machine.boot();\n    \n    return machine.halt();\n  }\n  ```\n   \n**Q. What about the Ruby programming language?**\n\n**A.** Many popular Ruby applications, like Rails, may run on Rubinius, which aims to be compatible with the most recent stable Ruby version.\n\n   Rubinius provides the standard Ruby libraries, with the following exceptions:\n\n  * Continuation\n  * Ripper\n  * TracePoint\n  * Tracer\n\n  The following Ruby features are not supported on Rubinius:\n\n  * Refinements\n  * $SAFE levels\n\n**Q. Isn't Rubinius just a Ruby implementation?**\n\n**A.** No, it's not. Rubinius is an experiment that started as a Ruby implementation, but is attempting to look beyond the limitations of Ruby. Consider Rubinius a mostly compatible superset of Ruby for now.\n\n**Q. Why does Rubinius report the Ruby version as 10.0?**\n\n**A.** Rubinius is a time machine. When you use it, you travel into the future. Even this README is in the future.\n\n**Q. What is up with the weird version scheme in Rubinius?**\n\n**A.** Rubinius uses a simple `epoch.sequence` version scheme. For any sequence number `N`, `N+1` will only add new capabilities, or remove something that has been listed as deprecated in `<= N`. Super simple.\n\n**Q. Why does Rubinius not support frozen and tainted?**\n\n**A.** Rubinius has better features; frozen and tainted are considered harmful. To elaborate...\n\nBoth frozen and tainted depend on strewing checks throughout the source code. As a classic _weak-link_ system, only one of those checks needs to be misplaced for the guarantees offered by either to fail. Since the number of checks is high, and as new code is written new checks need to be considered, the features inherently constitute unbounded complexity and unbounded risk.\n\nIn place of frozen, Rubinius is implementing attributes on classes. One attribute is immutability. The way this works is that every machine instruction has an attribute for whether the instruction would mutate an object. When a method is added to a class, the attributes are checked and any method containing mutating instructions is disallowed. Additionally, dispatch that searches the superclasses of a class marked immutable would also perform this check. Immutability is an indelible attribute that is inherited by all subclasses.\n\nIn place of tainted, Rubinius is implementing sanitization functions at the IO boundary, similar to the transcoding facility.\n\nIn both cases, the places that the checks must be made are orders of magnitude fewer than in the case of frozen and tainted. The checks are more orderly as well.\n\n**Q. Why doesn't Rubinius allow me to set arbitrary encodings for Strings?**\n\n**A.** Rubinius only uses UTF-8 internally. Any transcoding must be performed at the IO boundary.\n\n**Q. How do I use RubyGems?**\n\n**A.** Rubinius comes with RubyGems built-in. To install a gem, run the following:\n\n    $ rbx -S gem install <gem_name>\n\n**Q. Why doesn't Rubinius install gem binaries in the same place as Ruby?**\n\n**A.** Rubinius is intended to be installed alongside Ruby without causing conflicts. Only the main executable, `rbx`, should be installed into a system directory. Edit your shell PATH to include the directories listed when Rubinius is installed to access other executables like gem binaries.\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 5.505859375,
          "content": "require './rakelib/configure'\nrequire './rakelib/build_signature'\n\ninclude Rake::DSL if Rake.const_defined? :DSL\n\n# Wipe out CDPATH, it interferes with building in some cases,\n# see http://github.com/rubinius/rubinius/issues#issue/555\nif ENV[\"CDPATH\"]\n  ENV.delete(\"CDPATH\")\nend\n\n# Wipe out RUBYGEMS_GEMDEPS, it causes the build to fail with\n# \"no such file to load -- tsort\" when running rbx extconf.rb\nif ENV[\"RUBYGEMS_GEMDEPS\"]\n  ENV.delete(\"RUBYGEMS_GEMDEPS\")\nend\n\n$trace ||= false\n$VERBOSE = true\n$verbose = Rake.application.options.trace || ARGV.delete(\"-v\")\n$cleaning = Rake.application.top_level_tasks.include?(\"clean\")\n\nif !$verbose and respond_to?(:verbose)\n  verbose(false) if verbose() == :default\nend\n\n$:.unshift File.expand_path(\"../\", __FILE__)\n$:.unshift File.expand_path(\"../build/scripts\", __FILE__)\n\nBUILD_CONFIG = {} unless Object.const_defined? :BUILD_CONFIG\n\ndef load_configuration\n  config_rb = File.expand_path \"../build/config/config.rb\", __FILE__\n  config_h  = File.expand_path \"../machine/config.h\", __FILE__\n\n  unless File.exist?(config_rb) and File.exist?(config_h)\n    if $cleaning\n      exit 0\n    else\n      sh \"./configure\"\n      return load_configuration\n    end\n  end\n\n  load config_rb\n  BUILD_CONFIG.replace Rubinius::BUILD_CONFIG\nend\n\nload_configuration\n\nunless verify_build_signature or $cleaning or ENV[\"RBX_IGNORE_BUILD_SIGNATURE\"]\n  STDERR.puts \"Your configuration is outdated, please run ./configure first\"\n  exit 1\nend\n\nunless ENV[\"RBX_SUPRESS_DEPRECATION\"]\n  STDERR.puts \"              *** DEPRECATION NOTICE ***\" \\\n    \"\\n\\nUse of Rake is deprecated and will be removed in the future.\\n\" \\\n    \"Use 'build.sh' to configure, build, package, and install Rubinius.\\n\\n\\n\"\nend\n\nif BUILD_CONFIG[:build_bin]\n  ENV[\"PATH\"] = \"#{BUILD_CONFIG[:build_bin]}:#{ENV[\"PATH\"]}\"\nend\n\n# Set the build compiler to the configured compiler unless\n# the compiler is set via CC environment variable.\nENV['CC'] = BUILD_CONFIG[:cc] unless ENV['CC']\nENV['CXX'] = BUILD_CONFIG[:cxx] unless ENV['CXX']\n\n$dlext = RbConfig::CONFIG[\"DLEXT\"]\n$CC = ENV['CC']\n\nclass SpecRunner\n\n  @at_exit_handler_set = false\n  @at_exit_status = 0\n  @flags = nil\n\n  def self.at_exit_status\n    @at_exit_status\n  end\n\n  def self.set_at_exit_handler\n    return if @at_exit_handler_set\n\n    at_exit { exit SpecRunner.at_exit_status }\n    @at_exit_handler_set = true\n  end\n\n  def self.set_at_exit_status(status)\n    @at_exit_status = status || 1\n  end\n\n  def self.flags\n    @flags\n  end\n\n  def self.flags=(value)\n    @flags = value\n  end\n\n  def initialize\n    @handler = lambda do |ok, status|\n      self.class.set_at_exit_status(status.exitstatus) unless ok\n    end\n    @start_time = Time.now\n  end\n\n  def elapsed_time\n    puts \"Running for #{Time.now - @start_time} seconds\"\n  end\n\n  def run(suite=:ci_files)\n    self.class.set_at_exit_handler\n\n    cmd = \"bin/mspec ci #{suite} #{self.class.flags} -t bin/#{BUILD_CONFIG[:program_name]} -d --background\"\n    puts cmd\n\n    sh(cmd, &@handler)\n  end\nend\n\ntask :default => [:spec, :install]\n\ndef clean_environment\n  ENV['GEM_PATH'] = ENV['GEM_HOME'] = nil\n  ENV['RUBYOPT'] = \"--disable-gems\"\nend\n\n# See vm.rake for more information\ndesc \"Build Rubinius\"\ntask :build => %w[build:build]\n\ndesc \"Recompile all ruby system files\"\ntask :rebuild => %w[clean build]\n\ndesc 'Remove rubinius build files'\ntask :clean => %w[\n  vm:clean\n  core:clean\n]\n\ndesc 'Remove rubinius build files and external library build files'\ntask :distclean => %w[\n  clean\n  core:distclean\n  vm:distclean\n]\n\ndesc \"Run specs in default (configured) mode but do not rebuild on failure\"\ntask :spec => %w[build] do\n  clean_environment\n\n  spec_runner = SpecRunner.new\n\n  %w[spec/language\n     spec/core\n     spec/command_line\n     spec/instructions\n     spec/jit\n     spec/ruby/command_line\n     spec/ruby/language\n     spec/ruby/core/argf\n     spec/ruby/core/array\n     spec/ruby/core/basicobject\n     spec/ruby/core/bignum\n     spec/ruby/core/binding\n     spec/ruby/core/builtin_constants\n     spec/ruby/core/class\n     spec/ruby/core/comparable\n     spec/ruby/core/complex\n     spec/ruby/core/continuation\n     spec/ruby/core/dir\n     spec/ruby/core/encoding\n     spec/ruby/core/enumerable\n     spec/ruby/core/enumerator\n     spec/ruby/core/env\n     spec/ruby/core/exception\n     spec/ruby/core/false\n     spec/ruby/core/fiber\n     spec/ruby/core/file\n     spec/ruby/core/filetest\n     spec/ruby/core/fixnum\n     spec/ruby/core/float\n     spec/ruby/core/gc\n     spec/ruby/core/hash\n     spec/ruby/core/integer\n     spec/ruby/core/io\n     spec/ruby/core/kernel\n     spec/ruby/core/main\n     spec/ruby/core/marshal\n     spec/ruby/core/matchdata\n     spec/ruby/core/math\n     spec/ruby/core/method\n     spec/ruby/core/module\n     spec/ruby/core/mutex\n     spec/ruby/core/nil\n     spec/ruby/core/numeric\n     spec/ruby/core/object\n     spec/ruby/core/objectspace\n     spec/ruby/core/proc\n     spec/ruby/core/process\n     spec/ruby/core/random\n     spec/ruby/core/range\n     spec/ruby/core/rational\n     spec/ruby/core/regexp\n     spec/ruby/core/signal\n     spec/ruby/core/string\n     spec/ruby/core/struct\n     spec/ruby/core/symbol\n     spec/ruby/core/systemexit\n     spec/ruby/core/thread\n     spec/ruby/core/threadgroup\n     spec/ruby/core/time\n     spec/ruby/core/true\n     spec/ruby/core/unboundmethod\n     spec/ruby/optional/capi\n     spec/library\n  ].each do |path|\n    spec_runner.run path\n  end\n\n  spec_runner.elapsed_time\n\n  exit 1 unless SpecRunner.at_exit_status == 0\nend\n\ndesc \"Run specs as in the spec task, but with CI formatting\"\ntask :ci do\n  SpecRunner.flags = \"-V\" # show spec file names\n  Rake::Task[\"spec\"].invoke\nend\n"
        },
        {
          "name": "SECURITY",
          "type": "blob",
          "size": 1.078125,
          "content": "Reporting security issues\n\nWe care deeply about providing a secure Ruby environment for running your code.\nIf you find a security issue, please send an email to security@rubini.us. In\norder to keep your message safe, you can use our public key to send the report\nto us.\n\nThe public key can be found in the Rubinius repository under security.pub in\nthe top level directory, on the website at http://rubini.us/security.pub, and\nin the MIT PGP database at:\n\nhttp://pgp.mit.edu:11371/pks/lookup?op=vindex&search=0x0F7D2F9537F9880C.\n\nWe will do our best to respond to you within 72 hours and will work with you\nto create a fix for the issue. Sending an email to security@rubini.us will not\nresult in a public disclosure. We will work with you for on a public disclosure\nafter we have a fix ready.\n\nFor security issues for extensions that are copies from CRuby, please report\nthem there directly. The instructions can be found at http://www.ruby-lang.org/en/security/.\nWe track those issues as well and are informed by their security team. This\nmakes sure Rubinius also gets updated with these security fixes.\n"
        },
        {
          "name": "THANKS",
          "type": "blob",
          "size": 0.31640625,
          "content": "This is a big thank you to all the people that have helped\nto make Rubinius possible.\n\nWilson Bilkovich\nAlexander Kellett\n\nMonetary Donations:\n\nHUGE 'Thank You' to Geoffrey Grosenbach (@topfunky) and his\nlatest venture, PeepCode (peepcode.com)! I have him to thank for\nkicking off the donation wagon.\n\nSamuel Smoot\nBil Kleb\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.0380859375,
          "content": "#!/bin/bash\n\n./configure $@ && rake -q\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.3916015625,
          "content": "#!/bin/bash\n\n# The configure script will be a permanent stub that invokes the actual build\n# system to conform to common expectations about building software by running:\n#\n#  configure && make && make install\n\nexport RBX_SUPRESS_DEPRECATION=1\n\nfor f in $(find build/rubinius/codedb build/codetools/ build/stdlib/ -name extconf.rb)\ndo\n  pushd $(dirname $f) && make clean\n  popd\ndone\n\n./configure.rb $@\n"
        },
        {
          "name": "configure.rb",
          "type": "blob",
          "size": 63.08203125,
          "content": "#!/usr/bin/env ruby\n\nrequire './rakelib/configure'\nrequire './rakelib/release'\nrequire './rakelib/build_signature'\nrequire 'rbconfig'\nrequire 'tempfile'\nrequire 'fileutils'\nrequire 'stringio'\nrequire 'date'\nrequire 'digest/md5'\nrequire 'digest/sha2'\nrequire 'net/http'\n\nmodule Rubinius\n  BUILD_CONFIG = {}\nend\n\nroot = File.expand_path File.dirname(__FILE__)\n\nrequire File.join(root, \"core\", \"options\")\n\nclass Configure\n\n  # Default settings only. All code that may depend on user-selected options\n  # must run after options are processed.\n  def initialize(root)\n    @log = Logger.new \"configure.log\"\n\n    @command_line = ARGV.dup\n    @log.log \"Command line: #{@command_line.join(\" \").inspect}\"\n\n    @features = {}\n    @defines = []\n    @config = File.join(root, \"build/config/config.rb\")\n\n    # Platform settings\n    @host = `sh -c ./build/bin/config.guess`.chomp\n    @cpu = nil\n    @vendor = nil\n    @os = nil\n    @windows = nil\n    @darwin = nil\n    @bsd = nil\n    @linux = nil\n    @little_endian = false\n    @sizeof = {}\n    @gc_stack_check = false\n    @log_concurrent_update = false\n    @raise_concurrent_update = false\n\n    # Build tools\n    @cc = nil\n    @cxx = nil\n    @make = nil\n    @rake = nil\n    @tar = nil\n    @bzip = nil\n    @perl = nil\n    @gem = nil\n\n    # LLVM settings\n    @llvm_path              = nil\n    @llvm_system_name       = get_system_name\n    @llvm_configure         = nil\n    @llvm_version           = nil\n    @llvm_api_version       = nil\n    @llvm_shared            = false\n    @llvm_shared_objs       = nil\n    @llvm_cxxflags          = \"\"\n    @llvm_ldflags           = \"\"\n\n    # System settings\n    @libc         = nil\n    @x86_64       = false\n    @aarch64      = false\n    @dtrace       = false\n    @dtrace_const = false\n    @have_lchmod  = false\n    @have_lchown  = false\n    @have_mkfifo  = false\n    @debug_build  = false\n    @include_dirs = []\n    @lib_dirs     = []\n\n    # File system paths\n    @sourcedir    = root\n    @prefixdir    = nil\n    @bindir       = nil\n    @appdir       = nil\n    @libdir       = nil\n    @encdir       = nil\n    @runtimedir   = nil\n    @codedbdir    = nil\n    @codetoolsdir = nil\n    @stdlibdir    = nil\n    @coredir      = nil\n    @sitedir      = nil\n    @archdir      = nil\n    @vendordir    = nil\n    @mandir       = nil\n    @gemsdir      = nil\n    @includedir   = nil\n\n    @build_libdir = nil\n    @builddir     = nil\n    @scriptdir    = nil\n    @capi_includedir  = \"#{@sourcedir}/machine/include/capi\"\n\n    @bootstrap_gems_dir = nil\n\n    @vm_release_h = File.join(root, \"/machine/release.h\")\n\n    @preserve_prefix = false\n\n    @program_name = \"rbx\"\n    @bin_links = [\"rbx\", \"ruby\", \"rake\", \"gem\", \"irb\", \"rdoc\", \"ri\", \"erb\"]\n    @use_bin_links = true\n\n    # List of all gems to pre-install.\n    @gems_list = File.join(root, \"gems_list.txt\")\n    @gem_files = File.readlines(@gems_list).map { |x| x.chomp }\n    @gem_names = @gem_files.map { |x| /(.*)-\\d+\\.\\d+(\\.\\d+)?\\.gem$/.match(x)[1] }\n\n    @installed_gems = [\n      \"bundler-1.16.1.gem\",\n      \"minitest-5.11.1.gem\",\n      \"racc-1.4.14.gem\",\n      \"rake-12.3.0.gem\",\n      \"rdoc-5.1.0.gem\",\n      \"rb-readline-0.5.5.gem\",\n      \"test-unit-3.2.7.gem\",\n     ]\n\n    # Default cache directory, can be overwritten by the user.\n    @gems_cache = File.expand_path \"../build/libraries/cache\", __FILE__\n\n    # Vendored library settings\n    @build_libdir = File.join(root, \"/build/libraries\")\n\n    # Ruby compatibility version\n    @ruby_version = \"10.0\"\n    @ruby_libversion = @ruby_version.split(/\\./)[0..1].join.to_i\n\n    @build_bin = \"#{@sourcedir}/build/bin\"\n\n    # Configure settings\n    @release_build = !in_git?\n  end\n\n  # Set up system commands to run in cmd.exe on Windows. Either Windows\n  # or MRI on Windows has issues with subprocesses where the invocation\n  # of the subprocess will return before the subprocess has finished.\n  # This manifests in configure when uncompressing LLVM source returns\n  # but attempting to move the directory fails sporadically with an access\n  # exception. Adding the, essentially no-op, 'sleep 0' resolves this.\n  def msys_system(cmd)\n    old_system %[cmd.exe /C \"#{cmd} && sleep 0\"]\n  end\n\n  def msys_backquote(cmd)\n    old_backquote %[cmd.exe /C \"#{cmd}\"]\n  end\n\n  def expand(path)\n    File.expand_path(path)\n  end\n\n  def expand_install_dir(dir)\n    dir = expand dir\n    if !@preserve_prefix and File.directory?(dir) and dir !~ /(rubinius|rbx).*\\/?$/\n      original = dir\n      dir += \"/rubinius/#{@libversion}\"\n      @log.write \"The directory #{original} already exists, installing to #{dir}\"\n    end\n    dir\n  end\n\n  def set_host\n    /([^-]+)-([^-]+)-(.*)/ =~ @host\n    @cpu, @vendor, @os = $1, $2, $3\n\n    # TODO: For better cross-compiling support, it may be necessary to\n    # use the feature facility to check for a define in the compiler.\n    @windows = (@host =~ /mingw|mswin/) != nil\n    @darwin  = (@host =~ /darwin/) != nil\n    @bsd     = (@host =~ /bsd/) != nil\n    @linux   = (@host =~ /linux/) != nil\n  end\n\n  def set_system_commands\n    # Set up system commands to run in cmd.exe on Windows.\n    if @windows\n      alias :old_system    :system\n      alias :old_backquote :`\n      alias :system        :msys_system\n      alias :`             :msys_backquote\n    end\n  end\n\n  def set_filesystem_paths\n    @prefixdir = @prefixdir ? expand_install_dir(@prefixdir) : @sourcedir\n\n    if @appdir\n      dir = expand_install_dir @appdir\n\n      @libdir     = dir + \"/library\"\n      @runtimedir = dir + \"/runtime\"\n      @codedbdir  = dir + \"/codedb\"\n      @coredir    = dir + \"/core\"\n      @sitedir    = dir + \"/site\"\n      @archdir    = dir + \"/site/#{@cpu}-#{@os}\"\n      @encdir     = dir + \"/site/#{@cpu}-#{@os}/encoding/converter\"\n      @vendordir  = dir + \"/vendor\"\n    end\n\n    @bindir       = @prefixdir + \"/bin\" unless @bindir\n    @libdir       = @prefixdir + \"/library\" unless @libdir\n    @runtimedir   = @prefixdir + \"/runtime\" unless @runtimedir\n    @codedbdir    = @prefixdir + \"/codedb\" unless @codedbdir\n    @coredir      = @prefixdir + \"/core\" unless @coredir\n    @sitedir      = @prefixdir + \"/site\" unless @sitedir\n    @archdir      = @prefixdir + \"/site/#{@cpu}-#{@os}\" unless @archdir\n    @encdir       = @prefixdir + \"/site/#{@cpu}-#{@os}/encoding/converter\" unless @encdir\n    @vendordir    = @prefixdir + \"/vendor\" unless @vendordir\n    @mandir       = @prefixdir + \"/man\" unless @mandir\n    @gemsdir      = @prefixdir + \"/gems\" unless @gemsdir\n    @includedir   = @prefixdir + \"/machine/include/capi\" unless @includedir\n\n\n    dirs = [@bindir, @libdir, @runtimedir, @codedbdir, @coredir, @sitedir,\n            @archdir, @vendordir, @mandir, @gemsdir, @includedir, @encdir]\n\n    parts = dirs.map { |d| d.split \"/\" }\n\n    i = 0\n    total = parts[0].size\n    prefix = []\n\n    while i < total\n      part = parts[0][i]\n      break unless parts.all? { |p| p[i] == part }\n      prefix << part\n      i += 1\n    end\n\n    @prefixdir = prefix.join \"/\"\n    size = @prefixdir.size\n\n    dirs.each { |d| d.replace d[size..-1] }\n\n    @scriptdir = \"#{@sourcedir}/build/scripts\"\n\n    @builddir = \"#{@sourcedir}/build/rubinius\" unless @builddir\n\n    stat = File.stat @builddir if File.exist? @builddir\n\n    if stat and stat.owned? and not @builddir.empty? and @builddir != \"/\"\n      FileUtils.rm_r @builddir\n    end\n\n    if @preserve_prefix\n      @builddir = File.expand_path \"#{@builddir}/#{@prefixdir}\"\n    end\n\n    FileUtils.mkdir_p @builddir\n\n    @bootstrap_gems_dir ||= \"#{@sourcedir}/build/libraries/gems\"\n    @codetoolsdir = \"#{@sourcedir}/build/codetools\"\n    @stdlibdir = \"#{@sourcedir}/build/stdlib\"\n  end\n\n  def add_opt_dir(dir)\n    @include_dirs << \"#{dir}/include\"\n    @lib_dirs     << \"#{dir}/lib\" << \"#{dir}/lib64\"\n  end\n\n  def options\n    @options = Rubinius::Options.new \"Usage: configure [options]\", 30\n    o = @options\n    o.left_align\n\n    o.doc \" Configure settings\"\n\n    o.on \"--log-file\", \"NAME\", \"Write log to file NAME\" do |name|\n      old_log = @log.path\n      @log = Logger.new name, false\n      @log.replace old_log\n    end\n\n    o.on \"--make\", \"NAME\", \"Use NAME as 'make' during build\" do |name|\n      @make = name\n    end\n\n    o.on \"--rake\", \"NAME\", \"Use NAME as 'rake' during build\" do |name|\n      @rake = name\n    end\n\n    o.on \"--tar\", \"NAME\", \"Use NAME as 'tar'\" do |name|\n      @tar = name\n    end\n\n    o.on \"--bzip\", \"NAME\", \"Use NAME as 'bzip'\" do |name|\n      @bzip = name\n    end\n\n    o.on \"--perl\", \"NAME\", \"Use NAME as 'perl' during build\" do |name|\n      @perl = name\n    end\n\n    o.on \"--gem\", \"NAME\", \"Use NAME as 'gem' during build\" do |name|\n      @gem = name\n    end\n\n    o.on \"--debug-build\", \"Disable C++ optimizations and retain debugging symbols\" do\n      @debug_build = true\n    end\n\n    o.on \"--sanitize\", \"SANITIZER\", \"Enable the Clang sanitizer: 'memory', 'address', 'undefined'\" do |sanitizer|\n      if [\"address\", \"memory\", \"undefined\"].include?(sanitizer)\n        @debug_build = true\n        (@system_cxxflags ||= \"\") << \" -fsanitize=#{sanitizer}  -fno-omit-frame-pointer -fno-optimize-sibling-calls \"\n        @system_cxxflags << \" -fsanitize-address-use-after-scope \" if sanitizer == \"address\"\n        @system_cxxflags << \" -fsanitize-memory-track-origins \" if sanitizer == \"memory\"\n\n        (@system_ldflags ||= \"\") << \" -g -fsanitize=#{sanitizer} \"\n      end\n    end\n\n    o.on \"--release-build\", \"Build from local files instead of accessing the network\" do\n      @release_build = true\n    end\n\n    o.on \"--no-release-build\", \"Build from the network instead of local files\" do\n      @release_build = false\n    end\n\n    o.on \"--gc-stack-check\", \"Emit stack trace for all threads on pause for GC\" do\n      @gc_stack_check = true\n    end\n\n    o.on \"--log-concurrent-update\", \"Log when T2 updates an object created by T1\" do\n      @log_concurrent_update = true\n    end\n\n    o.on \"--raise-concurrent-update\", \"Raise a RuntimeError when T2 updates an object created by T1\" do\n      @raise_concurrent_update = true\n    end\n\n    o.doc \"\\n Compiler settings\"\n\n    o.on \"--cc\", \"COMPILER\", \"Compiler to use for C code (eg clang)\" do |cc|\n      @cc = cc\n    end\n\n    o.on \"--cxx\", \"COMPILER\", \"Compiler to use for C++ code (eg clang++)\" do |cxx|\n      @cxx = cxx\n    end\n\n    o.doc \"\\n LLVM settings\"\n\n    o.on \"--system-name\", \"NAME\", \"Name of OS (eg fedora-8, ubuntu-10.04)\" do |name|\n      @llvm_system_name = name\n    end\n\n    o.on \"--llvm-path\", \"PATH\", \"File system path to the directory containing LLVM\" do |dir|\n      @llvm_path = dir.dup\n    end\n\n    o.on \"--llvm-config\", \"PROGRAM\", \"File system path to the llvm-config program\" do |program|\n      @llvm_configure = program\n    end\n\n    o.on \"--llvm-shared\", \"Link to shared LLVM library\" do\n      @llvm_shared = true\n    end\n\n    o.doc \"\\n System settings\"\n\n    o.on \"--with-include-dir\", \"DIR\", \"Add DIR to the default include search paths\" do |dir|\n      dir.split(File::PATH_SEPARATOR).each do |d|\n        @include_dirs << d\n      end\n    end\n\n    o.on \"--with-lib-dir\", \"DIR\", \"Add DIR to the default library search paths\" do |dir|\n      dir.split(File::PATH_SEPARATOR).each do |d|\n        @lib_dirs << d\n      end\n    end\n\n    o.on \"--with-opt-dir\", \"DIR\", \"Add DIR/include and DIR/lib to include and library search paths\" do |dir|\n      dir.split(File::PATH_SEPARATOR).each do |d|\n        add_opt_dir(d)\n      end\n    end\n\n    o.on \"--libc\", \"NAME\", \"Use NAME as the libc for FFI\" do |name|\n      @libc = name\n    end\n\n    o.on \"--host\", \"HOST\", \"Override guessed platform with HOST specification\" do |host|\n      @log.write \"------------------------------------------------------\"\n      @log.write \"\\nChanging the platform specification can cause Rubinius\"\n      @log.write \"to malfunction. The current platform specification is:\"\n      @log.write \"\\n#{@host}\"\n      @log.write \"\\n------------------------------------------------------\"\n\n      @host = host\n    end\n\n    o.doc \"\\n Program names\"\n\n    o.on \"--program-name\", \"NAME\", \"Build Rubinius executable as NAME\" do |name|\n      @program_name = name\n    end\n\n    o.on \"--bin-link\", \"NAME\", \"Create NAME as binary symlink to program name\" do |name|\n      @bin_links << name\n    end\n\n    o.on \"--no-bin-links\", \"Do not create any symlinks to program name\" do\n      @use_bin_links = false\n    end\n\n    o.doc \"\\n File system paths for installing Rubinius\"\n\n    o.on \"-P\", \"--prefix\", \"PATH\", \"Install Rubinius in subdirectories of PATH\" do |dir|\n      warn_prefix dir\n      @prefixdir = dir.dup\n    end\n\n    o.on \"-B\", \"--bindir\", \"PATH\", \"Install Rubinius executable in PATH\" do |dir|\n      @bindir = expand dir\n    end\n\n    o.on \"-I\", \"--includedir\", \"PATH\", \"Install Rubinius C-API include files in PATH\" do |dir|\n      @includedir = expand dir\n    end\n\n    o.on \"-A\", \"--appdir\", \"PATH\", \"Install Ruby runtime and libraries in PATH\" do |dir|\n      @appdir = dir.dup\n    end\n\n    o.on \"-L\", \"--libdir\", \"PATH\", \"Install Rubinius shared library in PATH\" do |dir|\n      @libdir = dir.dup\n    end\n\n    o.on \"-M\", \"--mandir\", \"PATH\", \"Install man pages in PATH\" do |dir|\n      @mandir = expand dir\n    end\n\n    o.on \"-G\", \"--gemsdir\", \"PATH\", \"Install gems in PATH\" do |dir|\n      @gemsdir = expand dir\n    end\n\n    o.on \"--gems-cache\", \"PATH\", \"Cache Gems in PATH during compilation\" do |dir|\n      @gems_cache = expand dir\n    end\n\n    o.on \"--sitedir\", \"PATH\", \"Install site-specific Ruby code in PATH\" do |dir|\n      @sitedir = expand dir\n    end\n\n    o.on \"--archdir\", \"PATH\", \"Install arch-specific native extensions in PATH\" do |dir|\n      @archdir = expand dir\n    end\n\n    o.on \"--vendordir\", \"PATH\", \"Install vendor-specific Ruby code in PATH\" do |dir|\n      @vendordir = expand dir\n    end\n\n    o.on \"--preserve-prefix\", \"Use the configure prefix for staging Rubinius to install\" do\n      @preserve_prefix = true\n    end\n\n    o.on \"--stagingdir\", \"PATH\", \"Use PATH to build and prepare all files for install\" do |dir|\n      @builddir = expand dir\n    end\n\n    o.doc \"\\n Optional features\"\n\n    feature \"execinfo\", true\n    feature \"vendor-zlib\", false\n    feature \"vendor-libsodium\", true\n    feature \"alloc-tracking\", false\n    feature \"dtrace\", false\n    feature \"rpath\", false\n\n    o.doc \"\\n Help!\"\n\n    o.on \"--show\", \"Print the current configuration and exit\" do\n      print_debug\n      exit 0\n    end\n\n    o.on \"-V\", \"--verbose\", \"Print additional info\" do\n      @verbose = true\n    end\n\n    o.help\n\n    o.doc \"\"\n\n  end\n\n  def feature(name, default_value=true)\n    @features[name] = ConfigurationToggle.new default_value\n\n    @options.on \"--with-#{name}\", \"Enable #{name}\" do\n      @features[name].configured = true\n    end\n\n    @options.on \"--without-#{name}\", \"Disable #{name}\" do\n      @features[name].configured = false\n    end\n  end\n\n  def parse(ary)\n    @options.parse ary\n  end\n\n  def md5_checksum(md5_path, full_path)\n    return Digest::MD5.file(full_path).hexdigest == File.read(md5_path).strip.split(\" \").first\n  end\n\n  def download(url, full_path, follows=0)\n    begin\n      dir = File.dirname full_path\n      Dir.mkdir dir unless File.exist? dir\n\n      uri = url.kind_of?(URI) ? url : URI(url)\n\n      if ENV['http_proxy']\n        protocol, userinfo, p_host, p_port  = URI::split(ENV['http_proxy'])\n        p_user, p_pass = userinfo.split(/:/) if userinfo\n        http = Net::HTTP.new(uri.host, uri.port, p_host, p_port, p_user, p_pass)\n      else\n        http = Net::HTTP.new(uri.host, uri.port)\n      end\n      http.use_ssl = true if uri.scheme == 'https'\n      request = Net::HTTP::Get.new(uri.request_uri)\n\n      http.request(request) do |res|\n        case res\n        when Net::HTTPNotFound\n          @log.write \"      #{url} not found.\"\n          return false\n        when Net::HTTPMovedPermanently,\n             Net::HTTPFound,\n             Net::HTTPSeeOther,\n             Net::HTTPTemporaryRedirect\n          if follows > 3\n            @log.write \"      ERROR: too many redirects: #{url}\"\n            return false\n          end\n\n          return download URI.parse(res['Location']), full_path, follows + 1\n        when Net::HTTPClientError\n          @log.write \"      ERROR: #{res.inspect}\"\n          return false\n        end\n\n        size = 0\n        total = res.header['Content-Length'].to_i\n\n        @log.write \"    Downloading #{File.basename(full_path)}...\"\n        File.open full_path, \"wb\" do |f|\n          res.read_body do |chunk|\n            f << chunk\n            size += chunk.size\n            print \"\\r      [ %d%% (%d of %d) ]\" % [(size * 100) / total, size, total]\n          end\n        end\n        @log.write \": done!\"\n      end\n    rescue Interrupt\n      File.unlink full_path if File.exist?(full_path)\n      raise\n    rescue StandardError => e\n      File.unlink full_path if File.exist?(full_path)\n      @log.write \" ERROR: #{e.message}\"\n      return false\n    end\n\n    return true\n  end\n\n  def setup_llvm\n    @log.print \"  Checking for 'llvm-config': \"\n\n    config = @llvm_configure\n    if !config\n      which = ENV['PATH'].split(\":\").find do |path|\n        File.exist? File.join(path, \"llvm-config\")\n      end\n      if which\n        config = File.join(which, \"llvm-config\")\n      elsif @darwin\n        if macports?\n          config = macports_llvm_config\n        else\n          out = brew \"--prefix llvm\"\n          config = \"#{out}/bin/llvm-config\" if $?.success?\n        end\n      end\n    end\n\n    if config\n      config_cmd = llvm_config_cmd config\n      begin\n        version = `#{config_cmd} --version`.strip\n\n        # Ruby 1.8 returns an empty string\n        failed = true if version.empty?\n      rescue Errno::ENOENT\n        # Ruby 1.9 raises this error\n        failed = true\n      end\n\n      unless failed\n        parts = version.sub(/svn$/, \"\").split(\".\").map { |i| i.to_i }\n        api_version = (\"%d%02d\" % parts[0..1]).to_i\n        if api_version < 306\n          @log.write \"only LLVM 3.6+ is supported\"\n        else\n          @log.write \"found! (version #{version} - api: #{api_version})\"\n          @llvm = :config\n          @llvm_configure = config_cmd\n          @llvm_version = version\n          @llvm_api_version = api_version\n\n          check_llvm_flags\n\n          if @llvm_shared\n            setup_llvm_shared\n          end\n\n          return true\n        end\n      else\n        @log.write \"executing #{config_cmd.inspect} failed\"\n      end\n    else\n      @log.write \"not found\"\n    end\n\n    failure \"ABORT: unable to set up LLVM\"\n  end\n\n  def setup_llvm_shared\n    @log.print \"  Checking for LLVM shared libs: \"\n\n    src = <<-EOP\n#include <llvm/IR/LLVMContext.h>\nusing namespace llvm;\nint main() { LLVMContext &Context = getGlobalContext(); }\n    EOP\n\n    common_args = \"`#{@llvm_configure} --cppflags` #{@llvm_cxxflags} #{@llvm_ldflags}\".strip.split(/\\s+/)\n    shared_configs = {\n      \"libLLVM-#{@llvm_version}\"  => [\"-lLLVM-#{@llvm_version}\"],\n      \"#{@llvm_configure} --libs\" => `#{@llvm_configure} --libs`.strip.split(/\\s+/)\n    }\n\n    shared_configs.each do |desc, objs|\n      status = check_program(false, *(common_args + objs)) do |f|\n        f.puts src\n        @log.log src\n      end\n\n      if status == 0\n        @log.write \"found! (using #{desc})\"\n        @llvm_shared_objs = objs\n        return true\n      end\n    end\n\n    @log.write \"not found\"\n    false\n  end\n\n  def check_llvm_flags\n    flags = '--ldflags'\n\n    # Starting with LLVM 3.5 the --system-libs option is required in order to\n    # link against libraries such as zlib. Prior to 3.5 this was handled by\n    # --ldflags.\n    flags << ' --system-libs'\n\n    # Generate the actual flags. For whatever reason llvm-config also includes\n    # newlines in the output, so lets get rid of those while we're at it.\n    @llvm_ldflags = `#{@llvm_configure} #{flags}`.strip.gsub(\"\\n\", ' ')\n  end\n\n  def env(which)\n    ENV[which] || \"\"\n  end\n\n  def default_link_libs\n    libs = []\n    unless @host =~ /haiku/\n      libs << \"m\"\n    end\n    libs\n  end\n\n  def failure(message=nil)\n    @log.error message if message\n\n    STDERR.puts \"\\nRunning 'configure' failed. Please check configure.log for more details.\"\n    exit 1\n  end\n\n  def supported_compiler(name)\n    failure <<-EOM\nUnable to find #{name} compiler. Support for compilers other than #{name}\ncompiler was deprecated 1 Jun 2016 and has been removed. If your platform does\nnot support #{name} compiler, please email contact@rubinius.com\n    EOM\n  end\n\n  def default_cc\n    return 'clang' if `clang --version > /dev/null 2>&1` && $?.success?\n    supported_compiler \"clang C\"\n  end\n\n  def default_cxx\n    return 'clang++' if `clang++ --version > /dev/null 2>&1` && $?.success?\n    supported_compiler \"clang++ C++\"\n  end\n\n  def check_tools\n    @cc ||= ENV['CC'] || default_cc\n    @cxx ||= ENV['CXX'] || default_cxx\n\n    check_tool_version @cc, '-dumpversion', [4, 1]\n    check_tool_version @cxx, '-dumpversion', [4, 1]\n\n    supported_compiler \"clang C\" unless @cc =~ /clang|ccc-analyzer/\n    supported_compiler \"clang++ C++\" unless @cxx =~ /clang\\+\\+|c\\+\\+\\-analyzer/\n\n    if File.exist? @build_bin\n      if !File.directory? @build_bin\n        fail \"#{@build_bin} already exists and is not a directory\"\n      end\n    else\n      FileUtils.mkdir_p @build_bin\n    end\n\n    if @cc != \"cc\"\n      cc = \"#{@build_bin}/cc\"\n      File.symlink `which #{@cc}`.chomp, cc unless File.exist? cc\n    end\n\n    if @cxx != \"c++\"\n      cxx = \"#{@build_bin}/c++\"\n      File.symlink `which #{@cxx}`.chomp, cxx unless File.exist? cxx\n    end\n\n    @make ||= ENV['MAKE'] || 'make'\n    @rake ||= ENV['RAKE'] || 'rake'\n    @tar ||= ENV['TAR'] || (@windows ? 'bsdtar' : 'tar')\n    @bzip ||= ENV['BZIP'] || 'bzip2'\n    @perl ||= ENV['PERL'] || 'perl'\n    @gem ||= ENV['GEM'] || 'gem'\n\n    @gcc_major = `#{@cc} -dumpversion`.strip.split(\".\")[0,2].join(\".\")\n    if @host == \"i686-pc-linux-gnu\" || @host == \"x86_64-unknown-linux-gnu\"\n      @llvm_generic_prebuilt  = \"llvm-#{@llvm_version}-#{@host}-#{@gcc_major}.tar.bz2\"\n    else\n      @llvm_generic_prebuilt  = \"llvm-#{@llvm_version}-#{@host}.tar.bz2\"\n    end\n\n    @system_cflags    ||= \"\"\n    (@system_cxxflags ||= \"\") << \"-std=c++14 \"\n    @system_cppflags  ||= \"\"\n    @system_incflags  ||= \"\"\n    @system_ldflags   ||= \"\"\n\n    @user_cflags =   ENV['CFLAGS']\n    @user_cxxflags = ENV['CXXFLAGS']\n    @user_cppflags = ENV['CPPFLAGS']\n    @user_incflags = ENV['INCFLAGS']\n    @user_ldflags =  ENV['LDFLAGS']\n\n    setup_platform\n  end\n\n  def setup_platform\n    @ldsharedxx = \"#{@cxx} -shared\"\n    @ldshared   = \"#{@cc} -shared\"\n\n    @include_dirs.each do |d|\n      @system_incflags << \"-I#{d} \"\n    end\n    @lib_dirs.each do |d|\n      @system_ldflags << \"-L#{d} \"\n    end\n\n    case RUBY_PLATFORM\n    when /mswin/i, /mingw/i, /bccwin32/i\n      # TODO: discovery helpers\n      #check_heads(%w[windows.h winsock.h], true)\n      #check_libs(%w[kernel32 rpcrt4 gdi32], true)\n\n      unless RUBY_PLATFORM =~ /mingw/\n        @system_cflags << \"-EHs -GR\"\n      end\n      @system_ldflags << \"-lws2_32\"\n      @features[\"rpath\"].configured = false\n    when /solaris/i\n      # GNU CHAIN only supported\n      @ldsharedxx = \"#{@cxx} -shared -G -fPIC -lstdc++\"\n      @ldshared   = \"#{@cc} -shared -G -fPIC\"\n      @system_cflags << \"-fPIC -Wno-strict-aliasing\"\n      @system_ldflags << \"-lsocket -lnsl -fPIC\"\n      @features[\"rpath\"].configured = false\n      @make = \"gmake\"\n    when /freebsd/i\n      @ldsharedxx = \"#{@cxx} -shared -fPIC\"\n      @ldshared   = \"#{@cc} -shared -fPIC\"\n      @system_cflags << \"-fPIC\"\n      @system_ldflags << \"-lcrypt -pthread -rdynamic\"\n      @make = \"gmake\"\n    when /openbsd/i\n      # OpenBSD branch contributed by Guillaume Sellier.\n\n      # on Unix we need a g++ link, not gcc. On OpenBSD, linking against\n      # libstdc++ have to be explicitly done for shared libs\n      @ldsharedxx = \"#{@cxx} -shared -lstdc++ -fPIC\"\n      @ldshared   = \"#{@cc} -shared -fPIC\"\n      @system_cflags << \"-fPIC\"\n      @system_ldflags << \"-pthread -rdynamic -Wl,--export-dynamic\"\n      @make = \"gmake\"\n    when /netbsd/i\n      @ldsharedxx = \"#{@cxx} -shared -lstdc++ -fPIC\"\n      @ldshared   = \"#{@cc} -shared -fPIC\"\n      @system_cflags << \"-fPIC\"\n      @system_ldflags << \"-lcrypt -pthread -rdynamic -Wl,--export-dynamic\"\n      @make = \"gmake\"\n    when /darwin/i\n      # on Unix we need a g++ link, not gcc.\n      # Ff line contributed by Daniel Harple.\n      @ldsharedxx = \"#{@cxx} -bundle -undefined suppress -flat_namespace\"\n      @ldshared   = \"#{@cc} -bundle -undefined suppress -flat_namespace\"\n      @system_cflags << \"-fPIC -D_DARWIN_USE_64_BIT_INODE\"\n      @features[\"rpath\"].configured = false\n    when /haiku/i\n      @system_cflags << \"-fPIC\"\n      @system_ldflags << \"-ldl -lnetwork\"\n      @features[\"rpath\"].configured = false\n    when /aix/i\n      @ldsharedxx = \"#{@cxx} -shared -Wl,-G -Wl,-brtl\"\n      @ldshared   = \"#{@cc} -shared -Wl,-G -Wl,-brtl\"\n      @features[\"rpath\"].configured = false\n    when /linux/i\n      @system_cflags << \"-fPIC\"\n      @system_ldflags << \"-Wl,--export-dynamic -lrt -lcrypt -ldl -lpthread\"\n    else\n      # on Unix we need a g++ link, not gcc.\n      @system_cflags << \"-fPIC\"\n      @system_ldflags << \"-ldl -lpthread\"\n    end\n\n    if @features[\"rpath\"].value\n      @lib_dirs.each do |d|\n        @system_ldflags << \" -Wl,-rpath=#{d}\"\n      end\n    end\n  end\n\n  def check_program(run=true, *arguments)\n    begin\n      basename = \"rbx-configure-test\"\n      source   = basename + \".cpp\"\n      File.open source, \"wb\" do |f|\n        yield f\n      end\n\n      File.open source, \"rb\" do |f|\n        @log.log f.read\n      end\n\n      libs = default_link_libs.map { |l| \"-l#{l}\" }.join(\" \")\n      args = arguments.join(\" \")\n\n      cmd = \"#{@cxx} #{@user_cppflags} #{@user_cflags} #{@user_cxxflags} #{@user_incflags} #{@user_ldflags} -o #{basename} #{source} #{@system_cppflags} #{@system_cflags} #{@system_cxxflags} #{@system_incflags} #{@system_ldflags} #{libs} #{args} >>#{@log.path} 2>&1\"\n      @log.log cmd\n      system cmd\n      return $?.exitstatus unless run\n\n      unless $?.exitstatus == 0\n        @log.log msg = \"Compiling configure test program failed.\"\n        raise RuntimeError, msg\n      end\n\n      system expand(\"./#{basename}\")\n      return $?.exitstatus\n    rescue => e\n      @log.log \"Error in check_program: #{e.class} #{e.message}\\n  #{e.backtrace.join(\"\\n  \")}\"\n      raise e\n    ensure\n      FileUtils.rm_r(Dir[\"#{basename}*\"])\n    end\n  end\n\n  def write_have_defines(f)\n    f.puts\n    @defines.each { |d| f.puts \"#define #{d.ljust(20)} 1\" }\n  end\n\n  def write_have_sizeof_defines(f)\n    f.puts\n    @sizeof.keys.sort.each { |k| f.puts \"#define HAVE_#{k}\".ljust(30) + \"1\" }\n  end\n\n  def write_sizeof_defines(f)\n    f.puts\n    @sizeof.keys.sort.each { |k| f.puts \"#define SIZEOF_#{k}\".ljust(30) + @sizeof[k].to_s }\n  end\n\n  def sizeof_typename(type)\n    if type =~ /(\\*+)$/\n      name = \"#{type[0...-$1.size]}#{\"p\" * $1.size}\"\n    else\n      name = type\n    end\n    name.gsub(/\\W/, \"_\").upcase\n  end\n\n  def sizeof(type)\n    @sizeof[sizeof_typename(type)] or failure(\"Unknown type: '#{type}'.\")\n  end\n\n  def assert_sizeof\n    @log.print \"Checking sizeof(intptr_t) == sizeof(int64_t): \"\n\n    status = check_program do |f|\n      src = <<-EOP\n#include <stdint.h>\n\nint main(int argc, char* argv[]) {\n  return sizeof(intptr_t) == sizeof(int64_t);\n}\n      EOP\n      f.puts src\n      @log.log src\n    end\n\n    if status == 1\n      @log.write \"yes\"\n    else\n      @log.write \"no\"\n      failure \"\\nRubinius requires that sizeof(intptr_t) == sizeof(int64_t)\"\n    end\n  end\n\n  def detect_sizeof(type, includes=[])\n    @log.print \"Checking sizeof(#{type}): \"\n\n    size = check_program do |f|\n      src = includes.map { |include| \"#include <#{include}>\\n\" }.join\n      src += <<-EOP\n#include <stddef.h>\n#include <stdint.h>\n\nint main() { return sizeof(#{type}); }\n      EOP\n      f.puts src\n      @log.log src\n    end\n\n    @sizeof[sizeof_typename(type)] = size\n\n    @log.write \"#{size} bytes\"\n  end\n\n  def detect_endian\n    @log.print \"Checking platform endianness: \"\n\n    status = check_program do |f|\n      src = \"int main() { int one = 1; return (*((char*)&one)) == 1 ? 0 : 1; }\"\n      f.puts src\n      @log.log src\n    end\n\n    @little_endian = (status == 0)\n    @log.write @little_endian ? \"little endian\" : \"big endian\"\n  end\n\n  def detect_tr1\n    @log.print \"Checking for tr1: \"\n\n    status = check_program(false) do |f|\n      src = <<-EOP\n#include <tr1/unordered_map>\n\ntypedef std::tr1::unordered_map<int, void*> X;\n\nint main() { X x; return 0; }\n      EOP\n      f.puts src\n      @log.log src\n    end\n\n    @tr1 = (status == 0)\n    @log.write @tr1 ? \"found\" : \"not found\"\n  end\n\n  def detect_tr1_hash\n    @log.print \"Checking for tr1/hash definition: \"\n\n    status = check_program(false) do |f|\n      src = <<-EOP\n#include <stdint.h>\n#include <tr1/unordered_map>\n\ntypedef std::tr1::unordered_map<uint64_t, void*> X;\n\nint main() { X x; return 0; }\n      EOP\n      f.puts src\n      @log.log src\n    end\n\n    @tr1_hash = (status == 0)\n    @log.write @tr1_hash ? \"found\" : \"not found\"\n  end\n\n  def detect_x86\n    print \"Checking for x86_64: \"\n\n    status = check_program do |f|\n      src = <<-EOP\nint main() {\n#if defined(__x86_64) || defined(__x86_64__)\nreturn 1;\n#else\nreturn 0;\n#endif\n}\n      EOP\n\n      f.puts src\n      @log.log src\n    end\n    @x86_64 = (status == 1)\n\n    puts @x86_64 ? \"yes\" : \"no\"\n  end\n\n  def detect_aarch64\n    print \"Checking for aarch64: \"\n\n    status = check_program do |f|\n      src = <<-EOP\nint main() {\n#if defined(__ARM_ARCH_ISA_A64) \nreturn 1;\n#else\nreturn 0;\n#endif\n}\n      EOP\n\n      f.puts src\n      @log.log src\n    end\n    @aarch64 = (status == 1)\n\n    puts @aarch64 ? \"yes\" : \"no\"\n  end\n\n  def detect_curses\n    @log.print \"Checking curses library: \"\n\n    src = <<-EOP\n#include <curses.h>\n#include <term.h>\n\nint main() { return tgetnum(\"\"); }\n    EOP\n\n    [\"-lcurses\", \"-lncurses\", \"-ltermcap\"].each do |lib|\n      status = check_program(false, lib) do |f|\n        f.puts src\n        @log.log src\n      end\n\n      if status == 0\n        @curses = lib\n        break\n      end\n    end\n\n    if @curses\n      @log.write(@curses)\n    end\n  end\n\n  def detect_build_dirs\n    [\"/usr/local\", \"/opt/local\", \"/usr/pkg\"].each do |dir|\n      add_opt_dir(dir)\n    end\n\n    @include_dirs = @include_dirs.select {|p| File.directory? p }\n    @lib_dirs = @lib_dirs.select {|p| File.directory? p }\n  end\n\n  def has_struct_member(struct, member, includes = [])\n    compile_check \"struct #{struct} has member #{member}\" do |src|\n      includes.each do |i|\n        src.puts \"#include <#{i}>\"\n      end\n\n      src.puts \"int main() { struct #{struct} st; st.#{member}; }\"\n    end\n  end\n\n  def has_global(name, includes=[])\n    compile_check \"global '#{name}'\" do |src|\n      includes.each do |i|\n        src.puts \"#include <#{i}>\"\n      end\n      src.puts \"int main() { #{name}; }\"\n    end\n  end\n\n  def has_header(name)\n    compile_check \"header '#{name}'\" do |src|\n      # Some headers have an implicit dependency on stdio.h. For example,\n      # readline/readline.h requires it but doesn't actually include it for\n      # you. Because there could be an infinite amount of headers that require\n      # stdio.h we'll just always include it.\n      src.puts \"#include <stdio.h>\"\n\n      src.puts \"#include <#{name}>\"\n      src.puts \"int main() {return 0;}\"\n    end\n  end\n\n  def has_function(name, includes=[], defines = [])\n    compile_check \"function '#{name}'\", defines do |src|\n      includes.each do |i|\n        src.puts \"#include <#{i}>\"\n      end\n      src.puts \"int main() { void* ptr = (void *) &#{name}; }\"\n    end\n  end\n\n  def has_library(name, function, libraries, includes=[])\n    @log.print \"Checking for library: #{name}: \"\n\n    args = libraries.map { |l| \"-l#{l}\" }\n\n    status = check_program(true, *args) do |src|\n      includes.each do |i|\n        src.puts \"#include <#{i}>\"\n      end\n      src.puts \"int main() { void* ptr = (void*)(&#{function}); return 0; }\"\n    end\n\n    success = status == 0\n    @log.write(success ? \"found!\" : \"not found!\")\n    success\n  end\n\n  def has_dtrace\n    @log.print \"Checking for dtrace: \"\n\n    begin\n      basename = \"rbx-configure-dtrace-test\"\n      source   = basename + \".d\"\n      output   = basename + \".h\"\n\n      File.open source, \"wb\" do |f|\n        f.write \"provider conftest{ probe m__entry(const char*); };\"\n      end\n\n      cmd = \"dtrace -h -o #{output} -s #{source}\"\n      @log.log cmd\n      system cmd\n\n      @dtrace = $?.exitstatus == 0\n      @dtrace_const = !!File.read(output).index(\"const\") if @dtrace\n\n      @log.write(@dtrace ? \"yes\" : \"no\")\n\n      @dtrace\n    ensure\n      File.delete(*Dir[\"#{basename}*\"])\n    end\n  end\n\n  def compile_check(logpart, defines = [], &block)\n    @log.print \"Checking for #{logpart}: \"\n\n    source = StringIO.new\n    yield source\n    file = Tempfile.new(\"rbx-test\")\n\n    source.rewind\n    string = source.read\n\n    file.puts string\n    file.close\n\n    @log.log string\n\n    cmd = \"#{@cxx} -S -o - -x c++ #{defines.join(\" \")} #{@user_cppflags} #{@user_incflags} #{@user_cxxflags} #{@user_cflags} #{@user_ldflags} #{@system_cppflags} #{@system_incflags} #{@system_cxxflags} #{@system_cflags} #{@system_ldflags} #{file.path} >>#{@log.path} 2>&1\"\n    @log.log cmd\n    system cmd\n\n    status = ($?.exitstatus == 0)\n    file.unlink\n\n    @log.write(status ? \"found!\" : \"not found\")\n    status\n  end\n\n  def enable_features\n    if @features[\"vendor-zlib\"].value\n      # Our vendored zlib uses long as the crc_table type\n      # If we update vendored zlib in the future, we have to\n      # review this and make sure we update it properly to\n      # match the newer version which like will have uint32_t\n      # as the type.\n      @include_dirs << \"#{@build_libdir}/zlib\"\n      @lib_dirs     << \"#{@build_libdir}/zlib\"\n    end\n\n    if @features[\"vendor-libsodium\"].value\n      @include_dirs << \"#{@build_libdir}/libsodium/src/libsodium/include\"\n      @lib_dirs     << \"#{@build_libdir}/libsodium/src/libsodium/.libs/\"\n    end\n  end\n\n  def detect_features\n    # Default on *BSD is no execinfo\n    if @bsd and @features[\"execinfo\"].configured.nil?\n      @features[\"execinfo\"].configured = false\n    end\n\n    if @features[\"execinfo\"].value and has_function(\"backtrace\", [\"execinfo.h\"])\n      @defines << \"HAS_EXECINFO\"\n    end\n\n    if @features[\"alloc-tracking\"].value\n      @defines << \"RBX_ALLOC_TRACKING\"\n    end\n\n    if @features[\"dtrace\"].value and has_dtrace\n      @defines << \"HAVE_DTRACE\"\n    end\n\n    # Default on Windows is vendor-zlib\n    if @windows and @features[\"vendor-zlib\"].configured.nil?\n      @features[\"vendor-zlib\"].configured = true\n    end\n\n    @defines << \"HAVE_SPT_REUSEARGV\" if @linux || @darwin || @bsd\n  end\n\n  def detect_functions\n    if has_function(\"clock_gettime\", [\"time.h\"])\n      @defines << \"HAVE_CLOCK_GETTIME\"\n    end\n\n    if has_function(\"nl_langinfo\", [\"langinfo.h\"])\n      @defines << \"HAVE_NL_LANGINFO\"\n    end\n\n    if has_function(\"setproctitle\", [\"sys/types.h\", \"unistd.h\"])\n      @defines << \"HAVE_SETPROCTITLE\"\n    end\n\n    if has_function(\"posix_fadvise\", [\"fcntl.h\"])\n      @defines << \"HAVE_POSIX_FADVISE\"\n    end\n\n    if has_function(\"strnlen\", [\"string.h\"])\n      @defines << \"HAVE_STRNLEN\"\n    end\n\n    if has_function(\"kqueue\", [\"sys/types.h\", \"sys/event.h\", \"sys/time.h\"])\n      @defines << \"HAVE_KQUEUE\"\n    end\n\n    if has_function(\"timerfd_create\", [\"sys/timerfd.h\"])\n      @defines << \"HAVE_TIMERFD\"\n    end\n\n    if has_function(\"inotify_init\", [\"sys/inotify.h\"])\n      @defines << \"HAVE_INOTIFY\"\n    end\n\n    if has_function(\"gettid\", [\"unistd.d\", \"sys/types.h\"])\n      @defines << \"HAVE_GETTID\"\n    end\n\n    if has_struct_member(\"stat\", \"st_atim\", [\"sys/stat.h\"])\n      @defines << \"HAVE_STRUCT_STAT_ST_ATIM\"\n    end\n\n    if has_struct_member(\"stat\", \"st_atimespec\", [\"sys/stat.h\"])\n      @defines << \"HAVE_STRUCT_STAT_ST_ATIMESPEC\"\n    end\n\n    if has_struct_member(\"stat\", \"st_atimensec\", [\"sys/stat.h\"])\n      @defines << \"HAVE_STRUCT_STAT_ST_ATIMENSEC\"\n    end\n\n    if has_struct_member(\"stat\", \"st_mtim\", [\"sys/stat.h\"])\n      @defines << \"HAVE_STRUCT_STAT_ST_MTIM\"\n    end\n\n    if has_struct_member(\"stat\", \"st_mtimespec\", [\"sys/stat.h\"])\n      @defines << \"HAVE_STRUCT_STAT_ST_MTIMESPEC\"\n    end\n\n    if has_struct_member(\"stat\", \"st_mtimensec\", [\"sys/stat.h\"])\n      @defines << \"HAVE_STRUCT_STAT_ST_MTIMENSEC\"\n    end\n\n    if has_struct_member(\"stat\", \"st_ctim\", [\"sys/stat.h\"])\n      @defines << \"HAVE_STRUCT_STAT_ST_CTIM\"\n    end\n\n    if has_struct_member(\"stat\", \"st_ctimespec\", [\"sys/stat.h\"])\n      @defines << \"HAVE_STRUCT_STAT_ST_CTIMESPEC\"\n    end\n\n    if has_struct_member(\"stat\", \"st_ctimensec\", [\"sys/stat.h\"])\n      @defines << \"HAVE_STRUCT_STAT_ST_CTIMENSEC\"\n    end\n\n    if has_struct_member(\"stat\", \"st_birthtimespec\", [\"sys/stat.h\"])\n      @defines << \"HAVE_ST_BIRTHTIME\"\n    end\n\n    # glibc has useless lchmod() so we don't try to use lchmod() on linux\n    if !@linux and has_function(\"lchmod\", [\"sys/stat.h\", \"unistd.h\"])\n      @have_lchmod = true\n    end\n\n    if has_function(\"lchown\", [\"sys/stat.h\", \"unistd.h\"])\n      @have_lchown = true\n    end\n\n    if has_function(\"mkfifo\", [\"sys/stat.h\", \"sys/types.h\"])\n      @have_mkfifo = true\n    end\n  end\n\n  def detect_structures\n    if has_struct_member(\"tm\", \"tm_gmtoff\", [\"time.h\"])\n      @defines << \"HAVE_TM_GMTOFF\"\n    end\n\n    if has_struct_member(\"tm\", \"tm_zone\", [\"time.h\"])\n      @defines << \"HAVE_TM_ZONE\"\n    end\n  end\n\n  def detect_globals\n    if has_global(\"timezone\", [\"time.h\"])\n      @defines << \"HAVE_TIMEZONE\"\n    end\n\n    if has_global(\"tzname\", [\"time.h\"])\n      @defines << \"HAVE_TZNAME\"\n    end\n\n    if has_global(\"daylight\", [\"time.h\"])\n      @defines << \"HAVE_DAYLIGHT\"\n    end\n  end\n\n  def detect_headers\n    unless @features[\"vendor-zlib\"].value\n      unless has_header(\"zlib.h\")\n        failure \"zlib.h is required\"\n      end\n    end\n\n    unless @features[\"vendor-libsodium\"].value\n      unless has_header(\"sodium.h\")\n        failure \"sodium.h is required\"\n      end\n    end\n\n    unless has_header(\"openssl/ssl.h\")\n      failure \"openssl/ssl.h is required\"\n    end\n\n    if has_header(\"alloca.h\")\n      @defines << \"HAVE_ALLOCA_H\"\n    end\n\n    if has_header(\"string.h\")\n      @defines << \"HAVE_STRING_H\"\n    end\n\n    if has_header(\"sys/time.h\")\n      @defines << \"HAVE_SYS_TIME_H\"\n    end\n\n    if has_header(\"sys/times.h\")\n      @defines << \"HAVE_SYS_TIMES_H\"\n    end\n\n    if has_header(\"sys/types.h\")\n      @defines << \"HAVE_SYS_TYPES_H\"\n    end\n\n    if has_header(\"unistd.h\")\n      @defines << \"HAVE_UNISTD_H\"\n    end\n\n    if has_header(\"stdarg.h\")\n      @defines << \"HAVE_STDARG_H\"\n    end\n\n    if has_header(\"sys/pstat.h\")\n      @defines << \"HAVE_SYS_PSTAT_H\"\n    end\n\n    if has_header(\"valgrind/valgrind.h\")\n      @defines << \"HAVE_VALGRIND_H\"\n    end\n  end\n\n  def strerror_r_returns_char_pointer\n    status = check_program(false) do |src|\n      src.puts \"#include <string.h>\"\n      src.puts \"int main() { char buf[1024]; static_cast<char*>(strerror_r(42, buf, 1024)); }\"\n    end\n    status == 0\n  end\n\n  def detect_strerror\n    @log.print \"Checking if function 'strerror_r' returns char*: \"\n    if strerror_r_returns_char_pointer\n      @defines << \"STRERROR_R_CHAR_P\"\n      @log.write \"yes\"\n    else\n      @log.write \"no\"\n    end\n  end\n\n  def detect_atomic\n    @log.print \"Checking -latomic: \"\n\n    saved_ldflags = @system_ldflags.dup\n    @system_ldflags << \" -latomic \"\n\n    begin\n      status = check_program() do |src|\n        src.puts <<-EOP\n#include <stdio.h>\n#include <atomic>\n\nint main(int argc, char* argv[]) {\n  std::atomic<int> i;\n  printf(\"%d\", (int)i);\n  return 0;\n}\n        EOP\n      end\n    rescue\n      status = nil\n    end\n\n    if status == 0\n      @log.write \"yes\"\n    else\n      @log.write \"no\"\n      @system_ldflags = saved_ldflags\n    end\n  end\n\n  def warn_prefix(dir)\n    delimiter = \"-------------------------%s-----------------------\"\n\n    if File.file? dir\n      @log.write delimiter % \" ERROR \"\n      @log.write \"The specified prefix '#{dir}' is a regular file.\"\n      @log.write \"Remove the file or specify a different prefix.\"\n      @log.write delimiter % \"-------\"\n      exit 1\n    elsif File.directory? dir\n      @log.write delimiter % \" WARNING \"\n      @log.write \"The specified prefix '#{dir}' already exists.\"\n      @log.write \"Installing Rubinius into an existing directory may\"\n      @log.write \"overwrite existing unrelated files or cause conflicts\"\n      @log.write \"between different versions of Rubinius files.\"\n      @log.write delimiter % \"---------\"\n      sleep 2\n    end\n  end\n\n  def process\n    set_system_commands\n\n    enable_features\n    detect_build_dirs\n\n    setup_llvm\n\n    @log.write \"\"\n\n    assert_sizeof\n\n    detect_sizeof(\"short\")\n    detect_sizeof(\"int\")\n    detect_sizeof(\"void*\")\n    detect_sizeof(\"intptr_t\")\n    detect_sizeof(\"uintptr_t\")\n    detect_sizeof(\"size_t\")\n    detect_sizeof(\"long\")\n    detect_sizeof(\"long long\")\n    detect_sizeof(\"float\")\n    detect_sizeof(\"double\")\n    detect_sizeof(\"off_t\", [\"unistd.h\"])\n    detect_sizeof(\"time_t\", [\"time.h\"])\n\n    detect_libc_name\n\n    detect_endian\n    detect_tr1\n    detect_tr1_hash\n    detect_x86\n    detect_aarch64\n    detect_features\n    detect_functions\n    detect_structures\n    detect_globals\n    detect_headers\n    detect_curses\n    detect_strerror\n    detect_atomic\n end\n\n  # Checks whether the given config file is a Perl script by checking its first\n  # line for a Perl hashbang.\n  def llvm_config_cmd(config)\n    begin\n      File.open(config, \"r\") do |f|\n        first_line = f.readline\n        if first_line =~ /^#! ?\\/usr(\\/local)?\\/bin\\/(env )?perl/\n          \"#{@perl} #{config}\"\n        else\n          config\n        end\n      end\n    rescue Errno::ENOENT, ArgumentError\n      # The file doesn't exist (ENOENT) or it's a binary file (ArgumentError).\n      config\n    end\n  end\n\n  def get_system_name\n    return unless @os =~ /linux/\n    return unless File.exist? \"/etc/issue\"\n\n    data = IO.readlines(\"/etc/issue\").first\n    data =~ /([^ ]+)[^\\d\\.]*([\\d\\.]*)/\n\n    name = $1.downcase\n    version = $2\n\n    if name == \"debian\" and File.exist? \"/etc/debian_version\"\n      version = IO.read(\"/etc/debian_version\").split.first.gsub(/\\W/, \"-\")\n    end\n\n    return \"#{name}-#{version}\"\n  end\n\n  def check_tool_version(tool_name, opts, version, regexp=/(?=\\d)(\\d+).(\\d+).?(\\d+)?/)\n    @log.print \"Checking #{tool_name}:\"\n\n    output = `#{tool_name} #{opts}`\n\n    if $?.exitstatus == 0\n      v = output.scan(regexp)[0].map { |x| x.to_i }\n      unless (v <=> version) >= 0\n        failure \" Expected #{tool_name} version >= #{version.join('.')}, found #{v.join('.')}\"\n      end\n      @log.write \" found\"\n    else\n      failure \"#{tool_name} not found.\"\n    end\n  end\n\n  def detect_libc_name\n    return if @libc\n\n    @log.print \"Checking for libc version: \"\n\n    case\n    when @windows\n      @libc = \"msvcrt.dll\"\n    when @darwin\n      @libc = \"libc.dylib\"\n    else\n      begin\n        exe = ENV[\"SHELL\"] || \"/bin/sh\"\n        ldd_output = `ldd #{exe}`\n\n        @libc = ldd_output[/libc\\.so\\.[0-9]+/]\n      rescue\n        # Don't abort if the command is not found\n      end\n\n      unless $?.success? and @libc\n        failure \"libc not found. Use the --libc configure option.\"\n      end\n    end\n\n    @log.write \"#{@libc} found!\"\n  end\n\n  def write_configure_files\n    @log.write \"\\nWriting configuration files...\"\n\n    @bin_links.delete @program_name\n\n    config_settings = {\n      :config_file        => @config,\n      :command_line       => @command_line,\n      :build_make         => @make,\n      :build_rake         => @rake,\n      :build_perl         => @perl,\n      :llvm_path          => @llvm_path,\n      :llvm_system_name   => @llvm_system_name,\n      :llvm_configure     => @llvm_configure,\n      :llvm_version       => @llvm_version,\n      :llvm_api_version   => @llvm_api_version,\n      :llvm_shared        => @llvm_shared,\n      :llvm_shared_objs   => @llvm_shared_objs,\n      :llvm_cxxflags      => @llvm_cxxflags,\n      :llvm_ldflags       => @llvm_ldflags,\n      :cc                 => @cc,\n      :cxx                => @cxx,\n      :make               => @make,\n      :rake               => @rake,\n      :tar                => @tar,\n      :bzip               => @bzip,\n      :perl               => @perl,\n      :gem                => @gem,\n      :ldshared           => @ldshared,\n      :ldsharedxx         => @ldsharedxx,\n      :gcc_major          => @gcc_major,\n      :user_cflags        => \"#{@user_cflags}\",\n      :user_cxxflags      => \"#{@user_cxxflags}\",\n      :user_cppflags      => \"#{@user_cppflags}\",\n      :user_incflags      => \"#{@user_incflags}\",\n      :user_ldflags       => \"#{@user_ldflags}\",\n      :system_cflags      => \"#{@system_cflags}\",\n      :system_cxxflags    => \"#{@system_cxxflags}\",\n      :system_cppflags    => \"#{@system_cppflags}\",\n      :system_incflags    => \"#{@system_incflags}\",\n      :system_ldflags     => \"#{@system_ldflags}\",\n      :include_dirs       => @include_dirs,\n      :lib_dirs           => @lib_dirs,\n      :defines            => @defines,\n      :curses             => @curses,\n      :host               => @host,\n      :cpu                => @cpu,\n      :vendor             => @vendor,\n      :os                 => @os,\n      :little_endian      => @little_endian,\n      :sizeof_short       => sizeof(\"short\"),\n      :sizeof_int         => sizeof(\"int\"),\n      :sizeof_void_ptr    => sizeof(\"void*\"),\n      :sizeof_intptr_t    => sizeof(\"intptr_t\"),\n      :sizeof_uintptr_t   => sizeof(\"uintptr_t\"),\n      :sizeof_size_t      => sizeof(\"size_t\"),\n      :sizeof_long        => sizeof(\"long\"),\n      :sizeof_long_long   => sizeof(\"long long\"),\n      :sizeof_float       => sizeof(\"float\"),\n      :sizeof_double      => sizeof(\"double\"),\n      :sizeof_off_t       => sizeof(\"off_t\"),\n      :sizeof_time_t      => sizeof(\"time_t\"),\n      :x86_64             => @x86_64,\n      :aarch64            => @aarch64,\n      :dtrace             => @dtrace,\n      :dtrace_const       => @dtrace_const,\n      :debug_build        => @debug_build,\n      :sourcedir          => @sourcedir,\n      :builddir           => @builddir,\n      :scriptdir          => @scriptdir,\n      :bootstrap_gems_dir => @bootstrap_gems_dir,\n      :capi_includedir    => @capi_includedir,\n      :build_libdir       => @build_libdir,\n      :build_exe          => \"#{@builddir}#{@bindir}/#{@program_name}\",\n      :build_bin          => @build_bin,\n      :prefixdir          => @prefixdir,\n      :bindir             => @bindir,\n      :libdir             => @libdir,\n      :encdir             => @encdir,\n      :runtimedir         => @runtimedir,\n      :codedbdir          => @codedbdir,\n      :codetoolsdir       => @codetoolsdir,\n      :stdlibdir          => @stdlibdir,\n      :coredir            => @coredir,\n      :sitedir            => @sitedir,\n      :archdir            => @archdir,\n      :vendordir          => @vendordir,\n      :includedir         => @includedir,\n      :mandir             => @mandir,\n      :gemsdir            => @gemsdir,\n      :gems_cache         => @gems_cache,\n      :gems_list          => @gems_list,\n      :gem_files          => @gem_files,\n      :installed_gems     => @installed_gems,\n      :program_name       => @program_name,\n      :bin_links          => @bin_links,\n      :use_bin_links      => @use_bin_links,\n      :rpath              => @features[\"rpath\"].value,\n      :windows            => @windows,\n      :darwin             => @darwin,\n      :bsd                => @bsd,\n      :linux              => @linux,\n      :vendor_zlib        => @features[\"vendor-zlib\"].value,\n      :vendor_libsodium   => @features[\"vendor-libsodium\"].value,\n      :vm_release_h       => @vm_release_h,\n      :ruby_version       => @ruby_version,\n      :ruby_libversion    => @ruby_libversion,\n    }\n\n    write_config_rb @config, config_settings\n\n    FileUtils.cp @config, \"#{@sourcedir}/core/build_config.rb\"\n\n    # Write the config file used to build the C++ VM.\n    Dir.mkdir \"machine/gen\" unless File.directory? \"machine/gen\"\n\n    vm_paths_h = \"machine/paths.h\"\n    File.open vm_paths_h, \"wb\" do |f|\n      f.puts <<-EOF\n#ifndef RBX_PATHS_H\n#define RBX_PATHS_H\n\n#define RBX_PREFIX_PATH      \"#{@prefixdir}\"\n#define RBX_BIN_PATH         \"#{@bindir}\"\n#define RBX_GEMS_PATH        \"#{@gemsdir}\"\n#define RBX_RUNTIME_PATH     \"#{@runtimedir}\"\n#define RBX_CODEDB_PATH      \"#{@codedbdir}\"\n#define RBX_KERNEL_PATH      \"#{@coredir}\"\n#define RBX_CORE_PATH        \"#{@coredir}\"\n#define RBX_LIB_PATH         \"#{@libdir}\"\n#define RBX_ENC_PATH         \"#{@encdir}\"\n#define RBX_HDR_PATH         \"#{@includedir}\"\n#define RBX_SITE_PATH        \"#{@sitedir}\"\n#define RBX_ARCH_PATH        \"#{@archdir}\"\n#define RBX_VENDOR_PATH      \"#{@vendordir}\"\n\n#endif\n      EOF\n    end\n\n    vm_config_h = \"machine/config.h\"\n    File.open vm_config_h, \"wb\" do |f|\n      f.puts <<-EOC\n#ifndef RBX_CONFIG\n#define RBX_CONFIG\n\n#define RBX_PROGRAM_NAME     \"#{@program_name}\"\n#define RBX_HOST             \"#{@host}\"\n#define RBX_CPU              \"#{@cpu}\"\n#define RBX_VENDOR           \"#{@vendor}\"\n#define RBX_OS               \"#{@os}\"\n#define RBX_RUBY_LIB_VERSION #{@ruby_libversion}\n#define RBX_LDSHARED         \"#{@ldshared}\"\n#define RBX_LDSHAREDXX       \"#{@ldsharedxx}\"\n#define RBX_SIZEOF_LONG      #{sizeof(\"long\")}\n#define RBX_LLVM_API_VER     #{@llvm_api_version}\n#define RBX_LIBC             \"#{@libc}\"\n#define RBX_HAVE_LCHMOD      #{@have_lchmod}\n#define RBX_HAVE_LCHOWN      #{@have_lchown}\n#define RBX_HAVE_MKFIFO      #{@have_mkfifo}\n#define RBX_DEBUG_BUILD      #{@debug_build.inspect}\n      EOC\n\n      if @llvm_version\n        f.puts \"#define RBX_LLVM_VERSION     #{@llvm_version.inspect}\"\n      end\n\n      if @little_endian\n        f.puts \"#define RBX_LITTLE_ENDIAN    1\"\n      end\n\n      if @tr1\n        f.puts \"#define RBX_HAVE_TR1         1\"\n      end\n\n      if @tr1_hash\n        f.puts \"#define RBX_HAVE_TR1_HASH    1\"\n      end\n\n      if @gc_stack_check\n        f.puts \"#define RBX_GC_STACK_CHECK   1\"\n      end\n\n      if @log_concurrent_update\n        f.puts \"#define RBX_LOG_CONCURRENT_UPDATE 1\"\n      end\n\n      if @raise_concurrent_update\n        f.puts \"#define RBX_RAISE_CONCURRENT_UPDATE 1\"\n      end\n\n      [:windows, :darwin, :bsd, :linux].each do |platform|\n        if instance_variable_get(:\"@#{platform}\")\n          f.puts \"#define RBX_#{platform.to_s.upcase}           1\"\n        end\n      end\n\n      f.puts \"#define RBX_DTRACE_CONST     #{@dtrace_const ? \"const\" : \"\"}\"\n\n      write_have_defines f\n\n      f.puts <<-EOC\n\n#include \"detection.hpp\"\n\n#define RBX_STRERROR_BUFSIZE 256\n\n// strerror_r has different signatures on GNU and XSI.\n// - The GNU version returns a pointer to a string, which may be the one passed\n//   to the function as 'buf', or some immutable static string, in which case\n//   'buf' is unused.\n// - The XSI version always stores the error message in 'buf' and returns 0 on\n//   success.\n// This macro makes sure that the error message is returned either way.\n#ifdef STRERROR_R_CHAR_P\n#define RBX_STRERROR(errno, buf, size) strerror_r(errno, buf, size)\n#else\n#define RBX_STRERROR(errno, buf, size) (strerror_r(errno, buf, size), buf)\n#endif\n\n// Enable this define for some minimal GC debugging\n// #define RBX_GC_DEBUG\n\n// Enable for GC stress. This only ensures that the interrupts\n// for a GC are set. Use RBX_GC_STRESS_YOUNG and / or RBX_GC_STRESS_MATURE\n// to run either the young or mature gen on each possibility\n// #define RBX_GC_STRESS\n\n// When stress testing is enabled, forces a young collection every time it\n// is possible. This can be useful to flush out bugs because of moving objects.\n// #define RBX_GC_STRESS_YOUNG\n\n// When stress testing is enabled, forces a mature collection every time it\n// is possible. This can be useful to flush out bugs with reachability etc.\n// #define RBX_GC_STRESS_MATURE\n\n#endif\n      EOC\n    end\n\n    # Write the config file for vendor/oniguruma.\n    File.open \"#{@build_libdir}/oniguruma/config.h\", \"wb\" do |f|\n      f.puts <<-EOC\n/* This file is generated by the Rubinius build system. Your edits\n * will be lost. See the configure script.\n */\n      EOC\n\n      write_have_defines f\n      write_have_sizeof_defines f\n      write_sizeof_defines f\n    end\n\n    # Write release header file.\n    write_release @vm_release_h\n\n    # Write the rubinius-specific C-API config headers.\n    vm_capi_header_gen = \"#{@capi_includedir}/gen\"\n    FileUtils.mkdir_p vm_capi_header_gen\n    FileUtils.cp vm_config_h, \"#{vm_capi_header_gen}/rbx_config.h\"\n    FileUtils.cp @vm_release_h, \"#{vm_capi_header_gen}/rbx_release.h\"\n\n    # Write the config file used in the C-API.\n    capi_config_h = \"#{@capi_includedir}/ruby/config.h\"\n    FileUtils.mkdir_p File.dirname(capi_config_h)\n    File.open capi_config_h, \"wb\" do |f|\n      f.puts <<-EOC\n/* This file is generated by the build system. Your edits\n * will be lost. See the configure script.\n */\n\n#ifndef NORETURN\n#define NORETURN(x) __attribute__ ((noreturn)) x\n#endif\n\n#ifndef UNREACHABLE\n#define UNREACHABLE __builtin_unreachable()\n#endif\n\n      EOC\n\n      write_have_defines f\n      write_have_sizeof_defines f\n      write_sizeof_defines f\n\n      if @windows\n        f.puts \"#define RBX_WINDOWS 1\"\n      end\n    end\n  end\n\n  def print_debug\n    puts \"\\nUsing the following configuration to build\"\n    puts \"------------------------------------------\"\n    cat(\"build/config/config.rb\")\n    puts \"\\nSetting the following defines for the VM\"\n    puts \"----------------------------------------\"\n    cat(\"machine/config.h\")\n  end\n\n  def cat(file)\n    puts IO.read(relative_file(file))\n  end\n\n  def relative_file(name)\n    File.expand_path(\"../#{name}\", __FILE__)\n  end\n\n  def check_force_clean\n    unless verify_build_signature\n      @log.write \"\\nDetected old configuration settings, forcing a clean build\"\n      system(\"#{build_ruby} -S #{@rake} clean\")\n    end\n  end\n\n  def fetch_gems\n    @log.write \"\\nFetching gems...\"\n    failed = false\n\n    Dir.chdir @gems_cache do\n      @gem_files.each do |gem|\n        next if File.exist? gem\n\n        failed = true unless download \"https://rubygems.org/gems/#{gem}\", \"./#{gem}\"\n      end\n    end\n\n    failure \"Unable to download required gems.\" if failed\n  end\n\n  def verify_gems\n    @log.write \"\\nVerifying gems...\"\n\n    failed = false\n\n    @gem_files.each do |gem_name|\n      unless File.file? \"#{@gems_cache}/#{gem_name}\"\n        @log.write \"unable to find gem #{gem_name}\"\n        failed = true\n      end\n    end\n\n    failure \"Unable to find required gems.\" if failed\n  end\n\n  def clean_gems(dir, gems)\n    unpacked = Dir[\"#{dir}/*\"]\n\n    # Remove unpacked gems not specified by these configure settings\n    unpacked.each do |dir|\n      d = File.basename dir\n      unless gems.find { |x| d =~ /^#{x}/ } and\n             @gem_files.find { |x| d =~ /^#{x[0..-5]}/ }\n        FileUtils.rm_rf dir\n      end\n    end\n  end\n\n  def unpack_gems(source, destination, list)\n    FileUtils.mkdir_p destination unless File.directory? destination\n\n    Dir.chdir destination do\n      list.each do |name|\n        gem_name = @gem_files.find { |x| x =~ /^#{name}/ }\n        failure \"Unable to find gem to unpack: #{name}\" unless gem_name\n\n        next if @installed_gems.include? gem_name\n\n        unless File.directory? gem_name[0..-5]\n          system(\"#{@gem} unpack #{source}/#{gem_name}\")\n\n          unless $?.exitstatus == 0\n            failure \"Unable to unpack bootstrap gems.\"\n          end\n        end\n      end\n    end\n  end\n\n  def setup_gems\n    @log.write \"\\nSetting up gems...\"\n\n    # Remove unpacked gems not specified by these configure settings\n    clean_gems @bootstrap_gems_dir, @gem_names\n\n    # Unpack gems not found for these configure settings\n    unpack_gems @gems_cache, @bootstrap_gems_dir, @gem_files\n  end\n\n  def setup_codedb\n    @log.write \"\\nSetting up CodeDB...\"\n\n    dir = \"#{@builddir}#{@codedbdir}\"\n    codedb_cache = \"#{dir}/cache\"\n\n    unless File.file? codedb_cache\n      url = \"https://rubinius-binaries-rubinius-com.s3.amazonaws.com/codedb/\"\n      cache = \"rubinius-codedb-cache\"\n      cache_bzip = \"#{cache}.bz2\"\n      cache_digest = \"#{cache_bzip}.sha512\"\n\n      unless File.file? cache_bzip\n        download \"#{url}#{cache_bzip}\", cache_bzip\n      end\n\n      unless File.file? cache_digest\n        download \"#{url}#{cache_digest}\", cache_digest\n      end\n\n      if Digest::SHA512.file(cache_bzip).hexdigest !=\n          File.read(cache_digest).strip.split(\" \").first\n        failure \"CodeDB cache SHA does not match\"\n      end\n    end\n  end\n\n  def setup_stdlib\n    @log.write \"\\nSetting up stdlib...\"\n\n    stdlib_cache = \"rubinius-stdlib-cache\"\n    cache_bzip = \"#{stdlib_cache}.bz2\"\n    cache_digest = \"#{cache_bzip}.sha512\"\n\n    unless File.file? cache_bzip\n      url = \"https://rubinius-binaries-rubinius-com.s3.amazonaws.com/stdlib/\"\n\n      unless File.file? cache_bzip\n        download \"#{url}#{cache_bzip}\", cache_bzip\n      end\n\n      unless File.file? cache_digest\n        download \"#{url}#{cache_digest}\", cache_digest\n      end\n\n      if Digest::SHA512.file(cache_bzip).hexdigest !=\n          File.read(cache_digest).strip.split(\" \").first\n        failure \"Stdlib cache SHA does not match\"\n      end\n    end\n  end\n\n  def setup_codetools\n    @log.write \"\\nSetting up codetools...\"\n\n    codetools_cache = \"rubinius-codetools-cache\"\n    cache_bzip = \"#{codetools_cache}.bz2\"\n    cache_digest = \"#{cache_bzip}.sha512\"\n\n    unless File.file? cache_bzip\n      url = \"https://rubinius-binaries-rubinius-com.s3.amazonaws.com/codetools/\"\n\n      unless File.file? cache_bzip\n        download \"#{url}#{cache_bzip}\", cache_bzip\n      end\n\n      unless File.file? cache_digest\n        download \"#{url}#{cache_digest}\", cache_digest\n      end\n\n      if Digest::SHA512.file(cache_bzip).hexdigest !=\n          File.read(cache_digest).strip.split(\" \").first\n        failure \"Codetools cache SHA does not match\"\n      end\n    end\n  end\n\n  # Create directories that don't have to be created by the end user\n  # themselves.\n  def create_directories\n    FileUtils.mkdir_p @gems_cache\n  end\n\n  def run\n    unless ENV[\"RBX_SUPRESS_DEPRECATION\"]\n      @log.deprecated \"\\n\\n'configure' is deprecated and will be removed in the future.\\n\" \\\n        \"Use 'build.sh' to configure, build, package, and install Rubinius.\\n\\n\\n\"\n    end\n\n    options\n    set_host\n    parse ARGV\n    detect_homebrew_openssl_lib\n    create_directories\n    check_tools\n    check_force_clean\n\n    set_filesystem_paths\n\n    process\n\n    unless sizeof(\"long\") == 8\n      failure \"Support for non-64bit platforms was deprecated 1 Jun 2016 and has now been removed. If non-64bit support is a critical feature for your application, please email contact@rubinius.com\"\n    end\n\n    if @release_build\n      verify_gems\n    else\n      fetch_gems\n    end\n    setup_gems\n    setup_codedb\n    setup_codetools\n    setup_stdlib\n    write_configure_files\n    write_build_signature\n\n    return if @release_config\n\n    print_debug if @verbose\n\n    if @llvm_source_build\n      files = prebuilt_files.map { |f| File.basename f, \".tar.bz2\" }.join(\"\\n  \")\n\n      @log.write <<-EOM\n\n------------------------------------------------------------------\nUnable to find an existing binary build of LLVM for your platform.\n\nPlease notify the Rubinius team at the #rubinius channel on\nirc.freenode.net and provide the following system information:\n\n  prebuilts:\n\n  #{files}\n------------------------------------------------------------------\n      EOM\n    end\n\n    unless @builddir\n      build_msg = <<-EOM\nRubinius (#{release_revision.last[0, 8]}) has been configured.\n\nRun 'rake' to build and test Rubinius.\n      EOM\n    else\n      build_msg = <<-EOM\nRubinius (#{release_revision.last[0, 8]}) has been configured for the following paths:\n\nprefix:     #{@prefixdir}\nbin:        #{@prefixdir}#{@bindir}\nlib:        #{@prefixdir}#{@libdir}\ninclude:    #{@prefixdir}#{@includedir}\ncodedb:     #{@prefixdir}#{@codedbdir}\nsite:       #{@prefixdir}#{@sitedir}\narch:       #{@prefixdir}#{@archdir}\nvendor:     #{@prefixdir}#{@vendordir}\nman:        #{@prefixdir}#{@mandir}\ngems:       #{@prefixdir}#{@gemsdir}\ngems cache: #{@gems_cache}\n\nRun 'rake' to build, test and install Rubinius.\n      EOM\n    end\n\n    links = (@bin_links + [@program_name]).uniq\n\n    @log.write <<-EOM\n------------------------------------------------------------------\n\n#{build_msg}\nAfter building, you may add\n\n'#{@prefixdir}#{@bindir}'\n\nto your PATH or run commands directly from that directory.\n\nAvailable commands are:\n\n  #{links.join(\", \")}\n\n------------------------------------------------------------------\n    EOM\n  end\n\n\n  # Configuration item that has both a default and a configured value\n  class ConfigurationToggle\n    attr_reader :default, :configured\n\n    def initialize(default_value)\n      @default = !!default_value\n      @configured = nil\n    end\n\n    def configured=(value)\n      @configured = !!value\n    end\n\n    def value\n      unless @configured.nil?\n        @configured\n      else\n        @default\n      end\n    end\n  end\n\n  # Handles user output and logging while running configure.\n  class Logger\n    attr_reader :path\n\n    # Creates an instance of Logger writing to +file+.\n    def initialize(file, init=true)\n      @path = File.expand_path(\"../#{file}\", __FILE__)\n      if init\n        File.open(@path, \"wb\") { }\n        log \"Configuring Rubinius...\"\n      end\n    end\n\n    # Copies the contents of +other+ into this logger's file.\n    def replace(other)\n      output do |f|\n        f.puts File.read(other)\n      end\n    end\n\n    # Writes +message+ to the logging file but not to the screen.\n    def log(message, error=false)\n      output do |f|\n        stamp = \"#{timestamp}#{'*** ERROR' if error}\"\n        if multiline?(message)\n          f.puts \"#{stamp} ---\"\n          f.puts message\n          f.puts \"---\"\n        else\n          f.puts \"#{stamp} #{message}\"\n        end\n      end\n    end\n\n    # Writes a normal message to STDOUT and logs to the file.\n    def write(message)\n      log message\n      STDOUT.puts message\n    end\n\n    # Writes a normal message to STDOUT with #print and logs to file.\n    def print(message)\n      log message\n      STDOUT.print message\n    end\n\n    # Writes an error message to STDERR and logs to the file with\n    # error decorations. This should only be used for errors that\n    # affect configure itself.\n    def error(message)\n      log message, true\n      STDERR.puts message\n    end\n\n    DEPRECATION_HEADER =\n      \"------------------------------ Deprecation notice ------------------------------\"\n    DEPRECATION_FOOTER =\n      \"--------------------------------------------------------------------------------\"\n\n    def deprecated(message)\n      log DEPRECATION_HEADER, true\n      log message, true\n      log DEPRECATION_FOOTER, true\n\n      STDERR.puts DEPRECATION_HEADER\n      STDERR.puts message\n      STDERR.puts DEPRECATION_FOOTER\n    end\n\n    # Yields an IO for writing log messages.\n    def output\n      File.open @path, \"a\" do |f|\n        yield f\n      end\n    end\n\n    # Returns a formatted times suitable for logging.\n    def timestamp\n      Time.now.strftime \"[%Y-%m-%d %H:%M:%S]\"\n    end\n\n    # Returns true if the message has more than one line.\n    def multiline?(message)\n      message.index(\"\\n\") != nil\n    end\n  end\n\n  # Returns true if the *port* command is in the PATH and identifies\n  # itself with \"MacPorts\" when run interactively.\n  def macports?\n    `echo quit | port 2>&-`.start_with? 'MacPorts'\n  end\n\n  # Query MacPorts for the path to the latest installed version of\n  # llvm-config that is within the range of supported LLVM versions.\n  def macports_llvm_config\n    supported_versions = (3.6..3.9)\n    installed_ports    = `port installed | egrep -o 'llvm-[^ ]+'`.split\n    latest_usable_port = installed_ports.sort.select do |fname|\n                           version = fname.match(/-\\K.*/)[0].to_f\n                           supported_versions.include? version\n                         end.last\n    avail_binaries     = `port contents #{latest_usable_port} |\n                          fgrep llvm-config`.split\n    avail_binaries.reject { |fname| fname.include? 'libexec' }.last\n  end\n\n  def brew(args)\n    `brew #{args}`.chomp\n  end\n\n  # Returns true if the *brew* command is in the PATH and identifies\n  # itself with \"Homebrew\" when run interactively with -v argument.\n  def homebrew?\n    brew(\"-v 2>&1\").start_with? 'Homebrew'\n  end\n\n  # Check if latest version of openssl is installed; if so, add to include\n  # and libs\n  def detect_homebrew_openssl_lib\n    if @darwin && homebrew? && (brew(\"list\").split(\"\\n\").include? \"openssl\")\n      prefix = brew(\"--prefix openssl\")\n\n      ENV[\"OPENSSL_DIR\"] = prefix unless ENV[\"OPENSSL_DIR\"]\n      add_opt_dir prefix\n    end\n  end\n\nend\n\nSTDOUT.sync = true\nConfigure.new(root).run\n"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "gems_list.txt",
          "type": "blob",
          "size": 0.10546875,
          "content": "bundler-1.16.1.gem\nminitest-5.11.1.gem\nracc-1.4.14.gem\nrake-12.3.0.gem\nrb-readline-0.5.5.gem\nrdoc-5.1.0.gem\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "machine",
          "type": "tree",
          "content": null
        },
        {
          "name": "mspec",
          "type": "tree",
          "content": null
        },
        {
          "name": "rakelib",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "security.pub",
          "type": "blob",
          "size": 3.7705078125,
          "content": "-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\n\nmQINBFFB9NsBEADSzwwDdn5+ax+vFoLF9wAfGh+Vj/0o7ZEq+yHI3LiXXeGKrBJA\nUcV3oYWSjM7ZPfpVK3xLs28vF2TTSrrQqawP8Ifsd6GJmSKCyCiWTOpcEsw2xejk\n3+gycXopI0Z0xxT73mPuR9RSRUtEK7h5Fz1LQZczgdETRWSD7pHl7e9rYqTZsiox\nWDjbPaZ+qJaqRRuUfjHbrrMZIs9BMEpLUPs0UM4SCXM4UzIXFTneir8CZ2B7BeBI\n8F/y+6PcAqJCgJ/tkZRwapnWVXtVAeQqbf6DKZ9vKe0e4ugeKXpaqt9uh7w201gr\nWzNMZ/4fn+NdFxpd3VdsnW+vOkttiQjeNmN02Cw04JgA3CMg4qoE2Xg/l2JzEzoI\nJspR25Wx0qlUC5EAB1wg4c2S+b0I9AUwxXOfyli0Vqq9y8uwhctLXynnu33eQP5r\nTvDNsjDEh96GXnR1VXcmKSU79ZWAh+yYQBKqMiWIe+MxV0VQmxey/9SECRa+tEW+\nwAytMkLLNp3Wh3G20db/yT5HcZd39NkgtdkyChLys5wJvZFQc1pdb6cGWNR8hHOP\nfu0GEnfEo/ZV9A4Y4Nwkk4mmZ/K7Y7isVXT5Fbxsf6gkErG9loajkzO2H2S3BJ5/\nmO9sZgeo9qVljLs1wjd1C/eGbcTlY/+clJdgqat++q3lREQFkLn7GdmsBwARAQAB\ntC5SdWJpbml1cyBTZWN1cml0eSBDb250YWN0IDxzZWN1cml0eUBydWJpbmkudXM+\niQI3BBMBCgAhBQJRQfTbAhsDBQsJCAcDBRUKCQgLBRYCAwEAAh4BAheAAAoJEA99\nL5U3+YgMAzYQALFoCJgqR4WIhBZ6GFx+1b4pF5C8ufJPHD4W66NPkvsHZwdHLaPa\nB+QnZmVAksLSbaaTgNi4Jfx0Rm7LPQGVtwqdWrz8/YtZTW3B6uYtPQvv8/Bawz5O\ncao3iiUcLjylYJRWy+GqUTbKg/M7oC0fvnRJqz5wB0po4JFEciXeQ2igo8MuYdpr\nUp3xAzGLEeHS574lOBmq/h0wu55ePFy+ubM8K8OcC+VjBFycU91ARrGS4oo1KFU6\nxlmc8WIkNqMH87ildK5hWibk2vzRGLkUt/3w8eHHCZzjHcFQmgRNXDcEIymIAF5Y\n+CTaz8NXRmc+B3tKhaYVzy+71Vo+qtqGitERsEksHUA4/YhVPtAQfG/7w1cb0+N0\nVNMq+f7lCAIDytkZ91Vezh/vWsof6PZTLxbsT2e4V0NzxQphkV2EEwEekrjfYGKO\noh2bQnk0VtPnwzt8/r/SVW6n6Gr2gThQ/Qyva6bP/ANN0hCMaQxXlA3S0s/dvoq7\nYlbZzUUbpD8IO7iwqaxlcnX7V8yINb97ai8MvtpMd8cVgIDwWPNgZeXm8SmWwqJN\n+A/amGiLm19qFhsH0v52Sk1taIVhSdOZbo1WxLwDu1UCFNhwENbMzfJqlrab+VCq\n1djpQw8hwpBFzKeg1dOieNn4otHiP5eG6fR4C/3bBp3RBQt5FB6fmvq4iQIcBBAB\nCgAGBQJRQfX0AAoJEPFXPY6DV1P9xLcQAIcDW8yANVc9iiQd/16beqRLdVHfWMex\n9P1orTn0yC8P0uMZbKCZL1RwFjZ6EZ21HkX8XskaS3Ndp2GDRjUSBcE7kicIMDbB\n6Jig4j0UiPlsr1UIiSP5NNNc2yTn/rDX4Hw5+FYVFGoBo7vRiRTAbwh7GPw98b1a\nl+mtOjfX8TDpzvJB+n+jzeyE6lttdu0WKgWGiu7KaSzsKi0SjHdjjUjKWAfO08Ks\nNlbswp7NW0Xt3p0iN55GypWf6vcFFNf+NGnXdP8W9Wa6hnc6EGKaTk+6/NpNEjA/\ndhrp+LpJBdyFTaLwj36Ie4nm+/yIBR6u/0qJJ5Nh9a5v1pZX2oWCqGBWtEwNhTXP\nb4e6yYC7sRNa6D+m1huuTY+7MizFuCTErZ3Hw2DcP+BfzsUDLyRucNWlMI4MgyBp\nEibkvjnQlVFoR6QUULrboAlWfsBUxVE2xqElvQlnf+UHK/fU+0gKJF+Q1vLaPzcJ\nTL4s6+dvegbtczovn29iNvGQnwULyrK9hJm+6Z9kQTj4QpfpMujitDpO7/DKiUcM\nvuwFoLt/c0xklHM1hcnXXINcVjfjW69q4UnCss7SSyzfCPNOO88SDo/G8Flulzvo\n1JgCmyglFeqzbyvq06u/qm1lIsY+aKnJZReTMlHPaOfGtKnvaJpMH3Fa1VGBO+dg\neLJQGs6pWrj3uQINBFFB9NsBEAC2/NhKGYs+WpyFmvpAX+CY46S7bIYesm0T5avL\n+n2m+eUjGjCxSVsOIWY6Q1AJrOMZCyZZG+bO2g8O3YdCapZRKAFYUi6I1wV2r6Yx\nLTvYeiuXLc6YGk8rcrH4f4gi+03UmfY8FleCXGHhiPscT1mvd6HgBpX/isDRf65D\njWzX+xijr+i5rS6i2TuhsA0ZvMe6/Btrzg87Uf15LuwxT2fMnxW7J/D5nLh+i6+l\npU4Sbj7rHe4rYXo8BFHH7SU6i/2mWrfB3T/2ipqyLzCgKqMXekEBlMD2oitwyyJr\n1lDftRWWRsl2VP+I14vFpSoftOJtPrEEw+ae4F+ZQOCabTnna2m1Duz3FUnGpM+M\nZPJi2JySxOF0IoU2E+l4YJvbu0S8N5qEAzUlc2/1OEl4MwNRbv6TsfhKeM1v0LFK\n2/+QdVoLSrwFqUNz8tRs8kZCRJd0KZ1pNU96p1TsxcV2t+KipETeCPMw4dZrzGT/\nX1nboTPklpTcqw40VIe4GI44FmPxkMEtEOkneTLaGBsYU/iFzb9DhUqpyTd7wi+x\nPqPe8g/kTmh+xRt+GZ7o8O9BGDAq4B6Fo/iAOt+nZxmqUl6NV+nOPR8LXvQcBgES\nQAEI0GcMnaCl12kzH6DOfUZOGJXPhbTPZBjnW/RfQFRBob1rIIHdsJsl8Ycw4EG9\nBRGsrQARAQABiQIfBBgBCgAJBQJRQfTbAhsMAAoJEA99L5U3+YgMa00P/1WXkDg9\neGfoH8/257oSraKP/cg0PMzNd6P9OfaJkUT96oJsyio/9YkGhDEJC1Zcd2eHGrSa\nAzxhFiYBOTyvGCEwhPt0aFWlbgiiYANBwSIhqD1cQ+gOhX9U4w9tjcxpH8uejSBQ\nidAs2+A1KDQ5s64RUhC8cfaksn7PnZMoSNHA1sidAg3fhDUw2UbczG3Scra6Gb5s\nby+jcBJGnnz2lx+zHMIvecSwKnH13nMbce0oYF+nllVk0BPgODy2UsR3jz/7GAnq\nES8IhoNEsMs2eOZRMt7Lvcr8p+bcLjYSI3Hx9O577pIRmd9o8Lo8oCPLs30siQy5\nAFL6Q0Let+ZtyPTE2loPU6drZdjX9VRniWhXUBSePJhOTGGXJSzYVtrWkyL67pCe\nC3STLbNMecGuRupyolI3Rhjn//AQtVRPYpxtQh+APY6o5SxWThzRJVy9cKgfKg8B\n2MAo9sc4ZAH33eFP+IvvOlcxOr6aJtcodf0c+hO5xirEDVBAQsHqa4cJZCodb+Xf\n5NMP6fk0Dm0aVXaR3sYStEpWgUOrYNy5qphAS5T72SKlbn8UTOo486eWuoViCfkg\nx/IdIbH74uLQ3fVqoFqzv6FxDMy73zvesiATQx3rPxrS6UwOAFuOeP1R2wtBQ0Qy\nMBGFqbZmq3Y3Un3eEc73VeG7BlMKzg8SzK9Q\n=ep4N\n-----END PGP PUBLIC KEY BLOCK-----\n"
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}