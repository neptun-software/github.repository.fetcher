{
  "metadata": {
    "timestamp": 1736710138822,
    "page": 792,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "siemens/jailhouse",
      "stars": 1778,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.548828125,
          "content": "# Build outputs - only!\n*.[oa]\n*.mod\n*.mod.[co]\n*.cell\n*.cmd\n*.bin\n*.gcno\n*.gcda\n.tmp_versions\n*.dtb\n*.dtb.S\n*.dtb.*.tmp\n*.8\n.cache.mk\nModule.symvers\nmodules.order\ndriver/jailhouse.ko\ninclude/jailhouse/config.h\nhypervisor/hypervisor.lds\ninmates/lib/arm/inmate.lds\ninmates/lib/arm64/inmate.lds\npyjailhouse/pci_defs.py\ntools/demos/cache-timings\ntools/demos/ivshmem-demo\ntools/jailhouse\ntools/jailhouse-gcov-extract\ntools/jailhouse-config-collect\nDocumentation/generated\nhypervisor/include/generated\nhypervisor/arch/*/include/generated\n*.s\nci/out\nci/*.tar.xz\n*.pyc\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.8720703125,
          "content": "Contributing to Jailhouse\n=========================\n\nContributions to Jailhouse are always welcome. This document explains the\ngeneral requirements on contributions and the recommended preparation steps. It\nalso sketches the typical integration process of patches.\n\n\nContribution Checklist\n----------------------\n\n- use git to manage your changes [*recommended*]\n\n- follow Documentation/coding-style.txt coding style [**required**]\n    - for python code run pep8 coding style checker [**required**]\n\n- add the required copyright header to each new file introduced, see\n  [licensing information](LICENSING.md) [**required**]\n\n- structure patches logically, in small steps [**required**]\n    - one separable functionality/fix/refactoring = one patch\n    - do not mix those three into a single patch (e.g. first refactor, then\n      add a new functionality that builds onto the refactoring)\n    - after each patch, the tree still has to build and work, i.e. do not add\n      even temporary breakages inside a patch series (helps when tracking down\n      bugs)\n    - use `git rebase -i` to restructure a patch series\n\n- base patches on top of latest master or - if there are dependencies - on next\n  (note: next is an integration branch that may change non-linearly)\n\n- test patches sufficiently (obvious, but...) [**required**]\n    - no regressions are caused in affected code\n    - seemingly unaffected architectures still build (use github actions e.g.)\n    - static code analyzer finds no new defects (register a github fork with\n      Coverity for free scanning) [*recommended*]\n    - python code shall be tested with python 3 [**required**]\n    - the world is still spinning\n\n- add signed-off to all patches [**required**]\n    - to certify the \"Developer's Certificate of Origin\", see below\n    - check with your employer when not working on your own!\n\n- add Fixes: to all bug-fix commits [*recommended*]\n    - the Fixes: tag format shall be:\n        Fixes: 12-byte-hash (\"subject of bug-introducing commit\")\n    - if you are unsure of the bug-introducing commit do *not* add a\n      Fixes: tag - no Fixes: tag is better than a wrong Fixes: tag.\n\n- post patches to mailing list [**required**]\n    - use `git format-patch/send-email` if possible\n    - send patches inline, do not append them\n    - no HTML emails!\n    - CC people who you think should look at the patches, e.g.\n      - affected maintainers (see areas of responsibility below)\n      - someone who wrote a change that is fixed or reverted by you now\n      - who commented on related changes in the recent past\n      - who otherwise has expertise and is interested in the topic\n    - pull requests on github are only optional\n\n- post follow-up version(s) if feedback requires this\n\n- send reminder if nothing happened after about a week\n\n\nDeveloper's Certificate of Origin 1.1\n-------------------------------------\n\nWhen signing-off a patch for this project like this\n\n    Signed-off-by: Random J Developer <random@developer.example.org>\n\nusing your real name (no pseudonyms or anonymous contributions), you declare the\nfollowing:\n\n    By making a contribution to this project, I certify that:\n\n        (a) The contribution was created in whole or in part by me and I\n            have the right to submit it under the open source license\n            indicated in the file; or\n\n        (b) The contribution is based upon previous work that, to the best\n            of my knowledge, is covered under an appropriate open source\n            license and I have the right under that license to submit that\n            work with modifications, whether created in whole or in part\n            by me, under the same open source license (unless I am\n            permitted to submit under a different license), as indicated\n            in the file; or\n\n        (c) The contribution was provided directly to me by some other\n            person who certified (a), (b) or (c) and I have not modified\n            it.\n\n        (d) I understand and agree that this project and the contribution\n            are public and that a record of the contribution (including all\n            personal information I submit with it, including my sign-off) is\n            maintained indefinitely and may be redistributed consistent with\n            this project or the open source license(s) involved.\n\nSee also https://www.kernel.org/doc/Documentation/process/submitting-patches.rst\n(Section 11, \"Sign your work\") for further background on this process which was\nadopted from the Linux kernel.\n\n\nContribution Integration Process\n--------------------------------\n\n1. patch reviews performed on mailing list\n    * at least by maintainers, but everyone is invited\n    * feedback has to consider design, functionality and style\n    * simpler and clearer code preferred, even if original code works fine\n\n2. accepted patches merged into next branch\n\n3. further testing done by community, including CI build tests and code\n   analyzer runs\n\n4. if no new problems or discussions showed up, acceptance into master\n    * grace period for master: about 3 days\n    * urgent fixes may be applied sooner\n\ngithub facilities are not used for the review process so that people can follow\nall changes and related discussions at a single stop, the mailing list. This\nmay change in the future if github should improve their email integration.\n\n\nAreas of responsibility\n-----------------------\n\nJailhouse is rather small. Nevertheless, there are different people involved in\ndifferent areas of its code. The following list shall give an overview on who\nis working in which area and should be involved when discussing changes:\n\nJan Kiszka <jan.kiszka@siemens.com>:\n - overall Jailhouse maintenance\n - committer to official repository\n\nValentine Sinitsyn <valentine.sinitsyn@gmail.com>:\n - AMD64 support\n\nHenning Schild <henning.schild@siemens.com>:\n - inter-cell communication\n - configuration file generator\n\nRalf Ramsauer <ralf.ramsauer@oth-regensburg.de>\n - uart infrastructure\n - inmate library\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.966796875,
          "content": "This copyright does not cover applications or operating systems that\nrun inside hypervisor cells, also if they use hypervisor services by\nnormal hypercalls. This is considered normal use of the hypervisor\nand is not a \"derived work\".\n\n---------------------------------------------------------------------\n\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 4.333984375,
          "content": "FREQUENTLY ASKED QUESTIONS\n==========================\n\nGeneral\n-------\n\n**Q: Linux already has KVM. Why do I need another hypervisor?**\n\nA: Short answer: in most cases, you don't. There are many hypervisors available\nin Linux: KVM, Xen, Oracle VM VirtualBox, to name a few. Most of them are\nfull-featured versatile solutions you can use in almost any case, including\nreal-time virtualization. However, specialized solution can optimize its size\nand complexity more aggressively, thus can do better when it comes to real-time\nand validation of its correct isolation.\n\nJailhouse is such a specialized hypervisor. It is all about static partitioning,\nand it doesn't provide many features you'd expect from a virtual machine. There\nis no overcommitting of resources, VM scheduling, or device emulation.\n\nInstead, Jailhouse focuses on two main things: being small and simple, and\nallowing guests (called \"inmates\") to execute with nearly-zero latencies. It is\nnot to substitute KVM on your desktop or server, it is to run real-time code,\nincluding bare-metal applications and RTOSes. Jailhouse also aims to provide a\nplatform for mixing critical applications in functional safety scenarios.\nIt can also fulfill secure isolation requirements, although this was not the\nfocus so far.\n\n**Q: Jailhouse is Asymmetric Multiprocessing (AMP). This means it will be slow due\nto CPU cache thrashing.**\n\nA: These concerns do have grounds. However, what is \"slow\" is determined by\nService Level Agreement (SLA), and we hope the effect will be negligible in the\nmajority of cases. Jailhouse faces the same problem here as cloud services do,\nand they are expected to be quite successful despite it. Future processors may\nintroduce QoS mechanisms for cache control, which will be helpful as well. One\nexample for such a feature is Intel's Cache Allocation Technology (CAT) which is\nannounced for new Xeon processors. Of course, running code under Jailhouse is\nslightly slower than on a dedicated uniprocessor machine, but virtualization\nalways comes at price.\n\n**Q: Fault tolerance: how can I prevent a buggy/misbehaving inmate from hanging\nthe root cell by never replying to a request?**\n\nA: If the cell does not need or should not be able to vote over system\nreconfigurations, you can simply set ```.flags = JAILHOUSE_CELL_PASSIVE_COMMREG```\nin the cell config.\nOtherwise, use the ```msg_reply_timeout``` field in the cell config to specify\nthe number of idle loops the root cell must wait for a reply before considering\nthe cell as failing.\n\n**Q: Which open-source OSs can be currently run in non-root cells?**\n\nA: The following open-source OSs have been currently ported to Jailhouse:\n* [Linux](Documentation/non-root-linux.txt)\n* [FreeRTOS](https://github.com/siemens/freertos-cell)\n* [ERIKA3 RTOS](http://www.erika-enterprise.com/wiki/index.php?title=ERIKA3_on_the_Jailhouse_hypervisor)\n* [Zephyr](https://www.zephyrproject.org)\n\n\nDebugging\n---------\n\n**Q: When I enable Jailhouse or run an inmate, my machine hangs. How do I know\nwhat's going on? Can I use dmesg, ftrace or similar tool?**\n\nA: No. Jailhouse runs at the level lower than the Linux kernel, and if something\ngoes wrong, there are no guarantees that Linux can continue executing. Instead,\nJailhouse provides its own logging mechanism. In nested QEMU setup (see\nREADME.md), log messages are simply sent to the virtual terminal; on real\nhardware, you'll need a serial cable. Connect it to the COM port on your\nmotherboard. Many modern motherboards come with no COM ports, but they usually\nhave a header you can attach the socket to. Servers often have serial console\navailable through IPMI.\n\nIf everything else fails, consider buying a PCI serial adapter. Now, attach\na Linux machine to the other side of serial connection and use terminal emulator\nlike minicom to grab the log messages.\n\nTo enable error tracing, put ```#define CONFIG_TRACE_ERROR``` in file\ninclude/jailhouse/config.h before compiling.\n\nPlease note Jailhouse developers may ask you for these logs, shall you come for\nhelp to jailhouse-dev mailing list, because they are extremely useful to analyze\nmachine hangs. So please have the logs at hand, if possible.\n\n\nDevelopment\n-----------\n\n**Q: How do I create automatic documentation of Jailhouse ?**\n\nRun ```make docs``` to create automatic documentation (it needs Doxygen\ninstalled). The documentation will be generated inside the\n```Documentation/generated/``` directory.\n"
        },
        {
          "name": "Kbuild",
          "type": "blob",
          "size": 2.0634765625,
          "content": "#\n# Jailhouse, a Linux-based partitioning hypervisor\n#\n# Copyright (c) Siemens AG, 2013-2017\n#\n# Authors:\n#  Jan Kiszka <jan.kiszka@siemens.com>\n#  Benjamin Block <bebl@mageta.org>\n#\n# This work is licensed under the terms of the GNU GPL, version 2.  See\n# the COPYING file in the top-level directory.\n#\n\nALWAYS_COMPAT_MK := $(src)/scripts/always-compat.mk\nexport ALWAYS_COMPAT_MK\n\nINC_CONFIG_H = $(src)/include/jailhouse/config.h\nexport INC_CONFIG_H\n\ndefine filechk_config_mk\n(\t\t\t\t\t\t\t\t\t\\\n\techo \"\\$$(foreach config,\\$$(filter CONFIG_%, \\$$(.VARIABLES)), \\\n\t\t\t  \\$$(eval undefine \\$$(config)))\";\t\t\\\n\tif [ -f $(INC_CONFIG_H) ]; then\t\\\n\t\tsed -e \"/^#define \\([^[:space:]]*\\)[[:space:]]*1/!d;\t\\\n\t\t        s/^#define \\([^[:space:]]*\\)[[:space:]]*1/\\1=y/\"\\\n\t\t    $(INC_CONFIG_H);\t\t\t\t\t\\\n\tfi\t\t\t\t\t\t\t\t\\\n)\nendef\n\nGEN_CONFIG_MK := $(obj)/hypervisor/include/generated/config.mk\nexport GEN_CONFIG_MK\n\n$(GEN_CONFIG_MK): $(src)/Makefile FORCE\n\t$(call filechk,config_mk)\n\ndefine filechk_version\n\t$(src)/scripts/gen_version_h $(src)/\nendef\n\nGEN_VERSION_H := $(obj)/hypervisor/include/generated/version.h\n\n$(GEN_VERSION_H): $(src)/Makefile FORCE\n\t$(call filechk,version)\n\nquiet_cmd_gen_pci_defs = GEN     $@\ndefine cmd_gen_pci_defs\n\t$(filter-out FORCE,$^) > $@\nendef\n\nGEN_PCI_DEFS_PY := $(obj)/pyjailhouse/pci_defs.py\n\n$(GEN_PCI_DEFS_PY): $(src)/scripts/gen_pci_defs.sh $(src)/include/jailhouse/pci_defs.h FORCE\n\t$(call if_changed,gen_pci_defs)\n\ntargets += pyjailhouse/pci_defs.py\n\nsubdir-y := hypervisor configs inmates tools\n\nobj-m := driver/\n\n# Do not generate files by creating dependencies if we are cleaning up\nifeq ($(filter %/Makefile.clean,$(MAKEFILE_LIST)),)\n\n$(obj)/driver $(addprefix $(obj)/,$(subdir-y)): $(GEN_CONFIG_MK)\n\n$(obj)/driver $(obj)/hypervisor: $(GEN_VERSION_H)\n\n$(obj)/tools: $(GEN_PCI_DEFS_PY)\n\nendif\n\nclean-files := pyjailhouse/*.pyc pyjailhouse/pci_defs.py\n\nCLEAN_DIRS := Documentation/generated hypervisor/include/generated \\\n\t      pyjailhouse/__pycache__\n\nifeq ($(shell test $(VERSION) -ge 5 && test $(PATCHLEVEL) -ge 4 && echo 1),1)\nclean-files += $(CLEAN_DIRS)\nelse\nclean-dirs += $(CLEAN_DIRS)\nendif\n"
        },
        {
          "name": "LICENSING.md",
          "type": "blob",
          "size": 3.474609375,
          "content": "Jailhouse Licensing\n===================\n\nThe Jailhouse hypervisor is primarily licensed under the terms of the GNU\nGeneral Public License version 2.\n\nEach of its source code files contains a license declaration in its header.\nWhenever a file is provided under an additional or different license than\nGPLv2, this is stated in the file header. Any file that may lack such a\nheader has to be considered licensed under GPLv2 (default license).\n\nThe binary font file hypervisor/arch/x86/altc-8x16 was taken from the KBD\nproject in version 2.0.4 (https://www.kernel.org/pub/linux/utils/kbd,\nhttp://kbd-project.org) which is distributed under the GNU GPL version 2 or\nlater (SPDX identifier GPL-2.0-or-later).\n\nIf two licenses are specified in a file header, you are free to pick the one\nthat suits best your particular use case. You can also continue to use the\nfile under the dual license. When choosing only one, remove the reference to\nthe other from the file header.\n\n\nLicense Usage\n-------------\n\nThe default license GPLv2 shall be used unless valid reasons are provided for a\ndeviation. Note the additional statement in GPLv2.txt about which code is not\nconsidered derivative work of Jailhouse before considering a different license.\n\nFor code that shall be licensed under more permissive terms, a dual-license\nmodel of GPLv2 together with the BSD 2-clause license is preferred. This form\ncan be applicable on\n\n  - interfaces to code that runs inside Jailhouse cells\n  - library-like code that applications or operating systems can include to\n    run in a Jailhouse cell\n  - generated configuration files\n\n\nLicense Header Format\n---------------------\n\nUse the following template (replacing comment markers as required) when\ncreating a new file in the Jailhouse project:\n\n```\n/*\n * Jailhouse, a Linux-based partitioning hypervisor\n *\n * Copyright (c) <COPYRIGHT HOLDER>, <YEAR>\n *\n * Authors:\n *  Your Name <your.email@host.dom>\n *\n * This work is licensed under the terms of the GNU GPL, version 2.  See\n * the COPYING file in the top-level directory.\n */\n```\n\nWhen applying a dual GPL/BSD license, append the following to the above:\n\n```\n ...\n *\n * Alternatively, you can use or redistribute this file under the following\n * BSD license:\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\n```\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.521484375,
          "content": "#\n# Jailhouse, a Linux-based partitioning hypervisor\n#\n# Copyright (c) Siemens AG, 2013, 2014\n#\n# Authors:\n#  Jan Kiszka <jan.kiszka@siemens.com>\n#\n# This work is licensed under the terms of the GNU GPL, version 2.  See\n# the COPYING file in the top-level directory.\n#\n\n# Check make version\nneed := 3.82\nifneq ($(need),$(firstword $(sort $(MAKE_VERSION) $(need))))\n$(error Too old make version $(MAKE_VERSION), at least $(need) required)\nendif\n\n# no recipes above this one (also no includes)\nall: modules\n\n# includes installation-related variables and definitions\ninclude scripts/include.mk\n\n# out-of-tree build for our kernel-module, firmware and inmates\nKDIR ?= /lib/modules/`uname -r`/build\n\nINSTALL_MOD_PATH ?= $(DESTDIR)\nexport INSTALL_MOD_PATH\n\nDOXYGEN ?= doxygen\n\nkbuild = -C $(KDIR) M=$$PWD $@\n\nifneq ($(DESTDIR),)\nPIP_ROOT = --root=$(shell readlink -f $(DESTDIR))\nendif\n\nmodules clean:\n\t$(Q)$(MAKE) $(kbuild)\n\n# documentation, build needs to be triggered explicitly\ndocs:\n\t$(DOXYGEN) Documentation/Doxyfile\n\nmodules_install: modules\n\t$(Q)$(MAKE) $(kbuild)\n\nfirmware_install: $(DESTDIR)$(firmwaredir) modules\n\t$(INSTALL_DATA) hypervisor/jailhouse*.bin $<\n\ntool_inmates_install: $(DESTDIR)$(libexecdir)/jailhouse\n\t$(INSTALL_DATA) inmates/tools/$(ARCH)/*.bin $<\n\ninstall: modules_install firmware_install tool_inmates_install\n\t$(Q)$(MAKE) -C tools $@ src=.\nifeq ($(strip $(PYTHON_PIP_USABLE)), yes)\n\t$(PIP) install --upgrade --force-reinstall $(PIP_ROOT) .\nendif\n\n.PHONY: modules_install install clean firmware_install modules tools docs \\\n\tdocs_clean\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.453125,
          "content": "JAILHOUSE\n=========\n\nIntroduction\n------------\n\nJailhouse is a partitioning Hypervisor based on Linux. It is able to run\nbare-metal applications or (adapted) operating systems besides Linux. For this\npurpose, it configures CPU and device virtualization features of the hardware\nplatform in a way that none of these domains, called \"cells\" here, can\ninterfere with each other in an unacceptable way.\n\nJailhouse is optimized for simplicity rather than feature richness. Unlike\nfull-featured Linux-based hypervisors like KVM or Xen, Jailhouse does not\nsupport overcommitment of resources like CPUs, RAM or devices. It performs no\nscheduling and only virtualizes those resources in software, that are essential\nfor a platform and cannot be partitioned in hardware.\n\nOnce Jailhouse is activated, it runs bare-metal, i.e. it takes full control\nover the hardware and needs no external support. However, in contrast to other\nbare-metal hypervisors, it is loaded and configured by a normal Linux system.\nIts management interface is based on Linux infrastructure. So you boot Linux\nfirst, then you enable Jailhouse and finally you split off parts of the\nsystem's resources and assign them to additional cells.\n\nCommunity Resources\n-------------------\n\nProject home:\n\n - https://github.com/siemens/jailhouse\n\nSource code:\n\n - https://github.com/siemens/jailhouse.git\n - git@github.com:siemens/jailhouse.git\n\nDemo and testing images:\n\n - https://github.com/siemens/jailhouse-images\n\nFrequently Asked Questions (FAQ):\n\n - See [FAQ file](FAQ.md)\n\nIRC channel:\n  - Freenode, irc.freenode.net, #jailhouse\n  - [![Webchat](https://img.shields.io/badge/irc-freenode-blue.svg \"IRC Freenode\")](https://webchat.freenode.net/?channels=jailhouse)\n\nMailing list:\n\n  - jailhouse-dev@googlegroups.com\n\n  - Subscription:\n    - jailhouse-dev+subscribe@googlegroups.com\n    - https://groups.google.com/forum/#!forum/jailhouse-dev/join\n\n  - Archives\n    - https://groups.google.com/forum/#!forum/jailhouse-dev\n    - https://www.mail-archive.com/jailhouse-dev@googlegroups.com\n\nContinuous integration:\n\n  - https://github.com/siemens/jailhouse/actions\n\n  - Status:\n    - ![](https://github.com/siemens/jailhouse/actions/workflows/main.yaml/badge.svg?branch=master) on master\n    - ![](https://github.com/siemens/jailhouse/actions/workflows/main.yaml/badge.svg?branch=next) on next\n\nStatic code analysis:\n\n  - https://scan.coverity.com/projects/siemens-jailhouse\n\n  - Status:\n    - ![](https://scan.coverity.com/projects/siemens-jailhouse/badge.svg) on coverity_scan\n\nSee the [contribution documentation](CONTRIBUTING.md) for details\non how to write Jailhouse patches and propose them for upstream integration.\n\n\nHardware requirements (preliminary)\n-----------------------------------\n\n#### x86 architecture:\n\n  - Intel system:\n\n    - support for 64-bit and VMX, more precisely\n      - EPT (extended page tables)\n      - unrestricted guest mode\n      - preemption timer\n\n    - Intel IOMMU (VT-d) with interrupt remapping support\n      (except when running inside QEMU)\n\n  - or AMD system:\n\n    - support for 64-bit and SVM (AMD-V), and also\n      - NPT (nested page tables); required\n      - Decode Assists; recommended\n\n    - AMD IOMMU (AMD-Vi) is unsupported now but will be required in future\n\n  - At least 2 logical CPUs\n\n#### ARM architecture:\n\n  - ARMv7 with virtualization extensions or ARMv8\n\n  - At least 2 logical CPUs\n\n  - Supported ARM boards:\n\n    - Banana Pi ([see more](Documentation/setup-on-banana-pi-arm-board.md))\n\n    - Orange Pi Zero (256 MB version)\n\n    - NVIDIA Jetson TK1\n\n    - ARM Versatile Express with Cortex-A15 or A7 cores\n      (includes ARM Fast Model)\n\n    - emtrion emCON-RZ/G1x series based on Renesas RZ/G ([see more](Documentation/setup-on-emtrion-emcon-rz-boards.md))\n\n  - Supported ARM64 boards:\n\n    - AMD Seattle / SoftIron Overdrive 3000\n\n    - LeMaker HiKey\n\n    - NVIDIA Jetson TX1 and TX2\n\n    - Xilinx ZCU102 (ZynqMP evaluation board)\n\n    - NXP MCIMX8M-EVK\n\n\nSoftware requirements\n---------------------\n\n#### x86 architecture:\n\n  - x86-64 Linux kernel (tested against 3.14+)\n\n    - VT-d IOMMU usage (DMAR) has to be disabled in the Linux kernel, e.g. via\n      the command line parameter:\n\n          intel_iommu=off\n\n    - To exploit the faster x2APIC, interrupt remapping needs to be on in the\n      kernel (check for CONFIG_IRQ_REMAP)\n\n  - The hypervisor requires a contiguous piece of RAM for itself and each\n    additional cell. This currently has to be pre-allocated during boot-up.\n    On x86 this is typically done by adding\n\n        memmap=82M$0x3a000000\n\n    as parameter to the command line of the virtual machine's kernel. Note that\n    if you plan to put this parameter in GRUB2 variables in /etc/default/grub,\n    then you will need three escape characters before the dollar\n    (e.g. ```GRUB_CMDLINE_LINUX_DEFAULT=\"memmap=82M\\\\\\$0x3a000000\"```).\n\n#### ARM architecture:\n\n  - Linux kernel:\n    - 3.19+ for ARM\n    - 4.7+ for ARM64\n\n  - Appropriate boot loader support (typically U-Boot)\n     - Linux is started in HYP mode\n     - PSCI support for CPU offlining\n\n  - The hypervisor requires a contiguous piece of RAM for itself and each\n    additional cell. This currently has to be pre-allocated during boot-up.\n    On ARM this can be obtained by reducing the amount of memory seen by the\n    kernel (through the `mem=` kernel boot parameter) or by modifying the\n    Device Tree (i.e. the `reserved-memory` node).\n\n\nBuild & Installation\n--------------------\n\nSimply run `make`, optionally specifying the target kernel directory:\n\n    make [KDIR=/path/to/kernel/objects]\n\n\n#### Installation\n\nIt is recommended to install all of Jailhouse on your target machine. That will\ntake care of a kernel module, the firmware, tools etc. Just call\n\n    make install\n\nfrom the top-level directory.\n\nThe traditional Linux cross-compilation (i.e. `ARCH=` and `CROSS_COMPILE=`) and\ninstallation (i.e. `DESTDIR=`) flags are supported as well.\n\n#### Running without Installation\n\nExcept for the hypervisor image `jailhouse*.bin`, that has to be available in\nthe firmware search path, you can run Jailhouse from the build directory.\nIf you cannot or do not want to use `make install`, you can either install just\nthe firmware using `make firmware_install` or customize the firmware search\npath:\n\n    echo -n /path/to/jailhouse/hypervisor/ \\\n        > /sys/module/firmware_class/parameters/path\n\n\nConfiguration\n-------------\n\nJailhouse requires one configuration file for the complete system and one for\neach additional cell besides the primary Linux. These .cell files have to be\npassed to the jailhouse command line tool for enabling the hypervisor or\ncreating new cells.\n\nOn x86, the required hardware capabilities can be validated by running\n\n    jailhouse hardware check\n\nA system configuration can be created on an x86 target system by running the\nfollowing command:\n\n    jailhouse config create sysconfig.c\n\nIn order to translate this into the required binary form, place this file in\nthe configs/x86/ directory. The build system will pick up every .c file from\nthere and generate a corresponding .cell file.\n\nCurrently, there is no config generator for the ARM architecture; therefore the\nconfig file must be manually written by starting from the reference examples\nand checking hardware-specific datasheets, DTS and /proc entries.\n\nDepending on the target system, the C structures may require some adjustments to\nmake Jailhouse work properly or to reduce the desired access rights of the Linux\nroot cell.\n\nConfigurations for additional (non-root) cells currently require manual\ncreation. To study the structures, use one of the demo cell configurations files\nas reference, e.g. configs/x86/apic-demo.c or configs/x86/e1000-demo.c.\n\n\nx86 Demonstration in QEMU/KVM\n-----------------------------\n\n**NOTE**: You can also build and execute the following demo steps with the\nhelp of the jailhouse-images side project at\nhttps://github.com/siemens/jailhouse-images.\n\nThe included system configuration qemu-x86.c can be used to run Jailhouse in\nQEMU/KVM virtual machine on x86 hosts (Intel and AMD are supported). Currently\nit requires Linux 4.4 or newer on the host side. QEMU version 2.8 or newer is\nrequired.\n\nYou also need a Linux guest image with a recent kernel (tested with >= 3.9) and\nthe ability to build a module for this kernel. Further steps depend on the type\nof CPU you have on your system.\n\nFor Intel CPUs: Make sure the kvm-intel module was loaded with nested=1 to\nenable nested VMX support. Start the virtual machine as follows:\n\n    qemu-system-x86_64 -machine q35,kernel_irqchip=split -m 1G -enable-kvm \\\n        -smp 4 -device intel-iommu,intremap=on,x-buggy-eim=on \\\n        -cpu host,-kvm-pv-eoi,-kvm-pv-ipi,-kvm-asyncpf,-kvm-steal-time,-kvmclock \\\n        -drive file=LinuxInstallation.img,format=raw|qcow2|...,id=disk,if=none \\\n        -device ide-hd,drive=disk -serial stdio -serial vc \\\n        -netdev user,id=net -device e1000e,addr=2.0,netdev=net \\\n        -device intel-hda,addr=1b.0 -device hda-duplex -device pcie-pci-bridge\n\nFor AMD CPUs: Make sure the kvm-amd module was loaded with nested=1 to enable\nnested SVM support. Start the virtual machine as follows:\n\n    qemu-system-x86_64 -machine q35 -m 1G -enable-kvm -smp 4 \\\n        -cpu host,-kvm-pv-eoi,-kvm-pv-ipi,-kvm-asyncpf,-kvm-steal-time,-kvmclock \\\n        -drive file=LinuxInstallation.img,format=raw|qcow2|...,id=disk,if=none \\\n        -device ide-hd,drive=disk -serial stdio -serial vc \\\n        -netdev user,id=net -device e1000e,addr=2.0,netdev=net \\\n        -device intel-hda,addr=1b.0 -device hda-duplex -device pcie-pci-bridge\n\nInside the VM, make sure that `jailhouse-*.bin`, generated by the build process,\nare available for firmware loading (typically /lib/firmware), see above for\ninstallation steps.\n\nThe Jailhouse QEMU cell config will block use of the serial port by the guest\nOS, so make sure that the guest kernel command line does NOT have its console\nset to log to the serial port (ie remove any 'console=ttyS0' arguments from the\ngrub config). Reboot the guest and load jailhouse.ko. Then enable Jailhouse\nlike this:\n\n    jailhouse enable /path/to/qemu-x86.cell\n\nNext you can create a cell with a demonstration application as follows:\n\n    jailhouse cell create /path/to/apic-demo.cell\n    jailhouse cell load apic-demo /path/to/apic-demo.bin\n    jailhouse cell start apic-demo\n\napic-demo.bin is left by the built process in the inmates/demos/x86 directory.\nThis application will program the APIC timer interrupt to fire at 10 Hz,\nmeasuring the jitter against the PM timer and displaying the result on the\nconsole. Given that this demonstration runs in a virtual machine, obviously\nno decent latencies should be expected.\n\nAfter creation, cells are addressed via the command line tool by providing\ntheir names or their runtime-assigned IDs. You can obtain information about\nactive cells this way:\n\n    jailhouse cell list\n\nCell destruction is performed by specifying the configuration file of the\ndesired cell. This command will destroy the apic-demo:\n\n    jailhouse cell destroy apic-demo\n\nNote that the first destruction or shutdown request on the apic-demo cell will\nfail. The reason is that this cell contains logic to demonstrate an ordered\nshutdown as well as the ability of a cell to reject shutdown requests.\n\nThe apic-demo cell has another special property for demonstration purposes: As\nlong as it is running, no cell reconfigurations can be performed - the\napic-demo locks the hypervisor in this regard. In order to destroy another cell\nor create an additional one, shut down the apic-demo first.\n\n    jailhouse cell shutdown apic-demo  # call again if error is returned\n\nTo demonstrate the execution of a second, non-Linux cell, issue the following\ncommands:\n\n    jailhouse cell create /path/to/pci-demo.cell\n    jailhouse cell load pci-demo /path/to/pci-demo.bin \\\n        -s \"con-base=0x2f8\" -a 0x1000\n    jailhouse cell start pci-demo\n\nThe pci-demo will use the second serial port provided by QEMU. You will find\nits output in a virtual console of the QEMU window. The purpose of this demo is\nto show basic PCI device configuration and MSI handling.\n\nWhile cell configurations are locked, it is still possible, though, to reload\nthe content of existing cell (provided they accept their shutdown first). To\nreload and restart the tiny-demo, issue the following commands:\n\n    jailhouse cell start apic-demo\n    jailhouse cell load pci-demo /path/to/pci-demo.bin \\\n        -s \"con-base=0x2f8\" -a 0x1000\n    jailhouse cell start pci-demo\n\nFinally, Jailhouse is can be stopped completely again:\n\n    jailhouse disable  # call again on error due to running apic-demo\n\nAll non-Linux cells running at that point will be destroyed, and resources\nwill be returned to Linux.\n\n\nARM64 Demonstration in QEMU\n---------------------------\n\nSimilarly like x86, Jailhouse can be tried out in a completely emulated ARM64\n(aarch64) environment under QEMU. QEMU version 3.0 or later is required.\n\nStart the QEMU machine like this:\n\n    qemu-system-aarch64 -cpu cortex-a57 -smp 16 -m 1G \\\n        -machine virt,gic-version=3,virtualization=on,its=off -nographic \\\n        -netdev user,id=net -device virtio-net-device,netdev=net \\\n        -drive file=LinuxInstallation.img,format=raw|qcow2|...,id=disk,if=none \\\n        -device virtio-blk-device,drive=disk \\\n        -kernel /path/to/kernel-image -append \"root=/dev/vda1 mem=768M\"\n\nJailhouse can be started after loading its kernel module. Run:\n\n    jailhouse enable /path/to/qemu-arm64.cell\n\nThe corresponding test to apic-demo on x86 is the gic-demo:\n\n    jailhouse cell create /path/to/qemu-arm64-inmate-demo.cell\n    jailhouse cell load inmate-demo /path/to/gic-demo.bin\n    jailhouse cell start inmate-demo\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 3.326171875,
          "content": "Things to be addressed, at some point, or at least before releasing version 1.0\n(tagged with [v1.0]). Otherwise unsorted, unprioritized, likely incomplete.\n\nx86 support\n  - AMD interrupt remapping support\n  - power management [v1.0]\n    - block\n    - allow per cell (managing inter-core/inter-cell impacts)\n  - NMI control/status port - moderation or emulation required? [v1.0]\n  - whitelist-based MSR access [v1.0]\n  - CAT enhancements\n    - add support for CDP (code/data L3 partitioning)\n    - add support for L2 partitioning (-> Apollo Lake), including accurate\n      modeling of the partitioning scope (affected CPUs)\n  - Enable first-level only paging for VT-d\n    - share page table with EPT\n    - deprecate support for legacy format (second-level only)?\n\nARM support\n  - v7 (32-bit)\n    - analyze cp15 system control registers access, trap critical ones\n  - v8 (64-bit)\n    - check if we need arch_inject_dabt\n    - analyze system control registers access, specifically regarding cache\n      maintenance and side effects on neighboring cores\n  - common (v7 and v8)\n    - System MMU v2 support\n    - re-evaluate IRQ priorities for GIC emulation and possibly add support\n    - properly reset interrupts on cell reset or reassignment\n\nConfiguration\n - review of format, rework of textual representation\n - refactor config generator\n    - better internal structure, also to prepare non-x86 support\n - enhance config generator\n    - confine the created root cell config to the essentially required\n      resources (e.g. PCI BARs)\n    - generate non-root cell configs\n    - add knowledge base about resource access rules that need manual review or\n      configurations that are known to be problematic (e.g. INTx sharing\n      between cells)\n\nSetup validation\n  - check integrity of configurations\n  - check integrity of runtime environment (hypervisor core & page_pool,\n    probably just excluding volatile Linux-related state variables)\n    - pure software solution (without security requirements)\n    - Intel TXT support? [WIP: master thesis]\n    - secure boot?\n  - check for execution inside hypervisor, allow only when enabled in config\n  - clear memory regions before reassignment to prevent information leaks?\n\nInter-cell communication\n  - finalize and specify shared memory device [v1.0]\n    - 3 types of regions (r/w both, r/w local, r/o local)\n    - unprivileged MMIO register region (UIO-suitable)\n    - fast-path for checking remote state (vmexit-free)\n    - clarify: \"ivshmem 2.0\" or own device (with own IDs)\n  - specify virtual Ethernet protocol [v1.0]\n  - specify and implements virtual console protocol\n  - upstream Linux drivers\n\nTesting\n  - unit tests\n  - system tests, also in QEMU/KVM, maybe using Lava + Fuego\n\nInmates\n  - reusable runtime environment for cell inmates\n    - skeleton in separate directory\n    - inter-cell communication library\n  - port free small-footprint RTOS to Jailhouse bare-metal environment\n    - RTEMS upstream support\n    - Zephyr?\n  - upstream Linux support\n    - discuss remaining patches\n\nHardware error handling\n  - MCE processing + managed forwarding [v1.0]\n  - PCI AER\n  - APEI\n  - Thermal\n  - ...\n\nMonitoring\n  - report error-triggering devices behind IOMMUs via sysfs\n  - cell software watchdog via comm region messages\n    -> time out pending comm region messages and kill failing cells\n       (includes timeouts of unanswered shutdown requests)\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "v0.12\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "driver",
          "type": "tree",
          "content": null
        },
        {
          "name": "hypervisor",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "inmates",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyjailhouse",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.7060546875,
          "content": "#\n# pyjailhouse, a python interface for the Jailhouse hypervisor\n#\n# Copyright (c) Christopher Goldsworthy, 2018\n#\n# This script is used to create project metadata when installing pyjailhouse\n# using pip.\n#\n# This work is licensed under the terms of the GNU GPL, version 2.  See\n# the COPYING file in the top-level directory.\n#\n\nfrom setuptools import setup, find_packages\n\nwith open(\"VERSION\") as version_file:\n    version = version_file.read().lstrip(\"v\")\n\nsetup(name=\"pyjailhouse\", version=version,\n      description=\"A Python interface for the Jailhouse Hypervisor\",\n      license=\"GPLv2\", url=\"https://github.com/siemens/jailhouse\",\n      author_email=\"jailhouse-dev@googlegroups.com\",\n      packages=find_packages())\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}