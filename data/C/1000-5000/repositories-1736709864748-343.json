{
  "metadata": {
    "timestamp": 1736709864748,
    "page": 343,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "srdja/Collections-C",
      "stars": 2855,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5576171875,
          "content": "build\nsrc/docconf\n.project\n.cproject\nDebug\nm4\nhtml\nlatex\n.settings\nconfig\nconfig.bak\n*~\n*.o\nsrc/.libs\nsrc/.deps\nconfigure\ndepcomp\n*.lo\nMakefile\naclocal.m4\nautom4te.cache/\ncompile\nconfig.guess\nconfig.h\nconfig.log\nconfig.status\nconfig.sub\nlibtool\nmissing\nsrc/Makefile\nsrc/libcollectc.la\nstamp-h1\nltmain.sh\ntest/*.Po\ntest/*.log\ntest/*.trs\ntest/.deps/*\nsrc/.*\ntest-driver\n.DS_Store\n.vscode\n.vs\n\ntest/treetable_test\n\ntest/treeset_test\n\ntest/stack_test\n\ntest/slist_test\n\ntest/queue_test\n\ntest/list_test\n\ntest/hashtable_test\n\ntest/hashset_test\n\ntest/array_test\n\ntest/deque_test\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3271484375,
          "content": "language: c\ndist: focal\nsudo: required\n\ncompiler:\n  - gcc\n  - clang\n\nbefore_install:\n  - sudo apt-get install -y cmake && sudo apt-get install -y cpputest && sudo apt-get install -y gcc && sudo apt-get install -y libcpputest-dev && sudo apt-get install -y clang\n\nscript:\n  - mkdir build && cd build\n  - cmake ..\n  - make\n  - make test\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.2275390625,
          "content": "Srđan Panić\nIgor Zakharov\nKyle Sweeney\nFábio Maia\nAnkur Huralikoppi\nRadu Brumariu\nxfilesee\nJoël Jungo\nAdam Canady\nVenkata Krishna Sundararajan\nNimit Bhardwaj\nStephen Feinstein\nRoger Kahn\nBuzz Bissinger\nGeorge Plimpton\nDan Gutman\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.390625,
          "content": "cmake_minimum_required(VERSION 3.15)\n\nset(CMAKE_DISABLE_IN_SOURCE_BUILD ON)\n\nenable_language(C)\n\nif(UNIX)\n    set(CFLAGS \"-Wall\")\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\t${CFLAGS}\")\nelseif(MSVC)\n    set(CFLAGS \"/W3\")\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\t${CFLAGS}\")\nendif()\n\n\nenable_testing()\n\nadd_subdirectory(src)\nadd_subdirectory(test/unit)\nadd_subdirectory(test/benchmark)\nadd_subdirectory(examples)"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 0.3955078125,
          "content": "﻿{\n  \"configurations\": [\n    {\n      \"name\": \"x64-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-DSHARED=False\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\"\n    }\n  ]\n}"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.142578125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at srdja.panic@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.9091796875,
          "content": "\n# Contributing\n\nTo get started, fork the repository to your account and then clone your fork to your local machine:\n```bash\ngit clone https://github.com/yourusername/Collections-C.git\n```\nYou can now start working on the project, but before you do, here are some general guidelines that will make contributing a lot easier:\n\n* if you wish to work on some major new feature, it's usually a good idea to open an issue first, so that it can be discussed\n* when writing code, follow the code [K&R code fomatting style](https://en.wikipedia.org/wiki/Indent_style#K.26R_style) using 4 space indentation. In general, make sure that the code you write is formatted in the same way that everything else is formatted.\n* if you are writing some new code that is not covered by the tests, try to write tests for it too\n* before committing your changes make sure that the project builds correctly and that the tests are passing\n\nAfter you're done working on your changes, commit your work and push it to your fork.\n\nYou can then open a [pull request](https://help.github.com/articles/using-pull-requests/) from your fork to the upstream repository. After the pull request is made, we will comment / review it and might also suggest some changes. After all that is done, the pull request is merged.\n\n## Synchronizing your fork with the upstream\nYou might have forked the repository a while ago, and in the meantime some changes were added to the upstream repository. Now if you want to send a Pull Request you might run into merge issues. To solve this issue make sure you have your fork synchronized with the upstream repository before you make any changes.\n\nTo synchronize your fork, you first need to clone it if you don't already have a local copy:\n```bash\ngit clone https://github.com/yourusername/Collections-C.git\n```\nthen add the upstream repository as a remote:\n```bash\ngit remote add upstream https://github.com/srdja/Collections-C.git\n```\nfinally pull from the upstream into your local master branch\n```bash\ngit pull upstream master\n```\nIn case you have already done some work you might want to `fetch` instead of `pull`\n```bash\ngit fetch upstream\n```\nand once you sort out your current work, merge it into you master branch\n```bash\ngit merge upstream/master\n```\n\n## Finding something to work on\nThere is always something to work on, be it fixing bugs, writing documentation or adding cool new features. You can start by looking through the [issues](https://github.com/srdja/Collections-C/issues) to find something interesting.\nIf you have a cool new idea, or you've found a bug and there is no issue for it, go ahead and open a [new issue](https://github.com/srdja/Collections-C/issues/new) for it.\n\nIf you're just starting out, look for issues with a [low-hanging fruit](https://github.com/srdja/Collections-C/issues?q=is%3Aissue+is%3Aopen+label%3A%22low-hanging+fruit%22) tag. These issues should be fairly easy to fix, and they are also a good starting point for contributing.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 7.4521484375,
          "content": "GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.4091796875,
          "content": "Collections-C\n=============\n\nCollections-C is a library of generic data structures for the C language.\n\n[![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](http://www.gnu.org/licenses/lgpl-3.0)\n\n- [Features](#features)\n- [Building and Installing](#building-and-installation)\n- [Using the library](#using-collections-c-in-your-programs)\n- [Contributing](#contributing)\n\n# Features\n\n- [Pointer Containers](#pointer-containers)\n- [Sized Containers](#sized-containers)\n- [Memory Pools](#memory-pools)\n\n## Pointer Containers\nStructures that store data in the form of `void*`.\n\n| Container | description |\n|-----------|-------------|\n| `CC_Array`     | A dynamic array that expands automatically as elements are added. |\n| `CC_List`    | Doubly Linked list. |\n| `CC_SList` | Singly linked list. |\n| `CC_Deque` |\tA dynamic array that supports amortized constant time insertion and removal at both ends and constant time access. |\n| `CC_HashTable` | An unordered key-value map. Supports best case amortized constant time insertion, removal, and lookup of values. |\n| `CC_TreeTable` | An ordered key-value map. Supports logarithmic time insertion, removal and lookup of values. |\n| `CC_HashSet` | An unordered set. The lookup, deletion, and insertion are performed in amortized constant time and in the worst case in amortized linear time. |\n| `CC_TreeSet` | An ordered set. The lookup, deletion, and insertion are performed in logarithmic time. |\n| `CC_Queue`  | A FIFO (first in first out) structure. Supports constant time insertion, removal and lookup. |\n| `CC_Stack` | A LIFO (last in first out) structure. Supports constant time insertion, removal and lookup. |\n| `CC_PQueue` | A priority queue. |\n| `CC_RingBuffer` | A ring buffer. |\n| `CC_TSTTable`| A ternary search tree table. Supports insertion, search, iteration, and deletion. |\n\n### Example\n```c\nint value = 20;\nCC_Array *array;\n\nif (cc_array_new(&array) != CC_OK) { /*Create a new array.*/\n    // handle error\n}\nif (cc_array_add(&array, (void*) &value) != CC_OK) { /* Add the pointer to the value to the array */\n    // handle error\n}\n```\n\n\n## Sized Containers\nStructures that store data of arbitrary length directly. \n\n| Container\t| description |\n|-----------| ----------- |\n| `CC_ArraySized` | A dynamic array that expands automatically as elements are added. |\n\n### Example\n\n```c\nint value = 20;\nCC_SizedArray *array;\n\nif (cc_sized_array_new(sizeof(int), &array) != CC_OK) { /* Create a new array that stores values the size of an int*/\n    // handle error\n}\nif (cc_sized_array_add(&array, &value) != CC_OK) { /* Copy the value into the array */\n    // handle error\n}\n```\n\n## Memory Pools\n\nMemory pools are pre-allocated blocks of contiguous memory \n\n| Container | description |\n|-----------| ----------- |\n| `CC_DynamicPool` | On the heap, potentially expandable memory pool |\n| `CC_StaticPool`  | Fixed pool  |\n\n### Example\n\n```c\n/* CC_StaticPool can enable the use of the structures on the stack */\n\n#include \"memory/cc_static_pool.h\"\n#include \"cc_list.h\"\n\nCC_StaticPool *pool;\n\n// Alloc wrappers\nvoid *pool_malloc(size_t size)               {cc_static_pool_malloc(size, pool);}\nvoid *pool_calloc(size_t count, size_t size) {cc_static_pool_calloc(count, size, pool);}\nvoid  pool_free(void* ptr)                   {cc_static_pool_free(ptr, pool);}\n\nint main(int argc, char **argv) {\n    uint8_t buffer[2000];            /* Large enough buffer. */\n    cc_static_pool_new(sizeof(buffer), 0, buffer, buffer, &pool); /* allocate the pool structure inside the buffer */\n\n    CC_ListConf conf;                /* Create a new list config */\n    cc_list_conf_init(&conf);        \n    conf.mem_alloc  = pool_malloc;   /* Set list memory allocators to pool allocators */\n    conf.mem_calloc = pool_calloc;\n    conf.mem_free   = pool_free;\n\n    CC_List* list;\n    cc_list_new_conf(&conf, &list);  /* The newly created list will be allocated inside the \"buffer\" array*/\n\n    // Use the list\n\n    return 0;\n}\n```\n# Building and Installation\n\n## Dependencies \n### Linux\n\n- C compiler (gcc or clang)\n- cmake (>= 3.5)\n- pkg-config\n\nThese packages can usually be installed through your distributions package manager.\n\n### Windows\n\n* [Visual Studio](https://visualstudio.microsoft.com) (recommended) ***or*** [MinGW](http://mingw.org)\n* [cmake](https://cmake.org/download/)\n\n\n## Building the project\n### Linux\n\nTo build the project, we first need to create a separate build directory (if it doesn't already exist):\n\n```\nmkdir build\n```\n\nFrom this directory we can run the `cmake` command and configure the build:\n\n* `cmake ..` or `cmake -DSHARED=True` to make Collections-C build as a shared library\n* `cmake -DSHARED=False` to build a static library\n\nOnce `cmake` is done generating makefiles, we can build the library by running `make` inside our build directory.\n\nAn example of cloning and building a static library:\n```\ngit clone https://github.com/Collections-C.git\ncd Collections-C\nmkdir build\ncd build\ncmake -DSHARED=False\nmake\n```\n\n## Running tests\n\nTo run tests (from the `build` directory):\n\n```\nmake test\n```\n\nTo run individual tests, simply run the appropriate executable. For example:\n```\nbuild/test/array_test\n```\n### Installing\n\nTo install the library run:\n```\nsudo make install\n```\nBy default the libraries and headers will be installed in `/usr/local/lib/` and `/usr/local/include` directories.\n\nYou have to make the system's runtime aware of the location of the new library to be able to run dynamically linked applications. This might be as simple as running the following command if your `/etc/ld.so.conf` contains the install directory.\n\n**Note: macOS doesn't support ldconfig.**\n```\nsudo ldconfig\n```\n\n## Using Collections-C in your programs\n\n### A simple program\nIf we already built and installed the library, we can write a simple hello world program and save it to a file named `hello.c`:\n\n```c\n#include <stdio.h>\n#include <collectc/cc_array.h>\n\nint main(int argc, char **argv) {\n    // Create a new array\n    CC_Array *ar;\n    cc_array_new(&ar);\n\n    // Add a string to the array\n    cc_array_add(ar, \"Hello World!\\n\");\n\n    // Retreive the string and print it\n    char *str;\n    cc_array_get_at(ar, 0, (void*) &str);\n    printf(\"%s\", str);\n\n    return 0;\n}\n```\n\nNow we need to compile and link our program. Since `make` builds both the static and the dynamic library we can choose which one we wish to link into our program.\n\n### Linking statically\n\nIf we wish to statically link the library to our program we can pass the `-static` flag to the compiler\n\n**Note:** On macOS, the **`-static`** flag is not very friendly (it requires that all the libraries are statically linked). So we can replace **`-static -lcollectc`** with the full path to the static library. Which is **`/usr/local/lib/libcollectc.a`** by default.\n\n```\ngcc hello.c -static -lcollectc -o hello\n```\n\n\nor similarly when compiling with clang:\n```\nclang hello.c -static -lcollectc -o hello\n```\n\nThis will link the library by copying it into the executable. We can use this option if we **don't** wish to have Collections-C as a **runtime dependency**, however this comes at the expense of generating a larger executable.\n\n### Linking dynamically\n\nWe can also choose to link with the library dynamically at runtime. This is the default behaviour if omit the `-static` compiler flag:\n\n```\ngcc hello.c -lcollectc -o hello\n```\n\nor with clang:\n\n```\nclang hello.c -lcollectc -o hello\n```\n\nLinking dynamically produces a smaller executable, but requires `libcollectc.so` to be present on every system on which the program is going to be executed.\n\n### Linking problems\n\nSometimes the compiler may have trouble finding the library or the headers. This is usually because it's looking for them in the wrong directory, which may happen if the library or the headers or both are installed in a non-standard directory or not installed at all.\n\nIf this is the case, we can explicitly tell the compiler where to look for them by passing the `-I[path to headers]` and `-L[path to libraries]` options:\n\n```\ngcc hello.c `pkg-config --cflags --libs collectionc` -o hello\n```\n\n### Running the program\n\nIf everything went well with the compilation we can run the executable:\n\n```\n./hello\n```\n\nand it should print `Hello, World!` to the console.\n\n## Contributing\n\nContributions are welcome.\n\nIf you have a feature request, or have found a bug, feel free to open a [new issue](https://github.com/srdja/Collections-C/issues/new). If you wish to contribute code, see [CONTRIBUTING.md](https://github.com/srdja/Collections-C/blob/master/CONTRIBUTING.md) for more details.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}