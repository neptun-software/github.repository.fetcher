{
  "metadata": {
    "timestamp": 1736709931751,
    "page": 458,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MayaPosch/NymphCast",
      "stars": 2452,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.6357421875,
          "content": "# Configuration file for EditorConfig, see https://EditorConfig.org\n\n# Ignore any other files further up in the file system\nroot = true\n\n# All files:\n[*]\n# Let git determine line ending: end_of_line = lf\ncharset = utf-8\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n# Markdown files: keep trailing space-pair as line-break\n[*.md]\ntrim_trailing_whitespace = false\n\n# Shell scripts:\n[*.sh]\n\n# INI configuration files:\n[*.ini]\n\n# Makefiles: Tab indentation (no size specified)\n[Makefile]\nindent_style = tab\n\n# C, C++, AngelScript source files: Tab indentation (shown as 4 positions)\n[*.{h,hpp,c,cpp,as}]\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.298828125,
          "content": "# Git line endings\n\n# Automatically normalize line endings:\n* text=auto\n\n# Always use LF for bash scripts to enable access via Windows file share:\n*.sh text eol=lf\n\n# Mark as binary (when required):\n#*.xxx binary\n\n# Exclude files from exporting:\n.gitattributes  export-ignore\n.gitignore      export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2666015625,
          "content": "vlc/\n*.exe\nbuild/\n*.user\n*.log\nobj/\nobj-*/\nbin/\n*.o\nbuild-*/\nlinux-build/\nlib/\nlib-*/\nsrc/server/wallpapers/*.jpg\nsrc/server/wallpapers/*.png\nsrc/server/wallpapers/*.jpeg\n*.class\n*.txt\nCMakeLists.txt\n*.out.*\n*.iml\n.gradle\nlocal.properties\n*.dll\n*.so\n.idea/\nrelease/\n*.bak\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4619140625,
          "content": "Copyright (c) 2019, Maya Posch\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the <organization> nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.193359375,
          "content": "[Repository Structure](#id-rs) &middot; [Getting Started](#id-gs) &middot; [Multi-Room Playback](#id-mrp) &middot; [Building From Source](#id-bfs) &middot; [Developer's Guide](#id-dg) &middot; [SDK](#id-sdk) &middot; [License](#id-lic) &middot; [Donate](#id-donate)\r\n\r\n# What is NymphCast? #\r\n\r\nNymphCast is a software solution which turns your choice of hardware into an audio and video source for a television or (powered) speakers. It enables the streaming of audio and video over the network from a client device or media server, as well as the streaming of internet media to a NymphCast server, controlled by a client device, or directly on the receiver.\r\n\r\nIn addition, the server supports NymphCast apps (currently in preview status) written in AngelScript to extend the overall NymphCast functionality with e.g. 3rd party audio / video streaming protocol support on the server side, and customisable UIs in the client application.\r\n\r\nNymphCast requires the use of a client device in all but the GUI ('Smart TV') mode. The server application (receiver) runs on a target device, while the client device functions as a remote control device:\r\n\r\n![NymphCast diagram](doc/nymphcast_layout.png)\r\n\r\nClient-side core functionality is provided through the NymphCast library.\r\n\r\n## NymphCast Audio demo ##\r\n\r\nThe [following video](https://youtu.be/bc4qn4thHrc) demonstrates NymphCast (v0.1-RC1) in an audio setup with a Raspberry Pi 2B, USB WiFi dongle, Generic 2.1 speaker set and an Android phone.\r\n\r\n[![](media/20220111-NymphCast-Audio-Demonstration-(v0.1-RC1).png)](https://youtu.be/bc4qn4thHrc)\r\n\r\n## Usage Scenarios ##\r\n\r\nNymphCast can be used in a number of scenarios:\r\n\r\n- **NymphCast Audio** :arrow_right: Audio-only receiver mode.\r\n\t+ Profile: `nymphcast_audio_config.ini`\r\n\t+ [Setup guide](doc/nymphcast_audio_setup_guide.md)\r\n- **NymphCast Video** :arrow_right: Audio & Video receiver mode.\r\n\t+ Profile: `nymphcast_video_config.ini`\r\n\t+ [Setup guide](doc/nymphcast_video_setup_guide.md)\r\n- **NymphCast ScreenSaver** :arrow_right: Like NymphCast Video, but with image-based ScreenSaver when not playing content.\r\n\t+ Profile: `nymphcast_screensaver_config.ini`\r\n\t+ [Setup guide](doc/nymphcast_screensaver_setup_guide.md)\r\n- **NymphCast GUI** :arrow_right: Like NymphCast Video, but with stand-alone GUI mode (smart TV) enabled. (experimental feature)\r\n\t+ Profile: `nymphcast_gui_config.ini`\r\n\t+ [Setup guide](doc/nymphcast_gui_setup_guide.md)\r\n\t\r\n\r\n\r\n## Network ports ##\r\n\r\n**Note:** NymphCast Server uses UDP port 4004 for discovery, and TCP port 4004 for playback.\r\n\r\nAll of these ports have to be reachable on a system running NymphCast Server.\r\n\r\nSystems running the [NymphCast MediaServer](https://github.com/MayaPosch/NymphCast-MediaServer) also need to have UDP & TCP ports 4005 reachable.\r\n\r\nPlease ensure that these ports are whitelisted in e.g. firewall rules if applicable.\r\n\r\n\r\n## Features & Status ##\r\n\r\nThe currently stable version is v0.1, with v0.2 in development. The following list contains the major features that are in these versions, along with status notes.\r\n\r\nCategory | Status | Description | Notes\r\n---|----|---|---\r\nFile Streaming |100% | Streaming media files from client to server | -\r\nSubtitles & streams | 75% | Subtitle & stream selection support | Supports embedded bitmap (e.g. PGS) subtitles. Text & external subtitles will be added in v0.2.\r\nMulti-cast | 85% | Synchronised multi-room playback | Experimental in v0.1, partially tested in v0.1-alpha0.\r\nMediaServer | 100% | Streaming from NymphCast MediaServer instances | -\r\nURL Streaming | 100% | Streaming from URLs | -\r\nCodec support | 100% | Audio & Video codec support | Supports all codecs supported by ffmpeg.\r\n\r\n\r\n**Experimental features:**\r\n\r\nThe following features are considered **experimental** and may become a stable feature in an upcoming release.\r\n\r\nCategory | Status | Description | Notes\r\n---|----|---|---\r\nSmartTV | 75% | Stand-alone GUI mode | EmulationStation-based GUI has been integrated. Customisation and testing are in progress.\r\nApps | 25% | NymphCast Apps | AngelScript-based apps. Implemented as CLI-based interface as well as an HTML-based GUI implementation.\r\nLocal media | 25% | Playback of local media | Basic implementation exists in v0.2-alpha0, configured via INI file.\r\n\r\n\r\n## NymphCast Ecosystem ##\r\n\r\n\r\nThe NymphCast project consists out of multiple components:\r\n\r\nComponent | Purpose | Status\r\n---|---|---\r\nNymphCast Server | Receiver end-point for clients. Connected to the display, speakers, etc.. | v0.1\r\n[LibNymphCast](https://github.com/MayaPosch/libnymphcast) | Library for developing NymphCast clients with. | v0.1\r\nNymphCast Client | CLI-based NymphCast client. | v0.1\r\nNymphCast Player | Graphical, Qt-based NymphCast client. SDK reference implementation. | v0.1\r\n[NymphCast MediaServer](https://github.com/MayaPosch/NymphCast-MediaServer) | Server application for making media content available to NymphCast clients. | v0.1\r\n\r\n### **NymphCast Player Client** ###\r\n\r\nThe NymphCast Player provides NymphCast client functionality in a graphical (Qt-based) format. It is also a demonstration platform for the NymphCast SDK (see details on the SDK later in this document). It is designed to run on any OS that is supported by the Qt framework.\r\n\r\nThe player has been successfully compiled and used on the following platforms:\r\n\r\n* Windows (7, 10)\r\n* Linux (x86, ARM: Arch, Debian)\r\n* Android (8+)\r\n* FreeBSD (14.1)\r\n* Haiku (R1 Beta 5)\r\n\r\n\r\n### **Server Platforms** ###\r\n\r\nThe server should work on any platform that is supported by a C++17 toolchain and the LibPoco & ffmpeg (libAV) dependencies. This includes Windows, MacOS, Linux and BSD.\r\n\r\nFFmpeg and SDL2 libraries are used for audio and video playback. Both of which are supported on a wide variety of platforms, with Linux, MacOS and Windows being the primary platforms. **System requirements** also depend on whether only audio or also video playback is required. The latter can be disabled, which drops any graphical output requirement.\r\n\r\n**Memory requirements** depend on the NymphCast Server configuration: by default the ffmpeg library uses an internal 32 kB buffer, and the server itself a 20 MB buffer. The latter can be configured using the (required) configuration INI file, allowing it to be tweaked to fit the use case.\r\n\r\n**Tested platforms:**\r\n\r\nVideo-capable* | Platform |  OS | Notes\r\n---|---|---|--\r\nYes |x86_64 | Windows | Using MinGW or MSVC to compile.\r\nYes | x86_64 | Linux | Stock install of Manjaro, Raspbian and Debian/Mint.\r\nYes | x86_64 | FreeBSD | Both FreeBSD 14.1-RELEASE and GhostBSD, compiled with clang++.\r\nYes | x86_64 | Haiku | Existing bug in Haiku SDL (issue #6400) prevents full server functionality.\r\nYes | Raspberry Pi 4 | Raspbian | Tested up to 1080p at 24 FPS (h.264). Note limited support for hardware-acceleration and currently no HEVC support.\r\n\\- | Raspberry Pi 0/2/3 | Raspbian | Ffmpeg hardware accelerated video decoding appears not functional.\r\n\\- | Odroid-C2 | Armbian, Ubuntu Mate | No hardware accelerated video decoding present with ffmpeg.\r\n\\- | Banana Pro | Armbian | No hardware accelerated video decoding present with ffmpeg.\r\n\r\n\\* The `Video-capable` column indicates whether the platform in the indicated configuration is capable of both audio & video playback (`Yes`), or just audio (`-`). Video output relies on hardware-accelerated video decoding support on the target platform.\r\n\r\n\r\n### **Client Platforms** ###\r\n\r\nFor the Qt-based NymphCast Player, a target platform needs to support LibPoco and have a C++ compiler which supports C++17 (&lt;filesystem&gt; header supported) or better, along with Qt5 support. Essentially, this means any mainstream desktop OS including Linux, Windows, BSD and MacOS should qualify, along with mobile platforms. Currently Android is also supported via Qt's mobile support, with iOS support planned.\r\n\r\nFor the CLI-based NymphCast Client, only LibPoco and and C++17 support are required. All clients require the use of libnymphcast (see SDK section) as dependency.\r\n\r\nNote that all mobile platforms are a work in progress due to the limitations and peculiarities of these platforms.\r\n\r\n<a id=\"id-gs\"></a>\r\n## Getting Started ##\r\n\r\nTo start using NymphCast, you need a device on which the server will be running (most likely an SBC or other Linux system). NymphCast is offered as binaries for selected distros, and as source code for use and development on a variety of platforms.\r\n\r\n### **Releases** ###\r\n\r\nNymphCast releases are available on Github (see the ['Releases'](https://github.com/MayaPosch/NymphCast/releases) folder).\r\n\r\nSome packages also exist for selected platforms.\r\n\r\nFor **FreeBSD** and similar:\r\n\r\n- The server: [nymphcast](https://www.freshports.org/multimedia/nymphcast/).\r\n\t- Install package with `pkg install NymphCast`.\r\n\r\n\r\nFor **Alpine Linux** and PostmarketOS:\r\n\r\n* the server: [nymphcast](https://pkgs.alpinelinux.org/package/edge/community/x86_64/nymphcast)\r\n* libnymphcast: [libnymphcast](https://pkgs.alpinelinux.org/packages?name=libnymphcast&branch=edge)\r\n* the player client: [nymphcast-client](https://pkgs.alpinelinux.org/package/edge/testing/x86_64/nymphcast-client)\r\n\r\nPlayer client releases for **Android** and **Windows**:\r\n* NymphCast Player on [the Google Play Store](https://play.google.com/store/apps/details?id=com.nyanko.nymphcastplayer).\r\n* APK for installation on Android, see ['Releases'](https://github.com/MayaPosch/NymphCast/releases) \r\n* desktop client for Windows (x64), see ['Releases'](https://github.com/MayaPosch/NymphCast/releases)   \r\n\r\nIf pre-compiled releases for your target device or operating system are currently not listed above or on the releases page, you may need to build the server and client applications from source. See the Setup Guides listed under the Usage Scenarios section at the beginning of this document.\r\n\r\n  \r\n### **Running NymphCast** ###\r\n\r\nThe **server binary** can be started with only the configuration flag specified.\r\nTo start the server, execute the binary (from the `bin/<platform>/` folder) to have it start listening on port 4004, with the appropriate configuration file (see Usage Scenarios for a list). \r\n\r\nE.g. for an audio-only configuration:\r\n\r\n`./nymphcast_server -c nymphcast_audio_config.ini`.\r\n \r\nThe server will listen on all network interfaces for incoming connections. It supports the following options:\r\n```\r\n-h\t--help\t\t\t\tGet this help message.\r\n-c\t--configuration\t\tPath to the configuration file.\r\n-a\t--apps\t\t\t\tPath to the NymphCast apps folder.\r\n-w\t--wallpaper\t\t\tPath to the wallpapers folder.\r\n-r\t--resources\t\t\tPath to the GUI resources folder.\r\n-v\t--version\t\t\tOutput NymphCast server version and exit.\r\n```\r\n\r\n\r\n**Server configuration**\r\n\r\nIn the configuration file supplied to the server, the following options are supported:\r\n\r\n<table>\r\n<tr>\r\n\t<td><b>Option</b></td>\r\n\t<td><b>Values</b></td>\r\n\t<td><b>Default</b></td>\r\n\t<td><b>Description</b></td>\r\n</tr>\r\n<tr>\r\n\t<td>fullscreen</td>\r\n\t<td>1 (true), 0 (false)</td>\r\n\t<td>0</td>\r\n\t<td>Whether a window is full-screen. (if <code>disable_video</code> is true).</td>\r\n</tr>\r\n<tr>\r\n\t<td>disable_video</td>\r\n\t<td>1 (true), 0 (false)</td>\r\n\t<td>0</td>\r\n\t<td>Disables video output if true. Set to 'true' for NymphCast Audio configuration.</td>\r\n</tr>\r\n<tr>\r\n\t<td>enable_gui</td>\r\n\t<td>1 (true), 0 (false)</td>\r\n\t<td>0</td>\r\n\t<td>Enables the GUI mode if true. Set to 'true' for Nymphcast GUI configuration along with <code>disable_video</code> set to 'false'.</td>\r\n</tr>\r\n<tr>\r\n\t<td>buffer_size</td>\r\n\t<td>-</td>\r\n\t<td>20971520</td>\r\n\t<td>Size of the internal data buffer. Default is 20 MB.</td>\r\n</tr>\r\n<tr>\r\n\t<td>enable_lcdproc</td>\r\n\t<td>1 (true), 0 (false)</td>\r\n\t<td>0</td>\r\n\t<td>Enables the LCDProc client if set to 'true'.</td>\r\n</tr>\r\n<tr>\r\n\t<td>lcdproc_host</td>\r\n\t<td>Name/IP</td>\r\n\t<td>'localhost'</td>\r\n\t<td>Sets a custom target for the LCDProc client (if enabled).</td>\r\n</tr>\r\n</table>\r\n\r\n\r\n**LCDProc configuration**\r\n\r\nNymphCast Server can output basic media file information (artist - title) to an LCDProc daemon on the system. To enable this, set to `1` the option `enable_lcdproc` in the active NymphCast Server configuration file (on Linux: `/usr/local/etc/nymphcast/nymphcast_config.ini`).\r\n\r\nAfter this restart the NymphCast server instance.\r\n\r\n&nbsp;\r\n\r\nThe **client binary** supports the following flags:\r\n\r\n```\r\nUsage:\r\n        nymphcast_client <options>\r\n\r\nOptions:\r\n-h      --help          Get this help message.\r\n-v      --version       Output the NymphCast client version and exit.\r\n-r      --remotes       Display online NymphCast receivers and quit.\r\n-f      --file          Name of file to stream to remote receiver.\r\n-i      --ip            IP address of the target NymphCast receiver.\r\n```\r\n\r\nThe **NymphCast Player** is a GUI-based application and accepts no command line options.\r\n\r\n\r\n<a id=\"id-mrp\"></a>\r\n## Multi-Room Playback ##\r\n\r\nUsing the NymphCast Player (NCP) client groups of servers can be added to a group. The `Remotes` dialogue window for this can be accessed either from the top menu or the button next to the `Remotes` drop-down menu.\r\n\r\nAfter creating a group, it will show up in the `Remotes` drop-down in the main window of NCP, and attempting to stream local media (or an NCMS share) to the group will automatically configure synchronised playback to all of the remotes in this group.\r\n\r\n\r\n<a id=\"id-bfs\"></a>\r\n## Building From Source ##\r\n\r\n**Note:** This section is for building the project from source. Pre-built binaries are provided on the ['Releases'](https://github.com/MayaPosch/NymphCast/releases) page.\r\n\r\n**Server:** [Server building instructions](doc/building_nymphcast_server.md)\r\n\r\n**Player:** [Player building instructions](doc/building_nymphcast_player.md)\r\n\r\n\r\n<a id=\"id-dg\"></a>\r\n## Developer's Guide ##\r\n\r\nThe focus of the project is currently on the development of the NymphCast server and the protocol parts. Third parties are encouraged to contribute server-side app support of their services and developers in general to contribute to server- and client-side development.\r\n\r\nThe current server and client documentation is hosted at the [Nyanko website](http://nyanko.ws/nymphcast.php).\r\n\r\n<a id=\"id-rs\"></a>\r\n## Repository Structure ##\r\n\r\nThe repository currently contains the NymphCast server, client SDK and NymphCast Player client sources.\r\n\r\n\t/\r\n\t|- player \t(the NymphCast demonstration client)\r\n\t|- src/\r\n\t|\t|- client \t\t(basic CLI NymphCast client)\r\n\t|\t|- server\t\t(the NymphCast server and NymphCast app files)\r\n\t|- tools\t(shell scripts for creating releases, in progress)\r\n\r\n\r\n<a id=\"id-sdk\"></a>\r\n## SDK ##\r\n\r\nAn SDK has been made available in the [LibNymphCast repository](https://github.com/MayaPosch/libnymphcast). The player project under `player/` uses the SDK as part of a Qt5 project to implement a NymphCast client which exposes all of the NymphCast features to the user.\r\n\r\nAfter compiling LibNymphCast, a client project has to link against this library file and include the `nymphcast_client.h` header file.\r\n\r\n\r\n<a id=\"id-lic\"></a>\r\n## License ##\r\n\r\nNymphCast is a fully open source project. The full, 3-clause BSD-licensed source code can be found at its project page on Github, along with binary releases.\r\n\r\n<a id=\"id-donate\"></a>\r\n## Donate ##\r\n\r\nNymphCast is fully free, but its development relies on your support. If you appreciate the project, your contribution, [Ko-Fi](https://ko-fi.com/mayaposch) or [donation](http://nyanko.ws/nymphcast.php#donate) will help to support the continued development.\r\n\r\n\r\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies.sh",
          "type": "blob",
          "size": 2.369140625,
          "content": "#!/bin/sh\n\n# Install the dependencies.\nPLATFORM=\"unknown\"\ncase \"$(uname -s)\" in\n\tDarwin)\n\t\techo 'Mac OS X'\n\t\tPLATFORM=\"macos\"\n\t\tif [ -x \"$(command -v brew)\" ]; then\n\t\t\tbrew update\n\t\t\tbrew install sdl2 sdl2_image poco ffmpeg freetype freeimage rapidjson pkg-config curl\n\t\tfi\n\t\t;;\n\n\tLinux)\n\t\techo 'Linux'\n\t\tPLATFORM=\"linux\"\n\t\tif [ -x \"$(command -v pkg)\" ]; then\n\t\t\tpkg upgrade\n\t\t\tpkg install git clang sdl2 sdl2-image libpoco ffmpeg pkg-config freetype freeimage rapidjson libcurl\n\t\telif [ -x \"$(command -v apt)\" ]; then\n\t\t\tsudo apt update\n\t\t\tsudo apt -y install git g++ libsdl2-image-dev libsdl2-dev libpoco-dev libswscale-dev libavcodec-dev libavdevice-dev libavformat-dev libavutil-dev libpostproc-dev libswresample-dev pkg-config libfreetype6-dev libfreeimage-dev rapidjson-dev libcurl4-gnutls-dev\n\t\telif [ -x \"$(command -v apk)\" ]; then\n\t\t\tsudo apk update\n\t\t\tsudo apk add poco-dev sdl2-dev sdl2_image-dev ffmpeg-dev openssl-dev freetype-dev freeimage-dev rapidjson-dev alsa-lib-dev glew-dev nymphrpc-dev curl-dev pkgconfig\n\t\telif [ -x \"$(command -v pacman)\" ]; then\n\t\t\tsudo pacman -Syy \n\t\t\tsudo pacman -S --noconfirm --needed git sdl2 sdl2_image poco ffmpeg freetype2 freeimage rapidjson pkgconf curl\n\t\tfi\n\t\t;;\n\n\tCYGWIN*|MINGW32*|MSYS*|MINGW*)\n\t\techo 'MS Windows/MinGW'\n\t\tPLATFORM=\"mingw\"\n\t\tPF=${MINGW_PACKAGE_PREFIX}-\n\t\tif [ -x \"$(command -v pacman)\" ]; then\n\t\t\tpacman -Syy \n\t\t\t#pacman -S --noconfirm --needed git mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_image mingw-w64-x86_64-poco mingw-w64-x86_64-ffmpeg mingw-w64-x86_64-freetype mingw-w64-x86_64-freeimage mingw-w64-x86_64-rapidjson pkgconf curl\n\t\t\tpacman -S --noconfirm --needed git ${PF}gcc ${PF}SDL2 ${PF}SDL2_image ${PF}poco ${PF}ffmpeg ${PF}freetype ${PF}freeimage ${PF}rapidjson pkgconf curl\n\t\tfi\n\t\t\n\t\t# Bail out here for now until MSYS2 support is implemented for the rest.\n\t\t#echo 'Install libnymphrpc & libnymphcast before building server.'\n\t\t#exit\n\t\t;;\n\t\t\n\tFreeBSD)\n\t\techo 'Detected FreeBSD'\n\t\tPLATFORM=\"freebsd\"\n\t\tpkg install -y gmake gcc git poco sdl2 sdl2_image ffmpeg openssl freetype2 freeimage rapidjson pkgconf curl\n\t\t;;\n\t\t\n\tHaiku)\n\t\techo 'Haiku'\n\t\tPLATFORM=\"haiku\"\n\t\tif [ -x \"$(command -v pkgman)\" ]; then\n\t\t\tpkgman install git poco poco_devel libsdl2 libsdl2_devel sdl2_image sdl2_image_devel ffmpeg ffmpeg6_devel freetype freetype_devel freeimage freeimage_devel rapidjson curl curl_devel\n\t\tfi\n\t\t;;\n\n\t*)\n\t\techo 'Unsupported OS'\n\t\texit\n\t\t;;\nesac\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "ffplay_cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "install_linux.sh",
          "type": "blob",
          "size": 2.48828125,
          "content": "#!/bin/sh\n\n# NymphCast installer for the Linux platform.\nif [ \"$(uname -s)\" = \"Linux\" ]; then\n\techo \"Detected Linux system. Proceeding with installation...\"\nelse\n\techo \"This installer requires a Linux system. Exiting...\"\n\texit\nfi\n\n# Requires that the binaries have been compiled with the 'setup.sh' script first.\nPLATFORM=`g++ -dumpmachine`\nif [ -f \"src/server/bin/${PLATFORM}/nymphcast_server\" ]; then\n\techo \"NymphCast Server binary found, skipping compilation...\"\nelse\n\techo \"Compiling NymphCast server...\"\n\t./setup.sh\nfi\n\n# Copy files to the target folders.\nsudo make -C src/server/ install\n\n# Set the requested configuration file.\nread -p \"Desired NymphCast receiver configuration? [audio/video/screensaver/gui] \" choice\n\nDESKTOP_INSTALL=true\ncase $choice in\n\taudio)\n\t\techo \"Setting Audio configuration...\"\n\t\tsudo cp src/server/nymphcast_audio_config.ini /usr/local/etc/nymphcast/nymphcast_config.ini\n\t\tDESKTOP_INSTALL=false\n\t\t;;\n\t\t\n\tvideo)\n\t\techo \"Setting video configuration...\"\n\t\tsudo cp src/server/nymphcast_video_config.ini /usr/local/etc/nymphcast/nymphcast_config.ini\n\t\t;;\n\t\t\n\tscreensaver)\n\t\techo \"Setting screensaver configuration...\"\n\t\tsudo cp src/server/nymphcast_screensaver_config.ini /usr/local/etc/nymphcast/nymphcast_config.ini\n\t\t;;\n\t\t\n\tgui)\n\t\techo \"Setting GUI configuration...\"\n\t\tsudo cp src/server/nymphcast_gui_config.ini /usr/local/etc/nymphcast/nymphcast_config.ini\n\t\t;;\n\t\t\n\t*)\n\t\techo \"Unrecognised choice. Please set configuration manually.\"\n\t\t\n\t\t;;\nesac\n\n# Confirm installation of autostart/service.\nread -p \"Install autostart file/system service? (Y/N)\" install_auto\n\ncase $install_auto in\n\tY)\n\t\techo \"Installing...\"\n\t\t;;\n\t*)\n\t\techo \"Installation finished.\"\n\t\texit\n\t\t;;\nesac\n\n# If GUI, screensaver or video mode, install Desktop file for auto-start.\nif [ \"${DESKTOP_INSTALL}\" = \"true\" ]; then\n\t# TODO: Install desktop file into $XDG_CONFIG_DIRS/autostart (/etc/xdg/autostart).\n\t#sudo cp src/server/autostart/nymphcast_server.desktop $XDG_CONFIG_DIRS/autostart\n\techo \"Installing .desktop file to /etc/xdg/autostart...\"\n\tsudo cp src/server/autostart/nymphcast_server.desktop /etc/xdg/autostart\nelse\n\t# Install systemd or openrc service.\n\tif [ -d \"/run/systemd/system\" ]; then\n\t\techo \"Installing systemd service...\"\n\t\tsudo make -C src/server/ install-systemd\n\t\tsudo chmod 644 /etc/systemd/user/nymphcast.service\n\t\t#sudo systemctl enable nymphcast.service\n\t\tsystemctl --user enable nymphcast.service\n\telse\n\t\techo \"Installing OpenRC service...\"\n\t\tsudo make -C src/server/ install-openrc\n\tfi\nfi\n\necho \"Installation finished.\"\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "ms_sync",
          "type": "tree",
          "content": null
        },
        {
          "name": "player",
          "type": "tree",
          "content": null
        },
        {
          "name": "privacy_policy.md",
          "type": "blob",
          "size": 0.828125,
          "content": "# Privacy Policy NymphCast #\n\nThe software that is part of the NymphCast ecosystem does not collect user information or shares any of such information or other details with third parties. \n\nAny and all permissions required by the NymphCast Server, NymphCast Player (desktop or Android), etc. are required for the basic application functionality. No third-party functionality is required, and no internet access is required for operation.\n\nNo user account is required for operation. No user data is collected, nor are any statistics gathered other than as provided via e.g. the Google Play Store in the case of the Android Player client when installed from there.\n\nIn the case of a security vulnerability that would lead to an inadvertent breach of this privacy, please inform the NymphCast developers so that this can be fixed as soon as possible.\n"
        },
        {
          "name": "release_notes.md",
          "type": "blob",
          "size": 2.0576171875,
          "content": "NymphCast Release Notes\n===\n\n## v0.2 ##\n\n**Alpha 0**\n\nNew:\n- Platform support for Haiku (see notes) and Android (see notes).\n- Haiku: \tRequires R1 B5 or up, SDL2/Mesa bug (BLock unlock, issue #6400) => https://dev.haiku-os.org/ticket/6400\n- Android: \tAPI 27+, supports Android & Android/Google TV.\n- Server:\tUse Desktop start file for Linux Video/GUI mode instead of systemd service. (experimental)\n- Local media feature added to NCS. Configured via INI file. (experimental).\n\nNotes:\n- Multi-room playback partially validated.\n\nKnown Issues:\n- Subtitles: PGS works, text-based not yet.\n- Android 9: Some specific files result in a crash due to a presumed AAudio issue.\n\n## v0.1 ##\n\n**New**\n\n- Everything (initial release).\n- Implements core streaming and playback functionality using the Client, Server & MediaServer components.\n- Implements the Audio-only mode.\n- Implements the Video mode (Audio + Video output).\n- Implements the Screensaver mode (Video + screensaver while idle).\n- Implements LCDProc support.\n\n**Experimental**\n\n- AngelScript-based applications (NymphCast Apps).\n- Multi-cast feature.\n- GUI-based interface mode (based on EmulationStation).\n\n**Issues resolved**\n\n- Initial release, ergo no previous issues.\n\n**Known issues**\n\n- Only non-text subtitles (e.g. BluRay/DVD-style PGS) are supported in this release.\n- Experimental features are what it says on the tin. Stability and other issues are expected.\n\t\n**Notes**\n\nAs an initial release, NymphCast v0.1 is primarily focused on the core functionality of streaming media content, whether from a (HTTP/RTSP) URL, or a NymphCast Client or MediaServer instance. \n\nSupported media formats are those which are supported by the used ffmpeg (LibAV) libraries. This includes all common types and many less common ones. Playback performance is limited by the used hardware.\n\nThe current NymphCast development process target is a v1.0 release, with each subsequent minor (0.x) release intended to add new features. Although care is taken to minimise the number of breaking changes between releases, long-term stability is not expected until v1.0."
        },
        {
          "name": "setup.sh",
          "type": "blob",
          "size": 5.470703125,
          "content": "#!/bin/sh\n\n# Compilation script for the NymphCast server\necho \"UPDATE: $UPDATE\"\necho \"PACKAGE: $PACKAGE\"\n\n# Install the dependencies.\nPLATFORM=\"unknown\"\ncase \"$(uname -s)\" in\n\tDarwin)\n\t\techo 'Mac OS X'\n\t\tPLATFORM=\"macos\"\n\t\tif [ -x \"$(command -v brew)\" ]; then\n\t\t\tbrew update\n\t\t\tbrew install sdl2 sdl2_image poco ffmpeg freetype freeimage rapidjson pkg-config curl\n\t\tfi\n\t\t;;\n\n\tLinux)\n\t\techo 'Linux'\n\t\tPLATFORM=\"linux\"\n\t\tif [ -x \"$(command -v apt)\" ]; then\n\t\t\tsudo apt update\n\t\t\tsudo apt -y install git g++ libsdl2-image-dev libsdl2-dev libpoco-dev libswscale-dev libavcodec-dev libavdevice-dev libavformat-dev libavutil-dev libpostproc-dev libswresample-dev pkg-config libfreetype6-dev libfreeimage-dev rapidjson-dev libcurl4-gnutls-dev\n\t\telif [ -x \"$(command -v apk)\" ]; then\n\t\t\tsudo apk update\n\t\t\tsudo apk add poco-dev sdl2-dev sdl2_image-dev ffmpeg-dev openssl-dev freetype-dev freeimage-dev rapidjson-dev alsa-lib-dev glew-dev nymphrpc-dev curl-dev pkgconfig\n\t\telif [ -x \"$(command -v pacman)\" ]; then\n\t\t\tsudo pacman -Syy \n\t\t\tsudo pacman -S --noconfirm --needed git sdl2 sdl2_image poco ffmpeg freetype2 freeimage rapidjson pkgconf curl\n\t\tfi\n\t\t;;\n\n\tCYGWIN*|MINGW32*|MSYS*|MINGW*)\n\t\techo 'MS Windows/MinGW'\n\t\tPLATFORM=\"mingw\"\n\t\tPF=${MINGW_PACKAGE_PREFIX}-\n\t\tif [ -x \"$(command -v pacman)\" ]; then\n\t\t\tpacman -Syy \n\t\t\t#pacman -S --noconfirm --needed git mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_image mingw-w64-x86_64-poco mingw-w64-x86_64-ffmpeg mingw-w64-x86_64-freetype mingw-w64-x86_64-freeimage mingw-w64-x86_64-rapidjson pkgconf curl\n\t\t\tpacman -S --noconfirm --needed git ${PF}gcc ${PF}SDL2 ${PF}SDL2_image ${PF}poco ${PF}ffmpeg ${PF}freetype ${PF}freeimage ${PF}rapidjson pkgconf curl\n\t\tfi\n\t\t\n\t\t# Bail out here for now until MSYS2 support is implemented for the rest.\n\t\t#echo 'Install libnymphrpc & libnymphcast before building server.'\n\t\t#exit\n\t\t;;\n\t\t\n\tFreeBSD)\n\t\techo 'Detected FreeBSD'\n\t\tPLATFORM=\"freebsd\"\n\t\tpkg install -y gmake gcc git poco sdl2 sdl2_image ffmpeg openssl freetype2 freeimage rapidjson pkgconf curl\n\t\t;;\n\t\t\n\tHaiku)\n\t\techo 'Haiku'\n\t\tPLATFORM=\"haiku\"\n\t\tif [ -x \"$(command -v pkgman)\" ]; then\n\t\t\tpkgman install git poco poco_devel libsdl2 libsdl2_devel sdl2_image sdl2_image_devel ffmpeg ffmpeg6_devel freetype freetype_devel freeimage freeimage_devel rapidjson curl curl_devel\n\t\tfi\n\t\t;;\n\n\t*)\n\t\techo 'Unsupported OS'\n\t\texit\n\t\t;;\nesac\n\n\nif [ -n \"${UPDATE}\" ]; then\n\tif [ \"${PLATFORM}\" == \"linux\" ]; then\n\t\tif [ -f \"/usr/local/lib/libnymphrpc.a\" ]; then\n\t\t\tsudo rm /usr/local/lib/libnymphrpc.*\n\t\t\tsudo rm -rf /usr/local/include/nymph\n\t\tfi\n\telif [ \"${PLATFORM}\" == \"mingw\" ]; then\n\t\t#if [ -f \"/mingw64/lib/libnymphrpc.a\" ]; then\n\t\tif [ -f \"${MINGW_PREFIX}/lib/libnymphrpc.a\" ]; then\n\t\t\t#rm /mingw64/lib/libnymphrpc.a\n\t\t\trm ${MINGW_PREFIX}/lib/libnymphrpc.a\n\t\tfi\n\tfi\nfi\n\nif [ -f \"/usr/lib/libnymphrpc.so\" ]; then\n\techo \"NymphRPC dynamic library found in /usr/lib. Skipping installation.\"\nelif [ -f \"/boot/system/non-packaged/develop/lib/libnymphrpc.a\" ]; then\n\techo \"NymphRPC dynamic library found in /boot/system/non-packaged/develop/lib. Skipping installation.\"\n#elif [ -f \"/mingw64/lib/libnymphrpc.so\" ]; then\nelif [ -f \"${MINGW_PREFIX}/lib/libnymphrpc.a\" ]; then\n\t#echo \"NymphRPC dynamic library found in /mingw64/lib. Skipping installation.\"\n\techo \"NymphRPC dynamic library found in ${MINGW_PREFIX}/lib. Skipping installation.\"\nelse\n\t# Obtain current version of NymphRPC\n\tgit clone --depth 1 https://github.com/MayaPosch/NymphRPC.git\n\t\n\t# Build NymphRPC and install it.\n\techo \"Installing NymphRPC...\"\n\tmake -C NymphRPC/ lib\n\tif [ \"${PLATFORM}\" == \"mingw\" ] || [ \"${PLATFORM}\" == \"haiku\" ]; then\n\t\tmake -C NymphRPC/ install\n\telif [ \"$(PLATFORM)\" == \"freebsd\" ]; then\n\t\tgmake -C NymphRPC/ install\n\telse\n\t\tsudo make -C NymphRPC/ install\n\tfi\nfi\n\n# Remove NymphRPC folder.\nrm -rf NymphRPC\n\n# Build NymphCast client library.\n#make -C src/client_lib/ clean\n#make -C src/client_lib/\nif [ -f \"/usr/lib/libnymphcast.so\" ]; then\n\techo \"LibNymphCast dynamic library found in /usr/lib. Skipping installation.\"\nelif [ -f \"/boot/system/non-packaged/develop/lib/libnymphcast.a\" ]; then\n\techo \"LibNymphCast dynamic library found in /boot/system/non-packaged/develop/lib. Skipping installation.\"\n#elif [ -f \"/mingw64/lib/libnymphcast.so\" ]; then\nelif [ -f \"${MINGW_PREFIX}/lib/libnymphcast.a\" ]; then\n\t#echo \"LibNymphCast dynamic library found in /mingw64/lib. Skipping installation.\"\n\techo \"LibNymphCast dynamic library found in ${MINGW_PREFIX}/lib. Skipping installation.\"\nelse\n\t# Obtain current version of LibNymphCast\n\tgit clone --depth 1 https://github.com/MayaPosch/libnymphcast.git\n\t\n\t# Build libnymphcast and install it.\n\techo \"Installing LibNymphCast...\"\n\tmake -C libnymphcast/ lib\n\tif [ \"${PLATFORM}\" == \"mingw\" ] || [ \"${PLATFORM}\" == \"haiku\" ]; then\n\t\tmake -C libnymphcast/ install\n\telif [ \"$(PLATFORM)\" == \"freebsd\" ]; then\n\t\tgmake -C libnymphcast/ install\n\telse \n\t\tsudo make -C libnymphcast/ install\n\tfi\nfi\n\n# Install client library\n#sudo make -C src/client_lib/ install\n\n# Build NymphCast server.\n#make -C src/server/ clean\nif [ \"$(PLATFORM)\" == \"freebsd\" ]; then\n\tgmake -C src/server\nelse\n\tmake -C src/server/\nfi\n\n# Copy the wallpaper files into the bin folder.\n#mkdir -p src/server/bin/wallpapers\n#cp src/server/*.jpg src/server/bin/wallpapers/.\n\n# Copy the configuration file into the bin folder.\n#cp src/server/*.ini src/server/bin/.\n\n# Copy the NymphCast apps into the bin folder.\n#cp -r src/server/apps src/server/bin/.\n\nif [ ! -z \"${PACKAGE}\" ]; then\n\t# Package into a tar.gz\n\techo \"Packaging into tar.gz file.\"\n\ttar -czC src/server/bin -f nymphcast_server.tar.gz .\nfi\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall_linux.sh",
          "type": "blob",
          "size": 0.4697265625,
          "content": "#!/bin/sh\n\n# Nymphcast uninstaller for the Linux platform.\n\n# Remove the NymphCast service.\nif [ -d \"/run/systemd/system\" ]; then\n\techo \"Removing systemd service...\"\n\t#sudo systemctl disable nymphcast.service\n\tsystemctl --user disable nymphcast.service\n\tsudo rm /etc/systemd/user/nymphcast.service\nelse\n\techo \"Removing OpenRC service...\"\n\tsudo make -C src/server/ uninstall-openrc\nfi\n\n# Remove the files.\nsudo make -C src/server/ uninstall\n\necho \"Uninstalling NymphCast complete.\"\n"
        },
        {
          "name": "vlc_test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}