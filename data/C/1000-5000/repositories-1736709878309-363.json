{
  "metadata": {
    "timestamp": 1736709878309,
    "page": 363,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FFTW/fftw3",
      "stars": 2781,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5048828125,
          "content": "*.tar.gz\n*.exe\n*.dll\n*.do\n*.o\n*.lo\n*.a\n*.la\n*.dylib\n*.dSYM\n*.zip\n*.native\n*~\n_build\n\n# generated codelets:\nrdft/simd/altivec/*.c\nrdft/simd/avx/*.c\nrdft/simd/avx-128/*.c\nrdft/simd/avx-128-fma/*.c\nrdft/simd/avx2/*.c\nrdft/simd/avx2-128/*.c\nrdft/simd/avx512/*.c\nrdft/simd/generic-simd128/*.c\nrdft/simd/generic-simd256/*.c\nrdft/simd/common/*.c\nrdft/simd/kcvi/*.c\nrdft/simd/neon/*.c\nrdft/simd/sse2/*.c\nrdft/simd/vsx/*.c\nrdft/scalar/r2cb/*.c\nrdft/scalar/r2cf/*.c\nrdft/scalar/r2r/*.c\ndft/scalar/codelets/*.c\ndft/simd/altivec/*.c\ndft/simd/avx/*.c\ndft/simd/avx-128/*.c\ndft/simd/avx-128-fma/*.c\ndft/simd/avx2/*.c\ndft/simd/avx2-128/*.c\ndft/simd/avx512/*.c\ndft/simd/generic-simd128/*.c\ndft/simd/generic-simd256/*.c\ndft/simd/common/*.c\ndft/simd/kcvi/*.c\ndft/simd/neon/*.c\ndft/simd/sse2/*.c\ndft/simd/vsx/*.c\n\n# other generated files\nChangeLog\napi/fftw3*.f*\n*.pc\n*.cmake\nmpi/f03-wrap.c\nmpi/fftw3*-mpi.f*\n\n# other build products\ntests/bench\ntools/fftw-wisdom\ntools/fftw-wisdom-to-conf\ntools/fftw-wisdom.1\ntools/fftw_wisdom.1\ndoc/FAQ/*.ascii\ndoc/FAQ/*.html\ndoc/FAQ/html.refs2\ndoc/FAQ/*.info\ndoc/FAQ/*.xrefdb\ndoc/*.pdf\ndoc/*.t2p\ndoc/html\ndoc/rfftwnd-for-html.png\n\n# generated documentation files\ndoc/fftw3.info*\ndoc/mdate-sh\ndoc/rfftwnd.eps\ndoc/rfftwnd.pdf\ndoc/stamp-vti\ndoc/texinfo.tex\ndoc/version.texi\n\n# autotools stuff\nMakefile\nMakefile.in\n.deps\n.libs\nstamp-h1\ninstall-sh\nlibtool\nltmain.sh\nm4/libtool.m4\nm4/ltoptions.m4\nm4/ltsugar.m4\nm4/ltversion.m4\nm4/lt~obsolete.m4\nconfigure\nconfig.*\nautom4te.cache\nINSTALL\naclocal.m4\ndepcomp\nmissing\npy-compile\ncompile\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.5712890625,
          "content": "Authors of FFTW (reachable at fftw@fftw.org):\n\nMatteo Frigo <athena@fftw.org>\nSteven G. Johnson <stevenj@alum.mit.edu>\n\nStefan Kral <skral@fftw.org> wrote genfft-k7/*.ml*, which was\nadded in fftw-3.0 and removed in fftw-3.2.\n\nRomain Dolbeau contributed support for AVX512 and KCvi.\n\nErik Lindahl contributed support for AVX2 and Power8 VSX.\n\nSupport for the Cell Broadband Engine was graciously donated by the\nIBM Austin Research Lab, which was added in fftw-3.2 and removed in\nfftw-3.3.\n\nSupport for MIPS64 paired-single SIMD instructions was graciously\ndonated by CodeSourcery, Inc.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 15.4169921875,
          "content": "cmake_minimum_required (VERSION 3.0)\n\nif (NOT DEFINED CMAKE_BUILD_TYPE)\n  set (CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\")\nendif ()\n\nproject (fftw)\n\nif (POLICY CMP0042)\n  cmake_policy (SET CMP0042 NEW)\nendif ()\n\noption (BUILD_SHARED_LIBS \"Build shared libraries\" ON)\noption (BUILD_TESTS \"Build tests\" ON)\n\noption (ENABLE_OPENMP \"Use OpenMP for multithreading\" OFF)\noption (ENABLE_THREADS \"Use pthread for multithreading\" OFF)\noption (WITH_COMBINED_THREADS \"Merge thread library\" OFF)\n\noption (ENABLE_FLOAT \"single-precision\" OFF)\noption (ENABLE_LONG_DOUBLE \"long-double precision\" OFF)\noption (ENABLE_QUAD_PRECISION \"quadruple-precision\" OFF)\n\noption (ENABLE_SSE \"Compile with SSE instruction set support\" OFF)\noption (ENABLE_SSE2 \"Compile with SSE2 instruction set support\" OFF)\noption (ENABLE_AVX \"Compile with AVX instruction set support\" OFF)\noption (ENABLE_AVX2 \"Compile with AVX2 instruction set support\" OFF)\n\noption (DISABLE_FORTRAN \"Disable Fortran wrapper routines\" OFF)\n\ninclude(GNUInstallDirs)\n\n\ninclude (CheckIncludeFile)\ncheck_include_file (alloca.h         HAVE_ALLOCA_H)\ncheck_include_file (altivec.h        HAVE_ALTIVEC_H)\ncheck_include_file (c_asm.h          HAVE_C_ASM_H)\ncheck_include_file (dlfcn.h          HAVE_DLFCN_H)\ncheck_include_file (intrinsics.h     HAVE_INTRINSICS_H)\ncheck_include_file (inttypes.h       HAVE_INTTYPES_H)\ncheck_include_file (libintl.h        HAVE_LIBINTL_H)\ncheck_include_file (limits.h         HAVE_LIMITS_H)\ncheck_include_file (mach/mach_time.h HAVE_MACH_MACH_TIME_H)\ncheck_include_file (malloc.h         HAVE_MALLOC_H)\ncheck_include_file (memory.h         HAVE_MEMORY_H)\ncheck_include_file (stddef.h         HAVE_STDDEF_H)\ncheck_include_file (stdint.h         HAVE_STDINT_H)\ncheck_include_file (stdlib.h         HAVE_STDLIB_H)\ncheck_include_file (string.h         HAVE_STRING_H)\ncheck_include_file (strings.h        HAVE_STRINGS_H)\ncheck_include_file (sys/types.h      HAVE_SYS_TYPES_H)\ncheck_include_file (sys/time.h       HAVE_SYS_TIME_H)\ncheck_include_file (sys/stat.h       HAVE_SYS_STAT_H)\ncheck_include_file (sys/sysctl.h     HAVE_SYS_SYSCTL_H)\ncheck_include_file (time.h           HAVE_TIME_H)\ncheck_include_file (uintptr.h        HAVE_UINTPTR_H)\ncheck_include_file (unistd.h         HAVE_UNISTD_H)\nif (HAVE_TIME_H AND HAVE_SYS_TIME_H)\n  set (TIME_WITH_SYS_TIME TRUE)\nendif ()\n\ninclude (CheckPrototypeDefinition)\ncheck_prototype_definition (drand48 \"double drand48 (void)\" \"0\" stdlib.h HAVE_DECL_DRAND48)\ncheck_prototype_definition (srand48 \"void srand48(long int seedval)\" \"0\" stdlib.h HAVE_DECL_SRAND48)\ncheck_prototype_definition (cosl \"long double cosl( long double arg )\" \"0\" math.h HAVE_DECL_COSL)\ncheck_prototype_definition (sinl \"long double sinl( long double arg )\" \"0\" math.h HAVE_DECL_SINL)\ncheck_prototype_definition (memalign \"void *memalign(size_t alignment, size_t size)\" \"0\" malloc.h HAVE_DECL_MEMALIGN)\ncheck_prototype_definition (posix_memalign \"int posix_memalign(void **memptr, size_t alignment, size_t size)\" \"0\" stdlib.h HAVE_DECL_POSIX_MEMALIGN)\n\ninclude (CheckSymbolExists)\ncheck_symbol_exists (clock_gettime time.h HAVE_CLOCK_GETTIME)\ncheck_symbol_exists (gettimeofday sys/time.h HAVE_GETTIMEOFDAY)\ncheck_symbol_exists (getpagesize unistd.h HAVE_GETPAGESIZE)\ncheck_symbol_exists (drand48 stdlib.h HAVE_DRAND48)\ncheck_symbol_exists (srand48 stdlib.h HAVE_SRAND48)\ncheck_symbol_exists (memalign malloc.h HAVE_MEMALIGN)\ncheck_symbol_exists (posix_memalign stdlib.h HAVE_POSIX_MEMALIGN)\ncheck_symbol_exists (mach_absolute_time mach/mach_time.h HAVE_MACH_ABSOLUTE_TIME)\ncheck_symbol_exists (alloca alloca.h HAVE_ALLOCA)\nif (NOT HAVE_ALLOCA)\n  unset (HAVE_ALLOCA CACHE)\n  check_symbol_exists (alloca malloc.h HAVE_ALLOCA)\nendif ()\ncheck_symbol_exists (isnan math.h HAVE_ISNAN)\ncheck_symbol_exists (snprintf stdio.h HAVE_SNPRINTF)\ncheck_symbol_exists (strchr string.h HAVE_STRCHR)\ncheck_symbol_exists (sysctl unistd.h HAVE_SYSCTL)\n\nif (UNIX)\n  set (CMAKE_REQUIRED_LIBRARIES m)\nendif ()\ncheck_symbol_exists (cosl math.h HAVE_COSL)\ncheck_symbol_exists (sinl math.h HAVE_SINL)\n\ninclude (CheckTypeSize)\ncheck_type_size (\"float\" SIZEOF_FLOAT)\ncheck_type_size (\"double\" SIZEOF_DOUBLE)\ncheck_type_size (\"int\" SIZEOF_INT)\ncheck_type_size (\"long\" SIZEOF_LONG)\ncheck_type_size (\"long long\" SIZEOF_LONG_LONG)\ncheck_type_size (\"unsigned int\" SIZEOF_UNSIGNED_INT)\ncheck_type_size (\"unsigned long\" SIZEOF_UNSIGNED_LONG)\ncheck_type_size (\"unsigned long long\" SIZEOF_UNSIGNED_LONG_LONG)\ncheck_type_size (\"size_t\" SIZEOF_SIZE_T)\ncheck_type_size (\"ptrdiff_t\" SIZEOF_PTRDIFF_T)\nmath (EXPR SIZEOF_INT_BITS \"8 * ${SIZEOF_INT}\")\nset (C_FFTW_R2R_KIND \"C_INT${SIZEOF_INT_BITS}_T\")\n\nfind_library (LIBM_LIBRARY NAMES m)\nif (LIBM_LIBRARY)\n  set (HAVE_LIBM TRUE)\nendif ()\n\n\nif (ENABLE_THREADS)\n  find_package (Threads)\nendif ()\nif (Threads_FOUND)\n  if(CMAKE_USE_PTHREADS_INIT)\n    set (USING_POSIX_THREADS 1)\n  endif ()\n  set (HAVE_THREADS TRUE)\nendif ()\n\nif (ENABLE_OPENMP)\n  find_package (OpenMP)\nendif ()\nif (OPENMP_FOUND)\n  set (HAVE_OPENMP TRUE)\nendif ()\n\ninclude (CheckCCompilerFlag)\n\nif (ENABLE_SSE)\n  foreach (FLAG \"-msse\" \"/arch:SSE\")\n    unset (HAVE_SSE CACHE)\n    unset (HAVE_SSE)\n    check_c_compiler_flag (${FLAG} HAVE_SSE)\n    if (HAVE_SSE)\n      set (SSE_FLAG ${FLAG})\n      break()\n    endif ()\n  endforeach ()\nendif ()\n\nif (ENABLE_SSE2)\n  foreach (FLAG \"-msse2\" \"/arch:SSE2\")\n    unset (HAVE_SSE2 CACHE)\n    unset (HAVE_SSE2)\n    check_c_compiler_flag (${FLAG} HAVE_SSE2)\n    if (HAVE_SSE2)\n      set (SSE2_FLAG ${FLAG})\n      break()\n    endif ()\n  endforeach ()\nendif ()\n\nif (ENABLE_AVX)\n  foreach (FLAG \"-mavx\" \"/arch:AVX\")\n    unset (HAVE_AVX CACHE)\n    unset (HAVE_AVX)\n    check_c_compiler_flag (${FLAG} HAVE_AVX)\n    if (HAVE_AVX)\n      set (AVX_FLAG ${FLAG})\n      break()\n    endif ()\n  endforeach ()\nendif ()\n\nif (ENABLE_AVX2)\n  foreach (FLAG \"-mavx2\" \"/arch:AVX2\")\n    unset (HAVE_AVX2 CACHE)\n    unset (HAVE_AVX2)\n    check_c_compiler_flag (${FLAG} HAVE_AVX2)\n    if (HAVE_AVX2)\n      set (AVX2_FLAG ${FLAG})\n      break()\n    endif ()\n  endforeach ()\nendif ()\n\n# AVX2 codelets require FMA support as well\nif (ENABLE_AVX2)\n  foreach (FLAG \"-mfma\" \"/arch:FMA\")\n    unset (HAVE_FMA CACHE)\n    unset (HAVE_FMA)\n    check_c_compiler_flag (${FLAG} HAVE_FMA)\n    if (HAVE_FMA)\n      set (FMA_FLAG ${FLAG})\n      break()\n    endif ()\n  endforeach ()\nendif ()\n\nif (HAVE_SSE2 OR HAVE_AVX)\n  set (HAVE_SIMD TRUE)\nendif ()\nfile(GLOB           fftw_api_SOURCE                 api/*.c             api/*.h)\nfile(GLOB           fftw_dft_SOURCE                 dft/*.c             dft/*.h)\nfile(GLOB           fftw_dft_scalar_SOURCE          dft/scalar/*.c      dft/scalar/*.h)\nfile(GLOB           fftw_dft_scalar_codelets_SOURCE dft/scalar/codelets/*.c     dft/scalar/codelets/*.h)\nfile(GLOB           fftw_dft_simd_SOURCE            dft/simd/*.c        dft/simd/*.h)\n\nfile(GLOB           fftw_dft_simd_sse2_SOURCE       dft/simd/sse2/*.c   dft/simd/sse2/*.h)\nfile(GLOB           fftw_dft_simd_avx_SOURCE        dft/simd/avx/*.c    dft/simd/avx/*.h)\nfile(GLOB           fftw_dft_simd_avx2_SOURCE       dft/simd/avx2/*.c   dft/simd/avx2/*.h dft/simd/avx2-128/*.c   dft/simd/avx2-128/*.h)\nfile(GLOB           fftw_kernel_SOURCE              kernel/*.c          kernel/*.h)\nfile(GLOB           fftw_rdft_SOURCE                rdft/*.c            rdft/*.h)\nfile(GLOB           fftw_rdft_scalar_SOURCE         rdft/scalar/*.c     rdft/scalar/*.h)\n\nfile(GLOB           fftw_rdft_scalar_r2cb_SOURCE    rdft/scalar/r2cb/*.c\n                                                    rdft/scalar/r2cb/*.h)\nfile(GLOB           fftw_rdft_scalar_r2cf_SOURCE    rdft/scalar/r2cf/*.c\n                                                    rdft/scalar/r2cf/*.h)\nfile(GLOB           fftw_rdft_scalar_r2r_SOURCE     rdft/scalar/r2r/*.c\n                                                    rdft/scalar/r2r/*.h)\n\nfile(GLOB           fftw_rdft_simd_SOURCE           rdft/simd/*.c       rdft/simd/*.h)\nfile(GLOB           fftw_rdft_simd_sse2_SOURCE      rdft/simd/sse2/*.c  rdft/simd/sse2/*.h)\nfile(GLOB           fftw_rdft_simd_avx_SOURCE       rdft/simd/avx/*.c   rdft/simd/avx/*.h)\nfile(GLOB           fftw_rdft_simd_avx2_SOURCE      rdft/simd/avx2/*.c  rdft/simd/avx2/*.h rdft/simd/avx2-128/*.c  rdft/simd/avx2-128/*.h)\n\nfile(GLOB           fftw_reodft_SOURCE              reodft/*.c          reodft/*.h)\nfile(GLOB           fftw_simd_support_SOURCE        simd-support/*.c    simd-support/*.h)\nfile(GLOB           fftw_libbench2_SOURCE           libbench2/*.c       libbench2/*.h)\nlist (REMOVE_ITEM   fftw_libbench2_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/libbench2/useropt.c)\n\nset(SOURCEFILES\n    ${fftw_api_SOURCE}\n    ${fftw_dft_SOURCE}\n    ${fftw_dft_scalar_SOURCE}\n    ${fftw_dft_scalar_codelets_SOURCE}\n    ${fftw_dft_simd_SOURCE}\n    ${fftw_kernel_SOURCE}\n    ${fftw_rdft_SOURCE}\n    ${fftw_rdft_scalar_SOURCE}\n\n    ${fftw_rdft_scalar_r2cb_SOURCE}\n    ${fftw_rdft_scalar_r2cf_SOURCE}\n    ${fftw_rdft_scalar_r2r_SOURCE}\n\n    ${fftw_rdft_simd_SOURCE}\n    ${fftw_reodft_SOURCE}\n    ${fftw_simd_support_SOURCE}\n    ${fftw_threads_SOURCE}\n)\n\nset(fftw_par_SOURCE\n    threads/api.c\n    threads/conf.c\n    threads/ct.c\n    threads/dft-vrank-geq1.c\n    threads/f77api.c\n    threads/hc2hc.c\n    threads/rdft-vrank-geq1.c\n    threads/vrank-geq1-rdft2.c)\n\nset (fftw_threads_SOURCE ${fftw_par_SOURCE} threads/threads.c)\nset (fftw_omp_SOURCE ${fftw_par_SOURCE} threads/openmp.c)\n\n\ninclude_directories (.)\n\n\nif (WITH_COMBINED_THREADS)\n  list (APPEND SOURCEFILES ${fftw_threads_SOURCE})\nendif ()\n\n\nif (HAVE_SSE2)\n  list (APPEND SOURCEFILES ${fftw_dft_simd_sse2_SOURCE} ${fftw_rdft_simd_sse2_SOURCE})\nendif ()\n\nif (HAVE_AVX)\n  list (APPEND SOURCEFILES ${fftw_dft_simd_avx_SOURCE} ${fftw_rdft_simd_avx_SOURCE})\nendif ()\n\nif (HAVE_AVX2)\n  list (APPEND SOURCEFILES ${fftw_dft_simd_avx2_SOURCE} ${fftw_rdft_simd_avx2_SOURCE})\nendif ()\n\nset (FFTW_VERSION 3.3.10)\n\nset (PREC_SUFFIX)\nif (ENABLE_FLOAT)\n  set (FFTW_SINGLE TRUE)\n  set (BENCHFFT_SINGLE TRUE)\n  set (PREC_SUFFIX f)\nendif ()\n\nif (ENABLE_LONG_DOUBLE)\n  set (FFTW_LDOUBLE TRUE)\n  set (BENCHFFT_LDOUBLE TRUE)\n  set (PREC_SUFFIX l)\nendif ()\n\nif (ENABLE_QUAD_PRECISION)\n  set (FFTW_QUAD TRUE)\n  set (BENCHFFT_QUAD TRUE)\n  set (PREC_SUFFIX q)\nendif ()\nset (fftw3_lib fftw3${PREC_SUFFIX})\n\nconfigure_file (cmake.config.h.in config.h @ONLY)\ninclude_directories (${CMAKE_CURRENT_BINARY_DIR})\n\nif (BUILD_SHARED_LIBS)\n  add_definitions (-DFFTW_DLL)\nendif ()\n\nadd_library (${fftw3_lib} ${SOURCEFILES})\ntarget_include_directories (${fftw3_lib} INTERFACE $<INSTALL_INTERFACE:include>)\nif (MSVC)\n  if (CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n    add_compile_options(-bigobj)\n  elseif (CMAKE_C_COMPILER_ID STREQUAL \"MSVC\")\n    add_compile_options(/bigobj)\n  endif ()\nendif ()\nif (HAVE_SSE)\n  set_source_files_properties (${fftw_dft_simd_sse2_SOURCE}\n                               ${fftw_rdft_simd_sse2_SOURCE}\n                               PROPERTIES COMPILE_FLAGS \"${SSE_FLAG}\")\nendif ()\nif (HAVE_SSE2)\n  set_source_files_properties (${fftw_dft_simd_sse2_SOURCE}\n                               ${fftw_rdft_simd_sse2_SOURCE}\n                               PROPERTIES COMPILE_FLAGS \"${SSE2_FLAG}\")\nendif ()\nif (HAVE_AVX)\n  set_source_files_properties (${fftw_dft_simd_avx_SOURCE}\n                               ${fftw_rdft_simd_avx_SOURCE}\n                               PROPERTIES COMPILE_FLAGS \"${AVX_FLAG}\")\nendif ()\nif (HAVE_AVX2)\n  set_source_files_properties (${fftw_dft_simd_avx2_SOURCE}\n                               ${fftw_rdft_simd_avx2_SOURCE}\n                               PROPERTIES COMPILE_FLAGS \"${AVX2_FLAG}\")\nendif ()\nif (HAVE_FMA)\n  set_source_files_properties (${fftw_dft_simd_avx2_SOURCE}\n                               ${fftw_rdft_simd_avx2_SOURCE}\n                               PROPERTIES COMPILE_FLAGS \"${FMA_FLAG}\")\nendif ()\nif (HAVE_LIBM)\n  target_link_libraries (${fftw3_lib} m)\nendif ()\n\nset (subtargets ${fftw3_lib})\n\nif (Threads_FOUND)\n  if (WITH_COMBINED_THREADS)\n    target_link_libraries (${fftw3_lib} ${CMAKE_THREAD_LIBS_INIT})\n  else ()\n    add_library (${fftw3_lib}_threads ${fftw_threads_SOURCE})\n    target_include_directories (${fftw3_lib}_threads INTERFACE $<INSTALL_INTERFACE:include>)\n    target_link_libraries (${fftw3_lib}_threads ${fftw3_lib})\n    target_link_libraries (${fftw3_lib}_threads ${CMAKE_THREAD_LIBS_INIT})\n    list (APPEND subtargets ${fftw3_lib}_threads)\n  endif ()\nendif ()\n\nif (OPENMP_FOUND)\n  add_library (${fftw3_lib}_omp ${fftw_omp_SOURCE})\n  target_include_directories (${fftw3_lib}_omp INTERFACE $<INSTALL_INTERFACE:include>)\n  target_link_libraries (${fftw3_lib}_omp ${fftw3_lib})\n  target_link_libraries (${fftw3_lib}_omp ${CMAKE_THREAD_LIBS_INIT})\n  list (APPEND subtargets ${fftw3_lib}_omp)\n  target_compile_options (${fftw3_lib}_omp PRIVATE ${OpenMP_C_FLAGS})\nendif ()\n\nforeach(subtarget ${subtargets})\n  set_target_properties (${subtarget} PROPERTIES SOVERSION 3.6.9 VERSION 3)\n  install (TARGETS ${subtarget}\n\t  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n\t  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendforeach ()\ninstall(TARGETS ${fftw3_lib}\n          EXPORT FFTW3LibraryDepends\n          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\ninstall (FILES api/fftw3.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\nif (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/api/fftw3.f)\n  install (FILES api/fftw3.f api/fftw3l.f03 api/fftw3q.f03 DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\nendif ()\nif (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/api/fftw3.f03.in)\n  file (READ api/fftw3.f03.in FFTW3_F03_IN OFFSET 42)\n  file (WRITE ${CMAKE_CURRENT_BINARY_DIR}/fftw3.f03 \"! Generated automatically.  DO NOT EDIT!\\n\\n\")\n  file (APPEND ${CMAKE_CURRENT_BINARY_DIR}/fftw3.f03 \"  integer, parameter :: C_FFTW_R2R_KIND = ${C_FFTW_R2R_KIND}\\n\\n\")\n  file (APPEND ${CMAKE_CURRENT_BINARY_DIR}/fftw3.f03 \"${FFTW3_F03_IN}\")\n  install (FILES ${CMAKE_CURRENT_BINARY_DIR}/fftw3.f03 DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\nendif ()\n\nif (BUILD_TESTS)\n\n  add_executable (bench ${fftw_libbench2_SOURCE} tests/bench.c tests/hook.c tests/fftw-bench.c)\n\n  if (ENABLE_THREADS AND NOT WITH_COMBINED_THREADS)\n    target_link_libraries (bench ${fftw3_lib}_threads)\n  else ()\n    target_link_libraries (bench ${fftw3_lib})\n  endif ()\n\n\n  enable_testing ()\n\n  if (Threads_FOUND)\n\n    macro (fftw_add_test problem)\n      add_test (NAME ${problem} COMMAND bench -s ${problem})\n    endmacro ()\n\n    fftw_add_test (32x64)\n    fftw_add_test (ib256)\n\n  endif ()\nendif ()\n\n# pkgconfig file\nset (prefix ${CMAKE_INSTALL_PREFIX})\nset (exec_prefix ${CMAKE_INSTALL_PREFIX})\nset (libdir ${CMAKE_INSTALL_FULL_LIBDIR})\nset (includedir ${CMAKE_INSTALL_FULL_INCLUDEDIR})\nset (VERSION ${FFTW_VERSION})\nconfigure_file (fftw.pc.in fftw3${PREC_SUFFIX}.pc @ONLY)\ninstall (FILES\n          ${CMAKE_CURRENT_BINARY_DIR}/fftw3${PREC_SUFFIX}.pc\n         DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig\n         COMPONENT Development)\n\n# cmake file\nset (FFTW3_LIBRARIES \"FFTW3::${fftw3_lib}\")\nconfigure_file (FFTW3Config.cmake.in FFTW3${PREC_SUFFIX}Config.cmake @ONLY)\nconfigure_file (FFTW3ConfigVersion.cmake.in FFTW3${PREC_SUFFIX}ConfigVersion.cmake @ONLY)\ninstall (FILES\n          ${CMAKE_CURRENT_BINARY_DIR}/FFTW3${PREC_SUFFIX}Config.cmake\n          ${CMAKE_CURRENT_BINARY_DIR}/FFTW3${PREC_SUFFIX}ConfigVersion.cmake\n\t  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/fftw3${PREC_SUFFIX}\n         COMPONENT Development)\n\nexport (TARGETS ${fftw3_lib} NAMESPACE FFTW3:: FILE ${PROJECT_BINARY_DIR}/FFTW3LibraryDepends.cmake)\ninstall(EXPORT FFTW3LibraryDepends\n        NAMESPACE FFTW3::\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/fftw3${PREC_SUFFIX}\n        COMPONENT Development)\n"
        },
        {
          "name": "CONVENTIONS",
          "type": "blob",
          "size": 2.2314453125,
          "content": "Code conventions used internally by fftw3 (not in API):\n\nLEARN FROM THE MASTERS: read Ken Thompson's C compiler in Plan 9.\n   Avoid learning from C++/Java programs.\n\nINDENTATION: K&R, 5 spaces/tab.  In case of doubt, indent -kr -i5.\n\nNAMES: keep them short.  Shorter than you think.  The Bible was written\n   without vowels.  Don't outsmart the Bible.\n\n   Common names:\n\n   R       : real type, aka fftw_real\n   E       : real type for local variables (possibly extra precision)\n   C       : complex type\n   sz      : size\n   vecsz   : vector size\n   is, os  : input/output stride\n   ri, ii  : real/imag input (complex data)\n   ro, io  : real/imag output (complex data)\n   I, O    : real input/output (real data)\n   A       : assert\n   CK      : check\n   S       : solver, defined internally to each solver file\n   P       : plan, defined internally to each solver file\n   k       : codelet\n   X(...)  : used for mangling of external names (see below)\n   K(...)  : floating-point constant, in E precision\n\n   If a name is used often and must have the form fftw_foo to avoid\n   namespace pollution, #define FOO fftw_foo and use the short name.\n\n   Leave that hungarian crap to MS.  foo_t counts as hungarian: use\n   foo instead.  foo is lowercase so that it does not look like a DOS\n   program. Exception: typedef struct foo_s {...} foo;  instead of\n   typedef struct foo {...} foo;  for C++ compatibility.\n\nNAME MANGLING: use X(foo) for external names instead of fftw_foo.\n    X(foo) expands to fftwf_foo or fftw_foo, depending on the\n    precision.  (Unfortunately, this is a ugly form of hungarian\n    notation.  Grrr...)  Names that are not exported do not need to be\n    mangled.\n\nREPEATED CODE: favor a table.  E.g., do not write\n\n    foo(\"xxx\", 1);\n    foo(\"yyy\", 2);\n    foo(\"zzz\", -1);\n\n    Instead write\n\n      struct { const char *nam, int arg } footab[] = {\n\t{ \"xxx\", 1 },\n\t{ \"yyy\", 2 },\n\t{ \"zzz\", -1 }\n      };\n\n    and loop over footab.  Rationale: it saves code space.\n    Similarly, replace a switch statement with a table whenever\n    possible.\n\nC++: The code should compile as a C++ program. Run the code through\n    gcc -xc++ .  The extra C++ restrictions are unnecessary, of\n    course, but this will save us from a flood of complaints when\n    we release the code.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.580078125,
          "content": "\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n     51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Library General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\f\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\f\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\f\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\f\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\f\n\t    How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year  name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Library General\nPublic License instead of this License.\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 0.82421875,
          "content": "/*\n * Copyright (c) 2003, 2007-14 Matteo Frigo\n * Copyright (c) 2003, 2007-14 Massachusetts Institute of Technology\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n *\n */\n"
        },
        {
          "name": "FFTW3Config.cmake.in",
          "type": "blob",
          "size": 0.587890625,
          "content": "# defined since 2.8.3\nif (CMAKE_VERSION VERSION_LESS 2.8.3)\n  get_filename_component (CMAKE_CURRENT_LIST_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)\nendif ()\n\n# Allows loading FFTW3 settings from another project\nset (FFTW3_CONFIG_FILE \"${CMAKE_CURRENT_LIST_FILE}\")\n\nset (FFTW3@PREC_SUFFIX@_LIBRARIES fftw3@PREC_SUFFIX@)\nset (FFTW3@PREC_SUFFIX@_LIBRARY_DIRS @CMAKE_INSTALL_FULL_LIBDIR@)\nset (FFTW3@PREC_SUFFIX@_INCLUDE_DIRS @CMAKE_INSTALL_FULL_INCLUDEDIR@)\n\ninclude (\"${CMAKE_CURRENT_LIST_DIR}/FFTW3LibraryDepends.cmake\" OPTIONAL)\n\nif (CMAKE_VERSION VERSION_LESS 2.8.3)\n  set (CMAKE_CURRENT_LIST_DIR)\nendif ()\n"
        },
        {
          "name": "FFTW3ConfigVersion.cmake.in",
          "type": "blob",
          "size": 0.3759765625,
          "content": "\nset (PACKAGE_VERSION \"@FFTW_VERSION@\")\n\n# Check whether the requested PACKAGE_FIND_VERSION is compatible\nif (\"${PACKAGE_VERSION}\" VERSION_LESS \"${PACKAGE_FIND_VERSION}\")\n  set (PACKAGE_VERSION_COMPATIBLE FALSE)\nelse ()\n  set (PACKAGE_VERSION_COMPATIBLE TRUE)\n  if (\"${PACKAGE_VERSION}\" VERSION_EQUAL \"${PACKAGE_FIND_VERSION}\")\n    set (PACKAGE_VERSION_EXACT TRUE)\n  endif ()\nendif ()\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 5.1396484375,
          "content": "OPTIONS_AUTOMAKE=gnu\nlib_LTLIBRARIES = libfftw3@PREC_SUFFIX@.la\n\n# pkgincludedir = $(includedir)/fftw3@PREC_SUFFIX@\n# nodist_pkginclude_HEADERS = config.h\n\n# recompile genfft if maintainer mode is true\nif MAINTAINER_MODE\nGENFFT = genfft\nEXTRA_libfftw3@PREC_SUFFIX@_la_DEPENDENCIES = assert-shared-version-info\nelse\nGENFFT =\nendif\n\nACLOCAL_AMFLAGS=-I m4\n\n# when using combined thread libraries (necessary on Windows), we want\n# to build threads/ first, because libfftw3_threads is added to\n# libfftw3.\n#\n# Otherwise, we want to build libfftw3_threads after libfftw3\n# so that we can track the fact that libfftw3_threads depends upon\n# libfftw3.\n#\n# This is the inescapable result of combining three bad ideas\n# (threads, Windows, and shared libraries).\n#\nif COMBINED_THREADS\nCHICKEN_EGG=threads .\nelse\nCHICKEN_EGG=. threads\nendif\n\n# Only build in doc/ if not disabled by user (i.e. not all\n# tools are available, such as fig2dev in maintainer mode)\nif BUILD_DOC\nDOCDIR=doc\nelse\nDOCDIR=\nendif\n\nSUBDIRS=support $(GENFFT) kernel simd-support dft rdft reodft api\t\\\nlibbench2 $(CHICKEN_EGG) tests mpi $(DOCDIR) tools m4\nEXTRA_DIST=COPYRIGHT bootstrap.sh CONVENTIONS fftw.pc.in\t\\\nCMakeLists.txt cmake.config.h.in FFTW3Config.cmake.in\t\t\\\nFFTW3ConfigVersion.cmake.in README-perfcnt.md\n\nSIMD_LIBS = simd-support/libsimd_support.la\n\nif HAVE_SSE2\nSSE2_LIBS = dft/simd/sse2/libdft_sse2_codelets.la\t\\\nrdft/simd/sse2/librdft_sse2_codelets.la\nendif\n\nif HAVE_AVX\nAVX_LIBS = dft/simd/avx/libdft_avx_codelets.la\t\\\nrdft/simd/avx/librdft_avx_codelets.la\nendif\n\nif HAVE_AVX_128_FMA\nAVX_128_FMA_LIBS = dft/simd/avx-128-fma/libdft_avx_128_fma_codelets.la \\\nrdft/simd/avx-128-fma/librdft_avx_128_fma_codelets.la\nendif\n\nif HAVE_AVX2\nAVX2_LIBS = dft/simd/avx2/libdft_avx2_codelets.la\t\\\ndft/simd/avx2-128/libdft_avx2_128_codelets.la \\\nrdft/simd/avx2/librdft_avx2_codelets.la \\\nrdft/simd/avx2-128/librdft_avx2_128_codelets.la\nendif\n\nif HAVE_AVX512\nAVX512_LIBS = dft/simd/avx512/libdft_avx512_codelets.la\t\\\nrdft/simd/avx512/librdft_avx512_codelets.la\nendif\n\nif HAVE_KCVI\nKCVI_LIBS = dft/simd/kcvi/libdft_kcvi_codelets.la\t\\\nrdft/simd/kcvi/librdft_kcvi_codelets.la\nendif\n\nif HAVE_ALTIVEC\nALTIVEC_LIBS = dft/simd/altivec/libdft_altivec_codelets.la\t\\\nrdft/simd/altivec/librdft_altivec_codelets.la\nendif\n\nif HAVE_VSX\nVSX_LIBS = dft/simd/vsx/libdft_vsx_codelets.la      \\\nrdft/simd/vsx/librdft_vsx_codelets.la\nendif\n\nif HAVE_NEON\nNEON_LIBS = dft/simd/neon/libdft_neon_codelets.la\t\\\nrdft/simd/neon/librdft_neon_codelets.la\nendif\n\nif HAVE_GENERIC_SIMD128\nGENERIC_SIMD128_LIBS = dft/simd/generic-simd128/libdft_generic_simd128_codelets.la \\\nrdft/simd/generic-simd128/librdft_generic_simd128_codelets.la\nendif\n\nif HAVE_GENERIC_SIMD256\nGENERIC_SIMD256_LIBS = dft/simd/generic-simd256/libdft_generic_simd256_codelets.la      \\\nrdft/simd/generic-simd256/librdft_generic_simd256_codelets.la\nendif\n\nif THREADS\nif COMBINED_THREADS\nCOMBINED_THREADLIBS=threads/libfftw3@PREC_SUFFIX@_threads.la\nendif\nendif\n\nlibfftw3@PREC_SUFFIX@_la_SOURCES = \n\nlibfftw3@PREC_SUFFIX@_la_LIBADD =\t\t\t\\\n\tkernel/libkernel.la\t\t\t\t\\\n\tdft/libdft.la\t\t\t\t\t\\\n\tdft/scalar/libdft_scalar.la\t\t\t\\\n\tdft/scalar/codelets/libdft_scalar_codelets.la\t\\\n\trdft/librdft.la\t\t\t\t\t\\\n\trdft/scalar/librdft_scalar.la\t\t\t\\\n\trdft/scalar/r2cf/librdft_scalar_r2cf.la\t\t\\\n\trdft/scalar/r2cb/librdft_scalar_r2cb.la\t\t\\\n\trdft/scalar/r2r/librdft_scalar_r2r.la\t\t\\\n\treodft/libreodft.la\t\t\t\t\\\n\tapi/libapi.la\t\t\t\t\t\\\n        $(SIMD_LIBS) $(SSE2_LIBS) $(AVX_LIBS) $(AVX_128_FMA_LIBS) \\\n        $(AVX2_LIBS) $(ALTIVEC_LIBS) \\\n        $(VSX_LIBS) $(NEON_LIBS) $(KCVI_LIBS) $(AVX512_LIBS) \\\n        $(GENERIC_SIMD128_LIBS) $(GENERIC_SIMD256_LIBS) \\\n\t$(COMBINED_THREADLIBS)\n\nif QUAD\n# cannot use -no-undefined since dependent on libquadmath\nlibfftw3@PREC_SUFFIX@_la_LDFLAGS = -version-info @SHARED_VERSION_INFO@ $(ENVIRONMENT_LIBFFTW3_LDFLAGS)\nelse\nlibfftw3@PREC_SUFFIX@_la_LDFLAGS = -no-undefined -version-info\t\\\n@SHARED_VERSION_INFO@  $(ENVIRONMENT_LIBFFTW3_LDFLAGS)\nendif\n\nfftw3@PREC_SUFFIX@.pc: fftw.pc\n\tcp -f fftw.pc fftw3@PREC_SUFFIX@.pc\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = fftw3@PREC_SUFFIX@.pc\n\nFFTW3@PREC_SUFFIX@Config.cmake: $(top_srcdir)/FFTW3Config.cmake.in\n\t$(SED) \\\n\t\t-e 's|[@]PREC_SUFFIX@|@PREC_SUFFIX@|g' \\\n\t\t-e 's|[@]CMAKE_INSTALL_FULL_LIBDIR@|$(libdir)|g' \\\n\t\t-e 's|[@]CMAKE_INSTALL_FULL_INCLUDEDIR@|$(includedir)|g' \\\n\t\t$(top_srcdir)/FFTW3Config.cmake.in > $@\nFFTW3@PREC_SUFFIX@ConfigVersion.cmake: $(top_srcdir)/FFTW3ConfigVersion.cmake.in\n\t$(SED) \\\n\t\t-e 's|[@]FFTW_VERSION@|@PACKAGE_VERSION@|g' \\\n\t\t$(top_srcdir)/FFTW3ConfigVersion.cmake.in > $@\ncmakedir = $(libdir)/cmake/fftw3\ncmake_DATA = FFTW3@PREC_SUFFIX@Config.cmake FFTW3@PREC_SUFFIX@ConfigVersion.cmake\n\nWISDOM_DIR = /etc/fftw\nWISDOM = wisdom@PREC_SUFFIX@\n\nWISDOM_TIME=12 # default to 12-hour limit, i.e. overnight\nWISDOM_FLAGS=--verbose --canonical --time-limit=$(WISDOM_TIME)\n\nwisdom:\n\ttools/fftw@PREC_SUFFIX@-wisdom -o $@ $(WISDOM_FLAGS)\n\ninstall-wisdom: wisdom\n\t$(mkinstalldirs) $(WISDOM_DIR)\n\t$(INSTALL_DATA) wisdom $(WISDOM_DIR)/$(WISDOM)\n\nif MAINTAINER_MODE\nassert-shared-version-info:\n\tcurrent=`echo @SHARED_VERSION_INFO@ | cut -d: -f1`;\t\\\n\tage=`echo @SHARED_VERSION_INFO@ | cut -d: -f3`;\t\t\\\n\tmajor=3;\t\t\t\t\t\t\\\n\texpected=`expr $$age + $$major`;\t\t\t\\\n\ttest $$current -eq $$expected\nendif\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 24.7724609375,
          "content": "FFTW 3.3.10:\n\n* Fix bug that would cause 2-way SIMD (notably SSE2 in double precision)\n  to attempt unaligned accesses in certain obscure cases, causing\n  segfaults.\n  \n  The following test triggers the bug (SSE2, double precision):\n\n    ./tests/bench -oexhaustive r4*2:5:3\n\n  This test computes a pair of length-4 real->complex transforms where\n  the second input is 5 real numbers away from the first input.  That\n  is, there is a gap of one real number between the first and second\n  input array.  The -oexhaustive level allow FFTW to attempt to\n  compute this transform by reducing it to a pair of complex\n  transforms of length 2, but now the second input is not aligned to a\n  complex-number boundary.  The fact that 5 is odd is the problem.\n\n  The bug cannot occur in complex->complex transforms because the\n  complex interface accepts strides in units of complex numbers, so\n  strides are aligned by construction.\n  \n  This bug has been around at least since fftw-3.1.2 (July 2006), and\n  probably since fftw-3.0 (2003).\n\nFFTW 3.3.9:\n\n* New API fftw_planner_nthreads() returns the number of threads\n  currently being used by the planner.\n\n* Fix incorrect math in 128-bit generic SIMD\n\n* Fix wisdom for avx512.\n\n  The avx512 alignment requirement was set to 64 bytes, but this is\n  wrong.  Alignment requirements are a property of the platform (e.g.,\n  x86) and not of the instruction set (e.g., AVX).  Among other\n  things, this broke wisdom with avx512.\n\n  Note that avx512 support is still experimental because the FFTW\n  authors have no avx512 hardware available for testing.\n\n* fftw_threads_set_callback function to change the threading backend at runtime.\n\nFFTW 3.3.8:\n\n* Fixed AVX, AVX2 for gcc-8.\n\n  By default, FFTW 3.3.7 was broken with gcc-8.  AVX and AVX2 code\n  assumed that the compiler honors the distinction between +0 and -0,\n  but gcc-8 -ffast-math does not.  The default CFLAGS included -ffast-math.\n  This release ensures that FFTW works with gcc-8 -ffast-math, and\n  removes -ffast-math from the default CFLAGS for good measure.\n\nFFTW 3.3.7:\n\n* Experimental support for CMake.\n\n  The primary build mechanism for FFTW remains GNU autoconf/automake.\n  CMake support is meant to offer an easy way to compile FFTW on\n  Windows, and as such it does not cover all the features of the\n  automake build system, such as exotic cycle counters,\n  cross-compiling, or build of binaries for a mixture of ISA's\n  (e.g., amd64 vs amd64+avx vs amd64+avx2).  Patches are welcome.\n\n* Fixes for armv7a cycle counter.\n* Official support for aarch64, now that we have hardware to test it.\n* Tweak usage of FMA instructions in a way that favors newer processors\n  (Skylake and Ryzen) over older processors (Haswell).\n* tests/bench: use 64-bit precision to compute mflops.\n\nFFTW 3.3.6-pl2:\n\n* Bugfix: MPI Fortran-03 headers were missing in FFTW 3.3.6-pl1.\n\nFFTW 3.3.6-pl1:\n\n* Bugfix: FFTW 3.3.6 had the wrong libtool version number, and generated\n  shared libraries of the form libfftw3.so.2.6.6 instead of\n  libfftw3.so.3.*.\n\nFFTW 3.3.6:\n\n* The fftw_make_planner_thread_safe() API introduced in 3.3.5 didn't\n  work, and this 3.3.6 fixes it.  Sorry about that.\n* compilation fixes for IBM XLC\n* compilation fixes for threads on Windows\n* fix SIMD autodetection on amd64 when (_MSC_VER > 1500)\n\nFFTW 3.3.5:\n\n* New SIMD support:\n  - Power8 VSX instructions in single and double precision.\n    To use, add --enable-vsx to configure.\n  - Support for AVX2 (256-bit FMA instructions).\n    To use, add --enable-avx2 to configure.\n  - Experimental support for AVX512 and KCVI. (--enable-avx512, --enable-kcvi)\n    This code is expected to work but the FFTW maintainers do not have\n    hardware to test it.\n  - Support for AVX128/FMA (for some AMD machines) (--enable-avx128-fma)\n  - Double precision Neon SIMD for aarch64.\n    This code is expected to work but the FFTW maintainers do not have\n    hardware to test it.\n  - generic SIMD support using gcc vector intrinsics\n* Add fftw_make_planner_thread_safe() API\n* fix #18 (disable float128 for CUDACC)\n* fix #19: missing Fortran interface for fftwq_alloc_real\n* fix #21 (don't use float128 on Portland compilers, which pretend to be gcc)\n* fix: Avoid segfaults due to double free in MPI transpose\n\n* Special note for distribution maintainers: Although FFTW supports a\n  zillion SIMD instruction sets, enabling them all at the same time is\n  a bad idea, because it increases the planning time for minimal gain.\n  We recommend that general-purpose x86 distributions only enable SSE2\n  and perhaps AVX.  Users who care about the last ounce of performance\n  should recompile FFTW themselves.\n\nFFTW 3.3.4\n\n* New functions fftw_alignment_of (to check whether two arrays are\n  equally aligned for the purposes of applying a plan) and fftw_sprint_plan\n  (to output a description of plan to a string).\n\n* Bugfix in fftw-wisdom-to-conf; thanks to Florian Oppermann for the\n  bug report.\n\n* Fixed manual to work with texinfo-5.\n\n* Increased timing interval on x86_64 to reduce timing errors.\n\n* Default to Win32 threads, not pthreads, if both are present.\n\n* Various build-script fixes.\n\nFFTW 3.3.3\n\n* Fix deadlock bug in MPI transforms (thanks to Michael Pippig for the\n  bug report and patch, and to Graham Dennis for the bug report).\n\n* Use 128-bit ARM NEON instructions instead of 64-bits.  This change\n  appears to speed up even ARM processors with a 64-bit NEON pipe.\n\n* Speed improvements for single-precision AVX.\n\n* Speed up planner on machines without \"official\" cycle counters, such as ARM.\n\nFFTW 3.3.2\n\n* Removed an archaic stack-alignment hack that was failing with\n  gcc-4.7/i386.\n\n* Added stack-alignment hack necessary for gcc on Windows/i386.  We\n  will regret this in ten years (see previous change).\n\n* Fix incompatibility with Intel icc which pretends to be gcc\n  but does not support quad precision.\n\n* make libfftw{threads,mpi} depend upon libfftw when using libtool;\n  this is consistent with most other libraries and simplifies the life\n  of various distributors of GNU/Linux.\n\nFFTW 3.3.1\n\n* Changes since 3.3.1-beta1:\n\n  - Reduced planning time in estimate mode for sizes with large\n    prime factors.\n\n  - Added AVX autodetection under Visual Studio.  Thanks Carsten\n    Steger for submitting the necessary code.\n\n  - Modern Fortran interface now uses a separate fftw3l.f03 interface\n    file for the long double interface, which is not supported by\n    some Fortran compilers.  Provided new fftw3q.f03 interface file\n    to access the quadruple-precision FFTW routines with recent\n    versions of gcc/gfortran.\n\n* Added support for the NEON extensions to the ARM ISA.  (Note to beta\n  users: an ARM cycle counter is not yet implemented; please contact\n  fftw@fftw.org if you know how to do it right.)\n\n* MPI code now compiles even if mpicc is a C++ compiler; thanks to\n  Kyle Spyksma for the bug report.\n\nFFTW 3.3\n\n* Changes since 3.3-beta1:\n\n  - Compiling OpenMP support (--enable-openmp) now installs a\n    fftw3_omp library, instead of fftw3_threads, so that OpenMP\n    and POSIX threads (--enable-threads) libraries can be built\n    and installed at the same time.\n\n  - Various minor compilation fixes, corrections of manual typos, and\n    improvements to the benchmark test program.\n\n* Add support for the AVX extensions to x86 and x86-64.  The AVX code\n  works with 16-byte alignment (as opposed to 32-byte alignment),\n  so there is no ABI change compared to FFTW 3.2.2.\n\n* Added Fortran 2003 interface, which should be usable on most modern\n  Fortran compilers (e.g. gfortran) and provides type-checked access\n  to the the C FFTW interface.  (The legacy Fortran-77 interface is\n  still included also.)\n\n* Added MPI distributed-memory transforms.  Compared to 3.3alpha,\n  the major changes in the MPI transforms are:\n    - Fixed some deadlock and crashing bugs.\n    - Added Fortran 2003 interface.\n    - Added new-array execute functions for MPI plans.\n    - Eliminated use of large MPI tags, since Cray MPI requires tags < 2^24;\n      thanks to Jonathan Bentz for the bug report.\n    - Expanded documentation.\n    - 'make check' now runs MPI tests\n    - Some ABI changes - not binary-compatible with 3.3alpha MPI.\n\n* Add support for quad-precision __float128 in gcc 4.6 or later (on x86.\n  x86-64, and Itanium).  The new routines use the fftwq_ prefix.\n\n* Removed support for MIPS paired-single instructions due to lack of\n  available hardware for testing.  Users who want this functionality\n  should continue using FFTW 3.2.x.  (Note that FFTW 3.3 still works\n  on MIPS; this only concerns special instructions available on some\n  MIPS chips.)\n\n* Removed support for the Cell Broadband Engine.  Cell users should\n  use FFTW 3.2.x.\n\n* New convenience functions fftw_alloc_real and fftw_alloc_complex\n  to use fftw_malloc for real and complex arrays without typecasts\n  or sizeof.\n\n* New convenience functions fftw_export_wisdom_to_filename and\n  fftw_import_wisdom_from_filename that export/import wisdom\n  to a file, which don't require you to open/close the file yourself.\n\n* New function fftw_cost to return FFTW's internal cost metric for\n  a given plan; thanks to Rhys Ulerich and Nathanael Schaeffer for the\n  suggestion.\n\n* The --enable-sse2 configure flag now works in both double and single\n  precision (and is equivalent to --enable-sse in the latter case).\n\n* Remove --enable-portable-binary flag: we new produce portable binaries\n  by default.\n\n* Remove the automatic detection of native architecture flag for gcc\n  which was introduced in fftw-3.1, since new gcc supports -mtune=native.\n  Remove the --with-gcc-arch flag; if you want to specify a particular\n  arch to configure, use ./configure CC=\"gcc -mtune=...\".\n\n* --with-our-malloc16 configure flag is now renamed --with-our-malloc.\n\n* Fixed build problem failure when srand48 declaration is missing;\n  thanks to Ralf Wildenhues for the bug report.\n\n* Fixed bug in fftw_set_timelimit: ensure that a negative timelimit\n  is equivalent to no timelimit in all cases.  Thanks to William Andrew\n  Burnson for the bug report.\n\n* Fixed stack-overflow problem on OpenBSD caused by using alloca with\n  too large a buffer.\n\nFFTW 3.2.2\n\n* Improve performance of some copy operations of complex arrays on\n  x86 machines.\n\n* Add configure flag to disable alloca(), which is broken in mingw64.\n\n* Planning in FFTW_ESTIMATE mode for r2r transforms became slower\n  between fftw-3.1.3 and 3.2.  This regression has now been fixed.\n\nFFTW 3.2.1\n\n* Performance improvements for some multidimensional r2c/c2r transforms;\n  thanks to Eugene Miloslavsky for his benchmark reports.\n\n* Compile with icc on MacOS X, use better icc compiler flags.\n\n* Compilation fixes for systems where snprintf is defined as a macro;\n  thanks to Marcus Mae for the bug report.\n\n* Fortran documentation now recommends not using dfftw_execute,\n  because of reports of problems with various Fortran compilers;\n  it is better to use dfftw_execute_dft etcetera.\n\n* Some documentation clarifications, e.g. of fact that --enable-openmp\n  and --enable-threads are mutually exclusive (thanks to Long To),\n  and document slightly odd behavior of plan_guru_r2r in Fortran\n  (thanks to Alexander Pozdneev).\n\n* FAQ was accidentally omitted from 3.2 tarball.\n\n* Remove some extraneous (harmless) files accidentally included in\n  a subdirectory of the 3.2 tarball.\n\nFFTW 3.2\n\n* Worked around apparent glibc bug that leads to rare hangs when freeing\n  semaphores.\n\n* Fixed segfault due to unaligned access in certain obscure problems\n  that use SSE and multiple threads.\n\n* MPI transforms not included, as they are still in alpha; the alpha\n  versions of the MPI transforms have been moved to FFTW 3.3alpha1.\n\nFFTW 3.2alpha3\n\n* Performance improvements for sizes with factors of 5 and 10.\n\n* Documented FFTW_WISDOM_ONLY flag, at the suggestion of Mario\n  Emmenlauer and Phil Dumont.\n\n* Port Cell code to SDK2.1 (libspe2), as opposed to the old libspe1 code.\n\n* Performance improvements in Cell code for N < 32k, thanks to Jan Wagner\n  for the suggestions.\n\n* Cycle counter for Sun x86_64 compiler, and compilation fix in cycle\n  counter for AIX/xlc (thanks to Jeff Haferman for the bug report).\n\n* Fixed incorrect type prefix in MPI code that prevented wisdom routines\n  from working in single precision (thanks to Eric A. Borisch for the report).\n\n* Added 'make check' for MPI code (which still fails in a couple corner\n  cases, but should be much better than in alpha2).\n\n* Many other small fixes.\n\nFFTW 3.2alpha2\n\n* Support for the Cell processor, donated by IBM Research; see README.Cell\n  and the Cell section of the manual.\n\n* New 64-bit API: for every \"plan_guru\" function there is a new \"plan_guru64\"\n  function with the same semantics, but which takes fftw_iodim64 instead of\n  fftw_iodim.  fftw_iodim64 is the same as fftw_iodim, except that it takes\n  ptrdiff_t integer types as parameters, which is a 64-bit type on\n  64-bit machines.  This is only useful for specifying very large transforms\n  on 64-bit machines.  (Internally, FFTW uses ptrdiff_t everywhere\n  regardless of what API you choose.)\n\n* Experimental MPI support.  Complex one- and multi-dimensional FFTs,\n  multi-dimensional r2r, multi-dimensional r2c/c2r transforms, and\n  distributed transpose operations, with 1d block distributions.\n  (This is an alpha preview: routines have not been exhaustively\n  tested, documentation is incomplete, and some functionality is\n  missing, e.g. Fortran support.)  See mpi/README and also the MPI\n  section of the manual.\n\n* Significantly faster r2c/c2r transforms, especially on machines with SIMD.\n\n* Rewritten multi-threaded support for better performance by\n  re-using a fixed pool of threads rather than continually\n  respawning and joining (which nowadays is much slower).\n\n* Support for MIPS paired-single SIMD instructions, donated by\n  Codesourcery.\n\n* FFTW_WISDOM_ONLY planner flag, to create plan only if wisdom is\n  available and return NULL otherwise.\n\n* Removed k7 support, which only worked in 32-bit mode and is\n  becoming obsolete.  Use --enable-sse instead.\n\n* Added --with-g77-wrappers configure option to force inclusion\n  of g77 wrappers, in addition to whatever is needed for the\n  detected Fortran compilers.  This is mainly intended for GNU/Linux\n  distros switching to gfortran that wish to include both\n  gfortran and g77 support in FFTW.\n\n* In manual, renamed \"guru execute\" functions to \"new-array execute\"\n  functions, to reduce confusion with the guru planner interface.\n  (The programming interface is unchanged.)\n\n* Add missing __declspec attribute to threads API functions when compiling\n  for Windows; thanks to Robert O. Morris for the bug report.\n\n* Fixed missing return value from dfftw_init_threads in Fortran;\n  thanks to Markus Wetzstein for the bug report.\n\nFFTW 3.1.3\n\n* Bug fix: FFTW computes incorrect results when the user plans both\n  REDFT11 and RODFT11 transforms of certain sizes.  The bug is caused\n  by incorrect sharing of twiddle-factor tables between the two\n  transforms, and only occurs when both are used.  Thanks to Paul\n  A. Valiant for the bug report.\n\nFFTW 3.1.2\n\n* Correct bug in configure script: --enable-portable-binary option was ignored!\n  Thanks to Andrew Salamon for the bug report.\n\n* Threads compilation fix on AIX: prefer xlc_r to cc_r, and don't use\n  either if we are using gcc.  Thanks to Guy Moebs for the bug report.\n\n* Updated FAQ to note that Apple gcc 4.0.1 on MacOS/Intel is broken,\n  and suggest a workaround.  configure script now detects Core/Duo arch.\n\n* Use -maltivec when checking for altivec.h.  Fixes Gentoo bug #129304,\n  thanks to Markus Dittrich.\n\nFFTW 3.1.1\n\n* Performance improvements for Intel EMT64.\n\n* Performance improvements for large-size transforms with SIMD.\n\n* Cycle counter support for Intel icc and Visual C++ on x86-64.\n\n* In fftw-wisdom tool, replaced obsolete --impatient with --measure.\n\n* Fixed compilation failure with AIX/xlc; thanks to Joseph Thomas.\n\n* Windows DLL support for Fortran API (added missing __declspec(dllexport)).\n\n* SSE/SSE2 code works properly (i.e. disables itself) on older 386 and 486\n  CPUs lacking a CPUID instruction; thanks to Eric Korpela.\n\nFFTW 3.1\n\n* Faster FFTW_ESTIMATE planner.\n\n* New (faster) algorithm for REDFT00/RODFT00 (type-I DCT/DST) of odd size.\n\n* \"4-step\" algorithm for faster FFTs of very large sizes (> 2^18).\n\n* Faster in-place real-data DFTs (for R2HC and HC2R r2r formats).\n\n* Faster in-place non-square transpositions (FFTW uses these internally\n  for in-place FFTs, and you can also perform them explicitly using\n  the guru interface).\n\n* Faster prime-size DFTs: implemented Bluestein's algorithm, as well\n  as a zero-padded Rader variant to limit recursive use of Rader's algorithm.\n\n* SIMD support for split complex arrays.\n\n* Much faster Altivec/VMX performance.\n\n* New fftw_set_timelimit function to specify a (rough) upper bound to the\n  planning time (does not affect ESTIMATE mode).\n\n* Removed --enable-3dnow support; use --enable-k7 instead.\n\n* FMA (fused multiply-add) version is now included in \"standard\" FFTW,\n  and is enabled with --enable-fma (the default on PowerPC and Itanium).\n\n* Automatic detection of native architecture flag for gcc.  New\n  configure options: --enable-portable-binary and --with-gcc-arch=<arch>,\n  for people distributing compiled binaries of FFTW (see manual).\n\n* Automatic detection of Altivec under Linux with gcc 3.4 (so that\n  same binary should work on both Altivec and non-Altivec PowerPCs).\n\n* Compiler-specific tweaks/flags/workarounds for gcc 3.4, xlc, HP/UX,\n  Solaris/Intel.\n\n* Various documentation clarifications.\n\n* 64-bit clean.  (Fixes a bug affecting the split guru planner on\n  64-bit machines, reported by David Necas.)\n\n* Fixed Debian bug #259612: inadvertent use of SSE instructions on\n  non-SSE machines (causing a crash) for --enable-sse binaries.\n\n* Fixed bug that caused HC2R transforms to destroy the input in\n  certain cases, even if the user specified FFTW_PRESERVE_INPUT.\n\n* Fixed bug where wisdom would be lost under rare circumstances,\n  causing excessive planning time.\n\n* FAQ notes bug in gcc-3.4.[1-3] that causes FFTW to crash with SSE/SSE2.\n\n* Fixed accidentally exported symbol that prohibited simultaneous\n  linking to double/single multithreaded FFTW (thanks to Alessio Massaro).\n\n* Support Win32 threads under MinGW (thanks to Alessio Massaro).\n\n* Fixed problem with building DLL under Cygwin; thanks to Stephane Fillod.\n\n* Fix build failure if no Fortran compiler is found (thanks to Charles\n  Radley for the bug report).\n\n* Fixed compilation failure with icc 8.0 and SSE/SSE2.  Automatic\n  detection of icc architecture flag (e.g. -xW).\n\n* Fixed compilation with OpenMP on AIX (thanks to Greg Bauer).\n\n* Fixed compilation failure on x86-64 with gcc (thanks to Orion Poplawski).\n\n* Incorporated patch from FreeBSD ports (FreeBSD does not have memalign,\n  but its malloc is 16-byte aligned).\n\n* Cycle-counter compilation fixes for Itanium, Alpha, x86-64, Sparc,\n  MacOS (thanks to Matt Boman, John Bowman, and James A. Treacy for\n  reports/fixes).  Added x86-64 cycle counter for PGI compilers,\n  courtesy Cristiano Calonaci.\n\n* Fix compilation problem in test program due to C99 conflict.\n\n* Portability fix for import_system_wisdom with djgpp (thanks to Juan\n  Manuel Guerrero).\n\n* Fixed compilation failure on MacOS 10.3 due to getopt conflict.\n\n* Work around Visual C++ (version 6/7) bug in SSE compilation;\n  thanks to Eddie Yee for his detailed report.\n\nChanges from FFTW 3.1 beta 2:\n\n* Several minor compilation fixes.\n\n* Eliminate FFTW_TIMELIMIT flag and replace fftw_timelimit global with\n  fftw_set_timelimit function.  Make wisdom work with time-limited plans.\n\nChanges from FFTW 3.1 beta 1:\n\n* Fixes for creating DLLs under Windows; thanks to John Pavel for his feedback.\n\n* Fixed more 64-bit problems, thanks to John Pavel for the bug report.\n\n* Further speed improvements for Altivec/VMX.\n\n* Further speed improvements for non-square transpositions.\n\n* Many minor tweaks.\n\nFFTW 3.0.1\n\n* Some speed improvements in SIMD code.\n\n* --without-cycle-counter option is removed.  If no cycle counter is found,\n  then the estimator is always used.  A --with-slow-timer option is provided\n  to force the use of lower-resolution timers.\n\n* Several fixes for compilation under Visual C++, with help from Stefane Ruel.\n\n* Added x86 cycle counter for Visual C++, with help from Morten Nissov.\n\n* Added S390 cycle counter, courtesy of James Treacy.\n\n* Added missing static keyword that prevented simultaneous linkage\n  of different-precision versions; thanks to Rasmus Larsen for the bug report.\n\n* Corrected accidental omission of f77_wisdom.f file; thanks to Alan Watson.\n\n* Support -xopenmp flag for SunOS; thanks to John Lou for the bug report.\n\n* Compilation with HP/UX cc requires -Wp,-H128000 flag to increase\n  preprocessor limits; thanks to Peter Vouras for the bug report.\n\n* Removed non-portable use of 'tempfile' in fftw-wisdom-to-conf script;\n  thanks to Nicolas Decoster for the patch.\n\n* Added 'make smallcheck' target in tests/ directory, at the request of\n  James Treacy.\n\nFFTW 3.0\n\nMajor goals of this release:\n\n* Speed: often 20% or more faster than FFTW 2.x, even without SIMD (see below).\n\n* Complete rewrite, to make it easier to add new algorithms and transforms.\n\n* New API, to support more general semantics.\n\nOther enhancements:\n\n* SIMD acceleration on supporting CPUs (SSE, SSE2, 3DNow!, and AltiVec).\n (With special thanks to Franz Franchetti for many experimental prototypes\n  and to Stefan Kral for the vectorizing generator from fftwgel.)\n\n* True in-place 1d transforms of large sizes (as well as compressed\n  twiddle tables for additional memory/cache savings).\n\n* More arbitrary placement of real & imaginary data, e.g. including\n  interleaved (as in FFTW 2.x) as well as separate real/imag arrays.\n\n* Efficient prime-size transforms of real data.\n\n* Multidimensional transforms can operate on a subset of a larger matrix,\n  and/or transform selected dimensions of a multidimensional array.\n\n* By popular demand, simultaneous linking to double precision (fftw),\n  single precision (fftwf), and long-double precision (fftwl) versions\n  of FFTW is now supported.\n\n* Cycle counters (on all modern CPUs) are exploited to speed planning.\n\n* Efficient transforms of real even/odd arrays, a.k.a. discrete\n  cosine/sine transforms (types I-IV).  (Currently work via pre/post\n  processing of real transforms, ala FFTPACK, so are not optimal.)\n\n* DHTs (Discrete Hartley Transforms), again via post-processing\n  of real transforms (and thus suboptimal, for now).\n\n* Support for linking to just those parts of FFTW that you need,\n  greatly reducing the size of statically linked programs when\n  only a limited set of transform sizes/types are required.\n\n* Canonical global wisdom file (/etc/fftw/wisdom) on Unix, along\n  with a command-line tool (fftw-wisdom) to generate/update it.\n\n* Fortran API can be used with both g77 and non-g77 compilers\n  simultaneously.\n\n* Multi-threaded version has optional OpenMP support.\n\n* Authors' good looks have greatly improved with age.\n\nChanges from 3.0beta3:\n\n* Separate FMA distribution to better exploit fused multiply-add instructions\n  on PowerPC (and possibly other) architectures.\n\n* Performance improvements via some inlining tweaks.\n\n* fftw_flops now returns double arguments, not int, to avoid overflows\n  for large sizes.\n\n* Workarounds for automake bugs.\n\nChanges from 3.0beta2:\n\n* The standard REDFT00/RODFT00 (DCT-I/DST-I) algorithm (used in\n  FFTPACK, NR, etcetera) turns out to have poor numerical accuracy, so\n  we replaced it with a slower routine that is more accurate.\n\n* The guru planner and execute functions now have two variants, one that\n  takes complex arguments and one that takes separate real/imag pointers.\n\n* Execute and planner routines now automatically align the stack on x86,\n  in case the calling program is misaligned.\n\n* README file for test program.\n\n* Fixed bugs in the combination of SIMD with multi-threaded transforms.\n\n* Eliminated internal fftw_threads_init function, which some people were\n  calling accidentally instead of the fftw_init_threads API function.\n\n* Check for -openmp flag (Intel C compiler) when --enable-openmp is used.\n\n* Support AMD x86-64 SIMD and cycle counter.\n\n* Support SSE2 intrinsics in forthcoming gcc 3.3.\n\nChanges from 3.0beta1:\n\n* Faster in-place 1d transforms of non-power-of-two sizes.\n\n* SIMD improvements for in-place, multi-dimensional, and/or non-FFTW_PATIENT\n  transforms.\n\n* Added support for hard-coded DCT/DST/DHT codelets of small sizes; the\n  default distribution only includes hard-coded size-8 DCT-II/III, however.\n\n* Many minor improvements to the manual.  Added section on using the\n  codelet generator to customize and enhance FFTW.\n\n* The default 'make check' should now only take a few minutes; for more\n  strenuous tests (which may take a day or so), do 'cd tests; make bigcheck'.\n\n* fftw_print_plan is split into fftw_fprint_plan and fftw_print_plan, where\n  the latter uses stdout.\n\n* Fixed ability to compile with a C++ compiler.\n\n* Fixed support for C99 complex type under glibc.\n\n* Fixed problems with alloca under MinGW, AIX.\n\n* Workaround for gcc/SPARC bug.\n\n* Fixed multi-threaded initialization failure on IRIX due to lack of\n  user-accessible PTHREAD_SCOPE_SYSTEM there.\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 2.072265625,
          "content": "FFTW is a free collection of fast C routines for computing the\nDiscrete Fourier Transform in one or more dimensions.  It includes\ncomplex, real, symmetric, and parallel transforms, and can handle\narbitrary array sizes efficiently.  FFTW is typically faster than\nother publically-available FFT implementations, and is even\ncompetitive with vendor-tuned libraries.  (See our web page\nhttp://fftw.org/ for extensive benchmarks.)  To achieve this\nperformance, FFTW uses novel code-generation and runtime\nself-optimization techniques (along with many other tricks).\n\nThe doc/ directory contains the manual in texinfo, PDF, info, and HTML\nformats.  Frequently asked questions and answers can be found in the\ndoc/FAQ/ directory in ASCII and HTML.\n\nFor a quick introduction to calling FFTW, see the \"Tutorial\" section\nof the manual.\n\nINSTALLATION\n------------\n\nINSTALLATION FROM AN OFFICIAL RELEASE:\n\nPlease read chapter 10 \"Installation and Customization\" of the manual.\nIn short:\n\n     ./configure\n     make\n     make install\n\nINSTALLATION FROM THE GIT REPOSITORY:\n\nFirst, install these programs:\n\n  ocaml, ocamlbuild, autoconf, automake, indent, and libtool.\n\nYou also need the ocaml Num library, which was standard in Ocaml but\nwas removed without warning in OCaml 4.06.0 (3 Nov 2017).  On Fedora\n30, try installing the ocaml-num-devel package.\n\nThen, execute\n\n    sh bootstrap.sh\n    make\n    \nThe bootstrap.sh script runs configure directly, but if you need to\nre-run configure, you must pass the --enable-maintainer-mode flag:\n\n    ./configure --enable-maintainer-mode [OTHER CONFIGURE FLAGS]\n\nAlternatively, you can run\n\n    sh mkdist.sh\n\nwhich will run the entire bootstrapping process and generate\n.tar.gz files similar to those for official releases.\n\nCONTACTS\n--------\n\nFFTW was written by Matteo Frigo and Steven G. Johnson.  You can\ncontact them at fftw@fftw.org.  The latest version of FFTW,\nbenchmarks, links, and other information can be found at the FFTW home\npage (http://www.fftw.org).  You can also sign up to the fftw-announce\nGoogle group to receive (infrequent) updates and information about new\nreleases.\n"
        },
        {
          "name": "README-perfcnt.md",
          "type": "blob",
          "size": 3.6982421875,
          "content": "Performance Counters\n====================\n\nFFTW measures execution time in the planning stage, optionally taking advantage\nof hardware performance counters. This document describes the supported\ncounters and additional steps needed to enable each on different architectures.\n\nSee `./configure --help` for flags for enabling each supported counter.\nSee [kernel/cycle.h](kernel/cycle.h) for the code that accesses the counters.\n\nARMv7-A (armv7a)\n================\n\n`CNTVCT`: Virtual Count Register in VMSA\n--------------------------------------\n\nA 64-bit counter part of Virtual Memory System Architecture.\nSection B4.1.34 in ARM Architecture Reference Manual ARMv7-A/ARMv7-R\n\nFor access from user mode, requires `CNTKCTL.PL0VCTEN == 1`, which must\nbe set in kernel mode on each CPU:\n\n        #define CNTKCTL_PL0VCTEN 0x2 /* B4.1.26 in ARM Architecture Rreference */\n        uint32_t r;\n        asm volatile(\"mrc p15, 0, %0, c14, c1, 0\" : \"=r\"(r)); /* read */\n        r |= CNTKCTL_PL0VCTEN;\n        asm volatile(\"mcr p15, 0, %0, c14, c1, 0\" :: \"r\"(r)); /* write */\n\nKernel module source *which can be patched with the above code* available at:\nhttps://github.com/thoughtpolice/enable_arm_pmu\n\n`PMCCNTR`: Performance Monitors Cycle Count Register in VMSA\n----------------------------------------------------------\n\nA 32-bit counter part of Virtual Memory System Architecture.\nSection B4.1.113 in ARM Architecture Reference Manual ARMv7-A/ARMv7-R\n\nFor access from user mode, requires user-mode access to PMU to be enabled\n(`PMUSERENR.EN == 1`), which must be done from kernel mode on each CPU:\n\n        #define PERF_DEF_OPTS (1 | 16)\n        /* enable user-mode access to counters */\n        asm volatile(\"mcr p15, 0, %0, c9, c14, 0\" :: \"r\"(1));\n        /* Program PMU and enable all counters */\n        asm volatile(\"mcr p15, 0, %0, c9, c12, 0\" :: \"r\"(PERF_DEF_OPTS));\n        asm volatile(\"mcr p15, 0, %0, c9, c12, 1\" :: \"r\"(0x8000000f));\n\nKernel module source with the above code available at:\n[GitHub thoughtpolice/enable\\_arm\\_pmu](https://github.com/thoughtpolice/enable_arm_pmu)\n\nMore information:\nhttp://neocontra.blogspot.com/2013/05/user-mode-performance-counters-for.html\n\nARMv8-A (aarch64)\n=================\n\n`CNTVCT_EL0`: Counter-timer Virtual Count Register\n------------------------------------------------\n\nA 64-bit counter, part of Generic Registers.\nSection D8.5.17 in ARM Architecture Reference Manual ARMv8-A\n\nFor user-mode access, requires `CNTKCTL_EL1.EL0VCTEN == 1`, which\nmust be set from kernel mode for each CPU:\n\n        #define CNTKCTL_EL0VCTEN 0x2\n        uint32_t r;\n        asm volatile(\"mrs %0, CNTKCTL_EL1\" : \"=r\"(r)); /* read */\n        r |= CNTKCTL_EL0VCTEN;\n        asm volatile(\"msr CNTKCTL_EL1, %0\" :: \"r\"(r)); /* write */\n\n*WARNING*: Above code was not tested.\n\n`PMCCNTR_EL0`: Performance Monitors Cycle Count Register\n------------------------------------------------------\n\nA 64-bit counter, part of Performance Monitors.\nSection D8.4.2 in ARM Architecture Reference Manual ARMv8-A\n\nFor access from user mode, requires user-mode access to PMU (`PMUSERENR_EL0.EN\n== 1`), which must be set from kernel mode for each CPU:\n\n        #define PERF_DEF_OPTS (1 | 16)\n        /* enable user-mode access to counters */\n        asm volatile(\"msr PMUSERENR_EL0, %0\" :: \"r\"(1));\n        /* Program PMU and enable all counters */\n        asm volatile(\"msr PMCR_EL0, %0\" :: \"r\"(PERF_DEF_OPTS));\n        asm volatile(\"msr PMCNTENSET_EL0, %0\" :: \"r\"(0x8000000f));\n        asm volatile(\"msr PMCCFILTR_EL0, %0\" :: \"r\"(0));\n\nKernel module source with the above code available at:\n[GitHub rdolbeau/enable\\_arm\\_pmu](https://github.com/rdolbeau/enable_arm_pmu)\nor in [Pull Request #2 at thoughtpolice/enable\\_arm\\_pmu](https://github.com/thoughtpolice/enable_arm_pmu/pull/2)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.982421875,
          "content": "*DO NOT CHECK OUT THESE FILES FROM GITHUB UNLESS YOU KNOW WHAT YOU ARE\nDOING.*  (See below.)\n\nThis is the git repository for the FFTW library for computing Fourier\ntransforms (version 3.x), maintained by the FFTW authors.\n\nUnlike most other programs, most of the FFTW source code (in C) is\ngenerated automatically.  This repository contains the *generator* and\nit does not contain the *generated code*.  *YOU WILL BE UNABLE TO\nCOMPILE CODE FROM THIS REPOSITORY* unless you have special tools and\nknow what you are doing.   In particular, do not expect things to\nwork by simply executing `configure; make` or `cmake`.\n\nMost users should ignore this repository, and should instead download\nofficial tarballs from http://fftw.org/, which contain the generated\ncode, do not require any special tools or knowledge, and can be\ncompiled on any system with a C compiler.\n\nAdvanced users and FFTW maintainers may obtain code from github and\nrun the generation process themselves.  See [README](README) for\ndetails.\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 1.314453125,
          "content": "TODO before FFTW-$2\\pi$:\n\n* figure out how to autodetect NEON at runtime\n\n* figure out the arm cycle counter business\n\n* Wisdom: make it clear that it is specific to the exact fftw version\n  and configuration.  Report error codes when reading wisdom.  Maybe\n  have multiple system wisdom files, one per version?\n\n* DCT/DST codelets?  which kinds?\n\n* investigate the addition-chain trig computation\n\n* I can't believe that there isn't a closed form for the omega\n  array in Rader.\n\n* convolution problem type(s)\n\n* Explore the idea of having n < 0 in tensors, possibly to mean\n  inverse DFT.\n\n* better estimator: possibly, let \"other\" cost be coef * n, where\n  coef is a per-solver constant determined via some big numerical\n  optimization/fit.\n\n* vector radix, multidimensional codelets\n\n* it may be a good idea to unify all those little loops that do\n  copying, (X[i], X[n-i]) <- (X[i] + X[n-i], X[i] - X[n-i]),\n  and multiplication of vectors by twiddle factors.\n\n* Pruned FFTs (basically, a vecloop that skips zeros).\n\n* Try FFTPACK-style back-and-forth (Stockham) FFT.  (We tried this a\n  few years ago and it was slower, but perhaps matters have changed.)\n\n* Generate assembly directly for more processors, or maybe fork gcc.  =)\n\n* ensure that threaded solvers generate (block_size % 4 == 0)\n  to allow SIMD to be used.\n\n* memoize triggen.\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 0.814453125,
          "content": "#! /bin/sh\n############################################################################\n#\n# NOTE: If you just want to build FFTW, do not use this file.  Just use\n# the ordinary ./configure && make commands as described in the installation\n# section of the manual.\n#\n# This file is only for users that want to generate their own codelets,\n# as described in the \"generating your own code\" section of the manual.\n#\n############################################################################\n\ntouch ChangeLog\n\necho \"PLEASE IGNORE WARNINGS AND ERRORS\"\n\nrm -rf autom4te.cache\nautoreconf --verbose --install --symlink --force\n\nrm -f config.cache\n\n# --enable-maintainer-mode enables build of genfft and automatic\n# rebuild of codelets whenever genfft changes\n(\n    ./configure --disable-shared --enable-maintainer-mode --enable-threads $*\n)\n"
        },
        {
          "name": "cmake.config.h.in",
          "type": "blob",
          "size": 11.3310546875,
          "content": "\n/* Define to compile in long-double precision. */\n#cmakedefine BENCHFFT_LDOUBLE 1\n\n/* Define to compile in quad precision. */\n#cmakedefine BENCHFFT_QUAD 1\n\n/* Define to compile in single precision. */\n#cmakedefine BENCHFFT_SINGLE 1\n\n/* Define to 1 if using `alloca.c'. */\n/* #undef C_ALLOCA */\n\n/* Define to disable Fortran wrappers. */\n#cmakedefine DISABLE_FORTRAN 1\n\n/* Define to dummy `main' function (if any) required to link to the Fortran\n   libraries. */\n/* #undef F77_DUMMY_MAIN */\n\n/* Define to a macro mangling the given C identifier (in lower and upper\n   case), which must not contain underscores, for linking with Fortran. */\n#define F77_FUNC(name,NAME) name ## _\n\n/* As F77_FUNC, but for C identifiers containing underscores. */\n#define F77_FUNC_(name,NAME) name ## _\n\n/* Define if F77_FUNC and F77_FUNC_ are equivalent. */\n#define F77_FUNC_EQUIV 1\n\n/* Define if F77 and FC dummy `main' functions are identical. */\n/* #undef FC_DUMMY_MAIN_EQ_F77 */\n\n/* C compiler name and flags */\n#define FFTW_CC \"@CMAKE_C_COMPILER@\"\n\n/* Define to enable extra FFTW debugging code. */\n/* #undef FFTW_DEBUG */\n\n/* Define to enable the use of alloca(). */\n#define FFTW_ENABLE_ALLOCA 1\n\n/* Define to compile in long-double precision. */\n#cmakedefine FFTW_LDOUBLE 1\n\n/* Define to compile in quad precision. */\n#cmakedefine FFTW_QUAD 1\n\n/* Define to enable pseudorandom estimate planning for debugging. */\n/* #undef FFTW_RANDOM_ESTIMATOR */\n\n/* Define to compile in single precision. */\n#cmakedefine FFTW_SINGLE 1\n\n/* Define to 1 if you have the `abort' function. */\n#define HAVE_ABORT 1\n\n/* Define to 1 if you have `alloca', as a function or macro. */\n#cmakedefine HAVE_ALLOCA 1\n\n/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).\n   */\n#cmakedefine HAVE_ALLOCA_H 1\n\n/* Define to enable Altivec optimizations. */\n/* #undef HAVE_ALTIVEC */\n\n/* Define to 1 if you have the <altivec.h> header file. */\n#cmakedefine HAVE_ALTIVEC_H 1\n\n/* Define if you have enabled the cycle counter on ARMv8 */\n/* #undef HAVE_ARMV8CC */\n\n/* Define to enable AVX optimizations. */\n#cmakedefine HAVE_AVX 1\n\n/* Define to enable AVX2 optimizations. */\n#cmakedefine HAVE_AVX2 1\n\n/* Define to enable AVX512 optimizations. */\n/* #undef HAVE_AVX512 */\n\n/* Define to enable 128-bit FMA AVX optimization */\n/* #undef HAVE_AVX_128_FMA */\n\n/* Define to 1 if you have the `BSDgettimeofday' function. */\n/* #undef HAVE_BSDGETTIMEOFDAY */\n\n/* Define to 1 if you have the `clock_gettime' function. */\n#cmakedefine01 HAVE_CLOCK_GETTIME\n\n/* Define to 1 if you have the `cosl' function. */\n#cmakedefine HAVE_COSL 1\n\n/* Define to 1 if you have the declaration of `cosl', and to 0 if you don't.\n   */\n#cmakedefine01 HAVE_DECL_COSL\n\n/* Define to 1 if you have the declaration of `cosq', and to 0 if you don't.\n   */\n#cmakedefine01 HAVE_DECL_COSQ\n\n/* Define to 1 if you have the declaration of `drand48', and to 0 if you\n   don't. */\n#cmakedefine01 HAVE_DECL_DRAND48\n\n/* Define to 1 if you have the declaration of `memalign', and to 0 if you\n   don't. */\n#cmakedefine01 HAVE_DECL_MEMALIGN\n\n/* Define to 1 if you have the declaration of `posix_memalign', and to 0 if\n   you don't. */\n#cmakedefine01 HAVE_DECL_POSIX_MEMALIGN\n\n/* Define to 1 if you have the declaration of `sinl', and to 0 if you don't.\n   */\n#cmakedefine01 HAVE_DECL_SINL\n\n/* Define to 1 if you have the declaration of `sinq', and to 0 if you don't.\n   */\n#cmakedefine01 HAVE_DECL_SINQ\n\n/* Define to 1 if you have the declaration of `srand48', and to 0 if you\n   don't. */\n#cmakedefine01 HAVE_DECL_SRAND48\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n#cmakedefine HAVE_DLFCN_H 1\n\n/* Define to 1 if you don't have `vprintf' but do have `_doprnt.' */\n/* #undef HAVE_DOPRNT */\n\n/* Define to 1 if you have the `drand48' function. */\n#cmakedefine HAVE_DRAND48 1\n\n/* Define if you have a machine with fused multiply-add */\n/* #undef HAVE_FMA */\n\n/* Define to enable generic (gcc) 128-bit SIMD optimizations. */\n/* #undef HAVE_GENERIC_SIMD128 */\n\n/* Define to enable generic (gcc) 256-bit SIMD optimizations. */\n/* #undef HAVE_GENERIC_SIMD256 */\n\n/* Define to 1 if you have the `gethrtime' function. */\n/* #undef HAVE_GETHRTIME */\n\n/* Define to 1 if you have the `getpagesize' function. */\n#cmakedefine HAVE_GETPAGESIZE 1\n\n/* Define to 1 if you have the `gettimeofday' function. */\n#cmakedefine HAVE_GETTIMEOFDAY 1\n\n/* Define to 1 if hrtime_t is defined in <sys/time.h> */\n/* #undef HAVE_HRTIME_T */\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#cmakedefine HAVE_INTTYPES_H 1\n\n/* Define if the isnan() function/macro is available. */\n#cmakedefine HAVE_ISNAN 1\n\n/* Define to enable KCVI optimizations. */\n/* #undef HAVE_KCVI */\n\n/* Define to 1 if you have the `m' library (-lm). */\n#cmakedefine HAVE_LIBM 1\n\n/* Define to 1 if you have the `quadmath' library (-lquadmath). */\n/* #undef HAVE_LIBQUADMATH */\n\n/* Define to 1 if you have the <limits.h> header file. */\n#cmakedefine HAVE_LIMITS_H 1\n\n/* Define to 1 if the compiler supports `long double' */\n#define HAVE_LONG_DOUBLE 1\n\n/* Define to 1 if you have the `mach_absolute_time' function. */\n#cmakedefine HAVE_MACH_ABSOLUTE_TIME 1\n\n/* Define to 1 if you have the <malloc.h> header file. */\n#cmakedefine HAVE_MALLOC_H 1\n\n/* Define to 1 if you have the `memalign' function. */\n#cmakedefine HAVE_MEMALIGN 1\n\n/* Define to 1 if you have the `memmove' function. */\n#cmakedefine HAVE_MEMMOVE 1\n\n/* Define to 1 if you have the <memory.h> header file. */\n#cmakedefine HAVE_MEMORY_H 1\n\n/* Define to 1 if you have the `memset' function. */\n#define HAVE_MEMSET 1\n\n/* Define to enable use of MIPS ZBus cycle-counter. */\n/* #undef HAVE_MIPS_ZBUS_TIMER */\n\n/* Define if you have the MPI library. */\n/* #undef HAVE_MPI */\n\n/* Define to enable ARM NEON optimizations. */\n/* #undef HAVE_NEON */\n\n/* Define if OpenMP is enabled */\n#cmakedefine HAVE_OPENMP\n\n/* Define to 1 if you have the `posix_memalign' function. */\n#cmakedefine HAVE_POSIX_MEMALIGN 1\n\n/* Define if you have POSIX threads libraries and header files. */\n/* #undef HAVE_PTHREAD */\n\n/* Define to 1 if you have the `read_real_time' function. */\n/* #undef HAVE_READ_REAL_TIME */\n\n/* Define to 1 if you have the `sinl' function. */\n#cmakedefine HAVE_SINL 1\n\n/* Define to 1 if you have the `snprintf' function. */\n#cmakedefine HAVE_SNPRINTF 1\n\n/* Define to 1 if you have the `sqrt' function. */\n#define HAVE_SQRT 1\n\n/* Define to enable SSE/SSE2 optimizations. */\n#cmakedefine HAVE_SSE2 1\n\n/* Define to 1 if you have the <stddef.h> header file. */\n#cmakedefine HAVE_STDDEF_H 1\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#cmakedefine HAVE_STDINT_H 1\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#cmakedefine HAVE_STDLIB_H 1\n\n/* Define to 1 if you have the `strchr' function. */\n#define HAVE_STRCHR 1\n\n/* Define to 1 if you have the <strings.h> header file. */\n#cmakedefine HAVE_STRINGS_H 1\n\n/* Define to 1 if you have the <string.h> header file. */\n#cmakedefine HAVE_STRING_H 1\n\n/* Define to 1 if you have the `sysctl' function. */\n#cmakedefine HAVE_SYSCTL 1\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#cmakedefine HAVE_SYS_STAT_H 1\n\n/* Define to 1 if you have the <sys/time.h> header file. */\n#cmakedefine HAVE_SYS_TIME_H 1\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#cmakedefine HAVE_SYS_TYPES_H 1\n\n/* Define to 1 if you have the `tanl' function. */\n/* #undef HAVE_TANL */\n\n/* Define if we have a threads library. */\n#cmakedefine HAVE_THREADS 1\n\n/* Define to 1 if you have the `time_base_to_time' function. */\n/* #undef HAVE_TIME_BASE_TO_TIME */\n\n/* Define to 1 if the system has the type `uintptr_t'. */\n#define HAVE_UINTPTR_T 1\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#cmakedefine HAVE_UNISTD_H 1\n\n/* Define to 1 if you have the `vprintf' function. */\n#define HAVE_VPRINTF 1\n\n/* Define to enable IBM VSX optimizations. */\n/* #undef HAVE_VSX */\n\n/* Define if you have the UNICOS _rtc() intrinsic. */\n/* #undef HAVE__RTC */\n\n/* Define to the sub-directory in which libtool stores uninstalled libraries.\n   */\n#define LT_OBJDIR \".libs/\"\n\n/* Name of package */\n#define PACKAGE \"fftw\"\n\n/* Define to the address where bug reports for this package should be sent. */\n#define PACKAGE_BUGREPORT \"fftw@fftw.org\"\n\n/* Define to the full name of this package. */\n#define PACKAGE_NAME \"fftw\"\n\n/* Define to the full name and version of this package. */\n#define PACKAGE_STRING \"fftw @FFTW_VERSION@\"\n\n/* Define to the one symbol short name of this package. */\n#define PACKAGE_TARNAME \"fftw\"\n\n/* Define to the home page for this package. */\n#define PACKAGE_URL \"\"\n\n/* Define to the version of this package. */\n#define PACKAGE_VERSION \"@FFTW_VERSION@\"\n\n/* Define to necessary symbol if this constant uses a non-standard name on\n   your system. */\n/* #undef PTHREAD_CREATE_JOINABLE */\n\n/* The size of `double', as computed by sizeof. */\n#define SIZEOF_DOUBLE @SIZEOF_DOUBLE@\n\n/* The size of `fftw_r2r_kind', as computed by sizeof. */\n#define SIZEOF_FFTW_R2R_KIND 4\n\n/* The size of `float', as computed by sizeof. */\n#define SIZEOF_FLOAT @SIZEOF_FLOAT@\n\n/* The size of `int', as computed by sizeof. */\n#define SIZEOF_INT @SIZEOF_INT@\n\n/* The size of `long', as computed by sizeof. */\n#define SIZEOF_LONG @SIZEOF_LONG@\n\n/* The size of `long long', as computed by sizeof. */\n#define SIZEOF_LONG_LONG @SIZEOF_LONG_LONG@\n\n/* The size of `MPI_Fint', as computed by sizeof. */\n/* #undef SIZEOF_MPI_FINT */\n\n/* The size of `ptrdiff_t', as computed by sizeof. */\n#define SIZEOF_PTRDIFF_T @SIZEOF_PTRDIFF_T@\n\n/* The size of `size_t', as computed by sizeof. */\n#define SIZEOF_SIZE_T @SIZEOF_SIZE_T@\n\n/* The size of `unsigned int', as computed by sizeof. */\n#define SIZEOF_UNSIGNED_INT @SIZEOF_UNSIGNED_INT@\n\n/* The size of `unsigned long', as computed by sizeof. */\n#define SIZEOF_UNSIGNED_LONG @SIZEOF_UNSIGNED_LONG@\n\n/* The size of `unsigned long long', as computed by sizeof. */\n#define SIZEOF_UNSIGNED_LONG_LONG @SIZEOF_UNSIGNED_LONG_LONG@\n\n/* The size of `void *', as computed by sizeof. */\n#define SIZEOF_VOID_P @CMAKE_SIZEOF_VOID_P@\n\n/* If using the C implementation of alloca, define if you know the\n   direction of stack growth for your system; otherwise it will be\n   automatically deduced at runtime.\n\tSTACK_DIRECTION > 0 => grows toward higher addresses\n\tSTACK_DIRECTION < 0 => grows toward lower addresses\n\tSTACK_DIRECTION = 0 => direction of growth unknown */\n/* #undef STACK_DIRECTION */\n\n/* Define to 1 if you have the ANSI C header files. */\n#define STDC_HEADERS 1\n\n/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */\n#cmakedefine TIME_WITH_SYS_TIME 1\n\n/* Define if we have and are using POSIX threads. */\n#cmakedefine USING_POSIX_THREADS 1\n\n/* Version number of package */\n#define VERSION \"@FFTW_VERSION@\"\n\n/* Use common Windows Fortran mangling styles for the Fortran interfaces. */\n/* #undef WINDOWS_F77_MANGLING */\n\n/* Include g77-compatible wrappers in addition to any other Fortran wrappers.\n   */\n#cmakedefine WITH_G77_WRAPPERS 1\n\n/* Use our own aligned malloc routine; mainly helpful for Windows systems\n   lacking aligned allocation system-library routines. */\n/* #undef WITH_OUR_MALLOC */\n\n/* Use low-precision timers, making planner very slow */\n/* #undef WITH_SLOW_TIMER */\n\n/* Define to empty if `const' does not conform to ANSI C. */\n/* #undef const */\n\n/* Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  */\n#ifndef __cplusplus\n/* #undef inline */\n#endif\n\n/* Define to `unsigned int' if <sys/types.h> does not define. */\n/* #undef size_t */\n"
        },
        {
          "name": "codemeta.json",
          "type": "blob",
          "size": 1.57421875,
          "content": "{\n  \"@context\": \"https://doi.org/10.5063/schema/codemeta-2.0\",\n  \"@type\": \"SoftwareSourceCode\",\n  \"name\": \"FFTW\",\n  \"description\": \"FFTW is a C subroutine library for computing the discrete Fourier transform (DFT).\",\n  \"url\": \"http://fftw.org/\",\n  \"codeRepository\": \"https://github.com/FFTW/fftw3\",\n  \"issueTracker\": \"https://github.com/FFTW/fftw3/issues\",\n  \"license\": \"https://spdx.org/licenses/GPL-2.0-or-later.html\",\n  \"citation\": \"http://dx.doi.org/10.1109/JPROC.2004.840301\",\n  \"author\": [\n    {\n      \"@type\": \"Person\",\n      \"givenName\": \"Matteo\",\n      \"familyName\": \"Frigo\",\n      \"email\": \"athena@fftw.org\",\n      \"@id\": \"http://orcid.org/0000-0002-9365-8017\"\n    },\n    {\n      \"@type\": \"Person\",\n      \"givenName\": \"Steven G.\",\n      \"familyName\": \"Johnson\",\n      \"email\": \"stevenj@alum.mit.edu\",\n      \"@id\": \"http://orcid.org/0000-0001-7327-4967\"\n    }\n  ],\n  \"contributor\": [\n    {\n      \"@type\": \"Person\",\n      \"givenName\": \"Stefan\",\n      \"familyName\": \"Kral\",\n      \"email\": \"skral@fftw.org\"\n    },\n    {\n      \"@type\": \"Person\",\n      \"givenName\": \"Romain\",\n      \"familyName\": \"Dolbeau\",\n      \"email\": \"romain@dolbeau.org\",\n      \"@id\": \"http://orcid.org/0000-0002-4466-8948\"\n    },\n    {\n      \"@type\": \"Person\",\n      \"givenName\": \"Erik\",\n      \"familyName\": \"Lindahl\",\n      \"email\": \"erik.lindahl@scilifelab.se\",\n      \"@id\": \"http://orcid.org/0000-0002-2734-2794\"\n    }\n  ],\n  \"developmentStatus\": \"active\",\n  \"downloadUrl\": \"http://fftw.org/download.html\",\n  \"version\":\"3.3.7\",\n  \"dateCreated\":\"1997-02-17\",\n  \"datePublished\":\"1997-03-24\",\n  \"programmingLanguage\": [\"C\", \"OCaml\"]\n}\n"
        },
        {
          "name": "commercialize.sh",
          "type": "blob",
          "size": 2.134765625,
          "content": "#! /bin/sh\n\n# This is a script used by the FFTW copyright holders to\n# create commercial versions with a non-GPL license.\n# You should never need to use it.\ntarball=$1\nnewtarball=\"commercial-\"`basename $tarball`\n\necho \"Commercializing $tarball to produce $newtarball\"\n\nd=`basename $tarball .tar.gz`\nrm -rf $d\ntar xpzf $tarball\n\nfind $d -type f -print | while read name; do\n    sed -e '/^ [*] This program is free software; you can redistribute it and\\/or modify$/,/ [*] Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA/c\\\n * See the file COPYING for license information.' $name > ${name}.tmp\n    chmod --reference=$name ${name}.tmp\n    touch --reference=$name ${name}.tmp\n    mv ${name}.tmp $name\ndone\n\nfor name in $d/tools/fftw-wisdom.c; do\n    sed -e '/This program is free software; you can redistribute it and\\/or modify/,/[\"]Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA..[\"]/c\\\n\"See the file COPYING for license information.\\\\n\"' $name > ${name}.tmp\n    chmod --reference=$name ${name}.tmp\n    touch --reference=$name ${name}.tmp\n    mv ${name}.tmp $name\ndone\n\nfor name in $d/configure.ac; do\n    cat $name | sed -e 's+AC_INIT(fftw,+AC_INIT(commercial-fftw,+' > ${name}.tmp\n    chmod --reference=$name ${name}.tmp\n    touch --reference=$name ${name}.tmp\n    mv ${name}.tmp $name\ndone\n\n(\n cd $d; \n rm -rf autom4te.cache\n autoreconf --verbose --install --symlink --force\n autoreconf --verbose --install --symlink --force\n autoreconf --verbose --install --symlink --force\n rm -f config.cache\n\n rm -f COPYING\n cat >COPYING <<EOF\nThis package is licensed commercially by the MIT Technology Licensing\nOffice (TLO); you should have a license agreement describing the terms\nyou have negotiated.\n\nPlease note that this package is provided WITHOUT ANY WARRANTY.\nSee your license agreement for complete details.\n\nContact Mr. Tyler A Guitroz <tguitroz@mit.edu> for more information\nregarding licensing.\nEOF\n\n\n for name in simd/*mips*.[ch]; do\n cat >$name <<EOF\n/* This file is (C) Codesourcery and removed from the commercial\n   version of FFTW */\nEOF\n done\n\n ./configure --enable-sse2\n make dist\n mv $newtarball ..\n)\n\nrm -rf $d\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 31.939453125,
          "content": "\n\ndnl Process this file with autoconf to produce a configure script.\n\ndnl Define the fftw version number as M4 macros, so that we can enforce\ndnl the invariant that the minor version number in FFTW-X.Y.MINOR is the same\ndnl as the revision number in SHARED_VERSION_INFO.\ndefine(FFTW_MAJOR_VERSION, 3.3)dnl\ndefine(FFTW_MINOR_VERSION, 10)dnl\n\ndnl Version number of the FFTW source package.\nAC_INIT([fftw],[FFTW_MAJOR_VERSION.FFTW_MINOR_VERSION],[fftw@fftw.org])\nAC_CONFIG_SRCDIR(kernel/ifftw.h)\n\ndnl Version number for libtool shared libraries.  Libtool wants a string\ndnl of the form CURRENT:REVISION:AGE.  We adopt the convention that\ndnl REVISION is the same as the FFTW minor version number.\ndnl fftw-3.1.x was 4:x:1\ndnl fftw-3.2.x was 5:x:2\ndnl fftw-3.3.x was 6:x:3 for x < 4\ndnl fftw-3.3.4 was 7:x:4\ndnl fftw-3.3.5 was 8:x:5 (added planner hooks)\ndnl fftw-3.3.6 was 8:x:6 (8:x:6 is a bug, should have been 8:x:5.  No API changes)\ndnl fftw-3.3.6.1 fixes the 8:x:6 screwup\ndnl fftw-3.3.7 was 8:x:5 (No API changes)\ndnl fftw-3.3.8 was 8:x:5 (No API changes)\ndnl fftw-3.3.9 was 9:x:6 (added threads callback)\ndnl fftw-3.3.10 was 9:x:6 (No API changes)\nSHARED_VERSION_INFO=\"9:FFTW_MINOR_VERSION:6\" # CURRENT:REVISION:AGE\n\nAM_INIT_AUTOMAKE(1.7)\nAM_CONFIG_HEADER(config.h)\nAC_CONFIG_MACRO_DIR([m4])\nAM_MAINTAINER_MODE\nAC_SUBST(SHARED_VERSION_INFO)\nAC_DISABLE_SHARED dnl to hell with shared libraries\nAC_CANONICAL_HOST\n\ndnl configure options\ncase \"${host_cpu}\" in\n  powerpc*) arch_prefers_fma=yes;;\n  ia64*) arch_prefers_fma=yes;;\n  hppa*) arch_prefers_fma=yes;;\n  mips64*) arch_prefers_fma=yes;;\n  *) arch_prefers_fma=no;;\nesac\n\nAC_ARG_ENABLE(debug, [AS_HELP_STRING([--enable-debug],[compile fftw with extra runtime checks for debugging])], ok=$enableval, ok=no)\nif test \"$ok\" = \"yes\"; then\n    AC_DEFINE(FFTW_DEBUG,1,[Define to enable extra FFTW debugging code.])\nfi\n\nAC_ARG_ENABLE(doc, [AS_HELP_STRING([--disable-doc],[disable building the documentation])], build_doc=$enableval, build_doc=yes)\nAM_CONDITIONAL(BUILD_DOC, test x\"$build_doc\" = xyes)\n\nAC_ARG_ENABLE(random-estimator, [AS_HELP_STRING([--enable-random-estimator],[enable pseudorandom estimator (debugging hack)])], ok=$enableval, ok=no)\nif test \"$ok\" = \"yes\"; then\n    AC_DEFINE(FFTW_RANDOM_ESTIMATOR,1,[Define to enable pseudorandom estimate planning for debugging.])\n    CHECK_PL_OPTS=\"--estimate\"\nfi\n\nAC_ARG_ENABLE(alloca, [AS_HELP_STRING([--disable-alloca],[disable use of the alloca() function (may be broken on mingw64)])], ok=$enableval, ok=yes)\nif test \"$ok\" = \"yes\"; then\n    AC_DEFINE(FFTW_ENABLE_ALLOCA,1,[Define to enable the use of alloca().])\nfi\n\nAC_ARG_ENABLE(single, [AS_HELP_STRING([--enable-single],[compile fftw in single precision])], ok=$enableval, ok=no)\nAC_ARG_ENABLE(float, [AS_HELP_STRING([--enable-float],[synonym for --enable-single])], ok=$enableval)\nif test \"$ok\" = \"yes\"; then\n    AC_DEFINE(FFTW_SINGLE,1,[Define to compile in single precision.])\n    AC_DEFINE(BENCHFFT_SINGLE,1,[Define to compile in single precision.])\n    PRECISION=s\nelse\n    PRECISION=d\nfi\nAM_CONDITIONAL(SINGLE, test \"$ok\" = \"yes\")\n\nAC_ARG_ENABLE(long-double, [AS_HELP_STRING([--enable-long-double],[compile fftw in long-double precision])], ok=$enableval, ok=no)\nif test \"$ok\" = \"yes\"; then\n    if test \"$PRECISION\" = \"s\"; then\n        AC_MSG_ERROR([--enable-single/--enable-long-double conflict])\n    fi\n    AC_DEFINE(FFTW_LDOUBLE,1,[Define to compile in long-double precision.])\n    AC_DEFINE(BENCHFFT_LDOUBLE,1,[Define to compile in long-double precision.])\n    PRECISION=l\nfi\nAM_CONDITIONAL(LDOUBLE, test \"$ok\" = \"yes\")\n\nAC_ARG_ENABLE(quad-precision, [AS_HELP_STRING([--enable-quad-precision],[compile fftw in quadruple precision if available])], ok=$enableval, ok=no)\nif test \"$ok\" = \"yes\"; then\n    if test \"$PRECISION\" != \"d\"; then\n        AC_MSG_ERROR([conflicting precisions specified])\n    fi\n    AC_DEFINE(FFTW_QUAD,1,[Define to compile in quad precision.])\n    AC_DEFINE(BENCHFFT_QUAD,1,[Define to compile in quad precision.])\n    PRECISION=q\nfi\nAM_CONDITIONAL(QUAD, test \"$ok\" = \"yes\")\n\nAC_SUBST(PRECISION)\nAC_SUBST(CHECK_PL_OPTS)\n\ndnl SSE/SSE2 theory:\ndnl\ndnl Historically, you had to supply --enable-sse in single precision and --enable-sse2\ndnl in double precision.\ndnl\ndnl This behavior is pointless in 2016.  --enable-sse2 now works in both precisions,\ndnl and is interpreted as --enable-sse in single precision.  The old flag --enable--se\ndnl is still supported in single-precision only.\nAC_ARG_ENABLE(sse, [AS_HELP_STRING([--enable-sse],[enable SSE optimizations])], have_sse=$enableval, have_sse=no)\nif test \"$have_sse\" = \"yes\"; then\n    if test \"$PRECISION\" != \"s\"; then\n            AC_MSG_ERROR([SSE requires single precision])\n    fi\nfi\n\nAC_ARG_ENABLE(sse2, [AS_HELP_STRING([--enable-sse2],[enable SSE/SSE2 optimizations])], have_sse2=$enableval, have_sse2=no)\nif test \"$have_sse\" = \"yes\"; then have_sse2=yes; fi\nif test \"$have_sse2\" = \"yes\"; then\n    AC_DEFINE(HAVE_SSE2,1,[Define to enable SSE/SSE2 optimizations.])\n    if test \"$PRECISION\" != \"d\" -a \"$PRECISION\" != \"s\"; then\n            AC_MSG_ERROR([SSE2 requires single or double precision])\n    fi\nfi\nAM_CONDITIONAL(HAVE_SSE2, test \"$have_sse2\" = \"yes\")\n\nAC_ARG_ENABLE(avx, [AS_HELP_STRING([--enable-avx],[enable AVX optimizations])], have_avx=$enableval, have_avx=no)\nif test \"$have_avx\" = \"yes\"; then\n    AC_DEFINE(HAVE_AVX,1,[Define to enable AVX optimizations.])\n    if test \"$PRECISION\" != \"d\" -a \"$PRECISION\" != \"s\"; then\n        AC_MSG_ERROR([AVX requires single or double precision])\n    fi\nfi\nAM_CONDITIONAL(HAVE_AVX, test \"$have_avx\" = \"yes\")\n\nAC_ARG_ENABLE(avx2, [AS_HELP_STRING([--enable-avx2],[enable AVX2 optimizations])], have_avx2=$enableval, have_avx2=no)\nif test \"$have_avx2\" = \"yes\"; then\n    AC_DEFINE(HAVE_AVX2,1,[Define to enable AVX2 optimizations.])\n    if test \"$PRECISION\" != \"d\" -a \"$PRECISION\" != \"s\"; then\n        AC_MSG_ERROR([AVX2 requires single or double precision])\n    fi\nfi\nAM_CONDITIONAL(HAVE_AVX2, test \"$have_avx2\" = \"yes\")\n\nAC_ARG_ENABLE(avx512, [AS_HELP_STRING([--enable-avx512],[enable AVX512 optimizations])], have_avx512=$enableval, have_avx512=no)\nif test \"$have_avx512\" = \"yes\"; then\n    AC_DEFINE(HAVE_AVX512,1,[Define to enable AVX512 optimizations.])\n    if test \"$PRECISION\" != \"d\" -a \"$PRECISION\" != \"s\"; then\n        AC_MSG_ERROR([AVX512 requires single or double precision])\n    fi\nfi\nAM_CONDITIONAL(HAVE_AVX512, test \"$have_avx512\" = \"yes\")\n\ndnl 128-bit AVX is special. There is no reason to use it on Intel processors\ndnl since SSE2 is just as fast. However, on AMD processors we can both use\ndnl FMA4, and 128-bit SIMD is better than 256-bit since core pairs in a\ndnl compute unit can execute two 128-bit instructions independently.\nAC_ARG_ENABLE(avx-128-fma, [AS_HELP_STRING([--enable-avx-128-fma],[enable AVX128/FMA optimizations])], have_avx_128_fma=$enableval, have_avx_128_fma=no)\nif test \"$have_avx_128_fma\" = \"yes\"; then\n    AC_DEFINE(HAVE_AVX_128_FMA,1,[Define to enable 128-bit FMA AVX optimization])\n    AVX_128_FMA_CFLAGS=\"${AVX_CFLAGS} -mfma4\"\n    AC_SUBST(AVX_128_FMA_CFLAGS)\nfi\nAM_CONDITIONAL(HAVE_AVX_128_FMA, test \"$have_avx_128_fma\" = \"yes\")\n\nAC_ARG_ENABLE(kcvi, [AS_HELP_STRING([--enable-kcvi],[enable Knights Corner vector instructions optimizations])], have_kcvi=$enableval, have_kcvi=no)\nif test \"$have_kcvi\" = \"yes\"; then\n    AC_DEFINE(HAVE_KCVI,1,[Define to enable KCVI optimizations.])\n    if test \"$PRECISION\" != \"d\" -a \"$PRECISION\" != \"s\"; then\n        AC_MSG_ERROR([Knights Corner vector instructions requires single or double precision])\n    fi\nfi\nAM_CONDITIONAL(HAVE_KCVI, test \"$have_kcvi\" = \"yes\")\n\nAC_ARG_ENABLE(altivec, [AS_HELP_STRING([--enable-altivec],[enable Altivec optimizations])], have_altivec=$enableval, have_altivec=no)\nif test \"$have_altivec\" = \"yes\"; then\n    AC_DEFINE(HAVE_ALTIVEC,1,[Define to enable Altivec optimizations.])\n    if test \"$PRECISION\" != \"s\"; then\n        AC_MSG_ERROR([Altivec requires single precision])\n    fi\nfi\nAM_CONDITIONAL(HAVE_ALTIVEC, test \"$have_altivec\" = \"yes\")\n\nAC_ARG_ENABLE(vsx, [AS_HELP_STRING([--enable-vsx],[enable IBM VSX optimizations])], have_vsx=$enableval, have_vsx=no)\nif test \"$have_vsx\" = \"yes\"; then\n        AC_DEFINE(HAVE_VSX,1,[Define to enable IBM VSX optimizations.])\nfi\nAM_CONDITIONAL(HAVE_VSX, test \"$have_vsx\" = \"yes\")\n\nAC_ARG_ENABLE(neon, [AS_HELP_STRING([--enable-neon],[enable ARM NEON optimizations])], have_neon=$enableval, have_neon=no)\nif test \"$have_neon\" = \"yes\"; then\n    AC_DEFINE(HAVE_NEON,1,[Define to enable ARM NEON optimizations.])\n        case \"${host_cpu}\" in\n                aarch64)\n                ;;\n                *)\n        if test \"$PRECISION\" != \"s\"; then\n            AC_MSG_ERROR([NEON requires single precision])\n        fi\n                ;;\n        esac\nfi\nAM_CONDITIONAL(HAVE_NEON, test \"$have_neon\" = \"yes\")\n\nAC_ARG_ENABLE(armv8-pmccntr-el0, [AS_HELP_STRING([--enable-armv8-pmccntr-el0],[enable the cycle counter on ARMv8 via the PMCCNTR_EL0 register (see README-perfcounters for details and mandatory instructions)])], have_armv8pmccntrel0=$enableval)\nif test \"$have_armv8pmccntrel0\"x = \"yes\"x; then\n    AC_DEFINE(HAVE_ARMV8_PMCCNTR_EL0,1,[Define if you have enabled the PMCCNTR_EL0 cycle counter on ARMv8])\nfi\n\nAC_ARG_ENABLE(armv8-cntvct-el0, [AS_HELP_STRING([--enable-armv8-cntvct-el0],[enable the cycle counter on ARMv8 via the CNTVCT_EL0 register (see README-perfcounters for details and mandatory instructions)])], have_armv8cntvctel0=$enableval)\nif test \"$have_armv8cntvctel0\"x = \"yes\"x; then\n    AC_DEFINE(HAVE_ARMV8_CNTVCT_EL0,1,[Define if you have enabled the CNTVCT_EL0 cycle counter on ARMv8])\nfi\n\nAC_ARG_ENABLE(armv7a-cntvct, [AS_HELP_STRING([--enable-armv7a-cntvct],[enable the cycle counter on Armv7a via the CNTVCT register (see README-perfcounters for details and mandatory instructions)])], have_armv7acntvct=$enableval)\nif test \"$have_armv7acntvct\"x = \"yes\"x; then\n    AC_DEFINE(HAVE_ARMV7A_CNTVCT,1,[Define if you have enabled the CNTVCT cycle counter on ARMv7a])\nfi\n\nAC_ARG_ENABLE(armv7a-pmccntr, [AS_HELP_STRING([--enable-armv7a-pmccntr],[enable the cycle counter on Armv7a via the PMCCNTR register (see README-perfcounters for details and mandatory instructions)])], have_armv7apmccntr=$enableval)\nif test \"$have_armv7apmccntr\"x = \"yes\"x; then\n    AC_DEFINE(HAVE_ARMV7A_PMCCNTR,1,[Define if you have enabled the PMCCNTR cycle counter on ARMv7a])\nfi\n\nAC_ARG_ENABLE(generic-simd128, [AS_HELP_STRING([--enable-generic-simd128],[enable generic (gcc) 128-bit SIMD optimizations])], have_generic_simd128=$enableval, have_generic_simd128=no)\nif test \"$have_generic_simd128\" = \"yes\"; then\n        AC_DEFINE(HAVE_GENERIC_SIMD128,1,[Define to enable generic (gcc) 128-bit SIMD optimizations.])\nfi\nAM_CONDITIONAL(HAVE_GENERIC_SIMD128, test \"$have_generic_simd128\" = \"yes\")\n\nAC_ARG_ENABLE(generic-simd256, [AS_HELP_STRING([--enable-generic-simd256],[enable generic (gcc) 256-bit SIMD optimizations])], have_generic_simd256=$enableval, have_generic_simd256=no)\nif test \"$have_generic_simd256\" = \"yes\"; then\n        AC_DEFINE(HAVE_GENERIC_SIMD256,1,[Define to enable generic (gcc) 256-bit SIMD optimizations.])\nfi\nAM_CONDITIONAL(HAVE_GENERIC_SIMD256, test \"$have_generic_simd256\" = \"yes\")\n\n\ndnl FIXME:\ndnl AC_ARG_ENABLE(mips-ps, [AS_HELP_STRING([--enable-mips-ps],[enable MIPS pair-single optimizations])], have_mips_ps=$enableval, have_mips_ps=no)\ndnl if test \"$have_mips_ps\" = \"yes\"; then\ndnl \tAC_DEFINE(HAVE_MIPS_PS,1,[Define to enable MIPS paired-single optimizations.])\ndnl \tif test \"$PRECISION\" != \"s\"; then\ndnl \t\tAC_MSG_ERROR([MIPS paired-single requires single precision])\ndnl \tfi\ndnl fi\ndnl AM_CONDITIONAL(HAVE_MIPS_PS, test \"$have_mips_ps\" = \"yes\")\n\nAC_ARG_WITH(slow-timer, [AS_HELP_STRING([--with-slow-timer],[use low-precision timers (SLOW)])], with_slow_timer=$withval, with_slow_timer=no)\nif test \"$with_slow_timer\" = \"yes\"; then\n    AC_DEFINE(WITH_SLOW_TIMER,1,[Use low-precision timers, making planner very slow])\nfi\n\nAC_ARG_ENABLE(mips_zbus_timer, [AS_HELP_STRING([--enable-mips-zbus-timer],[use MIPS ZBus cycle-counter])], have_mips_zbus_timer=$enableval, have_mips_zbus_timer=no)\nif test \"$have_mips_zbus_timer\" = \"yes\"; then\n    AC_DEFINE(HAVE_MIPS_ZBUS_TIMER,1,[Define to enable use of MIPS ZBus cycle-counter.])\nfi\n\nAC_ARG_WITH(our-malloc, [AS_HELP_STRING([--with-our-malloc],[use our aligned malloc (helpful for Win32)])], with_our_malloc=$withval, with_our_malloc=no)\nAC_ARG_WITH(our-malloc16, [AS_HELP_STRING([--with-our-malloc16],[Obsolete alias for --with-our-malloc16])], with_our_malloc=$withval)\nif test \"$with_our_malloc\" = \"yes\"; then\n    AC_DEFINE(WITH_OUR_MALLOC,1,[Use our own aligned malloc routine; mainly helpful for Windows systems lacking aligned allocation system-library routines.])\nfi\n\nAC_ARG_WITH(windows-f77-mangling, [AS_HELP_STRING([--with-windows-f77-mangling],[use common Win32 Fortran interface styles])], with_windows_f77_mangling=$withval, with_windows_f77_mangling=no)\nif test \"$with_windows_f77_mangling\" = \"yes\"; then\n    AC_DEFINE(WINDOWS_F77_MANGLING,1,[Use common Windows Fortran mangling styles for the Fortran interfaces.])\nfi\n\nAC_ARG_WITH(incoming-stack-boundary, [AS_HELP_STRING([--with-incoming-stack-boundary=X],[Assume that stack is aligned to (1<<X) bytes])], with_incoming_stack_boundary=$withval, with_incoming_stack_boundary=no)\n\n\nAC_ARG_ENABLE(fma, [AS_HELP_STRING([--enable-fma],[enable if the machine architecture \"naturally\" prefers fused multiply-add instructions])], arch_prefers_fma=$enableval)\nif test \"$arch_prefers_fma\"x = \"yes\"x; then\n        AC_DEFINE(ARCH_PREFERS_FMA,1,[Define if the machine architecture \"naturally\" prefers fused multiply-add instructions])\nfi\n\ndnl compute library suffix\ncase \"$PRECISION\" in\n     s) PREC_SUFFIX=f;;\n     d) PREC_SUFFIX=;;\n     l) PREC_SUFFIX=l;;\n     q) PREC_SUFFIX=q;;\nesac\nAC_SUBST(PREC_SUFFIX)\n\ndnl Checks for programs.\nAC_PROG_CC\nAM_PROG_CC_C_O\nAX_COMPILER_VENDOR\nAC_PROG_CC_STDC\nAC_PROG_INSTALL\nAC_PROG_LN_S\nAC_PROG_MAKE_SET\nAC_LIBTOOL_WIN32_DLL\nAC_PROG_LIBTOOL\nLT_INIT\nAC_PROG_CPP\n\nAC_CHECK_PROG(OCAMLBUILD, ocamlbuild, ocamlbuild)\n\ndnl -----------------------------------------------------------------------\n\nAC_ARG_ENABLE(mpi, [AS_HELP_STRING([--enable-mpi],[compile FFTW MPI library])], enable_mpi=$enableval, enable_mpi=no)\n\nif test \"$enable_mpi\" = \"yes\"; then\n   if test $PRECISION = q; then\n      AC_MSG_ERROR([quad precision is not supported in MPI])\n   fi\n   ACX_MPI([],[AC_MSG_ERROR([could not find mpi library for --enable-mpi])])\n   AC_CHECK_PROG(MPIRUN, mpirun, mpirun)\n   AC_SUBST(MPIRUN)\n\n   save_CC=$CC\n   CC=$MPICC\n   AC_CHECK_SIZEOF(MPI_Fint, [], [#include <mpi.h>])\n   CC=$save_CC\n   if test 0 = $ac_cv_sizeof_MPI_Fint; then\n      AC_MSG_WARN([sizeof(MPI_Fint) test failed]);\n      dnl As a backup, assume Fortran integer == C int\n      AC_CHECK_SIZEOF(int)\n      if test 0 = $ac_cv_sizeof_int; then AC_MSG_ERROR([sizeof(int) test failed]); fi\n      ac_cv_sizeof_MPI_Fint=$ac_cv_sizeof_int\n   fi\n   C_MPI_FINT=C_INT`expr $ac_cv_sizeof_MPI_Fint \\* 8`_T\n   AC_SUBST(C_MPI_FINT)\nfi\nAM_CONDITIONAL(MPI, test \"$enable_mpi\" = \"yes\")\n\ndnl -----------------------------------------------------------------------\n\ndnl determine CFLAGS first\nAX_CC_MAXOPT\n\ncase \"${ax_cv_c_compiler_vendor}\" in\n   hp) # must (sometimes) manually increase cpp limits to handle fftw3.h\n        AX_CHECK_COMPILE_FLAG([-Wp,-H128000],\n                        [CC=\"$CC -Wp,-H128000\"])\n        ;;\n\n   portland) # -Masmkeyword required for asm(\"\") cycle counters\n        AX_CHECK_COMPILE_FLAG([-Masmkeyword],\n                                [CC=\"$CC -Masmkeyword\"])\n        ;;\nesac\n\ndnl Determine SIMD CFLAGS at least for gcc and icc\ncase \"${ax_cv_c_compiler_vendor}\" in\n    gnu|intel)\n        # SSE/SSE2\n        if test \"$have_sse2\" = \"yes\" -a \"x$SSE2_CFLAGS\" = x; then\n            if test \"$PRECISION\" = d; then flag=msse2; else flag=msse; fi\n            AX_CHECK_COMPILE_FLAG(-$flag, [SSE2_CFLAGS=\"-$flag\"],\n            [AC_MSG_ERROR([Need a version of gcc with -$flag])])\n        fi\n\n        # AVX\n        if test \"$have_avx\" = \"yes\" -a \"x$AVX_CFLAGS\" = x; then\n            AX_CHECK_COMPILE_FLAG(-mavx, [AVX_CFLAGS=\"-mavx\"],\n            [AC_MSG_ERROR([Need a version of gcc with -mavx])])\n        fi\n\n        # AVX2\n        if test \"$have_avx2\" = \"yes\" -a \"x$AVX2_CFLAGS\" = x; then\n            AX_CHECK_COMPILE_FLAG(-mavx2, [AVX2_CFLAGS=\"-mavx2\"],\n                [AC_MSG_ERROR([Need a version of gcc with -mavx2])])\n            AX_CHECK_COMPILE_FLAG(-mfma, [AVX2_CFLAGS=\"$AVX2_CFLAGS -mfma\"],\n                [AC_MSG_WARN([Need a version of gcc with -mfma (harmless for icc)])])\n        fi\n\n        # AVX512\n        if test \"$have_avx512\" = \"yes\" -a \"x$AVX512_CFLAGS\" = x; then\n            AX_CHECK_COMPILE_FLAG(-mavx512f, [AVX512_CFLAGS=\"-mavx512f\"],\n            [AC_MSG_ERROR([Need a version of gcc with -mavx512f])])\n        fi\n\n        if test \"$host_vendor\" = \"apple\"; then\n            # We need to tell gcc to use an external assembler to get AVX/AVX2 with gcc on OS X\n            AX_CHECK_COMPILE_FLAG([-Wa,-q], [CFLAGS=\"$CFLAGS -Wa,-q\"])\n            # Disable the new compact unwinding format so we avoid warnings/potential errors.\n            AX_CHECK_LINK_FLAG([-Wl,-no_compact_unwind], [CFLAGS=\"$CFLAGS -Wl,-no_compact_unwind\"])\n        fi\n\n        # KCVI\n        if test \"$have_kcvi\" = \"yes\" -a \"x$KCVI_CFLAGS\" = x; then\n            AX_CHECK_COMPILE_FLAG(-mmic, [KCVI_CFLAGS=\"-mmic\"],\n            [AC_MSG_ERROR([Need a version of icc with -mmic])])\n        fi\n\n        if test \"$have_altivec\" = \"yes\" -a \"x$ALTIVEC_CFLAGS\" = x; then\n            # -DFAKE__VEC__ is a workaround because gcc-3.3 does not\n            # #define __VEC__ with -maltivec.\n            AX_CHECK_COMPILE_FLAG(-faltivec, [ALTIVEC_CFLAGS=\"-faltivec\"],\n            [AX_CHECK_COMPILE_FLAG(-maltivec -mabi=altivec,\n                [ALTIVEC_CFLAGS=\"-maltivec -mabi=altivec -DFAKE__VEC__\"],\n                [AX_CHECK_COMPILE_FLAG(-fvec, [ALTIVEC_CFLAGS=\"-fvec\"],\n                [AC_MSG_ERROR([Need a version of gcc with -maltivec])])])])\n        fi\n\n        case \"${host_cpu}\" in\n            aarch64)\n                ;;\n            *)\n                if test \"$have_neon\" = \"yes\" -a \"x$NEON_CFLAGS\" = x; then\n                    AX_CHECK_COMPILE_FLAG(-mfpu=neon, [NEON_CFLAGS=\"-mfpu=neon\"],\n                [AC_MSG_ERROR([Need a version of gcc with -mfpu=neon])])\n                fi\n                ;;\n        esac\n\n        if test \"$have_vsx\" = \"yes\" -a \"x$VSX_CFLAGS\" = x; then\n            AX_CHECK_COMPILE_FLAG(-mvsx, [VSX_CFLAGS=\"-mvsx\"],\n                [AC_MSG_ERROR([Need a version of gcc with -mvsx])])\n        fi\n\n    dnl FIXME:\n    dnl elif test \"$have_mips_ps\" = \"yes\"; then\n    dnl     # Just punt here and use only new 4.2 compiler :(\n    dnl \t# Should add section for older compilers...\n    dnl \tAX_CHECK_COMPILE_FLAG(-mpaired-single,\n    dnl \t    [SIMD_CFLAGS=\"-mpaired-single\"],\n    dnl \t    #[AC_MSG_ERROR([Need a version of gcc with -mpaired-single])])\n    dnl \t    [AX_CHECK_COMPILE_FLAG(-march=mips64,\n    dnl \t      [SIMD_CFLAGS=\"-march=mips64\"],\n    dnl \t        [AC_MSG_ERROR(\n    dnl \t\t [Need a version of gcc with -mpaired-single or -march=mips64])\n    dnl \t\t])])\n    dnl fi\n    ;;\n\n    clang)\n\n        if test \"$have_avx\" = \"yes\" -a \"x$AVX_CFLAGS\" = x; then\n            AX_CHECK_COMPILE_FLAG(-mavx, [AVX_CFLAGS=\"-mavx\"],\n                [AC_MSG_ERROR([Need a version of clang with -mavx])])\n        fi\n\n        if test \"$have_avx2\" = \"yes\" -a \"x$AVX2_CFLAGS\" = x; then\n                AX_CHECK_COMPILE_FLAG(-mavx2, [AVX2_CFLAGS=\"-mavx2\"],\n                    [AC_MSG_ERROR([Need a version of clang with -mavx2])])\n                AX_CHECK_COMPILE_FLAG(-mfma, [AVX2_CFLAGS=\"$AVX2_CFLAGS -mfma\"])\n        fi\n\n        # AVX512\n        if test \"$have_avx512\" = \"yes\" -a \"x$AVX512_CFLAGS\" = x; then\n            AX_CHECK_COMPILE_FLAG(-mavx512f, [AVX512_CFLAGS=\"-mavx512f\"],\n            [AC_MSG_ERROR([Need a version of clang with -mavx512f])])\n        fi\n\n        if test \"$have_vsx\" = \"yes\" -a \"x$VSX_CFLAGS\" = x; then\n            # clang appears to need both -mvsx and -maltivec for VSX\n            AX_CHECK_COMPILE_FLAG(-maltivec, [VSX_CFLAGS=\"-maltivec\"],\n                [AC_MSG_ERROR([Need a version of gcc with -maltivec])])\n            AX_CHECK_COMPILE_FLAG(-mvsx, [VSX_CFLAGS=\"-mvsx $VSX_CFLAGS\"],\n                [AC_MSG_ERROR([Need a version of gcc with -mvsx])])\n        fi\n        ;;\n\n    ibm)\n        if test \"$have_vsx\" = \"yes\" -a \"x$VSX_CFLAGS\" = x; then\n            # Note that IBM xlC uses -qaltivec for VSX too.\n            AX_CHECK_COMPILE_FLAG(-qaltivec, [VSX_CFLAGS=\"-qaltivec\"],\n                [AC_MSG_ERROR([Need a version of gcc with -qaltivec])])\n        fi\n        ;;\nesac\n\nAC_SUBST(SSE2_CFLAGS)\nAC_SUBST(AVX_CFLAGS)\nAC_SUBST(AVX2_CFLAGS)\nAC_SUBST(AVX512_CFLAGS)\nAC_SUBST(KCVI_CFLAGS)\nAC_SUBST(ALTIVEC_CFLAGS)\nAC_SUBST(VSX_CFLAGS)\nAC_SUBST(NEON_CFLAGS)\n\ndnl add stack alignment CFLAGS if so requested\nif test \"$with_incoming_stack_boundary\"x != \"no\"x; then\n   case \"${ax_cv_c_compiler_vendor}\" in\n      gnu)\n        tentative_flags=\"-mincoming-stack-boundary=$with_incoming_stack_boundary\";\n        AX_CHECK_COMPILE_FLAG($tentative_flags,\n              [STACK_ALIGN_CFLAGS=$tentative_flags])\n      ;;\n   esac\nfi\nAC_SUBST(STACK_ALIGN_CFLAGS)\n\ndnl Checks for header files.\nAC_HEADER_STDC\nAC_CHECK_HEADERS([fcntl.h fenv.h limits.h malloc.h stddef.h sys/time.h])\ndnl c_asm.h: Header file for enabling asm() on Digital Unix\ndnl intrinsics.h: cray unicos\ndnl sys/sysctl.h: MacOS X altivec detection\n\ndnl altivec.h requires $ALTIVEC_CFLAGS (we use this for VSX too, which uses the same header)\nsave_CFLAGS=\"$CFLAGS\"\nsave_CPPFLAGS=\"$CPPFLAGS\"\nCFLAGS=\"$CFLAGS $ALTIVEC_CFLAGS $VSX_CFLAGS\"\nCPPFLAGS=\"$CPPFLAGS $ALTIVEC_CFLAGS $VSX_CFLAGS\"\nAC_CHECK_HEADERS([altivec.h])\nCFLAGS=\"$save_CFLAGS\"\nCPPFLAGS=\"$save_CPPFLAGS\"\n\ndnl Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_C_INLINE\nAC_TYPE_SIZE_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\nAC_HEADER_TIME\nAC_CHECK_TYPE([long double],\n              [AC_DEFINE(HAVE_LONG_DOUBLE, 1, [Define to 1 if the compiler supports `long double'])],\n[\nif test $PRECISION = l; then\n    AC_MSG_ERROR([long double is not a supported type with your compiler.])\nfi\n])\nAC_CHECK_TYPE([hrtime_t],[AC_DEFINE(HAVE_HRTIME_T, 1, [Define to 1 if hrtime_t is defined in <sys/time.h>])],,\n[\n#if HAVE_SYS_TIME_H\n#include <sys/time.h>\n#endif\n])\n\nAC_CHECK_SIZEOF(int)\nAC_CHECK_SIZEOF(unsigned int)\nAC_CHECK_SIZEOF(long)\nAC_CHECK_SIZEOF(unsigned long)\nAC_CHECK_SIZEOF(long long)\nAC_CHECK_SIZEOF(unsigned long long)\nAC_CHECK_SIZEOF(size_t)\nAC_CHECK_SIZEOF(ptrdiff_t)\n\nAC_CHECK_TYPES([ptrdiff_t])\nAC_CHECK_TYPES(uintptr_t, [], [AC_CHECK_SIZEOF(void *)], [$ac_includes_default\n#ifdef HAVE_STDINT_H\n#  include <stdint.h>\n#endif])\n\nAC_CHECK_SIZEOF(float)\nAC_CHECK_SIZEOF(double)\n\ndnl Check sizeof fftw_r2r_kind for Fortran interface [it has == sizeof(int)\ndnl for years, but being paranoid].  Note: the definition here must match\ndnl the one in api/fftw3.h!\nAC_CHECK_SIZEOF(fftw_r2r_kind, [], [typedef enum {\n     FFTW_R2HC=0, FFTW_HC2R=1, FFTW_DHT=2,\n     FFTW_REDFT00=3, FFTW_REDFT01=4, FFTW_REDFT10=5, FFTW_REDFT11=6,\n     FFTW_RODFT00=7, FFTW_RODFT01=8, FFTW_RODFT10=9, FFTW_RODFT11=10\n} fftw_r2r_kind;])\nif test 0 = $ac_cv_sizeof_fftw_r2r_kind; then AC_MSG_ERROR([sizeof(fftw_r2r_kind) test failed]); fi\nC_FFTW_R2R_KIND=C_INT`expr $ac_cv_sizeof_fftw_r2r_kind \\* 8`_T\nAC_SUBST(C_FFTW_R2R_KIND)\n\ndnl Checks for library functions.\nAC_FUNC_ALLOCA\nAC_FUNC_STRTOD\nAC_FUNC_VPRINTF\nAC_CHECK_LIB(m, sin)\n\nif test $PRECISION = q; then\n   AX_GCC_VERSION(4,6,0,[],[AC_MSG_ERROR([gcc 4.6 or later required for quad precision support])])\n   AC_CHECK_LIB(quadmath, sinq, [], [AC_MSG_ERROR([quad precision requires libquadmath for quad-precision trigonometric routines])])\n   LIBQUADMATH=-lquadmath\nfi\nAC_SUBST(LIBQUADMATH)\n\nAC_CHECK_FUNCS([BSDgettimeofday gettimeofday gethrtime read_real_time time_base_to_time drand48 sqrt memset posix_memalign memalign _mm_malloc _mm_free clock_gettime mach_absolute_time sysctl abort sinl cosl snprintf memmove strchr getpagesize])\nAC_CHECK_DECLS([sinl, cosl, sinq, cosq],,,[#include <math.h>])\nAC_CHECK_DECLS([memalign],,,[\n#ifdef HAVE_MALLOC_H\n#include <malloc.h>\n#endif])\nAC_CHECK_DECLS([drand48, srand48, posix_memalign]) dnl in stdlib.h\n\ndnl Cray UNICOS _rtc() (real-time clock) intrinsic\nAC_MSG_CHECKING([for _rtc intrinsic])\nrtc_ok=yes\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[#ifdef HAVE_INTRINSICS_H\n#include <intrinsics.h>\n#endif]], [[_rtc()]])],[AC_DEFINE(HAVE__RTC,1,[Define if you have the UNICOS _rtc() intrinsic.])],[rtc_ok=no])\nAC_MSG_RESULT($rtc_ok)\n\nif test \"$PRECISION\" = \"l\"; then\n    AC_CHECK_FUNCS([cosl sinl tanl], [], [AC_MSG_ERROR([long-double precision requires long-double trigonometric routines])])\nfi\n\nAC_MSG_CHECKING([for isnan])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <math.h>\n]], [[if (!isnan(3.14159)) isnan(2.7183);]])],[ok=yes],[ok=no])\nif test \"$ok\" = \"yes\"; then\n    AC_DEFINE(HAVE_ISNAN,1,[Define if the isnan() function/macro is available.])\nfi\nAC_MSG_RESULT(${ok})\n\ndnl TODO\nAX_GCC_ALIGNS_STACK()\n\ndnl override CFLAGS selection when debugging\nif test \"${enable_debug}\" = \"yes\"; then\n    CFLAGS=\"-g\"\nfi\n\ndnl add gcc warnings, in debug/maintainer mode only\nif test \"$enable_debug\" = yes || test \"$USE_MAINTAINER_MODE\" = yes; then\nif test \"x$ac_test_CFLAGS\" != \"xset\" -a \"x$ac_test_CFLAGS\" != \"xy\"; then\n    if test $ac_cv_c_compiler_gnu = yes; then\n        CFLAGS=\"$CFLAGS -Wall -W -Wcast-qual -Wpointer-arith -Wcast-align -pedantic -Wno-long-long -Wshadow -Wbad-function-cast -Wwrite-strings -Wstrict-prototypes -Wredundant-decls -Wnested-externs\" # -Wundef -Wconversion -Wmissing-prototypes -Wmissing-declarations\n    fi\nfi\nfi\n\ndnl check for a proper indent in maintainer mode\nif test \"$USE_MAINTAINER_MODE\" = yes; then\n    AC_PATH_PROG(INDENT, indent, indent)\n    # if INDENT is set to 'indent' then we didn't find indent\n    if test \"$INDENT\" != indent ; then\n        AC_MSG_CHECKING(if $INDENT is GNU indent)\n        if $INDENT --version 2>/dev/null | head -n 1|grep \"GNU indent\" > /dev/null ; then\n                AC_MSG_RESULT(yes)\n                INDENT=\"$INDENT -kr -cs -i5 -l800 -fca -nfc1 -sc -sob -cli4 -TR -Tplanner -TV\"\n        else\n                AC_MSG_RESULT(no)\n                AC_MSG_WARN($INDENT does not appear to be GNU indent.)\n        fi\n    else\n        AC_MSG_WARN(no indent program found: codelets will be ugly)\n        INDENT=cat\n    fi\nfi\n\ndnl -----------------------------------------------------------------------\n\nAC_ARG_ENABLE(fortran, [AS_HELP_STRING([--disable-fortran],[don't include Fortran-callable wrappers])], enable_fortran=$enableval, enable_fortran=yes)\n\nif test \"$enable_fortran\" = \"yes\"; then\n    AC_PROG_F77\n    if test -z \"$F77\"; then\n        enable_fortran=no\n        AC_MSG_WARN([*** Couldn't find f77 compiler; using default Fortran wrappers.])\n    else\n        AC_F77_DUMMY_MAIN([], [enable_fortran=no\n        AC_MSG_WARN([*** Couldn't figure out how to link C and Fortran; using default Fortran wrappers.])])\n    fi\nelse\n    AC_DEFINE([DISABLE_FORTRAN], 1, [Define to disable Fortran wrappers.])\nfi\n\nif test \"x$enable_fortran\" = xyes; then\n    AC_F77_WRAPPERS\n    AC_F77_FUNC(f77foo)\n    AC_F77_FUNC(f77_foo)\n    f77_foo2=`echo $f77foo | sed 's/77/77_/'`\n    if test \"$f77_foo\" = \"$f77_foo2\"; then\n        AC_DEFINE(F77_FUNC_EQUIV, 1, [Define if F77_FUNC and F77_FUNC_ are equivalent.])\n\n        # Include g77 wrappers by default for GNU systems or gfortran\n        with_g77_wrappers=$ac_cv_f77_compiler_gnu\n        case $host_os in *gnu*) with_g77_wrappers=yes ;; esac\n    fi\nelse\n    with_g77_wrappers=no\nfi\n\nAC_ARG_WITH(g77-wrappers, [AS_HELP_STRING([--with-g77-wrappers],[force inclusion of g77-compatible wrappers in addition to any other Fortran compiler that is detected])], with_g77_wrappers=$withval)\nif test \"x$with_g77_wrappers\" = \"xyes\"; then\n    AC_DEFINE(WITH_G77_WRAPPERS,1,[Include g77-compatible wrappers in addition to any other Fortran wrappers.])\nfi\n\ndnl -----------------------------------------------------------------------\nhave_smp=\"no\"\nAC_ARG_ENABLE(openmp, [AS_HELP_STRING([--enable-openmp],[use OpenMP directives for parallelism])], enable_openmp=$enableval, enable_openmp=no)\n\nif test \"$enable_openmp\" = \"yes\"; then\n   AC_DEFINE(HAVE_OPENMP,1,[Define to enable OpenMP])\n   AX_OPENMP([], [AC_MSG_ERROR([don't know how to enable OpenMP])])\nfi\n\nAC_ARG_ENABLE(threads, [AS_HELP_STRING([--enable-threads],[compile FFTW SMP threads library])], enable_threads=$enableval, enable_threads=no)\n\nif test \"$enable_threads\" = \"yes\"; then\n   AC_DEFINE(HAVE_THREADS,1,[Define to enable SMP threads])\nfi\n\nAC_ARG_WITH(combined-threads, [AS_HELP_STRING([--with-combined-threads],[combine threads into main libfftw3])], with_combined_threads=$withval, with_combined_threads=no)\n\nif test \"$with_combined_threads\" = yes; then\n    if test \"$enable_openmp\" = \"yes\"; then\n        AC_MSG_ERROR([--with-combined-threads incompatible with --enable-openmp])\n    fi\n    if test \"$enable_threads\" != \"yes\"; then\n        AC_MSG_ERROR([--with-combined-threads requires --enable-threads])\n    fi\nfi\n\ndnl Check for threads library...\nTHREADLIBS=\"\"\nif test \"$enable_threads\" = \"yes\"; then\n        # Win32 threads are the default on Windows:\n    if test -z \"$THREADLIBS\"; then\n        AC_MSG_CHECKING([for Win32 threads])\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <windows.h>\n                                          #include <process.h>]], [[_beginthreadex(0,0,0,0,0,0);]])],[THREADLIBS=\" \"; AC_MSG_RESULT(yes)],[AC_MSG_RESULT(no)])\n    fi\n\n    # POSIX threads, the default choice everywhere else:\n    if test -z \"$THREADLIBS\"; then\n        ACX_PTHREAD([THREADLIBS=\"$PTHREAD_LIBS \"\n                         CC=\"$PTHREAD_CC\"\n                         AC_DEFINE(USING_POSIX_THREADS, 1, [Define if we have and are using POSIX threads.])])\n    fi\n\n    if test -z \"$THREADLIBS\"; then\n        AC_MSG_ERROR([couldn't find threads library for --enable-threads])\n    fi\n    AC_DEFINE(HAVE_THREADS, 1, [Define if we have a threads library.])\nfi\nAC_SUBST(THREADLIBS)\nAM_CONDITIONAL(THREADS, test \"$enable_threads\" = \"yes\")\nAM_CONDITIONAL(OPENMP, test \"$enable_openmp\" = \"yes\")\nAM_CONDITIONAL(SMP, test \"$enable_threads\" = \"yes\" -o \"$enable_openmp\" = \"yes\")\nAM_CONDITIONAL(COMBINED_THREADS, test x\"$with_combined_threads\" = xyes)\n\ndnl -----------------------------------------------------------------------\n\nAC_MSG_CHECKING([whether a cycle counter is available])\nsave_CPPFLAGS=$CPPFLAGS\nCPPFLAGS=\"$CPPFLAGS -I$srcdir/kernel\"\nAC_PREPROC_IFELSE([AC_LANG_SOURCE([[#include \"cycle.h\"\n#ifndef HAVE_TICK_COUNTER\n#  error No cycle counter\n#endif]])],[ok=yes],[ok=no])\nCPPFLAGS=$save_CPPFLAGS\nAC_MSG_RESULT($ok)\nif test $ok = no && test \"x$with_slow_timer\" = xno; then\n    echo \"***************************************************************\"\n    echo \"WARNING: No cycle counter found.  FFTW will use ESTIMATE mode  \"\n    echo \"         for all plans.  See the manual for more information.\"\n    echo \"***************************************************************\"\nfi\n\ndnl -----------------------------------------------------------------------\n\nAC_DEFINE_UNQUOTED(FFTW_CC, \"$CC $CFLAGS\", [C compiler name and flags])\n\nAC_CONFIG_FILES([\n   Makefile\n   support/Makefile\n   genfft/Makefile\n   kernel/Makefile\n   simd-support/Makefile\n\n   dft/Makefile\n   dft/scalar/Makefile\n   dft/scalar/codelets/Makefile\n   dft/simd/Makefile\n   dft/simd/common/Makefile\n   dft/simd/sse2/Makefile\n   dft/simd/avx/Makefile\n   dft/simd/avx-128-fma/Makefile\n   dft/simd/avx2/Makefile\n   dft/simd/avx2-128/Makefile\n   dft/simd/avx512/Makefile\n   dft/simd/kcvi/Makefile\n   dft/simd/altivec/Makefile\n   dft/simd/vsx/Makefile\n   dft/simd/neon/Makefile\n   dft/simd/generic-simd128/Makefile\n   dft/simd/generic-simd256/Makefile\n\n   rdft/Makefile\n   rdft/scalar/Makefile\n   rdft/scalar/r2cf/Makefile\n   rdft/scalar/r2cb/Makefile\n   rdft/scalar/r2r/Makefile\n   rdft/simd/Makefile\n   rdft/simd/common/Makefile\n   rdft/simd/sse2/Makefile\n   rdft/simd/avx/Makefile\n   rdft/simd/avx-128-fma/Makefile\n   rdft/simd/avx2/Makefile\n   rdft/simd/avx2-128/Makefile\n   rdft/simd/avx512/Makefile\n   rdft/simd/kcvi/Makefile\n   rdft/simd/altivec/Makefile\n   rdft/simd/vsx/Makefile\n   rdft/simd/neon/Makefile\n   rdft/simd/generic-simd128/Makefile\n   rdft/simd/generic-simd256/Makefile\n\n   reodft/Makefile\n\n   threads/Makefile\n\n   api/Makefile\n\n   mpi/Makefile\n\n   libbench2/Makefile\n   tests/Makefile\n   doc/Makefile\n   doc/FAQ/Makefile\n\n   tools/Makefile\n   tools/fftw_wisdom.1\n   tools/fftw-wisdom-to-conf\n\n   m4/Makefile\n\n   fftw.pc\n])\n\nAC_OUTPUT\n"
        },
        {
          "name": "dft",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "fftw.pc.in",
          "type": "blob",
          "size": 0.24609375,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: FFTW\nDescription: fast Fourier transform library\nVersion: @VERSION@\nLibs: -L${libdir} -lfftw3@PREC_SUFFIX@ @LIBQUADMATH@\nLibs.private: -lm\nCflags: -I${includedir}\n"
        },
        {
          "name": "genfft",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "libbench2",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdist.sh",
          "type": "blob",
          "size": 0.4794921875,
          "content": "# This is a script used by the FFTW authors to generate FFTW distributions.\n# You should never need to use it.\n\nNJOBS=4\n\ntag=`git tag --contains HEAD`\nif [ -z \"$tag\" ]; then\n    echo \"Current git HEAD is not tagged---refusing to build distribution\"\n    exit 1\nfi\n\n# hackery to build ChangeLog\ngit log --pretty=medium --date-order > ChangeLog\n\nsh bootstrap.sh\n\nmake maintainer-clean\n./configure --enable-maintainer-mode --enable-single --enable-sse --enable-threads\nmake -j $NJOBS\nmake dist\n\n"
        },
        {
          "name": "mpi",
          "type": "tree",
          "content": null
        },
        {
          "name": "rdft",
          "type": "tree",
          "content": null
        },
        {
          "name": "reodft",
          "type": "tree",
          "content": null
        },
        {
          "name": "simd-support",
          "type": "tree",
          "content": null
        },
        {
          "name": "support",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "threads",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}