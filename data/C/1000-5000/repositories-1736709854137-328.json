{
  "metadata": {
    "timestamp": 1736709854137,
    "page": 328,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ImVexed/muon",
      "stars": 2899,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0380859375,
          "content": "go.sum\nwebfiles/ab0x.go\n.vscode/\n/*.dll"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03515625,
          "content": "MIT License\n\nCopyright (c) 2019 V-X\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.2919921875,
          "content": "<p align=\"center\">\r\n<img width=\"200\" height=\"200\" src=\"./logo.svg\" alt=\"gnet\">\r\n<br /> <br />\r\n<a title=\"Go Report Card\" target=\"_blank\" href=\"https://goreportcard.com/report/github.com/ImVexed/muon\"><img src=\"https://goreportcard.com/badge/github.com/ImVexed/muon?style=flat-square\"></a>\r\n<img alt=\"GitHub code size in bytes\" src=\"https://img.shields.io/github/languages/code-size/ImVexed/muon?style=flat-square\">\r\n<br/>\r\n<a target=\"_blank\" href=\"https://gowalker.org/github.com/ImVexed/muon\"><img src=\"https://img.shields.io/badge/api-reference-blue.svg?style=flat-square\"></a>\r\n</p>\r\n\r\n----\r\n\r\n`Muon` is a lightweight alternative to Electron written in Golang in about ~300 LoC, using Ultralight instead of Chromium. [Ultralight](https://ultralig.ht/) is a cross-platform WebKit rewrite using the GPU to target embedded desktop applications that resulted in a fast, lightweight, and low-memory HTML UI solution that blends the power of Chromium with the small footprint of Native UI.\r\n\r\n\r\n# Features\r\n\r\n- Full JS to Go interop\r\n- GPU based rendering\r\n- Cross-platform\r\n- Hot-reloading\r\n- Superior disk size + memory & cpu usage\r\n\r\nComparison with a \"Hello, World!\" React App\r\n\r\n|      | Muon    | Electron |\r\n|:----:|---------|----------|\r\n| CPU  | 0.0%    | 1.2%     |\r\n| MEM  | 26.0 MB | 201.7 MB |\r\n| DISK | 42 MB   | 136 MB   |\r\n\r\n# Example\r\n\r\nFrom `examples/create-react-app/main.go`:\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"github.com/ImVexed/muon\"\r\n\r\n  \"cra-go/webfiles\"\r\n  \"net/http\"\r\n)\r\n\r\nfunc main() {\r\n  // Any static asset packer of your liking (ex. fileb0x)\r\n  fileHandler := http.FileServer(webfiles.HTTP)\r\n\r\n  cfg := &muon.Config{\r\n    Title:      \"Hello, World!\",\r\n    Height:     500,\r\n    Width:      500,\r\n    Titled:     true,\r\n    Resizeable: true,\r\n  }\r\n\r\n  m := muon.New(cfg, fileHandler)\r\n\r\n  // Expose our `add` function to the JS runtime\r\n  m.Bind(\"add\", add)\r\n\r\n  // Show the Window and start the Runtime\r\n  if err := m.Start(); err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n\r\n// Muon automatically handles interop to and from the JS runtime\r\nfunc add(a float64, b float64) float64 {\r\n  return a + b\r\n}\r\n```\r\n\r\n# FAQ\r\n\r\n## Q: *How are JS types translated to Go types?*\r\n- JS: `Boolean` Go: `bool`\r\n- JS: `Number`  Go: `float64`\r\n- JS: `String`  Go: `string`\r\n- JS: `Object`  Go: `struct` via JSON\r\n\r\n## Q: *How do I setup Ultralight?*\r\n- See our [getting started guide](https://github.com/ImVexed/muon/blob/master/getting-started.md)\r\n\r\n## Q: *Is there perfect Chrome or Firefox feature parity?*\r\n- No, see [Missing Ultralight Features](https://github.com/ultralight-ux/Ultralight/issues/178)\r\n\r\n## Q: *How do I get rid of the Console on Windows?*\r\n- Add `-ldflags -H=windowsgui` to either your `go build` or `go run` to get rid of the window.\r\n\r\n## Q: *I get `exit status 3221225781`*\r\n- Your program likely can't find the Ultralight libraries. Ensure they're either installed on the system, or, in the same folder as your program. Currently, Muon uses the 1.1 Ultralight pre-release that hasn't yet propagated to their main site and can only be downloaded from the [Ultralight](https://github.com/ultralight-ux/Ultralight#getting-the-latest-sdk) github repo.\r\n\r\n## Q: *I get ` libWebCore.so: cannot open shared object file`*\r\n- If you're attempting to load the libraries out of the same directory as your program add `-ldflags \"-r .\"` to your `go build` to set `rpath` to the local directory for library resolution.\r\n\r\n## Q: *I get `symbol not found: ulCreateSettings`*\r\n- This likely means you're not using the 1.1 Ultralight pre-release which can be downloaded only from their [GitHub Repo](https://github.com/ultralight-ux/Ultralight#getting-the-latest-sdk) for now\r\n## Q: *How do I compile for x86?*\r\n- Currently, Ultralight only supports Windows for x86. Ensure you have a 32-bit `gcc` in your path, and ensure you have `CGO_ENABLED=1` and `GOARCH=386` environment variables set.\r\n\r\n# Licensing\r\nWhile muon itself is MIT licensed, [Ultralight](https://ultralig.ht/) is not. \r\n```\r\nUltralight is free for non-commercial use, educational use, \r\nand also free for commercial use by small indie developers making\r\nless than US$100,000 a year. You can find full terms in the SDK. \r\nPricing plans for larger commercial projects will be announced later.\r\n```\r\nTheir specific license terms can be found [here](https://github.com/ultralight-ux/Ultralight/tree/master/license).\r\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "getting-started.md",
          "type": "blob",
          "size": 2.2587890625,
          "content": "# Getting Started with Muon\n\nWhile setup varies depending on your operating system, the steps are largely the same no matter what you're on.\n\nRequirements:\n - Go (1.11+)\n - gcc\n - [Ultralight Libraries](https://github.com/ultralight-ux/ultralight#getting-the-latest-sdk) (`\\.\\bin\\` inside the archive)\n \n Start by cloning the repository and entering the example repository:\n \n ```\n git clone https://github.com/ImVexed/muon\n cd muon/examples/create-react-app\n ```\n \nBefore we can run our project we first need to build and then package all of our frontend assets into a single Go file. There are [many](https://tech.townsourced.com/post/embedding-static-files-in-go/) static asset packagers you can choose from, however we reccomend [fileb0x](https://github.com/UnnoTed/fileb0x) for ease of use and hot reloading.\n\nStart by entering the frontend folder and building it:\n```\ncd public/\nyarn\nyarn build\n```\n\nEnsure you have [fileb0x](https://github.com/UnnoTed/fileb0x) installed and in your `$PATH` variable by running `go install github.com/UnnoTed/fileb0x@latest` \n\nNow, back in the `create-react-app` directory, package the assets by running either:\n```\nfileb0x b0x.yml\n```\nor\n```\ngo generate\n```\n\nWhich will tell fileb0x to use [b0x.yml](https://github.com/ImVexed/muon/blob/master/examples/create-react-app/b0x.yml) to pack our `public/build` folder into a go file in `webfiles/`\n\nFrom there we're good to go as long as we have `gcc` in our path we can run\n```\ngo build\n```\n\nNow that we have a binary we're almost done. If you try to run it now, or, if you ran\n```\ngo run main.go\n```\n\nYou will likely have ran into an error. This is because we are dynamically linking to Ultralight, meaning that it's libraries are resolved when the application is started. To fix this, you'll need the take the [Ultralight Libraries](https://github.com/ultralight-ux/ultralight#getting-the-latest-sdk) (`.dll` for Windows, `.so` for Unix, `.dylib` for Darwin) and put them in the same directory as your application.\n\n**Note for Linux users**\n- Linux by default only looks for shared objects at a specific system path, if you would preffer to load the shared objects from a different directory, simply set the `LD_LIBRARY_PATH` environment variable to the new directory containing the libraries. (`.` being current directory)\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.0390625,
          "content": "module github.com/ImVexed/muon\n\ngo 1.13\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.svg",
          "type": "blob",
          "size": 3.828125,
          "content": "<svg width=\"500\" height=\"499\" xmlns=\"http://www.w3.org/2000/svg\">\n <!-- Created with Method Draw - http://github.com/duopixel/Method-Draw/ -->\n\n <g>\n  <title>background</title>\n  <rect fill=\"none\" id=\"canvas_background\" height=\"501\" width=\"502\" y=\"-1\" x=\"-1\"/>\n  <g display=\"none\" overflow=\"visible\" y=\"0\" x=\"0\" height=\"100%\" width=\"100%\" id=\"canvasGrid\">\n   <rect fill=\"url(#gridpattern)\" stroke-width=\"0\" y=\"1\" x=\"1\" height=\"400\" width=\"504\"/>\n  </g>\n </g>\n <g>\n  <title>Layer 1</title>\n\n  <g stroke=\"null\" id=\"svg_24\">\n   <g stroke=\"null\" transform=\"matrix(1.63521002689062,0,0,1.6809230736495255,-26426.23454689122,-18662.590335853565) \" class=\"signage-logo\" id=\"svg_11\">\n    <defs stroke=\"null\" transform=\"translate(0.888778805732727,0.912152111530304) translate(16159.896484375,0) translate(0,11101.5986328125) \">\n     <linearGradient stroke=\"null\" y2=\"0.000532\" x2=\"1.000533\" y1=\"0.999468\" x1=\"-0.000533\" id=\"svg_15\">\n      <stop stroke=\"null\" offset=\"0.05\" stop-color=\"#7197c6\" id=\"svg_17\"/>\n      <stop stroke=\"null\" offset=\"0.95\" stop-color=\"#355883\" id=\"svg_16\"/>\n     </linearGradient>\n    </defs>\n    <g stroke=\"null\" transform=\"translate(0,11101.5986328125) scale(2.4385147094726562) \" id=\"svg_12\">\n     <g stroke=\"null\" fill=\"url(#svg_15)\" transform=\"translate(30.489402770996094,-0.6671631336212158) scale(1.334328293800354) \" class=\"ugSTNpRxV\" id=\"svg_14\">\n      <path stroke=\"null\" id=\"svg_19\" d=\"m4990.973641,25.980336l-0.5,0c-0.9,0 -1.6,-0.7 -1.6,-1.6c0,-0.9 0.7,-1.6 1.6,-1.6l0.5,0c0.9,0 1.6,0.7 1.6,1.6c0.1,0.8 -0.6,1.6 -1.6,1.6zm15.5,-11.9c0.3,1.4 0.6,2.8 0.8,4.3c2.3,1.7 3.7,3.7 3.7,5.8s-1.4,4.2 -3.7,5.8c-0.2,1.5 -0.5,3 -0.8,4.3c4.8,-2.5 7.8,-6.1 7.8,-10.2c0,-3.9 -3,-7.5 -7.8,-10z\"/>\n      <path stroke=\"null\" id=\"svg_20\" d=\"m4994.673641,37.680336c0.6,-1 1.1,-2.2 1.5,-3.5c-1.8,0.3 -3.6,0.4 -5.5,0.4c-10.8,0 -20.1,-4.7 -20.1,-10.3s9.3,-10.3 20.2,-10.3c1.9,0 3.7,0.1 5.5,0.4c-0.5,-1.4 -1,-2.5 -1.5,-3.5c-1.3,-0.1 -2.6,-0.2 -3.9,-0.2c-13.2,0 -23.5,6 -23.5,13.6s10.2,13.6 23.4,13.6c1.3,0 2.7,-0.1 3.9,-0.2z\"/>\n      <path stroke=\"null\" id=\"svg_21\" d=\"m4977.373641,20.380336c-0.1,1.3 -0.2,2.6 -0.2,3.9s0.1,2.7 0.2,3.9c1,0.6 2.2,1.1 3.5,1.5c-0.3,-1.8 -0.4,-3.6 -0.4,-5.5s0.1,-3.7 0.4,-5.5c-1.3,0.6 -2.5,1.1 -3.5,1.7z\"/>\n      <path stroke=\"null\" id=\"svg_22\" d=\"m4990.773641,0.780336c-4.1,0 -7.7,3 -10.2,7.8c1.4,-0.3 2.8,-0.6 4.3,-0.8c1.7,-2.3 3.7,-3.7 5.8,-3.7c5.6,0 10.3,9.3 10.3,20.2c0,10.9 -4.7,20.2 -10.3,20.2c-2.1,0 -4.2,-1.4 -5.8,-3.7c-1.5,-0.2 -3,-0.5 -4.3,-0.8c2.5,4.8 6.1,7.8 10.2,7.8c7.6,0 13.6,-10.3 13.6,-23.5s-6,-23.5 -13.6,-23.5z\"/>\n     </g>\n     <g stroke=\"null\" fill=\"#355883\" transform=\"translate(62.58000183105469,121.71343231201172) scale(1) \" class=\"text\" id=\"svg_13\">\n      <path stroke=\"null\" id=\"svg_23\" d=\"m6587.346858,0.374061l4.98,0l0,-42l-8.28,0l-5.4,21.48l-5.46,-21.48l-8.46,0l0,42l4.8,0l0,-37.68l6.42,23.58l4.98,0l6.42,-23.58l0,37.68zm34.59,-2.55c1.86,-1.7 2.79,-4.25 2.79,-7.65l0,-31.8l-5.22,0l0,32.94c0,1.24 -0.46,2.3 -1.38,3.18c-0.92,0.88 -2.12,1.32 -3.6,1.32l-2.1,0c-1.48,0 -2.68,-0.44 -3.6,-1.32c-0.92,-0.88 -1.38,-1.94 -1.38,-3.18l0,-32.94l-5.22,0l0,31.8c0,3.4 0.93,5.95 2.79,7.65c1.86,1.7 4.53,2.55 8.01,2.55l0.9,0c3.48,0 6.15,-0.85 8.01,-2.55zm32.94,0c1.86,-1.7 2.79,-4.25 2.79,-7.65l0,-21.6c0,-3.4 -0.93,-5.95 -2.79,-7.65c-1.86,-1.7 -4.53,-2.55 -8.01,-2.55l-2.04,0c-3.48,0 -6.15,0.85 -8.01,2.55c-1.86,1.7 -2.79,4.25 -2.79,7.65l0,21.6c0,3.4 0.93,5.95 2.79,7.65c1.86,1.7 4.53,2.55 8.01,2.55l2.04,0c3.48,0 6.15,-0.85 8.01,-2.55zm-3.81,-33.57c0.92,0.88 1.38,1.94 1.38,3.18l0,23.88c0,1.24 -0.46,2.3 -1.38,3.18c-0.92,0.88 -2.12,1.32 -3.6,1.32l-3.24,0c-1.48,0 -2.68,-0.44 -3.6,-1.32c-0.92,-0.88 -1.38,-1.94 -1.38,-3.18l0,-23.88c0,-1.24 0.46,-2.3 1.38,-3.18c0.92,-0.88 2.12,-1.32 3.6,-1.32l3.24,0c1.48,0 2.68,0.44 3.6,1.32zm30.24,36.12l8.58,0l0,-42l-4.86,0l0,37.56l-9.24,-37.56l-8.52,0l0,42l4.86,0l0,-37.56l9.18,37.56z\"/>\n     </g>\n    </g>\n   </g>\n  </g>\n </g>\n</svg>"
        },
        {
          "name": "muon.go",
          "type": "blob",
          "size": 7.67578125,
          "content": "package muon\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"net\"\n\t\"net/http\"\n\t\"reflect\"\n\t\"unsafe\"\n\n\t. \"github.com/ImVexed/muon/ultralight\"\n)\n\n// Window represents a single Ultralight instance\ntype Window struct {\n\twnd       ULWindow\n\tov        ULOverlay\n\tview      ULView\n\tapp       ULApp\n\thandler   http.Handler\n\tcfg       *Config\n\tcallbacks map[string]*ipf\n}\n\ntype ipf struct {\n\tFunction   reflect.Value\n\tParamTypes []reflect.Type\n}\n\n// Config contains configurable controls for the Ultralight engine\ntype Config struct {\n\tTitle  string\n\tHeight uint32\n\tWidth  uint32\n\tX      int32\n\tY      int32\n\n\tResizeable  bool\n\tBorderless  bool\n\tTitled      bool\n\tMaximizable bool\n}\n\n// New creates a Ultralight Window\nfunc New(cfg *Config, handler http.Handler) *Window {\n\tw := &Window{\n\t\tcfg:       cfg,\n\t\thandler:   handler,\n\t\tcallbacks: make(map[string]*ipf),\n\t}\n\n\tufg := UlCreateConfig()\n\tstd := UlCreateSettings()\n\tw.app = UlCreateApp(std, ufg)\n\tmm := UlAppGetMainMonitor(w.app)\n\n\tvar hint uint32\n\n\tif cfg.Resizeable {\n\t\thint |= 4\n\t}\n\n\tif cfg.Borderless {\n\t\thint |= 1\n\t}\n\n\tif cfg.Titled {\n\t\thint |= 2\n\t} else {\n\t\tw.cfg.Title = \"\"\n\t}\n\n\tif cfg.Maximizable {\n\t\thint |= 8\n\t}\n\n\tw.wnd = UlCreateWindow(mm, w.cfg.Width, w.cfg.Height, false, hint)\n\n\tUlWindowSetTitle(w.wnd, w.cfg.Title)\n\tUlAppSetWindow(w.app, w.wnd)\n\n\tw.ov = UlCreateOverlay(w.wnd, w.cfg.Width, w.cfg.Height, w.cfg.X, w.cfg.Y)\n\n\tUlWindowSetResizeCallback(w.wnd, resizeCallback(w.ov), nil)\n\n\tw.view = UlOverlayGetView(w.ov)\n\n\treturn w\n}\n\n// Start sets up the Ultralight runtime and begins showing the Window\nfunc (w *Window) Start() error {\n\n\taddr, err := serveHandler(w.handler)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\turl := UlCreateString(addr)\n\tdefer UlDestroyString(url)\n\n\tUlViewLoadURL(w.view, url)\n\n\tUlAppRun(w.app)\n\n\treturn nil\n}\n\nvar registerCount int\n\n// Bind registers the given function to the given name in the Window's JS global object\nfunc (w *Window) Bind(name string, function interface{}) {\n\tf := &ipf{\n\t\tFunction: reflect.ValueOf(function),\n\t}\n\n\tt := f.Function.Type()\n\n\tf.ParamTypes = make([]reflect.Type, t.NumIn())\n\n\tfor i := 0; i < t.NumIn(); i++ {\n\t\tf.ParamTypes[i] = t.In(i)\n\t}\n\n\tif t.NumOut() > 1 {\n\t\tpanic(\"Too many return values!\")\n\t}\n\n\tw.callbacks[name] = f\n\n\tw.addFunction(name)\n}\n\n// Eval evaluates a given JavaScript string in the given Window view. `ret` is necessary for JSON serialization if an object is returned.\nfunc (w *Window) Eval(js string, ret reflect.Type) (interface{}, error) {\n\tus := UlCreateString(js)\n\tdefer UlDestroyString(us)\n\n\tref := UlViewEvaluateScript(w.view, us)\n\tctx := UlViewGetJSContext(w.view)\n\n\tval, err := fromJSValue(ctx, ref, ret)\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn val.Interface(), nil\n}\n\n// Resize changes the given Window's size\nfunc (w *Window) Resize(width int, height int) {\n\tUlOverlayResize(w.ov, uint32(width), uint32(height))\n}\n\n// Move sets the Window's position to the given coordinates\nfunc (w *Window) Move(x int, y int) {\n\tUlOverlayMoveTo(w.ov, int32(x), int32(y))\n}\n\nfunc (w *Window) ipcCallback(ctx JSContextRef, functin JSObjectRef, thisObject JSObjectRef, argumentCount uint, arguments []JSValueRef, exception []JSValueRef) JSValueRef {\n\tjsName := JSStringCreateWithUTF8CString(\"name\")\n\tdefer JSStringRelease(jsName)\n\n\tprop := JSObjectGetProperty(ctx, functin, jsName, nil)\n\tjsProp := JSValueToStringCopy(ctx, prop, nil)\n\tdefer JSStringRelease(jsProp)\n\n\tname := fromJSString(jsProp)\n\n\tf, ok := w.callbacks[name]\n\n\tif !ok {\n\t\treturn JSValueMakeNull(ctx)\n\t}\n\n\tparams := make([]reflect.Value, argumentCount)\n\n\tfor i := uint(0); i < argumentCount; i++ {\n\t\tval, err := fromJSValue(ctx, arguments[i], f.ParamTypes[i])\n\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tparams[i] = val\n\t}\n\n\tval := f.Function.Call(params)\n\n\tif len(val) > 1 {\n\t\tpanic(\"Javascript does not support more than 1 return value!\")\n\t}\n\n\tif len(val) == 0 {\n\t\treturn JSValueMakeNull(ctx)\n\t}\n\n\treturn toJSValue(ctx, val[0])\n}\n\nfunc fromJSValue(ctx JSContextRef, value JSValueRef, rtype reflect.Type) (reflect.Value, error) {\n\tif rtype == nil {\n\t\trtype = reflect.TypeOf(struct{}{})\n\t}\n\n\tvar rv reflect.Value\n\tvar err error\n\n\tif JSValueIsArray(ctx, value) {\n\t\tl := JSStringCreateWithUTF8CString(\"length\")\n\t\tdefer JSStringRelease(l)\n\n\t\tobj := *(*JSObjectRef)(unsafe.Pointer(&value))\n\n\t\tprop := JSObjectGetProperty(ctx, obj, l, nil)\n\t\tlength := int(JSValueToNumber(ctx, prop, nil))\n\n\t\tif rtype.Kind() != reflect.Slice {\n\t\t\treturn reflect.Zero(rtype), errors.New(\"JS return is of type Array while Go type target is not\")\n\t\t}\n\n\t\tvalues := reflect.MakeSlice(rtype, length, length)\n\n\t\tfor i := 0; i < length; i++ {\n\t\t\tref := JSObjectGetPropertyAtIndex(ctx, obj, uint32(i), nil)\n\n\t\t\tval, err := fromJSValue(ctx, ref, rtype.Elem())\n\n\t\t\tif err != nil {\n\t\t\t\treturn reflect.Zero(rtype), err\n\t\t\t}\n\n\t\t\tvalues.Index(i).Set(val)\n\t\t}\n\n\t\treturn values, nil\n\t}\n\n\tswitch JSValueGetType(ctx, value) {\n\tcase KJSTypeBoolean:\n\t\trv = reflect.ValueOf(JSValueToBoolean(ctx, value))\n\tcase KJSTypeNumber:\n\t\trv = reflect.ValueOf(JSValueToNumber(ctx, value, nil))\n\tcase KJSTypeString:\n\t\tref := JSValueToStringCopy(ctx, value, nil)\n\t\trv = reflect.ValueOf(fromJSString(ref))\n\t\tJSStringRelease(ref)\n\tcase KJSTypeObject:\n\t\tref := JSValueCreateJSONString(ctx, value, 0, nil)\n\t\tobj := reflect.New(rtype).Interface()\n\n\t\tif err = json.Unmarshal([]byte(fromJSString(ref)), &obj); err == nil {\n\t\t\trv = reflect.Indirect(reflect.ValueOf(obj))\n\t\t}\n\n\t\tJSStringRelease(ref)\n\tcase KJSTypeUndefined, KJSTypeNull:\n\t\trv = reflect.Zero(rtype)\n\t}\n\n\treturn rv, err\n}\n\nfunc fromJSString(str JSStringRef) string {\n\tlen := JSStringGetMaximumUTF8CStringSize(str)\n\tdata := make([]byte, len)\n\twritten := JSStringGetUTF8CString(str, data, len)\n\n\treturn string(data[:written-1])\n}\n\nfunc toJSValue(ctx JSContextRef, value reflect.Value) JSValueRef {\n\tvar jsv JSValueRef\n\tvar err error\n\n\tswitch value.Kind() {\n\tcase reflect.Float64:\n\t\tjsv = JSValueMakeNumber(ctx, value.Float())\n\tcase reflect.Bool:\n\t\tjsv = JSValueMakeBoolean(ctx, value.Bool())\n\tcase reflect.String:\n\t\tstr := JSStringCreateWithUTF8CString(value.String())\n\t\tjsv = JSValueMakeString(ctx, str)\n\t\tJSStringRelease(str)\n\tcase reflect.Ptr:\n\t\treturn toJSValue(ctx, reflect.Indirect(value))\n\tcase reflect.Struct:\n\t\tif json, err := json.Marshal(value.Interface()); err == nil {\n\t\t\tstr := JSStringCreateWithUTF8CString(string(json))\n\t\t\tjsv = JSValueMakeFromJSONString(ctx, str)\n\t\t\tJSStringRelease(str)\n\t\t}\n\tcase reflect.Slice, reflect.Array:\n\t\trets := make([]JSValueRef, value.Len())\n\n\t\tfor i := 0; i < value.Len(); i++ {\n\t\t\trets[i] = toJSValue(ctx, value.Index(i))\n\t\t}\n\t\tarr := JSObjectMakeArray(ctx, uint(len(rets)), rets, nil)\n\t\tjsv = *(*JSValueRef)(unsafe.Pointer(&arr))\n\tdefault:\n\t\tpanic(\"Not implemented!\")\n\t}\n\n\tif err != nil {\n\t\treturn JSValueMakeNull(ctx)\n\t}\n\n\treturn jsv\n}\n\nfunc (w *Window) addFunction(name string) {\n\tctx := UlViewGetJSContext(w.view)\n\tgobj := JSContextGetGlobalObject(ctx)\n\n\tfn := JSStringCreateWithUTF8CString(name)\n\tdefer JSStringRelease(fn)\n\n\tfname := JSStringCreateWithUTF8CString(\"name\")\n\tdefer JSStringRelease(fname)\n\n\tfob := JSObjectMakeFunctionWithCallback(ctx, fn, w.ipcCallback)\n\tJSObjectSetProperty(ctx, fob, fname, JSValueMakeString(ctx, fname), KJSPropertyAttributeNone, []JSValueRef{})\n\n\tval := *(*JSValueRef)(unsafe.Pointer(&fob))\n\n\tJSObjectSetProperty(ctx, gobj, fn, val, KJSPropertyAttributeNone, []JSValueRef{})\n}\n\nfunc resizeCallback(ov ULOverlay) func(userData unsafe.Pointer, width uint32, height uint32) {\n\treturn func(userData unsafe.Pointer, width uint32, height uint32) {\n\t\tif height > 0 && width > 0 {\n\t\t\tUlOverlayResize(ov, width, height)\n\t\t}\n\t}\n}\n\nfunc serveHandler(handler http.Handler) (string, error) {\n\tln, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tgo func() {\n\t\tif err := http.Serve(ln, handler); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\treturn \"http://\" + ln.Addr().String(), nil\n}\n"
        },
        {
          "name": "muon_test.go",
          "type": "blob",
          "size": 2.3330078125,
          "content": "package muon\n\nimport (\n\t\"net/http\"\n\t\"os\"\n\t\"reflect\"\n\t\"testing\"\n)\n\nvar w *Window\n\nfunc TestMain(m *testing.M) {\n\tcfg := &Config{\n\t\tHeight: 1,\n\t\tWidth:  1,\n\t}\n\n\tw = New(cfg, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {}))\n\n\tgo func() {\n\t\tw.Start()\n\t}()\n\n\tos.Exit(m.Run())\n}\n\ntype testObject struct {\n\tS1 string\n\tF1 float64\n\tB1 bool\n}\n\nfunc TestComplexType(t *testing.T) {\n\n\tw.Bind(\"complexTest\", func(to *testObject) *testObject {\n\t\treturn &testObject{\n\t\t\tS1: to.S1 + \" World!\",\n\t\t\tF1: to.F1 + 1,\n\t\t\tB1: !to.B1,\n\t\t}\n\t})\n\n\tres, err := w.Eval(`complexTest({S1: \"Hello,\", F1: 9000, B1: false})`, reflect.TypeOf(&testObject{}))\n\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\n\tto := res.(*testObject)\n\n\tif to.S1 != \"Hello, World!\" {\n\t\tt.Errorf(\"to.S1 was not correct, got %s\", to.S1)\n\t}\n\n\tif to.F1 != 9001 {\n\t\tt.Errorf(\"to.F1 was under 9000, got %f\", to.F1)\n\t}\n\n\tif !to.B1 {\n\t\tt.Errorf(\"to.B1 was not True, got false\")\n\t}\n}\n\nfunc t2(to *testObject) *testObject {\n\treturn &testObject{\n\t\tS1: to.S1 + \" World!\",\n\t\tF1: to.F1 + 1,\n\t\tB1: !to.B1,\n\t}\n}\n\nfunc TestArrayType(t *testing.T) {\n\n\tw.Bind(\"arrayTest\", func(strings []string) []float64 {\n\t\tif strings[0] != \"Hello\" {\n\t\t\tt.Errorf(\"strings[0] was not Hello, got %s\", strings[0])\n\t\t}\n\t\tif strings[1] != \"World!\" {\n\t\t\tt.Errorf(\"strings[1] was not World!, got %s\", strings[1])\n\t\t}\n\t\treturn []float64{1, 2, 3}\n\t})\n\n\tres, err := w.Eval(`arrayTest([\"Hello\",\"World!\"])`, reflect.TypeOf([]float64{}))\n\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\n\tnums := res.([]float64)\n\n\tif nums[0] != 1 {\n\t\tt.Errorf(\"nums[0] was not 1, got %f\", nums[0])\n\t}\n\n\tif nums[1] != 2 {\n\t\tt.Errorf(\"nums[1] was not 2, got %f\", nums[1])\n\t}\n\n\tif nums[2] != 3 {\n\t\tt.Errorf(\"nums[2] was not 3, got %f\", nums[2])\n\t}\n}\n\nfunc TestEmptyType(t *testing.T) {\n\n\tw.Bind(\"emptyTypeTest\", func(nullValue string, undefinedValue string) {\n\t\tif nullValue != \"\" {\n\t\t\tt.Errorf(\"nullType was not empty!\")\n\t\t}\n\t\tif undefinedValue != \"\" {\n\t\t\tt.Errorf(\"undefinedType was not empty!\")\n\t\t}\n\t})\n\n\t_, err := w.Eval(`emptyTypeTest(null, undefined)`, nil)\n\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n}\n\nfunc TestMultipleFuncs(t *testing.T) {\n\tw.Bind(\"multiple1Test\", func(value1 string) {})\n\tw.Bind(\"multiple2Test\", func(value2 bool) {})\n\n\t_, err := w.Eval(`multiple1Test(\"Hello, World1\")`, nil)\n\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\n\t_, err = w.Eval(`multiple2Test(true)`, nil)\n\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n}\n"
        },
        {
          "name": "ultralight.yml",
          "type": "blob",
          "size": 2.20703125,
          "content": "GENERATOR: \n  PackageName: ultralight\n  PackageDescription: \"Ultralight bindings for golang\"\n  PackageLicense: \"THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.\"\n  FlagGroups:\n    - {name: CFLAGS, flags: [-I../include]}\n    - {name: LDFLAGS, flags: [\"-L${SRCDIR}/libs -lUltralightCore -lWebCore -lUltralight -lAppCore\"]}\n  Includes: [\"AppCore/CAPI.h\"]\n  Options:\n    SafeStrings: true\n\nPARSER: \n  Arch: x86_64\n  IncludePaths:\n    - include\n    - /usr/include\n    - /usr/lib/gcc/x86_64-linux-gnu/7/include\n  SourcesPaths:\n    - AppCore/CAPI.h\n\nTRANSLATOR:\n    ConstRules:\n        defines: eval\n    Rules:\n        global:\n            - {action: accept, from: \"^ul\"}\n            - {action: accept, from: \"^UL\"}\n            - {action: accept, from: \"^JS\"}\n            - {action: accept, from: \"^k\"}\n            - {action: accept, from: \"^B\"}\n            - {action: ignore, from: __size_t__}\n            - {action: ignore, from: __SIZE_T__}\n            - {action: ignore, from: _BSD_SIZE_T_DEFINED_}\n            - {action: ignore, from: _SIZE_T_DECLARED}\n            - {action: ignore, from: __wchar_t__}\n            - {action: ignore, from: __WCHAR_T__}\n            - {transform: export}\n        function:\n            - {action: ignore, from: __GO__}\n            # - {action: ignore, from: JSObjectGetArrayBufferByteLength}\n            # - {action: ignore, from: JSObjectGetArrayBufferBytesPtr}\n            # - {action: ignore, from: JSObjectGetTypedArrayBuffer}\n            # - {action: ignore, from: JSObjectGetTypedArrayByteLength}\n            # - {action: ignore, from: JSObjectGetTypedArrayByteOffset}\n            # - {action: ignore, from: JSObjectGetTypedArrayBytesPtr}\n            # - {action: ignore, from: JSObjectGetTypedArrayLength}\n            # - {action: ignore, from: JSObjectMakeArrayBufferWithBytesNoCopy}\n            # - {action: ignore, from: JSObjectMakeTypedArray}\n            # - {action: ignore, from: JSObjectMakeTypedArrayWithArrayBuffer}\n            # - {action: ignore, from: JSObjectMakeTypedArrayWithArrayBufferAndOffset}\n            # - {action: ignore, from: JSObjectMakeTypedArrayWithBytesNoCopy}\n            # - {action: ignore, from: JSValueGetTypedArrayType}\n        private:\n            - {transform: unexport}"
        },
        {
          "name": "ultralight",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}