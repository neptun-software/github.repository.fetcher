{
  "metadata": {
    "timestamp": 1736709715244,
    "page": 97,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lotabout/write-a-C-interpreter",
      "stars": 4109,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.240234375,
          "content": "# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.6044921875,
          "content": "GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc., <http://fsf.org/>\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {description}\n    Copyright (C) {year}  {fullname}\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  {signature of Ty Coon}, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.26953125,
          "content": "C interpreter that interprets itself.\n\n# How to Run the Code\n\nFile `xc.c` is the original one and `xc-tutor.c` is the one that I make for\nthe tutorial step by step.\n\n```\ngcc -o xc xc.c\n./xc hello.c\n./xc -s hello.c\n\n./xc xc.c hello.c\n./xc xc.c xc.c hello.c\n```\n\n# About\n\nThis project is inspired by [c4](https://github.com/rswier/c4) and is largely\nbased on it.\n\nHowever, I rewrote them all to make it more understandable and help myself to\nunderstand it.\n\nDespite the complexity we saw in books about compiler design, writing one is\nnot that hard. You don't need that much theory though they will help for\nbetter understanding the logic behind the code.\n\nAlso I write a series of article about how this compiler is built under directory `tutorial/en`.\n\nThere is also a chinese version in my blog.\n\n1. [手把手教你构建 C 语言编译器（0）——前言](http://lotabout.me/2015/write-a-C-interpreter-0/)\n2. [手把手教你构建 C 语言编译器（1）——设计](http://lotabout.me/2015/write-a-C-interpreter-1/)\n3. [手把手教你构建 C 语言编译器（2）——虚拟机](http://lotabout.me/2015/write-a-C-interpreter-2/)\n4. [手把手教你构建 C 语言编译器（3）——词法分析器](http://lotabout.me/2015/write-a-C-interpreter-3/)\n4. [手把手教你构建 C 语言编译器（4）——递归下降](http://lotabout.me/2016/write-a-C-interpreter-4/)\n5. [手把手教你构建 C 语言编译器（5）——变量定义](http://lotabout.me/2016/write-a-C-interpreter-5/)\n6. [手把手教你构建 C 语言编译器（6）——函数定义](http://lotabout.me/2016/write-a-C-interpreter-6/)\n7. [手把手教你构建 C 语言编译器（7）——语句](http://lotabout.me/2016/write-a-C-interpreter-7/)\n8. [手把手教你构建 C 语言编译器（8）——表达式](http://lotabout.me/2016/write-a-C-interpreter-8/)\n0. [手把手教你构建 C 语言编译器（9）——总结](http://lotabout.me/2016/write-a-C-interpreter-9/)\n\n# Resources\n\nFurther Reading:\n\n- [Let's Build a Compiler](http://compilers.iecc.com/crenshaw/): An excellent\n    starting material for building compiler.\n\n\nForks:\n\n- [A fork that implement debugger for xc.c](https://github.com/descent/write-a-C-interpreter)\n\n\n# Licence\n\nThe original code is licenced with GPL2, so this code will use the same\nlicence.\n"
        },
        {
          "name": "hello.c",
          "type": "blob",
          "size": 0.28125,
          "content": "#include <stdio.h>\n\nint fibonacci(int i) {\n    if (i <= 1) {\n        return 1;\n    }\n    return fibonacci(i-1) + fibonacci(i-2);\n}\n\nint main()\n{\n    int i;\n    i = 0;\n    while (i <= 10) {\n        printf(\"fibonacci(%2d) = %d\\n\", i, fibonacci(i));\n        i = i + 1;\n    }\n    return 0;\n}\n"
        },
        {
          "name": "tutorial",
          "type": "tree",
          "content": null
        },
        {
          "name": "xc-tutor.c",
          "type": "blob",
          "size": 38.62109375,
          "content": "// this file is used for tutorial to build the compiler step by step\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <memory.h>\n#include <string.h>\n#include <stdint.h>\n#define int intptr_t\n\nint token;                    // current token\nint token_val;                // value of current token (mainly for number)\nchar *src, *old_src;          // pointer to source code string;\nint poolsize;                 // default size of text/data/stack\nint line;                     // line number\nint *text,                    // text segment\n    *old_text,                // for dump text segment\n    *stack;                   // stack\nchar *data;                   // data segment\nint *pc, *bp, *sp, ax, cycle; // virtual machine registers\nint *current_id,              // current parsed ID\n    *symbols;                 // symbol table\nint *idmain;                  // the `main` function\n\n// instructions\nenum { LEA ,IMM ,JMP ,CALL,JZ  ,JNZ ,ENT ,ADJ ,LEV ,LI  ,LC  ,SI  ,SC  ,PUSH,\n       OR  ,XOR ,AND ,EQ  ,NE  ,LT  ,GT  ,LE  ,GE  ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD ,\n       OPEN,READ,CLOS,PRTF,MALC,MSET,MCMP,EXIT };\n\n// tokens and classes (operators last and in precedence order)\nenum {\n  Num = 128, Fun, Sys, Glo, Loc, Id,\n  Char, Else, Enum, If, Int, Return, Sizeof, While,\n  Assign, Cond, Lor, Lan, Or, Xor, And, Eq, Ne, Lt, Gt, Le, Ge, Shl, Shr, Add, Sub, Mul, Div, Mod, Inc, Dec, Brak\n};\n\n// fields of identifier\nenum {Token, Hash, Name, Type, Class, Value, BType, BClass, BValue, IdSize};\n\n// types of variable/function\nenum { CHAR, INT, PTR };\n\nint basetype;    // the type of a declaration, make it global for convenience\nint expr_type;   // the type of an expression\n\n// function frame\n//\n// 0: arg 1\n// 1: arg 2\n// 2: arg 3\n// 3: return address\n// 4: old bp pointer  <- index_of_bp\n// 5: local var 1\n// 6: local var 2\nint index_of_bp; // index of bp pointer on stack\n\nvoid next() {\n    char *last_pos;\n    int hash;\n\n    while (token = *src) {\n        ++src;\n\n        // parse token here\n        if (token == '\\n') {\n            ++line;\n        }\n        else if (token == '#') {\n            // skip macro, because we will not support it\n            while (*src != 0 && *src != '\\n') {\n                src++;\n            }\n        }\n        else if ((token >= 'a' && token <= 'z') || (token >= 'A' && token <= 'Z') || (token == '_')) {\n\n            // parse identifier\n            last_pos = src - 1;\n            hash = token;\n\n            while ((*src >= 'a' && *src <= 'z') || (*src >= 'A' && *src <= 'Z') || (*src >= '0' && *src <= '9') || (*src == '_')) {\n                hash = hash * 147 + *src;\n                src++;\n            }\n\n            // look for existing identifier, linear search\n            current_id = symbols;\n            while (current_id[Token]) {\n                if (current_id[Hash] == hash && !memcmp((char *)current_id[Name], last_pos, src - last_pos)) {\n                    //found one, return\n                    token = current_id[Token];\n                    return;\n                }\n                current_id = current_id + IdSize;\n            }\n\n\n            // store new ID\n            current_id[Name] = (int)last_pos;\n            current_id[Hash] = hash;\n            token = current_id[Token] = Id;\n            return;\n        }\n        else if (token >= '0' && token <= '9') {\n            // parse number, three kinds: dec(123) hex(0x123) oct(017)\n            token_val = token - '0';\n            if (token_val > 0) {\n                // dec, starts with [1-9]\n                while (*src >= '0' && *src <= '9') {\n                    token_val = token_val*10 + *src++ - '0';\n                }\n            } else {\n                // starts with 0\n                if (*src == 'x' || *src == 'X') {\n                    //hex\n                    token = *++src;\n                    while ((token >= '0' && token <= '9') || (token >= 'a' && token <= 'f') || (token >= 'A' && token <= 'F')) {\n                        token_val = token_val * 16 + (token & 15) + (token >= 'A' ? 9 : 0);\n                        token = *++src;\n                    }\n                } else {\n                    // oct\n                    while (*src >= '0' && *src <= '7') {\n                        token_val = token_val*8 + *src++ - '0';\n                    }\n                }\n            }\n\n            token = Num;\n            return;\n        }\n        else if (token == '\"' || token == '\\'') {\n            // parse string literal, currently, the only supported escape\n            // character is '\\n', store the string literal into data.\n            last_pos = data;\n            while (*src != 0 && *src != token) {\n                token_val = *src++;\n                if (token_val == '\\\\') {\n                    // escape character\n                    token_val = *src++;\n                    if (token_val == 'n') {\n                        token_val = '\\n';\n                    }\n                }\n\n                if (token == '\"') {\n                    *data++ = token_val;\n                }\n            }\n\n            src++;\n            // if it is a single character, return Num token\n            if (token == '\"') {\n                token_val = (int)last_pos;\n            } else {\n                token = Num;\n            }\n\n            return;\n        }\n        else if (token == '/') {\n            if (*src == '/') {\n                // skip comments\n                while (*src != 0 && *src != '\\n') {\n                    ++src;\n                }\n            } else {\n                // divide operator\n                token = Div;\n                return;\n            }\n        }\n        else if (token == '=') {\n            // parse '==' and '='\n            if (*src == '=') {\n                src ++;\n                token = Eq;\n            } else {\n                token = Assign;\n            }\n            return;\n        }\n        else if (token == '+') {\n            // parse '+' and '++'\n            if (*src == '+') {\n                src ++;\n                token = Inc;\n            } else {\n                token = Add;\n            }\n            return;\n        }\n        else if (token == '-') {\n            // parse '-' and '--'\n            if (*src == '-') {\n                src ++;\n                token = Dec;\n            } else {\n                token = Sub;\n            }\n            return;\n        }\n        else if (token == '!') {\n            // parse '!='\n            if (*src == '=') {\n                src++;\n                token = Ne;\n            }\n            return;\n        }\n        else if (token == '<') {\n            // parse '<=', '<<' or '<'\n            if (*src == '=') {\n                src ++;\n                token = Le;\n            } else if (*src == '<') {\n                src ++;\n                token = Shl;\n            } else {\n                token = Lt;\n            }\n            return;\n        }\n        else if (token == '>') {\n            // parse '>=', '>>' or '>'\n            if (*src == '=') {\n                src ++;\n                token = Ge;\n            } else if (*src == '>') {\n                src ++;\n                token = Shr;\n            } else {\n                token = Gt;\n            }\n            return;\n        }\n        else if (token == '|') {\n            // parse '|' or '||'\n            if (*src == '|') {\n                src ++;\n                token = Lor;\n            } else {\n                token = Or;\n            }\n            return;\n        }\n        else if (token == '&') {\n            // parse '&' and '&&'\n            if (*src == '&') {\n                src ++;\n                token = Lan;\n            } else {\n                token = And;\n            }\n            return;\n        }\n        else if (token == '^') {\n            token = Xor;\n            return;\n        }\n        else if (token == '%') {\n            token = Mod;\n            return;\n        }\n        else if (token == '*') {\n            token = Mul;\n            return;\n        }\n        else if (token == '[') {\n            token = Brak;\n            return;\n        }\n        else if (token == '?') {\n            token = Cond;\n            return;\n        }\n        else if (token == '~' || token == ';' || token == '{' || token == '}' || token == '(' || token == ')' || token == ']' || token == ',' || token == ':') {\n            // directly return the character as token;\n            return;\n        }\n    }\n    return;\n}\n\nvoid match(int tk) {\n    if (token == tk) {\n        next();\n    } else {\n        printf(\"%d: expected token: %d\\n\", line, tk);\n        exit(-1);\n    }\n}\n\nvoid expression(int level) {\n    // expressions have various format.\n    // but majorly can be divided into two parts: unit and operator\n    // for example `(char) *a[10] = (int *) func(b > 0 ? 10 : 20);\n    // `a[10]` is an unit while `*` is an operator.\n    // `func(...)` in total is an unit.\n    // so we should first parse those unit and unary operators\n    // and then the binary ones\n    //\n    // also the expression can be in the following types:\n    //\n    // 1. unit_unary ::= unit | unit unary_op | unary_op unit\n    // 2. expr ::= unit_unary (bin_op unit_unary ...)\n\n    // unit_unary()\n    int *id;\n    int tmp;\n    int *addr;\n    {\n        if (!token) {\n            printf(\"%d: unexpected token EOF of expression\\n\", line);\n            exit(-1);\n        }\n        if (token == Num) {\n            match(Num);\n\n            // emit code\n            *++text = IMM;\n            *++text = token_val;\n            expr_type = INT;\n        }\n        else if (token == '\"') {\n            // continous string \"abc\" \"abc\"\n\n\n            // emit code\n            *++text = IMM;\n            *++text = token_val;\n\n            match('\"');\n            // store the rest strings\n            while (token == '\"') {\n                match('\"');\n            }\n\n            // append the end of string character '\\0', all the data are default\n            // to 0, so just move data one position forward.\n            data = (char *)(((int)data + sizeof(int)) & (-sizeof(int)));\n            expr_type = PTR;\n        }\n        else if (token == Sizeof) {\n            // sizeof is actually an unary operator\n            // now only `sizeof(int)`, `sizeof(char)` and `sizeof(*...)` are\n            // supported.\n            match(Sizeof);\n            match('(');\n            expr_type = INT;\n\n            if (token == Int) {\n                match(Int);\n            } else if (token == Char) {\n                match(Char);\n                expr_type = CHAR;\n            }\n\n            while (token == Mul) {\n                match(Mul);\n                expr_type = expr_type + PTR;\n            }\n\n            match(')');\n\n            // emit code\n            *++text = IMM;\n            *++text = (expr_type == CHAR) ? sizeof(char) : sizeof(int);\n\n            expr_type = INT;\n        }\n        else if (token == Id) {\n            // there are several type when occurs to Id\n            // but this is unit, so it can only be\n            // 1. function call\n            // 2. Enum variable\n            // 3. global/local variable\n            match(Id);\n\n            id = current_id;\n\n            if (token == '(') {\n                // function call\n                match('(');\n\n                // pass in arguments\n                tmp = 0; // number of arguments\n                while (token != ')') {\n                    expression(Assign);\n                    *++text = PUSH;\n                    tmp ++;\n\n                    if (token == ',') {\n                        match(',');\n                    }\n\n                }\n                match(')');\n\n                // emit code\n                if (id[Class] == Sys) {\n                    // system functions\n                    *++text = id[Value];\n                }\n                else if (id[Class] == Fun) {\n                    // function call\n                    *++text = CALL;\n                    *++text = id[Value];\n                }\n                else {\n                    printf(\"%d: bad function call\\n\", line);\n                    exit(-1);\n                }\n\n                // clean the stack for arguments\n                if (tmp > 0) {\n                    *++text = ADJ;\n                    *++text = tmp;\n                }\n                expr_type = id[Type];\n            }\n            else if (id[Class] == Num) {\n                // enum variable\n                *++text = IMM;\n                *++text = id[Value];\n                expr_type = INT;\n            }\n            else {\n                // variable\n                if (id[Class] == Loc) {\n                    *++text = LEA;\n                    *++text = index_of_bp - id[Value];\n                }\n                else if (id[Class] == Glo) {\n                    *++text = IMM;\n                    *++text = id[Value];\n                }\n                else {\n                    printf(\"%d: undefined variable\\n\", line);\n                    exit(-1);\n                }\n\n                // emit code, default behaviour is to load the value of the\n                // address which is stored in `ax`\n                expr_type = id[Type];\n                *++text = (expr_type == CHAR) ? LC : LI;\n            }\n        }\n        else if (token == '(') {\n            // cast or parenthesis\n            match('(');\n            if (token == Int || token == Char) {\n                tmp = (token == Char) ? CHAR : INT; // cast type\n                match(token);\n                while (token == Mul) {\n                    match(Mul);\n                    tmp = tmp + PTR;\n                }\n\n                match(')');\n\n                expression(Inc); // cast has precedence as Inc(++)\n\n                expr_type  = tmp;\n            } else {\n                // normal parenthesis\n                expression(Assign);\n                match(')');\n            }\n        }\n        else if (token == Mul) {\n            // dereference *<addr>\n            match(Mul);\n            expression(Inc); // dereference has the same precedence as Inc(++)\n\n            if (expr_type >= PTR) {\n                expr_type = expr_type - PTR;\n            } else {\n                printf(\"%d: bad dereference\\n\", line);\n                exit(-1);\n            }\n\n            *++text = (expr_type == CHAR) ? LC : LI;\n        }\n        else if (token == And) {\n            // get the address of\n            match(And);\n            expression(Inc); // get the address of\n            if (*text == LC || *text == LI) {\n                text --;\n            } else {\n                printf(\"%d: bad address of\\n\", line);\n                exit(-1);\n            }\n\n            expr_type = expr_type + PTR;\n        }\n        else if (token == '!') {\n            // not\n            match('!');\n            expression(Inc);\n\n            // emit code, use <expr> == 0\n            *++text = PUSH;\n            *++text = IMM;\n            *++text = 0;\n            *++text = EQ;\n\n            expr_type = INT;\n        }\n        else if (token == '~') {\n            // bitwise not\n            match('~');\n            expression(Inc);\n\n            // emit code, use <expr> XOR -1\n            *++text = PUSH;\n            *++text = IMM;\n            *++text = -1;\n            *++text = XOR;\n\n            expr_type = INT;\n        }\n        else if (token == Add) {\n            // +var, do nothing\n            match(Add);\n            expression(Inc);\n\n            expr_type = INT;\n        }\n        else if (token == Sub) {\n            // -var\n            match(Sub);\n\n            if (token == Num) {\n                *++text = IMM;\n                *++text = -token_val;\n                match(Num);\n            } else {\n\n                *++text = IMM;\n                *++text = -1;\n                *++text = PUSH;\n                expression(Inc);\n                *++text = MUL;\n            }\n\n            expr_type = INT;\n        }\n        else if (token == Inc || token == Dec) {\n            tmp = token;\n            match(token);\n            expression(Inc);\n            if (*text == LC) {\n                *text = PUSH;  // to duplicate the address\n                *++text = LC;\n            } else if (*text == LI) {\n                *text = PUSH;\n                *++text = LI;\n            } else {\n                printf(\"%d: bad lvalue of pre-increment\\n\", line);\n                exit(-1);\n            }\n            *++text = PUSH;\n            *++text = IMM;\n            *++text = (expr_type > PTR) ? sizeof(int) : sizeof(char);\n            *++text = (tmp == Inc) ? ADD : SUB;\n            *++text = (expr_type == CHAR) ? SC : SI;\n        }\n        else {\n            printf(\"%d: bad expression\\n\", line);\n            exit(-1);\n        }\n    }\n\n    // binary operator and postfix operators.\n    {\n        while (token >= level) {\n            // handle according to current operator's precedence\n            tmp = expr_type;\n            if (token == Assign) {\n                // var = expr;\n                match(Assign);\n                if (*text == LC || *text == LI) {\n                    *text = PUSH; // save the lvalue's pointer\n                } else {\n                    printf(\"%d: bad lvalue in assignment\\n\", line);\n                    exit(-1);\n                }\n                expression(Assign);\n\n                expr_type = tmp;\n                *++text = (expr_type == CHAR) ? SC : SI;\n            }\n            else if (token == Cond) {\n                // expr ? a : b;\n                match(Cond);\n                *++text = JZ;\n                addr = ++text;\n                expression(Assign);\n                if (token == ':') {\n                    match(':');\n                } else {\n                    printf(\"%d: missing colon in conditional\\n\", line);\n                    exit(-1);\n                }\n                *addr = (int)(text + 3);\n                *++text = JMP;\n                addr = ++text;\n                expression(Cond);\n                *addr = (int)(text + 1);\n            }\n            else if (token == Lor) {\n                // logic or\n                match(Lor);\n                *++text = JNZ;\n                addr = ++text;\n                expression(Lan);\n                *addr = (int)(text + 1);\n                expr_type = INT;\n            }\n            else if (token == Lan) {\n                // logic and\n                match(Lan);\n                *++text = JZ;\n                addr = ++text;\n                expression(Or);\n                *addr = (int)(text + 1);\n                expr_type = INT;\n            }\n            else if (token == Or) {\n                // bitwise or\n                match(Or);\n                *++text = PUSH;\n                expression(Xor);\n                *++text = OR;\n                expr_type = INT;\n            }\n            else if (token == Xor) {\n                // bitwise xor\n                match(Xor);\n                *++text = PUSH;\n                expression(And);\n                *++text = XOR;\n                expr_type = INT;\n            }\n            else if (token == And) {\n                // bitwise and\n                match(And);\n                *++text = PUSH;\n                expression(Eq);\n                *++text = AND;\n                expr_type = INT;\n            }\n            else if (token == Eq) {\n                // equal ==\n                match(Eq);\n                *++text = PUSH;\n                expression(Ne);\n                *++text = EQ;\n                expr_type = INT;\n            }\n            else if (token == Ne) {\n                // not equal !=\n                match(Ne);\n                *++text = PUSH;\n                expression(Lt);\n                *++text = NE;\n                expr_type = INT;\n            }\n            else if (token == Lt) {\n                // less than\n                match(Lt);\n                *++text = PUSH;\n                expression(Shl);\n                *++text = LT;\n                expr_type = INT;\n            }\n            else if (token == Gt) {\n                // greater than\n                match(Gt);\n                *++text = PUSH;\n                expression(Shl);\n                *++text = GT;\n                expr_type = INT;\n            }\n            else if (token == Le) {\n                // less than or equal to\n                match(Le);\n                *++text = PUSH;\n                expression(Shl);\n                *++text = LE;\n                expr_type = INT;\n            }\n            else if (token == Ge) {\n                // greater than or equal to\n                match(Ge);\n                *++text = PUSH;\n                expression(Shl);\n                *++text = GE;\n                expr_type = INT;\n            }\n            else if (token == Shl) {\n                // shift left\n                match(Shl);\n                *++text = PUSH;\n                expression(Add);\n                *++text = SHL;\n                expr_type = INT;\n            }\n            else if (token == Shr) {\n                // shift right\n                match(Shr);\n                *++text = PUSH;\n                expression(Add);\n                *++text = SHR;\n                expr_type = INT;\n            }\n            else if (token == Add) {\n                // add\n                match(Add);\n                *++text = PUSH;\n                expression(Mul);\n\n                expr_type = tmp;\n                if (expr_type > PTR) {\n                    // pointer type, and not `char *`\n                    *++text = PUSH;\n                    *++text = IMM;\n                    *++text = sizeof(int);\n                    *++text = MUL;\n                }\n                *++text = ADD;\n            }\n            else if (token == Sub) {\n                // sub\n                match(Sub);\n                *++text = PUSH;\n                expression(Mul);\n                if (tmp > PTR && tmp == expr_type) {\n                    // pointer subtraction\n                    *++text = SUB;\n                    *++text = PUSH;\n                    *++text = IMM;\n                    *++text = sizeof(int);\n                    *++text = DIV;\n                    expr_type = INT;\n                } else if (tmp > PTR) {\n                    // pointer movement\n                    *++text = PUSH;\n                    *++text = IMM;\n                    *++text = sizeof(int);\n                    *++text = MUL;\n                    *++text = SUB;\n                    expr_type = tmp;\n                } else {\n                    // numeral subtraction\n                    *++text = SUB;\n                    expr_type = tmp;\n                }\n            }\n            else if (token == Mul) {\n                // multiply\n                match(Mul);\n                *++text = PUSH;\n                expression(Inc);\n                *++text = MUL;\n                expr_type = tmp;\n            }\n            else if (token == Div) {\n                // divide\n                match(Div);\n                *++text = PUSH;\n                expression(Inc);\n                *++text = DIV;\n                expr_type = tmp;\n            }\n            else if (token == Mod) {\n                // Modulo\n                match(Mod);\n                *++text = PUSH;\n                expression(Inc);\n                *++text = MOD;\n                expr_type = tmp;\n            }\n            else if (token == Inc || token == Dec) {\n                // postfix inc(++) and dec(--)\n                // we will increase the value to the variable and decrease it\n                // on `ax` to get its original value.\n                if (*text == LI) {\n                    *text = PUSH;\n                    *++text = LI;\n                }\n                else if (*text == LC) {\n                    *text = PUSH;\n                    *++text = LC;\n                }\n                else {\n                    printf(\"%d: bad value in increment\\n\", line);\n                    exit(-1);\n                }\n\n                *++text = PUSH;\n                *++text = IMM;\n                *++text = (expr_type > PTR) ? sizeof(int) : sizeof(char);\n                *++text = (token == Inc) ? ADD : SUB;\n                *++text = (expr_type == CHAR) ? SC : SI;\n                *++text = PUSH;\n                *++text = IMM;\n                *++text = (expr_type > PTR) ? sizeof(int) : sizeof(char);\n                *++text = (token == Inc) ? SUB : ADD;\n                match(token);\n            }\n            else if (token == Brak) {\n                // array access var[xx]\n                match(Brak);\n                *++text = PUSH;\n                expression(Assign);\n                match(']');\n\n                if (tmp > PTR) {\n                    // pointer, `not char *`\n                    *++text = PUSH;\n                    *++text = IMM;\n                    *++text = sizeof(int);\n                    *++text = MUL;\n                }\n                else if (tmp < PTR) {\n                    printf(\"%d: pointer type expected\\n\", line);\n                    exit(-1);\n                }\n                expr_type = tmp - PTR;\n                *++text = ADD;\n                *++text = (expr_type == CHAR) ? LC : LI;\n            }\n            else {\n                printf(\"%d: compiler error, token = %d\\n\", line, token);\n                exit(-1);\n            }\n        }\n    }\n}\n\nvoid statement() {\n    // there are 6 kinds of statements here:\n    // 1. if (...) <statement> [else <statement>]\n    // 2. while (...) <statement>\n    // 3. { <statement> }\n    // 4. return xxx;\n    // 5. <empty statement>;\n    // 6. expression; (expression end with semicolon)\n\n    int *a, *b; // bess for branch control\n\n    if (token == If) {\n        // if (...) <statement> [else <statement>]\n        //\n        //   if (...)           <cond>\n        //                      JZ a\n        //     <statement>      <statement>\n        //   else:              JMP b\n        // a:                 a:\n        //     <statement>      <statement>\n        // b:                 b:\n        //\n        //\n        match(If);\n        match('(');\n        expression(Assign);  // parse condition\n        match(')');\n\n        // emit code for if\n        *++text = JZ;\n        b = ++text;\n\n        statement();         // parse statement\n        if (token == Else) { // parse else\n            match(Else);\n\n            // emit code for JMP B\n            *b = (int)(text + 3);\n            *++text = JMP;\n            b = ++text;\n\n            statement();\n        }\n\n        *b = (int)(text + 1);\n    }\n    else if (token == While) {\n        //\n        // a:                     a:\n        //    while (<cond>)        <cond>\n        //                          JZ b\n        //     <statement>          <statement>\n        //                          JMP a\n        // b:                     b:\n        match(While);\n\n        a = text + 1;\n\n        match('(');\n        expression(Assign);\n        match(')');\n\n        *++text = JZ;\n        b = ++text;\n\n        statement();\n\n        *++text = JMP;\n        *++text = (int)a;\n        *b = (int)(text + 1);\n    }\n    else if (token == '{') {\n        // { <statement> ... }\n        match('{');\n\n        while (token != '}') {\n            statement();\n        }\n\n        match('}');\n    }\n    else if (token == Return) {\n        // return [expression];\n        match(Return);\n\n        if (token != ';') {\n            expression(Assign);\n        }\n\n        match(';');\n\n        // emit code for return\n        *++text = LEV;\n    }\n    else if (token == ';') {\n        // empty statement\n        match(';');\n    }\n    else {\n        // a = b; or function_call();\n        expression(Assign);\n        match(';');\n    }\n}\n\nvoid function_parameter() {\n    int type;\n    int params;\n    params = 0;\n    while (token != ')') {\n        // int name, ...\n        type = INT;\n        if (token == Int) {\n            match(Int);\n        } else if (token == Char) {\n            type = CHAR;\n            match(Char);\n        }\n\n        // pointer type\n        while (token == Mul) {\n            match(Mul);\n            type = type + PTR;\n        }\n\n        // parameter name\n        if (token != Id) {\n            printf(\"%d: bad parameter declaration\\n\", line);\n            exit(-1);\n        }\n        if (current_id[Class] == Loc) {\n            printf(\"%d: duplicate parameter declaration\\n\", line);\n            exit(-1);\n        }\n\n        match(Id);\n        // store the local variable\n        current_id[BClass] = current_id[Class]; current_id[Class]  = Loc;\n        current_id[BType]  = current_id[Type];  current_id[Type]   = type;\n        current_id[BValue] = current_id[Value]; current_id[Value]  = params++;   // index of current parameter\n\n        if (token == ',') {\n            match(',');\n        }\n    }\n    index_of_bp = params+1;\n}\n\nvoid function_body() {\n    // type func_name (...) {...}\n    //                   -->|   |<--\n\n    // ... {\n    // 1. local declarations\n    // 2. statements\n    // }\n\n    int pos_local; // position of local variables on the stack.\n    int type;\n    pos_local = index_of_bp;\n\n    while (token == Int || token == Char) {\n        // local variable declaration, just like global ones.\n        basetype = (token == Int) ? INT : CHAR;\n        match(token);\n\n        while (token != ';') {\n            type = basetype;\n            while (token == Mul) {\n                match(Mul);\n                type = type + PTR;\n            }\n\n            if (token != Id) {\n                // invalid declaration\n                printf(\"%d: bad local declaration\\n\", line);\n                exit(-1);\n            }\n            if (current_id[Class] == Loc) {\n                // identifier exists\n                printf(\"%d: duplicate local declaration\\n\", line);\n                exit(-1);\n            }\n            match(Id);\n\n            // store the local variable\n            current_id[BClass] = current_id[Class]; current_id[Class]  = Loc;\n            current_id[BType]  = current_id[Type];  current_id[Type]   = type;\n            current_id[BValue] = current_id[Value]; current_id[Value]  = ++pos_local;   // index of current parameter\n\n            if (token == ',') {\n                match(',');\n            }\n        }\n        match(';');\n    }\n\n    // save the stack size for local variables\n    *++text = ENT;\n    *++text = pos_local - index_of_bp;\n\n    // statements\n    while (token != '}') {\n        statement();\n    }\n\n    // emit code for leaving the sub function\n    *++text = LEV;\n}\n\nvoid function_declaration() {\n    // type func_name (...) {...}\n    //               | this part\n\n    match('(');\n    function_parameter();\n    match(')');\n    match('{');\n    function_body();\n    //match('}');\n\n    // unwind local variable declarations for all local variables.\n    current_id = symbols;\n    while (current_id[Token]) {\n        if (current_id[Class] == Loc) {\n            current_id[Class] = current_id[BClass];\n            current_id[Type]  = current_id[BType];\n            current_id[Value] = current_id[BValue];\n        }\n        current_id = current_id + IdSize;\n    }\n}\n\nvoid enum_declaration() {\n    // parse enum [id] { a = 1, b = 3, ...}\n    int i;\n    i = 0;\n    while (token != '}') {\n        if (token != Id) {\n            printf(\"%d: bad enum identifier %d\\n\", line, token);\n            exit(-1);\n        }\n        next();\n        if (token == Assign) {\n            // like {a=10}\n            next();\n            if (token != Num) {\n                printf(\"%d: bad enum initializer\\n\", line);\n                exit(-1);\n            }\n            i = token_val;\n            next();\n        }\n\n        current_id[Class] = Num;\n        current_id[Type] = INT;\n        current_id[Value] = i++;\n\n        if (token == ',') {\n            next();\n        }\n    }\n}\n\nvoid global_declaration() {\n    // global_declaration ::= enum_decl | variable_decl | function_decl\n    //\n    // enum_decl ::= 'enum' [id] '{' id ['=' 'num'] {',' id ['=' 'num'} '}'\n    //\n    // variable_decl ::= type {'*'} id { ',' {'*'} id } ';'\n    //\n    // function_decl ::= type {'*'} id '(' parameter_decl ')' '{' body_decl '}'\n\n\n    int type; // tmp, actual type for variable\n    int i; // tmp\n\n    basetype = INT;\n\n    // parse enum, this should be treated alone.\n    if (token == Enum) {\n        // enum [id] { a = 10, b = 20, ... }\n        match(Enum);\n        if (token != '{') {\n            match(Id); // skip the [id] part\n        }\n        if (token == '{') {\n            // parse the assign part\n            match('{');\n            enum_declaration();\n            match('}');\n        }\n\n        match(';');\n        return;\n    }\n\n    // parse type information\n    if (token == Int) {\n        match(Int);\n    }\n    else if (token == Char) {\n        match(Char);\n        basetype = CHAR;\n    }\n\n    // parse the comma seperated variable declaration.\n    while (token != ';' && token != '}') {\n        type = basetype;\n        // parse pointer type, note that there may exist `int ****x;`\n        while (token == Mul) {\n            match(Mul);\n            type = type + PTR;\n        }\n\n        if (token != Id) {\n            // invalid declaration\n            printf(\"%d: bad global declaration\\n\", line);\n            exit(-1);\n        }\n        if (current_id[Class]) {\n            // identifier exists\n            printf(\"%d: duplicate global declaration\\n\", line);\n            exit(-1);\n        }\n        match(Id);\n        current_id[Type] = type;\n\n        if (token == '(') {\n            current_id[Class] = Fun;\n            current_id[Value] = (int)(text + 1); // the memory address of function\n            function_declaration();\n        } else {\n            // variable declaration\n            current_id[Class] = Glo; // global variable\n            current_id[Value] = (int)data; // assign memory address\n            data = data + sizeof(int);\n        }\n\n        if (token == ',') {\n            match(',');\n        }\n    }\n    next();\n}\n\nvoid program() {\n    // get next token\n    next();\n    while (token > 0) {\n        global_declaration();\n    }\n}\n\n\nint eval() {\n    int op, *tmp;\n    while (1) {\n        op = *pc++; // get next operation code\n\n        if (op == IMM)       {ax = *pc++;}                                     // load immediate value to ax\n        else if (op == LC)   {ax = *(char *)ax;}                               // load character to ax, address in ax\n        else if (op == LI)   {ax = *(int *)ax;}                                // load integer to ax, address in ax\n        else if (op == SC)   {ax = *(char *)*sp++ = ax;}                       // save character to address, value in ax, address on stack\n        else if (op == SI)   {*(int *)*sp++ = ax;}                             // save integer to address, value in ax, address on stack\n        else if (op == PUSH) {*--sp = ax;}                                     // push the value of ax onto the stack\n        else if (op == JMP)  {pc = (int *)*pc;}                                // jump to the address\n        else if (op == JZ)   {pc = ax ? pc + 1 : (int *)*pc;}                   // jump if ax is zero\n        else if (op == JNZ)  {pc = ax ? (int *)*pc : pc + 1;}                   // jump if ax is not zero\n        else if (op == CALL) {*--sp = (int)(pc+1); pc = (int *)*pc;}           // call subroutine\n        //else if (op == RET)  {pc = (int *)*sp++;}                              // return from subroutine;\n        else if (op == ENT)  {*--sp = (int)bp; bp = sp; sp = sp - *pc++;}      // make new stack frame\n        else if (op == ADJ)  {sp = sp + *pc++;}                                // add esp, <size>\n        else if (op == LEV)  {sp = bp; bp = (int *)*sp++; pc = (int *)*sp++;}  // restore call frame and PC\n        else if (op == LEA)  {ax = (int)(bp + *pc++);}                         // load address for arguments.\n\n        else if (op == OR)  ax = *sp++ | ax;\n        else if (op == XOR) ax = *sp++ ^ ax;\n        else if (op == AND) ax = *sp++ & ax;\n        else if (op == EQ)  ax = *sp++ == ax;\n        else if (op == NE)  ax = *sp++ != ax;\n        else if (op == LT)  ax = *sp++ < ax;\n        else if (op == LE)  ax = *sp++ <= ax;\n        else if (op == GT)  ax = *sp++ >  ax;\n        else if (op == GE)  ax = *sp++ >= ax;\n        else if (op == SHL) ax = *sp++ << ax;\n        else if (op == SHR) ax = *sp++ >> ax;\n        else if (op == ADD) ax = *sp++ + ax;\n        else if (op == SUB) ax = *sp++ - ax;\n        else if (op == MUL) ax = *sp++ * ax;\n        else if (op == DIV) ax = *sp++ / ax;\n        else if (op == MOD) ax = *sp++ % ax;\n\n\n        else if (op == EXIT) { printf(\"exit(%d)\\n\", *sp); return *sp;}\n        else if (op == OPEN) { ax = open((char *)sp[1], sp[0]); }\n        else if (op == CLOS) { ax = close(*sp);}\n        else if (op == READ) { ax = read(sp[2], (char *)sp[1], *sp); }\n        else if (op == PRTF) { tmp = sp + pc[1]; ax = printf((char *)tmp[-1], tmp[-2], tmp[-3], tmp[-4], tmp[-5], tmp[-6]); }\n        else if (op == MALC) { ax = (int)malloc(*sp);}\n        else if (op == MSET) { ax = (int)memset((char *)sp[2], sp[1], *sp);}\n        else if (op == MCMP) { ax = memcmp((char *)sp[2], (char *)sp[1], *sp);}\n        else {\n            printf(\"unknown instruction:%d\\n\", op);\n            return -1;\n        }\n    }\n    return 0;\n}\n\n#undef int // Mac/clang needs this to compile\n\nint main(int argc, char **argv)\n{\n    #define int intptr_t\n\n    int i, fd;\n    int *tmp;\n\n    argc--;\n    argv++;\n\n    poolsize = 256 * 1024; // arbitrary size\n    line = 1;\n\n    // allocate memory for virtual machine\n    if (!(text = old_text = malloc(poolsize))) {\n        printf(\"could not malloc(%d) for text area\\n\", poolsize);\n        return -1;\n    }\n    if (!(data = malloc(poolsize))) {\n        printf(\"could not malloc(%d) for data area\\n\", poolsize);\n        return -1;\n    }\n    if (!(stack = malloc(poolsize))) {\n        printf(\"could not malloc(%d) for stack area\\n\", poolsize);\n        return -1;\n    }\n    if (!(symbols = malloc(poolsize))) {\n        printf(\"could not malloc(%d) for symbol table\\n\", poolsize);\n        return -1;\n    }\n\n    memset(text, 0, poolsize);\n    memset(data, 0, poolsize);\n    memset(stack, 0, poolsize);\n    memset(symbols, 0, poolsize);\n    bp = sp = (int *)((int)stack + poolsize);\n    ax = 0;\n\n    src = \"char else enum if int return sizeof while \"\n          \"open read close printf malloc memset memcmp exit void main\";\n\n     // add keywords to symbol table\n    i = Char;\n    while (i <= While) {\n        next();\n        current_id[Token] = i++;\n    }\n\n    // add library to symbol table\n    i = OPEN;\n    while (i <= EXIT) {\n        next();\n        current_id[Class] = Sys;\n        current_id[Type] = INT;\n        current_id[Value] = i++;\n    }\n\n    next(); current_id[Token] = Char; // handle void type\n    next(); idmain = current_id; // keep track of main\n\n\n    // read the source file\n    if ((fd = open(*argv, 0)) < 0) {\n        printf(\"could not open(%s)\\n\", *argv);\n        return -1;\n    }\n\n    if (!(src = old_src = malloc(poolsize))) {\n        printf(\"could not malloc(%d) for source area\\n\", poolsize);\n        return -1;\n    }\n    // read the source file\n    if ((i = read(fd, src, poolsize-1)) <= 0) {\n        printf(\"read() returned %d\\n\", i);\n        return -1;\n    }\n    src[i] = 0; // add EOF character\n    close(fd);\n\n    program();\n\n    if (!(pc = (int *)idmain[Value])) {\n        printf(\"main() not defined\\n\");\n        return -1;\n    }\n\n    // setup stack\n    sp = (int *)((int)stack + poolsize);\n    *--sp = EXIT; // call exit if main returns\n    *--sp = PUSH; tmp = sp;\n    *--sp = argc;\n    *--sp = (int)argv;\n    *--sp = (int)tmp;\n\n    return eval();\n}\n"
        },
        {
          "name": "xc.c",
          "type": "blob",
          "size": 39.7890625,
          "content": "#include <stdio.h>\n#include <stdlib.h>\n#include <memory.h>\n#include <string.h>\n#define int long long // to work with 64bit address\n\nint debug;    // print the executed instructions\nint assembly; // print out the assembly and source\n\nint token; // current token\n\n// instructions\nenum { LEA ,IMM ,JMP ,CALL,JZ  ,JNZ ,ENT ,ADJ ,LEV ,LI  ,LC  ,SI  ,SC  ,PUSH,\n       OR  ,XOR ,AND ,EQ  ,NE  ,LT  ,GT  ,LE  ,GE  ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD ,\n       OPEN,READ,CLOS,PRTF,MALC,MSET,MCMP,EXIT };\n\n// tokens and classes (operators last and in precedence order)\n// copied from c4\nenum {\n  Num = 128, Fun, Sys, Glo, Loc, Id,\n  Char, Else, Enum, If, Int, Return, Sizeof, While,\n  Assign, Cond, Lor, Lan, Or, Xor, And, Eq, Ne, Lt, Gt, Le, Ge, Shl, Shr, Add, Sub, Mul, Div, Mod, Inc, Dec, Brak\n};\n\n// fields of identifier\nenum {Token, Hash, Name, Type, Class, Value, BType, BClass, BValue, IdSize};\n\n\n// types of variable/function\nenum { CHAR, INT, PTR };\n\n// type of declaration.\nenum {Global, Local};\n\nint *text, // text segment\n    *stack;// stack\nint * old_text; // for dump text segment\nchar *data; // data segment\nint *idmain;\n\nchar *src, *old_src;  // pointer to source code string;\n\nint poolsize; // default size of text/data/stack\nint *pc, *bp, *sp, ax, cycle; // virtual machine registers\n\nint *current_id, // current parsed ID\n    *symbols,    // symbol table\n    line,        // line number of source code\n    token_val;   // value of current token (mainly for number)\n\nint basetype;    // the type of a declaration, make it global for convenience\nint expr_type;   // the type of an expression\n\n// function frame\n//\n// 0: arg 1\n// 1: arg 2\n// 2: arg 3\n// 3: return address\n// 4: old bp pointer  <- index_of_bp\n// 5: local var 1\n// 6: local var 2\nint index_of_bp; // index of bp pointer on stack\n\nvoid next() {\n    char *last_pos;\n    int hash;\n\n    while (token = *src) {\n        ++src;\n\n        if (token == '\\n') {\n            if (assembly) {\n                // print compile info\n                printf(\"%d: %.*s\", line, src-old_src, old_src);\n                old_src = src;\n\n                while (old_text < text) {\n                    printf(\"%8.4s\", & \"LEA ,IMM ,JMP ,CALL,JZ  ,JNZ ,ENT ,ADJ ,LEV ,LI  ,LC  ,SI  ,SC  ,PUSH,\"\n                                      \"OR  ,XOR ,AND ,EQ  ,NE  ,LT  ,GT  ,LE  ,GE  ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD ,\"\n                                      \"OPEN,READ,CLOS,PRTF,MALC,MSET,MCMP,EXIT\"[*++old_text * 5]);\n\n                    if (*old_text <= ADJ)\n                        printf(\" %d\\n\", *++old_text);\n                    else\n                        printf(\"\\n\");\n                }\n            }\n            ++line;\n        }\n        else if (token == '#') {\n            // skip macro, because we will not support it\n            while (*src != 0 && *src != '\\n') {\n                src++;\n            }\n        }\n        else if ((token >= 'a' && token <= 'z') || (token >= 'A' && token <= 'Z') || (token == '_')) {\n\n            // parse identifier\n            last_pos = src - 1;\n            hash = token;\n\n            while ((*src >= 'a' && *src <= 'z') || (*src >= 'A' && *src <= 'Z') || (*src >= '0' && *src <= '9') || (*src == '_')) {\n                hash = hash * 147 + *src;\n                src++;\n            }\n\n            // look for existing identifier, linear search\n            current_id = symbols;\n            while (current_id[Token]) {\n                if (current_id[Hash] == hash && !memcmp((char *)current_id[Name], last_pos, src - last_pos)) {\n                    //found one, return\n                    token = current_id[Token];\n                    return;\n                }\n                current_id = current_id + IdSize;\n            }\n\n\n            // store new ID\n            current_id[Name] = (int)last_pos;\n            current_id[Hash] = hash;\n            token = current_id[Token] = Id;\n            return;\n        }\n        else if (token >= '0' && token <= '9') {\n            // parse number, three kinds: dec(123) hex(0x123) oct(017)\n            token_val = token - '0';\n            if (token_val > 0) {\n                // dec, starts with [1-9]\n                while (*src >= '0' && *src <= '9') {\n                    token_val = token_val*10 + *src++ - '0';\n                }\n            } else {\n                // starts with number 0\n                if (*src == 'x' || *src == 'X') {\n                    //hex\n                    token = *++src;\n                    while ((token >= '0' && token <= '9') || (token >= 'a' && token <= 'f') || (token >= 'A' && token <= 'F')) {\n                        token_val = token_val * 16 + (token & 15) + (token >= 'A' ? 9 : 0);\n                        token = *++src;\n                    }\n                } else {\n                    // oct\n                    while (*src >= '0' && *src <= '7') {\n                        token_val = token_val*8 + *src++ - '0';\n                    }\n                }\n            }\n\n            token = Num;\n            return;\n        }\n        else if (token == '/') {\n            if (*src == '/') {\n                // skip comments\n                while (*src != 0 && *src != '\\n') {\n                    ++src;\n                }\n            } else {\n                // divide operator\n                token = Div;\n                return;\n            }\n        }\n        else if (token == '\"' || token == '\\'') {\n            // parse string literal, currently, the only supported escape\n            // character is '\\n', store the string literal into data.\n            last_pos = data;\n            while (*src != 0 && *src != token) {\n                token_val = *src++;\n                if (token_val == '\\\\') {\n                    // escape character\n                    token_val = *src++;\n                    if (token_val == 'n') {\n                        token_val = '\\n';\n                    }\n                }\n\n                if (token == '\"') {\n                    *data++ = token_val;\n                }\n            }\n\n            src++;\n            // if it is a single character, return Num token\n            if (token == '\"') {\n                token_val = (int)last_pos;\n            } else {\n                token = Num;\n            }\n\n            return;\n        }\n        else if (token == '=') {\n            // parse '==' and '='\n            if (*src == '=') {\n                src ++;\n                token = Eq;\n            } else {\n                token = Assign;\n            }\n            return;\n        }\n        else if (token == '+') {\n            // parse '+' and '++'\n            if (*src == '+') {\n                src ++;\n                token = Inc;\n            } else {\n                token = Add;\n            }\n            return;\n        }\n        else if (token == '-') {\n            // parse '-' and '--'\n            if (*src == '-') {\n                src ++;\n                token = Dec;\n            } else {\n                token = Sub;\n            }\n            return;\n        }\n        else if (token == '!') {\n            // parse '!='\n            if (*src == '=') {\n                src++;\n                token = Ne;\n            }\n            return;\n        }\n        else if (token == '<') {\n            // parse '<=', '<<' or '<'\n            if (*src == '=') {\n                src ++;\n                token = Le;\n            } else if (*src == '<') {\n                src ++;\n                token = Shl;\n            } else {\n                token = Lt;\n            }\n            return;\n        }\n        else if (token == '>') {\n            // parse '>=', '>>' or '>'\n            if (*src == '=') {\n                src ++;\n                token = Ge;\n            } else if (*src == '>') {\n                src ++;\n                token = Shr;\n            } else {\n                token = Gt;\n            }\n            return;\n        }\n        else if (token == '|') {\n            // parse '|' or '||'\n            if (*src == '|') {\n                src ++;\n                token = Lor;\n            } else {\n                token = Or;\n            }\n            return;\n        }\n        else if (token == '&') {\n            // parse '&' and '&&'\n            if (*src == '&') {\n                src ++;\n                token = Lan;\n            } else {\n                token = And;\n            }\n            return;\n        }\n        else if (token == '^') {\n            token = Xor;\n            return;\n        }\n        else if (token == '%') {\n            token = Mod;\n            return;\n        }\n        else if (token == '*') {\n            token = Mul;\n            return;\n        }\n        else if (token == '[') {\n            token = Brak;\n            return;\n        }\n        else if (token == '?') {\n            token = Cond;\n            return;\n        }\n        else if (token == '~' || token == ';' || token == '{' || token == '}' || token == '(' || token == ')' || token == ']' || token == ',' || token == ':') {\n            // directly return the character as token;\n            return;\n        }\n    }\n}\n\nvoid match(int tk) {\n    if (token == tk) {\n        next();\n    } else {\n        printf(\"%d: expected token: %d\\n\", line, tk);\n        exit(-1);\n    }\n}\n\n\nvoid expression(int level) {\n    // expressions have various format.\n    // but majorly can be divided into two parts: unit and operator\n    // for example `(char) *a[10] = (int *) func(b > 0 ? 10 : 20);\n    // `a[10]` is an unit while `*` is an operator.\n    // `func(...)` in total is an unit.\n    // so we should first parse those unit and unary operators\n    // and then the binary ones\n    //\n    // also the expression can be in the following types:\n    //\n    // 1. unit_unary ::= unit | unit unary_op | unary_op unit\n    // 2. expr ::= unit_unary (bin_op unit_unary ...)\n\n    // unit_unary()\n    int *id;\n    int tmp;\n    int *addr;\n    {\n        if (!token) {\n            printf(\"%d: unexpected token EOF of expression\\n\", line);\n            exit(-1);\n        }\n        if (token == Num) {\n            match(Num);\n\n            // emit code\n            *++text = IMM;\n            *++text = token_val;\n            expr_type = INT;\n        }\n        else if (token == '\"') {\n            // continous string \"abc\" \"abc\"\n\n\n            // emit code\n            *++text = IMM;\n            *++text = token_val;\n\n            match('\"');\n            // store the rest strings\n            while (token == '\"') {\n                match('\"');\n            }\n\n            // append the end of string character '\\0', all the data are default\n            // to 0, so just move data one position forward.\n            data = (char *)(((int)data + sizeof(int)) & (-sizeof(int)));\n            expr_type = PTR;\n        }\n        else if (token == Sizeof) {\n            // sizeof is actually an unary operator\n            // now only `sizeof(int)`, `sizeof(char)` and `sizeof(*...)` are\n            // supported.\n            match(Sizeof);\n            match('(');\n            expr_type = INT;\n\n            if (token == Int) {\n                match(Int);\n            } else if (token == Char) {\n                match(Char);\n                expr_type = CHAR;\n            }\n\n            while (token == Mul) {\n                match(Mul);\n                expr_type = expr_type + PTR;\n            }\n\n            match(')');\n\n            // emit code\n            *++text = IMM;\n            *++text = (expr_type == CHAR) ? sizeof(char) : sizeof(int);\n\n            expr_type = INT;\n        }\n        else if (token == Id) {\n            // there are several type when occurs to Id\n            // but this is unit, so it can only be\n            // 1. function call\n            // 2. Enum variable\n            // 3. global/local variable\n            match(Id);\n\n            id = current_id;\n\n            if (token == '(') {\n                // function call\n                match('(');\n\n                // pass in arguments\n                tmp = 0; // number of arguments\n                while (token != ')') {\n                    expression(Assign);\n                    *++text = PUSH;\n                    tmp ++;\n\n                    if (token == ',') {\n                        match(',');\n                    }\n\n                }\n                match(')');\n\n                // emit code\n                if (id[Class] == Sys) {\n                    // system functions\n                    *++text = id[Value];\n                }\n                else if (id[Class] == Fun) {\n                    // function call\n                    *++text = CALL;\n                    *++text = id[Value];\n                }\n                else {\n                    printf(\"%d: bad function call\\n\", line);\n                    exit(-1);\n                }\n\n                // clean the stack for arguments\n                if (tmp > 0) {\n                    *++text = ADJ;\n                    *++text = tmp;\n                }\n                expr_type = id[Type];\n            }\n            else if (id[Class] == Num) {\n                // enum variable\n                *++text = IMM;\n                *++text = id[Value];\n                expr_type = INT;\n            }\n            else {\n                // variable\n                if (id[Class] == Loc) {\n                    *++text = LEA;\n                    *++text = index_of_bp - id[Value];\n                }\n                else if (id[Class] == Glo) {\n                    *++text = IMM;\n                    *++text = id[Value];\n                }\n                else {\n                    printf(\"%d: undefined variable\\n\", line);\n                    exit(-1);\n                }\n\n                // emit code, default behaviour is to load the value of the\n                // address which is stored in `ax`\n                expr_type = id[Type];\n                *++text = (expr_type == CHAR) ? LC : LI;\n            }\n        }\n        else if (token == '(') {\n            // cast or parenthesis\n            match('(');\n            if (token == Int || token == Char) {\n                tmp = (token == Char) ? CHAR : INT; // cast type\n                match(token);\n                while (token == Mul) {\n                    match(Mul);\n                    tmp = tmp + PTR;\n                }\n\n                match(')');\n\n                expression(Inc); // cast has precedence as Inc(++)\n\n                expr_type  = tmp;\n            } else {\n                // normal parenthesis\n                expression(Assign);\n                match(')');\n            }\n        }\n        else if (token == Mul) {\n            // dereference *<addr>\n            match(Mul);\n            expression(Inc); // dereference has the same precedence as Inc(++)\n\n            if (expr_type >= PTR) {\n                expr_type = expr_type - PTR;\n            } else {\n                printf(\"%d: bad dereference\\n\", line);\n                exit(-1);\n            }\n\n            *++text = (expr_type == CHAR) ? LC : LI;\n        }\n        else if (token == And) {\n            // get the address of\n            match(And);\n            expression(Inc); // get the address of\n            if (*text == LC || *text == LI) {\n                text --;\n            } else {\n                printf(\"%d: bad address of\\n\", line);\n                exit(-1);\n            }\n\n            expr_type = expr_type + PTR;\n        }\n        else if (token == '!') {\n            // not\n            match('!');\n            expression(Inc);\n\n            // emit code, use <expr> == 0\n            *++text = PUSH;\n            *++text = IMM;\n            *++text = 0;\n            *++text = EQ;\n\n            expr_type = INT;\n        }\n        else if (token == '~') {\n            // bitwise not\n            match('~');\n            expression(Inc);\n\n            // emit code, use <expr> XOR -1\n            *++text = PUSH;\n            *++text = IMM;\n            *++text = -1;\n            *++text = XOR;\n\n            expr_type = INT;\n        }\n        else if (token == Add) {\n            // +var, do nothing\n            match(Add);\n            expression(Inc);\n\n            expr_type = INT;\n        }\n        else if (token == Sub) {\n            // -var\n            match(Sub);\n\n            if (token == Num) {\n                *++text = IMM;\n                *++text = -token_val;\n                match(Num);\n            } else {\n\n                *++text = IMM;\n                *++text = -1;\n                *++text = PUSH;\n                expression(Inc);\n                *++text = MUL;\n            }\n\n            expr_type = INT;\n        }\n        else if (token == Inc || token == Dec) {\n            tmp = token;\n            match(token);\n            expression(Inc);\n            if (*text == LC) {\n                *text = PUSH;  // to duplicate the address\n                *++text = LC;\n            } else if (*text == LI) {\n                *text = PUSH;\n                *++text = LI;\n            } else {\n                printf(\"%d: bad lvalue of pre-increment\\n\", line);\n                exit(-1);\n            }\n            *++text = PUSH;\n            *++text = IMM;\n            *++text = (expr_type > PTR) ? sizeof(int) : sizeof(char);\n            *++text = (tmp == Inc) ? ADD : SUB;\n            *++text = (expr_type == CHAR) ? SC : SI;\n        }\n        else {\n            printf(\"%d: bad expression\\n\", line);\n            exit(-1);\n        }\n    }\n\n    // binary operator and postfix operators.\n    {\n        while (token >= level) {\n            // handle according to current operator's precedence\n            tmp = expr_type;\n            if (token == Assign) {\n                // var = expr;\n                match(Assign);\n                if (*text == LC || *text == LI) {\n                    *text = PUSH; // save the lvalue's pointer\n                } else {\n                    printf(\"%d: bad lvalue in assignment\\n\", line);\n                    exit(-1);\n                }\n                expression(Assign);\n\n                expr_type = tmp;\n                *++text = (expr_type == CHAR) ? SC : SI;\n            }\n            else if (token == Cond) {\n                // expr ? a : b;\n                match(Cond);\n                *++text = JZ;\n                addr = ++text;\n                expression(Assign);\n                if (token == ':') {\n                    match(':');\n                } else {\n                    printf(\"%d: missing colon in conditional\\n\", line);\n                    exit(-1);\n                }\n                *addr = (int)(text + 3);\n                *++text = JMP;\n                addr = ++text;\n                expression(Cond);\n                *addr = (int)(text + 1);\n            }\n            else if (token == Lor) {\n                // logic or\n                match(Lor);\n                *++text = JNZ;\n                addr = ++text;\n                expression(Lan);\n                *addr = (int)(text + 1);\n                expr_type = INT;\n            }\n            else if (token == Lan) {\n                // logic and\n                match(Lan);\n                *++text = JZ;\n                addr = ++text;\n                expression(Or);\n                *addr = (int)(text + 1);\n                expr_type = INT;\n            }\n            else if (token == Or) {\n                // bitwise or\n                match(Or);\n                *++text = PUSH;\n                expression(Xor);\n                *++text = OR;\n                expr_type = INT;\n            }\n            else if (token == Xor) {\n                // bitwise xor\n                match(Xor);\n                *++text = PUSH;\n                expression(And);\n                *++text = XOR;\n                expr_type = INT;\n            }\n            else if (token == And) {\n                // bitwise and\n                match(And);\n                *++text = PUSH;\n                expression(Eq);\n                *++text = AND;\n                expr_type = INT;\n            }\n            else if (token == Eq) {\n                // equal ==\n                match(Eq);\n                *++text = PUSH;\n                expression(Ne);\n                *++text = EQ;\n                expr_type = INT;\n            }\n            else if (token == Ne) {\n                // not equal !=\n                match(Ne);\n                *++text = PUSH;\n                expression(Lt);\n                *++text = NE;\n                expr_type = INT;\n            }\n            else if (token == Lt) {\n                // less than\n                match(Lt);\n                *++text = PUSH;\n                expression(Shl);\n                *++text = LT;\n                expr_type = INT;\n            }\n            else if (token == Gt) {\n                // greater than\n                match(Gt);\n                *++text = PUSH;\n                expression(Shl);\n                *++text = GT;\n                expr_type = INT;\n            }\n            else if (token == Le) {\n                // less than or equal to\n                match(Le);\n                *++text = PUSH;\n                expression(Shl);\n                *++text = LE;\n                expr_type = INT;\n            }\n            else if (token == Ge) {\n                // greater than or equal to\n                match(Ge);\n                *++text = PUSH;\n                expression(Shl);\n                *++text = GE;\n                expr_type = INT;\n            }\n            else if (token == Shl) {\n                // shift left\n                match(Shl);\n                *++text = PUSH;\n                expression(Add);\n                *++text = SHL;\n                expr_type = INT;\n            }\n            else if (token == Shr) {\n                // shift right\n                match(Shr);\n                *++text = PUSH;\n                expression(Add);\n                *++text = SHR;\n                expr_type = INT;\n            }\n            else if (token == Add) {\n                // add\n                match(Add);\n                *++text = PUSH;\n                expression(Mul);\n\n                expr_type = tmp;\n                if (expr_type > PTR) {\n                    // pointer type, and not `char *`\n                    *++text = PUSH;\n                    *++text = IMM;\n                    *++text = sizeof(int);\n                    *++text = MUL;\n                }\n                *++text = ADD;\n            }\n            else if (token == Sub) {\n                // sub\n                match(Sub);\n                *++text = PUSH;\n                expression(Mul);\n                if (tmp > PTR && tmp == expr_type) {\n                    // pointer subtraction\n                    *++text = SUB;\n                    *++text = PUSH;\n                    *++text = IMM;\n                    *++text = sizeof(int);\n                    *++text = DIV;\n                    expr_type = INT;\n                } else if (tmp > PTR) {\n                    // pointer movement\n                    *++text = PUSH;\n                    *++text = IMM;\n                    *++text = sizeof(int);\n                    *++text = MUL;\n                    *++text = SUB;\n                    expr_type = tmp;\n                } else {\n                    // numeral subtraction\n                    *++text = SUB;\n                    expr_type = tmp;\n                }\n            }\n            else if (token == Mul) {\n                // multiply\n                match(Mul);\n                *++text = PUSH;\n                expression(Inc);\n                *++text = MUL;\n                expr_type = tmp;\n            }\n            else if (token == Div) {\n                // divide\n                match(Div);\n                *++text = PUSH;\n                expression(Inc);\n                *++text = DIV;\n                expr_type = tmp;\n            }\n            else if (token == Mod) {\n                // Modulo\n                match(Mod);\n                *++text = PUSH;\n                expression(Inc);\n                *++text = MOD;\n                expr_type = tmp;\n            }\n            else if (token == Inc || token == Dec) {\n                // postfix inc(++) and dec(--)\n                // we will increase the value to the variable and decrease it\n                // on `ax` to get its original value.\n                if (*text == LI) {\n                    *text = PUSH;\n                    *++text = LI;\n                }\n                else if (*text == LC) {\n                    *text = PUSH;\n                    *++text = LC;\n                }\n                else {\n                    printf(\"%d: bad value in increment\\n\", line);\n                    exit(-1);\n                }\n\n                *++text = PUSH;\n                *++text = IMM;\n                *++text = (expr_type > PTR) ? sizeof(int) : sizeof(char);\n                *++text = (token == Inc) ? ADD : SUB;\n                *++text = (expr_type == CHAR) ? SC : SI;\n                *++text = PUSH;\n                *++text = IMM;\n                *++text = (expr_type > PTR) ? sizeof(int) : sizeof(char);\n                *++text = (token == Inc) ? SUB : ADD;\n                match(token);\n            }\n            else if (token == Brak) {\n                // array access var[xx]\n                match(Brak);\n                *++text = PUSH;\n                expression(Assign);\n                match(']');\n\n                if (tmp > PTR) {\n                    // pointer, `not char *`\n                    *++text = PUSH;\n                    *++text = IMM;\n                    *++text = sizeof(int);\n                    *++text = MUL;\n                }\n                else if (tmp < PTR) {\n                    printf(\"%d: pointer type expected\\n\", line);\n                    exit(-1);\n                }\n                expr_type = tmp - PTR;\n                *++text = ADD;\n                *++text = (expr_type == CHAR) ? LC : LI;\n            }\n            else {\n                printf(\"%d: compiler error, token = %d\\n\", line, token);\n                exit(-1);\n            }\n        }\n    }\n}\n\nvoid statement() {\n    // there are 8 kinds of statements here:\n    // 1. if (...) <statement> [else <statement>]\n    // 2. while (...) <statement>\n    // 3. { <statement> }\n    // 4. return xxx;\n    // 5. <empty statement>;\n    // 6. expression; (expression end with semicolon)\n\n    int *a, *b; // bess for branch control\n\n    if (token == If) {\n        // if (...) <statement> [else <statement>]\n        //\n        //   if (...)           <cond>\n        //                      JZ a\n        //     <statement>      <statement>\n        //   else:              JMP b\n        // a:\n        //     <statement>      <statement>\n        // b:                   b:\n        //\n        //\n        match(If);\n        match('(');\n        expression(Assign);  // parse condition\n        match(')');\n\n        // emit code for if\n        *++text = JZ;\n        b = ++text;\n\n        statement();         // parse statement\n        if (token == Else) { // parse else\n            match(Else);\n\n            // emit code for JMP B\n            *b = (int)(text + 3);\n            *++text = JMP;\n            b = ++text;\n\n            statement();\n        }\n\n        *b = (int)(text + 1);\n    }\n    else if (token == While) {\n        //\n        // a:                     a:\n        //    while (<cond>)        <cond>\n        //                          JZ b\n        //     <statement>          <statement>\n        //                          JMP a\n        // b:                     b:\n        match(While);\n\n        a = text + 1;\n\n        match('(');\n        expression(Assign);\n        match(')');\n\n        *++text = JZ;\n        b = ++text;\n\n        statement();\n\n        *++text = JMP;\n        *++text = (int)a;\n        *b = (int)(text + 1);\n    }\n    else if (token == '{') {\n        // { <statement> ... }\n        match('{');\n\n        while (token != '}') {\n            statement();\n        }\n\n        match('}');\n    }\n    else if (token == Return) {\n        // return [expression];\n        match(Return);\n\n        if (token != ';') {\n            expression(Assign);\n        }\n\n        match(';');\n\n        // emit code for return\n        *++text = LEV;\n    }\n    else if (token == ';') {\n        // empty statement\n        match(';');\n    }\n    else {\n        // a = b; or function_call();\n        expression(Assign);\n        match(';');\n    }\n}\n\nvoid enum_declaration() {\n    // parse enum [id] { a = 1, b = 3, ...}\n    int i;\n    i = 0;\n    while (token != '}') {\n        if (token != Id) {\n            printf(\"%d: bad enum identifier %d\\n\", line, token);\n            exit(-1);\n        }\n        next();\n        if (token == Assign) {\n            // like {a=10}\n            next();\n            if (token != Num) {\n                printf(\"%d: bad enum initializer\\n\", line);\n                exit(-1);\n            }\n            i = token_val;\n            next();\n        }\n\n        current_id[Class] = Num;\n        current_id[Type] = INT;\n        current_id[Value] = i++;\n\n        if (token == ',') {\n            next();\n        }\n    }\n}\n\nvoid function_parameter() {\n    int type;\n    int params;\n    params = 0;\n    while (token != ')') {\n        // int name, ...\n        type = INT;\n        if (token == Int) {\n            match(Int);\n        } else if (token == Char) {\n            type = CHAR;\n            match(Char);\n        }\n\n        // pointer type\n        while (token == Mul) {\n            match(Mul);\n            type = type + PTR;\n        }\n\n        // parameter name\n        if (token != Id) {\n            printf(\"%d: bad parameter declaration\\n\", line);\n            exit(-1);\n        }\n        if (current_id[Class] == Loc) {\n            printf(\"%d: duplicate parameter declaration\\n\", line);\n            exit(-1);\n        }\n\n        match(Id);\n        // store the local variable\n        current_id[BClass] = current_id[Class]; current_id[Class]  = Loc;\n        current_id[BType]  = current_id[Type];  current_id[Type]   = type;\n        current_id[BValue] = current_id[Value]; current_id[Value]  = params++;   // index of current parameter\n\n        if (token == ',') {\n            match(',');\n        }\n    }\n    index_of_bp = params+1;\n}\n\nvoid function_body() {\n    // type func_name (...) {...}\n    //                   -->|   |<--\n\n    // ... {\n    // 1. local declarations\n    // 2. statements\n    // }\n\n    int pos_local; // position of local variables on the stack.\n    int type;\n    pos_local = index_of_bp;\n\n    while (token == Int || token == Char) {\n        // local variable declaration, just like global ones.\n        basetype = (token == Int) ? INT : CHAR;\n        match(token);\n\n        while (token != ';') {\n            type = basetype;\n            while (token == Mul) {\n                match(Mul);\n                type = type + PTR;\n            }\n\n            if (token != Id) {\n                // invalid declaration\n                printf(\"%d: bad local declaration\\n\", line);\n                exit(-1);\n            }\n            if (current_id[Class] == Loc) {\n                // identifier exists\n                printf(\"%d: duplicate local declaration\\n\", line);\n                exit(-1);\n            }\n            match(Id);\n\n            // store the local variable\n            current_id[BClass] = current_id[Class]; current_id[Class]  = Loc;\n            current_id[BType]  = current_id[Type];  current_id[Type]   = type;\n            current_id[BValue] = current_id[Value]; current_id[Value]  = ++pos_local;   // index of current parameter\n\n            if (token == ',') {\n                match(',');\n            }\n        }\n        match(';');\n    }\n\n    // save the stack size for local variables\n    *++text = ENT;\n    *++text = pos_local - index_of_bp;\n\n    // statements\n    while (token != '}') {\n        statement();\n    }\n\n    // emit code for leaving the sub function\n    *++text = LEV;\n}\n\nvoid function_declaration() {\n    // type func_name (...) {...}\n    //               | this part\n\n    match('(');\n    function_parameter();\n    match(')');\n    match('{');\n    function_body();\n    //match('}');\n\n    // unwind local variable declarations for all local variables.\n    current_id = symbols;\n    while (current_id[Token]) {\n        if (current_id[Class] == Loc) {\n            current_id[Class] = current_id[BClass];\n            current_id[Type]  = current_id[BType];\n            current_id[Value] = current_id[BValue];\n        }\n        current_id = current_id + IdSize;\n    }\n}\n\nvoid global_declaration() {\n    // int [*]id [; | (...) {...}]\n\n\n    int type; // tmp, actual type for variable\n    int i; // tmp\n\n    basetype = INT;\n\n    // parse enum, this should be treated alone.\n    if (token == Enum) {\n        // enum [id] { a = 10, b = 20, ... }\n        match(Enum);\n        if (token != '{') {\n            match(Id); // skip the [id] part\n        }\n        if (token == '{') {\n            // parse the assign part\n            match('{');\n            enum_declaration();\n            match('}');\n        }\n\n        match(';');\n        return;\n    }\n\n    // parse type information\n    if (token == Int) {\n        match(Int);\n    }\n    else if (token == Char) {\n        match(Char);\n        basetype = CHAR;\n    }\n\n    // parse the comma seperated variable declaration.\n    while (token != ';' && token != '}') {\n        type = basetype;\n        // parse pointer type, note that there may exist `int ****x;`\n        while (token == Mul) {\n            match(Mul);\n            type = type + PTR;\n        }\n\n        if (token != Id) {\n            // invalid declaration\n            printf(\"%d: bad global declaration\\n\", line);\n            exit(-1);\n        }\n        if (current_id[Class]) {\n            // identifier exists\n            printf(\"%d: duplicate global declaration\\n\", line);\n            exit(-1);\n        }\n        match(Id);\n        current_id[Type] = type;\n\n        if (token == '(') {\n            current_id[Class] = Fun;\n            current_id[Value] = (int)(text + 1); // the memory address of function\n            function_declaration();\n        } else {\n            // variable declaration\n            current_id[Class] = Glo; // global variable\n            current_id[Value] = (int)data; // assign memory address\n            data = data + sizeof(int);\n        }\n\n        if (token == ',') {\n            match(',');\n        }\n    }\n    next();\n}\n\nvoid program() {\n    // get next token\n    next();\n    while (token > 0) {\n        global_declaration();\n    }\n}\n\nint eval() {\n    int op, *tmp;\n    cycle = 0;\n    while (1) {\n        cycle ++;\n        op = *pc++; // get next operation code\n\n        // print debug info\n        if (debug) {\n            printf(\"%d> %.4s\", cycle,\n                   & \"LEA ,IMM ,JMP ,CALL,JZ  ,JNZ ,ENT ,ADJ ,LEV ,LI  ,LC  ,SI  ,SC  ,PUSH,\"\n                   \"OR  ,XOR ,AND ,EQ  ,NE  ,LT  ,GT  ,LE  ,GE  ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD ,\"\n                   \"OPEN,READ,CLOS,PRTF,MALC,MSET,MCMP,EXIT\"[op * 5]);\n            if (op <= ADJ)\n                printf(\" %d\\n\", *pc);\n            else\n                printf(\"\\n\");\n        }\n        if (op == IMM)       {ax = *pc++;}                                     // load immediate value to ax\n        else if (op == LC)   {ax = *(char *)ax;}                               // load character to ax, address in ax\n        else if (op == LI)   {ax = *(int *)ax;}                                // load integer to ax, address in ax\n        else if (op == SC)   {ax = *(char *)*sp++ = ax;}                       // save character to address, value in ax, address on stack\n        else if (op == SI)   {*(int *)*sp++ = ax;}                             // save integer to address, value in ax, address on stack\n        else if (op == PUSH) {*--sp = ax;}                                     // push the value of ax onto the stack\n        else if (op == JMP)  {pc = (int *)*pc;}                                // jump to the address\n        else if (op == JZ)   {pc = ax ? pc + 1 : (int *)*pc;}                   // jump if ax is zero\n        else if (op == JNZ)  {pc = ax ? (int *)*pc : pc + 1;}                   // jump if ax is not zero\n        else if (op == CALL) {*--sp = (int)(pc+1); pc = (int *)*pc;}           // call subroutine\n        //else if (op == RET)  {pc = (int *)*sp++;}                              // return from subroutine;\n        else if (op == ENT)  {*--sp = (int)bp; bp = sp; sp = sp - *pc++;}      // make new stack frame\n        else if (op == ADJ)  {sp = sp + *pc++;}                                // add esp, <size>\n        else if (op == LEV)  {sp = bp; bp = (int *)*sp++; pc = (int *)*sp++;}  // restore call frame and PC\n        else if (op == LEA)  {ax = (int)(bp + *pc++);}                         // load address for arguments.\n\n        else if (op == OR)  ax = *sp++ | ax;\n        else if (op == XOR) ax = *sp++ ^ ax;\n        else if (op == AND) ax = *sp++ & ax;\n        else if (op == EQ)  ax = *sp++ == ax;\n        else if (op == NE)  ax = *sp++ != ax;\n        else if (op == LT)  ax = *sp++ < ax;\n        else if (op == LE)  ax = *sp++ <= ax;\n        else if (op == GT)  ax = *sp++ >  ax;\n        else if (op == GE)  ax = *sp++ >= ax;\n        else if (op == SHL) ax = *sp++ << ax;\n        else if (op == SHR) ax = *sp++ >> ax;\n        else if (op == ADD) ax = *sp++ + ax;\n        else if (op == SUB) ax = *sp++ - ax;\n        else if (op == MUL) ax = *sp++ * ax;\n        else if (op == DIV) ax = *sp++ / ax;\n        else if (op == MOD) ax = *sp++ % ax;\n\n        else if (op == EXIT) { printf(\"exit(%d)\", *sp); return *sp;}\n        else if (op == OPEN) { ax = open((char *)sp[1], sp[0]); }\n        else if (op == CLOS) { ax = close(*sp);}\n        else if (op == READ) { ax = read(sp[2], (char *)sp[1], *sp); }\n        else if (op == PRTF) { tmp = sp + pc[1]; ax = printf((char *)tmp[-1], tmp[-2], tmp[-3], tmp[-4], tmp[-5], tmp[-6]); }\n        else if (op == MALC) { ax = (int)malloc(*sp);}\n        else if (op == MSET) { ax = (int)memset((char *)sp[2], sp[1], *sp);}\n        else if (op == MCMP) { ax = memcmp((char *)sp[2], (char *)sp[1], *sp);}\n        else {\n            printf(\"unknown instruction:%d\\n\", op);\n            return -1;\n        }\n    }\n}\n\n#undef int // Mac/clang needs this to compile\n\nint main(int argc, char **argv)\n{\n    #define int long long // to work with 64bit address\n\n    int i, fd;\n    int *tmp;\n\n    argc--;\n    argv++;\n\n    // parse arguments\n    if (argc > 0 && **argv == '-' && (*argv)[1] == 's') {\n        assembly = 1;\n        --argc;\n        ++argv;\n    }\n    if (argc > 0 && **argv == '-' && (*argv)[1] == 'd') {\n        debug = 1;\n        --argc;\n        ++argv;\n    }\n    if (argc < 1) {\n        printf(\"usage: xc [-s] [-d] file ...\\n\");\n        return -1;\n    }\n\n    if ((fd = open(*argv, 0)) < 0) {\n        printf(\"could not open(%s)\\n\", *argv);\n        return -1;\n    }\n\n    poolsize = 256 * 1024; // arbitrary size\n    line = 1;\n\n    // allocate memory\n    if (!(text = malloc(poolsize))) {\n        printf(\"could not malloc(%d) for text area\\n\", poolsize);\n        return -1;\n    }\n    if (!(data = malloc(poolsize))) {\n        printf(\"could not malloc(%d) for data area\\n\", poolsize);\n        return -1;\n    }\n    if (!(stack = malloc(poolsize))) {\n        printf(\"could not malloc(%d) for stack area\\n\", poolsize);\n        return -1;\n    }\n    if (!(symbols = malloc(poolsize))) {\n        printf(\"could not malloc(%d) for symbol table\\n\", poolsize);\n        return -1;\n    }\n\n    memset(text, 0, poolsize);\n    memset(data, 0, poolsize);\n    memset(stack, 0, poolsize);\n    memset(symbols, 0, poolsize);\n\n    old_text = text;\n\n    src = \"char else enum if int return sizeof while \"\n          \"open read close printf malloc memset memcmp exit void main\";\n\n     // add keywords to symbol table\n    i = Char;\n    while (i <= While) {\n        next();\n        current_id[Token] = i++;\n    }\n\n    // add library to symbol table\n    i = OPEN;\n    while (i <= EXIT) {\n        next();\n        current_id[Class] = Sys;\n        current_id[Type] = INT;\n        current_id[Value] = i++;\n    }\n\n    next(); current_id[Token] = Char; // handle void type\n    next(); idmain = current_id; // keep track of main\n\n    if (!(src = old_src = malloc(poolsize))) {\n        printf(\"could not malloc(%d) for source area\\n\", poolsize);\n        return -1;\n    }\n    // read the source file\n    if ((i = read(fd, src, poolsize-1)) <= 0) {\n        printf(\"read() returned %d\\n\", i);\n        return -1;\n    }\n    src[i] = 0; // add EOF character\n    close(fd);\n\n    program();\n\n    if (!(pc = (int *)idmain[Value])) {\n        printf(\"main() not defined\\n\");\n        return -1;\n    }\n\n    // dump_text();\n    if (assembly) {\n        // only for compile\n        return 0;\n    }\n\n    // setup stack\n    sp = (int *)((int)stack + poolsize);\n    *--sp = EXIT; // call exit if main returns\n    *--sp = PUSH; tmp = sp;\n    *--sp = argc;\n    *--sp = (int)argv;\n    *--sp = (int)tmp;\n\n    return eval();\n}\n"
        }
      ]
    }
  ]
}