{
  "metadata": {
    "timestamp": 1736709704926,
    "page": 84,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "u-boot/u-boot",
      "stars": 4160,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".azure-pipelines.yml",
          "type": "blob",
          "size": 24.9287109375,
          "content": "variables:\n  windows_vm: windows-2022\n  ubuntu_vm: ubuntu-24.04\n  macos_vm: macOS-14\n  ci_runner_image: trini/u-boot-gitlab-ci-runner:jammy-20240911.1-08Dec2024\n  # Add '-u 0' options for Azure pipelines, otherwise we get \"permission\n  # denied\" error when it tries to \"useradd -m -u 1001 vsts_azpcontainer\",\n  # since our $(ci_runner_image) user is not root.\n  container_option: -u 0\n  work_dir: /u\n  # We define all of these as variables so we can easily reference them twice\n  am33xx_kirkwood_ls1_mvebu_omap: \"am33xx kirkwood ls1 mvebu omap -x siemens,freescale\"\n  amlogic_bcm_boundary_engicam_siemens_technexion_oradex: \"amlogic bcm boundary engicam siemens technexion toradex -x mips\"\n  arm_nxp_minus_imx_and_at91: \"at91 freescale -x powerpc,m68k,imx,mx\"\n  imx: \"mx imx -x boundary,engicam,technexion,toradex\"\n  rk: \"rk\"\n  sunxi: \"sunxi\"\n  powerpc: \"powerpc\"\n  arm_catch_all: \"arm -x aarch64,am33xx,at91,bcm,ls1,kirkwood,mvebu,omap,rk,siemens,mx,sunxi,technexion,toradex\"\n  aarch64_catch_all: \"aarch64 -x amlogic,bcm,engicam,imx,ls1,ls2,lx216,mvebu,rk,siemens,sunxi,toradex\"\n  everything_but_arm_and_powerpc: \"arc m68k microblaze mips nios2 riscv sandbox sh x86 xtensa -x arm,powerpc\"\n\nstages:\n- stage: testsuites\n  jobs:\n  - job: tools_only_windows\n    displayName: 'Ensure host tools build for Windows'\n    pool:\n      vmImage: $(windows_vm)\n    steps:\n      - powershell: |\n          (New-Object Net.WebClient).DownloadFile(\"https://github.com/msys2/msys2-installer/releases/download/2021-06-04/msys2-base-x86_64-20210604.sfx.exe\", \"sfx.exe\")\n        displayName: 'Install MSYS2'\n      - script: |\n          sfx.exe -y -o%CD:~0,2%\\\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc \" \"\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc \"pacman --noconfirm -Syuu\"\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc \"pacman --noconfirm -Syuu\"\n        displayName: 'Update MSYS2'\n      - script: |\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc \"pacman --noconfirm --needed -Sy make gcc bison flex diffutils openssl-devel libgnutls-devel libutil-linux-devel\"\n        displayName: 'Install Toolchain'\n      - script: |\n          echo make tools-only_defconfig tools-only > build-tools.sh\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc \"bash build-tools.sh\"\n        displayName: 'Build Host Tools'\n        env:\n          # Tell MSYS2 we need a POSIX emulation layer\n          MSYSTEM: MSYS\n          # Tell MSYS2 not to ‘cd’ our startup directory to HOME\n          CHERE_INVOKING: yes\n\n  - job: tools_only_macOS\n    displayName: 'Ensure host tools build for macOS X'\n    pool:\n      vmImage: $(macos_vm)\n    steps:\n      - script: brew install make ossp-uuid\n        displayName: Brew install dependencies\n      - script: |\n          gmake tools-only_config tools-only \\\n            HOSTCFLAGS=\"-I/usr/local/opt/openssl@1.1/include\" \\\n            HOSTLDFLAGS=\"-L/usr/local/opt/openssl@1.1/lib\" \\\n            -j$(sysctl -n hw.logicalcpu)\n        displayName: 'Perform tools-only build'\n\n  - job: check_for_new_CONFIG_symbols_outside_Kconfig\n    displayName: 'Check for new CONFIG symbols outside Kconfig'\n    pool:\n      vmImage: $(ubuntu_vm)\n    container:\n      image: $(ci_runner_image)\n      options: $(container_option)\n    steps:\n      # If grep succeeds and finds a match the test fails as we should\n      # have no matches.\n      - script: git grep -E '^#[[:blank:]]*(define|undef)[[:blank:]]*CONFIG_'\n                  :^doc/ :^arch/arm/dts/ :^scripts/kconfig/lkc.h\n                  :^include/linux/kconfig.h :^tools/ :^dts/upstream/\n                  :^lib/mbedtls/external :^lib/mbedtls/mbedtls_def_config.h &&\n                  exit 1 || exit 0\n\n  - job: docs\n    displayName: 'Build documentation'\n    pool:\n      vmImage: $(ubuntu_vm)\n    container:\n      image: $(ci_runner_image)\n      options: $(container_option)\n    steps:\n      - script: |\n          virtualenv -p /usr/bin/python3 /tmp/venvhtml\n          . /tmp/venvhtml/bin/activate\n          pip install -r doc/sphinx/requirements.txt\n          make htmldocs KDOC_WERROR=1\n          make infodocs\n\n  - job: maintainers\n    displayName: 'Ensure all configs have MAINTAINERS entries'\n    pool:\n      vmImage: $(ubuntu_vm)\n    container:\n      image: $(ci_runner_image)\n      options: $(container_option)\n    steps:\n      - script: |\n          ./tools/buildman/buildman --maintainer-check\n\n  - job: tools_only\n    displayName: 'Ensure host tools and env tools build'\n    pool:\n      vmImage: $(ubuntu_vm)\n    container:\n      image: $(ci_runner_image)\n      options: $(container_option)\n    steps:\n      - script: |\n          make tools-only_config tools-only -j$(nproc)\n          make mrproper\n          make tools-only_config envtools -j$(nproc)\n\n  - job: utils\n    displayName: 'Run binman, buildman, dtoc, Kconfig and patman testsuites'\n    pool:\n      vmImage: $(ubuntu_vm)\n    steps:\n      - script: |\n          cat << \"EOF\" > build.sh\n          cd $(work_dir)\n          git config --global user.name \"Azure Pipelines\"\n          git config --global user.email bmeng.cn@gmail.com\n          git config --global --add safe.directory $(work_dir)\n          export USER=azure\n          virtualenv -p /usr/bin/python3 /tmp/venv\n          . /tmp/venv/bin/activate\n          pip install -r test/py/requirements.txt\n          pip install -r tools/buildman/requirements.txt\n          export UBOOT_TRAVIS_BUILD_DIR=/tmp/tools-only\n          export PYTHONPATH=${UBOOT_TRAVIS_BUILD_DIR}/scripts/dtc/pylibfdt\n          export PATH=${UBOOT_TRAVIS_BUILD_DIR}/scripts/dtc:${PATH}\n          ./tools/buildman/buildman -T0 -o ${UBOOT_TRAVIS_BUILD_DIR} -w --board tools-only\n          set -ex\n          ./tools/binman/binman --toolpath ${UBOOT_TRAVIS_BUILD_DIR}/tools test\n          ./tools/buildman/buildman -t\n          ./tools/dtoc/dtoc -t\n          ./tools/patman/patman test\n          make O=${UBOOT_TRAVIS_BUILD_DIR} testconfig\n          EOF\n          cat build.sh\n          # We cannot use \"container\" like other jobs above, as buildman\n          # seems to hang forever with pre-configured \"container\" environment\n          docker run -v $PWD:$(work_dir) $(ci_runner_image) /bin/bash $(work_dir)/build.sh\n\n  - job: pylint\n    displayName: Check for any pylint regressions\n    pool:\n      vmImage: $(ubuntu_vm)\n    container:\n      image: $(ci_runner_image)\n      options: $(container_option)\n    steps:\n      - script: |\n          git config --global --add safe.directory $(work_dir)\n          export USER=azure\n          pip install -r test/py/requirements.txt\n          pip install -r tools/buildman/requirements.txt\n          pip install asteval pylint==2.12.2 pyopenssl\n          export PATH=${PATH}:~/.local/bin\n          echo \"[MASTER]\" >> .pylintrc\n          echo \"load-plugins=pylint.extensions.docparams\" >> .pylintrc\n          export UBOOT_TRAVIS_BUILD_DIR=/tmp/tools-only\n          ./tools/buildman/buildman -T0 -o ${UBOOT_TRAVIS_BUILD_DIR} -w --board tools-only\n          set -ex\n          pylint --version\n          export PYTHONPATH=${UBOOT_TRAVIS_BUILD_DIR}/scripts/dtc/pylibfdt\n          make pylint_err\n\n  - job: check_for_pre_schema_tags\n    displayName: 'Check for pre-schema driver model tags'\n    pool:\n      vmImage: $(ubuntu_vm)\n    container:\n      image: $(ci_runner_image)\n      options: $(container_option)\n    steps:\n      # If grep succeeds and finds a match the test fails as we should\n      # have no matches.\n      - script: git grep u-boot,dm- -- '*.dts*' && exit 1 || exit 0\n\n  - job: check_packing_of_python_tools\n    displayName: 'Check we can package the Python tools'\n    pool:\n      vmImage: $(ubuntu_vm)\n    container:\n      image: $(ci_runner_image)\n      options: $(container_option)\n    steps:\n      - script: make pip\n\n  - job: count_built_machines\n    displayName: 'Ensure we build all possible machines'\n    pool:\n      vmImage: $(ubuntu_vm)\n    container:\n      image: $(ci_runner_image)\n      options: $(container_option)\n    steps:\n      - script: |\n          BMANARGS=\"-o /tmp --dry-run -v\"\n          # First get the total number of boards\n          total=$(tools/buildman/buildman ${BMANARGS} | grep \"Total boards to build for each commit\" | cut -d ' ' -f 8)\n          # Now build up the list of what each job built.\n          built=\"$(tools/buildman/buildman ${BMANARGS} $(am33xx_kirkwood_ls1_mvebu_omap) | grep '^   ')\"\n          built=\"$built $(tools/buildman/buildman ${BMANARGS} $(amlogic_bcm_boundary_engicam_siemens_technexion_oradex) | grep '^   ')\"\n          built=\"$built $(tools/buildman/buildman ${BMANARGS} $(arm_nxp_minus_imx_and_at91) | grep '^   ')\"\n          built=\"$built $(tools/buildman/buildman ${BMANARGS} $(imx) | grep '^   ')\"\n          built=\"$built $(tools/buildman/buildman ${BMANARGS} $(rk) | grep '^   ')\"\n          built=\"$built $(tools/buildman/buildman ${BMANARGS} $(sunxi) | grep '^   ')\"\n          built=\"$built $(tools/buildman/buildman ${BMANARGS} $(powerpc) | grep '^   ')\"\n          built=\"$built $(tools/buildman/buildman ${BMANARGS} $(arm_catch_all) | grep '^   ')\"\n          built=\"$built $(tools/buildman/buildman ${BMANARGS} $(aarch64_catch_all) | grep '^   ')\"\n          built=\"$built $(tools/buildman/buildman ${BMANARGS} $(everything_but_arm_and_powerpc) | grep '^   ')\"\n          # Finally see how many machines that is.\n          actual=$(tools/buildman/buildman ${BMANARGS} $built | grep \"Total boards to build for each commit\" | cut -d ' ' -f 8)\n          echo We would build a total of $actual out of $total platforms this CI run\n          [ $actual -eq $total ] && exit 0 || exit 1\n\n  - job: create_test_py_wrapper_script\n    displayName: 'Create and stage a wrapper for test.py runs'\n    pool:\n      vmImage: $(ubuntu_vm)\n    steps:\n      - checkout: none\n      - script: |\n          cat << EOF > test.sh\n          #!/bin/bash\n          set -ex\n          # the below corresponds to .gitlab-ci.yml \"before_script\"\n          cd \\${WORK_DIR}\n          git config --global --add safe.directory \\${WORK_DIR}\n          git clone --depth=1 https://source.denx.de/u-boot/u-boot-test-hooks /tmp/uboot-test-hooks\n          # qemu_arm64_lwip_defconfig is the same as qemu_arm64 but with NET_LWIP enabled.\n          # The test config and the boardenv file from qemu_arm64 can be re-used so create symlinks\n          ln -s conf.qemu_arm64_na /tmp/uboot-test-hooks/bin/travis-ci/conf.qemu_arm64_lwip_na\n          ln -s u_boot_boardenv_qemu_arm64_na.py /tmp/uboot-test-hooks/py/travis-ci/u_boot_boardenv_qemu_arm64_lwip_na.py\n          ln -s travis-ci /tmp/uboot-test-hooks/bin/\\`hostname\\`\n          ln -s travis-ci /tmp/uboot-test-hooks/py/\\`hostname\\`\n          if [[ \"\\${TEST_PY_BD}\" == \"qemu-riscv32_spl\" ]]; then\n              wget -O - https://github.com/riscv-software-src/opensbi/releases/download/v1.3.1/opensbi-1.3.1-rv-bin.tar.xz | tar -C /tmp -xJ;\n              export OPENSBI=/tmp/opensbi-1.3.1-rv-bin/share/opensbi/ilp32/generic/firmware/fw_dynamic.bin;\n          fi\n          if [[ \"\\${TEST_PY_BD}\" == \"qemu-riscv64_spl\" ]] || [[ \"\\${TEST_PY_BD}\" == \"sifive_unleashed\" ]]; then\n              wget -O - https://github.com/riscv-software-src/opensbi/releases/download/v1.3.1/opensbi-1.3.1-rv-bin.tar.xz | tar -C /tmp -xJ;\n              export OPENSBI=/tmp/opensbi-1.3.1-rv-bin/share/opensbi/lp64/generic/firmware/fw_dynamic.bin;\n          fi\n          if [[ \"\\${TEST_PY_BD}\" == \"qemu-arm-sbsa\" ]]; then\n              wget -O /tmp/bl1.bin https://artifacts.codelinaro.org/artifactory/linaro-419-sbsa-ref/latest/tf-a/bl1.bin;\n              wget -O /tmp/fip.bin https://artifacts.codelinaro.org/artifactory/linaro-419-sbsa-ref/latest/tf-a/fip.bin;\n              export BINMAN_INDIRS=/tmp\n          fi\n          # the below corresponds to .gitlab-ci.yml \"script\"\n          cd \\${WORK_DIR}\n          export UBOOT_TRAVIS_BUILD_DIR=/tmp/\\${TEST_PY_BD}\n          if [ -n \"\\${BUILD_ENV}\" ]; then\n              export \\${BUILD_ENV};\n          fi\n          pip install -r tools/buildman/requirements.txt\n          tools/buildman/buildman -o \\${UBOOT_TRAVIS_BUILD_DIR} -w -E -W -e --board \\${TEST_PY_BD} \\${OVERRIDE}\n          cp /opt/grub/grub_x86.efi \\${UBOOT_TRAVIS_BUILD_DIR}/\n          cp /opt/grub/grub_x64.efi \\${UBOOT_TRAVIS_BUILD_DIR}/\n          cp /opt/grub/grubriscv64.efi \\${UBOOT_TRAVIS_BUILD_DIR}/grub_riscv64.efi\n          cp /opt/grub/grubaa64.efi \\${UBOOT_TRAVIS_BUILD_DIR}/grub_arm64.efi\n          cp /opt/grub/grubarm.efi \\${UBOOT_TRAVIS_BUILD_DIR}/grub_arm.efi\n          # create sdcard / spi-nor images for sifive unleashed using genimage\n          if [[ \"\\${TEST_PY_BD}\" == \"sifive_unleashed\" ]]; then\n              mkdir -p root;\n              cp \\${UBOOT_TRAVIS_BUILD_DIR}/spl/u-boot-spl.bin .;\n              cp \\${UBOOT_TRAVIS_BUILD_DIR}/u-boot.itb .;\n              rm -rf tmp;\n              genimage --inputpath . --config board/sifive/unleashed/genimage_sdcard.cfg;\n              cp images/sdcard.img \\${UBOOT_TRAVIS_BUILD_DIR}/;\n              rm -rf tmp;\n              genimage --inputpath . --config board/sifive/unleashed/genimage_spi-nor.cfg;\n              cp images/spi-nor.img \\${UBOOT_TRAVIS_BUILD_DIR}/;\n          fi\n          if [[ \"\\${TEST_PY_BD}\" == \"coreboot\" ]]; then\n              cp /opt/coreboot/coreboot.rom \\${UBOOT_TRAVIS_BUILD_DIR}/coreboot.rom;\n              /opt/coreboot/cbfstool \\${UBOOT_TRAVIS_BUILD_DIR}/coreboot.rom remove -n fallback/payload;\n              /opt/coreboot/cbfstool \\${UBOOT_TRAVIS_BUILD_DIR}/coreboot.rom add-flat-binary -f \\${UBOOT_TRAVIS_BUILD_DIR}/u-boot.bin -n fallback/payload -c LZMA -l 0x1110000 -e 0x1110000;\n          fi\n          virtualenv -p /usr/bin/python3 /tmp/venv\n          . /tmp/venv/bin/activate\n          pip install -r test/py/requirements.txt\n          pip install pytest-azurepipelines\n          export PATH=/opt/qemu/bin:/tmp/uboot-test-hooks/bin:\\${PATH}\n          export PYTHONPATH=/tmp/uboot-test-hooks/py/travis-ci\n          # \"\\${var:+\"-k \\$var\"}\" expands to \"\" if \\$var is empty, \"-k \\$var\" if not\n          ./test/py/test.py -ra -o cache_dir=\"\\$UBOOT_TRAVIS_BUILD_DIR\"/.pytest_cache --bd \\${TEST_PY_BD} \\${TEST_PY_ID} \\${TEST_PY_TEST_SPEC:+\"-k \\${TEST_PY_TEST_SPEC}\"} --build-dir \"\\$UBOOT_TRAVIS_BUILD_DIR\" --report-dir \"\\$UBOOT_TRAVIS_BUILD_DIR\" --junitxml=\\$(System.DefaultWorkingDirectory)/results.xml\n          # the below corresponds to .gitlab-ci.yml \"after_script\"\n          rm -rf /tmp/uboot-test-hooks /tmp/venv\n          EOF\n      - task: CopyFiles@2\n        displayName: 'Copy test.sh for later usage'\n        inputs:\n          contents: 'test.sh'\n          targetFolder: '$(Build.ArtifactStagingDirectory)'\n      - publish: '$(Build.ArtifactStagingDirectory)/test.sh'\n        displayName: 'Publish test.sh'\n        artifact: testsh\n\n- stage: test_py_sandbox\n  jobs:\n  - job: test_py_sandbox\n    displayName: 'test.py for sandbox'\n    pool:\n      vmImage: $(ubuntu_vm)\n    strategy:\n      matrix:\n        sandbox:\n          TEST_PY_BD: \"sandbox\"\n        sandbox_asan:\n          TEST_PY_BD: \"sandbox\"\n          OVERRIDE: \"-a ASAN\"\n          TEST_PY_TEST_SPEC: \"version\"\n        sandbox_clang:\n          TEST_PY_BD: \"sandbox\"\n          OVERRIDE: \"-O clang-17\"\n        sandbox_clang_asan:\n          TEST_PY_BD: \"sandbox\"\n          OVERRIDE: \"-O clang-17 -a ASAN\"\n          TEST_PY_TEST_SPEC: \"version\"\n        sandbox64:\n          TEST_PY_BD: \"sandbox64\"\n        sandbox64_clang:\n          TEST_PY_BD: \"sandbox64\"\n          OVERRIDE: \"-O clang-17\"\n        sandbox_spl:\n          TEST_PY_BD: \"sandbox_spl\"\n          TEST_PY_TEST_SPEC: \"test_ofplatdata or test_handoff or test_spl\"\n        sandbox_vpl:\n          TEST_PY_BD: \"sandbox_vpl\"\n          TEST_PY_TEST_SPEC: \"vpl or test_spl\"\n        sandbox_noinst:\n          TEST_PY_BD: \"sandbox_noinst\"\n          TEST_PY_TEST_SPEC: \"test_ofplatdata or test_handoff or test_spl\"\n        sandbox_noinst_load_fit_full:\n          TEST_PY_BD: \"sandbox_noinst\"\n          TEST_PY_TEST_SPEC: \"test_ofplatdata or test_handoff or test_spl\"\n          OVERRIDE: \"-a CONFIG_SPL_LOAD_FIT_FULL=y\"\n        sandbox_flattree:\n          TEST_PY_BD: \"sandbox_flattree\"\n        sandbox_trace:\n          TEST_PY_BD: \"sandbox\"\n          BUILD_ENV: \"FTRACE=1 NO_LTO=1\"\n          TEST_PY_TEST_SPEC: \"trace\"\n          OVERRIDE: \"-a CONFIG_TRACE=y -a CONFIG_TRACE_EARLY=y -a CONFIG_TRACE_EARLY_SIZE=0x01000000 -a CONFIG_TRACE_BUFFER_SIZE=0x02000000\"\n    steps:\n      - download: current\n        artifact: testsh\n      - script: |\n          # make current directory writeable to uboot user inside the container\n          # as sandbox testing need create files like spi flash images, etc.\n          # (TODO: clean up this in the future)\n          chmod 777 .\n          chmod 755 $(Pipeline.Workspace)/testsh/test.sh\n          # Filesystem tests need extra docker args to run\n          set --\n          # mount -o loop needs the loop devices\n          if modprobe loop; then\n              for d in $(find /dev -maxdepth 1 -name 'loop*'); do\n                  set -- \"$@\" --device $d:$d\n              done\n          fi\n          # Needed for mount syscall (for guestmount as well)\n          set -- \"$@\" --cap-add SYS_ADMIN\n          # Default apparmor profile denies mounts\n          set -- \"$@\" --security-opt apparmor=unconfined\n          # Some tests using libguestfs-tools need the fuse device to run\n          docker run \"$@\" --device /dev/fuse:/dev/fuse \\\n                         -v $PWD:$(work_dir) \\\n                         -v $(Pipeline.Workspace):$(Pipeline.Workspace) \\\n                         -v $(System.DefaultWorkingDirectory):$(System.DefaultWorkingDirectory) \\\n                         -e WORK_DIR=\"${WORK_DIR}\" \\\n                         -e TEST_PY_BD=\"${TEST_PY_BD}\" \\\n                         -e TEST_PY_ID=\"${TEST_PY_ID}\" \\\n                         -e TEST_PY_TEST_SPEC=\"${TEST_PY_TEST_SPEC}\" \\\n                         -e OVERRIDE=\"${OVERRIDE}\" \\\n                         -e BUILD_ENV=\"${BUILD_ENV}\" $(ci_runner_image) \\\n                         $(Pipeline.Workspace)/testsh/test.sh\n      - task: PublishTestResults@2\n        inputs:\n          testResultsFormat: 'JUnit'\n          testResultsFiles: 'results.xml'\n\n- stage: test_py_qemu\n  jobs:\n  - job: test_py_qemu\n    displayName: 'test.py for QEMU platforms'\n    pool:\n      vmImage: $(ubuntu_vm)\n    strategy:\n      matrix:\n        coreboot:\n          TEST_PY_BD: \"coreboot\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        evb_ast2500:\n          TEST_PY_BD: \"evb-ast2500\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        evb_ast2600:\n          TEST_PY_BD: \"evb-ast2600\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        vexpress_ca9x4:\n          TEST_PY_BD: \"vexpress_ca9x4\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        integratorcp_cm926ejs:\n          TEST_PY_BD: \"integratorcp_cm926ejs\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        qemu_arm:\n          TEST_PY_BD: \"qemu_arm\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        qemu_arm64:\n          TEST_PY_BD: \"qemu_arm64\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        qemu_arm64_lwip:\n          TEST_PY_BD: \"qemu_arm64_lwip\"\n          TEST_PY_TEST_SPEC: \"test_net_dhcp or test_net_ping or test_net_tftpboot\"\n        qemu_arm_sbsa_ref:\n          TEST_PY_BD: \"qemu-arm-sbsa\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        qemu_m68k:\n          TEST_PY_BD: \"M5208EVBE\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep and not efi\"\n          OVERRIDE: \"-a CONFIG_M68K_QEMU=y -a ~CONFIG_MCFTMR\"\n        qemu_malta:\n          TEST_PY_BD: \"malta\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep and not efi\"\n        qemu_maltael:\n          TEST_PY_BD: \"maltael\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep and not efi\"\n        qemu_malta64:\n          TEST_PY_BD: \"malta64\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep and not efi\"\n        qemu_malta64el:\n          TEST_PY_BD: \"malta64el\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep and not efi\"\n        qemu_ppce500:\n          TEST_PY_BD: \"qemu-ppce500\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        qemu_riscv32:\n          TEST_PY_BD: \"qemu-riscv32\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        qemu_riscv64:\n          TEST_PY_BD: \"qemu-riscv64\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        qemu_riscv32_spl:\n          TEST_PY_BD: \"qemu-riscv32_spl\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        qemu_riscv64_spl:\n          TEST_PY_BD: \"qemu-riscv64_spl\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        qemu_x86:\n          TEST_PY_BD: \"qemu-x86\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        qemu_x86_64:\n          TEST_PY_BD: \"qemu-x86_64\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        qemu_xtensa_dc233c:\n          TEST_PY_BD: \"qemu-xtensa-dc233c\"\n          TEST_PY_TEST_SPEC: \"not sleep and not efi\"\n        r2dplus_i82557c:\n          TEST_PY_BD: \"r2dplus\"\n          TEST_PY_ID: \"--id i82557c_qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        r2dplus_pcnet:\n          TEST_PY_BD: \"r2dplus\"\n          TEST_PY_ID: \"--id pcnet_qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        r2dplus_rtl8139:\n          TEST_PY_BD: \"r2dplus\"\n          TEST_PY_ID: \"--id rtl8139_qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        r2dplus_tulip:\n          TEST_PY_BD: \"r2dplus\"\n          TEST_PY_ID: \"--id tulip_qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        sifive_unleashed_sdcard:\n          TEST_PY_BD: \"sifive_unleashed\"\n          TEST_PY_ID: \"--id sdcard_qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        sifive_unleashed_spi-nor:\n          TEST_PY_BD: \"sifive_unleashed\"\n          TEST_PY_ID: \"--id spi-nor_qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        xilinx_zynq_virt:\n          TEST_PY_BD: \"xilinx_zynq_virt\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n        xilinx_versal_virt:\n          TEST_PY_BD: \"xilinx_versal_virt\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n          OVERRIDE: \"-a ~CONFIG_USB_DWC3\"\n        xtfpga:\n          TEST_PY_BD: \"xtfpga\"\n          TEST_PY_ID: \"--id qemu\"\n          TEST_PY_TEST_SPEC: \"not sleep\"\n    steps:\n      - download: current\n        artifact: testsh\n      - script: |\n          # make current directory writeable to uboot user inside the container\n          # as sandbox testing need create files like spi flash images, etc.\n          # (TODO: clean up this in the future)\n          chmod 777 .\n          chmod 755 $(Pipeline.Workspace)/testsh/test.sh\n          # Some tests using libguestfs-tools need the fuse device to run\n          docker run \"$@\" --device /dev/fuse:/dev/fuse \\\n                         -v $PWD:$(work_dir) \\\n                         -v $(Pipeline.Workspace):$(Pipeline.Workspace) \\\n                         -v $(System.DefaultWorkingDirectory):$(System.DefaultWorkingDirectory) \\\n                         -e WORK_DIR=\"${WORK_DIR}\" \\\n                         -e TEST_PY_BD=\"${TEST_PY_BD}\" \\\n                         -e TEST_PY_ID=\"${TEST_PY_ID}\" \\\n                         -e TEST_PY_TEST_SPEC=\"${TEST_PY_TEST_SPEC}\" \\\n                         -e OVERRIDE=\"${OVERRIDE}\" \\\n                         -e BUILD_ENV=\"${BUILD_ENV}\" $(ci_runner_image) \\\n                         $(Pipeline.Workspace)/testsh/test.sh\n        retryCountOnTaskFailure: 2 # QEMU may be too slow, etc.\n      - task: PublishTestResults@2\n        inputs:\n          testResultsFormat: 'JUnit'\n          testResultsFiles: 'results.xml'\n\n- stage: world_build\n  jobs:\n  - job: build_the_world\n    timeoutInMinutes: 0 # Use the maximum allowed\n    displayName: 'Build the World'\n    pool:\n      vmImage: $(ubuntu_vm)\n    strategy:\n      # We split the world up in to 10 jobs as we can have at most 10\n      # parallel jobs going on the free tier of Azure.\n      matrix:\n        am33xx_kirkwood_ls1_mvebu_omap:\n          BUILDMAN: $(am33xx_kirkwood_ls1_mvebu_omap)\n        amlogic_bcm_boundary_engicam_siemens_technexion_oradex:\n          BUILDMAN: $(amlogic_bcm_boundary_engicam_siemens_technexion_oradex)\n        arm_nxp_minus_imx_and_at91:\n          BUILDMAN: $(arm_nxp_minus_imx_and_at91)\n        imx:\n          BUILDMAN: $(imx)\n        rk:\n          BUILDMAN: $(rk)\n        sunxi:\n          BUILDMAN: $(sunxi)\n        powerpc:\n          BUILDMAN: $(powerpc)\n        arm_catch_all:\n          BUILDMAN: $(arm_catch_all)\n        aarch64_catch_all:\n          BUILDMAN: $(aarch64_catch_all)\n        everything_but_arm_and_powerpc:\n          BUILDMAN: $(everything_but_arm_and_powerpc)\n    steps:\n      - script: |\n          cat << EOF > build.sh\n          set -ex\n          cd ${WORK_DIR}\n          # make environment variables available as tests are running inside a container\n          export BUILDMAN=\"${BUILDMAN}\"\n          git config --global --add safe.directory ${WORK_DIR}\n          pip install -r tools/buildman/requirements.txt\n          EOF\n          cat << \"EOF\" >> build.sh\n          if [[ \"${BUILDMAN}\" != \"\" ]]; then\n              ret=0;\n              tools/buildman/buildman -o /tmp -PEWM ${BUILDMAN} ${OVERRIDE} || ret=$?;\n              if [[ $ret -ne 0 ]]; then\n                  tools/buildman/buildman -o /tmp -seP ${BUILDMAN};\n                  exit $ret;\n              fi;\n          fi\n          EOF\n          cat build.sh\n          docker run -v $PWD:$(work_dir) $(ci_runner_image) /bin/bash $(work_dir)/build.sh\n"
        },
        {
          "name": ".checkpatch.conf",
          "type": "blob",
          "size": 0.794921875,
          "content": "# Not Linux, so don't expect a Linux tree.\n--no-tree\n\n# Temporary for false positive in checkpatch\n--ignore COMPLEX_MACRO\n\n# For CFG_SYS_I2C_NOPROBES\n--ignore MULTISTATEMENT_MACRO_USE_DO_WHILE\n\n# For simple_strtoul\n--ignore CONSIDER_KSTRTO\n\n# For min/max\n--ignore MINMAX\n\n# enable more tests\n--strict\n\n# Not Linux, so we don't recommend usleep_range() over udelay()\n--ignore USLEEP_RANGE\n\n# Ignore networking block comment style\n--ignore NETWORKING_BLOCK_COMMENT_STYLE\n\n# Ignore \"WARNING: Prefer ether_addr_copy() over memcpy() if the Ethernet\n# addresses are __aligned(2)\".\n--ignore PREFER_ETHER_ADDR_COPY\n\n# ENOSYS is a conventionally used error, even though U-Boot lacks system calls.\n--ignore ENOSYS\n\n# A bit shorter of a description is OK with us.\n--min-conf-desc-length=2\n\n# Extra checks for U-Boot\n--u-boot\n"
        },
        {
          "name": ".get_maintainer.conf",
          "type": "blob",
          "size": 0.048828125,
          "content": "--find-maintainer-files --git --maintainer-path=.\n"
        },
        {
          "name": ".get_maintainer.ignore",
          "type": "blob",
          "size": 0.03125,
          "content": "\"Pali Rohár\" <pali@kernel.org>\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2021484375,
          "content": "# Declare files that always have LF line endings on checkout\n* text eol=lf\n# Denote all files that are truly binary and should not be modified\n*.bin binary\n*.bmp binary\n*.ttf binary\n*.gz binary\n*.png binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5341796875,
          "content": "#\n# NOTE! Don't add files that are generated in specific\n# subdirectories here. Add them in the \".gitignore\" file\n# in that subdirectory instead.\n#\n# Normal rules (sorted alphabetically)\n#\n.*\n!.checkpatch.conf\n*.a\n*.asn1.[ch]\n*.bin\n*.bin[_.]*\n*.cfgout\n*.cover\n*.dtb\n*.dtbo\n*.dtb.S\n*.elf\n*.exe\n*.fit\n*.gcda\n*.gcno\n*.i\n*.img\n*.itb\n*.lex.c\n*.lst\n*.map\n*.mod.c\n*.mbx\n*.o\n*.o.*\n*.order\n*.patch\n*.pem\n*.s\n*.su\n*.swp\n*.tab.[ch]\n*.ti-*\n# Build tree\n/build*\n\n#\n# Top-level generic files\n#\nfit-dtb.blob*\n/MLO*\n/SPL*\n/System.map\n/boards.cfg\n/mkimage-in-simple-bin*\n/simple-bin*\n/u-boot*\n/*.log\n\n#\n# git files that we don't want to ignore even it they are dot-files\n#\n!.gitignore\n!.mailmap\n!.get_maintainer.*\n\n#\n# Generated files\n#\n/spl/\n/tpl/\n/defconfig\n/generated_defconfig\n/Test*\n/capsule.*.efi-capsule\n/capsule*.map\n/keep-syms-lto.*\n/*imx8mimage*\n/*imx8mcst*\n/drivers/video/u_boot_logo.S\n/test/overlay/test-fdt-overlay.dtbo.S\n/test/overlay/test-fdt-overlay-stacked.dtbo.S\n\n#\n# Generated include files\n#\n/include/autoconf.mk*\n/include/config.h\n/include/config/\n/include/generated/\n/include/bmp_logo.h\n/include/bmp_logo_data.h\n\n# stgit generated dirs\npatches-*\n.stgit-edit.txt\n\n# quilt's files\npatches\nseries\n\n# gdb files\n.gdb_history\n\n# cscope files\ncscope.*\n\n# tags files\n/tags\n/ctags\n/etags\n\n# gnu global files\nGPATH\nGRTAGS\nGSYMS\nGTAGS\n\n*.orig\n*~\n\\#*#\n\n# Python cache\n__pycache__\n\n# Python code coverage output (python3-coverage html)\n/htmlcov/\n\n# pylint files\n/pylint.cur\n/pylint.out/\n\n# qconfig database\n/qconfig.db\n\n# Clang's compilation database file\n/compile_commands.json\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 17.5390625,
          "content": "# SPDX-License-Identifier: GPL-2.0+\n\nvariables:\n  DEFAULT_ALL_TAG: \"all\"\n  DEFAULT_ARM64_TAG: \"arm64\"\n  DEFAULT_AMD64_TAG: \"amd64\"\n  DEFAULT_FAST_AMD64_TAG: \"fast amd64\"\n  MIRROR_DOCKER: docker.io\n  SJG_LAB: \"\"\n  PLATFORM: linux/amd64,linux/arm64\n\ndefault:\n  tags:\n    - ${DEFAULT_ALL_TAG}\n\nworkflow:\n  rules:\n    - when: always\n\n# Grab our configured image.  The source for this is found\n# in the u-boot tree at tools/docker/Dockerfile\nimage: ${MIRROR_DOCKER}/trini/u-boot-gitlab-ci-runner:jammy-20240911.1-08Dec2024\n\n# We run some tests in different order, to catch some failures quicker.\nstages:\n  - testsuites\n  - test.py\n  - sjg-lab\n  - world build\n\n.buildman_and_testpy_template: &buildman_and_testpy_dfn\n  stage: test.py\n  retry: 2 # QEMU may be too slow, etc.\n  needs: [ \"Run binman, buildman, dtoc, Kconfig and patman testsuites\" ]\n  before_script:\n    # Clone uboot-test-hooks\n    - git config --global --add safe.directory \"${CI_PROJECT_DIR}\"\n    - git clone --depth=1 https://source.denx.de/u-boot/u-boot-test-hooks /tmp/uboot-test-hooks\n    # qemu_arm64_lwip_defconfig is the same as qemu_arm64 but with NET_LWIP enabled.\n    # The test config and the boardenv file from qemu_arm64 can be re-used so create symlinks\n    - ln -s conf.qemu_arm64_na /tmp/uboot-test-hooks/bin/travis-ci/conf.qemu_arm64_lwip_na\n    - ln -s travis-ci /tmp/uboot-test-hooks/bin/`hostname`\n    - ln -s travis-ci /tmp/uboot-test-hooks/py/`hostname`\n    - if [[ \"${TEST_PY_BD}\" == \"qemu-riscv32_spl\" ]]; then\n        wget -O - https://github.com/riscv-software-src/opensbi/releases/download/v1.3.1/opensbi-1.3.1-rv-bin.tar.xz | tar -C /tmp -xJ;\n        export OPENSBI=/tmp/opensbi-1.3.1-rv-bin/share/opensbi/ilp32/generic/firmware/fw_dynamic.bin;\n      fi\n    - if [[ \"${TEST_PY_BD}\" == \"qemu-riscv64_spl\" ]] || [[ \"${TEST_PY_BD}\" == \"sifive_unleashed\" ]]; then\n        wget -O - https://github.com/riscv-software-src/opensbi/releases/download/v1.3.1/opensbi-1.3.1-rv-bin.tar.xz | tar -C /tmp -xJ;\n        export OPENSBI=/tmp/opensbi-1.3.1-rv-bin/share/opensbi/lp64/generic/firmware/fw_dynamic.bin;\n      fi\n    - if [[ \"${TEST_PY_BD}\" == \"qemu-arm-sbsa\" ]]; then\n        wget -O /tmp/bl1.bin https://artifacts.codelinaro.org/artifactory/linaro-419-sbsa-ref/latest/tf-a/bl1.bin;\n        wget -O /tmp/fip.bin https://artifacts.codelinaro.org/artifactory/linaro-419-sbsa-ref/latest/tf-a/fip.bin;\n        export BINMAN_INDIRS=/tmp;\n      fi\n\n  after_script:\n    - cp -v /tmp/${TEST_PY_BD}/*.{html,css,xml} .\n    - rm -rf /tmp/uboot-test-hooks /tmp/venv\n  script:\n    # If we've been asked to use clang only do one configuration.\n    - export UBOOT_TRAVIS_BUILD_DIR=/tmp/${TEST_PY_BD}\n    - echo BUILD_ENV ${BUILD_ENV}\n    - if [ -n \"${BUILD_ENV}\" ]; then\n        export ${BUILD_ENV};\n      fi\n    - tools/buildman/buildman -o ${UBOOT_TRAVIS_BUILD_DIR} -w -E -W -e\n        --board ${TEST_PY_BD} ${OVERRIDE}\n    - cp /opt/grub/grub_x86.efi $UBOOT_TRAVIS_BUILD_DIR/\n    - cp /opt/grub/grub_x64.efi $UBOOT_TRAVIS_BUILD_DIR/\n    - cp /opt/grub/grubriscv64.efi $UBOOT_TRAVIS_BUILD_DIR/grub_riscv64.efi\n    - cp /opt/grub/grubaa64.efi $UBOOT_TRAVIS_BUILD_DIR/grub_arm64.efi\n    - cp /opt/grub/grubarm.efi $UBOOT_TRAVIS_BUILD_DIR/grub_arm.efi\n    # create sdcard / spi-nor images for sifive unleashed using genimage\n    - if [[ \"${TEST_PY_BD}\" == \"sifive_unleashed\" ]]; then\n        mkdir -p root;\n        cp ${UBOOT_TRAVIS_BUILD_DIR}/spl/u-boot-spl.bin .;\n        cp ${UBOOT_TRAVIS_BUILD_DIR}/u-boot.itb .;\n        rm -rf tmp;\n        genimage --inputpath . --config board/sifive/unleashed/genimage_sdcard.cfg;\n        cp images/sdcard.img ${UBOOT_TRAVIS_BUILD_DIR}/;\n        rm -rf tmp;\n        genimage --inputpath . --config board/sifive/unleashed/genimage_spi-nor.cfg;\n        cp images/spi-nor.img ${UBOOT_TRAVIS_BUILD_DIR}/;\n      fi\n    - if [[ \"${TEST_PY_BD}\" == \"coreboot\" ]]; then\n        cp /opt/coreboot/coreboot.rom ${UBOOT_TRAVIS_BUILD_DIR}/coreboot.rom;\n        /opt/coreboot/cbfstool ${UBOOT_TRAVIS_BUILD_DIR}/coreboot.rom remove -n fallback/payload;\n        /opt/coreboot/cbfstool ${UBOOT_TRAVIS_BUILD_DIR}/coreboot.rom add-flat-binary -f ${UBOOT_TRAVIS_BUILD_DIR}/u-boot.bin -n fallback/payload -c LZMA -l 0x1110000 -e 0x1110000;\n      fi\n    - virtualenv -p /usr/bin/python3 /tmp/venv\n    - . /tmp/venv/bin/activate\n    - pip install -r test/py/requirements.txt\n    # \"${var:+\"-k $var\"}\" expands to \"\" if $var is empty, \"-k $var\" if not\n    - export PATH=/opt/qemu/bin:/tmp/uboot-test-hooks/bin:${PATH};\n      export PYTHONPATH=/tmp/uboot-test-hooks/py/travis-ci;\n      ./test/py/test.py -ra --bd ${TEST_PY_BD} ${TEST_PY_ID}\n        ${TEST_PY_TEST_SPEC:+\"-k ${TEST_PY_TEST_SPEC}\"}\n        --build-dir \"$UBOOT_TRAVIS_BUILD_DIR\"\n        --junitxml=/tmp/${TEST_PY_BD}/results.xml\n  artifacts:\n    when: always\n    paths:\n      - \"*.html\"\n      - \"*.css\"\n    reports:\n      junit: results.xml\n    expire_in: 1 week\n\nbuild all platforms in a single job:\n  stage: world build\n  dependencies: []\n  parallel:\n    matrix:\n      - HOST: \"arm64\"\n      - HOST: \"fast amd64\"\n  tags:\n    - ${HOST}\n  script:\n    - ret=0;\n      git config --global --add safe.directory \"${CI_PROJECT_DIR}\";\n      pip install -r tools/buildman/requirements.txt;\n      ./tools/buildman/buildman -o /tmp -PEWM -x xtensa || ret=$?;\n      if [[ $ret -ne 0 ]]; then\n        ./tools/buildman/buildman -o /tmp -seP;\n        exit $ret;\n      fi;\n\n.testsuites:\n  stage: testsuites\n\ncheck for new CONFIG symbols outside Kconfig:\n  extends: .testsuites\n  script:\n    - git config --global --add safe.directory \"${CI_PROJECT_DIR}\"\n    # If grep succeeds and finds a match the test fails as we should\n    # have no matches.\n    - git grep -E '^#[[:blank:]]*(define|undef)[[:blank:]]*CONFIG_'\n        :^doc/ :^arch/arm/dts/ :^scripts/kconfig/lkc.h\n        :^include/linux/kconfig.h :^tools/ :^dts/upstream/\n        :^lib/mbedtls/external :^lib/mbedtls/mbedtls_def_config.h &&\n        exit 1 || exit 0\n\n# build documentation\ndocs:\n  extends: .testsuites\n  script:\n    - virtualenv -p /usr/bin/python3 /tmp/venvhtml\n    - . /tmp/venvhtml/bin/activate\n    - pip install -r doc/sphinx/requirements.txt\n    - make htmldocs KDOC_WERROR=1\n    - make infodocs\n\n# ensure all configs have MAINTAINERS entries\nCheck for configs without MAINTAINERS entry:\n  extends: .testsuites\n  script:\n    - ./tools/buildman/buildman --maintainer-check\n\n# Ensure host tools build\nBuild tools-only and envtools:\n  extends: .testsuites\n  script:\n    - make tools-only_config tools-only -j$(nproc);\n      make mrproper;\n      make tools-only_config envtools -j$(nproc)\n\nRun binman, buildman, dtoc, Kconfig and patman testsuites:\n  extends: .testsuites\n  tags:\n    - ${DEFAULT_AMD64_TAG}\n  script:\n    - git config --global user.name \"GitLab CI Runner\";\n      git config --global user.email trini@konsulko.com;\n      git config --global --add safe.directory \"${CI_PROJECT_DIR}\";\n      export USER=gitlab;\n      virtualenv -p /usr/bin/python3 /tmp/venv;\n      . /tmp/venv/bin/activate;\n      pip install -r test/py/requirements.txt;\n      pip install -r tools/buildman/requirements.txt;\n      export UBOOT_TRAVIS_BUILD_DIR=/tmp/tools-only;\n      export PYTHONPATH=\"${UBOOT_TRAVIS_BUILD_DIR}/scripts/dtc/pylibfdt\";\n      export PATH=\"${UBOOT_TRAVIS_BUILD_DIR}/scripts/dtc:${PATH}\";\n      set +e;\n      ./tools/buildman/buildman -T0 -o ${UBOOT_TRAVIS_BUILD_DIR} -w\n        --board tools-only;\n      set -e;\n      ./tools/binman/binman --toolpath ${UBOOT_TRAVIS_BUILD_DIR}/tools test;\n      ./tools/buildman/buildman -t;\n      ./tools/dtoc/dtoc -t;\n      ./tools/patman/patman test;\n      make testconfig\n\n# Check for any pylint regressions\nRun pylint:\n  extends: .testsuites\n  script:\n    - git config --global --add safe.directory \"${CI_PROJECT_DIR}\"\n    - pip install -r test/py/requirements.txt\n    - pip install -r tools/buildman/requirements.txt\n    - pip install asteval pylint==2.12.2 pyopenssl\n    - export PATH=${PATH}:~/.local/bin\n    - echo \"[MASTER]\" >> .pylintrc\n    - echo \"load-plugins=pylint.extensions.docparams\" >> .pylintrc\n    - export UBOOT_TRAVIS_BUILD_DIR=/tmp/tools-only\n    - set +e\n    - ./tools/buildman/buildman -T0 -o ${UBOOT_TRAVIS_BUILD_DIR} -w\n        --board tools-only\n    - set -e\n    - pylint --version\n    - export PYTHONPATH=\"${UBOOT_TRAVIS_BUILD_DIR}/scripts/dtc/pylibfdt\"\n    - make pylint_err\n\n# Check for pre-schema driver model tags\nCheck for pre-schema tags:\n  extends: .testsuites\n  script:\n    - git config --global --add safe.directory \"${CI_PROJECT_DIR}\";\n    # If grep succeeds and finds a match the test fails as we should\n    # have no matches.\n    - git grep u-boot,dm- -- '*.dts*' && exit 1 || exit 0\n\n# Check we can package the Python tools\nCheck packing of Python tools:\n  extends: .testsuites\n  script:\n    - make pip\n\n# Test sandbox with test.py\nsandbox test.py:\n  tags:\n    - ${DEFAULT_AMD64_TAG}\n  variables:\n    TEST_PY_BD: \"sandbox\"\n  <<: *buildman_and_testpy_dfn\n\nsandbox with clang test.py:\n  tags:\n    - ${DEFAULT_AMD64_TAG}\n  variables:\n    TEST_PY_BD: \"sandbox\"\n    OVERRIDE: \"-O clang-17\"\n  <<: *buildman_and_testpy_dfn\n\nsandbox64 test.py:\n  tags:\n    - ${DEFAULT_AMD64_TAG}\n  variables:\n    TEST_PY_BD: \"sandbox64\"\n  <<: *buildman_and_testpy_dfn\n\nsandbox64 with clang test.py:\n  tags:\n    - ${DEFAULT_AMD64_TAG}\n  variables:\n    TEST_PY_BD: \"sandbox64\"\n    OVERRIDE: \"-O clang-17\"\n  <<: *buildman_and_testpy_dfn\n\nsandbox_spl test.py:\n  variables:\n    TEST_PY_BD: \"sandbox_spl\"\n    TEST_PY_TEST_SPEC: \"test_ofplatdata or test_handoff or test_spl\"\n  <<: *buildman_and_testpy_dfn\n\nsandbox_noinst_test.py:\n  variables:\n    TEST_PY_BD: \"sandbox_noinst\"\n    TEST_PY_TEST_SPEC: \"test_ofplatdata or test_handoff or test_spl\"\n  <<: *buildman_and_testpy_dfn\n\nsandbox_noinst with LOAD_FIT_FULL test.py:\n  variables:\n    TEST_PY_BD: \"sandbox_noinst\"\n    TEST_PY_TEST_SPEC: \"test_ofplatdata or test_handoff or test_spl\"\n    OVERRIDE: \"-a CONFIG_SPL_LOAD_FIT_FULL=y\"\n  <<: *buildman_and_testpy_dfn\n\nsandbox_vpl test.py:\n  variables:\n    TEST_PY_BD: \"sandbox_vpl\"\n    TEST_PY_TEST_SPEC: \"vpl or test_spl\"\n  <<: *buildman_and_testpy_dfn\n\n# Enable tracing and disable LTO, to ensure functions are not elided\nsandbox trace_test.py:\n  variables:\n    TEST_PY_BD: \"sandbox\"\n    BUILD_ENV: \"FTRACE=1 NO_LTO=1\"\n    TEST_PY_TEST_SPEC: \"trace\"\n    OVERRIDE: \"-a CONFIG_TRACE=y -a CONFIG_TRACE_EARLY=y -a CONFIG_TRACE_EARLY_SIZE=0x01000000 -a CONFIG_TRACE_BUFFER_SIZE=0x02000000\"\n  <<: *buildman_and_testpy_dfn\n\nevb-ast2500 test.py:\n  variables:\n    TEST_PY_BD: \"evb-ast2500\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id qemu\"\n  <<: *buildman_and_testpy_dfn\n\nevb-ast2600 test.py:\n  variables:\n    TEST_PY_BD: \"evb-ast2600\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id qemu\"\n  <<: *buildman_and_testpy_dfn\n\nsandbox_flattree test.py:\n  tags:\n    - ${DEFAULT_AMD64_TAG}\n  variables:\n    TEST_PY_BD: \"sandbox_flattree\"\n  <<: *buildman_and_testpy_dfn\n\nvexpress_ca9x4 test.py:\n  variables:\n    TEST_PY_BD: \"vexpress_ca9x4\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id qemu\"\n  <<: *buildman_and_testpy_dfn\n\nintegratorcp_cm926ejs test.py:\n  variables:\n    TEST_PY_BD: \"integratorcp_cm926ejs\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id qemu\"\n  <<: *buildman_and_testpy_dfn\n\nqemu_arm test.py:\n  variables:\n    TEST_PY_BD: \"qemu_arm\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n  <<: *buildman_and_testpy_dfn\n\nqemu_arm64 test.py:\n  variables:\n    TEST_PY_BD: \"qemu_arm64\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n  <<: *buildman_and_testpy_dfn\n\nqemu_arm64_lwip test.py:\n  variables:\n    TEST_PY_BD: \"qemu_arm64_lwip\"\n    TEST_PY_TEST_SPEC: \"test_net_dhcp or test_net_ping or test_net_tftpboot\"\n  <<: *buildman_and_testpy_dfn\n\nqemu_arm_sbsa test.py:\n  variables:\n    TEST_PY_BD: \"qemu-arm-sbsa\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n  <<: *buildman_and_testpy_dfn\n\nqemu_m68k test.py:\n  variables:\n    TEST_PY_BD: \"M5208EVBE\"\n    TEST_PY_ID: \"--id qemu\"\n    TEST_PY_TEST_SPEC: \"not sleep and not efi\"\n    OVERRIDE: \"-a CONFIG_M68K_QEMU=y -a ~CONFIG_MCFTMR\"\n  <<: *buildman_and_testpy_dfn\n\nqemu_malta test.py:\n  variables:\n    TEST_PY_BD: \"malta\"\n    TEST_PY_TEST_SPEC: \"not sleep and not efi\"\n    TEST_PY_ID: \"--id qemu\"\n  <<: *buildman_and_testpy_dfn\n\nqemu_maltael test.py:\n  variables:\n    TEST_PY_BD: \"maltael\"\n    TEST_PY_TEST_SPEC: \"not sleep and not efi\"\n    TEST_PY_ID: \"--id qemu\"\n  <<: *buildman_and_testpy_dfn\n\nqemu_malta64 test.py:\n  variables:\n    TEST_PY_BD: \"malta64\"\n    TEST_PY_TEST_SPEC: \"not sleep and not efi\"\n    TEST_PY_ID: \"--id qemu\"\n  <<: *buildman_and_testpy_dfn\n\nqemu_malta64el test.py:\n  variables:\n    TEST_PY_BD: \"malta64el\"\n    TEST_PY_TEST_SPEC: \"not sleep and not efi\"\n    TEST_PY_ID: \"--id qemu\"\n  <<: *buildman_and_testpy_dfn\n\nqemu-ppce500 test.py:\n  variables:\n    TEST_PY_BD: \"qemu-ppce500\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n  <<: *buildman_and_testpy_dfn\n\nqemu-riscv32 test.py:\n  variables:\n    TEST_PY_BD: \"qemu-riscv32\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n  <<: *buildman_and_testpy_dfn\n\nqemu-riscv64 test.py:\n  variables:\n    TEST_PY_BD: \"qemu-riscv64\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n  <<: *buildman_and_testpy_dfn\n\nqemu-riscv32_spl test.py:\n  variables:\n    TEST_PY_BD: \"qemu-riscv32_spl\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n  <<: *buildman_and_testpy_dfn\n\nqemu-riscv64_spl test.py:\n  variables:\n    TEST_PY_BD: \"qemu-riscv64_spl\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n  <<: *buildman_and_testpy_dfn\n\nqemu-x86 test.py:\n  variables:\n    TEST_PY_BD: \"qemu-x86\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n  <<: *buildman_and_testpy_dfn\n\nqemu-x86_64 test.py:\n  variables:\n    TEST_PY_BD: \"qemu-x86_64\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n  <<: *buildman_and_testpy_dfn\n\nqemu-xtensa-dc233c test.py:\n  variables:\n    TEST_PY_BD: \"qemu-xtensa-dc233c\"\n    TEST_PY_TEST_SPEC: \"not sleep and not efi\"\n  tags:\n    - ${DEFAULT_AMD64_TAG}\n  <<: *buildman_and_testpy_dfn\n\nr2dplus_i82557c test.py:\n  variables:\n    TEST_PY_BD: \"r2dplus\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id i82557c_qemu\"\n  <<: *buildman_and_testpy_dfn\n\nr2dplus_pcnet test.py:\n  variables:\n    TEST_PY_BD: \"r2dplus\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id pcnet_qemu\"\n  <<: *buildman_and_testpy_dfn\n\nr2dplus_rtl8139 test.py:\n  variables:\n    TEST_PY_BD: \"r2dplus\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id rtl8139_qemu\"\n  <<: *buildman_and_testpy_dfn\n\nr2dplus_tulip test.py:\n  variables:\n    TEST_PY_BD: \"r2dplus\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id tulip_qemu\"\n  <<: *buildman_and_testpy_dfn\n\nsifive_unleashed_sdcard test.py:\n  variables:\n    TEST_PY_BD: \"sifive_unleashed\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id sdcard_qemu\"\n  <<: *buildman_and_testpy_dfn\n\nsifive_unleashed_spi-nor test.py:\n  variables:\n    TEST_PY_BD: \"sifive_unleashed\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id spi-nor_qemu\"\n  <<: *buildman_and_testpy_dfn\n\nxilinx_zynq_virt test.py:\n  variables:\n    TEST_PY_BD: \"xilinx_zynq_virt\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id qemu\"\n  <<: *buildman_and_testpy_dfn\n\nxilinx_versal_virt test.py:\n  variables:\n    TEST_PY_BD: \"xilinx_versal_virt\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id qemu\"\n    OVERRIDE: \"-a ~CONFIG_USB_DWC3\"\n  <<: *buildman_and_testpy_dfn\n\nxtfpga test.py:\n  variables:\n    TEST_PY_BD: \"xtfpga\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id qemu\"\n  tags:\n    - ${DEFAULT_AMD64_TAG}\n  <<: *buildman_and_testpy_dfn\n\ncoreboot test.py:\n  variables:\n    TEST_PY_BD: \"coreboot\"\n    TEST_PY_TEST_SPEC: \"not sleep\"\n    TEST_PY_ID: \"--id qemu\"\n  <<: *buildman_and_testpy_dfn\n\n.lab_template: &lab_dfn\n  stage: sjg-lab\n  rules:\n    - if: $SJG_LAB == \"1\"\n      when: always\n    - if: $SJG_LAB != \"1\"\n      when: manual\n      allow_failure: true\n  dependencies: []\n  tags: [ 'lab' ]\n  script:\n    - if [[ -z \"${SJG_LAB}\" ]]; then\n        exit 0;\n      fi\n    # Environment:\n    #   SRC  - source tree\n    #   OUT  - output directory for builds\n    - export SRC=\"$(pwd)\"\n    - export OUT=\"${SRC}/build/${BOARD}\"\n    - export PATH=$PATH:~/bin\n    - export PATH=$PATH:/vid/software/devel/ubtest/u-boot-test-hooks/bin\n\n    # Load it on the device\n    - ret=0\n    - echo \"role ${ROLE}\"\n    - export strategy=\"-s uboot -e off\"\n    - export USE_LABGRID_SJG=1\n    # export verbose=\"-v\"\n    - ${SRC}/test/py/test.py --role ${ROLE} --build-dir \"${OUT}\"\n        --capture=tee-sys -k \"not bootstd\" || ret=$?\n    - U_BOOT_BOARD_IDENTITY=\"${ROLE}\" u-boot-test-release || true\n    - if [[ $ret -ne 0 ]]; then\n        exit $ret;\n      fi\n  artifacts:\n    when: always\n    paths:\n      - \"build/${BOARD}/test-log.html\"\n      - \"build/${BOARD}/multiplexed_log.css\"\n    expire_in: 1 week\n\nrpi3:\n  variables:\n    ROLE: rpi3\n  <<: *lab_dfn\n\nopi_pc:\n  variables:\n    ROLE: opi_pc\n  <<: *lab_dfn\n\npcduino3_nano:\n  variables:\n    ROLE: pcduino3_nano\n  <<: *lab_dfn\n\nsamus:\n  variables:\n    ROLE: samus\n  <<: *lab_dfn\n\nlink:\n  variables:\n    ROLE: link\n  <<: *lab_dfn\n\njerry:\n  variables:\n    ROLE: jerry\n  <<: *lab_dfn\n\nminnowmax:\n  variables:\n    ROLE: minnowmax\n  <<: *lab_dfn\n\nopi_pc2:\n  variables:\n    ROLE: opi_pc2\n  <<: *lab_dfn\n\nbpi:\n  variables:\n    ROLE: bpi\n  <<: *lab_dfn\n\nrpi2:\n  variables:\n    ROLE: rpi2\n  <<: *lab_dfn\n\nbob:\n  variables:\n    ROLE: bob\n  <<: *lab_dfn\n\nff3399:\n  variables:\n    ROLE: ff3399\n  <<: *lab_dfn\n\ncoral:\n  variables:\n    ROLE: coral\n  <<: *lab_dfn\n\nrpi3z:\n  variables:\n    ROLE: rpi3z\n  <<: *lab_dfn\n\nbbb:\n  variables:\n    ROLE: bbb\n  <<: *lab_dfn\n\nkevin:\n  variables:\n    ROLE: kevin\n  <<: *lab_dfn\n\npine64:\n  variables:\n    ROLE: pine64\n  <<: *lab_dfn\n\nc4:\n  variables:\n    ROLE: c4\n  <<: *lab_dfn\n\nrpi4:\n  variables:\n    ROLE: rpi4\n  <<: *lab_dfn\n\nrpi0:\n  variables:\n    ROLE: rpi0\n  <<: *lab_dfn\n\nsnow:\n  variables:\n    ROLE: snow\n  <<: *lab_dfn\n\npcduino3:\n  variables:\n    ROLE: pcduino3\n  <<: *lab_dfn\n\nnyan-big:\n  variables:\n    ROLE: nyan-big\n  <<: *lab_dfn\n\nrpi:\n  variables:\n    ROLE: rpi\n  <<: *lab_dfn\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 8.5361328125,
          "content": "#\n# This list is used by git-shortlog to fix a few botched name translations\n# in the git archive, either because the author's full name was messed up\n# and/or not always written the same way, making contributions from the\n# same person appearing not to be so or badly displayed.\n#\n# This file is also used by scripts/get_maintainer.pl.\n#\n# This file can be modified by hand or updated by the following command:\n#  scripts/mailmapper > tmp; mv tmp .mailmap\n#\n# Entries in this file take one of the following forms:\n# Proper Name <commit@email.xx>\n# <proper@email.xx> <commit@email.xx>\n# Proper Name <proper@email.xx> <commit@email.xx>\n# Proper Name <proper@email.xx> Commit Name <commit@email.xx>\n\nAKASHI Takahiro <akashi.tkhro@gmail.com> <takahiro.akashi@linaro.org>\nAlexander Graf <agraf@csgraf.de> <agraf@suse.de>\nAllen Martin <amartin@nvidia.com>\nAmanda Baze <amanda.baze@amd.com> <nicole.baze@xilinx.com>\nAmit Kumar Mahapatra <amit.kumar-mahapatra@amd.com> <amit.kumar-mahapatra@xilinx.com>\nAndreas Bießmann <andreas.devel@googlemail.com>\nAndreas Bießmann <andreas@biessmann.org>\nAneesh V <aneesh@ti.com>\nAnup Patel <anup@brainfault.org> <anup.patel@wdc.com>\nAnurag Kumar Vulisha <AnuragKumar.Vulisha@amd.com> <anurag.kumar.vulisha@xilinx.com>\nAppana Durga Kedareswara rao <appana.durga.kedareswara.rao@amd.com> <appana.durga.rao@xilinx.com>\nAshok Reddy Soma <ashok.reddy.soma@amd.com> <ashok.reddy.soma@xilinx.com>\nAtish Patra <atishp@atishpatra.org> <atish.patra@wdc.com>\nBharat Kumar Gogada <bharat.kumar.gogada@amd.com> <bharat.kumar.gogada@xilinx.com>\nBharat Kumar Gogada <bharat.kumar.gogada@amd.com> <bharatku@xilinx.com>\nBhargava Sreekantappa Gayathri <bhargava.sreekantappa-gayathri@amd.com> <bhargava.sreekantappa-gayathri@xilinx.com>\nBhupesh Sharma <bhupesh.linux@gmail.com> <bhupesh.sharma@linaro.org>\nBin Meng <bmeng.cn@gmail.com> <bin.meng@windriver.com>\nBoris Brezillon <bbrezillon@kernel.org> <boris.brezillon@bootlin.com>\nBoris Brezillon <bbrezillon@kernel.org> <boris.brezillon@free-electrons.com>\nChristian Kohn <chris.kohn@amd.com> <christian.kohn@xilinx.com>\nDirk Behme <dirk.behme@googlemail.com>\nDurga Challa <durga.challa@amd.com> <vnsl.durga.challa@xilinx.com>\nEugen Hristev <eugen.hristev@linaro.org> <eugen.hristev@microchip.com>\nEugen Hristev <eugen.hristev@linaro.org> <eugen.hristev@collabora.com>\nFabio Estevam <fabio.estevam@nxp.com>\nHarini Katakam <harini.katakam@amd.com> <harini.katakam@xilinx.com>\nHarsha <harsha.harsha@amd.com> <harsha.harsha@xilinx.com>\nHeiko Stuebner <heiko.stuebner@cherry.de> <heiko.stuebner@theobroma-systems.com>\nHeinrich Schuchardt <xypron.glpk@gmx.de> <heinrich.schuchardt@canonical.com>\nHeinrich Schuchardt <xypron.glpk@gmx.de> xypron.glpk@gmx.de <xypron.glpk@gmx.de>\nIbai Erkiaga <ibai.erkiaga-elorza@amd.com> <ibai.erkiaga-elorza@xilinx.com>\nIgor Opaniuk <igor.opaniuk@gmail.com> <igor.opaniuk@linaro.org>\nIgor Opaniuk <igor.opaniuk@gmail.com> <igor.opaniuk@toradex.com>\nIzhar Ameer Shaikh <izhar.ameer.shaikh@amd.com> <izhar.ameer.shaikh@xilinx.com>\nJagan Teki <402jagan@gmail.com>\nJagan Teki <jaganna@gmail.com>\nJagan Teki <jaganna@xilinx.com>\nJagan Teki <jagannadh.teki@gmail.com>\nJagan Teki <jagannadha.sutradharudu-teki@xilinx.com>\nJakob Unterwurzacher <jakob.unterwurzacher@cherry.de> <jakob.unterwurzacher@theobroma-systems.com>\nJay Buddhabhatti <jay.buddhabhatti@amd.com> <jay.buddhabhatti@xilinx.com>\nJernej Skrabec <jernej.skrabec@gmail.com> <jernej.skrabec@siol.net>\nJohn Linn <john.linn@amd.com> <john.linn@xilinx.com>\nJyotheeswar Reddy Mutthareddyvari <jyotheeswar.reddy.mutthareddyvari@amd.com> <jyothee@xilinx.com>\nJyotheeswar Reddy Mutthareddyvari <jyotheeswar.reddy.mutthareddyvari@amd.com> <jyotheeswar.reddy.mutthareddyvari@xilinx.com>\nKalyani Akula <kalyani.akula@amd.com> <kalyani.akula@xilinx.com>\nKlaus Goger <klaus.goger@cherry.de> <klaus.goger@theobroma-systems.com>\nMasahisa Kojima <kojima.masahisa@socionext.com> <masahisa.kojima@linaro.org>\nLove Kumar <love.kumar@amd.com> <love.kumar@xilinx.com>\nLukasz Majewski <lukma@denx.de>\nMarek Behún <kabel@kernel.org> <marek.behun@nic.cz>\nMarek Behún <kabel@kernel.org> Marek Behun <marek.behun@nic.cz>\nMarek Vasut <marex@denx.de> <marek.vasut+renesas@gmail.com>\nMarek Vasut <marex@denx.de> <marek.vasut@gmail.com>\nMarek Vasut <marex@denx.de> <marex at denx.de>\nMarkus Klotzbuecher <mk@denx.de>\nMasahiro Yamada <masahiroy@kernel.org> <yamada.masahiro@socionext.com>\nMasahiro Yamada <masahiroy@kernel.org> <yamada.m@jp.panasonic.com>\nMichal Simek <michal.simek@amd.com> <Monstr@seznam.cz>\nMichal Simek <michal.simek@amd.com> <michal.simek@xilinx.com>\nMichal Simek <michal.simek@amd.com> <monstr@monstr.eu>\nMichal Simek <michal.simek@amd.com> <root@monstr.eu>\nMirza <Taimoor_Mirza@mentor.com>\nMounika Grace Akula <mounika.akula@amd.com> <mounika.grace.akula@xilinx.com>\nMubin Usman Sayyed <mubin.sayyed@amd.com> <mubin.usman.sayyed@xilinx.com>\nNathalie Chan King Choy <nathalie.chan-king-choy@amd.com> <nathalie.chan-king-choy@xilinx.com>\nNathalie Chan King Choy <nathalie.chan-king-choy@amd.com> <nathalie@xilinx.com>\nNava kishore Manne <nava.kishore.manne@amd.com> <nava.manne@xilinx.com>\nNeal Frager <neal.frager@amd.com> <neal.frager@xilinx.com>\nNeil Armstrong <neil.armstrong@linaro.org> <narmstrong@baylibre.com>\nNicolas Saenz Julienne <nsaenz@kernel.org> <nsaenzjulienne@suse.de>\nThis contributor prefers not to receive mails <noreply@example.com> <pali@kernel.org>\nThis contributor prefers not to receive mails <noreply@example.com> <pali.rohar@gmail.com>\nPadmarao Begari <padmarao.begari@amd.com> <padmarao.begari@microchip.com>\nPatrice Chotard <patrice.chotard@foss.st.com> <patrice.chotard@st.com>\nPatrick Delaunay <patrick.delaunay@foss.st.com> <patrick.delaunay@st.com>\nPaul Burton <paul.burton@mips.com> <paul.burton@imgtec.com>\nPhilipp Tomsich <philipp.tomsich@vrull.eu> <philipp.tomsich@theobroma-systems.com>\nPiyush Mehta <piyush.mehta@amd.com> <piyush.mehta@xilinx.com>\nPrabhakar Kushwaha <prabhakar@freescale.com>\nPunnaiah Choudary Kalluri <punnaiah.choudary.kalluri@amd.com> <punnaiah.choudary.kalluri@xilinx.com>\nQuentin Schulz <quentin.schulz@cherry.de> <quentin.schulz@theobroma-systems.com>\nRadhey Shyam Pandey <radhey.shyam.pandey@amd.com> <radhey.shyam.pandey@xilinx.com>\nRajeshwari Shinde <rajeshwari.s@samsung.com>\nRaju Kumar Pothuraju <rajukumar.pothuraju@amd.com> <raju.kumar-pothuraju@xilinx.com>\nRavi Patel <ravi.patel@amd.com> <ravi.patel@xilinx.com>\nRicardo Ribalda <ricardo@ribalda.com> <ricardo.ribalda@gmail.com>\nRicardo Ribalda <ricardo@ribalda.com> <ricardo.ribalda@uam.es>\nRohit Visavalia <rohit.visavalia@amd.com> <rohit.visavalia@xilinx.com>\nRuchika Gupta <ruchika.gupta@nxp.com> <ruchika.gupta@freescale.com>\nSaeed Nowshadi <saeed.nowshadi@amd.com> <saeed.nowshadi@xilinx.com>\nSai Krishna Potthuri <sai.krishna.potthuri@amd.com> <lakshmi.sai.krishna.potthuri@xilinx.com>\nSai Pavan Boddu <sai.pavan.boddu@amd.com> <sai.pavan.boddu@xilinx.com>\nSandeep Gundlupet Raju <sandeep.gundlupet-raju@amd.com> <sandeep.gundlupet-raju@xilinx.com>\nSandeep Paulraj <s-paulraj@ti.com>\nSandeep Reddy Ghanapuram <sandeep.reddy-ghanapuram@amd.com> <sandeep.reddy-ghanapuram@xilinx.com>\nShaohui Xie <Shaohui.Xie@freescale.com>\nShravya Kumbham <shravya.kumbham@amd.com> <shravya.kumbham@xilinx.com>\nShubhrajyoti Datta <shubhrajyoti.datta@amd.com> <shubhrajyoti.datta@xilinx.com>\nSiva Durga Prasad Paladugu <siva.durga.prasad.paladugu@amd.com> <siva.durga.paladugu@xilinx.com>\nSiva Durga Prasad Paladugu <siva.durga.prasad.paladugu@amd.com> <sivadur@xilinx.com>\nSrinivas Goud <srinivas.goud@amd.com> <srinivas.goud@xilinx.com>\nSrinivas Neeli <srinivas.neeli@amd.com> <srinivas.neeli@xilinx.com>\nStefan Roese <sr@denx.de> <stroese>\nStefano Babic <sbabic@denx.de>\nStefano Stabellini <stefano.stabellini@amd.com> <stefano.stabellini@xilinx.com>\nTom Rini <trini@konsulko.com> <trini@ti.com>\nTomas Thoresen <tomas.thoresen@amd.com> <tomast@xilinx.com>\nTsiChung Liew <Tsi-Chung.Liew@freescale.com>\nVaralaxmi Bingi <varalaxmi.bingi@amd.com> <varalaxmi.bingi@xilinx.com>\nVenkatesh Yadav Abbarapu <venkatesh.abbarapu@amd.com> <venkatesh.abbarapu@xilinx.com>\nVikhyat Goyal <vikhyat.goyal@amd.com> <vikhyat.goyal@xilinx.com>\nVishal Patel <vishal.patel@amd.com> <vishal.patel@xilinx.com>\nWolfgang Denk <wd@denx.de> <wd@atlas.denx.de>\nWolfgang Denk <wd@denx.de> <wd@castor.denx.de>\nWolfgang Denk <wd@denx.de> <wd@fifi.denx.de>\nWolfgang Denk <wd@denx.de> <wd@nyx.(none)>\nWolfgang Denk <wd@denx.de> <wd@nyx.denx.de>\nWolfgang Denk <wd@denx.de> <wd@pollux.(none)>\nWolfgang Denk <wd@denx.de> <wd@pollux.denx.de>\nWolfgang Denk <wd@denx.de> <wd@xpert.denx.de>\nWolfgang Denk <wd@denx.de> <wdenk>\nYork Sun <york.sun@nxp.com>\nYork Sun <yorksun@freescale.com>\nŁukasz Majewski <l.majewski@samsung.com>\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.48046875,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\nbuild:\n  os: \"ubuntu-24.04\"\n  apt_packages:\n    - python3-six\n  tools:\n    python: \"3.12\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: doc/conf.py\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats: []\n\npython:\n  install:\n    - requirements: doc/sphinx/requirements.txt\n"
        },
        {
          "name": "Kbuild",
          "type": "blob",
          "size": 0.7646484375,
          "content": "# SPDX-License-Identifier: GPL-2.0\n#\n# Kbuild for top-level directory of U-Boot\n\n#####\n# Generate generic-asm-offsets.h\n\ngeneric-offsets-file := include/generated/generic-asm-offsets.h\n\nalways  := $(generic-offsets-file)\ntargets := lib/asm-offsets.s\n\nCFLAGS_REMOVE_asm-offsets.o := $(LTO_CFLAGS)\n\n$(obj)/$(generic-offsets-file): $(obj)/lib/asm-offsets.s FORCE\n\t$(call filechk,offsets,__GENERIC_ASM_OFFSETS_H__)\n\n#####\n# Generate asm-offsets.h\n\nifneq ($(wildcard $(srctree)/arch/$(ARCH)/lib/asm-offsets.c),)\noffsets-file := include/generated/asm-offsets.h\nendif\n\nalways  += $(offsets-file)\ntargets += arch/$(ARCH)/lib/asm-offsets.s\n\nCFLAGS_asm-offsets.o := -DDO_DEPS_ONLY\n\n$(obj)/$(offsets-file): $(obj)/arch/$(ARCH)/lib/asm-offsets.s FORCE\n\t$(call filechk,offsets,__ASM_OFFSETS_H__)\n"
        },
        {
          "name": "Kconfig",
          "type": "blob",
          "size": 25.6669921875,
          "content": "#\n# For a description of the syntax of this configuration file,\n# see the file Documentation/kbuild/kconfig-language.rst in the\n# Linux kernel source tree.\n#\nmainmenu \"U-Boot $(UBOOTVERSION) Configuration\"\n\ncomment \"Compiler: $(CC_VERSION_TEXT)\"\n\nsource \"scripts/Kconfig.include\"\n\n# Allow defaults in arch-specific code to override any given here\nsource \"arch/Kconfig\"\n\nmenu \"General setup\"\n\nconfig BROKEN\n\tbool\n\thelp\n\t  This option cannot be enabled. It is used as dependency\n\t  for broken and incomplete features.\n\nconfig DEPRECATED\n\tbool\n\thelp\n\t  This option cannot be enabled.  It it used as a dependency for\n\t  code that relies on deprecated features that will be removed and\n\t  the conversion deadline has passed.\n\nconfig LOCALVERSION\n\tstring \"Local version - append to U-Boot release\"\n\thelp\n\t  Append an extra string to the end of your U-Boot version.\n\t  This will show up in your boot log, for example.\n\t  The string you set here will be appended after the contents of\n\t  any files with a filename matching localversion* in your\n\t  object and source tree, in that order.  Your total string can\n\t  be a maximum of 64 characters.\n\nconfig LOCALVERSION_AUTO\n\tbool \"Automatically append version information to the version string\"\n\tdefault y\n\thelp\n\t  This will try to automatically determine if the current tree is a\n\t  release tree by looking for Git tags that belong to the current\n\t  top of tree revision.\n\n\t  A string of the format -gxxxxxxxx will be added to the localversion\n\t  if a Git-based tree is found.  The string generated by this will be\n\t  appended after any matching localversion* files, and after the value\n\t  set in CONFIG_LOCALVERSION.\n\n\t  (The actual string used here is the first eight characters produced\n\t  by running the command:\n\n\t    $ git rev-parse --verify HEAD\n\n\t  which is done within the script \"scripts/setlocalversion\".)\n\nconfig CC_IS_GCC\n\tdef_bool $(success,$(CC) --version | head -n 1 | grep -q gcc)\n\nconfig GCC_VERSION\n\tint\n\tdefault $(shell,$(srctree)/scripts/gcc-version.sh -p $(CC) | sed 's/^0*//') if CC_IS_GCC\n\tdefault 0\n\nconfig CC_IS_CLANG\n\tdef_bool $(success,$(CC) --version | head -n 1 | grep -q clang)\n\nconfig CLANG_VERSION\n\tint\n\tdefault $(shell,$(srctree)/scripts/clang-version.sh $(CC))\n\nchoice\n\tprompt \"Optimization level\"\n\tdefault CC_OPTIMIZE_FOR_SIZE\n\nconfig CC_OPTIMIZE_FOR_SIZE\n\tbool \"Optimize for size\"\n\thelp\n\t  Enabling this option will pass \"-Os\" to gcc, resulting in a smaller\n\t  U-Boot image.\n\n\t  This option is enabled by default for U-Boot.\n\nconfig CC_OPTIMIZE_FOR_SPEED\n\tbool \"Optimize for speed\"\n\thelp\n\t  Enabling this option will pass \"-O2\" to gcc, resulting in a faster\n\t  U-Boot image.\n\nconfig CC_OPTIMIZE_FOR_DEBUG\n\tbool \"Optimize for debugging\"\n\thelp\n\t  Enabling this option will pass \"-Og\" to gcc, enabling optimizations\n\t  which don't interfere with debugging.\n\nendchoice\n\nconfig OPTIMIZE_INLINING\n\tbool \"Allow compiler to uninline functions marked 'inline' in full U-Boot\"\n\thelp\n\t  This option determines if U-Boot forces gcc to inline the functions\n\t  developers have marked 'inline'. Doing so takes away freedom from gcc to\n\t  do what it thinks is best, which is desirable in some cases for size\n\t  reasons.\n\nconfig SPL_OPTIMIZE_INLINING\n\tbool \"Allow compiler to uninline functions marked 'inline' in SPL\"\n\tdepends on SPL\n\thelp\n\t  This option determines if U-Boot forces gcc to inline the functions\n\t  developers have marked 'inline'. Doing so takes away freedom from gcc to\n\t  do what it thinks is best, which is desirable in some cases for size\n\t  reasons.\n\nconfig ARCH_SUPPORTS_LTO\n\tbool\n\nconfig LTO\n\tbool \"Enable Link Time Optimizations\"\n\tdepends on ARCH_SUPPORTS_LTO\n\thelp\n\t  This option enables Link Time Optimization (LTO), a mechanism which\n\t  allows the compiler to optimize between different compilation units.\n\n\t  This can optimize away dead code paths, resulting in smaller binary\n\t  size (if CC_OPTIMIZE_FOR_SIZE is enabled).\n\n\t  This option is not available for every architecture and may\n\t  introduce bugs.\n\n\t  Currently, when compiling with GCC, due to a weird bug regarding\n\t  jobserver, the final linking will not respect make's --jobs argument.\n\t  Instead all available processors will be used (as reported by the\n\t  nproc command).\n\n\t  If unsure, say n.\n\nconfig TPL_OPTIMIZE_INLINING\n\tbool \"Allow compiler to uninline functions marked 'inline' in TPL\"\n\tdepends on TPL\n\thelp\n\t  This option determines if U-Boot forces gcc to inline the functions\n\t  developers have marked 'inline'. Doing so takes away freedom from gcc to\n\t  do what it thinks is best, which is desirable in some cases for size\n\t  reasons.\n\nconfig CC_COVERAGE\n\tbool \"Enable code coverage analysis\"\n\tdepends on SANDBOX\n\thelp\n\t  Enabling this option will pass \"--coverage\" to gcc to compile\n\t  and link code instrumented for coverage analysis.\n\nconfig ASAN\n\tbool \"Enable AddressSanitizer\"\n\tdepends on SANDBOX\n\thelp\n\t  Enables AddressSanitizer to discover out-of-bounds accesses,\n\t  use-after-free, double-free and memory leaks.\n\nconfig FUZZ\n\tbool \"Enable fuzzing\"\n\tdepends on CC_IS_CLANG\n\tdepends on DM_FUZZING_ENGINE\n\tselect ASAN\n\thelp\n\t  Enables the fuzzing infrastructure to generate fuzzing data and run\n          fuzz tests.\n\nconfig CC_HAS_ASM_INLINE\n\tdef_bool $(success,echo 'void foo(void) { asm inline (\"\"); }' | $(CC) -x c - -c -o /dev/null)\n\nconfig XEN\n\tbool \"Select U-Boot be run as a bootloader for XEN Virtual Machine\"\n\tdepends on ARM64\n\tselect SSCANF\n\thelp\n\t  Enabling this option will make U-Boot be run as a bootloader\n\t  for XEN [1] Virtual Machine.\n\n\t  Xen is a virtual machine monitor (VMM) or a type-1 hypervisor with support\n\t  for para-virtualization. Xen can organize the safe execution of several\n\t  virtual machines on the same physical system with performance close to\n\t  native. It is used as the basis for a number of different commercial and\n\t  open source applications, such as: server virtualization, Infrastructure\n\t  as a Service (IaaS), desktop virtualization, security applications,\n\t  embedded and hardware appliances.\n\t  Xen has a special VM called Domain-0 that runs the Dom0 kernel and allows\n\t  Xen to use the device drivers for the Domain-0 kernel by default.\n\n\t  [1] - https://xenproject.org/\n\nconfig ENV_VARS_UBOOT_CONFIG\n\tbool \"Add arch, board, vendor and soc variables to default environment\"\n\thelp\n\t  Define this in order to add variables describing the\n\t  U-Boot build configuration to the default environment.\n\t  These will be named arch, cpu, board, vendor, and soc.\n\t  Enabling this option will cause the following to be defined:\n\t  - CONFIG_SYS_ARCH\n\t  - CONFIG_SYS_CPU\n\t  - CONFIG_SYS_BOARD\n\t  - CONFIG_SYS_VENDOR\n\t  - CONFIG_SYS_SOC\n\nconfig NR_DRAM_BANKS\n\tint \"Number of DRAM banks\"\n\tdefault 1 if ARCH_SC5XX || ARCH_SUNXI || ARCH_OWL\n\tdefault 2 if OMAP34XX\n\tdefault 4\n\thelp\n\t  This defines the number of DRAM banks.\n\nconfig SYS_BOOT_GET_CMDLINE\n\tbool \"Enable kernel command line setup\"\n\thelp\n\t  Enables allocating and saving kernel cmdline in space between\n\t  \"bootm_low\" and \"bootm_low\" + BOOTMAPSZ.\n\nconfig SYS_BARGSIZE\n\tint \"Size of kernel command line buffer in bytes\"\n\tdepends on SYS_BOOT_GET_CMDLINE\n\tdefault 512\n\thelp\n\t  Buffer size for Boot Arguments which are passed to the application\n\t  (usually a Linux kernel) when it is booted\n\nconfig SYS_BOOT_GET_KBD\n\tbool \"Enable kernel board information setup\"\n\thelp\n\t  Enables allocating and saving a kernel copy of the bd_info in\n\t  space between \"bootm_low\" and \"bootm_low\" + BOOTMAPSZ.\n\nconfig HAS_CUSTOM_SYS_INIT_SP_ADDR\n\tbool \"Use a custom location for the initial stack pointer address\"\n\tdepends on ARC || (ARM && !INIT_SP_RELATIVE) || MIPS || PPC || RISCV\n\tdefault y if OMAP34XX || AM33XX || AM43XX || DRA7XX\n\tdefault y if TFABOOT\n\thelp\n\t  Typically, we use an initial stack pointer address that is calculated\n\t  by taking the statically defined CFG_SYS_INIT_RAM_ADDR, adding the\n\t  statically defined CFG_SYS_INIT_RAM_SIZE and then subtracting the\n\t  build-time constant of GENERATED_GBL_DATA_SIZE.  On MIPS a different\n\t  but statica calculation is performed.  However, some platforms will\n\t  take a different approach.  Say Y here to define the address statically\n\t  instead.\n\nconfig CUSTOM_SYS_INIT_SP_ADDR\n\thex \"Static location for the initial stack pointer\"\n\tdepends on HAS_CUSTOM_SYS_INIT_SP_ADDR\n\tdefault 0x4020ff00 if OMAP34XX\n\tdefault 0x4030ff00 if AM33XX\n\tdefault 0x4033ff00 if AM43XX\n\tdefault 0x4037ff00 if DRA7XX\n\tdefault TEXT_BASE if TFABOOT\n\nconfig SYS_MALLOC_F\n\tbool \"Enable malloc() pool before relocation\"\n\tdefault y if DM\n\n\thelp\n\t  Before relocation, memory is very limited on many platforms. Still,\n\t  we can provide a small malloc() pool if needed. Driver model in\n\t  particular needs this to operate, so that it can allocate the\n\t  initial serial device and any others that are needed.\n\nconfig SYS_MALLOC_F_LEN\n\thex \"Size of malloc() pool before relocation\"\n\tdepends on SYS_MALLOC_F\n\tdefault 0x400 if M68K || PPC || ROCKCHIP_PX30 || ROCKCHIP_RK3036 || \\\n\t\t\t ROCKCHIP_RV1108\n\tdefault 0x600 if ARCH_ZYNQMP_R5 || ARCH_ZYNQMP\n\tdefault 0x800 if ARCH_ZYNQ || ROCKCHIP_RK3128 || ROCKCHIP_RK3188 || \\\n\t\t\t ROCKCHIP_RK322X || X86\n\tdefault 0x1000 if ARCH_MESON || ARCH_BMIPS || ARCH_MTMIPS\n\tdefault 0x1800 if ARCH_TEGRA\n\tdefault 0x4000 if SANDBOX || RISCV || ARCH_APPLE || ROCKCHIP_RK3368 || \\\n\t\t\t  ROCKCHIP_RK3399\n\tdefault 0x8000 if RCAR_GEN3\n\tdefault 0x10000 if ARCH_IMX8 || ARCH_IMX8M\n\tdefault 0x2000\n\thelp\n\t\tSize of the malloc() pool for use before relocation. If\n\t\tthis is defined, then a very simple malloc() implementation\n\t\twill become available before relocation. The address is just\n\t\tbelow the global data, and the stack is moved down to make\n\t\tspace.\n\n\t\tThis feature allocates regions with increasing addresses\n\t\twithin the region. calloc() is supported, but realloc()\n\t\tis not available. free() is supported but does nothing.\n\t\tThe memory will be freed (or in fact just forgotten) when\n\t\tU-Boot relocates itself.\n\nconfig SYS_MALLOC_LEN\n\thex \"Define memory for Dynamic allocation\"\n\tdefault 0x4000000 if SANDBOX\n\tdefault 0x2000000 if ARCH_ROCKCHIP || ARCH_OMAP2PLUS || ARCH_MESON\n\tdefault 0x200000 if ARCH_BMIPS || X86\n\tdefault 0x4020000 if SUNXI_MINIMUM_DRAM_MB >= 256\n\tdefault 0x220000 if SUNXI_MINIMUM_DRAM_MB >= 64\n\tdefault 0x120000 if SUNXI_MINIMUM_DRAM_MB >= 32\n\tdefault 0x400000\n\thelp\n\t  This defines memory to be allocated for Dynamic allocation\n\t  TODO: Use for other architectures\n\nconfig SPL_SYS_MALLOC_F\n\tbool \"Enable malloc() pool in SPL\"\n\tdepends on SPL_FRAMEWORK && SYS_MALLOC_F && SPL\n\tdefault y\n\thelp\n\t  In SPL memory is very limited on many platforms. Still,\n\t  we can provide a small malloc() pool if needed. Driver model in\n\t  particular needs this to operate, so that it can allocate the\n\t  initial serial device and any others that are needed.\n\nconfig SPL_SYS_MALLOC_F_LEN\n\thex \"Size of malloc() pool in SPL\"\n\tdepends on SPL_SYS_MALLOC_F\n\tdefault 0x2800 if RCAR_GEN3\n\tdefault 0x2000 if IMX8MQ\n\tdefault SYS_MALLOC_F_LEN\n\thelp\n\t  Sets the size of the malloc() pool in SPL. This is used for\n\t  driver model and other features, which must allocate memory for\n\t  data structures.\n\n\t  It is possible to enable CFG_SPL_SYS_MALLOC_START to start a new\n\t  malloc() region in SDRAM once it is inited.\n\nconfig TPL_SYS_MALLOC_F\n\tbool \"Enable malloc() pool in TPL\"\n\tdepends on SYS_MALLOC_F && TPL\n\tdefault y if SPL_SYS_MALLOC_F\n\thelp\n\t  In TPL memory is very limited on many platforms. Still,\n\t  we can provide a small malloc() pool if needed. Driver model in\n\t  particular needs this to operate, so that it can allocate the\n\t  initial serial device and any others that are needed.\n\nconfig TPL_SYS_MALLOC_F_LEN\n\thex \"Size of malloc() pool in TPL\"\n\tdepends on TPL_SYS_MALLOC_F\n\tdefault SPL_SYS_MALLOC_F_LEN\n\thelp\n\t  Sets the size of the malloc() pool in TPL. This is used for\n\t  driver model and other features, which must allocate memory for\n\t  data structures.\n\nconfig VALGRIND\n\tbool \"Inform valgrind about memory allocations\"\n\tdepends on !RISCV\n\thelp\n\t  Valgrind is an instrumentation framework for building dynamic analysis\n\t  tools. In particular, it may be used to detect memory management bugs\n\t  in U-Boot. It relies on knowing when heap blocks are allocated in\n\t  order to give accurate results. This happens automatically for\n\t  standard allocator functions provided by the host OS. However, this\n\t  doesn't automatically happen for U-Boot's malloc implementation.\n\n\t  Enable this option to annotate U-Boot's malloc implementation so that\n\t  it can be handled accurately by Valgrind. If you aren't planning on\n\t  using valgrind to debug U-Boot, say 'n'.\n\nconfig VPL_SYS_MALLOC_F\n\tbool \"Enable malloc() pool in VPL\"\n\tdepends on SYS_MALLOC_F && VPL\n\tdefault y if SPL_SYS_MALLOC_F\n\thelp\n\t  In VPL memory is very limited on many platforms. Still,\n\t  we can provide a small malloc() pool if needed. Driver model in\n\t  particular needs this to operate, so that it can allocate the\n\t  initial serial device and any others that are needed.\n\nconfig VPL_SYS_MALLOC_F_LEN\n\thex \"Size of malloc() pool in VPL before relocation\"\n\tdepends on VPL_SYS_MALLOC_F\n\tdefault SPL_SYS_MALLOC_F_LEN\n\thelp\n\t  Sets the size of the malloc() pool in VPL. This is used for\n\t  driver model and other features, which must allocate memory for\n\t  data structures.\n\nmenuconfig EXPERT\n\tbool \"Configure standard U-Boot features (expert users)\"\n\tdefault y\n\thelp\n\t  This option allows certain base U-Boot options and settings\n\t  to be disabled or tweaked. This is for specialized\n\t  environments which can tolerate a \"non-standard\" U-Boot.\n\t  Use this only if you really know what you are doing.\n\nif EXPERT\n\tconfig SYS_MALLOC_CLEAR_ON_INIT\n\tbool \"Init with zeros the memory reserved for malloc (slow)\"\n\tdefault y\n\thelp\n\t  This setting is enabled by default. The reserved malloc\n\t  memory is initialized with zeros, so first malloc calls\n\t  will return the pointer to the zeroed memory. But this\n\t  slows the boot time.\n\n\t  It is recommended to disable it, when CONFIG_SYS_MALLOC_LEN\n\t  value, has more than few MiB, e.g. when uses bzip2 or bmp logo.\n\t  Then the boot time can be significantly reduced.\n\t  Warning:\n\t  When disabling this, please check if malloc calls, maybe\n\t  should be replaced by calloc - if one expects zeroed memory.\n\nconfig SPL_SYS_MALLOC_CLEAR_ON_INIT\n\tbool \"Init with zeros the memory reserved for malloc (slow) in SPL\"\n\tdepends on SPL\n\tdefault SYS_MALLOC_CLEAR_ON_INIT\n\thelp\n\t  Same as SYS_MALLOC_CLEAR_ON_INIT, but for SPL. It's possible to\n\t  Enable it without SYS_MALLOC_CLEAR_ON_INIT. It's useful for boards\n\t  that must have particular memory regions zero'ed before first use.\n\t  If SYS_SPL_MALLOC_START is configured to be in such region, this\n\t  option should be enabled.\n\nconfig SYS_MALLOC_DEFAULT_TO_INIT\n\tbool \"Default malloc to init while reserving the memory for it\"\n\thelp\n\t  It may happen that one needs to move the dynamic allocation\n\t  from one to another memory range, eg. when moving the malloc\n\t  from the limited static to a potentially large dynamic (DDR)\n\t  memory.\n\n\t  If so then on top of setting the updated memory aside one\n\t  needs to bring the malloc init.\n\n\t  If such a scenario is sought choose yes.\n\nconfig TOOLS_DEBUG\n\tbool \"Enable debug information for tools\"\n\thelp\n\t  Enable generation of debug information for tools such as mkimage.\n\t  This can be used for debugging purposes. With debug information\n\t  it is possible to set breakpoints on particular lines, single-step\n\t  debug through the source code, etc.\n\nendif # EXPERT\n\nconfig PHYS_64BIT\n\tbool \"64bit physical address support\"\n\tselect FDT_64BIT\n\thelp\n\t  Say Y here to support 64bit physical memory address.\n\t  This can be used not only for 64bit SoCs, but also for\n\t  large physical address extension on 32bit SoCs.\n\nconfig FDT_64BIT\n\tbool \"64bit fdt address support\"\n\thelp\n\t  Say Y here to support 64bit fdt addresses.\n\t  This can be used not only for 64bit SoCs, but also\n\t  for large address extensions on 32bit SoCs.\n\nconfig HAS_ROM\n\tbool\n\tselect BINMAN\n\thelp\n\t  Enables building of a u-boot.rom target. This collects U-Boot and\n\t  any necessary binary blobs.\n\nconfig SPL_IMAGE\n\tstring \"SPL image used in the combined SPL+U-Boot image\"\n\tdefault \"spl/boot.bin\" if ARCH_AT91 && SPL_NAND_SUPPORT\n\tdefault \"spl/u-boot-spl.bin\"\n\tdepends on SPL\n\thelp\n\t  Select the SPL build target that shall be generated by the SPL\n\t  build process (default spl/u-boot-spl.bin). This image will be\n\t  used to generate a combined image with SPL and main U-Boot\n\t  proper as one single image.\n\nconfig REMAKE_ELF\n\tbool \"Recreate an ELF image from raw U-Boot binary\"\n\thelp\n\t  Enable this to recreate an ELF image (u-boot.elf) from the raw\n\t  U-Boot binary (u-boot.bin), which may already have been statically\n\t  relocated and may already have a device-tree appended to it.\n\nconfig BUILD_TARGET\n\tstring \"Build target special images\"\n\tdefault \"u-boot-elf.srec\" if RCAR_64\n\tdefault \"u-boot-with-spl.bin\" if ARCH_AT91 && SPL_NAND_SUPPORT\n\tdefault \"u-boot-with-spl.bin\" if MPC85xx && !E500MC && !E5500 && !E6500 && SPL\n\tdefault \"u-boot-with-spl.imx\" if ARCH_MX6 && SPL\n\tdefault \"u-boot-with-spl.kwb\" if ARMADA_32BIT && SPL\n\tdefault \"u-boot-with-spl.sfp\" if TARGET_SOCFPGA_ARRIA10\n\tdefault \"u-boot-with-spl.sfp\" if TARGET_SOCFPGA_GEN5\n\tdefault \"u-boot.itb\" if !BINMAN && SPL_LOAD_FIT && (ARCH_ROCKCHIP || \\\n\t\t\t\tRISCV || ARCH_ZYNQMP)\n\tdefault \"u-boot.kwb\" if (ARCH_KIRKWOOD || ARMADA_32BIT) && !SPL\n\thelp\n\t  Some SoCs need special image types (e.g. U-Boot binary\n\t  with a special header) as build targets. By defining\n\t  CONFIG_BUILD_TARGET in the SoC / board header, this\n\t  special image will be automatically built upon calling\n\t  make / buildman.\n\nconfig HAS_BOARD_SIZE_LIMIT\n\tbool \"Define a maximum size for the U-Boot image\"\n\tdefault y if RCAR_32 || RCAR_64\n\thelp\n\t  In some cases, we need to enforce a hard limit on how big the U-Boot\n\t  image itself can be.\n\nconfig BOARD_SIZE_LIMIT\n\tint \"Maximum size of the U-Boot image in bytes\"\n\tdefault 524288 if RCAR_32\n\tdefault 1048576 if RCAR_64\n\tdepends on HAS_BOARD_SIZE_LIMIT\n\thelp\n\t  Maximum size of the U-Boot image. When defined, the build system\n\t  checks that the actual size does not exceed it.  This does not\n\t  include SPL nor TPL, on platforms that use that functionality, they\n\t  have a separate option to restict size.\n\nconfig SYS_CUSTOM_LDSCRIPT\n\tbool \"Use a custom location for the U-Boot linker script\"\n\thelp\n\t  Normally when linking U-Boot we will look in the board directory,\n\t  the CPU directory and finally the \"cpu\" directory of the architecture\n\t  for the ile \"u-boot.lds\" and use that as our linker.  However, in\n\t  some cases we need to provide a different linker script.  To do so,\n\t  enable this option and then provide the location under\n\t  CONFIG_SYS_LDSCRIPT.\n\nconfig SYS_LDSCRIPT\n\tdepends on SYS_CUSTOM_LDSCRIPT\n\tstring \"Custom ldscript location\"\n\thelp\n\t  Path within the source tree to the linker script to use for the\n\t  main U-Boot binary.\n\nconfig SYS_LOAD_ADDR\n\thex \"Address in memory to use by default\"\n\tdefault 0x01000000 if ARCH_SOCFPGA\n\tdefault 0x02000000 if PPC || X86\n\tdefault 0x81000000 if MACH_SUNIV\n\tdefault 0x22000000 if MACH_SUN9I\n\tdefault 0x42000000 if ARCH_SUNXI\n\tdefault 0x82000000 if ARCH_KEYSTONE || ARCH_OMAP2PLUS || ARCH_K3\n\tdefault 0x82000000 if ARCH_MX6 && (MX6SL || MX6SLL  || MX6SX || MX6UL || MX6ULL)\n\tdefault 0x12000000 if ARCH_MX6 && !(MX6SL || MX6SLL  || MX6SX || MX6UL || MX6ULL)\n\tdefault 0x80800000 if ARCH_MX7\n\tdefault 0x90000000 if FSL_LSCH2 || FSL_LSCH3\n\tdefault 0x0 if ARCH_SC5XX\n\thelp\n\t  Address in memory to use as the default safe load address.\n\nconfig ERR_PTR_OFFSET\n\thex\n\tdefault 0x0\n\thelp\n\t  Some U-Boot pointers have redundant information, so we can use a\n\t  scheme where we can return either an error code or a pointer with the\n\t  same return value. The default implementation just casts the pointer\n\t  to a number, however, this may fail on platforms where the end of the\n\t  address range is used for valid pointers (e.g. 0xffffff00 is a valid\n\t  heap pointer in socfpga SPL).\n\t  For such platforms, this value provides an upper range of those error\n\t  pointer values - up to 'MAX_ERRNO' bytes below this value must be\n\t  unused/invalid addresses.\n\nconfig PLATFORM_ELFENTRY\n\tstring\n\tdefault \"__start\" if MIPS\n\tdefault \"_start\"\n\nconfig STACK_SIZE\n\thex \"Define max stack size that can be used by U-Boot\"\n\tdefault 0x4000000 if ARCH_VERSAL_NET || ARCH_VERSAL || ARCH_ZYNQMP\n\tdefault 0x200000 if MICROBLAZE\n\tdefault 0x4000 if ARCH_STM32\n\tdefault 0x1000000\n\thelp\n\t  Define Max stack size that can be used by U-Boot. This value is used\n\t  by the UEFI sub-system. On some boards initrd_high is calculated as\n\t  base stack pointer minus this stack size.\n\nconfig SYS_MEM_TOP_HIDE\n\thex \"Exclude some memory from U-Boot / OS information\"\n\tdefault 0x0\n\thelp\n\t  If set, this specified memory area will get subtracted from the top\n\t  (end) of RAM and won't get \"touched\" at all by U-Boot. By fixing up\n\t  gd->ram_size the OS / next stage should gets passed the now\n\t  \"corrected\" memory size and won't touch it either.\n\t  WARNING: Please make sure that this value is a multiple of the OS\n\t  page size.\n\nconfig SYS_MONITOR_LEN\n\tint \"Maximum size in bytes reserved for U-Boot in memory\"\n\tdefault 1048576 if X86\n\tdefault 262144 if OMAP34XX\n\tdefault 786432 if ARCH_SUNXI\n\tdefault 0\n\thelp\n\t  Size of memory reserved for monitor code, used to determine\n\t  _at_compile_time_ (!) if the environment is embedded within the\n\t  U-Boot image, or in a separate flash sector, among other uses where\n\t  we need to set a maximum size of the U-Boot binary itself that will\n\t  be loaded.\n\nconfig MP\n\tbool \"Support for multiprocessor\"\n\thelp\n\t  This provides an option to bringup different processors\n\t  in multiprocessor cases.\n\nconfig HAVE_TEXT_BASE\n\tbool\n\tdepends on !NIOS2 && !XTENSA\n\tdepends on !EFI_APP\n\tdefault y\n\nconfig TEXT_BASE\n\tdepends on HAVE_TEXT_BASE\n\tdefault 0x0 if POSITION_INDEPENDENT\n\tdefault 0x17800000 if ARCH_MX6\n\tdefault 0x87800000 if ARCH_MX7\n\tdefault 0x80800000 if ARCH_OMAP2PLUS || ARCH_K3\n\tdefault 0x81700000 if MACH_SUNIV\n\tdefault 0x2a000000 if MACH_SUN9I\n\tdefault 0x4a000000 if SUNXI_MINIMUM_DRAM_MB >= 256\n\tdefault 0x42e00000 if SUNXI_MINIMUM_DRAM_MB >= 64\n\tdefault 0x96000000 if ARCH_SC5XX && SC59X_64\n\tdefault 0xB2200000 if ARCH_SC5XX && SC59X\n\tdefault 0x89200000 if ARCH_SC5XX && TARGET_SC584_EZKIT\n\tdefault 0xC2200000 if ARCH_SC5XX && (TARGET_SC589_EZKIT || TARGET_SC589_MINI)\n\tdefault 0x82200000 if ARCH_SC5XX && SC57X\n\thex \"Text Base\"\n\thelp\n\t  The address in memory that U-Boot will be copied and executed from\n\t  initially.\n\nconfig HAVE_SYS_UBOOT_START\n\tbool \"Use custom U-Boot Start\"\n\tdepends on HAVE_TEXT_BASE\n\thelp\n\t  By default, the address in memory that U-Boot will be copied from\n\t  (TEXT_BASE) and the entry point are the same. Select this to start the\n\t  execution of U-Boot from a different address.\n\t  This may be required if a header or vector table needs to be copied\n\t  but not executed.\n\nconfig SYS_UBOOT_START\n\thex\n\tdepends on HAVE_TEXT_BASE\n\tdefault TEXT_BASE\n\tprompt \"U-Boot entry\" if HAVE_SYS_UBOOT_START\n\thelp\n\t  If TEXT_BASE differs from the start of execution, this sets the\n\t  address in memory that U-Boot will start execution from initially.\n\nconfig HAVE_SYS_MONITOR_BASE\n\tbool\n\tdepends on ARC || MIPS || M68K || NIOS2 || PPC || XTENSA || X86 \\\n\t\t|| ENV_IS_IN_FLASH || MTD_NOR_FLASH\n\tdepends on !EFI_APP\n\tdefault y\n\nconfig SYS_MONITOR_BASE\n\tdepends on HAVE_SYS_MONITOR_BASE\n\thex \"Physical start address of boot monitor code\"\n\tdefault TEXT_BASE\n\thelp\n\t  The physical start address of boot monitor code (which is the same as\n\t  CONFIG_TEXT_BASE when linking) and the same as CFG_SYS_FLASH_BASE\n\t  when booting from flash.\n\nconfig SPL_SYS_MONITOR_BASE\n\tdepends on MPC85xx && SPL && HAVE_SYS_MONITOR_BASE\n\thex \"Physical start address of SPL monitor code\"\n\tdefault SPL_TEXT_BASE\n\nconfig TPL_SYS_MONITOR_BASE\n\tdepends on MPC85xx && TPL && HAVE_SYS_MONITOR_BASE\n\thex \"Physical start address of TPL monitor code\"\n\nconfig DYNAMIC_SYS_CLK_FREQ\n\tbool \"Determine CPU clock frequency at run-time\"\n\thelp\n\t  Implement a get_board_sys_clk function that will determine the CPU\n\t  clock frequency at run time, rather than define it statically.\n\nconfig SYS_CLK_FREQ\n\tdepends on !DYNAMIC_SYS_CLK_FREQ\n\tint \"CPU clock frequency\"\n\tdefault 125000000 if ARCH_LS1012A\n\tdefault 100000000 if ARCH_P2020 || ARCH_T1024 || ARCH_T1042 || \\\n\t\t\t     ARCH_LS1021A || FSL_LSCH2 || FSL_LSCH3\n\tdefault 66666666 if ARCH_P1010 || ARCH_P1020 || ARCH_T4240\n\tdefault 66660000 if ARCH_T2080\n\tdefault 33333333 if RCAR_GEN3\n\tdefault 24000000 if ARCH_EXYNOS\n\tdefault 20000000 if RCAR_GEN2\n\tdefault 0\n\thelp\n\t  A static value for the CPU frequency.  Note that if not required\n\t  for a given SoC, this can be left at 0.\n\nconfig HAS_LDR\n\tbool\n\thelp\n\t  Enables building .ldr targets for U-Boot and SPL. This does not\n\t  automatically build any additional targets with make or buildman.\n\nconfig LDR_CPU\n\tstring \"CPU name to be passed to LDR utility.\"\n\tdepends on HAS_LDR\n\thelp\n\t  Set the CPU name for the -T parameter in the LDR utility.  This is\n\t  generally used on processors from Analog Devices, but may be also\n\t  be useful for other vendors.\n\nsource \"api/Kconfig\"\n\nendmenu\t\t# General setup\n\nsource \"boot/Kconfig\"\n\nsource \"common/Kconfig\"\n\nsource \"cmd/Kconfig\"\n\nsource \"disk/Kconfig\"\n\nsource \"dts/Kconfig\"\n\nsource \"env/Kconfig\"\n\nmenu Networking\n\nchoice\n\tprompt \"Networking stack\"\n\tdefault NET\n\nconfig NO_NET\n\tbool \"No networking support\"\n\thelp\n\t  Do not include networking support\n\nconfig NET\n\tbool \"Legacy U-Boot networking stack\"\n\timply NETDEVICES\n\thelp\n\t  Include networking support with U-Boot's internal implementation of\n\t  the TCP/IP protocol stack.\n\nconfig NET_LWIP\n\tbool \"Use lwIP for networking stack\"\n\timply NETDEVICES\n\thelp\n\t  Include networking support based on the lwIP (lightweight IP)\n\t  TCP/IP stack (https://nongnu.org/lwip). This is a replacement for\n\t  the default U-Boot network stack and applications located in net/\n\t  and enabled via CONFIG_NET as well as other pieces of code that\n\t  depend on CONFIG_NET (such as cmd/net.c enabled via CONFIG_CMD_NET).\n\t  Therefore the two symbols CONFIG_NET and CONFIG_NET_LWIP are mutually\n\t  exclusive.\n\nendchoice\n\nsource \"net/Kconfig\"\n\nendmenu\n\nsource \"drivers/Kconfig\"\n\nsource \"fs/Kconfig\"\n\nsource \"lib/Kconfig\"\n\nsource \"test/Kconfig\"\n\nsource \"tools/Kconfig\"\n"
        },
        {
          "name": "Licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 47.787109375,
          "content": "Descriptions of section entries:\n\n\tP: Person (obsolete)\n\tM: Mail patches to: FullName <address@domain>\n\tR: Designated reviewer: FullName <address@domain>\n\t   These reviewers should be CCed on patches.\n\tL: Mailing list that is relevant to this area\n\tW: Web-page with status/info\n\tQ: Patchwork web based patch tracking system site\n\tT: SCM tree type and location.\n\t   Type is one of: git, hg, quilt, stgit, topgit\n\tS: Status, one of the following:\n\t   Supported:\tSomeone is actually paid to look after this.\n\t   Maintained:\tSomeone actually looks after it.\n\t   Orphan:\tNo current maintainer [but maybe you could take the\n\t\t\trole as you write your new code].\n\tF: Files and directories with wildcard patterns.\n\t   A trailing slash includes all files and subdirectory files.\n\t   F:\tdrivers/net/\tall files in and below drivers/net\n\t   F:\tdrivers/net/*\tall files in drivers/net, but not below\n\t   F:\t*/net/*\t\tall files in \"any top level directory\"/net\n\t   One pattern per line.  Multiple F: lines acceptable.\n\tN: Files and directories with regex patterns.\n\t   N:\t[^a-z]tegra\tall files whose path contains the word tegra\n\t   One pattern per line.  Multiple N: lines acceptable.\n\t   scripts/get_maintainer.pl has different behavior for files that\n\t   match F: pattern and matches of N: patterns.  By default,\n\t   get_maintainer will not look at git log history when an F: pattern\n\t   match occurs.  When an N: match occurs, git log history is used\n\t   to also notify the people that have git commit signatures.\n\tX: Files and directories that are NOT maintained, same rules as F:\n\t   Files exclusions are tested before file matches.\n\t   Can be useful for excluding a specific subdirectory, for instance:\n\t   F:\tnet/\n\t   X:\tnet/ipv6/\n\t   matches all files in and below net excluding net/ipv6/\n\tK: Keyword perl extended regex pattern to match content in a\n\t   patch or file.  For instance:\n\t   K: of_get_profile\n\t      matches patches or files that contain \"of_get_profile\"\n\t   K: \\b(printk|pr_(info|err))\\b\n\t      matches patches or files that contain one or more of the words\n\t      printk, pr_info or pr_err\n\t   One regex pattern per line.  Multiple K: lines acceptable.\n\nNote: For the hard of thinking, this list is meant to remain in alphabetical\norder. If you could add yourselves to it in alphabetical order that would be\nso much easier [Ed]\n\nMaintainers List (try to look for most precise areas first)\n\n\t\t-----------------------------------\nACPI:\nM:\tSimon Glass <sjg@chromium.org>\nS:\tMaintained\nF:\tboard/emulation/configs/acpi.config\nF:\tcmd/acpi.c\nF:\tinclude/acpi/\nF:\tlib/acpi/\n\nALIST:\nM:\tSimon Glass <sjg@chromium.org>\nS:\tMaintained\nF:\tinclude/alist.h\nF:\tlib/alist.c\nF:\ttest/lib/alist.c\n\nANDROID AB\nM:\tIgor Opaniuk <igor.opaniuk@gmail.com>\nM:\tMattijs Korpershoek <mkorpershoek@baylibre.com>\nR:\tSam Protsenko <semen.protsenko@linaro.org>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-dfu.git\nF:\tboot/android_ab.c\nF:\tdoc/android/ab.rst\nF:\tinclude/android_ab.h\nF:\ttest/py/tests/test_android/test_ab.py\n\nANDROID AVB\nM:\tIgor Opaniuk <igor.opaniuk@gmail.com>\nM:\tMattijs Korpershoek <mkorpershoek@baylibre.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-dfu.git\nF:\tcmd/avb.c\nF:\tcommon/avb_verify.c\nF:\tdoc/android/avb2.rst\nF:\tinclude/avb_verify.h\nF:\tlib/libavb/\nF:\ttest/py/tests/test_android/test_avb.py\n\nARC\nM:\tAlexey Brodkin <alexey.brodkin@synopsys.com>\nM:\tEugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>\nS:\tMaintained\nL:\tuboot-snps-arc@synopsys.com\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-arc.git\nF:\tarch/arc/\nF:\tboard/synopsys/\n\nARC HSDK CGU CLOCK\nM:\tEugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>\nS:\tMaintained\nL:\tuboot-snps-arc@synopsys.com\nF:\tdrivers/clk/clk-hsdk-cgu.c\nF:\tinclude/dt-bindings/clock/snps,hsdk-cgu.h\nF:\tdoc/device-tree-bindings/clock/snps,hsdk-cgu.txt\n\nARC HSDK CREG GPIO\nM:\tEugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>\nS:\tMaintained\nL:\tuboot-snps-arc@synopsys.com\nF:\tdoc/device-tree-bindings/gpio/snps,creg-gpio.txt\nF:\tdrivers/gpio/hsdk-creg-gpio.c\n\nARC HSDK RESET\nM:\tEugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>\nS:\tMaintained\nL:\tuboot-snps-arc@synopsys.com\nF:\tinclude/dt-bindings/reset/snps,hsdk-reset.h\nF:\tdrivers/reset/reset-hsdk.c\n\nARC SYNOPSYS DW MMC EXTENSIONS\nM:\tEugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>\nS:\tMaintained\nL:\tuboot-snps-arc@synopsys.com\nF:\tdoc/device-tree-bindings/mmc/snps,dw-mmc.txt\nF:\tdrivers/mmc/snps_dw_mmc.c\n\nAPPLE M1 SOC SUPPORT\nM:\tMark Kettenis <kettenis@openbsd.org>\nS:\tMaintained\nF:\tarch/arm/include/asm/arch-apple/\nF:\tarch/arm/mach-apple/\nF:\tconfigs/apple_m1_defconfig\nF:\tdrivers/iommu/apple_dart.c\nF:\tdrivers/nvme/nvme_apple.c\nF:\tdrivers/pci/pcie_apple.c\nF:\tdrivers/phy/phy-apple-atc.c\nF:\tdrivers/pinctrl/pinctrl-apple.c\nF:\tdrivers/watchdog/apple_wdt.c\nF:\tinclude/configs/apple.h\n\nARM\nM:\tTom Rini <trini@konsulko.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-arm.git\nF:\tarch/arm/\nF:\tarch/arm/dts/Makefile\nF:\tcmd/arm/\n\nARM ALTERA SOCFPGA\nM:\tMarek Vasut <marex@denx.de>\nM:\tSimon Goldschmidt <simon.k.r.goldschmidt@gmail.com>\nM:\tTien Fong Chee <tien.fong.chee@intel.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-socfpga.git\nF:\tarch/arm/mach-socfpga/\nF:\tdrivers/sysreset/sysreset_socfpga*\n\nARM AMLOGIC SOC SUPPORT\nM:\tNeil Armstrong <neil.armstrong@linaro.org>\nS:\tMaintained\nL:\tu-boot-amlogic@groups.io\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-amlogic.git\nF:\tarch/arm/mach-meson/\nF:\tarch/arm/include/asm/arch-meson/\nF:\tcmd/meson/\nF:\tdrivers/clk/meson/\nF:\tdrivers/serial/serial_meson.c\nF:\tdrivers/reset/reset-meson.c\nF:\tdrivers/i2c/meson_i2c.c\nF:\tdrivers/net/phy/meson-gxl.c\nF:\tdrivers/adc/meson-saradc.c\nF:\tdrivers/phy/meson*\nF:\tdrivers/mmc/meson_gx_mmc.c\nF:\tdrivers/sm/meson-sm.c\nF:\tdrivers/spi/meson_spifc.c\nF:\tdrivers/pinctrl/meson/\nF:\tdrivers/power/domain/meson-gx-pwrc-vpu.c\nF:\tdrivers/video/meson/\nF:\tdrivers/watchdog/meson_gxbb_wdt.c\nF:\tinclude/configs/meson64.h\nF:\tinclude/configs/meson64_android.h\nF:\tdoc/board/amlogic/\nN:\tmeson\n\nARM ASPEED\nM:\tRyan Chen <ryan_chen@aspeedtech.com>\nM:\tChia-Wei Wang <chiawei_wang@aspeedtech.com>\nR:\tAspeed BMC SW team <BMC-SW@aspeedtech.com>\nR:\tJoel Stanley <joel@jms.id.au>\nS:\tMaintained\nF:\tarch/arm/mach-aspeed/\nF:\tarch/arm/include/asm/arch-aspeed/\nF:\tboard/aspeed/\nF:\tdrivers/clk/aspeed/\nF:\tdrivers/crypto/aspeed/\nF:\tdrivers/gpio/gpio-aspeed.c\nF:\tdrivers/i2c/ast_i2c.[ch]\nF:\tdrivers/mmc/aspeed_sdhci.c\nF:\tdrivers/net/aspeed_mdio.c\nF:\tdrivers/net/ftgmac100.[ch]\nF:\tdrivers/pinctrl/aspeed/\nF:\tdrivers/pwm/pwm-aspeed.c\nF:\tdrivers/ram/aspeed/\nF:\tdrivers/reset/reset-ast2500.c\nF:\tdrivers/watchdog/ast_wdt.c\nN:\taspeed\n\nARM BROADCOM BCM283X / BCM27XX\nM:\tMatthias Brugger <mbrugger@suse.com>\nM:\tPeter Robinson <pbrobinson@gmail.com>\nS:\tMaintained\nF:\tarch/arm/dts/bcm283*\nF:\tarch/arm/mach-bcm283x/\nF:\tboard/raspberrypi/\nF:\tdrivers/gpio/bcm2835_gpio.c\nF:\tdrivers/mmc/bcm2835_sdhci.c\nF:\tdrivers/mmc/bcm2835_sdhost.c\nF:\tdrivers/serial/serial_bcm283x_mu.c\nF:\tdrivers/serial/serial_bcm283x_pl011.c\nF:\tdrivers/video/bcm2835.c\nF:\tinclude/dm/platform_data/serial_bcm283x_mu.h\nF:\tinclude/dt-bindings/pinctrl/bcm2835.h\nF:\tdrivers/pinctrl/broadcom/\nF:\tconfigs/rpi_*\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-arm.git\n\nARM BROADCOM BCMBCA\nM:\tAnand Gore <anand.gore@broadcom.com>\nM:\tWilliam Zhang <william.zhang@broadcom.com>\nM:\tKursad Oney <kursad.oney@broadcom.com>\nM:\tPhilippe Reynes <philippe.reynes@softathome.com>\nS:\tMaintained\nF:\tarch/arm/mach-bcmbca/\nF:\tboard/broadcom/bcmbca/\nN:\tbcmbca\nN:\tbcm[9]?47622\nN:\tbcm[9]?4908\nN:\tbcm[9]?4912\nN:\tbcm[9]?63138\nN:\tbcm[9]?63146\nN:\tbcm[9]?63148\nN:\tbcm[9]?63158\nN:\tbcm[9]?63178\nN:\tbcm[9]?6756\nN:\tbcm[9]?6813\nN:\tbcm[9]?6846\nN:\tbcm[9]?6855\nN:\tbcm[9]?6856\nN:\tbcm[9]?6858\nN:\tbcm[9]?6878\n\nARM BROADCOM BCMSTB\nM:\tThomas Fitzsimmons <fitzsim@fitzsim.org>\nS:\tMaintained\nF:\tarch/arm/mach-bcmstb/\nF:\tboard/broadcom/bcmstb/\nF:\tconfigs/bcm7*_defconfig\nF:\tdoc/README.bcm7xxx\nF:\tdrivers/mmc/bcmstb_sdhci.c\nF:\tdrivers/spi/bcmstb_spi.c\n\nARM CORTINA ACCESS CAxxxx\nM:\tAlex Nemirovsky <alex.nemirovsky@cortina-access.com>\nS:\tSupported\nF:\tboard/cortina/common/\nF:\tdrivers/gpio/cortina_gpio.c\nF:\tdrivers/watchdog/cortina_wdt.c\nF:\tdrivers/serial/serial_cortina.c\nF:\tdrivers/led/led_cortina.c\nF:\tdrivers/mmc/ca_dw_mmc.c\nF:\tdrivers/spi/ca_sflash.c\nF:\tdrivers/i2c/i2c-cortina.c\nF:\tdrivers/i2c/i2c-cortina.h\nF:\tdrivers/mtd/nand/raw/cortina_nand.c\nF:\tdrivers/mtd/nand/raw/cortina_nand.h\nF:\tdrivers/net/cortina_ni.c\nF:\tdrivers/net/cortina_ni.h\nF:\tdrivers/net/phy/ca_phy.c\nF:\tconfigs/cortina_presidio-asic-pnand_defconfig\n\nARM FF-A\nM:\tAbdellatif El Khlifi <abdellatif.elkhlifi@arm.com>\nS:\tMaintained\nF:\tarch/sandbox/include/asm/sandbox_arm_ffa.h\nF:\tarch/sandbox/include/asm/sandbox_arm_ffa_priv.h\nF:\tcmd/armffa.c\nF:\tdoc/arch/arm64.ffa.rst\nF:\tdoc/usage/cmd/armffa.rst\nF:\tdrivers/firmware/arm-ffa/\nF:\tinclude/arm_ffa.h\nF:\ttest/cmd/armffa.c\nF:\ttest/dm/ffa.c\n\nARM FREESCALE IMX\nM:\tStefano Babic <sbabic@denx.de>\nM:\tFabio Estevam <festevam@gmail.com>\nR:\tNXP i.MX U-Boot Team <uboot-imx@nxp.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-imx.git\nF:\tarch/Kconfig.nxp\nF:\tarch/arm/cpu/arm1136/mx*/\nF:\tarch/arm/cpu/arm926ejs/mx*/\nF:\tarch/arm/cpu/armv7/vf610/\nF:\tarch/arm/dts/*imx*\nF:\tarch/arm/mach-imx/\nF:\tarch/arm/include/asm/arch-imx*/\nF:\tarch/arm/include/asm/arch-mx*/\nF:\tarch/arm/include/asm/arch-vf610/\nF:\tarch/arm/include/asm/mach-imx/\nF:\tboard/freescale/*mx*/\nF:\tboard/freescale/common/\nF:\tcommon/spl/spl_imx_container.c\nF:\tdoc/imx/\nF:\tdrivers/serial/serial_mxc.c\nF:\tinclude/imx_container.h\n\nARM HISILICON\nM:\tPeter Griffin <peter.griffin@linaro.org>\nM:\tManivannan Sadhasivam <manivannan.sadhasivam@linaro.org>\nS:\tMaintained\nF:\tarch/arm/cpu/armv8/hisilicon\nF:\tarch/arm/include/asm/arch-hi6220/\nF:\tarch/arm/include/asm/arch-hi3660/\nF:\tarch/arm/mach-histb\n\nARM HPE GXP ARCHITECTURE\nM:\tJean-Marie Verdun <verdun@hpe.com>\nM:\tNick Hawkins <nick.hawkins@hpe.com>\nS:\tMaintained\nF:\tarch/arm/dts/hpe-bmc*\nF:\tarch/arm/dts/hpe-gxp*\nF:\tarch/arm/mach-hpe/\nF:\tboard/hpe/\nF:\tconfigs/gxp_defconfig\nF:\tdoc/device-tree-bindings/spi/hpe,gxp-spi.yaml\nF:\tdrivers/timer/gxp-timer.c\nF:\tdrivers/spi/gxp_spi.c\n\nARM IPQ40XX\nM:\tRobert Marko <robert.marko@sartura.hr>\nM:\tLuka Perkov <luka.perkov@sartura.hr>\nS:\tMaintained\nF:\tarch/arm/mach-ipq40xx/\nF:\tinclude/dt-bindings/clock/qcom,gcc-ipq4019.h\nF:\tdrivers/clk/qcom/clock-ipq4019.c\nF:\tdrivers/phy/phy-qcom-ipq4019-usb.c\nF:\tdrivers/spi/spi-qup.c\nF:\tdrivers/net/mdio-ipq4019.c\nF:\tdrivers/rng/msm_rng.c\nF:\tdrivers/pinctrl/qcom/pinctrl-ipq4019.c\n\nARM LAYERSCAPE SFP\nM:\tSean Anderson <sean.anderson@seco.com>\nS:\tMaintained\nF:\tdrivers/misc/ls2_sfp.c\n\nARM MARVELL KIRKWOOD ARMADA-XP ARMADA-38X ARMADA-37XX ARMADA-7K/8K\nM:\tStefan Roese <sr@denx.de>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-marvell.git\nF:\tarch/arm/mach-kirkwood/\nF:\tarch/arm/mach-mvebu/\nF:\tdrivers/ata/ahci_generic.c\nF:\tdrivers/clk/mvebu/\nF:\tdrivers/ddr/marvell/\nF:\tdrivers/gpio/mvebu_gpio.c\nF:\tdrivers/i2c/mvtwsi.c\nF:\tdrivers/mmc/xenon_sdhci.c\nF:\tdrivers/phy/marvell/\nF:\tdrivers/pinctrl/mvebu/\nF:\tdrivers/rtc/armada38x.c\nF:\tdrivers/spi/kirkwood_spi.c\nF:\tdrivers/spi/mvebu_a3700_spi.c\nF:\tdrivers/pci/pcie_dw_mvebu.c\nF:\tdrivers/pci/pcie-xilinx-nwl.c\nF:\tdrivers/watchdog/armada-37xx-wdt.c\nF:\tdrivers/watchdog/orion_wdt.c\nF:\tinclude/configs/mv-common.h\n\nARM MARVELL PCIE CONTROLLER DRIVERS\nM:\tStefan Roese <sr@denx.de>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-marvell.git\nF:\tdrivers/pci/pci-aardvark.c\nF:\tdrivers/pci/pci_mvebu.c\n\nARM MARVELL SERIAL DRIVERS\nM:\tPali Rohár <pali@kernel.org>\nM:\tStefan Roese <sr@denx.de>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-marvell.git\nF:\tdrivers/serial/serial_mvebu_a3700.c\n\nARM MEDIATEK\nM:\tRyder Lee <ryder.lee@mediatek.com>\nM:\tWeijie Gao <weijie.gao@mediatek.com>\nM:\tChunfeng Yun <chunfeng.yun@mediatek.com>\nR:\tGSS_MTK_Uboot_upstream <GSS_MTK_Uboot_upstream@mediatek.com>\nS:\tMaintained\nF:\tarch/arm/mach-mediatek/\nF:\tarch/arm/include/asm/arch-mediatek/\nF:\tboard/mediatek/\nF:\tdoc/device-tree-bindings/phy/phy-mtk-*\nF:\tdoc/device-tree-bindings/usb/mediatek,*\nF:\tdoc/README.mediatek\nF:\tdrivers/clk/mediatek/\nF:\tdrivers/cpu/mtk_cpu.c\nF:\tdrivers/i2c/mtk_i2c.c\nF:\tdrivers/mmc/mtk-sd.c\nF:\tdrivers/phy/phy-mtk-*\nF:\tdrivers/pinctrl/mediatek/\nF:\tdrivers/power/domain/mtk-power-domain.c\nF:\tdrivers/ram/mediatek/\nF:\tdrivers/spi/mtk_snfi_spi.c\nF:\tdrivers/spi/mtk_spim.c\nF:\tdrivers/timer/mtk_timer.c\nF:\tdrivers/usb/host/xhci-mtk.c\nF:\tdrivers/usb/mtu3/\nF:\tdrivers/watchdog/mtk_wdt.c\nF:\tdrivers/net/mtk_eth.c\nF:\tdrivers/net/mtk_eth.h\nF:\tdrivers/reset/reset-mediatek.c\nF:\tinclude/dt-bindings/clock/mediatek,*\nF:\tinclude/dt-bindings/power/mediatek,*\nF:\ttools/mtk_image.c\nF:\ttools/mtk_image.h\nF:\ttools/mtk_nand_headers.c\nF:\ttools/mtk_nand_headers.h\nN:\tmediatek\n\nARM METHODE SUPPORT\nM:\tRobert Marko <robert.marko@sartura.hr>\nS:\tMaintained\nF:\tarch/arm/dts/armada-3720-eDPU*\nF:\tarch/arm/dts/armada-3720-uDPU*\nF:\tconfigs/eDPU_defconfig\nF:\tconfigs/uDPU_defconfig\n\nARM MICROCHIP/ATMEL AT91\nM:\tEugen Hristev <eugen.hristev@microchip.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-at91.git\nF:\tarch/arm/dts/at91*\nF:\tarch/arm/dts/sam*\nF:\tarch/arm/mach-at91/\nF:\tboard/atmel/\nF:\tdrivers/cpu/at91_cpu.c\nF:\tdrivers/memory/atmel-ebi.c\nF:\tdrivers/misc/microchip_flexcom.c\nF:\tdrivers/timer/atmel_tcb_timer.c\nF:\tinclude/dt-bindings/clk/at91.h\nF:\tinclude/dt-bindings/clock/at91.h\nF:\tinclude/dt-bindings/dma/at91.h\nF:\tinclude/dt-bindings/mfd/at91-usart.h\nF:\tinclude/dt-bindings/mfd/atmel-flexcom.h\nF:\tinclude/dt-bindings/pinctrl/at91.h\nF:\tinclude/dt-bindings/sound/microchip,pdmc.h\nF:\tdrivers/timer/mchp-pit64b-timer.c\n\nARM MSC SM2S IMX8MP SOM\nM:\tMartyn Welch <martyn.welch@collabora.com>\nM:\tIan Ray <ian.ray@gehealthcare.com>\nS:\tMaintained\nF:\tarch/arm/dts/imx8mp-msc-sm2s*\nF:\tboard/msc/sm2s_imx8mp/\nF:\tconfigs/msc_sm2s_imx8mp_defconfig\nF:\tinclude/configs/msc_sm2s_imx8mp.h\n\nARM NEXELL S5P4418\nM:\tStefan Bosch <stefan_b@posteo.net>\nS:\tMaintained\nF:\tarch/arm/cpu/armv7/s5p4418/\nF:\tarch/arm/dts/s5p4418*\nF:\tarch/arm/mach-nexell/\nF:\tboard/friendlyarm/\nF:\tconfigs/s5p4418_nanopi2_defconfig\nF:\tdoc/README.s5p4418\nF:\tdrivers/gpio/nx_gpio.c\nF:\tdrivers/i2c/nx_i2c.c\nF:\tdrivers/mmc/nexell_dw_mmc_dm.c\nF:\tdrivers/pinctrl/nexell/\nF:\tdrivers/serial/serial_s5p4418_pl011.c\nF:\tdrivers/video/nexell/\nF:\tdrivers/video/nexell_display.c\nF:\tinclude/configs/s5p4418_nanopi2.h\n\nARM OWL\nM:\tManivannan Sadhasivam <manivannan.sadhasivam@linaro.org>\nS:\tMaintained\nF:\tarch/arm/include/asm/arch-owl/\nF:\tarch/arm/mach-owl/\nF:\tdoc/board/actions/\nF:\tdrivers/clk/owl/\nF:\tdrivers/serial/serial_owl.c\nF:\tinclude/configs/owl-common.h\nF:\tconfigs/bubblegum_96_defconfig\nF:\tconfigs/cubieboard7_defconfig\n\nARM RENESAS RMOBILE/R-CAR\nM:\tNobuhiro Iwamatsu <iwamatsu@nigauri.org>\nM:\tMarek Vasut <marek.vasut+renesas@mailbox.org>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-sh.git\nF:\tarch/arm/mach-renesas/\nF:\tdrivers/clk/renesas/\nF:\tdrivers/gpio/gpio-rcar.c\nF:\tdrivers/i2c/rcar_*\nF:\tdrivers/i2c/sh_i2c.c\nF:\tdrivers/mmc/renesas-sdhi.c\nF:\tdrivers/mmc/sh_mmcif*\nF:\tdrivers/mmc/tmio-common*\nF:\tdrivers/mtd/renesas_rpc_hf.c\nF:\tdrivers/net/ravb.c\nF:\tdrivers/net/rswitch.c\nF:\tdrivers/net/sh_eth*\nF:\tdrivers/pci/pci-rcar-*\nF:\tdrivers/phy/phy-rcar-*\nF:\tdrivers/phy/renesas/\nF:\tdrivers/pinctrl/renesas/\nF:\tdrivers/serial/serial_sh*\nF:\tdrivers/spi/renesas_rpc_spi.c\nF:\tdrivers/spi/sh_qspi.c\nF:\tdrivers/sysinfo/rcar3.c\nF:\tdrivers/usb/host/xhci-rcar*\n\nARM ROCKCHIP\nM:\tSimon Glass <sjg@chromium.org>\nM:\tPhilipp Tomsich <philipp.tomsich@vrull.eu>\nM:\tKever Yang <kever.yang@rock-chips.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-rockchip.git\nF:\tarch/arm/dts/px30*\nF:\tarch/arm/dts/rk3*\nF:\tarch/arm/dts/rockchip*\nF:\tarch/arm/dts/rv11*\nF:\tarch/arm/include/asm/arch-rockchip/\nF:\tarch/arm/mach-rockchip/\nF:\tboard/amarula/vyasa-rk3288/\nF:\tboard/anbernic/rgxx3_rk3566/\nF:\tboard/armsom/sige7-rk3588/\nF:\tboard/chipspark/popmetal_rk3288\nF:\tboard/engicam/px30_core/\nF:\tboard/firefly/\nF:\tboard/mqmaker/miqi_rk3288/\nF:\tboard/phytec/phycore_rk3288\nF:\tboard/pine64\nF:\tboard/radxa/\nF:\tboard/rockchip/\nF:\tboard/theobroma-systems\nF:\tboard/vamrs/rock960_rk3399/\nF:\tdrivers/clk/rockchip/\nF:\tdrivers/gpio/rk_gpio.c\nF:\tdrivers/misc/rockchip-efuse.c\nF:\tdrivers/mmc/rockchip_sdhci.c\nF:\tdrivers/mmc/rockchip_dw_mmc.c\nF:\tdrivers/pinctrl/rockchip/\nF:\tdrivers/ram/rockchip/\nF:\tdrivers/sysreset/sysreset_rockchip.c\nF:\tdrivers/video/rockchip/\nF:\ttools/rkcommon.c\nF:\ttools/rkcommon.h\nF:\ttools/rkimage.c\nF:\ttools/rksd.c\nF:\ttools/rkspi.c\nN:\trockchip\n\nARM SAMSUNG\nM:\tMinkyu Kang <mk7.kang@samsung.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-samsung.git\nF:\tarch/arm/mach-exynos/\nF:\tarch/arm/mach-s5pc1xx/\nF:\tarch/arm/cpu/armv7/s5p-common/\n\nARM SAMSUNG CLOCK\nM:\tSam Protsenko <semen.protsenko@linaro.org>\nS:\tMaintained\nF:\tdrivers/clk/exynos/clk-pll.c\nF:\tdrivers/clk/exynos/clk-pll.h\nF:\tdrivers/clk/exynos/clk.c\nF:\tdrivers/clk/exynos/clk.h\n\nARM SAMSUNG EXYNOS850 SOC\nM:\tSam Protsenko <semen.protsenko@linaro.org>\nS:\tMaintained\nF:\tdrivers/clk/exynos/clk-exynos850.c\nF:\tdrivers/pinctrl/exynos/pinctrl-exynos850.c\n\nARM SAMSUNG SOC DRIVERS\nM:\tSam Protsenko <semen.protsenko@linaro.org>\nS:\tMaintained\nF:\tdoc/device-tree-bindings/soc/samsung/exynos-pmu.yaml\nF:\tdrivers/soc/samsung/*\n\nARM SANCLOUD\nM:\tPaul Barker <paul.barker@sancloud.com>\nR:\tMarc Murphy <marc.murphy@sancloud.com>\nS:\tSupported\nF:\tarch/arm/dts/am335x-sancloud*\n\nARM SC5XX\nM:\tNathan Barrett-Morrison <nathan.morrison@timesys.com>\nM:\tGreg Malysa <greg.malysa@timesys.com>\nM:\tIan Roberts <ian.roberts@timesys.com>\nM:\tVasileios Bimpikas <vasileios.bimpikas@analog.com>\nM:\tUtsav Agarwal <utsav.agarwal@analog.com>\nM:\tArturs Artamonovs <arturs.artamonovs@analog.com>\nL:\tadsp-linux@analog.com\nS:\tSupported\nT:\tgit https://github.com/analogdevicesinc/lnxdsp-u-boot\nF:\tarch/arm/dts/sc5*\nF:\tarch/arm/include/asm/arch-adi/\nF:\tarch/arm/mach-sc5xx/\nF:\tboard/adi/\nF:\tdoc/device-tree-bindings/arm/adi/adi,sc5xx.yaml\nF:\tdoc/device-tree-bindings/clock/adi,sc5xx-clocks.yaml\nF:\tdoc/device-tree-bindings/timer/adi,sc5xx-gptimer.yaml\nF:\tdrivers/clk/adi/\nF:\tdrivers/serial/serial_adi_uart4.c\nF:\tdrivers/timer/adi_sc5xx_timer.c\nF:\tinclude/configs/sc5*\nF:\tinclude/env/adi/\n\nARM SNAPDRAGON\nM:\tCaleb Connolly <caleb.connolly@linaro.org>\nM:\tNeil Armstrong <neil.armstrong@linaro.org>\nR:\tSumit Garg <sumit.garg@linaro.org>\nL:\tu-boot-qcom@groups.io\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-snapdragon.git\nF:\tconfigs/qcm6490_defconfig\nF:\tdrivers/*/*/pm8???-*\nF:\tdrivers/gpio/msm_gpio.c\nF:\tdrivers/mmc/msm_sdhci.c\nF:\tdrivers/phy/msm8916-usbh-phy.c\nF:\tdrivers/serial/serial_msm.c\nF:\tdrivers/serial/serial_msm_geni.c\nF:\tdrivers/smem/msm_smem.c\nF:\tdrivers/spmi/spmi-msm.c\nF:\tdrivers/usb/host/ehci-msm.c\nN:\tqcom\nN:\tsnapdragon\nN:\tqualcomm\n\nARM STI\nM:\tPatrice Chotard <patrice.chotard@foss.st.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-stm.git\nF:\tarch/arm/mach-sti/\nF:\tarch/arm/include/asm/arch-sti*/\nF:\tdrivers/phy/sti_usb_phy.c\nF:\tdrivers/pinctrl/pinctrl-sti.c\nF:\tdrivers/mmc/sti_sdhci.c\nF:\tdrivers/reset/sti-reset.c\nF:\tdrivers/serial/serial_sti_asc.c\nF:\tdrivers/sysreset/sysreset_sti.c\nF:\tdrivers/timer/arm_global_timer.c\nF:\tdrivers/usb/host/dwc3-sti-glue.c\nF:\tinclude/dwc3-sti-glue.h\nF:\tinclude/dt-bindings/clock/stih407-clks.h\nF:\tinclude/dt-bindings/clock/stih410-clks.h\nF:\tinclude/dt-bindings/reset/stih407-resets.h\n\nARM STM STM32MP\nM:\tPatrick Delaunay <patrick.delaunay@foss.st.com>\nM:\tPatrice Chotard <patrice.chotard@foss.st.com>\nL:\tuboot-stm32@st-md-mailman.stormreply.com (moderated for non-subscribers)\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-stm.git\nS:\tMaintained\nF:\tarch/arm/mach-stm32mp/\nF:\tdoc/board/st/\nF:\tdrivers/adc/stm32-adc*\nF:\tdrivers/clk/stm32/\nF:\tdrivers/gpio/stm32_gpio.c\nF:\tdrivers/hwspinlock/stm32_hwspinlock.c\nF:\tdrivers/i2c/stm32f7_i2c.c\nF:\tdrivers/mailbox/stm32-ipcc.c\nF:\tdrivers/misc/stm32mp_fuse.c\nF:\tdrivers/misc/stm32_rcc.c\nF:\tdrivers/mmc/stm32_sdmmc2.c\nF:\tdrivers/mtd/nand/raw/stm32_fmc2_nand.c\nF:\tdrivers/phy/phy-stm32-usbphyc.c\nF:\tdrivers/pinctrl/pinctrl_stm32.c\nF:\tdrivers/power/pmic/stpmic1.c\nF:\tdrivers/power/regulator/stm32-vrefbuf.c\nF:\tdrivers/power/regulator/stpmic1.c\nF:\tdrivers/ram/stm32mp1/\nF:\tdrivers/remoteproc/stm32_copro.c\nF:\tdrivers/reset/stm32-reset.c\nF:\tdrivers/rng/optee_rng.c\nF:\tdrivers/rng/stm32_rng.c\nF:\tdrivers/rtc/stm32_rtc.c\nF:\tdrivers/serial/serial_stm32.*\nF:\tdrivers/spi/stm32_qspi.c\nF:\tdrivers/spi/stm32_spi.c\nF:\tdrivers/video/stm32/stm32_ltdc.c\nF:\tdrivers/watchdog/stm32mp_wdt.c\nF:\tinclude/dt-bindings/clock/stm32fx-clock.h\nF:\tinclude/dt-bindings/clock/stm32mp*\nF:\tinclude/dt-bindings/pinctrl/stm32-pinfunc.h\nF:\tinclude/dt-bindings/reset/stm32mp*\nF:\tinclude/stm32_rcc.h\nF:\ttools/logos/st.bmp\nF:\ttools/stm32image.c\nN:\tstm\nN:\tstm32\n\nARM SUNXI\nM:\tJagan Teki <jagan@amarulasolutions.com>\nM:\tAndre Przywara <andre.przywara@arm.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-sunxi.git\nF:\tarch/arm/cpu/armv7/sunxi/\nF:\tarch/arm/include/asm/arch-sunxi/\nF:\tarch/arm/mach-sunxi/\nF:\tboard/sunxi/\nF:\tdrivers/clk/sunxi/\nF:\tdrivers/phy/allwinner/\nF:\tdrivers/pinctrl/sunxi/\nF:\tdrivers/video/sunxi/\nF:\ttools/sunxi*\n\nARM TEGRA\nM:\tThierry Reding <treding@nvidia.com>\nM:\tSvyatoslav Ryhel <clamor95@gmail.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-tegra.git\nF:\tarch/arm/dts/tegra*\nF:\tarch/arm/include/asm/arch-tegra*/\nF:\tarch/arm/mach-tegra/\nF:\tdrivers/*/tegra*\nF:\tdrivers/*/tegra*/\n\nARM TI\nM:\tTom Rini <trini@konsulko.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-ti.git\nF:\tarch/arm/dts/am57xx*\nF:\tarch/arm/dts/dra7*\nF:\tarch/arm/mach-davinci/\nF:\tarch/arm/mach-k3/\nF:\tarch/arm/mach-keystone/\nF:\tarch/arm/mach-omap2/\nF:\tarch/arm/include/asm/arch-omap*/\nF:\tarch/arm/include/asm/ti-common/\nF:\tboard/ti/\nF:\tdoc/board/ti/\nF:\tdrivers/dma/ti*\nF:\tdrivers/dma/ti*/\nF:\tdrivers/firmware/ti_sci.*\nF:\tdrivers/gpio/omap_gpio.c\nF:\tdrivers/memory/ti-aemif.c\nF:\tdrivers/misc/k3_avs.c\nF:\tdrivers/mailbox/k3-sec-procy.c\nF:\tdrivers/pci/pcie_cdns_ti.c\nF:\tdrivers/pci/pcie_dw_ti.c\nF:\tdrivers/phy/keystone-usb-phy.c\nF:\tdrivers/phy/omap-usb2-phy.c\nF:\tdrivers/phy/phy-ti-am654.c\nF:\tdrivers/phy/ti-pipe3-phy.c\nF:\tdrivers/ram/k3*\nF:\tdrivers/ram/k3*/\nF:\tdrivers/remoteproc/ipu_rproc.c\nF:\tdrivers/remoteproc/k3_system_controller.c\nF:\tdrivers/remoteproc/pruc_rpoc.c\nF:\tdrivers/remoteproc/ti*\nF:\tdrivers/reset/reset-dra7.c\nF:\tdrivers/reset/reset-ti-sci.c\nF:\tdrivers/rtc/davinci.c\nF:\tdrivers/serial/serial_omap.c\nF:\tdrivers/soc/ti/\nF:\tdrivers/sysreset/sysreset-ti-sci.c\nF:\tdrivers/thermal/ti-bandgap.c\nF:\tdrivers/timer/omap-timer.c\nF:\tdrivers/video/tidss/\nF:\tdrivers/watchdog/omap_wdt.c\nF:\tinclude/linux/pruss_driver.h\nF:\tinclude/linux/soc/ti/\n\nARM U8500\nM:\tStephan Gerhold <stephan@gerhold.net>\nR:\tLinus Walleij <linus.walleij@linaro.org>\nS:\tMaintained\nF:\tarch/arm/dts/ste-*\nF:\tarch/arm/mach-u8500/\nF:\tdrivers/gpio/nmk_gpio.c\nF:\tdrivers/phy/phy-ab8500-usb.c\nF:\tdrivers/power/pmic/ab8500.c\nF:\tdrivers/timer/nomadik-mtu-timer.c\nF:\tdrivers/usb/musb-new/ux500.c\nF:\tdrivers/video/mcde_simple.c\n\nARM UNIPHIER\nM:\tKunihiko Hayashi <hayashi.kunihiko@socionext.com>\nR:\tDai Okamura <okamura.dai@socionext.com>\nS:\tMaintained\nF:\tarch/arm/dts/uniphier-*\nF:\tarch/arm/mach-uniphier/\nF:\tconfigs/uniphier_*_defconfig\nN:\tuniphier\n\nARM VERSAL NET\nM:\tMichal Simek <michal.simek@amd.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-microblaze.git\nF:\tarch/arm/mach-versal-net/\nF:\tdrivers/soc/soc_xilinx_versal_net.c\nN:\t(?<!uni)versal-net\n\nARM VERSAL\nM:\tMichal Simek <michal.simek@amd.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-microblaze.git\nF:\tarch/arm/mach-versal/\nF:\tdrivers/net/xilinx_axi_mrmac.*\nF:\tdrivers/soc/soc_xilinx_versal.c\nF:\tdrivers/spi/cadence_ospi_versal.c\nF:\tdrivers/watchdog/xilinx_wwdt.c\nN:\t(?<!uni)versal\n\nARM VERSATILE EXPRESS DRIVERS\nM:\tLiviu Dudau <liviu.dudau@foss.arm.com>\nS:\tMaintained\nT:\tgit git://github.com/ARM-software/u-boot.git\nF:\tdrivers/misc/vexpress_config.c\nN:\tvexpress\n\nARM ZYNQ\nM:\tMichal Simek <monstr@monstr.eu>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-microblaze.git\nF:\tarch/arm/mach-zynq/\nF:\tdoc/board/xilinx/\nF:\tdoc/device-tree-bindings/video/syncoam,seps525.txt\nF:\tdrivers/clk/clk_zynq.c\nF:\tdrivers/fpga/zynqpl.c\nF:\tdrivers/gpio/zynq_gpio.c\nF:\tdrivers/i2c/i2c-cdns.c\nF:\tdrivers/i2c/muxes/pca954x.c\nF:\tdrivers/i2c/zynq_i2c.c\nF:\tdrivers/mmc/zynq_sdhci.c\nF:\tdrivers/mtd/nand/raw/zynq_nand.c\nF:\tdrivers/net/phy/ethernet_id.c\nF:\tdrivers/net/phy/xilinx_phy.c\nF:\tdrivers/net/zynq_gem.c\nF:\tdrivers/pinctrl/pinctrl-zynqmp.c\nF:\tdrivers/serial/serial_zynq.c\nF:\tdrivers/spi/zynq_qspi.c\nF:\tdrivers/spi/zynq_spi.c\nF:\tdrivers/usb/host/ehci-zynq.c\nF:\tdrivers/watchdog/cdns_wdt.c\nF:\tinclude/zynqpl.h\nF:\ttools/zynqimage.c\nN:\tzynq\n\nARM ZYNQMP\nM:\tMichal Simek <michal.simek@amd.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-microblaze.git\nF:\tarch/arm/mach-zynqmp/\nF:\tdrivers/bootcount/bootcount_zynqmp.c\nF:\tdrivers/clk/clk_zynqmp.c\nF:\tdriver/firmware/firmware-zynqmp.c\nF:\tdrivers/fpga/zynqpl.c\nF:\tdrivers/gpio/gpio_slg7xl45106.c\nF:\tdrivers/gpio/zynq_gpio.c\nF:\tdrivers/gpio/zynqmp_gpio_modepin.c\nF:\tdrivers/i2c/i2c-cdns.c\nF:\tdrivers/i2c/muxes/pca954x.c\nF:\tdrivers/i2c/zynq_i2c.c\nF:\tdrivers/mailbox/zynqmp-ipi.c\nF:\tdrivers/mmc/zynq_sdhci.c\nF:\tdrivers/mtd/nand/raw/zynq_nand.c\nF:\tdrivers/net/phy/xilinx_phy.c\nF:\tdrivers/net/zynq_gem.c\nF:\tdrivers/phy/phy-zynqmp.c\nF:\tdrivers/power/domain/zynqmp-power-domain.c\nF:\tdrivers/pwm/pwm-cadence-ttc.c\nF:\tdrivers/serial/serial_zynq.c\nF:\tdrivers/reset/reset-zynqmp.c\nF:\tdrivers/rtc/zynqmp_rtc.c\nF:\tdrivers/soc/soc_xilinx_zynqmp.c\nF:\tdrivers/spi/zynq_qspi.c\nF:\tdrivers/spi/zynq_spi.c\nF:\tdrivers/timer/cadence-ttc.c\nF:\tdrivers/video/seps525.c\nF:\tdrivers/video/zynqmp/\nF:\tdrivers/watchdog/cdns_wdt.c\nF:\tinclude/zynqmppl.h\nF:\tinclude/zynqmp_firmware.h\nF:\ttools/zynqmp*\nN:\tultra96\nN:\tzynqmp\n\nARM ZYNQMP R5\nM:\tMichal Simek <michal.simek@amd.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-microblaze.git\nF:\tarch/arm/mach-zynqmp-r5/\n\nARM PHYTIUM\nM:\tliuhao <liuhao@phytium.com.cn>\nM:\tshuyiqi <shuyiqi@phytium.com.cn>\nS:\tMaintained\nF:\tdrivers/pci/pcie_phytium.c\nF:\tarch/arm/dts/phytium-durian.dts\n\nASPEED AST2600 I2C DRIVER\nM:\tRyan Chen <ryan_chen@aspeedtech.com>\nR:\tAspeed BMC SW team <BMC-SW@aspeedtech.com>\nS:\tMaintained\nF:\tdrivers/i2c/ast2600_i2c.c\n\nASPEED FMC SPI DRIVER\nM:\tChin-Ting Kuo <chin-ting_kuo@aspeedtech.com>\nM:\tCédric Le Goater <clg@kaod.org>\nR:\tAspeed BMC SW team <BMC-SW@aspeedtech.com>\nS:\tMaintained\nF:\tdrivers/spi/spi-aspeed-smc.c\n\nBINMAN\nM:\tSimon Glass <sjg@chromium.org>\nM:\tAlper Nebi Yasak <alpernebiyasak@gmail.com>\nS:\tMaintained\nF:\tdoc/develop/binman_tests.rst\nF:\ttools/binman/\n\nBLKMAP\nM:\tTobias Waldekranz <tobias@waldekranz.com>\nS:\tMaintained\nF:\tcmd/blkmap.c\nF:\tdoc/usage/blkmap.rst\nF:\tdrivers/block/blkmap.c\nF:\tinclude/blkmap.h\nF:\ttest/dm/blkmap.c\n\nBOOTSTD\nM:\tSimon Glass <sjg@chromium.org>\nS:\tMaintained\nF:\tboot/bootdev*.c\nF:\tboot/bootflow.c\nF:\tboot/bootmeth*.c\nF:\tboot/bootstd.c\nF:\tcmd/bootdev.c\nF:\tcmd/bootflow.c\nF:\tdoc/develop/bootstd/\nF:\tdoc/usage/bootdev.rst\nF:\tdoc/usage/bootflow.rst\nF:\tdoc/usage/bootmeth.rst\nF:\tdrivers/mmc/mmc_bootdev.c\nF:\tinclude/bootdev.h\nF:\tinclude/bootflow.h\nF:\tinclude/bootmeth.h\nF:\tinclude/bootstd.h\nF:\tnet/eth_bootdevice.c\nF:\ttest/boot/\n\nBOOTMETH_ANDROID\nM:\tMattijs Korpershoek <mkorpershoek@baylibre.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-dfu.git\nF:\tboot/bootmeth_android.c\nF:\tboot/bootmeth_android.h\nF:\tdoc/develop/bootstd/android.rst\n\nBTRFS\nM:\tMarek Behún <kabel@kernel.org>\nR:\tQu Wenruo <wqu@suse.com>\nL:\tlinux-btrfs@vger.kernel.org\nS:\tMaintained\nF:\tcmd/btrfs.c\nF:\tfs/btrfs/\nF:\tinclude/btrfs.h\n\nBUILDMAN\nM:\tSimon Glass <sjg@chromium.org>\nS:\tMaintained\nF:\ttools/buildman/\n\nCAAM\nM:\tGaurav Jain <gaurav.jain@nxp.com>\nS:\tMaintained\nF:\tarch/arm/dts/ls1021a-twr-u-boot.dtsi\nF:\tdrivers/crypto/fsl/\nF:\tinclude/fsl_sec.h\n\nCAT\nM:\tRoger Knecht <rknecht@pm.me>\nS:\tMaintained\nF:\tcmd/cat.c\n\nCFI FLASH\nM:\tStefan Roese <sr@denx.de>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-cfi-flash.git\nF:\tdrivers/mtd/cfi_flash.c\nF:\tdrivers/mtd/jedec_flash.c\n\nCLOCK\nM:\tLukasz Majewski <lukma@denx.de>\nM:\tSean Anderson <seanga2@gmail.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-clk.git\nF:\tdrivers/clk/\nF:\tdrivers/clk/imx/\n\nCOLDFIRE\nM:\tHuan Wang <alison.wang@nxp.com>\nM:\tAngelo Dureghello <angelo@kernel-space.org>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-coldfire.git\nF:\tarch/m68k/\nF:\tdoc/arch/m68k.rst\nF:\tdrivers/watchdog/mcf_wdt.c\n\nCPU\nM:\tSimon Glass <sjg@chromium.org>\nM:\tHou Zhiqiang <Zhiqiang.Hou@nxp.com>\nS:\tMaintained\nF:\tcmd/cpu.c\nF:\tdoc/usage/cpu.rst\n\nCYCLIC\nM:\tStefan Roese <sr@denx.de>\nS:\tMaintained\nF:\tcmd/cyclic.c\nF:\tcommon/cyclic.c\nF:\tinclude/cyclic.h\n\nDEVICETREE REBASING SUBTREE\nM:\tSumit Garg <sumit.garg@linaro.org>\nS:\tMaintained\nF:\tdts/upstream/\n\nDFU\nM:\tLukasz Majewski <lukma@denx.de>\nM:\tMattijs Korpershoek <mkorpershoek@baylibre.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-dfu.git\nF:\tcmd/dfu.c\nF:\tcmd/usb_*.c\nF:\tcommon/dfu.c\nF:\tcommon/update.c\nF:\tdoc/api/dfu.rst\nF:\tdoc/usage/dfu.rst\nF:\tdrivers/dfu/\nF:\tdrivers/usb/*/*gadget*\nF:\tdrivers/usb/gadget/\nF:\tinclude/dfu.h\nF:\tinclude/linux/usb/ch9.h\nF:\tinclude/linux/usb/gadget.h\n\nDRIVER MODEL\nM:\tSimon Glass <sjg@chromium.org>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-dm.git\nF:\tdoc/driver-model/\nF:\tdrivers/core/\nF:\tinclude/dm/\nF:\ttest/dm/\n\nEFI APP\nM:\tSimon Glass <sjg@chromium.org>\nM:\tHeinrich Schuchardt <xypron.glpk@gmx.de>\nS:\tMaintained\nW:\thttps://docs.u-boot.org/en/latest/develop/uefi/u-boot_on_efi.html\nF:\tboard/efi/efi-x86_app\nF:\tconfigs/efi-x86_app*\nF:\tdoc/develop/uefi/u-boot_on_efi.rst\nF:\tdrivers/block/efi-media-uclass.c\nF:\tdrivers/block/sb_efi_media.c\nF:\tlib/efi/efi_app.c\nF:\tscripts/build-efi.sh\nF:\ttest/dm/efi_media.c\n\nEFI PAYLOAD\nM:\tHeinrich Schuchardt <xypron.glpk@gmx.de>\nM:\tIlias Apalodimas <ilias.apalodimas@linaro.org>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-efi.git\nF:\tarch/arm/lib/*_efi.*\nF:\tcmd/bootefi.c\nF:\tcmd/eficonfig.c\nF:\tcmd/efidebug.c\nF:\tcmd/nvedit_efi.c\nF:\tdoc/api/efi.rst\nF:\tdoc/develop/uefi/*\nF:\tdoc/mkeficapsule.1\nF:\tdoc/usage/bootefi.rst\nF:\tdrivers/rtc/emul_rtc.c\nF:\tinclude/capitalization.h\nF:\tinclude/charset.h\nF:\tinclude/cp1250.h\nF:\tinclude/cp437.h\nF:\tinclude/efi*\nF:\tinclude/pe.h\nF:\tinclude/asm-generic/pe.h\nF:\tinclude/mm_communication.h\nF:\tlib/charset.c\nF:\tlib/efi*/\nF:\ttest/lib/efi_*\nF:\ttest/py/tests/test_efi*\nF:\ttest/py/tests/test_efi*/\nF:\ttest/unicode_ut.c\nF:\tcmd/bootefi.c\nF:\tcmd/efidebug.c\nF:\tcmd/nvedit_efi.c\nF:\ttools/efivar.py\nF:\ttools/file2include.c\nF:\ttools/mkeficapsule.c\n\nENVIRONMENT\nM:\tJoe Hershberger <joe.hershberger@ni.com>\nS:\tMaintained\nF:\tenv/\nF:\tinclude/env/\nF:\tinclude/env*\nF:\ttest/env/\nF:\ttools/env/\nF:\ttools/env*\nF:\ttools/mkenvimage.c\n\nENVIRONMENT AS TEXT\nM:\tSimon Glass <sjg@chromium.org>\nS:\tMaintained\nF:\tdoc/usage/environment.rst\nF:\tscripts/env2string.awk\n\nEROFS\nM:\tHuang Jianan <jnhuang95@gmail.com>\nL:\tlinux-erofs@lists.ozlabs.org\nS:\tMaintained\nF:\tcmd/erofs.c\nF:\tfs/erofs/\nF:\tinclude/erofs.h\nF:\ttest/py/tests/test_fs/test_erofs.py\n\nEVENTS\nM:\tSimon Glass <sjg@chromium.org>\nS:\tMaintained\nF:\tcmd/event.c\nF:\tcommon/event.c\nF:\tinclude/event.h\nF:\tscripts/event_dump.py\nF:\ttest/common/event.c\nF:\ttest/py/tests/test_event_dump.py\n\nFASTBOOT\nM:\tMattijs Korpershoek <mkorpershoek@baylibre.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-dfu.git\nF:\tcmd/fastboot.c\nF:\tdoc/android/fastboot*.rst\nF:\tinclude/fastboot.h\nF:\tinclude/fastboot-internal.h\nF:\tinclude/net/fastboot_tcp.h\nF:\tinclude/net/fastboot_udp.h\nF:\tdrivers/fastboot/\nF:\tdrivers/usb/gadget/f_fastboot.c\nF:\tnet/fastboot_tcp.c\nF:\tnet/fastboot_udp.c\nF:\ttest/dm/fastboot.c\n\nFPGA\nM:\tMichal Simek <michal.simek@amd.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-microblaze.git\nF:\tdrivers/fpga/\nF:\tcmd/fpga.c\nF:\tinclude/fpga.h\nF:\ttest/dm/fpga.c\n\nFLATTENED DEVICE TREE\nM:\tSimon Glass <sjg@chromium.org>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-fdt.git\nF:\tlib/fdtdec*\nF:\tlib/libfdt/\nF:\tinclude/fdt*\nF:\tinclude/linux/libfdt*\nF:\tcmd/fdt.c\nF:\tcommon/fdt_support.c\nF:\tscripts/dtc-version.sh\n\nFREEBSD\nM:\tRafal Jaworowski <raj@semihalf.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-freebsd.git\n\nFREESCALE QORIQ\nM:\tPriyanka Jain <priyanka.jain@nxp.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-fsl-qoriq.git\nF:\tdrivers/watchdog/sp805_wdt.c\nF:\tdrivers/watchdog/sbsa_gwdt.c\n\nFWU Multi Bank Update\nM:\tSughosh Ganu <sughosh.ganu@linaro.org>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-efi.git\nF:\tlib/fwu_updates/*\nF:\tdrivers/fwu-mdata/*\nF:\ttools/mkfwumdata.c\n\nGATEWORKS_SC\nM:\tTim Harvey <tharvey@gateworks.com>\nS:\tMaintained\nF:\tdrivers/misc/gsc.c\nF:\tinclude/gsc.h\n\nI2C\nM:\tHeiko Schocher <hs@denx.de>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-i2c.git\nF:\tdrivers/i2c/\n\nKWBIMAGE / KWBOOT TOOLS\nM:\tPali Rohár <pali@kernel.org>\nM:\tMarek Behún <kabel@kernel.org>\nM:\tStefan Roese <sr@denx.de>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-marvell.git\nF:\tdoc/README.kwbimage\nF:\tdoc/kwboot.1\nF:\ttools/kwb*\n\nLED\nM:\tIvan Vozvakhov <i.vozvakhov@vk.team>\nS:\tSupported\nF:\tdoc/device-tree-bindings/leds/leds-pwm.txt\nF:\tdrivers/led/led_pwm.c\n\nLOGGING\nM:\tSimon Glass <sjg@chromium.org>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/u-boot.git\nF:\tcommon/log*\nF:\tcmd/log.c\nF:\tdoc/develop/logging.rst\nF:\tinclude/log.h\nF:\tlib/getopt.c\nF:\ttest/log/\nF:\ttest/py/tests/test_log.py\n\nMALI DISPLAY PROCESSORS\nM:\tLiviu Dudau <liviu.dudau@foss.arm.com>\nS:\tSupported\nT:\tgit git://github.com/ARM-software/u-boot.git\nF:\tdrivers/video/mali_dp.c\nF:\tdrivers/i2c/i2c-versatile.c\n\nMICROBLAZE\nM:\tMichal Simek <monstr@monstr.eu>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-microblaze.git\nF:\tarch/microblaze/\nF:\tcmd/mfsl.c\nF:\tdrivers/gpio/xilinx_gpio.c\nF:\tdrivers/net/xilinx_axi_emac.c\nF:\tdrivers/net/xilinx_emaclite.c\nF:\tdrivers/serial/serial_xuartlite.c\nF:\tdrivers/spi/xilinx_spi.c\nF:\tdrivers/sysreset/sysreset_gpio.c\nF:\tdrivers/timer/xilinx-timer.c\nF:\tdrivers/watchdog/xilinx_tb_wdt.c\nN:\txilinx\n\nMIPS\nM:\tDaniel Schwierzeck <daniel.schwierzeck@gmail.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-mips.git\nF:\tarch/mips/\n\nMIPS CORTINA ACCESS CAxxxx\nM:\tAlex Nemirovsky <alex.nemirovsky@cortina-access.com>\nS:\tSupported\nF:\tboard/cortina/common/\nF:\tdrivers/gpio/cortina_gpio.c\nF:\tdrivers/watchdog/cortina_wdt.c\nF:\tdrivers/serial/serial_cortina.c\nF:\tdrivers/led/led_cortina.c\nF:\tdrivers/mmc/ca_dw_mmc.c\nF:\tdrivers/spi/ca_sflash.c\nF:\tdrivers/i2c/i2c-cortina.c\nF:\tdrivers/i2c/i2c-cortina.h\nF:\tdrivers/net/cortina_ni.c\nF:\tdrivers/net/cortina_ni.h\nF:\tdrivers/net/phy/ca_phy.c\n\nMIPS MEDIATEK\nM:\tWeijie Gao <weijie.gao@mediatek.com>\nR:\tGSS_MTK_Uboot_upstream <GSS_MTK_Uboot_upstream@mediatek.com>\nS:\tMaintained\nF:\tarch/mips/mach-mtmips/\nF:\tarch/mips/dts/mt7620.dtsi\nF:\tarch/mips/dts/mt7621.dtsi\nF:\tarch/mips/dts/mt7620-u-boot.dtsi\nF:\tarch/mips/dts/mt7621-u-boot.dtsi\nF:\tinclude/configs/mt7620.h\nF:\tinclude/configs/mt7621.h\nF:\tinclude/dt-bindings/clock/mt7620-clk.h\nF:\tinclude/dt-bindings/clock/mt7621-clk.h\nF:\tinclude/dt-bindings/clock/mt7628-clk.h\nF:\tinclude/dt-bindings/reset/mt7620-reset.h\nF:\tinclude/dt-bindings/reset/mt7621-reset.h\nF:\tinclude/dt-bindings/reset/mt7628-reset.h\nF:\tdrivers/clk/mtmips/\nF:\tdrivers/pinctrl/mtmips/\nF:\tdrivers/gpio/mt7620_gpio.c\nF:\tdrivers/mtd/nand/raw/mt7621_nand.c\nF:\tdrivers/mtd/nand/raw/mt7621_nand.h\nF:\tdrivers/mtd/nand/raw/mt7621_nand_spl.c\nF:\tdrivers/net/mt7620-eth.c\nF:\tdrivers/phy/mt7620-usb-phy.c\nF:\tdrivers/reset/reset-mtmips.c\nF:\tdrivers/serial/serial_mt7620.c\nF:\tdrivers/spi/mt7620_spi.c\nF:\tdrivers/sysreset/sysreset_resetctl.c\nF:\tdrivers/watchdog/mt7620_wdt.c\n\nMIPS MSCC\nM:\tGregory CLEMENT <gregory.clement@bootlin.com>\nM:\tLars Povlsen <lars.povlsen@microchip.com>\nM:\tHoratiu Vultur <horatiu.vultur@microchip.com>\nS:\tMaintained\nF:\tarch/mips/mach-mscc/\nF:\tarch/mips/dts/luton*\nF:\tarch/mips/dts/mscc*\nF:\tarch/mips/dts/ocelot*\nF:\tarch/mips/dts/jr2*\nF:\tarch/mips/dts/serval*\nF:\tboard/mscc/\nF:\tconfigs/mscc*\nF:\tdrivers/gpio/mscc_sgpio.c\nF:\tdrivers/spi/mscc_bb_spi.c\nF:\tinclude/configs/vcoreiii.h\nF:\tinclude/dt-bindings/mscc/\nF:\tdrivers/pinctrl/mscc/\nF:\tdrivers/net/mscc_eswitch/\n\nMIPS JZ4780\nM:\tEzequiel Garcia <ezequiel@collabora.com>\nS:\tMaintained\nF:\tarch/mips/mach-jz47xx/\n\nMIPS Octeon\nM:\tAaron Williams <awilliams@marvell.com>\nS:\tMaintained\nF:\tarch/mips/mach-octeon/\nF:\tarch/mips/include/asm/arch-octeon/\nF:\tarch/mips/dts/mrvl,cn73xx.dtsi\n\nMMC\nM:\tPeng Fan <peng.fan@nxp.com>\nM:\tJaehoon Chung <jh80.chung@samsung.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-mmc.git\nF:\tdrivers/mmc/\n\nNETWORK\nM:\tJoe Hershberger <joe.hershberger@ni.com>\nM:\tRamon Fried <rfried.dev@gmail.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-net.git\nF:\tdrivers/net/\nF:\tinclude/net.h\nF:\tnet/\n\nNETWORK (LWIP)\nM:\tJerome Forissier <jerome.forissier@linaro.org>\nS:\tMaintained\nF:\tcmd/net-lwip.c\nF:\tconfigs/qemu_arm64_lwip_defconfig\nF:\tdrivers/net/sandbox-lwip.c\nF:\tinclude/net-lwip.h\nF:\tlib/lwip/Makefile\nF:\tlib/lwip/u-boot/\nF:\tnet/lwip/\n\nNIOS\nM:\tThomas Chou <thomas@wytron.com.tw>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-nios.git\nF:\tarch/nios2/\n\nNVMe\nM:\tBin Meng <bmeng.cn@gmail.com>\nS:\tMaintained\nF:\tdrivers/nvme/\nF:\tcmd/nvme.c\nF:\tinclude/nvme.h\nF:\tdoc/develop/driver-model/nvme.rst\n\nNVMXIP\nM:\tAbdellatif El Khlifi <abdellatif.elkhlifi@arm.com>\nS:\tMaintained\nF:\tdoc/develop/driver-model/nvmxip.rst\nF:\tdoc/device-tree-bindings/nvmxip/nvmxip_qspi.txt\nF:\tdrivers/mtd/nvmxip/\nF:\ttest/dm/nvmxip.c\n\nNVMEM\nM:\tSean Anderson <seanga2@gmail.com>\nS:\tMaintained\nF:\tdoc/api/nvmem.rst\nF:\tdrivers/misc/nvmem.c\nF:\tdrivers/reboot-mode/reboot-mode-nvmem.c\nF:\tinclude/nvmem.h\n\nNXP C45 TJA11XX PHY DRIVER\nM:\tRadu Pirea <radu-nicolae.pirea@oss.nxp.com>\nS:\tMaintained\nF:\tdrivers/net/phy/nxp-c45-tja11xx.c\n\nONENAND\n#M:\tLukasz Majewski <l.majewski@majess.pl>\nS:\tOrphaned (Since 2017-01)\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-onenand.git\nF:\tdrivers/mtd/onenand/\n\nOUT4-IMX6ULL-NANO BOARD\nM:\tOleh Kravchenko <oleg@kaa.org.ua>\nS:\tMaintained\nT:\tgit https://github.com/Oleh-Kravchenko/u-boot-out4.git\nF:\tarch/arm/dts/ev-imx280-nano-x-mb.dts\nF:\tarch/arm/dts/o4-imx-nano.dts\nF:\tarch/arm/dts/o4-imx6ull-nano.dtsi\nF:\tboard/out4\nF:\tconfigs/ev-imx280-nano-x-mb_defconfig\nF:\tconfigs/o4-imx6ull-nano_defconfig\nF:\tinclude/configs/o4-imx6ull-nano.h\n\nPATMAN\nM:\tSimon Glass <sjg@chromium.org>\nS:\tMaintained\nF:\ttools/patman/\n\nPCIe DWC IMX\nM:\tSumit Garg <sumit.garg@linaro.org>\nS:\tMaintained\nF:\tdrivers/pci/pcie_dw_imx.c\nF:\tdrivers/phy/phy-imx8m-pcie.c\n\nPCI Endpoint\nM:\tRamon Fried <rfried.dev@gmail.com>\nS:\tMaintained\nF:\tdrivers/pci_endpoint/\nF:  include/pci_ep.h\n\nPCI MPC85xx\nM:\tHeiko Schocher <hs@denx.de>\nS:\tMaintained\nF:\tdrivers/pci/pci_mpc85xx.c\n\nPCI MPS\nM:\tStephen Carlson <stcarlso@linux.microsoft.com>\nS:\tMaintained\nF:\tcmd/pci_mps.c\nF:\ttest/cmd/pci_mps.c\n\nPOWER\nM:\tJaehoon Chung <jh80.chung@samsung.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-pmic.git\nF:\tdrivers/power/\nF:\tinclude/power/\n\nPOWERPC\nS:\tOrphan (Since 2022-10-21)\nF:\tarch/powerpc/\n\nPOWERPC MPC8XX\nM:\tChristophe Leroy <christophe.leroy@csgroup.eu>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-mpc8xx.git\nF:\tarch/powerpc/cpu/mpc8xx/\n\nPOWERPC MPC83XX\nM:\tMario Six <mario.six@gdsys.cc>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-mpc83xx.git\nF:\tdrivers/ram/mpc83xx_sdram.c\nF:\tinclude/dt-bindings/memory/mpc83xx-sdram.h\nF:\tdrivers/sysreset/sysreset_mpc83xx.c\nF:\tdrivers/sysreset/sysreset_mpc83xx.h\nF:\tdrivers/clk/mpc83xx_clk.c\nF:\tdrivers/clk/mpc83xx_clk.h\nF:\tinclude/dt-bindings/clk/mpc83xx-clk.h\nF:\tdrivers/timer/mpc83xx_timer.c\nF:\tdrivers/cpu/mpc83xx_cpu.c\nF:\tdrivers/cpu/mpc83xx_cpu.h\nF:\tdrivers/misc/mpc83xx_serdes.c\nF:\tarch/powerpc/cpu/mpc83xx/\nF:\tarch/powerpc/include/asm/arch-mpc83xx/\n\nPOWERPC MPC85XX\nM:\tMarek Behún <kabel@kernel.org>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-mpc85xx.git\nF:\tarch/powerpc/cpu/mpc85xx/\n\nRAW NAND\nM:\tDario Binacchi <dario.binacchi@amarulasolutions.com>\nM:\tMichael Trimarchi <michael@amarulasolutions.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-nand-flash.git\nF:\tdrivers/mtd/nand/raw/\n\nRISC-V\nM:\tRick Chen <rick@andestech.com>\nM:\tLeo <ycliang@andestech.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-riscv.git\nF:\tarch/riscv/\nF:\tcmd/riscv/\nF:\tdoc/arch/riscv.rst\nF:\tdoc/usage/sbi.rst\nF:\tdrivers/sysreset/sysreset_sbi.c\nF:\tdrivers/timer/andes_plmt_timer.c\nF:\tdrivers/timer/riscv_aclint_timer.c\nF:\ttools/prelink-riscv.c\n\nRISC-V CANAAN KENDRYTE K210\nM:\tSean Anderson <seanga2@gmail.com>\nS:\tMaintained\nF:\tdoc/device-tree-bindings/mfd/canaan,k210-sysctl.txt\nF:\tdoc/device-tree-bindings/pinctrl/canaan,k210-fpioa.txt\nF:\tdrivers/clk/clk_k210.c\nF:\tdrivers/pinctrl/pinctrl-k210.c\nF:\tinclude/k210/\n\nRNG\nM:\tSughosh Ganu <sughosh.ganu@linaro.org>\nR:\tHeinrich Schuchardt <xypron.glpk@gmx.de>\nS:\tMaintained\nF:\tcmd/rng.c\nF:\tdoc/api/rng.rst\nF:\tdrivers/rng/\nF:\tdrivers/virtio/virtio_rng.c\nF:\tinclude/rng.h\n\nROCKUSB\nM:\tEddie Cai <eddie.cai.linux@gmail.com>\nS:\tMaintained\nF:\tdrivers/usb/gadget/f_rockusb.c\nF:\tcmd/rockusb.c\nF:\tdoc/README.rockusb\n\nSANDBOX\nM:\tSimon Glass <sjg@chromium.org>\nS:\tMaintained\nF:\tarch/sandbox/\nF:\tconfigs/sandbox*\nF:\tdoc/arch/sandbox.rst\nF:\tdrivers/*/*sandbox*.c\nF:\tinclude/dt-bindings/*/sandbox*.h\nF:\tinclude/os.h\n\nSEAMA\nM:\tLinus Walleij <linus.walleij@linaro.org>\nS:\tMaintained\nF:\tcmd/seama.c\nF:\tdoc/usage/cmd/seama.rst\nF:\ttest/cmd/seama.c\n\nSEMIHOSTING\nR:\tSean Anderson <sean.anderson@seco.com>\nS:\tOrphaned\nN:\tsemihosting\n\nSETEXPR\nM:\tRoland Gaudig <roland.gaudig@weidmueller.com>\nS:\tMaintained\nF:\tcmd/printf.c\nF:\tdoc/usage/setexpr.rst\n\nSH\nM:\tMarek Vasut <marek.vasut+renesas@gmail.com>\nM:\tNobuhiro Iwamatsu <iwamatsu@nigauri.org>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-sh.git\nF:\tarch/sh/\n\nSL28CLPD\nM:\tMichael Walle <michael@walle.cc>\nS:\tMaintained\nF:\tdrivers/gpio/sl28cpld-gpio.c\nF:\tdrivers/misc/sl28cpld.c\nF:\tdrivers/watchdog/sl28cpld-wdt.c\n\nSMCCC TRNG\nM:\tEtienne Carriere <etienne.carriere@linaro.org>\nS:\tMaintained\nF:\tdrivers/rng/smccc_trng.c\n\nSPI\nM:\tJagan Teki <jagan@amarulasolutions.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-spi.git\nF:\tdrivers/spi/\nF:\tinclude/spi*\n\nSPI NAND\nM:\tDario Binacchi <dario.binacchi@amarulasolutions.com>\nM:\tMichael Trimarchi <michael@amarulasolutions.com>\nR:\tFrieder Schrempf <frieder.schrempf@kontron.de>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-nand-flash.git\nF:\tdrivers/mtd/nand/spi/\n\nSPI-NOR\nM:\tJagan Teki <jagan@amarulasolutions.com>\nM:\tVignesh R <vigneshr@ti.com>\nR:\tTudor Ambarus <tudor.ambarus@linaro.org>\nS:\tMaintained\nF:\tdrivers/mtd/spi/\nF:\tinclude/spi_flash.h\nF:\tinclude/linux/mtd/cfi.h\nF:\tinclude/linux/mtd/spi-nor.h\n\nSPMI\nM:\tMateusz Kulikowski <mateusz.kulikowski@gmail.com>\nS:\tMaintained\nF:\tdrivers/spmi/\nF:\tinclude/spmi/\n\nSQUASHFS\nM:\tJoao Marcos Costa <jmcosta944@gmail.com>\nR:\tThomas Petazzoni <thomas.petazzoni@bootlin.com>\nR:\tMiquel Raynal <miquel.raynal@bootlin.com>\nS:\tMaintained\nF:\tfs/squashfs/\nF:\tinclude/sqfs.h\nF:\tcmd/sqfs.c\nF:\ttest/py/tests/test_fs/test_squashfs/\n\nSTACKPROTECTOR\nM:\tWilliam Zhang <william.zhang@broadcom.com>\nS:\tMaintained\nF:\tcommon/stackprot.c\nF:\tcmd/stackprot_test.c\nF:\ttest/py/tests/test_stackprotector.py\n\nTARGET_BCMNS3\nM:\tRayagonda Kokatanur <rayagonda.kokatanur@broadcom.com>\nS:\tMaintained\nF:\tboard/broadcom/bcmns3/\nF:\tdoc/README.bcmns3\nF:\tconfigs/bcm_ns3_defconfig\nF:\tinclude/configs/bcm_ns3.h\nF:\tinclude/dt-bindings/memory/bcm-ns3-mc.h\nF:\tarch/arm/Kconfig\nF:\tarch/arm/dts/ns3-board.dts\nF:\tarch/arm/dts/ns3.dtsi\nF:\tarch/arm/cpu/armv8/bcmns3\nF:\tarch/arm/include/asm/arch-bcmns3/\nF:\tcmd/broadcom/Makefile\nF:\tcmd/broadcom/chimp_boot.c\nF:\tcmd/broadcom/nitro_image_load.c\nF:\tcmd/broadcom/chimp_handshake.c\n\nTDA19988 HDMI ENCODER\nM:\tLiviu Dudau <liviu.dudau@foss.arm.com>\nS:\tMaintained\nF:\tdrivers/video/tda19988.c\n\nTI LP5562 LED DRIVER\nM:\tRasmus Villemoes <rasmus.villemoes@prevas.dk>\nS:\tSupported\nF:\tdrivers/led/led_lp5562.c\n\nTI SYSTEM SECURITY\nM:\tAndrew F. Davis <afd@ti.com>\nS:\tSupported\nF:\tarch/arm/mach-omap2/omap5/sec_entry_cpu1.S\nF:\tarch/arm/mach-omap2/sec-common.c\nF:\tarch/arm/mach-omap2/config_secure.mk\nF:\tarch/arm/mach-k3/security.c\nF:\tconfigs/am335x_hs_evm_defconfig\nF:\tconfigs/am335x_hs_evm_spi_defconfig\nF:\tconfigs/am335x_hs_evm_uart_defconfig\nF:\tconfigs/am43xx_hs_evm_defconfig\nF:\tconfigs/am43xx_hs_evm_qspi_defconfig\nF:\tconfigs/am57xx_hs_evm_defconfig\nF:\tconfigs/am57xx_hs_evm_usb_defconfig\nF:\tconfigs/dra7xx_hs_evm_defconfig\nF:\tconfigs/dra7xx_hs_evm_usb_defconfig\nF:\tconfigs/k2hk_hs_evm_defconfig\nF:\tconfigs/k2e_hs_evm_defconfig\nF:\tconfigs/k2g_hs_evm_defconfig\nF:\tconfigs/k2l_hs_evm_defconfig\n\nTPM DRIVERS\nM:\tIlias Apalodimas <ilias.apalodimas@linaro.org>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-tpm.git\nF:\tcmd/tpm*\nF:\tdrivers/tpm/\nF:\tinclude/tpm*\nF:\tlib/tpm*\n\nTQ GROUP\n#M:\tMartin Krause <martin.krause@tq-systems.de>\nS:\tOrphaned (Since 2016-02)\nT:\tgit git://git.denx.de/u-boot-tq-group.git\n\nTEE\nM:\tJens Wiklander <jens.wiklander@linaro.org>\nM:\tIlias Apalodimas <ilias.apalodimas@linaro.org>\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-tpm.git\nS:\tMaintained\nF:\tcmd/optee*\nF:\tdoc/README.tee\nF:\tdoc/device-tree-bindings/firmware/linaro,optee-tz.txt\nF:\tdrivers/firmware/scmi/optee_agent.c\nF:\tdrivers/tee/\nF:\tinclude/sandboxtee.h\nF:\tinclude/tee.h\nF:\tinclude/tee/\nF:\tinclude/test/optee.h\nF:\ttest/dm/tee.c\nF:\ttest/optee/\nF:\ttest/py/tests/test_optee_rpmb.py\n\nTEE-lib\nM:\tBryan O'Donoghue <bryan.odonoghue@linaro.org>\nS:\tMaintained\nF:\tlib/optee\n\nUBI\nM:\tKyungmin Park <kmpark@infradead.org>\nM:\tHeiko Schocher <hs@denx.de>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-ubi.git\nF:\tdrivers/mtd/ubi/\n\nUFETCH\nM:\tCaleb Connolly <caleb.connolly@linaro.org>\nS:\tMaintained\nF:\tcmd/ufetch.c\n\nUFS\nM:\tNeil Armstrong <neil.armstrong@linaro.org>\nM:\tBhupesh Sharma <bhupesh.linux@gmail.com>\nM:\tNeha Malcom Francis <n-francis@ti.com>\nS:\tMaintained\nF:\tdrivers/ufs/\n\nUPL\nM:\tSimon Glass <sjg@chromium.org>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-dm.git\nF:\tboot/upl*\nF:\tcmd/upl.c\nF:\tcommon/spl/spl_upl.c\nF:\tdoc/usage/upl.rst\nF:\tdoc/usage/cmd/upl.rst\nF:\tinclude/upl.h\nF:\ttest/boot/upl.c\nF:\ttest/py/tests/test_upl.py\n\nUSB\nM:\tMarek Vasut <marex@denx.de>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-usb.git\nF:\tdrivers/usb/\nF:\tcommon/usb.c\nF:\tcommon/usb_kbd.c\nF:\tcommon/usb_storage.c\nF:\tinclude/usb.h\n\nUSB TCPM\nM:\tSebastian Reichel <sebastian.reichel@collabora.com>\nS:\tMaintained\nF:\tcmd/tcpm.c\nF:\tdoc/usage/cmd/tcpm.rst\nF:\tdrivers/usb/tcpm/\nF:\tinclude/usb/pd.h\nF:\tinclude/usb/tcpm.h\n\nUSB xHCI\nM:\tBin Meng <bmeng.cn@gmail.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-usb.git topic-xhci\nF:\tdrivers/usb/host/xhci*\nF:\tinclude/usb/xhci.h\n\nUUID testing\nM:\tAbdellatif El Khlifi <abdellatif.elkhlifi@arm.com>\nS:\tMaintained\nF:\ttest/lib/uuid.c\n\nVIDEO\nM:\tAnatolij Gustschin <agust@denx.de>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-video.git\nF:\tdrivers/video/\nF:\tinclude/video*.h\n\nVirtIO\nM:\tBin Meng <bmeng.cn@gmail.com>\nS:\tMaintained\nF:\tdrivers/virtio/\nF:\tcmd/virtio.c\nF:\tinclude/config/virtio/\nF:\tinclude/config/virtio.h\nF:\tinclude/config/cmd/virtio.h\nF:\tinclude/virtio*.h\nF:\ttest/dm/virtio.c\nF:\tdoc/develop/driver-model/virtio.rst\n\nWATCHDOG\nM:\tStefan Roese <sr@denx.de>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-watchdog.git\nF:\tcmd/wdt.c\nF:\tdrivers/watchdog/\nF:\tinclude/watchdog*.h\n\nX86\nM:\tSimon Glass <sjg@chromium.org>\nM:\tBin Meng <bmeng.cn@gmail.com>\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/custodians/u-boot-x86.git\nF:\tarch/x86/\nF:\tcmd/x86/\n\nXEN\nM:\tAnastasiia Lukianenko <vicooodin@gmail.com>\nM:\tOleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>\nS:\tMaintained\nF:\tarch/arm/cpu/armv8/xen/\nF:\tarch/arm/include/asm/xen.h\nF:\tarch/arm/include/asm/xen/\nF:\tcmd/pvblock.c\nF:\tdrivers/serial/serial_xen.c\nF:\tdrivers/xen/\nF:\tinclude/pvblock.h\nF:\tinclude/xen/\nF:\tinclude/xen.h\nF:\tlib/sscanf.c\nF:\ttest/lib/sscanf.c\n\nXTENSA\nM:\tMax Filippov <jcmvbkbc@gmail.com>\nS:\tMaintained\nF:\tarch/xtensa/\n\nXXD\nM:\tRoger Knecht <rknecht@pm.me>\nS:\tMaintained\nF:\tcmd/xxd.c\nF:\tdoc/usage/cmd/xxd.rst\nF:\ttest/py/tests/test_xxd/\n\nTHE REST\nM:\tTom Rini <trini@konsulko.com>\nL:\tu-boot@lists.denx.de\nQ:\thttp://patchwork.ozlabs.org/project/uboot/list/\nS:\tMaintained\nT:\tgit https://source.denx.de/u-boot/u-boot.git\nF:\tconfigs/tools-only_defconfig\nF:\t*\nF:\t*/\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 82.02734375,
          "content": "# SPDX-License-Identifier: GPL-2.0+\n\nVERSION = 2025\nPATCHLEVEL = 01\nSUBLEVEL =\nEXTRAVERSION =\nNAME =\n\n# *DOCUMENTATION*\n# To see a list of typical targets execute \"make help\"\n# More info can be located in ./README\n# Comments in this file are targeted only to the developer, do not\n# expect to learn how to build the kernel reading this file.\n\n# Do not use make's built-in rules and variables\n# (this increases performance and avoids hard-to-debug behaviour)\nMAKEFLAGS += -rR\n\n# Determine target architecture for the sandbox\ninclude include/host_arch.h\nifeq (\"\", \"$(CROSS_COMPILE)\")\n  MK_ARCH=\"${shell uname -m}\"\nelse\n  MK_ARCH=\"${shell echo $(CROSS_COMPILE) | sed -n 's/^\\(.*ccache\\)\\{0,1\\}[[:space:]]*\\([^\\/]*\\/\\)*\\([^-]*\\)-[^[:space:]]*/\\3/p'}\"\nendif\nunexport HOST_ARCH\nifeq (\"x86_64\", $(MK_ARCH))\n  export HOST_ARCH=$(HOST_ARCH_X86_64)\nelse ifneq (,$(findstring $(MK_ARCH), \"i386\" \"i486\" \"i586\" \"i686\"))\n  export HOST_ARCH=$(HOST_ARCH_X86)\nelse ifneq (,$(findstring $(MK_ARCH), \"aarch64\" \"armv8l\"))\n  export HOST_ARCH=$(HOST_ARCH_AARCH64)\nelse ifneq (,$(findstring $(MK_ARCH), \"arm\" \"armv7\" \"armv7a\" \"armv7l\"))\n  export HOST_ARCH=$(HOST_ARCH_ARM)\nelse ifeq (\"riscv32\", $(MK_ARCH))\n  export HOST_ARCH=$(HOST_ARCH_RISCV32)\nelse ifeq (\"riscv64\", $(MK_ARCH))\n  export HOST_ARCH=$(HOST_ARCH_RISCV64)\nendif\nundefine MK_ARCH\n\n# Avoid funny character set dependencies\nunexport LC_ALL\nLC_COLLATE=C\nLC_NUMERIC=C\nexport LC_COLLATE LC_NUMERIC\n\n# Avoid interference with shell env settings\nunexport GREP_OPTIONS\n\n# We are using a recursive build, so we need to do a little thinking\n# to get the ordering right.\n#\n# Most importantly: sub-Makefiles should only ever modify files in\n# their own directory. If in some directory we have a dependency on\n# a file in another dir (which doesn't happen often, but it's often\n# unavoidable when linking the built-in.o targets which finally\n# turn into vmlinux), we will call a sub make in that other dir, and\n# after that we are sure that everything which is in that other dir\n# is now up to date.\n#\n# The only cases where we need to modify files which have global\n# effects are thus separated out and done before the recursive\n# descending is started. They are now explicitly listed as the\n# prepare rule.\n\n# Beautify output\n# ---------------------------------------------------------------------------\n#\n# Normally, we echo the whole command before executing it. By making\n# that echo $($(quiet)$(cmd)), we now have the possibility to set\n# $(quiet) to choose other forms of output instead, e.g.\n#\n#         quiet_cmd_cc_o_c = Compiling $(RELDIR)/$@\n#         cmd_cc_o_c       = $(CC) $(c_flags) -c -o $@ $<\n#\n# If $(quiet) is empty, the whole command will be printed.\n# If it is set to \"quiet_\", only the short version will be printed.\n# If it is set to \"silent_\", nothing will be printed at all, since\n# the variable $(silent_cmd_cc_o_c) doesn't exist.\n#\n# A simple variant is to prefix commands with $(Q) - that's useful\n# for commands that shall be hidden in non-verbose mode.\n#\n#\t$(Q)ln $@ :<\n#\n# If KBUILD_VERBOSE equals 0 then the above command will be hidden.\n# If KBUILD_VERBOSE equals 1 then the above command is displayed.\n#\n# To put more focus on warnings, be less verbose as default\n# Use 'make V=1' to see the full commands\n\nifeq (\"$(origin V)\", \"command line\")\n  KBUILD_VERBOSE = $(V)\nendif\nifndef KBUILD_VERBOSE\n  KBUILD_VERBOSE = 0\nendif\n\nifeq ($(KBUILD_VERBOSE),1)\n  quiet =\n  Q =\nelse\n  quiet=quiet_\n  Q = @\nendif\n\n# If the user is running make -s (silent mode), suppress echoing of\n# commands\n\nifneq ($(filter 4.%,$(MAKE_VERSION)),)\t# make-4\nifneq ($(filter %s ,$(firstword x$(MAKEFLAGS))),)\n  quiet=silent_\nendif\nelse\t\t\t\t\t# make-3.8x\nifneq ($(filter s% -s%,$(MAKEFLAGS)),)\n  quiet=silent_\nendif\nendif\n\nexport quiet Q KBUILD_VERBOSE\n\n# kbuild supports saving output files in a separate directory.\n# To locate output files in a separate directory two syntaxes are supported.\n# In both cases the working directory must be the root of the kernel src.\n# 1) O=\n# Use \"make O=dir/to/store/output/files/\"\n#\n# 2) Set KBUILD_OUTPUT\n# Set the environment variable KBUILD_OUTPUT to point to the directory\n# where the output files shall be placed.\n# export KBUILD_OUTPUT=dir/to/store/output/files/\n# make\n#\n# The O= assignment takes precedence over the KBUILD_OUTPUT environment\n# variable.\n\n# KBUILD_SRC is set on invocation of make in OBJ directory\n# KBUILD_SRC is not intended to be used by the regular user (for now)\nifeq ($(KBUILD_SRC),)\n\n# OK, Make called in directory where kernel src resides\n# Do we want to locate output files in a separate directory?\nifeq (\"$(origin O)\", \"command line\")\n  KBUILD_OUTPUT := $(O)\nendif\n\n# That's our default target when none is given on the command line\nPHONY := _all\n_all:\n\n# Cancel implicit rules on top Makefile\n$(CURDIR)/Makefile Makefile: ;\n\nifneq ($(KBUILD_OUTPUT),)\n# Invoke a second make in the output directory, passing relevant variables\n# check that the output directory actually exists\nsaved-output := $(KBUILD_OUTPUT)\nKBUILD_OUTPUT := $(shell mkdir -p $(KBUILD_OUTPUT) && cd $(KBUILD_OUTPUT) \\\n\t\t\t\t\t\t\t\t&& /bin/pwd)\n$(if $(KBUILD_OUTPUT),, \\\n     $(error failed to create output directory \"$(saved-output)\"))\n\n# Look for make include files relative to root of kernel src\n#\n# This does not become effective immediately because MAKEFLAGS is re-parsed\n# once after the Makefile is read.  It is OK since we are going to invoke\n# 'sub-make' below.\nMAKEFLAGS += --include-dir=$(CURDIR)\n\nPHONY += $(MAKECMDGOALS) sub-make\n\n$(filter-out _all sub-make $(CURDIR)/Makefile, $(MAKECMDGOALS)) _all: sub-make\n\t@:\n\nsub-make: FORCE\n\t$(Q)$(MAKE) -C $(KBUILD_OUTPUT) KBUILD_SRC=$(CURDIR) \\\n\t-f $(CURDIR)/Makefile $(filter-out _all sub-make,$(MAKECMDGOALS))\n\n# Leave processing to above invocation of make\nskip-makefile := 1\nendif # ifneq ($(KBUILD_OUTPUT),)\nendif # ifeq ($(KBUILD_SRC),)\n\n# We process the rest of the Makefile if this is the final invocation of make\nifeq ($(skip-makefile),)\n\n# Do not print \"Entering directory ...\",\n# but we want to display it when entering to the output directory\n# so that IDEs/editors are able to understand relative filenames.\nMAKEFLAGS += --no-print-directory\n\n# Call a source code checker (by default, \"sparse\") as part of the\n# C compilation.\n#\n# Use 'make C=1' to enable checking of only re-compiled files.\n# Use 'make C=2' to enable checking of *all* source files, regardless\n# of whether they are re-compiled or not.\n#\n# See the file \"doc/sparse.txt\" for more details, including\n# where to get the \"sparse\" utility.\n\nifeq (\"$(origin C)\", \"command line\")\n  KBUILD_CHECKSRC = $(C)\nendif\nifndef KBUILD_CHECKSRC\n  KBUILD_CHECKSRC = 0\nendif\n\n# Use make M=dir to specify directory of external module to build\n# Old syntax make ... SUBDIRS=$PWD is still supported\n# Setting the environment variable KBUILD_EXTMOD take precedence\nifdef SUBDIRS\n  KBUILD_EXTMOD ?= $(SUBDIRS)\nendif\n\nifeq (\"$(origin M)\", \"command line\")\n  KBUILD_EXTMOD := $(M)\nendif\n\n# If building an external module we do not care about the all: rule\n# but instead _all depend on modules\nPHONY += all\nifeq ($(KBUILD_EXTMOD),)\n_all: all\nelse\n_all: modules\nendif\n\nifeq ($(KBUILD_SRC),)\n        # building in the source tree\n        srctree := .\nelse\n        ifeq ($(KBUILD_SRC)/,$(dir $(CURDIR)))\n                # building in a subdirectory of the source tree\n                srctree := ..\n        else\n                srctree := $(KBUILD_SRC)\n        endif\nendif\nobjtree\t\t:= .\nsrc\t\t:= $(srctree)\nobj\t\t:= $(objtree)\n\nVPATH\t\t:= $(srctree)$(if $(KBUILD_EXTMOD),:$(KBUILD_EXTMOD))\n\nexport srctree objtree VPATH\n\n# Make sure CDPATH settings don't interfere\nunexport CDPATH\n\n#########################################################################\n\nHOSTARCH := $(shell uname -m | \\\n\tsed -e s/i.86/x86/ \\\n\t    -e s/sun4u/sparc64/ \\\n\t    -e s/arm.*/arm/ \\\n\t    -e s/sa110/arm/ \\\n\t    -e s/ppc64/powerpc/ \\\n\t    -e s/ppc/powerpc/ \\\n\t    -e s/macppc/powerpc/\\\n\t    -e s/sh.*/sh/)\n\nHOSTOS := $(shell uname -s | tr '[:upper:]' '[:lower:]' | \\\n\t    sed -e 's/\\(cygwin\\).*/cygwin/')\n\nexport\tHOSTARCH HOSTOS\n\n#########################################################################\n\n# set default to nothing for native builds\nifeq ($(HOSTARCH),$(ARCH))\nCROSS_COMPILE ?=\nendif\n\nKCONFIG_CONFIG\t?= .config\nexport KCONFIG_CONFIG\n\n# SHELL used by kbuild\nCONFIG_SHELL := $(shell if [ -x \"$$BASH\" ]; then echo $$BASH; \\\n\t  else if [ -x /bin/bash ]; then echo /bin/bash; \\\n\t  else echo sh; fi ; fi)\n\nHOST_LFS_CFLAGS := $(shell getconf LFS_CFLAGS 2>/dev/null)\nHOST_LFS_LDFLAGS := $(shell getconf LFS_LDFLAGS 2>/dev/null)\nHOST_LFS_LIBS := $(shell getconf LFS_LIBS 2>/dev/null)\n\nHOSTCC       = cc\nHOSTCXX      = c++\nKBUILD_HOSTCFLAGS   := -Wall -Wstrict-prototypes -O2 -fomit-frame-pointer \\\n\t\t$(HOST_LFS_CFLAGS) $(HOSTCFLAGS)\nKBUILD_HOSTCXXFLAGS := -O2 $(HOST_LFS_CFLAGS) $(HOSTCXXFLAGS)\nKBUILD_HOSTLDFLAGS  := $(HOST_LFS_LDFLAGS) $(HOSTLDFLAGS)\nKBUILD_HOSTLDLIBS   := $(HOST_LFS_LIBS) $(HOSTLDLIBS)\n\n# With the move to GCC 6, we have implicitly upgraded our language\n# standard to GNU11 (see https://gcc.gnu.org/gcc-5/porting_to.html).\n# Some Linux distributions (including RHEL7, SLES13, Debian 8) still\n# have older compilers as their default, so we make it explicit for\n# these that our host tools are GNU11 (i.e. C11 w/ GNU extensions).\nCSTD_FLAG := -std=gnu11\nKBUILD_HOSTCFLAGS += $(CSTD_FLAG)\n\nifeq ($(HOSTOS),cygwin)\nKBUILD_HOSTCFLAGS\t+= -ansi\nendif\n\n# Mac OS X / Darwin's C preprocessor is Apple specific.  It\n# generates numerous errors and warnings.  We want to bypass it\n# and use GNU C's cpp.\tTo do this we pass the -traditional-cpp\n# option to the compiler.  Note that the -traditional-cpp flag\n# DOES NOT have the same semantics as GNU C's flag, all it does\n# is invoke the GNU preprocessor in stock ANSI/ISO C fashion.\n#\n# Apple's linker is similar, thanks to the new 2 stage linking\n# multiple symbol definitions are treated as errors, hence the\n# -multiply_defined suppress option to turn off this error.\n#\nifeq ($(HOSTOS),darwin)\n# get major and minor product version (e.g. '10' and '6' for Snow Leopard)\nDARWIN_MAJOR_VERSION\t:= $(shell sw_vers -productVersion | cut -f 1 -d '.')\nDARWIN_MINOR_VERSION\t:= $(shell sw_vers -productVersion | cut -f 2 -d '.')\n\nos_x_before\t= $(shell if [ $(DARWIN_MAJOR_VERSION) -le $(1) -a \\\n\t$(DARWIN_MINOR_VERSION) -le $(2) ] ; then echo \"$(3)\"; else echo \"$(4)\"; fi ;)\n\nos_x_after = $(shell if [ $(DARWIN_MAJOR_VERSION) -ge $(1) -a \\\n\t$(DARWIN_MINOR_VERSION) -ge $(2) ] ; then echo \"$(3)\"; else echo \"$(4)\"; fi ;)\n\n# Snow Leopards build environment has no longer restrictions as described above\nHOSTCC       = $(call os_x_before, 10, 5, \"cc\", \"gcc\")\nKBUILD_HOSTCFLAGS  += $(call os_x_before, 10, 4, \"-traditional-cpp\")\nKBUILD_HOSTLDFLAGS += $(call os_x_before, 10, 5, \"-multiply_defined suppress\")\n\n# macOS Mojave (10.14.X)\n# Undefined symbols for architecture x86_64: \"_PyArg_ParseTuple\"\nKBUILD_HOSTLDFLAGS += $(call os_x_after, 10, 14, \"-lpython -dynamclib\", \"\")\nendif\n\n# Decide whether to build built-in, modular, or both.\n# Normally, just do built-in.\n\nKBUILD_MODULES :=\nKBUILD_BUILTIN := 1\n\n# If we have only \"make modules\", don't compile built-in objects.\n# When we're building modules with modversions, we need to consider\n# the built-in objects during the descend as well, in order to\n# make sure the checksums are up to date before we record them.\n\nifeq ($(MAKECMDGOALS),modules)\n  KBUILD_BUILTIN := $(if $(CONFIG_MODVERSIONS),1)\nendif\n\n# If we have \"make <whatever> modules\", compile modules\n# in addition to whatever we do anyway.\n# Just \"make\" or \"make all\" shall build modules as well\n\n# U-Boot does not need modules\n#ifneq ($(filter all _all modules,$(MAKECMDGOALS)),)\n#  KBUILD_MODULES := 1\n#endif\n\n#ifeq ($(MAKECMDGOALS),)\n#  KBUILD_MODULES := 1\n#endif\n\n# Check ths size of a binary:\n# Args:\n#   $1: File to check\n#   #2: Size limit in bytes (decimal or 0xhex)\ndefine size_check\n\tactual=$$( wc -c $1 | awk '{print $$1}'); \\\n\tlimit=$$( printf \"%d\" $2 ); \\\n\tif test $$actual -gt $$limit; then \\\n\t\techo \"$1 exceeds file size limit:\" >&2; \\\n\t\techo \"  limit:  $$(printf %#x $$limit) bytes\" >&2; \\\n\t\techo \"  actual: $$(printf %#x $$actual) bytes\" >&2; \\\n\t\techo \"  excess: $$(printf %#x $$((actual - limit))) bytes\" >&2;\\\n\t\texit 1; \\\n\tfi\nendef\nexport size_check\n\nexport KBUILD_MODULES KBUILD_BUILTIN\nexport KBUILD_CHECKSRC KBUILD_SRC KBUILD_EXTMOD\n\n# We need some generic definitions (do not try to remake the file).\nscripts/Kbuild.include: ;\ninclude scripts/Kbuild.include\n\n# Make variables (CC, etc...)\n\nAS\t\t= $(CROSS_COMPILE)as\n# Always use GNU ld\nifneq ($(shell $(CROSS_COMPILE)ld.bfd -v 2> /dev/null),)\nLD\t\t= $(CROSS_COMPILE)ld.bfd\nelse\nLD\t\t= $(CROSS_COMPILE)ld\nendif\nCC\t\t= $(CROSS_COMPILE)gcc\nCPP\t\t= $(CC) -E\nAR\t\t= $(CROSS_COMPILE)ar\nNM\t\t= $(CROSS_COMPILE)nm\nLDR\t\t= $(CROSS_COMPILE)ldr\nSTRIP\t\t= $(CROSS_COMPILE)strip\nOBJCOPY\t\t= $(CROSS_COMPILE)objcopy\nOBJDUMP\t\t= $(CROSS_COMPILE)objdump\nLEX\t\t= flex\nYACC\t\t= bison\nAWK\t\t= awk\nPERL\t\t= perl\nPYTHON\t\t?= python\nPYTHON2\t\t= python2\nPYTHON3\t\t?= python3\n\n# The devicetree compiler and pylibfdt are automatically built unless DTC is\n# provided. If DTC is provided, it is assumed the pylibfdt is available too.\nDTC_INTREE\t:= $(objtree)/scripts/dtc/dtc\nDTC\t\t?= $(DTC_INTREE)\nDTC_MIN_VERSION\t:= 010406\n\nCHECK\t\t= sparse\n\nCHECKFLAGS     := -D__linux__ -Dlinux -D__STDC__ -Dunix -D__unix__ \\\n\t\t  -Wbitwise -Wno-return-void -Wno-unknown-attribute \\\n\t\t  -D__CHECK_ENDIAN__ $(CF)\n\nKBUILD_CPPFLAGS := -D__KERNEL__ -D__UBOOT__\n\nKBUILD_CFLAGS   := -Wall -Wstrict-prototypes \\\n\t\t   -Wno-format-security \\\n\t\t   -fno-builtin -ffreestanding $(CSTD_FLAG)\nKBUILD_CFLAGS\t+= -fshort-wchar -fno-strict-aliasing\nKBUILD_AFLAGS   := -D__ASSEMBLY__\nKBUILD_LDFLAGS  :=\n\nifeq ($(cc-name),clang)\nifneq ($(CROSS_COMPILE),)\nCLANG_TARGET\t:= --target=$(notdir $(CROSS_COMPILE:%-=%))\nLDPPFLAGS\t+= $(CLANG_TARGET)\nGCC_TOOLCHAIN_DIR := $(dir $(shell which $(LD)))\nCLANG_PREFIX\t:= --prefix=$(GCC_TOOLCHAIN_DIR)\nGCC_TOOLCHAIN\t:= $(realpath $(GCC_TOOLCHAIN_DIR)/..)\nendif\nifneq ($(GCC_TOOLCHAIN),)\nCLANG_GCC_TC\t:= --gcc-toolchain=$(GCC_TOOLCHAIN)\nendif\nKBUILD_CFLAGS += $(CLANG_TARGET) $(CLANG_GCC_TC) $(CLANG_PREFIX)\nKBUILD_AFLAGS += $(CLANG_TARGET) $(CLANG_GCC_TC) $(CLANG_PREFIX)\nKBUILD_CFLAGS += $(call cc-option, -no-integrated-as)\nKBUILD_AFLAGS += $(call cc-option, -no-integrated-as)\nendif\n\n# Don't generate position independent code\nKBUILD_CFLAGS\t+= $(call cc-option,-fno-PIE)\nKBUILD_AFLAGS\t+= $(call cc-option,-fno-PIE)\n\n# Read UBOOTRELEASE from include/config/uboot.release (if it exists)\nUBOOTRELEASE = $(shell cat include/config/uboot.release 2> /dev/null)\nUBOOTVERSION = $(VERSION)$(if $(PATCHLEVEL),.$(PATCHLEVEL)$(if $(SUBLEVEL),.$(SUBLEVEL)))$(EXTRAVERSION)\n\nexport VERSION PATCHLEVEL SUBLEVEL UBOOTRELEASE UBOOTVERSION\nexport ARCH CPU BOARD VENDOR SOC CPUDIR BOARDDIR\nexport CONFIG_SHELL HOSTCC KBUILD_HOSTCFLAGS CROSS_COMPILE AS LD CC\nexport CPP AR NM LDR STRIP OBJCOPY OBJDUMP KBUILD_HOSTLDFLAGS KBUILD_HOSTLDLIBS\nexport MAKE LEX YACC AWK PERL PYTHON PYTHON2 PYTHON3\nexport HOSTCXX KBUILD_HOSTCXXFLAGS CHECK CHECKFLAGS DTC DTC_FLAGS\n\nexport KBUILD_CPPFLAGS NOSTDINC_FLAGS UBOOTINCLUDE OBJCOPYFLAGS KBUILD_LDFLAGS\nexport KBUILD_CFLAGS KBUILD_AFLAGS\n\nexport CC_VERSION_TEXT := $(shell $(CC) --version | head -n 1)\n\n# When compiling out-of-tree modules, put MODVERDIR in the module\n# tree rather than in the kernel tree. The kernel tree might\n# even be read-only.\nexport MODVERDIR := $(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions\n\n# Files to ignore in find ... statements\n\nexport RCS_FIND_IGNORE := \\( -name SCCS -o -name BitKeeper -o -name .svn -o    \\\n\t\t\t  -name CVS -o -name .pc -o -name .hg -o -name .git \\) \\\n\t\t\t  -prune -o\nexport RCS_TAR_IGNORE := --exclude SCCS --exclude BitKeeper --exclude .svn \\\n\t\t\t --exclude CVS --exclude .pc --exclude .hg --exclude .git\n\nexport PYTHON_ENABLE\n\n# This is y if U-Boot should not build any Python tools or libraries. Typically\n# you would need to set this if those tools/libraries (typically binman and\n# pylibfdt) cannot be built by your environment and are provided separately.\nifeq ($(NO_PYTHON),)\nPYTHON_ENABLE=y\nendif\n\n# ===========================================================================\n# Rules shared between *config targets and build targets\n\n# Basic helpers built in scripts/\nPHONY += scripts_basic\nscripts_basic:\n\t$(Q)$(MAKE) $(build)=scripts/basic\n\t$(Q)rm -f .tmp_quiet_recordmcount\n\n# To avoid any implicit rule to kick in, define an empty command.\nscripts/basic/%: scripts_basic ;\n\nPHONY += outputmakefile\n# outputmakefile generates a Makefile in the output directory, if using a\n# separate output directory. This allows convenient use of make in the\n# output directory.\noutputmakefile:\nifneq ($(KBUILD_SRC),)\n\t$(Q)ln -fsn $(srctree) source\n\t$(Q)$(CONFIG_SHELL) $(srctree)/scripts/mkmakefile $(srctree)\nendif\n\n# To make sure we do not include .config for any of the *config targets\n# catch them early, and hand them over to scripts/kconfig/Makefile\n# It is allowed to specify more targets when calling make, including\n# mixing *config targets and build targets.\n# For example 'make oldconfig all'.\n# Detect when mixed targets is specified, and make a second invocation\n# of make so .config is not included in this case either (for *config).\n\nversion_h := include/generated/version_autogenerated.h\ntimestamp_h := include/generated/timestamp_autogenerated.h\ndefaultenv_h := include/generated/defaultenv_autogenerated.h\ndt_h := include/generated/dt.h\nenv_h := include/generated/environment.h\n\nno-dot-config-targets := clean clobber mrproper distclean \\\n\t\t\t help %docs check% coccicheck \\\n\t\t\t ubootversion backup tests check pcheck qcheck tcheck \\\n\t\t\t pylint pylint_err _pip pip pip_test pip_release\n\nconfig-targets := 0\nmixed-targets  := 0\ndot-config     := 1\n\nifneq ($(filter $(no-dot-config-targets), $(MAKECMDGOALS)),)\n\tifeq ($(filter-out $(no-dot-config-targets), $(MAKECMDGOALS)),)\n\t\tdot-config := 0\n\tendif\nendif\n\nifeq ($(KBUILD_EXTMOD),)\n        ifneq ($(filter config %config,$(MAKECMDGOALS)),)\n                config-targets := 1\n                ifneq ($(words $(MAKECMDGOALS)),1)\n                        mixed-targets := 1\n                endif\n        endif\nendif\n\nifeq ($(mixed-targets),1)\n# ===========================================================================\n# We're called with mixed targets (*config and build targets).\n# Handle them one by one.\n\nPHONY += $(MAKECMDGOALS) __build_one_by_one\n\n$(filter-out __build_one_by_one, $(MAKECMDGOALS)): __build_one_by_one\n\t@:\n\n__build_one_by_one:\n\t$(Q)set -e; \\\n\tfor i in $(MAKECMDGOALS); do \\\n\t\t$(MAKE) -f $(srctree)/Makefile $$i; \\\n\tdone\n\nelse\nifeq ($(config-targets),1)\n# ===========================================================================\n# *config targets only - make sure prerequisites are updated, and descend\n# in scripts/kconfig to make the *config target\n\nKBUILD_DEFCONFIG := sandbox_defconfig\nexport KBUILD_DEFCONFIG KBUILD_KCONFIG\n\nconfig: scripts_basic outputmakefile FORCE\n\t$(Q)$(MAKE) $(build)=scripts/kconfig $@\n\n%config: scripts_basic outputmakefile FORCE\n\t$(Q)$(MAKE) $(build)=scripts/kconfig $@\n\nelse\n# ===========================================================================\n# Build targets only - this includes vmlinux, arch specific targets, clean\n# targets and others. In general all targets except *config targets.\n\n# Additional helpers built in scripts/\n# Carefully list dependencies so we do not try to build scripts twice\n# in parallel\nPHONY += scripts\nscripts: scripts_basic scripts_dtc include/config/auto.conf\n\t$(Q)$(MAKE) $(build)=$(@)\n\nifeq ($(dot-config),1)\n# Read in config\n-include include/config/auto.conf\n\n# Read in dependencies to all Kconfig* files, make sure to run\n# oldconfig if changes are detected.\n-include include/config/auto.conf.cmd\n\n# To avoid any implicit rule to kick in, define an empty command\n$(KCONFIG_CONFIG) include/config/auto.conf.cmd: ;\n\n# If .config is newer than include/config/auto.conf, someone tinkered\n# with it and forgot to run make oldconfig.\n# if auto.conf.cmd is missing then we are probably in a cleaned tree so\n# we execute the config step to be sure to catch updated Kconfig files\ninclude/config/%.conf: $(KCONFIG_CONFIG) include/config/auto.conf.cmd\n\t$(Q)$(MAKE) -f $(srctree)/Makefile syncconfig\n\t@# If the following part fails, include/config/auto.conf should be\n\t@# deleted so \"make silentoldconfig\" will be re-run on the next build.\n\t$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.autoconf || \\\n\t\t{ rm -f include/config/auto.conf; false; }\n\t@# include/config.h has been updated after \"make silentoldconfig\".\n\t@# We need to touch include/config/auto.conf so it gets newer\n\t@# than include/config.h.\n\t@# Otherwise, 'make silentoldconfig' would be invoked twice.\n\t$(Q)touch include/config/auto.conf\n\nu-boot.cfg spl/u-boot.cfg tpl/u-boot.cfg vpl/u-boot.cfg:\n\t$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.autoconf $(@)\n\n-include include/autoconf.mk\n-include include/autoconf.mk.dep\n\n# We want to include arch/$(ARCH)/config.mk only when include/config/auto.conf\n# is up-to-date. When we switch to a different board configuration, old CONFIG\n# macros are still remaining in include/config/auto.conf. Without the following\n# gimmick, wrong config.mk would be included leading nasty warnings/errors.\nifneq ($(wildcard $(KCONFIG_CONFIG)),)\nifneq ($(wildcard include/config/auto.conf),)\nautoconf_is_old := $(shell find . -path ./$(KCONFIG_CONFIG) -newer \\\n\t\t\t\t\t\tinclude/config/auto.conf)\nifeq ($(autoconf_is_old),)\ninclude config.mk\ninclude arch/$(ARCH)/Makefile\nendif\nendif\nendif\n\n# These are set by the arch-specific config.mk. Make sure they are exported\n# so they can be used when building an EFI application.\nexport EFI_LDS\t\t# Filename of EFI link script in arch/$(ARCH)/lib\nexport EFI_CRT0\t\t# Filename of EFI CRT0 in arch/$(ARCH)/lib\nexport EFI_RELOC\t# Filename of EFU relocation code in arch/$(ARCH)/lib\nexport CFLAGS_EFI\t# Compiler flags to add when building EFI app\nexport CFLAGS_NON_EFI\t# Compiler flags to remove when building EFI app\nexport EFI_TARGET\t# binutils target if EFI is natively supported\n\nexport LTO_ENABLE\n\n# This is y if LTO is enabled for this build. See NO_LTO=1 to disable LTO\nifeq ($(NO_LTO),)\nLTO_ENABLE=$(if $(CONFIG_LTO),y)\nendif\n\n# If board code explicitly specified LDSCRIPT or CONFIG_SYS_LDSCRIPT, use\n# that (or fail if absent).  Otherwise, search for a linker script in a\n# standard location.\n\nifndef LDSCRIPT\n\t#LDSCRIPT := $(srctree)/board/$(BOARDDIR)/u-boot.lds.debug\n\tifdef CONFIG_SYS_LDSCRIPT\n\t\t# need to strip off double quotes\n\t\tLDSCRIPT := $(srctree)/$(CONFIG_SYS_LDSCRIPT:\"%\"=%)\n\tendif\nendif\n\n# If there is no specified link script, we look in a number of places for it\nifndef LDSCRIPT\n\tifeq ($(wildcard $(LDSCRIPT)),)\n\t\tLDSCRIPT := $(srctree)/board/$(BOARDDIR)/u-boot.lds\n\tendif\n\tifeq ($(wildcard $(LDSCRIPT)),)\n\t\tLDSCRIPT := $(srctree)/$(CPUDIR)/u-boot.lds\n\tendif\n\tifeq ($(wildcard $(LDSCRIPT)),)\n\t\tLDSCRIPT := $(srctree)/arch/$(ARCH)/cpu/u-boot.lds\n\tendif\nendif\n\nelse\n# Dummy target needed, because used as prerequisite\ninclude/config/auto.conf: ;\nendif # $(dot-config)\n\nifdef CONFIG_CC_OPTIMIZE_FOR_DEBUG\nKBUILD_HOSTCFLAGS   := -Wall -Wstrict-prototypes -Og -g -fomit-frame-pointer \\\n\t\t$(HOST_LFS_CFLAGS) $(HOSTCFLAGS)\n# Avoid false positives -Wmaybe-uninitialized\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78394\nKBUILD_HOSTCFLAGS   += -Wno-maybe-uninitialized\nKBUILD_HOSTCXXFLAGS := -Og -g $(HOST_LFS_CFLAGS) $(HOSTCXXFLAGS)\nendif\n\n#\n# Xtensa linker script cannot be preprocessed with -ansi because of\n# preprocessor operations on strings that don't make C identifiers.\n#\nifeq ($(CONFIG_XTENSA),)\nLDPPFLAGS\t+= -ansi\nendif\n\nifdef CONFIG_CC_OPTIMIZE_FOR_SIZE\nKBUILD_CFLAGS\t+= -Os\nendif\n\nifdef CONFIG_CC_OPTIMIZE_FOR_SPEED\nKBUILD_CFLAGS\t+= -O2\nendif\n\nifdef CONFIG_CC_OPTIMIZE_FOR_DEBUG\nKBUILD_CFLAGS\t+= -Og\n# Avoid false positives -Wmaybe-uninitialized\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78394\nKBUILD_CFLAGS\t+= -Wno-maybe-uninitialized\nendif\n\nLTO_CFLAGS :=\nLTO_FINAL_LDFLAGS :=\nexport LTO_CFLAGS LTO_FINAL_LDFLAGS\nifeq ($(LTO_ENABLE),y)\n\tifeq ($(cc-name),clang)\n\t\tLTO_CFLAGS\t\t+= -DLTO_ENABLE -flto\n\t\tLTO_FINAL_LDFLAGS\t+= -flto\n\n\t\tAR\t\t\t= $(shell $(CC) -print-prog-name=llvm-ar)\n\t\tNM\t\t\t= $(shell $(CC) -print-prog-name=llvm-nm)\n\telse\n\t\tNPROC\t\t\t:= $(shell nproc 2>/dev/null || echo 1)\n\t\tLTO_CFLAGS\t\t+= -DLTO_ENABLE -flto=$(NPROC)\n\t\tLTO_FINAL_LDFLAGS\t+= -fuse-linker-plugin -flto=$(NPROC)\n\n\t\t# use plugin aware tools\n\t\tAR\t\t\t= $(CROSS_COMPILE)gcc-ar\n\t\tNM\t\t\t= $(CROSS_COMPILE)gcc-nm\n\tendif\n\n\tCFLAGS_NON_EFI\t\t\t+= $(LTO_CFLAGS)\n\n\tKBUILD_CFLAGS\t\t\t+= $(LTO_CFLAGS)\nendif\n\nifeq ($(CONFIG_STACKPROTECTOR),y)\nKBUILD_CFLAGS += $(call cc-option,-fstack-protector-strong)\nKBUILD_CFLAGS += $(call cc-option,-mstack-protector-guard=global)\nCFLAGS_EFI += $(call cc-option,-fno-stack-protector)\nelse\nKBUILD_CFLAGS += $(call cc-option,-fno-stack-protector)\nendif\nKBUILD_CFLAGS += $(call cc-option,-fno-delete-null-pointer-checks)\n\n# disable pointer signed / unsigned warnings in gcc 4.0\nKBUILD_CFLAGS += -Wno-pointer-sign\n\n# disable stringop warnings in gcc 8+\nKBUILD_CFLAGS += $(call cc-disable-warning, stringop-truncation)\n\nKBUILD_CFLAGS += $(call cc-disable-warning, zero-length-bounds)\nKBUILD_CFLAGS += $(call cc-disable-warning, array-bounds)\nKBUILD_CFLAGS += $(call cc-disable-warning, stringop-overflow)\n\n# Enabled with W=2, disabled by default as noisy\nKBUILD_CFLAGS += $(call cc-disable-warning, maybe-uninitialized)\n\n# change __FILE__ to the relative path from the srctree\nKBUILD_CFLAGS\t+= $(call cc-option,-fmacro-prefix-map=$(srctree)/=)\n\nKBUILD_CFLAGS\t+= -gdwarf-4\n# $(KBUILD_AFLAGS) sets -g, which causes gcc to pass a suitable -g<format>\n# option to the assembler.\nKBUILD_AFLAGS\t+= -gdwarf-4\n\n# Report stack usage if supported\n# ARC tools based on GCC 7.1 has an issue with stack usage\n# with naked functions, see commit message for more details\nifndef CONFIG_ARC\nifeq ($(shell $(CONFIG_SHELL) $(srctree)/scripts/gcc-stack-usage.sh $(CC)),y)\n\tKBUILD_CFLAGS += -fstack-usage\nendif\nendif\n\nKBUILD_CFLAGS += $(call cc-option,-Wno-format-nonliteral)\nKBUILD_CFLAGS += $(call cc-disable-warning, address-of-packed-member)\n\nifdef CONFIG_CC_IS_CLANG\nKBUILD_CPPFLAGS += $(call cc-option,-Qunused-arguments,)\nKBUILD_CFLAGS += $(call cc-disable-warning, format-invalid-specifier)\nKBUILD_CFLAGS += $(call cc-disable-warning, gnu)\nKBUILD_CFLAGS += $(call cc-disable-warning, address-of-packed-member)\n# Quiet clang warning: comparison of unsigned expression < 0 is always false\nKBUILD_CFLAGS += $(call cc-disable-warning, tautological-compare)\n# CLANG uses a _MergedGlobals as optimization, but this breaks modpost, as the\n# source of a reference will be _MergedGlobals and not on of the whitelisted names.\n# See modpost pattern 2\nKBUILD_CFLAGS += $(call cc-option, -mno-global-merge,)\nKBUILD_CFLAGS += $(call cc-option, -fcatch-undefined-behavior)\nKBUILD_CFLAGS += $(call cc-disable-warning, deprecated-non-prototype)\nendif\n\n# These warnings generated too much noise in a regular build.\n# Use make W=1 to enable them (see scripts/Makefile.extrawarn)\nKBUILD_CFLAGS += $(call cc-disable-warning, unused-but-set-variable)\n\n# Prohibit date/time macros, which would make the build non-deterministic\nKBUILD_CFLAGS   += $(call cc-option,-Werror=date-time)\n\ninclude scripts/Makefile.extrawarn\n\n# Add user supplied CPPFLAGS, AFLAGS and CFLAGS as the last assignments\nKBUILD_CPPFLAGS += $(KCPPFLAGS)\nKBUILD_AFLAGS += $(KAFLAGS)\nKBUILD_CFLAGS += $(KCFLAGS)\n\nKBUILD_LDFLAGS  += -z noexecstack\nKBUILD_LDFLAGS  += $(call ld-option,--no-warn-rwx-segments)\n\nKBUILD_HOSTCFLAGS += $(if $(CONFIG_TOOLS_DEBUG),-g)\n\n# Use UBOOTINCLUDE when you must reference the include/ directory.\n# Needed to be compatible with the O= option\nUBOOTINCLUDE    := \\\n\t-Iinclude \\\n\t$(if $(KBUILD_SRC), -I$(srctree)/include) \\\n\t$(if $(CONFIG_MBEDTLS_LIB), \\\n\t\t\"-DMBEDTLS_CONFIG_FILE=\\\"mbedtls_def_config.h\\\"\" \\\n\t\t-I$(srctree)/lib/mbedtls \\\n\t\t-I$(srctree)/lib/mbedtls/port \\\n\t\t-I$(srctree)/lib/mbedtls/external/mbedtls \\\n\t\t-I$(srctree)/lib/mbedtls/external/mbedtls/include) \\\n\t$(if $(CONFIG_$(XPL_)SYS_THUMB_BUILD), \\\n\t\t$(if $(CONFIG_HAS_THUMB2), \\\n\t\t\t$(if $(CONFIG_CPU_V7M), \\\n\t\t\t\t-I$(srctree)/arch/arm/thumb1/include), \\\n\t\t\t-I$(srctree)/arch/arm/thumb1/include)) \\\n\t-I$(srctree)/arch/$(ARCH)/include \\\n\t-include $(srctree)/include/linux/kconfig.h \\\n\t-I$(srctree)/dts/upstream/include \\\n\t$(if $(CONFIG_NET_LWIP), -I$(srctree)/lib/lwip/lwip/src/include \\\n\t\t-I$(srctree)/lib/lwip/u-boot)\n\nNOSTDINC_FLAGS += -nostdinc -isystem $(shell $(CC) -print-file-name=include)\n\n# FIX ME\ncpp_flags := $(KBUILD_CPPFLAGS) $(PLATFORM_CPPFLAGS) $(UBOOTINCLUDE) \\\n\t\t\t\t\t\t\t$(NOSTDINC_FLAGS)\nc_flags := $(KBUILD_CFLAGS) $(cpp_flags)\n\n#########################################################################\n# U-Boot objects....order is important (i.e. start must be first)\n\nHAVE_VENDOR_COMMON_LIB = $(if $(wildcard $(srctree)/board/$(VENDOR)/common/Makefile),y,n)\n\nlibs-$(CONFIG_API) += api/\nlibs-$(HAVE_VENDOR_COMMON_LIB) += board/$(VENDOR)/common/\nlibs-y += boot/\nlibs-$(CONFIG_CMDLINE) += cmd/\nlibs-y += common/\nlibs-$(CONFIG_OF_EMBED) += dts/\nlibs-y += env/\nlibs-y += lib/\nlibs-y += fs/\nlibs-$(filter y,$(CONFIG_NET) $(CONFIG_NET_LWIP)) += net/\nlibs-y += disk/\nlibs-y += drivers/\nlibs-$(CONFIG_SYS_FSL_DDR) += drivers/ddr/fsl/\nlibs-$(CONFIG_SYS_FSL_MMDC) += drivers/ddr/fsl/\nlibs-$(CONFIG_$(XPL_)ALTERA_SDRAM) += drivers/ddr/altera/\nlibs-y += drivers/usb/cdns3/\nlibs-y += drivers/usb/dwc3/\nlibs-y += drivers/usb/common/\nlibs-y += drivers/usb/emul/\nlibs-y += drivers/usb/eth/\nlibs-$(CONFIG_USB_DEVICE) += drivers/usb/gadget/\nlibs-$(CONFIG_USB_GADGET) += drivers/usb/gadget/\nlibs-$(CONFIG_USB_GADGET) += drivers/usb/gadget/udc/\nlibs-y += drivers/usb/host/\nlibs-y += drivers/usb/mtu3/\nlibs-y += drivers/usb/musb/\nlibs-y += drivers/usb/musb-new/\nlibs-y += drivers/usb/isp1760/\nlibs-y += drivers/usb/phy/\nlibs-y += drivers/usb/tcpm/\nlibs-y += drivers/usb/ulpi/\nifdef CONFIG_POST\nlibs-y += post/\nendif\nlibs-$(CONFIG_$(PHASE_)UNIT_TEST) += test/\nlibs-$(CONFIG_UT_ENV) += test/env/\nlibs-$(CONFIG_UT_OPTEE) += test/optee/\nlibs-$(CONFIG_UT_OVERLAY) += test/overlay/\n\nlibs-y += $(if $(wildcard $(srctree)/board/$(BOARDDIR)/Makefile),board/$(BOARDDIR)/)\n\nlibs-y := $(sort $(libs-y))\n\nu-boot-dirs\t:= $(patsubst %/,%,$(filter %/, $(libs-y))) tools examples\n\nu-boot-alldirs\t:= $(sort $(u-boot-dirs) $(patsubst %/,%,$(filter %/, $(libs-))))\n\nlibs-y\t\t:= $(patsubst %/, %/built-in.o, $(libs-y))\n\nu-boot-init := $(head-y)\nu-boot-main := $(libs-y)\n\n\n# Add GCC lib\nifeq ($(CONFIG_USE_PRIVATE_LIBGCC),y)\nPLATFORM_LIBGCC = arch/$(ARCH)/lib/lib.a\nelse\nifndef CONFIG_CC_IS_CLANG\nPLATFORM_LIBGCC := -L $(shell dirname `$(CC) $(c_flags) -print-libgcc-file-name`) -lgcc\nendif\nendif\nPLATFORM_LIBS += $(PLATFORM_LIBGCC)\n\nifdef CONFIG_CC_COVERAGE\nKBUILD_CFLAGS += --coverage\nPLATFORM_LIBGCC += -lgcov\nendif\n\nexport PLATFORM_LIBS\nexport PLATFORM_LIBGCC\n\n# Special flags for CPP when processing the linker script.\n# Pass the version down so we can handle backwards compatibility\n# on the fly.\nLDPPFLAGS += \\\n\t-include $(srctree)/include/u-boot/u-boot.lds.h \\\n\t-DCPUDIR=$(CPUDIR) \\\n\t$(shell $(LD) --version | \\\n\t  sed -ne 's/GNU ld version \\([0-9][0-9]*\\)\\.\\([0-9][0-9]*\\).*/-DLD_MAJOR=\\1 -DLD_MINOR=\\2/p')\n\n#########################################################################\n#########################################################################\n\nifneq ($(CONFIG_BOARD_SIZE_LIMIT),)\nBOARD_SIZE_CHECK= @ $(call size_check,$@,$(CONFIG_BOARD_SIZE_LIMIT))\nelse\nBOARD_SIZE_CHECK =\nendif\n\nifneq ($(CONFIG_SPL_SIZE_LIMIT),0x0)\nSPL_SIZE_CHECK = @$(call size_check,$@,$$(tools/spl_size_limit))\nelse\nSPL_SIZE_CHECK =\nendif\n\nifneq ($(CONFIG_TPL_SIZE_LIMIT),0x0)\nTPL_SIZE_CHECK = @$(call size_check,$@,$(CONFIG_TPL_SIZE_LIMIT))\nelse\nTPL_SIZE_CHECK =\nendif\n\nifneq ($(CONFIG_VPL_SIZE_LIMIT),0x0)\nVPL_SIZE_CHECK = @$(call size_check,$@,$(CONFIG_VPL_SIZE_LIMIT))\nelse\nVPL_SIZE_CHECK =\nendif\n\n# Statically apply RELA-style relocations (currently arm64 only)\n# This is useful for arm64 where static relocation needs to be performed on\n# the raw binary, but certain simulators only accept an ELF file (but don't\n# do the relocation).\nifneq ($(CONFIG_STATIC_RELA),)\n# $(2) is u-boot ELF, $(3) is u-boot bin, $(4) is text base\nquiet_cmd_static_rela = RELOC   $@\ncmd_static_rela = \\\n\ttools/relocate-rela $(3) $(2)\nelse\nquiet_cmd_static_rela =\ncmd_static_rela =\nendif\n\n# Always append INPUTS so that arch config.mk's can add custom ones\nINPUTS-y += u-boot.srec u-boot.bin u-boot.sym System.map binary_size_check\n\nifeq ($(CONFIG_SPL_FSL_PBL),y)\nINPUTS-$(CONFIG_RAMBOOT_PBL) += u-boot-with-spl-pbl.bin\nelse\nifneq ($(CONFIG_NXP_ESBC), y)\n# For Secure Boot The Image needs to be signed and Header must also\n# be included. So The image has to be built explicitly\nINPUTS-$(CONFIG_RAMBOOT_PBL) += u-boot.pbl\nendif\nendif\nINPUTS-$(CONFIG_SPL) += spl/u-boot-spl.bin\nifeq ($(CONFIG_MX6)$(CONFIG_IMX_HAB), yy)\nINPUTS-$(CONFIG_SPL_FRAMEWORK) += u-boot-ivt.img\nelse\nifeq ($(CONFIG_MX7)$(CONFIG_IMX_HAB), yy)\nINPUTS-$(CONFIG_SPL_FRAMEWORK) += u-boot-ivt.img\nelse\nINPUTS-$(CONFIG_SPL_FRAMEWORK) += u-boot.img\nendif\nendif\nINPUTS-$(CONFIG_TPL) += tpl/u-boot-tpl.bin\nINPUTS-$(CONFIG_VPL) += vpl/u-boot-vpl.bin\n\n# Allow omitting the .dtb output if it is not normally used\nINPUTS-$(CONFIG_OF_SEPARATE) += $(if $(CONFIG_OF_OMIT_DTB),dts/dt.dtb,u-boot.dtb)\nifeq ($(CONFIG_SPL_FRAMEWORK),y)\nINPUTS-$(CONFIG_OF_SEPARATE) += u-boot-dtb.img\nendif\nINPUTS-$(CONFIG_SANDBOX) += u-boot.dtb\nifneq ($(CONFIG_SPL_TARGET),)\nINPUTS-$(CONFIG_SPL) += $(CONFIG_SPL_TARGET:\"%\"=%)\nendif\nINPUTS-$(CONFIG_REMAKE_ELF) += u-boot.elf\nINPUTS-$(CONFIG_EFI_APP) += u-boot-app.efi\nINPUTS-$(CONFIG_EFI_STUB) += u-boot-payload.efi\n\n# Generate this input file for binman\nifeq ($(CONFIG_SPL),)\nINPUTS-$(CONFIG_ARCH_MEDIATEK) += u-boot-mtk.bin\nendif\n\n# Add optional build target if defined in board/cpu/soc headers\nifneq ($(CONFIG_BUILD_TARGET),)\nINPUTS-y += $(CONFIG_BUILD_TARGET:\"%\"=%)\nendif\n\nifeq ($(CONFIG_INIT_SP_RELATIVE)$(CONFIG_OF_SEPARATE),yy)\nINPUTS-y += init_sp_bss_offset_check\nendif\n\nifeq ($(CONFIG_ARCH_ROCKCHIP)_$(CONFIG_SPL_FRAMEWORK),y_)\nINPUTS-y += u-boot.img\nendif\n\nINPUTS-$(CONFIG_X86) += u-boot-x86-start16.bin u-boot-x86-reset16.bin \\\n\t$(if $(CONFIG_SPL_X86_16BIT_INIT),spl/u-boot-spl.bin) \\\n\t$(if $(CONFIG_TPL_X86_16BIT_INIT),tpl/u-boot-tpl.bin)\n\nLDFLAGS_u-boot += $(LDFLAGS_FINAL)\n\n# Avoid 'Not enough room for program headers' error on binutils 2.28 onwards.\nLDFLAGS_u-boot += $(call ld-option, --no-dynamic-linker)\n\n# ld.lld support\nLDFLAGS_u-boot += -z notext $(call ld-option,--apply-dynamic-relocs)\n\nLDFLAGS_u-boot += --build-id=none\n\nifeq ($(CONFIG_ARC)$(CONFIG_NIOS2)$(CONFIG_X86)$(CONFIG_XTENSA),)\nLDFLAGS_u-boot += -Ttext $(CONFIG_TEXT_BASE)\nendif\n\n# make the checker run with the right architecture\nCHECKFLAGS += --arch=$(ARCH)\n\n# insure the checker run with the right endianness\nCHECKFLAGS += $(if $(CONFIG_SYS_BIG_ENDIAN),-mbig-endian,-mlittle-endian)\n\n# the checker needs the correct machine size\nCHECKFLAGS += $(if $(CONFIG_64BIT),-m64,-m32)\n\n# Normally we fill empty space with 0xff\nquiet_cmd_objcopy = OBJCOPY $@\ncmd_objcopy = $(OBJCOPY) --gap-fill=0xff $(OBJCOPYFLAGS) \\\n\t$(OBJCOPYFLAGS_$(@F)) $< $@\n\n# Provide a version which does not do this, for use by EFI\nquiet_cmd_zobjcopy = OBJCOPY $@\ncmd_zobjcopy = $(OBJCOPY) $(OBJCOPYFLAGS) $(OBJCOPYFLAGS_$(@F)) $< $@\n\nquiet_cmd_efipayload = OBJCOPY $@\ncmd_efipayload = $(OBJCOPY) -I binary -O $(EFIPAYLOAD_BFDTARGET) -B $(EFIPAYLOAD_BFDARCH) $< $@\n\nMKIMAGEOUTPUT ?= /dev/null\n\nquiet_cmd_mkimage = MKIMAGE $@\ncmd_mkimage = $(objtree)/tools/mkimage $(MKIMAGEFLAGS_$(@F)) -d $< $@ \\\n\t>$(MKIMAGEOUTPUT) $(if $(KBUILD_VERBOSE:0=), && cat $(MKIMAGEOUTPUT))\n\nquiet_cmd_mkfitimage = MKIMAGE $@\ncmd_mkfitimage = $(objtree)/tools/mkimage $(MKIMAGEFLAGS_$(@F)) \\\n\t-f $(U_BOOT_ITS) -p $(CONFIG_FIT_EXTERNAL_OFFSET) $@ \\\n\t>$(MKIMAGEOUTPUT) $(if $(KBUILD_VERBOSE:0=), && cat $(MKIMAGEOUTPUT))\n\nquiet_cmd_cat = CAT     $@\ncmd_cat = cat $(filter-out $(PHONY), $^) > $@\n\nappend = cat $(filter-out $< $(PHONY), $^) >> $@\n\nquiet_cmd_pad_cat = CAT     $@\ncmd_pad_cat = $(cmd_objcopy) && $(append) || { rm -f $@; false; }\n\nquiet_cmd_lzma = LZMA    $@\ncmd_lzma = lzma -c -z -k -9 $< > $@\n\ncfg: u-boot.cfg\n\nquiet_cmd_ofcheck = OFCHK   $2\ncmd_ofcheck = $(srctree)/scripts/check-of.sh $2 \\\n\t\t$(srctree)/scripts/of_allowlist.txt\n\n# Concat the value of all the CONFIGs (result is 'y' or 'yy', etc. )\ngot = $(foreach cfg,$(1),$($(cfg)))\n\n# expected value 'y for each one\nexpect = $(foreach cfg,$(1),y)\n\n# Show a deprecation message\n# Args:\n# 1: List of options to migrate to (e.g. \"CONFIG_DM_MMC CONFIG_BLK\")\n# 2: Name of component (e.g . \"Ethernet drivers\")\n# 3: Release deadline (e.g. \"v202.07\")\n# 4: Condition to require before checking (e.g. \"$(CONFIG_NET)\")\n# Note: Script avoids bash construct, hence the strange double 'if'\n# (patches welcome!)\ndefine deprecated\n\t@if [ -n \"$(strip $(4))\" ]; then if [ \"$(got)\" != \"$(expect)\" ]; then \\\n\t\techo >&2 \"===================== WARNING ======================\"; \\\n\t\techo >&2 \"This board does not use $(firstword $(1)) (Driver Model\"; \\\n\t\techo >&2 \"for $(2)). Please update the board to use\"; \\\n\t\techo >&2 \"$(firstword $(1)) before the $(3) release. Failure to\"; \\\n\t\techo >&2 \"update by the deadline may result in board removal.\"; \\\n\t\techo >&2 \"See doc/develop/driver-model/migration.rst for more info.\"; \\\n\t\techo >&2 \"====================================================\"; \\\n\tfi; fi\n\nendef\n\n# Timestamp file to make sure that binman always runs\n.binman_stamp: $(INPUTS-y) FORCE\nifeq ($(CONFIG_BINMAN),y)\n\t$(call if_changed,binman)\nendif\n\t@touch $@\n\nall: .binman_stamp\n\nifeq ($(CONFIG_DEPRECATED),y)\n\t$(warning \"You have deprecated configuration options enabled in your .config! Please check your configuration.\")\nendif\nifeq ($(CONFIG_OF_EMBED)$(CONFIG_EFI_APP),y)\n\t@echo >&2 \"===================== WARNING ======================\"\n\t@echo >&2 \"CONFIG_OF_EMBED is enabled. This option should only\"\n\t@echo >&2 \"be used for debugging purposes. Please use\"\n\t@echo >&2 \"CONFIG_OF_SEPARATE for boards in mainline.\"\n\t@echo >&2 \"See doc/develop/devicetree/control.rst for more info.\"\n\t@echo >&2 \"====================================================\"\nendif\n\t$(call deprecated,CONFIG_WDT,DM watchdog,v2019.10,\\\n\t\t$(CONFIG_WATCHDOG)$(CONFIG_HW_WATCHDOG))\n\t$(call deprecated,CONFIG_DM_I2C,I2C drivers,v2022.04,$(CONFIG_SYS_I2C_LEGACY))\n\t@# CFG_SYS_TIMER_RATE has brackets in it for some boards which\n\t@# confuses this rule. Use if() to send just a single character which\n\t@# is enable to tell 'deprecated' that one of these symbols exists\n\t$(call deprecated,CONFIG_TIMER,Timer drivers,v2023.01,$(if $(strip $(CFG_SYS_TIMER_RATE)$(CFG_SYS_TIMER_COUNTER)),x))\n\t$(call deprecated,CONFIG_DM_SERIAL,Serial drivers,v2023.04,$(CONFIG_SERIAL))\n\t@# Check that this build does not override OF_HAS_PRIOR_STAGE by\n\t@# disabling OF_BOARD.\n\t$(call cmd,ofcheck,$(KCONFIG_CONFIG))\n\nPHONY += dtbs dtbs_check\ndtbs: dts/dt.dtb\n\t@:\ndts/dt.dtb: dtbs_prepare u-boot\n\t$(Q)$(MAKE) $(build)=dts dtbs\n\ndtbs_prepare: prepare3\n\nifneq ($(filter dtbs_check, $(MAKECMDGOALS)),)\nexport CHECK_DTBS=y\nendif\n\nifneq ($(CHECK_DTBS),)\ndtbs_prepare: dt_binding_check\nendif\n\ndtbs_check: dt_binding_check dtbs\n\nDT_BINDING_DIR := dts/upstream/Bindings\ndt_binding_check: scripts_dtc\n\t$(Q)$(MAKE) $(build)=$(DT_BINDING_DIR) $(DT_BINDING_DIR)/processed-schema.json\n\nquiet_cmd_copy = COPY    $@\n      cmd_copy = cp $< $@\n\nifeq ($(CONFIG_OF_UPSTREAM),y)\nifeq ($(CONFIG_ARM64),y)\ndt_dir := dts/upstream/src/arm64\nelse\ndt_dir := dts/upstream/src/$(ARCH)\nendif\nelse\ndt_dir := arch/$(ARCH)/dts\nendif\n\nifeq ($(CONFIG_MULTI_DTB_FIT),y)\n\nifeq ($(CONFIG_MULTI_DTB_FIT_LZO),y)\nFINAL_DTB_CONTAINER = fit-dtb.blob.lzo\nelse ifeq ($(CONFIG_MULTI_DTB_FIT_GZIP),y)\nFINAL_DTB_CONTAINER = fit-dtb.blob.gz\nelse\nFINAL_DTB_CONTAINER = fit-dtb.blob\nendif\n\nfit-dtb.blob.gz: fit-dtb.blob\n\t@gzip -kf9 $< > $@\n\nfit-dtb.blob.lzo: fit-dtb.blob\n\t@lzop -f9 $< > $@\n\nfit-dtb.blob: dts/dt.dtb FORCE\n\t$(call if_changed,mkimage)\nifneq ($(SOURCE_DATE_EPOCH),)\n\ttouch -d @$(SOURCE_DATE_EPOCH) fit-dtb.blob\n\tchmod 0600 fit-dtb.blob\nendif\n\nMKIMAGEFLAGS_fit-dtb.blob = -f auto -A $(ARCH) -T firmware -C none -O u-boot \\\n\t-a 0 -e 0 -E \\\n\t$(patsubst %,-b $(dt_dir)/%.dtb,$(subst \",,$(CONFIG_OF_LIST))) -d /dev/null\n\nMKIMAGEFLAGS_fit-dtb.blob += -B 0x8\n\nifneq ($(EXT_DTB),)\nu-boot-fit-dtb.bin: u-boot-nodtb.bin $(EXT_DTB)\n\t\t$(call if_changed,cat)\nelse\nu-boot-fit-dtb.bin: u-boot-nodtb.bin $(FINAL_DTB_CONTAINER)\n\t$(call if_changed,cat)\nendif\n\nu-boot.bin: u-boot-fit-dtb.bin FORCE\n\t$(call if_changed,copy)\n\nifneq ($(CONFIG_MPC85XX_HAVE_RESET_VECTOR)$(CONFIG_OF_SEPARATE),yy)\nu-boot-dtb.bin: u-boot-nodtb.bin dts/dt.dtb FORCE\n\t$(call if_changed,cat)\nendif\n\nelse ifeq ($(CONFIG_OF_SEPARATE).$(CONFIG_OF_OMIT_DTB),y.)\n\nifneq ($(CONFIG_MPC85XX_HAVE_RESET_VECTOR)$(CONFIG_OF_SEPARATE),yy)\nu-boot-dtb.bin: u-boot-nodtb.bin dts/dt.dtb FORCE\n\t$(call if_changed,cat)\nendif\n\nu-boot.bin: u-boot-dtb.bin FORCE\n\t$(call if_changed,copy)\n\nelse\nu-boot.bin: u-boot-nodtb.bin FORCE\n\t$(call if_changed,copy)\nendif\n\n# we call Makefile in arch/arm/mach-imx which\n# has targets which are dependent on targets defined\n# here. make could not resolve them and we must ensure\n# that they are finished before calling imx targets\nifeq ($(CONFIG_MULTI_DTB_FIT),y)\nIMX_DEPS = u-boot-fit-dtb.bin\nendif\n\n%.imx: $(IMX_DEPS) %.bin\n\t$(Q)$(MAKE) $(build)=arch/arm/mach-imx $@\n\t$(BOARD_SIZE_CHECK)\n\n%.vyb: %.imx\n\t$(Q)$(MAKE) $(build)=arch/arm/cpu/armv7/vf610 $@\n\nquiet_cmd_copy = COPY    $@\n      cmd_copy = cp $< $@\n\nu-boot.dtb: dts/dt.dtb\n\t$(call cmd,copy)\n\nOBJCOPYFLAGS_u-boot.hex := -O ihex\n\nOBJCOPYFLAGS_u-boot.srec := -O srec\n\nu-boot.hex u-boot.srec: u-boot FORCE\n\t$(call if_changed,objcopy)\n\nOBJCOPYFLAGS_u-boot-elf.srec := $(OBJCOPYFLAGS_u-boot.srec)\n\nu-boot-elf.srec: u-boot.elf FORCE\n\t$(call if_changed,objcopy)\n\nOBJCOPYFLAGS_u-boot-spl.srec = $(OBJCOPYFLAGS_u-boot.srec)\n\nspl/u-boot-spl.srec: spl/u-boot-spl FORCE\n\t$(call if_changed,objcopy)\n\n%.scif: %.srec\n\t$(Q)$(MAKE) $(build)=arch/arm/mach-renesas $@\n\nOBJCOPYFLAGS_u-boot-nodtb.bin := -O binary \\\n\t\t$(if $(CONFIG_X86_16BIT_INIT),-R .start16 -R .resetvec) \\\n\t\t$(if $(CONFIG_MPC85XX_HAVE_RESET_VECTOR),$(if $(CONFIG_OF_SEPARATE),-R .bootpg -R .resetvec))\n\nbinary_size_check: u-boot-nodtb.bin FORCE\n\t@file_size=$(shell wc -c u-boot-nodtb.bin | awk '{ print $$1 }') ; \\\n\tmap_size=$(shell cat u-boot.map | \\\n\t\tawk ' \\\n\t\t\t/_image_copy_start/ { start = $$1 } \\\n\t\t\t/_image_binary_end/ { end = $$1 } \\\n\t\t\tEND { \\\n\t\t\t\tif (start != \"\" && end != \"\") \\\n\t\t\t\t\tprint end \" \" start; \\\n\t\t\t}' \\\n\t\t| sh -c 'read end start && echo $$((end - start))'); \\\n\tif [ -n \"$$map_size\" ]; then \\\n\t\tif test $$map_size -ne $$file_size; then \\\n\t\t\techo \"u-boot.map shows a binary size of $$map_size\" >&2 ; \\\n\t\t\techo \"  but u-boot-nodtb.bin shows $$file_size\" >&2 ; \\\n\t\t\texit 1; \\\n\t\tfi; \\\n\tfi\n\nifeq ($(CONFIG_INIT_SP_RELATIVE)$(CONFIG_OF_SEPARATE),yy)\nifneq ($(CONFIG_SYS_MALLOC_F),)\nsubtract_sys_malloc_f_len = space=$$(($${space} - $(CONFIG_SYS_MALLOC_F_LEN)))\nelse\nsubtract_sys_malloc_f_len = true\nendif\n# The 1/4 margin below is somewhat arbitrary. The likely initial SP usage is\n# so low that the DTB could probably use 90%+ of the available space, for\n# current values of CONFIG_SYS_INIT_SP_BSS_OFFSET at least. However, let's be\n# safe for now and tweak this later if space becomes tight.\n# A rejected alternative would be to check that some absolute minimum stack\n# space was available. However, since CONFIG_SYS_INIT_SP_BSS_OFFSET is\n# deliberately build-specific, to take account of build-to-build stack usage\n# differences due to different feature sets, there is no common absolute value\n# to check against.\ninit_sp_bss_offset_check: u-boot.dtb FORCE\n\t@dtb_size=$(shell wc -c u-boot.dtb | awk '{print $$1}') ; \\\n\tspace=$(CONFIG_SYS_INIT_SP_BSS_OFFSET) ; \\\n\t$(subtract_sys_malloc_f_len) ; \\\n\tquarter_space=$$(($${space} / 4)) ; \\\n\tif [ $${dtb_size} -gt $${quarter_space} ]; then \\\n\t\techo \"u-boot.dtb is larger than 1 quarter of \" >&2 ; \\\n\t\techo \"(CONFIG_SYS_INIT_SP_BSS_OFFSET - CONFIG_SYS_MALLOC_F_LEN)\" >&2 ; \\\n\t\texit 1 ; \\\n\tfi\nendif\n\nshell_cmd = { $(call echo-cmd,$(1)) $(cmd_$(1)); }\n\nquiet_cmd_objcopy_uboot = OBJCOPY $@\nifdef cmd_static_rela\ncmd_objcopy_uboot = $(cmd_objcopy) && $(call shell_cmd,static_rela,$<,$@,$(CONFIG_TEXT_BASE)) || { rm -f $@; false; }\nelse\ncmd_objcopy_uboot = $(cmd_objcopy)\nendif\n\nu-boot-nodtb.bin: u-boot FORCE\n\t$(call if_changed,objcopy_uboot)\n\t$(BOARD_SIZE_CHECK)\n\nu-boot.ldr:\tu-boot\n\t\t$(CREATE_LDR_ENV)\n\t\t$(LDR) -T $(CONFIG_LDR_CPU) -c $@ $< $(LDR_FLAGS)\n\t\t$(BOARD_SIZE_CHECK)\n\n# binman\n# ---------------------------------------------------------------------------\n# Use 'make BINMAN_DEBUG=1' to enable debugging\n# Use 'make BINMAN_VERBOSE=3' to set vebosity level\n\nifneq ($(EXT_DTB),)\next_dtb_list := $(basename $(notdir $(EXT_DTB)))\ndefault_dt := $(firstword $(ext_dtb_list))\nof_list := \"$(ext_dtb_list)\"\nof_list_dirs := $(dir $(EXT_DTB))\nelse\nof_list := $(CONFIG_OF_LIST)\nifneq ($(CONFIG_OF_UPSTREAM_INCLUDE_LOCAL_FALLBACK_DTBOS),)\nof_list_dirs := $(dt_dir) arch/$(ARCH)/dts\nelse\nof_list_dirs := $(dt_dir)\nendif\ndefault_dt := $(if $(DEVICE_TREE),$(DEVICE_TREE),$(CONFIG_DEFAULT_DEVICE_TREE))\nendif\n\nbinman_dtb := $(shell echo $(CONFIG_BINMAN_DTB))\nifeq ($(strip $(binman_dtb)),)\nifeq ($(CONFIG_OF_EMBED),y)\nbinman_dtb = ./dts/dt.dtb\nelse\nbinman_dtb = ./u-boot.dtb\nendif\nendif\n\nquiet_cmd_binman = BINMAN  $@\ncmd_binman = $(srctree)/tools/binman/binman $(if $(BINMAN_DEBUG),-D) \\\n\t\t$(foreach f,$(BINMAN_TOOLPATHS),--toolpath $(f)) \\\n                --toolpath $(objtree)/tools \\\n\t\t$(if $(BINMAN_VERBOSE),-v$(BINMAN_VERBOSE)) \\\n\t\tbuild -u -d $(binman_dtb) -O . -m \\\n\t\t--allow-missing --fake-ext-blobs \\\n\t\t$(if $(BINMAN_ALLOW_MISSING),--ignore-missing) \\\n\t\t-I . -I $(srctree) -I $(srctree)/board/$(BOARDDIR) \\\n\t\t$(foreach f,$(of_list_dirs),-I $(f)) -a of-list=$(of_list) \\\n\t\t$(foreach f,$(BINMAN_INDIRS),-I $(f)) \\\n\t\t-a atf-bl31-path=${BL31} \\\n\t\t-a tee-os-path=${TEE} \\\n\t\t-a ti-dm-path=${TI_DM} \\\n\t\t-a opensbi-path=${OPENSBI} \\\n\t\t-a default-dt=$(default_dt) \\\n\t\t-a scp-path=$(SCP) \\\n\t\t-a rockchip-tpl-path=$(ROCKCHIP_TPL) \\\n\t\t-a spl-bss-pad=$(if $(CONFIG_SPL_SEPARATE_BSS),,1) \\\n\t\t-a tpl-bss-pad=$(if $(CONFIG_TPL_SEPARATE_BSS),,1) \\\n\t\t-a vpl-bss-pad=$(if $(CONFIG_VPL_SEPARATE_BSS),,1) \\\n\t\t-a spl-dtb=$(CONFIG_SPL_OF_REAL) \\\n\t\t-a tpl-dtb=$(CONFIG_TPL_OF_REAL) \\\n\t\t-a vpl-dtb=$(CONFIG_VPL_OF_REAL) \\\n\t\t-a pre-load-key-path=${PRE_LOAD_KEY_PATH} \\\n\t\t-a of-spl-remove-props=$(CONFIG_OF_SPL_REMOVE_PROPS) \\\n\t\t$(BINMAN_$(@F))\n\nOBJCOPYFLAGS_u-boot.ldr.hex := -I binary -O ihex\n\nOBJCOPYFLAGS_u-boot.ldr.srec := -I binary -O srec\n\nu-boot.ldr.hex u-boot.ldr.srec: u-boot.ldr FORCE\n\t$(call if_changed,objcopy)\n\nifdef CONFIG_SPL_LOAD_FIT\nMKIMAGEFLAGS_u-boot.img = -f auto -A $(ARCH) -T firmware -C none -O u-boot \\\n\t-a $(CONFIG_TEXT_BASE) -e $(CONFIG_SYS_UBOOT_START) \\\n\t-p $(CONFIG_FIT_EXTERNAL_OFFSET) \\\n\t-n \"U-Boot $(UBOOTRELEASE) for $(BOARD) board\" -E \\\n\t$(patsubst %,-b $(dt_dir)/%.dtb,$(subst \",,$(DEVICE_TREE))) \\\n\t$(patsubst %,-b $(dt_dir)/%.dtb,$(subst \",,$(CONFIG_OF_LIST))) \\\n\t$(patsubst %,-b $(dt_dir)/%.dtbo,$(subst \",,$(CONFIG_OF_OVERLAY_LIST)))\nelse\nMKIMAGEFLAGS_u-boot.img = -A $(ARCH) -T firmware -C none -O u-boot \\\n\t-a $(CONFIG_TEXT_BASE) -e $(CONFIG_SYS_UBOOT_START) \\\n\t-n \"U-Boot $(UBOOTRELEASE) for $(BOARD) board\"\nMKIMAGEFLAGS_u-boot-ivt.img = -A $(ARCH) -T firmware_ivt -C none -O u-boot \\\n\t-a $(CONFIG_TEXT_BASE) -e $(CONFIG_SYS_UBOOT_START) \\\n\t-n \"U-Boot $(UBOOTRELEASE) for $(BOARD) board\"\nu-boot-ivt.img: MKIMAGEOUTPUT = u-boot-ivt.img.log\nendif\n\nMKIMAGEFLAGS_u-boot-dtb.img = $(MKIMAGEFLAGS_u-boot.img)\n\n# Some boards have the kwbimage.cfg file written in advance, while some\n# other boards generate it on the fly during the build in the build tree.\n# Let's check if the file exists in the build tree first, otherwise we\n# fall back to use the one in the source tree.\nKWD_CONFIG_FILE = $(shell \\\n\tif [ -f $(objtree)/$(CONFIG_SYS_KWD_CONFIG:\"%\"=%) ]; then \\\n\t\techo -n $(objtree)/$(CONFIG_SYS_KWD_CONFIG:\"%\"=%); \\\n\telse \\\n\t\techo -n $(srctree)/$(CONFIG_SYS_KWD_CONFIG:\"%\"=%); \\\n\tfi)\n\nMKIMAGEFLAGS_u-boot.kwb = -n $(KWD_CONFIG_FILE) \\\n\t-T kwbimage -a $(CONFIG_TEXT_BASE) -e $(CONFIG_TEXT_BASE)\n\nMKIMAGEFLAGS_u-boot-with-spl.kwb = -n $(KWD_CONFIG_FILE) \\\n\t-T kwbimage -a $(CONFIG_TEXT_BASE) -e $(CONFIG_TEXT_BASE) \\\n\t$(if $(KEYDIR),-k $(KEYDIR))\n\nMKIMAGEFLAGS_u-boot.pbl = -n $(srctree)/$(CONFIG_SYS_FSL_PBL_RCW:\"%\"=%) \\\n\t\t-R $(srctree)/$(CONFIG_SYS_FSL_PBL_PBI:\"%\"=%) -A $(ARCH) -T pblimage\n\nUBOOT_BIN := u-boot.bin\n\nMKIMAGEFLAGS_u-boot-lzma.img = -A $(ARCH) -T standalone -C lzma -O u-boot \\\n\t-a $(CONFIG_TEXT_BASE) -e $(CONFIG_SYS_UBOOT_START) \\\n\t-n \"U-Boot $(UBOOTRELEASE) for $(BOARD) board\"\n\nu-boot.bin.lzma: u-boot.bin FORCE\n\t$(call if_changed,lzma)\n\nu-boot-lzma.img: u-boot.bin.lzma FORCE\n\t$(call if_changed,mkimage)\n\nfit_image := $(if $(CONFIG_SANDBOX_VPL),u-boot,u-boot-nodtb.bin)\n\nu-boot-dtb.img u-boot.img u-boot.kwb u-boot.pbl u-boot-ivt.img: \\\n\t\t$(if $(CONFIG_SPL_LOAD_FIT),$(fit_image) \\\n\t\t\t$(if $(CONFIG_OF_SEPARATE)$(CONFIG_OF_EMBED)$(CONFIG_SANDBOX),dts/dt.dtb) \\\n\t\t,$(UBOOT_BIN)) FORCE\n\t$(call if_changed,mkimage)\n\t$(BOARD_SIZE_CHECK)\n\nifeq ($(CONFIG_SPL_LOAD_FIT_FULL),y)\nMKIMAGEFLAGS_u-boot.itb =\nelse\nMKIMAGEFLAGS_u-boot.itb = -E\nendif\nMKIMAGEFLAGS_u-boot.itb += -B 0x8\n\nifdef U_BOOT_ITS\nu-boot.itb: u-boot-nodtb.bin \\\n\t\t$(if $(CONFIG_OF_SEPARATE)$(CONFIG_OF_EMBED)$(CONFIG_SANDBOX),dts/dt.dtb) \\\n\t\t$(if $(CONFIG_MULTI_DTB_FIT),$(FINAL_DTB_CONTAINER)) \\\n\t\t$(U_BOOT_ITS) FORCE\n\t$(call if_changed,mkfitimage)\n\t$(BOARD_SIZE_CHECK)\nendif\n\nu-boot-with-spl.kwb: u-boot.bin spl/u-boot-spl.bin FORCE\n\t$(call if_changed,mkimage)\n\t$(BOARD_SIZE_CHECK)\n\nu-boot.dis:\tu-boot\n\t\t$(OBJDUMP) -d $< > $@\n\nifneq ($(CONFIG_SPL_PAYLOAD),)\nSPL_PAYLOAD := $(CONFIG_SPL_PAYLOAD:\"%\"=%)\nelse\nSPL_PAYLOAD := u-boot.bin\nendif\n\nSPL_IMAGE := $(CONFIG_SPL_IMAGE:\"%\"=%)\n\nOBJCOPYFLAGS_u-boot-with-spl.bin = -I binary -O binary \\\n\t\t\t\t   --pad-to=$(CONFIG_SPL_PAD_TO)\nu-boot-with-spl.bin: $(SPL_IMAGE) $(SPL_PAYLOAD) FORCE\n\t$(call if_changed,pad_cat)\n\nifeq ($(CONFIG_ARCH_LPC32XX)$(CONFIG_SPL),yy)\nMKIMAGEFLAGS_lpc32xx-spl.img = -T lpc32xximage -a $(CONFIG_SPL_TEXT_BASE)\n\nlpc32xx-spl.img: spl/u-boot-spl.bin FORCE\n\t$(call if_changed,mkimage)\n\nOBJCOPYFLAGS_lpc32xx-boot-0.bin = -I binary -O binary --pad-to=$(CONFIG_SPL_PAD_TO)\n\nlpc32xx-boot-0.bin: lpc32xx-spl.img FORCE\n\t$(call if_changed,objcopy)\n\nOBJCOPYFLAGS_lpc32xx-boot-1.bin = -I binary -O binary --pad-to=$(CONFIG_SPL_PAD_TO)\n\nlpc32xx-boot-1.bin: lpc32xx-spl.img FORCE\n\t$(call if_changed,objcopy)\n\nlpc32xx-full.bin: lpc32xx-boot-0.bin lpc32xx-boot-1.bin u-boot.img FORCE\n\t$(call if_changed,cat)\n\nendif\n\nOBJCOPYFLAGS_u-boot-with-tpl.bin = -I binary -O binary \\\n\t\t\t\t   --pad-to=$(CONFIG_TPL_PAD_TO)\ntpl/u-boot-with-tpl.bin: tpl/u-boot-tpl.bin u-boot.bin FORCE\n\t$(call if_changed,pad_cat)\n\nSPL: spl/u-boot-spl.bin FORCE\n\t$(Q)$(MAKE) $(build)=arch/arm/mach-imx $@\n\n#ifeq ($(CONFIG_ARCH_IMX8M)$(CONFIG_ARCH_IMX8), y)\nifeq ($(CONFIG_SPL_LOAD_IMX_CONTAINER), y)\nu-boot.cnt: u-boot.bin FORCE\n\t$(Q)$(MAKE) $(build)=arch/arm/mach-imx $@\n\nflash.bin: spl/u-boot-spl.bin u-boot.cnt FORCE\n\t$(Q)$(MAKE) $(build)=arch/arm/mach-imx $@\nelse\nifeq ($(CONFIG_BINMAN),y)\nflash.bin: spl/u-boot-spl.bin $(INPUTS-y) FORCE\n\t$(call if_changed,binman)\nelse\nflash.bin: spl/u-boot-spl.bin u-boot.itb FORCE\n\t$(Q)$(MAKE) $(build)=arch/arm/mach-imx $@\nendif\nendif\n#endif\n\nu-boot.uim: u-boot.bin FORCE\n\t$(Q)$(MAKE) $(build)=arch/arm/mach-imx $@\n\nu-boot-nand.imx: u-boot.imx FORCE\n\t$(Q)$(MAKE) $(build)=arch/arm/mach-imx $@\n\nu-boot-with-spl.imx u-boot-with-nand-spl.imx: SPL $(if $(CONFIG_OF_SEPARATE),u-boot.img,u-boot.uim) FORCE\n\t$(Q)$(MAKE) $(build)=arch/arm/mach-imx $@\n\nMKIMAGEFLAGS_u-boot.ubl = -n $(UBL_CONFIG) -T ublimage -e $(CONFIG_TEXT_BASE)\n\nu-boot.ubl: u-boot-with-spl.bin FORCE\n\t$(call if_changed,mkimage)\n\nMKIMAGEFLAGS_u-boot-spl.ais = -s -n \"/dev/null\" \\\n\t-T aisimage -e $(CONFIG_SPL_TEXT_BASE)\nspl/u-boot-spl.ais: spl/u-boot-spl.bin FORCE\n\t$(call if_changed,mkimage)\n\nOBJCOPYFLAGS_u-boot.ais = -I binary -O binary --pad-to=$(CONFIG_SPL_PAD_TO)\nu-boot.ais: spl/u-boot-spl.ais u-boot.img FORCE\n\t$(call if_changed,pad_cat)\n\nu-boot-signed.sb: u-boot.bin spl/u-boot-spl.bin\n\t$(Q)$(MAKE) $(build)=arch/arm/cpu/arm926ejs/mxs u-boot-signed.sb\nu-boot.sb: u-boot.bin spl/u-boot-spl.bin\n\t$(Q)$(MAKE) $(build)=arch/arm/cpu/arm926ejs/mxs u-boot.sb\n\nMKIMAGEFLAGS_u-boot-spl.img = -A $(ARCH) -T firmware -C none \\\n\t-a $(CONFIG_SPL_TEXT_BASE) -e $(CONFIG_SPL_TEXT_BASE) -n XLOADER\nspl/u-boot-spl.img: spl/u-boot-spl.bin FORCE\n\t$(call if_changed,mkimage)\n\nifneq ($(CONFIG_ARCH_SOCFPGA),)\nquiet_cmd_gensplx4 = GENSPLX4 $@\ncmd_gensplx4 = $(OBJCOPY) -I binary -O binary --gap-fill=0x0\t\t\\\n\t\t\t--pad-to=$(CONFIG_SPL_PAD_TO)\t\t\t\\\n\t\t\tspl/u-boot-spl.sfp spl/u-boot-spl.sfp &&        \\\n\t\tcat\tspl/u-boot-spl.sfp spl/u-boot-spl.sfp\t\t\\\n\t\t\tspl/u-boot-spl.sfp spl/u-boot-spl.sfp > $@ || { rm -f $@; false; }\nspl/u-boot-splx4.sfp: spl/u-boot-spl.sfp FORCE\n\t$(call if_changed,gensplx4)\n\nquiet_cmd_socboot = SOCBOOT $@\ncmd_socboot = cat\tspl/u-boot-splx4.sfp u-boot.img > $@ || { rm -f $@; false; }\nu-boot-with-spl.sfp: spl/u-boot-splx4.sfp u-boot.img FORCE\n\t$(call if_changed,socboot)\n\nquiet_cmd_gensplpadx4 = GENSPLPADX4 $@\ncmd_gensplpadx4 =  dd if=/dev/zero of=spl/u-boot-spl.pad bs=64 count=1024 ; \\\n\t\t   cat\tspl/u-boot-spl.sfp spl/u-boot-spl.pad \\\n\t\t\tspl/u-boot-spl.sfp spl/u-boot-spl.pad \\\n\t\t\tspl/u-boot-spl.sfp spl/u-boot-spl.pad \\\n\t\t\tspl/u-boot-spl.sfp spl/u-boot-spl.pad > $@ || \\\n\t\t\t{ rm -f $@ spl/u-boot-spl.pad; false; }\nu-boot-spl-padx4.sfp: spl/u-boot-spl.sfp FORCE\n\t$(call if_changed,gensplpadx4)\n\nquiet_cmd_socnandboot = SOCNANDBOOT $@\ncmd_socnandboot = cat\tu-boot-spl-padx4.sfp u-boot.img > $@ || { rm -f $@; false; }\nu-boot-with-nand-spl.sfp: u-boot-spl-padx4.sfp u-boot.img FORCE\n\t$(call if_changed,socnandboot)\n\nendif\n\nifeq ($(CONFIG_MPC85XX_HAVE_RESET_VECTOR)$(CONFIG_OF_SEPARATE),yy)\nu-boot-dtb.bin: u-boot-nodtb.bin u-boot.dtb u-boot-br.bin FORCE\n\t$(call if_changed,binman)\n\nOBJCOPYFLAGS_u-boot-br.bin := -O binary -j .bootpg -j .resetvec\nu-boot-br.bin: u-boot FORCE\n\t$(call if_changed,objcopy)\nendif\n\nquiet_cmd_ldr = LD      $@\ncmd_ldr = $(LD) $(LDFLAGS_$(@F)) \\\n\t       $(filter-out FORCE,$^) -o $@\n\nifdef CONFIG_X86\nOBJCOPYFLAGS_u-boot-x86-start16.bin := -O binary -j .start16\nu-boot-x86-start16.bin: u-boot FORCE\n\t$(call if_changed,objcopy)\n\nOBJCOPYFLAGS_u-boot-x86-reset16.bin := -O binary -j .resetvec\nu-boot-x86-reset16.bin: u-boot FORCE\n\t$(call if_changed,objcopy)\n\nendif # CONFIG_X86\n\nOBJCOPYFLAGS_u-boot-app.efi := $(OBJCOPYFLAGS_EFI)\nu-boot-app.efi: u-boot FORCE\n\t$(call if_changed,zobjcopy)\n\nu-boot.bin.o: u-boot.bin FORCE\n\t$(call if_changed,efipayload)\n\nu-boot-payload.lds: $(LDSCRIPT_EFI) FORCE\n\t$(call if_changed_dep,cpp_lds)\n\n# Rule to link the EFI payload which contains a stub and a U-Boot binary\nquiet_cmd_u-boot_payload ?= LD      $@\n      cmd_u-boot_payload ?= $(LD) $(LDFLAGS_EFI_PAYLOAD) -o $@ \\\n      -T u-boot-payload.lds arch/x86/cpu/call32.o \\\n      lib/efi/efi.o lib/efi/efi_stub.o u-boot.bin.o \\\n      $(addprefix arch/$(ARCH)/lib/,$(EFISTUB))\n\nu-boot-payload: u-boot.bin.o u-boot-payload.lds FORCE\n\t$(call if_changed,u-boot_payload)\n\nOBJCOPYFLAGS_u-boot-payload.efi := $(OBJCOPYFLAGS_EFI)\nu-boot-payload.efi: u-boot-payload FORCE\n\t$(call if_changed,zobjcopy)\n\nu-boot-img.bin: spl/u-boot-spl.bin u-boot.img FORCE\n\t$(call if_changed,cat)\n\n#Add a target to create boot binary having SPL binary in PBI format\n#concatenated with u-boot binary. It is need by PowerPC SoC having\n#internal SRAM <= 512KB.\nMKIMAGEFLAGS_u-boot-spl.pbl = -n $(srctree)/$(CONFIG_SYS_FSL_PBL_RCW:\"%\"=%) \\\n\t\t-R $(srctree)/$(CONFIG_SYS_FSL_PBL_PBI:\"%\"=%) -T pblimage \\\n\t\t-A $(ARCH) -a $(CONFIG_SPL_TEXT_BASE)\n\nspl/u-boot-spl.pbl: spl/u-boot-spl.bin FORCE\n\t$(call if_changed,mkimage)\n\nifeq ($(ARCH),arm)\nUBOOT_BINLOAD := u-boot.img\nelse\nUBOOT_BINLOAD := u-boot.bin\nendif\n\nOBJCOPYFLAGS_u-boot-with-spl-pbl.bin = -I binary -O binary --pad-to=$(CONFIG_SPL_PAD_TO) \\\n\t\t\t  --gap-fill=0xff\n\nu-boot-with-spl-pbl.bin: spl/u-boot-spl.pbl $(UBOOT_BINLOAD) FORCE\n\t$(call if_changed,pad_cat)\n\nquiet_cmd_u-boot-elf ?= LD      $@\n\tcmd_u-boot-elf ?= $(LD) u-boot-elf.o -o $@ \\\n\t$(if $(CONFIG_SYS_BIG_ENDIAN),-EB,-EL) \\\n\t-T u-boot-elf.lds --defsym=$(CONFIG_PLATFORM_ELFENTRY)=$(CONFIG_TEXT_BASE) \\\n\t-Ttext=$(CONFIG_TEXT_BASE)\nu-boot.elf: u-boot.bin u-boot-elf.lds\n\t$(Q)$(OBJCOPY) -I binary $(PLATFORM_ELFFLAGS) $< u-boot-elf.o\n\t$(call if_changed,u-boot-elf)\n\nu-boot-elf.lds: arch/u-boot-elf.lds prepare FORCE\n\t$(call if_changed_dep,cpp_lds)\n\n# MediaTek's ARM-based u-boot needs a header to contains its load address\n# which is parsed by the BootROM.\n# If the SPL build is enabled, the header will be added to the spl binary,\n# and the spl binary and the u-boot.img will be combined into one file.\n# Otherwise the header will be added to the u-boot.bin directly.\n\nifeq ($(CONFIG_SPL),y)\nspl/u-boot-spl-mtk.bin: spl/u-boot-spl\n\nu-boot-mtk.bin: u-boot-with-spl.bin\n\t$(call if_changed,copy)\nelse\nMKIMAGEFLAGS_u-boot-mtk.bin = -T mtk_image \\\n\t-a $(CONFIG_TEXT_BASE) -e $(CONFIG_TEXT_BASE) \\\n\t-n \"$(patsubst \"%\",%,$(CONFIG_MTK_BROM_HEADER_INFO))\"\n\nu-boot-mtk.bin: u-boot.bin FORCE\n\t$(call if_changed,mkimage)\nendif\n\nquiet_cmd_endian_swap = SWAP    $@\n      cmd_endian_swap = $(srctree)/tools/endian-swap.py $< $@\n\nu-boot-swap.bin: u-boot.bin FORCE\n\t$(call if_changed,endian_swap)\n\nARCH_POSTLINK := $(wildcard $(srctree)/arch/$(ARCH)/Makefile.postlink)\n\n# Generate linker list symbols references to force compiler to not optimize\n# them away when compiling with LTO\nifeq ($(LTO_ENABLE),y)\nu-boot-keep-syms-lto := keep-syms-lto.o\nu-boot-keep-syms-lto_c := $(patsubst %.o,%.c,$(u-boot-keep-syms-lto))\n\nquiet_cmd_keep_syms_lto = KSL     $@\n      cmd_keep_syms_lto = \\\n\t$(srctree)/scripts/gen_ll_addressable_symbols.sh $(NM) $^ > $@\n\nquiet_cmd_keep_syms_lto_cc = KSLCC   $@\n      cmd_keep_syms_lto_cc = \\\n\t$(CC) $(filter-out $(LTO_CFLAGS),$(c_flags)) -c -o $@ $<\n\n$(u-boot-keep-syms-lto_c): $(u-boot-main)\n\t$(call if_changed,keep_syms_lto)\n$(u-boot-keep-syms-lto): $(u-boot-keep-syms-lto_c)\n\t$(call if_changed,keep_syms_lto_cc)\nelse\nu-boot-keep-syms-lto :=\nendif\n\n# Rule to link u-boot\n# May be overridden by arch/$(ARCH)/config.mk\nifeq ($(LTO_ENABLE),y)\nquiet_cmd_u-boot__ ?= LTO     $@\n      cmd_u-boot__ ?=\t\t\t\t\t\t\t\t\\\n\t\t$(CC) -nostdlib -nostartfiles\t\t\t\t\t\\\n\t\t$(LTO_FINAL_LDFLAGS) $(c_flags)\t\t\t\t\t\\\n\t\t$(KBUILD_LDFLAGS:%=-Wl,%) $(LDFLAGS_u-boot:%=-Wl,%) -o $@\t\\\n\t\t-T u-boot.lds $(u-boot-init)\t\t\t\t\t\\\n\t\t-Wl,--whole-archive\t\t\t\t\t\t\\\n\t\t\t$(u-boot-main)\t\t\t\t\t\t\\\n\t\t\t$(u-boot-keep-syms-lto)\t\t\t\t\t\\\n\t\t\t$(PLATFORM_LIBS)\t\t\t\t\t\\\n\t\t-Wl,--no-whole-archive\t\t\t\t\t\t\\\n\t\t-Wl,-Map,u-boot.map;\t\t\t\t\t\t\\\n\t\t$(if $(ARCH_POSTLINK), $(MAKE) -f $(ARCH_POSTLINK) $@, true)\nelse\nquiet_cmd_u-boot__ ?= LD      $@\n      cmd_u-boot__ ?= $(LD) $(KBUILD_LDFLAGS) $(LDFLAGS_u-boot) -o $@\t\t\\\n\t\t-T u-boot.lds $(u-boot-init)\t\t\t\t\t\\\n\t\t--whole-archive\t\t\t\t\t\t\t\\\n\t\t\t$(u-boot-main)\t\t\t\t\t\t\\\n\t\t--no-whole-archive\t\t\t\t\t\t\\\n\t\t$(PLATFORM_LIBS) -Map u-boot.map;\t\t\t\t\\\n\t\t$(if $(ARCH_POSTLINK), $(MAKE) -f $(ARCH_POSTLINK) $@, true)\nendif\n\nquiet_cmd_smap = GEN     common/system_map.o\ncmd_smap = \\\n\tsmap=`$(call SYSTEM_MAP,u-boot) | \\\n\t\tawk '$$2 ~ /[tTwW]/ {printf $$1 $$3 \"\\\\\\\\000\"}'` ; \\\n\t$(CC) $(c_flags) -DSYSTEM_MAP=\"\\\"$${smap}\\\"\" \\\n\t\t-c $(srctree)/common/system_map.c -o common/system_map.o\n\nu-boot:\t$(u-boot-init) $(u-boot-main) $(u-boot-keep-syms-lto) u-boot.lds FORCE\n\t+$(call if_changed,u-boot__)\nifeq ($(CONFIG_KALLSYMS),y)\n\t$(call cmd,smap)\n\t$(call cmd,u-boot__) common/system_map.o\nendif\n\nifeq ($(CONFIG_RISCV),y)\n\t@tools/prelink-riscv $@\nendif\n\nquiet_cmd_sym ?= SYM     $@\n      cmd_sym ?= $(OBJDUMP) -t $< > $@\nu-boot.sym: u-boot FORCE\n\t$(call if_changed,sym)\n\n# Environment processing\n# ---------------------------------------------------------------------------\n\n# Directory where we expect the .env file, if it exists\nENV_DIR := $(srctree)/board/$(BOARDDIR)\n\n# Basename of .env file, stripping quotes\nENV_SOURCE_FILE := $(CONFIG_ENV_SOURCE_FILE:\"%\"=%)\n\n# Filename of .env file\nENV_FILE_CFG := $(ENV_DIR)/$(ENV_SOURCE_FILE).env\n\n# Default filename, if CONFIG_ENV_SOURCE_FILE is empty\nENV_FILE_BOARD := $(ENV_DIR)/$(CONFIG_SYS_BOARD:\"%\"=%).env\n\n# Select between the CONFIG_ENV_SOURCE_FILE and the default one\nENV_FILE := $(if $(ENV_SOURCE_FILE),$(ENV_FILE_CFG),$(wildcard $(ENV_FILE_BOARD)))\n\n# Run the environment text file through the preprocessor, but only if it is\n# non-empty, to save time and possible build errors if something is wonky with\n# the board.\n# If there is no ENV_FILE, produce an empty output file, to prevent a previous\n# build's file being used in the case of in-tree builds.\nquiet_cmd_gen_envp = ENVP    $@\n      cmd_gen_envp = \\\n\tif [ -s \"$(ENV_FILE)\" ]; then \\\n\t\t$(CPP) -P $(cpp_flags) -x assembler-with-cpp -undef \\\n\t\t\t-D__ASSEMBLY__ \\\n\t\t\t-D__UBOOT_CONFIG__ \\\n\t\t\t-I . -I include -I $(srctree)/include \\\n\t\t\t-include linux/kconfig.h -include include/config.h \\\n\t\t\t-I$(srctree)/arch/$(ARCH)/include \\\n\t\t\t$< -o $@; \\\n\telse \\\n\t\trm -f $@; \\\n\t\ttouch $@ ; \\\n\tfi\ninclude/generated/env.in: include/generated/env.txt\n\t$(call cmd,gen_envp)\n\n# Regenerate the environment if it changes\n# We use 'wildcard' since the file is not required to exist (at present), in\n# which case we don't want this dependency, but instead should create an empty\n# file\n# This rule is useful since it shows the source file for the environment\nquiet_cmd_envc = ENVC    $@\n      cmd_envc = \\\n\tif [ -f \"$<\" ]; then \\\n\t\tcat $< > $@; \\\n\telif [ -n \"$(ENV_SOURCE_FILE)\" ]; then \\\n\t\techo \"Missing file $(ENV_FILE_CFG)\"; \\\n\telse \\\n\t\ttouch $@ ; \\\n\tfi\n\ninclude/generated/env.txt: $(wildcard $(ENV_FILE)) include/generated/autoconf.h\n\t$(call cmd,envc)\n\n# Write out the resulting environment, converted to a C string\nquiet_cmd_gen_envt = ENVT    $@\n      cmd_gen_envt = \\\n\tawk -f $(srctree)/scripts/env2string.awk $< >$@\n$(env_h): include/generated/env.in\n\t$(call cmd,gen_envt)\n\n# ---------------------------------------------------------------------------\n\n# The actual objects are generated when descending,\n# make sure no implicit rule kicks in\n$(sort $(u-boot-init) $(u-boot-main)): $(u-boot-dirs) ;\n\n# Handle descending into subdirectories listed in $(u-boot-dirs)\n# Preset locale variables to speed up the build process. Limit locale\n# tweaks to this spot to avoid wrong language settings when running\n# make menuconfig etc.\n# Error messages still appears in the original language\n\nPHONY += $(u-boot-dirs)\n$(u-boot-dirs): prepare scripts\n\t$(Q)$(MAKE) $(build)=$@\n\ntools: prepare\n# The \"tools\" are needed early\n$(filter-out tools, $(u-boot-dirs)): tools\n# The \"examples\" conditionally depend on U-Boot (say, when USE_PRIVATE_LIBGCC\n# is \"yes\"), so compile examples after U-Boot is compiled.\nexamples: $(filter-out examples, $(u-boot-dirs))\n\n# The setlocalversion script comes from linux and expects a\n# KERNELVERSION variable in the environment for figuring out which\n# annotated tags are relevant. Pass UBOOTVERSION.\ndefine filechk_uboot.release\n\tKERNELVERSION=$(UBOOTVERSION) $(CONFIG_SHELL) $(srctree)/scripts/setlocalversion $(srctree)\nendef\n\n# Store (new) UBOOTRELEASE string in include/config/uboot.release\ninclude/config/uboot.release: include/config/auto.conf FORCE\n\t$(call filechk,uboot.release)\n\n\n# Things we need to do before we recursively start building the kernel\n# or the modules are listed in \"prepare\".\n# A multi level approach is used. prepareN is processed before prepareN-1.\n# archprepare is used in arch Makefiles and when processed asm symlink,\n# version.h and scripts_basic is processed / created.\n\n# Listed in dependency order\nPHONY += prepare archprepare prepare0 prepare1 prepare2 prepare3\n\n# prepare3 is used to check if we are building in a separate output directory,\n# and if so do:\n# 1) Check that make has not been executed in the kernel src $(srctree)\nprepare3: include/config/uboot.release\nifneq ($(KBUILD_SRC),)\n\t@$(kecho) '  Using $(srctree) as source for U-Boot'\n\t$(Q)if [ -f $(srctree)/.config -o -d $(srctree)/include/config ]; then \\\n\t\techo >&2 \"  $(srctree) is not clean, please run 'make mrproper'\"; \\\n\t\techo >&2 \"  in the '$(srctree)' directory.\";\\\n\t\t/bin/false; \\\n\tfi;\nendif\n\n# prepare2 creates a makefile if using a separate output directory\nprepare2: prepare3 outputmakefile cfg\n\nprepare1: prepare2 $(version_h) $(timestamp_h) $(dt_h) $(env_h) \\\n                   include/config/auto.conf\nifeq ($(wildcard $(LDSCRIPT)),)\n\t@echo >&2 \"  Could not find linker script.\"\n\t@/bin/false\nendif\n\nifeq ($(CONFIG_USE_DEFAULT_ENV_FILE),y)\nprepare1: $(defaultenv_h)\n\nenvtools: $(defaultenv_h)\nendif\n\narchprepare: prepare1 scripts_basic\n\nprepare0: archprepare FORCE\n\t$(Q)$(MAKE) $(build)=.\n\n# All the preparing..\nprepare: prepare0\n\n# Generate some files\n# ---------------------------------------------------------------------------\n\n# Use sed to remove leading zeros from PATCHLEVEL to avoid using octal numbers\ndefine filechk_version.h\n\t(echo \\#define PLAIN_VERSION \\\"$(UBOOTRELEASE)\\\"; \\\n\techo \\#define U_BOOT_VERSION \\\"U-Boot \\\" PLAIN_VERSION; \\\n\techo \\#define U_BOOT_VERSION_NUM $(VERSION); \\\n\techo \\#define U_BOOT_VERSION_NUM_PATCH $$(echo $(PATCHLEVEL) | \\\n\t\tsed -e \"s/^0*//\"); \\\n\techo \\#define HOST_ARCH $(HOST_ARCH); \\\n\techo \\#define CC_VERSION_STRING \\\"$$(LC_ALL=C $(CC) --version | head -n 1)\\\"; \\\n\techo \\#define LD_VERSION_STRING \\\"$$(LC_ALL=C $(LD) --version | head -n 1)\\\"; )\nendef\n\n# The SOURCE_DATE_EPOCH mechanism requires a date that behaves like GNU date.\n# The BSD date on the other hand behaves different and would produce errors\n# with the misused '-d' switch.  Respect that and search a working date with\n# well known pre- and suffixes for the GNU variant of date.\ndefine filechk_timestamp.h\n\t(if test -n \"$${SOURCE_DATE_EPOCH}\"; then \\\n\t\tSOURCE_DATE=\"@$${SOURCE_DATE_EPOCH}\"; \\\n\t\tDATE=\"\"; \\\n\t\tfor date in gdate date.gnu date; do \\\n\t\t\t$${date} -u -d \"$${SOURCE_DATE}\" >/dev/null 2>&1 && DATE=\"$${date}\"; \\\n\t\tdone; \\\n\t\tif test -n \"$${DATE}\"; then \\\n\t\t\tLC_ALL=C $${DATE} -u -d \"$${SOURCE_DATE}\" +'#define U_BOOT_DATE \"%b %d %C%y\"'; \\\n\t\t\tLC_ALL=C $${DATE} -u -d \"$${SOURCE_DATE}\" +'#define U_BOOT_TIME \"%T\"'; \\\n\t\t\tLC_ALL=C $${DATE} -u -d \"$${SOURCE_DATE}\" +'#define U_BOOT_TZ \"%z\"'; \\\n\t\t\tLC_ALL=C $${DATE} -u -d \"$${SOURCE_DATE}\" +'#define U_BOOT_EPOCH %s'; \\\n\t\telse \\\n\t\t\treturn 42; \\\n\t\tfi; \\\n\telse \\\n\t\tLC_ALL=C date +'#define U_BOOT_DATE \"%b %d %C%y\"'; \\\n\t\tLC_ALL=C date +'#define U_BOOT_TIME \"%T\"'; \\\n\t\tLC_ALL=C date +'#define U_BOOT_TZ \"%z\"'; \\\n\t\tLC_ALL=C date +'#define U_BOOT_EPOCH %s'; \\\n\tfi)\nendef\n\ndefine filechk_defaultenv.h\n\t( { grep -v '^#' | grep -v '^$$' || true ; echo '' ; } | \\\n\t tr '\\n' '\\0' | \\\n\t sed -e 's/\\\\\\x0\\s*//g' | \\\n\t xxd -i ; )\nendef\n\ndefine filechk_dt.h\n\t(if test -n \"$${DEVICE_TREE}\"; then \\\n\t\techo \\#define DEVICE_TREE \\\"$(DEVICE_TREE)\\\"; \\\n\telse \\\n\t\techo \\#define DEVICE_TREE CONFIG_DEFAULT_DEVICE_TREE; \\\n\tfi)\nendef\n\n$(version_h): include/config/uboot.release FORCE\n\t$(call filechk,version.h)\n\n$(timestamp_h): $(srctree)/Makefile FORCE\n\t$(call filechk,timestamp.h)\n\n$(dt_h): $(srctree)/Makefile FORCE\n\t$(call filechk,dt.h)\n\n$(defaultenv_h): $(CONFIG_DEFAULT_ENV_FILE:\"%\"=%) FORCE\n\t$(call filechk,defaultenv.h)\n\n# ---------------------------------------------------------------------------\n# Devicetree files\n\nifneq ($(wildcard $(srctree)/arch/$(SRCARCH)/boot/dts/),)\ndtstree := arch/$(SRCARCH)/boot/dts\nendif\n\nifneq ($(dtstree),)\n\n%.dtb: prepare3 scripts_dtc\n\t$(Q)$(MAKE) $(build)=$(dtstree) $(dtstree)/$@\n\nPHONY += dtbs dtbs_install\ndtbs: prepare3 scripts_dtc\n\t$(Q)$(MAKE) $(build)=$(dtstree)\n\ndtbs_install:\n\t$(Q)$(MAKE) $(dtbinst)=$(dtstree)\n\nendif\n\n# Check dtc and pylibfdt, if DTC is provided, else build them\nPHONY += scripts_dtc\nscripts_dtc: scripts_basic\n\t$(Q)if test \"$(DTC)\" = \"$(DTC_INTREE)\"; then \\\n\t\t$(MAKE) $(build)=scripts/dtc; \\\n\telse \\\n\t\tif ! $(DTC) -v >/dev/null; then \\\n\t\t\techo '*** Failed to check dtc version: $(DTC)'; \\\n\t\t\tfalse; \\\n\t\telse \\\n\t\t\tif test \"$(call dtc-version)\" -lt $(DTC_MIN_VERSION); then \\\n\t\t\t\techo '*** Your dtc is too old, please upgrade to dtc $(DTC_MIN_VERSION) or newer'; \\\n\t\t\t\tfalse; \\\n\t\t\telse \\\n\t\t\t\tif [ -n \"$(CONFIG_PYLIBFDT)\" ]; then \\\n\t\t\t\t\tif ! echo \"import libfdt\" | $(PYTHON3) 2>/dev/null; then \\\n\t\t\t\t\t\techo '*** pylibfdt does not seem to be available with $(PYTHON3)'; \\\n\t\t\t\t\t\tfalse; \\\n\t\t\t\t\tfi; \\\n\t\t\t\tfi; \\\n\t\t\tfi; \\\n\t\tfi; \\\n\tfi\n\n# ---------------------------------------------------------------------------\nquiet_cmd_cpp_lds = LDS     $@\ncmd_cpp_lds = $(CPP) -Wp,-MD,$(depfile) $(cpp_flags) $(LDPPFLAGS) \\\n\t\t-D__ASSEMBLY__ -x assembler-with-cpp -std=c99 -P -o $@ $<\n\nu-boot.lds: $(LDSCRIPT) prepare FORCE\n\t$(call if_changed_dep,cpp_lds)\n\nspl/u-boot-spl.bin: spl/u-boot-spl\n\t@:\n\t$(SPL_SIZE_CHECK)\n\nspl/u-boot-spl-dtb.bin: spl/u-boot-spl\n\t@:\n\nspl/u-boot-spl-dtb.hex: spl/u-boot-spl\n\t@:\n\nspl/u-boot-spl: tools prepare $(if $(CONFIG_SPL_OF_CONTROL),dts/dt.dtb)\n\t$(Q)$(MAKE) obj=spl -f $(srctree)/scripts/Makefile.xpl all\n\nspl/sunxi-spl.bin: spl/u-boot-spl\n\t@:\n\nspl/sunxi-spl-with-ecc.bin: spl/sunxi-spl.bin\n\t@:\n\nspl/u-boot-spl.sfp: spl/u-boot-spl\n\t@:\n\nspl/boot.bin: spl/u-boot-spl\n\t@:\n\ntpl/u-boot-tpl.bin: tpl/u-boot-tpl\n\t@:\n\t$(TPL_SIZE_CHECK)\n\ntpl/u-boot-tpl: tools prepare $(if $(CONFIG_TPL_OF_CONTROL),dts/dt.dtb)\n\t$(Q)$(MAKE) obj=tpl -f $(srctree)/scripts/Makefile.xpl all\n\nvpl/u-boot-vpl.bin: vpl/u-boot-vpl\n\t@:\n\t$(VPL_SIZE_CHECK)\n\nvpl/u-boot-vpl: tools prepare $(if $(CONFIG_TPL_OF_CONTROL),dts/dt.dtb)\n\t$(Q)$(MAKE) obj=vpl -f $(srctree)/scripts/Makefile.xpl all\n\nTAG_SUBDIRS := $(patsubst %,$(srctree)/%,$(u-boot-dirs) include)\n\nFIND := find\nFINDFLAGS := -L\n\ntags ctags:\n\t\tctags -w -o ctags `$(FIND) $(FINDFLAGS) $(TAG_SUBDIRS) \\\n\t\t\t\t\t\t-name '*.[chS]' -print`\n\t\tln -s ctags tags\n\netags:\n\t\tetags -a -o etags `$(FIND) $(FINDFLAGS) $(TAG_SUBDIRS) \\\n\t\t\t\t\t\t-name '*.[chS]' -print`\ncscope:\n\t\t$(FIND) $(FINDFLAGS) $(TAG_SUBDIRS) -name '*.[chS]' -print > \\\n\t\t\t\t\t\tcscope.files\n\t\t@find $(TAG_SUBDIRS) -name '*.[chS]' -type l -print | \\\n\t\t\tgrep -xvf - cscope.files > cscope.files.no-symlinks; \\\n\t\tmv cscope.files.no-symlinks cscope.files\n\t\tcscope -b -q -k\n\nSYSTEM_MAP = \\\n\t\t$(NM) $1 | \\\n\t\tgrep -v '\\(compiled\\)\\|\\(\\.o$$\\)\\|\\( [aUw] \\)\\|\\(\\.\\.ng$$\\)\\|\\(LASH[RL]DI\\)' | \\\n\t\tLC_ALL=C sort\nSystem.map:\tu-boot\n\t\t@$(call SYSTEM_MAP,$<) > $@\n\n#########################################################################\n\n# ARM relocations should all be R_ARM_RELATIVE (32-bit) or\n# R_AARCH64_RELATIVE (64-bit).\ncheckarmreloc: u-boot\n\t@RELOC=\"`$(CROSS_COMPILE)readelf -r -W $< | cut -d ' ' -f 4 | \\\n\t\tgrep R_A | sort -u`\"; \\\n\tif test \"$$RELOC\" != \"R_ARM_RELATIVE\" -a \\\n\t\t \"$$RELOC\" != \"R_AARCH64_RELATIVE\"; then \\\n\t\techo \"$< contains unexpected relocations: $$RELOC\"; \\\n\t\tfalse; \\\n\tfi\n\ntools/version.h: include/version.h\n\t$(Q)mkdir -p $(dir $@)\n\t$(call if_changed,copy)\n\nenvtools: u-boot-initial-env scripts_basic $(version_h) $(timestamp_h) tools/version.h\n\t$(Q)$(MAKE) $(build)=tools/env\n\ntools-only: export TOOLS_ONLY=y\ntools-only: scripts_basic $(version_h) $(timestamp_h) tools/version.h\n\t$(Q)$(MAKE) $(build)=tools\n\ntools-all: export HOST_TOOLS_ALL=y\ntools-all: envtools tools ;\n\ncross_tools: export CROSS_BUILD_TOOLS=y\ncross_tools: tools ;\n\n.PHONY : CHANGELOG\nCHANGELOG:\n\tgit log --no-merges U-Boot-1_1_5.. | \\\n\tunexpand -a | sed -e 's/\\s\\s*$$//' > $@\n\n#########################################################################\n\n###\n# Cleaning is done on three levels.\n# make clean     Delete most generated files\n#                Leave enough to build external modules\n# make mrproper  Delete the current configuration, and all generated files\n# make distclean Remove editor backup files, patch leftover files and the like\n\n# Directories & files removed with 'make clean'\nCLEAN_DIRS  += $(MODVERDIR) \\\n\t       $(foreach d, spl tpl vpl, $(patsubst %,$d/%, \\\n\t\t\t$(filter-out include, $(shell ls -1 $d 2>/dev/null))))\n\nCLEAN_FILES += include/autoconf.mk* include/bmp_logo.h include/bmp_logo_data.h \\\n\t       include/config.h include/generated/env.* drivers/video/u_boot_logo.S \\\n\t       tools/version.h u-boot* MLO* SPL System.map fit-dtb.blob* \\\n\t       u-boot-ivt.img.log u-boot-dtb.imx.log SPL.log u-boot.imx.log \\\n\t       lpc32xx-* bl31.c bl31.elf bl31_*.bin image.map tispl.bin* \\\n\t       idbloader.img flash.bin flash.log defconfig keep-syms-lto.c \\\n\t       mkimage-out.spl.mkimage mkimage.spl.mkimage imx-boot.map \\\n\t       itb.fit.fit itb.fit.itb itb.map spl.map mkimage-out.rom.mkimage \\\n\t       mkimage.rom.mkimage mkimage-in-simple-bin* rom.map simple-bin* \\\n\t       idbloader-spi.img lib/efi_loader/helloworld_efi.S *.itb \\\n\t       Test* capsule.*.efi-capsule capsule*.map\n\n# Directories & files removed with 'make mrproper'\nMRPROPER_DIRS  += include/config include/generated spl tpl vpl \\\n\t\t  .tmp_objdiff doc/output include/asm\n\n# Remove include/asm symlink created by U-Boot before v2014.01\nMRPROPER_FILES += .config .config.old include/autoconf.mk* include/config.h \\\n\t\t  ctags etags tags TAGS cscope* GPATH GTAGS GRTAGS GSYMS \\\n\t\t  drivers/video/fonts/*.S include/asm *imx8mimage* *imx8mcst*\n\n# clean - Delete most, but leave enough to build external modules\n#\nclean: rm-dirs  := $(CLEAN_DIRS)\nclean: rm-files := $(CLEAN_FILES)\n\nclean-dirs\t:= $(foreach f,$(u-boot-alldirs),$(if $(wildcard $(srctree)/$f/Makefile),$f))\n\nclean-dirs      := $(addprefix _clean_, $(clean-dirs))\n\nPHONY += $(clean-dirs) clean archclean\n$(clean-dirs):\n\t$(Q)$(MAKE) $(clean)=$(patsubst _clean_%,%,$@)\n\nclean: $(clean-dirs)\n\t$(call cmd,rmdirs)\n\t$(call cmd,rmfiles)\n\t@find $(if $(KBUILD_EXTMOD), $(KBUILD_EXTMOD), .) $(RCS_FIND_IGNORE) \\\n\t\t\\( -name '*.[oas]' -o -name '*.ko' -o -name '.*.cmd' \\\n\t\t-o -name '*.ko.*' -o -name '*.su' -o -name '*.pyc' \\\n\t\t-o -name '*.dtb' -o -name '*.dtbo' \\\n\t\t-o -name '*.dtb.S' -o -name '*.dtbo.S' \\\n\t\t-o -name '.*.d' -o -name '.*.tmp' -o -name '*.mod.c' \\\n\t\t-o -name '*.lex.c' -o -name '*.tab.[ch]' \\\n\t\t-o -name '*.asn1.[ch]' \\\n\t\t-o -name '*.symtypes' -o -name 'modules.order' \\\n\t\t-o -name modules.builtin -o -name '.tmp_*.o.*' \\\n\t\t-o -name 'dsdt_generated.aml' -o -name 'dsdt_generated.asl.tmp' \\\n\t\t-o -name 'dsdt_generated.c' \\\n\t\t-o -name 'generated_defconfig' \\\n\t\t-o -name '*.efi' -o -name '*.gcno' -o -name '*.so' \\) \\\n\t\t-type f -print | xargs rm -f\n\n# mrproper - Delete all generated files, including .config\n#\nmrproper: rm-dirs  := $(wildcard $(MRPROPER_DIRS))\nmrproper: rm-files := $(wildcard $(MRPROPER_FILES))\nmrproper-dirs      := $(addprefix _mrproper_,scripts)\n\nPHONY += $(mrproper-dirs) mrproper archmrproper\n$(mrproper-dirs):\n\t$(Q)$(MAKE) $(clean)=$(patsubst _mrproper_%,%,$@)\n\nmrproper: clean $(mrproper-dirs)\n\t$(call cmd,rmdirs)\n\t$(call cmd,rmfiles)\n\t@rm -f arch/*/include/asm/arch\n\n# distclean\n#\nPHONY += distclean\n\ndistclean: mrproper\n\t@find $(srctree) $(RCS_FIND_IGNORE) \\\n\t\t\\( -name '*.orig' -o -name '*.rej' -o -name '*~' \\\n\t\t-o -name '*.bak' -o -name '#*#' -o -name '.*.orig' \\\n\t\t-o -name '.*.rej' -o -name '*%' -o -name 'core' \\\n\t\t-o -name '*.pyc' \\) \\\n\t\t-type f -print | xargs rm -f\n\t@rm -f boards.cfg CHANGELOG\n\n# See doc/develop/python_cq.rst\nPHONY += pylint pylint_err\nPYLINT_BASE := scripts/pylint.base\nPYLINT_CUR := pylint.cur\nPYLINT_DIFF := pylint.diff\npylint:\n\t$(Q)echo \"Running pylint on all files (summary in $(PYLINT_CUR); output in pylint.out/)\"\n\t$(Q)mkdir -p pylint.out\n\t$(Q)rm -f pylint.out/out*\n\t$(Q)find tools test -name \"*.py\" \\\n\t\t| xargs -n1 -P$(shell nproc 2>/dev/null || echo 1) \\\n\t\t\tsh -c 'pylint --reports=y --exit-zero -f parseable --ignore-imports=yes $$@ > pylint.out/$$(echo $$@ | tr / _ | sed s/.py//)' _\n\t$(Q)rm -f $(PYLINT_CUR)\n\t$(Q)( cd pylint.out; for f in *; do \\\n\t\tsed -ne \"s/Your code has been rated at \\([-0-9.]*\\).*/$$f \\1/p\" $$f; \\\n\tdone ) | sort > $(PYLINT_CUR)\n\t$(Q)base=$$(mktemp) cur=$$(mktemp); cut -d' ' -f1 $(PYLINT_BASE) >$$base; \\\n\t\tcut -d' ' -f1 $(PYLINT_CUR) >$$cur; \\\n\t\tcomm -3 $$base $$cur > $(PYLINT_DIFF); \\\n\t\tif [ -s $(PYLINT_DIFF) ]; then \\\n\t\t\techo \"Files have been added/removed. Try:\\n\\tcp $(PYLINT_CUR) $(PYLINT_BASE)\"; \\\n\t\t\techo; \\\n\t\t\techo \"Added files:\"; \\\n\t\t\tcomm -13 $$base $$cur; \\\n\t\t\techo; \\\n\t\t\techo \"Removed files:\"; \\\n\t\t\tcomm -23 $$base $$cur; \\\n\t\t\tfalse; \\\n\t\telse \\\n\t\t\trm $$base $$cur $(PYLINT_DIFF); \\\n\t\tfi\n\t$(Q)bad=false; while read base_file base_val <&3 && read cur_file cur_val <&4; do \\\n\t\tif awk \"BEGIN {exit !($$cur_val < $$base_val)}\"; then \\\n\t\t\techo \"$$base_file: Score was $$base_val, now $$cur_val\"; \\\n\t\t\tbad=true; fi; \\\n\t\tdone 3<$(PYLINT_BASE) 4<$(PYLINT_CUR); \\\n\t\tif $$bad; then \\\n\t\t\techo \"Some files have regressed, please fix\"; \\\n\t\t\tfalse; \\\n\t\telse \\\n\t\t\techo \"No pylint regressions\"; \\\n\t\tfi\n\n# Check for errors only\npylint_err:\n\t$(Q)pylint -E  -j 0 --ignore-imports=yes \\\n\t\t$(shell find tools test -name \"*.py\")\n\nbackup:\n\tF=`basename $(srctree)` ; cd .. ; \\\n\tgtar --force-local -zcvf `LC_ALL=C date \"+$$F-%Y-%m-%d-%T.tar.gz\"` $$F\n\nPHONY += _pip pip pip_release\n\npip_release: PIP_ARGS=\"--real\"\npip_test: PIP_ARGS=\"\"\npip: PIP_ARGS=\"-n\"\n\npip pip_test pip_release: _pip\n\n_pip:\n\tscripts/make_pip.sh u_boot_pylib ${PIP_ARGS}\n\tscripts/make_pip.sh patman ${PIP_ARGS}\n\tscripts/make_pip.sh buildman ${PIP_ARGS}\n\tscripts/make_pip.sh dtoc ${PIP_ARGS}\n\tscripts/make_pip.sh binman ${PIP_ARGS}\n\nhelp:\n\t@echo  'Cleaning targets:'\n\t@echo  '  clean\t\t  - Remove most generated files but keep the config'\n\t@echo  '  mrproper\t  - Remove all generated files + config + various backup files'\n\t@echo  '  distclean\t  - mrproper + remove editor backup and patch files'\n\t@echo  ''\n\t@echo  'Configuration targets:'\n\t@$(MAKE) -f $(srctree)/scripts/kconfig/Makefile help\n\t@echo  ''\n\t@echo  'Test targets:'\n\t@echo  ''\n\t@echo  '  check           - Run all automated tests that use sandbox'\n\t@echo  '  pcheck          - Run quick automated tests in parallel'\n\t@echo  '  qcheck          - Run quick automated tests that use sandbox'\n\t@echo  '  tcheck          - Run quick automated tests on tools'\n\t@echo  '  pylint          - Run pylint on all Python files'\n\t@echo  ''\n\t@echo  'Other generic targets:'\n\t@echo  '  all\t\t  - Build all necessary images depending on configuration'\n\t@echo  '  tests\t\t  - Build U-Boot for sandbox and run tests'\n\t@echo  '* u-boot\t  - Build the bare u-boot'\n\t@echo  '  dir/            - Build all files in dir and below'\n\t@echo  '  dir/file.[oisS] - Build specified target only'\n\t@echo  '  dir/file.lst    - Build specified mixed source/assembly target only'\n\t@echo  '                    (requires a recent binutils and recent build (System.map))'\n\t@echo  '  tags/ctags\t  - Generate ctags file for editors'\n\t@echo  '  etags\t\t  - Generate etags file for editors'\n\t@echo  '  cscope\t  - Generate cscope index'\n\t@echo  '  ubootrelease\t  - Output the release version string (use with make -s)'\n\t@echo  '  ubootversion\t  - Output the version stored in Makefile (use with make -s)'\n\t@echo  \"  cfg\t\t  - Don't build, just create the .cfg files\"\n\t@echo  \"  envtools\t  - Build only the target-side environment tools\"\n\t@echo  ''\n\t@echo  'PyPi / pip targets:'\n\t@echo  '  pip             - Check building of PyPi packages'\n\t@echo  '  pip_test        - Build PyPi pakages and upload to test server'\n\t@echo  '  pip_release     - Build PyPi pakages and upload to release server'\n\t@echo  ''\n\t@echo  'Static analysers'\n\t@echo  '  checkstack      - Generate a list of stack hogs'\n\t@echo  '  coccicheck      - Execute static code analysis with Coccinelle'\n\t@echo  ''\n\t@echo  'Documentation targets:'\n\t@$(MAKE) -f $(srctree)/doc/Makefile dochelp\n\t@echo  ''\n\t@echo  '  make V=0|1 [targets] 0 => quiet build (default), 1 => verbose build'\n\t@echo  '  make V=2   [targets] 2 => give reason for rebuild of target'\n\t@echo  '  make O=dir [targets] Locate all output files in \"dir\", including .config'\n\t@echo  '  make C=1   [targets] Check all c source with $$CHECK (sparse by default)'\n\t@echo  '  make C=2   [targets] Force check of all c source with $$CHECK'\n\t@echo  '  make RECORDMCOUNT_WARN=1 [targets] Warn about ignored mcount sections'\n\t@echo  '  make W=n   [targets] Enable extra gcc checks, n=1,2,3 where'\n\t@echo  '\t\t1: warnings which may be relevant and do not occur too often'\n\t@echo  '\t\t2: warnings which occur quite often but may still be relevant'\n\t@echo  '\t\t3: more obscure warnings, can most likely be ignored'\n\t@echo  '\t\tMultiple levels can be combined with W=12 or W=123'\n\t@echo  ''\n\t@echo  'Execute \"make\" or \"make all\" to build all targets marked with [*] '\n\t@echo  'For further info see the ./README file'\n\ntests check:\n\t$(srctree)/test/run\n\npcheck:\n\t$(srctree)/test/run parallel\n\nqcheck:\n\t$(srctree)/test/run quick\n\ntcheck:\n\t$(srctree)/test/run tools\n\n# Documentation targets\n# ---------------------------------------------------------------------------\nDOC_TARGETS := xmldocs latexdocs pdfdocs htmldocs epubdocs cleandocs \\\n\t       linkcheckdocs dochelp refcheckdocs texinfodocs infodocs\nPHONY += $(DOC_TARGETS)\n$(DOC_TARGETS): scripts_basic FORCE\n\t$(Q)$(MAKE) $(build)=doc $@\n\nPHONY += checkstack ubootrelease ubootversion\n\ncheckstack:\n\t$(OBJDUMP) -d u-boot $$(find . -name u-boot-spl) | \\\n\t$(PERL) $(src)/scripts/checkstack.pl $(ARCH)\n\nubootrelease:\n\t@$(filechk_uboot.release)\n\nubootversion:\n\t@echo $(UBOOTVERSION)\n\n# Single targets\n# ---------------------------------------------------------------------------\n# Single targets are compatible with:\n# - build with mixed source and output\n# - build with separate output dir 'make O=...'\n# - external modules\n#\n#  target-dir => where to store outputfile\n#  build-dir  => directory in kernel source tree to use\n\nifeq ($(KBUILD_EXTMOD),)\n        build-dir  = $(patsubst %/,%,$(dir $@))\n        target-dir = $(dir $@)\nelse\n        zap-slash=$(filter-out .,$(patsubst %/,%,$(dir $@)))\n        build-dir  = $(KBUILD_EXTMOD)$(if $(zap-slash),/$(zap-slash))\n        target-dir = $(if $(KBUILD_EXTMOD),$(dir $<),$(dir $@))\nendif\n\n%.s: %.c prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n%.i: %.c prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n%.o: %.c prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n%.lst: %.c prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n%.s: %.S prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n%.o: %.S prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n%.symtypes: %.c prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n\n# Modules\n/: prepare scripts FORCE\n\t$(cmd_crmodverdir)\n\t$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1) \\\n\t$(build)=$(build-dir)\n%/: prepare scripts FORCE\n\t$(cmd_crmodverdir)\n\t$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1) \\\n\t$(build)=$(build-dir)\n%.ko: prepare scripts FORCE\n\t$(cmd_crmodverdir)\n\t$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1)   \\\n\t$(build)=$(build-dir) $(@:.ko=.o)\n\t$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost\n\nquiet_cmd_genenv = GENENV  $@\ncmd_genenv = \\\n\t$(objtree)/tools/printinitialenv | \\\n\tsed -e '/^\\s*$$/d' | \\\n\tsort -t '=' -k 1,1 -s -o $@\n\nu-boot-initial-env: scripts_basic $(env_h) FORCE\n\t$(Q)$(MAKE) $(build)=tools $(objtree)/tools/printinitialenv\n\t$(call if_changed,genenv)\n\n# Consistency checks\n# ---------------------------------------------------------------------------\n\nPHONY += coccicheck\n\ncoccicheck:\n\t$(Q)$(CONFIG_SHELL) $(srctree)/scripts/$@\n\n# FIXME Should go into a make.lib or something\n# ===========================================================================\n\nquiet_cmd_rmdirs = $(if $(wildcard $(rm-dirs)),CLEAN   $(wildcard $(rm-dirs)))\n      cmd_rmdirs = rm -rf $(rm-dirs)\n\nquiet_cmd_rmfiles = $(if $(wildcard $(rm-files)),CLEAN   $(wildcard $(rm-files)))\n      cmd_rmfiles = rm -f $(rm-files)\n\n# read all saved command lines\n\ncmd_files := $(wildcard .*.cmd)\n\nifneq ($(cmd_files),)\n  $(cmd_files): ;\t# Do not try to update included dependency files\n  include $(cmd_files)\nendif\n\nendif    #ifeq ($(config-targets),1)\nendif    #ifeq ($(mixed-targets),1)\nendif\t# skip-makefile\n\nPHONY += FORCE\nFORCE:\n\n# Declare the contents of the PHONY variable as phony.  We keep that\n# information in a variable so we can use it in if_changed and friends.\n.PHONY: $(PHONY)\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 85.265625,
          "content": "# SPDX-License-Identifier: GPL-2.0+\n#\n# (C) Copyright 2000 - 2013\n# Wolfgang Denk, DENX Software Engineering, wd@denx.de.\n\nSummary:\n========\n\nThis directory contains the source code for U-Boot, a boot loader for\nEmbedded boards based on PowerPC, ARM, MIPS and several other\nprocessors, which can be installed in a boot ROM and used to\ninitialize and test the hardware or to download and run application\ncode.\n\nThe development of U-Boot is closely related to Linux: some parts of\nthe source code originate in the Linux source tree, we have some\nheader files in common, and special provision has been made to\nsupport booting of Linux images.\n\nSome attention has been paid to make this software easily\nconfigurable and extendable. For instance, all monitor commands are\nimplemented with the same call interface, so that it's very easy to\nadd new commands. Also, instead of permanently adding rarely used\ncode (for instance hardware test utilities) to the monitor, you can\nload and run it dynamically.\n\n\nStatus:\n=======\n\nIn general, all boards for which a default configuration file exists in the\nconfigs/ directory have been tested to some extent and can be considered\n\"working\". In fact, many of them are used in production systems.\n\nIn case of problems you can use\n\n     scripts/get_maintainer.pl <path>\n\nto identify the people or companies responsible for various boards and\nsubsystems. Or have a look at the git log.\n\n\nWhere to get help:\n==================\n\nIn case you have questions about, problems with or contributions for\nU-Boot, you should send a message to the U-Boot mailing list at\n<u-boot@lists.denx.de>. There is also an archive of previous traffic\non the mailing list - please search the archive before asking FAQ's.\nPlease see https://lists.denx.de/pipermail/u-boot and\nhttps://marc.info/?l=u-boot\n\nWhere to get source code:\n=========================\n\nThe U-Boot source code is maintained in the Git repository at\nhttps://source.denx.de/u-boot/u-boot.git ; you can browse it online at\nhttps://source.denx.de/u-boot/u-boot\n\nThe \"Tags\" links on this page allow you to download tarballs of\nany version you might be interested in. Official releases are also\navailable from the DENX file server through HTTPS or FTP.\nhttps://ftp.denx.de/pub/u-boot/\nftp://ftp.denx.de/pub/u-boot/\n\n\nWhere we come from:\n===================\n\n- start from 8xxrom sources\n- create PPCBoot project (https://sourceforge.net/projects/ppcboot)\n- clean up code\n- make it easier to add custom boards\n- make it possible to add other [PowerPC] CPUs\n- extend functions, especially:\n  * Provide extended interface to Linux boot loader\n  * S-Record download\n  * network boot\n  * ATA disk / SCSI ... boot\n- create ARMBoot project (https://sourceforge.net/projects/armboot)\n- add other CPU families (starting with ARM)\n- create U-Boot project (https://sourceforge.net/projects/u-boot)\n- current project page: see https://www.denx.de/wiki/U-Boot\n\n\nNames and Spelling:\n===================\n\nThe \"official\" name of this project is \"Das U-Boot\". The spelling\n\"U-Boot\" shall be used in all written text (documentation, comments\nin source files etc.). Example:\n\n\tThis is the README file for the U-Boot project.\n\nFile names etc. shall be based on the string \"u-boot\". Examples:\n\n\tinclude/asm-ppc/u-boot.h\n\n\t#include <asm/u-boot.h>\n\nVariable names, preprocessor constants etc. shall be either based on\nthe string \"u_boot\" or on \"U_BOOT\". Example:\n\n\tU_BOOT_VERSION\t\tu_boot_logo\n\tIH_OS_U_BOOT\t\tu_boot_hush_start\n\n\nSoftware Configuration:\n=======================\n\nSelection of Processor Architecture and Board Type:\n---------------------------------------------------\n\nFor all supported boards there are ready-to-use default\nconfigurations available; just type \"make <board_name>_defconfig\".\n\nExample: For a TQM823L module type:\n\n\tcd u-boot\n\tmake TQM823L_defconfig\n\nNote: If you're looking for the default configuration file for a board\nyou're sure used to be there but is now missing, check the file\ndoc/README.scrapyard for a list of no longer supported boards.\n\nSandbox Environment:\n--------------------\n\nU-Boot can be built natively to run on a Linux host using the 'sandbox'\nboard. This allows feature development which is not board- or architecture-\nspecific to be undertaken on a native platform. The sandbox is also used to\nrun some of U-Boot's tests.\n\nSee doc/arch/sandbox/sandbox.rst for more details.\n\nThe following options need to be configured:\n\n- CPU Type:\tDefine exactly one, e.g. CONFIG_MPC85XX.\n\n- Board Type:\tDefine exactly one, e.g. CONFIG_MPC8540ADS.\n\n- 85xx CPU Options:\n\t\tCONFIG_SYS_PPC64\n\n\t\tSpecifies that the core is a 64-bit PowerPC implementation (implements\n\t\tthe \"64\" category of the Power ISA). This is necessary for ePAPR\n\t\tcompliance, among other possible reasons.\n\n\t\tCONFIG_SYS_FSL_ERRATUM_A004510\n\n\t\tEnables a workaround for erratum A004510.  If set,\n\t\tthen CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV and\n\t\tCFG_SYS_FSL_CORENET_SNOOPVEC_COREONLY must be set.\n\n\t\tCONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV\n\t\tCONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV2 (optional)\n\n\t\tDefines one or two SoC revisions (low 8 bits of SVR)\n\t\tfor which the A004510 workaround should be applied.\n\n\t\tThe rest of SVR is either not relevant to the decision\n\t\tof whether the erratum is present (e.g. p2040 versus\n\t\tp2041) or is implied by the build target, which controls\n\t\twhether CONFIG_SYS_FSL_ERRATUM_A004510 is set.\n\n\t\tSee Freescale App Note 4493 for more information about\n\t\tthis erratum.\n\n\t\tCFG_SYS_FSL_CORENET_SNOOPVEC_COREONLY\n\n\t\tThis is the value to write into CCSR offset 0x18600\n\t\taccording to the A004510 workaround.\n\n\t\tCONFIG_SYS_FSL_SINGLE_SOURCE_CLK\n\t\tSingle Source Clock is clocking mode present in some of FSL SoC's.\n\t\tIn this mode, a single differential clock is used to supply\n\t\tclocks to the sysclock, ddrclock and usbclock.\n\n- Generic CPU options:\n\n\t\tCONFIG_SYS_FSL_DDR\n\t\tFreescale DDR driver in use. This type of DDR controller is\n\t\tfound in mpc83xx, mpc85xx as well as some ARM core SoCs.\n\n\t\tCFG_SYS_FSL_DDR_ADDR\n\t\tFreescale DDR memory-mapped register base.\n\n\t\tCONFIG_SYS_FSL_IFC_CLK_DIV\n\t\tDefines divider of platform clock(clock input to IFC controller).\n\n\t\tCONFIG_SYS_FSL_LBC_CLK_DIV\n\t\tDefines divider of platform clock(clock input to eLBC controller).\n\n\t\tCFG_SYS_FSL_DDR_SDRAM_BASE_PHY\n\t\tPhysical address from the view of DDR controllers. It is the\n\t\tsame as CFG_SYS_DDR_SDRAM_BASE for  all Power SoCs. But\n\t\tit could be different for ARM SoCs.\n\n- ARM options:\n\t\tCFG_SYS_EXCEPTION_VECTORS_HIGH\n\n\t\tSelect high exception vectors of the ARM core, e.g., do not\n\t\tclear the V bit of the c1 register of CP15.\n\n\t\tCOUNTER_FREQUENCY\n\t\tGeneric timer clock source frequency.\n\n\t\tCOUNTER_FREQUENCY_REAL\n\t\tGeneric timer clock source frequency if the real clock is\n\t\tdifferent from COUNTER_FREQUENCY, and can only be determined\n\t\tat run time.\n\n- Linux Kernel Interface:\n\t\tCONFIG_OF_LIBFDT\n\n\t\tNew kernel versions are expecting firmware settings to be\n\t\tpassed using flattened device trees (based on open firmware\n\t\tconcepts).\n\n\t\tCONFIG_OF_LIBFDT\n\t\t * New libfdt-based support\n\t\t * Adds the \"fdt\" command\n\t\t * The bootm command automatically updates the fdt\n\n\t\tOF_TBCLK - The timebase frequency.\n\n\t\tboards with QUICC Engines require OF_QE to set UCC MAC\n\t\taddresses\n\n\t\tCONFIG_OF_IDE_FIXUP\n\n\t\tU-Boot can detect if an IDE device is present or not.\n\t\tIf not, and this new config option is activated, U-Boot\n\t\tremoves the ATA node from the DTS before booting Linux,\n\t\tso the Linux IDE driver does not probe the device and\n\t\tcrash. This is needed for buggy hardware (uc101) where\n\t\tno pull down resistor is connected to the signal IDE5V_DD7.\n\n- vxWorks boot parameters:\n\n\t\tbootvx constructs a valid bootline using the following\n\t\tenvironments variables: bootdev, bootfile, ipaddr, netmask,\n\t\tserverip, gatewayip, hostname, othbootargs.\n\t\tIt loads the vxWorks image pointed bootfile.\n\n\t\tNote: If a \"bootargs\" environment is defined, it will override\n\t\tthe defaults discussed just above.\n\n- Cache Configuration for ARM:\n\t\tCFG_SYS_PL310_BASE - Physical base address of PL310\n\t\t\t\t\tcontroller register space\n\n- Serial Ports:\n\t\tCFG_PL011_CLOCK\n\n\t\tIf you have Amba PrimeCell PL011 UARTs, set this variable to\n\t\tthe clock speed of the UARTs.\n\n\t\tCFG_PL01x_PORTS\n\n\t\tIf you have Amba PrimeCell PL010 or PL011 UARTs on your board,\n\t\tdefine this to a list of base addresses for each (supported)\n\t\tport. See e.g. include/configs/versatile.h\n\n\t\tCONFIG_SERIAL_HW_FLOW_CONTROL\n\n\t\tDefine this variable to enable hw flow control in serial driver.\n\t\tCurrent user of this option is drivers/serial/nsl16550.c driver\n\n- Removal of commands\n\t\tIf no commands are needed to boot, you can disable\n\t\tCONFIG_CMDLINE to remove them. In this case, the command line\n\t\twill not be available, and when U-Boot wants to execute the\n\t\tboot command (on start-up) it will call board_run_command()\n\t\tinstead. This can reduce image size significantly for very\n\t\tsimple boot procedures.\n\n- Regular expression support:\n\t\tCONFIG_REGEX\n\t\tIf this variable is defined, U-Boot is linked against\n\t\tthe SLRE (Super Light Regular Expression) library,\n\t\twhich adds regex support to some commands, as for\n\t\texample \"env grep\" and \"setexpr\".\n\n- Watchdog:\n\t\tCFG_SYS_WATCHDOG_FREQ\n\t\tSome platforms automatically call WATCHDOG_RESET()\n\t\tfrom the timer interrupt handler every\n\t\tCFG_SYS_WATCHDOG_FREQ interrupts. If not set by the\n\t\tboard configuration file, a default of CONFIG_SYS_HZ/2\n\t\t(i.e. 500) is used. Setting CFG_SYS_WATCHDOG_FREQ\n\t\tto 0 disables calling WATCHDOG_RESET() from the timer\n\t\tinterrupt.\n\n- GPIO Support:\n\t\tThe CFG_SYS_I2C_PCA953X_WIDTH option specifies a list of\n\t\tchip-ngpio pairs that tell the PCA953X driver the number of\n\t\tpins supported by a particular chip.\n\n\t\tNote that if the GPIO device uses I2C, then the I2C interface\n\t\tmust also be configured. See I2C Support, below.\n\n- I/O tracing:\n\t\tWhen CONFIG_IO_TRACE is selected, U-Boot intercepts all I/O\n\t\taccesses and can checksum them or write a list of them out\n\t\tto memory. See the 'iotrace' command for details. This is\n\t\tuseful for testing device drivers since it can confirm that\n\t\tthe driver behaves the same way before and after a code\n\t\tchange. Currently this is supported on sandbox and arm. To\n\t\tadd support for your architecture, add '#include <iotrace.h>'\n\t\tto the bottom of arch/<arch>/include/asm/io.h and test.\n\n\t\tExample output from the 'iotrace stats' command is below.\n\t\tNote that if the trace buffer is exhausted, the checksum will\n\t\tstill continue to operate.\n\n\t\t\tiotrace is enabled\n\t\t\tStart:  10000000\t(buffer start address)\n\t\t\tSize:   00010000\t(buffer size)\n\t\t\tOffset: 00000120\t(current buffer offset)\n\t\t\tOutput: 10000120\t(start + offset)\n\t\t\tCount:  00000018\t(number of trace records)\n\t\t\tCRC32:  9526fb66\t(CRC32 of all trace records)\n\n- Timestamp Support:\n\n\t\tWhen CONFIG_TIMESTAMP is selected, the timestamp\n\t\t(date and time) of an image is printed by image\n\t\tcommands like bootm or iminfo. This option is\n\t\tautomatically enabled when you select CONFIG_CMD_DATE .\n\n- Partition Labels (disklabels) Supported:\n\t\tZero or more of the following:\n\t\tCONFIG_MAC_PARTITION   Apple's MacOS partition table.\n\t\tCONFIG_ISO_PARTITION   ISO partition table, used on CDROM etc.\n\t\tCONFIG_EFI_PARTITION   GPT partition table, common when EFI is the\n\t\t\t\t       bootloader.  Note 2TB partition limit; see\n\t\t\t\t       disk/part_efi.c\n\t\tCONFIG_SCSI) you must configure support for at\n\t\tleast one non-MTD partition type as well.\n\n- NETWORK Support (PCI):\n\t\tCONFIG_E1000_SPI\n\t\tUtility code for direct access to the SPI bus on Intel 8257x.\n\t\tThis does not do anything useful unless you set at least one\n\t\tof CONFIG_CMD_E1000 or CONFIG_E1000_SPI_GENERIC.\n\n\t\tCONFIG_NATSEMI\n\t\tSupport for National dp83815 chips.\n\n\t\tCONFIG_NS8382X\n\t\tSupport for National dp8382[01] gigabit chips.\n\n- NETWORK Support (other):\n\t\tCONFIG_CALXEDA_XGMAC\n\t\tSupport for the Calxeda XGMAC device\n\n\t\tCONFIG_LAN91C96\n\t\tSupport for SMSC's LAN91C96 chips.\n\n\t\t\tCONFIG_LAN91C96_USE_32_BIT\n\t\t\tDefine this to enable 32 bit addressing\n\n\t\t\tCFG_SYS_DAVINCI_EMAC_PHY_COUNT\n\t\t\tDefine this if you have more then 3 PHYs.\n\n\t\tCONFIG_FTGMAC100\n\t\tSupport for Faraday's FTGMAC100 Gigabit SoC Ethernet\n\n\t\t\tCONFIG_FTGMAC100_EGIGA\n\t\t\tDefine this to use GE link update with gigabit PHY.\n\t\t\tDefine this if FTGMAC100 is connected to gigabit PHY.\n\t\t\tIf your system has 10/100 PHY only, it might not occur\n\t\t\twrong behavior. Because PHY usually return timeout or\n\t\t\tuseless data when polling gigabit status and gigabit\n\t\t\tcontrol registers. This behavior won't affect the\n\t\t\tcorrectnessof 10/100 link speed update.\n\n\t\tCONFIG_SH_ETHER\n\t\tSupport for Renesas on-chip Ethernet controller\n\n\t\t\tCFG_SH_ETHER_USE_PORT\n\t\t\tDefine the number of ports to be used\n\n\t\t\tCFG_SH_ETHER_PHY_ADDR\n\t\t\tDefine the ETH PHY's address\n\n\t\t\tCFG_SH_ETHER_CACHE_WRITEBACK\n\t\t\tIf this option is set, the driver enables cache flush.\n\n- TPM Support:\n\t\tCONFIG_TPM\n\t\tSupport TPM devices.\n\n\t\tCONFIG_TPM_TIS_INFINEON\n\t\tSupport for Infineon i2c bus TPM devices. Only one device\n\t\tper system is supported at this time.\n\n\t\t\tCONFIG_TPM_TIS_I2C_BURST_LIMITATION\n\t\t\tDefine the burst count bytes upper limit\n\n\t\tCONFIG_TPM_ST33ZP24\n\t\tSupport for STMicroelectronics TPM devices. Requires DM_TPM support.\n\n\t\t\tCONFIG_TPM_ST33ZP24_I2C\n\t\t\tSupport for STMicroelectronics ST33ZP24 I2C devices.\n\t\t\tRequires TPM_ST33ZP24 and I2C.\n\n\t\t\tCONFIG_TPM_ST33ZP24_SPI\n\t\t\tSupport for STMicroelectronics ST33ZP24 SPI devices.\n\t\t\tRequires TPM_ST33ZP24 and SPI.\n\n\t\tCONFIG_TPM_ATMEL_TWI\n\t\tSupport for Atmel TWI TPM device. Requires I2C support.\n\n\t\tCONFIG_TPM_TIS_LPC\n\t\tSupport for generic parallel port TPM devices. Only one device\n\t\tper system is supported at this time.\n\n\t\tCONFIG_TPM\n\t\tDefine this to enable the TPM support library which provides\n\t\tfunctional interfaces to some TPM commands.\n\t\tRequires support for a TPM device.\n\n\t\tCONFIG_TPM_AUTH_SESSIONS\n\t\tDefine this to enable authorized functions in the TPM library.\n\t\tRequires CONFIG_TPM and CONFIG_SHA1.\n\n- USB Support:\n\t\tAt the moment only the UHCI host controller is\n\t\tsupported (PIP405, MIP405); define\n\t\tCONFIG_USB_UHCI to enable it.\n\t\tdefine CONFIG_USB_KEYBOARD to enable the USB Keyboard\n\t\tand define CONFIG_USB_STORAGE to enable the USB\n\t\tstorage devices.\n\t\tNote:\n\t\tSupported are USB Keyboards and USB Floppy drives\n\t\t(TEAC FD-05PUB).\n\n\t\tCONFIG_USB_DWC2_REG_ADDR the physical CPU address of the DWC2\n\t\tHW module registers.\n\n- USB Device:\n\t\tDefine the below if you wish to use the USB console.\n\t\tOnce firmware is rebuilt from a serial console issue the\n\t\tcommand \"setenv stdin usbtty; setenv stdout usbtty\" and\n\t\tattach your USB cable. The Unix command \"dmesg\" should print\n\t\tit has found a new device. The environment variable usbtty\n\t\tcan be set to gserial or cdc_acm to enable your device to\n\t\tappear to a USB host as a Linux gserial device or a\n\t\tCommon Device Class Abstract Control Model serial device.\n\t\tIf you select usbtty = gserial you should be able to enumerate\n\t\ta Linux host by\n\t\t# modprobe usbserial vendor=0xVendorID product=0xProductID\n\t\telse if using cdc_acm, simply setting the environment\n\t\tvariable usbtty to be cdc_acm should suffice. The following\n\t\tmight be defined in YourBoardName.h\n\n\t\tIf you have a USB-IF assigned VendorID then you may wish to\n\t\tdefine your own vendor specific values either in BoardName.h\n\t\tor directly in usbd_vendor_info.h. If you don't define\n\t\tCONFIG_USBD_MANUFACTURER, CONFIG_USBD_PRODUCT_NAME,\n\t\tCONFIG_USBD_VENDORID and CONFIG_USBD_PRODUCTID, then U-Boot\n\t\tshould pretend to be a Linux device to it's target host.\n\n\t\t\tCONFIG_USBD_MANUFACTURER\n\t\t\tDefine this string as the name of your company for\n\t\t\t- CONFIG_USBD_MANUFACTURER \"my company\"\n\n\t\t\tCONFIG_USBD_PRODUCT_NAME\n\t\t\tDefine this string as the name of your product\n\t\t\t- CONFIG_USBD_PRODUCT_NAME \"acme usb device\"\n\n\t\t\tCONFIG_USBD_VENDORID\n\t\t\tDefine this as your assigned Vendor ID from the USB\n\t\t\tImplementors Forum. This *must* be a genuine Vendor ID\n\t\t\tto avoid polluting the USB namespace.\n\t\t\t- CONFIG_USBD_VENDORID 0xFFFF\n\n\t\t\tCONFIG_USBD_PRODUCTID\n\t\t\tDefine this as the unique Product ID\n\t\t\tfor your device\n\t\t\t- CONFIG_USBD_PRODUCTID 0xFFFF\n\n- ULPI Layer Support:\n\t\tThe ULPI (UTMI Low Pin (count) Interface) PHYs are supported via\n\t\tthe generic ULPI layer. The generic layer accesses the ULPI PHY\n\t\tvia the platform viewport, so you need both the genric layer and\n\t\tthe viewport enabled. Currently only Chipidea/ARC based\n\t\tviewport is supported.\n\t\tTo enable the ULPI layer support, define CONFIG_USB_ULPI and\n\t\tCONFIG_USB_ULPI_VIEWPORT in your board configuration file.\n\t\tIf your ULPI phy needs a different reference clock than the\n\t\tstandard 24 MHz then you have to define CFG_ULPI_REF_CLK to\n\t\tthe appropriate value in Hz.\n\n- MMC Support:\n\t\tCONFIG_SH_MMCIF\n\t\tSupport for Renesas on-chip MMCIF controller\n\n\t\t\tCONFIG_SH_MMCIF_ADDR\n\t\t\tDefine the base address of MMCIF registers\n\n\t\t\tCONFIG_SH_MMCIF_CLK\n\t\t\tDefine the clock frequency for MMCIF\n\n- USB Device Firmware Update (DFU) class support:\n\t\tCONFIG_DFU_OVER_USB\n\t\tThis enables the USB portion of the DFU USB class\n\n\t\tCONFIG_DFU_NAND\n\t\tThis enables support for exposing NAND devices via DFU.\n\n\t\tCONFIG_DFU_RAM\n\t\tThis enables support for exposing RAM via DFU.\n\t\tNote: DFU spec refer to non-volatile memory usage, but\n\t\tallow usages beyond the scope of spec - here RAM usage,\n\t\tone that would help mostly the developer.\n\n\t\tCONFIG_SYS_DFU_DATA_BUF_SIZE\n\t\tDfu transfer uses a buffer before writing data to the\n\t\traw storage device. Make the size (in bytes) of this buffer\n\t\tconfigurable. The size of this buffer is also configurable\n\t\tthrough the \"dfu_bufsiz\" environment variable.\n\n\t\tCONFIG_SYS_DFU_MAX_FILE_SIZE\n\t\tWhen updating files rather than the raw storage device,\n\t\twe use a static buffer to copy the file into and then write\n\t\tthe buffer once we've been given the whole file.  Define\n\t\tthis to the maximum filesize (in bytes) for the buffer.\n\t\tDefault is 4 MiB if undefined.\n\n\t\tDFU_DEFAULT_POLL_TIMEOUT\n\t\tPoll timeout [ms], is the timeout a device can send to the\n\t\thost. The host must wait for this timeout before sending\n\t\ta subsequent DFU_GET_STATUS request to the device.\n\n\t\tDFU_MANIFEST_POLL_TIMEOUT\n\t\tPoll timeout [ms], which the device sends to the host when\n\t\tentering dfuMANIFEST state. Host waits this timeout, before\n\t\tsending again an USB request to the device.\n\n- Keyboard Support:\n\t\tSee Kconfig help for available keyboard drivers.\n\n- MII/PHY support:\n\t\tCONFIG_PHY_CLOCK_FREQ (ppc4xx)\n\n\t\tThe clock frequency of the MII bus\n\n\t\tCONFIG_PHY_CMD_DELAY (ppc4xx)\n\n\t\tSome PHY like Intel LXT971A need extra delay after\n\t\tcommand issued before MII status register can be read\n\n- BOOTP Recovery Mode:\n\t\tCONFIG_BOOTP_RANDOM_DELAY\n\n\t\tIf you have many targets in a network that try to\n\t\tboot using BOOTP, you may want to avoid that all\n\t\tsystems send out BOOTP requests at precisely the same\n\t\tmoment (which would happen for instance at recovery\n\t\tfrom a power failure, when all systems will try to\n\t\tboot, thus flooding the BOOTP server. Defining\n\t\tCONFIG_BOOTP_RANDOM_DELAY causes a random delay to be\n\t\tinserted before sending out BOOTP requests. The\n\t\tfollowing delays are inserted then:\n\n\t\t1st BOOTP request:\tdelay 0 ... 1 sec\n\t\t2nd BOOTP request:\tdelay 0 ... 2 sec\n\t\t3rd BOOTP request:\tdelay 0 ... 4 sec\n\t\t4th and following\n\t\tBOOTP requests:\t\tdelay 0 ... 8 sec\n\n\t\tCFG_BOOTP_ID_CACHE_SIZE\n\n\t\tBOOTP packets are uniquely identified using a 32-bit ID. The\n\t\tserver will copy the ID from client requests to responses and\n\t\tU-Boot will use this to determine if it is the destination of\n\t\tan incoming response. Some servers will check that addresses\n\t\taren't in use before handing them out (usually using an ARP\n\t\tping) and therefore take up to a few hundred milliseconds to\n\t\trespond. Network congestion may also influence the time it\n\t\ttakes for a response to make it back to the client. If that\n\t\ttime is too long, U-Boot will retransmit requests. In order\n\t\tto allow earlier responses to still be accepted after these\n\t\tretransmissions, U-Boot's BOOTP client keeps a small cache of\n\t\tIDs. The CFG_BOOTP_ID_CACHE_SIZE controls the size of this\n\t\tcache. The default is to keep IDs for up to four outstanding\n\t\trequests. Increasing this will allow U-Boot to accept offers\n\t\tfrom a BOOTP client in networks with unusually high latency.\n\n- DHCP Advanced Options:\n\n - Link-local IP address negotiation:\n\t\tNegotiate with other link-local clients on the local network\n\t\tfor an address that doesn't require explicit configuration.\n\t\tThis is especially useful if a DHCP server cannot be guaranteed\n\t\tto exist in all environments that the device must operate.\n\n\t\tSee doc/README.link-local for more information.\n\n - MAC address from environment variables\n\n\t\tFDT_SEQ_MACADDR_FROM_ENV\n\n\t\tFix-up device tree with MAC addresses fetched sequentially from\n\t\tenvironment variables. This config work on assumption that\n\t\tnon-usable ethernet node of device-tree are either not present\n\t\tor their status has been marked as \"disabled\".\n\n - CDP Options:\n\t\tCONFIG_CDP_DEVICE_ID\n\n\t\tThe device id used in CDP trigger frames.\n\n\t\tCONFIG_CDP_DEVICE_ID_PREFIX\n\n\t\tA two character string which is prefixed to the MAC address\n\t\tof the device.\n\n\t\tCONFIG_CDP_PORT_ID\n\n\t\tA printf format string which contains the ascii name of\n\t\tthe port. Normally is set to \"eth%d\" which sets\n\t\teth0 for the first Ethernet, eth1 for the second etc.\n\n\t\tCONFIG_CDP_CAPABILITIES\n\n\t\tA 32bit integer which indicates the device capabilities;\n\t\t0x00000010 for a normal host which does not forwards.\n\n\t\tCONFIG_CDP_VERSION\n\n\t\tAn ascii string containing the version of the software.\n\n\t\tCONFIG_CDP_PLATFORM\n\n\t\tAn ascii string containing the name of the platform.\n\n\t\tCONFIG_CDP_TRIGGER\n\n\t\tA 32bit integer sent on the trigger.\n\n\t\tCONFIG_CDP_POWER_CONSUMPTION\n\n\t\tA 16bit integer containing the power consumption of the\n\t\tdevice in .1 of milliwatts.\n\n\t\tCONFIG_CDP_APPLIANCE_VLAN_TYPE\n\n\t\tA byte containing the id of the VLAN.\n\n- Status LED:\tCONFIG_LED_STATUS\n\n\t\tSeveral configurations allow to display the current\n\t\tstatus using a LED. For instance, the LED will blink\n\t\tfast while running U-Boot code, stop blinking as\n\t\tsoon as a reply to a BOOTP request was received, and\n\t\tstart blinking slow once the Linux kernel is running\n\t\t(supported by a status LED driver in the Linux\n\t\tkernel). Defining CONFIG_LED_STATUS enables this\n\t\tfeature in U-Boot.\n\n\t\tAdditional options:\n\n\t\tCONFIG_LED_STATUS_GPIO\n\t\tThe status LED can be connected to a GPIO pin.\n\t\tIn such cases, the gpio_led driver can be used as a\n\t\tstatus LED backend implementation. Define CONFIG_LED_STATUS_GPIO\n\t\tto include the gpio_led driver in the U-Boot binary.\n\n\t\tCFG_GPIO_LED_INVERTED_TABLE\n\t\tSome GPIO connected LEDs may have inverted polarity in which\n\t\tcase the GPIO high value corresponds to LED off state and\n\t\tGPIO low value corresponds to LED on state.\n\t\tIn such cases CFG_GPIO_LED_INVERTED_TABLE may be defined\n\t\twith a list of GPIO LEDs that have inverted polarity.\n\n- I2C Support:\n\t\tCFG_SYS_NUM_I2C_BUSES\n\t\tHold the number of i2c buses you want to use.\n\n\t\tCFG_SYS_I2C_BUSES\n\t\thold a list of buses you want to use\n\n\t\t CFG_SYS_I2C_BUSES\t{{0, {I2C_NULL_HOP}}, \\\n\t\t\t\t\t{0, {{I2C_MUX_PCA9547, 0x70, 1}}}, \\\n\t\t\t\t\t{0, {{I2C_MUX_PCA9547, 0x70, 2}}}, \\\n\t\t\t\t\t{0, {{I2C_MUX_PCA9547, 0x70, 3}}}, \\\n\t\t\t\t\t{0, {{I2C_MUX_PCA9547, 0x70, 4}}}, \\\n\t\t\t\t\t{0, {{I2C_MUX_PCA9547, 0x70, 5}}}, \\\n\t\t\t\t\t{1, {I2C_NULL_HOP}}, \\\n\t\t\t\t\t{1, {{I2C_MUX_PCA9544, 0x72, 1}}}, \\\n\t\t\t\t\t{1, {{I2C_MUX_PCA9544, 0x72, 2}}}, \\\n\t\t\t\t\t}\n\n\t\twhich defines\n\t\t\tbus 0 on adapter 0 without a mux\n\t\t\tbus 1 on adapter 0 with a PCA9547 on address 0x70 port 1\n\t\t\tbus 2 on adapter 0 with a PCA9547 on address 0x70 port 2\n\t\t\tbus 3 on adapter 0 with a PCA9547 on address 0x70 port 3\n\t\t\tbus 4 on adapter 0 with a PCA9547 on address 0x70 port 4\n\t\t\tbus 5 on adapter 0 with a PCA9547 on address 0x70 port 5\n\t\t\tbus 6 on adapter 1 without a mux\n\t\t\tbus 7 on adapter 1 with a PCA9544 on address 0x72 port 1\n\t\t\tbus 8 on adapter 1 with a PCA9544 on address 0x72 port 2\n\n\t\tIf you do not have i2c muxes on your board, omit this define.\n\n- Legacy I2C Support:\n\t\tIf you use the software i2c interface (CONFIG_SYS_I2C_SOFT)\n\t\tthen the following macros need to be defined (examples are\n\t\tfrom include/configs/lwmon.h):\n\n\t\tI2C_INIT\n\n\t\t(Optional). Any commands necessary to enable the I2C\n\t\tcontroller or configure ports.\n\n\t\teg: #define I2C_INIT (immr->im_cpm.cp_pbdir |=\tPB_SCL)\n\n\t\tI2C_ACTIVE\n\n\t\tThe code necessary to make the I2C data line active\n\t\t(driven).  If the data line is open collector, this\n\t\tdefine can be null.\n\n\t\teg: #define I2C_ACTIVE (immr->im_cpm.cp_pbdir |=  PB_SDA)\n\n\t\tI2C_TRISTATE\n\n\t\tThe code necessary to make the I2C data line tri-stated\n\t\t(inactive).  If the data line is open collector, this\n\t\tdefine can be null.\n\n\t\teg: #define I2C_TRISTATE (immr->im_cpm.cp_pbdir &= ~PB_SDA)\n\n\t\tI2C_READ\n\n\t\tCode that returns true if the I2C data line is high,\n\t\tfalse if it is low.\n\n\t\teg: #define I2C_READ ((immr->im_cpm.cp_pbdat & PB_SDA) != 0)\n\n\t\tI2C_SDA(bit)\n\n\t\tIf <bit> is true, sets the I2C data line high. If it\n\t\tis false, it clears it (low).\n\n\t\teg: #define I2C_SDA(bit) \\\n\t\t\tif(bit) immr->im_cpm.cp_pbdat |=  PB_SDA; \\\n\t\t\telse\timmr->im_cpm.cp_pbdat &= ~PB_SDA\n\n\t\tI2C_SCL(bit)\n\n\t\tIf <bit> is true, sets the I2C clock line high. If it\n\t\tis false, it clears it (low).\n\n\t\teg: #define I2C_SCL(bit) \\\n\t\t\tif(bit) immr->im_cpm.cp_pbdat |=  PB_SCL; \\\n\t\t\telse\timmr->im_cpm.cp_pbdat &= ~PB_SCL\n\n\t\tI2C_DELAY\n\n\t\tThis delay is invoked four times per clock cycle so this\n\t\tcontrols the rate of data transfer.  The data rate thus\n\t\tis 1 / (I2C_DELAY * 4). Often defined to be something\n\t\tlike:\n\n\t\t#define I2C_DELAY  udelay(2)\n\n\t\tCONFIG_SOFT_I2C_GPIO_SCL / CONFIG_SOFT_I2C_GPIO_SDA\n\n\t\tIf your arch supports the generic GPIO framework (asm/gpio.h),\n\t\tthen you may alternatively define the two GPIOs that are to be\n\t\tused as SCL / SDA.  Any of the previous I2C_xxx macros will\n\t\thave GPIO-based defaults assigned to them as appropriate.\n\n\t\tYou should define these to the GPIO value as given directly to\n\t\tthe generic GPIO functions.\n\n\t\tCFG_SYS_I2C_NOPROBES\n\n\t\tThis option specifies a list of I2C devices that will be skipped\n\t\twhen the 'i2c probe' command is issued.\n\n\t\te.g.\n\t\t\t#define CFG_SYS_I2C_NOPROBES {0x50,0x68}\n\n\t\twill skip addresses 0x50 and 0x68 on a board with one I2C bus\n\n\t\tCONFIG_SOFT_I2C_READ_REPEATED_START\n\n\t\tdefining this will force the i2c_read() function in\n\t\tthe soft_i2c driver to perform an I2C repeated start\n\t\tbetween writing the address pointer and reading the\n\t\tdata.  If this define is omitted the default behaviour\n\t\tof doing a stop-start sequence will be used.  Most I2C\n\t\tdevices can use either method, but some require one or\n\t\tthe other.\n\n- SPI Support:\tCONFIG_SPI\n\n\t\tEnables SPI driver (so far only tested with\n\t\tSPI EEPROM, also an instance works with Crystal A/D and\n\t\tD/As on the SACSng board)\n\n\t\tCFG_SYS_SPI_MXC_WAIT\n\t\tTimeout for waiting until spi transfer completed.\n\t\tdefault: (CONFIG_SYS_HZ/100)     /* 10 ms */\n\n- FPGA Support: CONFIG_FPGA\n\n\t\tEnables FPGA subsystem.\n\n\t\tCONFIG_FPGA_<vendor>\n\n\t\tEnables support for specific chip vendors.\n\t\t(ALTERA, XILINX)\n\n\t\tCONFIG_FPGA_<family>\n\n\t\tEnables support for FPGA family.\n\t\t(SPARTAN2, SPARTAN3, VIRTEX2, CYCLONE2, ACEX1K, ACEX)\n\n\t\tCONFIG_SYS_FPGA_CHECK_BUSY\n\n\t\tEnable checks on FPGA configuration interface busy\n\t\tstatus by the configuration function. This option\n\t\twill require a board or device specific function to\n\t\tbe written.\n\n\t\tCFG_FPGA_DELAY\n\n\t\tIf defined, a function that provides delays in the FPGA\n\t\tconfiguration driver.\n\n\t\tCFG_SYS_FPGA_CHECK_ERROR\n\n\t\tCheck for configuration errors during FPGA bitfile\n\t\tloading. For example, abort during Virtex II\n\t\tconfiguration if the INIT_B line goes low (which\n\t\tindicated a CRC error).\n\n\t\tCFG_SYS_FPGA_WAIT_INIT\n\n\t\tMaximum time to wait for the INIT_B line to de-assert\n\t\tafter PROB_B has been de-asserted during a Virtex II\n\t\tFPGA configuration sequence. The default time is 500\n\t\tms.\n\n\t\tCFG_SYS_FPGA_WAIT_BUSY\n\n\t\tMaximum time to wait for BUSY to de-assert during\n\t\tVirtex II FPGA configuration. The default is 5 ms.\n\n\t\tCFG_SYS_FPGA_WAIT_CONFIG\n\n\t\tTime to wait after FPGA configuration. The default is\n\t\t200 ms.\n\n- Vendor Parameter Protection:\n\n\t\tU-Boot considers the values of the environment\n\t\tvariables \"serial#\" (Board Serial Number) and\n\t\t\"ethaddr\" (Ethernet Address) to be parameters that\n\t\tare set once by the board vendor / manufacturer, and\n\t\tprotects these variables from casual modification by\n\t\tthe user. Once set, these variables are read-only,\n\t\tand write or delete attempts are rejected. You can\n\t\tchange this behaviour:\n\n\t\tIf CONFIG_ENV_OVERWRITE is #defined in your config\n\t\tfile, the write protection for vendor parameters is\n\t\tcompletely disabled. Anybody can change or delete\n\t\tthese parameters.\n\n\t\tThe same can be accomplished in a more flexible way\n\t\tfor any variable by configuring the type of access\n\t\tto allow for those variables in the \".flags\" variable\n\t\tor define CFG_ENV_FLAGS_LIST_STATIC.\n\n- Protected RAM:\n\t\tCFG_PRAM\n\n\t\tDefine this variable to enable the reservation of\n\t\t\"protected RAM\", i. e. RAM which is not overwritten\n\t\tby U-Boot. Define CFG_PRAM to hold the number of\n\t\tkB you want to reserve for pRAM. You can overwrite\n\t\tthis default value by defining an environment\n\t\tvariable \"pram\" to the number of kB you want to\n\t\treserve. Note that the board info structure will\n\t\tstill show the full amount of RAM. If pRAM is\n\t\treserved, a new environment variable \"mem\" will\n\t\tautomatically be defined to hold the amount of\n\t\tremaining RAM in a form that can be passed as boot\n\t\targument to Linux, for instance like that:\n\n\t\t\tsetenv bootargs ... mem=\\${mem}\n\t\t\tsaveenv\n\n\t\tThis way you can tell Linux not to use this memory,\n\t\teither, which results in a memory region that will\n\t\tnot be affected by reboots.\n\n\t\t*WARNING* If your board configuration uses automatic\n\t\tdetection of the RAM size, you must make sure that\n\t\tthis memory test is non-destructive. So far, the\n\t\tfollowing board configurations are known to be\n\t\t\"pRAM-clean\":\n\n\t\t\tIVMS8, IVML24, SPD8xx,\n\t\t\tHERMES, IP860, RPXlite, LWMON,\n\t\t\tFLAGADM\n\n- Error Recovery:\n\tNote:\n\n\t\tIn the current implementation, the local variables\n\t\tspace and global environment variables space are\n\t\tseparated. Local variables are those you define by\n\t\tsimply typing `name=value'. To access a local\n\t\tvariable later on, you have write `$name' or\n\t\t`${name}'; to execute the contents of a variable\n\t\tdirectly type `$name' at the command prompt.\n\n\t\tGlobal environment variables are those you use\n\t\tsetenv/printenv to work with. To run a command stored\n\t\tin such a variable, you need to use the run command,\n\t\tand you must not use the '$' sign to access them.\n\n\t\tTo store commands and special characters in a\n\t\tvariable, please use double quotation marks\n\t\tsurrounding the whole text of the variable, instead\n\t\tof the backslashes before semicolons and special\n\t\tsymbols.\n\n- Default Environment:\n\t\tCFG_EXTRA_ENV_SETTINGS\n\n\t\tDefine this to contain any number of null terminated\n\t\tstrings (variable = value pairs) that will be part of\n\t\tthe default environment compiled into the boot image.\n\n\t\tFor example, place something like this in your\n\t\tboard's config file:\n\n\t\t#define CFG_EXTRA_ENV_SETTINGS \\\n\t\t\t\"myvar1=value1\\0\" \\\n\t\t\t\"myvar2=value2\\0\"\n\n\t\tWarning: This method is based on knowledge about the\n\t\tinternal format how the environment is stored by the\n\t\tU-Boot code. This is NOT an official, exported\n\t\tinterface! Although it is unlikely that this format\n\t\twill change soon, there is no guarantee either.\n\t\tYou better know what you are doing here.\n\n\t\tNote: overly (ab)use of the default environment is\n\t\tdiscouraged. Make sure to check other ways to preset\n\t\tthe environment like the \"source\" command or the\n\t\tboot command first.\n\n\t\tCONFIG_DELAY_ENVIRONMENT\n\n\t\tNormally the environment is loaded when the board is\n\t\tinitialised so that it is available to U-Boot. This inhibits\n\t\tthat so that the environment is not available until\n\t\texplicitly loaded later by U-Boot code. With CONFIG_OF_CONTROL\n\t\tthis is instead controlled by the value of\n\t\t/config/load-environment.\n\n- Automatic software updates via TFTP server\n\t\tCONFIG_UPDATE_TFTP\n\t\tCONFIG_UPDATE_TFTP_CNT_MAX\n\t\tCONFIG_UPDATE_TFTP_MSEC_MAX\n\n\t\tThese options enable and control the auto-update feature;\n\t\tfor a more detailed description refer to doc/README.update.\n\n- MTD Support (mtdparts command, UBI support)\n\t\tCONFIG_MTD_UBI_WL_THRESHOLD\n\t\tThis parameter defines the maximum difference between the highest\n\t\terase counter value and the lowest erase counter value of eraseblocks\n\t\tof UBI devices. When this threshold is exceeded, UBI starts performing\n\t\twear leveling by means of moving data from eraseblock with low erase\n\t\tcounter to eraseblocks with high erase counter.\n\n\t\tThe default value should be OK for SLC NAND flashes, NOR flashes and\n\t\tother flashes which have eraseblock life-cycle 100000 or more.\n\t\tHowever, in case of MLC NAND flashes which typically have eraseblock\n\t\tlife-cycle less than 10000, the threshold should be lessened (e.g.,\n\t\tto 128 or 256, although it does not have to be power of 2).\n\n\t\tdefault: 4096\n\n\t\tCONFIG_MTD_UBI_BEB_LIMIT\n\t\tThis option specifies the maximum bad physical eraseblocks UBI\n\t\texpects on the MTD device (per 1024 eraseblocks). If the\n\t\tunderlying flash does not admit of bad eraseblocks (e.g. NOR\n\t\tflash), this value is ignored.\n\n\t\tNAND datasheets often specify the minimum and maximum NVM\n\t\t(Number of Valid Blocks) for the flashes' endurance lifetime.\n\t\tThe maximum expected bad eraseblocks per 1024 eraseblocks\n\t\tthen can be calculated as \"1024 * (1 - MinNVB / MaxNVB)\",\n\t\twhich gives 20 for most NANDs (MaxNVB is basically the total\n\t\tcount of eraseblocks on the chip).\n\n\t\tTo put it differently, if this value is 20, UBI will try to\n\t\treserve about 1.9% of physical eraseblocks for bad blocks\n\t\thandling. And that will be 1.9% of eraseblocks on the entire\n\t\tNAND chip, not just the MTD partition UBI attaches. This means\n\t\tthat if you have, say, a NAND flash chip admits maximum 40 bad\n\t\teraseblocks, and it is split on two MTD partitions of the same\n\t\tsize, UBI will reserve 40 eraseblocks when attaching a\n\t\tpartition.\n\n\t\tdefault: 20\n\n\t\tCONFIG_MTD_UBI_FASTMAP\n\t\tFastmap is a mechanism which allows attaching an UBI device\n\t\tin nearly constant time. Instead of scanning the whole MTD device it\n\t\tonly has to locate a checkpoint (called fastmap) on the device.\n\t\tThe on-flash fastmap contains all information needed to attach\n\t\tthe device. Using fastmap makes only sense on large devices where\n\t\tattaching by scanning takes long. UBI will not automatically install\n\t\ta fastmap on old images, but you can set the UBI parameter\n\t\tCONFIG_MTD_UBI_FASTMAP_AUTOCONVERT to 1 if you want so. Please note\n\t\tthat fastmap-enabled images are still usable with UBI implementations\n\t\twithout\tfastmap support. On typical flash devices the whole fastmap\n\t\tfits into one PEB. UBI will reserve PEBs to hold two fastmaps.\n\n\t\tCONFIG_MTD_UBI_FASTMAP_AUTOCONVERT\n\t\tSet this parameter to enable fastmap automatically on images\n\t\twithout a fastmap.\n\t\tdefault: 0\n\n\t\tCONFIG_MTD_UBI_FM_DEBUG\n\t\tEnable UBI fastmap debug\n\t\tdefault: 0\n\n- SPL framework\n\t\tCONFIG_SPL\n\t\tEnable building of SPL globally.\n\n\t\tCONFIG_SPL_PANIC_ON_RAW_IMAGE\n\t\tWhen defined, SPL will panic() if the image it has\n\t\tloaded does not have a signature.\n\t\tDefining this is useful when code which loads images\n\t\tin SPL cannot guarantee that absolutely all read errors\n\t\twill be caught.\n\t\tAn example is the LPC32XX MLC NAND driver, which will\n\t\tconsider that a completely unreadable NAND block is bad,\n\t\tand thus should be skipped silently.\n\n\t\tCONFIG_SPL_DISPLAY_PRINT\n\t\tFor ARM, enable an optional function to print more information\n\t\tabout the running system.\n\n\t\tCONFIG_SPL_MPC83XX_WAIT_FOR_NAND\n\t\tSet this for NAND SPL on PPC mpc83xx targets, so that\n\t\tstart.S waits for the rest of the SPL to load before\n\t\tcontinuing (the hardware starts execution after just\n\t\tloading the first page rather than the full 4K).\n\n\t\tCONFIG_SPL_UBI\n\t\tSupport for a lightweight UBI (fastmap) scanner and\n\t\tloader\n\n\t\tCONFIG_SYS_NAND_5_ADDR_CYCLE, CONFIG_SYS_NAND_PAGE_SIZE,\n\t\tCONFIG_SYS_NAND_OOBSIZE, CONFIG_SYS_NAND_BLOCK_SIZE,\n\t\tCONFIG_SYS_NAND_BAD_BLOCK_POS, CFG_SYS_NAND_ECCPOS,\n\t\tCFG_SYS_NAND_ECCSIZE, CFG_SYS_NAND_ECCBYTES\n\t\tDefines the size and behavior of the NAND that SPL uses\n\t\tto read U-Boot\n\n\t\tCFG_SYS_NAND_U_BOOT_DST\n\t\tLocation in memory to load U-Boot to\n\n\t\tCFG_SYS_NAND_U_BOOT_SIZE\n\t\tSize of image to load\n\n\t\tCFG_SYS_NAND_U_BOOT_START\n\t\tEntry point in loaded image to jump to\n\n\t\tCONFIG_SPL_RAM_DEVICE\n\t\tSupport for running image already present in ram, in SPL binary\n\n\t\tCONFIG_SPL_FIT_PRINT\n\t\tPrinting information about a FIT image adds quite a bit of\n\t\tcode to SPL. So this is normally disabled in SPL. Use this\n\t\toption to re-enable it. This will affect the output of the\n\t\tbootm command when booting a FIT image.\n\n- Interrupt support (PPC):\n\n\t\tThere are common interrupt_init() and timer_interrupt()\n\t\tfor all PPC archs. interrupt_init() calls interrupt_init_cpu()\n\t\tfor CPU specific initialization. interrupt_init_cpu()\n\t\tshould set decrementer_count to appropriate value. If\n\t\tCPU resets decrementer automatically after interrupt\n\t\t(ppc4xx) it should set decrementer_count to zero.\n\t\ttimer_interrupt() calls timer_interrupt_cpu() for CPU\n\t\tspecific handling. If board has watchdog / status_led\n\t\t/ other_activity_monitor it works automatically from\n\t\tgeneral timer_interrupt().\n\n\nBoard initialization settings:\n------------------------------\n\nDuring Initialization u-boot calls a number of board specific functions\nto allow the preparation of board specific prerequisites, e.g. pin setup\nbefore drivers are initialized. To enable these callbacks the\nfollowing configuration macros have to be defined. Currently this is\narchitecture specific, so please check arch/your_architecture/lib/board.c\ntypically in board_init_f() and board_init_r().\n\n- CONFIG_BOARD_EARLY_INIT_F: Call board_early_init_f()\n- CONFIG_BOARD_EARLY_INIT_R: Call board_early_init_r()\n- CONFIG_BOARD_LATE_INIT: Call board_late_init()\n\nConfiguration Settings:\n-----------------------\n\n- CONFIG_SYS_LONGHELP: Defined when you want long help messages included;\n\t\tundefine this when you're short of memory.\n\n- CFG_SYS_HELP_CMD_WIDTH: Defined when you want to override the default\n\t\twidth of the commands listed in the 'help' command output.\n\n- CONFIG_SYS_PROMPT:\tThis is what U-Boot prints on the console to\n\t\tprompt for user input.\n\n- CFG_SYS_BAUDRATE_TABLE:\n\t\tList of legal baudrate settings for this board.\n\n- CFG_SYS_MEM_RESERVE_SECURE\n\t\tOnly implemented for ARMv8 for now.\n\t\tIf defined, the size of CFG_SYS_MEM_RESERVE_SECURE memory\n\t\tis substracted from total RAM and won't be reported to OS.\n\t\tThis memory can be used as secure memory. A variable\n\t\tgd->arch.secure_ram is used to track the location. In systems\n\t\tthe RAM base is not zero, or RAM is divided into banks,\n\t\tthis variable needs to be recalcuated to get the address.\n\n- CFG_SYS_SDRAM_BASE:\n\t\tPhysical start address of SDRAM. _Must_ be 0 here.\n\n- CFG_SYS_FLASH_BASE:\n\t\tPhysical start address of Flash memory.\n\n- CONFIG_SYS_MALLOC_LEN:\n\t\tSize of DRAM reserved for malloc() use.\n\n- CFG_SYS_BOOTMAPSZ:\n\t\tMaximum size of memory mapped by the startup code of\n\t\tthe Linux kernel; all data that must be processed by\n\t\tthe Linux kernel (bd_info, boot arguments, FDT blob if\n\t\tused) must be put below this limit, unless \"bootm_low\"\n\t\tenvironment variable is defined and non-zero. In such case\n\t\tall data for the Linux kernel must be between \"bootm_low\"\n\t\tand \"bootm_low\" + CFG_SYS_BOOTMAPSZ.\t The environment\n\t\tvariable \"bootm_mapsize\" will override the value of\n\t\tCFG_SYS_BOOTMAPSZ.  If CFG_SYS_BOOTMAPSZ is undefined,\n\t\tthen the value in \"bootm_size\" will be used instead.\n\n- CONFIG_SYS_BOOT_GET_CMDLINE:\n\t\tEnables allocating and saving kernel cmdline in space between\n\t\t\"bootm_low\" and \"bootm_low\" + BOOTMAPSZ.\n\n- CONFIG_SYS_BOOT_GET_KBD:\n\t\tEnables allocating and saving a kernel copy of the bd_info in\n\t\tspace between \"bootm_low\" and \"bootm_low\" + BOOTMAPSZ.\n\n- CONFIG_SYS_FLASH_PROTECTION\n\t\tIf defined, hardware flash sectors protection is used\n\t\tinstead of U-Boot software protection.\n\n- CONFIG_SYS_FLASH_CFI:\n\t\tDefine if the flash driver uses extra elements in the\n\t\tcommon flash structure for storing flash geometry.\n\n- CONFIG_FLASH_CFI_DRIVER\n\t\tThis option also enables the building of the cfi_flash driver\n\t\tin the drivers directory\n\n- CONFIG_FLASH_CFI_MTD\n\t\tThis option enables the building of the cfi_mtd driver\n\t\tin the drivers directory. The driver exports CFI flash\n\t\tto the MTD layer.\n\n- CONFIG_SYS_FLASH_USE_BUFFER_WRITE\n\t\tUse buffered writes to flash.\n\n- CONFIG_ENV_FLAGS_LIST_DEFAULT\n- CFG_ENV_FLAGS_LIST_STATIC\n\tEnable validation of the values given to environment variables when\n\tcalling env set.  Variables can be restricted to only decimal,\n\thexadecimal, or boolean.  If CONFIG_CMD_NET is also defined,\n\tthe variables can also be restricted to IP address or MAC address.\n\n\tThe format of the list is:\n\t\ttype_attribute = [s|d|x|b|i|m]\n\t\taccess_attribute = [a|r|o|c]\n\t\tattributes = type_attribute[access_attribute]\n\t\tentry = variable_name[:attributes]\n\t\tlist = entry[,list]\n\n\tThe type attributes are:\n\t\ts - String (default)\n\t\td - Decimal\n\t\tx - Hexadecimal\n\t\tb - Boolean ([1yYtT|0nNfF])\n\t\ti - IP address\n\t\tm - MAC address\n\n\tThe access attributes are:\n\t\ta - Any (default)\n\t\tr - Read-only\n\t\to - Write-once\n\t\tc - Change-default\n\n\t- CONFIG_ENV_FLAGS_LIST_DEFAULT\n\t\tDefine this to a list (string) to define the \".flags\"\n\t\tenvironment variable in the default or embedded environment.\n\n\t- CFG_ENV_FLAGS_LIST_STATIC\n\t\tDefine this to a list (string) to define validation that\n\t\tshould be done if an entry is not found in the \".flags\"\n\t\tenvironment variable.  To override a setting in the static\n\t\tlist, simply add an entry for the same variable name to the\n\t\t\".flags\" variable.\n\n\tIf CONFIG_REGEX is defined, the variable_name above is evaluated as a\n\tregular expression. This allows multiple variables to define the same\n\tflags without explicitly listing them for each variable.\n\nThe following definitions that deal with the placement and management\nof environment data (variable area); in general, we support the\nfollowing configurations:\n\nBE CAREFUL! The first access to the environment happens quite early\nin U-Boot initialization (when we try to get the setting of for the\nconsole baudrate). You *MUST* have mapped your NVRAM area then, or\nU-Boot will hang.\n\nPlease note that even with NVRAM we still use a copy of the\nenvironment in RAM: we could work on NVRAM directly, but we want to\nkeep settings there always unmodified except somebody uses \"saveenv\"\nto save the current settings.\n\nBE CAREFUL! For some special cases, the local device can not use\n\"saveenv\" command. For example, the local device will get the\nenvironment stored in a remote NOR flash by SRIO or PCIE link,\nbut it can not erase, write this NOR flash by SRIO or PCIE interface.\n\n- CONFIG_NAND_ENV_DST\n\n\tDefines address in RAM to which the nand_spl code should copy the\n\tenvironment. If redundant environment is used, it will be copied to\n\tCONFIG_NAND_ENV_DST + CONFIG_ENV_SIZE.\n\nPlease note that the environment is read-only until the monitor\nhas been relocated to RAM and a RAM copy of the environment has been\ncreated; also, when using EEPROM you will have to use env_get_f()\nuntil then to read environment variables.\n\nThe environment is protected by a CRC32 checksum. Before the monitor\nis relocated into RAM, as a result of a bad CRC you will be working\nwith the compiled-in default environment - *silently*!!! [This is\nnecessary, because the first environment variable we need is the\n\"baudrate\" setting for the console - if we have a bad CRC, we don't\nhave any device yet where we could complain.]\n\nNote: once the monitor has been relocated, then it will complain if\nthe default environment is used; a new CRC is computed as soon as you\nuse the \"saveenv\" command to store a valid environment.\n\n- CONFIG_SYS_FAULT_MII_ADDR:\n\t\tMII address of the PHY to check for the Ethernet link state.\n\n- CONFIG_DISPLAY_BOARDINFO\n\t\tDisplay information about the board that U-Boot is running on\n\t\twhen U-Boot starts up. The board function checkboard() is called\n\t\tto do this.\n\n- CONFIG_DISPLAY_BOARDINFO_LATE\n\t\tSimilar to the previous option, but display this information\n\t\tlater, once stdio is running and output goes to the LCD, if\n\t\tpresent.\n\nLow Level (hardware related) configuration options:\n---------------------------------------------------\n\n- CONFIG_SYS_CACHELINE_SIZE:\n\t\tCache Line Size of the CPU.\n\n- CONFIG_SYS_CCSRBAR_DEFAULT:\n\t\tDefault (power-on reset) physical address of CCSR on Freescale\n\t\tPowerPC SOCs.\n\n- CFG_SYS_CCSRBAR:\n\t\tVirtual address of CCSR.  On a 32-bit build, this is typically\n\t\tthe same value as CONFIG_SYS_CCSRBAR_DEFAULT.\n\n- CFG_SYS_CCSRBAR_PHYS:\n\t\tPhysical address of CCSR.  CCSR can be relocated to a new\n\t\tphysical address, if desired.  In this case, this macro should\n\t\tbe set to that address.\t Otherwise, it should be set to the\n\t\tsame value as CONFIG_SYS_CCSRBAR_DEFAULT.  For example, CCSR\n\t\tis typically relocated on 36-bit builds.  It is recommended\n\t\tthat this macro be defined via the _HIGH and _LOW macros:\n\n\t\t#define CFG_SYS_CCSRBAR_PHYS ((CFG_SYS_CCSRBAR_PHYS_HIGH\n\t\t\t* 1ull) << 32 | CFG_SYS_CCSRBAR_PHYS_LOW)\n\n- CFG_SYS_CCSRBAR_PHYS_HIGH:\n\t\tBits 33-36 of CFG_SYS_CCSRBAR_PHYS.\tThis value is typically\n\t\teither 0 (32-bit build) or 0xF (36-bit build).\tThis macro is\n\t\tused in assembly code, so it must not contain typecasts or\n\t\tinteger size suffixes (e.g. \"ULL\").\n\n- CFG_SYS_CCSRBAR_PHYS_LOW:\n\t\tLower 32-bits of CFG_SYS_CCSRBAR_PHYS.  This macro is\n\t\tused in assembly code, so it must not contain typecasts or\n\t\tinteger size suffixes (e.g. \"ULL\").\n\n- CONFIG_SYS_IMMR:\tPhysical address of the Internal Memory.\n\t\tDO NOT CHANGE unless you know exactly what you're\n\t\tdoing! (11-4) [MPC8xx systems only]\n\n- CFG_SYS_INIT_RAM_ADDR:\n\n\t\tStart address of memory area that can be used for\n\t\tinitial data and stack; please note that this must be\n\t\twritable memory that is working WITHOUT special\n\t\tinitialization, i. e. you CANNOT use normal RAM which\n\t\twill become available only after programming the\n\t\tmemory controller and running certain initialization\n\t\tsequences.\n\n\t\tU-Boot uses the following memory types:\n\t\t- MPC8xx: IMMR (internal memory of the CPU)\n\n- CONFIG_SYS_SCCR:\tSystem Clock and reset Control Register (15-27)\n\n- CONFIG_SYS_OR_TIMING_SDRAM:\n\t\tSDRAM timing\n\n- CONFIG_SYS_SRIOn_MEM_VIRT:\n\t\tVirtual Address of SRIO port 'n' memory region\n\n- CONFIG_SYS_SRIOn_MEM_PHYxS:\n\t\tPhysical Address of SRIO port 'n' memory region\n\n- CONFIG_SYS_SRIOn_MEM_SIZE:\n\t\tSize of SRIO port 'n' memory region\n\n- CONFIG_SYS_NAND_BUSWIDTH_16BIT\n\t\tDefined to tell the NAND controller that the NAND chip is using\n\t\ta 16 bit bus.\n\t\tNot all NAND drivers use this symbol.\n\t\tExample of drivers that use it:\n\t\t- drivers/mtd/nand/raw/ndfc.c\n\t\t- drivers/mtd/nand/raw/mxc_nand.c\n\n- CONFIG_SYS_NDFC_EBC0_CFG\n\t\tSets the EBC0_CFG register for the NDFC. If not defined\n\t\ta default value will be used.\n\n- CONFIG_SYS_SPD_BUS_NUM\n\t\tIf SPD EEPROM is on an I2C bus other than the first\n\t\tone, specify here. Note that the value must resolve\n\t\tto something your driver can deal with.\n\n- CONFIG_FSL_DDR_INTERACTIVE\n\t\tEnable interactive DDR debugging. See doc/README.fsl-ddr.\n\n- CONFIG_FSL_DDR_SYNC_REFRESH\n\t\tEnable sync of refresh for multiple controllers.\n\n- CONFIG_FSL_DDR_BIST\n\t\tEnable built-in memory test for Freescale DDR controllers.\n\n- CONFIG_RMII\n\t\tEnable RMII mode for all FECs.\n\t\tNote that this is a global option, we can't\n\t\thave one FEC in standard MII mode and another in RMII mode.\n\n- CONFIG_CRC32_VERIFY\n\t\tAdd a verify option to the crc32 command.\n\t\tThe syntax is:\n\n\t\t=> crc32 -v <address> <count> <crc32>\n\n\t\tWhere address/count indicate a memory area\n\t\tand crc32 is the correct crc32 which the\n\t\tarea should have.\n\n- CONFIG_LOOPW\n\t\tAdd the \"loopw\" memory command. This only takes effect if\n\t\tthe memory commands are activated globally (CONFIG_CMD_MEMORY).\n\n- CONFIG_CMD_MX_CYCLIC\n\t\tAdd the \"mdc\" and \"mwc\" memory commands. These are cyclic\n\t\t\"md/mw\" commands.\n\t\tExamples:\n\n\t\t=> mdc.b 10 4 500\n\t\tThis command will print 4 bytes (10,11,12,13) each 500 ms.\n\n\t\t=> mwc.l 100 12345678 10\n\t\tThis command will write 12345678 to address 100 all 10 ms.\n\n\t\tThis only takes effect if the memory commands are activated\n\t\tglobally (CONFIG_CMD_MEMORY).\n\n- CONFIG_XPL_BUILD\n\t\tSet when the currently running compilation is for an artifact\n\t\tthat will end up in one of the 'xPL' builds, i.e. SPL, TPL or\n\t\tVPL. Code that needs phase-specific behaviour can check this,\n\t\tor (where possible) use xpl_phase() instead.\n\n\t\tNote that CONFIG_XPL_BUILD *is* always defined when either\n\t\tof CONFIG_TPL_BUILD / CONFIG_VPL_BUILD is defined. This can be\n\t\tcounter-intuitive and should perhaps be changed.\n\n- CONFIG_TPL_BUILD\n\t\tSet when the currently running compilation is for an artifact\n\t\tthat will end up in the TPL build (as opposed to SPL, VPL or\n\t\tU-Boot proper). Code that needs phase-specific behaviour can\n\t\tcheck this, or (where possible) use xpl_phase() instead.\n\n- CONFIG_VPL_BUILD\n\t\tSet when the currently running compilation is for an artifact\n\t\tthat will end up in the VPL build (as opposed to the SPL, TPL\n\t\tor U-Boot proper). Code that needs phase-specific behaviour can\n\t\tcheck this, or (where possible) use xpl_phase() instead.\n\n- CONFIG_ARCH_MAP_SYSMEM\n\t\tGenerally U-Boot (and in particular the md command) uses\n\t\teffective address. It is therefore not necessary to regard\n\t\tU-Boot address as virtual addresses that need to be translated\n\t\tto physical addresses. However, sandbox requires this, since\n\t\tit maintains its own little RAM buffer which contains all\n\t\taddressable memory. This option causes some memory accesses\n\t\tto be mapped through map_sysmem() / unmap_sysmem().\n\n- CONFIG_X86_RESET_VECTOR\n\t\tIf defined, the x86 reset vector code is included. This is not\n\t\tneeded when U-Boot is running from Coreboot.\n\nFreescale QE/FMAN Firmware Support:\n-----------------------------------\n\nThe Freescale QUICCEngine (QE) and Frame Manager (FMAN) both support the\nloading of \"firmware\", which is encoded in the QE firmware binary format.\nThis firmware often needs to be loaded during U-Boot booting, so macros\nare used to identify the storage device (NOR flash, SPI, etc) and the address\nwithin that device.\n\n- CONFIG_SYS_FMAN_FW_ADDR\n\tThe address in the storage device where the FMAN microcode is located.  The\n\tmeaning of this address depends on which CONFIG_SYS_QE_FMAN_FW_IN_xxx macro\n\tis also specified.\n\n- CONFIG_SYS_QE_FW_ADDR\n\tThe address in the storage device where the QE microcode is located.  The\n\tmeaning of this address depends on which CONFIG_SYS_QE_FMAN_FW_IN_xxx macro\n\tis also specified.\n\n- CONFIG_SYS_QE_FMAN_FW_LENGTH\n\tThe maximum possible size of the firmware.  The firmware binary format\n\thas a field that specifies the actual size of the firmware, but it\n\tmight not be possible to read any part of the firmware unless some\n\tlocal storage is allocated to hold the entire firmware first.\n\n- CONFIG_SYS_QE_FMAN_FW_IN_NOR\n\tSpecifies that QE/FMAN firmware is located in NOR flash, mapped as\n\tnormal addressable memory via the LBC.  CONFIG_SYS_FMAN_FW_ADDR is the\n\tvirtual address in NOR flash.\n\n- CONFIG_SYS_QE_FMAN_FW_IN_NAND\n\tSpecifies that QE/FMAN firmware is located in NAND flash.\n\tCONFIG_SYS_FMAN_FW_ADDR is the offset within NAND flash.\n\n- CONFIG_SYS_QE_FMAN_FW_IN_MMC\n\tSpecifies that QE/FMAN firmware is located on the primary SD/MMC\n\tdevice.  CONFIG_SYS_FMAN_FW_ADDR is the byte offset on that device.\n\n- CONFIG_SYS_QE_FMAN_FW_IN_REMOTE\n\tSpecifies that QE/FMAN firmware is located in the remote (master)\n\tmemory space.\tCONFIG_SYS_FMAN_FW_ADDR is a virtual address which\n\tcan be mapped from slave TLB->slave LAW->slave SRIO or PCIE outbound\n\twindow->master inbound window->master LAW->the ucode address in\n\tmaster's memory space.\n\nFreescale Layerscape Management Complex Firmware Support:\n---------------------------------------------------------\nThe Freescale Layerscape Management Complex (MC) supports the loading of\n\"firmware\".\nThis firmware often needs to be loaded during U-Boot booting, so macros\nare used to identify the storage device (NOR flash, SPI, etc) and the address\nwithin that device.\n\n- CONFIG_FSL_MC_ENET\n\tEnable the MC driver for Layerscape SoCs.\n\nFreescale Layerscape Debug Server Support:\n-------------------------------------------\nThe Freescale Layerscape Debug Server Support supports the loading of\n\"Debug Server firmware\" and triggering SP boot-rom.\nThis firmware often needs to be loaded during U-Boot booting.\n\n- CONFIG_SYS_MC_RSV_MEM_ALIGN\n\tDefine alignment of reserved memory MC requires\n\n\nBuilding the Software:\n======================\n\nBuilding U-Boot has been tested in several native build environments\nand in many different cross environments. Of course we cannot support\nall possibly existing versions of cross development tools in all\n(potentially obsolete) versions. In case of tool chain problems we\nrecommend to use the ELDK (see https://www.denx.de/wiki/DULG/ELDK)\nwhich is extensively used to build and test U-Boot.\n\nIf you are not using a native environment, it is assumed that you\nhave GNU cross compiling tools available in your path. In this case,\nyou must set the environment variable CROSS_COMPILE in your shell.\nNote that no changes to the Makefile or any other source files are\nnecessary. For example using the ELDK on a 4xx CPU, please enter:\n\n\t$ CROSS_COMPILE=ppc_4xx-\n\t$ export CROSS_COMPILE\n\nU-Boot is intended to be simple to build. After installing the\nsources you must configure U-Boot for one specific board type. This\nis done by typing:\n\n\tmake NAME_defconfig\n\nwhere \"NAME_defconfig\" is the name of one of the existing configu-\nrations; see configs/*_defconfig for supported names.\n\nNote: for some boards special configuration names may exist; check if\n      additional information is available from the board vendor; for\n      instance, the TQM823L systems are available without (standard)\n      or with LCD support. You can select such additional \"features\"\n      when choosing the configuration, i. e.\n\n      make TQM823L_defconfig\n\t- will configure for a plain TQM823L, i. e. no LCD support\n\n      make TQM823L_LCD_defconfig\n\t- will configure for a TQM823L with U-Boot console on LCD\n\n      etc.\n\n\nFinally, type \"make all\", and you should get some working U-Boot\nimages ready for download to / installation on your system:\n\n- \"u-boot.bin\" is a raw binary image\n- \"u-boot\" is an image in ELF binary format\n- \"u-boot.srec\" is in Motorola S-Record format\n\nUser specific CPPFLAGS, AFLAGS and CFLAGS can be passed to the compiler by\nsetting the according environment variables KCPPFLAGS, KAFLAGS and KCFLAGS.\nFor example to treat all compiler warnings as errors:\n\n\tmake KCFLAGS=-Werror\n\nPlease be aware that the Makefiles assume you are using GNU make, so\nfor instance on NetBSD you might need to use \"gmake\" instead of\nnative \"make\".\n\n\nIf the system board that you have is not listed, then you will need\nto port U-Boot to your hardware platform. To do this, follow these\nsteps:\n\n1.  Create a new directory to hold your board specific code. Add any\n    files you need. In your board directory, you will need at least\n    the \"Makefile\" and a \"<board>.c\".\n2.  Create a new configuration file \"include/configs/<board>.h\" for\n    your board.\n3.  If you're porting U-Boot to a new CPU, then also create a new\n    directory to hold your CPU specific code. Add any files you need.\n4.  Run \"make <board>_defconfig\" with your new name.\n5.  Type \"make\", and you should get a working \"u-boot.srec\" file\n    to be installed on your target system.\n6.  Debug and solve any problems that might arise.\n    [Of course, this last step is much harder than it sounds.]\n\n\nTesting of U-Boot Modifications, Ports to New Hardware, etc.:\n==============================================================\n\nIf you have modified U-Boot sources (for instance added a new board\nor support for new devices, a new CPU, etc.) you are expected to\nprovide feedback to the other developers. The feedback normally takes\nthe form of a \"patch\", i.e. a context diff against a certain (latest\nofficial or latest in the git repository) version of U-Boot sources.\n\nBut before you submit such a patch, please verify that your modifi-\ncation did not break existing code. At least make sure that *ALL* of\nthe supported boards compile WITHOUT ANY compiler warnings. To do so,\njust run the buildman script (tools/buildman/buildman), which will\nconfigure and build U-Boot for ALL supported system. Be warned, this\nwill take a while. Please see the buildman README, or run 'buildman -H'\nfor documentation.\n\n\nSee also \"U-Boot Porting Guide\" below.\n\n\nMonitor Commands - Overview:\n============================\n\ngo\t- start application at address 'addr'\nrun\t- run commands in an environment variable\nbootm\t- boot application image from memory\nbootp\t- boot image via network using BootP/TFTP protocol\nbootz   - boot zImage from memory\ntftpboot- boot image via network using TFTP protocol\n\t       and env variables \"ipaddr\" and \"serverip\"\n\t       (and eventually \"gatewayip\")\ntftpput - upload a file via network using TFTP protocol\nrarpboot- boot image via network using RARP/TFTP protocol\ndiskboot- boot from IDE devicebootd   - boot default, i.e., run 'bootcmd'\nloads\t- load S-Record file over serial line\nloadb\t- load binary file over serial line (kermit mode)\nloadm   - load binary blob from source address to destination address\nmd\t- memory display\nmm\t- memory modify (auto-incrementing)\nnm\t- memory modify (constant address)\nmw\t- memory write (fill)\nms\t- memory search\ncp\t- memory copy\ncmp\t- memory compare\ncrc32\t- checksum calculation\ni2c\t- I2C sub-system\nsspi\t- SPI utility commands\nbase\t- print or set address offset\nprintenv- print environment variables\npwm\t- control pwm channels\nseama   - load SEAMA NAND image\nsetenv\t- set environment variables\nsaveenv - save environment variables to persistent storage\nprotect - enable or disable FLASH write protection\nerase\t- erase FLASH memory\nflinfo\t- print FLASH memory information\nnand\t- NAND memory operations (see doc/README.nand)\nbdinfo\t- print Board Info structure\niminfo\t- print header information for application image\nconinfo - print console devices and informations\nide\t- IDE sub-system\nloop\t- infinite loop on address range\nloopw\t- infinite write loop on address range\nmtest\t- simple RAM test\nicache\t- enable or disable instruction cache\ndcache\t- enable or disable data cache\nreset\t- Perform RESET of the CPU\necho\t- echo args to console\nversion - print monitor version\nhelp\t- print online help\n?\t- alias for 'help'\n\n\nMonitor Commands - Detailed Description:\n========================================\n\nTODO.\n\nFor now: just type \"help <command>\".\n\n\nNote for Redundant Ethernet Interfaces:\n=======================================\n\nSome boards come with redundant Ethernet interfaces; U-Boot supports\nsuch configurations and is capable of automatic selection of a\n\"working\" interface when needed. MAC assignment works as follows:\n\nNetwork interfaces are numbered eth0, eth1, eth2, ... Corresponding\nMAC addresses can be stored in the environment as \"ethaddr\" (=>eth0),\n\"eth1addr\" (=>eth1), \"eth2addr\", ...\n\nIf the network interface stores some valid MAC address (for instance\nin SROM), this is used as default address if there is NO correspon-\nding setting in the environment; if the corresponding environment\nvariable is set, this overrides the settings in the card; that means:\n\no If the SROM has a valid MAC address, and there is no address in the\n  environment, the SROM's address is used.\n\no If there is no valid address in the SROM, and a definition in the\n  environment exists, then the value from the environment variable is\n  used.\n\no If both the SROM and the environment contain a MAC address, and\n  both addresses are the same, this MAC address is used.\n\no If both the SROM and the environment contain a MAC address, and the\n  addresses differ, the value from the environment is used and a\n  warning is printed.\n\no If neither SROM nor the environment contain a MAC address, an error\n  is raised. If CONFIG_NET_RANDOM_ETHADDR is defined, then in this case\n  a random, locally-assigned MAC is used.\n\nIf Ethernet drivers implement the 'write_hwaddr' function, valid MAC addresses\nwill be programmed into hardware as part of the initialization process.\t This\nmay be skipped by setting the appropriate 'ethmacskip' environment variable.\nThe naming convention is as follows:\n\"ethmacskip\" (=>eth0), \"eth1macskip\" (=>eth1) etc.\n\nImage Formats:\n==============\n\nU-Boot is capable of booting (and performing other auxiliary operations on)\nimages in two formats:\n\nNew uImage format (FIT)\n-----------------------\n\nFlexible and powerful format based on Flattened Image Tree -- FIT (similar\nto Flattened Device Tree). It allows the use of images with multiple\ncomponents (several kernels, ramdisks, etc.), with contents protected by\nSHA1, MD5 or CRC32. More details are found in the doc/uImage.FIT directory.\n\n\nOld uImage format\n-----------------\n\nOld image format is based on binary files which can be basically anything,\npreceded by a special header; see the definitions in include/image.h for\ndetails; basically, the header defines the following image properties:\n\n* Target Operating System (Provisions for OpenBSD, NetBSD, FreeBSD,\n  4.4BSD, Linux, SVR4, Esix, Solaris, Irix, SCO, Dell, NCR, VxWorks,\n  LynxOS, pSOS, QNX, RTEMS, INTEGRITY;\n  Currently supported: Linux, NetBSD, VxWorks, QNX, RTEMS, INTEGRITY).\n* Target CPU Architecture (Provisions for Alpha, ARM, Intel x86,\n  IA64, MIPS, Nios II, PowerPC, IBM S390, SuperH, Sparc, Sparc 64 Bit;\n  Currently supported: ARM, Intel x86, MIPS, Nios II, PowerPC).\n* Compression Type (uncompressed, gzip, bzip2)\n* Load Address\n* Entry Point\n* Image Name\n* Image Timestamp\n\nThe header is marked by a special Magic Number, and both the header\nand the data portions of the image are secured against corruption by\nCRC32 checksums.\n\n\nLinux Support:\n==============\n\nAlthough U-Boot should support any OS or standalone application\neasily, the main focus has always been on Linux during the design of\nU-Boot.\n\nU-Boot includes many features that so far have been part of some\nspecial \"boot loader\" code within the Linux kernel. Also, any\n\"initrd\" images to be used are no longer part of one big Linux image;\ninstead, kernel and \"initrd\" are separate images. This implementation\nserves several purposes:\n\n- the same features can be used for other OS or standalone\n  applications (for instance: using compressed images to reduce the\n  Flash memory footprint)\n\n- it becomes much easier to port new Linux kernel versions because\n  lots of low-level, hardware dependent stuff are done by U-Boot\n\n- the same Linux kernel image can now be used with different \"initrd\"\n  images; of course this also means that different kernel images can\n  be run with the same \"initrd\". This makes testing easier (you don't\n  have to build a new \"zImage.initrd\" Linux image when you just\n  change a file in your \"initrd\"). Also, a field-upgrade of the\n  software is easier now.\n\n\nLinux HOWTO:\n============\n\nPorting Linux to U-Boot based systems:\n---------------------------------------\n\nU-Boot cannot save you from doing all the necessary modifications to\nconfigure the Linux device drivers for use with your target hardware\n(no, we don't intend to provide a full virtual machine interface to\nLinux :-).\n\nBut now you can ignore ALL boot loader code (in arch/powerpc/mbxboot).\n\nJust make sure your machine specific header file (for instance\ninclude/asm-ppc/tqm8xx.h) includes the same definition of the Board\nInformation structure as we define in include/asm-<arch>/u-boot.h,\nand make sure that your definition of IMAP_ADDR uses the same value\nas your U-Boot configuration in CONFIG_SYS_IMMR.\n\nNote that U-Boot now has a driver model, a unified model for drivers.\nIf you are adding a new driver, plumb it into driver model. If there\nis no uclass available, you are encouraged to create one. See\ndoc/driver-model.\n\n\nConfiguring the Linux kernel:\n-----------------------------\n\nNo specific requirements for U-Boot. Make sure you have some root\ndevice (initial ramdisk, NFS) for your target system.\n\n\nBuilding a Linux Image:\n-----------------------\n\nWith U-Boot, \"normal\" build targets like \"zImage\" or \"bzImage\" are\nnot used. If you use recent kernel source, a new build target\n\"uImage\" will exist which automatically builds an image usable by\nU-Boot. Most older kernels also have support for a \"pImage\" target,\nwhich was introduced for our predecessor project PPCBoot and uses a\n100% compatible format.\n\nExample:\n\n\tmake TQM850L_defconfig\n\tmake oldconfig\n\tmake dep\n\tmake uImage\n\nThe \"uImage\" build target uses a special tool (in 'tools/mkimage') to\nencapsulate a compressed Linux kernel image with header\t information,\nCRC32 checksum etc. for use with U-Boot. This is what we are doing:\n\n* build a standard \"vmlinux\" kernel image (in ELF binary format):\n\n* convert the kernel into a raw binary image:\n\n\t${CROSS_COMPILE}-objcopy -O binary \\\n\t\t\t\t -R .note -R .comment \\\n\t\t\t\t -S vmlinux linux.bin\n\n* compress the binary image:\n\n\tgzip -9 linux.bin\n\n* package compressed binary image for U-Boot:\n\n\tmkimage -A ppc -O linux -T kernel -C gzip \\\n\t\t-a 0 -e 0 -n \"Linux Kernel Image\" \\\n\t\t-d linux.bin.gz uImage\n\n\nThe \"mkimage\" tool can also be used to create ramdisk images for use\nwith U-Boot, either separated from the Linux kernel image, or\ncombined into one file. \"mkimage\" encapsulates the images with a 64\nbyte header containing information about target architecture,\noperating system, image type, compression method, entry points, time\nstamp, CRC32 checksums, etc.\n\n\"mkimage\" can be called in two ways: to verify existing images and\nprint the header information, or to build new images.\n\nIn the first form (with \"-l\" option) mkimage lists the information\ncontained in the header of an existing U-Boot image; this includes\nchecksum verification:\n\n\ttools/mkimage -l image\n\t  -l ==> list image header information\n\nThe second form (with \"-d\" option) is used to build a U-Boot image\nfrom a \"data file\" which is used as image payload:\n\n\ttools/mkimage -A arch -O os -T type -C comp -a addr -e ep \\\n\t\t      -n name -d data_file image\n\t  -A ==> set architecture to 'arch'\n\t  -O ==> set operating system to 'os'\n\t  -T ==> set image type to 'type'\n\t  -C ==> set compression type 'comp'\n\t  -a ==> set load address to 'addr' (hex)\n\t  -e ==> set entry point to 'ep' (hex)\n\t  -n ==> set image name to 'name'\n\t  -d ==> use image data from 'datafile'\n\nRight now, all Linux kernels for PowerPC systems use the same load\naddress (0x00000000), but the entry point address depends on the\nkernel version:\n\n- 2.2.x kernels have the entry point at 0x0000000C,\n- 2.3.x and later kernels have the entry point at 0x00000000.\n\nSo a typical call to build a U-Boot image would read:\n\n\t-> tools/mkimage -n '2.4.4 kernel for TQM850L' \\\n\t> -A ppc -O linux -T kernel -C gzip -a 0 -e 0 \\\n\t> -d /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux.gz \\\n\t> examples/uImage.TQM850L\n\tImage Name:   2.4.4 kernel for TQM850L\n\tCreated:      Wed Jul 19 02:34:59 2000\n\tImage Type:   PowerPC Linux Kernel Image (gzip compressed)\n\tData Size:    335725 Bytes = 327.86 kB = 0.32 MB\n\tLoad Address: 0x00000000\n\tEntry Point:  0x00000000\n\nTo verify the contents of the image (or check for corruption):\n\n\t-> tools/mkimage -l examples/uImage.TQM850L\n\tImage Name:   2.4.4 kernel for TQM850L\n\tCreated:      Wed Jul 19 02:34:59 2000\n\tImage Type:   PowerPC Linux Kernel Image (gzip compressed)\n\tData Size:    335725 Bytes = 327.86 kB = 0.32 MB\n\tLoad Address: 0x00000000\n\tEntry Point:  0x00000000\n\nNOTE: for embedded systems where boot time is critical you can trade\nspeed for memory and install an UNCOMPRESSED image instead: this\nneeds more space in Flash, but boots much faster since it does not\nneed to be uncompressed:\n\n\t-> gunzip /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux.gz\n\t-> tools/mkimage -n '2.4.4 kernel for TQM850L' \\\n\t> -A ppc -O linux -T kernel -C none -a 0 -e 0 \\\n\t> -d /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux \\\n\t> examples/uImage.TQM850L-uncompressed\n\tImage Name:   2.4.4 kernel for TQM850L\n\tCreated:      Wed Jul 19 02:34:59 2000\n\tImage Type:   PowerPC Linux Kernel Image (uncompressed)\n\tData Size:    792160 Bytes = 773.59 kB = 0.76 MB\n\tLoad Address: 0x00000000\n\tEntry Point:  0x00000000\n\n\nSimilar you can build U-Boot images from a 'ramdisk.image.gz' file\nwhen your kernel is intended to use an initial ramdisk:\n\n\t-> tools/mkimage -n 'Simple Ramdisk Image' \\\n\t> -A ppc -O linux -T ramdisk -C gzip \\\n\t> -d /LinuxPPC/images/SIMPLE-ramdisk.image.gz examples/simple-initrd\n\tImage Name:   Simple Ramdisk Image\n\tCreated:      Wed Jan 12 14:01:50 2000\n\tImage Type:   PowerPC Linux RAMDisk Image (gzip compressed)\n\tData Size:    566530 Bytes = 553.25 kB = 0.54 MB\n\tLoad Address: 0x00000000\n\tEntry Point:  0x00000000\n\nThe \"dumpimage\" tool can be used to disassemble or list the contents of images\nbuilt by mkimage. See dumpimage's help output (-h) for details.\n\nInstalling a Linux Image:\n-------------------------\n\nTo downloading a U-Boot image over the serial (console) interface,\nyou must convert the image to S-Record format:\n\n\tobjcopy -I binary -O srec examples/image examples/image.srec\n\nThe 'objcopy' does not understand the information in the U-Boot\nimage header, so the resulting S-Record file will be relative to\naddress 0x00000000. To load it to a given address, you need to\nspecify the target address as 'offset' parameter with the 'loads'\ncommand.\n\nExample: install the image to address 0x40100000 (which on the\nTQM8xxL is in the first Flash bank):\n\n\t=> erase 40100000 401FFFFF\n\n\t.......... done\n\tErased 8 sectors\n\n\t=> loads 40100000\n\t## Ready for S-Record download ...\n\t~>examples/image.srec\n\t1 2 3 4 5 6 7 8 9 10 11 12 13 ...\n\t...\n\t15989 15990 15991 15992\n\t[file transfer complete]\n\t[connected]\n\t## Start Addr = 0x00000000\n\n\nYou can check the success of the download using the 'iminfo' command;\nthis includes a checksum verification so you can be sure no data\ncorruption happened:\n\n\t=> imi 40100000\n\n\t## Checking Image at 40100000 ...\n\t   Image Name:\t 2.2.13 for initrd on TQM850L\n\t   Image Type:\t PowerPC Linux Kernel Image (gzip compressed)\n\t   Data Size:\t 335725 Bytes = 327 kB = 0 MB\n\t   Load Address: 00000000\n\t   Entry Point:\t 0000000c\n\t   Verifying Checksum ... OK\n\n\nBoot Linux:\n-----------\n\nThe \"bootm\" command is used to boot an application that is stored in\nmemory (RAM or Flash). In case of a Linux kernel image, the contents\nof the \"bootargs\" environment variable is passed to the kernel as\nparameters. You can check and modify this variable using the\n\"printenv\" and \"setenv\" commands:\n\n\n\t=> printenv bootargs\n\tbootargs=root=/dev/ram\n\n\t=> setenv bootargs root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2\n\n\t=> printenv bootargs\n\tbootargs=root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2\n\n\t=> bootm 40020000\n\t## Booting Linux kernel at 40020000 ...\n\t   Image Name:\t 2.2.13 for NFS on TQM850L\n\t   Image Type:\t PowerPC Linux Kernel Image (gzip compressed)\n\t   Data Size:\t 381681 Bytes = 372 kB = 0 MB\n\t   Load Address: 00000000\n\t   Entry Point:\t 0000000c\n\t   Verifying Checksum ... OK\n\t   Uncompressing Kernel Image ... OK\n\tLinux version 2.2.13 (wd@denx.local.net) (gcc version 2.95.2 19991024 (release)) #1 Wed Jul 19 02:35:17 MEST 2000\n\tBoot arguments: root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2\n\ttime_init: decrementer frequency = 187500000/60\n\tCalibrating delay loop... 49.77 BogoMIPS\n\tMemory: 15208k available (700k kernel code, 444k data, 32k init) [c0000000,c1000000]\n\t...\n\nIf you want to boot a Linux kernel with initial RAM disk, you pass\nthe memory addresses of both the kernel and the initrd image (PPBCOOT\nformat!) to the \"bootm\" command:\n\n\t=> imi 40100000 40200000\n\n\t## Checking Image at 40100000 ...\n\t   Image Name:\t 2.2.13 for initrd on TQM850L\n\t   Image Type:\t PowerPC Linux Kernel Image (gzip compressed)\n\t   Data Size:\t 335725 Bytes = 327 kB = 0 MB\n\t   Load Address: 00000000\n\t   Entry Point:\t 0000000c\n\t   Verifying Checksum ... OK\n\n\t## Checking Image at 40200000 ...\n\t   Image Name:\t Simple Ramdisk Image\n\t   Image Type:\t PowerPC Linux RAMDisk Image (gzip compressed)\n\t   Data Size:\t 566530 Bytes = 553 kB = 0 MB\n\t   Load Address: 00000000\n\t   Entry Point:\t 00000000\n\t   Verifying Checksum ... OK\n\n\t=> bootm 40100000 40200000\n\t## Booting Linux kernel at 40100000 ...\n\t   Image Name:\t 2.2.13 for initrd on TQM850L\n\t   Image Type:\t PowerPC Linux Kernel Image (gzip compressed)\n\t   Data Size:\t 335725 Bytes = 327 kB = 0 MB\n\t   Load Address: 00000000\n\t   Entry Point:\t 0000000c\n\t   Verifying Checksum ... OK\n\t   Uncompressing Kernel Image ... OK\n\t## Loading RAMDisk Image at 40200000 ...\n\t   Image Name:\t Simple Ramdisk Image\n\t   Image Type:\t PowerPC Linux RAMDisk Image (gzip compressed)\n\t   Data Size:\t 566530 Bytes = 553 kB = 0 MB\n\t   Load Address: 00000000\n\t   Entry Point:\t 00000000\n\t   Verifying Checksum ... OK\n\t   Loading Ramdisk ... OK\n\tLinux version 2.2.13 (wd@denx.local.net) (gcc version 2.95.2 19991024 (release)) #1 Wed Jul 19 02:32:08 MEST 2000\n\tBoot arguments: root=/dev/ram\n\ttime_init: decrementer frequency = 187500000/60\n\tCalibrating delay loop... 49.77 BogoMIPS\n\t...\n\tRAMDISK: Compressed image found at block 0\n\tVFS: Mounted root (ext2 filesystem).\n\n\tbash#\n\nBoot Linux and pass a flat device tree:\n-----------\n\nFirst, U-Boot must be compiled with the appropriate defines. See the section\ntitled \"Linux Kernel Interface\" above for a more in depth explanation. The\nfollowing is an example of how to start a kernel and pass an updated\nflat device tree:\n\n=> print oftaddr\noftaddr=0x300000\n=> print oft\noft=oftrees/mpc8540ads.dtb\n=> tftp $oftaddr $oft\nSpeed: 1000, full duplex\nUsing TSEC0 device\nTFTP from server 192.168.1.1; our IP address is 192.168.1.101\nFilename 'oftrees/mpc8540ads.dtb'.\nLoad address: 0x300000\nLoading: #\ndone\nBytes transferred = 4106 (100a hex)\n=> tftp $loadaddr $bootfile\nSpeed: 1000, full duplex\nUsing TSEC0 device\nTFTP from server 192.168.1.1; our IP address is 192.168.1.2\nFilename 'uImage'.\nLoad address: 0x200000\nLoading:############\ndone\nBytes transferred = 1029407 (fb51f hex)\n=> print loadaddr\nloadaddr=200000\n=> print oftaddr\noftaddr=0x300000\n=> bootm $loadaddr - $oftaddr\n## Booting image at 00200000 ...\n   Image Name:\t Linux-2.6.17-dirty\n   Image Type:\t PowerPC Linux Kernel Image (gzip compressed)\n   Data Size:\t 1029343 Bytes = 1005.2 kB\n   Load Address: 00000000\n   Entry Point:\t 00000000\n   Verifying Checksum ... OK\n   Uncompressing Kernel Image ... OK\nBooting using flat device tree at 0x300000\nUsing MPC85xx ADS machine description\nMemory CAM mapping: CAM0=256Mb, CAM1=256Mb, CAM2=0Mb residual: 0Mb\n[snip]\n\n\nMore About U-Boot Image Types:\n------------------------------\n\nU-Boot supports the following image types:\n\n   \"Standalone Programs\" are directly runnable in the environment\n\tprovided by U-Boot; it is expected that (if they behave\n\twell) you can continue to work in U-Boot after return from\n\tthe Standalone Program.\n   \"OS Kernel Images\" are usually images of some Embedded OS which\n\twill take over control completely. Usually these programs\n\twill install their own set of exception handlers, device\n\tdrivers, set up the MMU, etc. - this means, that you cannot\n\texpect to re-enter U-Boot except by resetting the CPU.\n   \"RAMDisk Images\" are more or less just data blocks, and their\n\tparameters (address, size) are passed to an OS kernel that is\n\tbeing started.\n   \"Multi-File Images\" contain several images, typically an OS\n\t(Linux) kernel image and one or more data images like\n\tRAMDisks. This construct is useful for instance when you want\n\tto boot over the network using BOOTP etc., where the boot\n\tserver provides just a single image file, but you want to get\n\tfor instance an OS kernel and a RAMDisk image.\n\n\t\"Multi-File Images\" start with a list of image sizes, each\n\timage size (in bytes) specified by an \"uint32_t\" in network\n\tbyte order. This list is terminated by an \"(uint32_t)0\".\n\tImmediately after the terminating 0 follow the images, one by\n\tone, all aligned on \"uint32_t\" boundaries (size rounded up to\n\ta multiple of 4 bytes).\n\n   \"Firmware Images\" are binary images containing firmware (like\n\tU-Boot or FPGA images) which usually will be programmed to\n\tflash memory.\n\n   \"Script files\" are command sequences that will be executed by\n\tU-Boot's command interpreter; this feature is especially\n\tuseful when you configure U-Boot to use a real shell (hush)\n\tas command interpreter.\n\nBooting the Linux zImage:\n-------------------------\n\nOn some platforms, it's possible to boot Linux zImage. This is done\nusing the \"bootz\" command. The syntax of \"bootz\" command is the same\nas the syntax of \"bootm\" command.\n\nNote, defining the CONFIG_SUPPORT_RAW_INITRD allows user to supply\nkernel with raw initrd images. The syntax is slightly different, the\naddress of the initrd must be augmented by it's size, in the following\nformat: \"<initrd addres>:<initrd size>\".\n\n\nStandalone HOWTO:\n=================\n\nOne of the features of U-Boot is that you can dynamically load and\nrun \"standalone\" applications, which can use some resources of\nU-Boot like console I/O functions or interrupt services.\n\nTwo simple examples are included with the sources:\n\n\"Hello World\" Demo:\n-------------------\n\n'examples/hello_world.c' contains a small \"Hello World\" Demo\napplication; it is automatically compiled when you build U-Boot.\nIt's configured to run at address 0x00040004, so you can play with it\nlike that:\n\n\t=> loads\n\t## Ready for S-Record download ...\n\t~>examples/hello_world.srec\n\t1 2 3 4 5 6 7 8 9 10 11 ...\n\t[file transfer complete]\n\t[connected]\n\t## Start Addr = 0x00040004\n\n\t=> go 40004 Hello World! This is a test.\n\t## Starting application at 0x00040004 ...\n\tHello World\n\targc = 7\n\targv[0] = \"40004\"\n\targv[1] = \"Hello\"\n\targv[2] = \"World!\"\n\targv[3] = \"This\"\n\targv[4] = \"is\"\n\targv[5] = \"a\"\n\targv[6] = \"test.\"\n\targv[7] = \"<NULL>\"\n\tHit any key to exit ...\n\n\t## Application terminated, rc = 0x0\n\nAnother example, which demonstrates how to register a CPM interrupt\nhandler with the U-Boot code, can be found in 'examples/timer.c'.\nHere, a CPM timer is set up to generate an interrupt every second.\nThe interrupt service routine is trivial, just printing a '.'\ncharacter, but this is just a demo program. The application can be\ncontrolled by the following keys:\n\n\t? - print current values og the CPM Timer registers\n\tb - enable interrupts and start timer\n\te - stop timer and disable interrupts\n\tq - quit application\n\n\t=> loads\n\t## Ready for S-Record download ...\n\t~>examples/timer.srec\n\t1 2 3 4 5 6 7 8 9 10 11 ...\n\t[file transfer complete]\n\t[connected]\n\t## Start Addr = 0x00040004\n\n\t=> go 40004\n\t## Starting application at 0x00040004 ...\n\tTIMERS=0xfff00980\n\tUsing timer 1\n\t  tgcr @ 0xfff00980, tmr @ 0xfff00990, trr @ 0xfff00994, tcr @ 0xfff00998, tcn @ 0xfff0099c, ter @ 0xfff009b0\n\nHit 'b':\n\t[q, b, e, ?] Set interval 1000000 us\n\tEnabling timer\nHit '?':\n\t[q, b, e, ?] ........\n\ttgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0xef6, ter=0x0\nHit '?':\n\t[q, b, e, ?] .\n\ttgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x2ad4, ter=0x0\nHit '?':\n\t[q, b, e, ?] .\n\ttgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x1efc, ter=0x0\nHit '?':\n\t[q, b, e, ?] .\n\ttgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x169d, ter=0x0\nHit 'e':\n\t[q, b, e, ?] ...Stopping timer\nHit 'q':\n\t[q, b, e, ?] ## Application terminated, rc = 0x0\n\n\nImplementation Internals:\n=========================\n\nThe following is not intended to be a complete description of every\nimplementation detail. However, it should help to understand the\ninner workings of U-Boot and make it easier to port it to custom\nhardware.\n\n\nInitial Stack, Global Data:\n---------------------------\n\nThe implementation of U-Boot is complicated by the fact that U-Boot\nstarts running out of ROM (flash memory), usually without access to\nsystem RAM (because the memory controller is not initialized yet).\nThis means that we don't have writable Data or BSS segments, and BSS\nis not initialized as zero. To be able to get a C environment working\nat all, we have to allocate at least a minimal stack. Implementation\noptions for this are defined and restricted by the CPU used: Some CPU\nmodels provide on-chip memory (like the IMMR area on MPC8xx and\nMPC826x processors), on others (parts of) the data cache can be\nlocked as (mis-) used as memory, etc.\n\n\tChris Hallinan posted a good summary of these issues to the\n\tU-Boot mailing list:\n\n\tSubject: RE: [U-Boot-Users] RE: More On Memory Bank x (nothingness)?\n\tFrom: \"Chris Hallinan\" <clh@net1plus.com>\n\tDate: Mon, 10 Feb 2003 16:43:46 -0500 (22:43 MET)\n\t...\n\n\tCorrect me if I'm wrong, folks, but the way I understand it\n\tis this: Using DCACHE as initial RAM for Stack, etc, does not\n\trequire any physical RAM backing up the cache. The cleverness\n\tis that the cache is being used as a temporary supply of\n\tnecessary storage before the SDRAM controller is setup. It's\n\tbeyond the scope of this list to explain the details, but you\n\tcan see how this works by studying the cache architecture and\n\toperation in the architecture and processor-specific manuals.\n\n\tOCM is On Chip Memory, which I believe the 405GP has 4K. It\n\tis another option for the system designer to use as an\n\tinitial stack/RAM area prior to SDRAM being available. Either\n\toption should work for you. Using CS 4 should be fine if your\n\tboard designers haven't used it for something that would\n\tcause you grief during the initial boot! It is frequently not\n\tused.\n\n\tCFG_SYS_INIT_RAM_ADDR should be somewhere that won't interfere\n\twith your processor/board/system design. The default value\n\tyou will find in any recent u-boot distribution in\n\twalnut.h should work for you. I'd set it to a value larger\n\tthan your SDRAM module. If you have a 64MB SDRAM module, set\n\tit above 400_0000. Just make sure your board has no resources\n\tthat are supposed to respond to that address! That code in\n\tstart.S has been around a while and should work as is when\n\tyou get the config right.\n\n\t-Chris Hallinan\n\tDS4.COM, Inc.\n\nIt is essential to remember this, since it has some impact on the C\ncode for the initialization procedures:\n\n* Initialized global data (data segment) is read-only. Do not attempt\n  to write it.\n\n* Do not use any uninitialized global data (or implicitly initialized\n  as zero data - BSS segment) at all - this is undefined, initiali-\n  zation is performed later (when relocating to RAM).\n\n* Stack space is very limited. Avoid big data buffers or things like\n  that.\n\nHaving only the stack as writable memory limits means we cannot use\nnormal global data to share information between the code. But it\nturned out that the implementation of U-Boot can be greatly\nsimplified by making a global data structure (gd_t) available to all\nfunctions. We could pass a pointer to this data as argument to _all_\nfunctions, but this would bloat the code. Instead we use a feature of\nthe GCC compiler (Global Register Variables) to share the data: we\nplace a pointer (gd) to the global data into a register which we\nreserve for this purpose.\n\nWhen choosing a register for such a purpose we are restricted by the\nrelevant  (E)ABI  specifications for the current architecture, and by\nGCC's implementation.\n\nFor PowerPC, the following registers have specific use:\n\tR1:\tstack pointer\n\tR2:\treserved for system use\n\tR3-R4:\tparameter passing and return values\n\tR5-R10: parameter passing\n\tR13:\tsmall data area pointer\n\tR30:\tGOT pointer\n\tR31:\tframe pointer\n\n\t(U-Boot also uses R12 as internal GOT pointer. r12\n\tis a volatile register so r12 needs to be reset when\n\tgoing back and forth between asm and C)\n\n    ==> U-Boot will use R2 to hold a pointer to the global data\n\n    Note: on PPC, we could use a static initializer (since the\n    address of the global data structure is known at compile time),\n    but it turned out that reserving a register results in somewhat\n    smaller code - although the code savings are not that big (on\n    average for all boards 752 bytes for the whole U-Boot image,\n    624 text + 127 data).\n\nOn ARM, the following registers are used:\n\n\tR0:\tfunction argument word/integer result\n\tR1-R3:\tfunction argument word\n\tR9:\tplatform specific\n\tR10:\tstack limit (used only if stack checking is enabled)\n\tR11:\targument (frame) pointer\n\tR12:\ttemporary workspace\n\tR13:\tstack pointer\n\tR14:\tlink register\n\tR15:\tprogram counter\n\n    ==> U-Boot will use R9 to hold a pointer to the global data\n\n    Note: on ARM, only R_ARM_RELATIVE relocations are supported.\n\nOn Nios II, the ABI is documented here:\n\thttps://www.altera.com/literature/hb/nios2/n2cpu_nii51016.pdf\n\n    ==> U-Boot will use gp to hold a pointer to the global data\n\n    Note: on Nios II, we give \"-G0\" option to gcc and don't use gp\n    to access small data sections, so gp is free.\n\nOn RISC-V, the following registers are used:\n\n\tx0: hard-wired zero (zero)\n\tx1: return address (ra)\n\tx2:\tstack pointer (sp)\n\tx3:\tglobal pointer (gp)\n\tx4:\tthread pointer (tp)\n\tx5:\tlink register (t0)\n\tx8:\tframe pointer (fp)\n\tx10-x11:\targuments/return values (a0-1)\n\tx12-x17:\targuments (a2-7)\n\tx28-31:\t temporaries (t3-6)\n\tpc:\tprogram counter (pc)\n\n    ==> U-Boot will use gp to hold a pointer to the global data\n\nSystem Initialization:\n----------------------\n\nIn the reset configuration, U-Boot starts at the reset entry point\n(on most PowerPC systems at address 0x00000100). Because of the reset\nconfiguration for CS0# this is a mirror of the on board Flash memory.\nTo be able to re-map memory U-Boot then jumps to its link address.\nTo be able to implement the initialization code in C, a (small!)\ninitial stack is set up in the internal Dual Ported RAM (in case CPUs\nwhich provide such a feature like), or in a locked part of the data\ncache. After that, U-Boot initializes the CPU core, the caches and\nthe SIU.\n\nNext, all (potentially) available memory banks are mapped using a\npreliminary mapping. For example, we put them on 512 MB boundaries\n(multiples of 0x20000000: SDRAM on 0x00000000 and 0x20000000, Flash\non 0x40000000 and 0x60000000, SRAM on 0x80000000). Then UPM A is\nprogrammed for SDRAM access. Using the temporary configuration, a\nsimple memory test is run that determines the size of the SDRAM\nbanks.\n\nWhen there is more than one SDRAM bank, and the banks are of\ndifferent size, the largest is mapped first. For equal size, the first\nbank (CS2#) is mapped first. The first mapping is always for address\n0x00000000, with any additional banks following immediately to create\ncontiguous memory starting from 0.\n\nThen, the monitor installs itself at the upper end of the SDRAM area\nand allocates memory for use by malloc() and for the global Board\nInfo data; also, the exception vector code is copied to the low RAM\npages, and the final stack is set up.\n\nOnly after this relocation will you have a \"normal\" C environment;\nuntil that you are restricted in several ways, mostly because you are\nrunning from ROM, and because the code will have to be relocated to a\nnew address in RAM.\n\n\nContributing\n============\n\nThe U-Boot projects depends on contributions from the user community.\nIf you want to participate, please, have a look at the 'General'\nsection of https://docs.u-boot.org/en/latest/develop/index.html\nwhere we describe coding standards and the patch submission process.\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "arch",
          "type": "tree",
          "content": null
        },
        {
          "name": "board",
          "type": "tree",
          "content": null
        },
        {
          "name": "boot",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.mk",
          "type": "blob",
          "size": 2.12890625,
          "content": "# SPDX-License-Identifier: GPL-2.0+\n#\n# (C) Copyright 2000-2013\n# Wolfgang Denk, DENX Software Engineering, wd@denx.de.\n#########################################################################\n\n# This file is included from ./Makefile and spl/Makefile.\n# Clean the state to avoid the same flags added twice.\n#\n# (Tegra needs different flags for SPL.\n#  That's the reason why this file must be included from spl/Makefile too.\n#  If we did not have Tegra SoCs, build system would be much simpler...)\nPLATFORM_RELFLAGS :=\nPLATFORM_CPPFLAGS :=\nLDFLAGS_FINAL :=\nLDFLAGS_STANDALONE :=\nOBJCOPYFLAGS :=\n# clear VENDOR for tcsh\nVENDOR :=\n#########################################################################\n\nARCH := $(CONFIG_SYS_ARCH:\"%\"=%)\nCPU := $(CONFIG_SYS_CPU:\"%\"=%)\nifdef CONFIG_XPL_BUILD\nifdef CONFIG_ARCH_TEGRA\nCPU := arm720t\nendif\nendif\nBOARD := $(CONFIG_SYS_BOARD:\"%\"=%)\nifneq ($(CONFIG_SYS_VENDOR),)\nVENDOR := $(CONFIG_SYS_VENDOR:\"%\"=%)\nendif\nifneq ($(CONFIG_SYS_SOC),)\nSOC := $(CONFIG_SYS_SOC:\"%\"=%)\nendif\n\n# Some architecture config.mk files need to know what CPUDIR is set to,\n# so calculate CPUDIR before including ARCH/SOC/CPU config.mk files.\n# Check if arch/$ARCH/cpu/$CPU exists, otherwise assume arch/$ARCH/cpu contains\n# CPU-specific code.\nCPUDIR=arch/$(ARCH)/cpu$(if $(CPU),/$(CPU),)\n\nsinclude $(srctree)/arch/$(ARCH)/config.mk\t# include architecture dependend rules\nsinclude $(srctree)/$(CPUDIR)/config.mk\t\t# include  CPU\tspecific rules\n\nifdef\tSOC\nsinclude $(srctree)/$(CPUDIR)/$(SOC)/config.mk\t# include  SoC\tspecific rules\nendif\nifneq ($(BOARD),)\nifdef\tVENDOR\nBOARDDIR = $(VENDOR)/$(BOARD)\nENVDIR=${vendor}/env\nelse\nBOARDDIR = $(BOARD)\nENVDIR=${board}/env\nendif\nendif\nifdef\tBOARD\nsinclude $(srctree)/board/$(BOARDDIR)/config.mk\t# include board specific rules\nendif\n\nifdef FTRACE\nPLATFORM_CPPFLAGS += -finstrument-functions -DFTRACE\nendif\n\n#########################################################################\n\nRELFLAGS := $(PLATFORM_RELFLAGS)\n\nPLATFORM_CPPFLAGS += $(RELFLAGS)\nPLATFORM_CPPFLAGS += -pipe\n\nLDFLAGS_FINAL += -Bstatic\n\nexport PLATFORM_CPPFLAGS\nexport RELFLAGS\nexport LDFLAGS_FINAL\nexport LDFLAGS_STANDALONE\nexport CONFIG_STANDALONE_LOAD_ADDR\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "disk",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "drivers",
          "type": "tree",
          "content": null
        },
        {
          "name": "dts",
          "type": "tree",
          "content": null
        },
        {
          "name": "env",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "net",
          "type": "tree",
          "content": null
        },
        {
          "name": "post",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}