{
  "metadata": {
    "timestamp": 1736710046827,
    "page": 661,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "HansKristian-Work/vkd3d-proton",
      "stars": 1983,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0908203125,
          "content": "build\nbuild.*\nvkd3d-proton-*.tar.zst\nvkd3d-proton-*/\n/profiles/vulkan\n/profiles/profile-test\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.35546875,
          "content": "[submodule \"subprojects/dxil-spirv\"]\n\tpath = subprojects/dxil-spirv\n\turl = https://github.com/HansKristian-Work/dxil-spirv\n[submodule \"khronos/Vulkan-Headers\"]\n\tpath = khronos/Vulkan-Headers\n\turl = https://github.com/KhronosGroup/Vulkan-Headers\n[submodule \"khronos/SPIRV-Headers\"]\n\tpath = khronos/SPIRV-Headers\n\turl = https://github.com/KhronosGroup/SPIRV-Headers\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.1533203125,
          "content": "Conor McCarthy <cmccarthy@codeweavers.com>\nIvan Fedorov <ifedorov@nvidia.com>\nJames Beddek <telans@protonmail.com>\nRoshan Chaudhari <rochaudhari@nvidia.com>\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.486328125,
          "content": "Alexander Gabello\nAlexandre Julliard\nAndrew Eikum\nArkadiusz Hiler\nBiswapriyo Nath\nChip Davis\nConor McCarthy\nDanylo Piliaiev\nDavid Gow\nDavid McCloskey\nDerek Lesho\nFabian Bornschein\nGeorg Lehmann\nHans-Kristian Arntzen\nHenri Verbeet\nIvan Fedorov\nJactry Zeng\nJames Beddek\nJens Peters\nJoshua Ashton\nJózef Kucia\nJuuso Alasuutari\nKrzysztof Bogacki\nPaul Gofman\nPhilip Rebohle\nRémi Bernon\nRobin Kertels\nRodrigo Locatti\nRoshan Chaudhari\nSamuel Pitoiset\nSveinar Søpler\nSven Hesse\nThomas Crider\nZhiyi Zhang\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 46.978515625,
          "content": "# Change Log\n\n## 2.14.1\n\nThis is a bug-fix release which resolves some regressions introduced in 2.14.\n\n- Fix a crash on start-up which affected GPUs without sparse support. E.g. Intel iGPU or Turnip.\n  Crash could happen even if that GPU was the secondary GPU on the system.\n- Fix a memory allocation issue affecting NVK.\n- Fix a CPU performance regression issue affecting Horizon Zero Dawn Remastered on NVIDIA GPUs.\n  This fix might improve CPU performance in other games too, but unverified.\n- Not a regression fix, but add a `no_upload_hvv` workaround for Arma Reforger to workaround weird asset loading behavior.\n\n## 2.14\n\nRolls up the usual collection of new features, performance improvements, bug fixes and the copious amount of game workarounds,\njust in time for the holidays.\n\n### Features\n\n- Implement DXGI frame statistics (exposed by DXVK DXGI).\n- Implement a global frame rate limiter (see `VKD3D_FRAME_RATE` or `DXVK_FRAME_RATE`).\n  Also improves behavior of presentation with swap interval > 1 since we use frame limiter instead\n  of duplicated presents now. Also allows support for full-screen frame rate targets in DXGI which normally would imply a mode change.\n- Implement support for planar video formats such as NV12.\n- Implement D24 depth bias correctly now on AMD when `VK_EXT_depth_bias_control` is supported.\n- Expose a new command interop interface that allows e.g. dxvk-nvapi to implement DLSS3 frame generation.\n- Use VK_KHR_compute_shader_derivatives when available.\n- Use VK_EXT_device_generated_commands when available. Expose execute indirect tier 1.1.\n- Implement GPU upload heap from latest AgilitySDKs. Allows explicit control over ReBAR instead of heuristic based hacks in games that use the new API.\n- Implement ID3DDestructionNotifier. Fixes some particular games that expect this to be supported.\n\n### Performance\n\n- Reduce some VRAM bloat on RDNA2 and 3 GPUs when `VK_MESA_image_alignment_control` is exposed.\n- Improve CPU overhead for games that query swapchain format support over and over.\n- Remove old heuristic that preferred 2 frames of latency depending on BufferCount used.\n  The default on DXGI is 3, and using 2 caused some performance issues in various games with GPU starvation,\n  especially on Deck. `VKD3D_SWAPCHAIN_LATENCY_FRAMES` is still available as an override to force a tighter default.\n- Rewrite queue submission logic to deal better with difficult submission patterns such as FSR3 3.1 Frame Generation.\n  On implementations with only one graphics queue, vkd3d-proton will now attempt to do basic software scheduling of GPU work.\n  This may regress GPU performance in some other cases and `VKD3D_CONFIG=no_staggered_submit` is a way to disable this code path.\n  One particularly big improvement is FF XVI on RADV with FSR 3 frame-gen, with almost doubled performance in some cases.\n  We are still awaiting a proper kernel-level fix for this problem to be fully resolved.\n- Rewrite queue submission logic to use fewer \"dummy\" wait/signal submissions.\n  Works around pathological CPU overhead in amdgpu taking 20ms+ to submit work in some cases.\n- Rewrite queue submission logic for sparse updates to be more efficient.\n\n### Fixes and workarounds\n\n- Rework various multi-sampling queries to be more spec correct.\n- Workaround bugged MSAA behavior in World of Warcraft.\n- Workaround buggy/questionable use of ID3D12PipelineLibrary in FF XVI.\n- Always use native 16-bit integers for min16int. Fixes some real-world bugs where shaders expect min16int is always implemented as 16-bit.\n- Workaround game bug leading to GPU hang in Dragon Age: Veilguard on RADV.\n- Always emit proper floating-point environment modes in DXBC shaders. Fixes glitched eyes in Dragon Age: Veilguard on NV.\n- Fix potential use-after-free bug for some sparse resource update cases.\n- Correctly validate when application attempts to allocate a too large descriptor heap.\n  Fixes Stalker 2 entering into undefined behavior.\n- A lot of misc fixes in dxil-spirv as usual.\n- Workaround broken amdgpu zerovram behavior on 6.10+ kernels. Fixes random extreme glitchiness in Helldivers 2 on AMD.\n- Workaround NV issue which lead to GPU hang when loading a save file in Star Wars: Outlaws.\n- Fix copying between BC <-> RGBA images in some cases.\n- Add workaround for a game bug in The First Descendant which lead to broken cubemap reflections in some cases.\n- Workaround Skull & Bones crashing on startup on NV GPUs by disabling Reflex support.\n- Workaround Hunt: Showdown missing precise qualifiers on vertex shaders, leading to glitched rendering.\n- Workaround poor CPU performance in Red Dead Redemption.\n\n### Misc / Debug\n\n- Add support for instruction_qa_checks. For deep debug, allows us to be notified when NaNs and Infs are generated in shaders.\n  For internal QA use.\n- Add fine-grained control of QA behavior on a per-shader basis. For narrowing down issues.\n- Remove a bunch of old and obsolete workarounds for NV drivers. New cutoff is 535 series.\n- Bump exposed SDKVersion to 614 to match latest stable AgilitySDK.\n- Add an optional code path to support DXBC via the official dxilconv library.\n  This code is not enabled in release builds,\n  and is currently only intended as a path to take advantage of QA instrumentation for DXBC shaders.\n\n## 2.13\n\n### Features\n\n- Implement Shader Model 6.8 min-spec\n  - `SV_StartInstanceLocation`\n  - `SV_StartVertexLocation`\n  - WaveSize range\n  - Implement Vulkan texturing catch-up features (esoteric comparison sampling functions)\n- Implement interop for OpenVR / OpenXR on Proton\n- Correctly support `NULL` index buffers with `VK_KHR_maintenance6`.\n- Implement `VK_MESA_image_alignment_control`. Reduces memory bloat on AMD cards in particular.\n\n### Fixes\n\n- Reimplement `VK_NV_low_latency2` to fix some issues with heavy stuttering caused by non-monotonic frame IDs.\n  Relies on a more recent dxvk-nvapi which can paper over API design issues in Reflex API.\n  Requires a more recent NVIDIA driver which fixes some bugs exposed in this new code.\n  On older NVIDIA drivers, it should *run*, but low-latency will not kick in as expected.\n- Explicitly disable variable-rate shading when depth-stencil is written in shader.\n  Fixes glitched hair rendering in Hellblade 2.\n- Correctly expose MSAA features for depth-stencil. Fixes Arma Reforger.\n- Fix bugs in MSAA resolve implementation when dealing with custom resolve formats. Fixes Arma Reforger.\n- Fix validation error in internal query resolve shader.\n- Fix some bugs in wave-ops where helper lanes participated where they were not supposed to.\n  Fixes some WaveMatch / WaveMultiPrefix use-cases in the wild.\n- Various dxil-spirv fixes to fix invalid control-flow as always.\n\n### Performance\n\n- Tweak how we opt-in to ReBAR for UPLOAD heaps. Now, only > 8 GB cards will get it.\n  On 8 GB cards, we were regularly hitting the upper limits of what the GPU could hold in VRAM,\n  and using ReBAR would be detrimental to performance since there was risk of more important\n  memory being demoted to system memory. Works well together with `VK_MESA_image_alignment_control`\n  to free up significant amounts of VRAM. Performance gains from ReBAR on 8 GB were also found to be minimal\n  compared to the larger GPUs since we quickly exhausted the limited 512 MiB budget anyway.\n- Sub-allocate small image heaps. Avoids heavy stutter in Ghost of Tsushima on desktop.\n  (Steam Deck code path does not seem to use small heaps to begin with).\n- Improve performance with ROV when used with more complicated shader code patterns.\n\n### Workarounds\n\n- Implement a crude workaround for depth-stencil sparse and MSAA sparse.\n  - Just allocates a committed resource instead. Not correct, but good enough band-aid.\n  - Allows SottR to run on RADV.\n- Disable NV_dgcc on Halo Infinite on NV drivers.\n- Workaround a missing barrier in AC: Mirage causing random corrupt geometry.\n\n### Misc\n\n- Split vkd3d-proton shader cache up by .exe name when using a unified directory with `VKD3D_SHADER_CACHE_PATH`.\n- Implement `VK_EXT_device_address_binding_report`.\n\n## 2.12\n\n### Features\n\n- Implement support for NVIDIA Reflex through `VK_NV_low_latency2`. Thanks to NVIDIA for contributing implementation\n- Implement D3D12 render pass API (tier 0)\n- Implement ID3D12DeviceRemovedExtendedDataSettings stubs. Fixes some games that rely on this existing\n- Implement `VK_EXT_device_fault`. Makes it possible to grab fault information and vendor binary if supported\n- Implement `VK_EXT_swapchain_maintenance1`\n  - Allows seamless transition between V-Sync and tearing present modes without stutter\n  - Implemented on both Mesa and NV drivers\n- Expose Shader Model 6.7 by default if\n  `VK_KHR_shader_maximal_reconvergence` and `VK_KHR_shader_quad_control` are supported\n- Add optimized descriptor copy path on Intel Arc GPUs that support `VK_EXT_descriptor_buffer`\n- Implement fallback for compute shader derivatives on NVIDIA Pascal and older GPUs.\n  Allows exposing Shader Model 6.7 by default on Pascal as well (albeit with some known cases where it does not work).\n  The workaround is expected to work with any known use of SM 6.6 compute derivatives in the wild\n\n### Fixes\n\n- Fix Atlas Fallen black screen due to edge case with MinLODClamp\n- Correctly disable alpha-to-coverage if sampler mask is exported\n- Fix format feature reports for `DXGI_FORMAT_UNKNOWN`\n- Relax root signature compatibility rules when compiling Ray Tracing pipelines.\n  Fixes GPU hang on NV in Warhammer: Darktide\n- Fix GPU hang on NV in UE5 Lyra demo\n- Explicitly validate stage IO signatures in PSO creation similar to native D3D12 runtime.\n  Fixes some scenarios where a game attempts to create an invalid pipeline that should have failed creation\n  on native D3D12\n\n### Workarounds\n\n- Workaround crash in Resident Evil 4 RT mode when tessellation is enabled\n- Workaround mesh shader glitches on NVIDIA in several UE5 titles\n- Workaround GPU hang on NVIDIA in World of Warcraft when MSAA is enabled\n- Disable RT by default in Persona 3 Reload on Deck\n\n### Performance\n\n- Implement `VK_NV_raw_access_chains`. Significantly improves GPU performance on NV GPUs in some games.\n  Games using DXBC instead of DXIL are expected to see more improvements.\n  Not all games are expected to see an uplift\n- Fix extremely poor GPU performance in some locations in Persona 3 Reload\n\n### Debug\n\n- Add support for `VKD3D_QUEUE_PROFILE`, a simple system profiling method\n  - Includes `VK_NV_low_latency2` support to debug NVIDIA Reflex sleeps\n- Root signature blobs are also dumped when dumping shaders\n  - A simple CLI tool to inspect the root-sig blobs is included in `programs/`\n- Misc improvements to breadcrumbs, debug ring, etc\n- Pipeline creation failure now dumps PSO creation commands in log\n\n## 2.11.1\n\nThis release is a minor bug-fix release before the holidays.\n\n- Implement COLOR -> STENCIL fallback copy on NVIDIA\n- Implement SM 6.6 ResourceDescriptorHeap[] + UAV counters correctly on RADV\n- Fix bugged implementation of DXBC resinfo instruction, affecting Avatar: Frontiers of Pandora\n- Fix memory type used for DGC preprocess memory on NVIDIA (~5% performance, YMMV)\n- Fix crash in Callisto Protocol when booting game with DXR support\n \n#### More complete MSAA resolve implementation\n\n- Add depth-stencil resolve\n- Support typeless formats\n- Add MIN/MAX resolve modes\n- Implement missing code paths on NVIDIA\n \n#### Workarounds\n\n- Update workaround for GPU hang in CP77 when using DXR for patch 2.1.\n- Remove workaround for NO_DGCC in Halo Infinite on NVIDIA.\n- Workaround game bug in Pioneers of Pagonia causing GPU hangs on RADV.\n\n## 2.11\n\nThis release rolls up a bunch of features, perf improvements and bug fixes / workarounds as usual.\n\n### Features\n\n#### DXR enabled by default\n\n`VKD3D_CONFIG=dxr` is default now, and no longer needed.\nThere are some special cases where DXR is not enabled by default. The only such current example is\n\"Hellblade: Senua's Sacrifice\" on Deck which force-enables DXR if it is supported, even on Deck.\nNew semantics are:\n\n- `dxr`: Force-enable DXR, even when it is considered unsafe\n- `nodxr`: Disable DXR\n- `dxr11`: Removed. `dxr` already implied DXR 1.1 anyway\n\n#### Sampler feedback\n\nThis feature was the last feature required for FL 12.2 and is implemented through emulation.\nAs demonstrated in the [implementation docs](https://github.com/HansKristian-Work/vkd3d-proton/blob/master/docs/sampler_feedback.md), all\nnative implementations of this feature are fundamentally broken in some way.\nThere's also no known game that ships requiring this feature, so we just consider this a checkbox feature.\n\n#### DX Ultimate (FL 12.2) now exposed by default\n\nOn RDNA2+ and Turing+ we can finally expose the DX Ultimate feature set!\n\n#### Misc\n\n- Implement a bunch of missing \"Vulkan-on-D3D12\" features\n  - IndependentFrontAndBackStencilRefMaskSupported\n  - TriangleFanSupported\n  - DynamicIndexBufferStripCutSupported\n  - DynamicDepthBiasSupported\n  - NonNormalizedCoordinateSamplersSupported\n  - MismatchingOutputDimensionsSupported\n  - PointSamplingAddressesNeverRoundUp\n  - RasterizerDesc2Supported\n    - Explicit line rasterization mode\n  - NarrowQuadrilateralLinesSupported\n  - AnisoFilterWithPointMipSupported\n- Implement missing MSAD instruction in DXIL, allowing FSR3 to run\n- Implement some esoteric DXR features\n  - Implement support for multiple mismatching global root signatures in DXR\n    - Fixes crash in Battlefield V\n  - Implement support for LOCAL_ON_EXTERNAL dependencies in DXR\n    - Fixes DXR in Warhammer: Darktide\n- Implement support for ExecuteIndirect + Mesh shaders with state changes\n  - Currently unused by games\n\n### Performance\n\n- Improve performance of NV_device_generated_commands and NV_device_generated_commands_compute by\n  reordering and batching command preprocessing\n  - We have observed 15% FPS gains in Halo Infinite on RADV\n  - 1-2% in Starfield in some test locations\n  - Needs pending Mesa work to land to take advantage of this improvement\n- Tune memory allocation patterns for DGC preprocess buffers\n  - Avoids a lot of allocation churn\n  - Greatly reduces CPU overhead on NV\n\n### Workarounds\n\n- Work around RADV bug causing GPU hang in RE4: Separate Ways DLC\n- Work around RADV bug causing GPU hang in Lords of the Fallen\n- Work around Witcher 3 bug causing broken shadows and GPU hangs when enabling DXR\n- Work around Cyberpunk 2077 bug when RT is enabled, where game would cause spurious GPU hangs due to accessing descriptor heap out of bounds\n- Work around Windjammers 2 bug causing random crashes on startup\n- Add support for VK_EXT_image_compression_control to allow for more fine-grained workarounds for broken games running on RADV\n- Enable NV_device_generated_commands_compute on latest NV beta drivers\n  - 545.x drivers are still disabled until a fix can be confirmed on shipping drivers\n- Remove CURB_MEMORY_PSO_CACHE workaround on Mesa 23.2+\n  - Should reduce overhead in PSO creation\n\n### Fixes\n\n- Misc dxil-spirv changes to fix various bugs in game shaders as usual\n- Fix Jurassic World Evolution 2 crashing when enabling DXR\n- Fix some deprecation warnings in Meson build system\n  - Some submodule locations moved, which may cause minor disruption\n\n## 2.10\n\nThis release rolls up a ton of bug fixes, game and driver workarounds, and other improvements.\n\n### Features\n\n#### DirectStorage MetaCommands\n\nWe can now make use of `NV_memory_decompression` to implement\nGPU accelerated GDeflate compression in DirectStorage.\nThis is demonstrated to work in Ratchet & Clank: Rift Apart.\n\nWe also worked around an NV driver bug when using the fallback GDeflate shader.\nThe fallback works on RADV.\n\n#### Enhanced Barriers\n\nNOTE: This isn't all that well tested because there are no games shipping with this yet to our knowledge.\n\n#### Device generated commands for compute\n\nWith `NV_device_generated_commands_compute` we can efficiently implement\nStarfield's use of ExecuteIndirect which hammers multi-dispatch COMPUTE + root parameter changes.\nPreviously, we would rely on a very slow workaround.\n\nNOTE: This feature is currently only enabled on RADV due to driver issues.\n\n#### Misc\n\n- Support Root Signature version 1.2\n- Implement Shader Model 6.7\n  - Includes all SM 6.7 features like AdvancedTextureOps, WaveOpsIncludeHelperLanes\n  - Caveat: Technically not Vulkan spec compliant implementation, but works fine on at least NV and RADV. Currently implemented as an opt-in option for now in case some game relies on it to work\n- Implement CreateSampler2\n- Expose inverted viewport / height feature\n- Implement RelaxedFormatCasting feature from Enhanced Barriers\n- Implement support for adjacency topologies\n- Support A8_UNORM format properly by using `VK_KHR_maintenance5`, allowing A8_UNORM UAVs to work correctly\n- Handle range checked index buffers correctly with `VK_KHR_maintenance5`\n\n#### New extension use\n\n- VK_EXT_dynamic_rendering_unused_attachments\n- VK_KHR_maintenance5\n- VK_NV_device_generated_commands_compute\n\n### Performance\n\n- Batch acceleration structure builds. Massively improves build performance on at least RADV.\n- Massively improve ExecuteIndirect performance when using COMPUTE + root parameter changes when `VK_NV_device_generated_commands_compute` is enabled.\n\n### Fixes\n\n- Fix root signature creation from DXIL library target (DXR) blobs\n- Fix some dual source blending PSOs scenarios. Fixes Star Wars Battlefront II\n- Implement wave operations in pixel shaders more strictly according to D3D12 rules\n- Fix spurious hangs in Ashes of Singularity when using shared fences and wait-before-signal\n- Fix PSO caching bug in mesh shaders. Fixes mesh shaders in Unreal Engine 5\n- Fix udiv remainder in DXBC, which fixed some Xenia bugs\n- Fix query heap tracking bug that was exposed by NV Streamline\n- Various DXIL -> SPIR-V fixes as usual\n- Rewrote descriptor set layouts to be more robust against application bugs\n  - Motivated by Armored Core VI bug (see below)\n  - Native D3D12 drivers are also robust against these application bugs :(\n\n### Workarounds\n\n- Workaround bad ReBAR performance in Age of Wonders 4\n- Remove workaround for `KHR_present_wait` on NV 535+ drivers\n- Workaround Starfield memory corruption issue where it does not correctly query for 4 KiB alignment\n- Disable ReBAR usage on Halo Infinite to workaround very poor CPU performance\n- Workaround Street Fighter 6 bug causing spurious GPU hangs\n  - Also appears to have worked around GPU hangs in Resident Evil 2\n- Workaround Armored Core VI bug causing GPU hang on Balteus fight in chapter 1\n- Workaround \"firefly\" glitches in Resident Evil 4 caused by dubious min16float usage\n- Workaround \"firefly\" glitches in Monster Hunter Rise caused by dubious shader requiring particular precise math\n- Workaround Unreal Engine 5 breaking if mesh shaders are exposed, but not barycentrics\n- Workaround NV driver bug with TIMESTAMP query heaps that could cause spurious GPU hangs\n- Workaround broken CFG code generation in Xenia's DXBC emitter\n\n## 2.9\n\nThis release rolls up various development happening over the last months.\n\n### d3d12core.dll split\n\nSome games started assuming that the DLLs were laid out similar to AgilitySDK, where\nd3d12.dll is just a loader, and d3d12core.dll contains the real implementation.\nvkd3d-proton now implements this split as well. It is possible that various scripts must be updated\nto accomodate both DLLs now. Once d3d12.dll is installed in a prefix,\nonly d3d12core.dll needs to be updated, as d3d12.dll is just a trivial shim either way.\n\n### Performance improvements\n\n- Greatly reduce system memory requirements on the first run of an application.\n  SPIR-V code was held in memory \"just in case\" it had to be recompiled later, but this is no longer the case.\n- Use `VK_EXT_graphics_pipeline_libraries` to avoid shader compilation stutter in some extreme edge cases.\n- Improve performance with certain bad occlusion query patterns in e.g. Elden Ring.\n- Improve CPU performance of `VK_EXT_descriptor_buffer` even further with vendor-specific \"ultra-fast\" paths.\n  - Our microbenchmark for single descriptor copies are now significantly faster than native D3D12 drivers on both RADV and NVIDIA.\n  - Intel performance numbers are TBD, but we expect a win there as well.\n- Improve VRAM oversubscription behavior when\n  `VK_EXT_pageable_device_local_memory` is supported. (NVIDIA contribution, thanks!)\n  This allows us to implement `Evict` and `MakeResident` APIs in a useful way.\n  `VK_EXT_memory_priority` is also used for static priorities as a fallback.\n\n### Features\n\n- Add `VK_EXT_image_sliced_view_of_3d` to support sliced 3D UAVs.\n- Improve DXR 1.1 support with `VK_EXT_pipeline_library_group_handles`.\n- Implement `VK_EXT_fragment_shader_interlock`. Completes FL 12.1.\n- Move to Vulkan 1.3 as minimum version.\n- D3D11on12 interoperability interfaces are now supported.\n  It is compatible with DXVK 2.2, which actually implements 11on12.\n\n### Legacy swapchain removal\n\nThe old swapchain implementation is now gone.\nDXVK 2.1 is required as we now share common code.\nThis means that there is no fallback for pre-2.1 DXVK versions or Wine DXGI anymore.\n\n#### Native Linux swapchain support\n\nThe new swapchain can support Linux native surfaces.\nThe demo applications in `demos/` with functional swapchain now builds on Linux as well.\n\n### Driver workarounds\n\n- `KHR_present_wait` is currently disabled on NVIDIA drivers due to a bug that would occur on some PRIME setups.\n  This is supposed to be fixed in the latest beta drivers, and this workaround will eventually be removed\n  when we have a confirmed major version that fixes the issue.\n- Workaround RADV bug causing memory bloat in shader caches. Can save several 100s of MBs of memory,\n  which is important on certain memory hungry titles to avoid instability.\n- Workaround NVIDIA bug with concurrent queue submissions using timeline semaphores.\n  Fixed a bunch of inexplicable `Xid 109 CTX_SWITCH_TIMEOUT` errors in many different games.\n\n### Bugfixes and game workarounds\n\nVarious bugfixes for games as usual. Listing individual games is becoming impractical at this point,\nand it's best to refer to other sources for compatibility information with specific games.\nAs usual, a bunch of fixes in dxil-spirv to fix shader bugs.\n\n### Misc\n\n- On Wine, use `winevulkan.dll` rather than `vulkan-1.dll` if available.\n  Works around some games that hook Vulkan despite using D3D12.\n- Improve compatibility with games relying on certain AgilitySDK details.\n- Improve build system compatibility with different `widl` versions.\n- `VKD3D_CONFIG=dxr` now enables DXR 1.1 as well. `dxr11` is kept for compat.\n- Fix HDR Metadata MinLuminance value.\n- Add `VKD3D_LIMIT_TESS_FACTORS` to work around excessive tessellation. Enabled for Wo Long.\n- (Developers) Improve debugging support with more detailed breadcrumb information.\n- (Developers) Insert more actionable information in captures and logs.\n- (Developers) Log directly to Wine when available. Makes `PROTON_LOG=1` more reliable.\n- (Developers) Set thread names on Win32 build as well.\n- (Developers) Use native Linux calling convention instead of `ms_abi`.\n\n## 2.8\n\nThis release rolls up some significant new developments before the holidays.\n\n## VK_EXT_descriptor_buffer support\n\nThis extension is significant in that it removes a ton of CPU overhead.\nWe already had most of this in place on RADV and Steam Deck,\nbut this will allow NVIDIA, Intel, Turnip, and other AMD driver implementations to hit the same optimal code paths.\nGPU bound performance increases slightly since we can also remove some shader code that was required to workaround lack of descriptor buffers.\n\n### New extension requirements\n\nTo support descriptor buffers in the code base, these features are now required instead of optional.\nNote that these features are widely supported already and is not expected to cause any problems.\nIf an implementation could support v2.7, it will support v2.8.\n\n- `VK_KHR_buffer_device_address`\n- `VK_KHR_push_descriptor`\n\n## Rewritten support for host accessible images\n\nThe entire API feature was rewritten from scratch to support more implementations and edge cases without\na lot of per-application hacks and workarounds.\nAs the most extreme example of weird API usage, Guardians of the Galaxy should (finally) run well on NVIDIA.\n\n## Rewritten swap chain\n\nTo most users, this change should be transparent.\n\n- Allow more precise control on latency and frame pacing with `VK_KHR_present_wait`.\n  - mesa-git supports this along with NVIDIA.\n  - `VKD3D_SWAPCHAIN_LATENCY_FRAMES=n` allows user to force a specific amount of latency.\n  - Implementation of DXGI latency fences is now correct.\n- Reduce CPU overhead on the main thread that presents to swap chain.\n- Fixes a spurious hang in Hitman III where game relies on asynchronous present in order to not lock up.\n- Win32 specific DXGI code is handled by DXVK. A DXVK build from Experimental or later is required for this to work.\n  This allows a native Linux implementation of vkd3d-proton, including swap chain.\n- When `VK_KHR_present_wait` is not supported, behavior should be 1:1 with old implementation.\n\nNOTE: The old swapchain implementation is still in the repository, and is expected to be removed in the next release.\nFor now, `VKD3D_CONFIG=swapchain_legacy` can be used to triage any potential issues with the new one.\n\nNOTE: A driver crash was observed on NVIDIA 525.x drivers when running in some PRIME configurations.\nFor now, we disable use of present_wait on these drivers.\n\n### Fixes and workarounds\n\n- Workaround GPU hangs in Spiderman Remastered: Miles Morales (same issue as the original).\n- Fix rendering bug with gun damage in Borderlands 3 on RADV.\n- Refactor how resizable BAR is used. GPUs with 4 GiB and lower will no longer attempt to use resizable BAR,\n  which can avoid some out-of-memory situations.\n- Fix GPU hang in Age of Empires IV.\n- Fix some minor issues in mesh shader implementation.\n- Fix some issues preventing RE: Village from booting on Arc.\n- Some last minute frenzied fixes for Witcher 3 next-gen update.\n  - All features except RT appears to work on RADV.\n  - Hairworks is known to crash GPU on NVIDIA. More investigation is needed to root cause.\n  - Some RT effects work on NVIDIA, others don't:\n    - GI is reported to work.\n    - AO crashes GPU. More investigation is needed to root cause.\n\n#### Implement minor missing D3D12 features\n\nAn obscure feature was stubbed out and forgotten until now.\n`ID3D12Device1::SetEventOnMultipleFenceCompletion()` is now implemented.\n\nAlso, implement SetEventOn(Multiple)FenceCompletion for shared D3D12 fences.\nFixes a regression in Gears 5 causing lockup on boot.\n\n## 2.7\n\nThis release rolls up a massive amount of work since the Steam Deck launch in late February\nwith mostly features and fixes.\n\n### Heightened driver requirements\n\nNewer extensions are now required.\n\n- `VK_KHR_dynamic_rendering`\n- `VK_EXT_extended_dynamic_state`\n- `VK_EXT_extended_dynamic_state2` (no optional features required)\n- `VK_KHR_maintenance4`\n\n`KHR_dynamic_rendering` in particular requires Mesa 22.0 or NVIDIA 510 series, which should have\npropagated to distributions a long time ago at this point.\n\nNOTE: Proton 7.0 stable series will stick to v2.6 to avoid the hard driver requirement bump.\nProton Experimental and any future stable beyond 7.0 will stick to v2.7 and later.\n\n`KHR_dynamic_rendering` fixes many previously unsolvable issues, but it required a rewrite,\nand it was deemed impractical to support both legacy and modern paths.\n\n### Improved pipeline cache\n\nv2.6 introduced support for pipeline libraries, but only for games which made correct use of the D3D12 API.\nTo improve the situation across the board,\nvkd3d-proton now implements an internal \"magic\" disk cache to enable SPIR-V caching for all games.\nIt is possible to disable the magic cache and let applications manage the ID3D12PipelineLibrary itself if desired.\n\nTo further reduce on-disk footprint of the magic cache, we also make use of `VK_EXT_shader_module_identifier`\nto reduce the vkd3d-proton cache by >95%, since there is no need to store actual SPIR-V data on-disk.\n\n### Optimizations\n\nMostly a lot of minor things this release.\n\n- Slightly improve GPU performance for depth render passes.\n- Improve GPU performance for certain floating-point images where UAV usage was enabled.\n- Improve GPU performance for certain use cases of WriteBufferImmediate().\n- Improve GPU performance for certain access patterns of root descriptors.\n- Improve GPU performance for back-to-back buffer-image copies.\n- Improve GPU performance when allocating large zero-cleared resources and heaps.\n- Misc things here and there to reduce overhead.\n\n### New D3D12 features\n\n#### Mesh shaders\n\n`VK_EXT_mesh_shader` is required for this. Directly compatible with D3D12.\n\n#### Advanced ExecuteIndirect\n\nUses `VK_NV_device_generated_commands`. Supported by both RADV and NVIDIA. Allows Halo Infinite to run.\n\n#### DXR 1.1\n\nImplement some missing features from DXR 1.1:\n\n- AddToStateObject()\n- ExecuteIndirect trace rays\n- Various complex RTPSO features\n- DXIL subobject parsing\n- Misc query features\n\nWith these fixes in place, e.g. Cyberpunk 2077 DXR works. `VK_KHR_raytracing_maintenance1` is required for some features.\n\nNOTE: `VKD3D_CONFIG=dxr11` is required to enable DXR 1.1 for now.\n\n#### Shared resources\n\nBasic shared resources and fences are now supported when running on Proton. Allows interop with DXVK.\nSpecial thanks to Derek Lesho (@Guy1524) for implementation.\n\n#### SV_Barycentrics\n\nSM 6.1 barycentrics are now exposed through `VK_KHR_fragment_shader_barycentric`.\n\n#### Preliminary HDR support\n\nvkd3d-proton can take advantage of HDR now, assuming the system itself supports it.\n\n### Game fixes and workarounds\n\n- Fix random GPU hangs in Hitman 3.\n- Fix crash in Redout 2.\n- Fix random GPU hang in F1 2021.\n- Fix random flicker in Guardians of the Galaxy.\n- Update some API checks required by latest AgilitySDK runtime features. Fix crash in F1 2022.\n- Add various workarounds for game bugs in Halo Infinite.\n- Add workaround for amdgpu kernel issue for certain games using imported host memory and multiple Vulkan devices.\n- Workaround glitched rendering in F1 2020 due to game bug.\n- Workaround certain games that violate placed resource API w.r.t. subresource initialization.\n  Spiderman Remastered and Lost Judgment are affected. More games will likely surface.\n\n### DXIL support\n\nCountless bug fixes for games released since last release. Too many to enumerate individually.\n\n### Misc\n\n- Improve compatibility with Intel ANV driver.\n- Improve correctness of GetFrameLatencyWaitableObject().\n- Add BLOB PIX decoding.\n- Improve stability when minimizing and alt-tabbing in and out of fullscreen in some games.\n- Preparation for MIT re-license is underway.\n\n### Stronger debugging facilities\n\n- For developers and power users, a breadcrumbs functionality is added to greatly aid GPU hang debugging.\n  Requires either `VK_AMD_buffer_marker` or `VK_NV_device_diagnostic_checkpoints`.\n- When capturing with RenderDoc, cached host memory is enabled by default to speed up capture and improve stability.\n- Improve shader replacement system ease-of-use.\n\n## 2.6\n\nIt has been a long while since 2.5, and this release rolls up a lot of fixes, features and optimizations.\n\n### Fixes\n\n- Fix black screen rendering bug in Horizon Zero Dawn after latest game updates.\n- Fix crashes on startup in Final Fantasy VII: Remake and Warframe.\n- Fix crashes in Guardians of the Galaxy when interacting with certain game objects.\n- Fix hang on game shutdown in Elden Ring.\n- Fix broken geometry rendering in Age of Empires: IV.\n\n### Optimization\n\n- Improve generated shader code for vectorized load-store operations in DXIL.\n- Greatly reduce CPU overhead for descriptor copy operations,\n  which is a key contributor to CPU overhead in D3D12.\n\n### Features\n\n#### Pipeline library rewrite\n\nSupport D3D12 pipeline libraries better where we can now also cache\ngenerated SPIR-V from DXBC/DXIL.\nMassively reduces subsequent load times in Monster Hunter: Rise,\nand helps other titles like Guardian of the Galaxy and Elden Ring.\nAlso lays the groundwork for internal driver caches down the line for games which do not use this API.\nAlso, deduplicates binary blobs for reduced disk size requirements.\n\n#### Shader models\n\nShader model 6.6 is now fully implemented. This includes support for:\n- ResourceDescriptorHeap[] direct access\n- 64-bit atomics\n- IsHelperLane()\n- Compute shader derivatives\n- WaveSize attribute\n- Packed math intrinsics\n\n#### Minor features\n\n- Handle API feature MinResourceLODClamp correctly if `VK_EXT_image_view_min_lod` is supported.\n- Expose CastFullyTypedFormat feature.\n- Expose some advanced shader features on Intel related to UAV formats (`VK_KHR_format_feature_flags2`).\n- Support COLOR -> STENCIL copies.\n\n### Workarounds\n\n- Workaround DEATHLOOP not emitting synchronization commands correctly. Fixes menu flicker on RADV.\n- Workaround quirky API usage in Elden Ring. Removes many kinds of stutter and chug when traversing the scenery.\n- Workaround certain environments failing to create Vulkan device if some `VK_NVX_*` extensions are enabled.\n- Workaround glitched foliage rendering in Horizon Zero Dawn after latest game updates.\n- Workaround some questionable UE4 shaders causing glitched rendering on RADV.\n\n### Note on future Vulkan driver requirements\n\n2.6 is expected to be the last vkd3d-proton release before we require some newer Vulkan extensions.\n`VK_KHR_dynamic_rendering` and `VK_EXT_extended_dynamic_state`\n(and likely `dynamic_state_2` as well) will be required.\n\n`VK_KHR_dynamic_rendering` in particular requires up-to-date drivers and the legacy render pass path\nwill be abandoned in favor of it. Supporting both paths at the same time is not practical.\nMoving to `VK_KHR_dynamic_rendering` allows us to fix some critical flaws with the legacy API\nwhich caused potential shader compilation stutters and extra CPU overhead.\n\n## 2.5\n\nThis is a release with a little bit of everything!\n\n### Features\n\n#### DXR progress\n\nDXR has seen significant work in the background.\n\n- DXR 1.1 is now experimentally exposed. It can be enabled with `VKD3D_CONFIG=dxr11`.\n  Note that DXR 1.1 cannot be fully implemented in `VK_KHR_ray_tracing`'s current form, in particular\n  DispatchRays() indirect is not compatible yet,\n  although we have not observed a game which requires this API feature.\n- DXR 1.1 inline raytracing support is fully implemented.\n- DXR 1.0 support is more or less feature complete.\n  Some weird edge cases remain, but will likely not be implemented unless required by a game.\n  `VKD3D_CONFIG=dxr` will eventually be dropped when it matures.\n\nSome new DXR games are starting to come alive, especially with DXR 1.1 enabled,\nbut there are significant bugs as well that we currently cannot easily debug.\nSome experimental results on NVIDIA:\n\n- **Control** - already worked\n- **DEATHLOOP** - appears to work correctly\n- **Cyberpunk 2077** - DXR can be enabled, but GPU timeouts\n- **World of Warcraft** - according to a user, it works, but we have not confirmed ourselves\n- **Metro Exodus: Enhanced Edition** -\n    gets ingame and appears to work? Not sure if it looks correct.\n    Heavy CPU stutter for some reason ...\n- **Metro Exodus** (original release) - GPU timeouts when enabling DXR\n- **Resident Evil: Village** - Appears to work, but the visual difference is subtle.\n\nIt's worth experimenting with these and others.\nDXR is incredibly complicated, so expect bugs.\nFrom here, DXR support is mostly a case of stamping out issues one by one.\n\n#### NVIDIA DLSS\n\nNVIDIA contributed integration APIs in vkd3d-proton which enables DLSS support in D3D12 titles in Proton.\nSee Proton documentation for how to enable NvAPI support.\n\n#### Shader models\n\nA fair bit of work went into DXIL translation support to catch up with native drivers.\n\n- Shader model 6.5 is exposed.\n  Shader model 6.6 should be straight forward once that becomes relevant.\n- Shader model 6.4 implementation takes advantage of `VK_KHR_shader_integer_dot_product` when supported.\n- Proper fallback for FP16 math on GPUs which do not expose native FP16 support (Polaris, Pascal).\n  Notably fixes AMD FSR shaders in Resident Evil: Village (and others).\n- Shader model 6.1 SV_Barycentric support implemented (NVIDIA only for now).\n- Support shader model 6.2 FP32 denorm control.\n\n### Performance\n\nResizable BAR can improve GPU performance about 10-15% in the best case, depends a lot on the game.\nHorizon Zero Dawn and Death Stranding in particular improve massively with this change.\n\nBy default, vkd3d-proton will now take advantage of PCI-e BAR memory types through heuristics\nas D3D12 does not expose direct support for resizable BAR, and native D3D12 drivers are known to use heuristics as well.\nWithout resizable BAR enabled in BIOS/vBIOS, we only get 256 MiB which can help performance,\nbut many games will improve performance even more\nwhen we are allowed to use more than that.\nThere is an upper limit for how much VRAM is dedicated to this purpose.\nWe also added `VKD3D_CONFIG=no_upload_hvv` to disable all uses of PCI-e BAR memory.\n\nOther performance improvements:\n\n- Avoid redundant descriptor update work in certain scenarios (NVIDIA contribution).\n- Minor tweaks here and there to reduce CPU overhead.\n\n### Fixes and workarounds\n\n- Fix behavior for swap chain presentation latency HANDLE. Fixes spurious deadlocks in some cases.\n- Fix many issues related to depth-stencil handling, which fixed various issues in DEATHLOOP, F1 2021, WRC 10.\n- Fix DIRT 5 rendering issues and crashes. Should be fully playable now.\n- Fix some Diablo II Resurrected rendering issues.\n- Workaround shader bugs in Psychonauts 2.\n- Workaround some Unreal Engine 4 shader bugs which multiple titles trigger.\n- Fix some stability issues when VRAM is exhausted on NVIDIA.\n- Fix CPU crash in boot-up sequence of Far Cry 6 (game is still kinda buggy though, but gets in-game).\n- Fix various bugs with host visible images. Fixes DEATHLOOP.\n- Fix various DXIL conversion bugs.\n- Add Invariant geometry workarounds for specific games which require it.\n- Fix how d3d12.dll exports symbols to be more in line with MSVC.\n- Fix some edge cases in bitfield instructions.\n- Work around extreme CPU memory bloat on the specific NVIDIA driver versions which had this bug.\n- Fix regression in Evil Genius 2: World Domination.\n- Fix crashes in Hitman 3.\n- Fix terrain rendering in Anno 1800.\n- Various correctness and crash fixes.\n\n## 2.4\n\nThis is a release which focuses on performance and bug-fixes.\n\n### Performance\n\n- Improve swapchain latency and frame pacing by up to one frame.\n- Optimize lookup of format info.\n- Avoid potential pipeline compilation stutter in certain scenarios.\n- Rewrite how we handle image layouts for color and depth-stencil targets.\n  Allows us to remove a lot of dumb\n  barriers giving significant GPU-bound performance improvements.\n  ~15%-20% GPU bound uplift in Horizon Zero Dawn,\n  ~10% in Death Stranding,\n  and 5%-10% improvements in many other titles.\n\n### Features\n\n- Enable support for sparse 3D textures (tiled resources tier 3).\n\n### Bug fixes and workarounds\n\n- Various bug fixes in DXIL.\n- Fix weird bug where sun would pop through walls in RE: Village.\n- Workaround game bug in Cyberpunk 2077 where certain locales would render a black screen.\n- Fix various bugs (in benchmark and in vkd3d-proton) allowing GravityMark to run.\n- Improve robustness against certain app bugs related to NULL descriptors.\n- Fix bug with constant FP64 vector handling in DXBC.\n- Fix bug where Cyberpunk 2077 inventory screen could spuriously hang GPU on RADV.\n- Add workaround for Necromunda: Hired Gun where character models would render random garbage on RADV.\n- Fix bug in Necromunda: Hired Gun causing random screen flicker.\n- Fix windowed mode tracking when leaving fullscreen. Fix Alt-Tab handling in Horizon Zero Dawn.\n- Temporary workaround for SRV ResourceMinLODClamp. Fix black ground rendering in DIRT 5.\n  The overbright HDR rendering in DIRT 5 sadly persists however :(\n- Implement fallback maximum swapchain latency correctly.\n\n### Development features\n\nVarious features which are useful for developers were added to aid debugging.\n\n- Descriptor QA can instrument shaders in runtime for GPU-assisted validation.\n  Performance is good enough (> 40 FPS) that games are actually playable in this mode.\n  See README for details.\n- Allow forcing off CONCURRENT queue, and using EXCLUSIVE queue.\n  Not valid, but can be useful as a speed hack on Polaris when `single_queue` is not an option\n  and for testing driver behavior differences.\n\n## 2.3.1\n\nThis is a minor bugfix release to address some issues solved shortly after the last release.\n\n### Fixes\n\n- Improved support for older Wine and Vulkan Loader versions.\n- Fix blocky shadows in Horizon Zero Dawn.\n- Fix the install script failing on Wine installs not built with upstream vkd3d.\n- Fix minor dxil translation issues.\n\n## 2.3\n\nThis release adds support for more D3D12 features and greatly improves GPU bound performance\nin many scenarios.\n\n### Features\n\n#### Early DXR 1.0 support\n\n`VK_KHR_raytracing` is used to enable cross-vendor ray-tracing support.\nThe implementation is WIP, but it is good enough to run some real content.\n\nAs of writing, only the NVIDIA driver works correctly.\nIt is expected AMD RDNA2 GPUs will work when working drivers are available\n(amdgpu-pro 21.10 is known to not work).\n\nGames which are expected to work include:\n- Control (appears to be fully working)\n- Ghostrunner (seems to work, not exhaustively tested)\n\nTo enable DXR support, `VKD3D_CONFIG=dxr %command%` should be used when launching game.\nCertain games may be unstable if DXR is enabled by default.\n\n#### Conservative rasterization\n\nFull support (tier 3) for conservative rasterization was added.\n\n#### Variable rate shading\n\nFull support (tier 2) for variable rate shading was added.\n\n#### Command list bundles\n\nAllows Kingdom Hearts remaster to get past the errors, unsure if game fully works yet.\n\n#### Write Watch and APITrace\n\nSupport for `D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH` has been added.\nThis means [APITraces](https://github.com/Joshua-Ashton/apitrace/releases) of titles can now be captured.\n\n### Performance\n\n- Improve GPU bound performance in RE2 by up to 20% on NVIDIA.\n- Enable async compute queues. Greatly improves GPU performance and frame pacing in many titles.\n  Horizon Zero Dawn and Death Stranding see exceptional gains with this fix,\n  due to how the engines work. GPU utilization should now reach ~100%.\n  For best results, AMD Navi+ GPUs are recommended, but Polaris and earlier still\n  see great results. It is possible to disable this path, if for whatever reason\n  multiple queues are causing issues. See README.\n- Optimize bindless constant buffer GPU-bound performance on NVIDIA if certain API code paths are used.\n- Optimize sparse binding CPU overhead.\n- `TRACE` logging calls are disabled by default on release builds.\n\n### Fixes and workarounds\n\n- Fix various DXIL bugs.\n- Be more robust against broken pipeline creation API calls.\n  Avoids driver crashes in Forza Horizon 4.\n- Workaround some buggy shaders in F1 2020.\n- Fix bugs if depth bounds test is used in certain ways.\n- Fix a read out-of-bounds in `UpdateTileMappings`.\n- Fix `SV_ClipDistance` and `SV_CullDistance` in Hull Shaders.\n\n## 2.2\n\nThis release is mostly a maintenance release which fixes bugs and regressions.\nIt also unblocks significant future feature development.\n\n### Workaround removals\n\n- Replace old `force_bindless_texel_buffer` workaround with\n  a more correct and performant implementation.\n  Death Stranding and Cyberpunk 2077 (and probably other games as well) do the right thing by default without the hack now.\n- Remove old workaround `disable_query_optimization` for occlusion queries which was enabled for AC: Valhalla,\n  and is now replaced by a correct and efficient implementation.\n\n#### Cyberpunk 2077 status\nFrom recent testing on our end, it is unknown at this time if `VK_VALVE_mutable_descriptor_type` is still required for\nCyberpunk 2077. Manual testing hasn't been able to trigger a GPU hang.\nThe memory allocation rewrite in 2.2 can plausibly work around some of the bugs that `VK_VALVE_mutable_descriptor_type` fixed by accident.\nThe bugs in question could also have been fixed since release day, but we cannot prove this since the bug is completely random in nature.\n\n### Regression fixes\n\n- Fix regression in Horizon Zero Dawn for screen space reflections on water surfaces.\n\n### Stability fixes\n\n- Greatly improve stability on Polaris or older cards for certain titles.\n  Crashes which used to happen in Horizon Zero Dawn and Death Stranding seem to have disappeared\n  after the memory allocation rewrite.\n  GPU memory usage should decrease on these cards as well.\n- DIRT 5 can get in-game now due to DXIL fixes, but is not yet playable.\n\n### New features\n\n- Add support for Variable Rate Shading tier 1.\n\n### Future development\n\nDXR is not yet supported, but has seen a fair bit of background work.\n\n- Basic DXR pipelines can be created successfully.\n- Memory allocation rewrite in 2.2 unblocks further DXR development.\n\n## 2.1\n\nThis release fixes various bugs (mostly workarounds) and improves GPU-bound performance.\n\nNew games added to \"expected to work\" list:\n - The Division (was working already in 2.0, but missing from list)\n - AC: Valhalla (*)\n\n(*): Game requires full D3D12 sparse texture support to work.\nCurrently only works on NVIDIA drivers.\nRADV status remains unknown until support for this feature lands in Mesa.\n\nNew games added to \"kinda works, but expect a lot of jank\" list:\n - Cyberpunk 2077 (**)\n\n(**): Currently only runs correctly on AMD hardware with RADV and `VK_VALVE_mutable_descriptor_type`.\nAs of game version 1.03, this requires the latest Mesa Git build.\nThe game has some fatal bugs where it relies on undefined behavior with descriptor management\nwhich this extension works around by accident.\nThe game will start and run on NVIDIA, but just like what happens without the extension on AMD,\nthe GPU will randomly hang, making the game effectively unplayable.\nA game update to fix this bug would likely make the game playable on NVIDIA as well.\nGame version 1.04 changed some behavior, and support for this game will likely fluctuate over time as future patches come in.\n\nBug fixes and workarounds:\n - Fix various implementation bugs which caused AC: Valhalla to not work.\n - Work around game bug in Death Stranding where accessing map could cause corrupt rendering.\n   (Several games appear to have the same kind of application bug.)\n - Fix corrupt textures in Horizon Zero Dawn benchmark.\n - Fix SM 6.0 wave-op detection for Horizon Zero Dawn and DIRT 5.\n - Work around GPU hangs in certain situations where games do not use D3D12 correctly,\n   but native D3D12 drivers just render wrong results rather than hang the system.\n - Fix invalid SPIR-V generated by FP64 code.\n - Fix crash with minimized windows in certain cases.\n\nPerformance:\n - ~15% GPU-bound uplift in Ghostrunner. Might help UE4 titles in general.\n - Slightly improve GPU bound performance when fully GPU bound on both AMD and NVIDIA.\n - Slightly improve GPU bound performance on RADV in various titles.\n - Reduce multi-threaded CPU overhead for certain D3D12 API usage patterns.\n - Add support for `VK_VALVE_mutable_descriptor_type` which\n   improves CPU overhead, memory bloat, and avoids potential memory management thrashing on RADV.\n   Also avoids GPU hangs in certain situations where games misuse the D3D12 API.\n\nMisc:\n - Implement `DXGI_PRESENT_TEST`.\n - Fix log spam when `DXGI_PRESENT_ALLOW_TEARING` is used.\n\n## 2.0\n\nThis initial release supports D3D12 Feature Level 12.0 and Shader Model 6.0 (DXIL).\n\nGames expected to work include:\n\n - Control\n - Death Stranding\n - Devil May Cry 5\n - Ghostrunner\n - Horizon Zero Dawn\n - Metro Exodus\n - Monster Hunter World\n - Resident Evil 2 / 3\n\nPlease refer to the README for supported driver versions.\n\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.78125,
          "content": "Copyright 2016-2024 the vkd3d-proton project authors (see the file AUTHORS for a\ncomplete list)\n\nvkd3d-proton is free software; you can redistribute it and/or modify it under\nthe terms of the GNU Lesser General Public License as published by the\nFree Software Foundation; either version 2.1 of the License, or (at\nyour option) any later version.\n\nThis library is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA, 02110-1301 USA.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 25.908203125,
          "content": "                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\f\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.2138671875,
          "content": "# vkd3d-proton\n\nvkd3d-proton is a fork of VKD3D, which aims to implement the full Direct3D 12 API on top of Vulkan.\nThe project serves as the development effort for Direct3D 12 support in [Proton](https://github.com/ValveSoftware/Proton).\n\n## Upstream\n\nThe original project is available at [WineHQ](https://gitlab.winehq.org/wine/vkd3d).\n\n## Priorities\n\nPerformance and game compatibility are important targets, at the expense of compatibility with older drivers and systems.\nModern Vulkan extensions and features are aggressively made use of to improve game performance and compatibility.\nIt is recommended to use the very latest drivers you can get your hands on for the best experience.\nBackwards compatibility with the vkd3d standalone API is not a goal of this project.\n\n## Drivers\n\nThere are some hard requirements on drivers to be able to implement D3D12 in a reasonably performant way.\n\n- Vulkan 1.3\n- Descriptor indexing with at least 1000000 UpdateAfterBind descriptors for all types except UniformBuffer.\n  Essentially all features in `VkPhysicalDeviceDescriptorIndexingFeatures` must be supported.\n- Further, the following device features are required:\n  - `samplerMirrorClampToEdge`\n  - `shaderDrawParameters`\n- `VK_EXT_robustness2`\n- `VK_KHR_push_descriptor`\n\nSome notable extensions that **should** be supported for optimal or correct behavior.\nThese extensions will likely become mandatory later.\n\n- `VK_EXT_image_view_min_lod`\n\n`VK_EXT_mutable_descriptor_type` (or the vendor `VALVE` alias) and `VK_EXT_descriptor_buffer` are also highly recommended, but not mandatory.\n\n### AMD (RADV)\n\nFor AMD, RADV is the recommended driver and the one that sees most testing on AMD GPUs.\nThe minimum requirement at the moment is Mesa 22.0.\n\nNOTE: For older Mesa versions, use the v2.6 release.\n\n### NVIDIA\n\nThe [Vulkan beta drivers](https://developer.nvidia.com/vulkan-driver) generally contain the latest\ndriver fixes that we identify while getting games to work.\nThe latest drivers (stable, beta or Vulkan beta tracks) are always preferred.\nIf you're having problems, always try the latest drivers.\nAt minimum, 535 series drivers are needed, which fixes a bunch of bugs.\n\n### Intel\n\nWe have not done any testing against Intel GPUs yet.\n\n------\n\n## Cloning the repo\n\nTo clone the repo you should run:\n```\ngit clone --recursive https://github.com/HansKristian-Work/vkd3d-proton\n```\nin order to pull in all the submodules which are needed for building.\n\n## Building vkd3d-proton\n\n### Requirements:\n- [wine](https://www.winehq.org/) (for `widl`) [for native builds]\n  - On Windows this may be substituted for [Strawberry Perl](http://strawberryperl.com/) as it ships `widl` and is easy to find and install -- although this dependency may be eliminated in the future.\n- [Meson](http://mesonbuild.com/) build system (at least version 0.49)\n- [glslang](https://github.com/KhronosGroup/glslang) compiler\n- [Mingw-w64](http://mingw-w64.org/) compiler, headers and tools (at least version 7.0) [for cross-builds for d3d12.dll which are default]\n\n### Building:\n#### The simple way\nInside the vkd3d-proton directory, run:\n```\n./package-release.sh master /your/target/directory --no-package\n```\n\nThis will create a folder `vkd3d-master` in `/your/target/directory`, which contains both 32-bit and 64-bit versions of vkd3d-proton, which can be set up in the same way as the release versions as noted above.\n\nIf you want to build natively (ie. for `libvkd3d-proton.so`), pass `--native` to the build script. This option will make it build using your system's compilers.\n\nIn order to preserve the build directories for development, pass `--dev-build` to the script. This option implies `--no-package`. After making changes to the source code, you can then do the following to rebuild vkd3d-proton:\n```\n# change to build.86 for 32-bit\nninja -C /your/target/directory/build.64 install\n```\n\n#### Compiling manually (cross for d3d12.dll, default)\n```\n# 64-bit build.\nmeson --cross-file build-win64.txt --buildtype release --prefix /your/vkd3d-proton/directory build.64\nninja -C build.64 install\n\n# 32-bit build\nmeson --cross-file build-win32.txt --buildtype release --prefix /your/vkd3d-proton/directory build.86\nninja -C build.86 install\n```\n\n#### Compiling manually (native)\n```\n# 64-bit build.\nmeson --buildtype release --prefix /your/vkd3d-proton/directory build.64\nninja -C build.64 install\n\n# 32-bit build\nCC=\"gcc -m32\" CXX=\"g++ -m32\" \\\nPKG_CONFIG_PATH=\"/usr/lib32/pkgconfig:/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/pkgconfig\" \\\nmeson --buildtype release --prefix /your/vkd3d-proton/directory build.86\nninja -C build.86 install\n```\n\n## Using vkd3d-proton\n\nThe intended way to use vkd3d-proton is as native Win32 DLLs (d3d12.dll and d3d12core.dll).\nThese serve as a drop-in replacement for D3D12, and can be used in Wine (Proton or vanilla flavors), or on Windows.\n\nvkd3d-proton does not supply the necessary DXGI components on its own.\nInstead, DXVK (2.1+) and vkd3d-proton share a DXGI implementation.\n\n### A note on using vkd3d-proton on Windows\n\nNative Windows use is mostly relevant for developer testing purposes.\nDo not expect games running on Windows 7 or 8.1 to magically make use of vkd3d-proton,\nas many games will only even attempt to load d3d12.dll if they are running on Windows 10.\n\n### Native Linux build\n\nA native Linux binary can be built, but it is not intended to be compatible with upstream Wine.\nA native option is mostly relevant for development purposes for the time being.\n\n## Environment variables\n\nMost of the environment variables used by vkd3d-proton are for debugging purposes. The\nenvironment variables are not considered a part of API and might be changed or\nremoved in the future versions of vkd3d-proton.\n\nSome of debug variables are lists of elements. Elements must be separated by\ncommas or semicolons.\n\n - `VKD3D_CONFIG` - a list of options that change the behavior of vkd3d-proton.\n    - `vk_debug` - enables Vulkan debug extensions and loads validation layer.\n    - `skip_application_workarounds` - Skips all application workarounds.\n      For debugging purposes.\n    - `nodxr` - Disables DXR support.\n    - `dxr` - DXR is normally enabled automatically. This config forces it to be enabled even when considered unsafe.\n    - `force_static_cbv` - Unsafe speed hack on NVIDIA. May or may not give a significant performance uplift.\n    - `single_queue` - Do not use asynchronous compute or transfer queues.\n    - `no_upload_hvv` - Blocks any attempt to use host-visible VRAM (large/resizable BAR) for the UPLOAD heap.\n      May free up vital VRAM in certain critical situations, at cost of lower GPU performance.\n      A fraction of VRAM is reserved for resizable BAR allocations either way,\n      so it should not be a real issue even on lower VRAM cards.\n    - `force_host_cached` - Forces all host visible allocations to be CACHED, which greatly accelerates captures.\n    - `no_invariant_position` - Avoids workarounds for invariant position. The workaround is enabled by default.\n - `VKD3D_DEBUG` - controls the debug level for log messages produced by\n   vkd3d-proton. Accepts the following values: none, err, info, fixme, warn, trace.\n - `VKD3D_SHADER_DEBUG` - controls the debug level for log messages produced by\n   the shader compilers. See `VKD3D_DEBUG` for accepted values.\n - `VKD3D_LOG_FILE` - If set, redirects `VKD3D_DEBUG` logging output to a file instead.\n - `VKD3D_VULKAN_DEVICE` - a zero-based device index. Use to force the selected\n   Vulkan device.\n - `VKD3D_FILTER_DEVICE_NAME` - skips devices that don't include this substring.\n - `VKD3D_DISABLE_EXTENSIONS` - a list of Vulkan extensions that vkd3d-proton should\n   not use even if available.\n - `VKD3D_TEST_DEBUG` - enables additional debug messages in tests. Set to 0, 1\n   or 2.\n - `VKD3D_TEST_MATCH` - a match string. Only the tests whose names exactly match the\n   string will be run, e.g. `VKD3D_TEST_FILTER=clear_render_target` will only match\n   tests named 'clear_render_target'.\n   Useful for debugging or developing new tests.\n - `VKD3D_TEST_FILTER` - a filter string. Only the tests whose names matches the\n   filter string will be run, e.g. `VKD3D_TEST_FILTER=clear_render` will match\n   tests named 'clear_render_target' or 'target_clear_render'.\n   Useful for debugging or developing new tests.\n - `VKD3D_TEST_EXCLUDE` - excludes tests of which the name is included in the string,\n   e.g. `VKD3D_TEST_EXCLUDE=test_root_signature_priority,test_conservative_rasterization_dxil`.\n - `VKD3D_TEST_PLATFORM` - can be set to \"wine\", \"windows\" or \"other\". The test\n   platform controls the behavior of todo(), todo_if(), bug_if() and broken()\n   conditions in tests.\n - `VKD3D_TEST_BUG` - set to 0 to disable bug_if() conditions in tests.\n - `VKD3D_PROFILE_PATH` - If profiling is enabled in the build, a profiling block is\n   emitted to `${VKD3D_PROFILE_PATH}.${pid}`.\n\n### Frame rate limit\nThe `VKD3D_FRAME_RATE` environment variable can be used to limit the frame rate. A value of `0` uncaps the frame rate, while any positive value will limit rendering to the given number of frames per second.\n\nThe `DXVK_FRAME_RATE` environment variable is also detected on VKD3D-Proton, so you may prefer to use that instead of having to remember two separate variables that do the same thing. `VKD3D_FRAME_RATE`, however, only applies to VKD3D (Direct3D 12) scenarios. If both variables are used, `VKD3D_FRAME_RATE` takes precedence.\n\n## Shader cache\n\nBy default, vkd3d-proton manages its own driver cache.\nThis cache is intended to cache DXBC/DXIL -> SPIR-V conversion.\nThis reduces stutter (when pipelines are created last minute and app relies on hot driver cache)\nand load times (when applications do the right thing of loading PSOs up front).\n\nBehavior is designed to be close to DXVK state cache.\n\n#### Default behavior\n\n`vkd3d-proton.cache` (and `vkd3d-proton.cache.write`) are placed in the current working directory.\nGenerally, this is the game install folder when running in Steam.\n\n#### Custom directory\n\n`VKD3D_SHADER_CACHE_PATH=/path/to/directory` overrides the directory where `vkd3d-proton.cache` is placed.\n\n#### Disable cache\n\n`VKD3D_SHADER_CACHE_PATH=0` disables the internal cache, and any caching would have to be explicitly managed\nby application.\n\n### Behavior of ID3D12PipelineLibrary\n\nWhen explicit shader cache is used, the need for application managed pipeline libraries is greatly diminished,\nand the cache applications interact with is a dummy cache.\nIf the vkd3d-proton shader cache is disabled, ID3D12PipelineLibrary stores everything relevant for a full cache,\ni.e. SPIR-V and PSO driver cache blob.\n`VKD3D_CONFIG=pipeline_library_app_cache` is an alternative to `VKD3D_SHADER_CACHE_PATH=0` and can be\nautomatically enabled based on app-profiles if relevant in the future if applications manage the caches better\nthan vkd3d-proton can do automagically.\n\n## CPU profiling (development)\n\nPass `-Denable_profiling=true` to Meson to enable a profiled build. With a profiled build, use `VKD3D_PROFILE_PATH` environment variable.\nThe profiling dumps out a binary blob which can be analyzed with `programs/vkd3d-profile.py`.\nThe profile is a trivial system which records number of iterations and total ticks (ns) spent.\nIt is easy to instrument parts of code you are working on optimizing.\n\n## Advanced shader debugging\n\nThese features are only meant to be used by vkd3d-proton developers. For any builtin RenderDoc related functionality\npass `-Denable_renderdoc=true` to Meson.\n\n - `VKD3D_SHADER_DUMP_PATH` - path where shader bytecode is dumped.\n   Bytecode is dumped in format of `$hash.{spv,dxbc,dxil}`.\n - `VKD3D_SHADER_OVERRIDE` - path to where overridden shaders can be found.\n   If application is creating a pipeline with `$hash` and `$VKD3D_SHADER_OVERRIDE/$hash.spv` exists,\n   that SPIR-V file will be used instead.\n - `VKD3D_AUTO_CAPTURE_SHADER` - If this is set to a shader hash, and the RenderDoc layer is enabled,\n vkd3d-proton will automatically make a capture when a specific shader is encountered.\n - `VKD3D_AUTO_CAPTURE_COUNTS` - A comma-separated list of indices. This can be used to control which queue submissions to capture.\n E.g., use `VKD3D_AUTO_CAPTURE_COUNTS=0,4,10` to capture the 0th (first submission), 4th and 10th submissions which are candidates for capturing.\n If `VKD3D_AUTO_CAPTURE_COUNTS` is `-1`, the entire app runtime can be turned into one big capture.\n This is only intended to be used when capturing something like the test suite,\n or tiny applications with a finite runtime to make it easier to debug cross submission work.\n\n If only `VKD3D_AUTO_CAPTURE_COUNTS` is set, any queue submission is considered for capturing.\n If only `VKD3D_AUTO_CAPTURE_SHADER` is set, `VKD3D_AUTO_CAPTURE_COUNTS` is considered to be equal to `\"0\"`, i.e. a capture is only\n made on first encounter with the target shader.\n If both are set, the capture counter is only incremented and considered when a submission contains the use of the target shader.\n\n### Breadcrumbs debugging\n\nFor debugging GPU hangs, it's useful to know where crashes happen.\nIf the build has trace enabled (non-release builds), breadcrumbs support is also enabled.\n\n`VKD3D_CONFIG=breadcrumbs` will instrument command lists with `VK_AMD_buffer_marker` or `VK_NV_device_checkpoints`.\nOn GPU device lost or timeout, crash dumps are written to the log.\nFor best results on RADV, use `RADV_DEBUG=syncshaders`. The logs will print a digested form of the command lists\nwhich were executing at the time, and attempt to narrow down the possible range of commands which could\nhave caused a crash.\n\n### Shader logging\n\nIt is possible to log the output of replaced shaders, essentially a custom shader printf. To enable this feature, `VK_KHR_buffer_device_address` must be supported.\nFirst, use `VKD3D_SHADER_DEBUG_RING_SIZE_LOG2=28` for example to set up a 256 MiB ring buffer in host memory.\nSince this buffer is allocated in host memory, feel free to make it as large as you want, as it does not consume VRAM.\nA worker thread will read the data as it comes in and log it. There is potential here to emit more structured information later.\nThe main reason this is implemented instead of the validation layer printf system is run-time performance,\nand avoids any possible accidental hiding of bugs by introducing validation layers which add locking, etc.\nUsing `debugPrintEXT` is also possible if that fits better with your debugging scenario.\nWith this shader replacement scheme, we're able to add shader logging as unintrusive as possible.\n\n```\n# Inside folder full of override shaders, build everything with:\nmake -C /path/to/include/shader-debug M=$PWD\n```\nThe shader can then include `#include \"debug_channel.h\"` and use various functions below.\n\n```\nvoid DEBUG_CHANNEL_INIT(uvec3 ID);\n```\n\nis used somewhere in your replaced shader. This should be initialized with `gl_GlobalInvocationID` or similar.\nThis ID will show up in the log. For each subgroup which calls `DEBUG_CHANNEL_INIT`, an instance counter is generated.\nThis allows you to correlate several messages which all originate from the same instance counter, which is logged alongside the ID.\nAn invocation can be uniquely identified with the instance + `DEBUG_CHANNEL_INIT` id.\n`DEBUG_CHANNEL_INIT` can be called from non-uniform control flow, as it does not use `barrier()` or similar constructs.\nIt can also be used in vertex and fragment shaders for this reason.\n\n```\nvoid DEBUG_CHANNEL_MSG();\nvoid DEBUG_CHANNEL_MSG(uint v0);\nvoid DEBUG_CHANNEL_MSG(uint v0, uint v1, ...); // Up to 4 components, can be expanded as needed up to 16.\nvoid DEBUG_CHANNEL_MSG(int v0);\nvoid DEBUG_CHANNEL_MSG(int v0, int v1, ...); // Up to 4 components, ...\nvoid DEBUG_CHANNEL_MSG(float v0);\nvoid DEBUG_CHANNEL_MSG(float v0, float v1, ...); // Up to 4 components, ...\n```\n\nThese functions log, formatting is `#%x` for uint, `%d` for int and `%f` for float type.\n\n## Descriptor debugging\n\nIf `-Denable_descriptor_qa=true` is enabled in build, you can set the `VKD3D_DESCRIPTOR_QA_LOG` env-var to a file.\nAll descriptor updates and copies are logged so that it's possible to correlate descriptors with\nGPU crash dumps. `enable_descriptor_qa` is not enabled by default,\nsince it adds some flat overhead in an extremely hot code path.\n\n### GPU-assisted debugging\n\nIf `VKD3D_CONFIG=descriptor_qa_checks` is set with a build which enables `-Denable_descriptor_qa=true`,\nall shaders will be instrumented to check for invalid access. In the log, you will see this to\nmake sure the feature is enabled.\n\n```\n932:info:vkd3d_descriptor_debug_init_once: Enabling descriptor QA checks!\n```\n\nThe main motivation is the tight integration and high performance.\nGPU-assisted debugging can be run at well over playable speeds.\n\n#### Descriptor heap index out of bounds\n\n```\n============\nFault type: HEAP_OUT_OF_RANGE\nFault type: MISMATCH_DESCRIPTOR_TYPE\nCBV_SRV_UAV heap cookie: 1800\nShader hash and instruction: edbaf1b5ed344467 (1)\nAccessed resource/view cookie: 0\nShader desired descriptor type: 8 (STORAGE_BUFFER)\nFound descriptor type in heap: 0 (NONE)\nFailed heap index: 1024000\n==========\n```\n\nThe instruction `(1)`, is reported as well,\nand a disassembly of the shader in question can be used to pinpoint exactly where\nthings are going wrong.\nDump all shaders with `VKD3D_SHADER_DUMP_PATH=/my/folder`,\nand run `spirv-cross -V /my/folder/edbaf1b5ed344467.spv`.\n(NOTE: clear out the folder before dumping, existing files are not overwritten).\nThe faulting instruction can be identified by looking at last argument, e.g.:\n\n```\nuint fixup_index = descriptor_qa_check(heap_index, descriptor_type, 1u /* instruction ID */);\n```\n\n#### Mismatch descriptor type\n\n```\n============\nFault type: MISMATCH_DESCRIPTOR_TYPE\nCBV_SRV_UAV heap cookie: 1800 // Refer to VKD3D_DESCRIPTOR_QA_LOG\nShader hash and instruction: edbaf1b5ed344467 (1)\nAccessed resource/view cookie: 1802 // Refer to VKD3D_DESCRIPTOR_QA_LOG\nShader desired descriptor type: 8 (STORAGE_BUFFER)\nFound descriptor type in heap: 1 (SAMPLED_IMAGE)\nFailed heap index: 1025\n==========\n```\n\n#### Accessing destroyed resource\n\n```\n============\nFault type: DESTROYED_RESOURCE\nCBV_SRV_UAV heap cookie: 1800\nShader hash and instruction: edbaf1b5ed344467 (2)\nAccessed resource/view cookie: 1806\nShader desired descriptor type: 1 (SAMPLED_IMAGE)\nFound descriptor type in heap: 1 (SAMPLED_IMAGE)\nFailed heap index: 1029\n==========\n```\n\n### Debugging descriptor crashes with RADV dumps (hardcore ultra nightmare mode)\n\nFor when you're absolutely desperate, there is a way to debug GPU hangs.\nFirst, install [umr](https://gitlab.freedesktop.org/tomstdenis/umr) and make the binary setsuid.\n\n`ACO_DEBUG=force-waitcnt RADV_DEBUG=hang VKD3D_DESCRIPTOR_QA_LOG=/somewhere/desc.txt %command%`\n\nIt is possible to use `RADV_DEBUG=hang,umr` as well, but from within Wine, there are weird things\nhappening where UMR dumps do not always succeed.\nInstead, it is possible to invoke umr manually from an SSH shell when the GPU hangs.\n\n```\n#!/bin/bash\n\nmkdir -p \"$HOME/umr-dump\"\n\n# For Navi, older GPUs might have different rings. See RADV source.\numr -R gfx_0.0.0 > \"$HOME/umr-dump/ring.txt\" 2>&1\numr -O halt_waves -wa gfx_0.0.0 > \"$HOME/umr-dump/halt-waves-1.txt\" 2>&1\numr -O bits,halt_waves -wa gfx_0.0.0 > \"$HOME/umr-dump/halt-waves-2.txt\" 2>&1\n```\n\nA folder is placed in `~/radv_dumps*` by RADV, and the UMR script will place wave dumps in `~/umr-dump`.\n\nFirst, we can study the wave dumps to see where things crash, e.g.:\n\n```\n    pgm[6@0x800120e26c00 + 0x584 ] = 0xf0001108\t\timage_load v47, v[4:5], s[48:55] dmask:0x1 dim:SQ_RSRC_IMG_2D unorm\n    pgm[6@0x800120e26c00 + 0x588 ] = 0x000c2f04\t;;\n    pgm[6@0x800120e26c00 + 0x58c ] = 0xbf8c3f70\t\ts_waitcnt vmcnt(0)\n *  pgm[6@0x800120e26c00 + 0x590 ] = 0x930118c0\t\ts_mul_i32 s1, 64, s24\n    pgm[6@0x800120e26c00 + 0x594 ] = 0xf40c0c09\t\ts_load_dwordx8 s[48:55], s[18:19], s1\n    pgm[6@0x800120e26c00 + 0x598 ] = 0x02000000\t;;\n```\n\nexcp: 256 is a memory error (at least on 5700xt).\n```\nTRAPSTS[50000100]:\n\t                excp:      256 |         illegal_inst:        0 |           buffer_oob:        0 |           excp_cycle:        0 |\n\t       excp_wave64hi:        0 |          xnack_error:        1 |              dp_rate:        2 |      excp_group_mask:        0 |\n```\n\nWe can inspect all VGPRs and all SGPRs, here for the image descriptor.\n\n```\n    [  48..  51] = { 0130a000, c0500080, 810dc1df, 93b00204 }\n    [  52..  55] = { 00000000, 00400000, 002b0000, 800130c8 }\n```\n\nDecode the VA and study `bo_history.log`. There is a script in RADV which lets you query history for a VA.\nThis lets us verify that the VA in question was freed at some point.\nAt point of writing, there is no easy way to decode raw descriptor blobs, but when you're desperate enough you can do it by hand :|\n\nIn `pipeline.log` we have the full SPIR-V (with OpSource reference to the source DXIL/DXBC)\nand disassembly of the crashed pipeline. Here we can study the code to figure out which descriptor was read.\n\n```\n    // s7 is the descriptor heap index, s1 is the offset (64 bytes per image descriptor),\n    // s[18:19] is the descriptor heap.\n    s_mul_i32 s1, 64, s7                                        ; 930107c0\n    s_load_dwordx8 s[48:55], s[18:19], s1                       ; f40c0c09 02000000\n    s_waitcnt lgkmcnt(0)                                        ; bf8cc07f\n    image_load v47, v[4:5], s[48:55] dmask:0x1 dim:SQ_RSRC_IMG_2D unorm ; f0001108 000c2f04\n```\n\n```\n    [   4..   7] = { 03200020, ffff8000, 0000002b, 00000103 }\n```\n\nWhich is descriptor index #259. Based on this, we can inspect the descriptor QA log and verify that the application\ndid indeed do something invalid, which caused the GPU hang.\n"
        },
        {
          "name": "VP_D3D12_VKD3D_PROTON_profile.json",
          "type": "blob",
          "size": 33.7744140625,
          "content": "{\n    \"$schema\": \"https://schema.khronos.org/vulkan/profiles-0.8-latest.json#\",\n    \"capabilities\": {\n        \"baseline_features\": {\n            \"extensions\": {\n                \"VK_KHR_push_descriptor\": 1,\n                \"VK_KHR_swapchain\": 1,\n                \"VK_EXT_calibrated_timestamps\" : 1,\n                \"VK_EXT_custom_border_color\" : 1,\n                \"VK_EXT_depth_clip_enable\": 1,\n                \"VK_EXT_robustness2\": 1,\n                \"VK_EXT_transform_feedback\": 1,\n                \"VK_EXT_vertex_attribute_divisor\": 3\n            },\n            \"features\": {\n                \"VkPhysicalDeviceCustomBorderColorFeaturesEXT\": {\n                    \"customBorderColors\" : true,\n                    \"customBorderColorWithoutFormat\": true\n                },\n                \"VkPhysicalDeviceDepthClipEnableFeaturesEXT\": {\n                    \"depthClipEnable\": true\n                },\n                \"VkPhysicalDeviceRobustness2FeaturesEXT\": {\n                    \"robustBufferAccess2\": true,\n                    \"robustImageAccess2\": true,\n                    \"nullDescriptor\": true\n                },\n                \"VkPhysicalDeviceTransformFeedbackFeaturesEXT\": {\n                    \"transformFeedback\": true,\n                    \"geometryStreams\": true\n                },\n                \"VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT\": {\n                    \"vertexAttributeInstanceRateDivisor\": true,\n                    \"vertexAttributeInstanceRateZeroDivisor\": true\n                },\n                \"VkPhysicalDeviceVulkan11Features\": {\n                    \"shaderDrawParameters\": true\n                },\n                \"VkPhysicalDeviceVulkan12Features\": {\n                    \"samplerMirrorClampToEdge\": true,\n                    \"drawIndirectCount\": true,\n                    \"descriptorIndexing\": true,\n                    \"shaderUniformTexelBufferArrayDynamicIndexing\": true,\n                    \"shaderStorageTexelBufferArrayDynamicIndexing\": true,\n                    \"shaderSampledImageArrayNonUniformIndexing\": true,\n                    \"shaderStorageImageArrayNonUniformIndexing\": true,\n                    \"shaderStorageBufferArrayNonUniformIndexing\": true,\n                    \"shaderUniformTexelBufferArrayNonUniformIndexing\": true,\n                    \"shaderStorageTexelBufferArrayNonUniformIndexing\": true,\n                    \"descriptorBindingSampledImageUpdateAfterBind\": true,\n                    \"descriptorBindingStorageImageUpdateAfterBind\": true,\n                    \"descriptorBindingStorageBufferUpdateAfterBind\": true,\n                    \"descriptorBindingUniformTexelBufferUpdateAfterBind\": true,\n                    \"descriptorBindingStorageTexelBufferUpdateAfterBind\": true,\n                    \"descriptorBindingUpdateUnusedWhilePending\": true,\n                    \"descriptorBindingPartiallyBound\": true,\n                    \"descriptorBindingVariableDescriptorCount\": true,\n                    \"runtimeDescriptorArray\": true,\n                    \"separateDepthStencilLayouts\": true,\n                    \"timelineSemaphore\": true,\n                    \"bufferDeviceAddress\": true,\n                    \"vulkanMemoryModel\": true,\n                    \"vulkanMemoryModelDeviceScope\": true,\n                    \"hostQueryReset\": true\n                },\n                \"VkPhysicalDeviceVulkan13Features\": {\n                    \"shaderDemoteToHelperInvocation\": true,\n                    \"synchronization2\": true,\n                    \"dynamicRendering\": true,\n                    \"maintenance4\": true\n                },\n                \"VkPhysicalDeviceFeatures\": {\n                    \"robustBufferAccess\": true,\n                    \"fullDrawIndexUint32\": true,\n                    \"imageCubeArray\": true,\n                    \"independentBlend\": true,\n                    \"geometryShader\": true,\n                    \"tessellationShader\": true,\n                    \"sampleRateShading\": true,\n                    \"dualSrcBlend\": true,\n                    \"multiDrawIndirect\": true,\n                    \"drawIndirectFirstInstance\": true,\n                    \"depthClamp\": true,\n                    \"depthBiasClamp\": true,\n                    \"fillModeNonSolid\": true,\n                    \"multiViewport\": true,\n                    \"samplerAnisotropy\": true,\n                    \"textureCompressionBC\": true,\n                    \"occlusionQueryPrecise\": true,\n                    \"pipelineStatisticsQuery\": true,\n                    \"fragmentStoresAndAtomics\": true,\n                    \"shaderImageGatherExtended\": true,\n                    \"shaderStorageImageExtendedFormats\": true,\n                    \"shaderUniformBufferArrayDynamicIndexing\": true,\n                    \"shaderSampledImageArrayDynamicIndexing\": true,\n                    \"shaderStorageBufferArrayDynamicIndexing\": true,\n                    \"shaderStorageImageArrayDynamicIndexing\": true,\n                    \"shaderClipDistance\": true,\n                    \"shaderCullDistance\": true,\n                    \"shaderInt16\": true,\n                    \"shaderStorageImageWriteWithoutFormat\": true\n                }\n            },\n            \"properties\": {\n                \"VkPhysicalDevicePushDescriptorPropertiesKHR\": {\n                    \"maxPushDescriptors\": 32\n                },\n                \"VkPhysicalDeviceCustomBorderColorPropertiesEXT\": {\n                    \"maxCustomBorderColorSamplers\": 2048\n                },\n                \"VkPhysicalDeviceTransformFeedbackPropertiesEXT\": {\n                    \"transformFeedbackQueries\": true,\n                    \"transformFeedbackRasterizationStreamSelect\": false,\n                    \"transformFeedbackStreamsLinesTriangles\": false,\n                    \"transformFeedbackDraw\": false\n                },\n                \"VkPhysicalDeviceVulkan13Properties\": {\n                    \"storageTexelBufferOffsetSingleTexelAlignment\": true,\n                    \"uniformTexelBufferOffsetSingleTexelAlignment\": true\n                }\n            }\n        },\n        \"fl_11_1_features\": {\n            \"features\": {\n                \"VkPhysicalDeviceFeatures\": {\n                    \"vertexPipelineStoresAndAtomics\": true,\n                    \"logicOp\": true\n                }\n            }\n        },\n        \"fl_12_0_features\": {\n            \"features\": {\n                \"VkPhysicalDeviceFeatures\": {\n                    \"sparseBinding\": true,\n                    \"sparseResidencyAliased\": true,\n                    \"sparseResidencyBuffer\": true,\n                    \"sparseResidencyImage2D\": true,\n                    \"shaderResourceResidency\": true,\n                    \"shaderResourceMinLod\": true\n                },\n                \"VkPhysicalDeviceVulkan12Features\": {\n                    \"samplerFilterMinmax\": true\n                }\n            },\n            \"queueFamiliesProperties\": [\n                {\n                    \"VkQueueFamilyProperties\": {\n                        \"queueFlags\": [ \"VK_QUEUE_SPARSE_BINDING_BIT\" ],\n                        \"queueCount\": 1\n                    }\n                }\n            ]\n        },\n        \"fl_12_1_features\": {\n            \"extensions\": {\n                \"VK_EXT_conservative_rasterization\": 1\n            }\n        },\n        \"fl_12_1_features_rov\": {\n            \"extensions\": {\n                \"VK_EXT_fragment_shader_interlock\": 1\n            },\n            \"features\": {\n                \"VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT\": {\n                    \"fragmentShaderSampleInterlock\": true,\n                    \"fragmentShaderPixelInterlock\": true\n                }\n            }\n        },\n        \"fl_12_2_features\": {\n            \"extensions\": {\n                \"VK_KHR_ray_tracing_pipeline\": 1,\n                \"VK_KHR_acceleration_structure\": 1,\n                \"VK_KHR_deferred_host_operations\": 1,\n                \"VK_KHR_ray_query\": 1,\n                \"VK_KHR_pipeline_library\": 1,\n                \"VK_KHR_fragment_shading_rate\": 1,\n                \"VK_EXT_pipeline_library_group_handles\": 1,\n                \"VK_KHR_ray_tracing_maintenance1\": 1,\n                \"VK_EXT_mesh_shader\": 1,\n                \"VK_EXT_conservative_rasterization\": 1\n            },\n            \"formats\": {\n                \"VK_FORMAT_R32G32_SFLOAT\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                },\n                \"VK_FORMAT_R32G32B32_SFLOAT\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                },\n                \"VK_FORMAT_R16G16_SFLOAT\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                },\n                \"VK_FORMAT_R16G16_SNORM\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                },\n                \"VK_FORMAT_R16G16B16A16_SFLOAT\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                },\n                \"VK_FORMAT_R16G16B16A16_SNORM\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                },\n                \"VK_FORMAT_R16G16B16A16_UNORM\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                },\n                \"VK_FORMAT_R16G16_UNORM\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                },\n                \"VK_FORMAT_A2B10G10R10_UNORM_PACK32\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                },\n                \"VK_FORMAT_R8G8B8A8_UNORM\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                },\n                \"VK_FORMAT_R8G8_UNORM\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                },\n                \"VK_FORMAT_R8G8B8A8_SNORM\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                },\n                \"VK_FORMAT_R8G8_SNORM\": {\n                    \"VkFormatProperties\": {\n                        \"bufferFeatures\": [ \"VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR\" ] }\n                }\n            },\n            \"features\": {\n                \"VkPhysicalDeviceAccelerationStructureFeaturesKHR\": {\n                    \"accelerationStructure\": true\n                },\n                \"VkPhysicalDeviceRayTracingPipelineFeaturesKHR\": {\n                    \"rayTracingPipeline\": true,\n                    \"rayTracingPipelineTraceRaysIndirect\": true,\n                    \"rayTraversalPrimitiveCulling\": true\n                },\n                \"VkPhysicalDeviceRayQueryFeaturesKHR\": {\n                    \"rayQuery\": true\n                },\n                \"VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR\": {\n                    \"rayTracingMaintenance1\": true,\n                    \"rayTracingPipelineTraceRaysIndirect2\": true\n                },\n                \"VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT\": {\n                    \"pipelineLibraryGroupHandles\": true\n                },\n                \"VkPhysicalDeviceMeshShaderFeaturesEXT\": {\n                    \"taskShader\": true,\n                    \"meshShader\": true,\n                    \"primitiveFragmentShadingRateMeshShader\": true\n                },\n                \"VkPhysicalDeviceFragmentShadingRateFeaturesKHR\": {\n                    \"pipelineFragmentShadingRate\": true,\n                    \"primitiveFragmentShadingRate\": true,\n                    \"attachmentFragmentShadingRate\": true\n                },\n                \"VkPhysicalDeviceFeatures\": {\n                    \"shaderInt64\": true,\n                    \"depthBounds\": true,\n                    \"sparseResidencyImage3D\": true\n                },\n                \"VkPhysicalDeviceVulkan12Features\": {\n                    \"shaderOutputViewportIndex\": true,\n                    \"shaderOutputLayer\": true\n                }\n            },\n            \"properties\": {\n                \"VkPhysicalDeviceConservativeRasterizationPropertiesEXT\": {\n                    \"degenerateTrianglesRasterized\": true,\n                    \"fullyCoveredFragmentShaderInputVariable\": true\n                },\n                \"VkPhysicalDeviceFragmentShadingRatePropertiesKHR\": {\n                    \"fragmentShadingRateNonTrivialCombinerOps\": true\n                }\n            },\n            \"queueFamiliesProperties\": [\n                {\n                    \"VkQueueFamilyProperties\": {\n                        \"queueFlags\": [ \"VK_QUEUE_TRANSFER_BIT\" ],\n                        \"timestampValidBits\": 1\n                    }\n                }\n            ]\n        },\n        \"fl_11_0_properties\": {\n            \"properties\": {\n                \"VkPhysicalDeviceProperties\": {\n                    \"limits\": { \"bufferImageGranularity\": 65536 }\n                },\n                \"VkPhysicalDeviceVulkan12Properties\": {\n                    \"robustBufferAccessUpdateAfterBind\": true,\n                    \"maxPerStageDescriptorUpdateAfterBindStorageBuffers\": 1000000,\n                    \"maxPerStageDescriptorUpdateAfterBindSampledImages\": 1000000,\n                    \"maxPerStageDescriptorUpdateAfterBindStorageImages\": 1000000\n                }\n            }\n        },\n        \"fl_12_0_properties\": {\n            \"properties\": {\n                \"VkPhysicalDeviceProperties\": {\n                    \"limits\": { \"bufferImageGranularity\": 65536 },\n                    \"sparseProperties\": {\n                        \"residencyStandard2DBlockShape\": true,\n                        \"residencyAlignedMipSize\": false,\n                        \"residencyNonResidentStrict\": true\n                    }\n                },\n                \"VkPhysicalDeviceVulkan12Properties\": {\n                    \"robustBufferAccessUpdateAfterBind\": true,\n                    \"maxPerStageDescriptorUpdateAfterBindStorageBuffers\": 1000000,\n                    \"maxPerStageDescriptorUpdateAfterBindSampledImages\": 1000000,\n                    \"maxPerStageDescriptorUpdateAfterBindStorageImages\": 1000000,\n                    \"filterMinmaxSingleComponentFormats\": true\n                }\n            }\n        },\n        \"fl_12_0_optimal_properties\": {\n            \"properties\": {\n                \"VkPhysicalDeviceProperties\": {\n                    \"limits\": { \"bufferImageGranularity\": 65536, \"maxPushConstantsSize\": 256 },\n                    \"sparseProperties\": {\n                        \"residencyStandard2DBlockShape\": true,\n                        \"residencyAlignedMipSize\": false,\n                        \"residencyNonResidentStrict\": true\n                    }\n                },\n                \"VkPhysicalDeviceVulkan12Properties\": {\n                    \"robustBufferAccessUpdateAfterBind\": true,\n                    \"maxPerStageDescriptorUpdateAfterBindStorageBuffers\": 1000000,\n                    \"maxPerStageDescriptorUpdateAfterBindSampledImages\": 1000000,\n                    \"maxPerStageDescriptorUpdateAfterBindStorageImages\": 1000000,\n                    \"filterMinmaxSingleComponentFormats\": true\n                }\n            }\n        },\n        \"fl_12_2_properties\": {\n            \"properties\": {\n                \"VkPhysicalDeviceProperties\": {\n                    \"limits\": { \"bufferImageGranularity\": 65536 },\n                    \"sparseProperties\": {\n                        \"residencyStandard2DBlockShape\": true,\n                        \"residencyStandard3DBlockShape\": true,\n                        \"residencyAlignedMipSize\": false,\n                        \"residencyNonResidentStrict\": true\n                    }\n                },\n                \"VkPhysicalDeviceVulkan12Properties\": {\n                    \"robustBufferAccessUpdateAfterBind\": true,\n                    \"maxPerStageDescriptorUpdateAfterBindStorageBuffers\": 1000000,\n                    \"maxPerStageDescriptorUpdateAfterBindSampledImages\": 1000000,\n                    \"maxPerStageDescriptorUpdateAfterBindStorageImages\": 1000000,\n                    \"filterMinmaxSingleComponentFormats\": true\n                }\n            }\n        },\n        \"fl_12_2_optimal_properties\": {\n            \"properties\": {\n                \"VkPhysicalDeviceProperties\": {\n                    \"limits\": { \"bufferImageGranularity\": 65536, \"maxPushConstantsSize\": 256 },\n                    \"sparseProperties\": {\n                        \"residencyStandard2DBlockShape\": true,\n                        \"residencyStandard3DBlockShape\": true,\n                        \"residencyAlignedMipSize\": false,\n                        \"residencyNonResidentStrict\": true\n                    }\n                },\n                \"VkPhysicalDeviceVulkan12Properties\": {\n                    \"robustBufferAccessUpdateAfterBind\": true,\n                    \"maxPerStageDescriptorUpdateAfterBindStorageBuffers\": 1000000,\n                    \"maxPerStageDescriptorUpdateAfterBindSampledImages\": 1000000,\n                    \"maxPerStageDescriptorUpdateAfterBindStorageImages\": 1000000,\n                    \"filterMinmaxSingleComponentFormats\": true,\n                    \"shaderDenormFlushToZeroFloat32\": true,\n                    \"shaderDenormPreserveFloat32\": true\n                }\n            }\n        },\n        \"subgroups_none\": {\n            \"properties\": {\n                \"VkPhysicalDeviceVulkan11Properties\": {\n                    \"subgroupSize\": 1,\n                    \"subgroupSupportedOperations\": [ \"VK_SUBGROUP_FEATURE_BASIC_BIT\" ]\n                }\n            }\n        },\n        \"subgroups_60\": {\n            \"properties\": {\n                \"VkPhysicalDeviceVulkan11Properties\": {\n                    \"subgroupSupportedOperations\": [\n                        \"VK_SUBGROUP_FEATURE_BALLOT_BIT\",\n                        \"VK_SUBGROUP_FEATURE_BASIC_BIT\",\n                        \"VK_SUBGROUP_FEATURE_VOTE_BIT\",\n                        \"VK_SUBGROUP_FEATURE_SHUFFLE_BIT\",\n                        \"VK_SUBGROUP_FEATURE_QUAD_BIT\",\n                        \"VK_SUBGROUP_FEATURE_ARITHMETIC_BIT\"\n                    ],\n                    \"subgroupSupportedStages\": [ \"VK_SHADER_STAGE_COMPUTE_BIT\", \"VK_SHADER_STAGE_FRAGMENT_BIT\" ]\n                }\n            }\n        },\n        \"subgroups_66\": {\n            \"features\": {\n                \"VkPhysicalDeviceVulkan13Features\": {\n                    \"subgroupSizeControl\": true,\n                    \"computeFullSubgroups\": true\n                }\n            },\n            \"properties\": {\n                \"VkPhysicalDeviceVulkan13Properties\": {\n                    \"requiredSubgroupSizeStages\": [ \"VK_SHADER_STAGE_COMPUTE_BIT\" ]\n                }\n            }\n        },\n        \"shader_model_60\": {\n            \"features\": {\n                \"VkPhysicalDeviceVulkan12Features\": {\n                    \"uniformBufferStandardLayout\": true\n                }\n            }\n        },\n        \"shader_model_66\": {\n            \"extensions\": {\n                \"VK_KHR_compute_shader_derivatives\": 1,\n                \"VK_EXT_shader_image_atomic_int64\": 1\n            },\n            \"features\": {\n                \"VkPhysicalDeviceVulkan13Features\": {\n                    \"shaderIntegerDotProduct\": true\n                },\n                \"VkPhysicalDeviceVulkan12Features\": {\n                    \"shaderBufferInt64Atomics\": true,\n                    \"shaderSharedInt64Atomics\": true,\n                    \"shaderInt8\": true\n                },\n                \"VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR\": {\n                    \"computeDerivativeGroupLinear\": true\n                },\n                \"VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT\": {\n                    \"shaderImageInt64Atomics\": true\n                }\n            }\n        },\n        \"shader_model_67\": {\n            \"extensions\": {\n                \"VK_KHR_shader_maximal_reconvergence\": 1,\n                \"VK_KHR_shader_quad_control\": 1\n            },\n            \"features\": {\n                \"VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR\": {\n                    \"shaderMaximalReconvergence\": true\n                },\n                \"VkPhysicalDeviceShaderQuadControlFeaturesKHR\": {\n                    \"shaderQuadControl\": true\n                }\n            }\n        },\n        \"optimal_performance\": {\n            \"extensions\": {\n                \"VK_EXT_descriptor_buffer\": 1,\n                \"VK_EXT_mutable_descriptor_type\": 1,\n                \"VK_EXT_shader_module_identifier\": 1,\n                \"VK_KHR_present_id\": 1,\n                \"VK_KHR_present_wait\": 1,\n                \"VK_EXT_extended_dynamic_state2\": 1,\n                \"VK_EXT_graphics_pipeline_library\": 1,\n                \"VK_KHR_pipeline_library\": 1,\n                \"VK_AMD_buffer_marker\": 1,\n                \"VK_EXT_scalar_block_layout\": 1,\n                \"VK_EXT_swapchain_maintenance1\" : 1\n            },\n            \"features\": {\n                \"VkPhysicalDeviceDescriptorBufferFeaturesEXT\": {\n                    \"descriptorBuffer\": true,\n                    \"descriptorBufferPushDescriptors\": true\n                },\n                \"VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT\": {\n                    \"mutableDescriptorType\": true\n                },\n                \"VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT\": {\n                    \"shaderModuleIdentifier\": true\n                },\n                \"VkPhysicalDevicePresentIdFeaturesKHR\": {\n                    \"presentId\": true\n                },\n                \"VkPhysicalDevicePresentWaitFeaturesKHR\": {\n                    \"presentWait\": true\n                },\n                \"VkPhysicalDeviceExtendedDynamicState2FeaturesEXT\": {\n                    \"extendedDynamicState2\": true,\n                    \"extendedDynamicState2PatchControlPoints\": true\n                },\n                \"VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT\": {\n                    \"graphicsPipelineLibrary\": true\n                },\n                \"VkPhysicalDeviceVulkan13Features\": {\n                    \"pipelineCreationCacheControl\": true\n                },\n                \"VkPhysicalDeviceScalarBlockLayoutFeaturesEXT\": {\n                    \"scalarBlockLayout\": true\n                },\n                \"VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT\": {\n                    \"swapchainMaintenance1\": true\n                }\n            },\n            \"properties\": {\n                \"VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT\": {\n                    \"graphicsPipelineLibraryFastLinking\": true,\n                    \"graphicsPipelineLibraryIndependentInterpolationDecoration\": true\n                }\n            }\n        },\n        \"optional\": {\n            \"extensions\": {\n                \"VK_KHR_fragment_shader_barycentric\": 1,\n                \"VK_EXT_conditional_rendering\": 1,\n                \"VK_EXT_external_memory_host\": 1,\n                \"VK_EXT_image_view_min_lod\": 1,\n                \"VK_EXT_image_sliced_view_of_3d\": 1,\n                \"VK_EXT_memory_priority\": 1,\n                \"VK_EXT_device_generated_commands\": 1,\n                \"VK_KHR_maintenance5\": 1,\n                \"VK_KHR_maintenance6\": 1,\n                \"VK_EXT_depth_bias_control\": 1\n            },\n            \"features\": {\n                \"VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR\": {\n                    \"fragmentShaderBarycentric\": true\n                },\n                \"VkPhysicalDeviceConditionalRenderingFeaturesEXT\": {\n                    \"conditionalRendering\": true\n                },\n                \"VkPhysicalDeviceImageViewMinLodFeaturesEXT\": {\n                    \"minLod\": true\n                },\n                \"VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT\": {\n                    \"imageSlicedViewOf3D\": true\n                },\n                \"VkPhysicalDeviceMemoryPriorityFeaturesEXT\": {\n                    \"memoryPriority\": true\n                },\n                \"VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT\": {\n                    \"deviceGeneratedCommands\": true\n                },\n                \"VkPhysicalDeviceFeatures\": {\n                    \"shaderFloat64\": true\n                },\n                \"VkPhysicalDeviceVulkan12Features\": {\n                    \"shaderFloat16\": true,\n                    \"shaderSubgroupExtendedTypes\": true\n                },\n                \"VkPhysicalDeviceMaintenance5FeaturesKHR\": {\n                    \"maintenance5\": true\n                },\n                \"VkPhysicalDeviceMaintenance6FeaturesKHR\": {\n                    \"maintenance6\": true\n                },\n                \"VkPhysicalDeviceDepthBiasControlFeaturesEXT\": {\n                    \"depthBiasControl\": true,\n                    \"leastRepresentableValueForceUnormRepresentation\": true\n                }\n          }\n        },\n        \"optional_amd\": {\n            \"extensions\": {\n                \"VK_EXT_shader_stencil_export\": 1,\n                \"VK_AMD_device_coherent_memory\": 1,\n                \"VK_AMD_shader_core_properties\": 1,\n                \"VK_AMD_shader_core_properties2\": 1,\n                \"VK_EXT_dynamic_rendering_unused_attachments\": 1,\n                \"VK_EXT_image_compression_control\": 1,\n                \"VK_MESA_image_alignment_control\": 1\n            },\n            \"features\": {\n                \"VkPhysicalDeviceCoherentMemoryFeaturesAMD\": {\n                    \"deviceCoherentMemory\": true\n                },\n                \"VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT\": {\n                    \"dynamicRenderingUnusedAttachments\": true\n                },\n                \"VkPhysicalDeviceImageCompressionControlFeaturesEXT\": {\n                    \"imageCompressionControl\": true\n                },\n                \"VkPhysicalDeviceImageAlignmentControlFeaturesMESA\" : {\n                    \"imageAlignmentControl\": true\n                }\n            },\n            \"properties\": {\n                \"VkPhysicalDeviceProperties\": {\n                    \"vendorID\": 4098\n                },\n                \"VkPhysicalDeviceVulkan12Properties\": {\n                    \"denormBehaviorIndependence\": \"VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY\",\n                    \"shaderDenormFlushToZeroFloat32\": true,\n                    \"shaderDenormPreserveFloat16\": true,\n                    \"shaderDenormPreserveFloat32\": true,\n                    \"shaderDenormPreserveFloat64\": true\n                }\n            }\n        },\n        \"optional_nv\": {\n            \"extensions\": {\n                \"VK_EXT_pageable_device_local_memory\": 1,\n                \"VK_NV_shader_sm_builtins\": 1,\n                \"VK_NVX_binary_import\": 1,\n                \"VK_NVX_image_view_handle\": 1,\n                \"VK_NV_device_diagnostic_checkpoints\": 1,\n                \"VK_NV_raw_access_chains\": 1\n            },\n            \"features\": {\n                \"VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT\": {\n                    \"pageableDeviceLocalMemory\": true\n                },\n                \"VkPhysicalDeviceRawAccessChainsFeaturesNV\": {\n                    \"shaderRawAccessChains\": true\n                }\n            },\n            \"properties\": {\n                \"VkPhysicalDeviceProperties\": {\n                    \"vendorID\": 4318\n                }\n            }\n        }\n    },\n    \"profiles\": {\n        \"VP_D3D12_FL_11_0_baseline\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"Minimum baseline (FL 11.0)\",\n            \"description\": \"Minimum baseline to create a device at all.\",\n            \"capabilities\": [\n                \"baseline_features\",\n                \"fl_11_0_properties\",\n                \"subgroups_none\"\n            ]\n        },\n        \"VP_D3D12_FL_11_1_baseline\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"FL 11.1 baseline\",\n            \"description\": \"Minimum baseline to create a device with FL 11.1.\",\n            \"capabilities\": [\n                \"baseline_features\",\n                \"fl_11_0_properties\",\n                \"subgroups_none\",\n                \"fl_11_1_features\"\n            ]\n        },\n        \"VP_D3D12_FL_12_0_baseline\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"FL 12.0 baseline\",\n            \"description\": \"Minimum baseline to create a device with FL 12.0.\",\n            \"capabilities\": [\n                \"baseline_features\",\n                \"fl_12_0_properties\",\n                \"subgroups_60\",\n                \"fl_11_1_features\",\n                \"fl_12_0_features\",\n                \"shader_model_60\"\n            ]\n        },\n        \"VP_D3D12_FL_12_0_optimal\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"FL 12.0 optimal configuration\",\n            \"description\": \"Requirement to create a FL 12.0 device with optimal performance. Shader model 6.6 and optimal descriptor model.\",\n            \"contributors\": {},\n            \"history\": [\n                {\n                    \"revision\": 1,\n                    \"date\": \"2023-05-22\",\n                    \"author\": \"Hans-Kristian Arntzen\",\n                    \"comment\": \"First draft\"\n                }\n            ],\n            \"capabilities\": [\n                \"baseline_features\",\n                \"fl_12_0_optimal_properties\",\n                \"subgroups_66\",\n                \"fl_11_1_features\",\n                \"fl_12_0_features\",\n                \"shader_model_60\",\n                \"shader_model_66\",\n                \"optimal_performance\"\n            ]\n        },\n        \"VP_D3D12_FL_12_1_baseline\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"FL 12.1 baseline\",\n            \"description\": \"Minimum baseline to create a device with FL 12.1.\",\n            \"capabilities\": [\n                \"baseline_features\",\n                \"fl_11_1_features\",\n                \"fl_12_0_properties\",\n                \"subgroups_60\",\n                \"fl_12_0_features\",\n                \"fl_12_1_features\",\n                \"fl_12_1_features_rov\",\n                \"shader_model_60\"\n            ]\n        },\n        \"VP_D3D12_FL_12_2_baseline\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"FL 12.2 baseline\",\n            \"description\": \"Minimum baseline to create a device with FL 12.2 (TODO: missing sampler feedback).\",\n            \"capabilities\": [\n                \"baseline_features\",\n                \"fl_11_1_features\",\n                \"subgroups_60\",\n                \"fl_12_0_features\",\n                \"fl_12_1_features\",\n                \"fl_12_1_features_rov\",\n                \"fl_12_2_features\",\n                \"fl_12_2_properties\",\n                \"shader_model_60\"\n            ]\n        },\n        \"VP_D3D12_FL_12_2_optimal\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"FL 12.2 optimal\",\n            \"description\": \"Requirement to create a FL 12.2 device with optimal performance (TODO: missing sampler feedback). Shader model 6.6 and optimal descriptor model.\",\n            \"capabilities\": [\n                \"baseline_features\",\n                \"fl_11_1_features\",\n                \"subgroups_66\",\n                \"fl_12_0_features\",\n                \"fl_12_1_features\",\n                \"fl_12_1_features_rov\",\n                \"fl_12_2_features\",\n                \"fl_12_2_properties\",\n                \"shader_model_60\",\n                \"shader_model_66\",\n                \"optimal_performance\"\n            ]\n        },\n        \"VP_D3D12_maximum_radv\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"RADV latest\",\n            \"description\": \"Represents the maximum feature set vkd3d-proton takes advantage of on RADV. Expected to be supported on latest Mesa Git on RDNA2+.\",\n            \"capabilities\": [\n                \"baseline_features\",\n                \"fl_11_1_features\",\n                \"subgroups_66\",\n                \"fl_12_0_features\",\n                \"fl_12_1_features\",\n                \"fl_12_2_features\",\n                \"fl_12_2_properties\",\n                \"shader_model_60\",\n                \"shader_model_66\",\n                \"shader_model_67\",\n                \"optimal_performance\",\n                \"optional\",\n                \"optional_amd\"\n            ]\n        },\n        \"VP_D3D12_maximum_nv\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"NVIDIA latest\",\n            \"description\": \"Represents the maximum feature set vkd3d-proton takes advantage of on NVIDIA. Expected to be supported on latest beta drivers on Turing+.\",\n            \"capabilities\": [\n                \"baseline_features\",\n                \"fl_11_1_features\",\n                \"subgroups_66\",\n                \"fl_12_0_features\",\n                \"fl_12_1_features\",\n                \"fl_12_1_features_rov\",\n                \"fl_12_2_features\",\n                \"fl_12_2_properties\",\n                \"shader_model_60\",\n                \"shader_model_66\",\n                \"shader_model_67\",\n                \"optimal_performance\",\n                \"optional\",\n                \"optional_nv\"\n            ]\n        }\n    },\n    \"contributors\": {\n        \"Chistophe Riccio\": { \"company\": \"LunarG\" },\n        \"Hans-Kristian Arntzen\": { \"company\": \"Valve\" }\n    },\n    \"history\": [\n        {\n            \"revision\": 2,\n            \"date\": \"2024-02-09\",\n            \"author\": \"Hans-Kristian Arntzen\",\n            \"comment\": \"Add SM 6.7\"\n        },\n        {\n            \"revision\": 1,\n            \"date\": \"2023-05-23\",\n            \"author\": \"Hans-Kristian Arntzen\",\n            \"comment\": \"First draft\"\n        }\n    ]\n}\n"
        },
        {
          "name": "build-win32.txt",
          "type": "blob",
          "size": 0.294921875,
          "content": "[binaries]\nc = 'i686-w64-mingw32-gcc'\ncpp = 'i686-w64-mingw32-g++'\nar = 'i686-w64-mingw32-ar'\nstrip = 'i686-w64-mingw32-strip'\nwidl-mingw-tools-fallback = 'i686-w64-mingw32-widl'\n\n[properties]\nneeds_exe_wrapper = true\n\n[host_machine]\nsystem = 'windows'\ncpu_family = 'x86'\ncpu = 'x86'\nendian = 'little'\n"
        },
        {
          "name": "build-win64.txt",
          "type": "blob",
          "size": 0.310546875,
          "content": "[binaries]\nc = 'x86_64-w64-mingw32-gcc'\ncpp = 'x86_64-w64-mingw32-g++'\nar = 'x86_64-w64-mingw32-ar'\nstrip = 'x86_64-w64-mingw32-strip'\nwidl-mingw-tools-fallback = 'x86_64-w64-mingw32-widl'\n\n[properties]\nneeds_exe_wrapper = true\n\n[host_machine]\nsystem = 'windows'\ncpu_family = 'x86_64'\ncpu = 'x86_64'\nendian = 'little'\n"
        },
        {
          "name": "demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "khronos",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 7.16796875,
          "content": "project('vkd3d-proton', ['c', 'cpp'], version : '2.14.1', meson_version : '>= 0.49', default_options : [\n  'warning_level=2', 'c_std=c11', 'cpp_std=c++17'\n])\n\ncpu_family = target_machine.cpu_family()\n\nvkd3d_compiler = meson.get_compiler('c')\nvkd3d_is_msvc  = vkd3d_compiler.get_id() == 'msvc' or vkd3d_compiler.get_id() == 'clang-cl'\nvkd3d_is_clang = vkd3d_compiler.get_id() == 'clang' or vkd3d_compiler.get_id() == 'clang-cl'\nvkd3d_platform = target_machine.system()\n\nvkd3d_buildtype = get_option('buildtype')\nvkd3d_debug     = vkd3d_buildtype == 'debug' or vkd3d_buildtype == 'debugoptimized'\n\nenable_tests             = get_option('enable_tests')\nenable_extras            = get_option('enable_extras')\nenable_profiling         = get_option('enable_profiling')\nenable_renderdoc         = get_option('enable_renderdoc')\nenable_descriptor_qa     = get_option('enable_descriptor_qa')\nenable_trace             = get_option('enable_trace')\nenable_dxilconv          = get_option('enable_dxilconv')\n\nif enable_trace == 'auto'\n  enable_trace = vkd3d_debug\nelse\n  enable_trace = enable_trace == 'true'\nendif\n\nadd_project_arguments('-D_GNU_SOURCE',   language : 'c')\nadd_project_arguments('-DPACKAGE_VERSION=\"' + meson.project_version() + '\"',   language : 'c')\n\nif vkd3d_platform == 'windows'\n  add_project_arguments('-D_WIN32_WINNT=0x600', language : 'c')\nendif\n\nif enable_profiling\n  add_project_arguments('-DVKD3D_ENABLE_PROFILING', language : 'c')\nendif\n\nif enable_renderdoc\n  add_project_arguments('-DVKD3D_ENABLE_RENDERDOC', language : 'c')\nendif\n\nif enable_descriptor_qa\n  add_project_arguments('-DVKD3D_ENABLE_DESCRIPTOR_QA', language : 'c')\nendif\n\nif not enable_trace\n  add_project_arguments('-DVKD3D_NO_TRACE_MESSAGES', language : 'c')\nendif\n\nenable_breadcrumbs = enable_trace\nif enable_breadcrumbs\n  add_project_arguments('-DVKD3D_ENABLE_BREADCRUMBS', language : 'c')\nendif\n\nif enable_dxilconv and vkd3d_platform == 'windows'\n  add_project_arguments('-DVKD3D_ENABLE_DXILCONV', language : 'c')\nendif\n\nvkd3d_external_includes = [ './khronos/Vulkan-Headers/include', './khronos/SPIRV-Headers/include' ]\nvkd3d_public_includes   = [ './include' ] + vkd3d_external_includes\nvkd3d_private_includes  = [ './include/private' ] + vkd3d_public_includes\n\nvkd3d_external_includes = include_directories(vkd3d_external_includes)\nvkd3d_public_includes   = include_directories(vkd3d_public_includes)\nvkd3d_private_includes  = include_directories(vkd3d_private_includes)\n\nvkd3d_shader_private_includes = [ './libs/vkd3d-shader' ]\nvkd3d_shader_private_includes = include_directories(vkd3d_shader_private_includes)\n\nidl_compiler  = find_program('widl', required : false)\n# widl-stable is used on Debian. If cross-file defines widl-mingw-tools-fallback, that will also be attempted.\nif not idl_compiler.found()\n  idl_compiler  = find_program('widl-stable', 'widl-mingw-tools-fallback')\nendif\n\nidl_generator = generator(idl_compiler,\n  output    : [ '@BASENAME@.h' ],\n  arguments : [ '-h', '-o', '@OUTPUT@', '@INPUT@' ])\n\nglsl_compiler  = find_program('glslang', 'glslangValidator')\nglsl_args = [ '-V', '--target-env', 'vulkan1.3', '--vn', '@BASENAME@', '@INPUT@', '-o', '@OUTPUT@', '--depfile', '@DEPFILE@', '--quiet' ]\nglsl_generator = generator(glsl_compiler,\n  output    : [ '@BASENAME@.h' ],\n  depfile   : '@BASENAME@.h.d',\n  arguments : glsl_args)\n\nthreads_dep = dependency('threads')\n\nif vkd3d_platform == 'linux'\n  lib_dl           = vkd3d_compiler.find_library('dl')\n  vkd3d_extra_libs = [ lib_dl, threads_dep ]\nelif vkd3d_platform == 'windows'\n  lib_dxgi         = vkd3d_compiler.find_library('dxgi')\n  vkd3d_extra_libs = [ threads_dep ]\nelse\n  error('Unknown platform')\nendif\n\nadd_project_arguments(vkd3d_compiler.get_supported_arguments([\n    '-fvisibility=hidden',\n    '-msse',\n    '-msse2',\n    # For some reason, the use of VLAs isn't in all+extra+pedantic\n    # We don't want to use these accidentally from consts...\n    '-Wvla',\n    '-Wno-format',\n    '-Wno-missing-field-initializers',\n    '-Wno-unused-parameter',\n    '-Wdeclaration-after-statement',\n    '/wd4244', # Narrowing conversion\n    '/wd4101', # Unreferenced local variable\n    '/wd4267', # Another narrowing conversion\n    '/wd4996', # Secure no warnings\n    '/wd4334', # Result of 32-bit shift cast to 64-bit\n    '/wd4146', # Unary minus on unsigned\n    '/wd4305', # Truncation from double to float\n    ]),\n  language : 'c')\n\nif cpu_family == 'x86'\n  add_global_link_arguments(vkd3d_compiler.get_supported_link_arguments([\n      '-Wl,--kill-at',\n      '-Wl,--enable-stdcall-fixup']),\n    language : [ 'c', 'cpp' ])\n\n  # Need to link against libatomic for 64-bit atomic emulation on x86\n  # when using clang.\n  if vkd3d_platform == 'linux'\n    if vkd3d_is_clang\n      lib_atomic = vkd3d_compiler.find_library('atomic')\n      vkd3d_extra_libs += lib_atomic\n    endif\n  endif\nendif\n\nif not vkd3d_is_msvc\n  # We need to set the section alignment for debug symbols to\n  # work properly as well as avoiding a memcpy from the Wine loader.\n  if vkd3d_compiler.has_link_argument('-Wl,--file-alignment=4096')\n    add_global_link_arguments('-Wl,--file-alignment=4096', language : [ 'c', 'cpp' ])\n  endif\nendif\n\nif vkd3d_platform == 'windows'\n  if vkd3d_compiler.has_link_argument('-static')\n    add_global_link_arguments('-static', language : [ 'c', 'cpp' ])\n  endif\n  if vkd3d_compiler.has_link_argument('-static-libgcc')\n    add_global_link_arguments('-static-libgcc', language : [ 'c', 'cpp' ])\n  endif\n  if vkd3d_compiler.has_link_argument('-static-libstdc++')\n    add_global_link_arguments('-static-libstdc++', language : [ 'cpp' ])\n  endif\n  if vkd3d_compiler.has_link_argument('/NOIMPLIB')\n    add_global_link_arguments('/NOIMPLIB', language : [ 'c', 'cpp' ])\n  endif\n  if not vkd3d_is_clang and vkd3d_compiler.has_link_argument('/NOEXP')\n    add_global_link_arguments('/NOEXP', language : [ 'c', 'cpp' ])\n  endif\nendif\n\nvkd3d_build = vcs_tag(\n  command : ['git', 'describe', '--always', '--exclude=*', '--abbrev=15', '--dirty=0'],\n  input   : 'vkd3d_build.h.in',\n  output  : 'vkd3d_build.h')\n\nvkd3d_version = vcs_tag(\n  command : ['git', 'describe', '--always', '--tags', '--dirty=+'],\n  input   : 'vkd3d_version.h.in',\n  output  : 'vkd3d_version.h')\n\ndxil_spirv = subproject('dxil-spirv')\ndxil_spirv_dep = dxil_spirv.get_variable('dxil_spirv_dep')\n\nsubdir('include')\nsubdir('libs')\n\nif vkd3d_platform == 'windows'\n  # MinGW LD on x86 emits incorrect implib with ordinal suffixes.\n  # As a workaround, just link to the system D3D12.\n  lib_d3d12 = vkd3d_compiler.find_library('d3d12')\nelse\n  lib_d3d12 = d3d12_dep\nendif\n\nif vkd3d_platform == 'linux'\n  pkg = import('pkgconfig')\n  pkg.generate(vkd3d_lib, filebase : 'libvkd3d-proton', subdirs : 'vkd3d-proton', description : 'The vkd3d-proton D3D12 implementation')\n  install_headers('include/vkd3d_sonames.h', 'include/vkd3d.h', 'include/vkd3d_types.h', 'include/vkd3d_win32.h', 'include/vkd3d_windows.h', subdir : 'vkd3d-proton')\n  # TODO: Figure out how to export the IDL generated headers as well.\nendif\n\nif enable_tests\n  subdir('tests')\nendif\n\nif enable_extras\n  if vkd3d_platform == 'linux'\n    lib_m            = vkd3d_compiler.find_library('m')\n    lib_xcb          = vkd3d_compiler.find_library('xcb')\n    lib_xcbkeysyms   = vkd3d_compiler.find_library('xcb-keysyms')\n  endif\n\n  subdir('demos')\n  subdir('programs')\nendif\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.4951171875,
          "content": "option('enable_tests',            type : 'boolean', value : false)\noption('enable_extras',           type : 'boolean', value : false)\noption('enable_profiling',        type : 'boolean', value : false)\noption('enable_renderdoc',        type : 'boolean', value : false)\noption('enable_descriptor_qa',    type : 'boolean', value : false)\noption('enable_trace',            type : 'combo',   value : 'auto', choices : ['false', 'true', 'auto'])\noption('enable_dxilconv',         type : 'boolean', value : false)\n"
        },
        {
          "name": "package-release.sh",
          "type": "blob",
          "size": 2.1474609375,
          "content": "#!/usr/bin/env bash\n\nset -e\n\nshopt -s extglob\n\nif [ -z \"$1\" ] || [ -z \"$2\" ]; then\n  echo \"Usage: $0 version destdir [--native] [--no-package] [--dev-build] [--debug]\"\n  exit 1\nfi\n\nVKD3D_VERSION=\"$1\"\nVKD3D_SRC_DIR=$(dirname \"$(readlink -f \"$0\")\")\nVKD3D_BUILD_DIR=$(realpath \"$2\")\"/vkd3d-proton-$VKD3D_VERSION\"\nVKD3D_ARCHIVE_PATH=$(realpath \"$2\")\"/vkd3d-proton-$VKD3D_VERSION.tar.zst\"\n\nif [ -e \"$VKD3D_BUILD_DIR\" ]; then\n  echo \"Build directory $VKD3D_BUILD_DIR already exists\"\n  exit 1\nfi\n\nshift 2\n\nopt_nopackage=0\nopt_devbuild=0\nopt_native=0\nopt_buildtype=\"release\"\nopt_strip=--strip\n\nwhile [ $# -gt 0 ]; do\n  case \"$1\" in\n  \"--native\")\n    opt_native=1\n    ;;\n  \"--no-package\")\n    opt_nopackage=1\n    ;;\n  \"--dev-build\")\n    opt_strip=\n    opt_nopackage=1\n    opt_devbuild=1\n    ;;\n \"--debug\")\n    opt_buildtype=\"debug\"\n    ;;\n  *)\n    echo \"Unrecognized option: $1\" >&2\n    exit 1\n  esac\n  shift\ndone\n\nfunction build_arch {\n  local arch=\"$1\"\n  shift\n\n  cd \"$VKD3D_SRC_DIR\"\n\n  meson setup \"$@\"                     \\\n        --buildtype \"${opt_buildtype}\" \\\n        --prefix \"$VKD3D_BUILD_DIR\"    \\\n        $opt_strip                     \\\n        --bindir \"x${arch}\"            \\\n        --libdir \"x${arch}\"            \\\n        \"$VKD3D_BUILD_DIR/build.${arch}\"\n\n  cd \"$VKD3D_BUILD_DIR/build.${arch}\"\n  ninja install\n\n  if [ $opt_devbuild -eq 0 ]; then\n    if [ $opt_native -eq 0 ]; then\n        # get rid of some useless .a files\n        rm \"$VKD3D_BUILD_DIR/x${arch}/\"*.!(dll)\n    fi\n    rm -R \"$VKD3D_BUILD_DIR/build.${arch}\"\n  fi\n}\n\nfunction build_script {\n  cp \"$VKD3D_SRC_DIR/setup_vkd3d_proton.sh\" \"$VKD3D_BUILD_DIR/setup_vkd3d_proton.sh\"\n  chmod +x \"$VKD3D_BUILD_DIR/setup_vkd3d_proton.sh\"\n}\n\nfunction package {\n  cd \"$VKD3D_BUILD_DIR/..\"\n  tar -caf \"$VKD3D_ARCHIVE_PATH\" \"vkd3d-proton-$VKD3D_VERSION\"\n  rm -R \"vkd3d-proton-$VKD3D_VERSION\"\n}\n\nif [ $opt_native -eq 0 ]; then\n  build_arch 64 --cross-file build-win64.txt\n  build_arch 86 --cross-file build-win32.txt\n  build_script\nelse\n  build_arch 64\n  CC=\"gcc -m32\" CXX=\"g++ -m32\" PKG_CONFIG_PATH=\"/usr/lib32/pkgconfig:/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/pkgconfig\" build_arch 86\nfi\n\nif [ $opt_nopackage -eq 0 ]; then\n  package\nfi\n"
        },
        {
          "name": "profiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "programs",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup_vkd3d_proton.sh",
          "type": "blob",
          "size": 4.1796875,
          "content": "#!/usr/bin/env bash\n\n# default directories\nvkd3d_lib32=${vkd3d_lib32:-\"x86\"}\nvkd3d_lib64=${vkd3d_lib64:-\"x64\"}\n\n# figure out where we are\nbasedir=$(dirname \"$(readlink -f \"$0\")\")\n\n# figure out which action to perform\naction=\"$1\"\n\ncase \"$action\" in\ninstall)\n  ;;\nuninstall)\n  ;;\n*)\n  echo \"Unrecognized action: $action\"\n  echo \"Usage: $0 [install|uninstall] [--symlink]\"\n  exit 1\nesac\n\n# process arguments\nshift\n\nfile_cmd=\"cp -v\"\n\nwhile (($# > 0)); do\n  case \"$1\" in\n  \"--symlink\")\n    file_cmd=\"ln -s -v\"\n    ;;\n  esac\n  shift\ndone\n\n# check wine prefix before invoking wine, so that we\n# don't accidentally create one if the user screws up\nif [ -n \"$WINEPREFIX\" ] && ! [ -f \"$WINEPREFIX/system.reg\" ]; then\n  echo \"$WINEPREFIX:\"' Not a valid wine prefix.' >&2\n  exit 1\nfi\n\n# find wine executable\nexport WINEDEBUG=-all\n# disable mscoree and mshtml to avoid downloading\n# wine gecko and mono\nexport WINEDLLOVERRIDES=\"mscoree,mshtml=\"\n\nwine=\"wine\"\nwine64=\"wine64\"\nwineboot=\"wineboot\"\n\n# $PATH is the way for user to control where wine is located (including custom Wine versions).\n# Pure 64-bit Wine (non Wow64) requries skipping 32-bit steps.\n# In such case, wine64 and winebooot will be present, but wine binary will be missing,\n# however it can be present in other PATHs, so it shouldn't be used, to avoid versions mixing.\nwine_path=$(dirname \"$(which $wineboot)\")\nwow64=true\nif ! [ -f \"$wine_path/$wine\" ]; then\n   wine=$wine64\n   wow64=false\nfi\n\n# resolve 32-bit and 64-bit system32 path\nwinever=$($wine --version | grep wine)\nif [ -z \"$winever\" ]; then\n    echo \"$wine: Not a wine executable. Check your $wine.\" >&2\n    exit 1\nfi\n\n# ensure wine placeholder dlls are recreated\n# if they are missing\n$wineboot -u\n\nwin64_sys_path=$($wine64 winepath -u 'C:\\windows\\system32' 2> /dev/null)\nwin64_sys_path=\"${win64_sys_path/$'\\r'/}\"\nif $wow64; then\n  win32_sys_path=$($wine winepath -u 'C:\\windows\\system32' 2> /dev/null)\n  win32_sys_path=\"${win32_sys_path/$'\\r'/}\"\nfi\n\nif [ -z \"$win32_sys_path\" ] && [ -z \"$win64_sys_path\" ]; then\n  echo 'Failed to resolve C:\\windows\\system32.' >&2\n  exit 1\nfi\n\n# create native dll override\noverrideDll() {\n  if ! $wine reg add 'HKEY_CURRENT_USER\\Software\\Wine\\DllOverrides' /v \"$1\" /d native /f >/dev/null 2>&1\n  then\n    echo -e \"Failed to add override for $1\"\n    exit 1\n  fi\n}\n\n# remove dll override\nrestoreDll() {\n  if ! $wine reg delete 'HKEY_CURRENT_USER\\Software\\Wine\\DllOverrides' /v \"$1\" /f > /dev/null 2>&1\n  then\n    echo \"Failed to remove override for $1\"\n  fi\n}\n\n# copy or link vkd3d dll, back up original file\ninstallFile() {\n  dstfile=\"${1}/${3}.dll\"\n  srcfile=\"${basedir}/${2}/${3}.dll\"\n\n  if ! [ -f \"${srcfile}\" ]; then\n    echo \"${srcfile}: File not found. Skipping.\" >&2\n    return 1\n  fi\n\n  if [ -n \"$1\" ]; then\n    if [ -f \"${dstfile}\" ] || [ -h \"${dstfile}\" ]; then\n      if ! [ -f \"${dstfile}.old\" ]; then\n        mv -v \"${dstfile}\" \"${dstfile}.old\"\n      else\n        rm -v \"${dstfile}\"\n      fi\n    else\n      touch \"${dstfile}.old_none\"\n    fi\n    $file_cmd \"${srcfile}\" \"${dstfile}\"\n  fi\n  return 0\n}\n\n# remove vkd3d dll, restore original file\nuninstallFile() {\n  dstfile=\"${1}/${3}.dll\"\n  srcfile=\"${basedir}/${2}/${3}.dll\"\n\n  if ! [ -f \"${srcfile}\" ]; then\n    echo \"${srcfile}: File not found. Skipping.\" >&2\n    return 1\n  fi\n\n  if ! [ -f \"${dstfile}\" ] && ! [ -h \"${dstfile}\" ]; then\n    echo \"${dstfile}: File not found. Skipping.\" >&2\n    return 1\n  fi\n\n  if [ -f \"${dstfile}.old\" ]; then\n    rm -v \"${dstfile}\"\n    mv -v \"${dstfile}.old\" \"${dstfile}\"\n    return 0\n  elif [ -f \"${dstfile}.old_none\" ]; then\n    rm -v \"${dstfile}.old_none\"\n    rm -v \"${dstfile}\"\n    return 0\n  else\n    return 1\n  fi\n}\n\ninstall() {\n  installFile \"$win64_sys_path\" \"$vkd3d_lib64\" \"$1\"\n  inst64_ret=\"$?\"\n\n  inst32_ret=-1\n  if $wow64; then\n    installFile \"$win32_sys_path\" \"$vkd3d_lib32\" \"$1\"\n    inst32_ret=\"$?\"\n  fi\n\n  if (( (inst32_ret == 0) || (inst64_ret == 0) )); then\n    overrideDll \"$1\"\n  fi\n}\n\nuninstall() {\n  uninstallFile \"$win64_sys_path\" \"$vkd3d_lib64\" \"$1\"\n  uninst64_ret=\"$?\"\n\n  uninst32_ret=-1\n  if $wow64; then\n    uninstallFile \"$win32_sys_path\" \"$vkd3d_lib32\" \"$1\"\n    uninst32_ret=\"$?\"\n  fi\n\n  if (( (uninst32_ret == 0) || (uninst64_ret == 0) )); then\n    restoreDll \"$1\"\n  fi\n}\n\n$action d3d12\n$action d3d12core\n"
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vkd3d_build.h.in",
          "type": "blob",
          "size": 0.068359375,
          "content": "#include <stdint.h>\n\nstatic const uint64_t vkd3d_build = 0x@VCS_TAG@;\n"
        },
        {
          "name": "vkd3d_version.h.in",
          "type": "blob",
          "size": 0.0478515625,
          "content": "static const char vkd3d_version[] = \"@VCS_TAG@\";\n"
        }
      ]
    }
  ]
}