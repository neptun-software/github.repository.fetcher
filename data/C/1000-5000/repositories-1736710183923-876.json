{
  "metadata": {
    "timestamp": 1736710183923,
    "page": 876,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jvm-profiling-tools/perf-map-agent",
      "stars": 1663,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.078125,
          "content": "CMakeFiles\nCMakeCache.txt\ncmake_install.cmake\nMakefile\n*~\nout\n.idea\n*.iml\n*.svg\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.9189453125,
          "content": "language: cpp\nmatrix:\n  include:\n    - os: linux\n      dist: trusty\n      sudo: required\n      compiler: gcc\n    - os: linux\n      dist: trusty\n      sudo: required\n      compiler: clang\n    - os: osx\n      osx_image: xcode7.3\n      compiler: gcc\n    - os: osx\n      osx_image: xcode7.3\n      compiler: clang\n    - os: osx\n      osx_image: xcode9\n      compiler: gcc\n    - os: osx\n      osx_image: xcode9\n      compiler: clang\nbranches:\n  only:\n  - master\nbefore_install:\n  - if [ $TRAVIS_OS_NAME == linux ]; then sudo apt-get update && sudo apt-get install -y default-jdk && sudo apt-get install -y cmake; fi\n  - if [ $TRAVIS_OS_NAME == osx ]; then brew update && brew uninstall cmake && brew install cmake && brew tap caskroom/versions && brew cask reinstall java8; fi\n  - g++ --version\n  - clang++ --version\n  - java -version\n  - if [ $TRAVIS_OS_NAME == osx ]; then export JAVA_HOME=$(/usr/libexec/java_home); fi\n\nscript: cmake . && make\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.1474609375,
          "content": "cmake_minimum_required (VERSION 2.8.6)\nproject (perf-map-agent)\n\n# uncomment to make a debug build (including source positions and symbols)\n# set(CMAKE_BUILD_TYPE DEBUG)\n\n# Binaries (agent libperfmap.so and attach-main.jar) will end up in ./out\nset(OUTDIR ${PROJECT_BINARY_DIR}/out)\nset(LIBRARY_OUTPUT_PATH ${OUTDIR})\n\nfind_package(JNI)\nif (JNI_FOUND)\n    message (STATUS \"JNI_INCLUDE_DIRS=${JNI_INCLUDE_DIRS}\")\n    message (STATUS \"JNI_LIBRARIES=${JNI_LIBRARIES}\")\n    message (STATUS \"JAVA_INCLUDE_PATH=${JAVA_INCLUDE_PATH}\")\n    message (STATUS \"JAVA_INCLUDE_PATH2=${JAVA_INCLUDE_PATH2}\")\nendif()\nINCLUDE_DIRECTORIES(${JAVA_INCLUDE_PATH})\nINCLUDE_DIRECTORIES(${JAVA_INCLUDE_PATH2})\n\nadd_library(perfmap SHARED src/c/perf-map-agent.c src/c/perf-map-file.c)\n\nfind_package(Java REQUIRED)\ninclude(UseJava)\n\nset(CMAKE_JAVA_INCLUDE_PATH ${JAVA_INCLUDE_PATH}/../lib/tools.jar)\nset(CMAKE_JAVA_TARGET_OUTPUT_DIR ${OUTDIR})\n\n#message(STATUS \"LIBS: ${Java_JAR_EXECUTABLE} ${Java_INCLUDE_DIRS} incl: ${CMAKE_JAVA_INCLUDE_PATH} output_dir: ${CMAKE_JAVA_TARGET_OUTPUT_DIR}\")\nadd_jar(attach-main src/java/AttachOnce.java ENTRY_POINT net/virtualvoid/perf/AttachOnce OUTPUT_DIR ${OUTDIR})\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 14.8330078125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc., <http://fsf.org/>\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.6298828125,
          "content": "# perf-map-agent\n\n[![Join the chat at https://gitter.im/jrudolph/perf-map-agent](https://badges.gitter.im/jrudolph/perf-map-agent.svg)](https://gitter.im/jrudolph/perf-map-agent?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.org/jvm-profiling-tools/perf-map-agent.svg?branch=master)](https://travis-ci.org/jvm-profiling-tools/perf-map-agent)\n\nA java agent to generate `/tmp/perf-<pid>.map` files for just-in-time(JIT)-compiled methods for use with the [Linux `perf` tools](https://perf.wiki.kernel.org/index.php/Main_Page).\n\n## Build\n\nMake sure `JAVA_HOME` is configured to point to a JDK. You need cmake >= 2.8.6 (see [#30](https://github.com/jrudolph/perf-map-agent/issues/30)). Then run the following on the command line:\n\n    cmake .\n    make\n\n    # will create links to run scripts in <somedir>\n    bin/create-links-in <somedir>\n\n## Architecture\n\nLinux `perf` tools will expect symbols for code executed from unknown memory regions at `/tmp/perf-<pid>.map`. This allows runtimes that\ngenerate code on the fly to supply dynamic symbol mappings to be used with the `perf` suite of tools.\n\nperf-map-agent is an agent that will generate such a mapping file for Java applications. It consists of a Java agent written C and a small\nJava bootstrap application which attaches the agent to a running Java process.\n\nWhen the agent is attached it instructs the JVM to report code blobs generated by the JVM at runtime for various purposes. Most importantly,\nthis includes JIT-compiled methods but also various dynamically-generated infrastructure parts like the dynamically created interpreter, \nadaptors, and jump tables for virtual dispatch (see `vtable` and `itable` entries). The agent creates a `/tmp/perf-<pid>.map` file which\nit fills with one line per code blob that maps a memory location to a code blob name.\n\nThe Java application takes the PID of a Java process as an argument and an arbitrary number of additional arguments which it passes to the agent.\nIt then attaches to the target process and instructs it to load the agent library.\n\n## Command line scripts\n\nThe `bin` directory contains a set of shell scripts to combine common `perf` / `dtrace` perations with creating the map file.\n\n - `create-java-perf-map.sh <pid> <options*>` takes a PID and options. It knows where to find libraries relative to the `bin` directory.\n - `perf-java-top <pid> <perf-top-options>` takes a PID and additional options to pass to `perf top`. Uses the agent to create a new\n    `/tmp/perf-<pid>.map` and then calls `perf top` with the given options.\n - `perf-java-record-stack <pid> <perf-record-options>` takes a PID and additional options to pass to `perf record`. Runs\n   `perf record -g -p <pid> <perf-record-options>` to collect performance data including stack traces. Afterwards it uses the agent to create a\n   new `/tmp/perf-<pid>.map` file.\n - `perf-java-report-stack <pid> <perf-record-options>` calls first `perf-java-record-stack <pid> <perf-record-options>` and then runs\n   `perf report` to directly analyze the captured data. You can call `perf report -i /tmp/perf-<pid>.data` again with any options after the\n   script has exited to further analyze the data from the previous run.\n - `perf-java-flames <pid> <perf-record-options>` collects data with `perf-java-record-stack` and then creates a visualization\n   using [@brendangregg's FlameGraph](https://github.com/brendangregg/FlameGraph) tools. To get meaningful stacktraces spanning several JIT-compiled methods,\n   you need to run your JVM with `-XX:+PreserveFramePointer` (which is available starting from JDK8 update 60 build 19) as detailed\n   in [ag netflix blog entry](http://techblog.netflix.com/2015/07/java-in-flames.html).\n - `create-links-in <targetdir>` will install symbolic links to the above scripts into `<targetdir>`.\n - `dtrace-java-record-stack <pid>` takes a PID. Runs`dtrace` to collect performance data including stack traces. Afterwards it uses the agent to create a\n   new `/tmp/perf-<pid>.map` file.\n - `dtrace-java-flames <pid>` collects data with `dtrace-java-record-stack` and then creates a visualization\n   using [@brendangregg's FlameGraph](https://github.com/brendangregg/FlameGraph) tools. To get meaningful stacktraces spanning several JIT-compiled methods,\n   you need to run your JVM with `-XX:+PreserveFramePointer` (which is available starting from JDK8 update 60 build 19) as detailed\n   in [ag netflix blog entry](http://techblog.netflix.com/2015/07/java-in-flames.html).\n\nEnvironment variables:\n\n - `PERF_MAP_OPTIONS`: a string of additional options to pass to the agent as described below.\n - `PERF_RECORD_SECONDS`: the number of seconds, `perf-java-report-stack` and similar tools will record performance data\n - `PERF_RECORD_FREQ`: the sampling frequence as passed to `perf record -F`\n - `FLAMEGRAPH_DIR`: the directory into which [@brendangregg's FlameGraph](https://github.com/brendangregg/FlameGraph) has been checked out\n - `PERF_JAVA_TMP`: the directory to put temporary files in, the default is `/tmp`\n - `PERF_DATA_FILE`: the file name where `perf-java-record-stack` will output performance data into, the default is `$PERF_JAVA_TMP/perf-<pid>.data`\n - `PERF_COLLAPSE_OPTS`: a string of additional flags to pass to stackcollapse-perf.pl (found in FLAMEGRAPH_DIR), (add --inline with unfoldall perfmap) \n - `PERF_FLAME_OUTPUT`: the file name to which the flamegraph SVG will be written, the default is `flamegraph-<pid>.svg`\n - `PERF_FLAME_OPTS`: options to pass to flamegraph.pl (found in FLAMEGRAPH_DIR), the default is  `--color java`\n - `DTRACE_SECONDS`: the number of seconds, `dtrace` and similar tools will record performance data\n - `DTRACE_FREQ`: the sampling frequence as passed to `dtrace`\n - `DTRACE_JAVA_TMP`: the directory to put temporary files in, the default is `/tmp`\n - `DTRACE_DATA_FILE`: the file name where `dtrace-java-record-stack` will output performance data into, the default is `$DTRACE_JAVA_TMP/dtrace-<pid>.data`\n\n## Options\n\nYou can add a comma separated list of options to `perf-java` (or the `AttachOnce` runner). These options are currently supported:\n\n - `unfold`: Create extra entries for every codeblock inside a method that was inlined from elsewhere\n    (named &lt;inlined_method&gt; in &lt;root_method&gt;). Be aware of the effects of 'skid' in relation with unfolding.\n    See the section below. Also, see the below section about inaccurate inlining information.\n - `unfoldall`: Similar to `unfold` but will include the complete inlined stack at a code location in the form\n    `root_method->inlined method 1->inlined method 2->...->inlined method on top`.\n - `unfoldsimple`: similar to `unfold`, however, the extra entries do not include the \" in &lt;root_method&gt;\" part\n - `msig`: include full method signature in the name string\n - `dottedclass`: convert class signature (`Ljava/lang/Class;`) to the usual class names with segments separated by dots\n   (`java.lang.Class`). NOTE: this currently breaks coloring when used in combination with [flamegraphs](https://github.com/brendangregg/FlameGraph).\n - `sourcepos`: Adds the name of the source file and the line number on which it is declared for each method. Useful\n   when profiling Scala applications that crate a lot of synthetic classes and methods. Does not work with native methods.\n\n## Known Issues\n\n### Skid\n\nYou should be aware that instruction level profiling is not absolutely accurate but suffers from\n'[skid](http://www.spinics.net/lists/linux-perf-users/msg02157.html)'. 'skid' means that the actual instruction\npointer may already have moved a bit further when a sample is recorded. In that case, (possibly hot) code is reported at\nan address shortly after the actual hot instruction. See this [sample from one of Brendan's presentations](http://www.slideshare.net/brendangregg/scale2015-linux-perfprofiling/65) demonstrating this issue.\n\nIf using `unfold`, perf-map-agent will report sections that contain code inlined from other methods as separate entries.\nUnfolded entries can be quite short, e.g. an inlined getter may only consist of a few instructions that now lives inside of another\nmethod's JITed code. The next few instructions may then already belong to another entry. In such a case, it is more likely that skid\nwill not only affect the instruction pointer inside of a method entry but may affect which entry is chosen in the first place.\n\nSkid that occurs inside a method is only visible when analyzing the actual assembler code (as with `perf annotate`). Skid that\naffects the actual symbol resolution to choose a wrong entry will be much more visible as wrong entries will be reported with\ntools that operate on the symbol level like the standard views of `perf report`, `perf top`, or in flame graphs.\n\nSo, while it is tempting to enable unfolded entries for the perceived extra resolution, this extra information is sometimes just noise\nwhich will not only clutter the overall view but may also be misleading or wrong.\n\n### Inaccurate mappings using the `unfold*` options\n\nHotspot does not retain line number and other debug information for inlined code at other places than safepoints. This\nmakes sense because you don't usually observe code running between safepoints from the JVM's perspective. This is different\nwhen observing a process from the outside like with `perf`. For observed code locations outside of safepoints, the JVM will\nnot report any inlining information and perf-map-agent will assign those areas to the host method of the inlining.\n\nFor more fidelity, Hotspot can be instructed to include debug information for non-safepoints as well. Use\n`-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints` when running the target process. Note, however, that this will\nproduce a lot more information with the generated `perf-<pid>.map` file potentially growing to MBs of size.\n\n### Agent Library Unloading\n\nUnloading or reloading of a changed agent library is not supported by the JVM (but re-attaching is). Therefore, if you make changes to the\nagent and recompile it you need to restart a target process that has an older version loaded to use the newer version.\n\n### Missing symbols for libjvm.so\n\nlibjvm.so is the runtime component of the JVM. It is not covered by perf-map-agent but perf will use debug symbols as\nprovided by the distribution. If symbols for libjvm.so are missing see instructions for your Linux distribution to\ninstall debug symbols for the JVM. See also [issue #39](https://github.com/jrudolph/perf-map-agent/issues/39) which\ncontains a few pointers about how to install these.\n\n## Disclaimer\n\nI'm not a professional C code writer. The code is very \"experimental\", and it is e.g. missing checks for error conditions etc.. Use it at your own risk. You have been warned!\n\n## License\n\nThis library is licensed under GPLv2. See the LICENSE file.\n\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}