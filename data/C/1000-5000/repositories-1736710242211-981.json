{
  "metadata": {
    "timestamp": 1736710242211,
    "page": 981,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jmcnamara/libxlsxwriter",
      "stars": 1554,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.173828125,
          "content": "FreeBSD_task:\n  freebsd_instance:\n    image_family: freebsd-14-0\n  setup_script:\n    pkg install -y gmake devel/py-pytest\n  build_script:\n    gmake\n  test_script:\n    gmake test\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8359375,
          "content": "*.a\n*.o\n*.so\n*.so.*\n*.to\n*.lo\n*.la\n*.dylib\n*.dll\n*.gcno\n*.gcda\ntest_*\n!test_*.c\n!test_*.cpp\n!test_*.py\n*.tar.gz\n*~\nTAGS\n.#*\n*#\n~*xlsx\n*.xlsx\n*.bak\n!test/functional/xlsx_files/*.xlsx\n*.pyc\n.pytest_cache/\n.cproject\n.project\n.pydevproject\n.settings/\n.DS_Store\n__pycache__\n.cache\ndocs/html\ndocs/latex\n.deps\n.dirstamp\n_temp.c\nexamples/*\n!examples/*.c\n!examples/*.png\n!examples/Makefile\n!examples/vbaProject.bin\ncov-int\nlibxlsxwriter-coverity.tgz\nbuild\n\nthird_party/zlib-1.2.8/configure.log\nthird_party/zlib-1.2.8/contrib/minizip/miniunz\nthird_party/zlib-1.2.8/contrib/minizip/minizip\nthird_party/zlib-1.2.8/example\nthird_party/zlib-1.2.8/examplesh\nthird_party/zlib-1.2.8/minigzip\nthird_party/zlib-1.2.8/minigzipsh\nthird_party/zlib-1.2.8/zlib.pc\n\ncmake\n!cmake/FindMINIZIP.cmake\n!cmake/FindPackage.cmake\n!cmake/i686-toolchain.cmake\n\n.vscode\n\n*zig-cache/\nzig-out/\n"
        },
        {
          "name": ".indent.pro",
          "type": "blob",
          "size": 3.208984375,
          "content": "/*\n * Indent rules for libxlsxwriter.\n *\n * The rules for user defined typedefs can be update as follows:\n *\n   perl -i -pe 'print and last if /[l]ibxlsxwriter typedefs/' .indent.pro\n   ack -h typedef include/xlsxwriter/*.h src/*.c | perl -lne 'print \"-T $1\" if /\\w+\\s+\\w+\\s+(\\w+)/' | sort >> .indent.pro\n *\n */\n\n/* Command line options used with GNU indent 2.2.10 */\n--braces-on-if-line\n--braces-on-struct-decl-line\n--case-indentation 4\n--continue-at-parentheses\n--declaration-comment-column 0\n--format-first-column-comments\n--honour-newlines\n--ignore-profile\n--indent-label 0\n--indent-level 4\n--no-space-after-function-call-names\n--no-tabs\n--swallow-optional-blank-lines\n\n/* Typedefs used in the code. */\n-T int8_t\n-T int16_t\n-T int32_t\n-T int64_t\n-T uint8_t\n-T uint16_t\n-T uint32_t\n-T uint64_t\n-T ssize_t\n-T size_t\n-T time_t\n\n-T LIST_ENTRY\n-T RB_ENTRY\n-T SLIST_ENTRY\n-T STAILQ_ENTRY\n-T TAILQ_ENTRY\n\n/* libxlsxwriter typedefs. */\n-T lxw_app\n-T lxw_author_id\n-T lxw_autofilter\n-T lxw_border\n-T lxw_button_options\n-T lxw_cell\n-T lxw_chart\n-T lxw_chart_axis\n-T lxw_chart_axis_display_unit\n-T lxw_chart_axis_label_alignment\n-T lxw_chart_axis_label_position\n-T lxw_chart_axis_tick_mark\n-T lxw_chart_axis_tick_position\n-T lxw_chart_axis_type\n-T lxw_chart_blank\n-T lxw_chart_custom_label\n-T lxw_chart_data_label\n-T lxw_chart_error_bar_axis\n-T lxw_chart_error_bar_cap\n-T lxw_chart_error_bar_direction\n-T lxw_chart_error_bar_type\n-T lxw_chart_fill\n-T lxw_chart_font\n-T lxw_chart_gridline\n-T lxw_chart_label_position\n-T lxw_chart_label_separator\n-T lxw_chart_legend\n-T lxw_chart_legend_position\n-T lxw_chart_line\n-T lxw_chart_line_dash_type\n-T lxw_chart_marker\n-T lxw_chart_marker_type\n-T lxw_chart_options\n-T lxw_chart_pattern\n-T lxw_chart_pattern_type\n-T lxw_chart_point\n-T lxw_chart_series\n-T lxw_chart_title\n-T lxw_chart_trendline_type\n-T lxw_chart_type\n-T lxw_chartsheet\n-T lxw_chartsheet_name\n-T lxw_col_options\n-T lxw_col_t\n-T lxw_color_t\n-T lxw_comment\n-T lxw_comment_options\n-T lxw_cond_format_hash_element\n-T lxw_cond_format_obj\n-T lxw_conditional_format\n-T lxw_content_types\n-T lxw_core\n-T lxw_custom\n-T lxw_custom_property\n-T lxw_data_val_obj\n-T lxw_data_validation\n-T lxw_datetime\n-T lxw_defined_name\n-T lxw_doc_properties\n-T lxw_drawing\n-T lxw_drawing_coords\n-T lxw_drawing_object\n-T lxw_drawing_rel_id\n-T lxw_error\n-T lxw_fill\n-T lxw_filter_rule\n-T lxw_filter_rule_obj\n-T lxw_font\n-T lxw_format\n-T lxw_hash_element\n-T lxw_hash_table\n-T lxw_header_footer_options\n-T lxw_heading_pair\n-T lxw_image_md5\n-T lxw_image_options\n-T lxw_merged_range\n-T lxw_metadata\n-T lxw_object_properties\n-T lxw_packager\n-T lxw_panes\n-T lxw_part_name\n-T lxw_print_area\n-T lxw_protection\n-T lxw_protection_obj\n-T lxw_rel_tuple\n-T lxw_relationships\n-T lxw_repeat_cols\n-T lxw_repeat_rows\n-T lxw_rich_string_tuple\n-T lxw_rich_value\n-T lxw_rich_value_rel\n-T lxw_rich_value_structure\n-T lxw_rich_value_types\n-T lxw_row\n-T lxw_row_col_options\n-T lxw_row_t\n-T lxw_selection\n-T lxw_series_data_point\n-T lxw_series_error_bars\n-T lxw_series_range\n-T lxw_sheet\n-T lxw_sst\n-T lxw_styles\n-T lxw_table\n-T lxw_table_column\n-T lxw_table_obj\n-T lxw_table_options\n-T lxw_theme\n-T lxw_tuple\n-T lxw_vml\n-T lxw_vml_obj\n-T lxw_workbook\n-T lxw_workbook_options\n-T lxw_worksheet\n-T lxw_worksheet_init_data\n-T lxw_worksheet_name\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 16.0927734375,
          "content": "#  :copyright: (c) 2017 Alex Huszagh.\n#  :license: FreeBSD, see LICENSE.txt for more details.\n\n# Description\n# ===========\n#\n#   Use:\n#       Move to a custom directory, ideally out of source, and\n#       type `cmake $LXW_SOURCE $FLAGS`, where `LXW_SOURCE` is the\n#       path to the libxlsxwriter project, and `FLAGS` are custom\n#       flags to pass to the compiler.\n#\n#   Example:\n#       For example, in the project directory, to build libxlsxwriter\n#       and the unittests in release mode, type:\n#           mkdir build && cd build\n#           cmake .. -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release\n#           cmake --build . --config Release\n#           ctest -C Release -V\n#           cmake --build . --config Release --target install\n#\n#       If using a Makefile generator, you may use the simpler\n#           mkdir build && cd build\n#           cmake .. -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release\n#           make\n#           make test\n#           make install\n#\n#   Flags:\n#       ZLIB_ROOT\n#           The ZLIB root directory can be specified either through\n#           an environment variable (`export ZLIB_ROOT=/usr/include`)\n#           or using a flag with CMake (`-DZLIB_ROOT:STRING=/usr/include`).\n#           This sets the preferred search path for the ZLIB installation.\n#\n#       BUILD_TESTS\n#           Build unittests (default off). To build the unittests,\n#           pass `-DBUILD_TESTS=ON` during configuration.\n#\n#       BUILD_EXAMPLES\n#           Build example files (default off). To build the examples,\n#           pass `-DBUILD_EXAMPLES=ON` during configuration.\n#\n#       BUILD_FUZZERS\n#           Build fuzz harnesses (default off). To build the harnesses,\n#           pass `-DBUILD_FUZZERS=ON` during configuration.\n#\n#       USE_STANDARD_TMPFILE\n#           Use the standard tmpfile() function (default off). To enable\n#           the standard tmpfile, pass `-DUSE_STANDARD_TMPFILE=ON`\n#           during configuration. This may produce bugs while cross-\n#           compiling or using MinGW/MSYS.\n#\n#       USE_DTOA_LIBRARY\n#           Use the third party emyg_dtoa() library (default off). The\n#           emyg_dtoa() library is used to avoid sprintf double issues with\n#           different locale settings. To enable this library, pass\n#           `-DUSE_DTOA_LIBRARY=ON` during configuration.\n#\n#       USE_NO_MD5\n#           Compile without third party MD5 support. This will turn off the\n#           functionality of avoiding duplicate image files in the output xlsx\n#           file. To enable this option pass `-DUSE_NO_MD5=ON` during\n#           configuration.\n#\n#       USE_OPENSSL_MD5 Compile with OpenSSL MD5 support. This will link\n#           against libcrypto for MD5 support rather than using the local MD5\n#           support. MD5 support is required to avoid duplicate image files in\n#           the output xlsx file. To enable this option pass\n#           `-DUSE_OPENSSL_MD5=ON` during configuration.\n#\n#       USE_STATIC_MSVC_RUNTIME\n#           Use the static msvc runtime library when compiling with msvc (default off)\n#           To enable, pass `-DUSE_STATIC_MSVC_RUNTIME` during configuration.\n#\n#   Toolchains:\n#       On multiarch Linux systems, which can build and run multiple\n#       binary targets on the same system, we include an `i686-toolchain`\n#       file to enable building i686 (x86 32-bit) targets on x86_64 systems.\n#       To use the i686 toolchain, pass the `-DCMAKE_TOOLCHAIN_FILE` option\n#       during CMake configuration. For example, from the build directory,\n#       you would use:\n#           cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/i686-toolchain.cmake\n#\n#   CMake Options:\n#       CMake sets debug and release builds with the `CMAKE_BUILD_TYPE`\n#       option, which can be set as a flag during configuration.\n#       To build in release mode, pass `-DCMAKE_BUILD_TYPE=Release`\n#       during configuration.\n#\n#       CMake sets the creation of static and shared libraries with the\n#       `BUILD_SHARED_LIBS` option, which can be set as a flag during\n#       configuration. To build a static library, pass\n#       `-DBUILD_SHARED_LIBS=OFF` during configuration.\n#\n#   Generators:\n#       CMake also supports custom build generators, such as MakeFiles,\n#       Ninja, Visual Studio, and XCode. For example, to generate\n#       a Visual Studio solution, configure with:\n#           cmake .. -G \"Visual Studio 14 2015 Win64\"\n#\n#       For more information on using generators, see:\n#           https://cmake.org/cmake/help/v3.0/manual/cmake-generators.7.html\n#\n\nset(CMAKE_LEGACY_CYGWIN_WIN32 1)\nif(MSVC)\n    cmake_minimum_required(VERSION 3.4)\nelse()\n    cmake_minimum_required(VERSION 3.1)\nendif()\n\nSET(XLSX_PROJECT_NAME \"xlsxwriter\" CACHE STRING \"Optional project and binary name\")\nset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\nproject(${XLSX_PROJECT_NAME} C)\nenable_testing()\n\n# POLICY\n# ------\n\n# The use of the word ZLIB_ROOT should still work prior to \"3.12.0\",\n# just it's been generalized for all packages now. Just set the policy\n# to new, so we use it, and it will be used prior to 3.12 anyway.\nif(${CMAKE_VERSION} VERSION_GREATER \"3.12\" OR ${CMAKE_VERSION} VERSION_EQUAL \"3.12\")\n    cmake_policy(SET CMP0074 NEW)\nendif()\n\n# OPTIONS\n# -------\nSET(ZLIB_ROOT \"\" CACHE STRING \"Optional root for the ZLIB installation\")\n\noption(BUILD_TESTS \"Build libxlsxwriter tests\" OFF)\noption(BUILD_EXAMPLES \"Build libxlsxwriter examples\" OFF)\noption(BUILD_FUZZERS \"Build harness(es) for fuzzing\" OFF)\noption(USE_SYSTEM_MINIZIP \"Use system minizip installation\" OFF)\noption(USE_STANDARD_TMPFILE \"Use the C standard library's tmpfile()\" OFF)\noption(USE_NO_MD5 \"Build libxlsxwriter without third party MD5 lib\" OFF)\noption(USE_OPENSSL_MD5 \"Build libxlsxwriter with the OpenSSL MD5 lib\" OFF)\noption(USE_MEM_FILE \"Use fmemopen()/open_memstream() in place of temporary files\" OFF)\noption(IOAPI_NO_64 \"Disable 64-bit filesystem support\" OFF)\noption(USE_DTOA_LIBRARY \"Use the locale independent third party Milo Yip DTOA library\" OFF)\n\nif(MSVC)\n    option(USE_STATIC_MSVC_RUNTIME \"Use the static runtime library\" OFF)\nendif()\n\nif(DEFINED ENV{ZLIB_ROOT})\n    set(ZLIB_ROOT $ENV{ZLIB_ROOT})\nendif()\n\nif(IOAPI_NO_64)\n    list(APPEND LXW_PRIVATE_COMPILE_DEFINITIONS IOAPI_NO_64=1)\nendif()\n\n# CONFIGURATIONS\n# --------------\nif(USE_SYSTEM_MINIZIP)\n    list(APPEND LXW_PRIVATE_COMPILE_DEFINITIONS USE_SYSTEM_MINIZIP)\nendif()\n\nif(USE_STANDARD_TMPFILE)\n    list(APPEND LXW_PRIVATE_COMPILE_DEFINITIONS USE_STANDARD_TMPFILE)\nendif()\n\nif(NOT USE_OPENSSL_MD5 AND USE_NO_MD5)\n    list(APPEND LXW_PRIVATE_COMPILE_DEFINITIONS USE_NO_MD5)\nendif()\n\nif(USE_OPENSSL_MD5)\n    list(APPEND LXW_PRIVATE_COMPILE_DEFINITIONS USE_OPENSSL_MD5)\n    if(NOT MSVC)\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-deprecated-declarations\")\n    endif()\nendif()\n\nif(USE_MEM_FILE OR USE_FMEMOPEN)\n    list(APPEND LXW_PRIVATE_COMPILE_DEFINITIONS USE_FMEMOPEN)\nendif()\n\nif(USE_DTOA_LIBRARY)\n    list(APPEND LXW_PRIVATE_COMPILE_DEFINITIONS USE_DTOA_LIBRARY)\nendif()\n\nif(NOT BUILD_SHARED_LIBS)\n    if(UNIX)\n        set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n    elseif(MINGW OR MSYS)\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -static -static-libgcc -Wno-char-subscripts -Wno-long-long\")\n        list(APPEND LXW_PRIVATE_COMPILE_DEFINITIONS USE_FILE32API)\n    elseif(MSVC)\n        set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /Fd\\\"${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pdb\\\"\")\n        set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /Ox /Zi /Fd\\\"${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pdb\\\"\")\n        set(CMAKE_C_FLAGS_MINSIZEREL \"${CMAKE_C_FLAGS_MINSIZEREL} /Zi /Fd\\\"${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pdb\\\"\")\n        set(CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO} /Fd\\\"${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pdb\\\"\")\n    endif()\nendif()\n\nif(MSVC AND USE_STATIC_MSVC_RUNTIME)\n    foreach(flag_var CMAKE_C_FLAGS\n                     CMAKE_C_FLAGS_DEBUG\n                     CMAKE_C_FLAGS_RELEASE\n                     CMAKE_C_FLAGS_MINSIZEREL\n                     CMAKE_C_FLAGS_RELWITHDEBINFO)\n        if(${flag_var} MATCHES \"/MD\")\n            string(REPLACE \"/MD\" \"/MT\" ${flag_var} \"${${flag_var}}\")\n        endif()\n    endforeach()\nendif()\n\n# Configure pkg-config\nfind_package(PkgConfig)\nfile(READ \"include/xlsxwriter.h\" ver)\n\nstring(REGEX MATCH \"LXW_VERSION \\\"([^\\\"]+)\\\"\" _ ${ver})\nset(VERSION ${CMAKE_MATCH_1})\nstring(REGEX MATCH \"LXW_SOVERSION \\\"([^\\\"]+)\\\"\" _ ${ver})\nset(SOVERSION ${CMAKE_MATCH_1})\nset(PREFIX ${CMAKE_INSTALL_PREFIX})\n\nconfigure_file(dev/release/pkg-config.txt xlsxwriter.pc @ONLY)\n\n# INCLUDES\n# --------\nenable_language(CXX)\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\n\n# ZLIB\nif(PKG_CONFIG_FOUND)\n    pkg_check_modules(ZLIB zlib)\n    list(APPEND LXW_PRIVATE_INCLUDE_DIRS ${ZLIB_INCLUDE_DIRS})\nelse(NOT ZLIB_FOUND)\n    find_package(ZLIB \"1.0\" REQUIRED)\n    list(APPEND LXW_PRIVATE_INCLUDE_DIRS ${ZLIB_INCLUDE_DIRS})\n    message(\"zlib version: \" ${ZLIB_VERSION})\nendif()\n\n# MINIZIP\nif(USE_SYSTEM_MINIZIP)\n    if(PKG_CONFIG_FOUND)\n        pkg_check_modules(MINIZIP minizip)\n        list(APPEND LXW_PRIVATE_INCLUDE_DIRS ${MINIZIP_INCLUDE_DIRS}/..)\n    else(NOT MINIZIP_FOUND)\n        find_package(MINIZIP \"1.0\" REQUIRED)\n        list(APPEND LXW_PRIVATE_INCLUDE_DIRS ${MINIZIP_INCLUDE_DIRS})\n    endif()\nendif()\n\n# LIBRARY\n# -------\nlist(APPEND LXW_PRIVATE_COMPILE_DEFINITIONS NOCRYPT NOUNCRYPT)\n\n# Ensure CRT Secure warnings are disabled\nif(MSVC)\n    list(APPEND LXW_PRIVATE_COMPILE_DEFINITIONS _CRT_SECURE_NO_WARNINGS)\nendif()\n\n# Ensure \"TESTING\" macro is defined if building tests\nif(BUILD_TESTS)\n    list(APPEND LXW_PRIVATE_COMPILE_DEFINITIONS TESTING)\nendif()\n\n# Define \"LXW_BIG_ENDIAN\" macro on big-endian architectures\ninclude(TestBigEndian)\nTEST_BIG_ENDIAN(LXW_TARGET_BIG_ENDIAN)\nif(LXW_TARGET_BIG_ENDIAN)\n    list(APPEND LXW_PRIVATE_COMPILE_DEFINITIONS LXW_BIG_ENDIAN)\nendif()\n\nfile(GLOB LXW_SOURCES src/*.c)\nfile(GLOB_RECURSE LXW_HEADERS RELATIVE include *.h)\n\nif(NOT USE_SYSTEM_MINIZIP)\n    list(APPEND LXW_SOURCES third_party/minizip/ioapi.c third_party/minizip/zip.c)\n    if(MSVC)\n        list(APPEND LXW_SOURCES third_party/minizip/iowin32.c)\n    endif()\nendif()\n\nif (NOT USE_STANDARD_TMPFILE)\n    list(APPEND LXW_SOURCES third_party/tmpfileplus/tmpfileplus.c)\nendif()\n\nif(NOT USE_OPENSSL_MD5 AND NOT USE_NO_MD5)\n    list(APPEND LXW_SOURCES third_party/md5/md5.c)\nendif()\n\nif(USE_OPENSSL_MD5)\n    if(PKG_CONFIG_FOUND)\n        pkg_check_modules(LIBCRYPTO libcrypto)\n        include_directories(${LIBCRYPTO_INCLUDE_DIRS})\n    else(NOT LIBCRYPTO_FOUND)\n        find_package(OpenSSL REQUIRED)\n        include_directories(${OPENSSL_INCLUDE_DIR})\n        message(STATUS \"OpenSSL version: ${OPENSSL_VERSION}\")\n    endif()\nendif()\n\nif (USE_DTOA_LIBRARY)\n    list(APPEND LXW_SOURCES third_party/dtoa/emyg_dtoa.c)\nendif()\n\nset(LXW_PROJECT_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\nset(LXW_LIB_DIR \"${LXW_PROJECT_DIR}/lib\")\nadd_library(${PROJECT_NAME} \"\")\n\nset_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION ${SOVERSION})\ntarget_sources(${PROJECT_NAME}\n    PRIVATE ${LXW_SOURCES}\n    PUBLIC ${LXW_HEADERS}\n)\nif(ZLIB_LDFLAGS)\n    target_link_libraries(${PROJECT_NAME} LINK_PUBLIC ${ZLIB_LDFLAGS})\nelse()\n    target_link_libraries(${PROJECT_NAME} LINK_PUBLIC ${ZLIB_LIBRARIES})\nendif()\nif(MINIZIP_LDFLAGS)\n    target_link_libraries(${PROJECT_NAME} LINK_PUBLIC ${MINIZIP_LDFLAGS})\nelse()\n    target_link_libraries(${PROJECT_NAME} LINK_PUBLIC ${MINIZIP_LIBRARIES})\nendif()\nif(LIBCRYPTO_LDFLAGS)\n    target_link_libraries(${PROJECT_NAME} LINK_PUBLIC ${LIBCRYPTO_LDFLAGS})\nelse()\n    target_link_libraries(${PROJECT_NAME} LINK_PUBLIC ${LIB_CRYPTO} ${OPENSSL_CRYPTO_LIBRARY})\nendif()\ntarget_compile_definitions(${PROJECT_NAME} PRIVATE ${LXW_PRIVATE_COMPILE_DEFINITIONS})\n\n# /utf-8 needs VS2015 Update 2 or above.\n# In CMake 3.7 and above, we can use (MSVC_VERSION GREATER_EQUAL 1900) here.\nif(MSVC AND NOT (MSVC_VERSION LESS 1900))\n    target_compile_options(${PROJECT_NAME} PRIVATE /utf-8)\nendif()\n\nif (WINDOWSSTORE)\n  target_compile_definitions(${PROJECT_NAME} PRIVATE -DIOWIN32_USING_WINRT_API)\nendif()\n\ntarget_include_directories(${PROJECT_NAME}\n    PRIVATE ${LXW_PRIVATE_INCLUDE_DIRS}\n    PUBLIC include include/xlsxwriter\n)\n\n# TESTS\n# -----\n\n# Create test and runner.\n#\n# Args:\n#   sources       Name of variable holding source files\n#   target        Test name\n#\n\nmacro(CreateTest sources target)\n    set(output_name xlsxwriter_${target})\n    set(dependencies ${output_name})\n\n    add_executable(${output_name} ${${sources}})\n    target_link_libraries(${output_name} ${PROJECT_NAME})\n    target_compile_definitions(${output_name} PRIVATE TESTING COLOR_OK)\n    add_test(NAME ${output_name}\n        COMMAND ${output_name}\n        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n    )\nendmacro(CreateTest)\n\nfile(GLOB LXW_UTILITY_SOURCES test/unit/utility/test*.c)\nfile(GLOB LXW_XMLWRITER_SOURCES test/unit/xmlwriter/test*.c)\nfile(GLOB LXW_WORKSHEET_SOURCES test/unit/worksheet/test*.c)\nfile(GLOB LXW_SST_SOURCES test/unit/sst/test*.c)\nfile(GLOB LXW_WORKBOOK_SOURCES test/unit/workbook/test*.c)\nfile(GLOB LXW_APP_SOURCES test/unit/app/test*.c)\nfile(GLOB LXW_CONTENTTYPES_SOURCES test/unit/content_types/test*.c)\nfile(GLOB LXW_CORE_SOURCES test/unit/core/test*.c)\nfile(GLOB LXW_RELATIONSHIPS_SOURCES test/unit/relationships/test*.c)\nfile(GLOB LXW_FORMAT_SOURCES test/unit/format/test*.c)\nfile(GLOB LXW_STYLES_SOURCES test/unit/styles/test*.c)\nfile(GLOB LXW_DRAWING_SOURCES test/unit/drawing/test*.c)\nfile(GLOB LXW_CHART_SOURCES test/unit/chart/test*.c)\nfile(GLOB LXW_CUSTOM_SOURCES test/unit/custom/test*.c)\nfile(GLOB LXW_FUNCTIONAL_SOURCES test/functional/src/*.c)\n\nif(NOT MSVC)\n# Skip unit tests on Windows since ctest.h doesn't support it.\nset(LXW_UNIT_SOURCES\n    test/unit/test_all.c\n    ${LXW_UTILITY_SOURCES}\n    ${LXW_XMLWRITER_SOURCES}\n    ${LXW_WORKSHEET_SOURCES}\n    ${LXW_SST_SOURCES}\n    ${LXW_WORKBOOK_SOURCES}\n    ${LXW_APP_SOURCES}\n    ${LXW_CONTENTTYPES_SOURCES}\n    ${LXW_CORE_SOURCES}\n    ${LXW_RELATIONSHIPS_SOURCES}\n    ${LXW_FORMAT_SOURCES}\n    ${LXW_STYLES_SOURCES}\n    ${LXW_DRAWING_SOURCES}\n    ${LXW_CHART_SOURCES}\n    ${LXW_CUSTOM_SOURCES}\n)\nelse()\nset(LXW_UNIT_SOURCES\n    test/cpp/test_compilation.cpp\n)\nendif()\n\nif(BUILD_TESTS)\n    # unit tests\n    CreateTest(LXW_UNIT_SOURCES unit)\n\n    # functional tests\n    find_package(Python COMPONENTS Interpreter REQUIRED)\n    find_program(Pytest_EXECUTABLE NAMES pytest)\n\n    if (NOT Pytest_EXECUTABLE)\n        message(\"Please install the Python pytest library to run functional tests:\")\n        message(\"    pip install pytest\\n\")\n    endif()\n\n    foreach(source ${LXW_FUNCTIONAL_SOURCES})\n       get_filename_component(basename ${source} NAME_WE)\n       add_executable(${basename} ${source})\n       target_link_libraries(${basename} xlsxwriter)\n       set_target_properties(${basename} PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"test/functional/src\")\n    endforeach(source)\n\n    add_custom_command(TARGET xlsxwriter_unit POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/test/functional test/functional\n    )\n\n    if(USE_NO_MD5)\n        add_test(NAME functional\n            COMMAND pytest -v test/functional -m \"not skipif\"\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        )\n    else()\n        add_test(NAME functional\n            COMMAND pytest -v test/functional\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        )\n    endif()\n\nendif()\n\n# EXAMPLES\n# --------\nfile(GLOB LXW_EXAMPLE_SOURCES examples/*.c)\n\nif(BUILD_EXAMPLES)\n    foreach(source ${LXW_EXAMPLE_SOURCES})\n        get_filename_component(basename ${source} NAME_WE)\n        add_executable(${basename} ${source})\n        target_link_libraries(${basename} ${PROJECT_NAME})\n        set_target_properties(${basename} PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"examples\")\n    endforeach(source)\nendif()\n\n# FUZZING\n# -------\nif (BUILD_FUZZERS AND DEFINED ENV{LIB_FUZZING_ENGINE})\n    add_subdirectory(dev/fuzzing)\nendif()\n\n# INSTALL\n# -------\ninclude(GNUInstallDirs)\n\ninstall(TARGETS ${PROJECT_NAME}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n)\ninstall(FILES include/xlsxwriter.h DESTINATION include)\ninstall(DIRECTORY include/xlsxwriter\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n    FILES_MATCHING PATTERN \"*.h\"\n)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/xlsxwriter.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.8896484375,
          "content": "# libxlsxwriter: Reporting Bugs and submitting Pull Requests\n\n\n## Reporting Bugs\n\nHere are some tips on reporting bugs in `libxlsxwriter`.\n\n### Upgrade to the latest version of the library\n\nUpgrade to the latest version of the library since the bug you are reporting\nmay already be fixed.\n\nCheck the [Changes][changes] section of the documentation to see what has\nchanged in the latest versions.\n\n[changes]: http://libxlsxwriter.github.io/changes.html\n\nYou can check which version of `libxlsxwriter` that you are using by checking\nthe `xlsxwriter.h` header file or by adding the following to your program:\n\n```C\n#include <stdio.h>\n#include \"xlsxwriter.h\"\n\nint main() {\n\n    printf(\"Libxlsxwriter version = %s\\n\", lxw_version());\n\n    return 0;\n}\n```\n\n\n### Read the documentation\n\nRead or search the `libxlsxwriter` [documentation][docs] to see if the issue\nyou are encountering is already explained.\n\n[docs]: http://libxlsxwriter.github.io/index.html\n\n### Look at the example programs\n\nThere are many [examples programs][examples] in the distribution. Try to\nidentify an example program that corresponds to your query and adapt it to use\nas a bug report.\n\n[examples]: http://libxlsxwriter.github.io/examples.html\n\n\n### Use the xlsxwriter Issue Tracker\n\nThe [libxlsxwriter issue tracker][issues] is on GitHub.\n\n[issues]: https://github.com/jmcnamara/libxlsxwriter/issues\n\n\n### Tips for submitting a bug report\n\n1.  Describe the problem as clearly and as concisely as possible.\n2.  Include a sample program. This is probably the most important step.\n    It is generally easier to describe a problem in code than in written\n    prose.\n3.  The sample program should be as small as possible to demonstrate the\n    problem. Don't copy and paste large non-relevant sections of your\n    program.\n\nA sample bug report is shown below. This format helps analyze and respond to\nthe bug report more quickly.\n\n\n> Subject: Issue with SOMETHING\n>\n> Greetings,\n>\n> I am using libxlsxwriter to do SOMETHING but it appears to do SOMETHING ELSE.\n>\n> I am using CC version X.Y.Z, OS = uname and libxlsxwriter x.y.z.\n>\n> Here is some code that demonstrates the problem:\n>\n>\n>```C\n>#include \"xlsxwriter.h\"\n>\n>int main() {\n>\n>    lxw_workbook  *workbook  = workbook_new(\"bug_report.xlsx\");\n>    lxw_worksheet *worksheet = workbook_add_worksheet(workbook, NULL);\n>\n>    worksheet_write_string(worksheet, 0, 0, \"Hello\", NULL);\n>    worksheet_write_number(worksheet, 1, 0, 123, NULL);\n>\n>    return workbook_close(workbook);\n>}\n>```\n>\n\n\n# Pull Requests and Contributing to Libxlsxwriter\n\nAll patches and pull requests are welcome but in general you should start with\nan issue tracker to describe what you intend to do before you do it.\n\n\n### Getting Started\n\n1. Pull requests and new feature proposals must start with an [issue\n   tracker][issues]. This serves as the focal point for the design discussion.\n2. Describe what you plan to do. If there are API changes add some code\n   example to demonstrate them.\n3. Fork the repository.\n4. Run all the tests to make sure the current code works on your system using\n   `make test`.  See the [Running the Test Suite][tests] section of the docs\n   for instructions.\n5. Create a feature branch for your new feature.\n\n\n[tests]: http://libxlsxwriter.github.io/running_the_tests.html\n\n### Code Style\n\nThe code style is mainly K&R style with 4 space indents.\n\nThe author uses GNU indent (`gindent`) 2.2.10 with the following options:\n\n```\n    --braces-on-if-line\n    --braces-on-struct-decl-line\n    --case-indentation 4\n    --continue-at-parentheses\n    --declaration-comment-column 0\n    --format-first-column-comments\n    --honour-newlines\n    --ignore-profile\n    --indent-label 0\n    --indent-level 4\n    --no-space-after-function-call-names\n    --no-tabs\n    --swallow-optional-blank-lines\n```\n\nThe [indent configuration file][indentpro] is available in the repo. The code\ncan be indented automatically if the same version of `gindent` is used with\nthe following make command:\n\n```shell\n    make indent\n```\n\nNote, make sure you have backed up your files or added them to the index\nbefore running this command.\n\nIn general follow the existing style in the code.\n\n[indentpro]: https://github.com/jmcnamara/libxlsxwriter/blob/master/.indent.pro\n\n### Writing and Running Tests\n\nAny significant features should be accompanied by a test. See the `test`\ndirectory and the [Running the Test Suite][tests] section of the docs for\ndetails of the test setup.\n\nThe tests can be run as follows:\n\n```shell\n    make test\n```\nSame as:\n\n```shell\n    make test_unit\n    make test_functional\n```\n\nThe functional tests require the Python module [pytest][pytest] as a test runner.\n\nIf you have `valgrind` installed you can use the test suite to check for memory leaks:\n\n```shell\n    make test_valgrind\n```\n\nWhen you push your changes they will also be tested automatically using\n[GitHub Actions][actions].\n\n[actions]: https://github.com/jmcnamara/libxlsxwriter/actions\n[pytest]: http://pytest.org/\n\n\n### Documentation\n\nThe `libxlsxwriter` documentation is written in Doxygen format in the header\nfiles and in additional `.dox` files in the `docs/src` directory of the\nrepo. The documentation can be built as follows:\n\n```shell\n    make docs\n    open docs/html/index.html\n```\n\n\n### Example programs\n\nIf applicable add an example program to the `examples` directory. Example\nfiles can be built using:\n\n```shell\n   make docs\n```\n\n### Copyright and License\n\nCopyright remains with the original author. Do not include additional\ncopyright claims or Licensing requirements. GitHub and the `git` repository\nwill record your contribution and it will be acknowledged it in the Changes\nfile.\n\n\n### Submitting the Pull Request\n\nIf your change involves several incremental `git` commits then `rebase` or\n`squash` them onto another branch so that the Pull Request is a single commit\nor a small number of logical commits.\n\nPush your changes to GitHub and submit the Pull Request with a hash link to\nthe to the Issue tracker that was opened above.\n"
        },
        {
          "name": "Changes.txt",
          "type": "blob",
          "size": 31.6845703125,
          "content": "/**\n@page changes Changes\n\n## 1.1.9 October 24 2024\n\n - Fix minor pointer/value error in `lxw_name_to_row()` and `lxw_name_to_col()`\n   utility functions.\n\n   [gh_459]: https://github.com/jmcnamara/libxlsxwriter/issues/459\n\n\n## 1.1.8 July 31 2024\n\n- Added support for embedding images into worksheets with\n  `worksheet_embed_image()`.\n\n  This can be useful if you are building up a spreadsheet of products with a\n  column of images for each product. Embedded images move with the cell so they\n  can be used in worksheet tables or data ranges that will be sorted or\n  filtered.\n\n  This functionality is the equivalent of Excel's menu option to insert an image\n  using the option to \"Place in Cell\" which is available in Excel 365 versions\n  from 2023 onwards.\n\n- Fixed various issues:\n\n  - [Failure on 32bit architectures #441](https://github.com/jmcnamara/libxlsxwriter/issues/441)\n  - [workbook_validate_sheet_name buffer-overflow #442](https://github.com/jmcnamara/libxlsxwriter/issues/442)\n  - [workbook_add_worksheet does not return a reasonable worksheet #443](https://github.com/jmcnamara/libxlsxwriter/issues/443)\n  - [workbook_define_name stack-buffer-underflow #444](https://github.com/jmcnamara/libxlsxwriter/issues/444)\n  - [workbook_close stack-buffer-overflow #445](https://github.com/jmcnamara/libxlsxwriter/issues/445)\n  - [_store_array_formula heap-buffer-overflow #446](https://github.com/jmcnamara/libxlsxwriter/issues/446)\n  - [worksheet_set_selection stack-buffer-overflow #447](https://github.com/jmcnamara/libxlsxwriter/issues/447)\n\n\n- Note this version is tagged as `v1.1.8` instead of `RELEASE_1.1.8` for better\n  interoperability with Xcode.\n\n\n## 1.1.7 April 5 2024\n\n- Bump `.so` version to 6. This was missed in the previous release.\n\n\n## 1.1.6 April 4 2024\n\n- Updated vendored version of minizip to v 1.3.0 to include upstream fixes.\n\n  Feature request [#419][gh_419].\n\n  [gh_419]: https://github.com/jmcnamara/libxlsxwriter/issues/419\n\n- Added `quote_prefix` format property.\n\n  Feature request [#385][gh_385].\n\n  [gh_385]: https://github.com/jmcnamara/libxlsxwriter/issues/385\n\n- Added support for signed VBA projects.\n  </p>\n\n- Fix worksheet password hashing algorithm for long passwords. Replace/fix\n  the worksheet protection password algorithm so that is works correctly\n  for strings over 24 chars.\n  </p>\n\n- Fix cmake minizip version check.\n\n  Feature request [#405][gh_405].\n\n  [gh_405]: https://github.com/jmcnamara/libxlsxwriter/issues/405\n\n- Fix for buffer overflow with utf-8 strings in data validation.\n\n  Feature request [#394][gh_394].\n\n  [gh_394]: https://github.com/jmcnamara/libxlsxwriter/issues/394\n\n- Fix for range in text type conditional format.\n\n  Feature request [#395][gh_395].\n\n  [gh_395]: https://github.com/jmcnamara/libxlsxwriter/issues/395\n\n- Fix 32bit multiply with overflow issue for images.\n\n  Fix multiply with overflow issue when image locations in the worksheet\n  were greater than the u32 max value.\n\n- Added Swift package manager support.\n  </p>\n\n- Added support for building Zig library.\n  </p>\n\n## 1.1.5 December 30 2022\n\n- Added support for writing a workbook to a memory buffer instead of to a file\n  via the `output_buffer` parameter of @ref workbook_new_opt(). See also\n  @ref output_buffer.c.\n\n- Add support for using in-memory data instead of temporary files on systems where\n `fmemopen()` and `open_memstream()` are supported. This requires the `USE_MEM_FILE`\n  compilation option.\n\n\n## 1.1.4 October 9 2021\n\n- Added support for Worksheet tables. Tables in Excel are a way of grouping a\n  range of cells into a single entity that has common formatting or that can\n  be referenced from formulas. Tables can have column headers, autofilters,\n  total rows, column formulas and default formatting. See @ref\n  working_with_tables and @ref tables.c.\n\n- Added support for adding a macro button to a worksheet. See @ref macro.c.\n\n## 1.1.3 August 9 2021\n\n- Changed worksheet_filter_column2() parameter name \"operator\" to \"and_or\" to\n  avoid a conflict with the C++ reserved keyword.\n\n## 1.1.2 August 8 2021\n\n- Added support for autofilter rules. See @ref working_with_autofilters and\n  @ref autofilter.c.\n\n  Feature request [#254][gh_254].\n\n  [gh_254]: https://github.com/jmcnamara/libxlsxwriter/issues/254\n\n- Added Description/Alt Text and Decorative accessibility options for\n  charts. These options were already available for images.\n\n\n## 1.1.1 July 12 2021\n\n- Added optional third party library to handle sprintf handling of\n  doubles. This is to avoid issues with number formatting in some locales. The\n  optional library is the Milo Yip DTOA implementation. See @ref gsg_dtoa.\n\n  Issue [#272][gh_272].\n\n  [gh_272]: https://github.com/jmcnamara/libxlsxwriter/issues/272\n\n- Added the #LXW_EXPLICIT_FALSE variable to allow the default bold property in\n  chart title fonts to be turned off.\n\n  Issue [#199][gh_199].\n\n  [gh_199]: https://github.com/jmcnamara/libxlsxwriter/issues/199\n\n## 1.1.0 July 9 2021\n\n- Fix for Cocoapod issue where local md5 files conflicted with BoringSSL headers.\n\n  Issue [#342][gh_342].\n\n  [gh_342]: https://github.com/jmcnamara/libxlsxwriter/issues/342\n\n## 1.0.9 July 7 2021\n\n- Added support for Excel 365 dynamic arrays. See\n `worksheet_write_dynamic_array_formula()` `worksheet_write_dynamic_formula()`\n and @ref ww_formulas_dynamic_arrays.\n\n\n## 1.0.8 July 3 2021\n\n- Fix for dynamic library soname on Linux.\n\n\n## 1.0.7 July 1 2021\n\n- Added support for writing Unix date/times via the\n  `worksheet_write_unixtime()` function.\n\n- Added support for dynamic library soname version to help packagers and build\n  systems differentiate ABI versions.\n\n\n## 1.0.6 May 28 2021\n\n- Added support for using OpenSSL MD5 functions instead of built in third\n  party library. See @ref gsg_md5.\n\n\n## 1.0.5 May 13 2021\n\n- Added support for worksheet background images via\n  `worksheet_set_background()`.\n\n\n## 1.0.4 May 8 2021\n\n- Added support for GIF image files (and in Excel 365, animated GIF files).\n\n\n## 1.0.3 April 20 2021\n\n- Added some fixes to make the library compile more cleanly as an R library.\n\n\n## 1.0.2 April 15 2021\n\n- Added option to set row heights and column widths in pixels via the\n  `worksheet_set_row_pixels()` and `worksheet_set_column_pixels()` functions.\n\n## 1.0.1 March 30 2021\n\n- Added support for [pkg-config][pkg-config] to Make/Cmake installs. See the\n  @ref gsg_using section of the Getting Started guide.\n  </p>\n\n  [pkg-config]: https://www.freedesktop.org/wiki/Software/pkg-config/\n\n- Added ability to add accessibility options \"description\" and \"decorative\" to\n  images via `worksheet_insert_image_opt()` and #lxw_image_options.\n  </p>\n\n- Added the `workbook_read_only_recommended()` function to set the Excel\n  \"Read-only Recommended\" option that is available when saving a file.\n  </p>\n\n- Fixed issue where pattern formats without colors were given a default black\n  fill color.\n  </p>\n\n- Added option to set a chart crossing to 'min' via\n  `chart_axis_set_crossing_min()` as well as the existing 'max' option. The\n  'min' option isn't available in the Excel interface but can be enabled via\n  VBA.\n  </p>\n\n- Added some additional information on using constant_memory mode with memory\n  mounted /tmp directories. See @ref ww_mem_temp.\n\n  Issue [#306][gh_306].\n\n  [gh_306]: https://github.com/jmcnamara/libxlsxwriter/issues/306\n\n- Added build option to compile libxlsxwriter as a \"universal binary\" for both\n  Apple silicon and Intel-based Macs, i.e., arm64 and x86_64. See @ref\n  gsg_universal.\n  </p>\n\n- Fixed issue where the limit for header/footer strings was\n  255 bytes instead of 255 characters and as a result UTF8\n  strings were being truncated.\n\n  Issue [#305][gh_305].\n\n  [gh_305]: https://github.com/jmcnamara/libxlsxwriter/issues/305\n\n\n## 1.0.0 September 7 2020\n\n- Added support for worksheet conditional formatting. See\n  `worksheet_conditional_format_range()` and @ref\n  working_with_conditional_formatting.\n\n  Feature request [#32][gh_32] and [#302][gh_302].\n\n  [gh_302]: https://github.com/jmcnamara/libxlsxwriter/issues/302\n  [gh_32]:  https://github.com/jmcnamara/libxlsxwriter/issues/32\n\n- Added performance optimization for search for control characters in strings\n  in `worksheet_write_string()`.\n\n  Issue [#298][gh_298].\n\n  [gh_298]: https://github.com/jmcnamara/libxlsxwriter/issues/298\n\n- Made `lxw_datetime_to_excel_datetime()` a function public.\n  </p>\n\n- There are now over 1000 test cases, including 650 tests that compare the\n  output from libxlsxwriter, byte for byte, against test files created in\n  Excel. This is also the 100th release of libxlsxwriter.\n\n\n## 0.9.9 August 17 2020\n\n- Added support for images in headers and footers. See `worksheet_set_header_opt()`.\n\n- Added `worksheet_ignore_errors()` function to ignore Excel worksheet\n  errors/warnings in user defined ranges.\n\n\n## 0.9.8 August 11 2020\n\n- Added formatting for chart data labels and chart custom data labels. See\n  @ref chart_custom_labels and @ref chart_data_labels.c.\n\n\n## 0.9.7 August 4 2020\n\n- Changed #lxw_chart_data_label field from `.delete` to `.hide` in order to\n  avoid reserved word conflict with C++.\n  Issue [#300][gh_300].\n\n  [gh_300]: https://github.com/jmcnamara/libxlsxwriter/issues/300\n\n\n## 0.9.6 August 3 2020\n\n- Added support for chart custom data labels. See @ref chart_custom_labels and\n  @ref chart_data_labels.c.\n\n- Fix for issue where array formulas weren't included in the output file for\n  certain ranges/conditions. Issue [#735][gh_735].\n\n  [gh_735]: https://github.com/jmcnamara/XlsxWriter/issues/735\n\n\n## 0.9.5 May 31 2020\n\n- Fix for issue where hyperlinks urls and tips were ignored for\n  `worksheet_insert_image_buffer_opt()` images.\n  Issue [#292][gh_292].\n\n  [gh_292]: https://github.com/jmcnamara/libxlsxwriter/issues/292\n\n- Added #LXW_CHART_LINE_STACKED and #LXW_CHART_LINE_STACKED_PERCENT line\n  charts subtypes.\n\n- Removed LXW_ERROR_SHEETNAME_RESERVED warning which was used with the\n  reserved worksheet name \"History\". However, this is an allowed worksheet\n  name in some Excel variants so the warning has been turned into a\n  documentation note instead.\n\n\n## 0.9.4 January 19 2020\n\n- Added option to specify worksheet \"object positioning\" for images and charts\n  to define how they move or size with underlying cells. See @ref\n  ww_object_position_options and @ref working_with_object_positioning.\n\n\n## 0.9.3 January 13 2020\n\n- Fix Xcode/Cocoapods build warnings.\n\n\n## 0.9.2 January 13 2020\n\n- Added support for writing cell comments, see @ref working_with_comments.\n\n- Makefile now respects DESTDIR and PREFIX, including when setting rpath on\n  macOS.\n\n- Changed function names in bundled MD5 code to avoid conflicts with OpenSSL.\n\n\n## 0.9.1 December 26 2019\n\n- Fix to missing MD5 linkage in Cocoapod file.\n  Issue [#259][gh_259].\n\n  [gh_259]: https://github.com/jmcnamara/libxlsxwriter/issues/259\n\n\n## 0.9.0 December 26 2019\n\n- Fix to avoid duplicate images being copied to an libxlsxwriter file. Excel\n  uses an optimization where it only stores one copy of a repeated/duplicate\n  image in a workbook. Libxlsxwriter didn't do this which meant that the file\n  size would increase when then was a large number of repeated images. This\n  release fixes that issue and replicates Excel's behavior.\n\n  Note, that this change adds a dependency on the [Openwall MD5] library,\n  which is now included with the libxlsxwriter third party source files. It is\n  possible to compile libxlsxwriter without this library, and thus getting the\n  older behavior, by passing `USE_NO_MD5=1` to make.\n\n\n  [Openwall MD5]: https://openwall.info/wiki/people/solar/software/public-domain-source-code/md5\n\n## 0.8.9 December 16 2019\n\n- Added support for default hyperlink style in `worksheet_write_url()`.\n\n- Added support for hyperlink in images, see `worksheet_insert_image_opt()`.\n\n- Fixed several `worksheet_write_url()` edge cases.\n\n\n## 0.8.8 November 17 2019\n\n- Added option to allow a user defined, or overridden, image description used\n  with `worksheet_insert_image()`. By default it uses the filename as the\n  description.\n  Issue [#238][gh_238].\n\n  [gh_238]: https://github.com/jmcnamara/libxlsxwriter/issues/238\n\n- Added Windows portable version of `fopen` to handle utf8 filenames when\n  working with images.\n  Issue [#238][gh_238].\n\n  [gh_238]: https://github.com/jmcnamara/libxlsxwriter/issues/238\n\n- Added an option to allow chart fonts to be rotation to 270 deg to give a\n  stacked orientation. Also added support for East Asian vertical chart fonts.\n\n- Refactored struct types used in pubic APIs to remove or document hidden\n  fields. @b Note: This change introduces backward incompatible API\n  changes. However, it should minimize any future changes of this nature.\n  See issue [#252][gh_252].\n\n  [gh_252]: https://github.com/jmcnamara/libxlsxwriter/issues/252\n\n\n\n## 0.8.7 June 20 2019\n\n- Added support for adding VBA macros to workbooks. These macros can be\n  extracted from existing xlsm files, created in Excel, and added to new xlsm\n  files. See @ref working_with_macros.\n  Feature request [#29][gh_29].\n\n  [gh_29]: https://github.com/jmcnamara/libxlsxwriter/issues/29\n\n- Added support for ZIP64 extensions when writing very large xlsx files to\n  allow the zip container, or individual XML files within it, to be greater\n  than 4 GB. See @ref workbook_new_opt().\n  Feature request [#228][gh_228].\n\n  [gh_228]: https://github.com/jmcnamara/libxlsxwriter/issues/228\n\n- Added extra validity checks on worksheet names.\n  Issues [#223][gh_223] and [#230][gh_230].\n\n  [gh_223]: https://github.com/jmcnamara/libxlsxwriter/issues/223\n  [gh_230]: https://github.com/jmcnamara/libxlsxwriter/issues/230\n\n\n## 0.8.6 April 7 2019\n\n- Fixed issue where images that started in hidden rows/columns weren't placed\n  correctly in the worksheet.\n\n- Fixed the mime-type reported by system `file(1)`. The mime-type reported\n  by \"file --mime-type\"/magic was incorrect for XlsxWriter files since it\n  expected the `[Content_types]` to be the first file in the zip container.\n\n\n## 0.8.5 February 10 2019\n\n- Fix compile-time warnings with strict prototypes enabled.\n  Issue [#208][gh_208].\n\n  [gh_208]: https://github.com/jmcnamara/libxlsxwriter/issues/208\n\n- Make py.test name configurable.\n  Pull request [#206][gh_206].\n\n  [gh_206]: https://github.com/jmcnamara/libxlsxwriter/pull/206\n\n\n## 0.8.4 November 10 2018\n\n- Fix for issue when hashing number formats.\n  Issue [#203][gh_203].\n\n  [gh_203]: https://github.com/jmcnamara/libxlsxwriter/issues/203\n\n\n## 0.8.3 October 1 2018\n\n- Added `worksheet_write_rich_string()` function to allow writing of\n  multi-format rich strings. See @ref rich_strings.c\n  Feature request [#37][gh_37].\n\n  [gh_37]: https://github.com/jmcnamara/libxlsxwriter/issues/37\n\n\n## 0.8.2 September 16 2018\n\n- Added new chartsheet functionality: `chartsheet_set_tab_color()`, and\n  `chartsheet_set_zoom()`.\n\n\n## 0.8.1 September 15 2018\n\n- Fix for chartsheet and worksheet ordering issue.\n\n- Added new chartsheet functionality: `chartsheet_protect()`,\n  `chartsheet_hide()`, `chartsheet_select()` and\n  `chartsheet_set_first_sheet()`.\n\n\n## 0.8.0 September 12 2018\n\n- Added chartsheet support. A chartsheet is a type of worksheet that only\n  contains a chart. See the @ref chartsheet.h \"Chartsheet\" object and @ref\n  chartsheet.c.\n\n\n## 0.7.9 September 1 2018\n\n- Added `chart_axis_set_label_align()` function to set the alignment of chart\n  category axis labels.\n  Feature request [#186][gh_186].\n\n  [gh_186]: https://github.com/jmcnamara/libxlsxwriter/issues/186\n\n- Added `lxw_version()` function to get the library version.\n  Feature request [#194][gh_194].\n\n  [gh_194]: https://github.com/jmcnamara/libxlsxwriter/pull/194\n\n\n## 0.7.8 August 30 2018\n\n- Added `worksheet_insert_image_buffer()` function to insert images from\n  memory buffers. See @ref image_buffer.c.\n  Feature request [#125][gh_125].\n\n  [gh_125]: https://github.com/jmcnamara/libxlsxwriter/issues/125\n\n\n## 0.7.7 May 16 2018\n\n- Fix to ensure the use of wide filenames on Windows with Microsoft Visual\n  C++.\n  Issue [#153][gh_153].\n\n  [gh_153]: https://github.com/jmcnamara/libxlsxwriter/issues/153\n\n- Added docs on building an app with Cmake and Microsoft Visual C++ on\n  Windows.\n\n\n## 0.7.6 January 11 2018\n\n- Added support for worksheet Grouping and Outlines.\n  See @ref working_with_outlines.\n  Feature request [#30][gh_30].\n\n  [gh_30]: https://github.com/jmcnamara/libxlsxwriter/issues/30\n\n- Fix include of libxlsxwriter as a Cocoapod on macOS.\n  Issue [#94][gh_94].\n\n  [gh_94]: https://github.com/jmcnamara/libxlsxwriter/issues/94\n\n\n## 0.7.5 September 25 2017\n\n- Added support for data validations and dropdown lists. See @ref\n  working_with_data_validation and @ref data_validate.c.\n  Feature request [#31][gh_31].\n\n  [gh_31]: https://github.com/jmcnamara/libxlsxwriter/issues/31\n\n\n## 0.7.4 August 20 2017\n\n- Fix make build system \"install\" target for compatibility with macOS\n  [brew/homebrew](https://brew.sh) installer. See @ref gsg_brew.\n\n\n## 0.7.3 August 12 2017\n\n\n- Build system fixes for Gentoo.\n  Issue [#116][gh_116].\n\n  [gh_116]: https://github.com/jmcnamara/libxlsxwriter/issues/116\n\n\n## 0.7.2 July 26 2017\n\n- Changed font sizes from integer to double to allow fractional font sizes.\n  Issue [#114][gh_114].\n\n  [gh_114]: https://github.com/jmcnamara/libxlsxwriter/issues/114\n\n\n## 0.7.1 July 24 2017\n\n- Fixed issue where internal file creation and modification dates were in the\n  local timezone instead of UTC.\n  Issue [#110][gh_110].\n\n  [gh_110]: https://github.com/jmcnamara/libxlsxwriter/issues/110\n\n\n## 0.7.0 June 26 2017\n\n- Added support for CMake build system.\n  Thanks to Alex Huszagh.\n\n- Fixed issue where image filehandles weren't closed until the overall file\n  was closed causing the system to run out of filehandles.\n  Issue [#106][gh_106].\n\n  [gh_106]: https://github.com/jmcnamara/libxlsxwriter/issues/106\n\n## 0.6.9 January 30 2017\n\n- Added chart trendlines. See @ref chart_trendlines and\n  @ref chart_data_tools.c.\n\n\n## 0.6.8 January 28 2017\n\n- Added chart error bars. See @ref chart_error_bars and\n  @ref chart_data_tools.c.\n\n## 0.6.7 January 24 2017\n\n- Added chart data labels. See @ref chart_labels.\n\n\n## 0.6.6 January 22 2017\n\n- Added functions to set chart Up-Down bars: see `chart_set_up_down_bars()`\n  and `chart_set_up_down_bars_format()` and @ref chart_data_tools.c.\n\n- Added functions to handle blank and hidden data in charts: see\n  `chart_show_blanks_as()` and `chart_show_hidden_data()`.\n\n\n## 0.6.5 January 21 2017\n\n- Added functions to set the overlap and gap between series: see\n  `chart_set_series_overlap()` and `chart_set_series_gap()`.\n\n\n## 0.6.4 January 20 2017\n\n- Added chart data table option, see `chart_set_table()` and\n  `chart_set_table_grid()`.\n\n- Added Clustered Chart example, see @ref chart_clustered.c.\n\n\n## 0.6.3 January 19 2017\n\n- Added `chart_set_drop_lines()` and `chart_set_high_low_lines()` functions to\n  add chart Drop and High-Low lines to indicate category values.\n  See @ref chart_data_tools.c.\n\n\n## 0.6.2 January 17 2017\n\n- Added `chart_series_set_smooth()` function to set the line smoothing\n  property of a line or scatter chart series.\n\n\n## 0.6.1 January 16 2017\n\n- Added option to set formatting for points in a chart. This allow the colors\n  of Pie chart segments to be defined. See @ref chart_points.\n\n\n## 0.6.0 January 15 2017\n\n- Added option to set the number format for a chart axis, see\n  `chart_axis_set_num_format()`.\n\n- Added \"invert if negative\" option for series fills, see\n  `chart_series_set_invert_if_negative()`.\n\n\n## 0.5.9 January 14 2017\n\n- Added support for chart axis crossing. See `chart_axis_set_crossing()` and\n  `chart_axis_set_crossing_max()`.\n\n\n## 0.5.8 January 13 2017\n\n- Added `chart_axis_set_major_tick_mark()` and\n  `chart_axis_set_minor_tick_mark()` functions to chart axis tick marks.\n\n\n## 0.5.7 January 12 2017\n\n- Added `chart_axis_set_display_units()` function to set chart axis display\n  units.\n\n\n## 0.5.6 January 11 2017\n\n- Added `chart_axis_set_interval_unit()` and `chart_axis_set_interval_tick()`\n  functions to adjust category axis intervals.\n\n\n## 0.5.5 January 10 2017\n\n- Added `chart_axis_set_major_unit()` and `chart_axis_set_minor_unit()` to set\n  the major and minor units of a category axis.\n\n\n## 0.5.4 January 9 2017\n\n- Added `chart_axis_set_label_position()` option to position the axis labels\n  (numbers).\n\n- Improved documentation for @ref ww_charts_axes.\n\n\n## 0.5.3 January 8 2017\n\n- Added `chart_axis_set_position()` option to position a category axis\n  horizontally on, or between, the axis tick marks.\n\n\n## 0.5.2 January 7 2017\n\n- Added option to turn off chart axis: `chart_axis_off()`.\n\n\n## 0.5.1 January 6 2017\n\n- Added chart major and minor gridlines handling, see:\n\n  - `chart_axis_major_gridlines_set_visible()`\n  - `chart_axis_minor_gridlines_set_visible()`\n  - `chart_axis_major_gridlines_set_line()`\n  - `chart_axis_minor_gridlines_set_line()`\n\n\n## 0.5.0 January 5 2017\n\n- Added chart and plot area formatting. See `chart_chartarea_set_line()` and\n  `chart_plotarea_set_line()`.\n\n\n## 0.4.9 January 4 2017\n\n- Added support for chart patterns. See @ref chart_patterns.\n\n\n## 0.4.8 January 3 2017\n\n- Added support for chart markers. See @ref chart_markers.\n\n\n## 0.4.7 January 2 2017\n\n- Added `chart_axis_set_reverse()` function to reverse the order of a chart\n  axis.\n\n- Added `chart_axis_set_min()`and `chart_axis_set_max()` functions to set the\n  minimum and maximum value for a chart axis.\n\n- Added `chart_axis_set_log_base()` function to set the log base of a chart\n  axis.\n  Feature request [#70][gh_70].\n\n  [gh_70]: https://github.com/jmcnamara/libxlsxwriter/issues/70\n\n\n## 0.4.6 January 1 2017\n\n- Added functions to set chart line and fill properties, see:\n\n  - `chart_series_set_line()`. Feature request [#83][gh_83].\n  - `chart_series_set_fill()`.\n  - `chart_axis_set_line()`.\n  - `chart_axis_set_fill()`.\n  - @ref chart_lines.\n  - @ref chart_fills.\n\n  [gh_83]: https://github.com/jmcnamara/libxlsxwriter/issues/83\n\n\n## 0.4.5 December 31 2016\n\n- Added functions to set chart legend properties: see  `chart_legend_set_position()`,\n  `chart_legend_set_font()` and `chart_legend_delete_series()`.\n\n\n## 0.4.4 December 30 2016\n- Added chart fonts. See `chart_axis_set_name_font()`, `chart_axis_set_num_font()`,\n  `chart_title_set_name_font()` and @ref chart_fonts.\n\n\n## 0.4.3 December 26 2016\n\n- Added `workbook_get_worksheet_by_name()` function to get a worksheet\n  object from its name.\n\n- Added `workbook_validate_worksheet_name()` function to validate a worksheet\n  name.\n\n- Fix for parameter length check when strings are UTF-8.\n  Issue [#84][gh_84].\n\n  [gh_84]: https://github.com/jmcnamara/libxlsxwriter/issues/84\n\n\n## 0.4.2 July 14 2016\n\n- Added support for OpenBSD and better support for FreeBSD. See @ref gsg_bsd.\n\n\n## 0.4.1 July 11 2016\n\n- Switched to using\n  [tmpfileplus](http://www.di-mgt.com.au/c_function_to_create_temp_file.html)\n  for temporary file handles to work around issue when the temp directory on\n  Windows isn't writeable. The temp file directory is now also configurable at\n  runtime, see @ref gsg_tmpdir.\n\n  Issue [#63][gh_63].\n\n  [gh_63]: https://github.com/jmcnamara/libxlsxwriter/issues/63\n\n\n## 0.4.0 July 5 2016\n\n- Added fixes for MSVC 2010.\n\n- Refactored public APIs to return #lxw_error instead of int.\n\n\n## 0.3.9 July 2 2016\n\n- Added support for MinGW, MinGW-w64, Cygwin, MSYS and MSYS2.\n  See @ref gsg_ming.\n\n\n## 0.3.8 June 11 2016\n\n- Added workbook functions to set custom document properties. See\n  `workbook_set_custom_property_string()` and @ref doc_custom_properties.c.\n\n\n## 0.3.7 June 2 2016\n\n- Added updated Cocoapods file for Cocoapods 1.0.0. This also add support for\n  the \"use_frameworks\" directive. Thanks to Ludovico Rossi. See @ref\n  getting_started for instructions on how to use the cocoapod.\n\n  Pull request [#50][gh_50].\n\n  [gh_50]: https://github.com/jmcnamara/libxlsxwriter/issues/50\n\n\n## 0.3.6 June 1 2016\n\n- Fix for `worksheet_insert_image()` issue when handling images with zero dpi.\n\n\n## 0.3.5 May 31 2016\n\n- Refactored the error handling and reporting for when the file creation\n  subsystem fails due to file permissions or other issues. The new error codes\n  are in `#lxw_error` and the codes can be converted to strings, for reporting,\n  using the new `lxw_strerror()` function.\n\n  Issue [#49][gh_49].\n\n  [gh_49]: https://github.com/jmcnamara/libxlsxwriter/issues/49\n\n\n## 0.3.4 May 28 2016\n\n- Updated the @ref getting_started docs with instructions on how to build\n  libxlsxwriter for Windows using Microsoft Visual Studio and added links to\n  the example MSVC project:\n  [MSVCLibXlsxWriter](https://github.com/jmcnamara/MSVCLibXlsxWriter).\n\n\n## 0.3.3 May 23 2016\n\n- Added support for charts via the @ref chart.h \"The Chart object\". See the\n  examples of the supported chart types:\n\n  - @ref chart_area.c       \"Area chart\"\n  - @ref chart_bar.c        \"Bar chart\"\n  - @ref chart_column.c     \"Column chart\"\n  - @ref chart_line.c       \"Line chart\"\n  - @ref chart_scatter.c    \"Scatter chart\"\n  - @ref chart_radar.c      \"Radar chart\"\n  - @ref chart_pie.c        \"Pie chart\"\n  - @ref chart_doughnut.c   \"Doughnut chart\"\n  - @ref chart_styles.c     \"Built-in charts styles\"\n\n  Feature request [#36][gh_36].\n\n  [gh_36]: https://github.com/jmcnamara/libxlsxwriter/issues/36\n\n\n## 0.3.2 April 8 2016\n\n- Added the `worksheet_write_boolean()` function to write Excel boolean\n  values.\n  Feature request [#47][gh_47].\n\n  [gh_47]: https://github.com/jmcnamara/libxlsxwriter/issues/47\n\n\n## 0.3.1 January 9 2016\n\n- Improved performance 20-30% for large data files.\n\n\n## 0.3.0 January 4 2016\n\n- Renamed `worksheet_set_row()` function to `worksheet_set_row_opt()` for\n  consistency with current and future APIs. The `worksheet_set_row()` function\n  is now used without the options parameter.\n\n  Note: This is a backward incompatible change.\n\n\n- Renamed `worksheet_set_column()` function to `worksheet_set_column_opt()`\n  for consistency with current and future APIs. The `worksheet_set_column()`\n  function is now used without the options parameter.\n\n  Note: This is a backward incompatible change.\n\n\n## 0.2.9 January 3 2016\n\n- Added the `worksheet_insert_image()` function to add PNG and JPG images to\n  worksheets. See @ref demo.c and @ref images.c.\n\n\n## 0.2.8 December 22 2015\n\n- Added `worksheet_set_default_row()` function to allow setting of default row\n  height and hiding unused rows. See the @ref hide_row_col.c example.\n\n\n## 0.2.7 December 21 2015\n\n- Added support for escaping control characters in strings. This prevents\n  unreadable files if string data contains control characters.\n  Issue [#42][gh_42].\n\n  [gh_42]: https://github.com/jmcnamara/libxlsxwriter/issues/42\n\n\n## 0.2.6 December 19 2015\n\n- Added `worksheet_protect()` function to protect Excel worksheet elements\n  from modification. See the @ref worksheet_protection.c example.\n\n\n## 0.2.5 December 14 2015\n\n- Added `workbook_set_properties()` function to set Excel document properties\n  such as Author and Title. See the @ref doc_properties.c example.\n\n\n## 0.2.4 December 13 2015\n\n- Added `worksheet_hide()` function to hide a worksheet. See the @ref\n  hide_sheet.c example.\n\n- Added `worksheet_set_first_sheet()` function to set the first visible\n  worksheet in a workbook with a large number of worksheets.\n\n\n## 0.2.3 December 12 2015\n\n- Added `worksheet_set_tab_color()` function to set the worksheet tab\n  color. See the @ref tab_colors.c example.\n\n\n## 0.2.2 December 11 2015\n\n- Replaced shared strings hash table with a Red/Black tree implementation for\n  better performance.\n  Thanks to Martin Renters. Pull Request [#41][gh_41].\n\n  [gh_41]: https://github.com/jmcnamara/libxlsxwriter/issues/41\n\n\n## 0.2.1 December 11 2015\n\n- Added `worksheet_right_to_left()` function. This can be used to change the\n  default direction of the worksheet from left-to-right when creating Arabic,\n  Hebrew or other near or far eastern worksheets that use right-to-left as the\n  default direction.\n\n- Added `worksheet_hide_zero()` function to hide zero cell values.\n\n- Added `worksheet_set_zoom()` method to set the worksheet zoom factor.\n\n\n## 0.2.0 December 9 2015\n\n- Added `worksheet_set_selection()` function to set the cell selected range on\n  a worksheet.\n\n\n## 0.1.9 December 7 2015\n\n- Replaced main worksheet data structure with a Red/Black tree implementation\n  for better performance when data isn't added in linear row-column order.\n  Thanks to Martin Renters. Pull Request [#14][gh_14] and [#16][gh_16].\n\n  [gh_14]: https://github.com/jmcnamara/libxlsxwriter/issues/14\n  [gh_16]: https://github.com/jmcnamara/libxlsxwriter/issues/16\n\n\n## 0.1.8 December 7 2015\n\n- Added `worksheet_freeze_panes()` and `worksheet_split_panes()` to allow\n  setting worksheet panes. See @ref panes.c example.\n\n- Added link to [Xcode project][libxlsxwriterCocoaExamples] for iOS and OS X\n  with Objective-C and Swift, provided by Ludovico Rossi.\n\n- Added improved support for Windows.\n\n  [libxlsxwriterCocoaExamples]: https://github.com/lrossi/libxlsxwriterCocoaExamples\n\n## 0.1.7 September 27 2015\n\n- Fixed Cocoapod spec file for iOS and OS X.\n\n\n## 0.1.6 September 27 2015\n\n- Added Cocoapod spec file to allow the library to be installed using\n  [CocoaPods](https://cocoapods.org).\n  Pull Request [#7](https://github.com/jmcnamara/libxlsxwriter/issues/7).\n\n\n## 0.1.5 May 3 2015\n\n- Added `worksheet_write_url()` function to write urls/hyperlinks to\n  worksheets. See also @ref hyperlinks.c.\n\n\n## 0.1.4 March 18 2015\n\n- Added `worksheet_autofilter()` function to add autofilters to worksheets.\n  See also @ref autofilter.c.\n\n\n## 0.1.3 March 15 2015\n\n- Added `worksheet_write_array_formula()` function to allow writing of\n  array formulas in worksheets.\n\n\n## 0.1.2 March 14 2015\n\n- Added `worksheet_set_h_pagebreaks()` and `worksheet_set_v_pagebreaks()`\n  functions to define worksheet page breaks.\n\n- Added LXW_FOREACH_WORKSHEET() macro to allow iteration over all the\n  worksheets in a workbook.\n\n- Added `worksheet_set_print_scale()` function to set the scale factor for\n  the printed page.\n\n- Added `worksheet_set_start_page()` function to set the start page number\n  when printing.\n\n\n## 0.1.1 March 13 2015\n\n- Added `worksheet_print_area()` function to control the print area of a\n  worksheet.\n\n- Added `worksheet_fit_to_pages()` function to fit the printed area to a\n  specific number of pages both vertically and horizontally.\n\n\n## 0.1.0 March 12 2015\n\n- Added `worksheet_repeat_rows()` and `worksheet_repeat_columns()` functions\n  to control the repeated rows/columns on printed worksheets.\n\n\n## 0.0.9 March 9 2015\n\n- Added `worksheet_gridlines()` function to show/hide screen and print\n  gridlines.\n\n- Added `worksheet_center_horizontally()` and `worksheet_center_vertically()`\n  functions to center worksheet on the printed page.\n\n- Added `worksheet_print_row_col_headers()` function to enable printing of row\n  and column headers.\n\n\n## 0.0.8 March 8 2015\n\n- Added support for worksheet headers and footers via the\n  `worksheet_set_header()` and `worksheet_set_footer()` functions. See also\n  @ref headers_footers.c.\n\n\n## 0.0.7 March 7 2015\n\n- Added the `worksheet_merge_range()` method to merge worksheet cells. See\n  also @ref merge_range.c.\n\n\n## 0.0.6 March 5 2015\n\n- Added the `workbook_define_name()` method to create defined names and ranges\n  in a workbook or worksheet.\n\n\n## 0.0.5 March 6 2015\n\n- Added `worksheet_select()` function to set worksheets as selected.\n\n- Added `worksheet_activate()` to set the active worksheet.\n\n- Several portability fixes to fix warnings with different compilers.\n\n\n## 0.0.4 March 1 2015\n\n- Added `worksheet_set_margins()` function to set top, bottom, left and right\n  margins in a worksheet.\n\n- Fix for issue where format objects were written to the file in the order of\n  creation rather than the order of use. This issue caused incorrect formats\n  in cells.\n  Issue [#3](https://github.com/jmcnamara/libxlsxwriter/issues/3).\n\n- Fix for issue where tmp files in `constant_memory` mode weren't closed\n  until application exited.\n  Issue [#1](https://github.com/jmcnamara/libxlsxwriter/issues/1).\n\n\n## 0.0.3 January 7 2015\n\n-   Added worksheet page setup methods.\n\n    -   `worksheet_set_landscape()`\n    -   `worksheet_set_portrait()`\n    -   `worksheet_set_page_view()`\n    -   `worksheet_set_paper()`\n    -   `worksheet_print_across()`\n\n\n## 0.0.2 June 26 2014\n\n- First public release.\n\n\n## 0.0.1 June 8 2014\n\n- First GitHub release.\n\n\n*/\n"
        },
        {
          "name": "License.txt",
          "type": "blob",
          "size": 9.875,
          "content": "/**\n\n@page license License\n\nLibxlsxwriter is released under a FreeBSD license:\n\n    Copyright 2014-2024, John McNamara <jmcnamara@cpan.org>\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are\n    met:\n\n    1. Redistributions of source code must retain the above copyright notice,\n       this list of conditions and the following disclaimer.\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n    IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n    The views and conclusions contained in the software and documentation are\n    those of the authors and should not be interpreted as representing\n    official policies, either expressed or implied, of the FreeBSD Project.\n\n\nLibxlsxwriter includes the `queue.h` and `tree.h` macros from FreeBSD. It also\nincludes and, unless overridden, uses the optional libraries `minizip`,\n`tmpfileplus` and `md5`. It also includes the `emyg_dtoa` library but doesn't\nuse it by default. These components have the following licenses:\n\n\nQueue.h from FreeBSD:\n\n    Copyright (c) 1991, 1993\n     The Regents of the University of California.  All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n    1. Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n    4. Neither the name of the University nor the names of its contributors\n       may be used to endorse or promote products derived from this software\n       without specific prior written permission.\n\n    THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n\nTree.h from FreeBSD:\n\n    Copyright 2002 Niels Provos <provos@citi.umich.edu>\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n    1. Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n    OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n    IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n    NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe `minizip` files used in the libxlsxwriter source tree are taken from the\n`zlib` ` contrib/minizip` directory. [Zlib](http://www.zlib.net) has the\nfollowing License/Copyright:\n\n    (C) 1995-2013 Jean-loup Gailly and Mark Adler\n\n    This software is provided 'as-is', without any express or implied\n    warranty.  In no event will the authors be held liable for any damages\n    arising from the use of this software.\n\n    Permission is granted to anyone to use this software for any purpose,\n    including commercial applications, and to alter it and redistribute it\n    freely, subject to the following restrictions:\n\n    1. The origin of this software must not be misrepresented; you must not\n       claim that you wrote the original software. If you use this software\n       in a product, an acknowledgment in the product documentation would be\n       appreciated but is not required.\n    2. Altered source versions must be plainly marked as such, and must not be\n       misrepresented as being the original software.\n    3. This notice may not be removed or altered from any source distribution.\n\n    Jean-loup Gailly        Mark Adler\n    jloup@gzip.org          madler@alumni.caltech.edu\n\nThe `minizip` files have the following additional copyright declarations:\n\n    Copyright (C) 1998-2010 Gilles Vollant\n    (minizip) ( http://www.winimage.com/zLibDll/minizip.html )\n\n    Modifications for Zip64 support\n    Copyright (C) 2009-2010 Mathias Svensson ( http://result42.com )\n\nNote, it is possible to compile libxlsxwriter without statically linking the\n`minizip` files and instead dynamically linking to `lminizip`, see\n@ref gsg_minizip.\n\n[Tmpfileplus](http://www.di-mgt.com.au/c_function_to_create_temp_file.html)\nhas the following license:\n\n    This Source Code Form is subject to the terms of the Mozilla Public\n    License, v. 2.0. If a copy of the MPL was not distributed with this\n    file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n    Copyright (c) 2012-16 David Ireland, DI Management Services Pty Ltd\n    <http://www.di-mgt.com.au/contact/>.\n\nSee the [Mozilla Public License, v. 2.0](http://mozilla.org/MPL/2.0/).\n\nNote, it is possible to compile libxlsxwriter using the standard library\n`tmpfile()` function instead of `tmpfileplus`, see @ref gsg_tmpdir.\n\nThe [Milo Yip DTOA library](https://github.com/miloyip/dtoa-benchmark) for\nconverting doubles to strings. It has the following license:\n\n    Copyright (C) 2015 Doug Currie\n    based on dtoa_milo.h\n    Copyright (C) 2014 Milo Yip\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n\nThis Milo Yip DTOA library (emyg_dtoa) is used to avoid issues where the\nstandard sprintf() dtoa function changes output based on locale settings. It\nis also 40-50% faster than the standard dtoa for raw numeric data. The use of\nthis library is optional. If you wish to use it you can pass\n`USE_DTOA_LIBRARY=1` to make when compiling.\n\n[Openwall MD5](https://openwall.info/wiki/people/solar/software/public-domain-source-code/md5)\nhas the following licence:\n\n    This software was written by Alexander Peslyak in 2001.  No copyright is\n    claimed, and the software is hereby placed in the public domain.\n    In case this attempt to disclaim copyright and place the software in the\n    public domain is deemed null and void, then the software is\n    Copyright (c) 2001 Alexander Peslyak and it is hereby released to the\n    general public under the following terms:\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted.\n\n    There's ABSOLUTELY NO WARRANTY, express or implied.\n\n    (This is a heavily cut-down \"BSD license\".)\n\nNote, the MD5 library is used to avoid including duplicate image files in the\nxlsx file. If you don't want to use this code, and the additional licence, you\ncan use OpenSSL's MD5 functions instead by passing `USE_OPENSSL_MD5=1` to\nmake. If this functionality isn't required it is possible to compile\nlibxlsxwriter without image deduplication by passing `USE_NO_MD5=1` to make.\n\nSee also @ref gsg_md5.\n\nNext: @ref changes\n*/\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 8.677734375,
          "content": "###############################################################################\n#\n# Makefile for libxlsxwriter library.\n#\n# SPDX-License-Identifier: BSD-2-Clause\n# Copyright 2014-2024, John McNamara, jmcnamara@cpan.org.\n#\n\n# Keep the output quiet by default.\nQ=@\nifdef V\nQ=\nendif\n\nDESTDIR ?=\nPREFIX  ?= /usr/local\n\nPYTEST ?= py.test\nPYTESTFILES ?= test\n\nVERSION   = $(shell sed -n -e 's/.*LXW_VERSION \\\"\\(.*\\)\\\"/\\1/p'   include/xlsxwriter.h)\nSOVERSION = $(shell sed -n -e 's/.*LXW_SOVERSION \\\"\\(.*\\)\\\"/\\1/p' include/xlsxwriter.h)\n\n.PHONY: docs tags examples third_party\n\n# Build libxlsxwriter.\nall : third_party\n\t$(Q)$(MAKE) -C src\n\n# Build the third party libs.\nthird_party :\nifndef USE_SYSTEM_MINIZIP\n\t$(Q)$(MAKE) -C third_party/minizip\nendif\nifndef USE_STANDARD_TMPFILE\n\t$(Q)$(MAKE) -C third_party/tmpfileplus\nendif\nifndef USE_NO_MD5\nifndef USE_OPENSSL_MD5\n\t$(Q)$(MAKE) -C third_party/md5\nendif\nendif\nifdef USE_DTOA_LIBRARY\n\t$(Q)$(MAKE) -C third_party/dtoa\nendif\n\n# Build a macOS universal binary.\nuniversal_binary :\n\t$(Q)$(MAKE) clean\n\t$(Q)TARGET_ARCH=\"-target x86_64-apple-macos10.12\" $(MAKE) all\n\t$(Q)mv lib/libxlsxwriter.a     libxlsxwriter_x86_64.a\n\t$(Q)mv lib/libxlsxwriter.$(SOVERSION).dylib libxlsxwriter_x86_64.dylib\n\n\t$(Q)$(MAKE) clean\n\t$(Q)TARGET_ARCH=\"-target arm64-apple-macos11\" $(MAKE) all\n\t$(Q)mv lib/libxlsxwriter.a     lib/libxlsxwriter_arm64.a\n\t$(Q)mv lib/libxlsxwriter.$(SOVERSION).dylib lib/libxlsxwriter_arm64.dylib\n\t$(Q)mv libxlsxwriter_x86_64.a libxlsxwriter_x86_64.dylib lib\n\n\t$(Q)lipo -create -output lib/libxlsxwriter.a                  lib/libxlsxwriter_x86_64.a     lib/libxlsxwriter_arm64.a\n\t$(Q)lipo -create -output lib/libxlsxwriter.$(SOVERSION).dylib lib/libxlsxwriter_x86_64.dylib lib/libxlsxwriter_arm64.dylib\n\t$(Q)rm -f lib/libxlsxwriter_x86_64.* lib/libxlsxwriter_arm64.*\n\n# Build the example programs.\nexamples : all\n\t$(Q)$(MAKE) -C examples\n\n# Build the example programs with CPP for compatibility checking.\nexamples_cpp : all\n\t$(Q)$(MAKE) -C examples CC=$(CXX)\n\n# Clean src and test directories.\nclean :\n\t$(Q)$(MAKE) clean -C src\n\t$(Q)$(MAKE) clean -C test/unit\n\t$(Q)$(MAKE) clean -C test/functional/src\n\t$(Q)$(MAKE) clean -C test/cpp\n\t$(Q)$(MAKE) clean -C examples\n\t$(Q)rm -rf docs/html\n\t$(Q)rm -rf test/functional/__pycache__\n\t$(Q)rm -f  test/functional/*.pyc\n\t$(Q)rm -f  lib/*\n\t$(Q)$(MAKE) clean -C third_party/minizip\n\t$(Q)$(MAKE) clean -C third_party/tmpfileplus\n\t$(Q)$(MAKE) clean -C third_party/md5\n\t$(Q)$(MAKE) clean -C third_party/dtoa\n\n# Clean src and lib dir only, as a precursor for static analysis.\nclean_src :\n\t$(Q)$(MAKE) clean -C src\n\t$(Q)rm -f  lib/*\n\n# Run the unit tests.\ntest : all test_cpp test_unit test_functional\n\n# Test for C++ const correctness on APIs.\ntest_const : all\n\t$(Q)$(MAKE) clean -C test/functional/src\n\t$(Q)! $(MAKE) -C test/functional/src CFLAGS=-Wwrite-strings 2>&1 | grep -A 1 \"note:\"\n\n\n# Run the functional tests.\ntest_functional : all\n\t$(Q)$(MAKE) -C test/functional/src\n\t$(Q)$(PYTEST) test/functional -v -k $(PYTESTFILES)\n\n# Run all tests.\ntest_unit : all\n\t$(Q)$(MAKE) -C src test_lib\n\t$(Q)$(MAKE) -C test/unit test\n\n# Test C++ compilation.\ntest_cpp : all\n\t$(Q)$(MAKE) -C test/cpp\n\n# Test Cmake. This test should really be done with Cmake in the cmake dir but\n# this is a workaround for now.\ntest_cmake :\nifneq ($(findstring m32,$(CFLAGS)),m32)\n\t$(Q)$(MAKE) -C src clean\n\t$(Q)cd cmake; cmake .. -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON; make clean; make; cp libxlsxwriter.a ../src/\n\t$(Q)cmake/xlsxwriter_unit\n\t$(Q)$(MAKE) -C test/functional/src\n\t$(Q)$(PYTEST) test/functional -v -k $(PYTESTFILES)\nelse\n\t@echo \"Skipping Cmake tests on 32 bit target.\"\nendif\n\n# Test the functional test exes with valgrind (in 64bit mode only).\ntest_valgrind : all\nifndef NO_VALGRIND\n\t$(Q)$(MAKE) -C test/functional/src test_valgrind\n\t$(Q)$(MAKE) -C examples test_valgrind\nendif\n\n# Minimal target for quick compile without creating the libs.\ntest_compile :\n\t$(Q)$(MAKE) -C src\ttest_compile\n\n# Indent the source files with the .indent.pro settings.\nindent:\n\t$(Q)gindent src/*.c include/*.h include/xlsxwriter/*.h\n\ntags:\n\t$(Q)rm -f TAGS\n\t$(Q)etags src/*.c include/*.h include/xlsxwriter/*.h\n\n# Build the doxygen docs.\ndoc: docs\ndocs:\n\t$(Q)$(MAKE) -C docs\n\t@echo \"Docs built.\"\n\ndocs_doxygen_only:\n\t$(Q)$(MAKE) -C docs docs_doxygen_only\n\ndocs_external:\n\t$(Q)make -C ../libxlsxwriter.github.io release\n\n# Simple install.\ninstall: all\n\t$(Q)mkdir -p        $(DESTDIR)$(PREFIX)/include\n\t$(Q)cp -R include/* $(DESTDIR)$(PREFIX)/include\n\t$(Q)mkdir -p        $(DESTDIR)$(PREFIX)/lib\n\t$(Q)cp -R lib/*     $(DESTDIR)$(PREFIX)/lib\n\t$(Q)mkdir -p        $(DESTDIR)$(PREFIX)/lib/pkgconfig\n\t$(Q)sed -e          's|@PREFIX@|$(PREFIX)|g'  -e 's|@VERSION@|$(VERSION)|g' dev/release/pkg-config.txt > $(DESTDIR)$(PREFIX)/lib/pkgconfig/xlsxwriter.pc\n\n# Simpler uninstall.\nuninstall:\n\t$(Q)rm -rf $(DESTDIR)$(PREFIX)/include/xlsxwriter*\n\t$(Q)rm     $(DESTDIR)$(PREFIX)/lib/libxlsxwriter.*\n\t$(Q)rm     $(DESTDIR)$(PREFIX)/lib/pkgconfig/xlsxwriter.pc\n\n# Strip the lib files.\nstrip:\n\t$(Q)strip lib/*\n\n# Run a coverity static analysis.\ncoverity: clean_src third_party\n\t$(Q)rm -rf  cov-int\n\t$(Q)rm -f libxlsxwriter-coverity.tgz\n\t$(Q)../../cov-analysis-linux64-2019.03/bin/cov-build --dir cov-int make -C src libxlsxwriter.a\n\t$(Q)tar -czf libxlsxwriter-coverity.tgz cov-int\n\t$(Q)$(MAKE) -C src clean\n\t$(Q)rm -f  lib/*\n\n# Run address sanitiser.\naddress_sanitiser: third_party\n\t$(Q)$(MAKE) -C src libxlsxwriter.a CFLAGS=\"-fsanitize=address -O1 -fsanitize-coverage=trace-pc-guard -fno-omit-frame-pointer -g\"\n\t$(Q)$(MAKE) -C examples            CFLAGS=\"-fsanitize=address -O1 -fsanitize-coverage=trace-pc-guard -fno-omit-frame-pointer -g\"\n\n# Run gcov coverage analysis.\ngcov: third_party\n\t$(Q)$(MAKE) -C src clean\n\t$(Q)$(MAKE) -C src                 GCOV=\"--coverage\" OPT_LEVEL=\"-O0\"\n\t$(Q)$(MAKE) -C src test_lib        GCOV=\"--coverage\"\n\t$(Q)$(MAKE) -C test/unit test      GCOV=\"--coverage\"\n\t$(Q)$(MAKE) -C test/functional/src GCOV=\"--coverage\"\n\t$(Q)$(PYTEST) test/functional -v -k $(PYTESTFILES)\n\t$(Q)mkdir -p build\n\t$(Q)gcovr -r src --html-details -o build/libxlsxwriter_gcov.html\n\t$(Q)gcovr -r . -f src --sonarqube build/coverage.xml\n\n# Run sonarcloud analysis.\nsonarcloud: gcov\nifndef SONAR_TOKEN\n\t@echo \"Please define SONAR_TOKEN to run this analysis.\"\n\t@exit 1\nendif\n\t$(Q)$(MAKE) clean\n\t$(Q)../sonar-scanner-4.6.1.2450-macosx/bin/build-wrapper-macosx-x86 --out-dir build make all\n\t$(Q)../sonar-scanner-4.6.1.2450-macosx/bin/sonar-scanner \\\n        -Dsonar.organization=jmcnamara-github \\\n        -Dsonar.projectKey=jmcnamara_libxlsxwriter \\\n        -Dsonar.projectName=libxlsxwriter \\\n        -Dsonar.projectVersion=$(VERSION) \\\n        -Dsonar.sources=src \\\n        -Dsonar.sourceEncoding=UTF-8 \\\n        -Dsonar.cfamily.build-wrapper-output=build \\\n        -Dsonar.working.directory=build/scannerwork \\\n        -Dsonar.host.url=https://sonarcloud.io \\\n        -Dsonar.coverageReportPaths=build/coverage.xml\n\nsonarcloud_no_gcov:\nifndef SONAR_TOKEN\n\t@echo \"Please define SONAR_TOKEN to run this analysis.\"\n\t@exit 1\nendif\n\t$(Q)$(MAKE) clean\n\t$(Q)../sonar-scanner-4.6.1.2450-macosx/bin/build-wrapper-macosx-x86 --out-dir build make all\n\t$(Q)../sonar-scanner-4.6.1.2450-macosx/bin/sonar-scanner \\\n        -Dsonar.organization=jmcnamara-github \\\n        -Dsonar.projectKey=jmcnamara_libxlsxwriter \\\n        -Dsonar.projectName=libxlsxwriter \\\n        -Dsonar.projectVersion=$(VERSION) \\\n        -Dsonar.sources=src \\\n        -Dsonar.sourceEncoding=UTF-8 \\\n        -Dsonar.cfamily.build-wrapper-output=build \\\n        -Dsonar.working.directory=build/scannerwork \\\n        -Dsonar.host.url=https://sonarcloud.io\n\n\n# Run a scan-build static analysis.\nscan_build: clean_src third_party\n\t$(Q)scan-build make -C src libxlsxwriter.a\n\t$(Q)$(MAKE) -C src clean\n\t$(Q)rm -f  lib/*\n\nspellcheck:\n\t$(Q)for f in docs/src/*.dox;         do aspell --lang=en_US --check $$f; done\n\t$(Q)for f in include/xlsxwriter/*.h; do aspell --lang=en_US --check $$f; done\n\t$(Q)for f in src/*.c;                do aspell --lang=en_US --check $$f; done\n\t$(Q)for f in examples/*.c;           do aspell --lang=en_US --check $$f; done\n\t$(Q)aspell --lang=en_US --check Changes.txt\n\t$(Q)aspell --lang=en_US --check Readme.md\n\t$(Q)aspell --lang=en_US --check docs/src/examples.txt\n\nreleasecheck:\n\t$(Q)dev/release/release_check.sh\n\nrelease: releasecheck\n\t@echo\n\t@echo \"Pushing to git main ...\"\n\t$(Q)git push origin main\n\t$(Q)git push --tags\n\n\t@echo\n\t@echo \"Pushing updated docs ...\"\n\t$(Q)make -C ../libxlsxwriter.github.io release\n\n\t@echo\n\t@echo \"Pushing the cocoapod ...\"\n\t$(Q)pod trunk push libxlsxwriter.podspec --use-libraries\n\n\t@echo\n\t@echo \"Finished. Opening files.\"\n\t$(Q)open https://libxlsxwriter.github.io/changes.html\n\t$(Q)open https://cocoadocs.org/docsets/libxlsxwriter\n\t$(Q)open https://github.com/jmcnamara/libxlsxwriter\n\t$(Q)open https://github.com/jmcnamara/libxlsxwriter/releases\n"
        },
        {
          "name": "Package.swift",
          "type": "blob",
          "size": 1.1181640625,
          "content": "// swift-tools-version: 5.7\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"libxlsxwriter\",\n    products: [\n        .library(\n            name: \"libxlsxwriter\",\n            targets: [\"libxlsxwriter\"]),\n    ],\n    targets: [\n        .target(\n            name: \"libxlsxwriter\",\n            path: \".\",\n            exclude: [\n                \"src/Makefile\",\n            ],\n            sources: [\n                \"include\",\n                \"src\",\n                \"third_party/minizip/zip.c\",\n                \"third_party/minizip/ioapi.c\",\n                \"third_party/tmpfileplus/tmpfileplus.c\",\n                \"third_party/md5/md5.c\"\n            ],\n            publicHeadersPath: \"include\",\n            linkerSettings: [\n                .linkedLibrary(\"z\")\n            ]),\n        .testTarget(\n            name: \"libxlsxwritertests\",\n            dependencies: [\"libxlsxwriter\"],\n            path: \".\",\n            sources: [\"test/swift\"],\n            linkerSettings: [\n                .linkedLibrary(\"z\")\n            ]\n        )\n    ]\n)\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 2.193359375,
          "content": "# libxlsxwriter\n\n\nLibxlsxwriter: A C library for creating Excel XLSX files.\n\n\n![demo image](http://libxlsxwriter.github.io/demo.png)\n\n\n## The libxlsxwriter library\n\nLibxlsxwriter is a C library that can be used to write text, numbers, formulas\nand hyperlinks to multiple worksheets in an Excel 2007+ XLSX file.\n\nIt supports features such as:\n\n- 100% compatible Excel XLSX files.\n- Full Excel formatting.\n- Merged cells.\n- Defined names.\n- Autofilters.\n- Charts.\n- Data validation and dropdown lists.\n- Conditional formatting.\n- Worksheet PNG/JPEG/GIF images.\n- Cell comments.\n- Support for adding Macros.\n- Memory optimization mode for writing large files.\n- Source code available on [GitHub](https://github.com/jmcnamara/libxlsxwriter).\n- FreeBSD license.\n- ANSI C.\n- Works with GCC, Clang, Xcode, MSVC 2015, ICC, TCC, MinGW, MingGW-w64/32.\n- Works on Linux, FreeBSD, OpenBSD, OS X, iOS and Windows. Also works on MSYS/MSYS2 and Cygwin.\n- Compiles for 32 and 64 bit.\n- Compiles and works on big and little endian systems.\n- The only dependency is on `zlib`.\n\nHere is an example that was used to create the spreadsheet shown above:\n\n\n```C\n#include \"xlsxwriter.h\"\n\nint main() {\n\n    /* Create a new workbook and add a worksheet. */\n    lxw_workbook  *workbook  = workbook_new(\"demo.xlsx\");\n    lxw_worksheet *worksheet = workbook_add_worksheet(workbook, NULL);\n\n    /* Add a format. */\n    lxw_format *format = workbook_add_format(workbook);\n\n    /* Set the bold property for the format */\n    format_set_bold(format);\n\n    /* Change the column width for clarity. */\n    worksheet_set_column(worksheet, 0, 0, 20, NULL);\n\n    /* Write some simple text. */\n    worksheet_write_string(worksheet, 0, 0, \"Hello\", NULL);\n\n    /* Text with formatting. */\n    worksheet_write_string(worksheet, 1, 0, \"World\", format);\n\n    /* Write some numbers. */\n    worksheet_write_number(worksheet, 2, 0, 123,     NULL);\n    worksheet_write_number(worksheet, 3, 0, 123.456, NULL);\n\n    /* Insert an image. */\n    worksheet_insert_image(worksheet, 1, 2, \"logo.png\");\n\n    workbook_close(workbook);\n\n    return 0;\n}\n\n```\n\n\nSee the [full documentation](http://libxlsxwriter.github.io) for the getting\nstarted guide, a tutorial, the main API documentation and examples.\n\n"
        },
        {
          "name": "build.zig",
          "type": "blob",
          "size": 10.921875,
          "content": "const std = @import(\"std\");\n\nconst xlsxw_version: std.SemanticVersion = .{\n    .major = 1,\n    .minor = 1,\n    .patch = 9,\n};\n\npub fn build(b: *std.Build) void {\n    const target = b.standardTargetOptions(.{});\n    const optimize = b.standardOptimizeOption(.{});\n\n    const shared = b.option(bool, \"SHARED_LIBRARY\", \"Build the Shared Library [default: false]\") orelse false;\n    const examples = b.option(bool, \"BUILD_EXAMPLES\", \"Build libxlsxwriter examples [default: false]\") orelse false;\n    const tests = b.option(bool, \"BUILD_TESTS\", \"Build libxlsxwriter tests [default: false]\") orelse false;\n    const dtoa = b.option(bool, \"USE_DTOA_LIBRARY\", \"Use the locale independent third party Milo Yip DTOA library [default: off]\") orelse false;\n    const minizip = b.option(bool, \"USE_SYSTEM_MINIZIP\", \"Use system minizip installation [default: off]\") orelse false;\n    const md5 = b.option(bool, \"USE_OPENSSL_MD5\", \"Build libxlsxwriter with the OpenSSL MD5 lib [default: off]\") orelse false;\n    const stdtmpfile = b.option(bool, \"USE_STANDARD_TMPFILE\", \"Use the C standard library's tmpfile() [default: off]\") orelse false;\n\n    const lib = if (shared) b.addSharedLibrary(.{\n        .name = \"xlsxwriter\",\n        .target = target,\n        .optimize = optimize,\n        .version = xlsxw_version,\n    }) else b.addStaticLibrary(.{\n        .name = \"xlsxwriter\",\n        .target = target,\n        .optimize = optimize,\n    });\n    lib.pie = true;\n    switch (optimize) {\n        .Debug, .ReleaseSafe => lib.bundle_compiler_rt = true,\n        else => lib.root_module.strip = true,\n    }\n    if (tests)\n        lib.root_module.addCMacro(\"TESTING\", \"\");\n    lib.addCSourceFiles(.{\n        .files = &.{\n            \"src/vml.c\",\n            \"src/chartsheet.c\",\n            \"src/theme.c\",\n            \"src/content_types.c\",\n            \"src/xmlwriter.c\",\n            \"src/app.c\",\n            \"src/styles.c\",\n            \"src/core.c\",\n            \"src/comment.c\",\n            \"src/utility.c\",\n            \"src/metadata.c\",\n            \"src/custom.c\",\n            \"src/hash_table.c\",\n            \"src/relationships.c\",\n            \"src/drawing.c\",\n            \"src/chart.c\",\n            \"src/shared_strings.c\",\n            \"src/worksheet.c\",\n            \"src/format.c\",\n            \"src/table.c\",\n            \"src/workbook.c\",\n            \"src/packager.c\",\n            \"src/rich_value.c\",\n            \"src/rich_value_rel.c\",\n            \"src/rich_value_structure.c\",\n            \"src/rich_value_types.c\",\n        },\n        .flags = cflags,\n    });\n\n    // minizip\n    if (minizip) {\n        lib.addCSourceFiles(.{\n            .files = switch (lib.rootModuleTarget().os.tag) {\n                .windows => minizip_src ++ [_][]const u8{\n                    \"third_party/minizip/iowin32.c\",\n                },\n                else => minizip_src,\n            },\n            .flags = cflags,\n        });\n    }\n\n    const zlib = buildZlib(b, .{ target, optimize });\n    lib.linkLibrary(zlib);\n    lib.installLibraryHeaders(zlib);\n\n    // md5\n    if (!md5)\n        lib.addCSourceFile(.{\n            .file = b.path(\"third_party/md5/md5.c\"),\n            .flags = cflags,\n        })\n    else\n        lib.linkSystemLibrary(\"crypto\");\n\n    // dtoa\n    if (dtoa)\n        lib.addCSourceFile(.{\n            .file = b.path(\"third_party/dtoa/emyg_dtoa.c\"),\n            .flags = cflags,\n        });\n\n    // tmpfileplus\n    if (stdtmpfile)\n        lib.addCSourceFile(.{\n            .file = b.path(\"third_party/tmpfileplus/tmpfileplus.c\"),\n            .flags = cflags,\n        })\n    else\n        lib.root_module.addCMacro(\"USE_STANDARD_TMPFILE\", \"\");\n\n    lib.addIncludePath(b.path(\"include\"));\n    lib.addIncludePath(b.path(\"third_party\"));\n    lib.linkLibC();\n\n    // get headers on include to zig-out/include\n    lib.installHeadersDirectory(b.path(\"include\"), \"\", .{});\n\n    // get binaries on zig-cache to zig-out\n    b.installArtifact(lib);\n\n    // build examples\n    if (examples) {\n        buildExe(b, .{\n            .lib = lib,\n            .path = \"examples/anatomy.c\",\n        });\n        buildExe(b, .{\n            .lib = lib,\n            .path = \"examples/array_formula.c\",\n        });\n        buildExe(b, .{\n            .lib = lib,\n            .path = \"examples/autofilter.c\",\n        });\n        buildExe(b, .{\n            .lib = lib,\n            .path = \"examples/background.c\",\n        });\n        buildExe(b, .{\n            .lib = lib,\n            .path = \"examples/chart_area.c\",\n        });\n        buildExe(b, .{\n            .lib = lib,\n            .path = \"examples/chart_column.c\",\n        });\n        buildExe(b, .{\n            .lib = lib,\n            .path = \"examples/data_validate.c\",\n        });\n        buildExe(b, .{\n            .lib = lib,\n            .path = \"examples/hello.c\",\n        });\n        buildExe(b, .{\n            .lib = lib,\n            .path = \"examples/watermark.c\",\n        });\n        buildExe(b, .{\n            .lib = lib,\n            .path = \"examples/worksheet_protection.c\",\n        });\n    }\n    // build tests\n    if (tests) {\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/app/test_app.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/chart/test_chart.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/chartsheet/test_chartsheet.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/content_types/test_content_types.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/content_types/test_content_types_write_default.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/content_types/test_content_types_write_override.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/relationships/test_relationships.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/app/test_app_xml_declaration.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/relationships/test_relationships_xml_declaration.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/custom/test_custom_xml_declaration.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/metadata/test_metadata_xml_declaration.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/core/test_core_xml_declaration.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/sst/test_shared_strings.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/workbook/test_workbook.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/xmlwriter/test_xmlwriter.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/table/test_table01.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/table/test_table02.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/table/test_table03.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/table/test_table04.c\",\n        });\n        buildTest(b, .{\n            .lib = lib,\n            .path = \"test/unit/styles/test_styles_write_border.c\",\n        });\n    }\n}\n\nfn buildExe(b: *std.Build, info: BuildInfo) void {\n    const exe = b.addExecutable(.{\n        .name = info.filename(),\n        .optimize = info.lib.root_module.optimize.?,\n        .target = info.lib.root_module.resolved_target.?,\n    });\n    exe.addCSourceFile(.{\n        .file = b.path(info.path),\n        .flags = cflags,\n    });\n    exe.linkLibrary(info.lib);\n    for (info.lib.root_module.include_dirs.items) |include| {\n        exe.root_module.include_dirs.append(b.allocator, include) catch @panic(\"OOM\");\n    }\n    exe.linkLibC();\n    b.installArtifact(exe);\n\n    const run_cmd = b.addRunArtifact(exe);\n    run_cmd.step.dependOn(b.getInstallStep());\n    if (b.args) |args| {\n        run_cmd.addArgs(args);\n    }\n\n    const run_step = b.step(\n        b.fmt(\"{s}\", .{info.filename()}),\n        b.fmt(\"Run the {s} test\", .{info.filename()}),\n    );\n    run_step.dependOn(&run_cmd.step);\n}\n\nfn buildTest(b: *std.Build, info: BuildInfo) void {\n    const exe = b.addExecutable(.{\n        .name = info.filename(),\n        .optimize = info.lib.root_module.optimize.?,\n        .target = info.lib.root_module.resolved_target.?,\n    });\n    exe.root_module.addCMacro(\"TESTING\", \"\");\n    exe.addCSourceFile(.{\n        .file = b.path(info.path),\n        .flags = cflags,\n    });\n    exe.addCSourceFile(.{\n        .file = b.path(\"test/unit/test_all.c\"),\n        .flags = cflags,\n    });\n    exe.addIncludePath(b.path(\"test/unit\"));\n    for (info.lib.root_module.include_dirs.items) |include| {\n        exe.root_module.include_dirs.append(b.allocator, include) catch {};\n    }\n    exe.linkLibrary(info.lib);\n    exe.linkLibC();\n    b.installArtifact(exe);\n\n    const run_cmd = b.addRunArtifact(exe);\n    run_cmd.step.dependOn(b.getInstallStep());\n    if (b.args) |args| {\n        run_cmd.addArgs(args);\n    }\n\n    const run_step = b.step(\n        b.fmt(\"{s}\", .{info.filename()}),\n        b.fmt(\"Run the {s} test\", .{info.filename()}),\n    );\n    run_step.dependOn(&run_cmd.step);\n}\n\nconst cflags = &.{\n    \"-std=c89\",\n    \"-Wall\",\n    \"-Wextra\",\n    \"-Wno-unused-parameter\",\n};\nconst minizip_src: []const []const u8 = &.{\n    \"third_party/minizip/ioapi.c\",\n    \"third_party/minizip/mztools.c\",\n    \"third_party/minizip/unzip.c\",\n    \"third_party/minizip/zip.c\",\n};\n\nconst BuildInfo = struct {\n    lib: *std.Build.Step.Compile,\n    path: []const u8,\n\n    fn filename(self: BuildInfo) []const u8 {\n        var split = std.mem.splitSequence(u8, std.fs.path.basename(self.path), \".\");\n        return split.first();\n    }\n};\n\nfn buildZlib(b: *std.Build, options: anytype) *std.Build.Step.Compile {\n    const libz = b.addStaticLibrary(.{\n        .name = \"z\",\n        .target = options[0],\n        .optimize = options[1],\n    });\n    if (b.lazyDependency(\"zlib\", .{\n        .target = options[0],\n        .optimize = options[1],\n    })) |zlib_path| {\n        libz.addIncludePath(zlib_path.path(\"\"));\n        libz.addCSourceFiles(.{\n            .root = zlib_path.path(\"\"),\n            .files = &.{\n                \"adler32.c\",\n                \"crc32.c\",\n                \"deflate.c\",\n                \"infback.c\",\n                \"inffast.c\",\n                \"inflate.c\",\n                \"inftrees.c\",\n                \"trees.c\",\n                \"zutil.c\",\n                \"compress.c\",\n                \"uncompr.c\",\n                \"gzclose.c\",\n                \"gzlib.c\",\n                \"gzread.c\",\n                \"gzwrite.c\",\n            },\n            .flags = cflags,\n        });\n        libz.installHeader(zlib_path.path(\"zconf.h\"), \"zconf.h\");\n        libz.installHeader(zlib_path.path(\"zlib.h\"), \"zlib.h\");\n    }\n    libz.linkLibC();\n    return libz;\n}\n"
        },
        {
          "name": "build.zig.zon",
          "type": "blob",
          "size": 0.4765625,
          "content": ".{\n    .name = \"libxlsxwriter\",\n    .version = \"1.1.9\",\n    .dependencies = .{\n        .zlib = .{\n            .url = \"git+https://github.com/madler/zlib#v1.3.1\",\n            .hash = \"1220fed0c74e1019b3ee29edae2051788b080cd96e90d56836eea857b0b966742efb\",\n        },\n    },\n    .paths = .{\n        \"build.zig\",\n        \"build.zig.zon\",\n        \"Readme.md\",\n        \"License.txt\",\n        \"src\",\n        \"include\",\n        \"third_party\",\n    },\n}\n//syntax tip: zig - anon struct (json-like)\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "cocoapods",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libxlsxwriter.podspec",
          "type": "blob",
          "size": 2.80078125,
          "content": "Pod::Spec.new do |s|\n  s.name                  = \"libxlsxwriter\"\n  s.version               = \"1.1.9\"\n  s.summary               = \"Libxlsxwriter: A C library for creating Excel XLSX files.\"\n  s.ios.deployment_target = \"12.0\"\n  s.osx.deployment_target = \"10.13\"\n\n  s.description           = <<-DESC\n                            Libxlsxwriter is a C library that can be used to write text, numbers, formulas and hyperlinks to multiple worksheets in an Excel 2007+ XLSX file.\n\n                            It supports features such as:\n\n                            * 100% compatible Excel XLSX files.\n                            * Full Excel formatting.\n                            * Merged cells.\n                            * Defined names.\n                            * Autofilters.\n                            * Charts.\n                            * Data validation and dropdown lists.\n                            * Conditional formatting.\n                            * Worksheet PNG/JPEG/GIF images.\n                            * Cell comments.\n                            * Support for adding Macros.\n                            * Memory optimisation mode for writing large files.\n                            * Source code available on [GitHub](https://github.com/jmcnamara/libxlsxwriter).\n                            * FreeBSD license.\n                            * ANSI C.\n                            * Works with GCC, Clang, Xcode, MSVC 2015, ICC, TCC, MinGW, MingGW-w64/32.\n                            * Works on Linux, FreeBSD, OpenBSD, OS X, iOS and Windows. Also works on MSYS/MSYS2 and Cygwin.\n                            * Compiles for 32 and 64 bit.\n                            * Compiles and works on big and little endian systems.\n                            * The only dependency is on `zlib`.\n                            DESC\n\n  s.homepage              = \"http://libxlsxwriter.github.io\"\n  s.documentation_url     = \"http://libxlsxwriter.github.io\"\n  s.license               = \"FreeBSD\"\n  s.author                = { \"John McNamara\" => \"jmcnamara@cpan.org\" }\n\n  s.source                = { :git => \"https://github.com/jmcnamara/libxlsxwriter.git\", :tag => \"v\" + s.version.to_s }\n  s.source_files          = \"src/*.c\", \"third_party/**/{zip.c,ioapi.c,tmpfileplus.c,md5.c}\", \"include/**/*.h\"\n  s.preserve_paths        = [ 'third_party/**/*.h' ]\n  s.header_dir            = \"xlsxwriter\"\n  s.header_mappings_dir   = \"include\"\n  s.library               = \"z\"\n  s.compiler_flags        = \"-DNOCRYPT=1\", \"-DNOUNCRYPT=1\"\n  s.pod_target_xcconfig   = { 'USER_HEADER_SEARCH_PATHS' => '${PODS_ROOT}/libxlsxwriter/include' }\n  s.module_map            = \"cocoapods/libxlsxwriter.modulemap\"\n  s.prepare_command       = <<-CMD\n                            cp cocoapods/libxlsxwriter-umbrella.h include/xlsxwriter/libxlsxwriter-umbrella.h\n                          CMD\nend\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}