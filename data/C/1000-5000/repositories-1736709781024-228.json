{
  "metadata": {
    "timestamp": 1736709781024,
    "page": 228,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "littlekernel/lk",
      "stars": 3254,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.021484375,
          "content": "---\nChecks: >\n  -*,\n  bugprone-*,\n  -bugprone-easily-swappable-parameters,\n\n  clang-diagnostic-*,\n  -clang-diagnostic-unused-command-line-argument,\n\n  google-*,\n  -google-runtime-references,\n  -google-readability-todo,\n  -google-readability-braces-around-statements,\n\n  misc-*,\n  -misc-noexcept*,\n  -misc-no-recursion,\n  -misc-unused-parameters,\n  -misc-const-correctness,\n  -misc-include-cleaner,\n\n  modernize-*,\n  -modernize-avoid-c-arrays,\n  -modernize-deprecated-headers,\n  -modernize-raw-string-literal,\n  -modernize-return-braced-init-list,\n  -modernize-use-auto,\n  -modernize-use-equals-delete,\n  -modernize-use-nodiscard,\n  -modernize-use-trailing-return-type,\n\n  performance-*,\n  readability-*,\n  -readability-else-after-return,\n  -readability-function-cognitive-complexity,\n  -readability-identifier-length,\n  -readability-identifier-length,\n  -readability-implicit-bool-conversion,\n  -readability-isolate-declaration,\n  -readability-magic-numbers,\n  -readability-named-parameter,\n  -readability-qualified-auto,\n  -readability-uppercase-literal-suffix,\n\nWarningsAsErrors: false\nFormatStyle:     file\nCheckOptions:\n  - key:             misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic\n    value:           '1'\n  - key:             modernize-loop-convert.MaxCopySize\n    value:           '16'\n  - key:             modernize-loop-convert.MinConfidence\n    value:           reasonable\n  - key:             modernize-loop-convert.NamingStyle\n    value:           CamelCase\n  - key:             modernize-pass-by-value.IncludeStyle\n    value:           llvm\n  - key:             modernize-replace-auto-ptr.IncludeStyle\n    value:           llvm\n  - key:             modernize-use-default-member-init.UseAssignment\n    value:           '1'\n  - key:             modernize-use-emplace.IgnoreImplicitConstructors\n    value:           '1'\n  - key:             modernize-use-nullptr.NullMacros\n    value:           'NULL'\n  - key:             readability-braces-around-statements.ShortStatementLines\n    value:           '2'\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1708984375,
          "content": "*.dSYM\n*.orig\n*.swp\n*~\n.cache\n.clangd\n.vscode\nblk.bin\nbuild-*\ncompile_commands.json\ncscope.*\ndoit*\nlocal.mk\nscripts/toolpaths.local\nt\ntagit\nTAGS\ntags\ntoolchain\n.cache\nvmlinux\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.10546875,
          "content": "/*\n * Copyright (c) 2008-2015 Travis Geiselbrecht\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files\n * (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, sublicense, and/or sell copies of the Software,\n * and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.54296875,
          "content": "# The Little Kernel Embedded Operating System\n\nThe LK kernel is an SMP-aware kernel designed for small systems ported to a variety of platforms and cpu architectures.\n\nSee https://github.com/littlekernel/lk for the latest version.\n\n### High Level Features\n\n- Fully-reentrant multi-threaded preemptive kernel\n- Portable to many 32 and 64 bit architectures\n- Support for wide variety of embedded and larger platforms\n- Powerful modular build system\n- Large number of utility components selectable at build time\n\n### Supported architectures\n\n- ARM32\n  - Cortex-M class cores (armv6m - armv8m)\n  - ARMv7+ Cortex-A class cores\n- ARM64\n  - ARMv8 and ARMv9 cores\n- RISC-V 32 and 64bit bit in machine and supervisor mode\n- x86-32 and x86-64\n- Motorola 68000\n- Microblaze\n- MIPS\n- OpenRISC 1000\n- VAX (experimental)\n\n### [TODO](docs/todo.md)\n\n### To build and test for ARM64 on linux\n\n1. install or build qemu. v2.4 and above is recommended.\n2. install gcc for arm64 (see note 1)\n3. run scripts/do-qemuarm -6  (from the lk directory)\n4. you should see 'welcome to lk/MP'\n\nThis will get you a interactive prompt into LK which is running in qemu\narm64 machine 'virt' emulation. type 'help' for commands.\n\nNote: for ubuntu x86-64\nsudo apt-get install gcc-aarch64-linux-gnu\nor fetch a prebuilt toolchain from\nhttps://newos.org/toolchains/aarch64-elf-14.1.0-Linux-x86_64.tar.xz\n\n\n### Building with LLVM-based toolchains\n\nTo build LK with a LLVM-based toolchain you will have to manually specify the compiler and linker in the environemnt.\nUnlike GCC clang is a cross-compiler by default, so the target needs to be specified as part of the CC/CXX/CPP variables.\nFor example, assuming LLVM is in `/opt/llvm/bin/`, the following command will work to build for 64-bit RISC-V:\n\n```\ngmake qemu-virt-riscv64-test 'CC=/opt/llvm/bin/clang --target=riscv64-unknown-elf' 'CPP=/opt/llvm/bin/clang-cpp --target=riscv64-unknown-elf' 'CXX=/opt/llvm/bin/clang++ --target=riscv64-unknown-elf' 'LD=/opt/llvm/bin/ld.lld' TOOLCHAIN_PREFIX=/opt/llvm/bin/llvm- CPPFILT=/opt/llvm/bin/llvm-cxxfilt\n```\nTOOLCHAIN_PREFIX can be set to use the LLVM binutils, but due to the different naming of `llvm-cxxfilt` vs `c++filt` it needs to be set explicitly.\n\nTo build for AArch64 the command looks similar, just with a different `--target=` flag.\n```\ngmake qemu-virt-arm64-test 'CC=/opt/llvm/bin/clang --target=aarch64-unknown-elf' 'CPP=/opt/llvm/bin/clang-cpp --target=aarch64-unknown-elf' 'CXX=/opt/llvm/bin/clang++ --target=aarch64-unknown-elf' 'LD=/opt/llvm/bin/ld.lld' TOOLCHAIN_PREFIX=/opt/llvm/bin/llvm- CPPFILT=/opt/llvm/bin/llvm-cxxfilt\n```\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "arch",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine.mk",
          "type": "blob",
          "size": 12.744140625,
          "content": "LOCAL_MAKEFILE:=$(MAKEFILE_LIST)\n\n# macros used all over the build system\ninclude make/macros.mk\n\nBUILDROOT ?= .\n\n# 'make spotless' is a special rule that skips most of the rest of the build system and\n# simply deletes everything in build-*\nifeq ($(MAKECMDGOALS),spotless)\nspotless:\n\trm -rf -- \"$(BUILDROOT)\"/build-*\nelse\n\nifndef LKROOT\n$(error please define LKROOT to the root of the lk build system)\nendif\n\n# any local environment overrides can optionally be placed in local.mk\n-include local.mk\n\n# If one of our goals (from the commandline) happens to have a\n# matching project/goal.mk, then we should re-invoke make with\n# that project name specified...\n\nproject-name := $(firstword $(MAKECMDGOALS))\n\nifneq ($(project-name),)\nifneq ($(strip $(foreach d,$(LKINC),$(wildcard $(d)/project/$(project-name).mk))),)\ndo-nothing := 1\n$(MAKECMDGOALS) _all: make-make\n\t@:\nmake-make:\n\t@PROJECT=$(project-name) $(MAKE) -rR -f $(LOCAL_MAKEFILE) $(filter-out $(project-name), $(MAKECMDGOALS))\n\n.PHONY: make-make\nendif # expansion of project-name\nendif # project-name != null\n\n# some additional rules to print some help\ninclude make/help.mk\n\nifeq ($(do-nothing),)\n\nifeq ($(PROJECT),)\n\nifneq ($(DEFAULT_PROJECT),)\nPROJECT := $(DEFAULT_PROJECT)\nelse\n$(error No project specified. Use 'make list' for a list of projects or 'make help' for additional help)\nendif # DEFAULT_PROJECT == something\n\nendif # PROJECT == null\n\nDEBUG ?= 2\n\nBUILDDIR_SUFFIX ?=\nBUILDDIR := $(BUILDROOT)/build-$(PROJECT)$(BUILDDIR_SUFFIX)\nOUTBIN := $(BUILDDIR)/lk.bin\nOUTELF := $(BUILDDIR)/lk.elf\nCONFIGHEADER := $(BUILDDIR)/config.h\n\nGLOBAL_INCLUDES := $(BUILDDIR) $(addsuffix /include,$(LKINC))\nGLOBAL_OPTFLAGS ?= $(ARCH_OPTFLAGS)\nGLOBAL_COMPILEFLAGS := -g -include $(CONFIGHEADER)\nGLOBAL_COMPILEFLAGS += -Wextra -Wall -Werror=return-type -Wshadow -Wdouble-promotion\nGLOBAL_COMPILEFLAGS += -Wno-multichar -Wno-unused-parameter -Wno-unused-function -Wno-unused-label\nGLOBAL_COMPILEFLAGS += -fno-common\n# Build with -ffreestanding since we are building an OS kernel and cannot\n# rely on all hosted environment functionality being present.\nGLOBAL_COMPILEFLAGS += -ffreestanding\nGLOBAL_CFLAGS := --std=gnu11 -Werror-implicit-function-declaration -Wstrict-prototypes -Wwrite-strings\nGLOBAL_CPPFLAGS := --std=c++14 -fno-exceptions -fno-rtti -fno-threadsafe-statics\nGLOBAL_ASMFLAGS := -DASSEMBLY\nGLOBAL_LDFLAGS :=\n\nifeq ($(UBSAN), 1)\n# Inject lib/ubsan directly into MODULE_DEPS\n# lib/ubsan will itself add the needed CFLAGS\nMODULE_DEPS += lib/ubsan\nendif\n\n# flags that are sometimes nice to enable to catch problems but too strict to have on all the time.\n# add to global flags from time to time to find things, otherwise only available with a module\n# option (see make/module.mk re: MODULE_OPTIONS).\nEXTRA_MODULE_COMPILEFLAGS := -Wmissing-declarations -Wredundant-decls\nEXTRA_MODULE_CFLAGS := -Wmissing-prototypes\nEXTRA_MODULE_CPPFLAGS :=\nEXTRA_MODULE_ASMFLAGS :=\n\n#GLOBAL_COMPILEFLAGS += -Wpacked\n#GLOBAL_COMPILEFLAGS += -Wpadded\n#GLOBAL_COMPILEFLAGS += -Winline\n#GLOBAL_COMPILEFLAGS += -Wredundant-decls\n\n# if WERROR is set, add to the compile args\nifeq (true,$(call TOBOOL,$(WERROR)))\nGLOBAL_COMPILEFLAGS += -Werror\nendif\n\nGLOBAL_LDFLAGS += $(addprefix -L,$(LKINC))\n\n# Architecture specific compile flags\nARCH_COMPILEFLAGS :=\nARCH_COMPILEFLAGS_NOFLOAT := # flags used when compiling with floating point support\nARCH_COMPILEFLAGS_FLOAT := # flags for when not compiling with floating point support\nARCH_CFLAGS :=\nARCH_CPPFLAGS :=\nARCH_ASMFLAGS :=\nARCH_LDFLAGS :=\nARCH_OBJDUMP_FLAGS :=\nTHUMBCFLAGS := # optional compile switches set by arm architecture when compiling in thumb mode\n\n# top level rule\nall:: $(OUTBIN) $(OUTELF).lst $(OUTELF).debug.lst $(OUTELF).sym $(OUTELF).sym.sorted $(OUTELF).size $(OUTELF).dump $(BUILDDIR)/srcfiles.txt $(BUILDDIR)/include_paths.txt\n\n# master module object list\nALLMODULE_OBJS :=\n\n# master object list (for dep generation)\nALLOBJS :=\n\n# master source file list\nALLSRCS :=\n\n# a linker script needs to be declared in one of the project/target/platform files\nLINKER_SCRIPT :=\n\n# anything you add here will be deleted in make clean\nGENERATED := $(CONFIGHEADER)\n\n# anything added to GLOBAL_DEFINES will be put into $(BUILDDIR)/config.h\nGLOBAL_DEFINES := LK=1\n\n# Anything added to GLOBAL_SRCDEPS will become a dependency of every source file in the system.\n# Useful for header files that may be included by one or more source files.\nGLOBAL_SRCDEPS := $(CONFIGHEADER)\n\n# these need to be filled out by the project/target/platform rules.mk files\nTARGET :=\nPLATFORM :=\nARCH :=\nALLMODULES :=\n\n# add any external module dependencies\nMODULES := $(EXTERNAL_MODULES)\n\n# any .mk specified here will be included before build.mk\nEXTRA_BUILDRULES :=\n\n# any rules you put here will also be built by the system before considered being complete\nEXTRA_BUILDDEPS :=\n\n# any rules you put here will be depended on in clean builds\nEXTRA_CLEANDEPS :=\n\n# any objects you put here get linked with the final image\nEXTRA_OBJS :=\n\n# any extra linker scripts to be put on the command line\nEXTRA_LINKER_SCRIPTS :=\n\n# if someone defines this, the build id will be pulled into lib/version\nBUILDID ?=\n\n# comment out or override if you want to see the full output of each command\nNOECHO ?= @\n\n# Any modules you want to explictly prevent from being used\nDENY_MODULES :=\n\n# try to include the project file\n-include project/$(PROJECT).mk\nifndef TARGET\n$(error couldn't find project or project doesn't define target)\nendif\ninclude target/$(TARGET)/rules.mk\nifndef PLATFORM\n$(error couldn't find target or target doesn't define platform)\nendif\ninclude platform/$(PLATFORM)/rules.mk\n\nifndef ARCH\n$(error couldn't find arch or platform doesn't define arch)\nendif\ninclude arch/$(ARCH)/rules.mk\nifndef TOOLCHAIN_PREFIX\n$(error TOOLCHAIN_PREFIX not set in the arch rules.mk)\nendif\n\n# default to no ccache\nCCACHE ?=\nCC ?= $(CCACHE) $(TOOLCHAIN_PREFIX)gcc\nLD ?= $(TOOLCHAIN_PREFIX)ld\nOBJDUMP ?= $(TOOLCHAIN_PREFIX)objdump\nOBJCOPY ?= $(TOOLCHAIN_PREFIX)objcopy\nCPPFILT ?= $(TOOLCHAIN_PREFIX)c++filt\nSIZE ?= $(TOOLCHAIN_PREFIX)size\nNM ?= $(TOOLCHAIN_PREFIX)nm\nSTRIP ?= $(TOOLCHAIN_PREFIX)strip\n\n# Detect whether we are using ld.lld. If we don't detect ld.lld, we assume\n# it's ld.bfd. This check can be refined in the future if we need to handle\n# more cases (e.g. ld.gold).\nLINKER_TYPE := $(shell $(LD) -v 2>&1 | grep -q \"LLD\" && echo lld || echo bfd)\n$(info LINKER_TYPE=$(LINKER_TYPE))\n# Detect whether we are compiling with GCC or Clang\nCOMPILER_TYPE := $(shell $(CC) -v 2>&1 | grep -q \"clang version\" && echo clang || echo gcc)\n$(info COMPILER_TYPE=$(COMPILER_TYPE))\n\n# Now that CC is defined we can check if warning flags are supported and add\n# them to GLOBAL_COMPILEFLAGS if they are.\nifeq ($(call is_warning_flag_supported,-Wnonnull-compare),yes)\nGLOBAL_COMPILEFLAGS += -Wno-nonnull-compare\nendif\n# Ideally we would move this check to arm64/rules.mk, but we can only check\n# for supported warning flags once CC is defined.\nifeq ($(ARCH),arm64)\n# Clang incorrectly diagnoses msr operations as need a 64-bit operand even if\n# the underlying register is actually 32 bits. Silence this common warning.\nifeq ($(call is_warning_flag_supported,-Wasm-operand-widths),yes)\nARCH_COMPILEFLAGS += -Wno-asm-operand-widths\nendif\nendif\n\nifeq ($(ARCH),riscv)\n# ld.lld does not support linker relaxations yet.\n# TODO: This is no longer true as of LLVM 15, so should add a version check\nifeq ($(LINKER_TYPE),lld)\nARCH_COMPILEFLAGS += -mno-relax\n# Work around out-of-range undef-weak relocations when building with clang and\n# linking with ld.lld. This is not a problem with ld.bfd since ld.bfd rewrites\n# the instructions to avoid the out-of-range PC-relative relocation\n# See https://github.com/riscv-non-isa/riscv-elf-psabi-doc/issues/126 for more\n# details. For now, the simplest workaround is to build with -fpie when using\n# a version of clang that does not include https://reviews.llvm.org/D107280.\n# TODO: Add a clang 17 version check now that the review has been merged.\nifeq ($(COMPILER_TYPE),clang)\n# We also add the -fdirect-access-external-data flag is added to avoid the\n# majority of the performance overhead caused by -fPIE.\nARCH_COMPILEFLAGS += -fPIE -fdirect-access-external-data\nendif\nendif\nendif\n\n$(info PROJECT = $(PROJECT))\n$(info PLATFORM = $(PLATFORM))\n$(info TARGET = $(TARGET))\n$(info ARCH = $(ARCH))\n$(info TOOLCHAIN_PREFIX = $(TOOLCHAIN_PREFIX))\n$(info DEBUG = $(DEBUG))\n\n# include the top level module that includes basic always-there modules\ninclude top/rules.mk\n\n# recursively include any modules in the MODULE variable, leaving a trail of included\n# modules in the ALLMODULES list\ninclude make/recurse.mk\n\n# add some automatic configuration defines\nGLOBAL_DEFINES += \\\n\tPROJECT_$(PROJECT)=1 \\\n\tPROJECT=\\\"$(PROJECT)\\\" \\\n\tTARGET_$(TARGET)=1 \\\n\tTARGET=\\\"$(TARGET)\\\" \\\n\tPLATFORM_$(PLATFORM)=1 \\\n\tPLATFORM=\\\"$(PLATFORM)\\\" \\\n\tARCH_$(ARCH)=1 \\\n\tARCH=\\\"$(ARCH)\\\" \\\n\t$(addsuffix =1,$(addprefix WITH_,$(ALLMODULES)))\n\n# debug build?\nifneq ($(DEBUG),)\nGLOBAL_DEFINES += \\\n\tLK_DEBUGLEVEL=$(DEBUG)\nendif\n\n# allow additional defines from outside the build system\nifneq ($(EXTERNAL_DEFINES),)\nGLOBAL_DEFINES += $(EXTERNAL_DEFINES)\n$(info EXTERNAL_DEFINES = $(EXTERNAL_DEFINES))\nendif\n\n# prefix all of the paths in GLOBAL_INCLUDES with -I\nGLOBAL_INCLUDES := $(addprefix -I,$(GLOBAL_INCLUDES))\n\n# test for some old variables\nifneq ($(INCLUDES),)\n$(error INCLUDES variable set, please move to GLOBAL_INCLUDES: $(INCLUDES))\nendif\nifneq ($(DEFINES),)\n$(error DEFINES variable set, please move to GLOBAL_DEFINES: $(DEFINES))\nendif\n\n# try to have the compiler output colorized error messages if available\nexport GCC_COLORS ?= 1\n\n# the logic to compile and link stuff is in here\ninclude make/build.mk\n\nDEPS := $(ALLOBJS:%o=%d)\n\n# put all of the global build flags in config.h to force a rebuild if any change\nGLOBAL_DEFINES += GLOBAL_INCLUDES=\\\"$(subst $(SPACE),_,$(GLOBAL_INCLUDES))\\\"\nGLOBAL_DEFINES += GLOBAL_COMPILEFLAGS=\\\"$(subst $(SPACE),_,$(GLOBAL_COMPILEFLAGS))\\\"\nGLOBAL_DEFINES += GLOBAL_OPTFLAGS=\\\"$(subst $(SPACE),_,$(GLOBAL_OPTFLAGS))\\\"\nGLOBAL_DEFINES += GLOBAL_CFLAGS=\\\"$(subst $(SPACE),_,$(GLOBAL_CFLAGS))\\\"\nGLOBAL_DEFINES += GLOBAL_CPPFLAGS=\\\"$(subst $(SPACE),_,$(GLOBAL_CPPFLAGS))\\\"\nGLOBAL_DEFINES += GLOBAL_ASMFLAGS=\\\"$(subst $(SPACE),_,$(GLOBAL_ASMFLAGS))\\\"\nGLOBAL_DEFINES += GLOBAL_LDFLAGS=\\\"$(subst $(SPACE),_,$(GLOBAL_LDFLAGS))\\\"\nGLOBAL_DEFINES += ARCH_COMPILEFLAGS=\\\"$(subst $(SPACE),_,$(ARCH_COMPILEFLAGS))\\\"\nGLOBAL_DEFINES += ARCH_COMPILEFLAGS_FLOAT=\\\"$(subst $(SPACE),_,$(ARCH_COMPILEFLAGS_FLOAT))\\\"\nGLOBAL_DEFINES += ARCH_COMPILEFLAGS_NOFLOAT=\\\"$(subst $(SPACE),_,$(ARCH_COMPILEFLAGS_NOFLOAT))\\\"\nGLOBAL_DEFINES += ARCH_CFLAGS=\\\"$(subst $(SPACE),_,$(ARCH_CFLAGS))\\\"\nGLOBAL_DEFINES += ARCH_CPPFLAGS=\\\"$(subst $(SPACE),_,$(ARCH_CPPFLAGS))\\\"\nGLOBAL_DEFINES += ARCH_ASMFLAGS=\\\"$(subst $(SPACE),_,$(ARCH_ASMFLAGS))\\\"\nGLOBAL_DEFINES += ARCH_LDFLAGS=\\\"$(subst $(SPACE),_,$(ARCH_LDFLAGS))\\\"\nGLOBAL_DEFINES += TOOLCHAIN_PREFIX=\\\"$(subst $(SPACE),_,$(TOOLCHAIN_PREFIX))\\\"\n\nifneq ($(OBJS),)\n$(warning OBJS=$(OBJS))\n$(error OBJS is not empty, please convert to new module format)\nendif\nifneq ($(OPTFLAGS),)\n$(warning OPTFLAGS=$(OPTFLAGS))\n$(error OPTFLAGS is not empty, please use GLOBAL_OPTFLAGS or MODULE_OPTFLAGS)\nendif\nifneq ($(CFLAGS),)\n$(warning CFLAGS=$(CFLAGS))\n$(error CFLAGS is not empty, please use GLOBAL_CFLAGS or MODULE_CFLAGS)\nendif\nifneq ($(CPPFLAGS),)\n$(warning CPPFLAGS=$(CPPFLAGS))\n$(error CPPFLAGS is not empty, please use GLOBAL_CPPFLAGS or MODULE_CPPFLAGS)\nendif\n\n$(info LIBGCC = $(LIBGCC))\n$(info GLOBAL_COMPILEFLAGS = $(GLOBAL_COMPILEFLAGS))\n$(info GLOBAL_OPTFLAGS = $(GLOBAL_OPTFLAGS))\n$(info ARCH_COMPILEFLAGS = $(ARCH_COMPILEFLAGS))\n$(info ARCH_COMPILEFLAGS_FLOAT = $(ARCH_COMPILEFLAGS_FLOAT))\n$(info ARCH_COMPILEFLAGS_NOFLOAT = $(ARCH_COMPILEFLAGS_NOFLOAT))\n\n# make all object files depend on any targets in GLOBAL_SRCDEPS\n$(ALLOBJS): $(GLOBAL_SRCDEPS)\n\n# any extra top level build dependencies that someone declared.\n# build.mk may add to EXTRA_BUILDDEPS, this must be evalauted after build.mk.\nall:: $(EXTRA_BUILDDEPS)\n\nclean: $(EXTRA_CLEANDEPS)\n\trm -f $(ALLOBJS) $(DEPS) $(GENERATED) $(OUTBIN) $(OUTELF) $(OUTELF).lst $(OUTELF).debug.lst $(OUTELF).sym $(OUTELF).sym.sorted $(OUTELF).size $(OUTELF).hex $(OUTELF).dump\n\ninstall: all\n\tscp $(OUTBIN) 192.168.0.4:/tftpboot\n\nlist-arch:\n\t@echo ARCH = ${ARCH}\n\nlist-toolchain:\n\t@echo TOOLCHAIN_PREFIX = ${TOOLCHAIN_PREFIX}\n\ntags: $(BUILDDIR)/srcfiles.txt $(BUILDDIR)/include_paths.txt\n\t$(info generating tags)\n\t@ctags -L $<\n\n.PHONY: all clean install list-arch list-toolchain tags\n\n# generate a config.h file with all of the GLOBAL_DEFINES laid out in #define format\nconfigheader:\n\n$(CONFIGHEADER): configheader\n\t@$(call MAKECONFIGHEADER,$@,GLOBAL_DEFINES)\n\n.PHONY: configheader\n\n# Empty rule for the .d files. The above rules will build .d files as a side\n# effect. Only works on gcc 3.x and above, however.\n%.d:\n\nifeq ($(filter $(MAKECMDGOALS), clean), )\n-include $(DEPS)\nendif\n\nendif # do-nothing = 1\n\nendif # make spotless\n"
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "lk.code-workspace",
          "type": "blob",
          "size": 0.892578125,
          "content": "{\n    \"folders\": [\n        {\n            \"path\": \".\"\n        }\n    ],\n    \"settings\": {\n        // Disable auto-formatting till the project decides on a\n        // machine-readable config to control it (e.g., .clang-format).\n        \"[c]\": {\n            \"editor.formatOnSave\": false,\n        },\n        \"[cpp]\": {\n            \"editor.formatOnSave\": false,\n        },\n        // Allows editor.tabSize to be specified (otherwise it is overridden as\n        // auto-detected).\n        \"editor.detectIndentation\": false,\n        // Convert tabs to spaces.\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 4,\n        \"files.exclude\": {\n            \"**/.cache\": true,\n            \"**/.clangd\": true\n        }\n    },\n    \"extensions\": {\n        \"recommendations\": [\n            \"mkornelsen.vscode-arm64\",\n            \"llvm-vs-code-extensions.vscode-clangd\",\n            \"sunshaoce.risc-v\"\n        ]\n    }\n}\n"
        },
        {
          "name": "lk_inc.mk.example",
          "type": "blob",
          "size": 0.576171875,
          "content": "# copy this and makefile to your external root directory and customize\n# according to how you want to use a split repository\n\n# the top level directory that all paths are relative to\nLKMAKEROOT := .\n\n# paths relative to LKMAKEROOT where additional modules should be searched\nLKINC := projectroot\n\n# the path relative to LKMAKEROOT where the main lk repository lives\nLKROOT := lk\n\n# set the directory relative to LKMAKEROOT where output will go\nBUILDROOT ?= .\n\n# set the default project if no args are passed\nDEFAULT_PROJECT ?= testproject\n\n#TOOLCHAIN_PREFIX := <relative path to toolchain>\n"
        },
        {
          "name": "make",
          "type": "tree",
          "content": null
        },
        {
          "name": "makefile",
          "type": "blob",
          "size": 1.0869140625,
          "content": "# the above include may override LKROOT and LKINC to allow external\n# directories to be included in the build\n-include lk_inc.mk\n\nLKMAKEROOT ?= .\nLKROOT ?= .\nLKINC ?=\nBUILDROOT ?= .\nDEFAULT_PROJECT ?=\nTOOLCHAIN_PREFIX ?=\n\n# check if LKROOT is already a part of LKINC list and add it only if it is not\nifeq ($(filter $(LKROOT),$(LKINC)), )\nLKINC := $(LKROOT) $(LKINC)\nendif\n\n# add the external path to LKINC\nifneq ($(LKROOT),.)\nLKINC += $(LKROOT)/external\nelse\nLKINC += external\nendif\n\nexport LKMAKEROOT\nexport LKROOT\nexport LKINC\nexport BUILDROOT\nexport DEFAULT_PROJECT\nexport TOOLCHAIN_PREFIX\n\n# veneer makefile that calls into the engine with lk as the build root\n# if we're the top level invocation, call ourselves with additional args\n_top:\n\t@$(MAKE) -C $(LKMAKEROOT) -rR -f $(LKROOT)/engine.mk $(addprefix -I,$(LKINC)) $(MAKECMDGOALS)\n\n# If any arguments were provided, create a recipe for them that depends\n# on the _top rule (thus calling it), but otherwise do nothing.\n# \"@:\" (vs empty rule \";\") prevents extra \"'foo' is up to date.\" messages from\n# being emitted.\n$(MAKECMDGOALS): _top\n\t@:\n\n.PHONY: _top\n"
        },
        {
          "name": "platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "project",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "target",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "top",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}