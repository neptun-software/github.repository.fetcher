{
  "metadata": {
    "timestamp": 1736709906366,
    "page": 413,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "78/xiaozhi-esp32",
      "stars": 2614,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.12109375,
          "content": "tmp/\ncomponents/\nmanaged_components/\nbuild/\n.vscode/\n.devcontainer/\nsdkconfig.old\nsdkconfig\ndependencies.lock\n.env\nreleases/"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.384765625,
          "content": "# For more information about build system see\n# https://docs.espressif.com/projects/esp-idf/en/latest/api-guides/build-system.html\n# The following five lines of boilerplate have to be in your project's\n# CMakeLists in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\n\nset(PROJECT_VER \"0.9.9\")\n\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(xiaozhi)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2024 Xiaoxia\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.62890625,
          "content": "# 小智 AI 聊天机器人 （XiaoZhi AI Chatbot）\n\n（中文 | [English](README_en.md) | [日本語](README_ja.md)）\n\n这是虾哥的第一个硬件作品。\n\n👉 [ESP32+SenseVoice+Qwen72B打造你的AI聊天伴侣！【bilibili】](https://www.bilibili.com/video/BV11msTenEH3/?share_source=copy_web&vd_source=ee1aafe19d6e60cf22e60a93881faeba)\n\n👉 [手工打造你的 AI 女友，新手入门教程【bilibili】](https://www.bilibili.com/video/BV1XnmFYLEJN/)\n\n## 项目目的\n\n本项目基于乐鑫的 ESP-IDF 进行开发。\n\n本项目是一个开源项目，主要用于教学目的。我们希望通过这个项目，能够帮助更多人入门 AI 硬件开发，了解如何将当下飞速发展的大语言模型应用到实际的硬件设备中。无论你是对 AI 感兴趣的学生，还是想要探索新技术的开发者，都可以通过这个项目获得宝贵的学习经验。\n\n欢迎所有人参与到项目的开发和改进中来。如果你有任何想法或建议，请随时提出 Issue 或加入群聊。\n\n学习交流 QQ 群：946599635\n\n## 已实现功能\n\n- Wi-Fi / ML307 Cat.1 4G\n- BOOT 键唤醒和打断，支持点击和长按两种触发方式\n- 离线语音唤醒 [ESP-SR](https://github.com/espressif/esp-sr)\n- 流式语音对话（WebSocket 或 UDP 协议）\n- 支持国语、粤语、英语、日语、韩语 5 种语言识别 [SenseVoice](https://github.com/FunAudioLLM/SenseVoice)\n- 声纹识别，识别是谁在喊 AI 的名字 [3D Speaker](https://github.com/modelscope/3D-Speaker)\n- 大模型 TTS（火山引擎 或 CosyVoice）\n- 大模型 LLM（Qwen2.5 72B 或 豆包 API）\n- 可配置的提示词和音色（自定义角色）\n- 短期记忆，每轮对话后自我总结\n- OLED / LCD 显示屏，显示信号强弱或对话内容\n\n## 硬件部分\n\n### 面包板手工制作实践\n\n详见飞书文档教程：\n\n👉 [《小智 AI 聊天机器人百科全书》](https://ccnphfhqs21z.feishu.cn/wiki/F5krwD16viZoF0kKkvDcrZNYnhb?from=from_copylink)\n\n面包板效果图如下：\n\n![面包板效果图](docs/wiring2.jpg)\n\n### 已支持的开源硬件\n\n- <a href=\"https://oshwhub.com/li-chuang-kai-fa-ban/li-chuang-shi-zhan-pai-esp32-s3-kai-fa-ban\" target=\"_blank\" title=\"立创·实战派 ESP32-S3 开发板\">立创·实战派 ESP32-S3 开发板</a>\n- <a href=\"https://github.com/espressif/esp-box\" target=\"_blank\" title=\"乐鑫 ESP32-S3-BOX3\">乐鑫 ESP32-S3-BOX3</a>\n- <a href=\"https://docs.m5stack.com/zh_CN/core/CoreS3\" target=\"_blank\" title=\"M5Stack CoreS3\">M5Stack CoreS3</a>\n- 神奇按钮 2.4\n- <a href=\"https://oshwhub.com/tenclass01/xmini_c3\" target=\"_blank\" title=\"虾哥 Mini C3\">虾哥 Mini C3</a>\n\n<div style=\"display: flex; justify-content: space-between;\">\n  <a href=\"docs/lichuang-s3.jpg\" target=\"_blank\" title=\"立创·实战派 ESP32-S3 开发板\">\n    <img src=\"docs/lichuang-s3.jpg\" width=\"240\" />\n  </a>\n  <a href=\"docs/esp32s3-box3.jpg\" target=\"_blank\" title=\"乐鑫 ESP32-S3-BOX3\">\n    <img src=\"docs/esp32s3-box3.jpg\" width=\"240\" />\n  </a>\n  <a href=\"docs/m5stack-cores3.jpg\" target=\"_blank\" title=\"M5Stack CoreS3\">\n    <img src=\"docs/m5stack-cores3.jpg\" width=\"240\" />\n  </a>\n  <a href=\"docs/magiclick-2p4.jpg\" target=\"_blank\" title=\"神奇按钮 2.4\">\n    <img src=\"docs/magiclick-2p4.jpg\" width=\"240\" />\n  </a>\n  <a href=\"docs/xmini-c3.jpg\" target=\"_blank\" title=\"虾哥 Mini C3\">\n    <img src=\"docs/xmini-c3.jpg\" width=\"240\" />\n  </a>\n</div>\n\n## 固件部分\n\n### 免开发环境烧录\n\n新手第一次操作建议先不要搭建开发环境，直接使用免开发环境烧录的固件。固件使用的是作者友情提供的测试服，目前开放免费使用，请勿用于商业用途。\n\n👉 [Flash烧录固件（无IDF开发环境）](https://ccnphfhqs21z.feishu.cn/wiki/Zpz4wXBtdimBrLk25WdcXzxcnNS) \n\n\n### 开发环境\n\n- Cursor 或 VSCode\n- 安装 ESP-IDF 插件，选择 SDK 版本 5.3 或以上\n- Linux 比 Windows 更好，编译速度快，也免去驱动问题的困扰\n\n\n## AI 角色配置\n\n如果你已经拥有一个小智 AI 聊天机器人，可以参考 👉 [后台操作视频教程](https://www.bilibili.com/video/BV1jUCUY2EKM/)\n\n详细的使用说明以及测试服的注意事项，请参考 👉 [小智测试服的帮助说明](https://xiaozhi.me/help)。\n\n## Star History\n\n<a href=\"https://star-history.com/#78/xiaozhi-esp32&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=78/xiaozhi-esp32&type=Date&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=78/xiaozhi-esp32&type=Date\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=78/xiaozhi-esp32&type=Date\" />\n </picture>\n</a>\n"
        },
        {
          "name": "README_en.md",
          "type": "blob",
          "size": 4.7841796875,
          "content": "# XiaoZhi AI Chatbot\n\n（[中文](README.md) | English | [日本語](README_ja.md)）\n\nThis is Terrence's first hardware project.\n\n👉 [Build your AI chat companion with ESP32+SenseVoice+Qwen72B! [bilibili]](https://www.bilibili.com/video/BV11msTenEH3/?share_source=copy_web&vd_source=ee1aafe19d6e60cf22e60a93881faeba)\n\n👉 [DIY Your AI Companion - Beginner's Tutorial [bilibili]](https://www.bilibili.com/video/BV1XnmFYLEJN/)\n\n## Project Purpose\n\nThis project is developed based on Espressif's ESP-IDF.\n\nThis is an open-source project primarily for educational purposes. Through this project, we aim to help more people get started with AI hardware development and understand how to integrate rapidly evolving large language models into actual hardware devices. Whether you're a student interested in AI or a developer looking to explore new technologies, this project offers valuable learning experiences.\n\nEveryone is welcome to participate in the project's development and improvement. If you have any ideas or suggestions, please feel free to raise an Issue or join our chat group.\n\nLearning & Discussion QQ Group: 946599635\n\n## Implemented Features\n\n- Wi-Fi / ML307 Cat.1 4G\n- BOOT button wake-up and interrupt, supporting both click and long-press triggers\n- Offline voice wake-up [ESP-SR](https://github.com/espressif/esp-sr)\n- Streaming voice dialogue (WebSocket or UDP protocol)\n- Support for 5 languages: Mandarin, Cantonese, English, Japanese, Korean [SenseVoice](https://github.com/FunAudioLLM/SenseVoice)\n- Voice print recognition to identify who's calling AI's name [3D Speaker](https://github.com/modelscope/3D-Speaker)\n- Large model TTS (Volcengine or CosyVoice)\n- Large Language Model (Qwen2.5 72B or Doubao API)\n- Configurable prompts and voice tones (custom characters)\n- Short-term memory with self-summary after each conversation round\n- OLED / LCD display showing signal strength or conversation content\n\n## Hardware Section\n\n### Breadboard Practice\n\nFor detailed tutorial, see the Feishu document:\n\n👉 [XiaoZhi AI Chatbot Encyclopedia](https://ccnphfhqs21z.feishu.cn/wiki/F5krwD16viZoF0kKkvDcrZNYnhb?from=from_copylink)\n\nBreadboard setup shown below:\n\n![Breadboard Setup](docs/wiring2.jpg)\n\n### Supported Open-Source Hardware\n\n- <a href=\"https://oshwhub.com/li-chuang-kai-fa-ban/li-chuang-shi-zhan-pai-esp32-s3-kai-fa-ban\" target=\"_blank\" title=\"LiChuang ESP32-S3 Development Board\">LiChuang ESP32-S3 Development Board</a>\n- <a href=\"https://github.com/espressif/esp-box\" target=\"_blank\" title=\"Espressif ESP32-S3-BOX3\">Espressif ESP32-S3-BOX3</a>\n- <a href=\"https://docs.m5stack.com/zh_CN/core/CoreS3\" target=\"_blank\" title=\"M5Stack CoreS3\">M5Stack CoreS3</a>\n- MagiClick 2.4\n- <a href=\"https://oshwhub.com/tenclass01/xmini_c3\" target=\"_blank\" title=\"Xmini C3\">Xmini C3</a>\n\n<div style=\"display: flex; justify-content: space-between;\">\n  <a href=\"docs/lichuang-s3.jpg\" target=\"_blank\" title=\"LiChuang ESP32-S3 Development Board\">\n    <img src=\"docs/lichuang-s3.jpg\" />\n  </a>\n  <a href=\"docs/esp32s3-box3.jpg\" target=\"_blank\" title=\"Espressif ESP32-S3-BOX3\">\n    <img src=\"docs/esp32s3-box3.jpg\" />\n  </a>\n  <a href=\"docs/m5stack-cores3.jpg\" target=\"_blank\" title=\"M5Stack CoreS3\">\n    <img src=\"docs/m5stack-cores3.jpg\" />\n  </a>\n  <a href=\"docs/magiclick-2p4.jpg\" target=\"_blank\" title=\"MagiClick 2.4\">\n    <img src=\"docs/magiclick-2p4.jpg\" />\n  </a>\n  <a href=\"docs/xmini-c3.jpg\" target=\"_blank\" title=\"Xmini C3\">\n    <img src=\"docs/xmini-c3.jpg\" />\n  </a>\n</div>\n\n## Firmware Section\n\n### Flashing Without Development Environment\n\nFor beginners, it's recommended to first try flashing the firmware without setting up a development environment. The firmware uses a test server provided by the author, currently available for free use (not for commercial purposes).\n\n👉 [Flash Firmware Guide (No IDF Environment Required)](https://ccnphfhqs21z.feishu.cn/wiki/Zpz4wXBtdimBrLk25WdcXzxcnNS)\n\n### Development Environment\n\n- Cursor or VSCode\n- Install ESP-IDF plugin, select SDK version 5.3 or above\n- Linux is preferred over Windows for faster compilation and fewer driver issues\n\n## AI Character Configuration\n\nIf you already have a XiaoZhi AI chatbot, please refer to 👉 [Backend Operation Video Tutorial](https://www.bilibili.com/video/BV1jUCUY2EKM/)\n\nFor detailed usage instructions and test server notes, please refer to 👉 [XiaoZhi Test Server Help Guide](https://xiaozhi.me/help).\n\n## Star History\n\n<a href=\"https://star-history.com/#78/xiaozhi-esp32&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=78/xiaozhi-esp32&type=Date&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=78/xiaozhi-esp32&type=Date\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=78/xiaozhi-esp32&type=Date\" />\n </picture>\n</a> \n"
        },
        {
          "name": "README_ja.md",
          "type": "blob",
          "size": 5.6884765625,
          "content": "# XiaoZhi AI チャットボット\n\n（[中文](README.md) | [English](README_en.md) | 日本語）\n\nこれはテレンスの最初のハードウェアプロジェクトです。\n\n👉 [ESP32+SenseVoice+Qwen72BでAIチャットコンパニオンを作ろう！【bilibili】](https://www.bilibili.com/video/BV11msTenEH3/?share_source=copy_web&vd_source=ee1aafe19d6e60cf22e60a93881faeba)\n\n👉 [AIコンパニオンをDIYする - 初心者向けチュートリアル【bilibili】](https://www.bilibili.com/video/BV1XnmFYLEJN/)\n\n## プロジェクトの目的\n\nこのプロジェクトはEspressifのESP-IDFに基づいて開発されています。\n\nこのプロジェクトは主に教育目的のためのオープンソースプロジェクトです。このプロジェクトを通じて、より多くの人々がAIハードウェア開発を始め、急速に進化する大規模言語モデルを実際のハードウェアデバイスに統合する方法を理解する手助けをすることを目指しています。AIに興味のある学生や新しい技術を探求したい開発者にとって、このプロジェクトは貴重な学習体験を提供します。\n\nプロジェクトの開発と改善に参加することを歓迎します。アイデアや提案があれば、Issueを提起するか、チャットグループに参加してください。\n\n学習・ディスカッションQQグループ: 946599635\n\n## 実装された機能\n\n- Wi-Fi / ML307 Cat.1 4G\n- BOOTボタンのウェイクアップと割り込み、クリックと長押しの両方のトリガーをサポート\n- オフライン音声ウェイクアップ [ESP-SR](https://github.com/espressif/esp-sr)\n- ストリーミング音声対話（WebSocketまたはUDPプロトコル）\n- 5つの言語をサポート：標準中国語、広東語、英語、日本語、韓国語 [SenseVoice](https://github.com/FunAudioLLM/SenseVoice)\n- 音声認識でAIの名前を呼んでいる人を識別 [3D Speaker](https://github.com/modelscope/3D-Speaker)\n- 大規模モデルTTS（VolcengineまたはCosyVoice）\n- 大規模言語モデル（Qwen2.5 72BまたはDoubao API）\n- カスタマイズ可能なプロンプトと音声トーン（カスタムキャラクター）\n- 短期記憶、各対話ラウンド後の自己要約\n- 信号強度や対話内容を表示するOLED / LCDディスプレイ\n\n## ハードウェアセクション\n\n### ブレッドボードの練習\n\n詳細なチュートリアルについては、Feishuドキュメントを参照してください：\n\n👉 [XiaoZhi AI チャットボット百��事典](https://ccnphfhqs21z.feishu.cn/wiki/F5krwD16viZoF0kKkvDcrZNYnhb?from=from_copylink)\n\n以下にブレッドボードのセットアップを示します：\n\n![ブレッドボードのセットアップ](docs/wiring2.jpg)\n\n### サポートされているオープンソースハードウェア\n\n- <a href=\"https://oshwhub.com/li-chuang-kai-fa-ban/li-chuang-shi-zhan-pai-esp32-s3-kai-fa-ban\" target=\"_blank\" title=\"LiChuang ESP32-S3 開発ボード\">LiChuang ESP32-S3 開発ボード</a>\n- <a href=\"https://github.com/espressif/esp-box\" target=\"_blank\" title=\"Espressif ESP32-S3-BOX3\">Espressif ESP32-S3-BOX3</a>\n- <a href=\"https://docs.m5stack.com/zh_CN/core/CoreS3\" target=\"_blank\" title=\"M5Stack CoreS3\">M5Stack CoreS3</a>\n- MagiClick 2.4\n- <a href=\"https://oshwhub.com/tenclass01/xmini_c3\" target=\"_blank\" title=\"Xmini C3\">Xmini C3</a>\n\n<div style=\"display: flex; justify-content: space-between;\">\n  <a href=\"docs/lichuang-s3.jpg\" target=\"_blank\" title=\"LiChuang ESP32-S3 開発ボード\">\n    <img src=\"docs/lichuang-s3.jpg\" />\n  </a>\n  <a href=\"docs/esp32s3-box3.jpg\" target=\"_blank\" title=\"Espressif ESP32-S3-BOX3\">\n    <img src=\"docs/esp32s3-box3.jpg\" />\n  </a>\n  <a href=\"docs/m5stack-cores3.jpg\" target=\"_blank\" title=\"M5Stack CoreS3\">\n    <img src=\"docs/m5stack-cores3.jpg\" />\n  </a>\n  <a href=\"docs/magiclick-2p4.jpg\" target=\"_blank\" title=\"MagiClick 2.4\">\n    <img src=\"docs/magiclick-2p4.jpg\" />\n  </a>\n  <a href=\"docs/xmini-c3.jpg\" target=\"_blank\" title=\"Xmini C3\">\n    <img src=\"docs/xmini-c3.jpg\" />\n  </a>\n</div>\n\n## ファームウェアセクション\n\n### 開発環境なしでのフラッシュ\n\n初心者には、最初に開発環境を設定せずにファームウェアをフラッシュすることをお勧めします。ファームウェアは著者が提供するテストサーバーを使用しており、現在無料で使用できます（商業目的では使用しないでください）。\n\n👉 [開発環境なしでのフラッシュガイド](https://ccnphfhqs21z.feishu.cn/wiki/Zpz4wXBtdimBrLk25WdcXzxcnNS)\n\n### 開発環境\n\n- CursorまたはVSCode\n- ESP-IDFプラグインをインストールし、SDKバージョン5.3以上を選択\n- LinuxはWindowsよりも優れており、コンパイルが速く、ドライバの問題も少ない\n\n## AIキャラクターの設定\n\nすでにXiaoZhi AIチャットボットをお持ちの場合は、👉 [バックエンド操作ビデオチュートリアル](https://www.bilibili.com/video/BV1jUCUY2EKM/)を参照してください。\n\n詳細な使用方法とテストサーバーの注意事項については、👉 [XiaoZhiテストサーバーヘルプガイド](https://xiaozhi.me/help)を参照してください。\n\n## Star History\n\n<a href=\"https://star-history.com/#78/xiaozhi-esp32&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=78/xiaozhi-esp32&type=Date&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=78/xiaozhi-esp32&type=Date\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=78/xiaozhi-esp32&type=Date\" />\n </picture>\n</a> \n"
        },
        {
          "name": "convert_audio_to_p3.py",
          "type": "blob",
          "size": 1.302734375,
          "content": "# convert audio files to protocol v3 stream\nimport librosa\nimport opuslib\nimport struct\nimport sys\nimport tqdm\nimport numpy as np\n\ndef encode_audio_to_opus(input_file, output_file):\n    # Load audio file using librosa\n    audio, sample_rate = librosa.load(input_file, sr=None, mono=False, dtype=np.int16)\n    \n    # Get left channel if stereo\n    if audio.ndim == 2:\n        audio = audio[0]\n    \n    # Initialize Opus encoder\n    encoder = opuslib.Encoder(sample_rate, 1, opuslib.APPLICATION_VOIP)\n\n    # Encode audio data to Opus packets\n    # Save encoded data to file\n    with open(output_file, 'wb') as f:\n        sample_rate = 16000 # 16000Hz\n        duration = 60 # 60ms every frame\n        frame_size = int(sample_rate * duration / 1000)\n        for i in tqdm.tqdm(range(0, len(audio) - frame_size, frame_size)):\n            frame = audio[i:i + frame_size]\n            opus_data = encoder.encode(frame.tobytes(), frame_size=frame_size)\n            # protocol format, [1u type, 1u reserved, 2u len, data]\n            packet = struct.pack('>BBH', 0, 0, len(opus_data)) + opus_data\n            f.write(packet)\n\n# Example usage\nif len(sys.argv) != 3:\n    print('Usage: python convert.py <input_file> <output_file>')\n    sys.exit(1)\n\ninput_file = sys.argv[1]\noutput_file = sys.argv[2]\nencode_audio_to_opus(input_file, output_file)\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "flash.sh",
          "type": "blob",
          "size": 0.1123046875,
          "content": "#!/bin/sh\nesptool.py -p /dev/ttyACM0 -b 2000000 write_flash 0 releases/v0.9.9_bread-compact-wifi/merged-binary.bin\n"
        },
        {
          "name": "main",
          "type": "tree",
          "content": null
        },
        {
          "name": "partitions.csv",
          "type": "blob",
          "size": 0.3994140625,
          "content": "# ESP-IDF Partition Table\n# Name,   Type, SubType, Offset,  Size, Flags\nnvs,      data, nvs,     0x9000,    0x4000,\notadata,  data, ota,     0xd000,    0x2000,\nphy_init, data, phy,     0xf000,    0x1000,\nmodel,    data, spiffs,  0x10000,   0xF0000,\nstorage,  data, spiffs,  0x100000,  1M,\nfactory,  app,  factory, 0x200000,  4M,\nota_0,    app,  ota_0,   0x600000,  4M,\nota_1,    app,  ota_1,   0xA00000,  4M,\n"
        },
        {
          "name": "partitions_4M.csv",
          "type": "blob",
          "size": 0.2822265625,
          "content": "# ESP-IDF Partition Table\n# Name,   Type, SubType, Offset,  Size, Flags\nnvs,      data, nvs,     0x9000,    0x4000,\notadata,  data, ota,     0xd000,    0x2000,\nphy_init, data, phy,     0xf000,    0x1000,\nmodel,    data, spiffs,  0x10000,   0xF0000,\nfactory,  app,  factory, 0x100000,  3M,\n"
        },
        {
          "name": "release.py",
          "type": "blob",
          "size": 1.4208984375,
          "content": "import sys\nimport os\nimport json\n\n\ndef get_board_type():\n    with open(\"build/compile_commands.json\") as f:\n        data = json.load(f)\n        for item in data:\n            if not item[\"file\"].endswith(\"main.cc\"):\n                continue\n            command = item[\"command\"]\n            # extract -DBOARD_TYPE=xxx\n            board_type = command.split(\"-DBOARD_TYPE=\\\\\\\"\")[1].split(\"\\\\\\\"\")[0].strip()\n            return board_type\n    return None\n\ndef get_project_version():\n    with open(\"CMakeLists.txt\") as f:\n        for line in f:\n            if line.startswith(\"set(PROJECT_VER\"):\n                return line.split(\"\\\"\")[1].split(\"\\\"\")[0].strip()\n    return None\n\ndef merge_bin():\n    if os.system(\"idf.py merge-bin\") != 0:\n        print(\"merge bin failed\")\n        sys.exit(1)\n\ndef zip_bin(board_type, project_version):\n    if not os.path.exists(\"releases\"):\n        os.makedirs(\"releases\")\n    output_path = f\"releases/v{project_version}_{board_type}.zip\"\n    if os.path.exists(output_path):\n        os.remove(output_path)\n    if os.system(f\"zip -j {output_path} build/merged-binary.bin\") != 0:\n        print(\"zip bin failed\")\n        sys.exit(1)\n    print(f\"zip bin to {output_path} done\")\n    \n\nif __name__ == \"__main__\":\n    merge_bin()\n    board_type = get_board_type()\n    print(\"board type:\", board_type)\n    project_version = get_project_version()\n    print(\"project version:\", project_version)\n    zip_bin(board_type, project_version)\n"
        },
        {
          "name": "sdkconfig.defaults",
          "type": "blob",
          "size": 0.71875,
          "content": "CONFIG_COMPILER_CXX_EXCEPTIONS=y\nCONFIG_COMPILER_CXX_EXCEPTIONS_EMG_POOL_SIZE=1024\n\nCONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_PERF=y\nCONFIG_BOOTLOADER_LOG_LEVEL_NONE=y\nCONFIG_BOOTLOADER_SKIP_VALIDATE_ALWAYS=y\nCONFIG_BOOTLOADER_APP_ROLLBACK_ENABLE=y\n\nCONFIG_HTTPD_MAX_REQ_HDR_LEN=2048\nCONFIG_HTTPD_MAX_URI_LEN=2048\n\nCONFIG_PARTITION_TABLE_CUSTOM=y\nCONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\"partitions.csv\"\nCONFIG_PARTITION_TABLE_OFFSET=0x8000\n\nESP_TASK_WDT_TIMEOUT_S=10\nCONFIG_FREERTOS_GENERATE_RUN_TIME_STATS=y\nCONFIG_FREERTOS_USE_STATS_FORMATTING_FUNCTIONS=y\n\nCONFIG_LV_COLOR_16_SWAP=y\nCONFIG_LV_MEM_CUSTOM=y\n\nCONFIG_MBEDTLS_DYNAMIC_BUFFER=y\nCONFIG_ESP_WIFI_IRAM_OPT=n\nCONFIG_ESP_WIFI_RX_IRAM_OPT=n\n\nCONFIG_CODEC_I2C_BACKWARD_COMPATIBLE=n\n"
        },
        {
          "name": "sdkconfig.defaults.esp32c3",
          "type": "blob",
          "size": 0.0341796875,
          "content": "\nCONFIG_ESPTOOLPY_FLASHSIZE_16MB=y\n"
        },
        {
          "name": "sdkconfig.defaults.esp32s3",
          "type": "blob",
          "size": 0.537109375,
          "content": "\nCONFIG_ESPTOOLPY_FLASHSIZE_16MB=y\nCONFIG_ESPTOOLPY_FLASHMODE_QIO=y\n\nCONFIG_ESP_DEFAULT_CPU_FREQ_MHZ_240=y\n\nCONFIG_SPIRAM=y\nCONFIG_SPIRAM_MODE_OCT=y\nCONFIG_SPIRAM_SPEED_80M=y\nCONFIG_SPIRAM_MALLOC_ALWAYSINTERNAL=4096\nCONFIG_SPIRAM_TRY_ALLOCATE_WIFI_LWIP=y\nCONFIG_SPIRAM_MALLOC_RESERVE_INTERNAL=32768\nCONFIG_SPIRAM_MEMTEST=n\nCONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC=y\n\nCONFIG_ESP32S3_INSTRUCTION_CACHE_32KB=y\nCONFIG_ESP32S3_DATA_CACHE_64KB=y\nCONFIG_ESP32S3_DATA_CACHE_LINE_64B=y\n\nCONFIG_USE_WAKENET=y\nCONFIG_SR_WN_WN9_NIHAOXIAOZHI_TTS=y\nCONFIG_USE_MULTINET=n\n"
        },
        {
          "name": "versions.py",
          "type": "blob",
          "size": 5.486328125,
          "content": "#! /usr/bin/env python3\nfrom dotenv import load_dotenv\nload_dotenv()\n\nimport os\nimport struct\nimport zipfile\nimport oss2\nimport json\n\ndef get_chip_id_string(chip_id):\n    return {\n        0x0000: \"esp32\",\n        0x0002: \"esp32s2\",\n        0x0005: \"esp32c3\",\n        0x0009: \"esp32s3\",\n        0x000C: \"esp32c2\",\n        0x000D: \"esp32c6\",\n        0x0010: \"esp32h2\",\n        0x0011: \"esp32c5\",\n        0x0012: \"esp32p4\",\n        0x0017: \"esp32c5\",\n    }[chip_id]\n\ndef get_flash_size(flash_size):\n    MB = 1024 * 1024\n    return {\n        0x00: 1 * MB,\n        0x01: 2 * MB,\n        0x02: 4 * MB,\n        0x03: 8 * MB,\n        0x04: 16 * MB,\n        0x05: 32 * MB,\n        0x06: 64 * MB,\n        0x07: 128 * MB,\n    }[flash_size]\n\ndef get_app_desc(data):\n    magic = struct.unpack(\"<I\", data[0x00:0x04])[0]\n    if magic != 0xabcd5432:\n        raise Exception(\"Invalid app desc magic\")\n    version = data[0x10:0x30].decode(\"utf-8\").strip('\\0')\n    project_name = data[0x30:0x50].decode(\"utf-8\").strip('\\0')\n    time = data[0x50:0x60].decode(\"utf-8\").strip('\\0')\n    date = data[0x60:0x70].decode(\"utf-8\").strip('\\0')\n    idf_ver = data[0x70:0x90].decode(\"utf-8\").strip('\\0')\n    elf_sha256 = data[0x90:0xb0].hex()\n    return {\n        \"name\": project_name,\n        \"version\": version,\n        \"compile_time\": date + \"T\" + time,\n        \"idf_version\": idf_ver,\n        \"elf_sha256\": elf_sha256,\n    }\n\ndef get_board_name(folder):\n    basename = os.path.basename(folder)\n    if basename.startswith(\"v0.2\"):\n        return \"bread-simple\"\n    if basename.startswith(\"v0.3\") or basename.startswith(\"v0.4\") or basename.startswith(\"v0.5\") or basename.startswith(\"v0.6\"):\n        if \"ML307\" in basename:\n            return \"bread-compact-ml307\"\n        elif \"WiFi\" in basename:\n            return \"bread-compact-wifi\"\n        elif \"KevinBox1\" in basename:\n            return \"kevin-box-1\"\n    if basename.startswith(\"v0.7\") or basename.startswith(\"v0.8\") or basename.startswith(\"v0.9\"):\n        return basename.split(\"_\")[1]\n    raise Exception(f\"Unknown board name: {basename}\")\n\ndef read_binary(dir_path):\n    merged_bin_path = os.path.join(dir_path, \"merged-binary.bin\")\n    data = open(merged_bin_path, \"rb\").read()[0x200000:]\n    if data[0] != 0xE9:\n        print(dir_path, \"is not a valid image\")\n        return\n    # get flash size\n    flash_size = get_flash_size(data[0x3] >> 4)\n    chip_id = get_chip_id_string(data[0xC])\n    # get segments\n    segment_count = data[0x1]\n    segments = []\n    offset = 0x18\n    for i in range(segment_count):\n        segment_size = struct.unpack(\"<I\", data[offset + 4:offset + 8])[0]\n        offset += 8\n        segment_data = data[offset:offset + segment_size]\n        offset += segment_size\n        segments.append(segment_data)\n    assert offset < len(data), \"offset is out of bounds\"\n    \n    # extract bin file\n    bin_path = os.path.join(dir_path, \"xiaozhi.bin\")\n    if not os.path.exists(bin_path):\n        print(\"extract bin file to\", bin_path)\n        open(bin_path, \"wb\").write(data)\n\n    # The app desc is in the first segment\n    desc = get_app_desc(segments[0])\n    return {\n        \"chip_id\": chip_id,\n        \"flash_size\": flash_size,\n        \"board\": get_board_name(dir_path),\n        \"application\": desc,\n    }\n\ndef extract_zip(zip_path, extract_path):\n    if not os.path.exists(extract_path):\n        os.makedirs(extract_path)\n    print(f\"Extracting {zip_path} to {extract_path}\")\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(extract_path)\n\ndef upload_dir_to_oss(source_dir, target_dir):\n    auth = oss2.Auth(os.environ['OSS_ACCESS_KEY_ID'], os.environ['OSS_ACCESS_KEY_SECRET'])\n    bucket = oss2.Bucket(auth, os.environ['OSS_ENDPOINT'], os.environ['OSS_BUCKET_NAME'])\n    for filename in os.listdir(source_dir):\n        oss_key = os.path.join(target_dir, filename)\n        print('uploading', oss_key)\n        bucket.put_object(oss_key, open(os.path.join(source_dir, filename), 'rb'))\n\ndef main():\n    release_dir = \"releases\"\n    versions = []\n    # look for zip files startswith \"v\"\n    for name in os.listdir(release_dir):\n        if name.startswith(\"v\") and name.endswith(\".zip\"):\n            tag = name[:-4]\n            folder = os.path.join(release_dir, tag)\n            if not os.path.exists(folder):\n                os.makedirs(folder)\n                extract_zip(os.path.join(release_dir, name), folder)\n                info = read_binary(folder)\n                target_dir = os.path.join(\"firmwares\", tag)\n                info[\"tag\"] = tag\n                info[\"url\"] = os.path.join(os.environ['OSS_BUCKET_URL'], target_dir, \"xiaozhi.bin\")\n                open(os.path.join(folder, \"info.json\"), \"w\").write(json.dumps(info, indent=4))\n                # upload all file to oss\n                upload_dir_to_oss(folder, target_dir)\n            # read info.json\n            info = json.load(open(os.path.join(folder, \"info.json\")))\n            versions.append(info)\n\n    # sort versions by version\n    versions.sort(key=lambda x: x[\"tag\"], reverse=True)\n    # write versions to file\n    versions_path = os.path.join(release_dir, \"versions.json\")\n    open(versions_path, \"w\").write(json.dumps(versions, indent=4))\n    print(f\"Versions written to {versions_path}\")\n\n    # copy versions.json to server\n    versions_config_path = os.environ['VERSIONS_CONFIG_PATH']\n    ret = os.system(f'scp {versions_path} {versions_config_path}')\n    if ret != 0:\n        print(f'Failed to copy versions.json to server')\n        exit(1)\n    print(f'Copied versions.json to server: {versions_config_path}')\n\n\n\nif __name__ == \"__main__\":\n    main()"
        }
      ]
    }
  ]
}