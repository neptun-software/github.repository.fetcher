{
  "metadata": {
    "timestamp": 1736709695342,
    "page": 68,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "giltene/wrk2",
      "stars": 4304,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3369140625,
          "content": "*.o\n*.a\nwrk\n\ndeps/luajit/src/host/buildvm\ndeps/luajit/src/host/buildvm_arch.h\ndeps/luajit/src/host/minilua\ndeps/luajit/src/jit/vmdef.lua\ndeps/luajit/src/lj_bcdef.h\ndeps/luajit/src/lj_ffdef.h\ndeps/luajit/src/lj_folddef.h\ndeps/luajit/src/lj_libdef.h\ndeps/luajit/src/lj_recdef.h\ndeps/luajit/src/lj_vm.s\ndeps/luajit/src/luajit\n\n.idea\nCMakeLists.txt\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.08203125,
          "content": "language: c\n\nos:\n  - linux\n  - osx\n\ncompiler:\n  - gcc\n  - clang\n  \nscript:\n  - make\n"
        },
        {
          "name": "CoordinatedOmission",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.7294921875,
          "content": "CFLAGS  := -std=c99 -Wall -O2 -D_REENTRANT\nLIBS    := -lpthread -lm -lcrypto -lssl\n\nTARGET  := $(shell uname -s | tr '[A-Z]' '[a-z]' 2>/dev/null || echo unknown)\n\nifeq ($(TARGET), sunos)\n\tCFLAGS += -D_PTHREADS -D_POSIX_C_SOURCE=200112L\n\tLIBS   += -lsocket\nelse ifeq ($(TARGET), darwin)\n\t# Per https://luajit.org/install.html: If MACOSX_DEPLOYMENT_TARGET\n\t# is not set then it's forced to 10.4, which breaks compile on Mojave.\n\texport MACOSX_DEPLOYMENT_TARGET = $(shell sw_vers -productVersion)\n\tLDFLAGS += -pagezero_size 10000 -image_base 100000000\n\tLIBS += -L/usr/local/opt/openssl/lib\n\tCFLAGS += -I/usr/local/include -I/usr/local/opt/openssl/include\nelse ifeq ($(TARGET), linux)\n        CFLAGS  += -D_POSIX_C_SOURCE=200809L -D_BSD_SOURCE\n\tLIBS    += -ldl\n\tLDFLAGS += -Wl,-E\nelse ifeq ($(TARGET), freebsd)\n\tCFLAGS  += -D_DECLARE_C99_LDBL_MATH\n\tLDFLAGS += -Wl,-E\nendif\n\nSRC  := wrk.c net.c ssl.c aprintf.c stats.c script.c units.c \\\n\t\tae.c zmalloc.c http_parser.c tinymt64.c hdr_histogram.c\nBIN  := wrk\n\nODIR := obj\nOBJ  := $(patsubst %.c,$(ODIR)/%.o,$(SRC)) $(ODIR)/bytecode.o\n\nLDIR     = deps/luajit/src\nLIBS    := -lluajit $(LIBS)\nCFLAGS  += -I$(LDIR)\nLDFLAGS += -L$(LDIR)\n\nall: $(BIN)\n\nclean:\n\t$(RM) $(BIN) obj/*\n\t@$(MAKE) -C deps/luajit clean\n\n$(BIN): $(OBJ)\n\t@echo LINK $(BIN)\n\t@$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)\n\n$(OBJ): config.h Makefile $(LDIR)/libluajit.a | $(ODIR)\n\n$(ODIR):\n\t@mkdir -p $@\n\n$(ODIR)/bytecode.o: src/wrk.lua\n\t@echo LUAJIT $<\n\t@$(SHELL) -c 'cd $(LDIR) && ./luajit -b $(CURDIR)/$< $(CURDIR)/$@'\n\n$(ODIR)/%.o : %.c\n\t@echo CC $<\n\t@$(CC) $(CFLAGS) -c -o $@ $<\n\n$(LDIR)/libluajit.a:\n\t@echo Building LuaJIT...\n\t@$(MAKE) -C $(LDIR) BUILDMODE=static\n\n.PHONY: all clean\n.SUFFIXES:\n.SUFFIXES: .c .o .lua\n\nvpath %.c   src\nvpath %.h   src\nvpath %.lua scripts\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 7.1181640625,
          "content": "=========================================================================\n==  NOTICE file corresponding to section 4(d) of the Apache License,   ==\n==  Version 2.0, in this case for the wrk distribution.                ==\n=========================================================================\n\nwrk2\nCopyright 2014 Gil Tene and Mike Barker\n\nwrk\nCopyright 2012 Will Glozer, http://glozer.net\n\n=========================================================================\n==  Redis Event Library Notice                                         ==\n=========================================================================\n\nThis product includes software developed by Salvatore Sanfilippo and\nother contributors to the redis project.\n\nCopyright (c) 2006-2010, Salvatore Sanfilippo <antirez at gmail dot com>\nCopyright (c) 2009-2012, Salvatore Sanfilippo <antirez at gmail dot com>\nCopyright (C) 2009 Harish Mallipeddi - harish.mallipeddi@gmail.com\nCopyright (c) 2012, Joyent, Inc. All rights reserved.\n\nCopyright (c) 2006-2009, Salvatore Sanfilippo\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the *\n      distribution.\n\n    * Neither the name of Redis nor the names of its contributors may be\n      used to endorse or promote products derived from this software\n      without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n=========================================================================\n==  HTTP Parser Notice                                                 ==\n=========================================================================\n\nThis product includes software developed by Igor Sysoev, Joyent, Inc.,\nand other Node contributors.\n\nhttp_parser.c is based on src/http/ngx_http_parse.c from NGINX copyright\nIgor Sysoev.\n\nAdditional changes are licensed under the same terms as NGINX and\ncopyright Joyent, Inc. and other Node contributors. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n\n=========================================================================\n==  LuaJIT Notice                                                      ==\n=========================================================================\n\nLuaJIT -- a Just-In-Time Compiler for Lua. http://luajit.org/\n\nCopyright (C) 2005-2013 Mike Pall. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n=========================================================================\n==  Tiny Mersenne Twister (TinyMT) Notice                              ==\n=========================================================================\n\nCopyright (c) 2011 Mutsuo Saito, Makoto Matsumoto, Hiroshima University\nand The University of Tokyo. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the\n      distribution.\n\n    * Neither the name of the Hiroshima University nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 35.2509765625,
          "content": "# wrk2\n[![Build Status](https://travis-ci.com/giltene/wrk2.svg?branch=master)](https://travis-ci.com/giltene/wrk2) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/giltene/wrk2?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n  **a HTTP benchmarking tool based mostly on wrk**\n\n  wrk2 is wrk modifed to produce a constant throughput load, and\n  accurate latency details to the high 9s (i.e. can produce\n  accurate 99.9999%'ile when run long enough). In addition to\n  wrk's arguments, wrk2 takes a throughput argument (in total requests\n  per second) via either the --rate or -R parameters (default\n  is 1000).\n\n  CRITICAL NOTE: Before going farther, I'd like to make it clear that\n  this work is in no way intended to be an attack on or a disparagement\n  of the great work that Will Glozer has done with wrk. I enjoyed working\n  with his code, and I sincerely hope that some of the changes I had made\n  might be considered for inclusion back into wrk. As those of you who may\n  be familiar with my latency related talks and rants, the latency\n  measurement issues that I focused on fixing with wrk2 are extremely\n  common in load generators and in monitoring code. I do not\n  ascribe any lack of skill or intelligence to people who's creations\n  repeat them. I was once (as recently as 2-3 years ago) just as\n  oblivious to the effects of Coordinated Omission as the rest of\n  the world still is.\n\n  wrk2 replaces wrk's individual request sample buffers with\n  HdrHistograms. wrk2 maintains wrk's Lua API, including it's\n  presentation of the stats objects (latency and requests). The stats\n  objects are \"emulated\" using HdrHistograms. E.g. a request for a\n  raw sample value at index i (see latency[i] below) will return\n  the value at the associated percentile (100.0 * i / __len).\n\n  As a result of using HdrHistograms for full (lossless) recording,\n  constant throughput load generation, and accurate tracking of\n  response latency (from the point in time where a request was supposed\n  to be sent per the \"plan\" to the time that it actually arrived), wrk2's\n  latency reporting is significantly more accurate (as in \"correct\") than\n  that of wrk's current (Nov. 2014) execution model.\n\n  It is important to note that in wrk2's current constant-throughput\n  implementation, measured latencies are [only] accurate to a +/- ~1 msec\n  granularity, due to OS sleep time behavior.\n\n  wrk2 is currently in experimental/development mode, and may well be\n  merged into wrk in the future if others see fit to adopt it's changes.\n\n  The remaining part of the README is wrk's, with minor changes to\n  reflect additional parameter and output. There is an important and\n  detailed note at the end about about wrk2's latency measurement\n  technique, including a discussion of Coordinated Omission, how\n  wrk2 avoids it, and detailed output that demonstrates it.\n\n  wrk2 (as is wrk) is a modern HTTP benchmarking tool capable of generating\n  significant load when run on a single multi-core CPU. It combines a\n  multithreaded design with scalable event notification systems such as\n  epoll and kqueue.\n\n  An optional LuaJIT script can perform HTTP request generation, response\n  processing, and custom reporting. Several example scripts are located in\n  scripts/\n\n## Basic Usage\n\n    wrk -t2 -c100 -d30s -R2000 http://127.0.0.1:8080/index.html\n\n  This runs a benchmark for 30 seconds, using 2 threads, keeping\n  100 HTTP connections open, and a constant throughput of 2000 requests\n  per second (total, across all connections combined).\n\n  [It's important to note that wrk2 extends the initial calibration\n   period to 10 seconds (from wrk's 0.5 second), so runs shorter than\n   10-20 seconds may not present useful information]\n\n  Output:\n\n    Running 30s test @ http://127.0.0.1:80/index.html\n      2 threads and 100 connections\n      Thread calibration: mean lat.: 9747 usec, rate sampling interval: 21 msec\n      Thread calibration: mean lat.: 9631 usec, rate sampling interval: 21 msec\n      Thread Stats   Avg      Stdev     Max   +/- Stdev\n        Latency     6.46ms    1.93ms  12.34ms   67.66%\n        Req/Sec     1.05k     1.12k    2.50k    64.84%\n      60017 requests in 30.01s, 19.81MB read\n    Requests/sec:   2000.15\n    Transfer/sec:    676.14KB\n\n  However, wrk2 will usually be run with the --latency flag, which provides\n  detailed latency percentile information (in a format that can be easily\n  imported to spreadsheets or gnuplot scripts and plotted per examples\n  provided at http://hdrhistogram.org):\n\n    wrk -t2 -c100 -d30s -R2000 --latency http://127.0.0.1:80/index.html\n\n  Output:\n\n    Running 30s test @ http://127.0.0.1:80/index.html\n      2 threads and 100 connections\n      Thread calibration: mean lat.: 10087 usec, rate sampling interval: 22 msec\n      Thread calibration: mean lat.: 10139 usec, rate sampling interval: 21 msec\n      Thread Stats   Avg      Stdev     Max   +/- Stdev\n        Latency     6.60ms    1.92ms  12.50ms   68.46%\n        Req/Sec     1.04k     1.08k    2.50k    72.79%\n      Latency Distribution (HdrHistogram - Recorded Latency)\n     50.000%    6.67ms\n     75.000%    7.78ms\n     90.000%    9.14ms\n     99.000%   11.18ms\n     99.900%   12.30ms\n     99.990%   12.45ms\n     99.999%   12.50ms\n    100.000%   12.50ms\n  \n    Detailed Percentile spectrum:\n         Value   Percentile   TotalCount 1/(1-Percentile)\n         \n         0.921     0.000000            1         1.00 \n         4.053     0.100000         3951         1.11\n         4.935     0.200000         7921         1.25\n         5.627     0.300000        11858         1.43\n         6.179     0.400000        15803         1.67\n         6.671     0.500000        19783         2.00\n         6.867     0.550000        21737         2.22\n         7.079     0.600000        23733         2.50\n         7.287     0.650000        25698         2.86\n         7.519     0.700000        27659         3.33\n         7.783     0.750000        29644         4.00\n         7.939     0.775000        30615         4.44\n         8.103     0.800000        31604         5.00\n         8.271     0.825000        32597         5.71\n         8.503     0.850000        33596         6.67\n         8.839     0.875000        34571         8.00\n         9.015     0.887500        35070         8.89\n         9.143     0.900000        35570        10.00\n         9.335     0.912500        36046        11.43\n         9.575     0.925000        36545        13.33\n         9.791     0.937500        37032        16.00\n         9.903     0.943750        37280        17.78\n        10.015     0.950000        37543        20.00\n        10.087     0.956250        37795        22.86\n        10.167     0.962500        38034        26.67\n        10.279     0.968750        38268        32.00\n        10.343     0.971875        38390        35.56\n        10.439     0.975000        38516        40.00\n        10.535     0.978125        38636        45.71\n        10.647     0.981250        38763        53.33\n        10.775     0.984375        38884        64.00\n        10.887     0.985938        38951        71.11\n        11.007     0.987500        39007        80.00\n        11.135     0.989062        39070        91.43\n        11.207     0.990625        39135       106.67\n        11.263     0.992188        39193       128.00\n        11.303     0.992969        39226       142.22\n        11.335     0.993750        39255       160.00\n        11.367     0.994531        39285       182.86\n        11.399     0.995313        39319       213.33\n        11.431     0.996094        39346       256.00\n        11.455     0.996484        39365       284.44\n        11.471     0.996875        39379       320.00\n        11.495     0.997266        39395       365.71\n        11.535     0.997656        39408       426.67\n        11.663     0.998047        39423       512.00\n        11.703     0.998242        39431       568.89\n        11.743     0.998437        39439       640.00\n        11.807     0.998633        39447       731.43\n        12.271     0.998828        39454       853.33\n        12.311     0.999023        39463      1024.00\n        12.327     0.999121        39467      1137.78\n        12.343     0.999219        39470      1280.00\n        12.359     0.999316        39473      1462.86\n        12.375     0.999414        39478      1706.67\n        12.391     0.999512        39482      2048.00\n        12.399     0.999561        39484      2275.56\n        12.407     0.999609        39486      2560.00\n        12.415     0.999658        39489      2925.71\n        12.415     0.999707        39489      3413.33\n        12.423     0.999756        39491      4096.00\n        12.431     0.999780        39493      4551.11\n        12.431     0.999805        39493      5120.00\n        12.439     0.999829        39495      5851.43\n        12.439     0.999854        39495      6826.67\n        12.447     0.999878        39496      8192.00\n        12.447     0.999890        39496      9102.22\n        12.455     0.999902        39497     10240.00\n        12.455     0.999915        39497     11702.86\n        12.463     0.999927        39498     13653.33\n        12.463     0.999939        39498     16384.00\n        12.463     0.999945        39498     18204.44\n        12.479     0.999951        39499     20480.00\n        12.479     0.999957        39499     23405.71\n        12.479     0.999963        39499     27306.67\n        12.479     0.999969        39499     32768.00\n        12.479     0.999973        39499     36408.89\n        12.503     0.999976        39500     40960.00\n        12.503     1.000000        39500          inf\n    #[Mean    =        6.602, StdDeviation   =        1.919]\n    #[Max     =       12.496, Total count    =        39500]\n    #[Buckets =           27, SubBuckets     =         2048]\n    ----------------------------------------------------------\n    60018 requests in 30.00s, 19.81MB read\n    Requests/sec:   2000.28\n    Transfer/sec:    676.18KB\n\n\n## Scripting\n\n  wrk's public Lua API is:\n\n    init     = function(args)\n    request  = function()\n    response = function(status, headers, body)\n    done     = function(summary, latency, requests)\n\n    wrk = {\n      scheme  = \"http\",\n      host    = \"localhost\",\n      port    = nil,\n      method  = \"GET\",\n      path    = \"/\",\n      headers = {},\n      body    = nil\n    }\n\n    function wrk.format(method, path, headers, body)\n\n      wrk.format returns a HTTP request string containing the passed\n      parameters merged with values from the wrk table.\n\n    global init     -- function called when the thread is initialized\n    global request  -- function returning the HTTP message for each request\n    global response -- optional function called with HTTP response data\n    global done     -- optional function called with results of run\n\n  The init() function receives any extra command line arguments for the\n  script. Script arguments must be separated from wrk arguments with \"--\"\n  and scripts that override init() but not request() must call wrk.init()\n\n  The done() function receives a table containing result data, and two\n  statistics objects representing the sampled per-request latency and\n  per-thread request rate. Duration and latency are microsecond values\n  and rate is measured in requests per second.\n\n    latency.min              -- minimum value seen\n    latency.max              -- maximum value seen\n    latency.mean             -- average value seen\n    latency.stdev            -- standard deviation\n    latency:percentile(99.0) -- 99th percentile value\n    latency[i]               -- raw sample value\n\n    summary = {\n      duration = N,  -- run duration in microseconds\n      requests = N,  -- total completed requests\n      bytes    = N,  -- total bytes received\n      errors   = {\n        connect = N, -- total socket connection errors\n        read    = N, -- total socket read errors\n        write   = N, -- total socket write errors\n        status  = N, -- total HTTP status codes > 399\n        timeout = N  -- total request timeouts\n      }\n    }\n\n## Benchmarking Tips\n\n  The machine running wrk must have a sufficient number of ephemeral ports\n  available and closed sockets should be recycled quickly. To handle the\n  initial connection burst the server's listen(2) backlog should be greater\n  than the number of concurrent connections being tested.\n\n  A user script that only changes the HTTP method, path, adds headers or\n  a body, will have no performance impact. If multiple HTTP requests are\n  necessary they should be pre-generated and returned via a quick lookup in\n  the request() call. Per-request actions, particularly building a new HTTP\n  request, and use of response() will necessarily reduce the amount of load\n  that can be generated.\n\n## Acknowledgements\n\n  wrk2 is obviously based on wrk, and credit goes to wrk's authors for\n  pretty much everything.\n\n  wrk2 uses my (Gil Tene's) HdrHistogram. Specifically, the C port written\n  by Mike Barker. Details can be found at http://hdrhistogram.org . Mike\n  also started the work on this wrk modification, but as he was stuck\n  on a plane ride to New Zealand, I picked it up and ran it to completion.\n\n  wrk contains code from a number of open source projects including the\n  'ae' event loop from redis, the nginx/joyent/node.js 'http-parser',\n  Mike Pall's LuaJIT, and the Tiny Mersenne Twister PRNG. Please consult\n  the NOTICE file for licensing details.\n\n************************************************************************\n\nA note about wrk2's latency measurement technique:\n\n  One of wrk2's main modification to wrk's current (Nov. 2014) measurement\n  model has to do with how request latency is computed and recorded.\n\n  wrk's model, which is similar to the model found in many current load\n  generators, computes the latency for a given request as the time from\n  the sending of the first byte of the request to the time the complete\n  response was received.\n\n  While this model correctly measures the actual completion time of\n  individual requests, it exhibits a strong Coordinated Omission effect,\n  through which most of the high latency artifacts exhibited by the\n  measured server will be ignored. Since each connection will only\n  begin to send a request after receiving a response, high latency\n  responses result in the load generator coordinating with the server\n  to avoid measurement during high latency periods.\n\n  There are various mechanisms by which Coordinated Omission can be\n  corrected or compensated for. For example, HdrHistogram includes\n  a simple way to compensate for Coordinated Omission when a known\n  expected interval between measurements exists. Alternatively, some\n  completely asynchronous load generators can avoid Coordinated\n  Omission by sending requests without waiting for previous responses\n  to arrive. However, this (asynchronous) technique is normally only\n  effective with non-blocking protocols or single-request-per-connection\n  workloads. When the application being measured may involve mutiple\n  serial request/response interactions within each connection, or a\n  blocking protocol (as is the case with most TCP and HTTP workloads),\n  this completely asynchronous behavior is usually not a viable option.\n\n  The model I chose for avoiding Coordinated Omission in wrk2 combines\n  the use of constant throughput load generation with latency\n  measurement that takes the intended constant throughput into account.\n  Rather than measure response latency from the time that the actual\n  transmission of a request occurred, wrk2 measures response latency\n  from the time the transmission *should* have occurred according to the\n  constant throughput configured for the run. When responses take longer\n  than normal (arriving later than the next request should have been sent),\n  the true latency of the subsequent requests will be appropriately\n  reflected in the recorded latency stats.\n\n  Note: This technique can be applied to variable throughput loaders.\n        It requires a \"model\" or \"plan\" that can provide the intended\n        start time if each request. Constant throughput load generators\n        Make this trivial to model. More complicated schemes (such as\n        varying throughput or stochastic arrival models) would likely\n        require a detailed model and some memory to provide this\n        information.\n\n  In order to demonstrate the significant difference between the two\n  latency recording techniques, wrk2 also tracks an internal \"uncorrected\n  latency histogram\" that can be reported on using the --u_latency flag.\n  The following chart depicts the differences between the correct and\n  the \"uncorrected\" percentile distributions measured during wrk2 runs.\n  (The \"uncorrected\" distributions are labeled with \"CO\", for Coordinated\n  Omission)\n  \n  ![CO example]\n  \n  These differences can be seen in detail in the output provided when \n  the --u_latency flag is used. For example, the output below demonstrates\n  the difference in recorded latency distribution for two runs:\n\n  The first [\"Example 1\" below] is a relatively \"quiet\" run with no large\n  outliers (the worst case seen was 11msec), and even wit the 99'%ile exhibit\n  a ~2x ratio between wrk2's latency measurement and that of an uncorrected\n  latency scheme.\n\n  The second run [\"Example 2\" below] includes a single small (1.4sec)\n  disruption (introduced using ^Z on the apache process for simple effect).\n  As can be seen in the output, there is a dramatic difference between the\n  reported percentiles in the two measurement techniques, with wrk2's latency\n  report [correctly] reporting a 99%'ile that is 200x (!!!) larger than that\n  of the traditional measurement technique that was susceptible to Coordinated\n  Omission.\n\n************************************************************************\n************************************************************************\n\nExample 1: [short, non-noisy run (~11msec worst observed latency)]:\n\n    wrk -t2 -c100 -d30s -R2000 --u_latency http://127.0.0.1:80/index.html\n \n    Running 30s test @ http://127.0.0.1:80/index.html\n      2 threads and 100 connections\n      Thread calibration: mean lat.: 9319 usec, rate sampling interval: 21 msec\n      Thread calibration: mean lat.: 9332 usec, rate sampling interval: 21 msec\n      Thread Stats   Avg      Stdev     Max   +/- Stdev\n        Latency     6.18ms    1.84ms  11.31ms   69.23%\n        Req/Sec     1.05k     1.11k    2.50k    64.57%\n      Latency Distribution (HdrHistogram - Recorded Latency)\n     50.000%    6.21ms\n     75.000%    7.37ms\n     90.000%    8.46ms\n     99.000%   10.52ms\n     99.900%   11.19ms\n     99.990%   11.29ms\n     99.999%   11.32ms\n    100.000%   11.32ms\n   \n      Detailed Percentile spectrum:\n           Value   Percentile   TotalCount 1/(1-Percentile)\n \n           0.677     0.000000            1         1.00\n           3.783     0.100000         3952         1.11\n           4.643     0.200000         7924         1.25\n           5.263     0.300000        11866         1.43\n           5.815     0.400000        15834         1.67\n           6.207     0.500000        19783         2.00\n           6.399     0.550000        21728         2.22\n           6.639     0.600000        23702         2.50\n           6.867     0.650000        25694         2.86\n           7.095     0.700000        27664         3.33\n           7.367     0.750000        29629         4.00\n           7.499     0.775000        30615         4.44\n           7.623     0.800000        31605         5.00\n           7.763     0.825000        32599         5.71\n           7.943     0.850000        33578         6.67\n           8.183     0.875000        34570         8.00\n           8.303     0.887500        35084         8.89\n           8.463     0.900000        35566        10.00\n           8.647     0.912500        36050        11.43\n           8.911     0.925000        36559        13.33\n           9.119     0.937500        37038        16.00\n           9.279     0.943750        37289        17.78\n           9.415     0.950000        37530        20.00\n           9.559     0.956250        37776        22.86\n           9.719     0.962500        38025        26.67\n           9.919     0.968750        38267        32.00\n          10.015     0.971875        38390        35.56\n          10.103     0.975000        38514        40.00\n          10.175     0.978125        38645        45.71\n          10.239     0.981250        38772        53.33\n          10.319     0.984375        38889        64.00\n          10.375     0.985938        38953        71.11\n          10.423     0.987500        39014        80.00\n          10.479     0.989062        39070        91.43\n          10.535     0.990625        39131       106.67\n          10.591     0.992188        39199       128.00\n          10.615     0.992969        39235       142.22\n          10.631     0.993750        39255       160.00\n          10.663     0.994531        39284       182.86\n          10.703     0.995313        39318       213.33\n          10.759     0.996094        39346       256.00\n          10.823     0.996484        39363       284.44\n          10.863     0.996875        39378       320.00\n          10.919     0.997266        39392       365.71\n          11.015     0.997656        39409       426.67\n          11.079     0.998047        39423       512.00\n          11.111     0.998242        39433       568.89\n          11.127     0.998437        39439       640.00\n          11.159     0.998633        39449       731.43\n          11.167     0.998828        39454       853.33\n          11.191     0.999023        39463      1024.00\n          11.207     0.999121        39468      1137.78\n          11.215     0.999219        39471      1280.00\n          11.223     0.999316        39473      1462.86\n          11.231     0.999414        39479      1706.67\n          11.239     0.999512        39481      2048.00\n          11.247     0.999561        39483      2275.56\n          11.255     0.999609        39487      2560.00\n          11.255     0.999658        39487      2925.71\n          11.263     0.999707        39489      3413.33\n          11.271     0.999756        39492      4096.00\n          11.271     0.999780        39492      4551.11\n          11.279     0.999805        39495      5120.00\n          11.279     0.999829        39495      5851.43\n          11.279     0.999854        39495      6826.67\n          11.287     0.999878        39497      8192.00\n          11.287     0.999890        39497      9102.22\n          11.287     0.999902        39497     10240.00\n          11.287     0.999915        39497     11702.86\n          11.295     0.999927        39499     13653.33\n          11.295     0.999939        39499     16384.00\n          11.295     0.999945        39499     18204.44\n          11.295     0.999951        39499     20480.00\n          11.295     0.999957        39499     23405.71\n          11.295     0.999963        39499     27306.67\n          11.295     0.999969        39499     32768.00\n          11.295     0.999973        39499     36408.89\n          11.319     0.999976        39500     40960.00\n          11.319     1.000000        39500          inf\n    #[Mean    =        6.178, StdDeviation   =        1.836]\n    #[Max     =       11.312, Total count    =        39500]\n    #[Buckets =           27, SubBuckets     =         2048]\n    ----------------------------------------------------------\n \n      Latency Distribution (HdrHistogram - Uncorrected Latency (measured without taking delayed starts into account))\n     50.000%    2.68ms \n     75.000%    3.71ms\n     90.000%    4.47ms\n     99.000%    5.43ms\n     99.900%    6.69ms\n     99.990%    6.99ms\n     99.999%    7.01ms\n    100.000%    7.01ms\n \n      Detailed Percentile spectrum:\n           Value   Percentile   TotalCount 1/(1-Percentile)\n \n           0.264     0.000000            1         1.00\n           1.111     0.100000         3954         1.11\n           1.589     0.200000         7909         1.25\n           1.970     0.300000        11852         1.43\n           2.327     0.400000        15801         1.67\n           2.679     0.500000        19751         2.00\n           2.847     0.550000        21749         2.22\n           3.003     0.600000        23703         2.50\n           3.207     0.650000        25684         2.86\n           3.483     0.700000        27664         3.33\n           3.709     0.750000        29645         4.00\n           3.813     0.775000        30623         4.44\n           3.915     0.800000        31600         5.00\n           4.035     0.825000        32591         5.71\n           4.183     0.850000        33597         6.67\n           4.319     0.875000        34580         8.00\n           4.391     0.887500        35067         8.89\n           4.471     0.900000        35561        10.00\n           4.575     0.912500        36051        11.43\n           4.683     0.925000        36545        13.33\n           4.827     0.937500        37040        16.00\n           4.903     0.943750        37296        17.78\n           4.975     0.950000        37535        20.00\n           5.035     0.956250        37779        22.86\n           5.091     0.962500        38023        26.67\n           5.159     0.968750        38281        32.00\n           5.195     0.971875        38394        35.56\n           5.231     0.975000        38520        40.00\n           5.267     0.978125        38638        45.71\n           5.311     0.981250        38767        53.33\n           5.351     0.984375        38889        64.00\n           5.375     0.985938        38957        71.11\n           5.391     0.987500        39011        80.00\n           5.415     0.989062        39076        91.43\n           5.443     0.990625        39133       106.67\n           5.519     0.992188        39193       128.00\n           5.571     0.992969        39224       142.22\n           5.671     0.993750        39254       160.00\n           5.843     0.994531        39284       182.86\n           5.915     0.995313        39315       213.33\n           6.019     0.996094        39346       256.00\n           6.087     0.996484        39362       284.44\n           6.135     0.996875        39377       320.00\n           6.323     0.997266        39392       365.71\n           6.423     0.997656        39408       426.67\n           6.471     0.998047        39423       512.00\n           6.507     0.998242        39431       568.89\n           6.535     0.998437        39439       640.00\n           6.587     0.998633        39448       731.43\n           6.643     0.998828        39454       853.33\n           6.699     0.999023        39463      1024.00\n           6.847     0.999121        39466      1137.78\n           6.883     0.999219        39471      1280.00\n           6.891     0.999316        39475      1462.86\n           6.899     0.999414        39479      1706.67\n           6.911     0.999512        39482      2048.00\n           6.927     0.999561        39483      2275.56\n           6.935     0.999609        39486      2560.00\n           6.947     0.999658        39488      2925.71\n           6.951     0.999707        39489      3413.33\n           6.979     0.999756        39491      4096.00\n           6.983     0.999780        39494      4551.11\n           6.983     0.999805        39494      5120.00  \n           6.983     0.999829        39494      5851.43\n           6.987     0.999854        39496      6826.67\n           6.987     0.999878        39496      8192.00\n           6.987     0.999890        39496      9102.22\n           6.995     0.999902        39497     10240.00\n           6.995     0.999915        39497     11702.86\n           7.007     0.999927        39499     13653.33\n           7.007     0.999939        39499     16384.00\n           7.007     0.999945        39499     18204.44\n           7.007     0.999951        39499     20480.00\n           7.007     0.999957        39499     23405.71\n           7.007     0.999963        39499     27306.67\n           7.007     0.999969        39499     32768.00\n           7.007     0.999973        39499     36408.89\n           7.015     0.999976        39500     40960.00\n           7.015     1.000000        39500          inf\n    #[Mean    =        2.757, StdDeviation   =        1.254]\n    #[Max     =        7.012, Total count    =        39500]\n    #[Buckets =           27, SubBuckets     =         2048]\n    ----------------------------------------------------------\n      60031 requests in 30.01s, 19.82MB read\n    Requests/sec:   2000.67\n    Transfer/sec:    676.32KB\n\n\n************************************************************************\n************************************************************************\n\nExample 2: [1.4 second ^Z artifact introduced on the httpd server]:\n \n    wrk -t2 -c100 -d30s -R2000 --u_latency http://127.0.0.1:80/index.html\n \n    Running 30s test @ http://127.0.0.1:80/index.html\n      2 threads and 100 connections\n      Thread calibration: mean lat.: 108237 usec, rate sampling interval: 1021 msec\n      Thread calibration: mean lat.: 108178 usec, rate sampling interval: 1021 msec\n      Thread Stats   Avg      Stdev     Max   +/- Stdev\n        Latency    63.66ms  223.37ms   1.42s    93.67%\n        Req/Sec     1.00k   231.13     1.71k    89.47%\n      Latency Distribution (HdrHistogram - Recorded Latency)\n     50.000%    8.61ms\n     75.000%   10.47ms\n     90.000%   11.77ms\n     99.000%    1.27s\n     99.900%    1.42s\n     99.990%    1.42s\n     99.999%    1.42s\n    100.000%    1.42s\n \n      Detailed Percentile spectrum:\n           Value   Percentile   TotalCount 1/(1-Percentile)\n \n           1.317     0.000000            1         1.00\n           5.011     0.100000         3954         1.11\n           6.215     0.200000         7903         1.25\n           7.091     0.300000        11866         1.43\n           7.827     0.400000        15810         1.67\n           8.615     0.500000        19758         2.00\n           8.991     0.550000        21734         2.22\n           9.407     0.600000        23715         2.50\n           9.871     0.650000        25713         2.86\n          10.183     0.700000        27704         3.33\n          10.471     0.750000        29648         4.00\n          10.687     0.775000        30627         4.44\n          10.903     0.800000        31604         5.00\n          11.103     0.825000        32622         5.71\n          11.295     0.850000        33583         6.67\n          11.495     0.875000        34570         8.00\n          11.615     0.887500        35067         8.89\n          11.775     0.900000        35552        10.00\n          12.047     0.912500        36048        11.43\n          62.079     0.925000        36540        13.33\n         294.399     0.937500        37054        16.00\n         390.655     0.943750        37286        17.78\n         524.799     0.950000        37525        20.00\n         621.567     0.956250        37782        22.86\n         760.831     0.962500        38062        26.67\n         857.087     0.968750        38300        32.00\n         903.679     0.971875        38399        35.56\n         993.279     0.975000        38528        40.00\n        1042.943     0.978125        38658        45.71\n        1089.535     0.981250        38765        53.33\n        1136.639     0.984375        38886        64.00\n        1182.719     0.985938        38961        71.11\n        1228.799     0.987500        39033        80.00\n        1231.871     0.989062        39100        91.43\n        1276.927     0.990625        39141       106.67\n        1278.975     0.992188        39200       128.00\n        1325.055     0.992969        39300       142.22\n        1325.055     0.993750        39300       160.00\n        1325.055     0.994531        39300       182.86\n        1371.135     0.995313        39323       213.33\n        1372.159     0.996094        39400       256.00\n        1372.159     0.996484        39400       284.44\n        1372.159     0.996875        39400       320.00\n        1372.159     0.997266        39400       365.71\n        1417.215     0.997656        39500       426.67\n        1417.215     1.000000        39500          inf\n    #[Mean    =       63.660, StdDeviation   =      223.370]\n    #[Max     =     1416.192, Total count    =        39500]\n    #[Buckets =           27, SubBuckets     =         2048]\n    ----------------------------------------------------------\n\n      Latency Distribution (HdrHistogram - Uncorrected Latency (measured without taking delayed starts into account))\n     50.000%    3.02ms\n     75.000%    3.91ms\n     90.000%    4.87ms\n     99.000%    6.04ms\n     99.900%    1.41s\n     99.990%    1.41s\n     99.999%    1.41s\n    100.000%    1.41s\n\n      Detailed Percentile spectrum:\n           Value   Percentile   TotalCount 1/(1-Percentile)\n\n           0.325     0.000000            1         1.00\n           1.210     0.100000         3950         1.11\n           1.819     0.200000         7905         1.25\n           2.343     0.300000        11851         1.43\n           2.737     0.400000        15809         1.67\n           3.015     0.500000        19760         2.00\n           3.153     0.550000        21738         2.22\n           3.289     0.600000        23722         2.50\n           3.459     0.650000        25698         2.86\n           3.691     0.700000        27650         3.33\n           3.915     0.750000        29630         4.00\n           4.053     0.775000        30621         4.44\n           4.175     0.800000        31624         5.00\n           4.299     0.825000        32612         5.71\n           4.423     0.850000        33599         6.67\n           4.587     0.875000        34564         8.00\n           4.735     0.887500        35057         8.89\n           4.871     0.900000        35560        10.00 \n           4.975     0.912500        36051        11.43\n           5.063     0.925000        36543        13.33 \n           5.143     0.937500        37039        16.00\n           5.187     0.943750        37282        17.78\n           5.239     0.950000        37533        20.00\n           5.291     0.956250        37782        22.86\n           5.347     0.962500        38024        26.67\n           5.435     0.968750        38278        32.00\n           5.487     0.971875        38392        35.56\n           5.555     0.975000        38514        40.00\n           5.635     0.978125        38642        45.71\n           5.735     0.981250        38760        53.33\n           5.863     0.984375        38885        64.00\n           5.899     0.985938        38946        71.11\n           5.955     0.987500        39007        80.00\n           6.019     0.989062        39071        91.43\n           6.067     0.990625        39133       106.67\n           6.127     0.992188        39194       128.00\n           6.187     0.992969        39223       142.22\n           6.287     0.993750        39255       160.00\n           6.347     0.994531        39284       182.86\n           6.411     0.995313        39315       213.33\n           6.487     0.996094        39346       256.00\n           6.539     0.996484        39362       284.44\n           6.591     0.996875        39379       320.00\n           6.711     0.997266        39392       365.71\n        1413.119     0.997656        39411       426.67\n        1414.143     0.998047        39500       512.00\n        1414.143     1.000000        39500          inf\n    #[Mean    =        6.588, StdDeviation   =       70.891]\n    #[Max     =     1413.120, Total count    =        39500]\n    #[Buckets =           27, SubBuckets     =         2048]\n    ----------------------------------------------------------\n      60055 requests in 30.01s, 19.83MB read\n    Requests/sec:   2001.42\n    Transfer/sec:    676.57KB\n\n[CO example]:https://raw.github.com/giltene/wrk2/master/CoordinatedOmission/wrk2_CleanVsCO.png \"Coordinated Omission example\"\n"
        },
        {
          "name": "SCRIPTING",
          "type": "blob",
          "size": 3.9072265625,
          "content": "Overview\n\n  wrk supports executing a LuaJIT script during three distinct phases: setup,\n  running, and done. Each wrk thread has an independent scripting environment\n  and the setup & done phases execute in a separate environment which does\n  not participate in the running phase.\n\n  The public Lua API consists of a global table and a number of global\n  functions:\n\n  wrk = {\n    scheme  = \"http\",\n    host    = \"localhost\",\n    port    = nil,\n    method  = \"GET\",\n    path    = \"/\",\n    headers = {},\n    body    = nil,\n    thread  = <userdata>,\n  }\n\n  function wrk.format(method, path, headers, body)\n\n    wrk.format returns a HTTP request string containing the passed parameters\n    merged with values from the wrk table.\n\n  function wrk.lookup(host, service)\n\n    wrk.lookup returns a table containing all known addresses for the host\n    and service pair. This corresponds to the POSIX getaddrinfo() function.\n\n  function wrk.connect(addr)\n\n    wrk.connect returns true if the address can be connected to, otherwise\n    it returns false. The address must be one returned from wrk.lookup().\n\n  The following globals are optional, and if defined must be functions:\n\n    global setup    -- called during thread setup\n    global init     -- called when the thread is starting\n    global request  -- called to generate the HTTP request\n    global response -- called with HTTP response data\n    global done     -- called with results of run\n\nSetup\n\n  function setup(thread)\n\n  The setup phase begins after the target IP address has been resolved and all\n  threads have been initialized but not yet started.\n\n  setup() is called once for each thread and receives a userdata object\n  representing the thread.\n\n    thread.addr             - get or set the thread's server address\n    thread:get(name)        - get the value of a global in the thread's env\n    thread:set(name, value) - set the value of a global in the thread's env\n    thread:stop()           - stop the thread\n\n  Only boolean, nil, number, and string values or tables of the same may be\n  transfered via get()/set() and thread:stop() can only be called while the\n  thread is running.\n\nRunning\n\n  function init(args)\n  function request()\n  function response(status, headers, body)\n\n  The running phase begins with a single call to init(), followed by\n  a call to request() and response() for each request cycle.\n\n  The init() function receives any extra command line arguments for the\n  script which must be separated from wrk arguments with \"--\".\n\n  request() returns a string containing the HTTP request. Building a new\n  request each time is expensive, when testing a high performance server\n  one solution is to pre-generate all requests in init() and do a quick\n  lookup in request().\n\n  response() is called with the HTTP response status, headers, and body.\n  Parsing the headers and body is expensive, so if the response global is\n  nil after the call to init() wrk will ignore the headers and body.\n\nDone\n\n  function done(summary, latency, requests)\n\n  The done() function receives a table containing result data, and two\n  statistics objects representing the per-request latency and per-thread\n  request rate. Duration and latency are microsecond values and rate is\n  measured in requests per second.\n\n  latency.min              -- minimum value seen\n  latency.max              -- maximum value seen\n  latency.mean             -- average value seen\n  latency.stdev            -- standard deviation\n  latency:percentile(99.0) -- 99th percentile value\n  latency(i)               -- raw value and count\n\n  summary = {\n    duration = N,  -- run duration in microseconds\n    requests = N,  -- total completed requests\n    bytes    = N,  -- total bytes received\n    errors   = {\n      connect = N, -- total socket connection errors\n      read    = N, -- total socket read errors\n      write   = N, -- total socket write errors\n      status  = N, -- total HTTP status codes > 399\n      timeout = N  -- total request timeouts\n    }\n  }\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}