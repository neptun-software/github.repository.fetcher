{
  "metadata": {
    "timestamp": 1736709939770,
    "page": 476,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jiangdongguo/AndroidUSBCamera",
      "stars": 2397,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1337890625,
          "content": "*.iml\n.gradle\n/local.properties\n/.idea/workspace.xml\n/.idea/libraries\n.idea\n.DS_Store\n/build\n/captures\n.externalNativeBuild\n.tags*\n.cxx/\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 1.6376953125,
          "content": "Q & A\n-------\n\n#### 1. Camera preview black screen?\n\n**First**, check `targetSdk` version. If `targetSdk>=28`, you should grant the app `android.permission.CAMERA` permission  and this solution will be resolved as usual. However, if it doesn't work, you have to set your targetSdk below 28 because it's custom system problem. **Otherwise**,  issues to me and send me a email with your logs at location `Android/data/com.jiangdg.ausbc/files` if you have already get the uvc camera permission greanted dialog.\n\n#### 2. How to filter some device？\n\nIf your uvc device can not be recognised, maybe you can try like this:\n\n**First**, create a flie named `default_device_filter.xml` in app xml directory(If not exist, please create it.).\n\n**then**, copying the default value into it and adding your uvc device information.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<usb>\n\t<usb-device class=\"239\" subclass=\"2\" />\t<!-- all device of UVC -->\n\t<!-- a few android 9.0 -->\n\t<usb-device class=\"14\" subclass=\"9\" />\n\t<usb-device class=\"2\" subclass=\"0\" />\n\t<usb-device class=\"6\" subclass=\"-1\" />\n\t<usb-device class=\"39\" subclass=\"0\" />\n\t<usb-device product-id=\"4836\" vendor-id=\"9573\" />\n\t<usb-device product-id=\"2229\" vendor-id=\"1133\" />\n\t<usb-device product-id=\"640\" vendor-id=\"1409\" />\n\t<usb-device product-id=\"258\" vendor-id=\"9228\" />\n\t<usb-device product-id=\"16981\" vendor-id=\"19\" />\n    <!-- your uvc device -->\n    <usb-device product-id=\"xxx\" vendor-id=\"xxx\" />\n    <usb-device product-id=\"xxx\" vendor-id=\"xxx\" />\n</usb>\n```\n\n#### 3. There is a certain probability of being ANR when operatoring hot plug?\n\nPlease update to `3.2.7`+ and this version has been optimized accordingly."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.2275390625,
          "content": "![logo.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/906db02b1dbc49669c38f870b6df2e96~tplv-k3u1fbpfcp-watermark.image?)\n\n\n# AUSBC&ensp;[![](https://jitpack.io/v/jiangdongguo/AndroidUSBCamera.svg)](https://jitpack.io/#jiangdongguo/AndroidUSBCamera) [![API](https://img.shields.io/badge/API-19%2B-brightgreen.svg?style=flat)](https://android-arsenal.com/api?level=19)\n\n&emsp;Flexible and useful UVC camera engine on Android platform, you can use it to simply  open your uvc camera (supporting multi-road cameras) without  any system permissions . The only thing you should do is that confirming your Android device must support OTG function. So, welcom to use **AUSBC3.0** and welcom to **star** & **fork** & **issues**!\n\n![multi-road camera](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75a8f700d97c4de4979c9d0927764af9~tplv-k3u1fbpfcp-watermark.image?)\n\n&emsp;[@ Example showing](https://live.csdn.net/v/226993)\n\n\n\nFeature\n-------\n\n- Support opening multi-road camera;\n- Support opening uvc camera on Android 4.4+;\n- Support previewing 480p、720p、1080p，etc;\n- Support adding effects with OpenGL ES 2.0;\n- Support capture photo(`.jpg`)、viedo(`.mp4`/`.h264`/`yuv`) and audio(`pcm`/`mp3`/`aac`)\n- Support rotating camera view;\n- Support offscreen rendering;\n- Support recording media along with acquiring YUV/RGBA/PCM/H.264/AAC stream, you can push it to your media server;\n- Support acquiring all resolutions and usb devices, etc;\n- Support acquiring system or device mic(UAC) audio data;\n- Support armeabi-v7a, arm64-v8a, x86 & x86_64;\n\nUsages\n-------\n\n&emsp;`AUSBC 3.0`  was refactored by kotlin and It is simpler to use and more feature-rich. So, I highly recommend you to use the current version and let's build it together.\n\n- **Get AUSBC**\n\n&emsp;First,  add it in your root **build.gradle** or **settings.gradle** at the end of repositories: \n\n```groovy\nallprojects {\n    repositories {\n        google()\n        jcenter()\n        maven { url \"https://jitpack.io\" }\n    }\n}\n```\n\n&emsp;Second, add the dependency in your **app.gradle** , latest tag is [![](https://jitpack.io/v/jiangdongguo/AndroidUSBCamera.svg)](https://jitpack.io/#jiangdongguo/AndroidUSBCamera):\n\n```groovy\ndependencies {\n    implementation 'com.github.jiangdongguo.AndroidUSBCamera:libausbc:latest_tag'\n}\n```\n\n- **Simply usage**\n\n&emsp; As for how to use this module correctly,  just  making your Fragment or Activity implement **CameraFragment** or **CameraActivity**.\n\n```kotlin\nclass DemoFragment: CameraFragment() {\n    private var mViewBinding: FragmentUvcBinding? = null\n\n    override fun getRootView(inflater: LayoutInflater, container: ViewGroup?): View? {\n        if (mViewBinding == null) {\n            mViewBinding = FragmentUvcBinding.inflate(inflater, container, false)\n        }\n        return mViewBinding?.root\n    }\n\n    // if you want offscreen render\n    // please return null\n    override fun getCameraView(): IAspectRatio? {\n        return mViewBinding?.tvCameraRender\n    }\n\n    // if you want offscreen render\n    // please return null, the same as getCameraView()\n    override fun getCameraViewContainer(): ViewGroup? {\n        return mViewBinding?.container\n    }\n\n    // camera open status callback\n    override fun onCameraState(self: ICamera, \n                               code: ICameraStateCallBack.State,\n                               msg: String?) {\n        when (code) {\n            ICameraStateCallBack.State.OPENED -> handleCameraOpened()\n            ICameraStateCallBack.State.CLOSED -> handleCameraClosed()\n            ICameraStateCallBack.State.ERROR -> handleCameraError()\n        }\n    }\n    \n    override fun getGravity(): Int = Gravity.TOP\n}\n```\n\n&emsp;The most important is that you should override `getRootView()`/`getCameraViewContainer()`/\n`getCameraView()` at least which means fragment's root view 、texture  or surface view and it's container。Of course, the same as **CameraActivity** and now you can see the uvc camera preview。\n\n- **Advanced usage**\n\n&emsp;If you want some custom configurations, you can do like this in your **DemoFragment**: \n\n```kotlin\n// if you want to open a camera default\n// please override getDefaultCamera()\noverride fun getDefaultCamera(): UsbDevice? {\n    return super.getDefaultCamera()\n}\n\n// if you want to custom camera requst\n// please override getCameraRequest()\noverride fun getCameraRequest(): CameraRequest {\n    return CameraRequest.Builder()\n    .setPreviewWidth(1280) // camera preview width\n    .setPreviewHeight(720) // camera preview height\n    .setRenderMode(CameraRequest.RenderMode.OPENGL) // camera render mode\n    .setDefaultRotateType(RotateType.ANGLE_0) // rotate camera image when opengl mode\n    .setAudioSource(CameraRequest.AudioSource.SOURCE_AUTO) // set audio source\n    .setPreviewFormat(CameraRequest.PreviewFormat.FORMAT_YUYV) // set preview format, MJPEG recommended\n    .setAspectRatioShow(true) // aspect render,default is true\n    .setCaptureRawImage(false) // capture raw image picture when opengl mode\n    .setRawPreviewData(false)  // preview raw image when opengl mode\n    .create()\n}\n\n\n```\n\n&emsp;Of course, you can also capture a **jpg** image or a **mp4** video or  a **mp3** audio file and update resolution or different uvc camera and acquring the stream of **H264/AAC/YUV/PCM**  by calling those method:\n\n```kotlin\n// capture jpg image\ncaptureImage(callBack, savePath)\n// capture mp4 video\ncaptureVideoStart(callBack, path, durationInSec)\ncaptureVideoStop()\n// capture stream(H.264/AAC) only\ncaptureStreamStart()\ncaptureStreamStop()\n// capture mp4 video\ncaptureVideoStart(callBack, path, durationInSec)\ncaptureVideoStop()\n// capture mp3 audio\ncaptureAudioStart(callBack, path)\ncaptureAudioStop()\n// play mic in real time\nstartPlayMic(callBack)\nstopPlayMic()\n// rotate camera\n// base on opening opengl es\nsetRotateType(type)\n// switch different camera\nswitchCamera(UsbDevice)\n// update resolution\nupdateResolution(width, height)\n// get all preview sizes\ngetAllPreviewSizes(aspectRatio)\n// acquire encode data(H.264 or AAC)\naddEncodeDataCallBack(callBack)\n// acquire raw data(NV21 or RGBA)\nsetPreviewDataCallBack(callBack)\n// get current camera\ngetCurrentCamera()\n// get current camera status\nisCameraOpened()\n// get all camera device list\ngetDeviceList()\n```\n\n&emsp;Or, camera configuration:\n\n```kotlin\nsetZoom(0)\nsetSharpness(0)\nsetHue(0)\nsetSaturation(0)\nsetContrast(0)\nsetGamma(0)\nsetGain(0)\nsetAutoWhiteBalance(true)\nsetAutoFocus(true)\n// send custom command to camera\nsendCameraCommand(command)\n```\n\n&emsp;For more advanced features, you can even add some **filters** to your camera.This library providers some default filters, sush as **EffectBlackWhite**、**EffectSoul** and **EffectZoom**, and more filters will be added in the future.Of coure, you can also relize your own filters by extending **AbstractEffect**. For example：\n\n```kotlin\n// First, extending AbstractEffect\nclass EffectBlackWhite(ctx: Context) : AbstractEffect(ctx) {\n\n    override fun getId(): Int = ID\n\n    override fun getClassifyId(): Int = CameraEffect.CLASSIFY_ID_FILTER\n\n    override fun getVertexSourceId(): Int = R.raw.base_vertex\n\n    override fun getFragmentSourceId(): Int = R.raw.effect_blackw_fragment\n\n    companion object {\n        const val ID = 100\n    }\n}\n\n// Second, adding or updating or removing filter\naddRenderEffect(effect)\nremoveRenderEffect(effect)\nupdateRenderEffect(classifyId, effect)\n```\n\n&emsp;At last, If you want to realize streaming, maybe **IPusher** and **AusbcPusher** can help you.\n\n- open multi-road camera\n\n&emsp;If you want to open multi-road camera, you can make your Fragment or Activity extend **MultiCameraFragment** or **MultiCameraActivity**.Just do like this and more details please look up **DemoMultiCameraFragment**：\n\n```kotlin\nclass DemoMultiCameraFragment : MultiCameraFragment(), ICameraStateCallBack {\n\n    // a camera be attached\n    override fun onCameraAttached(camera: MultiCameraClient.Camera) {}\n    \n\t// a camera be detached\n    override fun onCameraDetached(camera: MultiCameraClient.Camera) {}\n\n    // a camera be connected\n    override fun onCameraConnected(camera: MultiCameraClient.Camera) {\n  \t\tcamera.openCamera(textureView, getCameraRequest())\n        camera.setCameraStateCallBack(this)\n    }\n\n    // a camera be disconnected\n    override fun onCameraDisConnected(camera: MultiCameraClient.Camera) {\n         camrea.closeCamera()\n    }\n\n    // a camera be opened or closed or error\n    override fun onCameraState(\n        self: MultiCameraClient.Camera,\n        code: ICameraStateCallBack.State,\n        msg: String?) {\n\t\twhen (code) {\n            ICameraStateCallBack.State.OPENED -> handleCameraOpened()\n            ICameraStateCallBack.State.CLOSED -> handleCameraClosed()\n            ICameraStateCallBack.State.ERROR -> handleCameraError()\n        }\n    }\n\n    override fun getRootView(inflater: LayoutInflater, container: ViewGroup?): View {\n        return rootView\n    }\n    \n    // [optional]\n    // If you want to open the specified camera,\n    // you need to let isAutoRequestPermission() false.\n    // And then you need to call requestPermission(device) in your own Fragment/Activity\n    // when onAttachDev() called, default is true.\n    protected fun isAutoRequestPermission() = true\n}\n```\n\n\n\n- Debug online\n\n&emsp;If you want to debug the project online or modify something, those steps you should do:\n\n&emsp;**First**, modifying the **Settings.gradle** file and making those to module. \n\n```groovy\ninclude ':app'\n\n// For debug online\ninclude ':libausbc'\ninclude ':libuvc'\ninclude ':libnative'\ninclude ':libuvccommon'\n```\n\n&emsp;**Second**, let **app.gradle** dependenced on `':libausbc'` .\n\n```groovy\ndependencies {\n\n    // For debug online\n    implementation project(':libausbc')\n\n    // demo\n    //implementation 'com.github.jiangdongguo.AndroidUSBCamera:libausbc:latest_tag'\n}\n```\n\n\n\n[@ 中文文档](https://juejin.cn/post/7115229806844706847/)\n\n\n\nDemo\n-------\n\n![](https://www.pgyer.com/app/qrcode/fVo5)\n\n&emsp;[AUSBC.apk](https://github.com/jiangdongguo/AndroidUSBCamera/blob/master/app/release/app-release.apk)\n\n\nVersion\n-------\n\n[Update details](https://github.com/jiangdongguo/AndroidUSBCamera/blob/master/VERSION.md)\n\nQ & A\n-------\n\n[FAQ](https://github.com/jiangdongguo/AndroidUSBCamera/blob/master/FAQ.md)\n\n\nHomepage & Help\n-------\n\n[1. JUEJIN](https://juejin.cn/user/1311062343296222)\n\n[2. CSDN（Update stopped）](https://blog.csdn.net/andrexpert)\n\n\n\n&emsp;If you have any question or fun ideas, please issues to me.  \n&emsp;Of course, you can also send me a **微信**   \"`laojiang299`\"   or a **EMAIL**  \"`765067602@qq.com`\".   \n\n&emsp;So, do not forget to send logs from location **Android/data/com.jiangdg.ausbc/files** and collect logcat information by executing command `adb shell logcat -v threadtime > usbcamera.log`\n\n\n\nThanks\n-------\n\n [saki4510t/UVCCamera](https://github.com/saki4510t/UVCCamera)\n\n\n\nLicense\n-------\n\n```c\nCopyright 2017-2023 Jiangdongguo\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n"
        },
        {
          "name": "VERSION.md",
          "type": "blob",
          "size": 2.119140625,
          "content": "Version\n-------\n\n#### 2020.01.15  version 2.3.2  \n\n1. Support adding time overlay(attention: overlay only support armeabi-v7a & arm64-v8a);\n2. Support recording device mic;\n3. Update to androidx and update commonLibVersion from 2.14.2 to 4.1.1;\n4. Fix saving files failed.  \n\n#### 2020.04.14  version 2.3.4\n\n1. Fix pull version 2.3.2 failed.\n2. Fix android 9.0 sometimes can not preview.\n3. Fix pull out crash 1.\n4. Update to all so files to new.\n\n#### 2021.03.16  version 2.3.5\n\n1. Fix stop preview crash.\n2. Open UVCCamera NDK Library project [UVCCameraLib](https://github.com/jiangdongguo/UVCCameraLib)\n\n#### 2021.04.08  version 2.3.6\n\n1. Fix pull out crash 2.\n\n#### 2021.11.17  version 2.3.7\n\n1. Fix download common library failed, and use aar instead.\n\n#### 2022.01.28  version 2.3.8\n\n1. Detect multiple cameras.\n\n#### 2022.07.01  version 3.0\n\n1. Refactor the project with kotlin;\n2. Support effects with OpenGL ES 2.0;\n3. Support capture photo、viedo and audio;\n4. Support rotate camera view;\n5. Support show camera offscreen;\n6. Support versionTarget>=29;\n7. Fix call StopPreview() crash (may have others, please tell me);\n8. Fix open some device failed, resolution or not uvc device as usual；\n9. Fix acquire  common library failed, see `libuvc/libusbcommon_v4.1.1.aar`;\n10. Merge NDK project into main project, see `libuvc` module.\n\n#### 2022.07.12  version 3.1.2\n\n1. Import usb common library instead of aar;\n2. Fix “pthread_mutex_lock called on a destroyed mutex” when call stop preview\n3. Fix jitpack.io build error;\n\n#### 2022.07.13  version 3.1.7\n\n1. Cancel supporting x86 & x86_64, If you need it, please downloading the project and build it;\n2. Release version 3.1.7 and support depend on it directly;\n\n#### 2022.07.15  version 3.1.8\n\n1. fix a native memory leak when repeat open close camera;\n\n#### 2022.07.25  version 3.2.0\n\n1. fix part equipment recording image flower;\n2. Support opening multi-road camera;\n\n#### 2022.08.25  version 3.2.7\n\n1. fix some device open failed or anr when close-open camera or hot plug;\n2. fix multi-road camera update resolution failed;\n3. support camera configures, like zoom/sharpness etc.\n4. fix Android S+ crash;"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.25390625,
          "content": "// Top-level build file where you can add configuration options libuvccommon to all sub-projects/modules.\nbuildscript {\n    repositories {\n        google()\n        jcenter()\n        maven { url \"https://jitpack.io\" }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:4.2.2'\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'\n        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20'\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n        maven { url \"https://jitpack.io\" }\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\next {\n    androidXVersion = '1.3.1'\n    versionCompiler = 29\n    versionTarget = 27\n    minSdkVersion = 19\n    versionCode = 126\n    versionNameString = '3.3.3'\n    javaSourceCompatibility = JavaVersion.VERSION_1_8\n    javaTargetCompatibility = JavaVersion.VERSION_1_8\n//    ndkVersion = '21.0.6113669'\n    supportLibVersion = '27.1.1'\n    versionBuildTool = '27.0.3'\n    kotlinCoreVersion = '1.3.2'\n    kotlinCoroutines = '1.3.9'\n    materialVersion = '1.3.0'\n    constraintlayoutVersion = '2.0.4'\n    lifecycle_version = '2.2.0'\n    quick_version= '2.9.50'\n    dialog_version= '3.2.1'\n    bugly_version = '3.4.4'\n    bugly_native_version = '3.9.0'\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.1181640625,
          "content": "# Project-wide Gradle settings.\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n# AndroidX package structure to make it clearer which packages are bundled with the\n# Android operating system, and which are packaged with your app\"s APK\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\nandroid.useAndroidX=true\n# Automatically convert third-party libraries to use AndroidX\nandroid.enableJetifier=true\n\nandroid.useDeprecatedNdk=true\n\nSTL_NAME=c++_shared"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.85546875,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.2607421875,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windowz variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\ngoto execute\n\n:4NT_args\n@rem Get arguments from the 4NT Shell from JP Software\nset CMD_LINE_ARGS=%$\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "libausbc",
          "type": "tree",
          "content": null
        },
        {
          "name": "libnative",
          "type": "tree",
          "content": null
        },
        {
          "name": "libuvc",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.09375,
          "content": "include ':app'\n\n// For debug online\ninclude ':libausbc'\ninclude ':libuvc'\ninclude ':libnative'\n\n"
        }
      ]
    }
  ]
}