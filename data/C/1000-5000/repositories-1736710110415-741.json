{
  "metadata": {
    "timestamp": 1736710110415,
    "page": 741,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "endrazine/wcc",
      "stars": 1857,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1416015625,
          "content": "# any bin directory\nbin/\n\n# compiled object files and shared libraries\n*.o\n*.so\n\n# temporary files created by some text editors\n*~\n\n#\ndoc/html/\n\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.40234375,
          "content": "[submodule \"src/wsh/linenoise\"]\n\tpath = src/wsh/linenoise\n\turl = https://github.com/antirez/linenoise.git\n[submodule \"src/wsh/openlibm\"]\n\tpath = src/wsh/openlibm\n\turl = https://github.com/JuliaLang/openlibm.git\n[submodule \"src/wsh/luajit-2.0\"]\n\tpath = src/wsh/luajit-2.0\n\turl = http://luajit.org/git/luajit-2.0.git\n[submodule \"doc/wikidocs\"]\n\tpath = doc/wikidocs\n\turl = https://github.com/endrazine/wcc.wiki.git\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.2197265625,
          "content": "The Witchcraft Compiler Collection\nwas written by the following authors:\n  Jonathan Brossard\n\n\nFor third party depedencies licenses,\nsee LICENSE.\n\nlinenoise, lua, lua-jit, openlibm are\ncopyrights of their respective owners.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 13.24609375,
          "content": "The Witcraft Compiler Collection is\nsubject to the following licenses:\n\n-------------------------------------- MIT LICENSE -------------------------------------------\nThe MIT License (MIT)\nCopyright (c) 2016-2024 Jonathan Brossard\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software\n and associated documentation files (the \"Software\"), to deal in the Software without \nrestriction, including without limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit persons to whom\nthe Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or\nsubstantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n------------------------------------------------------------------------------------------------\n\nIn addition, the following licenses apply to third party dependencies used within the\nWitchcraft Compiler Collection:\n\n---------------------------------- linenoise ---------------------------------------------------\nCopyright (c) 2010-2014, Salvatore Sanfilippo <antirez at gmail dot com>\nCopyright (c) 2010-2013, Pieter Noordhuis <pcnoordhuis at gmail dot com>\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n------------------------------------------------------------------------------------------------\n\n\n------------------------------------------ lua -------------------------------------------------\n\nLua is free software distributed under the terms of the MIT license reproduced below; it may be\nused for any purpose, including commercial purposes, at absolutely no cost without having to ask\nus. The only requirement is that if you do use Lua, then you should give us credit by including\nthe appropriate copyright notice somewhere in your product or its documentation. For details, \nsee this : http://www.lua.org/license.html\n\nCopyright © 1994–2015 Lua.org, PUC-Rio.\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software\nand associated documentation files (the \"Software\"), to deal in the Software without \nrestriction, including without limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or \nsubstantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\nBUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND \nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n------------------------------------------------------------------------------------------------\n\n\n===============================================================================\nLuaJIT -- a Just-In-Time Compiler for Lua. http://luajit.org/\n\nCopyright (C) 2005-2016 Mike Pall. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n[ MIT license: http://www.opensource.org/licenses/mit-license.php ]\n\n===============================================================================\n[ LuaJIT includes code from Lua 5.1/5.2, which has this license statement: ]\n\nCopyright (C) 1994-2012 Lua.org, PUC-Rio.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n===============================================================================\n[ LuaJIT includes code from dlmalloc, which has this license statement: ]\n\nThis is a version (aka dlmalloc) of malloc/free/realloc written by\nDoug Lea and released to the public domain, as explained at\nhttp://creativecommons.org/licenses/publicdomain\n\n===============================================================================\n\n## OpenLibm\n\nOpenLibm contains code that is covered by various licenses.\n\nThe OpenLibm code derives from the FreeBSD msun and OpenBSD libm\nimplementations, which in turn derives from FDLIBM 5.3. As a result, it\nhas a number of fixes and updates that have accumulated over the years\nin msun, and also optimized assembly versions of many functions. These\nimprovements are provided under the BSD and ISC licenses. The msun\nlibrary also includes work placed under the public domain, which is\nnoted in the individual files. Further work on making a standalone\nOpenLibm library from msun, as part of the Julia project is covered\nunder the MIT license. The test files, test-double.c and test-float.c\nare under the LGPL.\n\n## Parts copyrighted by the Julia project (MIT License)\n\n>       Copyright (c) 2011-14 The Julia Project.\n>       https://github.com/JuliaLang/openlibm/graphs/contributors\n>\n>       Permission is hereby granted, free of charge, to any person obtaining\n>       a copy of this software and associated documentation files (the\n>       \"Software\"), to deal in the Software without restriction, including\n>       without limitation the rights to use, copy, modify, merge, publish,\n>       distribute, sublicense, and/or sell copies of the Software, and to\n>       permit persons to whom the Software is furnished to do so, subject to\n>       the following conditions:\n>\n>       The above copyright notice and this permission notice shall be\n>       included in all copies or substantial portions of the Software.\n>\n>       THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n>       EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n>       MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n>       NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n>       LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n>       OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n>       WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n## Parts copyrighted by Stephen L. Moshier (ISC License)\n\n> Copyright (c) 2008 Stephen L. Moshier <steve@moshier.net>\n>\n> Permission to use, copy, modify, and distribute this software for any\n> purpose with or without fee is hereby granted, provided that the above\n> copyright notice and this permission notice appear in all copies.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n> WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n> MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n> ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n> WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n> ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n> OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n## FREEBSD MSUN (FreeBSD/2-clause BSD/Simplified BSD License)\n\n>       Copyright 1992-2011 The FreeBSD Project. All rights reserved.\n>\n>       Redistribution and use in source and binary forms, with or without\n>       modification, are permitted provided that the following conditions are\n>       met:\n>\n>       1. Redistributions of source code must retain the above copyright\n>       notice, this list of conditions and the following disclaimer.\n>\n>       2. Redistributions in binary form must reproduce the above copyright\n>       notice, this list of conditions and the following disclaimer in the\n>       documentation and/or other materials provided with the distribution.\n>       THIS SOFTWARE IS PROVIDED BY THE FREEBSD PROJECT ``AS IS'' AND ANY\n>       EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n>       IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n>       PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE FREEBSD PROJECT OR\n>       CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n>       EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n>       PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n>       PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n>       LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n>       NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n>       SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n>\n>       The views and conclusions contained in the software and documentation\n>       are those of the authors and should not be interpreted as representing\n>       official policies, either expressed or implied, of the FreeBSD\n>       Project.\n\n## FDLIBM\n\n>      Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n>\n>      Developed at SunPro, a Sun Microsystems, Inc. business.\n>      Permission to use, copy, modify, and distribute this\n>      software is freely granted, provided that this notice\n>      is preserved.\n\n## Tests\n\n>   Copyright (C) 1997, 1999 Free Software Foundation, Inc.\n>   This file is part of the GNU C Library.\n>   Contributed by Andreas Jaeger <aj@suse.de>, 1997.\n>\n>   The GNU C Library is free software; you can redistribute it and/or\n>   modify it under the terms of the GNU Lesser General Public\n>   License as published by the Free Software Foundation; either\n>   version 2.1 of the License, or (at your option) any later version.\n>\n>   The GNU C Library is distributed in the hope that it will be useful,\n>   but WITHOUT ANY WARRANTY; without even the implied warranty of\n>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n>   Lesser General Public License for more details.\n>\n>   You should have received a copy of the GNU Lesser General Public\n>   License along with the GNU C Library; if not, write to the Free\n>   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n>   02111-1307 USA.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.13671875,
          "content": "#\n# This file is part of the Witchcraft Compiler Collection\n# Copyright 2016-2024 Jonathan Brossard\n#\n# Homepage: https://github.com/endrazine/wcc/\n#\n# This file is licensed under MIT License.\n#\n\nCOMPILER_VERSION := $(shell $(CC) --version)\nifneq '' '$(findstring clang,$(COMPILER_VERSION))'\n  ASAN   := -fsanitize=address -static-libsan\nelse\n  ASAN   := -fsanitize=address -static-libasan\nendif\n\nCFLAGS := -W -Wall -Wno-discarded-qualifiers -Wno-int-conversion -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -fpie -pie -fPIC -g3 -ggdb -I../../include  -I./include/sflib/ -I./include -I../../include/  -Wno-incompatible-pointer-types  -fstack-protector-all -Wl,-z,relro,-z,now -DPACKAGE -DPACKAGE_VERSION -masm=intel -rdynamic -D_FORTIFY_SOURCE=2 -O2 \n\n\nall:\n\tmkdir -p bin\n\tcd src && make CFLAGS=\" $(CFLAGS)\"\n\nasan: CFLAGS += $(ASAN)\nasan: all\n\ndocumentation:\n\tcd src && doxygen ./tex/project.cfg\n\tcd doc/latex && make && cp refman.pdf ../WCC_internal_documentation.pdf\nclean:\n\tcd src && make clean\n\trm -f ./bin/*\n\nclean-documentation:\n#\trm -rf ./doc/html\n\trm -rf ./doc/latex\n\ninstall:\n\tcd src && make install\n\nuninstall:\n\tcd src && make uninstall\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.1806640625,
          "content": "\n\n#     The Witchcraft Compiler Collection\n\nWelcome to the Witchcraft Compiler Collection !\n\n## Purpose\nWCC is a collection of compilation tools to perform binary black magic on the GNU/Linux and other POSIX platforms.\n\n## User manual\n\nThe WCC user manual is available online at : https://github.com/endrazine/wcc/wiki\n\n## Installation\n\n### Installation Requirements\nThe Witchcraft Compiler Collection requires the following software to be installed:\n\n    capstone, glibc, libbfd, libdl, zlib, libelf, libreadline, libgsl, make\n\n### Installation Requirements on Ubuntu/Debian\nUnder Ubuntu/Debian those dependencies can be installed with the following commands (tested on Ubuntu 22.04):\n    \n    sudo apt-get install -y clang libbfd-dev uthash-dev libelf-dev libcapstone-dev  libreadline-dev libiberty-dev libgsl-dev build-essential git debootstrap file\n\n## Building and Installing:\n\n### Fetching the code over git\nThis will download the code of wcc from the internet to a directory named wcc in the current working directory:\n\n    git clone https://github.com/endrazine/wcc.git\n\nYou can then enter this directory with:\n\n    cd wcc\n\n### Initializing git submodules\nFrom your root wcc directory, type:\n\n    git submodule init\n    git submodule update\n\n#### Building WCC\nFrom your root wcc directory, type:\n\n    make\n#### Installing WCC\nThen to install wcc, type:\n\n    sudo make install\n\n#### Building the WCC documentation (Optional)\nWCC makes use of doxygen to generate its documentation. From the root wcc directory, type\n\n    make documentation\n\n\n## Core commands\nThe following commands constitute the core of the Witchcraft Compiler Collection.\n\n### wld : The Witchcraft Linker.\nwld takes an ELF executable as an input and modifies it to create a shared library.\n#### wld command line options\n\tjonathan@blackbox:~$ wld\n\tWitchcraft Compiler Collection (WCC) version:0.0.6    (18:10:51 May 10 2024)\n\n\tUsage: wld -libify [-noinit] file\n\n\tOptions:\n\t    -libify          Transform executable into shared library.\n\t    -noinit          Ignore constructors and desctructors in output library.\n\tjonathan@blackbox:~$ \n#### Example usage of wld\nThe following example libifies the executable /bin/ls into a shared library named /tmp/ls.so.\n\n\tjonathan@blackbox:~$ cp /bin/ls /tmp/ls.so\n\tjonathan@blackbox:~$ wld -libify /tmp/ls.so\n\tjonathan@blackbox:~$ \n\n#### Limits of wld\nwld currently only works on ELF binaries. However wld can process ELF executables irrelevant of their architecture or operating system. wld could for instance process Intel, ARM or SPARC executables from Android, Linux, BSD or UNIX operating systems and transform them into \"non relocatable shared libraries\". Feel free to refer to the documentation under the /doc directory for more ample details.\n\n### wcc : The Witchcraft Compiler.\nThe wcc compiler takes binaries (ELF, PE, ...) as an input and creates valid ELF binaries as an output. It can be used to create relocatable object files from executables or shared libraries. \n\n#### wcc command line options\n\tjonathan@blackbox:~$ wcc\n\tWitchcraft Compiler Collection (WCC) version:0.0.6    (18:10:50 May 10 2024)\n\n\tUsage: wcc [options] file\n\n\toptions:\n\n\t    -o, --output           <output file>\n\t    -m, --march            <architecture>\n\t    -e, --entrypoint       <0xaddress>\n\t    -i, --interpreter      <interpreter>\n\t    -p, --poison           <poison>\n\t    -s, --shared\n\t    -c, --compile\n\t    -S, --static\n\t    -x, --strip\n\t    -X, --sstrip\n\t    -E, --exec\n\t    -C, --core\n\t    -O, --original\n\t    -D, --disasm\n\t    -d, --debug\n\t    -h, --help\n\t    -v, --verbose\n\t    -V, --version\n\n\n\tjonathan@blackbox:~$ \n\n#### Example usage of wcc\nThe primary use of wcc is to \"unlink\" (undo the work of a linker) ELF binaries, either executables or shared libraries, back into relocatable shared objects.\nThe following command line attempts to unlink the binary /bin/ls (from GNU binutils) into a relocatable file named /tmp/ls.o\n\n    jonathan@blackbox:~$ wcc -c /bin/ls -o /tmp/ls.o\n    jonathan@blackbox:~$ \n\nThis relocatable file can then be used as if it had been directly produced by a compiler. The following command would use the gcc compiler to link /tmp/ls.o into a shared library /tmp/ls.so\n\n\tjonathan@blackbox:~$ gcc /tmp/ls.o -o /tmp/ls.so -shared\n\tjonathan@blackbox:~$ \n\n#### Limits of wcc\nwcc will process any file supported by libbfd and produce ELF files that will contain the same mapping when relinked and executed. This includes PE or OSX COFF files in 32 or 64 bits. However, rebuilding relocations is currently supported only for Intel ELF x86_64 binaries. Transforming a PE into an ELF and invoking pure functions is for instance supported.\n\n### wsh : The Witchcraft shell\nThe witchcraft shell accepts ELF shared libraries, ELF ET_DYN executables and Witchcraft Shell Scripts written in Punk-C as an input. It loads all the executables in its own address space and makes their API available for programming in its embedded interpreter. This provides for binaries functionalities similar to those provided via reflection on languages like Java.\n\n#### wsh command line options\n\n\tjonathan@blackbox:~$ wsh -h\n\tUsage: wsh [script] [-h|-q|-v|-V|-g] [binary1] [binary2] ... [-x [script_arg1] [script_arg2] ...]\n\n\tOptions:\n\n\t    -x, --args                Optional script argument separator\n\t    -q, --quiet               Display less output\n\t    -v, --verbose             Display more output\n\t    -g, --global              Bind symbols globally\n\t    -V, --version             Display version and build, then exit\n\n\tScript:\n\n\t    If the first argument is an existing file which is not a known binary file format,\n\t    it is assumed to be a lua script and gets executed.\n\n\tBinaries:\n\n\t    Any binary file name before the -x tag gets loaded before running the script.\n\t    The last binary loaded is the main binary analyzed.\n\n\tjonathan@blackbox:~$ \n\n\n#### Example usage of wsh\nThe following command loads the /usr/sbin/apache2 executable within wsh, calls the ap_get_server_banner() function within\napache to retrieve its banner and displays it within the wsh interpreter.\n\n\tjonathan@blackbox:~$ wsh /usr/sbin/apache2\n\t> a = ap_get_server_banner()\n\t> print(a)\n\tApache/2.4.7\n\t> \n\t\nTo get help at any time from the wsh interpreter, simply type help. To get help on a particular topic, type help(\"topic\").\n\nThe following example illustrates how to display the main wsh help from the interpreter and how to get detailed help on the grep command by calling help(\"grep\") from the wsh interpreter.\n\n\t> help\n\t  [Shell commands]\n\n\t\thelp, quit, exit, shell, exec, clear\n\n\t  [Functions]\n\n\t + basic:\n\t\thelp(), man()\n\n\t + memory display:\n\t\t hexdump(), hex_dump(), hex()\n\n\t + memory maps:\n\t\tshdrs(), phdrs(), map(), procmap(), bfmap()\n\n\t + symbols:\n\t\tsymbols(), functions(), objects(), info(), search(), headers()\n\n\t + memory search:\n\t\tgrep(), grepptr()\n\n\t + load libaries:\n\t\tloadbin(), libs(), entrypoints(), rescan()\n\n\t + code execution:\n\t\tlibcall()\n\n\t + buffer manipulation:\n\t\txalloc(), ralloc(), xfree(), balloc(), bset(), bget(), rdstr(), rdnum()\n\n\t + control flow:\n\t\t breakpoint(), bp()\n\n\t + system settings:\n\t\tenableaslr(), disableaslr()\n\n\t + settings:\n\t\t verbose(), hollywood()\n\n\t + advanced:\n\t\tltrace()\n\n\tTry help(\"cmdname\") for detailed usage on command cmdname.\n\n\t> help(\"grep\")\n\n\t\tWSH HELP FOR FUNCTION grep\n\n\n\tNAME\n\n\t\tgrep\n\n\tSYNOPSIS\n\n\t\ttable match = grep(<pattern>, [patternlen], [dumplen], [before])\n\n\tDESCRIPTION\n\n\t\tSearch <pattern> in all ELF sections in memory. Match [patternlen] bytes, then display [dumplen] bytes, optionally including [before] bytes before the match. Results are displayed in enhanced decimal form\n\n\tRETURN VALUES\n\n\t\tReturns 1 lua table containing matching memory addresses.\n\n\n\t> \n\n#### Extending wsh with Witchcraft Shell Scripts\nThe combination of a full lua interpreter in the same address space as the loaded executables and shared libraries in combination with the reflection like capabilities of wsh allow calling any function loaded in the address space from the wsh interpreter transparently. The resulting API, a powerful combination of lua and C API is called Punk-C. Wsh is fully scriptable in Punk-C, and executes Punk-C on the fly via its dynamic interpreter.\nScripts in Punk C can be invoked by specifying the full path to wsh in the magic bytes of a wsh shell. \nThe following command displays the content of a Witchcraft shell script:\n\n\tjonathan@blackbox:/usr/share/wcc/scripts$ cat md5.wsh\n\t#!/usr/bin/wsh\n\n\t-- Computing a MD5 sum using cryptographic functions from foreign binaries (eg: sshd/OpenSSL)\n\n\tfunction str2md5(input)\n\n\t\tout = calloc(33, 1)\n\t\tctx = calloc(1024, 1)\n\n\t\tMD5_Init(ctx)\n\t\tMD5_Update(ctx, input, strlen(input))\n\t\tMD5_Final(out, ctx)\n\n\t\tfree(ctx)\n\t\treturn out\n\tend\n\n\tinput = \"Message needing hashing\\n\"\n\thash = str2md5(input)\n\thexdump(hash,16)\n\n\texit(0)\n\tjonathan@blackbox:/usr/share/wcc/scripts$ \n\n\nTo run this script using the API made available inside the address space of sshd, simply run:\n\n\tjonathan@blackbox:/usr/share/wcc/scripts$ ./md5.wsh /usr/sbin/sshd \n\t0x43e8b280    d6 fc 46 91 b0 6f ab 75 4d 9c a7 58 6d 9c 7e 36    V|F.0o+uM.'Xm.~6\n\tjonathan@blackbox:/usr/share/wcc/scripts$ \n\n\n\n#### Limits of wsh\nwsh can only load shared libraries and ET_DYN dynamically linked ELF executables directly. This means ET_EXEC executables may need to be libified using wld before use in wsh. Binaries in other file formats might need to be turned into ELF files using wcc.\n\n#### Note: Analysing and Executing ARM/SPARC/MIPS binaries \"natively\" on Intel x86_64 cpus via JIT binary translation\nwsh can be cross compiled to ARM, SPARC, MIPS and other platforms and used in association with the qemu's user space emulation mode to provide JIT binary translation on the fly and analyse shared libraries and binaries from other cpus without requiring emulation of a full operating system in a virtual machine. The analyzed binaries are translated from one CPU to an other, and the analysed binaries, the wsh cross compiled analyser and the qemu binary translator share the address space of a single program. This significantly diminishes the complexity of analysing binaries across different hardware by seemingly allowing to run ARM or SPARC binaries on a linux x86_64 machine natively and transparently.\n\n## Other commands\n\nThe following auxiliary commands are available with WCC. They are typically simple scripts built on top of WCC.\n\n### wldd : print shared libraries compilation flags\nWhen compiling C code, it is often required to pass extra arguments to the compiler to signify which shared libraries should be explicitly linked against the compile code. Figuring out those compilation parameters can be cumbersome. The wldd commands displays the shared libraries compilation flags given at compile time for any given ELF binary.\n\n#### wldd command line options\n\n\tjonathan@blackbox:~$ wldd \n\tUsage: /usr/bin/wldd </path/to/bin>\n\n\t  Returns libraries to be passed to gcc to relink this application.\n\n\tjonathan@blackbox:~$ \n\n#### Example usage of wldd\nThe following command displays shared libraries compilation flags as passed to gcc when compiling /bin/ls from GNU binutils:\n\n\tjonathan@blackbox:~$ wldd /bin/ls\n\t-lselinux -lacl -lc -lpcre -ldl -lattr \n\tjonathan@blackbox:~$\n\n### wcch : generate C headers from binaries\nThe wcch command takes an ELF binary path as a command line, and outputs a minimal C header file declaring all the exported global variables and functions from the input binary. This automates prototypes declaration when writing C code and linking with a binary for which C header files are not available.\n\n#### Example usage of wcch\n\nThe following command instructs wcch to generate C headers from the apache2 executable and redirects the output from the standard output to a file named /tmp/apache2.h ready for use as a header in a C application.\n\n\tjonathan@blackbox:~$ wcch /usr/sbin/apache2 >/tmp/apache2.h\n\tjonathan@blackbox:~$ \n\n## Downloading the source code\nThe official codebase of the Witchcraft Compiler Collection is hosted on github at https://github.com/endrazine/wcc/ . It uses git modules, so some extra steps are needed to fetch all the code including dependencies. To download the source code of wcc, in a terminal, type:\n\n    git clone https://github.com/endrazine/wcc.git\n    cd wcc\n    git submodule init\n    git submodule update\n\nThis will create a directory named wcc and fetch all required source code in it.\n\n## Greetings\nThe Witchcraft Compiler Collection uses the following amazing Open Source third party software:\n\n  - Capstone, a lightweight multi-platform, multi-architecture disassembly framework http://www.capstone-engine.org/\n  - Linenoise, A small self-contained alternative to readline and libedit https://github.com/antirez/linenoise\n  - Openlibm, High quality system independent, portable, open source libm implementation https://github.com/JuliaMath/openlibm\n  - Lua, The Programming Language Lua https://www.lua.org/\n  - LuaJit, a Just-In-Time Compiler for Lua http://luajit.org/\n  - Qemu, in particular its user space mode : https://qemu-project.gitlab.io/qemu/user/main.html\n  - Uthash and Utlist, Hash tables and linked list implemented as C headers https://troydhanson.github.io/uthash/\n\n## Testing\n\nThe following companion repository exsists to help test WCC: https://github.com/endrazine/wcc-tests\n\n## Licence\nThe Witchcraft Compiler Collection is published under the MIT License.\nPlease refer to the file named [LICENSE](LICENSE) for more information.\n\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}