{
  "metadata": {
    "timestamp": 1736709953280,
    "page": 495,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "EyalAr/lwip",
      "stars": 2363,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0673828125,
          "content": "build\nnode_modules\nnpm-debug.log\ntests/results\n.idea\ntests/.DS_Store\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2138671875,
          "content": "language: node_js\nenv:\n  - CXX=g++-4.8\naddons:\n  apt:\n    sources:\n    - ubuntu-toolchain-r-test\n    packages:\n    - g++-4.8\nnode_js:\n    - \"0.10\"\n    - \"0.12\"\n    - \"4.0\"\n    - \"4.1\"\nscript: npm run travis\nsudo: false\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.345703125,
          "content": "# How to contribute\n\nAny kind of contribution / feedback is appreciated! One of the greatest\nmotivations to make an open source project is to see people use it and get\ninvolved (in any level).\n\nHow to:\n\n0. [Suggest features / improvements](#suggest-features--improvements)\n0. [Report bugs](#report-bugs)\n0. [Contribute code](#contribute-code)\n\n## Suggest features / improvements\n\nGot an improvement you think can make lwip better? Great!\n\nOpen an issue with a descriptive title. Describe in a clear language the feature\nyou need. If possible, write a code sample of how you think this feature should\nwork.\n\n## Report bugs\n\nOpen an issue with a descriptive title. __Write instructions__ on how to\nreproduce the problem. __Code samples__ which demonstrate the problem can be\nvery useful. Also include error logs and information about your system (OS,\nnode version, npm version, lwip version, etc.).\n\n## Contribute code\n\nCode contributions are happily welcomed. In order to make the process managable\nand pleasant, please do not blindly open PRs without discussing it first.\n\nA PR should address an already opened issue. If your PR fixes a bug, there\nshould already be an issue reporting this bug. If your PR implements a new\nfeature, there should be an issue requesting this feature.\n\n0. Disscuss your intention to work on an issue in the issue itself.\n0. Fork lwip.\n0. You may want to read development notes in `DEVELOPMENT.md`.\n0. Your code should be based on the latest `version/x.x.x` branch, or `master`\n   if no `version/x.x.x` branch is available. Ask to be sure.\n   Before releasing a new version, a `version/x.x.x` branch will be opened, into\n   which all feature branches for this version will be merged. Eventually this\n   version branch will be merged into `master`.\n0. Your commits should describe your changes. Try not to make too many unrelated\n   changes in one commit. Split them. Write descriptive commit logs.\n0. Include tests for your changes / new feature.\n0. Make sure existing tests still pass.\n0. If your PR changes the public API, update the README accordingly.\n0. There are no written code conventions (yet), but try to get a sense of the\n   coding style and keep similar style (no tabs, please).\n0. Don't change git history (no force push).\n0. Spell check.\n\n## Copyrights\n\nThis project is published under the MIT lisence. All contributions are included\nunder the same lisence.\n"
        },
        {
          "name": "DEVELOPMENT.md",
          "type": "blob",
          "size": 7.736328125,
          "content": "# Development Notes\n\n## Getting started\n\n0. Read README.md to get a sense of the public API and usage conventions.\n0. Read the rest of this document (you can skip parts that are not relevant\n   to you).\n0. Go quickly over the JS code, but don't try to understand each and every line.\n0. Try to understand how the JS code uses the native part.\n0. __Ask questions.__\n\n## Intro\n\nAn image is just a matrix of pixels. Pixels have channels. Grayscale images have\none channel, color images have 3 or more channels (RGB. CMYK, etc.) and\ntransparent images have an extra alpha channel (RGBA, etc.), which defines how\ntransparent the respective pixel is.\n\nPixel color can be represented in various ways. It can be broken down to base\ncolor components such as in RGB and CMYK. It can be encoded as an indexed color\npalette, where the palette itself can be RGB or CMYK.\n\nStoring the image's pixels as they are is wasteful. There are methods to encode\nand compress the pixels such that the image takes less space. Some of those\nmethods loose data in the process of compression (\"lossy compressions\"), and\nthus the quality of the image is reduced. Some methods don't loose data in the\ncompressions process (\"lossless compression\"), and thus the quality of the image\nis preserved. We call those methods \"image formats\".\n\nFor example:\n\n- JPEG does lossy compression (first it discards image data, then it compresses\n  it).\n- PNG does lossless compression (just compresses the data, without loosing any\n  of it).\n\nDifferent formats support different color representations and compressions\nmethods.\n\n## Opening an image\n\nImages exist in the wild in various formats with various color representations.\nBefore working on an image we need to obtain the decoded and uncompressed pixels\ndata. Each format has its own methods of decoding and decompression.\n\nBy \"opening an image\", we mean - going through the process of having the pixels\nin memory. Once we have that, we can start manipulating the image.\n\nWe need to decide how to represent uncompressed pixels data in memory.\n\n- What if we open a grayscale image?\n- What if we open a 3 channels colored image?\n- What if we open a 4 channels colored image?\n- What if we open an image with an alpha channel?\n\nIn order to reduce complexity, __we will always represent pixels as 4 channels\nRGBA values__. If the image is originally grayscale, we will convert it to RGBA\nwhen opening it. If the image has no transparency, the alpha channel will be\n100% for all pixels.\n\nIn order to decode an image, we have to identify its format. Once we do that,\nwe can use the appropriate decoding library.\n\nImages are constructed as `CImg<unsigned char>`. Notice the type of a pixel\nchannel is `unsigned char`, which makes our images 8bit.\n\nOnce an image is opened, the underlying raw pixels buffer will always have a\nsize of `4*W*H` bytes (4 channels, each with `W*H`) pixels, where `W` and `H`\nare the width and height, respectively. The channels in the buffer are ordered\nsequentially. I.e. first all values of the Red channel, then the Green, etc.\n\n## Structure of the native part\n\nBasically, there's nothing inherent in image handling that says it can't be\ndone in pure JavaScript. So why have a native part?\n\n0. Existing de facto official image decoding / encoding libraries are written\n   in C/C++ (libjpeg, libpng, giflib, etc.).\n0. Implementing image encoding / decoding libraries (such as JPEG) in JS is\n   _a lot_ of work.\n0. ...and includes lots of memory management and handling, which may not be\n   efficient in JS.\n0. Image processing algorithms, though obviously can be implemented in JS, are\n   much faster in native code with direct memory access.\n\nDisclaimer: I would love to get rid of the native part in favor of pure JS\nimplementations. The day comparable image encoding / decoding libraries will be\navailable in JS, I'll seriously consider switching.\n\nThere are three native parts to lwip, each a standalone module:\n\n### Decoder\n\nSources are under `src/decoder`\n\nThe decoder will expose a module with a decoding method for each supported\nimage format. Each of these methods will decode an image buffer of the\nrespective format. E.g. `decoder.jpeg( ... )` will decode JPEG buffers.\n\nEach of these functions receives 2 arguments - A Buffer object and a callback\nfunction.\n\nThe image Buffer object and the callback function are handed to the decoders\nfrom the JS side. We don't care how the buffer was created (most probably with\n`fs.readFile`), as long as it's a valid image buffer of the correct format.\n\nThe purpose of the decoder is, well, to decode the image buffer, and generate\na new buffer of raw pixels data. Each decoder function will use the respective\nlibrary (libjpeg, libpng, etc.) to do its thing.\n\nThe decoding function takes a callback as the second argument. Decoding an image\nbuffer is done asynchronously. When the decoding is finished, the callback\nfunction is called with __6 parameters__:\n\n0. An Error object, or `null` if no error\n0. Raw pixels Buffer object (the decoded image)\n0. Width of the image\n0. Height of the image\n0. Number of channels in the raw pixels buffer. __Currently always 4__ (all\n   images are converted to RGBA when decoding. See the `toRGBA` function in\n   `util.cpp`).\n0. Whether the image has transparency (`true` / `false`).\n\nCalling the callback with these parameters means effectively giving control back\nto the JS side.\n\n**Note** that the decoder is not doing _any_ arguments validation. If called\nwith invalid arguments, __it will crash__. Arguments validation in C++ is a\npain, which is why we never interact with the decoder directly; but rather we\nwrap it with JS code which makes sure it's used correctly.\n\n### Encoder\n\nSources are under `src/encoder`\n\nThe encoder, much like the decoder, exposes a module with an encoding method for\neach supported image format.\n\nUnlike the decoder, which receives an encoded image buffer; the encoder will\nreceive a raw pixels buffer to encode. E.g. `encoder.jpeg( ... )` will receive\na raw pixels buffer and encode it into a jpeg image buffer.\n\nThe arguments for the encoding methods differ for each encoding format.\nWe list them here:\n\n0. JPEG: `encoder.jpeg(pixbuff, width, height, quality, callback)`\n    0. `pixbuff` - Raw RGBA pixels buffer (a Buffer object)\n    0. `width` - The with of the image\n    0. `height` - The height of the image\n    0. `quality` - JPEG quality (0-100)\n    0. `callback` - callback function\n0. PNG: `encoder.png(pixbuff, width, height, compression, interlaced, trans, callback)`\n    0. `pixbuff` - Raw RGBA pixels buffer (a Buffer object)\n    0. `width` - The with of the image\n    0. `height` - The height of the image\n    0. `compression` - Level of zlib compression:\n        - `0` for `Z_NO_COMPRESSION`\n        - `1` for `Z_BEST_SPEED`\n        - `2` for `Z_BEST_COMPRESSION`\n    0. `interlaced` - should the created image be interlaced (`true` / `false`).\n    0. `trans` - should the alpha channel be considered when created the PNG?\n        - `false`: The alpha channel will be ignored.\n        - `true`: The image will be encoded with the alpha channel.\n    0. `callback` - callback function\n\nIn all cases encoding is done asynchronously. `callback` is a function which\nwill be called with __2 parameters__:\n\n0. An Error object, or `null` if no error\n0. Buffer object of the encoded image\n\nCalling the callback with these parameters means effectively giving control back\nto the JS side; in which, for example, the Buffer object can be written to disk\nas a file, sent over the network, etc.\n\n**Note** that the encoder is not doing _any_ arguments validation. If called\nwith invalid arguments, __it will crash__. Arguments validation in C++ is a\npain, which is why we never interact with the encoder directly; but rather we\nwrap it with JS code which makes sure it's used correctly.\n\n### Image processor\n\nSources are under `src/image`\n\n## Structure of the JS part\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0751953125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Eyal Arubas <eyalarubas@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 25.099609375,
          "content": "[![Version](http://img.shields.io/npm/v/lwip.svg)](https://www.npmjs.org/package/lwip)\n[![Build Status](https://api.travis-ci.org/EyalAr/lwip.svg?branch=master)](https://travis-ci.org/EyalAr/lwip)\n[![Build status](https://ci.appveyor.com/api/projects/status/46mk5218x995svhw/branch/master?svg=true)](https://ci.appveyor.com/project/EyalAr/lwip/branch/master)\n[![Coverage Status](https://img.shields.io/coveralls/EyalAr/lwip/master.svg)](https://coveralls.io/r/EyalAr/lwip)\n\n# Light-weight image processor for NodeJS\n\n[![Join the chat at https://gitter.im/EyalAr/lwip](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/EyalAr/lwip?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n0. [Overview](#overview)\n  0. [Installation](#installation)\n  0. [Usage](#usage)\n  0. [Supported formats](#supported-formats)\n  0. [Colors specification](#colors-specification)\n  0. [Note on transparent images](#note-on-transparent-images)\n  0. [Note on threading performance](#note-on-threading-performance)\n0. [API](#api)\n  0. [Open an image from file or buffer](#open-an-image)\n  0. [Create a new blank image](#create-a-new-image)\n  0. [Image operations](#image-operations)\n    0. [Resize](#resize)\n    0. [Scale](#scale)\n    0. [Contain](#contain)\n    0. [Cover](#cover)\n    0. [Rotate](#rotate)\n    0. [Crop](#crop)\n    0. [Blur](#blur)\n    0. [Sharpen](#sharpen)\n    0. [Mirror](#mirror)\n    0. [Flip](#flip)\n    0. [Border](#border)\n    0. [Pad](#pad)\n    0. [Adjust saturation](#saturate)\n    0. Adjust lightness: [lighten](#lighten) / [darken](#darken)\n    0. [Adjust hue](#hue)\n    0. [Fade (adjust transparency)](#fade)\n    0. [Opacify](#opacify)\n    0. [Paste](#paste)\n    0. [Set pixel](#set-pixel)\n    0. [Set metadata](#set-metadata)\n  0. [Getters](#getters)\n    0. [Width](#width)\n    0. [Height](#height)\n    0. [Pixel](#get-pixel)\n    0. [Clone](#clone)\n    0. [Extract / Copy](#extract)\n    0. [Get as a Buffer](#get-as-a-buffer)\n      0. [JPEG](#jpeg)\n      0. [PNG](#png)\n      0. [GIF](#gif)\n    0. [Write to file](#write-to-file)\n    0. [Get metadata](#get-metadata)\n  0. [Batch operations](#batch-operations)\n0. [Copyrights](#copyrights)\n\n## Overview\n\nThis module provides comprehensive, fast, and simple image processing and\nmanipulation capabilities.\n\n**There are no external runtime dependencies**, which means you don't have to\ninstall anything else on your system.\n\n**This module is in active development. [New features](https://github.com/EyalAr/lwip/issues?labels=feature+request&page=1&state=open) are being added.**\n\n[Read the background for the development of this module.](http://eyalarubas.com/image-processing-nodejs.html)\n\n### Installation\n\n`npm install lwip`\n\nOr, clone this repo and `cd lwip && npm install`.\n\nYou can run tests with `npm test`.\n\n**Note:** Installation of this module involves compiling native code.\nIf `npm install lwip` failes, you probably need to setup your system.\n[See instructions](https://github.com/TooTallNate/node-gyp#installation).\nBuilding on Windows with Visual Studio requires version 2013 or higher.\n\n### Usage\n\n**Typical workflow:**\n\n0. Open an image and get an image object.\n0. Manipulate it.\n0. Save to disk / Send image buffer over network / etc.\n\n**Example (batch operations):**\n\n```Javascript\n// obtain an image object:\nrequire('lwip').open('image.jpg', function(err, image){\n\n  // check err...\n  // define a batch of manipulations and save to disk as JPEG:\n  image.batch()\n    .scale(0.75)          // scale to 75%\n    .rotate(45, 'white')  // rotate 45degs clockwise (white fill)\n    .crop(200, 200)       // crop a 200X200 square from center\n    .blur(5)              // Gaussian blur with SD=5\n    .writeFile('output.jpg', function(err){\n      // check err...\n      // done.\n    });\n\n});\n```\n\n**Example (non-batch):**\n\n```Javascript\nvar lwip = require('lwip');\n\n// obtain an image object:\nlwip.open('image.jpg', function(err, image){\n\n  // check err...\n  // manipulate image:\n  image.scale(0.5, function(err, image){\n\n    // check err...\n    // manipulate some more:\n    image.rotate(45, 'white', function(err, image){\n\n      // check err...\n      // encode to jpeg and get a buffer object:\n      image.toBuffer('jpg', function(err, buffer){\n\n        // check err...\n        // save buffer to disk / send over network / etc.\n\n      });\n\n    });\n\n  });\n\n});\n```\n\n### Supported formats\n\n**Decoding (reading):**\n\n- JPEG, 1 & 3 channels (grayscale & RGB).\n- PNG, transparency supported.\n- GIF, transparency supported. Animated GIFs can be read, but only the first\n  frame will be retrieved.\n\n**Encoding (writing):**\n\n- JPEG, 3 channels (RGB).\n- PNG (lossless), 3 channels (RGB) or 4 channels (RGBA).\n- GIF (no animations)\n\nOther formats may also be supported in the future, but are probably less urgent.\nCheck the issues to see [which formats are planned to be supported](https://github.com/EyalAr/lwip/issues?labels=format+request&page=1&state=open).\nOpen an issue if you need support for a format which is not already listed.\n\n### Colors specification\n\nIn LWIP colors are coded as RGBA values (red, green, blue and an alpha channel).\n\nColors are specified in one of three ways:\n\n- As a string. possible values:\n\n  ```Javascript\n  \"black\"    // {r: 0, g: 0, b: 0, a: 100}\n  \"white\"    // {r: 255, g: 255, b: 255, a: 100}\n  \"gray\"     // {r: 128, g: 128, b: 128, a: 100}\n  \"red\"      // {r: 255, g: 0, b: 0, a: 100}\n  \"green\"    // {r: 0, g: 255, b: 0, a: 100}\n  \"blue\"     // {r: 0, g: 0, b: 255, a: 100}\n  \"yellow\"   // {r: 255, g: 255, b: 0, a: 100}\n  \"cyan\"     // {r: 0, g: 255, b: 255, a: 100}\n  \"magenta\"  // {r: 255, g: 0, b: 255, a: 100}\n  ```\n\n- As an array `[R, G, B, A]` where `R`, `G` and `B` are integers between 0 and\n  255 and `A` is an integer between 0 and 100.\n- As an object `{r: R, g: G, b: B, a: A}` where `R`, `G` and `B` are integers\n  between 0 and 255 and `A` is an integer between 0 and 100.\n\n**Note**: The `A` value (alpha channel) is always optional and defaults to\n100 (completely opaque).\n\n### Note on transparent images\n\n0. Transparency is supported through an alpha channel which ranges between 0\n   and 100. 0 is completely transparent and 100 is completely opaque.\n0. Not all formats support transparency. If an image with an alpha channel is\n   encoded with a format which does not support transparency, the alpha channel\n   will be ignored (effectively setting it to 100% for all pixels).\n\n### Note on threading performance\n\nAll operations are asynchronous, and processing takes place in a thread pool\nmanaged by libuv which is part of NodeJS. This thread pool is separate from the event\nloop used to process HTTP requests, so use of lwip should not significantly affect the\nhandling of HTTP requests by a web application. The thread pool is however shared with\nother threaded native modules such as those providing database and filesystem IO.\n\nThe default thread pool size of 4 will be appropriate for most applications. However\nif your application regularly processes many images concurrently and and you wish\nto take full advantage of a multicore system or prevent heavy image processing work\nfrom delaying database or filesystem IO, you may want to increase the size of the\nthread pool by setting the UV_THREADPOOL_SIZE environmental variable to the NodeJS\nprocess, e.g.:\n\n```\nUV_THREADPOOL_SIZE=8 node your_script.js\n```\n\n## API\n\nAll operations are done on an `image` object. An `image` object can be obtained\nby:\n\n0. Openning an existing image file or buffer with the [`open`](#open-an-image)\n   method.\n0. Creating a new image object with the [`create`](#create-a-new-image) method.\n0. Cloning an existing image object with the [`image.clone`](#clone) method.\n0. Extracting a sub-image from an existing image object with the\n   [`image.extract`](#extract) method.\n\n### Open an image\n\n`lwip.open(source, type, callback)`\n\n0. `source {String/Buffer}`: The path to the image on disk or an image buffer.\n0. `type {String/Object}`: **Optional** type of the image. If omitted, the type\n   will be inferred from the file extension. If `source` is a buffer, `type`\n   must be specified. If `source` is an encoded image buffer, `type` must be\n   a string of the image type (i.e. `\"jpg\"`). If `source` is a raw pixels buffer\n   `type` must be an object with `type.width` and `type.height` properties.\n0. `callback {Function(err, image)}`\n\n**Note about raw pixels buffers:** `source` may be a buffer of raw pixels. The\nbuffer may contain pixels of 1-4 channels, where:\n\n0. 1 channel is a grayscale image.\n0. 2 channels is a grayscale image with an alpha channel.\n0. 3 channels is an RGB image.\n0. 4 channels is an RGBA image (with an alpha channel).\n\nIn other words, if the image in the buffer has width `W` and height `H`, the\nsize of the buffer can be `W*H`, `2*W*H`, `3*W*H` or `4*W*H`.\n\nThe channel values in the buffer must be stored sequentially. I.e. first all the\nRed values, then all the Green values, etc.\n\n#### Open file example\n\n```Javascript\nvar lwip = require('lwip');\nlwip.open('path/to/image.jpg', function(err, image){\n    // check 'err'. use 'image'.\n    // image.resize(...), etc.\n});\n```\n\n#### Open buffer example\n\n```Javascript\nvar fs = require('fs'),\n    lwip = require('lwip');\n\nfs.readFile('path/to/image.png', function(err, buffer){\n  // check err\n  lwip.open(buffer, 'png', function(err, image){\n      // check 'err'. use 'image'.\n      // image.resize(...), etc.\n  });\n});\n```\n\n### Create a new image\n\n`lwip.create(width, height, color, callback)`\n\n0. `width {Integer>0}`: The width of the new image.\n0. `height {Integer>0}`: The height of the new image.\n0. `color {String / Array / Object}`: **Optional** Color of the canvas. See\n   [colors specification](#colors-specification). Defaults to a transparent\n   canvas `{r:0, g:0, b:0, a:0}`.\n0. `callback {Function(err, image)}`\n\n**Example**:\n\n```Javascript\nvar lwip = require('lwip');\n\nlwip.create(500, 500, 'yellow', function(err, image){\n  // check err\n  // 'image' is a 500X500 solid yellow canvas.\n});\n```\n\n### Image operations\n\n#### Resize\n\n`image.resize(width, height, inter, callback)`\n\n0. `width {Integer}`: Width in pixels.\n0. `height {Integer}`: **Optional** height in pixels. If omitted, `width` will\n   be used.\n0. `inter {String}`: **Optional** interpolation method. Defaults to `\"lanczos\"`.\n   Possible values:\n   - `\"nearest-neighbor\"`\n   - `\"moving-average\"`\n   - `\"linear\"`\n   - `\"grid\"`\n   - `\"cubic\"`\n   - `\"lanczos\"`\n0. `callback {Function(err, image)}`\n\n#### Scale\n\n`image.scale(wRatio, hRatio, inter, callback)`\n\n0. `wRatio {Float}`: Width scale ratio.\n0. `hRatio {Float}`: **Optional** height scale ratio. If omitted, `wRatio` will\n   be used.\n0. `inter {String}`: **Optional** interpolation method. Defaults to `\"lanczos\"`.\n   Possible values:\n   - `\"nearest-neighbor\"`\n   - `\"moving-average\"`\n   - `\"linear\"`\n   - `\"grid\"`\n   - `\"cubic\"`\n   - `\"lanczos\"`\n0. `callback {Function(err, image)}`\n\n#### Contain\n\nContain the image in a colored canvas. The image will be resized to the largest\npossible size such that it's fully contained inside the canvas.\n\n`image.contain(width, height, color, inter, callback)`\n\n0. `width {Integer}`: Canvas' width in pixels.\n0. `height {Integer}`: Canvas' height in pixels.\n0. `color {String / Array / Object}`: **Optional** Color of the canvas. See\n   [colors specification](#colors-specification).\n0. `inter {String}`: **Optional** interpolation method. Defaults to `\"lanczos\"`.\n   Possible values:\n   - `\"nearest-neighbor\"`\n   - `\"moving-average\"`\n   - `\"linear\"`\n   - `\"grid\"`\n   - `\"cubic\"`\n   - `\"lanczos\"`\n0. `callback {Function(err, image)}`\n\n#### Cover\n\nCover a canvas with the image. The image will be resized to the smallest\npossible size such that both its dimensions are bigger than the canvas's\ndimensions. Margins of the image exceeding the canvas will be discarded.\n\n`image.cover(width, height, inter, callback)`\n\n0. `width {Integer}`: Canvas' width in pixels.\n0. `height {Integer}`: Canvas' height in pixels.\n0. `inter {String}`: **Optional** interpolation method. Defaults to `\"lanczos\"`.\n   Possible values:\n   - `\"nearest-neighbor\"`\n   - `\"moving-average\"`\n   - `\"linear\"`\n   - `\"grid\"`\n   - `\"cubic\"`\n   - `\"lanczos\"`\n0. `callback {Function(err, image)}`\n\n#### Rotate\n\n`image.rotate(degs, color, callback)`\n\n0. `degs {Float}`: Clockwise rotation degrees.\n0. `color {String / Array / Object}`: **Optional** Color of the canvas. See\n   [colors specification](#colors-specification).\n0. `callback {Function(err, image)}`\n\n#### Crop\n\n#### Crop with rectangle coordinates\n\n`image.crop(left, top, right, bottom, callback)`\n\n0. `left, top, right, bottom {Integer}`: Coordinates of the crop rectangle.\n0. `callback {Function(err, image)}`\n\n#### Crop a rectangle from center\n\n`image.crop(width, height, callback)`\n\n0. `width, height {Integer}`: Width and height of the rectangle to crop from the\n   center of the image.\n0. `callback {Function(err, image)}`\n\n#### Blur\n\nGaussian blur.\n\n`image.blur(sigma, callback)`\n\n0. `sigma {Float>=0}`: Standard deviation of the Gaussian filter.\n0. `callback {Function(err, image)}`\n\n#### Sharpen\n\nInverse diffusion shapren.\n\n`image.sharpen(amplitude, callback)`\n\n0. `amplitude {Float}`: Sharpening amplitude.\n0. `callback {Function(err, image)}`\n\n#### Mirror\n\nMirror an image along the 'x' axis, 'y' axis or both.\n\n`image.mirror(axes, callback)`\n\n0. `axes {String}`: `'x'`, `'y'` or `'xy'` (case sensitive).\n0. `callback {Function(err, image)}`\n\n#### Flip\n\nAlias of [`mirror`](#mirror).\n\n#### Border\n\nAdd a colored border to the image.\n\n`image.border(width, color, callback)`\n\n0. `width {Integer}`: Border width in pixels.\n0. `color {String / Array / Object}`: **Optional** Color of the border. See\n   [colors specification](#colors-specification).\n0. `callback {Function(err, image)}`\n\n#### Pad\n\nPad image edges with colored pixels.\n\n`image.pad(left, top, right, bottom, color, callback)`\n\n0. `left, top, right, bottom {Integer}`: Number of pixels to add to each edge.\n0. `color {String / Array / Object}`: **Optional** Color of the padding. See\n   [colors specification](#colors-specification).\n0. `callback {Function(err, image)}`\n\n#### Saturate\n\nAdjust image saturation.\n\n`image.saturate(delta, callback)`\n\n0. `delta {Float}`: By how much to increase / decrease the saturation.\n0. `callback {Function(err, image)}`\n\n**Examples**:\n\n0. `image.saturate(0, ...)` will have no effect on the image.\n0. `image.saturate(0.5, ...)` will increase the saturation by 50%.\n0. `image.saturate(-1, ...)` will decrease the saturation by 100%, effectively\n   desaturating the image.\n\n#### Lighten\n\nAdjust image lightness.\n\n`image.lighten(delta, callback)`\n\n0. `delta {Float}`: By how much to increase / decrease the lightness.\n0. `callback {Function(err, image)}`\n\n**Examples**:\n\n0. `image.lighten(0, ...)` will have no effect on the image.\n0. `image.lighten(0.5, ...)` will increase the lightness by 50%.\n0. `image.lighten(-1, ...)` will decrease the lightness by 100%, effectively\n   making the image black.\n\n#### Darken\n\nAdjust image lightness.\n\n`image.darken(delta, callback)`\n\nEquivalent to `image.lighten(-delta, callback)`.\n\n#### Hue\n\nAdjust image hue.\n\n`image.hue(shift, callback)`\n\n0. `shift {Float}`: By how many degrees to shift each pixel's hue.\n0. `callback {Function(err, image)}`\n\n**Examples**:\n\n0. `image.lighten(0, ...)` will have no effect on the image.\n0. `image.lighten(100, ...)` will shift pixels' hue by 100 degrees.\n\n**Note:** The hue is shifted in a circular manner in the range [0,360] for each\npixel individually.\n\n#### Fade\n\nAdjust image transperancy.\n\n`image.fade(delta, callback)`\n\n0. `delta {Float}`: By how much to increase / decrease the transperancy.\n0. `callback {Function(err, image)}`\n\n**Note:** The transparency is adjusted independently for each pixel.\n\n**Examples**:\n\n0. `image.fade(0, ...)` will have no effect on the image.\n0. `image.fade(0.5, ...)` will increase the transparency by 50%.\n0. `image.fade(1, ...)` will make the image completely transparent.\n\n#### Opacify\n\nMake image completely opaque.\n\n`image.opacify(callback)`\n\n0. `callback {Function(err, image)}`\n\n#### Paste\n\nPaste an image on top of this image.\n\n`image.paste(left, top, img, callback)`\n\n0. `left, top {Integer}`: Coordinates of the top-left corner of the pasted\n   image.\n0. `img {Image object}`: The image to paste.\n0. `callback {Function(err, image)}`\n\n**Notes:**\n\n0. If the pasted image exceeds the bounds of the base image, an exception\n   is thrown.\n0. `img` is pasted in the state it was at the time `image.paste( ... )` was\n   called, eventhough `callback` is called asynchronously.\n0. For transparent images, alpha blending is done according to the equations\n   described [here](http://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending).\n0. Extra caution is required when using this method in batch mode, as the images\n   may change by the time this operation is called.\n\n#### Set Pixel\n\nSet the color of a pixel.\n\n`image.setPixel(left, top, color, callback)`\n\n0. `left, top {Integer}`: Coordinates of the pixel from the left-top corner of\n   the image.\n0. `color {String / Array / Object}`: Color of the pixel to set.\n   See [colors specification](#colors-specification).\n0. `callback {Function(err, image)}`\n\n**Notes:**\n\n0. If the coordinates exceed the bounds of the image, an exception is thrown.\n0. Extra caution is required when using this method in batch mode, as the\n  dimensions of the image may change by the time this operation is called.\n\n#### Set metadata\n\nSet the metadata in an image. This is currently only supported for PNG files.\nSets a tEXt chunk with the key `lwip_data` and comment as the given string. If\ncalled with a `null` parameter, removes existing metadata from the image,\nif present.\n\n`image.setMetadata(metadata)`\n\n0. `metadata {String}`: a string of arbitrary length, or null.\n\n### Getters\n\n#### Width\n\n`image.width()` returns the image's width in pixels.\n\n#### Height\n\n`image.height()` returns the image's height in pixels.\n\n#### Get Pixel\n\n`image.getPixel(left, top)` returns the color of the pixel at the `(left, top)`\ncoordinate.\n\n0. `left {Integer>=0}`\n0. `top {Integer>=0}`\n\nColor is returned as an object. See [colors specification](#colors-specification).\n\n#### Clone\n\nClone the image into a new image object.\n\n`image.clone(callback)`\n\n0. `callback {Function(err, newImage)}`\n\n**Example**: See [`examples/clone.js`](examples/clone.js)\n\n**Note**: The image is cloned to the state it was at the time\n`image.clone( ... )` was called, eventhough `callback` is called asynchronously.\n\n```Javascript\nimage.width(); // 500\nimage.clone(function(err, clone){\n    clone.width(); // 500\n});\nimage.resize(100, 100, function(err, image){\n    image.width(); //100\n});\n```\n\n#### Extract\n\nCopy an area of the image into a new image object.\n\n`image.extract(left, top, right, bottom, callback)`\n\n0. `left, top, right, bottom {Integer}`: Coordinates of the area to copy.\n0. `callback {Function(err, newImage)}`\n\n**Example**: See [`examples/extract.js`](examples/extract.js)\n\n**Note**: The sub-image is extracted from the original image in the state it was\nat the time `image.extract( ... )` was called, eventhough `callback` is called\nasynchronously.\n\n#### Get as a Buffer\n\nGet encoded binary image data as a NodeJS\n[Buffer](http://nodejs.org/api/buffer.html).\n\nWhen opening an image, it is decoded and stored in memory as an uncompressed\nimage. All manipulations are done on the uncompressed data in memory. This\nmethod allows to encode the image to one of the specified formats and get the\nencoded data as a NodeJS Buffer object.\n\n`image.toBuffer(format, params, callback)`\n\n0. `format {String}`: Encoding format. Possible values:\n  - `\"jpg\"`\n  - `\"png\"`\n  - `\"gif\"`\n0. `params {Object}`: **Optional** Format-specific parameters (See below).\n0. `callback {Function(err, buffer)}`\n\n**Supported encoding formats:**\n\n##### JPEG\n\nThe `params` object should have the following fields:\n\n- `quality {Integer}`: Defaults to `100`.\n\nNote that when encoding to JPEG the alpha channel is discarded.\n\n##### PNG\n\nThe `params` object should have the following fields:\n\n- `compression {String}`: Defaults to `\"fast\"`. Possible values:\n  - `\"none\"` - No compression. Fastest.\n  - `\"fast\"` - Basic compression. Fast.\n  - `\"high\"` - High compression. Slowest.\n- `interlaced {Boolean}`: Defaults to `false`.\n- `transparency {true/false/'auto'}`: Preserve transparency? Defaults to\n  `'auto'`. Determines if the encoded image will have 3 or 4 channels. If\n  `'auto'`, the image will be encoded with 4 channels if it has transparent\n  components, and 3 channels otherwise.\n\n##### GIF\n\nThe `params` object should have the following fields:\n\n- `colors {Integer}`: Defaults to `256`. Number of colors in the color table\n  (at most). Must be between 2 and 256.\n- `interlaced {Boolean}`: Defaults to `false`.\n- `transparency {true/false/'auto'}`: Preserve transparency? Defaults to\n  `'auto'`. Determines if the encoded image will have 3 or 4 channels. If\n  `'auto'`, the image will be encoded with 4 channels if it has transparent\n  components, and 3 channels otherwise.\n- `threshold {Integer}` - Between 0 and 100. Pixels in a gif image are either\n  fully transparent or fully opaque. This value sets the alpha channel\n  threshold to determine if a pixel is opaque or transparent. If the alpha\n  channel of the pixel is above this threshold, this pixel will be considered\n  as opaque; otherwise it will be transparent.\n\n#### Write to file\n\nWrite encoded binary image data directly to a file.\n\n`image.writeFile(path, format, params, callback)`\n\n0. `path {String}`: Path of file to write.\n0. `format {String}`: **Optional** Encoding format. If omitted, will be inferred\n   from `path` extension. Possible values are specified in\n   [Get as a Buffer](#get-as-a-buffer) section.\n0. `params {Object}`: **Optional** Format-specific parameters.\n0. `callback {Function(err)}`\n\n#### Get Metadata\n\nGet the textual metadata from an image. This is currently only supported for\ntEXt chunks in PNG images, and will get the first tEXt chunk found with the key\n`lwip_data`. If none is found, returns null.\n\n`image.getMetadata()`\n\n### Batch operations\n\nEach of the [image operations](#image-operations) above can be done as part of\na batch of operations. Operations can be queued, and executed as a batch at any\ntime.\n\nEach one of the [image operations](#image-operations) has a batch equivalent\nwhich takes the same arguments, except the callback, which is not needed.\n\nWhen all batch operations had been queued, they can be executed in one of\nseveral methods, as explained below.\n\n#### Obtaining a batch object\n\nIn order to start queueing operations, a batch object first needs to be obtained\nfrom the image.\n\n```Javascript\n// obtain a batch object from the image:\nvar batch = image.batch();\n```\n\n#### Using a batch object\n\nUse the batch object to queue [image operations](#image-operations). Each of the\noperations above has a batch equivalent. Operations can be chained.\n\n**Remember, the batch manipulation methods do not take a callback.**\n\n**Example:**\n\n```Javascript\nbatch.rotate(45, 'white').scale(0.5).blur(5);\n```\n\n#### Executing a batch\n\nThere are several methods which start the execution of a batch. Once a batch\nfinishes an execution, it becomes empty and can be resued to queue additional\noperations.\n\n##### Execute batch and obtain the manipulated image object\n\nWhen all desired operations had been queued, execute the batch with the `exec()`\nmethod. `exec` takes a `callback` argument; `callback` is a function which\nreceives an error object and the manipulated image object:\n\n`batch.exec(callback)`\n\n  - `callback {Function(err, image)}`:\n    - `err`: An error object or `null` when no error.\n    - `image`: An image object of the manipulated image.\n\n```Javascript\nbatch.exec(function(err, image){\n  // check err, use image\n});\n```\n\n##### Execute batch and obtain a Buffer object\n\nBatch objects have a `toBuffer` convenience method.\n\n`batch.toBuffer(format, params, callback)`\n\nSee parameters of [`image.toBuffer()`](#get-as-a-buffer).\n\n##### Execute batch and write to file\n\nBatch objects have a `writeFile` convenience method.\n\n`batch.writeFile(path, format, params, callback)`\n\nSee parameters of [`image.writeFile()`](#write-to-file).\n\n#### Notes on batch operations\n\nAn image can have more than one batch object, but all batch objects modify the\nsame underlying image. This means the order of execution matters.\n\n```Javascript\nvar batch1 = image.batch().rotate('45', 'black');\nvar batch2 = image.batch().border(15, 'black');\n```\n\nThis will rotate the image 45degs and then add a black border:\n\n```Javascript\nbatch1.exec(function(err, image){\n    batch2.exec(function(err, image){\n        // ...\n    });\n});\n```\n\nWhile this will add a black border and then rotate the image 45degs:\n\n```Javascript\nbatch2.exec(function(err, image){\n    batch1.exec(function(err, image){\n        // ...\n    });\n});\n```\n\n## Copyrights\n\nThe native part of this module is compiled from source which uses the following:\n\n- Independent JPEG Group's free JPEG software:\n  - [Website](http://www.ijg.org/)\n  - [Readme](https://github.com/EyalAr/lwip/blob/master/src/lib/jpeg/README)\n- libpng:\n  - [Website](http://www.libpng.org/)\n  - [Readme](https://github.com/EyalAr/lwip/blob/master/src/lib/png/README)\n- zlib:\n  - [Website](http://www.zlib.net/)\n  - [Readme](https://github.com/EyalAr/lwip/blob/master/src/lib/zlib/README)\n- The CImg Library\n  - [Website](http://cimg.sourceforge.net/)\n  - [Readme](https://github.com/EyalAr/lwip/blob/master/src/lib/cimg/README.txt)\n- giflib\n  - [Website](http://giflib.sourceforge.net/)\n  - [Readme](https://github.com/EyalAr/lwip/blob/master/src/lib/gif/README)\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.6123046875,
          "content": "# Fix line endings in Windows. (runs before repo cloning)\ninit:\n  - git config --global core.autocrlf input\n\nenvironment:\n  matrix:\n    - nodejs_version: \"0.10\"\n      msvs_version: 2013\n    - nodejs_version: \"0.12\"\n      msvs_version: 2013\n    - nodejs_version: \"4.0\"\n      msvs_version: 2013\n    - nodejs_version: \"4.0\"\n      msvs_version: 2015\n    - nodejs_version: \"4.1\"\n      msvs_version: 2013\n    - nodejs_version: \"4.1\"\n      msvs_version: 2015\n\ninstall:\n  - ps: Install-Product node $env:nodejs_version\n  - ps: npm install --msvs_version=$env:msvs_version\n\ntest_script:\n  - ps: npm test\n\nbuild: off\n\nversion: \"{build}\"\n"
        },
        {
          "name": "binding.gyp",
          "type": "blob",
          "size": 9.86328125,
          "content": "{\n    \"targets\": [{\n        \"target_name\": \"lwip_decoder\",\n        \"sources\": [\n            # LWIP:\n            #######\n            \"src/decoder/init.cpp\",\n            \"src/decoder/util.cpp\",\n            \"src/decoder/buffer_worker.cpp\",\n            \"src/decoder/jpeg_decoder.cpp\",\n            \"src/decoder/png_decoder.cpp\",\n            \"src/decoder/gif_decoder.cpp\",\n            # LIB JPEG:\n            ###########\n            \"src/lib/jpeg/jmemnobs.c\",\n            \"src/lib/jpeg/jcomapi.c\",\n            \"src/lib/jpeg/jdapimin.c\",\n            \"src/lib/jpeg/jdapistd.c\",\n            \"src/lib/jpeg/jdatadst.c\",\n            \"src/lib/jpeg/jdatasrc.c\",\n            \"src/lib/jpeg/jdcoefct.c\",\n            \"src/lib/jpeg/jdcolor.c\",\n            \"src/lib/jpeg/jddctmgr.c\",\n            \"src/lib/jpeg/jdhuff.c\",\n            \"src/lib/jpeg/jdinput.c\",\n            \"src/lib/jpeg/jdmainct.c\",\n            \"src/lib/jpeg/jdmarker.c\",\n            \"src/lib/jpeg/jdmaster.c\",\n            \"src/lib/jpeg/jdpostct.c\",\n            \"src/lib/jpeg/jdsample.c\",\n            \"src/lib/jpeg/jerror.c\",\n            \"src/lib/jpeg/jfdctflt.c\",\n            \"src/lib/jpeg/jfdctfst.c\",\n            \"src/lib/jpeg/jfdctint.c\",\n            \"src/lib/jpeg/jidctflt.c\",\n            \"src/lib/jpeg/jidctfst.c\",\n            \"src/lib/jpeg/jidctint.c\",\n            \"src/lib/jpeg/jutils.c\",\n            \"src/lib/jpeg/jmemmgr.c\",\n            \"src/lib/jpeg/jdarith.c\",\n            \"src/lib/jpeg/jdmerge.c\",\n            \"src/lib/jpeg/jaricom.c\",\n            \"src/lib/jpeg/jquant1.c\",\n            \"src/lib/jpeg/jquant2.c\",\n            # LIB PNG:\n            ##########\n            \"src/lib/png/png.c\",\n            \"src/lib/png/pngset.c\",\n            \"src/lib/png/pngget.c\",\n            \"src/lib/png/pngrutil.c\",\n            \"src/lib/png/pngtrans.c\",\n            \"src/lib/png/pngread.c\",\n            \"src/lib/png/pngwrite.c\",\n            \"src/lib/png/pngrio.c\",\n            \"src/lib/png/pngrtran.c\",\n            \"src/lib/png/pngmem.c\",\n            \"src/lib/png/pngerror.c\",\n            \"src/lib/png/pngpread.c\",\n            # ZLIB:\n            #######\n            \"src/lib/zlib/adler32.c\",\n            \"src/lib/zlib/crc32.c\",\n            \"src/lib/zlib/gzlib.c\",\n            \"src/lib/zlib/gzread.c\",\n            \"src/lib/zlib/infback.c\",\n            \"src/lib/zlib/inflate.c\",\n            \"src/lib/zlib/inftrees.c\",\n            \"src/lib/zlib/inffast.c\",\n            \"src/lib/zlib/uncompr.c\",\n            \"src/lib/zlib/zutil.c\",\n            \"src/lib/zlib/trees.c\",\n            # LIB GIF:\n            ##########\n            \"src/lib/gif/dgif_lib.c\",\n            \"src/lib/gif/gif_err.c\",\n            \"src/lib/gif/gifalloc.c\",\n        ],\n        'include_dirs': [\n            '<!(node -e \"require(\\'nan\\')\")',\n            'src/decoder',\n            'src/lib/zlib',\n            'src/lib/jpeg',\n            'src/lib/cimg',\n            'src/lib/png',\n            'src/lib/gif'\n        ],\n        'conditions': [\n            ['OS==\"freebsd\"', {\n                'cflags!': ['-fno-exceptions'],\n                'cflags_cc!': ['-fno-exceptions'],\n            }],\n            ['OS==\"solaris\"', {\n                'cflags!': ['-fno-exceptions'],\n                'cflags_cc!': ['-fno-exceptions'],\n            }],\n            ['OS==\"linux\"', {\n                'cflags!': ['-fno-exceptions'],\n                'cflags_cc!': ['-fno-exceptions'],\n            }],\n            ['OS==\"mac\"', {\n                'xcode_settings': {\n                    'GCC_ENABLE_CPP_EXCEPTIONS': 'YES',\n                    'OTHER_CPLUSPLUSFLAGS' : [ '-mmacosx-version-min=10.7',\n                          '-stdlib=libc++',\n                          '-std=c++0x']\n                },\n                'include_dirs': ['/usr/include/malloc']\n            }],\n            ['OS==\"win\"', {\n                'configurations': {\n                    'Release': {\n                        'msvs_settings': {\n                            'VCCLCompilerTool': {\n                                'ExceptionHandling': 1\n                            }\n                        }\n                    }\n                },\n                'include_dirs': ['src/win']\n            }]\n        ]\n    },{\n        \"target_name\": \"lwip_encoder\",\n        \"sources\": [\n            # LWIP:\n            #######\n            \"src/encoder/init.cpp\",\n            \"src/encoder/jpeg_worker.cpp\",\n            \"src/encoder/png_worker.cpp\",\n            \"src/encoder/gif_worker.cpp\",\n            # LIB JPEG:\n            ###########\n            \"src/lib/jpeg/jdatadst.c\",\n            \"src/lib/jpeg/jmemnobs.c\",\n            \"src/lib/jpeg/jcomapi.c\",\n            \"src/lib/jpeg/jerror.c\",\n            \"src/lib/jpeg/jfdctflt.c\",\n            \"src/lib/jpeg/jfdctfst.c\",\n            \"src/lib/jpeg/jfdctint.c\",\n            \"src/lib/jpeg/jidctflt.c\",\n            \"src/lib/jpeg/jidctfst.c\",\n            \"src/lib/jpeg/jidctint.c\",\n            \"src/lib/jpeg/jutils.c\",\n            \"src/lib/jpeg/jmemmgr.c\",\n            \"src/lib/jpeg/jaricom.c\",\n            \"src/lib/jpeg/jquant1.c\",\n            \"src/lib/jpeg/jquant2.c\",\n            \"src/lib/jpeg/jcapimin.c\",\n            \"src/lib/jpeg/jcapistd.c\",\n            \"src/lib/jpeg/jccoefct.c\",\n            \"src/lib/jpeg/jccolor.c\",\n            \"src/lib/jpeg/jcdctmgr.c\",\n            \"src/lib/jpeg/jchuff.c\",\n            \"src/lib/jpeg/jcinit.c\",\n            \"src/lib/jpeg/jcmainct.c\",\n            \"src/lib/jpeg/jcmarker.c\",\n            \"src/lib/jpeg/jcmaster.c\",\n            \"src/lib/jpeg/jcparam.c\",\n            \"src/lib/jpeg/jcprepct.c\",\n            \"src/lib/jpeg/jcsample.c\",\n            \"src/lib/jpeg/jcarith.c\",\n            # LIB PNG:\n            ##########\n            \"src/lib/png/png.c\",\n            \"src/lib/png/pngset.c\",\n            \"src/lib/png/pngget.c\",\n            \"src/lib/png/pngtrans.c\",\n            \"src/lib/png/pngmem.c\",\n            \"src/lib/png/pngerror.c\",\n            \"src/lib/png/pngread.c\",\n            \"src/lib/png/pngwrite.c\",\n            \"src/lib/png/pngwutil.c\",\n            \"src/lib/png/pngwio.c\",\n            \"src/lib/png/pngwtran.c\",\n            # ZLIB:\n            #######\n            \"src/lib/zlib/adler32.c\",\n            \"src/lib/zlib/crc32.c\",\n            \"src/lib/zlib/gzlib.c\",\n            \"src/lib/zlib/zutil.c\",\n            \"src/lib/zlib/gzwrite.c\",\n            \"src/lib/zlib/compress.c\",\n            \"src/lib/zlib/deflate.c\",\n            \"src/lib/zlib/trees.c\",\n            # LIB GIF:\n            ##########\n            \"src/lib/gif/egif_lib.c\",\n            \"src/lib/gif/gif_err.c\",\n            \"src/lib/gif/gifalloc.c\",\n            \"src/lib/gif/gif_hash.c\",\n            \"src/lib/gif/quantize.c\"\n        ],\n        'include_dirs': [\n            '<!(node -e \"require(\\'nan\\')\")',\n            'src/encoder',\n            'src/lib/zlib',\n            'src/lib/jpeg',\n            'src/lib/cimg',\n            'src/lib/png',\n            'src/lib/gif'\n        ],\n        'conditions': [\n            ['OS==\"freebsd\"', {\n                'cflags!': ['-fno-exceptions'],\n                'cflags_cc!': ['-fno-exceptions'],\n            }],\n            ['OS==\"solaris\"', {\n                'cflags!': ['-fno-exceptions'],\n                'cflags_cc!': ['-fno-exceptions'],\n            }],\n            ['OS==\"linux\"', {\n                'cflags!': ['-fno-exceptions'],\n                'cflags_cc!': ['-fno-exceptions'],\n            }],\n            ['OS==\"mac\"', {\n                'xcode_settings': {\n                    'GCC_ENABLE_CPP_EXCEPTIONS': 'YES',\n                    'OTHER_CPLUSPLUSFLAGS' : [ '-mmacosx-version-min=10.7',\n                          '-stdlib=libc++',\n                          '-std=c++0x']\n                },\n                'include_dirs': ['/usr/include/malloc']\n            }],\n            ['OS==\"win\"', {\n                'configurations': {\n                    'Release': {\n                        'msvs_settings': {\n                            'VCCLCompilerTool': {\n                                'ExceptionHandling': 1\n                            }\n                        }\n                    }\n                },\n                'include_dirs': ['src/win']\n            }]\n        ]\n    },{\n        \"target_name\": \"lwip_image\",\n        \"sources\": [\n            # LWIP:\n            #######\n            \"src/image/init.cpp\",\n            \"src/image/image.cpp\",\n            \"src/image/resize_worker.cpp\",\n            \"src/image/rotate_worker.cpp\",\n            \"src/image/blur_worker.cpp\",\n            \"src/image/crop_worker.cpp\",\n            \"src/image/mirror_worker.cpp\",\n            \"src/image/pad_worker.cpp\",\n            \"src/image/sharpen_worker.cpp\",\n            \"src/image/hsla_worker.cpp\",\n            \"src/image/opacify_worker.cpp\",\n            \"src/image/paste_worker.cpp\",\n            \"src/image/setpixel_worker.cpp\",\n        ],\n        'include_dirs': [\n            '<!(node -e \"require(\\'nan\\')\")',\n            'src/lib/cimg',\n        ],\n        'conditions': [\n            ['OS==\"freebsd\"', {\n                'cflags!': ['-fno-exceptions'],\n                'cflags_cc!': ['-fno-exceptions'],\n            }],\n            ['OS==\"solaris\"', {\n                'cflags!': ['-fno-exceptions'],\n                'cflags_cc!': ['-fno-exceptions'],\n            }],\n            ['OS==\"linux\"', {\n                'cflags!': ['-fno-exceptions'],\n                'cflags_cc!': ['-fno-exceptions'],\n            }],\n            ['OS==\"mac\"', {\n                'xcode_settings': {\n                    'GCC_ENABLE_CPP_EXCEPTIONS': 'YES',\n                    'OTHER_CPLUSPLUSFLAGS' : [ '-mmacosx-version-min=10.7',\n                          '-stdlib=libc++',\n                          '-std=c++0x']\n                },\n                'include_dirs': ['/usr/include/malloc']\n            }],\n            ['OS==\"win\"', {\n                'configurations': {\n                    'Release': {\n                        'msvs_settings': {\n                            'VCCLCompilerTool': {\n                                'ExceptionHandling': 1\n                            }\n                        }\n                    }\n                }\n            }]\n        ]\n    }]\n}"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.1142578125,
          "content": "require('./lib/ImagePrototypeInit');\nrequire('./lib/BatchPrototypeInit');\n\nmodule.exports = require('./lib/obtain');\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.6279296875,
          "content": "{\n  \"name\": \"lwip\",\n  \"version\": \"0.0.9\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"async\": \"^2.0.0-rc.5\",\n    \"bindings\": \"^1.2.1\",\n    \"decree\": \"0.0.6\",\n    \"nan\": \"^2.3.2\"\n  },\n  \"scripts\": {\n    \"install\": \"node-gyp rebuild\",\n    \"test\": \"./node_modules/.bin/mocha --opts tests/mocha.opts tests\",\n    \"coverage\": \"./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha -- --opts tests/mocha.opts tests\",\n    \"travis\": \"./node_modules/.bin/istanbul cover --report lcovonly ./node_modules/.bin/_mocha -- --opts tests/mocha.opts --bail tests && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js\"\n  },\n  \"gypfile\": true,\n  \"description\": \"Comprehensive, fast, and simple image processing and manipulation\",\n  \"directories\": {\n    \"example\": \"examples\"\n  },\n  \"devDependencies\": {\n    \"coveralls\": \"^2.11.9\",\n    \"istanbul\": \"^0.4.3\",\n    \"mkdirp\": \"^0.5.1\",\n    \"mocha\": \"^2.4.5\",\n    \"mocha-lcov-reporter\": \"^1.2.0\",\n    \"should\": \"^8.3.2\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/EyalAr/lwip.git\"\n  },\n  \"keywords\": [\n    \"image\",\n    \"buffer\",\n    \"manipulate\",\n    \"process\",\n    \"resize\",\n    \"scale\",\n    \"rotate\",\n    \"jpeg\",\n    \"jpg\",\n    \"png\",\n    \"gif\",\n    \"crop\",\n    \"blur\",\n    \"sharpen\",\n    \"batch\",\n    \"flip\",\n    \"mirror\",\n    \"border\",\n    \"padding\",\n    \"hue\",\n    \"saturation\",\n    \"lightness\",\n    \"alpha\",\n    \"transparency\",\n    \"fade\",\n    \"opacity\",\n    \"contain\",\n    \"cover\"\n  ],\n  \"author\": \"Eyal Arubas <eyalarubas@gmail.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/EyalAr/lwip/issues\"\n  },\n  \"homepage\": \"https://github.com/EyalAr/lwip\"\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}