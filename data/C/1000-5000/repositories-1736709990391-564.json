{
  "metadata": {
    "timestamp": 1736709990391,
    "page": 564,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hmgle/graftcp",
      "stars": 2179,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": "graftcp\nlocal/cmd/graftcp-local/graftcp-local\nlocal/cmd/mgraftcp/mgraftcp\n\n*.o\n*.d\n*.a\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.77734375,
          "content": "# \"Makefile\" for graftcp.\n# Copyright (C) 2016, 2018, 2020, 2021, 2023, 2024 Hmgle <dustgle@gmail.com>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nKERNEL = $(shell uname -s)\nifneq ($(KERNEL), Linux)\n$(error only support Linux now.)\nendif\n\nVERSION = $(shell git rev-parse --is-inside-work-tree 1>/dev/null 2>&1 && \\\n             git describe --tags --always || echo \"v0.7\")\n\n# CROSS_COMPILE can be set on the command line\n# make CROSS_COMPILE=arm-linux-gnueabi-\n# Default value for CROSS_COMPILE is not to prefix executables\n\nCROSS_COMPILE ?=\n\nCC\t\t= $(CROSS_COMPILE)gcc\nCXX\t\t= $(CROSS_COMPILE)g++\nAR\t\t= $(CROSS_COMPILE)ar\n\ndebug = 0\n\nPREFIX = /usr/local\nBINDIR = $(PREFIX)/bin\n\nINSTALL = install -D\n\nCFLAGS += -Wall\nifeq ($(debug), 1)\n\tCFLAGS += -O0 -g\nelse\n\tCFLAGS += -O2 -DNDEBUG\nendif\n\nCFLAGS += -DVERSION=\\\"$(VERSION)\\\"\n\nSRC := $(wildcard *.c)\n\nGRAFTCP_LOCAL_BIN = local/graftcp-local local/mgraftcp\nTARGET = graftcp $(GRAFTCP_LOCAL_BIN)\n\n.PHONY: all clean\nall: $(TARGET)\n\n\ngraftcp: main.o graftcp.o util.o cidr-trie.o conf.o\n\t$(CC) $^ -o $@\n\nlibgraftcp.a: graftcp.o util.o cidr-trie.o conf.o\n\t$(AR) rcs $@ $^\n\n%.o: %.c\n\t$(CC) $(CFLAGS) -c -o $@ $<\n\nlocal/graftcp-local:\n\t$(MAKE) -C $(dir $@) VERSION=$(VERSION) CC=$(CC) CXX=$(CXX) AR=$(AR) $(notdir $@)\n\nlocal/mgraftcp: libgraftcp.a\n\t$(MAKE) -C $(dir $@) VERSION=$(VERSION) CC=$(CC) CXX=$(CXX) AR=$(AR) $(notdir $@)\n\n.PHONY: install uninstall install_graftcp uninstall_graftcp install_graftcp_local uninstall_graftcp_local\n\ninstall: graftcp $(GRAFTCP_LOCAL_BIN)\n\t$(INSTALL) $< $(DESTDIR)$(BINDIR)/$<\n\t$(MAKE) -C local $@\n\nuninstall:\n\t-rm -f $(DESTDIR)$(BINDIR)/graftcp\n\t$(MAKE) -C local $@\n\ninstall_graftcp: graftcp\n\t$(INSTALL) $< $(DESTDIR)$(BINDIR)/$<\n\nuninstall_graftcp:\n\t-rm -f $(DESTDIR)$(BINDIR)/graftcp\n\n.PHONY: install_systemd enable_systemd disable_systemd uninstall_systemd\n\ninstall_systemd enable_systemd disable_systemd uninstall_systemd:\n\t$(MAKE) -C local $@\n\ninstall_graftcp_local:\n\t$(MAKE) -C local install\n\nuninstall_graftcp_local:\n\t$(MAKE) -C local uninstall\n\nsinclude $(SRC:.c=.d)\n\n%.d: %.c\n\t@set -e; rm -f $@; \\\n\t\t$(CC) -MM $(CPPFLAGS) $< > $@.$$$$; \\\n\t\tsed 's,\\(.*\\)\\.o[:]*,\\1.o $@:,' < $@.$$$$ > $@; \\\n\t\trm -f $@.$$$$\n\nclean:\n\t-rm -f *.o *.a graftcp *.d\n\t$(MAKE) -C local $@\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.56640625,
          "content": "<!--\n# GRAFTCP\n\n`graftcp` is a proxy tool inspiring by [maybe](https://github.com/p-e-w/maybe) and [proxychains](https://github.com/haad/proxychains).\nIt hooks `connect(2)` function via `ptrace(2)` and redirects the connection through SOCKS5 proxies.\n-->\n\n# graftcp\n\n**English** | [简体中文](./README.zh-CN.md)\n\n## Introduction\n\n`graftcp` can redirect the TCP connection made by the given program \\[application, script, shell, etc.\\] to SOCKS5 or HTTP proxy.\n\nCompared with [tsocks](https://linux.die.net/man/8/tsocks), [proxychains](http://proxychains.sourceforge.net/) or [proxychains-ng](https://github.com/rofl0r/proxychains-ng), `graftcp` is not using the [LD_PRELOAD trick](https://stackoverflow.com/questions/426230/what-is-the-ld-preload-trick) which only work for dynamically linked programs, e.g., [applications built by Go can not be hook by proxychains-ng](https://github.com/rofl0r/proxychains-ng/issues/199). `graftcp` can trace or modify any\ngiven program's connect by [`ptrace(2)`](https://en.wikipedia.org/wiki/Ptrace), so it is workable for any program. The principle will be explained in this paragraph of [how does it work](#principles).\n\n## Installation\n\n### Install from source\n\n`graftcp` runs on Linux. Building `graftcp-local` requires [Go](https://golang.org/doc/install) installed.\n\n```sh\ngit clone https://github.com/hmgle/graftcp.git\ncd graftcp\nmake\n```\n\nAfter make finishes, you'll be able to use `local/graftcp-local` and `./graftcp`.\nOptionally, you can also install them to system:\n\n```sh\nsudo make install\n# Install systemed unit\nsudo make install_systemd\n# Activate systemd service\nsudo make enable_systemd\n```\n\n### Install from binary package\n\nDownload the [Debian](https://github.com/hmgle/graftcp/releases/download/v0.4.0/graftcp_0.4.0-1_amd64.deb) or [Arch Linux](https://github.com/hmgle/graftcp/releases/download/v0.4.0/graftcp-0.4.0-1-x86_64.pkg.tar.zst) package from <https://github.com/hmgle/graftcp/releases> and install.\n\n## Usage\n\n`graftcp-local`:\n\n```console\n$ local/graftcp-local -h\nUsage of local/graftcp-local:\n  -config string\n        Path to the configuration file\n  -http_proxy string\n        http proxy address, e.g.: 127.0.0.1:8080\n  -listen string\n        Listen address (default \":2233\")\n  -logfile string\n        Write logs to file\n  -loglevel value\n        Log level (0-6) (default 1)\n  -pipepath string\n        Pipe path for graftcp to send address info (default \"/tmp/graftcplocal.fifo\")\n  -select_proxy_mode string\n        Set the mode for select a proxy [auto | random | only_http_proxy | only_socks5] (default \"auto\")\n  -service string\n        Control the system service: [\"start\" \"stop\" \"restart\" \"install\" \"uninstall\"]\n  -socks5 string\n        SOCKS5 address (default \"127.0.0.1:1080\")\n  -syslog\n        Send logs to the local system logger (Eventlog on Windows, syslog on Unix)\n```\n\n`graftcp`:\n\n```console\n$ graftcp -h\nUsage: graftcp [options] prog [prog-args]\n\nOptions:\n  -c --conf-file=<config-file-path>\n                    Specify configuration file.\n                    Default: $XDG_CONFIG_HOME/graftcp/graftcp.conf\n  -a --local-addr=<graftcp-local-IP-addr>\n                    graftcp-local's IP address. Default: localhost\n  -p --local-port=<graftcp-local-port>\n                    Which port is graftcp-local listening? Default: 2233\n  -f --local-fifo=<fifo-path>\n                    Path of fifo to communicate with graftcp-local.\n                    Default: /tmp/graftcplocal.fifo\n  -b --blackip-file=<black-ip-file-path>\n                    The IP/CIDR in black-ip-file will connect direct\n  -w --whiteip-file=<white-ip-file-path>\n                    Only redirect the connect that destination IP/CIDR in\n                    the white-ip-file to SOCKS5\n  -n --not-ignore-local\n                    Connecting to local is not changed by default, this\n                    option will redirect it to SOCKS5\n  -u --user=<username>\n                    Run command as USERNAME handling setuid and/or setgid\n  -V --version\n                    Show version\n  -h --help\n                    Display this help and exit\n```\n\n`mgraftcp`: Combined `graftcp-local` and `graftcp` (`mgraftcp` = `graftcp-local` + `graftcp`).\n`mgraftcp` can be used to replace `graftcp` without running `graftcp-local`.\n\n```console\nUsage: mgraftcp [-hn] [-b value] [--enable-debug-log] [--http_proxy value] [--select_proxy_mode value] \\\n    [--socks5 value] [--socks5_password value] [--socks5_username value] [--version] [-w value] prog [prog-args]\n -b, --blackip-file=value\n                The IP/CIDR in black-ip-file will connect direct\n     --enable-debug-log\n                enable debug log\n -h, --help     Display this help and exit\n     --http_proxy=value\n                http proxy address, e.g.: 127.0.0.1:8080\n -n, --not-ignore-local\n                Connecting to local is not changed by default, this option\n                will redirect it to SOCKS5\n     --select_proxy_mode=value\n                Set the mode for select a proxy [auto | random |\n                only_http_proxy | only_socks5 | direct] [auto]\n     --socks5=value\n                SOCKS5 address [127.0.0.1:1080]\n     --socks5_password=value\n                SOCKS5 password\n     --socks5_username=value\n                SOCKS5 username\n -u, --username=value\n                Run command as USERNAME handling setuid and/or setgid\n     --version  Print the mgraftcp version information\n -w, --whiteip-file=value\n                Only redirect the connect that destination IP/CIDR in the\n                white-ip-file to SOCKS5\n```\n\n### Configuration\n\n`graftcp-local` and `mgraftcp` look for config file in following order:\n\n1. File provided as a `--config` argument\n2. `$(the path of the executeable)/graftcp-local.conf`\n3. `$(XDG_CONFIG_HOME)/graftcp-local/graftcp-local.conf`, If `$XDG_CONFIG_HOME` is either not set or empty, a default equal to `$HOME/.config` should be used.\n4. `/etc/graftcp-local/graftcp-local.conf`\n\n## Demo\n\nAssume you are running the SOCKS5 proxy with the default IP address: \"localhost:1080\". Start the `graftcp-local` first:\n\n```sh\nlocal/graftcp-local\n```\n\nInstall the Go package from golang.org (now is blocked by the GFW) via `graftcp`:\n\n```sh\n./graftcp go get -v golang.org/x/net/proxy\n```\n\nOpen `Chromium` / `Chrome` / `Firefox` browser via `graftcp`, then all the requests from this browser will redirect to the SOCKS5 proxy:\n\n```sh\n./graftcp chromium-browser\n```\n\nLaunch `Bash` / `Zsh` / `Fish` via `graftcp`, then all the TCP traffic generated by the command in this shell will redirect to the SOCKS5 proxy:\n\n```console\n% ./graftcp bash --rcfile <(echo 'PS1=\"(graftcp) $PS1\"')\n(graftcp) $ wget https://www.google.com\n```\n\n![demo](demo.gif)\n\n<a id=\"principles\"></a>\n\n## How does it work?\n\nTo achieve the goal of redirecting the TCP connection of a app to another destination address and the app itself is not aware of it, these conditions are probably required:\n\n- `fork(2)` a new process and trace it using `ptrace(2)`, `execve(2)` to run the app. Every `connect(2)` syscall will be intercepted, then get the destination address argument and send it to `graftcp-local` via `pipe`.\n- Modify the destination address argument of `connect(2)` to `graftcp-local`'s address, and restart the stopped syscall. After the syscall returns successfully, the app thought it has connected the original destination address, but in fact it is connected to the `graftcp-local`, so we named it \"graft\".\n- `graftcp-local` establish a SOCKS5 connection based on the information of app's original destination address, then redirect the requests from the app to the SOCKS5 proxy.\n\nSomeone may have a question here: since we can modify the arguments of a syscall, modify the app's `write(2)` / `send(2)` buf argument, attach the original destination information to the `write` buffer, isn't it simpler? The answer is that cannot be done. Because attach data to the buffer of the tracked child process, it may case a buffer overflow, causing crash or overwrite other data.\nIn addition, as the [`execve(2)` will detach and unmap all shared memory](http://man7.org/linux/man-pages/man2/execve.2.html), we also cannot add extra data to the `write` buffer of traced app by sharing memory, so we send the original destination address via `pipe`.\n\nThe simple sketch is as follows:\n\n```\n+---------------+             +---------+         +--------+         +------+\n|   graftcp     |  dest host  |         |         |        |         |      |\n|   (tracer)    +---PIPE----->|         |         |        |         |      |\n|      ^        |  info       |         |         |        |         |      |\n|      | ptrace |             |         |         |        |         |      |\n|      v        |             |         |         |        |         |      |\n|  +---------+  |             |         |         |        |         |      |\n|  |         |  |  connect    |         | connect |        | connect |      |\n|  |         +--------------->| graftcp +-------->| SOCKS5 +-------->| dest |\n|  |         |  |             | -local  |         |  or    |         | host |\n|  |  app    |  |  req        |         |  req    | HTTP   |  req    |      |\n|  |(tracee) +--------------->|         +-------->| proxy  +-------->|      |\n|  |         |  |             |         |         |        |         |      |\n|  |         |  |  resp       |         |  resp   |        |  resp   |      |\n|  |         |<---------------+         |<--------+        |<--------+      |\n|  +---------+  |             |         |         |        |         |      |\n+---------------+             +---------+         +--------+         +------+\n```\n\n## FAQ and Tips\n\n### What are some ways to redirect TCP connections?\n\nThe main ones are: global way, environment variables setting way, and programs selection way.\n\nGlobal way: e.g., use `iptables` + `RedSocks` to convert the system's traffic that match certain rules into SOCKS5 traffic. The pros is that it is globally effective; the cons is that all traffic that satisfies the rule is redirected, and the scope of influence is large.\n\nEnvironment variable setting: some programs will read the proxy-related environment variables to determine whether to convert their own traffic to the corresponding proxy protocol traffic, such as `curl` will [read `http_proxy`, `ftp_proxy`, `all_proxy` Environment variables and decide which proxy traffic to convert based on the request URL scheme](https://curl.haxx.se/libcurl/c/CURLOPT_PROXY.html). This way is effective only if the program itself implements the traffic conversion function, so\nit is very limited.\n\nprograms selection way: this way can only perform redirection for specified programs, such as `tsocks` or `proxychains`. As mentioned earlier, they were using the `LD_PRELOAD` hijacking dynamic library function, and the default static link compiled program such as `Go` is invalid. `graftcp` improves this by being able to redirect TCP connections from any program.\n\n### Will `graftcp` redirect the connection to the SOCKS5 proxy if the target address is localhost?\n\nNo. By default, `graftcp` ignore the connections to localhost. If you want to redirect all addresses, you can use the `-n` option. If you want to ignore more addresses, you can add them to the blacklist IP file; if you want to redirect only certain IP addresses, you can add them to the whitelist IP file. Use `graftcp --help` to get more information.\n\n### I am suffering a DNS cache poisoning attack, does `graftcp` handle DNS requests?\n\nNo. `graftcp` currently only handles TCP connections. [`dnscrypt-proxy`](https://github.com/jedisct1/dnscrypt-proxy) or `ChinaDNS` may help you.\n\n### Running `[m]graftcp yay` or `graftcp sudo ...` results in an error and exit, how to solve this?\n\nThe `yay` command on Arch Linux actually invokes `sudo pacman ...`, which requires the tracer to have root privileges to obtain permissions to trace the child process. You can start `[m]graftcp` with `sudo` and specify the current user to run the subsequent command: `sudo [m]graftcp sudo -u $USER yay`, or `sudo [m]graftcp -u $USER sudo ...`.\n\nIf you feel the above command too long, you can copy a `[m]graftcp` binary with CAP_SYS_PTRACE and CAP_SYS_ADMIN capabilities:\n\n```sh\ncp mgraftcp sumg\nsudo setcap 'cap_sys_ptrace,cap_sys_admin+ep' ./sumg\n# ./sumg yay\n# ./sumg sudo ...\n```\n\n### The `clone(2)`'s argument has a flag `CLONE_UNTRACED` to avoid being traced, how does `graftcp` do forced tracing?\n\n`graftcp` will intercept the `clone(2)` syscall, and clearing the `CLONE_UNTRACED` flag, so the tracked child process could not escape the fate of being tracked. In addition, this `CLONE_UNTRACED` flag is intended for the kernel, and user space program should not set it.\n\nLinux provides a way to limit the `ptrace(2)`: set the value of [`/proc/sys/kernel/yama/ptrace_scope`](https://www.kernel.org/doc/Documentation/security/Yama.txt). If `ptrace(2)` is invalid, check if the default value has been modified.\n\n### Does it support macOS?\n\nNo. macOS's [`ptrace(2)`](http://polarhome.com/service/man/?qf=ptrace&af=0&sf=0&of=Darwin&tf=2) is useless. ~~However, it can also be achieved theoretically by referring to `DTrace`~~. See [issue 12](https://github.com/hmgle/graftcp/issues/12).\n\n## TODO\n\n- [x] ARM/Linux Support\n- [x] i386/Linux Support\n- [ ] UDP Support\n\n## Acknowledgements and References\n\n- [maybe](https://github.com/p-e-w/maybe), [proxychains](http://proxychains.sourceforge.net/) and [proxychains-ng](https://github.com/rofl0r/proxychains-ng) for inspiration\n- [strace](https://strace.io/)\n- [uthash](https://troydhanson.github.io/uthash/)\n- [service](https://github.com/kardianos/service)\n- [dlog](https://github.com/jedisct1/dlog)\n\n## LICENSE\n\nCopyright &copy; 2016, 2018-2024 Hmgle <dustgle@gmail.com>\n\nReleased under the terms of the [GNU General Public License, version 3](https://www.gnu.org/licenses/gpl-3.0.html)\n"
        },
        {
          "name": "README.zh-CN.md",
          "type": "blob",
          "size": 13.16015625,
          "content": "# graftcp\n\n[English](./README.md) | **简体中文**\n\n## 简介\n\n`graftcp` 可以把任何指定程序（应用程序、脚本、shell 等）的 TCP 连接重定向到 SOCKS5 或 HTTP 代理。\n\n对比 [tsocks](https://linux.die.net/man/8/tsocks)、[proxychains](http://proxychains.sourceforge.net/) 或 [proxychains-ng](https://github.com/rofl0r/proxychains-ng)，`graftcp` 并不使用 [LD_PRELOAD 技巧](https://stackoverflow.com/questions/426230/what-is-the-ld-preload-trick)来劫持共享库的 connect()、getaddrinfo()\n等系列函数达到重定向目的，这种方法只对使用动态链接编译的程序有效，对于静态链接编译出来的程序，例如[默认选项编译的 Go 程序](https://golang.org/cmd/link/)，[proxychains-ng 就无效了](https://github.com/rofl0r/proxychains-ng/issues/199)。`graftcp` 使用 [`ptrace(2)`](https://en.wikipedia.org/wiki/Ptrace) 系统调用跟踪或修改任意指定程序的 connect 信息，对任何程序都有效。[工作原理](#principles)后面将会解释。\n\n## 安装\n\n### 源码安装\n\n`graftcp` 在 Linux 系统内运行。 `graftcp-local` 使用 Go 编写, [Go](https://golang.org/doc/install) 环境是必需的。\n\n```\ngit clone https://github.com/hmgle/graftcp.git\ncd graftcp\nmake\n```\n\nmake 执行完后，即可运行 `graftcp-local/graftcp-local` 和 `./graftcp`。可以把它们都安装进系统：\n\n```sh\nsudo make install\n# Install systemed unit\nsudo make install_systemd\n# Activate systemd service\nsudo make enable_systemd\n```\n\n### 二进制包安装\n\n在 <https://github.com/hmgle/graftcp/releases> 下载 [Debian](https://github.com/hmgle/graftcp/releases/download/v0.4.0/graftcp_0.4.0-1_amd64.deb) 或者 [Arch Linux](https://github.com/hmgle/graftcp/releases/download/v0.4.0/graftcp-0.4.0-1-x86_64.pkg.tar.zst) 安装包并安装。\n\n## 用法参数\n\n`graftcp-local`:\n\n```console\n$ graftcp-local/graftcp-local -h\nUsage of graftcp-local/graftcp-local:\n  -config string\n        Path to the configuration file\n  -http_proxy string\n        http proxy address, e.g.: 127.0.0.1:8080\n  -listen string\n        Listen address (default \":2233\")\n  -logfile string\n        Write logs to file\n  -loglevel value\n        Log level (0-6) (default 1)\n  -pipepath string\n        Pipe path for graftcp to send address info (default \"/tmp/graftcplocal.fifo\")\n  -select_proxy_mode string\n        Set the mode for select a proxy [auto | random | only_http_proxy | only_socks5] (default \"auto\")\n  -service string\n        Control the system service: [\"start\" \"stop\" \"restart\" \"install\" \"uninstall\"]\n  -socks5 string\n        SOCKS5 address (default \"127.0.0.1:1080\")\n  -syslog\n        Send logs to the local system logger (Eventlog on Windows, syslog on Unix)\n```\n\n`graftcp`:\n\n```console\n$ graftcp -h\nUsage: graftcp [options] prog [prog-args]\n\nOptions:\n  -c --conf-file=<config-file-path>\n                    Specify configuration file.\n                    Default: $XDG_CONFIG_HOME/graftcp/graftcp.conf\n  -a --local-addr=<graftcp-local-IP-addr>\n                    graftcp-local's IP address. Default: localhost\n  -p --local-port=<graftcp-local-port>\n                    Which port is graftcp-local listening? Default: 2233\n  -f --local-fifo=<fifo-path>\n                    Path of fifo to communicate with graftcp-local.\n                    Default: /tmp/graftcplocal.fifo\n  -b --blackip-file=<black-ip-file-path>\n                    The IP/CIDR in black-ip-file will connect direct\n  -w --whiteip-file=<white-ip-file-path>\n                    Only redirect the connect that destination IP/CIDR in\n                    the white-ip-file to SOCKS5\n  -n --not-ignore-local\n                    Connecting to local is not changed by default, this\n                    option will redirect it to SOCKS5\n  -u --user=<username>\n                    Run command as USERNAME handling setuid and/or setgid\n  -V --version\n                    Show version\n  -h --help\n                    Display this help and exit\n```\n\n`mgraftcp`: 是 `graftcp-local` 和 `graftcp` 的结合(`mgraftcp` = `graftcp-local` + `graftcp`)，可以用 `mgraftcp` 来代替 `graftcp` 而无需启动 `graftcp-local`。\n\n```console\nUsage: mgraftcp [-hn] [-b value] [--enable-debug-log] [--http_proxy value] [--select_proxy_mode value] \\\n    [--socks5 value] [--socks5_password value] [--socks5_username value] [--version] [-w value] prog [prog-args]\n -b, --blackip-file=value\n                The IP/CIDR in black-ip-file will connect direct\n     --enable-debug-log\n                enable debug log\n -h, --help     Display this help and exit\n     --http_proxy=value\n                http proxy address, e.g.: 127.0.0.1:8080\n -n, --not-ignore-local\n                Connecting to local is not changed by default, this option\n                will redirect it to SOCKS5\n     --select_proxy_mode=value\n                Set the mode for select a proxy [auto | random |\n                only_http_proxy | only_socks5 | direct] [auto]\n     --socks5=value\n                SOCKS5 address [127.0.0.1:1080]\n     --socks5_password=value\n                SOCKS5 password\n     --socks5_username=value\n                SOCKS5 username\n -u, --username=value\n                Run command as USERNAME handling setuid and/or setgid\n     --version  Print the mgraftcp version information\n -w, --whiteip-file=value\n                Only redirect the connect that destination IP/CIDR in the\n                white-ip-file to SOCKS5\n```\n\n### 配置文件\n\n`graftcp-local` 和 `mgraftcp` 按下面的顺序查找配置文件：\n\n1. 参数 `--config` 指定的文件\n2. `$(可执行文件所在的目录)/graftcp-local.conf`\n3. `$(XDG_CONFIG_HOME)/graftcp-local/graftcp-local.conf`, $XDG_CONFIG_HOME 缺省为 $HOME/.config.\n4. `/etc/graftcp-local/graftcp-local.conf`\n\n## 使用示例\n\n假设你正在运行默认地址 \"localhost:1080\" 的 SOCKS5 代理，首先启动 `graftcp-local`：\n\n```sh\ngraftcp-local/graftcp-local\n```\n\n通过 `graftcp` 安装来自 golang.org 的 Go 包:\n\n```sh\n./graftcp go get -v golang.org/x/net/proxy\n```\n\n通过 `graftcp` 打开 `Chromium` / `Chrome` / `Firefox` 浏览器，网页的所有请求都会重定向到 SOCKS5 代理：\n\n```sh\n./graftcp chromium-browser\n```\n\n通过 `graftcp` 启动 `Bash` / `Zsh` / `Fish`，在这个新开的 shell 里面执行的任何新命令产生的 TCP 连接都会重定向到 SOCKS5 代理：\n\n```console\n% ./graftcp bash --rcfile <(echo 'PS1=\"(graftcp) $PS1\"')\n(graftcp) $ wget https://www.google.com\n```\n\n![demo](demo.gif)\n\n<a id=\"principles\"></a>\n\n## 工作原理\n\n要达到重定向一个 app 发起的的 TCP 连接到其他目标地址并且该 app 本身对此毫无感知的目的，大概需要这些条件：\n\n- `fork(2)` 一个新进程，通过 `execve(2)` 启动该 app，并使用 `ptrace(2)` 进行跟踪，在 app 执行每一次 TCP 连接前，捕获并拦截这次 `connect(2)` 系统调用，获取目标地址的参数，并通过管道传给 `graftcp-local`。\n- 修改这次 `connect(2)` 系统调用的目标地址参数为 `graftcp-local` 的地址，然后恢复执行被中断的系统调用。返回成功后，这个程序以为自己连的是原始的地址，但其实连的是 `graftcp-local` 的地址。这个就叫“移花接木”。\n- `graftcp-local` 根据连接信息和目标地址信息，与 SOCKS5 proxy 建立连接，把 app 的请求的数据重定向到 SOCKS5 proxy。\n\n这里可能有个疑问：既然可以修改任何系统调用的参数，那么通过修改 app 的 `write(2)` / `send(2)` 的参数，直接往 `buffer` 里面附加原始目标地址信息给 `graftcp-local` 不是更简单吗？答案是这无法做到。如果直接往运行在子进程的被跟踪程序的 `buffer` 添加信息，可能会造成缓冲区溢出，造成程序崩溃或者覆盖了其他数据。\n另外，[`execve(2)` 会分离所有的共享内存](http://man7.org/linux/man-pages/man2/execve.2.html)，所以也不能通过共享内存的方式让被跟踪的 app 的 `write` buffer 携带更多的数据，因此这里采用管道方式给 `graftcp-local` 传递原始的目标地址信息。\n\n简单的流程如下：\n\n```\n+---------------+             +---------+         +--------+         +------+\n|   graftcp     |  dest host  |         |         |        |         |      |\n|   (tracer)    +---PIPE----->|         |         |        |         |      |\n|      ^        |  info       |         |         |        |         |      |\n|      | ptrace |             |         |         |        |         |      |\n|      v        |             |         |         |        |         |      |\n|  +---------+  |             |         |         |        |         |      |\n|  |         |  |  connect    |         | connect |        | connect |      |\n|  |         +--------------->| graftcp +-------->| SOCKS5 +-------->| dest |\n|  |         |  |             | -local  |         |  or    |         | host |\n|  |  app    |  |  req        |         |  req    | HTTP   |  req    |      |\n|  |(tracee) +--------------->|         +-------->| proxy  +-------->|      |\n|  |         |  |             |         |         |        |         |      |\n|  |         |  |  resp       |         |  resp   |        |  resp   |      |\n|  |         |<---------------+         |<--------+        |<--------+      |\n|  +---------+  |             |         |         |        |         |      |\n+---------------+             +---------+         +--------+         +------+\n```\n\n## 常见问题解答及技巧\n\n### 有哪些重定向 TCP 连接的方式？\n\n主要有： 全局式、设置环境变量式和仅针对程序（或进程）式。\n\n全局式：比如使用 `iptables` + `RedSocks` 可以把系统符合一定规则的流量转换为 SOCKS5 流量。这种方式的优点是全局有效；缺点是所有满足该规则的流量都被重定向了，影响范围较大。\n\n设置环境变量方式：一些程序启动时会读取 proxy 相关的环境变量来决定是否将自己的数据转换为对应代理协议的流量，比如 `curl` 会[读取 `http_proxy`, `ftp_proxy`, `all_proxy` 环境变量并根据请求 scheme 来决定转换为哪种代理流量](https://curl.haxx.se/libcurl/c/CURLOPT_PROXY.html)。这种方法只有程序本身实现了转换的功能才有效，局限性较大。\n\n仅针对程序方式： 这种方式可以仅针对特定的程序执行重定向，比如 `tsocks` 或 `proxychains`。如前面提到，它们之前都是使用 `LD_PRELOAD` 劫持动态库方式实现，对 `Go` 之类默认静态链接编译的程序就无效了。`graftcp` 改进了这一点，能够重定向任何程序的 TCP 连接。\n\n### 如果应用程序连接的目标地址是本机，使用 `graftcp` 会把该连接重定向到 SOCKS5 代理吗？\n\n不会。默认会忽略目标地址为本地的连接，如果想重定向所有地址的话，可以使用 `-n`选项。如果想忽略更多的地址，可以把它们加入黑名单 IP 文件；如果想仅重定向某些 IP 地址，可以把这些地址加入白名单 IP 文件。使用 `graftcp --help` 获取设置参数。\n\n### 我的 DNS 请求受到污染，`graftcp` 会处理 DNS 请求吗？\n\n不会。`graftcp` 目前仅处理 TCP 连接。建议使用 `dnscrypt-proxy` 或 `ChinaDNS` 等方式解决 DNS 污染问题。\n\n### 运行 `[m]graftcp yay` 或者 `graftcp sudo ...` 报错并退出，该如何解决？\n\nArch Linux 的 `yay` 实际也会调用 `sudo pacman ...`，这需要 tracer 具备 root 特权才能获取到跟踪子进程的权限。可以用 sudo 来启动 `[m]graftcp`，并指定当前用户运行后续命令：`sudo [m]graftcp sudo -u $USER yay`，或者 `sudo [m]graftcp -u $USER sudo ...`。\n如何觉得上面命令太长，可以复制一个具有 CAP_SYS_PTRACE 和 CAP_SYS_ADMIN capabilities 的 [m]graftcp 副本：\n\n```sh\ncp mgraftcp sumg\nsudo setcap 'cap_sys_ptrace,cap_sys_admin+ep' ./sumg\n# ./sumg yay\n# ./sumg sudo ...\n```\n\n### `clone(2)` 参数有个叫 `CLONE_UNTRACED` 的标志位，可以避免让父进程跟踪到自己，`graftcp` 是如何做到强制跟踪的？\n\n`graftcp` 在子进程调用 `clone(2)` 之前会把它拦截，清除这个 `CLONE_UNTRACED` 标志位，所以被跟踪的子进程最终还是难逃被跟踪的命运。另外，这个 `CLONE_UNTRACED` 标志位本意是给内核使用的，普通程序不应该去设置它。\n\nLinux 提供了一种限制被 `ptrace(2)` 跟踪的方法：设置 [`/proc/sys/kernel/yama/ptrace_scope`](https://www.kernel.org/doc/Documentation/security/Yama.txt) 的值，若 `ptrace(2)` 失效，请检查该值是否被修改过。\n\n### 支持 macOS 吗？\n\n不。macOS 的 [`ptrace(2)`](http://polarhome.com/service/man/?qf=ptrace&af=0&sf=0&of=Darwin&tf=2) 是个半残品。~~不过理论上参考 DTrace 那一套也能实现~~，见[issue 12](https://github.com/hmgle/graftcp/issues/12)。\n\n## TODO\n\n- [x] ARM/Linux 支持\n- [x] i386/Linux 支持\n- [ ] UDP 支持\n\n## 感谢及参考\n\n- [maybe](https://github.com/p-e-w/maybe), [proxychains](http://proxychains.sourceforge.net/) and [proxychains-ng](https://github.com/rofl0r/proxychains-ng) for inspiration\n- [strace](https://strace.io/)\n- [uthash](https://troydhanson.github.io/uthash/)\n- [service](https://github.com/kardianos/service)\n- [dlog](https://github.com/jedisct1/dlog)\n\n## License\n\nCopyright &copy; 2016, 2018-2024 Hmgle <dustgle@gmail.com>\n\n根据 [GPLv3 许可](https://www.gnu.org/licenses/gpl-3.0.html)发布。\n"
        },
        {
          "name": "cidr-trie.c",
          "type": "blob",
          "size": 5.9150390625,
          "content": "/*\n * graftcp\n * Copyright (C) 2023 Hmgle <dustgle@gmail.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n\n/* Inspired by nginx: ngx_radix_tree.c */\n#include <stdlib.h>\n#include <string.h>\n#include <arpa/inet.h>\n\n#include \"cidr-trie.h\"\n\nstatic trie_node_t *node_callc()\n{\n\ttrie_node_t *node = calloc(1, sizeof(*node));\n\tnode->left = NULL;\n\tnode->right = NULL;\n\tnode->value = TRIE_NO_VALUE;\n\treturn node;\n}\n\ntrie_t *trie_new()\n{\n\ttrie_t *trie = calloc(1, sizeof(*trie));\n\ttrie->root = node_callc();\n\treturn trie;\n}\n\nvoid trie32_insert(trie_t *trie, struct cidr_s *cidr, int value)\n{\n\ttrie_node_t *node, *next;\n\tuint32_t bit = 0x80000000;\n\n\tnext = trie->root;\n\tfor (node = trie->root; bit & cidr->mask; bit >>= 1) {\n\t\tnext = cidr->addr & bit ? node->right : node->left;\n\t\tif (next == NULL)\n\t\t\tbreak;\n\t\tnode = next;\n\t}\n\tif (next) {\n\t\tnode->value = value;\n\t\treturn;\n\t}\n\tfor (; bit & cidr->mask; bit >>= 1) {\n\t\tnext = node_callc();\n\t\tif (cidr->addr & bit)\n\t\t\tnode->right = next;\n\t\telse\n\t\t\tnode->left = next;\n\t\tnode = next;\n\t}\n\tnode->value = value;\n}\n\n#define IPV4_MAX_TEXT_LENGTH 15\n#define IPV6_MAX_TEXT_LENGTH 45\n\nstatic int parse_cidr(const char *line, struct cidr_s *cidr)\n{\n\tchar *p;\n\tint shift;\n\tchar ipbuf[IPV4_MAX_TEXT_LENGTH + 1];\n\n\tp = strchr(line, '/');\n\tif (p) {\n\t\tif (p - line > IPV4_MAX_TEXT_LENGTH)\n\t\t\treturn -1;\n\t\tstrncpy(ipbuf, line, p - line);\n\t\tipbuf[p - line] = '\\0';\n\t\tcidr->addr = ntohl(inet_addr(ipbuf));\n\n\t\tshift = strtol(++p, NULL, 0);\n\t\tif (shift < 0 || shift > 32)\n\t\t\treturn -1;\n\t\tcidr->mask = shift ? (uint32_t)(0xffffffff << (32 - shift)) : 0;\n\t} else {\n\t\tcidr->mask = 0xffffffff;\n\t\tcidr->addr = ntohl(inet_addr(line));\n\t}\n\treturn 0;\n}\n\nint trie32_insert_str(trie_t *trie, const char *ipstr, int value)\n{\n\tstruct cidr_s cidr;\n\n\tif (parse_cidr(ipstr, &cidr))\n\t\treturn -1;\n\ttrie32_insert(trie, &cidr, value);\n\treturn 0;\n}\n\nint trie32_lookup(trie_t *trie, uint32_t ip)\n{\n\tuint32_t bit = 0x80000000;\n\ttrie_node_t *node;\n\n\tfor (node = trie->root; node;) {\n\t\tif (node->value != TRIE_NO_VALUE)\n\t\t\treturn node->value;\n\t\tnode = ip & bit ? node->right : node->left;\n\t\tbit >>= 1;\n\t}\n\treturn TRIE_NO_VALUE;\n}\n\nvoid trie128_insert(trie_t *trie, struct cidr6_s *cidr6, int value)\n{\n\ttrie_node_t *node, *next;\n\tuint8_t bit = 0x80;\n\tuint i = 0;\n\n\tnext = trie->root;\n\tfor (node = trie->root; bit & cidr6->mask.s6_addr[i];) {\n\t\tnext = bit & cidr6->addr.s6_addr[i] ? node->right : node->left;\n\t\tif (next == NULL)\n\t\t\tbreak;\n\t\tbit >>= 1;\n\t\tnode = next;\n\t\tif (bit == 0) {\n\t\t\tif (++i == 16)\n\t\t\t\tbreak;\n\t\t\tbit = 0x80;\n\t\t}\n\t}\n\tif (next) {\n\t\tnode->value = value;\n\t\treturn;\n\t}\n\tfor (; bit & cidr6->mask.s6_addr[i];) {\n\t\tnext = node_callc();\n\t\tif (bit & cidr6->addr.s6_addr[i])\n\t\t\tnode->right = next;\n\t\telse\n\t\t\tnode->left = next;\n\t\tbit >>= 1;\n\t\tnode = next;\n\t\tif (bit == 0) {\n\t\t\tif (++i == 16)\n\t\t\t\tbreak;\n\t\t\tbit = 0x80;\n\t\t}\n\t}\n\tnode->value = value;\n}\n\nstatic int parse_cidr6(const char *line, struct cidr6_s *cidr6)\n{\n        char *p;\n        int shift;\n        char ip6buf[IPV6_MAX_TEXT_LENGTH + 1];\n        uint8_t *mask;\n        uint i, s;\n\n        p = strchr(line, '/');\n        if (p) {\n                if (p - line > IPV6_MAX_TEXT_LENGTH)\n                        return -1;\n                strncpy(ip6buf, line, p - line);\n                ip6buf[p - line] = '\\0';\n                if (inet_pton(AF_INET6, ip6buf, &cidr6->addr) != 1)\n                        return -1;\n\n                shift = strtol(++p, NULL, 0);\n                if (shift < 0 || shift > 128)\n                        return -1;\n                if (shift) {\n                        mask = cidr6->mask.s6_addr;\n                        for (i = 0; i < 16; i++) {\n                                s = (shift > 8) ? 8 : shift;\n                                shift -= s;\n                                mask[i] = (u_char) (0xffu << (8 - s));\n                        }\n                } else {\n                        memset(cidr6->mask.s6_addr, 0, 16);\n                }\n        } else {\n                if (inet_pton(AF_INET6, line, &cidr6->addr) != 1)\n                        return -1;\n                memset(cidr6->mask.s6_addr, 0xff, 16);\n        }\n        return 0;\n}\n\nint trie128_insert_str(trie_t *trie, const char *ipstr, int value)\n{\n\tstruct cidr6_s cidr6;\n\n\tif (parse_cidr6(ipstr, &cidr6))\n\t\treturn -1;\n\ttrie128_insert(trie, &cidr6, value);\n\treturn 0;\n}\n\nint trie128_lookup(trie_t *trie, uint8_t *ip)\n{\n\ttrie_node_t *node;\n\tuint8_t bit = 0x80;\n\tuint i = 0;\n\n\tfor (node = trie->root; node;) {\n\t\tif (node->value != TRIE_NO_VALUE)\n\t\t\treturn node->value;\n\t\tnode = bit & ip[i] ? node->right : node->left;\n\t\tbit >>= 1;\n\t\tif (bit == 0) {\n\t\t\ti++;\n\t\t\tbit = 0x80;\n\t\t}\n\t}\n\treturn TRIE_NO_VALUE;\n}\n\ncidr_trie_t *cidr_trie_new()\n{\n\tcidr_trie_t *cidr_trie = calloc(1, sizeof(*cidr_trie));\n\tcidr_trie->cidr4_trie = NULL;\n\tcidr_trie->cidr6_trie = NULL;\n\treturn cidr_trie;\n}\n\nvoid cidr_trie_insert_str(cidr_trie_t *cidr_trie, const char *ipstr, int value)\n{\n\tchar *p;\n\tp = strchr(ipstr, ':');\n\tif (p) {\n\t\tif (cidr_trie->cidr6_trie == NULL)\n\t\t\tcidr_trie->cidr6_trie = trie_new();\n\t\ttrie128_insert_str(cidr_trie->cidr6_trie, ipstr, value);\n\t} else {\n\t\tif (cidr_trie->cidr4_trie == NULL)\n\t\t\tcidr_trie->cidr4_trie = trie_new();\n\t\ttrie32_insert_str(cidr_trie->cidr4_trie, ipstr, value);\n\t}\n}\n\nint cidr4_trie_lookup(cidr_trie_t *cidr_trie, uint32_t ip)\n{\n\tif (cidr_trie->cidr4_trie == NULL)\n\t\treturn TRIE_NO_VALUE;\n\treturn trie32_lookup(cidr_trie->cidr4_trie, ip);\n}\n\nint cidr6_trie_lookup(cidr_trie_t *cidr_trie, uint8_t *ip)\n{\n\tif (cidr_trie->cidr6_trie == NULL)\n\t\treturn TRIE_NO_VALUE;\n\treturn trie128_lookup(cidr_trie->cidr6_trie, ip);\n}\n"
        },
        {
          "name": "cidr-trie.h",
          "type": "blob",
          "size": 1.66796875,
          "content": "/*\n * graftcp\n * Copyright (C) 2023 Hmgle <dustgle@gmail.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n\n/* Inspired by nginx: ngx_radix_tree.h */\n#ifndef CIDR_TRIE_H\n#define CIDR_TRIE_H\n\n#include <netinet/in.h>\n#include <stdint.h>\n\n#define TRIE_NO_VALUE 0\n\ntypedef struct trie_node_s trie_node_t;\n\nstruct trie_node_s {\n\ttrie_node_t *left;\n\ttrie_node_t *right;\n\tint value;\n};\n\ntypedef struct {\n\ttrie_node_t *root;\n} trie_t;\n\nstruct cidr_s {\n\tuint32_t addr;\n\tuint32_t mask;\n};\n\nstruct cidr6_s {\n\tstruct in6_addr addr;\n\tstruct in6_addr mask;\n};\n\ntrie_t *trie_new();\nvoid trie32_insert(trie_t *trie, struct cidr_s *cidr, int value);\nint trie32_insert_str(trie_t *trie, const char *ipstr, int value);\nint trie32_lookup(trie_t *trie, uint32_t ip);\nvoid trie128_insert(trie_t *trie, struct cidr6_s *cidr6, int value);\nint trie128_insert_str(trie_t *trie, const char *ipstr, int value);\nint trie128_lookup(trie_t *trie, uint8_t *ip);\n\ntypedef struct {\n\ttrie_t *cidr4_trie;\n\ttrie_t *cidr6_trie;\n} cidr_trie_t;\n\ncidr_trie_t *cidr_trie_new();\nvoid cidr_trie_insert_str(cidr_trie_t *cidr_trie, const char *ipstr, int value);\nint cidr4_trie_lookup(cidr_trie_t *cidr_trie, uint32_t ip);\nint cidr6_trie_lookup(cidr_trie_t *cidr_trie, uint8_t *ip);\n\n#endif\n"
        },
        {
          "name": "conf.c",
          "type": "blob",
          "size": 7.158203125,
          "content": "/*\n * graftcp\n * Copyright (C) 2021, 2023, 2024 Hmgle <dustgle@gmail.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <unistd.h>\n#include <sys/stat.h>\n\n#include \"conf.h\"\n\nstatic int config_local_addr(const char *, const char *, struct graftcp_conf *);\nstatic int config_local_port(const char *, const char *, struct graftcp_conf *);\nstatic int config_pipe_path(const char *, const char *, struct graftcp_conf *);\nstatic int config_blackip_file_path(const char *, const char *, struct graftcp_conf *);\nstatic int config_whiteip_file_path(const char *, const char *, struct graftcp_conf *);\nstatic int config_ignore_local(const char *, const char *, struct graftcp_conf *);\n\nstatic const struct graftcp_config_t config[] = {\n\t{ \"local_addr\",        config_local_addr        },\n\t{ \"local_port\",        config_local_port        },\n\t{ \"pipepath\",          config_pipe_path         },\n\t{ \"blackip_file_path\", config_blackip_file_path },\n\t{ \"whiteip_file_path\", config_whiteip_file_path },\n\t{ \"ignore_local\",      config_ignore_local      },\n};\n\nstatic int config_local_addr(const char *key, const char *value, struct graftcp_conf *conf)\n{\n\tif (strlen(value) <= 0)\n\t\treturn -1;\n\tconf->local_addr = strdup(value);\n\tif (!conf->local_addr)\n\t\treturn -1;\n\treturn 0;\n}\n\nstatic int config_local_port(const char *key, const char *value, struct graftcp_conf *conf)\n{\n\tint port;\n\n\tport = atoi(value);\n\tif (port <= 0)\n\t\treturn -1;\n\tconf->local_port = malloc(sizeof(*conf->local_port));\n\t*conf->local_port = port;\n\treturn 0;\n}\n\nstatic int config_pipe_path(const char *key, const char *value, struct graftcp_conf *conf)\n{\n\tconf->pipe_path = strdup(value);\n\tif (!conf->pipe_path)\n\t\treturn -1;\n\treturn 0;\n}\n\nstatic int config_blackip_file_path(const char *key, const char *value, struct graftcp_conf *conf)\n{\n\tconf->blackip_file_path = strdup(value);\n\tif (!conf->blackip_file_path)\n\t\treturn -1;\n\treturn 0;\n}\n\nstatic int config_whiteip_file_path(const char *key, const char *value, struct graftcp_conf *conf)\n{\n\tconf->whiteip_file_path = strdup(value);\n\tif (!conf->whiteip_file_path)\n\t\treturn -1;\n\treturn 0;\n}\n\nstatic int config_ignore_local(const char *key, const char *value, struct graftcp_conf *conf)\n{\n\tconf->ignore_local = malloc(sizeof(*conf->ignore_local));\n\tif (strcmp(value, \"true\") || strcmp(value, \"1\"))\n\t\t*conf->ignore_local = true;\n\telse\n\t\t*conf->ignore_local = false;\n\treturn 0;\n}\n\nstatic const size_t config_size = sizeof(config) / sizeof(struct graftcp_config_t);\n\nstatic const struct graftcp_config_t *graftcp_getconfig(const char *key)\n{\n\tint i;\n\n#define MAX(a,b) (((a)>(b))?(a):(b))\n\tfor (i = 0; i < config_size; i++) {\n\t\tif (!strncmp(config[i].name, key, MAX(strlen(config[i].name), strlen(key))))\n\t\t\treturn &config[i];\n\t}\n#undef MAX\n\treturn NULL;\n}\n\nstatic int is_line_empty(char *line)\n{\n\tint i;\n\tsize_t len = strlen(line);\n\n\tfor (i = 0; i < len; i++)\n\t\tif (!isspace(line[i]))\n\t\t\treturn 0;\n\treturn 1;\n}\n\nstatic int left_space(char *buf, size_t len)\n{\n\tint i;\n\tfor (i = 0; i < len; i++)\n\t\tif (buf[i] != ' ' && buf[i] != '\\t')\n\t\t\treturn i;\n\treturn i;\n}\n\nstatic int right_space(char *buf, size_t len)\n{\n\tint i;\n\tfor (i = len - 1; i >= 0; i--)\n\t\tif (buf[i] != ' ' && buf[i] != '\\t' && buf[i] != '\\0' &&\n\t\t    buf[i] != '\\n' && buf[i] != '\\r')\n\t\t\treturn i + 1;\n\treturn 0;\n}\n\nstatic int parse_line(char *buf, struct graftcp_conf *conf)\n{\n\tchar *key;\n\tchar *value;\n\tchar *fs;\n\n\tif (is_line_empty(buf))\n\t\treturn 0;\n\tbuf += left_space(buf, strlen(buf));\n\tif (buf[0] == '#')\n\t\treturn 0;\n\n\tfs = strstr(buf, \"=\");\n\tif (!fs)\n\t\treturn -1;\n\n\t*fs = '\\0';\n\tvalue = fs + 1;\n\n\tkey = buf;\n\tkey[right_space(key, strlen(key))] = '\\0';\n\n\tvalue += left_space(value, strlen(value));\n\tvalue[right_space(value, strlen(value))] = '\\0';\n\n\tconst struct graftcp_config_t *config = graftcp_getconfig(key);\n\tif (!config) {\n\t\tfprintf(stderr, \"unknown key %s\", key);\n\t\treturn -1;\n\t}\n\n\treturn config->cb(key, value, conf);\n}\n\nint conf_init(struct graftcp_conf *conf)\n{\n\tconf->local_addr = NULL;\n\tconf->local_port = NULL;\n\tconf->pipe_path = NULL;\n\tconf->blackip_file_path = NULL;\n\tconf->whiteip_file_path = NULL;\n\tconf->ignore_local = NULL;\n\tconf->username = NULL;\n\treturn 0;\n}\n\nvoid conf_free(struct graftcp_conf *conf)\n{\n\tif (conf->local_addr) {\n\t\tfree(conf->local_addr);\n\t\tconf->local_addr = NULL;\n\t}\n\tif (conf->local_port) {\n\t\tfree(conf->local_port);\n\t\tconf->local_port = NULL;\n\t}\n\tif (conf->pipe_path) {\n\t\tfree(conf->pipe_path);\n\t\tconf->pipe_path = NULL;\n\t}\n\tif (conf->blackip_file_path) {\n\t\tfree(conf->blackip_file_path);\n\t\tconf->blackip_file_path = NULL;\n\t}\n\tif (conf->whiteip_file_path) {\n\t\tfree(conf->whiteip_file_path);\n\t\tconf->whiteip_file_path = NULL;\n\t}\n\tif (conf->ignore_local) {\n\t\tfree(conf->ignore_local);\n\t\tconf->ignore_local = NULL;\n\t}\n\tif (conf->username) {\n\t\tfree(conf->username);\n\t\tconf->username = NULL;\n\t}\n}\n\nstatic char *xdg_config_path_dup(void)\n{\n\tconst char *home, *config_home;\n\tchar *path = NULL;\n\tconst char *dotconf = \".config\";\n\tconst char *subdir = \"graftcp\";\n\tconst char *confname = \"graftcp.conf\";\n\n\tconfig_home = getenv(\"XDG_CONFIG_HOME\");\n\tif (config_home && *config_home) {\n\t\tsize_t size = 3 + strlen(config_home) + strlen(subdir) + strlen(confname);\n\t\tpath = calloc(size, sizeof(char));\n\t\tsnprintf(path, size, \"%s/%s/%s\", config_home, subdir, confname);\n\t\treturn path;\n\t}\n\n\thome = getenv(\"HOME\");\n\tif (home) {\n\t\tsize_t size = 4 + strlen(home) + strlen(dotconf) + strlen(subdir) + strlen(confname);\n\t\tpath = calloc(size, sizeof(char));\n\t\tsnprintf(path, size, \"%s/%s/%s/%s\", home, dotconf, subdir, confname);\n\t\treturn path;\n\t}\n\n\treturn NULL;\n}\n\nint conf_read(const char *path, struct graftcp_conf *conf)\n{\n\tFILE *f;\n\t__defer_free char *xdg_config = NULL;\n\t__defer_free char *line = NULL;\n\tsize_t len = 0;\n\tint err = 0;\n\n\tif (path == NULL) {\n\t\txdg_config = xdg_config_path_dup();\n\t\tif (xdg_config == NULL)\n\t\t\treturn 0;\n\n\t\tstruct stat st;\n\t\tif (stat(xdg_config, &st))\n\t\t\treturn 0;\n\t\tif (S_ISDIR(st.st_mode)) {\n\t\t\tfprintf(stderr, \"%s is a directory not a config file\\n\", xdg_config);\n\t\t\treturn -1;\n\t\t}\n\t\tpath = xdg_config;\n\t}\n\n\tf = fopen(path, \"r\");\n\tif (!f) {\n\t\tfprintf(stderr, \"Failed to open %s\\n\", path);\n\t\treturn -1;\n\t}\n\n\twhile (getline(&line, &len, f) != -1) {\n\t\terr = parse_line(line, conf);\n\t\tif (err) {\n\t\t\tfprintf(stderr, \"Failed to parse config: %s\\n\", line);\n\t\t\tbreak;\n\t\t}\n\t}\n\tfclose(f);\n\treturn err;\n}\n\nvoid conf_override(struct graftcp_conf *w, const struct graftcp_conf *r)\n{\n\tif (r->local_addr)\n\t\tw->local_addr = r->local_addr;\n\tif (r->local_port)\n\t\tw->local_port = r->local_port;\n\tif (r->pipe_path)\n\t\tw->pipe_path = r->pipe_path;\n\tif (r->blackip_file_path)\n\t\tw->blackip_file_path = r->blackip_file_path;\n\tif (r->whiteip_file_path)\n\t\tw->whiteip_file_path = r->whiteip_file_path;\n\tif (r->ignore_local)\n\t\tw->ignore_local = r->ignore_local;\n\tif (r->username)\n\t\tw->username = r->username;\n}\n"
        },
        {
          "name": "conf.h",
          "type": "blob",
          "size": 1.48828125,
          "content": "/*\n * graftcp\n * Copyright (C) 2021, 2024 Hmgle <dustgle@gmail.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n#ifndef CONF_H\n#define CONF_H\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <stdint.h>\n\nstruct graftcp_conf {\n\tchar *local_addr;\n\tuint16_t *local_port;\n\tchar *pipe_path;\n\tchar *blackip_file_path;\n\tchar *whiteip_file_path;\n\tbool *ignore_local;\n\tchar *username;\n};\n\ntypedef int (*config_cb)(const char *, const char *, struct graftcp_conf *);\n\nstruct graftcp_config_t {\n\tchar *name;\n\tconfig_cb cb;\n};\n\nint conf_init(struct graftcp_conf *conf);\nvoid conf_free(struct graftcp_conf *conf);\nint conf_read(const char *path, struct graftcp_conf *conf);\nvoid conf_override(struct graftcp_conf *w, const struct graftcp_conf *r);\n\nstatic inline void __free_func(char **p)\n{\n\tif (*p) {\n\t\tfree(*p);\n\t\t*p = NULL;\n\t}\n}\n\nstatic inline void __conf_free_func(struct graftcp_conf *pconf)\n{\n\tif (pconf)\n\t\tconf_free(pconf);\n}\n\n#define __defer_free __attribute__((cleanup(__free_func)))\n\n#define __defer_conf_free __attribute__((cleanup(__conf_free_func)))\n\n#endif\n"
        },
        {
          "name": "demo.gif",
          "type": "blob",
          "size": 1599.6865234375,
          "content": null
        },
        {
          "name": "example-blacklist-ip.txt",
          "type": "blob",
          "size": 0.056640625,
          "content": "111.111.123.222\n192.168.1.0/24\n10.1.1.0/24\n2402:31c0::/32\n"
        },
        {
          "name": "example-graftcp.conf",
          "type": "blob",
          "size": 0.560546875,
          "content": "## graftcp-local's IP address. Default: localhost\n# local_addr = localhost\n\n## Which port is graftcp-local listening? Default: 2233\n# local_port = 2233\n\n## Path of fifo to communicate with graftcp-local.\n##   Default: /tmp/graftcplocal.fifo\n# pipepath = /tmp/graftcplocal.fifo\n\n## The IP/CIDR in black-ip-file will connect direct\n# blackip_file_path =\n\n\n## Only redirect the connect that destination IP/CIDR in\n## the white-ip-file to SOCKS5\n# whiteip_file_path =\n\n## Connecting to local is not changed by default, this\n##   option will redirect it to SOCKS5\n# ignore_local\n"
        },
        {
          "name": "example-whitelist-ip.txt",
          "type": "blob",
          "size": 0.0419921875,
          "content": "74.126.11.3\n74.125.130.0/24\n2402:4a00::/32\n"
        },
        {
          "name": "graftcp.c",
          "type": "blob",
          "size": 18.236328125,
          "content": "/*\n * graftcp\n * Copyright (C) 2016, 2018-2024 Hmgle <dustgle@gmail.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n#include <netinet/in.h>\n#include <stdio.h>\n#include <getopt.h>\n#include <stdlib.h>\n#include <pwd.h>\n#include <grp.h>\n#include <linux/version.h>\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)\n#define ENABLE_SECCOMP_BPF\n#endif\n#ifdef ENABLE_SECCOMP_BPF\n#include <linux/seccomp.h>\n#include <linux/filter.h>\n#include <sys/prctl.h>\n#endif /* ifdef ENABLE_SECCOMP_BPF */\n\n#include \"graftcp.h\"\n#include \"conf.h\"\n#include \"cidr-trie.h\"\n\n#ifndef VERSION\n#define VERSION \"v0.7\"\n#endif\n\nstruct sockaddr_in PROXY_SA;\nstruct sockaddr_in6 PROXY_SA6;\n\nchar *DEFAULT_LOCAL_ADDR         = \"127.0.0.1\";\nchar *LOCAL_DEFAULT_ADDR         = \"0.0.0.0\";\nuint16_t DEFAULT_LOCAL_PORT      = 2233;\nchar *DEFAULT_LOCAL_PIPE_PAHT    = \"/tmp/graftcplocal.fifo\";\nbool DEFAULT_IGNORE_LOCAL        = true;\nint LOCAL_PIPE_FD;\n\ncidr_trie_t *BLACKLIST_IP     = NULL;\ncidr_trie_t *WHITELACKLIST_IP = NULL;\n\n\nstatic uid_t run_uid;\nstatic gid_t run_gid;\nstatic char *run_home;\n\nstatic int exit_code = 0;\n\nstatic void load_ip_file(char *path, cidr_trie_t **trie)\n{\n\tFILE *f;\n\tchar *line = NULL;\n\tsize_t len = 0;\n\tssize_t read;\n\n\tf = fopen(path, \"r\");\n\tif (f == NULL) {\n\t\tperror(\"fopen\");\n\t\texit(1);\n\t}\n\twhile ((read = getline(&line, &len, f)) != -1) {\n\t\t/* 7 is the shortest ip: (x.x.x.x) */\n\t\tif (read < 7)\n\t\t\tcontinue;\n\t\tline[read - 1] = '\\0';\n\t\tif (*trie == NULL)\n\t\t\t*trie = cidr_trie_new();\n\t\tcidr_trie_insert_str(*trie, line, 1);\n\t\tline = NULL;\n\t}\n\tfclose(f);\n}\n\nstatic void load_blackip_file(char *path)\n{\n\tload_ip_file(path, &BLACKLIST_IP);\n}\n\nstatic void load_whiteip_file(char *path)\n{\n\tload_ip_file(path, &WHITELACKLIST_IP);\n}\n\nstatic bool ip4_is_ignore(uint32_t ip)\n{\n\tif (BLACKLIST_IP) {\n\t\tif (cidr4_trie_lookup(BLACKLIST_IP, ntohl(ip)))\n\t\t\treturn true;\n\t}\n\tif (WHITELACKLIST_IP) {\n\t\tif (!cidr4_trie_lookup(WHITELACKLIST_IP, ntohl(ip)))\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nstatic bool ip6_is_ignore(uint8_t *ip)\n{\n\tif (BLACKLIST_IP) {\n\t\tif (cidr6_trie_lookup(BLACKLIST_IP, ip))\n\t\t\treturn true;\n\t}\n\tif (WHITELACKLIST_IP) {\n\t\tif (!cidr6_trie_lookup(WHITELACKLIST_IP, ip))\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n#ifdef ENABLE_SECCOMP_BPF\n#ifndef ARRAY_SIZE\n#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))\n#endif\nstatic void install_seccomp()\n{\n\t/*\n\t * syscalls to trace, sort by frequency in desc order for most cases:\n\t *   close(...),\n\t *   socket([AF_INET | AF_INET6], SOCK_STREAM, ...),\n\t *   connect(...),\n\t *   clone([CLONE_UNTRACED], ...) (only for x86_64)\n\t */\n\tstruct sock_filter filter[] = {\n\t\tBPF_STMT(BPF_LD | BPF_W | BPF_ABS,\n\t\t\t\t(offsetof(struct seccomp_data, nr))),\n#if defined(__x86_64__)\n\t\tBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, SYS_close, 10, 0),\n\t\tBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, SYS_socket, 0, 5),\n\t\tBPF_STMT(BPF_LD | BPF_W | BPF_ABS,\n\t\t\t\toffsetof(struct seccomp_data, args[0])),\n\t\tBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, AF_INET, 1, 0),\n\t\tBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, AF_INET6, 0, 7),\n\t\tBPF_STMT(BPF_LD | BPF_W | BPF_ABS,\n\t\t\t\toffsetof(struct seccomp_data, args[1])),\n\t\tBPF_JUMP(BPF_JMP | BPF_JSET | BPF_K, SOCK_STREAM, 4, 5),\n\t\tBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, SYS_connect, 3, 0),\n\t\tBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, SYS_clone, 0, 3),\n\t\tBPF_STMT(BPF_LD | BPF_W | BPF_ABS,\n\t\t\t\toffsetof(struct seccomp_data, args[0])),\n\t\tBPF_JUMP(BPF_JMP | BPF_JSET | BPF_K, CLONE_UNTRACED, 0, 1),\n#else\n\t\tBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, SYS_close, 7, 0),\n\t\tBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, SYS_socket, 0, 5),\n\t\tBPF_STMT(BPF_LD | BPF_W | BPF_ABS,\n\t\t\t\toffsetof(struct seccomp_data, args[0])),\n\t\tBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, AF_INET, 1, 0),\n\t\tBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, AF_INET6, 0, 4),\n\t\tBPF_STMT(BPF_LD | BPF_W | BPF_ABS,\n\t\t\t\toffsetof(struct seccomp_data, args[1])),\n\t\tBPF_JUMP(BPF_JMP | BPF_JSET | BPF_K, SOCK_STREAM, 1, 2),\n\t\tBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, SYS_connect, 0, 1),\n#endif\n\t\tBPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_TRACE),\n\t\tBPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),\n\t};\n\tstruct sock_fprog prog = {\n\t\t.len = (unsigned short)ARRAY_SIZE(filter),\n\t\t.filter = filter,\n\t};\n\tif (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog) == 0)\n\t\treturn;\n\tif (errno == EACCES) {\n\t\t/*\n\t\t * https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt\n\t\t *  Filters installed for the seccomp mode 2 sandbox persist across\n\t\t *  execve and can change the behavior of newly-executed programs.\n\t\t *  Unprivileged users are therefore only allowed to install such filters\n\t\t *  if no_new_privs is set.\n\t\t */\n\t\tif (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) {\n\t\t\tperror(\"prctl(PR_SET_NO_NEW_PRIVS)\");\n\t\t\texit(errno);\n\t\t}\n\t\tif (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog)) {\n\t\t\tperror(\"prctl(PR_SET_SECCOMP)\");\n\t\t\texit(errno);\n\t\t}\n\t\treturn;\n\t}\n\tperror(\"prctl(PR_SET_SECCOMP)\");\n\texit(errno);\n}\n#endif\n\nvoid socket_pre_handle(struct proc_info *pinfp)\n{\n\tstruct socket_info *si = calloc(1, sizeof(*si));\n\tsi->domain = get_syscall_arg(pinfp->pid, 0);\n\tsi->type = get_syscall_arg(pinfp->pid, 1);\n\n#ifndef ENABLE_SECCOMP_BPF\n\t/* If not TCP socket, ignore */\n\tif ((si->type & SOCK_STREAM) < 1\n\t     || (si->domain != AF_INET && si->domain != AF_INET6)) {\n\t\tfree(si);\n\t\treturn;\n\t}\n#endif\n\tsi->fd = -1;\n\tsi->magic_fd = ((uint64_t)MAGIC_FD << 31) + pinfp->pid;\n\tadd_socket_info(si);\n}\n\nvoid connect_pre_handle(struct proc_info *pinfp)\n{\n\tint socket_fd = get_syscall_arg(pinfp->pid, 0);\n\tstruct socket_info *si = find_socket_info((socket_fd << 31) + pinfp->pid);\n\tif (si == NULL)\n\t\treturn;\n\n\tlong addr = get_syscall_arg(pinfp->pid, 1);\n\tstruct sockaddr_in dest_sa;\n\tstruct sockaddr_in6 dest_sa6;\n\tunsigned short dest_ip_port;\n\tstruct in_addr dest_ip_addr;\n\tchar *dest_ip_addr_str;\n\tchar dest_str[INET6_ADDRSTRLEN];\n\n\tgetdata(pinfp->pid, addr, (char *)&dest_sa, sizeof(dest_sa));\n\n\tif (dest_sa.sin_family == AF_INET) { /* IPv4 */\n\t\tdest_ip_port = SOCKPORT(dest_sa);\n\t\tdest_ip_addr.s_addr = SOCKADDR(dest_sa);\n\t\tdest_ip_addr_str = inet_ntoa(dest_ip_addr);\n\t\tif (ip4_is_ignore(dest_ip_addr.s_addr))\n\t\t\treturn;\n\t} else if (dest_sa.sin_family == AF_INET6) { /* IPv6 */\n\t\tgetdata(pinfp->pid, addr, (char *)&dest_sa6, sizeof(dest_sa6));\n\t\tdest_ip_port = SOCKPORT6(dest_sa6);\n\t\tif (ip6_is_ignore(dest_sa6.sin6_addr.s6_addr))\n\t\t\treturn;\n\t\tinet_ntop(AF_INET6, &dest_sa6.sin6_addr, dest_str, INET6_ADDRSTRLEN);\n\t\tdest_ip_addr_str = dest_str;\n\t} else {\n\t\treturn;\n\t}\n\n\tif (dest_sa.sin_family == AF_INET) { /* IPv4 */\n\t\tmemcpy(si->dest_addr, &dest_sa, sizeof(dest_sa));\n\t\tsi->dest_addr_len = sizeof(dest_sa);\n\t\tputdata(pinfp->pid, addr, (char *)&PROXY_SA, sizeof(PROXY_SA));\n\t} else { /* IPv6 */\n\t\tmemcpy(si->dest_addr, &dest_sa6, sizeof(dest_sa6));\n\t\tsi->dest_addr_len = sizeof(dest_sa6);\n\t\tputdata(pinfp->pid, addr, (char *)&PROXY_SA6, sizeof(PROXY_SA6));\n\t}\n\n\tchar buf[1024] = { 0 };\n\tstrcpy(buf, dest_ip_addr_str);\n\tstrcat(buf, \":\");\n\tsprintf(&buf[strlen(buf)], \"%d:%d\\n\", ntohs(dest_ip_port), pinfp->pid);\n\tif (write(LOCAL_PIPE_FD, buf, strlen(buf)) <= 0) {\n\t\tif (errno)\n\t\t\tperror(\"write\");\n\t\tfprintf(stderr, \"write failed!\\n\");\n\t}\n\tgettimeofday(&si->conn_ti, NULL);\n}\n\nvoid close_pre_handle(struct proc_info *pinfp)\n{\n\tint fd = get_syscall_arg(pinfp->pid, 0);\n\tstruct socket_info *si = find_socket_info((fd << 31) + pinfp->pid);\n\tstruct timeval now;\n\tunsigned long delta_ms;\n\n\tif (si) {\n\t\tgettimeofday(&now, NULL);\n\t\tdelta_ms = (now.tv_sec - si->conn_ti.tv_sec) * 1000 +\n\t\t\t(now.tv_usec - si->conn_ti.tv_usec) / 1000;\n\t\tif (delta_ms < MIN_CLOSE_MSEC)\n\t\t\tusleep((MIN_CLOSE_MSEC - delta_ms) * 1000);\n\n\t\tdel_socket_info(si);\n\t\tfree(si);\n\t}\n}\n\nvoid clone_pre_handle(struct proc_info *pinfp)\n{\n#if defined(__x86_64__)\n\tlong flags = get_syscall_arg(pinfp->pid, 0);\n\n\tflags &= ~CLONE_UNTRACED;\n\tptrace(PTRACE_POKEUSER, pinfp->pid, sizeof(long) * RDI, flags);\n#elif defined(__arm__) || defined(__arm64__) || defined(__aarch64__)\n\t/* Do not know how to handle this */\n#endif\n}\n\nvoid socket_exiting_handle(struct proc_info *pinfp, int fd)\n{\n\tstruct socket_info *si;\n\n\tsi = find_socket_info(((uint64_t)MAGIC_FD << 31) + pinfp->pid);\n\tif (si == NULL)\n\t\treturn;\n\tsi->fd = fd;\n\tdel_socket_info(si);\n\tsi->magic_fd = (fd << 31) + pinfp->pid;\n\tadd_socket_info(si);\n}\n\nvoid connect_exiting_handle(struct proc_info *pinfp)\n{\n\tint socket_fd = get_syscall_arg(pinfp->pid, 0);\n\tstruct socket_info *si = find_socket_info((socket_fd << 31) + pinfp->pid);\n\tif (si == NULL || si->dest_addr_len == 0)\n\t\treturn;\n\tlong addr = get_syscall_arg(pinfp->pid, 1);\n\tputdata(pinfp->pid, addr, si->dest_addr, si->dest_addr_len);\n}\n\nvoid do_child(struct graftcp_conf *conf, int argc, char **argv)\n{\n\tchar *args[argc + 1];\n\tint i;\n\tpid_t pid;\n\n\tfor (i = 0; i < argc; i++)\n\t\targs[i] = argv[i];\n\targs[argc] = NULL;\n\tptrace(PTRACE_TRACEME, 0, NULL, NULL);\n\tif (conf->username) {\n\t\tif (initgroups(conf->username, run_gid) < 0) {\n\t\t\tperror(\"initgroups\");\n\t\t\texit(errno);\n\t\t}\n\n\t\tif (setregid(run_gid, run_gid) < 0) {\n\t\t\tperror(\"setregid\");\n\t\t\texit(errno);\n\t\t}\n\t\tif (setreuid(run_uid, run_uid) < 0) {\n\t\t\tperror(\"setreuid\");\n\t\t\texit(errno);\n\t\t}\n\t\tif (setenv(\"HOME\", run_home, 1) < 0)\n\t\t\tperror(\"setenv\");\n\t}\n\n\tpid = getpid();\n\t/*\n\t * Induce a ptrace stop. Tracer (our parent)\n\t * will resume us with PTRACE_SYSCALL and display\n\t * the immediately following execve syscall.\n\t */\n\tkill(pid, SIGSTOP);\n\tif (execvp(args[0], args) < 0) {\n\t\tfprintf(stderr, \"graftcp %s: %s\\n\", args[0], strerror(errno));\n\t\texit(errno);\n\t}\n}\n\nvoid init(struct graftcp_conf *conf, int argc, char **argv)\n{\n\tpid_t child;\n\tstruct proc_info *pi;\n\n\tchild = fork();\n\tif (child < 0) {\n\t\tperror(\"fork\");\n\t\texit(errno);\n\t} else if (child == 0) {\n#ifdef ENABLE_SECCOMP_BPF\n\t\tinstall_seccomp();\n#endif\n\t\tdo_child(conf, argc, argv);\n\t}\n\tpi = alloc_proc_info(child);\n\tpi->flags |= FLAG_STARTUP;\n}\n\nint trace_syscall_entering(struct proc_info *pinfp)\n{\n\tpinfp->csn = get_syscall_number(pinfp->pid);\n\tswitch (pinfp->csn) {\n\tcase SYS_socket:\n\t\tsocket_pre_handle(pinfp);\n\t\tbreak;\n\tcase SYS_connect:\n\t\tconnect_pre_handle(pinfp);\n\t\tbreak;\n\tcase SYS_close:\n\t\tclose_pre_handle(pinfp);\n\t\tbreak;\n\tcase SYS_clone:\n\t\tclone_pre_handle(pinfp);\n\t\tbreak;\n\t}\n\tpinfp->flags |= FLAG_INSYSCALL;\n\treturn 0;\n}\n\nint trace_syscall_exiting(struct proc_info *pinfp)\n{\n\tint ret = 0;\n\tint child_ret;\n\n\tif (pinfp->csn == SYS_exit || pinfp->csn == SYS_exit_group) {\n\t\tret = -1;\n\t\tgoto end;\n\t}\n\n\tswitch (pinfp->csn) {\n\tcase SYS_socket:\n\t\tchild_ret = get_retval(pinfp->pid);\n\t\tif (errno) {\n\t\t\t/* No such process, child exited */\n\t\t\tif (errno == ESRCH)\n\t\t\t\texit(0);\n\t\t\tperror(\"ptrace\");\n\t\t\texit(errno);\n\t\t}\n\t\tsocket_exiting_handle(pinfp, child_ret);\n\t\tbreak;\n\tcase SYS_connect:\n\t\tconnect_exiting_handle(pinfp);\n\t\tbreak;\n\t}\nend:\n\tpinfp->flags &= ~FLAG_INSYSCALL;\n\treturn ret;\n}\n\nint trace_syscall(struct proc_info *pinfp)\n{\n\treturn exiting(pinfp) ? trace_syscall_exiting(pinfp) :\n\t    trace_syscall_entering(pinfp);\n}\n\nint do_trace()\n{\n\tpid_t child;\n\tint status;\n\tint stopped;\n\tint sig;\n\tunsigned event;\n\tstruct proc_info *pinfp;\n\n\tfor (;;) {\n\t\tchild = wait(&status);\n\t\tif (child < 0)\n\t\t\treturn 0;\n\t\tpinfp = find_proc_info(child);\n\t\tif (!pinfp)\n\t\t\tpinfp = alloc_proc_info(child);\n\n\t\tif (pinfp->flags & FLAG_STARTUP) {\n\t\t\tpinfp->flags &= ~FLAG_STARTUP;\n\n\t\t\tif (ptrace(PTRACE_SETOPTIONS, child, 0,\n\t\t\t\t   PTRACE_O_TRACECLONE | PTRACE_O_TRACEEXEC |\n#ifdef ENABLE_SECCOMP_BPF\n\t\t\t\t   PTRACE_O_TRACESECCOMP |\n#endif\n\t\t\t\t   PTRACE_O_TRACEFORK | PTRACE_O_TRACEVFORK) <\n\t\t\t    0) {\n\t\t\t\tperror(\"ptrace\");\n\t\t\t\texit(errno);\n\t\t\t}\n\t\t}\n\t\tevent = ((unsigned)status >> 16);\n#ifdef ENABLE_SECCOMP_BPF\n\t\tif (event != 0 && event != PTRACE_EVENT_SECCOMP) {\n\t\t\tsig = 0;\n\t\t\tgoto end;\n\t\t}\n#else\n\t\tif (event != 0) {\n\t\t\tsig = 0;\n\t\t\tgoto end;\n\t\t}\n#endif\n\t\tif (WIFSIGNALED(status) || WIFEXITED(status)\n\t\t    || !WIFSTOPPED(status)) {\n\t\t\texit_code = WEXITSTATUS(status);\n\t\t\t/* TODO free pinfp */\n\t\t\tcontinue;\n\t\t}\n\t\tsig = WSTOPSIG(status);\n\t\tif (sig == SIGSTOP) {\n\t\t\tsig = 0;\n\t\t\tgoto end;\n\t\t}\n\t\tif (sig != SIGTRAP) {\n\t\t\tsiginfo_t si;\n\t\t\tstopped =\n\t\t\t    (ptrace(PTRACE_GETSIGINFO, child, 0, (long)&si) <\n\t\t\t     0);\n\t\t\tif (!stopped) {\n\t\t\t\t/* It's signal-delivery-stop. Inject the signal */\n\t\t\t\tgoto end;\n\t\t\t}\n\t\t}\n\t\tif (trace_syscall(pinfp) < 0)\n\t\t\tcontinue;\n\t\tsig = 0;\nend:\n\t\t/*\n\t\t * Since the value returned by a successful PTRACE_PEEK*  request  may  be\n\t\t * -1,  the  caller  must  clear  errno before the call of ptrace(2).\n\t\t */\n\t\terrno = 0;\n#ifdef ENABLE_SECCOMP_BPF\n\t\tif (ptrace(exiting(pinfp) ? PTRACE_SYSCALL : PTRACE_CONT,\n\t\t\t\t\tpinfp->pid, 0, sig) < 0) {\n\t\t\tif (errno == ESRCH)\n\t\t\t\tcontinue;\n\t\t\treturn -1;\n\t\t}\n#else\n\t\tif (ptrace(PTRACE_SYSCALL, pinfp->pid, 0, sig) < 0) {\n\t\t\tif (errno == ESRCH)\n\t\t\t\tcontinue;\n\t\t\treturn -1;\n\t\t}\n#endif\n\t}\n\treturn 0;\n}\n\nstatic void usage(char **argv)\n{\n\tfprintf(stderr, \"Usage: %s [options] prog [prog-args]\\n\\n\"\n\t\t\"Options:\\n\"\n\t\t\"  -c --conf-file=<config-file-path>\\n\"\n\t\t\"                    Specify configuration file.\\n\"\n\t\t\"                    Default: $XDG_CONFIG_HOME/graftcp/graftcp.conf\\n\"\n\t\t\"  -a --local-addr=<graftcp-local-IP-addr>\\n\"\n\t\t\"                    graftcp-local's IP address. Default: localhost\\n\"\n\t\t\"  -p --local-port=<graftcp-local-port>\\n\"\n\t\t\"                    Which port is graftcp-local listening? Default: 2233\\n\"\n\t\t\"  -f --local-fifo=<fifo-path>\\n\"\n\t\t\"                    Path of fifo to communicate with graftcp-local.\\n\"\n\t\t\"                    Default: /tmp/graftcplocal.fifo\\n\"\n\t\t\"  -b --blackip-file=<black-ip-file-path>\\n\"\n\t\t\"                    The IP in black-ip-file will connect direct\\n\"\n\t\t\"  -w --whiteip-file=<white-ip-file-path>\\n\"\n\t\t\"                    Only redirect the connect that destination ip in the\\n\"\n\t\t\"                    white-ip-file to SOCKS5\\n\"\n\t\t\"  -n --not-ignore-local\\n\"\n\t\t\"                    Connecting to local is not changed by default, this\\n\"\n\t\t\"                    option will redirect it to SOCKS5\\n\"\n\t\t\"  -u --user=<username>\\n\"\n\t\t\"                    Run command as USERNAME handling setuid and/or setgid\\n\"\n\t\t\"  -V --version\\n\"\n\t\t\"                    Show version\\n\"\n\t\t\"  -h --help\\n\"\n\t\t\"                    Display this help and exit\\n\"\n\t\t\"\\n\", argv[0]);\n}\n\nint client_main(int argc, char **argv)\n{\n\tint opt, index;\n\tstruct option long_opts[] = {\n\t\t{\"help\", no_argument, 0, 'h'},\n\t\t{\"version\", no_argument, 0, 'V'},\n\t\t{\"conf-file\", required_argument, 0, 'c'},\n\t\t{\"local-addr\", required_argument, 0, 'a'},\n\t\t{\"local-port\", required_argument, 0, 'p'},\n\t\t{\"local-fifo\", required_argument, 0, 'f'},\n\t\t{\"blackip-file\", required_argument, 0, 'b'},\n\t\t{\"whiteip-file\", required_argument, 0, 'w'},\n\t\t{\"user\", required_argument, 0, 'u'},\n\t\t{\"not-ignore-local\", no_argument, 0, 'n'},\n\t\t{0, 0, 0, 0}\n\t};\n\n\tstruct graftcp_conf conf = {\n\t\t.local_addr             = DEFAULT_LOCAL_ADDR,\n\t\t.local_port             = &DEFAULT_LOCAL_PORT,\n\t\t.pipe_path              = DEFAULT_LOCAL_PIPE_PAHT,\n\t\t.blackip_file_path      = NULL,\n\t\t.whiteip_file_path      = NULL,\n\t\t.ignore_local           = &DEFAULT_IGNORE_LOCAL,\n\t\t.username               = NULL,\n\t};\n\n\t__defer_free char *conf_file_path = NULL;\n\t__defer_conf_free struct graftcp_conf file_conf;\n\t__defer_conf_free struct graftcp_conf cmd_conf;\n\tconf_init(&file_conf);\n\tconf_init(&cmd_conf);\n\n\twhile ((opt = getopt_long(argc, argv, \"+Vha:p:f:b:w:c:u:n\", long_opts,\n\t\t\t    \t&index)) != -1) {\n\t\tswitch (opt) {\n\t\tcase 'a':\n\t\t\tcmd_conf.local_addr = strdup(optarg);\n\t\t\tif (cmd_conf.local_addr == NULL) {\n\t\t\t\tperror(\"strdup\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'p':\n\t\t\tcmd_conf.local_port = malloc(sizeof(*cmd_conf.local_port));\n\t\t\t*cmd_conf.local_port = atoi(optarg);\n\t\t\tbreak;\n\t\tcase 'f':\n\t\t\tcmd_conf.pipe_path = strdup(optarg);\n\t\t\tif (cmd_conf.pipe_path == NULL) {\n\t\t\t\tperror(\"strdup\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'b':\n\t\t\tcmd_conf.blackip_file_path = strdup(optarg);\n\t\t\tif (cmd_conf.blackip_file_path == NULL) {\n\t\t\t\tperror(\"strdup\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'w':\n\t\t\tcmd_conf.whiteip_file_path = strdup(optarg);\n\t\t\tif (cmd_conf.whiteip_file_path == NULL) {\n\t\t\t\tperror(\"strdup\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tcmd_conf.ignore_local = malloc(sizeof(*cmd_conf.ignore_local));\n\t\t\t*cmd_conf.ignore_local = false;\n\t\t\tbreak;\n\t\tcase 'c':\n\t\t\tconf_file_path = strdup(optarg);\n\t\t\tif (conf_file_path == NULL) {\n\t\t\t\tperror(\"strdup\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'u':\n\t\t\tcmd_conf.username = strdup(optarg);\n\t\t\tif (cmd_conf.username == NULL) {\n\t\t\t\tperror(\"strdup\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'V':\n\t\t\tfprintf(stderr, \"graftcp %s\\n\", VERSION);\n\t\t\texit(0);\n\t\tcase 0:\n\t\tcase 'h':\n\t\tdefault:\n\t\t\tusage(argv);\n\t\t\texit(0);\n\t\t}\n\t}\n\tconf_read(conf_file_path, &file_conf);\n\tconf_override(&conf, &file_conf);\n\tconf_override(&conf, &cmd_conf);\n\n\tif (conf.blackip_file_path)\n\t\tload_blackip_file(conf.blackip_file_path);\n\tif (conf.whiteip_file_path)\n\t\tload_whiteip_file(conf.whiteip_file_path);\n\tif (*conf.ignore_local) {\n\t\tif (BLACKLIST_IP == NULL)\n\t\t\tBLACKLIST_IP = cidr_trie_new();\n\t\tcidr_trie_insert_str(BLACKLIST_IP, conf.local_addr, 1);\n\t\tcidr_trie_insert_str(BLACKLIST_IP, LOCAL_DEFAULT_ADDR, 1);\n\t}\n\tPROXY_SA.sin_family = AF_INET;\n\tPROXY_SA.sin_port = htons(*conf.local_port);\n\tif (inet_aton(conf.local_addr, &PROXY_SA.sin_addr) == 0) {\n\t\tstruct hostent *he;\n\n\t\the = gethostbyname(conf.local_addr);\n\t\tif (he == NULL) {\n\t\t\tperror(\"gethostbyname\");\n\t\t\texit(errno);\n\t\t}\n\t\tmemcpy(&PROXY_SA.sin_addr, he->h_addr, sizeof(struct in_addr));\n\t}\n\tPROXY_SA6.sin6_family = AF_INET6;\n\tPROXY_SA6.sin6_port = htons(*conf.local_port);\n\tif (inet_pton(AF_INET6, \"::1\", &PROXY_SA6.sin6_addr) < 0 ) {\n\t\tperror(\"inet_pton\");\n\t\texit(errno);\n\t}\n\n\tLOCAL_PIPE_FD = open(conf.pipe_path, O_WRONLY);\n\tif (LOCAL_PIPE_FD < 0) {\n\t\tperror(\"open fifo\");\n\t\tfprintf(stderr, \"It seems that graftcp-local is not running, should start graftcp-local first.\\n\");\n\t\texit(errno);\n\t}\n\n\tif (conf.username) {\n\t\tstruct passwd *pent;\n\n\t\tif (geteuid() != 0) {\n\t\t\tfprintf(stderr, \"You must be root to use the -u option\\n\");\n\t\t\texit(1);\n\t\t}\n\t\tpent = getpwnam(conf.username);\n\t\tif (pent == NULL) {\n\t\t\tfprintf(stderr, \"Cannot find user '%s'\\n\", conf.username);\n\t\t\texit(1);\n\t\t}\n\t\trun_gid = pent->pw_gid;\n\t\trun_uid = pent->pw_uid;\n\t\trun_home = strdup(pent->pw_dir);\n\t\tif (run_home == NULL) {\n\t\t\tperror(\"strdup\");\n\t\t\texit(1);\n\t\t}\n\t}\n\n\tinit(&conf, argc - optind, argv + optind);\n\tif (do_trace() < 0)\n\t\treturn -1;\n\treturn exit_code;\n}\n"
        },
        {
          "name": "graftcp.h",
          "type": "blob",
          "size": 3.0908203125,
          "content": "/*\n * graftcp\n * Copyright (C) 2018, 2020 Hmgle <dustgle@gmail.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n#ifndef GRAFTCP_H\n#define GRAFTCP_H\n\n#include <stdbool.h>\n#include <unistd.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <errno.h>\n#include <sys/ptrace.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <sys/time.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#include <string.h>\n#include <sys/wait.h>\n#include <sys/user.h>\n#if defined(__x86_64__)\n#include <sys/reg.h>\n#include <linux/sched.h>\n#elif defined(__arm__)\n#include <asm/ptrace.h>\n#elif defined(__arm64__) || defined(__aarch64__)\n#include <asm/ptrace.h>\n#include <linux/elf.h>\n#endif\n#include <sys/syscall.h>\n#include <fcntl.h>\n#include <assert.h>\n\n#include \"uthash.h\"\n\n#if defined(__arm__) || defined(__arm64__) || defined(__aarch64__)\n\n#ifndef SYS_socket\n#define SYS_socket __NR_socket\n#endif\n\n#ifndef SYS_connect\n#define SYS_connect __NR_connect\n#endif\n\n#ifndef SYS_close\n#define SYS_close __NR_close\n#endif\n\n#ifndef SYS_clone\n#define SYS_clone __NR_clone\n#endif\n\n#ifndef SYS_exit\n#define SYS_exit __NR_exit\n#endif\n\n#ifndef SYS_exit_group\n#define SYS_exit_group __NR_exit_group\n#endif\n\n#endif\n\n#define satosin(x)  ((struct sockaddr_in *) &(x))\n#define SOCKADDR(x) (satosin(x)->sin_addr.s_addr)\n#define SOCKPORT(x) (satosin(x)->sin_port)\n\n#define satosin6(x)  ((struct sockaddr_in6 *) &(x))\n#define SOCKPORT6(x) (satosin6(x)->sin6_port)\n\n#define MIN_CLOSE_MSEC 500\n\nstruct socket_info {\n\tpid_t pid;\n\tint fd;\n\tuint64_t magic_fd;\n\tint domain;\n\tint type;\n\tsize_t dest_addr_len;\n\tchar dest_addr[sizeof(struct sockaddr_in6)];\n\tstruct timeval conn_ti;\n\tUT_hash_handle hh;\t/* makes this structure hashable */\n};\n\n/* magic fd number */\n#define MAGIC_FD  7777777\n#define MAGIC_NUM 3579\n\n#define FLAG_STARTUP    00002\n#define FLAG_INSYSCALL  00010\n\n#define exiting(pinfp)  ((pinfp)->flags & FLAG_INSYSCALL)\n\nstruct proc_info {\n\tpid_t pid;\n\tint flags;\n\tint csn;\t\t/* current syscall number */\n\tstruct socket_info *cws;\t/* current process's writing socket info */\n\tUT_hash_handle hh;\t/* makes this structure hashable */\n};\n\nvoid add_socket_info(struct socket_info *s);\nvoid del_socket_info(struct socket_info *s);\nstruct socket_info *find_socket_info(uint64_t magic_fd);\n\nvoid add_proc_info(struct proc_info *p);\nvoid del_proc_info(struct proc_info *p);\nstruct proc_info *find_proc_info(pid_t pid);\nstruct proc_info *alloc_proc_info(pid_t pid);\n\nint get_syscall_number(pid_t pid);\nint get_retval(pid_t pid);\nvoid set_retval(pid_t pid, long new_val);\nlong get_syscall_arg(pid_t pid, int order);\n\nvoid getdata(pid_t child, long addr, char *dst, int len);\nvoid putdata(pid_t child, long addr, char *src, int len);\n\n#endif\n"
        },
        {
          "name": "local",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.c",
          "type": "blob",
          "size": 0.6748046875,
          "content": "/*\n * graftcp\n * Copyright (C) 2016, 2018-2021 Hmgle <dustgle@gmail.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\nint client_main(int argc, char **argv);\n\nint main(int argc, char **argv)\n{\n\treturn client_main(argc, argv);\n}\n"
        },
        {
          "name": "uthash.h",
          "type": "blob",
          "size": 60.7626953125,
          "content": "/*\nCopyright (c) 2003-2014, Troy D. Hanson     http://troydhanson.github.com/uthash/\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER\nOR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef UTHASH_H\n#define UTHASH_H\n\n#include <string.h>   /* memcmp,strlen */\n#include <stddef.h>   /* ptrdiff_t */\n#include <stdlib.h>   /* exit() */\n\n/* These macros use decltype or the earlier __typeof GNU extension.\n   As decltype is only available in newer compilers (VS2010 or gcc 4.3+\n   when compiling c++ source) this code uses whatever method is needed\n   or, for VS2008 where neither is available, uses casting workarounds. */\n#if defined(_MSC_VER)   /* MS compiler */\n#if _MSC_VER >= 1600 && defined(__cplusplus)  /* VS2010 or newer in C++ mode */\n#define DECLTYPE(x) (decltype(x))\n#else                   /* VS2008 or older (or VS2010 in C mode) */\n#define NO_DECLTYPE\n#define DECLTYPE(x)\n#endif\n#elif defined(__BORLANDC__) || defined(__LCC__) || defined(__WATCOMC__)\n#define NO_DECLTYPE\n#define DECLTYPE(x)\n#else                   /* GNU, Sun and other compilers */\n#define DECLTYPE(x) (__typeof(x))\n#endif\n\n#ifdef NO_DECLTYPE\n#define DECLTYPE_ASSIGN(dst,src)                                                 \\\ndo {                                                                             \\\n  char **_da_dst = (char**)(&(dst));                                             \\\n  *_da_dst = (char*)(src);                                                       \\\n} while(0)\n#else\n#define DECLTYPE_ASSIGN(dst,src)                                                 \\\ndo {                                                                             \\\n  (dst) = DECLTYPE(dst)(src);                                                    \\\n} while(0)\n#endif\n\n/* a number of the hash function use uint32_t which isn't defined on Pre VS2010 */\n#if defined(_WIN32)\n#if defined(_MSC_VER) && _MSC_VER >= 1600\n#include <stdint.h>\n#elif defined(__WATCOMC__) || defined(__MINGW32__) || defined(__CYGWIN__)\n#include <stdint.h>\n#else\ntypedef unsigned int uint32_t;\ntypedef unsigned char uint8_t;\n#endif\n#elif defined(__GNUC__) && !defined(__VXWORKS__)\n#include <stdint.h>\n#else\ntypedef unsigned int uint32_t;\ntypedef unsigned char uint8_t;\n#endif\n\n#define UTHASH_VERSION 1.9.9\n\n#ifndef uthash_fatal\n#define uthash_fatal(msg) exit(-1)        /* fatal error (out of memory,etc) */\n#endif\n#ifndef uthash_malloc\n#define uthash_malloc(sz) malloc(sz)      /* malloc fcn                      */\n#endif\n#ifndef uthash_free\n#define uthash_free(ptr,sz) free(ptr)     /* free fcn                        */\n#endif\n\n#ifndef uthash_noexpand_fyi\n#define uthash_noexpand_fyi(tbl)          /* can be defined to log noexpand  */\n#endif\n#ifndef uthash_expand_fyi\n#define uthash_expand_fyi(tbl)            /* can be defined to log expands   */\n#endif\n\n/* initial number of buckets */\n#define HASH_INITIAL_NUM_BUCKETS 32U     /* initial number of buckets        */\n#define HASH_INITIAL_NUM_BUCKETS_LOG2 5U /* lg2 of initial number of buckets */\n#define HASH_BKT_CAPACITY_THRESH 10U     /* expand when bucket count reaches */\n\n/* calculate the element whose hash handle address is hhe */\n#define ELMT_FROM_HH(tbl,hhp) ((void*)(((char*)(hhp)) - ((tbl)->hho)))\n\n#define HASH_FIND(hh,head,keyptr,keylen,out)                                     \\\ndo {                                                                             \\\n  out=NULL;                                                                      \\\n  if (head != NULL) {                                                            \\\n     unsigned _hf_bkt,_hf_hashv;                                                 \\\n     HASH_FCN(keyptr,keylen, (head)->hh.tbl->num_buckets, _hf_hashv, _hf_bkt);   \\\n     if (HASH_BLOOM_TEST((head)->hh.tbl, _hf_hashv) != 0) {                      \\\n       HASH_FIND_IN_BKT((head)->hh.tbl, hh, (head)->hh.tbl->buckets[ _hf_bkt ],  \\\n                        keyptr,keylen,out);                                      \\\n     }                                                                           \\\n  }                                                                              \\\n} while (0)\n\n#ifdef HASH_BLOOM\n#define HASH_BLOOM_BITLEN (1UL << HASH_BLOOM)\n#define HASH_BLOOM_BYTELEN (HASH_BLOOM_BITLEN/8UL) + (((HASH_BLOOM_BITLEN%8UL)!=0UL) ? 1UL : 0UL)\n#define HASH_BLOOM_MAKE(tbl)                                                     \\\ndo {                                                                             \\\n  (tbl)->bloom_nbits = HASH_BLOOM;                                               \\\n  (tbl)->bloom_bv = (uint8_t*)uthash_malloc(HASH_BLOOM_BYTELEN);                 \\\n  if (!((tbl)->bloom_bv))  { uthash_fatal( \"out of memory\"); }                   \\\n  memset((tbl)->bloom_bv, 0, HASH_BLOOM_BYTELEN);                                \\\n  (tbl)->bloom_sig = HASH_BLOOM_SIGNATURE;                                       \\\n} while (0)\n\n#define HASH_BLOOM_FREE(tbl)                                                     \\\ndo {                                                                             \\\n  uthash_free((tbl)->bloom_bv, HASH_BLOOM_BYTELEN);                              \\\n} while (0)\n\n#define HASH_BLOOM_BITSET(bv,idx) (bv[(idx)/8U] |= (1U << ((idx)%8U)))\n#define HASH_BLOOM_BITTEST(bv,idx) (bv[(idx)/8U] & (1U << ((idx)%8U)))\n\n#define HASH_BLOOM_ADD(tbl,hashv)                                                \\\n  HASH_BLOOM_BITSET((tbl)->bloom_bv, (hashv & (uint32_t)((1ULL << (tbl)->bloom_nbits) - 1U)))\n\n#define HASH_BLOOM_TEST(tbl,hashv)                                               \\\n  HASH_BLOOM_BITTEST((tbl)->bloom_bv, (hashv & (uint32_t)((1ULL << (tbl)->bloom_nbits) - 1U)))\n\n#else\n#define HASH_BLOOM_MAKE(tbl)\n#define HASH_BLOOM_FREE(tbl)\n#define HASH_BLOOM_ADD(tbl,hashv)\n#define HASH_BLOOM_TEST(tbl,hashv) (1)\n#define HASH_BLOOM_BYTELEN 0U\n#endif\n\n#define HASH_MAKE_TABLE(hh,head)                                                 \\\ndo {                                                                             \\\n  (head)->hh.tbl = (UT_hash_table*)uthash_malloc(                                \\\n                  sizeof(UT_hash_table));                                        \\\n  if (!((head)->hh.tbl))  { uthash_fatal( \"out of memory\"); }                    \\\n  memset((head)->hh.tbl, 0, sizeof(UT_hash_table));                              \\\n  (head)->hh.tbl->tail = &((head)->hh);                                          \\\n  (head)->hh.tbl->num_buckets = HASH_INITIAL_NUM_BUCKETS;                        \\\n  (head)->hh.tbl->log2_num_buckets = HASH_INITIAL_NUM_BUCKETS_LOG2;              \\\n  (head)->hh.tbl->hho = (char*)(&(head)->hh) - (char*)(head);                    \\\n  (head)->hh.tbl->buckets = (UT_hash_bucket*)uthash_malloc(                      \\\n          HASH_INITIAL_NUM_BUCKETS*sizeof(struct UT_hash_bucket));               \\\n  if (! (head)->hh.tbl->buckets) { uthash_fatal( \"out of memory\"); }             \\\n  memset((head)->hh.tbl->buckets, 0,                                             \\\n          HASH_INITIAL_NUM_BUCKETS*sizeof(struct UT_hash_bucket));               \\\n  HASH_BLOOM_MAKE((head)->hh.tbl);                                               \\\n  (head)->hh.tbl->signature = HASH_SIGNATURE;                                    \\\n} while(0)\n\n#define HASH_ADD(hh,head,fieldname,keylen_in,add)                                \\\n        HASH_ADD_KEYPTR(hh,head,&((add)->fieldname),keylen_in,add)\n\n#define HASH_REPLACE(hh,head,fieldname,keylen_in,add,replaced)                   \\\ndo {                                                                             \\\n  replaced=NULL;                                                                 \\\n  HASH_FIND(hh,head,&((add)->fieldname),keylen_in,replaced);                     \\\n  if (replaced!=NULL) {                                                          \\\n     HASH_DELETE(hh,head,replaced);                                              \\\n  }                                                                              \\\n  HASH_ADD(hh,head,fieldname,keylen_in,add);                                     \\\n} while(0)\n\n#define HASH_ADD_KEYPTR(hh,head,keyptr,keylen_in,add)                            \\\ndo {                                                                             \\\n unsigned _ha_bkt;                                                               \\\n (add)->hh.next = NULL;                                                          \\\n (add)->hh.key = (char*)(keyptr);                                                \\\n (add)->hh.keylen = (unsigned)(keylen_in);                                       \\\n if (!(head)) {                                                                  \\\n    head = (add);                                                                \\\n    (head)->hh.prev = NULL;                                                      \\\n    HASH_MAKE_TABLE(hh,head);                                                    \\\n } else {                                                                        \\\n    (head)->hh.tbl->tail->next = (add);                                          \\\n    (add)->hh.prev = ELMT_FROM_HH((head)->hh.tbl, (head)->hh.tbl->tail);         \\\n    (head)->hh.tbl->tail = &((add)->hh);                                         \\\n }                                                                               \\\n (head)->hh.tbl->num_items++;                                                    \\\n (add)->hh.tbl = (head)->hh.tbl;                                                 \\\n HASH_FCN(keyptr,keylen_in, (head)->hh.tbl->num_buckets,                         \\\n         (add)->hh.hashv, _ha_bkt);                                              \\\n HASH_ADD_TO_BKT((head)->hh.tbl->buckets[_ha_bkt],&(add)->hh);                   \\\n HASH_BLOOM_ADD((head)->hh.tbl,(add)->hh.hashv);                                 \\\n HASH_EMIT_KEY(hh,head,keyptr,keylen_in);                                        \\\n HASH_FSCK(hh,head);                                                             \\\n} while(0)\n\n#define HASH_TO_BKT( hashv, num_bkts, bkt )                                      \\\ndo {                                                                             \\\n  bkt = ((hashv) & ((num_bkts) - 1U));                                           \\\n} while(0)\n\n/* delete \"delptr\" from the hash table.\n * \"the usual\" patch-up process for the app-order doubly-linked-list.\n * The use of _hd_hh_del below deserves special explanation.\n * These used to be expressed using (delptr) but that led to a bug\n * if someone used the same symbol for the head and deletee, like\n *  HASH_DELETE(hh,users,users);\n * We want that to work, but by changing the head (users) below\n * we were forfeiting our ability to further refer to the deletee (users)\n * in the patch-up process. Solution: use scratch space to\n * copy the deletee pointer, then the latter references are via that\n * scratch pointer rather than through the repointed (users) symbol.\n */\n#define HASH_DELETE(hh,head,delptr)                                              \\\ndo {                                                                             \\\n    struct UT_hash_handle *_hd_hh_del;                                           \\\n    if ( ((delptr)->hh.prev == NULL) && ((delptr)->hh.next == NULL) )  {         \\\n        uthash_free((head)->hh.tbl->buckets,                                     \\\n                    (head)->hh.tbl->num_buckets*sizeof(struct UT_hash_bucket) ); \\\n        HASH_BLOOM_FREE((head)->hh.tbl);                                         \\\n        uthash_free((head)->hh.tbl, sizeof(UT_hash_table));                      \\\n        head = NULL;                                                             \\\n    } else {                                                                     \\\n        unsigned _hd_bkt;                                                        \\\n        _hd_hh_del = &((delptr)->hh);                                            \\\n        if ((delptr) == ELMT_FROM_HH((head)->hh.tbl,(head)->hh.tbl->tail)) {     \\\n            (head)->hh.tbl->tail =                                               \\\n                (UT_hash_handle*)((ptrdiff_t)((delptr)->hh.prev) +               \\\n                (head)->hh.tbl->hho);                                            \\\n        }                                                                        \\\n        if ((delptr)->hh.prev != NULL) {                                         \\\n            ((UT_hash_handle*)((ptrdiff_t)((delptr)->hh.prev) +                  \\\n                    (head)->hh.tbl->hho))->next = (delptr)->hh.next;             \\\n        } else {                                                                 \\\n            DECLTYPE_ASSIGN(head,(delptr)->hh.next);                             \\\n        }                                                                        \\\n        if (_hd_hh_del->next != NULL) {                                          \\\n            ((UT_hash_handle*)((ptrdiff_t)_hd_hh_del->next +                     \\\n                    (head)->hh.tbl->hho))->prev =                                \\\n                    _hd_hh_del->prev;                                            \\\n        }                                                                        \\\n        HASH_TO_BKT( _hd_hh_del->hashv, (head)->hh.tbl->num_buckets, _hd_bkt);   \\\n        HASH_DEL_IN_BKT(hh,(head)->hh.tbl->buckets[_hd_bkt], _hd_hh_del);        \\\n        (head)->hh.tbl->num_items--;                                             \\\n    }                                                                            \\\n    HASH_FSCK(hh,head);                                                          \\\n} while (0)\n\n\n/* convenience forms of HASH_FIND/HASH_ADD/HASH_DEL */\n#define HASH_FIND_STR(head,findstr,out)                                          \\\n    HASH_FIND(hh,head,findstr,(unsigned)strlen(findstr),out)\n#define HASH_ADD_STR(head,strfield,add)                                          \\\n    HASH_ADD(hh,head,strfield[0],(unsigned int)strlen(add->strfield),add)\n#define HASH_REPLACE_STR(head,strfield,add,replaced)                             \\\n    HASH_REPLACE(hh,head,strfield[0],(unsigned)strlen(add->strfield),add,replaced)\n#define HASH_FIND_INT(head,findint,out)                                          \\\n    HASH_FIND(hh,head,findint,sizeof(int),out)\n#define HASH_ADD_INT(head,intfield,add)                                          \\\n    HASH_ADD(hh,head,intfield,sizeof(int),add)\n#define HASH_REPLACE_INT(head,intfield,add,replaced)                             \\\n    HASH_REPLACE(hh,head,intfield,sizeof(int),add,replaced)\n#define HASH_FIND_PTR(head,findptr,out)                                          \\\n    HASH_FIND(hh,head,findptr,sizeof(void *),out)\n#define HASH_ADD_PTR(head,ptrfield,add)                                          \\\n    HASH_ADD(hh,head,ptrfield,sizeof(void *),add)\n#define HASH_REPLACE_PTR(head,ptrfield,add,replaced)                             \\\n    HASH_REPLACE(hh,head,ptrfield,sizeof(void *),add,replaced)\n#define HASH_DEL(head,delptr)                                                    \\\n    HASH_DELETE(hh,head,delptr)\n\n/* HASH_FSCK checks hash integrity on every add/delete when HASH_DEBUG is defined.\n * This is for uthash developer only; it compiles away if HASH_DEBUG isn't defined.\n */\n#ifdef HASH_DEBUG\n#define HASH_OOPS(...) do { fprintf(stderr,__VA_ARGS__); exit(-1); } while (0)\n#define HASH_FSCK(hh,head)                                                       \\\ndo {                                                                             \\\n    struct UT_hash_handle *_thh;                                                 \\\n    if (head) {                                                                  \\\n        unsigned _bkt_i;                                                         \\\n        unsigned _count;                                                         \\\n        char *_prev;                                                             \\\n        _count = 0;                                                              \\\n        for( _bkt_i = 0; _bkt_i < (head)->hh.tbl->num_buckets; _bkt_i++) {       \\\n            unsigned _bkt_count = 0;                                             \\\n            _thh = (head)->hh.tbl->buckets[_bkt_i].hh_head;                      \\\n            _prev = NULL;                                                        \\\n            while (_thh) {                                                       \\\n               if (_prev != (char*)(_thh->hh_prev)) {                            \\\n                   HASH_OOPS(\"invalid hh_prev %p, actual %p\\n\",                  \\\n                    _thh->hh_prev, _prev );                                      \\\n               }                                                                 \\\n               _bkt_count++;                                                     \\\n               _prev = (char*)(_thh);                                            \\\n               _thh = _thh->hh_next;                                             \\\n            }                                                                    \\\n            _count += _bkt_count;                                                \\\n            if ((head)->hh.tbl->buckets[_bkt_i].count !=  _bkt_count) {          \\\n               HASH_OOPS(\"invalid bucket count %u, actual %u\\n\",                 \\\n                (head)->hh.tbl->buckets[_bkt_i].count, _bkt_count);              \\\n            }                                                                    \\\n        }                                                                        \\\n        if (_count != (head)->hh.tbl->num_items) {                               \\\n            HASH_OOPS(\"invalid hh item count %u, actual %u\\n\",                   \\\n                (head)->hh.tbl->num_items, _count );                             \\\n        }                                                                        \\\n        /* traverse hh in app order; check next/prev integrity, count */         \\\n        _count = 0;                                                              \\\n        _prev = NULL;                                                            \\\n        _thh =  &(head)->hh;                                                     \\\n        while (_thh) {                                                           \\\n           _count++;                                                             \\\n           if (_prev !=(char*)(_thh->prev)) {                                    \\\n              HASH_OOPS(\"invalid prev %p, actual %p\\n\",                          \\\n                    _thh->prev, _prev );                                         \\\n           }                                                                     \\\n           _prev = (char*)ELMT_FROM_HH((head)->hh.tbl, _thh);                    \\\n           _thh = ( _thh->next ?  (UT_hash_handle*)((char*)(_thh->next) +        \\\n                                  (head)->hh.tbl->hho) : NULL );                 \\\n        }                                                                        \\\n        if (_count != (head)->hh.tbl->num_items) {                               \\\n            HASH_OOPS(\"invalid app item count %u, actual %u\\n\",                  \\\n                (head)->hh.tbl->num_items, _count );                             \\\n        }                                                                        \\\n    }                                                                            \\\n} while (0)\n#else\n#define HASH_FSCK(hh,head)\n#endif\n\n/* When compiled with -DHASH_EMIT_KEYS, length-prefixed keys are emitted to\n * the descriptor to which this macro is defined for tuning the hash function.\n * The app can #include <unistd.h> to get the prototype for write(2). */\n#ifdef HASH_EMIT_KEYS\n#define HASH_EMIT_KEY(hh,head,keyptr,fieldlen)                                   \\\ndo {                                                                             \\\n    unsigned _klen = fieldlen;                                                   \\\n    write(HASH_EMIT_KEYS, &_klen, sizeof(_klen));                                \\\n    write(HASH_EMIT_KEYS, keyptr, (unsigned long)fieldlen);                      \\\n} while (0)\n#else\n#define HASH_EMIT_KEY(hh,head,keyptr,fieldlen)\n#endif\n\n/* default to Jenkin's hash unless overridden e.g. DHASH_FUNCTION=HASH_SAX */\n#ifdef HASH_FUNCTION\n#define HASH_FCN HASH_FUNCTION\n#else\n#define HASH_FCN HASH_JEN\n#endif\n\n/* The Bernstein hash function, used in Perl prior to v5.6. Note (x<<5+x)=x*33. */\n#define HASH_BER(key,keylen,num_bkts,hashv,bkt)                                  \\\ndo {                                                                             \\\n  unsigned _hb_keylen=(unsigned)keylen;                                          \\\n  const unsigned char *_hb_key=(const unsigned char*)(key);                      \\\n  (hashv) = 0;                                                                   \\\n  while (_hb_keylen-- != 0U) {                                                   \\\n      (hashv) = (((hashv) << 5) + (hashv)) + *_hb_key++;                         \\\n  }                                                                              \\\n  bkt = (hashv) & (num_bkts-1U);                                                 \\\n} while (0)\n\n\n/* SAX/FNV/OAT/JEN hash functions are macro variants of those listed at\n * http://eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx */\n#define HASH_SAX(key,keylen,num_bkts,hashv,bkt)                                  \\\ndo {                                                                             \\\n  unsigned _sx_i;                                                                \\\n  const unsigned char *_hs_key=(const unsigned char*)(key);                      \\\n  hashv = 0;                                                                     \\\n  for(_sx_i=0; _sx_i < keylen; _sx_i++) {                                        \\\n      hashv ^= (hashv << 5) + (hashv >> 2) + _hs_key[_sx_i];                     \\\n  }                                                                              \\\n  bkt = hashv & (num_bkts-1U);                                                   \\\n} while (0)\n/* FNV-1a variation */\n#define HASH_FNV(key,keylen,num_bkts,hashv,bkt)                                  \\\ndo {                                                                             \\\n  unsigned _fn_i;                                                                \\\n  const unsigned char *_hf_key=(const unsigned char*)(key);                      \\\n  hashv = 2166136261U;                                                           \\\n  for(_fn_i=0; _fn_i < keylen; _fn_i++) {                                        \\\n      hashv = hashv ^ _hf_key[_fn_i];                                            \\\n      hashv = hashv * 16777619U;                                                 \\\n  }                                                                              \\\n  bkt = hashv & (num_bkts-1U);                                                   \\\n} while(0)\n\n#define HASH_OAT(key,keylen,num_bkts,hashv,bkt)                                  \\\ndo {                                                                             \\\n  unsigned _ho_i;                                                                \\\n  const unsigned char *_ho_key=(const unsigned char*)(key);                      \\\n  hashv = 0;                                                                     \\\n  for(_ho_i=0; _ho_i < keylen; _ho_i++) {                                        \\\n      hashv += _ho_key[_ho_i];                                                   \\\n      hashv += (hashv << 10);                                                    \\\n      hashv ^= (hashv >> 6);                                                     \\\n  }                                                                              \\\n  hashv += (hashv << 3);                                                         \\\n  hashv ^= (hashv >> 11);                                                        \\\n  hashv += (hashv << 15);                                                        \\\n  bkt = hashv & (num_bkts-1U);                                                   \\\n} while(0)\n\n#define HASH_JEN_MIX(a,b,c)                                                      \\\ndo {                                                                             \\\n  a -= b; a -= c; a ^= ( c >> 13 );                                              \\\n  b -= c; b -= a; b ^= ( a << 8 );                                               \\\n  c -= a; c -= b; c ^= ( b >> 13 );                                              \\\n  a -= b; a -= c; a ^= ( c >> 12 );                                              \\\n  b -= c; b -= a; b ^= ( a << 16 );                                              \\\n  c -= a; c -= b; c ^= ( b >> 5 );                                               \\\n  a -= b; a -= c; a ^= ( c >> 3 );                                               \\\n  b -= c; b -= a; b ^= ( a << 10 );                                              \\\n  c -= a; c -= b; c ^= ( b >> 15 );                                              \\\n} while (0)\n\n#define HASH_JEN(key,keylen,num_bkts,hashv,bkt)                                  \\\ndo {                                                                             \\\n  unsigned _hj_i,_hj_j,_hj_k;                                                    \\\n  unsigned const char *_hj_key=(unsigned const char*)(key);                      \\\n  hashv = 0xfeedbeefu;                                                           \\\n  _hj_i = _hj_j = 0x9e3779b9u;                                                   \\\n  _hj_k = (unsigned)(keylen);                                                    \\\n  while (_hj_k >= 12U) {                                                         \\\n    _hj_i +=    (_hj_key[0] + ( (unsigned)_hj_key[1] << 8 )                      \\\n        + ( (unsigned)_hj_key[2] << 16 )                                         \\\n        + ( (unsigned)_hj_key[3] << 24 ) );                                      \\\n    _hj_j +=    (_hj_key[4] + ( (unsigned)_hj_key[5] << 8 )                      \\\n        + ( (unsigned)_hj_key[6] << 16 )                                         \\\n        + ( (unsigned)_hj_key[7] << 24 ) );                                      \\\n    hashv += (_hj_key[8] + ( (unsigned)_hj_key[9] << 8 )                         \\\n        + ( (unsigned)_hj_key[10] << 16 )                                        \\\n        + ( (unsigned)_hj_key[11] << 24 ) );                                     \\\n                                                                                 \\\n     HASH_JEN_MIX(_hj_i, _hj_j, hashv);                                          \\\n                                                                                 \\\n     _hj_key += 12;                                                              \\\n     _hj_k -= 12U;                                                               \\\n  }                                                                              \\\n  hashv += (unsigned)(keylen);                                                   \\\n  switch ( _hj_k ) {                                                             \\\n     case 11: hashv += ( (unsigned)_hj_key[10] << 24 ); /* FALLTHROUGH */        \\\n     case 10: hashv += ( (unsigned)_hj_key[9] << 16 );  /* FALLTHROUGH */        \\\n     case 9:  hashv += ( (unsigned)_hj_key[8] << 8 );   /* FALLTHROUGH */        \\\n     case 8:  _hj_j += ( (unsigned)_hj_key[7] << 24 );  /* FALLTHROUGH */        \\\n     case 7:  _hj_j += ( (unsigned)_hj_key[6] << 16 );  /* FALLTHROUGH */        \\\n     case 6:  _hj_j += ( (unsigned)_hj_key[5] << 8 );   /* FALLTHROUGH */        \\\n     case 5:  _hj_j += _hj_key[4];                      /* FALLTHROUGH */        \\\n     case 4:  _hj_i += ( (unsigned)_hj_key[3] << 24 );  /* FALLTHROUGH */        \\\n     case 3:  _hj_i += ( (unsigned)_hj_key[2] << 16 );  /* FALLTHROUGH */        \\\n     case 2:  _hj_i += ( (unsigned)_hj_key[1] << 8 );   /* FALLTHROUGH */        \\\n     case 1:  _hj_i += _hj_key[0];                                               \\\n  }                                                                              \\\n  HASH_JEN_MIX(_hj_i, _hj_j, hashv);                                             \\\n  bkt = hashv & (num_bkts-1U);                                                   \\\n} while(0)\n\n/* The Paul Hsieh hash function */\n#undef get16bits\n#if (defined(__GNUC__) && defined(__i386__)) || defined(__WATCOMC__)             \\\n  || defined(_MSC_VER) || defined (__BORLANDC__) || defined (__TURBOC__)\n#define get16bits(d) (*((const uint16_t *) (d)))\n#endif\n\n#if !defined (get16bits)\n#define get16bits(d) ((((uint32_t)(((const uint8_t *)(d))[1])) << 8)             \\\n                       +(uint32_t)(((const uint8_t *)(d))[0]) )\n#endif\n#define HASH_SFH(key,keylen,num_bkts,hashv,bkt)                                  \\\ndo {                                                                             \\\n  unsigned const char *_sfh_key=(unsigned const char*)(key);                     \\\n  uint32_t _sfh_tmp, _sfh_len = (uint32_t)keylen;                                \\\n                                                                                 \\\n  unsigned _sfh_rem = _sfh_len & 3U;                                             \\\n  _sfh_len >>= 2;                                                                \\\n  hashv = 0xcafebabeu;                                                           \\\n                                                                                 \\\n  /* Main loop */                                                                \\\n  for (;_sfh_len > 0U; _sfh_len--) {                                             \\\n    hashv    += get16bits (_sfh_key);                                            \\\n    _sfh_tmp  = ((uint32_t)(get16bits (_sfh_key+2)) << 11) ^ hashv;              \\\n    hashv     = (hashv << 16) ^ _sfh_tmp;                                        \\\n    _sfh_key += 2U*sizeof (uint16_t);                                            \\\n    hashv    += hashv >> 11;                                                     \\\n  }                                                                              \\\n                                                                                 \\\n  /* Handle end cases */                                                         \\\n  switch (_sfh_rem) {                                                            \\\n    case 3: hashv += get16bits (_sfh_key);                                       \\\n            hashv ^= hashv << 16;                                                \\\n            hashv ^= (uint32_t)(_sfh_key[sizeof (uint16_t)]) << 18;              \\\n            hashv += hashv >> 11;                                                \\\n            break;                                                               \\\n    case 2: hashv += get16bits (_sfh_key);                                       \\\n            hashv ^= hashv << 11;                                                \\\n            hashv += hashv >> 17;                                                \\\n            break;                                                               \\\n    case 1: hashv += *_sfh_key;                                                  \\\n            hashv ^= hashv << 10;                                                \\\n            hashv += hashv >> 1;                                                 \\\n  }                                                                              \\\n                                                                                 \\\n    /* Force \"avalanching\" of final 127 bits */                                  \\\n    hashv ^= hashv << 3;                                                         \\\n    hashv += hashv >> 5;                                                         \\\n    hashv ^= hashv << 4;                                                         \\\n    hashv += hashv >> 17;                                                        \\\n    hashv ^= hashv << 25;                                                        \\\n    hashv += hashv >> 6;                                                         \\\n    bkt = hashv & (num_bkts-1U);                                                 \\\n} while(0)\n\n#ifdef HASH_USING_NO_STRICT_ALIASING\n/* The MurmurHash exploits some CPU's (x86,x86_64) tolerance for unaligned reads.\n * For other types of CPU's (e.g. Sparc) an unaligned read causes a bus error.\n * MurmurHash uses the faster approach only on CPU's where we know it's safe.\n *\n * Note the preprocessor built-in defines can be emitted using:\n *\n *   gcc -m64 -dM -E - < /dev/null                  (on gcc)\n *   cc -## a.c (where a.c is a simple test file)   (Sun Studio)\n */\n#if (defined(__i386__) || defined(__x86_64__)  || defined(_M_IX86))\n#define MUR_GETBLOCK(p,i) p[i]\n#else /* non intel */\n#define MUR_PLUS0_ALIGNED(p) (((unsigned long)p & 3UL) == 0UL)\n#define MUR_PLUS1_ALIGNED(p) (((unsigned long)p & 3UL) == 1UL)\n#define MUR_PLUS2_ALIGNED(p) (((unsigned long)p & 3UL) == 2UL)\n#define MUR_PLUS3_ALIGNED(p) (((unsigned long)p & 3UL) == 3UL)\n#define WP(p) ((uint32_t*)((unsigned long)(p) & ~3UL))\n#if (defined(__BIG_ENDIAN__) || defined(SPARC) || defined(__ppc__) || defined(__ppc64__))\n#define MUR_THREE_ONE(p) ((((*WP(p))&0x00ffffff) << 8) | (((*(WP(p)+1))&0xff000000) >> 24))\n#define MUR_TWO_TWO(p)   ((((*WP(p))&0x0000ffff) <<16) | (((*(WP(p)+1))&0xffff0000) >> 16))\n#define MUR_ONE_THREE(p) ((((*WP(p))&0x000000ff) <<24) | (((*(WP(p)+1))&0xffffff00) >>  8))\n#else /* assume little endian non-intel */\n#define MUR_THREE_ONE(p) ((((*WP(p))&0xffffff00) >> 8) | (((*(WP(p)+1))&0x000000ff) << 24))\n#define MUR_TWO_TWO(p)   ((((*WP(p))&0xffff0000) >>16) | (((*(WP(p)+1))&0x0000ffff) << 16))\n#define MUR_ONE_THREE(p) ((((*WP(p))&0xff000000) >>24) | (((*(WP(p)+1))&0x00ffffff) <<  8))\n#endif\n#define MUR_GETBLOCK(p,i) (MUR_PLUS0_ALIGNED(p) ? ((p)[i]) :           \\\n                            (MUR_PLUS1_ALIGNED(p) ? MUR_THREE_ONE(p) : \\\n                             (MUR_PLUS2_ALIGNED(p) ? MUR_TWO_TWO(p) :  \\\n                                                      MUR_ONE_THREE(p))))\n#endif\n#define MUR_ROTL32(x,r) (((x) << (r)) | ((x) >> (32 - (r))))\n#define MUR_FMIX(_h) \\\ndo {                 \\\n  _h ^= _h >> 16;    \\\n  _h *= 0x85ebca6bu; \\\n  _h ^= _h >> 13;    \\\n  _h *= 0xc2b2ae35u; \\\n  _h ^= _h >> 16;    \\\n} while(0)\n\n#define HASH_MUR(key,keylen,num_bkts,hashv,bkt)                        \\\ndo {                                                                   \\\n  const uint8_t *_mur_data = (const uint8_t*)(key);                    \\\n  const int _mur_nblocks = (int)(keylen) / 4;                          \\\n  uint32_t _mur_h1 = 0xf88D5353u;                                      \\\n  uint32_t _mur_c1 = 0xcc9e2d51u;                                      \\\n  uint32_t _mur_c2 = 0x1b873593u;                                      \\\n  uint32_t _mur_k1 = 0;                                                \\\n  const uint8_t *_mur_tail;                                            \\\n  const uint32_t *_mur_blocks = (const uint32_t*)(_mur_data+(_mur_nblocks*4)); \\\n  int _mur_i;                                                          \\\n  for(_mur_i = -_mur_nblocks; _mur_i!=0; _mur_i++) {                   \\\n    _mur_k1 = MUR_GETBLOCK(_mur_blocks,_mur_i);                        \\\n    _mur_k1 *= _mur_c1;                                                \\\n    _mur_k1 = MUR_ROTL32(_mur_k1,15);                                  \\\n    _mur_k1 *= _mur_c2;                                                \\\n                                                                       \\\n    _mur_h1 ^= _mur_k1;                                                \\\n    _mur_h1 = MUR_ROTL32(_mur_h1,13);                                  \\\n    _mur_h1 = (_mur_h1*5U) + 0xe6546b64u;                              \\\n  }                                                                    \\\n  _mur_tail = (const uint8_t*)(_mur_data + (_mur_nblocks*4));          \\\n  _mur_k1=0;                                                           \\\n  switch((keylen) & 3U) {                                              \\\n    case 3: _mur_k1 ^= (uint32_t)_mur_tail[2] << 16; /* FALLTHROUGH */ \\\n    case 2: _mur_k1 ^= (uint32_t)_mur_tail[1] << 8;  /* FALLTHROUGH */ \\\n    case 1: _mur_k1 ^= (uint32_t)_mur_tail[0];                         \\\n    _mur_k1 *= _mur_c1;                                                \\\n    _mur_k1 = MUR_ROTL32(_mur_k1,15);                                  \\\n    _mur_k1 *= _mur_c2;                                                \\\n    _mur_h1 ^= _mur_k1;                                                \\\n  }                                                                    \\\n  _mur_h1 ^= (uint32_t)(keylen);                                       \\\n  MUR_FMIX(_mur_h1);                                                   \\\n  hashv = _mur_h1;                                                     \\\n  bkt = hashv & (num_bkts-1U);                                         \\\n} while(0)\n#endif  /* HASH_USING_NO_STRICT_ALIASING */\n\n/* key comparison function; return 0 if keys equal */\n#define HASH_KEYCMP(a,b,len) memcmp(a,b,(unsigned long)(len))\n\n/* iterate over items in a known bucket to find desired item */\n#define HASH_FIND_IN_BKT(tbl,hh,head,keyptr,keylen_in,out)                       \\\ndo {                                                                             \\\n if (head.hh_head != NULL) { DECLTYPE_ASSIGN(out,ELMT_FROM_HH(tbl,head.hh_head)); } \\\n else { out=NULL; }                                                              \\\n while (out != NULL) {                                                           \\\n    if ((out)->hh.keylen == (keylen_in)) {                                       \\\n        if ((HASH_KEYCMP((out)->hh.key,keyptr,keylen_in)) == 0) { break; }         \\\n    }                                                                            \\\n    if ((out)->hh.hh_next != NULL) { DECLTYPE_ASSIGN(out,ELMT_FROM_HH(tbl,(out)->hh.hh_next)); } \\\n    else { out = NULL; }                                                         \\\n }                                                                               \\\n} while(0)\n\n/* add an item to a bucket  */\n#define HASH_ADD_TO_BKT(head,addhh)                                              \\\ndo {                                                                             \\\n head.count++;                                                                   \\\n (addhh)->hh_next = head.hh_head;                                                \\\n (addhh)->hh_prev = NULL;                                                        \\\n if (head.hh_head != NULL) { (head).hh_head->hh_prev = (addhh); }                \\\n (head).hh_head=addhh;                                                           \\\n if ((head.count >= ((head.expand_mult+1U) * HASH_BKT_CAPACITY_THRESH))          \\\n     && ((addhh)->tbl->noexpand != 1U)) {                                        \\\n       HASH_EXPAND_BUCKETS((addhh)->tbl);                                        \\\n }                                                                               \\\n} while(0)\n\n/* remove an item from a given bucket */\n#define HASH_DEL_IN_BKT(hh,head,hh_del)                                          \\\n    (head).count--;                                                              \\\n    if ((head).hh_head == hh_del) {                                              \\\n      (head).hh_head = hh_del->hh_next;                                          \\\n    }                                                                            \\\n    if (hh_del->hh_prev) {                                                       \\\n        hh_del->hh_prev->hh_next = hh_del->hh_next;                              \\\n    }                                                                            \\\n    if (hh_del->hh_next) {                                                       \\\n        hh_del->hh_next->hh_prev = hh_del->hh_prev;                              \\\n    }\n\n/* Bucket expansion has the effect of doubling the number of buckets\n * and redistributing the items into the new buckets. Ideally the\n * items will distribute more or less evenly into the new buckets\n * (the extent to which this is true is a measure of the quality of\n * the hash function as it applies to the key domain).\n *\n * With the items distributed into more buckets, the chain length\n * (item count) in each bucket is reduced. Thus by expanding buckets\n * the hash keeps a bound on the chain length. This bounded chain\n * length is the essence of how a hash provides constant time lookup.\n *\n * The calculation of tbl->ideal_chain_maxlen below deserves some\n * explanation. First, keep in mind that we're calculating the ideal\n * maximum chain length based on the *new* (doubled) bucket count.\n * In fractions this is just n/b (n=number of items,b=new num buckets).\n * Since the ideal chain length is an integer, we want to calculate\n * ceil(n/b). We don't depend on floating point arithmetic in this\n * hash, so to calculate ceil(n/b) with integers we could write\n *\n *      ceil(n/b) = (n/b) + ((n%b)?1:0)\n *\n * and in fact a previous version of this hash did just that.\n * But now we have improved things a bit by recognizing that b is\n * always a power of two. We keep its base 2 log handy (call it lb),\n * so now we can write this with a bit shift and logical AND:\n *\n *      ceil(n/b) = (n>>lb) + ( (n & (b-1)) ? 1:0)\n *\n */\n#define HASH_EXPAND_BUCKETS(tbl)                                                 \\\ndo {                                                                             \\\n    unsigned _he_bkt;                                                            \\\n    unsigned _he_bkt_i;                                                          \\\n    struct UT_hash_handle *_he_thh, *_he_hh_nxt;                                 \\\n    UT_hash_bucket *_he_new_buckets, *_he_newbkt;                                \\\n    _he_new_buckets = (UT_hash_bucket*)uthash_malloc(                            \\\n             2UL * tbl->num_buckets * sizeof(struct UT_hash_bucket));            \\\n    if (!_he_new_buckets) { uthash_fatal( \"out of memory\"); }                    \\\n    memset(_he_new_buckets, 0,                                                   \\\n            2UL * tbl->num_buckets * sizeof(struct UT_hash_bucket));             \\\n    tbl->ideal_chain_maxlen =                                                    \\\n       (tbl->num_items >> (tbl->log2_num_buckets+1U)) +                          \\\n       (((tbl->num_items & ((tbl->num_buckets*2U)-1U)) != 0U) ? 1U : 0U);        \\\n    tbl->nonideal_items = 0;                                                     \\\n    for(_he_bkt_i = 0; _he_bkt_i < tbl->num_buckets; _he_bkt_i++)                \\\n    {                                                                            \\\n        _he_thh = tbl->buckets[ _he_bkt_i ].hh_head;                             \\\n        while (_he_thh != NULL) {                                                \\\n           _he_hh_nxt = _he_thh->hh_next;                                        \\\n           HASH_TO_BKT( _he_thh->hashv, tbl->num_buckets*2U, _he_bkt);           \\\n           _he_newbkt = &(_he_new_buckets[ _he_bkt ]);                           \\\n           if (++(_he_newbkt->count) > tbl->ideal_chain_maxlen) {                \\\n             tbl->nonideal_items++;                                              \\\n             _he_newbkt->expand_mult = _he_newbkt->count /                       \\\n                                        tbl->ideal_chain_maxlen;                 \\\n           }                                                                     \\\n           _he_thh->hh_prev = NULL;                                              \\\n           _he_thh->hh_next = _he_newbkt->hh_head;                               \\\n           if (_he_newbkt->hh_head != NULL) { _he_newbkt->hh_head->hh_prev =     \\\n                _he_thh; }                                                       \\\n           _he_newbkt->hh_head = _he_thh;                                        \\\n           _he_thh = _he_hh_nxt;                                                 \\\n        }                                                                        \\\n    }                                                                            \\\n    uthash_free( tbl->buckets, tbl->num_buckets*sizeof(struct UT_hash_bucket) ); \\\n    tbl->num_buckets *= 2U;                                                      \\\n    tbl->log2_num_buckets++;                                                     \\\n    tbl->buckets = _he_new_buckets;                                              \\\n    tbl->ineff_expands = (tbl->nonideal_items > (tbl->num_items >> 1)) ?         \\\n        (tbl->ineff_expands+1U) : 0U;                                            \\\n    if (tbl->ineff_expands > 1U) {                                               \\\n        tbl->noexpand=1;                                                         \\\n        uthash_noexpand_fyi(tbl);                                                \\\n    }                                                                            \\\n    uthash_expand_fyi(tbl);                                                      \\\n} while(0)\n\n\n/* This is an adaptation of Simon Tatham's O(n log(n)) mergesort */\n/* Note that HASH_SORT assumes the hash handle name to be hh.\n * HASH_SRT was added to allow the hash handle name to be passed in. */\n#define HASH_SORT(head,cmpfcn) HASH_SRT(hh,head,cmpfcn)\n#define HASH_SRT(hh,head,cmpfcn)                                                 \\\ndo {                                                                             \\\n  unsigned _hs_i;                                                                \\\n  unsigned _hs_looping,_hs_nmerges,_hs_insize,_hs_psize,_hs_qsize;               \\\n  struct UT_hash_handle *_hs_p, *_hs_q, *_hs_e, *_hs_list, *_hs_tail;            \\\n  if (head != NULL) {                                                            \\\n      _hs_insize = 1;                                                            \\\n      _hs_looping = 1;                                                           \\\n      _hs_list = &((head)->hh);                                                  \\\n      while (_hs_looping != 0U) {                                                \\\n          _hs_p = _hs_list;                                                      \\\n          _hs_list = NULL;                                                       \\\n          _hs_tail = NULL;                                                       \\\n          _hs_nmerges = 0;                                                       \\\n          while (_hs_p != NULL) {                                                \\\n              _hs_nmerges++;                                                     \\\n              _hs_q = _hs_p;                                                     \\\n              _hs_psize = 0;                                                     \\\n              for ( _hs_i = 0; _hs_i  < _hs_insize; _hs_i++ ) {                  \\\n                  _hs_psize++;                                                   \\\n                  _hs_q = (UT_hash_handle*)((_hs_q->next != NULL) ?              \\\n                          ((void*)((char*)(_hs_q->next) +                        \\\n                          (head)->hh.tbl->hho)) : NULL);                         \\\n                  if (! (_hs_q) ) { break; }                                     \\\n              }                                                                  \\\n              _hs_qsize = _hs_insize;                                            \\\n              while ((_hs_psize > 0U) || ((_hs_qsize > 0U) && (_hs_q != NULL))) {\\\n                  if (_hs_psize == 0U) {                                         \\\n                      _hs_e = _hs_q;                                             \\\n                      _hs_q = (UT_hash_handle*)((_hs_q->next != NULL) ?          \\\n                              ((void*)((char*)(_hs_q->next) +                    \\\n                              (head)->hh.tbl->hho)) : NULL);                     \\\n                      _hs_qsize--;                                               \\\n                  } else if ( (_hs_qsize == 0U) || (_hs_q == NULL) ) {           \\\n                      _hs_e = _hs_p;                                             \\\n                      if (_hs_p != NULL){                                        \\\n                        _hs_p = (UT_hash_handle*)((_hs_p->next != NULL) ?        \\\n                                ((void*)((char*)(_hs_p->next) +                  \\\n                                (head)->hh.tbl->hho)) : NULL);                   \\\n                       }                                                         \\\n                      _hs_psize--;                                               \\\n                  } else if ((                                                   \\\n                      cmpfcn(DECLTYPE(head)(ELMT_FROM_HH((head)->hh.tbl,_hs_p)), \\\n                             DECLTYPE(head)(ELMT_FROM_HH((head)->hh.tbl,_hs_q))) \\\n                             ) <= 0) {                                           \\\n                      _hs_e = _hs_p;                                             \\\n                      if (_hs_p != NULL){                                        \\\n                        _hs_p = (UT_hash_handle*)((_hs_p->next != NULL) ?        \\\n                               ((void*)((char*)(_hs_p->next) +                   \\\n                               (head)->hh.tbl->hho)) : NULL);                    \\\n                       }                                                         \\\n                      _hs_psize--;                                               \\\n                  } else {                                                       \\\n                      _hs_e = _hs_q;                                             \\\n                      _hs_q = (UT_hash_handle*)((_hs_q->next != NULL) ?          \\\n                              ((void*)((char*)(_hs_q->next) +                    \\\n                              (head)->hh.tbl->hho)) : NULL);                     \\\n                      _hs_qsize--;                                               \\\n                  }                                                              \\\n                  if ( _hs_tail != NULL ) {                                      \\\n                      _hs_tail->next = ((_hs_e != NULL) ?                        \\\n                            ELMT_FROM_HH((head)->hh.tbl,_hs_e) : NULL);          \\\n                  } else {                                                       \\\n                      _hs_list = _hs_e;                                          \\\n                  }                                                              \\\n                  if (_hs_e != NULL) {                                           \\\n                  _hs_e->prev = ((_hs_tail != NULL) ?                            \\\n                     ELMT_FROM_HH((head)->hh.tbl,_hs_tail) : NULL);              \\\n                  }                                                              \\\n                  _hs_tail = _hs_e;                                              \\\n              }                                                                  \\\n              _hs_p = _hs_q;                                                     \\\n          }                                                                      \\\n          if (_hs_tail != NULL){                                                 \\\n            _hs_tail->next = NULL;                                               \\\n          }                                                                      \\\n          if ( _hs_nmerges <= 1U ) {                                             \\\n              _hs_looping=0;                                                     \\\n              (head)->hh.tbl->tail = _hs_tail;                                   \\\n              DECLTYPE_ASSIGN(head,ELMT_FROM_HH((head)->hh.tbl, _hs_list));      \\\n          }                                                                      \\\n          _hs_insize *= 2U;                                                      \\\n      }                                                                          \\\n      HASH_FSCK(hh,head);                                                        \\\n }                                                                               \\\n} while (0)\n\n/* This function selects items from one hash into another hash.\n * The end result is that the selected items have dual presence\n * in both hashes. There is no copy of the items made; rather\n * they are added into the new hash through a secondary hash\n * hash handle that must be present in the structure. */\n#define HASH_SELECT(hh_dst, dst, hh_src, src, cond)                              \\\ndo {                                                                             \\\n  unsigned _src_bkt, _dst_bkt;                                                   \\\n  void *_last_elt=NULL, *_elt;                                                   \\\n  UT_hash_handle *_src_hh, *_dst_hh, *_last_elt_hh=NULL;                         \\\n  ptrdiff_t _dst_hho = ((char*)(&(dst)->hh_dst) - (char*)(dst));                 \\\n  if (src != NULL) {                                                             \\\n    for(_src_bkt=0; _src_bkt < (src)->hh_src.tbl->num_buckets; _src_bkt++) {     \\\n      for(_src_hh = (src)->hh_src.tbl->buckets[_src_bkt].hh_head;                \\\n          _src_hh != NULL;                                                       \\\n          _src_hh = _src_hh->hh_next) {                                          \\\n          _elt = ELMT_FROM_HH((src)->hh_src.tbl, _src_hh);                       \\\n          if (cond(_elt)) {                                                      \\\n            _dst_hh = (UT_hash_handle*)(((char*)_elt) + _dst_hho);               \\\n            _dst_hh->key = _src_hh->key;                                         \\\n            _dst_hh->keylen = _src_hh->keylen;                                   \\\n            _dst_hh->hashv = _src_hh->hashv;                                     \\\n            _dst_hh->prev = _last_elt;                                           \\\n            _dst_hh->next = NULL;                                                \\\n            if (_last_elt_hh != NULL) { _last_elt_hh->next = _elt; }             \\\n            if (dst == NULL) {                                                   \\\n              DECLTYPE_ASSIGN(dst,_elt);                                         \\\n              HASH_MAKE_TABLE(hh_dst,dst);                                       \\\n            } else {                                                             \\\n              _dst_hh->tbl = (dst)->hh_dst.tbl;                                  \\\n            }                                                                    \\\n            HASH_TO_BKT(_dst_hh->hashv, _dst_hh->tbl->num_buckets, _dst_bkt);    \\\n            HASH_ADD_TO_BKT(_dst_hh->tbl->buckets[_dst_bkt],_dst_hh);            \\\n            (dst)->hh_dst.tbl->num_items++;                                      \\\n            _last_elt = _elt;                                                    \\\n            _last_elt_hh = _dst_hh;                                              \\\n          }                                                                      \\\n      }                                                                          \\\n    }                                                                            \\\n  }                                                                              \\\n  HASH_FSCK(hh_dst,dst);                                                         \\\n} while (0)\n\n#define HASH_CLEAR(hh,head)                                                      \\\ndo {                                                                             \\\n  if (head != NULL) {                                                            \\\n    uthash_free((head)->hh.tbl->buckets,                                         \\\n                (head)->hh.tbl->num_buckets*sizeof(struct UT_hash_bucket));      \\\n    HASH_BLOOM_FREE((head)->hh.tbl);                                             \\\n    uthash_free((head)->hh.tbl, sizeof(UT_hash_table));                          \\\n    (head)=NULL;                                                                 \\\n  }                                                                              \\\n} while(0)\n\n#define HASH_OVERHEAD(hh,head)                                                   \\\n ((head != NULL) ? (                                                             \\\n (size_t)(((head)->hh.tbl->num_items   * sizeof(UT_hash_handle))   +             \\\n          ((head)->hh.tbl->num_buckets * sizeof(UT_hash_bucket))   +             \\\n           sizeof(UT_hash_table)                                   +             \\\n           (HASH_BLOOM_BYTELEN))) : 0U)\n\n#ifdef NO_DECLTYPE\n#define HASH_ITER(hh,head,el,tmp)                                                \\\nfor(((el)=(head)), ((*(char**)(&(tmp)))=(char*)((head!=NULL)?(head)->hh.next:NULL)); \\\n  (el) != NULL; ((el)=(tmp)), ((*(char**)(&(tmp)))=(char*)((tmp!=NULL)?(tmp)->hh.next:NULL)))\n#else\n#define HASH_ITER(hh,head,el,tmp)                                                \\\nfor(((el)=(head)), ((tmp)=DECLTYPE(el)((head!=NULL)?(head)->hh.next:NULL));      \\\n  (el) != NULL; ((el)=(tmp)), ((tmp)=DECLTYPE(el)((tmp!=NULL)?(tmp)->hh.next:NULL)))\n#endif\n\n/* obtain a count of items in the hash */\n#define HASH_COUNT(head) HASH_CNT(hh,head)\n#define HASH_CNT(hh,head) ((head != NULL)?((head)->hh.tbl->num_items):0U)\n\ntypedef struct UT_hash_bucket {\n   struct UT_hash_handle *hh_head;\n   unsigned count;\n\n   /* expand_mult is normally set to 0. In this situation, the max chain length\n    * threshold is enforced at its default value, HASH_BKT_CAPACITY_THRESH. (If\n    * the bucket's chain exceeds this length, bucket expansion is triggered).\n    * However, setting expand_mult to a non-zero value delays bucket expansion\n    * (that would be triggered by additions to this particular bucket)\n    * until its chain length reaches a *multiple* of HASH_BKT_CAPACITY_THRESH.\n    * (The multiplier is simply expand_mult+1). The whole idea of this\n    * multiplier is to reduce bucket expansions, since they are expensive, in\n    * situations where we know that a particular bucket tends to be overused.\n    * It is better to let its chain length grow to a longer yet-still-bounded\n    * value, than to do an O(n) bucket expansion too often.\n    */\n   unsigned expand_mult;\n\n} UT_hash_bucket;\n\n/* random signature used only to find hash tables in external analysis */\n#define HASH_SIGNATURE 0xa0111fe1u\n#define HASH_BLOOM_SIGNATURE 0xb12220f2u\n\ntypedef struct UT_hash_table {\n   UT_hash_bucket *buckets;\n   unsigned num_buckets, log2_num_buckets;\n   unsigned num_items;\n   struct UT_hash_handle *tail; /* tail hh in app order, for fast append    */\n   ptrdiff_t hho; /* hash handle offset (byte pos of hash handle in element */\n\n   /* in an ideal situation (all buckets used equally), no bucket would have\n    * more than ceil(#items/#buckets) items. that's the ideal chain length. */\n   unsigned ideal_chain_maxlen;\n\n   /* nonideal_items is the number of items in the hash whose chain position\n    * exceeds the ideal chain maxlen. these items pay the penalty for an uneven\n    * hash distribution; reaching them in a chain traversal takes >ideal steps */\n   unsigned nonideal_items;\n\n   /* ineffective expands occur when a bucket doubling was performed, but\n    * afterward, more than half the items in the hash had nonideal chain\n    * positions. If this happens on two consecutive expansions we inhibit any\n    * further expansion, as it's not helping; this happens when the hash\n    * function isn't a good fit for the key domain. When expansion is inhibited\n    * the hash will still work, albeit no longer in constant time. */\n   unsigned ineff_expands, noexpand;\n\n   uint32_t signature; /* used only to find hash tables in external analysis */\n#ifdef HASH_BLOOM\n   uint32_t bloom_sig; /* used only to test bloom exists in external analysis */\n   uint8_t *bloom_bv;\n   uint8_t bloom_nbits;\n#endif\n\n} UT_hash_table;\n\ntypedef struct UT_hash_handle {\n   struct UT_hash_table *tbl;\n   void *prev;                       /* prev element in app order      */\n   void *next;                       /* next element in app order      */\n   struct UT_hash_handle *hh_prev;   /* previous hh in bucket order    */\n   struct UT_hash_handle *hh_next;   /* next hh in bucket order        */\n   void *key;                        /* ptr to enclosing struct's key  */\n   unsigned keylen;                  /* enclosing struct's key len     */\n   unsigned hashv;                   /* result of hash-fcn(key)        */\n} UT_hash_handle;\n\n#endif /* UTHASH_H */\n"
        },
        {
          "name": "util.c",
          "type": "blob",
          "size": 8.009765625,
          "content": "/*\n * graftcp\n * Copyright (C) 2018, 2021 Hmgle <dustgle@gmail.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n#include \"graftcp.h\"\n\nstruct socket_info *SOCKET_INFO_TAB = NULL;\n\nvoid add_socket_info(struct socket_info *s)\n{\n\tHASH_ADD_INT(SOCKET_INFO_TAB, magic_fd, s);\n}\n\nvoid del_socket_info(struct socket_info *s)\n{\n\tHASH_DEL(SOCKET_INFO_TAB, s);\n}\n\nstruct socket_info *find_socket_info(uint64_t magic_fd)\n{\n\tstruct socket_info *s;\n\n\tHASH_FIND_INT(SOCKET_INFO_TAB, &magic_fd, s);\n\treturn s;\n}\n\nstruct proc_info *PROC_INFO_TAB = NULL;\n\nvoid add_proc_info(struct proc_info *p)\n{\n\tHASH_ADD_INT(PROC_INFO_TAB, pid, p);\n}\n\nvoid del_proc_info(struct proc_info *p)\n{\n\tHASH_DEL(PROC_INFO_TAB, p);\n}\n\nstruct proc_info *find_proc_info(pid_t pid)\n{\n\tstruct proc_info *p;\n\n\tHASH_FIND_INT(PROC_INFO_TAB, &pid, p);\n\treturn p;\n}\n\nstruct proc_info *alloc_proc_info(pid_t pid)\n{\n\tstruct proc_info *newp = calloc(1, sizeof(*newp));\n\tnewp->pid = pid;\n\tadd_proc_info(newp);\n\treturn newp;\n}\n\n#ifndef offsetof\n#define offsetof(a, b) __builtin_offsetof(a,b)\n#endif\n\n#if defined(__arm64__) || defined(__aarch64__)\nstruct arm_pt_regs {\n\tuint32_t uregs[18];\n};\n#define ARM_cpsr\turegs[16]\n#define ARM_pc\t\turegs[15]\n#define ARM_lr\t\turegs[14]\n#define ARM_sp\t\turegs[13]\n#define ARM_ip\t\turegs[12]\n#define ARM_fp\t\turegs[11]\n#define ARM_r10\t\turegs[10]\n#define ARM_r9\t\turegs[9]\n#define ARM_r8\t\turegs[8]\n#define ARM_r7\t\turegs[7]\n#define ARM_r6\t\turegs[6]\n#define ARM_r5\t\turegs[5]\n#define ARM_r4\t\turegs[4]\n#define ARM_r3\t\turegs[3]\n#define ARM_r2\t\turegs[2]\n#define ARM_r1\t\turegs[1]\n#define ARM_r0\t\turegs[0]\n#define ARM_ORIG_r0\turegs[17]\n\nstatic union {\n\tstruct user_pt_regs aarch64_r;\n\tstruct arm_pt_regs  arm_r;\n} arm_regs_union;\n#endif\n\nint get_syscall_number(pid_t pid)\n{\n#if defined(__x86_64__)\n#if 1\n\terrno = 0;\n\tint offset = offsetof(struct user, regs.orig_rax);\n\tlong val = ptrace(PTRACE_PEEKUSER, pid, offset);\n\tassert(errno == 0);\n\treturn (int)val;\n#else\t\t\t/* another way */\n\tstruct user_regs_struct regs;\n\tptrace(PTRACE_GETREGS, pid, 0, &regs);\n\tassert(errno == 0);\n\treturn regs.orig_rax;\n#endif\n#elif defined(__i386__)\n\tstruct user_regs_struct regs;\n\tptrace(PTRACE_GETREGS, pid, 0, &regs);\n\tassert(errno == 0);\n\treturn regs.orig_eax;\n#elif defined(__arm__)\n\terrno = 0;\n\tstruct pt_regs regs;\n\tptrace(PTRACE_GETREGS, pid, 0, &regs);\n\tassert(errno == 0);\n\treturn regs.ARM_r7;\n#elif defined(__arm64__) || defined(__aarch64__)\n\tstruct iovec iov = {\n\t\t.iov_base = &arm_regs_union,\n\t\t.iov_len = sizeof(struct user_pt_regs)\n\t};\n\tptrace(PTRACE_GETREGSET, pid, NT_PRSTATUS, &iov);\n\tassert(errno == 0);\n\tswitch (iov.iov_len) {\n\tcase sizeof(struct user_pt_regs):\n\t\treturn arm_regs_union.aarch64_r.regs[8];\n\tcase sizeof(struct arm_pt_regs):\n\t\treturn arm_regs_union.arm_r.ARM_r7;\n\t}\n\treturn -1;\n#endif\n}\n\nint get_retval(pid_t pid)\n{\n#if defined(__x86_64__)\n#if 1\n\terrno = 0;\n\tint offset = offsetof(struct user, regs.rax);\n\tlong val = ptrace(PTRACE_PEEKUSER, pid, offset);\n\treturn (int)val;\n#else\t\t\t/* another way */\n\tstruct user_regs_struct regs;\n\tptrace(PTRACE_GETREGS, pid, 0, &regs);\n\treturn regs.rax;\n#endif\n#elif defined(__i386__)\n\terrno = 0;\n\tstruct user_regs_struct regs;\n\tptrace(PTRACE_GETREGS, pid, 0, &regs);\n\treturn regs.eax;\n#elif defined(__arm__)\n\terrno = 0;\n\tstruct pt_regs regs;\n\tptrace(PTRACE_GETREGS, pid, 0, &regs);\n\treturn regs.ARM_r0;\n#elif defined(__arm64__) || defined(__aarch64__)\n\tstruct iovec iov = {\n\t\t.iov_base = &arm_regs_union,\n\t\t.iov_len = sizeof(struct user_pt_regs)\n\t};\n\tptrace(PTRACE_GETREGSET, pid, NT_PRSTATUS, &iov);\n\tassert(errno == 0);\n\tswitch (iov.iov_len) {\n\tcase sizeof(struct user_pt_regs):\n\t\treturn arm_regs_union.aarch64_r.regs[0];\n\tcase sizeof(struct arm_pt_regs):\n\t\treturn arm_regs_union.arm_r.ARM_r0;\n\t}\n\treturn -1;\n#endif\n}\n\nvoid set_retval(pid_t pid, long new_val)\n{\n#if defined(__x86_64__)\n\tstruct user_regs_struct regs;\n\tptrace(PTRACE_GETREGS, pid, 0, &regs);\n\tassert(errno == 0);\n\tif ((long)regs.rax == new_val)\n\t\treturn;\n\tregs.rax = new_val;\n\tptrace(PTRACE_SETREGS, pid, 0, &regs);\n\tassert(errno == 0);\n#elif defined(__i386__)\n\tstruct user_regs_struct regs;\n\tptrace(PTRACE_GETREGS, pid, 0, &regs);\n\tassert(errno == 0);\n\tif ((long)regs.eax == new_val)\n\t\treturn;\n\tregs.eax = new_val;\n\tptrace(PTRACE_SETREGS, pid, 0, &regs);\n\tassert(errno == 0);\n#elif defined(__arm__)\n\tstruct pt_regs regs;\n\tptrace(PTRACE_GETREGS, pid, 0, &regs);\n\tassert(errno == 0);\n\tif ((long)regs.ARM_r0 == new_val)\n\t\treturn;\n\tregs.ARM_r0 = new_val;\n\tptrace(PTRACE_SETREGS, pid, 0, &regs);\n\tassert(errno == 0);\n#elif defined(__arm64__) || defined(__aarch64__)\n\tstruct iovec iov = {\n\t\t.iov_base = &arm_regs_union,\n\t\t.iov_len = sizeof(struct user_pt_regs)\n\t};\n\tptrace(PTRACE_GETREGSET, pid, NT_PRSTATUS, &iov);\n\tassert(errno == 0);\n\tswitch (iov.iov_len) {\n\tcase sizeof(struct user_pt_regs):\n\t\tarm_regs_union.aarch64_r.regs[0] = new_val;\n\tcase sizeof(struct arm_pt_regs):\n\t\tarm_regs_union.arm_r.ARM_r0 = new_val;\n\t}\n\tptrace(PTRACE_SETREGSET, pid, NT_PRSTATUS, &iov);\n\tassert(errno == 0);\n#endif\n}\n\nlong get_syscall_arg(pid_t pid, int order)\n{\n\tlong val;\n#if defined(__x86_64__)\n\tint offset;\n\n\tswitch (order) {\n\tcase 0:\n\t\toffset = offsetof(struct user, regs.rdi);\n\t\tbreak;\n\tcase 1:\n\t\toffset = offsetof(struct user, regs.rsi);\n\t\tbreak;\n\tcase 2:\n\t\toffset = offsetof(struct user, regs.rdx);\n\t\tbreak;\n\tcase 3:\n\t\toffset = offsetof(struct user, regs.r10);\n\t\tbreak;\n\tcase 4:\n\t\toffset = offsetof(struct user, regs.r8);\n\t\tbreak;\n\tcase 5:\n\t\toffset = offsetof(struct user, regs.r9);\n\t\tbreak;\n\tdefault:\n\t\treturn -1;\n\t}\n\terrno = 0;\n\tval = ptrace(PTRACE_PEEKUSER, pid, offset);\n\tassert(errno == 0);\n#elif defined(__i386__)\n\tstruct user_regs_struct regs;\n\tptrace(PTRACE_GETREGS, pid, 0, &regs);\n\tswitch (order) {\n\tcase 0:\n\t\tval = regs.ebx;\n\t\tbreak;\n\tcase 1:\n\t\tval = regs.ecx;\n\t\tbreak;\n\tcase 2:\n\t\tval = regs.edx;\n\t\tbreak;\n\tcase 3:\n\t\tval = regs.esi;\n\t\tbreak;\n\tcase 4:\n\t\tval = regs.edi;\n\t\tbreak;\n\tcase 5:\n\t\tval = regs.ebp;\n\t\tbreak;\n\tdefault:\n\t\treturn -1;\n\t}\n#elif defined(__arm__)\n\tstruct pt_regs regs;\n\tptrace(PTRACE_GETREGS, pid, 0, &regs);\n\tswitch (order) {\n\tcase 0:\n\t\tval = regs.ARM_ORIG_r0;\n\t\tbreak;\n\tcase 1:\n\t\tval = regs.ARM_r1;\n\t\tbreak;\n\tcase 2:\n\t\tval = regs.ARM_r2;\n\t\tbreak;\n\tcase 3:\n\t\tval = regs.ARM_r3;\n\t\tbreak;\n\tcase 4:\n\t\tval = regs.ARM_r4;\n\t\tbreak;\n\tcase 5:\n\t\tval = regs.ARM_r5;\n\t\tbreak;\n\tdefault:\n\t\treturn -1;\n\t}\n#elif defined(__arm64__) || defined(__aarch64__)\n\tswitch (order) {\n\tcase 0:\n\t\tval = arm_regs_union.aarch64_r.regs[0];\n\t\tbreak;\n\tcase 1:\n\t\tval = arm_regs_union.aarch64_r.regs[1];\n\t\tbreak;\n\tcase 2:\n\t\tval = arm_regs_union.aarch64_r.regs[2];\n\t\tbreak;\n\tcase 3:\n\t\tval = arm_regs_union.aarch64_r.regs[3];\n\t\tbreak;\n\tcase 4:\n\t\tval = arm_regs_union.aarch64_r.regs[4];\n\t\tbreak;\n\tcase 5:\n\t\tval = arm_regs_union.aarch64_r.regs[5];\n\t\tbreak;\n\tdefault:\n\t\treturn -1;\n\t}\n#endif\n\treturn val;\n}\n\nvoid getdata(pid_t child, long addr, char *dst, int len)\n{\n\tchar *laddr;\n\tint i, j;\n\tunion u {\n\t\tlong val;\n\t\tchar chars[sizeof(long)];\n\t} data;\n\n\ti = 0;\n\tj = len / sizeof(long);\n\tladdr = dst;\n\twhile (i < j) {\n\t\tdata.val = ptrace(PTRACE_PEEKDATA, child, addr + i * 8, NULL);\n\t\tmemcpy(laddr, data.chars, sizeof(long));\n\t\t++i;\n\t\tladdr += sizeof(long);\n\t}\n\tj = len % sizeof(long);\n\tif (j != 0) {\n\t\tdata.val = ptrace(PTRACE_PEEKDATA, child, addr + i * 8, NULL);\n\t\tmemcpy(laddr, data.chars, j);\n\t}\n}\n\nvoid putdata(pid_t child, long addr, char *src, int len)\n{\n\tchar *laddr;\n\tint i, j;\n\tunion u {\n\t\tlong val;\n\t\tchar chars[sizeof(long)];\n\t} data;\n\n\ti = 0;\n\tj = len / sizeof(long);\n\tladdr = src;\n\twhile (i < j) {\n\t\tmemcpy(data.chars, laddr, sizeof(long));\n\t\tptrace(PTRACE_POKEDATA, child, addr + i * 8, data.val);\n\t\t++i;\n\t\tladdr += sizeof(long);\n\t}\n\tj = len % sizeof(long);\n\tif (j != 0) {\n\t\tmemcpy(data.chars, laddr, j);\n\t\tptrace(PTRACE_POKEDATA, child, addr + i * 8, data.val);\n\t}\n}\n"
        }
      ]
    }
  ]
}