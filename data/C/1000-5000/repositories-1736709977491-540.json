{
  "metadata": {
    "timestamp": 1736709977491,
    "page": 540,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jedisct1/minisign",
      "stars": 2254,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 4.412109375,
          "content": "---\nLanguage: Cpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveMacros: true\nAlignConsecutiveAssignments: true\nAlignConsecutiveBitFields: true\nAlignConsecutiveDeclarations: true\nAlignEscapedNewlines: true\nAlignOperands: true\nAlignTrailingComments: false\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortEnumsOnASingleLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: false\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: TopLevelDefinitions\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: MultiLine\nAttributeMacros:\n  - __capability\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel: false\n  AfterClass: false\n  AfterControlStatement: Never\n  AfterEnum: false\n  AfterFunction: true\n  AfterNamespace: false\n  AfterObjCDeclaration: false\n  AfterStruct: false\n  AfterUnion: false\n  AfterExternBlock: false\n  BeforeCatch: false\n  BeforeElse: false\n  BeforeLambdaBody: false\n  BeforeWhile: false\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: true\nBreakBeforeBraces: WebKit\nBreakBeforeInheritanceComma: true\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit: 100\nCommentPragmas: \"^ IWYU pragma:\"\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDeriveLineEnding: true\nDerivePointerAlignment: true\nDisableFormat: false\nEmptyLineBeforeAccessModifier: LogicalBlock\nExperimentalAutoDetectBinPacking: true\nFixNamespaceComments: false\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nStatementAttributeLikeMacros:\n  - Q_EMIT\nIncludeBlocks: Preserve\nIncludeCategories:\n  - Regex: '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority: 2\n    SortPriority: 0\n    CaseSensitive: false\n  - Regex: '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority: 3\n    SortPriority: 0\n    CaseSensitive: false\n  - Regex: \".*\"\n    Priority: 1\n    SortPriority: 0\n    CaseSensitive: false\nIncludeIsMainRegex: \"(Test)?$\"\nIncludeIsMainSourceRegex: \"\"\nIndentCaseLabels: false\nIndentCaseBlocks: false\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentExternBlock: AfterExternBlock\nIndentRequires: false\nIndentWidth: 4\nIndentWrappedFunctionNames: false\nInsertTrailingCommas: None\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: \"\"\nMacroBlockEnd: \"\"\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: Inner\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 4\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: true\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPenaltyIndentedWhitespace: 0\nPointerAlignment: Left\nReflowComments: true\nSortIncludes: true\nSortJavaStaticImport: Before\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: true\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: true\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nBitFieldColonSpacing: Both\nStandard: Latest\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth: 4\nUseCRLF: false\nUseTab: Never\nWhitespaceSensitiveMacros:\n  - STRINGIZE\n  - PP_STRINGIZE\n  - BOOST_PP_STRINGIZE\n  - NS_SWIFT_NAME\n  - CF_SWIFT_NAME\n---\n\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0537109375,
          "content": "**\n\n!LICENSE\n!README.md\n!/share\n!/src\n!/CMakeLists.txt\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.208984375,
          "content": "*.dSYM\n*.exp\n*.gcda\n*.gcno\n*.la\n*.lo\n*.log\n*.mem\n*.o\n*.plist\n*.scan\n*.sdf\n*.status\n*.tar.*\n*~\n.DS_Store\n.deps\n.dirstamp\n.done\n.libs\nCMakeCache.txt\nCMakeFiles\nMakefile\ncmake_install.cmake\nminisign\nzig-cache\nzig-out\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.0986328125,
          "content": "cmake_minimum_required(VERSION 2.8.12)\n\nproject(minisign C)\n\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"minisign\")\nset(CPACK_PACKAGE_VENDOR \"Frank Denis\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\")\nset(CPACK_PACKAGE_VERSION_MAJOR \"0\")\nset(CPACK_PACKAGE_VERSION_MINOR \"11\")\nset(CPACK_PACKAGE_VERSION_PATCH \"0\")\nset(\n  CPACK_SOURCE_PACKAGE_FILE_NAME\n  \"${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}\"\n  )\nset(\n  CPACK_SOURCE_IGNORE_FILES\n  \"/build/;minisign.key;minisign.pub;a.out;/.git/;~$;${CPACK_SOURCE_IGNORE_FILES}\"\n  )\nset(CPACK_PACKAGE_EXECUTABLES \"minisign\" \"minisign\")\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(\n    CMAKE_BUILD_TYPE\n    MinSizeRel\n    CACHE\n      STRING\n      \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.\"\n      FORCE)\nendif(NOT CMAKE_BUILD_TYPE)\n\ninclude(CPack)\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D_ALL_SOURCE -D_GNU_SOURCE\")\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\")\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\nif(BUILD_STATIC_EXECUTABLES)\n  set(STATIC_LIBSODIUM on)\n  if (NOT APPLE)\n    set(CMAKE_EXE_LINKER_FLAGS -static)\n  endif (NOT APPLE)\nendif(BUILD_STATIC_EXECUTABLES)\n\nadd_executable(minisign\n               src/base64.c\n               src/get_line.c\n               src/helpers.c\n               src/minisign.c)\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(LIBSODIUM libsodium)\n\nif(STATIC_LIBSODIUM)\n  if(BUILD_STATIC_EXECUTABLES)\n    set_target_properties(minisign PROPERTIES LINK_SEARCH_START_STATIC 1)\n    set_target_properties(minisign PROPERTIES LINK_SEARCH_END_STATIC 1)\n  endif()\n  set(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a ${CMAKE_FIND_LIBRARY_SUFFIXES})\nendif()\n\nfind_path(SODIUM_INCLUDE_DIR sodium.h HINTS ${LIBSODIUM_INCLUDE_DIRS} /usr/local/include /opt/local/include /opt/include)\nfind_library(SODIUM_LIBRARY NAMES sodium HINTS ${LIBSODIUM_LIBRARY_DIRS} /usr/local/lib /opt/local/lib /opt/lib)\n\nif(STATIC_LIBSODIUM)\n  set(LIBSODIUM_CFLAGS_OTHER ${LIBSODIUM_STATIC_CFLAGS_OTHER})\n  set(LIBSODIUM_LDFLAGS_OTHER ${LIBSODIUM_STATIC_LDFLAGS_OTHER})\nendif()\n\ntarget_include_directories(minisign PUBLIC ${SODIUM_INCLUDE_DIR})\ntarget_compile_options(minisign PUBLIC ${LIBSODIUM_CFLAGS} ${LIBSODIUM_CFLAGS_OTHER})\ntarget_link_libraries(minisign ${SODIUM_LIBRARY} ${LIBSODIUM_LDFLAGS_OTHER})\n\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\nif(THREADS_HAVE_PTHREAD_ARG)\n  target_compile_options(minisign PUBLIC \"-pthread\")\nendif(THREADS_HAVE_PTHREAD_ARG)\nif(CMAKE_THREAD_LIBS_INIT)\n  target_link_libraries(minisign \"${CMAKE_THREAD_LIBS_INIT}\")\nendif(CMAKE_THREAD_LIBS_INIT)\n\nif (NOT MSVC AND CMAKE_STRIP)\n  add_custom_command(TARGET minisign POST_BUILD\n    COMMAND ${CMAKE_STRIP} ${STRIP_FLAGS} $<TARGET_FILE:minisign>)\nendif(NOT MSVC AND CMAKE_STRIP)\n\ninstall(TARGETS minisign DESTINATION bin)\n\ninclude(GNUInstallDirs)\n\ninstall(FILES \"share/man/man1/minisign.1\"\n        DESTINATION \"${CMAKE_INSTALL_MANDIR}/man1\"\n        COMPONENT doc)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.697265625,
          "content": "FROM alpine:latest as build\n\nWORKDIR /usr/src/minisign\n\nRUN apk add --no-cache build-base cmake curl pkgconfig\nRUN apk add --no-cache upx ||:\nRUN curl https://download.libsodium.org/libsodium/releases/LATEST.tar.gz | tar xzvf - && cd libsodium-stable && env CFLAGS=\"-Os\" CPPFLAGS=\"-DED25519_NONDETERMINISTIC=1\" ./configure --disable-dependency-tracking && make -j$(nproc) check && make install && cd .. && rm -fr libsodium-stable\n\nCOPY ./ ./\nRUN mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_STATIC_EXECUTABLES=1 .. && make -j$(nproc)\nRUN upx --lzma build/minisign ||:\n\nFROM scratch\nCOPY --from=build /usr/src/minisign/build/minisign /usr/local/bin/\nENTRYPOINT [\"/usr/local/bin/minisign\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.7998046875,
          "content": "ISC LICENSE.\n\n/*\n * Copyright (c) 2015-2024\n * Frank Denis <j at pureftpd dot org>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.73046875,
          "content": "![CodeQL scan](https://github.com/jedisct1/minisign/workflows/CodeQL%20scan/badge.svg)\n\nMinisign\n========\n\nMinisign is a dead simple tool to sign files and verify signatures.\n\nFor more information, please refer to the\n[Minisign documentation](https://jedisct1.github.io/minisign/)\n\nTarballs and pre-compiled binaries can be verified with the following\npublic key:\n\n    RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3\n\nCompilation / installation\n--------------------------\n\n## Using [Zig](https://ziglang.org):\n\nDependencies:\n\n* [libsodium](https://libsodium.org/)\n\nCompilation:\n\n    $ zig build -Drelease\n\n## Using cmake and gcc or clang:\n\n* [libsodium](https://libsodium.org/)\n* cmake\n* pkg-config\n* gcc or clang\n\nCompilation:\n\n    $ mkdir build\n    $ cd build\n    $ cmake ..\n    $ make\n    # make install\n\nAlternative configuration for static binaries:\n\n    $ cmake -D STATIC_LIBSODIUM=1 ..\n\nor:\n\n    $ cmake -D BUILD_STATIC_EXECUTABLES=1 ..\n\nMinisign is also available in Homebrew:\n\n    $ brew install minisign\n\nMinisign is also available in Scoop on Windows:\n\n    $ scoop install minisign\n\nMinisign is also available in chocolatey on Windows:\n\n    $ choco install minisign\n\nMinisign is also available with docker:\n\n    $ docker run -i --rm jedisct1/minisign\n\nFor example, verifying a signature using the docker image can be done\nwith:\n\n    $ docker run -v .:/minisign -e HOME=/minisign -w /minisign \\\n      -it --rm jedisct1/minisign \\\n      -Vm file_to_verify -p minisign.pub\n\nThe image can be verified with the following cosign public key:\n\n```text\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExjZWrlc6c58W7ZzmQnx6mugty99C\nOQTDtJeciX9LF9hEbs1J1fzZHRdRhV4OTqcq0jTW9PXnrSSZlk1fbkE/5w==\n-----END PUBLIC KEY-----\n```\n\nAdditional tools, libraries and implementations\n-----------------------------------------------\n\n* [minizign](https://github.com/jedisct1/zig-minisign) is a compact\nimplementation in Zig, that can also use ssh-encoded keys.\n* [minisign-misc](https://github.com/JayBrown/minisign-misc) is a very\nnice set of workflows and scripts for macOS to verify and sign files\nwith minisign.\n* [go-minisign](https://github.com/jedisct1/go-minisign) is a small module\nin Go to verify Minisign signatures.\n* [rust-minisign](https://github.com/jedisct1/rust-minisign) is a Minisign\nlibrary written in pure Rust, that can be embedded in other applications.\n* [rsign2](https://github.com/jedisct1/rsign2) is a reimplementation of\nthe command-line tool in Rust.\n* [minisign (go)](https://github.com/aead/minisign) is a rewrite of Minisign\nin the Go language. It reimplements the CLI but can also be used as a library.\n* [minisign-verify](https://github.com/jedisct1/rust-minisign-verify) is\na small Rust crate to verify Minisign signatures.\n* [minisign-net](https://github.com/bitbeans/minisign-net) is a .NET library\nto handle and create Minisign signatures.\n* [minisign](https://github.com/chm-diederichs/minisign) a Javascript\nimplementation.\n* WebAssembly implementations of [rsign2](https://wapm.io/package/jedisct1/rsign2)\nand [minisign-cli](https://wapm.io/package/jedisct1/minisign) are available on\nWAPM.\n* [minisign-php](https://github.com/soatok/minisign-php) is a PHP implementation.\n* [py-minisign](https://github.com/x13a/py-minisign) is a Python\nimplementation.\n* [minisign](https://hexdocs.pm/minisign/Minisign.html) is an Elixir implementation\n  (verification only)\n\nSignature determinism\n---------------------\n\nThis implementation uses deterministic signatures, unless libsodium\nwas compiled with the `ED25519_NONDETERMINISTIC` macro defined. This\nadds random noise to the computation of EdDSA nonces.\n\nOther implementations can choose to use non-deterministic signatures\nby default. They will remain fully interoperable with implementations\nusing deterministic signatures.\n"
        },
        {
          "name": "build-dist-package.sh",
          "type": "blob",
          "size": 0.091796875,
          "content": "#! /bin/sh\n\ntar czpvf minisign-0.11.tar.gz $(git ls-files)\nminisign -Sm minisign-0.11.tar.gz\n\n"
        },
        {
          "name": "build.zig",
          "type": "blob",
          "size": 1,
          "content": "const std = @import(\"std\");\n\npub fn build(b: *std.Build) !void {\n    const target = b.standardTargetOptions(.{});\n    const optimize = b.standardOptimizeOption(.{ .preferred_optimize_mode = .ReleaseSmall });\n\n    const minisign = b.addExecutable(.{\n        .name = \"minisign\",\n        .target = target,\n        .optimize = optimize,\n        .strip = true,\n    });\n    minisign.linkLibC();\n    minisign.addLibraryPath(.{ .cwd_relative = \"/opt/homebrew/lib\" });\n    minisign.addLibraryPath(.{ .cwd_relative = \"/usr/local/lib\" });\n    minisign.linkSystemLibrary(\"sodium\");\n\n    minisign.addIncludePath(b.path(\"src\"));\n    minisign.addSystemIncludePath(.{ .cwd_relative = \"/opt/homebrew/include\" });\n    minisign.addSystemIncludePath(.{ .cwd_relative = \"/usr/local/include\" });\n    minisign.root_module.addCMacro(\"_GNU_SOURCE\", \"1\");\n    const source_files = &.{ \"src/base64.c\", \"src/get_line.c\", \"src/helpers.c\", \"src/minisign.c\" };\n    minisign.addCSourceFiles(.{ .files = source_files });\n\n    b.installArtifact(minisign);\n}\n"
        },
        {
          "name": "cosign.pub",
          "type": "blob",
          "size": 0.173828125,
          "content": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExjZWrlc6c58W7ZzmQnx6mugty99C\nOQTDtJeciX9LF9hEbs1J1fzZHRdRhV4OTqcq0jTW9PXnrSSZlk1fbkE/5w==\n-----END PUBLIC KEY-----\n"
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}