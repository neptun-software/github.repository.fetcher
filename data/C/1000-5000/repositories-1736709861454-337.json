{
  "metadata": {
    "timestamp": 1736709861454,
    "page": 337,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fancycode/MemoryModule",
      "stars": 2867,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.13671875,
          "content": "* text=auto\n\n# Native line endings.\n*.c text\n*.cpp text\n*.h text\n*.rc text\n\n# Windows line endings.\n*.bat text eol=crlf\n*.eln text eol=crlf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": "*.o\n*.obj\n*.exe\ntests/*.dll\ntests/*.res\n\ntests/SampleExports.cpp\ntests/SampleExports.h\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.0068359375,
          "content": "sudo: true\n\nmatrix:\n  include:\n    - env: PLATFORM=x86_64 UNICODE=  CMAKE= WINE_PACKAGE=winehq-stable:amd64\n      addons:\n        apt:\n          packages:\n            - binutils-mingw-w64-x86-64\n            - mingw-w64-x86-64-dev\n            - g++-mingw-w64-x86-64\n            - gcc-mingw-w64-x86-64\n    - env: PLATFORM=i686   UNICODE=  CMAKE= WINE_PACKAGE=winehq-stable:i386\n      addons:\n        apt:\n          packages:\n            - binutils-mingw-w64-i686\n            - mingw-w64-i686-dev\n            - g++-mingw-w64-i686\n            - gcc-mingw-w64-i686\n    - env: PLATFORM=x86_64 UNICODE=1 CMAKE= WINE_PACKAGE=winehq-stable:amd64\n      addons:\n        apt:\n          packages:\n            - binutils-mingw-w64-x86-64\n            - mingw-w64-x86-64-dev\n            - g++-mingw-w64-x86-64\n            - gcc-mingw-w64-x86-64\n    - env: PLATFORM=i686   UNICODE=1 CMAKE= WINE_PACKAGE=winehq-stable:i386\n      addons:\n        apt:\n          packages:\n            - binutils-mingw-w64-i686\n            - mingw-w64-i686-dev\n            - g++-mingw-w64-i686\n            - gcc-mingw-w64-i686\n    - env: PLATFORM=x86_64 UNICODE=  CMAKE=1 WINE_PACKAGE=winehq-stable:amd64\n      addons:\n        apt:\n          packages:\n            - binutils-mingw-w64-x86-64\n            - mingw-w64-x86-64-dev\n            - g++-mingw-w64-x86-64\n            - gcc-mingw-w64-x86-64\n    - env: PLATFORM=i686   UNICODE=  CMAKE=1 WINE_PACKAGE=winehq-stable:i386\n      addons:\n        apt:\n          packages:\n            - binutils-mingw-w64-i686\n            - cmake\n            - mingw-w64-i686-dev\n            - g++-mingw-w64-i686\n            - gcc-mingw-w64-i686\n    - env: PLATFORM=x86_64 UNICODE=1 CMAKE=1 WINE_PACKAGE=winehq-stable:amd64\n      addons:\n        apt:\n          packages:\n            - binutils-mingw-w64-x86-64\n            - cmake\n            - mingw-w64-x86-64-dev\n            - g++-mingw-w64-x86-64\n            - gcc-mingw-w64-x86-64\n    - env: PLATFORM=i686   UNICODE=1 CMAKE=1 WINE_PACKAGE=winehq-stable:i386\n      addons:\n        apt:\n          packages:\n            - binutils-mingw-w64-i686\n            - cmake\n            - mingw-w64-i686-dev\n            - g++-mingw-w64-i686\n            - gcc-mingw-w64-i686\n\nlanguage: cpp\n\ndist: xenial\n\ncache:\n  - apt\n  - ccache\n\nbefore_script:\n  - curl https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -\n  - echo \"deb https://dl.winehq.org/wine-builds/ubuntu/ xenial main\" | sudo tee /etc/apt/sources.list.d/winehq.list\n  - sudo apt-get -y update && sudo apt-get -y install --install-recommends $WINE_PACKAGE\n  - if [ ! -z \"$CMAKE\" ]; then cmake -DPLATFORM=$PLATFORM -DUNICODE=$UNICODE -DTESTSUITE=ON -H. -B.; fi\n\nscript:\n  - if [ -z \"$CMAKE\" ]; then make PLATFORM=$PLATFORM UNICODE=$UNICODE; fi\n  - if [ -z \"$CMAKE\" ]; then make test PLATFORM=$PLATFORM UNICODE=$UNICODE; fi\n  - if [ ! -z \"$CMAKE\" ]; then cmake --build .; fi\n  - cd example/DllLoader\n  - ../../tests/runwine.sh $PLATFORM ./DllLoader.exe\n  - ../../tests/runwine.sh $PLATFORM ./DllLoaderLoader.exe\n  - cd ../../tests\n  - ./runwine.sh $PLATFORM ./TestSuite.exe\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.8076171875,
          "content": "project (MemoryModule)\ncmake_minimum_required (VERSION 2.8.7)\n\nset (PLATFORM \"x86_64\" CACHE STRING \"Platform to compile for\")\nmessage (STATUS \"Compile for ${PLATFORM} platform\")\n\nif (NOT MSVC)\n    set (CMAKE_SYSTEM_NAME Windows)\n    set (CMAKE_POSITION_INDEPENDENT_CODE False)\n\n    set (COMPILER_PREFIX \"${PLATFORM}-w64-mingw32\")\n    set (CMAKE_C_COMPILER \"${COMPILER_PREFIX}-gcc\")\n    set (CMAKE_CXX_COMPILER \"${COMPILER_PREFIX}-g++\")\n    set (CMAKE_RC_COMPILER \"${COMPILER_PREFIX}-windres\")\n    set (CMAKE_AR \"${COMPILER_PREFIX}-ar\")\n    set (CMAKE_RANLIB \"${COMPILER_PREFIX}-ranlib\")\n\n    set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n    set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n    set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n\n    set (CMAKE_SHARED_LIBRARY_LINK_C_FLAGS \"\")\n    set (CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS \"\")\n\n    set (CMAKE_RC_COMPILE_OBJECT \"${CMAKE_RC_COMPILER} -O coff -I${CMAKE_CURRENT_SOURCE_DIR} <SOURCE> <OBJECT>\")\nendif ()\n\nif (NOT MSVC)\n    add_definitions (\"-Wall\")\nelse ()\n    # Show level 4 warnings.\n    add_definitions (\"-W4\")\nendif ()\n\noption(UNICODE \"Compile with UNICODE support\" OFF)\nif (UNICODE)\n    message (STATUS \"Compile with UNICODE support\")\n    add_definitions (\"-DUNICODE\" \"-D_UNICODE\")\nelse ()\n    message (STATUS \"Compile without UNICODE support\")\nendif ()\n\noption(TESTSUITE \"Compile with TESTSUITE support\" OFF)\nif (TESTSUITE)\n    message (STATUS \"Compile with TESTSUITE support\")\n    add_definitions (\"-DTESTSUITE\")\nelse ()\n    message (STATUS \"Compile without TESTSUITE support\")\nendif ()\n\nadd_library (MemoryModule STATIC MemoryModule.c MemoryModule.h)\ntarget_include_directories(MemoryModule PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}\")\nif (NOT MSVC)\n    set_target_properties (\"MemoryModule\" PROPERTIES PREFIX \"\")\nendif ()\n\nadd_subdirectory (example)\nadd_subdirectory (tests)\n\nenable_language (RC)\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 16.333984375,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2783203125,
          "content": "SUBDIRS = example tests\n\n.PHONY: subdirs $(SUBDIRS)\n\nsubdirs: $(SUBDIRS)\n\n$(SUBDIRS):\n\t$(MAKE) -C $@\n\nCLEANDIRS = $(SUBDIRS:%=clean-%)\n\nclean: $(CLEANDIRS)\n$(CLEANDIRS): \n\t$(MAKE) -C $(@:clean-%=%) clean\n\ntest:\n\t$(MAKE) -C tests test\n\n.PHONY: subdirs $(INSTALLDIRS)\n.PHONY: clean test\n"
        },
        {
          "name": "MemoryModule.c",
          "type": "blob",
          "size": 38.833984375,
          "content": "/*\n * Memory DLL loading code\n * Version 0.0.4\n *\n * Copyright (c) 2004-2015 by Joachim Bauch / mail@joachim-bauch.de\n * http://www.joachim-bauch.de\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is MemoryModule.c\n *\n * The Initial Developer of the Original Code is Joachim Bauch.\n *\n * Portions created by Joachim Bauch are Copyright (C) 2004-2015\n * Joachim Bauch. All Rights Reserved.\n *\n *\n * THeller: Added binary search in MemoryGetProcAddress function\n * (#define USE_BINARY_SEARCH to enable it).  This gives a very large\n * speedup for libraries that exports lots of functions.\n *\n * These portions are Copyright (C) 2013 Thomas Heller.\n */\n\n#include <windows.h>\n#include <winnt.h>\n#include <stddef.h>\n#include <tchar.h>\n#ifdef DEBUG_OUTPUT\n#include <stdio.h>\n#endif\n\n#if _MSC_VER\n// Disable warning about data -> function pointer conversion\n#pragma warning(disable:4055)\n // C4244: conversion from 'uintptr_t' to 'DWORD', possible loss of data.\n#pragma warning(error: 4244)\n// C4267: conversion from 'size_t' to 'int', possible loss of data.\n#pragma warning(error: 4267)\n\n#define inline __inline\n#endif\n\n#ifndef IMAGE_SIZEOF_BASE_RELOCATION\n// Vista SDKs no longer define IMAGE_SIZEOF_BASE_RELOCATION!?\n#define IMAGE_SIZEOF_BASE_RELOCATION (sizeof(IMAGE_BASE_RELOCATION))\n#endif\n\n#ifdef _WIN64\n#define HOST_MACHINE IMAGE_FILE_MACHINE_AMD64\n#else\n#define HOST_MACHINE IMAGE_FILE_MACHINE_I386\n#endif\n\n#include \"MemoryModule.h\"\n\nstruct ExportNameEntry {\n    LPCSTR name;\n    WORD idx;\n};\n\ntypedef BOOL (WINAPI *DllEntryProc)(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved);\ntypedef int (WINAPI *ExeEntryProc)(void);\n\n#ifdef _WIN64\ntypedef struct POINTER_LIST {\n    struct POINTER_LIST *next;\n    void *address;\n} POINTER_LIST;\n#endif\n\ntypedef struct {\n    PIMAGE_NT_HEADERS headers;\n    unsigned char *codeBase;\n    HCUSTOMMODULE *modules;\n    int numModules;\n    BOOL initialized;\n    BOOL isDLL;\n    BOOL isRelocated;\n    CustomAllocFunc alloc;\n    CustomFreeFunc free;\n    CustomLoadLibraryFunc loadLibrary;\n    CustomGetProcAddressFunc getProcAddress;\n    CustomFreeLibraryFunc freeLibrary;\n    struct ExportNameEntry *nameExportsTable;\n    void *userdata;\n    ExeEntryProc exeEntry;\n    DWORD pageSize;\n#ifdef _WIN64\n    POINTER_LIST *blockedMemory;\n#endif\n} MEMORYMODULE, *PMEMORYMODULE;\n\ntypedef struct {\n    LPVOID address;\n    LPVOID alignedAddress;\n    SIZE_T size;\n    DWORD characteristics;\n    BOOL last;\n} SECTIONFINALIZEDATA, *PSECTIONFINALIZEDATA;\n\n#define GET_HEADER_DICTIONARY(module, idx)  &(module)->headers->OptionalHeader.DataDirectory[idx]\n\nstatic inline uintptr_t\nAlignValueDown(uintptr_t value, uintptr_t alignment) {\n    return value & ~(alignment - 1);\n}\n\nstatic inline LPVOID\nAlignAddressDown(LPVOID address, uintptr_t alignment) {\n    return (LPVOID) AlignValueDown((uintptr_t) address, alignment);\n}\n\nstatic inline size_t\nAlignValueUp(size_t value, size_t alignment) {\n    return (value + alignment - 1) & ~(alignment - 1);\n}\n\nstatic inline void*\nOffsetPointer(void* data, ptrdiff_t offset) {\n    return (void*) ((uintptr_t) data + offset);\n}\n\nstatic inline void\nOutputLastError(const char *msg)\n{\n#ifndef DEBUG_OUTPUT\n    UNREFERENCED_PARAMETER(msg);\n#else\n    LPVOID tmp;\n    char *tmpmsg;\n    FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,\n        NULL, GetLastError(), MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), (LPTSTR)&tmp, 0, NULL);\n    tmpmsg = (char *)LocalAlloc(LPTR, strlen(msg) + strlen(tmp) + 3);\n    sprintf(tmpmsg, \"%s: %s\", msg, tmp);\n    OutputDebugString(tmpmsg);\n    LocalFree(tmpmsg);\n    LocalFree(tmp);\n#endif\n}\n\n#ifdef _WIN64\nstatic void\nFreePointerList(POINTER_LIST *head, CustomFreeFunc freeMemory, void *userdata)\n{\n    POINTER_LIST *node = head;\n    while (node) {\n        POINTER_LIST *next;\n        freeMemory(node->address, 0, MEM_RELEASE, userdata);\n        next = node->next;\n        free(node);\n        node = next;\n    }\n}\n#endif\n\nstatic BOOL\nCheckSize(size_t size, size_t expected) {\n    if (size < expected) {\n        SetLastError(ERROR_INVALID_DATA);\n        return FALSE;\n    }\n\n    return TRUE;\n}\n\nstatic BOOL\nCopySections(const unsigned char *data, size_t size, PIMAGE_NT_HEADERS old_headers, PMEMORYMODULE module)\n{\n    int i, section_size;\n    unsigned char *codeBase = module->codeBase;\n    unsigned char *dest;\n    PIMAGE_SECTION_HEADER section = IMAGE_FIRST_SECTION(module->headers);\n    for (i=0; i<module->headers->FileHeader.NumberOfSections; i++, section++) {\n        if (section->SizeOfRawData == 0) {\n            // section doesn't contain data in the dll itself, but may define\n            // uninitialized data\n            section_size = old_headers->OptionalHeader.SectionAlignment;\n            if (section_size > 0) {\n                dest = (unsigned char *)module->alloc(codeBase + section->VirtualAddress,\n                    section_size,\n                    MEM_COMMIT,\n                    PAGE_READWRITE,\n                    module->userdata);\n                if (dest == NULL) {\n                    return FALSE;\n                }\n\n                // Always use position from file to support alignments smaller\n                // than page size (allocation above will align to page size).\n                dest = codeBase + section->VirtualAddress;\n                // NOTE: On 64bit systems we truncate to 32bit here but expand\n                // again later when \"PhysicalAddress\" is used.\n                section->Misc.PhysicalAddress = (DWORD) ((uintptr_t) dest & 0xffffffff);\n                memset(dest, 0, section_size);\n            }\n\n            // section is empty\n            continue;\n        }\n\n        if (!CheckSize(size, section->PointerToRawData + section->SizeOfRawData)) {\n            return FALSE;\n        }\n\n        // commit memory block and copy data from dll\n        dest = (unsigned char *)module->alloc(codeBase + section->VirtualAddress,\n                            section->SizeOfRawData,\n                            MEM_COMMIT,\n                            PAGE_READWRITE,\n                            module->userdata);\n        if (dest == NULL) {\n            return FALSE;\n        }\n\n        // Always use position from file to support alignments smaller\n        // than page size (allocation above will align to page size).\n        dest = codeBase + section->VirtualAddress;\n        memcpy(dest, data + section->PointerToRawData, section->SizeOfRawData);\n        // NOTE: On 64bit systems we truncate to 32bit here but expand\n        // again later when \"PhysicalAddress\" is used.\n        section->Misc.PhysicalAddress = (DWORD) ((uintptr_t) dest & 0xffffffff);\n    }\n\n    return TRUE;\n}\n\n// Protection flags for memory pages (Executable, Readable, Writeable)\nstatic int ProtectionFlags[2][2][2] = {\n    {\n        // not executable\n        {PAGE_NOACCESS, PAGE_WRITECOPY},\n        {PAGE_READONLY, PAGE_READWRITE},\n    }, {\n        // executable\n        {PAGE_EXECUTE, PAGE_EXECUTE_WRITECOPY},\n        {PAGE_EXECUTE_READ, PAGE_EXECUTE_READWRITE},\n    },\n};\n\nstatic SIZE_T\nGetRealSectionSize(PMEMORYMODULE module, PIMAGE_SECTION_HEADER section) {\n    DWORD size = section->SizeOfRawData;\n    if (size == 0) {\n        if (section->Characteristics & IMAGE_SCN_CNT_INITIALIZED_DATA) {\n            size = module->headers->OptionalHeader.SizeOfInitializedData;\n        } else if (section->Characteristics & IMAGE_SCN_CNT_UNINITIALIZED_DATA) {\n            size = module->headers->OptionalHeader.SizeOfUninitializedData;\n        }\n    }\n    return (SIZE_T) size;\n}\n\nstatic BOOL\nFinalizeSection(PMEMORYMODULE module, PSECTIONFINALIZEDATA sectionData) {\n    DWORD protect, oldProtect;\n    BOOL executable;\n    BOOL readable;\n    BOOL writeable;\n\n    if (sectionData->size == 0) {\n        return TRUE;\n    }\n\n    if (sectionData->characteristics & IMAGE_SCN_MEM_DISCARDABLE) {\n        // section is not needed any more and can safely be freed\n        if (sectionData->address == sectionData->alignedAddress &&\n            (sectionData->last ||\n             module->headers->OptionalHeader.SectionAlignment == module->pageSize ||\n             (sectionData->size % module->pageSize) == 0)\n           ) {\n            // Only allowed to decommit whole pages\n            module->free(sectionData->address, sectionData->size, MEM_DECOMMIT, module->userdata);\n        }\n        return TRUE;\n    }\n\n    // determine protection flags based on characteristics\n    executable = (sectionData->characteristics & IMAGE_SCN_MEM_EXECUTE) != 0;\n    readable =   (sectionData->characteristics & IMAGE_SCN_MEM_READ) != 0;\n    writeable =  (sectionData->characteristics & IMAGE_SCN_MEM_WRITE) != 0;\n    protect = ProtectionFlags[executable][readable][writeable];\n    if (sectionData->characteristics & IMAGE_SCN_MEM_NOT_CACHED) {\n        protect |= PAGE_NOCACHE;\n    }\n\n    // change memory access flags\n    if (VirtualProtect(sectionData->address, sectionData->size, protect, &oldProtect) == 0) {\n        OutputLastError(\"Error protecting memory page\");\n        return FALSE;\n    }\n\n    return TRUE;\n}\n\nstatic BOOL\nFinalizeSections(PMEMORYMODULE module)\n{\n    int i;\n    PIMAGE_SECTION_HEADER section = IMAGE_FIRST_SECTION(module->headers);\n#ifdef _WIN64\n    // \"PhysicalAddress\" might have been truncated to 32bit above, expand to\n    // 64bits again.\n    uintptr_t imageOffset = ((uintptr_t) module->headers->OptionalHeader.ImageBase & 0xffffffff00000000);\n#else\n    static const uintptr_t imageOffset = 0;\n#endif\n    SECTIONFINALIZEDATA sectionData;\n    sectionData.address = (LPVOID)((uintptr_t)section->Misc.PhysicalAddress | imageOffset);\n    sectionData.alignedAddress = AlignAddressDown(sectionData.address, module->pageSize);\n    sectionData.size = GetRealSectionSize(module, section);\n    sectionData.characteristics = section->Characteristics;\n    sectionData.last = FALSE;\n    section++;\n\n    // loop through all sections and change access flags\n    for (i=1; i<module->headers->FileHeader.NumberOfSections; i++, section++) {\n        LPVOID sectionAddress = (LPVOID)((uintptr_t)section->Misc.PhysicalAddress | imageOffset);\n        LPVOID alignedAddress = AlignAddressDown(sectionAddress, module->pageSize);\n        SIZE_T sectionSize = GetRealSectionSize(module, section);\n        // Combine access flags of all sections that share a page\n        // TODO(fancycode): We currently share flags of a trailing large section\n        //   with the page of a first small section. This should be optimized.\n        if (sectionData.alignedAddress == alignedAddress || (uintptr_t) sectionData.address + sectionData.size > (uintptr_t) alignedAddress) {\n            // Section shares page with previous\n            if ((section->Characteristics & IMAGE_SCN_MEM_DISCARDABLE) == 0 || (sectionData.characteristics & IMAGE_SCN_MEM_DISCARDABLE) == 0) {\n                sectionData.characteristics = (sectionData.characteristics | section->Characteristics) & ~IMAGE_SCN_MEM_DISCARDABLE;\n            } else {\n                sectionData.characteristics |= section->Characteristics;\n            }\n            sectionData.size = (((uintptr_t)sectionAddress) + ((uintptr_t) sectionSize)) - (uintptr_t) sectionData.address;\n            continue;\n        }\n\n        if (!FinalizeSection(module, &sectionData)) {\n            return FALSE;\n        }\n        sectionData.address = sectionAddress;\n        sectionData.alignedAddress = alignedAddress;\n        sectionData.size = sectionSize;\n        sectionData.characteristics = section->Characteristics;\n    }\n    sectionData.last = TRUE;\n    if (!FinalizeSection(module, &sectionData)) {\n        return FALSE;\n    }\n    return TRUE;\n}\n\nstatic BOOL\nExecuteTLS(PMEMORYMODULE module)\n{\n    unsigned char *codeBase = module->codeBase;\n    PIMAGE_TLS_DIRECTORY tls;\n    PIMAGE_TLS_CALLBACK* callback;\n\n    PIMAGE_DATA_DIRECTORY directory = GET_HEADER_DICTIONARY(module, IMAGE_DIRECTORY_ENTRY_TLS);\n    if (directory->VirtualAddress == 0) {\n        return TRUE;\n    }\n\n    tls = (PIMAGE_TLS_DIRECTORY) (codeBase + directory->VirtualAddress);\n    callback = (PIMAGE_TLS_CALLBACK *) tls->AddressOfCallBacks;\n    if (callback) {\n        while (*callback) {\n            (*callback)((LPVOID) codeBase, DLL_PROCESS_ATTACH, NULL);\n            callback++;\n        }\n    }\n    return TRUE;\n}\n\nstatic BOOL\nPerformBaseRelocation(PMEMORYMODULE module, ptrdiff_t delta)\n{\n    unsigned char *codeBase = module->codeBase;\n    PIMAGE_BASE_RELOCATION relocation;\n\n    PIMAGE_DATA_DIRECTORY directory = GET_HEADER_DICTIONARY(module, IMAGE_DIRECTORY_ENTRY_BASERELOC);\n    if (directory->Size == 0) {\n        return (delta == 0);\n    }\n\n    relocation = (PIMAGE_BASE_RELOCATION) (codeBase + directory->VirtualAddress);\n    for (; relocation->VirtualAddress > 0; ) {\n        DWORD i;\n        unsigned char *dest = codeBase + relocation->VirtualAddress;\n        unsigned short *relInfo = (unsigned short*) OffsetPointer(relocation, IMAGE_SIZEOF_BASE_RELOCATION);\n        for (i=0; i<((relocation->SizeOfBlock-IMAGE_SIZEOF_BASE_RELOCATION) / 2); i++, relInfo++) {\n            // the upper 4 bits define the type of relocation\n            int type = *relInfo >> 12;\n            // the lower 12 bits define the offset\n            int offset = *relInfo & 0xfff;\n\n            switch (type)\n            {\n            case IMAGE_REL_BASED_ABSOLUTE:\n                // skip relocation\n                break;\n\n            case IMAGE_REL_BASED_HIGHLOW:\n                // change complete 32 bit address\n                {\n                    DWORD *patchAddrHL = (DWORD *) (dest + offset);\n                    *patchAddrHL += (DWORD) delta;\n                }\n                break;\n\n#ifdef _WIN64\n            case IMAGE_REL_BASED_DIR64:\n                {\n                    ULONGLONG *patchAddr64 = (ULONGLONG *) (dest + offset);\n                    *patchAddr64 += (ULONGLONG) delta;\n                }\n                break;\n#endif\n\n            default:\n                //printf(\"Unknown relocation: %d\\n\", type);\n                break;\n            }\n        }\n\n        // advance to next relocation block\n        relocation = (PIMAGE_BASE_RELOCATION) OffsetPointer(relocation, relocation->SizeOfBlock);\n    }\n    return TRUE;\n}\n\nstatic BOOL\nBuildImportTable(PMEMORYMODULE module)\n{\n    unsigned char *codeBase = module->codeBase;\n    PIMAGE_IMPORT_DESCRIPTOR importDesc;\n    BOOL result = TRUE;\n\n    PIMAGE_DATA_DIRECTORY directory = GET_HEADER_DICTIONARY(module, IMAGE_DIRECTORY_ENTRY_IMPORT);\n    if (directory->Size == 0) {\n        return TRUE;\n    }\n\n    importDesc = (PIMAGE_IMPORT_DESCRIPTOR) (codeBase + directory->VirtualAddress);\n    for (; !IsBadReadPtr(importDesc, sizeof(IMAGE_IMPORT_DESCRIPTOR)) && importDesc->Name; importDesc++) {\n        uintptr_t *thunkRef;\n        FARPROC *funcRef;\n        HCUSTOMMODULE *tmp;\n        HCUSTOMMODULE handle = module->loadLibrary((LPCSTR) (codeBase + importDesc->Name), module->userdata);\n        if (handle == NULL) {\n            SetLastError(ERROR_MOD_NOT_FOUND);\n            result = FALSE;\n            break;\n        }\n\n        tmp = (HCUSTOMMODULE *) realloc(module->modules, (module->numModules+1)*(sizeof(HCUSTOMMODULE)));\n        if (tmp == NULL) {\n            module->freeLibrary(handle, module->userdata);\n            SetLastError(ERROR_OUTOFMEMORY);\n            result = FALSE;\n            break;\n        }\n        module->modules = tmp;\n\n        module->modules[module->numModules++] = handle;\n        if (importDesc->OriginalFirstThunk) {\n            thunkRef = (uintptr_t *) (codeBase + importDesc->OriginalFirstThunk);\n            funcRef = (FARPROC *) (codeBase + importDesc->FirstThunk);\n        } else {\n            // no hint table\n            thunkRef = (uintptr_t *) (codeBase + importDesc->FirstThunk);\n            funcRef = (FARPROC *) (codeBase + importDesc->FirstThunk);\n        }\n        for (; *thunkRef; thunkRef++, funcRef++) {\n            if (IMAGE_SNAP_BY_ORDINAL(*thunkRef)) {\n                *funcRef = module->getProcAddress(handle, (LPCSTR)IMAGE_ORDINAL(*thunkRef), module->userdata);\n            } else {\n                PIMAGE_IMPORT_BY_NAME thunkData = (PIMAGE_IMPORT_BY_NAME) (codeBase + (*thunkRef));\n                *funcRef = module->getProcAddress(handle, (LPCSTR)&thunkData->Name, module->userdata);\n            }\n            if (*funcRef == 0) {\n                result = FALSE;\n                break;\n            }\n        }\n\n        if (!result) {\n            module->freeLibrary(handle, module->userdata);\n            SetLastError(ERROR_PROC_NOT_FOUND);\n            break;\n        }\n    }\n\n    return result;\n}\n\nLPVOID MemoryDefaultAlloc(LPVOID address, SIZE_T size, DWORD allocationType, DWORD protect, void* userdata)\n{\n\tUNREFERENCED_PARAMETER(userdata);\n\treturn VirtualAlloc(address, size, allocationType, protect);\n}\n\nBOOL MemoryDefaultFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType, void* userdata)\n{\n\tUNREFERENCED_PARAMETER(userdata);\n\treturn VirtualFree(lpAddress, dwSize, dwFreeType);\n}\n\nHCUSTOMMODULE MemoryDefaultLoadLibrary(LPCSTR filename, void *userdata)\n{\n    HMODULE result;\n    UNREFERENCED_PARAMETER(userdata);\n    result = LoadLibraryA(filename);\n    if (result == NULL) {\n        return NULL;\n    }\n\n    return (HCUSTOMMODULE) result;\n}\n\nFARPROC MemoryDefaultGetProcAddress(HCUSTOMMODULE module, LPCSTR name, void *userdata)\n{\n    UNREFERENCED_PARAMETER(userdata);\n    return (FARPROC) GetProcAddress((HMODULE) module, name);\n}\n\nvoid MemoryDefaultFreeLibrary(HCUSTOMMODULE module, void *userdata)\n{\n    UNREFERENCED_PARAMETER(userdata);\n    FreeLibrary((HMODULE) module);\n}\n\nHMEMORYMODULE MemoryLoadLibrary(const void *data, size_t size)\n{\n    return MemoryLoadLibraryEx(data, size, MemoryDefaultAlloc, MemoryDefaultFree, MemoryDefaultLoadLibrary, MemoryDefaultGetProcAddress, MemoryDefaultFreeLibrary, NULL);\n}\n\nHMEMORYMODULE MemoryLoadLibraryEx(const void *data, size_t size,\n    CustomAllocFunc allocMemory,\n    CustomFreeFunc freeMemory,\n    CustomLoadLibraryFunc loadLibrary,\n    CustomGetProcAddressFunc getProcAddress,\n    CustomFreeLibraryFunc freeLibrary,\n    void *userdata)\n{\n    PMEMORYMODULE result = NULL;\n    PIMAGE_DOS_HEADER dos_header;\n    PIMAGE_NT_HEADERS old_header;\n    unsigned char *code, *headers;\n    ptrdiff_t locationDelta;\n    SYSTEM_INFO sysInfo;\n    PIMAGE_SECTION_HEADER section;\n    DWORD i;\n    size_t optionalSectionSize;\n    size_t lastSectionEnd = 0;\n    size_t alignedImageSize;\n#ifdef _WIN64\n    POINTER_LIST *blockedMemory = NULL;\n#endif\n\n    if (!CheckSize(size, sizeof(IMAGE_DOS_HEADER))) {\n        return NULL;\n    }\n    dos_header = (PIMAGE_DOS_HEADER)data;\n    if (dos_header->e_magic != IMAGE_DOS_SIGNATURE) {\n        SetLastError(ERROR_BAD_EXE_FORMAT);\n        return NULL;\n    }\n\n    if (!CheckSize(size, dos_header->e_lfanew + sizeof(IMAGE_NT_HEADERS))) {\n        return NULL;\n    }\n    old_header = (PIMAGE_NT_HEADERS)&((const unsigned char *)(data))[dos_header->e_lfanew];\n    if (old_header->Signature != IMAGE_NT_SIGNATURE) {\n        SetLastError(ERROR_BAD_EXE_FORMAT);\n        return NULL;\n    }\n\n    if (old_header->FileHeader.Machine != HOST_MACHINE) {\n        SetLastError(ERROR_BAD_EXE_FORMAT);\n        return NULL;\n    }\n\n    if (old_header->OptionalHeader.SectionAlignment & 1) {\n        // Only support section alignments that are a multiple of 2\n        SetLastError(ERROR_BAD_EXE_FORMAT);\n        return NULL;\n    }\n\n    section = IMAGE_FIRST_SECTION(old_header);\n    optionalSectionSize = old_header->OptionalHeader.SectionAlignment;\n    for (i=0; i<old_header->FileHeader.NumberOfSections; i++, section++) {\n        size_t endOfSection;\n        if (section->SizeOfRawData == 0) {\n            // Section without data in the DLL\n            endOfSection = section->VirtualAddress + optionalSectionSize;\n        } else {\n            endOfSection = section->VirtualAddress + section->SizeOfRawData;\n        }\n\n        if (endOfSection > lastSectionEnd) {\n            lastSectionEnd = endOfSection;\n        }\n    }\n\n    GetNativeSystemInfo(&sysInfo);\n    alignedImageSize = AlignValueUp(old_header->OptionalHeader.SizeOfImage, sysInfo.dwPageSize);\n    if (alignedImageSize != AlignValueUp(lastSectionEnd, sysInfo.dwPageSize)) {\n        SetLastError(ERROR_BAD_EXE_FORMAT);\n        return NULL;\n    }\n\n    // reserve memory for image of library\n    // XXX: is it correct to commit the complete memory region at once?\n    //      calling DllEntry raises an exception if we don't...\n    code = (unsigned char *)allocMemory((LPVOID)(old_header->OptionalHeader.ImageBase),\n        alignedImageSize,\n        MEM_RESERVE | MEM_COMMIT,\n        PAGE_READWRITE,\n        userdata);\n\n    if (code == NULL) {\n        // try to allocate memory at arbitrary position\n        code = (unsigned char *)allocMemory(NULL,\n            alignedImageSize,\n            MEM_RESERVE | MEM_COMMIT,\n            PAGE_READWRITE,\n            userdata);\n        if (code == NULL) {\n            SetLastError(ERROR_OUTOFMEMORY);\n            return NULL;\n        }\n    }\n\n#ifdef _WIN64\n    // Memory block may not span 4 GB boundaries.\n    while ((((uintptr_t) code) >> 32) < (((uintptr_t) (code + alignedImageSize)) >> 32)) {\n        POINTER_LIST *node = (POINTER_LIST*) malloc(sizeof(POINTER_LIST));\n        if (!node) {\n            freeMemory(code, 0, MEM_RELEASE, userdata);\n            FreePointerList(blockedMemory, freeMemory, userdata);\n            SetLastError(ERROR_OUTOFMEMORY);\n            return NULL;\n        }\n\n        node->next = blockedMemory;\n        node->address = code;\n        blockedMemory = node;\n\n        code = (unsigned char *)allocMemory(NULL,\n            alignedImageSize,\n            MEM_RESERVE | MEM_COMMIT,\n            PAGE_READWRITE,\n            userdata);\n        if (code == NULL) {\n            FreePointerList(blockedMemory, freeMemory, userdata);\n            SetLastError(ERROR_OUTOFMEMORY);\n            return NULL;\n        }\n    }\n#endif\n\n    result = (PMEMORYMODULE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(MEMORYMODULE));\n    if (result == NULL) {\n        freeMemory(code, 0, MEM_RELEASE, userdata);\n#ifdef _WIN64\n        FreePointerList(blockedMemory, freeMemory, userdata);\n#endif\n        SetLastError(ERROR_OUTOFMEMORY);\n        return NULL;\n    }\n\n    result->codeBase = code;\n    result->isDLL = (old_header->FileHeader.Characteristics & IMAGE_FILE_DLL) != 0;\n    result->alloc = allocMemory;\n    result->free = freeMemory;\n    result->loadLibrary = loadLibrary;\n    result->getProcAddress = getProcAddress;\n    result->freeLibrary = freeLibrary;\n    result->userdata = userdata;\n    result->pageSize = sysInfo.dwPageSize;\n#ifdef _WIN64\n    result->blockedMemory = blockedMemory;\n#endif\n\n    if (!CheckSize(size, old_header->OptionalHeader.SizeOfHeaders)) {\n        goto error;\n    }\n\n    // commit memory for headers\n    headers = (unsigned char *)allocMemory(code,\n        old_header->OptionalHeader.SizeOfHeaders,\n        MEM_COMMIT,\n        PAGE_READWRITE,\n        userdata);\n\n    // copy PE header to code\n    memcpy(headers, dos_header, old_header->OptionalHeader.SizeOfHeaders);\n    result->headers = (PIMAGE_NT_HEADERS)&((const unsigned char *)(headers))[dos_header->e_lfanew];\n\n    // update position\n    result->headers->OptionalHeader.ImageBase = (uintptr_t)code;\n\n    // copy sections from DLL file block to new memory location\n    if (!CopySections((const unsigned char *) data, size, old_header, result)) {\n        goto error;\n    }\n\n    // adjust base address of imported data\n    locationDelta = (ptrdiff_t)(result->headers->OptionalHeader.ImageBase - old_header->OptionalHeader.ImageBase);\n    if (locationDelta != 0) {\n        result->isRelocated = PerformBaseRelocation(result, locationDelta);\n    } else {\n        result->isRelocated = TRUE;\n    }\n\n    // load required dlls and adjust function table of imports\n    if (!BuildImportTable(result)) {\n        goto error;\n    }\n\n    // mark memory pages depending on section headers and release\n    // sections that are marked as \"discardable\"\n    if (!FinalizeSections(result)) {\n        goto error;\n    }\n\n    // TLS callbacks are executed BEFORE the main loading\n    if (!ExecuteTLS(result)) {\n        goto error;\n    }\n\n    // get entry point of loaded library\n    if (result->headers->OptionalHeader.AddressOfEntryPoint != 0) {\n        if (result->isDLL) {\n            DllEntryProc DllEntry = (DllEntryProc)(LPVOID)(code + result->headers->OptionalHeader.AddressOfEntryPoint);\n            // notify library about attaching to process\n            BOOL successfull = (*DllEntry)((HINSTANCE)code, DLL_PROCESS_ATTACH, 0);\n            if (!successfull) {\n                SetLastError(ERROR_DLL_INIT_FAILED);\n                goto error;\n            }\n            result->initialized = TRUE;\n        } else {\n            result->exeEntry = (ExeEntryProc)(LPVOID)(code + result->headers->OptionalHeader.AddressOfEntryPoint);\n        }\n    } else {\n        result->exeEntry = NULL;\n    }\n\n    return (HMEMORYMODULE)result;\n\nerror:\n    // cleanup\n    MemoryFreeLibrary(result);\n    return NULL;\n}\n\nstatic int _compare(const void *a, const void *b)\n{\n    const struct ExportNameEntry *p1 = (const struct ExportNameEntry*) a;\n    const struct ExportNameEntry *p2 = (const struct ExportNameEntry*) b;\n    return strcmp(p1->name, p2->name);\n}\n\nstatic int _find(const void *a, const void *b)\n{\n    LPCSTR *name = (LPCSTR *) a;\n    const struct ExportNameEntry *p = (const struct ExportNameEntry*) b;\n    return strcmp(*name, p->name);\n}\n\nFARPROC MemoryGetProcAddress(HMEMORYMODULE mod, LPCSTR name)\n{\n    PMEMORYMODULE module = (PMEMORYMODULE)mod;\n    unsigned char *codeBase = module->codeBase;\n    DWORD idx = 0;\n    PIMAGE_EXPORT_DIRECTORY exports;\n    PIMAGE_DATA_DIRECTORY directory = GET_HEADER_DICTIONARY(module, IMAGE_DIRECTORY_ENTRY_EXPORT);\n    if (directory->Size == 0) {\n        // no export table found\n        SetLastError(ERROR_PROC_NOT_FOUND);\n        return NULL;\n    }\n\n    exports = (PIMAGE_EXPORT_DIRECTORY) (codeBase + directory->VirtualAddress);\n    if (exports->NumberOfNames == 0 || exports->NumberOfFunctions == 0) {\n        // DLL doesn't export anything\n        SetLastError(ERROR_PROC_NOT_FOUND);\n        return NULL;\n    }\n\n    if (HIWORD(name) == 0) {\n        // load function by ordinal value\n        if (LOWORD(name) < exports->Base) {\n            SetLastError(ERROR_PROC_NOT_FOUND);\n            return NULL;\n        }\n\n        idx = LOWORD(name) - exports->Base;\n    } else if (!exports->NumberOfNames) {\n        SetLastError(ERROR_PROC_NOT_FOUND);\n        return NULL;\n    } else {\n        const struct ExportNameEntry *found;\n\n        // Lazily build name table and sort it by names\n        if (!module->nameExportsTable) {\n            DWORD i;\n            DWORD *nameRef = (DWORD *) (codeBase + exports->AddressOfNames);\n            WORD *ordinal = (WORD *) (codeBase + exports->AddressOfNameOrdinals);\n            struct ExportNameEntry *entry = (struct ExportNameEntry*) malloc(exports->NumberOfNames * sizeof(struct ExportNameEntry));\n            module->nameExportsTable = entry;\n            if (!entry) {\n                SetLastError(ERROR_OUTOFMEMORY);\n                return NULL;\n            }\n            for (i=0; i<exports->NumberOfNames; i++, nameRef++, ordinal++, entry++) {\n                entry->name = (const char *) (codeBase + (*nameRef));\n                entry->idx = *ordinal;\n            }\n            qsort(module->nameExportsTable,\n                    exports->NumberOfNames,\n                    sizeof(struct ExportNameEntry), _compare);\n        }\n\n        // search function name in list of exported names with binary search\n        found = (const struct ExportNameEntry*) bsearch(&name,\n                module->nameExportsTable,\n                exports->NumberOfNames,\n                sizeof(struct ExportNameEntry), _find);\n        if (!found) {\n            // exported symbol not found\n            SetLastError(ERROR_PROC_NOT_FOUND);\n            return NULL;\n        }\n\n        idx = found->idx;\n    }\n\n    if (idx > exports->NumberOfFunctions) {\n        // name <-> ordinal number don't match\n        SetLastError(ERROR_PROC_NOT_FOUND);\n        return NULL;\n    }\n\n    // AddressOfFunctions contains the RVAs to the \"real\" functions\n    return (FARPROC)(LPVOID)(codeBase + (*(DWORD *) (codeBase + exports->AddressOfFunctions + (idx*4))));\n}\n\nvoid MemoryFreeLibrary(HMEMORYMODULE mod)\n{\n    PMEMORYMODULE module = (PMEMORYMODULE)mod;\n\n    if (module == NULL) {\n        return;\n    }\n    if (module->initialized) {\n        // notify library about detaching from process\n        DllEntryProc DllEntry = (DllEntryProc)(LPVOID)(module->codeBase + module->headers->OptionalHeader.AddressOfEntryPoint);\n        (*DllEntry)((HINSTANCE)module->codeBase, DLL_PROCESS_DETACH, 0);\n    }\n\n    free(module->nameExportsTable);\n    if (module->modules != NULL) {\n        // free previously opened libraries\n        int i;\n        for (i=0; i<module->numModules; i++) {\n            if (module->modules[i] != NULL) {\n                module->freeLibrary(module->modules[i], module->userdata);\n            }\n        }\n\n        free(module->modules);\n    }\n\n    if (module->codeBase != NULL) {\n        // release memory of library\n        module->free(module->codeBase, 0, MEM_RELEASE, module->userdata);\n    }\n\n#ifdef _WIN64\n    FreePointerList(module->blockedMemory, module->free, module->userdata);\n#endif\n    HeapFree(GetProcessHeap(), 0, module);\n}\n\nint MemoryCallEntryPoint(HMEMORYMODULE mod)\n{\n    PMEMORYMODULE module = (PMEMORYMODULE)mod;\n\n    if (module == NULL || module->isDLL || module->exeEntry == NULL || !module->isRelocated) {\n        return -1;\n    }\n\n    return module->exeEntry();\n}\n\n#define DEFAULT_LANGUAGE        MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL)\n\nHMEMORYRSRC MemoryFindResource(HMEMORYMODULE module, LPCTSTR name, LPCTSTR type)\n{\n    return MemoryFindResourceEx(module, name, type, DEFAULT_LANGUAGE);\n}\n\nstatic PIMAGE_RESOURCE_DIRECTORY_ENTRY _MemorySearchResourceEntry(\n    void *root,\n    PIMAGE_RESOURCE_DIRECTORY resources,\n    LPCTSTR key)\n{\n    PIMAGE_RESOURCE_DIRECTORY_ENTRY entries = (PIMAGE_RESOURCE_DIRECTORY_ENTRY) (resources + 1);\n    PIMAGE_RESOURCE_DIRECTORY_ENTRY result = NULL;\n    DWORD start;\n    DWORD end;\n    DWORD middle;\n\n    if (!IS_INTRESOURCE(key) && key[0] == TEXT('#')) {\n        // special case: resource id given as string\n        TCHAR *endpos = NULL;\n        long int tmpkey = (WORD) _tcstol((TCHAR *) &key[1], &endpos, 10);\n        if (tmpkey <= 0xffff && lstrlen(endpos) == 0) {\n            key = MAKEINTRESOURCE(tmpkey);\n        }\n    }\n\n    // entries are stored as ordered list of named entries,\n    // followed by an ordered list of id entries - we can do\n    // a binary search to find faster...\n    if (IS_INTRESOURCE(key)) {\n        WORD check = (WORD) (uintptr_t) key;\n        start = resources->NumberOfNamedEntries;\n        end = start + resources->NumberOfIdEntries;\n\n        while (end > start) {\n            WORD entryName;\n            middle = (start + end) >> 1;\n            entryName = (WORD) entries[middle].Name;\n            if (check < entryName) {\n                end = (end != middle ? middle : middle-1);\n            } else if (check > entryName) {\n                start = (start != middle ? middle : middle+1);\n            } else {\n                result = &entries[middle];\n                break;\n            }\n        }\n    } else {\n        LPCWSTR searchKey;\n        size_t searchKeyLen = _tcslen(key);\n#if defined(UNICODE)\n        searchKey = key;\n#else\n        // Resource names are always stored using 16bit characters, need to\n        // convert string we search for.\n#define MAX_LOCAL_KEY_LENGTH 2048\n        // In most cases resource names are short, so optimize for that by\n        // using a pre-allocated array.\n        wchar_t _searchKeySpace[MAX_LOCAL_KEY_LENGTH+1];\n        LPWSTR _searchKey;\n        if (searchKeyLen > MAX_LOCAL_KEY_LENGTH) {\n            size_t _searchKeySize = (searchKeyLen + 1) * sizeof(wchar_t);\n            _searchKey = (LPWSTR) malloc(_searchKeySize);\n            if (_searchKey == NULL) {\n                SetLastError(ERROR_OUTOFMEMORY);\n                return NULL;\n            }\n        } else {\n            _searchKey = &_searchKeySpace[0];\n        }\n\n        mbstowcs(_searchKey, key, searchKeyLen);\n        _searchKey[searchKeyLen] = 0;\n        searchKey = _searchKey;\n#endif\n        start = 0;\n        end = resources->NumberOfNamedEntries;\n        while (end > start) {\n            int cmp;\n            PIMAGE_RESOURCE_DIR_STRING_U resourceString;\n            middle = (start + end) >> 1;\n            resourceString = (PIMAGE_RESOURCE_DIR_STRING_U) OffsetPointer(root, entries[middle].Name & 0x7FFFFFFF);\n            cmp = _wcsnicmp(searchKey, resourceString->NameString, resourceString->Length);\n            if (cmp == 0) {\n                // Handle partial match\n                if (searchKeyLen > resourceString->Length) {\n                    cmp = 1;\n                } else if (searchKeyLen < resourceString->Length) {\n                    cmp = -1;\n                }\n            }\n            if (cmp < 0) {\n                end = (middle != end ? middle : middle-1);\n            } else if (cmp > 0) {\n                start = (middle != start ? middle : middle+1);\n            } else {\n                result = &entries[middle];\n                break;\n            }\n        }\n#if !defined(UNICODE)\n        if (searchKeyLen > MAX_LOCAL_KEY_LENGTH) {\n            free(_searchKey);\n        }\n#undef MAX_LOCAL_KEY_LENGTH\n#endif\n    }\n\n    return result;\n}\n\nHMEMORYRSRC MemoryFindResourceEx(HMEMORYMODULE module, LPCTSTR name, LPCTSTR type, WORD language)\n{\n    unsigned char *codeBase = ((PMEMORYMODULE) module)->codeBase;\n    PIMAGE_DATA_DIRECTORY directory = GET_HEADER_DICTIONARY((PMEMORYMODULE) module, IMAGE_DIRECTORY_ENTRY_RESOURCE);\n    PIMAGE_RESOURCE_DIRECTORY rootResources;\n    PIMAGE_RESOURCE_DIRECTORY nameResources;\n    PIMAGE_RESOURCE_DIRECTORY typeResources;\n    PIMAGE_RESOURCE_DIRECTORY_ENTRY foundType;\n    PIMAGE_RESOURCE_DIRECTORY_ENTRY foundName;\n    PIMAGE_RESOURCE_DIRECTORY_ENTRY foundLanguage;\n    if (directory->Size == 0) {\n        // no resource table found\n        SetLastError(ERROR_RESOURCE_DATA_NOT_FOUND);\n        return NULL;\n    }\n\n    if (language == DEFAULT_LANGUAGE) {\n        // use language from current thread\n        language = LANGIDFROMLCID(GetThreadLocale());\n    }\n\n    // resources are stored as three-level tree\n    // - first node is the type\n    // - second node is the name\n    // - third node is the language\n    rootResources = (PIMAGE_RESOURCE_DIRECTORY) (codeBase + directory->VirtualAddress);\n    foundType = _MemorySearchResourceEntry(rootResources, rootResources, type);\n    if (foundType == NULL) {\n        SetLastError(ERROR_RESOURCE_TYPE_NOT_FOUND);\n        return NULL;\n    }\n\n    typeResources = (PIMAGE_RESOURCE_DIRECTORY) (codeBase + directory->VirtualAddress + (foundType->OffsetToData & 0x7fffffff));\n    foundName = _MemorySearchResourceEntry(rootResources, typeResources, name);\n    if (foundName == NULL) {\n        SetLastError(ERROR_RESOURCE_NAME_NOT_FOUND);\n        return NULL;\n    }\n\n    nameResources = (PIMAGE_RESOURCE_DIRECTORY) (codeBase + directory->VirtualAddress + (foundName->OffsetToData & 0x7fffffff));\n    foundLanguage = _MemorySearchResourceEntry(rootResources, nameResources, (LPCTSTR) (uintptr_t) language);\n    if (foundLanguage == NULL) {\n        // requested language not found, use first available\n        if (nameResources->NumberOfIdEntries == 0) {\n            SetLastError(ERROR_RESOURCE_LANG_NOT_FOUND);\n            return NULL;\n        }\n\n        foundLanguage = (PIMAGE_RESOURCE_DIRECTORY_ENTRY) (nameResources + 1);\n    }\n\n    return (codeBase + directory->VirtualAddress + (foundLanguage->OffsetToData & 0x7fffffff));\n}\n\nDWORD MemorySizeofResource(HMEMORYMODULE module, HMEMORYRSRC resource)\n{\n    PIMAGE_RESOURCE_DATA_ENTRY entry;\n    UNREFERENCED_PARAMETER(module);\n    entry = (PIMAGE_RESOURCE_DATA_ENTRY) resource;\n    if (entry == NULL) {\n        return 0;\n    }\n\n    return entry->Size;\n}\n\nLPVOID MemoryLoadResource(HMEMORYMODULE module, HMEMORYRSRC resource)\n{\n    unsigned char *codeBase = ((PMEMORYMODULE) module)->codeBase;\n    PIMAGE_RESOURCE_DATA_ENTRY entry = (PIMAGE_RESOURCE_DATA_ENTRY) resource;\n    if (entry == NULL) {\n        return NULL;\n    }\n\n    return codeBase + entry->OffsetToData;\n}\n\nint\nMemoryLoadString(HMEMORYMODULE module, UINT id, LPTSTR buffer, int maxsize)\n{\n    return MemoryLoadStringEx(module, id, buffer, maxsize, DEFAULT_LANGUAGE);\n}\n\nint\nMemoryLoadStringEx(HMEMORYMODULE module, UINT id, LPTSTR buffer, int maxsize, WORD language)\n{\n    HMEMORYRSRC resource;\n    PIMAGE_RESOURCE_DIR_STRING_U data;\n    DWORD size;\n    if (maxsize == 0) {\n        return 0;\n    }\n\n    resource = MemoryFindResourceEx(module, MAKEINTRESOURCE((id >> 4) + 1), RT_STRING, language);\n    if (resource == NULL) {\n        buffer[0] = 0;\n        return 0;\n    }\n\n    data = (PIMAGE_RESOURCE_DIR_STRING_U) MemoryLoadResource(module, resource);\n    id = id & 0x0f;\n    while (id--) {\n        data = (PIMAGE_RESOURCE_DIR_STRING_U) OffsetPointer(data, (data->Length + 1) * sizeof(WCHAR));\n    }\n    if (data->Length == 0) {\n        SetLastError(ERROR_RESOURCE_NAME_NOT_FOUND);\n        buffer[0] = 0;\n        return 0;\n    }\n\n    size = data->Length;\n    if (size >= (DWORD) maxsize) {\n        size = maxsize;\n    } else {\n        buffer[size] = 0;\n    }\n#if defined(UNICODE)\n    wcsncpy(buffer, data->NameString, size);\n#else\n    wcstombs(buffer, data->NameString, size);\n#endif\n    return size;\n}\n\n#ifdef TESTSUITE\n#include <stdio.h>\n\n#ifndef PRIxPTR\n#ifdef _WIN64\n#define PRIxPTR \"I64x\"\n#else\n#define PRIxPTR \"x\"\n#endif\n#endif\n\nstatic const uintptr_t AlignValueDownTests[][3] = {\n    {16, 16, 16},\n    {17, 16, 16},\n    {32, 16, 32},\n    {33, 16, 32},\n#ifdef _WIN64\n    {0x12345678abcd1000, 0x1000, 0x12345678abcd1000},\n    {0x12345678abcd101f, 0x1000, 0x12345678abcd1000},\n#endif\n    {0, 0, 0},\n};\n\nstatic const uintptr_t AlignValueUpTests[][3] = {\n    {16, 16, 16},\n    {17, 16, 32},\n    {32, 16, 32},\n    {33, 16, 48},\n#ifdef _WIN64\n    {0x12345678abcd1000, 0x1000, 0x12345678abcd1000},\n    {0x12345678abcd101f, 0x1000, 0x12345678abcd2000},\n#endif\n    {0, 0, 0},\n};\n\nBOOL MemoryModuleTestsuite() {\n    BOOL success = TRUE;\n    size_t idx;\n    for (idx = 0; AlignValueDownTests[idx][0]; ++idx) {\n        const uintptr_t* tests = AlignValueDownTests[idx];\n        uintptr_t value = AlignValueDown(tests[0], tests[1]);\n        if (value != tests[2]) {\n            printf(\"AlignValueDown failed for 0x%\" PRIxPTR \"/0x%\" PRIxPTR \": expected 0x%\" PRIxPTR \", got 0x%\" PRIxPTR \"\\n\",\n                tests[0], tests[1], tests[2], value);\n            success = FALSE;\n        }\n    }\n    for (idx = 0; AlignValueDownTests[idx][0]; ++idx) {\n        const uintptr_t* tests = AlignValueUpTests[idx];\n        uintptr_t value = AlignValueUp(tests[0], tests[1]);\n        if (value != tests[2]) {\n            printf(\"AlignValueUp failed for 0x%\" PRIxPTR \"/0x%\" PRIxPTR \": expected 0x%\" PRIxPTR \", got 0x%\" PRIxPTR \"\\n\",\n                tests[0], tests[1], tests[2], value);\n            success = FALSE;\n        }\n    }\n    if (success) {\n        printf(\"OK\\n\");\n    }\n    return success;\n}\n#endif\n"
        },
        {
          "name": "MemoryModule.h",
          "type": "blob",
          "size": 4.6396484375,
          "content": "/*\n * Memory DLL loading code\n * Version 0.0.4\n *\n * Copyright (c) 2004-2015 by Joachim Bauch / mail@joachim-bauch.de\n * http://www.joachim-bauch.de\n *\n * The contents of this file are subject to the Mozilla Public License Version\n * 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n * for the specific language governing rights and limitations under the\n * License.\n *\n * The Original Code is MemoryModule.h\n *\n * The Initial Developer of the Original Code is Joachim Bauch.\n *\n * Portions created by Joachim Bauch are Copyright (C) 2004-2015\n * Joachim Bauch. All Rights Reserved.\n *\n */\n\n#ifndef __MEMORY_MODULE_HEADER\n#define __MEMORY_MODULE_HEADER\n\n#include <windows.h>\n\ntypedef void *HMEMORYMODULE;\n\ntypedef void *HMEMORYRSRC;\n\ntypedef void *HCUSTOMMODULE;\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ntypedef LPVOID (*CustomAllocFunc)(LPVOID, SIZE_T, DWORD, DWORD, void*);\ntypedef BOOL (*CustomFreeFunc)(LPVOID, SIZE_T, DWORD, void*);\ntypedef HCUSTOMMODULE (*CustomLoadLibraryFunc)(LPCSTR, void *);\ntypedef FARPROC (*CustomGetProcAddressFunc)(HCUSTOMMODULE, LPCSTR, void *);\ntypedef void (*CustomFreeLibraryFunc)(HCUSTOMMODULE, void *);\n\n/**\n * Load EXE/DLL from memory location with the given size.\n *\n * All dependencies are resolved using default LoadLibrary/GetProcAddress\n * calls through the Windows API.\n */\nHMEMORYMODULE MemoryLoadLibrary(const void *, size_t);\n\n/**\n * Load EXE/DLL from memory location with the given size using custom dependency\n * resolvers.\n *\n * Dependencies will be resolved using passed callback methods.\n */\nHMEMORYMODULE MemoryLoadLibraryEx(const void *, size_t,\n    CustomAllocFunc,\n    CustomFreeFunc,\n    CustomLoadLibraryFunc,\n    CustomGetProcAddressFunc,\n    CustomFreeLibraryFunc,\n    void *);\n\n/**\n * Get address of exported method. Supports loading both by name and by\n * ordinal value.\n */\nFARPROC MemoryGetProcAddress(HMEMORYMODULE, LPCSTR);\n\n/**\n * Free previously loaded EXE/DLL.\n */\nvoid MemoryFreeLibrary(HMEMORYMODULE);\n\n/**\n * Execute entry point (EXE only). The entry point can only be executed\n * if the EXE has been loaded to the correct base address or it could\n * be relocated (i.e. relocation information have not been stripped by\n * the linker).\n *\n * Important: calling this function will not return, i.e. once the loaded\n * EXE finished running, the process will terminate.\n *\n * Returns a negative value if the entry point could not be executed.\n */\nint MemoryCallEntryPoint(HMEMORYMODULE);\n\n/**\n * Find the location of a resource with the specified type and name.\n */\nHMEMORYRSRC MemoryFindResource(HMEMORYMODULE, LPCTSTR, LPCTSTR);\n\n/**\n * Find the location of a resource with the specified type, name and language.\n */\nHMEMORYRSRC MemoryFindResourceEx(HMEMORYMODULE, LPCTSTR, LPCTSTR, WORD);\n\n/**\n * Get the size of the resource in bytes.\n */\nDWORD MemorySizeofResource(HMEMORYMODULE, HMEMORYRSRC);\n\n/**\n * Get a pointer to the contents of the resource.\n */\nLPVOID MemoryLoadResource(HMEMORYMODULE, HMEMORYRSRC);\n\n/**\n * Load a string resource.\n */\nint MemoryLoadString(HMEMORYMODULE, UINT, LPTSTR, int);\n\n/**\n * Load a string resource with a given language.\n */\nint MemoryLoadStringEx(HMEMORYMODULE, UINT, LPTSTR, int, WORD);\n\n/**\n* Default implementation of CustomAllocFunc that calls VirtualAlloc\n* internally to allocate memory for a library\n*\n* This is the default as used by MemoryLoadLibrary.\n*/\nLPVOID MemoryDefaultAlloc(LPVOID, SIZE_T, DWORD, DWORD, void *);\n\n/**\n* Default implementation of CustomFreeFunc that calls VirtualFree\n* internally to free the memory used by a library\n*\n* This is the default as used by MemoryLoadLibrary.\n*/\nBOOL MemoryDefaultFree(LPVOID, SIZE_T, DWORD, void *);\n\n/**\n * Default implementation of CustomLoadLibraryFunc that calls LoadLibraryA\n * internally to load an additional libary.\n *\n * This is the default as used by MemoryLoadLibrary.\n */\nHCUSTOMMODULE MemoryDefaultLoadLibrary(LPCSTR, void *);\n\n/**\n * Default implementation of CustomGetProcAddressFunc that calls GetProcAddress\n * internally to get the address of an exported function.\n *\n * This is the default as used by MemoryLoadLibrary.\n */\nFARPROC MemoryDefaultGetProcAddress(HCUSTOMMODULE, LPCSTR, void *);\n\n/**\n * Default implementation of CustomFreeLibraryFunc that calls FreeLibrary\n * internally to release an additional libary.\n *\n * This is the default as used by MemoryLoadLibrary.\n */\nvoid MemoryDefaultFreeLibrary(HCUSTOMMODULE, void *);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif  // __MEMORY_MODULE_HEADER\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.85546875,
          "content": "# Status available at\n# https://ci.appveyor.com/project/fancycode/memorymodule\nversion: 1.0.{build}\n\nos:\n  - Visual Studio 2015\n\nenvironment:\n  matrix:\n    - GENERATOR: \"Visual Studio 9 2008\"\n      UNICODE: ON\n    - GENERATOR: \"Visual Studio 9 2008\"\n      UNICODE: OFF\n    - GENERATOR: \"Visual Studio 10 2010\"\n      UNICODE: ON\n    - GENERATOR: \"Visual Studio 10 2010\"\n      UNICODE: OFF\n    - GENERATOR: \"Visual Studio 11 2012\"\n      UNICODE: ON\n    - GENERATOR: \"Visual Studio 11 2012\"\n      UNICODE: OFF\n    - GENERATOR: \"Visual Studio 12 2013\"\n      UNICODE: ON\n    - GENERATOR: \"Visual Studio 12 2013\"\n      UNICODE: OFF\n    - GENERATOR: \"Visual Studio 14 2015\"\n      UNICODE: ON\n    - GENERATOR: \"Visual Studio 14 2015\"\n      UNICODE: OFF\n\nplatform:\n  - x86\n  - x64\n\nconfiguration:\n  - Debug\n\ninstall:\n  - call scripts\\run-appveyor.bat\n\nbuild: off\ntest: off\ndeploy: off\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 1.0517578125,
          "content": "MemoryModule\n============\n\n[![Build Status](https://travis-ci.org/fancycode/MemoryModule.svg?branch=master)](https://travis-ci.org/fancycode/MemoryModule)[![Build status](https://ci.appveyor.com/api/projects/status/qcrfxbno0jbbl9cx/branch/master?svg=true)](https://ci.appveyor.com/project/fancycode/memorymodule)\n\nThe default windows API functions to load external libraries into a program\n(`LoadLibrary`, `LoadLibraryEx`) only work with files on the filesystem.  It's\ntherefore impossible to load a DLL from memory.\n\nBut sometimes, you need exactly this functionality (e.g. you don't want to\ndistribute a lot of files or want to make disassembling harder).  Common\nworkarounds for this problems are to write the DLL into a temporary file\nfirst and import it from there.  When the program terminates, the temporary\nfile gets deleted.\n\n`MemoryModule` is a library that can be used to load a DLL completely from\nmemory - without storing on the disk first.\n\nSee `doc/readme.rst` for more informations about the format of a DLL file and\na tutorial how they can be loaded directly.\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}