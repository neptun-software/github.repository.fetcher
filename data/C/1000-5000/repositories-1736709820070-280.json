{
  "metadata": {
    "timestamp": 1736709820070,
    "page": 280,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SynoCommunity/spksrc",
      "stars": 3057,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0390625,
          "content": "# exclude all files in the repository\n*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3134765625,
          "content": "distrib\npackages\nnative/*/work*\nnative/*/status*\ncross/*/work*\ncross/*/build*\ncross/*/status*\nkernel/*/work*\nspk/*/work*\nspk/*/build*\nspk/*/publish*\nspk/*/status*\ndiyspk/*/work*\ndiyspk/*/build*\ndiyspk/*/status*\ntoolchain/*/work*\ntoolchain/*/*_done\ntoolkit/*/work*\nlocal.mk\n*.DS_Store\n*~\n\n# PyCharm project settings\n.idea\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.5400390625,
          "content": "Contributing\n============\n\nYou can contribute to spksrc and SynoCommunity in several ways. Apart from reporting bugs, adding suggestions or requesting new packages, you can open Pull Requests to add new packages or to improve existing packages. If you're good at writing, help out with adding and updating documentation. Lastly, donations towards maintaining the SynoCommunity repository infrastructure are much appreciated.\nFor other suggestions, open an issue so it can be discussed.\n\n\nIssues\n------\nIf you have questions, suggestions or you believe you have found a bug, we'd like to hear about it. Before you open a new issue, follow the recommendations below.\n\nDo:\n\n* Check the [FAQ](https://github.com/SynoCommunity/spksrc/wiki/Frequently-Asked-Questions);\n* Search the [bug tracker](https://github.com/SynoCommunity/spksrc/issues) to see if the issue has not already been reported;\n* Check if the package has specific documentation related to it via the [Package Documentation Index](https://github.com/SynoCommunity/spksrc/wiki/Package-Documentation-Index);\n* if you're reporting a bug, make sure you include sufficient information. See [Issue Content](https://github.com/SynoCommunity/spksrc/blob/master/CONTRIBUTING.md#issue-content).\n\nDon't:\n\n* Don't ask questions or report bugs in a closed issue;\n* Don't post a question in an open issue if your question is not directly related to it. If you're not sure, open a new issue.\n\nIssue content\n-------------\n\nWhen you open a new issue to ask a question about a package, or want to report a bug, be sure to provide as much details as possible for someone else to reproduce what you experienced.\n\nTitle:\n\n[package name] Short description of question or bug\n\nContent:\n\n* Describe what you did, what you expected to happen and what actually happened;\n* Which steps to perform to reproduce what happened;\n* Model, arch and DSM version of your NAS. See [Architecture per Synology model](https://github.com/SynoCommunity/spksrc/wiki/Architecture-per-Synology-model);\n* Provide log files if available. Sometimes a log is shown in Package Center for that package. There might be a log available at `/usr/local/{package}/var/`;\n* Wrap larger logs between triple backticks (```). Log files over ten lines should be placed on gist.github.com, Pastebin etc., and linked in the issue;\n* If the package doesn't start, try to start the package [via the command line](https://github.com/SynoCommunity/spksrc/wiki/Frequently-Asked-Questions#how-to-query-package-status-or-start-from-command-line)  and provide the output.\n\n\nPackage Requests\n----------------\nYou can request new packages via a Package Request.\n\nNote that opening a request does not mean it will be honored, so please do not ask for ETA's. SynoCommunity is a community effort where anyone can contribute, even you!\nYou can show your support with a +1, or by adding a bounty via Bountysource.\n\nBefore opening a Package Request, make sure that there are no existing requests for the same software.\nAs part of your request, some basic information should be included. Contributors use that information as a starting point for packaging. Use the format as shown below or use the following link: [Package Request](https://github.com/SynoCommunity/spksrc/issues/new?title=[Package%20Request]%20&body=Name%3A%0ADescription%3A%0AWebsite%3A%0ASoftware%20documentation%3A%0ABuild%2FInstallation%20documentation%3A%0ASource%20Code%3A%0ALicense%3A)\n\nTitle:\n\n[Package Request] Name of software\n\nContent:\n* Name: Software name\n* Description: Provide a short description of the software\n* Website: http://www.software.com\n* Software documentation: Link to general documentation, usage\n* Build/Installation documentation: Link to build instructions, prerequisites etc.\n* Source code: Link to source code\n* License: GPL, Apache, etc., or link to license (e.g. LICENSE or COPYING)\n\n\nPull requests\n----------\nPull requests to add packages to the [SynoCommunity repository](https://synocommunity.com) are always welcome, as are improvements to the spksrc framework or existing packages.\n\nPlease create a new branch before pulling your request and avoid using the master branch. Pay attention on [How to make a clean pull request](https://github.com/MarcDiethelm/contributing/blob/master/README.md).\n\nOnce you have a development environment set up, you can start building packages, create new ones, or improve upon existing packages while making your changes available to other people. See the [Developers HOW-TO](https://github.com/SynoCommunity/spksrc/wiki/Developers-HOW-TO) for information on how to use spksrc.\n\n#### When creating a Pull Request you get a description from a template like this:\n\n> _Motivation:_  Explain here what the reason for the pull request is.<br>\n> _Linked issues:_  Optionally, add links to existing issues or other PR's\n> \n> ### Checklist\n> - [ ] Build rule `all-supported` completed successfully\n> - [ ] Package upgrade completed successfully\n> - [ ] New installation of package completed successfully\n\n\nFor _Linked issues_ (or anywhere in the description), you can use the auto link feature of github, to get the issues linked to the PR and closed when the PR is merged, \nsee: [linking a pull request to an issue](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue).\n\nExample:<br>\n_Linked issues:_ fixed #1234\n\nThe Checklist is for minimal Tests required for new and updated packages.<br>\n- The Build rule `all-supported` builds the currently supported archs with the default toolchain version. All affected archs must successfully build - or be declared as UNSUPPORTED_ARCHS in the spk/ Makefile of the package.\n- Package upgrade must successfully complete for new packages and upgrades. For new packages, the upgrade can be tested by manually install the same version that is already installed. The install wizzard will show `upgrade` in the dialog title, upgrade wizard pages must work (when available) and manually changed configuration files must be preserved.\n- A new installation must succeed. There must not appear error messages while installation or in the install log file found in `/var/log/packages/{package-name}.og` (for DSM<=5 in `/var/packages/{package-name}/target/var/{package-name}_install.log`).\n\n#### Pull Requests not ready for merging\nEven when your changes are not ready for merging into the production code (master-branch), you can create a Pull Request. This is very useful for discussing implementation details or specific tasks.\nYou can prefix the PR Title temporary with [WIP] for work in progress, or apply a specific label like `status/work-in-progress`, `status/do-not-merge` or `status/help-wanted`.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.88671875,
          "content": "FROM debian:bookworm\nLABEL description=\"Framework for maintaining and compiling native community packages for Synology devices\"\nLABEL maintainer=\"SynoCommunity <https://github.com/SynoCommunity/spksrc/graphs/contributors>\"\nLABEL url=\"https://synocommunity.com\"\nLABEL vcs-url=\"https://github.com/SynoCommunity/spksrc\"\n\nENV LANG C.UTF-8\n\n# Manage i386 arch\nRUN dpkg --add-architecture i386\n\n# Install required packages (in sync with README.rst instructions)\n# ATTENTION: the total length of the following RUN command must not exceed 1024 characters\nRUN apt update && apt install --no-install-recommends -y \\\n\tautoconf-archive \\\n\tautogen \\\n\tautomake \\\n\tautopoint \\\n\tbash \\\n\tbash-completion \\\n\tbc \\\n\tbison \\\n\tbuild-essential \\\n\tcheck \\\n\tcmake \\\n\tcurl \\\n\tcython3 \\\n\tdebootstrap \\\n\ted \\\n\texpect \\\n\tfakeroot \\\n\tflex \\\n\tgh \\\n\tg++-multilib \\\n\tgawk \\\n\tgettext \\\n\tgit \\\n\tgperf \\\n\timagemagick \\\n\tintltool \\\n\tjq \\\n\tlibtool-bin \\\n\tlibbz2-dev \\\n\tlibc6-i386 \\\n\tlibcppunit-dev \\\n\tlibffi-dev \\\n\tlibgc-dev \\\n\tlibgmp3-dev \\\n\tlibltdl-dev \\\n\tlibmount-dev \\\n\tlibncurses-dev \\\n\tlibpcre3-dev \\\n\tlibssl-dev \\\n\tlibtool \\\n\tlibunistring-dev \\\n\tlzip \\\n\tman-db \\\n\tmanpages-dev \\\n\tmlocate \\\n\tmoreutils \\\n\tnasm \\\n\tpatchelf \\\n\tphp \\\n\tpkg-config \\\n\trename \\\n\tripgrep \\\n\trsync \\\n\truby-mustache \\\n\tscons \\\n\tsubversion \\\n\tsudo \\\n\tswig \\\n\ttexinfo \\\n\ttime \\\n\ttree \\\n\tunzip \\\n\txmlto \\\n\tyasm \\\n\tzip \\\n\tzlib1g-dev\n\n# Python based apps\nRUN apt install --no-install-recommends -y \\\n\thttpie \\\n\tmercurial \\\n\tmeson \\\n\tninja-build \\\n\tpython3 \\\n\tpython3-distutils \\\n\tpython3-mako \\\n\tpython3-pip \\\n\tpython3-virtualenv \\\n\tpython3-yaml\n\n# Clean-up apt db\nRUN apt clean && \\\n\trm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Update locate db\nRUN updatedb\n\n# Add user\nRUN adduser --disabled-password --gecos '' user && \\\n\tadduser user sudo && \\\n\techo \"%user ALL=(ALL:ALL) NOPASSWD: ALL\" | sudo tee /etc/sudoers.d/users\n\n# Volume pointing to spksrc sources\nVOLUME /spksrc\nWORKDIR /spksrc\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.4619140625,
          "content": "LICENSE\n=====\n\nCopyright (c) 2011, Sebastien Erard\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n* Neither the name of the zebulon nor the names of its contributors may\n  be used to endorse or promote products derived from this software without\n  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.935546875,
          "content": "\n# Include framework self-test\ninclude mk/spksrc.test-rules.mk\n\nAVAILABLE_TCS = $(notdir $(wildcard toolchain/syno-*))\nAVAILABLE_ARCHS = $(notdir $(subst syno-,/,$(AVAILABLE_TCS)))\nSUPPORTED_SPKS = $(sort $(patsubst spk/%/Makefile,%,$(wildcard spk/*/Makefile)))\n\n\nifneq ($(firstword $(MAKECMDGOALS)),test)\nall: $(SUPPORTED_SPKS)\nendif\n\nall-noarch:\n\t@for spk in $(filter-out $(dir $(wildcard spk/*/BROKEN)),$(dir $(wildcard spk/*/Makefile))) ; \\\n\tdo \\\n\t   grep -q \"override ARCH\" \"$${spk}/Makefile\" && $(MAKE) -C $${spk} ; \\\n\tdone\n\nifneq ($(firstword $(MAKECMDGOALS)),test)\nclean: $(addsuffix -clean,$(SUPPORTED_SPKS))\nclean: native-clean cross-clean\nendif\n\ndist-clean: clean\ndist-clean: kernel-clean toolchain-clean toolkit-clean\n\nnative-clean:\n\t@for native in $(dir $(wildcard native/*/Makefile)) ; \\\n\tdo \\\n\t    $(MAKE) -C $${native} clean ; \\\n\tdone\n\ntoolchain-clean:\n\t@for tc in $(dir $(wildcard toolchain/*/Makefile)) ; \\\n\tdo \\\n\t    $(MAKE) -C $${tc} clean ; \\\n\tdone\n\ntoolkit-clean:\n\t@for tk in $(dir $(wildcard toolkit/*/Makefile)) ; \\\n\tdo \\\n\t    $(MAKE) -C $${tk} clean ; \\\n\tdone\n\nkernel-clean:\n\t@for kernel in $(dir $(wildcard kernel/*/Makefile)) ; \\\n\tdo \\\n\t    rm -rf $${kernel}/work* ; \\\n\tdone\n\ncross-clean:\n\t@for cross in $(dir $(wildcard cross/*/Makefile)) ; \\\n\tdo \\\n\t    $(MAKE) -C $${cross} clean ; \\\n\tdone\n\nspk-clean:\n\t@for spk in $(filter-out $(dir $(wildcard spk/*/BROKEN)),$(dir $(wildcard spk/*/Makefile))) ; \\\n\tdo \\\n\t    $(MAKE) -C $${spk} clean ; \\\n\tdone\n\n%: spk/%/Makefile\n\tcd $(dir $^) && env $(MAKE)\n\nnative-%: native/%/Makefile\n\tcd $(dir $^) && env $(MAKE)\n\nnative-%-clean: native/%/Makefile\n\tcd $(dir $^) && env $(MAKE) clean\n\n# build dependency tree for all packages\n# - exclude broken packages\ndependency-tree:\n\t@for spk in $(filter-out $(dir $(wildcard spk/*/BROKEN)),$(dir $(wildcard spk/*/Makefile))) ; \\\n\tdo \\\n\t    $(MAKE) --no-print-directory -C $${spk} dependency-tree ; \\\n\tdone\n\n# build dependency list for all packages\n# - exclude broken packages\ndependency-list:\n\t@for spk in $(filter-out $(dir $(wildcard spk/*/BROKEN)),$(dir $(wildcard spk/*/Makefile))) ; \\\n\tdo \\\n\t    $(MAKE) -s -C $${spk} dependency-list ; \\\n\tdone\n\n# define a template that instantiates a 'python3-avoton-6.1' -style target for\n# every ($2) arch, every ($1) spk\ndefine SPK_ARCH_template =\nspk-$(1)-$(2): spk/$(1)/Makefile setup\n\tcd spk/$(1) && env $(MAKE) arch-$(2)\nendef\n$(foreach arch,$(AVAILABLE_ARCHS),$(foreach spk,$(SUPPORTED_SPKS),$(eval $(call SPK_ARCH_template,$(spk),$(arch)))))\n\nprepare: downloads\n\t@for tc in $(dir $(wildcard toolchain/*/Makefile)) ; \\\n\tdo \\\n\t    $(MAKE) -C $${tc} ; \\\n\tdone\n\ndownloads:\n\t@for dl in $(dir $(wildcard cross/*/Makefile)) ; \\\n\tdo \\\n\t    $(MAKE) -C $${tc} download ; \\\n\tdone\n\nnatives:\n\t@for n in $(dir $(wildcard native/*/Makefile)) ; \\\n\tdo \\\n\t    $(MAKE) -C $${n} ; \\\n\tdone\n\nnative-digests:\n\t@for n in $(dir $(wildcard native/*/Makefile)) ; \\\n\tdo \\\n\t    $(MAKE) -C $${n} digests ; \\\n\tdone\n\ntoolchain-digests:\n\t@for tc in $(dir $(wildcard toolchain/*/Makefile)) ; \\\n\tdo \\\n\t    $(MAKE) -C $${tc} digests ; \\\n\tdone\n\ntoolkit-digests:\n\t@for tk in $(dir $(wildcard toolkit/*/Makefile)) ; \\\n\tdo \\\n\t    $(MAKE) -C $${tk} digests ; \\\n\tdone\n\nkernel-digests:\n\t@for kernel in $(dir $(wildcard kernel/*/Makefile)) ; \\\n\tdo \\\n\t    $(MAKE) -C $${kernel} digests ; \\\n\tdone\n\ncross-digests:\n\t@for cross in $(dir $(wildcard cross/*/Makefile)) ; \\\n\tdo \\\n\t    $(MAKE) -C $${cross} digests ; \\\n\tdone\n\njsonlint:\nifeq (,$(shell which jsonlint))\n\t$(error \"jsonlint not found, install with: npm install -g jsonlint\")\nelse\n\tfind spk/ -not -path \"*work*\" -regextype posix-extended -regex '.*(\\.json|install_uifile\\w*|upgrade_uifile\\w*|app/config)' -print -exec jsonlint -q -c {} \\;\nendif\nlint: jsonlint\n\n.PHONY: toolchains kernel-modules\ntoolchains: $(addprefix toolchain-,$(AVAILABLE_ARCHS))\nkernel-modules: $(addprefix kernel-,$(AVAILABLE_ARCHS))\n\ntoolchain-%:\n\t-@cd toolchain/syno-$*/ && MAKEFLAGS= $(MAKE)\n\nkernel-%:\n\t-@cd kernel/syno-$*/ && MAKEFLAGS= $(MAKE)\n\nsetup: local.mk dsm-6.2.4 dsm-7.1\n\nlocal.mk:\n\t@echo \"Creating local configuration \\\"local.mk\\\"...\"\n\t@echo \"PUBLISH_URL =\" > $@\n\t@echo \"PUBLISH_API_KEY =\" >> $@\n\t@echo \"DISTRIBUTOR =\" >> $@\n\t@echo \"DISTRIBUTOR_URL =\" >> $@\n\t@echo \"REPORT_URL =\" >> $@\n\t@echo \"DEFAULT_TC =\" >> $@\n\t@echo \"# Option to disable the use of github API to get the real name and url of the maintainer\" >> $@\n\t@echo \"# define it for local builds when you reach the API rate limit\" >> $@\n\t@echo \"DISABLE_GITHUB_MAINTAINER =\" >> $@\n\t@echo \"#PSTAT = on\" >> $@\n\t@echo \"#PARALLEL_MAKE = max\" >> $@\n\ndsm-%: local.mk\n\t@echo \"Setting default toolchain version to DSM-$*\"\n\t@grep -q \"^DEFAULT_TC.*=.*$*.*\" local.mk || sed -i \"/^DEFAULT_TC =/s/$$/ $*/\" local.mk\n\nsetup-synocommunity: setup\n\t@sed -i -e \"s|PUBLISH_URL\\s*=.*|PUBLISH_URL = https://api.synocommunity.com|\" \\\n\t\t-e \"s|DISTRIBUTOR\\s*=.*|DISTRIBUTOR = SynoCommunity|\" \\\n\t\t-e \"s|DISTRIBUTOR_URL\\s*=.*|DISTRIBUTOR_URL = https://synocommunity.com|\" \\\n\t\t-e \"s|REPORT_URL\\s*=.*|REPORT_URL = https://github.com/SynoCommunity/spksrc/issues|\" \\\n\t\tlocal.mk\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.7626953125,
          "content": "# Discord\nSynoCommunity is now on Discord!\n\n[![Discord](https://img.shields.io/discord/732558169863225384?color=7289DA&label=Discord&logo=Discord&logoColor=white&style=for-the-badge)](https://discord.gg/nnN9fgE7EF)\n\n# spksrc\nspksrc is a cross compilation framework intended to compile and package software for Synology NAS devices. Packages are made available via the [SynoCommunity repository].\n\n\n# DSM 7\nDSM 7 was released on June 29 2021 as Version 7.0.41890.\n\n* The main issue we had with our reposity is fixed in [spkrepo](https://github.com/SynoCommunity/spkrepo/pull/112) and online since February 2024\n  - before the repository deliverd DSM 6 packages for Systems with DSM 7, when no DSM 7 package was available\n  - this gave errors like \"invalid file format\" (or \"package requires root privileges\")\n  - you still get this error when manually installing a DSM 6 package on DSM 7\n* You find the status of the former packages in the issue [#4524] **Meta: DSM7 package status**\n* New packages support DSM 7 from initial package version (and some require at least DSM 7).\n* **ATTENTION**: As reported, package configuration settings may be lost following the upgrade to DSM 7 and the execution of a Package repair. Make sure to backup your settings and configuration for your SynoCommunity packages before installation of DSM 7 to facilitate restoration if needed.\n\n\n## Contributing\nBefore opening a new issue, check the [FAQ] and search open issues.\nIf you can't find an answer, or if you want to open a package request, read [CONTRIBUTING] to make sure you include all the information needed for contributors to handle your request.\n\n\n## Setup Development Environment\n### Docker\n*The Docker development environment supports Linux and macOS systems, but not Windows due to limitations of the underlying file system.*\n\n1. [Fork and clone] spksrc: `git clone https://github.com/YOUR-USERNAME/spksrc`\n2. Install Docker on your host OS (see [Docker installation], or use a `wget`-based alternative for linux [Install Docker with wget]).\n3. Download the spksrc Docker container: `docker pull ghcr.io/synocommunity/spksrc`\n4. Run the container with the repository mounted into the `/spksrc` directory with the appropriate command for your host Operating System:\n\n```bash\ncd spksrc # Go to the cloned repository's root folder.\n\n# If running on Linux:\ndocker run -it --platform=linux/amd64 -v $(pwd):/spksrc -w /spksrc ghcr.io/synocommunity/spksrc /bin/bash\n\n# If running on macOS:\ndocker run -it --platform=linux/amd64 -v $(pwd):/spksrc -w /spksrc -e TAR_CMD=\"fakeroot tar\" ghcr.io/synocommunity/spksrc /bin/bash\n```\n5. From there, follow the instructions in the [Developers HOW TO].\n\n\n\n### Virtual machine\nA virtual machine based on an 64-bit version of Debian 12 stable OS is recommended. Non-x86 architectures are not supported.\n\nInstall the requirements (in sync with `Dockerfile`):\n```bash\nsudo dpkg --add-architecture i386 && sudo apt-get update\nsudo apt update\nsudo apt install autoconf-archive autogen automake autopoint bash \\\n                 bash-completion bc bison build-essential check cmake \\\n                 curl cython3 debootstrap ed expect fakeroot flex \\\n                 g++-multilib gawk gettext gh git gperf httpie imagemagick \\\n                 intltool jq libtool-bin libbz2-dev libc6-i386 libcppunit-dev libffi-dev \\\n                 libgc-dev libgmp3-dev libltdl-dev libmount-dev libncurses-dev \\\n                 libpcre3-dev libssl-dev libtool libunistring-dev lzip \\\n                 man-db manpages-dev mercurial meson mlocate moreutils nasm \\\n                 ninja-build patchelf php pkg-config python3 python3-distutils \\\n                 python3-mako python3-pip python3-virtualenv python3-yaml \\\n                 rename ripgrep ruby-mustache rsync scons subversion \\\n                 swig texinfo time tree unzip xmlto yasm zip zlib1g-dev\n```\nFrom there, follow the instructions in the [Developers HOW TO].\n\n* You may need to install some packages from testing like autoconf. Read about Apt-Pinning to know how to do that.\n* Some older toolchains may require 32-bit development versions of packages, e.g. `zlib1g-dev:i386`\n\n\n\n### LXC\nA container based on 64-bit version of Debian 12 stable OS is recommended. Non-x86 architectures are not supported.  The following assumes your LXD/LXC environment is already initiated (e.g. `lxc init`) and you have minimal LXD/LXC basic knowledge :\n1. Create a new container (will use x86_64/amd64 arch by default): `lxc launch images:debian/12 spksrc`\n2. Enable i386 arch: `lxc exec spksrc -- /usr/bin/dpkg --add-architecture i386`\n3. Update apt channels: `lxc exec spksrc -- /usr/bin/apt update`\n4. Install all required packages:\n```bash\nlxc exec spksrc -- /usr/bin/apt install autoconf-archive autogen automake autopoint bash \\\n                                        bash-completion bc bison build-essential check cmake \\\n                                        curl cython3 debootstrap ed expect fakeroot flex \\\n                                        g++-multilib gawk gettext gh git gperf httpie imagemagick \\\n                                        intltool jq libtool-bin libbz2-dev libc6-i386 libcppunit-dev libffi-dev \\\n                                        libgc-dev libgmp3-dev libltdl-dev libmount-dev libncurses-dev \\\n                                        libpcre3-dev libssl-dev libtool libunistring-dev lzip \\\n                                        man-db manpages-dev mercurial meson mlocate moreutils nasm \\\n                                        ninja-build patchelf php pkg-config python3 python3-distutils \\\n                                        python3-mako python3-pip python3-virtualenv python3-yaml \\\n                                        rename ripgrep ruby-mustache rsync scons subversion \\\n                                        swig texinfo time tree unzip xmlto yasm zip zlib1g-dev\n```\n\n#### LXC: `spksrc` user\n8. By default it is assumed that you will be running as `spksrc` user into the LXC container.  Such user needs to be created into the default container image:\n```bash\nlxc exec spksrc -- /usr/sbin/adduser --uid 1001 spksrc\n```\n9. Setup a default shell environment:\n```bash\nlxc exec spksrc --user 1001 -- cp /etc/skel/.profile /etc/skel/.bashrc ~spksrc/.\n```\n\nFrom there you can connect to your container as `spksrc` and follow the instructions in the [Developers HOW TO].\n```bash\nlxc exec spksrc -- su --login spksrc\nspksrc@spksrc:~$\n```\n\n#### (OPTIONAL) LXC: Shared `spksrc` user\nYou can create a shared user between your Debian/Ubuntu host and the LXC Debian container which simplifies greatly file management between the two.  The following assumes you already created a user `spksrc` with uid 1001 in your Debian/Ubuntu host environment and that you which to share its `/home` userspace.\n1. Create a mapping rule between the hosts and the LXC image:\n```bash\nlxc config set spksrc raw.idmap \"both 1001 1001\"\nlxc restart spksrc\nRemapping container filesystem\n```\n2. Add `/home/spksrc` from the hsot to the LXC container:\n```bash\nlxc config device add spksrc home disk path=/home/spksrc source=/home/spksrc\nDevice home added to spksrc\n```\n3. Connect as `spksrc` user:\n```bash\nlxc exec spksrc -- su --login spksrc\nspksrc@spksrc:~$\n```\n\n#### LXC: Proxy (OPTIONAL)\nThe following assume you have a running proxy on your LAN setup at IP 192.168.1.1 listening on port 3128 that will allow caching files.\n1. Enforce using a proxy:\n```bash\nlxc config set spksrc environment.http_proxy http://192.168.1.1:3128\nlxc config set spksrc environment.https_proxy http://192.168.1.1:3128\n```\n2. Enforce using a proxy with `wget` in the spksrc container user account:\n```bash\nlxc exec spksrc --user $(id -u spksrc) -- bash -c \"cat << EOF > ~spksrc/.wgetrc\nuse_proxy = on\nhttp_proxy = http://192.168.1.1:3128/\nhttps_proxy = http://192.168.1.1:3128/\nftp_proxy = http://192.168.1.1:3128/\nEOF\"\n```\n\n\n## Usage\nOnce you have a development environment set up, you can start building packages, create new ones, or improve upon existing packages while making your changes available to other people.\nSee the [Developers HOW TO] for information on how to use spksrc.\n\n\n## License\nWhen not explicitly set, files are placed under a [3 clause BSD license]\n\n[3 clause BSD license]: http://www.opensource.org/licenses/BSD-3-Clause\n[#4524]: https://github.com/SynoCommunity/spksrc/issues/4524\n[bug tracker]: https://github.com/SynoCommunity/spksrc/issues\n[CONTRIBUTING]: https://github.com/SynoCommunity/spksrc/blob/master/CONTRIBUTING.md\n[Fork and clone]: https://docs.github.com/en/github/getting-started-with-github/fork-a-repo\n[Developers HOW TO]: https://github.com/SynoCommunity/spksrc/wiki/Developers-HOW-TO\n[Docker installation]: https://docs.docker.com/engine/installation\n[FAQ]: https://github.com/SynoCommunity/spksrc/wiki/Frequently-Asked-Questions\n[Install Docker with wget]: https://docs.docker.com/linux/step_one\n[SynoCommunity repository]: http://www.synocommunity.com\n"
        },
        {
          "name": "cross",
          "type": "tree",
          "content": null
        },
        {
          "name": "diyspk",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "mk",
          "type": "tree",
          "content": null
        },
        {
          "name": "native",
          "type": "tree",
          "content": null
        },
        {
          "name": "spk",
          "type": "tree",
          "content": null
        },
        {
          "name": "toolchain",
          "type": "tree",
          "content": null
        },
        {
          "name": "toolkit",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}