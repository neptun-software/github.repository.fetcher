{
  "metadata": {
    "timestamp": 1736710133522,
    "page": 781,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gbdk-2020/gbdk-2020",
      "stars": 1789,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0634765625,
          "content": "# Prerequisites\n*.d\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n# Kernel Module Compile Results\n*.mod*\n*.cmd\n.tmp_versions/\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf\nbuild/\n*.user\n*.opendb\n*.db\n*.suo\ngbdk-support/Debug/\ngbdk-support/bankpack/bankpack\ngbdk-support/gbcompress/gbcompress\ngbdk-support/ihxcheck/ihxcheck\ngbdk-support/lcc/lcc\ngbdk-support/png2mtspr/png2mtspr\ngbdk-support/png2asset/png2asset\ngbdk-support/png2asset/testing/out/*\ngbdk-support/makebin/makebin\ngbdk-support/makecom/makecom\n\ngbdk-support/png2hicolorgb/png2hicolorgb\ngbdk-support/romusage/romusage\nas/bin\nlink/bin\nmaccer\nlink/Debug/\nlink/.vs/\nfar_fixer/Debug/\nfar_fixer/.vs/\n[Dd]ebug/\n\n# Auto-generated make.bat and compile.bat (from Makefiles)\nmake.bat\ncompile.bat\n\n# Doc generation files\ngbdk-lib/doc/\n\n# VS.Code folder\n.vscode\n\ngen/\nbin/\nobj/\ndist/"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.90234375,
          "content": "\n\n### Overview of Licenses in GBDK-2020\n\nSee the relevant licensing files in the LICENSES folder for details on the entries below\n\n\n### For the End User\nQ: What license information is required when distributing the compiled ROM (binary) of my game?\n\nA: There is no requirement to include or credit any of the GBDK-2020 licenses or authors, although credit of GBDK-2020 is appreciated.\n   This is different and separate from redistributing the GBDK-2020 dev environment itself (or the GBDK-2020 sources) which does require the licenses.\n\n\n### GBDK Library & Makefiles, SDCC:\nGPLv2+LE (linking exception). Some files from SDCC, some from the historical GBDK that were originally LGPL and have been relicensed to GPLv2+LE (linking exception) to match the SDCC ones in 2022 by permission of original authors.\n- LICENSE_SDCC\n- LICENSE_GPLV2_LE\n\nWhen patches are used for some SDCC tools they can be found at:\nhttps://github.com/gbdk-2020/gbdk-2020-sdcc\n\n\n### Optional Crash handler in the GBDK Library\nzlib License: https://github.com/ISSOtm/gb-starter-kit/\n- LICENSE_crashhandler\n\n\n### makebin:\nzlib/libpng License\nAccording to: http://sdcc.sourceforge.net/\n\n\n### bankpack, ihxcheck, gbcompress, makecom:\nPublic Domain. @bbbbbr is the original author\n\n\n### png2asset:\nMIT License. @Zal0 is the original author + additional contributors\n\n\n### LCC front end / compiler driver:\nLCC License, traditionally named as the \"CPYRIGHT\" file\n\n\n### png2hicolorgb:\nPublic Domain. Glen Cook and others are the original authors, @bbbbbr authored the cross platform console port\n\n\n\n### Note about historical license changes:\n\n(some edits for brevity)\n\nAugust 4, 2022 (bbbbbr)\n\nRe-licensing of GBDK Library & Makefiles\n\nAs mentioned above, the way forward is to re-license the library code to GPLV2 + LE to match the parts from SDCC so that all library code uses the same license.\n\nTo that end:\n\n- This is from Jon Fuge @jf1452 when asked about re-licensing his contributions to GPL or GPLv2 with a Linking Exception (to have the same licenses as the SDCC library code):\n\n    \"Yes, completely happy to re-license the code to make it more accessible and link to my GitHub account.\"\n\n- This is from Pascal Felber when asked about re-licensing his contributions to GPL or GPLv2 with a Linking Exception (to have the same licenses as the SDCC library code):\n\n    \"Yes, absolutely.\"\n\n- Earlier in this issues @nzmichaelh mentioned being ok with re-licensing to MIT or BSD2. However instead of MIT or BSD2, I'd like to get final specific agreement from @nzmichaelh as well for GPLv2 + LE (linking exception) if that is acceptable (for the reasons mentioned above).\n\n    nzmichaelh, Michael Hope: \"GPLv2 + LE SGTM, go for it.\"\n\n...\n\nGreat!\nWe've got the required signoff so I'll start the repo changes and we're good to go.\nThank you so much Michael, Pascal and Jon for allowing the re-license. We really appreciate the time you've taken to help resolve this issue and clear up any license ambiguity."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 17.65234375,
          "content": "# Top level Makefile for GBDK that combines the builds for sdcc,\n# gbdk-lib, and gbdk-support\n#\n# GBDK-2020\n#\nTOPDIR = $(shell pwd)\n\n# Package name, used for tarballs\nPKG = gbdk\n# Version, used for tarballs & docs\nVER = 4.3.0\n\nPORTS=sm83 z80 mos6502\nPLATFORMS=gb ap duck gg sms msxdos nes\n\n# Prefix to add to the standard tools.  Usefull for a standard gcc\n# cross-compile.\nTOOLSPREFIX =\nifeq ($(OS_TARGET),Win_x32)\n\tTOOLSPREFIX = i686-w64-mingw32-\nendif\nifeq ($(OS_TARGET),Win_x64)\n\tTOOLSPREFIX = x86_64-w64-mingw32-\nendif\n\nTARGETCC = $(TOOLSPREFIX)gcc\nTARGETRANLIB = $(TOOLSPREFIX)ranlib\nTARGETAR = $(TOOLSPREFIX)ar\nTARGETSTRIP = $(TOOLSPREFIX)strip\n\n# Directory containing the source to gbdk-lib\nGBDKLIBDIR = $(TOPDIR)/gbdk-lib\n# Directory containing the source to gbdk-support\nGBDKSUPPORTDIR = $(TOPDIR)/gbdk-support\n\n# Directory with docs config and output (via doxygen)\nGBDKDOCSDIR = $(TOPDIR)/docs\n\nGBDKLICENSEDIR = $(TOPDIR)/licenses\n\n# Doxygen command and version check info\nDOXYGENCMD = doxygen\nDOXYGEN_VER_REQ = 1.8.17\nDOXYGEN_VER_HAS = $(shell doxygen -v)\n\n\n# Base setup\n# Extension to add to executables\nEXEEXTENSION = \nifeq ($(TOOLSPREFIX),i686-w64-mingw32-)\n\tEXEEXTENSION=.exe\nendif\nifeq ($(TOOLSPREFIX),x86_64-w64-mingw32-)\n\tEXEEXTENSION=.exe\nendif\nifeq ($(OS),Windows_NT)\n\tEXEEXTENSION=.exe\nendif\n# Host operating system identifier.\nHOSTOS = $(shell uname -s)\n# Target operating system identifier.  Used in the output zip name.\nTARGETOS ?= $(HOSTOS)\n\n# Directory that gbdk should finally end up in\nTARGETDIR = /opt/gbdk\n# Directory that gbdk for this target is built into.\nBUILDDIR = $(TOPDIR)/build/gbdk\n\nNOISELOG = $(TOPDIR)/noise.log\n\nall: native-build\n\nclean: gbdk-support-clean gbdk-lib-clean\n\ndistclean: clean build-dir-clean\ndist-examples-rebuild: gbdk-dist-examples-clean gbdk-dist-examples-build\n\ndocs: doxygen-generate\ndocspdf: doxygen-generate-with-pdf\ndocsclean: doxygen-clean\ndocsreset: doxygen-reset\ndocstools: docs-toolchain-generate\n\n# Build rule for michaelh's machine to spin a release\nsapphire-full-build: native-build binary cross-clean cross-linux-mingw32-build\n\n# Cross-compilation targets\nFIXUPMASKS = *.c *.h .bat *.s ChangeLog README\n\nnative-build: gbdk-build gbdk-install\n\ncross-clean: gbdk-support-clean\n\ncross-build: gbdk-build gbdk-install cross-cleanup\n\ncross-cleanup:\nifdef MSDOSLINEENDS\n\tfor i in $(FIXUPMASKS); do \\\n\t\tfind $(BUILDDIR) -name $$i -exec unix2dos {} \\; ; \\\n\tdone\nendif\n\ncross-linux-mingw32-build:\n\t$(MAKE) TARGETOS=i586-mingw32msvc \\\n\t\tTOOLSPREFIX=i586-mingw32msvc- \\\n\t\tEXEEXTENSION=.exe \\\n\t\tCROSSCOMPILING=1 \\\n\t\tMSDOSLINEENDS=1 \\\n\t\tTARGETDIR=/sdcc \\\n\t\tARCHIVETYPE=zip \\\n\t\tcross-build gbdk-lib-examples-makefile binary\n\n# Source code drop\nsrc: clean\n\trm -rf gbdk\n\tmkdir -p gbdk\n\tcp -r Makefile sdcc gbdk-lib gbdk-support gbdk\n\ttar czf gbdk-$(VER).tar.gz gbdk\n\n# Base rules\ngbdk-build: gbdk-support-build gbdk-lib-build\n\ngbdk-install: $(BUILDDIR)/bin gbdk-support-install gbdk-lib-install sdcc-install\n\n# Directories\n$(BUILDDIR)/bin:\n\t@echo Creating dir $(BUILDDIR)/bin\n\t@mkdir -p $@\n\nbuild-dir-clean:\n\trm -r $(BUILDDIR)\n\n# Rules for gbdk-support\ngbdk-support-build:\n\t@echo Building lcc\nifdef BINDIR\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/lcc TOOLSPREFIX=$(TOOLSPREFIX) TARGETDIR=$(TARGETDIR)/ BINDIR=$(BINDIR)/ --no-print-directory\nelse\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/lcc TOOLSPREFIX=$(TOOLSPREFIX) TARGETDIR=$(TARGETDIR)/ --no-print-directory\nendif\n\t@echo\n\t@echo Building ihxcheck\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/ihxcheck TOOLSPREFIX=$(TOOLSPREFIX) TARGETDIR=$(TARGETDIR)/ --no-print-directory\n\t@echo Building bankpack\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/bankpack TOOLSPREFIX=$(TOOLSPREFIX) TARGETDIR=$(TARGETDIR)/ --no-print-directory\n\t@echo Building png2asset\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/png2asset TOOLSPREFIX=$(TOOLSPREFIX)\n\t@echo Building gbcompress\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/gbcompress TOOLSPREFIX=$(TOOLSPREFIX) TARGETDIR=$(TARGETDIR)/ --no-print-directory\n\t@echo Building makecom\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/makecom TOOLSPREFIX=$(TOOLSPREFIX) TARGETDIR=$(TARGETDIR)/ --no-print-directory\n\t@echo Building makebin\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/makebin TOOLSPREFIX=$(TOOLSPREFIX) TARGETDIR=$(TARGETDIR)/ --no-print-directory\n\t@echo Building png2hicolorgb\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/png2hicolorgb TOOLSPREFIX=$(TOOLSPREFIX) TARGETDIR=$(TARGETDIR)/ --no-print-directory\n\t@echo Building romusage\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/romusage TOOLSPREFIX=$(TOOLSPREFIX) TARGETDIR=$(TARGETDIR)/ --no-print-directory\n\t@echo\n\ngbdk-support-install: gbdk-support-build $(BUILDDIR)/bin\n\t@echo Installing lcc\n\t@cp $(GBDKSUPPORTDIR)/lcc/lcc$(EXEEXTENSION) $(BUILDDIR)/bin/lcc$(EXEEXTENSION)\n\t@$(TARGETSTRIP) $(BUILDDIR)/bin/lcc$(EXEEXTENSION)\n\t@echo\n\t@echo Installing docs and licenses\n\t@cp $(GBDKDOCSDIR)/ChangeLog $(BUILDDIR)\n\t@cp $(GBDKDOCSDIR)/README $(BUILDDIR)\n\t@cp $(GBDKDOCSDIR)/gbdk_manual.pdf $(BUILDDIR)\n\t@cp $(GBDKDOCSDIR)/sdccman.pdf $(BUILDDIR)\n\t@cp $(GBDKDOCSDIR)/asmlnk_manual.txt $(BUILDDIR)\n\t@cp -r $(GBDKLICENSEDIR) $(BUILDDIR)\n\t@echo\n\t@echo Installing ihxcheck\n\t@cp $(GBDKSUPPORTDIR)/ihxcheck/ihxcheck$(EXEEXTENSION) $(BUILDDIR)/bin/ihxcheck$(EXEEXTENSION)\n\t@$(TARGETSTRIP) $(BUILDDIR)/bin/ihxcheck$(EXEEXTENSION)\n\t@echo Installing bankpack\n\t@cp $(GBDKSUPPORTDIR)/bankpack/bankpack$(EXEEXTENSION) $(BUILDDIR)/bin/bankpack$(EXEEXTENSION)\n\t@$(TARGETSTRIP) $(BUILDDIR)/bin/bankpack$(EXEEXTENSION)\n\t@echo Installing png2asset\n\t@cp $(GBDKSUPPORTDIR)/png2asset/png2asset$(EXEEXTENSION) $(BUILDDIR)/bin/png2asset$(EXEEXTENSION)\n\t@$(TARGETSTRIP) $(BUILDDIR)/bin/png2asset$(EXEEXTENSION)\n\t@echo Installing gbcompress\n\t@cp $(GBDKSUPPORTDIR)/gbcompress/gbcompress$(EXEEXTENSION) $(BUILDDIR)/bin/gbcompress$(EXEEXTENSION)\n\t@$(TARGETSTRIP) $(BUILDDIR)/bin/gbcompress$(EXEEXTENSION)\n\t@echo Installing makecom\n\t@cp $(GBDKSUPPORTDIR)/makecom/makecom$(EXEEXTENSION) $(BUILDDIR)/bin/makecom$(EXEEXTENSION)\n\t@$(TARGETSTRIP) $(BUILDDIR)/bin/makecom$(EXEEXTENSION)\n\t@echo Installing makebin\n\t@cp $(GBDKSUPPORTDIR)/makebin/makebin$(EXEEXTENSION) $(BUILDDIR)/bin/makebin$(EXEEXTENSION)\n\t@$(TARGETSTRIP) $(BUILDDIR)/bin/makebin$(EXEEXTENSION)\n\t@echo Installing png2hicolorgb\n\t@cp $(GBDKSUPPORTDIR)/png2hicolorgb/png2hicolorgb$(EXEEXTENSION) $(BUILDDIR)/bin/png2hicolorgb$(EXEEXTENSION)\n\t@$(TARGETSTRIP) $(BUILDDIR)/bin/png2hicolorgb$(EXEEXTENSION)\n\t@echo Installing romusage\n\t@cp $(GBDKSUPPORTDIR)/romusage/romusage$(EXEEXTENSION) $(BUILDDIR)/bin/romusage$(EXEEXTENSION)\n\t@$(TARGETSTRIP) $(BUILDDIR)/bin/romusage$(EXEEXTENSION)\n\t@echo\n\ngbdk-support-clean:\n\t@echo Cleaning lcc\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/lcc clean --no-print-directory\n\t@echo\n\t@echo Cleaning ihxcheck\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/ihxcheck clean --no-print-directory\n\t@echo Cleaning bankpack\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/bankpack clean --no-print-directory\n\t@echo Cleaning png2asset\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/png2asset clean\n\t@echo Cleaning gbcompress\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/gbcompress clean --no-print-directory\n\t@echo Cleaning makecom\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/makecom clean\n\t@echo Cleaning makebin\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/makebin clean\n\t@echo Cleaning png2hicolorgb\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/png2hicolorgb clean\n\t@echo Cleaning romusage\n\t@$(MAKE) -C $(GBDKSUPPORTDIR)/romusage clean\n\t@echo\n\n# Rules for gbdk-lib\ngbdk-lib-build: check-SDCCDIR\nifndef CROSSCOMPILING\n\t@echo Building lib\n\t@$(MAKE) -C $(GBDKLIBDIR)/libc PORTS=\"$(PORTS)\" PLATFORMS=\"$(PLATFORMS)\" --no-print-directory\n\t@echo\nendif\n\n\ngbdk-lib-install: gbdk-lib-build\ngbdk-lib-install: gbdk-lib-install-prepare\ngbdk-lib-install: gbdk-lib-install-examples\ngbdk-lib-install: gbdk-lib-install-ports\ngbdk-lib-install: gbdk-lib-install-platforms\n\ngbdk-lib-install-prepare:\n\t@rm -rf $(BUILDDIR)/lib\n\ngbdk-lib-install-ports: gbdk-lib-build\n\t@for port in $(PORTS); do \\\n\t\techo Installing lib for port: $$port; \\\n\t\tmkdir -p $(BUILDDIR)/lib/$$port/; \\\n\t\tcp $(GBDKLIBDIR)/build/$$port/$$port.lib $(BUILDDIR)/lib/$$port/$$port.lib; \\\n\tdone\n\t@echo\n\n# The inner loop copies global.s for platforms from relevant port/platform.\n# When doing that it expects a given platform to never be present in\n# multiple ports since the copy destination is not port specific (lacks /$$port/ )\ngbdk-lib-install-platforms:\n\t@for plat in $(PLATFORMS); do \\\n\t\techo Installing lib for platform: $$plat; \\\n\t\tmkdir -p $(BUILDDIR)/lib/$$plat; \\\n\t\ttouch $(BUILDDIR)/lib/$$plat/crt0.lst; \\\n\t\tcp $(GBDKLIBDIR)/build/$$plat/crt0.o $(BUILDDIR)/lib/$$plat/crt0.o; \\\n\t\tcp $(GBDKLIBDIR)/build/$$plat/$$plat.lib $(BUILDDIR)/lib/$$plat/$$plat.lib; \\\n\t\tfor port in $(PORTS); do \\\n\t\t\tif [ -d \"$(GBDKLIBDIR)/libc/targets/$$port/$$plat\" ]; then \\\n\t\t\t\tcp $(GBDKLIBDIR)/libc/targets/$$port/$$plat/global.s $(BUILDDIR)/lib/$$plat/global.s; \\\n\t\t\tfi \\\n\t\tdone \\\n\tdone\n\t@echo\n\n\ngbdk-lib-install-examples:\n\t@echo Installing Examples\n\t@cp -r $(GBDKLIBDIR)/include $(GBDKLIBDIR)/examples $(BUILDDIR)\n\t@for plat in $(PLATFORMS); do \\\n\t\tif [ -d \"$(BUILDDIR)/examples/$$plat\" ]; then \\\n\t\t\techo Generating Examples compile.bat for $$plat; \\\n\t\t\t$(MAKE) -C $(BUILDDIR)/examples/$$plat compile.bat --no-print-directory; \\\n\t\t\techo; \\\n\t\tfi \\\n\tdone\n\n\ngbdk-lib-clean:\n\t@echo Cleaning lib\n\t@$(MAKE) -C $(GBDKLIBDIR) PORTS=\"$(PORTS)\" PLATFORMS=\"$(PLATFORMS)\" clean\n\t@echo\n\ngbdk-lib-examples-makefile:\n\t$(MAKE) -C $(BUILDDIR)/examples/gb compile.bat\n\tunix2dos $(BUILDDIR)/examples/gb/compile.bat\n\ngbdk-dist-examples-build:\n\t$(MAKE) -C $(BUILDDIR)/examples/gb\n\ngbdk-dist-examples-clean:\n\t$(MAKE) -C $(BUILDDIR)/examples/gb clean\n\n\n# Copy SDDC executable files and DLLs\n# win 32 specific: libgcc_s_dw2-1.dll\n# win 64 specific: libgcc_s_seh-1.dll\nSDCC_BINS = packihx sdar sdasgb sdcc sdcpp sdldgb sdnm sdobjcopy sdranlib sdasz80 sdldz80 sdas6500 sdld6808 sdld\nifeq ($(OS),Windows_NT)\n\n# Check for 32 bit Windows target a couple different ways and select the matching SDCC DLL\nWIN_TARGET = $(firstword $(subst -, ,$(shell $(TARGETCC) -dumpmachine)))\nifeq ($(OS_TARGET),Win_x32)\nSDCC_OS_DLL = libgcc_s_dw2-1.dll\nelse ifeq ($(WIN_TARGET),mingw32)\nSDCC_OS_DLL = libgcc_s_dw2-1.dll\nelse ifeq ($(WIN_TARGET),i686)\nSDCC_OS_DLL = libgcc_s_dw2-1.dll\nelse\n# Otherwise default 64 bit Windows SDCC DLL\nSDCC_OS_DLL = libgcc_s_seh-1.dll\nendif\n\nMINGW64_RUNTIME = \\\n\tlibgcc_s_sjlj-1.dll \\\n\tlibstdc++-6.dll \\\n\tlibwinpthread-1.dll \\\n\treadline5.dll\nSDCC_BINS := $(addsuffix .exe, $(SDCC_BINS)) $(MINGW64_RUNTIME) $(SDCC_OS_DLL)\nendif\n\nsdcc-install: check-SDCCDIR\n\t@echo Installing SDCC\n\t@for i in $(SDCC_BINS); do \\\n\tcp $(SDCCDIR)/bin/$$i $(BUILDDIR)/bin/ && echo \"-> $$i\" ; \\\n\tdone\n\t@cp -r $(SDCCDIR)/libexec $(BUILDDIR) && echo \"-> cc1\"\n\n# Final binary\nbinary:\nifeq ($(ARCHIVETYPE),zip)\n\trm -f $(TOPDIR)/gbdk-$(VER)-$(TARGETOS).zip\n\tcd $(BUILDDIR)/..; zip -9Xrq $(TOPDIR)/gbdk-$(VER)-$(TARGETOS).zip gbdk\nelse\n\trm -f $(TOPDIR)/gbdk-$(VER)-$(TARGETOS).tar.gz\n\tcd $(BUILDDIR)/..; tar czf $(TOPDIR)/gbdk-$(VER)-$(TARGETOS).tar.gz gbdk\nendif\n\n# Install\ninstall: native-build\n\tmkdir -p $(TARGETDIR)\n\tcp -r $(BUILDDIR)/* $(TARGETDIR)\n\n# Make sure SDCCDIR is populated\n# Swap WIN/MSDOS slashes to Unix style for MinGW (prevent some errors with cp)\ncheck-SDCCDIR:\nifndef SDCCDIR\n\t$(error SDCCDIR is undefined)\nendif\nifeq ($(OS),Windows_NT)\nSDCCDIR := $(subst \\,/,$(SDCCDIR))\nendif\n\n# First purge doxygen output directory to clear potentially stale output.\n# Next change working dir so \"include\" is the root doxygen works in.\n# That prevents it from including the path leading up to there in the\n# output, even though it's instructed to only process starting at \"include\".\ndoxygen-generate:\nifeq ($(shell expr \"$(DOXYGEN_VER_HAS)\" \\< \"$(DOXYGEN_VER_REQ)\"), 1)\n\t$(error Doxygen version $(DOXYGEN_VER_HAS) is too old! Minimum version is $(DOXYGEN_VER_REQ))\nendif\n#Run Doxygen\t\n\trm -rf $(GBDKDOCSDIR)/api; \\\n\t  cd \"$(GBDKLIBDIR)/include\"; \\\n\t  GBDKDOCSDIR=\"$(GBDKDOCSDIR)\" GBDKVERSION=$(VER) GBDKLIBDIR=\"$(GBDKLIBDIR)\" GBDKBASEDIR=\"$(TOPDIR)\" $(DOXYGENCMD) \"$(GBDKDOCSDIR)/config/gbdk-2020-doxyfile\"\n\t@if [ \"$(DOCS_PDF_ON)\" = \"YES\" ]; then\\\n\t\t$(MAKE) -C $(GBDKDOCSDIR)/latex;\\\n\t\tcp $(GBDKDOCSDIR)/latex/refman.pdf $(GBDKDOCSDIR)/gbdk_manual.pdf;\\\n\tfi\n\trm -rf $(GBDKDOCSDIR)/latex\n# Patch in improved text search for Doxygen\n#\n# Create a combined array of all js search terms instead of the default arrays partitioned by first-letter index\n\techo \"var searchData = [\" > $(GBDKDOCSDIR)/api/search/combined.js\n\tcat $(GBDKDOCSDIR)/api/search/all*.js | sed -e \"s/var.*searchData.*//\" | sed -e \"s/^\\[//\" | sed -e \"s/^\\]\\;//\" | sed -e \"s/\\]\\]\\].*/\\]\\]\\],/\" >> $(GBDKDOCSDIR)/api/search/combined.js\n\techo \"];\" >> $(GBDKDOCSDIR)/api/search/combined.js\n# Override JS search functions to default doxygen search\n\tcat $(GBDKDOCSDIR)/doxygen_search_override.js >> $(GBDKDOCSDIR)/api/search/search.js\n\tcp $(GBDKDOCSDIR)/doxygen_search_combined.html $(GBDKDOCSDIR)/api/search/combined.html\n\n# Turn on Latex -> PDF conversion to run run at end of regular docs build\n# (which includes latex output but deletes it at the end).\n#\n# The conversion process requires a Latex install.\n# For Windows there are various Latex packages to choose from.\n# For Linux this appears to be the minimum:\n#   sudo apt install texlive-latex-base\n#   sudo apt install texlive-latex-recommended\n#   sudo apt install texlive-latex-extra\n#\ndoxygen-generate-with-pdf:\tDOCS_PDF_ON=YES\ndoxygen-generate-with-pdf:\tdoxygen-generate\n\n\n# Generate toolchain settings markdown file (if possible)\ndocs-toolchain-generate:\tTOOLCHAIN_DOCS_FILE=$(GBDKDOCSDIR)/pages/20_toolchain_settings.md\ndocs-toolchain-generate:\nifneq (,$(wildcard $(BUILDDIR)/bin/))\n\techo \\@page docs_toolchain_settings Toolchain settings > $(TOOLCHAIN_DOCS_FILE)\n# lcc\n\techo \\@anchor lcc-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# lcc settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t  cd \"$(BUILDDIR)/bin/\"; \\\n\t  ./lcc >> $(TOOLCHAIN_DOCS_FILE) 2>&1\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# sdcc\n\techo \\@anchor sdcc-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# sdcc settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/sdcc -h >> $(TOOLCHAIN_DOCS_FILE) 2>&1\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# sdasgb\n\techo \\@anchor sdasgb-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# sdasgb settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/sdasgb -h >> $(TOOLCHAIN_DOCS_FILE) 2>&1 || true\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# sdasz80\n\techo \\@anchor sdasz80-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# sdasz80 settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/sdasz80 -h >> $(TOOLCHAIN_DOCS_FILE) 2>&1 || true\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# sdas6500\n\techo \\@anchor sdas6500-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# sdas6500 settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/sdas6500 -h >> $(TOOLCHAIN_DOCS_FILE) 2>&1 || true\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# bankpack\n\techo \\@anchor bankpack-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# bankpack settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/bankpack -h >> $(TOOLCHAIN_DOCS_FILE) 2>&1 || true\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# sdldgb\n\techo \\@anchor sdldgb-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# sdldgb settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/sdldgb >> $(TOOLCHAIN_DOCS_FILE) 2>&1 || true\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# sdldz80\n\techo \\@anchor sdldz80-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# sdldz80 settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/sdldgb >> $(TOOLCHAIN_DOCS_FILE) 2>&1 || true\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# sdld6808\n\techo \\@anchor sdld6808-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# sdld6808 settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/sdldgb >> $(TOOLCHAIN_DOCS_FILE) 2>&1 || true\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# ihxcheck\n\techo \\@anchor ihxcheck-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# ihxcheck settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/ihxcheck -h >> $(TOOLCHAIN_DOCS_FILE) 2>&1 || true\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# makebin\n\techo \\@anchor makebin-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# makebin settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo Also see \\@ref setting_mbc_and_rom_ram_banks >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/makebin -h >> $(TOOLCHAIN_DOCS_FILE) 2>&1\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# makecom\n\techo \\@anchor makecom-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# makecom settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/makecom -h >> $(TOOLCHAIN_DOCS_FILE) 2>&1 || true\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# gbcompress\n\techo \\@anchor gbcompress-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# gbcompress settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/gbcompress -h >> $(TOOLCHAIN_DOCS_FILE) 2>&1 || true\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n# png2asset\n\techo \\@anchor png2asset-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# png2asset settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/png2asset >> $(TOOLCHAIN_DOCS_FILE) 2>&1 || true\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE)\n# png2hicolorgb\n\techo \\@anchor png2hicolorgb-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# png2hicolorgb settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/png2hicolorgb -h >> $(TOOLCHAIN_DOCS_FILE) 2>&1\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE)\n# romusage\n\techo \\@anchor romusage-settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\# romusage settings >> $(TOOLCHAIN_DOCS_FILE);\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE);\n\t$(BUILDDIR)/bin/romusage -h >> $(TOOLCHAIN_DOCS_FILE) 2>&1\n\techo \\`\\`\\` >> $(TOOLCHAIN_DOCS_FILE)\nendif\n\n\ndoxygen-clean:\n\trm -rf $(GBDKDOCSDIR)/api\n\ndoxygen-reset:\n\trm -rf $(GBDKDOCSDIR)/api\n\tgit checkout $(GBDKDOCSDIR)/api\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.662109375,
          "content": "# GBDK-2020\nGBDK is a cross-platform development kit for sm83, z80 and 6502 based gaming consoles. It includes libraries, toolchain utilities and the [SDCC](http://sdcc.sourceforge.net/) C compiler suite.\n\n__Supported Consoles:__ [(see docs)](https://gbdk-2020.github.io/gbdk-2020/docs/api/docs_supported_consoles.html)\n- Nintendo Game Boy / Game Boy Color\n- Analogue Pocket\n- Sega Master System & Game Gear\n- Mega Duck / Cougar Boy\n- NES\n\nExperimental consoles (not yet fully functional)\n  - MSXDOS\n\n\n## Current Release\n\n[![Current Release](https://img.shields.io/github/v/release/gbdk-2020/gbdk-2020?label=Current%20Release)](https://github.com/gbdk-2020/gbdk-2020/releases/latest)\n![Downloads](https://img.shields.io/github/downloads/gbdk-2020/gbdk-2020/total?label=Total%20Downloads)\n\n<a href=\"https://github.com/gbdk-2020/gbdk-2020/releases/latest/download/gbdk-linux64.tar.gz\"><img src=\"https://img.shields.io/badge/Linux-FCC624?style=for-the-badge&logo=linux&logoColor=black\" alt=\"GBDK-2020 Linux Release\"></a>\n<a href=\"https://github.com/gbdk-2020/gbdk-2020/releases/latest/download/gbdk-macos.tar.gz\"><img src=\"https://img.shields.io/badge/mac%20os%20intel-000000?style=for-the-badge&logo=apple&logoColor=white\" alt=\"GBDK-2020 MacOS Intel Release\"></a>\n<a href=\"https://github.com/gbdk-2020/gbdk-2020/releases/latest/download/gbdk-macos-arm64.tar.gz\"><img src=\"https://img.shields.io/badge/mac%20os%20arm%20(m*)-000000?style=for-the-badge&logo=apple&logoColor=white\" alt=\"GBDK-2020 MacOS ARM Release\"></a>\n<a href=\"https://github.com/gbdk-2020/gbdk-2020/releases/latest/download/gbdk-win64.zip\"><img src=\"https://img.shields.io/badge/Windows%2064%20Bit-0078D6?style=for-the-badge&logo=windows&logoColor=white\" alt=\"GBDK-2020 Windows 64 Bit Release\"></a> \n<a href=\"https://github.com/gbdk-2020/gbdk-2020/releases/latest/download/gbdk-win32.zip\"><img src=\"https://img.shields.io/badge/32%20Bit-0078D6?style=for-the-badge&logo=windows&logoColor=white\" alt=\"GBDK-2020 Windows 32 Bit\"></a> \n\n<!-- <a href=\"https://hub.docker.com\"><img src=\"https://img.shields.io/badge/Docker-2CA5E0?style=for-the-badge&logo=docker&logoColor=white\" alt=\"Docker\"></a> -->\n\nUpgrading to a new version? Check the [Migration notes](https://gbdk-2020.github.io/gbdk-2020/docs/api/docs_migrating_versions.html). You can find older versions [here](https://github.com/gbdk-2020/gbdk-2020/releases).\n\nFor a full list of changes see the [ChangeLog](https://github.com/gbdk-2020/gbdk-2020/blob/master/docs/ChangeLog) file or [online Docs](https://gbdk-2020.github.io/gbdk-2020/docs/api/docs_releases.html).\n\n\n## Build status\n[![GBDK Build and Package](https://github.com/gbdk-2020/gbdk-2020/actions/workflows/gbdk_build_and_package.yml/badge.svg?branch=develop)](https://github.com/gbdk-2020/gbdk-2020/actions/workflows/gbdk_build_and_package.yml)\n\n## Made with GBDK-2020\nSee our gallery showcasing [Games and Programs made with GBDK](https://gbdk-2020.github.io/gbdk-2020-gallery/), including open source and cart release filters.\n\n[![GBDK Showcase Preview](/docs/gbdk_gallery_preview.jpg)](https://gbdk-2020.github.io/gbdk-2020-gallery/)\n\n\n## Docs\nGBDK includes extensive [documentation](https://gbdk-2020.github.io/gbdk-2020/docs/api). A good place to begin is the [Getting Started Section](https://gbdk-2020.github.io/gbdk-2020/docs/api/docs_getting_started.html).\n\nCheck the [Links and Third-Party Tools Section](https://gbdk-2020.github.io/gbdk-2020/docs/api/docs_links_and_tools.html) for a list of recommended emulators, graphics tools, music drivers and more.\n\nFor SDCC you can check its [website](http://sdcc.sourceforge.net/) and the [manual](http://sdcc.sourceforge.net/doc/sdccman.pdf)\n\n\n## Usage\nMost users will only need to download and unzip the latest [release](https://github.com/gbdk-2020/gbdk-2020/releases)\n\nThen go to the examples folder and build them (with `compile.bat` on Windows or running `make`). They are a good starting point.\n\nThe sources in this repo are only needed if you want to re-compile GBDK-2020 yourself instead of using the release binaries linked above.\n\n\n## Discord servers\n* [gbdk/zgb Discord](https://discord.gg/XCbjCvqnUY) - For help with using GBDK (and ZGB), discussion and development of gbdk-2020\n\n* [gbdev Discord](https://discordapp.com/invite/tKGMPNr) - There is a #gbdk channel and also people with a lot of Game Boy development knowledge\n* [SMS Power! Discord](https://discord.gg/h5xrKUK) - Additional SMS & Game Gear discussion and resources.\n\n## Forums\n- [The Game Boy Development Forum](https://gbdev.gg8.se/forums/) - A good place to search for Game Boy related answers. \n- [SMS Power! Forum](https://www.smspower.org/) - Additional SMS & Game Gear discussion and resources.\n\n\n## Current status\n- Updated CRT and library that suits better for game development\n- SDCC Versions\n  - A [custom build of SDCC](https://github.com/gbdk-2020/gbdk-2020-sdcc/releases) is used with [patches](https://github.com/gbdk-2020/gbdk-2020-sdcc/releases/tag/patches) to support Sega GG/SMS and the Nintendo NES. See the [github workflow](https://github.com/gbdk-2020/gbdk-2020-sdcc/tree/main/.github/workflows) for details of how to patch and build SDCC.\n  - The default calling convention changed in `SDCC 4.2`. This is supported starting with `GBDK-2020 4.1.0`. Older versions of GBDK should use SDCC builds #12539 or older (see per-version GBDK notes).\n- The compiler driver **lcc** supports the latest sdcc toolchain.\n\n\n## Origin\nOver the years people have been complaining about all the GBDK issues caused by a very old version of SDCC (the compiler). This is a proper attempt of updating it while also keeping all the old functionality working, like support for banked code and data and so on.\n\nThe last version in the OLD repo is [2.96](https://sourceforge.net/projects/gbdk/files/gbdk/2.96/) although releases are available until 2.95-3. Version [2.96](https://sourceforge.net/projects/gbdk/files/gbdk/2.96/) is the starting point of this repo.\n\n\n# Build instructions\nUnless you are interested on recompiling the sources for some reason (like fixing some bugs) **you don't need to build GBDK**\n\n- **Windows only**: Download and install [mingw](http://mingw-w64.org/)\n- Clone, download this repo or just get the source from the [releases](https://github.com/gbdk-2020/gbdk-2020/releases)\n- Download and install the **PATCHED** [sdcc builds](https://github.com/gbdk-2020/gbdk-2020-sdcc/releases) from the separate repo for that (https://github.com/gbdk-2020/gbdk-2020-sdcc).\n- On Linux **don't use package managers** The latest release available won't work, you need to compile or download one of the nightlies\n- Create **SDCCDIR** environment variable, that points into the folder, where you installed sdcc\n- Open command prompt or a terminal, go to the root directory of the repo and run **make**\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0263671875,
          "content": "theme: jekyll-theme-minimal"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gbdk-lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "gbdk-support",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}