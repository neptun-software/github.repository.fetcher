{
  "metadata": {
    "timestamp": 1736709659506,
    "page": 7,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FeralInteractive/gamemode",
      "stars": 4927,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.2978515625,
          "content": "---\nAccessModifierOffset: 0\nAlignAfterOpenBracket: true\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: false\nAlignOperands: true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\n# AlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: false\nBinPackArguments: false\nBinPackParameters: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Linux\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\n# Too new for travis clang-format version\n# BreakStringLiterals: false\nColumnLimit: 100\nCommentPragmas:  '\\*\\<'\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat: false\nExperimentalAutoDetectBinPacking: false\nForEachMacros: [ ]\nSortIncludes: true\n# IncludeBlocksStyle changed to IncludeBlocks, between xenial and disco, so we can't use it for consistency\n# IncludeBlocks: Regroup\nIncludeCategories:\n  - Regex: '^<linux\\/'\n    Priority: 0\n  - Regex: '^<'\n    Priority: 1\n  - Regex: '^\"gamemode.h\"'\n    Priority: 2\n  - Regex: '^\"'\n    Priority: 3\n# IncludeIsMainRegex: (project doesn't use a main includes that can add other includes via regex)\nIndentCaseLabels: false\nIndentWidth: 4\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nLanguage: Cpp\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nPenaltyBreakBeforeFirstCallParameter: 400\nPenaltyBreakComment: 0\nPenaltyBreakString: 500\nPenaltyExcessCharacter: 10000\nPenaltyReturnTypeOnItsOwnLine: 600\nPointerAlignment: Right\nReflowComments: true\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        4\nUseTab:          ForIndentation\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": "/builddir\n/subprojects/packagecache/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.99609375,
          "content": "## 1.8.2\n\n### Changes\n\n* Fix idle inhibitor closing bus connection too early (#466)\n* Fix hybrid CPU core pinning (#455)\n* Fix unreadable process maps in gamemodelist (#463)\n* Fixed crash if dbus is not accesible (#458)\n* Various bugfixes and improvements to documentation\n\n### Contributors\n\n* @notpeelz\n* @patatahooligan\n* Reilly Brogan @ReillyBrogan\n* Alexandru Ionut Tripon @Trial97\n* Kostadin @kostadinsh\n* Daniel Martinez @Calandracas606\n\n[View the full list of contributors](https://github.com/FeralInteractive/gamemode/graphs/contributors?from=2023-12-13&to=2024-08-19&type=c)\n\n## 1.8.1\n\n### Changes\n\n* Fix polkit parse error (#449)\n\n### Contributors\n\n* @Vam-Jam\n\n[View the full list of contributors](https://github.com/FeralInteractive/gamemode/graphs/contributors?from=2022-07-22&to=2023-12-12&type=c)\n\n## 1.8\n\n### Changes\n\n* Add CPU core pinning and parking capability (#416)\n* Allow disabling the Linux kernel split lock mitigation (#446)\n* Fix building when pidfd_open is available (Fixes build with glibc 2.36) (#379)\n* Unify privileged group configuration between pam, systemd, & polkit (#375)\n* Various other bugfixes and improved default configuration\n\n### Contributors\n\n* Henrik Holst @HenrikHolst\n* Kira Bruneau @kira-bruneau\n* James Le Cuirot @chewi\n* Hugo Locurcio @Calinou\n* Zoltán Nyikos @nyz93\n* @ashuntu\n* @szymon-gniado\n\n[View the full list of contributors](https://github.com/FeralInteractive/gamemode/graphs/contributors?from=2022-07-22&to=2023-12-06&type=c)\n\n## 1.7\n\n### Changes\n\n* Added new utility: `gamemodelist` (#346)\n* Run executables from `PATH` instead of `/usr/bin` (#323)\n* Add a trivial `gamemode.conf` file, which creates the gamemode group (#339)\n* Various minor bugfixes and updates to documentation\n\n### Contributors\n\n* Sam Gleske @samrocketman\n* Kira Bruneau @kira-bruneau\n* Stephan Lachnit @stephanlachnit\n* Emil Velikov @evelikov-work\n\n[View the full list of contributors](https://github.com/FeralInteractive/gamemode/graphs/contributors?from=2021-02-19&to=2022-07-21&type=c)\n\n## 1.6.1\n\n### Changes\n\n* Use inih r53\n* Packaging changes for Arch\n* Minor metainfo improvements\n\n### Contributors\n\n* Stephan Lachnit @stephanlachnit\n* Alberto Oporto Ames @otreblan\n\n## 1.6\n\n### Changes\n\n* Created new manpages for `gamemoderun` and the example, now called `gamemode-simulate-game`\n* Add ability to change lib directory of `gamemoderun`\n* Add option to use `elogind`\n* Copy default config file to the correct location\n* Allow `LD_PRELOAD` to be overridden in `$GAMEMODERUNEXEC`\n* Various minor bugfixes\n* Improvements to dependency management\n\n### Contributors\n\n* Stephan Lachnit @stephanlachnit\n* Rafał Mikrut @qarmin\n* Niels Thykier @nthykier\n* Stéphane Gleizes @sgleizes\n\n## 1.5.1\n\n### Changes\n\nMinor changes for Debian and Ubuntu packaging:\n* Use the preferred logging system rather than defaulting to syslog.\n* Prefer the system installation of inih.\n\n### Contributors\n\n* Sebastien Bacher @seb128\n* Stephan Lachnit @stephanlachnit\n\n## 1.5\n\n### Changes\n\n* Introduce a new pidfd based set of D-Bus APIs (#173)\n* Dynamically change governor on integrated GPUs for improved performance (#179)\n* Various other fixes and improvements.\n\n### Contributors\n\n* Alex Smith @aejsmith\n* Christian Kellner @gicmo\n* Faith Ekstrand @gfxstrand\n\n## 1.4\n\n### Changes\n\n* Add new D-Bus methods/properties for use by external tools such as the [GameMode GNOME Shell extension](https://github.com/gicmo/gamemode-extension/) (#129, #155, #161).\n* Fix I/O priority and niceness optimisations to apply to the whole process rather than just the thread that requests GameMode (#142).\n* `gamemoded` will now automatically reload the configuration file when it is changed and update optimisations on current clients (#144).\n* Add support for using the client library inside Flatpak by communicating with the daemon via a portal (#146).\n* Client library now uses libdbus rather than sd-bus (#147).\n* Fix `gamemoderun` to use the correct library path depending on whether the app is 32-bit or 64-bit.\n* Support the `GAMEMODERUNEXEC` environment variable to specify an extra wrapper command for games launched with `gamemoderun` (e.g. a hybrid GPU wrapper such as `optirun`) (#159).\n* Various other fixes and improvements.\n\n### Contributors\n\n* Christian Kellner @gicmo\n* Marc Di Luzio @mdiluz\n* Matthias Gerstner @mgerstner\n* Minze Zwerver @ysblokje\n* Stephan Lachnit @stephanlachnit\n* Timo Gurr @tgurr\n\n## 1.3.1\n\n### Changes\n\n* Change permission of `gamemoderun` in source tree so that it is correctly installed with execute permissions on older Meson versions (such as that included with Ubuntu 18.04) (#115).\n* Enable more compiler warnings and fix issues highlighted by these.\n\n### Contributors\n\n* Christian Kellner @gicmo\n\n## 1.3\n\n### Changes\n\n* Disable screensaver when the game is running (can help when playing with gamepad or joystick).\n* Add a `gamemoderun` helper script to do the necessary setup (set `LD_PRELOAD`) to enable GameMode on games which do not support it themselves.\n* Support for overclocking on NVIDIA GPUs (experimental, use at your own risk). See `example/gamemode.ini` for further details.\n* Support for configuring performance level on AMD GPUs (experimental, use at your own risk). See `example/gamemode.ini`.\n* Increase I/O priority of game processes.\n* `softrealtime` and `renice` options are no longer enabled by default since they require extra system configuration. See `example/gamemode.ini`.\n* Add supervisor API which allows requesting GameMode on behalf of another process.\n* Add tests for GameMode functionality (run with `gamemoded -t`).\n* Various other minor fixes and improvements.\n\n### Contributors\n\n* Marc Di Luzio @mdiluz\n* Kai Krakow @kakra\n* Matthias Gerstner @mgerstner\n* Suvayu Ali @suvayu\n* Térence Clastres @terencode\n\n## 1.2\n\n### Changes\n\n* Store the initial governor state on mode enter.\n* Config now supports `defaultgov` and `desiredgov`.\n* Add soft real-time scheduling support on kernels supporting SCHED_ISO (`softrealtime` config option) and support for renice-ing games to a higher priority (`renice` config option) (contributed by Kai Krakow).\n* Make service D-Bus activated rather than requiring it to be explicitly enabled in systemd (contributed by Christian Kellner).\n* Make libraries properly versioned (contributed by Christian Kellner).\n\n## 1.1\n\n### Changes\n\n* Cascaded config file loading.\n* `gamemode_query_status` function.\n* `-r` (request) and `-s` (status) for gamemoded.\n* User defined script plugins in the config file.\n* User defined reaper thread frequency.\n* Various code refactors and fixes.\n* systemd status messages.\n* release management scripts.\n* inih moved to a git submodule.\n\n## 1.0\n\n### Changes\n\n* Fixed and cleaned up README file.\n* Config file parsing.\n* Man page.\n* Example PKGBUILD file.\n* Bug fix for missing `pthread_rwlock_init`.\n\n## 0.2\n\n### Changes\n\n* Updated meson build to improve compatibility, configuration and development.\n* cpugovctl now uses polkit.\n* Fixed potential threading issues.\n* Added option to use the system d-bus for the daemon rather than systemd.\n* Various code style and standards related improvements.\n\n## 0.1\n\nInitial release.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.466796875,
          "content": "Copyright (c) 2017-2024, Feral Interactive\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n * Neither the name of Feral Interactive nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.8896484375,
          "content": "# GameMode\n**GameMode** is a daemon/lib combo for Linux that allows games to request a set of optimisations be temporarily applied to the host OS and/or a game process.\n\nGameMode was designed primarily as a stop-gap solution to problems with the Intel and AMD CPU powersave or ondemand governors, but is now host to a range of optimisation features and configurations.\n\nCurrently GameMode includes support for optimisations including:\n* CPU governor\n* I/O priority\n* Process niceness\n* Kernel scheduler (`SCHED_ISO`)\n* Screensaver inhibiting\n* GPU performance mode (NVIDIA and AMD), GPU overclocking (NVIDIA)\n* CPU core pinning or parking\n* Custom scripts\n\nGameMode packages are available for Ubuntu, Debian, Solus, Arch, Gentoo, Fedora, OpenSUSE, Mageia and possibly more.\n\nIssues with GameMode should be reported here in the issues section, and not reported to Feral directly.\n\n---\n## Requesting GameMode\n\nFor games/launchers which integrate GameMode support (see list later on), simply running the game will automatically activate GameMode.\n\nFor others, you must manually request GameMode when running the game. This can be done by launching the game through `gamemoderun`:\n```bash\ngamemoderun ./game\n```\nOr edit the Steam launch options:\n```bash\ngamemoderun %command%\n```\n\nNote: for older versions of GameMode (before 1.3) use this string in place of `gamemoderun`:\n```\nLD_PRELOAD=\"$LD_PRELOAD:/usr/\\$LIB/libgamemodeauto.so.0\"\n```\n**Please note the backslash here in `\\$LIB` is required.**\n\n---\n## Configuration\n\nThe daemon is configured with a `gamemode.ini` file. [example/gamemode.ini](https://github.com/FeralInteractive/gamemode/blob/master/example/gamemode.ini) is an example of what this file would look like, with explanations for all the variables.\n\nConfiguration files are loaded and merged from the following directories, from highest to lowest priority:\n\n1. `$PWD` (\"unsafe\" - **`[gpu]` settings take no effect in this file**)\n2. `$XDG_CONFIG_HOME` or `$HOME/.config/` (\"unsafe\" - **`[gpu]` settings take no effect in this file**)\n3. `/etc/`\n4. `/usr/share/gamemode/`\n\n---\n## Note for Hybrid GPU users\n\nIt's not possible to integrate commands like optirun automatically inside GameMode, since the GameMode request is made once the game has already started. However it is possible to use a hybrid GPU wrapper like optirun by starting the game with `gamemoderun`.\n\nYou can do this by setting the environment variable `GAMEMODERUNEXEC` to your wrapper's launch command, so for example `GAMEMODERUNEXEC=optirun`, `GAMEMODERUNEXEC=\"env DRI_PRIME=1\"`, or `GAMEMODERUNEXEC=\"env __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia __VK_LAYER_NV_optimus=NVIDIA_only\"`. This environment variable can be set globally (e.g. in /etc/environment), so that the same prefix command does not have to be duplicated everywhere you want to use `gamemoderun`.\n\nGameMode will not be injected to the wrapper.\n\n---\n## Apps with GameMode integration\n\n### Games\nThe following games are known to integrate GameMode support (meaning they don't require any additional configuration to activate GameMode while running):\n* DiRT 4\n* Rise of the Tomb Raider\n* Shadow of the Tomb Raider\n* Total War Saga: Thrones of Britannia\n* Total War: ROME REMASTERED\n* Total War: Three Kingdoms\n* Total War: WARHAMMER II\n* Total War: WARHAMMER III\n\n### Others\nOther apps which can integrate with GameMode include:\n* [ATLauncher](https://atlauncher.com/downloads) Minecraft launcher\n* [Cemu](https://cemu.info/) Wii U emulator\n* [GNOME Shell Extension](https://github.com/trsnaqe/gamemode-shell-extension) GameMode status indicator extension for GNOME Shell\n* [Lutris](https://lutris.net/) Install and play any video game easily\n  * Enables GameMode for all games by default if available (must have both 32- and 64-bit GameMode libraries installed), configurable in preferences.\n* [Prism Launcher](https://prismlauncher.org/) Minecraft launcher\n* [RetroArch](https://www.retroarch.com) Frontend for emulators, game engines and media players\n* [Vinegar](https://vinegarhq.org/) Roblox Player/Studio bootstrapper\n---\n## Development [![Build and test](https://github.com/FeralInteractive/gamemode/actions/workflows/build-and-test.yml/badge.svg)](https://github.com/FeralInteractive/gamemode/actions/workflows/build-and-test.yml)\n\nThe design of GameMode has a clear-cut abstraction between the host daemon and library (`gamemoded` and `libgamemode`), and the client loaders (`libgamemodeauto` and `gamemode_client.h`) that allows for safe use without worrying about whether the daemon is installed or running. This design also means that while the host library currently relies on `systemd` for exchanging messages with the daemon, it's entirely possible to implement other internals that still work with the same clients.\n\nSee repository subdirectories for information on each component.\n\n### Install Dependencies\nGameMode depends on `meson` for building and `systemd` for internal communication. This repo contains a `bootstrap.sh` script to allow for quick install to the user bus, but check `meson_options.txt` for custom settings.\n\n#### Ubuntu/Debian (you may also need `dbus-user-session`)\n\n```bash\napt install meson libsystemd-dev pkg-config ninja-build git libdbus-1-dev libinih-dev build-essential\n```\n\nOn Ubuntu 18.04, you'll need to install `python3` package and install the latest meson version from `pip`.\n\n```bash\npython3 -m venv .venv\nsource .venv/bin/activate\npip install meson\n```\n\nLater you can deactivate the virtual environment and remove it.\n\n```bash\ndeactivate\nrm -rf .venv\n```\n\n#### Arch\n```bash\npacman -S meson systemd git dbus libinih\n```\n#### Fedora\n```bash\ndnf install meson systemd-devel pkg-config git dbus-devel\n```\n#### Gentoo\nGentoo has an ebuild which builds a stable release from sources. It will also pull in all the dependencies so you can work on the source code.\n```bash\nemerge --ask games-util/gamemode\n```\nYou can also install using the latest sources from git:\n```bash\nACCEPT_KEYWORDS=\"**\" emerge --ask ~games-util/gamemode-9999\n```\n\n### Build and Install GameMode\nThen clone, build and install a release version of GameMode at 1.8.2:\n\n```bash\ngit clone https://github.com/FeralInteractive/gamemode.git\ncd gamemode\ngit checkout 1.8.2 # omit to build the master branch\n./bootstrap.sh\n```\nTo test GameMode installed and will run correctly:\n```bash\ngamemoded -t\n```\n\nTo uninstall:\n```bash\nsystemctl --user stop gamemoded.service\nninja uninstall -C builddir\n```\n\n### Pull Requests\nPull requests must match with the coding style found in the `.clang-format` file, please run this before committing:\n```\nclang-format -i $(find . -name '*.[ch]' -not -path \"*subprojects/*\")\n```\n\n### Maintained by\nFeral Interactive\n\nSee the [contributors](https://github.com/FeralInteractive/gamemode/graphs/contributors) section for an extended list of contributors.\n\n---\n## License\n\nCopyright © 2017-2024 Feral Interactive\n\nGameMode is available under the terms of the BSD 3-Clause License (Revised)\n\nThe \"inih\" library is distributed under the New BSD license\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.02734375,
          "content": "theme: jekyll-theme-midnight"
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 1.556640625,
          "content": "#!/bin/bash\n# Simple bootstrap script to build and run the daemon\n\nif [ \"$EUID\" -eq 0 ]\n  then echo \"Please don't run bootstrap.sh as root.\"\n  exit\nfi\n\nset -e\n\n# Check for scaling governor support and warn about it\nif [ ! -f \"/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\" ]; then\n\techo \"WARNING: CPUFreq scaling governor device file was not found at \\\"/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\\\".\"\n\techo \"This probably means that you have disabled processor scheduling features in your BIOS. See README.md (or GitHub issue #44) for more information.\"\n\techo \"This means GameMode's CPU governor control feature will not work (other features will still work).\"\n\n\tif [ \"$CI\" != \"true\" ]; then\n\t\t# Allow to continue the install, as gamemode has other useful features\n\t\tread -p \"Would you like to continue anyway [y/N]? \" -r\n\t\t[[ $REPLY =~ ^[Yy]$ ]]\n\tfi\nfi\n\n# accept a prefix value as: prefix=/path ./bootstrap.sh\n: ${prefix:=/usr}\n\n# Echo the rest so it's obvious\nset -x\nmeson setup builddir --prefix=$prefix --buildtype debugoptimized -Dwith-systemd-user-unit-dir=/etc/systemd/user \"$@\"\nninja -C builddir\n\n# Verify user wants to install\nset +x\nif [ \"$CI\" != \"true\" ]; then\n\tread -p \"Install to $prefix? [y/N] \" -r\n\t[[ $REPLY =~ ^[Yy]$ ]]\nfi\nset -x\n\nsudo ninja install -C builddir\n\nif [ \"$CI\" != \"true\" ]; then\n\t# Restart polkit so we don't get pop-ups whenever we pkexec\n\tif systemctl list-unit-files | grep -q polkit.service; then\n\t\tsudo systemctl try-restart polkit\n\tfi\n\n\t# Reload systemd configuration so that it picks up the new service.\n\tsystemctl --user daemon-reload\nfi\n"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "daemon",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 7.037109375,
          "content": "project(\n    'gamemode',\n    'c',\n    default_options : ['c_std=c11', 'warning_level=3'],\n    version: '1.8.2',\n    license: 'BSD',\n)\n\nam_cflags = [\n    '-fstack-protector',\n    '-Wstrict-prototypes',\n    '-Wundef',\n    '-fno-common',\n    '-Werror-implicit-function-declaration',\n    '-Wformat-security',\n    '-Werror=format-security',\n    '-Wconversion',\n    '-Wunreachable-code',\n]\n\n# Add our main flags\nadd_global_arguments(am_cflags, language: 'c')\n\ncc = meson.get_compiler('c')\n\n# additional compiler warnings, if supported\ntest_args = [\n  '-Waggregate-return',\n  '-Wunused',\n  '-Warray-bounds',\n  '-Wcast-align',\n  '-Wclobbered',\n  '-Wempty-body',\n  '-Wformat=2',\n  '-Wformat-nonliteral',\n  '-Wformat-signedness',\n  '-Wignored-qualifiers',\n  '-Wimplicit-function-declaration',\n  '-Winit-self',\n  '-Wmissing-format-attribute',\n  '-Wmissing-include-dirs',\n  '-Wmissing-noreturn',\n  '-Wmissing-parameter-type',\n  '-Wnested-externs',\n  '-Wno-discarded-qualifiers',\n  '-Wno-missing-field-initializers',\n  '-Wno-suggest-attribute=format',\n  '-Wno-unused-parameter',\n  '-Wold-style-definition',\n  '-Woverride-init',\n  '-Wpointer-arith',\n  '-Wredundant-decls',\n  '-Wreturn-type',\n  '-Wshadow',\n  '-Wsign-compare',\n  '-Wstrict-aliasing=3',\n  '-Wstrict-prototypes',\n  '-Wstringop-overflow',\n  '-Wstringop-truncation',\n  '-Wtype-limits',\n  '-Wundef',\n  '-Wuninitialized',\n  '-Wunused-but-set-variable',\n  '-Wwrite-strings',\n]\n\nforeach arg: test_args\n  if cc.has_argument(arg)\n    add_global_arguments(arg, language : 'c')\n  endif\nendforeach\n\n\npath_prefix = get_option('prefix')\npath_bindir = join_paths(path_prefix, get_option('bindir'))\npath_datadir = join_paths(path_prefix, get_option('datadir'))\npath_includedir = join_paths(path_prefix, get_option('includedir'))\npath_libdir = join_paths(path_prefix, get_option('libdir'))\npath_libexecdir = join_paths(path_prefix, get_option('libexecdir'))\npath_mandir = join_paths(path_prefix, get_option('mandir'))\npath_metainfo = join_paths(path_datadir, 'metainfo')\npath_sysconfdir = join_paths(path_datadir, 'gamemode')\n\n# Find systemd / elogind via pkgconfig\nsd_bus_provider = get_option('with-sd-bus-provider')\n\nsd_bus_args = []\nsd_bus_dep = []\nif sd_bus_provider == 'systemd'\n    sd_bus_dep = dependency('libsystemd')\nelif sd_bus_provider == 'elogind'\n    sd_bus_args += ['-DUSE_ELOGIND']\n    sd_bus_dep = dependency('libelogind')\nendif\n\n# For the client, libdbus is used\ndep_dbus = dependency('dbus-1')\n\n# Allow meson to figure out how the compiler sets up threading\ndep_threads = dependency('threads')\n\n# On non glibc systems this might be a stub, i.e. for musl\nlibdl = cc.find_library('dl', required: false)\n\nwith_privileged_group = get_option('with-privileged-group')\n\n# Determine the location for the systemd unit\nif sd_bus_provider == 'systemd'\n    with_systemd_unit = get_option('with-systemd-user-unit')\n    if with_systemd_unit\n        path_systemd_unit_dir = get_option('with-systemd-user-unit-dir')\n        if path_systemd_unit_dir == ''\n            message('Asking pkg-config for systemd\\'s \\'systemduserunitdir\\' directory')\n            pkgconfig_systemd = dependency('systemd')\n            path_systemd_unit_dir = pkgconfig_systemd.get_pkgconfig_variable('systemduserunitdir')\n        endif\n    endif\n    if with_privileged_group != ''\n      with_systemd_group = get_option('with-systemd-group')\n      if with_systemd_group\n          path_systemd_group_dir = get_option('with-systemd-group-dir')\n          if path_systemd_group_dir == ''\n              message('Asking pkg-config for systemd\\'s \\'sysusersdir\\' directory')\n              pkgconfig_systemd = dependency('systemd')\n              path_systemd_group_dir = pkgconfig_systemd.get_pkgconfig_variable('sysusersdir')\n          endif\n      endif\n    else\n      with_systemd_group = false\n    endif\nendif\n\nif with_privileged_group != ''\n  with_pam_renicing = get_option('with-pam-renicing')\n  if with_pam_renicing\n    path_pam_limits_dir = get_option('with-pam-limits-dir')\n  endif\nelse\n  with_pam_renicing = false\nendif\n\n# Set the dbus path as appropriate.\npath_dbus_service_dir = get_option('with-dbus-service-dir')\nif path_dbus_service_dir == ''\n  path_dbus_service_dir = join_paths(path_datadir, 'dbus-1', 'services')\nendif\n\npath_polkit_dir = join_paths(path_datadir, 'polkit-1')\npath_polkit_action_dir = join_paths(path_polkit_dir, 'actions')\npath_polkit_rule_dir = join_paths(path_polkit_dir, 'rules.d')\n\nwith_examples = get_option('with-examples')\nwith_util = get_option('with-util')\n\n# Provide a config.h\npidfd_open = cc.has_function('pidfd_open', args: '-D_GNU_SOURCE')\n\ncdata = configuration_data()\ncdata.set_quoted('LIBEXECDIR', path_libexecdir)\ncdata.set_quoted('SYSCONFDIR', path_sysconfdir)\ncdata.set_quoted('GAMEMODE_VERSION', meson.project_version())\ncdata.set10('HAVE_FN_PIDFD_OPEN', pidfd_open)\n\nconfig_h = configure_file(\n    configuration: cdata,\n    output: 'build-config.h',\n)\nconfig_h_dir = include_directories('.')\n\n# common lib is always required\nsubdir('common')\n\n# Library is always required\nsubdir('lib')\n\n# Utilities are always required except when having both 64 and 32 bit versions\n# of libgamemode installed\nif with_util == true\n    subdir('util')\nendif\n\n# The daemon can be disabled if necessary, allowing multilib builds of the\n# main library\nif sd_bus_provider != 'no-daemon'\n    # inih currently only needed by the daemon\n    inih_dependency = dependency(\n        'inih',\n        fallback : ['inih', 'inih_dep']\n    )\n\n    subdir('daemon')\n\n    # All installed data is currently daemon specific\n    subdir('data')\nendif\n\n# Optionally allow building of examples\nif with_examples == true\n    subdir('example')\nendif\n\n\nreport = [\n    '    Build configuration:',\n    '    ====================',\n    '',\n    '    prefix:                                 @0@'.format(path_prefix),\n    '    bindir:                                 @0@'.format(path_bindir),\n    '    datadir:                                @0@'.format(path_datadir),\n    '    libdir:                                 @0@'.format(path_libdir),\n    '    libexecdir:                             @0@'.format(path_libexecdir),\n    '    includedir:                             @0@'.format(path_includedir),\n]\n\nif with_pam_renicing\nreport += [\n    '    PAM limits.d directory:                 @0@'.format(path_pam_limits_dir),\n]\nendif\nif sd_bus_provider == 'systemd'\nif with_systemd_unit\nreport += [\n    '    systemd user unit directory:            @0@'.format(path_systemd_unit_dir),\n]\nendif\nif with_systemd_group\nreport += [\n    '    systemd group directory:                @0@'.format(path_systemd_group_dir),\n]\nendif\nendif\nreport += [\n    '    D-BUS service directory:                @0@'.format(path_dbus_service_dir),\n]\n\nreport += [\n\n    '    PolKit Action Directory:                @0@'.format(path_polkit_action_dir),\n    '',\n    '    Options:',\n    '    ========',\n    '',\n    '    sd-bus provier:                         @0@'.format(sd_bus_provider),\n    '    examples:                               @0@'.format(with_examples),\n    '    util:                                   @0@'.format(with_util),\n]\n\n# Output some stuff to validate the build config\nmessage('\\n\\n\\n' + '\\n'.join(report) + '\\n\\n')\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 1.373046875,
          "content": "# limits.d\noption('with-pam-renicing', type: 'boolean', description: 'Install the limits.d configuration file to allow renicing as a user being part of the privileged gamemode group', value: 'true')\noption('with-pam-limits-dir', type: 'string', description: 'Explicitly set the PAM limits.d directory', value: '/etc/security/limits.d')\n\n# sd-bus provider\noption('with-sd-bus-provider', type: 'combo', choices: ['systemd', 'elogind', 'no-daemon'], value: 'systemd')\n\n# systemd specific\noption('with-systemd-user-unit', type: 'boolean', description: 'Install systemd user unit', value: 'true')\noption('with-systemd-user-unit-dir', type: 'string', description: 'Explicitly set the systemd user unit directory')\noption('with-systemd-group', type: 'boolean', description: 'Install privileged gamemode group with systemd', value: 'true')\noption('with-systemd-group-dir', type: 'string', description: 'Explicitly set the systemd group directory')\n\n# Not using systemd\noption('with-dbus-service-dir', type: 'string', description: 'Explicitly set the D-BUS session directory')\n\n# General options\noption('with-examples', type: 'boolean', description: 'Build sample programs', value: 'true')\noption('with-util', type: 'boolean', description: 'Build the utilities', value: 'true')\noption('with-privileged-group', type: 'string', description: 'Group that has access to privileged gamemode features', value: 'gamemode')\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}