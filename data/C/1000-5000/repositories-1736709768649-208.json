{
  "metadata": {
    "timestamp": 1736709768649,
    "page": 208,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aubio/aubio",
      "stars": 3361,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.99609375,
          "content": "# appveyor configuration. See http://www.appveyor.com/docs/appveyor-yml\n# and http://www.appveyor.com/docs/installed-software#python\n\nenvironment:\n\n  matrix:\n\n    # pre-installed python version, see:\n    # http://www.appveyor.com/docs/installed-software#python\n    - PYTHONDIR: C:\\Python27\n      PYTHON_VERSION: 2.7.x\n      PYTHON_ARCH: 32\n\n    - PYTHONDIR: C:\\Python27-x64\n      PYTHON_VERSION: 2.7.x\n      PYTHON_ARCH: 64\n\n    - PYTHONDIR: C:\\Python36\n      PYTHON_VERSION: 3.6.x\n      PYTHON_ARCH: 32\n\n    - PYTHONDIR: C:\\Python36-x64\n      PYTHON_VERSION: 3.6.x\n      PYTHON_ARCH: 64\n\n    - PYTHONDIR: C:\\Python37\n      PYTHON_VERSION: 3.7.x\n      PYTHON_ARCH: 32\n\n    - PYTHONDIR: C:\\Python37-x64\n      PYTHON_VERSION: 3.7.x\n      PYTHON_ARCH: 64\n\n    - PYTHONDIR: C:\\Python38\n      PYTHON_VERSION: 3.8.x\n      PYTHON_ARCH: 32\n\n    - PYTHONDIR: C:\\Python38-x64\n      PYTHON_VERSION: 3.8.x\n      PYTHON_ARCH: 64\n\ninstall:\n  - ECHO \"Installed SDKs:\"\n  - ps: \"ls \\\"C:/Program Files/Microsoft SDKs/Windows\\\"\"\n\n  - \"SET PATH=%PYTHONDIR%;%PYTHONDIR%\\\\Scripts;%PATH%\"\n\n  # Check that we have the expected version and architecture for Python\n  - \"python --version\"\n  - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n\n  - \"python -m pip install --disable-pip-version-check --user --upgrade pip\"\n  - \"python -m pip install --upgrade setuptools\"\n\n  # We need wheel installed to build wheels\n  - \"python -m pip install wheel\"\n\n  - \"pip install -r requirements.txt\"\n\nbefore_build:\n  - \"bash scripts/get_waf.sh\"\n\nbuild_script:\n  # also build libaubio with waf\n  - python waf configure build install --verbose --msvc_version=\"msvc 14.0\"\n  # clean before building python package\n  - python waf distclean\n  # build, upload and install wheel (inspired by numpy's appveyor)\n  - ps: |\n      pip wheel -v -v -v --wheel-dir=dist .\n      ls dist -r | Foreach-Object {\n          Push-AppveyorArtifact $_.FullName\n          pip install $_.FullName\n      }\n\ntest_script:\n  - \"python python\\\\demos\\\\demo_create_test_sounds.py\"\n  - \"pytest --verbose\"\n"
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.0341796875,
          "content": "[run]\nbranch = True\nsource = aubio\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.638671875,
          "content": "*.pyc\n*.~[0-9]~\n*.swp\n\n# gcov generated files\n*.gcno\n*.gcda\npython/lib/aubio/_aubio.*.so\n.coverage\n\n# ignore compiled examples\nRE:examples/[a-z]*\n\n# ignore compiled test programs\nRE:tests/src/test-[a-z_-]*$\nRE:tests/cpp/test-[a-z_-]*$\n\n# only sgml manpages count\ndoc/*.1\n\n# cachegrind/callgrind stuff\n**/cachegrind.out.[0-9]*\n**/callgrind.out.[0-9]*\n\n# waf stuff\n.lock-waf*\n.waf-*\nwaf\nwaflib\nbuild/\n\n# doxygen\ndoc/web/\ndoc/full/\ndoc/_build/\n\npython/gen\npython/dist\npython/MANIFEST\npython/*.db\npython/*.wav\n\npip-delete-this-directory.txt\n\naubio-*.tar.bz2\naubio-*.zip\ndist/*.tar.gz\ndist/*.whl\n\n# test sounds\npython/tests/sounds\naubio.egg-info\n.eggs\n.cache\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.244140625,
          "content": "# see https://docs.readthedocs.io/en/stable/config-file/\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n\npython:\n  install:\n    - requirements: requirements.txt\n    - method: pip\n      path: .\n\nsphinx:\n  configuration: doc/conf.py\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.015625,
          "content": "language: python\n\nmatrix:\n  include:\n    - name: \"Linux (Python 3.8)\"\n      python: 3.8\n      os: linux\n      distro: bionic\n    - name: \"Linux (Python 3.6)\"\n      python: 3.6\n      os: linux\n      env: WAFOPTS=\"--build-type=debug\"\n    - name: \"Linux (Python 2.7, nodeps)\"\n      python: 2.7\n      os: linux\n      distro: trusty\n      env: WAFOPTS=\"--nodeps\"\n    - name: \"Linux (Python pypy3.5)\"\n      language: python\n      python: \"pypy3.5\"\n      os: linux\n    - name: \"Linux (double, fftw3)\"\n      python: 3.8\n      os: linux\n      env: HAVE_AUBIO_DOUBLE=1 CFLAGS=\"-O3\" WAFOPTS=\"--enable-fftw3\"\n    - name: \"Linux (default, dpkg-buildflags)\"\n      os: linux\n      env: CFLAGS=\"`dpkg-buildflags --get CFLAGS`\" LDFLAGS=\"`dpkg-buildflags --get LDFLAGS`\"\n\n    - name: \"macOS (xcode11)\"\n      language: shell\n      os: osx\n      osx_image: xcode11\n    - name: \"macOS (xcode12, lib only)\"\n      language: shell\n      os: osx\n      osx_image: xcode12\n      script:\n        - make test_lib_only_clean\n    - name: \"macOS (xcode10, noopt, nodeps)\"\n      language: shell\n      os: osx\n      osx_image: xcode10\n      env: CFLAGS=\"-Os\" HAVE_AUBIO_DOUBLE=1 WAFOPTS=\"--disable-accelerate --nodeps\"\n    - name: \"iOS\"\n      language: shell\n      os: osx\n      env: WAFOPTS=\"--with-target-platform=ios --nodeps\" AUBIO_NOTESTS=1\n    - name: \"iOSSimulator\"\n      language: shell\n      os: osx\n      env: WAFOPTS=\"--with-target-platform=iosimulator --nodeps\" AUBIO_NOTESTS=1\n\n#    - name: \"Windows (Python 3.8.0, lib only)\"\n#      language: shell\n#      os: windows\n#      before_install:\n#        - choco install python --version 3.8.0\n#        - choco install make\n#        - python -m pip install --upgrade pip\n#      env: PATH=/c/Python38:/c/Python38/Scripts:$PATH AUBIO_NOTESTS=1\n\naddons:\n  apt:\n    packages:\n    - bzip2\n    - libavcodec-dev\n    - libavformat-dev\n    - libswresample-dev\n    - libavutil-dev\n    - libsndfile1-dev\n    - libsamplerate-dev\n    - libvorbis-dev\n    - libflac-dev\n    - libjack-dev\n    - libasound2-dev\n    - libfftw3-dev\n    - librubberband-dev\n    - sox\n    - lcov\n  homebrew:\n    packages:\n    - sox\n    - ffmpeg\n    - libsndfile\n    - libvorbis\n    - flac\n    - libsamplerate\n    - rubberband\n    - lcov\n    update: true\n\ninstall:\n  - make getwaf deps_python\n  - which pip\n  - pip --version\n  - pip install coverage\n\nscript:\n  - make create_test_sounds\n  - |\n    if [[ -z \"$AUBIO_NOTESTS\" ]]; then\n      make test_lib_python_clean\n      make coverage\n    else\n      make test_lib_only_clean\n    fi;\n\nafter_success:\n  - |\n    if [[ -z \"$AUBIO_NOTESTS\" ]]; then\n      # upload to codecov\n      bash <(curl -s https://codecov.io/bash)\n    fi\n\nnotifications:\n    irc:\n        channels:\n            - \"irc.freenode.org#aubio\"\n        use_notice: true\n    webhooks:\n        urls:\n            - https://webhooks.gitter.im/e/81e7733a5b1d977854b4\n        on_success: change  # options: [always|never|change] default: always\n        on_failure: always  # options: [always|never|change] default: always\n        on_start: never     # options: [always|never|change] default: always\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.0302734375,
          "content": "Paul Brossier <piem@aubio.org>\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 53.51171875,
          "content": "2018-12-19 Paul Brossier <piem@aubio.org>\n\n\t[ Overview ]\n\n\t* VERSION: bump to 0.4.9\n\t* library: improve stability, fixing potential crashes and memory leaks on\n\tinvalid arguments; improve library messages and reporting of system errors\n\t* tests/: major clean-up, check return codes, increase code coverage\n\t* python/tests/: switch to pytest (closes gh-163), check emitted warnings\n\t* python/: add pages to manual with brief descriptions of classes\n\n\t[ Fixes ]\n\n\t* security: improve arguments validation in new_aubio_filterbank (prevent\n\tpossible null-pointer dereference on invalid n_filters, CVE-2018-19801),\n\tnew_aubio-tempo (prevent possible buffer overflow, CVE-2018-19800), and\n\tnew_aubio_onset (prevent null-pointer dereference, CVE-2018-19802). Thanks\n\tto Guoxiang Niu (@niugx), from the EaglEye Team for reporting these issues.\n\t* tempo: fix delay_ms methods\n\t* filterbank: fix aubio_filterbank_get_power (thanks to @romanbsd who\n\talso noticed this issue)\n\t* dct: creation fail on negative sizes or invalid accelerate radix,\n\tfix typo in error and warning messages, prevent possible memory leak\n\t* pitch: prevent null pointer dereference in yinfast, comment out unused\n\tfunctions in mcomb and yin, prevent possible leak in specacf\n\t* mfcc: always use dct module, strengthen input validation, change\n\tget_{scale,power} to return smpl_t\n\t* specdesc: improve error message\n\t* notes: prevent null pointer dereference\n\t* hist: add validation for size argument, prevent possible leak\n\t* awhitening: use shortest length available (closes gh-216)\n\t* io: add macros to display system errors, add helpers to validate input\n\targuments of source and sink methods, always clean-up after failure\n\t* source: validate input sizes to prevent invalid reads\n\t* apple_audio: use native format conversions in source and sink, prevent\n\tpossible apple_audio crash on empty string, get_duration returns 0 on failure\n\t* ffmpeg/avcodec: prevent deprecation warnings, read after close, and skipped\n\tsamples warnings, improve warning messages, only show a warning when\n\tswr_convert failed, prevent possible memory leak when closing swr context\n\t* wavwrite: copy to all channels if needed, check fseek and fwrite return\n\tvalues, call fflush in open to return failure on full disk-system\n\t* source_sndfile: fix reading sizes when resampling, set error message when\n\treading after close\n\t* aubio_priv.h: include blas first (see gh-225), add STRERROR macros\n\n\t[ Python ]\n\n\t* documentation: add pages to manual, add minimal docstrings for fft,\n\tdigital_filter, and generated objects, improve specdesc documentation\n\t* filterbank: add get_norm/power documentation\n\t* source: take a copy of the last frame before resizing it, raise an\n\texception when read failed, fix compilation warning\n\t* fixes: remove unneeded check convert with PyFloat_FromDouble or\n\tPyFloat_FromDouble, check if sink, digital_filter, were created before\n\tdeleting\n\n\t[ Tests ]\n\n\t* python/tests/: switch to pytest (slightly slower than nose2 but better at\n\tcapturing warnings and parametrization), improve coding style and coverage.\n\tTests should now be run with `pytest`.\n\t* tests/: Each test program in C must now return 0, otherwise the test will\n\tfail. Examples have been modified to run themselves on a test audio file,\n\tbut can still be run with arguments. Tests for `source` and `sink` have been\n\tfactorised, and some code cleaning. A python script is used to create a\n\ttest sound file. Tested on linux, macos, and windows, improvements to\n\ttest-mfcc (closes gh-219).\n\n\t[ Build system ]\n\n\t* waf: upgrade to 2.0.14, check the return code of each test program,\n\tupdate rules to build manual and api documentation into build/, check\n\tfor errno.h\n\t* osx: use -Os in scripts/build_apple_frameworks\n\t* Makefile: improve coverage reports\n\t* appveyor, travis, circleci: switch to pytest, set one travis config to use\n\tsndfile only\n\t* travis: add py3.6, drop py3.4, use py3.5 to test debug mode\n\t* azure: add basic configuration\n\n2018-11-21 Paul Brossier <piem@aubio.org>\n\n\t[ Overview ]\n\n\t* VERSION: bump to 0.4.8\n\t* notes: new option release_drop (gh-203)\n\t* spectral: new parameters added to filterbank and mfcc (gh-206)\n\t* python: start documenting module (gh-73, debian #480018), improve build for\n\twin-amd64 (gh-154, gh-199, gh-208)\n\t* fixes: prevent crash when using fft sizes unsupported by vDSP (gh-207),\n\tprevent saturation when down-mixing a multi-channel source (avcodec/ffmpeg)\n\n\t[ Fixes ]\n\n\t* avcodec: prevent saturation when down-mixing a multi-channel source, emit\n\ta warning if compiling against avutil < 53 (gh-137), wrap long lines\n\t* examples/: avoid hiding global and unreachable code\n\t* fft: limit to r*2*n sizes, with r in [1, 3, 5, 15] (vDSP only) (gh-207)\n\t* fft: fix reconstruction for odd sizes (fftw only)\n\t* pvoc: add missing implementations for aubio_pvoc_get_hop/win\n\t* mathutils: increase ln(2) precision of in freqtomidi/miditofreq\n\t* wavetable: stop sets playing to 0, add dummy implementation for _load\n\n\t[ New features ]\n\n\t* src/musicutils.h: new aubio_meltohz, aubio_hztomel, with _htk versions\n\t* src/spectral/filterbank.h: new set_mel_coeffs, set_mel_coeffs_htk,\n\tset_power, and set_norm methods, improved set_triangle_bands\n\t* src/spectral/mfcc.h: new set_scale, set_power, set_norm, set_mel_coeffs,\n\tset_mel_coeffs_htk, set_mel_coeffs_slaney\n\t* src/mathutils.h: new fvec_mul\n\t* src/notes: new option release_drop to prevent missing note-offs (gh-203)\n\n\t[ Python module ]\n\n\t* fix: rounding to nearest integer in midi2note and freq2note\n\t* general: supports code generation of setters with none or multiple\n\tparameters\n\t* documentation: add docstrings do fvec, cvec, source, sink, pvoc, frequency\n\tconversion and level detection routines (gh-73, debian #480018)\n\t* slicing: improve and document slice_source_at_stamps\n\t* module: new note2freq function, recover error log when raising exceptions\n\ton failed set_ methods, prevent cyclic import, coding style improvements\n\t* demos: improve coding style, fix bpm_extract arguments\n\t* MANIFEST.in: exclude *.pyc, improve patterns\n\n\t[ Documentation ]\n\n\t* doc/: use sphinx autodoc to load docstrings from aubio module, reorganize\n\tpython module documentation, add a note about double precision, use https\n\twhen possible\n\t* src/spectral/: update Auditory Toolbox url, update copyright year\n\n\t[ Tools ]\n\n\t* aubionotes: add --release-drop option\n\t* aubio: add --release-drop and --silence options to `aubio notes`,\n\tworkaround for -V to really show version (py2)\n\t* aubiocut: add option --create-first to always create first slice\n\n\t[ Tests ]\n\n\t* tests/, python/tests: add tests for new methods, check source channel\n\tdown-mix, improve coverage\n\n\t[ Build system ]\n\n\t* Makefile: disable docs when measuring coverage, add branch coverage\n\toption, add coverage_zero_counters target, improve html report\n\t* waf: update to 2.0.12, improve wscript style, prevent shipping some\n\tgenerated files\n\t* python: always show compiler warnings when pre-processing headers,\n\tworkaround to fix code generation for win-amd64 (gh-154, gh-199, gh-208).\n\t* continuous integration: add azure pipelines, update and improve\n\tconfigurations for appveyor, circleci, and travis.\n\n2018-09-22 Paul Brossier <piem@aubio.org>\n\n\t[ Overview ]\n\n\t* VERSION: bump to 0.4.7\n\t* src/spectral/dct.h: add dct type II object with optimised versions\n\t* src/io/, src/notes/, src/pitch: prevent crashes on corrupted files\n\t* examples/: fix jack midi output, improve messages when jack disabled\n\t* python/: add dct support, minor bug fixes tests and demos\n\t* wscript: improve support for BLAS/ATLAS\n\n\t[ Library fixes ]\n\n\t* src/pitch/pitchyinfft.c: fix out of bound read when samplerate > 50kHz\n\tthanks to @fCorleone (closes #189, CVE-2018-14523, debian #904906)\n\t* src/notes/notes.c: bail out if pitch creation failed (see #188)\n\t* src/io/source_wavread.c:\n\t - also exit if samplerate is negative (closes #188, CVE-2018-14522,\n\t debian #904907)\n\t - add some input validation (closes #148 and #158, CVE-2017-17054,\n\t debian #883355)\n\t* src/io/source_avcodec.c:\n\t - give up if resampling context failed opening (see #137, closes #187,\n\t CVE-2018-14521, debian #904908)\n\t - give up reading file if number of channel changes during stream (closes\n\t #137, CVE-2017-17554, debian #884237)\n\t - make sure libavutil > 52 before checking avFrame->channels (see #137)\n\t - fix build with ffmpeg 4.0, thanks to @jcowgill (closes #168, #173)\n\t - avoid deprecated call for ffmpeg >= 4.0\n\t* src/onset/onset.c: add dummy default parameters for wphase (closes #150)\n\n\t[ Tools ]\n\n\t* examples/parse_args.h: hide jack options if not available, improve error\n\tmessage (closes #182)\n\t* examples/utils.h: process_block returns void\n\t* examples/utils.c: fix examples failing to send more than one JACK midi\n\tevent per frame, thanks to @cyclopsian (closes #201)\n\n\t[ New features ]\n\n\t* src/spectral/dct.h: add dct type II object with implementation factory\n\t* src/spectral/dct_plain.c: add plain dct implementation\n\t* src/spectral/dct_ooura.c: add ooura implementation\n\t* src/spectral/dct_fftw.c: add fftw implementation\n\t* src/spectral/dct_ipp.c: add ipp version\n\t* src/spectral/dct_accelerate.c: add vdsp/accelerate dct\n\t* tests/src/spectral/test-dct.c: check reconstruction works\n\t* src/spectral/mfcc.c: use new dct to compute mfcc\n\n\t[ Library internals ]\n\n\t* src/aubio_priv.h: avoid hard-coded undefs, split BLAS and ATLAS support,\n\tadd vdsp scalar add and multiply\n\n\t[ Build system ]\n\n\t* wscript:\n\t - add options to disable examples and tests\n\t - detect includes for openblas/libblas/atlas\n\t* scripts/get_waf.sh: bump to 2.0.11, verify signature if gpg available\n\t* python/lib/gen_external.py: pass '-x c' to emcc only\n\n\t[ Python ]\n\n\t* python/lib/gen_code.py: add support for rdo methods\n\t* python/tests/test_dct.py: add tests for new dct\n\t* python/demos/demo_pitch_sinusoid.py: use // to yield an integer, fixing\n\tdemo on py3, thanks to @ancorcruz (closes #176)\n\t* python/ext/py-musicutils.*: add shift(fvec) and ishift(fvec)\n\t* python/tests/test_fvec_shift.py: add tests for shift() and ishift()\n\t* python/lib/aubio/cmd.py: fix typo in comment\n\n\t[ Documentation ]\n\n\t* README.md, doc/statuslinks.rst: use latest for commits-since\n\t* examples/parse_args.h: add yinfast to pitch algorithms\n\t* doc/requirements.rst: add some blas documentation\n\t* doc/requirements.rst: split media/optimisation libraries\n\t* doc/develop.rst: fixed spelling error, thanks to Jon Williams (closes #161)\n\t* doc/aubio{pitch,notes}.txt: add yinfast to list of pitch methods\n\n\t[ Continuous integration ]\n\n\t* .travis.yml: remove xcode8.2 builds, group osx, add alias pip=pip2\n\t* .appveyor.yml: upgrade pip first, always use python -m pip\n\n2017-10-02 Paul Brossier <piem@aubio.org>\n\n\t[ Overview ]\n\n\t* VERSION: bump to 0.4.6\n\t* src/spectral/fft.c, src/*.c: add support for Intel IPP (many thanks to\n\tEduard Mueller)\n\t* wscript: add support for emscripten (thanks to Martin Hermant)\n\t* src/pitch/pitchyinfast.h: new fast method to compute YIN algorithm\n\t* src/pitch/pitchyin*.c: improve confidence measure, making sure its value\n\tcorresponds to the selected period (thanks to Eduard Mueller)\n\t* python/lib/aubio/cmd.py: add `quiet`, `cut`, and `help` subcommands\n\n\t[ Library ]\n\n\t* src/aubio_priv.h: add missing aubio_vDSP_vclr (Eduard Mueller)\n\t* src/io/source_avcodec.c: improve error message, prevent un-opened bracket,\n\tno declaration after statements for older compilers, avoid unused variable\n\t* src/mathutils.c: prevent segfault with Accelerate.framework (closes #58,\n\tcloses #102)\n\t* src/spectral/phasevoc.h: add aubio_pvoc_set_window to change the windowing\n\tfunction\n\t* src/mathutils.c: add window type `ones` (no windowing)\n\n\t[ Python ]\n\n\t* python/demos/demo_tapthebeat.py: add a real-time example to play beats\n\tusing pyaudio\n\t* python/lib/gen_external.py: improve parsing and syntax, use results in\n\temscripten build (Martin Hermant)\n\t* python/lib/aubio/cmd.py: add option `-u` to `aubio pitch`, improve error\n\tmessages, add `quiet` subcommand (closes #124), improve syntax, add some\n\tdocumentation, add `cut` and `help` subcommand, add silence and time format\n\toptions\n\t* python/lib/aubio/cut.py: upgrade to argparse, set samplerate as needed\n\t* python/demos/demo_yin_compare.py: add comparison of yin implementations\n\t* python/demos/demo_wav2midi.py: add an example to create a midi from a\n\tsound file using mido (closes: #134)\n\t* python/demos/demo_bpm_extract.py: use argparse, use beats_to_bpm function\n\t* python/ext/py-cvec.c: fix support for pypy by changing setters to return a\n\tnegative value on error (closes #17)\n\n\t[ Documentation ]\n\n\t* src/tempo/beattracking.h: fix typo (thanks to Hannes Fritz)\n\t* doc/requirements.rst: fix broken link (thanks to @ssj71, closes #99)\n\t* doc/aubiomfcc.txt: fix typo in 'coefficients'\n\n\t[ Tests ]\n\n\t* python/tests/tests_aubio_{cmd,cut}.py: add basic tests\n\t* python/tests/test_filterbank*.py: ignore UserWarnings, clean-up,\n\timprove get_coeff tests\n\n\t[ Build system ]\n\n\t* wscript: add support for emscripten, see scripts/build_emscripten\n\t* scripts/get_waf.sh: update waf to 2.0.1, build waf from source tarball\n\t* scripts/build_emscripten: update to build aubio.js\n\t* Makefile: add coverage and coverage_report targets, run tests once\n\n\t[ Continuous integration ]\n\n\t* .travis.yml: add coverage report on osx\n\t* .appveyor.yml: use msvc 14.0 (VS 2015) and scripts/get_waf.sh\n\t* .coveragerc: add minimal python coverage configuration\n\n2017-04-10 Paul Brossier <piem@aubio.org>\n\n\t[Overview]\n\n\t* VERSION: bump to 0.4.5\n\t* src/io/source_avcodec.c: add support for libswresample\n\t* aubio: new python command line tool to extract information\n\t* src/onset/onset.c: add spectral whitening and compression, improve default\n\tparameters\n\t* this_version.py: use centralized script to get current version, adding git\n\tsha when building from git repo (thanks to MartinHN)\n\n\t[Interface]\n\n\t* src/spectral/awhithening.h: add adaptive whitening\n\t* src/{cvec,mathutils,musicutils}.h: add cvec_logmag, fvec_logmag, and fvec_push\n\t* src/onset/onset.h: add aubio_onset_set_default_parameters to load optimal\n\tparameters of each novelty function, _{set,get}_compression and\n\t_{set,get}_awhitening to turn on/off compression and adaptive whitening\n\t* src/spectral/specdesc.h: add weighted phase\n\n\t[Library]\n\n\t* src/onset/onset.c: improve default onset parameters (thanks to @superbock\n\tfor access to his evaluation database), see commit dccfad2 for more details\n\t* src/pitch/pitch.c: avoid segfault when using invalid parameters\n\t* src/temporal/biquad.c: fix biquad parameters initialization (thanks to\n\t@jurlhardt)\n\n\t[Tools]\n\n\t* examples/aubio{onset,track}.c: add options --miditap-note and\n\t--miditap-velo to set which midi note is triggered at onset/beat (thanks to\n\t@tseaver)\n\t* examples/aubioonset.c: show actual parameters in verbose mode\n\t* examples/utils.c: improve memory usage to emit midi notes\n\n\t[Python]\n\n\t* python/ext/py-source.c: add with (PEP 343) and iter (PEP 234) interface\n\t* python/ext/py-sink.c: add with interface (PEP 343)\n\t* python/lib/aubio/cmd.py: new `aubio` command line tool\n\t* python/lib/aubio/cut.py: moved from python/scripts/aubiocut\n\n\t[Documentation]\n\n\t* doc/*.rst: reorganize and improve sphinx manual\n\t* doc/*.txt: update manpages, add simple manpage for aubio command line\n\t* doc/full.cfg: derive from doc/web.cfg\n\t* README.md: simplify and add contribute information\n\n\t[Build system]\n\n\t* wscript: prefer libswresample over libavsamplerate when available, use\n\tcurrent version in manpages, doxygen, and sphinx, update to newest waf\n\t* setup.py: use entry_points console_scripts to generate scripts, use\n\tcentralized version from this_version.py, clean up\n\t* python/lib/moresetuptools.py: detect if libswresample is available\n\n2017-01-08 Paul Brossier <piem@aubio.org>\n\n\t[ Overview ]\n\n\t* VERSION: bump to 0.4.4\n\t* src/utils/log.h: new function to redirect log, error, and warnings\n\t* python/: AUBIO_ERR raises python exception, AUBIO_WRN to emit py warning\n\t* doc/: add some documentation, fix errors in manpages\n\t* wscript: new rules to build 'manpages', 'doxygen', and 'sphinx', new\n\t--build-type=<release|debug> option (thanks to Eduard Mueller)\n\t* src/notes/notes.h: add minioi and silence methods\n\t* examples/: add --minioi (minimum inter-onset interval) option\n\t* src/pitch/pitchyin.c: improve msvc compiler optimisations (thanks to\n\tEduard Mueller)\n\t* python/, src/: improve error messages, fix minor memory leaks\n\t* src/io/source_avcodec.c: improve compatibility with latest ffmpeg and with\n\tolder libav/ffmpeg versions\n\t* python/demos/: new demos to capture microphone in real time\n\n\t[ Interface]\n\n\t* src/aubio.h: include utils/log.h\n\t* src/utils/log.h: add new aubio_log_set_function to redirect log messages\n\t* src/notes/notes.h: add aubio_notes_{get,set}_minioi_ms, add\n\t_{get,set}_silence methods\n\n\t[ Library ]\n\n\t* src/aubio_priv.h: add AUBIO_INF to print to stdout with header, use new\n\tlogging function, add ATAN alias, add stdarg.h, move #include \"config.h\"\n\t* src/{fmat,fvec}.c: avoid integer division\n\t* src/pitch/pitchyin.c: [msvc] help compiler to optimize aubio_pitchyin_do\n\tby giving it addresses for all arrays which are referenced in inner loops,\n\tthanks to Eduard Mueller.\n\t* src/pitch/pitch.c: declare internal functions as static, fail on wrong\n\tmethod, warn on wrong unit, improve error messages, fix error string\n\t* src/spectral/specdesc.c: return NULL if wrong mode asked, remove trailing\n\tspaces\n\t* src/onset/onset.c: return null and clean-up if new_aubio_specdesc failed,\n\tfix error message\n\t* src/notes/notes.c: use midi note to store pitch candidate, round to\n\tnearest note, add a variable to define precision, fix out-of-bound write,\n\tfix unset silence_threshold, fix error message\n\t* src/spectral/ooura_fft8g.c: add cast to avoid conversion warnings, prefix\n\tpublic function with aubio_ooura_ to avoid with other apps using ooura (e.g.\n\tpuredata), make internal functions static,\n\t* src/spectral/fft.c: add message about fftw3 being able to do non-power of\n\ttwo sizes, make calls to fftw_destroy_plan thread-safe, use prefixed\n\taubio_ooura_rdft\n\t* src/spectral/phasevoc.c: fix error string\n\t* src/temporal/resampler.c: throw an error when using libsamplerate with doubles\n\t* src/io/ioutils.h: add functions to check samplerate and channels, use in sink_*.c\n\t* src/io/source.c: add error message when aubio was compiled with no source,\n\tonly show error message from last child source_\n\t* src/io/source_avcodec.c: call avformat_free_context after\n\tavformat_close_input, keep a reference to packet to remove it when closing\n\tfile, avoid deprecation warnings with ffmpeg 3.2, add backward compatibility\n\tfor libavcodec55, fix for old libavcodec54, use AV_SAMPLE_FMT_DBL when\n\tcompiling with HAVE_AUBIO_DOUBLE, fix missing samples in eof block, avoid\n\tfunction calls before declarations, improve error messages, replace with new\n\tcontext before closing old one, make sure s->path is set to null\n\t* src/io/{source_wavread,sink_wavwrite}.c: declare internal functions as static\n\t* src/io/source_wavread.c: fix bytes_read for JUNK headers, improve error\n\tmessages, initialize buffer, skip chunks until data is found, or abort, skip\n\tjunk chunk\n\t* src/io/source_sndfile.c: add support for multi-channel resampling, set\n\thandle to null after sucessful close, add missing floor in ratio comparison,\n\timprove formatting\n\t* src/io/sink.c: only show error message from last child sink_\n\t* src/io/sink_apple_audio.c: avoid crash on empty file name\n\t* src/io/sink_sndfile.c: improve error message\n\t* src/io/sink_{sndfile,wavwrite}.c: use AUBIO_MAX_CHANNELS, fix error message\n\n\t[ Documentation ]\n\n\t* README.md: update copyright dates, use https\n\t* src/aubio.h: add some links to examples, use https\n\t* src/pitch/pitch.h: add aubio_pitch_get_tolerance, add basic description of\n\tunit modes\n\t* src/notes/notes.h: add doxygen header\n\t* src/spectral/fft.h: strip example path\n\t* doc/*.rst: improve sphinx documentation\n\t* doc/android.rst: add reference to it scripts/build_android\n\t* doc/debian_packages.rst: added page on debian packages\n\t* doc/python_module.rst: add demo_source_simple.py, add note on pip, add\n\t`print(aubio.version)`\n\t* doc/cli.rst: include command line manpages\n\t* doc/cli_features.rst: add matrix of command line features\n\t* doc/requirements.rst: add a note about --notests (closes #77), document\n\t--msvc options, improve description of options\n\t* doc/download.rst: added page on download\n\t* doc/installing.rst: update\n\t* doc/xcode_frameworks.rst: added page on xcode frameworks\n\t* doc/**: use https://aubio.org\n\t* doc/conf.py: use pyramid theme, update copyright, remove hardcoded path\n\t* doc/web.cfg: exclude ioutils from doc\n\t* doc/aubionotes.txt: document -M option (see #18),\n\t* doc/aubioonset.txt: add documentation for -M, --minioi, improve threshold\n\tdescription (thanks to Peter Parker), fix typo (onset, not pitch)\n\t* doc/aubio*.txt: document -T/--timeformat option\n\n\t[ Build ]\n\n\t* Makefile: add a brief intro, avoid offline operations, add html and dist\n\ttargets, add rules for documentation, simplify listing, avoid offline\n\toperations, bump waf to 1.9.6, check for waf before clean, chmod go-w\n\twaflib, improve clean, use pip to install, factorise pip options, generate\n\tmore test sounds, improve test_python and test_pure_python, pass build_ext\n\tin test_pure_python{,_wheel}, quieten uninstall_python if already\n\tuninstalled, improve test targets, use bdist_wheel in test_pure_python,\n\tbuild_ext only for --enable-double, verbose waf rules, add cleanwaf\n\t* wscript: added debug/release build type configurations release (default)\n\tenables optimizations, debug symbols are enabled in both configurations,\n\tthanks to Eduard Mueller.\n\t* wscript: add options to disable source_wavread/sink_wavwrite, add check\n\tfor stdarg.h, new rules 'manpages', 'sphinx', and 'doxygen' to build\n\tdocumentation, add version to sphinx and manpages, disable libsamplerate\n\tif double precision enabled (libsamplerate only supports float), fix typos,\n\tremove trailing spaces, improve tarball creation (./waf dist), remove\n\tfull.cfg from tarball, prepend to CFLAGS to honor user cflags\n\t* wscript, src/wscript_build: improve install locations using DATAROOTDIR,\n\tMANDIR, INCLUDEDIR\n\t* wscript: default to no atlas for now\n\t* src/wscript_build: always build static library\n\t* scripts/build_android: add an example script to build aubio on android,\n\n\t[ Tools ]\n\n\t* examples/aubionotes.c: use new notes, set minioi, send last note off when\n\tneeded, add warning for missing options\n\t* examples/aubioonset.c: add minioi option, in seconds\n\t* examples/: only send a last note off when using jack\n\t* examples/: return 1 if object creation failed\n\t* examples/: use PROG_HAS_OUTPUT, add PROG_HAS_SILENCE\n\n\t[ Tests ]\n\n\t* tests/src/spectral/test-fft.c: fix default size\n\t* tests/src/spectral/test-phasevoc.c: fix typos\n\t* tests/src/utils/test-log.c: add AUBIO_INF, add example for\n\taubio_log_set_function, improve messages\n\n\t[ Python ]\n\n\t* python/ext/aubiomodule.c: add aubio._aubio.__version__ and import it as\n\taubio.version, use custom logging function for errors and warnings, remove\n\tduplicated add_generated_objects, use <> for non local aubio\n\t* python/ext/py-cvec.c: use NPY_INTP_FMT\n\t* python/ext/py-fft.c: use error string set in src/spectral/fft.c\n\t* python/ext/py-phasevoc.c: use error string set in src/spectral/phasevoc.c\n\t* python/ext/py-sink.c: always set samplerate and channels in init\n\t* python/ext/py-source.c: use error string set in src/io/source.c\n\t* python/lib/aubio/midiconv.py: add unicode double sharp and double flat,\n\timprove unicode handling, skip UnicodeEncodeError on python 2.x\n\n\t[ Python build ]\n\n\t* MANIFEST.in: add src/**.c, exclude full.cfg, include waflib, remove\n\tpython/ext/config.h\n\t* setup.py: define AUBIO_VERSION use sorted glob.glob to improve\n\treproducibility, remove extra quotes, remove status from version string,\n\tupdate description, use custom build_ext instead of 'generate' command,\n\tdefine HAVE_AUBIO_DOUBLE to 1 if needed\n\t* python/lib/gen_code.py: add support for multiple _do outputs, fix number\n\tof output, improve del_ function, safer DECREF, fix indentation, emit RuntimeError\n\t* python/lib/gen_external.py: clean-up, enable tss, remove duplicate,\n\tsort generated files\n\t* python/lib/moresetuptools.py: add HAVE_STDARG_H, also check for\n\tHAVE_AUBIO_DOUBLE, cleaner clean, look first for system library, then for\n\tlocal build, then local sources, mo nore fake config.h here, use\n\tsamplerate in single precision only\n\t* python/README.md: add a note about nose2 for python tests (closes #74)\n\t* scripts/setenv_local.sh: python3 compat\n\n\t[ Python demos ]\n\n\t* python/demos/demo_alsa.py: add example using alsaaudio (closes #72)\n\t* python/demos/demo_mfcc.py: add options to plot first and second\n\tderivatives, and set samplerate/win_s/hop_s, thanks to @jhoelzl (closes #68)\n\t* python/demos/demo_notes.py: add simple notes demos\n\t* python/demos/demo_pyaudio.py: added simple demo for pyaudio, see #6,\n\tcloses #78, thanks to @jhoelzl and @notalentgeek, add some comments, avoid\n\toverwriting aubio.pitch\n\t* python/demos/demo_source_simple.py: fix indentation, make executable\n\t* python/demos/demo_timestretch{,_online}.py: fix usage string, remove\n\tunused import, use // to yield an integer (closes #71)\n\t* python/demos/demo_timestretch_online.py: use 512, fix block counter\n\t* python/demos/demo_tss.py: improve default parameters, exit before plotting\n\n\t[ Python tests ]\n\n\t* python/tests/: use local import, add __init__.py\n\t* python/tests/test_cvec.py: simplify\n\t* python/tests/test_fft.py: skip test fft(zeros).phas == 0 if needed, expected powerpc\n\t* python/tests/test_fvec.py: reduce alpha norm precision to 10.-4\n\t* python/tests/test_{midi2note,note2midi}.py: use nose2.params, add unicode tests\n\t* python/tests/test_notes.py: add basic tests\n\t* python/tests/test_notes.py: test results are correct for 44100Hz_44100f_sine441.wav\n\t* python/tests/test_sink.py: add more tests, quiet warnings\n\t* python/tests/test_source.py: break long line, check the tail of the file\n\tis non-zero on non silent test files, filter user warnings to avoid spamming\n\tthe console, only check if last frames are non silent on brownnoise (weak),\n\tremove fragile brownnoise test, check duration on short files, use nose2\n\tparams to process one sound file per test\n\t* python/tests/test_specdesc.py: RuntimeError is now raised on wrong mode\n\t* python/tests/utils.py: by default, use 5 seconds brownoise\n\n\t[ Only in git ]\n\n\t* .travis.yml: add debian dpkg-buildflags config, switch from precise to\n\ttrusty, sudo required, add ffmpeg on osx, add targets ios, iosimulator,\n\tand osx noopt configs, bump to xcode8, add xcode8.2 config, mimick\n\tbuild_apple_frameworks options, alway upgrade pip, add pip --version and\n\twhich pip after upgrading, remove --user, use expandwaf in install, remove\n\tunused ARCH, shuffle order, remove duplicate, add missing opening quote,\n\tuse AUBIO_NOTESTS to build only lib on ios, add gitter webhook\n\t* .appveyor.yml: fix path for windows+python 3.5, fix typo in path, make\n\tnose2 tests verbose\n\n2016-08-16 Paul Brossier <piem@aubio.org>\n\n\t[ Interface ]\n\n\t* src/io/source.h, src/io/source_*.h: add _get_duration\n\t* src/notes/notes.h: add basic notes object\n\t* src/tempo/beattracking.{c,h}: add _get_period and _get_period_s\n\t* src/mathutils.h: add fvec_ishift\n\t* src/fvec.{c,h}: add fvec_weighted_copy\n\t* src/tempo/tempo.{c,h}: add _get_period and _get_period_s, also add tatum,\n\ta subdivision of the beat period, default to 4, implement get/set_delay\n\t* src/**.{c,h}: use #ifdef HAVE_FOO, not #if _HAVE_FOO, add const qualifiers\n\tto unmodified pointers (see #35)\n\n\t[ Library ]\n\n\t* src/{fmat,fvec,mathutils}.c: optimisations (using atlas or Accelerate when\n\tavailable) for fvec_sum, fvec_mean, fvec_shift, aubio_level_lin,\n\tfvec_set_all, fvec_zeros, fvec_weight, fvec_copy, fvec_weighted_copy,\n\tfmat_vecmul\n\t* src/aubio_priv.h: check for atlas cblas, use cblas_xswap, vDSP_dotpr,\n\tprotect SQR parameters, avoid redefining MIN/MAX, define PATH_MAX and PI\n\twhen needed, use _isnan on windows msvc 9 to avoid linking error, more\n\twindows hacks\n\t* src/mathutils.c: avoid for loop initial declarations [gcc], use\n\tHAVE_ATLAS, use smpl_t for constants\n\t* src/fmat.c: skip asserts\n\t* src/spectral/{filterbank,mfcc}.c: use accelerated fmat_vecmul\n\t* src/spectral/fft.c: fftw can be used odd length sizes, not Ooura,\n\tfactorise double / single flags, use memcpy\n\t* src/spectral/phasevoc.c: fix arguments checks, return NULL when fft\n\tcreation failed , apply windowing for resynthesized grain, use ishift for\n\todd windows, fix scaling factors for correct reconstruction at 50 and 75%\n\toverlap\n\t* src/pitch/pitch.c: allow for silence == 0, improve error messages\n\t* src/pitch/pitchmcomb.c: fix candidates sorting function, really comparing\n\tcurrent to next\n\t* src/notes/notes.c: equivalent to previous examples/aubionotes.c results\n\t* src/onset/onset.c: simplify selection of first onset, fix for \"conversion\n\tfrom 'smpl_t' to 'uint_t', possible loss of data\" with msvc\n\t* src/pitch/pitchmcomb.c: scan across all spectrum\n\t* src/pitch/pitchyinfft.c: use fvec_weighted_copy\n\t* src/{spectral/*.c,onset/*.c,tempo/*.c}: make sure win_size > 1\n\t* src/io/*.c: use custom defines for {source,sink}_apple_audio, take a copy\n\tof const char* path\n\t* src/io/source_avcodec.c:\n\t - update to libav10, libavcodec 55.34.1\n\t - avoid deprecation warning, detect if we use ffmpeg or libav version\n\t - check if the uri is a network stream using av_url_split, call\n\t avformat_network_init() if needed\n\t - check if we still need max_analyze_duration2 (closes #53, thanks to\n\t @anthonylauzon)\n\t* src/io/source_{avcodec,sndfile}.c: avoid modifying input param\n\t* src/io/{sink,source,utils}_apple_audio.c: fix memory leak calling\n\tCFRelease (closes #26, closes #27, and closes #28)\n\t* src/io/sink_apple_audio.c: disable async mode for now, factorise code\n\t* src/io/source_apple_audio.c: check out of bounds _seek, set s->path, quiet\n\t* src/io/source_sndfile.c: fix crash, zero-pad output vector when\n\tupsampling, use sf_read_double when compiling with AUBIO_DOUBLE, approximate\n\tduration when resampling\n\t* src/io/sink_sndfile.c: fix for double precision\n\t* src/synth/sampler.c: fix typo, keeps a copy of uri\n\t* src/tempo/tempo.c: do not write novelty function in output[1]\n\t* src/temporal/resampler.c: make msvc happier adding a dummy variable\n\t* src/temporal/filter.c: check parameters, fix filter_do_outplace to really\n\tavoid modifying input\n\t* src/utils/windll.c: add dll main entry point\n\n\t[ Python ]\n\n\t* General:\n\t  - new build system, new code generator\n\t  - Python 3 compatibility (#33), thanks to Nils Philippsen (@nphilipp)\n\t  - double precision compatibility\n\t  - simplify memory allocations, removed unneeded malloc/free calls\n\t  - fix memory leak (#49), check input sizes (#63) and output sizes (#60)\n\t  - improve indentation, clean up unused imports and variables\n\t  - fix comparison to None and to False\n\t* setup.py: move from python/setup.py, add option to build libaubio inside\n\tpython-aubio (for instance with pip), add command 'generate' with option\n\t'--enable-double', build with -Wdeclaration-after-statement -Werror\n\t* python/ext/aubiomodule.c: fix PyMethodDef sentinel\n\t* python/ext/aubioproxy.c: factorize input checks into\n\tPyAubio_IsValidVector, fix windows c89 compilation, use npy_intp, not long\n\t* python/ext: rewrite and simplify, safer and improved memory usage (#49),\n\timprove error strings, verify actual object creation\n\t* python/ext/py-source.c: added duration, check seek is not negative\n\t* python/ext/py-musicutils.c: do not overwrite PyArg_ParseTuple messages\n\t* python/lib/gen_code.py: new generator, switch to using custom PyObjects\n\tinstead of fvec, cvec, fmat, ready for double precision (defaults to single)\n\t* python/lib/aubio__init__.py: use new aubio.float_type, make sure length is\n\tnot zero and float_type is imported\n\t* python/lib/aubio/midiconv.py: fix instance checks, make sure midi2note\n\tuses midi int (#33)\n\t* python/lib/aubio/slicing.py: fix samplerate\n\t* python/ext/aubio-types.h: add new_py_ functions to create PyObjects\n\tinstead of fvec_t, apply to generated and hard-coded objects\n\t* python/lib/gen_external.py: improve compiler detection, fixes build on\n\twindows (#55)\n\t* python/lib/moresetuptools.py: helpers for windows and macos compilations\n\n\t[  Python demos ]\n\n\t* python/demos/demo_reading_speed.py: new reading speed tests, external\n\tpackages disabled by default\n\t* python/demos/demo_timestretch.py: new timescale algorithm\n\t* python/demos/demo_timestretch_online.py: new timescale algorithm (online\n\tversion)\n\t* python/demos/demo_create_test_sounds.py: add script to create simple sound\n\tfiles to test on using sox\n\t* python/demos/demo_a_weighting.py: add simple demo for a_weighting\n\t* python/demos/demo_filter.py: moved from _a_weighting\n\t* python/demos/demo_mfcc.py: use n_coeffs\n\t* python/demos/demo_bpm_extract.py: add exception type, avoid {} as default\n\targument value\n\t* python/demos/demo_pysoundcard_*: update to pysoundcard 0.5.2 (closes #42)\n\t* python/scripts/aubiocut: fix usage string output\n\n\t[ Python tests ]\n\n\t* python/tests/run_all_tests,*.py: switch to nose2, fix most prospect warnings\n\t* python/tests/test_fvec.py: add test_pass_to_numpy, cope with accumulated\n\terrors\n\t* python/tests/test_cvec.py: simplify, add more tests\n\t* python/tests/test_fft.py: more tests, fft.do to clash on wrong size\n\tinputs, f.rdo input size, cvec is large enough, memory tests, avoid\n\tVisibleDeprecationWarning\n\t* python/tests/test_filterbank.py: check for wrong values, ValueError raised\n\t* python/tests/test_filter.py: add tests\n\t* python/tests/test_musicutils.py: simplify, check TypeError is raised\n\t* python/tests/test_mfcc.py: more tests, check for wrong input size (see #63)\n\t* python/tests/test_mathutils: fix test_miditobin test, can also raise\n\tNotImplementedError (darwin)\n\t* python/tests/test_note2midi.py: more tests, use unicode_literals\n\t* python/tests/test_phasevoc.py: add a note about ocasional crash check\n\tperfect reconstruction for overlap > 75% add 50% overlap test, fix duplicate\n\ttest name, add wrong sized input tests\n\t* python/tests/test_sink.py: remove useless many_sinks_not_closed and cruft\n\t* python/tests/test_source.py: simplify, quieten, skip tests if no test sounds\n\t* python/tests/test_specdesc.py: check for wrong values, skip wrong name\n\ttest, use correct input size (see #63)\n\t* python/tests/utils.py: try reopening the file is deleting it fails on windows\n\t* python/VERSION: removed, use same VERSION file for libaubio and python-aubio\n\t* MANIFEST.in: move from python/, update contents\n\t* nose2.cfg: add minimal config, set multiprocess always-on=false (fixes\n\tcoverage, pass -N to speed up the tests)\n\n\t[ Tools ]\n\n\t* examples/*.c: add time format option\n\t* examples/{aubioonset,aubiotrack}.c: also emit midi note, thanks to\n\t@topas-rec (closes #62)\n\t* examples/: use outmsg to print notes (fixes #8)\n\t* examples/aubionotes.c: use new aubio_notes object\n\t* examples/aubiotrack.c: enable -O and -t options, fix is_beat/is_silence\n\ttypes\n\t* examples/{parse_args,utils}.h: check in config.h if getopt.h was found, or\n\tbuild without for msvc, more windows hacks\n\t* examples/utils.c: change send_noteon to accept floating point midi note number\n\n\t[ Tests ]\n\n\t* tests/src/io/test-source_apple_audio.c: shorten long line\n\t* tests/src/io/test-source_avcodec.c: use HAVE_LIBAV, closes #10\n\t* tests/src/temporal: avoid crash, clarify\n\t* tests/src/tempo/test-tempo.c: tempo back to only one output\n\t* tests/src/test-delnull.c: improve test, avoid segfaults\n\t* tests/src/test-lvec.c: use AUBIO_LSMP_FMT\n\t* tests/utils_tests.h: add VA_ARGS versions of variadic macros\n\t* tests/utils_tests.h: also use custom srandom/random when compiling with\n\t-std=c99\n\t* tests/utils_tests.h: make sure M_PI and RAND_MAX are defined\n\n\t[ Build ]\n\n\t* Makefile: set waf to 1.8.22 for now, new targets create_test_sounds,\n\tbuild_python, test_python, clean_python, build_python3, clean_python3,\n\ttest_pure_python, test_pure_python_wheel, (use test_pure_* targets to build\n\twithout libaubio), use 'HAVE_DOUBLE=1 make' to build in double precision\n\t* scripts/build_apple_frameworks: add script to build macosx and ios\n\tframeworks (see #34, #43)\n\t* scripts/build_emscripten: add script to build with emcc and co\n\t* scripts/build_mingw: add script to cross-compile using mingw\n\t* scripts/get_waf.sh: added simple script to fetch latest waf\n\t* scripts/setenv_local.sh: set environment to run from built source tree\n\t* scripts/setenv_local.sh: update to new python-aubio build location\n\t* tests/wscript_build: do not install test programs\n\t* tests/wscript_build, src/wscript_build: use 'use =', simplify\n\t* src/wscript_build: enable shared lib on ios, static lib on windows\n\t* wscript:\n\t  - update --enable-foo to fail if foo is not found\n\t  - add -mmacosx-version-min=10.4 on darwin\n\t  - add '-fembed-bitcode' on ios (closes #31), min to 6.1\n\t  - make fat build, add option to not build with Accelerate framework\n\t  - add option to not build with CoreAudio/AudioToolbox\n\t  - add --disable-docs option\n\t  - add -lm detection\n\t  - pass HAVE_AUBIO_DOUBLE in compiler arguments\n\t  - first check for headers, make getopt.h and unistd.h optional\n\t  - check HAVE_AV* from ctx.env\n\t  - make msvc compiler quieter, add /MD and /D_CRT_SECURE_NO_WARNINGS\n\t  - check if we find atlas/cblas.h\n\t  - new build platform emscripten\n\t  - more cleanups and updates\n\n\t[ Only in git ]\n\n\t* .travis.yml: config for https://travis-ci.org/aubio/aubio\n\t* .appveyor.yml: config for https://ci.appveyor.com/project/piem/aubio\n\t* .landscape.yml: config for https://landscape.io/github/aubio/aubio\n\t* conda recipes: see https://github.com/conda/conda-recipes#387\n\t* .gitignore: add python/tests/sounds and .egg-info\n\n\t[ General ]\n\n\t* src/: remove trailing spaces, improve doxygen strings, update copyrights,\n\tfix typos\n\t* src/onset/onset.h: fix description of get/set_delay functions\n\t* src/spectral/mfcc.h: add link to reference implementation\n\t* src/spectral/filterbank_mel.h: update reference url\n\t* src/musicutils.h: update link to Bernardini's paper, improve doc\n\t* doc/aubiomfcc.txt: add a note about the output\n\t* doc/*.cfg: update to Doxygen 1.8.8\n\t* python/README.md: fix typo (thanks to Sam Alexander), document how to\n\tbuild in a virtualenv (see #2)\n\t* README.md: minor updates, link to python/README.md, switch to https\n\t* VERSION: bump to 0.4.3\n\n2015-08-01 Paul Brossier <piem@aubio.org>\n\n\t[ Interface ]\n\t* src/onset/onset.h: add aubio_onset_get_silence(), fix description of\n\taubio_onset_get/set_delay functions\n\t* src/tempo/tempo.h: add aubio_tempo_get_silence and aubio_tempo_get_threshold\n\n\t[ Library ]\n\t* src/io/audio_unit.c: fix deprecation warning (closes #16)\n\t* src/io/sink_apple_audio.c: avoid opening null path\n\t* src/io/sink_sndfile.c: improve error messages, set nsamples after write\n\t* src/io/sink_wavwrite.c: fail if samplerate is way too large, assume\n\twindows is little endian to build with mingw32\n\t* src/io/source_apple_audio.c: check out of bounds _seek, set s->path, quiet\n\t* src/io/source_avcodec.c: update to libav10, libavcodec 55.34.1\n\t* src/io/source_sndfile.c: cast to uint_t for now, clarify some variables\n\tnames, fix crash, zero-pad output vector when upsampling, improve seek errors and strings\n\t* src/io/source_wavread.c: avoid orphan parenthesis , cast size_t to int to\n\tavoid warning on win64 , improve seek errors processing , sync error message\n\t* src/onset/onset.c: avoid doubled onset at start, check parameters\n\t* src/pitch/pitch.c: add Hertz as valid unit string, check parameters\n\t* src/pitch/pitchyin.c, src/pitch/pitchyinfft.c: avoid producing NaN on silence (closes #7)\n\t* src/pitch/pitchyin.{c,h}: fix typo, developed\n\t* src/spectral/phasevoc.c: fix argument checks, improve error messages\n\t* src/synth/sampler.c: make sure blocksize > 0\n\t* src/tempo/beattracking.c: avoid segfault on silence (closes #24)\n\t* src/tempo/tempo.c: add silence detection (closes #23), add old behavior in\n\texamples/aubiotrack.c, check parameters\n\t* src/*.c: fix some useless float conversion\n\n\t[ Python ]\n\t* python/ext/aubiomodule.c: improve documentation\n\t* python/ext/py-musicutils.c: add silence_detection (closes #21),\n\tlevel_detection, db_spl, level_lin, complete window implementation\n\t* python/ext/py-source.c: add channels, add seek (closes #9)\n\t* python/demos/demo_a_weighting.py: add simple demo for a_weighting\n\t* python/demos/demo_sink_multi.py: add multi channel version\n\t* python/demos/, python/demos/: minor improvements, improve syntax (closes #19)\n\t* python/setup.py: use setuptools, add numpy to install_requires\n\n\t[ Build ]\n\t* waf: removed, now automatically downloaded with make, updated to 1.8.12\n\t* Makefile: add target to fetch waf and basic instructions\n\t* .travis.yml: added template for travis continuous integration\n\t* {examples,src,tests}/wscript_build: add external libs and uselib to targets \n\t* src/wscript_build: do not hardocode install path\n\t* wscript, src/io/*.c: use custom defines instead of __APPLE__\n\t* wscript: make fat build optional, remove iOS sdk versioning\n\n\t[ General ]\n\t* examples/: use outmsg to print notes (fixes #8)\n\t* examples/parse_args.h: improve short documentation (closes #12)\n\t* doc/*.cfg: remove html timestamps to make build reproducible (see debian bug #779216)\n\t* doc/aubiocut.txt: improve documentation\n\t* doc/*.rst: add sphinx documentation basis with Makefile and conf.py\n\t* README.md: minor updates\n\t* python.old: removed old code\n\t* tests/: minor bug fixing\n\n2014-01-31 Paul Brossier <piem@aubio.org>\n\n\t[ Interface ]\n\t* src/io/{source_wavread,sink_wavwrite}.h: new source and sink objects to\n\tread and write simple wav files when building with no external dependencies\n\t* src/io/{source,sink}*.h: added close functions to explicitly close file\n\t* src/io/sink*.h: added do_multi, preset_channels, preset_samplerate,\n\tget_channels and get_samplerate functions\n\t* src/onset/onset.h: added aubio_onset_get_threshold\n\t* src/mathutils.h: add fvec_quadratic_peak_mag to find the magnitude of\n\tinterpolated peaks\n\n\t[ Library ]\n\t* src/io/source_avcodec.c: implement _seek function\n\t* src/io/source_sndfile.c: fixed _seek when signal is resampled\n\t* src/spectral/ooura_fft8g.c: use float when double is not needed\n\t* src/io/{source,sink}_apple_audio.c: improve error messages\n\t* src/spectral/phasevoc.c: optimize swapbuffers by using memcpy\n\t* src/lvec.c: add missing lvec_set_sample, improve test\n\t* src/tempo/beattracking.c: improve confidence values by using interpolated\n\tpeak magnitude and avoiding nan\n\t* src/tempo/tempo_davies.c: set default novelty function to specflux\n\n\t[ Python module ]\n\t* python/ext/py-{sink,source}.c: add do_multi and close functions\n\t* python/ext/aubio-types.h: set NPY_NO_DEPRECATED_API to version 1.7\n\t* python/lib/aubio/slicing.py: new function to slice a source into a list of\n\tarbitrary regions\n\t* python/scripts/aubiocut: add options --cut-until-nsamples and\n\t--cut-until-nsclices, thanks to Mark Suppes for requesting, sponsoring,\n\tand testing this feature\n\n\t[ General code ]\n\t* src/aubio_priv.h: use ifdefs to avoid checking undefined defines\n\t* src/**.c: add missing prototypes, avoid some declarations after statement\n\t* waf, waflib: update to 1.7.15\n\n2013-12-08  Paul Brossier <piem@aubio.org>\n\n\t* Overdue: After more than five years of development behind the curtain,\n\ttime has come to release a new version of aubio.\n\n\t* General: The library has been completely revised since 0.3.2. The API has\n\tseen a major clean up, and has been thoroughly tested. The following list of\n\tchanges is not exhaustive.\n\n\t* Memory management: allocation and freeing of memory has been optimized in\n\tmany ways. Several memory leaks and out of bound access have been fixed.\n\n\t* Optimization: the FFT, central to most algorithms, can now be computed\n\tusing different optimized algorithms, depending on what is available on your\n\tplatform (FFTW, Ooura, or vDSP). Other simple optimization tricks are\n\tincluded. Most can be deactivated by configuring the build accordingly.\n\n\t* python/: The python interface has been completely rewritten to use numpy C\n\tinterface, making the aubio python module order of magnitudes faster than\n\tthe previous version. Several demos and tests are included.\n\n\t* src/: source and header files are now organized in sub-directories.\n\n\t* src/io/source.h: new source readers can now use any or all of libav,\n\tCoreAudio, and libsndfile. This means that aubio can now easily read most\n\tuncompressed and compressed formats. Compiled with libav, aubio can also\n\tread audio from video files, and over the network.\n\n\t* src/io/sink.h: a new sink object lets you write wav files with any number\n\tof channels, at any samplerate, using libsndfile or CoreAudio.\n\n\t* src/onset, src/tempo/, src/pitch: the different methods for onset, tempo,\n\tand pitch extraction have seen many bug-fixes and optimizations.\n\n\t* src/spectral/specdesc.h: new onset distances and statistical measures have\n\tbeen added.\n\n\t* src/spectral/filterbank.h: new filter bank to compute the energy in any\n\tcustom-defined frequency bands.\n\n\t* src/spectral/mfcc.h, examples/aubiomfcc.c: a standard implementation of\n\tthe Mel-Frequency Cepstrum Coefficients algorithm has been added.\n\n\t* src/temporal/{a,c}_weighting.h: standard implementation of the C-weighting\n\tand A-weighting pre-processing filters are now provided for most commons\n\tsampling rates.\n\n\t* src/synth/wavetable.h, src/synth/sampler.h: provide basic ways to generate\n\tsome sounds.\n\n\t* src/fvec.h: fvec_t, the vector object central to most aubio algorithms, is\n\tnow single channel. This simplifies the code of each algorithm greatly.\n\n\t* src/lvec.h: lvec_t provides a double precision vector, required for some\n\toperations to avoid floating point overflow\n\n\t* src/fmat.h: fmat_t provides a single precision matrix, useful for\n\tmulti-channel operations and to some algorithms such as the spectral filter\n\tbank.\n\n\t* examples/: several new options, including new programs, have been\n\tincluded. Refer to the documentation for details.\n\n\t* tests/: several tests and examples programs have been added. This should\n\tbe a good place to look at to understand how to use aubio.\n\n\t* doc/web.cfg: a simplified Doxygen configuration produces a simpler html\n\tdocumentation.\n\n\t* doc/*.txt: the manpages have been rewritten for txt2man.\n\n\t* Build system: the build system has been switched from autotools/automake\n\tto waf. Type './waf' or see README.md for instructions on how to use waf.\n\n2006-11-10  Paul Brossier <piem@altern.org>\n\t* configure.ac: check c compiler for -Wextra option\n\t* examples/*: add lash support to aubioonset, aubiotrack, and aubionotes\n\t* */Makefile.am: improve compilation on Mac OS X, mingw and cygwin\n\t* src/{onset,tempo}.[ch]: add simple c interfaces to onset and tempo tasks\n\t* src/beattracking.c: allow the use of two beat trackers simultaneously\n\t* examples/tests: add test programs for most c functions\n\t* src/*.c: add most missing free calls\n\t* src/*.c: fix some out of array writes\n\t* src/,ext/: more gcc warning fixes\n\n2006-27-06  Paul Brossier <piem@altern.org>\n\t* plugins/puredata/Makefile.am: move pd help to pattern-help.pd\n\t\t- thanks goes to Frank Barknecht\n\t* ext/sndfileio.c src/aubio_priv.h: fixes memset in aubio_priv.h, remove\n\t\tuseless sfinfo.format=0 - thanks karsten wiese \n\t* ext/midi/midi_alsa_seq.c: do not call pthread_ in aubio_midi_direct_output\n\t\t- thanks karsten wiese\n\t* python/aubio/task/beat.py: task beat() output seconds\n\t* python/aubio/task/beat.py: ugly hack to plot beat track anyway\n\t* examples/aubionotes.c: fix signed/unsigned mismatches in examples\n\t* src/beattracking.c: fix signed/unsigned mismatches in beattracking\n\t* src/pitchfcomb.c: fix signed/unsigned mismatches in pitchfcomb\n\t* src/pitchschmitt.c: fix signed/unsigned mismatches in pitchscmitt\n\t* configure.ac: use -Wextra but unused parameters, fix macos CFLAGS\n\t* plugins/puredata/Makefile.am: simplify puredata Makefile.am\n\t* python/aubio/Makefile.am: avoid overwriting CFLAGS\n\t* examples/Makefile.am: use top_{build,src}dir instead of ../\n\t* configure.ac: make configure.ac more readable\n\t* python/aubio/task/cut.py: use os.path to derive default output filenames\n\t* VERSION: 0.3.1\n\n2006-18-05 Paul Brossier <piem@altern.org>\n\t* src/pitchyinfft.{c,h}: new pitch detection method\n\t* src/beattracking.c: algorithm improved\n\t* plugins/puredata/: new puredata external\n\t* python/tasks: enhancements to the onset detection algorithms\n\t* python/aubiocut: improved, can now slice at beats and silences\n\t* python/aubiopitch: new python program to extract pitch tracks\n\t* python/: plotting features for aubiocut and aubiopitch\n\t* python/: interface refactored\n\t* doc/: updated documentation \n\t* VERSION: 0.3.0\n\n2006-18-05  Paul Brossier <piem@altern.org>\n\t* src/beattracking.c: added beattracking.c\n\t* various bug fixes\n\t* VERSION: 0.2.0\n\n2005-29-03  Paul Brossier <piem@altern.org>\n\t* python/aubio/gnuplot.py: clean up and add plotsound\n\t* python/aubiocompare-onset: updated\n\t* examples/aubioonset.c: fix text output when nframes<4 \n\t* ext/midi/midi_file.c: by default, int is unsigned on powerpc\n\t* python/aubiocut, python/aubio/aubioclass.py: updated\n\t* ext/midi/midi_alsa_seq.c: activated threading\n\t* configure.ac,Makefile.am: added rules to check presence\n\t of swig, python, puredata and docbook-to-man.\n\n2005-17-03  Paul Brossier <piem@altern.org>\n\t* examples/utils.{c,h}:  corrected usedoubled and -O interactions\n\t* examples/aubioonset.c: added frames>=4 check (thanks Hamish Allan)\n\n2004-12-11  Paul Brossier <piem@altern,org>\n\t* swig/Makefile.am: instructions moved to python/aubio and cleaned \n\t* python/aubiocut: corrected slicing on multichannel files\n\t* VERSION: bumped to 0.1.8\n\n2004-12-06  Paul Brossier <piem@altern.org>\n\t* examples/{midi*,testforclam}.c: removed\n\t* src/{sndfile,midi*,jackio}.[ch]: moved to ext\n\n2004-12-03  Paul Brossier <piem@altern.org>\n\t* src/{mathutils,pitchyin}.h: got rid of some shadowed declarations\n\t* plugins/puredata: first puredata plugin attempt added\n\n2004-11-30  Paul Brossier <piem@altern.org>\n\t* configure.ac: added -lmx on macosx\n\t* python/aubiocut: seeks for local minima before peak\n\t                   added zero crossing search\n\t* src/pitchyinc.c: adds draft for all-in-one faster function\n\t* examples/*.c: added ladcca client (needs work)\n\t* examples/aubioonset.c: cleaned up verbose stdout \n\t* doc/aubio.css: updated\n\n2004-10-28  Paul Brossier <piem@altern.org>\n\t* src/Makefile.am: added config.h installation\n\t* VERSION: 0.1.7.1\n\n2004-10-26  Paul Brossier <piem@altern.org>:\n\t* src/pitchdetection.*: moved to src/pitchmcomb.*, now includes a\n\tdraft driver for transparent use of mcomb or yin \n\t* src/pitchmcomb.*: added from old src/pitchdetection.*\n\t* VERSION: 0.1.7\n\n2004-10-20  Paul Brossier <piem@altern.org>:\n\t* configure.ac: made fftw3f, alsa and jack optional\n\t* src/fft.{c,h}: now uses FFTW3F_SUPPORT\n\t* src/timer.c: #if 0 on win32 version\n\n2004-10-18  Paul Brossier <piem@altern.org>:\n\t* src/{fft,cvec,pvoc}.c: fixed fft size (N/2+1)\n\t* src/{onsetdetection,tss}.c: fixed sizes as well\n\t* src/pvoc.c: fixed resynthesis scaling factor (still missing\n\twindowing), windowing added in pvoc_rdo \n\t* src/fft.h: removed FFTW typedef\n\t* configure.ac: removed AC_ISC_POSIX to compile on mingw32\n\t* src/fft.c: removed useless fftw3.h include\n\t* src/pitchmcomb.c: removed call to vec_adapt_thres (writes out of\n\tbounds)\n\n2004-10-17  Paul Brossier <piem@altern.org>\n\t* src/sample.c: removed static _malloc, set all 0. (fixes nan bugs)\n\t* examples/*.c: removed useless pvoc inits\n\t* src/pitchyin.c: based on de Cheveigne paper\n\n2004-09-17  Paul Brossier <piem@altern.org>\n\t* configure.ac,src/Makefile.am: cleaned up autotools process\n\t* examples/aubio*.c: removed some useless code.\n\t* src/sample.c: removed crazy call to memset\n\n2004-09-02  Paul Brossier <piem@altern.org>\n\t* src/sndfileio.c: removed abusive call to AUBIO_ARRAY,\n\tdefined MAX_SIZE instead.\n\t* src/onsetdetection.c: rewritten free_function.\n\t* src/phasevoc.c: in aubio_pvoc_rdo, one way writing only\n\t* swig/, python/aubio: added swig wrapper, played a bit with \n\tpython interface.\n\t* src/aubio.h: now includes midi_driver.h\n\n2004-06-25  Paul Brossier <piem@altern.org>\n\t* src/peakpick.h: \n\t   renamed pickparams_t to aubio_pickpeak_t \n\t   disabled samer_pp (broken)\n\t   added del_aubio_peakpick\n\t   added aubio_peakpick_pimrt_wt (thanks mramirez) \n\t* python/aubio/onsetcompare.py: now works on huge list \n\t   thanks goes to Nicolas Wack\n\t* examples/aubionotes.c: now outputs NOTEONs \n\t* configure.ac: quick hack to disable jack and alsa\n\t* examples/*usingjack*: more hacking to disable jack\n\t* README: some updates\n\n2004-06-23  Paul Brossier <piem@altern.org>\n\t* src/*.h: added C++ ifdefs in header files\n\t* src/fft.h: removed complex.h include in header\n\t* src/hist.c: fixed out of array indexes \n\t\tthanks Miguel Ramirez!\n\t* src/Makefile.am: added install headers\n\t* doc/Makefile.am: removed dist-hook to update-docs\n\t* sounds/Makefile.am: added install hooks\n\t* aubio.pc.in: added aubio.pc generation for pkg-config\n\t* python: added some evaluation functions \n\t* src/aubio_priv.h: moved AUBIO_DBG to stderr\n\t* examples/utils.h: now outputs on stdout\n\t* examples/midi*.c: fixed compilation with gcc-2.95\n\t* VERSION: 0.1.4\n\n2004-04-27  Paul Brossier <piem@altern.org>\n\t* pitchdetection.c: fixed, still not great\n\t* Makefile.am: fixed missing headers (thank you Charbel) \n\t* aubioonset,aubionotes: renamed for install (were *demo files)\n\t* First working release: 0.1.3\n\n2004-01-31  Paul Brossier <piem@altern.org>\n\t* pitchdetection.c: working, still a bit too picky\n\t* filter.c: sizeable biquad, fixed via pitchtest.c\n\t* types.h: added file, all generic system wide types.\n\t* tss.c: added some speed improvements\n\n2004-01-20  Paul Brossier <piem@altern.org>\n\t* peakpick.c: working real time onset detection\n\t* biquad.c: needs fixing\n\n2004-01-10  Paul Brossier <piem@altern.org>\n\t* long time i didn't touch this file\n\t* added various objects\n\t* working onsetdetectors\n\t* various examples\n\t* splitted in a dynamic library\n\t* functions renamed (new_. del_. aubio_._do)\n\t* VERSION: 0.1.0_alpha\n\n2003-11-04  Paul Brossier <piem@altern.org>\n\t* aubio.h: degrouping in modules\n\t* VERSION: 0.0.6_alpha\n\n2003-11-03  Paul Brossier <piem@altern.org>\n\t* phasevoc.c: fixed memory acces\n\t* jackio.c: moving to ringbuffer type implementation\n\t* VERSION: 0.0.4_alpha\n\n2003-11-03  Paul Brossier <piem@altern.org>\n\t* jackio.c: added jack support\n\t* aubioenc.c: fixed memory freeing bugs\n\t* VERSION: 0.0.3_alpha\n\n2003-10-29  Paul Brossier <piem@altern.org>\n\t* aubio.h: Grouping all headers\n\t* makefile.am: Running first make dist\n\t* VERSION: 0.0.2alpha\n \n2003-10-18  Paul Brossier <piem@altern.org>\n\t* aubioenc.c: Working phase vocoder\n\t* VERSION: 0.0.1alpha\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.7001953125,
          "content": "include AUTHORS COPYING README.md VERSION ChangeLog\ninclude python/README.md\ninclude this_version.py\ninclude waf_gensyms.py\ninclude waf\nrecursive-include waflib *.py\ninclude Makefile wscript */wscript_build\ninclude aubio.pc.in\ninclude requirements.txt\ninclude src/*.c src/*.h\ninclude src/*/*.c src/*/*.h\ninclude examples/*.c examples/*.h\nrecursive-include tests *.h *.c *.py\ninclude python/ext/*.h\nrecursive-include python *.py\ninclude python/README.md\ninclude python/tests/eval_pitch\ninclude python/tests/*.expected\ninclude doc/*.txt doc/*.rst doc/*.cfg doc/Makefile doc/make.bat doc/conf.py\nexclude doc/full.cfg\ninclude scripts/* scripts/apple/Info.plist scripts/apple/Modules/module.modulemap\nexclude python/gen/*\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 7.701171875,
          "content": "#!/usr/bin/make -f\n# -*- makefile -*-\n#\n# This makefile contains simple rules to prepare, compile, test, and install\n# aubio. Try one of the following rules:\n#\n# $ make configure\n# $ make build\n# $ make install\n# $ make test_python\n\nWAFCMD=python waf\n\n#WAFOPTS:=\n# turn on verbose mode\nWAFOPTS += --verbose\n# build wafopts\nWAFOPTS += --destdir $(DESTDIR)\n# multiple jobs\nWAFOPTS += --jobs 4\n# if HAVE_AUBIO_DOUBLE is defined, pass --enable-double to waf\n# python/lib/moresetuptools.py also checks for HAVE_AUBIO_DOUBLE\nWAFOPTS += $(shell [ -z $(HAVE_AUBIO_DOUBLE) ] || echo --enable-double )\n\nPIPOPTS += --verbose\n\nDESTDIR:=$(PWD)/build/dist\nPYDESTDIR:=$(PWD)/build/pydist\n\n# default install locations\nPREFIX?=/usr/local\nEXEC_PREFIX?=$(PREFIX)\nLIBDIR?=$(PREFIX)/lib\nINCLUDEDIR?=$(PREFIX)/include\nDATAROOTDIR?=$(PREFIX)/share\nMANDIR?=$(DATAROOTDIR)/man\n\n# default python test command\nPYTEST?=pytest --verbose\n\nSOX=sox\n\nTESTSOUNDS := python/tests/sounds\n\nLCOVOPTS += --rc lcov_branch_coverage=1\n\nall: build\n\ncheckwaf:\n\t@[ -f waf ] || make getwaf\n\ngetwaf:\n\t./scripts/get_waf.sh\n\nexpandwaf: getwaf\n\t[ -d wafilb ] || rm -fr waflib\n\t$(WAFCMD) --help > /dev/null\n\tmv .waf*/waflib . && rm -fr .waf*\n\tsed '/^#==>$$/,$$d' waf > waf2 && mv waf2 waf\n\tchmod +x waf && chmod -R go-w waflib\n\ncleanwaf:\n\trm -rf waf waflib .waf*\n\nconfigure: checkwaf\n\t$(WAFCMD) configure $(WAFOPTS)\n\nbuild: configure\n\t$(WAFCMD) build $(WAFOPTS)\n\ninstall:\n\t# install\n\t$(WAFCMD) install $(WAFOPTS)\n\nlist_installed:\n\tfind $(DESTDIR) -ls | sed 's|$(DESTDIR)|/«destdir»|'\n\nlist_installed_python:\n\tpip show -f aubio\n\nlist_all_installed: list_installed list_installed_python\n\nuninstall:\n\t# uninstall\n\t$(WAFCMD) uninstall $(WAFOPTS)\n\ndelete_install:\n\trm -rf $(PWD)/dist/test\n\nbuild_python:\n\t# build python-aubio, using locally built libaubio if found\n\tpython ./setup.py build\n\nbuild_python_extlib:\n\t# build python-aubio using (locally) installed libaubio\n\t[ -f $(DESTDIR)/$(INCLUDEDIR)/aubio/aubio.h ]\n\t[ -d $(DESTDIR)/$(LIBDIR) ]\n\t[ -f $(DESTDIR)/$(LIBDIR)/pkgconfig/aubio.pc ]\n\tPKG_CONFIG_PATH=$(DESTDIR)/$(LIBDIR)/pkgconfig \\\n\tCFLAGS=\"-I$(DESTDIR)/$(INCLUDEDIR)\" \\\n\tLDFLAGS=\"-L$(DESTDIR)/$(LIBDIR)\" \\\n\t\tmake build_python\n\ndeps_python:\n\t# install or upgrade python requirements\n\tpip install $(PIPOPTS) --requirement requirements.txt\n\n# use pip or distutils?\ninstall_python: install_python_with_pip\nuninstall_python: uninstall_python_with_pip\n#install_python: install_python_with_distutils\n#uninstall_python: uninstall_python_with_distutils\n\ninstall_python_with_pip:\n\t# install package\n\tpip install $(PIPOPTS) .\n\nuninstall_python_with_pip:\n\t# uninstall package\n\t( pip show aubio | grep -l aubio > /dev/null ) && \\\n\tpip uninstall -y -v aubio || echo \"info: aubio package is not installed\"\n\ninstall_python_with_distutils:\n\t./setup.py install $(PIPOPTS) $(DISTUTILSOPTS)\n\nuninstall_python_with_distutils:\n\t#./setup.py uninstall\n\t[ -d $(PYDESTDIR)/$(LIBDIR) ] && echo Warning: did not clean $(PYDESTDIR)/$(LIBDIR) || true\n\nforce_uninstall_python:\n\t# ignore failure if not installed\n\t-make uninstall_python\n\nlocal_dylib:\n\t# DYLD_LIBRARY_PATH is no more on mac os\n\t# create links from ~/lib/lib* to build/src/lib*\n\t[ -f $(PWD)/build/src/libaubio.[0-9].dylib ] && ( mkdir -p ~/lib && cp -prv build/src/libaubio.[0-9].dylib ~/lib ) || true\n\ntest_python: export LD_LIBRARY_PATH=$(DESTDIR)/$(LIBDIR)\ntest_python: export PYTHONPATH=$(PYDESTDIR)/$(LIBDIR)\ntest_python: local_dylib\n\t# run test with installed package\n\t$(PYTEST)\n\nclean_python:\n\t./setup.py clean\n\ncheck_clean_python:\n\t# check cleaning a second time works\n\tmake clean_python\n\tmake clean_python\n\nclean: checkwaf\n\t# optionnaly clean before build\n\t-$(WAFCMD) clean\n\t# remove possible left overs\n\t-rm -rf doc/_build\n\ncheck_clean:\n\t# check cleaning after build works\n\t$(WAFCMD) clean\n\t# check cleaning a second time works\n\t$(WAFCMD) clean\n\ndistclean:\n\t$(WAFCMD) distclean\n\t-rm -rf doc/_build/\n\t-rm -rf doc/web/\n\ncheck_distclean:\n\tmake distclean\n\ndistcheck: checkwaf\n\t$(WAFCMD) distcheck $(WAFOPTS)\n\nhelp:\n\t$(WAFCMD) --help\n\ncreate_test_sounds:\n\t-[ -z `which $(SOX)` ] && ( echo $(SOX) could not be found) || true\n\t-mkdir -p $(TESTSOUNDS)\n\t-$(SOX) -r 44100 -b 16 -n \"$(TESTSOUNDS)/44100Hz_1f_silence.wav\"      trim 0 1s\n\t-$(SOX) -r 22050 -b 16 -n \"$(TESTSOUNDS)/22050Hz_5s_brownnoise.wav\"   synth 5    brownnoise      vol 0.9\n\t-$(SOX) -r 32000 -b 16 -n \"$(TESTSOUNDS)/32000Hz_127f_sine440.wav\"    synth 127s sine 440        vol 0.9\n\t-$(SOX) -r  8000 -b 16 -n \"$(TESTSOUNDS)/8000Hz_30s_silence.wav\"      trim 0 30\n\t-$(SOX) -r 48000 -b 16 -n \"$(TESTSOUNDS)/48000Hz_60s_sweep.wav\"       synth 60   sine 100-20000  vol 0.9\n\t-$(SOX) -r 44100 -b 16 -n \"$(TESTSOUNDS)/44100Hz_44100f_sine441.wav\"  synth 44100s   sine 441 \tvol 0.9\n\t-$(SOX) -r 44100 -b 16 -n \"$(TESTSOUNDS)/44100Hz_100f_sine441.wav\"    synth 100s sine 441 \tvol 0.9\n\n# build only libaubio, no python-aubio\ntest_lib_only: clean distclean configure build install list_installed\n# additionally, clean after a fresh build\ntest_lib_only_clean: test_lib_only uninstall check_clean check_distclean\n\n# build libaubio, build and test python-aubio against it\ntest_lib_python: force_uninstall_python deps_python \\\n\tclean_python clean distclean \\\n\tconfigure build build_python \\\n\tinstall install_python \\\n\ttest_python \\\n\tlist_all_installed\n\ntest_lib_python_clean: test_lib_python \\\n\tuninstall_python uninstall \\\n\tcheck_clean_python \\\n\tcheck_clean \\\n\tcheck_distclean\n\n# build libaubio, install it, build python-aubio against it\ntest_lib_install_python: force_uninstall_python deps_python \\\n\tclean_python distclean \\\n\tconfigure build \\\n\tinstall \\\n\tbuild_python_extlib \\\n\tinstall_python \\\n\ttest_python \\\n\tlist_all_installed\n\ntest_lib_install_python_clean: test_lib_install_python \\\n\tuninstall_python \\\n\tdelete_install \\\n\tcheck_clean_python \\\n\tcheck_distclean\n\n# build a python-aubio that includes libaubio\ntest_python_only: force_uninstall_python deps_python \\\n\tclean_python clean distclean \\\n\tbuild_python \\\n\tinstall_python \\\n\ttest_python \\\n\tlist_installed_python\n\ntest_python_only_clean: test_python_only \\\n\tuninstall_python \\\n\tcheck_clean_python\n\ncoverage_cycle: coverage_zero_counters coverage_report\n\ncoverage_zero_counters:\n\tlcov --zerocounters --directory .\n\ncoverage: export CFLAGS=--coverage\ncoverage: export LDFLAGS=--coverage\ncoverage: export PYTHONPATH=$(PWD)/python/lib\ncoverage: export LD_LIBRARY_PATH=$(PWD)/build/src\ncoverage: force_uninstall_python deps_python \\\n\tclean_python clean distclean build local_dylib\n\t# capture coverage after running c tests\n\tlcov $(LCOVOPTS) --capture --no-external --directory . \\\n\t\t--output-file build/coverage_lib.info\n\t# build and test python\n\tpip install -v -e .\n\t# run tests, with python coverage\n\tcoverage run `which pytest`\n\t# capture coverage again\n\tlcov $(LCOVOPTS) --capture --no-external --directory . \\\n\t\t--output-file build/coverage_python.info\n\t# merge both coverage info files\n\tlcov $(LCOVOPTS) -a build/coverage_python.info -a build/coverage_lib.info \\\n\t\t--output-file build/coverage.info\n\t# remove tests\n\tlcov $(LCOVOPTS) --remove build/coverage.info '*/ooura_fft8g*' \\\n\t\t--output-file build/coverage_lib.info\n\n# make sure we don't build the doc, which builds a temporary python module\ncoverage_report: export WAFOPTS += --disable-docs\ncoverage_report: coverage\n\t# generate report with lcov's genhtml\n\tgenhtml build/coverage_lib.info --output-directory build/coverage_c \\\n\t\t--branch-coverage --highlight --legend\n\t# generate python report with coverage python package\n\tcoverage report\n\tcoverage html -d build/coverage_python\n\t# show links to generated reports\n\tfor i in $$(ls build/coverage_*/index.html); do echo file://$(PWD)/$$i; done\n\nsphinx: configure\n\t$(WAFCMD) sphinx $(WAFOPTS)\n\ndoxygen: configure\n\t$(WAFCMD) doxygen $(WAFOPTS)\n\nmanpages: configure\n\t$(WAFCMD) manpages $(WAFOPTS)\n\nhtml: doxygen sphinx\n\ndocs: html manpages\n\ndist: distclean expandwaf\n\t$(WAFCMD) dist\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.2509765625,
          "content": "aubio\n=====\n\n[![CircleCI build status](https://circleci.com/gh/aubio/aubio.svg?style=shield)](https://circleci.com/gh/aubio/aubio \"CircleCI build status\")\n[![Azure Pipelines](https://dev.azure.com/aubio/aubio/_apis/build/status/aubio.aubio)](https://dev.azure.com/aubio/aubio \"Azure build status\")\n[![Appveyor build status](https://img.shields.io/appveyor/ci/piem/aubio/master.svg)](https://ci.appveyor.com/project/piem/aubio \"Appveyor build status\")\n[![Pypi Downloads](https://img.shields.io/pypi/dm/aubio.svg?label=Pypi%20downloads)](https://pypi.org/project/aubio/)\n[![Conda Downloads](https://img.shields.io/conda/dn/conda-forge/aubio.svg?label=Conda%20downloads)](https://anaconda.org/conda-forge/aubio)\n\n[![Documentation](https://readthedocs.org/projects/aubio/badge/?version=latest)](http://aubio.readthedocs.io/en/latest/?badge=latest \"Latest documentation\")\n[![DOI](https://zenodo.org/badge/396389.svg)](https://zenodo.org/badge/latestdoi/396389)\n[![Commits since last release](https://img.shields.io/github/commits-since/aubio/aubio/latest.svg)](https://github.com/aubio/aubio \"Commits since last release\")\n\naubio is a library to label music and sounds. It listens to audio signals and\nattempts to detect events. For instance, when a drum is hit, at which frequency\nis a note, or at what tempo is a rhythmic melody.\n\nIts features include segmenting a sound file before each of its attacks,\nperforming pitch detection, tapping the beat and producing midi streams from\nlive audio.\n\naubio provide several algorithms and routines, including:\n\n  - several onset detection methods\n  - different pitch detection methods\n  - tempo tracking and beat detection\n  - MFCC (mel-frequency cepstrum coefficients)\n  - FFT and phase vocoder\n  - up/down-sampling\n  - digital filters (low pass, high pass, and more)\n  - spectral filtering\n  - transient/steady-state separation\n  - sound file read and write access\n  - various mathematics utilities for music applications\n\nThe name aubio comes from _audio_ with a typo: some errors are likely to be\nfound in the results.\n\nPython module\n-------------\n\nA python module for aubio is provided. For more information on how to use it,\nplease see the file [`python/README.md`](python/README.md) and the\n[manual](https://aubio.org/manual/latest/) .\n\nTools\n-----\n\nThe python module comes with the following command line tools:\n\n - `aubio` extracts informations from sound files\n - `aubiocut` slices sound files at onset or beat timestamps\n\nAdditional command line tools are included along with the library:\n\n - `aubioonset` outputs the time stamp of detected note onsets\n - `aubiopitch` attempts to identify a fundamental frequency, or pitch, for\n   each frame of the input sound\n - `aubiomfcc` computes Mel-frequency Cepstrum Coefficients\n - `aubiotrack` outputs the time stamp of detected beats\n - `aubionotes` emits midi-like notes, with an onset, a pitch, and a duration\n - `aubioquiet` extracts quiet and loud regions\n\nDocumentation\n-------------\n\n  - [manual](https://aubio.org/manual/latest/), generated with sphinx\n  - [developer documentation](https://aubio.org/doc/latest/), generated with Doxygen\n\nThe latest version of the documentation can be found at:\n\n  https://aubio.org/documentation\n\nBuild Instructions\n------------------\n\naubio compiles on Linux, Mac OS X, Windows, Cygwin, and iOS.\n\nTo compile aubio, you should be able to simply run:\n\n    make\n\nTo compile the python module:\n\n    ./setup.py build\n\nSee the [manual](https://aubio.org/manual/latest/) for more information about\n[installing aubio](https://aubio.org/manual/latest/installing.html).\n\nCitation\n--------\n\nPlease use the DOI link above to cite this release in your publications. For\nmore information, see also the [about\npage](https://aubio.org/manual/latest/about.html) in [aubio\nmanual](https://aubio.org/manual/latest/).\n\nHomepage\n--------\n\nThe home page of this project can be found at: https://aubio.org/\n\nLicense\n-------\n\naubio is free software: you can redistribute it and/or modify it under the\nterms of the GNU General Public License as published by the Free Software\nFoundation, either version 3 of the License, or (at your option) any later\nversion.\n\nContributing\n------------\n\nPatches are welcome: please fork the latest git repository and create a feature\nbranch. Submitted requests should pass all continuous integration tests.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.146484375,
          "content": "AUBIO_MAJOR_VERSION=0\nAUBIO_MINOR_VERSION=5\nAUBIO_PATCH_VERSION=0\nAUBIO_VERSION_STATUS='-alpha'\nLIBAUBIO_LT_CUR=5\nLIBAUBIO_LT_REV=4\nLIBAUBIO_LT_AGE=8\n"
        },
        {
          "name": "aubio.pc.in",
          "type": "blob",
          "size": 0.2021484375,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: aubio\nDescription: a library for audio labelling\nVersion: @VERSION@\nLibs: -L${libdir} -laubio\nCflags: -I${includedir}\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 1.298828125,
          "content": "#  configuration file for azure continuous integration\njobs:\n\n- job: linux\n  pool:\n    vmImage: 'ubuntu-latest'\n  steps:\n  - script: |\n      sudo apt update\n      sudo apt install libsndfile-dev libavformat-dev librubberband-dev libvorbis-dev libflac-dev\n    displayName: 'deps'\n  - script: |\n      make\n    displayName: 'make'\n    env:\n      CFLAGS: -Werror\n\n- job: linux_double\n  pool:\n    vmImage: 'ubuntu-latest'\n  steps:\n  - script: |\n      sudo apt update\n      sudo apt install libfftw3-dev libsndfile-dev libavformat-dev librubberband-dev libvorbis-dev libflac-dev\n    displayName: 'deps'\n  - script: |\n      HAVE_AUBIO_DOUBLE=1 WAFOPTS=\"--enable-fftw3\" make\n    displayName: 'make'\n    env:\n      CFLAGS: -Werror\n\n- job: linux_nodeps\n  pool:\n    vmImage: 'ubuntu-latest'\n  steps:\n  - script: |\n      make\n    displayName: 'make'\n    env:\n      CFLAGS: -Werror\n\n- job: windows\n  pool:\n    vmImage: 'windows-latest'\n  steps:\n  - script: |\n      make\n    displayName: 'make'\n    env:\n      # fail on error\n      CFLAGS: /WX\n\n- job: macos\n  pool:\n    vmImage: 'macos-latest'\n  steps:\n  - script: |\n      brew update\n      brew install pkg-config gnupg\n      brew install sox ffmpeg libsndfile libvorbis flac lcov\n    displayName: 'brew install'\n  - script: |\n      make\n    displayName: 'make'\n    env:\n      CFLAGS: -Werror\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0126953125,
          "content": "numpy\npytest\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.9189453125,
          "content": "#! /usr/bin/env python\n\nimport sys\nimport os.path\nimport glob\nfrom setuptools import setup, Extension\n\n# add ./python/lib to current path\nsys.path.append(os.path.join('python', 'lib'))  # noqa\nfrom moresetuptools import build_ext, CleanGenerated\n\n# function to generate gen/*.{c,h}\nfrom this_version import get_aubio_version, get_aubio_pyversion\n\n__version__ = get_aubio_pyversion()\n__aubio_version__ = get_aubio_version()\n\ninclude_dirs = []\nlibrary_dirs = []\ndefine_macros = [('AUBIO_VERSION', '%s' % __aubio_version__)]\nextra_link_args = []\n\ninclude_dirs += ['python/ext']\ntry:\n    import numpy\n    include_dirs += [numpy.get_include()]\nexcept ImportError:\n    pass\n\nif sys.platform.startswith('darwin'):\n    extra_link_args += ['-framework', 'CoreFoundation',\n            '-framework', 'AudioToolbox']\n\nsources = sorted(glob.glob(os.path.join('python', 'ext', '*.c')))\n\naubio_extension = Extension(\"aubio._aubio\",\n    sources,\n    include_dirs = include_dirs,\n    library_dirs = library_dirs,\n    extra_link_args = extra_link_args,\n    define_macros = define_macros)\n\n# TODO: find a way to track if package is built against libaubio\n# if os.path.isfile('src/aubio.h'):\n#     if not os.path.isdir(os.path.join('build','src')):\n#         pass\n#         #__version__ += 'a2' # python only version\n\nclassifiers = [\n    'Development Status :: 4 - Beta',\n    'Environment :: Console',\n    'Intended Audience :: Science/Research',\n    'Topic :: Software Development :: Libraries',\n    'Topic :: Multimedia :: Sound/Audio :: Analysis',\n    'Topic :: Multimedia :: Sound/Audio :: Sound Synthesis',\n    'Operating System :: POSIX',\n    'Operating System :: MacOS :: MacOS X',\n    'Operating System :: Microsoft :: Windows',\n    'Programming Language :: C',\n    'Programming Language :: Python',\n    'License :: OSI Approved :: '\n    'GNU General Public License v3 or later (GPLv3+)',\n    ]\n\nthisdir = os.path.abspath(os.path.dirname(__file__))\npy_readme_file = os.path.join(thisdir, 'python', 'README.md')\nwith open(py_readme_file, 'r') as fp:\n    long_description = ''.join(fp.readlines()[3:])\n\ndistrib = setup(name='aubio',\n    version = __version__,\n    packages = ['aubio'],\n    package_dir = {'aubio': 'python/lib/aubio'},\n    ext_modules = [aubio_extension],\n    description = 'a collection of tools for music analysis',\n    long_description = long_description,\n    long_description_content_type = 'text/markdown',\n    license = 'GNU/GPL version 3',\n    author = 'Paul Brossier',\n    author_email = 'piem@aubio.org',\n    maintainer = 'Paul Brossier',\n    maintainer_email = 'piem@aubio.org',\n    url = 'https://aubio.org/',\n    platforms = 'any',\n    classifiers = classifiers,\n    install_requires = ['numpy'],\n    setup_requires = ['numpy'],\n    cmdclass = {\n        'clean': CleanGenerated,\n        'build_ext': build_ext,\n        },\n    entry_points = {\n        'console_scripts': [\n            'aubio = aubio.cmd:main',\n            'aubiocut = aubio.cut:main',\n        ],\n    },\n    )\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "this_version.py",
          "type": "blob",
          "size": 4.1640625,
          "content": "#! python\nimport os\nimport sys\n\n__version_info = {} # keep a reference to parse VERSION once\n\ndef get_version_info():\n    # read from VERSION\n    # return dictionary filled with content of version\n    if not __version_info:\n        this_file_dir = os.path.dirname(os.path.abspath(__file__))\n        version_file = os.path.join(this_file_dir, 'VERSION')\n\n        if not os.path.isfile(version_file):\n            raise SystemError(\"VERSION file not found.\")\n\n        for l in open(version_file).readlines():\n            if l.startswith('AUBIO_MAJOR_VERSION'):\n                __version_info['AUBIO_MAJOR_VERSION'] = int(l.split('=')[1])\n            if l.startswith('AUBIO_MINOR_VERSION'):\n                __version_info['AUBIO_MINOR_VERSION'] = int(l.split('=')[1])\n            if l.startswith('AUBIO_PATCH_VERSION'):\n                __version_info['AUBIO_PATCH_VERSION'] = int(l.split('=')[1])\n            if l.startswith('AUBIO_VERSION_STATUS'):\n                __version_info['AUBIO_VERSION_STATUS'] = \\\n                    l.split('=')[1].strip()[1:-1]\n\n            if l.startswith('LIBAUBIO_LT_CUR'):\n                __version_info['LIBAUBIO_LT_CUR'] = int(l.split('=')[1])\n            if l.startswith('LIBAUBIO_LT_REV'):\n                __version_info['LIBAUBIO_LT_REV'] = int(l.split('=')[1])\n            if l.startswith('LIBAUBIO_LT_AGE'):\n                __version_info['LIBAUBIO_LT_AGE'] = int(l.split('=')[1])\n\n        if len(__version_info) < 6:\n            raise SystemError(\"Failed parsing VERSION file.\")\n\n        # switch version status with commit sha in alpha releases\n        if __version_info['AUBIO_VERSION_STATUS'] and \\\n                '~alpha' in __version_info['AUBIO_VERSION_STATUS']:\n            AUBIO_GIT_SHA = get_git_revision_hash()\n            if AUBIO_GIT_SHA:\n                __version_info['AUBIO_VERSION_STATUS'] = '~git+' + AUBIO_GIT_SHA\n\n    return __version_info\n\ndef get_libaubio_version():\n    verfmt = '%(LIBAUBIO_LT_CUR)s.%(LIBAUBIO_LT_REV)s.%(LIBAUBIO_LT_AGE)s'\n    return str(verfmt % get_version_info())\n\ndef get_aubio_version():\n    verfmt = '%(AUBIO_MAJOR_VERSION)s.%(AUBIO_MINOR_VERSION)s.%(AUBIO_PATCH_VERSION)s%(AUBIO_VERSION_STATUS)s'\n    return str(verfmt % get_version_info())\n\ndef get_aubio_pyversion():\n    # convert to version for python according to pep 440\n    # see https://www.python.org/dev/peps/pep-0440/\n    # outputs MAJ.MIN.PATCH[a0[+git.<sha>[.mods]]]\n    aubio_version = get_aubio_version()\n    if '~git+' in aubio_version:\n        pep440str = aubio_version.replace('+', '.')\n        verstr = pep440str.replace('~git.', 'a0+')\n    elif '~alpha' in aubio_version:\n        verstr = aubio_version.replace('~alpha', 'a0')\n    else:\n        verstr = aubio_version\n    return verstr\n\ndef get_git_revision_hash(short=True):\n    # get commit id, with +mods if local tree is not clean\n    if not os.path.isdir('.git'):\n        # print('Version : not in git repository : can\\'t get sha')\n        return None\n    import subprocess\n    aubio_dir = os.path.dirname(os.path.abspath(__file__))\n    if not os.path.exists(aubio_dir):\n        raise SystemError(\"git / root folder not found\")\n    gitcmd = ['git', '-C', aubio_dir, 'rev-parse']\n    if short:\n        gitcmd.append('--short')\n    gitcmd.append('HEAD')\n    try:\n        gitsha = subprocess.check_output(gitcmd).strip().decode('utf8')\n    except Exception as e:\n        sys.stderr.write('git command error :%s\\n' % e)\n        return None\n    # check if we have a clean tree\n    gitcmd = ['git', '-C', aubio_dir, 'status', '--porcelain']\n    try:\n        output = subprocess.check_output(gitcmd).decode('utf8')\n        if len(output):\n            sys.stderr.write('Info: current tree is not clean\\n\\n')\n            sys.stderr.write(output + '\\n')\n            gitsha += '+mods'\n    except subprocess.CalledProcessError as e:\n        sys.stderr.write('git command error :%s\\n' % e)\n        pass\n    return gitsha\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1 and sys.argv[1] == '-v':\n        print (get_aubio_version())\n    elif len(sys.argv) > 1 and sys.argv[1] == '-p':\n        print (get_aubio_version())\n    else:\n        print ('%30s'% 'aubio version:', get_aubio_version())\n        print ('%30s'% 'python-aubio version:', get_aubio_pyversion())\n"
        },
        {
          "name": "waf_gensyms.py",
          "type": "blob",
          "size": 1.8232421875,
          "content": "import re\nimport os.path\nfrom waflib import TaskGen, Task\nfrom waflib.Context import STDOUT\nfrom waflib.Utils import O644\n\nclass gen_sym_file(Task.Task):\n    color = 'BLUE'\n    inst_to = '${LIBDIR}'\n    def run(self):\n        syms = {}\n        reg = getattr(self.generator, 'export_symbols_regex','.+?')\n        if 'msvc' in self.env.CC_NAME:\n            outputs = [x.abspath() for x in self.generator.link_task.outputs]\n            binary_path = list(filter(lambda x: x.endswith('lib'), outputs))[0]\n            reg_compiled = re.compile(r'External\\s+\\|\\s+(?P<symbol>%s)\\b' % reg)\n            cmd =(self.env.LINK_CC) + ['/dump', '/symbols', binary_path]\n        else: # using gcc? assume we have nm\n            outputs = [x.abspath() for x in self.generator.link_task.outputs]\n            binary_path = list(filter(lambda x: x.endswith('dll'), outputs))[0]\n            reg_compiled = re.compile(r'(T|D)\\s+_(?P<symbol>%s)\\b'%reg)\n            cmd = (self.env.NM or ['nm']) + ['-g', binary_path]\n        dump_output = self.generator.bld.cmd_and_log(cmd, quiet=STDOUT)\n        syms = set([])\n        for m in reg_compiled.finditer(dump_output):\n            syms.add(m.group('symbol'))\n        syms = list(syms)\n        syms.sort()\n        self.outputs[0].write('EXPORTS\\n'+'\\n'.join(syms))\n\n@TaskGen.feature('gensyms')\n@TaskGen.after_method('process_source','process_use','apply_link','process_uselib_local','propagate_uselib_vars')\ndef gen_symbols(self):\n    #sym_file = self.path.find_or_declare(self.target + '.def')\n    sym_file_name = os.path.splitext(self.link_task.outputs[0].abspath())[0] + '.def'\n    sym_file = self.path.find_or_declare(sym_file_name)\n    symtask = self.create_task('gen_sym_file', self.link_task.outputs, sym_file)\n    self.add_install_files(install_to=self.link_task.inst_to, install_from=sym_file,\n        chmod=O644, task=self.link_task)\n\n"
        },
        {
          "name": "wscript",
          "type": "blob",
          "size": 29.701171875,
          "content": "#! /usr/bin/python\n#\n# usage:\n#   $ python waf --help\n#\n# example:\n#   $ ./waf distclean configure build\n#\n# Note: aubio uses the waf build system, which relies on Python. Provided you\n# have Python installed, you do *not* need to install anything to build aubio.\n# For more info about waf, see http://code.google.com/p/waf/ .\n\nimport sys\nimport subprocess\n\nAPPNAME = 'aubio'\n\nfrom this_version import *\n\nVERSION = get_aubio_version()\nLIB_VERSION = get_libaubio_version()\n\ntop = '.'\nout = 'build'\n\ndef add_option_enable_disable(ctx, name, default = None,\n        help_str = None, help_disable_str = None):\n    if help_str == None:\n        help_str = 'enable ' + name + ' support'\n    if help_disable_str == None:\n        help_disable_str = 'do not ' + help_str\n    ctx.add_option('--enable-' + name, action = 'store_true',\n            default = default,\n            dest = 'enable_' + name.replace('-','_'),\n            help = help_str)\n    ctx.add_option('--disable-' + name, action = 'store_false',\n            #default = default,\n            dest = 'enable_' + name.replace('-','_'),\n            help = help_disable_str )\n\ndef options(ctx):\n    ctx.add_option('--build-type', action = 'store',\n            default = \"release\",\n            choices = ('debug', 'release'),\n            dest = 'build_type',\n            help = 'whether to compile with (--build-type=release)' \\\n                    ' or without (--build-type=debug)' \\\n                    ' compiler opimizations [default: release]')\n    ctx.add_option('--debug', action = 'store_const',\n            dest = 'build_type', const = 'debug',\n            help = 'build in debug mode (see --build-type)')\n    ctx.add_option('--nodeps', action = 'store_const',\n            dest = 'nodeps', const = 'debug',\n            help = 'build with no external dependencies')\n    add_option_enable_disable(ctx, 'fftw3f', default = False,\n            help_str = 'compile with fftw3f instead of ooura (recommended)',\n            help_disable_str = 'do not compile with fftw3f')\n    add_option_enable_disable(ctx, 'fftw3', default = False,\n            help_str = 'compile with fftw3 instead of ooura',\n            help_disable_str = 'do not compile with fftw3')\n    add_option_enable_disable(ctx, 'intelipp', default = False,\n            help_str = 'use Intel IPP libraries (auto)',\n            help_disable_str = 'do not use Intel IPP libraries')\n    add_option_enable_disable(ctx, 'complex', default = False,\n            help_str ='compile with C99 complex',\n            help_disable_str = 'do not use C99 complex (default)' )\n    add_option_enable_disable(ctx, 'jack', default = None,\n            help_str = 'compile with jack (auto)',\n            help_disable_str = 'disable jack support')\n    add_option_enable_disable(ctx, 'sndfile', default = None,\n            help_str = 'compile with sndfile (auto)',\n            help_disable_str = 'disable sndfile')\n    add_option_enable_disable(ctx, 'avcodec', default = None,\n            help_str = 'compile with libavcodec (auto)',\n            help_disable_str = 'disable libavcodec')\n    add_option_enable_disable(ctx, 'vorbis', default = None,\n            help_str = 'compile with libvorbis (auto)',\n            help_disable_str = 'disable libvorbis')\n    add_option_enable_disable(ctx, 'flac', default = None,\n            help_str = 'compile with libFLAC (auto)',\n            help_disable_str = 'disable libflac')\n    add_option_enable_disable(ctx, 'samplerate', default = None,\n            help_str = 'compile with samplerate (auto)',\n            help_disable_str = 'disable samplerate')\n    add_option_enable_disable(ctx, 'rubberband', default = None,\n            help_str = 'compile with rubberband (auto)',\n            help_disable_str = 'disable rubberband')\n    add_option_enable_disable(ctx, 'memcpy', default = True,\n            help_str = 'use memcpy hacks (default)',\n            help_disable_str = 'do not use memcpy hacks')\n    add_option_enable_disable(ctx, 'double', default = False,\n            help_str = 'compile in double precision mode',\n            help_disable_str = 'compile in single precision mode (default)')\n    add_option_enable_disable(ctx, 'fat', default = False,\n            help_str = 'build fat binaries (darwin only)',\n            help_disable_str = 'do not build fat binaries (default)')\n    add_option_enable_disable(ctx, 'accelerate', default = None,\n            help_str = 'use Accelerate framework (darwin only) (auto)',\n            help_disable_str = 'do not use Accelerate framework')\n    add_option_enable_disable(ctx, 'apple-audio', default = None,\n            help_str = 'use CoreFoundation (darwin only) (auto)',\n            help_disable_str = 'do not use CoreFoundation framework')\n    add_option_enable_disable(ctx, 'blas', default = False,\n            help_str = 'use BLAS acceleration library (no)',\n            help_disable_str = 'do not use BLAS library')\n    add_option_enable_disable(ctx, 'atlas', default = False,\n            help_str = 'use ATLAS acceleration library (no)',\n            help_disable_str = 'do not use ATLAS library')\n    add_option_enable_disable(ctx, 'wavread', default = True,\n            help_str = 'compile with source_wavread (default)',\n            help_disable_str = 'do not compile source_wavread')\n    add_option_enable_disable(ctx, 'wavwrite', default = True,\n            help_str = 'compile with source_wavwrite (default)',\n            help_disable_str = 'do not compile source_wavwrite')\n\n    add_option_enable_disable(ctx, 'docs', default = None,\n            help_str = 'build documentation (auto)',\n            help_disable_str = 'do not build documentation')\n\n    add_option_enable_disable(ctx, 'tests', default = True,\n            help_str = 'build tests (true)',\n            help_disable_str = 'do not build or run tests')\n\n    add_option_enable_disable(ctx, 'examples', default = True,\n            help_str = 'build examples (true)',\n            help_disable_str = 'do not build examples')\n\n    ctx.add_option('--with-target-platform', type='string',\n            help='set target platform for cross-compilation',\n            dest='target_platform')\n\n    ctx.load('compiler_c')\n    ctx.load('waf_unit_test')\n    ctx.load('gnu_dirs')\n    ctx.load('waf_gensyms', tooldir='.')\n\ndef configure(ctx):\n    target_platform = sys.platform\n    if ctx.options.target_platform:\n        target_platform = ctx.options.target_platform\n\n    if ctx.options.nodeps:\n        external_deps = [\n                'sndfile',\n                'samplerate',\n                'jack',\n                'rubberband',\n                'avcodec',\n                'blas',\n                'fftw3',\n                'fftw3f',\n                'flac',\n                'vorbis',\n        ]\n        for d in external_deps:\n            if not hasattr(ctx.options, 'enable_' + d):\n                raise ctx.errors.ConfigurationError ('--enable-%s missing from options' % d)\n            if getattr(ctx.options, 'enable_' + d) == True:\n                msg = 'Option --nodeps can not be used along with --enable-%s' % d\n                raise ctx.errors.ConfigurationError (msg)\n            elif getattr(ctx.options, 'enable_' + d) is None:\n                msg = 'Option --nodeps used but automatic detection with --enable-%s' % d\n                ctx.msg('Warning', msg)\n            setattr(ctx.options, 'enable_' + d, False)\n\n    from waflib import Options\n\n    if target_platform=='emscripten':\n        ctx.load('c_emscripten')\n    else:\n        ctx.load('compiler_c')\n\n    ctx.load('waf_unit_test')\n    ctx.load('gnu_dirs')\n    ctx.load('waf_gensyms', tooldir='.')\n\n    # check for common headers\n    ctx.check(header_name='stdlib.h')\n    ctx.check(header_name='stdio.h')\n    ctx.check(header_name='math.h')\n    ctx.check(header_name='string.h')\n    ctx.check(header_name='errno.h')\n    ctx.check(header_name='limits.h')\n    ctx.check(header_name='stdarg.h')\n    ctx.check(header_name='getopt.h', mandatory = False)\n    ctx.check(header_name='unistd.h', mandatory = False)\n\n    ctx.env['DEST_OS'] = target_platform\n\n    if ctx.options.build_type == \"debug\":\n        ctx.define('DEBUG', 1)\n    else:\n        ctx.define('NDEBUG', 1)\n\n    if ctx.env.CC_NAME != 'msvc':\n        if ctx.options.build_type == \"debug\":\n            # no optimization in debug mode\n            ctx.env.prepend_value('CFLAGS', ['-O0'])\n        else:\n            if target_platform == 'emscripten':\n                # -Oz for small js file generation\n                ctx.env.prepend_value('CFLAGS', ['-Oz'])\n            else:\n                # default to -O2 in release mode\n                ctx.env.prepend_value('CFLAGS', ['-O2'])\n        # enable debug symbols and configure warnings\n        ctx.env.prepend_value('CFLAGS', ['-g', '-Wall', '-Wextra'])\n    else:\n        # enable debug symbols\n        ctx.env.CFLAGS += ['/Z7']\n        # /FS flag available in msvc >= 12 (2013)\n        if 'MSVC_VERSION' in ctx.env and ctx.env.MSVC_VERSION >= 12:\n            ctx.env.CFLAGS += ['/FS']\n        ctx.env.LINKFLAGS += ['/DEBUG', '/INCREMENTAL:NO']\n        # configure warnings\n        ctx.env.CFLAGS += ['/W4', '/D_CRT_SECURE_NO_WARNINGS']\n        # ignore \"possible loss of data\" warnings\n        ctx.env.CFLAGS += ['/wd4305', '/wd4244', '/wd4245', '/wd4267']\n        # ignore \"unreferenced formal parameter\" warnings\n        ctx.env.CFLAGS += ['/wd4100']\n        # set optimization level and runtime libs\n        if (ctx.options.build_type == \"release\"):\n            ctx.env.CFLAGS += ['/Ox']\n            ctx.env.CFLAGS += ['/MD']\n        else:\n            assert(ctx.options.build_type == \"debug\")\n            ctx.env.CFLAGS += ['/MDd']\n\n    ctx.check_cc(lib='m', uselib_store='M', mandatory=False)\n\n    if target_platform not in ['win32', 'win64']:\n        ctx.env.CFLAGS += ['-fPIC']\n    else:\n        ctx.define('HAVE_WIN_HACKS', 1)\n        ctx.env['cshlib_PATTERN'] = 'lib%s.dll'\n\n    if target_platform == 'darwin' and ctx.options.enable_fat:\n        ctx.env.CFLAGS += ['-arch', 'arm64', '-arch', 'x86_64']\n        ctx.env.LINKFLAGS += ['-arch', 'arm64', '-arch', 'x86_64']\n        MINSDKVER=\"10.4\"\n        ctx.env.CFLAGS += [ '-mmacosx-version-min=' + MINSDKVER ]\n        ctx.env.LINKFLAGS += [ '-mmacosx-version-min=' + MINSDKVER ]\n\n    if target_platform in [ 'darwin', 'ios', 'iosimulator' ]:\n        if (ctx.options.enable_apple_audio != False):\n            ctx.env.FRAMEWORK += ['CoreFoundation', 'AudioToolbox']\n            ctx.define('HAVE_SOURCE_APPLE_AUDIO', 1)\n            ctx.define('HAVE_SINK_APPLE_AUDIO', 1)\n            ctx.msg('Checking for AudioToolbox.framework', 'yes')\n        else:\n            ctx.msg('Checking for AudioToolbox.framework', 'no (disabled)',\n                    color = 'YELLOW')\n        if (ctx.options.enable_accelerate != False):\n            ctx.define('HAVE_ACCELERATE', 1)\n            ctx.env.FRAMEWORK += ['Accelerate']\n            ctx.msg('Checking for Accelerate framework', 'yes')\n        else:\n            ctx.msg('Checking for Accelerate framework', 'no (disabled)',\n                    color = 'YELLOW')\n\n    if target_platform in [ 'ios', 'iosimulator', 'watchos', 'watchsimulator' ]:\n        MINSDKVER=\"6.1\"\n        xcodeslct_output = subprocess.check_output (['xcode-select', '--print-path'])\n        XCODEPATH = xcodeslct_output.decode(sys.stdout.encoding).strip()\n        if target_platform == 'ios':\n            SDKNAME = \"iPhoneOS\"\n        elif target_platform == 'iosimulator':\n            SDKNAME = \"iPhoneSimulator\"\n        elif target_platform == 'watchos':\n            SDKNAME = \"WatchOS\"\n        elif target_platform == 'watchsimulator':\n            SDKNAME = \"WatchSimulator\"\n        else:\n            raise ctx.errors.ConfigurationError (\"Error: unknown target platform '\"\n                + target_platform + \"'\")\n        DEVROOT = \"%(XCODEPATH)s/Platforms/%(SDKNAME)s.platform/Developer\" % locals()\n        SDKROOT = \"%(DEVROOT)s/SDKs/%(SDKNAME)s.sdk\" % locals()\n        ctx.env.CFLAGS += ['-std=c99']\n        if ctx.options.enable_apple_audio != False and target_platform.startswith ('ios'):\n            ctx.define('HAVE_AUDIO_UNIT', 1)\n            #ctx.env.FRAMEWORK += ['CoreFoundation', 'AudioToolbox']\n        if target_platform == 'ios':\n            ctx.env.CFLAGS += [ '-fembed-bitcode' ]\n            ctx.env.CFLAGS += [ '-arch', 'arm64' ]\n            ctx.env.CFLAGS += [ '-arch', 'armv7' ]\n            ctx.env.CFLAGS += [ '-arch', 'armv7s' ]\n            ctx.env.LINKFLAGS += [ '-arch', 'arm64' ]\n            ctx.env.LINKFLAGS += ['-arch', 'armv7']\n            ctx.env.LINKFLAGS += ['-arch', 'armv7s']\n            ctx.env.CFLAGS += [ '-miphoneos-version-min=' + MINSDKVER ]\n            ctx.env.LINKFLAGS += [ '-miphoneos-version-min=' + MINSDKVER ]\n        elif target_platform == 'iosimulator':\n            ctx.env.CFLAGS += [ '-arch', 'x86_64' ]\n            ctx.env.CFLAGS += [ '-arch', 'arm64' ]\n            ctx.env.LINKFLAGS += ['-arch', 'x86_64']\n            ctx.env.LINKFLAGS += ['-arch', 'arm64']\n            ctx.env.CFLAGS += [ '-mios-simulator-version-min=' + MINSDKVER ]\n            ctx.env.LINKFLAGS += [ '-mios-simulator-version-min=' + MINSDKVER ]\n        elif target_platform == 'watchos':\n            ctx.env.CFLAGS += [ '-arch', 'armv7' ]\n            ctx.env.CFLAGS += [ '-arch', 'armv7s' ]\n            ctx.env.LINKFLAGS += ['-arch', 'armv7']\n            ctx.env.LINKFLAGS += ['-arch', 'armv7s']\n            ctx.env.CFLAGS += [ '-mwatchos-version-min=' + MINSDKVER ]\n            ctx.env.LINKFLAGS += [ '-mwatchos-version-min=' + MINSDKVER ]\n        elif target_platform == 'watchsimulator':\n            ctx.env.CFLAGS += [ '-arch', 'x86_64' ]\n            ctx.env.CFLAGS += [ '-arch', 'arm64' ]\n            ctx.env.LINKFLAGS += ['-arch', 'x86_64']\n            ctx.env.LINKFLAGS += ['-arch', 'arm64']\n            ctx.env.CFLAGS += [ '-mwatchsimulator-version-min=' + MINSDKVER ]\n            ctx.env.LINKFLAGS += [ '-mwatchsimulator-version-min=' + MINSDKVER ]\n        ctx.env.CFLAGS += [ '-isysroot' , SDKROOT]\n        ctx.env.LINKFLAGS += [ '-isysroot' , SDKROOT]\n\n    if target_platform == 'emscripten':\n        if ctx.options.build_type == \"debug\":\n            ctx.env.cshlib_PATTERN = '%s.js'\n            ctx.env.LINKFLAGS += ['-s','ASSERTIONS=2']\n            ctx.env.LINKFLAGS += ['-s','SAFE_HEAP=1']\n            ctx.env.LINKFLAGS += ['-s','ALIASING_FUNCTION_POINTERS=0']\n            ctx.env.LINKFLAGS += ['-O0']\n        else:\n            ctx.env.LINKFLAGS += ['-Oz']\n            ctx.env.cshlib_PATTERN = '%s.min.js'\n\n        # doesnt ship file system support in lib\n        ctx.env.LINKFLAGS_cshlib += ['-s', 'NO_FILESYSTEM=1']\n        # put memory file inside generated js files for easier portability\n        ctx.env.LINKFLAGS += ['--memory-init-file', '0']\n        ctx.env.cprogram_PATTERN = \"%s.js\"\n        ctx.env.cstlib_PATTERN = '%s.a'\n\n        # tell emscripten functions we want to expose\n        from python.lib.gen_external import get_c_declarations, \\\n                get_cpp_objects_from_c_declarations, \\\n                get_all_func_names_from_lib, \\\n                generate_lib_from_c_declarations\n        # emscripten can't use double\n        c_decls = get_c_declarations(usedouble=False)\n        objects = list(get_cpp_objects_from_c_declarations(c_decls))\n        # ensure that aubio structs are exported\n        objects += ['fvec_t', 'cvec_t', 'fmat_t']\n        lib = generate_lib_from_c_declarations(objects, c_decls)\n        exported_funcnames = get_all_func_names_from_lib(lib)\n        c_mangled_names = ['_' + s for s in exported_funcnames]\n        ctx.env.LINKFLAGS_cshlib += ['-s',\n                'EXPORTED_FUNCTIONS=%s' % c_mangled_names]\n\n    # check support for C99 __VA_ARGS__ macros\n    check_c99_varargs = '''\n#include <stdio.h>\n#define AUBIO_ERR(...) fprintf(stderr, __VA_ARGS__)\n'''\n\n    if ctx.check_cc(fragment = check_c99_varargs,\n            type='cstlib',\n            msg = 'Checking for C99 __VA_ARGS__ macro',\n            mandatory = False):\n        ctx.define('HAVE_C99_VARARGS_MACROS', 1)\n\n    # show a message about enable_double status\n    if (ctx.options.enable_double == True):\n        ctx.msg('Checking for size of smpl_t', 'double')\n        ctx.msg('Checking for size of lsmp_t', 'long double')\n    else:\n        ctx.msg('Checking for size of smpl_t', 'float')\n        ctx.msg('Checking for size of lsmp_t', 'double')\n\n    # optionally use complex.h\n    if (ctx.options.enable_complex == True):\n        ctx.check(header_name='complex.h')\n    else:\n        ctx.msg('Checking if complex.h is enabled', 'no')\n\n    # check for Intel IPP\n    if (ctx.options.enable_intelipp != False):\n        has_ipp_headers = ctx.check(header_name=['ippcore.h', 'ippvm.h',\n            'ipps.h'], mandatory = False)\n        has_ipp_libs = ctx.check(lib=['ippcore', 'ippvm', 'ipps'],\n                uselib_store='INTEL_IPP', mandatory = False)\n        if (has_ipp_headers and has_ipp_libs):\n            ctx.msg('Checking if Intel IPP is available', 'yes')\n            ctx.define('HAVE_INTEL_IPP', 1)\n            if ctx.env.CC_NAME == 'msvc':\n                # force linking multi-threaded static IPP libraries on Windows\n                # with msvc\n                ctx.define('_IPP_SEQUENTIAL_STATIC', 1)\n        else:\n            ctx.msg('Checking if Intel IPP is available', 'no')\n\n    # check for fftw3\n    if (ctx.options.enable_fftw3 != False or ctx.options.enable_fftw3f != False):\n        # one of fftwf or fftw3f\n        if (ctx.options.enable_fftw3f != False):\n            ctx.check_cfg(package = 'fftw3f',\n                    args = '--cflags --libs fftw3f >= 3.0.0',\n                    mandatory = ctx.options.enable_fftw3f)\n            if (ctx.options.enable_double == True):\n                ctx.msg('Warning',\n                        'fftw3f enabled, but compiling in double precision!')\n        else:\n            # fftw3f disabled, take most sensible one according to\n            # enable_double\n            if (ctx.options.enable_double == True):\n                ctx.check_cfg(package = 'fftw3',\n                        args = '--cflags --libs fftw3 >= 3.0.0.',\n                        mandatory = ctx.options.enable_fftw3)\n            else:\n                ctx.check_cfg(package = 'fftw3f',\n                        args = '--cflags --libs fftw3f >= 3.0.0',\n                        mandatory = ctx.options.enable_fftw3)\n        ctx.define('HAVE_FFTW3', 1)\n\n    # fftw not enabled, use vDSP, intelIPP or ooura\n    if 'HAVE_FFTW3F' in ctx.env.define_key:\n        ctx.msg('Checking for FFT implementation', 'fftw3f')\n    elif 'HAVE_FFTW3' in ctx.env.define_key:\n        ctx.msg('Checking for FFT implementation', 'fftw3')\n    elif 'HAVE_ACCELERATE' in ctx.env.define_key:\n        ctx.msg('Checking for FFT implementation', 'vDSP')\n    elif 'HAVE_INTEL_IPP' in ctx.env.define_key:\n        ctx.msg('Checking for FFT implementation', 'Intel IPP')\n    else:\n        ctx.msg('Checking for FFT implementation', 'ooura')\n\n    # check for libsndfile\n    if (ctx.options.enable_sndfile != False):\n        ctx.check_cfg(package = 'sndfile',\n                args = '--cflags --libs sndfile >= 1.0.4',\n                mandatory = ctx.options.enable_sndfile)\n\n    # check for libsamplerate\n    if (ctx.options.enable_double):\n        if (ctx.options.enable_samplerate):\n            ctx.fatal(\"Could not compile aubio in double precision mode' \\\n                    ' with libsamplerate\")\n        else:\n            ctx.options.enable_samplerate = False\n            ctx.msg('Checking if using samplerate',\n                    'no (disabled in double precision mode)', color = 'YELLOW')\n    if (ctx.options.enable_samplerate != False):\n        ctx.check_cfg(package = 'samplerate',\n                args = '--cflags --libs samplerate >= 0.0.15',\n                mandatory = ctx.options.enable_samplerate)\n\n    # check for librubberband\n    if (ctx.options.enable_rubberband != False):\n        ctx.check_cfg(package = 'rubberband', atleast_version = '1.3',\n                args = '--cflags --libs',\n                mandatory = ctx.options.enable_rubberband)\n\n    # check for jack\n    if (ctx.options.enable_jack != False):\n        ctx.check_cfg(package = 'jack',\n                args = '--cflags --libs',\n                mandatory = ctx.options.enable_jack)\n\n    # check for libav\n    if (ctx.options.enable_avcodec != False):\n        ctx.check_cfg(package = 'libavcodec',\n                args = '--cflags --libs libavcodec >= 54.35.0',\n                uselib_store = 'AVCODEC',\n                mandatory = ctx.options.enable_avcodec)\n        ctx.check_cfg(package = 'libavformat',\n                args = '--cflags --libs libavformat >= 52.3.0',\n                uselib_store = 'AVFORMAT',\n                mandatory = ctx.options.enable_avcodec)\n        ctx.check_cfg(package = 'libavutil',\n                args = '--cflags --libs libavutil >= 52.3.0',\n                uselib_store = 'AVUTIL',\n                mandatory = ctx.options.enable_avcodec)\n        ctx.check_cfg(package = 'libswresample',\n                args = '--cflags --libs libswresample >= 1.2.0',\n                uselib_store = 'SWRESAMPLE',\n                mandatory = False)\n\n        msg_check = 'Checking for all libav libraries'\n        if 'HAVE_AVCODEC' not in ctx.env:\n            ctx.msg(msg_check, 'not found (missing avcodec)', color = 'YELLOW')\n        elif 'HAVE_AVFORMAT' not in ctx.env:\n            ctx.msg(msg_check, 'not found (missing avformat)', color = 'YELLOW')\n        elif 'HAVE_AVUTIL' not in ctx.env:\n            ctx.msg(msg_check, 'not found (missing avutil)', color = 'YELLOW')\n        elif 'HAVE_SWRESAMPLE' not in ctx.env :\n            resample_missing = 'not found (missing swresample)'\n            ctx.msg(msg_check, resample_missing, color = 'YELLOW')\n        else:\n            ctx.msg(msg_check, 'yes')\n            ctx.define('HAVE_LIBAV', 1)\n\n    # check for vorbisenc\n    if (ctx.options.enable_vorbis != False):\n        ctx.check_cfg(package = 'vorbisenc vorbis ogg',\n                args = '--cflags --libs',\n                uselib_store = 'VORBISENC',\n                mandatory = ctx.options.enable_vorbis)\n\n    # check for flac\n    if (ctx.options.enable_flac != False):\n        ctx.check_cfg(package = 'flac',\n                args = '--cflags --libs',\n                uselib_store = 'FLAC',\n                mandatory = ctx.options.enable_flac)\n\n    if (ctx.options.enable_wavread != False):\n        ctx.define('HAVE_WAVREAD', 1)\n    ctx.msg('Checking if using source_wavread',\n            ctx.options.enable_wavread and 'yes' or 'no')\n    if (ctx.options.enable_wavwrite!= False):\n        ctx.define('HAVE_WAVWRITE', 1)\n    ctx.msg('Checking if using sink_wavwrite',\n            ctx.options.enable_wavwrite and 'yes' or 'no')\n\n    # use BLAS/ATLAS\n    if (ctx.options.enable_blas != False):\n        ctx.check_cfg(package = 'blas',\n                args = '--cflags --libs',\n                uselib_store='BLAS', mandatory = ctx.options.enable_blas)\n        if 'LIB_BLAS' in ctx.env:\n            blas_header = None\n            if ctx.env['LIBPATH_BLAS']:\n                if 'atlas' in ctx.env['LIBPATH_BLAS'][0]:\n                    blas_header = 'atlas/cblas.h'\n                elif 'openblas' in ctx.env['LIBPATH_BLAS'][0]:\n                    blas_header = 'openblas/cblas.h'\n            else:\n                blas_header = 'cblas.h'\n            ctx.check(header_name = blas_header, mandatory =\n                    ctx.options.enable_atlas)\n\n    # use memcpy hacks\n    if (ctx.options.enable_memcpy == True):\n        ctx.define('HAVE_MEMCPY_HACKS', 1)\n\n    # write configuration header\n    ctx.write_config_header('src/config.h')\n\n    # the following defines will be passed as arguments to the compiler\n    # instead of being written to src/config.h\n    ctx.define('HAVE_CONFIG_H', 1)\n\n    # add some defines used in examples\n    ctx.define('AUBIO_PREFIX', ctx.env['PREFIX'])\n    ctx.define('PACKAGE', APPNAME)\n\n    # double precision mode\n    if (ctx.options.enable_double == True):\n        ctx.define('HAVE_AUBIO_DOUBLE', 1)\n\n    if (ctx.options.enable_docs != False):\n        # check if txt2man is installed, optional\n        try:\n          ctx.find_program('txt2man', var='TXT2MAN')\n        except ctx.errors.ConfigurationError:\n          ctx.to_log('txt2man was not found (ignoring)')\n\n        # check if doxygen is installed, optional\n        try:\n          ctx.find_program('doxygen', var='DOXYGEN')\n        except ctx.errors.ConfigurationError:\n          ctx.to_log('doxygen was not found (ignoring)')\n\n        # check if sphinx-build is installed, optional\n        try:\n          ctx.find_program('sphinx-build', var='SPHINX')\n        except ctx.errors.ConfigurationError:\n          ctx.to_log('sphinx-build was not found (ignoring)')\n\ndef build(bld):\n    bld.env['VERSION'] = VERSION\n    bld.env['LIB_VERSION'] = LIB_VERSION\n\n    # main source\n    bld.recurse('src')\n\n    # add sub directories\n    if bld.env['DEST_OS'] not in ['ios', 'iosimulator', 'watchos', 'watchsimulator', 'android']:\n        if bld.env['DEST_OS']=='emscripten' and not bld.options.testcmd:\n            bld.options.testcmd = 'node %s'\n        if bld.options.enable_examples:\n            bld.recurse('examples')\n        if bld.options.enable_tests:\n            bld.recurse('tests')\n\n    # pkg-config template\n    bld( source = 'aubio.pc.in' )\n\n    # documentation\n    txt2man(bld)\n    doxygen(bld)\n    sphinx(bld)\n\n    from waflib.Tools import waf_unit_test\n    bld.add_post_fun(waf_unit_test.summary)\n    bld.add_post_fun(waf_unit_test.set_exit_code)\n\ndef txt2man(bld):\n    # build manpages from txt files using txt2man\n    if bld.env['TXT2MAN']:\n        from waflib import TaskGen\n        if 'MANDIR' not in bld.env:\n            bld.env['MANDIR'] = bld.env['DATAROOTDIR'] + '/man'\n        bld.env.VERSION = VERSION\n        rule_str = '${TXT2MAN} -t `basename ${TGT} | cut -f 1 -d . | tr a-z A-Z`'\n        rule_str += ' -r ${PACKAGE}\\\\ ${VERSION} -P ${PACKAGE}'\n        rule_str += ' -v ${PACKAGE}\\\\ User\\\\\\'s\\\\ manual'\n        rule_str += ' -s 1 ${SRC} > ${TGT}'\n        TaskGen.declare_chain(\n                name      = 'txt2man',\n                rule      = rule_str,\n                ext_in    = '.txt',\n                ext_out   = '.1',\n                reentrant = False,\n                install_path =  '${MANDIR}/man1',\n                )\n        bld( source = bld.path.ant_glob('doc/*.txt') )\n\ndef doxygen(bld):\n    # build documentation from source files using doxygen\n    if bld.env['DOXYGEN']:\n        bld.env.VERSION = VERSION\n        rule = '( cat ${SRC[0]} && echo PROJECT_NUMBER=${VERSION}'\n        rule += ' && echo OUTPUT_DIRECTORY=%s && echo HTML_OUTPUT=%s )'\n        rule += ' | doxygen - > /dev/null'\n        rule %= (os.path.abspath(out), 'api')\n        bld( name = 'doxygen', rule = rule,\n                source = ['doc/web.cfg']\n                    + bld.path.find_dir('src').ant_glob('**/*.h'),\n                target = bld.path.find_or_declare('api/index.html'),\n                cwd = bld.path.find_dir('doc'))\n        # evaluate nodes lazily to prevent build directory traversal warnings\n        bld.install_files('${DATAROOTDIR}/doc/libaubio-doc/api',\n                bld.path.find_or_declare('api').ant_glob('**/*',\n                    generator=True), cwd=bld.path.find_or_declare('api'),\n                relative_trick=True)\n\ndef sphinx(bld):\n    # build documentation from source files using sphinx-build\n    try:\n        import aubio\n        has_aubio = True\n    except ImportError:\n        from waflib import Logs\n        Logs.pprint('YELLOW', \"Sphinx manual: install aubio first\")\n        has_aubio = False\n    if bld.env['SPHINX'] and has_aubio:\n        bld.env.VERSION = VERSION\n        rule = '${SPHINX} -b html -D release=${VERSION}' \\\n                ' -D version=${VERSION} -W -a -q' \\\n                ' -d %s ' % os.path.join(os.path.abspath(out), 'doctrees')\n        rule += ' . %s' % os.path.join(os.path.abspath(out), 'manual')\n        bld( name = 'sphinx', rule = rule,\n                cwd = bld.path.find_dir('doc'),\n                source = bld.path.find_dir('doc').ant_glob('*.rst'),\n                target = bld.path.find_or_declare('manual/index.html'))\n        # evaluate nodes lazily to prevent build directory traversal warnings\n        bld.install_files('${DATAROOTDIR}/doc/libaubio-doc/manual',\n                bld.path.find_or_declare('manual').ant_glob('**/*',\n                    generator=True), cwd=bld.path.find_or_declare('manual'),\n                relative_trick=True)\n\n# register the previous rules as build rules\nfrom waflib.Build import BuildContext\n\nclass build_txt2man(BuildContext):\n    cmd = 'txt2man'\n    fun = 'txt2man'\n\nclass build_manpages(BuildContext):\n    cmd = 'manpages'\n    fun = 'txt2man'\n\nclass build_sphinx(BuildContext):\n    cmd = 'sphinx'\n    fun = 'sphinx'\n\nclass build_doxygen(BuildContext):\n    cmd = 'doxygen'\n    fun = 'doxygen'\n\ndef shutdown(bld):\n    from waflib import Logs\n    if bld.options.target_platform in ['ios', 'iosimulator']:\n        msg ='building for %s, contact the author for a commercial license' \\\n                % bld.options.target_platform\n        Logs.pprint('RED', msg)\n        msg ='   Paul Brossier <piem@aubio.org>'\n        Logs.pprint('RED', msg)\n\ndef dist(ctx):\n    ctx.excl  = ' **/.waf*'\n    ctx.excl += ' **/.git*'\n    ctx.excl += ' **/*~ **/*.pyc **/*.swp **/*.swo **/*.swn **/.lock-w*'\n    ctx.excl += ' **/build/*'\n    ctx.excl += ' doc/_build'\n    ctx.excl += ' python/demos_*'\n    ctx.excl += ' **/python/gen **/python/build **/python/dist'\n    ctx.excl += ' **/python/ext/config.h'\n    ctx.excl += ' **/python/lib/aubio/_aubio.so'\n    ctx.excl += ' **.egg-info'\n    ctx.excl += ' **/.eggs'\n    ctx.excl += ' **/.pytest_cache'\n    ctx.excl += ' **/.cache'\n    ctx.excl += ' **/**.zip **/**.tar.bz2'\n    ctx.excl += ' **.tar.bz2**'\n    ctx.excl += ' **/doc/full/* **/doc/web/*'\n    ctx.excl += ' **/doc/full.cfg'\n    ctx.excl += ' **/python/*.db'\n    ctx.excl += ' **/python.old/*'\n    ctx.excl += ' **/python/*/*.old'\n    ctx.excl += ' **/python/lib/aubio/*.so'\n    ctx.excl += ' **/python/tests/sounds'\n    ctx.excl += ' **/**.asc'\n    ctx.excl += ' **/dist*'\n    ctx.excl += ' **/.DS_Store'\n    ctx.excl += ' **/.travis.yml'\n    ctx.excl += ' **/.appveyor.yml'\n    ctx.excl += ' **/.circleci/*'\n    ctx.excl += ' **/azure-pipelines.yml'\n    ctx.excl += ' **/.coverage*'\n"
        }
      ]
    }
  ]
}