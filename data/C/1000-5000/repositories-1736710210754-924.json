{
  "metadata": {
    "timestamp": 1736710210754,
    "page": 924,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AOMediaCodec/libavif",
      "stars": 1618,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.529296875,
          "content": "---\nLanguage:        Cpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: true\n# AllowAllArgumentsOnNextLine: false\n# AllowAllConstructorInitializersOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: InlineOnly\n# AllowShortLambdasOnASingleLine: All\n# AllowShortIfStatementsOnASingleLine: WithoutElse\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n#  AfterCaseLabel:  false\n  AfterClass:      true\n  AfterControlStatement: false\n  AfterEnum:       true\n  AfterFunction:   true\n  AfterNamespace:  true\n  AfterObjCDeclaration: false\n  AfterStruct:     true\n  AfterUnion:      true\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: false\nColumnLimit:     130\nCommentPragmas:  '.'\nCompactNamespaces: true\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n  - Regex:           '.*'\n    Priority:        1\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: true\nIndentPPDirectives: None\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 10\nPenaltyBreakBeforeFirstCallParameter: 9999\nPenaltyBreakComment: 0\nPenaltyBreakFirstLessLess: 0\nPenaltyBreakString: 0\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 2\nPenaltyReturnTypeOnItsOwnLine: 9999999\nPointerAlignment: Middle\nReflowComments:  false\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\n# SpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: true\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        4\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".cmake-format.py",
          "type": "blob",
          "size": 0.890625,
          "content": "# -----------------------------\n# Options affecting formatting.\n# -----------------------------\nwith section(\"format\"):\n  # How wide to allow formatted cmake files\n  line_width = 130\n\n  # How many spaces to tab for indent\n  tab_size = 4\n\n  # If an argument group contains more than this many sub-groups (parg or kwarg\n  # groups) then force it to a vertical layout.\n  max_subgroups_hwrap = 3\n\n  # If a positional argument group contains more than this many arguments, then\n  # force it to a vertical layout.\n  max_pargs_hwrap = 10\n\n  # If a statement is wrapped to more than one line, than dangle the closing\n  # parenthesis on its own line.\n  dangle_parens = True\n\n# ------------------------------------------------\n# Options affecting comment reflow and formatting.\n# ------------------------------------------------\nwith section(\"markup\"):\n  # enable comment markup parsing and reflow\n  enable_markup = False\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0458984375,
          "content": "* text=auto\n*.sh text eol=lf\n*.y4m -text -diff\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2763671875,
          "content": "/build*\n/obj*\n/ext/aom\n/ext/avm\n/ext/ComplianceWarden\n/ext/dav1d\n/ext/fuzztest\n/ext/googletest\n/ext/gpac\n/ext/libargparse\n/ext/libjpeg\n/ext/libjpeg-turbo\n/ext/libgav1\n/ext/libpng\n/ext/libwebp\n/ext/libxml2\n/ext/libyuv\n/ext/rav1e\n/ext/SVT-AV1\n/ext/zlib\n.clangd/\n.vscode/\ncscope.*\ntags\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 60.1357421875,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nThe changes are relative to the previous release, unless the baseline is specified.\n\n## [Unreleased]\n\n### Added since 1.1.1\n* Add the properties and numProperties fields to avifImage. They are filled by\n  the avifDecoder instance with the properties unrecognized by libavif. They are\n  written by the avifEncoder.\n\n### Changed since 1.1.1\n* avifenc: Allow large images to be encoded.\n* Fix empty CMAKE_CXX_FLAGS_RELEASE if -DAVIF_CODEC_AOM=LOCAL -DAVIF_LIBYUV=OFF\n  is specified. https://github.com/AOMediaCodec/libavif/issues/2365.\n* Renamed AVIF_ENABLE_EXPERIMENTAL_METAV1 to AVIF_ENABLE_EXPERIMENTAL_MINI and\n  updated the experimental reduced header feature to the latest specification\n  draft.\n* Ignore gain maps with unsupported metadata. Handle gain maps with\n  writer_version > 0 correctly.\n  Simplify gain map API: remove the enableParsingGainMapMetadata setting, now gain\n  map metadata is always parsed if present and if this feature is compiled in.\n  Replace enableDecodingGainMap and ignoreColorAndAlpha with a bit field to choose\n  image content to decode. Remove gainMapPresent: users can check if\n  decoder->image->gainMap != NULL instead.\n* Write an empty HandlerBox name field instead of \"libavif\" (saves 7 bytes).\n* Update aom.cmd/LocalAom.cmake: v3.11.0\n* Update avm.cmd: research-v8.1.0\n* Update dav1d.cmd/dav1d_android.sh/LocalDav1d.cmake: 1.5.0\n* Update libjpeg.cmd/LocalJpeg.cmake: v3.0.4\n* Update libxml2.cmd/LocalLibXml2.cmake: v2.13.5\n* Update svt.cmd/svt.sh/LocalSvt.cmake: v2.3.0\n* Change experimental gainmap API: remove avifGainMapMetadata and\n  avifGainMapMetadataDouble structs.\n* Add avif(Un)SignedFraction structs and avifDoubleTo(Un)SignedFraction\n  utility functions.\n* Turn on the gain map API. Remove the\n  AVIF_ENABLE_EXPERIMENTAL_GAIN_MAP compile flag.\n* Remove AVIF_ENABLE_GTEST CMake option. It's now implied by\n  AVIF_GTEST=LOCAL/SYSTEM.\n* Add 'avifgainmaputil' command line tool to installed apps.\n* Deprecate `avifEncoder`'s `minQuantizer`, `maxQuantizer`, `minQuantizerAlpha`,\n  and `maxQuantizerAlpha` fields. `quality` and `qualityAlpha` should be used\n  instead. Deprecate `avifenc`'s `--min`, `--max`, `--minalpha` and `--maxalpha`\n  flags. `-q` or `--qcolor` and `--qalpha` should be used instead.\n* For dependencies, the deprecated way of setting AVIF_LOCAL_* to ON is\n  removed. Dependency options can now only be set to OFF/LOCAL/SYSTEM.\n* Change the default quality for alpha to be the same as the quality for color.\n\n## [1.1.1] - 2024-07-30\n\n### Changed since 1.1.0\n* In avif.h, change \"AVIF_API AVIF_NODISCARD\" back to \"AVIF_NODISCARD AVIF_API\"\n  to fix clang-cl and MSVC compilation errors in the shared library build on\n  Windows.\n* Fix -DAVIF_GTEST=SYSTEM, https://github.com/AOMediaCodec/libavif/issues/2258.\n* Fix infe_type and codec_config_type wrongly read as byte-aligned fields in the\n  experimental feature AVIF_ENABLE_EXPERIMENTAL_METAV1.\n* When building aom as a local dependency, runtime CPU detection\n  (`CONFIG_RUNTIME_CPU_DETECT`) is now always `ON`; in 1.1.0 it had been\n  disabled for non-native builds.\n* Fix CMake config shared library leaks\n  https://github.com/AOMediaCodec/libavif/issues/2264.\n* Fix clang-cl compilation.\n* Update gain map metadata to current ISO 21496-1 draft.\n* cmake: Only search for ASM_NASM language on x86_64 platforms.\n* Fix \"No known features for CXX compiler\" CMake error.\n* Fix aom link flags so that transitive library link flags are included when\n  aom is a static library\n  https://github.com/AOMediaCodec/libavif/issues/2274.\n* Fix out-of-order 'dimg' grid associations\n  https://github.com/AOMediaCodec/libavif/issues/2311.\n* Report files with an item used in multiple 'dimg' boxes with\n  AVIF_RESULT_NOT_IMPLEMENTED instead of AVIF_RESULT_INVALID_IMAGE_GRID.\n\n## [1.1.0] - 2024-07-11\n\n### Added since 1.0.0\n* Add experimental API for reading and writing gain maps in AVIF files.\n  If enabled at compile time, add `gainMap` field to `avifImage`,\n  add `qualityGainMap` field to `avifEncoder`, add `gainMapPresent`,\n  `enableDecodingGainMap`, `enableParsingGainMapMetadata` and\n  `ignoreColorAndAlpha` to `avifDecoder`.\n  Utility functions for working with gain maps are also added.\n  Gain maps allow readers that support them to display HDR images that look\n  good on both HDR and SDR displays.\n  This feature is highly experimental. The API might change or be removed\n  in the future. Files created now might not decode in a future version.\n  This feature is off by default and must be enabled with the\n  AVIF_ENABLE_EXPERIMENTAL_GAIN_MAP compilation flag.\n* Add experimental support for converting jpeg files with gain maps to AVIF\n  files with gain maps. Requires libxml2, and the AVIF_ENABLE_EXPERIMENTAL_GAIN_MAP\n  compilation flag.\n  Add a --qgain-map flag to control the gain map quality in avifenc.\n* Add the headerFormat member of new type avifHeaderFormat to avifEncoder.\n* Add experimental API for reading and writing \"mif3\"-branded AVIF files\n  behind the compilation flag AVIF_ENABLE_EXPERIMENTAL_METAV1.\n* Implement avifImageScale() fallback when libyuv is not available.\n* Partial import of libyuv to third_party/libyuv (new LICENSE).\n* Add avifenc flag suffixes \":update\" and \":u\". Quality-relative,\n  tiling-relative and codec-specific flags can now be positional, relative to\n  input files.\n* Add experimental support for layered AVIF encoding in avifenc.\n  Use the --layered flag to enable layered AVIF encoding.\n  Layered AVIF has multiple layers, which works like frame of animated AVIF,\n  and layers can be rendered in progressive manner on supported viewers\n  (e.g. Chrome 94 or newer).\n  Only aom supports layered AVIF encoding at the time of writing.\n  Add --scaling-mode flag to set scaling mode of each layer.\n  This part of AV1 encoder is not as thoroughly tested, so there are higher\n  possibility encoder may crash when given certain configuration or input.\n* Add imageSequenceTrackPresent flag to the avifDecoder struct.\n* avifImageScale() function was made part of the public ABI.\n* Add avif_cxx.h as a C++ header with basic functionality.\n* Add enum aliases AVIF_COLOR_PRIMARIES_SRGB, AVIF_COLOR_PRIMARIES_BT2100,\n  AVIF_COLOR_PRIMARIES_DCI_P3, AVIF_TRANSFER_CHARACTERISTICS_PQ.\n* Add avifResult enum entry AVIF_RESULT_INTERNAL_ERROR.\n* Require libyuv by default (but it can still be disabled with\n  -DAVIF_LIBYUV=OFF).\n* Add avifdec --icc flag to override the output color profile.\n* Add experimental API for reading and writing 16-bit AVIF files behind the\n  compilation flag AVIF_ENABLE_EXPERIMENTAL_SAMPLE_TRANSFORM.\n* Add AVIF_CHROMA_SAMPLE_POSITION_RESERVED to avifChromaSamplePosition enum.\n\n### Changed since 1.0.0\n* Update aom.cmd: v3.9.1\n* Update avm.cmd: research-v7.0.1\n* Update dav1d.cmd: 1.4.3\n* Update libgav1.cmd: v0.19.0\n* Update libjpeg.cmd: v3.0.3\n* Update libxml2.cmd: v2.12.7\n* Update libyuv.cmd: a6a2ec65\n* Update mp4box.sh: v2.4.0\n* Update rav1e.cmd: v0.7.1\n* Update svt.cmd/svt.sh: v2.1.1\n* Update zlibpng.cmd: zlib 1.3.1 and libpng 1.6.40\n* AVIF sequences encoded by libavif will now also have the \"avio\" brand when\n  there is at least one track made only of AV1 keyframes.\n* Fix SVT-AV1 codec interface which was not setting video range at encoding.\n* Any item ID being 0 in an \"iref\" box with version 0 or 1 is now treated as an\n  error instead of being ignored.\n* API calls now return AVIF_RESULT_OUT_OF_MEMORY instead of aborting on memory\n  allocation failure.\n* avifdec and avifenc: Change the default value of the --jobs option from 1 to\n  \"all\".\n* Update avifCropRectConvertCleanApertureBox() to the revised requirements in\n  ISO/IEC 23000-22:2019/Amd. 2:2021 Section 7.3.6.7.\n* AVIF files with an exif_tiff_header_offset pointing at another byte than the\n  first II or MM tag in the Exif metadata payload will now fail to be decoded.\n  Set decoder->ignoreExif to true to skip the issue and decode the image.\n* Fix memory errors reported in crbug.com/1501766, crbug.com/1501770, and\n  crbug.com/1504792 by [Fudan University](https://secsys.fudan.edu.cn/).\n* For codecs, AVIF_CODEC_* and AVIF_LOCAL_* are now merged into AVIF_CODEC_*\n  that can only take the values: OFF, LOCAL or SYSTEM.\n* For the gtest, jpeg, libsharpyuv, libxml2, libyuv and zlibpng dependencies,\n  AVIF_LOCAL_* is now replaced by flags AVIF_* that can take the values:\n  OFF, LOCAL or SYSTEM.\n* src/reformat.c: Allocate the threadData array directly.\n* AVIF_ENABLE_WERROR is set to OFF by default.\n* Fix wrong alpha plane deallocation when decoded tile pixel format does not\n  match reconstructed output image pixel format (b/320234262).\n* Fix identical chunk skipping optimization when writing animation data\n  (b/321189607).\n* Fix ID selection for artificial grid alpha item when decoding a grid of tiles\n  which each have an associated auxiliary alpha image item\n  (https://crbug.com/oss-fuzz/65657).\n* ext/libjpeg.cmd now pulls libjpeg-turbo instead of libjpeg and AVIF_JPEG=LOCAL\n  now expects the library dependency in ext/libjpeg-turbo/build.libavif.\n* Fix 'iloc' box parsing bugs that may have wrongly accepted, rejected or parsed\n  some files with rare values of offset_size, length_size, base_offset_size and\n  index_size.\n* 'infe' boxes with an item_type different from 'mime' and without a\n  null-terminated item_name are now considered invalid as per ISO/IEC 14496-12.\n\n## [1.0.4] - 2024-02-08\n\n### Changed\n* AVIF_ENABLE_WERROR is set to OFF by default.\n* Fix wrong alpha plane deallocation when decoded tile pixel format does not\n  match reconstructed output image pixel format (b/320234262).\n* Fix identical chunk skipping optimization when writing animation data\n  (b/321189607).\n* Fix ID selection for artificial grid alpha item when decoding a grid of tiles\n  which each have an associated auxiliary alpha image item\n  (https://crbug.com/oss-fuzz/65657).\n\n## [1.0.3] - 2023-12-03\n\n### Changed\n* Rewrite the fix for memory errors reported in crbug.com/1501770.\n* Fix memory errors reported in crbug.com/1504792 by [Fudan\n  University](https://secsys.fudan.edu.cn/).\n* src/reformat.c: Allocate the threadData array directly.\n\n## [1.0.2] - 2023-11-16\n\n### Changed\n* Update avifCropRectConvertCleanApertureBox() to the revised requirements in\n  ISO/IEC 23000-22:2019/Amd. 2:2021 Section 7.3.6.7.\n* Fix memory errors reported in crbug.com/1501766 and crbug.com/1501770 by\n  [Fudan University](https://secsys.fudan.edu.cn/).\n\n## [1.0.1] - 2023-08-29\n\n### Changed\n* gdk-pixbuf: Explicitly pass link directories\n* gdk-pixbuf: Fix build failure after imir.mode -> imir.axis rename\n\n## [1.0.0] - 2023-08-24\n\nWith the 1.0.0 release, the ABI will be more stable from now on. Please note\nthe allocation and initialization requirements for avifImage, avifDecoder,\navifEncoder, and avifRGBImage in the \"avif/avif.h\" header.\n\nList of incompatible ABI changes in this release:\n\n* The clli member was added to the avifImage struct.\n* The repetitionCount member was added to the avifEncoder and avifDecoder\n  structs.\n* The quality and qualityAlpha members were added to the avifEncoder struct.\n* Check that functions returning pointers do not return NULL before accessing\n  those pointers.\n* Check the return value of avifEncoderSetCodecSpecificOption().\n* The maxThreads member was added to the avifRGBImage struct.\n* Check the return value of avifRGBImageAllocatePixels(), avifRWDataRealloc(),\n  avifRWDataSet(), avifImageSetProfileICC(), avifImageSetMetadataExif() and\n  avifImageSetMetadataXMP().\n* The meaning of the keyframeInterval member of avifEncoder struct has changed\n  slightly. When set to a value of \"n\",\n    * Before: It forces a keyframe on every nth frame.\n    * After: Any set of \"n\" consecutive frame will have at least one keyframe\n      (every nth frame may or may not be a keyframe).\n\n### Added\n* Add STATIC library target avif_internal to allow tests to access functions\n  from internal.h when BUILD_SHARED_LIBS is ON.\n* Add clli metadata read and write support\n* Add repetitionCount member to avifEncoder and avifDecoder structs to specify\n  the number of repetitions for animated image sequences.\n* Add quality and qualityAlpha to avifEncoder. Note: minQuantizer,\n  maxQuantizer, minQuantizerAlpha, and maxQuantizerAlpha are deprecated. Code\n  should be updated to set quality (and qualityAlpha if applicable) and leave\n  minQuantizer, maxQuantizer, minQuantizerAlpha, and maxQuantizerAlpha\n  initialized to the default values.\n* The --target-size flag in avifenc was added to adapt the quality so that the\n  output file size is as close to the given number of bytes as possible.\n* Add the public API function avifImageIsOpaque() in avif.h.\n* Add the public API functions avifImagePlane(), avifImagePlaneRowBytes(),\n  avifImagePlaneWidth(), and avifImagePlaneHeight() in avif.h.\n* Add experimental API for progressive AVIF encoding.\n* Add API for multi-threaded YUV to RGB color conversion.\n* Add experimental support for AV2 behind the compilation flag AVIF_CODEC_AVM.\n  AVIF_CODEC_CHOICE_AVM is now part of avifCodecChoice.\n* Add experimental YCgCo-R support behind the compilation flag\n  AVIF_ENABLE_EXPERIMENTAL_YCGCO_R.\n* Allow lossless 4:0:0 on grayscale input.\n* Add avifenc --no-overwrite flag to avoid overwriting output file.\n* Add avifenc --clli flag to set clli.\n* Add support for all transfer functions when using libsharpyuv.\n\n### Changed\n* Enable the libaom AV1E_SET_SKIP_POSTPROC_FILTERING codec control by default.\n* Use the constant rate factor (CRF) instead of the constant quantization\n  parameter (CQP) rate control mode with the SVT-AV1 encoder.\n* Exif and XMP metadata is exported to PNG and JPEG files by default,\n  except XMP payloads larger than 65502 bytes in JPEG.\n* The --grid flag in avifenc can be used for images that are not evenly divided\n  into cells.\n* Apps must be built with libpng version 1.6.32 or above.\n* Change the encoder to write the boxes within the \"stbl\" box in the order of\n  stsd, stts, stsc, stsz, stco, stss.\n* avifImageCopy() no longer accepts source U and V channels to be NULL for\n  non-4:0:0 input if Y is not NULL and if AVIF_PLANES_YUV is specified.\n* The default values of the maxQuantizer and maxQuantizerAlpha members of\n  avifEncoder changed from AVIF_QUANTIZER_LOSSLESS (0) to\n  AVIF_QUANTIZER_WORST_QUALITY (63). The behavior changed if minQuantizer and\n  maxQuantizer are left initialized to the default values. Code should be\n  updated to set the quality member. Similarly for the alpha quantizers and\n  qualityAlpha.\n* avifImageRGBToYUV() and avifImageYUVToRGB() handle avifImage bit depths 8, 10,\n  12 and now also 16. Files read by apps/shared/ can output 16-bit avifImage\n  instances.\n* Update aom.cmd: v3.6.1\n* Update dav1d.cmd: 1.2.1\n* Update libsharpyuv: 0.4.0\n* Update rav1e.cmd: v0.6.6\n* Update svt.cmd/svt.sh: v1.6.0\n* Update zlibpng.cmd: zlib 1.2.13 and libpng 1.6.39\n* avifImageCreate(), avifImageCreateEmpty(), avifEncoderCreate() and other\n  internal functions now return NULL if a memory allocation failed.\n* avifEncoderSetCodecSpecificOption() now returns avifResult instead of void to\n  report memory allocation failures.\n* At decoding, avifIOStats now returns the same values as at encoding.\n* avifRGBImageAllocatePixels(), avifRWDataRealloc(), avifRWDataSet(),\n  avifImageSetProfileICC(), avifImageSetMetadataExif() and\n  avifImageSetMetadataXMP() now return avifResult instead of void to report\n  memory allocation failures.\n* avifReadImage(), avifJPEGRead() and avifPNGRead() now remove the trailing zero\n  byte from read XMP chunks, if any. See avifImageFixXMP().\n* Force keyframe for alpha if color is a keyframe.\n* Write primaries and transfer characteritics info in decoded PNG.\n* Add support for reading PNG gAMA, cHRM and sRGB chunks.\n* The 'mode' member of the avifImageMirror struct was renamed 'axis'.\n* Change the type of the 'depth' parameter from int to uint32_t in\n  avifFullToLimitedY(), avifFullToLimitedUV(), avifLimitedToFullY(), and\n  avifLimitedToFullUV().\n\n## [0.11.1] - 2022-10-19\n\n### Changed\n* avifincrtest_helpers: Cast 64-bit offset to size_t\n* avifmetadatatest: don't include avif/internal.h\n* avifrgbtoyuvtest: skip if no libsharpyuv\n* Disable tests that may fail if the codec is not aom (#1176)\n\n## [0.11.0] - 2022-10-12\n\nThere are incompatible ABI changes in this release. The alphaRange member was\nremoved from the avifImage struct. The chromaDownsampling and avoidLibYUV\nmembers were added to the avifRGBImage struct. The imageDimensionLimit member\nwas added to the avifDecoder struct. avifImageCopy() and\navifImageAllocatePlanes() signatures changed. It is necessary to recompile your\ncode. Also check the return values of avifImageCopy() and\navifImageAllocatePlanes().\n\n### Added\n* Add man pages for avifenc and avifdec\n* Add the avifChannelIndex type alias for enum avifChannelIndex\n* Add avifChromaDownsampling enum\n* Add chromaDownsampling field to avifRGBImage struct\n* Add support for AVIF_RGB_FORMAT_RGB_565\n* Add imageDimensionLimit field to avifDecoder struct\n* Add autoTiling field to avifEncoder struct\n* Add new avifResult codes AVIF_RESULT_CANNOT_CHANGE_SETTING and\n  AVIF_RESULT_INCOMPATIBLE_IMAGE\n* Add new enum constants AVIF_PIXEL_FORMAT_COUNT and AVIF_RGB_FORMAT_COUNT\n* avifdec: Add --dimension-limit, which specifies the image dimension limit\n  (width or height) that should be tolerated\n* avifenc: Add --sharpyuv, which enables \"sharp\" RGB to YUV420 conversion, which\n  reduces artifacts caused by 420 chroma downsampling. Needs libsharpyuv (part\n  of the libwebp repository) at compile time.\n* avifenc: Add --ignore-exif and --ignore-xmp flags.\n* avifenc: Add --autotiling, which sets --tilerowslog2 and --tilecolslog2\n  automatically.\n* avifenc: Input Exif orientation is converted to irot/imir by default.\n\n### Changed\n* Fix memory leaks of metadata on avifenc exit\n* Update the handling of 'lsel' and progressive decoding to AVIF spec v1.1.0\n* Treat an absent lsel and layer_id == 0xFFFF equivalently for backward\n  compatibility with earlier drafts of AVIF spec v1.1.0\n* Set libavif's own default value of cfg.rc_end_usage for libaom\n* Fix https://github.com/AOMediaCodec/libavif/issues/953\n* Set the libaom-specific option -a tune=ssim by default\n* Bump cmake_minimum_required from 3.5 to 3.13\n* Fix https://crbug.com/oss-fuzz/48135\n* Use several new libyuv functions in reformat_libyuv.c\n* Fix SVT-AV1's issue 1957 related to uninitialized variables crashing the\n  encoder\n* Fix https://github.com/AOMediaCodec/libavif/issues/787\n* Update aom.cmd: v3.5.0\n* Update rav1e.cmd: v0.5.1\n* Update svt.cmd/svt.sh: v1.2.1\n* Update libgav1.cmd: v0.18.0\n* Update libyuv.cmd: f9fda6e7 (version 1844)\n* avifImageCopy() and avifImageAllocatePlanes() now return avifResult instead of\n  void to report invalid parameters or memory allocation failures.\n* avifImageRGBToYUV() now uses libyuv fast paths by default. It may slightly\n  change conversion results. The old behavior can be restored by setting\n  avifRGBImage::chromaDownsampling to AVIF_CHROMA_DOWNSAMPLING_BEST_QUALITY\n  and avifRGBImage::avoidLibYUV to AVIF_TRUE.\n* avifRGBImage::chromaUpsampling now only applies to conversions that need\n  upsampling chroma from 4:2:0 or 4:2:2 and has no impact on the use of libyuv.\n  Set avifRGBImage::avoidLibYUV accordingly to control the use of libyuv.\n* avifenc: Set the YUV format to 4:0:0 for grayscale PNGs\n* Support updating encoder settings and codec-specific options during encoding\n* Disable AVIF_STRICT_CLAP_VALID and AVIF_STRICT_PIXI_REQUIRED in the JNI\n  wrapper\n* avifdec: Return proper exit code in \"info\" mode\n* In avifenc and avifdec, treat all arguments that start with '-' as options\n* Fix https://github.com/AOMediaCodec/libavif/issues/1086\n* Exif and XMP metadata is imported from PNG and JPEG files.\n* avifImageSetMetadataExif() parses the Exif metadata and converts any Exif\n  orientation found into transformFlags, irot and imir values.\n* Write 'auxi' box for animated images with alpha channel\n* Write 'auxv' as handler_type for alpha channel track\n* Use PNG_COLOR_TYPE_GRAY for 8-bit grayscale output\n* Replace repeated subtraction by modulo in calcGCD (fix b/246649620)\n* Change avifImageCreate to take uint32_t instead of int parameters\n* When writing an image sequence, check if it's safe to cast width and height to\n  uint16_t\n* Allow clamped grid cells in avifEncoderAddImageGrid()\n\n### Removed\n* alphaRange field was removed from the avifImage struct. It it presumed that\n  alpha plane is always full range.\n* The avifCodecConfigurationBox struct becomes a private type for libavif\n  internal use\n\n## [0.10.1] - 2022-04-11\n\n### Changed\n* tests/docker/build.sh: Build SVT-AV1 using cmake and ninja directly\n* Fix a Visual Studio 2017 compiler warning in src\\reformat.c: warning C4204:\n  nonstandard extension used: non-constant aggregate initializer\n* Fix the help message of avifdec: --index takes a value\n\n## [0.10.0] - 2022-04-06\n\nThere is an incompatible ABI change in this release. New members were added to\nthe avifDecoder and avifRGBImage structs. It is necessary to recompile your\ncode.\n\n### Added\n* Support F16 Half Float conversion in avifRGBImage: new isFloat member\n* Incremental decoding of AVIF grid tiles: new allowIncremental member in\n  avifDecoder and new avifDecoderDecodedRowCount() function\n* Support parsing of version 3 of ItemInfoEntry\n* Add new avifResult code AVIF_RESULT_OUT_OF_MEMORY\n* Document the \"[Strict]\" prefix in error strings\n* Document that SVT-AV1 doesn't support lossless yet\n* CI: Add CIFuzz integration\n* Add Docker build CI pipeline\n* Add SVT-AV1 to CI and build scripts\n* ci.yml: Build examples and apps\n\n### Changed\n* Print the item type in the diagnostic messages for missing mandatory av1C or\n  pixi property\n* Update aom.cmd: v3.3.0\n* Update dav1d.cmd: 1.0.0\n* Update libgav1.cmd: 0.17.0\n* Update rav1e.cmd: 0.5.0\n* Update svt.cmd/svt.sh: v0.9.1\n* Update zlibpng.cmd: zlib v1.2.12\n* findrav1e: add LDFLAGS to LIBRARIES\n* rav1e: add bcrypt.lib to list of extra libs\n* Fix y4m read/write for images of non-standard dimensions\n* Fix y4mRead() and y4mWrite() for 4:0:0\n* Fix compilation with Clang 13 and 14\n* Remove the obsolete script fuzz.sh\n* Support local android builds for libgav1\n* Add Android JNI bindings\n* Delay failures of AV1 codecs not existing to frame decoding, to allow libavif\n  to perform AVIF parsing without any AV1 codecs\n* Change encoder speed in gdk-pixbuf plug-in\n* Fix compilation with 1755 <= LIBYUV_VERSION < 1774\n* Remove JSON-based tests (as they are unreliable), along with associated\n  helper code (cJSON, compare)\n* CMakeLists.txt: Move codec enabled message after check passed\n* Fix alpha copy in aomCodecEncodeImage()\n* Support SVT-AV1 v0.9.0 or later\n* Call svt_av1_get_version() for SVT-AV1 v0.9.0 or later\n* Handle avifArrayCreate() failures\n* Only consider a frame index to be a keyframe if all tiles/planes are sync\n  frames\n* Move checks to avifAreGridDimensionsValid()\n* avifArrayPop() should zero the popped element\n* avifDecoderReset() should not return AVIF_FALSE\n* Handle avifDecoderDataCreateTile() failures\n* Fix endian dependent parameters to avifRWStreamWrite\n* Mark the input images of an image grid as hidden\n* Write ccst box in Sample Entry for animated images\n* Add iso8 to compatible_brands for animated images\n* Compare with snapshot of AOM_EXT_PART_ABI_VERSION\n* Handle the new AOM_IMG_FMT_NV12 enum conditionally in a switch statement in\n  aomCodecGetNextImage()\n* Fix avifpng.c for libpng 1.4\n* Fix -Wformat / -Wformat-non-iso on MinGW UCRT\n* Replace some memcpy calls with struct assignments\n* Remove unnecessary memcpy() calls in src/utils.c\n* Split CMakeLists.txt into tests/CMakeLists.txt\n* Use bilinear chroma upsampling in libyuv when possible\n* Call libyuv functions to convert 10bpc YUV to 8bpc RGB\n* Prepare avif example for non-aborting avifAlloc()\n* Handle the tileRowsLog2 and tileColsLog2 members of avifEncoder correctly for\n  SVT-AV1.\n\n## [0.9.3] - 2021-10-20\n\n### Added\n* Support for progressive AVIFs and operating point selection\n* Add automatic tile scaling to the item's ispe or track's dims\n* Add diagnostic messages for AV1 decode failures\n* avifdec: Add PNG compression level arg\n* Make image size limit configurable, expose to avifdec\n* Add the AVIF_STRICT_ALPHA_ISPE_REQUIRED flag\n\n### Changed\n* Mandate ispe and disallow zero width or height (#640).\n* Re-map libavif speed 7-10 to libaom speed 7-9 (#682)\n*  Refer to https://aomedia-review.googlesource.com/c/aom/+/140624\n*  If you were using libaom with the following avif speed setting:\n*   - speed 0-6: no change is needed\n*   - speed 7:   change to speed 6 for the same results\n*   - speed 8-9: re-test and re-adjust speed according to your app needs\n* Update aom.cmd: v3.2.0\n* Update dav1d.cmd: 0.9.2\n* Update svt-av1.cmd: v0.9.0\n* Pass TestCase's minQuantizer, maxQuantizer, speed to encoder.\n* Regenerate tests.json\n* Disable JSON-based tests for now, the metrics are inconsistent/unreliable\n* Set diagnostic message for aom_codec_set_option()\n* Re-map libavif-libaom speed settings (#682)\n* Bump of version in CMakeLists.txt was forgotten\n* avifdec: Better message for unsupported file extension\n* Do not copy input image when encoding with libaom unless width or height is 1\n* Fix the comment for AVIF_STRICT_PIXI_REQUIRED\n* Update libavif.pc.cmake (#692)\n* In 32-bit builds set dav1d's frame_size_limit setting to 8192*8192\n* Allocate alpha alongside YUV (if necessary) during y4m decode to avoid incorrect alphaRowBytes math\n* Change avif_decode_fuzzer to be more like Chrome\n* Update codec_dav1d.c for the new threading model\n* Generalized ipco property deduplication\n* Rename avifParseMoovBox to avifParseMovieBox for consistency\n* Simplify idat storage for avifMeta structure (#756)\n* Fix oss-fuzz coverage build failure of dav1d\n* Redesign AVIF_DECODER_SOURCE_AUTO to honor the FileTypeBox's major brand\n* Use \"C420\" as default Y4M color space parameter\n\n## [0.9.2] - 2021-06-23\n\n### Added\n* avifenc, avifdec: Allow \"-j all\" to automatically use all of the cores on the machine (#670)\n\n### Changed\n* Refactor imir implementation to match HEIF Draft Amendment 2 (#665)\n* Merge avifCodec's open call with its getNextImage call to avoid codec init during parse, and simplify the codec API (#637)\n* Update aom.cmd: v3.1.1 (#674)\n* Update svt-av1: v0.8.7 (#627)\n* Make tests/compare.h and tests/testcase.h C++ safe (#678)\n* Print width and height as %ux%u instead of %u/%u (#676)\n* Allocate codec->internal->svt_config statically (#675)\n* Cleanup related to avifDiagnosticsClearError() (#673)\n* Cleanup avifutil.h comment to match libavif style (#671)\n* Fix the clang -Wunused-macros warning (#672)\n* Check for int32_t overflows in 'clap' code (#663)\n* Have avifdec print chroma sample position for 420 (#666)\n* Enable CMake configs in VCPKG mode (#659)\n* Avoid multiplying widthN and heightN by 2 (#662)\n* Correct AVIF_PIXEL_FORMAT_NONE handling logic (#654)\n* Cast extent->offset (a uint64_t) to size_t safely (#660)\n* Disallow negative clap width or height (#656)\n* Check for int32_t cast and unsigned add overflows (#655)\n* Some straightforward changes to clapFraction code (#653)\n* Fix box name of avifParseChunkOffsetBox (#652)\n* No need to pass diag to functions that have 'data' (#651)\n* Simplify the assertion in avifROStreamStart() (#650)\n* Don't clear error in avifEncoderSetCodecSpecificOp (#648)\n* Simplify avifCodecConfigurationBoxGetFormat (#646)\n* Print the fraction in \"not an integer\" messages (#641)\n* Fix a typo in the diagnostic context for 'ipco' (#644)\n* Remove const from non-pointer function parameters (#634)\n* Declare the param of avifDumpDiagnostics as const (#633)\n* Adjust gdk-pixbuf loader for new API change (#668)\n* Fix gdk-pixbuf loader install path (#615)\n\n## [0.9.1] - 2021-05-19\n\n### Added\n* Added strict mode/flags (enabled by default): `AVIF_STRICT_PIXI_REQUIRED`, `AVIF_STRICT_CLAP_VALID`\n* avifdec: Added `--no-strict` to disable all strict flags\n* avifdec: Added `-r` (`--raw-color`), which avoids multiplying against AVIF alpha channel before packing into non-alpha formats (JPEG)\n* avifenc: Recognize the Y4M format string \"C420mpeg2\"\n* avifenc: Add `--crop` convenient alternative arg to the difficult-to-use `--clap` arg\n* avifenc: New default for `--yuv`: `\"auto\"`, which will use a source JPEG's internal YUV format instead of YUV444, if detected\n  * Uses: Prevent colorspace conversion when reading from JPEG if possible (tongyuantongyu)\n* avifenc/avifdec: Add helpful values/calculations when dumping clap box\n* Added avifDiagnostics, which allows for a detailed, freeform error string upon decode or encode error\n* Create helper avifCropRect struct and methods for helping to manipulate/populate/validate avifCleanApertureBox\n* Added ability to set codec-specific options for color or alpha only\n* Support for libaom's ALL_INTRA mode (if available)\n* Create avifDecoder.imageCountLimit as a sanity check against malformed files\n* SVT: Image sequence encoding support (tongyuantongyu)\n* Added rav1e to AppVeyor builds\n\n### Changed\n* avifenc/avifdec: Link AOM_LIBRARIES and use CXX if vmaf is present (1480c1)\n* Ensure that an AVIF has a ftyp box, and based on ftyp, has other appropriate toplevel boxes present as well\n* Avoid linking against libyuv if it is too old / incompatible\n* Always require a primary item when decoding items\n* Add some strictness around ipma box parsing (version/flags tuples must be unique across ipma boxes in a file)\n* Fix alpha grids by properly writing alpha grid metadata payload\n* A HandlerBox (hdlr) of type 'pict' must be the first box within the MetaBox (meta)\n* Add some typedefs for various flag decls in avif.h to self-document which flags should be used in which function arguments\n* When encoding single-frame images using libaom, clean up the encoder immediately after encoding the frame to cut down on resources high watermarks\n* Fail on reformat Identity (MC=0) with subsampling (not using YUV444)\n* Warn if alpha is limited range (deprecated)\n* Validate the first_chunk fields in the stsc box\n* In libaom all intra mode, set cq-level for user\n* Check the return values of some aom_codec_ calls and add diagnostics output (wantehchang)\n* Use aom_codec_set_option() if available (allows for future compat with libaom 3.0+ advanced features)\n* rav1e: Use cargo cinstall in local builds to ensure consistency in target output, as cbuild no longer builds directly into target/release\n* Tweaks to compiler flags (analyze related)\n* Use libyuv BT.709 & 2020 full range YuvConstants (wantehchang)\n* Multiply color with alpha for opaque RGB format during conversion (see #520)\n* Switch docker to ubuntu 20.04, fix tzdata install (paskal)\n* Added an \"Understanding maxThreads\" explanatory comment block in avif.h\n* Minor fixes to support AVIF_CODEC_AOM_ENCODE\n* Various minor code/comments cleanup\n* CI tweaks, macOS build, and caching / speed increases (EwoutH)\n* Update aom.cmd: v3.1.0\n* Update dav1d.cmd: 0.9.0\n* Update libgav1: v0.16.3\n* Update libyuv.cmd: 2f0cbb9\n\n## [0.9.0] - 2021-02-22\n\n### Added\n* Image grid encoding\n* Premultiplied alpha support (tongyuantongyu)\n* avifenc: Image grid encoding (`-g`, `--grid`)\n* avifenc: Harvest framerate from y4m headers as the \"default\", if present\n* avifenc: Recognize the Y4M format string \"C420mpeg2\" (wantehchang)\n* Basic deduplication when writing mdat chunks\n\n### Changed\n* avifenc: Adjusted min/max/speed/fps defaults\n* Better handling for export headers (tongyuantongyu)\n* Use procedure specified in H.273 to quantize YUV (tongyuantongyu)\n* Impose a maximum of 4096 bytes on searchSampleSize (wantehchang, fixes oss-fuzz perf issue / timeout)\n* Update aom.cmd: v2.0.2\n* Update dav1d.cmd: 0.8.2\n* Update libgav1.cmd: 4a89dc3 / lts_2020_09_23\n* Update rav1e.cmd: 0.4\n* Update svt.cmd/svt.sh: v0.8.6\n* Force libjpeg to output in RGB Colorspace (bugfix)\n* Minor other compilation/linking/formatting/comment fixes\n\n## [0.8.4] - 2020-11-23\n\n### Added\n* YCgCo support (full-range only, wantehchang)\n* Expose `maxThreads` to `avifDecoder`, add `--jobs` to `avifdec`\n* Add `avifDecoderNthImageMaxExtent()` streaming helper function to determine future reads\n* Create AVIF_VERSION_DEVEL, which allows for in-development changes to be detected during the build\n* New avifResult values: `AVIF_RESULT_INVALID_ARGUMENT`, `AVIF_RESULT_NOT_IMPLEMENTED`\n\n### Changed\n* Read/write one of each type of colr box, as allowed in HEIF 6.5.5.1 Amendment 3 (also now supported in libheif)\n* avifenc/avifdec: Now guesses input file format by header inspection instead of extension\n* avifenc: Fix y4m/stdin corner cases when trying to detect a \"single image\" encode\n* Add some protections against improperly using AVIF_ADD_IMAGE_FLAG_SINGLE\n* imir transformation: Disambiguate all usages of \"vertical\" and \"horizontal\" across comments and tooling\n* Print MC value when warning resetting to defaults (wantehchang)\n* Fix grid image rows/cols parsing on invalid data\n* Allow override of HAVE_POISON_SYSTEM_DIRECTORIES_WARNING (bnason-nf)\n* Lots of comments clarifications in avif.h\n\n## [0.8.3] - 2020-11-09\n\n### Added\n* SVT-AV1 encode support (jonsneyers)\n* Basic libyuv support (8bpc only, see usage/limitations in avif.h)\n* Refactor avifChromaUpsampling for ease in high level decision making and adding more filters in the future (minor, benign breaking change due to enum reordering)\n* New CMake options: `AVIF_CODEC_AOM_DECODE`, `AVIF_CODEC_AOM_ENCODE`\n* New examples in `examples/` dir (encode, decode_file, decode_memory, decode_streaming) to replace stale, not-compiled examples in README\n\n### Changed\n* avifenc: Explicitly signal SRGB CP/TC if the source image and user don't specify, and no ICC profile is present\n* Set g_lag_in_frames to 1 if encoding single image (encode memory optimization, wantehchang)\n* Early-out with OK in avifParse() if the expected top-level boxes were already parsed (streaming optimization)\n* Check increading item_ID and ipmaSeen in ipma box (wantehchang)\n* Fail gracefully in avifEncoderAddImage() if libavif wasn't compiled with encoding support\n* Add size_t casts to fix MSVC x86 compiler warnings (wantehchang)\n* Link with {ZLIB_LIBRARY} after ${PNG_LIBRARY} (wantehchang)\n* Fix a crash in avifJPEGRead() on fopen() failure (wantehchang)\n* No need to include `${ZLIB_INCLUDE_DIR}` (wantehchang)\n* Put the value of `ZLIB_INCLUDE_DIR` in the cache (wantehchang)\n* Don't set image->alphaRange to yuvRange (wantehchang)\n* Expose chroma sample position in decoded images (wantehchang)\n* avifDecoderNthImage: tighten decoder flush (wantehchang)\n* Cleanup avifIOReadFunc comments for clarity (wantehchang)\n* Minor code cleanup\n* Minor CMake cleanup\n\n### Removed\n\n* Remove disableGridImages from avifDecoder (wantehchang)\n\n## [0.8.2] - 2020-10-14\n### Added\n* `avifIO` reader API: allowing for parsing / image decoding without having the entire AVIF payload yet\n* Codec-specific options plumbing for advanced encoding settings\n* Add libaom codec-specific options (wantehchang)\n* avifenc: Allow endusers to ignore an AVIF's ICC profile during conversion (`--ignore-icc`)\n* avifenc: Allow the setting/overriding of XMP, Exif, and ICC profiles\n* Add the `disableGridImages` setting to `avifDecoder`\n* Add AVIF_FMT_ZU to fix compiling with non-standard/old compilers\n* Add `AVIF_ENABLE_WERROR` (ON by default)\n* Add `AVIF_ENABLE_COVERAGE` for basic llvm coverage report generation\n\n### Changed\n* Support multiple extents in an ItemLocationBox\n* Store all alpha payloads before color payloads in mdat\n* Perform 0.5 UV bias with integers, as 128/512/2048 aren't exactly 0.5, but are expected to behave as such\n* Avoid libpng's complaints about specific ICC profiles\n* Disable receiving one-frame-per-layer when decoding scalable AVIFs with aom and dav1d\n* Fix incorrect 8-to-16 monochrome YUV conversion\n* Set max image size to 16384 * 16384\n* Remove range and sample position from avifImageStealPlanes()\n* Ensure only one of each mandatory-unique box in a meta box exists\n* Ensure each item ID is cited once in an iloc box\n* Sanity check merged extents item size against the file size\n* Various image grid bugfixes\n* Error out with AVIF_RESULT_REFORMAT_FAILED if request uses an unsupported MC\n* Fix memory leak in avifenc when encoding image sequences\n* Move oss-fuzz fuzzer implementation into `tests/oss-fuzz`\n* avifdec: actually propagate the commandline codecChoice to the avifDecoder\n* Fix an infinite loop in codec_dav1d on a carefully-malformed AV1 payload\n* Fix a few issues with warnings in gcc/clang\n* Various comments tweaks\n\n## [0.8.1] - 2020-08-05\n\n### Added\n* Add `ignoreAlpha` field to avifRGBImage (linkmauve)\n* Save support in gdk-pixbuf component (novomesk)\n\n### Changed\n* Only ever create one iref box, filled with multiple cdsc boxes (#247)\n* Fix incorrect 16-to-8 monochrome YUV conversion\n* Make decoding optional in CMake, like encoding is\n* Include avif INTERFACE_INCLUDE_DIRECTORIES first (cryptomilk)\n* Set C standard to C99, adjust flags for dav1d (1480c1)\n* Minor cleanup/fixes in reformat.c (wantehchang)\n* Fix a crash in the gdk-pixbuf loader, removed unnecessary asserts (novomesk)\n\n## [0.8.0] - 2020-07-14\n\n### Added\n* Monochrome (YUV400) support **\n  * All encoding/decoding and internal memory savings are done/functional\n  * libaom has a bug in chroma_check() which crashes when encoding monochrome, to be fixed in a future (>v2.0.0) version\n  * rav1e didn't implement CS400 until rav1e v0.4.0\n  * libavif safely falls back to YUV420 when these earlier codec versions are detected\n    * NOTE: If you want to do heavy monochrome testing, wait for newer versions to libaom/rav1e!\n* Image sequence encoding support\n  * Required medium-sized refactors in the codec layers\n  * Image sequences (tracks) now fully support all metadata properly (Exif/XMP/transforms)\n  * avifenc can now encode a series of same-sized images with a consistent framerate, or each with their own custom duration\n* Bilinear upsampling support\n* avifenc: Add --ignore-icc, which avoids embedding the ICC profile found in the source image\n* avifdec: Add --info, which attempts to decode all frames and display their basic info (merge of avifdump)\n* avifenc: add --tilerowslog2 and --tilecolslog2 (wantehchang)\n* Added `contrib` dir for any unofficially supported code contributions (e.g. gdk-pixbuf)\n\n### Changed\n* CICP Refactor (breaking change!)\n  * Remove most references to \"NCLX\", as it is mostly an implementation detail, and the values are really from MPEG-CICP\n  * Eliminate avifProfileFormat: having an ICC profile is not mutually exclusive with signaling CICP\n  * CICP is now always available in an avifImage, set to unspecified by default\n  * Added --cicp as an alias for --nclx (semi-deprecated)\n  * Setting CICP via avifenc no longer overrides ICC profiles, they co-exist\n  * Simplified avifenc argument parsing / warnings logic\n  * avifenc/avifdec/avifdump now all display CICP when dumping AVIF information\n  * nclx colr box contents are guaranteed to override AV1 bitstream CICP (as MIAF standard specifies)\n  * Added comments explaining various decisions and citing standards\n  * Removed ICC inspection code regarding chroma-derived mtxCoeffs; this was overdesigned. Now just honor the assoc. colorPrimaries enum\n  * Reworked all examples in the README to reflect the new state of things, and clean out some cruft\n  * Harvest CICP from AV1 bitstream as a fallback in avifDecoderParse() if nclx box is absent\n* All data other than actual pixel data should be available and valid after a call to avifDecoderParse()\n* Refactor avifDecoder internal structures to properly handle meta boxes in trak boxes (see avifMeta)\n* Update libaom.cmd to point at the v2.0.0 tag\n* Update dav1d.cmd to point at the 0.7.1 tag\n* Re-enable cpu-used=7+ in codec_aom when libaom major version > 1\n* Memory allocation failures now cause libavif to abort the process (rather than undefined behavior)\n* Fix to maintain alpha range when decoding an image grid with alpha\n* Improvements to avifyuv to show drift when yuv and rgb depths differ\n* Remove any references to (incorrect) \"av01\" brand (wantehchang)\n* Set up libaom to use reduced_still_picture_header (wantehchang)\n* Use libaom cpu_used 6 in \"good quality\" usage mode (wantehchang)\n* Update avifBitsReadUleb128 with latest dav1d code (wantehchang)\n* Set encoder chroma sample position (wantehchang)\n\n## [0.7.3] - 2020-05-04\n### Added\n- avifenc: Lossless (--lossless, -l) mode, which sets new defaults and warns when anything would cause the AVIF to not be lossless\n\n### Changed\n- Minor cleanup for -Wclobbered warnings\n- Minor fixes to README and code (fallout from enum rework)\n- Protect against oversized (out of bounds) samples in avif sample tables\n- Optimization: avoid AV1 sample copying when feeding data to dav1d\n\n## [0.7.2] - 2020-04-24\n### Added\n- Recognize extensions with capital letters / capslock\n- Proper support for AVIF_NCLX_MATRIX_COEFFICIENTS_IDENTITY\n\n### Changed\n- Large nclx enum refactor (breaking change), reworking all 3 enums to better match AV1 codec enums\n- Fixes to 'essential' item properties (marking av1C as essential, ignoring any items containing unsupported essential props)\n- avifenc - Allow --nclx to override embedded ICC profiles (with a warning), instead of --nclx being ignored\n- avifenc - Choose high-quality-but-lossy QP defaults, and a default speed of 8\n- avifdump - Fix format specifiers for 32bit\n- Now prioritizing libaom over rav1e when both are present\n- Remove `-Wclobbered` dodging (volatile) and instead just disable the warning in avifpng/avifjpeg\n- avifyuv: extra testing modes\n- Cleanup to avifCodecVersions()\n- Reorganize iccjpeg code back into its own files for licensing conveniences\n\n## [0.7.1] - 2020-04-16\n### Changed\n- avifenc: Set nclx/range values in avifImage earlier so proper YUV coefficients are used when converting JPEG/PNG\n\n## [0.7.0] - 2020-04-16\n### Added\n- avifenc and avifdec JPEG support\n- Docker test script to build avifenc + deps in a shared libs (distro-like) env\n- Added simple `avifdump` tool for aiding in AVIF debugging\n- Added some comments in `avif.h` to clarify `avifDecoderSetSource()` usage\n\n### Changed\n- avifRange cleanup/refactor (breaking change)\n- avifenc now has `-r` to set YUV range (when using JPEG/PNG), `--nclx` now takes 3 arguments as a result\n\n## [0.6.4] - 2020-04-14\n### Added\n- Added `avifDecoderNthImageTiming()` for querying frame timing without needing to decode the frame\n- Added some comments explaining `avifDecoderSetSource()`\n\n### Changed\n- Fix clang warning (switch clamp to min)\n- Fix a few clang analyzer issues\n- Avoid incorrect YUV range cast\n- Call dav1d_data_unref in dav1dCodecDestroyInternal (wantehchang)\n- Declare some avifSampleTable * pointers as const (wantehchang)\n- Update to cJSON v1.7.13 (wantehchang)\n- Minor code cleanup\n\n## [0.6.3] - 2020-03-30\n### Changed\n- Avoid throwing away const unnecessarily in `avifROStreamReadString()`\n- Re-enable a bunch of clang warnings\n- Set dav1dSettings.frame_size_limit to avoid OOM (wantehchang)\n- Refactor write.c to use a similar Data/Item design as read.c\n- YUV to RGB optimizations\n\n## [0.6.2] - 2020-03-11\n### Changed\n- Fix 16bpc PNG output\n- Compile fixes to avoid -Wclobbered in PNG code\n- GitHub automatic deployment from AppVeyor (EwoutH)\n\n## [0.6.1] - 2020-03-11\n### Added\n- PNG support for avifenc/avifdec\n\n### Changed\n- Fixed Clang10 build warning\n- Fix SOVERSION in cmake (cryptomilk)\n- Minor tweaks to avifBool usage (wantehchang)\n\n## [0.6.0] - 2020-03-09\n### Added\n- `avifRGBImage` structure and associated routines (BREAKING CHANGE)\n- avifImage alphaRange support\n- Support pasp, clap, irot, imir metadata for encode/decode\n\n### Changed\n- Large RGB conversion refactor (BREAKING CHANGE), see README for new examples\n- Minor fixes to make Clang 10 happy\n- pkg-config fixes\n- Lots of minor cleanup in code/CMake (wantehchang)\n- Fix to NCLX color profile plumbing (ledyba-z)\n- Cleanup unnecessary avifBool ternary expressions\n- Update default dav1d version to 0.6.0\n- Update default rav1e version to v0.3.1\n\n## [0.5.7] - 2020-03-03\n### Added\n- libgav1 decode codec support. (wantehchang @Google)\n- Expose codec selection to avifdec/avifenc, speed to avifenc\n- Image grid support (Summer_in_Tomsk_720p_5x4_grid)\n- `minQuantizerAlpha`/`maxQuantizerAlpha` support in avifEncoder, avifenc\n- 444alpha support in y4m layer (avifenc, avifdec)\n- pkg-config support (cryptomilk)\n- Proper support of NCLX matrix coefficients enum (link-u)\n\n### Changed\n- AppVeyor builds now compile with dav1d (EwoutH)\n- Lots of minor CMake/code cleanup (wantehchang @Google)\n- cJSON license note for aviftest (wantehchang @Google)\n\n## [0.5.6] - 2020-02-19\n### Added\n- Added CMake Find modules for aom, dav1d, rav1e (cryptomilk)\n\n### Changed\n- use right-most and bottom-most UV pixels in images with odd-dimensions (ledyba-z)\n- avoid libaom crash when encoding >8bpc images at high speed\n\n## [0.5.5] - 2020-02-13\n### Added\n- Enable still picture mode with rav1e >= 0.3.0 (cryptomilk)\n- Basic test suite (aviftest, rough draft)\n\n### Changed\n- Explicitly cast unorms to float during YUV conversion, fixing clang warning\n- Optimize SampleSizeBox parsing when sample_size>0, fixes OOM oss-fuzz issue #5192805347753984\n- Fix memory leak when using avifDecoderReset(), fixes oss-fuzz issue #5770230506979328\n- Update default rav1e version from 0.2.1 to 0.3.0\n- Remove a null check for codec->internal->image (wantehchang)\n\n## [0.5.4] - 2020-01-21\n### Changed\n- Fix monochrome inputs on avifImageCopy. Monochrome still isn't really a first-class citizen in libavif, but this should at least honor the incoming data better.\n- Updated README's Basic Decoding section reminding of avifDecoderRead's tradeoffs\n- build: avoid -ldl if not required or not supported (jbeich)\n- apps: convert ADVANCE to an expression (jbeich)\n\n## [0.5.3] - 2019-12-03\n### Added\n- Honor CMake's builtin `CMAKE_SKIP_INSTALL_RULES`\n\n### Changed\n- avifenc - Removed accidental double-delete of avifImage when failing to read a y4m file input\n- Round dimensions down when decoding subsampled YUV with odd dimensions\n\n## [0.5.2] - 2019-11-23\n### Changed\n- Fix incorrect free in 0-case for `avifRWDataSet()`\n\n## [0.5.1] - 2019-11-21\n### Changed\n- Fix expectations for Exif payload to better match normal usage\n\n## [0.5.0] - 2019-11-21\n### Added\n- Define version and SO-version for shared library\n- Use -DBUILD_SHARED_LIBS=OFF for building a static lib\n- avifImage can now hold Exif and XMP metadata (`avifImageSetMetadataExif`, `avifImageSetMetadataXMP`)\n- Support for reading/writing Exif and XMP items\n- Now tracking idat boxes across meta boxes\n- Support for iloc construction_method 1 (idat)\n\n### Changed\n- Proper handling of the primary item box (pitm) on read\n- avifROStreamReadString() now allows string skipping by passing a NULL output buffer\n- Updated README to show Exif/XMP support\n\n## [0.4.8] - 2019-11-19\n### Added\n- avifEncoder now has a speed setting\n- codec_aom only flushes encoder when necessary (avoids lost frame packets)\n- shared library compilation (build shared by default, use `-DAVIF_BUILD_STATIC=1` for static lib)\n- make install support\n- cmake fixes/support for find_package (cryptomilk)\n\n### Changed\n- Updated libaom to more recent SHA in aom.cmd\n- Tweaked AVIF_LOCAL_AOM settings to play nice with libaom's usage of CMake's option()\n- Remove all libaom special cases from libavif's CMakefiles, and have it work the same way dav1d and rav1e do\n- Minor cleanup\n\n## [0.4.7] - 2019-11-11\n### Changed\n- Fix memory leak in rav1e codec (PR20, AurelC2G)\n- Bump rav1e version in rav1e.cmd, implement `avifCodecVersionRav1e()`\n- Display versions in avifenc and avifdec\n\n## [0.4.6] - 2019-10-30\n### Changed\n- Fix rav1e build on Linux x64, and eliminate pseudo-dependency on cargo-c\n\n## [0.4.5] - 2019-10-30\n### Changed\n- Fix rav1e codec's alpha encoding (monochrome asserts, might be unsupported still)\n\n## [0.4.4] - 2019-10-30\n### Changed\n- Fix QP range for rav1e encodes (rav1e uses [0-255], not [0-63])\n- Distribute out and share code populating av01 config box across codecs\n\n## [0.4.3] - 2019-10-28\n### Added\n- rav1e codec support (encode-only)\n- `rav1e.cmd` and `dav1d.cmd` to ext\n\n### Changed\n- All codecs can coexist peacefully now, and can be queried for availability or specifically chosen at encode/decode time\n- Updated README to indicate changes to CMake which facilitate codec reorg\n\n## [0.4.2] - 2019-10-17\n### Changed\n- Populate nclx box inside of OBU in addition to AVIF container\n\n## [0.4.1] - 2019-10-17\n### Added\n- Added `containerDepth` to avifDecoder for surfacing 10bpc/12bpc flags from av1C boxes, if present\n- Added `avifCodecVersions()` for getting version strings of internal AV1 codecs\n\n### Changed\n- Fixed warning with CHECK macro (additional semicolon)\n\n## [0.4.0] - 2019-10-02\n### Added\n- exposed util functions: `avifFullToLimitedY`, `avifFullToLimitedUV`, `avifLimitedToFullY`, `avifLimitedToFullUV`, `avifPrepareReformatState`\n\n### Changed\n- Renamed ispeWidth/ispeHeight to containerWidth/containerHeight; they now can hold tkhd's width/height\n- Split avifImageYUVToRGB into faster internal functions (estimated gain: 3.5x)\n- Fixed a few memory leaks, one in the README, one in codec_dav1d (AurelC2G)\n\n## [0.3.11] - 2019-09-26\n### Added\n- Exposed ispeWidth/ispeHeight to decoder if decoding items with an associated ispe box\n- Now parsing/tracking sample description formats to filter non-av01 type tracks\n- Allow brand 'av01' to be decoded\n\n### Changed\n- Fixed bug in sync sample table element sizing\n- Pass through starting sample index to codec when flushing with NthImage\n\n## [0.3.10] - 2019-09-26\n### Added\n- stss box parsing for keyframe information\n- avifBool avifDecoderIsKeyframe(avifDecoder * decoder, uint32_t frameIndex);\n- uint32_t avifDecoderNearestKeyframe(avifDecoder * decoder, uint32_t frameIndex);\n- avifResult avifDecoderNthImage(avifDecoder * decoder, uint32_t frameIndex);\n- aviffuzz prints keyframe information as it repeatedly decodes\n\n### Changed\n- internally renamed codec function \"decode\" to \"open\", as that's all it does\n- dav1d codec's open function no longer does an initial unnecessary feed\n- avifCodecDecodeInput now stores an array of avifSample which know if they're keyframes\n- moved codec flushing code into avifDecoderFlush() so it is available to avifDecoderNthImage\n- ptsInTimescales is now calculated independently of frame decode order\n\n## [0.3.9] - 2019-09-25\n### Changed\n- Split avifRawData and avifStream into read-only (const) and read/write versions, updated code accordingly\n- Fix a few clang/macOS warnings\n\n## [0.3.8] - 2019-09-04\n### Changed\n- Reverted codec_aom and libaom to use previous SHA (v1.0.0-errata1 is ancient)\n\n## [0.3.7] - 2019-09-04 - *DO NOT USE THIS VERSION*\n### Added\n- Check for proper width/height/depth when decoding alpha with dav1d, matching libaom's impl\n\n### Changed\n- Updated codec_aom and libaom to use v1.0.0-errata1\n\n## [0.3.6] - 2019-07-25\n### Added\n- Exposed tile encoding to avifEncoder\n\n## [0.3.5] - 2019-07-25\n### Changed\n- Fixed copypasta bug in libaom encoding quantizer setup\n\n## [0.3.4] - 2019-07-25\n### Added\n- When the AVIF container does not contain a color profile, fallback to the color OBU's nclx\n\n## [0.3.3] - 2019-07-24\n### Added\n- new helper function `avifPeekCompatibleFileType()`\n- expose ioStats on avifDecoder again (currently only interesting when reading items)\n\n### Changed\n- Fixed some warnings (removed unused variables and a bad cast)\n- Add a define in dav1d layer for supporting older dav1d codecs\n- Enabled tons of warnings, and warnings-as-errors; Fixed associated fallout\n- codec_dav1d: disambiguate \"needs more data\" and \"no more frames\" in feed data pump\n\n## [0.3.2] - 2019-07-23\n### Added\n- Added `ext/aom.cmd` to perform a local checkout of the aom codebase, as an alternative to a real submodule. This allows downstream projects to use libavif without recursive submodule issues.\n- AppVeyor and Travis scripts now explicitly clone libaom into ext/ as an alternative to a submodule.\n\n### Changed\n- Remove `ext/aom` as a submodule. If libavif users want to build aom from ext/, they must enable `AVIF_BUILD_AOM` and supply their own local copy.\n- Move the handful of public domain gb_math functions used by colr.c and eliminate the dependence on the gb library\n- Detect when libaom or libdav1d is being included by a parent CMake project and allow it\n- Offer libavif's include dir alongside the library in CMake (target_include_directories)\n\n## [0.3.1] - 2019-07-22\n### Changed\n- Moved dependency on libm to avif executables, instead of directly on the library\n- Minor changes to README examples\n\n## [0.3.0] - 2019-07-22\n### Added\n- new CMake option `AVIF_CODEC_AOM` to enable/disable the usage of AOM's codec (default: on)\n- new CMake option `AVIF_CODEC_DAV1D` to enable/disable the usage of dav1d's codec (default: off)\n- `codec_dav1d.c`, which provides decoding via `libdav1d`\n- fuzz.sh which builds with afl-clang and runs afl-fuzz\n- aviffuzz tool, used in fuzzing script\n- fuzz inputs made with colorist\n- `.clang-format` file\n- `avifArray*()` functions for basic dynamic arrays when parsing\n- `moov` box parsing\n- now reads 'avis' brands\n- Split avifDecoderRead() into components for image sequences:\n  - avifDecoderSetSource()\n  - avifDecoderParse()\n  - avifDecoderNextImage()\n  - avifImageCopy()\n  - avifDecoderReset()\n- Added decoder and image timings for image sequences\n\n### Changed\n- Reorganized internal struct avifCodec to accommodate multiple codecs simultaneously (compile time; not exposed to API)\n- Fix some compiler warnings\n- Sanity check offsets and sizes in items table before using\n- Bail out of box header advertises an impossible size\n- Ran clang-format on all of src and include\n- Fix copypasta leading to a memory leak in RGB planes\n- Switched items and properties during parse to use dynamic arrays\n- Refactored codec API to not require each codec to maintain per-plane decoder instances\n- avifImage can now \"not own\" its planes and directly point at decoder planes to avoid copies\n- aviffuzz attempts to decode all images in source material twice (using avifDecoderReset())\n- Switch decoder->quality to explicit [minQuantizer, maxQuantizer], update assoc. constants\n- Add examples to README\n\n## [0.2.0] - 2019-06-12\n### Added\n- Added `avifEncoder` and `avifDecoder` to match `avifImage`'s pattern and allow for easier future parameterization\n\n### Changed\n- Renamed project in cmake to `libavif` to match new official repo naming\n- Updated appveyor script to use `libavif`\n- Updated examples and apps to use new encoder/decoder pattern\n\n## [0.1.4] - 2019-06-11\n### Added\n- `avifPixelFormatToString()` convenience function for debugging/printing\n- `avifenc` and `avifdec` \"apps\" which show basic bidirectional conversion to y4m\n\n### Changed\n- Make calling `avifImageYUVToRGB()` upon reading an avif optional\n- Moved `ext/aom` submodule to use official remote\n- Update `ext/aom` submodule to commit [38711e7fe](https://aomedia.googlesource.com/aom/+/38711e7fe1eff68296b0324a9809804aec359fa5)\n\n### Removed\n- Remove all calls to `convertXYZToXYY()` as they were all unnecessary\n\n## [0.1.3] - 2019-04-23\n### Changed\n- `ftyp` - Change `major_brand` to `avif`\n- `ftyp` - Reorder `compatible_brands`, add `MA1A` or `MA1B` when appropriate\n- Write `meta` box before `mdat` box for streaming friendliness\n\n## [0.1.2] - 2019-04-18\n### Added\n- `AVIF_NCLX_COLOUR_PRIMARIES_P3` (convenient mirrored value)\n- `avifNclxColourPrimariesFind()` - Finds a builtin avifNclxColourPrimaries and name by a set of primaries\n\n### Changed\n- Fixed enum name copypasta for `AVIF_NCLX_COLOUR_PRIMARIES_EG432_1`\n- Fix UV limited ranges when doing full<->limited range conversion\n\n## [0.1.1] - 2019-04-15\n### Added\n- Added `appveyor.yml` (exported from Appveyor)\n- Move `ext/aom` to a proper submodule\n- Update AOM to commit [3e3b9342a](https://aomedia.googlesource.com/aom/+/3e3b9342a20147ec6e4f89aa290e20277c1260ce) with minor CMake changes\n\n### Changed\n- Added static library artifact zip to Windows x64 builds (Appveyor)\n- Updated README to explain libavif's goals and a little more build info\n- Fix clang warning in `avifVersion()` signature\n\n## [0.1.0] - 2019-04-12\n### Added\n- First version. Plenty of bugfixes and features await!\n- `ext/aom` based off AOM commit [3563b12b](https://aomedia.googlesource.com/aom/+/3563b12b766639ba445eb0e62a225a4419594aef) with minor CMake changes\n- An interest and willingness to maintain this file.\n- Constants `AVIF_VERSION`, `AVIF_VERSION_MAJOR`, `AVIF_VERSION_MINOR`, `AVIF_VERSION_PATCH`\n- `avifVersion()` function\n\n[Unreleased]: https://github.com/AOMediaCodec/libavif/compare/v1.1.1...HEAD\n[1.1.1]: https://github.com/AOMediaCodec/libavif/compare/v1.1.0...v1.1.1\n[1.1.0]: https://github.com/AOMediaCodec/libavif/compare/v1.0.0...v1.1.0\n[1.0.4]: https://github.com/AOMediaCodec/libavif/compare/v1.0.3...v1.0.4\n[1.0.3]: https://github.com/AOMediaCodec/libavif/compare/v1.0.2...v1.0.3\n[1.0.2]: https://github.com/AOMediaCodec/libavif/compare/v1.0.1...v1.0.2\n[1.0.1]: https://github.com/AOMediaCodec/libavif/compare/v1.0.0...v1.0.1\n[1.0.0]: https://github.com/AOMediaCodec/libavif/compare/v0.11.1...v1.0.0\n[0.11.1]: https://github.com/AOMediaCodec/libavif/compare/v0.11.0...v0.11.1\n[0.11.0]: https://github.com/AOMediaCodec/libavif/compare/v0.10.1...v0.11.0\n[0.10.1]: https://github.com/AOMediaCodec/libavif/compare/v0.10.0...v0.10.1\n[0.10.0]: https://github.com/AOMediaCodec/libavif/compare/v0.9.3...v0.10.0\n[0.9.3]: https://github.com/AOMediaCodec/libavif/compare/v0.9.2...v0.9.3\n[0.9.2]: https://github.com/AOMediaCodec/libavif/compare/v0.9.1...v0.9.2\n[0.9.1]: https://github.com/AOMediaCodec/libavif/compare/v0.9.0...v0.9.1\n[0.9.0]: https://github.com/AOMediaCodec/libavif/compare/v0.8.4...v0.9.0\n[0.8.4]: https://github.com/AOMediaCodec/libavif/compare/v0.8.3...v0.8.4\n[0.8.3]: https://github.com/AOMediaCodec/libavif/compare/v0.8.2...v0.8.3\n[0.8.2]: https://github.com/AOMediaCodec/libavif/compare/v0.8.1...v0.8.2\n[0.8.1]: https://github.com/AOMediaCodec/libavif/compare/v0.8.0...v0.8.1\n[0.8.0]: https://github.com/AOMediaCodec/libavif/compare/v0.7.3...v0.8.0\n[0.7.3]: https://github.com/AOMediaCodec/libavif/compare/v0.7.2...v0.7.3\n[0.7.2]: https://github.com/AOMediaCodec/libavif/compare/v0.7.1...v0.7.2\n[0.7.1]: https://github.com/AOMediaCodec/libavif/compare/v0.7.0...v0.7.1\n[0.7.0]: https://github.com/AOMediaCodec/libavif/compare/v0.6.4...v0.7.0\n[0.6.4]: https://github.com/AOMediaCodec/libavif/compare/v0.6.3...v0.6.4\n[0.6.3]: https://github.com/AOMediaCodec/libavif/compare/v0.6.2...v0.6.3\n[0.6.2]: https://github.com/AOMediaCodec/libavif/compare/v0.6.1...v0.6.2\n[0.6.1]: https://github.com/AOMediaCodec/libavif/compare/v0.6.0...v0.6.1\n[0.6.0]: https://github.com/AOMediaCodec/libavif/compare/v0.5.7...v0.6.0\n[0.5.7]: https://github.com/AOMediaCodec/libavif/compare/v0.5.6...v0.5.7\n[0.5.6]: https://github.com/AOMediaCodec/libavif/compare/v0.5.5...v0.5.6\n[0.5.5]: https://github.com/AOMediaCodec/libavif/compare/v0.5.4...v0.5.5\n[0.5.4]: https://github.com/AOMediaCodec/libavif/compare/v0.5.3...v0.5.4\n[0.5.3]: https://github.com/AOMediaCodec/libavif/compare/v0.5.2...v0.5.3\n[0.5.2]: https://github.com/AOMediaCodec/libavif/compare/v0.5.1...v0.5.2\n[0.5.1]: https://github.com/AOMediaCodec/libavif/compare/v0.5.0...v0.5.1\n[0.5.0]: https://github.com/AOMediaCodec/libavif/compare/v0.4.8...v0.5.0\n[0.4.8]: https://github.com/AOMediaCodec/libavif/compare/v0.4.7...v0.4.8\n[0.4.7]: https://github.com/AOMediaCodec/libavif/compare/v0.4.6...v0.4.7\n[0.4.6]: https://github.com/AOMediaCodec/libavif/compare/v0.4.5...v0.4.6\n[0.4.5]: https://github.com/AOMediaCodec/libavif/compare/v0.4.4...v0.4.5\n[0.4.4]: https://github.com/AOMediaCodec/libavif/compare/v0.4.3...v0.4.4\n[0.4.3]: https://github.com/AOMediaCodec/libavif/compare/v0.4.2...v0.4.3\n[0.4.2]: https://github.com/AOMediaCodec/libavif/compare/v0.4.1...v0.4.2\n[0.4.1]: https://github.com/AOMediaCodec/libavif/compare/v0.4.0...v0.4.1\n[0.4.0]: https://github.com/AOMediaCodec/libavif/compare/v0.3.11...v0.4.0\n[0.3.11]: https://github.com/AOMediaCodec/libavif/compare/v0.3.10...v0.3.11\n[0.3.10]: https://github.com/AOMediaCodec/libavif/compare/v0.3.9...v0.3.10\n[0.3.9]: https://github.com/AOMediaCodec/libavif/compare/v0.3.8...v0.3.9\n[0.3.8]: https://github.com/AOMediaCodec/libavif/compare/v0.3.7...v0.3.8\n[0.3.7]: https://github.com/AOMediaCodec/libavif/compare/v0.3.6...v0.3.7\n[0.3.6]: https://github.com/AOMediaCodec/libavif/compare/v0.3.5...v0.3.6\n[0.3.5]: https://github.com/AOMediaCodec/libavif/compare/v0.3.4...v0.3.5\n[0.3.4]: https://github.com/AOMediaCodec/libavif/compare/v0.3.3...v0.3.4\n[0.3.3]: https://github.com/AOMediaCodec/libavif/compare/v0.3.2...v0.3.3\n[0.3.2]: https://github.com/AOMediaCodec/libavif/compare/v0.3.1...v0.3.2\n[0.3.1]: https://github.com/AOMediaCodec/libavif/compare/v0.3.0...v0.3.1\n[0.3.0]: https://github.com/AOMediaCodec/libavif/compare/v0.2.0...v0.3.0\n[0.2.0]: https://github.com/AOMediaCodec/libavif/compare/v0.1.4...v0.2.0\n[0.1.4]: https://github.com/AOMediaCodec/libavif/compare/v0.1.3...v0.1.4\n[0.1.3]: https://github.com/AOMediaCodec/libavif/compare/v0.1.2...v0.1.3\n[0.1.2]: https://github.com/AOMediaCodec/libavif/compare/v0.1.1...v0.1.2\n[0.1.1]: https://github.com/AOMediaCodec/libavif/compare/v0.1.0...v0.1.1\n[0.1.0]: https://github.com/AOMediaCodec/libavif/releases/tag/v0.1.0\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 36.15234375,
          "content": "# Copyright 2019 Joe Drago. All rights reserved.\n# SPDX-License-Identifier: BSD-2-Clause\n\ncmake_minimum_required(VERSION 3.13)\n\n# New in CMake version 3.15. MSVC warning flags are not in CMAKE_<LANG>_FLAGS by default.\nif(POLICY CMP0092)\n    cmake_policy(SET CMP0092 NEW)\nendif()\n\n# Prevent warnings in CMake>=3.24 for ExternalProject_Add()\n# see https://cmake.org/cmake/help/latest/policy/CMP0135.html\nif(POLICY CMP0135)\n    cmake_policy(SET CMP0135 NEW) # valid for DOWNLOAD_EXTRACT_TIMESTAMP option in CMake 3.24 and later\nendif()\n\n# New in CMake version 3.30. FetchContent_Populate(<name>) is deprecated, call\n# FetchContent_MakeAvailable(<name>) instead.\nif(POLICY CMP0169)\n    cmake_policy(SET CMP0169 OLD)\nendif()\n\nproject(libavif LANGUAGES C VERSION 1.1.1)\n\n# The root directory of the avif source\nset(AVIF_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\n# Specify search path for CMake modules to be loaded by include() and find_package()\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules\")\n\ninclude(ExternalProject)\ninclude(FetchContent)\ninclude(FindPkgConfig)\ninclude(AvifExternalProjectUtils)\n\noption(AVIF_ENABLE_NODISCARD \"Add [[nodiscard]] to some functions. CMake must be at least 3.21 to force C23.\" OFF)\n\n# Set C99 as the default\nif(AVIF_ENABLE_NODISCARD)\n    # [[nodiscard]] requires C23.\n    if(CMAKE_VERSION VERSION_LESS 3.21.0)\n        message(FATAL_ERROR \"CMake must be at least 3.21 to force C23, bailing out\")\n    endif()\n    set(CMAKE_C_STANDARD 23)\n    set(CMAKE_C_STANDARD_REQUIRED ON)\nelse()\n    set(CMAKE_C_STANDARD 99)\nendif()\n\n# SOVERSION scheme: MAJOR.MINOR.PATCH\n#   If there was an incompatible interface change:\n#     Increment MAJOR. Set MINOR and PATCH to 0\n#   If there was a compatible interface change:\n#     Increment MINOR. Set PATCH to 0\n#   If the source code was changed, but there were no interface changes:\n#     Increment PATCH.\nset(LIBRARY_VERSION_MAJOR 16)\nset(LIBRARY_VERSION_MINOR 1)\nset(LIBRARY_VERSION_PATCH 1)\nset(LIBRARY_VERSION \"${LIBRARY_VERSION_MAJOR}.${LIBRARY_VERSION_MINOR}.${LIBRARY_VERSION_PATCH}\")\nset(LIBRARY_SOVERSION ${LIBRARY_VERSION_MAJOR})\n\noption(BUILD_SHARED_LIBS \"Build shared avif library\" ON)\n\noption(AVIF_ENABLE_WERROR \"Treat all compiler warnings as errors\" OFF)\n\noption(AVIF_ENABLE_EXPERIMENTAL_YCGCO_R \"Enable experimental YCgCo-R matrix code\" OFF)\noption(AVIF_ENABLE_EXPERIMENTAL_MINI \"Enable experimental reduced header\" OFF)\noption(AVIF_ENABLE_EXPERIMENTAL_SAMPLE_TRANSFORM \"Enable experimental sample transform code\" OFF)\n\nset(AVIF_PKG_CONFIG_EXTRA_LIBS_PRIVATE \"\")\nset(AVIF_PKG_CONFIG_EXTRA_REQUIRES_PRIVATE \"\")\n\n# Creates an option that can take the values 'OFF', 'SYSTEM' or 'LOCAL'.\n# The prefix 'AVIF_' is added to the option name automatically.\nfunction(set_local_or_system_option VAR DEFAULT TEXT)\n    if(DEFINED AVIF_${VAR})\n        set(DEFAULT ${AVIF_${VAR}})\n    endif()\n    set(AVIF_${VAR} ${DEFAULT} CACHE STRING ${TEXT} FORCE)\n    set_property(CACHE AVIF_${VAR} PROPERTY STRINGS OFF LOCAL SYSTEM)\nendfunction()\nfunction(set_codec_option CODEC NAME ENCDEC EXTRA)\n    if(DEFINED AVIF_CODEC_${CODEC})\n        set(DEFAULT ${AVIF_CODEC_${CODEC}})\n    else()\n        set(DEFAULT \"OFF\")\n    endif()\n    set(AVIF_CODEC_${CODEC} ${DEFAULT} CACHE STRING \"Use the ${NAME} codec for ${ENCDEC}${EXTRA}\" FORCE)\n    set_property(CACHE AVIF_CODEC_${CODEC} PROPERTY STRINGS OFF LOCAL SYSTEM)\nendfunction()\nset_codec_option(AOM \"AOM\" \"encoding/decoding\" \" (see AVIF_CODEC_AOM_DECODE/AVIF_CODEC_AOM_ENCODE)\")\nset_codec_option(DAV1D \"dav1d\" \"decoding\" \"\")\nset_codec_option(LIBGAV1 \"libgav1\" \"decoding\" \"\")\nset_codec_option(RAV1E \"rav1e\" \"encoding\" \"\")\nset_codec_option(SVT \"SVT-AV1\" \"encoding\" \"\")\nset_codec_option(AVM \"AVM (AV2)\" \"encoding/decoding\" \" (EXPERIMENTAL)\")\n\n# These options allow libavif to only link against / use libaom's encoder or decoder, instead of being forced to use both\ninclude(CMakeDependentOption)\ncmake_dependent_option(\n    AVIF_CODEC_AOM_DECODE \"if AVIF_CODEC_AOM is on, use/offer libaom's decoder\" ON \"NOT AVIF_CODEC_AOM STREQUAL OFF\" OFF\n)\ncmake_dependent_option(\n    AVIF_CODEC_AOM_ENCODE \"if AVIF_CODEC_AOM is on, use/offer libaom's encoder\" ON \"NOT AVIF_CODEC_AOM STREQUAL OFF\" OFF\n)\n\nset_local_or_system_option(\n    \"GTEST\" OFF\n    \"Use the GoogleTest framework. Enables avif C++ tests that depend on GoogleTest. Has no effect unless AVIF_BUILD_TESTS is ON.\"\n)\n\noption(AVIF_BUILD_APPS \"Build avif apps.\" OFF)\noption(AVIF_BUILD_TESTS \"Build avif tests.\" OFF)\noption(\n    AVIF_ENABLE_COMPLIANCE_WARDEN\n    \"Check all avifEncoderFinish() output for AVIF specification compliance. Depends on gpac/ComplianceWarden which can be added with ext/compliance_warden.sh\"\n    OFF\n)\noption(\n    AVIF_ENABLE_GOLDEN_TESTS\n    \"Build tests that compare encoding outputs to golden files. Needs AVIF_BUILD_APPS=ON and AVIF_BUILD_TESTS=ON, and depends on MP4box which can be built with ext/mp4box.sh\"\n    OFF\n)\nset_local_or_system_option(\n    \"FUZZTEST\" OFF \"Build the Google FuzzTest framework. Only OFF and LOCAL are supported. CMake must be at least 3.25.\"\n)\n\n# Whether the libavif library uses c++ indirectly (e.g. through linking to libyuv).\nset(AVIF_LIB_USE_CXX OFF)\n\nif(APPLE)\n    set(XCRUN xcrun)\nelse()\n    set(XCRUN)\nendif()\n\n# This is also needed to get shared libraries (e.g. pixbufloader-avif) to compile against a static libavif.\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nif(BUILD_SHARED_LIBS)\n    set(AVIF_LIBRARY_PREFIX \"${CMAKE_SHARED_LIBRARY_PREFIX}\")\nelse()\n    set(AVIF_LIBRARY_PREFIX \"${CMAKE_STATIC_LIBRARY_PREFIX}\")\nendif()\n\nadd_library(avif_obj OBJECT)\nadd_library(avif)\n\n# Adds <target> to avif_obj's public link libraries for build, and adds\n# the <target> library as an install link library for export in case a consumer\n# needs to include that library alongside libavif when statically linking.\nfunction(avif_target_link_library target)\n    target_link_libraries(avif_obj PUBLIC $<BUILD_INTERFACE:${target}>)\n    get_target_property(target_is_local ${target} AVIF_LOCAL)\n    if(target_is_local)\n        return()\n    endif()\n    get_target_property(install_target ${target} IMPORTED_SONAME)\n    if(NOT install_target)\n        set(install_target ${target})\n    endif()\n    # The transitive dependency needs to be an export link library in a static build.\n    if(NOT BUILD_SHARED_LIBS)\n        target_link_libraries(avif PUBLIC $<INSTALL_INTERFACE:${install_target}>)\n    endif()\nendfunction()\n\n#[[\ncheck_avif_option(<option> TARGET <target> PKG_NAME <PackageName>)\n\nIf <option> is equal to \"SYSTEM\", uses <target> if it already exists, otherwise calls find_package(<PackageName>). If <option>\nis \"LOCAL\", includes Local<PackageName>.cmake. Sets <option>_ENABLED to ON if the option is enabled and the target is usable.\n]]\nmacro(check_avif_option _VAR)\n    set(_oneValueArgs TARGET PKG_NAME)\n    cmake_parse_arguments(_AVIF_OPTION \"\" \"${_oneValueArgs}\" \"\" ${ARGN})\n    string(SUBSTRING ${_AVIF_OPTION_PKG_NAME} 0 1 FIRST_LETTER)\n    string(TOUPPER ${FIRST_LETTER} FIRST_LETTER)\n    string(REGEX REPLACE \"^.(.*)\" \"Local${FIRST_LETTER}\\\\1\" _LOCAL_INCLUDE \"${_AVIF_OPTION_PKG_NAME}\")\n    set(${_VAR}_ENABLED OFF)\n    if(${_VAR} STREQUAL \"LOCAL\" OR ${_VAR} STREQUAL \"SYSTEM\")\n        if(${_VAR} STREQUAL \"LOCAL\" AND TARGET ${_AVIF_OPTION_TARGET})\n            message(ERROR \"${_AVIF_OPTION_TARGET} is already defined and ${_VAR} should be set to SYSTEM to use it\")\n            return()\n        endif()\n        set(${_VAR}_ENABLED ON)\n        if(NOT TARGET ${_AVIF_OPTION_TARGET})\n            if(${_VAR} STREQUAL \"LOCAL\")\n                include(${_LOCAL_INCLUDE})\n            elseif(${_VAR} STREQUAL \"SYSTEM\")\n                # QUIET instead of REQUIRED in order to use a custom error message below.\n                find_package(${_AVIF_OPTION_PKG_NAME} QUIET)\n                if(NOT ${_AVIF_OPTION_PKG_NAME}_FOUND)\n                    message(\n                        FATAL_ERROR\n                            \"Cannot find ${_AVIF_OPTION_PKG_NAME}. Make sure it's installed on the system, or pass -D${_VAR}=LOCAL (to fetch and build it locally) or -D${_VAR}=OFF (to disable it)\"\n                    )\n                endif()\n            endif()\n        endif()\n    endif()\nendmacro()\n\nset_local_or_system_option(\"ZLIBPNG\" \"SYSTEM\" \"Use zlib and libpng.\")\nif(AVIF_ZLIBPNG STREQUAL \"LOCAL\")\n    include(LocalZlibpng)\nendif()\n\nset_local_or_system_option(\"JPEG\" \"SYSTEM\" \"Use jpeg.\")\nif(AVIF_JPEG STREQUAL \"LOCAL\")\n    include(LocalJpeg)\nendif()\n\nset_local_or_system_option(\"LIBYUV\" \"SYSTEM\" \"Use libyuv.\")\n# check_avif_option libyuv must precede libaom because the latter needs to link against the former\n# when building libaom locally\ncheck_avif_option(AVIF_LIBYUV TARGET yuv::yuv PKG_NAME libyuv)\nif(AVIF_LIBYUV_ENABLED)\n    # libyuv 1755 exposed all of the I*Matrix() functions, which libavif relies on.\n    # libyuv 1774 exposed ScalePlane_12 function, which libavif can use for some additional optimizations.\n    # libyuv 1813 added the I*ToARGBMatrixFilter() functions, which libavif can use with the bilinear filter.\n    if(NOT LIBYUV_VERSION)\n        message(STATUS \"libavif: libyuv found, but version unknown; libyuv-based fast paths disabled.\")\n        unset(AVIF_LIBYUV_ENABLED)\n    elseif(LIBYUV_VERSION LESS 1755)\n        message(STATUS \"libavif: libyuv (${LIBYUV_VERSION}) found, but is too old; libyuv-based fast paths disabled.\")\n        unset(AVIF_LIBYUV_ENABLED)\n    else()\n        message(STATUS \"libavif: libyuv (${LIBYUV_VERSION}) found; libyuv-based fast paths enabled.\")\n        if(LIBYUV_VERSION LESS 1813)\n            message(STATUS \"libavif: some libyuv optimizations require at least version 1813 to work.\")\n        endif()\n    endif()\nendif()\nif(AVIF_LIBYUV_ENABLED)\n    target_compile_definitions(avif_obj PRIVATE -DAVIF_LIBYUV_ENABLED=1)\n    avif_target_link_library(yuv::yuv)\n    set(AVIF_PKG_CONFIG_EXTRA_LIBS_PRIVATE \"${AVIF_PKG_CONFIG_EXTRA_LIBS_PRIVATE} -lyuv\")\n    set(AVIF_LIB_USE_CXX ON)\nendif(AVIF_LIBYUV_ENABLED)\n\nset_local_or_system_option(\"LIBSHARPYUV\" \"OFF\" \"Use libsharpyuv.\")\ncheck_avif_option(AVIF_LIBSHARPYUV TARGET sharpyuv::sharpyuv PKG_NAME libsharpyuv)\nif(AVIF_LIBSHARPYUV_ENABLED)\n    message(STATUS \"libavif: libsharpyuv found; sharp rgb to yuv conversion enabled.\")\n    set(AVIF_PKG_CONFIG_EXTRA_REQUIRES_PRIVATE \"${AVIF_PKG_CONFIG_EXTRA_REQUIRES_PRIVATE} libsharpyuv\")\n    target_compile_definitions(avif_obj PRIVATE -DAVIF_LIBSHARPYUV_ENABLED=1)\n    avif_target_link_library(sharpyuv::sharpyuv)\nendif(AVIF_LIBSHARPYUV_ENABLED)\n\nset_local_or_system_option(\n    \"LIBXML2\" \"OFF\" \"Use libxml2. When enabled, allows converting JPEG files with gain maps to AVIF using avifenc\"\n)\ncheck_avif_option(AVIF_LIBXML2 TARGET LibXml2::LibXml2 PKG_NAME LibXml2)\n\n# ---------------------------------------------------------------------------------------\n\n# Enable all warnings\ninclude(CheckCCompilerFlag)\n# avif_enable_warnings is a CMake interface library. It has no source files.\n# Its only purpose is to serve as a carrier of warning-related compiler options\n# and macro definitions. We set them by calling target_compile_options() and\n# target_compile_definitions() on avif_enable_warnings. We enable compiler\n# warnings in a target by linking the target with avif_enable_warnings using\n# target_link_libraries().\nadd_library(avif_enable_warnings INTERFACE)\nif(MSVC)\n    message(STATUS \"libavif: Enabling warnings for MSVC\")\n    target_compile_options(\n        avif_enable_warnings\n        INTERFACE /W4 # For clang-cl, /W4 enables -Wall and -Wextra\n                  /wd4232 # Disable: address of dllimport 'dllimport' is not static,\n                          # identity not guaranteed\n                  /wd4324 # Disable: structure was padded due to alignment specifier\n    )\n    # Disable deprecation warnings about POSIX function names such as setmode (replaced by the ISO C and C++ conformant name _setmode).\n    # Disable deprecation warnings about unsafe CRT library functions such as fopen (replaced by fopen_s).\n    target_compile_definitions(avif_enable_warnings INTERFACE _CRT_NONSTDC_NO_WARNINGS _CRT_SECURE_NO_WARNINGS)\n\n    # clang-cl documentation says:\n    #   /execution-charset:<value>\n    #                           Runtime encoding, supports only UTF-8\n    #   ...\n    #   /source-charset:<value> Source encoding, supports only UTF-8\n    # So we don't need to pass /source-charset:utf-8 to clang-cl, and we cannot pass /execution-charset:us-ascii to clang-cl.\n    if(CMAKE_C_COMPILER_ID MATCHES \"MSVC\")\n        target_compile_options(\n            avif_obj\n            PUBLIC $<BUILD_INTERFACE:\n                   # This tells MSVC to read source code as UTF-8 and assume console can only use ASCII (minimal safe).\n                   # libavif uses ANSI API to print to console, which is not portable between systems using different\n                   # languages and results in mojibake unless we only use codes shared by every code page: ASCII.\n                   # A C4556 warning will be generated on violation.\n                   # Commonly used /utf-8 flag assumes UTF-8 for both source and console, which is usually not the case.\n                   # Warnings can be suppressed but there will still be random characters printed to the console.\n                   /source-charset:utf-8\n                   /execution-charset:us-ascii\n                   >\n        )\n    endif()\nelseif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    message(STATUS \"libavif: Enabling warnings for Clang\")\n    target_compile_options(avif_enable_warnings INTERFACE -Wall -Wextra -Wshorten-64-to-32)\nelseif(CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n    message(STATUS \"libavif: Enabling warnings for GCC\")\n    target_compile_options(avif_enable_warnings INTERFACE -Wall -Wextra)\nelse()\n    message(FATAL_ERROR \"libavif: Unknown compiler, bailing out\")\nendif()\n\nif(AVIF_ENABLE_WERROR)\n    # Warnings as errors\n    if(MSVC)\n        target_compile_options(avif_enable_warnings INTERFACE /WX)\n    elseif(CMAKE_C_COMPILER_ID MATCHES \"Clang\" OR CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n        target_compile_options(avif_enable_warnings INTERFACE -Werror)\n    else()\n        message(FATAL_ERROR \"libavif: Unknown compiler, bailing out\")\n    endif()\nendif()\n\ntarget_link_libraries(avif_obj PRIVATE avif_enable_warnings)\n\noption(\n    AVIF_ENABLE_COVERAGE\n    \"Enable code coverage. Requires LLVM and clang as compiler. Has no effect unless AVIF_BUILD_TESTS is ON. Use the 'avif_coverage' target to generate a coverage report.\"\n    OFF\n)\nif(AVIF_ENABLE_COVERAGE)\n    if(CMAKE_C_COMPILER_ID MATCHES \"Clang\" OR CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n        message(STATUS \"libavif: Enabling coverage for Clang\")\n        target_compile_options(avif_obj PUBLIC $<BUILD_INTERFACE:-fprofile-instr-generate -fcoverage-mapping -O0>)\n        target_compile_options(avif PUBLIC $<BUILD_INTERFACE:-fprofile-instr-generate -fcoverage-mapping -O0>)\n        set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} \"-fprofile-instr-generate -fcoverage-mapping\")\n    else()\n        # TODO: Add support for other compilers\n        message(WARNING \"libavif: Ignoring request for coverage (AVIF_ENABLE_COVERAGE); only clang is currently supported.\")\n        set(AVIF_ENABLE_COVERAGE OFF)\n    endif()\nendif()\n\nif(AVIF_ENABLE_EXPERIMENTAL_YCGCO_R)\n    add_compile_definitions(AVIF_ENABLE_EXPERIMENTAL_YCGCO_R)\nendif()\n\nif(AVIF_ENABLE_EXPERIMENTAL_MINI)\n    add_compile_definitions(AVIF_ENABLE_EXPERIMENTAL_MINI)\nendif()\n\nif(AVIF_ENABLE_EXPERIMENTAL_SAMPLE_TRANSFORM)\n    add_compile_definitions(AVIF_ENABLE_EXPERIMENTAL_SAMPLE_TRANSFORM)\nendif()\n\nset(AVIF_SRCS\n    src/alpha.c\n    src/avif.c\n    src/colr.c\n    src/colrconvert.c\n    src/diag.c\n    src/exif.c\n    src/gainmap.c\n    src/io.c\n    src/mem.c\n    src/obu.c\n    src/properties.c\n    src/rawdata.c\n    src/read.c\n    src/reformat.c\n    src/reformat_libsharpyuv.c\n    src/reformat_libyuv.c\n    src/scale.c\n    src/stream.c\n    src/utils.c\n    src/write.c\n)\nif(AVIF_ENABLE_EXPERIMENTAL_SAMPLE_TRANSFORM)\n    list(APPEND AVIF_SRCS src/sampletransform.c)\nendif()\n\nif(AVIF_ENABLE_COMPLIANCE_WARDEN)\n    if(NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/ext/ComplianceWarden\")\n        message(FATAL_ERROR \"AVIF_ENABLE_COMPLIANCE_WARDEN: ext/ComplianceWarden is missing, bailing out\")\n    endif()\n\n    set(AVIF_LIB_USE_CXX ON)\n    target_compile_definitions(avif_obj PRIVATE AVIF_ENABLE_COMPLIANCE_WARDEN)\n\n    list(\n        APPEND\n        AVIF_SRCS\n        src/compliance.cc\n        ext/ComplianceWarden/src/app/cw.cpp\n        ext/ComplianceWarden/src/app/options.cpp\n        ext/ComplianceWarden/src/app/report_std.cpp\n        ext/ComplianceWarden/src/app/report_json.cpp\n        ext/ComplianceWarden/src/utils/common_boxes.cpp\n        ext/ComplianceWarden/src/utils/tools.cpp\n        ext/ComplianceWarden/src/utils/av1_utils.cpp\n        ext/ComplianceWarden/src/utils/isobmff_utils.cpp\n        ext/ComplianceWarden/src/utils/isobmff_derivations.cpp\n        ext/ComplianceWarden/src/utils/spec_utils.cpp\n        ext/ComplianceWarden/src/specs/av1_hdr10plus/av1_hdr10plus.cpp\n        ext/ComplianceWarden/src/specs/avif/avif.cpp\n        ext/ComplianceWarden/src/specs/avif/profiles.cpp\n        ext/ComplianceWarden/src/specs/avif/utils.cpp\n        ext/ComplianceWarden/src/specs/isobmff/isobmff.cpp\n        ext/ComplianceWarden/src/specs/heif/heif.cpp\n        ext/ComplianceWarden/src/specs/miaf/miaf.cpp\n        ext/ComplianceWarden/src/specs/miaf/audio.cpp\n        ext/ComplianceWarden/src/specs/miaf/brands.cpp\n        ext/ComplianceWarden/src/specs/miaf/derivations.cpp\n        ext/ComplianceWarden/src/specs/miaf/colours.cpp\n        ext/ComplianceWarden/src/specs/miaf/num_pixels.cpp\n        ext/ComplianceWarden/src/specs/miaf/profiles.cpp\n        ext/ComplianceWarden/src/cw_version.cpp\n    )\nendif()\n\ntarget_sources(avif_obj PRIVATE ${AVIF_SRCS})\n\n# Only applicable to macOS. In GitHub CI's macos-latest os image, this prevents using the libpng\n# and libjpeg headers from /Library/Frameworks/Mono.framework/Headers instead of\n# /usr/local/include.\nset(CMAKE_FIND_FRAMEWORK LAST)\n\nif(UNIX OR MINGW)\n    # Find out if we have threading available\n    set(THREADS_PREFER_PTHREAD_FLAG ON)\n    find_package(Threads)\n    target_link_libraries(avif_obj PRIVATE m Threads::Threads)\nendif()\n\nif(NOT AVIF_LIBYUV_ENABLED)\n    target_sources(\n        avif_obj\n        PRIVATE third_party/libyuv/source/scale.c third_party/libyuv/source/scale_common.c third_party/libyuv/source/scale_any.c\n                third_party/libyuv/source/row_common.c third_party/libyuv/source/planar_functions.c\n    )\n    if(DEFINED ANDROID_ABI OR DEFINED APPLE)\n        # When building third_party/libyuv/source/scale.c, some functions use\n        # some of the parameters only inside an assert statement. This causes\n        # unused parameter warnings when building for Android. Suppress the\n        # warning in that case.\n        target_compile_options(avif_obj PRIVATE -Wno-unused-parameter)\n    endif()\nendif()\n\ncheck_avif_option(AVIF_CODEC_DAV1D TARGET dav1d::dav1d PKG_NAME dav1d)\nif(AVIF_CODEC_DAV1D_ENABLED)\n    target_compile_definitions(avif_obj PRIVATE -DAVIF_CODEC_DAV1D=1)\n    target_sources(avif_obj PRIVATE src/codec_dav1d.c)\n\n    if(UNIX AND NOT APPLE)\n        target_link_libraries(dav1d::dav1d INTERFACE ${CMAKE_DL_LIBS}) # for dlsym\n    endif()\n\n    avif_target_link_library(dav1d::dav1d)\n\n    message(STATUS \"libavif: Codec enabled: dav1d (decode)\")\n    set(AVIF_PKG_CONFIG_EXTRA_REQUIRES_PRIVATE \"${AVIF_PKG_CONFIG_EXTRA_REQUIRES_PRIVATE} dav1d\")\nendif()\n\ncheck_avif_option(AVIF_CODEC_LIBGAV1 TARGET libgav1::libgav1 PKG_NAME libgav1)\nif(AVIF_CODEC_LIBGAV1_ENABLED)\n    set(AVIF_LIB_USE_CXX ON)\n    target_compile_definitions(avif_obj PRIVATE -DAVIF_CODEC_LIBGAV1=1)\n    target_sources(avif_obj PRIVATE src/codec_libgav1.c)\n    avif_target_link_library(libgav1::libgav1)\n\n    message(STATUS \"libavif: Codec enabled: libgav1 (decode)\")\nendif()\n\ncheck_avif_option(AVIF_CODEC_RAV1E TARGET rav1e::rav1e PKG_NAME rav1e)\nif(AVIF_CODEC_RAV1E_ENABLED)\n    target_compile_definitions(avif_obj PRIVATE -DAVIF_CODEC_RAV1E=1)\n    target_sources(avif_obj PRIVATE src/codec_rav1e.c)\n\n    # Unfortunately, rav1e requires a few more libraries\n    # first check that RAV1E_LIBRARIES hasn't been populated by the LocalRav1e module\n    if(NOT RAV1E_LIBRARIES)\n        if(WIN32)\n            target_link_libraries(rav1e::rav1e INTERFACE ntdll.lib userenv.lib ws2_32.lib bcrypt.lib)\n        elseif(UNIX AND NOT APPLE)\n            target_link_libraries(rav1e::rav1e INTERFACE ${CMAKE_DL_LIBS}) # for backtrace\n        endif()\n    endif()\n\n    avif_target_link_library(rav1e::rav1e)\n\n    message(STATUS \"libavif: Codec enabled: rav1e (encode)\")\n    set(AVIF_PKG_CONFIG_EXTRA_REQUIRES_PRIVATE \"${AVIF_PKG_CONFIG_EXTRA_REQUIRES_PRIVATE} rav1e\")\nendif()\n\ncheck_avif_option(AVIF_CODEC_SVT TARGET SvtAv1Enc PKG_NAME svt)\nif(AVIF_CODEC_SVT_ENABLED)\n    target_compile_definitions(avif_obj PRIVATE -DAVIF_CODEC_SVT=1)\n    target_sources(avif_obj PRIVATE src/codec_svt.c)\n    avif_target_link_library(SvtAv1Enc)\n\n    message(STATUS \"libavif: Codec enabled: svt (encode)\")\n    set(AVIF_PKG_CONFIG_EXTRA_REQUIRES_PRIVATE \"${AVIF_PKG_CONFIG_EXTRA_REQUIRES_PRIVATE} SvtAv1Enc\")\nendif()\n\ncheck_avif_option(AVIF_CODEC_AOM TARGET aom PKG_NAME aom)\nif(AVIF_CODEC_AOM_ENABLED)\n    target_compile_definitions(avif_obj PRIVATE -DAVIF_CODEC_AOM=1)\n    if(AVIF_CODEC_AOM_ENCODE AND AVIF_CODEC_AOM_DECODE)\n        set(AVIF_CODEC_AOM_ENCODE_DECODE_CONFIG \"encode/decode\")\n        target_compile_definitions(avif_obj PRIVATE -DAVIF_CODEC_AOM_ENCODE=1 -DAVIF_CODEC_AOM_DECODE=1)\n    elseif(AVIF_CODEC_AOM_ENCODE)\n        set(AVIF_CODEC_AOM_ENCODE_DECODE_CONFIG \"encode only\")\n        target_compile_definitions(avif_obj PRIVATE -DAVIF_CODEC_AOM_ENCODE=1)\n    elseif(AVIF_CODEC_AOM_DECODE)\n        set(AVIF_CODEC_AOM_ENCODE_DECODE_CONFIG \"decode only\")\n        target_compile_definitions(avif_obj PRIVATE -DAVIF_CODEC_AOM_DECODE=1)\n    else()\n        message(\n            FATAL_ERROR\n                \"libavif: AVIF_CODEC_AOM is on, but both AVIF_CODEC_AOM_ENCODE and AVIF_CODEC_AOM_DECODE are off. Disable AVIF_CODEC_AOM to disable both parts of the codec.\"\n        )\n    endif()\n    target_sources(avif_obj PRIVATE src/codec_aom.c)\n\n    avif_target_link_library(aom)\n\n    message(STATUS \"libavif: Codec enabled: aom (${AVIF_CODEC_AOM_ENCODE_DECODE_CONFIG})\")\n    set(AVIF_PKG_CONFIG_EXTRA_REQUIRES_PRIVATE \"${AVIF_PKG_CONFIG_EXTRA_REQUIRES_PRIVATE} aom\")\n\n    get_target_property(AOM_INTERFACE_LINK_LIBRARIES aom INTERFACE_LINK_LIBRARIES)\n    if(AOM_INTERFACE_LINK_LIBRARIES MATCHES vmaf)\n        set(AVIF_LIB_USE_CXX ON)\n    endif()\nendif()\n\ncheck_avif_option(AVIF_CODEC_AVM TARGET aom PKG_NAME avm)\nif(AVIF_CODEC_AVM_ENABLED)\n    message(WARNING \"libavif: AV2 support with avm is experimental. Only use for testing.\")\n\n    # The avm repository is a fork of aom and inherited a lot of folders, files and build artifacts named the same way.\n    # Having both dependencies at the same time generates conflicts in includes, binary lookups etc.\n    if(AVIF_CODEC_AOM_ENABLED)\n        message(FATAL_ERROR \"libavif: aom conflicts with avm, bailing out\")\n    endif()\n\n    target_compile_definitions(avif_obj PUBLIC -DAVIF_CODEC_AVM=1)\n    target_sources(avif_obj PRIVATE src/codec_avm.c)\n\n    avif_target_link_library(aom)\n\n    message(STATUS \"libavif: Codec enabled: avm (encode/decode)\")\nendif()\n\nif(NOT AVIF_CODEC_AOM_ENABLED\n   AND NOT AVIF_CODEC_DAV1D_ENABLED\n   AND NOT AVIF_CODEC_LIBGAV1_ENABLED\n   AND NOT AVIF_CODEC_AVM_ENABLED\n)\n    message(WARNING \"libavif: No decoding library is enabled.\")\nendif()\n\nif(AVIF_LIB_USE_CXX OR AVIF_BUILD_APPS OR (AVIF_BUILD_TESTS AND (AVIF_FUZZTEST OR AVIF_GTEST)))\n    enable_language(CXX)\n    if(AVIF_ENABLE_NODISCARD)\n        # [[nodiscard]] requires C++17.\n        set(CMAKE_CXX_STANDARD 17)\n        set(CMAKE_CXX_STANDARD_REQUIRED ON)\n    else()\n        set(CMAKE_CXX_STANDARD 14)\n    endif()\nendif()\n\nset_target_properties(avif_obj PROPERTIES C_VISIBILITY_PRESET hidden)\ntarget_include_directories(avif_obj PUBLIC $<BUILD_INTERFACE:${libavif_SOURCE_DIR}/include>)\nif(NOT AVIF_LIBYUV_ENABLED)\n    target_include_directories(avif_obj PRIVATE ${libavif_SOURCE_DIR}/third_party/libyuv/include/)\nendif()\nif(AVIF_ENABLE_COMPLIANCE_WARDEN)\n    target_include_directories(avif_obj PRIVATE ${libavif_SOURCE_DIR}/ext/ComplianceWarden/src/utils/)\nendif()\nset(AVIF_PKG_CONFIG_EXTRA_CFLAGS \"\")\nif(BUILD_SHARED_LIBS)\n    target_compile_definitions(avif_obj PRIVATE AVIF_DLL AVIF_BUILDING_SHARED_LIBS)\n    set(AVIF_PKG_CONFIG_EXTRA_CFLAGS \" -DAVIF_DLL\")\nendif()\n\n# Main avif library.\nset_target_properties(avif PROPERTIES VERSION ${LIBRARY_VERSION} SOVERSION ${LIBRARY_SOVERSION})\ntarget_link_libraries(avif PRIVATE avif_obj)\ntarget_include_directories(avif PUBLIC $<BUILD_INTERFACE:${libavif_SOURCE_DIR}/include> $<INSTALL_INTERFACE:include>)\nif(BUILD_SHARED_LIBS)\n    target_compile_definitions(avif INTERFACE AVIF_DLL)\n    if(AVIF_LIB_USE_CXX)\n        set_target_properties(avif PROPERTIES LINKER_LANGUAGE \"CXX\")\n    endif()\nendif()\n\n# Give access to functions defined in internal.h when BUILD_SHARED_LIBS is ON, to tests for example.\n# The avif_internal target should not be used by external code.\nif(BUILD_SHARED_LIBS)\n    add_library(avif_internal STATIC)\n    target_link_libraries(avif_internal PRIVATE avif_obj)\n    target_include_directories(avif_internal PUBLIC ${libavif_SOURCE_DIR}/include)\n    # Define the following to avoid linking against avif and avif_internal at the same time.\n    target_compile_definitions(avif_internal PUBLIC AVIF_USING_STATIC_LIBS)\nelse()\n    include(merge_static_libs)\n    set_target_properties(avif PROPERTIES AVIF_LOCAL ON)\n    merge_static_libs(avif_static avif)\n    # Set the avif target's output to \"avif_internal\" and set the output name of\n    # the combined static archive target (avif_static)) to avif, so that libavif.a\n    # is the merged archive.\n    set_target_properties(avif_static PROPERTIES OUTPUT_NAME avif EXPORT_NAME avif)\n    set_target_properties(avif PROPERTIES OUTPUT_NAME avif_internal EXPORT_NAME avif_internal)\n    add_library(avif_internal ALIAS avif)\nendif()\n\noption(AVIF_BUILD_EXAMPLES \"Build avif examples.\" OFF)\nif(AVIF_BUILD_EXAMPLES)\n    set(AVIF_EXAMPLES avif_example_decode_memory avif_example_decode_file avif_example_decode_streaming avif_example_encode)\n\n    foreach(EXAMPLE ${AVIF_EXAMPLES})\n        add_executable(${EXAMPLE} examples/${EXAMPLE}.c)\n        if(AVIF_LIB_USE_CXX)\n            set_target_properties(${EXAMPLE} PROPERTIES LINKER_LANGUAGE \"CXX\")\n        endif()\n        target_link_libraries(${EXAMPLE} avif avif_enable_warnings)\n    endforeach()\nendif()\n\nif(CMAKE_SKIP_INSTALL_RULES)\n    set(SKIP_INSTALL_ALL TRUE)\nendif()\n\nif(NOT SKIP_INSTALL_ALL)\n    include(GNUInstallDirs)\nendif()\n\nif(AVIF_BUILD_APPS OR (AVIF_BUILD_TESTS AND (AVIF_FUZZTEST OR AVIF_GTEST)))\n    if(AVIF_ZLIBPNG STREQUAL \"OFF\")\n        message(FATAL_ERROR \"libavif: AVIF_ZLIBPNG cannot be OFF when AVIF_BUILD_APPS or AVIF_BUILD_TESTS is ON\")\n    elseif(AVIF_ZLIBPNG STREQUAL \"SYSTEM\")\n        find_package(ZLIB REQUIRED)\n        find_package(PNG 1.6.32 REQUIRED) # 1.6.32 or above for png_get_eXIf_1()/png_set_eXIf_1() and iTXt (for XMP).\n    endif()\n    if(AVIF_JPEG STREQUAL \"OFF\")\n        message(FATAL_ERROR \"libavif: AVIF_JPEG cannot be OFF when AVIF_BUILD_APPS or AVIF_BUILD_TESTS is ON\")\n    elseif(AVIF_JPEG STREQUAL \"SYSTEM\")\n        find_package(JPEG REQUIRED)\n    endif()\n\n    if(TARGET LibXml2::LibXml2)\n        set(AVIF_ENABLE_JPEG_GAIN_MAP_CONVERSION TRUE)\n        add_compile_definitions(AVIF_ENABLE_JPEG_GAIN_MAP_CONVERSION)\n    else()\n        message(STATUS \"libavif: libxml2 not found; avifenc will ignore any gain map in JPEG files\")\n    endif()\n\n    set(AVIF_APPS_SRCS apps/shared/avifexif.c apps/shared/avifjpeg.c apps/shared/avifpng.c apps/shared/avifutil.c\n                       apps/shared/iccmaker.c apps/shared/y4m.c third_party/iccjpeg/iccjpeg.c\n    )\n\n    macro(add_avif_apps_library suffix)\n        add_library(avif_apps${suffix} STATIC ${AVIF_APPS_SRCS})\n        target_link_libraries(avif_apps${suffix} PUBLIC avif${suffix} PRIVATE PNG::PNG ZLIB::ZLIB JPEG::JPEG avif_enable_warnings)\n        if(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n            target_link_libraries(avif_apps${suffix} PRIVATE m)\n        endif()\n        if(AVIF_ENABLE_JPEG_GAIN_MAP_CONVERSION)\n            target_link_libraries(avif_apps${suffix} PRIVATE LibXml2::LibXml2)\n        endif()\n        target_include_directories(avif_apps${suffix} INTERFACE apps/shared)\n        # In GitHub CI's macos-latest os image, /usr/local/include has not only the headers of libpng\n        # and libjpeg but also the headers of an older version of libavif. Put the avif include\n        # directory before ${PNG_PNG_INCLUDE_DIR} ${JPEG_INCLUDE_DIR} to prevent picking up old libavif\n        # headers from /usr/local/include.\n        target_include_directories(avif_apps${suffix} PRIVATE third_party/iccjpeg)\n        target_include_directories(avif_apps${suffix} SYSTEM PRIVATE ${PNG_PNG_INCLUDE_DIR} ${JPEG_INCLUDE_DIR})\n    endmacro()\n\n    # Main avif_apps library.\n    add_avif_apps_library(\"\")\n\n    # avif_apps_internal is to use when linking to avif_internal.\n    if(BUILD_SHARED_LIBS)\n        add_avif_apps_library(_internal)\n    else()\n        add_library(avif_apps_internal ALIAS avif_apps)\n    endif()\nendif()\n\nif(AVIF_BUILD_APPS)\n    add_executable(avifenc apps/avifenc.c)\n    if(WIN32)\n        if(MSVC)\n            target_sources(avifenc PRIVATE apps/utf8.manifest)\n        elseif(MINGW)\n            # MinGW doesn't have a manifest tool (mt.exe), so we need to wrap\n            # utf8.manifest in a resource-definition script (.rc file).\n            target_sources(avifenc PRIVATE apps/utf8.rc)\n        endif()\n    endif()\n    if(AVIF_LIB_USE_CXX)\n        set_target_properties(avifenc PROPERTIES LINKER_LANGUAGE \"CXX\")\n    endif()\n    target_link_libraries(avifenc avif_apps avif avif_enable_warnings)\n    add_executable(avifdec apps/avifdec.c)\n    if(WIN32)\n        if(MSVC)\n            target_sources(avifdec PRIVATE apps/utf8.manifest)\n        elseif(MINGW)\n            target_sources(avifdec PRIVATE apps/utf8.rc)\n        endif()\n    endif()\n    if(AVIF_LIB_USE_CXX)\n        set_target_properties(avifdec PROPERTIES LINKER_LANGUAGE \"CXX\")\n    endif()\n    target_link_libraries(avifdec avif_apps avif avif_enable_warnings)\n\n    include(LocalLibargparse)\n\n    set(AVIFGAINMAPUTIL_SRCS\n        apps/avifgainmaputil/avifgainmaputil.cc\n        apps/avifgainmaputil/convert_command.cc\n        apps/avifgainmaputil/combine_command.cc\n        apps/avifgainmaputil/extractgainmap_command.cc\n        apps/avifgainmaputil/imageio.cc\n        apps/avifgainmaputil/printmetadata_command.cc\n        apps/avifgainmaputil/tonemap_command.cc\n        apps/avifgainmaputil/program_command.cc\n        apps/avifgainmaputil/swapbase_command.cc\n    )\n\n    add_executable(avifgainmaputil \"${AVIFGAINMAPUTIL_SRCS}\")\n    if(WIN32)\n        if(MSVC)\n            target_sources(avifgainmaputil PRIVATE apps/utf8.manifest)\n        elseif(MINGW)\n            target_sources(avifgainmaputil PRIVATE apps/utf8.rc)\n        endif()\n    endif()\n    set_target_properties(avifgainmaputil PROPERTIES LINKER_LANGUAGE \"CXX\")\n    target_link_libraries(avifgainmaputil libargparse avif_apps avif avif_enable_warnings)\n\n    if(NOT SKIP_INSTALL_APPS AND NOT SKIP_INSTALL_ALL)\n        install(\n            TARGETS avifenc avifdec avifgainmaputil\n            RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n            ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n            LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        )\n    endif()\nendif()\n\nif(AVIF_BUILD_TESTS)\n    enable_testing() # Allow ctest to be called from top-level directory.\n    add_subdirectory(tests)\n    # An executable on Windows searches for DLLs it is linked with in the same\n    # directory where it resides and in the directories listed in the Path\n    # environment variable. For convenience, copy avif.dll to the tests binary\n    # directory to allow are_images_equal.exe and the test programs find it.\n    if(WIN32 AND BUILD_SHARED_LIBS)\n        add_custom_command(\n            TARGET avif\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy \"$<TARGET_FILE:avif>\" ${CMAKE_CURRENT_BINARY_DIR}/tests\n            COMMENT \"Copying avif.dll to the tests binary directory\"\n        )\n    endif()\nendif()\n\noption(AVIF_BUILD_MAN_PAGES \"Build avif man pages.\" OFF)\nif(AVIF_BUILD_MAN_PAGES)\n    if(AVIF_BUILD_APPS)\n        find_program(PANDOC_EXE pandoc)\n        if(PANDOC_EXE)\n            message(STATUS \"libavif: Using pandoc: ${PANDOC_EXE}\")\n        else()\n            message(FATAL_ERROR \"libavif: Pandoc is missing, bailing out\")\n        endif()\n\n        set(MAN_PAGES avifenc.1 avifdec.1)\n\n        foreach(MAN_PAGE ${MAN_PAGES})\n            add_custom_command(\n                OUTPUT ${MAN_PAGE}\n                COMMAND ${PANDOC_EXE} -s -V \"footer=libavif ${PROJECT_VERSION}\" -f markdown -t man -o\n                        \"${CMAKE_CURRENT_BINARY_DIR}/${MAN_PAGE}\" \"${CMAKE_CURRENT_SOURCE_DIR}/doc/${MAN_PAGE}.md\"\n                DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/doc/${MAN_PAGE}.md\"\n                VERBATIM\n            )\n        endforeach()\n        add_custom_target(man_pages ALL DEPENDS ${MAN_PAGES})\n\n        foreach(MAN_PAGE ${MAN_PAGES})\n            install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/${MAN_PAGE}\" DESTINATION \"${CMAKE_INSTALL_MANDIR}/man1\")\n        endforeach()\n    else()\n        message(WARNING \"libavif: No man pages are built (AVIF_BUILD_MAN_PAGES); AVIF_BUILD_APPS must be on.\")\n    endif()\nendif()\n\nif(NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL)\n    if(BUILD_SHARED_LIBS)\n        set(LIBAVIF_INSTALL_TARGET avif)\n    else()\n        set(LIBAVIF_INSTALL_TARGET avif_static)\n    endif()\n    install(\n        TARGETS ${LIBAVIF_INSTALL_TARGET}\n        EXPORT ${PROJECT_NAME}-config\n        RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n        ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    )\n\n    # Enable CMake configs in VCPKG mode\n    if(BUILD_SHARED_LIBS OR VCPKG_TARGET_TRIPLET)\n        install(EXPORT ${PROJECT_NAME}-config DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\n\n        include(CMakePackageConfigHelpers)\n        write_basic_package_version_file(\n            ${PROJECT_NAME}-config-version.cmake VERSION ${PROJECT_VERSION} COMPATIBILITY SameMajorVersion\n        )\n        install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake\n                DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\n        )\n    endif()\n\n    # Handle both relative and absolute paths (e.g. NixOS) for a relocatable package\n    if(IS_ABSOLUTE \"${CMAKE_INSTALL_INCLUDEDIR}\")\n        set(PC_INCLUDEDIR \"${CMAKE_INSTALL_INCLUDEDIR}\")\n    else()\n        set(PC_INCLUDEDIR \"\\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}\")\n    endif()\n    if(IS_ABSOLUTE \"${CMAKE_INSTALL_LIBDIR}\")\n        set(PC_LIBDIR \"${CMAKE_INSTALL_LIBDIR}\")\n    else()\n        set(PC_LIBDIR \"\\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}\")\n    endif()\n    configure_file(libavif.pc.cmake ${CMAKE_CURRENT_BINARY_DIR}/libavif.pc @ONLY)\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libavif.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\nendif()\nif(NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL)\n    install(FILES include/avif/avif.h include/avif/avif_cxx.h DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/avif\")\nendif()\n\n# ---------------------------------------------------------------------------------------\n# Win32 (Visual Studio) fixups\n\nmacro(avif_set_folder_safe target folder)\n    if(TARGET ${target})\n        set_target_properties(${target} PROPERTIES FOLDER ${folder})\n    endif()\nendmacro()\n\nmacro(avif_exclude_safe target)\n    if(TARGET ${target})\n        set_target_properties(${target} PROPERTIES EXCLUDE_FROM_DEFAULT_BUILD True)\n    endif()\nendmacro()\n\nif(WIN32)\n    set_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n    avif_set_folder_safe(avif \"ext/avif\")\n    if(AVIF_BUILD_EXAMPLES)\n        foreach(EXAMPLE ${AVIF_EXAMPLES})\n            avif_set_folder_safe(${EXAMPLE} \"ext/avif/examples\")\n        endforeach()\n    endif()\n    if(AVIF_ZLIBPNG STREQUAL \"LOCAL\")\n        avif_set_folder_safe(example \"ext/zlibpng\")\n        avif_set_folder_safe(genfiles \"ext/zlibpng\")\n        avif_set_folder_safe(minigzip \"ext/zlibpng\")\n        avif_set_folder_safe(png_static \"ext/zlibpng\")\n        avif_set_folder_safe(zlib \"ext/zlibpng\")\n        avif_set_folder_safe(zlibstatic \"ext/zlibpng\")\n\n        # Don't bother building these targets\n        avif_exclude_safe(example)\n        avif_exclude_safe(genfiles)\n        avif_exclude_safe(minigzip)\n    endif()\n    if(AVIF_JPEG STREQUAL \"LOCAL\")\n        avif_set_folder_safe(JPEG::JPEG \"ext/libjpeg-turbo\")\n    endif()\n    if(AVIF_LIBXML2 STREQUAL \"LOCAL\")\n        avif_set_folder_safe(xml2 \"ext/libxml2\")\n    endif()\nendif()\n\nadd_subdirectory(contrib)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 19.9365234375,
          "content": "Copyright 2019 Joe Drago. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n------------------------------------------------------------------------------\n\nFiles: src/obu.c\n\nCopyright © 2018-2019, VideoLAN and dav1d authors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n------------------------------------------------------------------------------\n\nFiles: third_party/iccjpeg/*\n\nIn plain English:\n\n1. We don't promise that this software works.  (But if you find any bugs,\n   please let us know!)\n2. You can use this software for whatever you want.  You don't have to pay us.\n3. You may not pretend that you wrote this software.  If you use it in a\n   program, you must acknowledge somewhere in your documentation that\n   you've used the IJG code.\n\nIn legalese:\n\nThe authors make NO WARRANTY or representation, either express or implied,\nwith respect to this software, its quality, accuracy, merchantability, or\nfitness for a particular purpose.  This software is provided \"AS IS\", and you,\nits user, assume the entire risk as to its quality and accuracy.\n\nThis software is copyright (C) 1991-2013, Thomas G. Lane, Guido Vollbeding.\nAll Rights Reserved except as specified below.\n\nPermission is hereby granted to use, copy, modify, and distribute this\nsoftware (or portions thereof) for any purpose, without fee, subject to these\nconditions:\n(1) If any part of the source code for this software is distributed, then this\nREADME file must be included, with this copyright and no-warranty notice\nunaltered; and any additions, deletions, or changes to the original files\nmust be clearly indicated in accompanying documentation.\n(2) If only executable code is distributed, then the accompanying\ndocumentation must state that \"this software is based in part on the work of\nthe Independent JPEG Group\".\n(3) Permission for use of this software is granted only if the user accepts\nfull responsibility for any undesirable consequences; the authors accept\nNO LIABILITY for damages of any kind.\n\nThese conditions apply to any software derived from or based on the IJG code,\nnot just to the unmodified library.  If you use our work, you ought to\nacknowledge us.\n\nPermission is NOT granted for the use of any IJG author's name or company name\nin advertising or publicity relating to this software or products derived from\nit.  This software may be referred to only as \"the Independent JPEG Group's\nsoftware\".\n\nWe specifically permit and encourage the use of this software as the basis of\ncommercial products, provided that all warranty or liability claims are\nassumed by the product vendor.\n\n\nThe Unix configuration script \"configure\" was produced with GNU Autoconf.\nIt is copyright by the Free Software Foundation but is freely distributable.\nThe same holds for its supporting scripts (config.guess, config.sub,\nltmain.sh).  Another support script, install-sh, is copyright by X Consortium\nbut is also freely distributable.\n\nThe IJG distribution formerly included code to read and write GIF files.\nTo avoid entanglement with the Unisys LZW patent, GIF reading support has\nbeen removed altogether, and the GIF writer has been simplified to produce\n\"uncompressed GIFs\".  This technique does not use the LZW algorithm; the\nresulting GIF files are larger than usual, but are readable by all standard\nGIF decoders.\n\nWe are required to state that\n    \"The Graphics Interchange Format(c) is the Copyright property of\n    CompuServe Incorporated.  GIF(sm) is a Service Mark property of\n    CompuServe Incorporated.\"\n\n------------------------------------------------------------------------------\n\nFiles: contrib/gdk-pixbuf/*\n\nCopyright 2020 Emmanuel Gil Peyrot. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n------------------------------------------------------------------------------\n\nFiles: android_jni/gradlew*\n\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n------------------------------------------------------------------------------\n\nFiles: third_party/libyuv/*\n\nCopyright 2011 The LibYuv Project Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in\n    the documentation and/or other materials provided with the\n    distribution.\n\n  * Neither the name of Google nor the names of its contributors may\n    be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.78125,
          "content": "# libavif\n\nThis library aims to be a friendly, portable C implementation of the AV1 Image\nFile Format, as described here:\n\n<https://aomediacodec.github.io/av1-avif/>\n\nIt can encode and decode all AV1 supported YUV formats and bit depths (with\nalpha). In addition to the library, encoder and decoder command line tools are\nalso provided (`avifenc` and `avifdec`).\n\nIt is recommended that you check out/use\n[tagged releases](https://github.com/AOMediaCodec/libavif/releases) instead of\njust using the main branch. We will regularly create new versions as bug fixes\nand features are added.\n\n## Command line tool usage\n\n```sh\navifenc -q 75 input.[jpg|png|y4m] output.avif\navifdec output.avif decoded.png\n```\n\nSee `avifenc --help` for all options.\n\n## API usage\n\nPlease see the examples in the \"examples\" directory. If you're already building\n`libavif`, enable the CMake option `AVIF_BUILD_EXAMPLES` in order to build and\nrun the examples too.\n\n## Installation\n\n`libavif` is a package in most major OSs.\n\n### Windows\n\n```sh\nvcpkg install libavif\n```\nYou can also download the official windows binaries on the\n[release](https://github.com/AOMediaCodec/libavif/releases) page.\n\n### macOS\n\nHomebrew:\n```sh\nbrew install libavif\n```\nMacPorts:\n```sh\nsudo port install libavif\n```\n\n### Linux\n\nDebian-based distributions:\n```sh\nsudo apt install libavif-dev\n```\nRed Hat-based distributions:\n```sh\nsudo yum -y install libavif\n```\n\n### MinGW\n\nFor the \"default\" MSYS2 UCRT64 environment:\n```sh\npacman -S mingw-w64-ucrt-x86_64-libavif\n```\n\n## Build Notes\n\nBuilding libavif requires [CMake](https://cmake.org/).\nSee [Build Command Lines](#build-command-lines) below for example command lines.\n\n### Controlling Dependencies\n\nCMake flags like `AVIF_CODEC_AOM`, `AVIF_LIBYUV`, etc. allow enabling or\ndisabling dependencies. They can take three possible values:\n* `OFF`: the dependency is disabled.\n* `SYSTEM`: the dependency is expected to be installed on the system.\n* `LOCAL`: the dependency is built locally. In most cases, CMake can\n  automatically download and build it. For some dependencies, you need to run the\n  associated script in the `ext/` subdirectory yourself. In cases where\n  CMake handles downloading the dependency, you can still call the script in\n  `ext/` if you want to use a different version of the dependency (e.g. by\n  modifying the script) or make custom code changes to it.\n  If a directory with the dependency exists in the `ext/` directory, CMake will\n  use it instead of downloading a new copy.\n\n### Codec Dependencies\n\nNo AV1 codecs are enabled by default. You should enable at least one of them by\nsetting any of the following CMake options to `LOCAL` or `SYSTEM`, depending on\nwhether you want to use a locally built or a system installed version\n(e.g. `-DAVIF_CODEC_AOM=LOCAL`):\n\n* `AVIF_CODEC_AOM` for [libaom](https://aomedia.googlesource.com/aom/) (encoder\n  and decoder)\n* `AVIF_CODEC_DAV1D` for [dav1d](https://code.videolan.org/videolan/dav1d)\n  (decoder)\n* `AVIF_CODEC_LIBGAV1` for\n  [libgav1](https://chromium.googlesource.com/codecs/libgav1/) (decoder)\n* `AVIF_CODEC_RAV1E` for [rav1e](https://github.com/xiph/rav1e) (encoder)\n* `AVIF_CODEC_SVT` for [SVT-AV1](https://gitlab.com/AOMediaCodec/SVT-AV1)\n  (encoder)\n\nWhen set to `SYSTEM`, these libraries (in their C API form) must be externally\navailable (discoverable via CMake's `FIND_LIBRARY`) to use them, or if libavif\nis a child CMake project, the appropriate CMake target must already exist\nby the time libavif's CMake scripts are executed.\n\n### Libyuv Dependency\n\nLibyuv is an optional but strongly recommended dependency that speeds up\ncolor space conversions. It's enabled by default with a value of `SYSTEM`,\nso it's expected to be installed on the system. It can either be built\nlocally instead by using `-DAVIF_LIBYUV=LOCAL` or disabled with\n`-DAVIF_LIBYUV=OFF`.\n\n### Tests\n\nA few tests written in C can be built by enabling the `AVIF_BUILD_TESTS` CMake\noption.\n\nThe remaining tests require [GoogleTest](https://github.com/google/googletest),\nand can be built by enabling `AVIF_BUILD_TESTS` and setting `AVIF_GTEST` to\n`SYSTEM` or `LOCAL`.\n\nAdditionally, fuzzing tests require [fuzztest](https://github.com/google/fuzztest),\nsee also fuzzing test instructions in `ext/oss-fuzz/README.md`.\n\nCode coverage is available by enabling `AVIF_ENABLE_COVERAGE` then building\nthe `avif_coverage` target, e.g. `make avif_coverage -j`. It requires\ncompiling with clang (`-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++`)\nand LLVM must be installed on the system.\n\n### Build Command Lines {#build-command-lines}\n\nThe following instructions can be used to build the libavif library and the\n`avifenc` and `avifdec` tools.\n\n#### Build using installed dependencies\n\nTo link against the already installed `aom`, `libjpeg` and `libpng` dependency\nlibraries (recommended):\n\n```sh\ngit clone -b v1.1.1 https://github.com/AOMediaCodec/libavif.git\ncmake -S libavif -B libavif/build -DAVIF_CODEC_AOM=SYSTEM -DAVIF_BUILD_APPS=ON\ncmake --build libavif/build --parallel\n```\n\n#### Build everything from scratch\n\nFor development and debugging purposes, or to generate fully static binaries:\n\n```sh\ngit clone -b v1.1.1 https://github.com/AOMediaCodec/libavif.git\ncmake -S libavif -B libavif/build -DBUILD_SHARED_LIBS=OFF -DAVIF_CODEC_AOM=LOCAL -DAVIF_LIBYUV=LOCAL -DAVIF_LIBSHARPYUV=LOCAL -DAVIF_JPEG=LOCAL -DAVIF_ZLIBPNG=LOCAL -DAVIF_BUILD_APPS=ON -DCMAKE_C_FLAGS_RELEASE=\"-static\" -DCMAKE_EXE_LINKER_FLAGS=\"-static\"\ncmake --build libavif/build --parallel\n```\n\n## Prebuilt Binaries (Windows)\n\nStatically-linked `avifenc.exe` and `avifdec.exe` can be downloaded from the\n[Releases](https://github.com/AOMediaCodec/libavif/releases) page.\n\n## Development Notes\n\nPlease check the [wiki](https://github.com/AOMediaCodec/libavif/wiki) for extra\nresources on libavif, such as the Release Checklist.\n\nThe libavif library is written in C99. Most of the tests are written in C++14.\n\n### Formatting\n\nUse [clang-format](https://clang.llvm.org/docs/ClangFormat.html) to format the\nsources from the top-level folder (`clang-format-16` preferred):\n\n```sh\nclang-format -style=file -i \\\n  apps/*.c apps/*/*.c apps/*/*.cc apps/*/*.h examples/*.c \\\n  include/avif/*.h src/*.c src/*.cc \\\n  tests/*.c tests/*/*.cc tests/*/*.h\n```\n\nUse [cmake-format](https://github.com/cheshirekow/cmake_format) to format the\nCMakeLists.txt files from the top-level folder:\n\n```sh\ncmake-format -i \\\n  CMakeLists.txt \\\n  tests/CMakeLists.txt \\\n  cmake/Modules/*.cmake \\\n  contrib/CMakeLists.txt \\\n  contrib/gdk-pixbuf/CMakeLists.txt \\\n  android_jni/avifandroidjni/src/main/jni/CMakeLists.txt\n```\n\n---\n\n## License\n\nReleased under the BSD License.\n\n```markdown\nCopyright 2019 Joe Drago. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.669921875,
          "content": "# Security Policy\n\nIf you have discovered a security vulnerability in this project, please report it\nprivately. **Do not disclose it as a public issue.** This gives us time to work with you\nto fix the issue before public exposure, reducing the chance that the exploit will be\nused before a patch is released.\n\nPlease submit the report through [here](https://github.com/AOMediaCodec/libavif/security/advisories/new).\n\nPlease provide the following information in your report:\n\n- Which version you're using\n- How to reproduce the issue\n- A description of the vulnerability and its impact (optional but appreciated)\n\nWe ask that you give us 90 days to work on a fix before public exposure.\n"
        },
        {
          "name": "android_jni",
          "type": "tree",
          "content": null
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "libavif.pc.cmake",
          "type": "blob",
          "size": 0.41015625,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nlibdir=@PC_LIBDIR@\nincludedir=@PC_INCLUDEDIR@\n\nName: @PROJECT_NAME@\nDescription: Library for encoding and decoding .avif files\nVersion: @PROJECT_VERSION@\nLibs: -L${libdir} -lavif\nLibs.private:@AVIF_PKG_CONFIG_EXTRA_LIBS_PRIVATE@\nCflags: -I${includedir}@AVIF_PKG_CONFIG_EXTRA_CFLAGS@\nCflags.private: -UAVIF_DLL\nRequires.private:@AVIF_PKG_CONFIG_EXTRA_REQUIRES_PRIVATE@\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}