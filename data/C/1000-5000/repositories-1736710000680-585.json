{
  "metadata": {
    "timestamp": 1736710000680,
    "page": 585,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tio/tio",
      "stars": 2135,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.1357421875,
          "content": "BasedOnStyle: llvm\nIndentWidth: 4\nAllowShortFunctionsOnASingleLine: None\nKeepEmptyLinesAtTheStartOfBlocks: false\nBreakBeforeBraces: Allman\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "/build\n/subprojects/libinih\n*.swp\n.cache\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 2.1142578125,
          "content": "Maintainer:\nMartin Lund <martin.lund@keep-it-simple.com>\n\nCo-maintainer:\nSylvain LAFRASSE <slymacdev@free.fr>\n\nContributors:\nJesper Larsen <knorr.jesper@gmail.com>\nJeppe Ledet-Pedersen <jlp@gomspace.com>\nJakob Haufe <sur5r@sur5r.net>\nJakub Wilk <jwilk@jwilk.net>\nMartin Hundeboll <martin@hundeboll.net>\nNick Østergaard <oe.nick@gmail.com>\nAdam Borowski <kilobyte@angband.pl>\nRobert Scheck <robert@fedoraproject.org>\nDmitri Goutnik <dg@syrec.org>\nDaniel Engberg <daniel.engberg.lists@pyret.net>\nPetr Vaněk <pv@excello.cz>\nqianfan Zhao <qianfanguijin@163.com>\nHenner Zeller <h.zeller@acm.org>\nRobey Pointer <robey@afero.io>\nLars Kellogg-Stedman <lars@oddbit.com>\narichi <sergey.korabanov@gmail.com>\nGeorge Stark <george-u@yandex.com>\nErik Moqvist <erik.moqvist@gmail.com>\nFabrice Fontaine <fontaine.fabrice@gmail.com>\nAlban Bedel <alban.bedel@aerq.com>\nBjörn Stenberg <bjorn@haxx.se>\nHenner Zeller <h.zeller@acm.org>\nHenrik Brix Andersen <henrik@brixandersen.dk>\nMariusz Midor <dexlab@o2.pl>\nattila-v <attila_v@index.hu>\nYin Fengwei <fengwei.yin@intel.com>\nLiam Beguin <liambeguin@gmail.com>\nPeter Collingbourne <pcc@google.com>\ng0mb4 <gomba007@gmail.com>\nZeroMemoryEx on GitHub\nGeorge Joseph <g.devel@wxy78.net>\nRobert Snell <rcsnell@ncf.ca>\nRui Chen <rui@chenrui.dev>\nRalph Siemsen <ralphs@netwinder.org>\nVictor Oliveira <rhapsodyv@gmail.com>\nAttila Veghelyi <aveghelyi@dension.com>\nVyacheslav Patkov <slava@patkov.ru>\nBill Hass <billhass@umich.edu>\nPeter van Dijk <peter@7bits.nl>\nBraden Young <braden@somewearlabs.com>\nWes Koerber <wkoerber@acsd4u.com>\nHiFiPhile <admin@hifiphile.com>\nPaul Ruizendaal <pnr@planet.nl>\nFredrik Svedberg <fredrik@svedberg.us>\nSebastian <sebastian.krahmer@gmail.com>\nMingjie Shen <shen497@purdue.edu>\nBrian <bayuan@purdue.edu>\nDavis C <davisclaib@gmail.com>\nKhazAkar <damianzrb@zohomail.eu>\nEliot Alan Foss <eliotfoss@gmail.com>\nRobert Lipe <robertlipe@gpsbabel.org>\nHeinrich Schuchardt <heinrich.schuchardt@canonical.com>\nTomka Gergely <tomkatudor@gmail.com>\nSteve Marple <stevemarple@googlemail.com>\nkonosubakonoakua <ailike_meow@qq.com>\nKeith Hill <k_hill@unitronlp.com>\n\nThanks to everyone who has contributed to this project.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.6923828125,
          "content": "Copyright (c) 2014-2022  Martin Lund <martin.lund@keep-it-simple.com>\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License version 2\nalong with tio, in a file named COPYING.  If not, see\n<http://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 59.158203125,
          "content": "\n=== tio v3.8 (2024-11-30) ===\n\n\nChanges since tio v3.7 (2024-08-31):\n\n * Rename git version to simply version\n\n * Clean up lua API\n\n   Rename modem_send() to send()\n   Rename send to write()\n\n * Zero initialize buffer in read_string()\n\n * Use version from git\n\n * Fix memory leak in base62_encode()\n\n * Fix name declaration conflict with socket send()\n\n * Add clang-format spec\n\nKeith Hill:\n\n + Add system timestamps to lua read() and new lua read_line() per global options\n + Add missing timestamp-format epoch\n + Update send_ to use fsync and tcdrain like normal tty_sync does\n + Rework read_line to save partial line at timeout\n + Simplified read_line to reduce cyclomatic complexity\n + renamed example files read.lua and read_line.lua\n + moved #define READ_LINE_SIZE to top of file\n + renamed g_linebuf to linebuf, and moved it into read_line as a static variable\n\n\n\nChanges since tio v3.6 (2024-07-19):\n\n * Remove unnecessary sync in line input mode\n\n   This caused a problem for some highly timing sensitive modem read-eval-print\n   loops because the input line and line termination characters (cr/nl) would be\n   shifted out on the UART with too big delay inbetween because of two\n   syncs.\n\n * Fix socket send call on platforms without MSG_NOSIGNAL\n\n   To fix build issue encountered on MacOS Catalina but may apply to other\n   platforms.\n\nSteve Marple:\n\n * Add \"epoch\" timestamp option\n\n   Add an option that prints the timestamp as the number of seconds since\n   the Unix epoch.\n\nTomka Gergely:\n\n * The log-directory options is not read from the configuration file.\n\n\n\nChanges since tio v3.5 (2024-06-29):\n\n * Add configuration file include directive\n\n   To include the contents of another configuration file simply do e.g.:\n\n   [include raspberrypi.conf]\n\n   Also, included file can include other files which can include other\n   files etc.\n\n   This feature is useful for managing many configuration files and sharing\n   configuration files with others.\n\n * Mention how to list key commands in help output\n\n * Fix hex output mode when using normal input mode\n\n   In this combination of modes the input character was not forwarded to\n   the tty device. This fix makes sure it is forwarded.\n\n * Fix uptime on MacOS\n\n   On MacOS the birth time is apparently not available so we use\n   modification time instead.\n\n * Improve warning upon failing connect\n\n   Add device path to warning when connect fails.\n\n * Fix crashy search_reset() on macOS\n\n * Clean up shadow variable\n\n * Clean up readline code\n\n * Improve listing of long device names\n\n * Fix listing of serial devices on macOS\n\nHeinrich Schuchardt:\n\n * Print correct 'Done' timestamp for X- and Y-modem transfers\n\n   Call tio_printf() after completing xymodem_send().\n\nRobert Lipe:\n\n * Recompute listing_device_name_length_max for MacOS case, too.\n\n\n\nChanges since tio v3.4:\n\n * Clarify input and output direction of map flags\n\n * Rename mapping flag MSB2LSB to IMSB2LSB\n\n   This is the correct naming since we are changing the input bit order on\n   input from the serial device.\n\n * Add OIGNCR mapping flag\n\n   Ignores CR on output to serial device.\n\n * Fix line input mode ignoring characters ABCD\n\n * Fix tainted print\n\nJakob Haufe:\n\n * Fix typos\n\n\n\nChanges since tio v3.3:\n\n * Update configuration output\n\n * Clean up script run interaction text\n\n * Fix unbounded writes\n\n * Add history and editing feature to line input mode\n\n   Use up and down arrow keys to navigate history.\n\n   Use left and right arrow keys to move cursor back and forth.\n\n   We try mimic the behaviour of GNU readline which we can not use because\n   we also need to react to key commands.\n\n * Reuse socket address\n\n   To avoid having to wait for socket timeout when restarting server.\n\n * Fix line input mode\n\n   Fix so that ABCD are no longer ignored.\n\n * Make sure ICRNL, IGNCR, INLCR take effect\n \n * Include correct header for poll()\n\n * Add group write permission to xymodem received file\n\n * Fix missing open() flags in xymodem_receive()\n\nVyacheslav Patkov:\n\n * Show current mappings in the configuration printout\n\n * Use \"ctrl-t m\" to change mappings interactively\n\n * Prompt for Lua script or shell command in interactive session\n\nEliot Alan Foss:\n\n * Added support to receive XMODEM-CRC files from the connected serial port.\n\n\n\nChanges since tio v3.2:\n\n * Force destructive backspace when using local echo\n\n   Only takes effect in normal output mode.\n\n * Fix local-echo in configuration file\n\n * Clean up includes\n\n * Force socket write operation to ignore any signals\n\n * Man page cleanup\n\n\n\nChanges since tio v3.1:\n\n * Do not print error when using --list with broken config file\n\n * Clean up completion script\n\n * Add option '--exec <command>' for running shell command\n\n   Runs shell command with I/O redirected to device.\n\n * Make sure all error output is directed to stderr\n\n * Fix shadow variables\n\n * Update man page\n\n * Fix build on older GNU/Linux systems without statx\n\n * Fix line ending in --list output\n\n * Print location of configuration file in --list output\n\n * Fix alignment of profile listing\n\n\n\nChanges since tio v3.0:\n\n * Improve --list feature on non-linux platform\n\n * List available profiles in --list output\n\n * Always message when saving log file\n\n * Add support for using TID as device in config file\n\n * Fix use of invalid flag with regexec()\n\n * Fix potential buffer overflow in match_and_replace()\n\n * Fix profile autocompletion\n\n * Remove inih dependency from CI builds\n\n * Replace use of stat() with fstat()\n\n   For better security.\n\n * Fix hexN output mode\n\n * Update pattern matching example\n\n * Fix submenu response when invalid key hit\n\n * Replace inih with glib key file parser\n\n   After including the use of glib we might as well replace inih\n   with the glib key file parser.\n\n   All configuration file parsing has been reworked and also the options\n   parsing has been cleaned up, resulting in better and stricter\n   configuration file and option value checks.\n\n   Compared to old, configuration files now requires any default\n   configurations to be put in a group/section named [default].\n\n   Configuration file keywords such as \"enable\", \"disable\", \"on\",\n   \"off\", \"yes\", \"no\", \"0\", \"1\" have been retired. Now only \"true\" and\n   \"false\" apply to boolean configuration options. This is done to simplify\n   things and avoid any confusion.\n\n   The pattern option feature has been reworked so now the user can now\n   access the full match string and any matching subexpression using the\n   %mN syntax.\n\n   For example:\n\n   [usb devices]\n   pattern = usb([0-9]*)\n   device = /dev/ttyUSB%m1\n\n   Then when using tio:\n   $ tio usb12\n\n      %m0 = 'usb12'  // Full match string\n      %m1 = 12       // First match subexpression\n\n   Which results in device = /dev/ttyUSB12\n\n * Remove CircleCI\n\n   Replaced with github workflow CI.\n\n * Add github workflow for Ubuntu build\n\n * Enable extended pattern matching\n\n   So that the exclude options can also work as include using special\n   pattern syntax.\n\n   For example, to only include /dev/ttyUSB* devices simply do:\n\n   $ tio --exclude-devices=!(/dev/ttyUSB*) --list\n\n   See the man page of fnmatch() for all available extended pattern\n   options.\n\n * Update lua read() description\n\nRui Chen:\n\n * fix: add build patch for `FNM_EXTMATCH`\n\n * feat: add macOS workflow\n\n * fix: add macOS build patch for `fs_get_creation_time`\n\n\n\nChanges since tio v2.8:\n\n * Simplify lua line manipulation API\n\n   Collapses lua high(), low(), toggle(), config_high(), config_low(),\n   config_apply() into one simple function:\n\n   set{<line>=<state>, ...}\n\n   Line can be any of DTR, RTS, CTS, DSR, CD, RI.\n\n   State is high, low, or toggle.\n\n   Example:\n   script = set{DTR=high, RTS=low}; msleep(100); set{DTR=low, RTS=high}; msleep(100); set{RTS=low}\n\n   Notice the use of {} instad of () when calling the set function. This is\n   required to pass parameters by name in lua.\n\n * Disable DEC Special Graphics at exit if vt100\n\n   If a vt100 terminal receives the Shift In character '\\016' it will\n   enable the 7 bit DEC Special Graphics character set used for line drawing.\n\n   For most users this can happen due to line noise from the tty device and\n   will likely mess up your terminal even after tio exits.\n\n   To better handle this we want to make sure that tio disables this mode\n   by sending the Shift Out character '\\017' at exit.\n\n   This mechanism will only activate if environment variable TERM assumes\n   value \"vt100\".\n\n * Add hexN output mode\n\n   Adds support for hexN mode where N is a number in the range 1 to 4096\n   which defines how many hex values will be printed before a line break.\n\n   In short, it defines the width of the hex output.\n\n   In this mode, if timestamps are enabled they will be added to each hex\n   line.\n\n * Rename sub-config to profile\n\n   Because better naming.\n\n * Use lua io.write() instead of print()\n\n   io.write() gives better output control as print() is hardcoded to always\n   print a newline.\n\n * Add new ways to manage serial devices\n\n    * Rename --list-devices to --list\n\n    * Rename --no-autoconnect to --no-reconnect\n\n    * Switch -l and -L options\n\n      * -l now lists available serial devices\n\n      * -L enables log to file\n\n    * Add option --auto-connect <strategy>\n\n      * Supported strategies:\n\n        * \"new\" - Waits to connect first new appearing serial device\n\n        * \"latest\" - Connects to latest registered serial device\n\n        * \"direct\" - Connect directly to specified serial device (default)\n\n    * Add options to exclude serial devices from auto connect strategy by\n      pattern\n\n      * Supported exclude options:\n\n        * --exclude-devices <pattern>\n\n          Example: '--exclude-devices \"/dev/ttyUSB2,/dev/ttyS?\"'\n\n        * --exclude-drivers <pattern>\n\n          Example: '--exclude-drivers \"cdc_acm\"'\n\n        * --exclude-tids <pattern>\n\n          Example: '--exclude-tids \"yW07,bCC2\"'\n\n        * Patterns support '*' and '?'\n\n    * Connect to same port/device combination via unique topology ID (TID)\n\n      * Topology ID is a 4 digit base62 encoded hash of a device topology\n        string coming from the Linux kernel. This means that whenever you\n        plug in the same e.g. USB serial port device to the same USB hub\n        port connected via the exact same hub topology all the way to your\n        computer, you will get the same unique TID.\n\n      * Useful for stable reconnections when serial device has no serial\n        device by ID\n\n      * For now, only tested on Linux.\n\n    * Reworked and improved listing of serial devices to show serial devices:\n\n      * By device\n\n        * Including TID, uptime, driver, and description.\n\n        * Sorted by uptime (newest device listed last)\n\n      * By unique topology ID\n\n      * By ID\n\n      * By path\n\n    * Add script interface 'list = tty_search()' for searching for serial\n      devices.\n\n * Clean up timestamp enum definition\n\n * Add missing options to show configuration\n\n * Update description of mute option\n\n * Add lua read_string() function\n\n * Don't forget to log output in lua expect()\n\n * Generalize automatic login example for Linux\n\n * Fix log output in hex output mode\n\n * Add timeout based timestamps in hex output mode\n\n   This change reintroduces timestamping in hex output mode but based on\n   timeout instead of new lines which made no sense. This means that\n   timestamps will only be printed when timeout time has elapsed with no\n   output activity from serial device.\n\n   Adds option --timestamp-timeout <ms> for setting the timeout value in\n   milliseconds.\n\n   Defaults to 200 ms.\n\n * Improve switched messages\n\n * Extend lua expect() to also return matched string\n\n * Add automatic login script example\n\n * Organize examples directory\n\n * Introduce basic line input mode\n\n * Cleanup global variable name shadowing\n\nDavis C:\n\n * Updated login example with new expect logic\n\n * Reset buffer size at start of expect\n\n * Return 1 when `expect` matches\n\n\n\nChanges since tio v2.7:\n\n * Rework resolve_config_file()\n\n * Rework line_pulse_duration_option_parse()\n\n   Introduce proper sscanf() checks.\n\n * Rework rs485_parse_config()\n\n   Introduce proper sscanf() checks.\n\n * Clean up file descriptor name shadowing\n\n * Add missing header guard\n\n * Upgrade inih subproject\n\n * Remove options --response-wait, --response-timeout\n\n   Remove options and rework input handling so it is possible to do the\n   same thing but via script which is much more flexible.\n\n   These options were always a bit of a hardcoded solution. With the new\n   script expect feature we can wait for any type of response.\n\n   For example, pipe command to serial device and wait for line response within 1 second:\n\n   $ echo \"*IDN?\" | tio /dev/ttyACM0 --script \"expect('\\r\\n', 1000)\" --mute\n\n * Add lua exit(code)\n\n * Add timeout feature to expect()\n\n * Add lua expect(string)\n\n   Add simple expect functionality.\n\n   The expect(string) function will wait for input from the tty device and\n   only return when there is a string match. Regular expressions are\n   supported.\n\n   Example:\n\n   script = expect('password:'); send('my_password\\n')\n\n * Add lua send(string)\n\n * Add lua modem_send(file,protocol)\n\n * Fix xymodem error messages\n\n * Rework x/y-modem transfer command\n\n   Remove ctrl-t X option and instead introduce submenu to ctrl-t x option\n   for picking which xmodem protocol to use.\n\n * Update README\n\n * Cleanup options\n\n * Add independent input and output mode\n\n   Replaces -x, --hexadecimal option with --input-mode and --output-mode\n   so it is possible to select hex or normal mode for both input and output\n   independently.\n\n   To obtain same behavior as -x, --hexadecimal use the following\n   configuration:\n\n   input-mode = hex\n   output-mode = hex\n\n * Fix file descriptor handling on macOS\n\n * Add tty line configuration script API\n\n   On some platforms calling high()/low() to switch line states result in\n   costly system calls which makes it impossible to switch two or more tty\n   lines simultaneously.\n\n   To help solve this timing issue we introduce a tty line state\n   configuration API which can be used instead of using\n   high()/low().\n\n   Using config_low(line) and config_high(line) one can set up a new line\n   state configuration for multiple lines and then use config_apply() to\n   finally apply the configuration. This will result in only one system\n   call to instruct the serial port drive to switch all the configured line\n   states which should help ensure that the lines are switched\n   simultaneously.\n\n   Example:\n\n   script = config_high(DTR); config_low(RTS); config_apply()\n\n * Add ONULBRK mapping flag\n\n   Add ONULBRK mapping to map nul (zero) to send break signal on output.\n\n   This is useful if one needs to e.g. send the break signal to the tty\n   device when connected via socket.\n\n * Add --log-directory option\n\n   For specifying directory path in which to save automatically named log\n   files.\n\n * Add Lua scripting feature\n\n   Add support for running Lua scripts that can manipulate the tty control\n   lines. Script is activated automatically on connect or manually via in\n   session key command.\n\n   The Lua scripting feature opens up for many possibilities in the future\n   such as adding expect like functionality to easily and programatically\n   interact with the connected device.\n\n * Invert line states to reflect true electrical level\n\n * Add support for disabling prefix key handling\n\n   To disable prefix key input handing simply set prefix-ctrl-key to\n   'none'.\n\n   Based on original patch from Sebastian Krahmer.\n\n * Add meson man pages install option\n\n   Defaults to installing man pages.\n\nHiFiPhile:\n\n * Poll on serial port read instead of delay.\n\n * Add Xmodem-CRC support.\n\n * CYGWIN: Fix port auto connection.\n\nMingjie Shen:\n\n * Check return values of sscanf()\n\n   Failing to check that a call to 'sscanf' actually writes to an output\n   variable can lead to unexpected behavior at reading time.\n\nJakob Haufe:\n\n * Support NO_COLOR env variable as per no-color.org\n\n * Fix troff warning\n\n   .eo/.ec sections seemingly need explicit empty lines using .sp\n\n   Otherwise, troff complains:\n\n   troff:<standard input>:535: warning: expected numeric expression, got '\\'\n   troff:<standard input>:538: warning: expected numeric expression, got '\\'\n   troff:<standard input>:541: warning: expected numeric expression, got '\\'\n\nFredrik Svedberg:\n\n * Add map FF to ESC-c on input\n\n   Added map of form feed to ESC-c on input for terminals that\n   do not clear screen on ^L but do on ESC-c.\n\nBrian:\n\n * Add CodeQL Workflow for Code Security Analysis\n\nSylvain LAFRASSE:\n\n * Fix double call of tty_disconnect() on macOS/Darwin.\n\n\n\nChanges since tio v2.6:\n\nPaul Ruizendaal:\n\n * Add xmodem and ymodem file send support\n\nHiFiPhile:\n\n * tty_stdin_input_thread(): write to pipe only if byte_count > 0.\n\n * Ignore EINTR error.\n\n * CYGWIN: Add support for \"COM*\" naming.\n\nWes Koerber:\n\n * chore: reorder log-strip and log-append\n\n   reorder to maintain consistency with documentation\n\n * chore: update readme, bash completion, man page\n\n * fix: support --log-append in cli options\n\n\n\nChanges since tio v2.5:\n\n * Remove warning when using pattern option\n\n * Add --log-append option\n\n   Add --log-append option which makes tio append to any existing log file.\n\n   This also changes the default behavior of tio from appending to\n   overwriting any existing log file. Now you have to use this new option\n   to make tio append.\n\n * Update man page\n\n * Update README\n\n * Fix line termination for response wait feature\n\n   The response wait feature waited for a line response, a string\n   terminated with either CR or NL. However, some devices may send a CR and\n   then their line content and then NL. This means tio will quit before\n   receiving and printing the line response. To solve this we simply ignore\n   the CR character and only consider lines terminated with a NL character.\n\n   This should work for all devices as lines are AFAIK always terminated\n   with either CRNL or a NL.\n\n * Update tty device listing configuration\n\n   Cleanup and add FreeBSD tty device listing support.\n\nBraden Young:\n\n * Move map variables to tty to keep them all in one spot\n\n * Configure socket mapping flags from tty parsing logic. Remove duplicate parsing logic in socket\n\n * Support input mapping modes for sockets\n\nJosh Soref:\n\n * Various spelling fixes\n\nPeter van Dijk:\n\n * avoid \"warning: unused parameter\" on setspeed stub\n\n * use right /dev/ path on Haiku\n\nBill Hass:\n\n * Update README with details on snap confinement\n\n\n\nChanges since tio v2.4:\n\n * Update configuration file documentation\n\n   Rename .tiorc to .tioconfig, tiorc to config, etc.\n\n * Add support for $HOME/.tioconfig\n\n    Replaces what used to be $HOME/.tiorc\n\n * Fix double prefix key regression\n\nVyacheslav Patkov:\n\n * Better error checking in config file, rename the file\n\n   Accept \"true\", \"enable\", \"on\", \"yes\", \"1\" as true values, their\n   counterparts as false ones. Check integer values for errors and range.\n   Warn about ignored (e.g. misspelled) options.\n\n   Check getenv() return value for NULL.\n\n   Rename \"tiorc\" to \"config\", as it's a static INI file, not an executable\n   \"run commands\".\n\n\n\nChanges since tio v2.3:\n\n * Add threaded input handling\n\n   To make tio more responsive to quit and I/O flush key command when main I/O\n   thread is blocked on output.\n\n * Fix so that is it possible to quit tio in tio etc.\n\n   Fix regression so that it is possible to send the prefix key code to the\n   remote tio session without local tio session reacting to same key code\n   (quitting etc.).\n\n * Add key command to toggle log on/off\n\n    Add key command 'ctrl-t f' which will toggle log on/off.\n\n    If no log filename has been specified via the 'log-filename' option then\n    tio will automatically generate a new log filename every time the log\n    feature is toggled on. Meaning, when toggled multiple times, multiple\n    log files will be generated.\n\n    However, if a log filename has been specified, tio will only write and\n    append to that same file.\n\n\n\nChanges since tio v2.2:\n\n * Add mute feature\n\n   This will make tio go fully silent and not print anything.\n\n * Rename config variable 'tty' to 'device'\n\n * Deprecate tty config keyword but keep it around for now\n\n * Update show config\n\n * Update example tiorc\n\n\n\nChanges since tio v2.1:\n\n * Add shell completion of sub-configuration names\n\n   Does not work with sub configuration names that contains one or more\n   white spaces.\n\n * Beautify help\n\n * Fix error message\n\n * Simplify configfile implementation\n\n\n\nChanges since tio v2.0:\n\n * Fix output line delay\n\n   Apply output line delay on lines ending with \\n.\n\n   On most systems lines ends with \\n or \\r\\n.\n\n * Do not print timestamps in hex mode\n\n * Improve input mechanism in hex mode\n\n   Print the 2 character hex code that you input in hex mode but then\n   delete it before sending. This way it is easier to keep track of what\n   you are inputting. It basically mimics the ctrl-shift-u input mechanism\n   that is used to input unicode.\n\n * Add support for sending prefix character to serial device\n\n   Do so by inputting prefix key twice, e.g. input ctrl-t ctrl-t to send\n   ctrl-t character to serial device.\n\n * Clean up indentation\n\n * Update example tiorc\n\nAttila Veghelyi:\n\n * Add bit reverse order feature\n\n\n\nChanges since tio v1.47:\n\n * Handle stale unix socket file\n\n   Delete existing unix socket file if it is tested to be stale, meaning no\n   one is listening on it.\n\n * Add visual or audible alert support on connect/disconnect\n\n   The feature is detailed via the following option:\n\n    --alert none|bell|blink\n\n      Set alert action on connect/disconnect.\n\n      It will sound the bell once or blink once on successful connect.\n      Likewise it will sound the bell twice or blink twice on disconnect.\n\n      Default value is \"none\" for no alert.\n\n * Add experimental RS-485 support\n\n   Many modern RS-485 serial devices such as the ones from FTDI already\n   operate in RS-485 mode by default and will work with tio out of the box.\n   However, there are some RS-232/485 devices which need to be switched\n   from e.g. RS-232 to RS-485 mode to operate accordingly on the physical\n   level.\n\n   This commit implements the switching mechanism and interface required to\n   enable RS-485 mode. It only works on Linux and with serial devices which\n   use device drivers that support the Linux RS-485 control interface.\n\n   The RS-485 feature is detailed via the following options:\n\n    --rs-485                           Enable RS-485 mode\n    --rs-485-config <config>           Set RS-485 configuration\n\n   Set the RS-485 configuration using the following key or key value pair\n   format in the configuration field:\n\n    RTS_ON_SEND=value             Set logical level (0 or 1) for RTS pin when sending\n    RTS_AFTER_SEND=value          Set logical level (0 or 1) for RTS pin after sending\n    RTS_DELAY_BEFORE_SEND=value   Set RTS delay (ms) before sending\n    RTS_DELAY_AFTER_SEND=value    Set RTS delay (ms) after sending\n    RX_DURING_TX                  Receive data even while sending data\n\n   If defining more than one key or key value pair, they must be comma\n   separated.\n\n   Example use:\n\n     $ tio /dev/ttyUSB0 --rs-485 --rs-r485-config=RTS_DELAY_AFTER_SEND=50,RX_DURING_TX\n\n * Add line response feature\n\n   Add a simple line response feature to make it possible to send e.g. a\n   command string to your serial device and easily receive and parse a line\n   response.\n\n   This is a convenience feature for simple request/response interaction\n   based on lines. For more advanced interaction the socket feature should\n   be used instead.\n\n   The line response feature is detailed via the following options:\n\n    -r, --response-wait\n\n   Wait for line response then quit. A line is considered any string ending\n   with either CR or NL character. If no line is received tio will quit\n   after response timeout.\n\n   Any tio text is automatically muted when piping a string to tio while in\n   response mode to make it easy to parse the response.\n\n    --response-timeout <ms>\n\n   Set timeout [ms] of line response (default: 100).\n\n   Example:\n\n   Sending a string (SCPI command) to a test instrument (Korad PSU) and\n   print line response:\n\n    $ echo \"*IDN?\" | tio /dev/ttyACM0 --response-wait\n    KORAD KD3305P V4.2 SN:32477045\n\n * Fix potential sscanf() overflow\n\n * Only print version on '--version'\n\n * Remove duplicate show config entry of DTR pulse duration\n\n * Remove MacPorts instructions\n\n   Remove instructions for MacPorts because the port has no maintainer and\n   the port build definition is broken (missing dependency on libinih etc.).\n\n   It is recommended to use brew instead.\n\nPeter Collingbourne:\n\n * Ignore SIGPIPE signals\n\n   If the remote end of a socket is closed between when an input character\n   is received from the serial port and when it is written to the socket,\n   tio will receive a SIGPIPE signal when writing the character to the\n   socket, which will terminate the program. To prevent this, ignore the\n   signal, which will cause write(2) to return -EPIPE, causing tio to close\n   the socket.\n\n\n\nChanges since tio v1.46:\n\n * Enable log feature when using --log-filename\n\n   No reason to not assume that the user wants to enable log when the\n   --log-filename is used. This way uses can skip the use of --log to\n   enable log.\n\n * Enable line buffering of log\n\n   Replace flushing/writing of log at every log write operation with line\n   buffering, meaning log will be written line by line to make it more I/O\n   friendly but still update frequently.\n\n * Avoid invalid hex character messages when switching hex mode\n\n * Force flushing of log writes\n\n * Renamed tty_flush() to tty_sync()\n\n * Fix sync output to serial port\n\n   Using fsync() on filedescriptors for serial ports can not be relied on.\n   Add use of tcdrain() to make sure data has been written by the serial\n   port before proceeding.\n\n   This fixes a problem with tio sometimes not writing piped input data to\n   the serial port before exiting which results in the pending writes being\n   cancelled / flushed.\n\n * Clean up tty_flush()\n\n * Force frequent sync on tty_flush()\n\n * Update README\n\n * Update example tiorc\n\n * Quit from non-interactive mode using ctrl-c\n\n   When piping to tio it will automatically enter \"non-interactive\" mode\n   which means it will not react to any input key sequences but simple read\n   the input stream and write it to the tty device.\n\n   This also means that ctrl-t q can not be used to quit and so tio would\n   hang forever when used in non-interactive mode.\n\n   This change allows to send the standard termination signal by pressing\n   ctrl-c on tio in non-interactive mode to make it quit.\n\n * Make sure we flush output buffer to tty when piping to tio\n\n * Do not return false read error when piping to tio\n\n * Show error message when reading port settings fail\n\nVictor Oliveira\n\n * add MacPorts install instructions\n\n\n\nChanges since tio v1.45:\n\n * Rework toggle and pulse feature to support all lines\n\n   Replace existing toggle and pulse key commands with the following\n   generalized key commands which allows to toggle or pulse all serial port\n   lines:\n\n    ctrl-t g   Toggle serial port line\n    ctrl-t p   Pulse serial port line\n\n   When used, user will be asked which serial line to toggle or pulse.\n\n   Also introduce --line-pulse-duration option for setting specific pulse\n   duration in milliseconds for each serial line using a key value pair\n   format. Each key represents a serial line. The following keys are\n   available: DTR, RTS, CTS, DSR, DCD, RI.\n\n   Example:\n\n    $ tio /dev/ttyUSB0 --line-pulse-duration DTR=200,RTS=300,RI=50\n    \n   Likewise, the pulse duration can also be set via configuration file\n   using the line-pulse-duration variable:\n    \n    line-pulse-duration = DTR=200,RTS=300,RI=50\n\n * Upgrade inih wrap to r56\n\n * Optimization\n\n * Add example configuration file\n\n\nRalph Siemsen:\n\n * Fix relative timestamps\n\n   Fix the display of relative timestamps. The hack of subtracting 3600\n   only works if you happen to be in a time zone that is one hour away from\n   UTC. When subtracting two time values, the result is an absolute\n   quantity (interval). These should be displayed as-is; without local time\n   zone nor daylight saving correction. Hence gmtime() instead of\n   localtime().\n\n\n\nChanges since tio v1.44:\n\n * Introduce bold color option\n\n   Introduce \"bold\" color option which only apply bold color formatting to\n   existing system color.\n\n   Also make \"bold\" the default color option.\n\n   Fixes all white issue with black on white tio text.\n\n * Update README\n\n * Change 'ctrl-t T' to 'ctrl-t t' for timestamp toggle\n\n * Add support for remapping prefix key\n\n   Make it possible to remap the prefix key (default: ctrl-t) by setting\n   the prefix-ctrl-key variable in the configuration file.\n\n   Allowed values are in the range a..z.\n\n   Example, to set the prefix key to ctrl-a simply do:\n\n   prefix-ctrl-key = a\n\n * Add plaintext man page\n\nRui Chen:\n\n * docs: add homebrew installation note\n\n * fix macOS build\n\n * fix compilation error\n\n\n\nChanges since tio v1.43:\n\n * Simplify arbitrary baudrate code\n\n * Cleanup error printing routines\n\n   Clean up so that only the following error related printing functions are\n   used: tio_error_printf(), tio_error_printf_silent(),\n   tio_warning_printf().\n\n   A session mode switch is introduced for error printing so that it will\n   print error messages with better formatting depending on in or out of\n   session.\n\n * Update README\n\n * Clean up man page\n\n * Add support for space parity\n\n * Rename EOL delay to Output line delay\n\n * Replace -U,--upcase with mapping flag OLTU\n\n * Simplify tty_write()\n\nRobert Snell:\n\n * Additional commands: EOL delay, lower to upper translation, added mark parity\n\n   Added command line options:\n   -O, --eol-delay to have a separate delay for end of line\n   -U, --upper to enable translation of lower case alpha to upper case\n\n   Added ability to set mark parity.\n   Added ctrl-t U key sequence to allow enable/disable lower case alpha to\n   upper case during a session.\n   Updated Man page with command line options, ctrl-t sequences and\n   configuration file options.\n   Updated README.md, with above information.\n\n\n\nChanges since tio v1.42:\n\n * Add '24hour-delta' timestamp option\n\n   When enabled this option will timestamp new lines with the time elapsed\n   since the line before.\n\n   This is a very useful feature to identify which events takes the most\n   time.\n\n * Improve description of socket option\n\n * Rename ChangeLog to NEWS\n\n * Update README\n\n * Update man page\n\nGeorge Joseph:\n\n * Add Pulse DTR command\n\n   MCUs like the ESP32 can be reset if the serial port DTR line is\n   pulsed for a short time.  You could just type CTRL-t d CTRL-t d\n   but that's a little awkward since you have to lift your finger\n   off the CTRL key to type the Ds.  Now you can just type CTRL-T D.\n\n   * Added new command \"D\" to pulse the DTR line.  I.E.  Toggle its\n     state twice with a configurable duration between toggles.\n\n   * Added new config/command line option \"--dtr-pulse-duration\"\n     to set the duration between the DTR state toggles.  The default\n     is 100ms.\n\n\n\nChanges since tio v1.41:\n\n * Update man page\n\nZeroMemoryEx:\n\n * Handle malloc failure\n\nSylvain LAFRASSE:\n\n * Add missing 'string.h' include.\n\n\n\nChanges since tio v1.40:\n\n * Rename --hex-mode to --hexadecimal\n\n * Enable buffered writing\n\n   Read block of bytes from input and process same block for output.  This\n   will speed things up by reducing I/O overhead.\n\n * Enable buffered reading\n\n   Read block of bytes from input and process byte by byte for output. This\n   will speed things up by reducing I/O overhead.\n\n * Refactoring\n\n * Cleanup stdout flushing\n\n   Flushing is not needed since we disabled buffering of stdout.\n\n * Simplify stdout_configure() code\n\n * Simplify stdin_configure() code\n\n * Update man page\n\n * Update README\n\n\n\nChanges since tio v1.39:\n\n * Add config support for log-strip\n\n * Add config support for hex-mode\n\n * Rename --hex to --hex-mode\n\n * Fix completion for -e, --local-echo\n\n * Ignore newlines in hex output\n\n * Fix newline in warning_printf()\n\n * Fix ansi_printf_raw() in no color mode\n\n * Enter non-interactive mode when piping to tio\n\n   Add support for a non interactive mode which allows other application to\n   pipe data to tio which then forwards the data to the connected serial\n   device.\n\n   Non interactive means that tio does not react to interactive key commands\n   in the incoming stream. This allows users to pipe binary data directly\n   to the connected serial device.\n\n   Example use:\n\n   $ cat commands.txt | tio /dev/ttyUSB0\n\n * Also strip backspace from log\n\n   To make log strip feature consistent so that we remove all unprintable\n   control characters and escape sequences.\n\n * Socket code cleanup\n\n * Cleanup man page\n\n * Rename --log-filename to --log-file\n\nYin Fengwei:\n\n * Allow strip escape sequence characters from log file\n\n   The log without escape key stripped is like:\n\n    ^M[12:47:17] ACRN:\\>\n    ^M[12:47:17] ACRN:\\>lasdfjklsdjf\n    ^M\n    ^M[12:47:18] Error: Invalid command.\n    ^M[12:47:19] ACRN:\\>\n    ^M[12:47:26] ACRN:\\>\n    ^M[12:47:26] ACRN:\\>sdafkljsdkaljfklsadjflksdjafjsda^H ^H^H...\n    ^M\n    ^M[12:47:31] Error: Invalid command.\n\n   After strip escape key, the log is like:\n\n    [12:49:18] ACRN:\\>\n    [12:49:19] ACRN:\\>\n    [12:49:19] ACRN:\\>ls\n\n    [12:49:19] Error: Invalid command.\n    [12:49:19] ACRN:\\>\n    [12:49:19] ACRN:\\>dfaslhj\n\n    [12:49:24] Error: Invalid command.\n\n   Beside escape key, it also handle backspace key as well.\n\n\n\nChanges since tio v1.38:\n\n * Improve key command response for local echo and timestamp\n\n * Fix invalid hex character error message\n\n * Make sure only matched config section is parsed\n\n * Add support for \"disable\" keyword in config file\n\n * Unify error message formating\n\n * Cleanup list devices code\n\n * Fix command-line tty-device|config parsing\n\n   Allow user to add options on both sides of the provided config argument.\n\n   For example:\n\n    $ tio -b 9600 am64-evm -e\n\n   Before, tio only allowed adding arguments after the config argument.\n\n   Implemented as simple as possible by introducing two stage option parsing.\n\n * Update bash completion\n\n * Add support for IPv4 and IPv6 network sockets\n\n   Add support for IPv4 and IPv6 network sockets via socket syntax\n   \"inet:<port>\" and \"inet6:<port>\" respectively.\n\n   For example, to listen and redirect serial device I/O to a host bound\n   IPv4 socket simply do:\n\n    $ tio /dev/ttyUSB0 --socket inet:4444\n\n   To connect do e.g.:\n\n    $ nc 127.0.0.1 4444\n\n   Likewise, for IPv6 do:\n\n    $ tio /dev/ttyUSB0 --socket inet6:4444\n\n   To connect do e.g.:\n\n    $ nc ::1 4444\n\n   If port is 0 or no port is provided default port 3333 is used.\n\n * Fix tio deleting unix socket file\n\n   If tio has a unix file socket open, a second tio instance of tio may\n   delete the socket file. This change fixes so that it will not be deleted\n   and tio will instead error and complain about conflicting socket file.\n\n * Rework color option\n\n   Rework the color option to support setting ANSI color code values\n   ranging from 0..255 or \"none\" for no color or \"list\" to print a list of\n   available ANSI colors codes.\n\n   Also, disables color when piping.\n\n * Remove print of hex mode status at startup\n\n * Remove newline option in hex mode\n\n * Fix configfile memory leaks\n\n * Remove command-line option inconsistencies\n\n   Optional arguments, as parsed by the getopt_long mechanism, are\n   inherently inconsistent with how you define required arguments.\n\n   To avoid confusion we decide to avoid this inconsistency by replacing\n   optional options with additional options with required arguments.\n\n * Replace '1' with 'enable' in config files\n\n * Convert errors to warnings\n\ng0mb4:\n\n * Extended hexadecimal mode.\n\n   While in hex mode (ctrl-t h) you can output hexadecimal values.\n   E.g.: to send 0x0A you have to type 0A (always 2 characters).\n\n   Added option -x, --hex to start in hexadecimal mode.\n\n   Added option --newline-in-hex to interpret newline characters in hex mode.\n   This is disabled by default, because, in my opinion, hex stream is\n   fundamentally different from text, so a \"new line\" is meaningless in this\n   context.\n\n\n\nChanges since tio v1.37:\n\n * Redirect error messages to stderr\n\n * Improve help and man page\n\n * Mention config file in --help\n\n * Fix running without config file\n\n * Fix config file error messages\n\n * Redirect error messages to stderr\n\n * Add repology packaging status\n\n * Fix parsing of default settings\n\n   Default configuration file settings were not parsed in case a section\n   was matched. Now we make sure that the default (unnamed) settings are\n   always parsed.\n\n * Append to existing log file (no truncation)\n\n * Add socket info to show configuration\n\n * Print socket info at startup\n\n * Fix socket option parsing\n\nPeter Collingbourne:\n\n * Match user input against config section names if pattern matching was unsuccessful.\n\n   This allows for better config file ergonomics if the user has a diverse\n   set of serial devices as the name does not need to be specified in\n   the config file twice.\n\n * Add support for external control via a Unix domain socket.\n\n   This feature allows an external program to inject output into and\n   listen to input from a serial port via a Unix domain socket (path\n   specified via the -S/--socket command line flag, or the socket\n   config file option) while tio is running. This is useful for ad-hoc\n   scripting of serial port interactions while still permitting manual\n   control. Since many serial devices (at least on Linux) get confused\n   when opened by multiple processes, and most commands do not know\n   how to correctly open a serial device, this allows a more convenient\n   usage model than directly writing to the device node from an external\n   program.\n\n   Any input from clients connected to the socket is sent on the serial\n   port as if entered at the terminal where tio is running (except that\n   ctrl-t sequences are not recognized), and any input from the serial\n   port is multiplexed to the terminal and all connected clients.\n\n   Sockets remain open while the serial port is disconnected, and writes\n   will block.\n\n   Example usage 1 (issue a command):\n\n     echo command | nc -UN /path/to/socket > /dev/null\n\n   Example usage 2 (use the expect command to script an interaction):\n\n     #!/usr/bin/expect -f\n\n     set timeout -1\n     log_user 0\n\n     spawn nc -UN /path/to/socket\n     set uart $spawn_id\n\n     send -i $uart \"command1\\n\"\n     expect -i $uart \"prompt> \"\n     send -i $uart \"command2\\n\"\n     expect -i $uart \"prompt> \"\n\nlexaone:\n\n * fix for using option 'log' without 'log-filename' in config file\n\n\n\nChanges since tio v1.36:\n\n * Make libinih a fallback dependency\n\n   This means that in case meson does not find libinih it will\n   automatically clone libinih and include it in the build.\n\n   The libinih library is reconfigured to be statically built so that no\n   shared object will be installed.\n\nSylvain LAFRASSE:\n\n * Fix timestamp parsing in INI conf\n\n * Factorize timestamp parsing to be coherent with command line format in configuration file.\n\n\n\nChanges since tio v1.35:\n\n * Add support for defaults in config file\n\n   If no section name is specified the configuration will be considered the\n   default one.\n\n   This allows to set e.g. a default color code for sections which do not\n   configure a color code.\n\n * Handle SIGHUP\n\n   Handle SIGHUP so that the registered exit handlers are called to restore\n   the terminal back to its original state.\n\n * Add color configuration support\n\n * Bypass unused result warnings\n\n * Force dependency on libinih\n\n   Configuration file support is considered a mandatory feature.\n\n * Update headers\n\n * Update AUTHORS\n\n * Update man page\n\n * Move string_to_long() to misc.c\n\n * Update CircleCI config\n\n * Update tio gif\n\n * Update README\n\n * Update LICENSE date\n\n * Remove redundant COPYING file\n\nLiam Beguin:\n\n * Document configuration file options\n\n * Add support for a configuration file\n\n * misc: add _unused macro\n\n   Some parameters are expected to be unused.\n   Add a basic macro to mute these compiler warnings.\n\n * options: expose string_to_long()\n\n   Expose string_to_long() so that other source files can use it.\n\n\n\nChanges since tio v1.34:\n\n * Add support for automatically generated log filename\n\n   Automatically generate log filename if none is provided.\n\n   The auto generated file name is on the form:\n   \"tio_DEVICE_YYYY-MM-DDTHH:MM:SS.log\"\n\n * Add support for configurable timestamp format\n\n   Also changes default timestamp format from ISO 8601 to classic 24-hour\n   format as this is assumed to be the format that most users would prefer.\n\n   And reintroduces strict but optional ISO 8601 format.\n\n   This feature allows to easily add more timestamp formats in the future.\n\n * Reintroduce asm-generic/ioctls.h\n\n   It is needed for ppc builds.\n\n * Add macro hack to workaround older buggy glibc\n\nRobey Pointer:\n\n * Add support for high bps on OS X\n\n\n\nChanges since tio v1.33:\n\n * Fix setspeed2 compilation\n\n * Only apply color formatting when using color option\n\n   To help the color blind who may use custom terminal foreground /\n   background colors.\n\n * Update README\n\n * Add '-c, --color' option\n\n   Allow user to select which ANSI color code to use to colorize the tio\n   text. To successfully set the color the color code must be in the range\n   0..255.\n\n   If color code is negative tio will print all available ANSI colors.\n\n   The default color is changed to bold white to make tio defaults usable\n   for most users, including color blind users.\n\n * Fix setspeed2 check\n\n * Fix meson header check string\n\n * Reintroduce long timestamp format\n\n   But make the timestamp format RFC3339 compliant instead. The RFC states:\n\n   NOTE: ISO 8601 defines date and time separated by \"T\".\n         Applications using this syntax may choose, for the sake of\n         readability, to specify a full-date and full-time separated by\n         (say) a space character.\n\n   This way we keep the information specified by ISO 8601 but make it more\n   human readable which is better for the console output.\n\n * Update version year\n\nSylvain LAFRASSE:\n\n * Fix TTY device listing on Darwin. (#136)\n\n * Fix TCGETS2 search on Darwin.\n\n\n\nChanges since tio v1.32:\n\n * Show auto connect status in show configuration\n\n * Use '#pragma once' in all headers\n\n * Improve printed output\n\n   Get rid of inconsistencies in the printed output (error printing,\n   colors, etc.).\n\n   Prepare for user configurable color.\n\n * Rename option -i to -L\n\n * Shorten timestamp\n\n * Shorten timestamp description\n\n   We do not need the date part of the timestamp. It simply takes up too\n   much precious line space. In case of logging to file, one can easily\n   conclude the date from the file date information.\n\n * Replace Travis with circleCI\n\n * Replace autotools with meson\n\n   To introduce much simpler build configuration which is also easier to\n   maintain.\n\n * Add list serial devices feature\n\n   For convenience, add a --list-devices option which lists the available\n   serial devices.\n\n * Cleanup: Use dot notation for default options struct\n\n * Update AUTHORS\n\n * Add command to show version\n\n   The key sequence ctrl-t v will now show the version of tio.\n\n * Align format of timestamps\n \n * Add Sylvain as official co-maintainer\n\nSylvain LAFRASSE:\n\n * Add '-t' option description for time stamping.\n\n * Add description for time stamping.\n\n * Resolved tio/tio#84: Added timestamps in log file if enabled.\n\nattila-v:\n\n * Refine timestamps with milliseconds and ISO 8601 format (#129).\n\n   * Show milliseconds too in the timestamp (#114) and log file (#124)\n   * Change timestamp format to ISO 8601.\n\nYin Fengwei:\n\n * Output newline on stdout with hex print mode\n\n   This is to fix the issue #104. The timestamp will always be\n   printed at the beginning of line:\n\n   [10:25:56] Switched to hexadecimal mode\n   0d 0a 0d [10:25:57] 41 43 52 4e 3a 5c 3e 0d 0a 0d [10:25:58] 41\n\n   is changed to:\n\n   [12:34:56] 45 72 72 6f 72 3a 20 49 6e 76 61 6c 69 64 20\n   [12:34:56] 41 43 52 4e 3a 5c 3e\n   [12:34:56] 41 43 52 4e 3a 5c 3e\n   [12:34:57] 41 43 52 4e 3a 5c 3e 6c 73\n\nJakob Haufe:\n\n * Make comparison POSIX compliant\n\n   String comparison with == is not POSIX compliant and can fail with e.g.\n   dash.\n\nHenrik Brix Andersen:\n\n * Add bash completion of tty devices.\n\n * Add -t/--timestamp to bash completion script.\n\nHenner Zeller:\n\n * Local echo: show character by character even if stdout buffered.\n\nBjörn Stenberg:\n\n * Show error when failing to open a tty\n\nAlban Bedel:\n\n * Fix out of tree builds\n\n   Out of tree builds are currently broken because $(top_srcdir)src/include\n   is not in the search path. In tree builds are working because autoconf adds\n   $(top_builddir)/src/include to the search path for the generated config.h.\n   As $(top_builddir) and $(top_srcdir) are identical during in tree builds\n   the search path still end up being somehow correct.\n\n   To fix this add -I$(srcdir)/include to the CPPFLAGS in Makefile.am.\n\nFabrice Fontaine:\n\n * src/setspeed2.c: fix redefinition of termio\n\n   Include ioctls.h and termbits.h from asm-generic instead of asm to avoid\n   build failures.\n\nErik Moqvist\n\n * Exit if output speed cannot be set.\n\nLars Kellogg-Stedman:\n\n * fflush() after putchar() for print_hex and print_normal\n\n   In order for local echo to work properly, we have to either call\n   fflush(stdout) after every character or just disable line buffering.\n   This change calls fflush() after putchar().\n\n * Disable line buffering in stdout\n\n   In order for local echo to work properly, we have to either call\n   fflush(stdout) after every character or just disable line buffering.\n   This change uses setbuf(stdout, NULL) to do the latter.\n\nGeorge Stark:\n\n * don't show line state if ioctl failed\n\n * add serial lines manual control\n\narichi:\n\n * Flush every local echo char\n\n   Flush stdout at every char in case it\n   happens to be buffered.\n\nMariusz Midor:\n\n * Newline: handle both NL and CR\n\n   Flag ONLCRNL expects code \\n after press Enter, but on some systems \\r is sent instead.\n\n\n\nChanges since tio v1.31:\n\n * Update AUTHORS\n\n * Minor code style cleanups\n\n * Cleanup print macros\n\n * Flush output\n\n   Make sure output is transmitted immediately by flushing the output.\n\nRobey Pointer:\n\n * add optional timestamps\n\n   with \"-t\" or \"C-t T\", toggle a timestamp prefix to each line.\n\nJakub Wilk:\n\n * Fix typos\n\nSylvain Lafrasse:\n\n * Added macOS compatibility\n\n * Made O_NONBLOCK flag to open() call specific to macOS only.\n\n * Added macOS-related details.\n\n * Added O_NONBLOCK flag to open() call for macOS (10.13.6) compatibility.\n\n\n\nChanges since tio v1.30:\n\n * Update date\n\n * Update AUTHORS\n\nHenner Zeller:\n\n * Clarify the input/output variable names (No-op change)\n\n * Organize options the same sequence they are mentioned in cmdline help.\n\n * Update README.\n\n * Map CR->NL locally on output instead of using tio.c_oflag |= OCRNL.\n\n   This mostly is intended to have local echo output exactly what is sent\n   to the remote endpoint.\n   A nice side-effect is, that it also fixes tty-implementations, that can't\n   deal with the OCRNL flag on tio.c_oflag.\n\n * Provide local-echo option.\n\n   Can be switched on with -e on the command line.\n   Can be toggled with Ctrl t e while program is running.\n\n * Write to logfile as soon as we have the data, don't buffer.\n\n   Logfiles are important to see what happened, in particular if something\n   unexpected happened; so we want to make sure that the logfile is flushed\n   to disk.\n\n   Before this change, the logfile was typically written at the end in\n   a large chunk as the default (large) buffering applied. Now, characters are\n   written out ASAP, so it is possible to get a live-view with a\n   tail -f <logfile>\n\n\n\nChanges since tio v1.29:\n\n * Update README\n\n * Update man page and bash completion\n\n * Update AUTHORS\n\nqianfan Zhao:\n\n * ONLCRNL: change the method to map NL to CR-NL\n\n\n\nChanges since tio v1.28:\n\n * Add mapping flags INLCRNL and ODELBS\n\n   The following new mapping flags are added:\n\n   INLCRNL: Map NL to CR-NL on input.\n   ODELBS: Map DEL to BS on output.\n\n   Flags requested and tested by Jan Ciger (janoc).\n\n\n\nChanges since tio v1.27:\n\n * Update README\n\n * Update AUTHORS\n\n * Add snap status to README.md\n\n * Add README.md to prettify GitHub page\n\n * Add missing header\n\nPetr Vaněk:\n\n * Add missing header file under musl-libc\n\n   Musl's inclusion tree slightly differs from glibc, therefore TCGETS2 is\n   not reachable through sys/ioctl.h, so asm/ioctls.h needs to be included\n   too.\n\nJakub Wilk:\n\n * Fix grammar and typos\n\n\n\nChanges since tio v1.26:\n\n * Update man page\n\n * Add support for setting non-standard baudrates\n\n   Support for non-standard baudrate settings will be automatically enabled\n   if the termios2 interface is detected available. However, to play it\n   safe, the old and widely supported termios interface will still be used\n   when setting standard baudrates.\n\n * Cleanup\n\n * Update AUTHORS\n\n\n\nChanges since tio v1.25:\n\n * Reconfigure stdin\n\n   Make stdin behave more raw'ish. In particular, don't\n   translate CR -> NL on input.\n\n * Add special character map feature\n\n   Add a --map option which allows mapping special characters, in particular CR and\n   NL characters which are used in various combinations on various platforms.\n\n * Cleanup\n\n * Update AUTHORS\n\n * Update README\n\n * Mention website\n\n * Update man page\n\n\n\nChanges since tio v1.24:\n\n * Fix error applying new stdout settings\n\n   On Fedora 26 tio will quit with the following error message:\n\n   \"Error: Could not apply new stdout settings (Invalid argument)\"\n\n   In case of Fedora, it turns out that the new stdout settings used are a\n   bit too aggressive because an empty termios structure is used. To remedy\n   this we reuse the existing stdout settings and only reconfigure the\n   specific options we need to make a \"raw\" stdout configuration.\n\n * Remove unused pkgconfig in configure\n\n * Code cleanup\n\n   Remove unused variable.\n\n\n\nChanges since tio v1.23:\n\n * Optimize clear screen command\n\n   Replaced system call with inline ANSI/VT100 clear screen code sequence\n\n * Fix bash completion installation\n\n   Fixed the configure script to avoid that the bash completion script gets\n   installed outside of the prefix location. The default install location\n   is now $prefix/share/bash-completion/completions.\n\n   Use the configure option '--with-bash-completion-dir=PATH' if you need\n   to install the bash completion script elsewhere.\n\nJakub Wilk:\n\n * Add missing commas in conditional sentences\n\n\n\nChanges since tio v1.22:\n\n * Update copyright headers\n\nJakub Wilk:\n\n * Fix typos\n\n\n\nChanges since tio v1.21:\n\n * Update man page date\n\n * Update copyright year\n\n * Code cleanup\n\n * Update README and man page\n\n\n\nChanges since tio v1.20:\n\n * Add support for hexadecimal mode\n\n   A new key command 'ctrl-t h' is introduced which toggles between\n   hexadecimal mode and normal mode. When in hexadecimal mode data received\n   will be printed in hexadecimal.\n\n * Do not distribute src/bash_completion/tio\n\n   Since the bash completion tio script is now autogenerated from tio.in it\n   should not be distributed in the tarball.\n\n * Add missing forward flag\n\n * Update AUTHORS file\n\nAdam Borowski:\n\n * 'ctrl-t b' to send serial break.\n\nJakub Wilk:\n\n * Removed git commit references from ChangeLog\n\n   ChangeLog is primary useful for users who don't have the git repository\n   at hand.\n\n   Replace git commit references with version numbers; or if the change\n   only cleans up another change with no release in between, remove the\n   changelog item completely.\n\n\n\nChanges since tio v1.19:\n\n * Added more error handling of terminal calls\n\n   Also removed duplicate terminal flushing calls.\n\n * Revert \"Added support for non-standard baud rates\"\n\n   This reverts a change made in v1.18.\n\n   Reverting because supporting non-standard or arbitrary baud rates is\n   troublesome because the c library provides no means of doing so and even\n   if bare metal linux kernel interface is used it will not work on all\n   Linux kernels version.\n\n\n\nChanges since tio v1.18:\n\n * Rearranged key commands\n\n   Rearranged the key commands:\n\n   ctrl-t c (clear screen) is now\n   ctrl-t l which is similar to the well known shell ctrl-l\n\n   ctrl-t i (show settings information) is now\n   ctrl-t c (show configuration)\n\n   Updated man page accordingly.\n\n * Added \"ctrl-t c\" key command to clear screen\n\n\n\nChanges since tio v1.17:\n\n * Updated man page\n\n * Added support for non-standard baud rates\n\n   Only enabled when possible, that is, when the BOTHER definition is\n   available.\n\n   It is untested but it should work as described here:\n   https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=683826\n\n   Some Cypress USB<->serial devices supposedly supports arbitrary speeds.\n\n * Generate baudrate switch cases based on detection\n\n   Support a single source of baud rate configuration as discussed in\n   https://github.com/tio/tio/issues/45 .\n\n   To do so, autogeneration of the switch cases which do the baud rate\n   option value check and configuration/conversion in tty_configure() is\n   introduced via a single macro.\n\n   Just to be safe, this change also enables configure detection of all\n   baud rates, including the ones previously assumed supported by most/all\n   systems (POSIX).\n\n * Minor cleanup\n\n * Exit when not a tty device in autoconnect mode\n\nJakub Wilk:\n\n * Added non-standard baud rates that are defined on FreeBSD\n\n * Capitalized \"GitHub\" in README\n\n\n\nChanges since tio v1.16:\n\n * Compacted tty_configure() a bit\n\n * Fixed automatic baud rate enablement\n\n * Minor cleanups\n\n * Added autodetection of available baud rates\n\n   Various platforms support different baud rates.\n\n   To avoid adding platform specific handling generic baud rate detection\n   tests are introduced in the configure script. Successfully detected baud\n   rates are automatically enabled. This applies to both the C code and the\n   bash completion script.\n\n   Note:\n   Baud rates below 57600 are defined by POSIX-1 and supported by most\n   platforms so only baud rate 57600 and above are tested.\n\n * Updated bash-completion\n\n * Fixed printf() format type\n\n * Added Travis build configuration\n\nJakub Wilk:\n\n * Generated bash completion at configure time\n\n * Reduce code duplication in baud rate detection\n\n * Add support for baud rates 200 and 1800\n\n * Fixed baudrate type\n\n\n\nChanges since tio v1.15:\n\n * Updated man page\n\n * Updated README\n\n * Removed obsolete packaging files\n\n * Removed use of deprecated bzero()\n\n\n\nChanges since tio v1.14:\n\n * Removed + to remove potential confusion\n\n * Added input digit checks\n\n * Fixed license string\n\n * Introduced tty_configure()\n\n   Moved tty configuration actions to tty_configure() in tty.c. This way\n   options.c is strictly about parsing options nothing else.\n\n * Function names cleanup\n\n * Updated AUTHORS file\n\n   Added Nick who created the new tio package for Arch Linux.\n\n * Fixed tx/rx counters type\n\nJakob Haufe:\n\n * Include config.h before standard headers\n\n   Large file support was meant to be enabled in v1.11.\n   This change enables it for real.\n\n\n\nChanges since tio v1.13:\n\n * Fixed tio_printf macro\n\n * Fixed launch hints\n\n   Fixed launch hints not being printed in no autoconnect mode.\n\n * Added 'ctrl-t ?' to list available commands\n\n * Fixed log mechanism\n\n   To avoid echoing only log what is received from tty device.\n\n * Improved tio output\n\n   Added titles and indentation to commands output for clearer separation\n   when firing commands repeatedly.\n\n   Also added print of tio version and quit command hint at launch.\n\n * Cleaned up tio print mechanism\n\nJakub Wilk:\n\n * Fixed grammar\n\n   \"allow\" is a transitive verb, which requires an object,\n   so \"allow to <verb>\" is ungrammatical.\n\n * Fixed typo\n\n\n\nChanges since tio v1.12:\n\n * Fixed some error prints\n\n * Fixed error printing for no autoconnect mode\n\n   Always print errors but only print silent errors when in no autoconnect\n   mode.\n\n * Added key command for showing session settings\n\n   A new key command \"ctrl-t i\" is added to allow the user to display the\n   various session settings information (baudrate, databits, log file, etc.).\n\n   This is useful in case you have a running session but have forgotten\n   what the settings are.\n\n\n\nChanges since tio v1.11:\n\n * Consolidated command key handling\n\n * Moved delay mechanism into separate function\n\n * Retired obsolete usleep()\n\n   Replaced with nanosleep()\n\n * Added simple tx/rx statistics command (ctrl-t s)\n\n   To display the total number of bytes transmitted/received simply perform the\n   'ctrl-t s' command sequence.\n\n   This feature can be useful when e.g. trying to detect non-printable\n   characters.\n\n * Further simplification of key handling\n\n   Changed so that the \"ctrl-t ctrl-t\" sequence is now simply \"ctrl-t t\" to\n   send the ctrl-t key code. This is inspired by screen which does similar\n   to send its command key code (ctrl-a a).\n\n   This change also eases adding new key commands if needed.\n\n   Updated man page accordingly.\n\n * Cleaned up and simplified key handling\n\nJakub Wilk:\n\n * Insert output delay only if something was output\n\n\n\nChanges since tio v1.10:\n\n * Enabled large file support (LFS)\n\n   Added autotools AC_SYS_LARGEFILE to support 64 bit file size handling.\n\n * Updated tio title\n\n\n\nChanges since tio v1.9:\n\n * Introduced lock on device file\n\n   Tio will now test for and obtain an advisory lock on the tty device file\n   to prevent starting multiple sessions on the same tty device.\n\n * Updated AUTHORS\n\nJakub Wilk:\n\n * Treat EOF on stdin as error\n\n\n\nChanges since tio v1.8:\n\n * Cleanup of error handling\n\n   Introduced consistent way of handling errors and printing error messages.\n\n   Also upgraded some warnings to errors.\n\n * Updated localtime() error message\n\n * Cleanup\n\nJakub Wilk:\n\n * Fix error handling for select()\n\n   Previously the error handling code for select() was unreachable.\n\n * Removed unneeded quotes from AM_CFLAGS\n\n * Expanded tabs\n\n * Fixed setting \"tainted\"\n\n   Set \"tainted\" if and only if any character was read from the device.\n\n   Ctrl-t is no longer sent to the device on exit, so the trick to avoid\n   its echo is not necessary.\n\n   Characters read from stdin don't directly affect output, so they\n   shouldn't enable \"tainted\".\n\n * Used \\r in color_printf()\n\n   \\033[300D is an unusual way to move the cursor back to column 1.\n   Use straightforward \\r instead.\n\n * Added missing \\r\\n to warning messages\n\n   \\n alone is not enough, because the terminal is in raw mode.\n\n\n\nChanges since tio v1.7:\n\n * Fixed enablement of compiler warnings\n\n * Fixed log_open() prototype\n\n * Fixed index error wrt ctrl-t detection\n\n * Fixed handling of ctrl-t\n\n   Before, when exercising the quit key sequence (ctrl-t + q) the ctrl-t code\n   (0x14) would be sent.\n\n   This is now fixed so that it is not sent.\n\n   However, in case it is needed to send ctrl-t to the device it is possible by\n   simply repeating the ctrl-t.\n\n   Meaning, ctrl-t + ctrl-t = ctrl-t sent to device.\n\n * Improved error handling\n\n   Fixes a memory leak and avoids aggressive busy looping when problems\n   accessing tty device.\n\n * Removed redundant log_close() call\n\n * Enabled compiler warnings\n\nJakub Wilk:\n\n * Stopped copying arguments to fixed-size buffers\n\n   Don't needlessly copy command-line arguments into fixed-size buffers.\n\n   Previously the program crashed if an overlong pathname was provided on\n   the command line. Also, some systems (such as GNU Hurd) don't define\n   MAXPATHLEN at all.\n\n * Added const to log_open() prototype\n\n * Completed the ^g to ^t transition\n\n   In v1.7 the escape key was changed from ^g to ^t, but some\n   code and comments still referred to the old key.\n\n * Used HTTPS for tio.github.io\n\n * Man page beautification\n\n * Bumped date in man page\n\n * Improve man page formatting\n\n   Use regular font for metacharacters such as \"[]\", \",\" or \"|\";\n   use italic font for metavariables.\n\n * Fixed hyphen vs minus vs em-dash confusion in man page\n\n   - prints as hyphen;\n   \\- prints as minus sign;\n   \\em prints as em-dash.\n\n\n\nChanges since tio v1.6:\n\n * Changed escape key from ^g to ^t\n\n   After renaming to \"tio\" it makes sense to change the escape key\n   accordingly. Hence, the new escape key is ^t.\n\n   Meaning, in session, its now ctrl-t + q to quit.\n\nJakub Wilk:\n\n * Fixed silly \"tio or tio\" in man page\n\n * Fixed typo\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.466796875,
          "content": "\n[![tio](images/tio-icon.png)]()\n\n# tio - a serial device I/O tool\n\n[![](https://img.shields.io/github/actions/workflow/status/tio/tio/ubuntu.yml?label=GNU%2FLinux)](https://github.com/tio/tio/actions/workflows/ubuntu.yml)\n[![](https://img.shields.io/github/actions/workflow/status/tio/tio/macos.yml?label=MacOS)](https://github.com/tio/tio/actions/workflows/macos.yml)\n[![](https://img.shields.io/codefactor/grade/github/tio/tio)](https://www.codefactor.io/repository/github/tio/tio)\n[![](https://img.shields.io/github/v/release/tio/tio?sort=semver)](https://github.com/tio/tio/releases)\n[![](https://img.shields.io/repology/repositories/tio)](https://repology.org/project/tio/versions)\n\n## 1. Introduction\n\ntio is a serial device tool which features a straightforward command-line and\nconfiguration file interface to easily connect to serial TTY devices for basic\nI/O operations.\n\n<p align=\"center\">\n<img src=\"images/tio-demo.gif\">\n</p>\n\n### 1.1 Motivation\n\nTo make a simpler serial device tool for working with serial TTY devices with\nless focus on classic terminal/modem features and more focus on the needs of\nembedded developers and hackers.\n\ntio was originally created as an alternative to\n[screen](https://www.gnu.org/software/screen) for connecting to serial devices\nwhen used in combination with [tmux](https://tmux.github.io).\n\n## 2. Features\n\n * Easily connect to serial TTY devices\n * Sensible defaults (115200 8n1)\n * Automatic connection management\n   * Automatic detection of serial ports\n   * Automatic reconnect\n   * Automatically connect to first new appearing serial device\n   * Automatically connect to latest registered serial device\n * Connect to same port/device combination via unique topology ID (TID)\n   * Useful for reconnecting when serial device has no serial device by ID\n * Support for non-standard baud rates\n * Support for mark and space parity\n * X-modem (1K/CRC) and Y-modem file upload\n * Support for RS-485 mode\n * List available serial devices\n   * By device\n     * Including topology ID, uptime, driver, description\n     * Sorted by uptime (newest device listed last)\n   * By ID\n   * By path\n * Show RX/TX statistics\n * Toggle serial lines\n * Pulse serial lines with configurable pulse duration\n * Local echo support\n * Remapping of characters (nl, cr-nl, bs, lowercase to uppercase, etc.)\n * Switchable independent input and output\n   * Normal mode\n   * Hex mode (output supports variable width)\n   * Line mode (input only)\n * Timestamp support\n   * Per line in normal output mode\n   * Output timeout timestamps in hex output mode\n * Support for delayed output\n   * Per character\n   * Per line\n * Log to file\n   * Automatic naming of log file (default)\n   * Configurable directory for saving automatic named log files\n   * Manual naming of log file\n   * Overwrite (default) or append to log file\n   * Strip control characters and escape sequences\n * Configuration file support\n   * Support for configuration profiles\n   * Activate configuration profiles by name or pattern\n   * Support for including other configuration files\n * Redirect I/O of shell command to serial device\n * Redirect I/O to UNIX socket or IPv4/v6 network socket\n   * Useful for scripting or TTY sharing\n * Pipe input and/or output\n * Bash completion on options, serial device names, and profile names\n * Configurable tio message text color\n   * Supports NO_COLOR env variable as per [no-color.org](https://no-color.org)\n * Visual or audible alert on connect/disconnect\n * Remapping of prefix key\n * Lua scripting support for automation\n   * Run script manually or automatically at connect (once/always/never)\n   * Simple expect/send like functionality with support for regular expressions\n   * Manipulate port modem lines (useful for microcontroller reset/boot etc.)\n   * Send files via x/y-modem protocol\n   * Search for serial devices\n * Man page documentation\n * Plays nicely with [tmux](https://tmux.github.io) and similar terminal multiplexers\n\n## 3. Usage\n\nFor more usage details please see the man page documentation\n[here](https://raw.githubusercontent.com/tio/tio/master/man/tio.1.txt).\n\n### 3.1 Command-line\n\nThe command-line interface is straightforward as reflected in the output from\n```tio --help```:\n```\nUsage: tio [<options>] <tty-device|profile|tid>\n\nConnect to TTY device directly or via configuration profile or topology ID.\n\nOptions:\n  -b, --baudrate <bps>                   Baud rate (default: 115200)\n  -d, --databits 5|6|7|8                 Data bits (default: 8)\n  -f, --flow hard|soft|none              Flow control (default: none)\n  -s, --stopbits 1|2                     Stop bits (default: 1)\n  -p, --parity odd|even|none|mark|space  Parity (default: none)\n  -o, --output-delay <ms>                Output character delay (default: 0)\n  -O, --output-line-delay <ms>           Output line delay (default: 0)\n      --line-pulse-duration <duration>   Set line pulse duration\n  -a, --auto-connect new|latest|direct   Automatic connect strategy (default: direct)\n      --exclude-devices <pattern>        Exclude devices by pattern\n      --exclude-drivers <pattern>        Exclude drivers by pattern\n      --exclude-tids <pattern>           Exclude topology IDs by pattern\n  -n, --no-reconnect                     Do not reconnect\n  -e, --local-echo                       Enable local echo\n      --input-mode normal|hex|line       Select input mode (default: normal)\n      --output-mode normal|hex|hexN      Select output mode (default: normal)\n  -t, --timestamp                        Enable line timestamp\n      --timestamp-format <format>        Set timestamp format (default: 24hour)\n      --timestamp-timeout <ms>           Set timestamp timeout (default: 200)\n  -l, --list                             List available serial devices, TIDs, and profiles\n  -L, --log                              Enable log to file\n      --log-file <filename>              Set log filename\n      --log-directory <path>             Set log directory path for automatic named logs\n      --log-append                       Append to log file\n      --log-strip                        Strip control characters and escape sequences\n  -m, --map <flags>                      Map characters\n  -c, --color 0..255|bold|none|list      Colorize tio text (default: bold)\n  -S, --socket <socket>                  Redirect I/O to socket\n      --rs-485                           Enable RS-485 mode\n      --rs-485-config <config>           Set RS-485 configuration\n      --alert bell|blink|none            Alert on connect/disconnect (default: none)\n      --mute                             Mute tio messages\n      --script <string>                  Run script from string\n      --script-file <filename>           Run script from file\n      --script-run once|always|never     Run script on connect (default: always)\n      --exec <command>                   Execute shell command with I/O redirected to device\n  -v, --version                          Display version\n  -h, --help                             Display help\n\nOptions and profiles may be set via configuration file.\n\nIn session you can press ctrl-t ? to list available key commands.\n\nSee the man page for more details.\n```\n\nBy default tio automatically connects to the provided TTY device. If the device\nis not present, tio will wait for it to appear and then connect. If the\nconnection is lost (e.g. device is unplugged), it will wait for the device to\nreappear and then reconnect. However, if the `--no-reconnect` option is\nprovided, tio will exit if the device is not present or an established\nconnection is lost.\n\n#### 3.1.1 Examples\n\nTypical use is without options:\n```\n$ tio /dev/ttyUSB0\n```\n\nWhich corresponds to the commonly used default options:\n```\n$ tio --baudrate 115200 --databits 8 --flow none --stopbits 1 --parity none /dev/ttyUSB0\n```\n\nList available serial devices:\n```\n$ tio --list\nDevice            TID     Uptime [s] Driver           Description\n----------------- ---- ------------- ---------------- --------------------------\n/dev/ttyS4        BaaB     19526.576 port             16550A UART\n/dev/ttyS5        eV0Z     19525.845 port             16550A UART\n/dev/ttyUSB1      bCC2      1023.274 ftdi_sio         TTL232R-3V3\n/dev/ttyUSB0      SPpw       978.527 ftdi_sio         TTL232RG-VREG3V3\n/dev/ttyACM0      i5q4         2.079 cdc_acm          ST-Link VCP Ctrl\n\nBy-id\n--------------------------------------------------------------------------------\n/dev/serial/by-id/usb-FTDI_TTL232R-3V3_FTCHUV56-if00-port0\n/dev/serial/by-id/usb-FTDI_TTL232RG-VREG3V3_FT1NELUB-if00-port0\n/dev/serial/by-id/usb-STMicroelectronics_STLINK-V3_004900343438510234313939-if02\n\nBy-path\n--------------------------------------------------------------------------------\n/dev/serial/by-path/pci-0000:00:14.0-usb-0:8.1.3.1.4:1.0-port0\n/dev/serial/by-path/pci-0000:00:14.0-usbv2-0:8.1.3.1.4:1.0-port0\n/dev/serial/by-path/pci-0000:00:14.0-usbv2-0:6.4:1.0-port0\n/dev/serial/by-path/pci-0000:00:14.0-usb-0:6.4:1.0-port0\n/dev/serial/by-path/pci-0000:00:14.0-usbv2-0:6.3:1.2\n/dev/serial/by-path/pci-0000:00:14.0-usb-0:6.3:1.2\n\nConfiguration profiles (/home/lundmar/.config/tio/config)\n--------------------------------------------------------------------------------\nrpi3                stm32               esp32               am64-evm\nimx8mp-evk          nucleo-h743zi2      usb-devices\n```\n\nIt is recommended to connect serial TTY devices by ID:\n```\n$ tio /dev/serial/by-id/usb-FTDI_TTL232R-3V3_FTCHUV56-if00-port0\n```\nNote: Using serial devices by ID helps ensure that tio automatically reconnects\nto the same serial device when reattached, even when it enumerates differently.\n\nIf no serial device by ID is available it is recommended to connect via\ntopology ID (TID):\n```\n$ tio bCC2\n```\nNote: The TID is unique and will stay the same as long as your USB serial port\ndevice plugs into the same USB topology (same ports, same hubs, same\nconnections, etc.). This way it is possible for tio to successfully reconnect\nto the same device.\n\nConnect automatically to first new appearing serial device:\n```\n$ tio --auto-connect new\n```\n\nConnect automatically to latest registered serial device:\n```\n$ tio --auto-connect latest\n```\n\nIt is possible to use exclude options to affect which serial devices are\ninvolved in the automatic connection strategy:\n```\n$ tio --auto-connect new --exclude-devices \"/dev/ttyACM?,/dev/ttyUSB2\"\n```\n\nAnd to exclude drivers by pattern:\n```\n$ tio --auto-connect new --exclude-drivers \"cdc_acm,ftdi_sio\"\n```\nNote: Pattern matching supports '*' and '?'. Use comma separation to define\nmultiple patterns.\n\nTo include drivers by specific pattern simply negate the exclude option:\n```\n$ tio --auto-connect new --exclude-drivers !(\"cp2102\")\n```\n\nLog to file with autogenerated filename:\n```\n$ tio --log /dev/ttyUSB0\n```\n\nLog to file with specific filename:\n```\n$ tio --log --log-file my-log.txt\n```\n\nEnable ISO8601 timestamps per line:\n```\n$ tio --timestamp --timestamp-format iso8601 /dev/ttyUSB0\n```\n\nOutput to hex with width 16:\n```\n$ tio --output-mode hex16 /dev/ttyUSB0\n```\n\nRedirect I/O to IPv4 network socket on port 4242:\n```\n$ tio --socket inet:4242 /dev/ttyUSB0\n```\n\nPipe data to the serial device:\n```\n$ cat data.bin | tio /dev/ttyUSB0\n```\n\nManipulate modem lines on connect:\n```\n$ tio --script \"set{DTR=high,RTS=low}; msleep(100); set{DTR=toggle,RTS=toggle}\" /dev/ttyUSB0\n```\n\nPipe command to serial device and wait for line response within 1 second:\n```\n$ echo \"*IDN?\" | tio /dev/ttyACM0 --script \"expect('\\r\\n', 1000)\" --mute\nKORAD KD3305P V4.2 SN:32475045\n```\n\n### 3.2 Key commands\n\nVarious in session key commands are supported. When tio is started, press\nctrl-t ? to list the available key commands.\n\n```\n[15:02:53.269] Key commands:\n[15:02:53.269]  ctrl-t ?       List available key commands\n[15:02:53.269]  ctrl-t b       Send break\n[15:02:53.269]  ctrl-t c       Show configuration\n[15:02:53.269]  ctrl-t e       Toggle local echo mode\n[15:02:53.269]  ctrl-t f       Toggle log to file\n[15:02:53.269]  ctrl-t F       Flush data I/O buffers\n[15:02:53.269]  ctrl-t g       Toggle serial port line\n[15:02:53.269]  ctrl-t i       Toggle input mode\n[15:02:53.269]  ctrl-t l       Clear screen\n[15:02:53.269]  ctrl-t L       Show line states\n[15:02:53.269]  ctrl-t m       Change mapping of characters on input or output\n[15:02:53.269]  ctrl-t o       Toggle output mode\n[15:02:53.269]  ctrl-t p       Pulse serial port line\n[15:02:53.269]  ctrl-t q       Quit\n[15:02:53.269]  ctrl-t r       Run script\n[15:02:53.269]  ctrl-t R       Execute shell command with I/O redirected to device\n[15:02:53.269]  ctrl-t s       Show statistics\n[15:02:53.269]  ctrl-t t       Toggle line timestamp mode\n[15:02:53.269]  ctrl-t v       Show version\n[15:02:53.269]  ctrl-t x       Send file via Xmodem\n[15:02:53.269]  ctrl-t y       Send file via Ymodem\n[15:02:53.269]  ctrl-t ctrl-t  Send ctrl-t character\n```\n\nIf needed, the prefix key (ctrl-t) can be remapped via configuration file.\n\n### 3.3 Configuration file\n\nOptions can be set via the configuration file first found in any of the\nfollowing locations in the order listed:\n - $XDG_CONFIG_HOME/tio/config\n - $HOME/.config/tio/config\n - $HOME/.tioconfig\n\nThe configuration file supports profiles using named sections which can be\nactivated via the command-line by name or pattern. A profile specifies which\nTTY device to connect to and other options.\n\n### 3.3.1 Example\n\nExample configuration file:\n\n```\n[default]\nbaudrate = 115200\ndatabits = 8\nparity = none\nstopbits = 1\ncolor = 10\n\n[rpi3]\ndevice = /dev/serial/by-id/usb-FTDI_TTL232R-3V3_FTGQVXBL-if00-port0\nno-reconnect = true\nlog = true\nlog-file = rpi3.log\nline-pulse-duration = DTR=200,RTS=150\ncolor = 11\n\n[svf2]\ndevice = /dev/ttyUSB0\nbaudrate = 9600\nscript = expect(\"login: \"); write(\"root\\n\"); expect(\"Password: \"); write(\"root\\n\")\ncolor = 12\n\n[esp32]\ndevice = /dev/serial/by-id/usb-0403_6014-if00-port0\nscript = set{DTR=high,RTS=low}; msleep(100); set{DTR=low,RTS=high}; msleep(100); set{RTS=low}\nscript-run = once\ncolor = 13\n\n[usb-devices]\npattern = ^usb([0-9]*)\ndevice = /dev/ttyUSB%m1\ncolor = 14\n```\n\nTo use a specific profile by name simply start tio like so:\n```\n$ tio rpi3\n```\nOr by pattern match:\n```\n$ tio usb12\n```\n\nAnother more elaborate configuration file example is available [here](examples/config/config).\n\n### 3.4 Lua script API\n\nTio suppots Lua scripting to easily automate interaction with the tty device.\n\nIn addition to the Lua API tio makes the following functions available:\n\n```\nexpect(string, timeout)\n      Expect string - waits for string to match or timeout before continueing.\n      Supports regular expressions. Special characters must be escaped with '\\\\'.\n      Timeout is in milliseconds, defaults to 0 meaning it will wait forever.\n\n      Returns 1 on successful match, 0 on timeout, or -1 on error.\n\n      On successful match it also returns the match string as second return value.\n\nread(size, timeout)\n      Read from serial device. If timeout is 0 or not provided it will wait\n      forever until data is ready to read.\n\n      Returns number of bytes read on success, 0 on timeout, or -1 on error.\n\n      On success, returns read string as second return value.\n\nread_line(timeout)\n      Read line from serial device. If timeout is 0 or not provided it will\n      wait forever until data is ready to read.\n\n      Returns number of bytes read on success, 0 on timeout, or -1 on error.\n\n      On success, returns the string that was read as second return value.\n      Also emits a single timestamp to stdout and log file per options.timestamp\n      and options.log.\n\nwrite(string)\n      Write string to serial device.\n\n      Returns number of bytes written on success or -1 on error.\n\nsend(file, protocol)\n      Send file using x/y-modem protocol.\n\n      Protocol can be any of XMODEM_1K, XMODEM_CRC, YMODEM.\n\ntty_search()\n      Search for serial devices.\n\n      Returns a table of number indexed tables, one for each serial device\n      found.  Each of these tables contains the serial device information accessible\n      via the following string indexed elements \"path\", \"tid\", \"uptime\", \"driver\",\n      \"description\".\n\n      Returns nil if no serial devices are found.\n\nset{line=state, ...}\n      Set state of one or multiple tty modem lines.\n\n      Line can be any of DTR, RTS, CTS, DSR, CD, RI\n\n      State is high, low, or toggle.\n\nsleep(seconds)\n      Sleep for seconds.\n\nmsleep(ms)\n      Sleep for miliseconds.\n\nexit(code)\n      Exit with exit code.\n```\n\n## 4. Installation\n\n### 4.1 Installation using package manager (Linux)\n\nPackages for various GNU/Linux distributions are available. Please consult your\npackage manager tool to find and install tio.\n\nIf you would like to see tio included in your favorite distribution, please\nreach out to its package maintainers team.\n\n### 4.2 Installation using snap (Linux)\n\nInstall latest stable version:\n```\n$ snap install tio --classic\n```\n\nNote: Classic confinement is currently required due to limitations of the snapcraft framework.\nSee [Issue #187](https://github.com/tio/tio/issues/187) for discussion.\n\n### 4.3 Installation using brew (MacOS, Linux)\n\nIf you have [brew](http://brew.sh) installed:\n```\n$ brew install tio\n```\n\n### 4.4 Installation using MSYS2 (Windows)\n\nIf you have [MSYS2](https://www.msys2.org) installed:\n```\n$ pacman -S tio\n```\n\n### 4.5 Installation from source\n\nThe latest source releases can be found [here](https://github.com/tio/tio/releases).\n\nBefore running the install steps make sure you have glib and lua libraries installed. For example:\n\n```\n$ sudo apt install libglib2.0-dev liblua5.2-dev\n```\n\nInstall steps:\n```\n$ meson setup build\n$ meson compile -C build\n$ meson install -C build\n```\n\nSee meson\\_options.txt for tio specific build options.\n\nNote: The meson install steps may differ depending on your specific system.\n\n### 4.6 Known issues\n\nGetting permission access errors trying to open your serial device?\n\nAdd your user to the group which allows serial device access permanently. For example, to add your user to the 'dialout' group do:\n```bash\nsudo usermod -a -G dialout <username>\n```\nSwitch to the \"dialout\" group, temporary but immediately for this session.\n```bash\nnewgrp dialout\n```\n\n\n## 5. Contributing\n\nThis is an open source project - all contributions (bug reports, code, doc,\nideas, etc.) are welcome.\n\nPlease use the github issue tracker and pull request features.\n\nAlso, if you find this free open source software useful please feel free to\nconsider making a donation of your choice:\n\n[![Donate](images/paypal.png)](https://www.paypal.me/lundmar)\n\n\n## 6. Support\n\nSubmit bug reports via GitHub: https://github.com/tio/tio/issues\n\n\n## 7. Website\n\nVisit [tio.github.io](https://tio.github.io)\n\n\n## 8. License\n\ntio is GPLv2+. See LICENSE file for more details.\n\n\n## 9. Authors\n\nMaintained by Martin Lund \\<martin.lund@keep-it-simple.com>\n\nSee the AUTHORS file for full list of contributors.\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 3.5595703125,
          "content": " * Add mapping feature for printing non-printable characters\n\n * Porting layer to support native win32 builds.\n\n   Some of the work that needs to be done: \n\n    All posix functions need to be platform independent, go though file by file:\n\n    termios.h\n    unistd.h has very limited functions\n    ENV different in config_file_resolve\n    errno\n    sys/ioctl.h\n    sys/poll.h\n    socket, may need a new thread\n    Serial, RS485, character mapping\n    Communication pipe\n\n    Port enumerate, all devices of the same type have the same name (eg. USB\n    Serial Device for ttyACM) -> which makes regex not meaningful (kind of a\n    good thing since libtre in Mingw has too much dependencies makes binary too\n    big)\n\n * Support traditional hex output format such as:\n\n   00000000  74 65 73 74 20 74 65 73  74 20 74 65 73 74 20 74  |test test test t|\n   00000010  65 73 74 64 66 0a 61 0a  66 61 0a 66 0a 61 73 66  |estdf.a.fa.f.asf|\n   00000020  64 61 64 73 66 61 73 66  64 61 73 64 66 61 64 73  |dadsfasfdasdfads|\n   00000030  66 0a 61 73 64 66 61 64  73 66 61 73 64 66 61 73  |f.asdfadsfasdfas|\n   00000040  64 66 0a 61 73 64 66 61  64 73 66 61 73 64 66 61  |df.asdfadsfasdfa|\n   00000050  73 64 66 66 64 61 73 64  66 0a 0a 31 32 33 31 0a  |sdffdasdf..1231.|\n   00000060  65 32 31 64 73 77 65 64  0a 0a                    |e21dswed..|\n   0000006a\n\n * Add support for activity based time stamping in normal output mode\n\n   Already supported in hex output mode.\n\n * Allow tio to connect to socket\n\n   After some more consideration I think it makes sense to support connecting to a\n   socket as that will make tio be able to both serve a serial port via a socket\n   and connect to it - it will be an end to end solution. In short we will be able\n   to do the following:\n\n   Host serial port on socket (existing feature):\n    $ tio --socket unix:/tmp/tio-socket-0 /dev/ttyUSB0\n\n   Connect to same socket (new feature):\n    $ tio unix:/tmp/tio-socket-0\n\n   Besides a bit of refactoring the following required changes spring to mind:\n\n    * Socket mode and type of socket should be activated via device name prefix. For example:\n      * UNIX socket: tio unix:<filename>\n      * TCPv4 socket: tio inet:<ip>:<port>\n      * TCPv6 socket: tio inet6:<ip>:<port>\n    * If no port number defined default to 3333\n    * Mapping flags INLCR, IGNCR, ICRNL needs implementation for socket mode\n    * Error messages should just say \"device\" instead of \"tty device\" etc.\n    * Remove other tty'isms (tty_write() should be device_write() etc.)\n    * In session key commands that do not work in socket mode should either not be listed or print an error messages if used.\n    * All non-tty features should continue work (auto-connect etc.)\n    * Shell completion script update\n    * Man page update\n\n\n * Split I/O feature\n\n   Allow to split input and output so that it is possible to manage these\n   independently.\n\n   The general idea is to redirect the output stream on the socket port number\n   specified but then redirect the input stream on the same port number + 1.\n\n   Example:\n\n    $ tio /dev/ttyUSB0 --socket inet:4444,split-io\n\n   Will result in output stream being hosted on port 4444 and input stream\n   hosted on port 4445.\n\n   For file sockets something similar can be arranged:\n\n    $ tio /dev/ttyUSB0 --socket unix:/tmp/tio-socket-0,split-io\n\n   Will result in output stream being hosted via /tmp/tio-socket-0 and input\n   stream hosted via /tmp/tio-socket-0_input\n\n * Websocket support\n\n   Extend the socket feature to redirect serial I/O to websocket on e.g. port\n   1234 like so:\n\n    $ tio --socket ws:1234\n\n   Use libwesockets to implement feature.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 1.841796875,
          "content": "project('tio', 'c',\n    version : '3.8',\n    license : [ 'GPL-2'],\n    meson_version : '>= 0.53.2',\n    default_options : [ 'warning_level=2', 'buildtype=release', 'c_std=gnu99' ]\n)\n\n# The tag date of the project_version(), update when the version bumps.\nversion_date = '2024-11-30'\n\n# Test for dynamic baudrate configuration interface\ncompiler = meson.get_compiler('c')\nenable_setspeed2 = false\nenable_iossiospeed = false\nif host_machine.system() != 'darwin'\n  if compiler.check_header('asm-generic/ioctls.h')\n    enable_setspeed2 = compiler.has_header_symbol('asm-generic/ioctls.h', 'TCGETS2')\n  endif\nelse\n  if compiler.check_header('IOKit/serial/ioss.h')\n    enable_iossiospeed = compiler.has_header_symbol('IOKit/serial/ioss.h', 'IOSSIOSPEED')\n  endif\nendif\n\n# Test for supported baudrates\ntest_baudrates = [\n    0,\n    50,\n    75,\n    110,\n    134,\n    150,\n    200,\n    300,\n    600,\n    1200,\n    1800,\n    2400,\n    4800,\n    7200,\n    9600,\n    14400,\n    19200,\n    28800,\n    38400,\n    57600,\n    76800,\n    115200,\n    230400,\n    460800,\n    500000,\n    576000,\n    921600,\n    1000000,\n    1152000,\n    1500000,\n    2000000,\n    2500000,\n    3000000,\n    3500000,\n    4000000 ]\n\nbaudrates = ''\nbaudrate_cases = ''\nforeach rate : test_baudrates\n  baudrate = rate.to_string()\n  value = compiler.get_define('B' + baudrate, prefix: '#include <termios.h>')\n  if value != ''\n    baudrates = baudrates + baudrate + ' '\n    baudrate_cases = baudrate_cases + ' case ' + baudrate + ': baudrate = B' + baudrate + '; break;'\n  endif\nendforeach\n\n# Test for RS-485 support on Linux\nenable_rs485 = false\nif host_machine.system() == 'linux'\n  if compiler.check_header('linux/serial.h')\n    enable_rs485 = compiler.has_header_symbol('sys/ioctl.h', 'TIOCSRS485')\n  endif\nendif\n\nsubdir('src')\n\ninstall_man_pages = get_option('install_man_pages')\nif install_man_pages\n  subdir('man')\nendif\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.232421875,
          "content": "option('bashcompletiondir',\n       type : 'string',\n       description : 'Directory for bash completion scripts [\"no\" disables]')\noption('install_man_pages',\n       type : 'boolean', value: true,\n       description : 'Install man pages')\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}