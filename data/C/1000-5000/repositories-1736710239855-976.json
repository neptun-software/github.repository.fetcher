{
  "metadata": {
    "timestamp": 1736710239855,
    "page": 976,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fossasia/pslab-firmware",
      "stars": 1559,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.6767578125,
          "content": "BasedOnStyle: LLVM\nIndentWidth: 4\n\nLanguage: Cpp\n\n# Yes: int *a;\n# No: int* a;\n# Absolutely not: int * a;\nDerivePointerAlignment: false\nPointerAlignment: Right\n\n# East const\n# Yes: int const a;\n# No: const int a;\nQualifierAlignment: Right\n\n# If parameters do not fit on one line, do this:\n# void func(\n#     int a,\n#     int b\n# )\nAlignAfterOpenBracket: BlockIndent\nBinPackArguments: false\nBinPackParameters: false\nExperimentalAutoDetectBinPacking: false\nAllowAllParametersOfDeclarationOnNextLine: false\nPenaltyReturnTypeOnItsOwnLine: 1000\n\n# Attach braces to surrounding context, except on functions.\nBreakBeforeBraces: Linux\n\nAllowShortLoopsOnASingleLine: true\n\nBitFieldColonSpacing: Before\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.9892578125,
          "content": "Checks: [\n  bugprone*,\n\n  cert*,\n\n  cppcoreguidelines*,\n  # Need globals to communicate with interrupts\n  -cppcoreguidelines-avoid-non-const-global-variables,\n  # Covered by readability-magic-numbers\n  -cppcoreguidelines-avoid-magic-numbers,\n  # We use global aggregates to dispatch extern registers.\n  # This cannot cause order-of-initialization problems because\n  # registers are guaranteed to be initialized at reset.\n  -cppcoreguidelines-interfaces-global-init,\n\n  google*,\n\n  hicpp*,\n  # Bad warning: https://stackoverflow.com/questions/50399090/use-of-a-signed-integer-operand-with-a-binary-bitwise-operator-when-using-un\n  -hicpp-signed-bitwise,\n\n  llvm*,\n  # We use a different include guard style\n  -llvm-header-guard,\n\n  misc*,\n\n  modernize*,\n\n  performance*,\n\n  readability*,\n]\n\nCheckOptions:\n  - key: bugprone-easily-swappable-parameters.ModelImplicitConversions\n    value: false\n  - key: readability-function-cognitive-complexity.Threshold\n    value: '10'\n  - key: readability-function-size.LineThreshold\n    value: '80'\n\n  - key: readability-identifier-length.MinimumParameterNameLength\n    value: '1'\n  - key: readability-identifier-length.IgnoredVariableNames\n    value: '^dt|pu$'\n\n  - key: readability-magic-numbers.IgnorePowersOf2IntegerValues\n    value: 'true'\n  - key: readability-magic-numbers.IgnoredIntegerValues\n    value: '15;255;4095;65535;'\n\n    # Empty loops should look like this: while (condition) continue;\n  - key: readability-braces-around-statements.ShortStatementLines\n    value: '1'\n  - key: hicpp-braces-around-statements.ShortStatementLines\n    value: '1'\n\n  - key: readability-identifier-naming.EnumCase\n    value: 'CamelCase'\n  - key: readability-identifier-naming.FunctionCase\n    value: 'lower_case'\n  # Public functions have capitalized prefix\n  - key: readability-identifier-naming.GlobalFunctionCase\n    value: 'aNy_CasE'\n  # Interrupt service routines\n  - key: readability-identifier-naming.GlobalFunctionIgnoredRegexp\n    value: '_[A-Z0-9]+Interrupt'\n  - key: readability-identifier-naming.VariableCase\n    value: 'lower_case'\n  # Register names\n  - key: readability-identifier-naming.VariableIgnoredRegexp\n    value: '[A-Z][A-Z0-9]+(bits)?'\n  - key: readability-identifier-naming.StructCase\n    value: 'CamelCase'\n  - key: readability-identifier-naming.TypedefCase\n    value: 'CamelCase'\n  - key: readability-identifier-naming.TypedefIgnoredRegexp\n    value: '[A-Z]+_[a-zA-Z0-9]+'\n  - key: readability-identifier-naming.EnumIgnoredRegexp\n    value: '[A-Z]+_[a-zA-Z0-9]+'\n  - key: readability-identifier-naming.StructIgnoredRegexp\n    value: '[A-Z]+_[a-zA-Z0-9]+'\n  - key: readability-identifier-naming.UnionIgnoredRegexp\n    value: '[A-Z]+_[a-zA-Z0-9]+'\n  - key: readability-identifier-naming.UnionCase\n    value: 'CamelCase'\n  - key: readability-identifier-naming.GlobalConstantCase\n    value: 'UPPER_CASE'\n  - key: readability-identifier-naming.GlobalConstantPrefix\n    value: 'g_'\n  - key: readability-identifier-naming.MacroDefinitionCase\n    value: 'UPPER_CASE'\n\nFormatStyle:     file\nSystemHeaders:   false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.099609375,
          "content": ".DS_Store\n\n.generated_files\nbuild*\ndist\nnbproject\nMakefile\n\n*.dump\n.vscode/*\n.idea/*\n\n*~* \n\\#*\\#\n.\\#*\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1201171875,
          "content": "[submodule \"external/cmake-microchip\"]\n\tpath = external/cmake-microchip\n\turl = https://github.com/fossasia/cmake-microchip\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.47265625,
          "content": "# Changelog\n\n## [3.0.4] - 2025-01-05\n\n### Fixed\n\n- Fix ACKSTAT missing from response in several I2C commands ([`6356eb2`](https://github.com/fossasia/pslab-firmware/commit/6356eb2656f856327c9090bcbd6e404db78ae2f0)) (Alexander Bessman)\n\n## [3.0.3] - 2024-08-19\n\n### Fixed\n\n- Fix UART2 pin mappings not matching labels ([`5728b36`](https://github.com/fossasia/pslab-firmware/commit/5728b36939f8dd76bfd83889c1cd94a57bab4329)) (Alexander Bessman)\n\n## [3.0.2] - 2024-07-30\n\n### Added\n\n- Add changelog (Alexander Bessman)\n\n### Fixed\n\n- Fix `I2C_CommandReadBulk` reading one too many bytes ([`4ea85ec`](https://github.com/fossasia/pslab-firmware/commit/4ea85ec9ecda2f9ec4dcab0b56f0de5edb6fbfaa)) (Alexander Bessman)\n\n## [3.0.1] - 2024-07-15\n\n### Fixed\n\n- Fix broken capacitance measurement ([`36d4fd3`](https://github.com/fossasia/pslab-firmware/commit/36d4fd31fe6edc3845e16ab71af899f61262b061)) (Alexander Bessman)\n- Fix second half of sample buffer not being cleared ([`54034b8`](https://github.com/fossasia/pslab-firmware/commit/54034b81549d735af3ab5050bdcd06a08269a6b2)) (Alexander Bessman)\n\n## [3.0.0] - 2024-01-15\n\n_Major refactorization of firmware._\n\n[3.0.4]: https://github.com/fossasia/pslab-firmware/releases/tag/3.0.4\n[3.0.3]: https://github.com/fossasia/pslab-firmware/releases/tag/3.0.3\n[3.0.2]: https://github.com/fossasia/pslab-firmware/releases/tag/3.0.2\n[3.0.1]: https://github.com/fossasia/pslab-firmware/releases/tag/3.0.1\n[3.0.0]: https://github.com/fossasia/pslab-firmware/releases/tag/v3.0.0\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.787109375,
          "content": "cmake_minimum_required(VERSION 3.16)\nset(CMAKE_TOOLCHAIN_FILE external/cmake-microchip/toolchain.cmake)\nset(MICROCHIP_MCU PIC24EP256GP204)\n\nproject(PSLAB_FIRMWARE LANGUAGES C ASM)\n\nadd_executable(pslab-firmware.elf)\n\nadd_subdirectory(src)\n\ntarget_include_directories(pslab-firmware.elf\n  PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\n\ntarget_compile_options(pslab-firmware.elf PRIVATE\n  -Wall\n  -Wextra\n  -mno-eds-warn)\n\ntarget_link_options(pslab-firmware.elf PRIVATE\n  \"LINKER:-Map=pslab-firmware.map,--report-mem\")\n\nif (LEGACY_HARDWARE)\n  message(\"Building for PSLab v5\")\n  add_compile_definitions(V5_HW)\nelse()\n  message(\"Building for PSLab v6\")\nendif(LEGACY_HARDWARE)\n\nif (ENABLE_DEBUG)\n  message(\"Debug messages enabled\")\n  add_compile_definitions(PSLAB_DEBUG)\nendif(ENABLE_DEBUG)\n\nbin2hex(pslab-firmware.elf)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.037109375,
          "content": "# PSLab Firmware\n\nThis repository contains firmware for the\n[Pocket Science Lab (PSLab)](https://pslab.io) open hardware platform.\nHardware version 5 and 6 are supported.\n\n![Build Status](https://github.com/fossasia/pslab-firmware/actions/workflows/main-builder.yml/badge.svg)\n[![Gitter](https://badges.gitter.im/fossasia/pslab.svg)](https://gitter.im/fossasia/pslab?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Mailing List](https://img.shields.io/badge/Mailing%20List-FOSSASIA-blue.svg)](https://groups.google.com/forum/#!forum/pslab-fossasia)\n![Twitter Follow](https://img.shields.io/twitter/follow/pslabio.svg?style=social&label=Follow&maxAge=259)\n\n## Pocket Science Lab\n\nThe PSLab provides an array of test and measurement instruments for doing\nscience and engineering experiments. Its built-in instruments include an\noscilloscope, a waveform generator, a frequency counter, programmable voltage\nand current sources, and a logic analyzer. The PSLab also has UART, I2C, and SPI\nbuses, via which external devices can be connected and controlled.\n\nThe PSLab is a fully open device, and FOSSASIA provides a complete hardware\nand software stack under open source licenses:\n\n- [Hardware](https://github.com/fossasia/pslab-hardware)\n- [Bootloader](https://github.com/fossasia/pslab-bootloader)\n- [Firmware](https://github.com/fossasia/pslab-firmware)\n- [Python library](https://github.com/fossasia/pslab-python)\n- [Graphical desktop application](https://github.com/fossasia/pslab-desktop)\n- [Android app](https://github.com/fossasia/pslab-android)\n\n### Buy\n\n- You can get a Pocket Science Lab device from the\n    [FOSSASIA shop](https://fossasia.com/)\n\n- More resellers are listed on the [PSLab website](https://pslab.io/shop/)\n\n### Get in touch\n\n- The PSLab [chat channel is on Gitter](https://gitter.im/fossasia/pslab)\n- Please also join us on the\n  [PSLab Mailing List](https://groups.google.com/forum/#!forum/pslab-fossasia)\n\n## Dependencies\n\nThe following tools are required to build the firmware:\n\n- xc16 compiler\n- cmake\n\n## Building\n\nThis project is built with CMake. After cloning this repository, you must first\ninitialize and update the toolchain submodule:\n\n```bash\ngit submodule init\ngit submodule update\n```\n\nThis will populate the `external/cmake-microchip` directory, after which the\nfirmware can be built:\n\n```bash\nmkdir build\ncd build\ncmake ..\nmake\n```\n\nThis will create a build artifact in the `build` directory:\n`pslab-firmware.hex`.\n\n## Flashing\n\nThe firmware can be flashed over USB or by using a programmer such as the\nPICkit3.\n\n### Over USB\n\nFirmware can be flashed over USB if the device already has the\n[bootloader](https://github.com/fossasia/pslab-bootloader) installed.\n\nFlashing the firmware requires mcbootblash which can be installed standalone\nor as a dependency of the pslab-python library.\nSee [mcbootflash](https://github.com/bessman/mcbootflash)\nor [pslab-python](https://github.com/fossasia/pslab-python) for installation\ninstructions.\n\nFollow these steps to flash new firmware:\n\n0. If using PSLab v5, see [Entering bootloader mode on PSLab v5](#entering-bootloader-mode-on-pslab-v5)\n\n1. Press and hold the 'BOOT' button\n\n2. Press the 'RESET' button\n   1. The 'Status' LED should start blinking, indicating that the device is\n      in bootloader mode\n\n   2. Release the 'BOOT' button\n\n3. Run `mcbootflash --port <portname> -b 460800 firmware.hex`\n\n4. After flashing is complete, reset or power cycle the device\n\n### Using a programmer\n\n> **Warning**\n> If your device contains a bootloader, flashing just the firmware HEX with a\n> programmer will OVERWRITE the bootloader. If for some reason you are unable\n> to flash over USB, it is a better idea to first create a combined HEX file\n> containing both the bootloader and the firmware and flash that, rather than\n> flashing the pure firmare HEX. See the\n> [bootloader repository](https://github.com/fossasia/pslab-bootloader/#creating-a-combined-hex-file)\n> for instructions on how to create a combined HEX.\n\nFlashing with a programmer requires the mdb.sh script, which is distributed as\npart of Microchip's MPLAB-X software suite. On Linux, the default installation\npath for mdb.sh is `/opt/microchip/mplabx/<version>/mplab_platform/bin/mdb.sh`.\nThis script is used to run the file flash.mdbscript, located in the repository\nroot. Before following the below steps, you may need to modify flash.mdbscript\ndepending on which programmer you are using and the location of the firmware\nHEX.\n\n1. Disconnect the device from any power source\n2. Connect the programmer to the device's ICSP header\n3. Power on the device via USB\n4. Run `mdb.sh flash.mdbscript`\n5. Disconnect the programmer\n\n### Entering bootloader mode on PSLab v5\n\nThe PSLab v5 lacks the BOOT button which is used to enter bootloader mode on\nthe v6. The pin which is connected to the BOOT button on the v6 is present,\nhowever. It is therefore possible to enter bootloader mode on the v5 by\nfollowing these steps.\n\n> **Note**\n> The PSLab v5 does not come with the bootloader preinstalled. These steps\n> will have no effect unless you have already installed the bootloader as\n> described [here](https://github.com/fossasia/pslab-bootloader#flashing).\n\n1. With the USB port to the top left of the board, the 5:th pin on the MCU's\n   left side is the BOOT pin, counting from the top. Immediately below it\n   (6:th from the top) is a conveniently located GND pin:\n   ![How to enter bootloader on PSLab v5](docs/images/bootloader_v5.png)\n\n2. Bridge these pins by touching both simultaneously with a small piece of\n   metal, such as the tip of a jump wire or a paper clip.\n\n3. Reset or power cycle the device. The v5 lacks a RESET button, but you can\n   soft-reset it through `pslab-python`:\n\n   ```python\n   import pslab\n   pslab.ScienceLab().reset()\n   ```\n\n4. The BOOT and GND pins must be bridged when the reset / power cycle happens.\n   If you did it right the SYSTEM LED will start blinking, indicating that the\n   PSLab is in bootloader mode.\n\n## Repository structure\n\n```shell\n📦pslab-firmware\n ┣ 📂src                        # PSLab firmware source code\n ┃ ┣ 📂bus                      # Communication specific source files\n ┃ ┃ ┣ 📜 ...\n ┃ ┃ ┗ 📜i2c.c\n ┃ ┣ 📂helpers                  # Supplementary functions\n ┃ ┃ ┣ 📜 ...\n ┃ ┃ ┗ 📜version.c\n ┃ ┣ 📂instruments              # Instrument specific source files\n ┃ ┃ ┣ 📜 ...\n ┃ ┃ ┗ 📜multimeter.c\n ┃ ┣ 📂registers                # PIC specific register entry files\n ┃ ┃ ┣ 📂comparators\n ┃ ┃ ┃ ┣ 📜 ...\n ┃ ┃ ┃ ┗ 📜ic1.c\n ┃ ┃ ┣ 📂 ...                   # includes converters, memory, system\n ┃ ┃ ┣ 📂timers\n ┃ ┃ ┃ ┣ 📜 ...\n ┃ ┃ ┃ ┗ 📜tmr1.c\n ┃ ┣ 📂sdcard                   # SD Card specific file handling source files\n ┃ ┣ 📜 ...\n ┃ ┣ 📜main.c                   # Entry point to PSLab Core\n ┃ ┣ 📜commands.c               # Entry point to function implementations\n ┣ 📂external\n ┃ ┣ 📂cmake-microchip          # Toolchain submodule\n ┣ 📜CMakeLists.txt\n ┣ 📜flash.mdbscript\n ┣ 📜LICENSE\n ┗ 📜README.md\n```\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "flash.mdbscript",
          "type": "blob",
          "size": 0.0888671875,
          "content": "device PIC24EP256GP204\nhwtool PICkit3 -p\nprogram build/pslab-firmware.hex\nsleep 1000\nreset\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}