{
  "metadata": {
    "timestamp": 1736709860917,
    "page": 335,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jeelabs/esp-link",
      "stars": 2869,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3203125,
          "content": "build/\nfirmware/\nespfs/mkespfsimage/*.o\nespfs/mkespfsimage/mkespfsimage\nwebpages.espfs\nespfs/espfstest/*.o\nespfs/espfstest/espfstest\n*.DS_Store\nhtml_compressed/\nesp-link.tgz\ntve-patch/\nyui\nespfs/mkespfsimage/mman-win32/mman.o\nesp-link.opensdf\nesp-link.sdf\nespfs/mkespfsimage/mman-win32/libmman.a\n.localhistory/\nlocal.conf\n*.tgz\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.119140625,
          "content": "# Travis-CI file for Esp-Link\n\nlanguage: c\n\ngit:\n  depth: 1000\n\nbefore_install:\n  - curl -Ls http://s3.voneicken.com/xtensa-lx106-elf-20160330.tgx | tar Jxf -\n  - curl -Ls http://s3.voneicken.com/esp_iot_sdk_v2.1.0.tgx | tar -C .. -Jxf -\n\nafter_script:\n # upload to an S3 bucket, requires S3_BUCKET, AWS_ACCESS_KEY_ID and AWS_SECRET_KEY to be set\n # in environment using travis' repository settings\n  - \"if [[ -n \\\"$S3_BUCKET\\\" && -n \\\"$AWS_ACCESS_KEY_ID\\\" ]]; then\n     echo Uploading *.tgz to $S3_BUCKET;\n     curl -Ls https://github.com/rlmcpherson/s3gof3r/releases/download/v0.5.0/gof3r_0.5.0_linux_amd64.tar.gz | tar zxf - gof3r_0.5.0_linux_amd64/gof3r;\n     mv gof3r*/gof3r .;\n     ls *.tgz | xargs -I {} ./gof3r put -b $S3_BUCKET -k esp-link/{} --acl public-read -p {};\n     ls *.tgz | xargs -I {} echo \\\"URL: http://$S3_BUCKET/esp-link/{}\\\";\n     fi\"\n\ncompiler: gcc\n\nenv:\n\nscript:\n  - export XTENSA_TOOLS_ROOT=$PWD/xtensa-lx106-elf/bin/\n  - export BRANCH=$TRAVIS_BRANCH\n    #- export SDK_BASE=$PWD/esp_iot_sdk_v2.0.0.p1\n  - git tag -n1\n  - git describe --tags --match 'v*.0' --long --debug\n  - make release\n\nnotifications:\n  email: false\n"
        },
        {
          "name": "BOARDS.md",
          "type": "blob",
          "size": 10.0556640625,
          "content": "Boards with esp-link\n====================\n\nThis readme provides instructions for PCBs that I've made that are designed for esp-link.\nSome of the instructions may be helpful to others as well.\n\nesp-bridge\n----------\n![dsc_5127](https://cloud.githubusercontent.com/assets/39480/8509323/11037aa2-2252-11e5-9bd2-6c86c9a3b2ed.jpg)\n\nThe esp-bridge has an esp-03 modulde, an FTDI connector (with wrong pinout!), a 3-pin power\nand debug connector, and two buttons.\nNext to the buttons it is marked \"TvE2015 esp-ftdi\".\nIt comes preloaded with the latest version of esp-link.\n\nPower: the on-board MCP1825S-33 regulator can provide 500mA and is good from about 3.6v to 6v.\nConnect power either to the 3-pin connector (GND in center, 5v towards the esp module), or to\nthe FTDI connector (GND marked next to the buttons, 5V on 3rd pin).\n\nOn power-up you should see the green LED on for ~1 second (the yellow should go on too, but\nthe firmware may not be configured correctly). After that the green should blink according to the\npatterns described in the README's LED indicators section. Follow the Wifi configuration details\nsection thereafter.\n\nTo connect a JeeNode to the esp-bridge to flash the AVR or debug it, plug it into the FTDI\nport flipped-over, i.e. the component side of the JeeNode will be on the bottom and the\ncomponents of the esp-bridge will be on the top. (Yes, the FTDI port should have been reversed\non the esp-bridge...)\n\nTo program the JeeNode, having set-up the Wifi through the web pages, run avrdude with an\noption like \"-Pnet:esp8266:23\" (you can use an IP address instead of `esp8266`). My test command\nline is as follows:\n```\n/home/arduino/arduino-1.0.5/hardware/tools/avrdude \\\n  -C /home/arduino/arduino-1.0.5/hardware/tools/avrdude.conf -DV -patmega328p \\\n  -Pnet:esp8266:23 -carduino -b115200 -U flash:w:greenhouse.hex:i\n```\nIf you're using \"edam's Arduino makefile\" then you can simply set `SERIALDEV=net:bbb:2000` in your\nsketch's Makefile.\n\nTo program an LPC processor using the JeeLabs uploader. follow the instructions below for the jn-esp.\n\nReflashing the esp-bridge itself (as opposed to the attached uController):\n_you should not need to do this!_, in general use the over-the-air reflashing by downloading the latest release.\nIf you cannot reflash over-the-air and need to reflash serially, connect TX of a\nUSB BUB to RX of the esp-bridge and RX to TX (i.e. cross-over). Hold the flash button down\nand briefly press the reset button. Then run esptool.py.as described below.\n\njn-esp\n-------\n![dsc_5125](https://cloud.githubusercontent.com/assets/39480/8509322/08194674-2252-11e5-8539-4eacb0d79304.jpg)\n\nThe jn-esp has an esp-03 module, an LPC824, a pseudo-FTDI connector (marked in tiny letters)\nand a JeePort (also marked). On the bottom it is marked \"JN-ESP-V2\".\nIt comes preloaded with the latest version of esp-link.\n\nPower: the on-board MCP1825S-33 regulator can provide 500mA and is good from about 3.6v to 6v.\nConnect power to the FTDI connector (GND and 5V marked on bottom).\n\nOn power-up you should see the green LED on for ~1 second (the yellow should go on too, but\nthe firmware may not be configured correctly). After that the green should blink according to the\npatterns described in the README's LED indicators section. Follow the Wifi configuration details\nsection thereafter.\n\nTo program the LPC824 _ensure that you have a recent version of the Embello uploader_\nand point the Embello uploader at port 23. Something like:\n```\nuploader -w -t -s 192.168.0.92:23 build/firmware.bin\n```\nRemove the -s option if you don't want to stay connected. A simple sketch to try this out\nwith is the [hello sketch](https://github.com/jeelabs/embello/tree/master/projects/jnp/hello).\nThe result should look something like:\n```\n$ uploader -w -t -s jn-esp:23 build/firmware.bin\nfound: 8242 - LPC824: 32 KB flash, 8 KB RAM, TSSOP20\nhwuid: 16500407679C61AE7189A053830200F5\nflash: 0640 done, 1540 bytes\nentering terminal mode, press <ESC> to quit:\n\n\n[hello]\n500\n1000\n1500\n2000\n2500\n...\n```\n\nThe pseudo-ftdi connector has the following pin-out:\n - 1: GND (marked on bottom)\n - 2: LPC824 P17/A9\n - 3: 5V (marked on bottom)\n - 4: LPC824 P11/SDA\n - 5: LPC824 P10/SCL\n - 6: LCP824 P23/A3/C4\n\nThe JeePort connector has the following pin-out:\n - 1: LPC824 SWDIO/P2 (not 5v unlike JeeNodes!)\n - 2: LPC824 P14/A2/C3\n - 3: GND\n - 4: 3.3V (reg output)\n - 5: LPC824 P13/A10\n - 6: LPC824 SWCLK/P2\n\nReflashing the jn-esp's esp8266 itself (as opposed to the attached uController):\n_you should not need to do this!_, in general use the over-the-air reflashing by downloading the latest release.\nIf you cannot reflash over-the-air and need to reflash serially, there are SMD pads for an FTDI connector on the\nbottom of the PCB below the esp-03 module. GND is marked. The best is to solder a right-angle\nconnector to it such that the pins point up (i.e. to the component side). You can then\nhook-up a USB-BUB. I recommend jumpering the flash pin (next to GND) to GND and to\nhook the reset pin (6) to the USB-BUB's DTR (should happen automatically). RX&TX also go\nstraight through).\n\nWifi-link-12\n------------\n\nThe wifi-link has an esp-12 modulde, an FTDI connector, and a 2-pin power connector.\nThe underside is marked \"Wifi-link-12-v2 Jeelabs TvE2015\".\nIt comes preloaded with the latest version of esp-link V2.\n\nThe ftdi connector has the following pin-out:\n - 1: GND (marked top&bottom)\n - 2: CTS (used as ISP to program ARM processors, also esp's TX when flashing the esp)\n - 3: 5V (marked on bottom)\n - 4: TX (from the esp)\n - 5: RX (to the esp)\n - 6: DTR (used ass reset to program AVR and ARM processors, also esp's RX when flashing the esp)\n\nPower: the on-board LM3671 switching regulator can provide 600mA while staying cool and is good from about 3.6v to 5.5v!\nConnect power to the marked power connector or to the FTDI connector (GND marked, 5V on 3rd pin). Do not exceed 5.5v!!\n\nIt is possible to bypass the on-board regulator and power the wifi-link directly with 3.3v: connect the 3.3v to the FTDI connector (\"5v\" pin) and switch the jumper on the bottom from 5v to 3v3 (you need to cut the tiny trace on the 5v side and jumper the two pads on the 3v3 side).\n\nOn power-up you should see the green LED on for ~1 second (the yellow should go on too, but\nthe firmware may not be configured correctly). After that the green should blink according to the\npatterns described in the README's LED indicators section. Follow the Wifi configuration details\nsection thereafter.\n\nThe bottom also has a \"sleep\" jumper which connects the esp's reset pin with its gpio16 to enable deep-sleep\nmode. This jumper is open and must be bridged to use the timed-wake-up feature of the esp's deep-sleep mode.\n\nTo connect a JeeNode to the esp-bridge to flash the AVR or debug it, plug it into the FTDI\nport straight, i.e. the component side of the JeeNode and of the wifi-link will be on the top.\n\nTo connect an arduino, jumper gnd, tx, rx, and dtr for reset. The wifi-link-12-v2 has a 2.2K resistor on rx (serial going from AVR to esp) in order to protect it from 5v signals.\n\nTo program the JeeNode or AVR, having set-up the Wifi through the web pages, run avrdude with an\noption like \"-Pnet:esp-link:23\" (you can use an IP address instead of `esp-link`). My test command\nline is as follows:\n```\n/home/arduino/arduino-1.0.5/hardware/tools/avrdude \\\n  -C /home/arduino/arduino-1.0.5/hardware/tools/avrdude.conf -DV -patmega328p \\\n  -Pnet:esp-link:23 -carduino -b115200 -U flash:w:greenhouse.hex:i\n```\nIf you're using \"edam's Arduino makefile\" then you can simply set `SERIALDEV=net:esp-link:23` in your\nsketch's Makefile. You can also use port 2323 which forces programming mode (no real benefit with avrdude, but can\nenable programming PICs).\n\nSerially reflashing the wifi-link itself (as opposed to the attached uController):\n_you should not need to do this!_, in general use the over-the-air reflashing by downloading the latest release.\nIf you cannot reflash over-the-air and need to reflash serially, follow this process:\n- connect TX of the programmer (such as USB-BUB or a FDTI-friend) to DTR (FTDI pin 6)\n- connect RX of the programmer to CTS (FTDI pin 2)\n- short the flash jumper on the top of the board (push tweezers or a piece of wire into the jumper gap),\n  the green LED will be on solid when you have contact\n- briefly interrupt the power to reset the esp\n- it will now be in flash mode: the green LED should be off (assuming you release the flash jumper),\n  if you see the green LED come on it has rebooted into esp-link and you need to reset it again\n  (the whole proess take some fiddling, you can solder a real jumper or switch to the flash pads and there's a similar\n  reset jumper pad on the bottom of the PCB).\n- use your favorite programming tool to reflash, you have time if the esp really entered programming mode, it often takes me\n  2-3 tries until the programming works\n\nSerial flashing\n---------------\n\nOnce you have a version of esp-link flashed to your module or if you received a pre-flashed\nmodule from me you should not need this section. But sometimes things fail badly and your\nmodule is \"brocked\", this is how you receover.\n\n### Installing esptool.py\n\nOn Linux I am using [esptool.py](https://github.com/themadinventor/esptool) to flash the esp8266.\nIf you're a little python challenged (like I am) then the following install instructions might help:\n - Install ez_setup with the following two commands (I believe this will do something\n   reasonable if you already have it):\n\n        wget https://bootstrap.pypa.io/ez_setup.py\n        python ez_setup.py\n\n - Install esptool.py:\n\n        git clone https://github.com/themadinventor/esptool.git\n        cd esptool\n        python setup.py install\n        cd ..\n        esptool.py -h\n\n### Flashing esp-link\n\nUsing esptool.py a esp-link release can be flashed as follows:\n```\ncurl -L https://github.com/jeelabs/esp-link/releases/download/0.10.1/esp-link.tgz | tar xzf -\ncd esp-link\nesptool.py write_flash 0x00000 boot_v1.4\\(b1\\).bin 0x1000 user1.bin 0x7e000 blank.bin\n```\nIf you want to speed things up a bit and if you need to specify the port you can use a command\nline like:\n```\nesptool.py --port /dev/ttyUSB0 --baud 460880 write_flash 0x00000 boot_v1.4\\(b1\\).bin \\\n           0x1000 user1.bin 0x7e000 blank.bin\n```\n"
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 6.095703125,
          "content": "Building esp-link\n=================\n\nBefore you build esp-link, consider that you can download ready-made firmware images!\nJust head over to the [release section](https://github.com/jeelabs/esp-link/releases)\nand download the tgz archive.\n\nIf you decide to build your own, there are a number of options:\n- On linux x86 download the ready-built toolchain and patched SDK like the automated build does\n  and compile the firmware\n- On linux use a docker image with the toolchain and the SDK to compile the firmware\n- On linux download and build the toolchain, download and patch the SDK, then compile the firmware\n- On windows use a docker image with the toolchain and the SDK to compile the firmware\n- On windows install mingw, python, java, and a slew of other tools and then build the\n  firmware\n\nOnce you have built the firmware you will want to flash it to your esp8266 module.\nAssuming you already have esp-link running you can either go back to the initial flashing\nvia the serial port or you can use the over-the-air (i.e. Wifi) update method, which is faster\nand more reliable (unless you have a non-booting version of esp-link).\nThe OTA flashing is described at the end of this page,\nthe serial flashing is described in [FLASHING.md](FLASHING.md).\n\n### Automated builds\n\nFor every commit on github an automated build is made. This means that every branch, including\nmaster, and every pull request always has an up-to-date build. These builds are made by Travis\nusing the instructions in `.travis.yml`, which basically consist of cloning the esp-link repo,\ndownloading the compiler toolchain, downloading the Espressif SDK, and running `make`.\nIf you're looking for how to build esp-link the travis instructions will always give you\naccurate pointers to what to download.\n\n### Docker (linux or windows)\n\nThe [esp-link docker image](https://hub.docker.com/r/jeelabs/esp-link/) contains all the\ntools to build esp-link as well as the appropriate Espressif SDK. *It does not contain the\nesp-link source code!*. You use the docker image just to build the firmware, you don't have\nto do your editing in there. The steps are:\n- clone the esp-link github repo\n- checkout the branch or tag you want (for example the tag `v2.2.3` for that release)\n- cd into the esp-link top directory\n- run `make` in docker while mounting your esp-link directory into the container:\n  - linux: `docker run -v $PWD:/esp-link jeelabs/esp-link:latest`\n  - windows: `docker run -v c:\\somepath\\esp-link:/esp-link jeelabs/esp-link:latest`,\n    where `somepath` is the path to where you cloned esp-link, you probably end up with\n    something like `-v c:\\Users\\tve\\source\\esp-link:/esp-link`\n- if you are not building esp-link `master` then read the release notes to see which version of\n  the Espressif SDK you need and use that as tag for the container image, such as\n  `jeelabs/esp-link:SDK2.0.0.p1`; you can see the list of available SDKs on\n  [dockerhub](https://hub.docker.com/r/jeelabs/esp-link/tags/)o\n\nSample steps to build esp-link v2.2.3 on a Win7 Pro x64 (these use the docker terminal, there\nare multiple way to skin the proverbial cat...):\n1) Install Docker Toolbox ( http://www.docker.com/products/docker-toolbox )\n2) Install Git Desktop ( https://desktop.github.com/ )\n3) Clone esp-link from Github master to local repository ( https://github.com/jeelabs/esp-link )\n4) Open Docker Quickstart Terminal\n5) cd to local esp-link git repository ( C:\\Users\\xxxxx\\Documents\\GitHub\\esp-link )\n6) Run \"docker run -v $PWD:/esp-link jeelabs/esp-link\" command in Docker Quickstart Terminal window\n\nNote: there has been one report of messed-up timestamps on windows, the symptom is that `make`\ncomplains about file modification times being in the future. This may be due to the different\nway Windows and Linux handle time zones and daylight savings time. PLease report if you\nencounter this or know a solution.\n\n### Linux\n\nThe firmware has been built using the https://github.com/pfalcon/esp-open-sdk[esp-open-sdk]\non a Linux system. Create an esp8266 directory, install the esp-open-sdk into a sub-directory\nusing the *non-standalone* install (i.e., there should not be an sdk directory in the esp-open-sdk\ndir when done installing, *if you use the standalone install you will get compilation errors*\nwith std types, such as `uint32_t`).\n\nDownload the Espressif \"NONOS\" SDK (use the version mentioned in the release notes) from their\nhttp://bbs.espressif.com/viewforum.php?f=5[download forum] and also expand it into a\nsub-directory. Often there are patches to apply, in that case you need to download the patches\nfrom the same source and apply them.\n\nYou can simplify your life (and avoid the hour-long build time for esp-open-sdk) if you are\non an x86 box by downloading the packaged and built esp-open-sdk and the fully patches SDKfrom the\nlinks used in the `.travis.yaml`.\n\nClone the esp-link repository into a third sub-directory and check out the tag you would like,\nsuch as `git checkout v2.2.3`.\nThis way the relative paths in the Makefile will work.\nIf you choose a different directory structure look at the top of the Makefile for the\nappropriate environment variables to define.\nDo not use the source tarballs from the release page on github,\nthese will give you trouble compiling because the Makefile uses git to determine the esp-link\nversion being built.\n\nIn order to OTA-update the esp8266 you should `export ESP_HOSTNAME=...` with the hostname or\nIP address of your module.\n\nNow, build the code: `make` in the top-level of esp-link. If you want to se the commands being\nissued, use `VERBOSE=1 make`.\n\nA few notes from others (I can't fully verify these):\n\n- You may need to install `zlib1g-dev` and `python-serial`\n- Make sure you have the correct version of the SDK\n- Make sure the paths at the beginning of the makefile are correct\n- Make sure `esp-open-sdk/xtensa-lx106-elf/bin` is in the PATH set in the Makefile\n\n### Windows\n\nPlease consider installing docker and using the docker image to save yourself grief getting all\nthe tools installed and working.\nIf you do want to compile \"natively\" on Windows it certainly is possible.\n\nIt is possible to build esp-link on Windows, but it requires a \n[gaggle of software to be installed](WINDOWS.md)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.5068359375,
          "content": "Contributing to Esp-Link\n========================\n\nEsp-link is not the work of a single individual, rather many people have contributed directly or indirectly.\nYour contribution is very much appreciated, but please follow these guidelines to make the task easier on\neveryone.\n\n- Contributions do not have to be in the form of code: often documentation, how-tos are very valuable and answering questions\n  in github issues as well as gitter is also very valuable and welcome!\n- Before you make a change or submit a change via a pull request, **open an issue and discuss your proposed change**. Gitter\n  is a good alternative to a github issue. This ensures that you don't spend time doing work that ultimately won't be accepted.\n  There's nothing more frustrating than receiving a pull-request that has lots of goodies but doesn't fit because it wasn't\n  discussed and agreed upon up-front.\n- Keep your pull request as small as practical, if you have 3 things you want to change, please create 3 pull requests,\n  or at the very least, make sure your 3 changes are in different commits. This makes the review and testing easier\n  and ensures that if one feature is good to go it can be merged even if another feature needs more tweaking.\n- The esp-link codebase is not uniform, it comes from a variety of sources, in particular esphttpd. A result of this is\n  that there is more than one coding style in use. If you make changes to existing files, please respect the file's\n  coding style (yes, sometimes that's not even totally uniform). Your overall goal should be for your code or changes to\n  look as if the original author had made them, not how you would like them to look.\n- Changes that reformat or reorganize code will generally not be accepted, please do not mix them with other functionality\n  changes you are making and certainly discuss them first. Accept the fact that some people prefer bastards over pure-breads ;-).\n- Esp-link has a mission stated in the readme.md, changes that deviate from that mission will generally be rejected. The reason\n  is that at the end of the day focusing on doing one thing well has a higher chance of succeeding than doing many things.\n  In that sense, esp-link is not a swiss-army knife firmware. (This being said, many people have used esp-link as a basis to add\n  their own functionality, which is very cool.)\n  \nI believe the above guidelines are pretty standard across a very large number of open source projects and not unique to esp-link,\nso please do not get discouraged. Thank you for taking a look at esp-link!\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.24609375,
          "content": "# Dockerfile for github.com/jeelabs/esp-link\n#\n# This dockerfile is intended to be used to compile esp-link as it's checked out on\n# your desktop/laptop. You can git clone esp-link, and then compile it using\n# a commandline of `docker run -v $PWD:/esp-link jeelabs/esp-link`. The -v mounts\n# your esp-link source directory onto /esp-link in the container and the default command is\n# to run make.\n# If you would like to create your own container image, use `docker build -t esp-link .`\nFROM ubuntu:16.04\n\nRUN apt-get update \\\n && apt-get install -y software-properties-common build-essential python curl git \\\n                       zlib1g-dev openjdk-8-jre-headless\n\nRUN curl -Ls http://s3.voneicken.com/xtensa-lx106-elf-20160330.tgx | tar Jxf -\nRUN curl -Ls http://s3.voneicken.com/esp_iot_sdk_v2.1.0.tgx | tar -Jxf -\n\nENV XTENSA_TOOLS_ROOT /xtensa-lx106-elf/bin/\n\n# This could be used to create an image with esp-link in it from github:\n#RUN git clone https://github.com/jeelabs/esp-link\n\n# This could be used to create an image with esp-link in it from the local dir:\n#COPY . esp-link/\n\n# Expect the esp-link source/home dir to be mounted here:\nVOLUME /esp-link\nWORKDIR /esp-link\n\n# Default command is to run a build, can be overridden on the docker commandline:\nCMD make\n"
        },
        {
          "name": "FLASH.md",
          "type": "blob",
          "size": 4.283203125,
          "content": "ESP-LINK OTA Flash Layout\n=========================\n\nThe flash layout dictated by the bootloader is the following (all this assumes a 512KB flash chip\nand is documented in Espressif's `99C-ESP8266__OTA_Upgrade__EN_v1.5.pdf`):\n - @0x00000 4KB bootloader\n - @0x01000 236KB partition1\n - @0x3E000 16KB esp-link parameters\n - @0x40000 4KB unused\n - @0x41000 236KB partition2\n - @0x7E000 16KB system wifi parameters\n\nWhat this means is that we can flash just about anything into partition1 or partition2 as long\nas it doesn't take more than 236KB and has the right format that the boot loader understands.\nWe can't mess with the first 4KB nor the last 16KB of the flash.\n\nNow how does a code partition break down? that is reflected in the following definition found in\nthe loader scripts:\n```\n  dram0_0_seg :                         org = 0x3FFE8000, len = 0x14000\n  iram1_0_seg :                         org = 0x40100000, len = 0x8000\n  irom0_0_seg :                         org = 0x40201010, len = 0x2B000\n```\nThis means that 80KB (0x14000) are reserved for \"dram0_0\", 32KB (0x8000) for \"iram1_0\" and\n172KB (0x2B000) are reserved for irom0_0. The segments are used as follows:\n - dram0_0 is the data RAM and some of that gets initialized at boot time from flash (static variable initialization)\n - iram1_0 is the instruction RAM and all of that gets loaded at boot time from flash\n - irom0_0 is the instruction cache which gets loaded on-demand from flash (all functions\n   with the `ICACHE_FLASH_ATTR` attribute go there)\n\nYou might notice that 80KB+32KB+172KB is more than 236KB and that's because not the entire dram0_0\nsegment needs to be loaded from flash, only the portion with statically initialized data.\nYou might also notice that while iram1_0 is as large as the chip's instruction RAM (at least\naccording to the info I've seen) the size of the irom0_0 segment is smaller than it could be,\nsince it's really not bounded by any limitation of the processor (it simply backs the cache).\n\nWhen putting the OTA flash process together I ran into loader issues, namely, while I was having\nrelatively little initialized data and also not 32KB of iram1_0 instructions I was overflowing\nthe allotted 172KB of irom0_0. To fix the problem the build process modifies the loader scripts\n(see the `build/eagle.esphttpd1.v6.ld` target in the Makefile) to increase the irom0_0 segment\nto 224KB (a somewhat arbitrary value). This doesn't mean that there will be 224KB of irom0_0\nin flash, it just means that that's the maximum the linker will put there without giving an error.\nIn the end what has to fit into the magic 236KB is the sum of the actual initialized data,\nthe actually used iram1_0 segment, and the irom0_0 segment.\nIn addition, the dram0_0 and iram1_0 segments can't exceed what's specified\nin the loader script 'cause those are the limitations of the processor.\n\nNow that you hopefully understand the above you can understand the line printed by the Makefile\nwhen linking the firmware, which looks something like:\n```\n** user1.bin uses 218592 bytes of 241664 available\n```\nHere 241664 is 236KB and 218592 is the size of what's getting flashed, so you can tell that you have\nanother 22KB to spend (modulo some 4KB flash segment rounding).\n(Note that user2.bin has exactly the same size, so the Makefile doesn't print its info.)\nThe Makefile also prints a few more details:\n```\nls -ls eagle*bin\n  4 -rwxrwxr-x 1 tve tve   2652 May 24 10:12 eagle.app.v6.data.bin\n176 -rwxrwxr-x 1 tve tve 179732 May 24 10:12 eagle.app.v6.irom0text.bin\n  8 -rwxrwxr-x 1 tve tve   5732 May 24 10:12 eagle.app.v6.rodata.bin\n 32 -rwxrwxr-x 1 tve tve  30402 May 24 10:12 eagle.app.v6.text.bin\n```\nThis says that we have 179732 bytes of irom0_0, we have 5732+2652 bytes of dram0_0 (read-only data\nplus initialized read-write data), and we have 30402 bytes of iram1_0.\n\nThere's an additional twist to all this for the espfs \"file system\" that esphttpd uses.\nThe data for this is loaded at the end of irom0_0 and is called espfs.\nThe Makefile modifies the loader script to place the espfs at the start of irom0_0 and\nensure that it's 32-bit aligned. The size of the espfs is shown here:\n```\n4026be14 g       .irom0.text    00000000 _binary_espfs_img_end\n40269e98 g       .irom0.text    00000000 _binary_espfs_img_start\n00001f7c g       *ABS*  00000000 _binary_espfs_img_size\n```\nNamely, 0x1f7c = 8060 bytes.\n\n\n"
        },
        {
          "name": "FLASHING.md",
          "type": "blob",
          "size": 9.1083984375,
          "content": "Flashing esp-link\n=================\n\n### Hardware configuration for normal operation\n\nThis firmware is designed for any esp8266 module.\nThe recommended connections for an esp-01 module are:\n\n- URXD: connect to TX of microcontroller\n- UTXD: connect to RX of microcontroller\n- GPIO0: connect to RESET of microcontroller\n- GPIO2: optionally connect green LED to 3.3V (indicates wifi status)\n\nThe recommended connections for an esp-12 module are:\n\n- URXD: connect to TX of microcontroller\n- UTXD: connect to RX of microcontroller\n- GPIO12: connect to RESET of microcontroller\n- GPIO13: connect to ISP of LPC/ARM microcontroller (not used with Arduino/AVR)\n- GPIO0: either a 1k-10k pull-up resistor to 3.3v or a green \"conn\" LED via a 1k-2.2k\n  resistor to 3.3V (indicates wifi status)\n- GPIO2: either a 1k-10k pull-up resistor to 3.3v or a yellow \"ser\" LED via a 1k-2.2k\n  resistor to 3.3V (indicates serial activity)\n\nAt boot time the esp8266 ROM outputs a boot message on UTXD, this can cause problems to the attached\nmicrocontroller. If you need to avoid this, you can configure esp-link to swap the uart pins.\nYou should then connect the esp-12 module as follows and choose the \"swap_uart\" pin assignment\nin the esp-link web interface:\n\n- GPIO13: connect to TX of microcontroller\n- GPIO15: connect to RX of microcontroller and use a pull-down to ensure proper booting\n- GPIO12: connect to RESET of microcontroller\n- GPIO14: connect to ISP of LPC/ARM microcontroller (not used with Arduino/AVR)\n- GPIO0: either a 1k-10k pull-up resistor to 3.3v or a green \"conn\" LED via a 1k-2.2k\n  resistor to 3.3V (indicates wifi status)\n- GPIO2: either a 1k-10k pull-up resistor to 3.3v or a yellow \"ser\" LED via a 1k-2.2k\n  resistor to 3.3V (indicates serial activity)\n\nThe GPIO pin assignments can be changed dynamically in the web UI and are saved in flash.\n\n### Hardware configuration for flashing\n\nTo flash firmware onto the esp8266 via the serial port the following must be observed:\n- GPIO0 must be low when reset ends to put the esp8266 into flash programming mode, it must be high\n  to enter normal run mode\n- GPIO2 must be high (pull-up resistor)\n- GPIO15 must be low (pull-down resistor)\n\n### Initial serial flashing\n\nDownload the latest [release](https://github.com/jeelabs/esp-link/releases) or use the\n`user1.bin` file that is produced by the build process.\nYou will need to flash the bootloader, the `user1.bin` firmware, blank wifi settings, and init data\nas described below.\n\n_Important_: the firmware adapts to the size of the flash chip using information\nstored in the boot sector (address 0). This is the standard way that the esp8266 SDK detects\nthe flash size. What this means is that you need to set this properly when you flash the bootloader.\nIf you use esptool.py you can do it using the -ff and -fs options. See the end of this page for\ninstructions on installing esptool.py.\n\nThe short version for the serial flashing is:\n- flash `boot_v1.X.bin` from the official SDK or from the release tgz to `0x00000`\n- flash `blank.bin` from the official SDK or from the tgz to `0x3FE000`\n- flash `esp_init_data_default.bin` from the official SDK or from the tgz to `0x3FC000`\n- flash `user1.bin` to `0x01000`\n- be sure to use the commandline flags to set the correct flash size when flashing the bootloader\n- some of the addresses vary with flash chip size\n\nAfter the initial flashing if you want to update the firmware it is recommended to use the\nover-the-air update described further down. If you want to update serially you only need to\nreflash `user1.bin`.\n\n### 32Mbit / 4Mbyte module\nOn Linux using esptool.py this turns into the following for a 32mbit=4MByte flash chip,\nsuch as an esp-12 module typically has (_substitute the appropriate release number and bootloader\nversion number_):\n```\ncurl -L https://github.com/jeelabs/esp-link/releases/download/v2.2.3/esp-link-v2.2.3.tgz | \\\n    tar xzf -\ncd esp-link-v2.2.3\nesptool.py --port /dev/ttyUSB0 --baud 230400 write_flash -fs 32m -ff 80m \\\n    0x00000 boot_v1.5.bin 0x1000 user1.bin \\\n    0x3FC000 esp_init_data_default.bin 0x3FE000 blank.bin\n```\nI use a high baud rate as shown above because I'm impatient, but that's not required. Attention: For some modules you have to set the flash mode to `dio` by adding `--fm dio` to the command line above, otherwise they won't boot. \n\n### 4Mbit / 512Kbyte module\n```\ncurl -L https://github.com/jeelabs/esp-link/releases/download/v2.2.3/esp-link-v2.2.3.tgz | \\\n    tar xzf -\ncd esp-link-v2.2.3\nesptool.py --port /dev/ttyUSB0 --baud 460800 write_flash -fs 4m -ff 40m \\\n    0x00000 boot_v1.5.bin 0x1000 user1.bin \\\n    0x7C000 esp_init_data_default.bin 0x7E000 blank.bin\n```\nThe `-fs 4m -ff40m` options say 4Mbits and 40Mhz as opposed to 32Mbits at 80Mhz for the 4MByte\nflash modules. Note the different address for esp_init_data_default.bin and blank.bin\n(the SDK stores its wifi settings near the end of flash, so it changes with flash size).\n\nFor __8Mbit / 1MByte__ modules the addresses are 0xFC000 and 0xFE000.\n\nDebian, and probably other Linux distributions, come with a different esptool. It is similar,\nbut all the flags are different. Here is an example of flashing an **ESP-01S** which has 1M of flash using\n```\nesptool -cp /dev/ttyUSB0 -cb 460800 -cd none -bz 1M\\\n        -ca 0x00000 -cf boot_v1.7.bin\\\n        -ca 0x01000 -cf user1.bin\\\n        -ca 0xFC000 -cf esp_init_data_default.bin\\\n        -ca 0xFE000 -cf blank.bin\n```\n\n__Warning__: there is a bug in boot_v1.5.bin which causes it to only boot into user1 once.\nIf that fails it gets stuck trying to boot into user2. If this happens (can be seen in the\nboot output on uart2 at 76600 baud) reflash just blank.bin at 0x7E000 (4Mbit module). (Sigh)\n\n## Updating the firmware over-the-air\n\nThis firmware supports over-the-air (OTA) flashing for modules with 1MByte or more flash,\nso you do not have to deal with serial flashing again after the initial one!\nThe recommended way to flash is to use `make wiflash`\nif you are also building the firmware and `./wiflash` if you are downloading firmware binaries.\n\nThe resulting commandlines are:\n```\nESP_HOSTNAME=192.168.1.5 make wiflash\n```\nor assuming mDNS is working:\n```\nESP_HOSTNAME=esp-link.local make wiflash\n```\nor using wiflash.sh:\n```\n./wiflash.sh <esp-hostname> user1.bin user2.bin\n```\n\nThe flashing, restart, and re-associating with your wireless network takes about 15 seconds\nand is fully automatic. The first 1MB of flash are divided into two 512KB partitions allowing for new\ncode to be uploaded into one partition while running from the other. This is the official\nOTA upgrade method supported by the SDK, except that the firmware is POSTed to the module\nusing curl as opposed to having the module download it from a cloud server. On a module with\n512KB flash there is only space for one partition and thus no way to do an OTA update.\n\nIf you need to clear the wifi settings you need to reflash the `blank.bin`\nusing the serial method.\n\nThe flash configuration and the OTA upgrade process is described in more detail\nin [FLASH.md](FLASH.md).\n\n## Installing esptool.py on Linux\n\nOn Linux use [esptool.py](https://github.com/themadinventor/esptool) to flash the esp8266.\nIf you're a little python challenged then the following install instructions might help:\n - Install ez_setup with the following two commands (I believe this will do something\n   reasonable if you already have it):\n\n        wget https://bootstrap.pypa.io/ez_setup.py\n        python ez_setup.py\n\n - Install esptool.py:\n\n        git clone https://github.com/themadinventor/esptool.git\n        cd esptool\n        python setup.py install\n        cd ..\n        esptool.py -h\n\n## Installing esptool.py on Windows\n\nEsptool is a pythin pgm that works just fine on windows. These instructions assume that git and\npython are available from the commandline.\n\nStart a command line, clone esptool, and run `python setup.py install` in esptool's\ndirectory (this step needs to be done only once):\n```\n> git clone https://github.com/themadinventor/esptool.git\nCloning into 'esptool'...\nremote: Counting objects: 268, done.\nemote: Total 268 (delta 0), reused 0 (delta 0), pack-reused 268\nReceiving objects: 100% (268/268), 99.66 KiB | 0 bytes/s, done.\nResolving deltas: 100% (142/142), done.\nChecking connectivity... done.\n\n> cd esptool\n\n> python setup.py install\nrunning install\n...\n...\n...\nFinished processing dependencies for esptool==0.1.0\n```\n\nDownload and unzip the latest esp-link release package, and start a commandline\nin that directory. The command to run is pretty much the same as for linux.\nAdjust the path to esptool and the COM port if you don't have the ESP on COM12. 460800\nbaud worked just fine for me, writing at ~260kbit/s instead of ~80kbit/s.\n```\n>python \"../esptool/esptool.py\" --port COM12 --baud 115200 write_flash \\\n  --flash_freq 80m --flash_mode qio --flash_size 32m \\\n  0x0000 boot_v1.6.bin 0x1000 user1.bin \\\n  0x3FC000 esp_init_data_default.bin 0x3FE000 blank.bin\nConnecting...\nErasing flash...\nWrote 3072 bytes at 0x00000000 in 0.3 seconds (79.8 kbit/s)...\nErasing flash...\nWrote 438272 bytes at 0x00001000 in 43.4 seconds (80.7 kbit/s)...\nErasing flash...\nWrote 1024 bytes at 0x003fc000 in 0.1 seconds (83.6 kbit/s)...\nErasing flash...\nWrote 4096 bytes at 0x003fe000 in 0.4 seconds (83.4 kbit/s)...\n\nLeaving...\n```\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 5.23828125,
          "content": "Copyright (c) Thorsten von Eicken, 2015\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n---------------------------------------------------------------------\n\nPortions of this software are derived from esphttpd and have the following\nlicense:\n\n\"THE BEER-WARE LICENSE\" (Revision 42):\nJeroen Domburg <jeroen@spritesmods.com> wrote this file. As long as you retain\nthis notice you can do whatever you want with this stuff. If we meet some day,\nand you think this stuff is worth it, you can buy me a beer in return.\n\n---------------------------------------------------------------------\n\nPortions of this software are derived from Espressif's SDK and carry the\nfollowing copyright notice:\n\nThis file is part of Espressif's AT+ command set program.\nCopyright (C) 2013 - 2016, Espressif Systems\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of version 3 of the GNU General Public License as\npublished by the Free Software Foundation.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program.  If not, see <http://www.gnu.org/licenses/>.\n\n---------------------------------------------------------------------\n\nThe Pure CSS portions of this software carry the following license:\n\nCopyright 2014 Yahoo! Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n* Neither the name of the Yahoo! Inc. nor the\n  names of its contributors may be used to endorse or promote products\n  derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL YAHOO! INC. BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n---------------------------------------------------------------------\n\nNormalize.css used in this firmware carries the following license:\n\nCopyright (c) Nicolas Gallagher and Jonathan Neal\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 20.22265625,
          "content": "#\n# Makefile for esp-link - https://github.com/jeelabs/esp-link\n#\n# Makefile heavily adapted to esp-link and wireless flashing by Thorsten von Eicken\n# Lots of work, in particular to support windows, by brunnels\n# Original from esphttpd and others...\n#\n# Start by setting the directories for the toolchain a few lines down\n# the default target will build the firmware images\n# `make flash` will flash the esp serially\n# `make wiflash` will flash the esp over wifi\n# `VERBOSE=1 make ...` will print debug info\n# `ESP_HOSTNAME=my.esp.example.com make wiflash` is an easy way to override a variable\n\n# optional local configuration file\n-include local.conf\n\n# The Wifi station configuration can be hard-coded here, which makes esp-link come up in STA+AP\n# mode trying to connect to the specified AP *only* if the flash wireless settings are empty!\n# This happens on a full serial flash and avoids having to hunt for the AP...\n# STA_SSID ?=\n# STA_PASS ?= \n\n# The SOFTAP configuration can be hard-coded here, the minimum parameters to set are AP_SSID && AP_PASS\n# The AP SSID has to be at least 8 characters long, same for AP PASSWORD\n# The AP AUTH MODE can be set to:\n#  0 = AUTH_OPEN, \n#  1 = AUTH_WEP, \n#  2 = AUTH_WPA_PSK, \n#  3 = AUTH_WPA2_PSK, \n#  4 = AUTH_WPA_WPA2_PSK\n# SSID hidden default 0, ( 0 | 1 ) \n# Max connections default 4, ( 1 ~ 4 )\n# Beacon interval default 100, ( 100 ~ 60000ms )\n#\n# AP_SSID ?=esp_link_test\n# AP_PASS ?=esp_link_test\n# AP_AUTH_MODE ?=4\n# AP_SSID_HIDDEN ?=0\n# AP_MAX_CONN ?=4\n# AP_BEACON_INTERVAL ?=100\n\n# If CHANGE_TO_STA is set to \"yes\" the esp-link module will switch to station mode\n# once successfully connected to an access point. Else it will stay in STA+AP mode.\nCHANGE_TO_STA ?= yes\n\n# hostname or IP address for wifi flashing\nESP_HOSTNAME  ?= esp-link\n\n# --------------- toolchain configuration ---------------\n\n# Base directory for the compiler. Needs a / at the end.\n# Typically you'll install https://github.com/pfalcon/esp-open-sdk\n# IMPORTANT: use esp-open-sdk `make STANDALONE=n`: the SDK bundled with esp-open-sdk will *not* work!\nXTENSA_TOOLS_ROOT ?= $(abspath ../esp-open-sdk/xtensa-lx106-elf/bin)/\n\n# Firmware version \n# WARNING: if you change this expect to make code adjustments elsewhere, don't expect\n# that esp-link will magically work with a different version of the SDK!!!\nSDK_VERS ?= esp_iot_sdk_v2.1.0\n\n# Try to find the firmware manually extracted, e.g. after downloading from Espressif's BBS,\n# http://bbs.espressif.com/viewforum.php?f=46\n# USING THE SDK BUNDLED WITH ESP-OPEN-SDK WILL NOT WORK!!!\nSDK_BASE ?= $(wildcard ../$(SDK_VERS))\n\n# If the firmware isn't there, see whether it got downloaded as part of esp-open-sdk\n# This used to work at some point, but is not supported, uncomment if you feel lucky ;-)\n#ifeq ($(SDK_BASE),)\n#SDK_BASE := $(wildcard $(XTENSA_TOOLS_ROOT)/../../$(SDK_VERS))\n#endif\n\n# Clean up SDK path\nSDK_BASE := $(abspath $(SDK_BASE))\n$(info SDK     is $(SDK_BASE))\n\n# Path to bootloader file\nBOOTFILE\t?= $(SDK_BASE/bin/boot_v1.6.bin)\n\n# Esptool.py path and port, only used for 1-time serial flashing\n# Typically you'll use https://github.com/themadinventor/esptool\n# Windows users use the com port i.e: ESPPORT ?= com3\nESPTOOL\t\t?= $(abspath ../esp-open-sdk/esptool/esptool.py)\nESPPORT\t\t?= /dev/ttyUSB0\nESPBAUD\t\t?= 230400\n\n# --------------- chipset configuration   ---------------\n\n# Pick your flash size: \"512KB\", \"1MB\", or \"4MB\"\nFLASH_SIZE ?= 4MB\n\n# The pin assignments below are used when the settings in flash are invalid, they\n# can be changed via the web interface\n# GPIO pin used to reset attached microcontroller, acative low\nMCU_RESET_PIN       ?= 12\n# GPIO pin used with reset to reprogram MCU (ISP=in-system-programming, unused with AVRs), active low\nMCU_ISP_PIN         ?= 13\n# GPIO pin used for \"connectivity\" LED, active low\nLED_CONN_PIN        ?= 0\n# GPIO pin used for \"serial activity\" LED, active low\nLED_SERIAL_PIN      ?= 14\n\n# --------------- esp-link modules config options ---------------\n\n# Optional Modules: mqtt rest socket web-server syslog\nMODULES ?= mqtt rest socket web-server syslog\n\n# --------------- esphttpd config options ---------------\n\n# If GZIP_COMPRESSION is set to \"yes\" then the static css, js, and html files will be compressed\n# with gzip before added to the espfs image and will be served with gzip Content-Encoding header.\n# This could speed up the downloading of these files, but might break compatibility with older\n# web browsers not supporting gzip encoding because Accept-Encoding is simply ignored.\n# Enable this option if you have large static files to serve (for e.g. JQuery, Twitter bootstrap)\n# If you have text based static files with different extensions what you want to serve compressed\n# then you will need to add the extension to the following places:\n# - Add the extension to this Makefile at the webpages.espfs target to the find command\n# - Add the extension to the gzippedFileTypes array in the user/httpd.c file\n#\n# Adding JPG or PNG files (and any other compressed formats) is not recommended, because GZIP\n# compression does not work effectively on compressed files.\nGZIP_COMPRESSION ?= yes\n\n# If COMPRESS_W_HTMLCOMPRESSOR is set to \"yes\" then the static css and js files will be compressed with\n# htmlcompressor and yui-compressor. This option works only when GZIP_COMPRESSION is set to \"yes\".\n# https://code.google.com/p/htmlcompressor/#For_Non-Java_Projects\n# http://yui.github.io/yuicompressor/\n# enabled by default.\nCOMPRESS_W_HTMLCOMPRESSOR ?= yes\nHTML_COMPRESSOR ?= htmlcompressor-1.5.3.jar\nYUI_COMPRESSOR ?= yuicompressor-2.4.8.jar\n\n# -------------- End of config options -------------\n\nHTML_PATH = $(abspath ./html)/\nWIFI_PATH = $(HTML_PATH)wifi/\n\nESP_FLASH_MAX       ?= 503808  # max bin file\n\nifeq (\"$(FLASH_SIZE)\",\"512KB\")\n# Winbond 25Q40 512KB flash, typ for esp-01 thru esp-11\nESP_SPI_SIZE        ?= 0       # 0->512KB (256KB+256KB)\nESP_FLASH_MODE      ?= 0       # 0->QIO\nESP_FLASH_FREQ_DIV  ?= 0       # 0->40Mhz\nET_FS               ?= 4m      # 4Mbit flash size in esptool flash command\nET_FF               ?= 40m     # 40Mhz flash speed in esptool flash command\nET_BLANK            ?= 0x7E000 # where to flash blank.bin to erase wireless settings\n\nelse ifeq (\"$(FLASH_SIZE)\",\"1MB\")\n# ESP-01E\nESP_SPI_SIZE        ?= 2       # 2->1MB (512KB+512KB)\nESP_FLASH_MODE      ?= 0       # 0->QIO\nESP_FLASH_FREQ_DIV  ?= 15      # 15->80MHz\nET_FS               ?= 8m      # 8Mbit flash size in esptool flash command\nET_FF               ?= 80m     # 80Mhz flash speed in esptool flash command\nET_BLANK            ?= 0xFE000 # where to flash blank.bin to erase wireless settings\n\nelse ifeq (\"$(FLASH_SIZE)\",\"2MB\")\n# Manuf 0xA1 Chip 0x4015 found on wroom-02 modules\n# Here we're using two partitions of approx 0.5MB because that's what's easily available in terms\n# of linker scripts in the SDK. Ideally we'd use two partitions of approx 1MB, the remaining 2MB\n# cannot be used for code (esp8266 limitation).\nESP_SPI_SIZE        ?= 4       # 6->4MB (1MB+1MB) or 4->4MB (512KB+512KB)\nESP_FLASH_MODE      ?= 0       # 0->QIO, 2->DIO\nESP_FLASH_FREQ_DIV  ?= 15      # 15->80Mhz\nET_FS               ?= 16m     # 16Mbit flash size in esptool flash command\nET_FF               ?= 80m     # 80Mhz flash speed in esptool flash command\nET_BLANK            ?= 0x1FE000 # where to flash blank.bin to erase wireless settings\n\nelse\n# Winbond 25Q32 4MB flash, typ for esp-12\n# Here we're using two partitions of approx 0.5MB because that's what's easily available in terms\n# of linker scripts in the SDK. Ideally we'd use two partitions of approx 1MB, the remaining 2MB\n# cannot be used for code (esp8266 limitation).\nESP_SPI_SIZE        ?= 4       # 6->4MB (1MB+1MB) or 4->4MB (512KB+512KB)\nESP_FLASH_MODE      ?= 0       # 0->QIO, 2->DIO\nESP_FLASH_FREQ_DIV  ?= 15      # 15->80Mhz\nET_FS               ?= 32m     # 32Mbit flash size in esptool flash command\nET_FF               ?= 80m     # 80Mhz flash speed in esptool flash command\nET_BLANK            ?= 0x3FE000 # where to flash blank.bin to erase wireless settings\nendif\n\n# --------------- esp-link version        ---------------\n\n# Version-fu :-) This code assumes that a new maj.minor is started using a \"vN.M.0\" tag on master\n# and that thereafter the desired patchlevel number is just the number of commits since the tag.\n#\n# Get the current branch name if not using travis\nTRAVIS_BRANCH?=$(shell git symbolic-ref --short HEAD --quiet)\n# Use git describe to get the latest version tag, commits since then, sha and dirty flag, this\n# results is something like \"v1.2.0-13-ab6cedf-dirty\"\nNO_TAG ?= \"no-tag\"\nVERSION := $(shell (git describe --tags --match 'v*.*.*' --long --dirty || echo $(NO_TAG)) | sed -re 's/(\\.0)?-/./')\n# If not on master then insert the branch name\nifneq ($(TRAVIS_BRANCH),master)\nifneq ($(findstring V%,$(TRAVIS_BRANCH)),)\nVERSION := $(shell echo $(VERSION) | sed -e 's/-/-$(TRAVIS_BRANCH)-/')\nendif\nendif\nVERSION :=$(VERSION)\n$(info VERSION is $(VERSION))\n\n# Output directors to store intermediate compiled files\n# relative to the project directory\nBUILD_BASE\t= build\nFW_BASE\t\t= firmware\n\n# name for the target project\nTARGET\t\t= httpd\n\n# espressif tool to concatenate sections for OTA upload using bootloader v1.2+\nAPPGEN_TOOL\t?= gen_appbin.py\n\nCFLAGS=\n\n# set defines for optional modules\nifneq (,$(findstring mqtt,$(MODULES)))\n\tCFLAGS\t\t+= -DMQTT\nendif\n\nifneq (,$(findstring rest,$(MODULES)))\n\tCFLAGS\t\t+= -DREST\nendif\n\nifneq (,$(findstring syslog,$(MODULES)))\n\tCFLAGS\t\t+= -DSYSLOG\nendif\n\nifneq (,$(findstring web-server,$(MODULES)))\n\tCFLAGS\t\t+= -DWEBSERVER\nendif\n\nifneq (,$(findstring socket,$(MODULES)))\n\tCFLAGS\t\t+= -DSOCKET\nendif\n\n# which modules (subdirectories) of the project to include in compiling\nLIBRARIES_DIR \t= libraries\nMODULES\t\t+= espfs httpd user serial cmd esp-link\nMODULES\t\t+= $(foreach sdir,$(LIBRARIES_DIR),$(wildcard $(sdir)/*))\nEXTRA_INCDIR \t= include .\n\n# libraries used in this project, mainly provided by the SDK\nLIBS = c gcc hal phy pp net80211 wpa main lwip_536 crypto\n\n# compiler flags using during compilation of source files\nCFLAGS\t+= -Os -ggdb -std=c99 -Werror -Wpointer-arith -Wundef -Wall -Wl,-EL -fno-inline-functions \\\n\t-nostdlib -mlongcalls -mtext-section-literals -ffunction-sections -fdata-sections \\\n\t-D__ets__ -DICACHE_FLASH -Wno-address -DFIRMWARE_SIZE=$(ESP_FLASH_MAX) \\\n\t-DMCU_RESET_PIN=$(MCU_RESET_PIN) -DMCU_ISP_PIN=$(MCU_ISP_PIN) \\\n\t-DLED_CONN_PIN=$(LED_CONN_PIN) -DLED_SERIAL_PIN=$(LED_SERIAL_PIN) \\\n\t-DVERSION=\"esp-link $(VERSION)\"\n\n# linker flags used to generate the main object file\nLDFLAGS\t\t= -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static -Wl,--gc-sections\n\n# linker script used for the above linker step\nLD_SCRIPT \t:= build/eagle.esphttpd.v6.ld\nLD_SCRIPT1\t:= build/eagle.esphttpd1.v6.ld\nLD_SCRIPT2\t:= build/eagle.esphttpd2.v6.ld\n\n# various paths from the SDK used in this project\nSDK_LIBDIR\t= lib\nSDK_LDDIR\t= ld\nSDK_INCDIR\t= include include/json\nSDK_TOOLSDIR\t= tools\n\n# select which tools to use as compiler, librarian and linker\nCC\t\t:= $(XTENSA_TOOLS_ROOT)xtensa-lx106-elf-gcc\nAR\t\t:= $(XTENSA_TOOLS_ROOT)xtensa-lx106-elf-ar\nLD\t\t:= $(XTENSA_TOOLS_ROOT)xtensa-lx106-elf-gcc\nOBJCP\t\t:= $(XTENSA_TOOLS_ROOT)xtensa-lx106-elf-objcopy\nOBJDP\t\t:= $(XTENSA_TOOLS_ROOT)xtensa-lx106-elf-objdump\nELF_SIZE\t:= $(XTENSA_TOOLS_ROOT)xtensa-lx106-elf-size\n\n####\nSRC_DIR\t\t:= $(MODULES)\nBUILD_DIR\t:= $(addprefix $(BUILD_BASE)/,$(MODULES))\n\nSDK_LIBDIR\t:= $(addprefix $(SDK_BASE)/,$(SDK_LIBDIR))\nSDK_LDDIR \t:= $(addprefix $(SDK_BASE)/,$(SDK_LDDIR))\nSDK_INCDIR\t:= $(addprefix -I$(SDK_BASE)/,$(SDK_INCDIR))\nSDK_TOOLS\t:= $(addprefix $(SDK_BASE)/,$(SDK_TOOLSDIR))\nAPPGEN_TOOL\t:= $(addprefix $(SDK_TOOLS)/,$(APPGEN_TOOL))\n\nSRC\t\t:= $(foreach sdir,$(SRC_DIR),$(wildcard $(sdir)/*.c))\nOBJ\t\t:= $(patsubst %.c,$(BUILD_BASE)/%.o,$(SRC)) $(BUILD_BASE)/espfs_img.o\nLIBS\t\t:= $(addprefix -l,$(LIBS))\nAPP_AR\t\t:= $(addprefix $(BUILD_BASE)/,$(TARGET)_app.a)\nUSER1_OUT \t:= $(addprefix $(BUILD_BASE)/,$(TARGET).user1.out)\nUSER2_OUT \t:= $(addprefix $(BUILD_BASE)/,$(TARGET).user2.out)\n\nINCDIR\t\t:= $(addprefix -I,$(SRC_DIR))\nEXTRA_INCDIR\t:= $(addprefix -I,$(EXTRA_INCDIR))\nMODULE_INCDIR\t:= $(addsuffix /include,$(INCDIR))\n\nV ?= $(VERBOSE)\nifeq (\"$(V)\",\"1\")\nQ :=\nvecho := @true\nelse\nQ := @\nvecho := @echo\nendif\n\nifneq ($(strip $(STA_SSID)),)\nCFLAGS\t\t+= -DSTA_SSID=\"$(STA_SSID)\"\nendif\n\nifneq ($(strip $(STA_PASS)),)\nCFLAGS\t\t+= -DSTA_PASS=\"$(STA_PASS)\"\nendif\n\nifneq ($(strip $(AP_SSID)),)\nCFLAGS\t\t+= -DAP_SSID=\"$(AP_SSID)\"\nendif\n\nifneq ($(strip $(AP_PASS)),)\nCFLAGS\t\t+= -DAP_PASS=\"$(AP_PASS)\"\nendif\n\nifneq ($(strip $(AP_AUTH_MODE)),)\nCFLAGS\t\t+= -DAP_AUTH_MODE=\"$(AP_AUTH_MODE)\"\nendif\n\nifneq ($(strip $(AP_SSID_HIDDEN)),)\nCFLAGS\t\t+= -DAP_SSID_HIDDEN=\"$(AP_SSID_HIDDEN)\"\nendif\n\nifneq ($(strip $(AP_MAX_CONN)),)\nCFLAGS\t\t+= -DAP_MAX_CONN=\"$(AP_MAX_CONN)\"\nendif\n\nifneq ($(strip $(AP_BEACON_INTERVAL)),)\nCFLAGS\t\t+= -DAP_BEACON_INTERVAL=\"$(AP_BEACON_INTERVAL)\"\nendif\n\nifeq (\"$(GZIP_COMPRESSION)\",\"yes\")\nCFLAGS\t\t+= -DGZIP_COMPRESSION\nendif\n\nifeq (\"$(CHANGE_TO_STA)\",\"yes\")\nCFLAGS\t\t+= -DCHANGE_TO_STA\nendif\n\nvpath %.c $(SRC_DIR)\n\ndefine compile-objects\n$1/%.o: %.c\n\t$(vecho) \"CC $$<\"\n\t$(Q)$(CC) $(INCDIR) $(MODULE_INCDIR) $(EXTRA_INCDIR) $(SDK_INCDIR) $(CFLAGS)  -c $$< -o $$@\nendef\n\n.PHONY: all checkdirs clean webpages.espfs wiflash\n\nall: checkdirs $(FW_BASE)/user1.bin $(FW_BASE)/user2.bin\n\n$(USER1_OUT): $(APP_AR) $(LD_SCRIPT1)\n\t$(vecho) \"LD $@\"\n\t$(Q) $(LD) -L$(SDK_LIBDIR) -T$(LD_SCRIPT1) $(LDFLAGS) -Wl,--start-group $(LIBS) $(APP_AR) -Wl,--end-group -o $@\n\t@echo Dump  : $(OBJDP) -x $(USER1_OUT)\n\t@echo Disass: $(OBJDP) -d -l -x $(USER1_OUT)\n#\t$(Q) $(OBJDP) -x $(TARGET_OUT) | egrep espfs_img\n\n$(USER2_OUT): $(APP_AR) $(LD_SCRIPT2)\n\t$(vecho) \"LD $@\"\n\t$(Q) $(LD) -L$(SDK_LIBDIR) -T$(LD_SCRIPT2) $(LDFLAGS) -Wl,--start-group $(LIBS) $(APP_AR) -Wl,--end-group -o $@\n#\t$(Q) $(OBJDP) -x $(TARGET_OUT) | egrep espfs_img\n\n$(FW_BASE):\n\t$(vecho) \"FW $@\"\n\t$(Q) mkdir -p $@\n\n$(FW_BASE)/user1.bin: $(USER1_OUT) $(FW_BASE)\n\t$(Q) $(OBJCP) --only-section .text -O binary $(USER1_OUT) eagle.app.v6.text.bin\n\t$(Q) $(OBJCP) --only-section .data -O binary $(USER1_OUT) eagle.app.v6.data.bin\n\t$(Q) $(OBJCP) --only-section .rodata -O binary $(USER1_OUT) eagle.app.v6.rodata.bin\n\t$(Q) $(OBJCP) --only-section .irom0.text -O binary $(USER1_OUT) eagle.app.v6.irom0text.bin\n\t$(Q) $(ELF_SIZE) -A $(USER1_OUT) |grep -v \" 0$$\" |grep .\n\t$(Q) COMPILE=gcc PATH=$(XTENSA_TOOLS_ROOT):$(PATH) python $(APPGEN_TOOL) $(USER1_OUT) 2 $(ESP_FLASH_MODE) $(ESP_FLASH_FREQ_DIV) $(ESP_SPI_SIZE) 0 >/dev/null\n\t$(Q) rm -f eagle.app.v6.*.bin\n\t$(Q) mv eagle.app.flash.bin $@\n\t@echo \"    user1.bin uses $$(stat -c '%s' $@) bytes of\" $(ESP_FLASH_MAX) \"available\"\n\t$(Q) if [ $$(stat -c '%s' $@) -gt $$(( $(ESP_FLASH_MAX) )) ]; then echo \"$@ too big!\"; false; fi\n\n$(FW_BASE)/user2.bin: $(USER2_OUT) $(FW_BASE)\n\t$(Q) $(OBJCP) --only-section .text -O binary $(USER2_OUT) eagle.app.v6.text.bin\n\t$(Q) $(OBJCP) --only-section .data -O binary $(USER2_OUT) eagle.app.v6.data.bin\n\t$(Q) $(OBJCP) --only-section .rodata -O binary $(USER2_OUT) eagle.app.v6.rodata.bin\n\t$(Q) $(OBJCP) --only-section .irom0.text -O binary $(USER2_OUT) eagle.app.v6.irom0text.bin\n\t$(Q) COMPILE=gcc PATH=$(XTENSA_TOOLS_ROOT):$(PATH) python $(APPGEN_TOOL) $(USER2_OUT) 2 $(ESP_FLASH_MODE) $(ESP_FLASH_FREQ_DIV) $(ESP_SPI_SIZE) 1 >/dev/null\n\t$(Q) rm -f eagle.app.v6.*.bin\n\t$(Q) mv eagle.app.flash.bin $@\n\t$(Q) if [ $$(stat -c '%s' $@) -gt $$(( $(ESP_FLASH_MAX) )) ]; then echo \"$@ too big!\"; false; fi\n\n$(APP_AR): $(OBJ)\n\t$(vecho) \"AR $@\"\n\t$(Q) $(AR) cru $@ $^\n\ncheckdirs: $(BUILD_DIR)\n\n$(BUILD_DIR):\n\t$(Q) mkdir -p $@\n\nwiflash: all\n\t./wiflash $(ESP_HOSTNAME) $(FW_BASE)/user1.bin $(FW_BASE)/user2.bin\n\nbaseflash: all\n\t$(Q) $(ESPTOOL) --port $(ESPPORT) --baud $(ESPBAUD) write_flash 0x01000 $(FW_BASE)/user1.bin\n\nflash: all\n\t$(Q) $(ESPTOOL) --port $(ESPPORT) --baud $(ESPBAUD) write_flash -fs $(ET_FS) -ff $(ET_FF) \\\n\t  0x00000 \"$(SDK_BASE)/bin/boot_v1.5.bin\" 0x01000 $(FW_BASE)/user1.bin \\\n\t  $(ET_BLANK) $(SDK_BASE)/bin/blank.bin\n\ntools/$(HTML_COMPRESSOR):\n\t$(Q) echo \"The jar files in the tools dir are missing, they should be in the source repo\"\n\t$(Q) echo \"The following commands can be used to fetch them, but the URLs have changed...\"\n\t$(Q) echo mkdir -p tools\n\t$(Q) echo \"cd tools; wget --no-check-certificate https://github.com/yui/yuicompressor/releases/download/v2.4.8/$(YUI_COMPRESSOR) -O $(YUI_COMPRESSOR)\"\n\t$(Q) echo \"cd tools; wget --no-check-certificate https://htmlcompressor.googlecode.com/files/$(HTML_COMPRESSOR) -O $(HTML_COMPRESSOR)\"\n\nifeq (\"$(COMPRESS_W_HTMLCOMPRESSOR)\",\"yes\")\n$(BUILD_BASE)/espfs_img.o: tools/$(HTML_COMPRESSOR)\nendif\n\n$(BUILD_BASE)/espfs_img.o: html/ html/wifi/ espfs/mkespfsimage/mkespfsimage\n\t$(Q) rm -rf html_compressed; mkdir html_compressed; mkdir html_compressed/wifi;\n\t$(Q) cp -r html/*.ico html_compressed;\n\t$(Q) cp -r html/*.css html_compressed;\n\t$(Q) cp -r html/*.js html_compressed;\n\t$(Q) cp -r html/wifi/*.png html_compressed/wifi;\n\t$(Q) cp -r html/wifi/*.js html_compressed/wifi;\nifeq (\"$(COMPRESS_W_HTMLCOMPRESSOR)\",\"yes\")\n\t$(Q) echo \"Compressing assets with htmlcompressor. This may take a while...\"\n\t$(Q) java -jar tools/$(HTML_COMPRESSOR) \\\n\t  -t html --remove-surrounding-spaces max --remove-quotes --remove-intertag-spaces \\\n\t  -o $(abspath ./html_compressed)/ \\\n\t  $(HTML_PATH)head- \\\n\t  $(HTML_PATH)*.html\n\t$(Q) java -jar tools/$(HTML_COMPRESSOR) \\\n\t  -t html --remove-surrounding-spaces max --remove-quotes --remove-intertag-spaces \\\n\t  -o $(abspath ./html_compressed)/wifi/ \\\n\t  $(WIFI_PATH)*.html\n\t$(Q) echo \"Compressing assets with yui-compressor. This may take a while...\"\n\t$(Q) for file in `find html_compressed -type f -name \"*.js\"`; do \\\n\t    java -jar tools/$(YUI_COMPRESSOR) $$file --line-break 0 -o $$file; \\\n\t  done\n\t$(Q) for file in `find html_compressed -type f -name \"*.css\"`; do \\\n\t    java -jar tools/$(YUI_COMPRESSOR) $$file -o $$file; \\\n\t  done\nelse\n\t$(Q) cp -r html/head- html_compressed;\n\t$(Q) cp -r html/*.html html_compressed;\n\t$(Q) cp -r html/wifi/*.html html_compressed/wifi;\t\nendif\nifeq (,$(findstring mqtt,$(MODULES)))\n\t$(Q) rm -rf html_compressed/mqtt.html\n\t$(Q) rm -rf html_compressed/mqtt.js\nendif\n\t$(Q) for file in `find html_compressed -type f -name \"*.htm*\"`; do \\\n\t    cat html_compressed/head- $$file >$${file}-; \\\n\t    mv $$file- $$file; \\\n\t  done\n\t$(Q) rm html_compressed/head-\n\t$(Q) cd html_compressed; find . \\! -name \\*- | ../espfs/mkespfsimage/mkespfsimage > ../build/espfs.img; cd ..;\n\t$(Q) ls -sl build/espfs.img\n\t$(Q) cd build; $(OBJCP) -I binary -O elf32-xtensa-le -B xtensa --rename-section .data=.espfs \\\n\t  espfs.img espfs_img.o; cd ..\n\n# edit the loader script to add the espfs section to the end of irom with a 4 byte alignment.\n# we also adjust the sizes of the segments 'cause we need more irom0\nbuild/eagle.esphttpd1.v6.ld: $(SDK_LDDIR)/eagle.app.v6.new.1024.app1.ld\n\t$(Q) sed -e '/\\.irom\\.text/{' -e 'a . = ALIGN (4);' -e 'a *(.espfs)' -e '}'  \\\n\t\t-e '/^  irom0_0_seg/ s/6B000/7C000/' \\\n\t\t$(SDK_LDDIR)/eagle.app.v6.new.1024.app1.ld >$@\nbuild/eagle.esphttpd2.v6.ld: $(SDK_LDDIR)/eagle.app.v6.new.1024.app2.ld\n\t$(Q) sed -e '/\\.irom\\.text/{' -e 'a . = ALIGN (4);' -e 'a *(.espfs)' -e '}'  \\\n\t\t-e '/^  irom0_0_seg/ s/6B000/7C000/' \\\n\t\t$(SDK_LDDIR)/eagle.app.v6.new.1024.app2.ld >$@\n\nespfs/mkespfsimage/mkespfsimage: espfs/mkespfsimage/\n\t$(Q) $(MAKE) -C espfs/mkespfsimage GZIP_COMPRESSION=\"$(GZIP_COMPRESSION)\"\n\nrelease: all\n\t$(Q) rm -rf release; mkdir -p release/esp-link-$(VERSION)\n\t$(Q) egrep -a 'esp-link [a-z0-9.]+ - 201' $(FW_BASE)/user1.bin | cut -b 1-80\n\t$(Q) egrep -a 'esp-link [a-z0-9.]+ - 201' $(FW_BASE)/user2.bin | cut -b 1-80\n\t$(Q) cp $(FW_BASE)/user1.bin $(FW_BASE)/user2.bin $(SDK_BASE)/bin/blank.bin \\\n\t       \"$(SDK_BASE)/bin/boot_v1.7.bin\" \"$(SDK_BASE)/bin/esp_init_data_default.bin\" \\\n\t       wiflash avrflash megaflash release/esp-link-$(VERSION)\n\t$(Q) tar zcf esp-link-$(VERSION).tgz -C release esp-link-$(VERSION)\n\t$(Q) echo \"Release file: esp-link-$(VERSION).tgz\"\n\t$(Q) rm -rf release\n\ndocker:\n\t$(Q) docker build -t jeelabs/esp-link .\nclean:\n\t$(Q) rm -f $(APP_AR)\n\t$(Q) rm -f $(TARGET_OUT)\n\t$(Q) find $(BUILD_BASE) -type f | xargs rm -f\n\t$(Q) make -C espfs/mkespfsimage/ clean\n\t$(Q) rm -rf $(FW_BASE)\n\t$(Q) rm -f webpages.espfs\nifeq (\"$(COMPRESS_W_HTMLCOMPRESSOR)\",\"yes\")\n\t$(Q) rm -rf html_compressed\nendif\n\n$(foreach bdir,$(BUILD_DIR),$(eval $(call compile-objects,$(bdir))))\n\ndepend:\n\tmakedepend -p${BUILD_BASE}/ -Y -- $(INCDIR) $(MODULE_INCDIR) $(EXTRA_INCDIR) $(SDK_INCDIR) -I${XTENSA_TOOLS_ROOT}../xtensa-lx106-elf/include -I${XTENSA_TOOLS_ROOT}../lib/gcc/xtensa-lx106-elf/4.8.2/include -- */*.c\n\n# Rebuild version at least at every Makefile change\n\n${BUILD_BASE}/esp-link/main.o: Makefile\n\n# DO NOT DELETE\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.81640625,
          "content": "ESP-LINK: Wifi-Serial Bridge w/REST&MQTT\n========================================\n\n<img src=\"https://cloud.githubusercontent.com/assets/39480/19333951/73fcdcbe-90ad-11e6-8572-5e654377275a.png\">\n\nThe esp-link firmware connects a micro-controller to the internet using an ESP8266 Wifi module.\nIt implements a number of features:\n\n- transparent bridge between Wifi and serial, useful for debugging or inputting into a uC\n- flash-programming attached Arduino/AVR microcontrollers and\n  LPC800-series and other ARM microcontrollers via Wifi\n- built-in stk500v1 programmer for AVR uC's: program using HTTP upload of hex file\n- outbound REST HTTP requests from the attached micro-controller to the internet\n- MQTT client pub/sub from the attached micro-controller to the internet\n- serve custom web pages containing data that is dynamically pulled from the attached uC and\n  that contain buttons and fields that are transmitted to the attached uC (feature not\n  fully ready yet)\n\nThe firmware includes a tiny HTTP server based on\n[esphttpd](http://www.esp8266.com/viewforum.php?f=34)\nwith a simple web interface, many thanks to Jeroen Domburg for making it available!\nThe REST and MQTT functionality are loosely based on [espduino](https://github.com/tuanpmt/espduino)\nbut significantly rewritten and no longer protocol compatible, thanks to tuanpmt for the\ninspiration!\n\nThe following people contributed significant functionality to esp-link:\n[brunnels](https://github.com/brunnels) (espduino integration),\n[cskarai](https://github.com/cskarai) (custom dynamic web pages),\n[beegee-tokyo](https://github.com/beegee-tokyo) (lots of code documentation),\n[susisstrolch](https://github.com/susisstrolch) (syslog feature),\n[bc547](https://github.com/bc547) and [katast](https://github.com/katast) (misc contributions).\nEsp-link is the work of many contributors!\n\nNote that http://github.com/jeelabs/esp-link is the original esp-link software which has\nnotably been forked by arduino.org as [Esp-Link](https://github.com/arduino-org/Esp-Link) and shipped\nwith the initial Arduino Uno Wifi. The JeeLabs esp-link has evolved significantly since the\nfork and added cool new features as well as bug fixes.\n\n### Quick links\n\nIn this document: [goals](#esp-link-goals), [uses](#esp-link-uses), [eye candy](#eye-candy),\n[getting-started](#getting-started), [serial-bridge](#serial-bridge), [contact](#contact).\n\nSeparate documents:\n- [hardware configuration](FLASHING.md), [serial flashing](FLASHING.md#initial-serial-flashing)\n- [wifi configuration](WIFI-CONFIG.md)\n- [troubleshooting](TROUBLESHOOTING.md), [LED indicators](TROUBLESHOOTING.md#led-indicators)\n- [flashing an attached uC](UC-FLASHING.md)\n- [MQTT and outbound REST requests](RESTMQTT.md)\n- [service web pages](WEB-SERVER.md)\n- [building esp-link](BUILDING.md), [over-the-air flashing](BUILDING.md#updating-the-firmware-over-the-air)\n- [flash layout](FLASH.md)\n\nFor quick support and questions chat at\n[![Chat at https://gitter.im/jeelabs/esp-link](https://badges.gitter.im/esp-link.svg)](https://gitter.im/jeelabs/esp-link)\nor (a little slower) open a github issue.\n\nReleases & Downloads\n--------------------\nEsp-link uses semantic versioning. The main change between versions 1.x and 2.x was the\naddition of MQTT and outbound REST requests from the attached uC. The main change between 2.x\nand 3.x will be the addition of custom web pages (this is not ready yet).\n\n- The master branch is currently unstable as we integrate a number of new features to get\n  to version 3.0. Please use v2.2.3 unless you want to hack up the latest code!\n  This being said, the older functionality seems to work fine on master, YMMV...\n- [V2.2.3](https://github.com/jeelabs/esp-link/releases/tag/v2.2.3) is the most recent release.\n  It has a built-in stk500v1 programmer (for AVRs), work on all modules, and supports mDNS,\n  sNTP, and syslog. It is built using the Espressif SDK 1.5.4.\n- [V2.1.7](https://github.com/jeelabs/esp-link/releases/tag/v2.1.7) is the previous release.\n- See [all releases](https://github.com/jeelabs/esp-link/releases).\n\n## Esp-link goals\n\nThe goal of the esp-link project is to create an advanced Wifi co-processor. Esp-link assumes that\nthere is a \"main processor\" (also referred to as \"attached uController\") and that esp-link's role\nis to facilitate communication over Wifi. This means that esp-link does not just connect TCP/UDP\nsockets through to the attached uC, rather it implements mostly higher-level functionality to\noffload the attached uC, which often has much less flash and memory than esp-link.\n\nWhere esp-link is a bit unusual is that it's not really\njust a Wifi interface or a slave co-processor. In some sense it's the master, because the main\nprocessor can be reset, controlled and reprogrammed through esp-link. The three main areas of\nfunctionality in esp-link are:\n\n- reprogramming and debugging the attached uC\n- letting the attached uC make outbound communication and offloading the protocol processing\n- forwarding inbound communication and offloading the protocol processing\n\nThe goal of the project is also to remain focused on the above mission. In particular, esp-link\nis not a platform for stand-alone applications and it does not support connecting sensors or\nactuators directly to it. A few users have taken esp-link as a starting point for doing these\nthings and that's great, but there's also value in keeping the mainline esp-link project\nfocused on a clear mission.\n\n## Esp-link uses\n\nThe simplest use of esp-link is as a transparent serial to wifi bridge. You can flash an attached\nuC over wifi and you can watch the uC's serial debug output by connecting to port 23 or looking\nat the uC Console web page.\n\nThe next level is to use the outbound connectivity of esp-link in the uC code. For example, the\nuC can use REST requests to services like thingspeak.com to send sensor values that then get\nstored and plotted by the external service.\nThe uC can also use REST requests to retrieve simple configuration\ninformation or push other forms of notifications. (MQTT functionality is forthcoming.)\n\nAn additional option is to add code to esp-link to customize it and put all the communication\ncode into esp-link and only keep simple sensor/actuator control in the attached uC. In this\nmode the attached uC sends custom commands to esp-link with sensor/acturator info and\nregisters a set of callbacks with esp-link that control sensors/actuators. This way, custom\ncommands in esp-link can receive MQTT messages, make simple callbacks into the uC to get sensor\nvalues or change actuators, and then respond back with MQTT. The way this is architected is that\nthe attached uC registers callbacks at start-up such that the code in the esp doesn't need to \nknow which exact sensors/actuators the attached uC has, it learns that through the initial\ncallback registration.\n\n## Eye Candy\n\nThese screen shots show the Home page, the Wifi configuration page, the console for the\nattached microcontroller, and the pin assignments card:\n\n<img width=\"45%\" src=\"https://cloud.githubusercontent.com/assets/39480/19334029/f8128c92-90ad-11e6-804e-9a4796035e9a.png\">\n<img width=\"45%\" src=\"https://cloud.githubusercontent.com/assets/39480/8261427/6caf7326-167f-11e5-8085-bc8b20159b2b.png\">\n<img width=\"45%\" src=\"https://cloud.githubusercontent.com/assets/39480/8261426/6ca7f75e-167f-11e5-827d-9a1c582ad05d.png\">\n<img width=\"30%\" src=\"https://cloud.githubusercontent.com/assets/39480/8261658/11e6c64a-1681-11e5-82d0-ea5ec90a6ddb.png\">\n<img width=\"45%\" src=\"https://cloud.githubusercontent.com/assets/39480/19334011/e0c3fe40-90ad-11e6-9893-847e805e7b89.png\">\n<img width=\"45%\" src=\"https://cloud.githubusercontent.com/assets/39480/19333988/c1858cec-90ad-11e6-8b1c-ffed516e1b7f.png\">\n\nGetting Started\n---------------\n\nTo get started you need to:\n 1. prepare your esp8266 module for serial flashing\n 2. download the latest esp-link release image (you can build your own later)\n 3. flash the firmware\n 4. configure the Wifi in esp-link for your network\n\nYou can then attach a uC and upload a sketch:\n 1. attach a uC (e.g. arduino) to your esp8266 module\n 2. connect via the serial port to see a pre-loaded sketch running\n 3. upload a fresh version of the sketch\n\nFrom there, more advanced steps are:\n- write a sketch that uses MQTT to communicate, or that makes outbound REST requests\n- create some web pages and write a sketch that populates data in them or reacts to buttons\n  and forms\n- make changes or enhancements to esp-link and build your own firmware\n\n### Serial bridge\n\nIn order to connect through the esp-link to a microcontroller use port 23. For example,\non linux you can use `nc esp-hostname 23` or `telnet esp-hostname 23`.\n\nThe connections on port 23 and 2323 have a 5 minute inactivity timeout. This is standard with\nEspressif's SDK and esp-link does not change it. The reason is that due to memory limitations only a\nfew connections can be open (4 per port) and it's easy for connections to get \"lost\" staying open\nforever, for example, due to wifi disconnects. That could easily make it impossible to connect to\nesp-link due to connection exhaustion. Something smarter is most likely possible...\n\nNote that multiple connections to port 23 and 2323 can be made simultaneously. Esp-link will\nintermix characters received on all these connections onto the serial TX and it will\nbroadcast incoming characters from the serial RX to all connections. Use with caution!\n\nIf you are using esp-link to connect to the console of a linux system, such as an rPi, you\nwill most likely see what you typed being echoed twice. If you are on a linux system use\ntelnet and issue a `mode char` command (in telnet, hit the escape char `^]` and type `mode\nchar` at the prompt). If you are using putty on Windows, open the connection settings and\nin the terminal settings set both `local echo` and `local line editing` to `off`.\n\nContact\n-------\n\nIf you find problems with esp-link, please create a github issue. If you have a question, please\nuse the gitter chat link at the top of this page.\n"
        },
        {
          "name": "RESTMQTT.md",
          "type": "blob",
          "size": 0.8984375,
          "content": "Esp-link: Outbound HTTP REST requests and MQTT client\n-------------------------------------------\n\nThe V2 versions of esp-link use the SLIP protocol over the serial link to support simple outbound\nHTTP REST requests as well as an MQTT client. The SLIP protocol consists of commands with\nbinary arguments sent from the\nattached microcontroller to the esp8266, which then performs the command and responds back.\nThe responses back use a callback address in the attached microcontroller code, i.e., the\ncommand sent by the uC contains a callback address and the response from the esp8266 starts\nwith that callback address. This enables asynchronous communication where esp-link can notify the\nuC when requests complete or when other actions happen, such as wifi connectivity status changes.\n\nYou can find REST and MQTT libraries as well as demo sketches in the\n[el-client](https://github.com/jeelabs/el-client) repository.\n"
        },
        {
          "name": "TROUBLESHOOTING.md",
          "type": "blob",
          "size": 2.0947265625,
          "content": "Esp-Link troubleshooting\n========================\n\n### Troubleshooting\n\n- verify that you have sufficient power, borderline power can cause the esp module to seemingly\n  function until it tries to transmit and the power rail collapses\n- if you just cannot flash your esp8266 module (some people call it the zombie mode) make sure you\n  have gpio0 and gpio15 pulled to gnd with a 1K resistor, gpio2 tied to 3.3V with 1K resistor, and\n  RX/TX connected without anything in series. If you need to level shift the signal going into the\n  esp8266's RX use a 1K resistor. Use 115200 baud in the flasher.\n  (For a permanent set-up I would use higher resistor values but\n  when nothing seems to work these are the ones I try.)\n- if the flashing succeeded, check the \"conn\" LED to see which mode esp-link is in (see LED info above)\n- reset or power-cycle the esp-link to force it to become an access-point if it can't\n  connect to your network within 15-20 seconds\n- if the LED says that esp-link is on your network but you can't get to it, make sure your\n  laptop is on the same network (and no longer on the esp's network)\n- if you do not know the esp-link's IP address on your network, try `esp-link.local`, try to find\n  the lease in your DHCP server; if all fails, you may have to turn off your access point (or walk\n  far enough away) and reset/power-cycle esp-link, it will then fail to connect and start its\n  own AP after 15-20 seconds\n\n### LED indicators\n\nAssuming appropriate hardware attached to GPIO pins, the green \"conn\" LED will show the wifi\nstatus as follows:\n\n- Very short flash once a second: not connected to a network and running as AP+STA, i.e.\n  trying to connect to the configured network\n- Very short flash once every two seconds: not connected to a network and running as AP-only\n- Even on/off at 1HZ: connected to the configured network but no IP address (waiting on DHCP)\n- Steady on with very short off every 3 seconds: connected to the configured network with an\n  IP address (esp-link shuts down its AP after 60 seconds)\n\nThe yellow \"ser\" LED will blink briefly every time serial data is sent or received by the esp-link.\n"
        },
        {
          "name": "UC-FLASHING.md",
          "type": "blob",
          "size": 10.7529296875,
          "content": "Flashing an attached Microcontroller\n====================================\n\nIn order to connect through the esp-link to a microcontroller use port 23. For example,\non linux you can use `nc esp-hostname 23` or `telnet esp-hostname 23`.\n\nNote that multiple connections to port 23 and 2323 can be made simultaneously. Esp-link will\nintermix characters received on all these connections onto the serial TX and it will\nbroadcast incoming characters from the serial RX to all connections. Use with caution!\n\n### Flashing an attached AVR/Arduino\n\nThere are multiple options for reprogramming an attached AVR/Arduino microcontroller:\n\n- Use avrdude and point it at port 23 of esp-link. Esp-link automatically detects the programming\n  sequence and issues a reset to the AVR.\n- Use avrdude and point it at port 2323 of esp-link. This is the same as port 23 except that the\n  autodectection is not used and the reset happens because port 2323 is used\n- Use curl or a similar tool to HTTP POST the firmware to esp-link. This uses the built-in\n  programmer, which only works for AVRs/Arduinos with the optiboot bootloader (which is std).\n- Use some serial port forwarding software, such as com2com, or hwvsp (you have to uncheck\n  nvt in the settings when using the latter).\n\nTo reprogram an Arduino / AVR microcontroller by pointing avrdude at port 23 or 2323 you\nspecify a serial port of the form `net:esp-link:23` in avrdude's -P option, where\n`esp-link` is either the hostname of your esp-link or its IP address).\nThis is instead of specifying a serial port of the form /dev/ttyUSB0.\nEsp-link detects that avrdude starts its connection with a flash synchronization sequence\nand sends a reset to the AVR microcontroller so it can switch into flash programming mode.\n\nNote for Windows users: very recent avrdude versions on Windows support the -P option, while older\nones don't. See the second-to-last bullet in the\n[avrdude 6.3 release notes]http://savannah.nongnu.org/forum/forum.php?forum_id=8461).\n\nTo reprogram using the HTTP POST method you need to first issue a POST to put optiboot into\nprogramming mode: POST to `http://esp-link/pgm/sync`, this starts the process. Then check that\nsynchronization with optiboot has been achieved by issuing a GET to the same URL\n(`http://esp-link/pgm/sync`). Repeat until you have sync (takes <500ms normally). Finally\nissue a POST request to `http://esp-link/pgm/upload` with your hex file as POST data (raw,\nnot url-encoded or multipart-mime. Please look into the avrflash script for the curl command-line\ndetails or use that script directly (`./avrflash esp-link.local my_sketch.hex`).\n_Important_: after the initial sync request that resets the AVR you have 10 seconds to get to the\nupload post or esp-link will time-out. So if you're manually entering curl commands have them\nprepared so you can copy&paste!\n\nBeware of the baud rate, which you can set on the uC Console page. Sometimes you may be using\n115200 baud in sketches but the bootloader may use 57600 baud. When you use port 23 or 2323 you\nneed to set the baud rate correctly. If you use the built-in programmer (HTTP POST method) then\nesp-link will try the configured baud rate and also 9600, 57600, and 115200 baud, so it should\nwork even if you have the wrong baud rate configured...\n\nWhen to use which method? If port 23 works then go with that. If you have trouble getting sync\nor it craps out in the middle too often then try the built-in programmer with the HTTP POST.\nIf your AVR doesn't use optiboot then use port 2323 since esp-link may not recognize the programming\nsequence and not issue a reset if you use port 23.\n\nIf you are having trouble with the built-in programmer and see something like this:\n\n```\n# ./avrflash 192.168.3.104 blink.hex\nError checking sync: FAILED to SYNC: abandoned after timeout, got:\n:\\xF/\\x00\\xCj\\xCz\\xCJ\\xCZ\\xC\\xAÜ\\xC\\xAä\\xC\\xAÜ\\xC\\xAä\\xC\\xBì\\xC\\xBô\\xC\\xBì\\xC\\xBô\\xC\\xAÜ\\xC\\xAä\\xC\n```\n\nthe most likely cause is a baud rate mismatch and/or a bad connection from the esp8266 to the\nAVRs reset line.\nThe baud rate used by esp-link is set on the uC Console web page and, as mentioned above, it will\nautomatically try 9600, 57600, and 115200 as well.\nThe above garbage characters are most likely due to optiboot timing out and starting the sketch\nand then the sketch sending data at a different baud rate than configured into esp-link.\nNote that sketches don't necessarily use the same baud rate as optiboot, so you may have the\ncorrect baud rate configured but reset isn't functioning, or reset may be functioning but the\nbaud rate may be incorrect.\n\nThe output of a successful flash using the built-in programmer looks like this:\n\n```\nSuccess. 3098 bytes at 57600 baud in 0.8s, 3674B/s 63% efficient\n```\n\nThis says that the sketch comprises 3098 bytes of flash, was written in 0.8 seconds\n(excludes the initial sync time) at 57600 baud,\nand the 3098 bytes were flashed at a rate of 3674 bytes per second.\nThe efficiency measure is the ratio of the actual rate to the serial baud rate,\nthus 3674/5760 = 0.63 (there are 10 baud per character).\nThe efficiency is not 100% because there is protocol overhead (such as sync, record type, and\nlength characters)\nand there is dead time waiting for an ack or preparing the next record to be sent.\n\n### Details of built-in AVR flash algorithm\n\nThe built-in flashing algorithm differs a bit from what avrdude does. The programming protocol\nstates that STK_GET_SYNC+CRC_EOP (0x30 0x20) should be sent to synchronize, but that works poorly\nbecause the AVR's UART only buffers one character. This means that if STK_GET_SYNC+CRC_EOP is\nsent twice there is a high chance that only the last character (CRC_EOP) is actually\nreceived. If that is followed by another STK_GET_SYNC+CRC_EOP sequence then optiboot receives\nCRC_EOP+STK_GET_SYNC+CRC_EOP which causes it to abort and run the old sketch. Ending up in that\nsituation is quite likely because optiboot initializes the UART as one of the first things, but\nthen goes off an flashes an LED for ~300ms during which it doesn't empty the UART.\n\nLooking at the optiboot code, the good news is that CRC_EOP+CRC_EOP can be used to get an initial\nresponse without the overrun danger of the normal sync sequence and this is what esp-link does.\nThe programming sequence runs as follows:\n\n- esp-link sends a brief reset pulse (1ms)\n- esp-link sends CRC_EOP+CRC_EOP ~50ms later\n- esp-link sends CRC_EOP+CRC_EOP every ~70-80ms\n- eventually optiboot responds with STK_INSYNC+STK_OK (0x14;0x10)\n- esp-link sends one CRC_EOP to sort out the even/odd issue\n- either optiboot responds with STK_INSYNC+STK_OK or nothing happens for 70-80ms, in which case\n  esp-link sends another CRC_EOP\n- esp-link sends STK_GET_SYNC+CRC_EOP and optiboot responds with STK_INSYNC+STK_OK and we're in\n  sync now\n- esp-link sends the next command (starts with 'u') and programming starts...\n\nIf no sync is achieved, esp-link changes baud rate and the whole thing starts over with a reset\npulse about 600ms, esp-link gives up after about 5 seconds and reports an error.\n\n### Flashing an attached ARM processor\n\nYou can reprogram NXP's LPC800-series and many other ARM processors as well by pointing your\nprogrammer similarly at the esp-link's port 23. For example, if you are using\nhttps://github.com/jeelabs/embello/tree/master/tools/uploader a command line like\n`uploader -t -s -w esp-link:23 build/firmware.bin` does the trick.\nThe way it works is that the uploader uses telnet protocol escape sequences in order to\nmake esp-link issue the appropriate \"ISP\" and reset sequence to the microcontroller to start the\nflash programming. If you use a different ARM programming tool it will work as well as long as\nit starts the connection with the `?\\r\\n` synchronization sequence.\n\n### Flashing an attached esp8266\n\n__Flashing another esp8266 module is possible in theory but real-world attempts have so far been\nrather unsuccessful due to Wifi interference. This section is left here in case someone else\nwants to dig in and find a solution.__\n\nYou can use esp-link running on one esp8266 module to flash another esp8266 module,\nhowever it is rather tricky! The problem is not electric, it is wifi interference.\nThe basic idea is to use some method to direct the esp8266 flash program to port 2323 of\nesp-link. Using port 2323 with the appropriate wiring will cause the esp8266's reset and \ngpio0 pins to be toggled such that the chip enters the flash programming mode.\n\nOne option for connecting the programmer with esp-link is to use my version of esptool.py\nat http://github.com/tve/esptool, which supports specifying a URL instead of a port. Thus\ninstead of specifying something like `--port /dev/ttyUSB0` or `--port COM1` you specify\n`--port socket://esp-link.local:2323`. Important: the baud rate specified on the esptool.py\ncommand-line is irrelevant as the baud rate used by esp-link will be the one set in the\nuC console page. Fortunately the esp8266 bootloader does auto-baud detection. (Setting the\nbaud rate to 115200 is recommended.)\n\nAnother option is to use a serial-to-tcp port forwarding driver and point that to port 2323\nof esp-link. On windows users have reported success with\nhttp://www.hw-group.com/products/hw_vsp/hw_vsp2_en.html[HW Virtual Serial Port]\n\nNow to the interference problem: once the attached esp8266 is reset it\nstarts outputting its 26Mhz clock on gpio0, which needs to be attached to\nthe esp8266 running esp-link (since it needs to drive gpio0 low during\nthe reset to enter flash mode). This 26Mhz signal on gpio0 causes a\nsignificant amount of radio interference with the result that the esp8266\nrunning esp-link has trouble receiving Wifi packets. You can observe this\nby running a ping to esp-link in another window: as soon as the target\nesp8266 is reset, the pings become very slow or stop altogetehr. As soon\nas you remove power to the attached esp8266 the pings resume beautifully.\n\nTo try and get the interference under control, try some of the following:\nadd a series 100ohm resistor and 100pf capacitor to ground as close to\nthe gpio0 pin as possible (basically a low pass filter); and/or pass\nthe cable connecting the two esp8266's through a ferrite bead.\n\n### Debug log\n\nThe esp-link web UI can display the esp-link debug log (os_printf statements in the code). This\nis handy but sometimes not sufficient. Esp-link also prints the debug info to the UART where\nit is sometimes more convenient and sometimes less... For this reason three UART debug log\nmodes are supported that can be set in the web UI (and the mode is saved in flash):\n\n- auto: the UART log starts enabled at boot using uart0 and disables itself when esp-link\n  associates with an AP. It re-enables itself if the association is lost.\n- off: the UART log is always off\n- on0: the UART log is always on using uart0\n- on1: the UART log is always on using uart1 (gpio2 pin)\n\nNote that even if the UART log is always off the ROM prints to uart0 whenever the\nesp8266 comes out of reset. This cannot be disabled.\n"
        },
        {
          "name": "WEB-SERVER.md",
          "type": "blob",
          "size": 2.9033203125,
          "content": "ESP-LINK web-server tutorial\n============================\n\nVideo\n--------------------\n\nhttps://www.youtube.com/watch?v=vBESCO0UhYI\n\n\nInstalling el-client Arduino library\n--------------------\n\nDownload and install ELClient library.\n\nhttps://github.com/jeelabs/el-client\n\n\nLED flashing sample\n--------------------\n\nCircuit:\n\n - 1: connect a Nodemcu (ESP8266) board and an Arduino Nano / UNO:\n   (RX - levelshifter - TX, TX - levelshifter - RX)\n - 2: optionally connect RESET-s with a level shifter\n\n\nInstallation steps:\n\n - 1: open webserver_led ELClient sample file in Arduino\n - 2: upload the code onto an Arduino Nano/Uno\n - 3: open the Web Server page on esp-link UI\n - 4: upload LED.html from webserver_led ( ELCient/examples/webserver_led/LED.html )\n - 5: choose LED page on esp-link UI\n - 6: turn on/off the LED\n\n \nHTML controls sample\n--------------------------\n\nCircuit:\n\n - 1: connect a Nodemcu (ESP8266) board and an Arduino Nano / UNO:\n   (RX - levelshifter - TX, TX - levelshifter - RX)\n - 2: optionally connect RESET-s with a level shifter\n - 3: add a trimmer to A0 for voltage measurement\n\nInstallation steps:\n\n - 1: open webserver_controls ELClient sample file in Arduino\n - 2: upload the code onto an Arduino Nano/Uno\n - 3: open the Web Server page on esp-link UI\n - 4: upload the 3 HTML files from webserver_controls ( select multiple htmls from  ELCient/examples/webserver_controls/ )\n - 5: jump to LED/User/Voltage pages\n - 6: try out different settings\n\n \nSupported HTML controls\n--------------------\n\nHTML&nbsp;control&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Value Type  | Description  | Form Submission |\n ------------------------ | ----- | ------------ | ------- |\n&lt;p id=\"id\"/&gt; <br/> &lt;div id=\"id\"/&gt; <br/> &lt;tr id=\"id\"/&gt; <br/> &lt;th id=\"id\"/&gt; <br/> &lt;td id=\"id\"/&gt; <br/> &lt;textarea id=\"id\"/&gt; | String&nbsp;(HTML) | MCU can replace the inner HTML part of the control at LOAD/REFRESH queries. The string (sent by MCU) is handled as HTML, so &lt;img...&gt; will be displayed as an image on the page | NO |\n&lt;button id=\"id\"/&gt; | String | When button is pressed, a message is transmitted to MCU containing the id (BUTTON_PRESS) | NO |\n&lt;input name=\"id\"/&gt; | String <br/> Integer <br/> Float <br/> Boolean | MCU can replace the value or checked properties of the HTML control in the form (LOAD/REFRESH). At form submission, the content of value will be transmitted to MCU (SET_FIELD). | YES |\n&lt;select name=\"id\"/&gt; | String | MCU can choose a value from the drop down (LOAD/REFRESH). At form submission the currently selected value will be transmitted to MCU (SET_FIELD) | YES |\n&lt;ul id=\"id\"/&gt; <br/> &lt;ol id=\"id\"/&gt; | JSON list <br/> [\"1\",\"2\",\"3\"] | MCU can send a JSON list which is transformed to an HTML list ( &lt;li/&gt; )  (LOAD/REFRESH) | NO |\n&lt;table id=\"id\"/&gt; | JSON table <br/> [[\"1\",\"2\"], <br/> [\"3\",\"4\"]] | MCU sends a JSON table which is transformed to an HTML table  (LOAD/REFRESH) | NO |\n\n"
        },
        {
          "name": "WIFI-CONFIG.md",
          "type": "blob",
          "size": 5.1279296875,
          "content": "Esp-link Wifi configuration\n===========================\n\nFor proper operation the end state that esp-link needs to arrive at is to have it\njoin your pre-existing wifi network as a pure station.\nHowever, in order to get there esp-link will start out as an access point and you'll have\nto join its network to configure it. The short version is:\n\n 1. esp-link creates a wifi access point with an SSID of the form `ESP_012ABC` (some modules\n    use a different SSID form, such as `ai-thinker-012ABC`)\n 2. you join your laptop or phone to esp-link's network as a station and you configure\n    esp-link wifi with your network info by pointing your browser at `http://192.168.4.1/`\n 3. you set a hostname for esp-link on the \"home\" page, or leave the default (\"esp-link\")\n 4. esp-link starts to connect to your network while continuing to also be an access point\n    (\"AP+STA\"), the esp-link may show up with a `${hostname}.local` hostname\n    (depends on your DHCP/DNS config)\n 4. esp-link succeeds in connecting and shuts down its own access point after 15 seconds,\n    you reconnect your laptop/phone to your normal network and access esp-link via its hostname\n    or IP address\n\n### Notes on using AP (access point) mode\n\nEsp-link does not support STA+AP mode, however it does support STA mode and AP mode. What happens\nis that STA+AP mode is used at boot and when making STA changes to allow for recovery: the AP\nmode stays on for a while so you can connect to it and fix the STA mode. Once STA has connected,\nesp-link switches to STA-only mode. There is no setting to stay in STA+AP mode. So... if you want\nto use AP ensure you set esp-link to AP-only mode. If you want STA+AP mode you're gonna have to\nmodify the source for yourself. (This stuff is painful to test and rather tricky, so don't expect\nthe way it works to change.)\n\nConfiguration details\n---------------------\n\n### Wifi\n\nAfter you have serially flashed the module it will create a wifi access point (AP) with an\nSSID of the form `ESP_012ABC` where 012ABC is a piece of the module's MAC address.\nUsing a laptop, phone, or tablet connect to this SSID and then open a browser pointed at\nhttp://192.168.4.1/, you should then see the esp-link web site.\n\nNow configure the wifi. The desired configuration is for the esp-link to be a\nstation on your local wifi network so you can communicate with it from all your computers.\n\nTo make this happen, navigate to the wifi page and you should see the esp-link scan\nfor available networks. You should then see a list of detected networks on the web page and you\ncan select yours.\nEnter a password if your network is secure (highly recommended...) and hit the connect button.\n\nYou should now see that the esp-link has connected to your network and it should show you\nits IP address. _Write it down_. You will then have to switch your laptop, phone, or tablet\nback to your network and then you can connect to the esp-link's IP address or, depending on your\nnetwork's DHCP/DNS config you may be able to go to http://esp-link.local\n\nAt this point the esp-link will have switched to STA mode and be just a station on your\nwifi network. These settings are stored in flash and thereby remembered through resets and\npower cycles. They are also remembered when you flash new firmware. Only flashing `blank.bin`\nvia the serial port as indicated above will reset the wifi settings.\n\nThere is a fail-safe, which is that after a reset or a configuration change, if the esp-link\ncannot connect to your network it will revert back to AP+STA mode after 15 seconds and thus\nboth present its `ESP_012ABC`-style network and continue trying to reconnect to the requested network.\nYou can then connect to the esp-link's AP and reconfigure the station part.\n\nOne open issue (#28) is that esp-link cannot always display the IP address it is getting to the browser\nused to configure the ssid/password info. The problem is that the initial STA+AP mode may use\nchannel 1 and you configure it to connect to an AP on channel 6. This requires the ESP8266's AP\nto also switch to channel 6 disconnecting you in the meantime. \n\n### Hostname, description, DHCP, mDNS\n\nYou can set a hostname on the \"home\" page, this should be just the hostname and not a domain\nname, i.e., something like \"test-module-1\" and not \"test-module-1.mydomain.com\".\nThis has a number of effects:\n\n- you will see the first 12 chars of the hostname in the menu bar (top left of the page) so\n  if you have multiple modules you can distinguish them visually\n- esp-link will use the hostname in its DHCP request, which allows you to identify the module's\n  MAC and IP addresses in your DHCP server (typ. your wifi router). In addition, some DHCP\n  servers will inject these names into the local DNS cache so you can use URLs like\n  `hostname.local`.\n- someday, esp-link will inject the hostname into mDNS (multicast DNS, bonjour, etc...) so \n  URLs of the form `hostname.local` work for everyone (as of v2.1.beta5 mDNS is disabled due\n  to reliability issues with it)\n\nYou can also enter a description of up to 128 characters on the home page (bottom right). This\nallows you to leave a memo for yourself, such as \"installed in basement to control the heating\nsystem\". This descritpion is not used anywhere else.\n"
        },
        {
          "name": "WINDOWS.md",
          "type": "blob",
          "size": 1.830078125,
          "content": "* Install [SourceTree](https://www.sourcetreeapp.com) and check CLI git or other git distribution to obtain git from CLI\n* Install the latest Java JRE\n* Install Python 2.7 to C:\\Python27\n* Install link shell extension from [here](http://schinagl.priv.at/nt/hardlinkshellext/linkshellextension.html)\n* Download and install the [Windows Unofficial Development Kit for Espressif ESP8266](http://programs74.ru/get.php?file=EspressifESP8266DevKit) to c:\\espressif\n* Create a symbolic link for java/bin and git/bin directories under C:\\espressif\\git-bin and C:\\espressif\\java-bin. You must do this because \"make\" doesn't work properly with paths like \"program files(x86)\".  You can see all the expected paths in the [espmake.cmd](https://github.com/jeelabs/esp-link/blob/master/espmake.cmd)\n* [Download](http://sourceforge.net/projects/mingw/files/Installer/) and install MinGW. Run mingw-get-setup.exe.  During the installation process select without GUI.  (uncheck \"... also install support for the graphical user interface\")\n* [Download](http://programs74.ru/get.php?file=EspressifESP8266DevKitAddon) the scripts to automate the installation of additional modules for MinGW.\n* Run install-mingw-package.bat. This will install the basic modules required for MinGW to build esp8266.\n* Checkout esp-link from git to C:\\espressif\\esp-link \n* When you're done open a command prompt and run: espmake.cmd \"make all wiflash\" \n* For a new flash over serial use: espmake.cmd \"make all flash\"\n* If you want to program with serial but not loose your config each time use: espmake.cmd \"make all baseflash\"\n* You can open the esp-link.sln file in Visual Studio 2013.  \"Build Solution\" will issue \"make all wiflash\".  \"Clean Solution\" will issue \"make clean\".  \"Rebuild Solution\" will issue \"make clean all\".  This can be changed under solution properties -> Configuration Properties -> NMake"
        },
        {
          "name": "avrflash",
          "type": "blob",
          "size": 2.5908203125,
          "content": "#! /bin/bash\n#\n# Flash an AVR with optiboot using the esp-link built-in programmer\n# Basically we first reset the AVR and get in sync, and then send the hex file\n#\n# ----------------------------------------------------------------------------\n# \"THE BEER-WARE LICENSE\" (Revision 42):\n# Thorsten von Eicken wrote this file. As long as you retain \n# this notice you can do whatever you want with this stuff. If we meet some day, \n# and you think this stuff is worth it, you can buy me a beer in return. \n# ----------------------------------------------------------------------------\n\nshow_help() {\n  cat <<EOT\nUsage: ${0##*/} [-options...] hostname sketch.hex\nFlash the AVR running optiboot attached to esp-link with the sketch.\n  -v                    Be verbose\n  -h                    show this help\n\nExample: ${0##*/} -v esp-link mysketch.hex\n         ${0##*/} 192.168.4.1 mysketch.hex\nEOT\n}\n\nif ! which curl >/dev/null; then\n  echo \"ERROR: Cannot find curl: it is required for this script.\" >&2\n  exit 1\nfi\n\nstart=`date +%s`\n\n# ===== Parse arguments\n\nverbose=\n\nwhile getopts \"hvx:\" opt; do\n  case \"$opt\" in\n    h) show_help; exit 0 ;;\n    v) verbose=1 ;;\n    x) foo=\"$OPTARG\" ;;\n    '?') show_help >&2; exit 1 ;;\n  esac\ndone\n\n# Shift off the options and optional --.\nshift \"$((OPTIND-1))\"\n\n# Get the fixed arguments\nif [[ $# != 2 ]]; then\n  show_help >&2\n  exit 1\nfi\nhostname=$1\nhex=$2\n\nre='[-A-Za-z0-9.]+'\nif [[ ! \"$hostname\" =~ $re ]]; then\n  echo \"ERROR: hostname ${hostname} is not a valid hostname or ip address\" >&2\n  exit 1\nfi\n\nif [[ ! -r \"$hex\" ]]; then\n  echo \"ERROR: cannot read hex file ($hex)\" >&2\n  exit 1\nfi\n\n# ===== Get AVR in sync\n\n[[ -n \"$verbose\" ]] && echo \"Resetting AVR with http://$hostname/pgm/sync\" >&2\nv=; [[ -n \"$verbose\" ]] && v=-v\nsync=`curl -m 10 $v -s -w '%{http_code}' -XPOST \"http://$hostname/pgm/sync\"`\nif [[ $? != 0 || \"$sync\" != 204 ]]; then\n  echo \"Error resetting AVR\" >&2\n  exit 1\nfi\n\nwhile true; do\n  sync=`curl -m 10 $v -s \"http://$hostname/pgm/sync\"`\n  if [[ $? != 0 ]]; then\n    echo \"Error checking sync\" >&2\n    exit 1\n  fi\n  case \"$sync\" in\n  SYNC*)\n    echo \"AVR in $sync\"  >&2\n    break;;\n  \"NOT READY\"*)\n    [[ -n \"$verbose\" ]] && echo \"  Waiting for sync...\" >&2\n    ;;\n  *)\n    echo \"Error checking sync: $sync\" >&2\n    exit 1\n    ;;\n  esac\n  sleep 0.1\ndone\n\n# ===== Send HEX file\n\n[[ -n \"$verbose\" ]] && echo \"Sending HEX file for programming\" >&2\nsync=`curl -m 10 $v -s -g -d \"@$hex\" \"http://$hostname/pgm/upload\"`\necho $sync\nif [[ $? != 0 || ! \"$sync\" =~ ^Success ]]; then\n  echo \"Error programming AVR\" >&2\n  exit 1\nfi\n\nsec=$(( `date +%s` - $start ))\necho \"Success, took $sec seconds\" >&2\nexit 0\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "esp-link.sln",
          "type": "blob",
          "size": 0.8935546875,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 2013\nVisualStudioVersion = 12.0.31101.0\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"esp-link\", \"esp-link.vcxproj\", \"{A92F0CAA-F89B-4F78-AD2A-A042429BD87F}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|ARM = Debug|ARM\n\t\tRelease|ARM = Release|ARM\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{A92F0CAA-F89B-4F78-AD2A-A042429BD87F}.Debug|ARM.ActiveCfg = Debug|ARM\n\t\t{A92F0CAA-F89B-4F78-AD2A-A042429BD87F}.Debug|ARM.Build.0 = Debug|ARM\n\t\t{A92F0CAA-F89B-4F78-AD2A-A042429BD87F}.Release|ARM.ActiveCfg = Release|ARM\n\t\t{A92F0CAA-F89B-4F78-AD2A-A042429BD87F}.Release|ARM.Build.0 = Release|ARM\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "esp-link.vcxproj",
          "type": "blob",
          "size": 7.5458984375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project DefaultTargets=\"Build\" ToolsVersion=\"12.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ItemGroup Label=\"ProjectConfigurations\">\n    <ProjectConfiguration Include=\"Debug|ARM\">\n      <Configuration>Debug</Configuration>\n      <Platform>ARM</Platform>\n    </ProjectConfiguration>\n    <ProjectConfiguration Include=\"Release|ARM\">\n      <Configuration>Release</Configuration>\n      <Platform>ARM</Platform>\n    </ProjectConfiguration>\n  </ItemGroup>\n  <ItemGroup>\n    <ClCompile Include=\"cmd\\cmd.c\" />\n    <ClCompile Include=\"cmd\\handlers.c\" />\n    <ClCompile Include=\"esp-link\\cgi.c\" />\n    <ClCompile Include=\"esp-link\\cgiflash.c\" />\n    <ClCompile Include=\"esp-link\\cgimqtt.c\" />\n    <ClCompile Include=\"esp-link\\cgioptiboot.c\" />\n    <ClCompile Include=\"esp-link\\cgipins.c\" />\n    <ClCompile Include=\"esp-link\\cgiservices.c\" />\n    <ClCompile Include=\"esp-link\\cgitcp.c\" />\n    <ClCompile Include=\"esp-link\\cgiwifi.c\" />\n    <ClCompile Include=\"esp-link\\config.c\" />\n    <ClCompile Include=\"esp-link\\log.c\" />\n    <ClCompile Include=\"esp-link\\main.c\" />\n    <ClCompile Include=\"esp-link\\mqtt_client.c\" />\n    <ClCompile Include=\"esp-link\\status.c\" />\n    <ClCompile Include=\"esp-link\\task.c\" />\n    <ClCompile Include=\"espfs\\espfs.c\" />\n    <ClCompile Include=\"espfs\\mkespfsimage\\main.c\" />\n    <ClCompile Include=\"espfs\\mkespfsimage\\mman-win32\\mman.c\" />\n    <ClCompile Include=\"espfs\\mkespfsimage\\mman-win32\\test.c\" />\n    <ClCompile Include=\"httpd\\auth.c\" />\n    <ClCompile Include=\"httpd\\base64.c\" />\n    <ClCompile Include=\"httpd\\httpd.c\" />\n    <ClCompile Include=\"httpd\\httpdespfs.c\" />\n    <ClCompile Include=\"mqtt\\mqtt.c\" />\n    <ClCompile Include=\"mqtt\\mqtt_cmd.c\" />\n    <ClCompile Include=\"mqtt\\mqtt_msg.c\" />\n    <ClCompile Include=\"mqtt\\pktbuf.c\" />\n    <ClCompile Include=\"rest\\rest.c\" />\n    <ClCompile Include=\"serial\\console.c\" />\n    <ClCompile Include=\"serial\\crc16.c\" />\n    <ClCompile Include=\"serial\\serbridge.c\" />\n    <ClCompile Include=\"serial\\serled.c\" />\n    <ClCompile Include=\"serial\\slip.c\" />\n    <ClCompile Include=\"serial\\uart.c\" />\n    <ClCompile Include=\"syslog\\syslog.c\" />\n    <ClCompile Include=\"user\\user_main.c\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ClInclude Include=\"cmd\\cmd.h\" />\n    <ClInclude Include=\"esp-link\\cgi.h\" />\n    <ClInclude Include=\"esp-link\\cgiflash.h\" />\n    <ClInclude Include=\"esp-link\\cgimqtt.h\" />\n    <ClInclude Include=\"esp-link\\cgioptiboot.h\" />\n    <ClInclude Include=\"esp-link\\cgipins.h\" />\n    <ClInclude Include=\"esp-link\\cgiservices.h\" />\n    <ClInclude Include=\"esp-link\\cgitcp.h\" />\n    <ClInclude Include=\"esp-link\\cgiwifi.h\" />\n    <ClInclude Include=\"esp-link\\config.h\" />\n    <ClInclude Include=\"esp-link\\log.h\" />\n    <ClInclude Include=\"esp-link\\mqtt_client.h\" />\n    <ClInclude Include=\"esp-link\\status.h\" />\n    <ClInclude Include=\"esp-link\\stk500.h\" />\n    <ClInclude Include=\"esp-link\\task.h\" />\n    <ClInclude Include=\"espfs\\espfs.h\" />\n    <ClInclude Include=\"espfs\\espfsformat.h\" />\n    <ClInclude Include=\"espfs\\mkespfsimage\\mman-win32\\mman.h\" />\n    <ClInclude Include=\"httpd\\auth.h\" />\n    <ClInclude Include=\"httpd\\base64.h\" />\n    <ClInclude Include=\"httpd\\httpd.h\" />\n    <ClInclude Include=\"httpd\\httpdespfs.h\" />\n    <ClInclude Include=\"include\\c_types.h\" />\n    <ClInclude Include=\"include\\esp8266.h\" />\n    <ClInclude Include=\"include\\espmissingincludes.h\" />\n    <ClInclude Include=\"include\\uart_hw.h\" />\n    <ClInclude Include=\"include\\user_config.h\" />\n    <ClInclude Include=\"mqtt\\mqtt.h\" />\n    <ClInclude Include=\"mqtt\\mqtt_cmd.h\" />\n    <ClInclude Include=\"mqtt\\mqtt_msg.h\" />\n    <ClInclude Include=\"mqtt\\pktbuf.h\" />\n    <ClInclude Include=\"rest\\rest.h\" />\n    <ClInclude Include=\"serial\\console.h\" />\n    <ClInclude Include=\"serial\\crc16.h\" />\n    <ClInclude Include=\"serial\\serbridge.h\" />\n    <ClInclude Include=\"serial\\serled.h\" />\n    <ClInclude Include=\"serial\\slip.h\" />\n    <ClInclude Include=\"serial\\uart.h\" />\n    <ClInclude Include=\"syslog\\syslog.h\" />\n  </ItemGroup>\n  <ItemGroup>\n    <None Include=\".gitignore\" />\n    <None Include=\"avrflash\" />\n    <None Include=\"BOARDS.md\" />\n    <None Include=\"espmake.cmd\" />\n    <None Include=\"FLASH.md\" />\n    <None Include=\"html\\console.html\" />\n    <None Include=\"html\\console.js\" />\n    <None Include=\"html\\head-\" />\n    <None Include=\"html\\home.html\" />\n    <None Include=\"html\\jl-400x110.png-\" />\n    <None Include=\"html\\log.html\" />\n    <None Include=\"html\\mqtt.html\" />\n    <None Include=\"html\\mqtt.js\" />\n    <None Include=\"html\\pure.css\" />\n    <None Include=\"html\\services.html\" />\n    <None Include=\"html\\services.js\" />\n    <None Include=\"html\\style.css\" />\n    <None Include=\"html\\ui.js\" />\n    <None Include=\"html\\wifi\\wifi.html\" />\n    <None Include=\"html\\wifi\\wifi.js\" />\n    <None Include=\"html\\wifi\\wifiAp.html\" />\n    <None Include=\"html\\wifi\\wifiAp.js\" />\n    <None Include=\"html\\wifi\\wifiSta.html\" />\n    <None Include=\"html\\wifi\\wifiSta.js\" />\n    <None Include=\"Makefile\" />\n    <None Include=\"README.adoc\" />\n    <None Include=\"README.md\" />\n    <None Include=\"syslog\\syslog.md\" />\n    <None Include=\"wiflash\" />\n    <None Include=\"WINDOWS.md\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Text Include=\"esp-link.log\" />\n    <Text Include=\"LICENSE.txt\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Image Include=\"html\\favicon.ico\" />\n    <Image Include=\"html\\wifi\\icons.png\" />\n  </ItemGroup>\n  <PropertyGroup Label=\"Globals\">\n    <ProjectGuid>{A92F0CAA-F89B-4F78-AD2A-A042429BD87F}</ProjectGuid>\n    <Keyword>MakeFileProj</Keyword>\n  </PropertyGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n  <PropertyGroup>\n    <ConfigurationType>Makefile</ConfigurationType>\n  </PropertyGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n  <ImportGroup Label=\"ExtensionSettings\">\n  </ImportGroup>\n  <ImportGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|ARM'\" Label=\"PropertySheets\">\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n  </ImportGroup>\n  <PropertyGroup Label=\"UserMacros\" />\n  <PropertyGroup>\n    <NMakeOutput />\n    <NMakePreprocessorDefinitions>__ets__;_STDINT_H;ICACHE_FLASH;__MINGW32__;__WIN32__;MQTT;REST;SYSLOG;FIRMWARE_SIZE</NMakePreprocessorDefinitions>\n    <NMakeIncludeSearchPath>.\\syslog;.\\rest;.\\esp-link;.\\mqtt;.\\cmd;.\\serial;.\\user;.\\espfs;.\\httpd;.\\include;..\\esp_iot_sdk_v1.5.2\\include;..\\xtensa-lx106-elf\\xtensa-lx106-elf\\include;c:\\tools\\mingw64\\x86_64-w64-mingw32\\include;c:\\tools\\mingw64\\lib\\gcc\\x86_64-w64-mingw32\\4.8.3\\include</NMakeIncludeSearchPath>\n    <ExecutablePath />\n    <ReferencePath />\n    <LibraryPath />\n    <LibraryWPath />\n    <ExcludePath />\n    <NMakeOutput />\n    <OutDir>bin</OutDir>\n    <IntDir>build</IntDir>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|ARM'\">\n    <NMakeBuildCommandLine>espmake all wiflash</NMakeBuildCommandLine>\n    <NMakeReBuildCommandLine>espmake clean all</NMakeReBuildCommandLine>\n    <NMakeCleanCommandLine>espmake clean</NMakeCleanCommandLine>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|ARM'\">\n    <NMakeBuildCommandLine>espmake clean all wiflash</NMakeBuildCommandLine>\n    <NMakeReBuildCommandLine>espmake clean all</NMakeReBuildCommandLine>\n    <NMakeCleanCommandLine>espmake clean</NMakeCleanCommandLine>\n  </PropertyGroup>\n  <ItemDefinitionGroup>\n    <BuildLog>\n      <Path />\n    </BuildLog>\n  </ItemDefinitionGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n  <ImportGroup Label=\"ExtensionTargets\">\n  </ImportGroup>\n</Project>\n"
        },
        {
          "name": "esp-link",
          "type": "tree",
          "content": null
        },
        {
          "name": "espfs",
          "type": "tree",
          "content": null
        },
        {
          "name": "espmake.cmd",
          "type": "blob",
          "size": 0.236328125,
          "content": "@echo off\n\nREM remove automatic created obj folder\nrd obj /S /Q >nul 2>&1\n\nPATH=%PATH%;C:\\Espressif\\xtensa-lx106-elf\\bin;C:\\MinGW\\bin;C:\\MinGW\\msys\\1.0\\bin;C:\\espressif\\git-bin;C:\\espressif\\java-bin;C:\\Python27\nmake -f Makefile %1 %2 %3 %4 %5"
        },
        {
          "name": "flash2560.py",
          "type": "blob",
          "size": 3.419921875,
          "content": "#!/usr/bin/env python\n\n# ----------------------------------------------------------------------------\n# \"THE BEER-WARE LICENSE\" (Revision 42):\n# Fabio Manz wrote this file. As long as you retain \n# this notice you can do whatever you want with this stuff. If we meet some day, \n# and you think this stuff is worth it, you can buy me a beer in return. \n# ----------------------------------------------------------------------------\n\nimport sys\nimport re\nimport requests\nimport platform  # For getting the operating system name\nimport subprocess  # For executing a shell command\nimport os\nimport time\n\nip_regex = \"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n\n\ndef main(argv):\n    print(\"--- flash2560 - Created by Fabio Manz ---\")\n\n    hostname = \"192.168.4.1\"\n    input_file = \"none\"\n\n    # Handle the command line arguments\n    for index, arg in enumerate(argv):\n        if arg == \"-h\" or arg == \"--help\":\n            print_help()\n            sys.exit(0)\n        elif arg == \"-H\" or arg == \"--hostname\":\n            if index + 1 < len(argv) and re.search(ip_regex, argv[index + 1]):\n                hostname = argv[index + 1]\n                if not ping(hostname):\n                    print(\"IP is not reachable:\")\n                    sys.exit(2)\n            else:\n                print(\"IP address is not right\")\n                print_help()\n                sys.exit(1)\n        elif arg == \"-f\" or arg == \"--file\":\n            if index + 1 < len(argv) and os.path.isfile(argv[index + 1]):\n                input_file = argv[index + 1]\n            else:\n                print(\"Can't open file\")\n                print_help()\n                sys.exit(3)\n\n    if input_file == \"none\":\n        print(\"No input file\")\n        print_help()\n        sys.exit(4)\n\n    response = requests.post('http://' + hostname + '/pgmmega/sync')\n\n    # ------------  GET AVR in SYNC  ----------------------------------------\n\n    if response.status_code != 204:\n        print(\"Failed to reset the AVR (HTML ERROR: \" + response.status_code + \")\")\n        sys.exit(5)\n\n    while True:\n        response = requests.get('http://' + hostname + '/pgmmega/sync')\n\n        if \"SYNC\" in response.content.decode('ASCII'):\n            print(response.content)\n            break\n        elif \"NOT READY\" not in response.content.decode('ASCII'):\n            print(\"Could not get in Sync with AVR\")\n            sys.exit(7)\n\n        time.sleep(0.1)\n\n    # -------------- Upload HEX file -----------------------------------------\n\n    hex_file = open(input_file).read()\n\n    response = requests.post('http://' + hostname + '/pgmmega/upload', data=hex_file, timeout=20.0)\n\n    if \"Success\" in response.content.decode('ASCII'):\n        print(\"+++++ Success :) ++++++\")\n    else:\n        print(\"Failed :(\")\n        sys.exit(8)\n\n    # Reset the avr to solve a bug in the bootloader that the program dows not start immediately\n    time.sleep(0.1)\n    requests.post('http://' + hostname + '/console/reset')\n\n    sys.exit(0)\n\n\ndef print_help():\n    print('\\n')\n    print(\"Usage: \")\n    print(\"flash2560.py -H <hostname> -f <hex_file>\")\n    print(\"\\nExample:\")\n    print(\"flash2560.py -H 192.168.4.1 -f Sketch.hex\")\n\n\ndef ping(host):\n    param = '-n' if platform.system().lower() == 'windows' else '-c'\n\n    command = ['ping', param, '1', host]\n    output = open(os.devnull, 'w')\n    return subprocess.call(command, stdout=output) == 0\n\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])\n"
        },
        {
          "name": "html",
          "type": "tree",
          "content": null
        },
        {
          "name": "httpd",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "megaflash",
          "type": "blob",
          "size": 2.7939453125,
          "content": "#! /bin/bash\n#\n# Flash an Arduino Mega with STK500v2 using the esp-link built-in programmer\n# Basically we first reset the AVR and get in sync, and then send the hex file\n#\n# ----------------------------------------------------------------------------\n# \"THE BEER-WARE LICENSE\" (Revision 42):\n# Thorsten von Eicken wrote this file. As long as you retain \n# this notice you can do whatever you want with this stuff. If we meet some day, \n# and you think this stuff is worth it, you can buy me a beer in return. \n#\n# Danny Backx wrote the changes for Arduino Mega.\n# ----------------------------------------------------------------------------\n\nshow_help() {\n  cat <<EOT\nUsage: ${0##*/} [-options...] hostname sketch.hex\nFlash the Mega running optiboot attached to esp-link with the sketch.\nNote : this is for stk500v2 MCUs, use avrflash for Arduino Uno etc instead.\n  -v                    Be verbose\n  -h                    show this help\n\nExample: ${0##*/} -v esp-link mysketch.hex\n         ${0##*/} 192.168.4.1 mysketch.hex\nEOT\n}\n\nif ! which curl >/dev/null; then\n  echo \"ERROR: Cannot find curl: it is required for this script.\" >&2\n  exit 1\nfi\n\nstart=`date +%s`\n\n# ===== Parse arguments\n\nverbose=\n\nwhile getopts \"hvx:\" opt; do\n  case \"$opt\" in\n    h) show_help; exit 0 ;;\n    v) verbose=1 ;;\n    x) foo=\"$OPTARG\" ;;\n    '?') show_help >&2; exit 1 ;;\n  esac\ndone\n\n# Shift off the options and optional --.\nshift \"$((OPTIND-1))\"\n\n# Get the fixed arguments\nif [[ $# != 2 ]]; then\n  show_help >&2\n  exit 1\nfi\nhostname=$1\nhex=$2\n\nre='[-A-Za-z0-9.]+'\nif [[ ! \"$hostname\" =~ $re ]]; then\n  echo \"ERROR: hostname ${hostname} is not a valid hostname or ip address\" >&2\n  exit 1\nfi\n\nif [[ ! -r \"$hex\" ]]; then\n  echo \"ERROR: cannot read hex file ($hex)\" >&2\n  exit 1\nfi\n\n# ===== Get AVR in sync\n\n[[ -n \"$verbose\" ]] && echo \"Resetting AVR with http://$hostname/pgmmega/sync\" >&2\nv=; [[ -n \"$verbose\" ]] && v=-v\nsync=`curl -m 10 $v -s -w '%{http_code}' -XPOST \"http://$hostname/pgmmega/sync\"`\nif [[ $? != 0 || \"$sync\" != 204 ]]; then\n  echo \"Error resetting AVR\" >&2\n  exit 1\nfi\n\nwhile true; do\n  # sync=`curl -m 10 $v -s \"http://$hostname/pgmmega/sync\"`\n  sync=`curl $v -s \"http://$hostname/pgmmega/sync\"`\n  if [[ $? != 0 ]]; then\n    echo \"Error checking sync\" >&2\n    exit 1\n  fi\n  case \"$sync\" in\n  SYNC*)\n    echo \"AVR in $sync\"  >&2\n    break;;\n  \"NOT READY\"*)\n    [[ -n \"$verbose\" ]] && echo \"  Waiting for sync...\" >&2\n    ;;\n  *)\n    echo \"Error checking sync: $sync\" >&2\n    exit 1\n    ;;\n  esac\n  sleep 0.1\ndone\n\n# ===== Send HEX file\n\n[[ -n \"$verbose\" ]] && echo \"Sending HEX file for programming\" >&2\nsync=`curl -m 20 $v -s -g -d \"@$hex\" \"http://$hostname/pgmmega/upload\"`\necho $sync\nif [[ $? != 0 || ! \"$sync\" =~ ^Success ]]; then\n  echo \"Error programming AVR\" >&2\n  exit 1\nfi\n\nsec=$(( `date +%s` - $start ))\necho \"Success, took $sec seconds\" >&2\nexit 0\n"
        },
        {
          "name": "mqtt",
          "type": "tree",
          "content": null
        },
        {
          "name": "rest",
          "type": "tree",
          "content": null
        },
        {
          "name": "serial",
          "type": "tree",
          "content": null
        },
        {
          "name": "socket",
          "type": "tree",
          "content": null
        },
        {
          "name": "syslog",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "user",
          "type": "tree",
          "content": null
        },
        {
          "name": "web-server",
          "type": "tree",
          "content": null
        },
        {
          "name": "wiflash",
          "type": "blob",
          "size": 3.26171875,
          "content": "#! /bin/bash\n#\n# Flash an esp8266 over wifi. This communicates with the esphttpd's /flash handlers\n# and POSTS the correct binary depending on the parittion that needs to be flashed\n# next.\n#\n# ----------------------------------------------------------------------------\n# \"THE BEER-WARE LICENSE\" (Revision 42):\n# Thorsten von Eicken wrote this file. As long as you retain \n# this notice you can do whatever you want with this stuff. If we meet some day, \n# and you think this stuff is worth it, you can buy me a beer in return. \n# ----------------------------------------------------------------------------\n\nshow_help() {\n  cat <<EOT\nUsage: ${0##*/} [-options...] hostname user1.bin user2.bin\nFlash the esp8266 running esphttpd at <hostname> with either <user1.bin> or <user2.bin>\ndepending on its current state. Reboot the esp8266 after flashing and wait for it to come\nup again.\n  -v                    Be verbose\n  -h                    show this help\n\nExample: ${0##*/} -v esp8266 firmware/user1.bin firmware/user2.bin\n         ${0##*/} 192.168.4.1 firmware/user1.bin firmware/user2.bin\nEOT\n}\n\nif ! which curl >/dev/null; then\n  echo \"ERROR: Cannot find curl: it is required for this script.\" >&2\n  exit 1\nfi\n\nstart=`date +%s`\n\n# ===== Parse arguments\n\nverbose=\n\nwhile getopts \"hvx:\" opt; do\n  case \"$opt\" in\n    h) show_help; exit 0 ;;\n    v) verbose=1 ;;\n    x) foo=\"$OPTARG\" ;;\n    '?') show_help >&2; exit 1 ;;\n  esac\ndone\n\n# Shift off the options and optional --.\nshift \"$((OPTIND-1))\"\n\n# Get the fixed arguments\nif [[ $# != 3 ]]; then\n\tshow_help >&2\n\texit 1\nfi\nhostname=$1\nuser1=$2\nuser2=$3\n\nre='[-A-Za-z0-9.]+'\nif [[ ! \"$hostname\" =~ $re ]]; then\n\techo \"ERROR: hostname ${hostname} is not a valid hostname or ip address\" >&2\n\texit 1\nfi\n\nif [[ ! -r \"$user1\" ]]; then\n\techo \"ERROR: cannot read user1 firmware file ($user1)\" >&2\n\texit 1\nfi\n\nif [[ ! -r \"$user2\" ]]; then\n\techo \"ERROR: cannot read user2 firmware file ($user2)\" >&2\n\texit 1\nfi\n\n# ===== Retrieve the 'next' firmware required\n\nfw=\nwhile true; do\n\t[[ -n \"$verbose\" ]] && echo \"Fetching http://$hostname/flash/next\" >&2\n\tv=; [[ -n \"$verbose\" ]] && v=-v\n\tnext=`curl -m 10 $v -s \"http://$hostname/flash/next\"`\n\tif [[ $? != 0 ]]; then\n\t\techo \"Error retrieving http://$hostname/flash/next\" >&2\n\t\texit 1\n\tfi\n\tcase \"$next\" in\n\tuser1.bin)\n\t  echo \"Flashing user1.bin\"  >&2\n\t\tfw=\"$user1\"\n\t\tbreak;;\n\tuser2.bin)\n\t  echo \"Flashing user2.bin\"  >&2\n\t\tfw=\"$user2\"\n\t\tbreak;;\n\t*)\n\t  echo \"Error retrieving or parsing http://$hostname/flash/next\" >&2\n\t\texit 1\n\t\t;;\n\tesac\ndone\n\n#silent=-s\n[[ -n \"$verbose\" ]] && silent=\nres=`curl $silent -XPOST --data-binary \"@$fw\" \"http://$hostname/flash/upload\"`\nif [[ $? != 0 ]]; then\n\techo \"Error flashing $fw\" >&2\n\texit 1\nfi\n\nsleep 2\necho \"Rebooting into new firmware\" >&2\ncurl -m 10 -s \"http://$hostname/flash/reboot\"\n\nsleep 2\necho \"Waiting for ESP8266 to come back\"\nwhile true; do\n\t[[ -n \"$verbose\" ]] && echo \"Fetching http://$hostname/flash/next\" >&2\n\tnext2=`curl -m 10 $v -s \"http://$hostname/flash/next\"`\n\t[[ -n \"$verbose\" ]] && echo \"got: $next2\"\n\tre='user[12]\\.bin'\n\tif [[ \"$next2\" =~ $re ]]; then\n\t\tif [[ \"$next2\" != \"$next\" ]]; then\n\t\t\tsec=$(( `date +%s` - $start ))\n\t\t\techo \"Success, took $sec seconds\" >&2\n\t\t\texit 0\n\t\telse\n\t\t\techo \"Flashing seems to have failed and it reverted to the old firmware?\" >&2\n\t\t\texit 1\n\t\tfi\n\tfi\n\tsleep 1\ndone\n"
        }
      ]
    }
  ]
}