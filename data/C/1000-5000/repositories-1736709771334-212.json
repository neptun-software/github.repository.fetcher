{
  "metadata": {
    "timestamp": 1736709771334,
    "page": 212,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openbsd/src",
      "stars": 3318,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "**/obj\n**/tags\n**/CVS\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.5537109375,
          "content": "#\t$OpenBSD: Makefile,v 1.136 2020/04/05 20:14:14 deraadt Exp $\n\n#\n# For more information on building in tricky environments, please see\n# the list of possible environment variables described in\n# /usr/share/mk/bsd.README.\n#\n# Building recommendations:\n#\n# 1) If at all possible, put this source tree in /usr/src.  If /usr/src\n# must be a symbolic link, set BSDSRCDIR in the environment to point to\n# the real location.\n#\n# 2) It is also recommended that you compile with objects outside the\n# source tree. To do this, ensure /usr/obj exists or points to some\n# area of disk of sufficient size.  Then do \"cd /usr/src; make obj\".\n# This will make a symbolic link called \"obj\" in each directory, as\n# well as populate the /usr/obj properly with directories for the\n# objects.\n#\n# 3) It is strongly recommended that you build and install a new kernel\n# before rebuilding your system. Some of the new programs may use new\n# functionality or depend on API changes that your old kernel doesn't have.\n#\n# 4) If you are reasonably sure that things will compile OK, use the\n# \"make build\" target supplied here. Good luck.\n#\n# 5) If you want to setup a cross-build environment, there is a \"cross-gcc\"\n# target available which upon completion of: \n#\t\"make -f Makefile.cross TARGET=<target> cross-gcc\"\n# (where <target> is one of the names in the /sys/arch directory) will produce\n# a set of compilation tools along with the includes in the /usr/cross/<target>\n# directory. The \"cross-distrib\" target will build cross-tools as well as\n# binaries for a given <target>.\n#\n\n.include <bsd.own.mk>\t# for NOMAN, if it's there.\n\nSUBDIR+= lib include bin libexec sbin usr.bin usr.sbin share games\nSUBDIR+= gnu\n\nSUBDIR+= sys\n\n.if   make(clean) || make(cleandir) || make(obj)\nSUBDIR+= etc distrib regress\n.endif\n\nregression-tests:\n\t@echo Running regression tests...\n\t@cd ${.CURDIR}/regress && ${MAKE} depend && exec ${MAKE} regress\n\nincludes:\n\tcd ${.CURDIR}/include && \\\n\t\tsu ${BUILDUSER} -c 'exec ${MAKE} prereq' && \\\n\t\texec ${MAKE} includes\n\nbeforeinstall:\n\tcd ${.CURDIR}/etc && exec ${MAKE} DESTDIR=${DESTDIR} distrib-dirs\n\tcd ${.CURDIR}/etc && exec ${MAKE} DESTDIR=${DESTDIR} install-mtree\n\tcd ${.CURDIR}/include && exec ${MAKE} includes\n\nafterinstall:\n.ifndef NOMAN\n\tcd ${.CURDIR}/share/man && exec ${MAKE} makedb\n\tcd ${.CURDIR}/distrib/sets && exec ${MAKE} makedb\n.endif\n\n.ifdef DESTDIR\nbuild:\n\t@echo cannot build with DESTDIR set\n\t@false\n.else\nbuild:\n\tumask ${WOBJUMASK}; exec ${MAKE} do-build\n\ndo-build:\n.ifdef GLOBAL_AUTOCONF_CACHE\n\t${INSTALL} -c -o ${BUILDUSER} -g ${WOBJGROUP} -m 664 /dev/null \\\n\t    ${GLOBAL_AUTOCONF_CACHE}\n.endif\n\t@if [[ `id -u` -ne 0 ]]; then \\\n\t\techo $@ must be called by root >&2; \\\n\t\tfalse; \\\n\tfi\n\tcd ${.CURDIR}/share/mk && exec ${MAKE} install\n\texec ${MAKE} cleandir\n\texec ${MAKE} includes\n\tcd ${.CURDIR}/lib && \\\n\t    su ${BUILDUSER} -c 'exec ${MAKE}' && \\\n\t    NOMAN=1 exec ${MAKE} install\n\t/sbin/ldconfig -R\n\tcd ${.CURDIR}/gnu/lib && \\\n\t    su ${BUILDUSER} -c 'exec ${MAKE}' && \\\n\t    NOMAN=1 exec ${MAKE} install\n\t/sbin/ldconfig -R\n\tsu ${BUILDUSER} -c 'exec ${MAKE}' && \\\n\t    exec ${MAKE} install\n\t/bin/sh ${.CURDIR}/distrib/sets/makeetcset ${.CURDIR} ${MAKE}\n.endif\n\nCROSS_TARGETS=cross-env cross-dirs cross-obj cross-includes cross-binutils \\\n\tcross-gcc cross-tools cross-lib cross-bin cross-etc-root-var \\\n\tcross-depend cross-clean cross-cleandir\n\n.if !defined(TARGET)\n${CROSS_TARGETS}:\n\t@echo \"TARGET must be set for $@\"; exit 1\n.else\n. include \"Makefile.cross\"\n.endif # defined(TARGET)\n\n.PHONY: ${CROSS_TARGETS} \\\n\tbuild regression-tests includes beforeinstall afterinstall \\\n\tall do-build\n\n.include <bsd.subdir.mk>\n"
        },
        {
          "name": "Makefile.cross",
          "type": "blob",
          "size": 15.7255859375,
          "content": "# $OpenBSD: Makefile.cross,v 1.111 2021/05/03 00:04:31 drahn Exp $\n\ncross-tools:\tcross-includes cross-binutils cross-gcc cross-lib\ncross-distrib:\tcross-tools cross-bin cross-share cross-sys cross-etc-root-var\n# cross-gnu \\\n\n# Have to compute TARGET_ARCH directly in the Makefile, for .if tests involving\n# this variable to work.\n.if\t(${TARGET} == \"arm64\")\nTARGET_ARCH=\taarch64\n.elif\t(${TARGET} == \"armv7\")\nTARGET_ARCH=\tarm\n.elif\t(${TARGET} == \"luna88k\")\nTARGET_ARCH=\tm88k\n.elif\t(${TARGET} == \"octeon\")\nTARGET_ARCH=\tmips64\n.elif\t(${TARGET} == \"loongson\")\nTARGET_ARCH=\tmips64el\nTARGET_CPU=\tmips64\n.elif\t(${TARGET} == \"macppc\")\nTARGET_ARCH=\tpowerpc\n.elif\t(${TARGET} == \"landisk\")\nTARGET_ARCH=\tsh\n.else\nTARGET_ARCH=\t${TARGET}\n.endif\nTARGET_CPU?=\t${TARGET_ARCH}\n\n# List of LP64 archs\n# XXX move to bsd.*.mk?\nLP64_ARCH = aarch64 amd64 alpha mips64 mips64el riscv64 sparc64 powerpc64\n\nTARGET_IS_LP64 =\nMACHINE_IS_LP64 =\n.for _ in ${LP64_ARCH}\n. if !empty(TARGET_ARCH:M$_)\n    TARGET_IS_LP64 = yes\n. endif\n. if !empty(MACHINE_ARCH:M$_)\n    MACHINE_IS_LP64 = yes\n. endif\n.endfor\n\n#CROSSCPPFLAGS?=\t-nostdinc -I${CROSSDIR}/usr/include\n#CROSSLDFLAGS?=\t-nostdlib -L${CROSSDIR}/usr/lib -static\nCROSSCFLAGS?=\t${CROSSCPPFLAGS} -O2 ${PIPE} ${DEBUG}\nCROSSCXXFLAGS?=\t${CROSSCPPFLAGS}\n#LDSTATIC?=\t-static\n\nCROSSDIR=\t${DESTDIR}/usr/cross/${TARGET}\nCROSSENV=\tAR=${CROSSDIR}/usr/${TARGET_CANON}/bin/ar \\\n\t\tAS=${CROSSDIR}/usr/${TARGET_CANON}/bin/as \\\n\t\tCC=${CROSSDIR}/usr/${TARGET_CANON}/bin/cc \\\n\t\tCPP=${CROSSDIR}/usr/${TARGET_CANON}/bin/cpp \\\n\t\tCXX=${CROSSDIR}/usr/${TARGET_CANON}/bin/c++ \\\n\t\tLD=${CROSSDIR}/usr/${TARGET_CANON}/bin/ld \\\n\t\tOBJCOPY=${CROSSDIR}/usr/${TARGET_CANON}/bin/objcopy \\\n\t\tLORDER=/usr/bin/lorder RANLIB=${CROSSDIR}/usr/${TARGET_CANON}/bin/ranlib \\\n\t\tSTRIP=${CROSSDIR}/usr/${TARGET_CANON}/bin/strip \\\n\t\tHOSTCC=\\\"${CC}\\\" HOSTCXX=\\\"${CXX}\\\" NOMAN= \\\n\t\tHOSTCFLAGS=\\\"${CFLAGS}\\\" HOSTCXXFLAGS=\\\"${CXXFLAGS}\\\" \\\n\t\tHOSTLDFLAGS=\\\"${LDFLAGS}\\\" \\\n\t\tCFLAGS=\\\"${CROSSCFLAGS}\\\" CPPFLAGS=\\\"${CROSSCPPFLAGS}\\\" \\\n\t\tCXXFLAGS=\\\"${CROSSCXXFLAGS}\\\" \\\n\t\tLDFLAGS=\\\"${CROSSLDFLAGS}\\\" \\\n\t\tCROSSDIR=\\\"${CROSSDIR}\\\"\nCROSSADDPATH=:${CROSSDIR}/usr/${TARGET_CANON}/bin\nCROSSPATH=\t/usr/bin:/bin:/usr/sbin:/sbin${CROSSADDPATH}\nCROSSLANGS?=\tc c++\n\nTARGET_CANON=`cat ${CROSSDIR}/TARGET_CANON`\n\nCROSSDIRS=\t${CROSSDIR}/.dirs_done\nCROSSOBJ=\t${CROSSDIR}/.obj_done\nCROSSINCLUDES=\t${CROSSDIR}/.includes_done\nCROSSBINUTILS=\t${CROSSDIR}/.binutils_done\nCROSSGCC=\t${CROSSDIR}/.gcc_done\n#NO_CROSS=\tisakmpd keynote ssh\n\n.include <bsd.own.mk>\n\n.for _arch in ${TARGET_ARCH}\n.if !empty(GCC3_ARCH:M${_arch})\nCOMPILER_VERSION=gcc3\nBUILD_CLANG=no\nCC=gcc\nCXX=g++\n.elif !empty(GCC4_ARCH:M${_arch})\nCOMPILER_VERSION=gcc4\nBUILD_CLANG=no\nCC=gcc\nCXX=g++\n.elif !empty(CLANG_ARCH:M${_arch})\nCOMPILER_VERSION=clang\nBUILD_CLANG=yes\nCC=clang\nCXX=clang++\n.endif\n\n.if !empty(LLD_ARCH:M${_arch})\nLINKER_VERSION=lld\n.else\nLINKER_VERSION=bfd\n.endif\n\n.if !empty(PIE_ARCH:M${_arch})\nNOPIE_FLAGS=-fno-pie\nNOPIE_LDFLAGS=-nopie\nPIE_DEFAULT=${DEFAULT_PIE_DEF}\n.else\nNOPIE_FLAGS=\nPIE_DEFAULT=\n.endif\n\nBINUTILS=\tar as gasp ld nm objcopy objdump ranlib readelf size \\\n\t\tstrings strip\nBINUTILS_DIR=gnu/usr.bin/binutils-2.17\n.endfor\n\n# no libcrypto.... these won't build\n#NO_CROSS+=\tdc passwd ppp tcpdump telnet ftp sasyncd vnconfig\n\t\t\n# explicit cross-compile\nNO_CROSS+=microcode\nNO_CROSS+=groff binutils binutils-2.17 perl texinfo gcc cvs\nNO_CROSS+=nsd\nNO_CROSS+=bind\nNO_CROSS+=unbound\n\ncross-dirs:\t${CROSSDIRS}\ncross-obj:\t${CROSSOBJ}\ncross-includes:\t${CROSSINCLUDES}\ncross-binutils:\t${CROSSBINUTILS}\ncross-gcc:\t${CROSSGCC}\n\ncross-env:\n\t@echo ${CROSSENV} MACHINE=${TARGET} \\\n\t    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \\\n\t    MACHINE_CPU=`cat ${CROSSDIR}/TARGET_CPU` \\\n\t    BSDOBJDIR=${CROSSDIR}/usr/obj \\\n\t    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET}\n\n${CROSSDIRS}:\n.if ${TARGET_ARCH} == \"arm\" && ${MACHINE_IS_LP64} == \"yes\"\n\t# this config is allowed\n.elif ${TARGET_ARCH} == \"powerpc\" && ${MACHINE_IS_LP64} == \"yes\"\n\t# this config is allowed\n.elif ${TARGET_IS_LP64} != ${MACHINE_IS_LP64}\n\t@echo \"host and target have different size longs\"\n\t@echo \"cross compiler generates bad code; aborting\"; exit 1\n.endif\n\t@-mkdir -p ${CROSSDIR}\n\t@echo ${TARGET_ARCH} > ${CROSSDIR}/TARGET_ARCH\n\t@echo TARGET_ARCH is `cat ${CROSSDIR}/TARGET_ARCH`\n\t@echo ${TARGET_CPU} > ${CROSSDIR}/TARGET_CPU\n\t@echo TARGET_CPU is `cat ${CROSSDIR}/TARGET_CPU`\n\t@eval `grep '^osr=' sys/conf/newvers.sh`; \\\n\t   echo ${TARGET_ARCH}-unknown-openbsd$$osr > \\\n\t   ${CROSSDIR}/TARGET_CANON\n\t@-mkdir -p ${CROSSDIR}\n\t@-mkdir -p ${CROSSDIR}/usr/${TARGET_CANON}\n\t@ln -sf ${CROSSDIR}/usr/include \\\n\t    ${CROSSDIR}/usr/${TARGET_CANON}/include\n\t@ln -sf ${CROSSDIR}/usr/lib \\\n\t    ${CROSSDIR}/usr/${TARGET_CANON}/lib\n\t@-mkdir -p ${CROSSDIR}/usr/${TARGET_CANON}/bin\n\t@(cd ${.CURDIR}/etc && DESTDIR=${CROSSDIR} ${MAKE} distrib-dirs)\n\t@touch ${CROSSDIRS}\n\n${CROSSOBJ}:\t${CROSSDIRS}\n\t@-mkdir -p ${CROSSDIR}/usr/obj\n\t@-chgrp ${WOBJGROUP} ${CROSSDIR}/usr/obj\n\t@-chmod g+w ${CROSSDIR}/usr/obj\n\t@(cd ${.CURDIR} && \\\n\t    BSDOBJDIR=${CROSSDIR}/usr/obj \\\n\t    COMPILER_VERSION=${COMPILER_VERSION} \\\n\t    MACHINE=${TARGET} \\\n\t    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \\\n\t    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    ${MAKE} obj)\n\t@touch ${CROSSOBJ}\n\n${CROSSINCLUDES}:\t${CROSSOBJ}\n\t@-mkdir -p ${CROSSDIR}/usr/include\n\t@(cd ${.CURDIR}/include && \\\n\t    COMPILER_VERSION=${COMPILER_VERSION} \\\n\t    MACHINE=${TARGET} \\\n\t    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \\\n\t    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \\\n\t    ${MAKE} prereq && \\\n\t    COMPILER_VERSION=${COMPILER_VERSION} \\\n\t    MACHINE=${TARGET} \\\n\t    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \\\n\t    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \\\n\t    ${MAKE} DESTDIR=${CROSSDIR} includes)\n\t@touch ${CROSSINCLUDES}\n\n${CROSSBINUTILS}:\t${CROSSINCLUDES}\n\t(cd ${.CURDIR}/${BINUTILS_DIR}; \\\n\t    env CROSSDIR=${CROSSDIR} \\\n\t    CC=${CC} CXX=${CXX} \\\n\t    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    PIE_DEFAULT=${PIE_DEFAULT} \\\n\t    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \\\n\t    ${MAKE} -f Makefile.bsd-wrapper all && \\\n\t    env CROSSDIR=${CROSSDIR} DESTDIR=${CROSSDIR} \\\n\t    COMPILER_VERSION=${COMPILER_VERSION} \\\n\t    LINKER_VERSION=${LINKER_VERSION} \\\n\t    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    PIE_DEFAULT=${PIE_DEFAULT} \\\n\t    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \\\n\t    ${MAKE} -f Makefile.bsd-wrapper install)\n\t@for cmd in ${BINUTILS}; do \\\n\t if [ -e ${CROSSDIR}/usr/bin/${TARGET_CANON}-$$cmd ] ; then \\\n\t    cp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-$$cmd \\\n\t        ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-$$cmd ; \\\n\t    ln -sf ${TARGET_CANON}-$$cmd \\\n\t\t${CROSSDIR}/usr/${TARGET_CANON}/bin/$$cmd ;\\\n\t   if [ -e ${CROSSDIR}/usr/bin/$$cmd ] ; then \\\n\t    rm -f ${CROSSDIR}/usr/bin/$$cmd ;\\\n\t   fi ;\\\n\t elif [ -e ${CROSSDIR}/usr/bin/$$cmd ] ; then \\\n\t    cp -f ${CROSSDIR}/usr/bin/$$cmd \\\n\t        ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-$$cmd ; \\\n\t    ln -sf ${TARGET_CANON}-$$cmd \\\n\t\t${CROSSDIR}/usr/${TARGET_CANON}/bin/$$cmd ;\\\n\t    mv ${CROSSDIR}/usr/bin/$$cmd \\\n\t\t${CROSSDIR}/usr/bin/${TARGET_CANON}-$$cmd ;\\\n\t fi ;\\\n\tdone\n\t@touch ${CROSSBINUTILS}\n\n\n${CROSSGCC}:\t\t${CROSSBINUTILS}\n.if ${COMPILER_VERSION:L} == \"clang\"\n\t(cd ${.CURDIR}/gnu/usr.bin/clang; \\\n\t    CC=${CC} CXX=${CXX} \\\n\t    BSDOBJDIR=${CROSSDIR}/usr/obj \\\n\t    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    MACHINE_ARCH=${TARGET_ARCH} \\\n\t    ${MAKE} all)\n\t(cd ${.CURDIR}/gnu/usr.bin/clang; \\\n\t    DESTDIR=${CROSSDIR} \\\n\t    BSDOBJDIR=${CROSSDIR}/usr/obj \\\n\t    LINKER_VERSION=${LINKER_VERSION} \\\n\t    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    MACHINE_ARCH=${TARGET_ARCH} \\\n\t    ${MAKE} install)\n\t(cd ${.CURDIR}/gnu/usr.bin/clang; \\\n\t    BSDOBJDIR=${CROSSDIR}/usr/obj \\\n\t    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    MACHINE_ARCH=${TARGET_ARCH} \\\n\t    ${MAKE} clean)\n\tmv ${CROSSDIR}/usr/bin/clang ${CROSSDIR}/usr/bin/${TARGET_CANON}-clang\n\tmv ${CROSSDIR}/usr/bin/clang++ ${CROSSDIR}/usr/bin/${TARGET_CANON}-clang++\n\tcp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-clang ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-clang\n\tln -sf ${TARGET_CANON}-cc ${CROSSDIR}/usr/${TARGET_CANON}/bin/cc\n\tln -sf ${TARGET_CANON}-c++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/c++\n\t@if [ -e ${CROSSDIR}/usr/bin/ld ]; then \\\n\t\tmv ${CROSSDIR}/usr/bin/ld ${CROSSDIR}/usr/bin/${TARGET_CANON}-ld ;\\\n\t\tcp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-ld \\\n\t\t    ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-ld ;\\\n\t\tln -sf ${TARGET_CANON}-ld ${CROSSDIR}/usr/${TARGET_CANON}/bin/ld ;\\\n\tfi\n\techo \"#!/bin/sh\\n${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-clang --sysroot ${CROSSDIR} \\\"$$\"\"@\\\"\" > ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc; \\\n\tchmod +x ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc;\n\techo \"#!/bin/sh\\n${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-clang --driver-mode=g++ --sysroot ${CROSSDIR} \\\"$$\"\"@\\\"\" > ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-c++; \\\n\tchmod +x ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-c++;\n.elif ${COMPILER_VERSION:L} == \"gcc3\"\n\t(cd ${.CURDIR}/gnu/usr.bin/gcc; \\\n\t    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \\\n\t    CROSSDIR=${CROSSDIR} \\\n\t    CC=${CC} CXX=${CXX} \\\n\t    ${MAKE} -f Makefile.bsd-wrapper all && \\\n\t    env CROSSDIR=${CROSSDIR} DESTDIR=${CROSSDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    PATH=${CROSSPATH} ${MAKE} -f Makefile.bsd-wrapper install)\n\tcp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-g++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-c++\n\tcp -f ${CROSSDIR}/usr/bin/gcc ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc\n\tcp -f ${CROSSDIR}/usr/libexec/cpp ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-libexeccpp\n\trm -f ${CROSSDIR}/usr/bin/gcc  ${CROSSDIR}/usr/bin/cc ${CROSSDIR}/usr/libexec/cpp\n\tln -sf ${TARGET_CANON}-cc ${CROSSDIR}/usr/${TARGET_CANON}/bin/cc\n\tln -sf ${TARGET_CANON}-c++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/c++\n\trm -f ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp\n\tsed -e 's#/usr/libexec/cpp#${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-libexeccpp#' \\\n\t    -e 's/@GNUC@/-D__GNUC__/' \\\n\t    -e 's#/usr/include#${CROSSDIR}/usr/include#' \\\n\t    -e 's/@dollaropt@//' \\\n\t    ${.CURDIR}/usr.bin/cpp/cpp.sh > ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp\n\tchmod ${BINMODE} ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp\n\tchown ${BINOWN}:${BINGRP} ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp\n\tln -sf ${TARGET_CANON}-cpp ${CROSSDIR}/usr/${TARGET_CANON}/bin/cpp\n.else\n\t(cd ${.CURDIR}/gnu/usr.bin/cc; \\\n\t    env CROSSDIR=${CROSSDIR} \\\n\t    COMPILER_VERSION=${COMPILER_VERSION} \\\n\t    CC=${CC} CXX=${CXX} \\\n\t    PIE_DEFAULT=${PIE_DEFAULT} \\\n\t    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \\\n\t    MACHINE=${TARGET} \\\n\t    ${MAKE} all)\n\t(cd ${.CURDIR}/gnu/usr.bin/cc; \\\n\t    env CROSSDIR=${CROSSDIR} DESTDIR=${CROSSDIR} \\\n\t    COMPILER_VERSION=${COMPILER_VERSION} \\\n\t    PIE_DEFAULT=${PIE_DEFAULT} \\\n\t    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \\\n\t    MACHINE=${TARGET} \\\n\t    PATH=${CROSSPATH} ${MAKE} install)\n\tcp -f ${CROSSDIR}/usr/bin/g++  ${CROSSDIR}/usr/bin/${TARGET_CANON}-g++\n\tcp -f ${CROSSDIR}/usr/bin/${TARGET_CANON}-g++ ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-c++\n\tcp -f ${CROSSDIR}/usr/libexec/cpp ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-libexeccpp\n\tcp -f ${CROSSDIR}/usr/bin/gcc ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc\n\tln -sf ${TARGET_CANON}-cc ${CROSSDIR}/usr/${TARGET_CANON}/bin/cc\n\n\tcp -f ${CROSSDIR}/usr/bin/gcc ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cc\n\trm -f ${CROSSDIR}/usr/bin/gcc  ${CROSSDIR}/usr/bin/g++  ${CROSSDIR}/usr/bin/cc ${CROSSDIR}/usr/libexec/cpp\n\t# fix links\n\trm -f ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp\n\tsed -e 's#/usr/libexec/cpp#${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-libexeccpp#' \\\n\t    -e 's/@GNUC@//' \\\n\t    -e 's#/usr/include#${CROSSDIR}/usr/include#' \\\n\t    -e 's/@dollaropt@//' \\\n\t    ${.CURDIR}/usr.bin/cpp/cpp.sh > ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp\n\tchmod ${BINMODE} ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp\n\tchown ${BINOWN}:${BINGRP} ${CROSSDIR}/usr/${TARGET_CANON}/bin/${TARGET_CANON}-cpp\n\tln -sf ${TARGET_CANON}-cpp ${CROSSDIR}/usr/${TARGET_CANON}/bin/cpp\n.endif\n\t@touch ${CROSSGCC}\n\n# XXX MAKEOBJDIR maybe should be obj.${TARGET} here, revisit later\ncross-lib:\t${CROSSGCC}\n\tMACHINE=${TARGET} \\\n\t    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \\\n\t    BSDOBJDIR=${CROSSDIR}/usr/obj \\\n\t    BUILD_CLANG=${BUILD_CLANG}; \\\n\texport MACHINE MACHINE_ARCH MACHINE_CPU BSDOBJDIR BUILD_CLANG; \\\n\t(cd ${.CURDIR}/gnu/lib/libcompiler_rt; \\\n\t    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t\t${MAKE} all ;\\\n\t    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} DESTDIR=${CROSSDIR} \\\n\t\t${MAKE} install); \\\n\t(cd ${.CURDIR}/lib; \\\n\t    for lib in csu libc; do \\\n\t    (cd $$lib; \\\n\t        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t\t    ${MAKE} all ;\\\n\t        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} DESTDIR=${CROSSDIR} \\\n\t\t    ${MAKE} install); \\\n\t    done; \\\n\t    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t        SKIPDIR=\\\"${NO_CROSS}\\\" \\\n\t        ${MAKE} all ; \\\n\t    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} DESTDIR=${CROSSDIR} \\\n\t        SKIPDIR=\\\"${NO_CROSS}\\\" \\\n\t        ${MAKE} install)\n\ncross-bin:\t${CROSSOBJ}\n\tMACHINE=${TARGET} \\\n\t    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \\\n\texport MACHINE MACHINE_ARCH MACHINE_CPU; \\\n\tfor i in libexec bin sbin usr.bin usr.sbin; do \\\n\t(cd ${.CURDIR}/$$i; \\\n\t    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t        SKIPDIR=\\\"${BINUTILS} ${NO_CROSS}\\\" \\\n\t        ${MAKE} all ; \\\n\t    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} DESTDIR=${CROSSDIR} \\\n\t        SKIPDIR=\\\"${BINUTILS} ${NO_CROSS}\\\" \\\n\t        ${MAKE} install); \\\n\tdone\n\ncross-gnu:\t${CROSSOBJ}\n\tMACHINE=${TARGET} \\\n\t    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \\\n\texport MACHINE MACHINE_ARCH MACHINE_CPU; \\\n\tfor i in gnu/lib gnu/usr.sbin gnu/usr.bin ; do \\\n\t(cd ${.CURDIR}/$$i; \\\n\t    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t        SKIPDIR=\\\"${NO_CROSS}\\\" \\\n\t        ${MAKE} all ; \\\n\t    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} DESTDIR=${CROSSDIR} \\\n\t        SKIPDIR=\\\"${NO_CROSS}\\\" \\\n\t        ${MAKE} install); \\\n\tdone\n\ncross-share:   ${CROSSOBJ}\n\tMACHINE=${TARGET} \\\n\t    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \\\n\texport MACHINE MACHINE_ARCH MACHINE_CPU; \\\n\tfor i in share; do \\\n\t    (cd ${.CURDIR}/$$i; \\\n\t        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t\tSKIPDIR=\\\"${NO_CROSS}\\\" \\\n\t\tDESTDIR=${CROSSDIR} \\\n\t\t${MAKE} all install); \\\n\tdone\n\ncross-sys:   ${CROSSOBJ}\n\tMACHINE=${TARGET} \\\n\t    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \\\n\texport MACHINE MACHINE_ARCH MACHINE_CPU; \\\n\tfor i in sys; do \\\n\t    (cd ${.CURDIR}/$$i; \\\n\t        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t\tSKIPDIR=\\\"${NO_CROSS}\\\" \\\n\t\t${MAKE} all); \\\n\t    (cd ${.CURDIR}/$$i; \\\n\t        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t\tSKIPDIR=\\\"${NO_CROSS}\\\" \\\n\t\tDESTDIR=${CROSSDIR} \\\n\t\t${MAKE} install); \\\n\tdone\n\ncross-etc-root-var:\t${CROSSOBJ}\n\t(cd ${.CURDIR}/etc && \\\n\t    MACHINE=${TARGET} \\\n\t    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \\\n\t    DESTDIR=${CROSSDIR} \\\n\t    ${MAKE} distribution-etc-root-var)\n\ncross-clean:\n\t@(cd ${.CURDIR} && \\\n\t    BSDOBJDIR=${CROSSDIR}/usr/obj \\\n\t    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    SKIPDIR=\"${NO_CROSS}\" \\\n\t    ${MAKE} clean)\n\ncross-cleandir:\n\t@(cd ${.CURDIR} && \\\n\t    BSDOBJDIR=${CROSSDIR}/usr/obj \\\n\t    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \\\n\t    SKIPDIR=\"${NO_CROSS}\" \\\n\t    ${MAKE} cleandir)\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "distrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "games",
          "type": "tree",
          "content": null
        },
        {
          "name": "gnu",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libexec",
          "type": "tree",
          "content": null
        },
        {
          "name": "regress",
          "type": "tree",
          "content": null
        },
        {
          "name": "sbin",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "usr.bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "usr.sbin",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}