{
  "metadata": {
    "timestamp": 1736710037985,
    "page": 649,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "open-quantum-safe/liboqs",
      "stars": 2010,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": ".astylerc",
          "type": "blob",
          "size": 0.3798828125,
          "content": "# find src tests .CMake -name '*.[ch]' | grep -v '/external/' | grep -v 'kem.*/pqclean_' | grep -v 'sig.*/pqclean_' | xargs astyle --options=.astylerc\n--style=google\n--indent=tab\n#--indent-preproc-define\n#--indent-preproc-cond\n--pad-oper\n--pad-comma\n--pad-header\n#--unpad-paren\n--align-pointer=name\n--add-braces\n--convert-tabs\n--mode=c\n# disable backup files\n--suffix=none\n--lineend=linux\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1474609375,
          "content": "# see https://mirrors.edge.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n* text=auto whitespace=trailing-space\n\n*.png binary\n*.jpe?g binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4169921875,
          "content": "# Text editors and IDES\n.idea\ntags\n*.swp\n*~\n.tags*\n\n# CMake & testing\n/build*\n/tmp*\n\n# MSVC\n.vs\n/out*\n\n# CLion\n/cmake-build*\n\n# Visual Studio Code\n.vscode\n\n# Jetbrains IDEs\n.idea\n\n# MacOS\n.DS_Store\n\n# Generated by copy_from_upstream.py\n# and update_pqclean_alg_docs.py\nscripts/copy_from_upstream/repos\nscripts/copy_from_upstream/verify_from_upstream\n\n# Misc\n__pycache__\n.pytest_cache\n.cache\n.CMake/a.out\ncompile_commands.json\n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.08203125,
          "content": "language: c\nbefore_script:\n  - sudo apt update && sudo apt -y install astyle cmake gcc ninja-build libssl-dev python3-pytest python3-pytest-xdist unzip xsltproc doxygen graphviz valgrind\njobs:\n  include:\n    - arch: ppc64le         # The IBM Power LXD container based build for OSS only\n      os: linux             # required for arch different than amd64\n      dist: focal           # or bionic | xenial with xenial as default\n      compiler: gcc\n      if: NOT branch =~ /^ghactionsonly-/\n      script:\n        - mkdir build && cd build && cmake -GNinja -DOQS_ENABLE_SIG_STFL_LMS=ON -DOQS_ENABLE_SIG_STFL_XMSS=ON -DOQS_HAZARDOUS_EXPERIMENTAL_ENABLE_STFL_SIG_KEY_SIG_GEN=ON .. && cmake -LA -N .. && ninja\n        - cd build & ninja run_tests\n    - arch: s390x\n      os: linux\n      dist: focal\n      compiler: gcc\n      if: NOT branch =~ /^ghactionsonly-/\n      script:\n        - mkdir build && cd build && cmake -GNinja -DOQS_ENABLE_SIG_STFL_LMS=ON -DOQS_ENABLE_SIG_STFL_XMSS=ON -DOQS_HAZARDOUS_EXPERIMENTAL_ENABLE_STFL_SIG_KEY_SIG_GEN=ON .. && cmake -LA -N .. && ninja\n        - cd build & ninja run_tests\n"
        },
        {
          "name": "CI.md",
          "type": "blob",
          "size": 5.1650390625,
          "content": "# Continuous Integration (CI)\n\nThis document aims to provide a accessible yet comprehensive overview of the liboqs CI setup.\n\n## GitHub Actions\n\nliboqs relies on GitHub Actions for almost all of its CI and makes extensive use of [reusable workflows](https://docs.github.com/en/actions/sharing-automations/reusing-workflows).\nAll workflow files are located in the `.github/workflows` subdirectory.\n\n### Caller workflows\n\nThese workflows are triggered by GitHub events (for example, a pull request or a release).\nThey implement the logic dictating which tests should run on which events.\n\n#### <a name=\"push.yml\"></a> Push workflow (`push.yml`)\n\nThis workflow is triggered by pushes to non-`main` branches.\nIt calls only [basic checks](#basic.yml) unless one of the following strings is included in the commit message:\n- \"[full tests]\": calls [all platform tests](#platforms.yml).\n- \"[extended tests]\": calls the [extended tests](#extended.yml).\n- \"[trigger downstream]\": calls the [downstream release tests](#downstream-release.yml).\n\nTo trigger multiple test suites, include multiple trigger strings in the commit message.\nFor example, \"[full tests] [trigger downstream]\" will trigger both the platform tests and the downstream release tests.\n\n#### <a name=\"pr.yml\"></a> Pull request workflow (`pr.yml`)\n\nThis workflow runs on pull requests.\nIt calls [basic checks](#basic.yml), [platform tests](#platforms.yml) and [scorecard analysis](#scorecard.yml).\n\n#### <a name=\"commit-to-main.yml\"></a> Commit-to-main workflow (`commit-to-main.yml`)\n\nThis workflow runs on pushes to the `main` branch (typically done automatically when a pull request is merged).\nIt calls [platform tests](#platforms.yml), [scorecard analysis](#scorecard.yml), and [basic downstream tests](#downstream-basic.yml).\n\n#### <a name=\"weekly.yml\"></a> Weekly workflow (`weekly.yml`)\n\nThis workflow is triggered by a weekly schedule.\nIt calls [extended tests](#extended.yml) and [scorecard analysis](#scorecard.yml).\n\n#### <a name=\"release.yml\"></a> Release workflow (`release.yml`)\n\nThis workflow is triggered when a release (including a pre-release) is published on GitHub.\nIt calls [extended tests](#extended) and [downstream release tests](#downstream-release.yml).\n\n### Callable workflows\n\nThese workflows are not triggered directly by any GitHub event.\nThey are instead called by one of the [caller workflows](#caller-workflows).\nUsers with \"write\" permissions can also trigger them manually via the GitHub web UI or REST API.\n\n#### <a name=\"basic.yml\"></a> Basic checks (`basic.yml`)\n\nThis workflow runs a minimal set of tests that should pass before heavier tests are triggered.\n\n#### <a name=\"<platform>.yml\"></a> Individual platform tests (`<platform>.yml`)\n\nThese workflows contain tests for the individual [platforms supported by liboqs](PLATFORMS.md).\nCurrently, these include\n- `android.yml`,\n- `apple.yml`,\n- `macos.yml`,\n- `linux.yml`,\n- `windows.yml`, and\n- `zephyr.yml`.\n\nAll of these these are wrapped by [`platforms.yml`](#platforms.yml).\n\n#### <a name=\"platforms.yml\"></a> All platform tests (`platforms.yml`)\n\nThis workflow calls all of the [platform-specific tests](#<platform>.yml).\n\n#### <a name=\"extended.yml\"></a> Extended tests (`extended.yml`)\n\nThis workflow calls tests which are either resource intensive or rarely need to be triggered.\nCurrently, this includes constant-time testing with valgrind and the full suite of NIST Known Answer Tests.\n\n#### <a name=\"downstream-basic.yml\"></a> Basic downstream trigger (`downstream-basic.yml`)\n\nThis workflow triggers basic CI for a selection of projects that depend on `liboqs`.\nCurrently, these include\n- [`OQS OpenSSL3 provider`](https://github.com/open-quantum-safe/oqs-provider)\n- [`OQS-BoringSSL`](https://github.com/open-quantum-safe/boringssl)\n- [`OQS-OpenSSH`](https://github.com/open-quantum-safe/openssh)\n- [`OQS Demos`](https://github.com/open-quantum-safe/oqs-demos)\n- [`liboqs-cpp`](https://github.com/open-quantum-safe/liboqs-cpp)\n- [`liboqs-go`](https://github.com/open-quantum-safe/liboqs-go)\n- [`liboqs-python`](https://github.com/open-quantum-safe/liboqs-python)\n\nCallers must include `secrets: inherit` in order for the appropriate access tokens to be passed to this workflow.\n\n#### <a name=\"downstream-release.yml\"></a> Downstream release trigger (`downstream-release.yml`)\n\nThis workflow triggers release tests for a selection of projects that depend on `liboqs`.\nCurrently, this is only the [`OQS OpenSSL3 provider`](https://github.com/open-quantum-safe/oqs-provider).\nCallers must include `secrets: inherit` in order for the appropriate access tokens to be passed to this workflow.\n\n#### <a name=\"scorecard.yml\"></a> OpenSSF scorecard analysis (`scorecard.yml`)\n\nThis workflow runs the [OpenSSF scorecard](https://github.com/ossf/scorecard) tool.\nIt is additionally triggered automatically when branch protection rules are changed.\nCallers must include `secrets: inherit` in order for the appropriate access tokens to be passed to this workflow.\n\n## Travis CI\n\nIn the past, we used Travis CI to test on [some IBM platforms](PLATFORMS.md#tier-3-1) that are not supported by GitHub Actions.\nOur Travis builds are currently disabled pending resolution of [issue #1888](https://github.com/open-quantum-safe/liboqs/issues/1888).\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.2412109375,
          "content": "# SPDX-License-Identifier: MIT\n\ncmake_minimum_required (VERSION 3.15)\n# option() honors normal variables.\n# see: https://cmake.org/cmake/help/git-stage/policy/CMP0077.html\nif(POLICY CMP0077)\n    cmake_policy(SET CMP0077 NEW)\nendif()\n# Honor symbol visibility properties for all target types.\n# see: https://cmake.org/cmake/help/git-stage/policy/CMP0063.html\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\nif(POLICY CMP0066)\n    cmake_policy(SET CMP0066 NEW)\nendif()\nif(POLICY CMP0067)\n    cmake_policy(SET CMP0067 NEW)\nendif()\n\nproject(liboqs C ASM)\n\noption(OQS_DIST_BUILD \"Build distributable library with optimized code for several CPU microarchitectures. Enables run-time CPU feature detection.\" ON)\noption(OQS_BUILD_ONLY_LIB \"Build only liboqs and do not expose build targets for tests, documentation, and pretty-printing available.\" OFF)\nset(OQS_MINIMAL_BUILD \"\" CACHE STRING \"Only build specifically listed algorithms.\")\noption(OQS_LIBJADE_BUILD \"Enable formally verified implementation of supported algorithms from libjade.\" OFF)\noption(OQS_PERMIT_UNSUPPORTED_ARCHITECTURE \"Permit compilation on an an unsupported architecture.\" OFF)\noption(OQS_STRICT_WARNINGS \"Enable all compiler warnings.\" OFF)\noption(OQS_EMBEDDED_BUILD \"Compile liboqs for an Embedded environment without a full standard library.\" OFF)\n\n# Libfuzzer isn't supported on gcc\nif('${CMAKE_C_COMPILER_ID}' STREQUAL 'Clang')\n    option(OQS_BUILD_FUZZ_TESTS \"Build fuzz test suite\" OFF)\nendif()\n\n\nset(OQS_OPT_TARGET auto CACHE STRING \"The target microarchitecture for optimization.\")\n\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_C_STANDARD_REQUIRED ON)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nset(CMAKE_C_VISIBILITY_PRESET hidden)\nset(OQS_VERSION_MAJOR 0)\nset(OQS_VERSION_MINOR 12)\nset(OQS_VERSION_PATCH 1)\nset(OQS_VERSION_PRE_RELEASE \"-dev\")\nset(OQS_VERSION_TEXT \"${OQS_VERSION_MAJOR}.${OQS_VERSION_MINOR}.${OQS_VERSION_PATCH}${OQS_VERSION_PRE_RELEASE}\")\nset(OQS_COMPILE_BUILD_TARGET \"${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_HOST_SYSTEM}\")\nset(OQS_MINIMAL_GCC_VERSION \"7.1.0\")\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n# Determine the flags for fuzzing. Use OSS-Fuzz's configuration if available, otherwise fall back to defaults.\nif(DEFINED ENV{LIB_FUZZING_ENGINE})\n    set(FUZZING_ENGINE $ENV{LIB_FUZZING_ENGINE})\n    set(FUZZING_COMPILE_FLAGS \"\")\n    set(FUZZING_LINK_FLAGS \"${FUZZING_ENGINE}\")\nelse()\n    set(FUZZING_COMPILE_FLAGS \"-fsanitize=fuzzer,address\")\n    set(FUZZING_LINK_FLAGS \"-fsanitize=fuzzer,address\")\nendif()\n\n# heuristic check to see whether we're running on a RaspberryPi\nif(EXISTS \"/opt/vc/include/bcm_host.h\")\n\tadd_definitions( -DOQS_USE_RASPBERRY_PI )\nendif()\n\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64|amd64|AMD64\")\n    set(ARCH \"x86_64\")\n    set(ARCH_X86_64 ON)\n    if(${OQS_DIST_BUILD})\n        set(OQS_DIST_X86_64_BUILD ON)\n    endif()\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"x86|i586|i686\")\n    set(ARCH \"i586\")\n    set(ARCH_X86 ON)\n    if(${OQS_DIST_BUILD})\n        set(OQS_DIST_X86_BUILD ON)\n    endif()\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"aarch64|arm64|arm64v8\")\n    set(ARCH \"arm64v8\")\n    set(ARCH_ARM64v8 ON)\n    if(${OQS_DIST_BUILD})\n        set(OQS_DIST_ARM64_V8_BUILD ON)\n    endif()\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"armel|armhf|armv7|arm32v7\")\n    set(ARCH \"arm32v7\")\n    set(ARCH_ARM32v7 ON)\n    if(${OQS_DIST_BUILD})\n        set(OQS_DIST_ARM32_V7_BUILD ON)\n    endif()\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"ppc64le|powerpc64le\")\n    set(ARCH \"ppc64le\")\n    set(ARCH_PPC64LE ON)\n    if(${OQS_DIST_BUILD})\n        set(OQS_DIST_PPC64LE_BUILD ON)\n    endif()\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"(ppc64|powerpc64)\")\n    message(WARNING \"There is currently no CI for: \" ${CMAKE_SYSTEM_PROCESSOR})\n    set(ARCH \"ppc64\")\n    set(ARCH_PPC64 ON)\n    if(${OQS_DIST_BUILD})\n        set(OQS_DIST_PPC64_BUILD ON)\n    endif()\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"(ppc|powerpc)\")\n    message(WARNING \"There is currently no CI for: \" ${CMAKE_SYSTEM_PROCESSOR})\n    # CMake uses uname to derive CMAKE_SYSTEM_PROCESSOR value, so on Darwin\n    # the value is identical for ppc and ppc64. To have the right build arch\n    # in 64-bit case, we use CMAKE_OSX_ARCHITECTURES.\n    if(APPLE AND CMAKE_OSX_ARCHITECTURES STREQUAL \"ppc64\")\n        set(ARCH \"ppc64\")\n        set(ARCH_PPC64 ON)\n        if(${OQS_DIST_BUILD})\n            set(OQS_DIST_PPC64_BUILD ON)\n        endif()\n    else()\n        set(ARCH \"ppc\")\n        set(ARCH_PPC ON)\n        if(${OQS_DIST_BUILD})\n            set(OQS_DIST_PPC_BUILD ON)\n        endif()\n    endif()\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"s390x\")\n    set(ARCH \"s390x\")\n    set(ARCH_S390X ON)\n    if(${OQS_DIST_BUILD})\n        set(OQS_DIST_S390X_BUILD ON)\n    endif()\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"riscv\")\n    set(ARCH \"riscv\")\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"loongarch64\")\n    set(ARCH \"loongarch64\")\n    set(ARCH_LOONGARCH64 ON)\n    if(${OQS_DIST_BUILD})\n        set(OQS_DIST_LOONGARCH64_BUILD ON)\n    endif()\nelseif(OQS_PERMIT_UNSUPPORTED_ARCHITECTURE)\n    message(WARNING \"Unknown or unsupported processor: \" ${CMAKE_SYSTEM_PROCESSOR})\n    message(WARNING \"Compilation on an unsupported processor should only be used for testing, as it may result an insecure configuration, for example due to variable-time instructions leaking secret information.\")\nelse()\n    message(FATAL_ERROR \"Unknown or unsupported processor: \" ${CMAKE_SYSTEM_PROCESSOR} \". Override by setting OQS_PERMIT_UNSUPPORTED_ARCHITECTURE=ON\")\nendif()\n\nif (NOT ((CMAKE_SYSTEM_NAME MATCHES \"Linux|Darwin\") AND (ARCH_X86_64 STREQUAL \"ON\")) AND (OQS_LIBJADE_BUILD STREQUAL \"ON\"))\n    message(FATAL_ERROR \"Building liboqs with libjade implementations from libjade is only supported on Linux and Darwin on x86_64.\")\nendif()\n\n# intentionally don't switch to variables to avoid --warn-uninitialized report\nif(OQS_USE_CPU_EXTENSIONS)\n    message(FATAL_ERROR \"OQS_USE_CPU_EXTENSIONS is deprecated\")\nendif()\n\n# intentionally don't switch to variables to avoid --warn-uninitialized report\nif(OQS_PORTABLE_BUILD)\n    message(FATAL_ERROR \"OQS_PORTABLE_BUILD is deprecated\")\nendif()\n\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\" OR CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n    set(OQS_DEBUG_BUILD ON)\nelse()\n    set(OQS_DEBUG_BUILD OFF)\nendif()\n\noption(OQS_SPEED_USE_ARM_PMU \"Use ARM Performance Monitor Unit during benchmarking\" OFF)\n\nif(WIN32 AND NOT (MINGW OR MSYS OR CYGWIN))\n    set(CMAKE_GENERATOR_CC cl)\nendif()\n\ninclude(.CMake/compiler_opts.cmake)\ninclude(.CMake/alg_support.cmake)\n\nif(${OQS_USE_OPENSSL})\n    if(NOT DEFINED OPENSSL_ROOT_DIR)\n        if(${CMAKE_HOST_SYSTEM_NAME} STREQUAL \"Darwin\")\n            if(EXISTS \"/usr/local/opt/openssl@1.1\")\n                set(OPENSSL_ROOT_DIR \"/usr/local/opt/openssl@1.1\")\n            elseif(EXISTS \"/opt/homebrew/opt/openssl@1.1\")\n                set(OPENSSL_ROOT_DIR \"/opt/homebrew/opt/openssl@1.1\")\n            endif()\n        endif()\n    endif()\n    find_package(OpenSSL 1.1.1 REQUIRED)\n\n    if(OQS_DLOPEN_OPENSSL)\n      find_program(OBJDUMP objdump)\n      if(NOT OBJDUMP)\n\tmessage(FATAL_ERROR \"objdump not found. Please install it from binutils.\")\n      endif()\n      execute_process(\n\tCOMMAND ${OBJDUMP} -p ${OPENSSL_CRYPTO_LIBRARY}\n\tCOMMAND sed -n \"s/[ \t]\\\\{1,\\\\}SONAME[ \t]\\\\{1,\\\\}//p\"\n\tOUTPUT_VARIABLE OQS_OPENSSL_CRYPTO_SONAME\n\tOUTPUT_STRIP_TRAILING_WHITESPACE\n\tCOMMAND_ERROR_IS_FATAL ANY)\n      message(STATUS \"OpenSSL dlopen SONAME: \" ${OQS_OPENSSL_CRYPTO_SONAME})\n    endif()\nendif()\n\nset(PUBLIC_HEADERS ${PROJECT_SOURCE_DIR}/src/oqs.h\n                   ${PROJECT_SOURCE_DIR}/src/common/aes/aes_ops.h\n                   ${PROJECT_SOURCE_DIR}/src/common/common.h\n                   ${PROJECT_SOURCE_DIR}/src/common/rand/rand.h\n                   ${PROJECT_SOURCE_DIR}/src/common/sha2/sha2_ops.h\n                   ${PROJECT_SOURCE_DIR}/src/common/sha3/sha3_ops.h\n                   ${PROJECT_SOURCE_DIR}/src/common/sha3/sha3x4_ops.h\n                   ${PROJECT_SOURCE_DIR}/src/kem/kem.h\n                   ${PROJECT_SOURCE_DIR}/src/sig/sig.h\n                   ${PROJECT_SOURCE_DIR}/src/sig_stfl/sig_stfl.h)\n\nset(INTERNAL_HEADERS ${PROJECT_SOURCE_DIR}/src/common/aes/aes.h\n                     ${PROJECT_SOURCE_DIR}/src/common/rand/rand_nist.h\n                     ${PROJECT_SOURCE_DIR}/src/common/sha2/sha2.h\n                     ${PROJECT_SOURCE_DIR}/src/common/sha3/sha3.h\n                     ${PROJECT_SOURCE_DIR}/src/common/sha3/sha3x4.h)\n\nif(${OQS_ENABLE_KEM_BIKE})\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/kem/bike/kem_bike.h)\nendif()\nif(${OQS_ENABLE_KEM_FRODOKEM})\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/kem/frodokem/kem_frodokem.h)\nendif()\nif(OQS_ENABLE_KEM_NTRUPRIME)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/kem/ntruprime/kem_ntruprime.h)\nendif()\n##### OQS_COPY_FROM_UPSTREAM_FRAGMENT_INCLUDE_HEADERS_START\nif(OQS_ENABLE_KEM_CLASSIC_MCELIECE)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/kem/classic_mceliece/kem_classic_mceliece.h)\nendif()\nif(OQS_ENABLE_KEM_HQC)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/kem/hqc/kem_hqc.h)\nendif()\nif(OQS_ENABLE_KEM_KYBER)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/kem/kyber/kem_kyber.h)\nendif()\nif(OQS_ENABLE_KEM_ML_KEM)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/kem/ml_kem/kem_ml_kem.h)\nendif()\nif(OQS_ENABLE_SIG_DILITHIUM)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/sig/dilithium/sig_dilithium.h)\nendif()\nif(OQS_ENABLE_SIG_ML_DSA)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/sig/ml_dsa/sig_ml_dsa.h)\nendif()\nif(OQS_ENABLE_SIG_FALCON)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/sig/falcon/sig_falcon.h)\nendif()\nif(OQS_ENABLE_SIG_SPHINCS)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/sig/sphincs/sig_sphincs.h)\nendif()\nif(OQS_ENABLE_SIG_MAYO)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/sig/mayo/sig_mayo.h)\nendif()\nif(OQS_ENABLE_SIG_CROSS)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/sig/cross/sig_cross.h)\nendif()\n##### OQS_COPY_FROM_UPSTREAM_FRAGMENT_INCLUDE_HEADERS_END\nif(OQS_ENABLE_SIG_STFL_XMSS)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/sig_stfl/xmss/sig_stfl_xmss.h)\nendif()\nif(OQS_ENABLE_SIG_STFL_LMS)\n    set(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_SOURCE_DIR}/src/sig_stfl/lms/sig_stfl_lms.h)\nendif()\nexecute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${PROJECT_BINARY_DIR}/include/oqs)\nexecute_process(COMMAND ${CMAKE_COMMAND} -E copy ${PUBLIC_HEADERS} ${PROJECT_BINARY_DIR}/include/oqs)\nexecute_process(COMMAND ${CMAKE_COMMAND} -E copy ${INTERNAL_HEADERS} ${PROJECT_BINARY_DIR}/include/oqs)\nconfigure_file(src/oqsconfig.h.cmake ${PROJECT_BINARY_DIR}/include/oqs/oqsconfig.h)\nset(PUBLIC_HEADERS ${PUBLIC_HEADERS} ${PROJECT_BINARY_DIR}/include/oqs/oqsconfig.h)\n\ninclude_directories(${PROJECT_BINARY_DIR}/include)\nadd_subdirectory(src)\n\nif(NOT ${OQS_BUILD_ONLY_LIB})\n    add_subdirectory(tests)\n\n    if (NOT CYGWIN)\n      find_package(Doxygen)\n      if(DOXYGEN_FOUND)\n        set(DOXYFILE ${PROJECT_SOURCE_DIR}/docs/.Doxyfile)\n        add_custom_target(\n            gen_docs\n            COMMAND ${PROJECT_SOURCE_DIR}/scripts/run_doxygen.sh ${DOXYGEN_EXECUTABLE} ${DOXYFILE} ${PROJECT_BINARY_DIR}\n            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n            COMMENT \"Generate API documentation with Doxygen.\"\n            USES_TERMINAL)\n      endif()\n    endif()\n\n    if(NOT WIN32)\n        add_custom_target(\n            prettyprint\n            COMMAND find src tests -name '*.[ch]' | grep -v '/external/' | grep -v 'kem.*/pqclean_' | grep -v 'sig.*/pqclean_' | xargs astyle --options=.astylerc\n            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n            USES_TERMINAL)\n    endif()\nendif()\nset(CPACK_GENERATOR \"DEB\")\nset(CPACK_PACKAGE_VENDOR \"www.openquantumsafe.org\")\nset(CPACK_PACKAGE_VERSION ${OQS_VERSION_TEXT})\nif(${OQS_USE_OPENSSL})\n    set(CPACK_DEBIAN_PACKAGE_DEPENDS \"libc6, openssl\")\nelse()\n    set(CPACK_DEBIAN_PACKAGE_DEPENDS \"libc6\")\nendif()\n\nset(CPACK_DEBIAN_PACKAGE_MAINTAINER \"www.openquantumsafe.org\")\ninclude(CPack)\n\n# uninstall target\nif(NOT TARGET uninstall)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/.CMake/cmake_uninstall.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\n    IMMEDIATE @ONLY)\n\n  add_custom_target(uninstall\n    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\nendif()\n\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1064453125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nconduct@openquantumsafe.org.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONFIGURE.md",
          "type": "blob",
          "size": 15.353515625,
          "content": "Options for configuring liboqs builds\n=====================================\n\nThe following options can be passed to CMake before the build file generation process to customize the way liboqs is built. The syntax for doing so is: `cmake .. [ARGS] [-D<OPTION_NAME>=<OPTION_VALUE>]...`, where `<OPTON_NAME>` is:\n\n- [BUILD_SHARED_LIBS](#BUILD_SHARED_LIBS)\n- [CMAKE_BUILD_TYPE](#CMAKE_BUILD_TYPE)\n- [CMAKE_INSTALL_PREFIX](#CMAKE_INSTALL_PREFIX)\n- [OQS_ALGS_ENABLED](#OQS_ALGS_ENABLED)\n- [OQS_BUILD_ONLY_LIB](#OQS_BUILD_ONLY_LIB)\n- [OQS_ENABLE_KEM_ALG/OQS_ENABLE_SIG_ALG/OQS_ENABLE_SIG_STFL_ALG](#OQS_ENABLE_KEM_ALG/OQS_ENABLE_SIG_ALG/OQS_ENABLE_SIG_STFL_ALG)\n- [OQS_MINIMAL_BUILD](#OQS_MINIMAL_BUILD)\n- [OQS_DIST_BUILD](#OQS_DIST_BUILD)\n- [OQS_USE_CPUFEATURE_INSTRUCTIONS](#OQS_USE_CPUFEATURE_INSTRUCTIONS)\n- [OQS_USE_OPENSSL](#OQS_USE_OPENSSL)\n- [OQS_OPT_TARGET](#OQS_OPT_TARGET)\n- [OQS_SPEED_USE_ARM_PMU](#OQS_SPEED_USE_ARM_PMU)\n- [USE_SANITIZER](#USE_SANITIZER)\n- [OQS_ENABLE_TEST_CONSTANT_TIME](#OQS_ENABLE_TEST_CONSTANT_TIME)\n- [OQS_STRICT_WARNINGS](#OQS_STRICT_WARNINGS)\n- [OQS_EMBEDDED_BUILD](#OQS_EMBEDDED_BUILD)\n- [OQS_LIBJADE_BUILD](#OQS_LIBJADE_BUILD)\n- [OQS_ENABLE_LIBJADE_KEM_ALG/OQS_ENABLE_LIBJADE_SIG_ALG](#OQS_ENABLE_LIBJADE_KEM_ALG/OQS_ENABLE_LIBJADE_SIG_ALG)\n- [OQS_BUILD_FUZZ_TESTS](#OQS_BUILD_FUZZ_TESTS)\n\n## BUILD_SHARED_LIBS\n\nCan be set to `ON` or `OFF`. When `ON`, liboqs is built as a shared library.\n\n**Default**: `OFF`.\n\nThis means liboqs is built as a static library by default.\n\n## CMAKE_BUILD_TYPE\n\nCan be set to the following values:\n\n- `Debug`: This turns off all compiler optimizations and produces debugging information. When the compiler is Clang, the [USE_SANITIZER](#USE_SANITIZER) option can also be specified to enable a Clang sanitizer. **This value only has effect when the compiler is GCC or Clang**\n\n- `Release`: This compiles code at the `O3` optimization level, and sets other compiler flags that reduce the size of the binary.\n\n**Default**: `Release`.\n\n## CMAKE_INSTALL_PREFIX\n\nSee the [CMake documentation](https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX.html).\n\n## OQS_ENABLE_KEM_ALG/OQS_ENABLE_SIG_ALG/OQS_ENABLE_SIG_STFL_ALG\n\nNote: `ALG` in `OQS_ENABLE_KEM_ALG/OQS_ENABLE_SIG_ALG/OQS_ENABLE_SIG_STFL_ALG` should be replaced with the specific algorithm name as demonstrated below.\n\nThis can be set to `ON` or `OFF`, and is `ON` by default. When `OFF`, `ALG` and its code are excluded from the build process. When `ON`, made available are additional options whereby individual variants of `ALG` can be excluded from the build process. \n\nFor example: if `OQS_ENABLE_KEM_BIKE` is set to `ON`, the options `OQS_ENABLE_KEM_bike_l1`, `OQS_ENABLE_KEM_bike_l3`, and `OQS_ENABLE_KEM_bike_l5` are made available (and are set to be `ON` by default).\n\nTo enable `XMSS` stateful signature, set `OQS_ENABLE_SIG_STFL_XMSS` to `ON`, the options `OQS_ENABLE_SIG_STFL_xmss_sha256_h10` and its variants are also set to be `ON` by default. Similarly, `LMS` stateful signature family can also be enabled by setting `OQS_ENABLE_SIG_STFL_LMS` to `ON`.\n\nFor a full list of such options and their default values, consult [.CMake/alg_support.cmake](https://github.com/open-quantum-safe/liboqs/blob/master/.CMake/alg_support.cmake).\n\n**Default**: Unset.\n\n## OQS_ALGS_ENABLED\n\nA selected algorithm set is enabled. Possible values are \"STD\" selecting all algorithms standardized by NIST; \"NIST_R4\" selecting all algorithms evaluated in round 4 of the NIST PQC competition; \"NIST_SIG_ONRAMP\" selecting algorithms evaluated in the NIST PQC \"onramp\" standardization for additional signature schemes; \"All\" (or any other value) selecting all algorithms integrated into liboqs. Parameter setting \"STD\" minimizes library size but may require re-running code generator scripts in projects integrating `liboqs`; e.g., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [oqs-boringssl](https://github.com/open-quantum-safe/boringssl).\n\n**Attention**: If you use any predefined value (`STD` or `NIST_R4` or `NIST_SIG_ONRAMP` as of now) for this variable, the values added via [OQS_ENABLE_KEM_ALG/OQS_ENABLE_SIG_ALG/OQS_ENABLE_SIG_STFL_ALG](#OQS_ENABLE_KEM_ALG/OQS_ENABLE_SIG_ALG/OQS_ENABLE_SIG_STFL_ALG) variables will be ignored.\n\n**Default**: `All`.\n\n## OQS_BUILD_ONLY_LIB\n\nCan be `ON` or `OFF`. When `ON`, only liboqs is built, and all the targets: `run_tests`, `gen_docs`, and `prettyprint` are excluded from the build system.\n\n**Default**: `OFF`.\n\n## OQS_MINIMAL_BUILD\n\nIf set, this defines a semicolon-delimited list of algorithms to be contained in a minimal build of `liboqs`: Only algorithms explicitly set here are included in a build: For example running `cmake -DOQS_MINIMAL_BUILD=\"KEM_kyber_768;SIG_dilithium_3\" ..` will build a minimum-size `liboqs` library only containing support for Kyber768 and Dilithium3.\n\nThe full list of identifiers that can be set is listed [here for KEM algorithms](https://github.com/open-quantum-safe/liboqs/blob/main/src/kem/kem.h#L34) and [here for Signature algorithms](https://github.com/open-quantum-safe/liboqs/blob/f3caccff9e6225e7c50ca27f5ee6e58b7bc74188/src/sig/sig.h#L34). The default setting is empty, thus including all [supported algorithms](https://github.com/open-quantum-safe/liboqs#supported-algorithms) in the build.\n\n**Default**: Unset.\n\n## OQS_DIST_BUILD\n\nCan be `ON` or `OFF`. When `ON`, build liboqs for distribution. When `OFF`, build liboqs for use on a single machine.\n\nThe library is always built for a particular architecture, either x86-64, ARM32v7, or ARM64v8, depending on the setting of CMAKE_SYSTEM_PROCESSOR. But liboqs contains code that is optimized for micro-architectures as well, e.g. x86-64 with the AVX2 extension.\n\nWhen built for distribution, the library will run on any CPU of the target architecture. Function calls will be dispatched to micro-architecture optimized routines at run-time using CPU feature detection.\n\nWhen built for use on a single machine, the library will only include the best available code for the target micro-architecture (see [OQS_OPT_TARGET](#OQS_OPT_TARGET)).\n\n**Default**: `ON`.\n\n## OQS_USE_CPUFEATURE_INSTRUCTIONS\n\nNote: `CPUFEATURE` in `OQS_USE_CPUFEATURE_INSTRUCTIONS` should be replaced with the specific CPU feature as noted below.\n\nThese can be set to `ON` or `OFF` and take effect if liboqs is built for use on a single machine. By default, the CPU features are automatically determined and set to `ON` or `OFF` based on the CPU features available on the build system. The default values can be overridden by providing CMake build options. The available options on x86-64 are: `OQS_USE_ADX_INSTRUCTIONS`, `OQS_USE_AES_INSTRUCTIONS`, `OQS_USE_AVX_INSTRUCTIONS`, `OQS_USE_AVX2_INSTRUCTIONS`, `OQS_USE_AVX512_INSTRUCTIONS`, `OQS_USE_BMI1_INSTRUCTIONS`, `OQS_USE_BMI2_INSTRUCTIONS`, `OQS_USE_PCLMULQDQ_INSTRUCTIONS`, `OQS_USE_VPCLMULQDQ_INSTRUCTIONS`, `OQS_USE_POPCNT_INSTRUCTIONS`, `OQS_USE_SSE_INSTRUCTIONS`, `OQS_USE_SSE2_INSTRUCTIONS` and `OQS_USE_SSE3_INSTRUCTIONS`. The available options on ARM64v8 are `OQS_USE_ARM_AES_INSTRUCTIONS`, `OQS_USE_ARM_SHA2_INSTRUCTIONS`, `OQS_USE_ARM_SHA3_INSTRUCTIONS` and `OQS_USE_ARM_NEON_INSTRUCTIONS`.\n\n**Default**: Options valid on the build machine.\n\n## OQS_USE_OPENSSL\n\nTo save size and limit the amount of different cryptographic code bases, it is possible to use OpenSSL as a crypto code provider by setting this configuration option.\n\nThis can be set to `ON` or `OFF`. When `ON`, the additional options `OQS_USE_AES_OPENSSL`, `OQS_USE_SHA2_OPENSSL`, and `OQS_USE_SHA3_OPENSSL` are made available to control whether liboqs uses OpenSSL's AES, SHA-2, and SHA-3 implementations.\n\nBy default,\n- `OQS_USE_AES_OPENSSL` is `ON` (on x86-64 only if `OQS_DIST_BUILD` and `OQS_USE_AES_INSTRUCTIONS` are not set)\n- `OQS_USE_SHA2_OPENSSL` is `ON`\n- `OQS_USE_SHA3_OPENSSL` is `OFF`.\n\nThese default choices have been made to optimize the default performance of all algorithms. Changing them implies performance penalties.\n\nWhen `OQS_USE_OPENSSL` is `ON`, CMake also scans the filesystem to find the minimum version of OpenSSL required by liboqs (which happens to be 1.1.1). The [OPENSSL_ROOT_DIR](https://cmake.org/cmake/help/latest/module/FindOpenSSL.html) option can be set to aid CMake in its search.\n\n**Default**: `ON`.\n\n### OQS_DLOPEN_OPENSSL\n\nDynamically load OpenSSL through `dlopen`. When using liboqs from other cryptographic libraries, hard dependency on OpenSSL is sometimes undesirable. If this option is `ON`, loading of OpenSSL will be deferred until any of the OpenSSL functions is used.\n\nOnly has an effect if the system supports `dlopen` and ELF binary format, such as Linux or BSD family.\n\n## Stateful Hash Based Signatures \n\nXMSS and LMS are the two supported Hash-Based Signatures schemes.\n`OQS_ENABLE_SIG_STFL_XMSS` and `OQS_ENABLE_SIG_STFL_LMS` control these algorithms, which are disabled by default.\nA third variable, `OQS_HAZARDOUS_EXPERIMENTAL_ENABLE_SIG_STFL_KEY_SIG_GEN`, also controls the ability to generate keys and signatures. This is also disabled by default.\nEach of these variables can be set to `ON` or `OFF`.\nWhen all three are `ON`, stateful signatures are fully functional and can generate key pairs, sign data, and verify signatures.\nIf `OQS_HAZARDOUS_EXPERIMENTAL_ENABLE_SIG_STFL_KEY_SIG_GEN` is `OFF` signature verification is the only functional operation.\n\nStandards bodies, such as NIST, recommend that key and signature generation only by done in hardware in order to best enforce the one-time use of secret keys.\nKeys stored in a file system are extremely susceptible to simultaneous use.\nWhen enabled in this library a warning message will be generated by the config process.\nThe name of the configuration variable has been chosen to make every user of this feature aware of its security risks.\nThe OQS team explicitly discourages enabling this variable and reserves the right to remove this feature in future releases if its use causes actual harm.\nIt remains present as long as it is responsibly used as per the stated warnings.\n\nBy default,\n- `OQS_ENABLE_SIG_STFL_XMSS` is `OFF` \n- `OQS_ENABLE_SIG_STFL_LMS` is `OFF`\n- `OQS_HAZARDOUS_EXPERIMENTAL_ENABLE_SIG_STFL_KEY_SIG_GEN` is `OFF`.\n\n**Default**: `OFF`.\n\n## OQS_OPT_TARGET\n\nAn optimization target. Only has an effect if the compiler is GCC or Clang and `OQS_DIST_BUILD=OFF`. Can take any valid input to the `-march` (on x86-64) or `-mcpu` (on ARM32v7 or ARM64v8) option for `CMAKE_C_COMPILER`. Can also be set to one of the following special values.\n  - `auto`: Use `-march=native` or `-mcpu=native` (if the compiler supports it).\n  - `generic`: Use `-march=x86-64` on x86-64, or `-mcpu=cortex-a5` on ARM32v7, or `-mcpu=cortex-a53` on ARM64v8.\n\n**Default**: `auto`.\n\n## OQS_SPEED_USE_ARM_PMU\n\nCan be `ON` or `OFF`. When `ON`, the benchmarking script will try to use the ARMv8 Performance Monitoring Unit (PMU). This will make cycle counts on ARMv8 platforms significantly more accurate.\n\nIn order to use this option, user mode access to the PMU must be enabled via a kernel module. If user mode access is not enabled via the kernel module, benchmarking will throw an `Illegal Instruction` error. A kernel module that has been found to work on several platforms can be found [here for Linux](https://github.com/mupq/pqax#enable-access-to-performance-counters). Follow the instructions there (i.e., clone the repository, `cd enable_ccr` and `make install`) to load the kernel module, after which benchmarking should work. Superuser permissions are required. Linux header files must also be installed on your platform, which may not be present by default.\n\nNote that this option is not known to work on Apple M1 chips.\n\n**Default**: `OFF`.\n\n## USE_SANITIZER\n\nThis has an effect when the compiler is Clang and when [CMAKE_BUILD_TYPE](#CMAKE_BUILD_TYPE) is `Debug`. Then, it can be set to:\n\n- `Address`: This enables Clang's `AddressSanitizer`\n- `Memory`: This enables Clang's `MemorySanitizer`\n- `MemoryWithOrigins`: This enables Clang's `MemorySanitizer` with the added functionality of being able to track the origins of uninitialized values\n- `Undefined`: This enables Clang's `UndefinedBehaviorSanitizer`. The `BLACKLIST_FILE` option can be additionally set to a path to a file listing the entities Clang should ignore.\n- `Thread`: This enables Clang's `ThreadSanitizer`\n- `Leak`: This enables Clang's `LeakSanitizer`\n\n**Default**: Unset.\n\n## OQS_ENABLE_TEST_CONSTANT_TIME\n\nThis is used in conjunction with `tests/test_constant_time.py` to use Valgrind to look for instances of secret-dependent control flow.  liboqs must also be compiled with [CMAKE_BUILD_TYPE](#CMAKE_BUILD_TYPE) set to `Debug`.  \n\nSee the documentation in [`tests/test_constant_time.py`](https://github.com/open-quantum-safe/liboqs/blob/main/tests/test_constant_time.py) for more usage information.\n\n**Default**: `OFF`.\n\n## OQS_STRICT_WARNINGS\n\nCan be `ON` or `OFF`. When `ON`, all compiler warnings are enabled and treated as errors. This setting is recommended to be enabled prior to submission of a Pull Request as CI runs with this setting active. When `OFF`, significantly fewer compiler warnings are enabled such as to avoid undue build errors triggered by (future) compiler warning features/unknown at the development time of this library.\n\n**Default**: `OFF`.\n\n## OQS_EMBEDDED_BUILD\n\nCan be `ON` or `OFF`. When `ON`, calls to standard library functions typically not present in a bare-metal embedded environment are excluded from compilation. \n\nAt the moment, this is **only** considered for random number generation, as both `getentropy()` and a file based `/dev/urandom` are not available on embedded targets (e.g. the Zephyr port).\n\n**Attention**: When this option is enabled, you have to supply a custom callback for obtaining random numbers using the `OQS_randombytes_custom_algorithm()` API before accessing the cryptographic API. Otherwise, all key generation and signing operations will fail. \n\n**Default**: `OFF`.\n\n## OQS_LIBJADE_BUILD\nCan be `ON` or `OFF`. When `ON` liboqs is built to use high assurance implementations of cryptographic algorithms from [Libjade](https://github.com/formosa-crypto/libjade). The cryptographic primitives in Libjade are written using [Jasmin](https://github.com/jasmin-lang/jasmin) and built using the Jasmin compiler. The Jasmin compiler is proven (in Coq) to preserve semantic correctness of a program, maintain secret-independence of control flow, and maintain secret independence of locations of memory access through compilation. Additionally, the Jasmin compiler guarantees thread safety because Jasmin doesn't support global variables. \n\nAt the moment, Libjade only provides Kyber512 and Kyber768 KEMs. \n\nAt the moment, libjade only supports Linux and Darwin based operating systems on x86_64 platforms.\n\n**Default** `OFF`.\n\n## OQS_ENABLE_LIBJADE_KEM_ALG/OQS_ENABLE_LIBJADE_SIG_ALG\n\nNote: `ALG` in `OQS_ENABLE_LIBJADE_KEM_ALG/OQS_ENABLE_LIBJADE_SIG_ALG` should be replaced with the specific algorithm name as demonstrated in OQS_ENABLE_KEM_ALG/OQS_ENABLE_SIG_ALG.\n\n**Default**: `OFF` if OQS_LIBJADE_BUILD is `OFF` else unset.\n\n## OQS_BUILD_FUZZ_TESTS\nCan be `ON` or `OFF`. When `ON` liboqs the fuzz test-suite will be enabled. This option is only available if the c compiler is set to clang i.e. `-DCMAKE_C_COMPILER=clang`.\n\nNote: It is strongly recommended that this configuration be enabled with `CFLAGS=-fsanitize=address,fuzzer-no-link LDFLAGS=-fsanitize=address`. While fuzzing will run without these flags, enabling this instrumentation will make fuzzing performance much faster and catch [potential memory related bugs](https://clang.llvm.org/docs/AddressSanitizer.html). \n\n**Default** `OFF`.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.8447265625,
          "content": "# Contributing\n\nThe OQS core team welcomes all proposals to improve this project. This may take \nthe form of [a discussion](https://github.com/open-quantum-safe/liboqs/discussions)\nfor input or feedback, possible bug reports or feature requests via [issues](https://github.com/open-quantum-safe/liboqs/issues)\nas well as new code and documentation via a [pull request (PR)](https://github.com/open-quantum-safe/liboqs/pulls).\n\n## Review and Feedback\n\nWe aim to provide timely feedback to any input. If you are uncertain as to whether\na particular contribution is welcome, needed or timely, please first open an [issue](https://github.com/open-quantum-safe/liboqs/issues)\nparticularly in case of possible bugs or new feature requests or create a\n[discussion](https://github.com/open-quantum-safe/liboqs/discussions).\n\n## Pull requests\n\nPull requests should clearly state their purpose, possibly referencing an existing\n[issue](https://github.com/open-quantum-safe/liboqs/issues) when resolving it.\n\nAll PRs should move to \"Ready for Review\" stage only if all CI tests pass (are green).\n\nThe OQS core team is happy to provide feedback also to Draft PRs in order to improve\nthem before the final \"Review\" stage.\n\n### Coding style\n\nThis project has adopted a slightly modified [Google code formatting style](https://astyle.sourceforge.net/astyle.html#_style=google) for the core components\nof the library as documented in the [style template](.astylerc).\nThe `astyle` tool is used to check formatting in CI.\nDue to variations in behaviour across version and platforms, it is possible to encounter CI failures even if code has been locally formatted with `astyle`.\nTo assist with this inconvenience, we provide a convenience script which runs `astyle` in the same Docker image that we use for the CI checks:\n```bash\nLIBOQS_DIR=<liboqs directory> ./scripts/format_code.sh\n```\nThis script has been tested on x86\\_64 Ubuntu and arm64 macOS. Contributions for other platforms are welcome and appreciated!\n\n### Continuous Integration (CI)\n\n`liboqs` uses GitHub Actions for CI.\nFor a comprehensive overview of our CI setup, see [CI.md](CI.md).\n\n#### Running CI on your branch\n\nOQS attempts to be responsible with resource usage and only runs a minimal set of tests automatically on push.\nA more thorough test suite runs automatically on pull requests.\nTo trigger these tests before creating a PR, include the string \"[full tests]\" in a commit message.\nOther trigger strings are documented in [CI.md](CI.md#push.yml).\n\n#### Running CI locally\n\n[Act](https://github.com/nektos/act) is a tool facilitating local execution of\nGitHub CI jobs. When executed in the main `liboqs` directory, \n\n    act -l Displays all GitHub CI jobs\n    act -j some-job Executes \"some-job\"\n\nWhen installing `act` as a GitHub extension, prefix the commands with `gh `.\n\n## Modifications to CI\n\nModifications to GitHub Actions workflows are checked with [actionlint](https://github.com/rhysd/actionlint) during the [basic.yml](.github/workflows/basic.yml) job, protecting the CI chain and against wrong approval decisions based on improper CI runs.  Changes to these workflows can be validated locally with `actionlint`:\n\n```bash\nactionlint .github/workflows/*.yml\n```\n\nor running the CI locally (as above):\n\n```bash\nact workflow_call -W '.github/workflows/basic.yml'\n```\n\n### New features\n\nAny PR introducing a new feature is expected to contain a test of this feature\nand this test should be part of the CI pipeline.\n\n## Failsafe\n\nIf you feel your contribution is not getting proper attention, please be sure to\nadd a tag to one or more of our [most active contributors](https://github.com/open-quantum-safe/liboqs/graphs/contributors).\n\n## Issues to start working on\n\nIf you feel like contributing but don't know what specific topic to work on,\nplease check the [open issues tagged \"good first issue\" or \"help wanted\"](https://github.com/open-quantum-safe/liboqs/issues).\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 1.4677734375,
          "content": "Nicholas Allen (Amazon Web Services)\nMaxime Anvari\nMichael Baentsch\nZane Beckwith (SandboxAQ)\nHY Chang\nVitaly Chikunov\nEric Crockett (Amazon Web Services)\nNir Drucker\nBen Davies (University of Waterloo)\nJavad Doliskani (University of Waterloo)\nTed Eaton (University of Waterloo)\nNicholas Fulton (Arizona State University)\nVlad Gheorghiu (softwareQ Inc., University of Waterloo)\nJason Goertzen (University of Waterloo)\nShay Gueron (Amazon Web Services)\nTorben Hansen (Royal Holloway University of London)\nBasil Hess (IBM Research)\nKevin Kane (Microsoft Research)\nNikita Karpey (https://github.com/gadoofou87)\nDusan Kostic (Amazon Web Services)\nPiotr Kubaj (Intel)\nTancrède Lepoint (SRI International)\nShravan Mishra (University of Waterloo)\nChristian Paquin (Microsoft Research)\nAlex Parent (University of Waterloo)\nSebastian Ramacher (Austrian Institute of Technology)\nJohn Schanck (University of Waterloo)\nPeter Schwabe (Radboud University Nijmegen)\nDimitris Sikeridis (University of New Mexico, Cisco Systems)\nDouglas Stebila (University of Waterloo)\nGoutam Tamvada (University of Waterloo)\nJohn Underhill\nKarolin Varner\nSebastian Verschoor (University of Waterloo)\nThom Wiggers (Radboud University)\nDindyal Jeevesh Rishi (University of Mauritius / cyberstorm.mu)\nDuc Tri Nguyen\nMarco Gianvecchio (Politecnico di Milano)\nAlessandro Barenghi (Politecnico di Milano)\nGerardo Pelosi (Politecnico di Milano)\n\nSee additional contributors at https://github.com/open-quantum-safe/liboqs/graphs/contributors\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 6.083984375,
          "content": "# Governance\n\n## Basic principles\n\nThe Open Quantum Safe project aims to operate by the following principles:\n\n- **Openness**: The project will be open in its operation, open to contributions, and produce open source software.\n- **Respect**: The project will foster respectful interactions with all participants.\n- **Scientific integrity**: The project will follow advancements in cryptographic research and will be guided by standards and best practices.\n\nDecision making in the project will follow the principles above, and be governed first and foremost by reason and mutually respectful interaction between all participants.\nThe project will aim to build consensus for decisions, and will where possible operate by the approach of [lazy consensus](https://community.apache.org/committers/decisionMaking.html).\nIf decisions cannot be reached using lazy consensus, voting will be used to come to a resolution.\n\n## Community and Roles\n\nThe OQS community is open to all who would like to participate in the project following its principles, including academic, industry, public sector, and individual contributors.\n\nThe following roles exist in the project:\n\n### Users\n\nA **User** is a person or organization using software produced by the project.\n\nResponsibilities:\n\n- Abide by the [license](LICENSE.txt)\n- Consider participating in the project!\n\n### Community Members\n\nA **Community Member** is a User who interacts with the project, for example by participating in discussions on Github or mailing lists, or in project meetings.\n\nResponsibilities:\n\n- Follow the [code of conduct](CODE_OF_CONDUCT.md)\n\n### Contributors\n\nA **Contributor** is a Community Member who contributes directly to the project by submitting code or documentation, or actively participating in issues or pull requests on Github.\n\n### Committers\n\nA **Committer** is a Contributor with increased experience in the project who helps review pull requests and actively participates in discussions about the project. Committers will be members of the open-quantum-safe GitHub organization and will have \"write\" permissions in GitHub.\n\nResponsibilities:\n\n- Further the goals of the project.\n- Monitor and respond to GitHub issues.\n- Review and merge pull requests.\n- Assist with security releases when required.\n- Participate in discussions and project meetings.\n\n### Maintainers\n\nA **Maintainer** is a Committer who makes significant and sustained contributions to the project, and is committed to guiding the direction of the project. Maintainers will have \"administrative\" permissions in GitHub.\n\nResponsibilities:\n\n- Oversee the overall project health and growth.\n- Lead communication for the project.\n- Define general and technical guidelines for the project.\n- Identify priorities and manage the release cycle.\n\n### Change of role\n\nAny Community Member may become a Contributor by creating a pull request (PR) and getting it successfully reviewed and merged by Committers.\n\nAny Contributor can become a Committer by contributing sufficient code and displaying deep subject matter knowledge in discussions such that a majority of Committers vote for this change of role. A Maintainer can veto such a vote. Such a veto can be overruled by a 2/3 majority of Committers.\n\nAs such a voting decision may be considered subjective, Contributors striving to become Committers are encouraged to ask for advice from Committers/Maintainers as to what they can do to obtain this role. Baseline requirements for contributions are documented in [CONTRIBUTING.md](CONTRIBUTING.md). Any Contributor can create a discussion item to request a vote to become Committer.\n\nAny Committer can become a Maintainer by majority vote of voting Committers. A current Maintainer can veto such a vote. Such a veto can be overruled by a 2/3 majority of all Committers.\n\nA Maintainer is not permitted to remove another Maintainer's GitHub privileges.\n\nA Committer may be automatically moved to Contributor status if not actively contributing by discussion or PR review during the last 90 days or by voluntarily suspending this status (e.g., by taking a [\"Leave of absence\"](#leave-of-absence)). If a Maintainer loses or relinquishes the Committer status and, hence, the Maintainer status, the Committers have to determine whether a new Maintainer needs to be elected.\n\nAny person violating the [code of conduct](CODE_OF_CONDUCT.md), consistently not fulfilling the role responsibilities, or for other reasons can lose the role held if a simple majority of Committers votes for such removal and no Maintainer vetoes that decision. If a Maintainer is to be removed from that role a 2/3 majority of Committers must agree.\n\nDepending on the reason for removal, a Maintainer may be converted to Emeritus status. Emeritus Maintainers may still be consulted on some project matters, and can be returned to Maintainer status if their availability changes and a simple majority of Committers agrees.\n\n### Leave of absence\n\nAny Committer may voluntarily step down from the role for a documented period of time, losing voting rights for that time period. The period is documented in this file next to the person's name below.  At the end of this time period, the Committer automatically regains their voting rights.\n\nA leave of absence may not be longer than a year. If the Committer needs to be away for longer than that, they must step down from that role unconditionally, and regaining that role becomes subject of normal procedures to become Committer, as described in [\"Change of role\"](#change-of-role) above.\n\n## Voting\n\nChange of role or changes to this document is subject to voting.\n\nVotes are to be executed by way of open GitHub discussions. No quorum is needed for votes open for 4 weeks. Urgent matters may be decided by majority vote among Maintainers or 2/3 majority by all Committers within an arbitrary voting period.\n\n## Current Maintainers and Committers\n\n### Maintainers\n\n@baentsch\n@dstebila\n\n### Committers\n\n@baentsch\n@bhess\n@christianpaquin\n@dstebila\n@jschanck\n@Martyrshot\n@praveksharma\n@swilson4\n@vsoftco\n\n## Afterword\n\n*This governance document was based in part of the [Falco Project governance document](https://github.com/falcosecurity/evolution/blob/main/GOVERNANCE.md).\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.29296875,
          "content": "The MIT license, the text of which is below, applies to liboqs in general.\nliboqs includes some third party libraries or modules that are licensed\ndifferently; the corresponding subfolder contains the license that applies in\nthat case.\n\n\nCopyright (c) 2016-2024 The Open Quantum Safe project authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "PLATFORMS.md",
          "type": "blob",
          "size": 6.5625,
          "content": "# Supported platforms\n\nThis file documents the different platforms supported by `liboqs` and therefore defines three different support tiers:\n\n## Support tiers\n\nThis classification is roughly based on the [rust platform support tier classification](https://doc.rust-lang.org/beta/rustc/platform-support.html):\n\n### Tier 1\n\nTier 1 targets can be thought of as \"guaranteed to work\". The CI system builds and tests binary versions for each tier 1 target to make sure any change does not negatively affect those platforms. Platform-specific build documentation must exist. Tier 1 targets marked with a dagger (†) are additionally tested for constant-time behaviour. The CI system contains automated constant-time testing for each of these starred targets, and all failures are documented in the `tests/constant_time` directory. IMPORTANT: This does not mean that constant-time behaviour is guaranteed on these targets, or that non-constant-time behaviour is limited to documented exceptions. It does, however, mean that `liboqs` developers should track constant-time issues on these platforms.\n\n### Tier 2\n\nTier 2 targets can be thought of as \"guaranteed to build\". The `liboqs` CI system contains builds for each tier 2 target; testing may or may not be available (typically depending on CI system platform availability). Therefore, tier 2 targets often work to quite a good degree and patches are always welcome! Tier 2 targets may also have known deficiencies caused by a lack of expertise to fix those on a given platform. Again, help and PRs to move platforms from tier 2 to tier 1 are always welcome.\n\n### Tier 3\n\nTier 3 targets are those which the `liboqs` codebase has support for, but which the CI system does not build or test automatically, so they may or may not work. Platform-specific build documentation should exist.\n\n## Platform tier policy\n\nTier 2 and tier 1 targets place work on `liboqs` core project developers as a whole, to avoid breaking the target. The broader `liboqs` community may also feel more inclined to support higher-tier targets in their work. Thus, these tiers require commensurate and ongoing efforts from the maintainers of the target, to demonstrate value and to minimize any disruptions to ongoing `liboqs` development.\n\nThis policy defines the requirements for accepting a proposed target at a given level of support.\n\nEach tier builds on all the requirements from the previous tier, unless overridden by a stronger requirement.\n\nChange of tier is subject to approval by the `liboqs` technical governance team.  This team is responsible for reviewing and evaluating the target, based on these requirements and their own judgment. The tea may apply additional requirements, including subjective requirements, such as to deal with issues not foreseen by this policy. (Such requirements may subsequently motivate additions to this policy.)\n\nWhile these criteria attempt to document the policy, that policy still involves human judgment. Targets must fulfill the spirit of the requirements as well, as determined by the judgment of the approving team. Reviewers and team members evaluating targets and target-specific patches should always use their own best judgment regarding the quality of work, and the suitability of a target for the `liboqs` project. Neither this policy nor any decisions made regarding targets shall create any binding agreement or estoppel by any party.\n\nBefore filing an issue or pull request (PR) to introduce or promote a target, the target should already meet the corresponding tier requirements. This does not preclude an existing target's maintainers using issues (on the `liboqs` repository or otherwise) to track requirements that have not yet been met, as appropriate; however, before officially proposing the introduction or promotion of a target, it should meet all of the necessary requirements. A target proposal must quote the corresponding requirements verbatim and respond to them as part of explaining how the target meets those requirements. (For the requirements that simply state that the target or the target developers must not do something, it suffices to acknowledge the requirement.)\n\nSeveral parts of this policy require providing target-specific documentation. Such documentation should typically appear in a subdirectory of the platform-support section of the `liboqs` manual, with a link from the target's entry in platform support.\n\nNote that a target must have already received approval for the next lower tier, and spent a reasonable amount of time at that tier, before making a proposal for promotion to the next higher tier; this is true even if a target meets the requirements for several tiers at once. This policy leaves the precise interpretation of \"reasonable amount of time\" up to the approving team; the team may scale the amount of time required based on their confidence in the target and its demonstrated track record at its current tier. At a minimum, multiple stable releases of `liboqs` should typically occur between promotions of a target.\n\nThe availability or tier of a target in stable `liboqs` is not a hard stability guarantee about the future availability or tier of that target. Higher-level target tiers are an increasing commitment to the support of a target, and we will take that commitment and potential disruptions into account when evaluating the potential demotion or removal of a target that has been part of a stable release. The promotion or demotion of a target will not generally affect existing stable releases, only current development and future releases.\n\nIn this policy, the words \"must\" and \"must not\" specify absolute requirements that a target must meet to qualify for a tier. The words \"should\" and \"should not\" specify requirements that apply in almost all cases, but for which the approving teams may grant an exception for good reason. The word \"may\" indicates something entirely optional, and does not indicate guidance or recommendations. This language is based on [IETF RFC 2119](https://datatracker.ietf.org/doc/html/rfc2119).\n\n## Platforms supported\n\n### Tier 1\n\n- x86_64/amd64/x64 for Ubuntu Linux (Noble)†\n- x86_64/amd64/x64 for MacOS (XCode 14 and 15)\n- aarch64 for Ubuntu (Noble)\n- aarch64 for MacOS (XCode 15)\n- armhf/ARM7 and aarch64 emulation on Ubuntu\n\n### Tier 2\n\n- x86_64/amd64/x64 for Windows (Visual Studio Toolchain) 2022\n- armeabi-v7a, arm64-v8a, x86, x86_64 for Android\n- aarch64 for Apple iOS and tvOS (CMake `-DPLATFORM=OS64` and `TVOS`)\n- arm64, arm (32 bit), x86, x86_64, riscv32, riscv64 for Zephyr\n\n### Tier 3\n\n- x86 for Windows (Visual Studio Toolchain)\n- ppc641e for Ubuntu (Focal)\n- s390x for Ubuntu (Focal)\n- loongarch64 for Debian Linux (trixie)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.8173828125,
          "content": "liboqs\n======================\n\n[![Main Branch Tests](https://github.com/open-quantum-safe/liboqs/actions/workflows/commit-to-main.yml/badge.svg)](https://github.com/open-quantum-safe/liboqs/actions/workflows/commit-to-main.yml)\n[![Weekly Tests](https://github.com/open-quantum-safe/liboqs/actions/workflows/weekly.yml/badge.svg)](https://github.com/open-quantum-safe/liboqs/actions/workflows/weekly.yml)\n![Travis Build Status](https://img.shields.io/travis/com/open-quantum-safe/liboqs?logo=travis&label=Travis%20CI&labelColor=%23343B42&color=%232EBB4E)\n\nliboqs is an open source C library for quantum-safe cryptographic algorithms.\n\n- [liboqs](#liboqs)\n\t- [Overview](#overview)\n\t- [Status](#status)\n\t\t- [Supported Algorithms](#supported-algorithms)\n\t\t\t- [Key encapsulation mechanisms](#key-encapsulation-mechanisms)\n\t\t\t- [Signature schemes](#signature-schemes)\n\t\t- [Limitations and Security](#limitations-and-security)\n\t\t\t- [Platform limitations](#platform-limitations)\n\t- [Quickstart](#quickstart)\n\t\t- [Linux and Mac](#linux-and-mac)\n\t\t- [Windows](#windows)\n\t\t- [Cross compilation](#cross-compilation)\n\t- [Documentation](#documentation)\n\t- [Contributing](#contributing)\n\t- [License](#license)\n\t- [Acknowledgements](#acknowledgements)\n\n## Overview\n\nliboqs provides:\n\n- a collection of open source implementations of quantum-safe key encapsulation mechanism (KEM) and digital signature algorithms; the full list can be found [below](#supported-algorithms)\n- a common API for these algorithms\n- a test harness and benchmarking routines\n\nliboqs is part of the **Open Quantum Safe (OQS)** project, which aims to develop and integrate into applications quantum-safe cryptography to facilitate deployment and testing in real world contexts. In particular, OQS provides prototype integrations of liboqs into protocols like TLS, X.509, and S/MIME, through our [OpenSSL 3 Provider](https://github.com/open-quantum-safe/oqs-provider) and we provide a variety of other [post-quantum-enabled demos](https://github.com/open-quantum-safe/oqs-demos).\n\nThe OQS project is supported by the [Post-Quantum Cryptography Alliance](https://pqca.org/) as part of the [Linux Foundation](https://linuxfoundation.org/). More information about the Open Quantum Safe project can be found at [openquantumsafe.org](https://openquantumsafe.org/).\n\n## Status\n\n### Supported Algorithms\n\nDetails on each supported algorithm can be found in the [docs/algorithms](https://github.com/open-quantum-safe/liboqs/tree/main/docs/algorithms) folder.\n\nThe list below indicates all algorithms currently supported by liboqs, including experimental algorithms and already excluding algorithm variants pruned during the NIST competition, such as Kyber-90s or Dilithium-AES.\n\nThe only algorithms in `liboqs` that implement NIST standards are the [`ML-KEM`](https://csrc.nist.gov/pubs/fips/203/final) (final standard) and [`ML-DSA`](https://csrc.nist.gov/pubs/fips/204/final) (final standard) variants with their respective different bit strengths. `liboqs` will retain these algorithm names selected by NIST throughout the finishing stages of the standardization process, so users can rely on their presence going forward. If NIST changes the implementation details of these algorithms, `liboqs` will adjust the implementation so that users are protected from such potential changes.\n\nFalcon and SPHINCS+ have also been [selected for standardization](https://csrc.nist.gov/Projects/post-quantum-cryptography/selected-algorithms-2022), but the `liboqs` implementations of these algorithms are currently tracking Round 3 submissions and not NIST standards drafts.\n\nAll names other than `ML-KEM` and `ML-DSA` are subject to change. `liboqs` makes available a [selection mechanism for algorithms on the NIST standards track, continued NIST competition, or purely experimental nature by way of the configuration variable OQS_ALGS_ENABLED](CONFIGURE.md#oQS_ALGS_ENABLED). By default `liboqs` is built supporting all, incl. experimental, PQ algorithms listed below.\n\n#### Key encapsulation mechanisms\n\n<!--- OQS_TEMPLATE_FRAGMENT_LIST_KEXS_START -->\n- **BIKE**: BIKE-L1, BIKE-L3, BIKE-L5\n- **Classic McEliece**: Classic-McEliece-348864†, Classic-McEliece-348864f†, Classic-McEliece-460896†, Classic-McEliece-460896f†, Classic-McEliece-6688128†, Classic-McEliece-6688128f†, Classic-McEliece-6960119†, Classic-McEliece-6960119f†, Classic-McEliece-8192128†, Classic-McEliece-8192128f†\n- **FrodoKEM**: FrodoKEM-640-AES, FrodoKEM-640-SHAKE, FrodoKEM-976-AES, FrodoKEM-976-SHAKE, FrodoKEM-1344-AES, FrodoKEM-1344-SHAKE\n- **HQC**: HQC-128, HQC-192, HQC-256\n- **Kyber**: Kyber512, Kyber768, Kyber1024\n- **ML-KEM**: ML-KEM-512, ML-KEM-768, ML-KEM-1024\n- **NTRU-Prime**: sntrup761\n<!--- OQS_TEMPLATE_FRAGMENT_LIST_KEXS_END -->\n\n#### Signature schemes\n\n<!--- OQS_TEMPLATE_FRAGMENT_LIST_SIGS_START -->\n- **CROSS**: cross-rsdp-128-balanced, cross-rsdp-128-fast, cross-rsdp-128-small†, cross-rsdp-192-balanced, cross-rsdp-192-fast, cross-rsdp-192-small†, cross-rsdp-256-balanced†, cross-rsdp-256-fast, cross-rsdp-256-small†, cross-rsdpg-128-balanced, cross-rsdpg-128-fast, cross-rsdpg-128-small, cross-rsdpg-192-balanced, cross-rsdpg-192-fast, cross-rsdpg-192-small†, cross-rsdpg-256-balanced, cross-rsdpg-256-fast, cross-rsdpg-256-small†\n- **CRYSTALS-Dilithium**: Dilithium2, Dilithium3, Dilithium5\n- **Falcon**: Falcon-512, Falcon-1024, Falcon-padded-512, Falcon-padded-1024\n- **MAYO**: MAYO-1, MAYO-2, MAYO-3, MAYO-5†\n- **ML-DSA**: ML-DSA-44, ML-DSA-65, ML-DSA-87\n- **SPHINCS+-SHA2**: SPHINCS+-SHA2-128f-simple, SPHINCS+-SHA2-128s-simple, SPHINCS+-SHA2-192f-simple, SPHINCS+-SHA2-192s-simple, SPHINCS+-SHA2-256f-simple, SPHINCS+-SHA2-256s-simple\n- **SPHINCS+-SHAKE**: SPHINCS+-SHAKE-128f-simple, SPHINCS+-SHAKE-128s-simple, SPHINCS+-SHAKE-192f-simple, SPHINCS+-SHAKE-192s-simple, SPHINCS+-SHAKE-256f-simple, SPHINCS+-SHAKE-256s-simple\n<!--- OQS_TEMPLATE_FRAGMENT_LIST_SIGS_END -->\n- **XMSS**: XMSS-SHA2_10_256, XMSS-SHA2_16_256, XMSS-SHA2_20_256, XMSS-SHAKE_10_256, XMSS-SHAKE_16_256, XMSS-SHAKE_20_256, XMSS-SHA2_10_512, XMSS-SHA2_16_512, XMSS-SHA2_20_512, XMSS-SHAKE_10_512, XMSS-SHAKE_16_512, XMSS-SHAKE_20_512, XMSS-SHA2_10_192, XMSS-SHA2_16_192, XMSS-SHA2_20_192, XMSS-SHAKE256_10_192, XMSS-SHAKE256_16_192, XMSS-SHAKE256_20_192, SHAKE256_10_256, SHAKE256_16_256, SHAKE256_20_256, XMSSMT-SHA2_20/2_256, XMSSMT-SHA2_20/4_256, XMSSMT-SHA2_40/2_256, XMSSMT-SHA2_40/4_256, XMSSMT-SHA2_40/8_256, XMSSMT-SHA2_60/3_256, XMSSMT-SHA2_60/6_256, XMSSMT-SHA2_60/12_256, XMSSMT-SHAKE_20/2_256, XMSSMT-SHAKE_20/4_256, XMSSMT-SHAKE_40/2_256, XMSSMT-SHAKE_40/4_256, XMSSMT-SHAKE_40/8_256, XMSSMT-SHAKE_60/3_256, XMSSMT-SHAKE_60/6_256, XMSSMT-SHAKE_60/12_256 \n- **LMS**: LMS_SHA256_H5_W1, LMS_SHA256_H5_W2, LMS_SHA256_H5_W4, LMS_SHA256_H5_W8, LMS_SHA256_H10_W1, LMS_SHA256_H10_W2, LMS_SHA256_H10_W4, LMS_SHA256_H10_W8, LMS_SHA256_H15_W1, LMS_SHA256_H15_W2, LMS_SHA256_H15_W4, LMS_SHA256_H15_W8, LMS_SHA256_H20_W1, LMS_SHA256_H20_W2, LMS_SHA256_H20_W4, LMS_SHA256_H20_W8, LMS_SHA256_H25_W1, LMS_SHA256_H25_W2, LMS_SHA256_H25_W4, LMS_SHA256_H25_W8, LMS_SHA256_H5_W8_H5_W8, LMS_SHA256_H10_W4_H5_W8, LMS_SHA256_H10_W8_H5_W8, LMS_SHA256_H10_W2_H10_W2, LMS_SHA256_H10_W4_H10_W4, LMS_SHA256_H10_W8_H10_W8, LMS_SHA256_H15_W8_H5_W8, LMS_SHA256_H15_W8_H10_W8, LMS_SHA256_H15_W8_H15_W8, LMS_SHA256_H20_W8_H5_W8, LMS_SHA256_H20_W8_H10_W8, LMS_SHA256_H20_W8_H15_W8, LMS_SHA256_H20_W8_H20_W8\n\nNote that for algorithms marked with a dagger (†), liboqs contains at least one implementation that uses a large amount of stack space; this may cause failures when run in threads or in constrained environments. For more information, consult the algorithm information sheets in the [docs/algorithms](https://github.com/open-quantum-safe/liboqs/tree/main/docs/algorithms) folder.\n\n### Limitations and Security\n\nWhile at the time of this writing there are no vulnerabilities known in any of the quantum-safe algorithms used in this library, caution is advised when deploying quantum-safe algorithms as most of the algorithms and software have not been subject to the same degree of scrutiny as for currently deployed algorithms. Particular attention should be paid to guidance provided by the standards community, especially from the NIST [Post-Quantum Cryptography Standardization](https://csrc.nist.gov/Projects/Post-Quantum-Cryptography/Post-Quantum-Cryptography-Standardization) project.  As research advances, the supported algorithms may see rapid changes in their security, and may even prove insecure against both classical and quantum computers. Moreover, note that the `sntrup761` is only included for interop testing.\n\nliboqs does not intend to \"pick winners\": algorithm support is informed by the NIST PQC standardization project. We strongly recommend that applications and protocols rely on the outcomes of this effort when deploying post-quantum cryptography.\n\nWe realize some parties may want to deploy quantum-safe cryptography prior to the conclusion of the NIST PQC standardization project.  We strongly recommend such attempts make use of so-called **hybrid cryptography**, in which quantum-safe public-key algorithms are used alongside traditional public key algorithms (like RSA or elliptic curves) so that the solution is at least no less secure than existing traditional cryptography.\n\n**WE DO NOT CURRENTLY RECOMMEND RELYING ON THIS LIBRARY IN A PRODUCTION ENVIRONMENT OR TO PROTECT ANY SENSITIVE DATA.** This library is meant to help with research and prototyping.  While we make a best-effort approach to avoid security bugs, this library has not received the level of auditing and analysis that would be necessary to rely on it for high security use.\n\n#### Platform limitations\n\nIn order to optimize support effort,\n- not all algorithms are equally well supported on all platforms. In case of questions, it is first advised to review the [documentation files for each algorithm](docs/algorithms).\n- not all compilers are equally well supported. For example, at least v7.1.0 of the GNU compiler is required.\n\n## Quickstart\n\n### Linux and Mac\n\n1. Install dependencies:\n\n\tOn Ubuntu:\n\n\t\t sudo apt install astyle cmake gcc ninja-build libssl-dev python3-pytest python3-pytest-xdist unzip xsltproc doxygen graphviz python3-yaml valgrind\n\n\tOn macOS, using a package manager of your choice (we've picked Homebrew):\n\n\t\tbrew install cmake ninja openssl@3 wget doxygen graphviz astyle valgrind\n\t\tpip3 install pytest pytest-xdist pyyaml\n\n\tNote that, if you want liboqs to use OpenSSL for various symmetric crypto algorithms (AES, SHA-2, etc.) then you must have OpenSSL installed (version 3.x recommended; EOL version 1.1.1 also still possible).\n\n2. Get the source:\n\n\t\tgit clone -b main https://github.com/open-quantum-safe/liboqs.git\n\t\tcd liboqs\n\n\tand build:\n\n\t\tmkdir build && cd build\n\t\tcmake -GNinja ..\n\t\tninja\n\nVarious `cmake` build options to customize the resultant artifacts are available and are [documented in CONFIGURE.md](CONFIGURE.md#options-for-configuring-liboqs-builds). All supported options are also listed in the `.CMake/alg-support.cmake` file, and can be viewed by running `cmake -LAH -N ..` in the `build` directory.\n\nThe following instructions assume we are in `build`.\n\n3. By default the main build result is `lib/liboqs.a`, a static library. If you want to build a shared/dynamic library, append [`-DBUILD_SHARED_LIBS=ON`](CONFIGURE.md#bUILD_SHARED_LIBS) to the `cmake -GNinja ..` command above and the result will be `lib/liboqs.so|dylib|dll`. The public headers are located in the `include` directory. There are also a variety of programs built under the `tests` directory:\n\n\t- `test_kem`: Simple test harness for key encapsulation mechanisms\n\t- `test_sig`: Simple test harness for signature schemes\n\t- `test_sig_stfl`: Simple test harness for stateful signature schemes\n\t- `test_kem_mem`: Simple test harness for checking memory consumption of key encapsulation mechanisms\n\t- `test_sig_mem`: Simple test harness for checking memory consumption of signature schemes\n\t- `kat_kem`: Program that generates known answer test (KAT) values for key encapsulation mechanisms using the same procedure as the NIST submission requirements, for checking against submitted KAT values using `tests/test_kat.py`\n\t- `kat_sig`: Program that generates known answer test (KAT) values for signature schemes using the same procedure as the NIST submission requirements, for checking against submitted KAT values using `tests/test_kat.py`\n\t- `kat_sig_stfl`: Program for checking results against submitted KAT values using `tests/test_kat.py`\n\t- `speed_kem`: Benchmarking program for key encapsulation mechanisms; see `./speed_kem --help` for usage instructions\n\t- `speed_sig`: Benchmarking program for signature mechanisms; see `./speed_sig --help` for usage instructions\n\t- `speed_sig_stfl`: Benchmarking program for stateful signature mechanisms; see `./speed_sig_stfl --help` for usage instructions\n\t- `example_kem`: Minimal runnable example showing the usage of the KEM API\n\t- `example_sig`: Minimal runnable example showing the usage of the signature API\n\t- `example_sig_stfl`: Minimal runnable example showing the usage of the stateful signature API\n\t- `test_aes`, `test_sha3`: Simple test harnesses for crypto sub-components\n\t- `test_portability`: Simple test harnesses for checking cross-CPU code portability; requires presence of `qemu`; proper operation validated only on Ubuntu\n\n\tThe complete test suite can be run using\n\n\t\tninja run_tests\n\n4. To generate HTML documentation of the API, run:\n\n\t\tninja gen_docs\n\n\tThen open `docs/html/index.html` in your web browser.\n\n4. `ninja install` can be run to install the built library and `include` files to a location of choice, which can be specified by passing the `-DCMAKE_INSTALL_PREFIX=<dir>` option to `cmake` at configure time. Alternatively, `ninja package` can be run to create an install package.\n\n5. `ninja uninstall` can be run to remove all installation files.\n\n\n### Windows\n\nBinaries can be generated using Visual Studio 2019 with the [CMake Tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools) extension installed. The same options as explained above for Linux/macOS can be used and build artifacts are generated in the specified `build` folders.\n\nIf you want to create Visual Studio build files, e.g., if not using `ninja`, be sure to _not_ pass the parameter `-GNinja` to the `cmake` command as exemplified above. You can then build all components using `msbuild`, e.g. as follows: `msbuild ALL_BUILD.vcxproj` and install all artifacts e.g. using this command `msbuild INSTALL.vcxproj`.\n\n\n### Cross compilation\n\nYou can cross compile liboqs for various platforms. Detailed information is available [in the Wiki](https://github.com/open-quantum-safe/liboqs/wiki/Platform-specific-notes-for-building-liboqs#cross-compiling).\n\n## Documentation\n\nMore detailed information on building, optional build parameters, example applications, coding conventions and more can be found in the [wiki](https://github.com/open-quantum-safe/liboqs/wiki).\n\n## Contributing\n\nContributions that meet the acceptance criteria are gratefully welcomed. See our [Contributing Guide](https://github.com/open-quantum-safe/liboqs/wiki/Contributing-Guide) for more details.\n\n## License\n\nliboqs is licensed under the MIT License; see [LICENSE.txt](https://github.com/open-quantum-safe/liboqs/blob/main/LICENSE.txt) for details.\n\nliboqs includes some third party libraries or modules that are licensed differently; the corresponding subfolder contains the license that applies in that case.  In particular:\n\n- `.CMake/CMakeDependentOption.cmake`: BSD 3-Clause License\n- `src/common/common.c`: includes portions which are Apache License v2.0\n- `src/common/crypto/aes/aes_c.c`: public domain or any OSI-approved license\n- `src/common/crypto/aes/aes*_ni.c`: public domain\n- `src/common/crypto/sha2/sha2_c.c`: public domain\n- `src/common/crypto/sha3/xkcp_low` : CC0 (public domain), except `brg_endian.h` and `KeccakP-1600-AVX2.s`\n- `src/common/crypto/sha3/xkcp_low/.../brg_endian.h` : BSD 3-Clause License\n- `src/common/crypto/sha3/xkcp_low/.../KeccakP-1600-AVX2.s` : BSD-like [CRYPTOGAMS license](http://www.openssl.org/~appro/cryptogams/)\n- `src/common/rand/rand_nist.c`: See file\n- `src/kem/bike/additional`: Apache License v2.0\n- `src/kem/classic_mceliece/pqclean_*`: public domain\n- `src/kem/kyber/pqcrystals-*`: public domain (CC0) or Apache License v2.0\n- `src/kem/kyber/pqclean_*`: public domain (CC0), and public domain (CC0) or Apache License v2.0, and public domain (CC0) or MIT, and MIT\n- `src/kem/kyber/libjade_*` public domain (CC0) or Apache License v2.\n- `src/kem/ml_kem/pqcrystals-*`: public domain (CC0) or Apache License v2.0\n- `src/sig/dilithium/pqcrystals-*`: public domain (CC0) or Apache License v2.0\n- `src/sig/dilithium/pqclean_*`: public domain (CC0), and public domain (CC0) or Apache License v2.0, and public domain (CC0) or MIT, and MIT\n-  src/sig/falcon/pqclean_\\*\\_aarch64 : Apache License v2.0\n- `src/sig/mayo/*`: Apache License v2.0\n- `src/sig/ml_dsa/pqcrystals-*`: public domain (CC0) or Apache License v2.0\n- `src/sig/sphincs/pqclean_*`: CC0 (public domain)\n\n## Acknowledgements\n\nThe OQS project is supported by the [Post-Quantum Cryptography Alliance](https://pqca.org/) as part of the [Linux Foundation](https://linuxfoundation.org/).\n\nThe OQS project was founded by Douglas Stebila and Michele Mosca at the University of Waterloo.  [Contributors to liboqs](https://github.com/open-quantum-safe/liboqs/blob/main/CONTRIBUTORS) include individual contributors, academics and researchers, and various companies, including Amazon Web Services, Cisco Systems, evolutionQ, IBM Research, Microsoft Research, SandboxAQ, and softwareQ.\n\nFinancial support for the development of Open Quantum Safe has been provided by Amazon Web Services, the Canadian Centre for Cyber Security, Cisco, the Unitary Fund, the NGI Assure Fund, and VeriSign Inc.\n\nResearch projects which developed specific components of OQS have been supported by various research grants, including funding from the Natural Sciences and Engineering Research Council of Canada (NSERC); see the source papers for funding acknowledgments.\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 8.5126953125,
          "content": "liboqs version 0.12.0\n=====================\n\nAbout\n-----\n\nThe **Open Quantum Safe (OQS) project** has the goal of developing and prototyping quantum-resistant cryptography.  More information on OQS can be found on our website: https://openquantumsafe.org/ and on Github at https://github.com/open-quantum-safe/.  \n\n**liboqs** is an open source C library for quantum-resistant cryptographic algorithms.  Details about liboqs can be found in [README.md](https://github.com/open-quantum-safe/liboqs/blob/main/README.md).  See in particular limitations on intended use.\n\nliboqs can be used with the following Open Quantum Safe application integrations:\n\n- **oqs-provider**: A standalone prototype [OpenSSL 3 provider](https://www.openssl.org/docs/manmaster/man7/provider.html) enabling liboqs-based quantum-safe and hybrid key authentication and exchange for TLS 1.3, X.509 certificate generation and CMS operations.\n- **OQS-BoringSSL**: A prototype integration of liboqs-based authentication and key exchange into TLS 1.3 in our fork of BoringSSL; see https://github.com/open-quantum-safe/boringssl.\n- **OQS-OpenSSH**: A prototype integration of liboqs-based authentication and key exchange into Secure Shell (SSH) version 2 in our fork of OpenSSH; see https://github.com/open-quantum-safe/openssh.\n\nSeveral [demos](https://github.com/open-quantum-safe/oqs-demos) are available for using the above libraries in applications, including Apache, Chromium, curl, haproxy, nginx, and Wireshark.\n\nliboqs can also be used in the following programming languages via language-specific wrappers:\n\n- C++, via https://github.com/open-quantum-safe/liboqs-cpp\n- Go, via https://github.com/open-quantum-safe/liboqs-go\n- Java, via https://github.com/open-quantum-safe/liboqs-java\n- Python 3, via https://github.com/open-quantum-safe/liboqs-python\n- Rust, via https://github.com/open-quantum-safe/liboqs-rust\n\nRelease notes\n=============\n\nThis is version 0.12.0 of liboqs. It was released on December 9, 2024.\n\nThis release updates the ML-DSA implementation to the [final FIPS 204](https://csrc.nist.gov/pubs/fips/204/final) version. This release still includes the NIST Round 3 version of Dilithium for interoperability purposes, but we plan to remove Dilithium Round 3 in a future release.\n\nDeprecation notice\n==================\n\nThis will be the last release of liboqs to include Kyber (that is, the NIST Round 3 version of Kyber, prior to its standardization by NIST as ML-KEM in FIPS 203). Applications should switch to ML-KEM (FIPS 203).\n\nThe addition of ML-DSA FIPS 204 final version to liboqs has introduced a new signature API which includes a context string parameter. We are planning to remove the old version of the API without a context string in the next release to streamline the API and bring it in line with NIST specifications. Users who have an opinion on this removal are invited to provide input at https://github.com/open-quantum-safe/liboqs/issues/2001.\n\nSecurity issues\n===============\n\n- CVE-2024-54137: Fixed bug in HQC decapsulation that leads to incorrect shared secret value during decapsulation when called with an invalid ciphertext. Thank you to Célian Glénaz and Dahmun Goudarzi from Quarkslab for identifying the issue.\n\nWhat's New\n----------\n\nThis release continues from the 0.11.0 release of liboqs.\n\n### Key encapsulation mechanisms\n\n- HQC: Fixed bug in decapsulation that leads to incorrect shared secret value during decapsulation when called with an invalid ciphertext. Thank you to Célian Glénaz and Dahmun Goudarzi from Quarkslab for identifying the issue.\n- Kyber: This is the last release of liboqs to include Kyber.\n- ML-KEM: Improved testing of ML-KEM.\n\n### Digital signature schemes\n\n- LMS: Fixed crashing bug.\n- ML-DSA: Removed FIPS 204-ipd (initial public draft) and replaced it with FIPS 204 final version.\n- Added new API for digital signatures with context strings; see https://github.com/open-quantum-safe/liboqs/issues/2001 for plan to remove old API without context string.\n- Added fuzzing tests for signature schemes.\n- Added benchmarking for stateful hash-based signature schemes.\n\n### Other changes\n\n- Updated CBOM format to version 1.6.\n- Added a function `OQS_thread_stop` to be called by multi-threaded applications to properly deallocate resources in a threaded execution.\n- Added preprocessor macros conveying liboqs version information.\n\n---\n\nDetailed changelog\n------------------\n\n## What's Changed\n\n* 0.11.0 release by @praveksharma in https://github.com/open-quantum-safe/liboqs/pull/1939\n* Bump version to 0.11.1-dev by @SWilson4 in https://github.com/open-quantum-safe/liboqs/pull/1940\n* Remove hardcoded build patch from test script by @iyanmv in https://github.com/open-quantum-safe/liboqs/pull/1938\n* Don't include dlfcn.h for Windows by @steenrasmussen in https://github.com/open-quantum-safe/liboqs/pull/1936\n* Update CBOM format to upstream v1.6 by @bhess in https://github.com/open-quantum-safe/liboqs/pull/1834\n* Downgrade zephyr container to v0.26.14 to avoid build failures by @bhess in https://github.com/open-quantum-safe/liboqs/pull/1949\n* Fix for Zephyr CI by @Frauschi in https://github.com/open-quantum-safe/liboqs/pull/1953\n* Add a basic fuzz testing harness for Dilithium2 by @nathaniel-brough in https://github.com/open-quantum-safe/liboqs/pull/1905\n* [#1823] replace malloc/calloc/strdup/free with openssl allocator by @songlingatpan in https://github.com/open-quantum-safe/liboqs/pull/1926\n* Add benchmarking for stateful hash based schemes: speed_sig_stfl by @cr-marcstevens in https://github.com/open-quantum-safe/liboqs/pull/1952\n* Update CODEOWNERS by @dstebila in https://github.com/open-quantum-safe/liboqs/pull/1943\n* Add new API to cleanup OpenSSL threads. by @ashman-p in https://github.com/open-quantum-safe/liboqs/pull/1959\n* Adapt existing sig fuzz harness including more algorithms by @nathaniel-brough in https://github.com/open-quantum-safe/liboqs/pull/1955\n* add C++ linking test by @aidenfoxivey in https://github.com/open-quantum-safe/liboqs/pull/1971\n* Make random/functions deterministic during fuzzing by @nathaniel-brough in https://github.com/open-quantum-safe/liboqs/pull/1974\n* Remove SPHINCS+ aarch64 code by @SWilson4 in https://github.com/open-quantum-safe/liboqs/pull/1972\n* Remove macos-12 runner due to GitHub deprecation. by @SWilson4 in https://github.com/open-quantum-safe/liboqs/pull/1977\n* Revert \"Disable erroring TravisCI build\" by @bhess in https://github.com/open-quantum-safe/liboqs/pull/1960\n* imported fix from CROSS upstream: endianness-aware csprng by @rtjk in https://github.com/open-quantum-safe/liboqs/pull/1983\n* chore: Add CI badges to README.md by @ChinoUkaegbu in https://github.com/open-quantum-safe/liboqs/pull/1987\n* Update PLATFORMS.md / re-enable CROSS on s390x by @SWilson4 in https://github.com/open-quantum-safe/liboqs/pull/1988\n* Avoid OpenSSL functions are unconditionally called at OQS_destroy by @ueno in https://github.com/open-quantum-safe/liboqs/pull/1982\n* Test Improvements for ML-KEM by @abhinav-thales in https://github.com/open-quantum-safe/liboqs/pull/1947\n* Add patch to fix HQC decapsulation in https://github.com/open-quantum-safe/liboqs/commit/95f904bcaafe4cb12cfdf029347ac3b7c795308a\n* Run copy_from_upstream.py in https://github.com/open-quantum-safe/liboqs/commit/cce1bfde4e52c524b087b9687020d283fbde0f24\n* Fix LMS crash by @ashman-p in https://github.com/open-quantum-safe/liboqs/pull/1998\n* Set ML-KEM alg_version to \"FIPS203\" by @SWilson4 in https://github.com/open-quantum-safe/liboqs/pull/1997\n* Add ML-DSA / FIPS 204 final by @bhess in https://github.com/open-quantum-safe/liboqs/pull/1919\n* Add defines for OQS version components by @dstebila in https://github.com/open-quantum-safe/liboqs/pull/2000\n* Create liboqs 0.12.0 release candidate 1 by @dstebila in https://github.com/open-quantum-safe/liboqs/pull/2006\n\n## New Contributors\n\n* @steenrasmussen made their first contribution in https://github.com/open-quantum-safe/liboqs/pull/1936\n* @nathaniel-brough made their first contribution in https://github.com/open-quantum-safe/liboqs/pull/1905\n* @songlingatpan made their first contribution in https://github.com/open-quantum-safe/liboqs/pull/1926\n* @cr-marcstevens made their first contribution in https://github.com/open-quantum-safe/liboqs/pull/1952\n* @aidenfoxivey made their first contribution in https://github.com/open-quantum-safe/liboqs/pull/1971\n* @ChinoUkaegbu made their first contribution in https://github.com/open-quantum-safe/liboqs/pull/1987\n* @abhinav-thales made their first contribution in https://github.com/open-quantum-safe/liboqs/pull/1947\n\n**Full Changelog**: https://github.com/open-quantum-safe/liboqs/compare/0.11.0...0.12.0\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5380859375,
          "content": "# Security Policy\n\n## Supported Versions\n\nWe only support the most recent release.\n\nUsing any code prior to 0.10.1 is strongly discouraged due to a [known security vulnerability in Kyber](https://github.com/open-quantum-safe/liboqs/releases/tag/0.10.1).\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 0.12.0  | :white_check_mark: |\n| < 0.12  | :x:                |\n\n## Reporting a Vulnerability\nPlease follow [this information to report a vulnerability](https://openquantumsafe.org/liboqs/security.html#reporting-security-bugs).\n"
        },
        {
          "name": "cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "zephyr",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}