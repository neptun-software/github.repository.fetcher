{
  "metadata": {
    "timestamp": 1736709785402,
    "page": 235,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "webui-dev/webui",
      "stars": 3220,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.11328125,
          "content": "# Build\nbuild/\n*.exe\n*.ilk\n*.pdb\n*.exp\n*.res\n*.out\n*.def\n\n# All sub-level build binaries\n*/**/*\n!*/**/*/\n!*/**/*.*\n!*makefile\n!Makefile\n*/**/*.exe\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Logs\n*.log\n*.logs\n*.tlog\n\n# IDE\n.vscode/\n.vs/\n\n# Visual Studio\n.idea/\n*.recipe\n*.idb\n*.iobj\n*.pdb\n\n# Visual Studio for Mac\n.idea/\n\n# Visual Studio cache files\nipch/\n*.dbmdl\n*.dbproj.schemaview\n\n# Others\n.builds\n*~*\n*.cache\n*.swp\n*.bak\n*.tmp\n*.swp\n*.userosscache\n*.err\n*.vspscc\n*.vssscc\n*.pidb\n*.svclog\n*.scc\n\n# NuGet\npackages/\n!packages/repositories.config\n*.nupkg\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# User-specific files\n*.suo\n*.user\n*.userprefs\n*.sln.docstates\n\n# Python\n__pycache__/\ndist/\nwebui2.egg-info/\n\n# Rust\ntarget/\n*.lock\n\n# Broken NTFS\nnul\n\n# Zig\nzig-cache/\nzig-out/\n\n# macOS\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# User-specific private settings\n*.DotSettings.user\n\n# Compressed\n*.zip\n*.gz\n\n# CMake\n**/cmake_install.cmake\n**/CMakeCache.txt\n**/CMakeFiles/\n.zig-cache\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.4814453125,
          "content": "cmake_minimum_required(VERSION 3.10)\n\n# Project name\nproject(WebUILibrary)\n\n# Set C++ standard\nset(CMAKE_CXX_STANDARD 11)\n\n# Variables for library names, source files, etc.\nset(WEBUI_OUT_LIB_NAME \"webui-2\")\n\n# Conditional compilation for TLS\noption(WEBUI_USE_TLS \"Enable TLS support\" OFF)\nif(WEBUI_USE_TLS)\n  find_package(OpenSSL REQUIRED)\n  set(WEBUI_OUT_LIB_NAME \"webui-2-secure\")\nendif()\n\n# Source files (already filled)\nset(SOURCE_FILES\n    src/civetweb/civetweb.c\n    src/webui.c\n)\n\n# Library targets\nadd_library(webui ${SOURCE_FILES})\ntarget_include_directories(webui PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> $<INSTALL_INTERFACE:include>)\ntarget_compile_definitions(webui PUBLIC NDEBUG NO_CACHING NO_CGI USE_WEBSOCKET)\n\nif(BUILD_SHARED_LIBS AND WIN32)\n    target_compile_definitions(webui PRIVATE CIVETWEB_DLL_EXPORTS PUBLIC CIVETWEB_DLL_IMPORTS)\nendif()\n\nif(WEBUI_USE_TLS)\n    target_compile_definitions(webui PUBLIC WEBUI_TLS NO_SSL_DL OPENSSL_API_1_1)\n    target_link_libraries(webui PRIVATE OpenSSL::SSL OpenSSL::Crypto)\nelse()\n    target_compile_definitions(webui PUBLIC NO_SSL)\nendif()\n\nset_target_properties(webui PROPERTIES\n    OUTPUT_NAME ${WEBUI_OUT_LIB_NAME}\n    PREFIX \"\")\n\n# Install headers\ninstall(FILES include/webui.h include/webui.hpp DESTINATION include)\n\n# Install targets\ninstall(TARGETS webui\n    EXPORT webui\n    ARCHIVE DESTINATION lib\n    LIBRARY DESTINATION lib)\n\ninstall(EXPORT webui\n    FILE webui-config.cmake\n    NAMESPACE webui::\n    DESTINATION share/webui\n)\n"
        },
        {
          "name": "GNUmakefile",
          "type": "blob",
          "size": 5.7939453125,
          "content": "# WebUI Library\n\n# == 1. VARIABLES =============================================================\n\nWEBUI_OUT_LIB_NAME = webui-2\n\n# Detect the OS once\nifeq ($(OS),Windows_NT)\nDETECTED_OS := Windows\nelse\nDETECTED_OS := $(shell uname -s)\nendif\n\n# TLS\nWEBUI_USE_TLS =\nWEBUI_TLS_INCLUDE ?= .\nWEBUI_TLS_LIB ?= .\nTLS_CFLAG = -DNO_SSL\nTLS_LDFLAG_DYNAMIC =\nifeq ($(WEBUI_USE_TLS), 1)\nWEBUI_OUT_LIB_NAME = webui-2-secure\nTLS_CFLAG = -DWEBUI_TLS -DNO_SSL_DL -DOPENSSL_API_1_1\nifeq ($(DETECTED_OS),Windows)\nTLS_LDFLAG_DYNAMIC = -lssl -lcrypto -lbcrypt\nelse\nTLS_LDFLAG_DYNAMIC = -lssl -lcrypto\nendif\nendif\n\nMAKEFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))\nMAKEFILE_DIR := $(dir $(MAKEFILE_PATH))\nBUILD_DIR := $(MAKEFILE_DIR)/dist\n\n# ARGS\nCC ?= gcc\nifeq ($(CC), cc)\n\tifeq ($(DETECTED_OS),Darwin)\n\t\tCC = clang\n\telse\n\t\tCC = gcc\n\tendif\nendif\n\n# Allow to add arch-target for macOS CI cross compilation\nARCH_TARGET ?=\n\n# BUILD FLAGS\nCIVETWEB_BUILD_FLAGS := -o civetweb.o -I\"$(MAKEFILE_DIR)/include/\" -c \"$(MAKEFILE_DIR)/src/civetweb/civetweb.c\" -I\"$(WEBUI_TLS_INCLUDE)\" $(TLS_CFLAG) -w\nCIVETWEB_DEFINE_FLAGS = -DNDEBUG -DNO_CACHING -DNO_CGI -DUSE_WEBSOCKET $(TLS_CFLAG)\nWEBUI_BUILD_FLAGS := -o webui.o -I\"$(MAKEFILE_DIR)/include/\" -c \"$(MAKEFILE_DIR)/src/webui.c\" -I\"$(WEBUI_TLS_INCLUDE)\" $(TLS_CFLAG)\nWARNING_RELEASE := -w\nWARNING_LOG := -Wall -Wno-unused\n\n# OUTPUT FILES\n# The static output is the same for all platforms\n# The dynamic output is platform dependent\nLIB_STATIC_OUT := lib$(WEBUI_OUT_LIB_NAME)-static.a\n\n# Platform defaults and dynamic library outputs\nifeq ($(DETECTED_OS),Windows)\n\t# Windows\n\tSHELL := CMD\n\tPLATFORM := windows\n\tLIB_DYN_OUT := $(WEBUI_OUT_LIB_NAME).dll\n\tLWS2_OPT := -lws2_32 -lole32\n\tCIVETWEB_DEFINE_FLAGS += -DMUST_IMPLEMENT_CLOCK_GETTIME\nelse ifeq ($(DETECTED_OS),Darwin)\n\t# MacOS\n\tPLATFORM := macos\n\tCC = clang\n\tLIB_DYN_OUT := $(WEBUI_OUT_LIB_NAME).dylib\n\tWEBKIT_OBJ := wkwebview.o\n\tWKWEBKIT_BUILD_FLAGS := -o wkwebview.o -c \"$(MAKEFILE_DIR)/src/webview/wkwebview.m\"\n\tWKWEBKIT_LINK_FLAGS := -framework Cocoa -framework WebKit\nelse\n\t# Linux\n\tPLATFORM := linux\n\tLIB_DYN_OUT := $(WEBUI_OUT_LIB_NAME).so\n\tifeq ($(CC),clang)\n\t\tLLVM_OPT := llvm-\n\tendif\nendif\n\n# macOS can set `ARCH_TARGET=arm64` for cross-compilation.\nifneq ($(ARCH_TARGET),)\n\tifneq ($(PLATFORM),macos)\n\t\t$(error ARCH_TARGET is only available on macOS)\n\tendif\n\tifeq ($(ARCH_TARGET),arm64)\n\t\tTARGET := -target arm64-apple-darwin -arch arm64\n\telse ifeq ($(ARCH_TARGET),x64)\n\t\tTARGET := -target x86_64-apple-darwin -arch x86_64\n\telse\n\t\t$(error Unsupported ARCH_TARGET: $(ARCH_TARGET). Use 'arm64' or 'x64'.)\n\tendif\nendif\n\n# == 2.TARGETS ================================================================\n\nall: release\n\ndebug: --debug\n\nrelease: --release\n\nclean: --clean-$(PLATFORM)\n\n# == 2.1 INTERNAL TARGETS =====================================================\n\n--debug:\n# Create build directory\nifeq ($(PLATFORM),windows)\n\t@mkdir \"$(BUILD_DIR)/debug\" >nul 2>&1 ||:\nelse\n\t@mkdir -p \"$(BUILD_DIR)/debug\"\nendif\n#\tBuild macOS WKWebView\nifeq ($(DETECTED_OS),Darwin)\n\t@cd \"$(BUILD_DIR)/debug\" \\\n\t&& echo \"Build WebUI Objective-C WKWebKit ($(CC) $(TARGET) debug)...\" \\\n\t&& $(CC) $(TARGET) $(WKWEBKIT_BUILD_FLAGS) -g -DWEBUI_LOG\nendif\n#\tStatic with Debug info\n\t@cd \"$(BUILD_DIR)/debug\" \\\n\t&& echo \"Build WebUI library ($(CC) $(TARGET) debug static)...\" \\\n\t&& $(CC) $(TARGET) $(CIVETWEB_BUILD_FLAGS) $(CIVETWEB_DEFINE_FLAGS) -g \\\n\t&& $(CC) $(TARGET) $(WEBUI_BUILD_FLAGS) $(WARNING_LOG) -g -DWEBUI_LOG \\\n\t&& $(LLVM_OPT)ar rc $(LIB_STATIC_OUT) webui.o civetweb.o $(WEBKIT_OBJ) \\\n\t&& $(LLVM_OPT)ranlib $(LIB_STATIC_OUT)\n#\tDynamic with Debug info\n\t@cd \"$(BUILD_DIR)/debug\" \\\n\t&& echo \"Build WebUI library ($(CC) $(TARGET) debug dynamic)...\" \\\n\t&& $(CC) $(TARGET) $(CIVETWEB_BUILD_FLAGS) $(CIVETWEB_DEFINE_FLAGS) -g -fPIC \\\n\t&& $(CC) $(TARGET) $(WEBUI_BUILD_FLAGS) $(WARNING_LOG) -g -fPIC -DWEBUI_LOG -DWEBUI_DYNAMIC \\\n\t&& $(CC) $(TARGET) -shared -o $(LIB_DYN_OUT) webui.o civetweb.o $(WEBKIT_OBJ) -g -L\"$(WEBUI_TLS_LIB)\" $(TLS_LDFLAG_DYNAMIC) $(LWS2_OPT) $(WKWEBKIT_LINK_FLAGS)\nifeq ($(PLATFORM),windows)\n\t@cd \"$(BUILD_DIR)/debug\" && del *.o >nul 2>&1\nelse\n\t@rm -f $(BUILD_DIR)/debug/*.o\nendif\n\t@echo \"Done.\"\n\n--release:\n# Create build directory\nifeq ($(PLATFORM),windows)\n\t@mkdir \"$(BUILD_DIR)\" >nul 2>&1 ||:\nelse\n\t@mkdir -p \"$(BUILD_DIR)\"\nendif\n#\tBuild macOS WKWebView\nifeq ($(DETECTED_OS),Darwin)\n\t@cd \"$(BUILD_DIR)\" \\\n\t&& echo \"Build WebUI Objective-C WKWebKit ($(CC) $(TARGET) release)...\" \\\n\t&& $(CC) $(TARGET) $(WKWEBKIT_BUILD_FLAGS) -Os\nendif\n#\tStatic Release\n\t@cd \"$(BUILD_DIR)\" \\\n\t&& echo \"Build WebUI library ($(CC) $(TARGET) release static)...\" \\\n\t&& $(CC) $(TARGET) $(CIVETWEB_BUILD_FLAGS) $(CIVETWEB_DEFINE_FLAGS) -Os \\\n\t&& $(CC) $(TARGET) $(WEBUI_BUILD_FLAGS) $(WARNING_RELEASE) -Os \\\n\t&& $(LLVM_OPT)ar rc $(LIB_STATIC_OUT) webui.o civetweb.o $(WEBKIT_OBJ) \\\n\t&& $(LLVM_OPT)ranlib $(LIB_STATIC_OUT)\n#\tDynamic Release\n\t@cd \"$(BUILD_DIR)\" \\\n\t&& echo \"Build WebUI library ($(CC) $(TARGET) release dynamic)...\" \\\n\t&& $(CC) $(TARGET) $(CIVETWEB_BUILD_FLAGS) $(CIVETWEB_DEFINE_FLAGS) -Os -fPIC \\\n\t&& $(CC) $(TARGET) $(WEBUI_BUILD_FLAGS) $(WARNING_RELEASE) -O3 -fPIC -DWEBUI_DYNAMIC \\\n\t&& $(CC) $(TARGET) -shared -o $(LIB_DYN_OUT) webui.o civetweb.o $(WEBKIT_OBJ) -L\"$(WEBUI_TLS_LIB)\" $(TLS_LDFLAG_DYNAMIC) $(LWS2_OPT) $(WKWEBKIT_LINK_FLAGS)\n#\tClean\nifeq ($(PLATFORM),windows)\n\t@strip --strip-unneeded $(BUILD_DIR)/$(LIB_DYN_OUT)\n\t@cd \"$(BUILD_DIR)\" && del *.o >nul 2>&1\nelse\n\t@rm -f $(BUILD_DIR)/*.o\nendif\n\t@echo \"Done.\"\n\n# PLATFROM CLEAN TARGETS\n\n--clean-linux: --clean-unix\n\n--clean-macos: --clean-unix\n\n--clean-unix:\n\t@- cd \"$(BUILD_DIR)\" \\\n\t&& rm -f *.o \\\n\t&& rm -f *.so \\\n\t&& rm -f *.dylib \\\n\t&& rm -f *.a\n\n--clean-windows:\n\t@- cd \"$(BUILD_DIR)\" \\\n\t&& del *.a >nul 2>&1 \\\n\t&& del *.o >nul 2>&1 \\\n\t&& del *.dll >nul 2>&1 \\\n\t&& del *.obj >nul 2>&1 \\\n\t&& del *.ilk >nul 2>&1 \\\n\t&& del *.pdb >nul 2>&1 \\\n\t&& del *.lib >nul 2>&1 \\\n\t&& del *.exp >nul 2>&1\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2024 Hassan Draga\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.724609375,
          "content": "# WebUI Library\n# Windows - Microsoft Visual C\n\n# == 1. VARIABLES =============================================================\n\nWEBUI_OUT_LIB_NAME = webui-2\nTLS_CFLAG = /DNO_SSL\n\n# TLS Enabled\n!IF \"$(WEBUI_USE_TLS)\" == \"1\"\n\nWEBUI_OUT_LIB_NAME = webui-2-secure\nTLS_CFLAG = /DWEBUI_TLS /DNO_SSL_DL /DOPENSSL_API_1_1\nTLS_LDFLAG_DYNAMIC = libssl.lib libcrypto.lib\n\n!IF \"$(WEBUI_TLS_INCLUDE)\" != \"\"\nTLS_CFLAG = $(TLS_CFLAG) /I\"$(WEBUI_TLS_INCLUDE)\"\n!ELSE\nTLS_CFLAG = $(TLS_CFLAG) /I\".\"\n!ENDIF\n\n!IF \"$(WEBUI_TLS_LIB)\" != \"\"\nTLS_LDFLAG_DYNAMIC = $(TLS_LDFLAG_DYNAMIC) /LIBPATH:\"$(WEBUI_TLS_LIB)\"\n!ELSE\nTLS_LDFLAG_DYNAMIC += $(TLS_LDFLAG_DYNAMIC) /LIBPATH:\".\"\n!ENDIF\n\n!ENDIF\n\n# Build Flags\nCIVETWEB_BUILD_FLAGS = /Fo\"civetweb.obj\" /c /EHsc \"$(MAKEDIR)/src/civetweb/civetweb.c\" /I\"$(MAKEDIR)/src/civetweb/\" $(TLS_CFLAG)\nCIVETWEB_DEFINE_FLAGS = /D NDEBUG /D NO_CACHING /D NO_CGI /D USE_WEBSOCKET\nWEBUI_BUILD_FLAGS = /Fo\"webui.obj\" /c /EHsc \"$(MAKEDIR)/src/webui.c\" /I\"$(MAKEDIR)/include\" /I\"$(WEBUI_TLS_INCLUDE)\" $(TLS_CFLAG)\nWARNING_RELEASE = /w\nWARNING_LOG = /W4\n\n# Output Commands\nLIB_STATIC_OUT = /OUT:\"$(WEBUI_OUT_LIB_NAME)-static.lib\" \"webui.obj\" \"civetweb.obj\"\nLIB_DYN_OUT = /DLL /OUT:\"$(WEBUI_OUT_LIB_NAME).dll\" \"webui.obj\" \"civetweb.obj\" user32.lib Advapi32.lib Shell32.lib Ole32.lib $(TLS_LDFLAG_DYNAMIC)\n\n# == 2.TARGETS ================================================================\n\nall: release\n\ndebug:\n\t@- mkdir dist\\debug >nul 2>&1\n#\tStatic with Debug info\n\t@- cd $(MAKEDIR)/dist/debug\n\t@echo Build WebUI Library (MSVC Debug Static)...\n\t@cl /Zl /Zi $(CIVETWEB_BUILD_FLAGS) $(CIVETWEB_DEFINE_FLAGS)\n\t@cl /Zl /Zi $(WEBUI_BUILD_FLAGS) $(WARNING_LOG) /D WEBUI_LOG\n\t@lib $(LIB_STATIC_OUT)\n#\tDynamic with Debug info\n\t@echo Build WebUI Library (MSVC Debug Dynamic)...\n\t@cl /Zi $(CIVETWEB_BUILD_FLAGS) $(CIVETWEB_DEFINE_FLAGS)\n\t@cl /Zi $(WEBUI_BUILD_FLAGS) $(WARNING_LOG) /D WEBUI_LOG /D WEBUI_DYNAMIC\n\t@link $(LIB_DYN_OUT)\n#\tClean\n\t@- del *.obj >nul 2>&1\n\t@- del *.ilk >nul 2>&1\n\t@- del *.exp >nul 2>&1\n\t@echo Done.\n\nrelease:\n\t@- mkdir dist >nul 2>&1\n\t@- cd $(MAKEDIR)/dist\n#\tStatic Release\n\t@echo Build WebUI Library (MSVC Release Static)...\n\t@cl /Zl $(CIVETWEB_BUILD_FLAGS) $(CIVETWEB_DEFINE_FLAGS)\n\t@cl /Zl $(WEBUI_BUILD_FLAGS) $(WARNING_RELEASE)\n\t@lib $(LIB_STATIC_OUT)\n#\tDynamic Release\n\t@echo Build WebUI Library (MSVC Release Dynamic)...\n\t@cl $(CIVETWEB_BUILD_FLAGS) $(CIVETWEB_DEFINE_FLAGS)\n\t@cl $(WEBUI_BUILD_FLAGS) $(WARNING_RELEASE) /D WEBUI_DYNAMIC\n\t@link $(LIB_DYN_OUT)\n#\tClean\n\t@- del *.pdb >nul 2>&1\n\t@- del *.obj >nul 2>&1\n\t@- del *.ilk >nul 2>&1\n\t@- del *.exp >nul 2>&1\n\t@- echo Done.\n\nclean:\n\t@- cd $(BUILD_DIR)\n\t@- del *.pdb >nul 2>&1\n\t@- del *.obj >nul 2>&1\n\t@- del *.ilk >nul 2>&1\n\t@- del *.exp >nul 2>&1\n\t@- del *.dll >nul 2>&1\n\t@- del *.lib >nul 2>&1\n\t@- echo Done.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.564453125,
          "content": "<div align=\"center\">\n\n![Logo](https://raw.githubusercontent.com/webui-dev/webui-logo/14fd595844f57ce751dfc751297b1468b10de77a/webui_120.svg)\n\n# WebUI v2.5.0-beta.3\n\n[build-status]: https://img.shields.io/github/actions/workflow/status/webui-dev/webui/ci.yml?branch=main&style=for-the-badge&logo=githubactions&labelColor=414868&logoColor=C0CAF5\n[last-commit]: https://img.shields.io/github/last-commit/webui-dev/webui?style=for-the-badge&logo=github&logoColor=C0CAF5&labelColor=414868\n[release-version]: https://img.shields.io/github/v/tag/webui-dev/webui?style=for-the-badge&logo=webtrees&logoColor=C0CAF5&labelColor=414868&color=7664C6\n[license]: https://img.shields.io/github/license/webui-dev/webui?style=for-the-badge&logo=opensourcehardware&label=License&logoColor=C0CAF5&labelColor=414868&color=8c73cc\n\n[![][build-status]](https://github.com/webui-dev/webui/actions?query=branch%3Amain)\n[![][last-commit]](https://github.com/webui-dev/webui/pulse)\n[![][release-version]](https://github.com/webui-dev/webui/releases/latest)\n[![][license]](https://github.com/webui-dev/webui/blob/main/LICENSE)\n\n> Use any web browser or WebView as GUI, with your preferred language in the backend and modern web technologies in the frontend, all in a lightweight portable library.\n\n![Screenshot](https://raw.githubusercontent.com/webui-dev/webui-logo/main/screenshot.png)\n\n</div>\n\n## Download\n\n- [Latest Stable Release](https://github.com/webui-dev/webui/releases)\n- [Nightly Build](https://github.com/webui-dev/webui/releases/tag/nightly)\n\n## Contents\n\n- [Features](#features)\n- [Showcase](#showcase)\n- [UI & The Web Technologies](#ui--the-web-technologies)\n- [Documentation](#documentation)\n- [Build](#build)\n- [Examples](#examples)\n- [Wrappers](#wrappers)\n- [Supported Web Browsers](#supported-web-browsers)\n- [License](#license)\n\n## Features\n\n- Portable (*Needs only a web browser or a WebView at runtime*)\n- One header file\n- Lightweight (*Few Kb library*) & Small memory footprint\n- Fast binary communication protocol\n- Multi-platform & Multi-Browser\n- Using private profile for safety\n- Cross-platform WebView\n\n## UI & The Web Technologies\n\n[Borislav Stanimirov](https://ibob.bg/) discusses using HTML5 in the web browser as GUI at the [C++ Conference 2019 (_YouTube_)](https://www.youtube.com/watch?v=bbbcZd4cuxg).\n\n<div align=\"center\">\n\n![CPPCon](https://github.com/webui-dev/webui/assets/34311583/4e830caa-4ca0-44ff-825f-7cd6d94083c8)\n\n</div>\n\nWeb application UI design is not just about how a product looks but how it works. Using web technologies in your UI makes your product modern and professional, And a well-designed web application will help you make a solid first impression on potential customers. Great web application design also assists you in nurturing leads and increasing conversions. In addition, it makes navigating and using your web app easier for your users.\n\n### Why Use Web Browsers?\n\nToday's web browsers have everything a modern UI needs. Web browsers are very sophisticated and optimized. Therefore, using it as a GUI will be an excellent choice. While old legacy GUI lib is complex and outdated, a WebView-based app is still an option. However, a WebView needs a huge SDK to build and many dependencies to run, and it can only provide some features like a real web browser. That is why WebUI uses real web browsers to give you full features of comprehensive web technologies while keeping your software lightweight and portable.\n\n### How Does it Work?\n\n<div align=\"center\">\n\n![Diagram](https://github.com/ttytm/webui/assets/34311583/dbde3573-3161-421e-925c-392a39f45ab3)\n\n</div>\n\nThink of WebUI like a WebView controller, but instead of embedding the WebView controller in your program, which makes the final program big in size, and non-portable as it needs the WebView runtimes. Instead, by using WebUI, you use a tiny static/dynamic library to run any installed web browser and use it as GUI, which makes your program small, fast, and portable. **All it needs is a web browser**.\n\n### Runtime Dependencies Comparison\n\n|                                 | Tauri / WebView   | Qt                         | WebUI               |\n| ------------------------------- | ----------------- | -------------------------- | ------------------- |\n| Runtime Dependencies on Windows | _WebView2_        | _QtCore, QtGui, QtWidgets_ | **_A Web Browser_** |\n| Runtime Dependencies on Linux   | _GTK3, WebKitGTK_ | _QtCore, QtGui, QtWidgets_ | **_A Web Browser_** |\n| Runtime Dependencies on macOS   | _Cocoa, WebKit_   | _QtCore, QtGui, QtWidgets_ | **_A Web Browser_** |\n\n## Documentation\n\n> **Note**\n> We are currently writing documentation.\n\n- [Online Documentation - C](https://webui.me/docs/#/c_api)\n- [Online Documentation - C++](https://webui.me/docs/#/cpp_api)\n\n## Build\n\n- **Windows**\n\n  ```powershell\n  # GCC\n  mingw32-make\n\n  # MSVC\n  nmake\n  ```\n\n  **Windows SSL/TLS (_Optional_)**\n\n  Download and install the OpenSSL pre-compiled binaries for Windows:\n\n  - MSVC: [x64 OpenSSL v3.3.1](https://slproweb.com/download/Win64OpenSSL-3_3_1.msi) or [_32Bit_](https://slproweb.com/download/Win32OpenSSL-3_3_1.msi). Please check this [Wiki list](https://wiki.openssl.org/index.php/Binaries) for more info.\n  - MinGW: [Curl for Windows win OpenSSL](https://curl.se/windows/)\n\n  ```powershell\n  # GCC\n  mingw32-make WEBUI_USE_TLS=1 WEBUI_TLS_INCLUDE=\"C:\\curl-xxx-xxx-mingw\\curl-xxx-xxx-mingw\\include\" WEBUI_TLS_LIB=\"C:\\curl-xxx-xxx-mingw\\curl-xxx-xxx-mingw\\lib\"\n\n  # MSVC\n  nmake WEBUI_USE_TLS=1 WEBUI_TLS_INCLUDE=\"C:\\Program Files\\OpenSSL-xxx\\include\" WEBUI_TLS_LIB=\"C:\\Program Files\\OpenSSL-xxx\\lib\"\n  ```\n\n- **Linux**\n\n  ```sh\n  # GCC\n  make\n\n  # Clang\n  make CC=clang\n  ```\n\n  **Linux SSL/TLS (_Optional_)**\n\n  ```sh\n  sudo apt update\n  sudo apt install libssl-dev\n\n  # GCC\n  make WEBUI_USE_TLS=1\n\n  # Clang\n  make WEBUI_USE_TLS=1 CC=clang\n  ```\n\n- **macOS**\n\n  ```sh\n  make\n  ```\n\n  **macOS SSL/TLS (_Optional_)**\n\n  ```sh\n  brew install openssl\n  make WEBUI_USE_TLS=1\n  ```\n\n## Examples\n\n- [C](https://github.com/webui-dev/webui/tree/main/examples/C)\n- [C++](https://github.com/webui-dev/webui/tree/main/examples/C++)\n\n## Wrappers\n\n| Language        | v2.4.0 API | v2.5.0 API | Link                                                    |\n| --------------- | --- | -------------- | ---------------------------------------------------------  |\n| Python          | ✔️ | _not complete_ | [Python-WebUI](https://github.com/webui-dev/python-webui)  |\n| Go              | ✔️ | _not complete_ | [Go-WebUI](https://github.com/webui-dev/go-webui)          |\n| Zig             | ✔️ |  _not complete_ | [Zig-WebUI](https://github.com/webui-dev/zig-webui)        |\n| Nim             | ✔️ |  _not complete_ | [Nim-WebUI](https://github.com/webui-dev/nim-webui)        |\n| V               | ✔️ |  _not complete_ | [V-WebUI](https://github.com/webui-dev/v-webui)            |\n| Rust            | _not complete_ |  _not complete_ | [Rust-WebUI](https://github.com/webui-dev/rust-webui)      |\n| TS / JS (Deno)  | ✔️ |  _not complete_ | [Deno-WebUI](https://github.com/webui-dev/deno-webui)      |\n| TS / JS (Bun)   | _not complete_ |  _not complete_ | [Bun-WebUI](https://github.com/webui-dev/bun-webui)        |\n| Swift           | _not complete_ |  _not complete_ | [Swift-WebUI](https://github.com/webui-dev/swift-webui)    |\n| Odin            | _not complete_ |  _not complete_ | [Odin-WebUI](https://github.com/webui-dev/odin-webui)      |\n| Pascal          | _not complete_ |  _not complete_ | [Pascal-WebUI](https://github.com/webui-dev/pascal-webui)  |\n| Purebasic       | _not complete_ |  _not complete_ | [Purebasic-WebUI](https://github.com/webui-dev/purebasic-webui)|\n| - |  |  |\n| Common Lisp     | _not complete_ |  _not complete_ | [cl-webui](https://github.com/garlic0x1/cl-webui)          |\n| Delphi          | _not complete_ |  _not complete_ | [WebUI4Delphi](https://github.com/salvadordf/WebUI4Delphi) |\n| C#              | _not complete_ |  _not complete_ | [WebUI4CSharp](https://github.com/salvadordf/WebUI4CSharp) |\n| WebUI.NET       | _not complete_ |  _not complete_ | [WebUI.NET](https://github.com/Juff-Ma/WebUI.NET)          |\n| QuickJS         | _not complete_ |  _not complete_ | [QuickUI](https://github.com/xland/QuickUI)                |\n| PHP             | _not complete_ |  _not complete_ | [PHPWebUiComposer](https://github.com/KingBes/php-webui-composer) |\n\n## Supported Web Browsers\n\n| Browser         | Windows         | macOS         | Linux           |\n| --------------- | --------------- | ------------- | --------------- |\n| Mozilla Firefox | ✔️              | ✔️            | ✔️              |\n| Google Chrome   | ✔️              | ✔️            | ✔️              |\n| Microsoft Edge  | ✔️              | ✔️            | ✔️              |\n| Chromium        | ✔️              | ✔️            | ✔️              |\n| Yandex          | ✔️              | ✔️            | ✔️              |\n| Brave           | ✔️              | ✔️            | ✔️              |\n| Vivaldi         | ✔️              | ✔️            | ✔️              |\n| Epic            | ✔️              | ✔️            | _not available_ |\n| Apple Safari    | _not available_ | _coming soon_ | _not available_ |\n| Opera           | _coming soon_   | _coming soon_ | _coming soon_   |\n\n## Supported WebView\n\n| WebView         | Status         |\n| --------------- | --------------- |\n| Windows WebView2 | ✔️ |\n| Linux GTK WebView   | ✔️ |\n| macOS WKWebView  | ✔️ |\n\n### License\n\n> Licensed under MIT License.\n\n### Stargazers\n\n[![Stargazers repo roster for @webui-dev/webui](https://reporoster.com/stars/webui-dev/webui)](https://github.com/webui-dev/webui/stargazers)\n"
        },
        {
          "name": "bridge",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.zig",
          "type": "blob",
          "size": 7.2177734375,
          "content": "const std = @import(\"std\");\nconst builtin = @import(\"builtin\");\n\nconst Build = std.Build;\nconst OptimizeMode = std.builtin.OptimizeMode;\nconst Compile = Build.Step.Compile;\nconst Module = Build.Module;\n\nconst lib_name = \"webui\";\nconst zig_ver = builtin.zig_version.minor;\nvar global_log_level: std.log.Level = .warn;\n\n/// Vendored dependencies of webui.\npub const Dependency = enum {\n    civetweb,\n    // TODO: Check and add all vendored dependencies, e.g. \"webview\"\n};\n\nconst DebugDependencies = std.EnumSet(Dependency);\n\npub fn build(b: *Build) !void {\n    const target = b.standardTargetOptions(.{});\n    const optimize = b.standardOptimizeOption(.{});\n\n    switch (comptime zig_ver) {\n        12, 13, 14 => {},\n        else => return error.UnsupportedZigVersion,\n    }\n\n    const is_dynamic = b.option(bool, \"dynamic\", \"build the dynamic library\") orelse false;\n    const enable_tls = b.option(bool, \"enable-tls\", \"enable TLS support\") orelse false;\n    const verbose = b.option(std.log.Level, \"verbose\", \"set verbose output\") orelse .warn;\n    global_log_level = verbose;\n    // TODO: Support list of dependencies once support is limited to >0.13.0\n    const debug = b.option(Dependency, \"debug\", \"enable dependency debug output\");\n    const debug_dependencies = DebugDependencies.initMany(if (debug) |d| &.{d} else &.{});\n\n    if (enable_tls and !target.query.isNative()) {\n        log(.err, .WebUI, \"cross compilation is not supported with TLS enabled\", .{});\n        return error.InvalidBuildConfiguration;\n    }\n\n    log(.info, .WebUI, \"Building {s} WebUI library{s}...\", .{\n        if (is_dynamic) \"dynamic\" else \"static\",\n        if (enable_tls) \" with TLS support\" else \"\",\n    });\n    defer {\n        log(.info, .WebUI, \"Done.\", .{});\n    }\n\n    const webui = if (is_dynamic) b.addSharedLibrary(.{\n        .name = lib_name,\n        .target = target,\n        .optimize = optimize,\n        .pic = true,\n    }) else b.addStaticLibrary(.{\n        .name = lib_name,\n        .target = target,\n        .optimize = optimize,\n    });\n    try addLinkerFlags(b, webui, enable_tls, debug_dependencies);\n\n    b.installArtifact(webui);\n\n    try build_examples(b, webui);\n}\n\nfn addLinkerFlags(\n    b: *Build,\n    webui: *Compile,\n    enable_tls: bool,\n    debug_dependencies: DebugDependencies,\n) !void {\n    const webui_target = webui.rootModuleTarget();\n    const is_windows = webui_target.os.tag == .windows;\n    const debug = webui.root_module.optimize.? == .Debug;\n\n    // Prepare compiler flags.\n    const no_tls_flags: []const []const u8 = &.{\"-DNO_SSL\"};\n    const tls_flags: []const []const u8 = &.{ \"-DWEBUI_TLS\", \"-DNO_SSL_DL\", \"-DOPENSSL_API_1_1\" };\n    const civetweb_flags: []const []const u8 = &.{\n        \"-DNO_CACHING\",\n        \"-DNO_CGI\",\n        \"-DUSE_WEBSOCKET\",\n        \"-Wno-error=date-time\",\n    };\n\n    if (debug) {\n        webui.root_module.addCMacro(\"WEBUI_LOG\", \"\");\n    }\n    webui.addCSourceFile(.{\n        .file = b.path(\"src/webui.c\"),\n        .flags = if (enable_tls) tls_flags else no_tls_flags,\n    });\n\n    const civetweb_debug = debug and debug_dependencies.contains(.civetweb);\n    webui.addCSourceFile(.{\n        .file = b.path(\"src/civetweb/civetweb.c\"),\n        .flags = if (enable_tls and !civetweb_debug)\n            civetweb_flags ++ tls_flags ++ .{\"-DNDEBUG\"}\n        else if (enable_tls and civetweb_debug)\n            civetweb_flags ++ tls_flags\n        else if (!enable_tls and !civetweb_debug)\n            civetweb_flags ++ .{\"-DUSE_WEBSOCKET\"} ++ no_tls_flags ++ .{\"-DNDEBUG\"}\n        else\n            civetweb_flags ++ .{\"-DUSE_WEBSOCKET\"} ++ no_tls_flags,\n    });\n    webui.linkLibC();\n    webui.addIncludePath(b.path(\"include\"));\n    webui.installHeader(b.path(\"include/webui.h\"), \"webui.h\");\n    if (webui_target.isDarwin()) {\n        webui.addCSourceFile(.{\n            .file = b.path(\"src/webview/wkwebview.m\"),\n            .flags = &.{},\n        });\n        webui.linkFramework(\"Cocoa\");\n        webui.linkFramework(\"WebKit\");\n    } else if (is_windows) {\n        webui.linkSystemLibrary(\"ws2_32\");\n        webui.linkSystemLibrary(\"ole32\");\n        if (webui_target.abi == .msvc) {\n            webui.linkSystemLibrary(\"Advapi32\");\n            webui.linkSystemLibrary(\"Shell32\");\n            webui.linkSystemLibrary(\"user32\");\n        }\n        if (enable_tls) {\n            webui.linkSystemLibrary(\"bcrypt\");\n        }\n    }\n    if (enable_tls) {\n        webui.linkSystemLibrary(\"ssl\");\n        webui.linkSystemLibrary(\"crypto\");\n    }\n\n    for (webui.root_module.link_objects.items) |lo| {\n        switch (lo) {\n            .c_source_file => |csf| {\n                log(.debug, .WebUI, \"{s} linker flags: {s}\", .{\n                    csf.file.src_path.sub_path,\n                    csf.flags,\n                });\n            },\n            else => {},\n        }\n    }\n}\n\nfn build_examples(b: *Build, webui: *Compile) !void {\n    const build_examples_step = b.step(\"examples\", \"builds the library and its examples\");\n    const target = webui.root_module.resolved_target.?;\n    const optimize = webui.root_module.optimize.?;\n\n    const examples_path = b.path(\"examples/C\").getPath(b);\n    var examples_dir = std.fs.cwd().openDir(\n        examples_path,\n        .{ .iterate = true },\n    ) catch |e| switch (e) {\n        // Do not attempt building examples if directory does not exist.\n        error.FileNotFound => return,\n        else => return e,\n    };\n    defer examples_dir.close();\n\n    var paths = examples_dir.iterate();\n    while (try paths.next()) |val| {\n        if (val.kind != .directory) {\n            continue;\n        }\n        const example_name = val.name;\n\n        const exe = b.addExecutable(.{\n            .name = example_name,\n            .target = target,\n            .optimize = optimize,\n        });\n        const path = try std.fmt.allocPrint(b.allocator, \"examples/C/{s}/main.c\", .{example_name});\n        defer b.allocator.free(path);\n\n        exe.addCSourceFile(.{ .file = b.path(path), .flags = &.{} });\n        exe.linkLibrary(webui);\n\n        const exe_install = b.addInstallArtifact(exe, .{});\n        const exe_run = b.addRunArtifact(exe);\n        const step_name = try std.fmt.allocPrint(b.allocator, \"run_{s}\", .{example_name});\n        defer b.allocator.free(step_name);\n        const step_desc = try std.fmt.allocPrint(b.allocator, \"run example {s}\", .{example_name});\n        defer b.allocator.free(step_desc);\n\n        const cwd = try std.fmt.allocPrint(b.allocator, \"src/examples/{s}\", .{example_name});\n        defer b.allocator.free(cwd);\n        exe_run.setCwd(b.path(cwd));\n\n        exe_run.step.dependOn(&exe_install.step);\n        build_examples_step.dependOn(&exe_install.step);\n        b.step(step_name, step_desc).dependOn(&exe_run.step);\n    }\n}\n\n/// Function to runtime-scope log levels based on build flag, for all scopes.\nfn log(\n    comptime level: std.log.Level,\n    comptime scope: @TypeOf(.EnumLiteral),\n    comptime format: []const u8,\n    args: anytype,\n) void {\n    const should_print: bool = @intFromEnum(global_log_level) >= @intFromEnum(level);\n    if (should_print) {\n        switch (comptime level) {\n            .err => std.log.scoped(scope).err(format, args),\n            .warn => std.log.scoped(scope).warn(format, args),\n            .info => std.log.scoped(scope).info(format, args),\n            .debug => std.log.scoped(scope).debug(format, args),\n        }\n    }\n}\n"
        },
        {
          "name": "build.zig.zon",
          "type": "blob",
          "size": 0.212890625,
          "content": ".{\n    .name = \"webui\",\n    .version = \"2.5.0-beta.3\",\n    .paths = .{\n        \"src\",\n        \"include\",\n        \"bridge\",\n        \"build.zig\",\n        \"build.zig.zon\",\n        \"LICENSE\",\n        \"README.md\",\n    },\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}