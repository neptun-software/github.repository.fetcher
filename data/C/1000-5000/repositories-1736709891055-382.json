{
  "metadata": {
    "timestamp": 1736709891055,
    "page": 382,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "phoboslab/wipeout-rewrite",
      "stars": 2696,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1201171875,
          "content": "/wipeout.sublime-project\n/wipeout.sublime-workspace\n\n/wipeout/\n/build/\n\n/wipegame\n/save.dat\n.DS_STORE\ngamecontrollerdb.txt\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.365234375,
          "content": "cmake_minimum_required(VERSION 3.13 FATAL_ERROR)\nproject(wipeout-rewrite)\n\nif(\"${PROJECT_SOURCE_DIR}\" STREQUAL \"${PROJECT_BINARY_DIR}\")\n\tmessage(FATAL_ERROR \"In-tree builds are not allowed.\")\nendif()\n\ninclude(GNUInstallDirs)\ninclude(CMakeDependentOption)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\n\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\")\n\tset(EMSCRIPTEN true)\nendif()\n\nset(platform_options \"SDL2\" \"SOKOL\")\nset(PLATFORM \"SDL2\" CACHE STRING \"Graphics platform to handle input/output\")\nset_property(CACHE PLATFORM PROPERTY STRINGS \"${platform_options}\")\nif(NOT PLATFORM IN_LIST platform_options)\n\tmessage(FATAL_ERROR \"PLATFORM must be one of ${platform_options}\")\nendif()\n\nset(renderer_options \"GL\" \"GLES2\" \"SOFTWARE\")\nset(RENDERER \"GL\" CACHE STRING \"Graphics rendering backend\")\nset_property(CACHE RENDERER PROPERTY STRINGS \"${renderer_options}\")\nif(NOT RENDERER IN_LIST renderer_options)\n\tmessage(FATAL_ERROR \"RENDERER must be one of ${renderer_options}\")\nendif()\nif(\"${RENDERER}\" MATCHES \"GL(ES2)?\")\n\tset(using_gl true)\nendif()\nif(\"${CMAKE_SYSTEM_NAME}\" MATCHES \"(Linux|FreeBSD)\")\n\tset(has_glvnd true)\nendif()\n\ncmake_dependent_option(USE_GLVND \"Link against modern GLVND ABIs\" ON \"using_gl;has_glvnd\" OFF)\ncmake_dependent_option(MINIMAL_BUNDLE \"Do not include music/movies for web builds\" OFF \"EMSCRIPTEN\" OFF)\noption(PATH_ASSETS \"Path to where the game assets should be located.\")\noption(PATH_USERDATA \"Path to where user data (e.g. game saves) should be located.\")\noption(DEV_BUILD \"Set asset/userdata paths to the source directory for testing\" OFF)\nif (DEV_BUILD)\n\tset(PATH_ASSETS \"${CMAKE_SOURCE_DIR}/\")\n\tset(PATH_USERDATA \"${CMAKE_SOURCE_DIR}/\")\nendif()\n\nfind_package(OpenGL)\nfind_package(GLEW)\nfind_package(SDL2)\n\nset(common_src\n\tsrc/wipeout/camera.c\n\tsrc/wipeout/camera.h\n\tsrc/wipeout/droid.c\n\tsrc/wipeout/droid.h\n\tsrc/wipeout/game.c\n\tsrc/wipeout/game.h\n\tsrc/wipeout/hud.c\n\tsrc/wipeout/hud.h\n\tsrc/wipeout/image.c\n\tsrc/wipeout/image.h\n\tsrc/wipeout/ingame_menus.c\n\tsrc/wipeout/ingame_menus.h\n\tsrc/wipeout/intro.c\n\tsrc/wipeout/intro.h\n\tsrc/wipeout/main_menu.c\n\tsrc/wipeout/main_menu.h\n\tsrc/wipeout/menu.c\n\tsrc/wipeout/menu.h\n\tsrc/wipeout/object.c\n\tsrc/wipeout/object.h\n\tsrc/wipeout/particle.c\n\tsrc/wipeout/particle.h\n\tsrc/wipeout/race.c\n\tsrc/wipeout/race.h\n\tsrc/wipeout/scene.c\n\tsrc/wipeout/scene.h\n\tsrc/wipeout/sfx.c\n\tsrc/wipeout/sfx.h\n\tsrc/wipeout/ship.c\n\tsrc/wipeout/ship.h\n\tsrc/wipeout/ship_ai.c\n\tsrc/wipeout/ship_ai.h\n\tsrc/wipeout/ship_player.c\n\tsrc/wipeout/ship_player.h\n\tsrc/wipeout/title.c\n\tsrc/wipeout/title.h\n\tsrc/wipeout/track.c\n\tsrc/wipeout/track.h\n\tsrc/wipeout/ui.c\n\tsrc/wipeout/ui.h\n\tsrc/wipeout/weapon.c\n\tsrc/wipeout/weapon.h\n\tsrc/input.c\n\tsrc/input.h\n\tsrc/mem.c\n\tsrc/mem.h\n\tsrc/platform.h\n\tsrc/render.h\n\tsrc/system.c\n\tsrc/system.h\n\tsrc/types.c\n\tsrc/types.h\n\tsrc/utils.c\n\tsrc/utils.h\n\n\tpackaging/windows/wipeout.exe.manifest\n\tpackaging/windows/wipeout.rc\n)\n\nadd_executable(wipeout WIN32 ${common_src})\nset_property(TARGET wipeout PROPERTY C_STANDARD 11)\ntarget_include_directories(wipeout PRIVATE src)\ntarget_include_directories(wipeout SYSTEM PRIVATE src/libs)\ntarget_compile_options(wipeout PRIVATE\n\t$<$<CXX_COMPILER_ID:MSVC>:/W4>\n\t$<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Wall -Wextra>\n)\ntarget_compile_definitions(wipeout PRIVATE\n\t$<$<BOOL:${PATH_ASSETS}>:-DPATH_ASSETS=${PATH_ASSETS}>\n\t$<$<BOOL:${PATH_USERDATA}>:-DPATH_USERDATA=${PATH_USERDATA}>\n)\n\nif(WIN32)\n\ttarget_compile_definitions(wipeout PRIVATE\n\t\t\"NOMINMAX\"\n\t\t\"_USE_MATH_DEFINES\"\n\t\t\"_CRT_SECURE_NO_WARNINGS\"\n\t)\nelseif(APPLE)\n\ttarget_compile_definitions(wipeout PRIVATE\n\t\t\"_THREAD_SAFE\"\n\t\t\"GL_SILENCE_DEPRECATION\"\n\t)\n\ttarget_link_libraries(wipeout PUBLIC \"-framework Foundation\")\n\tset_source_files_properties(src/platform_sokol.c PROPERTIES COMPILE_FLAGS \"-x objective-c\")\n\tif(\"${PLATFORM}\" STREQUAL SOKOL)\n\t\ttarget_link_libraries(wipeout PUBLIC\n\t\t\t\"-framework Cocoa\"\n\t\t\t\"-framework QuartzCore\"\n\t\t\t\"-framework AudioToolbox\"\n\t\t)\n\tendif()\nelseif(EMSCRIPTEN)\n\t# Emscripten's CMake modules don't define targets like the standard\n\t# ones do, so we define them ourselves here.\n\tadd_library(GLEW::GLEW INTERFACE IMPORTED)\n\tadd_library(OpenGL::GL INTERFACE IMPORTED)\n\tif (NOT TARGET SDL2::Main)\n\t\tadd_library(SDL2::Main INTERFACE IMPORTED)\n\tendif()\n\tset_target_properties(OpenGL::GL PROPERTIES\n\t\tIMPORTED_LIBNAME \"GL\"\n\t)\n\tset_target_properties(GLEW::GLEW PROPERTIES\n\t\tIMPORTED_LIBNAME \"GLEW\"\n\t)\n\tset_target_properties(SDL2::Main PROPERTIES\n\t\tIMPORTED_LIBNAME \"SDL2\"\n\t\tINTERFACE_COMPILE_OPTIONS \"SHELL:-s USE_SDL=2\"\n\t\tINTERFACE_LINK_LIBRARIES  \"SHELL:-s USE_SDL=2\"\n\t)\n\n\ttarget_link_options(wipeout PRIVATE\n\t\t\"SHELL:-s ALLOW_MEMORY_GROWTH=1\"\n\t\t\"SHELL:-s ENVIRONMENT=web\"\n\t\t\"SHELL:-s FORCE_FILESYSTEM\"\n\t\t\"SHELL:--preload-file ${CMAKE_SOURCE_DIR}/wipeout/@/wipeout\"\n\t)\n\tif(MINIMAL_BUNDLE)\n\t\ttarget_link_options(wipeout PRIVATE\n\t\t\t\"SHELL:--exclude-file ${CMAKE_SOURCE_DIR}/wipeout/music\"\n\t\t\t\"SHELL:--exclude-file ${CMAKE_SOURCE_DIR}/intro.mpeg\"\n\t\t)\n\tendif()\n\n\tconfigure_file(\"${CMAKE_SOURCE_DIR}/src/wasm-index.html\" \"game.html\" COPYONLY)\nelseif(UNIX)\n\ttarget_link_libraries(wipeout PUBLIC m)\n\tif (\"${PLATFORM}\" STREQUAL \"SOKOL\" AND \"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n\t\tfind_package(Threads REQUIRED)\n\t\tfind_package(X11 REQUIRED)\n\t\tfind_package(ALSA REQUIRED)\n\t\ttarget_link_libraries(wipeout PUBLIC\n\t\t\tX11::X11\n\t\t\tX11::Xcursor\n\t\t\tThreads::Threads\n\t\t\tX11::Xi\n\t\t\tdl\n\t\t\tALSA::ALSA\n\t\t)\n\tendif()\nendif()\n\nif(using_gl)\n\ttarget_compile_definitions(wipeout PRIVATE \"RENDERER_GL\")\n\ttarget_sources(wipeout PRIVATE src/render_gl.c)\n\n\ttarget_include_directories(wipeout PUBLIC ${OPENGL_INCLUDE_DIR})\n\tif (\"${RENDERER}\" STREQUAL \"GLES2\")\n\t\ttarget_compile_definitions(wipeout PRIVATE \"USE_GLES2\")\n\t\tif (TARGET OpenGL::GLES2)\n\t\t\ttarget_link_libraries(wipeout PUBLIC OpenGL::GLES2)\n\t\tendif()\n\tendif()\n\n\tif(USE_GLVND AND TARGET OpenGL::OpenGL)\n\t\ttarget_link_libraries(wipeout PUBLIC OpenGL::OpenGL)\n\telse()\n\t\ttarget_link_libraries(wipeout PUBLIC OpenGL::GL)\n\tendif()\n\n\tif(NOT APPLE)\n\t\ttarget_include_directories(wipeout PRIVATE ${GLEW_INCLUDE_DIRS})\n\t\ttarget_link_libraries(wipeout PRIVATE GLEW::GLEW)\n\tendif()\nelseif(\"${RENDERER}\" STREQUAL \"SOFTWARE\")\n\ttarget_compile_definitions(wipeout PRIVATE \"RENDERER_SOFTWARE\")\n\ttarget_sources(wipeout PRIVATE src/render_software.c)\nendif()\n\nif(\"${PLATFORM}\" STREQUAL SDL2)\n\ttarget_sources(wipeout PRIVATE src/platform_sdl.c)\n\ttarget_link_libraries(wipeout PUBLIC SDL2::Main)\nelseif(\"${PLATFORM}\" STREQUAL SOKOL)\n\ttarget_sources(wipeout PRIVATE src/platform_sokol.c)\nendif()\n\ninstall(TARGETS wipeout)\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 2.2080078125,
          "content": "ï»¿{\n  \"configurations\": [\n    {\n      \"name\": \"x64-Clang-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"buildRoot\": \"${projectDir}\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"clang_cl_x64_x64\" ],\n      \"intelliSenseMode\": \"windows-clang-x64\"\n    },\n    {\n      \"name\": \"x64-Clang-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"buildRoot\": \"${projectDir}\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"clang_cl_x64_x64\" ],\n    },\n    {\n      \"name\": \"x86-Clang-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"buildRoot\": \"${projectDir}\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"clang_cl_x86\" ]\n    },\n    {\n      \"name\": \"x86-Clang-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"buildRoot\": \"${projectDir}\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"clang_cl_x86\" ]\n    },\n    {\n      \"name\": \"arm64-Clang-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"buildRoot\": \"${projectDir}\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"clang_cl_arm64_x64\" ]\n    },\n    {\n      \"name\": \"arm64-Clang-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"buildRoot\": \"${projectDir}\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"clang_cl_arm64_x64\" ]\n    }\n  ]\n}\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.724609375,
          "content": "CC ?= gcc\nEMCC ?= emcc\nUNAME_S := $(shell uname -s)\nRENDERER ?= GL\nUSE_GLX ?= false\nDEBUG ?= false\nUSER_CFLAGS ?=\n\nL_FLAGS ?= -lm\nC_FLAGS ?= -Isrc/libs/ -std=gnu99 -Wall -Wno-unused-variable $(USER_CFLAGS)\n\nifeq ($(DEBUG), true)\n\tC_FLAGS := $(C_FLAGS) -g\nelse\n\tC_FLAGS := $(C_FLAGS) -O3\nendif\n\n\n# Rendeder ---------------------------------------------------------------------\n\nifeq ($(RENDERER), GL)\n\tRENDERER_SRC = src/render_gl.c\n\tC_FLAGS := $(C_FLAGS) -DRENDERER_GL\nelse ifeq ($(RENDERER), SOFTWARE)\n\tRENDERER_SRC = src/render_software.c\n\tC_FLAGS := $(C_FLAGS) -DRENDERER_SOFTWARE\nelse\n$(error Unknown RENDERER)\nendif\n\nifeq ($(GL_VERSION), GLES2)\n\tC_FLAGS := $(C_FLAGS) -DUSE_GLES2\nendif\n\n\n\n# macOS ------------------------------------------------------------------------\n\nifeq ($(UNAME_S), Darwin)\n\tBREW_HOME := $(shell brew --prefix)\n\tC_FLAGS := $(C_FLAGS) -x objective-c -I/opt/homebrew/include -D_THREAD_SAFE -w\n\tL_FLAGS := $(L_FLAGS) -L$(BREW_HOME)/lib -framework Foundation\n\n\tifeq ($(RENDERER), GL)\n\t\tL_FLAGS := $(L_FLAGS) -lGLEW -GLU -framework OpenGL\n\tendif\n\n\tL_FLAGS_SDL = -lSDL2\n\tL_FLAGS_SOKOL = -framework Cocoa -framework QuartzCore -framework AudioToolbox\n\n\n# Linux ------------------------------------------------------------------------\n\nelse ifeq ($(UNAME_S), Linux)\n\tifeq ($(RENDERER), GL)\n\t\tL_FLAGS := $(L_FLAGS) -lGLEW\n\n\t\t# Prefer modern GLVND instead of legacy X11-only GLX\n\t\tifeq ($(USE_GLX), true)\n\t\t\tL_FLAGS := $(L_FLAGS) -lGL\n\t\telse\n\t\t\tL_FLAGS := $(L_FLAGS) -lOpenGL\n\t\tendif\n\tendif\n\n\tL_FLAGS_SDL = -lSDL2\n\tL_FLAGS_SOKOL = -lX11 -lXcursor -pthread -lXi -ldl -lasound\n\n\n# Windows MSYS ------------------------------------------------------------------\nelse ifeq ($(shell uname -o), Msys)\n\tifeq ($(RENDERER), GL)\n\t\tL_FLAGS := $(L_FLAGS) -lglew32 -lopengl32\n\tendif\n\n\tC_FLAGS := $(C_FLAGS) -DSDL_MAIN_HANDLED -D__MSYS__\n\tL_FLAGS_SDL = -lSDL2 -lSDL2main\n\tL_FLAGS_SOKOL = --pthread -ldl -lasound\n\n\n# Windows NON-MSYS ---------------------------------------------------------------\nelse ifeq ($(OS), Windows_NT)\n\t$(error TODO: FLAGS for windows have not been set up. Please modify this makefile and send a PR!)\n\nelse\n$(error Unknown environment)\nendif\n\n\n\n# Source files -----------------------------------------------------------------\n\nTARGET_NATIVE ?= wipegame\nBUILD_DIR = build/obj/native\nBUILD_DIR_WASM = build/obj/wasm\n\nWASM_RELEASE_DIR ?= build/wasm\nTARGET_WASM ?= $(WASM_RELEASE_DIR)/wipeout.js\nTARGET_WASM_MINIMAL ?= $(WASM_RELEASE_DIR)/wipeout-minimal.js\n\nCOMMON_SRC = \\\n\tsrc/wipeout/race.c \\\n\tsrc/wipeout/camera.c \\\n\tsrc/wipeout/object.c \\\n\tsrc/wipeout/droid.c \\\n\tsrc/wipeout/ui.c \\\n\tsrc/wipeout/hud.c \\\n\tsrc/wipeout/image.c \\\n\tsrc/wipeout/game.c \\\n\tsrc/wipeout/menu.c \\\n\tsrc/wipeout/main_menu.c \\\n\tsrc/wipeout/ingame_menus.c \\\n\tsrc/wipeout/title.c \\\n\tsrc/wipeout/intro.c \\\n\tsrc/wipeout/scene.c \\\n\tsrc/wipeout/ship.c \\\n\tsrc/wipeout/ship_ai.c \\\n\tsrc/wipeout/ship_player.c \\\n\tsrc/wipeout/track.c \\\n\tsrc/wipeout/weapon.c \\\n\tsrc/wipeout/particle.c \\\n\tsrc/wipeout/sfx.c \\\n\tsrc/utils.c \\\n\tsrc/types.c \\\n\tsrc/system.c \\\n\tsrc/mem.c \\\n\tsrc/input.c \\\n\t$(RENDERER_SRC)\n\n\n# Targets native ---------------------------------------------------------------\n\nCOMMON_OBJ = $(patsubst %.c, $(BUILD_DIR)/%.o, $(COMMON_SRC))\nCOMMON_DEPS = $(patsubst %.c, $(BUILD_DIR)/%.d, $(COMMON_SRC))\n\nsdl: C_FLAGS += $(shell sdl2-config --cflags)\nsdl: $(BUILD_DIR)/src/platform_sdl.o\nsdl: $(COMMON_OBJ)\n\t$(CC) $^ -o $(TARGET_NATIVE) $(L_FLAGS) $(L_FLAGS_SDL)\n\nsokol: $(BUILD_DIR)/src/platform_sokol.o\nsokol: $(COMMON_OBJ)\n\t$(CC) $^ -o $(TARGET_NATIVE) $(L_FLAGS) $(L_FLAGS_SOKOL)\n\n$(BUILD_DIR):\n\tmkdir -p $(BUILD_DIR)\n\n$(BUILD_DIR)/%.o: %.c\n\tmkdir -p $(dir $@)\n\t$(CC) $(C_FLAGS) -MMD -MP -c $< -o $@\n\n-include $(COMMON_DEPS)\n\n\n# Targets wasm -----------------------------------------------------------------\n\nCOMMON_OBJ_WASM = $(patsubst %.c, $(BUILD_DIR_WASM)/%.o, $(COMMON_SRC))\nCOMMON_DEPS_WASM = $(patsubst %.c, $(BUILD_DIR_WASM)/%.d, $(COMMON_SRC))\n\nwasm: wasm_full wasm_minimal\n\tcp src/wasm-index.html $(WASM_RELEASE_DIR)/game.html\n\n\nwasm_full: $(BUILD_DIR_WASM)/src/platform_sokol.o\nwasm_full: $(COMMON_OBJ_WASM)\n\tmkdir -p $(WASM_RELEASE_DIR)\n\t$(EMCC) $^ -o $(TARGET_WASM) -lGLEW -lGL \\\n\t\t-s ALLOW_MEMORY_GROWTH=1 \\\n\t\t-s ENVIRONMENT=web \\\n\t\t--preload-file wipeout\n\nwasm_minimal: $(BUILD_DIR_WASM)/src/platform_sokol.o\nwasm_minimal: $(COMMON_OBJ_WASM)\n\tmkdir -p $(WASM_RELEASE_DIR)\n\t$(EMCC) $^ -o $(TARGET_WASM_MINIMAL) -lGLEW -lGL \\\n\t\t-s ALLOW_MEMORY_GROWTH=1 \\\n\t\t-s ENVIRONMENT=web \\\n\t\t--preload-file wipeout \\\n\t\t--exclude-file wipeout/music \\\n\t\t--exclude-file wipeout/intro.mpeg\n\n$(BUILD_DIR_WASM):\n\tmkdir -p $(BUILD_DIR_WASM)\n\n$(BUILD_DIR_WASM)/%.o: %.c\n\tmkdir -p $(dir $@)\n\t$(EMCC) $(C_FLAGS) -MMD -MP -c $< -o $@\n\n-include $(COMMON_DEPS_WASM)\n\n\n\n\n.PHONY: clean\nclean:\n\t$(RM) -rf $(BUILD_DIR) $(BUILD_DIR_WASM) $(WASM_RELEASE_DIR)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.6728515625,
          "content": "# wipEout Rewrite\n\nThis is a re-implementation of the 1995 PSX game wipEout.\n\nPlay here: https://phoboslab.org/wipegame/\n\nMore info in my blog: https://phoboslab.org/log/2023/08/rewriting-wipeout\n\nâ ï¸ Work in progress. Expect bugs.\n\n# Building\n\nThe Wipeout rewrite supports two different platform-backends:\n[SDL2](https://github.com/libsdl-org/SDL) and\n[Sokol](https://github.com/floooh/sokol).\nThe only difference in features is that the SDL2 backend supports game controllers \n(joysticks, gamepads) and uses OpenGL 2.x, while the Sokol backend does not\nsupport controllers and uses OpenGL 3.3.\nThe Sokol backend is also only supported on macOS, Linux, Windows and Emscripten.\n\nFor Linux & Unix-likes a simple Makefile is a provided. Additionally, this\nproject can be build with [CMake](https://cmake.org) for all platforms.\n\nConsult the following sections for how to install the prerequisites for your platform:\n\n\n## Linux & Unix-like\n\nBuilding on Linux should be as simple as installing CMake, GLEW, and the\nnecessary platform libraries from your package manager.\nFor brevity, this guide assumes that the necessary development tools (i.e. a C\ncompiler, make) have already been installed.\nThe SDL2 platform should only require the `sdl2` library and headers, whilst the\nSokol platform requires the library/headers for:\n\n- `X11`\n- `Xi`\n- `Xcursor`\n- `ALSA`\n\nThe following snippets list the specific package manager invocations for\npopluar \\*nix OSs:\n\n### Debian/Ubuntu\n\n```sh\napt install cmake libglew-dev\n# For SDL2\napt install libsdl2-dev\n# For Sokol\napt install libx11-dev libxcursor-dev libxi-dev libasound2-dev\n```\n\n### Fedora\n\n```sh\ndnf install cmake glew-devel\n# For SDL2\ndnf install SDL2-devel\n# For Sokol\ndnf install libx11-devel libxcursor-devel libxi-devel alsa-lib-devel\n```\n\n### Arch Linux\n\n```sh\npacman -S cmake glew\n# For SDL2\npacman -S sdl2\n# For Sokol\npacman install libx11 libxcursor libxi alsa-lib\n```\n\n### OpenSUSE\n\n```sh\nzypper install cmake glew-devel\n# For SDL2\nzypper install SDL2-devel\n# For Sokol\nzypper install libx11-devel libxcursor-devel libxi-devel alsa-lib-devel\n```\n\n### FreeBSD\n\n```sh\npkg install cmake sdl2\n```\n\n### OpenBSD\n\n```sh\npkg_add cmake sdl2\n```\n\nNote that the Sokol platform is not supported on the BSDs, since the Sokol\nheaders themselves do not support these Operating Systems.\n\nWith the packages installed, you can now setup and build:\n\n```sh\n# With make for SDL2 backend\nmake sdl\n\n# With make for SDL2 with GLX backend (for legacy NVIDIA and perhaps others)\nUSE_GLX=true make sdl\n\n# With make for Sokol backend\nmake sokol\n\n# With cmake\ncmake -S path/to/wipeout-rewrite -B path/to/build-dir\ncmake --build path/to/build-dir\n```\n\n## macOS\n\nCurrently only the SDL2 platform works.\nmacOS is very picky about the GLSL shader version when compiling with Sokol and\nOpenGL3.3; it shouldn't be too difficult to get it working, but will probably\nrequire a bunch of `#ifdefs` for SDL and WASM.\nPull-requests welcome!\n\nIt is recommended to use [Homebrew](https://brew.sh) to fetch the required\nsoftware, other solutions (e.g. MacPorts) may work but have not been tested.\nUsing homebrew, you can install the required software with the following:\n\n```sh\nbrew install cmake\n# For SDL2\nbrew install sdl2\n# Nothing extra needed for Sokol\n```\n\nWith the packages installed, you can now setup and build:\n\n```sh\ncmake -S path/to/wipeout-rewrite -B path/to/build-dir \\\n\t-DCMAKE_PREFIX_PATH=\"$(brew --prefix sdl2)\"\ncmake --build path/to/build-dir\n```\n\n## Windows\n\n### clang-cl\n\nBuilding natively on Windows requires a more complicated setup. The source code\nrelies on GCC extensions that are not supported by `msvc`, which requires the\nuse of `clang-cl`.\nThe simplest way to get a build environment with `clang-cl` is to download and\ninstall [Visual Studio](https://visualstudio.microsoft.com/downloads/) (2022 at\nthe time of writing) with the \"Desktop development with C++\" option selected.\nAlso make sure to select \"Clang C++ compiler for Windows\" in \"Individual\nComponents\" if it hasn't been already.\n\nThe next step is to acquire development versions of SDL2 and GLEW.\nThe easiest way is to install [vcpkg](https://vcpkg.io) and let Visual Studio's\nintegration build and install it for you.\nFollow the [vcpkg \"Getting Started\" guide](https://vcpkg.io/en/getting-started)\nand integrate it with Visual Studio.\n\nFinally, open Visual Studio, select \"Open a local folder\", and navigate to the\ndirectory where you have cloned this repo.\nVisual Studio should automatically configure itself to build with CMake, and\nbuild the necessary libraries using vcpkg.\nSince this repository contains a `CMakeSettings.json` file, there should already\nbe CMake configurations listed in the menubar dropdown.\nWhen adding a new configuration, make sure to use the `clang_cl` toolsets.\nSelect the config you want from the list and build using `F7`, the build\nartifacts should be under `path\\to\\wipeout-rewrite\\build`.\n\n### MSYS2\n\nBuilding with [MSYS2](https://www.msys2.org/) is sightly easier but still\ninvolves a bit of configuration.\nDownload and install MSYS2 using the installer, and enter a MSYS2 environment\nusing the start menu. For this guide we're using the `UCRT` environment, but the\nothers work just as well.\n\nInstall the following packages using `pacman`:\n\n```sh\npacman -S mingw-w64-ucrt-x86_64-{toolchain,cmake,SDL2,glew}\n```\n\nWith the packages installed, you can now setup and build:\n\n```sh\n# With make for SDL2 backend\nmake sdl\n\n# With make for Sokol backend\nmake sokol\n\n# With cmake\ncmake -S path/to/wipeout-rewrite -B path/to/build-dir\ncmake --build path/to/build-dir\n```\n\n## Emscripten\n\nDownload and install the [Emscripten SDK](https://emscripten.org/docs/getting_started/downloads.html),\nso that `emcc` and `emcmake` is in your path.\nLinux users may find it easier to install using their distro's package manager\nif it is available.\nNote that only the Sokol platform will work for WebAssembly builds.\n\nWith the SDK installed, you can now setup and build:\n\n```sh\n# With make (combined full and minimal builds)\nmake wasm\n\n# With cmame (full or minimal builds specified via -DMINIMAL_BUNDLE={OFF|ON})\nemcmake cmake -S path/to/wipeout-rewrite -B path/to/build-dir -DPLATFORM=SOKOL\ncmake --build path/to/build-dir\n```\n\n## Build Flags for cmake\n\nThe following is a table for project specific build flags using CMake:\n\n| Flag             | Description                                                                             | Options                                                                              | Default                                                                                     |\n|------------------|-----------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|\n| `PLATFORM`       | The platform to build for.                                                              | `SDL2`, `SOKOL`                                                                      | `SDL2`                                                                                      |\n| `RENDERER`       | Graphics renderer.                                                                      | `GL` for OpenGL 3, `GLES2` for OpenGL ES 2, `SOFTWARE` for a pure software renderer. | `GL`                                                                                        |\n| `USE_GLVND`      | Link against the OpenGL Vendor Neutral Dispatch libraries.                              | `ON`, `OFF`                                                                          | `ON`, falling back to `OFF` if the libraries aren't found or an OpenGL renderer isn't used. |\n| `MINIMAL_BUNDLE` | Do not include the music/intro video when building for the web.                         | `ON`, `OFF`                                                                          | `OFF`                                                                                       |\n| `PATH_ASSETS`    | Set a static path where the game assets are loaded from.                                | Any valid filesystem path.                                                           | Unset                                                                                       |\n| `PATH_USERDATA`  | Set a static path where user data (e.g. game saves) are stored.                         | Any valid filesystem path.                                                           | Unset                                                                                       |\n| `DEV_BUILD`      | Sets the assets/userdata path to the source directory. Useful when testing any changes. | `ON`, `OFF`                                                                          | `OFF`                                                                                       |\n\n# Running\n\nThis repository does not contain the assets (textures, 3d models etc.) required to run the game. This code mostly assumes to have the PSX NTSC data, but some menu models from the PC version are required as well. Both of these can be easily found on archive.org and similar sites. The music (optional) needs to be provided in [QOA format](https://github.com/phoboslab/qoa). The intro video as MPEG1.\n\nThe directory structure is assumed to be as follows\n\n```\n./wipegame # the executable\n./wipeout/textures/\n./wipeout/music/track01.qoa\n./wipeout/music/track02.qoa\n...\n```\n\nNote that the blog post announcing this project may or may not provide a link to a ZIP containing all files needed. Who knows!\n\nOptionally, if you want to use a game controller that may not be supported by SDL directly, you can place the [gamecontrollerdb.txt](https://github.com/gabomdq/SDL_GameControllerDB) in the root directory of this project (along the compiled `wipegame`). Note that if you want to use the analog sticks of your gamecontroller in the game you have to configure it in the Options menu; the analog sticks are not bound by default.\n\n\n\n# Ideas for improvements\n\nPRs Welcome.\n\n## Not yet implemented\n\nSome things from the original game are not yet implemented in this rewrite. This includes\n\n- screen shake effect\n- game-end animations, formerly `Spline.cpp` (the end messages are just shown over the attract mode cameras)\n- reverb for sfx and music when there's more than 4 track faces (tunnels and such)\n- some more? grep the source for `TODO` and `FIXME`\n\n## Gameplay, Visuals\n\n- less punishing physics for ship vs. ship collisions\n- less punishing physics for sideways ship vs. track collisions (i.e. wall grinding like in newer wipEouts)\n- somehow resolve the issue of inevitably running into an enemy that you just shot\n- add additional external view that behaves more like in modern racing games\n- dynamic lighting on ships\n- the scene geometry could use some touch-ups to make an infinite draw distance option less awkward\n- increase FOV when going over a boost\n- better menu models for game exit and video options\n- gamepad analog input feels like balancing an egg\n- fix collision issues on junctions (also present in the original)\n\n## Technical\n\n- implement frustum culling for scene geometry, the track and ships. Currently everything within the fadeout radius is drawn.\n- put all static geometry into a GPU-side buffer. Currently all triangles are constructed at draw time. Uploading geometry is complicated a bit by the fact that some scene animations and the ship's exhaust need to update geometry for each frame.\n- the menu system is... not great. It's better than the 5000 lines of spaghetti that it was before, but the different layouts need a lot of `if`s\n- the save data is just dumping the whole struct on disk. A textual format would be preferable.\n- since this whole thing is relying on some custom assembled assets anyway, maybe all SFX should be in QOA format too (like the music). Or switch everything to Vorbis.\n- a lot of functions assume that there's just one player. This needs to be fixed for a potential splitscreen mode.\n\n\n# License\n\nThere is none. This code may or may not be based on the source code of the PC (ATI-Rage) version that was leaked in 2022. If it were, it would probably violate copyright law, but it may also fall under fair use Â¯\\\\\\_(ã)\\_/Â¯\n\nWorking with this source code is probably fine, considering that this game was originally released 28 years ago (in 1995), that the current copyright holders historically didn't care about any wipEout related files or code being available on the net and that the game is currently not purchasable in any shape or form.\n\nIn any case, you may NOT use this source code in a commercial release. A commercial release includes hosting it on a website that shows any forms of advertising.\n\nPS.: Hey Sony! If you're reading this, I would love to work on a proper, officially sanctioned remaster. Please get in touch <3\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 0.271484375,
          "content": "{\n  \"name\": \"wipeout-rewrite\",\n  \"version-string\": \"1.0.0\",\n  \"builtin-baseline\": \"0fa8459cf3a7caca7adc58f992bc32ff13630684\",\n  \"dependencies\": [\n    {\n      \"name\": \"sdl2\",\n      \"version>=\": \"2.26.5\"\n    },\n    {\n      \"name\": \"glew\",\n      \"version>=\": \"2.2.0#3\"\n    }\n  ]\n}\n"
        },
        {
          "name": "wipeout",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}