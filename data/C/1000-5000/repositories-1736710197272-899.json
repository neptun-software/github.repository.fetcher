{
  "metadata": {
    "timestamp": 1736710197272,
    "page": 899,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ardagnir/athame",
      "stars": 1635,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.103515625,
          "content": "test/build\ntest/testrun\n*.tar.bz2\n*.tar.gz\n*.tar.xz\n*_patches\n*_tmp\n*.sw?\nMakefile\n*.so*\n*.o\n*.a\nconfig.*\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0751953125,
          "content": "[submodule \"vimbed\"]\n\tpath = vimbed\n\turl = http://github.com/ardagnir/vimbed\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.75,
          "content": "Athame\n======\n\nAthame patches your shell to add full Vim support by routing your keystrokes through an actual Vim process. Athame can currently be used to patch readline (used by bash, gdb, python, etc) and/or zsh (which doesn't use readline).\n\n![Demo](https://i.imgur.com/74EoF4X.gif)\n\n**Don't most shells already come with a vi-mode?**\n\nYes, and if you're fine with basic vi imitations designed by a bunch of Emacs users, feel free to use them. ...but for the true Vim fanatics who sacrifice goats to the modal gods, Athame gives you the full power of Vim.\n\n## Requirements\n- Athame works best on GNU/Linux.\n- Athame also works on Windows (with WSL), and usually works on OSX. (I don't have a Mac, so I can't always test changes on one)\n- Athame needs at least *one* of the following:\n    - Vim 8.0+ with `+job` support\n    - Vim 7.4+ with `+clientserver` support\n      - Vim 7.4.928+ is strongly recommended.\n      - The clientserver version requires X and will fall back to a normal shell if X isn't running.\n    - Neovim 0.2.2+\n      - Neovim support is currently experimental.\n      - The setup scripts will look for vim by default. You can append `--vimbin=$(which nvim)` to have them use nvim.\n      \n## Setting up Athame Readline\n### Option 1: (Arch Linux only) Use the AUR\nUse `readline-athame-git` from the AUR.\n - If you are missing the readline gpg key, you can get it with `gpg --recv-keys BB5869F064EA74AB`\n\n### Option 2: (The safest method) Install a local copy of Readline/Bash\n    git clone --recursive http://github.com/ardagnir/athame\n    cd athame\n    mkdir -p ~/local\n    ./readline_athame_setup.sh --prefix=$HOME/local/\n    ./bash_readline_setup.sh --prefix=$HOME/local/ --use_readline=$HOME/local/\n    cp athamerc ~/.athamerc\n\nYou can now run ~/local/bin/bash to run bash with Athame.\n\n### Option 3: Install Athame as your default Readline \n*For Ubuntu/Debian:*\n\n    git clone --recursive http://github.com/ardagnir/athame\n    cd athame\n    ./readline_athame_setup.sh --libdir=/lib/x86_64-linux-gnu --use_sudo\n\n*Otherwise:*\n\n    git clone --recursive http://github.com/ardagnir/athame\n    cd athame\n    ./readline_athame_setup.sh --use_sudo\n\nYou may need to rebuild bash if your installed version doesn't use your system readline *(this is usually the case in Ubuntu and OSX)*:\n\n    ./bash_readline_setup.sh --use_sudo\n\n#### Additional Notes\n- You can add the `--nobuild` flag to the setup script if you want to configure/build/install yourself.\n- You can change what Vim binary is used by passing `--vimbin=/path/to/vim` to the setup script.\n\n## Setting up Athame Zsh\n### Option 1: (Arch Linux only) Use the AUR\nUse `zsh-athame-git` from the AUR.\n- If you are missing the zsh gpg key, you can get it with `gpg --recv-keys A71D9A9D4BDB27B3`\n- Add \"unset zle_bracketed_paste\" to the end of your ~/.zshrc\n\n### Option 2: (The safest method) Install a local copy of Zsh\n*Windows Note: zsh tests don't work in Windows because zsh gets stuck in the background. Add `--notest` to the setup script line if installing on Windows.*\n\n    git clone --recursive http://github.com/ardagnir/athame\n    cd athame\n    mkdir -p ~/local\n    ./zsh_athame_setup.sh --prefix=$HOME/local/\n    cp athamerc ~/.athamerc\n\nAdd \"unset zle_bracketed_paste\" to the end of your ~/.zshrc\n\nYou can now run ~/local/bin/zsh to run zsh with Athame.\n\n### Option 3: Install Athame as your default Zsh \n*Windows Note: zsh tests don't work in Windows because zsh gets stuck in the background. Add `--notest` to the setup script line if installing on Windows.*\n\n    git clone --recursive http://github.com/ardagnir/athame\n    cd athame\n    ./zsh_athame_setup.sh --use_sudo\n\nAdd \"unset zle_bracketed_paste\" to the end of your ~/.zshrc\n\n#### Additional Notes\n- You can add the `--nobuild` flag to the setup script if you want to configure/build/install yourself.\n- You can change what Vim binary is used by passing `--vimbin=/path/to/vim` to the setup script.\n\n\n## Configuration\nAthame can be configured through the following environment variables. They can be set on the fly or you can add them to your ~/.bashrc or ~/.zshrc. Make sure you use `export` if you add them to your ~/.zshrc.\n\n- **ATHAME_ENABLED:** Set to 0 to disable Athame.\n- **ATHAME_SHOW_MODE:** Set to 0 to hide mode display at the bottom of the screen. To display it yourself, read the ATHAME_VIM_MODE variable.\n- **ATHAME_SHOW_COMMAND:** Set to 0 to hide :, /, and ? commands at the bottom of the screen. To display them yourself, read the ATHAME_VIM_COMMAND variable.\n- **ATHAME_SHOW_ERROR:** Set to 0 to hide athame errors. If you want to display these yourself, read the ATHAME_ERROR variable.\n- **ATHAME_VIM_PERSIST:** Normally Athame spawns a new short-lived Vim instance for each readline/zle usage (in practice, a separate Vim instance each line). If you set this to 1, you will get 1 Vim instance per shell instead, so your iabbrevs, etc, are preserved from line to line. The tradeoff is that it will keep Vim open until the shell closes, whether or not it is using readline. For example: if you open your terminal and type bash 10 times, with the default ATHAME_VIM_PERSIST of 0 you will have one instance of Vim running, because only the inner shell is using readline, but with ATHAME_VIM_PERSIST set to 1, you will have 10.\n- **ATHAME_USE_JOBS:** If non-zero, Athame will use jobs for async behavior. Otherwise, it will use clientserver.\n\n## FAQ\n#### How do I use this?\nIt's just like Vim. Imagine your history is stored inside a Vim buffer (because it is!) with a blank line at the bottom. Your cursor starts on that blank line each time readline is called.\nUnless you're in command mode, some special chars (such as carriage return) are handled by readline/zsh.\n\nSome example commands (there's no specific code for these, it's just Vim):\n\n- j: go back a line in history\n- k: go forward a line in history\n- ?: search history (and current line) backwards (better if you have :set incsearch enabled)\n- /: search history (and current line) forwards (better if you have :set incsearch enabled)\n- cc: clear current line and go to insert mode\n\nThe default athamerc modifies up/down arrows in insert mode to jump to the end of the line, like in a normal shell, but you can change this.\n\nYou can also enable history searching arrows in the athamerc. (If you enable this and you use arrows, it searches for text that begins with what you've typed. It's like Vim's command mode.)\n\n\n#### ? and / are reversed from bash's vi-mode. Why?\nBash's vi-mode has ? go down and / go up. In actual Vim (and thus, Athame) they go the other way.\n\n#### Why does Athame start in insert/normal mode?\nThe default athamerc includes \"startinsert\" to make Athame start in insert mode. If you remove that line, it will start in normal mode.\n\n#### Why is my Athame slow?\nAthame should be very fast, but it will slow down if your Vim setup is slow or if you have invalid vimscript in either your athamerc or vimrc. Try using a clean vimrc or athamerc and see if it speeds up. If not, file an issue.\n\nIf Athame is only slow in command mode (:?/), you should be able to fix it by updating Vim to version 8.1+.\n\n#### I installed Athame for Readline, but it isn't doing anything!\nAre you using the system readline?\nType:\n\n    ldd $(which bash)\nThis should include libreadline. If it doesn't, you need to build bash to use the system readline. You can do this by running:\n\n    ./bash_readline_setup.sh\n\n#### Which chars are sent to vim and which to readline/zsh?\n\nControl-C usually sends a SIGNINT signal that is handled by zsh, readline, or the program that calls readline. For other keys:\n\n- In readline, chars marked as rl_delete (usually Control-D), rl_newline (usually return), rl_complete (usually tab), and rl_clear_screen (usually Control-L) are sent to readline. All other keys are sent to vim. This means that if you use readline's built-in vi-mode, Control-L and Control-D probably won't be sent to the shell.\n- In zsh, Athame is hardcoded to send tab, Control-D, carriage return, new line, and Control-L to zsh. All other keys are sent to vim. This behavior will likely change in the future.\n\n#### I got the error \"Couldn't load vim path\"\nIs Vim at the correct path? You can change the path Athame looks at with the --vimbin flag.\n\n#### How do I disable/uninstall Athame?\nTo temporarily disable Athame, `export ATHAME_ENABLED=0`\n\nTo compile readline/zsh without the Athame patches, run the setup script with a `--noathame` flag.\n\nTo get rid of Athame completly, you should probably just replace it with the non-patched version of readline/zsh from your distro.\n\nOr, if you're cool with not having a shell, you can uninstall it by cding into the readline or zsh directory and typing `sudo make uninstall`.\n\nDepending on your approach, you may want to manually remove `/usr/lib/athame*` and `/etc/athamerc` as well.\n\n#### Why do the Up/Down arrows make the cursor jump to the end of the line?\nThis is done through vimscript in the athamerc to make Athame more like a normal shell. Feel free to comment it out.\n\n#### How do I disable/change the way Athame shows Vim's mode?\nBy default Athame shows the Vim mode at the bottom of the screen. This can be disabled using `export ATHAME_SHOW_MODE=0`\n\nAthame stores the current mode in the `ATHAME_VIM_MODE` environment variable. You can use this to display the Vim mode yourself. See https://github.com/ardagnir/athame/issues/21 for an example using powerline.\n\nSimilarly, Vim commands are displayed at the bottom of the screen by default. These can be disabled using `export ATHAME_SHOW_COMMAND=0` and accessed using `ATHAME_VIM_COMMAND`\n\n#### Why don't arrow keys work when I add Athame to my convoluted Zsh setup?\nBecause arrow keys are evil! Just kidding. :P\n\nOhmyzsh and some other zsh setups put your terminal into application mode to help their keymaps. Athame doesn't like this, and besides, you're using Vim as your keymap. You can override this by adding the following to the end of your ~/.zshrc:\n\n    function zle-line-init(){\n      echoti rmkx\n    }\n    zle -N zle-line-init\n\n#### Why isn't there an Athame package for my favorite distro?\n...because you haven't made one yet. The Athame setup script comes with a --nobuild flag so that you can build it however you want or your package can just apply the Athame patches itself.\n\n#### This is awesome! Can I help?\nThe best way to help is to look at the issue section and submit patches to fix bugs.\n\nIf you have a shell that I'm missing, you can also try making a patch to communicate between it and Athame (see athame_readline.h and athame_zsh.h for the functions you need to implement).\n\n#### What about donations?\nI'm not accepting donations, but you should consider donating to the [EFF](https://supporters.eff.org/donate/) so that we don't end up living in a scary dystopian future where everyone is forced to use emacs.\n\n\n## Bugs\n- See [issues](https://github.com/ardagnir/athame/issues)\n- If you see a bug without an issue, please create one.\n\n## License\nGPL v3\n"
        },
        {
          "name": "athame.c",
          "type": "blob",
          "size": 10.5849609375,
          "content": "/* athame.c -- Full vim integration for your shell.*/\n\n/* Copyright (C) 2015 James Kolb\n\n   This file is part of Athame.\n\n   Athame is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   Athame is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with Athame.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#define _GNU_SOURCE\n\n#include <errno.h>\n#include <signal.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/param.h>\n#include <sys/select.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <time.h>\n#include <unistd.h>\n\n#ifdef BSD\n// Includes OSX\n#include <util.h>\ntypedef void (*sighandler_t) (int);\n#else\n#include <pty.h>\n#endif\n\n#include \"athame.h\"\n#include \"athame_intermediary.h\"\n#include \"athame_util.h\"\n\n/* Forward declarations used in this file. */\nvoid athame_init(int instream, FILE* outstream) {\n  if (!ap_is_catching_signals()) {\n    steal_signal_handler();\n  }\n  athame_init_sig(instream, outstream);\n  if (!ap_is_catching_signals()) {\n    return_signal_handler();\n  }\n}\n\nstatic void athame_init_sig(int instream, FILE* outstream) {\n  athame_outstream = outstream ? outstream : stderr;\n  cleaned = 0;\n  expr_pid = 0;\n  athame_dirty = 0;\n  updated = 1;\n  time_to_poll = -1;\n  vim_started = -1;\n  stale_polls = 0;\n  change_since_key = 0;\n  keys_since_change = 0;\n  athame_mode[0] = 'n';\n  athame_mode[1] = '\\0';\n  athame_command[0] = '\\0';\n  command_cursor = 0;\n  bottom_display[0] = '\\0';\n  last_athame_mode[0] = '\\0';\n  bottom_color = 0;\n  bottom_style = 0;\n  bottom_cursor = 0;\n  cs_confirmed = 0;\n  athame_failure = 0;\n  msg_sent = 0;\n\n  dev_null = 0;\n  fifo = 0;\n\n  servername = 0;\n  dir_name = 0;\n  slice_file_name = 0;\n  contents_file_name = 0;\n  update_file_name = 0;\n  messages_file_name = 0;\n  vimbed_file_name = 0;\n  fifo_name = 0;\n  msg_count_file_name = 0;\n\n  if (!athame_is_set(\"ATHAME_ENABLED\", 1)) {\n    athame_failure = strdup(\"Athame was disabled on init\");\n    return;\n  }\n  if (!athame_is_set(\"ATHAME_USE_JOBS\", ATHAME_USE_JOBS_DEFAULT) && !getenv(\"DISPLAY\")) {\n    athame_set_failure(\"Vim with +job required to use Athame without X\");\n    return;\n  }\n\n  asprintf(&servername, \"athame_%d\", getpid());\n\n  char* tmpdir = getenv(temp_dir_loc());\n  if (tmpdir == NULL) {\n    char* failure;\n    asprintf(&failure, \"%s environment variable not set\", temp_dir_loc());\n    athame_set_failure(failure);\n    free(failure);\n    return;\n  }\n  char* parent_name;\n  asprintf(&parent_name, \"%s/athame_vimbed\", tmpdir);\n  asprintf(&dir_name, \"%s/%s\", parent_name, servername);\n  mkdir(parent_name, S_IRWXU);\n  mkdir(dir_name, S_IRWXU);\n  free(parent_name);\n\n  asprintf(&slice_file_name, \"%s/slice.txt\", dir_name);\n  asprintf(&contents_file_name, \"%s/contents.txt\", dir_name);\n  asprintf(&update_file_name, \"%s/update.txt\", dir_name);\n  asprintf(&messages_file_name, \"%s/messages.txt\", dir_name);\n  asprintf(&msg_count_file_name, \"%s/messageCount.txt\", dir_name);\n  if (getenv(\"ATHAME_VIMBED_LOCATION\")) {\n    asprintf(&vimbed_file_name, \"%s/vimbed.vim\",\n             getenv(\"ATHAME_VIMBED_LOCATION\"));\n  } else {\n    asprintf(&vimbed_file_name, \"%s/vimbed.vim\", VIMBED_LOCATION);\n  }\n\n  asprintf(&fifo_name, \"%s/exprPipe\", dir_name);\n  mkfifo(fifo_name, S_IRWXU);\n\n  dev_null = fopen(\"/dev/null\", \"w\");\n\n  if (athame_setup_history()) {\n    return;\n  }\n\n  if (is_vim_alive() && athame_is_set(\"ATHAME_USE_JOBS\", ATHAME_USE_JOBS_DEFAULT)) {\n      if (athame_setup_fifo()) {\n        // Vim is still alive but the fifo isn't so we have to kill it.\n        kill(vim_pid, SIGTERM);\n        close(vim_term);\n        wait_then_kill(vim_pid);\n      }\n  }\n\n  if (is_vim_alive()) {\n    vim_stage = VIM_NEEDS_RESET;\n  } else {\n    vim_stage = VIM_NOT_STARTED;\n  }\n\n  athame_ensure_vim(1, instream);\n}\n\n// Cleanup everything athame related.\n// If locked is set, make sure not to let control leave athame during cleanup.\n// (This is useful if the shell wants to shutdown as soon as it gets any control)\nvoid athame_cleanup(int locked) {\n  if (cleaned) {\n    return;\n  }\n  cleaned = 1;\n  int persist = athame_is_set(\"ATHAME_VIM_PERSIST\", 0) &&\n                vim_stage == VIM_RUNNING && is_vim_alive();\n\n  if (expr_pid > 0) {\n    kill(expr_pid, SIGTERM);\n  }\n  if (vim_pid && !persist) {\n    // forkpty will keep vim open on OSX if we don't close the fd\n    kill(vim_pid, SIGTERM);\n    athame_sleep(20, 0, 0);\n    close(vim_term);\n  }\n  if (dev_null) {\n    fclose(dev_null);\n  }\n  if (vimbed_file_name) {\n    free(vimbed_file_name);\n  }\n  if (servername) {\n    free(servername);\n  }\n  if (athame_failure) {\n    if(!locked) {\n      athame_bottom_display(\"\", ATHAME_BOLD, ATHAME_DEFAULT, 0, 0);\n    }\n    free((char*)athame_failure);\n  } else if (athame_is_set(\"ATHAME_SHOW_MODE\", 1)) {\n    if (!locked) {\n      athame_bottom_display(\"\", ATHAME_BOLD, ATHAME_DEFAULT, 0, 0);\n    }\n  }\n  if (expr_pid > 0) {\n    wait_then_kill(expr_pid);\n  }\n  if (vim_pid && !persist) {\n    wait_then_kill(vim_pid);\n    vim_pid = 0;\n  }\n  if (fifo) {\n    close(fifo);\n  }\n  if (fifo_name) {\n    unlink(fifo_name);\n    free(fifo_name);\n  }\n  if (slice_file_name) {\n    unlink(slice_file_name);\n    free(slice_file_name);\n  }\n  if (contents_file_name) {\n    unlink(contents_file_name);\n    free(contents_file_name);\n  }\n  if (update_file_name) {\n    unlink(update_file_name);\n    free(update_file_name);\n  }\n  if (messages_file_name) {\n    unlink(messages_file_name);\n    free(messages_file_name);\n  }\n  if (msg_count_file_name) {\n    unlink(msg_count_file_name);\n    free(msg_count_file_name);\n  }\n  if (dir_name) {\n    rmdir(dir_name);\n    free(dir_name);\n  }\n}\n\nint athame_enabled() {\n  if (athame_is_set(\"ATHAME_ENABLED\", 1)) {\n    if (athame_failure) {\n      athame_draw_failure();\n      return 0;\n    }\n    unsetenv(\"ATHAME_ERROR\");\n    return !ap_temp_novim();\n  } else {\n    return 0;\n  }\n}\n\nchar athame_loop(int instream) {\n  if (!ap_is_catching_signals()) {\n    steal_signal_handler();\n  }\n  char r = athame_loop_sig(instream);\n  if (!ap_is_catching_signals()) {\n    return_signal_handler();\n  }\n  return r;\n}\n\nstatic char athame_loop_sig(int instream) {\n  char returnVal = 0;\n  sent_to_vim = 0;\n  time_to_sync = get_time();\n  last_athame_mode[0] = '\\0';\n  bottom_display[0] = '\\0';\n\n  // This is a performance step that allows us to bypass starting up (or resetting) vim if we\n  // aren't going to talk to it.\n  char first_char =\n      (vim_stage != VIM_RUNNING) ? athame_get_first_char(instream) : 0;\n  if (first_char && strchr(ap_nl, first_char)) {\n    return first_char;\n  }\n  athame_ensure_vim(0, 0);\n\n  // If we have a character already, assume Vim hasn't had time to sync.\n  vim_sync = first_char ? VIM_SYNC_NO : VIM_SYNC_YES;\n\n  if (!updated) {\n    athame_update_vimline(athame_row, ap_get_cursor());\n  } else {\n    athame_redisplay();\n  }\n\n  if (first_char && !athame_failure) {\n    returnVal = athame_process_char(first_char);\n    first_char = 0;\n  }\n\n  while (!returnVal && !athame_failure) {\n    int selected = 0;\n    long timeout_msec = get_timeout_msec();\n    selected = athame_select(instream, vim_term, 0, timeout_msec, 0);\n\n    // nvim doesn't end the process when vim quits cleanly\n    int nvim_checked_quit = athame_nvim && athame_has_clean_quit();\n\n    if (!athame_failure && (!is_vim_alive() || nvim_checked_quit)) {\n      if (!nvim_checked_quit && !athame_has_clean_quit()) {\n        athame_set_failure(\"Vim quit unexpectedly\");\n        break;\n      }\n      if (!sent_to_vim) {\n        // We never want to kill the user's shell without giving\n        // them a chance to type anything.\n        athame_set_failure(\"Vim quit\");\n        break;\n      }\n      ap_set_line_buffer(\"\");\n      athame_mode[0] = 'n';\n      athame_mode[1] = '\\0';\n      athame_redisplay();\n      return ap_delete;\n    }\n    int sr = process_signals();\n    if (sr != ATHAME_CONTINUE) {\n      return (char)sr;\n    }\n    switch (selected) {\n      case 0: // Timeout\n        if (vim_sync >= VIM_SYNC_CHAR_BEHIND) {\n          vim_sync = VIM_SYNC_NEEDS_POLL;\n        }\n        break;\n      case 1: // Input received\n        returnVal = athame_process_input(instream);\n        break;\n      case 2: // Vim changed\n        read(vim_term, athame_buffer, DEFAULT_BUFFER_SIZE - 1);\n        if (!athame_get_vim_info()) {\n          request_poll();\n        }\n        break;\n      case -1: // Error (possibly from a signal)\n        // Make sure we keep the mode drawn on a resize.\n        // This must happen after process_signals so we don't change the\n        // value of the caught signal\n        athame_bottom_mode();\n    }\n\n    if (ap_needs_to_leave()) {\n      if (athame_is_set(\"ATHAME_SHOW_MODE\", 1)) {\n        athame_bottom_display(\"\", ATHAME_BOLD, ATHAME_DEFAULT, 0, 0);\n      }\n      return '\\0';\n    }\n\n    if (time_to_poll >= 0 && time_to_poll < get_time()) {\n      athame_poll_vim(0);\n    }\n\n    // If vim isn't doing anything after pressing 20 keys, failover.\n    // This allows the user to get back to a normal shell if everything\n    // is working, but vim always starts up in a weird state\n    // (Infinte, loop/ex mode, etc)\n    // TODO: use an env variable instead of 20\n    if (keys_since_change > 20) {\n      athame_force_vim_sync();\n      if (keys_since_change > 0) {\n        athame_set_failure(\"20 keys pressed without change. To disable Athame use: AHTAME_ENABLED=0\");\n      }\n    }\n  } // end while\n\n  if (athame_failure) {\n    // If we ate the first_char, we should return it.\n    return returnVal || first_char;\n  }\n\n  if (sent_to_vim) {\n    // Should already be synced here, but this is a no-op in that case\n    // and it makes the code less fragile to make sure.\n    athame_force_vim_sync();\n    if (strcmp(athame_mode, \"i\") == 0) {\n      athame_send_to_vim('\\x1d');  //<C-]> Finish abbrevs/kill mappings\n      athame_force_vim_sync();\n    }\n  }\n  if (athame_is_set(\"ATHAME_SHOW_MODE\", 1)) {\n    athame_bottom_display(\"\", ATHAME_BOLD, ATHAME_DEFAULT, 0, 0);\n  }\n  updated = 0;\n  return returnVal;\n}\n\nvoid athame_after_bypass() {\n  if (athame_failure && athame_is_set(\"ATHAME_SHOW_ERROR\", 1)) {\n    athame_bottom_display(\"\", ATHAME_BOLD, ATHAME_DEFAULT, 0, 0);\n  }\n}\n\n// Redraw bottom stuff before handing off to a process that might block,\n// like python.\nvoid athame_char_handled() {\n  if (athame_is_set(\"ATHAME_ENABLED\", 1) && !ap_needs_to_leave()) {\n    if (athame_failure) {\n      athame_draw_failure();\n    } else {\n      athame_bottom_mode();\n    }\n  }\n}\n"
        },
        {
          "name": "athame.h",
          "type": "blob",
          "size": 1.7197265625,
          "content": "/* athame.h -- Full vim integration for your shell.*/\n\n/* Copyright (C) 2015 James Kolb\n\n   This file is part of Athame.\n\n   Athame is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   Athame is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with Athame.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef _ATHAME_H_\n#define _ATHAME_H_\n\n#include <stdio.h>\n\n#define ATHAME_NORMAL 0\n#define ATHAME_BOLD 1\n\n#define ATHAME_DEFAULT 0\n#define ATHAME_RED 31\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n// Initialize athame.\nextern void athame_init(int instream, FILE* outstream);\nstatic void athame_init_sig(int instream, FILE* outstream);\n\n// Loop over input and do vimy stuff until a special key is pressed.\nextern char athame_loop(int instream);\nstatic char athame_loop_sig(int instream);\n\n// Is athame currently enabled?\nextern int athame_enabled();\n\n// Cleanup all the memory allocated by athame and shut vim down.\nextern void athame_cleanup(int);\n\n// Run after bypassing athame.\nextern void athame_after_bypass();\n\n// Called after we are done with the char returned by athame.\n// This is really a hack to display mode while an external process is waiting for char input that it will probably send to readline and thus vim.\nextern void athame_char_handled();\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* !_ATHAME_H_ */\n"
        },
        {
          "name": "athame_patcher.sh",
          "type": "blob",
          "size": 1.48046875,
          "content": "#!/bin/bash\n# athame_patcher.sh -- Full vim integration for your shell.\n#\n# Copyright (C) 2015 James Kolb\n#\n# This file is part of Athame.\n#\n# Athame is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or # (at your option) any later version.\n#\n# Athame is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Athame.  If not, see <http://www.gnu.org/licenses/>.\n\nif [ \"$1\" == \"--help\" ]; then\n  echo \"Usage athame_patcher.sh [ --dirty ] ( readline | zsh ) athame_dir\"\n  exit 0\nfi\n\nif [ \"$1\" == \"--dirty\" ]; then\n  dirty=1\n  ptype=\"$2\"\n  adir=\"$3\"\nelse\n  dirty=0\n  ptype=\"$1\"\n  adir=\"$2\"\nfi\n\nif [ \"$ptype\" != \"zsh\" ] && [ \"$ptype\" != \"readline\" ]; then\n  echo Invalid patch \"$ptype\" >&2\n  exit 1\nfi\n\nif [ -z \"$adir\" ]; then\n  echo No directory provided\n  exit 1\nfi\n\nif [ $dirty = 0 ]; then\n  echo \"Patching with Athame patch\"\n  patch -p1 < \"$adir/$ptype.patch\"\nfi\n\nsdir=\".\"\nif [ \"$ptype\" = zsh ]; then\n  sdir=\"./Src/Zle\"\nfi\n\nrm -rf \"$sdir/vimbed\"\ncp -r \"$adir/vimbed\" \"$sdir\"\necho \"Copying Athame files\"\ncp \"$adir/athame\".* \"$sdir\"\ncp \"$adir/athame_util.h\" \"$sdir\"\ncp \"$adir/athame_$ptype.h\" \"$sdir/athame_intermediary.h\"\n"
        },
        {
          "name": "athame_readline.h",
          "type": "blob",
          "size": 4.5810546875,
          "content": "/* athame_readline.h -- Full vim integration for your shell.*/\n\n/* Copyright (C) 2015 James Kolb\n\n   This file is part of Athame.\n\n   Athame is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   Athame is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with Athame.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#define READLINE_LIBRARY\n#include <wchar.h>\n\n#include \"history.h\"\n#include \"readline.h\"\n#include \"rlprivate.h\"\n#include \"xmalloc.h\"\n\nchar* athame_buffer_store = 0;\nstatic char* ap_get_line_buffer() {\n  if (rl_end == 0) {\n    return \"\";\n  }\n  if (athame_buffer_store) {\n    free(athame_buffer_store);\n  }\n  return athame_buffer_store = strndup(rl_line_buffer, rl_end);\n}\n\nstatic int ap_get_line_buffer_length() { return rl_end; }\n\nstatic int helper_ap_char_length(char* buffer) {\n  int ret;\n  int len = mbstowcs(NULL, buffer, 0);\n  return len;\n}\n\nstatic int ap_get_line_char_length() {\n  return helper_ap_char_length(ap_get_line_buffer());\n}\n\nstatic void ap_set_line_buffer(char* newText) { rl_replace_line(newText, 0); }\n\nstatic int ap_get_cursor() {\n  int ret;\n  char* temp = strndup(rl_line_buffer, rl_point);\n  ret = helper_ap_char_length(temp);\n  free(temp);\n  return ret;\n}\n\nstatic void ap_set_cursor(int c) {\n  rl_point = 0;\n  if (c == 0) {\n    return;\n  }\n  rl_forward_char(c, 'l');\n}\n\nstatic void ap_set_cursor_end() { rl_point = rl_end; }\n\nstatic int ap_temp_novim() { return 0; }\n\nstatic void ap_redraw_prompt() {\n  // Substitutions are already performed before readline gets the prompt.\n}\n\nstatic void ap_display() { rl_redisplay(); }\n\nstatic void ap_get_term_size(int* height, int* width) {\n  _rl_sigwinch_resize_terminal();  // Incase the terminal changed size while\n                                   // readline wasn't looking.\n  rl_get_screen_size(height, width);\n}\n\nstatic int ap_get_prompt_length() { return rla_prompt_phys_length(); }\n\nHISTORY_STATE* hs;\nint hs_counter;\nstatic void ap_get_history_start() {\n  hs = history_get_history_state();\n  hs_counter = 0;\n}\n\nstatic char* ap_get_history_next() {\n  if (hs->entries && hs->entries[hs_counter]) {\n    return hs->entries[hs_counter++]->line;\n  } else {\n    return NULL;\n  }\n}\n\nstatic void ap_get_history_end() { xfree(hs); }\n\nstatic int ap_needs_to_leave() {\n  return rl_done || rl_num_chars_to_read > 0 && rl_end >= rl_num_chars_to_read;\n}\n\nstatic char* ap_get_substr(char* text, int start, int end) {\n  int mbchars;\n  int pos_s = 0;\n  int pos = 0;\n  for (mbchars = 0; mbchars < end; mbchars++) {\n    if (mbchars == start) {\n      pos_s = pos;\n    }\n    int l = mblen(text + pos, MB_CUR_MAX);\n    if (l >= 0) {\n      pos += l;\n    } else {\n      if (mbchars < start) {\n        return strdup(\"\");\n      }\n      break;\n    }\n  }\n  return strndup(text + pos_s, pos - pos_s);\n}\n\nstatic char ap_handle_signals() {\n  if (_rl_caught_signal == SIGINT || _rl_caught_signal == SIGHUP) {\n    athame_cleanup(_rl_caught_signal == SIGHUP);\n    _rl_signal_handler(_rl_caught_signal);\n    if (rl_signal_event_hook) {\n      (*rl_signal_event_hook)();\n    }\n    return '\\x03';  //<C-C>\n  }\n  return 0;\n}\n\nstatic char ap_delete;\nstatic char ap_special[KEYMAP_SIZE];\nstatic char ap_nl[KEYMAP_SIZE];\n\nstatic void ap_set_control_chars() {\n  // In default readline these are: tab, <C-D>, <C-L>, and all the newline keys.\n  int specialLen = 0;\n  int nlLen = 0;\n  ap_delete = '\\x04';\n  for (int key = 0; key < KEYMAP_SIZE; key++) {\n    if (_rl_keymap[key].type == ISFUNC) {\n      if (_rl_keymap[key].function == rl_delete) {\n        ap_delete = key;\n        ap_special[specialLen++] = key;\n      } else if (_rl_keymap[key].function == rl_newline) {\n        ap_special[specialLen++] = key;\n        ap_nl[nlLen++] = key;\n      } else if (_rl_keymap[key].function == rl_complete ||\n                 _rl_keymap[key].function == rl_menu_complete ||\n                 _rl_keymap[key].function == rl_backward_menu_complete ||\n                 _rl_keymap[key].function == rl_clear_screen) {\n        ap_special[specialLen++] = key;\n      }\n    }\n  }\n  ap_special[specialLen] = '\\0';\n}\n\n// Tells readline that we weren't in the middle of tab completion, search, etc.\nstatic void ap_set_nospecial() { rl_last_func = rl_insert; }\n\nstatic int ap_is_catching_signals() {\n  return rl_catch_signals;\n}\n"
        },
        {
          "name": "athame_util.h",
          "type": "blob",
          "size": 33.9140625,
          "content": "#include <sys/time.h>\n#include <fcntl.h>\n\nstatic void athame_send_to_vim(char input);\nstatic int athame_get_vim_info();\nstatic void athame_set_failure(char* fail_str);\nstatic char athame_process_input(int instream);\nstatic char athame_process_char(char instream);\nstatic int athame_setup_history();\nstatic int athame_sleep(int msec, int char_break, int instream);\nstatic int athame_get_vim_info_inner();\nstatic void athame_update_vimline(int row, int col);\nstatic int athame_setup_fifo();\nstatic int athame_remote_expr(char* expr, int block);\nstatic int athame_remote_expr_cs(char* expr, int block);\nstatic int athame_remote_expr_v8(char* expr, int block);\nstatic char athame_get_first_char(int instream);\nstatic void athame_highlight(int start, int end);\nstatic void athame_redisplay();\nstatic void athame_bottom_display(char* string, int style, int color,\n                                  int cursor, int force);\nstatic void athame_bottom_mode();\nstatic void athame_poll_vim(int block);\nstatic void athame_draw_failure();\nstatic int athame_has_clean_quit();\nstatic int athame_wait_for_file(char* file_name, int sanity, int char_break,\n                                int instream);\nstatic int athame_select(int file_desc1, int file_desc2, int timeout_sec,\n                         int timeout_ms, int no_signals);\nstatic int athame_is_set(char* env, int def);\nstatic char* athame_tok(char** pointer, char delim);\nstatic long get_time();\nstatic void athame_force_vim_sync();\n\n#define ATHAME_CONTINUE 256\n#define DEFAULT_BUFFER_SIZE 2048\n\nstatic char athame_buffer[DEFAULT_BUFFER_SIZE];\nstatic char bottom_display[DEFAULT_BUFFER_SIZE];\nstatic char athame_command[DEFAULT_BUFFER_SIZE];\nstatic int athame_nvim = 0;\nstatic int cleaned = 0;\nstatic int command_cursor;\nstatic int bottom_color;\nstatic int bottom_style;\nstatic int bottom_cursor;\nstatic const char* athame_failure;\nstatic int msg_sent = 0;\nstatic int vim_pid = 0;\nstatic int expr_pid;\nstatic int vim_term;\nstatic int cs_confirmed;\nstatic FILE* dev_null;\nstatic int fifo;\nstatic int athame_row;\nstatic int updated;\nstatic char* slice_file_name;\nstatic char* contents_file_name;\nstatic char* update_file_name;\nstatic char* messages_file_name;\nstatic char* vimbed_file_name;\nstatic char* dir_name;\nstatic char* fifo_name;\nstatic char* msg_count_file_name;\nstatic char* servername;\n#define VIM_NOT_STARTED 0\n#define VIM_TRIED_START 1\n#define VIM_CONFIRMED_START 2\n#define VIM_RUNNING 3\n#define VIM_NEEDS_RESET 4\nstatic int vim_stage = VIM_NOT_STARTED;\n\n// Have we sent any keys to vim since readline started.\nstatic int sent_to_vim = 0;\n\n// How closely is vim synced with athame?\n#define VIM_SYNC_YES 0\n#define VIM_SYNC_NEEDS_INFO_READ 1\n#define VIM_SYNC_WAITING_POLL_DONE 2\n#define VIM_SYNC_NEEDS_POLL 3\n#define VIM_SYNC_CHAR_BEHIND 4\n#define VIM_SYNC_NO 5\nstatic int vim_sync = VIM_SYNC_YES;\nstatic long time_to_sync = 0;\n\n// Measured in ms since epoch\nstatic long time_to_poll = -1;\nstatic long vim_started = -1;\n\n// Number of stale polls since last keypress or change\nstatic int stale_polls = 0;\n\nstatic int change_since_key = 0;\n\n// For figure out if vim got stuck\nstatic int keys_since_change = 0;\n\nstatic FILE* athame_outstream = 0;\n\nstatic char athame_mode[3];\nstatic char last_athame_mode[3];\nstatic int end_col;  // For visual mode\nstatic int end_row;  // For visual mode\n\nstatic int athame_dirty;\n\nstatic int start_vim(int char_break, int instream) {\n  if (char_break && athame_select(instream, -1, 0, 0, 0) > 0) {\n    return 2;\n  }\n\n  char* etcrc = \"/etc/athamerc\";\n  char homerc[256];\n  char* athamerc = getenv(\"ATHAME_TEST_RC\");\n  int testrc = athamerc != NULL;\n  if (!testrc) {\n    snprintf(homerc, 255, \"%s/.athamerc\", getenv(\"HOME\"));\n    if (!access(homerc, R_OK)) {\n      athamerc = homerc;\n    } else if (!access(etcrc, R_OK)) {\n      athamerc = etcrc;\n    } else {\n      athame_set_failure(\"No athamerc found\");\n      return 1;\n    }\n  }\n\n  int pid = forkpty(&vim_term, NULL, NULL, NULL);\n  if (pid == 0) {\n    int cursor = ap_get_cursor();\n    snprintf(athame_buffer, DEFAULT_BUFFER_SIZE - 1,\n             \"+call Vimbed_UpdateText(%d, %d, %d, %d, 1, 'StartLine')\",\n             athame_row + 1, cursor + 1, athame_row + 1, cursor + 1);\n    int vim_error = 0;\n    char* setup_str;\n    asprintf(&setup_str, \"+call Vimbed_SetupVimbed('', '%s', 'slice')\", dir_name);\n    if (athame_is_set(\"ATHAME_USE_JOBS\", ATHAME_USE_JOBS_DEFAULT)) {\n      if (testrc) {\n        vim_error =\n            execl(ATHAME_VIM_BIN, \"vim\", \"-u\", \"NONE\", \"-S\", vimbed_file_name,\n                  \"-S\", athamerc, setup_str, athame_buffer, NULL);\n      } else {\n        vim_error = execl(ATHAME_VIM_BIN, \"vim\", \"-S\", vimbed_file_name, \"-S\",\n                          athamerc, setup_str, athame_buffer, NULL);\n      }\n      free(setup_str);\n    } else {\n      if (testrc) {\n        vim_error = execl(ATHAME_VIM_BIN, \"vim\", \"--servername\", servername, \"-u\",\n                          \"NONE\", \"-S\", vimbed_file_name, \"-S\", athamerc,\n                          setup_str, athame_buffer, NULL);\n      } else {\n        vim_error = execl(ATHAME_VIM_BIN, \"vim\", \"--servername\", servername, \"-S\",\n                          vimbed_file_name, \"-S\", athamerc, setup_str,\n                          athame_buffer, NULL);\n      }\n    }\n    free(setup_str);\n    if (vim_error != 0) {\n      printf(\"Error: %d\", errno);\n      exit(EXIT_FAILURE);\n    }\n    return 1;\n  } else if (pid == -1) {\n    athame_set_failure(\"Failure starting Vim\");\n    return 1;\n  } else {\n    vim_pid = pid;\n    ap_set_control_chars();\n    return 0;\n  }\n}\n\nstatic int confirm_vim_start(int char_break, int instream) {\n  int selected = athame_select(vim_term, char_break ? instream : -1,\n                               char_break ? 5 : 1, 0, 1);\n  if (selected == -1) {\n    athame_set_failure(\"Select interupted\");\n    return 1;\n  }\n  if (selected == 0) {\n    athame_set_failure(\"Vim timed out\");\n    return 1;\n  } else if (selected == 2) {\n    return 2;\n  }\n\n  int amount = read(vim_term, athame_buffer, 5);\n  athame_buffer[amount] = '\\0';\n  if (strncmp(athame_buffer, \"Error\", 5) == 0) {\n    char* error;\n    asprintf(&error, \"Couldn't load vim path: %s\", ATHAME_VIM_BIN);\n    athame_set_failure(error);\n    free(error);\n    return 1;\n  } else if (strncmp(athame_buffer, \"VIM\", 3) == 0)\n  // Vim should dump termcap stuff before this if things are working, so only\n  // bother checking for errors if we start with VIM.\n  // If Vim changes to not start errors with \"VIM\", we will still catch the\n  // error later with the vague \"Vimbed failure\" label\n  {\n    athame_sleep(20, 0, 0);\n    amount = read(vim_term, athame_buffer, 200);\n    athame_buffer[amount] = '\\0';\n    if (strstr(athame_buffer, \"--servername\")) {\n      char* error;\n      asprintf(&error, \"%s was not compiled with clientserver support.\",\n               ATHAME_VIM_BIN);\n\n      athame_set_failure(error);\n      free(error);\n      return 1;\n    }  //--servername\n  }    // VIM\n  return 0;\n}\n\nstatic int athame_wait_for_vim(int char_break, int instream) {\n  int error = athame_wait_for_file(slice_file_name, 50, char_break, instream);\n  if (error == 1) {\n    if (athame_wait_for_file(contents_file_name, 1, 0, 0) == 0) {\n      athame_set_failure(\"Using incompatible vimbed version\");\n    } else {\n      athame_set_failure(\"Vimbed failure\");\n    }\n  }\n  if (error > 0) {\n    return error;\n  }\n\n  snprintf(athame_buffer, DEFAULT_BUFFER_SIZE-1, \"%s/nvim\", dir_name);\n  athame_nvim = !athame_wait_for_file(athame_buffer, 0, 0, 0);\n\n  vim_started = get_time();\n\n  if (char_break) {\n    // Grab the mode now because the program might block (like gdb).\n    int i;\n    for (i = 0; i < 6; i++) {\n      if (athame_mode[0] != 'n' || athame_sleep(10, char_break, instream)) {\n        break;\n      }\n      athame_get_vim_info();\n    }\n  } else {\n    athame_get_vim_info();\n  }\n  athame_redisplay();\n\n  return 0;\n}\n\n// Make sure vim is running,\n//  or set athame_failure,\n//  or (if char_break) break on char press\nstatic void athame_ensure_vim(int char_break, int instream) {\n  // These will fallthrough if not interrupted.\n  if (vim_stage == VIM_NOT_STARTED) {\n    if (!start_vim(char_break, instream)) {\n      vim_stage = VIM_TRIED_START;\n    }\n  }\n  if (vim_stage == VIM_TRIED_START) {\n    if (!confirm_vim_start(char_break, instream)) {\n      vim_stage = VIM_CONFIRMED_START;\n    }\n  }\n  if (vim_stage == VIM_CONFIRMED_START) {\n    if (!athame_wait_for_vim(char_break, instream)) {\n      vim_stage = VIM_RUNNING;\n    }\n  }\n  if (vim_stage == VIM_NEEDS_RESET) {\n    if (char_break && athame_select(instream, -1, 0, 0, 0) > 0) {\n      return;\n    }\n    athame_remote_expr(\"Vimbed_Reset()\", 1);\n    int cursor = ap_get_cursor();\n    snprintf(athame_buffer, DEFAULT_BUFFER_SIZE - 1,\n             \"Vimbed_UpdateText(%d, %d, %d, %d, 1, 'StartLine')\",\n             athame_row + 1, cursor + 1, athame_row + 1, cursor + 1);\n    athame_remote_expr(athame_buffer, 1);\n    athame_poll_vim(1);\n    athame_get_vim_info();\n    athame_redisplay();\n    vim_stage = VIM_RUNNING;\n  }\n}\n\nstatic int athame_wait_for_file(char* file_name, int sanity, int char_break,\n                                int instream) {\n  // Check for existance of a file to see if we have advanced that far\n  FILE* theFile = 0;\n  theFile = fopen(file_name, \"r\");\n  while (!theFile) {\n    if (sanity-- < 0) {\n      return 1;\n    }\n    if (athame_sleep(20, char_break, instream)) {\n      return 2;\n    }\n    theFile = fopen(file_name, \"r\");\n  }\n  fclose(theFile);\n  return 0;\n}\n\nstatic char athame_get_first_char(int instream) {\n  char return_val = '\\0';\n  if (athame_select(instream, -1, 0, 0, 0) > 0) {\n    read(instream, &return_val, 1);\n  }\n  return return_val;\n}\n\nstatic int athame_sleep(int msec, int char_break, int instream) {\n  if (char_break) {\n    return athame_select(instream, -1, 0, msec, 1) > 0;\n  } else {\n    struct timespec timeout, timeout2;\n    timeout.tv_sec = 0;\n    timeout.tv_nsec = msec * 1000000;\n    while (nanosleep(&timeout, &timeout2) < 0) {\n      timeout = timeout2;\n    }\n    return 0;\n  }\n}\n\n/* Write history file and store number of lines in athame_row */\nstatic int athame_setup_history() {\n  FILE* updateFile = fopen(update_file_name, \"w+\");\n\n  if (!updateFile) {\n    char* fail_str;\n    asprintf(&fail_str, \"Couldn't create temporary file in %s\", dir_name);\n    athame_set_failure(fail_str);\n    free(fail_str);\n    return 1;\n  }\n\n  ap_get_history_start();\n  int total_lines = 0;\n  char* history_line;\n  while (history_line = ap_get_history_next()) {\n    fwrite(history_line, 1, strlen(history_line), updateFile);\n    // Count newlines in history\n    while (history_line = strstr(history_line, \"\\n\")) {\n      history_line++;\n      total_lines++;\n    }\n    fwrite(\"\\n\", 1, 1, updateFile);\n    total_lines++;\n  }\n  fwrite(ap_get_line_buffer(), 1, ap_get_line_buffer_length(), updateFile);\n  fwrite(\"\\n\", 1, 1, updateFile);\n  athame_row = total_lines;\n  ap_get_history_end();\n\n  fclose(updateFile);\n  return 0;\n}\n\nstatic int athame_remote_expr(char* expr, int block) {\n  if (athame_failure) {\n    return 1;\n  }\n\n  if (athame_is_set(\"ATHAME_USE_JOBS\", ATHAME_USE_JOBS_DEFAULT)){\n    return athame_remote_expr_v8(expr, block);\n  } else {\n    return athame_remote_expr_cs(expr, block);\n  }\n};\n\n// Sends a message to vim\n//\n// All the use_pipe stuff is for checking that clientserver actually works. By\n// now Vim has told us that it does, but we actually make sure since some\n// versions (like MacVim) lie about it.\nstatic int athame_remote_expr_cs(char* expr, int block) {\n  int stdout_to_readline[2];\n  int stderr_to_readline[2];\n  int use_pipe = 0;\n  if (block && !cs_confirmed) {\n    use_pipe = 1;\n    pipe(stdout_to_readline);\n    pipe(stderr_to_readline);\n  }\n  // wait for last remote_expr to finish\n  if (expr_pid > 0) {\n    if (waitpid(expr_pid, NULL, block ? 0 : WNOHANG) == 0) {\n      return -1;\n    }\n  }\n\n  expr_pid = fork();\n  if (expr_pid == 0) {\n    if (use_pipe) {\n      dup2(stdout_to_readline[1], STDOUT_FILENO);\n      dup2(stderr_to_readline[1], STDERR_FILENO);\n      close(stdout_to_readline[0]);\n      close(stderr_to_readline[0]);\n    } else {\n      dup2(fileno(dev_null), STDOUT_FILENO);\n      dup2(fileno(dev_null), STDERR_FILENO);\n    }\n\n    execl(ATHAME_VIM_BIN, \"vim\", \"--servername\", servername, \"--remote-expr\",\n          expr, NULL);\n    printf(\"Expr Error:%d\", errno);\n    exit(EXIT_FAILURE);\n  } else if (expr_pid == -1) {\n    // TODO: error handling\n    if (use_pipe) {\n      close(stdout_to_readline[0]);\n      close(stderr_to_readline[0]);\n      close(stdout_to_readline[1]);\n      close(stderr_to_readline[1]);\n    }\n    athame_set_failure(\"Clientserver error\");\n    return -1;\n  } else {\n    if (block) {\n      waitpid(expr_pid, NULL, 0);\n      expr_pid = 0;\n    }\n    if (use_pipe) {\n      close(stdout_to_readline[1]);\n      close(stderr_to_readline[1]);\n      int selected = athame_select(stdout_to_readline[0], stderr_to_readline[0],\n                                   -1, -1, 0);\n      if (selected > 0) {\n        char error[80];\n        if (selected == 2 || read(stdout_to_readline[0], error, 1) < 1) {\n          error[read(stderr_to_readline[0], error,\n                     sizeof(error) / sizeof(char))] = '\\0';\n          snprintf(athame_buffer, DEFAULT_BUFFER_SIZE - 1,\n                   \"Clientserver error for %s:%s\", expr, error);\n          athame_set_failure(athame_buffer);\n          close(stdout_to_readline[0]);\n          close(stderr_to_readline[0]);\n          return -1;\n        }\n        cs_confirmed = 1;\n      }\n      close(stdout_to_readline[0]);\n      close(stderr_to_readline[0]);\n    }\n  }\n  return 0;\n}\n\n\n//If block, blocks while an expr is in flight (gives up after ~3 sec for safety)\n//Otherwise returns 1 if an expr is in flight.\nstatic int check_expr_in_flight(int block) {\n  char msgCount[256];\n  for (int sanity = 300; sanity > 0; sanity--) {\n    FILE* msgCountFile = fopen(msg_count_file_name, \"r\");\n    int count;\n    if (msgCountFile == 0) {\n      count = 0;\n    } else {\n      fread(msgCount, 1, 255, msgCountFile);\n      fclose(msgCountFile);\n      msgCount[255]='\\0';\n    }\n    count = strtol(msgCount, NULL, 10);\n    if (count >= msg_sent) {\n      return 0;\n    }\n    if (!block) {\n      return 1;\n    }\n    athame_sleep(10, 0, 0);\n  }\n  athame_set_failure(\"Failed to sync with vim job\");\n  return 1;\n}\n\n\nchar fifo_buffer[DEFAULT_BUFFER_SIZE];\n\nstatic int athame_setup_fifo() {\n  int sanity = 40;\n  while (fifo <= 0) {\n    sanity--;\n    if (sanity < 1) {\n      return 1;\n    }\n    fifo = open(fifo_name, O_WRONLY | O_NONBLOCK);\n    if (fifo < 0) {\n      athame_sleep(25, 0, 0);\n    }\n  }\n  return 0;\n}\n\nstatic int athame_remote_expr_v8(char* expr, int block) {\n  int ret = check_expr_in_flight(block);\n\n  if (ret) {\n    return ret;\n  }\n\n  msg_sent++;\n\n  if (athame_setup_fifo()) {\n    athame_set_failure(\"Vim not reading from fifo\");\n    return 1;\n  }\n\n  snprintf(fifo_buffer, DEFAULT_BUFFER_SIZE-1, \"%d:%s\\n\", msg_sent, expr);\n  write(fifo, fifo_buffer, strlen(fifo_buffer));\n\n  if (block) {\n    check_expr_in_flight(1);\n  }\n  return 0;\n}\n\nstatic void athame_update_vimline(int row, int col) {\n  FILE* updateFile = fopen(update_file_name, \"w+\");\n\n  fwrite(ap_get_line_buffer(), 1, ap_get_line_buffer_length(), updateFile);\n  fwrite(\"\\n\", 1, 1, updateFile);\n\n  fclose(updateFile);\n\n  snprintf(athame_buffer, DEFAULT_BUFFER_SIZE - 1,\n           \"Vimbed_UpdateText(%d, %d, %d, %d, 0, '')\", row + 1, col + 1,\n           row + 1, col + 1);\n\n  athame_remote_expr(athame_buffer, 1);\n  updated = 1;\n}\n\nstatic long get_timeout_msec() {\n  if (vim_sync >= VIM_SYNC_CHAR_BEHIND) {\n    time_to_sync = 100 + get_time();\n    return 100;\n  }\n  if (time_to_poll == -1) {\n    return -1;\n  }\n  return MAX(30, time_to_poll - get_time() + 5);\n}\n\nstatic void request_poll() {\n  if (stale_polls > 2) {\n    return;\n  }\n  long request_time =\n      get_time() + (change_since_key || stale_polls > 0 ? 500 : 100);\n  time_to_poll =\n      time_to_poll < 0 ? request_time : MIN(time_to_poll, request_time);\n}\n\nstatic void athame_poll_vim(int block) {\n  time_to_poll = -1;\n\n  // Poll Vim. If we fail, postpone the poll by requesting a new poll\n  if (athame_remote_expr(\"Vimbed_Poll()\", block) == 0) {\n    if (vim_sync == VIM_SYNC_WAITING_POLL_DONE) {\n      vim_sync = VIM_SYNC_NEEDS_INFO_READ;\n    } else if (vim_sync == VIM_SYNC_NEEDS_POLL) {\n      if (block) {\n        vim_sync = VIM_SYNC_NEEDS_INFO_READ;\n      } else {\n        vim_sync = VIM_SYNC_WAITING_POLL_DONE;\n      }\n    }\n    stale_polls++;\n  } else {\n    request_poll();\n  }\n}\n\nint last_bdisplay_top = 0;\nint last_bdisplay_bottom = 0;\nint text_lines_for_bdisplay = 0;\n\nvoid athame_bottom_display(char* string, int style, int color, int cursor,\n                           int force) {\n  int term_height, term_width;\n  ap_get_term_size(&term_height, &term_width);\n\n  int new_text_lines =\n      (ap_get_line_char_length() + ap_get_prompt_length()) / term_width;\n\n  if (!force && term_height == last_bdisplay_bottom) {\n    int changed = 0;\n    changed |= (strcmp(bottom_display, string));\n    if (string[0] != '\\0') {\n      changed |= (style != bottom_style);\n      changed |= (color != bottom_color);\n      changed |= (cursor != bottom_cursor);\n      changed |= (new_text_lines != text_lines_for_bdisplay);\n    }\n    if (!changed) {\n      return;\n    }\n  }\n  text_lines_for_bdisplay = new_text_lines;\n\n  strncpy(bottom_display, string, DEFAULT_BUFFER_SIZE - 1);\n  bottom_display[DEFAULT_BUFFER_SIZE - 1] = '\\0';\n  bottom_style = style;\n  bottom_color = color;\n  bottom_cursor = cursor;\n\n  if (!last_bdisplay_bottom) {\n    last_bdisplay_top = term_height;\n    last_bdisplay_bottom = term_height;\n  }\n\n  int temp = ap_get_cursor();\n  if (!athame_dirty) {\n    ap_set_cursor_end();\n    ap_display();\n  }\n\n  int extra_lines = ((int)strlen(string)) / term_width;\n  int i;\n  for (i = 0; i < extra_lines; i++) {\n    fprintf(athame_outstream, \"\\e[B\");\n  }\n\n  char colorstyle[64];\n  if (color) {\n    sprintf(colorstyle, \"\\e[%d;%dm\", style, color);\n  } else {\n    sprintf(colorstyle, \"\\e[%dm\", style);\n  }\n\n  char erase[64];\n  if (term_height != last_bdisplay_bottom) {\n    // We've been resized and have no idea where the last bottom display is.\n    // Clear everything after the current text.\n    sprintf(erase, \"\\e[J\");\n  } else if (!athame_dirty &&\n             ap_get_line_char_length() + ap_get_prompt_length() >= term_width) {\n    // Delete text in the way on my row and bottom display but leave everything\n    // else alone\n    sprintf(erase, \"\\e[K\\e[%d;1H\\e[J\", last_bdisplay_top);\n  } else {\n    sprintf(erase, \"\\e[%d;1H\\e[J\", last_bdisplay_top);\n  }\n\n  char cursor_code[64];\n  if (cursor) {\n    char cursor_char = string[MIN(cursor, strlen(string))];\n    if (!cursor_char) {\n      cursor_char = ' ';\n    }\n    sprintf(cursor_code, \"\\e[%d;%dH\\e[7m%c\",\n            term_height - extra_lines + cursor / term_width,\n            cursor % term_width + 1, cursor_char);\n  } else {\n    cursor_code[0] = '\\0';\n  }\n\n  //\\e7\\n\\e8\\e[B\\e[A         Add a line underneath if at bottom\n  //\\e7                      Save cursor position\n  //%s(erase)                Delete old athame_bottom_display\n  //\\e[%d;1H                 Go to position for new athame_bottom_display\n  //%s(colorstyle)%s(string) Write bottom display using given color/style\n  //%s                       Draw cursor for command mode\n  //\\e[0m                    Reset style\n  //\\e8                      Return to saved position\n  fprintf(athame_outstream, \"\\e7\\n\\e8\\e[B\\e[A\\e7%s\\e[%d;1H%s%s%s\\e[0m\\e8\",\n          erase, term_height - extra_lines, colorstyle, string, cursor_code);\n\n  for (i = 0; i < extra_lines; i++) {\n    fprintf(athame_outstream, \"\\e[A\");\n  }\n\n  last_bdisplay_bottom = term_height;\n  last_bdisplay_top = term_height - extra_lines;\n\n  fflush(athame_outstream);\n  if (!athame_dirty) {\n    ap_set_cursor(temp);\n    ap_display();\n  }\n}\n\nstatic int athame_clear_dirty() {\n  if (!athame_dirty) {\n    return 0;\n  }\n\n  int count = athame_dirty;\n  while (athame_dirty) {\n    if (athame_dirty == count) {\n      // Avoid deleting prompt\n      fprintf(athame_outstream, \"\\e[%dG\\e[K\\n\", ap_get_prompt_length() + 1);\n    } else {\n      fprintf(athame_outstream, \"\\e[2K\\n\");\n    }\n    athame_dirty--;\n  }\n  while (count) {\n    fprintf(athame_outstream, \"\\e[A\");\n    count--;\n  }\n  fflush(athame_outstream);\n  return 1;\n}\n\nstatic void athame_redisplay() {\n  if (strcmp(athame_mode, \"v\") == 0 || strcmp(athame_mode, \"V\") == 0 ||\n      strcmp(athame_mode, \"s\") == 0 || strcmp(athame_mode, \"c\") == 0) {\n    athame_bottom_display(\"\", ATHAME_BOLD, ATHAME_DEFAULT, 0, 0);\n\n    // Athame_highlight assumes the cursor is on the current terminal row. If we\n    // came from normal readline display, that might not be the case\n    if (!athame_clear_dirty()) {\n      int temp = ap_get_cursor();\n      ap_set_cursor(0);\n      ap_display();\n      ap_set_cursor(temp);\n    }\n    athame_highlight(ap_get_cursor(), end_col);\n  } else {\n    if (athame_clear_dirty()) {\n      fprintf(athame_outstream, \"\\e[%dG\", ap_get_prompt_length() + 1);\n      fflush(athame_outstream);\n      ap_display();\n    } else {\n      ap_display();\n    }\n  }\n  athame_bottom_mode();\n}\n\nstatic char* athame_copy_w_space(char* text) {\n  int len = strlen(text);\n  text[len] = ' ';\n  char* ret = strndup(text, len + 1);\n  text[len] = '\\0';\n  return ret;\n}\n\nstatic int athame_draw_line_with_highlight(char* text, int start, int end) {\n  int prompt_len = ap_get_prompt_length();\n  int term_width;\n  ap_get_term_size(NULL, &term_width);\n  // How much more than one line does the text take up (if it wraps)\n  int extra_lines = ((int)strlen(text) + prompt_len - 1) / term_width;\n  // How far down is the start of the highlight (if text wraps)\n  int extra_lines_s = (start + prompt_len) / term_width;\n  // How far down is the end of the highlight (if text wraps)\n  int extra_lines_e = (end + prompt_len - 1) / term_width;\n\n  char* with_space = athame_copy_w_space(text);\n  char* highlighted = ap_get_substr(with_space, start, end);\n  free(with_space);\n\n  fprintf(athame_outstream, \"\\e[%dG%s\", prompt_len + 1, text);\n  if (extra_lines - extra_lines_s) {\n    fprintf(athame_outstream, \"\\e[%dA\", extra_lines - extra_lines_s);\n  }\n\n  fprintf(athame_outstream, \"\\e[%dG\\e[7m%s\\e[0m\",\n          (prompt_len + start) % term_width + 1, highlighted);\n\n  free(highlighted);\n\n  if (extra_lines - extra_lines_e) {\n    fprintf(athame_outstream, \"\\e[%dB\", extra_lines - extra_lines_e);\n  }\n  fprintf(athame_outstream, \"\\n\");\n  return extra_lines + 1;\n}\n\nstatic void athame_highlight(int start, int end) {\n  char* highlight_buffer = strdup(ap_get_line_buffer());\n  char* hi_loc = highlight_buffer;\n  int cursor = ap_get_cursor();\n  ap_set_line_buffer(\"\");\n  ap_display();\n  ap_set_line_buffer(highlight_buffer);\n  ap_set_cursor(cursor);\n  char* new_string = athame_tok(&hi_loc, '\\n');\n  while (new_string) {\n    char* next_string;\n    int this_start;\n    int this_end;\n    next_string = athame_tok(&hi_loc, '\\n');\n\n    if (new_string == highlight_buffer) {\n      this_start = start;\n    } else {\n      this_start = 0;\n    }\n    if (next_string || end == 0 ||\n        (end <= start && new_string == highlight_buffer)) {\n      this_end = strlen(new_string) + 1;\n    } else {\n      this_end = end;\n    }\n    athame_dirty +=\n        athame_draw_line_with_highlight(new_string, this_start, this_end);\n    new_string = next_string;\n  }\n  free(highlight_buffer);\n  if (athame_dirty) {\n    fprintf(athame_outstream, \"\\e[%dA\", athame_dirty);\n  }\n  fflush(athame_outstream);\n}\n\nstatic int athame_has_clean_quit() {\n  FILE* sliceFile = fopen(slice_file_name, \"r\");\n  if (!sliceFile) {\n    return 0;\n  }\n  int bytes_read = fread(athame_buffer, 1, 4, sliceFile);\n  fclose(sliceFile);\n  return strncmp(athame_buffer, \"quit\", bytes_read) == 0;\n}\n\nstatic char* athame_get_mode_text(char* mode) {\n  switch (mode[0]) {\n    case 'i': return \"INSERT\";\n    case 'n': return \"NORMAL\";\n    case 'v': return \"VISUAL\";\n    case 'V': return \"VISUAL LINE\";\n    case 's': return \"SELECT\";\n    case 'S': return \"SELECT LINE\";\n    case 'R': return \"REPLACE\";\n    case 'c': return \"COMMAND\";\n    default:  return \"\";\n  }\n}\n\nstatic int athame_set_mode(char* mode) {\n  if (strcmp(athame_mode, mode) != 0) {\n    char* mode_string = athame_get_mode_text(mode);\n    strcpy(athame_mode, mode);\n    setenv(\"ATHAME_VIM_MODE\", mode_string, 1);\n    ap_redraw_prompt();\n    return 1;\n  }\n  return 0;\n}\n\nstatic void athame_bottom_mode() {\n  if (athame_failure) {\n    return;\n  }\n  char* mode_string = athame_get_mode_text(athame_mode);\n  {\n    if (athame_mode[0] == 'c' && athame_is_set(\"ATHAME_SHOW_COMMAND\", 1)) {\n      athame_bottom_display(athame_command, ATHAME_NORMAL, ATHAME_DEFAULT,\n                            command_cursor, 0);\n    } else if (athame_is_set(\"ATHAME_SHOW_MODE\", 1)) {\n      if (athame_mode[0] == 'n') {\n        athame_bottom_display(\"\", ATHAME_BOLD, ATHAME_DEFAULT, 0, 0);\n      } else if (mode_string[0]) {\n        sprintf(athame_buffer, \"-- %s --\", mode_string);\n        athame_bottom_display(athame_buffer, ATHAME_BOLD, ATHAME_DEFAULT, 0, 0);\n      }\n    }\n  }\n}\n\nstatic void athame_draw_failure() {\n  setenv(\"ATHAME_ERROR\", athame_failure, 1);\n  if (athame_is_set(\"ATHAME_SHOW_ERROR\", 1)) {\n    snprintf(athame_buffer, DEFAULT_BUFFER_SIZE - 1, \"Athame Failure: %s\",\n             athame_failure);\n    athame_bottom_display(athame_buffer, ATHAME_BOLD, ATHAME_RED, 0, 0);\n  }\n}\n\nstatic void athame_set_failure(char* fail_str) {\n  if (athame_failure == 0) {\n    kill(vim_pid, SIGTERM);\n  }\n  athame_failure = strdup(fail_str);\n  athame_draw_failure();\n}\n\nstatic char athame_process_input(int instream) {\n  char result;\n  int chars_read = read(instream, &result, 1);\n  if (chars_read == 1) {\n    return athame_process_char(result);\n  } else {\n    return EOF;\n  }\n}\n\n// Should we send the char to readline?\nstatic int athame_is_special_char(char char_read) {\n  if (athame_failure) {\n    return 1;\n  }\n  if (strchr(ap_special, char_read)) {\n    // Make sure our mode is up to date.\n    athame_force_vim_sync();\n    // Most specials trigger only on inserty modes.\n    if (strchr(\"iR\", athame_mode[0])) {\n      return 1;\n    }\n    // Newlines trigger on all non command modes.\n    if (strchr(ap_nl, char_read)) {\n      if (athame_mode[0] != 'c') {\n        return 1;\n      }\n    }\n  }\n  ap_set_nospecial();\n  return 0;\n}\n\nstatic char athame_process_char(char char_read) {\n  if (athame_is_special_char(char_read)) {\n    return char_read;\n  } else {\n    sent_to_vim = 1;\n    stale_polls = 0;\n    change_since_key = 0;\n\n    // Backspace\n    if (char_read == '\\177') {\n      char_read = '\\b';\n    }\n    athame_send_to_vim(char_read);\n    keys_since_change++;\n    return 0;\n  }\n}\n\nstatic void athame_send_to_vim(char input) {\n  if (vim_sync < VIM_SYNC_CHAR_BEHIND) {\n    vim_sync = VIM_SYNC_CHAR_BEHIND;\n  } else {\n    vim_sync = VIM_SYNC_NO;\n  }\n  write(vim_term, &input, 1);\n}\n\nstatic int athame_get_vim_info() {\n  if (vim_sync == VIM_SYNC_NEEDS_INFO_READ) {\n    vim_sync = VIM_SYNC_YES;\n  }\n  if (athame_get_vim_info_inner()) {\n    time_to_poll = -1;\n    stale_polls = 0;\n    change_since_key = 1;\n    keys_since_change = 0;\n    athame_redisplay();\n    return 1;\n  }\n  return 0;\n}\n\nstatic int athame_get_col_row(char* string, int* col, int* row) {\n  if (string && athame_tok(&string, ',')) {\n    char* colStr = athame_tok(&string, ',');\n    if (!colStr) {\n      return 0;\n    }\n    *col = strtol(colStr, NULL, 10);\n    if (row) {\n      char* rowStr = athame_tok(&string, ',');\n      if (!rowStr) {\n        return 0;\n      }\n      *row = strtol(rowStr, NULL, 10);\n    }\n    return 1;\n  }\n  return 0;\n}\n\nstatic int athame_get_vim_info_inner() {\n  int changed = 0;\n  ssize_t bytes_read;\n  if (athame_failure) {\n    return 1;\n  }\n\n  FILE* sliceFile = fopen(slice_file_name, \"r\");\n  if (!sliceFile) {\n    return 0;\n  }\n  bytes_read = fread(athame_buffer, 1, DEFAULT_BUFFER_SIZE - 1, sliceFile);\n  fclose(sliceFile);\n\n  athame_buffer[bytes_read] = 0;\n  char* buffer_loc = athame_buffer;\n  char* mode = athame_tok(&buffer_loc, '\\n');\n  if (!mode || *mode==0) {\n    return changed;\n  }\n\n  if (mode[0] == 'c') {\n    changed |= athame_set_mode(\"c\");\n    char* command = athame_tok(&buffer_loc, '\\n');\n    int cmd_pos = 0;\n    if (mode[1] == ',') {\n      cmd_pos = strtol(mode + 2, NULL, 10);\n    }\n    if (command) {\n      if (strcmp(athame_command, command) != 0 || command_cursor != cmd_pos) {\n        setenv(\"ATHAME_VIM_COMMAND\", command, 1);\n        strcpy(athame_command, command);\n        command_cursor = cmd_pos;\n        changed = 1;\n      }\n    }\n  } else {\n    if (athame_mode[0] == 'c' && athame_is_set(\"ATHAME_SHOW_COMMAND\", 1)) {\n      athame_bottom_display(\"\", ATHAME_NORMAL, ATHAME_DEFAULT, 0, 0);\n    }\n    if (strcmp(mode, \"quit\") == 0) {\n      // Don't do work if we're quitting.\n      return 0;\n    }\n    changed |= athame_set_mode(mode);\n  }\n  char* location = athame_tok(&buffer_loc, '\\n');\n  if (!location) {\n    return changed;\n  }\n  char* location2 = athame_tok(&buffer_loc, '\\n');\n\n  int col = -1;\n  int row = -1;\n  if (athame_get_col_row(location, &col, &row)) {\n    if (col < 0 || row < 0) {\n      col = 0;\n      location2 = NULL;\n    }\n\n    int new_end_col;\n    int new_end_row;\n    if (athame_get_col_row(location2, &new_end_col, &new_end_row)) {\n      if (new_end_col != end_col || new_end_row != end_row) {\n        end_col = new_end_col;\n        end_row = new_end_row;\n        changed = 1;\n      }\n    } else {\n      end_col = col + 1;\n      end_row = row;\n    }\n\n    if (athame_row != row) {\n      athame_row = row;\n      changed = 1;\n    }\n  }\n\n  if (!buffer_loc) {\n    ap_set_line_buffer(\"\");\n    return changed;\n  }\n\n  if (strcmp(ap_get_line_buffer(), buffer_loc) != 0) {\n    changed = 1;\n    ap_set_line_buffer(buffer_loc);\n  }\n  if (col > -1 && ap_get_cursor() != col) {\n    ap_set_cursor(col);\n    changed = 1;\n  }\n\n  return changed;\n}\n\nstatic int athame_select(int file_desc1, int file_desc2, int timeout_sec,\n                         int timeout_ms, int no_signals) {\n  fd_set files;\n  FD_ZERO(&files);\n  if (file_desc1 > -1) {\n    FD_SET(file_desc1, &files);\n  }\n  if (file_desc2 > -1) {\n    FD_SET(file_desc2, &files);\n  }\n  sigset_t block_signals;\n  int use_timeout = timeout_sec >= 0 && timeout_ms >= 0;\n  int results;\n  if (no_signals) {\n    struct timespec timeout;\n    timeout.tv_sec = timeout_sec;\n    timeout.tv_nsec = timeout_ms * 1000000;\n    sigfillset(&block_signals);\n    results = pselect(MAX(file_desc1, file_desc2) + 1, &files, NULL, NULL,\n                      use_timeout ? &timeout : NULL, &block_signals);\n  } else {\n    struct timeval timeout;\n    timeout.tv_sec = timeout_sec;\n    timeout.tv_usec = timeout_ms * 1000;\n    results = select(MAX(file_desc1, file_desc2) + 1, &files, NULL, NULL,\n                     use_timeout ? &timeout : NULL);\n  }\n  if (results > 0) {\n    if (file_desc1 >= 0 && FD_ISSET(file_desc1, &files)) {\n      return 1;\n    }\n    if (file_desc2 >= 0 && FD_ISSET(file_desc2, &files)) {\n      return 2;\n    }\n  }\n  return results;\n}\n\nint athame_is_set(char* env, int def) {\n  char* env_val = getenv(env);\n  if (!env_val) {\n    setenv(env, def ? \"1\" : \"0\", 0);\n    return def;\n  } else {\n    return env_val[0] == '1';\n  }\n}\n\n// Unlike normal strtok, this\n// - moves pointer to point after delim\n// - gives the empty strings between consecutive tokens.\n// - has no external state\nstatic char* athame_tok(char** pointer, char delim) {\n  if (*pointer == 0) {\n    return 0;\n  }\n  char* original = *pointer;\n  char* loc = strchr(original, delim);\n  if (loc == 0) {\n    *pointer = 0;\n  } else {\n    *loc = '\\0';\n    *pointer = loc + 1;\n  }\n  return original;\n}\n\nstatic long get_time() {\n// We need to check __MACH__ too because OSX claims it has this functionality\n// but doesn't.\n#if _POSIX_MONOTONIC_CLOCK && !__MACH__\n  struct timespec t;\n#if CLOCK_MONOTONIC_COARSE\n  clock_gettime(CLOCK_MONOTONIC_COARSE, &t);\n#else\n  clock_gettime(CLOCK_MONOTONIC, &t);\n#endif\n  return t.tv_sec * 1000L + t.tv_nsec / 1000 / 1000;\n#else\n  struct timeval t;\n  gettimeofday(&t, NULL);\n  return t.tv_sec * 1000L + t.tv_usec / 1000;\n#endif\n}\n\nstatic void wait_then_kill(int pid) {\n  int i;\n  for (i = 0; i < 10; i++) {\n    if (waitpid(pid, NULL, WNOHANG) != 0) {\n      break;\n    }\n    athame_sleep(5, 0, 0);\n  }\n  if (waitpid(pid, NULL, WNOHANG) == 0) {\n    kill(pid, SIGKILL);\n    waitpid(pid, NULL, 0);\n  }\n}\n\nstatic void athame_force_vim_sync() {\n  if (vim_sync == VIM_SYNC_YES) {\n    return;\n  }\n  if (vim_sync == VIM_SYNC_CHAR_BEHIND) {\n    athame_sleep(20, 0, 0);\n    vim_sync = VIM_SYNC_NEEDS_POLL;\n  } else if (vim_sync == VIM_SYNC_NO) {\n    if (athame_select(vim_term, -1, 0, MAX(1, time_to_sync - get_time()), 1) !=\n        0) {\n      int sanity = 100;\n      while (athame_select(vim_term, -1, 0, 100, 1) != 0 && sanity-- > 0) {\n        athame_sleep(5, 0, 0);\n        read(vim_term, athame_buffer, DEFAULT_BUFFER_SIZE - 1);\n      }\n    }\n    vim_sync = VIM_SYNC_NEEDS_POLL;\n  }\n  if (vim_sync == VIM_SYNC_WAITING_POLL_DONE) {\n    if (athame_is_set(\"ATHAME_USE_JOBS\", ATHAME_USE_JOBS_DEFAULT)){\n      check_expr_in_flight(1);\n    } else {\n      waitpid(expr_pid, NULL, 0);\n    }\n    vim_sync = VIM_SYNC_NEEDS_INFO_READ;\n  }\n  if (vim_sync >= VIM_SYNC_NEEDS_POLL) {\n    athame_poll_vim(1);\n  }\n  athame_get_vim_info();\n}\n\nstatic int is_vim_alive() {\n  return vim_pid && waitpid(vim_pid, NULL, WNOHANG) == 0;\n}\n\nstatic char* temp_dir_loc() {\n#ifdef BSD\n  return \"TMPDIR\";\n#else\n  return \"XDG_RUNTIME_DIR\";\n#endif\n}\n\nstatic volatile int athame_sigint = 0;\nsighandler_t old_sigint = 0;\n\nstatic void sigint_handler(int signum) {\n  signal(SIGINT, old_sigint);\n  athame_sigint = 1;\n}\n\nstatic void steal_signal_handler() {\n  athame_sigint = 0;\n  old_sigint = signal(SIGINT, sigint_handler);\n}\n\nstatic void return_signal_handler() {\n  signal(SIGINT, old_sigint);\n  athame_sigint = 0;\n}\n\n// Processes signals and returns either a valid char or -1.\nstatic int process_signals() {\n    if(ap_is_catching_signals()) {\n      int sig_result;\n      if (sig_result = (int)ap_handle_signals()) {\n        return sig_result;\n      }\n      return ATHAME_CONTINUE;\n    }\n\n    if(athame_sigint) {\n        // Python shell has a race where it only handles signint correctly if\n        // it's triggered during a specific select in python code. We start a\n        // new process to send the signal so that python can reach the select.\n        // This is far from ideal and still racy in theory, but seems to work\n        // in practice.\n        int athame_pid = getpid();\n        int pid = fork();\n        if (pid == 0) {\n          // Child process\n          kill(athame_pid, SIGINT);\n          exit(0);\n        }\n        return 0;\n    }\n    return ATHAME_CONTINUE;\n}\n"
        },
        {
          "name": "athame_zsh.h",
          "type": "blob",
          "size": 6.2451171875,
          "content": "/* athame_zsh.h -- Full vim integration for your shell.*/\n\n/* Copyright (C) 2015 James Kolb\n\n   This file is part of Athame.\n\n   Athame is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   Athame is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with Athame.  If not, see <http://www.gnu.org/licenses/>.\n\n   This file incorporates work under the following copyright and permission\n   notice:\n     The Z Shell is copyright (c) 1992-2009 Paul Falstad, Richard Coleman,\n     Zoltán Hidvégi, Andrew Main, Peter Stephenson, Sven Wischnowsky, and\n     others.  All rights reserved.  Individual authors, whether or not\n     specifically named, retain copyright in all changes; in what follows, they\n     are referred to as `the Zsh Development Group'.  This is for convenience\n     only and this body has no legal status.  The Z shell is distributed under\n     the following licence; any provisions made in individual files take\n     precedence.\n\n     Permission is hereby granted, without written agreement and without\n     licence or royalty fees, to use, copy, modify, and distribute this\n     software and to distribute modified versions of this software for any\n     purpose, provided that the above copyright notice and the following\n     two paragraphs appear in all copies of this software.\n\n     In no event shall the Zsh Development Group be liable to any party for\n     direct, indirect, special, incidental, or consequential damages arising out\n     of the use of this software and its documentation, even if the Zsh\n     Development Group have been advised of the possibility of such damage.\n\n     The Zsh Development Group specifically disclaim any warranties, including,\n     but not limited to, the implied warranties of merchantability and fitness\n     for a particular purpose.  The software provided hereunder is on an \"as is\"\n     basis, and the Zsh Development Group have no obligation to provide\n     maintenance, support, updates, enhancements, or modifications.\n\n*/\n#include \"zle.mdh\"\n\n// Note: Most of this code is from zle_params.c\n\nstatic char* unmetafy_athame(char* text) {\n  int length;\n  char* unmeta = unmetafy(text, &length);\n  for (int i = 0; i < length; i++) {\n    if (unmeta[i] == NULL) {\n      // Display nulls as spaces. This isn't perfect, but this is mostly\n      // just to avoid memory errors.\n      unmeta[i] = ' ';\n    }\n  }\n  return unmeta;\n}\n\nstatic char* ap_get_line_buffer() {\n  if (zlemetaline != 0) {\n    return unmetafy_athame(dupstring(zlemetaline));\n  }\n  return unmetafy_athame(zlelineasstring(zleline, zlell, 0, NULL, NULL, 1));\n}\n\nstatic int ap_get_line_buffer_length() { return strlen(ap_get_line_buffer()); }\n\nstatic int ap_get_line_char_length() { return zlell; }\n\nstatic void ap_set_line_buffer(char* newText) { setline(newText, ZSL_COPY); }\n\nstatic int ap_get_cursor() {\n  if (zlemetaline != NULL) {\n    /* A lot of work for one number, but still... */\n    ZLE_STRING_T tmpline;\n    int tmpcs, tmpll, tmpsz;\n    char* tmpmetaline = ztrdup(zlemetaline);\n    tmpline = stringaszleline(tmpmetaline, zlemetacs, &tmpll, &tmpsz, &tmpcs);\n    free(tmpmetaline);\n    free(tmpline);\n    return tmpcs;\n  }\n  return zlecs;\n}\n\nstatic void ap_set_cursor(int x) {\n  if (x < 0) {\n    zlecs = 0;\n  } else if (x > zlell) {\n    zlecs = zlell;\n  } else {\n    zlecs = x;\n  }\n}\n\nstatic void ap_set_cursor_end() { zlecs = zlell; }\n\n/* Temporarily disable vim (used by zsh for completion).*/\nstatic int ap_temp_novim() {\n  return menucmp != 0 || suffixlen > 0 || showinglist != 0;\n}\n\nstatic void ap_redraw_prompt() { resetprompt(NULL); }\n\nstatic void ap_display() { zrefresh(); }\n\nstatic void ap_get_term_size(int* height, int* width) {\n  adjustwinsize(1);\n  if (width) {\n    *width = zterm_columns;\n  }\n  if (height) {\n    *height = zterm_lines;\n  }\n}\n\nstatic int ap_get_prompt_length() {\n  int length;\n  countprompt(lpromptbuf, &length, NULL, -1);\n  return length;\n}\n\nHistent he;\nstatic void ap_get_history_start() { he = hist_ring->down; }\n\n#define GETZLETEXT(ent) ((ent)->zle_text ? (ent)->zle_text : (ent)->node.nam)\nstatic char* ap_get_history_next() {\n  if (he == hist_ring) {\n    return 0;\n  }\n  char* ret = GETZLETEXT(he);\n  he = down_histent(he);\n  return unmetafy_athame(dupstring(ret));\n}\n\nstatic void ap_get_history_end() {}\n\nstatic int ap_needs_to_leave() { return 0; }\n\nstatic char* ap_get_substr(char* text, int start, int end) {\n  int mbchars;\n  int pos_s = 0;\n  int pos = 0;\n  for (mbchars = 0; mbchars < end; mbchars++) {\n    if (mbchars == start) {\n      pos_s = pos;\n    }\n    int l = mblen(text + pos, MB_CUR_MAX);\n    if (l >= 0) {\n      pos += l;\n    } else {\n      if (mbchars < start) {\n        return strdup(\"\");\n      }\n      break;\n    }\n  }\n  return strndup(text + pos_s, pos - pos_s);\n}\n\nstatic char ap_handle_signals() {\n  int q = queue_signal_level();\n\n  // Calling dont_queue_signals() here would make zsh process all queued signals.\n  // This is a modified version of dont_queue_signals() that calls athame_cleanup\n  // before processing any SIGHUP. The SIGHUP would cause zsh to close and we need\n  // to make sure we cleanup athame first.\n  queueing_enabled = 0;\n  while (queue_front != queue_rear) {      /* while signals in queue */\n    sigset_t oset;\n    queue_front = (queue_front + 1) % MAX_QUEUE_SIZE;\n    oset = signal_setmask(signal_mask_queue[queue_front]);\n    if (signal_queue[queue_front] == SIGHUP) {\n      athame_cleanup(1);\n    }\n    zhandler(signal_queue[queue_front]);  /* handle queued signal   */\n    signal_setmask(oset);\n  }\n\n  restore_queue_signals(q);\n\n  if (errflag & ERRFLAG_INT) {\n    return EOF;\n  }\n  return 0;\n}\n\nstatic char* ap_nl = \"\\r\\n\";\nstatic char* ap_special = \"\\t\\x04\\r\\n\\x0c\";\nstatic char ap_delete = '\\x04';\n\nstatic void ap_set_control_chars() {\n  // TODO: Lookup zsh control chars instead of assuming defaults.\n}\n\nstatic void ap_set_nospecial() {\n  // We don't care about this in zsh.\n}\n\nstatic int ap_is_catching_signals() {\n  return 1;\n}\n"
        },
        {
          "name": "athamerc",
          "type": "blob",
          "size": 2.0693359375,
          "content": "\" WARNING: By default /etc/athamerc will get rewritten on updates. You should\n\" create a ~/.athamerc that sources this file and make changes there.\n\"\n\" /etc/athamerc is only read if no ~/.athamerc is found\n\"\n\" If you don't want /etc/athamerc overidden, supply the --norc flag to the setup\n\" script.\n\nset nocompatible\n\nset ttimeoutlen=10 \"Otherwise, you have to wait for the escape key.\n\nset backspace-=eol   \"For more traditional shell behavior\nset backspace+=start \"Without this, you can't delete shell completions\n\nset textwidth=0 \"Don't try to wrap text\n\n\"Start each line in insert mode. Most shell vi-modes do this:\nautocmd User Vimbed_StartLine call feedkeys(\"\\<C-\\>\\<C-N>i\",\"n\")\n\n\" These make arrows more shell like. Feel free to comment them out:\nif v:version>=800 || has(\"patch928\")\n  \" These maps can segfault in earlier vim versions.\n  inoremap <Up> <Up><ESC>A\n  inoremap <Down> <Down><ESC>A\nendif\n\n\" Uncomment these maps to have the up and down arrow\n\" only match lines that share text before cursor\n\" (Similar to how arrows work for vim ex expressions)\n\"\n\"inoremap <Up> <C-\\><C-O>:silent call HistorySearchBackward()<CR>\n\"inoremap <Down> <C-\\><C-O>:silent call HistorySearchForward()<CR>\n\"nnoremap <Up> :silent call HistorySearchBackward()<CR>\n\"nnoremap <Down> :silent call HistorySearchForward()<CR>\n\n\"Similar to bash's history-search-backward.\nfunction! HistorySearchBackward()\n  let curcol = col('.')\n  if curcol > 1\n    let searchText = getline('.')[0:curcol - 2]\n    for line in range(line('.') - 1, 1, -1)\n      if getline(line)[0:curcol - 2] == searchText\n        call cursor(line, curcol)\n        break\n      endif\n    endfor\n  elseif line('.') > 1\n    call cursor(line('.') - 1, 1)\n  endif\nendfunction\n\n\"Similar to bash's history-search-forward.\nfunction! HistorySearchForward()\n  let curcol = col('.')\n  if curcol > 1\n    let searchText = getline('.')[0:curcol - 2]\n    for line in range(line('.') + 1, line('$'))\n      if getline(line)[0:curcol - 2] == searchText\n        call cursor(line, curcol)\n        break\n      endif\n    endfor\n  else\n    call cursor(line('.') + 1, 1)\n  endif\nendfunction\n"
        },
        {
          "name": "bash_readline_setup.sh",
          "type": "blob",
          "size": 3.8310546875,
          "content": "#!/bin/bash\n# bash_readline_setup.sh -- Full vim integration for your shell.\n#\n# Copyright (C) 2015 James Kolb\n#\n# This file is part of Athame.\n#\n# Athame is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Athame is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Athame.  If not, see <http://www.gnu.org/licenses/>.\n\npatches=19\nredownload=0\nbuild=1\ndirty=0\nsudo=\"\"\ndestdir=\"\"\nprefix=\"/\"\nuse_readline=\"\"\nfor arg in \"$@\"\ndo\n  case \"$arg\" in\n    \"--redownload\" ) redownload=1;;\n    \"--nobuild\" ) build=0;;\n    \"--dirty\" ) dirty=1;;\n    \"--use_sudo\" ) sudo=\"sudo \";;\n    --destdir=*) destdir=\"${arg#*=}\";;\n    --prefix=*) prefix=\"${arg#*=}\";;\n    --use_readline=*) use_readline=\"${arg#*=}\";;\n    \"--help\" ) echo -e \" --redownload: redownload bash and patches\\n\" \\\n                        \"--nobuild: stop before actually building src\\n\" \\\n                        \"--prefix: set prefix for configure\\n\"\\\n                        \"--use_readline: set where to look for readline\\n\"\\\n                        \"--destdir: set DESTDIR for install\\n\"\\\n                        \"--dirty: don't run the whole build process,\\n\" \\\n                        \"         just make and install changes\\n\" \\\n                        \"         (only use after a successful build)\\n\" \\\n                        \"--help: display this message\"; exit;;\n    * ) echo Unknown flag \"$arg\" >&2; exit 1;;\n  esac\ndone\n\n#Download bash\nif [ $redownload = 1 ]; then\n  rm -r bash-4.4.tar.gz\nfi\nif [ ! -f bash-4.4.tar.gz ]; then\n  curl -O https://ftp.gnu.org/gnu/bash/bash-4.4.tar.gz\nfi\n\nmkdir -p bash_patches\ncd bash_patches\nfor (( patch=1; patch <= patches; patch++ )); do\n  if [ $redownload = 1 ]; then\n    rm -r bash44-$(printf \"%03d\" $patch)\n  fi\n  if [ ! -f bash44-$(printf \"%03d\" $patch) ]; then\n    curl -O https://ftp.gnu.org/gnu/bash/bash-4.4-patches/bash44-$(printf \"%03d\" $patch)\n  fi\ndone\ncd ..\n\nif [ ! -d bash-4.4_tmp ]; then\n  dirty=0\nfi\n\n#Unpack bash dir\nif [ $dirty = 0 ]; then\n  rm -rf bash-4.4_tmp\n  tar -xf bash-4.4.tar.gz\n  mv bash-4.4 bash-4.4_tmp\nfi\n\n#Move into bash directory\ncd bash-4.4_tmp\n\nif [ $dirty = 0 ]; then\n  #Patch bash with bash patches\n  for (( patch=1; patch <= patches; patch++ )); do\n    echo Patching with standard bash patch $patch\n    patch -p0 < ../bash_patches/bash44-$(printf \"%03d\" $patch)\n  done\nfi\n\nreadline_configure_flag=\"--with-installed-readline\"\nreadline_make_flag=\"\"\nif [ -n \"$use_readline\" ]; then\n  readline_configure_flag=\"--with-installed-readline=$use_readline\"\n  readline_make_flag=\"READLINE_LDFLAGS=-Wl,-rpath,$use_readline/lib/\"\nfi\n\n#Build and install bash\nif [ $build = 1 ]; then\n  if [ ! -f Makefile ]; then\n    ac_cv_rl_version=8.0 ./configure \\\n                \"--prefix=$prefix\" \\\n                --docdir=${prefix}/usr/share/doc/bash-4.4 \\\n                --without-bash-malloc \\\n                --enable-readline \\\n                \"$readline_configure_flag\" \\\n                || exit 1\n  fi\n  if [ -n \"$use_readline\" ]; then\n    make LOCAL_LIBS=-lutil \"$readline_make_flag\"\n  else\n    make LOCAL_LIBS=-lutil\n  fi\n  if [ $? != 0 ]; then\n    printf \"\\n\\e[1;31mMake failed:\\e[0m Are you sure you have readline 8 installed? readline_athame_setup.sh installs readline 8 patched with athame. You may want to run it first.\\nThis may also fail if you have a versionless libreadline.so symlinked to libreadline.so.7\\n\"\n    exit 1\n  fi\n  if [ -n \"$destdir\" ]; then\n    mkdir -p \"$destdir\"\n  fi\n  ${sudo}make install DESTDIR=\"$destdir\"\nfi\n\n#Leave bash dir\ncd ..\n"
        },
        {
          "name": "readline.patch",
          "type": "blob",
          "size": 10.2568359375,
          "content": "diff -ru a/display.c b/display.c\n--- a/display.c 2015-10-28 00:00:00.000000000 - 0400\n--- b/display.c 2015-10-28 00:00:00.000000000 - 0400\n@@ -255,6 +255,11 @@\n static int prompt_last_screen_line;\n \n static int prompt_physical_chars;\n+\n+int\n+rla_prompt_phys_length() {\n+  return prompt_physical_chars;\n+}\n \n /* An array of indexes into the prompt string where we will break physical\n    screen lines.  It's easier to compute in expand_prompt and use later in\ndiff -ru a/Makefile.in b/Makefile.in\n--- a/Makefile.in\t2015-07-15 00:03:32.894897704 -0400\n+++ b/Makefile.in\t2015-07-14 23:36:13.208157503 -0400\n@@ -75,7 +75,7 @@\n CTAGS = ctags -tw\n \n CFLAGS = @CFLAGS@\n-LOCAL_CFLAGS = @LOCAL_CFLAGS@ -DRL_LIBRARY_VERSION='\"$(RL_LIBRARY_VERSION)\"'\n+LOCAL_CFLAGS = @LOCAL_CFLAGS@ -DRL_LIBRARY_VERSION='\"$(RL_LIBRARY_VERSION)\"' -DVIMBED_LOCATION='\"${libdir}/athame_readline\"' -DATHAME_VIM_BIN='\"${ATHAME_VIM_BIN}\"' -DATHAME_USE_JOBS_DEFAULT='${ATHAME_USE_JOBS_DEFAULT}'\n CPPFLAGS = @CPPFLAGS@\n \n DEFS = @DEFS@ @CROSS_COMPILE@\n@@ -120,7 +120,7 @@\n \t   $(srcdir)/histfile.c $(srcdir)/nls.c $(srcdir)/search.c \\\n \t   $(srcdir)/shell.c $(srcdir)/savestring.c $(srcdir)/tilde.c \\\n \t   $(srcdir)/text.c $(srcdir)/misc.c $(srcdir)/compat.c \\\n-\t   $(srcdir)/mbutil.c\n+\t   $(srcdir)/mbutil.c $(srcdir)/athame.c\n \n # The header files for this library.\n HSOURCES = $(srcdir)/readline.h $(srcdir)/rldefs.h $(srcdir)/chardefs.h \\\n@@ -130,7 +130,7 @@\n \t   $(srcdir)/ansi_stdlib.h $(srcdir)/tcap.h $(srcdir)/rlstdc.h \\\n \t   $(srcdir)/xmalloc.h $(srcdir)/rlprivate.h $(srcdir)/rlshell.h \\\n \t   $(srcdir)/rltypedefs.h $(srcdir)/rlmbutil.h \\\n-\t   $(srcdir)/colors.h $(srcdir)/parse-colors.h\n+\t   $(srcdir)/colors.h $(srcdir)/parse-colors.h $(srcdir)/athame.h\n \n HISTOBJ = history.o histexpand.o histfile.o histsearch.o shell.o mbutil.o\n TILDEOBJ = tilde.o\n@@ -153,7 +153,7 @@\n CREATED_TAGS = TAGS tags\n \n INSTALLED_HEADERS = readline.h chardefs.h keymaps.h history.h tilde.h \\\n-\t\t    rlstdc.h rlconf.h rltypedefs.h\n+\t\t    rlstdc.h rlconf.h rltypedefs.h athame.h\n \n OTHER_DOCS = $(srcdir)/CHANGES $(srcdir)/INSTALL $(srcdir)/README\n OTHER_INSTALLED_DOCS = CHANGES INSTALL README\n@@ -230,6 +230,13 @@\n \n install:\t$(INSTALL_TARGETS)\n \n+install-vimbed:\n+\t$(RM) $(DESTDIR)$(libdir)/athame_readline/vimbed.vim && $(RM) -r $(DESTDIR)$(libdir)/athame_readline\n+\t$(CP) -r $(srcdir)/vimbed/plugin $(DESTDIR)$(libdir)/athame_readline\n+\n+uninstall-vimbed:\n+\t$(RM) -r $(DESTDIR)$(libdir)/athame_readline\n+\n install-headers: installdirs ${INSTALLED_HEADERS}\n \tfor f in ${INSTALLED_HEADERS}; do \\\n \t\t$(INSTALL_DATA) $(srcdir)/$$f $(DESTDIR)$(includedir)/readline ; \\\n@@ -250,7 +257,7 @@\n \n maybe-uninstall-pc: uninstall-pc\n \n-install-static: installdirs $(STATIC_LIBS) install-headers install-doc ${install_examples} install-pc\n+install-static: installdirs $(STATIC_LIBS) install-headers install-doc ${install_examples} install-pc install-vimbed\n \t-$(MV) $(DESTDIR)$(libdir)/libreadline.a $(DESTDIR)$(libdir)/libreadline.old\n \t$(INSTALL_DATA) libreadline.a $(DESTDIR)$(libdir)/libreadline.a\n \t-test -n \"$(RANLIB)\" && $(RANLIB) $(DESTDIR)$(libdir)/libreadline.a\n@@ -264,7 +281,7 @@\n \t\t$(DESTDIR)$(infodir) $(DESTDIR)$(man3dir) $(DESTDIR)$(docdir) \\\n \t\t$(DESTDIR)$(pkgconfigdir)\n \n-uninstall: uninstall-headers uninstall-doc uninstall-examples uninstall-pc\n+uninstall: uninstall-headers uninstall-doc uninstall-examples uninstall-pc uninstall-vimbed\n \t-test -n \"$(DESTDIR)$(libdir)\" && cd $(DESTDIR)$(libdir) && \\\n \t\t${RM} libreadline.a libreadline.old libhistory.a libhistory.old $(SHARED_LIBS)\n \t-( cd shlib; ${MAKE} ${MFLAGS} DESTDIR=${DESTDIR} uninstall )\n@@ -412,7 +419,7 @@\n readline.o: readline.h keymaps.h rltypedefs.h chardefs.h tilde.h\n readline.o: rldefs.h ${BUILD_DIR}/config.h rlconf.h\n readline.o: history.h rlstdc.h\n-readline.o: posixstat.h ansi_stdlib.h posixjmp.h\n+readline.o: posixstat.h ansi_stdlib.h posixjmp.h athame.h\n rltty.o: rldefs.h ${BUILD_DIR}/config.h rlconf.h\n rltty.o: rltty.h\n rltty.o: readline.h keymaps.h rltypedefs.h chardefs.h tilde.h rlstdc.h\n@@ -532,6 +539,7 @@\n text.o: rlmbutil.h\n vi_mode.o: rlmbutil.h\n \n+athame.o: $(srcdir)/athame.c\n bind.o: $(srcdir)/bind.c\n callback.o: $(srcdir)/callback.c\n compat.o: $(srcdir)/compat.c\n@@ -570,6 +578,7 @@\n history.o: $(srcdir)/history.c\n histsearch.o: $(srcdir)/histsearch.c\n \n+athame.o: athame.c\n bind.o: bind.c\n callback.o: callback.c\n compat.o: compat.c\ndiff -ru a/readline.c b/readline.c\n--- a/readline.c\t2015-07-15 00:03:32.898231038 -0400\n+++ b/readline.c\t2015-07-15 00:07:56.201576180 -0400\n@@ -67,6 +67,7 @@\n /* Some standard library routines. */\n #include \"readline.h\"\n #include \"history.h\"\n+#include \"athame.h\"\n \n #include \"rlprivate.h\"\n #include \"rlshell.h\"\n@@ -450,6 +451,8 @@\n   if (rl_pre_input_hook)\n     (*rl_pre_input_hook) ();\n \n+  athame_init(fileno(rl_instream), rl_outstream);\n+\n   RL_CHECK_SIGNALS ();\n }\n \n@@ -461,6 +464,8 @@\n \n   RL_CHECK_SIGNALS ();\n \n+  athame_cleanup(0);\n+\n   /* Restore the original of this history line, iff the line that we\n      are editing was originally in the history, AND the line has changed. */\n   entry = current_history ();\n@@ -570,7 +575,16 @@\n \t}\n \n       RL_SETSTATE(RL_STATE_READCMD);\n-      c = rl_read_key ();\n+      int use_athame = athame_enabled();\n+      if (use_athame)\n+      {\n+        c = athame_loop(fileno(rl_instream));\n+      }\n+      else {\n+        c = rl_read_key();\n+        athame_after_bypass();\n+      }\n+      if (!use_athame || c) {\n       RL_UNSETSTATE(RL_STATE_READCMD);\n \n       /* look at input.c:rl_getc() for the circumstances under which this will\n@@ -630,6 +644,7 @@\n \n       lastc = c;\n       r = _rl_dispatch ((unsigned char)c, _rl_keymap);\n+      athame_char_handled();\n       RL_CHECK_SIGNALS ();\n \n       /* If there was no change in _rl_last_command_was_kill, then no kill\n@@ -638,6 +653,7 @@\n       if (rl_pending_input == 0 && lk == _rl_last_command_was_kill)\n \t_rl_last_command_was_kill = 0;\n \n+}\n       _rl_internal_char_cleanup ();\n \n #if defined (READLINE_CALLBACKS)\ndiff -ru a/shlib/Makefile.in b/shlib/Makefile.in\n--- a/shlib/Makefile.in\t2015-07-15 00:03:32.898231038 -0400\n+++ b/shlib/Makefile.in\t2015-07-14 23:37:04.674826478 -0400\n@@ -64,7 +64,7 @@\n DESTDIR =\n \n CFLAGS = @CFLAGS@\n-LOCAL_CFLAGS = @LOCAL_CFLAGS@ -DRL_LIBRARY_VERSION='\"$(RL_LIBRARY_VERSION)\"'\n+LOCAL_CFLAGS = @LOCAL_CFLAGS@ -DRL_LIBRARY_VERSION='\"$(RL_LIBRARY_VERSION)\"' -DVIMBED_LOCATION='\"${libdir}/athame_readline\"' -DATHAME_VIM_BIN='\"${ATHAME_VIM_BIN}\"' -DATHAME_USE_JOBS_DEFAULT='${ATHAME_USE_JOBS_DEFAULT}'\n CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@ @LOCAL_LDFLAGS@ @CFLAGS@\n \n@@ -135,7 +135,7 @@\n \t   $(topdir)/shell.c $(topdir)/savestring.c $(topdir)/tilde.c \\\n \t   $(topdir)/text.c $(topdir)/misc.c $(topdir)/compat.c \\\n \t   $(topdir)/colors.c $(topdir)/parse-colors.c \\\n-\t   $(topdir)/mbutil.c\n+\t   $(topdir)/mbutil.c $(topdir)/athame.c\n \n # The header files for this library.\n HSOURCES = $(topdir)/readline.h $(topdir)/rldefs.h $(topdir)/chardefs.h \\\n@@ -145,7 +145,7 @@\n \t   $(topdir)/ansi_stdlib.h $(topdir)/tcap.h $(topdir)/rlstdc.h \\\n \t   $(topdir)/xmalloc.h $(topdir)/rlprivate.h $(topdir)/rlshell.h \\\n \t   $(topdir)/rltypedefs.h $(topdir)/rlmbutil.h \\\n-           $(topdir)/colors.h $(topdir)/parse-colors.h\n+           $(topdir)/colors.h $(topdir)/parse-colors.h $(topdir)/athame.h\n \n SHARED_HISTOBJ = history.so histexpand.so histfile.so histsearch.so shell.so \\\n \t\t mbutil.so\n@@ -156,7 +156,7 @@\n \t  util.so kill.so undo.so macro.so input.so callback.so terminal.so \\\n \t  text.so nls.so misc.so \\\n \t  $(SHARED_HISTOBJ) $(SHARED_TILDEOBJ) $(SHARED_COLORSOBJ) \\\n-\t  xmalloc.so xfree.so compat.so\n+\t  xmalloc.so xfree.so compat.so athame.so\n \n ##########################################################################\n \n@@ -191,7 +191,14 @@\n \t-$(SHELL) $(topdir)/support/mkdirs $(DESTDIR)$(libdir)\n \t-$(SHELL) $(topdir)/support/mkdirs $(DESTDIR)$(bindir)\n \n-install-supported: installdirs $(SHLIB_STATUS)\n+install-athame:\n+\t$(RM) $(DESTDIR)$(libdir)/athame_readline/vimbed.vim && $(RM) -r $(DESTDIR)$(libdir)/athame_readline\n+\t$(CP) -r $(topdir)/vimbed/plugin $(DESTDIR)$(libdir)/athame_readline\n+\n+uninstall-athame:\n+\t$(RM) -r $(DESTDIR)$(libdir)/athame_readline\n+\n+install-supported: installdirs $(SHLIB_STATUS) install-athame\n \t$(SHELL) $(topdir)/support/shlib-install -O $(host_os) -V $(host_vendor) -d $(DESTDIR)$(libdir) -b $(DESTDIR)$(bindir) -i \"$(INSTALL_DATA)\" $(SHARED_HISTORY)\n \t$(SHELL) $(topdir)/support/shlib-install -O $(host_os) -V $(host_vendor) -d $(DESTDIR)$(libdir) -b $(DESTDIR)$(bindir) -i \"$(INSTALL_DATA)\" $(SHARED_READLINE)\n \t@echo install: you may need to run ldconfig\n@@ -201,7 +208,7 @@\n \n install: install-$(SHLIB_STATUS)\n \n-uninstall-supported:\n+uninstall-supported: uninstall-athame\n \t$(SHELL) $(topdir)/support/shlib-install -O $(host_os) -V $(host_vendor) -d $(DESTDIR)$(libdir) -b $(DESTDIR)$(bindir) -U $(SHARED_HISTORY)\n \t$(SHELL) $(topdir)/support/shlib-install -O $(host_os) -V $(host_vendor) -d $(DESTDIR)$(libdir) -b $(DESTDIR)$(bindir) -U $(SHARED_READLINE)\n \t@echo uninstall: you may need to run ldconfig\n@@ -341,6 +348,8 @@\n xmalloc.so: ${BUILD_DIR}/config.h\n xmalloc.so: $(topdir)/ansi_stdlib.h\n \n+readline.so: $(topdir)/athame.h\n+\n bind.so: $(topdir)/rlshell.h\n histfile.so: $(topdir)/rlshell.h\n nls.so: $(topdir)/rlshell.h\n@@ -427,6 +436,7 @@\n colors.so: $(topdir)/rlmbutil.h\n parse-colors.so: $(topdir)/rlmbutil.h\n \n+athame.so: $(topdir)/athame.c\n bind.so: $(topdir)/bind.c\n callback.so: $(topdir)/callback.c\n compat.so: $(topdir)/compat.c\n@@ -462,6 +472,7 @@\n history.so: $(topdir)/history.c\n histsearch.so: $(topdir)/histsearch.c\n \n+athame.so: athame.c\n bind.so: bind.c\n callback.so: callback.c\n comapt.so: compat.c\ndiff -ru a/readline.h b/readline.h\n--- a/readline.h\t2015-10-29 00:00:00.000000000 -0400\n+++ b/readline.h\t2015-10-29 00:00:00.000000000 -0400\n@@ -295,6 +295,7 @@\n \n extern int rl_set_prompt PARAMS((const char *));\n extern int rl_expand_prompt PARAMS((char *));\n+extern int rla_prompt_phys_length PARAMS((void));\n \n extern int rl_initialize PARAMS((void));\n \ndiff -ru a/callback.c b/callback.c\n--- a/callback.c\t2015-10-29 00:00:00.000000000 -0400\n+++ b/callback.c\t2015-10-29 00:00:00.000000000 -0400\n@@ -26,6 +26,7 @@\n #endif\n \n #include \"rlconf.h\"\n+#include \"athame.h\"\n \n #if defined (READLINE_CALLBACKS)\n \n@@ -311,6 +312,8 @@\n       rl_clear_signals ();\n #endif\n     }\n+  // If readline exits early because of a SIGINT, it still needs to cleanup athame.\n+  athame_cleanup(1);\n }\n \n _rl_callback_generic_arg *\n"
        },
        {
          "name": "readline_athame_setup.sh",
          "type": "blob",
          "size": 6.3671875,
          "content": "#!/bin/bash\n# readline_athame_setup.sh -- Full vim integration for your shell.\n#\n# Copyright (C) 2017 James Kolb\n#\n# This file is part of Athame.\n#\n# Athame is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or # (at your option) any later version.\n#\n# Athame is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Athame.  If not, see <http://www.gnu.org/licenses/>.\n\nshopt -s extglob\n\npatches=0\nredownload=0\nbuild=1\nruntest=1\nathame=1\ndirty=0\nrc=1\nsubmodule=1\nvimbin=\"\"\ndestdir=\"\"\nsudo=\"\"\nprefix_flag=\"--prefix=/usr\"\nlibdir_flag=\"\"\nfor arg in \"$@\"\ndo\n  case \"$arg\" in\n    \"--redownload\" ) redownload=1;;\n    \"--nobuild\" ) build=0;;\n    \"--notest\" ) runtest=0;;\n    \"--noathame\" ) athame=0;;\n    \"--dirty\" ) dirty=1;;\n    \"--norc\" ) rc=0;;\n    \"--nosubmodule\" ) submodule=0;;\n    \"--use_sudo\" ) sudo=\"sudo \";;\n    --vimbin=*) vimbin=\"${arg#*=}\";;\n    --destdir=*) destdir=\"${arg#*=}\";;\n    --prefix=*) prefix_flag='--prefix='\"${arg#*=}\";;\n    --libdir=*) libdir=\"${arg#*=}\";libdir_flag=\"--libdir=$libdir\";;\n    \"--help\" ) echo -e \" --redownload: redownload readline and patches\\n\" \\\n                        \"--nobuild: stop before actually building src\\n\" \\\n                        \"--notest: don't run tests\\n\" \\\n                        \"--noathame: setup normal readline without athame\\n\" \\\n                        \"--vimbin=path/to/vim: set a path to the vim binary\\n\"\\\n                        \"                      you want athame to use\\n\" \\\n                        \"--prefix: set prefix for configure\\n\"\\\n                        \"--libdir: set libdir for configure\\n\"\\\n                        \"--destdir: set DESTDIR for install\\n\"\\\n                        \"--dirty: don't run the whole patching/configure process,\\n\" \\\n                        \"         just make and install changes\\n\" \\\n                        \"--norc: don't copy the rc file to /etc/athamerc\\n\" \\\n                        \"--nosubmodule: don't update submodules\\n\" \\\n                        \"--use_sudo: use sudo for installation and copying athamerc\\n\" \\\n                        \"--help: display this message\"; exit;;\n    * ) echo Unknown flag \"$arg\" >&2; exit 1;;\n  esac\ndone\n\n#Get vim binary\nif [ -z \"$vimbin\" ]; then\n  vimmsg=\"Please provide a vim binary by running this script with --vimbin=/path/to/vim at the end. (replace with the actual path to vim)\"\n  testvim=\"$(which vim)\"\n  if [ -z \"$testvim\" ]; then\n    echo \"Could not find a vim binary using 'which'\"\n    echo $vimmsg\n    exit\n  fi\n  echo \"No vim binary provided. Trying $testvim\"\n  if [ \"$($testvim --version | grep -E '(\\+job|nvim)')\" ]; then\n    vimbin=\"$testvim\"\n    echo \"$vimbin probably has job support. Using $vimbin as vim binary.\"\n    ATHAME_USE_JOBS_DEFAULT=1\n  elif [ \"$($testvim --version | grep +clientserver)\" ]; then\n    vimbin=\"$testvim\"\n    echo \"$vimbin probably has clientserver support. Using $vimbin as vim binary.\"\n    ATHAME_USE_JOBS_DEFAULT=0\n  else\n    echo \"$testvim does not appear to have job or clientserver support.\"\n    echo $vimmsg\n    exit\n  fi\nelse\n  if [ \"$($vimbin --version | grep -E '(\\+job|nvim)')\" ]; then\n    ATHAME_USE_JOBS_DEFAULT=1\n  else\n    ATHAME_USE_JOBS_DEFAULT=0\n  fi\nfi\n\nif [ $submodule = 1 ]; then\n  git submodule update --init\nfi\n\n#Download Readline\nif [ $redownload = 1 ]; then\n  rm -r readline-8.0.tar.gz\nfi\nif [ ! -f readline-8.0.tar.gz ]; then\n  curl -O https://ftp.gnu.org/gnu/readline/readline-8.0.tar.gz\nfi\n\nmkdir -p readline_patches\ncd readline_patches\nfor (( patch=1; patch <= patches; patch++ )); do\n  if [ $redownload = 1 ]; then\n    rm -r readline80-$(printf \"%03d\" $patch)\n  fi\n  if [ ! -f readline80-$(printf \"%03d\" $patch) ]; then\n    curl -O https://ftp.gnu.org/gnu/readline/readline-8.0-patches/readline80-$(printf \"%03d\" $patch)\n  fi\ndone\ncd ..\n\nif [ ! -d readline-8.0_tmp ]; then\n  dirty=0\nfi\n\n#Unpack readline dir\nif [ $dirty = 0 ]; then\n  rm -rf readline-8.0_tmp\n  tar -xf readline-8.0.tar.gz\n  mv readline-8.0 readline-8.0_tmp\nfi\n\n#Move into readline directory\ncd readline-8.0_tmp\n\nif [ $dirty = 0 ]; then\n  #Patch readline with readline patches\n  for (( patch=1; patch <= patches; patch++ )); do\n    echo Patching with standard readline patch $patch\n    patch -p0 < ../readline_patches/readline80-$(printf \"%03d\" $patch)\n  done\nfi\n\nif [ $athame = 1 ]; then\n  if [ $dirty = 0 ]; then\n    ../athame_patcher.sh readline .. || exit 1\n  else\n    ../athame_patcher.sh --dirty readline .. || exit 1\n  fi\nfi\n\nif [ $build != 1 ]; then\n  exit 0\nfi\n\n#Build and install Readline\nif [ ! -f Makefile ]; then\n  ./configure \"$prefix_flag\" \"$libdir_flag\" || exit 1\nfi\nmake CFLAGS=-std=c99 SHLIB_LIBS=\"-lncurses -lutil\" ATHAME_VIM_BIN=\"$vimbin\" ATHAME_USE_JOBS_DEFAULT=\"$ATHAME_USE_JOBS_DEFAULT\" || exit 1\nif [ $runtest = 1 ]; then\n  rm -rf $(pwd)/../test/build\n  mkdir -p $(pwd)/../test/build\n  make install DESTDIR=$(pwd)/../test/build || exit 1\n\n  cd ../test\n\n  export LD_LIBRARY_PATH=\"$(dirname $(find $(pwd)/build -name libreadline* | head -n 1))\"\n  export ATHAME_VIMBED_LOCATION=\"$(find $(pwd)/build -name athame_readline | head -n 1)\"\n\n  if [ \"$($vimbin --version | grep  nvim)\" ]; then\n    nvim=\"nvim\"\n  fi\n  if [ \"$(uname)\" == \"Darwin\" ]; then\n    export DYLD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\"\n    otool -L \"$(which bash)\" | grep libreadline.8.dylib >/dev/null\n  else\n    ldd \"$(which bash)\" | grep libreadline.so.8 >/dev/null\n  fi\n  if [ $? -eq 1 ]; then\n    echo \"Bash isn't set to use system readline or is not using readline 8. Setting up local bash for testing.\"\n    cd ..\n    ./bash_readline_setup.sh --destdir=\"$(pwd)/test/build\" --use_readline=\"${LD_LIBRARY_PATH%+(/lib|/lib/*)}\"\n    cd test\n    ./runtests.sh \"$(pwd)/build/bin/bash -i\" bash $nvim || exit 1\n  else\n    ./runtests.sh \"bash -i\" bash $nvim || exit 1\n  fi\n  cd ../readline-8.0_tmp\nfi\necho \"Installing Readline with Athame...\"\nif [ -n \"$destdir\" ]; then\n  mkdir -p \"$destdir\"\nfi\n${sudo}make install DESTDIR=\"$destdir\" || exit 1\n\nif [ $rc = 1 ]; then\n    ${sudo}cp ../athamerc /etc/athamerc\n    if [ $? -ne 0 ]; then\n      printf \"\\e[0;31mThe athamerc was not copied. You should copy athamerc to /etc/athamerc or ~/.athamerc.\\e[0;0m\\n\"\n    fi\nfi\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "vimbed",
          "type": "commit",
          "content": null
        },
        {
          "name": "zsh.patch",
          "type": "blob",
          "size": 4.3154296875,
          "content": "diff -ru a/Config/defs.mk.in\n--- a/Config/defs.mk.in\t2014-12-13 18:55:54.000000000 -0500\n+++ b/Config/defs.mk.in\t2015-07-15 22:06:56.455125410 -0400\n@@ -41,7 +41,7 @@\n exec_prefix     = @exec_prefix@\n bindir          = @bindir@\n libdir          = @libdir@\n-MODDIR          = $(libdir)/$(tzsh)/$(VERSION)\n+MODDIR          = $(ATHAME_TESTDIR)$(libdir)/$(tzsh)/$(VERSION)\n infodir         = @infodir@\n mandir          = @mandir@\n datarootdir     = @datarootdir@\n@@ -67,7 +67,7 @@\n DLLDFLAGS       = @DLLDFLAGS@\n LIBLDFLAGS      = @LIBLDFLAGS@\n EXELDFLAGS      = @EXELDFLAGS@\n-LIBS            = @LIBS@\n+LIBS            = @LIBS@ -lutil\n DL_EXT          = @DL_EXT@\n DLLD            = @DLLD@\n EXPOPT          = @EXPOPT@\n\ndiff -ru a/Src/Makefile.in b/Src/Makefile.in\n--- a/Src/Makefile.in\t2014-12-13 18:55:54.000000000 -0500\n+++ b/Src/Makefile.in\t2015-07-15 22:06:56.455125410 -0400\n@@ -142,8 +142,15 @@\n uninstall: uninstall.bin uninstall.modules\n .PHONY: install uninstall\n \n-install.bin: install.bin-here\n-uninstall.bin: uninstall.bin-here\n+install.vimbed:\n+\tif [ -d $(DESTDIR)$(libdir)/athame_zsh ]; then rm -r $(DESTDIR)$(libdir)/athame_zsh; fi\n+\tmkdir -p $(DESTDIR)/$(libdir)\n+\tcp -r $(dir_top)/$(subdir)/Zle/vimbed/plugin $(DESTDIR)/$(libdir)/athame_zsh\n+uninstall.vimbed:\n+\trm -r $(DESTDIR)$(libdir)/athame_zsh\n+\n+install.bin: install.bin-here install.vimbed\n+uninstall.bin: uninstall.bin-here uninstall.vimbed\n .PHONY: install.bin uninstall.bin\n\n # install binary, creating install directory if necessary\ndiff -ru a/Src/Makemod.in.in b/Src/Makemod.in.in\n--- a/Src/Makemod.in.in\t2014-12-13 18:55:54.000000000 -0500\n+++ b/Src/Makemod.in.in\t2015-07-15 21:52:18.235086024 -0400\n@@ -42,13 +42,14 @@\n \n sdir_src      = $(sdir_top)/Src\n dir_src       = $(dir_top)/Src\n+athame        = -DVIMBED_LOCATION='\"$(ATHAME_TESTDIR)$(libdir)/athame_zsh\"' -DATHAME_VIM_BIN='\"${ATHAME_VIM_BIN}\"' -DATHAME_USE_JOBS_DEFAULT='${ATHAME_USE_JOBS_DEFAULT}'\n \n # ========== COMPILATION RULES ==========\n \n DNCFLAGS =\n \n-COMPILE     = $(CC) -c -I. -I$(dir_top)/Src -I$(sdir_top)/Src -I$(sdir_top)/Src/Zle -I$(sdir) $(CPPFLAGS) $(DEFS) $(CFLAGS) $(D@L@CFLAGS)\n-DLCOMPILE   = $(CC) -c -I. -I$(dir_top)/Src -I$(sdir_top)/Src -I$(sdir_top)/Src/Zle -I$(sdir) $(CPPFLAGS) $(DEFS) -DMODULE $(CFLAGS) $(DLCFLAGS)\n+COMPILE     = $(CC) -c -I. -I$(dir_top)/Src -I$(sdir_top)/Src -I$(sdir_top)/Src/Zle -I$(sdir) $(CPPFLAGS) $(DEFS) $(CFLAGS) $(D@L@CFLAGS) $(athame)\n+DLCOMPILE   = $(CC) -c -I. -I$(dir_top)/Src -I$(sdir_top)/Src -I$(sdir_top)/Src/Zle -I$(sdir) $(CPPFLAGS) $(DEFS) -DMODULE $(CFLAGS) $(DLCFLAGS) $(athame)\n LINK        = $(CC) $(LDFLAGS) $(EXELDFLAGS) $(EXTRA_LDFLAGS) -o $@\n DLLINK      = $(DLLD) $(LDFLAGS) $(LIBLDFLAGS) $(DLLDFLAGS) -o $@\n \ndiff -ru a/Src/Zle/zle_main.c b/Src/Zle/zle_main.c\n--- a/Src/Zle/zle_main.c\t2015-05-22 18:16:13.000000000 -0400\n+++ b/Src/Zle/zle_main.c\t2015-07-15 21:09:04.778303048 -0400\n@@ -28,6 +28,7 @@\n  */\n \n #include \"zle.mdh\"\n+#include \"athame.h\"\n #include \"zle_main.pro\"\n \n #ifdef HAVE_POLL_H\n@@ -1097,6 +1098,8 @@\n void\n zlecore(void)\n {\n+    athame_init(SHTTY, NULL);\n+\n     Keymap km;\n #if !defined(HAVE_POLL) && defined(HAVE_SELECT)\n     struct timeval tv;\n@@ -1186,6 +1189,7 @@\n     }\n \n     popheap();\n+    athame_cleanup(0);\n }\n \n /* Read a line.  It is returned metafied.\ndiff -ru a/Src/Zle/zle_keymap.c b/Src/Zle/zle_keymap.c\n--- a/Src/Zle/zle_keymap.c\t2015-05-22 18:16:13.000000000 -0400\n+++ b/Src/Zle/zle_keymap.c\t2015-08-23 00:04:00.000000000 -0400\n@@ -28,6 +28,7 @@\n  */\n \n #include \"zle.mdh\"\n+#include \"athame.h\"\n \n /*\n  * Keymap structures:\n@@ -1673,7 +1674,20 @@\n static int\n getkeybuf(int w)\n {\n-    int c = getbyte((long)w, NULL, 1);\n+    int c;\n+    if (athame_enabled())\n+    {\n+#ifdef MULTIBYTE_SUPPORT\n+        lastchar_wide_valid = 0;\n+#endif\n+        c = lastchar = STOUC(athame_loop(SHTTY));\n+        if(c == STOUC(EOF)) {\n+          return EOF;\n+        }\n+    }\n+    else {\n+        c = getbyte((long)w, NULL, 1);\n+    }\n \n     if(c < 0)\n \treturn EOF;\ndiff -ru a/Src/Zle/zle.mdd b/Src/Zle/zle.mdd\n--- a/Src/Zle/zle.mdd\t2014-12-13 18:55:54.000000000 -0500\n+++ b/Src/Zle/zle.mdd\t2015-07-15 21:12:11.711644764 -0400\n@@ -8,7 +8,7 @@\n objects=\"zle_bindings.o zle_hist.o zle_keymap.o zle_main.o \\\n zle_misc.o zle_move.o zle_params.o zle_refresh.o \\\n zle_thingy.o zle_tricky.o zle_utils.o zle_vi.o zle_word.o \\\n-textobjects.o\"\n+textobjects.o athame.o\"\n \n headers=\"zle.h zle_things.h\"\n"
        },
        {
          "name": "zsh_athame_setup.sh",
          "type": "blob",
          "size": 6.7998046875,
          "content": "#!/bin/bash\n# zsh_athame_setup.sh -- Full vim integration for your shell.\n#\n# Copyright (C) 2017 James Kolb\n#\n# This file is part of Athame.\n#\n# Athame is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Athame is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Athame.  If not, see <http://www.gnu.org/licenses/>.\n\nredownload=0\nbuild=1\nruntest=1\nathame=1\ndirty=0\nrc=1\nsubmodule=1\nsudo=\"\"\nvimbin=\"\"\ndestdir=\"\"\ndocdir=\"\"\nhtmldir=\"\"\nprefix=\"/usr\"\nfor arg in \"$@\"\ndo\n  case \"$arg\" in\n    \"--redownload\" ) redownload=1;;\n    \"--nobuild\" ) build=0;;\n    \"--noathame\" ) athame=0;;\n    \"--notest\" ) runtest=0;;\n    \"--dirty\" ) dirty=1;;\n    \"--norc\" ) rc=0;;\n    \"--nosubmodule\" ) submodule=0;;\n    \"--use_sudo\") sudo=\"sudo \";;\n    --vimbin=*) vimbin=\"${arg#*=}\";;\n    --destdir=*) destdir=\"${arg#*=}\";;\n    --prefix=*) prefix=\"${arg#*=}\";;\n    --libdir=*) libdir=\"${arg#*=}\";;\n    --docdir=*) docdir=\"${arg#*=}\";;\n    --htmldir=*) htmldir=\"${arg#*=}\";;\n    \"--help\" ) echo -e \" --redownload: redownload zsh\\n\" \\\n                        \"--nobuild: stop before actually building src\\n\" \\\n                        \"--notest: don't run tests\\n\" \\\n                        \"--noathame: setup normal zsh without athame\\n\" \\\n                        \"--vimbin=path/to/vim: set a path to the vim binary\\n\"\\\n                        \"                      you want athame to use\\n\" \\\n                        \"--destdir: set DESTDIR for install\\n\"\\\n                        \"--dirty: don't run the whole patching/configure process,\\n\" \\\n                        \"         just make and install changes\\n\" \\\n                        \"--norc: don't copy the rc file to /etc/athamerc\\n\" \\\n                        \"--nosubmodule: don't update submodules\\n\" \\\n                        \"--use_sudo: use sudo for installation and copying athamerc\\n\" \\\n                        \"additional flags: these flags are passed to configure\\n\" \\\n                        \"    --prefix=\\n\" \\\n                        \"    --libdir=\\n\" \\\n                        \"    --docdir=\\n\" \\\n                        \"    --htmldir=\\n\" \\\n                        \"--help: display this message\"; exit;;\n    * ) echo Unknown flag \"$arg\" >&2; exit 1;;\n  esac\ndone\n\nprefix_flag=\"--prefix=$prefix\"\nlibdir_flag=\"${libdir:+--libdir=$libdir}\"\ndocdir_flag=\"--docdir=${docdir:-$prefix/share/doc/zsh}\"\nhtmldir_flag=\"--htmldir=${htmldir:-$docdir/html}\"\n\n#Get vim binary\nif [ -z $vimbin ]; then\n  vimmsg=\"Please provide a vim binary by running this script with --vimbin=/path/to/vim at the end. (replace with the actual path to vim)\"\n  testvim=$(which vim)\n  if [ -z $testvim ]; then\n    echo \"Could not find a vim binary using 'which'\"\n    echo $vimmsg\n    exit\n  fi\n  echo \"No vim binary provided. Trying $testvim\"\n  if [ \"$($testvim --version | grep -E '(\\+job|nvim)')\" ]; then\n    vimbin=\"$testvim\"\n    echo \"$vimbin probably has job support. Using $vimbin as vim binary.\"\n    ATHAME_USE_JOBS_DEFAULT=1\n  elif [ \"$($testvim --version | grep +clientserver)\" ]; then\n    vimbin=$testvim\n    echo \"$vimbin probably has clientserver support. Using $vimbin as vim binary.\"\n    ATHAME_USE_JOBS_DEFAULT=0\n  else\n    echo \"$testvim does not appear to have clientserver support.\"\n    echo $vimmsg\n    exit\n  fi\nelse\n  if [ \"$($vimbin --version | grep -E '(\\+job|nvim)')\" ]; then\n    ATHAME_USE_JOBS_DEFAULT=1\n  else\n    ATHAME_USE_JOBS_DEFAULT=0\n  fi\nfi\n\nif [ $submodule = 1 ]; then\n  git submodule update --init\nfi\n\n#Download zsh\nif [ $redownload = 1 ]; then\n  rm -r zsh-5.7.1.tar.xz\nfi\nif [ ! -f zsh-5.7.1.tar.xz ]; then\n  curl -O https://www.zsh.org/pub/zsh-5.7.1.tar.xz\n  head -n 3 zsh-5.7.1.tar.xz | grep \"404 Not Found\" > /dev/null\n  if [ $? -eq 0 ]; then\n    curl -O https://www.zsh.org/pub/old/zsh-5.7.1.tar.xz\n  fi\nfi\nif [ \"$(md5sum zsh-5.7.1.tar.xz 2>/dev/null)\" != \"374f9fdd121b5b90e07abfcad7df0627  zsh-5.7.1.tar.xz\" ] && [ \"$(md5 zsh-5.7.1.tar.xz 2>/dev/null)\" != \"MD5 (zsh-5.7.1.tar.xz) = 374f9fdd121b5b90e07abfcad7df0627\" ]; then\n  #rm zsh-5.7.1.tar.xz\n  echo \"FAILED: Incorrect md5 hash\" >&2\n  exit 1\nfi\n\nif [ ! -d zsh-5.7.1_tmp ]; then\n  dirty=0\nfi\n\n#Unpack zsh dir\nif [ $dirty = 0 ]; then\n  rm -rf zsh-5.7.1_tmp\n  tar -xf zsh-5.7.1.tar.xz\n  mv zsh-5.7.1 zsh-5.7.1_tmp\nfi\n\n#Patch Zsh with Athame\ncd zsh-5.7.1_tmp\nif [ $athame = 1 ]; then\n  if [ $dirty = 0 ]; then\n    ../athame_patcher.sh zsh .. || exit 1\n  else\n    ../athame_patcher.sh --dirty zsh .. || exit 1\n  fi\nfi\n\nif [ $build != 1 ]; then\n  exit 0\nfi\n\n#Build and install zsh\nif [ ! -f Makefile ]; then\n  ./configure \"$prefix_flag\" \\\n      \"$libdir_flag\" \\\n      \"$docdir_flag\" \\\n      \"$htmldir_flag\" \\\n      --enable-etcdir=/etc/zsh \\\n      --enable-zshenv=/etc/zsh/zshenv \\\n      --enable-zlogin=/etc/zsh/zlogin \\\n      --enable-zlogout=/etc/zsh/zlogout \\\n      --enable-zprofile=/etc/zsh/zprofile \\\n      --enable-zshrc=/etc/zsh/zshrc \\\n      --enable-maildir-support \\\n      --enable-multibyte \\\n      --enable-function-subdirs \\\n      --enable-fndir=\"$prefix/share/zsh/functions\" \\\n      --enable-scriptdir=\"$prefix/share/zsh/scripts\" \\\n      --with-tcsetpgrp \\\n      --enable-pcre \\\n      --enable-cap \\\n      --enable-zsh-secure-free \\\n      || exit 1\nfi\nif [ $runtest = 1 ]; then\n  rm -rf \"$(pwd)/../test/build\"\n  mkdir -p \"$(pwd)/../test/build\"\n\n  # make sure the files affected by ATHAME_TESTDIR are updated to use test settings\n  rm -f Src/zshpaths.h && touch Src/Zle/athame.c\n\n  make CFLAGS=-std=c99 ATHAME_VIM_BIN=\"$vimbin\" ATHAME_USE_JOBS_DEFAULT=\"$ATHAME_USE_JOBS_DEFAULT\" ATHAME_TESTDIR=\"$(pwd)/../test/build\" || exit 1\n  make install DESTDIR=\"$(pwd)/../test/build\" || exit 1\n\n  # make sure the files affected by ATHAME_TESTDIR are updated to not use test settings\n  rm -f Src/zshpaths.h && touch Src/Zle/athame.c\n\n  cd ../test\n  zsh_bin=\"$(find $(pwd)/build -name zsh -type f | head -n 1)\"\n  if [ \"$($vimbin --version | grep  nvim)\" ]; then\n    nvim=\"nvim\"\n  fi\n  if [ \"$(uname)\" == \"Darwin\" ]; then\n    ./runtests.sh \"script /dev/null $zsh_bin\" $nvim || exit 1\n  else\n    ./runtests.sh \"script -c $zsh_bin\" $nvim || exit 1\n  fi\n  cd -\nfi\nmake CFLAGS=-std=c99 ATHAME_VIM_BIN=\"$vimbin\" ATHAME_USE_JOBS_DEFAULT=\"$ATHAME_USE_JOBS_DEFAULT\" || exit 1\necho \"Installing Zsh with Athame...\"\nif [ -n \"$destdir\" ]; then\n  mkdir -p \"$destdir\"\nfi\n${sudo}make install DESTDIR=\"$destdir\" || exit 1\n\nif [ $rc = 1 ]; then\n    ${sudo}cp ../athamerc /etc/athamerc\n    if [ $? -ne 0 ]; then\n      printf \"\\e[0;31mThe athamerc was not copied. You should copy athamerc to /etc/athamerc or ~/.athamerc.\\e[0;0m\\n\"\n    fi\nfi\n"
        }
      ]
    }
  ]
}