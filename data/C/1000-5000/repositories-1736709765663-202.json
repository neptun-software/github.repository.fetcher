{
  "metadata": {
    "timestamp": 1736709765663,
    "page": 202,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "psycopg/psycopg2",
      "stars": 3396,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1328125,
          "content": "MANIFEST\n*~\n*.userprefs\n*.pidb\n*.pyc\n*.sw[po]\n*.egg-info/\ndist/*\n/build\nenv\nenv?\n.idea\n.tox\n.vscode/\n/rel\n/wheels\n/packages\n/wheelhouse\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.4638671875,
          "content": "Main authors:\n  Federico Di Gregorio <fog@debian.org>\n  Daniele Varrazzo <daniele.varrazzo@gmail.com>\n\nFor the win32 port:\n  Jason Erickson <jerickso@indian.com>\n\nAdditional Help:\n\n  Peter Fein contributed a logging connection/cursor class that even if it\n  was not used directly heavily influenced the implementation currently in\n  psycopg2.extras.\n\n  Jan Urba≈Ñski (re)started the work on asynchronous queries and contributed\n  both on that and on other parts of psycopg2.\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.1513671875,
          "content": "Installation instructions are included in the docs.\n\nPlease check the 'doc/src/install.rst' file or online at\n<https://www.psycopg.org/docs/install.html>.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.185546875,
          "content": "psycopg2 and the LGPL\n---------------------\n\npsycopg2 is free software: you can redistribute it and/or modify it\nunder the terms of the GNU Lesser General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\npsycopg2 is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\nLicense for more details.\n\nIn addition, as a special exception, the copyright holders give\npermission to link this program with the OpenSSL library (or with\nmodified versions of OpenSSL that use the same license as OpenSSL),\nand distribute linked combinations including the two.\n\nYou must obey the GNU Lesser General Public License in all respects for\nall of the code used other than OpenSSL. If you modify file(s) with this\nexception, you may extend this exception to your version of the file(s),\nbut you are not obligated to do so. If you do not wish to do so, delete\nthis exception statement from your version. If you delete this exception\nstatement from all source files in the program, then also delete it here.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with psycopg2 (see the doc/ directory.)\nIf not, see <https://www.gnu.org/licenses/>.\n\n\nAlternative licenses\n--------------------\n\nThe following BSD-like license applies (at your option) to the files following\nthe pattern ``psycopg/adapter*.{h,c}`` and ``psycopg/microprotocol*.{h,c}``:\n\n Permission is granted to anyone to use this software for any purpose,\n including commercial applications, and to alter it and redistribute it\n freely, subject to the following restrictions:\n\n 1. The origin of this software must not be misrepresented; you must not\n    claim that you wrote the original software. If you use this\n    software in a product, an acknowledgment in the product documentation\n    would be appreciated but is not required.\n\n 2. Altered source versions must be plainly marked as such, and must not\n    be misrepresented as being the original software.\n\n 3. This notice may not be removed or altered from any source distribution.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.388671875,
          "content": "recursive-include psycopg *.c *.h *.manifest\nrecursive-include lib *.py\nrecursive-include tests *.py\ninclude doc/README.rst doc/SUCCESS doc/COPYING.LESSER doc/pep-0249.txt\ninclude doc/Makefile doc/requirements.txt\nrecursive-include doc/src *.rst *.py *.css Makefile\nrecursive-include scripts *.py *.sh\ninclude AUTHORS README.rst INSTALL LICENSE NEWS\ninclude MANIFEST.in setup.py setup.cfg Makefile\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.482421875,
          "content": "# Makefile for psycopg2. Do you want to...\n#\n# Build the library::\n#\n#   make\n#\n# Build the documentation::\n#\n#   make env (once)\n#   make docs\n#\n# Create a source package::\n#\n#   make sdist\n#\n# Run the test::\n#\n#   make check  # this requires setting up a test database with the correct user\n\nPYTHON := python$(PYTHON_VERSION)\nPYTHON_VERSION ?= $(shell $(PYTHON) -c 'import sys; print (\"%d.%d\" % sys.version_info[:2])')\nBUILD_DIR = $(shell pwd)/build/lib.$(PYTHON_VERSION)\n\nSOURCE_C := $(wildcard psycopg/*.c psycopg/*.h)\nSOURCE_PY := $(wildcard lib/*.py)\nSOURCE_TESTS := $(wildcard tests/*.py)\nSOURCE_DOC := $(wildcard doc/src/*.rst)\nSOURCE := $(SOURCE_C) $(SOURCE_PY) $(SOURCE_TESTS) $(SOURCE_DOC)\n\nPACKAGE := $(BUILD_DIR)/psycopg2\nPLATLIB := $(PACKAGE)/_psycopg.so\nPURELIB := $(patsubst lib/%,$(PACKAGE)/%,$(SOURCE_PY))\n\nBUILD_OPT := --build-lib=$(BUILD_DIR)\nBUILD_EXT_OPT := --build-lib=$(BUILD_DIR)\nSDIST_OPT := --formats=gztar\n\nifdef PG_CONFIG\n\tBUILD_EXT_OPT += --pg-config=$(PG_CONFIG)\nendif\n\nVERSION := $(shell grep PSYCOPG_VERSION setup.py | head -1 | sed -e \"s/.*'\\(.*\\)'/\\1/\")\nSDIST := dist/psycopg2-$(VERSION).tar.gz\n\n.PHONY: check clean\n\ndefault: package\n\nall: package sdist\n\npackage: $(PLATLIB) $(PURELIB)\n\ndocs: docs-html\n\ndocs-html: doc/html/genindex.html\n\n# for PyPI documentation\ndocs-zip: doc/docs.zip\n\nsdist: $(SDIST)\n\nenv:\n\t$(MAKE) -C doc $@\n\ncheck:\n\tPYTHONPATH=$(BUILD_DIR) $(PYTHON) -c \"import tests; tests.unittest.main(defaultTest='tests.test_suite')\" --verbose\n\ntestdb:\n\t@echo \"* Creating $(TESTDB)\"\n\t@if psql -l | grep -q \" $(TESTDB) \"; then \\\n\t    dropdb $(TESTDB) >/dev/null; \\\n\tfi\n\tcreatedb $(TESTDB)\n\t# Note to packagers: this requires the postgres user running the test\n\t# to be a superuser.  You may change this line to use the superuser only\n\t# to install the contrib.  Feel free to suggest a better way to set up the\n\t# testing environment (as the current is enough for development).\n\tpsql -f `pg_config --sharedir`/contrib/hstore.sql $(TESTDB)\n\n\n$(PLATLIB): $(SOURCE_C)\n\t$(PYTHON) setup.py build_ext $(BUILD_EXT_OPT)\n\n$(PACKAGE)/%.py: lib/%.py\n\t$(PYTHON) setup.py build_py $(BUILD_OPT)\n\ttouch $@\n\n$(PACKAGE)/tests/%.py: tests/%.py\n\t$(PYTHON) setup.py build_py $(BUILD_OPT)\n\ttouch $@\n\n$(SDIST): $(SOURCE)\n\t$(PYTHON) setup.py sdist $(SDIST_OPT)\n\n# docs depend on the build as it partly use introspection.\ndoc/html/genindex.html: $(PLATLIB) $(PURELIB) $(SOURCE_DOC)\n\t$(MAKE) -C doc html\n\ndoc/docs.zip: doc/html/genindex.html\n\t(cd doc/html && zip -r ../docs.zip *)\n\nclean:\n\trm -rf build\n\t$(MAKE) -C doc clean\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 54.84765625,
          "content": "Current release\n---------------\n\nWhat's new in psycopg 2.9.10\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Add support for Python 3.13.\n- Receive notifications on commit (:ticket:`#1728`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 17.\n- Drop support for Python 3.7.\n\n\nWhat's new in psycopg 2.9.9\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Add support for Python 3.12.\n- Drop support for Python 3.6.\n\n\nWhat's new in psycopg 2.9.8\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Wheel package bundled with PostgreSQL 16 libpq in order to add support for\n  recent features, such as ``sslcertmode``.\n\n\nWhat's new in psycopg 2.9.7\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fix propagation of exceptions raised during module initialization\n  (:ticket:`#1598`).\n- Fix building when pg_config returns an empty string (:ticket:`#1599`).\n- Wheel package bundled with OpenSSL 1.1.1v.\n\n\nWhat's new in psycopg 2.9.6\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Package manylinux 2014 for aarch64 and ppc64le platforms, in order to\n  include libpq 15 in the binary package (:ticket:`#1396`).\n- Wheel package bundled with OpenSSL 1.1.1t.\n\n\nWhat's new in psycopg 2.9.5\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Add support for Python 3.11.\n- Add support for rowcount in MERGE statements in binary packages\n  (:ticket:`#1497`).\n- Wheel package bundled with OpenSSL 1.1.1r and PostgreSQL 15 libpq.\n\n\nWhat's new in psycopg 2.9.4\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fix `~psycopg2.extras.register_composite()`,\n  `~psycopg2.extras.register_range()` with customized :sql:`search_path`\n  (:ticket:`#1487`).\n- Handle correctly composite types with names or in schemas requiring escape.\n- Find ``pg_service.conf`` file in the ``/etc/postgresql-common`` directory in\n  binary packages (:ticket:`#1365`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 15.\n- Wheel package bundled with OpenSSL 1.1.1q and PostgreSQL 14.4 libpq.\n\n\nWhat's new in psycopg 2.9.3\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Alpine (musl) wheels now available (:ticket:`#1392`).\n- macOS arm64 (Apple M1) wheels now available (:ticket:`1482`).\n\n\nWhat's new in psycopg 2.9.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Raise `ValueError` for dates >= Y10k (:ticket:`#1307`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 14.\n- Add preliminary support for Python 3.11 (:tickets:`#1376, #1386`).\n- Wheel package bundled with OpenSSL 1.1.1l and PostgreSQL 14.1 libpq\n  (:ticket:`#1388`).\n\n\nWhat's new in psycopg 2.9.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fix regression with named `~psycopg2.sql.Placeholder` (:ticket:`#1291`).\n\n\nWhat's new in psycopg 2.9\n-------------------------\n\n- ``with connection`` starts a transaction on autocommit transactions too\n  (:ticket:`#941`).\n- Timezones with fractional minutes are supported on Python 3.7 and following\n  (:ticket:`#1272`).\n- Escape table and column names in `~cursor.copy_from()` and\n  `~cursor.copy_to()`.\n- Connection exceptions with sqlstate ``08XXX`` reclassified as\n  `~psycopg2.OperationalError` (a subclass of the previously used\n  `~psycopg2.DatabaseError`) (:ticket:`#1148`).\n- Include library dirs required from libpq to work around MacOS build problems\n  (:ticket:`#1200`).\n\nOther changes:\n\n- Dropped support for Python 2.7, 3.4, 3.5 (:tickets:`#1198, #1000, #1197`).\n- Dropped support for mx.DateTime.\n- Use `datetime.timezone` objects by default in datetime objects instead of\n  `~psycopg2.tz.FixedOffsetTimezone`.\n- The `psycopg2.tz` module is deprecated and scheduled to be dropped in the\n  next major release.\n- Provide :pep:`599` wheels packages (manylinux2014 tag) for i686 and x86_64\n  platforms.\n- Provide :pep:`600` wheels packages (manylinux_2_24 tag) for aarch64 and\n  ppc64le platforms.\n- Wheel package bundled with OpenSSL 1.1.1k and PostgreSQL 13.3 libpq.\n- Build system for Linux/MacOS binary packages moved to GitHub Actions.\n\n\nWhat's new in psycopg 2.8.7\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Accept empty params as `~psycopg2.connect()` (:ticket:`#1250`).\n- Fix attributes refcount in `Column` initialisation (:ticket:`#1252`).\n- Allow re-initialisation of static variables in the C module (:ticket:`#1267`).\n\n\nWhat's new in psycopg 2.8.6\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed memory leak changing connection encoding to the current one\n  (:ticket:`#1101`).\n- Fixed search of mxDateTime headers in virtualenvs (:ticket:`#996`).\n- Added missing values from errorcodes (:ticket:`#1133`).\n- `cursor.query` reports the query of the last :sql:`COPY` operation too\n  (:ticket:`#1141`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 13.\n- Added wheel packages for ARM architecture (:ticket:`#1125`).\n- Wheel package bundled with OpenSSL 1.1.1g.\n\n\nWhat's new in psycopg 2.8.5\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed use of `!connection_factory` and `!cursor_factory` together\n  (:ticket:`#1019`).\n- Added support for `~logging.LoggerAdapter` in\n  `~psycopg2.extras.LoggingConnection` (:ticket:`#1026`).\n- `~psycopg2.extensions.Column` objects in `cursor.description` can be sliced\n  (:ticket:`#1034`).\n- Added AIX support (:ticket:`#1061`).\n- Fixed `~copy.copy()` of `~psycopg2.extras.DictCursor` rows (:ticket:`#1073`).\n\n\nWhat's new in psycopg 2.8.4\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed building with Python 3.8 (:ticket:`#854`).\n- Don't swallow keyboard interrupts on connect when a password is specified\n  in the connection string (:ticket:`#898`).\n- Don't advance replication cursor when the message wasn't confirmed\n  (:ticket:`#940`).\n- Fixed inclusion of ``time.h`` on linux (:ticket:`#951`).\n- Fixed int overflow for large values in `~psycopg2.extensions.Column.table_oid`\n  and `~psycopg2.extensions.Column.type_code` (:ticket:`#961`).\n- `~psycopg2.errorcodes` map and `~psycopg2.errors` classes updated to\n  PostgreSQL 12.\n- Wheel package bundled with OpenSSL 1.1.1d and PostgreSQL at least 11.4.\n\n\nWhat's new in psycopg 2.8.3\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Added *interval_status* parameter to\n  `~psycopg2.extras.ReplicationCursor.start_replication()` method and other\n  facilities to send automatic replication keepalives at periodic intervals\n  (:ticket:`#913`).\n- Fixed namedtuples caching introduced in 2.8 (:ticket:`#928`).\n\n\nWhat's new in psycopg 2.8.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed `~psycopg2.extras.RealDictCursor` when there are repeated columns\n  (:ticket:`#884`).\n- Binary packages built with openssl 1.1.1b. Should fix concurrency problems\n  (:tickets:`#543, #836`).\n\n\nWhat's new in psycopg 2.8.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed `~psycopg2.extras.RealDictRow` modifiability (:ticket:`#886`).\n- Fixed \"there's no async cursor\" error polling a connection with no cursor\n  (:ticket:`#887`).\n\n\nWhat's new in psycopg 2.8\n-------------------------\n\nNew features:\n\n- Added `~psycopg2.errors` module. Every PostgreSQL error is converted into\n  a specific exception class (:ticket:`#682`).\n- Added `~psycopg2.extensions.encrypt_password()` function (:ticket:`#576`).\n- Added `~psycopg2.extensions.BYTES` adapter to manage databases with mixed\n  encodings on Python 3 (:ticket:`#835`).\n- Added `~psycopg2.extensions.Column.table_oid` and\n  `~psycopg2.extensions.Column.table_column` attributes on `cursor.description`\n  items (:ticket:`#661`).\n- Added `connection.info` object to retrieve various PostgreSQL connection\n  information (:ticket:`#726`).\n- Added `~connection.get_native_connection()` to expose the raw ``PGconn``\n  structure to C extensions via Capsule (:ticket:`#782`).\n- Added `~connection.pgconn_ptr` and `~cursor.pgresult_ptr` to expose raw\n  C structures to Python and interact with libpq via ctypes (:ticket:`#782`).\n- `~psycopg2.sql.Identifier` can represent qualified names in SQL composition\n  (:ticket:`#732`).\n- Added `!ReplicationCursor`.\\ `~psycopg2.extras.ReplicationCursor.wal_end`\n  attribute (:ticket:`#800`).\n- Added *fetch* parameter to `~psycopg2.extras.execute_values()` function\n  (:ticket:`#813`).\n- `!str()` on `~psycopg2.extras.Range` produces a human-readable representation\n  (:ticket:`#773`).\n- `~psycopg2.extras.DictCursor` and `~psycopg2.extras.RealDictCursor` rows\n  maintain columns order (:ticket:`#177`).\n- Added `~psycopg2.extensions.Diagnostics.severity_nonlocalized` attribute on\n  the `~psycopg2.extensions.Diagnostics` object (:ticket:`#783`).\n- More efficient `~psycopg2.extras.NamedTupleCursor` (:ticket:`#838`).\n\nBug fixes:\n\n- Fixed connections occasionally broken by the unrelated use of the\n  multiprocessing module (:ticket:`#829`).\n- Fixed async communication blocking if results are returned in different\n  chunks, e.g. with notices interspersed to the results (:ticket:`#856`).\n- Fixed adaptation of numeric subclasses such as `~enum.IntEnum`\n  (:ticket:`#591`).\n\nOther changes:\n\n- Dropped support for Python 2.6, 3.2, 3.3.\n- Dropped `psycopg1` module.\n- Dropped deprecated `!register_tstz_w_secs()` (was previously a no-op).\n- Dropped deprecated `!PersistentConnectionPool`. This pool class was mostly\n  designed to interact with Zope. Use `!ZPsycopgDA.pool` instead.\n- Binary packages no longer installed by default. The 'psycopg2-binary'\n  package must be used explicitly.\n- Dropped `!PSYCOPG_DISPLAY_SIZE` build parameter.\n- Dropped support for mxDateTime as the default date and time adapter.\n  mxDatetime support continues to be available as an alternative to Python's\n  builtin datetime.\n- No longer use 2to3 during installation for Python 2 & 3 compatibility. All\n  source files are now compatible with Python 2 & 3 as is.\n- The `!psycopg2.test` package is no longer installed by ``python setup.py\n  install``.\n- Wheel package bundled with OpenSSL 1.0.2r and PostgreSQL 11.2 libpq.\n\n\nWhat's new in psycopg 2.7.7\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Cleanup of the cursor results assignment code, which might have solved\n  double free and inconsistencies in concurrent usage (:tickets:`#346, #384`).\n- Wheel package bundled with OpenSSL 1.0.2q.\n\n\nWhat's new in psycopg 2.7.6.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed binary package broken on OS X 10.12 (:ticket:`#807`).\n- Wheel package bundled with PostgreSQL 11.1 libpq.\n\n\nWhat's new in psycopg 2.7.6\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Close named cursors if exist, even if `~cursor.execute()` wasn't called\n  (:ticket:`#746`).\n- Fixed building on modern FreeBSD versions with Python 3.7 (:ticket:`#755`).\n- Fixed hang trying to :sql:`COPY` via `~cursor.execute()` in asynchronous\n  connections (:ticket:`#781`).\n- Fixed adaptation of arrays of empty arrays (:ticket:`#788`).\n- Fixed segfault accessing the connection's `~connection.readonly` and\n  `~connection.deferrable` attributes repeatedly (:ticket:`#790`).\n- `~psycopg2.extras.execute_values()` accepts `~psycopg2.sql.Composable`\n  objects (:ticket:`#794`).\n- `~psycopg2.errorcodes` map updated to PostgreSQL 11.\n- Wheel package bundled with PostgreSQL 10.5 libpq and OpenSSL 1.0.2p.\n\n\nWhat's new in psycopg 2.7.5\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Allow non-ascii chars in namedtuple fields (regression introduced fixing\n  :ticket:`#211`).\n- Fixed adaptation of arrays of arrays of nulls (:ticket:`#325`).\n- Fixed building on Solaris 11 and derivatives such as SmartOS and illumos\n  (:ticket:`#677`).\n- Maybe fixed building on MSYS2 (as reported in :ticket:`#658`).\n- Allow string subclasses in connection and other places (:ticket:`#679`).\n- Don't raise an exception closing an unused named cursor (:ticket:`#716`).\n- Wheel package bundled with PostgreSQL 10.4 libpq and OpenSSL 1.0.2o.\n\n\nWhat's new in psycopg 2.7.4\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Moving away from installing the wheel package by default.\n  Packages installed from wheel raise a warning on import. Added package\n  ``psycopg2-binary`` to install from wheel instead (:ticket:`#543`).\n- Convert fields names into valid Python identifiers in\n  `~psycopg2.extras.NamedTupleCursor` (:ticket:`#211`).\n- Fixed Solaris 10 support (:ticket:`#532`).\n- `cursor.mogrify()` can be called on closed cursors (:ticket:`#579`).\n- Fixed setting session characteristics in corner cases on autocommit\n  connections (:ticket:`#580`).\n- Fixed `~psycopg2.extras.MinTimeLoggingCursor` on Python 3 (:ticket:`#609`).\n- Fixed parsing of array of points as floats (:ticket:`#613`).\n- Fixed `~psycopg2.__libpq_version__` building with libpq >= 10.1\n  (:ticket:`#632`).\n- Fixed `~cursor.rowcount` after `~cursor.executemany()` with :sql:`RETURNING`\n  statements (:ticket:`#633`).\n- Fixed compatibility problem with pypy3 (:ticket:`#649`).\n- Wheel packages bundled with PostgreSQL 10.1 libpq and OpenSSL 1.0.2n.\n- Wheel packages for Python 2.6 no more available (support dropped from\n  wheel building infrastructure).\n\n\nWhat's new in psycopg 2.7.3.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Wheel package bundled with PostgreSQL 10.0 libpq and OpenSSL 1.0.2l\n  (:tickets:`#601, #602`).\n\n\nWhat's new in psycopg 2.7.3.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Dropped libresolv from wheel package to avoid incompatibility with\n  glibc 2.26 (wheels ticket #2).\n\n\nWhat's new in psycopg 2.7.3\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Restored default :sql:`timestamptz[]` typecasting to Python `!datetime`.\n  Regression introduced in Psycopg 2.7.2 (:ticket:`#578`).\n\n\nWhat's new in psycopg 2.7.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed inconsistent state in externally closed connections\n  (:tickets:`#263, #311, #443`). Was fixed in 2.6.2 but not included in\n  2.7 by mistake.\n- Fixed Python exceptions propagation in green callback (:ticket:`#410`).\n- Don't display the password in `connection.dsn` when the connection\n  string is specified as an URI (:ticket:`#528`).\n- Return objects with timezone parsing \"infinity\" :sql:`timestamptz`\n  (:ticket:`#536`).\n- Dropped dependency on VC9 runtime on Windows binary packages\n  (:ticket:`#541`).\n- Fixed segfault in `~connection.lobject()` when *mode*\\=\\ `!None`\n  (:ticket:`#544`).\n- Fixed `~connection.lobject()` keyword argument *lobject_factory*\n  (:ticket:`#545`).\n- Fixed `~psycopg2.extras.ReplicationCursor.consume_stream()`\n  *keepalive_interval* argument (:ticket:`#547`).\n- Maybe fixed random import error on Python 3.6 in multiprocess\n  environment (:ticket:`#550`).\n- Fixed random `!SystemError` upon receiving abort signal (:ticket:`#551`).\n- Accept `~psycopg2.sql.Composable` objects in\n  `~psycopg2.extras.ReplicationCursor.start_replication_expert()`\n  (:ticket:`#554`).\n- Parse intervals returned as microseconds from Redshift (:ticket:`#558`).\n- Added `~psycopg2.extras.Json` `!prepare()` method to consider connection\n  params when adapting (:ticket:`#562`).\n- `~psycopg2.errorcodes` map updated to PostgreSQL 10 beta 1.\n\n\nWhat's new in psycopg 2.7.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Ignore `!None` arguments passed to `~psycopg2.connect()` and\n  `~psycopg2.extensions.make_dsn()` (:ticket:`#517`).\n- OpenSSL upgraded from major version 0.9.8 to 1.0.2 in the Linux wheel\n  packages (:ticket:`#518`).\n- Fixed build with libpq versions < 9.3 (:ticket:`#520`).\n\n\nWhat's new in psycopg 2.7\n-------------------------\n\nNew features:\n\n- Added `~psycopg2.sql` module to generate SQL dynamically (:ticket:`#308`).\n- Added :ref:`replication-support` (:ticket:`#322`). Main authors are\n  Oleksandr Shulgin and Craig Ringer, who deserve a huge thank you.\n- Added `~psycopg2.extensions.parse_dsn()` and\n  `~psycopg2.extensions.make_dsn()` functions (:tickets:`#321, #363`).\n  `~psycopg2.connect()` now can take both *dsn* and keyword arguments, merging\n  them together.\n- Added `~psycopg2.__libpq_version__` and\n  `~psycopg2.extensions.libpq_version()` to inspect the version of the\n  ``libpq`` library the module was bundled with\n  (:tickets:`#35, #323`).\n- The attributes `~connection.notices` and `~connection.notifies` can be\n  customized replacing them with any object exposing an `!append()` method\n  (:ticket:`#326`).\n- Adapt network types to `ipaddress` objects when available. When not\n  enabled, convert arrays of network types to lists by default. The old `!Inet`\n  adapter is deprecated (:tickets:`#317, #343, #387`).\n- Added `~psycopg2.extensions.quote_ident()` function (:ticket:`#359`).\n- Added `~connection.get_dsn_parameters()` connection method (:ticket:`#364`).\n- `~cursor.callproc()` now accepts a dictionary of parameters (:ticket:`#381`).\n- Give precedence to `!__conform__()` over superclasses to choose an object\n  adapter (:ticket:`#456`).\n- Using Python C API decoding functions and codecs caching for faster\n  unicode encoding/decoding (:ticket:`#473`).\n- `~cursor.executemany()` slowness addressed by\n  `~psycopg2.extras.execute_batch()` and `~psycopg2.extras.execute_values()`\n  (:ticket:`#491`).\n- Added ``async_`` as an alias for ``async`` to support Python 3.7 where\n  ``async`` will become a keyword (:ticket:`#495`).\n- Unless in autocommit, do not use :sql:`default_transaction_*` settings to\n  control the session characteristics as it may create problems with external\n  connection pools such as pgbouncer; use :sql:`BEGIN` options instead\n  (:ticket:`#503`).\n- `~connection.isolation_level` is now writable and entirely separated from\n  `~connection.autocommit`; added `~connection.readonly`,\n  `~connection.deferrable` writable attributes.\n\nBug fixes:\n\n- Throw an exception trying to pass ``NULL`` chars as parameters\n  (:ticket:`#420`).\n- Fixed error caused by missing decoding `~psycopg2.extras.LoggingConnection`\n  (:ticket:`#483`).\n- Fixed integer overflow in :sql:`interval` seconds (:ticket:`#512`).\n- Make `~psycopg2.extras.Range` objects picklable (:ticket:`#462`).\n- Fixed version parsing and building with PostgreSQL 10 (:ticket:`#489`).\n\nOther changes:\n\n- Dropped support for Python 2.5 and 3.1.\n- Dropped support for client library older than PostgreSQL 9.1 (but older\n  server versions are still supported).\n- `~connection.isolation_level` doesn't read from the database but will return\n  `~psycopg2.extensions.ISOLATION_LEVEL_DEFAULT` if no value was set on the\n  connection.\n- Empty arrays no more converted into lists if they don't have a type attached\n  (:ticket:`#506`)\n\n\nWhat's new in psycopg 2.6.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed inconsistent state in externally closed connections\n  (:tickets:`#263, #311, #443`).\n- Report the server response status on errors (such as :ticket:`#281`).\n- Raise `!NotSupportedError` on unhandled server response status\n  (:ticket:`#352`).\n- Allow overriding string adapter encoding with no connection (:ticket:`#331`).\n- The `~psycopg2.extras.wait_select` callback allows interrupting a\n  long-running query in an interactive shell using :kbd:`Ctrl-C`\n  (:ticket:`#333`).\n- Fixed `!PersistentConnectionPool` on Python 3 (:ticket:`#348`).\n- Fixed segfault on `repr()` of an unitialized connection (:ticket:`#361`).\n- Allow adapting bytes using `~psycopg2.extensions.QuotedString` on Python 3\n  (:ticket:`#365`).\n- Added support for setuptools/wheel (:ticket:`#370`).\n- Fix build on Windows with Python 3.5, VS 2015 (:ticket:`#380`).\n- Fixed `!errorcodes.lookup` initialization thread-safety (:ticket:`#382`).\n- Fixed `!read()` exception propagation in copy_from (:ticket:`#412`).\n- Fixed possible NULL TZ decref  (:ticket:`#424`).\n- `~psycopg2.errorcodes` map updated to PostgreSQL 9.5.\n\n\nWhat's new in psycopg 2.6.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Lists consisting of only `None` are escaped correctly (:ticket:`#285`).\n- Fixed deadlock in multithread programs using OpenSSL (:ticket:`#290`).\n- Correctly unlock the connection after error in flush (:ticket:`#294`).\n- Fixed `!MinTimeLoggingCursor.callproc()` (:ticket:`#309`).\n- Added support for MSVC 2015 compiler (:ticket:`#350`).\n\n\nWhat's new in psycopg 2.6\n-------------------------\n\nNew features:\n\n- Added support for large objects larger than 2GB. Many thanks to Blake Rouse\n  and the MAAS Team for the feature development.\n- Python `time` objects with a tzinfo specified and PostgreSQL :sql:`timetz`\n  data are converted into each other (:ticket:`#272`).\n\nBug fixes:\n\n- Json adapter's `!str()` returns the adapted content instead of the `!repr()`\n  (:ticket:`#191`).\n\n\nWhat's new in psycopg 2.5.5\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Named cursors used as context manager don't swallow the exception on exit\n  (:ticket:`#262`).\n- `cursor.description` can be pickled (:ticket:`#265`).\n- Propagate read error messages in COPY FROM (:ticket:`#270`).\n- PostgreSQL time 24:00 is converted to Python 00:00 (:ticket:`#278`).\n\n\nWhat's new in psycopg 2.5.4\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Added :sql:`jsonb` support for PostgreSQL 9.4 (:ticket:`#226`).\n- Fixed segfault if COPY statements are passed to `~cursor.execute()` instead\n  of using the proper methods (:ticket:`#219`).\n- Force conversion of pool arguments to integer to avoid potentially unbounded\n  pools (:ticket:`#220`).\n- Cursors :sql:`WITH HOLD` don't begin a new transaction upon move/fetch/close\n  (:ticket:`#228`).\n- Cursors :sql:`WITH HOLD` can be used in autocommit (:ticket:`#229`).\n- `~cursor.callproc()` doesn't silently ignore an argument without a length.\n- Fixed memory leak with large objects (:ticket:`#256`).\n- Make sure the internal ``_psycopg.so`` module can be imported stand-alone (to\n  allow modules juggling such as the one described in :ticket:`#201`).\n\n\nWhat's new in psycopg 2.5.3\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Work around `pip issue #1630 <https://github.com/pypa/pip/issues/1630>`__\n  making installation via ``pip -e git+url`` impossible (:ticket:`#18`).\n- Copy operations correctly set the `cursor.rowcount` attribute\n  (:ticket:`#180`).\n- It is now possible to call `get_transaction_status()` on closed connections.\n- Fixed unsafe access to object names causing assertion failures in\n  Python 3 debug builds (:ticket:`#188`).\n- Mark the connection closed if found broken on `poll()` (from :ticket:`#192`\n  discussion)\n- Fixed handling of dsn and closed attributes in connection subclasses\n  failing to connect (from :ticket:`#192` discussion).\n- Added arbitrary but stable order to `Range` objects, thanks to\n  Chris Withers (:ticket:`#193`).\n- Avoid blocking async connections on connect (:ticket:`#194`). Thanks to\n  Adam Petrovich for the bug report and diagnosis.\n- Don't segfault using poorly defined cursor subclasses which forgot to call\n  the superclass init (:ticket:`#195`).\n- Mark the connection closed when a Socket connection is broken, as it\n  happens for TCP connections instead (:ticket:`#196`).\n- Fixed overflow opening a lobject with an oid not fitting in a signed int\n  (:ticket:`#203`).\n- Fixed handling of explicit default ``cursor_factory=None`` in\n  `connection.cursor()` (:ticket:`#210`).\n- Fixed possible segfault in named cursors creation.\n- Fixed debug build on Windows, thanks to James Emerton.\n\n\nWhat's new in psycopg 2.5.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed segfault pickling the exception raised on connection error\n  (:ticket:`#170`).\n- Meaningful connection errors report a meaningful message, thanks to\n  Alexey Borzenkov (:ticket:`#173`).\n- Manually creating `lobject` with the wrong parameter doesn't segfault\n  (:ticket:`#187`).\n\n\nWhat's new in psycopg 2.5.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed build on Solaris 10 and 11 where the round() function is already\n  declared (:ticket:`#146`).\n- Fixed comparison of `Range` with non-range objects (:ticket:`#164`).\n  Thanks to Chris Withers for the patch.\n- Fixed double-free on connection dealloc (:ticket:`#166`). Thanks to\n  Gangadharan S.A. for the report and fix suggestion.\n\n\nWhat's new in psycopg 2.5\n-------------------------\n\nNew features:\n\n- Added :ref:`JSON adaptation <adapt-json>`.\n- Added :ref:`support for PostgreSQL 9.2 range types <adapt-range>`.\n- `connection` and `cursor` objects can be used in ``with`` statements\n  as context managers as specified by recent |DBAPI|_ extension.\n- Added `~psycopg2.extensions.Diagnostics` object to get extended info\n  from a database error.  Many thanks to Matthew Woodcraft for the\n  implementation (:ticket:`#149`).\n- Added `connection.cursor_factory` attribute to customize the default\n  object returned by `~connection.cursor()`.\n- Added support for backward scrollable cursors. Thanks to Jon Nelson\n  for the initial patch (:ticket:`#108`).\n- Added a simple way to :ref:`customize casting of composite types\n  <adapt-composite>` into Python objects other than namedtuples.\n  Many thanks to Ronan Dunklau and Tobias Oberstein for the feature\n  development.\n- `connection.reset()` implemented using :sql:`DISCARD ALL` on server\n  versions supporting it.\n\nBug fixes:\n\n- Properly cleanup memory of broken connections (:ticket:`#148`).\n- Fixed bad interaction of ``setup.py`` with other dependencies in\n  Distribute projects on Python 3 (:ticket:`#153`).\n\nOther changes:\n\n- Added support for Python 3.3.\n- Dropped support for Python 2.4. Please use Psycopg 2.4.x if you need it.\n- `~psycopg2.errorcodes` map updated to PostgreSQL 9.2.\n- Dropped Zope adapter from source repository. ZPsycopgDA now has its own\n  project at <https://github.com/psycopg/ZPsycopgDA>.\n\n\nWhat's new in psycopg 2.4.6\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed 'cursor()' arguments propagation in connection subclasses\n  and overriding of the 'cursor_factory' argument.  Thanks to\n  Corry Haines for the report and the initial patch (:ticket:`#105`).\n- Dropped GIL release during string adaptation around a function call\n  invoking a Python API function, which could cause interpreter crash.\n  Thanks to Manu Cupcic for the report (:ticket:`#110`).\n- Close a green connection if there is an error in the callback.\n  Maybe a harsh solution but it leaves the program responsive\n  (:ticket:`#113`).\n- 'register_hstore()', 'register_composite()', 'tpc_recover()' work with\n  RealDictConnection and Cursor (:ticket:`#114`).\n- Fixed broken pool for Zope and connections re-init across ZSQL methods\n  in the same request (:tickets:`#123, #125, #142`).\n- connect() raises an exception instead of swallowing keyword arguments\n  when a connection string is specified as well (:ticket:`#131`).\n- Discard any result produced by 'executemany()' (:ticket:`#133`).\n- Fixed pickling of FixedOffsetTimezone objects (:ticket:`#135`).\n- Release the GIL around PQgetResult calls after COPY (:ticket:`#140`).\n- Fixed empty strings handling in composite caster (:ticket:`#141`).\n- Fixed pickling of DictRow and RealDictRow objects.\n\n\nWhat's new in psycopg 2.4.5\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- The close() methods on connections and cursors don't raise exceptions\n  if called on already closed objects.\n- Fixed fetchmany() with no argument in cursor subclasses\n  (:ticket:`#84`).\n- Use lo_creat() instead of lo_create() when possible for better\n  interaction with pgpool-II (:ticket:`#88`).\n- Error and its subclasses are picklable, useful for multiprocessing\n  interaction (:ticket:`#90`).\n- Better efficiency and formatting of timezone offset objects thanks\n  to Menno Smits (:tickets:`#94, #95`).\n- Fixed 'rownumber' during iteration on cursor subclasses.\n  Regression introduced in 2.4.4 (:ticket:`#100`).\n- Added support for 'inet' arrays.\n- Fixed 'commit()' concurrency problem (:ticket:`#103`).\n- Codebase cleaned up using the GCC Python plugin's static analysis\n  tool, which has revealed several unchecked return values, possible\n  NULL dereferences, reference counting problems. Many thanks to David\n  Malcolm for the useful tool and the assistance provided using it.\n\n\nWhat's new in psycopg 2.4.4\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- 'register_composite()' also works with the types implicitly defined\n  after a table row, not only with the ones created by 'CREATE TYPE'.\n- Values for the isolation level symbolic constants restored to what\n  they were before release 2.4.2 to avoid breaking apps using the\n  values instead of the constants.\n- Named DictCursor/RealDictCursor honour itersize (:ticket:`#80`).\n- Fixed rollback on error on Zope (:ticket:`#73`).\n- Raise 'DatabaseError' instead of 'Error' with empty libpq errors,\n  consistently with other disconnection-related errors: regression\n  introduced in release 2.4.1 (:ticket:`#82`).\n\n\nWhat's new in psycopg 2.4.3\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- connect() supports all the keyword arguments supported by the\n  database\n- Added 'new_array_type()' function for easy creation of array\n  typecasters.\n- Added support for arrays of hstores and composite types (:ticket:`#66`).\n- Fixed segfault in case of transaction started with connection lost\n  (and possibly other events).\n- Fixed adaptation of Decimal type in sub-interpreters, such as in\n  certain mod_wsgi configurations (:ticket:`#52`).\n- Rollback connections in transaction or in error before putting them\n  back into a pool. Also discard broken connections (:ticket:`#62`).\n- Lazy import of the slow uuid module, thanks to Marko Kreen.\n- Fixed NamedTupleCursor.executemany() (:ticket:`#65`).\n- Fixed --static-libpq setup option (:ticket:`#64`).\n- Fixed interaction between RealDictCursor and named cursors\n  (:ticket:`#67`).\n- Dropped limit on the columns length in COPY operations (:ticket:`#68`).\n- Fixed reference leak with arguments referenced more than once\n  in queries (:ticket:`#81`).\n- Fixed typecasting of arrays containing consecutive backslashes.\n- 'errorcodes' map updated to PostgreSQL 9.1.\n\n\nWhat's new in psycopg 2.4.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Added 'set_session()' method and 'autocommit' property to the\n  connection. Added support for read-only sessions and, for PostgreSQL\n  9.1, for the \"repeatable read\" isolation level and the \"deferrable\"\n  transaction property.\n- Psycopg doesn't execute queries at connection time to find the\n  default isolation level.\n- Fixed bug with multithread code potentially causing loss of sync\n  with the server communication or lock of the client (:ticket:`#55`).\n- Don't fail import if mx.DateTime module can't be found, even if its\n  support was built (:ticket:`#53`).\n- Fixed escape for negative numbers prefixed by minus operator\n  (:ticket:`#57`).\n- Fixed refcount issue during copy.  Reported and fixed by Dave\n  Malcolm (:ticket:`#58`, Red Hat Bug 711095).\n- Trying to execute concurrent operations on the same connection\n  through concurrent green thread results in an error instead of a\n  deadlock.\n- Fixed detection of pg_config on Window. Report and fix, plus some\n  long needed setup.py cleanup by Steve Lacy: thanks!\n\n\nWhat's new in psycopg 2.4.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Use own parser for bytea output, not requiring anymore the libpq 9.0\n  to parse the hex format.\n- Don't fail connection if the client encoding is a non-normalized\n  variant. Issue reported by Peter Eisentraut.\n- Correctly detect an empty query sent to the backend (:ticket:`#46`).\n- Fixed a SystemError clobbering libpq errors raised without SQLSTATE.\n  Bug vivisectioned by Eric Snow.\n- Fixed interaction between NamedTuple and server-side cursors.\n- Allow to specify --static-libpq on setup.py command line instead of\n  just in 'setup.cfg'. Patch provided by Matthew Ryan (:ticket:`#48`).\n\n\nWhat's new in psycopg 2.4\n-------------------------\n\nNew features and changes:\n\n- Added support for Python 3.1 and 3.2. The conversion has also\n  brought several improvements:\n\n  - Added 'b' and 't' mode to large objects: write can deal with both\n    bytes strings and unicode; read can return either bytes strings\n    or decoded unicode.\n  - COPY sends Unicode data to files implementing 'io.TextIOBase'.\n  - Improved PostgreSQL-Python encodings mapping.\n  - Added a few missing encodings: EUC_CN, EUC_JIS_2004, ISO885910,\n    ISO885916, LATIN10, SHIFT_JIS_2004.\n  - Dropped repeated dictionary lookups with unicode query/parameters.\n\n- Improvements to the named cursors:\n\n  - More efficient iteration on named cursors, fetching 'itersize'\n    records at time from the backend.\n  - The named cursors name can be an invalid identifier.\n\n- Improvements in data handling:\n\n  - Added 'register_composite()' function to cast PostgreSQL\n    composite types into Python tuples/namedtuples.\n  - Adapt types 'bytearray' (from Python 2.6), 'memoryview' (from\n    Python 2.7) and other objects implementing the \"Revised Buffer\n    Protocol\" to 'bytea' data type.\n  - The 'hstore' adapter can work even when the data type is not\n    installed in the 'public' namespace.\n  - Raise a clean exception instead of returning bad data when\n    receiving bytea in 'hex' format and the client libpq can't parse\n    them.\n  - Empty lists correctly roundtrip Python -> PostgreSQL -> Python.\n\n- Other changes:\n\n  - 'cursor.description' is provided as named tuples if available.\n  - The build script refuses to guess values if 'pg_config' is not\n    found.\n  - Connections and cursors are weakly referenceable.\n\nBug fixes:\n\n- Fixed adaptation of None in composite types (:ticket:`#26`). Bug\n  report by Karsten Hilbert.\n- Fixed several reference leaks in less common code paths.\n- Fixed segfault when a large object is closed and its connection no\n  more available.\n- Added missing icon to ZPsycopgDA package, not available in Zope\n  2.12.9 (:ticket:`#30`). Bug report and patch by Pumukel.\n- Fixed conversion of negative infinity (:ticket:`#40`). Bug report and\n  patch by Marti Raudsepp.\n\n\nWhat's new in psycopg 2.3.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed segfault with middleware not passing DateStyle to the client\n  (:ticket:`#24`). Bug report and patch by Marti Raudsepp.\n\n\nWhat's new in psycopg 2.3.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Fixed build problem on CentOS 5.5 x86_64 (:ticket:`#23`).\n\n\nWhat's new in psycopg 2.3\n-------------------------\n\npsycopg 2.3 aims to expose some new features introduced in PostgreSQL 9.0.\n\nMain new features:\n\n- `dict` to `hstore` adapter and `hstore` to `dict` typecaster, using both\n  9.0 and pre-9.0 syntax.\n- Two-phase commit protocol support as per DBAPI specification.\n- Support for payload in notifications received from the backend.\n- `namedtuple`-returning cursor.\n- Query execution cancel.\n\nOther features and changes:\n\n- Dropped support for protocol 2: Psycopg 2.3 can only connect to PostgreSQL\n  servers with version at least 7.4.\n- Don't issue a query at every connection to detect the client encoding\n  and to set the datestyle to ISO if it is already compatible with what\n  expected.\n- `mogrify()` now supports unicode queries.\n- Subclasses of a type that can be adapted are adapted as the superclass.\n- `errorcodes` knows a couple of new codes introduced in PostgreSQL 9.0.\n- Dropped deprecated Psycopg \"own quoting\".\n- Never issue a ROLLBACK on close/GC. This behaviour was introduced as a bug\n  in release 2.2, but trying to send a command while being destroyed has been\n  considered not safe.\n\nBug fixes:\n\n- Fixed use of `PQfreemem` instead of `free` in binary typecaster.\n- Fixed access to freed memory in `conn_get_isolation_level()`.\n- Fixed crash during Decimal adaptation with a few 2.5.x Python versions\n  (:ticket:`#7`).\n- Fixed notices order (:ticket:`#9`).\n\n\nWhat's new in psycopg 2.2.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBux fixes:\n\n- the call to logging.basicConfig() in pool.py has been dropped: it was\n  messing with some projects using logging (and a library should not\n  initialize the logging system anyway.)\n- psycopg now correctly handles time zones with seconds in the UTC offset.\n  The old register_tstz_w_secs() function is deprecated and will raise a\n  warning if called.\n- Exceptions raised by the column iterator are propagated.\n- Exceptions raised by executemany() iterators are propagated.\n\n\nWhat's new in psycopg 2.2.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBux fixes:\n\n- psycopg now builds again on MS Windows.\n\n\nWhat's new in psycopg 2.2\n-------------------------\n\nThis is the first release of the new 2.2 series, supporting not just one but\ntwo different ways of executing asynchronous queries, thanks to Jan and Daniele\n(with a little help from me and others, but they did 99% of the work so they\ndeserve their names here in the news.)\n\npsycopg now supports both classic select() loops and \"green\" coroutine\nlibraries. It is all in the documentation, so just point your browser to\ndoc/html/advanced.html.\n\nOther new features:\n\n- truncate() method for lobjects.\n- COPY functions are now a little bit faster.\n- All builtin PostgreSQL to Python typecasters are now available from the\n  psycopg2.extensions module.\n- Notifications from the backend are now available right after the execute()\n  call (before client code needed to call isbusy() to ensure NOTIFY\n  reception.)\n- Better timezone support.\n- Lots of documentation updates.\n\nBug fixes:\n\n- Fixed some gc/refcounting problems.\n- Fixed reference leak in NOTIFY reception.\n- Fixed problem with PostgreSQL not casting string literals to the correct\n  types in some situations: psycopg now add an explicit cast to dates, times\n  and bytea representations.\n- Fixed TimestampFromTicks() and TimeFromTicks() for seconds >= 59.5.\n- Fixed spurious exception raised when calling C typecasters from Python\n  ones.\n\n\nWhat's new in psycopg 2.0.14\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNew features:\n\n- Support for adapting tuples to PostgreSQL arrays is now enabled by\n  default and does not require importing psycopg2.extensions anymore.\n- \"can't adapt\" error message now includes full type information.\n- Thank to Daniele Varrazzo (piro) psycopg2's source package now includes\n  full documentation in HTML and plain text format.\n\nBug fixes:\n\n- No loss of precision when using floats anymore.\n- decimal.Decimal \"nan\" and \"infinity\" correctly converted to PostgreSQL\n  numeric NaN values (note that PostgreSQL numeric type does not support\n  infinity but just NaNs.)\n- psycopg2.extensions now includes Binary.\n\nIt seems we're good citizens of the free software ecosystem and that big\nbig big companies and people ranting on the pgsql-hackers mailing list\nwe'll now not dislike us. *g* (See LICENSE file for the details.)\n\n\nWhat's new in psycopg 2.0.13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNew features:\n\n- Support for UUID arrays.\n- It is now possible to build psycopg linking to a static libpq\n  library.\n\nBug fixes:\n\n- Fixed a deadlock related to using the same connection with\n  multiple cursors from different threads.\n- Builds again with MSVC.\n\n\nWhat's new in psycopg 2.0.12\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNew features:\n\n- The connection object now has a reset() method that can be used to\n  reset the connection to its default state.\n\nBug fixes:\n\n- copy_to() and copy_from() now accept a much larger number of columns.\n- Fixed PostgreSQL version detection.\n- Fixed ZPsycopgDA version check.\n- Fixed regression in ZPsycopgDA that made it behave wrongly when\n  receiving serialization errors: now the query is re-issued as it\n  should be by propagating the correct exception to Zope.\n- Writing \"large\" large objects should now work.\n\n\nWhat's new in psycopg 2.0.11\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNew features:\n\n- DictRow and RealDictRow now use less memory. If you inherit on them\n  remember to set __slots__ for your new attributes or be prepare to\n  go back to old memory usage.\n\nBug fixes:\n\n- Fixed exception in setup.py.\n- More robust detection of PostgreSQL development versions.\n- Fixed exception in RealDictCursor, introduced in 2.0.10.\n\n\nWhat's new in psycopg 2.0.10\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNew features:\n\n- A specialized type-caster that can parse time zones with seconds is\n  now available. Note that after enabling it (see extras.py) \"wrong\"\n  time zones will be parsed without raising an exception but the\n  result will be rounded.\n- DictCursor can be used as a named cursor.\n- DictRow now implements more dict methods.\n- The connection object now expose PostgreSQL server version as the\n  .server_version attribute and the protocol version used as\n  .protocol_version.\n- The connection object has a .get_parameter_status() methods that\n  can be used to obtain useful information from the server.\n\nBug fixes:\n\n- None is now correctly always adapted to NULL.\n- Two double memory free errors provoked by multithreading and\n  garbage collection are now fixed.\n- Fixed usage of internal Python code in the notice processor; this\n  should fix segfaults when receiving a lot of notices in\n  multithreaded programs.\n- Should build again on MSVC and Solaris.\n- Should build with development versions of PostgreSQL (ones with\n  -devel version string.)\n- Fixed some tests that failed even when psycopg was right.\n\n\nWhat's new in psycopg 2.0.9\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNew features:\n\n- \"import psycopg2.extras\" to get some support for handling times\n  and timestamps with seconds in the time zone offset.\n- DictCursors can now be used as named cursors.\n\nBug fixes:\n\n- register_type() now accept an explicit None as its second parameter.\n- psycopg2 should build again on MSVC and Solaris.\n\n\nWhat's new in psycopg 2.0.9\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNew features:\n\n- COPY TO/COPY FROM queries now can be of any size and psycopg will\n  correctly quote separators.\n- float values Inf and NaN are now correctly handled and can\n  round-trip to the database.\n- executemany() now return the numer of total INSERTed or UPDATEd\n  rows. Note that, as it has always been, executemany() should not\n  be used to execute multiple SELECT statements and while it will\n  execute the statements without any problem, it will return the\n  wrong value.\n- copy_from() and copy_to() can now use quoted separators.\n- \"import psycopg2.extras\" to get UUID support.\n\nBug fixes:\n\n- register_type() now works on connection and cursor subclasses.\n- fixed a memory leak when using lobjects.\n\n\nWhat's new in psycopg 2.0.8\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNew features:\n\n- The connection object now has a get_backend_pid() method that\n  returns the current PostgreSQL connection backend process PID.\n- The PostgreSQL large object API has been exposed through the\n  Cursor.lobject() method.\n\nBug fixes:\n\n- Some fixes to ZPsycopgDA have been merged from the Debian package.\n- A memory leak was fixed in Cursor.executemany().\n- A double free was fixed in pq_complete_error(), that caused crashes\n  under some error conditions.\n\n\nWhat's new in psycopg 2.0.7\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nImproved error handling:\n\n- All instances of psycopg2.Error subclasses now have pgerror,\n  pgcode and cursor attributes.  They will be set to None if no\n  value is available.\n- Exception classes are now chosen based on the SQLSTATE value from\n  the result.  (#184)\n- The commit() and rollback() methods now set the pgerror and pgcode\n  attributes on exceptions. (#152)\n- errors from commit() and rollback() are no longer considered\n  fatal. (#194)\n- If a disconnect is detected during execute(), an exception will be\n  raised at that point rather than resulting in \"ProgrammingError:\n  no results to fetch\" later on. (#186)\n\nBetter PostgreSQL compatibility:\n\n- If the server uses standard_conforming_strings, perform\n  appropriate quoting.\n- BC dates are now handled if psycopg is compiled with mxDateTime\n  support.  If using datetime, an appropriate ValueError is\n  raised. (#203)\n\nOther bug fixes:\n\n- If multiple sub-interpreters are in use, do not share the Decimal\n  type between them. (#192)\n- Buffer objects obtained from psycopg are now accepted by psycopg\n  too, without segfaulting. (#209)\n- A few small changes were made to improve DB-API compatibility.\n  All the dbapi20 tests now pass.\n\nMiscellaneous:\n\n- The PSYCOPG_DISPLAY_SIZE option is now off by default.  This means\n  that display size will always be set to \"None\" in\n  cursor.description.  Calculating the display size was expensive,\n  and infrequently used so this should improve performance.\n- New QueryCanceledError and TransactionRollbackError exceptions\n  have been added to the psycopg2.extensions module.  They can be\n  used to detect statement timeouts and deadlocks respectively.\n- Cursor objects now have a \"closed\" attribute. (#164)\n- If psycopg has been built with debug support, it is now necessary\n  to set the PSYCOPG_DEBUG environment variable to turn on debug\n  spew.\n\n\nWhat's new in psycopg 2.0.6\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBetter support for PostgreSQL, Python and win32:\n\n- full support for PostgreSQL 8.2, including NULLs in arrays\n- support for almost all existing PostgreSQL encodings\n- full list of PostgreSQL error codes available by importing the\n  psycopg2.errorcodes module\n- full support for Python 2.5 and 64 bit architectures\n- better build support on win32 platform\n\nSupport for per-connection type-casters (used by ZPsycopgDA too, this\nfixes a long standing bug that made different connections use a random\nset of date/time type-casters instead of the configured one.)\n\nBetter management of times and dates both from Python and in Zope.\n\ncopy_to and copy_from now take an extra \"columns\" parameter.\n\nPython tuples are now adapted to SQL sequences that can be used with\nthe \"IN\" operator by default if the psycopg2.extensions module is\nimported (i.e., the SQL_IN adapter was moved from extras to extensions.)\n\nFixed some small buglets and build glitches:\n\n- removed double mutex destroy\n- removed all non-constant initializers\n- fixed PyObject_HEAD declarations to avoid memory corruption\n  on 64 bit architectures\n- fixed several Python API calls to work on 64 bit architectures\n- applied compatibility macros from PEP 353\n- now using more than one argument format raise an error instead of\n  a segfault\n\n\nWhat's new in psycopg 2.0.5.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Now it really, really builds on MSVC and older gcc versions.\n\nWhat's new in psycopg 2.0.5\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fixed various buglets such as:\n\n  - segfault when passing an empty string to Binary()\n  - segfault on null queries\n  - segfault and bad keyword naming in .executemany()\n  - OperationalError in connection objects was always None\n\n* Various changes to ZPsycopgDA to make it more zope2.9-ish.\n\n* connect() now accept both integers and strings as port parameter\n\nWhat's new in psycopg 2.0.4\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fixed float conversion bug introduced in 2.0.3.\n\nWhat's new in psycopg 2.0.3\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fixed various buglets and a memory leak (see ChangeLog for details)\n\nWhat's new in psycopg 2.0.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fixed a bug in array typecasting that sometimes made psycopg forget about\n  the last element in the array.\n\n* Fixed some minor buglets in string memory allocations.\n\n* Builds again with compilers different from gcc (#warning about PostgreSQL\n  version is issued only if __GCC__ is defined.)\n\nWhat's new in psycopg 2.0.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* ZPsycopgDA now actually loads.\n\nWhat's new in psycopg 2.0\n-------------------------\n\n* Fixed handle leak on win32.\n\n* If available the new \"safe\" encoding functions of libpq are used.\n\n* django and tinyerp people, please switch to psycopg 2 _without_\n  using a psycopg 1 compatibility layer (this release was anticipated\n  so that you all stop grumbling about psycopg 2 is still in beta.. :)\n\nWhat's new in psycopg 2.0 beta 7\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Ironed out last problems with times and date (should be quite solid now.)\n\n* Fixed problems with some arrays.\n\n* Slightly better ZPsycopgDA (no more double connection objects in the menu\n  and other minor fixes.)\n\n* ProgrammingError exceptions now have three extra attributes: .cursor\n  (it is possible to access the query that caused the exception using\n  error.cursor.query), .pgerror and .pgcode (PostgreSQL original error\n  text and code.)\n\n* The build system uses pg_config when available.\n\n* Documentation in the doc/ directory! (With many kudos to piro.)\n\nWhat's new in psycopg 2.0 beta 6\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Support for named cursors.\n\n* Safer parsing of time intervals.\n\n* Better parsing of times and dates, no more locale problems.\n\n* Should now play well with py2exe and similar tools.\n\n* The \"decimal\" module is now used if available under Python 2.3.\n\nWhat's new in psycopg 2.0 beta 5\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fixed all known bugs.\n\n* The initial isolation level is now read from the server and\n  .set_isolation_level() now takes values defined in psycopg2.extensions.\n\n* .callproc() implemented as a SELECT of the given procedure.\n\n* Better docstrings for a few functions/methods.\n\n* Some time-related functions like psycopg2.TimeFromTicks() now take the\n  local timezone into account. Also a tzinfo object (as per datetime module\n  specifications) can be passed to the psycopg2.Time and psycopg2.Datetime\n  constructors.\n\n* All classes have been renamed to exist in the psycopg2._psycopg module,\n  to fix problems with automatic documentation generators like epydoc.\n\n* NOTIFY is correctly trapped.\n\nWhat's new in psycopg 2.0 beta 4\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* psycopg module is now named psycopg2.\n\n* No more segfaults when a UNICODE query can't be converted to the\n  backend encoding.\n\n* No more segfaults on empty queries.\n\n* psycopg2.connect() now takes an integer for the port keyword parameter.\n\n* \"python setup.py bdist_rpm\" now works.\n\n* Fixed lots of small bugs, see ChangeLog for details.\n\nWhat's new in psycopg 2.0 beta 3\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* ZPsycopgDA now works (except table browsing.)\n\n* psycopg build again on Python 2.2.\n\nWhat's new in psycopg 2.0 beta 2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fixed ZPsycopgDA version check (ZPsycopgDA can now be imported in\n  Zope.)\n\n* psycopg.extras.DictRow works even after a new query on the generating\n  cursor.\n\n* Better setup.py for win32 (should build with MSCV or mingw.)\n\n* Generic fixed and memory leaks plugs.\n\nWhat's new in psycopg 2.0 beta 1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Officially in beta (i.e., no new features will be added.)\n\n* Array support: list objects can be passed as bound variables and are\n  correctly returned for array columns.\n\n* Added the psycopg.psycopg1 compatibility module (if you want instant\n  psycopg 1 compatibility just \"from psycopg import psycopg1 as psycopg\".)\n\n* Complete support for BYTEA columns and buffer objects.\n\n* Added error codes to error messages.\n\n* The AsIs adapter is now exported by default (also Decimal objects are\n  adapted using the AsIs adapter (when str() is called on them they\n  already format themselves using the right precision and scale.)\n\n* The connect() function now takes \"connection_factory\" instead of\n  \"factory\" as keyword argument.\n\n* New setup.py code to build on win32 using mingw and better error\n  messages on missing datetime headers,\n\n* Internal changes that allow much better user-defined type casters.\n\n* A lot of bugfixes (binary, datetime, 64 bit arches, GIL, .executemany())\n\nWhat's new in psycopg 1.99.13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Added missing .executemany() method.\n\n* Optimized type cast from PostgreSQL to Python (psycopg should be even\n  faster than before.)\n\nWhat's new in psycopg 1.99.12\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* .rowcount should be ok and in sync with psycopg 1.\n\n* Implemented the new COPY FROM/COPY TO code when connection to the\n  backend using libpq protocol 3 (this also removes all asprintf calls:\n  build on win32 works again.) A protocol 3-enabled psycopg *can*\n  connect to an old protocol 2 database and will detect it and use the\n  right code.\n\n* getquoted() called for real by the mogrification code.\n\nWhat's new in psycopg 1.99.11\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* 'cursor' argument in .cursor() connection method renamed to\n  'cursor_factory'.\n\n* changed 'tuple_factory' cursor attribute name to 'row_factory'.\n\n* the .cursor attribute is gone and connections and cursors are properly\n  gc-managed.\n\n* fixes to the async core.\n\nWhat's new in psycopg 1.99.10\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* The adapt() function now fully supports the adaptation protocol\n  described in PEP 246. Note that the adapters registry now is indexed\n  by (type, protocol) and not by type alone. Change your adapters\n  accordingly.\n\n* More configuration options moved from setup.py to setup.cfg.\n\n* Fixed two memory leaks: one in cursor deallocation and one in row\n  fetching (.fetchXXX() methods.)\n\nWhat's new in psycopg 1.99.9\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Added simple pooling code (psycopg.pool module).\n\n* Added DECIMAL typecaster to convert postgresql DECIMAL and NUMERIC\n  types (i.e, all types with an OID of NUMERICOID.) Note that the\n  DECIMAL typecaster does not set scale and precision on the created\n  objects but uses Python defaults.\n\n* ZPsycopgDA back in and working using the new pooling code.\n\n* Isn't that enough? :)\n\nWhat's new in psycopg 1.99.8\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* added support for UNICODE queries.\n* added UNICODE typecaster; to activate it just do::\n\n      psycopg.extensions.register_type(psycopg.extensions.UNICODE)\n\n  Note that the UNICODE typecaster override the STRING one, so it is\n  not activated by default.\n\n* cursors now really support the iterator protocol.\n* solved the rounding errors in time conversions.\n* now cursors support .fileno() and .isready() methods, to be used in\n  select() calls.\n* .copy_from() and .copy_in() methods are back in (still using the old\n  protocol, will be updated to use new one in next release.)\n* fixed memory corruption bug reported on win32 platform.\n\nWhat's new in psycopg 1.99.7\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* added support for tuple factories in cursor objects (removed factory\n  argument in favor of a .tuple_factory attribute on the cursor object);\n  see the new module psycopg.extras for a cursor (DictCursor) that\n  return rows as objects that support indexing both by position and\n  column name.\n* added support for tzinfo objects in datetime.timestamp objects: the\n  PostgreSQL type \"timestamp with time zone\" is converted to\n  datetime.timestamp with a FixedOffsetTimezone initialized as necessary.\n\nWhat's new in psycopg 1.99.6\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* sslmode parameter from 1.1.x\n* various datetime conversion improvements.\n* now psycopg should compile without mx or without native datetime\n  (not both, obviously.)\n* included various win32/MSVC fixes (pthread.h changes, winsock2\n  library, include path in setup.py, etc.)\n* ported interval fixes from 1.1.14/1.1.15.\n* the last query executed by a cursor is now available in the\n  .query attribute.\n* conversion of unicode strings to backend encoding now uses a table\n  (that still need to be filled.)\n* cursors now have a .mogrify() method that return the query string\n  instead of executing it.\n* connection objects now have a .dsn read-only attribute that holds the\n  connection string.\n* moved psycopg C module to _psycopg and made psycopg a python module:\n  this allows for a neat separation of DBAPI-2.0 functionality and psycopg\n  extensions; the psycopg namespace will be also used to provide\n  python-only extensions (like the pooling code, some ZPsycopgDA support\n  functions and the like.)\n\nWhat's new in psycopg 1.99.3\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* added support for python 2.3 datetime types (both ways) and made datetime\n  the default set of typecasters when available.\n* added example: dt.py.\n\nWhat's new in psycopg 1.99.3\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* initial working support for unicode bound variables: UTF-8 and latin-1\n  backend encodings are natively supported (and the encoding.py example even\n  works!)\n* added .set_client_encoding() method on the connection object.\n* added examples: encoding.py, binary.py, lastrowid.py.\n\nWhat's new in psycopg 1.99.2\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* better typecasting:\n\n  - DateTimeDelta used for postgresql TIME (merge from 1.1)\n  - BYTEA now is converted to a real buffer object, not to a string\n\n* buffer objects are now adapted into Binary objects automatically.\n* ported scroll method from 1.1 (DBAPI-2.0 extension for cursors)\n* initial support for some DBAPI-2.0 extensions:\n\n  - .rownumber attribute for cursors\n  - .connection attribute for cursors\n  - .next() and .__iter__() methods to have cursors support the iterator\n    protocol\n  - all exception objects are exported to the connection object\n\nWhat's new in psycopg 1.99.1\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* implemented microprotocols to adapt arbitrary types to the interface used by\n  psycopg to bind variables in execute;\n\n* moved qstring, pboolean and mxdatetime to the new adapter layout (binary is\n  still missing; python 2.3 datetime needs to be written).\n\n\nWhat's new in psycopg 1.99.0\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* reorganized the whole source tree;\n\n* async core is in place;\n\n* splitted QuotedString objects from mx stuff;\n\n* dropped autotools and moved to pythonic setup.py (needs work.)\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 2.908203125,
          "content": "psycopg2 - Python-PostgreSQL Database Adapter\n=============================================\n\nPsycopg is the most popular PostgreSQL database adapter for the Python\nprogramming language.  Its main features are the complete implementation of\nthe Python DB API 2.0 specification and the thread safety (several threads can\nshare the same connection).  It was designed for heavily multi-threaded\napplications that create and destroy lots of cursors and make a large number\nof concurrent \"INSERT\"s or \"UPDATE\"s.\n\nPsycopg 2 is mostly implemented in C as a libpq wrapper, resulting in being\nboth efficient and secure.  It features client-side and server-side cursors,\nasynchronous communication and notifications, \"COPY TO/COPY FROM\" support.\nMany Python types are supported out-of-the-box and adapted to matching\nPostgreSQL data types; adaptation can be extended and customized thanks to a\nflexible objects adaptation system.\n\nPsycopg 2 is both Unicode and Python 3 friendly.\n\n.. Note::\n\n    The psycopg2 package is still widely used and actively maintained, but it\n    is not expected to receive new features.\n\n    `Psycopg 3`__ is the evolution of psycopg2 and is where `new features are\n    being developed`__: if you are starting a new project you should probably\n    start from 3!\n\n    .. __: https://pypi.org/project/psycopg/\n    .. __: https://www.psycopg.org/psycopg3/docs/index.html\n\n\nDocumentation\n-------------\n\nDocumentation is included in the ``doc`` directory and is `available online`__.\n\n.. __: https://www.psycopg.org/docs/\n\nFor any other resource (source code repository, bug tracker, mailing list)\nplease check the `project homepage`__.\n\n.. __: https://psycopg.org/\n\n\nInstallation\n------------\n\nBuilding Psycopg requires a few prerequisites (a C compiler, some development\npackages): please check the install_ and the faq_ documents in the ``doc`` dir\nor online for the details.\n\nIf prerequisites are met, you can install psycopg like any other Python\npackage, using ``pip`` to download it from PyPI_::\n\n    $ pip install psycopg2\n\nor using ``setup.py`` if you have downloaded the source package locally::\n\n    $ python setup.py build\n    $ sudo python setup.py install\n\nYou can also obtain a stand-alone package, not requiring a compiler or\nexternal libraries, by installing the `psycopg2-binary`_ package from PyPI::\n\n    $ pip install psycopg2-binary\n\nThe binary package is a practical choice for development and testing but in\nproduction it is advised to use the package built from sources.\n\n.. _PyPI: https://pypi.org/project/psycopg2/\n.. _psycopg2-binary: https://pypi.org/project/psycopg2-binary/\n.. _install: https://www.psycopg.org/docs/install.html#install-from-source\n.. _faq: https://www.psycopg.org/docs/faq.html#faq-compile\n\n:Build status: |gh-actions|\n\n.. |gh-actions| image:: https://github.com/psycopg/psycopg2/actions/workflows/tests.yml/badge.svg\n    :target: https://github.com/psycopg/psycopg2/actions/workflows/tests.yml\n    :alt: Build status\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "psycopg",
          "type": "tree",
          "content": null
        },
        {
          "name": "psycopg2.cproj",
          "type": "blob",
          "size": 9.220703125,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" ToolsVersion=\"3.5\">\n  <PropertyGroup>\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\n    <ProductVersion>9.0.21022</ProductVersion>\n    <SchemaVersion>2.0</SchemaVersion>\n    <ProjectGuid>{CFD80D18-3EE5-49ED-992A-E6D433BC7641}</ProjectGuid>\n    <Compiler>\n      <Compiler ctype=\"GccCompiler\" />\n    </Compiler>\n    <Language>C</Language>\n    <Target>Bin</Target>\n  </PropertyGroup>\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\n    <DebugSymbols>true</DebugSymbols>\n    <OutputPath>.</OutputPath>\n    <DefineSymbols>DEBUG MONODEVELOP</DefineSymbols>\n    <CodeGeneration>\n      <CodeGeneration ctype=\"CCompilationParameters\" />\n    </CodeGeneration>\n    <CompileTarget>Bin</CompileTarget>\n    <CustomCommands>\n      <CustomCommands>\n        <Command type=\"Build\" command=\"/usr/bin/python setup.py build\" workingdir=\"${ProjectDir}\" />\n        <Command type=\"Clean\" command=\"/usr/bin/python setup.py clean -a\" workingdir=\"${ProjectDir}\" />\n      </CustomCommands>\n    </CustomCommands>\n    <OutputName>psycopg2</OutputName>\n  </PropertyGroup>\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\n    <OutputPath>bin\\Release</OutputPath>\n    <DefineSymbols>MONODEVELOP</DefineSymbols>\n    <CodeGeneration>\n      <CodeGeneration ctype=\"CCompilationParameters\" />\n    </CodeGeneration>\n    <OptimizationLevel>3</OptimizationLevel>\n    <OutputName>psycopg2</OutputName>\n    <CompileTarget>Bin</CompileTarget>\n  </PropertyGroup>\n  <ItemGroup>\n    <None Include=\"AUTHORS\" />\n    <None Include=\"ChangeLog\" />\n    <None Include=\"INSTALL\" />\n    <None Include=\"LICENSE\" />\n    <None Include=\"MANIFEST.in\" />\n    <None Include=\"README.rst\" />\n    <None Include=\"setup.cfg\" />\n    <None Include=\"setup.py\" />\n    <None Include=\"doc\\SUCCESS\" />\n    <None Include=\"lib\\errorcodes.py\" />\n    <None Include=\"lib\\extensions.py\" />\n    <None Include=\"lib\\extras.py\" />\n    <None Include=\"lib\\__init__.py\" />\n    <None Include=\"lib\\pool.py\" />\n    <None Include=\"lib\\tz.py\" />\n    <None Include=\"psycopg\\adapter_asis.h\" />\n    <None Include=\"psycopg\\adapter_binary.h\" />\n    <None Include=\"psycopg\\adapter_datetime.h\" />\n    <None Include=\"psycopg\\adapter_list.h\" />\n    <None Include=\"psycopg\\adapter_pboolean.h\" />\n    <None Include=\"psycopg\\adapter_qstring.h\" />\n    <None Include=\"psycopg\\config.h\" />\n    <None Include=\"psycopg\\connection.h\" />\n    <None Include=\"psycopg\\cursor.h\" />\n    <None Include=\"psycopg\\libpq_support.h\" />\n    <None Include=\"psycopg\\microprotocols.h\" />\n    <None Include=\"psycopg\\microprotocols_proto.h\" />\n    <None Include=\"psycopg\\pgtypes.h\" />\n    <None Include=\"psycopg\\pqpath.h\" />\n    <None Include=\"psycopg\\psycopg.h\" />\n    <None Include=\"psycopg\\python.h\" />\n    <None Include=\"psycopg\\replication_connection.h\" />\n    <None Include=\"psycopg\\replication_cursor.h\" />\n    <None Include=\"psycopg\\replication_message.h\" />\n    <None Include=\"psycopg\\typecast.h\" />\n    <None Include=\"psycopg\\typecast_binary.h\" />\n    <None Include=\"psycopg\\win32_support.h\" />\n    <None Include=\"ZPsycopgDA\\dtml\\add.dtml\" />\n    <None Include=\"ZPsycopgDA\\dtml\\browse.dtml\" />\n    <None Include=\"ZPsycopgDA\\dtml\\edit.dtml\" />\n    <None Include=\"ZPsycopgDA\\dtml\\table_info.dtml\" />\n    <None Include=\"ZPsycopgDA\\icons\\bin.gif\" />\n    <None Include=\"ZPsycopgDA\\icons\\date.gif\" />\n    <None Include=\"ZPsycopgDA\\icons\\datetime.gif\" />\n    <None Include=\"ZPsycopgDA\\icons\\field.gif\" />\n    <None Include=\"ZPsycopgDA\\icons\\float.gif\" />\n    <None Include=\"ZPsycopgDA\\icons\\int.gif\" />\n    <None Include=\"ZPsycopgDA\\icons\\stable.gif\" />\n    <None Include=\"ZPsycopgDA\\icons\\table.gif\" />\n    <None Include=\"ZPsycopgDA\\icons\\text.gif\" />\n    <None Include=\"ZPsycopgDA\\icons\\time.gif\" />\n    <None Include=\"ZPsycopgDA\\icons\\view.gif\" />\n    <None Include=\"ZPsycopgDA\\icons\\what.gif\" />\n    <None Include=\"ZPsycopgDA\\DA.py\" />\n    <None Include=\"ZPsycopgDA\\db.py\" />\n    <None Include=\"ZPsycopgDA\\__init__.py\" />\n    <None Include=\"ZPsycopgDA\\pool.py\" />\n    <None Include=\"tests\\dbapi20.py\" />\n    <None Include=\"tests\\test_extras_dictcursor.py\" />\n    <None Include=\"tests\\__init__.py\" />\n    <None Include=\"tests\\test_psycopg2_dbapi20.py\" />\n    <None Include=\"tests\\test_transaction.py\" />\n    <None Include=\"tests\\test_types_basic.py\" />\n    <None Include=\"tests\\test_bugX000.py\" />\n    <None Include=\"tests\\test_types_extras.py\" />\n    <None Include=\"tests\\test_connection.py\" />\n    <None Include=\"tests\\test_replication.py\" />\n    <None Include=\"tests\\test_dates.py\" />\n    <None Include=\"tests\\test_lobject.py\" />\n    <None Include=\"tests\\test_quote.py\" />\n    <None Include=\"psycopg\\lobject.h\" />\n    <None Include=\"psycopg\\adapter_pfloat.h\" />\n    <None Include=\"psycopg2da\\adapter.py\" />\n    <None Include=\"psycopg2da\\configure.zcml\" />\n    <None Include=\"psycopg2da\\DEPENDENCIES.cfg\" />\n    <None Include=\"psycopg2da\\__init__.py\" />\n    <None Include=\"psycopg2da\\PACKAGE.cfg\" />\n    <None Include=\"psycopg2da\\psycopg2da-configure.zcml\" />\n    <None Include=\"psycopg2da\\PUBLICATION.cfg\" />\n    <None Include=\"psycopg2da\\README.txt\" />\n    <None Include=\"psycopg2da\\tests.py\" />\n    <None Include=\"psycopg\\adapter_pdecimal.h\" />\n    <None Include=\"doc\\ChangeLog-1.x\" />\n    <None Include=\"doc\\COPYING\" />\n    <None Include=\"doc\\COPYING.LESSER\" />\n    <None Include=\"doc\\Makefile\" />\n    <None Include=\"doc\\pep-0249.txt\" />\n    <None Include=\"doc\\README\" />\n    <None Include=\"doc\\src\\advanced.rst\" />\n    <None Include=\"doc\\src\\conf.py\" />\n    <None Include=\"doc\\src\\connection.rst\" />\n    <None Include=\"doc\\src\\cursor.rst\" />\n    <None Include=\"doc\\src\\errorcodes.rst\" />\n    <None Include=\"doc\\src\\extensions.rst\" />\n    <None Include=\"doc\\src\\extras.rst\" />\n    <None Include=\"doc\\src\\index.rst\" />\n    <None Include=\"doc\\src\\Makefile\" />\n    <None Include=\"doc\\src\\module.rst\" />\n    <None Include=\"doc\\src\\tz.rst\" />\n    <None Include=\"doc\\src\\usage.rst\" />\n    <None Include=\"doc\\src\\tools\\lib\\dbapi_extension.py\" />\n    <None Include=\"doc\\src\\tools\\lib\\sql_role.py\" />\n    <None Include=\"doc\\src\\_static\\psycopg.css\" />\n    <None Include=\"doc\\src\\faq.rst\" />\n    <None Include=\"tests\\test_async.py\" />\n    <None Include=\"tests\\test_copy.py\" />\n    <None Include=\"tests\\test_bug_gc.py\" />\n    <None Include=\"tests\\test_green.py\" />\n    <None Include=\"tests\\test_notify.py\" />\n    <None Include=\"scripts\\make_errorcodes.py\" />\n    <None Include=\"psycopg\\green.h\" />\n    <None Include=\"doc\\src\\pool.rst\" />\n    <None Include=\"psycopg\\notify.h\" />\n    <None Include=\"psycopg\\xid.h\" />\n    <None Include=\"tests\\dbapi20_tpc.py\" />\n    <None Include=\"tests\\test_cursor.py\" />\n    <None Include=\"NEWS\" />\n    <None Include=\"tests\\test_cancel.py\" />\n    <None Include=\"tests\\testconfig.py\" />\n    <None Include=\"tests\\testutils.py\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Include=\"psycopg\\adapter_asis.c\" />\n    <Compile Include=\"psycopg\\adapter_binary.c\" />\n    <Compile Include=\"psycopg\\adapter_datetime.c\" />\n    <Compile Include=\"psycopg\\adapter_list.c\" />\n    <Compile Include=\"psycopg\\adapter_pboolean.c\" />\n    <Compile Include=\"psycopg\\adapter_qstring.c\" />\n    <Compile Include=\"psycopg\\connection_int.c\" />\n    <Compile Include=\"psycopg\\connection_type.c\" />\n    <Compile Include=\"psycopg\\cursor_int.c\" />\n    <Compile Include=\"psycopg\\cursor_type.c\" />\n    <Compile Include=\"psycopg\\libpq_support.c\" />\n    <Compile Include=\"psycopg\\microprotocols.c\" />\n    <Compile Include=\"psycopg\\microprotocols_proto.c\" />\n    <Compile Include=\"psycopg\\pqpath.c\" />\n    <Compile Include=\"psycopg\\psycopgmodule.c\" />\n    <Compile Include=\"psycopg\\replication_connection_type.c\" />\n    <Compile Include=\"psycopg\\replication_cursor_type.c\" />\n    <Compile Include=\"psycopg\\replication_message_type.c\" />\n    <Compile Include=\"psycopg\\typecast.c\" />\n    <Compile Include=\"psycopg\\typecast_array.c\" />\n    <Compile Include=\"psycopg\\typecast_basic.c\" />\n    <Compile Include=\"psycopg\\typecast_binary.c\" />\n    <Compile Include=\"psycopg\\typecast_builtins.c\" />\n    <Compile Include=\"psycopg\\typecast_datetime.c\" />\n    <Compile Include=\"psycopg\\utils.c\" />\n    <Compile Include=\"psycopg\\win32_support.c\" />\n    <Compile Include=\"psycopg\\lobject_int.c\" />\n    <Compile Include=\"psycopg\\lobject_type.c\" />\n    <Compile Include=\"psycopg\\adapter_pfloat.c\" />\n    <Compile Include=\"psycopg\\adapter_pdecimal.c\" />\n    <Compile Include=\"psycopg\\green.c\" />\n    <Compile Include=\"psycopg\\notify_type.c\" />\n    <Compile Include=\"psycopg\\xid_type.c\" />\n    <Compile Include=\"psycopg\\bytes_format.c\" />\n  </ItemGroup>\n  <ProjectExtensions>\n    <MonoDevelop>\n      <Properties>\n        <Policies>\n          <ChangeLogPolicy UpdateMode=\"Nearest\" VcsIntegration=\"None\" inheritsSet=\"Mono\">\n            <MessageStyle FileSeparator=\", \" LineAlign=\"0\" />\n          </ChangeLogPolicy>\n          <TextStylePolicy FileWidth=\"144\" RemoveTrailingWhitespace=\"True\" inheritsSet=\"VisualStudio\" inheritsScope=\"text/plain\" />\n          <TextStylePolicy NoTabsAfterNonTabs=\"True\" RemoveTrailingWhitespace=\"True\" inheritsSet=\"Mono\" inheritsScope=\"text/plain\" scope=\"text/x-changelog\" />\n        </Policies>\n      </Properties>\n    </MonoDevelop>\n  </ProjectExtensions>\n</Project>\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.666015625,
          "content": "[build_ext]\n# PSYCOPG_DEBUG can be added to enable verbose debug information\ndefine=PSYCOPG_DEBUG\n\n# \"pg_config\" is required to locate PostgreSQL headers and libraries needed to\n# build psycopg2. If pg_config is not in the path or is installed under a\n# different name set the following option to the pg_config full path.\npg_config=\n\n# For Windows only:\n# Set to 1 if the PostgreSQL library was built with OpenSSL.\n# Required to link in OpenSSL libraries and dependencies.\nhave_ssl=0\n\n# Set to 1 to statically link against the postgresql client library.\nstatic_libpq=0\n\n# Add here eventual extra libraries required to link the module.\nlibraries=\n\n[metadata]\nlicense_files = LICENSE\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 19.4453125,
          "content": "# setup.py - distutils packaging\n#\n# Copyright (C) 2003-2019 Federico Di Gregorio  <fog@debian.org>\n# Copyright (C) 2020-2021 The Psycopg Team\n#\n# psycopg2 is free software: you can redistribute it and/or modify it\n# under the terms of the GNU Lesser General Public License as published\n# by the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# psycopg2 is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n# License for more details.\n\n\"\"\"Python-PostgreSQL Database Adapter\n\npsycopg2 is a PostgreSQL database adapter for the Python programming\nlanguage.  psycopg2 was written with the aim of being very small and fast,\nand stable as a rock.\n\npsycopg2 is different from the other database adapter because it was\ndesigned for heavily multi-threaded applications that create and destroy\nlots of cursors and make a conspicuous number of concurrent INSERTs or\nUPDATEs. psycopg2 also provide full asynchronous operations and support\nfor coroutine libraries.\n\"\"\"\n\n\nimport os\nimport sys\nimport subprocess\nfrom setuptools import setup, Extension\nfrom distutils.command.build_ext import build_ext\nfrom distutils.ccompiler import get_default_compiler\nfrom distutils.errors import CompileError\n\nimport configparser\n\n# Take a look at https://www.python.org/dev/peps/pep-0440/\n# for a consistent versioning pattern.\n\nPSYCOPG_VERSION = '2.9.10'\n\n\n# note: if you are changing the list of supported Python version please fix\n# the docs in install.rst and the /features/ page on the website.\nclassifiers = \"\"\"\\\nDevelopment Status :: 5 - Production/Stable\nIntended Audience :: Developers\nLicense :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)\nProgramming Language :: Python\nProgramming Language :: Python :: 3\nProgramming Language :: Python :: 3.8\nProgramming Language :: Python :: 3.9\nProgramming Language :: Python :: 3.10\nProgramming Language :: Python :: 3.11\nProgramming Language :: Python :: 3.12\nProgramming Language :: Python :: 3.13\nProgramming Language :: Python :: 3 :: Only\nProgramming Language :: Python :: Implementation :: CPython\nProgramming Language :: C\nProgramming Language :: SQL\nTopic :: Database\nTopic :: Database :: Front-Ends\nTopic :: Software Development\nTopic :: Software Development :: Libraries :: Python Modules\nOperating System :: Microsoft :: Windows\nOperating System :: Unix\n\"\"\"\n\nversion_flags = ['dt', 'dec']\n\nPLATFORM_IS_WINDOWS = sys.platform.lower().startswith('win')\n\n\nclass PostgresConfig:\n    def __init__(self, build_ext):\n        self.build_ext = build_ext\n        self.pg_config_exe = self.build_ext.pg_config\n        if not self.pg_config_exe:\n            self.pg_config_exe = self.autodetect_pg_config_path()\n        if self.pg_config_exe is None:\n            sys.stderr.write(\"\"\"\nError: pg_config executable not found.\n\npg_config is required to build psycopg2 from source.  Please add the directory\ncontaining pg_config to the $PATH or specify the full executable path with the\noption:\n\n    python setup.py build_ext --pg-config /path/to/pg_config build ...\n\nor with the pg_config option in 'setup.cfg'.\n\nIf you prefer to avoid building psycopg2 from source, please install the PyPI\n'psycopg2-binary' package instead.\n\nFor further information please check the 'doc/src/install.rst' file (also at\n<https://www.psycopg.org/docs/install.html>).\n\n\"\"\")\n            sys.exit(1)\n\n    def query(self, attr_name, *, empty_ok=False):\n        \"\"\"Spawn the pg_config executable, querying for the given config\n        name, and return the printed value, sanitized. \"\"\"\n        try:\n            pg_config_process = subprocess.run(\n                [self.pg_config_exe, \"--\" + attr_name],\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE)\n        except OSError:\n            raise Warning(\n                f\"Unable to find 'pg_config' file in '{self.pg_config_exe}'\")\n        if pg_config_process.returncode:\n            err = pg_config_process.stderr.decode(errors='backslashreplace')\n            raise Warning(f\"pg_config --{attr_name} failed: {err}\")\n        result = pg_config_process.stdout.decode().strip()\n        if not result and not empty_ok:\n            raise Warning(f\"pg_config --{attr_name} is empty\")\n        return result\n\n    def find_on_path(self, exename, path_directories=None):\n        if not path_directories:\n            path_directories = os.environ['PATH'].split(os.pathsep)\n        for dir_name in path_directories:\n            fullpath = os.path.join(dir_name, exename)\n            if os.path.isfile(fullpath):\n                return fullpath\n        return None\n\n    def autodetect_pg_config_path(self):\n        \"\"\"Find and return the path to the pg_config executable.\"\"\"\n        if PLATFORM_IS_WINDOWS:\n            return self.autodetect_pg_config_path_windows()\n        else:\n            return self.find_on_path('pg_config')\n\n    def autodetect_pg_config_path_windows(self):\n        \"\"\"Attempt several different ways of finding the pg_config\n        executable on Windows, and return its full path, if found.\"\"\"\n\n        # This code only runs if they have not specified a pg_config option\n        # in the config file or via the commandline.\n\n        # First, check for pg_config.exe on the PATH, and use that if found.\n        pg_config_exe = self.find_on_path('pg_config.exe')\n        if pg_config_exe:\n            return pg_config_exe\n\n        # Now, try looking in the Windows Registry to find a PostgreSQL\n        # installation, and infer the path from that.\n        pg_config_exe = self._get_pg_config_from_registry()\n        if pg_config_exe:\n            return pg_config_exe\n\n        return None\n\n    def _get_pg_config_from_registry(self):\n        import winreg\n\n        reg = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)\n        try:\n            pg_inst_list_key = winreg.OpenKey(reg,\n                'SOFTWARE\\\\PostgreSQL\\\\Installations')\n        except OSError:\n            # No PostgreSQL installation, as best as we can tell.\n            return None\n\n        try:\n            # Determine the name of the first subkey, if any:\n            try:\n                first_sub_key_name = winreg.EnumKey(pg_inst_list_key, 0)\n            except OSError:\n                return None\n\n            pg_first_inst_key = winreg.OpenKey(reg,\n                'SOFTWARE\\\\PostgreSQL\\\\Installations\\\\' + first_sub_key_name)\n            try:\n                pg_inst_base_dir = winreg.QueryValueEx(\n                    pg_first_inst_key, 'Base Directory')[0]\n            finally:\n                winreg.CloseKey(pg_first_inst_key)\n\n        finally:\n            winreg.CloseKey(pg_inst_list_key)\n\n        pg_config_path = os.path.join(\n            pg_inst_base_dir, 'bin', 'pg_config.exe')\n        if not os.path.exists(pg_config_path):\n            return None\n\n        return pg_config_path\n\n\nclass psycopg_build_ext(build_ext):\n    \"\"\"Conditionally complement the setup.cfg options file.\n\n    This class configures the include_dirs, library_dirs, libraries\n    options as required by the system. Most of the configuration happens\n    in finalize_options() method.\n\n    If you want to set up the build step for a peculiar platform, add a\n    method finalize_PLAT(), where PLAT matches your sys.platform.\n    \"\"\"\n    user_options = build_ext.user_options[:]\n    user_options.extend([\n        ('use-pydatetime', None,\n         \"Use Python datatime objects for date and time representation.\"),\n        ('pg-config=', None,\n         \"The name of the pg_config binary and/or full path to find it\"),\n        ('have-ssl', None,\n         \"Compile with OpenSSL built PostgreSQL libraries (Windows only).\"),\n        ('static-libpq', None,\n         \"Statically link the PostgreSQL client library\"),\n    ])\n\n    boolean_options = build_ext.boolean_options[:]\n    boolean_options.extend(('use-pydatetime', 'have-ssl', 'static-libpq'))\n\n    def __init__(self, *args, **kwargs):\n        build_ext.__init__(self, *args, **kwargs)\n\n    def initialize_options(self):\n        build_ext.initialize_options(self)\n        self.pgdir = None\n        self.have_ssl = have_ssl\n        self.static_libpq = static_libpq\n        self.pg_config = None\n\n    def compiler_is_msvc(self):\n        return self.get_compiler_name().lower().startswith('msvc')\n\n    def compiler_is_mingw(self):\n        return self.get_compiler_name().lower().startswith('mingw')\n\n    def get_compiler_name(self):\n        \"\"\"Return the name of the C compiler used to compile extensions.\n\n        If a compiler was not explicitly set (on the command line, for\n        example), fall back on the default compiler.\n        \"\"\"\n        if self.compiler:\n            # distutils doesn't keep the type of self.compiler uniform; we\n            # compensate:\n            if isinstance(self.compiler, str):\n                name = self.compiler\n            else:\n                name = self.compiler.compiler_type\n        else:\n            name = get_default_compiler()\n        return name\n\n    def get_export_symbols(self, extension):\n        # Fix MSVC seeing two of the same export symbols.\n        if self.compiler_is_msvc():\n            return []\n        else:\n            return build_ext.get_export_symbols(self, extension)\n\n    built_files = 0\n\n    def build_extension(self, extension):\n        # Count files compiled to print the binary blurb only if the first fails\n        compile_orig = getattr(self.compiler, '_compile', None)\n        if compile_orig is not None:\n            def _compile(*args, **kwargs):\n                rv = compile_orig(*args, **kwargs)\n                psycopg_build_ext.built_files += 1\n                return rv\n\n            self.compiler._compile = _compile\n\n        try:\n            build_ext.build_extension(self, extension)\n            psycopg_build_ext.built_files += 1\n        except CompileError:\n            if self.built_files == 0:\n                sys.stderr.write(\"\"\"\nIt appears you are missing some prerequisite to build the package from source.\n\nYou may install a binary package by installing 'psycopg2-binary' from PyPI.\nIf you want to install psycopg2 from source, please install the packages\nrequired for the build and try again.\n\nFor further information please check the 'doc/src/install.rst' file (also at\n<https://www.psycopg.org/docs/install.html>).\n\n\"\"\")\n            raise\n\n    def finalize_win32(self):\n        \"\"\"Finalize build system configuration on win32 platform.\"\"\"\n\n        # Add compiler-specific arguments:\n        extra_compiler_args = []\n\n        if self.compiler_is_mingw():\n            # Default MinGW compilation of Python extensions on Windows uses\n            # only -O:\n            extra_compiler_args.append('-O3')\n\n            # GCC-compiled Python on non-Windows platforms is built with strict\n            # aliasing disabled, but that must be done explicitly on Windows to\n            # avoid large numbers of warnings for perfectly idiomatic Python C\n            # API code.\n            extra_compiler_args.append('-fno-strict-aliasing')\n\n        for extension in ext:  # ext is a global list of Extension objects\n            extension.extra_compile_args.extend(extra_compiler_args)\n        # End of add-compiler-specific arguments section.\n\n        self.libraries.append(\"ws2_32\")\n        self.libraries.append(\"advapi32\")\n        if self.compiler_is_msvc():\n            # MSVC requires an explicit \"libpq\"\n            if \"pq\" in self.libraries:\n                self.libraries.remove(\"pq\")\n            self.libraries.append(\"secur32\")\n            self.libraries.append(\"libpq\")\n            self.libraries.append(\"shfolder\")\n            for path in self.library_dirs:\n                if os.path.isfile(os.path.join(path, \"ms\", \"libpq.lib\")):\n                    self.library_dirs.append(os.path.join(path, \"ms\"))\n                    break\n            if self.have_ssl:\n                self.libraries.append(\"libcrypto\")\n                self.libraries.append(\"libssl\")\n                self.libraries.append(\"crypt32\")\n                self.libraries.append(\"user32\")\n                self.libraries.append(\"gdi32\")\n\n    def finalize_darwin(self):\n        \"\"\"Finalize build system configuration on darwin platform.\"\"\"\n        self.libraries.append('ssl')\n        self.libraries.append('crypto')\n\n    def finalize_linux(self):\n        \"\"\"Finalize build system configuration on GNU/Linux platform.\"\"\"\n        # tell piro that GCC is fine and dandy, but not so MS compilers\n        for extension in self.extensions:\n            extension.extra_compile_args.append(\n                '-Wdeclaration-after-statement')\n\n    finalize_linux2 = finalize_linux\n    finalize_linux3 = finalize_linux\n\n    def finalize_options(self):\n        \"\"\"Complete the build system configuration.\"\"\"\n        # An empty option in the setup.cfg causes self.libraries to include\n        # an empty string in the list of libraries\n        if self.libraries is not None and not self.libraries.strip():\n            self.libraries = None\n\n        build_ext.finalize_options(self)\n\n        pg_config_helper = PostgresConfig(self)\n\n        self.include_dirs.append(\".\")\n        if self.static_libpq:\n            if not getattr(self, 'link_objects', None):\n                self.link_objects = []\n            self.link_objects.append(\n                os.path.join(pg_config_helper.query(\"libdir\"), \"libpq.a\"))\n        else:\n            self.libraries.append(\"pq\")\n\n        try:\n            self.library_dirs.append(pg_config_helper.query(\"libdir\"))\n            self.include_dirs.append(pg_config_helper.query(\"includedir\"))\n            self.include_dirs.append(pg_config_helper.query(\"includedir-server\"))\n\n            # if present, add includedirs from cppflags, libdirs from ldflags\n            tokens = pg_config_helper.query(\"ldflags\", empty_ok=True).split()\n            for token in tokens:\n                if token.startswith(\"-L\"):\n                    self.library_dirs.append(token[2:])\n\n            tokens = pg_config_helper.query(\"cppflags\", empty_ok=True).split()\n            for token in tokens:\n                if token.startswith(\"-I\"):\n                    self.include_dirs.append(token[2:])\n\n            # enable lo64 if Python 64 bits\n            if is_py_64():\n                define_macros.append((\"HAVE_LO64\", \"1\"))\n\n                # Inject the flag in the version string already packed up\n                # because we didn't know the version before.\n                # With distutils everything is complicated.\n                for i, t in enumerate(define_macros):\n                    if t[0] == 'PSYCOPG_VERSION':\n                        n = t[1].find(')')\n                        if n > 0:\n                            define_macros[i] = (\n                                t[0], t[1][:n] + ' lo64' + t[1][n:])\n\n        except Warning:\n            w = sys.exc_info()[1]  # work around py 2/3 different syntax\n            sys.stderr.write(f\"Error: {w}\\n\")\n            sys.exit(1)\n\n        if hasattr(self, \"finalize_\" + sys.platform):\n            getattr(self, \"finalize_\" + sys.platform)()\n\n\ndef is_py_64():\n    # sys.maxint not available since Py 3.1;\n    # sys.maxsize not available before Py 2.6;\n    # this is portable at least between Py 2.4 and 3.4.\n    import struct\n    return struct.calcsize(\"P\") > 4\n\n\n# let's start with macro definitions (the ones not already in setup.cfg)\ndefine_macros = []\ninclude_dirs = []\n\n# gather information to build the extension module\next = []\ndata_files = []\n\n# sources\n\nsources = [\n    'psycopgmodule.c',\n    'green.c', 'pqpath.c', 'utils.c', 'bytes_format.c',\n    'libpq_support.c', 'win32_support.c', 'solaris_support.c', 'aix_support.c',\n\n    'connection_int.c', 'connection_type.c',\n    'cursor_int.c', 'cursor_type.c', 'column_type.c',\n    'replication_connection_type.c',\n    'replication_cursor_type.c',\n    'replication_message_type.c',\n    'diagnostics_type.c', 'error_type.c', 'conninfo_type.c',\n    'lobject_int.c', 'lobject_type.c',\n    'notify_type.c', 'xid_type.c',\n\n    'adapter_asis.c', 'adapter_binary.c', 'adapter_datetime.c',\n    'adapter_list.c', 'adapter_pboolean.c', 'adapter_pdecimal.c',\n    'adapter_pint.c', 'adapter_pfloat.c', 'adapter_qstring.c',\n    'microprotocols.c', 'microprotocols_proto.c',\n    'typecast.c',\n]\n\ndepends = [\n    # headers\n    'config.h', 'pgtypes.h', 'psycopg.h', 'python.h', 'connection.h',\n    'cursor.h', 'diagnostics.h', 'error.h', 'green.h', 'lobject.h',\n    'replication_connection.h',\n    'replication_cursor.h',\n    'replication_message.h',\n    'notify.h', 'pqpath.h', 'xid.h', 'column.h', 'conninfo.h',\n    'libpq_support.h', 'win32_support.h', 'utils.h',\n\n    'adapter_asis.h', 'adapter_binary.h', 'adapter_datetime.h',\n    'adapter_list.h', 'adapter_pboolean.h', 'adapter_pdecimal.h',\n    'adapter_pint.h', 'adapter_pfloat.h', 'adapter_qstring.h',\n    'microprotocols.h', 'microprotocols_proto.h',\n    'typecast.h', 'typecast_binary.h', 'sqlstate_errors.h',\n\n    # included sources\n    'typecast_array.c', 'typecast_basic.c', 'typecast_binary.c',\n    'typecast_builtins.c', 'typecast_datetime.c',\n]\n\nparser = configparser.ConfigParser()\nparser.read('setup.cfg')\n\n# generate a nice version string to avoid confusion when users report bugs\nversion_flags.append('pq3')     # no more a choice\nversion_flags.append('ext')     # no more a choice\n\nif version_flags:\n    PSYCOPG_VERSION_EX = PSYCOPG_VERSION + f\" ({' '.join(version_flags)})\"\nelse:\n    PSYCOPG_VERSION_EX = PSYCOPG_VERSION\n\ndefine_macros.append(('PSYCOPG_VERSION', PSYCOPG_VERSION_EX))\n\nif parser.has_option('build_ext', 'have_ssl'):\n    have_ssl = parser.getboolean('build_ext', 'have_ssl')\nelse:\n    have_ssl = False\n\nif parser.has_option('build_ext', 'static_libpq'):\n    static_libpq = parser.getboolean('build_ext', 'static_libpq')\nelse:\n    static_libpq = False\n\n# And now... explicitly add the defines from the .cfg files.\n# Looks like setuptools or some other cog doesn't add them to the command line\n# when called e.g. with \"pip -e git+url'. This results in declarations\n# duplicate on the commandline, which I hope is not a problem.\nfor define in parser.get('build_ext', 'define').split(','):\n    if define:\n        define_macros.append((define, '1'))\n\n# build the extension\n\nsources = [os.path.join('psycopg', x) for x in sources]\ndepends = [os.path.join('psycopg', x) for x in depends]\n\next.append(Extension(\"psycopg2._psycopg\", sources,\n                     define_macros=define_macros,\n                     include_dirs=include_dirs,\n                     depends=depends,\n                     undef_macros=[]))\n\ntry:\n    f = open(\"README.rst\")\n    readme = f.read()\n    f.close()\nexcept Exception:\n    print(\"failed to read readme: ignoring...\")\n    readme = __doc__\n\nsetup(name=\"psycopg2\",\n      version=PSYCOPG_VERSION,\n      author=\"Federico Di Gregorio\",\n      author_email=\"fog@initd.org\",\n      maintainer=\"Daniele Varrazzo\",\n      maintainer_email=\"daniele.varrazzo@gmail.com\",\n      url=\"https://psycopg.org/\",\n      license=\"LGPL with exceptions\",\n      platforms=[\"any\"],\n      python_requires='>=3.8',\n      description=readme.split(\"\\n\")[0],\n      long_description=\"\\n\".join(readme.split(\"\\n\")[2:]).lstrip(),\n      classifiers=[x for x in classifiers.split(\"\\n\") if x],\n      data_files=data_files,\n      package_dir={'psycopg2': 'lib'},\n      packages=['psycopg2'],\n      cmdclass={'build_ext': psycopg_build_ext},\n      ext_modules=ext,\n      project_urls={\n          'Homepage': 'https://psycopg.org/',\n          'Changes': 'https://www.psycopg.org/docs/news.html',\n          'Documentation': 'https://www.psycopg.org/docs/',\n          'Code': 'https://github.com/psycopg/psycopg2',\n          'Issue Tracker': 'https://github.com/psycopg/psycopg2/issues',\n          'Download': 'https://pypi.org/project/psycopg2/',\n      })\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.25390625,
          "content": "[tox]\nenvlist = {3.8,3.9,3.10,3.11,3.12,3.13}\n\n[testenv]\ncommands = make check\nwhitelist_externals = make\npassenv = PG* PSYCOPG2_TEST*\nbasepython = python{envname}\n\n[flake8]\nmax-line-length = 85\nignore = E128, W503, E741\nexclude = build, doc, tests/dbapi20.py\n"
        }
      ]
    }
  ]
}