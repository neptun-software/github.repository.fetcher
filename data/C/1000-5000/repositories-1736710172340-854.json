{
  "metadata": {
    "timestamp": 1736710172340,
    "page": 854,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vgmstream/vgmstream",
      "stars": 1689,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2509765625,
          "content": "# don't set for now (too many fixes at once)\r\n#* text=auto\r\n#*.c text=auto\r\n#*.h text=auto\r\n#* -text\r\n\r\n*.cpp text eol=lf\r\n*.cc text eol=lf\r\n*.h text eol=lf\r\n\r\n*.sh text eol=lf\r\n*.bat text eol=crlf\r\n*.vcxproj text eol=crlf\r\n*.vcxproj.filters text eol=crlf\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.802734375,
          "content": ".*\n!/.gitignore\n!.gitattributes\n!.github\n*.user\n*.o\n*.a\n\n# gcc (-MMD -save-temps)\n*.d\n*.i\n*.s\n\n# VS stuff\nipch\n.vs\n*.opensdf\n*.pdb\n*.sdf\n*.suo\n*.v11.suo\n*.v12.suo\n*.vspscc\n*.VC.db\n*.VC.VC.opendb\n\n/build-msvc\n**/Debug\n**/Release\n**/Debug FB2K\n**/Release FB2K\n/ext_libs/**/*.exp\n/ext_libs/**/*.lib\n/cli/*.exe\n/winamp/*.dll\n/xmplay/*.dll\n\n/msvc-build.config.ps1\n/msvc-build.log\n# for test batchs, note that already tracked files are never ignored\n/msvc-build-*.bat\n\n# vscode\n.vscode\n\n# build\n/version_auto.h\n/dependencies\n/bin\n/tmp\n/**/vgmstream-win.zip\n/**/foo_input_vgmstream.fb2k-component\n\n# cmake stuff\n/build\n/embuild\n/cmake-build*\nCMakeCache.txt\nCMakeFiles\n/lib\n/cli/vgmstream_cli\n/cli/vgmstream123\n/audacious/vgmstream.so\n/audacious/Makefile\ncmake_install.cmake\n\n# doc stuff\nchangelog.txt\nformats-info.md\n__pycache__\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.01171875,
          "content": "cmake_minimum_required(VERSION 3.6)\nproject(vgmstream NONE)\n\nif(CMAKE_SYSTEM_NAME MATCHES Darwin)\n    if ( (NOT DEFINED CMAKE_C_COMPILER) AND (NOT DEFINED ENV{CC}) AND (EXISTS /usr/bin/cc))\n        set(CMAKE_C_COMPILER /usr/bin/cc)\n    endif()\n    if ( (NOT DEFINED CMAKE_CXX_COMPILER) AND (NOT DEFINED ENV{CXX}) AND (EXISTS /usr/bin/c++))\n        set(CMAKE_CXX_COMPILER /usr/bin/c++)\n    endif()\nendif()\n\nenable_language(C)\nenable_language(CXX)\n\n# TODO defautl out-of-source-builds not working properly?\n# (like \"cmake ..\" from ./build subdir creates makefiles on ./, unless using \"cmake -S ..\")\nget_directory_property(hasParent PARENT_DIRECTORY)\nif(hasParent)\n  set(VGM_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR} PARENT_SCOPE)\n  set(VGM_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR} PARENT_SCOPE)\nendif()\nset(VGM_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})\nset(VGM_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})\nset(CMAKE_MODULE_PATH ${VGM_SOURCE_DIR}/cmake;${CMAKE_MODULE_PATH})\ninclude(vgmstream)\n\n# Defaults for Windows, otherwise may be Program Files/vgmstream\nif(WIN32)\n  IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n    SET(CMAKE_INSTALL_PREFIX ${VGM_SOURCE_DIR} CACHE PATH \"...\" FORCE)\n  ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\nendif()\n\nfunction(set_mpeg onoff useForce)\n  if(useForce)\n    set(USE_FORCE_ FORCE)\n  endif()\n  set(USE_MPEG ${onoff} CACHE BOOL \"Use libmpg123 for support of MPEG (MP1/MP2/MP3)\" ${USE_FORCE_})\nendfunction()\n\nfunction(set_vorbis onoff useForce)\n  if(useForce)\n    set(USE_FORCE_ FORCE)\n  endif()\n  set(USE_VORBIS ${onoff} CACHE BOOL \"Use libvorbis for support of Vorbis\" ${USE_FORCE_})\nendfunction()\n\nfunction(set_ffmpeg onoff useForce)\n  if(useForce)\n    set(USE_FORCE_ FORCE)\n  endif()\n  set(USE_FFMPEG ${onoff} CACHE BOOL \"Use FFmpeg for support of many codecs\" ${USE_FORCE_})\nendfunction()\n\n# Options\nset_mpeg(ON FALSE)\nset_vorbis(ON FALSE)\nset_ffmpeg(ON FALSE)\n\noption(USE_G7221 \"Use G7221 for support of ITU-T G.722.1 annex C\" ON)\noption(USE_G719 \"Use libg719_decode for support ITU-T G.719\" ON)\noption(USE_ATRAC9 \"Use LibAtrac9 for support of ATRAC9\" ON)\noption(USE_CELT \"Use libcelt for support of FSB CELT versions 0.6.1 and 0.11.0\" ON)\noption(USE_SPEEX \"Use libspeex for support of SPEEX\" ON)\n\nif(NOT WIN32)\n\tset(MPEG_PATH CACHE PATH \"Path to mpg123\")\n\tset(OGG_PATH CACHE PATH \"Path to Ogg\")\n\tset(VORBIS_PATH CACHE PATH \"Path to Vorbis\")\n\tset(FFMPEG_PATH CACHE PATH \"Path to FFmpeg\")\n\tset(G719_PATH CACHE PATH \"Path to G.719 decoder\")\n\tset(ATRAC9_PATH CACHE PATH \"Path to LibAtrac9\")\n\tset(SPEEX_PATH CACHE PATH \"Path to SPEEX\")\n\tset(CELT_0061_PATH CACHE PATH \"Path to CELT version 0.6.1\")\n\tset(CELT_0110_PATH CACHE PATH \"Path to CELT version 0.11.0\")\n\tset(LIBAO_PATH CACHE PATH \"Path to libao\")\nendif()\n\n# Build choices\noption(BUILD_CLI \"Build vgmstream CLI\" ON)\nif(WIN32)\n\tif(MSVC)\n\t\toption(BUILD_FB2K \"Build foobar2000 component\" ON)\n\t\tset(FB2K_SDK_PATH CACHE PATH \"Path to foobar2000 SDK\")\n\t\tset(WTL_INCLUDE_PATH CACHE PATH \"Path to WTL include directory\")\n\t\tset(FB2K_COMPONENT_INSTALL_PREFIX CACHE PATH \"Path to foobar2000 component installation directory\")\n\tendif()\n\toption(BUILD_WINAMP \"Build Winamp plugin\" ON)\n\tset(WINAMP_INSTALL_PREFIX CACHE PATH \"Path to Winamp installation directory\")\n\toption(BUILD_XMPLAY \"Build XMPlay plugin\" ON)\n\tset(XMPLAY_INSTALL_PREFIX CACHE PATH \"Path to XMPlay installation directory\")\nelse()\n\tif(EMSCRIPTEN)\n\t\tset(BUILD_STATIC ON)\n\telse()\n\t\toption(BUILD_STATIC \"Build statically linked binary\" OFF)\n\t\tif(BUILD_STATIC)\n\t\t\toption(BUILD_V123 \"Build vgmstream123 player\" OFF)\n\t\telse()\n\t\t\toption(BUILD_V123 \"Build vgmstream123 player\" ON)\n\t\tendif()\n\t\toption(BUILD_AUDACIOUS \"Build Audacious plugin\" ON)\n\tendif()\nendif()\n\nif(EMSCRIPTEN)\n\tset(BUILD_V123 OFF)\n\tset(BUILD_AUDACIOUS OFF)\n\t\n\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -lworkerfs.js -s CASE_INSENSITIVE_FS -s ALLOW_MEMORY_GROWTH\")\nendif()\n\n# Static builds will link all libraries statically\nif(BUILD_STATIC)\n\tset(BUILD_SHARED_LIBS OFF)\n\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++ -static\")\n\t\n\t# Incompatible with static builds\n\tset(BUILD_AUDACIOUS OFF)\nendif()\n\n# Autodetect some paths\nif(MSVC AND NOT FB2K_SDK_PATH AND IS_DIRECTORY \"${VGM_SOURCE_DIR}/dependencies/foobar/\")\n    set(FB2K_SDK_PATH \"${VGM_SOURCE_DIR}/dependencies/foobar/\"  CACHE PATH \"...\" FORCE)\nendif()\nif(MSVC AND NOT WTL_INCLUDE_PATH AND IS_DIRECTORY \"${VGM_SOURCE_DIR}/dependencies/wtl/\")\n    set(WTL_INCLUDE_PATH \"${VGM_SOURCE_DIR}/dependencies/wtl/\"  CACHE PATH \"...\" FORCE)\nendif()\n\n# Set autogenerated version\nif(MSVC)\n\tset(VGM_VERSION_GENERATOR version-make.bat)\n\tadd_custom_command(OUTPUT ${VGM_SOURCE_DIR}/version_auto.h\n\t\tCOMMAND \"${VGM_SOURCE_DIR}/${VGM_VERSION_GENERATOR}\"\n\t\tDEPENDS ${VGM_SOURCE_DIR}/${VGM_VERSION_GENERATOR})\nelse()\n\t# linux uses 'sh' so git-less (src zip) builds can run without chmod -x (script)\n\tset(VGM_VERSION_GENERATOR version-make.sh)\n\tadd_custom_command(OUTPUT ${VGM_SOURCE_DIR}/version_auto.h\n\t\tCOMMAND sh \"${VGM_SOURCE_DIR}/${VGM_VERSION_GENERATOR}\"\n\t\tDEPENDS ${VGM_SOURCE_DIR}/${VGM_VERSION_GENERATOR})\nendif()\nadd_custom_target(version_h ALL DEPENDS ${VGM_SOURCE_DIR}/version_auto.h)\n\ninclude(FetchDependency)\n\ninclude(dependencies/ffmpeg)\ninclude(dependencies/mpg123)\ninclude(dependencies/ogg)\ninclude(dependencies/vorbis)\ninclude(dependencies/libao)\ninclude(dependencies/g719)\ninclude(dependencies/atrac9)\ninclude(dependencies/celt)\ninclude(dependencies/speex)\ninclude(dependencies/audacious)\n\nif(USE_G7221)\n\tset(G7221_SOURCE \"(built-in)\")\nelse()\n\tunset(G7221_SOURCE)\nendif()\n\nif(WIN32)\n\t# Enable support for the resource compiler when using MinGW\n\tif(MINGW)\n\t\tenable_language(RC)\n\t\t# Not 100% sure this is needed, but in the past, MinGW's command for compiling resources was incorrect\n\t\tset(CMAKE_RC_COMPILE_OBJECT \"<CMAKE_RC_COMPILER> <FLAGS> -O coff <DEFINES> -i <SOURCE> -o <OBJECT>\")\n\tendif(MINGW)\n\n\tset(CMAKE_EXECUTABLE_SUFFIX .exe)\nendif()\n\n# Set compiler flags\nif(CMAKE_CXX_COMPILER_ID MATCHES Clang OR CMAKE_CXX_COMPILER_ID MATCHES GNU)\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall\")\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall\")\n\tif(CMAKE_CXX_COMPILER_ID MATCHES Clang)\n\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-parentheses-equality -Wno-header-guard -Wno-unused-function -Wno-shift-negative-value -Wno-deprecated-register\")\n\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-parentheses-equality -Wno-header-guard -Wno-unused-function -Wno-shift-negative-value -Wno-deprecated-register\")\n\telseif()\n\t\tif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5.9)\n\t\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-misleading-indentation\")\n\t\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-misleading-indentation\")\n\t\tendif()\n\t\tif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.0)\n\t\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-attributes\")\n\t\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-attributes\")\n\t\tendif()\n\t\tif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 2.99)\n\t\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-unused-function\")\n\t\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-unused-function\")\n\t\tendif()\n\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-format -Wno-sign-compare\")\n\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-format -Wno-sign-compare\")\n\tendif()\nelseif(MSVC)\n\tif(CMAKE_C_FLAGS MATCHES \"/W[0-4]\")\n\t\tstring(REGEX REPLACE \"/W[0-4]\" \"/W3\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n\telse()\n\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /W3\")\n\tendif()\n\tif(CMAKE_CXX_FLAGS MATCHES \"/W[0-4]\")\n\t\tstring(REGEX REPLACE \"/W[0-4]\" \"/W3\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n\telse()\n\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /W3\")\n\tendif()\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /wd4005 /wd4018 /wd4244 /wd4302 /wd4838\")\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4005 /wd4018 /wd4244 /wd4302 /wd4838\")\nendif()\n\nadd_subdirectory(src)\nif(WIN32)\n\tadd_subdirectory(ext_libs)\n\tif(BUILD_WINAMP)\n\t\tif(NOT WINAMP_INSTALL_PREFIX)\n\t\t\tset(WINAMP_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/winamp)\n\t\tendif()\n\t\tadd_subdirectory(winamp)\n\tendif()\n\tif(BUILD_FB2K)\n\t\tif(NOT FB2K_SDK_PATH)\n\t\t\tmessage(FATAL_ERROR \"The path to the foobar2000 SDK must be set. (Use FB2K_SDK_PATH)\")\n\t\tendif()\n\t\tif(NOT WTL_INCLUDE_PATH)\n\t\t\tmessage(FATAL_ERROR \"The path to the WTL include directory must be set. (Use WTL_INCLUDE_PATH)\")\n\t\tendif()\n\t\tif(NOT FB2K_COMPONENT_INSTALL_PREFIX)\n\t\t\tset(FB2K_COMPONENT_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/fb2k)\n\t\tendif()\n\t\tinclude_external_msproject(fb2k_sdk ${FB2K_SDK_PATH}/foobar2000/SDK/foobar2000_SDK.vcxproj)\n\t\tinclude_external_msproject(fb2k_sdk_helpers ${FB2K_SDK_PATH}/foobar2000/helpers/foobar2000_sdk_helpers.vcxproj)\n\t\tinclude_external_msproject(fb2k_atl_helpers ${FB2K_SDK_PATH}/foobar2000/ATLHelpers/foobar2000_ATL_helpers.vcxproj)\n\t\tinclude_external_msproject(fb2k_component_client ${FB2K_SDK_PATH}/foobar2000/foobar2000_component_client/foobar2000_component_client.vcxproj)\n\t\tinclude_external_msproject(pfc ${FB2K_SDK_PATH}/pfc/pfc.vcxproj)\n\t\tadd_subdirectory(fb2k)\n\tendif()\n\tif(BUILD_XMPLAY)\n\t\tif(NOT XMPLAY_INSTALL_PREFIX)\n\t\t\tset(XMPLAY_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/xmplay)\n\t\tendif()\n\t\tadd_subdirectory(xmplay)\n\tendif()\nelse()\n\tif(BUILD_AUDACIOUS)\n\t\tadd_subdirectory(audacious)\n\tendif()\nendif()\nif(BUILD_CLI)\n\tif(WIN32)\n\t\tadd_subdirectory(ext_libs/Getopt)\n\tendif()\n\tadd_subdirectory(cli)\nendif()\n\n# Option Summary\nmessage(STATUS \" Option Summary\")\nmessage(STATUS \"=================\")\nmessage(STATUS \"        MPEG: ${USE_MPEG} ${MPEG_SOURCE}\")\nmessage(STATUS \"      Vorbis: ${USE_VORBIS} ${VORBIS_SOURCE}\")\nmessage(STATUS \"      FFmpeg: ${USE_FFMPEG} ${FFMPEG_SOURCE}\")\nmessage(STATUS \"     G.722.1: ${USE_G7221} ${G7221_SOURCE}\")\nmessage(STATUS \"       G.719: ${USE_G719} ${G719_SOURCE}\")\nmessage(STATUS \"      ATRAC9: ${USE_ATRAC9} ${ATRAC9_SOURCE}\")\nmessage(STATUS \"    FSB CELT: ${USE_CELT} ${CELT_SOURCE}\")\nmessage(STATUS \"       SPEEX: ${USE_SPEEX} ${SPEEX_SOURCE}\")\nif(NOT WIN32)\n\tmessage(STATUS \"       LIBAO: ${BUILD_V123} ${LIBAO_SOURCE}\")\nendif()\nmessage(STATUS \"\")\n\n# Build Summary\nmessage(STATUS \"        Building\")\nmessage(STATUS \"=========================\")\nif(WIN32)\n\tmessage(STATUS \"                 CLI: ${BUILD_CLI}\")\n\tmessage(STATUS \"foobar2000 component: ${BUILD_FB2K}\")\n\tmessage(STATUS \"       Winamp plugin: ${BUILD_WINAMP}\")\n\tmessage(STATUS \"       XMPlay plugin: ${BUILD_XMPLAY}\")\nelse()\n\tmessage(STATUS \"             CLI: ${BUILD_CLI}\")\n\tmessage(STATUS \"    vgmstream123: ${BUILD_V123}\")\n\tmessage(STATUS \"Audacious plugin: ${BUILD_AUDACIOUS} ${AUDACIOUS_SOURCE}\")\n\tmessage(STATUS \"  Static linking: ${BUILD_STATIC}\")\nendif()\nmessage(STATUS \"\")\n\n# Install Summary\nmessage(STATUS \"      Install Paths\")\nmessage(STATUS \"=========================\")\nif(WIN32)\n\tif(BUILD_CLI)\n\t\tmessage(STATUS \"                 CLI: ${CMAKE_INSTALL_PREFIX}/bin\")\n\tendif()\n\tif(BUILD_FB2K)\n\t\tmessage(STATUS \"foobar2000 component: ${FB2K_COMPONENT_INSTALL_PREFIX}\")\n\tendif()\n\tif(BUILD_WINAMP)\n\t\tmessage(STATUS \"       Winamp plugin: ${WINAMP_INSTALL_PREFIX}\")\n\tendif()\n\tif(BUILD_XMPLAY)\n\t\tmessage(STATUS \"       XMPlay plugin: ${XMPLAY_INSTALL_PREFIX}\")\n\tendif()\nelse()\n\tif(BUILD_CLI)\n\t\tmessage(STATUS \"CLI/vgmstream123: ${CMAKE_INSTALL_PREFIX}/bin\")\n\tendif()\n\tif(BUILD_AUDACIOUS)\n\t\tmessage(STATUS \"Audacious plugin: ${AUDACIOUS_PLUGIN_DIR}/Input\")\n\tendif()\nendif()\nmessage(STATUS \"\")\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.21484375,
          "content": "Copyright (c) 2008-2019 Adam Gashlin, Fastelbja, Ronny Elfert, bnnm,\r\n                        Christopher Snowhill, NicknineTheEagle, bxaimc,\r\n                        Thealexbarney, CyberBotX, et al\r\n\r\nPortions Copyright (c) 2004-2008, Marko Kreen\r\nPortions Copyright 2001-2007  jagarl / Kazunori Ueno <jagarl@creator.club.ne.jp>\r\nPortions Copyright (c) 1998, Justin Frankel/Nullsoft Inc.\r\nPortions Copyright (C) 2006 Nullsoft, Inc.\r\nPortions Copyright (c) 2005-2007 Paul Hsieh\r\nPortions Public Domain originating with Sun Microsystems\r\n\r\nPermission to use, copy, modify, and distribute this software for any\r\npurpose with or without fee is hereby granted, provided that the above\r\ncopyright notice and this permission notice appear in all copies.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\r\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\r\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.1875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!-- MSBuild config: autoimported by MSBuild +15 (VS +2017) early in the process, so should only contain certain defaults.\r\n     File is searched for relative to .vcxproj (upper dirs) and not .sln -->\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <!-- <Import Project=\"file.props\" />-->\r\n\r\n  <ImportGroup Label=\"PropertySheets\" />\r\n\r\n  <!-- size mismatch warnings, should rework stuff rather than castings all the time\r\n       (plus compilers can't detect code that logically can't lose precision, such as a clamped values) -->\r\n  <PropertyGroup>\r\n    <NoWarn>C4267;C4244</NoWarn>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Label=\"Configuration\">\r\n    <PlatformToolset>v143</PlatformToolset>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)'=='Debug'\" Label=\"Configuration\">\r\n    <WholeProgramOptimization>false</WholeProgramOptimization>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)'=='Release'\" Label=\"Configuration\">\r\n    <WholeProgramOptimization>true</WholeProgramOptimization>\r\n  </PropertyGroup>\r\n  <PropertyGroup Label=\"UserMacros\" />\r\n  <PropertyGroup />\r\n  <ItemGroup />\r\n</Project>"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 7.6943359375,
          "content": "###############################\n# vgmstream makefile\n###############################\n\nifeq ($(VGMSTREAM_VERSION),)\n  # for current dir (expanded later)\n  VGMSTREAM_VERSION=`sh ./version-get.sh`\nelse\n  VGMSTREAM_VERSION=$(VGMSTREAM_VERSION)\nendif\nDEF_CFLAGS += -DVGMSTREAM_VERSION_AUTO -DVGM_LOG_OUTPUT\n\nVGM_X64=0\n\n###############################################################################\n### external defs\n# currently aimed to WIN32 builds but vgmstream-cli should work for others (or use autotools instead)\nexport TARGET_OS = $(OS)\n\n#for Win builds with vgmstream123\nLIBAO_DLL_PATH = ../libao/bin\n\n### tools\nRMF = rm -f\n\nifeq ($(TARGET_OS),Windows_NT)\n  SHELL = sh\n  CC = gcc\n  AR = ar\n  STRIP = strip\n  WINDRES = windres\n  DLLTOOL = dlltool\n  \n  DLL_DIR = .\n  export DLL_DIR\n  ifneq ($(VGM_X64),0)\n    DLLTOOL = dlltool -m i386:x86-64 --as-flags --64\n    DLL_DIR = dll-x64\n  endif\n\n  # same thing, the above should be available\n  #CC = i686-w64-mingw32-gcc\n  #AR = i686-w64-mingw32-ar\n  #STRIP = i686-w64-mingw32-strip\n  #WINDRES = i686-w64-mingw32-windres\n  #DLLTOOL = i686-w64-mingw32-dlltool\n\nelse\n  SHELL = /bin/sh\n  CC = gcc\n  AR = ar\n  STRIP = strip\n  WINDRES =\n  DLLTOOL =\n\n  # (old crosscompile, not used anymore?)\n  #CC = i586-mingw32msvc-gcc\n  #AR = i586-mingw32msvc-ar\n  #STRIP = i586-mingw32msvc-strip\n  #WINDRES = i586-mingw32msvc-windres\n  #DLLTOOL = i586-mingw32msvc-dlltool\n\nendif\nexport RMF SHELL CC AR STRIP WINDRES DLLTOOL\n\n\n###############################################################################\n### build defs\n\nDEF_CFLAGS += -ffast-math -O3 -Wall -Werror=format-security -Wvla -Wimplicit-function-declaration -Wignored-qualifiers\n\nVGM_DEBUG_FLAGS = 0\nifeq ($(VGM_DEBUG_FLAGS),1)\n  #DEF_CFLAGS += -O0\n  DEF_CFLAGS += -g -DVGM_DEBUG_OUTPUT\n  DEF_CFLAGS += -Wall\n  DEF_CFLAGS += -Wextra\n  DEF_CFLAGS += -Wno-sign-compare\n  DEF_CFLAGS += -Wlogical-op\n  #DEF_CFLAGS += -pedantic -Wconversion -std=gnu90\n  #DEF_CFLAGS += -Wfloat-equal\n  DEF_CFLAGS += -Wdisabled-optimization -Wunsafe-loop-optimizations -Wswitch-default\n  DEF_CFLAGS +=  -Wcast-qual -Wpointer-arith\n  DEF_CFLAGS += -Wcast-align=strict -Wduplicated-cond -Wjump-misses-init -Wnull-dereference\n  DEF_CFLAGS += -Wold-style-definition -Wstrict-prototypes\n  DEF_CFLAGS += -Wmultistatement-macros -Wstringop-truncation\n  DEF_CFLAGS += -Wredundant-decls -Wmissing-include-dirs -Wmissing-declarations\n  #DEF_CFLAGS += -Wshadow\n  #DEF_CFLAGS += -Wstack-protector -fstack-protector\n  STRIP = echo\nendif\n\nLIBS_CFLAGS=\nLIBS_LDFLAGS=\nLIBS_TARGET_EXT_LIBS=\n\n### bit stuff\n# TODO: some targets don't work with X64 (Winamp, etc), detect\n#ifneq ($(VGM_X86),0)\n#  DEF_CFLAGS += -m32\n#endif\nifneq ($(VGM_X64),0)\n  DEF_CFLAGS += -m64\nendif\n\n# config libs\nVGM_G7221 = 1\nifneq ($(VGM_G7221),0)\n  LIBS_CFLAGS  += -DVGM_USE_G7221\nendif\n\n\n### external libs\n# (call \"make VGM_xxx = 0/1\" to override 0/1 defaults, as Make does)\nifeq ($(TARGET_OS),Windows_NT)\n\n  # enabled by default on Windows\n  VGM_VORBIS = 1\n  ifneq ($(VGM_VORBIS),0)\n    LIBS_CFLAGS  += -DVGM_USE_VORBIS\n    LIBS_LDFLAGS += -lvorbis\n    LIBS_TARGET_EXT_LIBS += libvorbis.dll.a\n  endif\n\n  VGM_MPEG = 1\n  ifneq ($(VGM_MPEG),0)\n    LIBS_CFLAGS  += -DVGM_USE_MPEG\n    LIBS_LDFLAGS += -lmpg123-0\n    LIBS_TARGET_EXT_LIBS += libmpg123-0.dll.a\n  endif\n\n  VGM_G719 = 1\n  ifneq ($(VGM_G719),0)\n    LIBS_CFLAGS  += -DVGM_USE_G719\n    LIBS_LDFLAGS += -lg719_decode\n    LIBS_TARGET_EXT_LIBS += libg719_decode.dll.a\n  endif\n\n  VGM_FFMPEG = 1\n  ifneq ($(VGM_FFMPEG),0)\n    LIBS_CFLAGS  += -DVGM_USE_FFMPEG -I../ext_includes/ffmpeg\n    LIBS_LDFLAGS += -lavcodec-vgmstream-59 -lavformat-vgmstream-59 -lavutil-vgmstream-57 -lswresample-vgmstream-4\n    LIBS_TARGET_EXT_LIBS += avcodec-vgmstream-59.dll.a avformat-vgmstream-59.dll.a avutil-vgmstream-57.dll.a swresample-vgmstream-4.dll.a\n  endif\n\n  VGM_ATRAC9 = 1\n  ifneq ($(VGM_ATRAC9),0)\n    LIBS_CFLAGS  += -DVGM_USE_ATRAC9\n    LIBS_LDFLAGS += -latrac9\n    LIBS_TARGET_EXT_LIBS += libatrac9.dll.a\n  endif\n\n  VGM_CELT = 1\n  ifneq ($(VGM_CELT),0)\n    LIBS_CFLAGS  += -DVGM_USE_CELT\n    LIBS_LDFLAGS += -lcelt-0061 -lcelt-0110\n    LIBS_TARGET_EXT_LIBS += libcelt-0061.dll.a libcelt-0110.dll.a\n  endif\n\n  VGM_SPEEX = 1\n  ifneq ($(VGM_SPEEX),0)\n    LIBS_CFLAGS  += -DVGM_USE_SPEEX\n    LIBS_LDFLAGS += -lspeex-1\n    LIBS_TARGET_EXT_LIBS += libspeex-1.dll.a\n  endif\n\nelse\n\n  # must install system libs and enable manually on Linux\n  VGM_VORBIS = 0\n  ifneq ($(VGM_VORBIS),0)\n    LIBS_CFLAGS  += -DVGM_USE_VORBIS\n    LIBS_LDFLAGS += -lvorbis -lvorbisfile\n  endif\n\n  VGM_MPEG = 0\n  ifneq ($(VGM_MPEG),0)\n    LIBS_CFLAGS  += -DVGM_USE_MPEG\n    LIBS_LDFLAGS += -lmpg123\n  endif\n\n  VGM_G719 = 0\n  ifneq ($(VGM_G719),0)\n    LIBS_CFLAGS  += -DVGM_USE_G719\n    LIBS_LDFLAGS += -lg719_decode\n  endif\n\n  VGM_FFMPEG = 0\n  ifneq ($(VGM_FFMPEG),0)\n    LIBS_CFLAGS  += -DVGM_USE_FFMPEG\n    LIBS_LDFLAGS += -lavcodec -lavformat -lavutil -lswresample\n  endif\n\n  VGM_ATRAC9 = 0\n  ifneq ($(VGM_ATRAC9),0)\n    LIBS_CFLAGS  += -DVGM_USE_ATRAC9\n    ifeq ($(VGM_ATRAC9),1)\n      LIBS_LDFLAGS += -latrac9\n    endif\n    ifeq ($(VGM_ATRAC9),2)\n      LIBS_LDFLAGS += -l:libatrac9.a\n    endif\n  endif\n\n  VGM_CELT = 0\n  ifneq ($(VGM_CELT),0)\n    LIBS_CFLAGS  += -DVGM_USE_CELT\n    ifeq ($(VGM_CELT),1)\n      LIBS_LDFLAGS += -lcelt-0061 -lcelt-0110\n    endif\n    ifeq ($(VGM_CELT),2)\n      LIBS_LDFLAGS += -l:libcelt-0061.a -l:libcelt-0110.a\n    endif\n  endif\n\n  VGM_SPEEX = 0\n  ifneq ($(VGM_SPEEX),0)\n    LIBS_CFLAGS  += -DVGM_USE_SPEEX\n    LIBS_LDFLAGS +=  -lspeex\n  endif\nendif\n\nexport DEF_CFLAGS LIBS_CFLAGS LIBS_LDFLAGS LIBS_TARGET_EXT_LIBS\n\n\n###############################################################################\n### internal defs\nifeq ($(TARGET_OS),Windows_NT)\n  BIN_FILE = vgmstream-$(VGMSTREAM_VERSION)-win.zip\n  ZIP_FILES  = COPYING\n  ZIP_FILES += README.md\n  ZIP_FILES += doc/USAGE.md\n  ZIP_FILES += cli/vgmstream-cli.exe\n  ZIP_FILES += winamp/in_vgmstream.dll\n  ZIP_FILES += xmplay/xmp-vgmstream.dll\n  ZIP_FILES += ext_libs/*.dll\n  ZIP_FILES_AO  = cli/vgmstream123.exe\n  ZIP_FILES_AO += $(LIBAO_DLL_PATH)/*.dll\nelse\n  BIN_FILE = vgmstream-$(VGMSTREAM_VERSION)-bin.zip\n  ZIP_FILES  = COPYING\n  ZIP_FILES += README.md\n  ZIP_FILES += doc/USAGE.md\n  ZIP_FILES += cli/vgmstream-cli\n  ZIP_FILES_AO  = cli/vgmstream123\nendif\n\n###############################################################################\n### targets\nbuildrelease: clean bin\n\nbuildrelease-ex: clean bin-ex\n\nbuildfullrelease: clean sourceball bin\n\n# make a tmp copy of git's index to avoid including dev stuff\nsourceball:\n\trm -rf vgmstream-$(VGMSTREAM_VERSION)\n\tgit checkout-index -f -a --prefix=vgmstream-$(VGMSTREAM_VERSION)/\n#\techo \"#!/bin/sh\" > vgmstream-$(VGMSTREAM_VERSION)/version-get.sh\n#\techo \"echo \\\"$(VGMSTREAM_VERSION)\\\"\" >> vgmstream-$(VGMSTREAM_VERSION)/version-get.sh\n\ttar cvzf \"bin/vgmstream-$(VGMSTREAM_VERSION)-src.tar.gz\" vgmstream-$(VGMSTREAM_VERSION)/*\n#\tgit archive --format zip --output bin/vgmstream-$(VGMSTREAM_VERSION)-src.zip master\n\trm -rf vgmstream-$(VGMSTREAM_VERSION)\n\nbin: vgmstream-cli winamp xmplay\n\tmkdir -p bin\n\tzip -FS -j \"bin/$(BIN_FILE)\" $(ZIP_FILES)\n\n#separate since vgmstream123 is kinda untested\nbin-ex: vgmstream-cli winamp xmplay vgmstream123\n\tmkdir -p bin\n\tzip -FS -j \"bin/$(BIN_FILE)\" $(ZIP_FILES) $(ZIP_FILES_AO)\n\nvgmstream-cli: vgmstream_cli\n\nvgmstream_cli: version\n\t$(MAKE) -C cli vgmstream_cli\n\nvgmstream123: version\n\t$(MAKE) -C cli vgmstream123\n\napi_example: version\n\t$(MAKE) -C cli api_example\n\nwinamp: version\n\t$(MAKE) -C winamp in_vgmstream\n\nxmplay: version\n\t$(MAKE) -C xmplay xmp_vgmstream\n\nversion:\n\tsh version-make.sh\n\nclean:\n\t$(RMF) vgmstream-*.zip\n\t$(MAKE) -C src clean\n\t$(MAKE) -C cli clean\n\t$(MAKE) -C winamp clean\n\t$(MAKE) -C xmplay clean\n\t$(MAKE) -C ext_libs clean\n\n.PHONY: clean buildfullrelease buildrelease sourceball bin vgmstream-cli vgmstream_cli vgmstream123 api_example winamp xmplay version\n"
        },
        {
          "name": "Makefile.autotools.am",
          "type": "blob",
          "size": 0.212890625,
          "content": "## vgmstream autotools script\n## Process this file with automake to produce Makefile.in\n\nAM_MAKEFLAGS=-f Makefile.autotools\n\nSUBDIRS = src cli\n\nif HAVE_AUDACIOUS\nSUBDIRS += audacious\nendif\n\nEXTRA_DIST = version_auto.h\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.79296875,
          "content": "# vgmstream\nThis is vgmstream, a library for playing streamed (prerecorded) video game audio.\n\nSome of vgmstream's features:\n- Decodes [hundreds of video game music formats and codecs](doc/FORMATS.md), from typical\n  game engine files to obscure single-game codecs, aiming for high accuracy and compatibility.\n- Support for looped BGM, using file's internal metadata for smooth transitions, with accurate\n  sample counts.\n- [Subsongs](doc/USAGE.md#subsongs), playing a format's multiple internal songs separately.\n- Many types of companion files (data split into multiple files) and custom containers.\n- Encryption keys, internal stream names, and other unusual cases found in game audio.\n- [TXTH](doc/TXTH.md) function, to add external support for extra formats, including raw audio in\n  many forms.\n- [TXTP](doc/TXTP.md) function, for real-time and per-file config, like forced looping, removing\n  channels, playing certain subsong, or fusing multiple files into a single one.\n- Simple [external tagging](doc/USAGE.md#tagging) via .m3u files.\n- [Plugins](#getting-vgmstream) are available for various media player software and operating systems.\n\nThe main development repository: https://github.com/vgmstream/vgmstream/\n\nAutomated builds with the latest changes: https://vgmstream.org\n(https://github.com/vgmstream/vgmstream-releases/releases/tag/nightly)\n\nNumbered releases: https://github.com/vgmstream/vgmstream/releases\n\nHelp can be found here: https://www.hcs64.com/\n\nMore documentation: https://github.com/vgmstream/vgmstream/tree/master/doc\n\n## Getting vgmstream\nThere are multiple end-user components:\n- [vgmstream-cli](doc/USAGE.md#testexevgmstream-cli-command-line-decoder): A command-line decoder.\n- [in_vgmstream](doc/USAGE.md#in_vgmstream-winamp-plugin): A Winamp plugin.\n- [foo_input_vgmstream](doc/USAGE.md#foo_input_vgmstream-foobar2000-plugin): A foobar2000 component.\n- [xmp-vgmstream](doc/USAGE.md#xmp-vgmstream-xmplay-plugin): An XMPlay plugin.\n- [vgmstream.so](doc/USAGE.md#audacious-plugin): An Audacious plugin.\n- [vgmstream123](doc/USAGE.md#vgmstream123-command-line-player): A command-line player.\n\nThe main library (plain *vgmstream*) is the code that handles the internal conversion, while the\nabove components are what you use to get sound.\n\n### Usage\nIf you want to convert game audio to `.wav`, get *vgmstream-cli* then drag-and-drop one\nor more files to the executable (support may vary per O.S. or distro). This should create\n`(file.extension).wav`, if the format is supported. You can also try the online web player\ninstead. See: https://vgmstream.org\n\nMore user-friendly would be installing a player like *foobar2000* (on Windows) or *Audacious*\n(on Linux) and the vgmstream plugin. Then you can directly listen your files and set options like\ninfinite looping, or convert to `.wav` with the player's options (also easier to use if your file\nhas multiple \"subsongs\").\n\nSee [components](doc/USAGE.md#components) in the *usage guide* for full install instructions and\nexplanations. The aim is feature parity, but there are a few differences between them due to\nmissing parts on vgmstream's side or lack of support in the player.\n\nNote that vgmstream cannot *encode* (convert from `.wav` to a game format), it only *decodes*\n(plays game audio).\n\n### Windows binaries\nPrebuilt binaries:\n- https://vgmstream.org (latest)\n- https://github.com/vgmstream/vgmstream/releases (infrequent numbered releases)\n\nThe foobar2000 component is also available on https://www.foobar2000.org based on current\nrelease.\n\nYou may also try the alternative versions (irregularly) built by [bnnm](https://github.com/bnnm):\n- https://github.com/bnnm/vgmstream-builds/raw/master/bin/vgmstream-latest-test-u.zip\n\nOr compile from source, see the [build guide](doc/BUILD.md).\n\n### Linux binaries\nA prebuilt CLI binary is available. It's statically linked and should work on systems running\nLinux kernel v3.2 and above:\n- https://vgmstream.org (latest)\n- https://github.com/vgmstream/vgmstream/releases (infrequent numbered releases)\n\nBuilding from source will also give you *vgmstream.so* (Audacious plugin), and *vgmstream123*\n(command-line player), which can't be statically linked.\n\nWhen building it needs several external libraries. For a quick script for Debian and Ubuntu-style\ndistros run `./make-build-cmake.sh`. The script will need to install dependencies first, so you\nmay prefer to run steps manually, which the [build guide](doc/BUILD.md) describes in detail.\n\n### macOS binaries\nA prebuilt CLI binary is available:\n- https://vgmstream.org (latest)\n- https://github.com/vgmstream/vgmstream/releases (infrequent numbered releases)\n\nOtherwise follow the [build guide](doc/BUILD.md).\n\n\n## More info\n- [Usage guide](doc/USAGE.md)\n- [List of supported audio formats](doc/FORMATS.md)\n- [Build guide](doc/BUILD.md)\n- [TXTH file format](doc/TXTH.md)\n- [TXTP file format](doc/TXTP.md)\n\n\nEnjoy! *hcs*\n"
        },
        {
          "name": "audacious",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootstrap",
          "type": "blob",
          "size": 1.2734375,
          "content": "#!/bin/sh\n# vgmstream autotools script - automake/autoconf init\n\n\n# gets all files and updates .am scripts to avoid having to do manually (frowned upon by automake, whatevs)\n# maybe there is a better way or place for this\nVGMSTREAM_SRCS=`(cd ./src/ && ls *.c */*.c */*/*.c) | tr '\\n' ' '`\nVGMSTREAM_HDRS=`(cd ./src/ && ls *.h */*.h */*/*.h) | tr '\\n' ' '`\nAUDACIOUS_SRCS=`(cd ./audacious/ && ls *.cc) | tr '\\n' ' '`\nAUDACIOUS_HDRS=`(cd ./audacious/ && ls *.h) | tr '\\n' ' '`\n\n# in case some distro sed doesn't support | separator and must use /, all slashes need to be escaped first\n#VGMSTREAM_SRCS=$(echo \"$VGMSTREAM_SRCS\" | sed 's/\\//\\\\\\//g')\n\nsed -i -e \"s|libvgmstream_la_SOURCES =.*|libvgmstream_la_SOURCES = $VGMSTREAM_SRCS|g\" ./src/Makefile.autotools.am\nsed -i -e \"s|EXTRA_DIST =.*|EXTRA_DIST = $VGMSTREAM_HDRS|g\" ./src/Makefile.autotools.am\n\nsed -i -e \"s|libvgmstream_la_SOURCES =.*|libvgmstream_la_SOURCES = $AUDACIOUS_SRCS|g\" ./audacious/Makefile.autotools.am\nsed -i -e \"s|EXTRA_DIST =.*|EXTRA_DIST = $AUDACIOUS_HDRS|g\" ./audacious/Makefile.autotools.am\n\n# make version to show in about dialogs\n# again, not very pretty\nsh version-make.sh\n\n# create fake files expected by automake and process\ntouch README AUTHORS NEWS ChangeLog\naclocal\nautoheader\nautoconf\nlibtoolize --copy --force\nautomake -a\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 2.5947265625,
          "content": "dnl automake-vgmstream m4 script \ndnl Process this file with autoconf to produce a configure script.\n\nAC_PREREQ(2.53)\nAC_INIT(automake-vgmstream,1.3.0)\nAM_INIT_AUTOMAKE([subdir-objects])\nAC_CONFIG_HEADERS(audacious/config.h)\nAM_DISABLE_STATIC\n\nAC_PROG_CC\nAC_PROG_CXX\nAM_PROG_CC_STDC\nAC_HEADER_STDC\nAC_PROG_INSTALL\nAM_PROG_LIBTOOL\n\nAC_PATH_X\nAC_PATH_XTRA\n\nhave_vorbis=no\nPKG_CHECK_MODULES(VORBIS, [vorbis], have_vorbis=yes,\n        [AC_MSG_WARN([Cannot find libvorbis - will not enable Vorbis formats])]\n)\nAM_CONDITIONAL(HAVE_VORBIS, test \"$have_vorbis\" = yes)\n\nhave_vorbisfile=no\nPKG_CHECK_MODULES(VORBISFILE, [vorbisfile], have_vorbisfile=yes,\n        [AC_MSG_WARN([Cannot find libvorbisfile - will not enable Vorbis formats])]\n)\nAM_CONDITIONAL(HAVE_VORBISFILE, test \"$have_vorbisfile\" = yes)\n\nhave_libmpg123=no\nPKG_CHECK_MODULES(MPG123, [libmpg123], have_libmpg123=yes,\n        [AC_MSG_WARN([Cannot find libmpg123 - will not enable MPEG formats])]\n)\nAM_CONDITIONAL(HAVE_LIBMPG123, test \"$have_libmpg123\" = yes)\n\nhave_libspeex=no\nPKG_CHECK_MODULES(SPEEX, [speex], have_libspeex=yes,\n        [AC_MSG_WARN([Cannot find libspeex - will not enable Speex formats])]\n)\nAM_CONDITIONAL(HAVE_LIBSPEEX, test \"$have_libspeex\" = yes)\n\nhave_ffmpeg=no\nPKG_CHECK_MODULES(FFMPEG, [libavformat libavcodec libavutil libswresample], have_ffmpeg=yes,\n        [AC_MSG_WARN([Cannot find ffmpeg - will not enable FFmpeg formats])]\n)\nAM_CONDITIONAL(HAVE_FFMPEG, test \"$have_ffmpeg\" = yes)\n\nhave_audacious=no\nPKG_CHECK_MODULES(AUDACIOUS, [audacious >= 3.5.0],  have_audacious=yes,\n        [AC_MSG_WARN([Cannot find audacious >= 3.5.0 correctly installed - will not build Audacious plugin])]\n)\nAM_CONDITIONAL(HAVE_AUDACIOUS, test \"$have_audacious\" = yes)\n\nPKG_CHECK_MODULES(GTK, [glib-2.0 >= 2.6.0 gtk+-2.0 >= 2.6.0 gthread-2.0 pango],\n    , [AC_MSG_ERROR([Cannot find glib2/gtk2/pango])]\n)\n\nhave_libao=no\nPKG_CHECK_MODULES(AO, [ao >= 1.1.0], have_libao=yes,\n        [AC_MSG_WARN([Cannot find libao - will not build vgmstream123])])\nAM_CONDITIONAL(HAVE_LIBAO, test \"$have_libao\" = yes)\n\nif test \"_$GCC\" = _yes\nthen\n  CFLAGS=\"$CFLAGS -Wall -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-but-set-variable\"\nfi\n\n#plugindir=`pkg-config audacious --define-variable=prefix=\"$prefix\" --variable=plugin_dir`\nplugindir=`pkg-config audacious --variable=plugin_dir`\nAC_SUBST(plugindir)\n\nINPUT_PLUGIN_DIR=\"Input\"\nAC_SUBST(INPUT_PLUGIN_DIR)\n\n#AC_CHECK_HEADERS(regex.h,,AC_MSG_ERROR(regex.h missing))\n#AC_CHECK_FUNCS(regcomp regexec regfree)\n\nAC_PATH_X\nAC_PATH_XTRA\n\nAC_OUTPUT([\n  Makefile.autotools\n  src/Makefile.autotools\n  audacious/Makefile.autotools\n  cli/Makefile.autotools\n])\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext_includes",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext_libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fb2k",
          "type": "tree",
          "content": null
        },
        {
          "name": "make-build-cmake.sh",
          "type": "blob",
          "size": 0.5712890625,
          "content": "#!/bin/sh\n\n# example script that builds vgmstream with most libs enabled using CMake + make\n\nsudo apt-get -y update\n# base deps\nsudo apt-get install gcc g++ make build-essential git cmake\n# optional: for extra formats (can be ommited to build with static libs)\nsudo apt-get install libmpg123-dev libvorbis-dev libspeex-dev\nsudo apt-get install libavformat-dev libavcodec-dev libavutil-dev libswresample-dev\nsudo apt-get install yasm libopus-dev\n# optional: for vgmstream 123 and audacious\nsudo apt-get install -y libao-dev audacious-dev\n\nmkdir -p build\ncd build \ncmake -S .. -B .\nmake\n"
        },
        {
          "name": "make-build.sh",
          "type": "blob",
          "size": 6.4716796875,
          "content": "#!/bin/sh\n\n# example script that builds vgmstream with most libs enabled using the basic makefiles\n# (needs some manual fiddling)\n# most libs use system libs if possible, but should be possible to download them, compile, and\n# pass INCS/LIBSs that use static libs\n\n# todo more testing\n# - don't use ext_libs includes for linux (uses system libs)\n# - libcelt 0.6 works but 11.0 gives \"Floating point exception (core dumped)\" (VM?)\nexit\n\n# config for make\nINCS=\nLIBS=\nFLAGS=\n\n###############################################################################\n# base deps\nsudo apt-get install -y gcc g++ make build-essential git\n\n\n###############################################################################\n# vgmstream123 deps\nsudo apt-get install -y libao-dev\n\n\n###############################################################################\n# vorbis deps\nsudo apt-get install -y libvorbis-dev\nFLAGS=\"${FLAGS} VGM_VORBIS=1\"\n\n\n###############################################################################\n# mpeg deps\nsudo apt-get install -y libmpg123-dev\nFLAGS=\"${FLAGS} VGM_MPEG=1\"\n\n\n###############################################################################\n# speex deps\nsudo apt-get install -y libspeex-dev\nFLAGS=\"${FLAGS} VGM_SPEEX=1\"\n\n\n###############################################################################\n# ffmpeg deps\nsudo apt-get install -y libavformat-dev libavcodec-dev libavutil-dev libswresample-dev\nFLAGS=\"${FLAGS} VGM_FFMPEG=1\"\n\n\n###############################################################################\n# atrac9 deps (compile)\nmkdir -p dependencies\ncd dependencies\n\ngit clone https://github.com/Thealexbarney/LibAtrac9\ncd LibAtrac9/C\nmake\ncd ../../../\n\nFLAGS=\"${FLAGS} VGM_ATRAC9=2\"\n#INCS=\"${INCS} -I../dependencies/LibAtrac9/C/src\"\nLIBS=\"${LIBS} -L../dependencies/LibAtrac9/C/bin\"\n\n\n###############################################################################\n# celt deps (compile x2)\n\n# used renames followed by unused renamed (but seems needed to avoid clashes)\nCELT0061_RENAMES=\" \\\n    -Dcelt_decode=celt_decode_0061 \\\n    -Dcelt_decoder_create=celt_decoder_create_0061 \\\n    -Dcelt_decoder_destroy=celt_decoder_destroy_0061 \\\n    -Dcelt_mode_create=celt_mode_create_0061 \\\n    -Dcelt_mode_destroy=celt_mode_destroy_0061 \\\n    -Dcelt_mode_info=celt_mode_info_0061 \\\n    \\\n    -Dalg_quant=alg_quant_0061 \\\n    -Dalg_unquant=alg_unquant_0061 \\\n    -Dcelt_decoder_create_custom=celt_decoder_create_custom_0061 \\\n    -Dcelt_encoder_destroy=celt_encoder_destroy_0061 \\\n    -Dcelt_encoder_create=celt_encoder_create_0061 \\\n    -Dcelt_encode=celt_encode_0061 \\\n    -Dcelt_encode_float=celt_encode_float_0061 \\\n    -Dcelt_encoder_ctl=celt_encoder_ctl_0061 \\\n    -Dcelt_decode_float=celt_decode_float_0061 \\\n    -Dcelt_decoder_ctl=celt_decoder_ctl_0061 \\\n    -Dcompute_allocation=compute_allocation_0061 \\\n    -Dcompute_band_energies=compute_band_energies_0061 \\\n    -Ddenormalise_bands=denormalise_bands_0061 \\\n    -Dec_dec_init=ec_dec_init_0061 \\\n    -Dec_decode=ec_decode_0061 \\\n    -Dec_decode_bin=ec_decode_bin_0061 \\\n    -Dec_dec_update=ec_dec_update_0061 \\\n    -Dec_dec_uint=ec_dec_uint_0061 \\\n    -Dec_dec_bits=ec_dec_bits_0061 \\\n    -Dec_enc_init=ec_enc_init_0061 \\\n    -Dec_encode=ec_encode_0061 \\\n    -Dec_encode_bin=ec_encode_bin_0061 \\\n    -Dec_enc_uint=ec_enc_uint_0061 \\\n    -Dec_enc_bits=ec_enc_bits_0061 \\\n    -Dec_enc_done=ec_enc_done_0061 \\\n    -Dnormalise_bands=normalise_bands_0061 \\\n    -Drenormalise_vector=renormalise_vector_0061 \\\n    -Dquant_coarse_energy=quant_coarse_energy_0061 \\\n    -Dquant_fine_energy=quant_fine_energy_0061 \\\n    -Dquant_energy_finalise=quant_energy_finalise_0061 \\\n    -Dunquant_coarse_energy=unquant_coarse_energy_0061 \\\n    -Dunquant_energy_finalise=unquant_energy_finalise_0061 \\\n    -Dunquant_fine_energy=unquant_fine_energy_0061 \\\n    \"\n# same as the above but I don't know sh enough to normalize\nCELT0110_RENAMES=\" \\\n    -Dcelt_decode=celt_decode_0110 \\\n    -Dcelt_decoder_create_custom=celt_decoder_create_custom_0110 \\\n    -Dcelt_decoder_destroy=celt_decoder_destroy_0110 \\\n    -Dcelt_mode_create=celt_mode_create_0110 \\\n    -Dcelt_mode_destroy=celt_mode_destroy_0110 \\\n    -Dcelt_mode_info=celt_mode_info_0110 \\\n    \\\n    -Dalg_quant=alg_quant_0110 \\\n    -Dalg_unquant=alg_unquant_0110 \\\n    -Dcelt_encoder_destroy=celt_encoder_destroy_0110 \\\n    -Dcelt_encoder_create=celt_encoder_create_0110 \\\n    -Dcelt_encode=celt_encode_0110 \\\n    -Dcelt_encode_float=celt_encode_float_0110 \\\n    -Dcelt_encoder_ctl=celt_encoder_ctl_0110 \\\n    -Dcelt_decode_float=celt_decode_float_0110 \\\n    -Dcelt_decoder_ctl=celt_decoder_ctl_0110 \\\n    -Dcompute_allocation=compute_allocation_0110 \\\n    -Dcompute_band_energies=compute_band_energies_0110 \\\n    -Ddenormalise_bands=denormalise_bands_0110 \\\n    -Dec_dec_init=ec_dec_init_0110 \\\n    -Dec_decode=ec_decode_0110 \\\n    -Dec_decode_bin=ec_decode_bin_0110 \\\n    -Dec_dec_update=ec_dec_update_0110 \\\n    -Dec_dec_uint=ec_dec_uint_0110 \\\n    -Dec_dec_bits=ec_dec_bits_0110 \\\n    -Dec_enc_init=ec_enc_init_0110 \\\n    -Dec_encode=ec_encode_0110 \\\n    -Dec_encode_bin=ec_encode_bin_0110 \\\n    -Dec_enc_uint=ec_enc_uint_0110 \\\n    -Dec_enc_bits=ec_enc_bits_0110 \\\n    -Dec_enc_done=ec_enc_done_0110 \\\n    -Dnormalise_bands=normalise_bands_0110 \\\n    -Drenormalise_vector=renormalise_vector_0110 \\\n    -Dquant_coarse_energy=quant_coarse_energy_0110 \\\n    -Dquant_fine_energy=quant_fine_energy_0110 \\\n    -Dquant_energy_finalise=quant_energy_finalise_0110 \\\n    -Dunquant_coarse_energy=unquant_coarse_energy_0110 \\\n    -Dunquant_energy_finalise=unquant_energy_finalise_0110 \\\n    -Dunquant_fine_energy=unquant_fine_energy_0110 \\\n    \"\n\nmkdir -p dependencies\ncd dependencies\n\ngit clone --depth 1 --branch v0.6.1 https://gitlab.xiph.org/xiph/celt.git celt-0061\ncd celt-0061\n./autogen.sh\n./configure\nmake LDFLAGS=\"-no-undefined\" AM_CFLAGS=\"$CELT0061_RENAMES\"\nmv ./libcelt/.libs/libcelt.a ./libcelt/.libs/libcelt-0061.a\ncd ..\n\ngit clone --depth 1 --branch v0.11 https://gitlab.xiph.org/xiph/celt.git celt-0110\ncd celt-0110\n./autogen.sh\n./configure\nmake LDFLAGS=\"-no-undefined\" AM_CFLAGS=\"-DCUSTOM_MODES=1 $CELT0110_RENAMES\"\nmv ./libcelt/.libs/libcelt0.a ./libcelt/.libs/libcelt-0110.a\n\ncd ..\n\ncd ..\n\nFLAGS=\"${FLAGS} VGM_CELT=2\"\n#INCS=\"${INCS} -I../dependencies/celt-0061/libcelt/.libs/\"\nLIBS=\"${LIBS} -L../dependencies/celt-0061/libcelt/.libs/ -L../dependencies/celt-0110/libcelt/.libs/\"\n\n\n###############################################################################\n# vgmstream\nmake vgmstream-cli $FLAGS EXTRA_CFLAGS=$INCS EXTRA_LDFLAGS=$LIBS\nmake vgmstream123 $FLAGS EXTRA_CFLAGS=$INCS EXTRA_LDFLAGS=$LIBS\n"
        },
        {
          "name": "msvc-build-clean.bat",
          "type": "blob",
          "size": 0.0732421875,
          "content": "powershell -ExecutionPolicy Bypass -NoProfile -File .\\msvc-build.ps1 Clean\n"
        },
        {
          "name": "msvc-build-init.bat",
          "type": "blob",
          "size": 0.072265625,
          "content": "powershell -ExecutionPolicy Bypass -NoProfile -File .\\msvc-build.ps1 Init\n"
        },
        {
          "name": "msvc-build-package.bat",
          "type": "blob",
          "size": 0.0751953125,
          "content": "powershell -ExecutionPolicy Bypass -NoProfile -File .\\msvc-build.ps1 Package\n"
        },
        {
          "name": "msvc-build.bat",
          "type": "blob",
          "size": 0.072265625,
          "content": "powershell -ExecutionPolicy Bypass -NoProfile -File .\\msvc-build.ps1 Build"
        },
        {
          "name": "msvc-build.ps1",
          "type": "blob",
          "size": 10.3583984375,
          "content": "[CmdletBinding()]\nParam(\n    [Parameter(Position=0, mandatory=$true)]\n    [ValidateSet(\"Init\", \"Build\", \"Rebuild\", \"Clean\", \"Package\", \"PackageArtifacts\")]\n    [string]$Task\n)\n\n###############################################################################\n# CONFIG\n# set these vars to override project defaults\n# can also create a mssvc-build.config.ps1 with those\n###############################################################################\n$config_file = \".\\msvc-build.config.ps1\"\nif((Test-Path $config_file)) { . $config_file }\n\n# - toolsets: \"\" (default), \"v140\" (MSVC 2015), \"v141\" (MSVC 2017), \"v141_xp\" (XP support), \"v142\" (MSVC 2019), etc\nif (!$toolset) { $toolset = \"\" }\n\n# - sdks: \"\" (default), \"7.0\" (Win7 SDK), \"8.1\" (Win8 SDK), \"10.0\" (Win10 SDK), etc\nif (!$sdk) { $sdk = \"\" }\n\n# - platforms: \"\" (default), \"Win32\", \"x64\"\nif (!$platform) { $platform = \"\" }\n\n# print compilation log\n#$log = 1\n\n# Debug or Release, usually\nif (!$configuration) { $configuration = \"Release\" }\n\n###############################################################################\n\n$solution = \"vgmstream_full.sln\"\n$dependencies = \"dependencies\"\n$vswhere = \"$dependencies/vswhere.exe\"\n$config = \"/p:Configuration=\" + $configuration\n# not used ATM\n$enable_aac = 0\n\nif ($platform) { $platform = \"/p:Platform=\" + $platform }\nif ($toolset) { $toolset = \"/p:PlatformToolset=\" + $toolset }\nif ($sdk) { $sdk = \"/p:WindowsTargetPlatformVersion=\" + $sdk }\n\n# https://stackoverflow.com/a/41618979/9919772\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\n# helper\nfunction Unzip\n{\n    param([string]$zipfile, [string]$outpath)\n    Write-Output \"Extracting $zipfile\"\n    [System.IO.Compression.ZipFile]::ExtractToDirectory($zipfile, $outpath)\n}\n\n# helper\nfunction Download\n{\n    param([string]$uri, [string]$outfile)\n    Write-Output \"Downloading $uri\"\n    $wc = New-Object net.webclient\n    $wc.Downloadfile($uri, $outfile)\n}\n\n# download and unzip dependencies\nfunction Init\n{\n    Add-Type -AssemblyName System.IO.Compression.FileSystem\n\n    Remove-Item -Path \"$dependencies\" -Recurse -ErrorAction Ignore\n    New-Item \"$dependencies\" -Type directory -Force | out-null\n\n    # vswhere: MSBuild locator\n    # may already be in %ProgramFiles(x86)%\\Microsoft Visual Studio\\Installer\\vswhere.exe\n    # so could test that and skip this step\n    Download \"https://github.com/Microsoft/vswhere/releases/download/2.6.7/vswhere.exe\" \"$dependencies\\vswhere.exe\"\n\n    # foobar: wtl\n    Download \"https://www.nuget.org/api/v2/package/wtl/10.0.10320\" \"$dependencies\\wtl.zip\"\n    Unzip \"$dependencies\\wtl.zip\" \"$dependencies\\wtl_tmp\"\n    Move-Item \"$dependencies\\wtl_tmp\\lib\\native\" \"$dependencies\\wtl\"\n    Remove-Item -Path \"$dependencies\\wtl_tmp\" -Recurse\n\n    # foobar: sdk anti-hotlink (random link) defeater\n    #Download \"https://www.foobar2000.org/SDK\" \"$dependencies\\SDK\"\n    #$key = (Select-String -Path $dependencies\\SDK -Pattern \"\\/([a-f0-9]+)\\/SDK-2018-01-11\\.zip\").matches.groups[1]\n    #Remove-Item -Path \"$dependencies\\SDK\"\n    #Download \"https://www.foobar2000.org/files/$key/SDK-2018-01-11.zip\" \"$dependencies\\foobar.zip\"\n\n    # foobar: sdk direct link, but 2019< sdks gone ATM\n    #Download \"https://www.foobar2000.org/files/SDK-2018-01-11.zip\" \"$dependencies\\foobar.zip\"\n\n    # foobar: sdk static mirror\n    Download \"https://github.com/vgmstream/vgmstream-deps/raw/master/foobar2000/SDK-2023-01-18.zip\" \"$dependencies\\foobar.zip\"\n    Unzip \"$dependencies\\foobar.zip\" \"$dependencies\\foobar\"\n\n    # foobar: aac (not used ATM)\n    if ($enable_aac)\n    {\n        Download \"https://github.com/kode54/fdk-aac/archive/master.zip\" \"$dependencies\\fdk-aac.zip\"\n        Download \"https://github.com/kode54/qaac/archive/master.zip\" \"$dependencies\\qaac.zip\"\n        Unzip \"$dependencies\\fdk-aac.zip\" \"$dependencies\\fdk-aac_tmp\"\n        Unzip \"$dependencies\\qaac.zip\" \"$dependencies\\qaac_tmp\"\n        Move-Item \"$dependencies\\fdk-aac_tmp\\fdk-aac-master\" \"$dependencies\\fdk-aac\"\n        Move-Item \"$dependencies\\qaac_tmp\\qaac-master\" \"$dependencies\\qaac\"\n        Remove-Item -Path \"$dependencies\\fdk-aac_tmp\" -Recurse\n        Remove-Item -Path \"$dependencies\\qaac_tmp\" -Recurse\n    }\n\n    # open foobar sdk project and modify WTL path\n    # (maybe should just pass include to CL envvar: set CL=/I\"(path)\\WTL\\Include\")\n    [xml]$proj = Get-Content $dependencies\\foobar\\foobar2000\\helpers\\foobar2000_sdk_helpers.vcxproj\n    $proj.project.ItemDefinitionGroup | ForEach-Object {\n        $_.ClCompile.AdditionalIncludeDirectories += \";../../../wtl/include\"\n    }\n    $proj.Save(\"$dependencies\\foobar\\foobar2000\\helpers\\foobar2000_sdk_helpers.vcxproj\")\n\n    [xml]$proj = Get-Content $dependencies\\foobar\\libPPUI\\libPPUI.vcxproj\n    $proj.project.ItemDefinitionGroup | ForEach-Object {\n        $_.ClCompile.AdditionalIncludeDirectories += \";../../wtl/include\"\n    }\n    $proj.Save(\"$dependencies\\foobar\\libPPUI\\libPPUI.vcxproj\")\n}\n\n# main build\nfunction CallMsbuild\n{\n    param([string]$target)\n    if ($target) { $target = \"/t:\" + $target }\n\n    # download dependencies if needed\n    if(!(Test-Path $vswhere)) { Init }\n\n\n    # autolocate MSBuild path\n    $msbuild = & $vswhere -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\\**\\Bin\\MSBuild.exe\n\n    if(!($msbuild -and $(Test-Path $msbuild))) {\n        throw \"Unable to find MSBuild. Is Visual Studio installed?\"\n    }\n\n    # TODO improve (why does every xxxxer make their own scripting engine)\n    # main build (pass config separate and not as a single string)\n    if (!$log) {\n        if ($platform) {\n            & $msbuild $solution $config $platform $toolset $sdk $target /m\n        }\n        else {\n            & $msbuild $solution $config /p:Platform=Win32 $toolset $sdk $target /m\n            if ($LASTEXITCODE -ne 0) {\n                throw \"MSBuild failed\"\n            }\n\n            & $msbuild $solution $config /p:Platform=x64 $toolset $sdk $target /m\n        }\n    }\n    else {\n        if ($platform) {\n            & $msbuild $solution $config $platform $toolset $sdk $target /m > \"msvc-build.log\"\n        }\n        else {\n            & $msbuild $solution $config /p:Platform=Win32 $toolset $sdk $target /m > \"msvc-build.log\"\n            if ($LASTEXITCODE -ne 0) {\n                throw \"MSBuild failed\"\n            }\n            & $msbuild $solution $config /p:Platform=x64 $toolset $sdk $target /m > \"msvc-build.log\"\n        }\n    }\n\n    if ($LASTEXITCODE -ne 0) {\n        throw \"MSBuild failed\"\n    }\n}\n\nfunction Build\n{\n    CallMsbuild \"Build\"    \n}\n\nfunction Rebuild\n{\n    CallMsbuild \"Rebuild\"\n}\n\nfunction Clean\n{\n    CallMsbuild \"Clean\"\n    # todo fix the above, for now:\n    #Remove-Item -Path \"$dependencies\" -Recurse -ErrorAction Ignore\n    Remove-Item -Path \"build-msvc\" -Recurse -ErrorAction Ignore\n\n    Remove-Item -Path \"Debug\" -Recurse -ErrorAction Ignore\n    Remove-Item -Path \"Release\" -Recurse -ErrorAction Ignore\n    Remove-Item -Path \"x64\" -Recurse -ErrorAction Ignore\n\n    Remove-Item -Path \"bin\" -Recurse -ErrorAction Ignore\n\n    Remove-Item \"msvc-build.log\" -ErrorAction Ignore\n}\n\n$cliFiles32 = @(\n    \"ext_libs/*.dll\",\n    \"$configuration/vgmstream-cli.exe\",\n    \"$configuration/in_vgmstream.dll\",\n    \"$configuration/xmp-vgmstream.dll\",\n    \"COPYING\",\n    \"README.md\"\n    \"doc/USAGE.md\"\n)\n\n$cliFiles64 = @(\n    \"ext_libs/dll-x64/*.dll\",\n    \"x64/$configuration/vgmstream-cli.exe\",\n    \"COPYING\",\n    \"README.md\"\n    \"doc/USAGE.md\"\n)\n\n$fb2kFiles32 = @(\n    \"ext_libs/*.dll\",\n    \"$configuration/foo_input_vgmstream.dll\",\n    \"README.md\"\n    \"doc/USAGE.md\"\n)\n\n$fb2kFiles64 = @(\n    \"ext_libs/dll-x64/*.dll\"\n    \"x64/$configuration/foo_input_vgmstream.dll\"\n)\n\n$fb2kFiles_remove = @(\n    \"bin/foobar2000/xxxx.dll\"\n)\n\n$cliPdbFiles32 = @(\n    \"$configuration/vgmstream-cli.pdb\",\n    \"$configuration/in_vgmstream.pdb\",\n    \"$configuration/xmp-vgmstream.pdb\"\n)\n\n$cliPdbFiles64 = @(\n    \"x64/$configuration/vgmstream-cli.pdb\"\n)\n\n$fb2kPdbFiles32 = @(\n    \"$configuration/foo_input_vgmstream.pdb\"\n)\n\n$fb2kPdbFiles64 = @(\n    \"x64/$configuration/foo_input_vgmstream.pdb\"\n)\n\n\nfunction MakePackage\n{\n    Build\n\n    if(!(Test-Path \"$configuration/vgmstream-cli.exe\")) {\n        Write-Error \"Unable to find binaries, check for compilation errors\"\n        return\n    }\n\n    mkdir -Force bin\n\n    Compress-Archive $cliFiles32 bin/vgmstream-win.zip -Force\n    Compress-Archive $cliFiles64 bin/vgmstream-win64.zip -Force\n\n    # foobar 32 and 64-bit components go to the same file, in an extra \"x64\" subdir for the later\n    mkdir -Force bin/foobar2000\n    mkdir -Force bin/foobar2000/x64\n    Copy-Item $fb2kFiles32 bin/foobar2000/ -Recurse -Force\n    Copy-Item $fb2kFiles64 bin/foobar2000/x64/ -Recurse -Force\n    Remove-Item $fb2kFiles_remove -ErrorAction Ignore\n\n    # workaround for a foobar 2.0 64-bit bug: (earlier?) powershell creates zip paths with '\\' (which seem\n    # non-standard), and apparently that confuses foobar when trying to unpack the zip\n    try {\n        # should be available in github actions\n        & '7z' a -tzip bin/foo_input_vgmstream.fb2k-component ./bin/foobar2000/*\n    } catch {\n        # works for 32-bit at least\n        Compress-Archive -Path bin/foobar2000/* bin/foo_input_vgmstream.zip -Force\n        Move-Item bin/foo_input_vgmstream.zip bin/foo_input_vgmstream.fb2k-component -Force\n    }\n    \n    Remove-Item -Path bin/foobar2000 -Recurse -ErrorAction Ignore\n}\n\n\n# github actions/artifact uploads config, that need a dir with files to make an .zip artifact (don't allow single/pre-zipped files)\nfunction MakePackageArtifacts\n{\n    MakePackage\n\n    mkdir -Force bin/artifacts/cli-x32\n    mkdir -Force bin/artifacts/cli-x64\n    mkdir -Force bin/artifacts/foobar2000\n    mkdir -Force bin/artifacts/foobar2000/x64\n    mkdir -Force bin/artifacts/pdb/x32\n    mkdir -Force bin/artifacts/pdb/x64\n\n    Copy-Item $cliFiles32 bin/artifacts/cli-x32/ -Recurse -Force\n    Copy-Item $cliFiles64 bin/artifacts/cli-x64/ -Recurse -Force\n    Copy-Item $fb2kFiles32 bin/artifacts/foobar2000/ -Recurse -Force\n    Copy-Item $fb2kFiles64 bin/artifacts/foobar2000/x64/ -Recurse -Force\n    Remove-Item $fb2kFiles_remove -ErrorAction Ignore\n    Copy-Item $cliPdbFiles32 bin/artifacts/pdb/x32/ -Recurse -Force\n    Copy-Item $fb2kPdbFiles32 bin/artifacts/pdb/x32/ -Recurse -Force\n    Copy-Item $cliPdbFiles64 bin/artifacts/pdb/x64/ -Recurse -Force\n    Copy-Item $fb2kPdbFiles64 bin/artifacts/pdb/x64/ -Recurse -Force\n}\n\n\nswitch ($Task)\n{\n    \"Init\" { Init }\n    \"Build\" { Build }\n    \"Rebuild\" { Rebuild }\n    \"Clean\" { Clean }\n    \"Package\" { MakePackage }\n    \"PackageArtifacts\" { MakePackageArtifacts }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "unbootstrap",
          "type": "blob",
          "size": 0.458984375,
          "content": "#!/bin/sh\n# vgmstream autotools script - reverses the actions of bootstrap\n\nrm -rf configure AUTHORS compile depcomp ChangeLog config.guess ltmain.sh README config.sub autom4te.cache Makefile.autotools.in INSTALL missing NEWS aclocal.m4 install-sh audacious/config.h.in audacious/main.loT audacious/Makefile.autotools.in src/Makefile.autotools.in src/coding/Makefile.autotools.in src/meta/Makefile.autotools.in src/layout/Makefile.autotools.in cli/Makefile.autotools.in\n"
        },
        {
          "name": "version-get.sh",
          "type": "blob",
          "size": 1.505859375,
          "content": "#!/bin/sh\n\n# echo current git version (doesn't make version_auto.h)\nVERSION_EMPTY=$1\n#VERSION_FILE=--\nVERSION_NAME=$2\nif [ -z \"$VERSION_EMPTY\" ]; then VERSION_EMPTY=false; fi\n#if [ -z \"$VERSION_FILE\" ]; then VERSION_FILE=version_auto.h; fi\nif [ -z \"$VERSION_NAME\" ]; then VERSION_NAME=VGMSTREAM_VERSION; fi\nVERSION_DEFAULT=unknown\n\n# try get version from Git (dynamic), including lightweight tags\nif ! command -v git > /dev/null ; then\n    VERSION=\"\"\nelse\n    VERSION=$(git describe --tags --always 2>&1 | tr : _ )\n    if case \"$VERSION\" in fatal*) true;; *) false;; esac; then\n        VERSION=\"\"\n    fi\nfi\n\n\nif [ ! -z \"$VERSION\" ]; then\n    LINE=\"$VERSION\"\nelse\n    # try to get version from version.h (static)\n    #echo \"Git version not found, can't autogenerate version (using default)\"\n\n    # option to output empty line instead of default version, so plugins can detect git-less builds\n    if [ \"$VERSION_EMPTY\" = \"true\" ]; then\n        LINE=\"/* ignored */\"\n    else\n        LINE=\"$VERSION_DEFAULT\"\n        while IFS= read -r <&3 ITEM; do\n            COMP=\"#define $VERSION_NAME\"\n            if case \"$ITEM\" in *\"$COMP\"*) true;; *) false;; esac; then\n                # clean \"#define ...\" leaving rXXXX only\n                REGEX_REMOVE1=\"#define $VERSION_NAME \\\"\"\n                REGEX_REMOVE2=\"\\\".*\"\n                LINE=\"$ITEM\"\n                LINE=$(echo $LINE | sed \"s/$REGEX_REMOVE1//\")\n                LINE=$(echo $LINE | sed \"s/$REGEX_REMOVE2//\")\n            fi\n        done 3< \"version.h\"\n    fi\nfi\n\n\n# final print\necho \"$LINE\"\n"
        },
        {
          "name": "version-make.bat",
          "type": "blob",
          "size": 1.9775390625,
          "content": "@echo off\nsetlocal enableextensions enabledelayedexpansion\n\nREM creates or updates version_auto.h\nset VERSION_EMPTY=%1\nset VERSION_FILE=%2\nset VERSION_NAME=%3\nif \"%~1\" == \"\" set VERSION_EMPTY=false\nif \"%~2\" == \"\" set VERSION_FILE=version_auto.h\nif \"%~3\" == \"\" set VERSION_NAME=VGMSTREAM_VERSION\nset VERSION_DEFAULT=unknown\n\nif not \"%VERSION%\"==\"\" set VERSION=!VERSION:^:=_!\ncd /d \"%~dp0\"\n\n\nREM try get version from Git (dynamic), including lightweight tags\n:get_version_git\nfor /f %%v in ('git describe --tags --always') do set VERSION=%%v\nif not \"%VERSION%\"==\"\" set VERSION=!VERSION:^:=_!\nif \"%VERSION%\"==\"\" goto :get_version_h\nif %VERSION%==%VERSION_DEFAULT% goto :get_version_h\nset LINE=#define %VERSION_NAME% \"%VERSION%\" /* autogenerated */\ngoto :got_version\n\n\nREM try to get version from version.h (static)\n:get_version_h\necho Git version not found, can't autogenerate version (using default)\nREM option to output empty line instead of default version, so plugins can detect git-less builds\nif \"%VERSION_EMPTY%\"==\"true\" (\n    set LINE=/* ignored */\n) else (\n    set LINE=#define %VERSION_NAME% \"%VERSION_DEFAULT%\" /* autogenerated */\n    if exist \"version.h\" (\n        for /F \"tokens=*\" %%v in (version.h) do (\n            set TOKEN=%%v\n            REM set COMP=#define %VERSION_NAME% #todo\n            if /i \"!TOKEN:~0,25!\"==\"#define VGMSTREAM_VERSION\" set LINE=%%v /* default */\n        )\n    )\n)\ngoto :got_version\n\n\nREM avoid overwritting if contents are the same, as some systems rebuild on timestamp\n:got_version\nset LINE_ORIGINAL=none\nif exist %VERSION_FILE% set /p LINE_ORIGINAL=<%VERSION_FILE%\nif not \"%LINE%\"==\"%LINE_ORIGINAL%\" (\n    REM no spaces!\n    echo %LINE%>%VERSION_FILE%\n)\ngoto :exit\n\nREM * alt full file comp test\nREM echo %LINE% > %VERSION_FILE%_temp\nREM echo n | comp %VERSION_FILE%_temp %VERSION_FILE% > NUL 2> NUL\nREM if not errorlevel 1 goto :got_version_done\nREM copy /y %VERSION_FILE%_temp %VERSION_FILE% > NUL 2> NUL\nREM :got_version_done\nREM del %VERSION_FILE%_temp\nREM :exit\n\nREM done\n:exit\n"
        },
        {
          "name": "version-make.sh",
          "type": "blob",
          "size": 1.5634765625,
          "content": "#!/bin/sh\n\n# make current git version (overwrites version_auto.h)\nVERSION_EMPTY=$1\nVERSION_FILE=$2\nVERSION_NAME=$3\nif [ -z \"$VERSION_EMPTY\" ]; then VERSION_EMPTY=false; fi\nif [ -z \"$VERSION_FILE\" ]; then VERSION_FILE=version_auto.h; fi\nif [ -z \"$VERSION_NAME\" ]; then VERSION_NAME=VGMSTREAM_VERSION; fi\nVERSION_DEFAULT=unknown\n\n# try get version from Git (dynamic), including lightweight tags\nif ! command -v git > /dev/null ; then\n    VERSION=\"\"\nelse\n    VERSION=$(git describe --tags --always 2>&1 | tr : _ )\n    if case \"$VERSION\" in fatal*) true;; *) false;; esac; then\n        VERSION=\"\"\n    fi\nfi\n\n\nif [ ! -z \"$VERSION\" ]; then\n    LINE=\"#define $VERSION_NAME \\\"$VERSION\\\" /* autogenerated */\"\nelse\n    # try to get version from version.h (static)\n    echo \"Git version not found, can't autogenerate version (using default)\"\n\n    # option to output empty line instead of default version, so plugins can detect git-less builds\n    if [ \"$VERSION_EMPTY\" = \"true\" ]; then \n        LINE=\"/* ignored */\"\n    else\n        LINE=\"#define $VERSION_NAME \\\"$VERSION_DEFAULT\\\" /* autogenerated */\"\n        while IFS= read -r <&3 ITEM; do\n            COMP=\"#define $VERSION_NAME\"\n            if case \"$ITEM\" in *\"$COMP\"*) true;; *) false;; esac; then\n                LINE=\"$ITEM /* default */\"\n            fi\n        done 3< \"version.h\"\n    fi\nfi\n\n\n# avoid overwritting if contents are the same, as some systems rebuild on timestamp\nLINE_ORIGINAL=\"none\"\nif test -f \"version_auto.h\"; then\n    LINE_ORIGINAL=$(<version_auto.h)\nfi\nif [ ! \"$LINE\" = \"$LINE_ORIGINAL\" ]; then\n    echo \"$LINE\" > \"$VERSION_FILE\"\nfi\n"
        },
        {
          "name": "version.h",
          "type": "blob",
          "size": 1.6962890625,
          "content": "#ifndef _VGMSTREAM_VERSION_H_\n#define _VGMSTREAM_VERSION_H_\n/* vgmstream version config (auto/static) */\n/* Current version is usually autogenerated from Git (passed via compiler args, or updated with scripts),\n * but this file also defines a static version for Git-less builds to be used by default. */\n\n/* autogenerated version passed by param */\n//todo detect if VGMSTREAM_VERSION is \"\" (may happen on script error)\n#ifndef VGMSTREAM_VERSION\n/* autogenerated version in another file */\n#ifdef VGMSTREAM_VERSION_AUTO\n#include \"version_auto.h\"\n#else\n/* static/fallback version */\n\n/* Generating new releases:\n * - calculate new version\n *   - check last release's latest PR\n *   - count number of PRs (more or less) since then\n *   - add that count to current version (commit count not used since there are a lot and some are useless)\n * - update VGMSTREAM_VERSION \"rNNNN\" and commit\n *   - may be done directly without PR\n * - create a new release/tag (same name as version, rNNNN), with that commit as a base\n *   - use latest if version change commit was without PR\n * - compile and upload\n *   - on github, after changing version:\n *     - releases > \"draft new release\" button\n *     - copy text from prev release and select commit + tag\n *       - tweak current PR\n *       - copy \"recent changes\" from vgmstream-releases\n *     - publish (even with no binaries) \n *     - in \"actions\" tab, workflow should have added a new \"rXXXX\" compilation\n *     - once done download all binaries there, edit release, upload, save\n * - if version commit was used as release base, \"git describe\" and plugin\n *   versions should return \"rNNNN\" without extra text commit number text\n */\n\n#define VGMSTREAM_VERSION \"r1980\"\n\n#endif\n#endif\n\n#endif\n"
        },
        {
          "name": "vgmstream_full.sln",
          "type": "blob",
          "size": 9.7421875,
          "content": "﻿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 17\r\nVisualStudioVersion = 17.1.32421.90\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libvgmstream\", \"src\\libvgmstream.vcxproj\", \"{54A6AD11-5369-4895-A06F-E255ABB99B11}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"ext_libs\", \"ext_libs\\ext_libs.vcxproj\", \"{10E6BFC6-1E5B-46E4-BA42-F04DFBD0ABFF}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"getopt\", \"ext_libs\\Getopt\\getopt.vcxproj\", \"{330B53AE-4FAE-46DA-8785-9016DB4E3E23}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"vgmstream_cli\", \"cli\\vgmstream_cli.vcxproj\", \"{AF7D88A0-3CB1-4CD8-BAD1-0305EB996D69}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"in_vgmstream\", \"winamp\\in_vgmstream.vcxproj\", \"{42D86561-8CE4-40F5-86CE-58C986B77502}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"foo_input_vgmstream\", \"fb2k\\foo_input_vgmstream.vcxproj\", \"{F3739CF2-F422-4A3D-BB0A-53C5D4C5ABA0}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"foobar2000_SDK\", \"dependencies\\foobar\\foobar2000\\SDK\\foobar2000_SDK.vcxproj\", \"{E8091321-D79D-4575-86EF-064EA1A4A20D}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"foobar2000_sdk_helpers\", \"dependencies\\foobar\\foobar2000\\helpers\\foobar2000_sdk_helpers.vcxproj\", \"{EE47764E-A202-4F85-A767-ABDAB4AFF35F}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"foobar2000_component_client\", \"dependencies\\foobar\\foobar2000\\foobar2000_component_client\\foobar2000_component_client.vcxproj\", \"{71AD2674-065B-48F5-B8B0-E1F9D3892081}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"pfc\", \"dependencies\\foobar\\pfc\\pfc.vcxproj\", \"{EBFFFB4E-261D-44D3-B89C-957B31A0BF9C}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"xmp-vgmstream\", \"xmplay\\xmp-vgmstream.vcxproj\", \"{49AF76F7-CBA0-4486-9DDF-51F30DF45F33}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libPPUI\", \"dependencies\\foobar\\libPPUI\\libPPUI.vcxproj\", \"{7729EB82-4069-4414-964B-AD399091A03F}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Win32 = Debug|Win32\r\n\t\tDebug|x64 = Debug|x64\r\n\t\tRelease|Win32 = Release|Win32\r\n\t\tRelease|x64 = Release|x64\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{54A6AD11-5369-4895-A06F-E255ABB99B11}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{54A6AD11-5369-4895-A06F-E255ABB99B11}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{54A6AD11-5369-4895-A06F-E255ABB99B11}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{54A6AD11-5369-4895-A06F-E255ABB99B11}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{54A6AD11-5369-4895-A06F-E255ABB99B11}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{54A6AD11-5369-4895-A06F-E255ABB99B11}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{54A6AD11-5369-4895-A06F-E255ABB99B11}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{54A6AD11-5369-4895-A06F-E255ABB99B11}.Release|x64.Build.0 = Release|x64\r\n\t\t{10E6BFC6-1E5B-46E4-BA42-F04DFBD0ABFF}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{10E6BFC6-1E5B-46E4-BA42-F04DFBD0ABFF}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{10E6BFC6-1E5B-46E4-BA42-F04DFBD0ABFF}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{10E6BFC6-1E5B-46E4-BA42-F04DFBD0ABFF}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{10E6BFC6-1E5B-46E4-BA42-F04DFBD0ABFF}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{10E6BFC6-1E5B-46E4-BA42-F04DFBD0ABFF}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{10E6BFC6-1E5B-46E4-BA42-F04DFBD0ABFF}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{10E6BFC6-1E5B-46E4-BA42-F04DFBD0ABFF}.Release|x64.Build.0 = Release|x64\r\n\t\t{330B53AE-4FAE-46DA-8785-9016DB4E3E23}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{330B53AE-4FAE-46DA-8785-9016DB4E3E23}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{330B53AE-4FAE-46DA-8785-9016DB4E3E23}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{330B53AE-4FAE-46DA-8785-9016DB4E3E23}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{330B53AE-4FAE-46DA-8785-9016DB4E3E23}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{330B53AE-4FAE-46DA-8785-9016DB4E3E23}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{330B53AE-4FAE-46DA-8785-9016DB4E3E23}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{330B53AE-4FAE-46DA-8785-9016DB4E3E23}.Release|x64.Build.0 = Release|x64\r\n\t\t{AF7D88A0-3CB1-4CD8-BAD1-0305EB996D69}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{AF7D88A0-3CB1-4CD8-BAD1-0305EB996D69}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{AF7D88A0-3CB1-4CD8-BAD1-0305EB996D69}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{AF7D88A0-3CB1-4CD8-BAD1-0305EB996D69}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{AF7D88A0-3CB1-4CD8-BAD1-0305EB996D69}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{AF7D88A0-3CB1-4CD8-BAD1-0305EB996D69}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{AF7D88A0-3CB1-4CD8-BAD1-0305EB996D69}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{AF7D88A0-3CB1-4CD8-BAD1-0305EB996D69}.Release|x64.Build.0 = Release|x64\r\n\t\t{42D86561-8CE4-40F5-86CE-58C986B77502}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{42D86561-8CE4-40F5-86CE-58C986B77502}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{42D86561-8CE4-40F5-86CE-58C986B77502}.Debug|x64.ActiveCfg = Debug|Win32\r\n\t\t{42D86561-8CE4-40F5-86CE-58C986B77502}.Debug|x64.Build.0 = Debug|Win32\r\n\t\t{42D86561-8CE4-40F5-86CE-58C986B77502}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{42D86561-8CE4-40F5-86CE-58C986B77502}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{42D86561-8CE4-40F5-86CE-58C986B77502}.Release|x64.ActiveCfg = Release|Win32\r\n\t\t{F3739CF2-F422-4A3D-BB0A-53C5D4C5ABA0}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{F3739CF2-F422-4A3D-BB0A-53C5D4C5ABA0}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{F3739CF2-F422-4A3D-BB0A-53C5D4C5ABA0}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{F3739CF2-F422-4A3D-BB0A-53C5D4C5ABA0}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{F3739CF2-F422-4A3D-BB0A-53C5D4C5ABA0}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{F3739CF2-F422-4A3D-BB0A-53C5D4C5ABA0}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{F3739CF2-F422-4A3D-BB0A-53C5D4C5ABA0}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{F3739CF2-F422-4A3D-BB0A-53C5D4C5ABA0}.Release|x64.Build.0 = Release|x64\r\n\t\t{E8091321-D79D-4575-86EF-064EA1A4A20D}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{E8091321-D79D-4575-86EF-064EA1A4A20D}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{E8091321-D79D-4575-86EF-064EA1A4A20D}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{E8091321-D79D-4575-86EF-064EA1A4A20D}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{E8091321-D79D-4575-86EF-064EA1A4A20D}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{E8091321-D79D-4575-86EF-064EA1A4A20D}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{E8091321-D79D-4575-86EF-064EA1A4A20D}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{E8091321-D79D-4575-86EF-064EA1A4A20D}.Release|x64.Build.0 = Release|x64\r\n\t\t{EE47764E-A202-4F85-A767-ABDAB4AFF35F}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{EE47764E-A202-4F85-A767-ABDAB4AFF35F}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{EE47764E-A202-4F85-A767-ABDAB4AFF35F}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{EE47764E-A202-4F85-A767-ABDAB4AFF35F}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{EE47764E-A202-4F85-A767-ABDAB4AFF35F}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{EE47764E-A202-4F85-A767-ABDAB4AFF35F}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{EE47764E-A202-4F85-A767-ABDAB4AFF35F}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{EE47764E-A202-4F85-A767-ABDAB4AFF35F}.Release|x64.Build.0 = Release|x64\r\n\t\t{71AD2674-065B-48F5-B8B0-E1F9D3892081}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{71AD2674-065B-48F5-B8B0-E1F9D3892081}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{71AD2674-065B-48F5-B8B0-E1F9D3892081}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{71AD2674-065B-48F5-B8B0-E1F9D3892081}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{71AD2674-065B-48F5-B8B0-E1F9D3892081}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{71AD2674-065B-48F5-B8B0-E1F9D3892081}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{71AD2674-065B-48F5-B8B0-E1F9D3892081}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{71AD2674-065B-48F5-B8B0-E1F9D3892081}.Release|x64.Build.0 = Release|x64\r\n\t\t{EBFFFB4E-261D-44D3-B89C-957B31A0BF9C}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{EBFFFB4E-261D-44D3-B89C-957B31A0BF9C}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{EBFFFB4E-261D-44D3-B89C-957B31A0BF9C}.Debug|x64.ActiveCfg = Release FB2K|x64\r\n\t\t{EBFFFB4E-261D-44D3-B89C-957B31A0BF9C}.Debug|x64.Build.0 = Release FB2K|x64\r\n\t\t{EBFFFB4E-261D-44D3-B89C-957B31A0BF9C}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{EBFFFB4E-261D-44D3-B89C-957B31A0BF9C}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{EBFFFB4E-261D-44D3-B89C-957B31A0BF9C}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{EBFFFB4E-261D-44D3-B89C-957B31A0BF9C}.Release|x64.Build.0 = Release|x64\r\n\t\t{49AF76F7-CBA0-4486-9DDF-51F30DF45F33}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{49AF76F7-CBA0-4486-9DDF-51F30DF45F33}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{49AF76F7-CBA0-4486-9DDF-51F30DF45F33}.Debug|x64.ActiveCfg = Debug|Win32\r\n\t\t{49AF76F7-CBA0-4486-9DDF-51F30DF45F33}.Debug|x64.Build.0 = Debug|Win32\r\n\t\t{49AF76F7-CBA0-4486-9DDF-51F30DF45F33}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{49AF76F7-CBA0-4486-9DDF-51F30DF45F33}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{49AF76F7-CBA0-4486-9DDF-51F30DF45F33}.Release|x64.ActiveCfg = Release|Win32\r\n\t\t{7729EB82-4069-4414-964B-AD399091A03F}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{7729EB82-4069-4414-964B-AD399091A03F}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{7729EB82-4069-4414-964B-AD399091A03F}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{7729EB82-4069-4414-964B-AD399091A03F}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{7729EB82-4069-4414-964B-AD399091A03F}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{7729EB82-4069-4414-964B-AD399091A03F}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{7729EB82-4069-4414-964B-AD399091A03F}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{7729EB82-4069-4414-964B-AD399091A03F}.Release|x64.Build.0 = Release|x64\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {31FD2BB7-AE1D-4803-8669-B881133780B0}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "vgmstream_msvc.props",
          "type": "blob",
          "size": 7.2451171875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!-- Default props (shown 'unchanged' in IDE), manually imported in .vcxproj. When modified .vcxproj are updated rather than this file.\r\n     Note that some config seemingly works in MSBuild (build tool) but not correctly in Visual Studio (actual IDE) and should be avoided:\r\n     - order matters (may not work in wrong places)\r\n     - .vcxprox should have all expected parts even if empty (.props don't need that)\r\n     - when editting, VS will usually only update existing tags \r\n       - changing a <PropertyGroup Label=\"Configuration\"> without Condition in GUI's Debug config may just update all props (no tag for different configs))\r\n     https://learn.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2022\r\n     https://learn.microsoft.com/en-us/cpp/build/reference/vcxproj-file-structure?view=msvc-170\r\n     Loosely based on libopus' props.\r\n-->\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <!-- <ItemGroup Label=\"ProjectConfigurations\" /> -->\r\n\r\n  <!-- <PropertyGroup Label=\"Globals\" /> -->\r\n\r\n  <!-- <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.default.props\" /> -->\r\n\r\n  <!-- doesn't work unless imported before default props, but not sure about the implications (use Directory.Build.props instead) -->\r\n  <!-- <PropertyGroup Label=\"Configuration\" Condition=\"...\"/> -->\r\n\r\n  <!-- <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" /> -->\r\n\r\n  <ImportGroup Label=\"ExtensionSettings\" />\r\n\r\n  <ImportGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"PropertySheets\">\r\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\r\n  </ImportGroup>\r\n  <ImportGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"PropertySheets\">\r\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\r\n  </ImportGroup>\r\n\r\n  <!-- common macros (\"..\" here refers from current .vcxproj) -->\r\n  <PropertyGroup Label=\"UserMacros\">\r\n    <VCmnDependenciesDir>../dependencies</VCmnDependenciesDir>\r\n    <!-- .h includes (.. for version.h) -->\r\n    <VLibAdditionalIncludeDirectories>..;../ext_includes;../ext_includes/ffmpeg;../ext_libs/Getopt;$(VCmnDependenciesDir)/qaac/mp4v2/include;$(VCmnDependenciesDir)/fdk-aac/libSYS/include;$(VCmnDependenciesDir)/fdk-aac/libAACdec/include</VLibAdditionalIncludeDirectories>\r\n    <VCliAdditionalIncludeDirectories>..;../ext_includes;../ext_libs/Getopt</VCliAdditionalIncludeDirectories>\r\n    <VFooAdditionalIncludeDirectories>..;$(VCmnDependenciesDir)/wtl/include;$(VCmnDependenciesDir)/foobar;$(VCmnDependenciesDir)/foobar/foobar2000</VFooAdditionalIncludeDirectories>\r\n    <VCmdAdditionalIncludeDirectories>..</VCmdAdditionalIncludeDirectories>\r\n    <!-- compile flags -->\r\n    <VLibPreprocessorDefinitions>VGMSTREAM_VERSION_AUTO;VGM_LOG_OUTPUT;VGM_USE_VORBIS;VGM_USE_MPEG;VGM_USE_FFMPEG;VGM_USE_G7221;VGM_USE_G719;VGM_USE_ATRAC9;VGM_USE_CELT;VGM_USE_SPEEX</VLibPreprocessorDefinitions>\r\n    <VCmnPreprocessorDefinitions>VGMSTREAM_VERSION_AUTO</VCmnPreprocessorDefinitions>\r\n    <VCliPreprocessorDefinitions>$(VCmnPreprocessorDefinitions)</VCliPreprocessorDefinitions>\r\n    <VFooPreprocessorDefinitions>$(VCmnPreprocessorDefinitions)</VFooPreprocessorDefinitions>\r\n    <VXmpPreprocessorDefinitions>$(VCmnPreprocessorDefinitions)</VXmpPreprocessorDefinitions>\r\n    <VWmpPreprocessorDefinitions>$(VCmnPreprocessorDefinitions);IN_VGMSTREAM_EXPORTS;VGM_WINAMP_UNICODE</VWmpPreprocessorDefinitions>\r\n    <!-- link .lib -->\r\n    <VCmnAdditionalDependencies32>../ext_libs/libvorbis.lib;../ext_libs/libmpg123-0.lib;../ext_libs/libg719_decode.lib;../ext_libs/avcodec.lib;../ext_libs/avformat.lib;../ext_libs/avutil.lib;../ext_libs/swresample.lib;../ext_libs/libatrac9.lib;../ext_libs/libcelt-0061.lib;../ext_libs/libcelt-0110.lib;../ext_libs/libspeex-1.lib</VCmnAdditionalDependencies32>\r\n    <VCliAdditionalDependencies32>$(VCmnAdditionalDependencies32);</VCliAdditionalDependencies32>\r\n    <VFooAdditionalDependencies32>$(VCmnAdditionalDependencies32);$(VCmnDependenciesDir)/foobar/foobar2000/shared/shared-Win32.lib</VFooAdditionalDependencies32>\r\n    <VCmnAdditionalDependencies64>../ext_libs/dll-x64/libvorbis.lib;../ext_libs/dll-x64/libmpg123-0.lib;../ext_libs/dll-x64/libg719_decode.lib;../ext_libs/dll-x64/avcodec.lib;../ext_libs/dll-x64/avformat.lib;../ext_libs/dll-x64/avutil.lib;../ext_libs/dll-x64/swresample.lib;../ext_libs/dll-x64/libatrac9.lib;../ext_libs/dll-x64/libcelt-0061.lib;../ext_libs/dll-x64/libcelt-0110.lib;../ext_libs/dll-x64/libspeex-1.lib</VCmnAdditionalDependencies64>\r\n    <VCliAdditionalDependencies64>$(VCmnAdditionalDependencies64)</VCliAdditionalDependencies64>\r\n    <VFooAdditionalDependencies64>$(VCmnAdditionalDependencies64);$(VCmnDependenciesDir)/foobar/foobar2000/shared/shared-x64.lib</VFooAdditionalDependencies64>\r\n    <VBuildCommandVersion>\"$(ProjectDir)..\\version-make.bat\"</VBuildCommandVersion>\r\n  </PropertyGroup>\r\n\r\n  <!-- common properties\r\n       OutDir: where .exe/dll/etc are copied\r\n       InDir: where .obj/logs/etc are generated -->\r\n  <PropertyGroup>\r\n    <OutDir Condition=\"'$(Platform)'=='Win32'\">$(SolutionDir)\\$(Configuration)\\</OutDir>\r\n    <OutDir Condition=\"'$(Platform)'=='x64'\">$(SolutionDir)\\$(Platform)\\$(Configuration)\\</OutDir>\r\n    <IntDir>$(SolutionDir)\\build-msvc\\$(Platform)-$(Configuration)\\$(ProjectName)\\</IntDir>\r\n  </PropertyGroup>\r\n\r\n  <!-- common compile config -->\r\n  <ItemDefinitionGroup>\r\n    <ClCompile>\r\n      <WarningLevel>Level3</WarningLevel>\r\n      <FloatingPointModel Condition=\"'$(Configuration)'=='Release'\">Fast</FloatingPointModel>\r\n      <FloatingPointModel Condition=\"'$(Configuration)'!='Release'\">Precise</FloatingPointModel>\r\n      <DisableSpecificWarnings>4018;4996;%(DisableSpecificWarnings)</DisableSpecificWarnings>\r\n    </ClCompile>\r\n    <PreBuildEvent>\r\n      <Message>Generating version</Message>\r\n      <Command>$(VBuildCommandVersion)</Command>\r\n    </PreBuildEvent>\r\n  </ItemDefinitionGroup>\r\n  <ItemDefinitionGroup Condition=\"'$(Configuration)'=='Debug'\">\r\n    <ClCompile>\r\n      <Optimization>Disabled</Optimization>\r\n      <EnableEnhancedInstructionSet>NoExtensions</EnableEnhancedInstructionSet>\r\n      <DebugInformationFormat>EditAndContinue</DebugInformationFormat>\r\n      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>\r\n    </ClCompile>\r\n  </ItemDefinitionGroup>\r\n  <ItemDefinitionGroup Condition=\"'$(Configuration)'=='Release'\">\r\n    <ClCompile>\r\n      <Optimization>MaxSpeed</Optimization>\r\n      <EnableEnhancedInstructionSet>NoExtensions</EnableEnhancedInstructionSet>\r\n      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>\r\n    </ClCompile>\r\n  </ItemDefinitionGroup>\r\n  <ItemDefinitionGroup Condition=\"'$(Platform)'=='Win32'\">\r\n    <Link>\r\n      <TargetMachine>MachineX86</TargetMachine>\r\n    </Link>\r\n  </ItemDefinitionGroup>\r\n  <ItemDefinitionGroup Condition=\"'$(Platform)'=='x64'\">\r\n    <Link>\r\n      <TargetMachine>MachineX64</TargetMachine>\r\n    </Link>\r\n  </ItemDefinitionGroup>\r\n\r\n  <!-- <ItemGroup /> -->\r\n\r\n  <!-- <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" /> -->\r\n\r\n  <!-- <ImportGroup Label=\"ExtensionTargets\" /> -->\r\n</Project>"
        },
        {
          "name": "vspf.py",
          "type": "blob",
          "size": 5.4638671875,
          "content": "# Visual Studio project fixer\r\n#\r\n# VS updates automatically project files every time a new source file is added, but they are\r\n# a pain to maintain if aren't using VS. CL compiler supports wildcards in .vcxprojs, but VS\r\n# doesn't and won't update the file list (and probably causes other issues). Meanwhile CMake\r\n# creates ugly stuff with full paths that can't be added to SCC, meaning new/old users need\r\n# to call cmake every time stuff changes around. So for now, this tool updates the expected\r\n# file list so MS is happy and I don't have to babysit this crap.\r\n#\r\n# Reads/writes lines as to keep original structure (python's XML functions re-create the document).\r\n# It's brittle though, and only works with the known structure used here.\r\n\r\nimport os, glob\r\n\r\nTEST_OUTPUT = False\r\nBASE_SRC_PATH = '.'\r\n\r\nclass ProjectFixer:\r\n\r\n    def __init__(self, prj_pathname):\r\n        self.prj_pathname = prj_pathname\r\n        self.prj_path = os.path.dirname(prj_pathname)\r\n        #self.prj_name = os.path.basename(prj_pathname)\r\n        self.in_lines = []\r\n        self.out_lines = []\r\n        self.is_filters = False\r\n\r\n        if prj_pathname.lower().endswith('.vcxproj'):\r\n            self.is_filters = False\r\n        elif prj_pathname.lower().endswith('.vcxproj.filters'):\r\n            self.is_filters = True\r\n        else:\r\n            raise ValueError(\"unsupported file\")\r\n\r\n    def is_changed(self):\r\n        # no change in src means output files should be the exact same as input \r\n        return self.in_lines != self.out_lines\r\n\r\n\r\n    def read(self):\r\n        with open (self.prj_pathname, 'r', encoding='utf-8-sig') as f:\r\n            lines = f.readlines()\r\n            self.in_lines = [line.strip('\\r\\n') for line in lines]\r\n\r\n    def add(self, text):\r\n            self.out_lines.append(text)\r\n\r\n    def get_files(self, ext):\r\n        files = glob.glob(self.prj_path + '/**/*.' + ext, recursive=True)\r\n\r\n        items = []\r\n        for file in files:\r\n            basefile = file[len(self.prj_path) + 1 : ].replace('/', '\\\\')\r\n            path = ''\r\n            if '\\\\' in basefile:\r\n                pos = basefile.rindex('\\\\')\r\n                path = basefile[0 : pos + 1]\r\n            basename = os.path.basename(basefile)\r\n            if basename.startswith('.'): #hidden .c\r\n                continue\r\n\r\n            items.append( (basefile, path) )\r\n        return items\r\n\r\n\r\n    def write_section(self, is_includes):\r\n        if is_includes:\r\n            ext = 'h'\r\n            tpls = [\r\n                '    <ClInclude Include=\"%s\">',\r\n                '      <Filter>%sHeader Files</Filter>',\r\n                '    </ClInclude>',\r\n                '    <ClInclude Include=\"%s\" />',\r\n            ]\r\n        else:\r\n            ext = 'c'\r\n            tpls = [\r\n                '    <ClCompile Include=\"%s\">',\r\n                '      <Filter>%sSource Files</Filter>',\r\n                '    </ClCompile>',\r\n                '    <ClCompile Include=\"%s\" />',\r\n            ]\r\n        self.write_section_internal(ext, tpls)\r\n\r\n    def write_section_internal(self, ext, tpls):\r\n        files = self.get_files(ext)\r\n        for basefile, path in files:\r\n            if self.is_filters:\r\n                self.add(tpls[0] % (basefile))\r\n                self.add(tpls[1] % (path))\r\n                self.add(tpls[2])\r\n            else:\r\n                self.add(tpls[3] % (basefile))\r\n\r\n\r\n    # - VS projects are organized in sections \r\n    # - writes lines if not target section\r\n    # - when target section found (includes or compiles), redo section's files again\r\n    def process(self):\r\n\r\n        lines_itr = iter(self.in_lines)\r\n        for line in lines_itr:\r\n            self.add(line)\r\n\r\n            if '<ItemGroup' not in line:\r\n                continue\r\n\r\n            # section start\r\n            next_line = next(lines_itr)\r\n\r\n            is_includes = '<ClInclude' in next_line\r\n            is_compiles = '<ClCompile' in next_line\r\n\r\n            if is_includes or is_compiles:\r\n                # include/compile section\r\n                self.write_section(is_includes)\r\n\r\n                # consume rest of files until section end\r\n                for subline in lines_itr:\r\n                    if '</ItemGroup' in subline:\r\n                        self.add(subline)\r\n                        break\r\n            else:\r\n                # other type\r\n                self.add(next_line)\r\n\r\n        #print(\"done\", len(self.out_lines))\r\n\r\n    def write(self):\r\n        if not self.is_changed():\r\n            print(\"no changes detected for %s\" % (self.prj_pathname))\r\n            return\r\n\r\n        out_name = self.prj_pathname\r\n        if TEST_OUTPUT:\r\n            out_name += '.test'\r\n        print(\"writting \" + out_name)\r\n\r\n\r\n        with open(out_name, 'w', newline='\\r\\n', encoding='utf-8-sig') as f:\r\n            #f.write(codecs.BOM_UTF8)\r\n            f.write('\\n'.join(self.out_lines))\r\n\r\n    def start(self):\r\n        self.read()\r\n        self.process()\r\n        self.write()\r\n\r\n\r\ndef main():\r\n    types = [\r\n        './src/*.vcxproj',\r\n        './src/*.vcxproj.filters',\r\n        #'./cli/*.vcxproj',\r\n        #'./cli/*.vcxproj.filters',\r\n        './winamp/*.vcxproj',\r\n        './winamp/*.vcxproj.filters',\r\n        './xmplay/*.vcxproj',\r\n        './xmplay/*.vcxproj.filters',\r\n    ]\r\n\r\n    for type in types:\r\n        files = glob.glob(type, recursive=True)\r\n        for file in files:\r\n            print('fixing ' + file)\r\n            ProjectFixer(file).start()\r\n\r\nmain()\r\n\r\n#ProjectFixer('libvgmstream.vcxproj').start()\r\n#ProjectFixer('libvgmstream.vcxproj.filters').start()\r\n"
        },
        {
          "name": "winamp",
          "type": "tree",
          "content": null
        },
        {
          "name": "xmplay",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}