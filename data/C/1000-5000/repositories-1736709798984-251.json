{
  "metadata": {
    "timestamp": 1736709798984,
    "page": 251,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stellar/stellar-core",
      "stars": 3159,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.1533203125,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  LLVM\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: DontAlign\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: AllDefinitions\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: false\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel:  true\n  AfterClass:      true\n  AfterControlStatement: Always\n  AfterEnum:       true\n  AfterFunction:   true\n  AfterNamespace:  true\n  AfterObjCDeclaration: false\n  AfterStruct:     true\n  AfterUnion:      true\n  AfterExternBlock: true\n  BeforeCatch:     true\n  BeforeElse:      true\n  BeforeLambdaBody: false\n  BeforeWhile:     false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: true\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: false\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeCategories:\n  - Regex:           '^\"util/asio\\.h'\n    Priority:        -1\n  - Regex:           '^\".*'\n    Priority:        1\n  - Regex:           '^\"lib/.*'\n    Priority:        2\n  - Regex:           '^<.*'\n    Priority:        3\n  - Regex:           '.\\*'\n    Priority:        4\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: false\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\nUseCRLF: false\n...\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 1.2470703125,
          "content": "; This file sets emacs variables that are helpful for editing stellar-core\n\n((c-mode . ((indent-tabs-mode .  nil)))\n (c++-mode . ((indent-tabs-mode .  nil)))\n (nil . ((flycheck-clang-language-standard . \"c++11\")\n         (flycheck-clang-include-path . (\".\"\n                                         \"src\"\n                                         \"lib/asio/asio/include\"\n                                         \"lib/autocheck/include\"\n                                         \"lib/cereal/include\"\n                                         \"lib/util\"\n                                         \"lib/soci/src/core\"\n                                         \"lib/soci/src/backends/sqlite3\"\n                                         \"lib/xdrpp\"\n                                         \"lib/sqlite\"\n                                         \"lib/libsodium/src/libsodium\"\n                                         \"lib/libmedida/src\"\n                                         ))\n         (whitespace-style . (face tabs tab-mark trailing lines-tail empty))\n         (c-file-style . \"stroustrup\")\n         (eval . (add-to-list 'auto-mode-alist '(\"\\\\.h\\\\'\" . c++-mode)))\n         (eval . (if (boundp 'c-offsets-alist)\n                     (add-to-list 'c-offsets-alist '(innamespace . -)))))))\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 1.140625,
          "content": "**/*.a\n**/*.o\n**/*.Po\n**/*.Plo\n**/*.o.tmp\n**/*.obj\n**/*.la\n**/*.lax\n**/*.lo\n**/*.log\n**/*.lib\n**/*.user\n**/*.xdr\n**/*.gz\n**/*.cache\n**/*.tlog\n**/*.lastbuildstate\n**/*.idb\n**/*.pdb\n**/*.exe\n**/*.ilk\n**/*.opensdf\n**/*.sdf\n**/*.suo\n**/*.trs\n**/*.db\n**/*.d\n\n**/*~\n**/*.swp\n**/.vscode/*\n.idea\n.clangd\n\n**/.libs\n**/.deps\n**/.dirstamp\n\nINSTALL\n\nsrc/stellar-core\n\nsrc/archtmp-*\nsrc/main/StellarCoreVersion.cpp\nsrc/testdata\nsrc/xdr/*.h\nMakefile\nMakefile.in\naclocal.m4\nautom4te.cache\nbuild\nsrc/stellar-core\nbuckets\ncompile\nconfig.h\nconfig.h.in\nconfig.log\nconfig.status\nconfig.guess\nconfig.sub\nlibtool\nltmain.sh\nm4/libtool.m4\nm4/lt*.m4\nconfigure\nar-lib\ndepcomp\nmissing\ntest-driver\nstamp-h1\nylwrap\nsrc/Makefile\nsrc/Makefile.in\nlib/Makefile\nlib/Makefile.in\nsrc/src.mk\nlib/medida.mk\nlib/lib.mk\nscripts/*.graphml\nscripts/*.json\n\n# test output\n**/*.res\n**/*.trs\n**/*.exp\nstellar-core-test-*\ntest-partitions.*\nfuzz-findings\nmin-testcases\nmy-history\nperformance-eval\nbuckets\nlib/spdlog/build\nlib/tracy/profiler/build\nlib/xdrpp/tests/test-*\nlib/asio/src/doc\nlib/asio/src/examples\nlib/libmedida/test/\n\n# Windows specific\n**/Build\n**/generated\n**/x64\n**/*.opendb\n**/*.vcxproj.user\n**/.vs\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.12109375,
          "content": "*.sln    text -merge eol=crlf\n*.vcxproj text -merge eol=crlf\n*.vcxproj.filters text -merge eol=crlf\n*.sh text -merge eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5751953125,
          "content": "*.a\n*.o\n*.o.tmp\n*.obj\n*.la\n*.lo\n*.log\n*.lib\n*.user\n*.xdr\n*.cache\n*.tlog\n*.lastbuildstate\n*.idb\n*.pdb\n*.exe\n*.ilk\n*.opensdf\n*.sdf\n*.suo\n*.trs\n*.db\n\n# build stamps\n*.stamp\n\n# sourcetrail\ncompile_commands.json\n*.srctrlbm\n*.srctrldb\n*.srctrlprj\n\n# text editors\n*~\n*.swp\n**/.vscode/*\n.idea\n.clangd\n\n.libs\n.deps\n.dirstamp\n\n/INSTALL\n\n/src/archtmp-*\n/src/main/StellarCoreVersion.cpp\n/src/main/XDRFilesSha256.cpp\n/src/rust/soroban/tmp\n/src/rust/src/dep-trees/*-actual.txt\n\n/src/testdata/*\n# Make an exception for ledger-close-meta files, which should be created and committed on every protocol bump.\n!/src/testdata/ledger-close-meta-*\n\n/src/protocol-curr/xdr/*.h\n/src/protocol-next/xdr/*.h\n/Makefile\n/Makefile.in\n/aclocal.m4\n/autom4te.cache\n/build\n/src/stellar-core\n/buckets\n/compile\n/config.h\n/config.h.in\n/config.log\n/config.status\n/config.guess\n/config.sub\n/libtool\n/ltmain.sh\n/m4/libtool.m4\n/m4/lt*.m4\n/configure\n/ar-lib\n/depcomp\n/missing\n/test-driver\n/stamp-h1\n/ylwrap\n/src/Makefile\n/src/Makefile.in\n/lib/Makefile\n/lib/Makefile.in\n/src/src.mk\n/lib/medida.mk\n/lib/lib.mk\n/scripts/*.graphml\n/scripts/*.json\n\n# test output\nstellar-core-test-*\ntest-partitions.*\nfuzz-findings/\nmin-testcases/\n/my-history/\n\n# Rust specific\n/src/rust/bin\n/src/rust/target\n/target\n**/target/\n/ra-target\n/src/rust/RustBridge.cpp\n/src/rust/RustBridge.h\n/src/rust/.crates.toml\n/src/rust/.crates2.json\n\n# Windows specific\n**/Build/*\n**/generated/*\n**/x64/*\n*.opendb\n*.vcxproj.user\n**/.vs/*\n\n/src/util/xdrquery/XDRQueryScanner.cpp\n/src/util/xdrquery/XDRQueryParser.h\n/src/util/xdrquery/XDRQueryParser.cpp\n/src/util/xdrquery/stack.hh\n\n__pycache__\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.16015625,
          "content": "[submodule \"lib/libsodium\"]\n\tpath = lib/libsodium\n\turl = https://github.com/stellar/libsodium.git\n[submodule \"lib/xdrpp\"]\n\tpath = lib/xdrpp\n\turl = https://github.com/xdrpp/xdrpp.git\n[submodule \"lib/libmedida\"]\n\tpath = lib/libmedida\n\turl = https://github.com/stellar/medida.git\n[submodule \"lib/cereal\"]\n\tpath = lib/cereal\n\turl = https://github.com/USCiLab/cereal\n[submodule \"lib/asio\"]\n\tpath = lib/asio\n\turl = https://github.com/chriskohlhoff/asio.git\n[submodule \"lib/fmt\"]\n\tpath = lib/fmt\n\turl = https://github.com/fmtlib/fmt\n[submodule \"lib/tracy\"]\n\tpath = lib/tracy\n\turl = https://github.com/stellar/tracy\n[submodule \"lib/spdlog\"]\n\tpath = lib/spdlog\n\turl = https://github.com/gabime/spdlog\n\tignore = dirty\n[submodule \"src/protocol-next/xdr\"]\n\tpath = src/protocol-next/xdr\n\turl = https://github.com/stellar/stellar-xdr\n\tbranch = next\n[submodule \"src/protocol-curr/xdr\"]\n\tpath = src/protocol-curr/xdr\n\turl = https://github.com/stellar/stellar-xdr\n\tbranch = curr\n[submodule \"src/rust/soroban/p21\"]\n\tpath = src/rust/soroban/p21\n\turl = https://github.com/stellar/rs-soroban-env\n[submodule \"src/rust/soroban/p22\"]\n\tpath = src/rust/soroban/p22\n\turl = https://github.com/stellar/rs-soroban-env\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "Builds",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 12.1650390625,
          "content": "# How to contribute\n\n👍🎉 First off, thanks for taking the time to contribute! 🎉👍\n\nCheck out the [Stellar Contribution\nGuide](https://github.com/stellar/.github/blob/master/CONTRIBUTING.md) for details on contributing\nto stellar-core and Stellar's other repositories, especially with regard to our code of conduct and\ncontributor license agreement.\n\n## Submitting Changes\n\nFork the `stellar/stellar-core` repo on github and submit a pull request from a branch in your fork. \nKey things to keep in mind:\n* Keep your branch up-to-date by rebasing on `stellar/stellar-core` `master`\n* Ensure your branch focuses on a single issue at a time\n* Before merging, squash your commits and ensure you have a descriptive commit message\n\n## Stellar Core Contribution Specifics\n\n### General\n* Try to separate logically distinct changes into separate commits and thematically distinct\n  commits into separate pull requests.\n* Please ensure that all tests pass before submitting changes. The local testsuite can be run as\n  `make check` or `src/stellar-core test`, see [Running Tests](#running-tests).\n\n### Keeping our commit history clean\n\nWe're striving to keep master's history with minimal merge bubbles. To achieve this, we're asking\nPRs to be submitted rebased on top of master.\n\nTo keep your local repository in a \"rebased\" state, simply run:\n* `git config branch.autosetuprebase always` _changes the default for all future branches_\n* `git config branch.master.rebase true` _changes the setting for branch master_\n\nNote: you may still have to run manual \"rebase\" commands on your branches, to rebase on top of\nmaster as you pull changes from upstream.\n\n### Testing\n\nPlease ensure that all tests pass before submitting changes. The local testsuite can be run as\n`make check` or `src/stellar-core --test`, see [Running Tests](#running-tests).\n\n### Code Style\n\nCode formatting wise, we have a `.clang-format` config file that you should use on modified files.\n\n- Names of structs and classes are camel case with the first letter capital, eg. `class MyClassName`\n- Names of functions and local variables are camel case with the first letter lowercase, eg. `void\n  myFunctionName()` or `int myLocalInt`\n- Names of member variables are camel case with the first letter \"m\", eg. `int mMyMemberInt`\n- Names of compile-time constants are macro case, eg. `int const MY_CONST_INT`\n- Braces appear on their own line\n- Braces are not omitted for a control statement with only a single statement in its scope\n- const appears to the right of the type, eg. `int const` or `int const&`\n\n### Performance Enhancements\n\nWhen submitting changes that may impact performance, you need to also provide some evidence of the\nimprovement (which also implies no regression). See the [performance\nevaluation](../performance-eval/performance-eval.md) document for more details.\n\n### Special configure flags for improved diagnostics\n\nWhen building with `configure`, a few options are available to enable better diagnostics when\nrunning tests.\n\nIt is strongly recommended to enable C++ runtime checks and the address sanitizer during\ndevelopment by passing the following flags to configure (in addition to other flags that you may\nneed):\n\n    ./configure --enable-extrachecks --enable-asan\n\n#### enable-extrachecks\nThis enables additional debug checks such as passed the end iterators.\n\nMore information can be found:\n* [libstdc++ debug mode](https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode.html)\n* [libc++ debug mode](https://libcxx.llvm.org/docs/DesignDocs/DebugMode.html#using-debug-mode)\n  * Note that when using the default libc++, we set `_LIBCPP_DEBUG=0` to avoid compatibility issues with the default shared runtimes.\n  * To enable full debug mode `_LIBCPP_DEBUG=1`, you need to build a custom libc++ with the same flags, including `_LIBCPP_DEBUG=1` (see below on how to do this)\n\n#### enable-codecoverage\nThis enables source based code coverage.\n\nMore information can be found [here](https://clang.llvm.org/docs/SourceBasedCodeCoverage.html)\n\nSteps (tested on Mac OS):\n\n1. Run `./configure --enable-codecoverage` (include `--enable-next-protocol-version-unsafe-for-production` if testing a future protocol version)\n2. Compile stellar core\n3. Run the desired test, but with the LLVM_PROFILE_FILE environment variable set (ex. `LLVM_PROFILE_FILE=\"cov.profraw\" src/stellar-core test '[liquiditypool]'`). This should generate a cov.profraw file in the current directory.\n4. Run `xcrun llvm-profdata merge -output=cov.profdata cov.profraw`\n   * the llvm tools are only accessible on Mac OS through `xcrun`\n5. Run `xcrun llvm-cov show ./src/stellar-core -instr-profile=cov.profdata -format=\"html\" > cov.html`\n   * The resulting html file can be around ~45MB, so it can be difficult to navigate with a\n   browser. You can use the `-ignore-filename-regex` option to remove files/directories that you aren't\n   interested in (ex. The following option excludes every directory specified `-ignore-filename-regex='.*lib[/\\\\].*|.*bucket[/\\\\].*|.*catchup[/\\\\].*|.*crypto[/\\\\].*|.*database[/\\\\].*|.*herder[/\\\\].*|.*history[/\\\\].*|.*historywork[/\\\\].*|.*overlay[/\\\\].*|.*xdr[/\\\\].*|.*sodium[/\\\\].*|.*work[/\\\\].*|.*test[/\\\\].*|.*scp[/\\\\].*|.*main[/\\\\].*|.*simulation[/\\\\].*|.*invariant[/\\\\].*|.*util[/\\\\].*'`)\n\n\n### Special configure flags for unreleased protocol versions\n\nWhen building with `configure`, the flag below must be used to enable unreleased protocol\nversions. If this flag is not provided code and tests relating to the next protocol version will\nnot execute.\n\n    ./configure --enable-next-protocol-version-unsafe-for-production\n\n## Sanitizers\n\nSanitizers are mutually exclusive.\n\n### enable-asan\nBuild with asan (address-sanitizer) instrumentation, which detects invalid address utilization.\n\nSee https://clang.llvm.org/docs/AddressSanitizer.html for more information.\n\n### enable-undefinedcheck\nbuild with undefinedcheck (undefined-behavior-sanitizer) instrumentation.\n\nSee https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html for more information.\n\n### enable-memcheck\nbuild with memcheck (memory-sanitizer) instrumentation.\nSee https://clang.llvm.org/docs/MemorySanitizer.html for more information.\n\n`memcheck` only works with clang and `libc++`.\n\nFor memcheck to work, you will need to compile your own version of `libc++` (see below), and pass\nthe path to your libraries to the configure script using the `LIBCXX_PATH` variable, something\nlike:\n\n    ./configure --disable-postgres --enable-memcheck LIBCXX_PATH=/home/user/src/llvm/libcxx_msan/lib\n\nIf you do not have an instrumented version of `libpq` (postgres client library), you may get false\npositives as well (disabling postgres is a good workaround).\n\nWhat the configure script does under the cover is use the custom version of your library at link\ntime, but still uses the system headers - so make sure that the two don't conflict!\n\n### enable-threadsanitizer\nBuild with thread sanitizer (TSan) instrumentation, which detects data races.\n\nSee https://clang.llvm.org/docs/ThreadSanitizer.html for more information.\n\n#### Building a custom `libc++`\n\nThe steps for building an instrumented version of libc++ can be found on the [memory sanitizer\nhow-to](https://github.com/google/sanitizers/wiki/MemorySanitizerLibcxxHowTo#instrumented-libc).\n\nWhen done, note the path to `libc++.so` and `libc++abi.so` (that will be passed with `LIBCXX_PATH`\nto the configure script).\n\n# Running tests\n\nThere are two ways to run tests:\n\n- `src/stellar-core test`\n- `make check`\n\nAlways build before running tests, unless using `make check` which will build for you. See [INSTALL.md](./INSTALL.md) for instructions for how to build.\n\n## Running tests basics with `src/stellar-core test`\nrun tests with:\n  `src/stellar-core test`\n\nrun one test with:\n  `src/stellar-core test  testName`\n\nrun one test category with:\n  `src/stellar-core test '[categoryName]'`\n\nCategories (or tags) can be combined: AND-ed (by juxtaposition) or OR-ed (by comma-listing).\n\nTests tagged as `[.]` or `[hide]` are not part of the default test.\n\nTests tagged as `[acceptance]` are not part of `make check` test runs.\n\nsupported test options can be seen with\n  `src/stellar-core test --help`\n\ndisplay tests timing information:\n  `src/stellar-core test -d yes '[categoryName]'`\n\nxml test output (includes nested section information):\n  `src/stellar-core test -r xml '[categoryName]'`\n\nTests may also be run with `make check`, see [Running tests in parallel](#running tests-in-parallel-with-make-check).\n\n## Running tests against postgreSQL\n\nThere are two options.  The easiest is to have the test suite just\ncreate a temporary postgreSQL database cluster in /tmp and delete it\nafter the test.  That will happen by default if you run `make check`.\n\nYou can also use an existing database cluster so long as it has\ndatabases named `test0`, `test1`, ..., `test9`, and `test`.  To set\nthis up, make sure your `PGHOST` and `PGUSER` environment variables\nare appropriately set, then run the following from bash:\n\n    for i in $(seq 0 9) ''; do\n        psql -c \"create database test$i;\"\n    done\n\nYou will need to set the `TEMP_POSTGRES` environment variable to 0\nin order to use an existing database cluster.\n\n## Running tests in parallel with `make check`\n\nThe `make check` command runs tests and supports parallelization. This functionality is enabled with the following environment variables:\n* `ALL_VERSIONS`: If 0, runs the latest protocol version, if 1 runs all protocol version tests.\n* `TEST_SPEC`: Used to run just a subset of the tests (default: \"~[.]\")\n* `NUM_PARTITIONS`: Partitions the test suite (after applying `TEST_SPEC`) into\n`$NUM_PARTITIONS` disjoint sets (default: 1)\n* `BATCHSIZE`: The number of tests to be batched together to reduce setup overhead. (default: 5)\n* `RUN_PARTITIONS`: Run only a subset of the partitions, indexed from 0\n(default: \"$(seq 0 $((NUM_PARTITIONS-1)))\")\n* `TEMP_POSTGRES`: Automatically generates temporary database clusters instead\nof using an existing cluster (default: 1)\n* `RND_SEED`: Can be set to a specific value to affect the random test ordering. (default: 1)\n\nFor example,\n`env TEST_SPEC=\"[history]\" NUM_PARTITIONS=4 RUN_PARTITIONS=\"0 1 3\" make check`\nwill partition the history tests into 4 parts then run parts 0, 1, and 3.\n\n## Running stress tests\n\nThere are a few special stress tests included in the test suite. Those are *subsystem level* tests,\nnot to be confused with more advanced tests that would be done as part of [performance\nevaluation](../performance-eval/performance-eval.md).\n\nWe adopt the convention of tagging a stress-test for subsystem foo as [foo-stress][stress][hide].\n\nThen, running:\n\n* `stellar-core test [stress]` will run all the stress tests,\n* `stellar-core test [foo-stress]` will run the stress tests for subsystem foo alone, and\n* neither `stellar-core test` nor `stellar-core test [foo]` will run stress tests.\n\n## Running and updating TxMeta checks\n\nThe `stellar-core test` unit tests can be run in two special modes that hash the\nTxMeta of each transaction executed. These two modes can increase confidence\nthat a change to stellar-core does not alter the semantics of any transactions.\nThe two modes are:\n\n  * `--record-test-tx-meta <dirname>` which records TxMeta hashes into `<dirname>`\n  * `--check-test-tx-meta <dirname>` which checks TxMeta hashes against `<dirname>`\n\nContinuous integration tests automatically run the `--check-test-tx-meta` mode\nagainst a pair of captured baseline directories stored in the repository, called\n`test-tx-meta-baseline-current` (for the current protocol) and\n`text-tx-meta-baseline-next` (for the next protocol). If you make _intentional_\nchanges to the semantics of any transactions, or add any new transactions that\nneed to have their hashes recorded, you can re-record the baseline using a\ncommand like:\n\n    stellar-core test [tx] --all-versions --rng-seed 12345 --record-test-tx-meta test-tx-meta-baseline-current\n\nfor a build with only the current protocol enabled, and:\n\n    stellar-core test [tx] --all-versions --rng-seed 12345 --record-test-tx-meta test-tx-meta-baseline-next\n\nfor a build configured with `--enable-next-protocol-version-unsafe-for-production`.\n\nThese commands will rewrite the baseline files, which are human-readable JSON\nfiles. You should then inspect to see that only the transactions you expected to\nsee change did so. If so, commit the changes as a new set of baselines for\nfuture tests.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 6.8193359375,
          "content": "Copyright 2014-2020 Stellar Development Foundation and contributors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nAs well as the file LICENSE-APACHE.txt adjacent to this file.\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\nAdditional files found in the subdirectory lib are copies of liberally\nlicensed external libraries (that we believe to be compatible with the license\ntext of the collective work, above). The following are restatements of license\ninformation found in those files and/or their respective upstream repositories:\n\nlib/autocheck:\n\n  The Autocheck library,\n  Copyright 2012-2013 John Freeman\n  (https://github.com/thejohnfreeman)\n  Licensed under the MIT license\n  (http://opensource.org/licenses/MIT)\n\nlib/asio:\n\n  The ASIO library,\n  Copyright 2003-2015 Christopher M. Kohlhoff\n  (chris at kohlhoff dot com)\n  (http://think-async.com/Asio)\n  Licensed under the Boost Software License 1.0\n  (http://www.boost.org/LICENSE_1_0.txt)\n\nlib/binaryfusefilter.h:\n\n  The FastFilter library,\n  Copyright 2023 Daniel Lemire\n  (daniel at lemire dot me)\n  (<https://github.com/FastFilter/xor_singleheader>)\n  Licensed under the Apache License, Version 2.0\n  (<https://www.apache.org/licenses/LICENSE-2.0>)\n\nlib/catch.hpp:\n\n  The Catch library,\n  Copyright 2012 Two Blue Cubes Ltd.\n  (https://github.com/catchorg/Catch2)\n  Licensed under the Boost Software License 1.0\n  (http://www.boost.org/LICENSE_1_0.txt)\n\nlib/http:\n\n  Example HTTP server from the ASIO library,\n  Copyright 2003-2014 Christopher M. Kohlhoff\n  (chris at kohlhoff dot com)\n  (http://think-async.com/Asio)\n  Licensed under the Boost Software License 1.0\n  (http://www.boost.org/LICENSE_1_0.txt)\n\nlib/util/getopt.h and getopt_long.c:\n\n  NetBSD's getopt/getopt_long libraries,\n  Copyright 2000 The NetBSD Foundation, Inc.\n  Copyright 2002 2002 Todd C. Miller <Todd.Miller@courtesan.com>\n  Licensed under the 2-clause BSD license\n  (http://opensource.org/licenses/BSD-2-Clause)\n\nlib/util/cpptoml.h:\n\n  The cpptoml library,\n  Copyright 2013-2014 Chase Geigle\n  (https://github.com/skystrife)\n  Licensed under the MIT license\n  (http://opensource.org/licenses/MIT)\n\nlib/fmt/:\n\n  The cppformat library,\n  Copyright 2012, Victor Zverovich\n  (victor.zverovich@gmail.com)\n  (https://github.com/fmtlib/fmt)\n  Licensed under the MIT license\n  (http://opensource.org/licenses/MIT)\n\nlib/json/:\n\n  The JsonCpp library,\n  Copyright (c) 2007-2010 Baptiste Lepilleur\n  (blep@users.sourceforge.net)\n  (https://github.com/open-source-parsers/jsoncpp)\n  Licensed under the MIT license\n  (http://opensource.org/licenses/MIT)\n\nlib/cereal:\n\n  The cereal library,\n  Copyright 2014, Randolph Voorhies, Shane Grant\n  (voorhies@usc.edu, wgrant@usc.edu)\n  (https://github.com/USCiLab/cereal)\n  Licensed under the 3-clause BSD license\n  (http://opensource.org/licenses/BSD-3-Clause)\n\nlib/cereal/external/rapidjson:\n\n  The RapidJSON library,\n  Copyright 2011 Milo Yip\n  (miloyip@gmail.com)\n  Licensed under the MIT license\n  (http://opensource.org/licenses/MIT)\n\nlib/sqlite:\n\n  The SQLite library,\n  dedicated to the public domain\n  (http://sqlite.org/)\n  (https://www.sqlite.org/copyright.html)\n\nlib/soci:\n\n  The SOCI library,\n  Copyright 2008 Maciej Sobczak\n  (maciej@msobczak.com)\n  (https://github.com/SOCI/soci)\n  Licensed under the Boost Software License 1.0\n  (http://www.boost.org/LICENSE_1_0.txt)\n\nlib/libsodium:\n\n  Sodium,\n  Copyright (c) 2013-2022\n  (Frank Denis <j at pureftpd dot org>)\n  (https://github.com/jedisct1/libsodium)\n  Licensed under the ISC license\n  (https://en.wikipedia.org/wiki/ISC_license)\n\nlib/libmedida:\n\n  The Medida library,\n  Copyright 2012 Daniel Lundin\n  (https://github.com/dln/medida)\n  Licensed under the Apache License, Version 2.0\n  (https://www.apache.org/licenses/LICENSE-2.0)\n\nlib/libmedida/src/medida/stats/ckms.{cpp,h}\n\n  CKMS implementation from https://github.com/jupp0r/prometheus-cpp\n  Local modifications made by Stellar Development Foundation\n  Copyright 2016-2019 Jupp Mueller\n  Copyright 2017-2019 Gregor Jasny\n  Licensed under the MIT license\n  (http://opensource.org/licenses/MIT)\n\nlib/util/uint128_t.h\n\n  large_int implementation from https://github.com/zhanhb/int128\n  Copyright (c) 2018 zhanhb\n  Licensed under the MIT license\n  (http://opensource.org/licenses/MIT)\n\nlib/util/lrucache.hpp\n\n  The LRUCache libary\n  Copyright 2014 Alexander Ponomarev\n  (https://github.com/lamerman/cpp-lru-cache)\n  Licensed under the 3-clause BSD license\n  (http://opensource.org/licenses/BSD-3-Clause)\n\nlib/util/basen.h\n\n  The Base-n library\n  Copyright 2012 Andrzej Zawadzki\n  (azawadzki@gmail.com)\n  (https://github.com/azawadzki/base-n)\n  Licensed under the MIT license\n  (http://opensource.org/licenses/MIT)\n\nlib/util/crc16.cpp\n\n  CRC16 function\n  Copyright 2001-2010 Georges Menie\n  (http://www.menie.org/georges/embedded/crc16.html)\n  Copyright 2010-2012 Salvatore Sanfilippo\n  Licensed under the 3-clause BSD license\n  (http://opensource.org/licenses/BSD-3-Clause)\n\nlib/util/cbitset.{c,h} and cbitset_portability.h\n\n  A simple bitset library in C\n  2016-2019 Daniel Lemire (lemire@gmail.com)\n  https://github.com/lemire/cbitset\n  Licensed under the Apache License, Version 2.0\n  (https://www.apache.org/licenses/LICENSE-2.0)\n\nlib/util/siphash.{cpp,h}\n\n  SipHash C++ implementation\n  Copyright 2016 Isaac Whitfield\n  (https://github.com/whitfin/siphash-cpp)\n  Licensed under the MIT license\n  (http://opensource.org/licenses/MIT)\n\nlib/util/finally.h\n\n  \"final_action\" class and \"finally\" function\n  C++ Core Guidelines Support Library\n  Copyright 2015 Microsoft\n  (https://github.com/Microsoft/GSL)\n  Licensed under the MIT license\n  (http://opensource.org/licenses/MIT)\n\nlib/tracy\n\n  Tracy Profiler\n  Copyright (c) 2017-2020, Bartosz Taudul <wolf.pld@gmail.com>\n  (https://bitbucket.org/wolfpld/tracy)\n  Licensed under the 3-clause BSD license.\n  (https://opensource.org/licenses/BSD-3-Clause)\n\nlib/spdlog\n\n  Spdlog logging library\n  Copyright (c) 2016 Gabi Melman <gmelman1@gmail.com>\n  (https://github.com/gabime/spdlog)\n  Licensed under the MIT license\n  (http://opensource.org/licenses/MIT)\n\nsrc/ledger/LedgerHashUtils.h\n\n    Portion copied from fast-hash\n    Copyright (C) Zilong Tan (eric.zltan@gmail.com)\n    ( https://github.com/ztanml/fast-hash )\n    Licensed under the MIT license\n    (http://opensource.org/licenses/MIT)\n\nlib/util/stdrandom.h\n\n  Classes from the `libc++` standard C++ library\n  Part of the LLVM Project\n  (https://libcxx.llvm.org)\n  Licensed under the Apache License v2.0 with LLVM Exceptions\n  (https://llvm.org/LICENSE.txt)\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 22.3310546875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43f6cb1bf222025340178f382c426f13757b2960e89779dfcb319c32542a5a41\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"arbitrary\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d5a26814d8dcb93b0e5a0ff3c6d80a8843bafb21b39e8e18a6f05471870e110\"\ndependencies = [\n \"derive_arbitrary\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.98\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41c270e7540d725e65ac7f1b212ac8ce349719624d7bcff99f8e2e488e8cf03f\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"crate-git-revision\"\nversion = \"0.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c521bf1f43d31ed2f73441775ed31935d77901cb3451e44b38a1c1612fcbaf98\"\ndependencies = [\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cxx\"\nversion = \"1.0.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e88abab2f5abbe4c56e8f1fb431b784d710b709888f35755a160e62e33fe38e8\"\ndependencies = [\n \"cc\",\n \"cxxbridge-flags\",\n \"cxxbridge-macro\",\n \"link-cplusplus\",\n]\n\n[[package]]\nname = \"cxxbridge-flags\"\nversion = \"1.0.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d3816ed957c008ccd4728485511e3d9aaf7db419aa321e3d2c5a2f3411e36c8\"\n\n[[package]]\nname = \"cxxbridge-macro\"\nversion = \"1.0.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a26acccf6f445af85ea056362561a24ef56cdc15fcc685f03aec50b9c702cb6d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"data-encoding\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8566979429cf69b49a5c740c60791108e86440e8be149bbea4fe54d2c32d6e2\"\n\n[[package]]\nname = \"derive_arbitrary\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67e77553c4162a157adbf834ebae5b415acbecbeafc7a74b0e886657506a7611\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"escape-bytes\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bfcf67fea2815c2fc3b90873fae90957be12ff417335dfadc7f52927feb03b2\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"generator\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dbb949699c3e4df3a183b1d2142cb24277057055ed23c68ed58894f76c517223\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"log\",\n \"rustversion\",\n \"windows\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe9006bed769170c11f845cf00c7c1e9092aeb3f268e007c3e760ac68008070f\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7dfda62a12f55daeae5015f81b0baea145391cb4520f86c248fc615d72640d12\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8adf3ddd720272c6ea8bf59463c04e0f93d0bbf7c5439b691bca2987e0270897\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"453ad9f582a441959e5f0d088b02ce04cfe8d51a8eaf077f12ac6d3e94164ca6\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"leb128\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"884e2677b40cc8c339eaefcb701c32ef1fd2493d71118dc0ca4b6a736c93bd67\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.150\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"89d92a4743f9a61002fae18374ed11e7973f530cb3a3255fb354818118b2203c\"\n\n[[package]]\nname = \"link-cplusplus\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d240c6f7e1ba3a28b0249f774e6a9dd0175054b52dfbb61b16eb8505c3785c9\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b06a4cde4c0f271a446782e3eff8de789548ce57dbc8eca9292c27f4a42004b4\"\n\n[[package]]\nname = \"loom\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"419e0dc8046cb947daa77eb95ae174acfbddb7673b4151f56d1eed8e93fbfaca\"\ndependencies = [\n \"cfg-if\",\n \"generator\",\n \"scoped-tls\",\n \"tracing\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"matchers\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\ndependencies = [\n \"regex-automata 0.1.10\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84\"\ndependencies = [\n \"overload\",\n \"winapi\",\n]\n\n[[package]]\nname = \"num-derive\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cfb77679af88f8b125209d354a202862602672222e7f2313fdd6dc349bad4712\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39e3200413f237f41ab11ad6d161bc7239c84dcb631773ccd7de3dfe4b5c267c\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"overload\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39\"\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c40d25201921e5ff0c862a505c6557ea88568a4e3ace775ab55e93f2f4f9d57\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"134c189feb4956b20f6f547d2cf727d4c0fe06722b20a0eec87ed445a97f92da\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2eae68fc220f7cf2532e4494aded17545fce192d59cd996e0fe7887f4ceb575\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata 0.3.3\",\n \"regex-syntax 0.7.4\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax 0.6.29\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39354c10dd07468c2e73926b23bb9c2caca74c5501e38a35da70406f1d923310\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax 0.7.4\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5ea92a5b6195c6ef2a0295ea818b312502c6fc94dde986c5553242e18fd4ce2\"\n\n[[package]]\nname = \"rustc-simple-version\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2c140994fc6f44f2a89068a073843e82e7b4905f569ced81540a2eab4d0d6ed\"\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ffc183a10b4478d04cbbbfc96d0873219d962dd5accaff2ffbd4ceb7df837f4\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f91339c0467de62360649f8d3e185ca8de4224ff281f66000de5eb2a77a79041\"\n\n[[package]]\nname = \"scoped-tls\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294\"\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.192\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bca2a08484b285dcb282d0f67b26cadc0df8b19f8c12502c13d966bf9482f001\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.192\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6c7207fbec9faa48073f3e3074cbe553af6ea512d7c21ba46e434e70ea9fbc1\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.108\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d1c7e3eac408d115102c4c24ad393e0821bb3a5df4d506a80f85f7a742a526b\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"soroban-env-common\"\nversion = \"22.0.0\"\nsource = \"git+https://github.com/stellar/rs-soroban-env?rev=a3f7fca9c2ad89796c7525a648da086543502dd5#a3f7fca9c2ad89796c7525a648da086543502dd5\"\ndependencies = [\n \"crate-git-revision\",\n \"ethnum\",\n \"num-derive\",\n \"num-traits\",\n \"soroban-env-macros\",\n \"static_assertions\",\n \"stellar-xdr\",\n]\n\n[[package]]\nname = \"soroban-env-macros\"\nversion = \"22.0.0\"\nsource = \"git+https://github.com/stellar/rs-soroban-env?rev=a3f7fca9c2ad89796c7525a648da086543502dd5#a3f7fca9c2ad89796c7525a648da086543502dd5\"\ndependencies = [\n \"itertools\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"stellar-xdr\",\n \"syn\",\n]\n\n[[package]]\nname = \"soroban-synth-wasm\"\nversion = \"22.0.0\"\nsource = \"git+https://github.com/stellar/rs-soroban-env?rev=a3f7fca9c2ad89796c7525a648da086543502dd5#a3f7fca9c2ad89796c7525a648da086543502dd5\"\ndependencies = [\n \"arbitrary\",\n \"soroban-env-common\",\n \"soroban-env-macros\",\n \"stellar-xdr\",\n \"wasm-encoder\",\n \"wasmparser\",\n]\n\n[[package]]\nname = \"soroban-test-wasms\"\nversion = \"22.0.0\"\nsource = \"git+https://github.com/stellar/rs-soroban-env?rev=a3f7fca9c2ad89796c7525a648da086543502dd5#a3f7fca9c2ad89796c7525a648da086543502dd5\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"stellar-core\"\nversion = \"0.1.0\"\ndependencies = [\n \"base64\",\n \"cxx\",\n \"itertools\",\n \"log\",\n \"rand\",\n \"rustc-simple-version\",\n \"soroban-synth-wasm\",\n \"soroban-test-wasms\",\n \"tracy-client\",\n]\n\n[[package]]\nname = \"stellar-strkey\"\nversion = \"0.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e3aa3ed00e70082cb43febc1c2afa5056b9bb3e348bbb43d0cd0aa88a611144\"\ndependencies = [\n \"crate-git-revision\",\n \"data-encoding\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"stellar-xdr\"\nversion = \"22.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"20c2130275cc730d042b3082f51145f0486f5a543d6d72fced02ed9048b82b57\"\ndependencies = [\n \"crate-git-revision\",\n \"escape-bytes\",\n \"hex\",\n \"stellar-strkey\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.39\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23e78b90f2fcf45d3e842032ce32e3f2d1545ba6636271dcbf24fa306d87be7a\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"978c9a314bd8dc99be594bc3c175faaa9794be04a5a5e153caba6915336cebac\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9456a42c5b0d803c8cd86e73dd7cc9edd429499f37a3550d286d5e86720569f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdd6f064ccff2d6567adcb3873ca630700f00b5ad3f060c25b5dcfd9a4ce152\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ce8c33a8d48bd45d624a6e523445fd21ec13d3653cd51f681abf67418f54eb8\"\ndependencies = [\n \"cfg-if\",\n \"pin-project-lite\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0955b8137a1df6f1a2e9a37d8a6656291ff0297c1a97c24e0d8425fe2312f79a\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ddad33d2d10b1ed7eb9d1f518a5674713876e97e5bb9b7345a7984fbb4f922\"\ndependencies = [\n \"lazy_static\",\n \"log\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30a651bc37f915e81f087d86e62a18eec5f79550c7faff886f7090b4ea757c77\"\ndependencies = [\n \"matchers\",\n \"nu-ansi-term\",\n \"once_cell\",\n \"regex\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n]\n\n[[package]]\nname = \"tracy-client\"\nversion = \"0.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59fb931a64ff88984f86d3e9bcd1ae8843aa7fe44dd0f8097527bc172351741d\"\ndependencies = [\n \"loom\",\n \"once_cell\",\n \"tracy-client-sys\",\n]\n\n[[package]]\nname = \"tracy-client-sys\"\nversion = \"0.22.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d104d610dfa9dd154535102cc9c6164ae1fa37842bc2d9e83f9ac82b0ae0882\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15811caf2415fb889178633e7724bad2509101cde276048e013b9def5e51fa0\"\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-encoder\"\nversion = \"0.36.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"822b645bf4f2446b949776ffca47e2af60b167209ffb70814ef8779d299cd421\"\ndependencies = [\n \"leb128\",\n]\n\n[[package]]\nname = \"wasmparser\"\nversion = \"0.116.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a58e28b80dd8340cb07b8242ae654756161f6fc8d0038123d679b7b99964fa50\"\ndependencies = [\n \"indexmap\",\n \"semver\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows\"\nversion = \"0.58.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd04d41d93c4992d421894c18c8b43496aa748dd4c081bac0dc93eb0489272b6\"\ndependencies = [\n \"windows-core\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.58.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ba6d44ec8c2591c134257ce647b7ea6b20335bf6379a27dac5f1641fcf59f99\"\ndependencies = [\n \"windows-implement\",\n \"windows-interface\",\n \"windows-result\",\n \"windows-strings\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-implement\"\nversion = \"0.58.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bbd5b46c938e506ecbce286b6628a02171d56153ba733b6c741fc627ec9579b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"windows-interface\"\nversion = \"0.58.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"053c4c462dc91d3b1504c6fe5a726dd15e216ba718e84a0e46a88fbe5ded3515\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"windows-result\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d1043d8214f791817bab27572aaa8af63732e11bf84aa21a45a78d6c317ae0e\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-strings\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cd9b125c486025df0eabcb585e62173c6c9eddcec5d117d3b6e8c30e2ee4d10\"\ndependencies = [\n \"windows-result\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.095703125,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\"src/rust\"]\n\n[profile.release]\ncodegen-units = 1\nlto = true\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "INSTALL-Windows.md",
          "type": "blob",
          "size": 4.615234375,
          "content": "# Windows Installation Instructions\n\n## Make sure you have a 64 bit version of Windows\n* try Settings -> System -> About and look under System Type\n* When in doubt, see http://www.tenforums.com/tutorials/4399-system-type-32-bit-x86-64-bit-x64-windows-10-a.html\n\n## Download and install `Visual Studio 2022` (for Visual C++) ; the Community Edition is free and fully functional.\n* See https://www.visualstudio.com/downloads/\n* When installing, you will need to select:\n    * Desktop Development with C++\n    * C++ Profiling (optional)\n    * Windows 10 SDK\n    * C++/CLI Support\n\n# Configure Git\n\nSome functionality depends on Linux file endings, as such you need to configure git with:\n```\n[core]\n        eol = lf\n        autocrlf = input\n```\nNB: if you change this setting in an existing working folder, you need to reset it to have the proper line ending.\nThis can be done with the following sequence:\n```\ngit checkout-index --force --all\ngit rm --cached -r .\ngit reset --hard\n```\n\n## Download and install rust\n\nEasiest is to use rustup, found on [rust-lang.org](https://www.rust-lang.org/tools/install).\n\nInstall the x64 MSVC toolchain (`stable-x86_64-pc-windows-msvc`), and make sure that `rustc.exe` is in your `PATH`.\n\n## Download and install PostgreSQL\n\nNote: if you do not want to use postgres you can select `DebugNoPostgres` as the build target.\n\nGet version 15 from https://www.enterprisedb.com/download-postgresql-binaries\n\nThe default project file defines USE_POSTGRES and links against it.\n* Pick a directory for the database\n* Set an admin password for the database\n* Accept the default port (5432)\n* Accept `default` for the locale (not clear if anything depends on this. The `default` locale will\npresumably depend on your operating system's setting might cause inconsistencies)\n* Add `c:\\Program Files\\PostgreSQL\\15\\lib` to your PATH (else the binary will fail to start,\n    not finding `libpq.dll`)\n* If you install postgres in a different folder, you will have to update the project file in two places:\n    * \"additional include locations\" and\n    * \"Linker input\"\n\n> If the installation fails, look into `%TEMP%\\install-postgresql.log` for hints.\n\n## Building xdrc\n In order to compile xdrc and run the binary you will need to either\n* Download and install MinGW from http://sourceforge.net/projects/mingw/files/\n    * In the MinGW Installation Manager in `MSYS/MinGW Developer Toolkit` select the following packages:\n      * `Flex`\n      * `Bison`\n      * `gcc`\n      * `sed`\n      * `perl`\n      * `curl`\n    * Add `C:\\MinGW\\msys\\1.0\\bin;C:\\MinGW\\bin` to the end of `%PATH%`\n* Download and install cygwin 64 bit build from https://cygwin.com/install.html\n    * Get cygwin setup to install\n        * `Flex`\n        * `Bison`\n        * `curl` (command line)\n        * `gcc-core`\n        * `sed`\n        * `perl`\n    * Add `c:\\cygwin64\\bin` to the end of `%PATH%` (at least for Visual Studio)\n\n    > Note: if you're going to use 'cp'and 'mkdir' from cygwin (tests do),\n        make sure that your install is correct by trying to copy a\n        file from a `cmd.exe` console (not from a cygwin terminal).\n        `cp in.txt out.txt` and then try to open *out.txt* with\n        notepad. You should not get a permission denied error.\n\n    > Note: both MinGW and CygWin may run into virtual memory address space\n    conflicts on modern versions of Windows. You will run into errors like\n    `Couldn't reserve space for mingw's heap, Win32 error 0`.\n    A workaround is to reboot until you can run `bison.exe` from a cmd.exe\n    prompt.\n\n## Curl\nIf you do not have cURL installed\n\n* Download and install/extract cURL from https://curl.haxx.se/download.html#Win64\n* Add installation/extraction directory (e.g. `C:\\Program Files\\curl_7_47_1_x64`) to the end of `%PATH%`\n\n## clang-format\n\nFor making changes to the code, you should install the clang-format tool and Visual Studio extension, you can find both at http://llvm.org/builds/\n* note that the version of clang-format used currently is 12.0 (other versions may not format the same way).\n* we recommend downloading 12.0 from http://releases.llvm.org/download.html\n\n# Build on Windows using the Windows Subsystem for Linux\nTo setup the subsystem, go to https://msdn.microsoft.com/en-us/commandline/wsl/install_guide\n\nThen, you can simply follow the [Linux instructions](./README.md)\n\nNote that you can (and should) install the Windows version of postgres even when running stellar-core from within WSL.\n\n\n# Basic Installation\n\n- `git clone PATH_TO_STELLAR_CORE`\n- `git submodule init`\n- `git submodule update`\n- Open the solution `Builds\\VisualStudio\\stellar-core.sln`\n- Pick the target architecture and flavor (e.g. x64, Release)\n- Hit \"Build Solution (F7)\"\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 10.52734375,
          "content": "Installation Instructions\n==================\n\nThese are instructions for building stellar-core from source.\n\nFor a potentially quicker set up, the following projects could be good alternatives:\n\n* stellar-core in a [docker container](https://github.com/stellar/docker-stellar-core)\n* stellar-core and [horizon](https://github.com/stellar/go/tree/master/services/horizon) in a [docker container](https://github.com/stellar/docker-stellar-core-horizon)\n* pre-compiled [packages](https://github.com/stellar/packages)\n\n## Which version to run?\n\nIn general, you should aim to run the most recent stable version of core, so make sure\nto keep track of new releases.\n\nWe _highly_ recommend upgrading to the latest core release _within 30 days of a release_ as\nhighlighted in our [protocol and security release notes](docs/software/security-protocol-release-notes.md) in case\nthe release contains security fixes that could be exploited (we do not disclose\nahead of time if a release contains security fixes to give people time to upgrade).\n\nAs a consequence, old, potentially insecure or abandoned nodes _running releases that are older than 90 days will get blocked_ by newer nodes (if there are newer releases\nof course).\n\n## Picking a version to run\n\nBest is to use the latest *stable* release that can be downloaded from https://github.com/stellar/stellar-core/releases\n\n\nAlternatively, branches are organized in the following way:\n\n| branch name | description | quality bar |\n| ----------- | ----------- | ----------- |\n| master      | development branch | all unit tests passing |\n| testnet     | version deployed to testnet | acceptance tests passing |\n| prod        | version currently deployed on the live network | no recall class issue found in testnet and staging |\n\nFor convenience, we also keep a record in the form of release tags of the\n versions that make it to production:\n * pre-releases are versions that get deployed to testnet\n * releases are versions that made it all the way to production\n\n## Containerized dev environment\n\nWe maintain a pre-configured Docker configuration ready for development with VSCode.\n\nSee the [dev container's README](.devcontainer/README.md) for more detail.\n\n## Runtime dependencies\n\n`stellar-core` does not have many dependencies.\n\nIf core was configured (see below) to work with Postgresql, a local Postgresql server\n will need to be deployed to the same host.\n\nTo install Postgresql, follow instructions from the [Postgresql download page](https://www.postgresql.org/download/).\n\n## Build Dependencies\n\n- c++ toolchain and headers that supports c++17\n    - `clang` >= 12.0\n    - `g++` >= 10.0\n- `pkg-config`\n- `bison` and `flex`\n- `libpq-dev` unless you `./configure --disable-postgres` in the build step below.\n- 64-bit system\n- `clang-format-12` (for `make format` to work)\n- `sed` and `perl`\n- `libunwind-dev`\n- Rust toolchain (see [Installing Rust](#installing-rust) subsection)\n  - `cargo` >= 1.74\n  - `rust` >= 1.74\n\n### Installing Rust\n\nBuilding the Rust components requires the `cargo` package manager and build system, as well as the `rustc` compiler, both version 1.74 or later.\n\nWe recommend installing Rust using the Rust project's `rustup` installer, which can be found on [rustup.rs](https://rustup.rs).\n\nWe also include a script in the repository `install-rust.sh` that downloads and runs a known version of `rustup` on x64-linux hosts, such as those used for CI and packaging.\n\n### Ubuntu\n\n#### Ubuntu 20.04\nYou can install the [test toolchain](#adding-the-test-toolchain) to build and run stellar-core with the latest version of the llvm toolchain.\n\nAlternatively, if you want to just depend on stock Ubuntu, you will have to build with clang *and* have use `libc++` instead of `libstdc++` when compiling.\n\nUbuntu 20.04 has clang-12 available, that you can install with\n\n    # install clang-12 toolchain\n    sudo apt-get install clang-12\n\nAfter installing packages, head to [building with clang and libc++](#building-with-clang-and-libc).\n\n\n#### Adding the test toolchain (optional)\n    # NOTE: newer version of the compilers are not\n    #    provided by stock distributions\n    #    and are provided by the /test toolchain\n    sudo apt-get install software-properties-common\n    sudo add-apt-repository ppa:ubuntu-toolchain-r/test\n    sudo apt-get update\n\n#### Installing packages\n    # common packages\n    sudo apt-get install git build-essential pkg-config autoconf automake libtool bison flex libpq-dev libunwind-dev parallel sed perl\n    # if using clang\n    sudo apt-get install clang-12\n    # clang with libstdc++\n    sudo apt-get install gcc-10\n    # if using g++ or building with libstdc++\n    # sudo apt-get install gcc-10 g++-10 cpp-10\n\nIn order to make changes, you'll need to install the proper version of clang-format.\n\nIn order to install the llvm (clang) toolchain, you may have to follow instructions on https://apt.llvm.org/\n\n    sudo apt-get install clang-format-12\n\n### Ubuntu 24.04 and Newer Linux Versions\n\nSome newer Ubuntu versions have reported issues with older compiler versions. For Ubuntu 24.04 and\nother newer Linux distros, it is recommended to build with gcc-13 or clang-18. This can be installed as follows:\n\n```zsh\n# if using clang\nsudo apt-get install clang-18\n# if using g++ or building with libstdc++\n# sudo apt-get install gcc-13 g++-13 cpp-13\n# if building with libc++\nsudo apt-get install libc++-18-dev libc++abi-18-dev\n```\n\nNote that installing libc++-18 via apt will uninstall all other libc++ versions.\n\nAdditionally, some newer Linux distros no longer package clang-format-12, and newer clang-format versions are\nnot backwards compatible. To build from source, you'll need to do the following:\n\n```zsh\nsudo apt-get install ninja-build cmake\ngit clone --depth 1 --branch llvmorg-12.0.1 https://github.com/llvm/llvm-project.git\ncd llvm-project\nsed -i \"17i #include <stdint.h>\" llvm/include/llvm/Support/Signals.h\nCC=clang CXX=clang++ cmake -S llvm -B build -G Ninja -DLLVM_ENABLE_PROJECTS=\"clang\" -DCMAKE_BUILD_TYPE=Release\ncd build\nninja clang-format\nsudo cp bin/clang-format /usr/bin/clang-format-12\ncd ../..\nrm -rf llvm-project/\n```\n\n### MacOS \nWhen building on MacOS, here's some dependencies you'll need:\n- Install xcode\n- Install [Rust](#installing-rust)\n- Install [homebrew](https://brew.sh)\n- `brew install libsodium libtool autoconf automake pkg-config libpq openssl parallel ccache bison gnu-sed perl coreutils`\n\nYou'll also need to configure pkg-config by adding the following to your shell (`.zshenv` or `.zshrc`):\n```zsh\nexport PKG_CONFIG_PATH=\"$PKG_CONFIG_PATH:$(brew --prefix)/opt/libpq/lib/pkgconfig\"\nexport PKG_CONFIG_PATH=\"$PKG_CONFIG_PATH:$(brew --prefix)/opt/openssl@3/lib/pkgconfig\"\nexport PATH=\"$(brew --prefix bison)/bin:$PATH\"\n```\n- Install `clang-format-12` \n> Note: `brew` does not contain a cask for `clang-format-12`, and other versions of `clang-format`  have different formatting behavior.\n\nTo install `clang-format-12`, run the commands listed below.\n```\n# Download clang+llvm 12.0.0 for x86_64 apple darwin.\ncurl -OL https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/clang+llvm-12.0.0-x86_64-apple-darwin.tar.xz \n# Unarchive the download.\ntar -xf clang+llvm-12.0.0-x86_64-apple-darwin.tar.xz \n# Copy the contents of bin/clang-format to /usr/local/bin.\nsudo cp -R clang+llvm-12.0.0-x86_64-apple-darwin/bin/clang-format /usr/local/bin\n# Ensure \"clang-format version 12.0.0\" is printed.\nclang-format --version\n```\n\n> Note: macOS will block the execution for security purposes, open System Preferences > Security & Privacy and allow `clang-format` to run.\n\n### Windows\nSee [INSTALL-Windows.md](INSTALL-Windows.md)\n\n## Basic Installation\n\n- `git clone https://github.com/stellar/stellar-core.git`\n- `cd stellar-core`\n- `git submodule init`\n- `git submodule update`\n- Type `./autogen.sh`.\n- Type `./configure`   *(If configure complains about compiler versions, try `CXX=clang-12 ./configure` or `CXX=g++-10 ./configure` or similar, depending on your compiler.)*\n- Type `make` or `make -j<N>` (where `<N>` is the number of parallel builds, a number less than the number of CPU cores available, e.g. `make -j3`)\n- Type `make check` to run tests.\n- Type `make install` to install.\n\n## Building with clang and libc++\n\nOn some systems, building with `libc++`, [LLVM's version of the standard library](https://libcxx.llvm.org/) can be done instead of `libstdc++` (typically used on Linux).\n\nNB: there are newer versions available of both clang and libc++, you will have to use the versions suited for your system.\n\nYou may need to install additional packages for this, for example, on Linux Ubuntu 20.04 LTS with clang-12:\n\n    # install libc++ headers\n    sudo apt-get install libc++-12-dev libc++abi-12-dev\n\nHere are sample steps to achieve this:\n\n    export CC=clang-12\n    export CXX=clang++-12\n    export CFLAGS=\"-O3 -g1 -fno-omit-frame-pointer\"\n    export CXXFLAGS=\"$CFLAGS -stdlib=libc++\"\n    git clone https://github.com/stellar/stellar-core.git\n    cd stellar-core/\n    ./autogen.sh && ./configure && make -j6\n\n## Building for ARM Linux (i.e. Raspberry Pi)\n\n`stellar-core` is lightweight and can run on many edge devices such as a Raspberry Pi. However, there is currently a\n[linker bug](https://bugs.llvm.org/show_bug.cgi?id=16404) in the default ARM `libgcc` runtime, so `compiler-rt` must be used instead.\nHere are sample steps to achieve this:\n\n    export CC=clang-12\n    export CXX=clang++-12\n    export CFLAGS=\"-O3 -g1 -fno-omit-frame-pointer --rtlib=compiler-rt\"\n    export CXXFLAGS=\"$CFLAGS -stdlib=libc++\"\n    git clone https://github.com/stellar/stellar-core.git\n    cd stellar-core/\n    ./autogen.sh && ./configure && make -j4\n\n## Building with Tracing\n\nConfiguring with `--enable-tracy` will build and embed the client component of the [Tracy](https://github.com/wolfpld/tracy) high-resolution tracing system in the `stellar-core` binary.\n\nThe tracing client will activate automatically when stellar-core is running, and will listen for connections from Tracy servers (a command-line capture utility, or a cross-platform GUI).\n\nYou do not need to download the tracy server, and will likely run into versioning issues if you do. Instead, the Tracy server components can also be compiled by configuring with `--enable-tracy-gui` or `--enable-tracy-capture`. Once compiled, the tracy server can be started with `./tracy-gui` or `./tracy`, respectively.\n\nThe GUI depends on the `capstone`, `freetype` and `glfw` libraries and their headers, and on linux or BSD the `GTK-2.0` libraries and headers. On Windows and MacOS, native toolkits are used instead.\n\n\n    # On Ubuntu\n    $ sudo apt-get install libcapstone-dev libfreetype6-dev libglfw3-dev libgtk2.0-dev\n\n    # On MacOS\n    $ brew install capstone freetype2 glfw\n"
        },
        {
          "name": "LICENSE-APACHE.txt",
          "type": "blob",
          "size": 11.0947265625,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2015 Stellar Development Foundation\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 2.453125,
          "content": "## Process this file with automake to produce Makefile.in\n\nbin_PROGRAMS =\nSUBDIRS = lib src\nAM_EXTRA_RECURSIVE_TARGETS = check-valgrind\nACLOCAL_AMFLAGS = -I m4\n\ndist_doc_DATA = docs/stellar-core_example.cfg\t\t\t\\\n\tdocs/stellar-core_standalone.cfg\t\t\t\\\n\tdocs/stellar-core_testnet.cfg docs/software/admin.md\t\\\n\tdocs/software/commands.md\n\ninclude $(top_srcdir)/common.mk\n\n.PHONY: always\nalways:\n\t@:\n\nif USE_CLANG_FORMAT\nformat: always\n\tcd src && $(MAKE) $(AM_MAKEFLAGS) $@\nendif # USE_CLANG_FORMAT\n\nif USE_AFL_FUZZ\nfuzz-testcases fuzz fuzz-clean: all\n\tcd src && $(MAKE) $(AM_MAKEFLAGS) $@\nendif # USE_AFL_FUZZ\n\nif USE_TRACY_GUI\nTRACY_GUI_DIR=$(top_srcdir)/lib/tracy/profiler\nTRACY_GUI_SOURCE=$(TRACY_GUI_DIR)/src\nTRACY_GUI_BUILD=$(TRACY_GUI_DIR)/build/unix\n\n$(TRACY_GUI_BUILD)/Tracy-release: $(wildcard $(TRACY_GUI_SOURCE)/*.*)\n\t$(MAKE) -C $(TRACY_GUI_BUILD) release CC=\"$(CC)\" CXX=\"$(CXX)\" TRACY_NO_ISA_EXTENSIONS=1 TRACY_NO_LTO=1 LEGACY=1\n\ntracy-gui: $(TRACY_GUI_BUILD)/Tracy-release\n\tcp -v $< $@\n\nbin_PROGRAMS += tracy-gui\nendif # USE_TRACY_GUI\n\nif USE_TRACY_CAPTURE\nTRACY_CAPTURE_DIR=$(top_srcdir)/lib/tracy/capture\nTRACY_CAPTURE_SOURCE=$(TRACY_CAPTURE_DIR)/src\nTRACY_CAPTURE_BUILD=$(TRACY_CAPTURE_DIR)/build/unix\n\n$(TRACY_CAPTURE_BUILD)/capture-release: $(wildcard $(TRACY_CAPTURE_SOURCE)/*.*)\n\t$(MAKE) -C $(TRACY_CAPTURE_BUILD) release CC=\"$(CC)\" CXX=\"$(CXX)\" TRACY_NO_ISA_EXTENSIONS=1 TRACY_NO_LTO=1 LEGACY=1\n\ntracy-capture: $(TRACY_CAPTURE_BUILD)/capture-release\n\tcp -v $< $@\n\nbin_PROGRAMS += tracy-capture\nendif # USE_TRACY_CAPTURE\n\nif USE_TRACY_CSVEXPORT\nTRACY_CSVEXPORT_DIR=$(top_srcdir)/lib/tracy/csvexport\nTRACY_CSVEXPORT_SOURCE=$(TRACY_CSVEXPORT_DIR)/src\nTRACY_CSVEXPORT_BUILD=$(TRACY_CSVEXPORT_DIR)/build/unix\n\n$(TRACY_CSVEXPORT_BUILD)/csvexport-release: $(wildcard $(TRACY_CSVEXPORT_SOURCE)/*.*)\n\t$(MAKE) -C $(TRACY_CSVEXPORT_BUILD) release CC=\"$(CC)\" CXX=\"$(CXX)\" TRACY_NO_ISA_EXTENSIONS=1 TRACY_NO_LTO=1 LEGACY=1\n\ntracy-csvexport: $(TRACY_CSVEXPORT_BUILD)/csvexport-release\n\tcp -v $< $@\n\nbin_PROGRAMS += tracy-csvexport\nendif # USE_TRACY_CSVEXPORT\n\nEXTRA_DIST = stellar-core.supp test/testnet/multitail.conf\t\\\n\ttest/testnet/run-test.sh README.md make-mks\n\n@VALGRIND_CHECK_RULES@\nVALGRIND_FLAGS = --num-callers=30 --trace-children=yes \\\n          --trace-children-skip=hostname,aws,gcutil,gcloud,azure,node,python\nVALGRIND_SUPPRESSIONS_FILES = stellar-core.supp\n\nmaintainer-clean-local:\n\tcd $(srcdir) && rm -rf `sed -ne 's!^/!!p' .gitignore` *~ .gitignore~\n\nCLEANFILES = test-suite.log .gitignore~ *~\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 0.017578125,
          "content": "April 2015\n\n  TBD\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 0.021484375,
          "content": "Please see README.md.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.3291015625,
          "content": "<div align=\"center\">\n<a href=\"https://stellar.org\"><img alt=\"Stellar\" src=\"https://github.com/stellar/.github/raw/master/stellar-logo.png\" width=\"558\" /></a>\n<br/>\n<strong>Creating equitable access to the global financial system</strong>\n<h1>Stellar Core</h1>\n</div>\n<p align=\"center\">\n<a href=\"https://github.com/stellar/stellar-core/actions\"><img alt=\"Build Status\" src=\"https://github.com/stellar/stellar-core/workflows/.github/workflows/build.yml/badge.svg?branch=auto\" /></a>\n</p>\n\nStellar-core is a replicated state machine that maintains a local copy of a cryptographic ledger and processes transactions against it, in consensus with a set of peers.\nIt implements the [Stellar Consensus Protocol](https://github.com/stellar/stellar-core/blob/master/src/scp/readme.md), a _federated_ consensus protocol.\nIt is written in C++17 and runs on Linux, OSX and Windows.\nLearn more by reading the [overview document](https://github.com/stellar/stellar-core/blob/master/docs/readme.md).\n\n# Documentation\n\nDocumentation of the code's layout and abstractions, as well as for the\nfunctionality available, can be found in\n[`./docs`](https://github.com/stellar/stellar-core/tree/master/docs).\n\n# Installation\n\nSee [Installation](./INSTALL.md)\n\n# Contributing\n\nSee [Contributing](./CONTRIBUTING.md)\n\n# Running tests\n\nSee [running tests](./CONTRIBUTING.md#running-tests)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.2646484375,
          "content": "# Security Policy and reporting a Vulnerability\n\nstellar-core falls under the Stellar Foundation's bug bounty program.\n\nTo report a security problem and review the details of the program, see the [Stellar bug bounty program](https://www.stellar.org/bug-bounty-program/).\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 1.033203125,
          "content": "#!/bin/sh -e\n\n# Public domain\n\ncase \"$0\" in\n    */*)\n\tcd $(dirname $0)\n\t;;\nesac\n\ncase \"$1\" in\n    --skip-submodules|-s)\n\tskip_submodules=yes\n\t;;\n    \"\")\n\t;;\n    *)\n\techo usage: $0 [--skip-submodules] >&2\n\texit 1\n\t;;\nesac\n\n# NB: the DO_NOT_UPDATE_CONFIG_SCRIPTS variable is here to inform libsodium not\n# to download a fresh config.sub and config.guess from git.savannah.gnu.org\n# (which is sometimes offline).\n#\n# This variable was how you disable the update in libsodium up to version\n# 1.0.18; but in master they have changed this, so on the next libsodium\n# submodule bump we'll want to change the code here to the new interface\n# (running `autogen.sh -b` in the libsodium directory)\n\ncase \"${skip_submodules}\" in\n    0|no|false|\"\")\n        git submodule update --init\n        git submodule foreach '\n            autogen=$(find . -name autogen.sh)\n            if [ -x \"$autogen\" ]; then\n                cd $(dirname \"$autogen\")\n                DO_NOT_UPDATE_CONFIG_SCRIPTS=1 ./autogen.sh\n            fi\n            '\n    ;;\nesac\n\n./make-mks\nautoreconf -i\n"
        },
        {
          "name": "ci-build.sh",
          "type": "blob",
          "size": 4.8076171875,
          "content": "#!/bin/bash\n\n# this script performs a build & test pass\n# it depends on the CC and CXX environment variables\n\nset -ev\n\n# max age of cache before force purging\nCACHE_MAX_DAYS=30\n\nWITH_TESTS=1\nexport TEMP_POSTGRES=0\n\nPROTOCOL_CONFIG=\"\"\n\nwhile [[ -n \"$1\" ]]; do\n    COMMAND=\"$1\"\n    shift\n\n    case \"${COMMAND}\" in\n    \"--disable-tests\")\n            WITH_TESTS=0\n            echo Disabling tests\n            ;;\n    \"--use-temp-db\")\n            export TEMP_POSTGRES=1\n            echo Using temp database\n            ;;\n    \"--check-test-tx-meta\")\n            if [[ -z \"${PROTOCOL}\" ]]; then\n                echo 'must specify --protocol before --check-test-tx-meta'\n                exit 1\n            fi\n            export TEST_SPEC='[tx]'\n            export STELLAR_CORE_TEST_PARAMS=\"--ll fatal -r simple --all-versions --rng-seed 12345 --check-test-tx-meta ${PWD}/test-tx-meta-baseline-${PROTOCOL}\"\n            ;;\n    \"--protocol\")\n            PROTOCOL=\"$1\"\n            shift\n            echo Testing with protocol $PROTOCOL\n            case \"${PROTOCOL}\" in\n            \"current\")\n                ;;\n            \"next\")\n                PROTOCOL_CONFIG=\"--enable-next-protocol-version-unsafe-for-production\"\n                ;;\n            *)\n                echo Unknown protocol ${PROTOCOL}\n                exit 1\n                ;;\n            esac\n            ;;\n    \"\")\n            ;;\n    *)\n            echo Unknown parameter ${COMMAND}\n            echo Usage: $0 \"[--disable-tests][--use-temp-db]\"\n            exit 1\n            ;;\n    esac\n\ndone\n\necho $TRAVIS_PULL_REQUEST\n\nNPROCS=$(getconf _NPROCESSORS_ONLN)\n\necho \"Found $NPROCS processors\"\ndate\n\n# Try to ensure we're using the real g++ and clang++ versions we want\nmkdir bin\n\nexport PATH=`pwd`/bin:$PATH\necho \"PATH is $PATH\"\nhash -r\n\nif test $CXX = 'clang++'; then\n    RUN_PARTITIONS=$(seq 0 $((NPROCS-1)))\n    which clang-12\n    ln -s `which clang-12` bin/clang\n    which clang++-12\n    ln -s `which clang++-12` bin/clang++\n    which llvm-symbolizer-12\n    ln -s `which llvm-symbolizer-12` bin/llvm-symbolizer\n    clang -v\n    llvm-symbolizer --version || true\nelif test $CXX = 'g++'; then\n    RUN_PARTITIONS=$(seq $NPROCS $((2*NPROCS-1)))\n    which gcc-10\n    ln -s `which gcc-10` bin/gcc\n    which g++-10\n    ln -s `which g++-10` bin/g++\n    which g++\n    g++ -v\nfi\n\nconfig_flags=\"--enable-asan --enable-extrachecks --enable-ccache --enable-sdfprefs ${PROTOCOL_CONFIG}\"\nexport CFLAGS=\"-O2 -g1 -fno-omit-frame-pointer -fsanitize-address-use-after-scope -fno-common\"\nexport CXXFLAGS=\"-w $CFLAGS\"\n\n# quarantine_size_mb / malloc_context_size : reduce memory usage to avoid\n# crashing in tests that churn a lot of memory\n# disable leak detection: this requires the container to be run with\n# \"--cap-add SYS_PTRACE\" or \"--privileged\"\n# as the leak detector relies on ptrace\nexport ASAN_OPTIONS=\"quarantine_size_mb=100:malloc_context_size=4:detect_leaks=0:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:log_path=stdout\"\n\necho \"config_flags = $config_flags\"\n\n#### ccache config\nexport CCACHE_DIR=$HOME/.ccache\nexport CCACHE_COMPRESS=true\nexport CCACHE_COMPRESSLEVEL=9\n# cache size should be large enough for a full build\nexport CCACHE_MAXSIZE=500M\nexport CCACHE_CPP2=true\n\n# periodically check to see if caches are old and purge them if so\nif [ -d \"$CCACHE_DIR\" ] ; then\n    if [ -n \"$(find $CCACHE_DIR -mtime +$CACHE_MAX_DAYS -print -quit)\" ] ; then\n        echo Purging old cache dirs $CCACHE_DIR ./target $HOME/.cargo/registry $HOME/.cargo/git\n        rm -rf $CCACHE_DIR ./target $HOME/.cargo/registry $HOME/.cargo/git\n    fi\nfi\n\nccache -p\n\nccache -s\ndate\ntime ./autogen.sh\ntime ./configure $config_flags\nmake format\nd=`git diff | wc -l`\nif [ $d -ne 0 ]\nthen\n    echo \"clang format must be run as part of the pull request, current diff:\"\n    git diff\n    exit 1\nfi\n\ncrlf=$(find . ! \\( -type d -o -path './.git/*' -o -path './Builds/*' -o -path './lib/*' \\) -print0 | xargs -0 -n1 -P9 file \"{}\" | grep CRLF || true)\nif [ -n \"$crlf\" ]\nthen\n    echo \"Found some files with Windows line endings:\"\n    echo \"$crlf\"\n    exit 1\nfi\n\ndate\ntime make -j$(($NPROCS + 1))\n\nccache -s\n### incrementally purge old content from cargo source cache and target directory\ncargo cache trim --limit 100M\ncargo sweep --maxsize 500MB\n\nif [ $WITH_TESTS -eq 0 ] ; then\n    echo \"Build done, skipping tests\"\n    exit 0\nfi\n\nif [ $TEMP_POSTGRES -eq 0 ] ; then\n    # Create postgres databases\n    export PGUSER=postgres\n    psql -c \"create database test;\"\n    # we run NPROCS jobs in parallel\n    for j in $(seq 0 $((NPROCS-1))); do\n        base_instance=$((j*50))\n        for i in $(seq $base_instance $((base_instance+15))); do\n            psql -c \"create database test$i;\"\n        done\n    done\nfi\n\nexport ALL_VERSIONS=1\nexport NUM_PARTITIONS=$((NPROCS*2))\nexport RUN_PARTITIONS\nulimit -n 256\ntime make check\n\necho All done\ndate\nexit 0\n"
        },
        {
          "name": "common.mk",
          "type": "blob",
          "size": 1.7431640625,
          "content": "# Hand-written file with variables common to all makefiles\n\nAM_CPPFLAGS = -isystem \"$(top_srcdir)\" -I\"$(top_srcdir)/src\" -I\"$(top_builddir)/src\"\nAM_CPPFLAGS += $(libsodium_CFLAGS) $(xdrpp_CFLAGS) $(libmedida_CFLAGS)\t\\\n\t$(soci_CFLAGS) $(sqlite3_CFLAGS) $(libasio_CFLAGS) $(libunwind_CFLAGS)\nAM_CPPFLAGS += -isystem \"$(top_srcdir)/lib\"             \\\n\t-isystem \"$(top_srcdir)/lib/autocheck/include\"      \\\n\t-isystem \"$(top_srcdir)/lib/cereal/include\"         \\\n\t-isystem \"$(top_srcdir)/lib/util\"                   \\\n\t-isystem \"$(top_srcdir)/lib/fmt/include\"            \\\n\t-isystem \"$(top_srcdir)/lib/soci/src/core\"          \\\n\t-isystem \"$(top_srcdir)/lib/tracy/public/tracy\"     \\\n\t-isystem \"$(top_srcdir)/lib/spdlog/include\"         \\\n\t-isystem \"$(top_srcdir)/rust/src\"\n\nif USE_POSTGRES\nAM_CPPFLAGS += -DUSE_POSTGRES=1 $(libpq_CFLAGS)\nendif # USE_POSTGRES\n\nif ENABLE_NEXT_PROTOCOL_VERSION_UNSAFE_FOR_PRODUCTION\nAM_CPPFLAGS += -I\"$(top_builddir)/src/protocol-next\"\nelse\nAM_CPPFLAGS += -I\"$(top_builddir)/src/protocol-curr\"\nendif\n\n# Unconditionally add CEREAL_THREAD_SAFE, we always want it.\nAM_CPPFLAGS += -DCEREAL_THREAD_SAFE\n\n# USE_TRACY and tracy_CFLAGS here represent the case of enabling\n# tracy at configure-time; but even when it is disabled we want\n# its includes in the CPPFLAGS above, so its (disabled) headers\n# and zone-definition macros are included in our code (and\n# compiled to no-ops).\nif USE_TRACY\nAM_CPPFLAGS += -DUSE_TRACY $(tracy_CFLAGS)\nendif # USE_TRACY\n\nif BUILD_TESTS\nAM_CPPFLAGS += -DBUILD_TESTS=1\nendif # BUILD_TESTS\n\nif USE_SPDLOG\nAM_CPPFLAGS += -DUSE_SPDLOG\nendif # USE_SPDLOG\n\nif ENABLE_NEXT_PROTOCOL_VERSION_UNSAFE_FOR_PRODUCTION\nAM_CPPFLAGS += -DENABLE_NEXT_PROTOCOL_VERSION_UNSAFE_FOR_PRODUCTION\nendif # ENABLE_NEXT_PROTOCOL_VERSION_UNSAFE_FOR_PRODUCTION\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 17.9658203125,
          "content": "# -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\n# Copyright 2015 Stellar Development Foundation and contributors. Licensed\n# under the Apache License, Version 2.0. See the COPYING file at the root\n# of this distribution or at http://www.apache.org/licenses/LICENSE-2.0\n\nAC_PREREQ([2.68])\nAC_INIT([stellar-core],[0.1],[],[],[http://www.stellar.org])\n# tar-ustar is required for long file names when libsodium is bundled\nAM_INIT_AUTOMAKE([-Wall -Wextra -Wconversion subdir-objects tar-ustar silent-rules])\nAC_CONFIG_SRCDIR([configure.ac])\nAC_CONFIG_MACRO_DIR([m4])\nAC_CANONICAL_HOST\n\nAC_ARG_VAR([LIBCXX_PATH], [path to libc++ and libc++abi])\n\nif test -z \"${WFLAGS+set}\"; then\n   WFLAGS=-Wall\n\n   # Our large include path set makes for annoying warnings without this\n   WFLAGS=\"$WFLAGS -Wno-unused-command-line-argument -Qunused-arguments\"\n\n   # Asio's headers have unused typedefs that flood the compilation\n   # output without this\n   WFLAGS=\"$WFLAGS -Wno-unused-local-typedef\"\n\n   # Also don't _further_ warn if the previous warning flag was unknown\n   WFLAGS=\"$WFLAGS -Wno-unknown-warning-option\"\n\n   # We want to consider unused MUST_USE results as errors\n   WFLAGS=\"$WFLAGS -Werror=unused-result\"\nfi\n\ntest \"${CFLAGS+set}\" || CFLAGS=\"-g -O2 -fno-omit-frame-pointer\"\ntest \"${CXXFLAGS+set}\" || CXXFLAGS=\"$CFLAGS\"\n\nAC_PROG_CC([clang gcc cc])\nAC_PROG_CXX([clang++ g++ c++])\nAM_PROG_AR\nAM_PROG_CC_C_O\n\nLT_INIT([disable-shared])\nAC_SUBST(LIBTOOL_DEPS)\n\nAC_LANG(C++)\n# if modifying the following macro for a future C++ version, please update CXX\n# for enable-afl in the fuzzer configuration block below\nAX_CXX_COMPILE_STDCXX(17, noext,mandatory)\nAX_FRESH_COMPILER\n# -pthread seems to be required by -std=c++14 on some hosts\nAX_APPEND_COMPILE_FLAGS([-pthread])\n\n# additional defines\nAX_APPEND_COMPILE_FLAGS([-DFMT_HEADER_ONLY=1])\n\nAC_MSG_CHECKING([whether defect report N4387 is resolved])\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([[#include <tuple>\nstd::tuple<int, int> f()\n{\n    return {1, 2};\n}\n]])], [AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no]); AC_MSG_ERROR([defect report N4387 is not resolved])], AC_MSG_FAILURE)\n\nAC_MSG_CHECKING([for c++14 compliant std::weak_ptr move-constructor])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <memory>]], [[std::shared_ptr<int> shared = std::make_shared<int>(0);\nstd::weak_ptr<int> weak1(shared);\nstd::weak_ptr<int> weak2(std::move(weak1));\nreturn !((weak1.expired()) && (weak1.lock() == nullptr));\n]])], [AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no]); AC_MSG_ERROR([non-compliant std::weak_ptr move-constructor])], AC_MSG_FAILURE)\n\nAC_MSG_CHECKING([for c++14 compliant std::weak_ptr move-assignment operator])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <memory>]], [[std::shared_ptr<int> shared = std::make_shared<int>(0);\nstd::weak_ptr<int> weak1(shared);\nstd::weak_ptr<int> weak2 = std::move(weak1);\nreturn !((weak1.expired()) && (weak1.lock() == nullptr));\n]])], [AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no]); AC_MSG_ERROR([non-compliant std::weak_ptr move-assignment operator])], AC_MSG_FAILURE)\n\nAC_ARG_ENABLE([sdfprefs],\n    AS_HELP_STRING([--enable-sdfprefs],\n        [Enable build settings preferred by Stellar developers]))\n\nAS_IF([test xyes = \"x$enable_sdfprefs\"],\n        [AM_SILENT_RULES([yes])\n    WFLAGS=\"$WFLAGS -fcolor-diagnostics\"])\n\nAS_IF([test xyes != \"x$enable_sdfprefs\" -a xyes != \"x$enable_silent_rules\"],\n        ac_configure_args=\"$ac_configure_args --disable-silent-rules\")\n\nAX_APPEND_COMPILE_FLAGS($WFLAGS)\nAC_LANG_PUSH(C)\nAX_APPEND_COMPILE_FLAGS($WFLAGS)\n# ensure that we also enable pthread in C code\nAX_APPEND_COMPILE_FLAGS([-pthread])\nAC_LANG_POP(C)\n\nunset sanitizeopts\n\nAC_ARG_ENABLE([asan],\n  AS_HELP_STRING([--enable-asan],\n        [build with asan (address-sanitizer) instrumentation]))\nAS_IF([test \"x$enable_asan\" = \"xyes\"], [\n  AC_MSG_NOTICE([ Enabling asan, see https://clang.llvm.org/docs/AddressSanitizer.html ])\n  sanitizeopts=\"address\"\n])\n\nAC_ARG_ENABLE([codecoverage],\n  AS_HELP_STRING([--enable-codecoverage],\n        [build with code coverage enabled]))\nAS_IF([test \"x$enable_codecoverage\" = \"xyes\"], [\n  AC_MSG_NOTICE([ enabling codecoverage, see https://clang.llvm.org/docs/SourceBasedCodeCoverage.html ])\n\n  LDFLAGS=\"$LDFLAGS -fprofile-instr-generate -fcoverage-mapping\"\n  CXXFLAGS=\"$CXXFLAGS -fprofile-instr-generate -fcoverage-mapping\"\n  CFLAGS=\"$CFLAGS -fprofile-instr-generate -fcoverage-mapping\"\n])\n\nAC_ARG_ENABLE([threadsanitizer],\n  AS_HELP_STRING([--enable-threadsanitizer],\n        [build with thread-sanitizer (TSan) instrumentation]))\nAS_IF([test \"x$enable_threadsanitizer\" = \"xyes\"], [\n  AC_MSG_NOTICE([ enabling thread-sanitizer, see https://clang.llvm.org/docs/ThreadSanitizer.html ])\n\n  AS_IF([test x != \"x$sanitizeopts\"], [\n    AC_MSG_ERROR(Cannot enable multiple checkers at once)\n  ])\n  sanitizeopts=\"thread\"\n])\n\nAC_ARG_ENABLE([memcheck],\n  AS_HELP_STRING([--enable-memcheck],\n        [build with memcheck (memory-sanitizer) instrumentation]))\nAS_IF([test \"x$enable_memcheck\" = \"xyes\"], [\n  AC_MSG_NOTICE([ enabling memory-sanitizer, see https://clang.llvm.org/docs/MemorySanitizer.html ])\n  AC_MSG_NOTICE([ To completely enable poison destructor set MSAN_OPTIONS=poison_in_dtor=1 before running the program ])\n\n  AS_IF([test x != \"x$sanitizeopts\"], [\n    AC_MSG_ERROR(Cannot enable multiple checkers at once)\n  ])\n  sanitizeopts=\"memory -fsanitize-memory-track-origins=2 -fsanitize-memory-use-after-dtor\"\n\n  if test -z \"$LIBCXX_PATH\"; then\n   AC_MSG_ERROR(LIBCXX_PATH must be set for memcheck to work)\n  fi\n\n  CXXFLAGS=\"$CXXFLAGS -DMSAN_ENABLED\"\n  LDFLAGS=\"$LDFLAGS -fsanitize=$sanitizeopts\"\n])\n\nAS_IF([test x != \"x$LIBCXX_PATH\"], [\n  # use custom libc++\n  CXXFLAGS=\"$CXXFLAGS -stdlib=libc++\"\n  LDFLAGS=\"$LDFLAGS -L$LIBCXX_PATH -stdlib=libc++ -lc++abi -Wl,-rpath -Wl,$LIBCXX_PATH\"\n])\n\nAC_ARG_ENABLE([undefinedcheck],\n  AS_HELP_STRING([--enable-undefinedcheck],\n        [build with undefinedcheck (undefined-behavior-sanitizer) instrumentation]))\nAS_IF([test \"x$enable_undefinedcheck\" = \"xyes\"], [\n  AC_MSG_NOTICE([ enabling undefined-behavior-sanitizer, see https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html ])\n  AS_IF([test x != \"x$sanitizeopts\"], [\n    AC_MSG_ERROR(Cannot enable multiple checkers at once)\n  ])\n  sanitizeopts=\"undefined\"\n])\n\nAS_IF([test x != \"x$sanitizeopts\"], [\n  # Compilation should fail if these options are not supported\n  sanflags=\"-fsanitize=$sanitizeopts -fno-omit-frame-pointer\"\n  CFLAGS=\"$CFLAGS $sanflags\"\n  CXXFLAGS=\"$CXXFLAGS $sanflags\"\n\n  # compile our own libraries when sanitizers are enabled\n  libsodium_INTERNAL=yes\n  xdrpp_INTERNAL=yes\n\n])\n\nAC_ARG_ENABLE([extrachecks],\n  AS_HELP_STRING([--enable-extrachecks],\n        [build with additional debugging checks enabled]))\nAS_IF([test \"x$enable_extrachecks\" = \"xyes\"], [\n  # don't try to detect which c++ library we're using\n  CXXFLAGS=\"$CXXFLAGS -D_GLIBCXX_DEBUG=1 -D_GLIBCXX_SANITIZE_VECTOR=1 -D_LIBCPP_DEBUG=0 -DBEST_OFFER_DEBUGGING\"\n])\n\nAC_ARG_ENABLE([ccache],\n              AS_HELP_STRING([--enable-ccache], [build with ccache]))\nAS_IF([test \"x$enable_ccache\" = \"xyes\"], [\n  AC_CHECK_PROGS([CCACHE], [ccache])\n  AS_IF([test -z \"$CCACHE\"], [\n    AC_MSG_ERROR([ccache enabled but not found])\n  ])\n  case \"$CC\" in\n  *ccache\\ *)\n      ;;\n  *)\n      CC=\"ccache ${CC}\"\n      ;;\n  esac\n  case \"$CXX\" in\n    *ccache\\ *)\n      ;;\n    *)\n      CXX=\"ccache ${CXX}\"\n      ;;\n  esac\n])\n\n# Permit user to enable AFL instrumentation\nAC_ARG_ENABLE([afl],\n              AS_HELP_STRING([--enable-afl],\n                             [build with AFL (fuzzer) instrumentation]))\nAS_IF([test \"x$enable_afl\" = \"xyes\"], [\n  AS_IF([test \"x$sanitizeopts\" != \"x\"], [\n    AC_MSG_ERROR([AFL is presently incompatible with sanitizers])\n  ])\n  AS_IF([test \"x$enable_ccache\" = \"xyes\"], [\n    AC_MSG_ERROR([AFL is presently incompatible with ccache])\n  ])\n  AC_CHECK_PROGS([AFL_FUZZ], [afl-fuzz])\n  AS_CASE([\"$CC\"],\n          [clang*], [AC_CHECK_PROGS([AFL_CLANG], [afl-clang-fast])\n                     AC_CHECK_PROGS([AFL_CLANGPP], [afl-clang-fast++])\n                     CC=\"afl-clang-fast\"\n                     # below we hard code -std=c++17 since updates to AX_CXX_COMPILE_STDCXX append it to\n                     # CXX, not to CXXFLAGS and thus when setting CXX we override this. For a more detailed explanation\n                     # see: https://github.com/stellar/docker-stellar-core/pull/66#issuecomment-521886881\n                     CXX=\"afl-clang-fast++ -std=c++17 -DAFL_LLVM_MODE=1\"],\n          [gcc*],   [AC_CHECK_PROGS([AFL_GCC], [afl-gcc])\n                     AC_CHECK_PROGS([AFL_GPP], [afl-g++])\n                     CC=\"afl-gcc\"\n                     # below we hard code -std=c++17 since updates to AX_CXX_COMPILE_STDCXX append it to\n                     # CXX, not to CXXFLAGS and thus when setting CXX we override this. For a more detailed explanation\n                     # see: https://github.com/stellar/docker-stellar-core/pull/66#issuecomment-521886881\n                     CXX=\"afl-g++ -std=c++17\"],\n          [AC_MSG_ERROR([Don't know how to instrument CC=$CC with AFL])])\n])\nAM_CONDITIONAL([USE_AFL_FUZZ], [test \"x$enable_afl\" == \"xyes\"])\n\n# check to see if we need to append -lstdc++fs or -lc++fs to access\n# functionality from <filesystem> (for some reason this was thought\n# a good idea in gcc 8 and clang 8)\nAC_MSG_CHECKING([to see if <filesystem> works without any extra libs])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <filesystem>]],\n\t      [[return std::filesystem::exists(std::filesystem::path(\"hello\"));]])],\n              [AC_MSG_RESULT([yes]); FS_WORKS=yes],\n              [AC_MSG_RESULT([no]); FS_WORKS=no])\nfor testlib in -lstdc++fs -lc++fs; do\n    if test \"$FS_WORKS\" = \"no\"; then\n        fs_save_LIBS=\"$LIBS\"\n        LIBS=\"$testlib $LIBS\"\n        AC_MSG_CHECKING([to see if <filesystem> works with $testlib])\n        AC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <filesystem>]],\n\t\t      [[return std::filesystem::exists(std::filesystem::path(\"hello\"));]])],\n                  [AC_MSG_RESULT([yes]); FS_WORKS=yes],\n                  [AC_MSG_RESULT([no]); FS_WORKS=no; LIBS=\"$fs_save_LIBS\"])\n    fi\ndone\nif test \"$FS_WORKS\" = \"no\"; then\n   AC_MSG_ERROR([C++17 <filesystem> does not work with any known linker flags])\nfi\n\n# prefer 10 as it's the one we use\nAC_CHECK_PROGS(CLANG_FORMAT, [clang-format-12 clang-format])\nAM_CONDITIONAL([USE_CLANG_FORMAT], [test \"x$CLANG_FORMAT\" != \"x\"])\n\nAX_VALGRIND_CHECK\n\nif test yes != \"$enable_shared\"; then\n   ac_configure_args=\"$ac_configure_args --disable-shared\"\nfi\n\n# We use several features of sqlite that require not just a new version\n# (eg. partial indexes, >=3.8.0; upserts, >= 3.24.0) but also the carray\n# extension, which is compiled-out of most platform sqlites. We therefore\n# always use our own bundled copy, version 3.26.0 at the time of this\n# writing.\nsqlite3_CFLAGS='-isystem $(top_srcdir)/lib/sqlite -DSQLITE_CORE -DSQLITE_OMIT_LOAD_EXTENSION=1'\nsqlite3_LIBS=\nAC_SUBST(sqlite3_CFLAGS)\nAC_SUBST(sqlite3_LIBS)\n\nPKG_CHECK_MODULES(libsodium, [libsodium >= 1.0.17], :, libsodium_INTERNAL=yes)\n\nAX_PKGCONFIG_SUBDIR(lib/libsodium)\nif test -n \"$libsodium_INTERNAL\"; then\n   libsodium_LIBS='$(top_builddir)/lib/libsodium/src/libsodium/libsodium.la'\nfi\n\nAX_PKGCONFIG_SUBDIR(lib/xdrpp)\nAC_MSG_CHECKING(for xdrc)\nif test -n \"$XDRC\"; then\n   :\nelif test -n \"$xdrpp_INTERNAL\" -a x\"$cross_compiling\" != xyes; then\n   XDRC='$(top_builddir)/lib/xdrpp/xdrc/xdrc$(EXEEXT)'\nelse\n   AC_PATH_PROG(XDRC, [xdrc])\nfi\nif test -z \"$XDRC\"; then\n   AC_MSG_ERROR(Cannot find xdrc)\nfi\nAC_MSG_RESULT($XDRC)\nAC_SUBST(XDRC)\n\n# Directory needed for xdrc output (won't exist in build directory)\nmkdir -p src/xdr\n\nif test -s \"$srcdir/lib/medida.mk\"; then\n   libmedida_CFLAGS='-isystem $(top_srcdir)/lib/libmedida/src'\n   libmedida_LIBS='$(top_builddir)/lib/libmedida.a'\n   libmedida_INTERNAL=yes\nelse\n   PKG_CHECK_MODULES(libmedida, libmedida)\n   unset libmedida_INTERNAL\nfi\nAM_CONDITIONAL(LIBMEDIDA_INTERNAL, test -n \"$libmedida_INTERNAL\")\nAC_SUBST(libmedida_CFLAGS)\nAC_SUBST(libmedida_LIBS)\n\nsoci_CFLAGS='-isystem $(top_srcdir)/lib/soci/src/core'\nsoci_LIBS='$(top_builddir)/lib/libsoci.a'\nAC_SUBST(soci_CFLAGS)\nAC_SUBST(soci_LIBS)\n\nlibasio_CFLAGS='-DASIO_SEPARATE_COMPILATION=1 -DASIO_STANDALONE -isystem $(top_srcdir)/lib/asio/asio/include'\nAC_SUBST(libasio_CFLAGS)\n\nAC_ARG_ENABLE(postgres,\n    AS_HELP_STRING([--disable-postgres],\n        [Disable postgres support even when libpq available]))\nunset have_postgres\nif test x\"$enable_postgres\" != xno; then\n    PKG_CHECK_MODULES(libpq, libpq, have_postgres=1)\n    if test -n \"$enable_postgres\" -a -z \"$have_postgres\"; then\n       AC_MSG_ERROR([Cannot find postgres library])\n    fi\nfi\nAM_CONDITIONAL(USE_POSTGRES, [test -n \"$have_postgres\"])\n\nAC_ARG_ENABLE(tests,\n    AS_HELP_STRING([--disable-tests],\n        [Disable building test suite]))\nAM_CONDITIONAL(BUILD_TESTS, [test x$enable_tests != xno])\n\nAC_ARG_ENABLE(tracy,\n    AS_HELP_STRING([--enable-tracy],\n        [Enable 'tracy' profiler/tracer client stub]))\nAM_CONDITIONAL(USE_TRACY, [test x$enable_tracy = xyes])\ntracy_CFLAGS='-DTRACY_ENABLE -DTRACY_ON_DEMAND -DTRACY_NO_BROADCAST -DTRACY_ONLY_LOCALHOST -DTRACY_ONLY_IPV4 -DTRACY_DELAYED_INIT'\nif test x\"$enable_tracy\" = xyes; then\n    case \"${host_os}\" in\n        *darwin*)\n            ;;\n        *)\n            LDFLAGS+=\" -ldl \"\n            ;;\n    esac\nfi\nAC_SUBST(tracy_CFLAGS)\n\nAC_ARG_ENABLE(tracy-memory-tracking,\n    AS_HELP_STRING([--enable-tracy-memory-tracking],\n        [Enable 'tracy' profiler/tracer memory tracking code (slow)]))\nAM_CONDITIONAL(USE_TRACY_MEMORY_TRACKING, [test x$enable_tracy_memory_tracking = xyes])\n\nif test x\"$enable_tracy\" = xyes -a x\"$enable_asan\" = xyes; then\n       AC_MSG_ERROR([--enable-asan is not compatible with --enable-tracy])\nfi\nif test x\"$enable_tracy_memory_tracking\" = xyes -a x\"$enable_asan\" = xyes; then\n       AC_MSG_ERROR([--enable-asan is not compatible with --enable-tracy-memory-tracking])\nfi\n\nAC_ARG_ENABLE(tracy-gui,\n    AS_HELP_STRING([--enable-tracy-gui],\n        [Enable 'tracy' profiler/tracer server GUI]))\nAM_CONDITIONAL(USE_TRACY_GUI, [test x$enable_tracy_gui = xyes])\nif test x\"$enable_tracy_gui\" = xyes; then\n    PKG_CHECK_MODULES(capstone, capstone)\n    PKG_CHECK_MODULES(freetype, freetype2)\n    PKG_CHECK_MODULES(glfw, glfw3)\n    case \"${host_os}\" in\n        *darwin*)\n            ;;\n        *)\n            PKG_CHECK_MODULES(gtk, gtk+-2.0)\n            ;;\n    esac\nfi\n\nAC_ARG_ENABLE(tracy-capture,\n    AS_HELP_STRING([--enable-tracy-capture],\n        [Enable 'tracy' profiler/tracer capture program]))\nAM_CONDITIONAL(USE_TRACY_CAPTURE, [test x$enable_tracy_capture = xyes])\n\nAC_ARG_ENABLE(tracy-csvexport,\n    AS_HELP_STRING([--enable-tracy-csvexport],\n        [Enable 'tracy' profiler/tracer csvexport program]))\nAM_CONDITIONAL(USE_TRACY_CSVEXPORT, [test x$enable_tracy_csvexport = xyes])\n\nAC_ARG_ENABLE(spdlog,\n    AS_HELP_STRING([--disable-spdlog],\n        [Disable spdlog]))\nAM_CONDITIONAL(USE_SPDLOG, [test x$enable_spdlog != xno])\n\nAC_ARG_ENABLE(next-protocol-version-unsafe-for-production,\n    AS_HELP_STRING([--enable-next-protocol-version-unsafe-for-production],\n        [Enable next protocol version UNSAFE FOR PRODUCTION]))\nAM_CONDITIONAL(ENABLE_NEXT_PROTOCOL_VERSION_UNSAFE_FOR_PRODUCTION,\n    [test x$enable_next_protocol_version_unsafe_for_production = xyes])\n\nAC_ARG_ENABLE(libunwind,\n    AS_HELP_STRING([--disable-libunwind],\n        [Disable backtraces using libunwind]))\nif test x\"$enable_libunwind\" != xno; then\n    case \"${host_os}\" in\n        *darwin*)\n            # libunwind comes standard with the command-line tools on macos\n            AC_MSG_NOTICE([using platform-native libunwind])\n            AC_DEFINE([HAVE_LIBUNWIND], [1],\n                [Define to 1 if you have the <libunwind.h> header file])\n            ;;\n        *)\n            # Unfortunately libunwind seems to interfere with clang-compiled\n            # exception-handling, at least when linked with libgcc (which is the\n            # default of libcxx and a requirement for libstdc++). I think this is\n            # roughly caused by both libgcc and libunwind providing the C++ EH ABI\n            # symbols but, evidently, interacting with clang-compiled code slightly\n            # differently when ELF-interposed with one another, in the same binary.\n            #\n            # Haven't been able to make a reduced testcase that works. You can check\n            # that this is still a problem by running the stellar-core Catch2-based\n            # unit test suite: many of the tests do REQUIRE_THROWS_AS(...) and\n            # that crashes with libunwind+clang.  Haven't been able to figure out a\n            # workaround either.\n            case \"${CXX}\" in\n                *clang*)\n                    AC_MSG_NOTICE([backtraces disabled due to clang interaction with libunwind])\n                ;;\n                *)\n                    PKG_CHECK_MODULES(libunwind, libunwind,\n                        AC_DEFINE([HAVE_LIBUNWIND], [1],\n                                  [Define to 1 if you have the <libunwind.h> header file]))\n               ;;\n            esac\n            ;;\n    esac\nelse\n  AC_MSG_NOTICE([not using libunwind as it was not requested])\nfi\n\nAC_PATH_PROG(CARGO, cargo)\nif test x\"$CARGO\" = x; then\n  AC_MSG_ERROR([cannot find cargo, needed for rust code])\nfi\nCARGO_VERSION=\"$(${CARGO} --version)\"\nCARGO_VERSION=\"${CARGO_VERSION#cargo}\"\nAX_COMPARE_VERSION([${CARGO_VERSION}],[ge],[1.57],[],[\n  AC_MSG_ERROR([cargo version too old (need >= 1.57)])\n])\nAC_ARG_VAR(CARGO)\n\nAC_PATH_PROG(RUSTC, rustc)\nif test x\"$RUSTC\" = x; then\n  AC_MSG_ERROR([cannot find rustc, needed for rust code])\nfi\nRUSTC_VERSION=\"$(${RUSTC} --version)\"\nRUSTC_VERSION=\"${RUSTC_VERSION#rustc}\"\nAX_COMPARE_VERSION([${RUSTC_VERSION}],[ge],[1.57],[],[\n  AC_MSG_ERROR([rustc version too old (need >= 1.57)])\n])\nAC_ARG_VAR(RUSTC)\n\n# Need this to pass through ccache for xdrpp, libsodium\nesc() {\n    out=\n    for arg in \"$@\"; do\n        out=\"$out${out+ }$(echo \"$arg\" | sed \"s/'/'\\\\''/g; s/^/'/; s/\\$/'/\")\"\n    done\n    echo $out\n}\n\n# explicitly propagate CFLAGS, CXXFLAGS and LDFLAGS in case they got modified by global options\nac_configure_args=\"$ac_configure_args $(esc \"CC=$CC\" \"CXX=$CXX\" \"CFLAGS=$CFLAGS\" \"CXXFLAGS=$CXXFLAGS\" \"LDFLAGS=$LDFLAGS\")\"\n\nAC_CONFIG_HEADERS(config.h)\nAC_CONFIG_FILES(lib/Makefile src/Makefile Makefile)\nAC_OUTPUT\n\n"
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 11.4892578125,
          "content": "# This template contains all of the possible sections and their default values\n\n# Note that all fields that take a lint level have these possible values:\n# * deny - An error will be produced and the check will fail\n# * warn - A warning will be produced, but the check will not fail\n# * allow - No warning or error will be produced, though in some cases a note\n# will be\n\n# The values provided in this template are the default values that will be used\n# when any section or field is not specified in your own configuration\n\n# Root options\n\n[graph]\n# If 1 or more target triples (and optionally, target_features) are specified,\n# only the specified targets will be checked when running `cargo deny check`.\n# This means, if a particular package is only ever used as a target specific\n# dependency, such as, for example, the `nix` crate only being used via the\n# `target_family = \"unix\"` configuration, that only having windows targets in\n# this list would mean the nix crate, as well as any of its exclusive\n# dependencies not shared by any other crates, would be ignored, as the target\n# list here is effectively saying which targets you are building for.\ntargets = [\n    { triple = \"x86_64-unknown-linux-gnu\" },\n    { triple = \"aarch64-unknown-linux-gnu\" },\n    { triple = \"wasm32-unknown-unknown\" }\n    # The triple can be any string, but only the target triples built in to\n    # rustc (as of 1.40) can be checked against actual config expressions\n    #{ triple = \"x86_64-unknown-linux-musl\" },\n    # You can also specify which target_features you promise are enabled for a\n    # particular target. target_features are currently not validated against\n    # the actual valid features supported by the target architecture.\n    #{ triple = \"wasm32-unknown-unknown\", features = [\"atomics\"] },\n]\n# When creating the dependency graph used as the source of truth when checks are\n# executed, this field can be used to prune crates from the graph, removing them\n# from the view of cargo-deny. This is an extremely heavy hammer, as if a crate\n# is pruned from the graph, all of its dependencies will also be pruned unless\n# they are connected to another crate in the graph that hasn't been pruned,\n# so it should be used with care. The identifiers are [Package ID Specifications]\n# (https://doc.rust-lang.org/cargo/reference/pkgid-spec.html)\n\nexclude = [\n   # used only when doing CPU-calibration benchmarks, not worth worrying about\n   \"ansi_term\",\n   \"textplots\",\n   \"linregress\",\n   # the dep specs of tracy-client are weird and include \"loom\" which it\n   # totally doesn't depend on but in any case it's compiled-out in real\n   # production builds we care about.\n   \"tracy-client\",\n   # Somehow the tracking machinery of two different dev-dep tracing\n   # subsystems also winds up pulling in conflicts, but again, just\n   # dev-deps or non-produciton configs.\n   \"tracking-allocator\",\n]\n\n# If true, metadata will be collected with `--all-features`. Note that this can't\n# be toggled off if true, if you want to conditionally enable `--all-features` it\n# is recommended to pass `--all-features` on the cmd line instead\nall-features = true\n# If true, metadata will be collected with `--no-default-features`. The same\n# caveat with `all-features` applies\nno-default-features = false\n# If set, these feature will be enabled when collecting metadata. If `--features`\n# is specified on the cmd line they will take precedence over this option.\n#features = []\n# When outputting inclusion graphs in diagnostics that include features, this\n# option can be used to specify the depth at which feature edges will be added.\n# This option is included since the graphs can be quite large and the addition\n# of features from the crate(s) to all of the graph roots can be far too verbose.\n# This option can be overridden via `--feature-depth` on the cmd line\n# feature-depth = 1\n\n# This section is considered when running `cargo deny check advisories`\n# More documentation for the advisories section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html\n[advisories]\n# as of version 2, all advisories are errors and one must ignore\n# any you want to ignore.\nversion = 2\n# The path where the advisory database is cloned/fetched into\ndb-path = \"~/.cargo/advisory-db\"\n# The url(s) of the advisory databases to use\ndb-urls = [\"https://github.com/rustsec/advisory-db\"]\n# A list of advisory IDs to ignore. Note that ignored advisories will still\n# output a note when they are encountered.\nignore = [\n    #\"RUSTSEC-0000-0000\",\n]\n# Threshold for security vulnerabilities, any vulnerability with a CVSS score\n# lower than the range specified will be ignored. Note that ignored advisories\n# will still output a note when they are encountered.\n# * None - CVSS Score 0.0\n# * Low - CVSS Score 0.1 - 3.9\n# * Medium - CVSS Score 4.0 - 6.9\n# * High - CVSS Score 7.0 - 8.9\n# * Critical - CVSS Score 9.0 - 10.0\n#severity-threshold =\n\n# If this is true, then cargo deny will use the git executable to fetch advisory database.\n# If this is false, then it uses a built-in git library.\n# Setting this to true can be helpful if you have special authentication requirements that cargo-deny does not support.\n# See Git Authentication for more information about setting up git authentication.\n#git-fetch-with-cli = true\n\n# This section is considered when running `cargo deny check licenses`\n# More documentation for the licenses section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/licenses/cfg.html\n[licenses]\n# As of version 2 all not-explicitly-allowed cases are denied.\nversion = 2\n# List of explicitly allowed licenses\n# See https://spdx.org/licenses/ for list of possible licenses\n# [possible values: any SPDX 3.11 short identifier (+ optional exception)].\nallow = [\n    \"MIT\",\n    \"Apache-2.0\",\n    \"BSD-3-Clause\",\n    \"Apache-2.0 WITH LLVM-exception\",\n    \"Unicode-DFS-2016\",\n    # \"MPL-2.0\"\n]\n# The confidence threshold for detecting a license from license text.\n# The higher the value, the more closely the license text must be to the\n# canonical license text of a valid SPDX license file.\n# [possible values: any between 0.0 and 1.0].\nconfidence-threshold = 0.8\n# Allow 1 or more licenses on a per-crate basis, so that particular licenses\n# aren't accepted for every possible crate as with the normal allow list\nexceptions = [\n    # Each entry is the crate and version constraint, and its specific allow\n    # list\n    #{ allow = [\"Zlib\"], name = \"adler32\", version = \"*\" },\n]\n\n# Some crates don't have (easily) machine readable licensing information,\n# adding a clarification entry for it allows you to manually specify the\n# licensing information\n#[[licenses.clarify]]\n# The name of the crate the clarification applies to\n#name = \"ring\"\n# The optional version constraint for the crate\n#version = \"*\"\n# The SPDX expression for the license requirements of the crate\n#expression = \"MIT AND ISC AND OpenSSL\"\n# One or more files in the crate's source used as the \"source of truth\" for\n# the license expression. If the contents match, the clarification will be used\n# when running the license check, otherwise the clarification will be ignored\n# and the crate will be checked normally, which may produce warnings or errors\n# depending on the rest of your configuration\n#license-files = [\n    # Each entry is a crate relative path, and the (opaque) hash of its contents\n    #{ path = \"LICENSE\", hash = 0xbd0eed23 }\n#]\n\n[licenses.private]\n# If true, ignores workspace crates that aren't published, or are only\n# published to private registries.\n# To see how to mark a crate as unpublished (to the official registry),\n# visit https://doc.rust-lang.org/cargo/reference/manifest.html#the-publish-field.\nignore = true\n# One or more private registries that you might publish crates to, if a crate\n# is only published to private registries, and ignore is true, the crate will\n# not have its license(s) checked\nregistries = [\n    #\"https://sekretz.com/registry\n]\n\n# This section is considered when running `cargo deny check bans`.\n# More documentation about the 'bans' section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/bans/cfg.html\n[bans]\n# Lint level for when multiple versions of the same crate are detected\nmultiple-versions = \"deny\"\n# Lint level for when a crate version requirement is `*`\nwildcards = \"deny\"\nallow-wildcard-paths = true\n# The graph highlighting used when creating dotgraphs for crates\n# with multiple versions\n# * lowest-version - The path to the lowest versioned duplicate is highlighted\n# * simplest-path - The path to the version with the fewest edges is highlighted\n# * all - Both lowest-version and simplest-path are used\nhighlight = \"all\"\n# The default lint level for `default` features for crates that are members of\n# the workspace that is being checked. This can be overriden by allowing/denying\n# `default` on a crate-by-crate basis if desired.\nworkspace-default-features = \"allow\"\n# The default lint level for `default` features for external crates that are not\n# members of the workspace. This can be overriden by allowing/denying `default`\n# on a crate-by-crate basis if desired.\nexternal-default-features = \"allow\"\n# List of crates that are allowed. Use with care!\nallow = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n]\n# List of crates to deny\ndeny = [\n    # Each entry the name of a crate and a version range. If version is\n    # not specified, all versions will be matched.\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n    #\n    # Wrapper crates can optionally be specified to allow the crate when it\n    # is a direct dependency of the otherwise banned crate\n    #{ name = \"ansi_term\", version = \"=0.11.0\", wrappers = [] },\n]\n\n# List of features to allow/deny\n# Each entry the name of a crate and a version range. If version is\n# not specified, all versions will be matched.\n#[[bans.features]]\n#name = \"reqwest\"\n# Features to not allow\n#deny = [\"json\"]\n# Features to allow\n#allow = [\n#    \"rustls\",\n#    \"__rustls\",\n#    \"__tls\",\n#    \"hyper-rustls\",\n#    \"rustls\",\n#    \"rustls-pemfile\",\n#    \"rustls-tls-webpki-roots\",\n#    \"tokio-rustls\",\n#    \"webpki-roots\",\n#]\n# If true, the allowed features must exactly match the enabled feature set. If\n# this is set there is no point setting `deny`\n#exact = true\n\n# Certain crates/versions that will be skipped when doing duplicate detection.\nskip = [\n    #{ name = \"ansi_term\", version = \"=0.11.0\" },\n]\n# Similarly to `skip` allows you to skip certain crates during duplicate\n# detection. Unlike skip, it also includes the entire tree of transitive\n# dependencies starting at the specified crate, up to a certain depth, which is\n# by default infinite.\nskip-tree = [\n   # { name = \"\" },\n ]\n\n# This section is considered when running `cargo deny check sources`.\n# More documentation about the 'sources' section can be found here:\n# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html\n[sources]\n# Lint level for what to happen when a crate from a crate registry that is not\n# in the allow list is encountered\nunknown-registry = \"deny\"\n# Lint level for what to happen when a crate from a git repository that is not\n# in the allow list is encountered\nunknown-git = \"deny\"\n# List of URLs for allowed crate registries. Defaults to the crates.io index\n# if not specified. If it is specified but empty, no registries are allowed.\nallow-registry = [\"https://github.com/rust-lang/crates.io-index\"]\n# List of URLs for allowed Git repositories\nallow-git = [\n]\n\n[sources.allow-org]\n# 1 or more github.com organizations to allow git sources for\ngithub = [\"stellar\"]\n# 1 or more gitlab.com organizations to allow git sources for\n# gitlab = [\"\"]\n# 1 or more bitbucket.org organizations to allow git sources for\n# bitbucket = [\"\"]\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "hash-xdrs.sh",
          "type": "blob",
          "size": 1.10546875,
          "content": "#!/bin/bash\n#\n# This file generates a C++ file which contains (filename, hash) pairs for XDR\n# files included in the build. These are included in the stellar-core build to\n# be checked against similar hashes produced by xdrgen when it is compiling XDR\n# definitions for Rust code.\n#\n# The goal is to detect the (unfortunately easy) condition of C++ and Rust code\n# communicating with each other using different XDR definitions.\n\nset -o errexit\nset -o pipefail\n\nif [ ! -d $1/xdr ]; then\n    echo \"usage: $0 XDR_PROTOCOL_DIR\"\n    exit 1\nfi\n\ncat <<EOF\n// DO NOT EDIT: this file is automatically generated from $0\n#include <string>\n#include <vector>\n#include <filesystem>\nnamespace stellar {\nextern const std::vector<std::pair<std::filesystem::path, std::string>> XDR_FILES_SHA256 = {\nEOF\n\n# Hashes to ignore\nIGNORE=\"Stellar-internal\\|Stellar-overlay\\|Stellar-contract-spec\\|Stellar-contract-meta\\|Stellar-contract-env-meta\"\n\nsha256sum -b $1/xdr/*.x | grep -v \"${IGNORE}\" | perl -pe 's/([a-f0-9]+)[ \\*]+(.*)/{\"$2\", \"$1\"},/'\n\n# Add empty entries for the 5 skipped files\necho '{\"\", \"\"}, {\"\", \"\"}, {\"\", \"\"}, {\"\", \"\"}, {\"\", \"\"}};'\necho '}'\n"
        },
        {
          "name": "install-rust.sh",
          "type": "blob",
          "size": 3.107421875,
          "content": "#!/bin/sh\n#\n# This file should be run if you want to install the exact version of Rust that\n# stellar-core is building its packages and testing with.\n#\n# You are of course welcome to install your own version of Rust, but this file\n# is version-controlled and run in CI to make the dependency explicit (and to\n# use a version newer than the debian packages).\n\n# Fail on any error\nset -e\n\n# Print each step as we go\nset -x\n\n# Extracts the current release-channel (which in our case is a specific rust\n# version) that we want to install. This value will change relatively often, as\n# new Rust _compilers_ are released, but you should only have to change it in\n# rust-toolchain.toml. This file will pick it up automatically.\nRUST_VERSION=$(perl -ne 'if (/channel\\s+=\\s+\"(\\d+(?:\\.\\d+)+)\"/) { print $1 }' rust-toolchain.toml)\n\nif [ -z \"$RUST_VERSION\" ]; then\n    echo \"RUST_VERSION is empty\"\n    exit 1;\nfi\n\n# A specific version of rustup is selected for checksum stability. This install\n# script is intended to continue to work even after new versions of rustup are\n# released and it will continue to do so if we pin to a specific version. If we\n# do not pin to a specific version the checksums will fail for previously tagged\n# versions of core if the repository is cloned and this script is triggered\n# either manually or via one of the Docker image build processes.\nRUSTUP_VERSION=1.25.1\n\n# This is the SHA256 if the rustup-init binary (which is the same as rustup --\n# it renames itself) and should be retrieved from a trusted source (eg. the rust\n# website and/or by running sha256sum on a local copy of rustup you believe to\n# be legitimate). The canonical URL for the SHA256 checksum provided here is:\n#\n# https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init.sha256\n# https://static.rust-lang.org/rustup/dist/aarach64-unknown-linux-gnu/rustup-init.sha256\n#\n# Rustup is an installer, not the compiler, and the installer changes fairly\n# rarely, often a year between releases or more. This checksum will only need\n# to be updated when there's a new rustup (installer) release.\ncase \"$(uname -m)\" in\n  \"x86_64\"*)\n    HOST_TRIPLE=x86_64-unknown-linux-gnu\n    RUSTUP_SHA256=5cc9ffd1026e82e7fb2eec2121ad71f4b0f044e88bca39207b3f6b769aaa799c\n  ;;\n  \"aarch64\"*)\n    HOST_TRIPLE=aarch64-unknown-linux-gnu\n    RUSTUP_SHA256=e189948e396d47254103a49c987e7fb0e5dd8e34b200aa4481ecc4b8e41fb929\n  ;;\n  *) echo \"Unrecognized operating system / architecture: $(uname)\"; exit 1 ;;\nesac\n\n# We download rustup-init from a URL adjacent to the SHA256 file above, and\n# check that it matches the expected SHA256 wired-in to this file, and then run\n# it.\n#\n# Rustup with then install Rust binary components (compiler, stdlib, etc.) and\n# check their PGP signatures match the Rust project's signing key (the signing\n# key is embedded in rustup).\nrm -f rustup-init\ncurl --fail --output rustup-init \"https://static.rust-lang.org/rustup/archive/${RUSTUP_VERSION}/${HOST_TRIPLE}/rustup-init\"\necho \"${RUSTUP_SHA256} rustup-init\" | sha256sum --check\nchmod 0755 rustup-init\n./rustup-init -y --verbose --profile default --default-host \"${HOST_TRIPLE}\" --default-toolchain \"${RUST_VERSION}\"\n"
        },
        {
          "name": "install-sh",
          "type": "blob",
          "size": 13.6689453125,
          "content": "#!/bin/sh\n# install - install a program, script, or datafile\n\nscriptversion=2011-11-20.07; # UTC\n\n# This originates from X11R5 (mit/util/scripts/install.sh), which was\n# later released in X11R6 (xc/config/util/install.sh) with the\n# following copyright and license.\n#\n# Copyright (C) 1994 X Consortium\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\n# AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNEC-\n# TION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n# Except as contained in this notice, the name of the X Consortium shall not\n# be used in advertising or otherwise to promote the sale, use or other deal-\n# ings in this Software without prior written authorization from the X Consor-\n# tium.\n#\n#\n# FSF changes to this file are in the public domain.\n#\n# Calling this script install-sh is preferred over install.sh, to prevent\n# 'make' implicit rules from creating a file called install from it\n# when there is no Makefile.\n#\n# This script is compatible with the BSD install script, but was written\n# from scratch.\n\nnl='\n'\nIFS=\" \"\"\t$nl\"\n\n# set DOITPROG to echo to test this script\n\n# Don't use :- since 4.3BSD and earlier shells don't like it.\ndoit=${DOITPROG-}\nif test -z \"$doit\"; then\n  doit_exec=exec\nelse\n  doit_exec=$doit\nfi\n\n# Put in absolute file names if you don't have them in your path;\n# or use environment vars.\n\nchgrpprog=${CHGRPPROG-chgrp}\nchmodprog=${CHMODPROG-chmod}\nchownprog=${CHOWNPROG-chown}\ncmpprog=${CMPPROG-cmp}\ncpprog=${CPPROG-cp}\nmkdirprog=${MKDIRPROG-mkdir}\nmvprog=${MVPROG-mv}\nrmprog=${RMPROG-rm}\nstripprog=${STRIPPROG-strip}\n\nposix_glob='?'\ninitialize_posix_glob='\n  test \"$posix_glob\" != \"?\" || {\n    if (set -f) 2>/dev/null; then\n      posix_glob=\n    else\n      posix_glob=:\n    fi\n  }\n'\n\nposix_mkdir=\n\n# Desired mode of installed file.\nmode=0755\n\nchgrpcmd=\nchmodcmd=$chmodprog\nchowncmd=\nmvcmd=$mvprog\nrmcmd=\"$rmprog -f\"\nstripcmd=\n\nsrc=\ndst=\ndir_arg=\ndst_arg=\n\ncopy_on_change=false\nno_target_directory=\n\nusage=\"\\\nUsage: $0 [OPTION]... [-T] SRCFILE DSTFILE\n   or: $0 [OPTION]... SRCFILES... DIRECTORY\n   or: $0 [OPTION]... -t DIRECTORY SRCFILES...\n   or: $0 [OPTION]... -d DIRECTORIES...\n\nIn the 1st form, copy SRCFILE to DSTFILE.\nIn the 2nd and 3rd, copy all SRCFILES to DIRECTORY.\nIn the 4th, create DIRECTORIES.\n\nOptions:\n     --help     display this help and exit.\n     --version  display version info and exit.\n\n  -c            (ignored)\n  -C            install only if different (preserve the last data modification time)\n  -d            create directories instead of installing files.\n  -g GROUP      $chgrpprog installed files to GROUP.\n  -m MODE       $chmodprog installed files to MODE.\n  -o USER       $chownprog installed files to USER.\n  -s            $stripprog installed files.\n  -t DIRECTORY  install into DIRECTORY.\n  -T            report an error if DSTFILE is a directory.\n\nEnvironment variables override the default commands:\n  CHGRPPROG CHMODPROG CHOWNPROG CMPPROG CPPROG MKDIRPROG MVPROG\n  RMPROG STRIPPROG\n\"\n\nwhile test $# -ne 0; do\n  case $1 in\n    -c) ;;\n\n    -C) copy_on_change=true;;\n\n    -d) dir_arg=true;;\n\n    -g) chgrpcmd=\"$chgrpprog $2\"\n\tshift;;\n\n    --help) echo \"$usage\"; exit $?;;\n\n    -m) mode=$2\n\tcase $mode in\n\t  *' '* | *'\t'* | *'\n'*\t  | *'*'* | *'?'* | *'['*)\n\t    echo \"$0: invalid mode: $mode\" >&2\n\t    exit 1;;\n\tesac\n\tshift;;\n\n    -o) chowncmd=\"$chownprog $2\"\n\tshift;;\n\n    -s) stripcmd=$stripprog;;\n\n    -t) dst_arg=$2\n\t# Protect names problematic for 'test' and other utilities.\n\tcase $dst_arg in\n\t  -* | [=\\(\\)!]) dst_arg=./$dst_arg;;\n\tesac\n\tshift;;\n\n    -T) no_target_directory=true;;\n\n    --version) echo \"$0 $scriptversion\"; exit $?;;\n\n    --)\tshift\n\tbreak;;\n\n    -*)\techo \"$0: invalid option: $1\" >&2\n\texit 1;;\n\n    *)  break;;\n  esac\n  shift\ndone\n\nif test $# -ne 0 && test -z \"$dir_arg$dst_arg\"; then\n  # When -d is used, all remaining arguments are directories to create.\n  # When -t is used, the destination is already specified.\n  # Otherwise, the last argument is the destination.  Remove it from $@.\n  for arg\n  do\n    if test -n \"$dst_arg\"; then\n      # $@ is not empty: it contains at least $arg.\n      set fnord \"$@\" \"$dst_arg\"\n      shift # fnord\n    fi\n    shift # arg\n    dst_arg=$arg\n    # Protect names problematic for 'test' and other utilities.\n    case $dst_arg in\n      -* | [=\\(\\)!]) dst_arg=./$dst_arg;;\n    esac\n  done\nfi\n\nif test $# -eq 0; then\n  if test -z \"$dir_arg\"; then\n    echo \"$0: no input file specified.\" >&2\n    exit 1\n  fi\n  # It's OK to call 'install-sh -d' without argument.\n  # This can happen when creating conditional directories.\n  exit 0\nfi\n\nif test -z \"$dir_arg\"; then\n  do_exit='(exit $ret); exit $ret'\n  trap \"ret=129; $do_exit\" 1\n  trap \"ret=130; $do_exit\" 2\n  trap \"ret=141; $do_exit\" 13\n  trap \"ret=143; $do_exit\" 15\n\n  # Set umask so as not to create temps with too-generous modes.\n  # However, 'strip' requires both read and write access to temps.\n  case $mode in\n    # Optimize common cases.\n    *644) cp_umask=133;;\n    *755) cp_umask=22;;\n\n    *[0-7])\n      if test -z \"$stripcmd\"; then\n\tu_plus_rw=\n      else\n\tu_plus_rw='% 200'\n      fi\n      cp_umask=`expr '(' 777 - $mode % 1000 ')' $u_plus_rw`;;\n    *)\n      if test -z \"$stripcmd\"; then\n\tu_plus_rw=\n      else\n\tu_plus_rw=,u+rw\n      fi\n      cp_umask=$mode$u_plus_rw;;\n  esac\nfi\n\nfor src\ndo\n  # Protect names problematic for 'test' and other utilities.\n  case $src in\n    -* | [=\\(\\)!]) src=./$src;;\n  esac\n\n  if test -n \"$dir_arg\"; then\n    dst=$src\n    dstdir=$dst\n    test -d \"$dstdir\"\n    dstdir_status=$?\n  else\n\n    # Waiting for this to be detected by the \"$cpprog $src $dsttmp\" command\n    # might cause directories to be created, which would be especially bad\n    # if $src (and thus $dsttmp) contains '*'.\n    if test ! -f \"$src\" && test ! -d \"$src\"; then\n      echo \"$0: $src does not exist.\" >&2\n      exit 1\n    fi\n\n    if test -z \"$dst_arg\"; then\n      echo \"$0: no destination specified.\" >&2\n      exit 1\n    fi\n    dst=$dst_arg\n\n    # If destination is a directory, append the input filename; won't work\n    # if double slashes aren't ignored.\n    if test -d \"$dst\"; then\n      if test -n \"$no_target_directory\"; then\n\techo \"$0: $dst_arg: Is a directory\" >&2\n\texit 1\n      fi\n      dstdir=$dst\n      dst=$dstdir/`basename \"$src\"`\n      dstdir_status=0\n    else\n      # Prefer dirname, but fall back on a substitute if dirname fails.\n      dstdir=`\n\t(dirname \"$dst\") 2>/dev/null ||\n\texpr X\"$dst\" : 'X\\(.*[^/]\\)//*[^/][^/]*/*$' \\| \\\n\t     X\"$dst\" : 'X\\(//\\)[^/]' \\| \\\n\t     X\"$dst\" : 'X\\(//\\)$' \\| \\\n\t     X\"$dst\" : 'X\\(/\\)' \\| . 2>/dev/null ||\n\techo X\"$dst\" |\n\t    sed '/^X\\(.*[^/]\\)\\/\\/*[^/][^/]*\\/*$/{\n\t\t   s//\\1/\n\t\t   q\n\t\t }\n\t\t /^X\\(\\/\\/\\)[^/].*/{\n\t\t   s//\\1/\n\t\t   q\n\t\t }\n\t\t /^X\\(\\/\\/\\)$/{\n\t\t   s//\\1/\n\t\t   q\n\t\t }\n\t\t /^X\\(\\/\\).*/{\n\t\t   s//\\1/\n\t\t   q\n\t\t }\n\t\t s/.*/./; q'\n      `\n\n      test -d \"$dstdir\"\n      dstdir_status=$?\n    fi\n  fi\n\n  obsolete_mkdir_used=false\n\n  if test $dstdir_status != 0; then\n    case $posix_mkdir in\n      '')\n\t# Create intermediate dirs using mode 755 as modified by the umask.\n\t# This is like FreeBSD 'install' as of 1997-10-28.\n\tumask=`umask`\n\tcase $stripcmd.$umask in\n\t  # Optimize common cases.\n\t  *[2367][2367]) mkdir_umask=$umask;;\n\t  .*0[02][02] | .[02][02] | .[02]) mkdir_umask=22;;\n\n\t  *[0-7])\n\t    mkdir_umask=`expr $umask + 22 \\\n\t      - $umask % 100 % 40 + $umask % 20 \\\n\t      - $umask % 10 % 4 + $umask % 2\n\t    `;;\n\t  *) mkdir_umask=$umask,go-w;;\n\tesac\n\n\t# With -d, create the new directory with the user-specified mode.\n\t# Otherwise, rely on $mkdir_umask.\n\tif test -n \"$dir_arg\"; then\n\t  mkdir_mode=-m$mode\n\telse\n\t  mkdir_mode=\n\tfi\n\n\tposix_mkdir=false\n\tcase $umask in\n\t  *[123567][0-7][0-7])\n\t    # POSIX mkdir -p sets u+wx bits regardless of umask, which\n\t    # is incompatible with FreeBSD 'install' when (umask & 300) != 0.\n\t    ;;\n\t  *)\n\t    tmpdir=${TMPDIR-/tmp}/ins$RANDOM-$$\n\t    trap 'ret=$?; rmdir \"$tmpdir/d\" \"$tmpdir\" 2>/dev/null; exit $ret' 0\n\n\t    if (umask $mkdir_umask &&\n\t\texec $mkdirprog $mkdir_mode -p -- \"$tmpdir/d\") >/dev/null 2>&1\n\t    then\n\t      if test -z \"$dir_arg\" || {\n\t\t   # Check for POSIX incompatibilities with -m.\n\t\t   # HP-UX 11.23 and IRIX 6.5 mkdir -m -p sets group- or\n\t\t   # other-writable bit of parent directory when it shouldn't.\n\t\t   # FreeBSD 6.1 mkdir -m -p sets mode of existing directory.\n\t\t   ls_ld_tmpdir=`ls -ld \"$tmpdir\"`\n\t\t   case $ls_ld_tmpdir in\n\t\t     d????-?r-*) different_mode=700;;\n\t\t     d????-?--*) different_mode=755;;\n\t\t     *) false;;\n\t\t   esac &&\n\t\t   $mkdirprog -m$different_mode -p -- \"$tmpdir\" && {\n\t\t     ls_ld_tmpdir_1=`ls -ld \"$tmpdir\"`\n\t\t     test \"$ls_ld_tmpdir\" = \"$ls_ld_tmpdir_1\"\n\t\t   }\n\t\t }\n\t      then posix_mkdir=:\n\t      fi\n\t      rmdir \"$tmpdir/d\" \"$tmpdir\"\n\t    else\n\t      # Remove any dirs left behind by ancient mkdir implementations.\n\t      rmdir ./$mkdir_mode ./-p ./-- 2>/dev/null\n\t    fi\n\t    trap '' 0;;\n\tesac;;\n    esac\n\n    if\n      $posix_mkdir && (\n\tumask $mkdir_umask &&\n\t$doit_exec $mkdirprog $mkdir_mode -p -- \"$dstdir\"\n      )\n    then :\n    else\n\n      # The umask is ridiculous, or mkdir does not conform to POSIX,\n      # or it failed possibly due to a race condition.  Create the\n      # directory the slow way, step by step, checking for races as we go.\n\n      case $dstdir in\n\t/*) prefix='/';;\n\t[-=\\(\\)!]*) prefix='./';;\n\t*)  prefix='';;\n      esac\n\n      eval \"$initialize_posix_glob\"\n\n      oIFS=$IFS\n      IFS=/\n      $posix_glob set -f\n      set fnord $dstdir\n      shift\n      $posix_glob set +f\n      IFS=$oIFS\n\n      prefixes=\n\n      for d\n      do\n\ttest X\"$d\" = X && continue\n\n\tprefix=$prefix$d\n\tif test -d \"$prefix\"; then\n\t  prefixes=\n\telse\n\t  if $posix_mkdir; then\n\t    (umask=$mkdir_umask &&\n\t     $doit_exec $mkdirprog $mkdir_mode -p -- \"$dstdir\") && break\n\t    # Don't fail if two instances are running concurrently.\n\t    test -d \"$prefix\" || exit 1\n\t  else\n\t    case $prefix in\n\t      *\\'*) qprefix=`echo \"$prefix\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"`;;\n\t      *) qprefix=$prefix;;\n\t    esac\n\t    prefixes=\"$prefixes '$qprefix'\"\n\t  fi\n\tfi\n\tprefix=$prefix/\n      done\n\n      if test -n \"$prefixes\"; then\n\t# Don't fail if two instances are running concurrently.\n\t(umask $mkdir_umask &&\n\t eval \"\\$doit_exec \\$mkdirprog $prefixes\") ||\n\t  test -d \"$dstdir\" || exit 1\n\tobsolete_mkdir_used=true\n      fi\n    fi\n  fi\n\n  if test -n \"$dir_arg\"; then\n    { test -z \"$chowncmd\" || $doit $chowncmd \"$dst\"; } &&\n    { test -z \"$chgrpcmd\" || $doit $chgrpcmd \"$dst\"; } &&\n    { test \"$obsolete_mkdir_used$chowncmd$chgrpcmd\" = false ||\n      test -z \"$chmodcmd\" || $doit $chmodcmd $mode \"$dst\"; } || exit 1\n  else\n\n    # Make a couple of temp file names in the proper directory.\n    dsttmp=$dstdir/_inst.$$_\n    rmtmp=$dstdir/_rm.$$_\n\n    # Trap to clean up those temp files at exit.\n    trap 'ret=$?; rm -f \"$dsttmp\" \"$rmtmp\" && exit $ret' 0\n\n    # Copy the file name to the temp name.\n    (umask $cp_umask && $doit_exec $cpprog \"$src\" \"$dsttmp\") &&\n\n    # and set any options; do chmod last to preserve setuid bits.\n    #\n    # If any of these fail, we abort the whole thing.  If we want to\n    # ignore errors from any of these, just make sure not to ignore\n    # errors from the above \"$doit $cpprog $src $dsttmp\" command.\n    #\n    { test -z \"$chowncmd\" || $doit $chowncmd \"$dsttmp\"; } &&\n    { test -z \"$chgrpcmd\" || $doit $chgrpcmd \"$dsttmp\"; } &&\n    { test -z \"$stripcmd\" || $doit $stripcmd \"$dsttmp\"; } &&\n    { test -z \"$chmodcmd\" || $doit $chmodcmd $mode \"$dsttmp\"; } &&\n\n    # If -C, don't bother to copy if it wouldn't change the file.\n    if $copy_on_change &&\n       old=`LC_ALL=C ls -dlL \"$dst\"\t2>/dev/null` &&\n       new=`LC_ALL=C ls -dlL \"$dsttmp\"\t2>/dev/null` &&\n\n       eval \"$initialize_posix_glob\" &&\n       $posix_glob set -f &&\n       set X $old && old=:$2:$4:$5:$6 &&\n       set X $new && new=:$2:$4:$5:$6 &&\n       $posix_glob set +f &&\n\n       test \"$old\" = \"$new\" &&\n       $cmpprog \"$dst\" \"$dsttmp\" >/dev/null 2>&1\n    then\n      rm -f \"$dsttmp\"\n    else\n      # Rename the file to the real destination.\n      $doit $mvcmd -f \"$dsttmp\" \"$dst\" 2>/dev/null ||\n\n      # The rename failed, perhaps because mv can't rename something else\n      # to itself, or perhaps because mv is so ancient that it does not\n      # support -f.\n      {\n\t# Now remove or move aside any old file at destination location.\n\t# We try this two ways since rm can't unlink itself on some\n\t# systems and the destination file might be busy for other\n\t# reasons.  In this case, the final cleanup might fail but the new\n\t# file should still install successfully.\n\t{\n\t  test ! -f \"$dst\" ||\n\t  $doit $rmcmd -f \"$dst\" 2>/dev/null ||\n\t  { $doit $mvcmd -f \"$dst\" \"$rmtmp\" 2>/dev/null &&\n\t    { $doit $rmcmd -f \"$rmtmp\" 2>/dev/null; :; }\n\t  } ||\n\t  { echo \"$0: cannot unlink or rename $dst\" >&2\n\t    (exit 1); exit 1\n\t  }\n\t} &&\n\n\t# Now rename the file to the real destination.\n\t$doit $mvcmd \"$dsttmp\" \"$dst\"\n      }\n    fi || exit 1\n\n    trap '' 0\n  fi\ndone\n\n# Local variables:\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-start: \"scriptversion=\"\n# time-stamp-format: \"%:y-%02m-%02d.%02H\"\n# time-stamp-time-zone: \"UTC\"\n# time-stamp-end: \"; # UTC\"\n# End:\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "make-mks",
          "type": "blob",
          "size": 2.2216796875,
          "content": "#!/bin/sh -e\n\ncase \"$0\" in\n    */*)\n\tcd $(dirname $0)\n\t;;\nesac\n\nif [ -z \"$NOGIT\" ] ; then\n    # Bail if not under git\n    git rev-parse\n    getFilesRaw() {\n        git ls-files --recurse-submodules\n    }\nelse\n    getFilesRaw() {\n        find . -type f\n    }\nfi\ngetFiles() {\n    getFilesRaw | tr \" \" \"\\n\" | sort | uniq\n}\n\ntrap 'rm -f src/src.mk lib/medida.mk lib/lib.mk' 0\n\nmessage=\"# This file was generated by make-mks; don't edit it by hand.\"\n\n# Use only files git knows about, to avoid picking up autogenrated\n# files or other random cruft.  When adding a new file foo.cpp, you\n# must run \"git add -N foo.cpp\" before running this script.\n(cd src\n echo \"$message\"\n echo \"SRC_H_FILES\" = $(getFiles | egrep -e '\\.h$' -e '\\.[ih]pp$' | egrep -v '(test|simulation)/' | tr \"\\n\" \" \")\n echo \"SRC_CXX_FILES\" = $(getFiles | egrep '\\.cpp$' | egrep -v '(test|simulation)/' | tr \"\\n\" \" \")\n echo \"SRC_X_FILES\" = $(getFiles | egrep '\\.x$' | tr \"\\n\" \" \")\n echo \"SRC_TEST_H_FILES\" = $(getFiles | egrep -e '\\.h$' -e '\\.[ih]pp$' | egrep '(test|simulation)/' | tr \"\\n\" \" \")\n echo \"SRC_TEST_CXX_FILES\" = $(getFiles | egrep '\\.cpp$' | egrep '(test|simulation)/' | tr \"\\n\" \" \")\n echo \"SRC_RUST_FILES\" = $(getFiles | egrep '\\.rs$' | tr \"\\n\" \" \")\n) > src/src.mk\n\n\n# Hacks for shell third-party libraries without autoconf.  You may\n# need to re-run this after updating submodules.\n\nlistall() {\n    find \"$@\" -type f \\\n\t \\( -name '*.[ch]' -o -name '*.[chi]pp' -o -name '*.cc' \\) -print\n}\n\n(cd lib\n if test -f libmedida/src/medida/medida.h; then\n     echo \"$message\"\n     echo INTERNAL_MEDIDA_FILES = $(listall libmedida/src/medida)\n fi) > lib/medida.mk\n\n(cd lib\n echo \"$message\"\n echo SOCI_FILES = $(listall soci/src/backends/sqlite3 soci/src/core)\n echo SOCI_PG_FILES = $(listall soci/src/backends/postgresql)\n\n echo SQLITE3_FILES = $(listall sqlite)\n echo UTIL_FILES = $(listall util http httpthreaded)\n echo ASIO_H_FILES = $(listall asio/asio/include)\n # The following does not work without boost or -DASIO_STANDALONE=1\n #echo ASIO_CXX_FILES = asio/src/*.cpp\n echo ASIO_CXX_FILES = asio.cpp\n echo TRACY_CXX_FILES = tracy/public/TracyClient.cpp\n echo JSON_FILES = $(listall json)\n echo SPDLOG_FILES = spdlog.cpp\n\n echo MISC_H_FILES = *.hpp $(listall autocheck cereal fmt)\n) > lib/lib.mk\n\ntrap '' 0\n"
        },
        {
          "name": "performance-eval",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0302734375,
          "content": "[toolchain]\nchannel = \"1.82.0\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "soroban-settings",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "stellar-core.supp",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "test-tx-meta-baseline-current",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-tx-meta-baseline-next",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}