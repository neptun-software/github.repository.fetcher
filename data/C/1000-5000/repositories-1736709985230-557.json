{
  "metadata": {
    "timestamp": 1736709985230,
    "page": 557,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "maharmstone/quibble",
      "stars": 2212,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.345703125,
          "content": "[submodule \"src/ntfs-efi\"]\n\tpath = ntfs\n\turl = https://github.com/maharmstone/ntfs-efi\n[submodule \"btrfs-efi\"]\n\tpath = btrfs\n\turl = https://github.com/maharmstone/btrfs-efi\n[submodule \"freetype2\"]\n\tpath = freetype\n\turl = https://gitlab.freedesktop.org/freetype/freetype\n[submodule \"harfbuzz\"]\n\tpath = harfbuzz\n\turl = https://github.com/harfbuzz/harfbuzz\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.7236328125,
          "content": "cmake_minimum_required(VERSION 3.14)\n\nproject(quibble VERSION 20230328)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)\n\nif(MSVC)\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /ENTRY:efi_main\")\n    add_compile_options(\"/GS-\")\n    string(REGEX REPLACE \"/RTC(su|[1su])\" \"\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n    string(REGEX REPLACE \"/RTC(su|[1su])\" \"\" CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\n\n    # work around bug in Visual Studio\n    if (${MSVC_CXX_ARCHITECTURE_ID} STREQUAL \"X86\")\n        set(CMAKE_SYSTEM_PROCESSOR \"X86\")\n    endif()\nelse()\n    add_compile_options(-fno-stack-check -fno-stack-protector -mno-stack-arg-probe)\nendif()\n\nenable_language(ASM)\n\nset(SRC_FILES src/apiset.cpp\n    src/boot.cpp\n    src/debug.cpp\n    src/hw.cpp\n    src/mem.cpp\n    src/menu.cpp\n    src/misc.cpp\n    src/peload.cpp\n    src/reg.cpp\n    src/tinymt32.cpp\n    src/print.cpp\n    src/font.s)\n\nif(MSVC)\n    enable_language(ASM_MASM)\n    set(SRC_FILES ${SRC_FILES} src/quibble.asm)\nendif()\n\nset(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\n\nadd_executable(quibble ${SRC_FILES})\n\nset(FT_DISABLE_BZIP2 TRUE)\nset(FT_DISABLE_HARFBUZZ TRUE)\nset(FT_DISABLE_PNG TRUE)\nset(FT_DISABLE_ZLIB TRUE)\nset(FT_DISABLE_BROTLI TRUE)\nadd_definitions(-DFT_CONFIG_OPTION_DISABLE_STREAM_SUPPORT)\nadd_subdirectory(freetype)\n\nadd_subdirectory(harfbuzz EXCLUDE_FROM_ALL)\ntarget_compile_definitions(harfbuzz PRIVATE -Dhb_malloc_impl=hb_malloc_impl2 -Dhb_calloc_impl=hb_calloc_impl2 -Dhb_realloc_impl=hb_realloc_impl2 -Dhb_free_impl=hb_free_impl2)\ntarget_compile_definitions(harfbuzz PRIVATE -DHB_TINY)\ntarget_compile_options(harfbuzz PRIVATE \"-Wa,-mbig-obj\")\n\nadd_subdirectory(ntfs)\nadd_subdirectory(btrfs)\n\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\ninclude_directories(freetype/include)\ntarget_include_directories(quibble PUBLIC src)\n\nset_target_properties(quibble PROPERTIES SUFFIX \".efi\")\n\ninclude_directories(/usr/include/efi)\nif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"AMD64\" OR ${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"x86_64\")\n    include_directories(/usr/include/efi/x86_64)\nelseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"X86\")\n    include_directories(/usr/include/efi/ia32)\nendif()\n\ntarget_compile_options(quibble PRIVATE\n     $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:\n          -Wall -Wextra -Wno-address-of-packed-member -Werror=pointer-arith -fno-exceptions -Wno-dangling-reference>\n     $<$<CXX_COMPILER_ID:MSVC>:\n          /W4 /Oi->)\n\nif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"AMD64\" OR ${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"x86_64\")\n    add_definitions(-D__x86_64__)\nelseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"X86\")\n    add_definitions(-D_X86_)\nendif()\n\ntarget_compile_definitions(quibble PUBLIC \"$<$<CONFIG:DEBUG>:DEBUG>\")\n\nif(${CMAKE_C_COMPILER_ID} STREQUAL \"GNU\" OR ${CMAKE_C_COMPILER_ID} STREQUAL \"Clang\")\ntarget_compile_options(quibble PRIVATE \"-ffreestanding\")\ntarget_compile_options(quibble PRIVATE \"-fno-stack-protector\")\ntarget_compile_options(quibble PRIVATE \"-fno-stack-check\")\ntarget_compile_options(quibble PRIVATE \"-mno-stack-arg-probe\")\n\ntarget_link_options(quibble PRIVATE \"-nostartfiles\")\ntarget_link_options(quibble PRIVATE \"-shared\")\n\nif(${CMAKE_C_COMPILER_ID} STREQUAL \"Clang\")\n    target_link_options(quibble PRIVATE \"-Wl,--subsystem,efi_application\")\nelse()\n    target_link_options(quibble PRIVATE \"-Wl,--subsystem,10\")\nendif()\n\nif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"X86\")\ntarget_link_options(quibble PRIVATE \"-e_efi_main\")\nelse()\ntarget_link_options(quibble PRIVATE \"-eefi_main\")\nendif()\n\nelseif(MSVC)\ntarget_link_options(quibble PRIVATE \"/SUBSYSTEM:EFI_APPLICATION\")\nendif()\n\ntarget_link_libraries(quibble freetype)\ntarget_link_libraries(quibble harfbuzz)\n"
        },
        {
          "name": "LICENCE",
          "type": "blob",
          "size": 7.4716796875,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.5498046875,
          "content": "Quibble\n-------\n\nQuibble is the custom Windows bootloader - an open-source reimplementation of the\nfiles bootmgfw.efi and winload.efi, able to boot versions of Windows from XP\nto Windows 10 22H2. Unlike the official bootloader, it is extensible, allowing you\nto boot from other filesystems than just NTFS.\n\nThis is only a proof of concept at this stage - don't use this for anything serious.\n\nScreenshot of Windows 10 1909 running on Btrfs:\n\n<img src=\"https://raw.githubusercontent.com/maharmstone/quibble/fw/1909.png\" width=\"400\" />\n\nDonations\n---------\n\nI'm doing this for kicks and giggles, but if you want to donate it'd be appreciated:\n\n* [Paypal](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=3XQVCQ6YB55L2&lc=GB&item_name=Quibble%20donation&currency_code=GBP&bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted)\n\nInstallation\n------------\n\nIf you're booting Windows 7 or earlier in a VM, you will need the OVMF firmware with Seabios compiled\nin as the Compatibility Support Module (CSM), which isn't normally included. Precompiled version are\navailable: [x86](https://github.com/maharmstone/quibble/blob/fw/OVMF_CODE.fd?raw=true) and [amd64](https://github.com/maharmstone/quibble/blob/fw/OVMF_CODE64.fd?raw=true).\n\nThis has been tested successfully in Qemu v7.2, VirtualBox v7, and on EFI version F50 of a Gigabyte motherboard.\nThe quality of EFI implementations varies significantly, so if you're testing on real hardware it may or may not work\nfor you.\n\n* Install Windows on an NTFS volume.\n\n* On modern versions of Windows, turn off Fast Startup in the Control Panel, or run `powercfg /h off` from an admin command prompt.\n\n* For Btrfs:\n\n  * Install [WinBtrfs](https://github.com/maharmstone/btrfs) - you will need version 1.6 at least, but the later the better.\n\n  * Shutdown your PC or VM, and copy its hard disk to a Btrfs partition. The best way is to use [Ntfs2btrfs](https://github.com/maharmstone/ntfs2btrfs) to do in-place conversion, which will also preserve your metadata.\n\n* Extract the Quibble package into your EFI System Partition. It's supposed to work in a subdirectory,\nbut if you have trouble you might need to put it in the root.\n\n* Adjust the file freeldr.ini, if necessary - the default is for it to boot from the third partition\nof the first disk, which is where Windows normally installs itself. You can also change the SystemPath to e.g. `SystemPath=btrfs(1e10b60a-8e9d-466b-a33a-21760829cf3a)\\Windows`,\nreferring to the partition by UUID rather than number. This is the Btrfs UUID, i.e. what shows up in\nthe drive properties box on WinBtrfs, or what shows in `btrfs check` on Linux.\n\n* Add quibble.efi to your list of UEFI boot options, and hope that it works...\n\nChangelog\n---------\n\n* 20230328\n  * Added NTFS driver\n  * Added support for versions of Windows 10 up to 22H2\n  * CD drives no longer get allocated ARC names\n  * Switched to C++\n  * Lots of miscellaneous bug fixes\n\n* 20210111\n  * Added support for GOP graphics\n  * Added support for TTF fonts\n  * Added rudimentary recovery of unclean Registry hives\n  * Added support for Btrfs compression\n\n* 20201108\n  * Added support for Windows 10 2004 and 2009\n  * KDNET now works with Realtek devices\n  * Added support for booting Windows 8 and up without CSM\n  * Added workarounds for issues with real EFI implementations\n  * Fixed issues with multiple CPU cores\n\n* 20200405\n  * Fixed bug involving case-insensitivity\n  * Changed build system to cmake\n  * Included local copy of gnu-efi, to make things easier\n  * Added support for compiling on MSVC\n  * Added support for kdnet on Windows 10\n\n* 20200213\n  * Initial release\n\nCompiling\n---------\n\nOn Linux:\n\n* Install a cross-compiler (x86_64-w64-mingw32-gcc), cmake, and gnu-efi.\n* Run the following:\n  * `git clone https://github.com/maharmstone/quibble --recurse-submodules`\n  * `cd quibble`\n  * `mkdir build`\n  * `cd build`\n  * `cmake -DCMAKE_TOOLCHAIN_FILE=../mingw-amd64.cmake ..` or `cmake -DCMAKE_TOOLCHAIN_FILE=../mingw-x86.cmake ..`\n  * `make`\n\nOn Windows:\n\n* Install a recent version of Visual C++ - I used the free Visual Studio Community 2019\n* Clone the repository, and open it as a folder\n* Wait for it to finish generating its cmake cache\n* Right-click on CMakeLists.txt and choose \"Build\"\n\nFAQs\n----\n\n* Why don't I get pretty graphics?\n\nDisable CSM in your BIOS. Bear in mind that this will also stop Windows 7 and earlier\nfrom booting.\n\n* Which versions of Windows does this work on?\n\nWith the Btrfs driver or NTFS drivers, this should work on XP, Vista, Windows 7, Windows 8,\nWindows 8.1, and Windows 10 versions 1507 to 22H2.\n\n* Which filesystems does this support?\n\nThe included Btrfs driver, and maybe also the FAT driver that's part of the UEFI specifications.\nWindows XP, Vista, and 7 will work fine from a FAT volume, anything after that won't.\n\n* How can I extend this?\n\nDrop your EFI driver in the drivers folder, and it'll load it on startup.\n\n* Why do I get a BAD_SYSTEM_CONFIG_INFO BSOD?\n\nThis means that the Registry is unclean, and our rudimentary recovery wasn't good enough. If you attach\nC:\\Windows\\System32\\config\\SYSTEM to another machine via Regedit temporarily, it'll fix it.\nMake sure you shut Windows down properly to avoid having to do this.\n\n* Can I boot Btrfs from an arbitrary subvolume, like I can on Linux?\n\nYes - add /SUBVOL=xxx to your Options in freeldr.ini. You can find the number to use on the\nProperties page of your subvolume. On Linux you can use `btrfs subvol list`, but bear in mind\nthat you will need to translate the number to hexadecimal.\n\n* Why can't I access any NTFS volumes in Windows when booting from Btrfs?\n\nBecause Windows only loads ntfs.sys when it's booting from NTFS. To start it as a one-off, run\n`sc start ntfs` from an elevated command prompt. To get it to start every time, open regedit and\nchange HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ntfs\\Start to 1.\n\n* Why can't I access FAT partitions on Windows?\n\nIf Windows doesn't load the FAT driver automatically, try running `sc start fastfat`.\n\n* Why don't I see the Windows logo on startup?\n\nThe boot graphics code isn't completed yet - you won't see either the Windows logo or the progress\nindicator, just a few seconds of blackness.\n\nLicences and Thanks\n-------------------\n\nThis is released under the LGPL. The Mersenne Twister code is by Mutsuo Saito and Makoto Matsumoto -\nsee the header of tinymt32.c. The GNU-EFI headers are under the BSD licence.\n\nThis code incorporates FreeType, licensed under the [FreeType Licence](https://github.com/freetype/freetype/blob/master/LICENSE.TXT).\n\nThe included font is [Jost*](https://indestructibletype.com/Jost.html), from Indestructible Type.\n\nThe Btrfs EFI driver contains portions of the following software:\n\n### Zlib\n\n  Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n\n### LZO\n\nbtrfs-efi contains portions of an early version of lzo, which is copyright 1996\nMarkus Oberhumer. Modern versions are licensed under the GPL, but this was\nlicensed under the LGPL, so I believe it is okay to use.\n\n### Zstd\n\nCopyright (c) 2016-present, Facebook, Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name Facebook nor the names of its contributors may be used to\n   endorse or promote products derived from this software without specific\n   prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### Harfbuzz\n\nHarfBuzz is licensed under the so-called \"Old MIT\" license.  Details follow.\nFor parts of HarfBuzz that are licensed under different licenses see individual\nfiles names COPYING in subdirectories where applicable.\n\nCopyright © 2010-2022  Google, Inc.\nCopyright © 2015-2020  Ebrahim Byagowi\nCopyright © 2019,2020  Facebook, Inc.\nCopyright © 2012,2015  Mozilla Foundation\nCopyright © 2011  Codethink Limited\nCopyright © 2008,2010  Nokia Corporation and/or its subsidiary(-ies)\nCopyright © 2009  Keith Stribley\nCopyright © 2011  Martin Hosken and SIL International\nCopyright © 2007  Chris Wilson\nCopyright © 2005,2006,2020,2021,2022,2023  Behdad Esfahbod\nCopyright © 2004,2007,2008,2009,2010,2013,2021,2022,2023  Red Hat, Inc.\nCopyright © 1998-2005  David Turner and Werner Lemberg\nCopyright © 2016  Igalia S.L.\nCopyright © 2022  Matthias Clasen\nCopyright © 2018,2021  Khaled Hosny\nCopyright © 2018,2019,2020  Adobe, Inc\nCopyright © 2013-2015  Alexei Podtelezhnikov\n\nFor full copyright notices consult the individual files in the package.\n\nPermission is hereby granted, without written agreement and without\nlicense or royalty fees, to use, copy, modify, and distribute this\nsoftware and its documentation for any purpose, provided that the\nabove copyright notice and the following two paragraphs appear in\nall copies of this software.\n\nIN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR\nDIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\nARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN\nIF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.\n\nTHE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,\nBUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS\nON AN \"AS IS\" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO\nPROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\nTo-do list\n----------\n\n* Get working with XP and Vista on amd64 (done?)\n* Add proper Registry recovery\n* Parse BCD files\n* Get tested on more hardware\n* Slipstream into Windows ISO(?)\n* Add ARM and Aarch64 versions\n* Verification of signatures\n* Early-launch anti-malware\n* ASLR\n* Booting 32-bit Windows on 64-bit machine\n* BIOS emulation on machines without CSM\n* Add RAID support for Btrfs\n* Hibernation, etc.\n* Get kdnet working with Windows 8.1\n"
        },
        {
          "name": "btrfs",
          "type": "commit",
          "content": null
        },
        {
          "name": "clang-amd64.cmake",
          "type": "blob",
          "size": 0.4677734375,
          "content": "set(CMAKE_C_COMPILER clang)\nset(CMAKE_CXX_COMPILER clang)\nset(CMAKE_AR llvm-ar)\nset(CMAKE_RANLIB llvm-ranlib)\nset(CMAKE_SYSTEM_PROCESSOR \"AMD64\")\n\nset(CLANG_TARGET_TRIPLE x86_64-w64-mingw32)\nset(CMAKE_C_COMPILER_TARGET x86_64-w64-mingw32)\nset(CMAKE_CXX_COMPILER_TARGET x86_64-w64-mingw32)\nset(CMAKE_ASM_COMPILER_TARGET x86_64-w64-mingw32)\n\nset(CMAKE_EXE_LINKER_FLAGS \"-static -nodefaultlibs -nostdlib -fuse-ld=lld\")\n\nset(CMAKE_C_COMPILER_WORKS 1)\nset(CMAKE_CXX_COMPILER_WORKS 1)\n"
        },
        {
          "name": "clang-x86.cmake",
          "type": "blob",
          "size": 0.4013671875,
          "content": "set(CMAKE_C_COMPILER clang)\nset(CMAKE_CXX_COMPILER clang)\nset(CMAKE_AR llvm-ar)\nset(CMAKE_RANLIB llvm-ranlib)\n\nset(CMAKE_SYSTEM_NAME Windows)\nset(CMAKE_SYSTEM_PROCESSOR X86)\n\nset(CLANG_TARGET_TRIPLE i686-w64-mingw32)\nset(CMAKE_C_COMPILER_TARGET i686-w64-mingw32)\nset(CMAKE_CXX_COMPILER_TARGET i686-w64-mingw32)\nset(CMAKE_ASM_COMPILER_TARGET i686-w64-mingw32)\n\nset(CMAKE_EXE_LINKER_FLAGS \"-static -fuse-ld=lld\")\n"
        },
        {
          "name": "font.ttf",
          "type": "blob",
          "size": 88.46484375,
          "content": null
        },
        {
          "name": "freetype",
          "type": "commit",
          "content": null
        },
        {
          "name": "harfbuzz",
          "type": "commit",
          "content": null
        },
        {
          "name": "mingw-amd64.cmake",
          "type": "blob",
          "size": 0.4248046875,
          "content": "SET(CMAKE_SYSTEM_NAME Windows)\n\nSET(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)\nSET(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)\nSET(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)\nSET(CMAKE_SYSTEM_PROCESSOR \"AMD64\")\n\nset(CMAKE_EXE_LINKER_FLAGS \"-static\")\n\nSET(CMAKE_FIND_ROOT_PATH /usr/x86_64-w64-mingw32)\n\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n\n"
        },
        {
          "name": "mingw-x86.cmake",
          "type": "blob",
          "size": 0.3662109375,
          "content": "SET(CMAKE_SYSTEM_NAME Windows)\n\nSET(CMAKE_C_COMPILER i686-w64-mingw32-gcc)\nSET(CMAKE_CXX_COMPILER i686-w64-mingw32-g++)\nSET(CMAKE_SYSTEM_PROCESSOR X86)\n\nset(CMAKE_EXE_LINKER_FLAGS \"-static\")\n\nSET(CMAKE_FIND_ROOT_PATH /usr/i686-w64-mingw32)\n\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n\n"
        },
        {
          "name": "ntfs",
          "type": "commit",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}