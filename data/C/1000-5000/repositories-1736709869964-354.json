{
  "metadata": {
    "timestamp": 1736709869964,
    "page": 354,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wolfcw/libfaketime",
      "stars": 2798,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2265625,
          "content": "*.o\n*.so.1\ntimetest\ntest/getrandom_test\ntest/lib*.so\ntest/use_lib_*\ntest/run_*\ntest/repeat_random\ntest/getentropy_test\ntest/syscall_test\ntest/variadic_promotion\n\nsrc/libfaketime.dylib.1\nsrc/libfaketime.1.dylib\nsrc/core\nsrc/faketime\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.423828125,
          "content": "language: c\n\nmatrix:\n  include:\n    - os: linux\n      arch: amd64\n      compiler: gcc\n    - os: linux\n      arch: ppc64le\n      compiler: gcc\n    - os: osx\n      osx_image: xcode11\n\nscript:\n  - cd ${TRAVIS_BUILD_DIR}\n  - if [ \"$TRAVIS_ARCH\" = ppc64le ]; then\n       FAKETIME_COMPILE_CFLAGS=\"-DFORCE_MONOTONIC_FIX -DFORCE_PTHREAD_NONVER\" make;\n    else\n       FAKETIME_COMPILE_CFLAGS=\"-DFORCE_MONOTONIC_FIX\" make;\n    fi\n  - make test\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.62890625,
          "content": "INSTALL ?= install\n\nUNAME=$(shell uname)\nSELECTOR:=$(shell if test \"${UNAME}\" = \"Darwin\" ; then echo \"-f Makefile.OSX\" ; fi)\nPREFIX ?= /usr/local\n\nall:\n\t$(MAKE) $(SELECTOR) -C src all\n\ntest:\n\t$(MAKE) $(SELECTOR) -C src all\n\t$(MAKE) $(SELECTOR) -C test all\n\ninstall:\n\t$(MAKE) $(SELECTOR) -C src install\n\t$(MAKE) $(SELECTOR) -C man install\n\t$(INSTALL) -dm0755 \"${DESTDIR}${PREFIX}/share/doc/faketime/\"\n\t$(INSTALL) -m0644 README \"${DESTDIR}${PREFIX}/share/doc/faketime/README\"\n\t$(INSTALL) -m0644 NEWS \"${DESTDIR}${PREFIX}/share/doc/faketime/NEWS\"\n\nuninstall:\n\t$(MAKE) $(SELECTOR) -C src uninstall\n\t$(MAKE) $(SELECTOR) -C man uninstall\n\trm -f \"${DESTDIR}${PREFIX}/share/doc/faketime/README\"\n\trm -f \"${DESTDIR}${PREFIX}/share/doc/faketime/NEWS\"\n\trmdir \"${DESTDIR}${PREFIX}/share/doc/faketime\"\n\nclean:\n\t$(MAKE) $(SELECTOR) -C src clean\n\t$(MAKE) $(SELECTOR) -C test clean\n\ndistclean:\n\t$(MAKE) $(SELECTOR) -C src distclean\n\t$(MAKE) $(SELECTOR) -C test distclean\n\nmacarm64:\n\t$(MAKE) $(SELECTOR) -C src clean\n\t$(MAKE) $(SELECTOR) -C src distclean\n\t$(MAKE) $(SELECTOR) -C src all\n# \t$(MAKE) $(SELECTOR) -C test all\n# \t$(MAKE) $(SELECTOR) -C test distclean\n\t$(MAKE) $(SELECTOR) -C src install\n\t$(MAKE) $(SELECTOR) -C man install\n\t$(INSTALL) -dm0755 \"${DESTDIR}${PREFIX}/share/doc/faketime/\"\n\t$(INSTALL) -m0644 README \"${DESTDIR}${PREFIX}/share/doc/faketime/README\"\n\t$(INSTALL) -m0644 NEWS \"${DESTDIR}${PREFIX}/share/doc/faketime/NEWS\"\n\nmacarm64full:\n\t$(MAKE) $(SELECTOR) -C src clean\n\t$(MAKE) $(SELECTOR) -C src distclean\n\t$(MAKE) $(SELECTOR) -C src all\n\t$(MAKE) $(SELECTOR) -C test all\n# \t$(MAKE) $(SELECTOR) -C test distclean\n\n.PHONY: all test install uninstall clean distclean\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 9.82421875,
          "content": "Since 0.9.9:\n    - automatically try to decide about FORCE_MONOTONIC_FIX\n      at run-time when not set as a compile-time flag\n    - improved macOS Monterey support through dyld interposing\n    - changed interception hooks for stat() and similar functions,\n      refactored to use a common handler (@sirainen)\n    - added support for timespec_get, timerfd_{get,set} (@sliquister)\n    - generic syscall() interception for selected syscalls (@dkg)\n    - improved testing system (@dkg)\n\nSince 0.9.8:\n    - When compiled with the CFLAG FAKE_RANDOM set,\n      libfaketime will intercept calls to getrandom()\n      and return pseudorandom numbers for determinism.\n      The mechanism needs to be activated by setting\n      the environment variable FAKERANDOM_SEED to a\n      64-bit seed value, e.g., \"0x12345678DEADBEEF\".\n      Please note that this completely breaks the\n      security of random numbers for cryptographic\n      purposes and should only be used for deterministic\n      tests. Never use this in production!\n    - When the environment variable FAKETIME_TIMESTAMP_FILE is\n      set, points to a writeable (creatable) custom config file\n      and the environment variable FAKETIME_UPDATE_TIMESTAMP_FILE\n      is \"1\", then the file also is updated on each call. By\n      this, a common \"virtual time\" can be shared by several\n      processes, where each can adjust the time for all.\n    - Additional link-time LDFLAGS can be passed via the\n      environment variable FAKETIME_LINK_FLAGS when\n      running 'make'.\n    - Compile-time CFLAG FAKE_SETTIME can be enabled to\n      intercept calls to clock_settime(), settimeofday(), and\n      adjtime(). (suggested and prototyped by @ojura)\n    - Additional compile-time CFLAGs can be passed via the\n      environment variable FAKETIME_COMPILE_CFLAGS when\n      running 'make'.\n    - src/Makefile CFLAG FORCE_PTHREAD_NONVER should be set on\n      systems that hang on CLOCK_REALTIME, or that hang on\n      CLOCK_MONOTONIC where FORCE_MONOTONIC_FIX is not sufficient.\n\nSince 0.9.7:\n    - Passthrough for unknown clock ids to avoid error messages\n    - Fixes for multithreaded operations (mliertzer, qnox)\n    - glibc-related fixes (jprjr) and gcc8 support (tpetazzoni)\n    - Improved error message output on parsing errors\n    - fix file stat() faking when 'i' modifier is used for determinism\n    - Use FAKETIME=\"%\" to take FAKETIME setting from a file as\n      specified in FAKETIME_FOLLOW_FILE\n    - Added FAKETIME_DONT_RESET environment variable to avoid\n      faketime resets when subprocesses are started (similar to\n      the old v0.9.6 behavior)\n    - Added FAKETIME_XRESET to avoid large clock jumps when\n      the 'x' modifier is used and changed during run-time\n    - Do not fake time during libfaketime initialization to\n      improve compatibility with memory allocation libraries that\n      use time-related functions themselves\n    - Fixes for shared memory related issues, especially when\n      not using the faketime wrapper\n    - Updated glibc compatibility settings for various platforms\n    - Support for clock_nanosleep() with realtime and monotonic clocks\n    - Support for epoll_wait(), epoll_pwait(), and pselect()\n    - src/Makefile CFLAG FORCE_MONOTONIC_FIX should be set (only) on\n      platforms where the test program hangs forever at the\n      CLOCK_MONOTONIC test.\n\nSince 0.9.6:\n    - Julien Gilli added an option to disable monotonic time faking\n    - Azat Khuzhin added support for COARSE clocks\n    - Preliminary support for CLOCK_BOOTTIME (Linux)\n    - Fixed compilation on macOS (High) Sierra and various compiler warnings\n    - Support for select() call added by Hitoshi Harada (umitanuki)\n    - Updated documentation\n\nSince 0.9.5:\n    - fixed crashes that happened when other LD_PRELOAD libraries were used\n    - fixed passing through of return values when using the faketime wrapper\n    - fixed compile-time issues with CLOCK_MONOTONIC_RAW on some platforms\n    - rbalint added Filter commands: FAKETIME_ONLY_CMDS and\n      FAKETIME_SKIP_CMDS control which (sub-)processes libfaketime\n      is applied to.\n\nSince 0.9:\n    - ryandesign at MacPorts provided a Portfile for MacPorts and\n      fixed various build issues on OSX.\n    - Balint Reczey added support for nanosecond resolution, saving\n      timestamps to files, speeding up and slowing down per-process\n      timers, CLOCK_MONOTONIC and CLOCK_MONOTONIC_RAW, faketime\n      support for system calls such as sleep() and alarm().\n    - Applied a patch by Gerardo Malazdrewicz and Toni G to restore\n      compatibility with newer versions of glibc.\n    - Balint Reczey added an option to use the same global clock setting\n      for all libfaketime-spawned processes.\n    - Balint Reczey has rewritten the faketime wrapper shell script in C\n      and refactored libfaketime.\n    - Balint Reczey added support for advancing the time with each time-\n      related system call (\"deterministic time\").\n    - Added \"timeprivacy\" wrapper by adrelanos; it ensures that programs\n      are started with unique timestamps.\n    - Code and documentation cleanup by Tomi Ollila.\n    - Reworked Makefiles for more flexible installation, including fixes\n      by Lukas Fleischner, Daniel Kahm Gillmor, and Hugues Andreux.\n    - Fixed license issues as pointed out by Paul Wouters.\n    - Mac OS X support has been improved for OS X 10.7 and 10.8; due to\n      changes to the underlying libraries on OS X, libfaketime 0.9.5 will\n      no longer work with OS X < 10.6; use libfaketime 0.9(.1) for older\n      OS X installations.\n    - Don Fong has contributed a new framework for functional tests.\n      Petr Salinger ensured its compatibility with GNU/kFreeBSD.\n\nSince 0.8.2:\n    - Added support for \"limited faking\".\n      You can optionally specify when libfaketime starts to fake the\n      returned timestamps and when it shall stop doing so. For example,\n      a program can be started regularly, and after 5 minutes run-time\n      it will be sent two years into the future. Those limiting\n      start and stop times can be specified in seconds or as the\n      number of any time-related function calls within the program.\n    - Added a feature to spawn an external process after x seconds\n      or y time-related system calls. This can, for example, be used\n      to execute an arbitrary shell script x seconds after a program\n      has been started.\n\nSince 0.8.1:\n    - Added a MacOS port.\n      Thanks to Daria Phoebe Brashear!\n    - Added a functional test framework that aids in automatically\n      determining whether libfaketime works properly on the current\n      machine. Thanks to Don Fong!\n\nSince 0.8:\n    - Changed directory layout and Makefile structure.\n      Thanks to Lukas Fleischer!\n\nSince 0.7:\n    - Added support for fstatat() and fstatat64() which were introduced in\n      Linux kernel 2.6.16 and used in recent coreutils.\n      Thanks to Daniel Kahn Gillmor for the report!\n      This can be disabled by passing -DNO_ATFILE in the Makefile.\n    - Added a simple wrapper shell script and a man page for it. Makes it\n      easier to run commands under faked system times. It assumes that the\n      libraries will be copied to /usr/lib/faketime during installation,\n      please adjust this path if necessary. The \"install\" target in the\n      Makefile has been adapted accordingly.\n    - Added support for fractional time offsets, such as FAKETIME=\"+1,5h\".\n      Please note that either , or . has to be used as a delimiter\n      depending on your locale. Thanks to Karl Chen!\n    - Added support for speeding the clock up or slowing it down. For\n      example, FAKETIME=\"+5d x2,0\" will set the faked time 5 days into\n      the future and make the clock run twice as fast for the specified\n      program. Slowing it down can be done e.g. by using FAKETIME=\"+0 x0,5\".\n      Again, the delimiter to use for the fraction depends on your locale.\n      Thanks to Karl Chen!\n\nSince 0.6:\n    Main version 0.7 contributions by David North, TDI:\n    - Added ability to 'start clock at' a specific time.\n    - Added pthread synchronization support\n    - Added a 2 second delay to timetest.c so one can observe if the\n      clock is relative or absolute\n    - Added test.sh example of 'start clock at'\n    - Added ability to disable the FAKE_STAT functionality at library-start\n      in the case that the library was compiled -DFAKE_STAT, and added another\n      test case for demonstrating this\n    - Repaired a bug w.r.t. strptime/mktime wherein 'isdst' was uninitialized\n      which led to pseudorandom +/- 1 hour results being returned in 'start at'\n      or absolute time modes\n\n    Other enhancements:\n    - Fixed missing interceptions to libc-internal functions and added notes\n      about a workaround for running Java programs with faked times in the\n      future (they worked properly, but often locked up at exiting). Thanks to\n      Jamie Cameron of Google for in-depth analysis and prototype solution!\n\nSince 0.5:\n    - Performance enhancements by means of caching the data read\n      e.g. from $HOME/.faketimerc for 10 seconds.\n    - Several file timestamp related system calls such as fstat() will be\n      intercepted now. See the README file on how to turn this off if you\n      do not need it. Thanks to Philipp Hachtmann!\n    - A system-wide /etc/faketimerc file will now be used if no FAKETIME\n      environment variable has been set and no $HOME/.faketimerc is present.\n      Thanks to David Burley, Jacob Moorman, and Wayne Davison of\n      SourceForge, Inc.!\n    - Added trivial Makefile targets clean/distclean/install\n    - Changed Makefile target test to run new test.sh script\n    - Added new test cases to timetest.c\n\nSince 0.4:\n    - Allow \"y\" for years of offset specification. Thanks to Bas ten Berge!\n\nSince 0.3:\n    - Support for FAKETIME_FMT environment variable. Thanks to Moreno Baricevic!\n\nSince 0.2:\n    - Intercept clock_gettime(). Thanks to Andreas Thienemann!\n\nSince 0.1:\n    - Fixed segfault when calling time(NULL). Thanks to Andres Ojamaa!\n    - Added additional sanity checks.\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 33.2041015625,
          "content": "libfaketime, version 0.9.10 (March 2022)\n========================================\n\n\nContent of this file:\n---------------------\n\n1. Introduction\n2. Compatibility issues\n3. Installation\n4. Usage\n   a) Basics\n   b) Using absolute dates\n   c) Using 'start at' dates\n   d) Using offsets for relative dates\n   e) Advanced features and caveats\n   f) Faking the date and time system-wide\n   g) Using the \"faketime\" wrapper script\n   h) \"Limiting\" libfaketime based on elapsed time or number of calls\n   i) \"Limiting\" libfaketime per process\n   j) Spawning an external process\n   k) Saving timestamps to file, loading them from file\n   l) Replacing random numbers with deterministic number sequences\n5. License\n6. Contact\n\n\n1. Introduction\n---------------\n\nlibfaketime intercepts various system calls that programs use to retrieve the\ncurrent date and time. It then reports modified (faked) dates and times (as\nspecified by you, the user) to these programs. This means you can modify the\nsystem time a program sees without having to change the time system-wide.\n\nlibfaketime allows you to specify both absolute dates (e.g., 01/01/2004) and\nrelative dates (e.g., 10 days ago).\n\nlibfaketime might be used for various purposes, for example\n\n- deterministic build processes\n- debugging time-related issues, such as expired SSL certificates\n- testing software for year-2038 compliance\n\nlibfaketime ships with a command line wrapper called \"faketime\" that makes it\neasier to use, but does not expose all of libfaketime's functionality. If your\nuse case is not covered by the faketime command, make sure to look in this\ndocumentation whether it can be achieved by using libfaketime directly.\n\n\n2. Compatibility issues\n-----------------------\n\n- libfaketime is supposed to work on Linux and macOS.\n  Your mileage may vary; some other *NIXes have been reported to work as well.\n\n- libfaketime uses the library preload mechanism of your operating system's\n  linker (which is involved in starting programs) and thus cannot work with\n  statically linked binaries or binaries that have the setuid-flag set (e.g.,\n  suidroot programs like \"ping\" or \"passwd\"). Please see you system linker's\n  manpage for further details.\n\n- libfaketime supports the pthreads environment. A separate library is built\n  (libfaketimeMT.so.1), which contains the pthread synchronization calls. This\n  library also single-threads calls through the time() intercept because\n  several variables are statically cached by the library and could cause issues\n  when accessed without synchronization.\n\n  However, the performance penalty for this might be an issue for some\n  applications. If this is the case, you can try using an unsynchronized time()\n  intercept by removing the -DPTHREAD_SINGLETHREADED_TIME from the Makefile and\n  rebuilding libfaketimeMT.so.1\n\n* Java-/JVM-based applications work but you need to pass in an extra argument\n  (FAKETIME_DONT_FAKE_MONOTONIC).  See usage basics below for details.  Without\n  this argument the java command usually hangs.\n\n* libfaketime will eventually be bypassed by applications that dynamically load\n  system libraries, such as librt, explicitly themselves instead of relying on\n  the linker to do so at application start time. libfaketime will not work with\n  those applications unless you can modify them.\n\n  This apparently happens a lot in complex run-time environments, e.g., for\n  programs written in golang, for some Java Virtual Machine implementations,\n  etc. Since libfaketime is effectively bypassed in such situations, there's\n  nothing we can do about it. Please consider asking the appropriate developers\n  and vendors to implement their runtime environment in a way that supports\n  intercepting selected system calls through LD_PRELOAD.\n\n* Applications can explicitly be designed to prevent libfaketime from working,\n  e.g., by checking whether certain environment variables are set or whether\n  libfaketime-specific files are present.\n\n* CLOCK_MONOTONIC test: Running \"make test\" performs a series of tests after\n  successful compilation of the libfaketime library. On some platforms, the\n  \"CLOCK_MONOTONIC test\" will apparently hang forever. If and only if this\n  happens on your platform, add the CFLAG -DFORCE_MONOTONIC_FIX to\n  src/Makefile and recompile libfaketime. Do not set FORCE_MONOTONIC_FIX on\n  platforms where the test does not hang.\n\n  If you observe hangs on the CLOCK_REALTIME test, add the CFLAG\n  -DFORCE_PTHREAD_NONVER. Also set this FORCE_PTHREAD_NONVER flag in case\n  FORCE_MONOTONIC_FIX alone does not solve the hang on the MONOTONIC_CLOCK\n  test.\n\n  If FORCE_MONOTONIC_FIX was not set as a compile-time flag, you can also\n  set an environment variable FAKETIME_FORCE_MONOTONIC_FIX=1 if you want\n  to enable the fix at run-time, or to 0 if you explicitly want to disable\n  it. The fix is automatically enabled if libfaketime was compiled on a\n  system with glibc as the underlying libc implementation, and a glibc\n  version is detected at run-time that is assumed to need this workaround.\n  Please use Github issues at https://github.com/wolfcw/libfaketime/issues\n  to report any observed hangs during CLOCK_MONOTONIC tests and report\n  your CPU architecture, libc implementation (e.g., glibc 2.30) and any\n  other details that might help (e.g., Linux distribution, use within, e.g.,\n  Docker containers etc.).\n\n  Please try to avoid compiling with FORCE_MONOTONIC_FIX on platforms that\n  do not need it. While it won't make a difference in most cases, depending\n  on the specific FAKETIME settings in use, it would cause certain\n  intercepted functions such as pthread_cond_timedwait() return with a\n  time-out too early or too late, which could break some applications.\n  Try compiling without FORCE_MONOTONIC_FIX first and check whether the\n  tests appear to hang. If they do, you can either set the\n  FAKETIME_FORCE_MONOTONIC_FIX environment variable to 1, or re-compile\n  with FORCE_MONOTONIC_FIX set.\n\n\n3. Installation\n---------------\n\nRunning \"make\" compiles both library versions and a test program, which it then\nalso executes.\n\nIf the test works fine, you should copy the libfaketime libraries\n(libfaketime.so.1, and libfaketimeMT.so.1) to the place you want them in.\nRunning \"make install\" will attempt to place them in /usr/local/lib/faketime\nand will install the wrapper shell script \"faketime\" in /usr/local/bin, both of\nwhich most likely will require root privileges. However, from a technical point\nof view, there is no necessity for a system-wide installation, so you can use\nlibfaketime also on machines where you do not have root privileges. You may\nwant to adjust the PREFIX variable in the Makefiles accordingly.\n\nBy default, the Makefile compiles/links libfaketime for your default system\narchitecture. If you need to build, e.g., 32-bit files on a 64-bit platform,\nplease see the notes about CFLAGS and LDFLAGS in src/Makefile.\n\nSince version 0.6, system calls to file timestamps are also intercepted,\nthanks to a contribution by Philipp Hachtmann. This is especially useful in\ncombination with relative time offsets as explained in section 4d) below, if a\nprogram writes and reads files whose timestamps also shall be faked. If you do\nnot need this feature or if it confuses the application you want to use FTPL\nwith, define the environment variable NO_FAKE_STAT, and the intercepted stat\ncalls will be passed through unaltered.\n\nOn macOS, it is necessary to compile differently, due to the different\nbehavior dyld has. Use the Makefile.OSX file provided to compile\nlibfaketime.1.dylib. Additionally, instead of using LD_PRELOAD,\nthe variable DYLD_INSERT_LIBRARIES should be set to the path to\nlibfaketime.1.dylib, and the variable DYLD_FORCE_FLAT_NAMESPACE should be\nset (to anything). macOS users should read README.OSX for additional\ndetails.\n\n\n4. Usage\n--------\n\n4a) Usage basics\n----------------\n\nUsing libfaketime on a program of your choice consists of two steps:\n\n1. Making sure libfaketime gets loaded by the system's linker.\n2. Specify the faked time.\n\nAs an example, we want the \"date\" command to report our faked time. To do so,\nwe could use the following command line on Linux:\n\nuser@host> date\nTue Nov 23 12:01:05 CEST 2016\n\nuser@host> LD_PRELOAD=/usr/local/lib/libfaketime.so.1 FAKETIME=\"-15d\" date\nMon Nov  8 12:01:12 CEST 2016\n\nuser@host> LD_PRELOAD=/usr/local/lib/libfaketime.so.1 FAKETIME=\"-15d\"\nFAKETIME_DONT_FAKE_MONOTONIC=1 java -version\njava version \"1.8.0_111\"\nJava(TM) SE Runtime Environment (build 1.8.0_111-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)\n\nThe basic way of running any command/program with libfaketime enabled is to\nmake sure the environment variable LD_PRELOAD contains the path and\nfilename of the libfaketime library. This can either be done by setting it once\nbeforehand:\n\nexport LD_PRELOAD=/path/to/libfaketime.so.1\n(now run any command you want)\n\nOr it can be done by specifying it on the command line itself:\n\nLD_PRELOAD=/path/to/libfaketime.so.1 your_command_here\n\n(These examples are for the bash shell; how environment variables are set may\nvary on your system.)\n\nOn Linux, library search paths can be set as part of the linker configuration.\nLD_PRELOAD then also works with relative paths. For example, when libfaketime.so.1\nis installed as /path/to/libfaketime.so.1, you can add /path/to to an appropriate\nlinker configuration file, e.g., /etc/ld.so.conf.d/local.conf, and then run\nthe \"ldconfig\" command. Afterwards, using LD_PRELOAD=libfaketime.so.1 suffices.\n\nHowever, also the faked time should be specified; otherwise, libfaketime will\nbe loaded, but just report the real system time. There are multiple ways to\nspecify the faked time:\n\na) By setting the environment variable FAKETIME.\nb) By using the file given in the environment variable FAKETIME_TIMESTAMP_FILE\nc) By using the file .faketimerc in your home directory.\nd) By using the file /etc/faketimerc for a system-wide default.\ne) By using FAKETIME_UPDATE_TIMESTAMP_FILE and date -s \"<time>\" or alike.\n\nIf you want to use b) c) or d), $HOME/.faketimerc or /etc/faketimerc consist of\nonly one line of text with exactly the same content as the FAKETIME environment\nvariable, which is described below. Note that /etc/faketimerc will only be used\nif there is no $HOME/.faketimerc and no FAKETIME_TIMESTAMP_FILE file exists.\nAlso, the FAKETIME environment variable _always_ has priority over the files.\nFor FAKETIME_UPDATE_TIMESTAMP_FILE please see below.\n\n\n4b) Using absolute dates\n------------------------\n\nThe format that _must_ be used for _absolute_ dates is \"YYYY-MM-DD hh:mm:ss\".\nFor example, the 24th of December, 2020, 8:30 PM would have to be specified as\nFAKETIME=\"2020-12-24 20:30:00\".\n\n\n4c) Using 'start at' dates\n--------------------------\n\n(Thanks to a major contribution by David North, TDI in version 0.7)\n\nThe format that _must_ be used for _start_at_ dates is \"@YYYY-MM-DD hh:mm:ss\".\nFor example, the 24th of December, 2020, 8:30 PM would have to be specified as\nFAKETIME=\"@2020-12-24 20:30:00\".\n\nThe absolute dates described in 4b) simulate a STOPPED system clock at the\nspecified absolute time. The 'start at' format allows a 'relative' clock\noperation as described below in section 4d), but using a 'start at' time\ninstead of an offset time.\n\nIf the started process itself starts other (child) processes, they by default\nwill start with the specified start-at-date again. If this is not what you need,\nset the environment variable FAKETIME_DONT_RESET=1. Try these examples to see\nthe difference:\n\nLD_PRELOAD=src/libfaketime.so.1 FAKETIME=\"@2000-01-01 11:12:13\" \\\n  FAKETIME_DONT_RESET=1 \\\n  /bin/bash -c 'while [ $SECONDS -lt 5 ]; do date; sleep 1; done'\n\nLD_PRELOAD=src/libfaketime.so.1 FAKETIME=\"@2000-01-01 11:12:13\" \\\n  /bin/bash -c 'while [ $SECONDS -lt 5 ]; do date; sleep 1; done'\n\nIn the second example, the \"date\" command will always print the same time,\nwhile in the first example, with FAKETIME_DONT_RESET set, time will increment\neven though all the \"date\" commands are new processes.\n\n\n4d) Using offsets for relative dates\n------------------------------------\n\nRelative date offsets can be positive or negative, thus what you put into\nFAKETIME _must_ either start with a + or a -, followed by a number, and\noptionally followed by a multiplier:\n\n- By default, the offset you specify is in seconds. Example:\n\n  export FAKETIME=\"-120\" will set the faked time 2 minutes (120 seconds) behind\n  the real time.\n\n- The multipliers \"m\", \"h\", \"d\" and \"y\" can be used to specify the offset in\n  minutes, hours, days and years (365 days each), respectively. Examples:\n\n  export FAKETIME=\"-10m\" sets the faked time 10 minutes behind the real time.\n  export FAKETIME=\"+14d\" sets the faked time to 14 days in the future.\n\n  Please note that if you need other multipliers (weeks, months etc.) or higher\n  precision (e.g., correct leap year handling), you should use either the\n  faketime wrapper or the GNU date command as shown in the first of the three\n  examples below.\n\nYou now should understand the complete example we've used before:\n\nLD_PRELOAD=/usr/local/lib/libfaketime.so.1 FAKETIME=\"-15d\" date\n\nThis command line makes sure libfaketime gets loaded and sets the faked time to\n15 days in the past.\n\nMoreno Baricevic has contributed support for the FAKETIME_FMT environment\nvariable, which allows you to optionally set the strptime() format:\n\nSome simple examples:\nLD_PRELOAD=./libfaketime.so.1 FAKETIME_FMT=%s FAKETIME=\"`date +%s -d'1 year ago'`\" date\nLD_PRELOAD=./libfaketime.so.1 FAKETIME_FMT=%s FAKETIME=\"`stat -c %Y somefile`\" date\nLD_PRELOAD=./libfaketime.so.1 FAKETIME_FMT=%c FAKETIME=\"`date`\" date\n\n\n4e) Advanced features and caveats\n---------------------------------\n\nAdvanced time specification options:\n------------------------------------\n\nSince version 0.8, thanks to a contribution by Karl Chen, fractions can be used\nin the specification of time offsets. For example,\n\nFAKETIME=\"+1,5h\"\n\nis equivalent to FAKETIME=\"+90m\". Please be aware that the fraction delimiter\ndepends on your locale settings, so actually you might need to use\n\nFAKETIME=\"+1.5h\"\n\nYou should figure out the proper delimiter, e.g., by using libfaketime on\na command like /bin/date where you immediately can verify whether it worked as\nexpected.\n\nAlso contributed by Karl Chen in v0.8 is the option to speed up or slow\ndown the wall clock time for the program which is executed using libfaketime.\nFor example,\n\nFAKETIME=\"+1y x2\"\n\nwill set the faked time one year into the future and will make the clock run\ntwice as fast. Similarly,\n\nFAKETIME=\"+1y x0,5\"\n\nwill make the clock run only half as fast. As stated above, the fraction\ndelimiter depends on your locale. Furthermore,\n\nFAKETIME=\"+1y i2,0\"\n\nwill make the clock step two seconds per each time(), etc. call, being\ncompletely independently of the system clock. It helps running programs\nwith some determinism. In this single case all spawned processes will use\nthe same global clock without restarting it at the start of each process.\n\nPlease note that using \"x\" or \"i\" in FAKETIME still requires giving an offset\n(see section 4d). This means that \"+1y x2\" will work, but \"x2\" only will not.\nIf you do not want to fake the time, but just modify clock speed, use something\nlike \"+0 x2\", i.e., use an explicit zero offset as a prefix in your FAKETIME.\n\nFor testing, your should run a command like\n\nLD_PRELOAD=./libfaketime.so.1 FAKETIME=\"+1,5y x10,0\" \\\n/bin/bash -c 'while true; do echo $SECONDS ; sleep 1 ; done'\n\nFor each second that the endless loop sleeps, the executed bash shell will\nthink that 10 seconds have passed ($SECONDS is a bash-internal variable\nmeasuring the time since the shell was started).\n\n(Please note that replacing \"echo $SECONDS\" e.g. with a call to \"/bin/date\"\nwill not give the expected result, since /bin/date will always be started as a\nnew process for which also libfaketime will be re-initialized. It will show the\ncorrect offset (1.5 years in the future), but no speed-ups or slow-downs.)\n\nFor applications that should use a different date & time each time they are\nrun, consider using the included timeprivacy wrapper shellscript (contributed\nby adrelanos at riseup dot net).\n\n\nCaveats:\n--------\n\nWhenever possible, you should use relative offsets or 'start at' dates,\nand not use absolute dates.\n\nWhy? Because the absolute date/time you set is fixed, i.e., if a program\nretrieves the current time, and retrieves the current time again 5 minutes\nlater, it will still get the same result twice. This is likely to break\nprograms which measure the time passing by (e.g., a mail program which checks\nfor new mail every X minutes).\n\nUsing relative offsets or 'start at' dates solves this problem.\nlibfaketime then will always report the faked time based on the real\ncurrent time and the offset you've specified.\n\nPlease also note that your default specification of the fake time is cached for\n10 seconds in order to enhance the library's performance. Thus, if you change the\ncontent of $HOME/.faketimerc or /etc/faketimerc while a program is running, it\nmay take up to 10 seconds before the new fake time is applied. If this is a\nproblem in your scenario, you can change number of seconds before the file is read\nagain with environment variable FAKETIME_CACHE_DURATION, or disable caching at all\nwith FAKETIME_NO_CACHE=1. Remember that disabling the cache may negatively\ninfluence the performance (especially when not using FAKETIME environment\nbut configuration files, such as FAKETIME_TIMESTAMP_FILE).\n\n\nSetting FAKETIME by means of a file timestamp\n---------------------------------------------\n\nBased on a proposal by Hitoshi Harada (umitanuki), the \"start at\" time can now be\nset through any file in the file system by setting the FAKETIME environment variable\nto \"%\" (a percent sign) and FAKETIME_FOLLOW_FILE to the name of the file whose\nmodification timestamp shall be used as source for the \"start at\" time.\n\nUsage example:\n\n# create any file with December 24th, 2009, 12:34:56 as timestamp\ntouch -t 0912241234.56 /tmp/my-demo-file.tmp\n\n# run a bash shell with an endless loop printing the current time\nLD_PRELOAD=/path/to/libfaketime.so.1 \\\n  FAKETIME='%' FAKETIME_FOLLOW_FILE=/tmp/my-demo-file.tmp \\\n  FAKETIME_DONT_RESET=1 \\\n  bash -c 'while true ; do date ; sleep 1 ; done'\n\n# now, while the above is running, change the file's timestamp\n# (in a different terminal window or whatever)\ntouch -t 2002290123.45 /tmp/my-demo-file.tmp\n\n\nChanging the 'x' modifier during run-time\n-----------------------------------------\n\nUsing FAKETIME_TIMESTAMP_FILE allows for easily changing the FAKETIME setting\nwhile a program is running:\n\necho \"+0 x1\" > /tmp/my-faketime.rc\nLD_PRELOAD=libfaketime.so.1 FAKETIME_TIMESTAMP_FILE=\"/tmp/my-faketime.rc\" \\\n  FAKETIME_NO_CACHE=1 ./some-program &\nsleep 10 ; echo \"+0 x10\" > /tmp/my-faketime.rc\n\nChanging the speed of the wall clock time, i.e., using a different 'x' modifier\nduring run-time, by default can lead to greater jumps that may confuse the\nprogram. For example, if the program has been running for 10 seconds on 'x1',\nand then the setting is changed to 'x10', the faked time will look to the\nprogram as if it has been running for more than 100 instead of just more than\n10 seconds.\n\nBy setting the environment variable FAKETIME_XRESET to any value, transitions\nbetween different 'x' modifier values will be significantly smoothed:\n\nLD_PRELOAD=libfaketime.so.1 FAKETIME_TIMESTAMP_FILE=\"/tmp/my-faketime.rc\" \\\n  FAKETIME_NO_CACHE=1 FAKETIME_XRESET=1 ./some-program &\n\nSetting FAKETIME_XRESET ensures that wall clock time begins to run faster\nonly after the 'x' modifier has been changed (when increasing it) and also\nensures that the reported faked time does not jump back to past values\n(when decreasing it).\n\nPlease note that FAKETIME_XRESET internally works by resetting libfaketime's\ninternal time-keeping data structures, which may have side effects on reported\nfile timestamps. Using FAKETIME_XRESET should be considered experimental at\nthe moment.\n\n\nCleaning up shared memory\n-------------------------\n\nlibfaketime uses semaphores and shared memory on platforms that support it in\norder to sync faketime settings across parent-child processes.\n\nPlease note that this does not share the time set by settimeofday (for that\nsee FAKETIME_UPDATE_TIMESTAMP_FILE below).\n\nlibfaketime will clean up when it exits properly.\nHowever, when processes are terminated (e.g., by Ctrl-C on command line),\nshared memory cannot be cleaned up properly. In such\ncases, you should occasionally delete\n\n  /dev/shm/faketime_shm_* and\n  /dev/shm/sem.faketime_sem_*\n\nmanually (or properly automated). Leftover files there from processes that\nalready have been terminated are not a problem in general, but result in a\nlibfaketime error the next time a process is started with a process id for\nwhich such a stale semaphore/shared memory exists. Thus, if you run across\nthe following error message\n\n  libfaketime: In ft_shm_create(), shm_open failed: File exists\n\nplease cleanup /dev/shm as described above. This is especially relevant\nfor long-running systems (servers with high uptime) and systems on which\na lot of processes are started (e.g., servers handling many containers\nor similar virtualization mechanisms).\n\nUse of shared memory can be disabled by setting the FAKETIME_DISABLE_SHM\nenvironment variable, or equivalently, passing --disable-shm to faketime.\n\n\nIntercepting time-setting calls\n-------------------------------\n\nlibfaketime can be compiled with the CFLAG \"-DFAKE_SETTIME\" in order\nto also intercept time-setting functions, i.e., clock_settime(),\nsettimeofday(), and adjtime(). The FAKETIME environment\nvariable will be adjusted on each call.\n\nWhen the environment variable FAKETIME_TIMESTAMP_FILE is set, points to a\nwriteable (creatable) custom config file and the environment variable\nFAKETIME_UPDATE_TIMESTAMP_FILE is \"1\", then the file also is updated on each\ncall. By this, a common \"virtual time\" can be shared by several\nprocesses, where each can adjust the time for all.\n\n\nSharing \"virtual settable time\" between independent processes\n-------------------------------------------------------------\n\nWhen libfaketime was compiled with FAKETIME_COMPILE_CFLAGS=\"-DFAKE_SETTIME\",\nit can be configured to support a common time offset for multiple processes.\nThis for example allows to use \"ntpdate\" as normal user without affecting\nsystem clock, interactively testing software with different dates or testing\ncomplex software with multiple independent processes that themself use\nsettime internally.\n\nExamples:\n\n  $ export LD_PRELOAD=libfaketime.so.1\n  $ export FAKETIME_TIMESTAMP_FILE=\"/tmp/my-faketime.rc\"\n  $ export FAKETIME_UPDATE_TIMESTAMP_FILE=1\n  $ export FAKETIME_CACHE_DURATION=1 # in seconds\n  # or: export FAKETIME_NO_CACHE=1\n\n  $ date -s \"1999-12-24 16:00:00\"\n  Fri Dec 24 16:00:00 CET 1999\n  $ LD_PRELOAD=\"\" date\n  Thu Apr  9 15:19:38 CEST 2020\n  $ date\n  Fri Dec 24 16:00:02 CET 1999\n  $ /usr/sbin/ntpdate -u clock.isc.org\n   9 Apr 15:18:37 ntpdate[718]: step time server xx offset 640390517.057257 sec\n  $ date\n  Thu Apr  9 15:18:40 CEST 2020\n\nIn another terminal, script or environmment the same variables could be set\nand the same time would be printed.\nThis also avoid the need to directly update the rc config file to use\ndifferent times, but of course only supports time offsets.\n\nPlease note that this feature is not compatible with several other features,\nsuch as FAKETIME_FOLLOW_FILE, FAKETIME_XRESET and maybe others. After first\nsettime, offsets will be used in FAKETIME_TIMESTAMP_FILE, even if it\ninitially used advanced time specification options.\n\n\n4f) Faking the date and time system-wide\n----------------------------------------\n\nDavid Burley of SourceForge, Inc. reported an interesting use case of applying\nlibfaketime system-wide: Currently, all virtual machines running inside\nan OpenVZ host have the same system date and time. In order to use multiple\nsandboxes with different system dates, the libfaketime library can be put into\n/etc/ld.so.preload; it will then be applied to all commands and programs\nautomatically. This is of course best used with a system-wide /etc/faketimerc\nfile. Kudos to SourceForge, Inc. for providing the patch!\n\nCaveat: If you run a virtual machine, its real-time clock might be reset to the\nreal world date & time when you reboot. Depending on your FAKETIME setting,\nthis may lead to side effects, such as forced file system checks on each reboot.\nSystem-wide faked time may also lead to unexpected side effects with software\nauto-update tools, if the offset between real world time and faked system time\nis too large. If in doubt, set your system's date to the faked time and try out\nwhether everything still works as expected before applying libfaketime\nsystem-wide.\n\n\n4g) Using the \"faketime\" wrapper\n--------------------------------\n\nAs of version 0.8, libfaketime provides a command named \"faketime\", which is\nplaced into /usr/bin by \"make install\". It spares the hassle of setting\nthe LD_PRELOAD and FAKETIME environment variables manually, but only exposes\na subset of libfaketime's functionality. On the other hand, it uses the date\ninterpretation function by /bin/date in order to provide higher flexibility\nregarding the specification of the faked date and time. For example, you\ncan use\n\nfaketime 'last Friday 5 pm' /your/command/here\n\nOf course, also absolute dates can be used, such as in\n\nfaketime '2018-12-24 08:15:42' /bin/date\n\nThanks to Daniel Kahn Gillmor for providing these suggestions!\n\nBalint Reczey has rewritten the wrapper in 0.9.5 from a simple shell script\nto an efficient wrapper application.\n\n\n4h) \"Limiting\" libfaketime based on elapsed time or number of calls\n-------------------------------------------------------------------\n\nStarting with version 0.9, libfaketime can be configured to not be continuously\nactive, but only during a certain time interval.\n\nFor example, you might want to start a program with the real current time, but\nafter 5 minutes of usage, you might want it to see a faked time, e.g., a year\nin the future.\n\nDynamic changes to the faked time are alternatively possible by\n\n- changing the FAKETIME environment variable at run-time; this is the preferred\n  way if you use libfaketime for debugging and testing as a programmer, as it\n  gives you the most direct control of libfaketime without any performance\n  penalties.\n\n- not using the FAKETIME environment variable, but specifying the fake time in\n  a file (such as ~/.faketimerc). You can change the content of this file at\n  run-time. This works best with caching disabled, but comes at a performance\n  cost because this file has to be read and evaluated each time.\n\nThe feature described here works based on two pairs of environment variables,\n\n  FAKETIME_START_AFTER_SECONDS and FAKETIME_STOP_AFTER_SECONDS, and\n  FAKETIME_START_AFTER_NUMCALLS and FAKETIME_STOP_AFTER_NUMCALLS\n\nThe default value for each of these environment variables is -1, which means\n\"ignore this value\".\n\nIf you want libfaketime to be only active during the run-time minutes 2 to 5\nof your application, you would set\n\n  FAKETIME_START_AFTER_SECONDS=60\n  FAKETIME_STOP_AFTER_SECONDS=300\n\nThis means that your application will work with the real time from start (second\n0) up to second 60. It will then see a faked time from run-time seconds 60 to\n300 (minutes 2, 3, 4, and 5). After run-time second 600, it will again see the\nreal (not-faked) time.\n\nThis approach is not as flexible as changing the FAKETIME environment variable\nduring runtime, but may be easier to use, works on a per-program (and not a\nper-user or system-wide) scope, and has only a minor performance overhead.\n\nUsing the other pair of environment variables, you can limit the activity time\nof libfaketime not based on wall-clock seconds, but on the number of\ntime-related function calls the started program performs. This alternative is\nprobably only suitable for programmers who either know the code of the program\nin order to determine useful start/stop values or want to perform fuzzing\ntests.\n\nBoth pairs of environment variables can be combined to further restrict\nlibfaketime activity, although this is only useful in very few scenarios.\n\nLimiting libfaketime activity in this way is not recommended in general. Many\nprograms will break when they are subject to sudden changes in time, especially\nif they are started using the current (real) time and are then sent back into\nthe past after, e.g., 5 minutes. For example, they may appear to be frozen or\nstuck because they are waiting until a certain point in time that, however, is\nnever reached due to the delayed libfaketime activity. Avoid using this\nfunctionality unless you are sure you really need it and know what you are\ndoing.\n\n\n4i) \"Limiting\" libfaketime per process\n--------------------------------------\n\nfaketime can be instructed to fake time related calls only for selected\ncommands or to fake time for each command except for a certain subset of\ncommands.\n\nThe environment variables are FAKETIME_ONLY_CMDS and FAKETIME_SKIP_CMDS\nrespectively.\n\nExample:\n    FAKETIME_ONLY_CMDS=javadoc faketime '2008-12-24 08:15:42' make\nwill run the \"make\" command but the time faking will only be applied\nto javadoc processes.\n\nMultiple commands are separated by commas.\n\nExample:\n    FAKETIME_SKIP_CMDS=\"javadoc,ctags\" faketime '2008-12-24 08:15:42' make\nwill run the \"make\" command and apply time faking for everything \"make\"\ndoes except for javadoc and ctags processes.\n\nFAKETIME_ONLY_CMDS and FAKETIME_SKIP_CMDS are mutually exclusive, i.e.,\nyou cannot set them both at the same time. faketime will terminate with\nan error message if both environment variables are set.\n\n\n4j) Spawning an external process\n--------------------------------\n\nFrom version 0.9 on, libfaketime can execute a shell command once after a) an\narbitrary number of seconds has passed or b) a number of time-related system\ncalls has been made by the program since it started. This has two limitations\none needs to be aware of:\n\n* Spawning the external process happens during a time-related system call\n  of the original program. If you want the external process to be started\n  5 seconds after program start, but this program does not make any time-\n  related system calls before run-time second 8, the start of your external\n  process will be delayed until run-time second 8.\n\n* The original program is blocked until the external process is finished,\n  because the intercepting time-related system call will not return earlier. If\n  you need to start a long-running external process, make sure it forks into the\n  background.\n\nSpawning the external process is controlled using three environment variables:\nFAKETIME_SPAWN_TARGET, FAKETIME_SPAWN_SECONDS, FAKETIME_SPAWN_NUMCALLS.\n\nExample (using bash on Linux):\n\n(... usual libfaketime setup here, setting LD_PRELOAD and FAKETIME ...)\nexport FAKETIME_SPAWN_TARGET=\"/bin/echo 'Hello world'\"\nexport FAKETIME_SPAWN_SECONDS=5\n/opt/local/bin/myprogram\n\nThis will run the \"echo\" command with the given parameter during the first\ntime-related system function call that \"myprogram\" performs after running for 5\nseconds.\n\n\n4k) Saving timestamps to file, loading them from file\n-----------------------------------------------------\n\nTo store and load timestamp _offsets_ using _one and the same_ file allowing\nto share a common \"virtual time\" between independent processes, please see\nFAKETIME_UPDATE_TIMESTAMP_FILE above. The FAKETIME_SAVE_FILE feature is\ndifferent.\n\nfaketime can save faked timestamps to a file specified by FAKETIME_SAVE_FILE\nenvironment variable. It can also use the file specified by FAKETIME_LOAD_FILE\nto replay timestamps from it. After consuming the whole file, libfaketime\nreturns to using the rule set in FAKETIME variable, but the timestamp processes\nwill start counting from will be the last timestamp in the file.\n\nThe file stores each timestamp in a stream of saved_timestamp structs\nwithout any metadata or padding:\n\n/* Storage format for timestamps written to file. Big endian. */\nstruct saved_timestamp {\n  int64_t sec;\n  uint64_t nsec;\n};\n\nfaketime needs to be run using the faketime wrapper to use these files. This\nfunctionality has been added by Balint Reczey in v0.9.5.\n\n\n4l) Replacing random numbers with deterministic number sequences\n----------------------------------------------------------------\n\nlibfaketime can be compiled with the CFLAG FAKE_RANDOM set (see src/Makefile).\n\nWhen compiled this way, libfaketime additionally intercepts calls to the\nfunction getrandom(), which currently is Linux-specific.\n\nThis functionality is intended to feed a sequence of deterministic, repeatable\nnumbers to applications, which use getrandom(), instead of the random numbers\nprovided by /dev/[u]random.\n\nFor creating the deterministic number sequence, libfaketime internally\nuses Bernard Widynski's Middle Square Weyl Sequence Random Number Generator,\nsee https://mswsrng.wixsite.com/rand.\n\nIt requires a 64-bit seed value, which has to be passed via the environment\nvariable FAKERANDOM_SEED, as in, for example\n\n  LD_PRELOAD=src/libfaketime.so.1 \\\n  FAKERANDOM_SEED=\"0x12345678DEADBEEF\" \\\n  test/getrandom_test\n\nWhenever the same seed value is used, the same sequence of \"random-looking\"\nnumbers is generated.\n\nPlease be aware that this definitely breaks any security properties that\nmay be attributed to random numbers delivered by getrandom(), e.g., in the\ncontext of cryptographic operations. Use it for deterministic testing\npurposes only. Never use it in production.\n\nFor a discussion on why this apparently not date-/time-related function\nhas been added to libfaketime and how it may evolve, see Github issue #275.\n\n\n5. License\n----------\n\nlibfaketime has been released under the GNU General Public License, GPL.\nPlease see the included COPYING file.\n\n\n6. Contact\n-----------\n\nBug reports, feature suggestions, success reports, and patches/pull\nrequests are highly appreciated:\n\n            https://github.com/wolfcw/libfaketime\n"
        },
        {
          "name": "README.OSX",
          "type": "blob",
          "size": 6.396484375,
          "content": "README file for libfaketime on macOS\n====================================\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n! If you compiled libfaketime successfully but even the simple examples   !\n! with the \"date\" command do not seem to work, please see the notes about !\n! SIP (system integrity protection) in this document!                     !\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\nSupport for macOS has meanwhile matured and many command line and\nGUI applications will run stable.\n\nDevelopments and tests are done on Catalina currently.\n\nVersion 0.9.5 and higher no longer work with OSX <= 10.6 due to\nchanges in the underlying system libraries. If you need libfaketime\non OSX <= 10.6, please use libfaketime version 0.9.\n\nInstalling and using libfaketime on macOS is slightly different than\non Linux. Please make sure to read the README file for general\nsetup and usage, and refer to this file only about macOS specifics.\n\n\n1) Installing libfaketime on macOS\n----------------------------------\n\nIf you use MacPorts, libfaketime can be installed on the command line\nas follows:\n\n    sudo port install libfaketime\n\nOr, if you use Fink, install using:\n\n    fink install libfaketime\n\nOr, if you use Homebrew, install using:\n\n    brew install libfaketime\n\nPlease inform the respective package maintainers if the latest release\nis not yet available this way. With homebrew, you can typically use\n\"brew install --HEAD\" to install from the latest source automatically.\n\nOtherwise, you have to compile and install libfaketime manually; this\nwill require a working installation of Xcode and its command line tools\non your machine.\n\nYou can compile libfaketime by running the command\n\n    make\n\nin libfaketime's top-level directory.\n\nThe resulting library will be named libfaketime.1.dylib ; to check\nwhether it works properly, run the test suite and verify whether its\noutput is correct:\n\n    cd test\n    make -f Makefile.OSX\n\n\n2) Using libfaketime from the command line on macOS\n---------------------------------------------------\n\nYou will need to set three environment variables. In a Terminal.app\nor any other CLI session, the following commands can be used:\n\nexport DYLD_FORCE_FLAT_NAMESPACE=1\nexport DYLD_INSERT_LIBRARIES=/path/to/libfaketime.1.dylib\nexport FAKETIME=\"your favorite faketime-spec here\"\n\nPlease refer to the general README file concerning the format\nof the FAKETIME environment variable value and other environment\nvariables that are related to it.\n\nThe \"faketime\" wrapper application has been adapted to macOS;\nit offers the same limited libfaketime functionality as on Linux\nin a simple-to-use manner without the need to manually set\nthose environment variables. Run \"faketime\" without parameters\nfor help and use \"man faketime\" for details.\n\n\n3) Integrating libfaketime with applications\n--------------------------------------------\n\nGiven the limited number of system calls libfaketime intercepts,\nit may not work too well with specific GUI applications on macOS.\nThis can result in crashes after a seemingly random time, or an\napplication will not or at least not always see the faked time,\nand so on.\n\nA safe way to try out whether a specific application works fine\nwith libfaketime is to start it from the command line. Perform\nthe steps outlined above and run the application by issuing the\nfollowing command:\n\n/Applications/ApplicationName.app/Contents/MacOS/ApplicationName\n\n(Make sure to replace \"ApplicationName\" twice in that command with\nthe name of your actual application.)\n\nIf it works fine, you can configure the application to permanently\nrun with libfaketime by editing its Info.plist file. Add the\nLSEnvironment key unless it is already there and add a dictionary\nwith the three keys like this:\n\n    <key>LSEnvironment</key>\n    <dict>\n        <key>DYLD_FORCE_FLAT_NAMESPACE</key>\n        <string>1</string>\n        <key>DYLD_INSERT_LIBRARIES</key>\n        <string>/path/to/libfaketime.1.dylib</string>\n        <key>FAKETIME</key>\n        <string>value of FAKETIME here</string>\n    </dict>\n\n(If the application is installed in /Applications instead of in\n$HOME/Applications, you eventually will need root privileges. If\nthe application's Info.plist is not in XML, but in binary format,\nuse appropriate editing or conversion tools.)\n\nAfterwards, you will probably need to run\n\n    /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -v -f /Applications/ApplicationName.app\n\nto make sure the change to Info.plist does not go unnoticed.\n\nPlease note that modifications to Info.plist will be lost when the\napplication is updated, so this process needs to be repeated after\nsuch updates, including own new builds when using Xcode.\n\nPlease feel free to report non-working applications on the Github\nlibfaketime issues website. This may help us to identify further\ntime-related system calls that need to be intercepted on macOS.\n\n    https://github.com/wolfcw/libfaketime/issues\n\nHowever, there are two important aspects:\n\n- When reporting non-working applications, please make sure that your issue is\n  not related to SIP (system integrity protection). For example, on a\n  SIP-enabled, default macOS installation, libfaketime will not work for\n  programs like /bin/bash because the path /bin is SIP-protected. Copy your\n  application to a non-SIP-protected path, and if libfaketime still does not\n  work, feel free to report it.\n\n  Please note that this also applies to simple programs such as /bin/date,\n  which is used as an example in the libfaketime documentation and help texts.\n\n  Again, either disable SIP on your system (which might not be the best idea),\n  or copy the applications / programs you want to use with libfaketime to\n  a different path, which is not SIP-protected, e.g., within your home directory.\n\n- We cannot and will not help with using libfaketime for proprietary or\n  commercial software unless you are its developer trying to integrate\n  libfaketime. Please contact the developers or the vendor directly if\n  you have problems using libfaketime with non-free / not open sourced\n  macOS applications.\n\n\n4) Notes for developers of macOS applications\n---------------------------------------------\n\nThe environment variable FAKETIME can be changed at application run-time\nand always takes precedence over other user-controlled settings. It can\nbe re-set to 0 (zero) to work around potential incompatibilities or if\nyou do not want libfaketime applied to your software.\n"
        },
        {
          "name": "README.developers",
          "type": "blob",
          "size": 3.9375,
          "content": "This file contains information for libfaketime developers and contributors.\n\n\nGENERAL\n=======\n\nStarting with libfaketime v0.9.5, development and issue handling is\ncompletely done via Github:\n\n\thttps://github.com/wolfcw/libfaketime\n\n- Official releases are tagged.\n\n- Code contributions and bugfixes should be submitted to and then merged into\n  the \"development\" branch, which is considered unstable and may contain code\n  that is not yet fully tested.\n\n- The \"master\" branch is updated with tested code only; it is ensured that\n  it compiles and works cleanly at least on current Linux and macOS systems.\n\nCode contributions are highly welcome, preferably via pull requests on Github.\n\nPlease have a look at issues labelled as \"help wanted\" in the Github issue\ntracker. If you are interested in contributing to libfaketime, helping with\nthese issues is not only much appreciated, but also a good way to familiarize\nyourself with the overall codebase.\n\n\nCODE STYLE\n==========\n\nPlease try to stick to the following code formatting style guidelines:\n\n- No tabs, only spaces for indentation.\n- Avoid trailing whitespace.\n- Indentation is 2 spaces for each level.\n- Opening and closing curly brackets have to be on lines of their own.\n- Use under_score_names for function and variable names; avoid using camelCase.\n- // and /*...*/ style comments may and shall be used.\n\nExample:\n\n/* This function will do nothing */\nvoid do_nothing(int how_often)\n{\n  int counter;\n  for (counter = 0; counter < how_often; counter++)\n  {\n    counter = counter; // our do-nothing algorithm\n  }\n}\n\n- Use -DDEBUG and #ifdef DEBUG for development and testing. Avoid printing to\n  stdout or stderr outside \"#ifdef DEBUG\"; if it is necessary to inform the\n  user a run-time, prefix your output with \"libfaketime\" or make otherwise sure\n  that the user knows where the message is coming from.\n\n- If you add new functions to libfaketime.c, try placing them somewhere\n  where they fit will: Usually, functions are grouped by functionality\n  (e.g., all functions related to faking file timestamps). If that's not\n  possible, group them by contributor, or document your placement strategy\n  in the commit message.\n\n\nDEVELOPMENT, BUILDING, AND TESTING\n==================================\n\n- Don't break existing behaviour. Backward compatibility matters (unless\n  the modification fixes bugs :-)).\n\n- Add tests for new features. Extend test/timetest.c appropriately and\n  try to use the functional testing framework wherever possible.\n\n- Compiler and linker warnings are treated as errors and not acceptable.\n\n- If you cannot test the code on both Linux and macOS yourself, please\n  let us know and consider wrapping your code in #ifdef / #ifndef __APPLE__\n  statements.\n\n\nDOCUMENTATION\n=============\n\nFor anything more than small bugfixes, please update the user documentation\nand credits appropriately:\n\n- The NEWS file should mention the change and your credits.\n- The README and README.OSX files should be updated whenever functionality\n  is added or modified.\n- The manpage man/faketime.1 should be updated when the wrapper application\n  is modified.\n\nFor credits, please either mention your real name, your Github username, or\nyour email address.\n\nIn your own interest, please be verbose on user documentation and comments\nin the source code. Users will not know about new features unless they are\ndocumented. Other authors and maintainers will need to understand your code\neasily.\n\n\nRELEASES\n========\n\nOfficial new releases are created whenever a significant amount of changes\n(bugfixes or new functionality) has piled up; on average, there is one new\nofficial release per 1-2 years. Users who need to stick to the bleeding edge\nare supposed to use the current state of the \"master\" branch at any time.\n\nlibfaketime maintainers for several Linux distributions are informed about\nrelease candidates and new releases by email. Contact wolfcw on Github if\nyou are interested in receiving notifications, or use Github functionality\nto get informed about updates.\n"
        },
        {
          "name": "README.packagers",
          "type": "blob",
          "size": 2.7294921875,
          "content": "README for packagers of libfaketime\n\nFirst, thank you for your efforts to make libfaketime packages available\non your platform / distribution!\n\nlibfaketime has tagged releases about once every 1-2 years, made available\nthrough github.com/wolfcw/libfaketime, but usually it is also safe (i.e.,\nstable) to use the latest HEAD of the master branch, which contains bug\nfixes since the last tagged release.\n\nYou may want to familiarize yourself with the options you can set into\nsrc/Makefile, but sane defaults for stable operations have been chosen.\n\nCurrently, libfaketime does not use autotools yet, so there is\n_no_ ./configure step, but \"make\" and \"make test\" will work as expected.\n\nFor \"make test\", an optional environment variable FAKETIME_TESTLIB can\nbe set, pointing to the path and filename of the libfaketime library\nto be used for tests; the default is \"../src/libfaketime.so.1\".\n\n\nHowever, one problem makes it somewhat difficult to get libfaketime\nworking on different platforms:\n\nlibfaketime currently has the challenge that depending on the version\nof glibc and the platform (e.g., x86_64 or aarch64) certain compiler\nCFLAGS have to be set manually, as we have not yet found a way to\nsafely determine behavior at run-time automatically.\n\nPlease proceed as follows:\n\n- run \"make test\". If everything runs through smoothly and you do not\n  encounter any hangs or test failure reports, use the binaries as\n  they are.\n\n- If you encounter endless hangs during the CLOCK_REALTIME test,\n  add -DFORCE_PTHREAD_NONVER to the CFLAGS.\n\n- If you encounter endless hangs during the CLOCK_MONOTONIC test,\n  add -DFORCE_MONOTONIC_FIX to the CFLAGS. If it works with that,\n  it's fine, otherwise additionally use -DFORCE_PTHREAD_NONVER.\n\nCFLAGS can also be passed through the FAKETIME_COMPILE_CFLAGS environment\nvariable, so for example\n\n  FAKETIME_COMPILE_CFLAGS=\"-DFORCE_PTHREAD_NONVER\" make test\n\nwould create the libfaketime binaries and run the tests with the\nFORCE_PTHREAD_NONVER flag set in a single step. Likewise there is\nFAKETIME_LINK_FLAGS.\n\nPlease do not use FORCE_MONOTONIC_FIX by default, as it would result\nin incorrect operations on platforms that do not need it.\n\nOur observations with a limited number of Linux distributions is that\nlibfaketime may require different compile flags per platform even\nif the same distribution and glibc version is used across these\nplatforms.\n\nAs soon as we have found a reliable way to automatically choose the\ncorrect compile-time flags, we will remove this burden from you as\npackager for obvious reasons. Until then, please feel free to report\nyour experiences with different platforms and distribution versions\nthrough the issue tracker on Github.\n\nAgain, thanks for your time and effort to make libfaketime available\neasily for everyone else!\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.6015625,
          "content": "Open issues / next steps for libfaketime development:\n\nPlease see the issue tracker on Github - https://github.com/wolfcw/libfaketime\n\n- New features, such as additional system calls to intercept, are labelled\n  \"feature request\" when they are considered for implementation\n\n- Issues labelled \"help wanted\" should be your starting point if you are\n  interested in contributing to libfaketime\n\nBesides the open issues, two major changes are planned for the next release:\n\n- integrate manchicken's autoconf/automake support to get rid of separate Makefile.OSX\n\n- use the testing framework to also implement unit tests\n"
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}