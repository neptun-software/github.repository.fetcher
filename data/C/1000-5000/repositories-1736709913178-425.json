{
  "metadata": {
    "timestamp": 1736709913178,
    "page": 425,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zigzap/zap",
      "stars": 2544,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1962890625,
          "content": "zig-out/\nzig-cache/\n*.tar.gz\nflake.lock.bak\ntmp/\n**/target/*\n**/__pycache__/*\nwrk/go/main\nwrk/csharp/bin/\nwrk/csharp/obj/\nwrk/csharp/out/\nscratch\n**/.mypy_cache/*\n.DS_Store\n.vs/\n**/*.perflog\nwrk/*.png\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.228515625,
          "content": "# Contributing to ZAP\n\nContributions are welcome! üôè\n\n## Communicating\n\nWe now have a discord server! [Join here](https://discord.gg/jQAAN6Ubyj))!\n\nPull-requests and issues are, of course, welcome, too - as are GitHub\ndiscussions.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2023 Rene Schallner\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.2509765625,
          "content": "# ‚ö°zap‚ö° - blazingly fast backends in zig\n\n![](https://github.com/zigzap/zap/actions/workflows/build-current-zig.yml/badge.svg) ![](https://github.com/zigzap/zap/actions/workflows/mastercheck.yml/badge.svg) [![Discord](https://img.shields.io/discord/1107835896356675706?label=chat&logo=discord&style=plastic)](https://discord.gg/jQAAN6Ubyj)\n\nZap is the [zig](https://ziglang.org) replacement for the REST APIs I used to\nwrite in [python](https://python.org) with\n[Flask](https://flask.palletsprojects.com) and\n[mongodb](https://www.mongodb.com), etc. It can be considered to be a\nmicroframework for web applications.\n\nWhat I needed as a replacement was a blazingly fast and robust HTTP server that\nI could use with Zig, and I chose to wrap the superb evented networking C\nlibrary [facil.io](https://facil.io). Zap wraps and patches [facil.io - the C\nweb application framework](https://facil.io).\n\n## **‚ö°ZAP‚ö° IS FAST, ROBUST, AND STABLE**\n\n\nAfter having used ZAP in production for a year, I can confidently assert that it\nproved to be:\n\n- ‚ö° **blazingly fast** ‚ö°\n- üí™ **extremely robust** üí™\n\nExactly the goals I set out to achieve!\n\n## FAQ:\n\n- Q: **What version of Zig does Zap support?**\n    - Zap uses the latest stable zig release (0.13.0), so you don't have to keep \n      up with frequent breaking changes. It's an \"LTS feature\". \n- Q: **Can Zap build with Zig's master branch?**\n    - See the `zig-master` branch. An example of how to use it is \n      [here](https://github.com/zigzap/hello-master). Please note that the \n      zig-master branch is not the official master branch of ZAP. Be aware that \n      I don't provide `build.zig.zon` snippets or tagged releases for it for\n      the time being. If you know what you are doing, that shouldn't stop you\n      from using it with zig master though.\n- Q: **Where is the API documentation?**\n    - Docs are a work in progress. You can check them out\n      [here](https://zigzap.org/zap).\n    - Run `zig build run-docserver` to serve them locally.\n- Q: **Does ZAP work on Windows?**\n    - No. This is due to the underlying facil.io C library. Future versions\n      of facil.io might support Windows but there is no timeline yet. Your best\n      options on Windows are WSL2 or a docker container.\n- Q: **Does ZAP support TLS / HTTPS?**\n    - Yes, ZAP supports using the system's openssl. See the\n      [https](./examples/https/https.zig) example and make sure to build with\n      the `-Dopenssl` flag or the environment variable `ZAP_USE_OPENSSL=true`:\n      - `.openssl = true,` (in dependent projects' build.zig,\n        `b.dependency(\"zap\" .{...})`)\n      - `ZAP_USE_OPENSSL=true zig build https`\n      - `zig build -Dopenssl=true https`\n\n## Here's what works\n\nI recommend checking out **Endpoint-based examples for more realistic\nuse cases**. Most of the examples are super stripped down to only include\nwhat's necessary to show a feature.\n\n**NOTE: To see API docs, run `zig build run-docserver`.** To specify a custom\nport and docs dir: `zig build docserver && zig-out/bin/docserver --port=8989\n--docs=path/to/docs`.\n\n- **Super easy build process**: Zap's `build.zig` now uses the new Zig package\n  manager for its C-dependencies, no git submodules anymore.\n  - _tested on Linux and macOS (arm, M1)_\n- **[hello](examples/hello/hello.zig)**: welcomes you with some static HTML\n- **[routes](examples/routes/routes.zig)**: a super easy example dispatching on\n  the HTTP path. **NOTE**: The dispatch in the example is a super-basic\n  DIY-style dispatch. See endpoint-based examples for more realistic use cases.\n- **[serve](examples/serve/serve.zig)**: the traditional static web server with\n  optional dynamic request handling\n- **[sendfile](examples/sendfile/sendfile.zig)**: simple example of how to send\n  a file, honoring compression headers, etc.\n- **[bindataformpost](examples/bindataformpost/bindataformpost.zig)**: example\n  to receive binary files via form post.\n- **[hello_json](examples/hello_json/hello_json.zig)**: serves you json\n  dependent on HTTP path\n- **[endpoint](examples/endpoint/)**: a simple JSON REST API example featuring a\n  `/users` endpoint for performing PUT/DELETE/GET/POST operations and listing\n  users, together with a simple frontend to play with. **It also introduces a\n  `/stop` endpoint** that shuts down Zap, so **memory leak detection** can be\n  performed in main().\n    - Check out how [main.zig](examples/endpoint/main.zig) uses ZIG's awesome\n      `GeneralPurposeAllocator` to report memory leaks when ZAP is shut down.\n      The [StopEndpoint](examples/endpoint/stopendpoint.zig) just stops ZAP when\n      receiving a request on the `/stop` route.\n- **[mustache](examples/mustache/mustache.zig)**: a simple example using\n  [mustache](https://mustache.github.io/) templating.\n- **[endpoint authentication](examples/endpoint_auth/endpoint_auth.zig)**: a\n  simple authenticated endpoint. Read more about authentication\n  [here](./doc/authentication.md).\n- **[http parameters](examples/http_params/http_params.zig)**: a simple example\n  sending itself query parameters of all supported types.\n- **[cookies](examples/cookies/cookies.zig)**: a simple example sending itself a\n  cookie and responding with a session cookie.\n- **[websockets](examples/websockets/)**: a simple websockets chat for the\n  browser.\n- **[Username/Password Session\n  Authentication](./examples/userpass_session_auth/)**: A convenience\n  authenticator that redirects un-authenticated requests to a login page and\n  sends cookies containing session tokens based on username/password pairs\n  received via POST request.\n- **[MIDDLEWARE support](examples/middleware/middleware.zig)**: chain together\n  request handlers in middleware style. Provide custom context structs, totally\n  type-safe, using **[ZIG-CEPTION](doc/zig-ception.md)**. If you come from GO\n  this might appeal to you.\n- **[MIDDLEWARE with endpoint\n  support](examples/middleware_with_endpoint/middleware_with_endpoint.zig)**:\n  Same as the example above, but this time we use an endpoint at the end of the\n  chain, by wrapping it via `zap.Middleware.EndpointHandler`. Mixing endpoints\n  in your middleware chain allows for usage of Zap's authenticated endpoints and\n  your custom endpoints. Since Endpoints use a simpler API, you have to use\n  `r.setUserContext()` and `r.getUserContext()` with the request if you want to\n  access the middleware context from a wrapped endpoint. Since this mechanism\n  uses an `*anyopaque` pointer underneath (to not break the Endpoint API), it is\n  less type-safe than `zap.Middleware`'s use of contexts.\n- [**Per Request Contexts**](./src/zap.zig#L102) : With the introduction of\n  `setUserContext()` and `getUserContext()`, you can, of course use those two in\n  projects that don't use `zap.Endpoint` or `zap.Middleware`, too, if you\n  really, really, absolutely don't find another way to solve your context\n  problem. **We recommend using a `zap.Endpoint`** inside of a struct that\n  can provide all the context you need **instead**. You get access to your\n  struct in the callbacks via the `@fieldParentPtr()` trick that is used\n  extensively in Zap's examples, like the [endpoint\n  example](examples/endpoint/endpoint.zig).\n- [**Error Trace Responses**](./examples/senderror/senderror.zig): You can now\n  call `r.sendError(err, status_code)` when you catch an error and a stack trace\n  will be returned to the client / browser.\n- [**HTTPS**](examples/https/https.zig): Shows how easy it is to use facil.io's\n  openssl support. Must be compiled with `-Dopenssl=true` or the environment\n  variable `ZAP_USE_OPENSSL` set to `true` and requires openssl dev dependencies\n  (headers, lib) to be installed on the system.\n  - run it like this: `ZAP_USE_OPENSSL=true zig build run-https`\n    OR like this: `zig build -Dopenssl=true run-https`\n  - it will tell you how to generate certificates\n- [**simple_router**](examples/simple_router/simple_router.zig): See how you\n  can use `zap.Router` to dispatch to handlers by HTTP path.\n\nI'll continue wrapping more of facil.io's functionality and adding stuff to zap\nto a point where I can use it as the JSON REST API backend for real research\nprojects, serving thousands of concurrent clients.\n\n\n## ‚ö°blazingly fast‚ö°\n\nClaiming to be blazingly fast is the new black. At least, Zap doesn't slow you\ndown and if your server performs poorly, it's probably not exactly Zap's fault.\nZap relies on the [facil.io](https://facil.io) framework and so it can't really\nclaim any performance fame for itself. In this initial implementation of Zap,\nI didn't care about optimizations at all.\n\nBut, how fast is it? Being blazingly fast is relative. When compared with a\nsimple GO HTTP server, a simple Zig Zap HTTP server performed really good on my\nmachine (x86_64-linux):\n\n- Zig Zap was nearly 30% faster than GO\n- Zig Zap had over 50% more throughput than GO\n\n**Update**: Thanks to @felipetrz, I got to test against more realistic Python\nand Rust examples. Both python `sanic` and rust `axum` were easy enough to\nintegrate.\n\n**Update**: I have automated the benchmarks. See\n[blazingly-fast.md](./blazingly-fast.md) for more information. Also, thanks to\n@alexpyattaev, the benchmarks are fairer now, pinning server and client to\nspecific CPU cores.\n\n**Update**: I have consolidated the benchmarks to one good representative per\nlanguage. See more details in [blazingly-fast.md](./blazingly-fast.md). It\ncontains rust implementations that come pretty close to Zap's performance in the\nsimplistic testing scenario.\n\n![](./wrk/samples/README_req_per_sec.png)\n\n![](./wrk/samples/README_xfer_per_sec.png)\n\n\nSo, being somewhere in the ballpark of basic GO performance, zig zap seems to be\n... of reasonable performance üòé.\n\nI can rest my case that developing ZAP was a good idea because it's faster than\nboth alternatives: a) staying with Python, and b) creating a GO + Zig hybrid.\n\nSee more details in [blazingly-fast.md](blazingly-fast.md).\n\n## üí™ Robust\n\nZAP is **very robust**. In fact, it is so robust that I was confidently able to\nonly work with in-memory data (RAM) in all my ZAP projects so far: over 5 large\nonline research experiments. No database, no file persistence, until I hit\n\"save\" at the end üòä.\n\nSo I was able to postpone my cunning data persistence strategy that's similar to\na mark-and-sweep garbage collector and would only persist \"dirty\" data when\ntraffic is low, in favor of getting stuff online more quickly. But even if\nimplemented, such a persistence strategy is risky because when traffic is not\nlow, it means the system is under (heavy) load. Would you confidently NOT save\ndata when load is high and the data changes most frequently -> the potential\ndata loss is maximized?\n\nTo answer that question, I just skipped it. I skipped saving any data until\nreceiving a \"save\" signal via API. And it worked. ZAP just kept on zapping. When\ntraffic calmed down or all experiment participants had finished, I hit \"save\"\nand went on analyzing the data.\n\nHandling all errors does pay off after all. No hidden control flow, no hidden\nerrors or exceptions is one of Zig's strengths.\n\nTo be honest: There are still pitfalls. E.g. if you request large stack sizes\nfor worker threads, Zig won't like that and panic. So make sure you don't have\nlocal variables that require tens of megabytes of stack space.\n\n\n### üõ°Ô∏è Memory-safe\n\nSee the [StopEndpoint](examples/endpoint/stopendpoint.zig) in the\n[endpoint](examples/endpoint) example. That example uses ZIG's awesome\n`GeneralPurposeAllocator` to report memory leaks when ZAP is shut down. The\n`StopEndpoint` just stops ZAP when receiving a request on the `/stop` route.\n\nYou can use the same strategy in your debug builds and tests to check if your\ncode leaks memory.\n\n\n\n## Getting started\n\nMake sure you have **zig 0.13.0** installed. Fetch it from\n[here](https://ziglang.org/download).\n\n```shell\n$ git clone https://github.com/zigzap/zap.git\n$ cd zap\n$ zig build run-hello\n$ # open http://localhost:3000 in your browser\n```\n\n... and open [http://localhost:3000](http://localhost:3000) in your browser.\n\n## Using ‚ö°zap‚ö° in your own projects\n\nMake sure you have **the latest zig release (0.13.0)** installed. Fetch it from\n[here](https://ziglang.org/download).\n\nIf you don't have an existing zig project, create one like this:\n\n```shell\n$ mkdir zaptest && cd zaptest\n$ zig init\n$ git init      ## (optional)\n```\n**Note**: Nix/NixOS users are lucky; you can use the existing `flake.nix` and run\n`nix develop` to get a development shell providing zig and all\ndependencies to build and run the GO, python, and rust examples for the\n`wrk` performance tests. For the mere building of zap projects,\n`nix develop .#build` will only fetch zig 0.11.0. TODO: upgrade to latest zig.\n\nWith an existing Zig project, adding Zap to it is easy:\n\n1. Add zap to your `build.zig.zon`\n2. Add zap to your `build.zig`\n\nIn your zig project folder (where `build.zig` is located), run:\n\n<!-- INSERT_DEP_BEGIN -->\n```\nzig fetch --save \"git+https://github.com/zigzap/zap#v0.9.1\"\n```\n<!-- INSERT_DEP_END -->\n\nThen, in your `build.zig`'s `build` function, add the following before\n`b.installArtifact(exe)`:\n\n```zig\n    const zap = b.dependency(\"zap\", .{\n        .target = target,\n        .optimize = optimize,\n        .openssl = false, // set to true to enable TLS support\n    });\n\n    exe.root_module.addImport(\"zap\", zap.module(\"zap\"));\n```\n\nFrom then on, you can use the Zap package in your project. Check out the\nexamples to see how to use Zap.\n\n## Updating your project to the latest version of zap\n\nYou can change the URL to Zap in your `build.zig.zon`\n\n- easiest: use a tagged release\n- or to one of the tagged versions, e.g. `0.0.9`\n- or to the latest commit of `zap`\n\n### Using a tagged release\n\nGo to the [release page](https://github.com/zigzap/zap/releases). Every release\nwill state its version number and also provide instructions for changing\n`build.zig.zon` and `build.zig`.\n\n### Using other versions\n\nSee [here](./doc/other-versions.md).\n\n## Contribute to ‚ö°zap‚ö° - blazingly fast\n\nAt the current time, I can only add to zap what I need for my personal and\nprofessional projects. While this happens **blazingly fast**, some if not all\nnice-to-have additions will have to wait. You are very welcome to help make the\nworld a blazingly fast place by providing patches or pull requests, add\ndocumentation or examples, or interesting issues and bug reports - you'll know\nwhat to do when you receive your calling üëº.\n\nCheck out [CONTRIBUTING.md](CONTRIBUTING.md) for more details.\n\nSee also [introducing.md](introducing.md) for more on the state and progress of\nthis project.\n\n**We now have our own [ZAP discord](https://discord.gg/jQAAN6Ubyj) server!!!**\n\nYou can also reach me on [the zig showtime discord\nserver](https://discord.gg/CBzE3VMb) under the handle renerocksai\n(renerocksai#1894).\n\n## Support ‚ö°zap‚ö°\n\nBeing blazingly fast requires a constant feed of caffeine. I usually manage to\nprovide that to myself for myself. However, to support keeping the juices\nflowing and putting a smile on my face and that warm and cozy feeling into my\nheart, you can always [buy me a coffee](https://buymeacoffee.com/renerocksai)\n‚òï. All donations are welcomed üôè blazingly fast! That being said, just saying\n\"hi\" also works wonders with the smiles, warmth, and coziness üòä.\n\n## Examples\n\nYou build and run the examples via:\n\n```shell\n$ zig build [EXAMPLE]\n$ ./zig-out/bin/[EXAMPLE]\n```\n\n... where `[EXAMPLE]` is one of `hello`, `routes`, `serve`, ... see the [list of\nexamples above](#heres-what-works).\n\nExample: building and running the hello example:\n\n```shell\n$ zig build hello\n$ ./zig-out/bin/hello\n```\n\nTo just run an example, like `routes`, without generating an executable, run:\n\n```shell\n$ zig build run-[EXAMPLE]\n```\n\nExample: building and running the routes example:\n\n```shell\n$ zig build run-routes\n```\n\n### [hello](examples/hello/hello.zig)\n\n```zig\nconst std = @import(\"std\");\nconst zap = @import(\"zap\");\n\nfn on_request(r: zap.Request) void {\n    if (r.path) |the_path| {\n        std.debug.print(\"PATH: {s}\\n\", .{the_path});\n    }\n\n    if (r.query) |the_query| {\n        std.debug.print(\"QUERY: {s}\\n\", .{the_query});\n    }\n    r.sendBody(\"<html><body><h1>Hello from ZAP!!!</h1></body></html>\") catch return;\n}\n\npub fn main() !void {\n    var listener = zap.HttpListener.init(.{\n        .port = 3000,\n        .on_request = on_request,\n        .log = true,\n    });\n    try listener.listen();\n\n    std.debug.print(\"Listening on 0.0.0.0:3000\\n\", .{});\n\n    // start worker threads\n    zap.start(.{\n        .threads = 2,\n        .workers = 2,\n    });\n}\n```\n\n\n\n\n"
        },
        {
          "name": "blazingly-fast.md",
          "type": "blob",
          "size": 14.201171875,
          "content": "# ‚ö°blazingly fast‚ö°\n\nInitially, I conducted a series of quick tests, using wrk with simple HTTP\nservers written in GO and in zig zap. I made sure that all servers only output\n17 bytes of HTTP body.\n\nJust to get some sort of indication, I also included measurements for python\nsince I used to write my REST APIs in python before creating zig zap.\n\nYou can check out the scripts I used for the tests in [./wrk](wrk/).\n\n## Why \n\nI aimed to enhance the performance of my Python + Flask backends by replacing\nthem with a Zig version. To evaluate the success of this transition, I compared\nthe performance of a static HTTP server implemented in Python and its Zig\ncounterpart, which showed significant improvements. \n\nTo further assess the Zig server's performance, I compared it with a Go\nimplementation, to compare against a widely used industry-standard. I expected\nsimilar performance levels but was pleasantly surprised when Zap outperformed Go\nby approximately 30% on my test machine. \n\nIntrigued by Rust's reputed performance capabilities, I also experimented with a\nRust version. The results of this experiment are discussed in the\n[Flaws](#flaws) section below.\n\n## What \n\nSo, what are the benchmarks testing?\n\n- simple http servers that reply to GET requests with a constant, 17-bytes long response\n- 4 cores are assigned to the subject under test (the respective server)\n- 4 cores are assigned to `wrk`\n    - using 4 threads\n    - aiming at 400 concurrent connections\n\n## How\n\nI have fully automated the benchmarks and graph generation.\n\nTo generate the data:\n\n```console\n$ ./wrk/measure_all.sh\n```\n\nTo generate the graphs:\n\n```console\n$ python wrk/graph.py\n```\n\nFor dependencies, please see the [flake.nix](./flake.nix#L46).\n\n## Flaws\n\nThe benchmarks have limitations, such as the lack of request latencies. The Rust\ncommunity has often criticized these benchmarks as biased. However, no such\ncriticisms have come from the Go or Python communities.\n\nIn response to the Rust community's concerns, we've added three Rust\nimplementations for comparison:\n\n- A standard version from [the Rust book](https://doc.rust-lang.org/book/ch20-00-final-project-a-web-server.html).\n- An \"axum\" version to highlight Rust's speed.\n- A refined version of the Rust book version.\n\nOriginally, the goal was to compare \"batteries included\" versions, which created\na disparity by comparing the optimized zap / facil.io code with basic bundled\nfunctionalities. These tests were for personal interest and not meant to be\ndefinitive benchmarks.\n\nTo address this bias, we've added the Rust-axum and Python-sanic benchmarks. For\nmore information, refer to the relevant discussions and pull requests.\n\n\n## More benchmarks?\n\nI often receive requests or PRs to include additional benchmarks, which a lot of\ntimes I find to be either ego-driven or a cause for unnecessary disputes. People\ntend to favor their preferred language or framework. Zig, Rust, C, and C++ are\nall capable of efficiently creating fast web servers, with different frameworks\npotentially excelling in certain benchmarks. My main concern was whether Zap,\ngiven its current level of abstraction, could compete with standard web servers.\nThis question has been answered, and I see no need for further benchmarks.\n\nSo far, we have the following benchmark subjects (implementations) which you'll\nfind in the graphs below:\n\n- **zig-zap** : ZAP implementation\n- **go** : GO implementation\n- **python** : Python implementation\n- **python-sanic** : Python implementation with sanic framework\n- **rust-bythebook** : Rust example from the Rust book (not representative)\n- **rust-bythebook-improved** : Improved version of the by-the-book code (thx @alexpyattaev)\n- **rust-clean** : A clean, straight-forward Rust implementation (thx @alexpyattaev)\n- **rust-axum** : Rust implementation using the axum framework (realistic)\n- **(csharp)** : CSharp implementation (thx @leo-costa)\n- **cpp-beast** : A C++ implementation using boost::beast (thx @kassane)\n\n\n## The computer makes the difference\n\nAfter automating the performance benchmarks, I gathered data from three\ndifferent computers. It's interesting to see the variation in relative numbers.\n\n\n### The test machine (graphs in the README)\n\n![](./wrk/samples/req_per_sec_graph.png)\n\n![](./wrk/samples/xfer_per_sec_graph.png)\n\n```\n‚ûú neofetch --stdout\nrs@ryzen \n-------- \nOS: NixOS 23.05.997.ddf4688dc7a (Stoat) x86_64 \nHost: Micro-Star International Co., Ltd. B550-A PRO (MS-7C56) \nKernel: 6.3.7 \nUptime: 15 days, 11 hours, 13 mins \nPackages: 2094 (nix-system), 1356 (nix-user), 7 (flatpak) \nShell: bash 5.2.15 \nResolution: 3840x2160 \nDE: none+i3 \nWM: i3 \nTerminal: tmux \nCPU: AMD Ryzen 5 5600X (12) @ 3.700GHz \nGPU: AMD ATI Radeon RX 6700/6700 XT/6750 XT / 6800M/6850M XT \nMemory: 4981MiB / 32028MiB \n\n\n‚ûú lscpu\nArchitecture:            x86_64\n  CPU op-mode(s):        32-bit, 64-bit\n  Address sizes:         48 bits physical, 48 bits virtual\n  Byte Order:            Little Endian\nCPU(s):                  12\n  On-line CPU(s) list:   0-11\nVendor ID:               AuthenticAMD\n  Model name:            AMD Ryzen 5 5600X 6-Core Processor\n    CPU family:          25\n    Model:               33\n    Thread(s) per core:  2\n    Core(s) per socket:  6\n    Socket(s):           1\n    Stepping:            0\n    Frequency boost:     enabled\n    CPU(s) scaling MHz:  67%\n    CPU max MHz:         4650.2920\n    CPU min MHz:         2200.0000\n    BogoMIPS:            7399.43\n    Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt \n                         pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf rapl pni pclmulqdq monitor ssse3 fma cx16 \n                         sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefet\n                         ch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 hw_pstate ssbd mba ibrs ib\n                         pb stibp vmmcall fsgsbase bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xget\n                         bv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr rdpru wbnoinvd arat npt lbrv svm_lock nrip\n                         _save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold avic v_vmsave_vmload vgif v_spec_ctrl umip pku ospk\n                         e vaes vpclmulqdq rdpid overflow_recov succor smca fsrm\nVirtualization features: \n  Virtualization:        AMD-V\nCaches (sum of all):     \n  L1d:                   192 KiB (6 instances)\n  L1i:                   192 KiB (6 instances)\n  L2:                    3 MiB (6 instances)\n  L3:                    32 MiB (1 instance)\nNUMA:                    \n  NUMA node(s):          1\n  NUMA node0 CPU(s):     0-11\nVulnerabilities:         \n  Itlb multihit:         Not affected\n  L1tf:                  Not affected\n  Mds:                   Not affected\n  Meltdown:              Not affected\n  Mmio stale data:       Not affected\n  Retbleed:              Not affected\n  Spec store bypass:     Mitigation; Speculative Store Bypass disabled via prctl\n  Spectre v1:            Mitigation; usercopy/swapgs barriers and __user pointer sanitization\n  Spectre v2:            Mitigation; Retpolines, IBPB conditional, IBRS_FW, STIBP always-on, RSB filling, PBRSB-eIBRS Not affected\n  Srbds:                 Not affected\n  Tsx async abort:       Not affected\n```\n\n### Workstation at work\n\nA beast. Many cores (which we don't use). \n\n![](./wrk/samples/workstation_req_per_sec_graph.png)\n\n![](./wrk/samples/workstation_xfer_per_sec_graph.png)\n\n```\n[rene@nixos:~]$ neofetch --stdout\nrene@nixos \n---------- \nOS: NixOS 23.05.2947.475d5ae2c4cb (Stoat) x86_64 \nHost: LENOVO 1038 \nKernel: 6.1.46 \nUptime: 26 mins \nPackages: 5804 (nix-system), 566 (nix-user) \nShell: bash 5.2.15 \nTerminal: /dev/pts/2 \nCPU: Intel Xeon Gold 5218 (64) @ 3.900GHz \nGPU: NVIDIA Quadro P620 \nGPU: NVIDIA Tesla M40 \nMemory: 1610MiB / 95247MiB \n\n\n[rene@nixos:~]$ lscpu\nArchitecture:            x86_64\n  CPU op-mode(s):        32-bit, 64-bit\n  Address sizes:         46 bits physical, 48 bits virtual\n  Byte Order:            Little Endian\nCPU(s):                  64\n  On-line CPU(s) list:   0-63\nVendor ID:               GenuineIntel\n  Model name:            Intel(R) Xeon(R) Gold 5218 CPU @ 2.30GHz\n    CPU family:          6\n    Model:               85\n    Thread(s) per core:  2\n    Core(s) per socket:  16\n    Socket(s):           2\n    Stepping:            7\n    CPU(s) scaling MHz:  57%\n    CPU max MHz:         3900,0000\n    CPU min MHz:         1000,0000\n    BogoMIPS:            4600,00\n    Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs b\n                         ts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_\n                         deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single intel_ppin ssbd mba ibrs ibpb stibp ibrs_enhanced tpr_shadow vnmi flexpri\n                         ority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm mpx rdt_a avx512f avx512dq rdseed adx smap clflushopt clwb intel_pt avx512cd avx512bw avx512vl xsaveopt xs\n                         avec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts hwp hwp_act_window hwp_epp hwp_pkg_req pku ospke avx512_vnni md_clear flush_l1d arch_capabi\n                         lities\nVirtualization features: \n  Virtualization:        VT-x\nCaches (sum of all):     \n  L1d:                   1 MiB (32 instances)\n  L1i:                   1 MiB (32 instances)\n  L2:                    32 MiB (32 instances)\n  L3:                    44 MiB (2 instances)\nNUMA:                    \n  NUMA node(s):          2\n  NUMA node0 CPU(s):     0-15,32-47\n  NUMA node1 CPU(s):     16-31,48-63\nVulnerabilities:         \n  Gather data sampling:  Mitigation; Microcode\n  Itlb multihit:         KVM: Mitigation: VMX disabled\n  L1tf:                  Not affected\n  Mds:                   Not affected\n  Meltdown:              Not affected\n  Mmio stale data:       Mitigation; Clear CPU buffers; SMT vulnerable\n  Retbleed:              Mitigation; Enhanced IBRS\n  Spec rstack overflow:  Not affected\n  Spec store bypass:     Mitigation; Speculative Store Bypass disabled via prctl\n  Spectre v1:            Mitigation; usercopy/swapgs barriers and __user pointer sanitization\n  Spectre v2:            Mitigation; Enhanced IBRS, IBPB conditional, RSB filling, PBRSB-eIBRS SW sequence\n  Srbds:                 Not affected\n  Tsx async abort:       Mitigation; TSX disabled\n```\n\n\n### Work Laptop\n\nVery strange. It absolutely **LOVES** zap ü§£!\n\n![](./wrk/samples/laptop_req_per_sec_graph.png)\n\n![](./wrk/samples/laptop_xfer_per_sec_graph.png)\n\n```\n‚ûú neofetch --stdout\nrs@nixos\n--------\nOS: NixOS 23.05.2918.4cdad15f34e6 (Stoat) x86_64\nHost: LENOVO 20TKS0W700\nKernel: 6.1.45\nUptime: 1 day, 4 hours, 50 mins\nPackages: 6259 (nix-system), 267 (nix-user), 9 (flatpak)\nShell: bash 5.2.15\nResolution: 3840x1600, 3840x2160\nDE: none+i3\nWM: i3\nTerminal: tmux\nCPU: Intel i9-10885H (16) @ 5.300GHz\nGPU: NVIDIA GeForce GTX 1650 Ti Mobile\nMemory: 4525MiB / 31805MiB\n\n\n‚ûú lscpu\nArchitecture:                       x86_64\nCPU op-mode(s):                     32-bit, 64-bit\nAddress sizes:                      39 bits physical, 48 bits virtual\nByte Order:                         Little Endian\nCPU(s):                             16\nOn-line CPU(s) list:                0-15\nVendor ID:                          GenuineIntel\nModel name:                         Intel(R) Core(TM) i9-10885H CPU @ 2.40GHz\nCPU family:                         6\nModel:                              165\nThread(s) per core:                 2\nCore(s) per socket:                 8\nSocket(s):                          1\nStepping:                           2\nCPU(s) scaling MHz:                 56%\nCPU max MHz:                        5300.0000\nCPU min MHz:                        800.0000\nBogoMIPS:                           4800.00\nFlags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust sgx bmi1 avx2 smep bmi2 erms invpcid mpx rdseed adx smap clflushopt intel_pt xsaveopt xsavec xgetbv1 xsaves dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp pku ospke sgx_lc md_clear flush_l1d arch_capabilities\nVirtualization:                     VT-x\nL1d cache:                          256 KiB (8 instances)\nL1i cache:                          256 KiB (8 instances)\nL2 cache:                           2 MiB (8 instances)\nL3 cache:                           16 MiB (1 instance)\nNUMA node(s):                       1\nNUMA node0 CPU(s):                  0-15\nVulnerability Gather data sampling: Mitigation; Microcode\nVulnerability Itlb multihit:        KVM: Mitigation: VMX disabled\nVulnerability L1tf:                 Not affected\nVulnerability Mds:                  Not affected\nVulnerability Meltdown:             Not affected\nVulnerability Mmio stale data:      Mitigation; Clear CPU buffers; SMT vulnerable\nVulnerability Retbleed:             Mitigation; Enhanced IBRS\nVulnerability Spec rstack overflow: Not affected\nVulnerability Spec store bypass:    Mitigation; Speculative Store Bypass disabled via prctl\nVulnerability Spectre v1:           Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:           Mitigation; Enhanced IBRS, IBPB conditional, RSB filling, PBRSB-eIBRS SW sequence\nVulnerability Srbds:                Mitigation; Microcode\nVulnerability Tsx async abort:      Not affected\n```\n\n"
        },
        {
          "name": "build.zig",
          "type": "blob",
          "size": 10.5380859375,
          "content": "const std = @import(\"std\");\nconst build_facilio = @import(\"facil.io/build.zig\").build_facilio;\n\npub fn build(b: *std.Build) !void {\n    const target = b.standardTargetOptions(.{});\n    if (target.result.os.tag == .windows) {\n        std.log.err(\"\\x1b[31mPlatform Not Supported\\x1b[0m\\nCurrently, Facil.io and Zap are not compatible with Windows. Consider using Linux or Windows Subsystem for Linux (WSL) instead.\\nFor more information, please see:\\n- https://github.com/zigzap/zap#most-faq\\n- https://facil.io/#forking-contributing-and-all-that-jazz\\n\", .{});\n        std.process.exit(1);\n    }\n    // Standard release options allow the person running `zig build` to select\n    // between Debug, ReleaseSafe, ReleaseFast, and ReleaseSmall.\n    const optimize = b.standardOptimizeOption(.{});\n\n    const use_openssl = b.option(bool, \"openssl\", \"Use system-installed openssl for TLS support in zap\") orelse blk: {\n        // Alternatively, use an os env var to determine whether to build openssl support\n        if (std.process.getEnvVarOwned(b.allocator, \"ZAP_USE_OPENSSL\")) |val| {\n            defer b.allocator.free(val);\n            if (std.mem.eql(u8, val, \"true\")) break :blk true;\n        } else |_| {}\n        break :blk false;\n    };\n\n    const facilio = try build_facilio(\"facil.io\", b, target, optimize, use_openssl);\n\n    const zap_module = b.addModule(\"zap\", .{\n        .root_source_file = b.path(\"src/zap.zig\"),\n        .target = target,\n        .optimize = optimize,\n    });\n    zap_module.linkLibrary(facilio);\n\n    const all_step = b.step(\"all\", \"build all examples\");\n\n    // -- Docs\n    const docs_obj = b.addObject(.{\n        .name = \"zap\", // name doesn't seem to matter\n        .root_source_file = b.path(\"src/zap.zig\"),\n        .target = target,\n        .optimize = .Debug,\n    });\n    const install_docs = b.addInstallDirectory(.{\n        .install_dir = .prefix,\n        .install_subdir = \"zap\", // will also be the main namespace in the docs\n        .source_dir = docs_obj.getEmittedDocs(),\n    });\n    b.step(\"docs\", \"Build docs\").dependOn(&install_docs.step);\n    // --\n\n    inline for ([_]struct {\n        name: []const u8,\n        src: []const u8,\n    }{\n        .{ .name = \"hello\", .src = \"examples/hello/hello.zig\" },\n        .{ .name = \"https\", .src = \"examples/https/https.zig\" },\n        .{ .name = \"hello2\", .src = \"examples/hello2/hello2.zig\" },\n        .{ .name = \"simple_router\", .src = \"examples/simple_router/simple_router.zig\" },\n        .{ .name = \"routes\", .src = \"examples/routes/routes.zig\" },\n        .{ .name = \"serve\", .src = \"examples/serve/serve.zig\" },\n        .{ .name = \"hello_json\", .src = \"examples/hello_json/hello_json.zig\" },\n        .{ .name = \"endpoint\", .src = \"examples/endpoint/main.zig\" },\n        .{ .name = \"wrk\", .src = \"wrk/zig/main.zig\" },\n        .{ .name = \"wrk_zigstd\", .src = \"wrk/zigstd/main.zig\" },\n        .{ .name = \"mustache\", .src = \"examples/mustache/mustache.zig\" },\n        .{ .name = \"endpoint_auth\", .src = \"examples/endpoint_auth/endpoint_auth.zig\" },\n        .{ .name = \"http_params\", .src = \"examples/http_params/http_params.zig\" },\n        .{ .name = \"cookies\", .src = \"examples/cookies/cookies.zig\" },\n        .{ .name = \"websockets\", .src = \"examples/websockets/websockets.zig\" },\n        .{ .name = \"userpass_session\", .src = \"examples/userpass_session_auth/userpass_session_auth.zig\" },\n        .{ .name = \"sendfile\", .src = \"examples/sendfile/sendfile.zig\" },\n        .{ .name = \"middleware\", .src = \"examples/middleware/middleware.zig\" },\n        .{ .name = \"middleware_with_endpoint\", .src = \"examples/middleware_with_endpoint/middleware_with_endpoint.zig\" },\n        .{ .name = \"senderror\", .src = \"examples/senderror/senderror.zig\" },\n        .{ .name = \"bindataformpost\", .src = \"examples/bindataformpost/bindataformpost.zig\" },\n        .{ .name = \"accept\", .src = \"examples/accept/accept.zig\" },\n    }) |excfg| {\n        const ex_name = excfg.name;\n        const ex_src = excfg.src;\n\n        const ex_build_desc = try std.fmt.allocPrint(\n            b.allocator,\n            \"build the {s} example\",\n            .{ex_name},\n        );\n        const ex_run_stepname = try std.fmt.allocPrint(\n            b.allocator,\n            \"run-{s}\",\n            .{ex_name},\n        );\n        const ex_run_stepdesc = try std.fmt.allocPrint(\n            b.allocator,\n            \"run the {s} example\",\n            .{ex_name},\n        );\n        const example_run_step = b.step(ex_run_stepname, ex_run_stepdesc);\n        const example_step = b.step(ex_name, ex_build_desc);\n\n        var example = b.addExecutable(.{\n            .name = ex_name,\n            .root_source_file = b.path(ex_src),\n            .target = target,\n            .optimize = optimize,\n        });\n\n        example.root_module.addImport(\"zap\", zap_module);\n\n        // const example_run = example.run();\n        const example_run = b.addRunArtifact(example);\n        example_run_step.dependOn(&example_run.step);\n\n        // install the artifact - depending on the \"example\"\n        const example_build_step = b.addInstallArtifact(example, .{});\n        example_step.dependOn(&example_build_step.step);\n\n        // ignore https in all because of required -Dopenssl=true\n        // TODO: fix GH pipeline to take care of that\n        // or: auto-provide openssl for https in build.zig\n        if (!std.mem.eql(u8, ex_name, \"https\")) {\n            all_step.dependOn(&example_build_step.step);\n        }\n    }\n\n    //\n    // TOOLS & TESTING\n    //\n    // n.b.: tests run in parallel, so we need all tests that use the network\n    //       to run sequentially, since zap doesn't like to be started multiple\n    //       times on different threads\n    //\n    // TODO: for some reason, tests aren't run more than once unless\n    //       dependencies have changed.\n    //       So, for now, we just force the exe to be built, so in order that\n    //       we can call it again when needed.\n\n    // authentication tests\n    //\n    const auth_tests = b.addTest(.{\n        .name = \"auth_tests\",\n        .root_source_file = b.path(\"src/tests/test_auth.zig\"),\n        .target = target,\n        .optimize = optimize,\n    });\n    auth_tests.root_module.addImport(\"zap\", zap_module);\n\n    const run_auth_tests = b.addRunArtifact(auth_tests);\n    const install_auth_tests = b.addInstallArtifact(auth_tests, .{});\n\n    // mustache tests\n    const mustache_tests = b.addTest(.{\n        .name = \"mustache_tests\",\n        .root_source_file = b.path(\"src/tests/test_mustache.zig\"),\n        .target = target,\n        .optimize = optimize,\n    });\n    mustache_tests.root_module.addImport(\"zap\", zap_module);\n\n    const run_mustache_tests = b.addRunArtifact(mustache_tests);\n    const install_mustache_tests = b.addInstallArtifact(mustache_tests, .{});\n\n    // http paramters (qyery, body) tests\n    const httpparams_tests = b.addTest(.{\n        .name = \"http_params_tests\",\n        .root_source_file = b.path(\"src/tests/test_http_params.zig\"),\n        .target = target,\n        .optimize = optimize,\n    });\n\n    httpparams_tests.root_module.addImport(\"zap\", zap_module);\n\n    const run_httpparams_tests = b.addRunArtifact(httpparams_tests);\n    // TODO: for some reason, tests aren't run more than once unless\n    //       dependencies have changed.\n    //       So, for now, we just force the exe to be built, so in order that\n    //       we can call it again when needed.\n    const install_httpparams_tests = b.addInstallArtifact(httpparams_tests, .{});\n\n    // http paramters (qyery, body) tests\n    const sendfile_tests = b.addTest(.{\n        .name = \"sendfile_tests\",\n        .root_source_file = b.path(\"src/tests/test_sendfile.zig\"),\n        .target = target,\n        .optimize = optimize,\n    });\n\n    sendfile_tests.root_module.addImport(\"zap\", zap_module);\n    const run_sendfile_tests = b.addRunArtifact(sendfile_tests);\n    const install_sendfile_tests = b.addInstallArtifact(sendfile_tests, .{});\n\n    // test commands\n    const run_auth_test_step = b.step(\"test-authentication\", \"Run auth unit tests [REMOVE zig-cache!]\");\n    run_auth_test_step.dependOn(&run_auth_tests.step);\n    run_auth_test_step.dependOn(&install_auth_tests.step);\n\n    const run_mustache_test_step = b.step(\"test-mustache\", \"Run mustache unit tests [REMOVE zig-cache!]\");\n    run_mustache_test_step.dependOn(&run_mustache_tests.step);\n    run_mustache_test_step.dependOn(&install_mustache_tests.step);\n\n    const run_httpparams_test_step = b.step(\"test-httpparams\", \"Run http param unit tests [REMOVE zig-cache!]\");\n    run_httpparams_test_step.dependOn(&run_httpparams_tests.step);\n    run_httpparams_test_step.dependOn(&install_httpparams_tests.step);\n\n    const run_sendfile_test_step = b.step(\"test-sendfile\", \"Run http param unit tests [REMOVE zig-cache!]\");\n    run_sendfile_test_step.dependOn(&run_sendfile_tests.step);\n    run_sendfile_test_step.dependOn(&install_sendfile_tests.step);\n\n    // Similar to creating the run step earlier, this exposes a `test` step to\n    // the `zig build --help` menu, providing a way for the participant to request\n    // running the unit tests.\n    const test_step = b.step(\"test\", \"Run unit tests\");\n    test_step.dependOn(&run_auth_tests.step);\n    test_step.dependOn(&run_mustache_tests.step);\n    test_step.dependOn(&run_httpparams_tests.step);\n    test_step.dependOn(&run_sendfile_tests.step);\n\n    //\n    // docserver\n    //\n    const docserver_exe = b.addExecutable(.{\n        .name = \"docserver\",\n        .root_source_file = b.path(\"./tools/docserver.zig\"),\n        .target = target,\n        .optimize = optimize,\n    });\n    docserver_exe.root_module.addImport(\"zap\", zap_module);\n    var docserver_step = b.step(\"docserver\", \"Build docserver\");\n    const docserver_build_step = b.addInstallArtifact(docserver_exe, .{});\n    docserver_step.dependOn(&docserver_build_step.step);\n    docserver_step.dependOn(&install_docs.step);\n\n    const docserver_run_step = b.step(\"run-docserver\", \"run the docserver\");\n    const docserver_run = b.addRunArtifact(docserver_exe);\n    docserver_run.addPrefixedDirectoryArg(\"--docs=\", docs_obj.getEmittedDocs());\n\n    docserver_run_step.dependOn(&docserver_run.step);\n    docserver_run_step.dependOn(docserver_step);\n\n    all_step.dependOn(&docserver_build_step.step);\n\n    //\n    // announceybot\n    //\n    const announceybot_exe = b.addExecutable(.{\n        .name = \"announceybot\",\n        .root_source_file = b.path(\"./tools/announceybot.zig\"),\n        .target = target,\n        .optimize = optimize,\n    });\n    var announceybot_step = b.step(\"announceybot\", \"Build announceybot\");\n    const announceybot_build_step = b.addInstallArtifact(announceybot_exe, .{});\n    announceybot_step.dependOn(&announceybot_build_step.step);\n    all_step.dependOn(&announceybot_build_step.step);\n}\n"
        },
        {
          "name": "build.zig.zon",
          "type": "blob",
          "size": 0.1484375,
          "content": ".{\n    .name = \"zap\",\n    .version = \"0.8.0\",\n    .paths = .{\n        \"build.zig\",\n        \"build.zig.zon\",\n        \"src\",\n        \"facil.io\",\n    },\n}\n"
        },
        {
          "name": "create-archive.sh",
          "type": "blob",
          "size": 0.9697265625,
          "content": "#!/usr/bin/env bash\ntag=$1\noverride=$2\n\nif [ \"$tag\" == \"--override\" ] ; then \n    override=$tag\n    tag=\"\"\nfi\n\nif [ \"$tag\" == \"\" ] ; then \n    tag=$(git rev-parse --abbrev-ref HEAD)\n    echo \"Warning: no tag provided, using: >> $tag <<\"\nfi\n\n\ngit archive --format=tar.gz -o ${tag}.tar.gz --prefix=zap-$tag/ HEAD\n\ngit diff --quiet \n\nif [ $? -ne 0 ] ; then\n    if [ \"$override\" == \"--override\" ] ; then\n        ./zig-out/bin/pkghash -g --tag=$tag --template=doc/release-template.md\n    else\n        echo \"WARNING: GIT WORKING TREE IS DIRTY!\"\n        echo \"If you want to get zig hash anyway, run:\"\n        echo \"./zig-out/bin/pkghash -g\"\n        echo \"or, with full-blown release-notes:\"\n        echo \"./zig-out/bin/pkghash -g --tag=$tag --template=doc/release-template.md\"\n        echo \"\"\n        echo \"To skip this message and do the pkghash thing anyway, supply the\"\n        echo \"--override parameter\"\n    fi\nelse\n    ./zig-out/bin/pkghash -g --tag=$tag --template=doc/release-template.md\nfi\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "facil.io",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 5.2587890625,
          "content": "{\n  \"nodes\": {\n    \"flake-compat\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1696426674,\n        \"narHash\": \"sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=\",\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"rev\": \"0f9255e01c2351cc7d116c072cb317785dd33b33\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-compat_2\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1673956053,\n        \"narHash\": \"sha256-4gtG9iQuiKITOjNQQeQIpoIB6b16fm+504Ch3sNKLd8=\",\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"rev\": \"35bb57c0c8d8b62bbfd284272c928ceb64ddbde9\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1701680307,\n        \"narHash\": \"sha256-kAuep2h5ajznlPMD9rnQyffWG8EM/C73lejGofXvdM8=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"4022d587cbbfd70fe950c1e2083a02621806a725\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-utils_2\": {\n      \"inputs\": {\n        \"systems\": \"systems_2\"\n      },\n      \"locked\": {\n        \"lastModified\": 1701680307,\n        \"narHash\": \"sha256-kAuep2h5ajznlPMD9rnQyffWG8EM/C73lejGofXvdM8=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"4022d587cbbfd70fe950c1e2083a02621806a725\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-utils_3\": {\n      \"locked\": {\n        \"lastModified\": 1659877975,\n        \"narHash\": \"sha256-zllb8aq3YO3h8B/U0/J1WBgAL8EX5yWf5pMj3G0NAmc=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"c0e246b9b83f637f4681389ecabcb2681b4f3af0\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"neovim-flake\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils_2\",\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"dir\": \"contrib\",\n        \"lastModified\": 1704461694,\n        \"narHash\": \"sha256-dQc9Bkh5uf0R4po3NWnCGx+3eqOZR7iSR4jmRvNNm+E=\",\n        \"owner\": \"neovim\",\n        \"repo\": \"neovim\",\n        \"rev\": \"c509f4907bf7405c9c2ae3f7eff76c5d552944cc\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"dir\": \"contrib\",\n        \"owner\": \"neovim\",\n        \"repo\": \"neovim\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1704290814,\n        \"narHash\": \"sha256-LWvKHp7kGxk/GEtlrGYV68qIvPHkU9iToomNFGagixU=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"70bdadeb94ffc8806c0570eb5c2695ad29f0e421\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"release-23.05\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs_2\": {\n      \"locked\": {\n        \"lastModified\": 1702350026,\n        \"narHash\": \"sha256-A+GNZFZdfl4JdDphYKBJ5Ef1HOiFsP18vQe9mqjmUis=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"9463103069725474698139ab10f17a9d125da859\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-23.05\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-compat\": \"flake-compat\",\n        \"flake-utils\": \"flake-utils\",\n        \"neovim-flake\": \"neovim-flake\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"zig\": \"zig\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems_2\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"zig\": {\n      \"inputs\": {\n        \"flake-compat\": \"flake-compat_2\",\n        \"flake-utils\": \"flake-utils_3\",\n        \"nixpkgs\": \"nixpkgs_2\"\n      },\n      \"locked\": {\n        \"lastModified\": 1704888534,\n        \"narHash\": \"sha256-douEXUiWCVL9NvWKYBc8ydq51qLLUwlBo6lJJoktkGw=\",\n        \"owner\": \"mitchellh\",\n        \"repo\": \"zig-overlay\",\n        \"rev\": \"c69295c92a98947295755a9ac2d49a8d447cc04d\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"mitchellh\",\n        \"repo\": \"zig-overlay\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 4.0947265625,
          "content": "{\n  description = \"zap dev shell\";\n\n  inputs = {\n    # nixpkgs.url = \"github:nixos/nixpkgs/nixpkgs-unstable\";   // GLIBC problem!\n    nixpkgs.url = \"github:nixos/nixpkgs/release-23.05\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n\n    # required for latest zig\n    zig.url = \"github:mitchellh/zig-overlay\";\n\n    # required for latest neovim\n    neovim-flake.url = \"github:neovim/neovim?dir=contrib\";\n    neovim-flake.inputs.nixpkgs.follows = \"nixpkgs\";\n\n    # Used for shell.nix\n    flake-compat = {\n      url = github:edolstra/flake-compat;\n      flake = false;\n    };\n  };\n\n  outputs = {\n    self,\n    nixpkgs,\n    flake-utils,\n    ...\n  } @ inputs: let\n    overlays = [\n      # Other overlays\n      (final: prev: {\n        zigpkgs = inputs.zig.packages.${prev.system};\n        neovim-nightly-pkgs = inputs.neovim-flake.packages.${prev.system};\n      })\n    ];\n\n    # Our supported systems are the same supported systems as the Zig binaries\n    systems = builtins.attrNames inputs.zig.packages;\n  in\n    flake-utils.lib.eachSystem systems (\n      system: let\n        pkgs = import nixpkgs {inherit overlays system; };\n      in rec {\n        devShells.default = pkgs.mkShell {\n          nativeBuildInputs = with pkgs; [\n            # neovim-nightly-pkgs.neovim\n            zigpkgs.\"0.12.0\"\n            bat\n            wrk\n            python310\n            python310Packages.sanic\n            python310Packages.matplotlib\n            poetry\n            poetry\n            pkgs.rustc \n            pkgs.cargo \n            pkgs.gcc \n            pkgs.rustfmt \n            pkgs.clippy\n            pkgs.go\n            pkgs.gotools\n            pkgs.gopls\n            pkgs.golint\n\n            pkgs.dotnet-sdk_8\n            pkgs.dotnet-runtime_8\n            pkgs.zlib\n            pkgs.icu\n            pkgs.openssl\n\n            pkgs.neofetch\n            pkgs.util-linux    # lscpu\n          ];\n\n          buildInputs = with pkgs; [\n            # we need a version of bash capable of being interactive\n            # as opposed to a bash just used for building this flake \n            # in non-interactive mode\n            bashInteractive \n          ];\n\n          shellHook = ''\n            # once we set SHELL to point to the interactive bash, neovim will \n            # launch the correct $SHELL in its :terminal \n            export SHELL=${pkgs.bashInteractive}/bin/bash\n            export LD_LIBRARY_PATH=${pkgs.zlib.out}/lib:${pkgs.icu.out}/lib:${pkgs.openssl.out}/lib:$LD_LIBRARY_PATH\n          '';\n        };\n\n        devShells.build = pkgs.mkShell {\n          nativeBuildInputs = with pkgs; [\n            zigpkgs.\"0.12.0\"\n            pkgs.openssl\n          ];\n\n          buildInputs = with pkgs; [\n            # we need a version of bash capable of being interactive\n            # as opposed to a bash just used for building this flake \n            # in non-interactive mode\n            bashInteractive \n          ];\n\n          shellHook = ''\n            # once we set SHELL to point to the interactive bash, neovim will \n            # launch the correct $SHELL in its :terminal \n            export SHELL=${pkgs.bashInteractive}/bin/bash\n            export LD_LIBRARY_PATH=${pkgs.zlib.out}/lib:${pkgs.icu.out}/lib:${pkgs.openssl.out}/lib:$LD_LIBRARY_PATH\n          '';\n        };\n\n        devShells.masta = pkgs.mkShell {\n          nativeBuildInputs = with pkgs; [\n            zigpkgs.master\n            pkgs.openssl\n          ];\n\n          buildInputs = with pkgs; [\n            # we need a version of bash capable of being interactive\n            # as opposed to a bash just used for building this flake \n            # in non-interactive mode\n            bashInteractive \n          ];\n\n          shellHook = ''\n            # once we set SHELL to point to the interactive bash, neovim will \n            # launch the correct $SHELL in its :terminal \n            export SHELL=${pkgs.bashInteractive}/bin/bash\n            export LD_LIBRARY_PATH=${pkgs.zlib.out}/lib:${pkgs.icu.out}/lib:${pkgs.openssl.out}/lib:$LD_LIBRARY_PATH\n          '';\n        };\n\n        # For compatibility with older versions of the `nix` binary\n        devShell = self.devShells.${system}.default;\n      }\n    );\n}\n"
        },
        {
          "name": "introducing.md",
          "type": "blob",
          "size": 9.4990234375,
          "content": "# Introducing ‚ö°zap‚ö° - blazingly fast backends in zig\n\nZap is intended to become my [zig](https://ziglang.org) replacement for the kind of REST APIs I used to write in [python](https://python.org) with [Flask](https://flask.palletsprojects.com) and [mongodb](https://www.mongodb.com), etc. It can be considered to be a microframework for web applications.\n\nWhat I need for that is a blazingly fast, robust HTTP server that I can use with zig. While facil.io supports TLS, I don't care about HTTPS support. In production, I use [nginx](https://www.nginx.com) as a reverse proxy anyway.\n\nZap wraps and patches [facil.io - the C web application framework](https://facil.io).\n\nAt the time of writing, ZAP is only a few days old and aims to be:\n\n- **robust**\n- **fast**\n- **minimal**\n\n**‚ö°ZAP‚ö° IS SUPER ALPHA**\n\n_Under the hood, everything is super robust and fast. My zig wrappers are fresh, juicy, and alpha._\n\nHere's what works:\n\n- **Super easy build process**: zap's `build.zig` fetches facilio's git sub-module, applies a patch to its logging for microsecond precision, and then builds and optionally runs everything.\n  - _tested on Linux and macOS (arm, M1)_\n- **[hello](https://github.com/renerocksai/zap/blob/master/examples/hello/hello.zig)**: welcomes you with some static HTML\n- **[routes](https://github.com/renerocksai/zap/blob/master/examples/routes/routes.zig)**: a super easy example dispatching on the HTTP path \n- **[serve](https://github.com/renerocksai/zap/blob/master/examples/serve/serve.zig)**: the traditional static web server with optional dynamic request handling\n- **[hello_json](https://github.com/renerocksai/zap/blob/master/examples/hello_json/hello_json.zig)**: serves you json dependent on HTTP path\n- **[endpoint](https://github.com/renerocksai/zap/blob/master/examples/endpoint/)**: a simple JSON REST API example featuring a `/users` endpoint for PUTting/DELETE-ing/GET-ting/POST-ing and listing users, together with a static HTML and JavaScript frontend to play with.\n\nIf you want to take it for a quick spin: \n\n```shell\n$ git clone https://github.com/renerocksai/zap.git \n$ cd zap \n$ zig build run-hello \n$ # open http://localhost:3000 in your browser \n```\n\nSee [the README](https://github.com/renerocksai/zap) for how easy it is to get started, how to run the examples, and how to use zap in your own projects.\n\nI'll continue wrapping more of facil.io's functionality and adding stuff to zap to a point where I can use it as the JSON REST API backend for real research projects, serving thousands of concurrent clients. Now that the endpoint example works, ZAP has actually become pretty usable to me.\n\n**Side-note:** It never ceases to amaze me how productive I can be in zig, eventhough I am still considering myself to be a newbie. Sometimes, it's almost like writing python but with all the nice speed and guarantees that zig gives you. Also, the C integration abilities of zig are just phenomenal! I am super excited about zig's future!\n\nNow, on to the guiding principles of Zap.\n\n## robust\n\nA common recommendation for doing web stuff in zig is to write the actual HTTP server in Go, and use zig for the real work. While there is a selection of notable and cool HTTP server implementations written in zig out there, at the time of writing, most of them seem to a) depend on zig's async facilities which are unsupported until ca. April 2023 when async will return to the self-hosted compiler, and b) have not matured to a point where **I** feel safe using them in production. These are just my opionions and they could be totally wrong though.\n\nHowever, when I conduct my next online research experiment with thousands of concurrent clients, I cannot afford to run into potential maturity-problems of the HTTP server. These projects typically feature a you-get-one-shot process with little room for errors or re-tries.\n\nWith zap, if something should go wrong, at least I'd be close enough to the source-code to, hopefully, be able to fix it in production. With that out of the way, I am super confident that facil.io is very mature compared to many of the alternatives. My `wrk` tests also look promising.\n\nI intend to add app-specific performance tests, e.g. stress-testing the endpoint example, to make sure the zap endpoint framework is able to sustain a high load without running into performance or memory problems. That will be interesting.\n\n\n## ‚ö°blazingly fast‚ö°\n\nClaiming to be blazingly fast is the new black. At least, zap doesn't slow you down and if your server performs poorly, it's probably not exactly zap's fault. Zap relies on the [facil.io](https://facil.io) framework and so it can't really claim any performance fame for itself. In this initial implementation of zap, I didn't care about optimizations at all.\n\nBut, how fast is it? Being blazingly fast is relative. When compared with a simple GO HTTP server, a simple zig zap HTTP server performed really good on my machine:\n\n- zig zap was nearly 30% faster than GO\n- zig zap had over 50% more throughput than GO\n\nI intentionally only tested static HTTP output, as that seemed to be the best common ground of all test subjects to me. The measurements were for just getting a ballpark baseline anyway.\n\n**Update**: I was intrigued comparing to a basic rust HTTP server. Unfortunately, knowing nothing at all about rust, I couldn't find a simple, just-a-few-lines one like in Go and Python right away and hence tried to go for the one in the book [The Rust Programming Language](https://doc.rust-lang.org/book/ch20-00-final-project-a-web-server.html). Wanting it to be of a somewhat fair comparison, I opted for the multi-threaded example. It didn't work out-of-the-book, but I got it to work (essentially, by commenting out all \"print\" statements) and changed it to not read files but outputting static text just like the other examples. **Maybe someone with rust experience** can have a look at my [wrk/rust/hello](wrk/rust/hello) code and tell me why it is surprisingly 'slow', as I expected it to be faster than or at least on-par with the basic Go example. I'll enable the GitHub discussions for this matter. My suspicion is bad performance of the mutexes.\n\n![table](https://raw.githubusercontent.com/renerocksai/zap/master/wrk_table_summary.png)\n\n![charts](https://raw.githubusercontent.com/renerocksai/zap/master/wrk_charts_summary.png)\n\nSo, being somewhere in the ballpark of basic GO performance, zig zap seems to be ... of reasonable performance üòé.\n\nSee more details in [blazingly-fast.md](https://github.com/renerocksai/zap/blob/master/blazingly-fast.md).\n\n## minimal \n\nZap is minimal by necessity. I only (have time to) add what I need - for serving REST APIs and HTML. The primary use-case are frontends that I wrote that communicate with my APIs. Hence, the focus is more on getting stuff done rather than conforming to every standard there is. Even though facilio is able to support TLS, I don't care about that - at least for now. Also, if you present `404 - File not found` as human-readable HTML to the user, nobody forces you to also set the status code to 404, so it can be OK to spare those nanoseconds. Gotta go fast!\n\nFacilio comes with Mustache parsing, TLS via third-party libs, websockets, redis support, concurrency stuff, Base64 support, logging facilities, pub/sub / cluster messages API, hash algorithm implementations, its own memory allocator, and so forth. It is really an amazing project!\n\nOn the lower level, you can use all of the above by working with `zap.C`. I'll zig-wrap what I need for my projects first, before adding more fancy stuff.\n\nAlso, there are nice and well-typed zig implementations for some of the above extra functionalities, and zap-wrapping them needs careful consideration. E.g. it might not be worth the extra effort to wrap facil.io's mustache support when there is a good zig alternative already. Performance / out-of-the-box integration might be arguments pro wrapping them in zap.\n\n## wrapping up - zig is WYSIWYG code\n\nI am super excited about both zig and zap's future. I am still impressed by how easy it is to integrate a C codebase into a zig project, then benefiting from and building on top of battle-tested high-performance C code. Additionally, with zig you get C-like performance with almost Python-like comfort. And you can be sure no exception is trying to get you when you least expect it. No hidden allocations, no hidden control-flows, how cool is that? **WYSIWYG code!**\n\nProvided that the incorporated C code is well-written and -tested, WYSIWYG even holds mostly true for combined Zig and C projects.\n\nYou can truly build on the soulders of giants here. Mind you, it took me less than a week to arrive at the current state of zap where I am confident that I can already use it to write the one or other REST API with it and, after stress-testing, just move it into production - from merely researching Zig and C web frameworks a few days ago.\n\nOh, and have I mentioned Zig's built-in build system and testing framework? Those are both super amazing and super convenient. `zig build` is so much more useful than `make` (which I quite like to be honest). And `zig test` is just amazing, too. Zig's physical code layout: which file is located where and how can it be built, imported, tested - it all makes so much sense. Such a coherent, pleasant experience.\n\nLooking forward, I am also tempted to try adding some log-and-replay facilities as a kind of backup for when things go wrong. I wouldn't be confident to attemt such things in C because I'd view them as being too much work; too much could go wrong. But with Zig, I am rather excited about the possibilities that open up and eager to try such things.\n\nFor great justice!\n"
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.7724609375,
          "content": "{\n    pkgs ? import <nixpkgs> { \n        overlays = [ \n            (import (builtins.fetchTarball {\n              # url = https://github.com/nix-community/neovim-nightly-overlay/archive/master.tar.gz;\n              url = https://github.com/nix-community/neovim-nightly-overlay/archive/72ff8b1ca0331a8735c1eeaefb95c12dfe21d30a.tar.gz;\n            }))\n        ]; \n    }\n} :\npkgs.mkShell {\n    nativeBuildInputs = [ \n        pkgs.neovim-nightly \n        pkgs.bat \n        pkgs.wrk\n        pkgs.python3\n        pkgs.rustc \n        pkgs.cargo \n        pkgs.gcc \n        pkgs.rustfmt \n        pkgs.clippy\n    ];\n\n  buildInputs = [\n    pkgs.go\n    pkgs.gotools\n    pkgs.gopls\n    # pkgs.go-outline\n    # pkgs.gocode\n    # pkgs.gopkgs\n    # pkgs.gocode-gomod\n    # pkgs.godef\n    pkgs.golint\n  ];\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "wrk",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}