{
  "metadata": {
    "timestamp": 1736709806763,
    "page": 259,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "akheron/jansson",
      "stars": 3115,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.099609375,
          "content": "BasedOnStyle: LLVM\nAlignConsecutiveMacros: true\nColumnLimit: 90\nIndentCaseLabels: true\nIndentWidth: 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3623046875,
          "content": "*~\n*.o\n*.a\n.libs\n.deps\nMakefile\nMakefile.in\naclocal.m4\nautom4te.cache\nconfig.guess\nconfig.h\nconfig.h.in\nconfig.log\nconfig.status\nconfig.sub\nconfigure\ndepcomp\ninstall-sh\nlibtool\nltmain.sh\nmissing\ncompile\ntest-driver\n*.lo\n*.la\nstamp-h1\n*.pyc\n*.pc\n/src/jansson_config.h\n/jansson_private_config.h.in\n/jansson_private_config.h\n/build\n*.exe\n.idea\ncmake-build-debug/\n*.log\n*.trs"
        },
        {
          "name": "Android.mk",
          "type": "blob",
          "size": 0.564453125,
          "content": "LOCAL_PATH:= $(call my-dir)\ninclude $(CLEAR_VARS)\n\nLOCAL_ARM_MODE := arm\n\nLOCAL_SRC_FILES := \\\n    src/dump.c \\\n    src/error.c \\\n    src/hashtable.c \\\n    src/hashtable_seed.c \\\n    src/load.c \\\n    src/memory.c \\\n    src/pack_unpack.c \\\n    src/strbuffer.c \\\n    src/strconv.c \\\n    src/utf.c \\\n    src/value.c\n\nLOCAL_C_INCLUDES += \\\n        $(LOCAL_PATH) \\\n        $(LOCAL_PATH)/android \\\n        $(LOCAL_PATH)/src\n\nLOCAL_MODULE_TAGS := optional\nLOCAL_SHARED_LIBRARIES := libc\nLOCAL_CFLAGS += -O3 -DHAVE_STDINT_H=1\n\nLOCAL_MODULE:= libjansson\n\ninclude $(BUILD_SHARED_LIBRARY)\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 23.87109375,
          "content": "Version 2.14.1\n==============\n\nWork in progress\n\n* Fixes:\n\n  - Fix thread safety of encoding and decoding when `uselocale` or `newlocale`\n    is used to switch locales inside the threads (#674, #675, #677. Thanks to\n    Bruno Haible the report and help with fixing.)\n\n  - Use David M. Gay's `dtoa()` algorithm to avoid misprinting issues of real\n    numbers that are not exactly representable as a `double` (#680).\n\n    If this is not desirable, use `./configure --disable-dtoa` or `cmake\n    -DUSE_DTOA=OFF .`\n\n* Build:\n\n  - Make test output nicer in CMake based builds (#683)\n  - Simplify tests (#685)\n\nVersion 2.14\n============\n\nReleased 2021-09-09\n\n* New Features:\n\n  - Add `json_object_getn`, `json_object_setn`, `json_object_deln`, and the\n    corresponding `nocheck` functions. (#520, by Maxim Zhukov)\n\n* Fixes:\n\n  - Handle `sprintf` corner cases (#537, by Tobias Stoeckmann)\n\n* Build:\n\n  - Symbol versioning for all exported symbols (#540, by Simon McVittie)\n  - Fix compiler warnings (#555, by Kelvin Lee)\n\n* Documentation:\n\n  - Small fixes (#544, #546, by @i-ky)\n  - Sphinx 3 compatibility (#543, by Pierce Lopez)\n\n\nVersion 2.13.1\n==============\n\nReleased 2020-05-07\n\n* Build:\n\n  - Include `jansson_version_str()` and `jansson_version_cmp()` in\n    shared library. (#534)\n\n  - Include ``scripts/`` in tarball. (#535)\n\n\nVersion 2.13\n============\n\nReleased 2020-05-05\n\n* New Features:\n\n  - Add `jansson_version_str()` and `jansson_version_cmp()` for runtime\n    version checking (#465).\n\n  - Add `json_object_update_new()`, `json_object_update_existing_new()`\n    and `json_object_update_missing_new()` functions (#499).\n\n  - Add `json_object_update_recursive()` (#505).\n\n* Build:\n\n  - Add ``-Wno-format-truncation`` to suppress format truncation warnings (#489).\n\n* Bug fixes:\n\n  - Remove ``strtod`` macro definition for MinGW (#498).\n\n  - Add infinite loop check in `json_deep_copy()` (#490).\n\n  - Add ``pipe`` macro definition for MinGW (#500).\n\n  - Enhance ``JANSSON_ATTRS`` macro to support earlier C standard(C89) (#501).\n\n  - Update version detection for sphinx-build (#502).\n\n* Documentation:\n\n  - Fix typos (#483, #494).\n\n  - Document that call the custom free function to free the return value \n    of `json_dumps()` if you have a custom malloc/free (#490).\n\n  - Add vcpkg installation instructions (#496).\n\n  - Document that non-blocking file descriptor is not supported on\n    `json_loadfd()` (#503).\n\n\nVersion 2.12\n============\n\nReleased 2018-11-26\n\n* Bug fixes:\n\n  - Fix error message in `json_pack()` for NULL object (#409).\n\n  - Avoid invalid memory read in `json_pack()` (#421).\n\n  - Call va_end after va_copy in `json_vsprintf()` (#427).\n\n  - Improve handling of formats with '?' and '*' in `json_pack()` (#438).\n\n  - Remove inappropriate `jsonp_free()` which caused segmentation fault in\n    error handling (#444).\n\n* Build:\n\n  - Add function attributes for GCC and CLANG to provide warnings on improper\n    use of jansson routines (#404).\n\n  - Many CMake fixes (#408, #412, #415).\n\n  - Enable -Bsymbolic-functions linker flag whenever possible.\n\n  - Resolve various compiler warnings (#423, #430, #435, #436).\n\n  - Fix code coverage ignored paths (#439).\n\n* Other:\n\n  - Test coverage improvements (#398, #400).\n\n  - Add VS 2017 to appveyor, update Visual Studio documentation (#417).\n\n  - Update copyright for 2018 (#424).\n\n  - Update install instructions in README (#401).\n\nVersion 2.11\n============\n\nReleased 2018-02-09\n\n* New features:\n\n  - Add `json_pack()` format specifiers s*, o* and O* for values that\n    can be omitted if null (#339).\n\n  - Add `json_error_code()` to retrieve numeric error codes (#365, #380,\n    #381).\n\n  - Enable thread safety for `json_dump()` on all systems.  Enable thread\n    safe `json_decref()` and `json_incref()` for modern compilers (#389).\n\n  - Add `json_sprintf()` and `json_vsprintf()` (#393).\n\n* Bug Fixes:\n\n  - Fix incorrect report of success from `json_dump_file()` when an error\n    is returned by `fclose()` (#359).\n\n  - Make json_equal() const-correct (#344).\n\n  - Fix incomplete stealing of references by `json_pack()` (#374).\n\n* Build:\n\n  - Work around gcc's -Wimplicit-fallthrough.\n\n  - Fix CMake detection of ``sys/types.h`` header (#375).\n\n  - Fix `jansson.pc` generated by CMake to be more consistent with the one\n    generated using GNU Autotools (#368).\n\n* Other:\n\n  - Miscellaneous documentation fixes (#356, #378, #395).\n\n  - Remove unnecessary reference actions from parsers (#377).\n\nVersion 2.10\n============\n\nReleased 2017-03-02\n\n* New features:\n\n  - Add JSON_EMBED encoding flag allowing arrays and objects to be encoded\n    into existing streams (#329).\n\n  - Add `json_dumpb()` function for dumping to a pre-allocated buffer (#328).\n\n  - Add `json_dumpfd()` and `json_loadfd()` functions for dumping to streaming\n    file descriptors (#328).\n\n  - Add support for parsing buffers larger than 2GB (#309).\n\n* Build:\n\n  - Fix CMake build when LONG_LONG_INT is defined as \"\" (#321)\n\n* Other:\n\n  - Internal code cleanup (#311, #314)\n\nVersion 2.9\n===========\n\nReleased 2016-09-18\n\n* New features:\n\n  - Add ``json_auto_t`` to automatically decref a value that goes out\n    of scope. Available only on GCC and Clang. (#301)\n\n* Build:\n\n  - Fix CMake build (at least on Linux) by removing conflicting\n    jansson_config.h from the distribution (#306)\n\n  - Change CMake install target generation to be optional (#305)\n\n* Documentation:\n\n  - Small documentation fixes.\n\n\nVersion 2.8\n===========\n\nReleased 2016-08-30\n\n* New features:\n\n  - Always preserve insertion order of object items.\n    `json_object_iter()` and friends, `json_object_foreach()` and\n    `json_dumps()` and friends now always work in the insertion order of\n    object items (#293).\n\n  - Add `json_object_foreach_safe()` macro that allows\n    `json_object_del()` calls during iteration (#230).\n\n  - Add `json_get_alloc_funcs()` to allow reading the allocation\n    functions set by `json_set_alloc_funcs()` (#262, #264).\n\n  - Add `json_pack()` format specifiers s?, o? and O? for values that\n    can be null (#261, #270).\n\n* Bug fixes:\n\n  - Fix a crash when parsing inputs consisting of very deeply nested\n    arrays or objects (#282, #284).\n\n  - Never convert numbers to integers in the parser when\n    JSON_DECODE_INT_AS_REAL is set. This fixes error messages for\n    overflowing numbers when JSON_DECODE_INT_AS_REAL is set (#212).\n\n  - Fix a use-after-free in `json_pack()` error handling.\n\n  - Fix subnormal number parsing on mingw32.\n\n  - Handle out-of-memory situations gracefully in the hashtable\n    implementation (#298).\n\n* Build:\n\n  - Fix build with CMake on all versions of Visual Studio up to 2015\n    (#262, #289).\n\n  - Fix pkgconfig libdir when using CMake (#268).\n\n  - Fix CMake config for static CRT builds on Windows (#206).\n\n  - Fix warnings on LLVM 6.0 targeting iOS arm64 (#208).\n\n  - Add coverlls.io support via Travis for a nice test coverage badge\n    (#211).\n\n  - Don't expect ``jansson_config.h`` to be in the compiler's include\n    path (#209).\n\n  - Add a build-time option to set initial hashtable size (#213).\n\n  - Use snprintf and strncpy in place of sprintf and strcpy to silence\n    linker warnings on OpenBSD (#233).\n\n* Documentation:\n\n  - Fix various typos in documentation, and a broken link (#258).\n\n  - Add an example program in ``examples/`` (#214, #217).\n\n  - Fix building of documentation man pages (#207).\n\n  - Document the fact that copying objects doesn't preserve the\n    insertion order of keys (#237).\n\n* Tests:\n\n  - Don't use the nonstandard __FUNCTION__ macro in tests.\n\n  - Use expr instead of $((...)) in shell scripts for Solaris 10\n    compatibility.\n\n  - Disable Visual Studio warning C4756 when triggered deliberately in\n    tests (#216).\n\n  - Other minor fixes (#221, #248).\n\n* Other changes:\n\n  - List all unrecognized object keys when strict unpacking fails\n    (#263).\n\n  - Alter the order of the members of the hashtable_pair struct for\n    easier debugging.\n\n  - Minor performance improvement to `json_dump()` and friends (#234).\n\n  - Minor style fixes (#255, #257).\n\n\nVersion 2.7\n===========\n\nReleased 2014-10-02\n\n* New features:\n\n  - `json_pack()` and friends: Add format specifiers ``s%`` and ``+%``\n    for a size_t string length (#141).\n\n  - `json_unpack()` and friends: Add format specifier ``s%`` for\n    unpacking the string length along with the string itself (#141).\n\n  - Add length-aware string constructors `json_stringn()` and\n    `json_stringn_nocheck()`, length-aware string mutators\n    `json_string_setn()` and `json_string_setn_nocheck()`, and a\n    function for getting string's length `json_string_length()` (#141,\n    #143).\n\n  - Support ``\\u0000`` escapes in the decoder. The support can be\n    enabled by using the ``JSON_ALLOW_NUL`` decoding flag (#141).\n\n  - Add `json_boolean_value()` as an alias for `json_is_true()`\n    (#146).\n\n  - Add JSON_REAL_PRECISION encoding flag/macro for controlling real\n    number precision (#178).\n\n  - Define the maximum indentation as JSON_MAX_INDENT (#191).\n\n* Bug fixes:\n\n  - Some malformed ``\\uNNNN`` escapes could crash the decoder with an\n    assertion failure.\n\n  - Avoid integer overflows with very long strings in UTF-8 decoder and\n    hashtable.\n\n  - Check for *NULL* key in `json_object_get()` and\n    `json_object_del()` (#151).\n\n  - Enhance hashtable seeding on Windows (#162).\n\n  - `json_unpack()`: Allow mixing JSON_STRICT with optional keys\n    (#162, #163).\n\n  - Fix int/int32 mismatch (#142).\n\n  - Parse subnormal numbers correctly (#202).\n\n* Build:\n\n  - Remove VS2010 build files. CMake should be used on Windows instead\n    (#165).\n\n  - Fix CMake build flags for MinGW (#193).\n\n  - Add CMake config files for find_package. Rename config.h to\n    jansson_private_config.h (#157, #159).\n\n  - Make Valgrind checks work with CMake (#160).\n\n  - Fix feature checks to use correct __ATOMIC flags.\n\n  - Fix CMake checks for uint16_t and uint8_t support (#177).\n\n  - Make Jansson build on SmartOS/Solaris (#171).\n\n  - Work around a GCC bug on Solaris (#175).\n\n  - Fix autoreconf on Debian (#182).\n\n  - Don't use GNU make specific export for global AM_CFLAGS (#203,\n    #204).\n\n  - Fix building on Android using the supplied Android.mk (#166,\n    #174).\n\n  - Android.mk: Add -DHAVE_STDINT_H to LOCAL_CFLAGS (#200).\n\n* Documentation:\n\n  - Document JANSSON_BUILD_SHARED_LIBS CMake option (#187).\n\n* Tests:\n\n  - Close file handles correctly (#198).\n\n* Other changes:\n\n  - ``\\uNNNN`` escapes are now encoded in upper case for better\n    readability.\n\n  - Enable usage of AddressSanitizer (#180).\n\n\nVersion 2.6\n===========\n\nReleased 2014-02-11\n\n* Security:\n\n  - CVE-2013-6401: The hash function used by the hashtable\n    implementation has been changed, and is automatically seeded with\n    random data when the first JSON object is created. This prevents\n    an attacker from causing large JSON objects with specially crafted\n    keys perform poorly.\n\n* New features:\n\n  - `json_object_seed()`: Set the seed value of the hash function.\n\n* Bug fixes:\n\n  - Include CMake specific files in the release tarball.\n\n* Documentation:\n\n  - Fix tutorial source to send a User-Agent header, which is now\n    required by the GitHub API.\n\n  - Set all memory to zero in secure_free() example.\n\n\nVersion 2.5\n===========\n\nReleased 2013-09-19\n\n* New features:\n\n  - `json_pack()` and friends: Add format specifiers ``s#``, ``+`` and\n    ``+#``.\n\n  - Add ``JSON_DECODE_INT_AS_REAL`` decoding flag to treat all numbers\n    as real in the decoder (#123).\n\n  - Add `json_array_foreach()`, paralleling `json_object_foreach()`\n    (#118).\n\n* Bug fixes:\n\n  - `json_dumps()` and friends: Don't crash if json is *NULL* and\n    ``JSON_ENCODE_ANY`` is set.\n\n  - Fix a theoretical integer overflow in `jsonp_strdup()`.\n\n  - Fix `l_isxdigit()` macro (#97).\n\n  - Fix an off-by-one error in `json_array_remove()`.\n\n* Build:\n\n  - Support CMake in addition to GNU Autotools (#106, #107, #112,\n    #115, #120, #127).\n\n  - Support building for Android (#109).\n\n  - Don't use ``-Werror`` by default.\n\n  - Support building and testing with VPATH (#93).\n\n  - Fix compilation when ``NDEBUG`` is defined (#128)\n\n* Tests:\n\n  - Fix a refleak in ``test/bin/json_process.c``.\n\n* Documentation:\n\n  - Clarify the return value of `json_load_callback_t`.\n\n  - Document how to circumvent problems with separate heaps on Windows.\n\n  - Fix memory leaks and warnings in ``github_commits.c``.\n\n  - Use `json_decref()` properly in tutorial.\n\n* Other:\n\n  - Make it possible to forward declare ``struct json_t``.\n\n\nVersion 2.4\n===========\n\nReleased 2012-09-23\n\n* New features:\n\n  - Add `json_boolean()` macro that returns the JSON true or false\n    value based on its argument (#86).\n\n  - Add `json_load_callback()` that calls a callback function\n    repeatedly to read the JSON input (#57).\n\n  - Add JSON_ESCAPE_SLASH encoding flag to escape all occurences of\n    ``/`` with ``\\/``.\n\n* Bug fixes:\n\n  - Check for and reject NaN and Inf values for reals. Encoding these\n    values resulted in invalid JSON.\n\n  - Fix `json_real_set()` to return -1 on error.\n\n* Build:\n\n  - Jansson now builds on Windows with Visual Studio 2010, and\n    includes solution and project files in ``win32/vs2010/``\n    directory.\n\n  - Fix build warnings (#77, #78).\n\n  - Add ``-no-undefined`` to LDFLAGS (#90).\n\n* Tests:\n\n  - Fix the symbol exports test on Linux/PPC64 (#88).\n\n* Documentation:\n\n  - Fix typos (#73, #84).\n\n\nVersion 2.3.1\n=============\n\nReleased 2012-04-20\n\n* Build issues:\n\n  - Only use ``long long`` if ``strtoll()`` is also available.\n\n* Documentation:\n\n  - Fix the names of library version constants in documentation. (#52)\n\n  - Change the tutorial to use GitHub API v3. (#65)\n\n* Tests:\n\n  - Make some tests locale independent. (#51)\n\n  - Distribute the library exports test in the tarball.\n\n  - Make test run on shells that don't support the ``export FOO=bar``\n    syntax.\n\n\nVersion 2.3\n===========\n\nReleased 2012-01-27\n\n* New features:\n\n  - `json_unpack()` and friends: Add support for optional object keys\n    with the ``{s?o}`` syntax.\n\n  - Add `json_object_update_existing()` and\n    `json_object_update_missing()`, for updating only existing keys or\n    only adding missing keys to an object. (#37)\n\n  - Add `json_object_foreach()` for more convenient iteration over\n    objects. (#45, #46)\n\n  - When decoding JSON, write the number of bytes that were read from\n    input to ``error.position`` also on success. This is handy with\n    ``JSON_DISABLE_EOF_CHECK``.\n\n  - Add support for decoding any JSON value, not just arrays or\n    objects. The support is enabled with the new ``JSON_DECODE_ANY``\n    flag. Patch by Andrea Marchesini. (#4)\n\n* Bug fixes\n\n  - Avoid problems with object's serial number growing too big. (#40,\n    #41)\n\n  - Decoding functions now return NULL if the first argument is NULL.\n    Patch by Andrea Marchesini.\n\n  - Include ``jansson_config.h.win32`` in the distribution tarball.\n\n  - Remove ``+`` and leading zeros from exponents in the encoder.\n    (#39)\n\n  - Make Jansson build and work on MinGW. (#39, #38)\n\n* Documentation\n\n  - Note that the same JSON values must not be encoded in parallel by\n    separate threads. (#42)\n\n  - Document MinGW support.\n\n\nVersion 2.2.1\n=============\n\nReleased 2011-10-06\n\n* Bug fixes:\n\n  - Fix real number encoding and decoding under non-C locales. (#32)\n\n  - Fix identifier decoding under non-UTF-8 locales. (#35)\n\n  - `json_load_file()`: Open the input file in binary mode for maximum\n    compatibility.\n\n* Documentation:\n\n  - Clarify the lifecycle of the result of the ``s`` fromat of\n    `json_unpack()`. (#31)\n\n  - Add some portability info. (#36)\n\n  - Little clarifications here and there.\n\n* Other:\n\n  - Some style fixes, issues detected by static analyzers.\n\n\nVersion 2.2\n===========\n\nReleased 2011-09-03\n\n* New features:\n\n  - `json_dump_callback()`: Pass the encoder output to a callback\n    function in chunks.\n\n* Bug fixes:\n\n  - `json_string_set()`: Check that target is a string and value is\n    not NULL.\n\n* Other:\n\n  - Documentation typo fixes and clarifications.\n\n\nVersion 2.1\n===========\n\nReleased 2011-06-10\n\n* New features:\n\n  - `json_loadb()`: Decode a string with a given size, useful if the\n    string is not null terminated.\n\n  - Add ``JSON_ENCODE_ANY`` encoding flag to allow encoding any JSON\n    value. By default, only arrays and objects can be encoded. (#19)\n\n  - Add ``JSON_REJECT_DUPLICATES`` decoding flag to issue a decoding\n    error if any JSON object in the input contins duplicate keys. (#3)\n\n  - Add ``JSON_DISABLE_EOF_CHECK`` decoding flag to stop decoding after a\n    valid JSON input. This allows other data after the JSON data.\n\n* Bug fixes:\n\n  - Fix an additional memory leak when memory allocation fails in\n    `json_object_set()` and friends.\n\n  - Clear errno before calling `strtod()` for better portability. (#27)\n\n* Building:\n\n  - Avoid set-but-not-used warning/error in a test. (#20)\n\n* Other:\n\n  - Minor clarifications to documentation.\n\n\nVersion 2.0.1\n=============\n\nReleased 2011-03-31\n\n* Bug fixes:\n\n  - Replace a few `malloc()` and `free()` calls with their\n    counterparts that support custom memory management.\n\n  - Fix object key hashing in json_unpack() strict checking mode.\n\n  - Fix the parentheses in ``JANSSON_VERSION_HEX`` macro.\n\n  - Fix `json_object_size()` return value.\n\n  - Fix a few compilation issues.\n\n* Portability:\n\n  - Enhance portability of `va_copy()`.\n\n  - Test framework portability enhancements.\n\n* Documentation:\n\n  - Distribute ``doc/upgrading.rst`` with the source tarball.\n\n  - Build documentation in strict mode in ``make distcheck``.\n\n\nVersion 2.0\n===========\n\nReleased 2011-02-28\n\nThis release is backwards incompatible with the 1.x release series.\nSee the chapter \"Upgrading from older versions\" in documentation for\ndetails.\n\n* Backwards incompatible changes:\n\n  - Unify unsigned integer usage in the API: All occurences of\n    unsigned int and unsigned long have been replaced with size_t.\n\n  - Change JSON integer's underlying type to the widest signed integer\n    type available, i.e. long long if it's supported, otherwise long.\n    Add a typedef json_int_t that defines the type.\n\n  - Change the maximum indentation depth to 31 spaces in encoder. This\n    frees up bits from the flags parameter of encoding functions\n    `json_dumpf()`, `json_dumps()` and `json_dump_file()`.\n\n  - For future needs, add a flags parameter to all decoding functions\n    `json_loadf()`, `json_loads()` and `json_load_file()`.\n\n* New features\n\n  - `json_pack()`, `json_pack_ex()`, `json_vpack_ex()`: Create JSON\n    values based on a format string.\n\n  - `json_unpack()`, `json_unpack_ex()`, `json_vunpack_ex()`: Simple\n    value extraction and validation functionality based on a format\n    string.\n\n  - Add column, position and source fields to the ``json_error_t``\n    struct.\n\n  - Enhance error reporting in the decoder.\n\n  - ``JANSSON_VERSION`` et al.: Preprocessor constants that define the\n    library version.\n\n  - `json_set_alloc_funcs()`: Set custom memory allocation functions.\n\n* Fix many portability issues, especially on Windows.\n\n* Configuration\n\n  - Add file ``jansson_config.h`` that contains site specific\n    configuration. It's created automatically by the configure script,\n    or can be created by hand if the configure script cannot be used.\n    The file ``jansson_config.h.win32`` can be used without\n    modifications on Windows systems.\n\n  - Add a section to documentation describing how to build Jansson on\n    Windows.\n\n  - Documentation now requires Sphinx 1.0 or newer.\n\n\nVersion 1.3\n===========\n\nReleased 2010-06-13\n\n* New functions:\n\n  - `json_object_iter_set()`, `json_object_iter_set_new()`: Change\n    object contents while iterating over it.\n\n  - `json_object_iter_at()`: Return an iterator that points to a\n    specific object item.\n\n* New encoding flags:\n\n  - ``JSON_PRESERVE_ORDER``: Preserve the insertion order of object\n    keys.\n\n* Bug fixes:\n\n  - Fix an error that occured when an array or object was first\n    encoded as empty, then populated with some data, and then\n    re-encoded\n\n  - Fix the situation like above, but when the first encoding resulted\n    in an error\n\n* Documentation:\n\n  - Clarify the documentation on reference stealing, providing an\n    example usage pattern\n\n\nVersion 1.2.1\n=============\n\nReleased 2010-04-03\n\n* Bug fixes:\n\n  - Fix reference counting on ``true``, ``false`` and ``null``\n  - Estimate real number underflows in decoder with 0.0 instead of\n    issuing an error\n\n* Portability:\n\n  - Make ``int32_t`` available on all systems\n  - Support compilers that don't have the ``inline`` keyword\n  - Require Autoconf 2.60 (for ``int32_t``)\n\n* Tests:\n\n  - Print test names correctly when ``VERBOSE=1``\n  - ``test/suites/api``: Fail when a test fails\n  - Enhance tests for iterators\n  - Enhance tests for decoding texts that contain null bytes\n\n* Documentation:\n\n  - Don't remove ``changes.rst`` in ``make clean``\n  - Add a chapter on RFC conformance\n\n\nVersion 1.2\n===========\n\nReleased 2010-01-21\n\n* New functions:\n\n  - `json_equal()`: Test whether two JSON values are equal\n  - `json_copy()` and `json_deep_copy()`: Make shallow and deep copies\n    of JSON values\n  - Add a version of all functions taking a string argument that\n    doesn't check for valid UTF-8: `json_string_nocheck()`,\n    `json_string_set_nocheck()`, `json_object_set_nocheck()`,\n    `json_object_set_new_nocheck()`\n\n* New encoding flags:\n\n  - ``JSON_SORT_KEYS``: Sort objects by key\n  - ``JSON_ENSURE_ASCII``: Escape all non-ASCII Unicode characters\n  - ``JSON_COMPACT``: Use a compact representation with all unneeded\n    whitespace stripped\n\n* Bug fixes:\n\n  - Revise and unify whitespace usage in encoder: Add spaces between\n    array and object items, never append newline to output.\n  - Remove const qualifier from the ``json_t`` parameter in\n    `json_string_set()`, `json_integer_set()` and `json_real_set`.\n  - Use ``int32_t`` internally for representing Unicode code points\n    (int is not enough on all platforms)\n\n* Other changes:\n\n  - Convert ``CHANGES`` (this file) to reStructured text and add it to\n    HTML documentation\n  - The test system has been refactored. Python is no longer required\n    to run the tests.\n  - Documentation can now be built by invoking ``make html``\n  - Support for pkg-config\n\n\nVersion 1.1.3\n=============\n\nReleased 2009-12-18\n\n* Encode reals correctly, so that first encoding and then decoding a\n  real always produces the same value\n* Don't export private symbols in ``libjansson.so``\n\n\nVersion 1.1.2\n=============\n\nReleased 2009-11-08\n\n* Fix a bug where an error message was not produced if the input file\n  could not be opened in `json_load_file()`\n* Fix an assertion failure in decoder caused by a minus sign without a\n  digit after it\n* Remove an unneeded include of ``stdint.h`` in ``jansson.h``\n\n\nVersion 1.1.1\n=============\n\nReleased 2009-10-26\n\n* All documentation files were not distributed with v1.1; build\n  documentation in make distcheck to prevent this in the future\n* Fix v1.1 release date in ``CHANGES``\n\n\nVersion 1.1\n===========\n\nReleased 2009-10-20\n\n* API additions and improvements:\n\n  - Extend array and object APIs\n  - Add functions to modify integer, real and string values\n  - Improve argument validation\n  - Use unsigned int instead of ``uint32_t`` for encoding flags\n\n* Enhance documentation\n\n  - Add getting started guide and tutorial\n  - Fix some typos\n  - General clarifications and cleanup\n\n* Check for integer and real overflows and underflows in decoder\n* Make singleton values thread-safe (``true``, ``false`` and ``null``)\n* Enhance circular reference handling\n* Don't define ``-std=c99`` in ``AM_CFLAGS``\n* Add C++ guards to ``jansson.h``\n* Minor performance and portability improvements\n* Expand test coverage\n\n\nVersion 1.0.4\n=============\n\nReleased 2009-10-11\n\n* Relax Autoconf version requirement to 2.59\n* Make Jansson compile on platforms where plain ``char`` is unsigned\n* Fix API tests for object\n\n\nVersion 1.0.3\n=============\n\nReleased 2009-09-14\n\n* Check for integer and real overflows and underflows in decoder\n* Use the Python json module for tests, or simplejson if the json\n  module is not found\n* Distribute changelog (this file)\n\n\nVersion 1.0.2\n=============\n\nReleased 2009-09-08\n\n* Handle EOF correctly in decoder\n\n\nVersion 1.0.1\n=============\n\nReleased 2009-09-04\n\n* Fixed broken `json_is_boolean()`\n\n\nVersion 1.0\n===========\n\nReleased 2009-08-25\n\n* Initial release\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 21.5703125,
          "content": "cmake_minimum_required (VERSION 3.1)\nproject(jansson C)\n\n# Options\noption(JANSSON_BUILD_SHARED_LIBS \"Build shared libraries.\" OFF)\noption(USE_URANDOM \"Use /dev/urandom to seed the hash function.\" ON)\noption(USE_WINDOWS_CRYPTOAPI \"Use CryptGenRandom to seed the hash function.\" ON)\noption(USE_DTOA \"Use dtoa for optimal floating-point to string conversions.\" ON)\n\nif (MSVC)\n   # This option must match the settings used in your program, in particular if you\n\t# are linking statically\n\toption(JANSSON_STATIC_CRT \"Link the static CRT libraries\" OFF )\nendif ()\n\noption(JANSSON_EXAMPLES \"Compile example applications\" ON)\n\nif (UNIX)\n   option(JANSSON_COVERAGE \"(GCC Only! Requires gcov/lcov to be installed). Include target for doing coverage analysis for the test suite. Note that -DCMAKE_BUILD_TYPE=Debug must be set\" OFF)\nendif ()\n\n# Set some nicer output dirs.\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)\nset(JANSSON_TEMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/tmp)\n\n# Give the debug version a different postfix for windows,\n# so both the debug and release version can be built in the\n# same build-tree on Windows (MSVC).\nif (WIN32 AND NOT CMAKE_DEBUG_POSTFIX)\n   set(CMAKE_DEBUG_POSTFIX \"_d\")\nendif()\n\n# This is how I thought it should go\n# set (JANSSON_VERSION \"2.3.1\")\n# set (JANSSON_SOVERSION 2)\n\nset(JANSSON_DISPLAY_VERSION \"2.14\")\n\n# This is what is required to match the same numbers as automake's\nset(JANSSON_VERSION \"4.14.0\")\nset(JANSSON_SOVERSION 4)\n\n# for CheckFunctionKeywords\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\ninclude (CheckCSourceCompiles)\ninclude (CheckFunctionExists)\ninclude (CheckFunctionKeywords)\ninclude (CheckIncludeFiles)\ninclude (CheckTypeSize)\n\n# suppress format-truncation warning\ninclude (CheckCCompilerFlag)\ncheck_c_compiler_flag(-Wno-format-truncation HAS_NO_FORMAT_TRUNCATION)\nif (HAS_NO_FORMAT_TRUNCATION)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-format-truncation\")\nendif()\n\nif (MSVC)\n   # Turn off Microsofts \"security\" warnings.\n   add_definitions( \"/W3 /D_CRT_SECURE_NO_WARNINGS /wd4005 /wd4996 /nologo\" )\n\n   if (JANSSON_STATIC_CRT)\n      set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /MT\")\n      set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /MTd\")\n   endif()\nendif()\n\nmessage(\"C compiler: ${CMAKE_C_COMPILER_ID}\")\n\nif (JANSSON_COVERAGE)\n   include(CodeCoverage)\n   set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage\")\nendif()\n\ncheck_include_files (endian.h HAVE_ENDIAN_H)\ncheck_include_files (fcntl.h HAVE_FCNTL_H)\ncheck_include_files (sched.h HAVE_SCHED_H)\ncheck_include_files (unistd.h HAVE_UNISTD_H)\ncheck_include_files (sys/param.h HAVE_SYS_PARAM_H)\ncheck_include_files (sys/stat.h HAVE_SYS_STAT_H)\ncheck_include_files (sys/time.h HAVE_SYS_TIME_H)\ncheck_include_files (sys/types.h HAVE_SYS_TYPES_H)\n\ncheck_function_exists (close HAVE_CLOSE)\ncheck_function_exists (getpid HAVE_GETPID)\ncheck_function_exists (gettimeofday HAVE_GETTIMEOFDAY)\ncheck_function_exists (open HAVE_OPEN)\ncheck_function_exists (read HAVE_READ)\ncheck_function_exists (sched_yield HAVE_SCHED_YIELD)\n\n# Check for the int-type includes\ncheck_include_files (stdint.h HAVE_STDINT_H)\n\ninclude (TestBigEndian)\nTEST_BIG_ENDIAN(WORDS_BIGENDIAN)\n\n# Check our 64 bit integer sizes\ncheck_type_size (__int64 __INT64)\ncheck_type_size (int64_t INT64_T)\ncheck_type_size (\"long long\" LONG_LONG_INT)\n\n# Check our 32 bit integer sizes\ncheck_type_size (int32_t INT32_T)\ncheck_type_size (__int32 __INT32)\ncheck_type_size (\"long\" LONG_INT)\ncheck_type_size (\"int\" INT)\nif (HAVE_INT32_T)\n   set (JSON_INT32 int32_t)\nelseif (HAVE___INT32)\n   set (JSON_INT32 __int32)\nelseif (HAVE_LONG_INT AND (LONG_INT EQUAL 4))\n   set (JSON_INT32 long)\nelseif (HAVE_INT AND (INT EQUAL 4))\n   set (JSON_INT32 int)\nelse ()\n   message (FATAL_ERROR \"Could not detect a valid 32-bit integer type\")\nendif ()\n\ncheck_type_size (\"unsigned long\" UNSIGNED_LONG_INT)\ncheck_type_size (\"unsigned int\" UNSIGNED_INT)\ncheck_type_size (\"unsigned short\" UNSIGNED_SHORT)\n\ncheck_type_size (uint32_t UINT32_T)\ncheck_type_size (__uint32 __UINT32)\nif (HAVE_UINT32_T)\n   set (JSON_UINT32 uint32_t)\nelseif (HAVE___UINT32)\n   set (JSON_UINT32 __uint32)\nelseif (HAVE_UNSIGNED_LONG_INT AND (UNSIGNED_LONG_INT EQUAL 4))\n   set (JSON_UINT32 \"unsigned long\")\nelseif (HAVE_UNSIGNED_INT AND (UNSIGNED_INT EQUAL 4))\n   set (JSON_UINT32 \"unsigned int\")\nelse ()\n      message (FATAL_ERROR \"Could not detect a valid unsigned 32-bit integer type\")\nendif ()\n\ncheck_type_size (uint16_t UINT16_T)\ncheck_type_size (__uint16 __UINT16)\nif (HAVE_UINT16_T)\n   set (JSON_UINT16 uint16_t)\nelseif (HAVE___UINT16)\n   set (JSON_UINT16 __uint16)\nelseif (HAVE_UNSIGNED_INT AND (UNSIGNED_INT EQUAL 2))\n   set (JSON_UINT16 \"unsigned int\")\nelseif (HAVE_UNSIGNED_SHORT AND (UNSIGNED_SHORT EQUAL 2))\n   set (JSON_UINT16 \"unsigned short\")\nelse ()\n      message (FATAL_ERROR \"Could not detect a valid unsigned 16-bit integer type\")\nendif ()\n\ncheck_type_size (uint8_t UINT8_T)\ncheck_type_size (__uint8 __UINT8)\nif (HAVE_UINT8_T)\n   set (JSON_UINT8 uint8_t)\nelseif (HAVE___UINT8)\n   set (JSON_UINT8 __uint8)\nelse ()\n   set (JSON_UINT8 \"unsigned char\")\nendif ()\n\n# Check for ssize_t and SSIZE_T existence.\ncheck_type_size(ssize_t SSIZE_T)\ncheck_type_size(SSIZE_T UPPERCASE_SSIZE_T)\nif(NOT HAVE_SSIZE_T)\n   if(HAVE_UPPERCASE_SSIZE_T)\n      set(JSON_SSIZE SSIZE_T)\n   else()\n      set(JSON_SSIZE int)\n   endif()\nendif()\nset(CMAKE_EXTRA_INCLUDE_FILES \"\")\n\n# Check for all the variants of strtoll\ncheck_function_exists (strtoll HAVE_STRTOLL)\ncheck_function_exists (strtoq HAVE_STRTOQ)\ncheck_function_exists (_strtoi64 HAVE__STRTOI64)\n\n# Figure out what variant we should use\nif (HAVE_STRTOLL)\n   set (JSON_STRTOINT strtoll)\nelseif (HAVE_STRTOQ)\n   set (JSON_STRTOINT strtoq)\nelseif (HAVE__STRTOI64)\n   set (JSON_STRTOINT _strtoi64)\nelse ()\n   # fallback to strtol (32 bit)\n   # this will set all the required variables\n   set (JSON_STRTOINT strtol)\n   set (JSON_INT_T long)\n   set (JSON_INTEGER_FORMAT \"\\\"ld\\\"\")\nendif ()\n\n# if we haven't defined JSON_INT_T, then we have a 64 bit conversion function.\n# detect what to use for the 64 bit type.\n# Note: I will prefer long long if I can get it, as that is what the automake system aimed for.\nif (NOT DEFINED JSON_INT_T)\n   set (JSON_INTEGER_IS_LONG_LONG 1)\n\n   if (HAVE_LONG_LONG_INT AND (LONG_LONG_INT EQUAL 8))\n      set (JSON_INT_T \"long long\")\n   elseif (HAVE_INT64_T)\n      set (JSON_INT_T int64_t)\n   elseif (HAVE___INT64)\n      set (JSON_INT_T __int64)\n   else ()\n      message (FATAL_ERROR \"Could not detect 64 bit type, although I detected the strtoll equivalent\")\n   endif ()\n\n   # Apparently, Borland BCC and MSVC wants I64d,\n   # Borland BCC could also accept LD\n   # and gcc wants ldd,\n   # I am not sure what cygwin will want, so I will assume I64d\n\n   if (WIN32) # matches both msvc and cygwin\n      set (JSON_INTEGER_FORMAT \"\\\"I64d\\\"\")\n   else ()\n      set (JSON_INTEGER_FORMAT \"\\\"lld\\\"\")\n   endif ()\nendif ()\n\ncheck_include_files (locale.h HAVE_LOCALE_H)\ncheck_function_exists(setlocale HAVE_SETLOCALE)\n\n# Check what the inline keyword is.\n# Note that the original JSON_INLINE was always set to just 'inline', so this goes further.\ncheck_function_keywords(\"inline\")\ncheck_function_keywords(\"__inline\")\ncheck_function_keywords(\"__inline__\")\n\nif (HAVE_INLINE)\n   set(JSON_INLINE inline)\nelseif (HAVE___INLINE)\n   set(JSON_INLINE __inline)\nelseif (HAVE___INLINE__)\n   set(JSON_INLINE __inline__)\nelse()\n   # no inline on this platform\n   set (JSON_INLINE)\nendif()\n\ncheck_c_source_compiles (\"int main() { unsigned long val; __sync_bool_compare_and_swap(&val, 0, 1); __sync_add_and_fetch(&val, 1); __sync_sub_and_fetch(&val, 1); return 0; } \" HAVE_SYNC_BUILTINS)\ncheck_c_source_compiles (\"int main() { char l; unsigned long v; __atomic_test_and_set(&l, __ATOMIC_RELAXED); __atomic_store_n(&v, 1, __ATOMIC_RELEASE); __atomic_load_n(&v, __ATOMIC_ACQUIRE); __atomic_add_fetch(&v, 1, __ATOMIC_ACQUIRE); __atomic_sub_fetch(&v, 1, __ATOMIC_RELEASE); return 0; }\" HAVE_ATOMIC_BUILTINS)\n\nif (HAVE_SYNC_BUILTINS)\n  set(JSON_HAVE_SYNC_BUILTINS 1)\nelse()\n  set(JSON_HAVE_SYNC_BUILTINS 0)\nendif()\n\nif (HAVE_ATOMIC_BUILTINS)\n  set(JSON_HAVE_ATOMIC_BUILTINS 1)\nelse()\n  set(JSON_HAVE_ATOMIC_BUILTINS 0)\nendif()\n\nset (JANSSON_INITIAL_HASHTABLE_ORDER 3 CACHE STRING \"Number of buckets new object hashtables contain is 2 raised to this power. The default is 3, so empty hashtables contain 2^3 = 8 buckets.\")\n\n# configure the public config file\nconfigure_file (${CMAKE_CURRENT_SOURCE_DIR}/cmake/jansson_config.h.cmake\n                ${CMAKE_CURRENT_BINARY_DIR}/include/jansson_config.h)\n\n# Copy the jansson.h file to the public include folder\nfile (COPY ${CMAKE_CURRENT_SOURCE_DIR}/src/jansson.h\n           DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include/)\n\nadd_definitions(-DJANSSON_USING_CMAKE)\n\n# configure the private config file\nconfigure_file (${CMAKE_CURRENT_SOURCE_DIR}/cmake/jansson_private_config.h.cmake\n                ${CMAKE_CURRENT_BINARY_DIR}/private_include/jansson_private_config.h)\n\n# and tell the source code to include it\nadd_definitions(-DHAVE_CONFIG_H)\n\ninclude_directories (${CMAKE_CURRENT_BINARY_DIR}/include)\ninclude_directories (${CMAKE_CURRENT_BINARY_DIR}/private_include)\n\n# Add the lib sources.\nfile(GLOB JANSSON_SRC src/*.c)\nif (NOT USE_DTOA)\n   list(FILTER JANSSON_SRC EXCLUDE REGEX \".*dtoa\\\\.c$\")\nendif()\n\nset(JANSSON_HDR_PRIVATE\n   ${CMAKE_CURRENT_SOURCE_DIR}/src/hashtable.h\n   ${CMAKE_CURRENT_SOURCE_DIR}/src/jansson_private.h\n   ${CMAKE_CURRENT_SOURCE_DIR}/src/strbuffer.h\n   ${CMAKE_CURRENT_SOURCE_DIR}/src/utf.h\n   ${CMAKE_CURRENT_BINARY_DIR}/private_include/jansson_private_config.h)\n\nset(JANSSON_HDR_PUBLIC\n   ${CMAKE_CURRENT_BINARY_DIR}/include/jansson_config.h\n   ${CMAKE_CURRENT_SOURCE_DIR}/src/jansson.h)\n\nsource_group(\"Library Sources\" FILES ${JANSSON_SRC})\nsource_group(\"Library Private Headers\" FILES ${JANSSON_HDR_PRIVATE})\nsource_group(\"Library Public Headers\" FILES ${JANSSON_HDR_PUBLIC})\n\nif(JANSSON_BUILD_SHARED_LIBS)\n   add_library(jansson SHARED\n      ${JANSSON_SRC}\n      ${JANSSON_HDR_PRIVATE}\n      ${JANSSON_HDR_PUBLIC}\n      src/jansson.def)\n\n# check if linker support --default-symver\n   list(APPEND CMAKE_REQUIRED_LIBRARIES \"-Wl,--default-symver\")\n   check_c_source_compiles(\n   \"\n   int main (void)\n   {\n      return 0;\n   }\n   \"\n   DSYMVER_WORKS\n   )\n   list(REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES \"-Wl,--default-symver\")\n\n   if (SYMVER_WORKS)\n      set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--default-symver\")\n   else()\n# some linkers may only support --version-script\n      file(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/jansson.sym\" \"JANSSON_${JANSSON_SOVERSION} {\n    global:\n          *;\n};\n\")\n      list(APPEND CMAKE_REQUIRED_LIBRARIES \"-Wl,--version-script,${CMAKE_CURRENT_BINARY_DIR}/jansson.sym\")\n      check_c_source_compiles(\n   \"\n   int main (void)\n   {\n      return 0;\n   }\n   \"\n   VSCRIPT_WORKS\n   )\n      list(REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES \"-Wl,--version-script,${CMAKE_CURRENT_BINARY_DIR}/jansson.sym\")\n      if (VSCRIPT_WORKS)\n         set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--version-script,${CMAKE_CURRENT_BINARY_DIR}/jansson.sym\")\n      endif()\n   endif()\n\n   set_target_properties(jansson PROPERTIES\n      VERSION ${JANSSON_VERSION}\n      SOVERSION ${JANSSON_SOVERSION})\nelse()\n   add_library(jansson STATIC\n      ${JANSSON_SRC}\n      ${JANSSON_HDR_PRIVATE}\n      ${JANSSON_HDR_PUBLIC})\n   set_target_properties(jansson PROPERTIES\n      POSITION_INDEPENDENT_CODE true)\nendif()\n\nif (JANSSON_EXAMPLES)\n\tadd_executable(simple_parse \"${CMAKE_CURRENT_SOURCE_DIR}/examples/simple_parse.c\")\n\ttarget_link_libraries(simple_parse jansson)\nendif()\n\n# For building Documentation (uses Sphinx)\noption(JANSSON_BUILD_DOCS \"Build documentation (uses python-sphinx).\" ON)\nif (JANSSON_BUILD_DOCS)\n   find_package(Sphinx)\n\n   if (NOT SPHINX_FOUND)\n      message(WARNING \"Sphinx not found. Cannot generate documentation!\n      Set -DJANSSON_BUILD_DOCS=OFF to get rid of this message.\")\n   else()\n      if (Sphinx_VERSION_STRING VERSION_LESS 1.0)\n         message(WARNING \"Your Sphinx version is too old!\n               This project requires Sphinx v1.0 or above to produce\n               proper documentation (you have v${Sphinx_VERSION_STRING}).\n               You will get output but it will have errors.\")\n      endif()\n\n      # configured documentation tools and intermediate build results\n      set(BINARY_BUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_build\")\n\n      # Sphinx cache with pickled ReST documents\n      set(SPHINX_CACHE_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_doctrees\")\n\n      # CMake could be used to build the conf.py file too,\n      # eg it could automatically write the version of the program or change the theme.\n      # if(NOT DEFINED SPHINX_THEME)\n      #    set(SPHINX_THEME default)\n      # endif()\n      #\n      # if(NOT DEFINED SPHINX_THEME_DIR)\n      #    set(SPHINX_THEME_DIR)\n      # endif()\n      #\n      # configure_file(\n      #    \"${CMAKE_CURRENT_SOURCE_DIR}/conf.py.in\"\n      #    \"${BINARY_BUILD_DIR}/conf.py\"\n      #    @ONLY)\n\n      # TODO: Add support for all sphinx builders: http://sphinx-doc.org/builders.html\n\n      # Add documentation targets.\n      set(DOC_TARGETS html)\n\n      option(JANSSON_BUILD_MAN \"Create a target for building man pages.\" ON)\n\n      if (JANSSON_BUILD_MAN)\n         if (Sphinx_VERSION_STRING VERSION_LESS 1.0)\n            message(WARNING \"Sphinx version 1.0 > is required to build man pages. You have v${Sphinx_VERSION_STRING}.\")\n         else()\n            list(APPEND DOC_TARGETS man)\n         endif()\n      endif()\n\n      option(JANSSON_BUILD_LATEX \"Create a target for building latex docs (to create PDF).\" OFF)\n\n      if (JANSSON_BUILD_LATEX)\n         find_package(LATEX)\n\n         if (NOT LATEX_COMPILER)\n            message(\"Couldn't find Latex, can't build latex docs using Sphinx\")\n         else()\n            message(\"Latex found! If you have problems building, see Sphinx documentation for required Latex packages.\")\n            list(APPEND DOC_TARGETS latex)\n         endif()\n      endif()\n\n      # The doc target will build all documentation targets.\n      add_custom_target(doc)\n\n      foreach (DOC_TARGET ${DOC_TARGETS})\n         add_custom_target(${DOC_TARGET}\n            ${SPHINX_EXECUTABLE}\n            # -q   # Enable for quiet mode\n            -b ${DOC_TARGET}\n            -d \"${SPHINX_CACHE_DIR}\"\n            # -c \"${BINARY_BUILD_DIR}\" # enable if using cmake-generated conf.py\n            \"${CMAKE_CURRENT_SOURCE_DIR}/doc\"\n            \"${CMAKE_CURRENT_BINARY_DIR}/doc/${DOC_TARGET}\"\n            COMMENT \"Building ${DOC_TARGET} documentation with Sphinx\")\n\n         add_dependencies(doc ${DOC_TARGET})\n      endforeach()\n\n      message(\"Building documentation enabled for: ${DOC_TARGETS}\")\n   endif()\nendif ()\n\n\noption(JANSSON_WITHOUT_TESTS \"Don't build tests ('make test' to execute tests)\" OFF)\n\nif (NOT JANSSON_WITHOUT_TESTS)\n   option(JANSSON_TEST_WITH_VALGRIND \"Enable valgrind tests.\" OFF)\n\n   ENABLE_TESTING()\n\n   if (JANSSON_TEST_WITH_VALGRIND)\n      # TODO: Add FindValgrind.cmake instead of having a hardcoded path.\n\n      add_definitions(-DVALGRIND)\n\n      # enable valgrind\n      set(CMAKE_MEMORYCHECK_COMMAND valgrind)\n      set(CMAKE_MEMORYCHECK_COMMAND_OPTIONS\n         \"--error-exitcode=1 --leak-check=full --show-reachable=yes --track-origins=yes -q\")\n\n      set(MEMCHECK_COMMAND\n         \"${CMAKE_MEMORYCHECK_COMMAND} ${CMAKE_MEMORYCHECK_COMMAND_OPTIONS}\")\n      separate_arguments(MEMCHECK_COMMAND)\n   endif ()\n\n   #\n   # Test suites.\n   #\n   if (CMAKE_COMPILER_IS_GNUCC)\n      add_definitions(-Wall -Wextra -Wdeclaration-after-statement)\n   endif ()\n\n   set(api_tests\n         test_array\n         test_chaos\n         test_copy\n         test_dump\n         test_dump_callback\n         test_equal\n         test_fixed_size\n         test_load\n         test_load_callback\n         test_loadb\n         test_number\n         test_object\n         test_pack\n         test_simple\n         test_sprintf\n         test_unpack)\n\n   # Doing arithmetic on void pointers is not allowed by Microsofts compiler\n   # such as secure_malloc and secure_free is doing, so exclude it for now.\n   if (NOT MSVC)\n      list(APPEND api_tests test_memory_funcs)\n   endif()\n\n   # Helper macro for building and linking a test program.\n   macro(build_testprog name dir)\n       add_executable(${name} ${dir}/${name}.c)\n       add_dependencies(${name} jansson)\n       target_link_libraries(${name} jansson)\n   endmacro(build_testprog)\n\n   # Create executables and tests/valgrind tests for API tests.\n   foreach (test ${api_tests})\n      build_testprog(${test} ${CMAKE_CURRENT_SOURCE_DIR}/test/suites/api)\n\n      if (JANSSON_TEST_WITH_VALGRIND)\n         add_test(memcheck__${test}\n             ${MEMCHECK_COMMAND} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${test}\n             WORKING_DIRECTORY ${JANSSON_TEMP_DIR})\n      else()\n         add_test(${test}\n             ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${test}\n             WORKING_DIRECTORY ${JANSSON_TEMP_DIR})\n      endif ()\n   endforeach ()\n\n   # Test harness for the suites tests.\n   build_testprog(json_process ${CMAKE_CURRENT_SOURCE_DIR}/test/bin)\n\n   set(SUITE_TEST_CMD ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/json_process)\n   set(SUITES encoding-flags valid invalid invalid-unicode)\n   foreach (SUITE ${SUITES})\n       file(GLOB TESTDIRS test/suites/${SUITE}/*)\n\n       foreach (TESTDIR ${TESTDIRS})\n         if (IS_DIRECTORY ${TESTDIR})\n            get_filename_component(TNAME ${TESTDIR} NAME)\n\n            if ((USE_DTOA AND EXISTS ${TESTDIR}/skip_if_dtoa) OR\n                (NOT USE_DTOA AND EXISTS ${TESTDIR}/skip_unless_dtoa))\n               continue()\n            endif()\n\n            if (JANSSON_TEST_WITH_VALGRIND)\n               add_test(memcheck__${SUITE}__${TNAME}\n                        ${MEMCHECK_COMMAND} ${SUITE_TEST_CMD} ${TESTDIR})\n            else()\n               add_test(${SUITE}__${TNAME}\n                        ${SUITE_TEST_CMD} ${TESTDIR})\n            endif()\n\n            if ((${SUITE} STREQUAL \"valid\" OR ${SUITE} STREQUAL \"invalid\") AND NOT EXISTS ${TESTDIR}/nostrip)\n               if (JANSSON_TEST_WITH_VALGRIND)\n                  add_test(memcheck__${SUITE}__${TNAME}__strip\n                           ${MEMCHECK_COMMAND} ${SUITE_TEST_CMD} --strip ${TESTDIR})\n               else()\n                  add_test(${SUITE}__${TNAME}__strip\n                           ${SUITE_TEST_CMD} --strip ${TESTDIR})\n               endif()\n            endif ()\n         endif ()\n       endforeach ()\n   endforeach ()\n\n   if (JANSSON_COVERAGE)\n      SETUP_TARGET_FOR_COVERAGE(coverage coverage ctest)\n   endif ()\n\n   # Enable using \"make check\" just like the autotools project.\n   # By default cmake creates a target \"make test\"\n   add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND}\n                     DEPENDS json_process ${api_tests})\nendif ()\n\n#\n# Installation preparation.\n#\n\n# Allow the user to override installation directories.\nset(JANSSON_INSTALL_LIB_DIR       lib CACHE PATH \"Installation directory for libraries\")\nset(JANSSON_INSTALL_BIN_DIR       bin CACHE PATH \"Installation directory for executables\")\nset(JANSSON_INSTALL_INCLUDE_DIR   include CACHE PATH \"Installation directory for header files\")\n\nif(WIN32 AND NOT CYGWIN)\n  set(DEF_INSTALL_CMAKE_DIR cmake)\nelse()\n  set(DEF_INSTALL_CMAKE_DIR lib/cmake/jansson)\nendif()\n\nset(JANSSON_INSTALL_CMAKE_DIR ${DEF_INSTALL_CMAKE_DIR} CACHE PATH \"Installation directory for CMake files\")\n\n# Create pkg-conf file.\n# (We use the same files as ./configure does, so we\n#  have to defined the same variables used there).\nset(prefix      ${CMAKE_INSTALL_PREFIX})\nset(exec_prefix \"\\${prefix}\")\nset(libdir      \"\\${exec_prefix}/${JANSSON_INSTALL_LIB_DIR}\")\nset(includedir  \"\\${prefix}/${JANSSON_INSTALL_INCLUDE_DIR}\")\nset(VERSION     ${JANSSON_DISPLAY_VERSION})\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/jansson.pc.in\n               ${CMAKE_CURRENT_BINARY_DIR}/jansson.pc @ONLY)\n\n# Make sure the paths are relative.\nforeach(p LIB BIN INCLUDE CMAKE)\n    set(var JANSSON_INSTALL_${p}_DIR)\nendforeach()\n\n# Generate the config file for the build-tree.\nset(JANSSON__INCLUDE_DIRS \"${CMAKE_CURRENT_BINARY_DIR}/include\")\nset(JANSSON_INCLUDE_DIRS ${JANSSON__INCLUDE_DIRS} CACHE PATH \"Jansson include directories\")\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/janssonConfig.cmake.in\n               ${CMAKE_CURRENT_BINARY_DIR}/janssonConfig.cmake\n               @ONLY)\n\n\n# Generate the config file for the installation tree.\ninclude(CMakePackageConfigHelpers)\n\nwrite_basic_package_version_file(\n  \"${CMAKE_CURRENT_BINARY_DIR}/cmake/janssonConfigVersion.cmake\"\n  VERSION ${JANSSON_VERSION}\n  COMPATIBILITY ExactVersion\n)\n\nconfigure_package_config_file(\n    \"cmake/janssonConfig.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake/janssonConfig.cmake\"\n    INSTALL_DESTINATION \"${JANSSON_INSTALL_CMAKE_DIR}\"\n)\n\n#\n# Install targets.\n#\noption(JANSSON_INSTALL \"Generate installation target\" ON)\nif (JANSSON_INSTALL)\n  install(TARGETS jansson\n          EXPORT janssonTargets\n          LIBRARY DESTINATION \"lib\"\n          ARCHIVE DESTINATION \"lib\"\n          RUNTIME DESTINATION \"bin\"\n          INCLUDES DESTINATION \"include\")\n\n  install(FILES ${JANSSON_HDR_PUBLIC}\n          DESTINATION \"include\")\n\n  # Install the pkg-config.\n  install(FILES\n          ${CMAKE_CURRENT_BINARY_DIR}/jansson.pc\n          DESTINATION lib/pkgconfig)\n\n  # Install the configs.\n  install(FILES\n      ${CMAKE_CURRENT_BINARY_DIR}/cmake/janssonConfig.cmake\n      ${CMAKE_CURRENT_BINARY_DIR}/cmake/janssonConfigVersion.cmake\n      DESTINATION \"${JANSSON_INSTALL_CMAKE_DIR}\")\n\n  # Install exports for the install-tree.\n  install(EXPORT janssonTargets\n          NAMESPACE jansson::\n          DESTINATION \"${JANSSON_INSTALL_CMAKE_DIR}\")\nendif()\n\n# For use when simply using add_library from a parent project to build jansson.\nset(JANSSON_LIBRARIES jansson CACHE STRING \"jansson libraries\")\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.20703125,
          "content": "Hi, and thanks for contributing!\n\nPlease remember to add tests and documentation for new functionality. Backwards incompatible changes or features that are not directly related to JSON are likely to be rejected.\n"
        },
        {
          "name": "CleanSpec.mk",
          "type": "blob",
          "size": 2.1748046875,
          "content": "# Copyright (C) 2007 The Android Open Source Project\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# If you don't need to do a full clean build but would like to touch\n# a file or delete some intermediate files, add a clean step to the end\n# of the list.  These steps will only be run once, if they haven't been\n# run before.\n#\n# E.g.:\n#     $(call add-clean-step, touch -c external/sqlite/sqlite3.h)\n#     $(call add-clean-step, rm -rf $(PRODUCT_OUT)/obj/STATIC_LIBRARIES/libz_intermediates)\n#\n# Always use \"touch -c\" and \"rm -f\" or \"rm -rf\" to gracefully deal with\n# files that are missing or have been moved.\n#\n# Use $(PRODUCT_OUT) to get to the \"out/target/product/blah/\" directory.\n# Use $(OUT_DIR) to refer to the \"out\" directory.\n#\n# If you need to re-do something that's already mentioned, just copy\n# the command and add it to the bottom of the list.  E.g., if a change\n# that you made last week required touching a file and a change you\n# made today requires touching the same file, just copy the old\n# touch step and add it to the end of the list.\n#\n# ************************************************\n# NEWER CLEAN STEPS MUST BE AT THE END OF THE LIST\n# ************************************************\n\n# For example:\n#$(call add-clean-step, rm -rf $(OUT_DIR)/target/common/obj/APPS/AndroidTests_intermediates)\n#$(call add-clean-step, rm -rf $(OUT_DIR)/target/common/obj/JAVA_LIBRARIES/core_intermediates)\n#$(call add-clean-step, find $(OUT_DIR) -type f -name \"IGTalkSession*\" -print0 | xargs -0 rm -f)\n#$(call add-clean-step, rm -rf $(PRODUCT_OUT)/data/*)\n\n# ************************************************\n# NEWER CLEAN STEPS MUST BE AT THE END OF THE LIST\n# ************************************************\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.8671875,
          "content": "# License\n\nThis project is licensed under the MIT license, except where otherwise noted.\nThe full text of the MIT license is included below.\n\n## MIT License\n\nCopyright (c) 2009-2024 Petri Lehtinen <petri@digip.org>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n## Exceptions\n\n### `src/dtoa.c`\n\nCopyright (c) 1991, 2000, 2001 by Lucent Technologies.\n\nPermission to use, copy, modify, and distribute this software for any\npurpose without fee is hereby granted, provided that this entire notice\nis included in all copies of any software which is or includes a copy\nor modification of this software and in all copies of the supporting\ndocumentation for such software.\n\nTHIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\nREPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\nOF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.3466796875,
          "content": "EXTRA_DIST = CHANGES LICENSE README.rst CMakeLists.txt cmake android examples scripts\nSUBDIRS = doc src test\n\n# \"make distcheck\" builds the dvi target, so use it to check that the\n# documentation is built correctly.\ndvi:\n\t$(MAKE) SPHINXOPTS_EXTRA=-W html\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = jansson.pc\n\nTESTS = scripts/clang-format-check\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 1.8779296875,
          "content": "Jansson README\n==============\n\n.. |tests|  image:: https://github.com/akheron/jansson/workflows/tests/badge.svg\n.. |appveyor|  image::  https://ci.appveyor.com/api/projects/status/lmhkkc4q8cwc65ko\n\n|tests| |appveyor|\n\nJansson_ is a C library for encoding, decoding and manipulating JSON\ndata. Its main features and design principles are:\n\n- Simple and intuitive API and data model\n\n- `Comprehensive documentation`_\n\n- No dependencies on other libraries\n\n- Full Unicode support (UTF-8)\n\n- Extensive test suite\n\nJansson is licensed under the `MIT license`_; see LICENSE in the\nsource distribution for details.\n\nCompilation and Installation\n----------------------------\n\nIf you obtained a ``jansson-X.Y.tar.*`` tarball from GitHub Releases, just use\nthe standard autotools commands::\n\n   $ ./configure\n   $ make\n   $ make install\n\nTo run the test suite, invoke::\n\n   $ make check\n\nIf the source has been checked out from a Git repository, the ``configure``\nscript has to be generated first. The easiest way is to use autoreconf::\n\n   $ autoreconf -i\n\n\nDocumentation\n-------------\n\nDocumentation is available at http://jansson.readthedocs.io/en/latest/.\n\nThe documentation source is in the ``doc/`` subdirectory. To generate\nHTML documentation, invoke::\n\n   $ make html\n\nThen, point your browser to ``doc/_build/html/index.html``. Sphinx_\n1.0 or newer is required to generate the documentation.\n\n\nCommunity\n---------\n\n* `Documentation <http://jansson.readthedocs.io/en/latest/>`_\n* `Issue tracker <https://github.com/akheron/jansson/issues>`_\n* `Mailing list <http://groups.google.com/group/jansson-users>`_\n* `Wiki <https://github.com/akheron/jansson/wiki>`_ contains some development documentation\n\n.. _Jansson: http://www.digip.org/jansson/\n.. _`Comprehensive documentation`: http://jansson.readthedocs.io/en/latest/\n.. _`MIT license`: http://www.opensource.org/licenses/mit-license.php\n.. _Sphinx: http://sphinx.pocoo.org/\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.12890625,
          "content": "# Security Policy\n\n## Supported Versions\n\nLatest released version.\n\n## Reporting a Vulnerability\n\nSend an email to petri@digip.org.\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.4736328125,
          "content": "environment:\n  matrix:\n    - VS: Visual Studio 9 2008\n    - VS: Visual Studio 10 2010\n    - VS: Visual Studio 11 2012\n    - VS: Visual Studio 12 2013\n    - VS: Visual Studio 14 2015\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      VS: Visual Studio 15 2017\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n      VS: Visual Studio 16 2019\n\nbuild_script:\n  - md build\n  - cd build\n  - cmake -G \"%VS%\" ..\n  - cmake --build . --config Release\n  - ctest --output-on-failure\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 6.001953125,
          "content": "AC_PREREQ([2.60])\nAC_INIT([jansson], [2.14], [https://github.com/akheron/jansson/issues])\n\nAC_CONFIG_AUX_DIR([.])\nAM_INIT_AUTOMAKE([1.10 foreign])\n\nAC_CONFIG_SRCDIR([src/value.c])\nAC_CONFIG_HEADERS([jansson_private_config.h])\n\n# Checks for programs.\nAC_PROG_CC\nAC_PROG_CXX\nAC_PROG_LIBTOOL\nAM_CONDITIONAL([GCC], [test x$GCC = xyes])\n\n# Checks for libraries.\n\n# Checks for header files.\nAC_CHECK_HEADERS([endian.h fcntl.h locale.h sched.h unistd.h sys/param.h sys/stat.h sys/time.h sys/types.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_TYPE_INT32_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT16_T\nAC_TYPE_UINT8_T\nAC_TYPE_LONG_LONG_INT\n\nAC_C_BIGENDIAN\n\nAC_C_INLINE\ncase $ac_cv_c_inline in\n    yes) json_inline=inline;;\n    no) json_inline=;;\n    *) json_inline=$ac_cv_c_inline;;\nesac\nAC_SUBST([json_inline])\n\n# Checks for library functions.\nAC_CHECK_FUNCS([close getpid gettimeofday open read setlocale sched_yield strtoll])\n\nAC_MSG_CHECKING([for gcc __sync builtins])\nhave_sync_builtins=no\nAC_TRY_LINK(\n  [], [unsigned long val; __sync_bool_compare_and_swap(&val, 0, 1); __sync_add_and_fetch(&val, 1); __sync_sub_and_fetch(&val, 1);],\n  [have_sync_builtins=yes],\n)\nif test \"x$have_sync_builtins\" = \"xyes\"; then\n  AC_DEFINE([HAVE_SYNC_BUILTINS], [1],\n    [Define to 1 if gcc's __sync builtins are available])\n  json_have_sync_builtins=1\nelse\n  json_have_sync_builtins=0\nfi\nAC_SUBST([json_have_sync_builtins])\nAC_MSG_RESULT([$have_sync_builtins])\n\nAC_MSG_CHECKING([for gcc __atomic builtins])\nhave_atomic_builtins=no\nAC_TRY_LINK(\n  [], [char l; unsigned long v; __atomic_test_and_set(&l, __ATOMIC_RELAXED); __atomic_store_n(&v, 1, __ATOMIC_RELEASE); __atomic_load_n(&v, __ATOMIC_ACQUIRE); __atomic_add_fetch(&v, 1, __ATOMIC_ACQUIRE); __atomic_sub_fetch(&v, 1, __ATOMIC_RELEASE);],\n  [have_atomic_builtins=yes],\n)\nif test \"x$have_atomic_builtins\" = \"xyes\"; then\n  AC_DEFINE([HAVE_ATOMIC_BUILTINS], [1],\n    [Define to 1 if gcc's __atomic builtins are available])\n  json_have_atomic_builtins=1\nelse\n  json_have_atomic_builtins=0\nfi\nAC_SUBST([json_have_atomic_builtins])\nAC_MSG_RESULT([$have_atomic_builtins])\n\ncase \"$ac_cv_type_long_long_int$ac_cv_func_strtoll\" in\n     yesyes) json_have_long_long=1;;\n     *) json_have_long_long=0;;\nesac\nAC_SUBST([json_have_long_long])\n\n# Features\nAC_ARG_ENABLE([urandom],\n  [AS_HELP_STRING([--disable-urandom],\n    [Don't use /dev/urandom to seed the hash function])],\n  [use_urandom=$enableval], [use_urandom=yes])\n\nif test \"x$use_urandom\" = xyes; then\nAC_DEFINE([USE_URANDOM], [1],\n  [Define to 1 if /dev/urandom should be used for seeding the hash function])\nfi\n\nAC_ARG_ENABLE([windows-cryptoapi],\n  [AS_HELP_STRING([--disable-windows-cryptoapi],\n    [Don't use CryptGenRandom to seed the hash function])],\n  [use_windows_cryptoapi=$enableval], [use_windows_cryptoapi=yes])\n\nif test \"x$use_windows_cryptoapi\" = xyes; then\nAC_DEFINE([USE_WINDOWS_CRYPTOAPI], [1],\n  [Define to 1 if CryptGenRandom should be used for seeding the hash function])\nfi\n\nAC_ARG_ENABLE([initial-hashtable-order],\n  [AS_HELP_STRING([--enable-initial-hashtable-order=VAL],\n    [Number of buckets new object hashtables contain is 2 raised to this power. The default is 3, so empty hashtables contain 2^3 = 8 buckets.])],\n  [initial_hashtable_order=$enableval], [initial_hashtable_order=3])\nAC_DEFINE_UNQUOTED([INITIAL_HASHTABLE_ORDER], [$initial_hashtable_order],\n  [Number of buckets new object hashtables contain is 2 raised to this power. E.g. 3 -> 2^3 = 8.])\n\nAC_ARG_ENABLE([Bsymbolic],\n  [AS_HELP_STRING([--disable-Bsymbolic],\n    [Avoid linking with -Bsymbolic-function])],\n  [], [with_Bsymbolic=check])\n\nif test \"x$with_Bsymbolic\" != \"xno\" ; then\n    AC_MSG_CHECKING([for -Bsymbolic-functions linker flag])\n    saved_LDFLAGS=\"${LDFLAGS}\"\n    LDFLAGS=-Wl,-Bsymbolic-functions\n    AC_TRY_LINK(\n      [], [int main (void) { return 0; }],\n      [AC_MSG_RESULT([yes])\n       have_Bsymbolic=yes],\n      [AC_MSG_RESULT([no])\n       have_Bsymbolic=no]\n    )\n    LDFLAGS=\"${saved_LDFLAGS}\"\n\n    if test \"x$with_Bsymbolic\" = \"xcheck\" ; then\n        with_Bsymbolic=$have_Bsymbolic;\n    fi\n    if test \"x$with_Bsymbolic:x$have_Bsymbolic\" = \"xyes:xno\" ; then\n        AC_MSG_ERROR([linker support is required for -Bsymbolic])\n    fi\nfi\n\nAS_IF([test \"x$with_Bsymbolic\" = \"xyes\"], [JSON_BSYMBOLIC_LDFLAGS=-Wl[,]-Bsymbolic-functions])\nAC_SUBST(JSON_BSYMBOLIC_LDFLAGS)\n\n# Enable symbol versioning on GNU libc\nJSON_SYMVER_LDFLAGS=\nAC_CHECK_DECL([__GLIBC__], [JSON_SYMVER_LDFLAGS=-Wl,--default-symver])\nAC_SUBST([JSON_SYMVER_LDFLAGS])\n\nAC_ARG_ENABLE([dtoa],\n  [AS_HELP_STRING([--enable-dtoa], [Use dtoa for optimal floating point to string conversion])],\n  [case \"$enableval\" in\n    yes) dtoa=yes ;;\n    no)  dtoa=no ;;\n    *) AC_MSG_ERROR([bad value ${enableval} for --enable-dtoa]) ;;\n  esac], [dtoa=yes])\nif test \"$dtoa\" = \"yes\"; then\n  AC_DEFINE([DTOA_ENABLED], [1],\n      [Define to 1 to use dtoa to convert floating points to strings])\nfi\nAM_CONDITIONAL([DTOA_ENABLED], [test \"$dtoa\" = \"yes\"])\n\nAC_ARG_ENABLE([ossfuzzers],\n  [AS_HELP_STRING([--enable-ossfuzzers],\n    [Whether to generate the fuzzers for OSS-Fuzz])],\n  [have_ossfuzzers=yes], [have_ossfuzzers=no])\nAM_CONDITIONAL([USE_OSSFUZZERS], [test \"x$have_ossfuzzers\" = \"xyes\"])\n\n\nAC_SUBST([LIB_FUZZING_ENGINE])\nAM_CONDITIONAL([USE_OSSFUZZ_FLAG], [test \"x$LIB_FUZZING_ENGINE\" = \"x-fsanitize=fuzzer\"])\nAM_CONDITIONAL([USE_OSSFUZZ_STATIC], [test -f \"$LIB_FUZZING_ENGINE\"])\n\n\nif test x$GCC = xyes; then\n    AC_MSG_CHECKING(for -Wno-format-truncation)\n    wnoformat_truncation=\"-Wno-format-truncation\"\n    AS_IF([${CC} -Wno-format-truncation -Werror -S -o /dev/null -xc /dev/null > /dev/null 2>&1],\n      [AC_MSG_RESULT(yes)],\n      [AC_MSG_RESULT(no)\n      wnoformat_truncation=\"\"])\n\n    AM_CFLAGS=\"-Wall -Wextra -Wdeclaration-after-statement -Wshadow ${wnoformat_truncation}\"\nfi\nAC_SUBST([AM_CFLAGS])\n\nAC_CONFIG_FILES([\n        jansson.pc\n        Makefile\n        doc/Makefile\n        src/Makefile\n        src/jansson_config.h\n        test/Makefile\n        test/bin/Makefile\n        test/ossfuzz/Makefile\n        test/suites/Makefile\n        test/suites/api/Makefile\n])\nAC_OUTPUT\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "jansson.pc.in",
          "type": "blob",
          "size": 0.2333984375,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: Jansson\nDescription: Library for encoding, decoding and manipulating JSON data\nVersion: @VERSION@\nLibs: -L${libdir} -ljansson\nCflags: -I${includedir}\n"
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 1.6015625,
          "content": "#!/bin/sh\n#\n# Use this script to easily make releases of Jansson. It configures\n# the source tree, and builds and signs all tarballs.\n\ndie() {\n    echo $1 >&2\n    exit 1\n}\n\nconfirm() {\n    local answer\n    read -p \"$1 [yN]: \" answer\n    [ \"$answer\" = \"Y\" -o \"$answer\" = \"y\" ] || exit 0\n}\n\nset -e\n[ -f configure.ac ] || die \"Must be run at project root directory\"\n\n# Determine version\nv=$(grep AC_INIT configure.ac | sed -r 's/.*, \\[(.+?)\\],.*/\\1/')\n[ -n \"$v\" ] || die \"Unable to determine version\"\nconfirm \"Version is $v, proceed?\"\n\n# Sanity checks\nvi=$(grep version-info src/Makefile.am | sed 's/^[ \\t]*//g' | cut -d\" \" -f2)\nconfirm \"Libtool version-info is $vi, proceed?\"\n\nr=$(grep 'Released ' CHANGES | head -n 1)\nconfirm \"Last CHANGES entry says \\\"$r\\\", proceed??\"\n\ndv=$(grep ^version doc/conf.py | sed -r \"s/.*'(.*)'.*/\\1/\")\nif [ \"$dv\" != \"$v\" ]; then\n    die \"Documentation version ($dv) doesn't match library version\"\nfi\n\n[ -f Makefile ] && make distclean || true\nrm -f jansson-$v.tar.*\nrm -rf jansson-$v-doc\nrm -f jansson-$v-doc.tar.*\n\nautoreconf -fi\n./configure\n\n# Run tests and make gz source tarball\n: ${VALGRIND:=1}\nexport VALGRIND\nmake distcheck\n\n# Make bzip2 source tarball\nmake dist-bzip2\n\n# Sign source tarballs\nfor s in gz bz2; do\n    gpg --detach-sign --armor jansson-$v.tar.$s\ndone\n\n# Build documentation\nmake html\nmv doc/_build/html jansson-$v-doc\n\n# Make and sign documentation tarballs\nfor s in gz bz2; do\n    [ $s = gz ] && compress=gzip\n    [ $s = bz2 ] && compress=bzip2\n    tar cf - jansson-$v-doc | $compress -9 -c > jansson-$v-doc.tar.$s\n    gpg --detach-sign --armor jansson-$v-doc.tar.$s\ndone\n\necho \"All done\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}