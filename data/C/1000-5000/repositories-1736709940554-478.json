{
  "metadata": {
    "timestamp": 1736709940554,
    "page": 478,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vvaltchev/tilck",
      "stars": 2394,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 4.732421875,
          "content": "# -----------------------------------------------------------------------------\n# IMPORTANT NOTE: this clang-format YML config file does NOT define precisely\n# Tilck's coding style, but makes the tool to format any C file using a coding\n# style as close as possible to the one used in Tilck's source. Maybe one day\n# the tool will be powerful enough to support every style. In the meanwhile,\n# the rules in this file can be used as a rough guideline.\n#\n# One of the fundamental differences between Tilck's coding style and the best\n# clang-format can offer is that in reality much more exceptions (and penalties)\n# exist. For example, while its good to have space around binary operators like\n# '+', '-', '*', ',' etc., it makes sense to strip that space when that can\n# avoid a statement to be broken in two lines. Clang-format does not allow such\n# exceptions. Probably the solution here would be to do some renaming and use\n# shorter identifiers. But it's super-hard to choose good and very short names\n# sometimes. Also, as far as I've observed, clang-format cannot align bitfield\n# definitions in structs. In addition to that, clang-format does not understand\n# the use of one-line { ... } entries in macros: it expands them to multiple\n# lines. It's all about minor things, but it's extremely irritating when after\n# the format, the code looks worse then before.\n# -----------------------------------------------------------------------------\n\n---\nLanguage:        Cpp\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: false\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortLambdasOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 3\nContinuationIndentWidth: 3\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: true\nFixNamespaceComments: true\nForEachMacros:\n  - list_for_each\n  - list_for_each_ro\n  - list_for_each_reverse\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '.*'\n    Priority:        1\nIncludeIsMainRegex: ''\nIndentCaseLabels: true\nIndentPPDirectives: BeforeHash\nIndentWidth:     3\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 2\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 50\nPenaltyBreakBeforeFirstCallParameter: 100000\nPenaltyBreakComment: 200\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 100\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 1\nPointerAlignment: Right\nReflowComments:  true\nSortIncludes:    false\nSortUsingDeclarations: false\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: false\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nStatementMacros:\nTabWidth:        3\nUseTab:          Never\n...\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.072265625,
          "content": "\ncomment: false\n\ncoverage:\n  range: 0..80\n  round: nearest\n  precision: 1\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "build\ntoolchain\ntoolchain2\nother_builds\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1962890625,
          "content": "build/\nbochsrc-disk.bxrc\nbochsrc.bxrc\ntoolchain/\ntoolchain2/\n.gdb_history\nGPATH\nGRTAGS\nGTAGS\ntags\nrel_build/*\n.vscode/ipch/\nother_build*\ntcci_*\n.mypy_cache\n.vscode/.ropeproject\n__pycache__\n.gcc_tc_ver\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.681640625,
          "content": "\nnotifications:\n  email:\n    on_success: never\n    on_failure: always\n\n# In order to ask travis to install packages:\n# sudo: required AND under matrix/include:\n# addons:\n#   apt:\n#     packages:\n#       - qemu-system-x86\n# [ at the same level of env ]\n\nmatrix:\n  include:\n    - os: linux\n      dist: trusty\n      sudo: false\n      language: generic\n      env: NO_BUSYBOX=1 RELEASE=0\n\nbefore_install:\n  - mkdir -p toolchain2/cache\n  - (cd toolchain2/cache && wget http://vvaltchev.github.io/cache/mtools-4.0.23.tar.gz)\n  - ./scripts/build_toolchain --skip-install-pkgs\n  - ./scripts/build_toolchain -s build_gtest\n\ninstall:\n  - make -j\n  - make -j gtests\n\nscript:\n  - MALLOC_CHECK_=2 ./build/gtests\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 31.1142578125,
          "content": "# SPDX-License-Identifier: BSD-2-Clause\ncmake_minimum_required(VERSION 3.22)\n\n#\n# Project name and base version.\n#\n# Note: the version here is the one currently *under development*. For released\n# versions, checkout GIT tags like \"release-0.1.1\".\n#\nproject(tilck VERSION 0.1.4 LANGUAGES C CXX ASM)\n\ninclude(CheckCCompilerFlag)\ninclude(other/cmake/utils.cmake)\ninclude(other/cmake/errors.cmake)\n\nset(CMAKE_VERBOSE_MAKEFILE off)\nset(BUILD_SHARED_LIBRARIES off)           # disable shared libs globally\nset(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS)    # disable -rdynamic globally\nset(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS)  # disable -rdynamic globally\nset(GLOB_CONF_DEP CONFIGURE_DEPENDS)\n\nset(DEFAULT_TARGET_ARCH \"i386\")\n\nif (\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"x86_64\")\n\n   set(HOST_ARCH \"x86_64\")\n   set(HOST_ARCH_BITS 64)\n   set(HOST_ARCH_FAMILY \"generic_x86\")\n\nelseif (\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"amd64\")\n\n   set(HOST_ARCH \"x86_64\")\n   set(HOST_ARCH_BITS 64)\n   set(HOST_ARCH_FAMILY \"generic_x86\")\n\nelseif (\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"i686\")\n\n   set(HOST_ARCH \"i386\")\n   set(HOST_ARCH_BITS 32)\n   set(HOST_ARCH_FAMILY \"generic_x86\")\n\nelseif (\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"i386\")\n\n   set(HOST_ARCH \"i386\")\n   set(HOST_ARCH_BITS 32)\n   set(HOST_ARCH_FAMILY \"generic_x86\")\n\nelseif(\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"aarch64\")\n\n   set(HOST_ARCH \"aarch64\")\n   set(HOST_ARCH_BITS 64)\n   set(HOST_ARCH_FAMILY \"arm\")\n\nendif()\n\n# BEGIN [Environment-controlled \"sticky\" cache variables]\n\n# Main variables\ndefine_env_cache_str_var(TCROOT_PARENT ${CMAKE_SOURCE_DIR})\ndefine_env_cache_str_var(TCROOT ${TCROOT_PARENT}/toolchain2)\ndefine_env_cache_str_var(ARCH ${DEFAULT_TARGET_ARCH})\n\ndefine_env_cache_bool_var(TEST_GCOV)\ndefine_env_cache_bool_var(KERNEL_GCOV)\n\n# Board defaults and stick variable\nif (${ARCH} STREQUAL \"riscv64\")\n   set(ARCH_DEFAULT_BOARD     \"qemu-virt\")\nelse()\n   set(ARCH_DEFAULT_BOARD     \"\")\nendif()\ndefine_env_cache_str_var(BOARD \"${ARCH_DEFAULT_BOARD}\")\n\n# USE_SYSCC-related variables\ndefine_env_cache_bool_var(USE_SYSCC)\ndefine_env_cache_str_var(GCOV \"gcov\")\n\n# Debug cache variables\n\n# We don't really need to cache the values of CC/CXX, but is useful to that\n# in order to prevent user errors. Since CC/CXX affect the build only the first\n# time CMake is run, it makes sense to check for the next runs whether the env\n# vars CC/CXX changed (if set) by the user or an incorrect script. In case\n# they are, we have to stop the build because their new value will be otherwise\n# completely ignored. In order words, fail *early*.\n\ndefine_env_cache_str_var(CC \"<unset>\")\ndefine_env_cache_str_var(CXX \"<unset>\")\n\n# END [Environment-controlled \"sticky\" cache variables]\n\n\n# BEGIN [Setup of toolchain-related variables]\n\nset(BUILD_SCRIPTS       ${CMAKE_SOURCE_DIR}/scripts/build_scripts)\nset(BUILD_APPS          ${CMAKE_BINARY_DIR}/scripts/build_apps)\nset(BTC_SCRIPT          ${CMAKE_SOURCE_DIR}/scripts/build_toolchain)\nset(COVERAGE_HTML_DIR   ${CMAKE_BINARY_DIR}/coverage_html)\nset(TCROOT_BA           ${TCROOT}/host)\nset(LCOV_VER            \"1.15\")\nfile(RELATIVE_PATH      BTC_SCRIPT_REL ${CMAKE_SOURCE_DIR} ${BTC_SCRIPT})\nfile(RELATIVE_PATH      TCROOT_REL     ${CMAKE_SOURCE_DIR}     ${TCROOT})\n\nif (NOT EXISTS ${TCROOT})\n   message(FATAL_ERROR \"Toolchain not found: run ${BTC_SCRIPT_REL} first.\")\nendif()\n\n#\n# Use as default value for GCC_TC_VER, the contents of:\n#      ${TCROOT}/.gcc_tc_ver_${ARCH}\n# That file has been generated by the `build_toolchain` script which used\n# the GCC_TC_VER environment variable or the default value if it was unset.\n#\n\nif (EXISTS ${TCROOT}/.gcc_tc_ver_${ARCH})\n\n   file(READ ${TCROOT}/.gcc_tc_ver_${ARCH} SAVED_GCC_TC_VAR)\n\nelse()\n\n   message(FATAL_ERROR\n           \"${TCROOT}/.gcc_tc_ver_${ARCH} not found: run ${BTC_SCRIPT_REL}\")\n\nendif()\n\n# Define our special \"sticky\" env. variable GCC_TC_VER\ndefine_env_cache_str_var(GCC_TC_VER \"${SAVED_GCC_TC_VAR}\")\n\n#\n# GCC_TC_VER check\n#\n\nset(GCC_TC_CONF ${CMAKE_SOURCE_DIR}/other/gcc_tc_conf)\nfile(READ ${GCC_TC_CONF}/${ARCH}/min_ver MIN_GCC_TC_VER)\n\nif (\"${GCC_TC_VER}\" VERSION_LESS \"${MIN_GCC_TC_VER}\")\n\n   set (msg, \"\")\n\n   string(\n      CONCAT msg\n\n      \"GCC_TC_VER (${GCC_TC_VER}) < \"\n      \"MIN_GCC_TC_VER (${MIN_GCC_TC_VER}).\\n\"\n      \"This probably happened because the minimum GCC version has been bumped \"\n      \"by a source change. It's perfectly normal. Steps to fix:\\n\"\n      \"   0. unset \\$GCC_TC_VER # if set\\n\"\n      \"   1. rm -rf ${CMAKE_BINARY_DIR}\\n\"\n      \"   2. ${BTC_SCRIPT_REL} --clean\\n\"\n      \"   3. ${BTC_SCRIPT_REL}\\n\"\n      \"   4. rebuild\"\n   )\n   message(FATAL_ERROR \"${msg}\")\n   unset(msg)\n\nendif()\n\n# END [Setup of toolchain-related variables]\n\nif (USE_SYSCC)\n   set(SYS_CC \"${CMAKE_C_COMPILER}\")\n   set(SYS_CXX \"${CMAKE_CXX_COMPILER}\")\nendif()\n\nif (\"${ARCH}\" STREQUAL \"i386\")\n   if (\"${HOST_ARCH}\" STREQUAL \"${ARCH}\")\n      if (USE_SYSCC)\n         show_same_arch_build_warning()\n      else()\n         show_missing_use_syscc_error()\n      endif()\n   endif()\nendif()\n\n# Reset the default flags\nset(CMAKE_C_FLAGS \"\")\nset(CMAKE_C_FLAGS_INT \"\")\nset(CMAKE_C_FLAGS_DEBUG \"\")\nset(CMAKE_C_FLAGS_MINSIZEREL \"\")\nset(CMAKE_C_FLAGS_RELWITHDEBINFO \"\")\nset(CMAKE_C_FLAGS_RELEASE \"\")\n\nset(CMAKE_CXX_FLAGS \"\")\nset(CMAKE_CXX_FLAGS_INT \"\")\nset(CMAKE_CXX_FLAGS_DEBUG \"\")\nset(CMAKE_CXX_FLAGS_MINSIZEREL \"\")\nset(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"\")\nset(CMAKE_CXX_FLAGS_RELEASE \"\")\n\n# Compile options\n\n# Non-boolean kernel options\nset(TIMER_HZ            250 CACHE STRING \"System timer HZ\")\nset(USER_STACK_PAGES     16 CACHE STRING \"User apps stack size in pages\")\nset(TTY_COUNT             2 CACHE STRING \"Number of TTYs (default)\")\nset(MAX_HANDLES          16 CACHE STRING \"Max handles/process (keep small)\")\n\nset(FBCON_BIGFONT_THR   160 CACHE STRING\n    \"Max term cols with 8x16 font. After that, a 16x32 font will be used\")\n\n# Other non-boolean options\n\nset(FATPART_CLUSTER_SIZE  8 CACHE STRING\n    \"Cluster size (in sectors) of the FAT ramdisk\")\n\nset(TERM_SCROLL_LINES 5 CACHE STRING\n    \"Number of lines to scroll on Shift+PgUp/PgDown\")\n\nset(\n\n   USERAPPS_CFLAGS\n   \"-ggdb -Os -Wall -Wno-unused-parameter\"\n\n   CACHE STRING \"Build flags for C/C++ user programs\"\n)\n\n# Kernel options (enabled by default)\n\nset(KRN_TRACK_NESTED_INTERR ON CACHE BOOL\n    \"Track the nested interrupts\")\n\nset(PANIC_SHOW_STACKTRACE ON CACHE BOOL\n    \"Show the stacktrace in case of a kernel panic\")\n\nset(DEBUG_CHECKS ON CACHE BOOL\n    \"Keep checking ASSERTs and other debug checks even in release builds\")\n\nset(KERNEL_SELFTESTS ON CACHE BOOL\n    \"Compile-in self-tests in the kernel\")\n\nset(KERNEL_STACK_ISOLATION ON CACHE BOOL\n    \"Put the kernel stack in hi the vmem in isolated pages\")\n\nset(FB_CONSOLE_BANNER ON CACHE BOOL\n    \"Show a top banner when using fb_console\")\n\nset(FB_CONSOLE_CURSOR_BLINK ON CACHE BOOL\n    \"Support cursor blinking in the fb_console\")\n\nif ($ENV{TILCK_NO_LOGO})\n   set(KERNEL_SHOW_LOGO OFF CACHE BOOL\n      \"Show Tilck's logo after boot\")\nelse()\n   set(KERNEL_SHOW_LOGO ON CACHE BOOL\n      \"Show Tilck's logo after boot\")\nendif()\n\nset(KERNEL_SYMBOLS ON CACHE BOOL\n    \"Keep symbol tables loaded in the kernel for backtraces and self tests\")\n\nif (${ARCH} STREQUAL \"riscv64\")\n   set(BOOTLOADER_U_BOOT ON CACHE BOOL\n       \"Build the U-BOOT bootloader\")\nelse()\n   set(BOOTLOADER_LEGACY ON CACHE BOOL\n       \"Build the legacy bootloader\")\n\n   set(BOOTLOADER_EFI ON CACHE BOOL\n       \"Build the EFI bootloader\")\nendif()\n\nset(SERIAL_CON_IN_VIDEO_MODE ON CACHE BOOL\n    \"Always open a console on /dev/ttyS0 even in video mode (w/o -sercon)\")\n\nset(KRN_PRINTK_ON_CURR_TTY ON CACHE BOOL\n    \"Make printk() always flush on the current TTY\")\n\nset(TYPICAL_DEVEL_USERAPPS ON CACHE BOOL\n    \"Include in Tilck's ramdisk some apps for testing the kernel\")\n\nset(BOOT_INTERACTIVE ON CACHE BOOL\n    \"Have user-interactive commands in the bootloaders\")\n\nset(KERNEL_64BIT_OFFT ON CACHE BOOL\n    \"Make offt be 64-bit even on 32-bit systems\")\n\nset(KRN_CLOCK_DRIFT_COMP ON CACHE BOOL\n    \"Compensate periodically for the clock drift in the system time\")\n\nset(KRN32_LIN_VADDR ON CACHE BOOL\n    \"Place the 32-bit kernel in the default linear mapping\")\n\nset(USERAPPS_busybox ON CACHE BOOL \"Include BUSYBOX (recommended)\")\n\nset(TRACE_PRINTK_ENABLED_ON_BOOT ON CACHE BOOL\n    \"Make trace_printk() to be always enabled since boot time\")\n\n# Kernel options (disabled by default)\n\nset(KRN_PAGE_FAULT_PRINTK OFF CACHE BOOL\n    \"Use printk() to display info when a process is killed due to page fault\")\n\nset(KRN_NO_SYS_WARN OFF CACHE BOOL\n    \"Show a warning when a not-implemented syscall is called\")\n\nset(KERNEL_UBSAN OFF CACHE BOOL \"Turn on the UBSAN for the kernel\")\n\nset(KERNEL_BIG_IO_BUF OFF CACHE BOOL \"Use a much-bigger buffer for I/O\")\n\nset(TERM_BIG_SCROLL_BUF OFF CACHE BOOL\n    \"Use a 4x bigger scrollback buffer for the terminal\")\n\nset(KERNEL_SYSCC OFF CACHE BOOL\n    \"Use system's compiler for the kernel instead of toolchain's one\")\n\nset(KERNEL_FORCE_TC_ISYSTEM OFF CACHE BOOL \"\\\nDANGEROUS. Do NOT use for other than static analysis builds. \\\nBRUTALLY forces the build system to use tc's sysroot \\\nfor system headers even when a system compiler is used.\\\n\")\n\nset(FORK_NO_COW OFF CACHE BOOL\n    \"Make fork() to perform a full-copy instead of using copy-on-write\")\n\nset(MMAP_NO_COW OFF CACHE BOOL\n    \"Make mmap() to allocate real memory instead mapping the zero-page + COW\")\n\nset(PANIC_SHOW_REGS OFF CACHE BOOL\n    \"Show the content of the main registers in case of kernel panic\")\n\nset(KMALLOC_HEAVY_STATS OFF CACHE BOOL\n    \"Count the number of allocations for each distinct size\")\n\nset(KMALLOC_FREE_MEM_POISONING OFF CACHE BOOL\n    \"Make kfree() to poison the memory\")\n\nset(KMALLOC_SUPPORT_DEBUG_LOG OFF CACHE BOOL\n    \"Compile-in kmalloc debug messages\")\n\nset(KMALLOC_SUPPORT_LEAK_DETECTOR OFF CACHE BOOL\n    \"Compile-in kmalloc's leak detector\")\n\nset(BOOTLOADER_POISON_MEMORY OFF CACHE BOOL\n    \"Make the bootloader to poison all the available memory\")\n\nset(WCONV OFF CACHE BOOL\n    \"Compile with -Wconversion when clang is used\")\n\nset(FAT_TEST_DIR OFF CACHE BOOL\n    \"Create a test dir with many files in the FAT32 init ramdisk\")\n\nset(PS2_DO_SELFTEST OFF CACHE BOOL\n    \"Do PS/2 controller selftests in init_kb()\")\n\nset(PS2_VERBOSE_DEBUG_LOG OFF CACHE BOOL\n    \"Enable developer-only verbose logging\")\n\nset(FB_CONSOLE_USE_ALT_FONTS OFF CACHE BOOL\n    \"Use the fonts in other/alt_fonts instead of the default ones\")\n\nset(KRN_RESCHED_ENABLE_PREEMPT OFF CACHE BOOL\n    \"Check for need_resched and yield in enable_preemption()\")\n\nset(KRN_MINIMAL_TIME_SLICE OFF CACHE BOOL\n    \"Make the time slice to be 1 tick in order to trigger more race conditions\")\n\nset(TINY_KERNEL OFF CACHE BOOL \"\\\nAdvanced option, use carefully. Forces the Tilck kernel \\\nto be as small as possible. Incompatibile with many modules \\\nlike console, fb, tracing and several kernel options like \\\nKERNEL_SELFTESTS\")\n\nset(INIT_REPORT_PROC_EXIT OFF CACHE BOOL\n    \"Make init to report on TTY when children (often acquired) exit\")\n\nset(PREFERRED_GFX_MODE_W \"800\" CACHE STRING\n    \"Preferred video mode (width)\")\n\nset(PREFERRED_GFX_MODE_H \"600\" CACHE STRING\n    \"Preferred video mode (height)\")\n\nset(KMALLOC_FIRST_HEAP_SIZE_KB \"auto\" CACHE STRING\n    \"Size in KB of kmalloc's first heap. Must be multiple of 64.\")\n\nset(PCI_VENDORS_LIST OFF CACHE BOOL\n    \"Compile-in the list of all known PCI vendors\")\n\nset(EFI_BOOTLOADER_DEBUG OFF CACHE BOOL\n    \"Enable an early DEBUG dialog (see docs/debugging.md)\")\n\nset(FB_CONSOLE_FAILSAFE_OPT OFF CACHE BOOL\n    \"Optimize fb_console's failsafe mode for older machines\")\n\n# KERNEL_SERCON is different than SERIAL_CON_IN_VIDEO_MODE because it makes\n# the serial console and primary and only console. SERIAL_CON_IN_VIDEO_MODE\n# simply enables _also_ the serial console even when booted in video mode,\n# as a second console.\nset(KERNEL_SERCON OFF CACHE BOOL\n    \"Boot only using the serial console even if we have a console module\")\n\nset(KERNEL_SAT OFF CACHE BOOL\n    \"Enable the sched alive thread on boot (used for CI/CD runs)\")\n\nlist(\n   APPEND no_arch_modules_whitelist\n\n   console\n   tracing\n   sysfs\n)\n\nlist(\n   APPEND disabled_modules_list\n\n   # No modules in this list, at the moment\n)\n\nif (${ARCH} STREQUAL \"riscv64\")\n\n   list(\n      APPEND disabled_modules_list\n\n      # The riscv compiler does not support the acpi module\n      acpi\n)\n\nendif()\n\nfile(GLOB modules ${GLOB_CONF_DEP} \"${CMAKE_SOURCE_DIR}/modules/*\")\n\nforeach(modpath ${modules})\n\n   get_filename_component(modname ${modpath} NAME_WE)\n\n   if (NOT IS_DIRECTORY ${modpath})\n      continue()\n   endif()\n\n   list(APPEND modules_list ${modname})\n   list(FIND disabled_modules_list ${modname} _index)\n\n   if (${_index} GREATER -1)\n      set(MOD_${modname} OFF CACHE BOOL \"Compile-in the ${modname} module\")\n   else()\n      set(MOD_${modname} ON CACHE BOOL \"Compile-in the ${modname} module\")\n   endif()\n\nendforeach()\n\nif (TINY_KERNEL)\n\n   if (NOT ${CMAKE_BUILD_TYPE} STREQUAL \"MinSizeRel\")\n      message(FATAL_ERROR \"TINY_KERNEL=1 requires CMAKE_BUILD_TYPE=MinSizeRel\")\n   endif()\n\n   if (KERNEL_GCOV)\n      message(FATAL_ERROR \"TINY_KERNEL=1 requires KERNEL_GCOV=0\")\n   endif()\n\n   if (KERNEL_SELFTESTS)\n      message(WARNING \"TINY_KERNEL=1, expected KERNEL_SELFTESTS=0\")\n   endif()\n\n   if (KERNEL_SYMBOLS)\n      message(WARNING \"TINY_KERNEL=1, expected KERNEL_SYMBOLS=0\")\n   endif()\n\n   if (KERNEL_SHOW_LOGO)\n      message(WARNING \"TINY_KERNEL=1, expected KERNEL_SHOW_LOGO=0\")\n   endif()\n\n   if (PCI_VENDORS_LIST)\n      message(WARNING \"TINY_KERNEL=1, expected PCI_VENDORS_LIST=0\")\n   endif()\n\nendif()\n\nif (KMALLOC_FIRST_HEAP_SIZE_KB STREQUAL \"auto\")\n\n   if (TINY_KERNEL)\n      set(KMALLOC_FIRST_HEAP_SIZE_KB_VAL 64)\n   else()\n      set(KMALLOC_FIRST_HEAP_SIZE_KB_VAL 128)\n   endif()\n\nelse()\n   set(KMALLOC_FIRST_HEAP_SIZE_KB_VAL ${KMALLOC_FIRST_HEAP_SIZE_KB})\nendif()\n\n\n# Create a list with all the kernel opts, in order to dump it later\n# -------------------------------------------------------------------\n\nlist(\n   APPEND kernel_opts_list\n\n   # Various options\n   ARCH\n   BOARD\n   USE_SYSCC\n\n   # Non-boolean options\n   TIMER_HZ\n   USER_STACK_PAGES\n   FATPART_CLUSTER_SIZE\n   PREFERRED_GFX_MODE_W\n   PREFERRED_GFX_MODE_H\n   KMALLOC_FIRST_HEAP_SIZE_KB\n   KMALLOC_FIRST_HEAP_SIZE_KB_VAL\n\n   # Boolean options ENABLED by default\n   KRN_TRACK_NESTED_INTERR\n   PANIC_SHOW_STACKTRACE\n   DEBUG_CHECKS\n   KERNEL_SELFTESTS\n   KERNEL_STACK_ISOLATION\n   FB_CONSOLE_BANNER\n   KRN_PRINTK_ON_CURR_TTY\n   KERNEL_SHOW_LOGO\n   KERNEL_SYMBOLS\n   BOOTLOADER_LEGACY\n   BOOTLOADER_EFI\n   BOOTLOADER_U_BOOT\n   BOOT_INTERACTIVE\n   KRN_NO_SYS_WARN\n   KERNEL_64BIT_OFFT\n   KRN_CLOCK_DRIFT_COMP\n   KRN32_LIN_VADDR\n   USERAPPS_busybox\n   TRACE_PRINTK_ENABLED_ON_BOOT\n\n   # Boolean options DISABLED by default\n   KERNEL_UBSAN\n   KERNEL_BIG_IO_BUF\n   KRN_RESCHED_ENABLE_PREEMPT\n   TERM_BIG_SCROLL_BUF\n   TEST_GCOV\n   KERNEL_GCOV\n   KERNEL_SYSCC\n   KERNEL_FORCE_TC_ISYSTEM\n   FORK_NO_COW\n   MMAP_NO_COW\n   PANIC_SHOW_REGS\n   KMALLOC_HEAVY_STATS\n   KMALLOC_FREE_MEM_POISONING\n   KMALLOC_SUPPORT_DEBUG_LOG\n   KMALLOC_SUPPORT_LEAK_DETECTOR\n   BOOTLOADER_POISON_MEMORY\n   WCONV\n   FAT_TEST_DIR\n   PS2_DO_SELFTEST\n   PS2_VERBOSE_DEBUG_LOG\n   FB_CONSOLE_USE_ALT_FONTS\n   TINY_KERNEL\n   INIT_REPORT_PROC_EXIT\n   PCI_VENDORS_LIST\n   EFI_BOOTLOADER_DEBUG\n   FB_CONSOLE_FAILSAFE_OPT\n)\n\n###########################################################\n\nif (BOARD)\n   set(BOARD_BSP        ${CMAKE_SOURCE_DIR}/other/bsp/${ARCH}/${BOARD})\n   include(${BOARD_BSP}/board_bsp.cmake)\nendif()\n\nif (${ARCH} STREQUAL \"i386\")\n\n   set(ARCH_SHORT       \"x86\")\n   set(ARCH_FAMILY      \"generic_x86\")\n   set(ARCH_ELF_NAME    \"elf32-i386\")\n   set(ARCH_LD_OUTPUT   \"elf_i386\")\n   set(ARCH_BFD         \"i386\")\n   set(ARCH_GCC_TC      \"i686\")\n   set(ARCH_GCC_FLAGS   \"-m32 -march=${ARCH_GCC_TC}\")\n   set(ARCH_BITS        32)\n\n   # Fundamental kernel MM constants\n   set(BASE_VA            0xC0000000)  # Better not touch!\n   set(KERNEL_PADDR       0x00100000)  # Better not touch!\n\n   if (KRN32_LIN_VADDR)\n      set(LINEAR_MAPPING_MB         896)  # Cannot be > 896 MB because of HiMem\n      set(KERNEL_BASE_VA     ${BASE_VA})\n      set(KERNEL_VADDR       0xC0100000)  # BASE_VA + KERNEL_PADDR\n   else()\n      set(LINEAR_MAPPING_MB         880)  # Make room for the kernel and extra\n      set(KERNEL_BASE_VA     0xF7000000)  # LINEAR_MAPPING_END\n      set(KERNEL_VADDR       0xF7100000)  # LINEAR_MAPPING_END + KERNEL_PADDR\n   endif()\n\nelseif (${ARCH} STREQUAL \"x86_64\")\n\n   set(ARCH_SHORT       \"x86_64\")\n   set(ARCH_FAMILY      \"generic_x86\")\n   set(ARCH_ELF_NAME    \"elf64-x86-64\")\n   set(ARCH_LD_OUTPUT   \"elf_x86_64\")\n   set(ARCH_BFD         \"i386:x86-64\")\n   set(ARCH_GCC_TC      \"x86_64\")\n   set(ARCH_GCC_FLAGS   \"\")\n   set(ARCH_BITS        64)\n\n   # Fundamental kernel MM constants\n   set(BASE_VA                0x100000000000)  # +16 TB\n   set(KERNEL_PADDR               0x00100000)  # Better not touch (for now)\n   set(LINEAR_MAPPING_MB                4096)  # Might be updated.\n   set(KERNEL_BASE_VA     0xFFFFFFFF80000000)\n   set(KERNEL_VADDR       0xFFFFFFFF80100000)  # -2 GB + 1 MB\n\nelseif (${ARCH} STREQUAL \"riscv64\")\n\n   set(ARCH_SHORT       \"riscv64\")\n   set(ARCH_FAMILY      \"riscv\")\n   set(ARCH_ELF_NAME    \"elf64-littleriscv\")\n   set(ARCH_LD_OUTPUT   \"elf64lriscv\")\n   set(ARCH_BFD         \"riscv:rv64\")\n   set(ARCH_GCC_TC      \"riscv64\")\n   set(ARCH_GCC_FLAGS   \"-march=rv64imafdc -mabi=lp64d -mcmodel=medany\")\n   set(ARCH_GCC_FLAGS   \"${ARCH_GCC_FLAGS} -D__riscv64\")\n   set(ARCH_BITS        64)\n\n   # Fundamental kernel MM constants\n   set(BASE_VA                     0x2000000000)  # +128 GB\n\n   if (KRN32_LIN_VADDR)\n      set(LINEAR_MAPPING_MB                 896)  # Cannot be > 896 MB\n      set(KERNEL_BASE_VA             ${BASE_VA})\n      set(KERNEL_VADDR             0x2000200000)  # BASE_VA + 2MB\n   else()\n      set(LINEAR_MAPPING_MB                 896)  # todo: Cannot be > 896 MB\n      set(KERNEL_BASE_VA     0xFFFFFFFF80000000)  # -2 GB\n      set(KERNEL_VADDR       0xFFFFFFFF80200000)  # -2 GB + 2MB\n   endif()\n\nelse()\n\n   message(FATAL_ERROR \"Architecture '${ARCH}' not supported.\")\n\nendif()\n\nmessage(STATUS \"TCROOT: ${TCROOT}\")\nmessage(STATUS \"GCC_TC_VER: ${GCC_TC_VER}\")\n\nset(BUSYBOX_CONFIG            ${TCROOT}/${ARCH}/busybox/.config)\nset(NCURSES_INST              ${TCROOT}/${ARCH}/ncurses/install)\n\nstring(REPLACE                \".\" \"_\" GCC_TC_VER_ \"${GCC_TC_VER}\")\nset(GCC_NAME_PFX              gcc_${GCC_TC_VER_}_${ARCH})\n\n# BEGIN [ARCH-dependent paths]\n\n   # Main toolchain (musl)\n   set(GCC_TC_ROOT            ${TCROOT_BA}/${GCC_NAME_PFX}_musl)\n   set(GCC_TC_LIBC_DIRNAME    ${ARCH_GCC_TC}-buildroot-linux-musl)\n   set(GCC_TC_SYSROOT         ${GCC_TC_ROOT}/${GCC_TC_LIBC_DIRNAME}/sysroot)\n   set(GCC_TC_ISYSTEM         ${GCC_TC_SYSROOT}/usr/include)\n   set(GCC_TOOLCHAIN          ${GCC_TC_ROOT}/bin)\n\n   # Glibc toolchain\n   set(GCC_TC_GLIBC_ROOT      ${TCROOT_BA}/${GCC_NAME_PFX}_glibc)\n   set(GCC_TOOLCHAIN_GLIBC    ${GCC_TC_GLIBC_ROOT}/bin)\n\n# END [ARCH-dependent paths]\n\nif (USE_SYSCC)\n\n   if (NOT EXISTS ${TCROOT}/${ARCH}/musl/install/bin/musl-gcc)\n      show_no_musl_syscc_error()\n   endif()\n\nendif()\n\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_C_STANDARD_REQUIRED ON)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nset(msg \"SYS C compiler: ${CMAKE_C_COMPILER_ID}\")\nset(msg \"${msg} ${CMAKE_C_COMPILER_VERSION}\")\nmessage(STATUS \"${msg}\")\n\nset(msg \"SYS CXX compiler: ${CMAKE_CXX_COMPILER_ID}\")\nset(msg \"${msg} ${CMAKE_CXX_COMPILER_VERSION}\")\nmessage(STATUS \"${msg}\")\n\n# Include the main lists of compiler flags used in the project\ninclude(other/cmake/compiler_flags.cmake)\n\n# Include the funcs for building the kernel modules, used both by the kernel\n# and the gtests targets.\n\ninclude(other/cmake/wrapped_syms.cmake)\ninclude(other/cmake/build_modules.cmake)\n\nforeach (opt ${kernel_opts_list})\n   message(STATUS \"${opt} = ${${opt}}\")\nendforeach()\n\nmessage(STATUS \"****************** KERNEL MODULES *******************\")\n\nforeach (mod ${modules_list})\n   message(STATUS \"Module ${mod} = ${MOD_${mod}}\")\nendforeach()\n\nmessage(STATUS \"**************** END KERNEL MODULES *****************\")\n\n# Config validation checks\n# -----------------------------------\n\nif (NOT ${MOD_console} AND NOT ${MOD_serial})\n   message(FATAL_ERROR \"Cannot disable both the `console` and `serial` mods\")\nendif()\n\nforeach (mod ${modules_list})\n\n   set(deps_file \"${CMAKE_SOURCE_DIR}/modules/${mod}/module_deps\")\n\n   if (NOT ${MOD_${mod}})\n      continue() # Module not compiled-in: skip it.\n   endif()\n\n   list(APPEND enabled_modules_list ${mod})\n\n   if (NOT EXISTS ${deps_file})\n      continue() # No dependencies. Great!\n   endif()\n\n   # Read the dependencies in the `deps` list\n   file(STRINGS ${deps_file} deps)\n\n   foreach (d ${deps})\n      if (NOT ${MOD_${d}})\n         message(FATAL_ERROR \"The module '${mod}' requires the module '${d}'\")\n      endif()\n   endforeach()\n\n   unset(deps)\n   unset(deps_file)\n\nendforeach()\n\nJOIN(\"${enabled_modules_list}\" ${SPACE} ENABLED_MODULES_LIST)\nunset(enabled_modules_list)\n\n################################################################################\n\nset(BOOTLOADER_BIN_FILE    ${CMAKE_BINARY_DIR}/boot/legacy/bootloader.bin)\n\nset(EFI_x86_64_FILE        ${CMAKE_BINARY_DIR}/boot/efi/BOOTX64.EFI)\nset(EFI_ia32_FILE          ${CMAKE_BINARY_DIR}/boot/efi/BOOTIA32.EFI)\nset(KERNEL_UNSTRIPPED      ${CMAKE_BINARY_DIR}/tilck_unstripped)\nset(KERNEL_FILE            ${CMAKE_BINARY_DIR}/tilck)\nset(IMG_FILE               ${CMAKE_BINARY_DIR}/tilck.img)\nset(TILCK_DEVSHELL_PATH    \"/initrd/usr/bin/devshell\")\n\nif (\"${BOOTLOADER_LEGACY}\" OR \"${BOOTLOADER_EFI}\")\n   set(KERNEL_BOOTPART_PATH    \"tilck\")\nendif()\n\nif (${BOOTLOADER_U_BOOT})\n   set(BOOTCMD_FILE        ${CMAKE_BINARY_DIR}/boot/u_boot/u-boot.cmd)\n   set(IMAGE_ITS_FILE      ${CMAKE_BINARY_DIR}/boot/u_boot/fit-image.its)\n   set(BOOT_ENVTXT         ${CMAKE_BINARY_DIR}/boot/u_boot/uEnv.txt)\n   set(BOOT_SCR            ${CMAKE_BINARY_DIR}/boot.scr)\n   set(IMAGE_FIT           ${CMAKE_BINARY_DIR}/image.fit)\n   set(U_BOOT_BIN          ${BOARD_BSP_BOOTLOADER})\nendif()\n\n################################################################################\n# Bootloaders, build-scripts and link-scripts config\n\nset(SECTOR_SIZE              512)  # CHS Logic sector size.  Do *not* touch!\nset(CHS_HPC                   16)  # CHS heads per cylinder. Do *not* touch!\nset(CHS_SPT                   63)  # CHS sectors per track.  Do *not* touch!\nset(BL_ST2_DATA_SEG       0x2000)  # Better not touch!\nset(EARLY_BOOT_SZ           4096)  # Better not touch!\nset(STAGE3_ENTRY_OFF        4096)  # Better not touch!\nset(DISK_UUID         0x4906062b)  # UUID of Tilck's disk image ${IMG_FILE}\nset(MAX_BOOTLOADER_BIN_SZ_KB  64)  # Max size of bootloader.bin (keep updated!)\nset(IMG_SZ_MB                 36)  # Total size of tilck.img\n\nif (KERNEL_UBSAN)\n   set(INITRD_SZ_MB              30)  # Size of the initrd RAMDISK in MB\n   set(BOOTPART_SZ_SEC        10240)  # Size of the boot partition in sectors\nelse()\n   set(INITRD_SZ_MB              32)  # Size of the initrd RAMDISK in MB\n   set(BOOTPART_SZ_SEC         6144)  # Size of the boot partition in sectors\nendif()\n\n\nmath(EXPR IMG_SZ_SEC        \"${IMG_SZ_MB} * 1024 * 1024 / ${SECTOR_SIZE}\")\nmath(EXPR BOOT_SECTORS      \"${MAX_BOOTLOADER_BIN_SZ_KB}*1024/${SECTOR_SIZE}\")\nmath(EXPR BOOTPART_SEC      \"${BOOT_SECTORS}\")\nmath(EXPR BOOTPART_LAST_SEC \"${BOOTPART_SEC} + ${BOOTPART_SZ_SEC} - 1\")\nmath(EXPR INITRD_SECTOR     \"${BOOTPART_LAST_SEC} + 1\")\nmath(EXPR INITRD_SZ_SEC     \"${INITRD_SZ_MB} * 1048576 / ${SECTOR_SIZE}\")\nmath(EXPR INITRD_LAST_SEC   \"${INITRD_SECTOR} + ${INITRD_SZ_SEC} - 1\")\n\nmath(EXPR SEC_PER_CYL   \"${CHS_HPC} * ${CHS_SPT}\")\nmath(EXPR CHS_CYLS      \"(${IMG_SZ_SEC} + ${SEC_PER_CYL} - 1) / ${SEC_PER_CYL}\")\nunset(SEC_PER_CYL)\n\n# For qemu run scripts\nset(QEMU_CHS_GEOM         \"cyls=${CHS_CYLS},heads=${CHS_HPC},secs=${CHS_SPT}\")\nset(QEMU_RAM_OPT          \"\")  # use qemu's default: 128 MB\nset(QEMU_COMMON_OPTS      \"-rtc base=localtime\")\n\nif (${ARCH} STREQUAL \"i386\")\n\n   set(QEMU_ARCH_OPTS      \"-device ide-hd,drive=img1,${QEMU_CHS_GEOM$}\")\n\nelseif (${ARCH} STREQUAL \"x86_64\")\n\n   set(QEMU_ARCH_OPTS      \"-device ide-hd,drive=img1,${QEMU_CHS_GEOM$}\")\n\nelseif (${ARCH} STREQUAL \"riscv64\")\n\n   set(QEMU_ARCH_OPTS      \"-device virtio-blk-device,drive=img1\")\n   set(QEMU_ARCH_OPTS      \"${QEMU_ARCH_OPTS} -M virt\")\n   set(QEMU_ARCH_OPTS      \"${QEMU_ARCH_OPTS} -kernel ${U_BOOT_BIN}\")\n\n   if (${MOD_fb} AND ${MOD_ramfb})\n      set(QEMU_ARCH_OPTS   \"${QEMU_ARCH_OPTS} -vga none -device ramfb\")\n      set(QEMU_ARCH_OPTS   \"${QEMU_ARCH_OPTS} -serial stdio\")\n   else()\n      set(QEMU_ARCH_OPTS   \"${QEMU_ARCH_OPTS} -nographic\")\n   endif()\nendif()\n\n# Set kernel's stack size in number of pages.\nset(KERNEL_STACK_PAGES          4)\n\nset(FATHACK ${BUILD_APPS}/fathack)\n\nif (${ARCH_BITS} EQUAL 32)\n   set(ELFHACK ${BUILD_APPS}/elfhack32)\nelse()\n   set(ELFHACK ${BUILD_APPS}/elfhack64)\nendif()\n\nif (USERAPPS_busybox)\n   set(DEFAULT_SHELL \"/bin/ash\")\n   set(START_SCRIPT \"/initrd/etc/start\")\nelse()\n   set(DEFAULT_SHELL \"/initrd/usr/bin/devshell\")\n   set(START_SCRIPT \"\")\nendif()\n\n# Options for extra apps\ninclude(other/cmake/extra_apps.cmake)\n\n# Generate config files & build scripts (before including sub-dirs)\ninclude(other/cmake/gen_config_pre.cmake)\n\n# Include kernel's noarch sources\ninclude(kernel/sources.cmake)\n\n################################################################################\n# Include sub-directories\n\nif (BOOTLOADER_LEGACY)\n   add_subdirectory(boot/legacy)\nendif()\n\nif (BOOTLOADER_EFI)\n   add_subdirectory(boot/efi)\nendif()\n\nadd_subdirectory(userapps)\nadd_subdirectory(kernel)\nadd_subdirectory(scripts/build_apps)\n\n################################################################################\n\n# Generate config files & build scripts (after including sub-dirs)\ninclude(other/cmake/gen_config_post.cmake)\n\nset(BUILD_SCRIPTS_FILES_LIST \"\")\nfile(GLOB files ${GLOB_CONF_DEP} \"${BUILD_SCRIPTS}/*\")\nforeach (f ${files})\n   list(APPEND BUILD_SCRIPTS_FILES_LIST \"${file}\")\nendforeach()\nunset(files)\n\nset(dd_opts \"status=none\" \"conv=notrunc\")\n\nset(\n   mbr_img_deps\n\n   # We MUST depend on BOTH each wrapper-target AND its OUTPUT in order to\n   # our image file to be re-built when the *.bin files are re-built.\n\n   kernel\n   ${KERNEL_FILE}\n\n   userapps\n   ${USERAPPS_FILES_LIST}\n   ${EXTRA_APPS_LIST}\n\n   fathack\n   mbrhack\n   ${CMAKE_BINARY_DIR}/scripts/build_apps/fathack\n   ${CMAKE_BINARY_DIR}/scripts/build_apps/mbrhack\n   ${CMAKE_SOURCE_DIR}/sysroot/etc/start\n   ${CMAKE_BINARY_DIR}/config_fatpart\n   ${BUILD_SCRIPTS_FILES_LIST}\n)\n\nif (BOOTLOADER_LEGACY)\n   list(\n      APPEND mbr_img_deps\n\n      bootloader\n      ${BOOTLOADER_BIN_FILE}\n   )\nendif()\n\nif (BOOTLOADER_EFI)\n\n   if (${HOST_ARCH} STREQUAL \"i386\")\n\n      if (NOT ${ARCH} STREQUAL \"i386\")\n         message(FATAL_ERROR \"On i386, we can only build i386 Tilck\")\n      endif()\n\n      list(APPEND mbr_img_deps efi_bootloader ${EFI_ia32_FILE})\n\n   else()\n\n      list(APPEND mbr_img_deps efi_bootloader ${EFI_x86_64_FILE})\n\n      if (${ARCH} STREQUAL \"i386\")\n         list(APPEND mbr_img_deps ${EFI_ia32_FILE})\n      endif()\n\n   endif()\nendif()\n\nif (BOOTLOADER_U_BOOT)\n   list(\n      APPEND mbr_img_deps\n\n\n      ${BOOT_ENVTXT}\n      ${BOOTCMD_FILE}\n      ${IMAGE_ITS_FILE}\n      ${U_BOOT_BIN}\n   )\n\n   set(MKIMAGE ${BOARD_BSP_MKIMAGE})\nendif()\n\n# [begin] Set some convenience variables\n   set(MBRHACK ${BUILD_APPS}/mbrhack -q ${IMG_FILE})\n   set(PARTED parted ${IMG_FILE} -s -a minimal)\n   set(CREATE_EMPTY_IMG ${BUILD_SCRIPTS}/create_empty_img_if_necessary)\n\n   # [begin] Setting one long variable, MBRHACK_BPB\n      set(MBRHACK_BPB ${SECTOR_SIZE} ${CHS_HPC})\n      set(MBRHACK_BPB ${MBRHACK_BPB} ${CHS_SPT} ${IMG_SZ_SEC} ${BOOT_SECTORS})\n      set(MBRHACK_BPB ${MBRHACK_BPB} ${BOOT_SECTORS} ${DISK_UUID})\n   # [end]\n# [end]\n\nif (BOOTLOADER_LEGACY)\n   add_custom_command(\n      OUTPUT\n         ${IMG_FILE}\n      COMMAND\n         ${CREATE_EMPTY_IMG} ${IMG_FILE} ${IMG_SZ_MB}\n      COMMAND\n         dd ${dd_opts} if=${BOOTLOADER_BIN_FILE} of=${IMG_FILE}\n      COMMAND\n         ${MBRHACK} bpb ${MBRHACK_BPB}\n      COMMAND\n         ${MBRHACK} add 0x0e ${BOOTPART_SEC} +${BOOTPART_SZ_SEC}\n      COMMAND\n         ${MBRHACK} add 0x0e ${INITRD_SECTOR} +${INITRD_SZ_MB}M\n      COMMAND\n         ${BUILD_BOOTPART}\n      COMMAND\n         ${BUILD_FATPART}\n      COMMAND\n         ${FATHACK} --truncate fatpart\n      COMMAND\n         ${FATHACK} --align_first_data_sector fatpart\n      COMMAND\n         dd ${dd_opts} if=bootpart of=${IMG_FILE} seek=${BOOTPART_SEC}\n      COMMAND\n         dd ${dd_opts} if=fatpart of=${IMG_FILE} seek=${INITRD_SECTOR}\n      DEPENDS\n         ${mbr_img_deps}\n      COMMENT\n         \"Creating a dual-bootable (legacy+efi) image file (MBR)\"\n      VERBATIM\n   )\nelseif (BOOTLOADER_EFI)\n   add_custom_command(\n      OUTPUT\n         ${IMG_FILE}\n      COMMAND\n         ${CREATE_EMPTY_IMG} ${IMG_FILE} ${IMG_SZ_MB}\n      COMMAND\n         ${PARTED} mklabel msdos\n      COMMAND\n         ${PARTED} mkpart primary FAT16 ${BOOTPART_SEC}s ${BOOTPART_LAST_SEC}s\n      COMMAND\n         ${PARTED} mkpart primary FAT16 ${INITRD_SECTOR}s ${INITRD_LAST_SEC}s\n      COMMAND\n         ${BUILD_BOOTPART}\n      COMMAND\n         ${BUILD_FATPART}\n      COMMAND\n         ${FATHACK} --truncate fatpart\n      COMMAND\n         ${FATHACK} --align_first_data_sector fatpart\n      COMMAND\n         dd ${dd_opts} if=bootpart of=${IMG_FILE} seek=${BOOTPART_SEC}\n      COMMAND\n         dd ${dd_opts} if=fatpart of=${IMG_FILE} seek=${INITRD_SECTOR}\n      DEPENDS\n         ${mbr_img_deps}\n      COMMENT\n         \"Creating a EFI-only bootable image file (MBR)\"\n      VERBATIM\n   )\nelseif (BOOTLOADER_U_BOOT)\n   add_custom_command(\n      OUTPUT\n         ${IMG_FILE}\n      COMMAND\n         ${CREATE_EMPTY_IMG} ${IMG_FILE} ${IMG_SZ_MB}\n      COMMAND\n         ${PARTED} mklabel msdos\n      COMMAND\n         ${PARTED} mkpart primary FAT16 ${BOOTPART_SEC}s ${BOOTPART_LAST_SEC}s\n      COMMAND\n         ${PARTED} mkpart primary FAT16 ${INITRD_SECTOR}s ${INITRD_LAST_SEC}s\n      COMMAND\n         ${BUILD_FATPART}\n      COMMAND\n         ${FATHACK} --truncate fatpart\n      COMMAND\n         ${FATHACK} --align_first_data_sector fatpart\n      COMMAND\n         ${MKIMAGE} -f ${IMAGE_ITS_FILE} ${IMAGE_FIT}\n      COMMAND\n         ${MKIMAGE} -C none -T script -d ${BOOTCMD_FILE} ${BOOT_SCR}\n      COMMAND\n         ${BUILD_BOOTPART}\n      COMMAND\n         dd ${dd_opts} if=bootpart of=${IMG_FILE} seek=${BOOTPART_SEC}\n      COMMAND\n         dd ${dd_opts} if=fatpart of=${IMG_FILE} seek=${INITRD_SECTOR}\n      DEPENDS\n         ${mbr_img_deps}\n      COMMENT\n         \"Creating a U-boot fit image\"\n      VERBATIM\n   )\n   unset(MKIMAGE)\nendif()\n\n# [begin] Unset the convenience variables\n   unset(MBRHACK_BPB)\n   unset(CREATE_EMPTY_IMG)\n   unset(PARTED)\n   unset(MBRHACK)\n# [end]\n\nadd_custom_target(\n\n    tilck_image ALL\n\n    DEPENDS\n        ${IMG_FILE}\n)\n\nset(GTEST_VER \"1.12.1\")\nset(GTEST_SOURCE_DIR ${TCROOT}/noarch/gtest-${GTEST_VER}/googletest)\nset(GMOCK_SOURCE_DIR ${TCROOT}/noarch/gtest-${GTEST_VER}/googlemock)\nset(GTEST_TC_BUILD_DIR ${TCROOT}/host_${HOST_ARCH}/gtest-${GTEST_VER})\nset(GMOCK_TC_BUILD_DIR ${TCROOT}/host_${HOST_ARCH}/gmock-${GTEST_VER})\nset(GTEST_BTC_COMMAND \"build_gtest build_gmock\")\n\nadd_custom_command(\n\n   OUTPUT\n      test_fatpart\n\n   COMMAND\n      ${BUILD_TEST_FATPART}\n\n   COMMAND\n      ${BUILD_APPS}/fathack --truncate test_fatpart\n\n   DEPENDS\n      fathack\n      ${CMAKE_BINARY_DIR}/scripts/build_apps/fathack\n)\n\nadd_custom_target(\n\n   test_fatpart_target\n\n   DEPENDS\n      test_fatpart\n)\n\nif (EXISTS ${GTEST_TC_BUILD_DIR} AND EXISTS ${GMOCK_TC_BUILD_DIR})\n   add_subdirectory(tests/unit)\n   add_dependencies(gtests test_fatpart_target)\nelse()\n   no_googletest_lib_fake_error_target()\nendif()\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2998046875,
          "content": "BSD 2-Clause License\n\nCopyright (c) 2016-2024, Vladislav K. Valtchev\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.978515625,
          "content": "\n# This is a commodity fake Makefile that allows people to run the build from the\n# project's root directory, instead of entering in the build/ directory first.\n\nMAKEFLAGS += --no-print-directory\n\nTCROOT_PARENT ?= ./\nTCROOT ?= $(TCROOT_PARENT)/toolchain2\n\nPREREQUISITES := $(TCROOT) build/CMakeCache.txt\n\nall: $(PREREQUISITES)\n\t@$(MAKE) -C build\n\ngtests: $(PREREQUISITES)\n\t@$(MAKE) -C build gtests\n\nclean: $(PREREQUISITES)\n\t@$(MAKE) -C build clean\n\n# Rem is a shortcut for rebuild_img\nrem: $(PREREQUISITES)\n\t@rm -rf ./build/fatpart ./build/tilck.img\n\t@$(MAKE) -C build\n\nrebuild_img: $(PREREQUISITES)\n\t@rm -rf ./build/fatpart ./build/tilck.img\n\t@$(MAKE) -C build\n\nconfig: $(PREREQUISITES)\n\t@./scripts/run_config\n\nmenuconfig: $(PREREQUISITES)\n\t@./scripts/run_config\n\n$(TCROOT):\n\t$(error Before building Tilck, you need to build the toolchain by running ./scripts/build_toolchain)\n\nbuild/CMakeCache.txt:\n\t@echo No CMakeCache.txt found: running CMake first.\n\t@./scripts/cmake_run\n\n.PHONY: all gtests clean\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 8.041015625,
          "content": "3rd party code included in the Tilck project\n----------------------------------------------\n\n**************************************************************************\n******************************* Item 1 ***********************************\n**************************************************************************\n\nFile[1]:\n   common/3rd_party/base64.c\nOriginal source[1]:\n   http://web.mit.edu/freebsd/head/contrib/wpa/src/utils/base64.c\n\nFile[2]:\n   include/3rd_party/base64.h\nOriginal source[2]:\n   http://web.mit.edu/freebsd/head/contrib/wpa/src/utils/base64.h\n\nComments:\n   base64.c has minor changes to make it buildable in this project.\n\nOriginal license:\n\nThis software may be distributed, used, and modified under the terms of\nBSD license:\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\n3. Neither the name(s) of the above-listed copyright holder(s) nor the\n   names of its contributors may be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n**************************************************************************\n******************************* Item 2 ***********************************\n**************************************************************************\n\nFile[1]:\n   boot/legacy/boot_enable_a20.S\nOriginal source[1]:\n   https://wiki.osdev.org/A20_Line\n\nComments:\n   The boot_enable_a20.S file contain code taken from wiki.osdev.org, with\n   additional changes.\n\nOriginal license:\n   As stated here: https://forum.osdev.org/viewtopic.php?f=2&t=23838, for all\n   the osdev.org wiki pages, the CC0-1.0 license applies.\n\n   https://creativecommons.org/publicdomain/zero/1.0/\n   https://creativecommons.org/publicdomain/zero/1.0/legalcode\n\n**************************************************************************\n******************************* Item 3 ***********************************\n**************************************************************************\n\nFile[1]:\n   common/3rd_party/datetime.c\nOriginal source[1]:\n   http://git.musl-libc.org/cgit/musl/tree/src/time/__secs_to_tm.c?h=v1.1.19\n   http://git.musl-libc.org/cgit/musl/tree/src/time/__tm_to_secs.c?h=v1.1.19\n   http://git.musl-libc.org/cgit/musl/tree/src/time/__year_to_secs.c?h=v1.1.19\n   http://git.musl-libc.org/cgit/musl/tree/src/time/__month_to_secs.c?h=v1.1.19\n\nComments:\n   The UNIX timestamp to struct tm and vice-versa from libmusl has been copied\n   and adapter to work with Tilck's struct datetime.\n   Also, the coding style has been changed as well.\n\nOriginal license (MIT), from the COPYRIGHT file:\n\nmusl as a whole is licensed under the following standard MIT license:\n----------------------------------------------------------------------\n\n   Copyright © 2005-2014 Rich Felker, et al.\n   Permission is hereby granted, free of charge, to any person obtaining\n   a copy of this software and associated documentation files (the\n   \"Software\"), to deal in the Software without restriction, including\n   without limitation the rights to use, copy, modify, merge, publish,\n   distribute, sublicense, and/or sell copies of the Software, and to\n   permit persons to whom the Software is furnished to do so, subject to\n   the following conditions:\n   The above copyright notice and this permission notice shall be\n   included in all copies or substantial portions of the Software.\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n**************************************************************************\n******************************* Item 4 ***********************************\n**************************************************************************\n\nFile[1]:\n   include/3rd_party/bithacks.h\n\nOriginal source:\n   http://graphics.stanford.edu/~seander/bithacks.html\n\nOriginal license:\n   PUBLIC DOMAIN (see notice at the beginning of bithacks.h)\n\n**************************************************************************\n******************************* Item 5 ***********************************\n**************************************************************************\n\nFiles:\n   - everything in modules/acpi/acpica/\n   - everything in include/3rd_party/acpi/\n   - everything in include/3rd_party/acpi/platform/ except \"actilck.h\"\n\nOriginal source:\n   https://acpica.org/sites/acpica/files/acpica-unix-20200717.tar.gz\n\nOriginal license:\n   https://acpica.org/sites/acpica/files/licensing.txt\n\n**************************************************************************\n******************************* Item 6 ***********************************\n**************************************************************************\n\nFile[1]:\n   common/3rd_party/fdt_helper.c\nOriginal source[1]:\n   https://github.com/riscv-software-src/opensbi/blob/v1.5/lib/utils/\nfdt/fdt_helper.c\n\nFile[2]:\n   include/3rd_party/fdt_helper.h\nOriginal source[2]:\n   https://github.com/riscv-software-src/opensbi/blob/v1.5/include/\nsbi_utils/fdt/fdt_helper.h\n\nComments:\n   There are six commonly used functions in the original code\n   have been copied, including: fdt_match_node(), fdt_find_match(),\n   fdt_parse_phandle_with_args(), fdt_get_node_addr_size(),\n   fdt_get_node_addr_size_by_name(), fdt_node_is_enabled().\n\nOriginal license, from the COPYING.BSD file:\n\nThe 2-Clause BSD License\nSPDX short identifier: BSD-2-Clause\n\nCopyright (c) 2019 Western Digital Corporation or its affiliates and other\ncontributors.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.9658203125,
          "content": "<p align=\"center\">\n   <img src=\"http://vvaltchev.github.io/tilck_imgs/v2/tilck-logo-v5.png\" alt=\"Tilck - A Tiny Linux-Compatible Kernel\">\n</p>\n\n\nWhat \\ Arch         | i386                 | riscv64      | x86_64 (build)\n--------------------|----------------------|--------------|------------------\nTests               | [![Build Status](https://vkvaltchev.visualstudio.com/Tilck/_apis/build/status%2FTilck%20i386?branchName=master)](https://vkvaltchev.visualstudio.com/Tilck/_build/latest?definitionId=15&branchName=master) | [![Build Status](https://dev.azure.com/vkvaltchev/Tilck/_apis/build/status%2FTilck%20riscv64?branchName=master)](https://dev.azure.com/vkvaltchev/Tilck/_build/latest?definitionId=14&branchName=master) | [![Build Status](https://vkvaltchev.visualstudio.com/Tilck/_apis/build/status%2FTilck%20x86_64?branchName=master)](https://vkvaltchev.visualstudio.com/Tilck/_build/latest?definitionId=16&branchName=master)\nToolchain debian    | [![Build Status](https://dev.azure.com/vkvaltchev/Tilck/_apis/build/status%2FToolchain%2Fdebian%20i386?branchName=master)](https://dev.azure.com/vkvaltchev/Tilck/_build/latest?definitionId=19&branchName=master) | [![Build Status](https://dev.azure.com/vkvaltchev/Tilck/_apis/build/status%2FToolchain%2Fdebian%20riscv64?branchName=master)](https://dev.azure.com/vkvaltchev/Tilck/_build/latest?definitionId=20&branchName=master) | N/A\nToolchain fedora    | [![Build Status](https://dev.azure.com/vkvaltchev/Tilck/_apis/build/status%2FToolchain%2Ffedora%20i386?branchName=master)](https://dev.azure.com/vkvaltchev/Tilck/_build/latest?definitionId=21&branchName=master) | [![Build Status](https://dev.azure.com/vkvaltchev/Tilck/_apis/build/status%2FToolchain%2Ffedora%20riscv64?branchName=master)](https://dev.azure.com/vkvaltchev/Tilck/_build/latest?definitionId=22&branchName=master) | N/A\nToolchain archlinux | [![Build Status](https://dev.azure.com/vkvaltchev/Tilck/_apis/build/status%2FToolchain%2Farch%20i386?branchName=master)](https://dev.azure.com/vkvaltchev/Tilck/_build/latest?definitionId=23&branchName=master) | [![Build Status](https://dev.azure.com/vkvaltchev/Tilck/_apis/build/status%2FToolchain%2Farch%20riscv64?branchName=master)](https://dev.azure.com/vkvaltchev/Tilck/_build/latest?definitionId=24&branchName=master) | N/A\nToolchain openSUSE  | [![Build Status](https://dev.azure.com/vkvaltchev/Tilck/_apis/build/status%2FToolchain%2Fopensuse%20i386?branchName=master)](https://dev.azure.com/vkvaltchev/Tilck/_build/latest?definitionId=25&branchName=master) | [![Build Status](https://dev.azure.com/vkvaltchev/Tilck/_apis/build/status%2FToolchain%2Fopensuse%20riscv64?branchName=master)](https://dev.azure.com/vkvaltchev/Tilck/_build/latest?definitionId=26&branchName=master) | N/A\n\n[![codecov](https://codecov.io/gh/vvaltchev/tilck/branch/master/graph/badge.svg)](https://codecov.io/gh/vvaltchev/tilck) [![License](https://img.shields.io/badge/License-BSD%202--Clause-orange.svg)](https://opensource.org/licenses/BSD-2-Clause)\n\n<a href=\"https://youtu.be/Ce1pMlZO_mI\">\n   <img\n      align=\"right\"\n      src=\"http://vvaltchev.github.io/tilck_imgs/v2/main2-smaller-70p-yt.png\"\n      alt=\"Tilck\"\n   >\n</a>\n\nContents\n----------------------------------------\n* [Overview](#overview)\n  - [What is Tilck?](#what-is-tilck)\n    * [Future plans](#future-plans)\n  - [What Tilck is NOT ?](#what-tilck-is-not-)\n    * [Tilck vs Linux](#tilck-vs-linux)\n* [Features](#features)\n   - [i686 support](#i686-support)\n   - [riscv64 support](#riscv64-support)\n   - [File systems](#file-systems)\n   - [Processes and signals](#processes-and-signals)\n   - [I/O](#io)\n   - [Console](#console)\n   - [Userspace applications](#userspace-applications)\n* [Booting Tilck](#booting-tilck)\n  - [Tilck's bootloader](#tilcks-bootloader)\n  - [3rd-party bootloaders](#3rd-party-bootloaders)\n    * [Grub support](#grub-support)\n* [Documentation and HOWTOs](#documentation-and-howtos)\n  - [Building Tilck](#building-tilck)\n  - [Testing Tilck](#testing-tilck)\n  - [Debugging Tilck](#debugging-tilck)\n    * [Tilck's debug panel](#tilcks-debug-panel)\n* [A comment about user experience](#a-comment-about-user-experience)\n* [FAQ](#faq)\n\nOverview\n----------------------------------------\n\n<p align=\"center\">\n    <img src=\"http://vvaltchev.github.io/tilck_imgs/v2/overview.png\" border=\"0\">\n</p>\n\n### What is Tilck?\n`Tilck` is an educational *monolithic* kernel designed to be Linux-compatible at\nbinary level. It runs on i686 and RISCV64 at the moment. Project's small-scale\nand simple design makes it the **perfect playground** for playing in kernel mode\nwhile retaining the ability to compare how the *very same* *usermode bits* run on\nthe Linux kernel as well. That's a **rare feature** in the realm of educational\nkernels. Because of that, building a program for Tilck requires just a `gcc-musl`\ntoolchain from [bootlin.com](https://toolchains.bootlin.com). Tilck has **no need**\nto have its own set of custom written applications, like most educational kernels do.\nIt just runs mainstream Linux programs like the **BusyBox** suite. While the\nLinux-compatibility and the monolithic design might seem a limitation from the OS\nresearch point of view, on the other side, such design bring the whole project much\ncloser to *real-world* applications in the future, compared to the case where some\nserious (or huge) effort is required to port pre-existing software on it. Also, nothing\nstops Tilck from implementing custom non-Linux syscalls that aware apps might take\nadvantage of.\n\n#### Future plans\nIn the long term, `Tilck` might become widespread for **embedded systems** on\nwhich a fully deterministic and ultra low-latency system is required. \nWith a fair amount of luck, `Tilck` might be able to fill the gap between\n*Embedded Linux* and typical real-time operating systems like *FreeRTOS* or\n*Zephyr*. The kernel already runs on RISCV64 and at some point it will be ported\nto the `ARM` family. It might be adapted to run on MMU-less CPUs as well. Tilck\nwould be a perfect fit for such use cases because consuming a tiny amount of RAM\nhas always been a key point in Tilck's design. Indeed, the kernel can boot and\nrun on a QEMU machine with just 3 MB of memory *today*. \n\nIn addition to that, adding a basic support for networking and storage is part of\nthe plans even if details have not been defined yet. Networking support might be\nlimited to UDP + IP (at least at the beginning) and usable on a limited set of\nnetwork cards. The same applies for storage: not all kinds of block devices will\nbe supported, and a few filesystems (maybe just fat32 and ext2) will implemented\nin the kernel. The support for FUSE filesystems will be considered.\n\nOne major milestone for the project will be to support both networking and storage\nfor a specific SoC like Raspberry Pi 3 (or 4) but that could possibly happen only\nafter Tilck has been ported to ARM64.\n\n### What Tilck is NOT ?\n * An attempt to re-write and/or replace the Linux kernel. Tilck is a completely\ndifferent kernel that has a *partial* compatibility with Linux just in order to\ntake advantage of its programs and toolchains. Also, that helps a lot to validate\nits correctness: if a program works correctly on Linux, it must work the same way\non Tilck as well (minus not-implemented features). **But**, having a fair amount\nof Linux programs working on it, is just a *starting point*: with time, Tilck\nwill evolve in a different way and it will have its own unique set of features as\nwell.\n\n* A kernel suitable for a *desktop* operating system. No X server works on Tilck,\nnot only because a considerable amount of extra features will be required for that,\nbut because working in that direction is *completely outside* of project's goals.\nSee also: https://github.com/vvaltchev/tilck/discussions/81\n\n#### Tilck vs Linux\nTilck is fundamentally different from Linux as it **does not** aim to target\nmulti-user server nor desktop machines, at all because that would be pointless:\nLinux is **not** big & complex because of a *poor* implementation, but because\nof the incredible amount of features it offers and the *intrinsic* complexity they\nrequire. In other words, **Linux is great** given the problem it solves. Tilck will\noffer *fewer* features in exchange for:\n\n - simpler code (by far)\n - smaller binary size\n - extremely deterministic behavior\n - ultra low-latency\n - easier development & testing\n - extra robustness\n\nIn conclusion, while this is still an *educational* project at the moment, it has been\nwritten keeping in mind those goals and it has a test infrastructure that ambitiously\ntries to be almost *enterprise-level* (see [Testing](#testing-tilck)).\n\nFeatures\n----------------------------------------\n\nTilck is a preemptable monolithic *NIX kernel, implementing about ~100 Linux\nsyscalls. At its core, the kernel is not x86-centric even if that was its first\ntarget architecture. Almost everything arch-specific is isolated. Because of that,\nmost of kernel's code is not arch-specific and can be already compiled for any\narchitecture to run as part of the unit tests.\n\n#### i686 support\nWhile the kernel uses a fair amount of **legacy hardware** like the 8259 PICs for\nIRQs, the legacy 8254 PIT for the system timer, the legacy 16550 UART for serial\ncommunication, the 8042 kb controller, the 8237 ISA DMA, and the Sound Blaster\n16 sound card (QEMU only), it has also support for some **recent hardware** features\nlike SSE, AVX and AVX2 fpu instructions, PAT, i686 sysenter, enumeration of PCI Express\ndevices (via ECAM) and, above all, **ACPI** support via ACPICA. ACPI is currently\nused to receive power-button events, to reboot or power-off the machine, and to\nread the current parameters of machine's batteries (when implemented via ACPI control\nmethods).\n\n##### Running on physical x86 hardware\nThe operating system has been regularly tested on physical hardware from its inception\nby booting it with an USB stick (see the notes below). Test machines include actual i686\nmachines, older x86_64 machines with BIOS-only firmware, newer x86_64 machines with\nUEFI+CSM and finally super-recent pure-UEFI machines. For a long time, Tilck's development\nstrictly complied with the following rule: *if you cannot test it on real hardware, do not\nimplement it in Tilck*. Only recently, that rule has been relaxed a little in order to play\nwith SB16. It is possible that, in the future, there might be a few other drivers that\nwould be tested only on virtual machines: their development is justified by the educational\nvalue it will bring to the operating system and the infrastructure built for them will be\nreused for other drivers of the same kind. **But** that will *never* become a common practice.\nTilck is designed to work on real hardware, where any kind of weird things happen. Being\nreliable there is *critical* for Tilck's success.\n\n#### riscv64 support\n\nTilck's support for the riscv64 architecture mainly focuses on embedded applications. Tilck runs\nin RV64 supervisor mode (Smode), uses SV39 three-level page table virtual memory, and supports\nuser space floating point.\n\n##### riscv64 hardware peripheral support\n\nThe riscv64 architecture adopts a device tree-based driver model and in Tilck and all\nhardware information is obtained from the device tree transmitted by the bootloader. Therefore,\nTilck's riscv kernel code does not have any board-level description code. The system timer\n(for ticks) invokes the SBI monitor program (openSBI) through RISCV SBI interface instead of\nimplementing a driver in the kernel. The system RTC clock is implemented using a very simple\ngoldfish virtual RTC driver, which works only on the QEMU virtual platform.\n\nTilck on RISCV does *not* implement typical PC peripherals such as keyboards: for both input\nand output serial ports have to be used (which is enough for most embedded applications).\nThe most common `ns16550` UART driver has been implemented. To better manage the multi-level\nnested interrupt architecture common in embedded chips, Tilck on RISCV implements a simplified\nframework similar to the idea of Linux IRQ domains. The most common INTC and PLIC interrupt\ncontroller drivers are supported.\n\n##### board support\n\nTilck on RISCV64 implements a very simple BSP framework, which can be managed by setting environment\nvariable `BOARD` to build a image of the corresponding board. Currently, Tilck supports only the\n[Sipeed licheerv-nano] board and the qemu-virt virtual board (set by default). QEMU-virt has the\nframebuffer mode enabled by default, while having FB support on `licheerv-nano` requires patching\nthe original bootloader provided by Sipeed.\n\n[Sipeed licheerv-nano]: https://wiki.sipeed.com/hardware/en/lichee/RV_Nano/1_intro.html\n\n#### File systems\nTilck has a simple but full-featured (both soft and hard links, file holes, memory\nmapping, etc.) **ramfs** implementation, a minimalistic **devfs** implementation,\nread-only support for FAT16 and **FAT32** (used for initrd) allowing memory-mapping\nof files, and a **sysfs** implementation used to provide a full view of **ACPI's**\n**namespace**, the list of all PCI(e) devices and Tilck's compile-time configuration.\nClearly, in order to work with multiple file systems at once, Tilck has a simple\n**VFS** implementation as well. **Note**: there is no support for block devices in Tilck\nyet, so everything is in-memory.\n\n#### Processes and signals\nWhile Tilck uses internally the concept of thread, multi-threading is not currently\nexposed to userspace (kernel threads exist, of course). Both `fork()` and `vfork()` are\nproperly implemented and copy-on-write is used for fork-ed processes. The `waitpid()`\nsyscall is fully implemented (which implies process groups etc.). The support for\nPOSIX signals is partial: custom signal handlers are supported using the `rt_sigaction()`\ninterface, but most of the SA_* flags are not supported and handlers cannot interrupt\neach other, yet. `rt_sigprocmask()`, `sys_rt_sigpending()`, `sys_rt_sigsuspend()`\nwork as expected, as well as special signals like SIGSTOP, SIGCONT and SIGCHLD.\nFor more details, see the [syscalls] document.\n\nOne interesting feature in this area deserves a special mention: despite the lack of\nmulti-threading in userspace, Tilck has full support for TLS (thread-local storage) via\n`set_thread_area()`, because `libmusl` requires it, even for classic single-threaded\nprocesses.\n\n#### I/O\nIn addition to the classic `read()` and `write()` syscalls, Tilck supports vectored I/O\nvia `readv()` and `writev()` as well. In addition to that, non blocking I/O, `select()`\nand `poll()` are supported too. Fortunately, no program so far needed `epoll` :-)\n\n#### Console\nTilck has a console supporting more than 90% of Linux's console's features. It works\nin the same way (using layers of abstraction) both in text mode and in framebuffer mode.\nThe effort to implement such a powerful console was driven by the goal to make **Vim** work\nsmoothly on Tilck, with syntax highlighting etc. While it's true that such a thing has a\nlittle to do with \"proper\" kernel development, being able to run a \"beast\" like Vim on a\nsimple kernel like Tilck, is a great achievement by itself because it shows that Tilck\ncan run correctly programs having a fair amount of complexity.\n\n#### Userspace applications\nTilck can run a fair amount of console applications like the **BusyBox** suite,\n**Vim**, **TinyCC**, **Micropython**, **Lua**, and framebuffer applications like\n**fbDOOM** just for fun, despite that being completely out of project's scope.\nCheck project's [wiki page] for more info about the software that can run on\nTilck.\n\n[syscalls]: docs/syscalls.md\n[wiki page]: https://github.com/vvaltchev/tilck/wiki\n\nBooting Tilck on x86\n----------------------------------------\n\n### Tilck's bootloader\n`Tilck` comes with an interactive bootloader working both on legacy BIOS and on UEFI\nsystems as well. The bootloader allows the user to choose the desired video\nmode, the kernel file itself and to edit kernel's cmdline.\n\n![Tilck's bootloader](http://vvaltchev.github.io/tilck_imgs/v2/bootloader.png)\n\n### 3rd-party bootloaders (x86)\n`Tilck` can be loaded by any bootloader supporting `multiboot 1.0`. For example,\nqemu's built-in bootloader works perfectly with `Tilck`:\n\n    qemu-system-i386 -kernel ./build/tilck -initrd ./build/fatpart\n\nActually that way of booting the kernel is used in the system tests. A shortcut\nfor it is:\n\n    ./build/run_multiboot_qemu\n\n#### Grub support\n`Tilck` can be easily booted with GRUB. Just edit your `/etc/grub.d/40_custom`\nfile (or create another one) by adding an entry like:\n\n```\nmenuentry \"Tilck\" {\n    multiboot <PATH-TO-TILCK-BUILD-DIR>/tilck\n    module --nounzip <PATH-TO-TILCK-BUILD-DIR>/fatpart\n    boot\n}\n```\nAfter that, just run `update-grub` as root and reboot your machine.\n\nDocumentation and HOWTOs\n--------------------------\n\nProject's main documentation can be found in the `docs/` directory. However,\n[Tilck's wiki](https://github.com/vvaltchev/tilck/wiki) can be used to\nnavigate through those documention files with the addition of much extra content\nlike screenshots. Here below, instead, there's a quick *starter* guide, focusing\non the most common scenarios.\n\n### Building Tilck\nThe project supports a fair amount of build configurations and customizations\nbut building using its default configuration can be described in just a few\nsteps. The *only* true requirement for building Tilck is having a Linux\nx86_64 host system or Microsoft's `WSL`. Steps:\n\n* Enter project's root directory.\n* Build the toolchain (just the first time) with: `./scripts/build_toolchain`\n* Compile the kernel and prepare the bootable image with: `make`\n\nAt this point, there will be an image file named `tilck.img` in the `build`\ndirectory. The easiest way for actually trying `Tilck` at that point is to run:\n`./build/run_qemu`.\n\n#### Running it on physical hardware\nThe `tilck.img` image is, of course, bootable on physical machines as well,\nboth on UEFI systems and on legacy ones. Just flush the image file with `dd`\nto a usb stick and reboot your machine.\n\n#### Other configurations\nTo learn much more about how to build and configure Tilck, check the [building]\nguide in the `docs/` directory.\n\n[building]: docs/building.md\n\n### Testing Tilck\nTilck has **unit tests**, **kernel self-tests**, **system tests** (using the\nsyscall interface), and **automated interactive system tests** (simulating real\nuser input through QEMU's monitor) all in the same repository, completely\nintegrated with its build system. In addition to that, there's full code\ncoverage support and useful scripts for generating HTML reports (see the\n[coverage] guide). Finally, Tilck is fully integrated with the [Azure Pipelines]\n[CI], which validates each pushed branch with builds and test runs in a variety\nof configurations. Kernel's coverage data is also uploaded to [CodeCov]. Below,\nthere are some basic instructions to run most of Tilck's tests. For the whole\nstory, please read the [testing] document.\n\n[Azure Pipelines]: https://azure.microsoft.com/en-us/services/devops/pipelines\n[CI]: https://en.wikipedia.org/wiki/Continuous_integration\n[CodeCov]: https://codecov.io\n\n#### Running Tilck's tests\nRunning Tilck's tests is extremely simple: it just requires to have `python 3`\ninstalled on the machine. For the **self-tests** and the classic\n**system tests**, run:\n\n    <BUILD_DIR>/st/run_all_tests -c\n\nTo run the **unit tests** instead:\n\n   * Install the [googletest] library (once) with:\n     `./scripts/build_toolchain -s build_gtest build_gmock`\n\n   * Build the unit tests with: `make gtests`\n\n   * Run them with: `<BUILD_DIR>/gtests`\n\nTo learn much more about Tilck's tests in general and to understand how to run\nits *interactive* system tests as well, read the [testing] document.\n\n[testing]: docs/testing.md\n[googletest]: https://github.com/google/googletest\n\n### Debugging Tilck\nWith `QEMU`'s integrated `GDB` server, it's possible to debug the Tilck kernel\nwith GDB almost as if it were a regular process. It just gets tricky when\ncontext switches happen, but GDB cannot help with that. To debug it with GDB,\nfollow the steps:\n\n  - (Optional) Prepare a debug build of Tilck, for a better debugging experience.\n\n  - Run Tilck's VM with: `./build/run_qemu` but, remain at the bootloader\n    stage.\n\n  - In a different terminal, run: `gdb ./build/tilck_unstripped`.\n\n  - In GDB, run: `target remote :1234` to connect to QEMU's gdb server.\n\n  - Set one or more breakpoints using commands like: `break kmain`.\n\n  - Type `c` to allow execution to continue and boot the OS by pressing ENTER\n    in the bootloader.\n\nIn order to make the debugging experience better, Tilck comes with a set of\n**GDB scripts** (see `other/gdb_scripts`). With them, it's super-easy to list\nall the tasks on the system, the handles currently opened by any given process\nand more. In order to learn how to take advantage of those GDB scripts and anything\nelse related to debugging the Tilck project, check the [debugging] document.\n\n[debugging]: docs/debugging.md\n\n#### Tilck's debug panel\n\n<img align=\"right\"\nsrc=\"http://vvaltchev.github.io/tilck_imgs/v2/screenshots/dp04.png\"\nalt=\"Tilck's debug panel\" width=\"50%\" height=\"50%\">\n\nDebugging Tilck with GDB while it's running inside a VM is very convenient, but\nin other cases (e.g. Tilck on real hardware) we don't have GDB support. In\naddition to that, even when the kernel is running inside a VM, there are some\nfeatures that are just much more convient to expose directly from the kernel\nitself rather than through GDB scripts. One way to expose kernel info to\nuserspace is to use `sysfs`, but that's not necessarily the most convenient way\nfor everything (still, Tilck does have [sysfs] implementation), especially when\n*interaction* with the kernel itself is needed for debugging purposes. To help\nin those cases, a *debug panel* has been introduced inside Tilck itself. It\nstarted as something like Linux's [Magic SysRq] which evolved in a sort of TUI\napplication with debug info plus tracing capabilities for user processes. In the\nfuture, it will support some proper debugging features as well. To learn more\nabout it, check the the [debugging] document.\n\n[sysfs]: https://github.com/vvaltchev/tilck/wiki/Tilck's-sysfs\n[Magic SysRq]: https://en.wikipedia.org/wiki/Magic_SysRq_key\n\nA comment about user experience\n----------------------------------\n\nTilck particularly distinguishes itself from many open source projects in one\nway: it really cares about the **user experience** (where \"user\" means\n\"developer\"). It's not the typical super-cool low-level project that's insanely\ncomplex to build and configure; it's not a project requiring 200 things to be\ninstalled on the host machine. Building such projects may require hours or even\ndays of effort (think about special configurations e.g. building with a\ncross-compiler). Tilck instead, has been designed to be trivial to build and\ntest even by inexperienced people with basic knowledge of Linux. It has a\nsophisticated script for building its own toolchain that works on all the major\nLinux distributions and a powerful CMake-based build system. The build of Tilck\nproduces an image ready to be tested with QEMU or written on a USB stick. (To\nsome degree, it's like what the `buildroot` project does for Linux, but it's\nmuch simpler.) Finally, the project includes also scripts for running Tilck\non QEMU with various configurations (BIOS boot, UEFI boot, direct (multi-)boot\nwith QEMU's `-kernel` option, etc.).\n\n#### Motivation\nThe reason for having the above mentioned features is to offer its users and\npotential contributors a really **nice** experience, avoiding any kind of\nfrustration. Hopefully, even the most experienced engineers will enjoy a zero\neffort experience. But it's not all about reducing the frustration. It's also\nabout _not scaring_ students and junior developers who might be just curious to\nsee what this project is all about and maybe eager to write a simple program for\nit and/or add a couple of `printk()`'s here and there in their fork. Hopefully,\nsome of those people *just playing* with Tilck might actually want to contribute\nto its development.\n\nIn conclusion, even if some parts of the project itself are be pretty complex,\nat least building and running its tests **must be** something anyone can do.\n\n[coverage]: docs/coverage.md\n\nFAQ\n---------------------\n\nHere below, there is a list of *frequently* asked questions.\nThis list is *not* supposed to be exaustive and it will change over time.\nFor the *full list* of questions on Tilck, check the [Q & A page] in the [Discussions] section instead.\n\n[Q & A page]: https://github.com/vvaltchev/tilck/discussions/categories/q-a\n[Discussions]: https://github.com/vvaltchev/tilck/discussions\n\n- [Why Tilck does not have the feature/abstraction XYZ like other kernels do?](https://github.com/vvaltchev/tilck/discussions/83)\n\n- [Can Tilck be used to build other projects on the top of it?](https://github.com/vvaltchev/tilck/discussions/185)\n\n- [Why having support for FAT32?](https://github.com/vvaltchev/tilck/discussions/85)\n\n- [Why keeping the initrd mounted?](https://github.com/vvaltchev/tilck/discussions/86)\n\n- [Why using 3 spaces as indentation?](https://github.com/vvaltchev/tilck/discussions/88)\n\n- [Why many commit messages are so short?](https://github.com/vvaltchev/tilck/discussions/89)\n\n- [Can a lightweight X server run on Tilck today?](https://github.com/vvaltchev/tilck/discussions/81)\n\n- [Compiling Tilck with TCC & self-hosting?](https://github.com/vvaltchev/tilck/discussions/93)\n"
        },
        {
          "name": "boot",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "other",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sysroot",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "userapps",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}