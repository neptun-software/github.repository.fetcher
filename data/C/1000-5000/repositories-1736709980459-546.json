{
  "metadata": {
    "timestamp": 1736709980459,
    "page": 546,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "slembcke/Chipmunk2D",
      "stars": 2239,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8193359375,
          "content": ".DS_Store\r\ndoc/index.html\r\n\r\n*.pbxuser\r\n*.perspectivev3\r\nxcshareddata\r\nxcuserdata\r\nproject.xcworkspace\r\nDerivedData\r\nbuild\r\nChipmunk-Mac\r\nChipmunk-iOS\r\nObjectiveChipmunk-Mac\r\nObjectiveChipmunk-iOS\r\ngenerated_docs\r\n\r\nCMakeCache.txt\r\nCMakeFiles\r\nMakefile\r\ncmake_install.cmake\r\ninstall_manifest.txt\r\n\r\n*.o\r\n*.obj\r\n*.dll\r\n*.so\r\n*.so.*\r\n*.dylib\r\n*.a\r\n*.exe\r\n*.lib\r\nchipmunk_demos\r\n\r\n# Visual studio\r\n*.opensdf\r\n*.opendb\r\n*.sdf\r\n*.suo\r\n*.pdb\r\n*.vcxproj.user\r\nmsvc/vc10/demo/ipch/\r\nmsvc/vc10/chipmunk/Win32/\r\nmsvc/vc10/chipmunk/x64/\r\nmsvc/vc10/demo/Win32/\r\nmsvc/vc10/demo/x64/\r\nmsvc/vc12/chipmunk/Win32/\r\nmsvc/vc12/chipmunk/x64/\r\nmsvc/vc12/demo/Win32/\r\nmsvc/vc12/demo/x64/\r\nmsvc/vc13/chipmunk/Win32/\r\nmsvc/vc13/chipmunk/x64/\r\nmsvc/vc13/demo/Win32/\r\nmsvc/vc13/demo/x64/\r\nmsvc/vc14/demo/Win32/\r\nmsvc/vc14/demo/x64/\r\n*.log\r\n*.tlog\r\n*.db\r\n\r\n.vscode\r\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.19140625,
          "content": "cmake_minimum_required(VERSION 3.7)\n\nproject(chipmunk)\n\n# to change the prefix, run cmake with the parameter:\n#   -D CMAKE_INSTALL_PREFIX=/my/prefix\n\n# to change the build type, run cmake with the parameter:\n#   -D CMAKE_BUILD_TYPE=<build-type>\n# run \"cmake --help-variable CMAKE_BUILD_TYPE\" for details\nif(NOT CMAKE_BUILD_TYPE)\n  SET(CMAKE_BUILD_TYPE Release CACHE STRING\n      \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.\"\n      FORCE)\nendif()\n\n# to manually select install locations of libraries and executables\n#   -D LIB_INSTALL_DIR mylib\n#   -D BIN_INSTALL_DIR newbin\nset(LIB_INSTALL_DIR lib CACHE STRING \"Install location of libraries\")\nset(BIN_INSTALL_DIR bin CACHE STRING \"Install location of executables\")\n\n# other options for the build, you can i.e. activate the shared library by passing\n#   -D BUILD_SHARED=ON\n# to cmake. Other options analog\nif(ANDROID)\n  option(BUILD_DEMOS \"Build the demo applications\" OFF)\n  option(INSTALL_DEMOS \"Install the demo applications\" OFF)\n  option(BUILD_SHARED \"Build and install the shared library\" ON)\n  option(BUILD_STATIC \"Build as static library\" ON)\n  option(INSTALL_STATIC \"Install the static library\" OFF)\nelse()\n  option(BUILD_DEMOS \"Build the demo applications\" ON)\n  option(INSTALL_DEMOS \"Install the demo applications\" OFF)\n  option(BUILD_SHARED \"Build and install the shared library\" ON)\n  option(BUILD_STATIC \"Build as static library\" ON)\n  option(INSTALL_STATIC \"Install the static library\" ON)\nendif()\n\nif(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  option(FORCE_CLANG_BLOCKS \"Force enable Clang blocks\" YES)\nendif()\n\n# sanity checks...\nif(INSTALL_DEMOS)\n  set(BUILD_DEMOS ON FORCE)\nendif()\n\n# these need the static lib too\nif(BUILD_DEMOS OR INSTALL_STATIC)\n  set(BUILD_STATIC ON FORCE)\nendif()\n\nif(NOT MSVC)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=gnu99\") # always use gnu99\n  if(FORCE_CLANG_BLOCKS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fblocks\")\n  endif()\n  set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -ffast-math\") # extend release-profile with fast-math\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -Wall\") # extend debug-profile with -Wall\nendif()\n\nadd_subdirectory(src)\n\nif(BUILD_DEMOS)\n  add_subdirectory(demo)\nendif()\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0625,
          "content": "Copyright (c) 2007-2015 Scott Lembcke and Howling Moon Software\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.textile",
          "type": "blob",
          "size": 5.033203125,
          "content": "!http://files.slembcke.net/chipmunk/logo/logo1_med.png!\n\nh2. NEW IN CHIPMUNK 7\n\nChipmunk 7 is complete and now includes the ARM NEON optimizations, the autogeometry code, and the mulithreaded solver. \n\nThe latest \"programming guide\":http://chipmunk-physics.net/release/ChipmunkLatest-Docs/ is available.\n\nh2. ABOUT:\n\nChipmunk2D is a simple, lightweight, fast and portable 2D rigid body physics library written in C. It's licensed under the unrestrictive, OSI approved MIT license. My aim is to give 2D developers access to the same quality of physics you find in newer 3D games. I hope you enjoy using Chipmunk2D!\n\nh2. FEATURES:\n\n* Designed specifically for 2D video games.\n* Circle, convex polygon, and beveled line segment collision primitives.\n* Multiple collision primitives can be attached to a single rigid body.\n* Fast broad phase collision detection by using a bounding box tree with great temporal coherence or a spatial hash.\n* Extremely fast impulse solving by utilizing Erin Catto's contact persistence algorithm.\n* Supports sleeping objects that have come to rest to reduce the CPU load.\n* Support for collision event callbacks based on user definable object types types.\n* Flexible collision filtering system with layers, exclusion groups and callbacks.\n** Can be used to create all sorts of effects like one way platforms or buoyancy areas. (Examples included)\n* Supports nearest point, segment (raycasting), shape and bounding box queries to the collision detection system.\n* Collision impulses amounts can be retrieved for gameplay effects, sound effects, etc.\n* Large variety of joints - easily make vehicles, ragdolls, and more.\n* Joint callbacks.\n** Can be used to easily implement breakable or animated joints. (Examples included)\n* Maintains a contact graph of all colliding objects.\n* Lightweight C99 implementation with no external dependencies outside of the Std. C library.\n* \"Many language bindings available\":http://chipmunk2d.net/bindingsAndPorts.php.\n* Simple, read the \"documentation\":http://chipmunk2d.net/documentation.php and see!\n* Unrestrictive MIT license\n\nh2. CONTRACTING:\n\nHowling Moon Software (my company) is available for contracting if you want to make the physics in your game really stand out. Given our unique experience with the library, we can help you use Chipmunk to its fullest potential. Feel free to contact us through our webpage: http://howlingmoonsoftware.com/\n\nh2. BUILDING:\n\nMac OS X: There is an included Xcode project file for building the static library and demo application. Alternatively you could use the CMake files or the macstatic.command script inside the xcode/ directory to build a static lib and package up the headers for you.\n\niPhone: A native Objective-C API is included. The Xcode project can build a static library with all the proper compiler settings. Alternatively, you can just run iphonestatic.command in the xcode/ directory.  It will build you a fat library compiled as release for the device and debug for the simulator. After running it, you can simply drop the Chipmunk-iOS directory into your iPhone project!\n\nUNIXes: A forum user was kind enough to make a set of CMake files for Chipmunk. This will require you to have CMake installed. To build run 'cmake .' then 'make'. This should build a dynamic library, a static library, and the demo application. A number of people have had build errors on Ubuntu due to not having GLUT or libxmu installed.\n\nWindows: Visual Studio projects are included in the msvc/ directory. While I try to make sure the MSVC 10 project is up to date, I don't have MSVC 9 to keep that project updated regularly. It may not work. I'd appreciate a hand fixing it if that's the case.\n\n\nh2. GET UP TO DATE:\n\nIf you got the source from a point release download, you might want to consider getting the latest source from GitHub. Bugs are fixed and new features are added regularly. Big changes are done in branches and tested before merging them in it's rare for the point release downloads to be better or more bug free than the latest code.\n\nHead on over to \"GitHub\":https://github.com/slembcke/Chipmunk2D and experience the future TODAY! (Okay, so maybe it's not that exciting.)\n\n\nh2. GETTING STARTED:\n\nFirst of all, you can find the C API documentation in the doc/ directory.\n\nA good starting point is to take a look at the included Demo application. The demos all just set up a Chipmunk simulation space and the demo app draws the graphics directly out of that. This makes it easy to see how the Chipmunk API works without worrying about the graphics code. You are free to use the demo drawing routines in your own projects, though it is certainly not the recommended way of drawing Chipmunk objects as it pokes around at the undocumented/private APIs of Chipmunk.\n\n\nh2. SUPPORT:\n\nThe best way to get support is to visit the \"Chipmunk Forums\":http://chipmunk2d.net/forum/. There are plenty of people around using Chipmunk on the just about every platform I've ever heard of. If you are working on a commercial project and want some more direct help, Howling Moon Software is also available for \"contracting\":http://howlingmoonsoftware.com/.\n"
        },
        {
          "name": "TODO.txt",
          "type": "blob",
          "size": 1.8642578125,
          "content": "Priorities:\n\tBasics tutorial.\n\tSimple top down player controls.\n\t* test tiny omega bug in cpvslerp().\n\tUser definable default winding.\n\tUser definable fast collision filtering.\n\tAssertion (or warning?) for destroying a body with things still attached\n\tBilinearly sampled image sampler function. (override the sample method to always take bilinear samples)\n\tRGB Image Sampler class.\n\tReorganize Chimpnuk Pro directory structure. Too flat and confusing.\n\tImprove the ACD splitting plane algorithm.\n\tFishing game\n\tMotorcycle in a spinning cage\n\tSquid thingy like TomorrowPlusX.\n\n\tInvestigate getting better PhysicsEditor support.\n\nUnordered\n\tFix solver issues with the groove joint.\n\tUse a slop tolerance on joint boundaries.\n\nWebsite things\n\tDon't make any mistakes: http://www.gamasutra.com/view/feature/185773/the_top_10_mistakes_tool_.php\n\tSeveral people want a Chipmunk Facebook page.\n\tfigure out and redo front page.\tChipmunk js examples.\n\nFuture things to think about:\n\tbreakable object support functions?\n\tSerialization\n\tTests for the query methods\n\tBuilding bodies from shape collections.\n\tPer body iterations and timestep?\n\tPer body damping and gravity coefs?\n\tEasy callback programable joint?\n\tTop down racing game. (Need the callback constraint)\n\tcpBodyActivateStatic() should also activate joints?\n\nChipmunk 7:\n\tSpeculative contacts\n\tUser definable constraint\n\tCustom contact constraint with rolling friction and per contact surface v.\n\tSerialization\n\tAPI changes, different body/shape instantiation.\n\tCollision handler objects with additional callbacks.\n\tCalculate contact anchors to get rid of contact pos. (needed for speculative contacts anyway)\n\tMass property calculation changes.\n\tChange apply force/impulse and point velocity functions.\n\tSeparate doxygen docs for Objective-C parts and C parts.\n\tCocos2D xcode templates.\n\tCustom contacts using cpArbiter user data.\n\tBuilt in transform type.\n\t"
        },
        {
          "name": "VERSION.txt",
          "type": "blob",
          "size": 23.568359375,
          "content": "What's new in 7.0.3:\n* MISC: Replacing GLFW with Sokol in the demo application. No need to push GLFW binaries and has a nice x-platform renderer to build on.\n* MISC: Fixed some 'const' warnings for MSCV.\n\nWhat's new in 7.0.2:\n* MISC: Merging pull requests. Build fixes and the like.\n\nWhat's new in 7.0.1:\n* BUG: Remove references to M_PI sinces it's not actually part of C and causes problems with MSVC.\n* BUG: Build fixes for Mac/CMake and MSVC 13.\n* BUG: Move to using __declspec(dllexport) for Windows builds.\n* BUG: Fixed a precision issue with the EPA algorithm that would cause excessive iteration.\n* BUG: cpPolyshapeNewRaw() was undefined.\n* BUG: Changing gravity will wake up all objects in a space.\n\nWhat's new in 7.0.0:\n* All features from Chipmunk Pro are now free and open source! (threaded and NEON solver, autogeometry)\n* API: Lots of cleanup to the API naming for better consistency.\n* API: Renamed nearest point queries to simply point queries.\n* API: Removed many deprecated functions.\n* API: Struct definitions have become fully opaque instead of mangling names with the CP_PRIVATE() macro.\n* API: Replaced templated accessor functions with concrete ones. Should be simpler to deal with for FFIs.\n* API: Optional automatic mass properties for shapes. Calculates the moment of inertia and center of gravity for you.\n* API: Optional anchor point for bodies that is separate from the center of gravity.\n* API: Added radius parameters to many functions dealing with shapes (moment calculation, initialization, etc).\n* API: The convex hull and winding is automatically calculated when creating a poly shape.\n* API: Added a cpShapesCollide() function to check overlap of arbitrary shapes.\n* API: cpShape filter property to supersede layers and groups.\n* API: Collision handlers now return a collision handler struct to make it simpler to set up callbacks.\n* API: Wildcard collision types.\n* API: The cpArbiterTotalImpulseWithFriction() function was renamed to cpArbiterTotalImpulse(). The old useless cpArbiterTotalImpulse() implementation was removed.\n* API: Contacts now store the colliding point on the surface of both shapes.\n* API: cpArbiterIsRemoval() to check if a separate callback is called due to a removal and not a true separating collision.\n* API: Arbiters now only store one normal per pair of colliding shapes.\n* API: cpBBNewForExtents().\n* API: Added a concrete kinematic body type to replace the confusing \"rogue\" body concept.\n* API: Added a 2x3 affine transform type, cpTransform.\n* API: Added a new debug rendering API.\n* MISC: Numerous improvements to the collision detection.\n* MISC: cpPolyline structs are passed by reference instead of value. (I've regretted that decision for years!)\n\nWhat's new in 6.2.2:\n* Fixed some issues on arm64.\n* PRO: Added a 64 bit NEON solver to use on arm64.\n\nWhat's new in 6.2.1:\n* Added Android support to the CMake files. (Thanks Eric Wing!)\n* Added a MSVC 2012 project file. (Thanks Leonid Usov!)\n* Merged a fix for VAOs on Windows. (Thanks Leonid Usov!)\n* Merged a couple of other minor fixes.\n* BUG: Fixed a crash issue with the ChipmunkTileCache and ChipmunkPointCloudSampler classes. (Pro only).\n\nWhat's new in 6.2.0:\n* Collision detection now primarily uses the GJK and EPA algorithms instead of SAT. Internally this was a rather huge change. o_O\n* Improved collision point quality and better collision point identification.\n* All shape types can now be given a rounding radius.\n* Collisions are now guaranteed to have a maximum of 2 collision points.\n* Poly to poly collision performance is slightly better when they have a radius. Slightly worse with none.\n* Implemented smoothed segment collisions to prevent colliding with the \"cracks\" between segment shapes.\n* API: (Officially) added cpSegmentShapeSetNeighbors() used to enable smoothed line collisions.\n* API: Added cpBBCenter() to get the center of a bounding box.\n* API: Added cpPolyShapeInit2() and cpPolyShapeNew2() to create poly shapes with a radius. (Horrible names yes, but it will go away in Chipmunk 7)\n* API: Added cpBoxShapeInit3() and cpBoxShapeNew3() to create boxes with a radius.\n* API: Added cpPolyShapeGetRadius() and cpPolyShapeSetRadius() (the latter only in chipmunk_unsafe.h).\n* API: Added cpNearestPointQueryInfo.g which returns the gradient of the signed distance field for the shape.\n* BUG: cpMomentForPoly() will now return a correct value for degenerate 2 vertex polygons.\n* BUG: Fixed an issue where certain segment query calls would return a t value of 0 instead of 1 for a missed query.\n* MISC: Passing cpvzero to cpvnormalize() will now return cpvzero. No need to worry about NaNs or cpvnormalize_safe().\n* MISC: Demo app now uses GLFW instead of GLUT, and has improved drawing and text rendering routines.\n\nWhat's new in 6.1.5:\n* API: Added cpArbiter*SurfaceVelocity() to allow for custom surface velocity calculation.\n* API: Added cpArbiteSetContactPointSet() to allow changing the contact geometry on the fly.\n* API: Added cpSpaceConvertBodyToStatic() and cpSpaceConvertBodyToDynamic().\n* API: Added [ChipmunkBody velocityAt*Point:] methods to wrap their C equivalents. (Pro only)\n* API: Added overridable [ChipmunkBody updateVelocity:...] and [ChipmunkBody updatePosition:] methods. (Pro only)\n* API: Added .space properties to ChipmunkBody, ChipmunkShape and ChipmunkConstaint to wrap their C equivalents. (Pro only)\n* API: Added overridable [ChipmunkConstraint preSolve:] and [ChipmunkConstraint postSolve:] methods. (Pro only)\n* API: Added an ChipmunkMultiGrab.grabSort property that allows you to prioritize which shape is grabbed when there is overlap. (Pro only)\n* MISC: Segment queries started inside of a shape now return t=0 and n=cpvzero instead of being undefined.\n* MISC: Cleaned up a lot of common assertion messages to be more clear.\n* MISC: Added a new demo called Shatter.\n* MISC: Added a crushing force estimation example to the ContactGraph demo and a static/dynamic conversion example to Plink.\n* MISC: Modified the Sticky demo to use the new cpArbiteSetContactPointSet() to avoid the use of unnecessary sensor shapes.\n* MISC: [ChipmunkSpace addBounds:...] now returns a NSArray of the bounding segments. (Pro only)\n\nWhat's new in 6.1.4:\n* MISC: Fixed a build script issue that was preventing the documentation from being generated.\n\nWhat's new in 6.1.3:\n* BUG: Fixed a couple of very specific but fatal bugs that occur when sleeping is enabled and filtering collisions.\n* BUG: Fixed an issue with cpvslerp() between very similar vectors.\n* BUG: Fixed an issue with grab friction in ChipmunkMultiGrab. (Pro only)\n* MISC: Implemented the cpConstraintGetImpulse() functionality for spring joints.\n* MISC: Added more functions to chipmunk_ffi.h\n\nWhat's new in 6.1.2:\n* API: Added a cpArbiter.data pointer. Now you can tag collisions with custom persistent data.\n* API: Added segment to segment collisions (thanks to LegoCylon)\n* API: cpSpaceAddPostStepCallback() now returns false if the callback was a duplicate.\n* API: Added the ChipmunkAbstractSampler.marchThreshold property instead of hardcoding it to 0.5.\n* API: Added ChipmunkGrooveJoint properties for the groove and joint anchors.\n* API: ChipmunkMultiGrab now returns information about grabbed shapes.\n* BUG: Fixed a minor (non-crashing, non-leaking) memory pooling issue with reindexing lots of static shapes.\n* BUG: Fixed an issue with the slerp functions that would cause them to return incorrect results when given non-unit length input.\n* BUG: Fixed a precision bug with the ChipmunkImage sampler classes that could cause artifacts or miss small features.\n* BUG: Fixed a number of properties in Objective-Chipmunk that should have been nonatomic.\n* BUG: Fixed a number of types in Objective-Chipmunk that were incorrectly id that should have been cpGroup, cpCollisionType etc. It's now possible to redefine them at compile time if you wish.\n* MISC: Dropped armv6 support in favor of armv7s on iOS. (You can switch it back easily if you need.)\n* MISC: Updated iOS build scripts to guess the latest SDK.\n* MISC: Added the \"Sticky Surfaces\" demo as a cpArbiter.data example.\n* MISC: Updated Objective-Chipmunk build scripts to always use the latest iOS SDK.\n\nWhat's new in 6.1.1:\n* API: Renamed the new block based iterators as soon as possible to match the Apple convention (\"_b\" suffix).\n\nWhat's new in 6.1.0:\n* API: Added a pthread based, multi-threaded solver to accelerate the game on multi-core systems. (Pro only)\n* API: Added cpConvexHull() and CP_CONVEX_HULL() for generating convex hulls.\n* API: Added cpPolylineConvexDecomposition_BETA() to generate an approximate concave decomposition of a polyline. (Pro only)\n* API: Added [ChipmunkPolyline toConvexHull:] to generate approximate convex hulls. (Pro only).\n* API: Added [ChipmunkPolylineSet toConvexHulls_BETA:]. (Pro only)\n* API: Added nearest point queries.\n* API: Added a push mode to ChipmunkMultiGrab so touches can interact with the scene even if they didn't initially touch a shape. (Pro only)\n* API: Added optional block based iterators.\n* API: Added a space property to cpBody, cpShape and cpConstraint types.\n* BUG: Fixed an issue with changing the floating point and vector type on OS X.\n* BUG: Fixed a pixel offset in ChipmunkImageSampler that could cause minor sampling artifacts. (Pro only)\n* BUG: Fixed an issue where cpShape and cpConstraint structs could have garbage space pointers if cpcalloc() was redefined.\n* BUG: Fixed assertions in cpArbiter getters to correctly reflect a contact count of 0 from separate() callbacks.\n* BUG: Fixed a regression relating to registering post-step() callbacks from other post-step() callbacks.\n* BUG: Fixed a minor memory leak for sleeping bodies when destroying a space.\n* MISC: Point queries are now deprecated in preference to point queries.\n* MISC: cpSpatialIndexPointQuery() was redundant and has been removed. Use cpSpatialIndexQuery() instead.\n* MISC: cpShape*Query() functions now accept a NULL info pointer if you don't want detailed query info.\n* MISC: The enableContactGraph property of cpSpace is deprecated and always be true.\n* MISC: Added a new demos of the convex hull functions and a self balancing Unicycle.\n\nWhat's new in 6.0.3:\n* API: Added a cpBBForCircle() convenience function.\n* API: Added cpBBSegmentQuery() to check where a segment hits a cpBB.\n* API: Added cpBodyGetVelAtWorldPoint() and cpBodyGetVelAtLocalPoint() to get point velocities on a body.\n* API: Added cpArbiterTotalKE() to calculate the energy lost due to a collision. Great for calculating damage accurately.\n* API: Added methods to get an ObjC pointer from a C chipmunk struct.\n* API: Added a CHIPMUNK_ARBITER_GET_BODIES() macro for Objective-Chipmunk.\n* API: The Objective-Chipmunk headers are now ARC compatible.\n* API: Added a [ChipmunkSpace contains:] method to check if a ChipmunkObject has been added to the space or not.\n* API: Added a cpBBNewForCircle() function.\n* API: Added a cpBBSegmentQuery() function for raycasting againsts AABBs.\n* BUG: Fixed a regression with ChipmunkSpace.bodies and ChipmunkSpace.shapes that caused crashes.\n* BUG: Fixed a rare bug with postStep() callbacks and iterators.\n* BUG: Fixed a border case in cpBBIntersectsSegment() that could cause missed segment queries.\n* MISC: Added some new assertions for error conditions that were previously uncaught.\n* MISC: Accelerated segment queries in cpBBTree by sorting the nodes.\n* MISC: Added a new \"Slice\" demo that lets you cut up a polygon.\n* MISC: Added NEON optimizations for Chipmunk Pro. Expect running on most ARM platforms to be 25-35% faster for contact heavy simulations.\n* MISC: All ChipmunkObject instances added to a space are now retained, even composite ones.\n\nWhat's new in 6.0.2:\n* API: Added cpSpaceIsLocked() to check if you are in a callback or not.\n* API: Removed the long deprecated [ChipmunkSpace addShapeAHandler:] and [ChipmunkSpace addShapeBHandler:] methods.\n* API: The ChipmunkObject protocol now can return any id<NSFastEnumeration> object instead of just an NSSet.\n* API: The largely useless [ChipmunkSpace addBaseObjects:] and [ChipmunkSpace removeBaseObjects:] methods were removed.\n* API: Added [ChipmunkSpace smartAdd:] and [ChipmunkSpace smartRemove:] methods for a consistent API to remove objects inside and out of callbacks.\n* API: Added [ChipmunkSpace addPostStepBlock:key:] to complement [ChipmunkSpace addPostStepCallback:selector:key:].\n* API: Added [ChipmunkSpace addPostStepAddition:].\n* API: Objective-Chipmunk collision handlers no longer retain their target to avoid reference cycles.\n* API: Added callbacks to joints.\n* BUG: Soft errors (only checked when debug mode is enabled) and warnings were disabled. Whoops.\n* BUG: cpShapeIsSensor() was incorrectly named in chipmunk_ffi.h.\n* BUG: It should be safe to call cpActivateBody() from an space iterator callback now.\n* MISC: Very nice bouyancy demo added based on callbacks.\n* MISC: Breakable Joints demo showing how to use the new joint callbacks.\n* MISC: Player demo updated and greatly enhanced by Chipmunk 6 features.\n* MISC: Changed adding a static body to a space from a warning to a hard error.\n* MISC: cpGroup and cpCollisionType now default to uintptr_t so you can safely use pointers instead of ints for these types.\n* MISC: Updated the MSVC10 project file.\n* MISC: Updated the FFI defs.\n\nWhat's new in 6.0.1:\n* BUG: Calling cpBodySetPos() on a sleeping body was delaying the Separate() handler callback if one existed.\n* BUG: Fixed a bug where Separate() handler callbacks were not occuring when removing shapes.\n* BUG: Calling cpBodyApplyForce() or cpBodyResetForces() was not activating sleeping bodies.\n* API: Added cpSpaceEachConstraint().\n* API: Added a \"CurrentTimeStep\" property to cpSpace to retrieve the current (or most recent) timestep.\n* MISC: Got rid of anonymous unions so that it is C99 clean again.\n\nWhat's new in 6.0.0:\nChipmunk 6.x's API is not quite 100% compatible with 5.x. Make sure you read the list of changes carefully.\nKeep in mind that this is a x.0.0 release and that it's likely there are still some bugs I don't know about yet. I've spent a lot of effort rewritting the collision detection, sleeping, and contact graph algorithms that have required large changes and cleanup to the 5.x codebase. I've ironed out all the bugs that I know of, and the beta test went well. So it's finally time for 6!\n\n* API: Chipmunk now has hard runtime assertions that aren't disabled in release mode for many error conditions. Most people have been using release builds of Chipmunk during development and were missing out on very important error checking.\n* API: Access to the private API has been disabled by default now and much of the private API has changed. I've added official APIs for all the uses of the private API I knew of.\n* API: Added accessor functions for every property on every type. As Chipmunk's complexity has grown, it's become more difficult to ignore accessors. You are encouraged to use them, but are not required to.\n* API: Added cpSpaceEachBody() and cpSpaceEachShape() to iterate bodies/shapes in a space.\n* API: Added cpSpaceReindexShapesForBody() to reindex all the shapes attached to a particular body.\n* API: Added a 'data' pointer to spaces now too.\n* API: cpSpace.staticBody is a pointer to the static body instead of a static reference.\n* API: The globals cp_bias_coef, cp_collision_slop, cp_contact_persistence have been moved to properties of a space. (collisionBias, collisionSlop, collisionPersistence respectively)\n* API: Added cpBodyActivateStatic() to wake up bodies touching a static body with an optional shape filter parameter.\n* API: Added cpBodyEachShape() and cpBodyEachConstraint() iterators to iterate the active shapes/constraints attached to a body.\n* API: Added cpBodyEeachArbiter() to iterate the collision pairs a body is involved in. This makes it easy to perform grounding checks or find how much collision force is being applied to an object.\n* API: The error correction applied by the collision bias and joint bias is now timestep independent and the units have completely changed.\n* FIX: Units of damping for springs are correct regardless of the number of iterations. Previously they were only correct if you had 1 or 2 iterations.\n* MISC: Numerous changes to help make Chipmunk work better with variable timesteps. Use of constant timesteps is still highly recommended, but it is now easier to change the time scale without introducing artifacts.\n* MISC: Performance! Chipmunk 6 should be way faster than Chipmunk 5 for almost any game.\n* MISC: Chipmunk supports multiple spatial indexes and uses a bounding box tree similar to the one found in the Bullet physics library by default. This should provide much better performance for scenes with objects of differening size and works without any tuning for any scale.\n\n\nWhat's new in 5.3.5\n* FIX: Fixed spelling of cpArbiterGetDepth(). Was cpArbiteGetDepth() before. Apparently nobody ever used this function.\n* FIX: Added defines for M_PI and M_E. Apparently these values were never part of the C standard math library. Who knew!?\n* FIX: Added a guard to cpBodyActivate() so that it's a noop for rogue bodies.\n* FIX: Shape queries now work with (and against) sensor shapes.\n* FIX: Fixed an issue where removing a collision handler while a separate() callback was waiting to fire the next step would cause crashes.\n* FIX: Fixed an issue where the default callback would not be called for sensor shapes.\n* FIX: Resetting or applying forces or impulses on a body causes it to wake up now.\n* MISC: Added a check that a space was not locked when adding or removing a callback.\n* MISC: Removed cpmalloc from the API and replaced all occurences with cpcalloc\n* MISC: Added a benchmarking mode to the demo app. -trial runs it in time trial mode and -bench makes it run some benchmarking demos.\n\nWhat's new in 5.3.4:\n* FIX: cpBodyActivate() can now be called from collision and query callbacks. This way you can use the setter functions to change properties without indirectly calling cpBodyActivate() and causing an assertion.\n* FIX: cpArbiterGetContactPointSet() was returning the collision points for the normals.\n* FIX: cpSpaceEachBody() now includes sleeping bodies.\n* FIX: Shapes attached to static rogue bodies created with cpBodyNewStatic() are added as static shapes.\n* MISC: Applied a user patch to update the MSVC project and add a .def file.\n\nWhat's new in 5.3.3:\n* API: Added cpArbiteGetCount() to return the number of contact points.\n* API: Added helper functions for calculating areas of Chipmunk shapes as well as calculating polygon centroids and centering polygons on their centroid.\n* API: Shape queries. Query a shape to test for collisions if it were to be inserted into a space.\n* API: cpBodyInitStatic() and cpBodyNewStatic() for creating additional static (rogue) bodies.\n* API: cpBodySleepWithGroup() to allow you to create groups of sleeping objects that are woken up together.\n* API: Added overloaded *, +, - and == operators for C++ users.\n* API: Added cpSpaceActivateShapesTouchingShape() to query for and activate any shapes touching a given shape. Useful if you ever need to move a static body.\n* FIX: Fixed an extremely rare memory bug in the collision cache.\n* FIX: Fixed a memory leak in Objective-Chipmunk that could cause ChipmunkSpace objects to be leaked.\n* MISC: C struct fields and function that are considered private have been explicitly marked as such. Defining CP_ALLOW_PRIVATE_ACCESS to 0 in Chipmunk.h will let you test which parts of the private API that you are using and give me feedback about how to build proper APIs in Chipmunk 6 for what you are trying to do.\n* MISC: Allow CGPoints to be used as cpVect on Mac OS X as well as iOS.\n\n\nWhat's new in 5.3.2:\n* FIX: Collision begin callbacks were being called continuously for sensors or collisions rejected from the pre-solve callback.\n* FIX: Plugged a nasty memory leak when adding post-step callbacks.\n* FIX: Shapes were being added to the spatial hash using an uninitialized bounding box in some cases.\n* FIX: Perfectly aligned circle shapes now push each other apart.\n* FIX: cpBody setter functions now call cpBodyActivate().\n* FIX: Collision handler targets are released in Objective-Chipmunk when they are no longer needed instead of waiting for the space to be deallocated.\n* API: cpSpaceSegmentQuery() no longer returns a boolean. Use cpSpaceSegmentQueryFirst() instead as it's more efficient.\n* NEW: cpSpaceRehashShape() Rehash an individual shape, active or static.\n* NEW: cpBodySleep() Force a body to fall asleep immediately.\n* NEW: cpConstraintGetImpulse() Return the most recent impulse applied by a constraint.\n* NEW: Added setter functions for the groove joint endpoints.\n* MISC: A number of other minor optimizations and fixes.\n\nWhat's new in 5.3.1:\n * NEW: Added a brand new tutorial for Objective-Chipmunk: SimpleObjectiveChipmunk that can be found in the Objective-Chipmunk folder.\n * NEW: Proper API docs for Objective-Chipmunk.\n * NEW: Updated the included Objective-Chipmunk library.\n * FIX: Fixed a rare memory crash in the sensor demo.\n * FIX: Fixed some warnings that users submitted.\n\nWhat's new in 5.3.0:\n * FIX: Fixed the source so it can compile as C, C++, Objective-C, and Objective-C++.\n * FIX: Fixed cp_contact_persistence. It was broken so that it would forget collision solutions after 1 frame instead of respecting the value set.\n * OPTIMIZATION: Several minor optimizations have been added. Though performance should only differ by a few percent.\n * OPTIMIZATION: Chipmunk now supports putting bodies to sleep when they become inactive.\n * API: Elastic iterations are now deprecated as they should no longer be necessary.\n * API: Added API elements to support body sleeping.\n * API: Added a statically allocated static body to each space for attaching static shapes to.\n * API: Static shapes attached to the space's static body can simply be added to the space using cpSpaceAddShape().\n * NEW: New MSVC projects.\n * NEW: Added boolean and time stamp types for clarity.\n\nWhat's new in 5.2.0:\n * OPTIMIZATION: Chipmunk structs used within the solver are now allocated linearly in large blocks. This is much more CPU cache friendly. Programs have seen up to 50% performance improvements though 15-20% should be expected.\n * API: Shape references in cpArbiter structs changed to private_a and private_b to discourage accessing the fields directly and getting them out of order. You should be using cpArbiterGetShapes() or CP_ARBITER_GET_SHAPES() to access the shapes in the correct order.\n * API: Added assertion error messages as well as warnings and covered many new assertion cases.\n * FIX: separate() callbacks are called before shapes are removed from the space to prevent dangling pointers.\n * NEW: Added convenience functions for creating box shapes and calculating moments.\n \n\nWhat's new in 5.1.0:\n * FIX: fixed a NaN issue that was causing raycasts for horizontal or vertical lines to end up in an infinite loop\n * FIX: fixed a number of memory leaks\n * FIX: fixed warnings for various compiler/OS combinations\n * API: Rejecting a collision from a begin() callback permanently rejects the collision until separation\n * API: Erroneous collision type parameterns removed from cpSpaceDefaulteCollisionHandler()\n * MOVE: FFI declarations of inlined functions into their own header\n * MOVE: Rearranged the project structure to separate out the header files into a separate include/ directory.\n * NEW: Added a static library target for the iPhone.\n * NEW: Type changes when building on the iPhone to make it friendlier to other iPhone APIs\n * NEW: Added an AABB query to complement point and segment queries\n * NEW: CP_NO_GROUP and CP_ALL_LAYERS constants\n\nWhat's new in 5.0.0:\n * Brand new Joint/Constraint API: New constraints can be added easily and are much more flexible than the old joint system\n * Efficient Segment Queries - Like raycasting, but with line segments.\n * Brand new collision callback API: Collision begin/separate events, API for removal of objects within callbacks, more programable control over collision handling.\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "codeblocks",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc-src",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "msvc",
          "type": "tree",
          "content": null
        },
        {
          "name": "objectivec",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "xcode",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}