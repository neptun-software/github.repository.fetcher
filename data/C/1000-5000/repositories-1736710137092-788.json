{
  "metadata": {
    "timestamp": 1736710137092,
    "page": 788,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "igraph/igraph",
      "stars": 1781,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".all-contributorsrc",
          "type": "blob",
          "size": 16.1787109375,
          "content": "{\n  \"projectName\": \"igraph\",\n  \"projectOwner\": \"igraph\",\n  \"repoType\": \"github\",\n  \"repoHost\": \"https://github.com\",\n  \"files\": [\n    \"CONTRIBUTORS.md\"\n  ],\n  \"imageSize\": 100,\n  \"commit\": false,\n  \"commitConvention\": \"none\",\n  \"contributors\": [\n    {\n      \"login\": \"gaborcsardi\",\n      \"name\": \"Gábor Csárdi\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/660288?v=4\",\n      \"profile\": \"https://github.com/gaborcsardi\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"ntamas\",\n      \"name\": \"Tamás Nepusz\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/195637?v=4\",\n      \"profile\": \"https://collmot.com/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"szhorvat\",\n      \"name\": \"Szabolcs Horvát\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1212871?v=4\",\n      \"profile\": \"http://szhorvat.net/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"vtraag\",\n      \"name\": \"Vincent Traag\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6057804?v=4\",\n      \"profile\": \"http://www.traag.net/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"GroteGnoom\",\n      \"name\": \"GroteGnoom\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/8137208?v=4\",\n      \"profile\": \"https://github.com/GroteGnoom\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"iosonofabio\",\n      \"name\": \"Fabio Zanini\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1200640?v=4\",\n      \"profile\": \"https://fabilab.org/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"jankatins\",\n      \"name\": \"Jan Katins\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/890156?v=4\",\n      \"profile\": \"http://www.katzien.de/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"adalisan\",\n      \"name\": \"Sancar Adali\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1790714?v=4\",\n      \"profile\": \"https://github.com/adalisan\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"FerranPares\",\n      \"name\": \"Ferran Parés\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/9196604?v=4\",\n      \"profile\": \"https://github.com/FerranPares\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"mvngu\",\n      \"name\": \"mvngu\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/362259?v=4\",\n      \"profile\": \"https://github.com/mvngu\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"das-intensity\",\n      \"name\": \"Dr. Nick\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/12521554?v=4\",\n      \"profile\": \"https://github.com/das-intensity\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"jannick0\",\n      \"name\": \"jannick0\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6295579?v=4\",\n      \"profile\": \"https://github.com/jannick0\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"jgmbenoit\",\n      \"name\": \"Jérôme Benoit\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/8476716?v=4\",\n      \"profile\": \"https://www.rezozer.net/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"frederik-h\",\n      \"name\": \"Frederik Harwath\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/22046314?v=4\",\n      \"profile\": \"https://github.com/frederik-h\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"AdamKorcz\",\n      \"name\": \"AdamKorcz\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/44787359?v=4\",\n      \"profile\": \"https://adalogics.com/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"antonio-rojas\",\n      \"name\": \"Antonio Rojas\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/11243355?v=4\",\n      \"profile\": \"https://github.com/antonio-rojas\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"horvatha\",\n      \"name\": \"Árpád Horváth\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/951303?v=4\",\n      \"profile\": \"https://pyedu.hu/arpad/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"PeterScott\",\n      \"name\": \"Peter Scott\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/406445?v=4\",\n      \"profile\": \"http://finger-tree.blogspot.com/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"naviddianati\",\n      \"name\": \"Navid Dianati\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5558232?v=4\",\n      \"profile\": \"https://github.com/naviddianati\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"YasirKusay\",\n      \"name\": \"YasirKusay\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/59812220?v=4\",\n      \"profile\": \"https://github.com/YasirKusay\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"abeham\",\n      \"name\": \"Andreas Beham\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5585242?v=4\",\n      \"profile\": \"http://heal.heuristiclab.com/team/beham\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"kasterma\",\n      \"name\": \"Bart Kastermans\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/421437?v=4\",\n      \"profile\": \"http://kasterma.net/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"eriknw\",\n      \"name\": \"Erik Welch\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2058401?v=4\",\n      \"profile\": \"https://twitter.com/eriknwelch\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"xuhdev\",\n      \"name\": \"Hong Xu\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/325476?v=4\",\n      \"profile\": \"https://www.topbug.net/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"Hosseinazari\",\n      \"name\": \"Hosseinazari\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/971459?v=4\",\n      \"profile\": \"https://github.com/Hosseinazari\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"jmonlong\",\n      \"name\": \"Jean Monlong\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5704457?v=4\",\n      \"profile\": \"https://jmonlong.github.io/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"Keivin98\",\n      \"name\": \"Keivin98\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/31882637?v=4\",\n      \"profile\": \"https://github.com/Keivin98\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"araujo88\",\n      \"name\": \"Leonardo de Araujo\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/46436462?v=4\",\n      \"profile\": \"https://araujo88.medium.com/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"msk\",\n      \"name\": \"Min Kim\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/19195?v=4\",\n      \"profile\": \"https://github.com/msk\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"khitrin\",\n      \"name\": \"Nikolay Khitrin\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/25713847?v=4\",\n      \"profile\": \"https://github.com/khitrin\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"pschmied\",\n      \"name\": \"Peter Schmiedeskamp\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1065905?v=4\",\n      \"profile\": \"https://github.com/pschmied\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"flying-sheep\",\n      \"name\": \"Philipp A.\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/291575?v=4\",\n      \"profile\": \"https://phil.red/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"RamySaied1\",\n      \"name\": \"Ramy Saied\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/22375919?v=4\",\n      \"profile\": \"https://www.linkedin.com/in/ramy-saied-0415b810b/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"dotlambda\",\n      \"name\": \"Robert Schütz\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6806011?v=4\",\n      \"profile\": \"https://github.com/dotlambda\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"ryanduffin\",\n      \"name\": \"Ryan Duffin\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5711508?v=4\",\n      \"profile\": \"https://github.com/ryanduffin\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"shlomif\",\n      \"name\": \"Shlomi Fish\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/3150?v=4\",\n      \"profile\": \"http://www.shlomifish.org/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"kloczek\",\n      \"name\": \"Tomasz Kłoczko\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/31284574?v=4\",\n      \"profile\": \"https://github.com/kloczek\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"heavywatal\",\n      \"name\": \"Watal M. Iwasaki\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1431267?v=4\",\n      \"profile\": \"https://heavywatal.github.io/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"nograpes\",\n      \"name\": \"Aman Verma\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2967973?v=4\",\n      \"profile\": \"https://github.com/nograpes\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"guyroznb\",\n      \"name\": \"guy rozenberg\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/55619320?v=4\",\n      \"profile\": \"https://github.com/guyroznb\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"luav\",\n      \"name\": \"Artem V L\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6162969?v=4\",\n      \"profile\": \"http://linkedin.com/in/artemvl\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"Katterrina\",\n      \"name\": \"Kateřina Č.\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/31630249?v=4\",\n      \"profile\": \"https://github.com/Katterrina\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"valdaarhun\",\n      \"name\": \"valdaarhun\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/39989901?v=4\",\n      \"profile\": \"https://github.com/valdaarhun\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"YuliYudith\",\n      \"name\": \"YuliYudith\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/54366258?v=4\",\n      \"profile\": \"https://github.com/YuliYudith\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"alexsyou\",\n      \"name\": \"alexsyou\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/54590871?v=4\",\n      \"profile\": \"https://github.com/alexsyou\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"rohitt28\",\n      \"name\": \"Rohit Tawde\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/67415747?v=4\",\n      \"profile\": \"https://github.com/rohitt28\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"alexperrone\",\n      \"name\": \"alexperrone\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/4990236?v=4\",\n      \"profile\": \"https://github.com/alexperrone\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"borsgeorgica\",\n      \"name\": \"Georgica Bors\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/15649138?v=4\",\n      \"profile\": \"https://github.com/borsgeorgica\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"meetpatel0963\",\n      \"name\": \"MEET PATEL\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/63169740?v=4\",\n      \"profile\": \"https://www.linkedin.com/in/meet-patel-b1329a16b/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"kwofach\",\n      \"name\": \"kwofach\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/97578264?v=4\",\n      \"profile\": \"https://github.com/kwofach\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"Gomango999\",\n      \"name\": \"Kevin Zhu\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/37771462?v=4\",\n      \"profile\": \"https://github.com/Gomango999\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"pradkrish\",\n      \"name\": \"Pradeep Krishnamurthy\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/47261443?v=4\",\n      \"profile\": \"https://github.com/pradkrish\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"flange-ipb\",\n      \"name\": \"flange-ipb\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/34936695?v=4\",\n      \"profile\": \"https://github.com/flange-ipb\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"JJ\",\n      \"name\": \"Juan Julián Merelo Guervós\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/500?v=4\",\n      \"profile\": \"http://goo.gl/IlWG8U\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"rfulekjames\",\n      \"name\": \"Radoslav Fulek\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/54232342?v=4\",\n      \"profile\": \"https://github.com/rfulekjames\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"professorcode1\",\n      \"name\": \"professorcode1\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/42749164?v=4\",\n      \"profile\": \"https://github.com/professorcode1\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"larah19\",\n      \"name\": \"larah19\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/54937363?v=4\",\n      \"profile\": \"https://github.com/larah19\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"Biswa96\",\n      \"name\": \"Biswapriyo Nath\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/31443074?v=4\",\n      \"profile\": \"https://github.com/Biswa96\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"limburgher\",\n      \"name\": \"Gwyn Ciesla\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2363820?v=4\",\n      \"profile\": \"http://cecinestpasunefromage.wordpress.com/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"aagon\",\n      \"name\": \"aagon\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/10883752?v=4\",\n      \"profile\": \"https://github.com/aagon\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"GanzuraTheConsumer\",\n      \"name\": \"Quinn Buratynski\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/19657136?v=4\",\n      \"profile\": \"https://github.com/GanzuraTheConsumer\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"Tagl\",\n      \"name\": \"Arnar Bjarni Arnarson\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/7704746?v=4\",\n      \"profile\": \"https://github.com/Tagl\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"SoapGentoo\",\n      \"name\": \"David Seifert\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/16636962?v=4\",\n      \"profile\": \"https://github.com/SoapGentoo\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"krlmlr\",\n      \"name\": \"Kirill Müller\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1741643?v=4\",\n      \"profile\": \"https://fosstodon.org/@kirill\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"gendelpiekel\",\n      \"name\": \"Michael\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/14215028?v=4\",\n      \"profile\": \"https://github.com/gendelpiekel\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"GenieTim\",\n      \"name\": \"Tim Bernhard\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/8596965?v=4\",\n      \"profile\": \"https://github.com/GenieTim\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"maelle\",\n      \"name\": \"Maëlle Salmon\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/8360597?v=4\",\n      \"profile\": \"https://masalmon.eu/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    }\n  ],\n  \"contributorsPerLine\": 7\n}\n"
        },
        {
          "name": ".astylerc",
          "type": "blob",
          "size": 0.751953125,
          "content": "# General Options:\n# - Only display errors\n# - Redirect stderr to stdout\n# - Enforce linux lineendings\n# - Preserve file modification date\n# - Do not create file backups, everything should be VCSed anyway\n--quiet\n--errors-to-stdout\n--lineend=linux\n--preserve-date\n--suffix=none\n\n# Style\n--style=java\n\n# Use 4 spaces\n--indent=spaces=4\n--convert-tabs\n\n# Paddings around operators, parentheses, and a header\n--pad-oper\n--pad-header\n\n# Continuation blocks should have no extra indentation\n--min-conditional-indent=0\n\n# Indent preprocessor blocks and defines\n--indent-preproc-block\n--indent-preproc-define\n\n# Add braces around single-line branches\n--add-braces\n\n# Keep complex statement sequences on the same line; they are that way for\n# a reason\n--keep-one-line-statements\n"
        },
        {
          "name": ".azure",
          "type": "tree",
          "content": null
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2021484375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.{c,cc,cpp,h,hh,hpp,pmt}]\nindent_style = space\nindent_size = 4\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.08203125,
          "content": "*~\n.*.swp\n.dirstamp\n.vscode/\n\n/tags\n/IGRAPH_VERSION\n/build\n/build-*\n/tools/**/*.pyc\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.642578125,
          "content": "fail_fast: true\nexclude: \"(^vendor/|\\\\.patch$)\"\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.6.0\n    hooks:\n      - id: mixed-line-ending\n        args: [\"--fix=lf\"]\n        exclude: \"\\\\.net$\"\n      - id: end-of-file-fixer\n        exclude: \"\\\\.out$\"\n      - id: trailing-whitespace\n        exclude: \"\\\\.out$\"\n      - id: check-merge-conflict\n      - id: fix-byte-order-marker\n        exclude: \"utf8_with_bom.net$\"\n\n  - repo: local\n    hooks:\n      - id: update-contributors-txt\n        name: Update CONTRIBUTORS.txt\n        language: python\n        entry: python3 tools/update_contributors_txt.py\n        pass_filenames: false\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.7216796875,
          "content": "\nlanguage: c\ncache: ccache\nos: linux\ndist: focal\n\n# Ignore branches with names starting with certain keywords:\nbranches:\n  except:\n  - /^(appveyor|github)\\/.+$/\n\nenv:\n  global:\n    - CMAKE_GENERATOR=Ninja   # build with ninja instead of make\n    - CTEST_PARALLEL_LEVEL=2  # run tests in parallel\n    - PATH=\"/snap/bin:$PATH\"  # needed in order to run the cmake installed with snap\n    - OMP_NUM_THREADS=1       # reproducibility for plfit\n\ngit:\n  depth: 200    # to make sure we find the latest tag when building. Increase if not enough.\n\naddons:\n  apt:\n    update: true\n    packages:\n      - ninja-build\n      - flex\n      - bison\n#      - docbook2x\n#      - xmlto\n#      - texinfo\n#      - source-highlight\n#      - libxml2-utils\n#      - xsltproc\n#      - fop\n      - libgmp-dev\n      - libglpk-dev\n      - libarpack2-dev\n#      - libblas-dev\n#      - liblapack-dev\n      - libopenblas-dev\n      - libxml2-dev\n      - git\n      - colordiff\n  snaps:\n    - name: cmake\n      confinement: classic\n\n# configuration (running cmake) is in before_script\n# if this phase fails, the build stops immediately\nbefore_script:\n  - mkdir build && cd build\n  - cmake .. -DIGRAPH_USE_INTERNAL_BLAS=ON -DIGRAPH_USE_INTERNAL_LAPACK=ON -DIGRAPH_USE_INTERNAL_ARPACK=ON -DIGRAPH_USE_INTERNAL_GLPK=ON -DIGRAPH_USE_INTERNAL_GMP=ON -DIGRAPH_VERIFY_FINALLY_STACK=ON -DCMAKE_BUILD_TYPE=Debug -DIGRAPH_PRINT_ARITH_HEADER=ON -DUSE_SANITIZER=Address\n\n# building and testing is in script\n# use && to ensure that ctest is not run if the build failed\nscript:\n  - cmake --build . --target build_tests && ctest --output-on-failure\n\nafter_failure:\n  - for file in tests/*.diff; do cat \"$file\" | colordiff; done\n\njobs:\n  include:\n    # - name: \"Linux\"\n    #   os: linux\n\n    - name: \"Linux arm64\"\n      os: linux\n      arch: arm64\n\n    - name: \"Linux arm64 external\"\n      os: linux\n      arch: arm64\n      before_script:\n        - mkdir build && cd build\n        - cmake .. -DIGRAPH_USE_INTERNAL_BLAS=OFF -DIGRAPH_USE_INTERNAL_LAPACK=OFF -DIGRAPH_USE_INTERNAL_ARPACK=OFF -DIGRAPH_USE_INTERNAL_GLPK=OFF -DIGRAPH_USE_INTERNAL_GMP=OFF -DIGRAPH_VERIFY_FINALLY_STACK=OFF -DCMAKE_BUILD_TYPE=Debug -DIGRAPH_PRINT_ARITH_HEADER=ON -DUSE_SANITIZER=Address\n\n    - name: \"Linux ppc64\"\n      os: linux\n      arch: ppc64le\n\n    - name: \"Linux s390x\"\n      os: linux\n      arch: s390x\n      # Do not enable ASan, as it leads to linking errors.\n      before_script:\n        - mkdir build && cd build\n        - cmake .. -DIGRAPH_USE_INTERNAL_BLAS=ON -DIGRAPH_USE_INTERNAL_LAPACK=ON -DIGRAPH_USE_INTERNAL_ARPACK=ON -DIGRAPH_USE_INTERNAL_GLPK=ON -DIGRAPH_USE_INTERNAL_GMP=ON -DIGRAPH_VERIFY_FINALLY_STACK=ON -DCMAKE_BUILD_TYPE=Debug -DIGRAPH_PRINT_ARITH_HEADER=ON\n\n#notifications:\n#  email:\n#    on_success: change\n#    on_failure: always\n"
        },
        {
          "name": ".zenodo.json",
          "type": "blob",
          "size": 0.708984375,
          "content": "{\n    \"title\": \"igraph\",\n    \"upload_type\": \"software\",\n    \"keywords\": [\n        \"graph theory\",\n        \"network analysis\"\n    ],\n    \"creators\": [\n        {\n            \"name\": \"Csárdi, Gábor\",\n            \"orcid\": \"0000-0001-7098-9676\"\n        },\n        {\n            \"name\": \"Nepusz, Tamás\",\n            \"orcid\": \"0000-0002-1451-338X\"\n        },\n        {\n            \"name\": \"Horvát, Szabolcs\",\n            \"orcid\": \"0000-0002-3100-523X\"\n        },\n        {\n            \"name\": \"Traag, Vincent\",\n            \"orcid\": \"0000-0003-3170-3879\"\n        },\n        {\n            \"name\": \"Zanini, Fabio\",\n            \"orcid\": \"0000-0001-7097-8539\"\n        },\n        {\n            \"name\": \"Noom, Daniel\"\n        }\n    ]\n}\n"
        },
        {
          "name": "ACKNOWLEDGEMENTS.md",
          "type": "blob",
          "size": 9.3642578125,
          "content": "# Acknowledgements\n\n[igraph](https://igraph.org) includes or links to code from the following sources.\n\n\n#### [ARPACK-NG 3.7.0](https://github.com/opencollab/arpack-ng)\n\nBSD Software License\n\nPertains to ARPACK and P_ARPACK\n\nCopyright (c) 1996-2008 Rice University.\nDeveloped by D.C. Sorensen, R.B. Lehoucq, C. Yang, and K. Maschhoff.\nAll rights reserved.\n\nArpack has been renamed to arpack-ng.\n\nCopyright (c) 2001-2011 - Scilab Enterprises\nUpdated by Allan Cornet, Sylvestre Ledru.\n\nCopyright (c) 2010 - Jordi Gutiérrez Hermoso (Octave patch)\n\nCopyright (c) 2007 - Sébastien Fabbro (gentoo patch)\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n- Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n- Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer listed\n  in this license in the documentation and/or other materials\n  provided with the distribution.\n\n- Neither the name of the copyright holders nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#### [bliss 0.75](https://users.aalto.fi/~tjunttil/bliss/)\n\nCopyright (c) 2003-2021 Tommi Junttila.\n\nLicense: [GNU LGPLv3][lgpl3]\n\n\n#### [Cliquer 1.21](https://users.aalto.fi/~pat/cliquer.html)\n\nCopyright (C) 2002 Sampo Niskanen, Patric Östergård.\n\nLicense: [GNU GPLv2][gpl2] or later\n\n\n#### [PRPACK](https://github.com/dgleich/prpack)\n\nCopyright (C) David Kurokawa, David Gleich, Chen Greif.\n\n\n#### [gengraph](https://www-complexnetworks.lip6.fr/~latapy/FV/generation.html)\n\nAlgorithm by Fabien Viger and Matthieu Latapy.\n\nImplementation Copyright (C) Fabien Viger.\n\nLicense: [GNU GPLv2][gpl2] or later\n\n\n#### [Walktrap 0.2](https://www-complexnetworks.lip6.fr/~latapy/PP/walktrap.html)\n\nAlgorithm by Pascal Pons and Matthieu Latapy.\n\nImplementation Copyright (C) 2004-2005 Pascal Pons.\n\nLicense: [GNU GPLv2][gpl2] or later\n\n\n#### [plfit](https://github.com/ntamas/plfit)\n\nCopyright (C) 2010-2011 Tamás Nepusz.\n\nLicense: [GNU GPLv2][gpl2] or later\n\n#### DrL\n\nCopyright 2007 Sandia Corporation. Under the terms of Contract\nDE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains\ncertain rights in this software.\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n  * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n  * Neither the name of Sandia National Laboratories nor the names of\nits contributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n#### [Hierarchical Random Graphs](http://tuvalu.santafe.edu/~aaronc/hierarchy/)\n\nCopyright (C) 2006-2008 Aaron Clauset.\n\nLicense: [GNU GPLv2][gpl2] or later\n\n\n#### Spinglass community detection\n\nCopyright (C) 2004 by Joerg Reichardt.\n\nLicense: [GNU GPLv2][gpl2] or later\n\n\n#### [LAD version 1](http://liris.cnrs.fr/csolnon/LAD.html)\n\nCopyright (C) Christine Solnon.\n\nLicense: [CeCILL-B license](https://cecill.info/licences.en.html)\n\n\n#### [LAPACK 3.5.0](http://www.netlib.org/lapack/) and [BLAS 3.12.0](http://www.netlib.org/blas/)\n\nCopyright (c) 1992-2013 The University of Tennessee and The University of Tennessee Research Foundation.  All rights reserved.\n\nCopyright (c) 2000-2013 The University of California Berkeley. All rights reserved.\n\nCopyright (c) 2006-2013 The University of Colorado Denver.  All rights reserved.\n\nLicense: [New BSD license](http://www.netlib.org/lapack/LICENSE.txt)\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n- Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n- Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer listed\n  in this license in the documentation and/or other materials\n  provided with the distribution.\n\n- Neither the name of the copyright holders nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nThe copyright holders provide no reassurances that the source code\nprovided does not infringe any patent, copyright, or any other\nintellectual property rights of third parties.  The copyright holders\ndisclaim any liability to any recipient for claims brought against\nrecipient by any third party for infringement of that parties\nintellectual property rights.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n#### [f2c](http://www.netlib.org/f2c/)\n\nCopyright 1990 - 1997 by AT&T, Lucent Technologies and Bellcore.\n\nPermission to use, copy, modify, and distribute this software\nand its documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that the copyright notice and this\npermission notice and warranty disclaimer appear in supporting\ndocumentation, and that the names of AT&T, Bell Laboratories,\nLucent or Bellcore or any of their entities not be used in\nadvertising or publicity pertaining to distribution of the\nsoftware without specific, written prior permission.\n\nAT&T, Lucent and Bellcore disclaim all warranties with regard to\nthis software, including all implied warranties of\nmerchantability and fitness.  In no event shall AT&T, Lucent or\nBellcore be liable for any special, indirect or consequential\ndamages or any damages whatsoever resulting from loss of use,\ndata or profits, whether in an action of contract, negligence or\nother tortious action, arising out of or in connection with the\nuse or performance of this software.\n\n\n#### [SuiteSparse](http://www.suitesparse.com)\n\n * CXSPARSE: a Concise Sparse Matrix package - Extended. Copyright (c) 2006-2017, Timothy A. Davis.\n\n   License: [GNU LGPLv2.1][lgpl2] or later\n\n\n#### [GLPK (GNU Linear Programming Kit) Version 5.0](https://www.gnu.org/software/glpk/)\n\nCopyright (C) 2000-2020 Free Software Foundation, Inc.\n\nWritten by Andrew Makhorin, Department for Applied Informatics,\nMoscow Aviation Institute, Moscow, Russia. E-mail: <mao@gnu.org>.\n\nLicense: [GNU GPLv3][gpl3] or later\n\n\n#### [GMP (GNU Multiple Precision Arithmetic Library) and mini-gmp](https://gmplib.org/)\n\nCopyright (C) Free Software Foundation, Inc.\n\nLicense: [GNU LGPLv3][lgpl3] or later; or [GNU GPLv2][gpl2] or later\n\n\n#### [libxml2](http://xmlsoft.org/)\n\nCopyright (C) 1998-2012 Daniel Veillard.\n\nLicense: [MIT license][mit]\n\n\n [mit]:   https://opensource.org/licenses/mit-license.html\n [gpl2]:  https://www.gnu.org/licenses/gpl-2.0.html\n [lgpl2]: https://www.gnu.org/licenses/lgpl-2.1.html\n [gpl3]:  https://www.gnu.org/licenses/gpl-3.0.html\n [lgpl3]: https://www.gnu.org/licenses/lgpl-3.0.html\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.21875,
          "content": "Gabor Csardi <csardi.gabor@gmail.com>\nTamas Nepusz <ntamas@gmail.com>\nSzabolcs Horvat <szhorvat@gmail.com>\nVincent Traag <v.a.traag@cwts.leidenuniv.nl>\nFabio Zanini <fabio.zanini@unsw.edu.au>\nDaniel Noom <ggatw@outlook.com>\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 128.7783203125,
          "content": "# igraph C library changelog\n\n## [master]\n\n### Deprecated\n\n - The undocumented function `igraph_vector_sumsq()` is deprecated. Use `igraph_blas_dnrm2()` to compute the Euclidean norm of real vectors.\n\n### Other\n\n - Workaround for bug in CMake 3.31.0, see https://gitlab.kitware.com/cmake/cmake/-/issues/26449\n - Updated the vendored `plfit` library to version 1.0.0. This works around a bug in some MSVC / Windows SDK versions that define a `NAN` macro that is not a compile-time constant.\n - Updated vendored BLAS to 3.12.0 and vendored ARPACK to ARPACK-NG 3.7.0.\n - Re-translated vendored BLAS/LAPACK/ARPACK sources with f2c version 20240504.\n - Documentation improvements.\n\n## [0.10.15]\n\n### Added\n\n - `igraph_bitset_update()` copies the contents of one bitset into another (experimental function).\n - `igraph_vector_sort_ind()` (rename of `igraph_vector_qsort_ind()`).\n - `igraph_vector_contains_sorted()` (rename of `igraph_vector_binsearch2()`).\n - `igraph_vector_reverse_section()` reverses a contiguous section of a vector.\n - `igraph_vector_rotate_left()` applies a cyclic permutation to a vector.\n - `igraph_strvector_swap_elements()` swaps two strings in an `igraph_strvector_t`.\n - `igraph_find_cycle()` finds a single cycle in a graph, if it exists (experimental function).\n - `igraph_feedback_vertex_set()` finds a minimum feedback vertex set in a directed or undirected graph (experimental function).\n - `igraph_simple_cycles()` and `igraph_simple_cycles_callback()` find all simple cycles in a graph, optionally with an upper bound on the cycle length (experimental functions). Many thanks to Tim Bernhard @GenieTim for contributing this functionality in #2181.\n\n### Changed\n\n - `igraph_feedback_arc_set()` uses a much faster method for solving the exact minimum feedback arc set problem. The new method (`IGRAPH_FAS_EXACT_IP_CG`) is used by default (i.e. with `IGRAPH_FAS_EXACT_IP`), but the previous method is also kept available (`IGRAPH_FAS_EXACT_IP_TI`).\n - `igraph_motifs_randesu()`, `igraph_motifs_randesu_callback()`, `igraph_motifs_randesu_estimate()` and `igraph_motifs_randesu_no()` now accept `NULL` for their `cut_prob` parameter, signifying that a complete search should be performed.\n - `igraph_centralization_eigenvector_centrality_tmax()` and `igraph_centralization_eigenvector_centrality()` cannot produce meaningful results without normalizing vertex-level eigenvector centrality in a well-defined way. This was not the case when using `scale=false`. These functions now ignore the value of the `scale` parameter and always scale vertex-level centrality scores to have a maximum of 1. If you require a different type of normalization for the vertex-level eigenvector centrality scores, perform this normalization manually, and call `igraph_centralization()` to compute the centralization.\n - When `igraph_eigenvector_centrality()` receives a directed acyclic graph as input, it now produces an eigenvector which has 1s in sink vertices and 0s everywhere else. Previously, it would return an all-zero vector. Note that eigenvector centrality is not uniquely defined for graphs that are not (strongly) connected, and both of these results can be considered valid. This change is to ensure consistency with the definition of the theoretical maximum of eigenvector centralization, which assumes the in-star to be the most centralized directed network.\n\n### Fixed\n\n - `igraph_layout_drl()` and `igraph_layout_drl_3d()` would crash with an assertion failure when interrupted. This is now fixed.\n - Removed broken interruption support from `igraph_community_spinglass_single()`.\n - In rare cases `igraph_community_multilevel()` could enter an infinite loop. This is now corrected.\n - Fixed null-dereference in `igraph_community_voronoi()` when requesting `modularity` but not `membership`.\n - Fixed null-dereference in `igraph_community_optimal_modularity()` when requesting `modularity` but not `membership` and passing a null graph or singleton graph.\n - `igraph_layout_umap()` and `igraph_layout_umap_3d()` would crash when passing `distances=NULL` and `distances_are_weights=true`. This is now fixed.\n - `igraph_layout_umap()` and `igraph_layout_umap_3d()` would crash on interruption. This is now fixed.\n - `igraph_read_graph_pajek()` now warns about duplicate vertex IDs in input files.\n - The documented `igraph_strvector_resize_min()` was missing from headers.\n - `igraph_feedback_arc_set()` now validates the edge weights.\n - `igraph_layout_lgl()` was not working correctly since igraph 0.10.0 due to a poor choice of initial coordinates. This is now fixed.\n - `igraph_centralization_degree_tmax()`, `igraph_centralization_betweenness_tmax()`, `igraph_centralization_closeness_tmax()`, and `igraph_centralization_eigenvector_centrality_tmax()` now validate their `nodes` parameter.\n - `igraph_centralization_degree_tmax()`, `igraph_centralization_betweenness_tmax()`, `igraph_centralization_closeness_tmax()`, and `igraph_centralization_eigenvector_centrality_tmax()` now return NaN for zero-vertex graphs. Previously they would return invalid values.\n - `igraph_centralization_eigenvector_centrality_tmax()` now returns 0 for the undirected singleton graph. Previous it would return an invalid value.\n - `igraph_motifs_randesu_estimate()` now validates the sample size.\n - `igraph_bipartite_projection_size()` now validates the bipartite `types` vector.\n\n### Deprecated\n\n - `igraph_minimum_spanning_tree_prim()` and `igraph_minimum_spanning_tree_unweighted()` are deprecated. Use `igraph_minimum_spanning_tree()` in conjunction with `igraph_subgraph_from_edges()` instead.\n - `igraph_array3_t` and all associated functions are deprecated and scheduled for removal in igraph 1.0.\n - `igraph_vector_qsort_ind()` is deprecated in favour of `igraph_vector_sort_ind()`.\n - `igraph_vector_binsearch2()` is deprecated in favour of `igraph_vector_contains_sorted()`.\n\n### Other\n\n - Fixed multiple memory leaks in benchmark programs.\n - Documentation improvements.\n\n## [0.10.13]\n\n### Added\n\n - `igraph_bitset_fill()` sets all elements of a bitset to the same value (experimental function).\n - `igraph_bitset_null()` clears all elements of a bitset (experimental function).\n - `igraph_bitset_is_all_zero()`, `igraph_bitset_is_all_one()`, `igraph_bitset_is_any_zero()`, `igraph_bitset_is_any_one()` check if any/all elements of a bitset are zeros/ones (experimental functions).\n - `igraph_chung_lu_game()` implements the classic Chung-Lu model, as well as a number of its variants (experimental function).\n - `igraph_mean_degree()` computes the average of vertex degrees (experimental function).\n - `igraph_count_loops()` counts self-loops in the graph (experimental function).\n - `igraph_is_clique()` checks if all pairs within a set of vertices are connected (experimental function).\n - `igraph_is_independent_vertex_set()` checks if no pairs within a set of vertices are connected (experimental function).\n - `igraph_hypercube()` creates a hypercube graph (experimental function).\n - `igraph_vector_intersection_size_sorted()` counts elements common to two sorted vectors (experimental function).\n - `igraph_stack_capacity()` returns the allocated capacity of a stack.\n - `igraph_vector_is_all_finite()` checks if all elements in a vector are finite (i.e. neither NaN nor Inf).\n\n### Fixed\n\n - Fixed a bug that incorrectly cached that a graph has no multiple edges when `igraph_init_adjlist()` was called with `IGRAPH_NO_LOOPS` and `IGRAPH_NO_MULTIPLE` and all the multi-edges were loop edges.\n - `igraph_is_forest()` would fail to set the result variable when testing for a directed forest, and it was already cached that the graph was not an undirected forest.\n - `igraph_hub_and_authority_scores()` no longer clips negative results to zeros when negative weights are present.\n - Fixed an assertion failure in `igraph_realize_bipartite_degree_sequence()` with some non-graphical degree sequences when requesting simple bipartite graphs.\n - `igraph_static_fitness_game()` checks the input more carefully, and avoids an infinite loop in rare edge cases, such as when (almost) all fitness scores are zero.\n - `igraph_arpack_rnsolve()` used the incorrect error message text for some errors. This is now corrected.\n - Corrected the detection of some MSVC-specific bitset intrinsics during configuration.\n - Corrected a bug in the fallback implementation of `igraph_bitset_countl_zero()` when `IGRAPH_INTEGER_SIZE` was set to 32. This fallback implementation was _not_ used with GCC, Clang, or MSVC.\n\n### Changed\n\n - `igraph_is_graphical()` and `igraph_is_bigraphical()` are now linear-time in all cases, and generally several times faster than before (thanks to @gendelpiekel, contributed in #2605).\n - `igraph_erdos_renyi_game_gnp()` can now generate graphs with more than a hundred million vertices.\n - `igraph_hub_and_authority_scores()` now warns when negative edge weights are present.\n - `igraph_layout_lgl()` now uses a BFS tree rooted in the vertex specified as `proot` to guide the layout. Previously it used an unspecified (arbitrary) spanning tree.\n - Updated the internal heuristics used by igraph's ARPACK interface, `igraph_arpack_rssolve()` and `igraph_arpack_rnsolve()`, to improve the robustness of calculations.\n - Updated the initial vector construction in `igraph_hub_and_authority_scores()`, `igraph_eigenvector_centrality()` and `igraph_(personalized_)pagerank()` with `IGRAPH_PAGERANK_ALGO_ARPACK`. This improves the robustness and convergence of calculations.\n\n### Other\n\n - Documentation improvements.\n - Reduced the memory usage of several functions by using bitsets instead of boolean vectors.\n - `igraph_vector_intersect_sorted()` has better performance when the input vector sizes are similar.\n\n## [0.10.12] - 2024-05-06\n\n### Added\n\n - `igraph_transitive_closure()` computes the transitive closure of a graph (experimental function).\n - `igraph_reachability()` determines which vertices are reachable from each other in a graph (experimental function).\n - `igraph_count_reachable()` counts how many vertices are reachable from each vertex (experimental function).\n - Added a bitset data structure, `igraph_bitset_t`, and a set of corresponding functions (experimental functionality).\n\n### Fixed\n\n - `igraph_community_label_propagation()` is now interruptible.\n - `igraph_is_bipartite()` would on rare occasions return invalid results when the cache was employed.\n - `igraph_weighted_adjacency()` correctly passes through NaN values with `IGRAPH_ADJ_MAX`, and correctly recognizes symmetric adjacency matrices containing NaN values with `IGRAPH_ADJ_UNDIRECTED`.\n - `igraph_read_graph_gml()` can now read GML files that use ids larger than what is representable on 32 bits, provided that igraph was configured with a 64-bit `igraph_integer_t` size.\n - Fixed a performance issue in `igraph_read_graph_graphml()` with files containing a very large number of entities, such as `&gt;`.\n - `igraph_read_graph_pajek()` has improved vertex ID validation that better matches that of Pajek's own behavior.\n\n### Changed\n\n - `igraph_eigenvector_centrality()` no longer issues a warning when the input is directed and weighted. When using this function, keep in mind that eigenvector centrality is well-defined only for (strongly) connected graphs, and edges with zero weights are effectively treated as absent.\n\n### Deprecated\n\n - `igraph_transitive_closure_dag()` is deprecated in favour of `igraph_transitive_closure()`\n\n### Other\n\n - Documentation improvements.\n - `igraph_strength()` and `igraph_degree(loops=false)` are now faster when calculating values for all vertices (contributed by @gendelpiekel in #2602)\n\n## [0.10.11] - 2024-04-02\n\n### Added\n\n - `igraph_is_complete()` checks whether there is a connection between all pairs of vertices (experimental function, contributed by Aymeric Agon-Rambosson @aagon in #2510).\n - `igraph_join()` creates the _join_ of two graphs (experimental function, contributed by Quinn Buratynski @GanzuraTheConsumer in #2508).\n\n### Fixed\n\n - Fixed a corruption of the \"finally\" stack in `igraph_write_graph_gml()` for certain invalid GML files.\n - Fixed a memory leak in `igraph_write_graph_lgl()` when vertex names were present but edge weights were not.\n - Fixed the handling of duplicate edge IDs in `igraph_subgraph_from_edges()`.\n - Fixed conversion of sparse matrices to dense with `igraph_sparsemat_as_matrix()` when sparse matrix object did not make use of its full allocated capacity.\n - `igraph_write_graph_ncol()` and `igraph_write_graph_lgl()` now refuse to write vertex names which would result in an invalid file that cannot be read back in.\n - `igraph_write_graph_gml()` now ignores graph attributes called `edge` or `node` with a warning. Writing these would create an invalid GML file that igraph couldn't read back.\n - `igraph_disjoint_union()` and `igraph_disjoint_union_many()` now check for overflow.\n - `igraph_read_graph_graphml()` now correctly compares attribute values with certain expected values, meaning that prefixes of valid values of `attr.type` are not accepted anymore.\n - Empty IDs are not allowed any more in `<key>` tags of GraphML files as this is a violation of the GraphML specification.\n - `igraph_is_separator()` and `igraph_is_minimal_separator()` now work correctly with disconnected graphs.\n - `igraph_linegraph()` now considers self-loops to be self-adjacent in undirected graphs, bringing consistency with how directed graphs were already handled in previous versions.\n - `igraph_all_st_mincuts()` now correctly returns all minimum cuts. This also fixes a problem with `igraph_minimum_size_separators()`.\n - Corrected minor error in `igraph_community_label_propagation()` when adding labels to isolated nodes with some fixed labels present.\n - `igraph_community_spinglass()` no longer crashes when passing an edgeless graph and an empty weight vector.\n - `igraph_rewire()` no longer crashes on graphs with more than three vertices but fewer than two edges.\n\n### Changed\n\n - `igraph_rewire()` on longer throws an error on graphs with fewer than four vertices. These graphs are now returned unchanged, just like other graphs which are the unique realization of their degree sequence.\n\n### Other\n\n - Performance: `igraph_is_simple()` now makes more granular use of the cache.\n - Performance: `igraph_degree()` now makes use of the cache when checking for self-loops.\n - The performance of `igraph_is_minimal_separator()` was improved.\n - `igraph_is_graphical()` now performs graphicality checks for degree sequences of simple directed graphs in linear time, an improvement from the previously used quadratic algorithm (contributed by Arnar Bjarni Arnarson @Tagl in #2537).\n - Documentation improvements.\n\n## [0.10.10] - 2024-02-13\n\n### Fixed\n\n - When `igraph_is_forest()` determined that a graph is not a directed forest, and the `roots` output parameter was set to `NULL`, it would incorrectly cache that the graph is also not an undirected forest.\n - `igraph_spanner()` now correctly ignores edge directions, and no longer crashes on directed graphs.\n\n### Deprecated\n\n - `igraph_are_connected()` is renamed to `igraph_are_adjacent()`; the old name is kept available until at least igraph 1.0.\n\n### Other\n\n - Documentation improvements.\n\n## [0.10.9] - 2024-02-02\n\n### Added\n\n - `igraph_is_biconnected()` checks if a graph is biconnected.\n - `igraph_realize_bipartite_degree_sequence()` constructs a bipartite graph that has the given bidegree sequence, optionally ensuring that it is connected (PR #2425 by Lára Margrét Hólmfríðardóttir @larah19).\n\n### Fixed\n\n - More robust error handling in HRG code.\n - Fixed infinite loop in `igraph_hrg_sample_many()`.\n - `igraph_community_fastgreedy()` no longer crashes when providing a modularity vector only, but not a merges matrix of membership vector.\n - The graph property cache was not initialized correctly on systems where the size of `bool` was not 1 byte (#2477).\n - Compatibility with libxml2 version 2.12 (#2442).\n\n### Deprecated\n\n - The macro `STR()` is deprecated; use the function `igraph_strvector_get()` instead.\n\n### Other\n\n - Performance: Reduced memory usage and improved initialization performance for `igraph_strvector_t`.\n - Performance: Improved cache use by `igraph_is_bipartite()`.\n - The documentation is now also generated in Texinfo format.\n - Documentation improvements.\n\n## [0.10.8] - 2023-11-17\n\n### Added\n\n - `igraph_joint_degree_matrix()` computes the joint degree matrix, i.e. counts connections between vertices of different degrees (PR #2407 by Lára Margrét Hólmfríðardóttir @larah19).\n - `igraph_joint_degree_distribution()` computes the joint distribution of degrees at either end of edges.\n - `igraph_joint_type_distribution()` computes the joint distribution of vertex categories at either end of edges, i.e. the mixing matrix.\n - `igraph_degree_correlation_vector()` computes the degree correlation function and its various directed generalizations.\n\n### Changed\n\n - The behaviour of the Pajek format reader and writer is now more closely aligned with the Pajek software and the reader is more tolerant of input it cannot interpret. Only those vertex and edge parameters are treated as valid which Pajek itself understands, therefore support for `size` is now dropped, and support for the `font` edge parameter is added. See http://mrvar.fdv.uni-lj.si/pajek/DrawEPS.htm for more information. Invalid/unrecognized parameters are now converted to igraph attributes by the reader, but just as before, they are not output by the writer.\n - The Pajek format writer now encodes newline and quotation mark characters in a Pajek-compatible manner (`\\n` and `&#34;`, respectively).\n - `igraph_avg_nearest_neighbor_degree()` now supports non-simple graphs.\n\n### Fixed\n\n - Resolved \"ignoring duplicate libraries\" warning when building tests with Xcode 15 on macOS.\n - Fixed the handling of duplicate vertex IDs in `igraph_induced_subgraph()`.\n - `igraph_vector_which_min()` and `igraph_vector_which_max()` no longer allow zero-length input, which makes them consistent with other similar functions, and was the originally intended behaviour. Passing zero-length input is invalid use and currently triggers an assertion failure.\n - `igraph_erdos_renyi_game_gnm()` and `igraph_erdos_renyi_game_gnp()` are now interruptible.\n - `igraph_de_bruijn()` and `igraph_kautz()` are now interruptible.\n - `igraph_full()`, `igraph_full_citation()`, `igraph_full_multipartite()` and `igraph_turan()` are now interruptible.\n - `igraph_avg_nearest_neighbor_degree()` did not compute `knnk` correctly in the weighted case.\n - Fixed variadic arguments of invalid types, which could cause incorrect behaviour with `igraph_matrix_print()`, as well as test suite failures, on some platforms. 32-bit x86 was affected when setting `IGRAPH_INTEGER_SIZE` to 64.\n - `igraph_subisomorphic_lad()` now returns a single null map when the pattern is the null graph.\n - `igraph_community_spinglass()` now checks its parameters more carefully.\n - `igraph_similarity_dice_pairs()` and `igraph_similarity_jaccard_pairs()` now validate vertex IDs.\n - `igraph_maxflow()` now returns an error code if the source and target vertices are the same. It used to get stuck in an infinite loop in earlier versions when the `flow` argument was non-NULL.\n\n### Other\n\n - Updated vendored mini-gmp to 6.3.0.\n - `igraph_connected_components()` makes better use of the cache, improving overall performance.\n - Documentation improvements.\n\n## [0.10.7] - 2023-09-04\n\n### Added\n\n - `igraph_radius_dijkstra()` computes the graph radius with weighted edges (experimental function).\n - `igraph_graph_center_dijkstra()` computes the graph center, i.e. the set of minimum eccentricity vertices, with weighted edges (experimental function).\n\n### Fixed\n\n - `igraph_full_bipartite()` now checks for overflow.\n - `igraph_bipartite_game_gnm()` and `igraph_bipartite_game_gnp()` are now more robust to overflow.\n - Bipartite graph creation functions now check input arguments.\n - `igraph_write_graph_dot()` now quotes real numbers written in exponential notation as necessary.\n - Independent vertex set finding functions could trigger the fatal error \"Finally stack too large\" when called on large graphs.\n\n### Deprecated\n\n - `igraph_bipartite_game()` is now deprecated; use `igraph_bipartite_game_gnm()` and `igraph_bipartite_game_gnp()` instead.\n\n### Other\n\n - Documentation improvements.\n\n## [0.10.6] - 2023-07-13\n\n### Fixed\n\n - Compatibility with libxml2 2.11.\n - Fixed some converge failures in `igraph_community_voronoi()`.\n - `IGRAPH_CALLOC()` and `IGRAPH_REALLOC()` now check for overflow.\n - CMake packages created with the `install` target of the CMake build system are now relocatable, i.e. the generated `igraph-targets.cmake` file does not contain absolute paths any more.\n\n## [0.10.5] - 2023-06-29\n\n### Added\n\n - `igraph_graph_power()` computes the kth power of a graph (experimental function).\n - `igraph_community_voronoi()` for detecting communities using Voronoi partitioning (experimental function).\n\n### Changed\n\n - `igraph_community_walktrap()` no longer requires `modularity` and `merges` to be non-NULL when `membership` is non-NULL.\n - `igraph_isomorphic()` now supports multigraphs.\n - Shortest path related functions now consistently ignore edges with positive infinite weights.\n\n### Fixed\n\n - `igraph_hub_and_authority_scores()`, `igraph_hub_score()` and `igraph_authority_score()` considered self-loops only once on the diagonal of the adjacency matrix of undirected graphs, thus the result was not identical to that obtained by `igraph_eigenvector_centrality()` on loopy undirected graphs. This is now corrected.\n - `igraph_community_infomap()` now checks edge and vertex weights for validity.\n - `igraph_minimum_spanning_tree()` and `igraph_minimum_spanning_tree_prim()` now check that edge weights are not NaN.\n - Fixed an initialization error in the string attribute combiner of the C attribute handler.\n - Fixed an issue with the weighted clique number calculation when all the weights were the same.\n - HRG functions now require a graph with at least 3 vertices; previous versions crashed with smaller graphs.\n - `igraph_arpack_rssolve()` and `igraph_arpack_rnsolve()`, i.e. the ARPACK interface in igraph, are now interruptible. As a result, several other functions that rely on ARPACK (eigenvector centrality, hub and authority scores, etc.) also became interruptible.\n - `igraph_get_shortest_paths_dijkstra()`, `igraph_get_all_shortest_paths_dijkstra()` and `igraph_get_shortest_paths_bellman_ford()` now validate the `from` vertex.\n - Fixed bugs in `igraph_local_scan_1_ecount()` for weighted undirected graphs which would miscount loops and multi-edges.\n\n### Deprecated\n\n- `igraph_automorphisms()` is now deprecated; its new name is `igraph_count_automorphisms()`. The old name is kept available until at least igraph 0.11.\n- `igraph_hub_score()` and `igraph_authority_score()` are now deprecated. Use `igraph_hub_and_authority_scores()` instead.\n- `igraph_get_incidence()` is now deprecated; its new name is `igraph_get_biadjacency()` to reflect that the returned matrix is an _adjacency_ matrix between pairs of vertices and not an _incidence_ matrix between vertices and edges. The new name is kept available until at least igraph 0.11. We plan to re-use the name in later versions to provide a proper incidence matrix where the rows are vertices and the columns are edges.\n- `igraph_hrg_dendrogram()` is deprecated because it requires an attribute handler and it goes against the convention of returning attributes in vectors where possible. Use `igraph_from_hrg_dendrogram()` instead, which constructs the dendrogram as an igraph graph _and_ returns the associated probabilities in a vector.\n\n### Other\n\n - Improved performance for `igraph_vertex_connectivity()`.\n - `igraph_simplify()` makes use of the cache, and avoids simplification when the graph is already known to be simple.\n - Documentation improvements.\n\n## [0.10.4] - 2023-01-26\n\n### Added\n\n - `igraph_get_shortest_path_astar()` finds a shortest path with the A* algorithm.\n - `igraph_vertex_coloring_greedy()` now supports the DSatur heuristics through `IGRAPH_COLORING_GREEDY_DSATUR` (#2284, thanks to @professorcode1).\n\n### Changed\n\n - The `test` build target now only _runs_ the unit tests, but it does not _build_ them. In order to both build and run tests, use the `check` target, which continues to behave as before (PR #2291).\n - The experimental function `igraph_distances_floyd_warshall()` now has `from` and `to` parameters for choosing source and target vertices.\n - The experimental function `igraph_distances_floyd_warshall()` now has an additional `method` parameter to select a specific algorithm. A faster \"Tree\" variant of the Floyd-Warshall algorithm is now available (#2267, thanks to @rfulekjames).\n\n### Fixed\n\n - The Bellman-Ford shortest path finder is now interruptible.\n - The Floyd-Warshall shortest path finder is now interruptible.\n - Running CTest no longer builds the tests automatically, as this interfered with VSCode, which would invoke the `ctest` executable after configuring a project in order to determine test executables. Use the `build_tests` target to build the tests first, or use the `check` target to both _build_ and _run_ all unit tests (PR #2291).\n\n### Other\n\n - Improved the performance and memory usage of `igraph_widest_path_widths_floyd_warshall()`.\n - Documentation improvements.\n\n## [0.10.3] - 2022-12-30\n\n### Added\n\n - `igraph_matrix_init_array()` to initialize an igraph matrix by copying an existing C array in column-major or row-major order.\n - `igraph_layout_umap_compute_weights()` computes weights for the UMAP layout algorithm from distances. This used to be part of `igraph_layout_umap()`, but it is now in a separate function to allow the user to experiment with different weighting schemes.\n - `igraph_triangular_lattice()` to generate triangular lattices of various kinds (#2235, thanks to @rfulekjames).\n - `igraph_hexagonal_lattice()` to generate hexagonal lattices of various kinds (#2262, thanks to @rfulekjames).\n - `igraph_tree_from_parent_vector()` to create a tree or a forest from a parent vector (i.e. a vector that encodes the parent vertex of each vertex).\n - `igraph_induced_subgraph_edges()` produces the IDs of edges contained within a subgraph induced by the given vertices.\n\n### Changed\n\n - The signature of the experimental `igraph_layout_umap()` function changed; the last argument is now a Boolean that specifies whether distances should already be treated as weights, and the sampling probability argument was removed.\n\n### Fixed\n\n - `igraph_transitivity_barrat()`, `igraph_community_fluid_communities()`, `igraph_sir()`, `igraph_trussness()` and graphlet functions did not correctly detect when a directed input graph had effective multi-edges due to ignoring edge directions. Such graphs are now rejected by these functions.\n - Fixed a bug in `igraph_2dgrid_move()` that sometimes crashed the Large Graph Layout function when a grid cell became empty.\n - `igraph_pagerank()` and `igraph_personalized_pagerank()` would fail to converge when the ARPACK implementation was used and a vertex had more than one outgoing edge but all these edges had zero weights.\n - `igraph_pagerank()` and `igraph_personalized_pagerank()` no longer allow negative weights. Previously, edges with negative weights were silently ignored when using the PRPACK implementation. The ARPACK implementation would issue a warning saying that they are ignored, but in fact it computed an incorrect result.\n - `igraph_all_st_cuts()` and `igraph_all_st_mincuts()` no longer trigger the \"Finally stack too large\" fatal error when called on certain large graphs. This was a regression in igraph 0.10.\n - `igraph_community_label_propagation()` no longer rounds weights to integers. This was a regression in igraph 0.10.\n - `igraph_read_graph_graphdb()` does more thorough checks on the input file.\n - `igraph_calloc()` did not zero-initialize the allocated memory. This is now corrected. Note that the macro `IGRAPH_CALLOC()` was _not_ affected.\n - Fixed new warnings issued by the Xcode 14.1 toolchain.\n\n### Deprecated\n\n- `igraph_subgraph_edges()` is now deprecated to avoid confusion with `igraph_induced_subgraph_edges()`; its new name is `igraph_subgraph_from_edges()`. The old name is kept available until at least igraph 0.11.\n\n### Other\n\n - Significantly improved performance for `igraph_matrix_transpose()`.\n - Documentation improvements.\n\n## [0.10.2] - 2022-10-14\n\n### Added\n\n - `igraph_distances_cutoff()` and `igraph_distances_dijkstra_cutoff()` calculate shortest paths with an upper limit on the path length (experimental functions).\n - `igraph_distances_floyd_warshall()` for computing all-pairs shortest path lengths in dense graphs (experimental function).\n - `igraph_ecc()` computes the edge clustering coefficient of some edges (experimental function).\n - `igraph_voronoi()` computes a Voronoi partitioning of vertices (experimental function).\n - `igraph_count_multiple_1()` determines the multiplicity of a single edge in the graph.\n - `igraph_dqueue_get()` accesses an element in a queue by index.\n - `igraph_degree_1()` efficiently retrieves the degee of a single vertex.\n - `igraph_lazy_adjlist_has()` and `igraph_lazy_inclist_has()` to check if adjacent vertices / incident edges have already been computed and stored for a given vertex in a lazy adjlist / inclist.\n\n### Changed\n\n - `igraph_edge()` now verifies that the input edge ID is valid.\n - `igraph_community_leading_eigenvector()`, `igraph_adjacency_spectral_embedding()`, `igraph_laplacian_spectral_embedding()`, `igraph_arpack_rssolve()` and `igraph_arpack_rnsolve()` now generate a random starting vector using igraph's own RNG if needed instead of relying on LAPACK or ARPACK to do so. This makes sure that the results obtained from these functions remain the same if igraph's RNG is seeded with the same value.\n - `igraph_community_leading_eigenvector()` does not stop the splitting process any more when there are multiple equally likely splits (indicated by the multiplicity of the leading eigenvector being larger than 1). The algorithm picks an arbitrary split instead and proceeds normally.\n\n### Fixed\n\n - Fixed a bug in `igraph_get_k_shortest_paths()` that sometimes yielded incorrect results on undirected graphs when the `mode` argument was set to `IGRAPH_OUT` or `IGRAPH_IN`.\n - `igraph_trussness()` is now interruptible.\n - `igraph_spanner()` is now interruptible.\n - `igraph_layout_umap()` and `igraph_layout_umap3d()` are now interruptible.\n - In some rare cases, roundoff errors would cause `igraph_distance_johnson()` to fail on graphs with negative weights.\n - `igraph_eulerian_cycle()` and `igraph_eulerian_path()` now returns a more specific error code (`IGRAPH_ENOSOL`) when the graph contains no Eulerian cycle or path.\n - `igraph_heap_init_array()` did not copy the array data correctly for non-real specializations.\n - `igraph_layout_umap_3d()` now actually uses three dimensions.\n - `igraph_layout_umap()` and `igraph_layout_umap_3d()` are now interruptible.\n - `igraph_vit_create()` and `igraph_eit_create()` no longer fails when trying to create an iterator for the null graph or edgeless graph from an empty range-based vertex or edge selector.\n - `igraph_write_graph_leda()` did not correctly print attribute names in some warning messages.\n - Addressed new warnings introduced by Clang 15.\n - In the generated pkg-config file, libxml2 is now placed in the `Requires.private` section instead of the `Libs.private` one.\n\n### Removed\n\n - Removed unused and undocumented `igraph_bfgs()` function.\n - Removed the undocumented function `igraph_complex_mod()`. Use `igraph_complex_abs()` instead, as it has identical functionality.\n\n### Deprecated\n\n - The `IGRAPH_EDRL` error code was deprecated; the DrL algorithm now returns `IGRAPH_FAILURE` when it used to return `IGRAPH_EDRL` (not likely to happen in practice).\n - The undocumented function `igraph_dqueue_e()` is now deprecated and replaced by `igraph_dqueue_get()`.\n - `igraph_finite()`, `igraph_is_nan()`, `igraph_is_inf()`, `igraph_is_posinf()` and `igraph_is_neginf()` are now deprecated. They were relics from a time when no standard alternatives existed. Use the C99 standard `isfinite()`, `isnan()` and `isinf()` instead.\n\n### Other\n\n - Documentation improvements.\n\n## [0.10.1] - 2022-09-08\n\n### Fixed\n\n - Corrected a regression (compared to igraph 0.9) in weighted clique search functions.\n - `igraph_girth()` no longer fails when the graph has no cycles and the `girth` parameter is set to `NULL`.\n - `igraph_write_graph_gml()` did not respect entity encoding options when writing the `Creator` line.\n - Fixed potential memory leak on out-of-memory condition in `igraph_asymmetric_preference_game()`, `igraph_vs_copy()` and `igraph_es_copy()`.\n - Fixed an assertion failure in `igraph_barabasi_game()` and `igraph_barabasi_aging_game()` when passing in negative degree exponents.\n - Fixed a compilation failure with some old Clang versions.\n\n### Changed\n\n - `igraph_write_graph_leda()` can now write boolean attributes.\n\n### Other\n\n - Support for ARM64 on Windows.\n - Documentation improvements.\n\n## [0.10.0] - 2022-09-05\n\n### Release notes\n\nThis release focuses on infrastructural improvements, stability, and making the igraph interface more consistent, more predictable and easier to use. It contains many API-breaking changes and function renamings, in preparation for a future 1.0 release, at which point the API will become stable. Changes in this direction are likely to continue through a 0.11 release. It is recommended that you migrate your code from 0.9 to 0.10 soon, to make the eventual transition to 1.0 easier.\n\nSome of the highlights are:\n\n - A consistent use of `igraph_integer_t` for all indices and most integer quantities, both in the API and internally. This type is 64-bit by default on all 64-bit systems, bringing support for very large graphs with more than 2 billion vertices. Previously, vertex and edge indices were often represented as `igraph_real_t`. The move to an `igraph_integer_t` also implies a change from `igraph_vector_t` to `igraph_vector_int_t` in many functions.\n - The random number generation framework has been overhauled. Sampling from the full range of `igraph_integer_t` is now possible. Similarly, the sampling of random reals has been improved to utilize almost the full range of the mantissa of an `igraph_real_t`.\n - There is a new fully memory-managed container type for lists of vectors (`igraph_vector_list_t`), replacing most previous uses of the non-managed `igraph_vector_ptr_t`. Functions that previously used `igraph_vector_ptr_t` to return results and relied on the user to manage memory appropriately are now using `igraph_vector_list_t`, `igraph_graph_list_t` or similar and manage memory on their own.\n - Some simple graph properties, such as whether a graph contains self-loops or multi-edges, or whether it is connected, are now cached in the graph data structure. Querying these properties for a second time will take constant computational time. The `igraph_invalidate_cache()` function is provided for debugging purposes. It will invaidate all cache entries.\n - File format readers are much more robust and more tolerant of invalid input.\n - igraph is much more resilient to overflow errors.\n - Many improvements to robustness and reliability, made possible by internal refactorings.\n\n### Breaking changes\n\n - igraph now requires CMake 3.18 or later.\n - In order to facilitate the usage of graphs with more than 2 billion vertices and edges, we have made the size of the `igraph_integer_t` data type to be 32 bits on 32-bit platforms and 64 bits on 64-bit platforms by default. You also have the option to compile a 32-bit igraph variant on a 64-bit platform by changing the `IGRAPH_INTEGER_SIZE` build variable in CMake to 32.\n - `igraph_bool_t` is now a C99 `bool` and not an `int`. Similarly, `igraph_vector_bool_t` now consumes `sizeof(bool)` bytes per entry only, not `sizeof(int)`. The standard constants `true` and `false` may be used for Boolean values for readability.\n - The random number generator interface, `igraph_rng_type_t`, has been overhauled. Check the declaration of the type for details.\n - The default random number generator has been changed from Mersenne Twister to PCG32.\n - Functions related to spectral coarse graining (i.e. all functions starting with `igraph_scg_...`) were separated into a project of its own. If you wish to keep on using these functions, please refer to the repository hosting the spectral coarse graining code at https://github.com/igraph/igraph-scg . The spectral coarse graining code was updated to support igraph 0.10.\n - Since `igraph_integer_t` aims to be the largest integer size that is feasible on a particular platform, there is no need for generic data types based on `long int` anymore. The `long` variants of generic data types (e.g., `igraph_vector_long_t`) are therefore removed; you should use the corresponding `int` variant instead, whose elements are of type `igraph_integer_t`.\n - Generic data types based on `float` were removed as they were not used anywhere in the library.\n - Several igraph functions that used to take a `long int` or return a `long int` now takes or returns an `igraph_integer_t` instead to make the APIs more consistent. Similarly, igraph functions that used `igraph_vector_t` for arguments that take or return _integral_ vectors (e.g., vertex or edge indices) now take `igraph_vector_int_t` instead. Graph-related functions where the API was changed due to this reason are listed below, one by one.\n - Similarly, igraph functions that used to accept the `long` variant of a generic igraph data type (e.g., `igraph_vector_long_t`) now take the `int` variant of the same data type.\n - The type `igraph_stack_ptr_t` and its associated functions were removed. Use `igraph_vector_ptr_t` and associated functions instead.\n - Error handlers should no longer perform a `longjmp()`. Doing so will introduce memory leaks, as resource cleanup is now done in multiple stages, through multiple calls to the error handler. Thus, the error handler should either abort execution immediately (as the default handler does), or report the error, call `IGRAPH_FINALLY_FREE()`, and return normally.\n - Most callback functions now return an error code. In previous versions they returned a boolean value indicating whether to terminate the search. A request to stop the search is now indicated with the special return code `IGRAPH_STOP`.\n - `igraph_add_edges()` now uses an `igraph_vector_int_t` for its `edges` parameter.\n - `igraph_adjacency()` no longer accepts a negative number of edges in its adjacency matrix. When negative entries are found, an error is generated.\n - `igraph_adjacency()` gained an additional `loops` argument that lets you specify whether the diagonal entries should be ignored or should be interpreted as raw edge counts or _twice_ the number of edges (which is common in linear algebra contexts).\n - `igraph_all_minimal_st_separators()` now returns the separators in an `igraph_vector_int_list_t` containing `igraph_vector_int_t` vectors.\n - `igraph_all_st_cuts()` and `igraph_all_st_mincuts()` now return the cuts in an `igraph_vector_int_list_t` containing `igraph_vector_int_t` vectors.\n - `igraph_arpack_unpack_complex()` now uses `igraph_integer_t` for its `nev` argument instead of `long int`.\n - `igraph_articulation_points()` now uses an `igraph_vector_int_t` to return the list of articulation points, not an `igraph_vector_t`.\n - `igraph_assortativity_nominal()` now accepts vertex types in an `igraph_vector_int_t` instead of an `igraph_vector_t`.\n - `igraph_asymmetric_preferennce_game()` now uses an `igraph_vector_int_t` to return the types of the nodes in the generated graph.\n - `igraph_atlas()` now uses `igraph_integer_t` for its `number` argument.\n - `igraph_automorphism_group()` now returns the generators in an `igraph_vector_int_list_t` instead of a pointer vector containing `igraph_vector_t` objects.\n - `igraph_barabasi_game()`, `igraph_barabasi_aging_game()`, `igraph_recent_degree_game()` and `igraph_recent_degree_aging_game()` now use an `igraph_vector_int_t` for the out-degree sequence of the nodes being generated instead of an `igraph_vector_t`.\n - `igraph_bfs()` now takes an `igraph_vector_int_t` for its `roots`, `restricted`, `order`, `father`, `pred`, `succ` and `dist` arguments instead of an `igraph_vector_t`.\n - `igraph_bfs_simple()` now takes `igraph_vector_int_t` for its `vids`, `layers` and `parents` arguments instead of an `igraph_vector_t`.\n - `igraph_bfs_simple()` now returns -1 in `parents` for the root node of the traversal, and -2 for unreachable vertices. This is now consistent with other functions that return a parent vector.\n - `igraph_biconnected_components()` now uses an `igraph_vector_int_t` to return the list of articulation points, not an `igraph_vector_t`. Also, the container used for the edges and vertices of the components is now an `igraph_vector_int_list_t` instead of a pointer vector containing `igraph_vector_t` objects.\n - `igraph_bipartite_projection()` now uses `igraph_vector_int_t` to return `multiplicity1` and `multiplicity2`, not `igraph_vector_t`.\n - `igraph_bridges()` now uses an `igraph_vector_int_t` to return the list of bridges, not an `igraph_vector_t`.\n - `igraph_callaway_traits_game()` returns the node types in an `igraph_vector_int_t` instead of an `igraph_vector_t`.\n - `igraph_canonical_permutation()` now uses an `igraph_vector_int_t` for its labeling parameter.\n - `igraph_cattribute_list()` now uses `igraph_vector_int_t` to return `gtypes`, `vtypes` and `etypes`.\n - `igraph_cited_type_game()` now uses an `igraph_vector_int_t` for its types parameter.\n - `igraph_citing_cited_type_game()` now uses an `igraph_vector_int_t` for its\n   types parameter.\n - `igraph_clique_handler_t` now uses an `igraph_vector_int_t` for its `clique` parameter, and must return an `igraph_error_t`. Use `IGRAPH_STOP` as the return code to terminate the search prematurely. The vector that the handler receives is owned by the clique search routine. If you want to hold on to the vector for a longer period of time, you need to make a copy of it in the handler. Cliques passed to the callback are marked as `const` as a reminder to this change.\n - The `res` parameter of `igraph_cliques()` is now an `igraph_vector_int_list_t`.\n - Callbacks used by `igraph_cliques_callback()` need to be updated to account for the fact that the callback does not own the clique passed to it any more; the callback needs to make a copy if it wants to hold on to the clique for a longer period of time. If the callback does not need to store the clique, it does not need to do anything any more, and it must not destroy or free the clique.\n - `igraph_closeness()` and `igraph_closeness_cutoff()` now use an `igraph_vector_int_t` to return `reachable_count`, not an `igraph_vector_t`.\n - `igraph_cohesive_blocks()` now uses an `igraph_vector_int_t` to return the mapping from block indices to parent block indices, and the `cohesion`; also, it uses an `igraph_vector_int_list_t` to return the blocks themselves instead of a pointer vector of `igraph_vector_t`.\n - The `igraph_community_eb_get_merges()` bridges parameter now starts the indices into the edge removal vector at 0, not 1.\n - The `igraph_community_eb_get_merges()` now reports an error when not all edges in the graph are removed, instead of a nonsensical result.\n - `igraph_community_edge_betweenness()` now uses an `igraph_vector_int_t` to return the edge IDs in the order of their removal as well as the list of edge IDs whose removal broke a single component into two.\n - `igraph_community_fluid_communities()` does not provide the modularity in a separate output argument any more; use `igraph_modularity()` to retrieve the modularity if you need it.\n - `igraph_community_infomap()` now uses `igraph_integer_t` for its `nb_trials` argument.\n - `igraph_community_label_propagation()` now uses an `igraph_vector_int_t` for its `initial` parameter. It also takes a `mode` argument that specifies how labels should be propagated along edges (forward, backward or ignoring edge directions).\n - `igraph_community_label_propagation()` does not provide the modularity in a separate output argument any more; use `igraph_modularity()` to retrieve the modularity if you need it.\n - `igraph_community_leiden()` has an additional parameter to indicate the number of iterations to perform (PR #2177).\n - `igraph_community_walktrap()`, `igraph_community_edge_betweenness()`, `igraph_community_eb_get_merges()`, `igraph_community_fastgreedy()`, `igraph_community_to_membership()`, `igraph_le_community_to_membership()`, `igraph_community_leading_eigenvector()` now use an `igraph_vector_int_t` for their `merges` parameter.\n - `igraph_community_walktrap()` now uses `igraph_integer_t` for its `steps` argument.\n - `igraph_coreness()` now uses an `igraph_vector_int_t` to return the coreness\n   values.\n - `igraph_convex_hull()` now uses an `igraph_vector_int_t` to return the indices of the input vertices that were chosen to be in the convex hull.\n - `igraph_correlated_game()` and `igraph_correlated_pair_game()` now take an `igraph_vector_int_t` as the permutation vector, not an `igraph_vector_t`.\n - `igraph_create()` now uses an `igraph_vector_int_t` for its `edges` parameter.\n - `igraph_create_bipartite()` now uses an `igraph_vector_int_t` for its `edges` parameter.\n - `igraph_compose()` now returns the edge maps in an `igraph_vector_int_t` instead of an `igraph_vector_t`.\n - `igraph_count_multiple()` now returns the multiplicities in an `igraph_vector_int_t` instead of an `igraph_vector_t`.\n - `igraph_decompose()` now uses an `igraph_integer_t` for its `maxcompno` and `minelements` arguments instead of a `long int`.\n - `igraph_degree()` now uses an `igraph_vector_int_t` to return the degrees.  If you need the degrees in a vector containing floating-point numbers instead (e.g., because you want to pass them on to some other function that takes an `igraph_vector_t`), use `igraph_strength()` instead with a null weight vector.\n - `igraph_degree_sequence_game()` now takes degree sequences represented as `igraph_vector_int_t` instead of `igraph_vector_t`.\n - `igraph_degseq_t`, used by `igraph_degree_sequence_game()`, uses new names for its constants. The old names are deprecated, but retained for compatibility.  See `igraph_constants.h` to see which new name corresponds to which old one.\n - `igraph_delete_vertices_idx()` now uses `igraph_vector_int_t` vectors to return the mapping and the inverse mapping of old vertex IDs to new ones.\n - `igraph_deterministic_optimal_imitation()` now expects the list of strategies in an `igraph_vector_int_t` instead of an `igraph_int_t`.\n - `igraph_dfs()` now takes an `igraph_vector_int_t` for its `order`, `order_out`, `father` and `dist` arguments instead of an `igraph_vector_t`. Furthermore, these vectors will contain -2 for vertices that have not been visited; in earlier versions, they used to contain NaN instead. Note that -1 is still used in the `father` vector to indicate the root of a DFS tree.\n - `igraph_diameter()` and `igraph_diameter_dijkstra()` now use `igraph_vector_int_t` vectors to return the list of vertex and edge IDs in the diameter.\n - `igraph_dominator_tree()` now takes an `igraph_vector_int_t` for its `dom` and `leftout` arguments instead of an `igraph_vector_t`.\n - `igraph_dyad_census()` now uses `igraph_real_t` instead of `igraph_integer_t` for its output arguments, and it no longer returns -1 when overflow occurs.\n - `igraph_edges()` now takes an `igraph_vector_int_t` for its `edges` argument instead of an `igraph_vector_t`.\n - `igraph_es_multipairs()` was removed; you can use the newly added `igraph_es_all_between()` instead.\n - `igraph_establishment_game()` now takes an `igraph_vector_int_t` for its `node_type_vec` argument instead of an `igraph_vector_t`.\n - `igraph_eulerian_path()` and `igraph_eulerian_cycle()` now use `igraph_vector_int_t` to return the list of edge and vertex IDs participating in an Eulerian path or cycle instead of an `igraph_vector_t`.\n - `igraph_feedback_arc_set()` now uses an `igraph_vector_int_t` to return the IDs of the edges in the feedback arc set instead of an `igraph_vector_t`.\n - `igraph_get_adjacency()` no longer has the `eids` argument, which would produce an adjacency matrix where non-zero values were 1-based (not 0-based) edge IDs. If you need a matrix with edge IDs, create it manually.\n - `igraph_get_adjacency_sparse()` now returns the sparse adjacency matrix in an `igraph_sparsemat_t` structure, and it assumes that the input matrix is _initialized_ for sake of consistency with other igraph functions.\n - `igraph_get_adjacency()` and `igraph_get_adjacency_sparse()` now has a `loops` argument that lets the user specify how loop edges should be handled.\n - `igraph_get_edgelist()` now uses an `igraph_vector_int_t` for its `res` parameter.\n - `igraph_get_eids()` now uses `igraph_vector_int_t` to return lists of edge IDs and to receive lists of vertex IDs.\n - The `path` argument of `igraph_get_eids()` was removed. You can replicate the old behaviour by constructing the list of vertex IDs explicitly from the path by duplicating each vertex in the path except the first and last ones. A helper function called `igraph_expand_path_to_pairs()` is provided to ease the transition.\n - `igraph_get_eids_multi()` was removed as its design was fundamentally broken; there was no way to retrieve the IDs of all edges between a specific pair of vertices without knowing in advance how many such edges there are in the graph.  Use `igraph_get_all_eids_between()` instead.\n - `igraph_get_incidence()` now returns the vertex IDs corresponding to the rows and columns of the incidence matrix as `igraph_vector_int_t`.\n - `igraph_get_shortest_path()`, `igraph_get_shortest_path_bellman_ford()` and `igraph_get_shortest_path_dijkstra()` now use `igraph_vector_int_t` vectors to return the list of vertex and edge IDs in the shortest path.\n - `igraph_get_shortest_paths()`, `igraph_get_shortest_paths_dijkstra()` and `igraph_get_shortest_paths_bellman_ford()` now use an `igraph_vector_int_t` to return the predecessors and inbound edges instead of an `igraph_vector_long_t`.\n - The functions `igraph_get_all_shortest_paths()`, `igraph_get_all_shortest_paths_dijkstra()`, `igraph_get_shortest_paths()`, `igraph_get_shortest_paths_bellman_ford()` and `igraph_get_shortest_paths_dijkstra()` now return paths in an `igraph_vector_int_list_t` instead of a pointer vector containing `igraph_vector_t` objects.\n - The vector of parents in `igraph_get_shortest_paths()`, `igraph_get_shortest_paths_bellman_ford()` and `igraph_get_shortest_paths_dijkstra()` now use -1 to represent the starting vertex, and -2 for unreachable vertices.\n - The `maps` parameters in `igraph_get_isomorphisms_vf2()` and `igraph_get_subisomorphisms_vf2()` are now of type `igraph_vector_int_list_t`.\n - `igraph_get_stochastic()` now has an additional `weights` argument for edge weights.\n - `igraph_get_stochastic_sparse()` now returns the sparse adjacency matrix in an `igraph_sparsemat_t` structure, and it assumes that the input matrix is _initialized_ for sake of consistency with other igraph functions. It also received an additional `weights` argument for edge weights.\n - `igraph_girth()` now uses an `igraph_vector_int_t` for its `circle` parameter.\n - `igraph_girth()` now uses `igraph_real_t` as the return value so we can return infinity for graphs with no cycles (instead of zero).\n - The `cliques` parameters of type `igraph_vector_ptr_t` in `igraph_graphlets()`, `igraph_graphlets_candidate_basis()` and `igraph_graphlets_project()` were changed to an `igraph_vector_int_list_t`.\n - `igraph_hrg_init()` and `igraph_hrg_resize()` now takes an `igraph_integer_t` as their size arguments instead of an `int`.\n - `igraph_hrg_consensus()` now returns the parent vector in an `igraph_vector_int_t` instead of an `igraph_vector_t`.\n - `igraph_hrg_create()` now takes a vector of probabilities corresponding to the internal nodes of the dendogram. It used to also take probabilities for the leaf nodes and then ignore them.\n - `igraph_hrg_predict()` now uses an `igraph_vector_int_t` for its `edges` parameter.\n - `igraph_hrg_sample()` now always samples a single graph only. Use `igraph_hrg_sample_many()` if you need more than one sample, and call `igraph_hrg_fit()` beforehand if you do not have a HRG model but only a single input graph.\n - `igraph_hrg_size()` now returns an `igraph_integer_t` instead of an `int`.\n - `igraph_incidence()` does not accept negative incidence counts any more.\n - `igraph_incident()` now uses an `igraph_vector_int_t` for its `eids` parameter.\n - The `res` parameter in `igraph_independent_vertex_sets()` is now an `igraph_vector_int_list_t`.\n - `igraph_induced_subgraph_map()` now uses `igraph_vector_int_t` vectors to return the mapping and the inverse mapping of old vertex IDs to new ones.\n - `igraph_intersection()` now uses an `igraph_vector_int_t` for its `edge_map1` and `edge_map2` parameters.\n - The `edgemaps` parameter of `igraph_intersection_many()` is now an `igraph_vector_int_list_t` instead of a pointer vector.\n - `igraph_is_chordal()` now uses an `igraph_vector_int_t` for its `alpha`, `alpham1` and `fill_in` parameters.\n - `igraph_is_graphical()` and `igraph_is_bigraphical()` now take degree sequences represented as `igraph_vector_int_t` instead of `igraph_vector_t`.\n - `igraph_is_matching()`, `igraph_is_maximal_matching()` and `igraph_maximum_bipartite_matching` now use an `igraph_vector_int_t` to return the matching instead of an `igraph_vector_long_t`.\n - `igraph_is_mutual()` has an additional parameter which controls whether directed self-loops are considered mutual.\n - The `vids` parameter for `igraph_isoclass_subgraph()` is now an `igraph_vector_int_t` instead of `igraph_vector_t`.\n - `igraph_isomorphic_vf2()`, `igraph_get_isomorphisms_vf2_callback()` (which used to be called `igraph_isomorphic_function_vf2()`) and `igraph_isohandler_t` now all use `igraph_vector_int_t` for their `map12` and `map21` parameters.\n - The `cliques` parameter of type `igraph_vector_ptr_t` in `igraph_largest_cliques()` was changed to an `igraph_vector_int_list_t`.\n - The `res` parameters of type `igraph_vector_ptr_t` in `igraph_largest_independent_vertex_sets()` and `igraph_largest_weighted_cliques()` were changed to an `igraph_vector_int_list_t`.\n - The dimension vector parameter for `igraph_square_lattice()` (used to be `igraph_lattice()`) is now an `igraph_vector_int_t` instead of `igraph_vector_t`.\n - The maxiter parameter of `igraph_layout_bipartite()` is now an `igraph_integer_t` instead of `long int`.\n - The fixed parameter of `igraph_layout_drl()` and `igraph_layout_drl_3d()` was removed as it has never been implemented properly.\n - The width parameter of `igraph_layout_grid()` is now an `igraph_integer_t` instead of `long int`.\n - The width and height parameters of `igraph_layout_grid_3d()` are now `igraph_integer_t` instead of `long int`.\n - The dimension parameter of `igraph_layout_mds()` is now an `igraph_integer_t` instead of `long int`.\n - The `roots` and `rootlevel` parameters of `igraph_layout_reingold_tilford()` are now `igraph_vector_int_t` instead of `igraph_vector_t`.\n - The `roots` and `rootlevel` parameters of `igraph_layout_reingold_tilford_circular()` are now `igraph_vector_int_t` instead of `igraph_vector_t`.\n - The order parameter of `igraph_layout_star()` is now an `igraph_vector_int_t` instead of an `igraph_vector_t`.\n - The maxiter parameter of `igraph_layout_sugiyama()` is now an `igraph_integer_t` instead of `long int`. Also, the function now uses an `igraph_vector_int_t` for its `extd_to_orig_eids` parameter.\n - The shifts parameter of `igraph_lcf_vector()` is now an `igraph_vector_int_t` instead of an `igraph_vector_t`.\n - `igraph_matrix_minmax()`, `igraph_matrix_which_minmax()`, `igraph_matrix_which_min()` and `igraph_matrix_which_max()` no longer return an error code. The return type is now `void`. These functions never fail.\n - `igraph_maxflow()` now uses an `igraph_vector_int_t` for its `cut`, `partition` and `partition2` parameters.\n - The `igraph_maxflow_stats_t` struct now contains `igraph_integer_t` values instead of `int` ones.\n - The `res` parameters in `igraph_maximal_cliques()` and `igraph_maximal_cliques_subset()` are now of type `igraph_vector_int_list_t`.\n - Callbacks used by `igraph_maximal_cliques_callback()` need to be updated to account for the fact that the callback does not own the clique passed to it any more; the callback needs to make a copy if it wants to hold on to the clique for a longer period of time. If the callback does not need to store the clique, it does not need to do anything any more, and it must not destroy or free the clique.\n - The `res` parameter in `igraph_maximal_independent_vertex_sets()` is now an `igraph_vector_int_list_t`.\n - `igraph_maximum_cardinality_search()` now uses an `igraph_vector_int_t` for its `alpha` and `alpham1` arguments.\n - `igraph_mincut()` now uses an `igraph_vector_int_t` for its `cut`, `partition` and `partition2` parameters.\n - `igraph_moran_process()` now expects the list of strategies in an `igraph_vector_int_t` instead of an `igraph_int_t`.\n - Motif callbacks of type `igraph_motifs_handler_t` now take an `igraph_vector_int_t` with the vertex IDs instead of an `igraph_vector_t`, and use `igraph_integer_t` for the isoclass parameter.\n - Motif functions now use `igraph_integer_t` instead of `int` for their `size` parameter.\n - `igraph_neighborhood_size()` now uses an `igraph_vector_int_t` for its `res` parameter.\n - The `res` parameter of `igraph_neighborhood()` is now an `igraph_vector_int_list_t`.\n - `igraph_neighbors()` now uses an `igraph_vector_int_t` for its `neis` parameter.\n - `igraph_permute_vertices()` now takes an `igraph_vector_int_t` as the permutation vector.\n - `igraph_power_law_fit()` does not calculate the p-value automatically any more because the previous estimation method did not match the results from the original paper of Clauset, Shalizi and Newman (2009) and the implementation of the method outlined in the paper runs slower than the previous naive estimate. A separate function named `igraph_plfit_result_calculate_p_value()` is now provided for calculating the p-value. The automatic selection of the `x_min` cutoff also uses a different method than earlier versions. As a consequence, results might be slightly different if you used tests where the `x_min` cutoff was selected automatically. The new behaviour is now consistent with the defaults of the underlying `plfit` library.\n - `igraph_preference_game()` now uses an `igraph_vector_int_t` to return the types of the nodes in the generated graph.\n - `igraph_random_walk()` now uses an `igraph_vector_int_t` for its results. Also, the function now takes both vertices and edges as parameters. It can return IDs of vertices and/or edges on the walk.  The function now takes weights as a parameter to support weighted graphs.\n - `igraph_random_edge_walk()` now uses an `igraph_vector_int_t` for its `edgewalk` parameter.\n - `igraph_read_graph_dimacs_flow()` now uses an `igraph_vector_int_t` for its label parameter.\n - `igraph_read_graph_graphml()` now uses `igraph_integer_t` for its `index` argument.\n - `igraph_read_graph_pajek()` now creates a Boolean `type` attribute for bipartite graphs.  Previously it created a numeric attribute.\n - `igraph_realize_degree_sequence()` now uses an `igraph_vector_int_t` for its `outdeg` and `indeg` parameters.\n - `igraph_reindex_membership()` now uses an `igraph_vector_int_t` for its `new_to_old` parameter.\n - `igraph_rng_seed()` now requires an `igraph_uint_t` as its seed arguments. RNG implementations are free to use only the lower bits of the seed if they do not support 64-bit seeds.\n - `igraph_rngtype_rand` (i.e. the RNG that is based on BSD `rand()`) was removed due to poor statistical properties that sometimes resulted in weird artifacts like all-even \"random\" numbers when igraph's usage patterns happened to line up with the shortcomings of the `rand()` generator in a certain way.\n - `igraph_roulette_wheel_imitation()` now expects the list of strategies in an `igraph_vector_int_t` instead of an `igraph_int_t`.\n - `igraph_similarity_dice_pairs()` now uses an `igraph_vector_int_t` for its `pairs` parameter.\n - `igraph_similarity_jaccard_pairs()` now uses an `igraph_vector_int_t` for its `pairs` parameter.\n - `igraph_simple_interconnected_islands_game()` does not generate multi-edges between islands any more.\n - `igraph_sort_vertex_ids_by_degree()` and `igraph_topological_sorting()` now use an `igraph_vector_int_t` to return the vertex IDs instead of an `igraph_vector_t`.\n - `igraph_spanning_tree()`, `igraph_minimum_spanning_tree()` and `igraph_random_spanning_tree()` now all use an `igraph_vector_int_t` to return the vector of edge IDs in the spanning tree instead of an `igraph_vector_t`.\n - `igraph_sparsemat_cholsol()`, `igraph_sparsemat_lusol()`, `igraph_sparsemat_symbqr()` and `igraph_sparsemat_symblu()` now take an `igraph_integer_t` as their `order` parameter.\n - `igraph_sparsemat_count_nonzero()` and `igraph_sparsemat_count_nonzerotol()` now return an `igraph_integer_t`.\n - `igraph_sparsemat_is_symmetric()` now returns an error code and the result itself is provided in an output argument.\n - The `values` argument of `igraph_sparsemat_transpose()` was removed; now the function always copies the values over to the transposed matrix.\n - `igraph_spmatrix_t` and related functions were removed as they mostly duplicated functionality that was already present in `igraph_sparsemat_t`.  Functions that used `igraph_spmatrix_t` in the library now use `igraph_sparsemat_t`.\n - `igraph_stochastic_imitation()` now expects the list of strategies in an `igraph_vector_int_t` instead of an `igraph_int_t`.\n - `igraph_st_mincut()` now uses an `igraph_vector_int_t` for its `cut`, `partition` and `partition2` parameters.\n - `igraph_st_vertex_connectivity()` now ignores edges between source and target for `IGRAPH_VCONN_NEI_IGNORE`\n - `igraph_strvector_get()` now returns strings in the return value, not in an output argument.\n - `igraph_subcomponent()` now uses an `igraph_integer_t` for the seed vertex instead of an `igraph_real_t`. It also uses an `igraph_vector_int_t` to return the list of vertices in the same component as the seed vertex instead of an `igraph_vector_t`.\n - `igraph_subisomorphic_vf2()`, `igraph_get_subisomorphisms_vf2_callback()` (which used to be called `igraph_subisomorphic_function_vf2()`) and `igraph_isomorphic_bliss()` now all use `igraph_vector_int_t` for their `map12` and `map21` parameters.\n - The `maps` parameters in `igraph_subisomorphic_lad()`, `igraph_get_isomorphisms_vf2()` and `igraph_get_subisomorphisms_vf2()` are now of type `igraph_vector_int_list_t`.\n - `igraph_subisomorphic_lad()` now uses an `igraph_vector_int_t` for its `map` parameter. Also, its `domains` parameter is now an `igraph_vector_int_list_t` instead of a pointer vector containing `igraph_vector_t` objects.\n - `igraph_unfold_tree()` now uses an `igraph_vector_int_t` for its `vertex_index` and `roots` parameters.\n - `igraph_union()` now uses an `igraph_vector_int_t` for its `edge_map1` and `edge_map2` parameters.\n - The `edgemaps` parameter of `igraph_union_many()` is now an `igraph_vector_int_list_t` instead of a pointer vector.\n - `igraph_vector_init_copy()` was refactored to take _another_ vector that the newly initialized vector should copy. The old array-based initialization function is now called `igraph_vector_init_array()`.\n - `igraph_vector_ptr_init_copy()` was renamed to `igraph_vector_ptr_init_array()` for sake of consistency.\n - `igraph_vs_vector()`, `igraph_vss_vector()` and `igraph_vs_vector_copy()` now all take an `igraph_vector_int_t` as the vector of vertex IDs, not an `igraph_vector_t`. Similarly, `igraph_vs_as_vector()` now returns the vector of matched vertex IDs in an `igraph_vector_int_t`, not an `igraph_vector_t`.\n - The `res` parameter of `igraph_weighted_cliques()` is now an `igraph_vector_int_list_t`.\n - `igraph_write_graph_dimacs_flow()` now uses `igraph_integer_t` for the source and target vertex index instead of a `long int`.\n - `igraph_vector_*()`, `igraph_matrix_*()`, `igraph_stack_*()`, `igraph_array_*()` and several other generic igraph data types now use `igraph_integer_t` for indexing, _not_ `long int`. Please refer to the headers for the exact details; the list of affected functions is too large to include here.\n - `igraph_vector_minmax()` and `igraph_vector_which_minmax()` no longer return an error code. The return type is now `void`. These functions never fail.\n - `igraph_vector_order()` was removed; use `igraph_vector_int_pair_order()` instead. (The original function worked for vectors containing integers only).\n - `igraph_vector_resize_min()` and `igraph_matrix_resize_min()` no longer return an error code (return type is now `void`). The vector or matrix is always left in a consistent state by these functions, with all data intact, even if releasing unused storage is not successful.\n - `igraph_vector_qsort_ind()` and its variants now take an `igraph_order_t` enum instead of a boolean to denote whether the order should be ascending or descending.\n - `igraph_weighted_adjacency()` now returns the weights in a separate vector instead of storing it in a vertex attribute. The reason is twofold: first, the previous solution worked only with the C attribute handler (not the ones from the higher-level interfaces), and second, it wasn't consistent with other igraph functions that use weights provided as separate arguments.\n - The `loops` argument of `igraph_weighted_adjacency()` was converted to an `igraph_loops_t` for sake of consistency with `igraph_adjacency()` and `igraph_get_adjacency()`.\n - `igraph_write_graph_gml()` takes an additional bitfield parameter controlling some aspects of writing the GML file.\n - The `add_edges()` function in the attribute handler now takes an `igraph_vector_int_t` for its `edges` parameter instead of an `igraph_vector_t`. The `add_vertices()` function now takes an `igraph_integer_t` for the vertex count instead of a `long int`. The `combine_vertices()` and `combine_edges()` functions now take an `igraph_vector_ptr_t` containing vectors of type `igraph_vector_int_t` in their `merges` parameters. The `get_info()` function now uses `igraph_vector_int_t` to return the types of the graph, vertex and edge attribute types. The `permute_vertices()` and `permute_edges()` functions in the attribute handler tables now take an `igraph_vector_int_t` instead of an `igraph_vector_t` for the index vectors. These are relevant only to maintainers of higher level interfaces to igraph; they should update their attribute handlers accordingly.\n - igraph functions that interface with external libraries such as BLAS or LAPACK may now fail if the underlying BLAS or LAPACK implementation cannot handle the size of input vectors or matrices (BLAS and LAPACK are usually limited to vectors whose size fits in an `int`). `igraph_blas_dgemv()` and `igraph_blas_dgemv_array()` thus now return an `igraph_error_t`, which may be set to `IGRAPH_EOVERFLOW` if the input vectors or matrices are too large.\n - Functions that used an `igraph_vector_t` to represent cluster size and cluster membership now use an `igraph_vector_int_t` instead. These are:\n   - `igraph_connected_components()` (used to be `igraph_clusters()` in 0.9 and before)\n   - `igraph_community_eb_get_merges()`\n   - `igraph_community_edge_betweenness()`\n   - `igraph_community_fastgreedy()`\n   - `igraph_community_fluid_communities()`\n   - `igraph_community_infomap()`\n   - `igraph_community_label_propagation()`\n   - `igraph_community_leading_eigenvector()`\n   - `igraph_community_leiden()`\n   - `igraph_community_multilevel()`\n   - `igraph_community_optimal_modularity()`\n   - `igraph_community_spinglass()`\n   - `igraph_community_spinglass_single()`\n   - `igraph_community_to_membership()`\n   - `igraph_community_walktrap()`\n   - `igraph_compare_communities()`\n   - `igraph_le_community_to_membership()`\n   - `igraph_modularity()`\n   - `igraph_reindex_membership()`\n   - `igraph_split_join_distance()`\n   - `igraph_community_multilevel()` additionally uses a `igraph_matrix_int_t` instead of `igraph_matrix_t()` for its memberships parameter.\n - `IGRAPH_TOTAL` was removed from the `igraph_neimode_t` enum; use the equivalent `IGRAPH_ALL` instead.\n\n### Added\n\n - A new integer type, `igraph_uint_t` has been added. This is the unsigned pair of `igraph_integer_t` and they are always consistent in size.\n - A new container type, `igraph_vector_list_t` has been added, replacing most uses of `igraph_vector_ptr_t` in the API where it was used to hold a variable-length list of vectors. The type contains `igraph_vector_t` objects, and it is fully memory managed (i.e. its contents do not need to be allocated and destroyed manually). There is also a variant named `igraph_vector_int_list_t` for vectors of `igraph_vector_int_t` objects.\n - A new container type, `igraph_matrix_list_t` has been added, replacing most uses of `igraph_vector_ptr_t` in the API where it was used to hold a variable-length list of matrices. The type contains `igraph_matrix_t` objects, and it is fully memory managed (i.e. its contents do not need to be allocated and destroyed manually).\n - A new container type, `igraph_graph_list_t` has been added, replacing most uses of `igraph_vector_ptr_t` in the API where it was used to hold a variable-length list of graphs. The type contains `igraph_t` objects, and it is fully memory managed (i.e. its contents do not need to be allocated and destroyed manually).\n - The vector container type, `igraph_vector_t`, has been extended with a new variant whose functions all start with `igraph_vector_fortran_int_...`. This vector container can be used for interfacing with Fortran code as it guarantees that the integers in the vector are compatible with Fortran integers. Note that `igraph_vector_int_t` is not suitable any more, as the elements of `igraph_vector_int_t` are of type `igraph_integer_t`, whose size may differ on 32-bit and 64-bit platforms, depending on how igraph was compiled.\n - `igraph_adjlist_init_from_inclist()` to create an adjacency list from an already existing incidence list by resolving edge IDs to their corresponding endpoints. This function is useful for algorithms when both an adjacency and an incidence list is needed and they should be in the same order.\n - `igraph_almost_equals()` and `igraph_cmp_epsilon()` to compare floating point numbers with a relative tolerance.\n - `igraph_betweenness_subset()` and `igraph_edge_betweenness_subset()` calculates betweenness and edge betweenness scores using shortest paths between a subset of vertices only (#1711, thanks to @guyroznb)\n - `igraph_blas_dgemm()` to multiply two matrices.\n - `igraph_calloc()` and `igraph_realloc()` are now publicly exposed; these functions provide variants of `calloc()` and `realloc()` that can safely be deallocated within igraph functions.\n - `igraph_circulant()` to create circulant graphs (#1856, thanks to @Gomango999).\n - `igraph_complex_almost_equals()` to compare complex numbers with a relative tolerance.\n - `igraph_eccentricity_dijkstra()` finds the longest weighted path length among all shortest paths between a set of vertices.\n - `igraph_enter_safelocale()` and `igraph_exit_safelocale()` for temporarily setting the locale to C. Foreign format readers and writers require a locale which uses a decimal point instead of decimal comma.\n - `igraph_es_all_between()` to create an edge selector that selects all edges between a pair of vertices.\n - `igraph_full_multipartite()` generates full multipartite graphs (a generalization of bipartite graphs to multiple groups).\n - `igraph_fundamental_cycles()` computes a fundamental cycle basis (experimental).\n - `igraph_generalized_petersen()` to create generalized Petersen graphs (#1844, thanks to @alexsyou).\n - `igraph_get_all_eids_between()` returns the IDs of all edges between a pair of vertices.\n - `igraph_get_k_shortest_paths()` finds the k shortest paths between a source and a target vertex.\n - `igraph_get_laplacian()` and `igraph_get_laplacian_sparse()` return the Laplacian matrix of the graph as a dense or sparse matrix, with various kinds of normalizations. They replace the now-deprecated `igraph_laplacian()` function. This makes the API consistent with `igraph_get_adjacency()` and `igraph_get_adjacency_sparse()`.\n - `igraph_get_widest_path()`, `igraph_get_widest_paths()`, `igraph_widest_path_widths_dijkstra()` and `igraph_widest_path_widths_floyd_warshall()` to find widest paths (#1893, thanks to @Gomango999).\n - `igraph_graph_center()` finds the central vertices of the graph. The central vertices are the ones having a minimum eccentricity (PR #2084, thanks to @pradkrish).\n - `igraph_graph_count()` returns the number of unlabelled graphs on a given number of vertices. It is meant to find the maximum isoclass value.\n - `igraph_has_mutual()` checks if a directed graph has any mutual edges.\n - `igraph_heap_clear()` and `igraph_heap_min_clear()` remove all elements from an `igraph_heap_t` or an `igraph_heap_min_t`, respectively.\n - `igraph_invalidate_cache()` invalidates all cached graph properties, forcing their recomputation next time they are requested. This function should not be needed in everyday usage, but may be useful in debugging and benchmarking.\n - `igraph_is_forest()` to check whether a graph is a forest (#1888, thanks to @rohitt28).\n - `igraph_is_acyclic()` to check whether a graph is acyclic (#1945, thanks to @borsgeorgica).\n - `igraph_is_perfect()` to check whether a graph is a perfect graph (#1730, thanks to @guyroznb).\n - `igraph_hub_and_authority_scores()` calculates the hub and authority scores of a graph as a matching pair.\n - `igraph_layout_umap()` and `igraph_layout_umap_3d()` to lay out a graph in 2D or 3D space using the UMAP dimensionality reduction algorithm.\n - `igraph_local_scan_subset_ecount()` counts the number of edges in induced sugraphs from a subset of vertices.\n - `igraph_matrix_view_from_vector()` allows interpreting the data stored in a vector as a matrix of the specified size.\n - `igraph_minimum_cycle_basis()` computes an unweighted minimum cycle basis (experimental).\n - `igraph_pseudo_diameter()` and `igraph_pseudo_diameter_dijkstra()` to determine a lower bound for the diameter of a graph (unweighted or weighted).\n - `igraph_regular_tree()` creates a regular tree where all internal vertices have the same total degree.\n - `igraph_rngtype_pcg32` and `igraph_rngtype_pcg64` implement 32-bit and 64-bit variants of the PCG random number generator.\n - `igraph_rng_get_pois()` generates random variates from the Poisson distribution.\n - `igraph_roots_for_tree_layout()` computes a set of roots suitable for a nice tree layout.\n - `igraph_spanner()` calculates a spanner of a graph with a given stretch factor (#1752, thanks to @guyroznb)\n - `igraph_sparse_adjacency()` and `igraph_sparse_weighted_adjacency()` constructs graphs from (weighted) sparse matrices.\n - `igraph_sparsemat_get()` to retrieve a single element of a sparse matrix.\n - `igraph_sparsemat_normalize_rows()` and `igraph_sparsemat_normalize_cols()` to normalize sparse matrices row-wise or column-wise.\n - `igraph_stack_capacity()` to query the capacity of a stack.\n - `igraph_strvector_capacity()` returns the maximum number of strings that can be stored in a string vector without reallocating the memory block holding the pointers to the individual strings.\n - `igraph_strvector_merge()` moves all strings from one string vectors to the end of another without re-allocating them.\n - `igraph_strvector_push_back_len()` adds a new string to the end of a string vector and allows the user to specify the length of the string being added.\n - `igraph_strvector_reserve()` reserves space for a given number of string pointers in a string vector.\n - `igraph_symmetric_tree()` to create a tree with the specified number of branches at each level (#1859, thanks to @YuliYudith and @DoruntinaM).\n - `igraph_trussness()` calculates the trussness of each edge in the graph (#1034, thanks to @alexperrone)\n - `igraph_turan()` generates Turán graphs (#2088, thanks to @pradkrish)\n - `igraph_vector_all_almost_e()`, `igraph_vector_complex_all_almost_e()`, `igraph_matrix_all_almost_e()`, `igraph_matrix_complex_all_almost_e()` for elementwise comparisons of floating point vector and matrices with a relative tolerance.\n - `igraph_vector_complex_zapsmall()` and `igraph_matrix_complex_zapsmall()` for replacing small components of complex vector or matrix elements with exact zeros.\n - `igraph_vector_lex_cmp_untyped()` and `igraph_vector_colex_cmp_untyped()` for lexicographic and colexicographic comparison of vectors, similarly to `igraph_vector_lex_cmp()` and `igraph_vector_colex_cmp()`. The difference between the two variants is that the untyped versions declare the vectors as `const void*`, making the functions suitable as comparators for `qsort()`.\n - `igraph_vector_permute()` functions to permute a vector based on an index vector.\n - `igraph_vector_ptr_sort_ind()` to obtain an index vector that would sort a vector of pointers based on some comparison function.\n - `igraph_vector_range()` to fill an existing vector with a range of increasing numbers.\n - `igraph_vector_remove_fast()` functions to remove an item from a vector by swapping it with the last element and then popping it off. It allows one to remove an item from a vector in constant time if the order of items does not matter.\n - `igraph_vertex_path_from_edge_path()` converts a sequence of edge IDs representing a path to an equivalent sequence of vertex IDs that represent the vertices the path travelled through.\n - `igraph_vs_range()`, `igraph_vss_range()`, `igraph_es_range()` and `igraph_ess_range()` creates vertex and edge sequences from C-style intervals (closed from the left, open from the right).\n - `igraph_wheel()` to create a wheel graph (#1938, thanks to @kwofach).\n\n### Removed\n\n - `igraph_adjlist_remove_duplicate()`, `igraph_betweenness_estimate()`, `igraph_closeness_estimate()`, `igraph_edge_betweenness_estimate()`, `igraph_inclist_remove_duplicate()`, `igraph_is_degree_sequence()` and `igraph_is_graphical_degree_sequence()` were deprecated earlier in 0.9.0 and are now removed in this release.\n - `igraph_dnorm()`, `igraph_strvector_move_interval()`, `igraph_strvector_permdelete()` and `igraph_strvector_remove_negidx()` were removed. These are not breaking changes as the functions were never documented, they were only exposed from one of the headers.\n - `igraph_eigen_laplacian()`, `igraph_es_fromto()` and `igraph_maximum_matching()` were removed. These are not breaking changes either as the functions were never implemented, they returned an error code unconditionally.\n\n### Changed\n\n - `igraph_degree_sequence_game()` now supports an additional method, `IGRAPH_DEGSEQ_EDGE_SWITCHING_SIMPLE`, an edge-switching MCMC sampler.\n - `igraph_get_adjacency()` and `igraph_get_adjacency_sparse()` now count loop edges _twice_ in undirected graphs when using `IGRAPH_GET_ADJACENCY_BOTH`. This is to ensure consistency with `IGRAPH_GET_ADJACENCY_UPPER` and `IGRAPH_GET_ADJACENCY_LOWER` such that the sum of the upper and the lower triangle matrix is equal to the full adjacency matrix even in the presence of loop edges.\n - `igraph_matrix_print()` and `igraph_matrix_fprint()` functions now align columns when priting.\n - `igraph_read_graph_gml()` now supports graph attributes (in addition to vertex and edge attributes).\n - `igraph_read_graph_gml()` now uses NaN as the default numerical attribute values instead of 0.\n - The Pajek parser in `igraph_read_graph_pajek()` is now less strict and accepts more files.\n - `igraph_ring()` no longer simplifies its result when generating a one- or two-vertex graph. The one-cycle has a self-loop and the undirected two-cycle has parallel edges.\n - `igraph_vector_view()` now allows `data` to be `NULL` in the special case when `length == 0`.\n - `igraph_version()` no longer returns an error code.\n - `igraph_write_graph_gml()` uses the `creator` parameter in a different way: the supplied string is now written into the Creator line as-is instead of being appended to a default value.\n - `igraph_write_graph_gml()` skips writing NaN values. These two changes ensure consistent round-tripping.\n - `igraph_write_graph_gml()` and `igraph_read_graph_gml()` now have limited support for entity encoding.\n - `igraph_write_graph_ncol()` now preserves the edge ordering of the graph when writing an NCOL file.\n - igraph functions that take an ARPACK options object now also accept `NULL` in place of an options object, and they will fall back to using a default object provided by `igraph_arpack_options_get_default()`.\n - Foreign format readers now present more informative error messages.\n - The default tolerance of the zapsmall functions is now `eps^(2/3)` instead of `eps^(1/2)` where eps is the machine epsilon of `igraph_real_t`.\n - It is now possible to override the uniform integer and the Poisson samplers in the random number generator interface.\n\n### Fixed\n\n - When an error occurs during parsing DL, GML, NCOL, LGL or Pajek files, line numbers are now reported correctly.\n - The GraphML parser does not print to stderr any more in case of encoding errors and other error conditions originating from the underlying `libxml2` library.\n - The GraphML parser would omit some edges and vertices when reading files with custom attribute types, such as those produced by yEd. This is now corrected.\n - The GML parser no longer mixes up Inf and NaN and -Inf now works.\n - The GML parser now supports nodes with no id field.\n - The GML parser now performs more stringent checks on the input file, such as verifying that `id`, `source`, `target` and `directed` fields are not duplicated.\n - The core data structures (vector, etc.) have overflow checks now.\n - Deterministic graph generators, as well as most random ones, have overflow checks now.\n - Graphs no longer lose all their attributes after calling `igraph_contract_vertices()`.\n - `igraph_hrg_init()` does not throw an assertion error anymore for zero vertices.\n - `igraph_matrix_complex_create()` and `igraph_matrix_complex_create_polar()` now set their sizes correctly.\n - `igraph_random_walk()` took one fewer steps than specified.\n - `igraph_sparsemat_getelements_sorted()` did not sort the elements for triplet matrices correctly; this is fixed now.\n - `igraph_write_graph_gml()` no longer produces corrupt output when some string attribute values contain `\"` characters.\n\n### Deprecated\n\n - `igraph_clusters()` has been renamed to `igraph_connected_components()`; the old name is deprecated and will be removed in 0.11.\n - `igraph_complex_eq_tol()` is now deprecated in favour of `igraph_complex_almost_equals()`.\n - `igraph_get_sparsemat()` is deprecated in favour of `igraph_get_adjacency_sparse()`, and will be removed in 0.11. Note that `igraph_get_adjacency_sparse()` takes an _initialized_ sparse matrix as input, unlike `igraph_get_sparsemat()` which takes an uninitialized one.\n - `igraph_get_stochastic_sparsemat()` is deprecated in favour of `igraph_get_stochastic_sparse()`, and will be removed in 0.11. Note that `igraph_get_stochastic_sparse()` takes an _initialized_ sparse matrix as input, unlike `igraph_get_stochastic_sparsemat()`, which takes an uninitialized one.\n - `igraph_isomorphic_34()` has been deprecated in favour of `igraph_isomorphic()`.  Note that `igraph_isomorphic()` calls an optimized version for directed graphs of size 3 and 4, and undirected graphs with 3-6 vertices, so there is no need for a separate function.\n - `igraph_laplacian()` is now deprecated; use `igraph_get_laplacian()` or `igraph_get_laplacian_sparse()` depending on whether you need a dense or a sparse matrix.\n - `igraph_lattice()` has been renamed to `igraph_square_lattice()` to indicate that this function generates square lattices only. The old name is deprecated and will either be removed in 0.11 or will be changed to become a generic lattice generator that also supports other types of lattices.\n - `igraph_local_scan_neighborhood_ecount()` is now deprecated in favour of `igraph_local_scan_subset_ecount()`.\n - `igraph_matrix_all_e_tol()` is now deprecated in favour of `igraph_matrix_all_almost_e()`.\n - `igraph_matrix_copy()` is now deprecated; use `igraph_matrix_init_copy()` instead. The new name emphasizes that the function _initializes_ the first argument instead of expecting an already-initialized target matrix. The old name will be removed in 0.11.\n - `igraph_matrix_e()` and `igraph_matrix_e_ptr()` have been renamed to `igraph_matrix_get()` and `igraph_matrix_get_ptr()`. The old names are deprecated and will be removed in 0.11.\n- `igraph_random_edge_walk()` has been deprecated by `igraph_random_walk()` to support edges and/or vertices for the random walk in a single function.  It will be removed in 0.11.\n - `igraph_read_graph_dimacs()` has been renamed to `igraph_read_graph_dimacs_flow()`; the old name is deprecated and might be re-used as a generic DIMACS reader in the future. Also, the function now uses `igraph_integer_t` as the source and target vertex IDs instead of a `long int`.\n - `igraph_shortest_paths()` and related functions were renamed to `igraph_distances()`; the old name was unfortunate because these functions calculated _path lengths_ only and not the paths themselves. The old names are deprecated and will be removed in 0.11.\n - `igraph_sparsemat_copy()`, `igraph_sparsemat_diag()` and `igraph_sparsemat_eye()` have been renamed to `igraph_sparsemat_init_copy()`, `igraph_sparsemat_init_diag()` and `igraph_sparsemat_init_eye()` to indicate that they _initialize_ a new sparse matrix. The old names are deprecated and will be removed in 0.11.\n - `igraph_strvector_add()` has been renamed to `igraph_strvector_push_back()` for sake of consistency with other vector-like data structures; the old name is deprecated and will be removed in 0.11.\n - `igraph_strvector_copy()` has been renamed to `igraph_strvector_init_copy()` for sake of consistency with other vector-like data structures; the old name is deprecated and will be removed in 0.11.\n - `igraph_strvector_get()` now returns a `const char*` and not a `char*` to indicate that you are not supposed to modify the string in the vector directly. If you do want to modify it and you are aware of the implications (i.e. the new string must not be longer than the original one), you can cast away the constness of the return value before modifying it.\n - `igraph_strvector_set2()` has been renamed to `igraph_strvector_set_len()`; the old name is deprecated and will be removed in 0.11.\n - `igraph_tree()` has been renamed to `igraph_kary_tree()`; the old name is deprecated and will be removed in 0.11.\n - `igraph_vector_e()` and `igraph_vector_e_ptr()` have been renamed to `igraph_vector_get()` and `igraph_vector_get_ptr()`. The old names are deprecated and will be removed in 0.11.\n - `igraph_vector_e_tol()` is now deprecated in favour of `igraph_vector_all_almost_e()`.\n - `igraph_vector_copy()` is now deprecated; use `igraph_vector_init_copy()` instead. The new name emphasizes that the function _initializes_ the first argument instead of expecting an already-initialized target vector. The old name will be removed in 0.11.\n - `igraph_vector_init_seq()` is now deprecated in favour of `igraph_vector_init_range()`, which uses C-style intervals (closed from the left and open from the right).\n - `igraph_vs_seq()`, `igraph_vss_seq()`, `igraph_es_seq()` and `igraph_ess_seq()` are now deprecated in favour of `igraph_vs_range()`, `igraph_vss_range()`, `igraph_es_range()` and `igraph_ess_range()` because these use C-style intervals (closed from the left, open from the right).\n - `igraph_write_graph_dimacs()` has been renamed to `igraph_write_graph_dimacs_flow()`; the old name is deprecated and might be re-used as a generic DIMACS writer in the future. Also, the function now uses `igraph_integer_t` as the source and target vertex IDs instead of a `long int`.\n - `igraph_zeroin()` is deprecated and will be removed in 0.11, with no replacement. The function is not graph-related and was never part of the public API.\n - The macros `igraph_Calloc`, `igraph_Realloc` and `igraph_Free` have been deprecated in favour of `IGRAPH_CALLOC`, `IGRAPH_REALLOC` and `IGRAPH_FREE` to simplify the API. The deprecated variants will be removed in 0.11.\n\n### Other\n\n - Documentation improvements.\n - Support for Intel's LLVM-based compiler.\n\n## [0.9.10] - 2022-09-02\n\n### Added\n\n - `igraph_reverse_edges()` reverses the specified edges in the graph while preserving all attributes.\n\n### Changed\n\n - The `IGRAPH_ARPACK_PROD` error code is no longer used. Instead, the specific error encountered while doing matrix multiplication is reported.\n - XML external entities are not resolved any more when parsing GraphML files to prevent XML external entity injection (XXE) attacks. Standard XML entities like `&lt;` or `&quot;` still work.\n\n### Fixed\n\n - Fixed incorrect results from `igraph_local_scan_1_ecount()` when the graph was directed but the mode was `IGRAPH_ALL` and some nodes had loop edges. See issue #2092.\n - Fixed incorrect counting of self-loops in `igraph_local_scan_neighborhood_ecount()` when the graph was undirected.\n - In some rare edge cases, `igraph_pagerank()` with the ARPACK method and `igraph_hub_score()` / `igraph_authority_score()` could return incorrect results. The problem could be detected by checking that the returned eigenvalue is not negative. See issue #2090.\n - `igraph_permute_vertices()` now checks for out-of-range indices and duplicates in the permutation vector.\n - `igraph_create()` now checks for non-finite vertex indices in the edges vector.\n - `igraph_eigenvector_centrality()` would return incorrect scores when some weights were negative.\n - `igraph_es_seq()` and `igraph_ess_seq()` did not include the `to` vertex in the sequence.\n - `igraph_eit_create()` and `igraph_vit_create()` now check that all edge/vertex indices are in range when creating iterators from sequence-type selectors.\n - `igraph_grg_game()` now validates its arguments.\n - `igraph_layout_drl()` and its 3D version now validate their inputs.\n - `igraph_layout_kamada_kawai()`, `igraph_layout_fruchterman_reingold()`, `igraph_layout_drl()`, as well as their 3D versions now check for non-positive weights.\n - `igraph_asymmetric_preference_game()` interpreted its `type_dist_matrix` argument incorrectly.\n - Fixed incorrect result of `igraph_community_spinglass()` for null and singleton graphs.\n - `igraph_layout_gem()` does not crash any more for graphs with only a single vertex.\n - `igraph_bridges()` no longer uses recursion and thus is no longer prone to stack overflow.\n - Include paths of dependent packages would be specified incorrectly in some environments.\n\n### Other\n\n - Documentation improvements.\n\n## [0.9.9] - 2022-06-04\n\n### Changed\n\n - `igraph_community_walktrap()` now uses double precision floating point operations internally instead of single precision.\n - In `igraph_community_leiden()`, the `nb_clusters` output parameter is now optional (i.e. it can be `NULL`).\n - `igraph_read_graph_graphml()` no longer attempts to temporarily set the C locale, and will therefore not work correctly if the current locale uses a decimal comma.\n\n### Fixed\n\n - `igraph_community_walktrap()` would return an invalid `modularity` vector when the `merges` matrix was not requested.\n - `igraph_community_walktrap()` would return a `modularity` vector that was too long for disconnected graphs. This would cause a failure in some weighted graphs when the `membership` vector was requested.\n - `igraph_community_walktrap()` now checks the weight vector: only non-negative weights are accepted, and all vertices must have non-zero strength.\n - `igraph_community_walktrap()` now returns a modularity score of NaN for graphs with no edges.\n - `igraph_community_fast_greedy()` now returns a modularity score of NaN for graphs with no edges.\n - `igraph_community_edge_betweenness()` now returns a modularity vector with a single NaN entry for graph with no edges. Previously it returned a zero-length vector.\n - `igraph_community_leading_eigenvector()` does not ignore non-ARPACK-related errors from `igraph_arpack_rssolve()` any more.\n - `igraph_preference_game()` now works correctly when `fixed_size` is true and\n   `type_dist` is not given; earlier versions had a bug where more than half of\n   the vertices mistakenly ended up in group 0.\n - Fixed a memory leak in `igraph_hrg_fit()` when using `start=1`.\n - `igraph_write_graph_dot()` now outputs NaN values unchanged.\n - `igraph_write_graph_dot()` no longer produces invalid DOT files when empty string attributes are present.\n - `igraph_layout_fruchterman_reingold()` and `igraph_layout_kamada_kawai()`, as well as their 3D versions, did not respect vertex coordinate bounds (`xmin`, `xmax`, etc.) when minimum values were large or maximum values were small. This is now fixed.\n - The initial coordinates of the Kamada-Kawai layout (`igraph_layout_kamada_kawai()` and `igraph_layout_kamada_kawai_3d()`) are chosen to be more in line with the original publication, improving the stability of the result. See isse #963. This changes the output of the function for the same graph, compared with previous versions. To obtain the same layout, initialize coordinates with `igraph_layout_circle()` (in 2D) or `igraph_layout_sphere()` (in 3D).\n - Improved numerical stability in Kamada-Kawai layout.\n - Corrected a problem in the calculation of displacements in `igraph_layout_fruchterman_reingold()` and its 3D version. This fixes using the \"grid\" variant of the algorithm on disconnected graphs.\n - `igraph_sumtree_search()` would consider search intervals open on the left and closed on the right, contrary to the documentation. This is now corrected to closed on the left and open on the right. In some cases this lead to a zero-weight element being returned for a zero search value. See issue #2080.\n\n### Other\n\n - Greatly improved error reporting from foregin format parsers.\n - Documentation improvements.\n\n## [0.9.8] - 2022-04-08\n\n### Fixed\n\n - Assertion failure in `igraph_bfs()` when an empty `roots` or `restricted` vector was provided.\n - `igraph_diversity()` now returns 0 for degree-1 vertices. Previously it incorrectly returned NaN or +-Inf depending on roundoff errors.\n - `igraph_community_walktrap()` does not crash any more when provided with\n   `modularity=NULL` and `membership=NULL`.\n\n### Other\n\n - Documentation improvements.\n\n## [0.9.7] - 2022-03-16\n\n### Changed\n\n - `igraph_get_all_shortest_paths_dijsktra()` now uses tolerances when comparing path\n   lengths, and is thus robust to numerical roundoff errors.\n - `igraph_vector_*_swap` and `igraph_matrix_swap` now take O(1) instead of O(n) and accept all sizes.\n\n### Fixed\n\n - NCOL and LGL format writers no longer accept \"name\" and \"weight\" attributes\n   of invalid types.\n - The LGL writer could not access numerical weight attributes, potentially leading\n   to crashes.\n - External PLFIT libraries and their headers are now detected at their standard\n   installation location.\n - `igraph_vector_init()` no longer accepts negative vector sizes.\n - `igraph_assortativity_nominal()` crashed on the null graph.\n - Label propagation now ensures that all labels are dominant.\n - Fixed incorrect partition results for walktrap algorithm (issue #1927)\n - Negative values returned by `igraph_rng_get_integer()` and `RNG_INTEGER()` were incorrect,\n   one larger than they should have been.\n - `igraph_community_walktrap()` now checks its `steps` input argument.\n - The first modularity value reported by `igraph_community_walktrap()` was\n   incorrect (it was always zero). This is now fixed.\n - `igraph_correlated_game()` would return incorrect results, or exhaust the memory,\n    for most input graphs that were not generated with `igraph_erdos_renyi_game_gnp()`.\n - `igraph_community_label_propagation` incorrectly did not result in all labels being dominant (issue #1963, fixed in PR #1966).\n\n### Other\n\n - The C attribute handler now verifies attribute types when retrieving attributes.\n - Documentation improvements.\n\n## [0.9.6] - 2022-01-05\n\n - Isomorphism class functions (`igraph_isoclass()`, `igraph_isoclass_subgraph()`,\n   `igraph_isoclass_create`) and motif finder functions (`igraph_motifs_randesu()`,\n   `igraph_motifs_randesu_estimate()`, `igraph_motifs_randesu_callback()`) now\n   support undirected (sub)graphs of sizes 5 and 6. Previsouly only sizes 3 and 4\n   were supported.\n\n### Fixed\n\n - igraph would not build with MinGW when using the vendored GLPK and enabling TLS.\n - Removed some uses of `abort()` from vendored libraries, which could unexpectedly\n   shut down the host language of igraph's high-level interfaces.\n - `igraph_community_label_propagation()` no longer leaves any vertices unlabeled\n   when they were not reachable from any labeled ones, i.e. the returned membership\n   vector is guaranteed not to contain negative values (#1853).\n - The Kamada-Kawai layout is now interruptible.\n - The Fruchterman-Reingold layout is now interruptible.\n - Fixed a bug in `igraph_cmp_epsilon()` that resulted in incorrect results for\n   edge betweenness calculations in certain rare cases with x87 floating point\n   math when LTO was also enabled (#1894).\n - Weighted clique related functions now fall back to the unweighted variants\n   when a null vertex weight vector is given to them.\n - `igraph_erdos_renyi_game_(gnm|gnp)` would not produce self-loops for the singleton\n   graph.\n - Fixed a bug in `igraph_local_efficiency()` that sometimes erroneously\n   reported zero as the local efficiency of a vertex in directed graphs.\n - `igraph_vector_update()` (and its type-specific variants) did not check for\n   memory allocation failure.\n - Fixed a potential crash in the GraphML reader that would be triggered by some\n   invalid GraphML files.\n\n### Other\n\n - `igraph_is_tree()` has improved performance and memory usage.\n - `igraph_is_connected()` has improved performance when checking weak connectedness.\n - Improved error handling in `igraph_maximal_cliques()` and related functions.\n - The build system now checks that GLPK is of a compatible version (4.57 or later).\n - The vendored `plfit` package was updated to 0.9.3.\n - You can now build igraph with an external `plfit` instead of the vendored one.\n - Documentation improvements.\n\n## [0.9.5] - 2021-11-11\n\n### Fixed\n\n - `igraph_reindex_membership()` does not allow negative membership indices any more.\n\n - `igraph_rewire_directed_edges()` now generates multigraphs when edge directions\n   are ignored, to make it consistent with the directed case.\n\n - Fixed a bug in `igraph_gomory_hu_tree()` that returned only the equivalent flow\n   tree instead of the cut tree (#1810).\n\n - Fixed a bug in the `IGRAPH_TO_UNDIRECTED_COLLAPSE` mode of\n   `igraph_to_undirected()` that provided an incorrect merge vector to the\n   attribute handler, leading to problems when edge attributes were merged\n   using an attribute combination (#1814).\n\n - Fixed the behaviour of the `IGRAPH_ENABLE_LTO` option when it was set to\n   `AUTO`; earlier versions had a bug where `AUTO` simply checked whether LTO\n   is supported but then did not use LTO even if it was supported.\n\n - When using igraph from a CMake project, it is now checked that the project has\n   the C++ language enabled. This is necessary for linking to igraph with CMake.\n\n### Other\n\n - Improved the root selection method for disconnected graphs in the\n   Reingold-Tilford layout (#1836). The new root selection method provides\n   niceer results if the graph is not a tree, although it is still recommended\n   to use the Sugiyama layout instead, unless the input graph is _almost_ a\n   tree, in which case Reingold-Tilfold may still be preferred.\n\n - `igraph_decompose()` is now much faster for large graphs containing many\n   isolates or small components (#960).\n\n - `igraph_largest_cliques()` and `igraph_clique_number()` were re-written to\n   use `igraph_maximal_cliques_callback()` so they are much faster now (#804).\n\n - The vendored GLPK has been upgraded to GLPK 5.0.\n\n - Documentation improvements.\n\n## [0.9.4] - 2021-05-31\n\n### Changed\n\n - Unweighted transitivity (i.e. clustering coefficient) calculations now ignore multi-edges and edge directions instead of rejecting multigraphs and directed graphs.\n - `igraph_transitivity_barrat()` now returns an error code if the input graph has multiple edges (which is not handled correctly by the implementation yet).\n\n### Fixed\n\n - `igraph_local_scan_k_ecount()` now handles loops correctly.\n - `igraph_transitivity_avglocal_undirected()` is no longer slower than `igraph_transitivity_local_undirected()`.\n - Worked around an invalid warning issued by Clang 9.0 when compiling with OpenMP.\n\n### Other\n\n - Documentation improvements.\n\n## [0.9.3] - 2021-05-05\n\n### Added\n\n - OpenMP is now enabled and used by certain functions (notably PageRank calculation) when the compiler supports it. Set `IGRAPH_OPENMP_SUPPORT=OFF` at configuration time to disable this.\n\n### Fixed\n\n - `igraph_get_incidence()` no longer reads and writes out of bounds when given a non-bipartite graph, but gives a warning and ignores edges within a part.\n - `igraph_dyad_census()` no longer reports an overflow on singleton graphs, and handles loops and multigraphs correctly. Undirected graphs are handled consistently and will no longer give a warning.\n - `igraph_vector_lex_cmp()` and `igraph_vector_colex_cmp()` dereferenced their arguments only once instead of twice, and therefore did not work with `igraph_vector_ptr_sort()`.\n - `igraph_maximal_cliques_subset()` and `igraph_transitivity_barrat()` corrupted the error handling stack (\"finally stack\") under some circumstances.\n - CMake package files did not respect `CMAKE_INSTALL_LIBDIR`. This only affected Linux distributions which install into `lib64` or other locations instead of `lib`.\n - The parser sources could not be generated when igraph was in a location that contained spaces in its path.\n - igraph no longer links to the math library (`libm`) when this is not necessary.\n - `_CRT_SECURE_NO_WARNINGS` is now defined during compilation to enable compatibility with UWP.\n - Fixed a compilation issue on MSYS / MinGW when link-time optimization was enabled and the `MSYS Makefiles` CMake generator was used. Some source files in igraph were renamed as a consequence, but these should not affect users of the library.\n\n### Deprecated\n\n - `igraph_rng_min()` is now deprecated; assume a constant zero as its return value if you used this function in your own code.\n\n### Other\n\n - Updated the vendored CXSparse library to version 3.2.0\n\n## [0.9.2] - 2021-04-14\n\n### Added\n\n - CMake package files are now installed with igraph. This allows `find_package(igraph)` to find igraph and detect the appropriate compilation options for projects that link to it.\n\n### Fixed\n\n - igraph can now be used as a CMake subproject in other CMake-based projects.\n - The documentaton can now be built from the release tarball.\n - Configuration will no longer fail when the release tarball is extracted into a subdirectory of an unrelated git repository.\n - The generated pkg-config file was incorrect when `CMAKE_INSTALL_<dir>` variables were absolute paths.\n - On Unix-like systems, the library name is now `libigraph.so.0.0.0`, as it used to be for igraph 0.8 and earlier.\n - Fixed a return type mismatch in parser sources, and fixed some warnings with recent versions of gcc.\n - Fixed a bug in `igraph_get_shortest_paths_dijkstra()` and `igraph_get_shortest_paths_bellman_ford()` that returned incorrect results for unreachable vertices.\n\n### Other\n\n - Improved installation instructions and tutorial.\n\n## [0.9.1] - 2021-03-23\n\n### Added\n\n - `igraph_vector_lex_cmp()` and `igraph_vector_colex_cmp()` for lexicographic\n   and colexicographic comparison of vectors. These functions may also be used\n   for sorting.\n\n### Changed\n\n - `igraph_community_multilevel()` is now randomized (PR #1696, thanks to Daniel Noom).\n\n### Fixed\n\n - CMake settings that controlled the library installation directory name, such as `CMAKE_INSTALL_LIBDIR`, were not respected.\n - Under some conditions, the generated pkg-config file contained an incorrect include directory path.\n - The following functions were not exported from the shared library: `igraph_subcomponent()`, `igraph_stack_ptr_free_all()`, `igraph_stack_ptr_destroy_all()`, `igraph_status_handler_stderr()`, `igraph_progress_handler_stderr()`.\n - Built-in random number generators (`igraph_rngtype_mt19937`, `igraph_rngtype_rand`, `igraph_rngtype_glibc2`) were not exported from the shared library.\n - `igraph_layout_graphopt()` no longer rounds the `spring_length` parameter to an integer.\n - `igraph_get_all_shortest_paths_dijkstra()` no longer modifies the `res` vector's item destructor.\n - `igraph_get_shortest_path_bellman_ford()` did not work correctly when calculating paths to all vertices.\n - `igraph_arpack_rnsolve()` checks its parameters more carefully.\n - `igraph_community_to_membership()` does not crash anymore when `csize` is requested but `membership` is not.\n - `igraph_citing_cited_type_game()`: fixed memory leaks (PR #1700, thanks to Daniel Noom).\n - `igraph_transitivity_undirected()`, `igraph_transitivity_avglocal_undirected()` and `igraph_transitivity_barrat()` no longer trigger an assertion failure when used with the null graph (PRs #1709, #1710).\n - `igraph_(personalized_)pagerank()` would return incorrect results for weighted multigraphs with fewer than 128 vertices when using `IGRAPH_PAGERANK_ALGO_PRPACK`.\n - `igraph_diversity()` now checks its input more carefully, and throws an error when the input graph has multi-edges or is directed.\n - `igraph_shortest_paths_johnson()` would return incorrect results when the `to` argument differed from `from` (thanks to Daniel Noom).\n - `igraph_is_graphical()` would fail to set the result variable for certain special degree sequences in the undirected simple graph case.\n - Non-maximal clique finding functions would sometimes return incomplete results when finding more than 2147483647 (i.e. 2^31 - 1) cliques.\n - GLPK internal errors no longer crash igraph.\n - Fixed some potential memory leaks that could happen on error conditions or when certain functions were interrupted.\n - When testing a DLL build on Windows, the `PATH` was sometimes not set correctly, causing the tests to fail (PR #1692).\n - When compiling from the git repository (as opposed to the release tarball), the build would fail with recent versions of `bison` and `flex`.\n\n### Other\n\n - Documentation improvements.\n - Much faster documentation builds.\n - Allow using a pre-generated `arith.h` header for f2c when cross-compiling; see the Installation section of the documentation.\n - The `IGRAPH_ENABLE_LTO` build option now supports the `AUTO` value, which uses LTO only if the compiler supports it. Warning: CMake may not always be able to detect that LTO is not fully supported. Therefore, the default setting is `OFF`.\n - The following functions are now interruptible: `igraph_grg_game()`, `igraph_sbm_game()`, `igraph_barabasi_game()`, `igraph_barabasi_aging_game()`.\n - Functions that use GLPK, such as `igraph_feedback_arc_set()` and `igraph_community_optimal_modularity()` are now interruptible.\n - Add support for older versions of Clang that do not recognize the `-Wno-varargs` flag.\n\n### Acknowledgments\n\n - Big thanks to Daniel Noom for continuing to expand the test suite and discovering and fixing several bugs in the process!\n\n## [0.9.0] - 2021-02-16\n\n### Added\n\n - Eulerian paths/cycles (PR #1346):\n   * `igraph_is_eulerian()` finds out whether an Eulerian path/cycle exists.\n   * `igraph_eulerian_path()` returns an Eulerian path.\n   * `igraph_eulerian_cycle()` returns an Eulerian cycle.\n - Efficiency (PR #1344):\n   * `igraph_global_efficiency()` computes the global efficiency of a network.\n   * `igraph_local_efficiency()` computes the local efficiency around each vertex.\n   * `igraph_average_local_efficiency()` computes the mean local efficiency.\n - Degree sequences (PR #1445):\n   * `igraph_is_graphical()` checks if a degree sequence has a realization as a simple or multigraph, with or without self-loops.\n   * `igraph_is_bigraphical()` checks if two degree sequences have a realization as a bipartite graph.\n   * `igraph_realize_degree_sequence()` now supports constructing non-simple graphs as well.\n - There is a new fatal error handling mechanism (PR #1548):\n   * `igraph_set_fatal_handler()` sets the fatal error handler. It is the only function in this functionality group that is relevant to end users.\n   * The macro `IGRAPH_FATAL()` and the functions `igraph_fatal()` and `igraph_fatalf()` raise a fatal error. These are for internal use.\n   * `IGRAPH_ASSERT()` is a replacement for the `assert()` macro. It is for internal use.\n   * `igraph_fatal_handler_abort()` is the default fatal error handler.\n - The new `IGRAPH_WARNINGF`, `IGRAPH_ERRORF` and `IGRAPH_FATALF` macros provide warning/error reporting with `printf`-like syntax. (PR #1627, thanks to Daniel Noom!)\n - `igraph_average_path_length_dijkstra()` computes the mean shortest path length in weighted graphs (PR #1344).\n - `igraph_get_shortest_paths_bellman_ford()` computes the shortest paths (including the vertex and edge IDs along the paths) using the Bellman-Ford algorithm (PR #1642, thanks to Guy Rozenberg). This makes it possible to calculate the shortest paths on graphs with negative edge weights, which was not possible before with Dijkstra's algorithm.\n - `igraph_get_shortest_path_bellman_ford()` is a wrapper for `igraph_get_shortest_paths_bellman_ford()` for the single path case.\n - `igraph_is_same_graph()` cheks that two labelled graphs are the same (PR #1604).\n - Harmonic centrality (PR #1583):\n   * `igraph_harmonic_centrality()` computes the harmonic centrality of vertices.\n   * `igraph_harmonic_centrality_cutoff()` computes the range-limited harmonic centrality.\n - Range-limited centralities, currently equivalent to the old functions with names ending in `_estimate` (PR #1583):\n   * `igraph_closeness_cutoff()`.\n   * `igraph_betweenness_cutoff()`.\n   * `igraph_edge_betweenness_cutoff()`.\n - `igraph_vector_is_any_nan()` checks if any elements of an `igraph_vector_t` is NaN.\n - `igraph_inclist_size()` returns the number of vertices in an incidence list.\n - `igraph_lazy_adjlist_size()` returns the number of vertices in a lazy adjacency list.\n - `igraph_lazy_inclist_size()` returns the number of vertices in a lazy incidence list.\n - `igraph_bfs_simple()` now provides a simpler interface to the breadth-first search functionality.\n\n### Changed\n\n - igraph now uses a CMake-based build sysyem.\n - GMP support can no longer be disabled. When GMP is not present on the system, igraph will use an embedded copy of Mini-GMP (PR #1549).\n - Bliss has been updated to version 0.75. Bliss functions are now interruptible. Thanks to Tommi Junttila for making this possible!\n - Adjacency and incidence lists:\n   * `igraph_adjlist_init()` and `igraph_lazy_adjlist_init()` now require the caller to specify what to do with loop and multiple edges.\n   * `igraph_inclist_init()` and `igraph_lazy_inclist_init()` now require the caller to specify what to do with loop edges.\n   * Adjacency and incidence lists now use `igraph_vector_int_t` consistently.\n - Community detection:\n   * `igraph_community_multilevel()`: added resolution parameter.\n   * `igraph_community_fluid_communities()`: graphs with no vertices or with one vertex only are now supported; they return a trivial partition.\n - Modularity:\n   * `igraph_modularity()` and `igraph_modularity_matrix()`: added resolution parameter.\n   * `igraph_modularity()` and `igraph_modularity_matrix()` now support the directed version of modularity.\n   * `igraph_modularity()` returns NaN for graphs with no edges to indicate that the modularity is not well-defined for such graphs.\n - Centralities:\n   * `cutoff=0` is no longer interpreted as infinity (i.e. no cutoff) in `betweenness`, `edge_betweenness` and `closeness`. If no cutoff is desired, use a negative value such as `cutoff=-1`.\n   * The `nobigint` argument has been removed from `igraph_betweenness()`, `igraph_betweenness_estimate()` and `igraph_centralization_betweenness()`, as it is not longer needed. The current implementation is more accurate than the old one using big integers.\n   * `igraph_closeness()` now considers only reachable vertices during the calculation (i.e. the closeness is calculated per-component in the undirected case) (PR #1630).\n   * `igraph_closeness()` gained two additional output parameters, `reachable_count` and `all_reachable`, returning the number of reached vertices from each vertex, as well as whether all vertices were reachable. This allows for computing various generalizations of closeness for disconnected graphs (PR #1630).\n   * `igraph_pagerank()`, `igraph_personalized_pagerank()` and `igraph_personalized_pagerank_vs()` no longer support the `IGRAPH_PAGERANK_ALGO_POWER` method. Their `options` argument now has type `igraph_arpack_options_t *` instead of `void *`.\n - Shortest paths (PR #1344):\n   * `igraph_average_path_length()` now returns the number of disconnected vertex pairs in the new `unconn_pairs` output argument.\n   * `igraph_diameter()` now return the result as an `igraph_real_t` instead of an `igraph_integer_t`.\n   * `igraph_average_path_length()`  and `igraph_diameter()` now return `IGRAPH_INFINITY` when `unconn=FALSE` and the graph is not connected. Previously they returned the number of vertices.\n - Trait-based random graph generators:\n   * `igraph_callaway_traits_game()` and `igraph_establishment_game()` now have an optional output argument to retrieve the generated vertex types.\n   * `igraph_callaway_traits_game()` and `igraph_establishment_game()` now allow omitting the type distribution vector, in which case they assume a uniform distribution.\n   * `igraph_asymmetric_preference_game()` now accept a different number of in-types and out-types.\n - `igraph_subisomorphic_lad()` now supports graphs with self-loops.\n - `igraph_is_chordal()` and `igraph_maximum_cardinality_search()` now support non-simple graphs and directed graphs.\n - `igraph_realize_degree_sequence()` has an additional argument controlling whether multi-edges or self-loops are allowed.\n - `igraph_is_connected()` now returns false for the null graph; see https://github.com/igraph/igraph/issues/1538 for the reasoning behind this decision.\n - `igraph_lapack_ddot()` is renamed to `igraph_blas_ddot()`.\n - `igraph_to_directed()`: added RANDOM and ACYCLIC modes (PR #1511).\n - `igraph_topological_sorting()` now issues an error if the input graph is not acyclic. Previously it issued a warning.\n - `igraph_vector_(which_)(min|max|minmax)()` now handles NaN elements.\n - `igraph_i_set_attribute_table()` is renamed to `igraph_set_attribute_table()`.\n - `igraph_i_sparsemat_view()` is renamed to `igraph_sparsemat_view()`.\n\n### Deprecated\n\n - `igraph_is_degree_sequence()` and `igraph_is_graphical_degree_sequence()` are deprecated in favour of the newly added `igraph_is_graphical()`.\n - `igraph_closeness_estimate()` is deprecated in favour of the newly added `igraph_closeness_cutoff()`.\n - `igraph_betweenness_estimate()` and `igraph_edge_betweenness_estimate()` are deprecated in favour of the newly added `igraph_betweenness_cutoff()` and `igraph_edge_betweenness_cutoff()`.\n - `igraph_adjlist_remove_duplicate()` and `igraph_inclist_remove_duplicate()` are now deprecated in favour of the new constructor arguments in `igraph_adjlist_init()` and `igraph_inclist_init()`.\n\n### Removed\n\n - The following functions, all deprecated in igraph 0.6, have been removed (PR #1562):\n   * `igraph_adjedgelist_init()`, `igraph_adjedgelist_destroy()`, `igraph_adjedgelist_get()`, `igraph_adjedgelist_print()`, `igraph_adjedgelist_remove_duplicate()`.\n   * `igraph_lazy_adjedgelist_init()`, `igraph_lazy_adjedgelist_destroy()`, `igraph_lazy_adjedgelist_get()`, `igraph_lazy_adjedgelist_get_real()`.\n   * `igraph_adjacent()`.\n   * `igraph_es_adj()`.\n   * `igraph_subgraph()`.\n - `igraph_pagerank_old()`, deprecated in 0.7, has been removed.\n - `igraph_vector_bool` and `igraph_matrix_bool` functions that relied on inequality-comparing `igraph_bool_t` values are removed.\n\n### Fixed\n\n - Betweenness calculations are no longer at risk from integer overflow.\n - The actual cutoff distance used in closeness calculation was one smaller than the `cutoff` parameter. This is corrected (PR #1630).\n - `igraph_layout_gem()` was not interruptible; now it is.\n - `igraph_barabasi_aging_game()` now checks its parameters more carefully.\n - `igraph_callaway_traits_game()` and `igraph_establishment_game()` now check their parameters.\n - `igraph_lastcit_game()` checks its parameters more carefully, and no longer crashes with zero vertices (PR #1625).\n - `igraph_cited_type_game()` incorrectly rounded the attractivity vector entries to integers.\n - `igraph_residual_graph()` now returns the correct _residual_ capacities; previously it wrongly returned the original capacities (PR #1598).\n - `igraph_psumtree_update()` now checks for negative values and NaN.\n - `igraph_communities_spinglass()`: fixed several memory leaks in the `IGRAPH_SPINCOMM_IMP_NEG` implementation.\n - `igraph_incident()` now returns edges in the same order as `igraph_neighbors()`.\n - `igraph_modularity_matrix()` returned incorrect results for weighted graphs. This is now fixed. (PR #1649, thanks to Daniel Noom!)\n - `igraph_lapack_dgetrf()` would crash when passing `NULL` for its `ipiv` argument (thanks for the fix to Daniel Noom).\n - Some `igraph_matrix` functions would fail to report errors on out-of-memory conditions.\n - `igraph_maxdegree()` now returns 0 for the null graph or empty vector set. Previously, it did not handle this case.\n - `igraph_vector_bool_all_e()` now considers all nonzero (i.e. \"true\") values to be the same.\n - PageRank (PR #1640):\n   * `igraph_(personalized_)pagerank(_vs)()` now check their parameters more carefully.\n   * `igraph_personalized_pagerank()` no longer modifies its `reset` parameter.\n   * `igraph_(personalized_)pagerank(_vs)`: the `IGRAPH_PAGERANK_ALGO_ARPACK` method now handles self-loops correctly.\n   * `igraph_personalized_pagerank(_vs)()`: the result retuned for edgeless or all-zero-weight graphs with the `IGRAPH_PAGERANK_ALGO_ARPACK` ignored the personalization vector. This is now corrected.\n   * `igraph_personalized_pagerank(_vs)()` with a non-uniform personalization vector, a disconnected graph and the `IGRAPH_PAGERANK_ALGO_PRPACK` method would return results that were inconsistent with `IGRAPH_PAGERANK_ALGO_ARPACK`. This happened because PRPACK always used a uniform reset distribution when the random walk got stuck in a sink vertex. Now it uses the user-specified reset distribution for this case as well.\n - Fixed crashes in several functions when passing a weighted graph with zero edges (due to `vector_min` being called on the zero-length weight vector).\n - Fixed problems in several functions when passing in a graph with zero vertices.\n - Weighted betweenness, closeness, PageRank, shortest path calculations and random walk functions now check if any weights are NaN.\n - Many functions now reject input arguments containing NaN values.\n - Compatibility with the PGI compiler.\n\n### Other\n\n - Documentation improvements.\n - Improved error and warning messages.\n - More robust error handling.\n - General code cleanup to reduce the number of compiler warnings.\n - igraph's source files have been re-organized for better maintainability.\n - Debugging aid: When igraph is build with AddressSanitizer, the default error handler prints a stack trace before exiting.\n - igraph can now be built with an external CXSparse library.\n - The references to igraph source files in error and warning messages are now always relative to igraph's base directory.\n - When igraph is built as a shared library, only public symbols are exported even on Linux and macOS.\n\n### Acknowledgments\n\n - Thanks to Daniel Noom for significantly expanding igraph's test coverage and exposing several issues in the process!\n\n## [0.8.5] - 2020-12-07\n\n### Changed\n\n - `igraph_write_graph_pajek()`: the function now always uses the platform-native line endings (CRLF on Windows, LF on Unix and macOS). Earlier versions tried to enforce Windows line endings, but this was error-prone, and since all recent versions of Pajek support both line endings, enforcing Windows line endings is not necessary any more.\n\n### Fixed\n\n - Fixed several compilation issues with MINGW32/64 (PR #1554)\n - `igraph_layout_davidson_harel()` was not interruptible; now it is.\n - Added a missing memory cleanup call in `igraph_i_cattribute_combine_vertices()`.\n - Fixed a few memory leaks in test cases.\n\n## [0.8.4] - 2020-11-24\n\n### Fixed\n\n - `igraph_i_cattribute_combine_vertices()`: fixed invalid cleanup code that eventually filled up the \"finally\" stack when combining vertices with attributes extensively.\n - `igraph_hrg_sample()`: fixed incorrect function prototype\n - `igraph_is_posinf()` and `igraph_is_neginf()`: fixed incorrect result on platforms where the sign of the result of `isinf()` is not indicative of the sign of the input.\n - Fixed building with vendored LAPACK and external BLAS\n - Fixed building with XCode 12.2 on macOS\n\n### Other\n\n - Documentation improvements\n - General code cleanup to reduce the number of compiler warnings\n\n## [0.8.3] - 2020-10-02\n\n### Added\n\n - `igraph_vector_binsearch_slice()` performs binary search on a sorted slice of a vector.\n\n### Changed\n\n - `igraph_eigenvector_centrality()` assumes the adjacency matrix of undirected graphs to have twice the number of self-loops for each vertex on the diagonal. This makes the results consistent between an undirected graph and its directed equivalent when each edge is replaced by a mutual edge pair.\n\n### Fixed\n\n - `igraph_isomorphic()` now verifies that the input graphs have no multi-edges (PR #1464).\n - `igraph_difference()` was creating superfluous self loops (#597).\n - `igraph_count_multiple()` was giving incorrect results for self-loops in directed graph (PR #1399).\n - `igraph_betweenness_estimate()`: fixed incorrect results with finite cutoff (PR #1392).\n - `igraph_count_multiple()` was giving incorrect results for self-loops in directed graph (PR #1399).\n - `igraph_eigen_matrix_symmetric()`: fixed incorrect matrix multiplication (PR #1379).\n - Corrected several issues that could arise during an error condition (PRs #1405, #1406, #1438).\n - `igraph_realize_degree_sequence()` did not correctly detect some non-graphical inputs.\n - `igraph_is_graphical_degree_sequence()`: fixed incorrect results in undirected case (PR #1441).\n - `igraph_community_leiden()`: fixed incorrect result when self-loops are present (PR #1476).\n - `igraph_eigenvector_centrality()`: fixed incorrect value for isolated vertices in weighted graphs.\n - `igraph_eigenvector_centrality()`: corrected the handling of self-loops.\n - `igraph_layout_reingold_tilford()`: fixed an issue where branches of the tree would sometimes overlap.\n\n### Other\n\n - `igraph_degree_sequence_game()`: improved performance with `IGRAPH_DEGSEQ_SIMPLE_NO_MULTIPLE_UNIFORM` method.\n - Improved the robustness of the test suite.\n - Documentation improvements.\n - Improved error and warning messages.\n - Improved compatibility with recent versions of Microsoft Visual C.\n\n## [0.8.2] - 2020-04-28\n\n### Changed\n\n - Improved argument checking: `igraph_all_st_mincuts()` and `igraph_sir()`\n - Improved interruptibility: `igraph_sir()`\n\n### Fixed\n\n - `igraph_community_leiden()`: fixed crash when interrupting\n - The tests are now more robust. Some incorrect test failures were fixed when\n   running on i386 architecture, or when using different versions of external\n   dependencies.\n\n### Other\n\n - Improved error messages from `igraph_sir()`.\n - Improved compatibility with more recent versions of Microsoft Visual C.\n\n## [0.8.1] - 2020-03-13\n\n### Changed\n\n - Improved interruptability: `igraph_degree_sequence_game()`\n - Improved argument checking: `igraph_forest_fire_game()`\n - Updated the plfit library to version 0.8.1\n\n### Fixed\n\n - `igraph_community_edge_betweenness()`: fix for graphs with no edges (PR #1312)\n - `igraph_bridges()` now handles multigraphs correctly (PR #1335)\n - `igraph_avg_nearest_neighbor_degree()`: fix for memory leak in weighted case (PR #1339)\n - `igraph_community_leiden()`: fix crash bug (PR #1357)\n\n### Other\n\n - Included `ACKOWLEDGEMENTS.md`\n - Documentation improvements\n\n## [0.8.0] - 2020-01-29\n\n### Added\n\n * Trees\n\n   - `igraph_to_prufer()` and `igraph_from_prufer()` convert labelled trees to/from Prüfer sequences\n   - `igraph_tree_game()` samples uniformly from the set of labelled trees\n   - `igraph_is_tree()` checks if a graph is a tree\n   - `igraph_random_spanning_tree()` picks a spanning tree of a graph uniformly at random\n   - `igraph_random_edge_walk()` returns the indices of edges traversed by a random walk; useful for multigraphs\n\n * Community detection\n\n   - `igraph_community_fluid_communities()` detects communities based on interacting fluids\n   - `igraph_community_leiden()` detects communities with the Leiden method\n\n * Cliques\n\n   - `igraph_maximal_cliques_hist()` counts maximal cliques of each size\n   - `igraph_maximal_cliques_callback()` calls a function for each maximal clique\n   - `igraph_clique_size_hist()` counts cliques of each size\n   - `igraph_cliques_callback()` calls a function for each clique\n   - `igraph_weighted_cliques()` finds weighted cliques in graphs with integer vertex weights\n   - `igraph_weighted_clique_number()` computes the weighted clique number\n   - `igraph_largest_weighted_cliques()` finds the largest weighted cliques\n\n * Graph generators\n\n   - `igraph_hsbm_game()` for a hierarchical stochastic block model\n   - `igraph_hsbm_list_game()` for a more general hierarchical stochastic block model\n   - `igraph_correlated_game()` generates pairs of correlated random graphs by perturbing existing adjacency matrix\n   - `igraph_correlated_pair_game()` generates pairs of correlated random graphs\n   - `igraph_tree_game()` samples uniformly from the set of labelled trees\n   - `igraph_dot_product_game()` generates a random dot product graph\n   - `igraph_realize_degree_sequence()` creates a single graph with a given degree sequence (Havel-Hakimi algorithm)\n\n * Graph embeddings\n\n   - `igraph_adjacency_spectral_embedding()` and `igraph_laplacian_spectral_embedding()` provide graph embedddings\n   - `igraph_dim_select()` provides dimensionality selection for singular values using profile likelihood\n\n * Isomorphism\n\n   - `igraph_automorphism_group()` computes the generators of the automorphism group of a simple graph\n   - `igraph_simplify_and_colorize()` encodes edge and self-loop multiplicities into edge and vertex colors; use in conjunction with VF2 to test isomorphism of non-simple graphs\n\n * Other\n\n   - `igraph_bridges()` finds edges whose removal would disconnect a graph\n   - `igraph_vertex_coloring_greedy()` computes a vertex coloring using a greedy algorithm\n   - `igraph_rewire_directed_edges()` randomly rewires only the starting points or only the endpoints of directed edges\n   - Various `igraph_local_scan_*` functions provide local counts and statistics of neighborhoods\n   - `igraph_sample_sphere_surface()` samples points uniformly from the surface of a sphere\n   - `igraph_sample_sphere_volume()` samples points uniformly from the volume of a sphere\n   - `igraph_sample_dirichlet()` samples points from a Dirichlet distribution\n   - `igraph_malloc()`, to be paired with the existing `igraph_free()`\n\n### Changed\n\n - `igraph_degree_sequence_game()`: new method added for uniform sampling: `IGRAPH_DEGSEQ_SIMPLE_NO_MULTIPLE_UNIFORM`\n - `igraph_modularity_matrix()`: removed `membership` argument (PR #1194)\n - `igraph_avg_nearest_neighbor_degree()`: added `mode` and `neighbor_degree_mode` arguments (PR #1214).\n - `igraph_get_all_simple_paths()`: added `cutoff` argument (PR #1232).\n - `igraph_unfold_tree()`: no longer preserves edge ordering of original graph\n - `igraph_decompose()`: support strongly connected components\n - `igraph_isomorphic_bliss()`, `igraph_canonical_permutation()`, `igraph_automorphisms()`: added additional arguments to support vertex colored graphs (PR #873)\n - `igraph_extended_chordal_ring`: added argument to support direction (PR #1096), and fixed issue #1093.\n\n### Other\n\n - The [Bliss isomorphism library](http://www.tcs.hut.fi/Software/bliss/) was updated to version 0.73. This version adds support for vertex colored and directed graphs.\n - igraph now uses the high-performance [Cliquer library](https://users.aalto.fi/~pat/cliquer.html) to find (non-maximal) cliques\n - Provide proper support for Windows, using `__declspec(dllexport)` and `__declspec(dllimport)` for `DLL`s and static usage by using `#define IGRAPH_STATIC 1`.\n - Provided integer versions of `dqueue` and `stack` data types.\n\n[master]: https://github.com/igraph/igraph/compare/0.10.15..master\n[0.10.15]: https://github.com/igraph/igraph/compare/0.10.13..0.10.15\n[0.10.13]: https://github.com/igraph/igraph/compare/0.10.12..0.10.13\n[0.10.12]: https://github.com/igraph/igraph/compare/0.10.11..0.10.12\n[0.10.11]: https://github.com/igraph/igraph/compare/0.10.10..0.10.11\n[0.10.10]: https://github.com/igraph/igraph/compare/0.10.9..0.10.10\n[0.10.9]: https://github.com/igraph/igraph/compare/0.10.8..0.10.9\n[0.10.8]: https://github.com/igraph/igraph/compare/0.10.7..0.10.8\n[0.10.7]: https://github.com/igraph/igraph/compare/0.10.6..0.10.7\n[0.10.6]: https://github.com/igraph/igraph/compare/0.10.5..0.10.6\n[0.10.5]: https://github.com/igraph/igraph/compare/0.10.4..0.10.5\n[0.10.4]: https://github.com/igraph/igraph/compare/0.10.3..0.10.4\n[0.10.3]: https://github.com/igraph/igraph/compare/0.10.2..0.10.3\n[0.10.2]: https://github.com/igraph/igraph/compare/0.10.1..0.10.2\n[0.10.1]: https://github.com/igraph/igraph/compare/0.10.0..0.10.1\n[0.10.0]: https://github.com/igraph/igraph/compare/0.9.10..0.10.0\n[0.9.10]: https://github.com/igraph/igraph/compare/0.9.9...0.9.10\n[0.9.9]: https://github.com/igraph/igraph/compare/0.9.8...0.9.9\n[0.9.8]: https://github.com/igraph/igraph/compare/0.9.7...0.9.8\n[0.9.7]: https://github.com/igraph/igraph/compare/0.9.6...0.9.7\n[0.9.6]: https://github.com/igraph/igraph/compare/0.9.5...0.9.6\n[0.9.5]: https://github.com/igraph/igraph/compare/0.9.4...0.9.5\n[0.9.4]: https://github.com/igraph/igraph/compare/0.9.3...0.9.4\n[0.9.3]: https://github.com/igraph/igraph/compare/0.9.2...0.9.3\n[0.9.2]: https://github.com/igraph/igraph/compare/0.9.1...0.9.2\n[0.9.1]: https://github.com/igraph/igraph/compare/0.9.0...0.9.1\n[0.9.0]: https://github.com/igraph/igraph/compare/0.8.5...0.9.0\n[0.8.5]: https://github.com/igraph/igraph/compare/0.8.4...0.8.5\n[0.8.4]: https://github.com/igraph/igraph/compare/0.8.3...0.8.4\n[0.8.3]: https://github.com/igraph/igraph/compare/0.8.2...0.8.3\n[0.8.2]: https://github.com/igraph/igraph/compare/0.8.1...0.8.2\n[0.8.1]: https://github.com/igraph/igraph/compare/0.8.0...0.8.1\n[0.8.0]: https://github.com/igraph/igraph/releases/tag/0.8.0\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 1.5888671875,
          "content": "# This CITATION.cff file was generated with cffinit.\n# Visit https://bit.ly/cffinit to generate yours today!\n\ncff-version: 1.2.0\ntitle: igraph\nmessage: >-\n  If you use igraph, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: Gábor\n    family-names: Csárdi\n    orcid: 'https://orcid.org/0000-0001-7098-9676'\n  - given-names: Tamás\n    family-names: Nepusz\n    orcid: 'https://orcid.org/0000-0002-1451-338X'\n  - given-names: Szabolcs\n    family-names: Horvát\n    orcid: 'https://orcid.org/0000-0002-3100-523X'\n  - given-names: Vincent Antonio\n    family-names: Traag\n    orcid: 'https://orcid.org/0000-0003-3170-3879'\n  - given-names: Fabio\n    family-names: Zanini\n    orcid: 'https://orcid.org/0000-0001-7097-8539'\n  - given-names: Daniel\n    family-names: Noom\nidentifiers:\n  - type: doi\n    value: 10.5281/zenodo.3630268\n    description: Zenodo\nrepository-code: 'https://github.com/igraph/igraph'\nurl: 'https://igraph.org'\nabstract: >-\n  igraph is a C library for complex network analysis and\n  graph theory, with emphasis on efficiency, portability and\n  ease of use.\nkeywords:\n  - network analysis\n  - graph theory\nlicense: GPL-2.0-or-later\npreferred-citation:\n  type: article\n  authors:\n    - given-names: Gábor\n      family-names: Csárdi\n      orcid: 'https://orcid.org/0000-0001-7098-9676'\n    - given-names: Tamás\n      family-names: Nepusz\n      orcid: 'https://orcid.org/0000-0002-1451-338X'\n  journal: \"InterJournal, Complex Systems\"\n  start: 1695 # First page number\n  title: \"The igraph software package for complex network research\"\n  year: 2006\n  type: article\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.693359375,
          "content": "# Minimum CMake that we require is 3.18.\n# Some of the recent features we use:\n#  * --ignore-eol when comparing unit test results with expected outcomes (3.14)\n#  * CROSSCOMPILING_EMULATOR can be a semicolon-separated list to pass arguments (3.15)\n#  * SKIP_REGULAR_EXPRESSION to handle skipped tests properly (3.16)\n#  * CheckLinkerFlag for HAVE_NEW_DTAGS test (3.18)\n#  * cmake -E cat (3.18)\ncmake_minimum_required(VERSION 3.18...3.31)\n\n# CMake 3.31.0 issues warnings due to the following bug:\n# https://gitlab.kitware.com/cmake/cmake/-/issues/26449\n# Setting policy CMP0175 to OLD avoids the warnings.\nif(CMAKE_VERSION VERSION_EQUAL \"3.31.0\")\n  cmake_policy(SET CMP0175 OLD)\nendif()\n\n# Add etc/cmake to CMake's search path so we can put our private stuff there\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/etc/cmake)\n\n# Set a default build type if none was specified\n# This must precede the project() line, which would set the CMAKE_BUILD_TYPE\n# to 'Debug' with single-config generators on Windows.\n# Note that we must do this only if PROJECT_NAME is not set at this point. If\n# it is set, it means that igraph is being used as a subproject of another\n# project.\nif(NOT PROJECT_NAME)\n  include(BuildType)\nendif()\n\n# Prevent in-source builds\ninclude(PreventInSourceBuilds)\n\n# Make use of ccache if it is present on the host system -- unless explicitly\n# asked to disable it\ninclude(UseCCacheWhenInstalled)\n\n# Figure out the version number from Git\ninclude(version)\n\n# Declare the project, its version number and language\nproject(\n  igraph\n  VERSION ${PACKAGE_VERSION_BASE}\n  DESCRIPTION \"A library for creating and manipulating graphs\"\n  HOMEPAGE_URL https://igraph.org\n  LANGUAGES C CXX\n)\n\n# Include some compiler-related helpers and set global compiler options\ninclude(compilers)\n\n# Detect is certain attributes are supported by the compiler\ninclude(attribute_support)\n\n# Set default symbol visibility to hidden\nset(CMAKE_C_VISIBILITY_PRESET hidden)\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\n\n# Set C and C++ standard version\nset(CMAKE_C_STANDARD 99)\nset(CMAKE_C_STANDARD_REQUIRED True)\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\n\n# Expose the BUILD_SHARED_LIBS option in the ccmake UI\noption(BUILD_SHARED_LIBS \"Build shared libraries\" OFF)\n\n# Add switches to use sanitizers and debugging helpers if needed\ninclude(debugging)\ninclude(sanitizers)\n\n# Enable fuzzer instrumentation if needed\n# FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION is a conventional\n# macro used to adapt code for fuzzability, for example by\n# reducing largest allowed graph sizes when reading various\n# file formats.\nif(BUILD_FUZZING)\n  add_compile_options(-fsanitize=fuzzer-no-link)\n  add_compile_definitions(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)\nendif()\n\n# Add version information\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/igraph_version.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/include/igraph_version.h\n)\n\n# Create configuration options for optional features\ninclude(features)\n\n# Handle dependencies and dependency-related configuration options\ninclude(dependencies)\nfind_dependencies()\n\n# Run compile-time checks, generate config.h and igraph_threading.h\ninclude(CheckSymbolExists)\ninclude(CheckIncludeFiles)\ninclude(CMakePushCheckState)\n\n# First we check for some functions and symbols\ncmake_push_check_state()\nif(NEED_LINKING_AGAINST_LIBM)\n  list(APPEND CMAKE_REQUIRED_LIBRARIES m)\nendif()\ncheck_symbol_exists(strcasecmp strings.h HAVE_STRCASECMP)\ncheck_symbol_exists(strncasecmp strings.h HAVE_STRNCASECMP)\ncheck_symbol_exists(_stricmp string.h HAVE__STRICMP)\ncheck_symbol_exists(_strnicmp string.h HAVE__STRNICMP)\ncheck_symbol_exists(strdup string.h HAVE_STRDUP)\ncheck_symbol_exists(strndup string.h HAVE_STRNDUP)\ncheck_include_files(xlocale.h HAVE_XLOCALE)\nif(HAVE_XLOCALE)\n  # On BSD, uselocale() is in xlocale.h instead of locale.h.\n  # Some systems provide xlocale.h, but uselocale() is still in locale.h,\n  # thus we try both.\n  check_symbol_exists(uselocale \"xlocale.h;locale.h\" HAVE_USELOCALE)\nelse()\n  check_symbol_exists(uselocale locale.h HAVE_USELOCALE)\nendif()\ncheck_symbol_exists(_configthreadlocale locale.h HAVE__CONFIGTHREADLOCALE)\ncmake_pop_check_state()\n\n# Check for 128-bit integer multiplication support, floating-point endianness,\n# support for built-in overflow detection and fast bit operation support.\ninclude(ieee754_endianness)\ninclude(uint128_support)\ninclude(bit_operations_support)\ninclude(safe_math_support)\n\nif(NOT HAVE_USELOCALE AND NOT HAVE__CONFIGTHREADLOCALE)\n  message(WARNING \"igraph cannot set per-thread locale on this platform. igraph_enter_safelocale() and igraph_exit_safelocale() will not be safe to use in multithreaded programs.\")\nendif()\n\n# Check for code coverage support\noption(IGRAPH_ENABLE_CODE_COVERAGE \"Enable code coverage calculation\" OFF)\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND IGRAPH_ENABLE_CODE_COVERAGE)\n  include(CodeCoverage)\n  append_coverage_compiler_flags()\n  setup_target_for_coverage_lcov(\n    NAME coverage\n    EXECUTABLE \"${CMAKE_COMMAND}\" \"--build\" \"${PROJECT_BINARY_DIR}\" \"--target\" \"check\"\n    # Generated files are excluded; apparently the CodeCoverage script has some\n    # problems with them. Yes, the exclusion is correct, it refers to a nonexistent\n    # directory that somehow gets into the coverage results. /Applications and\n    # /Library/Developer are for macOS -- they exclude files from the macOS SDK.\n    EXCLUDE \"src/io/parsers/*\" \"io/parsers/*\" \"/Applications/Xcode*\" \"/Library/Developer/*\" \"examples/*\" \"interfaces/*\" \"tests/*\" \"vendor/pcg/*\"\n  )\nendif()\n\n# Generate configuration headers\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/src/config.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/src/config.h\n)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/igraph_config.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/include/igraph_config.h\n)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/igraph_threading.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/include/igraph_threading.h\n)\n\n# Enable unit tests. Behave nicely and do this only if we are not being\n# included as a sub-project in another CMake project\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n  include(CTest)\nendif()\n\n# Traverse subdirectories. vendor/ should come first because code in\n# src/CMakeLists.txt depends on targets in vendor/\nadd_subdirectory(vendor)\nadd_subdirectory(src)\nadd_subdirectory(interfaces)\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING)\n  add_subdirectory(tests)\nendif()\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_FUZZING)\n  add_subdirectory(fuzzing)\nendif()\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n  add_subdirectory(doc)\nendif()\n\n# Configure packaging -- only if igraph is the top-level project and not a\n# subproject\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n  include(packaging)\nendif()\n\n# Show result of configuration\ninclude(summary)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 11.1376953125,
          "content": "# Contributing to this project\n\nThank you for being interested in contributing to `igraph`! We need the help of\nvolunteers to keep the package going, so every little bit is welcome. You can help out\nthe project in several different ways.\n\nThis repository only hosts the C code of the `igraph` project. Even if you are not so\nexperienced with C, you can contribute in a number of ways:\n\n1. Respond to user questions on our [support forum](https://igraph.discourse.group/).\n2. Correct or improve our [documentation](https://igraph.org/c/html/latest/).\n3. Go over [open issues](https://github.com/igraph/igraph/issues):\n   - Are some older issues still relevant in the most recent version? If not, write a\n     comment to the issue stating that you feel that the issue is not relevant any more.\n   - Can you reproduce some of the bugs that are reported? If so, write a comment to\n     the issue stating that this is still a problem in version X.\n   - Some [issues point out problems with the documentation](https://github.com/igraph/igraph/labels/documentation);\n     perhaps you could help correct these?\n   - Some [issues require clarifying a mathematical problem, or some literature research](https://github.com/igraph/igraph/labels/theory),\n     before any programming can begin. Can you contribute through your theoretical expertise?\n   - Looking to contribute code? Take a look at some [good first issues](https://github.com/igraph/igraph/labels/good%20first%20issue).\n\n## Using the issue tracker\n\n- The issue tracker is the preferred channel for [bug reports](#bugs),\n  [feature requests](#features) and [submitting pull requests](#pull-requests).\n\n- Do you have a question? Please use our [igraph support forum](https://igraph.discourse.group)\n  for support requests.\n\n- Please keep the discussion on topic and respect the opinions of others, and\n  adhere to our [Code of Conduct](https://igraph.org/code-of-conduct.html).\n\n<a name=\"bugs\"></a>\n## Bug reports\n\nA bug is a _demonstrable problem_ that is caused by the code in the repository.\nGood bug reports are extremely helpful &mdash; thank you for reporting!\n\nGuidelines for bug reports:\n\n1. **Make sure that the bug is in the C code of igraph and not in one of the\n   higher level interfaces** &mdash; if you are using igraph from R, Python\n   or Mathematica, consider submitting your issue in\n   [igraph/rigraph](https://github.com/igraph/rigraph/issues/new),\n   [igraph/python-igraph](https://github.com/igraph/python-igraph/issues/new)\n   or [szhorvat/IGraphM](https://github.com/szhorvat/IGraphM/issues/new)\n   instead. If you are unsure whether your issue is in the C layer, submit\n   a bug report in the repository of the higher level interface &mdash;\n   we will transfer the issue here if it indeed affects the C layer.\n\n2. **Use the GitHub issue search** &mdash; check if the issue has already been\n   reported.\n\n3. **Check if the issue has been fixed** &mdash; try to reproduce it using the\n   latest `master` or development branch in the repository.\n\n4. **Isolate the problem** &mdash; create a [short, self-contained, correct\n   example](http://sscce.org/).\n\nPlease try to be as detailed as possible in your report and provide all\nnecessary information. What is your environment? What steps will reproduce the\nissue? What would you expect to be the outcome? All these details will help us\nto fix any potential bugs.\n\nExample:\n\n> Short and descriptive example bug report title\n>\n> A summary of the issue and the compiler/OS environment in which it occurs. If\n> suitable, include the steps required to reproduce the bug.\n>\n> 1. This is the first step\n> 2. This is the second step\n> 3. Further steps, etc.\n>\n> `<url>` - a link to the reduced test case\n>\n> Any other information you want to share that is relevant to the issue being\n> reported. This might include the lines of code that you have identified as\n> causing the bug, and potential solutions (and your opinions on their\n> merits).\n\n\n<a name=\"features\"></a>\n## Feature requests\n\nFeature requests are always welcome. First, take a moment to find out whether your\nidea fits with the scope and aims of the project. Please provide as much detail\nand context as possible, and where possible, references to relevant literature.\nHaving said that, implementing new features can be quite time consuming, and as\nsuch they might not be implemented quickly. In addition, the development team\nmight decide not to implement a certain feature. It is up to you to make a case\nto convince the project's developers of the merits of this feature.\n\n<a name=\"pull-requests\"></a>\n## Pull requests\n\n_**Note:** The wiki has a lot of useful information for newcomers, as well as a\n[quick start guide](https://github.com/igraph/igraph/wiki/Quickstart-for-new-contributors)!_\n\nGood pull requests - patches, improvements, new features - are a fantastic help.\nThey should remain focused in scope and avoid containing unrelated commits.\nPlease also take a look at our [tips on writing igraph code](#tips) before\ngetting your hands dirty.\n\n**Please ask first** before embarking on any significant pull request (e.g.\nimplementing features, refactoring code, porting to a different language),\notherwise you risk spending a lot of time working on something that the\nproject's developers might not want to merge into the project.\n\nPlease adhere to the coding conventions used throughout a project (indentation,\naccurate comments, etc.) and any other requirements (such as test coverage).\n\nFollow the following steps if you would like to make a new pull request:\n\n1. [Fork](http://help.github.com/fork-a-repo/) the project, clone your fork,\n   and configure the remotes:\n\n   ```bash\n   # Clone your fork of the repo into the current directory\n   git clone https://github.com/<your-username>/<repo-name>\n   # Navigate to the newly cloned directory\n   cd <repo-name>\n   # Assign the original repo to a remote called \"upstream\"\n   git remote add upstream https://github.com/<upstream-owner>/<repo-name>\n   ```\n\n2. Please checkout the section on [branching](#branching) to see whether you\n   need to branch off from the `master` branch or the `develop` branch.\n\n   If you cloned a while ago, get the latest changes from upstream:\n\n   ```bash\n   git checkout <dev-branch>\n   git pull --rebase upstream <dev-branch>\n   ```\n\n3. Create a new topic branch (off the targeted branch, see\n   [branching](#branching) section) to contain your feature, change, or fix:\n\n   ```bash\n   git checkout -b <topic-branch-name>\n   ```\n\n4. Please commit your changes in logical chunks, and try to provide clear commit\n   messages. It helps us during the review process if we can follow your thought\n   process during the implementation. If you hit a dead end, use `git revert`\n   to revert your commits or just go back to an earlier commit with `git checkout`\n   and continue your work from there.\n\n5. We have a [checklist for new igraph functions](https://github.com/igraph/igraph/wiki/Checklist-for-new-(and-old)-functions).\n   If you have added any new functions to igraph, please go through the\n   checklist to ensure that your functions play nicely with the rest of the\n   library.\n\n6. Make sure that your PR is based off the latest code and locally merge (or\n   rebase) the upstream development branch into your topic branch:\n\n   ```bash\n   git pull [--rebase] upstream <dev-branch>\n   ```\n\n   Rebasing is preferable over merging as you do not need to deal with merge\n   conflicts; however, if you already have many commits, merging the upstream\n   development branch may be faster.\n\n7. WHen your topic branch is up-to-date with the upstream development branch, you can\n   push your topic branch up to your fork:\n\n   ```bash\n   git push origin <topic-branch-name>\n   ```\n\n8. [Open a pull request](https://help.github.com/articles/using-pull-requests/)\n    with a clear title and description.\n\n**IMPORTANT**: By submitting a pull request, you agree to allow the project\nowner to license your work under the same license as that used by the project,\nsee also [Legal Stuff](#legal).\n\n<a name=\"branching\"></a>\n### Branching\n\n`igraph` is committed to [semantic versioning](https://semver.org/). We are\ncurrently still in the development release (0.x), which in principle is a mark\nthat the public API is not yet stable. Regardless, we try to maintain semantic\nversioning also for the development releases. We do so as follows. Any released\nminor version (0.x.z) will be API backwards-compatible with any previous release\nof the *same* minor version (0.x.y, with y < z). This means that *if* there is\nan API incompatible change, we will increase the minor version. For example,\nrelease 0.8.1 is API backwards-compatible with release 0.8.0, while release\n0.9.0 might be API incompatible with version 0.8.1. Note that this only concerns\nthe *public* API, internal functions may change also within a minor version.\n\nThere will always be two versions of `igraph`: the most recent released version,\nand the next upcoming minor release, which is by definition not yet released.\nThe most recent release version is in the `master` branch, while the next\nupcoming minor release is in the `develop` branch. If you make a change that is\nAPI incompatible with the most recent release, it **must** be merged to\nthe `develop` branch. If the change is API backwards-compatible, it **can** be\nmerged to the `master` branch. It is possible that you build on recent\nimprovements in the `develop` branch, in which case your change should of course\ntarget the `develop` branch. If you only add new functionality, but do not\nchange anything of the existing API, this should be backwards-compatible, and\ncan be merged in the `master` branch.\n\nWhen you make a new pull request, please specify the correct target branch. The\nmaintainers of `igraph` may decide to retarget your pull request to the correct\nbranch. Retargeting you pull request may result in merge conflicts, so it is\nalways good to decide **before** starting to work on something whether you\nshould start from the `master` branch or from the `develop` branch. In most\ncases, changes in the `master` branch will also be merged to the `develop`\nbranch by the maintainers.\n\nIf you are unsure about the branch to target, open an issue about your proposed\nfeature and we can discuss the appropriate target branch in the issue before\nyou send a PR.\n\n<a name=\"tips\"></a>\n## Writing igraph Code\n\n[Some tips on writing igraph code](https://github.com/igraph/igraph/wiki/Tips-on-writing-igraph-code).\n\n## Ask Us!\n\nIn general, if you are not sure about something, please ask! You can\nopen an issue on GitHub, open a thread in our\n[igraph support forum](https://igraph.discourse.group), or write to\n[@ntamas](https://github.com/ntamas), [@vtraag](https://github.com/vtraag),\n[@szhorvat](https://github.com/szhorvat), [@iosonofabio](https://github.com/iosonofabio) or\n[@gaborcsardi](https://github.com/gaborcsardi).\nWe prefer open communication channels, because others can then learn from it\ntoo.\n\n<a name=\"legal\"></a>\n## Legal Stuff\n\nThis is a pain to deal with, but we can't avoid it, unfortunately.\n\n`igraph` is licensed under the \"General Public License (GPL) version 2, or\nlater\". The igraph manual is licensed under the \"GNU Free Documentation\nLicense\". By submitting a patch or pull request, you agree to allow the project\nowner to license your work under the same license as that used by the project.\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 22.7822265625,
          "content": "# Contributors ✨\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gaborcsardi\"><img src=\"https://avatars.githubusercontent.com/u/660288?v=4?s=100\" width=\"100px;\" alt=\"Gábor Csárdi\"/><br /><sub><b>Gábor Csárdi</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=gaborcsardi\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://collmot.com/\"><img src=\"https://avatars.githubusercontent.com/u/195637?v=4?s=100\" width=\"100px;\" alt=\"Tamás Nepusz\"/><br /><sub><b>Tamás Nepusz</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=ntamas\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://szhorvat.net/\"><img src=\"https://avatars.githubusercontent.com/u/1212871?v=4?s=100\" width=\"100px;\" alt=\"Szabolcs Horvát\"/><br /><sub><b>Szabolcs Horvát</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=szhorvat\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.traag.net/\"><img src=\"https://avatars.githubusercontent.com/u/6057804?v=4?s=100\" width=\"100px;\" alt=\"Vincent Traag\"/><br /><sub><b>Vincent Traag</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=vtraag\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GroteGnoom\"><img src=\"https://avatars.githubusercontent.com/u/8137208?v=4?s=100\" width=\"100px;\" alt=\"GroteGnoom\"/><br /><sub><b>GroteGnoom</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=GroteGnoom\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://fabilab.org/\"><img src=\"https://avatars.githubusercontent.com/u/1200640?v=4?s=100\" width=\"100px;\" alt=\"Fabio Zanini\"/><br /><sub><b>Fabio Zanini</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=iosonofabio\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.katzien.de/\"><img src=\"https://avatars.githubusercontent.com/u/890156?v=4?s=100\" width=\"100px;\" alt=\"Jan Katins\"/><br /><sub><b>Jan Katins</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=jankatins\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/adalisan\"><img src=\"https://avatars.githubusercontent.com/u/1790714?v=4?s=100\" width=\"100px;\" alt=\"Sancar Adali\"/><br /><sub><b>Sancar Adali</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=adalisan\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/FerranPares\"><img src=\"https://avatars.githubusercontent.com/u/9196604?v=4?s=100\" width=\"100px;\" alt=\"Ferran Parés\"/><br /><sub><b>Ferran Parés</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=FerranPares\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mvngu\"><img src=\"https://avatars.githubusercontent.com/u/362259?v=4?s=100\" width=\"100px;\" alt=\"mvngu\"/><br /><sub><b>mvngu</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=mvngu\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/das-intensity\"><img src=\"https://avatars.githubusercontent.com/u/12521554?v=4?s=100\" width=\"100px;\" alt=\"Dr. Nick\"/><br /><sub><b>Dr. Nick</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=das-intensity\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jannick0\"><img src=\"https://avatars.githubusercontent.com/u/6295579?v=4?s=100\" width=\"100px;\" alt=\"jannick0\"/><br /><sub><b>jannick0</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=jannick0\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.rezozer.net/\"><img src=\"https://avatars.githubusercontent.com/u/8476716?v=4?s=100\" width=\"100px;\" alt=\"Jérôme Benoit\"/><br /><sub><b>Jérôme Benoit</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=jgmbenoit\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/frederik-h\"><img src=\"https://avatars.githubusercontent.com/u/22046314?v=4?s=100\" width=\"100px;\" alt=\"Frederik Harwath\"/><br /><sub><b>Frederik Harwath</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=frederik-h\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://adalogics.com/\"><img src=\"https://avatars.githubusercontent.com/u/44787359?v=4?s=100\" width=\"100px;\" alt=\"AdamKorcz\"/><br /><sub><b>AdamKorcz</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=AdamKorcz\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/antonio-rojas\"><img src=\"https://avatars.githubusercontent.com/u/11243355?v=4?s=100\" width=\"100px;\" alt=\"Antonio Rojas\"/><br /><sub><b>Antonio Rojas</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=antonio-rojas\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://pyedu.hu/arpad/\"><img src=\"https://avatars.githubusercontent.com/u/951303?v=4?s=100\" width=\"100px;\" alt=\"Árpád Horváth\"/><br /><sub><b>Árpád Horváth</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=horvatha\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://finger-tree.blogspot.com/\"><img src=\"https://avatars.githubusercontent.com/u/406445?v=4?s=100\" width=\"100px;\" alt=\"Peter Scott\"/><br /><sub><b>Peter Scott</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=PeterScott\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/naviddianati\"><img src=\"https://avatars.githubusercontent.com/u/5558232?v=4?s=100\" width=\"100px;\" alt=\"Navid Dianati\"/><br /><sub><b>Navid Dianati</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=naviddianati\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/YasirKusay\"><img src=\"https://avatars.githubusercontent.com/u/59812220?v=4?s=100\" width=\"100px;\" alt=\"YasirKusay\"/><br /><sub><b>YasirKusay</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=YasirKusay\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://heal.heuristiclab.com/team/beham\"><img src=\"https://avatars.githubusercontent.com/u/5585242?v=4?s=100\" width=\"100px;\" alt=\"Andreas Beham\"/><br /><sub><b>Andreas Beham</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=abeham\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kasterma.net/\"><img src=\"https://avatars.githubusercontent.com/u/421437?v=4?s=100\" width=\"100px;\" alt=\"Bart Kastermans\"/><br /><sub><b>Bart Kastermans</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=kasterma\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/eriknwelch\"><img src=\"https://avatars.githubusercontent.com/u/2058401?v=4?s=100\" width=\"100px;\" alt=\"Erik Welch\"/><br /><sub><b>Erik Welch</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=eriknw\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.topbug.net/\"><img src=\"https://avatars.githubusercontent.com/u/325476?v=4?s=100\" width=\"100px;\" alt=\"Hong Xu\"/><br /><sub><b>Hong Xu</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=xuhdev\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Hosseinazari\"><img src=\"https://avatars.githubusercontent.com/u/971459?v=4?s=100\" width=\"100px;\" alt=\"Hosseinazari\"/><br /><sub><b>Hosseinazari</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=Hosseinazari\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jmonlong.github.io/\"><img src=\"https://avatars.githubusercontent.com/u/5704457?v=4?s=100\" width=\"100px;\" alt=\"Jean Monlong\"/><br /><sub><b>Jean Monlong</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=jmonlong\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Keivin98\"><img src=\"https://avatars.githubusercontent.com/u/31882637?v=4?s=100\" width=\"100px;\" alt=\"Keivin98\"/><br /><sub><b>Keivin98</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=Keivin98\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://araujo88.medium.com/\"><img src=\"https://avatars.githubusercontent.com/u/46436462?v=4?s=100\" width=\"100px;\" alt=\"Leonardo de Araujo\"/><br /><sub><b>Leonardo de Araujo</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=araujo88\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/msk\"><img src=\"https://avatars.githubusercontent.com/u/19195?v=4?s=100\" width=\"100px;\" alt=\"Min Kim\"/><br /><sub><b>Min Kim</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=msk\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/khitrin\"><img src=\"https://avatars.githubusercontent.com/u/25713847?v=4?s=100\" width=\"100px;\" alt=\"Nikolay Khitrin\"/><br /><sub><b>Nikolay Khitrin</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=khitrin\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/pschmied\"><img src=\"https://avatars.githubusercontent.com/u/1065905?v=4?s=100\" width=\"100px;\" alt=\"Peter Schmiedeskamp\"/><br /><sub><b>Peter Schmiedeskamp</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=pschmied\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://phil.red/\"><img src=\"https://avatars.githubusercontent.com/u/291575?v=4?s=100\" width=\"100px;\" alt=\"Philipp A.\"/><br /><sub><b>Philipp A.</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=flying-sheep\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/ramy-saied-0415b810b/\"><img src=\"https://avatars.githubusercontent.com/u/22375919?v=4?s=100\" width=\"100px;\" alt=\"Ramy Saied\"/><br /><sub><b>Ramy Saied</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=RamySaied1\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dotlambda\"><img src=\"https://avatars.githubusercontent.com/u/6806011?v=4?s=100\" width=\"100px;\" alt=\"Robert Schütz\"/><br /><sub><b>Robert Schütz</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=dotlambda\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ryanduffin\"><img src=\"https://avatars.githubusercontent.com/u/5711508?v=4?s=100\" width=\"100px;\" alt=\"Ryan Duffin\"/><br /><sub><b>Ryan Duffin</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=ryanduffin\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.shlomifish.org/\"><img src=\"https://avatars.githubusercontent.com/u/3150?v=4?s=100\" width=\"100px;\" alt=\"Shlomi Fish\"/><br /><sub><b>Shlomi Fish</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=shlomif\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kloczek\"><img src=\"https://avatars.githubusercontent.com/u/31284574?v=4?s=100\" width=\"100px;\" alt=\"Tomasz Kłoczko\"/><br /><sub><b>Tomasz Kłoczko</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=kloczek\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://heavywatal.github.io/\"><img src=\"https://avatars.githubusercontent.com/u/1431267?v=4?s=100\" width=\"100px;\" alt=\"Watal M. Iwasaki\"/><br /><sub><b>Watal M. Iwasaki</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=heavywatal\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nograpes\"><img src=\"https://avatars.githubusercontent.com/u/2967973?v=4?s=100\" width=\"100px;\" alt=\"Aman Verma\"/><br /><sub><b>Aman Verma</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=nograpes\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/guyroznb\"><img src=\"https://avatars.githubusercontent.com/u/55619320?v=4?s=100\" width=\"100px;\" alt=\"guy rozenberg\"/><br /><sub><b>guy rozenberg</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=guyroznb\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://linkedin.com/in/artemvl\"><img src=\"https://avatars.githubusercontent.com/u/6162969?v=4?s=100\" width=\"100px;\" alt=\"Artem V L\"/><br /><sub><b>Artem V L</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=luav\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Katterrina\"><img src=\"https://avatars.githubusercontent.com/u/31630249?v=4?s=100\" width=\"100px;\" alt=\"Kateřina Č.\"/><br /><sub><b>Kateřina Č.</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=Katterrina\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/valdaarhun\"><img src=\"https://avatars.githubusercontent.com/u/39989901?v=4?s=100\" width=\"100px;\" alt=\"valdaarhun\"/><br /><sub><b>valdaarhun</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=valdaarhun\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/YuliYudith\"><img src=\"https://avatars.githubusercontent.com/u/54366258?v=4?s=100\" width=\"100px;\" alt=\"YuliYudith\"/><br /><sub><b>YuliYudith</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=YuliYudith\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/alexsyou\"><img src=\"https://avatars.githubusercontent.com/u/54590871?v=4?s=100\" width=\"100px;\" alt=\"alexsyou\"/><br /><sub><b>alexsyou</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=alexsyou\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rohitt28\"><img src=\"https://avatars.githubusercontent.com/u/67415747?v=4?s=100\" width=\"100px;\" alt=\"Rohit Tawde\"/><br /><sub><b>Rohit Tawde</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=rohitt28\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/alexperrone\"><img src=\"https://avatars.githubusercontent.com/u/4990236?v=4?s=100\" width=\"100px;\" alt=\"alexperrone\"/><br /><sub><b>alexperrone</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=alexperrone\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/borsgeorgica\"><img src=\"https://avatars.githubusercontent.com/u/15649138?v=4?s=100\" width=\"100px;\" alt=\"Georgica Bors\"/><br /><sub><b>Georgica Bors</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=borsgeorgica\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/meet-patel-b1329a16b/\"><img src=\"https://avatars.githubusercontent.com/u/63169740?v=4?s=100\" width=\"100px;\" alt=\"MEET PATEL\"/><br /><sub><b>MEET PATEL</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=meetpatel0963\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kwofach\"><img src=\"https://avatars.githubusercontent.com/u/97578264?v=4?s=100\" width=\"100px;\" alt=\"kwofach\"/><br /><sub><b>kwofach</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=kwofach\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Gomango999\"><img src=\"https://avatars.githubusercontent.com/u/37771462?v=4?s=100\" width=\"100px;\" alt=\"Kevin Zhu\"/><br /><sub><b>Kevin Zhu</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=Gomango999\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/pradkrish\"><img src=\"https://avatars.githubusercontent.com/u/47261443?v=4?s=100\" width=\"100px;\" alt=\"Pradeep Krishnamurthy\"/><br /><sub><b>Pradeep Krishnamurthy</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=pradkrish\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/flange-ipb\"><img src=\"https://avatars.githubusercontent.com/u/34936695?v=4?s=100\" width=\"100px;\" alt=\"flange-ipb\"/><br /><sub><b>flange-ipb</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=flange-ipb\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://goo.gl/IlWG8U\"><img src=\"https://avatars.githubusercontent.com/u/500?v=4?s=100\" width=\"100px;\" alt=\"Juan Julián Merelo Guervós\"/><br /><sub><b>Juan Julián Merelo Guervós</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=JJ\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rfulekjames\"><img src=\"https://avatars.githubusercontent.com/u/54232342?v=4?s=100\" width=\"100px;\" alt=\"Radoslav Fulek\"/><br /><sub><b>Radoslav Fulek</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=rfulekjames\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/professorcode1\"><img src=\"https://avatars.githubusercontent.com/u/42749164?v=4?s=100\" width=\"100px;\" alt=\"professorcode1\"/><br /><sub><b>professorcode1</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=professorcode1\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/larah19\"><img src=\"https://avatars.githubusercontent.com/u/54937363?v=4?s=100\" width=\"100px;\" alt=\"larah19\"/><br /><sub><b>larah19</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=larah19\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Biswa96\"><img src=\"https://avatars.githubusercontent.com/u/31443074?v=4?s=100\" width=\"100px;\" alt=\"Biswapriyo Nath\"/><br /><sub><b>Biswapriyo Nath</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=Biswa96\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://cecinestpasunefromage.wordpress.com/\"><img src=\"https://avatars.githubusercontent.com/u/2363820?v=4?s=100\" width=\"100px;\" alt=\"Gwyn Ciesla\"/><br /><sub><b>Gwyn Ciesla</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=limburgher\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/aagon\"><img src=\"https://avatars.githubusercontent.com/u/10883752?v=4?s=100\" width=\"100px;\" alt=\"aagon\"/><br /><sub><b>aagon</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=aagon\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GanzuraTheConsumer\"><img src=\"https://avatars.githubusercontent.com/u/19657136?v=4?s=100\" width=\"100px;\" alt=\"Quinn Buratynski\"/><br /><sub><b>Quinn Buratynski</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=GanzuraTheConsumer\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Tagl\"><img src=\"https://avatars.githubusercontent.com/u/7704746?v=4?s=100\" width=\"100px;\" alt=\"Arnar Bjarni Arnarson\"/><br /><sub><b>Arnar Bjarni Arnarson</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=Tagl\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SoapGentoo\"><img src=\"https://avatars.githubusercontent.com/u/16636962?v=4?s=100\" width=\"100px;\" alt=\"David Seifert\"/><br /><sub><b>David Seifert</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=SoapGentoo\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://fosstodon.org/@kirill\"><img src=\"https://avatars.githubusercontent.com/u/1741643?v=4?s=100\" width=\"100px;\" alt=\"Kirill Müller\"/><br /><sub><b>Kirill Müller</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=krlmlr\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gendelpiekel\"><img src=\"https://avatars.githubusercontent.com/u/14215028?v=4?s=100\" width=\"100px;\" alt=\"Michael\"/><br /><sub><b>Michael</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=gendelpiekel\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GenieTim\"><img src=\"https://avatars.githubusercontent.com/u/8596965?v=4?s=100\" width=\"100px;\" alt=\"Tim Bernhard\"/><br /><sub><b>Tim Bernhard</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=GenieTim\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://masalmon.eu/\"><img src=\"https://avatars.githubusercontent.com/u/8360597?v=4?s=100\" width=\"100px;\" alt=\"Maëlle Salmon\"/><br /><sub><b>Maëlle Salmon</b></sub></a><br /><a href=\"https://github.com/igraph/igraph/commits?author=maelle\" title=\"Code\">💻</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n"
        },
        {
          "name": "CONTRIBUTORS.txt",
          "type": "blob",
          "size": 1.9716796875,
          "content": "Thanks goes to these wonderful people:\n\nGábor Csárdi (@gaborcsardi)\nTamás Nepusz (@ntamas)\nSzabolcs Horvát (@szhorvat)\nVincent Traag (@vtraag)\nGroteGnoom (@GroteGnoom)\nFabio Zanini (@iosonofabio)\nJan Katins (@jankatins)\nSancar Adali (@adalisan)\nFerran Parés (@FerranPares)\nmvngu (@mvngu)\nDr. Nick (@das-intensity)\njannick0 (@jannick0)\nJérôme Benoit (@jgmbenoit)\nFrederik Harwath (@frederik-h)\nAdamKorcz (@AdamKorcz)\nAntonio Rojas (@antonio-rojas)\nÁrpád Horváth (@horvatha)\nPeter Scott (@PeterScott)\nNavid Dianati (@naviddianati)\nYasirKusay (@YasirKusay)\nAndreas Beham (@abeham)\nBart Kastermans (@kasterma)\nErik Welch (@eriknw)\nHong Xu (@xuhdev)\nHosseinazari (@Hosseinazari)\nJean Monlong (@jmonlong)\nKeivin98 (@Keivin98)\nLeonardo de Araujo (@araujo88)\nMin Kim (@msk)\nNikolay Khitrin (@khitrin)\nPeter Schmiedeskamp (@pschmied)\nPhilipp A. (@flying-sheep)\nRamy Saied (@RamySaied1)\nRobert Schütz (@dotlambda)\nRyan Duffin (@ryanduffin)\nShlomi Fish (@shlomif)\nTomasz Kłoczko (@kloczek)\nWatal M. Iwasaki (@heavywatal)\nAman Verma (@nograpes)\nguy rozenberg (@guyroznb)\nArtem V L (@luav)\nKateřina Č. (@Katterrina)\nvaldaarhun (@valdaarhun)\nYuliYudith (@YuliYudith)\nalexsyou (@alexsyou)\nRohit Tawde (@rohitt28)\nalexperrone (@alexperrone)\nGeorgica Bors (@borsgeorgica)\nMEET PATEL (@meetpatel0963)\nkwofach (@kwofach)\nKevin Zhu (@Gomango999)\nPradeep Krishnamurthy (@pradkrish)\nflange-ipb (@flange-ipb)\nJuan Julián Merelo Guervós (@JJ)\nRadoslav Fulek (@rfulekjames)\nprofessorcode1 (@professorcode1)\nlarah19 (@larah19)\nBiswapriyo Nath (@Biswa96)\nGwyn Ciesla (@limburgher)\naagon (@aagon)\nQuinn Buratynski (@GanzuraTheConsumer)\nArnar Bjarni Arnarson (@Tagl)\nDavid Seifert (@SoapGentoo)\nKirill Müller (@krlmlr)\nMichael (@gendelpiekel)\nTim Bernhard (@GenieTim)\nMaëlle Salmon (@maelle)\n\nThis project follows the [all-contributors][1] specification. Contributions of any kind welcome!\n\nThis file is an automatically generated, plain-text version of CONTRIBUTORS.md.\n\n[1]: https://github.com/all-contributors/all-contributors\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.583984375,
          "content": "\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n                       51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Library General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\t    How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Library General\nPublic License instead of this License.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 0.0556640625,
          "content": "See CHANGELOG.md for a list of changes between versions.\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.2578125,
          "content": "Instructions for installation are provided in Chapter 2 of the manual; see\n`doc/html` in the distributed tarball.\n\nAn online version of the installation instructions for the most recent version\ncan be found here:\n\nhttps://igraph.org/c/doc/igraph-Installation.html\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 0.203125,
          "content": "News about each release of igraph from version 0.8 onwards can be found in\nCHANGELOG.md.\n\nArchived news items before version 0.7 are to be found in ONEWS -- these are\nmost likely of historical interest only.\n"
        },
        {
          "name": "ONEWS",
          "type": "blob",
          "size": 61.296875,
          "content": "\nigraph 0.6.5\n============\n\nReleased February 24, 2013\n\nThe version number is not a mistake, we jump to 0.6.5 from 0.6,\nfor technical reasons.\n\nR: new features and bug fixes\n-----------------------------\n\n- Added a vertex shape API for defining new vertex shapes, and also\n  a couple of new vertex shapes.\n- Added the get.data.frame() function, opposite of graph.data.frame().\n- Added bipartite support to the Pajek reader and writer, closes bug\n  \\#1042298.\n- `degree.sequence.game()` has a new method now: \"simple_no_multiple\".\n- Added the is.degree.sequence() and is.graphical.degree.sequence()\n  functions.\n- rewire() has a new method: \"loops\", that can create loop edges.\n- Walktrap community detection now handles isolates.\n- layout.mds() returns a layout matrix now.\n- layout.mds() uses LAPACK instead of ARPACK.\n- Handle the '~' character in write.graph and read.graph. Bug\n  \\#1066986.\n- Added k.regular.game().\n- Use vertex names to plot if no labels are specified in the function\n  call or as vetex attributes. Fixes issue \\#1085431.\n- power.law.fit() can now use a C implementation.\n\n- Fixed a bug in barabasi.game() when out.seq was an empty vector.\n- Fixed a bug that made functions with a progress bar fail if called\n  from another package.\n- Fixed a bug when creating graphs from a weighted integer adjacency\n  matrix via graph.adjacency(). Bug \\#1019624.\n- Fixed overflow issues in centralization calculations.\n- Fixed a minimal.st.separators() bug, some vertex sets were incorrectly\n  reported as separators. Bug \\#1033045.\n- Fixed a bug that mishandled vertex colors in VF2 isomorphism\n  functions. Bug \\#1032819.\n- Pajek exporter now always quotes strings, thanks to Elena Tea Russo.\n- Fixed a bug with handling small edge weights in shortest paths\n  calculation in shortest.paths() (Dijkstra's algorithm.) Thanks to\n  Martin J Reed.\n- Weighted transitivity uses V(graph) as 'vids' if it is NULL.\n- Fixed a bug when 'pie' vertices were drawn together with other\n  vertex shapes.\n- Speed up printing graphs.\n- Speed up attribute queries and other basic operations, by avoiding\n  copying of the graph. Bug \\#1043616.\n- Fixed a bug in the NCV setting for ARPACK functions. It cannot be\n  bigger than the matrix size.\n- layout.merge()'s DLA mode has better defaults now.\n- Fixed a bug in layout.mds() that resulted vertices on top of each\n  other.\n- Fixed a bug in layout.spring(), it was not working properly.\n- Fixed layout.svd(), which was completely defunct.\n- Fixed a bug in layout.graphopt() that caused warnings and on\n  some platforms crashes.\n- Fixed community.to.membership(). Bug \\#1022850.\n- Fixed a graph.incidence() crash if it was called with a non-matrix\n  argument.\n- Fixed a get.shortest.paths bug, when output was set to \"both\".\n- Motif finding functions return NA for isomorphism classes that are\n  not motifs (i.e. not connected). Fixes bug \\#1050859.\n- Fixed get.adjacency() when attr is given, and the attribute has some\n  complex type. Bug \\#1025799.\n- Fixed attribute name in graph.adjacency() for dense matrices. Bug\n  \\#1066952.\n- Fixed erratic behavior of alpha.centrality().\n- Fixed igraph indexing, when attr is given. Bug \\#1073705.\n- Fixed a bug when calculating the largest cliques of a directed\n  graph. Bug \\#1073800.\n- Fixed a bug in the maximal clique search, closes \\#1074402.\n- Warn for negative weights when calculating PageRank.\n- Fixed dense, unweighted graph.adjacency when diag=FALSE. Closes\n  issue \\#1077425.\n- Fixed a bug in eccentricity() and radius(), the results were often\n  simply wrong.\n- Fixed a bug in get.all.shortest.paths() when some edges had zero weight.\n- graph.data.frame() is more careful when vertex names are numbers, to\n  avoid their scientific notation. Fixes issue \\#1082221.\n- Better check for NAs in vertex names. Fixes issue \\#1087215\n- Fixed some potential crashes in the DrL layout generator.\n- Fixed a bug in the Reingold-Tilford layout when the graph is\n  directed and mode != ALL.\n- Eliminate gap between vertex and edge when plotting an edge without an arrow.\n  Fixes \\#1118448.\n- Fixed a bug in has.multiple() that resulted in false negatives for\n  some undirected graphs.\n- Fixed a crash in weighted betweenness calculation.\n- R plotting: fixed a bug that caused misplaced arrows at rectangle\n  vertex shapes.\n\nPython news and fixes\n---------------------\n\n- Added bipartite support to the Pajek reader and writer, closes bug\n  \\#1042298.\n- Graph.Degree_Sequence() has a new method now: \"no_multiple\".\n- Added the is_degree_sequence() and is_graphical_degree_sequence()\n  functions.\n- rewire() has a new mode: \"loops\", that can create loop edges.\n- Walktrap community detection now handles isolates.\n- Added Graph.K_Regular().\n- power_law_fit() now uses a C implementation.\n- Added support for setting the frame (stroke) width of vertices using the\n  frame_width attribute or the vertex_frame_width keyword argument in plot()\n- Improved Inkscape-friendly SVG output from Graph.write_svg(), thanks to drlog\n- Better handling of named vertices in Graph.delete_vertices()\n- Added experimental Gephi graph streaming support; see igraph.remote.gephi and\n  igraph.drawing.graph.GephiGraphStreamingDrawer\n- Nicer __repr__ output for Flow and Cut instances\n- Arrows are now placed correctly around diamond-shaped nodes on plots\n- Added Graph.TupleList, a function that allows one to create graphs with\n  edge attributes quickly from a list of tuples.\n- plot() now also supports .eps as an extension, not only .ps\n\n- Fixed overflow issues in centralization calculations.\n- Fixed a bug that mishandled vertex colors in VF2 isomorphism\n  functions. Bug \\#1032819.\n- Pajek exporter now always quotes strings, thanks to Elena Tea Russo.\n- Fixed a bug with handling small edge weights in shortest paths\n  calculation in Graph.shortest_paths() (Dijkstra's algorithm.) Thanks to\n  Martin J Reed.\n- Fixed a bug in the NCV setting for ARPACK functions. It cannot be\n  bigger than the matrix size.\n- Fixed a bug in Graph.layout_mds() that resulted vertices on top of each\n  other.\n- Motif finding functions return nan for isomorphism classes that are\n  not motifs (i.e. not connected). Fixes bug \\#1050859.\n- Fixed a bug when calculating the largest cliques of a directed\n  graph. Bug \\#1073800.\n- Warn for negative weights when calculating PageRank.\n- Fixed a bug in Graph.eccentricity() and Graph.radius(), the results were often\n  simply wrong.\n- Fixed a bug in Graph.get.all.shortest.paths() when some edges had zero weight.\n- Fixed some potential crashes in the DrL layout generator.\n- Fixed a bug in the Reingold-Tilford layout when the graph is\n  directed and mode != ALL.\n- Fixed a bug in Graph.layout_sugiyama() when the graph had no edges.\n- Fixed a bug in Graph.community_label_propagation() when initial labels\n  contained -1 entries. Issue \\#1105460.\n- Repaired the DescartesCoordinateSystem class (which is not used too frequently\n  anyway)\n- Fixed a bug that caused segfaults when an igraph Graph was used in a thread\n  forked from the main Python interpreter thread\n- Fixed a bug that affected file handles created from Python strings in the\n  C layer\n- Fixed a bug in has_multiple() that resulted in false negatives\n  for some undirected graphs.\n- Fixed a crash in weighted betweenness calculation.\n\nC library news and changes\n--------------------------\n\n- Added bipartite support to the Pajek reader and writer, closes bug\n  \\#1042298.\n- igraph_layout_mds() uses LAPACK instead of ARPACK.\n- igraph_degree_sequence_game has a new method:\n  IGRAPH_DEGSEQ_SIMPLE_NO_MULTIPLE.\n- Added the igraph_is_degree_sequence() and\n  igraph_is_graphical_degree_sequence() functions.\n- igraph_rewire() has a new method: IGRAPH_REWIRING_SIMPLE_LOOPS,\n  that can create loops.\n- Walktrap community detection now handles isolates.\n- Added igraph_k_regular_game().\n- Added igraph_power_law_fit.\n\n- Fixed a bug in igraph_barabasi_game when outseq was an empty vector.\n- Fixed overflow issues in centralization calculations.\n- Fixed an invalid return value of igraph_vector_ptr_pop_back.\n- Fixed a igraph_all_minimal_st_separators() bug, some vertex sets\n  were incorrectly reported as separators. Bug \\#1033045.\n- Pajek exporter now always quotes strings, thanks to Elena Tea Russo.\n- Fixed a bug with handling small edge weights in\n  igraph_shortest_paths_dijkstra(), thanks to Martin J Reed.\n- Fixed a bug in the NCV setting for ARPACK functions. It cannot be\n  bigger than the matrix size.\n- igraph_layout_merge_dla uses better default parameter values now.\n- Fixed a bug in igraph_layout_mds() that resulted vertices on top of\n  each other.\n- Attribute handler table is not thread-local any more.\n- Motif finding functions return IGRAPH_NAN for isomorphism classes\n  that are not motifs (i.e. not connected). Fixes bug \\#1050859.\n- Fixed a bug when calculating the largest cliques of a directed\n  graph. Bug \\#1073800.\n- Fix a bug in degree_sequence_game(), in_seq can be an empty vector as\n  well instead of NULL, for an undirected graph.\n- Fixed a bug in the maximal clique search, closes \\#1074402.\n- Warn for negative weights when calculating PageRank.\n- Fixed a bug in igraph_eccentricity() (and also igraph_radius()),\n  the results were often simply wrong.\n- Fixed a bug in igraph_get_all_shortest_paths_dijkstra() when edges\n  had zero weight.\n- Fixed some potential crashes in the DrL layout generator.\n- Fixed a bug in the Reingold-Tilford layout when the graph is\n  directed and mode != ALL.\n- Fixed a bug in igraph_has_multiple() that resulted in false negatives\n  for some undirected graphs.\n- Fixed a crash in weighted betweenness calculation.\n\nigraph 0.6\n==========\n\nReleased June 11, 2012\n\nSee also the release notes at\nhttp://igraph.sf.net/relnotes-0.6.html\n\nR: Major new features\n---------------------\n\n- Vertices and edges are numbered from 1 instead of 0.\n  Note that this makes most of the old R igraph code incompatible\n  with igraph 0.6. If you want to use your old code, please use\n  the igraph0 package. See more at http://igraph.sf.net/relnotes-0.6.html.\n- The '\\[' and '\\[\\[' operators can now be used on igraph graphs,\n  for '\\[' the graph behaves as an adjacency matrix, for '[[' is\n  is treated as an adjacency list. It is also much simpler to\n  manipulate the graph structure, i.e. add/remove edges and vertices,\n  with some new operators. See more at ?graph.structure.\n- In all functions that take a vector or list of vertices or edges,\n  vertex/edge names can be given instead of the numeric ids.\n- New package 'igraphdata', contains a number of data sets that can\n  be used directly in igraph.\n- Igraph now supports loading graphs from the Nexus online data\n  repository, see nexus.get(), nexus.info(), nexus.list() and\n  nexus.search().\n- All the community structure finding algorithm return a 'communities'\n  object now, which has a bunch of useful operations, see\n  ?communities for details.\n- Vertex and edge attributes are handled much better now. They\n  are kept whenever possible, and can be combined via a flexible API.\n  See ?attribute.combination.\n- R now prints igraph graphs to the screen in a more structured and\n  informative way. The output of summary() was also updated\n  accordingly.\n\nR: Other new features\n---------------------\n\n- It is possible to mark vertex groups on plots, via\n  shading. Communities and cohesive blocks are plotted using this by\n  default.\n- Some igraph demos are now available, see a list via\n  'demo(package=\"igraph\")'.\n- igraph now tries to select the optimal layout algorithm, when\n  plotting a graph.\n- Added a simple console, using Tcl/Tk. It contains a text area\n  for status messages and also a status bar. See igraph.console().\n- Reimplemented igraph options support, see igraph.options() and\n  getIgraphOpt().\n- Igraph functions can now print status messages.\n\nR: New or updated functions\n---------------------------\n\nCommunity detection\n-------------------\n- The multi-level modularity optimization community structure detection\n  algorithm by Blondel et al. was added, see multilevel.community().\n- Distance between two community structures: compare.communities().\n- Community structure via exact modularity optimization,\n  optimal.community().\n- Hierarchical random graphs and community finding, porting the code\n  from Aaron Clauset. See hrg.game(), hrg.fit(), etc.\n- Added the InfoMAP community finding method, thanks to Emmanuel\n  Navarro for the code. See infomap.community().\n\nShortest paths\n--------------\n- Eccentricity (eccentricity()), and radius (radius()) calculations.\n- Shortest path calculations with get.shortest.paths() can now\n  return the edges along the shortest paths.\n- get.all.shortest.paths() now supports edge weights.\n\nCentrality\n----------\n- Centralization scores for degree, closeness, betweenness and\n  eigenvector centrality. See centralization.scores().\n- Personalized Page-Rank scores, see page.rank().\n- Subgraph centrality, subgraph.centrality().\n- Authority (authority.score()) and hub (hub.score()) scores support\n  edge weights now.\n- Support edge weights in betweenness and closeness calculations.\n- bonpow(), Bonacich's power centrality and alpha.centrality(),\n  Alpha centrality calculations now use sparse matrices by default.\n- Eigenvector centrality calculation, evcent() now works for\n  directed graphs.\n- Betweenness calculation can now use arbitrarily large integers,\n  this is required for some lattice-like graphs to avoid overflow.\n\nInput/output and file formats\n-----------------------------\n- Support the DL file format in graph.read(). See\n  http://www.analytictech.com/networks/dataentry.htm.\n- Support writing the LEDA file format in write.graph().\n\nPlotting and layouts\n--------------------\n- Star layout: layout.star().\n- Layout based on multidimensional scaling, layout.mds().\n- New layouts layout.grid() and layout.grid.3d().\n- Sugiyama layout algorithm for layered directed acyclic graphs,\n  layout.sugiyama().\n\nGraph generators\n----------------\n- New graph generators: static.fitness.game(), static.power.law.game().\n- barabasi.game() was rewritten and it supports three algorithms now,\n  the default algorithm does not generate multiple or loop edges.\n  The graph generation process can now start from a supplied graph.\n- The Watts-Strogatz graph generator, igraph_watts_strogatz() can\n  now create graphs without loop edges.\n\nOthers\n------\n- Added the Spectral Coarse Graining algorithm, see scg().\n- The cohesive.blocks() function was rewritten in C, it is much faster\n  now. It has a nicer API, too. See demo(\"cohesive\").\n- Added generic breadth-first and depth-first search implementations\n  with many callbacks, graph.bfs() and graph_dfs().\n- Support vertex and edge coloring in the VF2 (sub)graph isomorphism\n  functions (graph.isomorphic.vf2(), graph.count.isomorphisms.vf2(),\n  graph.get.isomorphisms.vf2(), graph.subisomorphic.vf2(),\n  graph.count.subisomorphisms.vf2(), graph.get.subisomorphisms.vf2()).\n- Assortativity coefficient, assortativity(), assortativity.nominal()\n  and assortativity.degree().\n- Vertex operators that work by vertex names:\n  graph.intersection.by.name(), graph.union.by.name(),\n  graph.difference.by.name(). Thanks to Magnus Torfason for\n  contributing his code!\n- Function to calculate a non-induced subraph: subgraph.edges().\n- More comprehensive maximum flow and minimum cut calculation,\n  see functions graph.maxflow(), graph.mincut(), stCuts(), stMincuts().\n- Check whether a directed graph is a DAG, is.dag().\n- has.multiple() to decide whether a graph has multiple edges.\n- Added a function to calculate a diversity score for the vertices,\n  graph.diversity().\n- Graph Laplacian calculation (graph.laplacian()) supports edge\n  weights now.\n- Biconnected component calculation, biconnected.components()\n  now returns the components themselves.\n- bipartite.projection() calculates multiplicity of edges.\n- Maximum cardinality search: maximum.cardinality.search() and\n  chordality test: is.chordal()\n- Convex hull computation, convex.hull().\n- Contract vertices, contract.vertices().\n\nNew in the Python interface\n---------------------------\n\nTODO\n\nMajor changes in the Python interface\n-------------------------------------\n\nTODO\n\nNew in the C layer\n------------------\n\n- Maximum cardinality search: igraph_maximum_cardinality_search() and\n  chordality test: igraph_is_chordal().\n- Support the DL file format, igraph_read_graph_dl(). See\n  http://www.analytictech.com/networks/dataentry.htm.\n- Added generic breadth-first and depth-first search implementations\n  with many callbacks (igraph_bfs(), igraph_dfs()).\n- Centralization scores for degree, closeness, betweenness and\n  eigenvector centrality, see igraph_centralization().\n- Added igraph_sparsemat_t, a type that implements sparse\n  matrices based on the CXSparse library by Tim Davis.\n  See http://www.cise.ufl.edu/research/sparse/CXSparse/.\n- Personalized Page-Rank scores, igraph_personalized_pagerank() and\n  igraph_personalized_pagerank_vs().\n- Assortativity coefficient, igraph_assortativity(),\n  igraph_assortativity_nominal(), and igraph_assortativity_degree().\n- The multi-level modularity optimization community structure detection\n  algorithm by Blondel et al. was added, see igraph_community_multilevel().\n- Added the igraph_version() function.\n- Star layout: igraph_layout_star().\n- Function to calculate a non-induced subraph: igraph_subgraph_edges().\n- Distance between two community structures: igraph_compare_communities().\n- Community structure via exact modularity optimization,\n  igraph_community_optimal_community().\n- More comprehensive maximum flow and minimum cut calculation,\n  see functions igraph_maxflow(), igraph_mincut(),\n  igraph_all_st_cuts(), igraph_all_st_mincuts().\n- Layout based on multidimensional scaling, igraph_layout_mds().\n- It is now possible to access the random number generator(s) via an\n  API. Multiple RNGs can be used, from external sources as well.\n  The default RNG is MT19937.\n- Added igraph_get_all_shortest_paths_dijkstra, for calculating all\n  non-negatively weighted shortest paths.\n- Check whether a directed graph is a DAG, igraph_is_dag().\n- Cohesive blocking, a'la Moody & White, igraph_cohesive_blocks().\n- Igraph functions can now print status messages, see igraph_status()\n  and related functions.\n- Support writing the LEDA file format, igraph_write_graph_leda().\n- Contract vertices, igraph_contract_vertices().\n- The C reference manual has now a lot of example programs.\n- Hierarchical random graphs and community finding, porting the code\n  from Aaron Clauset. See igraph_hrg_game(), igraph_hrg_fit(), etc.\n- igraph_has_multiple() to decide whether a graph has multiple edges.\n- New layouts igraph_layout_grid() and igraph_layout_grid_3d().\n- igraph_integer_t is really an integer now, it used to be a double.\n- igraph_minimum_spanning_tree(), calls either the weighted or\n  the unweighted implementation.\n- Eccentricity (igraph_eccentricity()), and radius (igraph_radius())\n  calculations.\n- Several game theory update rules, written by Minh Van Nguyen. See\n  igraph_deterministic_optimal_imitation(),\n  igraph_stochastic_imitation(), igraph_roulette_wheel_imitation(),\n  igraph_moran_process(),\n- Sugiyama layout algorithm for layered directed acyclic graphs,\n  igraph_layout_sugiyama().\n- New graph generators: igraph_static_fitness_game(),\n  igraph_static_power_law_game().\n- Added the InfoMAP community finding method, thanks to Emmanuel\n  Navarro for the code. See igraph_community_infomap().\n- Added the Spectral Coarse Graining algorithm, see igraph_scg().\n- Added a function to calculate a diversity score for the vertices,\n  igraph_diversity().\n\nMajor changes in the C layer\n----------------------------\n\n- Authority (igraph_authority_score()) and hub (igraph_hub_score()) scores\n  support edge weights now.\n- Graph Laplacian calculation (igraph_laplacian()) supports edge\n  weights now.\n- Support edge weights in betweenness (igraph_betweenness()) and closeness\n  (igraph_closeness()) calculations.\n- Support vertex and edge coloring in the VF2 graph isomorphism\n  algorithm (igraph_isomorphic_vf2(), igraph_count_isomorphisms_vf2(),\n  igraph_get_isomorphisms_vf2(), igraph_subisomorphic_vf2(),\n  igraph_count_subisomorphisms_vf2(), igraph_get_subisomorphisms_vf2()).\n- Added print operations for the igraph_vector*_t, igraph_matrix*_t and\n  igraph_strvector_t types.\n- Biconnected component calculation (igraph_biconnected_components())\n  can now return the components themselves.\n- Eigenvector centrality calculation, igraph_eigenvector_centrality()\n  now works for directed graphs.\n- Shortest path calculations with get_shortest_paths() and\n  get_shortest_paths_dijkstra() can now return the edges along the paths.\n- Betweenness calculation can now use arbitrarily large integers,\n  this is required for some lattice-like graphs to avoid overflow.\n- igraph_bipartite_projection() calculates multiplicity of edges.\n- igraph_barabasi_game() was rewritten and it supports three\n  algorithms now, the default algorithm does not generate multiple or\n  loop edges.\n- The Watts-Strogatz graph generator, igraph_watts_strogatz() can\n  now create graphs without loop edges.\n- igraph should be now thread-safe, on architectures that support\n  thread-local storage (Linux and Windows: yes, Mac OSX: no).\n\nWe also fixed numerous bugs, too many to include them here, sorry.\nYou may look at our bug tracker at https://bugs.launchpad.net/igraph\nto check whether a bug was fixed or not. Thanks for all the people\nreporting bugs. Special thanks to Minh Van Nguyen for a lot of bug\nreports, documentation fixes and contributed code!\n\nigraph 0.5.3\n============\n\nReleased November 22, 2009\n\nBugs corrected in the R interface\n---------------------------------\n- Some small changes to make 'R CMD check' clean\n- Fixed a bug in graph.incidence, the 'directed' and 'mode' arguments\n  were not handled correctly\n- Betweenness and edge betweenness functions work for graphs with\n  many shortest paths now (up to the limit of long long int)\n- When compiling the package, the configure script fails if there is\n  no C compiler available\n- igraph.from.graphNEL creates the right number of loop edges now\n- Fixed a bug in bipartite.projection() that caused occasional crashes\n  on some systems\n\nNew in the Python interface\n---------------------------\n- Added support for weighted diameter\n- get_eid() considers edge directions by default from now on\n- Fixed a memory leak in the attribute handler\n- 'NaN' and 'inf' are treated correctly now\n\nBugs corrected in the C layer\n-----------------------------\n- Betweenness and edge betweenness functions work for graphs with\n  many shortest paths now (up to the limit of long long int)\n- The configure script fails if there is no C compiler available\n- Fixed a bug in igraph_community_spinglass, when csize was a NULL\n  pointer, but membership was not\n- Fixed a bug in igraph_bipartite_projection that caused occasional\n  crashes on some systems\n\nigraph 0.5.2\n============\n\nReleased April 10, 2009\n\nSee also the release notes at\nhttp://igraph.sf.net/relnotes-0.5.2.html\n\nNew in the R interface\n----------------------\n\n- Added progress bar support to beweenness() and\n  betweenness.estimate(), layout.drl()\n- Speeded up betweenness estimation\n- Speeded up are.connected()\n- Johnson's shortest paths algorithm added\n- shortest.paths() has now an 'algorithm' argument to choose from the\n  various implementations manually\n- Always quote symbolic vertex names when printing graphs or edges\n- Average nearest neighbor degree calculation, graph.knn()\n- Weighted degree (also called strength) calculation, graph.strength()\n- Some new functions to support bipartite graphs: graph.bipartite(),\n  is.bipartite(), get.indicence(), graph.incidence(),\n  bipartite.projection(), bipartite.projection.size()\n- Support for plotting curved edges with plot.igraph() and tkplot()\n- Added support for weighted graphs in alpha.centrality()\n- Added the label propagation community detection algorithm by\n  Raghavan et al., label.propagation.community()\n- cohesive.blocks() now has a 'cutsetHeuristic' argument to choose\n  between two cutset algorithms\n- Added a function to \"unfold\" a tree, unfold.tree()\n- New tkplot() arguments to change the drawing area\n- Added a minimal GUI, invoke it with tkigraph()\n- The DrL layout generator, layout.drl() has a three dimensional mode\n  now.\n\nBugs corrected in the R interface\n---------------------------------\n\n- Fixed a bug in VF2 graph isomorphism functions\n- Fixed a bug when a sparse adjacency matrix was requested in\n  get.adjacency() and the graph was named\n- VL graph generator in degree.sequence.game() checks now that\n  the sum of the degrees is even\n- Many fixes for supporting various compilers, e.g. GCC 4.4 and Sun's\n  C compiler\n- Fixed memory leaks in graph.automorphisms(), Bellman-Ford\n  shortest.paths(), independent.vertex.sets()\n- Fix a bug when a graph was imported from LGL and exported to NCOL\n  format (\\#289596)\n- cohesive.blocks() creates its temporary file in the session\n  temporary directory\n- write.graph() and read.graph() now give error messages when unknown\n  arguments are given\n- The GraphML reader checks the name of the attributes to avoid adding\n  a duplicate 'id' attribute\n- It is possible to change the 'ncv' ARPACK parameter for\n  leading.eigenvector.community()\n- Fixed a bug in path.length.hist(), 'unconnected' was wrong\n  for unconnected and undirected graphs\n- Better handling of attribute assingment via iterators, this is now\n  also clarified in the manual\n- Better error messages for unknown vertex shapes\n- Make R package unload cleanly if unloadNamespace() is used\n- Fixed a bug in plotting square shaped vertices (\\#325244)\n- Fixed a bug in graph.adjacency() when the matrix is a sparse matrix\n  of class \"dgTMatrix\"\n\nNew in the Python interface\n---------------------------\n\n- Speeded up betweenness estimation\n- Johnson's shortest paths algorithm added (selected automatically\n  by Graph.shortest_paths() if needed)\n- Weighted degree (also called strength) calculation, Graph.strength()\n- Some new methods to support bipartite graphs: Graph.Bipartite(),\n  Graph.is_bipartite(), Graph.get_indicence(), Graph.Incidence(),\n  Graph.bipartite_projection(), Graph.bipartite_projection_size()\n- Added the label propagation community detection algorithm by\n  Raghavan et al., Graph.community_label_propagation()\n- Added a function to \"unfold\" a tree, Graph.unfold_tree()\n- setup.py script improvements\n- Graph plotting now supports edge_arrow_size and edge_arrow_width\n- Added Graph.Formula to create small graphs from a simple notation\n- VertexSeq and EdgeSeq objects can now be indexed by slices\n\nNew in the C layer\n------------------\n\n- Added progress bar support to igraph_betweenness() and\n  igraph_betweenness_estimate(), igraph_layout_drl()\n- Speeded up igraph_betweenness_estimate(), igraph_get_eid(),\n  igraph_are_connected(), igraph_get_eids()\n- Added igraph_get_eid2()\n- Johnson's shortest path algorithm added:\n  igraph_shortest_paths_johnson()\n- Average nearest neighbor degree calculation,\n  igraph_avg_nearest_neighbor_degree()\n- Weighted degree (also called strength) calculation,\n  igraph_strength()\n- Some functions to support bipartite graphs: igraph_full_bipartite(),\n  igraph_bipartite_projection(), igraph_create_bipartite(),\n  igraph_incidence(), igraph_get_incidence(),\n  igraph_bipartite_projection_size(), igraph_is_bipartite()\n- Added the label propagation community detection algorithm by\n  Raghavan et al., igraph_community_label_propagation()\n- Added an example that shows how to set the random number generator's\n  seed from C (examples/simple/random_seed.c)\n- Added a function to \"unfold\" a tree, igraph_unfold_tree()\n- C attribute handler updates: added functions to query many\n  vertices/edges at once\n- Three dimensional DrL layout, igraph_layout_drl_3d()\n\nBugs corrected in the C layer\n-----------------------------\n\n- Fixed a bug in igraph_isomorphic_function_vf2(), affecting all VF2\n  graph isomorphism functions\n- VL graph generator in igraph_degree_sequence_game() checks now that\n  the sum of the degrees is even\n- Many small corrections to make igraph compile with Microsoft Visual\n  Studio 2003, 2005 and 2008\n- Many fixes for supporting various compilers, e.g. GCC 4.4 and Sun's\n  C compiler\n- Fix a bug when a graph was imported from LGL and exported to NCOL\n  format (\\#289596)\n- Fixed memory leaks in igraph_automorphisms(),\n  igraph_shortest_paths_bellman_ford(),\n  igraph_independent_vertex_sets()\n- The GraphML reader checks the name of the attributes to avoid adding\n  a duplicate 'id' attribute\n- It is possible to change the 'ncv' ARPACK parameter for\n  igraph_community_leading_eigenvector()\n- Fixed a bug in igraph_path_length_hist(), 'unconnected' was wrong\n  for unconnected and undirected graphs.\n\nigraph 0.5.1\n============\n\nReleased July 14, 2008\n\nSee also the release notes at\nhttp://igraph.sf.net/relnotes-0.5.1.html\n\nNew in the R interface\n----------------------\n\n- A new layout generator called DrL.\n- Uniform sampling of random connected undirected graphs with a\n  given degree sequence.\n- Edge labels are plotted at 1/3 of the edge, this is better if\n  the graph has mutual edges.\n- Initial and experimental vertex shape support in 'plot'.\n- New function, 'graph.adjlist' creates igraph graphs from\n  adjacency lists.\n- Conversion to/from graphNEL graphs, from the 'graph' R package.\n- Fastgreedy community detection can utilize edge weights now, this\n  was missing from the R interface.\n- The 'arrow.width' graphical parameter was added.\n- graph.data.frame has a new argument 'vertices'.\n- graph.adjacency and get.adjacency support sparse matrices,\n  the 'Matrix' package is required to use this functionality.\n- graph.adjacency adds column/row names as 'name' attribute.\n- Weighted shortest paths using Dijkstra's or the Belmann-Ford\n  algorithm.\n- Shortest path functions return 'Inf' for unreachable vertices.\n- New function 'is.mutual' to find mutual edges in a directed graph.\n- Added inverse log-weighted similarity measure (a.k.a. Adamic/Adar\n  similarity).\n- preference.game and asymmetric.preference.game were\n  rewritten, they are O(|V|+|E|) now, instead of O(|V|^2).\n- Edge weight support in function 'get.shortest.paths', it uses\n  Dijkstra's algorithm.\n\nBugs corrected in the R interface\n---------------------------------\n\n- A bug was corrected in write.pajek.bgraph.\n- Several bugs were corrected in graph.adjacency.\n- Pajek reader bug corrected, used to segfault if '\\*Vertices'\n  was missing.\n- Directedness is handled correctly when writing GML files.\n  (But note that 'correct' conflicts the standard here.)\n- Corrected a bug when calculating weighted, directed PageRank on an\n  undirected graph. (Which does not make sense anyway.)\n- Several bugs were fixed in the Reingold-Tilford layout to avoid\n  edge crossings.\n- A bug was fixed in the GraphML reader, when the value of a graph\n  attribute was not specified.\n- Fixed a bug in the graph isomorphism routine for small (3-4 vertices)\n  graphs.\n- Corrected the random sampling implementation (igraph_random_sample),\n  now it always generates unique numbers. This affects the\n  Gnm Erdos-Renyi generator, it always generates simple graphs now.\n- The basic igraph constructor (igraph_empty_attrs, all functions\n  are expected to call this internally) now checks whether the number\n  of vertices is finite.\n- The LGL, NCOL and Pajek graph readers handle errors properly now.\n- The non-symmetric ARPACK solver returns results in a consistent form\n  now.\n- The fast greedy community detection routine now checks that the graph\n  is simple.\n- The LGL and NCOL parsers were corrected to work with all\n  kinds of end-of-line encodings.\n- Hub & authority score calculations initialize ARPACK parameters now.\n- Fixed a bug in the Walktrap community detection routine, when applied\n  to unconnected graphs.\n- Several small memory leaks were removed, and a big one from the Spinglass\n  community structure detection function\n\nNew in the Python interface\n---------------------------\n\n- A new layout generator called DrL.\n- Uniform sampling of random connected undirected graphs with a\n  given degree sequence.\n- Methods parameters accepting igraph.IN, igraph.OUT and igraph.ALL\n  constants now also accept these as strings (\"in\", \"out\" and \"all\").\n  Prefix matches also allowed as long as the prefix match is unique.\n- Graph.shortest_paths() now supports edge weights (Dijkstra's and\n  Bellman-Ford algorithm implemented)\n- Graph.get_shortest_paths() also supports edge weights\n  (only Dijkstra's algorithm yet)\n- Added Graph.is_mutual() to find mutual edges in a directed graph.\n- Added inverse log-weighted similarity measure (a.k.a. Adamic/Adar\n  similarity).\n- preference.game and asymmetric.preference.game were\n  rewritten, they are O(|V|+|E|) now, instead of O(|V|^2).\n- ARPACK options can now be modified from the Python interface\n  (thanks to Kurt Jacobson)\n- Layout.to_radial() added -- now you can create a top-down tree\n  layout by the Reingold-Tilford algorithm and then turn it to a\n  radial tree layout\n- Added Graph.write_pajek() to save graphs in Pajek format\n- Some vertex and edge related methods can now also be accessed via\n  the methods of VertexSeq and EdgeSeq, restricted to the current\n  vertex/edge sequence of course\n- Visualisations now support triangle shaped vertices\n- Added Graph.mincut()\n- Added Graph.Weighted_Adjacency() to create graphs from weighted\n  adjacency matrices\n- Kamada-Kawai and Fruchterman-Reingold layouts now accept initial\n  vertex positions\n- Graph.Preference() and Graph.Asymmetric_Preference() were\n  rewritten, they are O(|V|+|E|) now, instead of O(|V|^2).\n\nBugs corrected in the Python interface\n--------------------------------------\n\n- Graph.constraint() now properly returns floats instead of integers\n  (thanks to Eytan Bakshy)\n- Graphs given by adjacency matrices are now finally loaded and saved\n  properly\n- Graph.Preference() now accepts floats in type distributions\n- A small bug in Graph.community_edge_betweenness() corrected\n- Some bugs in numeric attribute handling resolved\n- VertexSeq and EdgeSeq objects can now be subsetted by lists and\n  tuples as well\n- Fixed a bug when dealing with extremely small layout sizes\n- Eigenvector centality now always return positive values\n- Graph.authority_score() now really returns the authority scores\n  instead of the hub scores (blame copypasting)\n- Pajek reader bug corrected, used to segfault if '\\*Vertices'\n  was missing.\n- Directedness is handled correctly when writing GML files.\n  (But note that 'correct' conflicts the standard here.)\n- Corrected a bug when calculating weighted, directed PageRank on an\n  undirected graph. (Which does not make sense anyway.)\n- Several bugs were fixed in the Reingold-Tilford layout to avoid\n  edge crossings.\n- A bug was fixed in the GraphML reader, when the value of a graph\n  attribute was not specified.\n- Fixed a bug in the graph isomorphism routine for small (3-4 vertices)\n  graphs.\n- Corrected the random sampling implementation (igraph_random_sample),\n  now it always generates unique numbers. This affects the\n  Gnm Erdos-Renyi generator, it always generates simple graphs now.\n- The LGL, NCOL and Pajek graph readers handle errors properly now.\n- The non-symmetric ARPACK solver returns results in a consistent form\n  now.\n- The fast greedy community detection routine now checks that the graph\n  is simple.\n- The LGL and NCOL parsers were corrected to work with all\n  kinds of end-of-line encodings.\n- Hub & authority score calculations initialize ARPACK parameters now.\n- Fixed a bug in the Walktrap community detection routine, when applied\n  to unconnected graphs.\n- Several small memory leaks were removed, and a big one from the Spinglass\n  community structure detection function\n\nNew in the C layer\n------------------\n\n- A new layout generator called DrL.\n- Uniform sampling of random connected undirected graphs with a\n  given degree sequence.\n- Some stochastic test results are ignored (for spinglass community\n  detection, some Erdos-Renyi generator tests)\n- Weighted shortest paths, Dijkstra's algorithm.\n- The unweighted shortest path routine returns 'Inf' for unreachable\n  vertices.\n- New function, igraph_adjlist can create igraph graphs from\n  adjacency lists.\n- New function, igraph_weighted_adjacency can create weighted graphs\n  from weight matrices.\n- New function, igraph_is_mutual to search for mutual edges.\n- Added inverse log-weighted similarity measure (a.k.a. Adamic/Adar\n  similarity).\n- igraph_preference_game and igraph_asymmetric_preference_game were\n  rewritten, they are O(|V|+|E|) now, instead of O(|V|^2).\n- The Bellman-Ford shortest path algorithm was added.\n- Added weighted variant of igraph_get_shortest_paths, based on\n  Dijkstra's algorithm.\n- Several small memory leaks were removed, and a big one from the Spinglass\n  community structure detection function\n\nBugs corrected in the C layer\n-----------------------------\n\n- Several bugs were corrected in the (still experimental) C attribute\n  handler.\n- Pajek reader bug corrected, used to segfault if '\\*Vertices'\n  was missing.\n- Directedness is handled correctly when writing GML files.\n  (But note that 'correct' conflicts the standard here.)\n- Corrected a bug when calculating weighted, directed PageRank on an\n  undirected graph. (Which does not make sense anyway.)\n- Some code polish to make igraph compile with GCC 4.3\n- Several bugs were fixed in the Reingold-Tilford layout to avoid\n  edge crossings.\n- A bug was fixed in the GraphML reader, when the value of a graph\n  attribute was not specified.\n- Fixed a bug in the graph isomorphism routine for small (3-4 vertices)\n  graphs.\n- Corrected the random sampling implementation (igraph_random_sample),\n  now it always generates unique numbers. This affects the\n  Gnm Erdos-Renyi generator, it always generates simple graphs now.\n- The basic igraph constructor (igraph_empty_attrs, all functions\n  are expected to call this internally) now checks whether the number\n  of vertices is finite.\n- The LGL, NCOL and Pajek graph readers handle errors properly now.\n- The non-symmetric ARPACK solver returns results in a consistent form\n  now.\n- The fast greedy community detection routine now checks that the graph\n  is simple.\n- The LGL and NCOL parsers were corrected to work with all\n  kinds of end-of-line encodings.\n- Hub & authority score calculations initialize ARPACK parameters now.x\n- Fixed a bug in the Walktrap community detection routine, when applied\n  to unconnected graphs.\n\nigraph 0.5\n=========\n\nReleased February 14, 2008\n\nSee also the release notes at http://igraph.sf.net/relnotes-0.5.html\n\nNew in the R interface\n----------------------\n\n- The 'rescale', 'asp' and 'frame' graphical parameters were added\n- Create graphs from a formula notation (graph.formula)\n- Handle graph attributes properly\n- Calculate the actual minimum cut for undirected graphs\n- Adjacency lists, get.adjlist and get.adjedgelist added\n- Eigenvector centrality computation is much faster now\n- Proper R warnings, instead of writing the warning to the terminal\n- R checks graphical parameters now, the unknown ones are not just\n  ignored, but an error message is given\n- plot.igraph has an 'add' argument now to compose plots with multiple\n  graphs\n- plot.igraph supports the 'main' and 'sub' arguments\n- layout.norm is public now, it can normalize a layout\n- It is possible to supply startup positions to layout generators\n- Always free memory when CTRL+C/ESC is pressed, in all operating\n  systems\n- plot.igraph can plot square vertices now, see the 'shape' parameter\n- graph.adjacency rewritten when creating weighted graphs\n- We use match.arg whenever possible. This means that character scalar\n  options can be abbreviated and they are always case insensitive\n\n- VF2 graph isomorphism routines can check subgraph isomorphism now,\n  and they are able to return matching(s)\n- The BLISS graph isomorphism algorithm is included in igraph now. See\n  canonical.permutation, graph.isomorphic.bliss\n- We use ARPACK for eigenvalue/eigenvector calculation. This means that the\n  following functions were rewritten: page.rank,\n  leading.eigenvector.community.\\*, evcent. New functions based on\n  ARPACK: hub.score, authority.score, arpack.\n- Edge weights for Fruchterman-Reingold layout (layout.fruchterman.reingold).\n- Line graph calculation (line.graph)\n- Kautz and de Bruijn graph generators (graph.kautz, graph.de.bruijn)\n- Support for writing graphs in DOT format\n- Jaccard and Dice similarity coefficients added (similarity.jaccard,\n  similarity.dice)\n- Counting the multiplicity of edges (count.multiple)\n- The graphopt layout algorithm was added, layout.graphopt\n- Generation of \"famous\" graphs (graph.famous).\n- Create graphs from LCF notation (graph.cf).\n- Dyad census and triad cencus functions (dyad.census, triad.census)\n- Cheking for simple graphs (is.simple)\n- Create full citation networks (graph.full.citation)\n- Create a histogram of path lengths (path.length.hist)\n- Forest fire model added (forest.fire.game)\n- DIMACS reader can handle different file types now\n- Biconnected components and articulation points (biconnected.components,\n  articulation.points)\n- Kleinberg's hub and authority scores (hub.score, authority.score)\n- as.undirected handles attributes now\n- Geometric random graph generator (grg.game) can return the\n  coordinates of the vertices\n- Function added to convert leading eigenvector community structure result to\n  a membership vector (community.le.to.membership)\n- Weighted fast greedy community detection\n- Weighted page rank calculation\n- Functions for estimating closeness, betweenness, edge betweenness by\n  introducing a cutoff for path lengths (closeness.estimate,\n  betweenness.estimate, edge.betweenness.estimate)\n- Weighted modularity calculation\n- Function for permuting vertices (permute.vertices)\n- Betweenness and closeness calculations are speeded up\n- read.graph can handle all possible line terminators now (\\r, \\n, \\r\\n, \\n\\r)\n- Error handling was rewritten for walktrap community detection,\n  the calculation can be interrupted now\n- The maxflow/mincut functions allow to supply NULL pointer for edge\n  capacities, implying unit capacities for all edges\n\nBugs corrected in the R interface\n---------------------------------\n\n- Fixed a bug in cohesive.blocks, cohesive blocks were sometimes not\n  calculated correctly\n\nNew in the Python interface\n---------------------------\n\n- Added shell interface: igraph can now be invoked by calling the script called\n  igraph from the command line. The script launches the Python interpreter and\n  automatically imports igraph functions into the main namespace\n- Pickling (serialization) support for Graph objects\n- Plotting functionality based on the Cairo graphics library (so you need to\n  install python-cairo if you want to use it). Currently the following\n  objects can be plotted: graphs, adjacency matrices and dendrograms. Some\n  crude support for plotting histograms is also implemented. Plots can be\n  saved in PNG, SVG and PDF formats.\n- Unified Graph.layout method for accessing layout algorithms\n- Added interfaces to walktrap community detection and the BLISS isomorphism\n  algorithm\n- Added dyad and triad census functionality and motif counting\n- VertexSeq and EdgeSeq objects can now be restricted to subsets of the\n  whole network (e.g., you can select vertices/edges based on attributes,\n  degree, centrality and so on)\n\nNew in the C library\n--------------------\n\n- Many types (stack, matrix, dqueue, etc.) are templates now\n  They were also rewritten to provide a better organized interface\n- VF2 graph isomorphism routines can check subgraph isomorphism now,\n  and they are able to return matching(s)\n- The BLISS graph isomorphism algorithm is included in igraph now. See\n  igraph_canonical_permutation, igraph_isomorphic_bliss\n- We use ARPACK for eigenvalue/eigenvector calculation. This means that the\n  following functions were rewritten: igraph_pagerank,\n  igraph_community_leading_eigenvector_\\*. New functions based on\n  ARPACK: igraph_eigenvector_centrality, igraph_hub_score,\n  igraph_authority_score, igraph_arpack_rssolve, igraph_arpack_rnsolve\n- Experimental C attribute interface added. I.e. it is possible to use\n  graph/vertex/edge attributes from C code now.\n\n- Edge weights for Fruchterman-Reingold layout.\n- Line graph calculation.\n- Kautz and de Bruijn graph generators\n- Support for writing graphs in DOT format\n- Jaccard and Dice similarity coefficients added\n- igraph_count_multiple added\n- igraph_is_loop and igraph_is_multiple \"return\" boolean vectors\n- The graphopt layout algorithm was added, igraph_layout_graphopt\n- Generation of \"famous\" graphs, igraph_famous\n- Create graphs from LCF notation, igraph_lcf, igraph_lcf_vector\n- igraph_add_edge adds a single edge to the graph\n- Dyad census and triad cencus functions added\n- igraph_is_simple added\n- progress handlers are allowed to stop calculation\n- igraph_full_citation to create full citation networks\n- igraph_path_length_hist, create a histogram of path lengths\n- forest fire model added\n- DIMACS reader can handle different file types now\n- Adjacency list types made public now (igraph_adjlist_t, igraph_adjedgelist_t)\n- Biconnected components and articulation points can be computed\n- Eigenvector centrality computation\n- Kleinberg's hub and authority scores\n- igraph_to_undirected handles attributes now\n- Geometric random graph generator can return the coordinates of the vertices\n- Function added to convert leading eigenvector community structure result to\n  a membership vector (igraph_le_community_to_membership)\n- Weighted fast greedy community detection\n- Weighted page rank calculation\n- Functions for estimating closeness, betweenness, edge betweenness by\n  introducing a cutoff for path lengths\n- Weighted modularity calculation\n- igraph_permute_vertices added\n- Betweenness ans closeness calculations are speeded up\n- Startup positions can be supplied to the Kamada-Kawai layout\n  algorithms\n- igraph_read_graph_\\* functions can handle all possible line\n  terminators now (\\r, \\n, \\r\\n, \\n\\r)\n- Error handling was rewritten for walktrap community detection,\n  the calculation can be interrupted now\n- The maxflow/mincut functions allow to supply a null pointer for edge\n  capacities, implying unit capacities for all edges\n\nBugs corrected in the C library\n-------------------------------\n\n- Memory leak fixed in adjacency list handling\n- Memory leak fixed in maximal independent vertex set calculation\n- Fixed a bug when rewiring undirected graphs with igraph_rewire\n- Fixed edge betweenness community structure detection for unconnected graphs\n- Make igraph compile with Sun Studio\n- Betweenness bug fixed, when not computing for all vertices\n- memory usage of clique finding reduced\n- Corrected bugs for motif counts when not all motifs were counted,\n  but a 'cut' vector was used\n- Bugs fixed in trait games and cited type game\n- Accept underscore as letter in GML files\n- GML file directedness notation reversed, more logical this way\n\nigraph 0.4.5\n=========\n\nReleased January 1, 2008\n\nNew:\n- Cohesive block finding in the R interface, thanks to Peter McMahan\n  for contributing his code. See James Moody and Douglas R. White,\n  2003, in Structural Cohesion and Embeddedness: A Hierarchical\n  Conception of Social Groups American Sociological Review 68(1):1-25\n- Biconnected components and articulation points.\n- R interface: better printing of attributes.\n- R interface: graph attributes can be used via '$'.\n\nNew in the C library:\n- igraph_vector_bool_t data type.\n\nBug fixed:\n- Erdos-Renyi random graph generators rewritten.\n\nigraph 0.4.4\n=========\n\nReleased October 3, 2007\n\nThis release should work seemlessly with the new R 2.6.0 version.\nSome other bugs were also fixed:\n- A bug was fixed in the Erdos-Renyi graph generator, which sometimes\n  added an extra vertex.\n- MSVC compilation issues were fixed.\n- MinGW compilation fixes.\n\nigraph 0.4.3\n=========\n\nReleased August 13, 2007\n\nThe next one in the sequence of bugfix releases. Thanks to many people\nsending bug reports. Here are the changes:\n- Some memory leaks removed when using attributes from R or Python.\n- GraphML parser: entities and character data in multiple chunks are now handled correctly.\n- A bug corrected in edge betweenness community structure detection,\n  it failed if called many times from the same program/session.\n- Bug corrected in 'adjacent edges' edge iterator.\n- Python interface: edge and vertex attribute deletion bug corrected.\n- Edge betweeness community structure: handle unconnected graphs properly.\n- Fixed bug related to fast greedy community detection in unconnected graphs.\n- Use a different kind of parser (Push) for reading GraphML files. This is almost\n  invisible for users but fixed a nondeterministic bug when reading in GraphML\n  files.\n- R interface: plot now handles properly if called with a vector as the edge.width\n  argument for directed graphs.\n- R interface: bug (typo) corrected for walktrap.community and weighted graphs.\n- Test suite should run correctly on Cygwin now.\n\nigraph 0.4.2\n=========\n\nReleased June 7, 2007\n\nThis is another bugfix release, as there was a serious bug in the\nR package of the previous version: it could not read and write graphs\nto files in any format under MS Windows.\n\nSome other bits added:\n- circular Reingold-Tilford layout generator for trees\n- corrected a bug, Pajek files are written properly under MS Windows now.\n- arrow.size graphical edge parameter added in the R interface.\n\nigraph 0.4.1\n=========\n\nReleased May 23, 2007\n\nThis is a minor release, it corrects a number of bugs, mostly in the\nR package.\n\nigraph 0.4\n=========\n\nReleased May 21, 2007\n\nThe major new additions in this release is a bunch of community\ndetection algorithms and support for the GML file format. Here\nis the complete list of changes:\n\n\nNew in the C library\n--------------------\n\n- internal representation changed\n- neighbors always returns an ordered list\n- igraph_is_loop and igraph_is_multiple added\n\n- topological sorting\n- VF2 isomorphism algorithm\n- support for reading the file format of the Graph Database for isomorphism\n- igraph_mincut cat calculate the actual minimum cut\n- girth calculation added, thanks to Keith Briggs\n- support for reading and writing GML files\n\n- Walktrap community detection algorithm added, thanks to Matthieu Latapy\n  and Pascal Pons\n- edge betweenness based community detection algorithm added\n- fast greedy algorithm for community detection by Clauset et al. added\n  thanks to Aaron Clauset for sharing his code\n- leading eigenvector community detection algorithm by Mark Newman added\n- igraph_community_to_membership supporting function added, creates\n  a membership vector from a community structure merge tree\n- modularity calculation added\n\nNew in the R interface\n----------------------\n\n- as the internal representation changed, graphs stored with 'save'\n  with an older igraph version cannot be read back with the new\n  version reliably.\n- neighbors returns ordered lists\n\n- topological sorting\n- VF2 isomorphism algorithm\n- support for reading graphs from the Graph Database for isomorphism\n- girth calculation added, thanks to Keith Briggs\n- support for reading and writing GML files\n\n- Walktrap community detection algorithm added, thanks to Matthieu Latapy\n  and Pascal Pons\n- edge betweenness based community detection algorithm added\n- fast greedy algorithm for community detection by Clauset et al. added\n  thanks to Aaron Clauset for sharing his code\n- leading eigenvector community detection algorithm by Mark Newman added\n- functions for creating denrdograms from the output of the\n  community detection algorithms added\n- community.membership supporting function added, creates\n  a membership vector from a community structure merge tree\n- modularity calculation added\n\n- graphics parameter handling is completely rewritten, uniform handling\n  of colors and fonts, make sure you read ?igraph.plotting\n- new plotting parameter for edges: arrow.mode\n- a bug corrected when playing a nonlinear barabasi.game\n- better looking plotting in 3d using rglplot: edges are 3d too\n- rglplot layout is allowed to be two dimensional now\n- rglplot suspends updates while drawing, this makes it faster\n- loop edges are correctly plotted by all three plotting functions\n\n- better printing of attributes when printing graphs\n- summary of a graph prints attribute names\n- is.igraph rewritten to make it possible to inherit from the 'igraph' class\n- somewhat better looking progress meter for functions which support it\n\nOthers\n------\n\n- proper support for Debian packages (re)added\n- many functions benefit from the new internal representation and are\n  faster now: transitivity, reciprocity, graph operator functions like\n  intersection and union, etc.\n- igraph compiles with Microsoft Visual C++ now\n- there were some internal changes to make igraph a real graph algorithm\n  platform in the near future, but these are undocumented now\n\nBugs corrected\n--------------\n\n- corrected a bug when reading Pajek files: directed graphs were read as undirected\n\nDebian package repository available\n==================================\n\nDebian Linux users can now install and update the C interface\nusing the standard package manager. Just add the following two\nlines to /etc/apt/sources.list and install the libigraph and\nlibigraph-dev packages. Packages for the Python interface are\ncoming soon.\n\ndeb http://cneurocvs.rmki.kfki.hu /packages/binary/\n\ndeb-src http://cneurocvs.rmki.kfki.hu /packages/source/\n\nigraph 0.3.3\n============\n\nReleased February 28, 2007\n\nNew in the C library\n--------------------\n\n* igraph_connect_neighborhood, nomen est omen\n* igraph_watts_strogatz_game and igraph_rewire_edges\n* K-core decomposition: igraph_coreness\n* Clique and independent vertex set related functions:\n  igraph_cliques, igraph_independent_vertex_sets,\n  igraph_maximal_cliques, igraph_maximal_independent_vertex_sets,\n  igraph_independence_number, igraph_clique_number,\n  Some of these function were ported from the very_nauty library\n  of Keith Briggs, thanks Keith!\n* The GraphML file format now supports graph attributes\n* Transitivity calculation speeded up\n* Correct transitivity calculation for multigraphs (ie. non-simple graphs)\n\nNew in the R interface\n----------------------\n\n* connect.neighborhood\n* watts.strogatz.game and rewire.edges\n* K-core decomposition: graph.coreness\n* added the 'innei' and 'outnei' shorthands for vertex sequence indexing\n  see help(iterators)\n* Clique and independent vertex set related functions:\n  cliques, largest.cliques, maximal.cliques, clique.number,\n  independent.vertex.sets, largest.independent.vertex.sets,\n  maximal.independent.vertex.sets, independence.number\n* The GraphML file format now supports graph attributes\n* edge.lty argument added to plot.igraph and tkplot\n* Transitivity calculation speeded up\n* Correct transitivity calculation for multigraphs (ie. non-simple graphs)\n* alpha.centrality added, calculates Bonacich alpha centrality, see docs.\n\nBugs corrected\n--------------\n\n* 'make install' installs the library correctly on Cygwin now\n* Pajek parser corrected to read files with MacOS newline characters correctly\n* overflow bug in transitivity calculation for large graphs corrected\n* an internal memcpy/memmove bug causing some segfaults removed\n* R interface: tkplot bug with graphs containing a 'name' attribute\n* R interface: attribute handling bug when adding vertices\n* R interface: color selection bug corrected\n* R interface: plot.igraph when plotting loops\n\nPython interface documentation\n====================\n\nJan 8, 2007\n\nThe documentation of the Python interface is available.\nSee section 'documentation' in the menu on the left.\n\nigraph 0.3.2\n=========\n\nReleased Dec 19, 2006\n\nThis is a new major release, it contains many new things:\n\nChanges in the C library\n------------------------\n\n- igraph_maxdegree added, calculates the maximum degree in the graph\n- igraph_grg_game, geometric random graphs\n- igraph_density, graph density calculation\n- push-relabel maximum flow algorithm added, igraph_maxflow_value\n- minimum cut functions added based on maximum flow:\n  igraph_st_mincut_value, igraph_mincut_value, the Stoer-Wagner\n  algorithm is implemented for undirected graphs\n- vertex connectivity functions, usually based on maximum flow:\n  igraph_st_vertex_connectivity, igraph_vertex_connectivity\n- edge connectivity functions, usually based on maximum flow:\n  igraph_st_edge_connectivity, igraph_edge_connectivity\n- other functions based on maximum flow: igraph_edge_disjoint_paths,\n  igraph_vertex_disjoint_paths, igraph_adhesion, igraph_cohesion\n- dimacs file format added\n- igraph_to_directed handles attributes\n- igraph_constraint calculation corrected, it handles weighted graphs\n- spinglass-based community structure detection, the Joerg Reichardt --\n  Stefan Bornholdt algorithm added: igraph_spinglass_community,\n  igraph_spinglass_my_community\n- igraph_extended_chordal_rings, it creates extended chordal rings\n- 'no' argument added to igraph_clusters, it is possible to calculate\n  the number of clusters without calculating the clusters themselves\n- minimum spanning tree functions keep attributes now and also the\n  direction of the edges is kept in directed graphs\n- there are separate functions to calculate different types of\n  transitivity now\n- igraph_delete_vertices rewritten to allocate less memory for the new\n  graph\n- neighborhood related functions added: igraph_neighborhood,\n  igraph_neighborhood_size, igraph_neighborhood_graphs\n- two new games added based on different node types:\n  igraph_preference_game and igraph_asymmetric_preference_game\n- Laplacian of a graph can be calculated by the igraph_laplacian function\n\nChanges in the R interface\n--------------------------\n\n- bonpow function ported from SNA to calculate Bonacich power centrality\n- get.adjacency supports attributes now, this means that it sets the\n  colnames  and rownames attributes and can return attribute values in\n  the matrix instead of 0/1\n- grg.game, geometric random graphs\n- graph.density, graph density calculation\n- edge and vertex attributes can be added easily now when added new\n  edges with add.edges or new vertices with add.vertices\n- graph.data.frame creates graph from data frames, this can be used to\n  create graphs with edge attributes easily\n- plot.igraph and tkplot can plot self-loop edges now\n- graph.edgelist to create a graph from an edge list, can also handle\n  edge lists with symbolic names\n- get.edgelist has now a 'names' argument and can return symbolic\n  vertex names instead of vertex IDs, by default id uses the 'name'\n  vertex attribute is returned\n- printing graphs on screen also prints symbolic symbolic names\n  (the 'name' attribute if present)\n- maximum flow and minimum cut functions: graph.maxflow, graph.mincut\n- vertex and edge connectivity: edge.connectivity, vertex.connectivity\n- edge and vertex disjoint paths: edge.disjoint.paths,\n  vertex.disjoint.paths\n- White's cohesion and adhesion measure: graph.adhesion, graph.cohesion\n- dimacs file format added\n- as.directed handles attributes now\n- constraint corrected, it handles weighted graphs as well now\n- weighted attribute to graph.adjacency\n- spinglass-based community structure detection, the Joerg Reichardt --\n  Stefan Bornholdt algorithm added: spinglass.community\n- graph.extended.chordal.ring, extended chordal ring generation\n- no.clusters calculates the number of clusters without calculating\n  the clusters themselves\n- minimum spanning tree functions updated to keep attributes\n- transitivity can calculate local transitivity as well\n- neighborhood related functions added: neighborhood,\n  neighborhood.size, graph.neighborhood\n- new graph generators based on vertex types: preference.game and\n  asymmetric.preference.game\n\nBugs corrected\n--------------\n\n- attribute handling bug when deleting edges corrected\n- GraphML escaping and NaN handling corrected\n- bug corrected to make it possible compile the R package without the\n  libxml2 library\n- a bug in Erdos-Renyi graph generation corrected: it had problems\n  with generating large directed graphs\n- bug in constraint calculation corrected, it works well now\n- fixed memory leaks in igraph_read_graph_graphml\n- error handling bug corrected in igraph_read_graph_graphml\n- bug corrected in R version of graph.laplacian when normalized\n  Laplacian is requested\n- memory leak corrected in get.all.shortest.paths in the R package\n\nigraph 0.2.1\n=========\n\nReleased Aug 23, 2006\n\nThis is a bug-fix release. Bugs fixed:\n- igraph_reciprocity (reciprocity in R) corrected to avoid segfaults\n- some docs updates\n- various R package updated to make it conform to the CRAN rules\n\nigraph 0.2\n=========\n\nReleased Aug 18, 2006\n\nRelease time at last! There are many new things in igraph 0.2, the\nmost important ones:\n- reading writing Pajek and GraphML formats with attributes\n  (not all Pajek and GraphML files are supported, see documentation\n  for details)\n- iterators totally rewritten, it is much faster and cleaner now\n- the RANDEDU fast motif search algorithm is implemented\n- many new graph generators, both games and regular graphs\n- many new structural properties: transitivity, reciprocity, etc.\n- graph operators: union, intersection, difference, structural holes, etc.\n- conversion between directed and undirected graphs\n- new layout algorithms for trees and large graphs, 3D layouts\n\nand many more.\n\nNew things in the R package:\n- support for CTRL+C\n- new functions: Graph Laplacian, Burt's constraint, etc.\n- vertex/edge sequences totally rewritten, smart indexing (see manual)\n- new R manual and tutorial: 'Network Analysis with igraph', still\n  under development but useful\n- very basic 3D plotting using OpenGL\n\nAlthough this release was somewhat tested on Linux, MS Windows, Mac\nOSX, Solaris 8 and FreeBSD, no heavy testing was done, so it might\ncontain bugs, and we kindly ask you to send bug reports to make igraph\nbetter.\n\nigraph mailing lists\n====================\n\nAug 18, 2006\n\nI've set up two igraph mailing lists: igraph-help for\ngeneral igraph questions and discussion and\nigraph-anonunce for announcements. See\nhttp://lists.nongnu.org/mailman/listinfo/igraph-help and\nhttp://lists.nongnu.org/mailman/listinfo/igraph-announce\nfor subscription information, archives, etc.\n\nigraph 0.1\n=========\n\nReleased Jan 30, 2006\n\nAfter about a year of development this is the first \"official\" release\nof the igraph library. This release should be considered as beta\nsoftware, but it should be useful in general. Please send your\nquestions and comments.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.3740234375,
          "content": "[![Build Status on Azure Pipelines](https://dev.azure.com/igraph-team/igraph/_apis/build/status/igraph.igraph?branchName=master)](https://dev.azure.com/igraph-team/igraph/_build/latest?definitionId=1&branchName=master)\n![Build Status on Github Actions](https://github.com/igraph/igraph/workflows/MINGW/badge.svg?branch=master)\n[![codecov](https://codecov.io/gh/igraph/igraph/branch/master/graph/badge.svg?token=xGFabHJE2I)](https://codecov.io/gh/igraph/igraph)\n[![DOI](https://zenodo.org/badge/8546198.svg)](https://zenodo.org/badge/latestdoi/8546198)\n\nThe igraph library\n------------------\n\nigraph is a C library for complex network analysis and graph theory, with\nemphasis on efficiency, portability and ease of use.\n\nSee https://igraph.org for installation instructions and documentation.\n\nigraph can also be used from:\n\n - R — https://github.com/igraph/rigraph\n - Python — https://github.com/igraph/python-igraph\n - Mathematica — https://github.com/szhorvat/IGraphM\n\nigraph is a collaborative work of many people from all around the world —\nsee the [list of contributors here](./CONTRIBUTORS.md). If you would like\nto contribute yourself, [click here to see how you can\nhelp](./CONTRIBUTING.md).\n\nCitation\n--------\n\nIf you use igraph in your research, please cite\n\n> Csardi, G., & Nepusz, T. (2006). The igraph software package for complex network research. InterJournal, Complex Systems, 1695.\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 1.1845703125,
          "content": "# Need help with the igraph C library?\n\n_This repository is **only** about the C library of `igraph`. Do you use `igraph` from a different language? Then please see the repositories for the [R interface](https://github.com/igraph/rigraph/), the [Python interface](https://github.com/igraph/python-igraph/) or the [Mathematica interface](https://github.com/szhorvat/IGraphM)._\n\nHaving problems with igraph?\n\n - First, check our [documentation](https://igraph.org/c/html/latest/) for answers.\n    * Problems with installing `igraph`? Please check our [installation instructions](https://igraph.org/c/html/latest/igraph-Installation.html).\n    * Problems compiling your own code? Please check our [tutorial](https://igraph.org/c/html/latest/igraph-Tutorial.html) on writing your first `igraph` program.\n - Do you have a question about `igraph`? Please post your question on our [support forum](https://igraph.discourse.group/).\n - If you **found a bug**, please go ahead and [open a new issue](https://github.com/igraph/igraph/issues).\n\n We use the [issue tracker](https://github.com/igraph/igraph/issues) for bug reports and feature requests, and the [support forum](https://igraph.discourse.group/) for questions.\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 5.56640625,
          "content": "pool:\n  vmImage: 'ubuntu-latest'\n\nvariables:\n  CMAKE_COLOR_DIAGNOSTICS: ON\n  CMAKE_GENERATOR: Ninja\n  CCACHE_DIR: $(Pipeline.Workspace)/ccache\n  CCACHE_MAXSIZE: 256M\n  ASAN_OPTIONS: detect_stack_use_after_return=1:color=always\n  UBSAN_OPTIONS: print_stacktrace=1:color=always\n  OMP_NUM_THREADS: 1\n  CTEST_PARALLEL_LEVEL: 0 # Since CMake 3.29, a setting of 0 will try to use all available resources\n\njobs:\n  # In this test we install and generate locales so that igraph_enter/exit_safelocale() can be tested\n  - job: linux_static_vendored\n    steps:\n      - script: |\n          sudo apt-get update\n          sudo apt-get install ninja-build ccache language-pack-de -y\n        displayName: Install dependencies\n\n      - script: |\n          sudo locale-gen de_DE\n          sudo update-locale\n        displayName: Generate locales\n\n      - template: .azure/build.yml\n        parameters:\n          build_type: Debug\n          extra_cmake_args: '-DUSE_SANITIZER=Address\\;Undefined -DCMAKE_C_FLAGS=\"-Og -fno-sanitize-recover=undefined -fno-sanitize=float-divide-by-zero\" -DCMAKE_CXX_FLAGS=\"-Og -fno-sanitize-recover=undefined -fno-sanitize=float-divide-by-zero\"'\n\n  - job: linux_static_vendored_32\n    steps:\n      - script: sudo apt-get install ninja-build ccache -y\n        displayName: Install dependencies\n\n      - template: .azure/build.yml\n        parameters:\n          build_type: Debug\n          extra_cmake_args: '-DUSE_SANITIZER=Address\\;Undefined -DCMAKE_C_FLAGS=\"-Og -fno-sanitize-recover=undefined -fno-sanitize=float-divide-by-zero\" -DCMAKE_CXX_FLAGS=\"-Og -fno-sanitize-recover=undefined -fno-sanitize=float-divide-by-zero\" -DIGRAPH_INTEGER_SIZE=32'\n\n  - job: linux_static_external\n    steps:\n      - script: sudo apt-get install ninja-build ccache libgmp-dev libglpk-dev libarpack2-dev libopenblas-dev -y\n        displayName: Install dependencies\n\n      - template: .azure/build.yml\n        parameters:\n          int_blas: false\n          int_lapack: false\n          int_arpack: false\n          int_gmp: false\n          int_glpk: false\n          extra_cmake_args: '-DBLA_VENDOR=OpenBLAS'\n\n  - job: linux_shared_vendored\n    steps:\n      - script: sudo apt-get install ninja-build ccache -y\n        displayName: Install dependencies\n\n      - template: .azure/build.yml\n        parameters:\n          build_shared: true\n\n  - job: linux_shared_external\n    steps:\n      - script: sudo apt-get install ninja-build ccache libgmp-dev libglpk-dev libarpack2-dev libopenblas-dev -y\n        displayName: Install dependencies\n\n      - template: .azure/build.yml\n        parameters:\n          int_blas: false\n          int_lapack: false\n          int_arpack: false\n          int_gmp: false\n          int_glpk: false\n          extra_cmake_args: '-DBLA_VENDOR=OpenBLAS'\n          build_shared: true\n\n  - job: linux_clang_20\n    steps:\n      - script: |\n          sudo apt-get install ninja-build ccache -y\n          wget https://apt.llvm.org/llvm.sh\n          chmod +x llvm.sh\n          sudo ./llvm.sh 20\n        displayName: Install dependencies\n\n      - template: .azure/build.yml\n        parameters:\n          build_type: Debug\n          extra_cmake_args: '-DUSE_SANITIZER=Address\\;Undefined -DCMAKE_C_FLAGS=\"-Og -fno-sanitize-recover=undefined -fno-sanitize=float-divide-by-zero\" -DCMAKE_CXX_FLAGS=\"-Og -fno-sanitize-recover=undefined -fno-sanitize=float-divide-by-zero\" -DCMAKE_C_COMPILER=clang-20  -DCMAKE_CXX_COMPILER=clang++-20'\n\n  - job: linux_x87\n    steps:\n      - script: sudo apt-get install ninja-build ccache -y\n        displayName: Install dependencies\n\n      - template: .azure/build.yml\n        parameters:\n          extra_cmake_args: '-DCMAKE_C_FLAGS=\"-mfpmath=387\" -DCMAKE_CXX_FLAGS=\"-mfpmath=387\"'\n\n  - job: linux_alpine\n    steps:\n      # https://github.com/alpinelinux/alpine-chroot-install\n      - bash: |\n          set -e\n          wget https://raw.githubusercontent.com/alpinelinux/alpine-chroot-install/v0.14.0/alpine-chroot-install && echo 'ccbf65f85cdc351851f8ad025bb3e65bae4d5b06  alpine-chroot-install' | sha1sum -c || exit 1\n          alpine() { /alpine/enter-chroot -u \"$USER\" \"$@\"; }\n          sudo sh alpine-chroot-install -p 'build-base linux-headers git cmake ninja bison flex libxml2-dev' -k 'OMP_NUM_THREADS CTEST_.* CMAKE_.*'\n          mkdir build && cd build\n          alpine cmake .. -DIGRAPH_USE_INTERNAL_BLAS=ON -DIGRAPH_USE_INTERNAL_LAPACK=ON -DIGRAPH_USE_INTERNAL_ARPACK=ON -DIGRAPH_USE_INTERNAL_GLPK=ON -DIGRAPH_USE_INTERNAL_GMP=ON -DIGRAPH_USE_INTERNAL_PLFIT=ON -DIGRAPH_ENABLE_TLS=ON -DIGRAPH_VERIFY_FINALLY_STACK=ON\n          alpine cmake --build . --target build_tests\n          alpine ctest --output-on-failure\n\n  - job: macos\n    pool:\n      vmImage: macos-latest\n    steps:\n      - script: |\n          brew install ninja ccache\n        displayName: Install dependencies\n\n      - template: .azure/build.yml\n        parameters:\n          int_blas: false\n          int_lapack: false\n\n  - job: windows_static\n    pool:\n       vmImage: windows-latest\n\n    steps:\n      - template: .azure/build-win.yml\n\n  - job: windows_shared\n    pool:\n       vmImage: windows-latest\n\n    steps:\n      - template: .azure/build-win.yml\n        parameters:\n          build_shared: true\n          vsver: '14.4' # latest VS2022\n          vcpkg_target_triplet: x64-windows\n\n  - job: documentation\n    steps:\n      - script: sudo apt-get install ninja-build xmlto texinfo source-highlight libxml2-utils xsltproc fop docbook2x -y\n        displayName: Install dependencies\n\n      - task: CMake@1\n        displayName: CMake\n        inputs:\n          cmakeArgs: '..'\n\n      - task: CMake@1\n        displayName: Doc build\n        inputs:\n          cmakeArgs: '--build . --target doc'\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.4765625,
          "content": "# See https://docs.codecov.io/docs/codecov-yaml for documentation\n\ncodecov:\n  require_ci_to_pass: true\n\ncoverage:\n  precision: 2\n  round: down\n  range: \"50...100\"\n  status:\n    project:\n      default:\n        threshold: 0.01%\n\nparsers:\n  gcov:\n    branch_detection:\n      conditional: yes\n      loop: yes\n      method: no\n      macro: no\n\ncomment:\n  layout: \"reach,diff,flags,files,footer\"\n  behavior: default\n  require_changes: false\n\nignore:\n  - \"tests\"\n  - \"examples\"\n  - \"vendor/pcg\"\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzzing",
          "type": "tree",
          "content": null
        },
        {
          "name": "igraph.pc.in",
          "type": "blob",
          "size": 0.3671875,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=@CMAKE_INSTALL_PREFIX@\nlibdir=@PKGCONFIG_LIBDIR@\nincludedir=@PKGCONFIG_INCLUDEDIR@\n\nName: libigraph\nDescription: @PROJECT_DESCRIPTION@\nVersion: @PROJECT_VERSION@\nURL: @PROJECT_HOMEPAGE_URL@\nLibs: -L${libdir} -ligraph\nLibs.private: @PKGCONFIG_LIBS_PRIVATE@\nRequires.private: @PKGCONFIG_REQUIRES_PRIVATE@\nCflags: -I${includedir}/igraph\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "interfaces",
          "type": "tree",
          "content": null
        },
        {
          "name": "msvc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}