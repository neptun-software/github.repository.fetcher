{
  "metadata": {
    "timestamp": 1736709761634,
    "page": 193,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "HarbourMasters/Shipwright",
      "stars": 3455,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.94140625,
          "content": "# Cache files\n__pycache__/\n.pyc\n.DS_Store\n\n# Text editor remnants\n.vscode/\n.vs/\n.idea/\ncmake-build-**\nvenv/\n.cache/\n\n# Project-specific ignores\nbuild/\nexpected/\nnotes/\nbaserom/\ndocs/doxygen/\n*.elf\n*.sra\n*.z64\n*.n64\n*.v64\n*.map\n*.dump\nout.txt\n*.sln\n*.vcxproj\n*.vcxproj.user\n*.vcxproj.filters\n\n# Tool artifacts\ntools/mipspro7.2_compiler/\ntools/overlayhelpers/batchdisasm/output/*\ntools/overlayhelpers/batchdisasm/output2/*\ntools/overlayhelpers/batchdisasm/mipsdisasm/*\ntools/disasm/output/*\ntools/asmsplitter/asm/*\ntools/asmsplitter/c/*\nctx.c\ntools/*dSYM/\ngraphs/\n.netcoredbg_hist\n\n# Assets\n*.png\n*.jpg\n*.mdli\n*.anmi\n*.obj\n*.mtl\n*.fbx\n!*_custom*\n.extracted-assets.json\n\n!OTRExporter/assets/**/*.png\n\n# Docs\n!docs/tutorial/\n\n# Per-user configuration\n.python-version\n\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n*.out\n*.o\n*.d\nlib/libgfxd/libgfxd.a\nExporterTest/ExporterTest.a\nZAPDUtils/ZAPDUtils.a\n.vscode/\nbuild/\nexternal/\nZAPDUtils/build/\nZAPD/BuildInfo.h\n\nDebugObj/*\nReleaseObj/*\n.tags\ntags\n*.otr\n*.sav\nshipofharkinian.ini\nshipofharkinian.json\nimgui.ini\n\n# Switch Stuff\n\n*.nro\n*.nacp\nZAPDTR/ZAPDUtils/lib/*\n!/soh/icon.jpg\n\n# Xcode\nxcuserdata/\n*.xcconfig\n*.xcodeproj/*\n!*.xcodeproj/project.pbxproj\n!*.xcodeproj/xcshareddata/\n!*.xcworkspace/contents.xcworkspacedata\n/*.gcno\n**/xcshareddata/WorkspaceSettings.xcsettings\n\n# cmake\nCMakeLists.txt.user\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\n_deps\n_packages\n*/extract_assets_cmake*\n/build*\n\nsoh/src/boot/build.c\nsoh/properties.h\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2744140625,
          "content": "[submodule \"libultraship\"]\n\tpath = libultraship\n\turl = https://github.com/kenix3/libultraship.git\n[submodule \"ZAPDTR\"]\n\tpath = ZAPDTR\n\turl = https://github.com/harbourmasters/ZAPDTR\n[submodule \"OTRExporter\"]\n\tpath = OTRExporter\n\turl = https://github.com/harbourmasters/OTRExporter\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 13.8154296875,
          "content": "cmake_minimum_required(VERSION 3.16.0 FATAL_ERROR)\n\nset(CMAKE_SYSTEM_VERSION 10.0 CACHE STRING \"\" FORCE)\nset(CMAKE_CXX_STANDARD 20 CACHE STRING \"The C++ standard to use\")\n\nset(CMAKE_OSX_DEPLOYMENT_TARGET \"10.15\" CACHE STRING \"Minimum OS X deployment version\")\n\nproject(Ship VERSION 8.0.6 LANGUAGES C CXX)\ninclude(CMake/soh-cvars.cmake)\ninclude(CMake/lus-cvars.cmake)\n\noption(SUPPRESS_WARNINGS \"Suppress warnings in LUS and src (decomp)\" ON)\nif(SUPPRESS_WARNINGS)\n    MESSAGE(\"Suppressing warnings in LUS and src\")\n    if(MSVC)\n        set(WARNING_OVERRIDE /w)\n    else()\n        set(WARNING_OVERRIDE -w)\n    endif()\nelse()\n    MESSAGE(\"Skipping warning suppression\")\nendif()\n\nset(NATO_PHONETIC_ALPHABET\n  \"Alfa\" \"Bravo\" \"Charlie\" \"Delta\" \"Echo\" \"Foxtrot\" \"Golf\" \"Hotel\"\n  \"India\" \"Juliett\" \"Kilo\" \"Lima\" \"Mike\" \"November\" \"Oscar\" \"Papa\"\n  \"Quebec\" \"Romeo\" \"Sierra\" \"Tango\" \"Uniform\" \"Victor\" \"Whiskey\"\n  \"Xray\" \"Yankee\" \"Zulu\"\n)\n\n# Get the patch version number from the project version\nmath(EXPR PATCH_INDEX \"${PROJECT_VERSION_PATCH}\")\n\n# Use the patch number to select the correct word\nlist(GET NATO_PHONETIC_ALPHABET ${PATCH_INDEX} PROJECT_PATCH_WORD)\n\nset(PROJECT_BUILD_NAME \"MacReady ${PROJECT_PATCH_WORD}\" CACHE STRING \"\" FORCE)\nset(PROJECT_TEAM \"github.com/harbourmasters\" CACHE STRING \"\" FORCE)\n\nexecute_process(\n    COMMAND git branch --show-current\n    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n    OUTPUT_VARIABLE GIT_BRANCH\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\nset(CMAKE_PROJECT_GIT_BRANCH \"${GIT_BRANCH}\" CACHE STRING \"Git branch\" FORCE)\n\nexecute_process(\n    COMMAND git rev-parse HEAD\n    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n    OUTPUT_VARIABLE GIT_COMMIT_HASH\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\nset(CMAKE_PROJECT_GIT_COMMIT_HASH \"${GIT_COMMIT_HASH}\" CACHE STRING \"Git commit hash\" FORCE)\n\nexecute_process(\n    COMMAND git describe --tags --abbrev=0 --exact-match HEAD\n    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n    OUTPUT_VARIABLE GIT_COMMIT_TAG\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\nif(NOT GIT_COMMIT_TAG)\n    set(GIT_COMMIT_TAG \"\" CACHE STRING \"Git commit tag\" FORCE)\nendif()\n\nset(CMAKE_PROJECT_GIT_COMMIT_TAG \"${GIT_COMMIT_TAG}\" CACHE STRING \"Git commit tag\" FORCE)\n\nset_property(DIRECTORY ${CMAKE_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT soh)\nadd_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)\nadd_compile_options($<$<CXX_COMPILER_ID:MSVC>:/utf-8>)\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n    include(CMake/automate-vcpkg.cmake)\n\n    set(VCPKG_TRIPLET x64-windows-static)\n    set(VCPKG_TARGET_TRIPLET x64-windows-static)\n\n    vcpkg_bootstrap()\n    vcpkg_install_packages(zlib bzip2 libzip libpng sdl2 sdl2-net glew glfw3 nlohmann-json tinyxml2 spdlog)\n\n    if (CMAKE_C_COMPILER_LAUNCHER MATCHES \"ccache|sccache\")\n        set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT Embedded)\n    endif()\nendif()\n\n################################################################################\n# Set target arch type if empty. Visual studio solution generator provides it.\n################################################################################\nif (CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n    if(NOT CMAKE_VS_PLATFORM_NAME)\n        set(CMAKE_VS_PLATFORM_NAME \"x64\")\n    endif()\n    message(\"${CMAKE_VS_PLATFORM_NAME} architecture in use\")\n\n    if(NOT (\"${CMAKE_VS_PLATFORM_NAME}\" STREQUAL \"x64\"\n        OR \"${CMAKE_VS_PLATFORM_NAME}\" STREQUAL \"Win32\"))\n        message(FATAL_ERROR \"${CMAKE_VS_PLATFORM_NAME} arch is not supported!\")\n    endif()\nendif()\n\n################################################################################\n# Global configuration types\n################################################################################\nif (CMAKE_SYSTEM_NAME STREQUAL \"NintendoSwitch\")\nset(CMAKE_C_FLAGS_DEBUG \"-g -ffast-math -DDEBUG\")\nset(CMAKE_CXX_FLAGS_DEBUG \"-g -ffast-math -DDEBUG\")\nset(CMAKE_C_FLAGS_RELEASE \"-O3 -ffast-math -DNDEBUG\")\nset(CMAKE_CXX_FLAGS_RELEASE \"-O3 -ffast-math -DNDEBUG\")\nelse()\nset(CMAKE_C_FLAGS_RELEASE \"-O2 -DNDEBUG\")\nset(CMAKE_CXX_FLAGS_RELEASE \"-O2 -DNDEBUG\")\nset(CMAKE_OBJCXX_FLAGS_RELEASE \"-O2 -DNDEBUG\")\nendif()\n\nif(NOT CMAKE_BUILD_TYPE )\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING \"Choose the type of build.\" FORCE)\nendif()\n\n################################################################################\n# Common utils\n################################################################################\ninclude(CMake/Utils.cmake)\n\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n    get_linux_lsb_release_information()\n    message(STATUS \"Linux ${LSB_RELEASE_ID_SHORT} ${LSB_RELEASE_VERSION_SHORT} ${LSB_RELEASE_CODENAME_SHORT}\")\nelse()\n    message(STATUS ${CMAKE_SYSTEM_NAME})\nendif()\n\n################################################################################\n# Additional Global Settings(add specific info there)\n################################################################################\ninclude(CMake/GlobalSettingsInclude.cmake OPTIONAL)\n\n################################################################################\n# Use solution folders feature\n################################################################################\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n################################################################################\n# Set LUS vars\n################################################################################\n\n# Enable the Gfx debugger in LUS to use libgfxd from ZAPDTR\nset(GFX_DEBUG_DISASSEMBLER ON)\n\n# Tell LUS we're using F3DEX_GBI_2 (in a way that doesn't break libgfxd)\nset(GBI_UCODE F3DEX_GBI_2)\n\n################################################################################\n# Set CONTROLLERBUTTONS_T\n################################################################################\nadd_compile_definitions(CONTROLLERBUTTONS_T=uint32_t)\n\n################################################################################\n# Sub-projects\n################################################################################\nadd_subdirectory(libultraship ${CMAKE_BINARY_DIR}/libultraship)\ntarget_compile_options(libultraship PRIVATE \"${WARNING_OVERRIDE}\")\nadd_subdirectory(ZAPDTR/ZAPD ${CMAKE_BINARY_DIR}/ZAPD)\nadd_subdirectory(OTRExporter)\nadd_subdirectory(soh)\n\nset_property(TARGET soh PROPERTY APPIMAGE_DESKTOP_FILE_TERMINAL YES)\nset_property(TARGET soh PROPERTY APPIMAGE_DESKTOP_FILE \"${CMAKE_SOURCE_DIR}/scripts/linux/appimage/soh.desktop\")\nset_property(TARGET soh PROPERTY APPIMAGE_ICON_FILE \"${CMAKE_BINARY_DIR}/sohIcon.png\")\n\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\ninstall(PROGRAMS \"${CMAKE_BINARY_DIR}/linux/soh.sh\" DESTINATION . COMPONENT appimage)\ninstall(FILES \"${CMAKE_SOURCE_DIR}/soh.otr\" DESTINATION . COMPONENT ship)\ninstall(TARGETS ZAPD DESTINATION ./assets/extractor COMPONENT extractor)\ninstall(DIRECTORY \"${CMAKE_SOURCE_DIR}/soh/assets/extractor/\" DESTINATION ./assets/extractor COMPONENT extractor)\ninstall(DIRECTORY \"${CMAKE_SOURCE_DIR}/soh/assets/xml/\" DESTINATION ./assets/extractor/xmls COMPONENT extractor)\ninstall(DIRECTORY \"${CMAKE_SOURCE_DIR}/OTRExporter/CFG/filelists/\" DESTINATION ./assets/extractor/filelists COMPONENT extractor)\ninstall(FILES \"${CMAKE_SOURCE_DIR}/OTRExporter/CFG/ActorList_OoTMqDbg.txt\" DESTINATION ./assets/extractor/symbols COMPONENT extractor)\ninstall(FILES \"${CMAKE_SOURCE_DIR}/OTRExporter/CFG/ObjectList_OoTMqDbg.txt\" DESTINATION ./assets/extractor/symbols COMPONENT extractor)\ninstall(FILES \"${CMAKE_SOURCE_DIR}/OTRExporter/CFG/SymbolMap_OoTMqDbg.txt\" DESTINATION ./assets/extractor/symbols COMPONENT extractor)\nendif()\n\nif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Windows\")\ninstall(DIRECTORY \"${CMAKE_SOURCE_DIR}/soh/assets/extractor/\" DESTINATION ./assets/extractor COMPONENT ship)\ninstall(DIRECTORY \"${CMAKE_SOURCE_DIR}/soh/assets/xml/\" DESTINATION ./assets/extractor/xmls COMPONENT ship)\ninstall(DIRECTORY \"${CMAKE_SOURCE_DIR}/OTRExporter/CFG/filelists/\" DESTINATION ./assets/extractor/filelists COMPONENT ship)\ninstall(FILES \"${CMAKE_SOURCE_DIR}/OTRExporter/CFG/ActorList_OoTMqDbg.txt\" DESTINATION ./assets/extractor/symbols COMPONENT ship)\ninstall(FILES \"${CMAKE_SOURCE_DIR}/OTRExporter/CFG/ObjectList_OoTMqDbg.txt\" DESTINATION ./assets/extractor/symbols COMPONENT ship)\ninstall(FILES \"${CMAKE_SOURCE_DIR}/OTRExporter/CFG/SymbolMap_OoTMqDbg.txt\" DESTINATION ./assets/extractor/symbols COMPONENT ship)\nendif()\n\nfind_package(Python3 COMPONENTS Interpreter)\n\n# Target to generate OTRs\nadd_custom_target(\n    ExtractAssets\n    # CMake versions prior to 3.17 do not have the rm command, use remove instead for older versions\n    COMMAND ${CMAKE_COMMAND} -E $<IF:$<VERSION_LESS:${CMAKE_VERSION},3.17>,remove,rm> -f oot.otr oot-mq.otr soh.otr\n    COMMAND ${Python3_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/OTRExporter/extract_assets.py -z \"$<TARGET_FILE:ZAPD>\" --non-interactive --xml-root ../soh/assets/xml --custom-otr-file soh.otr \"--custom-assets-path\" ${CMAKE_CURRENT_SOURCE_DIR}/soh/assets/custom --port-ver \"${CMAKE_PROJECT_VERSION}\"\n    COMMAND ${CMAKE_COMMAND} -DSYSTEM_NAME=${CMAKE_SYSTEM_NAME} -DTARGET_DIR=\"$<TARGET_FILE_DIR:ZAPD>\" -DSOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR} -DBINARY_DIR=${CMAKE_BINARY_DIR} -P ${CMAKE_CURRENT_SOURCE_DIR}/copy-existing-otrs.cmake\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/OTRExporter\n    COMMENT \"Running asset extraction...\"\n    DEPENDS ZAPD\n    BYPRODUCTS oot.otr ${CMAKE_SOURCE_DIR}/oot.otr oot-mq.otr ${CMAKE_SOURCE_DIR}/oot-mq.otr ${CMAKE_SOURCE_DIR}/soh.otr\n)\n\n# Target to generate headers\nadd_custom_target(\n    ExtractAssetHeaders\n    COMMAND ${Python3_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/OTRExporter/extract_assets.py -z \"$<TARGET_FILE:ZAPD>\" --non-interactive --xml-root ../soh/assets/xml --gen-headers\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/OTRExporter\n    COMMENT \"Generating asset headers...\"\n    DEPENDS ZAPD\n)\n\n# Target to generate only soh.otr\nadd_custom_target(\n    GenerateSohOtr\n    # CMake versions prior to 3.17 do not have the rm command, use remove instead for older versions\n    COMMAND ${CMAKE_COMMAND} -E $<IF:$<VERSION_LESS:${CMAKE_VERSION},3.17>,remove,rm> -f soh.otr\n    COMMAND ${Python3_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/OTRExporter/extract_assets.py -z \"$<TARGET_FILE:ZAPD>\" --norom --custom-otr-file soh.otr \"--custom-assets-path\" ${CMAKE_CURRENT_SOURCE_DIR}/soh/assets/custom --port-ver \"${CMAKE_PROJECT_VERSION}\"\n    COMMAND ${CMAKE_COMMAND} -DSYSTEM_NAME=${CMAKE_SYSTEM_NAME} -DTARGET_DIR=\"$<TARGET_FILE_DIR:ZAPD>\" -DSOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR} -DBINARY_DIR=${CMAKE_BINARY_DIR} -DONLYSOHOTR=On -P ${CMAKE_CURRENT_SOURCE_DIR}/copy-existing-otrs.cmake\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/OTRExporter\n    COMMENT \"Generating soh.otr...\"\n    DEPENDS ZAPD\n)\n\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n    find_package(ImageMagick COMPONENTS convert)\n    if (ImageMagick_FOUND)\n        execute_process (\n            COMMAND ${ImageMagick_convert_EXECUTABLE} soh/macosx/sohIcon.png -resize 512x512 ${CMAKE_BINARY_DIR}/sohIcon.png\n            OUTPUT_VARIABLE outVar\n        )\n    endif()\nendif()\n\nif(CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\nadd_custom_target(CreateOSXIcons\n    COMMAND mkdir -p ${CMAKE_BINARY_DIR}/macosx/soh.iconset\n    COMMAND sips -z 16 16     soh/macosx/sohIcon.png --out ${CMAKE_BINARY_DIR}/macosx/soh.iconset/icon_16x16.png\n    COMMAND sips -z 32 32     soh/macosx/sohIcon.png --out ${CMAKE_BINARY_DIR}/macosx/soh.iconset/icon_16x16@2x.png\n    COMMAND sips -z 32 32     soh/macosx/sohIcon.png --out ${CMAKE_BINARY_DIR}/macosx/soh.iconset/icon_32x32.png\n    COMMAND sips -z 64 64     soh/macosx/sohIcon.png --out ${CMAKE_BINARY_DIR}/macosx/soh.iconset/icon_32x32@2x.png\n    COMMAND sips -z 128 128   soh/macosx/sohIcon.png --out ${CMAKE_BINARY_DIR}/macosx/soh.iconset/icon_128x128.png\n    COMMAND sips -z 256 256   soh/macosx/sohIcon.png --out ${CMAKE_BINARY_DIR}/macosx/soh.iconset/icon_128x128@2x.png\n    COMMAND sips -z 256 256   soh/macosx/sohIcon.png --out ${CMAKE_BINARY_DIR}/macosx/soh.iconset/icon_256x256.png\n    COMMAND sips -z 512 512   soh/macosx/sohIcon.png --out ${CMAKE_BINARY_DIR}/macosx/soh.iconset/icon_256x256@2x.png\n    COMMAND sips -z 512 512   soh/macosx/sohIcon.png --out ${CMAKE_BINARY_DIR}/macosx/soh.iconset/icon_512x512.png\n    COMMAND cp                soh/macosx/sohIcon.png ${CMAKE_BINARY_DIR}/macosx/soh.iconset/icon_512x512@2x.png\n    COMMAND iconutil -c icns -o ${CMAKE_BINARY_DIR}/macosx/soh.icns ${CMAKE_BINARY_DIR}/macosx/soh.iconset\n    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n    COMMENT \"Creating OSX icons ...\"\n    )\nadd_dependencies(soh CreateOSXIcons)\n\ninstall(TARGETS ZAPD DESTINATION ${CMAKE_BINARY_DIR}/assets/extractor)\n\nset(PROGRAM_PERMISSIONS_EXECUTE OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_EXECUTE WORLD_READ)\n\ninstall(DIRECTORY \"${CMAKE_SOURCE_DIR}/soh/assets/extractor/\" DESTINATION ./assets/extractor)\ninstall(DIRECTORY \"${CMAKE_SOURCE_DIR}/soh/assets/xml/\" DESTINATION ./assets/extractor/xmls)\ninstall(DIRECTORY \"${CMAKE_SOURCE_DIR}/OTRExporter/CFG/filelists/\" DESTINATION ./assets/extractor/filelists)\ninstall(FILES \"${CMAKE_SOURCE_DIR}/OTRExporter/CFG/ActorList_OoTMqDbg.txt\" DESTINATION ./assets/extractor/symbols)\ninstall(FILES \"${CMAKE_SOURCE_DIR}/OTRExporter/CFG/ObjectList_OoTMqDbg.txt\" DESTINATION ./assets/extractor/symbols)\ninstall(FILES \"${CMAKE_SOURCE_DIR}/OTRExporter/CFG/SymbolMap_OoTMqDbg.txt\" DESTINATION ./assets/extractor/symbols)\n\ninstall(DIRECTORY ${CMAKE_BINARY_DIR}/assets\n        DESTINATION .\n        PATTERN ZAPD.out\n        PERMISSIONS ${PROGRAM_PERMISSIONS_EXECUTE}\n        )\n\ninstall(CODE \"\n    include(BundleUtilities)\n    fixup_bundle(\\\"\\${CMAKE_INSTALL_PREFIX}/soh-macos\\\" \\\"\\\" \\\"${dirs}\\\")\n    \")\n\nendif()\n\nif(CMAKE_SYSTEM_NAME MATCHES \"Windows|NintendoSwitch|CafeOS\")\ninstall(FILES ${CMAKE_SOURCE_DIR}/README.md DESTINATION . COMPONENT ship RENAME readme.txt )\nendif()\n\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n    set(CPACK_GENERATOR \"External\")\nelseif(CMAKE_SYSTEM_NAME MATCHES \"Windows|NintendoSwitch|CafeOS\")\n    set(CPACK_GENERATOR \"ZIP\")\nelseif(CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n    set(CPACK_GENERATOR \"Bundle\")\nendif()\n\nset(CPACK_PROJECT_CONFIG_FILE ${CMAKE_SOURCE_DIR}/CMake/Packaging-2.cmake)\ninclude(CMake/Packaging.cmake)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.3984375,
          "content": "FROM ubuntu:20.04 as build\n\nENV LANG C.UTF-8\nARG DEBIAN_FRONTEND=noninteractive\n\nENV GCCVER=10\nRUN apt-get update && \\\n\tapt-get upgrade -y && \\\n\tapt-get install -y \\\n\t\tbinutils \\\n\t\tgcc-${GCCVER} \\\n\t\tg++-${GCCVER} \\\n\t\tpatchelf \\\n\t\tp7zip-full \\\n\t\tpython3 \\\n\t\tcmake \\\n\t\tmake \\\n\t\tcurl \\\n\t\tgit \\\n\t\tlld \\\n\t\tlibsdl2-dev \\\n\t\tzlib1g-dev \\\n\t\tlibbz2-dev \\\n\t\tlibpng-dev \\\n\t\tlibgles2-mesa-dev \\\n\t\twget \\\n\t\tgpg \\\n\t\timagemagick \\\n\t\tninja-build && \\\n\tapt-get install -y software-properties-common && \\ \n\twget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \\\n\tapt-add-repository \"deb https://apt.kitware.com/ubuntu/ focal main\" && \\\n\tapt-get update && \\\n\tapt-get upgrade -y && \\\n\tupdate-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCCVER} 10 && \\\n\tupdate-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${GCCVER} 10 \n\t\nRUN git clone https://github.com/Perlmint/glew-cmake.git && \\\n\tcmake glew-cmake && \\\n\tmake -j$(nproc) && \\\n\tmake install\n\nENV SDL2VER=2.0.22\nRUN curl -sLO https://libsdl.org/release/SDL2-${SDL2VER}.tar.gz && \\\n\ttar -xzf SDL2-${SDL2VER}.tar.gz && \\\n\tcd SDL2-${SDL2VER} && \\\n\t./configure --build=x86_64-linux-gnu && \\\n\tmake -j$(nproc) && make install && \\\n\trm ../SDL2-${SDL2VER}.tar.gz && \\\n\tcp -av /usr/local/lib/libSDL* /lib/x86_64-linux-gnu/\n\nENV SDL2NETVER=2.2.0\nRUN curl -sLO https://www.libsdl.org/projects/SDL_net/release/SDL2_net-${SDL2NETVER}.tar.gz && \\\n\ttar -xzf SDL2_net-${SDL2NETVER}.tar.gz && \\\n\tcd SDL2_net-${SDL2NETVER} && \\\n\t./configure --build=x86_64-linux-gnu && \\\n\tmake -j$(nproc) && make install && \\\n\trm ../SDL2_net-${SDL2NETVER}.tar.gz && \\\n\tcp -av /usr/local/lib/libSDL* /lib/x86_64-linux-gnu/\n\nRUN \\\n\tln -sf /proc/self/mounts /etc/mtab && \\\n\tmkdir -p /usr/local/share/keyring/ && \\\n\twget -O /usr/local/share/keyring/devkitpro-pub.gpg https://apt.devkitpro.org/devkitpro-pub.gpg && \\\n\techo \"deb [signed-by=/usr/local/share/keyring/devkitpro-pub.gpg] https://apt.devkitpro.org stable main\" > /etc/apt/sources.list.d/devkitpro.list && \\\n\tapt-get update -y && \\\n\tapt-get install -y devkitpro-pacman && \\\n\tyes | dkp-pacman -Syu switch-dev switch-portlibs wiiu-dev wiiu-portlibs --noconfirm\n\nENV DEVKITPRO=/opt/devkitpro\nENV DEVKITARM=/opt/devkitpro/devkitARM\nENV DEVKITPPC=/opt/devkitpro/devkitPPC\nENV PATH=$PATH:/opt/devkitpro/portlibs/switch/bin/:$DEVKITPPC/bin\nENV WUT_ROOT=$DEVKITPRO/wut\n\nRUN mkdir /soh\nWORKDIR /soh\n"
        },
        {
          "name": "OTRExporter",
          "type": "commit",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.2646484375,
          "content": "![Ship of Harkinian](docs/shiptitle.darkmode.png#gh-dark-mode-only)\n![Ship of Harkinian](docs/shiptitle.lightmode.png#gh-light-mode-only)\n\n## Website\n\nOfficial Website: https://www.shipofharkinian.com/\n\n## Discord\n\nOfficial Discord: https://discord.com/invite/shipofharkinian\n\nIf you're having any trouble after reading through this `README`, feel free to ask for help in the Support text channels. Please keep in mind that we do not condone piracy.\n\n# Quick Start\n\nThe Ship does not include any copyrighted assets.  You are required to provide a supported copy of the game.\n\n### 1. Verify your ROM dump\nYou can verify you have dumped a supported copy of the game by using the compatibility checker at https://ship.equipment/. If you'd prefer to manually validate your ROM dump, you can cross-reference its `sha1` hash with the hashes [here](docs/supportedHashes.json).\n\n### 2. Download The Ship of Harkinian from [Releases](https://github.com/HarbourMasters/Shipwright/releases)\n\n### 3. Launch the Game!\n#### Windows\n* Extract the zip\n* Launch `soh.exe`\n\n#### Linux\n* Place your supported copy of the game in the same folder as the appimage.\n* Execute `soh.appimage`.  You may have to `chmod +x` the appimage via terminal.\n\n#### macOS\n* Run `soh.app`. When prompted, select your supported copy of the game.\n* You should see a notification saying `Processing OTR`, then, once the process is complete, you should get a notification saying `OTR Successfully Generated`, then the game should start.\n\n#### Nintendo Switch\n* Run one of the PC releases to generate an `oot.otr` and/or `oot-mq.otr` file. After launching the game on PC, you will be able to find these files in the same directory as `soh.exe` or `soh.appimage`. On macOS, these files can be found in `/Users/<username>/Library/Application Support/com.shipofharkinian.soh/`\n* Copy the files to your sd card\n```\nsdcard\n└── switch\n    └── soh\n        ├── oot-mq.otr\n        ├── oot.otr\n        ├── soh.nro\n        └── soh.otr\n```\n* Launch via Atmosphere's `Game+R` launcher method.\n\n### 4. Play!\n\nCongratulations, you are now sailing with the Ship of Harkinian! Have fun!\n\n# Configuration\n\n### Default keyboard configuration\n| N64 | A | B | Z | Start | Analog stick | C buttons | D-Pad |\n| - | - | - | - | - | - | - | - |\n| Keyboard | X | C | Z | Space | WASD | Arrow keys | TFGH |\n\n### Other shortcuts\n| Keys | Action |\n| - | - |\n| F1 | Toggle menubar |\n| F5 | Save state |\n| F6 | Change state |\n| F7 | Load state |\n| F9 | Toggle Text-to-Speech (Windows and Mac only) |\n| F11 | Fullscreen |\n| Tab | Toggle Alternate assets |\n| Ctrl+R | Reset |\n\n# Project Overview\nShip of Harkinian (SOH) is built atop a custom library dubbed libultraship (LUS). Back in the N64 days, there was an SDK distributed to developers named libultra; LUS is designed to mimic the functionality of libultra on modern hardware. In addition, we are dependant on the source code provided by the OOT decompilation project.\n\nIn order for the game to function, you will require a **legally acquired** ROM for Ocarina of Time. Click [here](https://ship.equipment/) to check the compatibility of your specific rom. Any copyrighted assets are extracted from the ROM and reformatted as a .otr archive file which the code uses.\n\n### Graphics Backends\nCurrently, there are three rendering APIs supported: DirectX11 (Windows), OpenGL (all platforms), and Metal (MacOS). You can change which API to use in the `Settings` menu of the menubar, which requires a restart.  If you're having an issue with crashing, you can change the API in the `shipofharkinian.json` file by finding the line `gfxbackend:\"\"` and changing the value to `sdl` for OpenGL. DirectX 11 is the default on Windows.\n\n# Custom Assets\n\nCustom assets are packed in `.otr` archive files. To use custom assets, place them in the `mods` folder.\n\nIf you're interested in creating and/or packing your own custom asset `.otr` files, check out the following tools:\n* [**retro - OTR generator**](https://github.com/HarbourMasters64/retro)\n* [**fast64 - Blender plugin**](https://github.com/HarbourMasters/fast64)\n\n# Development\n### Building\n\nIf you want to manually compile SoH, please consult the [building instructions](docs/BUILDING.md).\n\n### Playtesting\nIf you want to playtest a continuous integration build, you can find them at the links below. Keep in mind that these are for playtesting only, and you will likely encounter bugs and possibly crashes. \n\n* [Windows](https://nightly.link/HarbourMasters/Shipwright/workflows/generate-builds/develop/soh-windows.zip)\n* [macOS](https://nightly.link/HarbourMasters/Shipwright/workflows/generate-builds/develop/soh-mac.zip)\n* [Linux](https://nightly.link/HarbourMasters/Shipwright/workflows/generate-builds/develop/soh-linux.zip)\n\n### Further Reading\nMore detailed documentation can be found in the 'docs' directory, including the aforementioned [building instructions](docs/BUILDING.md).\n\n* [Credits](docs/CREDITS.md)\n* [Custom Music](docs/CUSTOM_MUSIC.md)\n* [Controller Mapping](docs/GAME_CONTROLLER_DB.md)\n* [Modding](docs/MODDING.md)\n* [Versioning](docs/VERSIONING.md)\n\n<a href=\"https://github.com/Kenix3/libultraship/\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"./docs/poweredbylus.darkmode.png\">\n    <img alt=\"Powered by libultraship\" src=\"./docs/poweredbylus.lightmode.png\">\n  </picture>\n</a>\n"
        },
        {
          "name": "ZAPDTR",
          "type": "commit",
          "content": null
        },
        {
          "name": "copy-existing-otrs.cmake",
          "type": "blob",
          "size": 1.6640625,
          "content": "message(STATUS \"Copying otr files...\")\n\nif(NOT ONLYSOHOTR AND EXISTS ${SOURCE_DIR}/OTRExporter/oot.otr)\n    execute_process(COMMAND ${CMAKE_COMMAND} -E copy oot.otr ${SOURCE_DIR})\n    execute_process(COMMAND ${CMAKE_COMMAND} -E copy oot.otr ${BINARY_DIR}/soh/)\n    message(STATUS \"Copied oot.otr\")\nendif()\nif(NOT ONLYSOHOTR AND EXISTS ${SOURCE_DIR}/OTRExporter/oot-mq.otr)\n    execute_process(COMMAND ${CMAKE_COMMAND} -E copy oot-mq.otr ${SOURCE_DIR})\n    execute_process(COMMAND ${CMAKE_COMMAND} -E copy oot-mq.otr ${BINARY_DIR}/soh/)\n    message(STATUS \"Copied oot-mq.otr\")\nendif()\nif(EXISTS ${SOURCE_DIR}/OTRExporter/soh.otr)\n    execute_process(COMMAND ${CMAKE_COMMAND} -E copy soh.otr ${SOURCE_DIR})\n    execute_process(COMMAND ${CMAKE_COMMAND} -E copy soh.otr ${BINARY_DIR}/soh/)\n    message(STATUS \"Copied soh.otr\")\nendif()\n\n# Additionally for Windows, copy the otrs to the target dir, side by side with soh.exe\nif(SYSTEM_NAME MATCHES \"Windows\")\n    if(NOT ONLYSOHOTR AND EXISTS ${SOURCE_DIR}/OTRExporter/oot.otr)\n        execute_process(COMMAND ${CMAKE_COMMAND} -E copy oot.otr ${TARGET_DIR})\n    endif()\n    if(NOT ONLYSOHOTR AND EXISTS ${SOURCE_DIR}/OTRExporter/oot-mq.otr)\n        execute_process(COMMAND ${CMAKE_COMMAND} -E copy oot-mq.otr ${TARGET_DIR})\n    endif()\n    if(EXISTS ${SOURCE_DIR}/OTRExporter/soh.otr)\n        execute_process(COMMAND ${CMAKE_COMMAND} -E copy soh.otr ${TARGET_DIR})\n    endif()\nendif()\n\nif(NOT ONLYSOHOTR AND (NOT EXISTS ${SOURCE_DIR}/oot.otr AND NOT EXISTS ${SOURCE_DIR}/oot-mq.otr))\n    message(FATAL_ERROR \"Failed to copy. No OTR files found.\")\nendif()\nif(NOT EXISTS ${SOURCE_DIR}/soh.otr)\n    message(FATAL_ERROR \"Failed to copy. No soh OTR found.\")\nendif()\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "libultraship",
          "type": "commit",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "soh",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}