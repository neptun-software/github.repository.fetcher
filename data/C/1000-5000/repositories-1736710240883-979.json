{
  "metadata": {
    "timestamp": 1736710240883,
    "page": 979,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "commaai/panda",
      "stars": 1555,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.359375,
          "content": "*.tmp\n*.pyc\n.*.swp\n.*.swo\n*.o\n*.so\n*.os\n*.d\n*.dump\na.out\n*~\n.#*\ndist/\nbuild/\npandacan.egg-info/\nobj/\nexamples/output.csv\n.DS_Store\n.vscode*\nnosetests.xml\n.mypy_cache/\n.sconsign.dblite\n\n# CTU info files generated by Cppcheck\n*.*.ctu-info\n\n# safety coverage-related files\n*.gcda\n*.gcno\ntests/safety/coverage-out\ntests/safety/coverage.info\n\n*.profraw\n*.profdata\nmull.yml\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.5673828125,
          "content": "repos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.6.0\n  hooks:\n    - id: check-ast\n    - id: check-yaml\n    - id: check-merge-conflict\n    - id: check-symlinks\n    - id: check-executables-have-shebangs\n    - id: check-shebang-scripts-are-executable\n- repo: https://github.com/pre-commit/mirrors-mypy\n  rev: v1.11.2\n  hooks:\n    - id: mypy\n      additional_dependencies: ['numpy', 'types-requests', 'types-atomicwrites',\n                                'types-pycurl']\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.6.8\n  hooks:\n    - id: ruff\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.80859375,
          "content": "FROM ubuntu:24.04\n\nENV PYTHONUNBUFFERED=1\nENV PYTHONPATH=/tmp/pythonpath\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    make \\\n    g++ \\\n    gcc-arm-none-eabi libnewlib-arm-none-eabi \\\n    git \\\n    libffi-dev \\\n    libusb-1.0-0 \\\n    python3 \\\n    python3-dev \\\n    python3-pip \\\n && rm -rf /var/lib/apt/lists/* && \\\n    apt clean && \\\n    cd /usr/lib/gcc/arm-none-eabi/* && \\\n    rm -rf arm/ && \\\n    rm -rf thumb/nofp thumb/v6* thumb/v8* thumb/v7+fp thumb/v7-r+fp.sp && \\\n    apt-get update && apt-get install -y clang-17 && \\\n    ln -s $(which clang-17) /usr/bin/clang\n\nRUN apt-get update && apt-get install -y curl && \\\n    curl -1sLf 'https://dl.cloudsmith.io/public/mull-project/mull-stable/setup.deb.sh' | bash && \\\n    apt-get update && apt-get install -y mull-17\n\nENV CPPCHECK_DIR=/tmp/cppcheck\nCOPY tests/misra/install.sh /tmp/\nRUN /tmp/install.sh && rm -rf $CPPCHECK_DIR/.git/\nENV SKIP_CPPCHECK_INSTALL=1\n\nCOPY setup.py __init__.py $PYTHONPATH/panda/\nCOPY python/__init__.py $PYTHONPATH/panda/python/\nRUN pip3 install --break-system-packages --no-cache-dir $PYTHONPATH/panda/[dev]\n\n# TODO: this should be a \"pip install\" or not even in this repo at all\nRUN git config --global --add safe.directory $PYTHONPATH/panda\nENV OPENDBC_REF=\"b89fe79950121ca93d8a1f0d3fd17df31703be2a\"\nRUN cd /tmp/ && \\\n    git clone --depth 1 https://github.com/commaai/opendbc opendbc_repo && \\\n    cd opendbc_repo && git fetch origin $OPENDBC_REF && git checkout FETCH_HEAD && rm -rf .git/ && \\\n    pip3 install --break-system-packages --no-cache-dir Cython numpy  && \\\n    ln -s $PWD/opendbc $PYTHONPATH/opendbc && \\\n    scons -j8 --minimal opendbc/\n\n# for Jenkins\nCOPY README.md panda.tar.* /tmp/\nRUN mkdir -p /tmp/pythonpath/panda && \\\n    tar -xvf /tmp/panda.tar.gz -C /tmp/pythonpath/panda/ || true\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 3.796875,
          "content": "def docker_run(String step_label, int timeout_mins, String cmd) {\n  timeout(time: timeout_mins, unit: 'MINUTES') {\n    sh script: \"docker run --rm --privileged \\\n          --env PYTHONWARNINGS=error \\\n          --volume /dev/bus/usb:/dev/bus/usb \\\n          --volume /var/run/dbus:/var/run/dbus \\\n          --workdir /tmp/pythonpath/panda \\\n          --net host \\\n          ${env.DOCKER_IMAGE_TAG} \\\n          bash -c 'scons -j8 && ${cmd}'\", \\\n        label: step_label\n  }\n}\n\n\ndef phone(String ip, String step_label, String cmd) {\n  withCredentials([file(credentialsId: 'id_rsa', variable: 'key_file')]) {\n    def ssh_cmd = \"\"\"\nssh -tt -o StrictHostKeyChecking=no -i ${key_file} 'comma@${ip}' /usr/bin/bash <<'END'\n\nset -e\n\n\nsource ~/.bash_profile\nif [ -f /etc/profile ]; then\n  source /etc/profile\nfi\n\nexport CI=1\nexport TEST_DIR=${env.TEST_DIR}\nexport SOURCE_DIR=${env.SOURCE_DIR}\nexport GIT_BRANCH=${env.GIT_BRANCH}\nexport GIT_COMMIT=${env.GIT_COMMIT}\nexport PYTHONPATH=${env.TEST_DIR}/../\nexport PYTHONWARNINGS=error\n\ncd ${env.TEST_DIR} || true\n${cmd}\nexit 0\n\nEND\"\"\"\n\n    sh script: ssh_cmd, label: step_label\n  }\n}\n\ndef phone_steps(String device_type, steps) {\n  lock(resource: \"\", label: device_type, inversePrecedence: true, variable: 'device_ip', quantity: 1) {\n    timeout(time: 20, unit: 'MINUTES') {\n      phone(device_ip, \"git checkout\", readFile(\"tests/setup_device_ci.sh\"),)\n      steps.each { item ->\n        phone(device_ip, item[0], item[1])\n      }\n    }\n  }\n}\n\n\n\npipeline {\n  agent any\n  environment {\n    CI = \"1\"\n    PYTHONWARNINGS= \"error\"\n    DOCKER_IMAGE_TAG = \"panda:build-${env.GIT_COMMIT}\"\n\n    TEST_DIR = \"/data/panda\"\n    SOURCE_DIR = \"/data/panda_source/\"\n  }\n  options {\n    timeout(time: 3, unit: 'HOURS')\n    disableConcurrentBuilds(abortPrevious: env.BRANCH_NAME != 'master')\n  }\n\n  stages {\n    stage ('Acquire resource locks') {\n      options {\n        lock(resource: \"pandas\")\n      }\n      stages {\n        stage('Build Docker Image') {\n          steps {\n            timeout(time: 20, unit: 'MINUTES') {\n              script {\n                sh 'git archive -v -o panda.tar.gz --format=tar.gz HEAD'\n                dockerImage = docker.build(\"${env.DOCKER_IMAGE_TAG}\")\n              }\n            }\n          }\n        }\n        stage('jungle tests') {\n          steps {\n            script {\n              retry (3) {\n                docker_run(\"reset hardware\", 3, \"python3 ./tests/hitl/reset_jungles.py\")\n              }\n            }\n          }\n        }\n\n        stage('parallel tests') {\n          parallel {\n            stage('test tres') {\n              agent { docker { image 'ghcr.io/commaai/alpine-ssh'; args '--user=root' } }\n              steps {\n                phone_steps(\"panda-tres\", [\n                  [\"build\", \"scons -j4\"],\n                  [\"flash\", \"cd tests/ && ./reflash_internal_panda.py\"],\n                  [\"flash jungle\", \"cd board/jungle && ./flash.py --all\"],\n                  [\"test\", \"cd tests/hitl && HW_TYPES=9 pytest -n0 --durations=0 2*.py [5-9]*.py\"],\n                ])\n              }\n            }\n\n            stage('test dos') {\n              agent { docker { image 'ghcr.io/commaai/alpine-ssh'; args '--user=root' } }\n              steps {\n                phone_steps(\"panda-dos\", [\n                  [\"build\", \"scons -j4\"],\n                  [\"flash\", \"cd tests/ && ./reflash_internal_panda.py\"],\n                  [\"flash jungle\", \"cd board/jungle && ./flash.py --all\"],\n                  [\"test\", \"cd tests/hitl && HW_TYPES=6 pytest -n0 --durations=0 [2-9]*.py -k 'not test_send_recv'\"],\n                ])\n              }\n            }\n\n            stage('bootkick tests') {\n              steps {\n                script {\n                  docker_run(\"test\", 10, \"pytest -n0 ./tests/som/test_bootkick.py\")\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0341796875,
          "content": "Copyright (c) 2016, Comma.ai, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.849609375,
          "content": "# Welcome to panda\n\n![panda tests](https://github.com/commaai/panda/workflows/tests/badge.svg)\n![panda drivers](https://github.com/commaai/panda/workflows/drivers/badge.svg)\n\npanda speaks CAN and CAN FD, and it runs on [STM32F413](https://www.st.com/resource/en/reference_manual/rm0430-stm32f413423-advanced-armbased-32bit-mcus-stmicroelectronics.pdf) and [STM32H725](https://www.st.com/resource/en/reference_manual/rm0468-stm32h723733-stm32h725735-and-stm32h730-value-line-advanced-armbased-32bit-mcus-stmicroelectronics.pdf).\n\n## Directory structure\n\n```\n.\n├── board           # Code that runs on the STM32\n├── drivers         # Drivers (not needed for use with Python)\n├── python          # Python userspace library for interfacing with the panda\n├── tests           # Tests and helper programs for panda\n```\n\n## Safety Model\n\nWhen a panda powers up, by default it's in `SAFETY_SILENT` mode. While in `SAFETY_SILENT` mode, the CAN buses are forced to be silent. In order to send messages, you have to select a safety mode. Some of safety modes (for example `SAFETY_ALLOUTPUT`) are disabled in release firmwares. In order to use them, compile and flash your own build.\n\nSafety modes optionally support `controls_allowed`, which allows or blocks a subset of messages based on a customizable state in the board.\n\n## Code Rigor\n\nThe panda firmware is written for its use in conjunction with [openpilot](https://github.com/commaai/openpilot). The panda firmware, through its safety model, provides and enforces the\n[openpilot safety](https://github.com/commaai/openpilot/blob/master/docs/SAFETY.md). Due to its critical function, it's important that the application code rigor within the `board` folder is held to high standards.\n\nThese are the [CI regression tests](https://github.com/commaai/panda/actions) we have in place:\n* A generic static code analysis is performed by [cppcheck](https://github.com/danmar/cppcheck/).\n* In addition, [cppcheck](https://github.com/danmar/cppcheck/) has a specific addon to check for [MISRA C:2012](https://misra.org.uk/) violations. See [current coverage](https://github.com/commaai/panda/blob/master/tests/misra/coverage_table).\n* Compiler options are relatively strict: the flags `-Wall -Wextra -Wstrict-prototypes -Werror` are enforced.\n* The [safety logic](https://github.com/commaai/panda/tree/master/board/safety) is tested and verified by [unit tests](https://github.com/commaai/panda/tree/master/tests/safety) for each supported car variant.\nto ensure that the behavior remains unchanged.\n* A hardware-in-the-loop test verifies panda's functionalities on all active panda variants, including:\n  * additional safety model checks\n  * compiling and flashing the bootstub and app code\n  * receiving, sending, and forwarding CAN messages on all buses\n  * CAN loopback and latency tests through USB and SPI\n\nThe above tests are themselves tested by:\n* a [mutation test](tests/misra/test_mutation.py) on the MISRA coverage\n* 100% line coverage enforced on the safety unit tests\n\nIn addition, we run the [ruff linter](https://github.com/astral-sh/ruff) and [mypy](https://mypy-lang.org/) on panda's Python library.\n\n## Usage\n\nSetup dependencies:\n```bash\n# Ubuntu\nsudo apt-get install dfu-util gcc-arm-none-eabi python3-pip libffi-dev git clang-17\n\n# macOS\nbrew install --cask gcc-arm-embedded\nbrew install python3 dfu-util gcc@13\n```\n\nClone panda repository and install:\n``` bash\ngit clone https://github.com/commaai/panda.git\ncd panda\n\n# install dependencies\npip install -e .[dev]\n\n# install panda\npython setup.py install\n```\n\nSee [the Panda class](https://github.com/commaai/panda/blob/master/python/__init__.py) for how to interact with the panda.\n\nFor example, to receive CAN messages:\n``` python\n>>> from panda import Panda\n>>> panda = Panda()\n>>> panda.can_recv()\n```\nAnd to send one on bus 0:\n``` python\n>>> panda.set_safety_mode(Panda.SAFETY_ALLOUTPUT)\n>>> panda.can_send(0x1aa, b'message', 0)\n```\nNote that you may have to setup [udev rules](https://github.com/commaai/panda/tree/master/drivers/linux) for Linux, such as\n``` bash\nsudo tee /etc/udev/rules.d/11-panda.rules <<EOF\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"3801\", ATTRS{idProduct}==\"ddcc\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"3801\", ATTRS{idProduct}==\"ddee\", MODE=\"0666\"\nEOF\nsudo udevadm control --reload-rules && sudo udevadm trigger\n```\n\nThe panda jungle uses different udev rules. See [the repo](https://github.com/commaai/panda_jungle#udev-rules) for instructions. \n\n## Software interface support\n\nAs a universal car interface, it should support every reasonable software interface.\n\n- [Python library](https://github.com/commaai/panda/tree/master/python)\n- [C++ library](https://github.com/commaai/openpilot/tree/master/selfdrive/pandad)\n- [socketcan in kernel](https://github.com/commaai/panda/tree/master/drivers/linux) (alpha)\n\n## Licensing\n\npanda software is released under the MIT license unless otherwise specified.\n"
        },
        {
          "name": "SConscript",
          "type": "blob",
          "size": 5.068359375,
          "content": "import os\nimport subprocess\n\n\nPREFIX = \"arm-none-eabi-\"\nBUILDER = \"DEV\"\n\ncommon_flags = []\n\npanda_root = Dir('.')\n\nif os.getenv(\"RELEASE\"):\n  BUILD_TYPE = \"RELEASE\"\n  cert_fn = os.getenv(\"CERT\")\n  assert cert_fn is not None, 'No certificate file specified. Please set CERT env variable'\n  assert os.path.exists(cert_fn), 'Certificate file not found. Please specify absolute path'\nelse:\n  BUILD_TYPE = \"DEBUG\"\n  cert_fn = File(\"./certs/debug\").srcnode().relpath\n  common_flags += [\"-DALLOW_DEBUG\"]\n\n  if os.getenv(\"DEBUG\"):\n    common_flags += [\"-DDEBUG\"]\n\ndef objcopy(source, target, env, for_signature):\n    return '$OBJCOPY -O binary %s %s' % (source[0], target[0])\n\ndef get_version(builder, build_type):\n  try:\n    git = subprocess.check_output([\"git\", \"rev-parse\", \"--short=8\", \"HEAD\"], encoding='utf8').strip()\n  except subprocess.CalledProcessError:\n    git = \"unknown\"\n  return f\"{builder}-{git}-{build_type}\"\n\ndef get_key_header(name):\n  from Crypto.PublicKey import RSA\n\n  public_fn = File(f'./certs/{name}.pub').srcnode().get_path()\n  with open(public_fn) as f:\n    rsa = RSA.importKey(f.read())\n  assert(rsa.size_in_bits() == 1024)\n\n  rr = pow(2**1024, 2, rsa.n)\n  n0inv = 2**32 - pow(rsa.n, -1, 2**32)\n\n  r = [\n    f\"RSAPublicKey {name}_rsa_key = {{\",\n    f\"  .len = 0x20,\",\n    f\"  .n0inv = {n0inv}U,\",\n    f\"  .n = {to_c_uint32(rsa.n)},\",\n    f\"  .rr = {to_c_uint32(rr)},\",\n    f\"  .exponent = {rsa.e},\",\n    f\"}};\",\n  ]\n  return r\n\ndef to_c_uint32(x):\n  nums = []\n  for _ in range(0x20):\n    nums.append(x % (2**32))\n    x //= (2**32)\n  return \"{\" + 'U,'.join(map(str, nums)) + \"U}\"\n\n\ndef build_project(project_name, project, extra_flags):\n  linkerscript_fn = File(project[\"LINKER_SCRIPT\"]).srcnode().relpath\n\n  flags = project[\"PROJECT_FLAGS\"] + extra_flags + common_flags + [\n    \"-Wall\",\n    \"-Wextra\",\n    \"-Wstrict-prototypes\",\n    \"-Werror\",\n    \"-mlittle-endian\",\n    \"-mthumb\",\n    \"-nostdlib\",\n    \"-fno-builtin\",\n    \"-std=gnu11\",\n    \"-fmax-errors=1\",\n    f\"-T{linkerscript_fn}\",\n  ]\n\n  includes = [\n    '.',\n    '..',\n    panda_root,\n    f\"{panda_root}/board/\",\n  ]\n\n  env = Environment(\n    ENV=os.environ,\n    CC=PREFIX + 'gcc',\n    AS=PREFIX + 'gcc',\n    OBJCOPY=PREFIX + 'objcopy',\n    OBJDUMP=PREFIX + 'objdump',\n    CFLAGS=flags,\n    ASFLAGS=flags,\n    LINKFLAGS=flags,\n    CPPPATH=includes,\n    ASCOM=\"$AS $ASFLAGS -o $TARGET -c $SOURCES\",\n    BUILDERS={\n      'Objcopy': Builder(generator=objcopy, suffix='.bin', src_suffix='.elf')\n    },\n    tools=[\"default\", \"compilation_db\"],\n  )\n\n  startup = env.Object(f\"obj/startup_{project_name}\", project[\"STARTUP_FILE\"])\n\n  # Bootstub\n  crypto_obj = [\n    env.Object(f\"rsa-{project_name}\", f\"{panda_root}/crypto/rsa.c\"),\n    env.Object(f\"sha-{project_name}\", f\"{panda_root}/crypto/sha.c\")\n  ]\n  bootstub_obj = env.Object(f\"bootstub-{project_name}\", File(project.get(\"BOOTSTUB\", f\"{panda_root}/board/bootstub.c\")))\n  bootstub_elf = env.Program(f\"obj/bootstub.{project_name}.elf\",\n                                     [startup] + crypto_obj + [bootstub_obj])\n  env.Objcopy(f\"obj/bootstub.{project_name}.bin\", bootstub_elf)\n\n  # Build main\n  main_obj = env.Object(f\"main-{project_name}\", project[\"MAIN\"])\n  main_elf = env.Program(f\"obj/{project_name}.elf\", [startup, main_obj],\n    LINKFLAGS=[f\"-Wl,--section-start,.isr_vector={project['APP_START_ADDRESS']}\"] + flags)\n  main_bin = env.Objcopy(f\"obj/{project_name}.bin\", main_elf)\n\n  # Sign main\n  sign_py = File(f\"{panda_root}/crypto/sign.py\").srcnode().relpath\n  env.Command(f\"obj/{project_name}.bin.signed\", main_bin, f\"SETLEN=1 {sign_py} $SOURCE $TARGET {cert_fn}\")\n\n\nbase_project_f4 = {\n  \"MAIN\": \"main.c\",\n  \"STARTUP_FILE\": File(\"./board/stm32f4/startup_stm32f413xx.s\"),\n  \"LINKER_SCRIPT\": File(\"./board/stm32f4/stm32f4_flash.ld\"),\n  \"APP_START_ADDRESS\": \"0x8004000\",\n  \"PROJECT_FLAGS\": [\n    \"-mcpu=cortex-m4\",\n    \"-mhard-float\",\n    \"-DSTM32F4\",\n    \"-DSTM32F413xx\",\n    \"-Iboard/stm32f4/inc\",\n    \"-mfpu=fpv4-sp-d16\",\n    \"-fsingle-precision-constant\",\n    \"-Os\",\n    \"-g\",\n  ],\n}\n\nbase_project_h7 = {\n  \"MAIN\": \"main.c\",\n  \"STARTUP_FILE\": File(\"./board/stm32h7/startup_stm32h7x5xx.s\"),\n  \"LINKER_SCRIPT\": File(\"./board/stm32h7/stm32h7x5_flash.ld\"),\n  \"APP_START_ADDRESS\": \"0x8020000\",\n  \"PROJECT_FLAGS\": [\n    \"-mcpu=cortex-m7\",\n    \"-mhard-float\",\n    \"-DSTM32H7\",\n    \"-DSTM32H725xx\",\n    \"-Iboard/stm32h7/inc\",\n    \"-mfpu=fpv5-d16\",\n    \"-fsingle-precision-constant\",\n    \"-Os\",\n    \"-g\",\n  ],\n}\n\nExport('base_project_f4', 'base_project_h7', 'build_project')\n\n\n# Common autogenerated includes\nwith open(\"board/obj/gitversion.h\", \"w\") as f:\n  version = get_version(BUILDER, BUILD_TYPE)\n  f.write(f'extern const uint8_t gitversion[{len(version)}];\\n')\n  f.write(f'const uint8_t gitversion[{len(version)}] = \"{version}\";\\n')\n\nwith open(\"board/obj/version\", \"w\") as f:\n  f.write(f'{get_version(BUILDER, BUILD_TYPE)}')\n\ncerts = [get_key_header(n) for n in [\"debug\", \"release\"]]\nwith open(\"board/obj/cert.h\", \"w\") as f:\n  for cert in certs:\n    f.write(\"\\n\".join(cert) + \"\\n\")\n\n# panda fw\nSConscript('board/SConscript')\n\n# panda jungle fw\nSConscript('board/jungle/SConscript')\n\n# test files\nif GetOption('extras'):\n  SConscript('tests/libpanda/SConscript')\n"
        },
        {
          "name": "SConstruct",
          "type": "blob",
          "size": 0.77734375,
          "content": "AddOption('--minimal',\n          action='store_false',\n          dest='extras',\n          default=True,\n          help='the minimum build. no tests, tools, etc.')\n\nAddOption('--ubsan',\n          action='store_true',\n          help='turn on UBSan')\n\nAddOption('--coverage',\n          action='store_true',\n          help='build with test coverage options')\n\nAddOption('--compile_db',\n          action='store_true',\n          help='build clang compilation database')\n\nAddOption('--mutation',\n          action='store_true',\n          help='generate mutation-ready code')\n\nenv = Environment(\n  COMPILATIONDB_USE_ABSPATH=True,\n  tools=[\"default\", \"compilation_db\"],\n)\n  \nif GetOption('compile_db'):\n    env.CompilationDatabase(\"compile_commands.json\")\n\n# panda fw & test files\nSConscript('SConscript')\n"
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 0.642578125,
          "content": "from .python.constants import McuType, BASEDIR, FW_PATH, USBPACKET_MAX_SIZE  # noqa: F401\nfrom .python.spi import PandaSpiException, PandaProtocolMismatch, STBootloaderSPIHandle  # noqa: F401\nfrom .python.serial import PandaSerial  # noqa: F401\nfrom .python.canhandle import CanHandle # noqa: F401\nfrom .python.utils import logger # noqa: F401\nfrom .python import (Panda, PandaDFU, uds, isotp, # noqa: F401\n                     pack_can_buffer, unpack_can_buffer, calculate_checksum,\n                     DLC_TO_LEN, LEN_TO_DLC, ALTERNATIVE_EXPERIENCE, CANPACKET_HEAD_SIZE)\n\n\n# panda jungle\nfrom .board.jungle import PandaJungle, PandaJungleDFU # noqa: F401\n"
        },
        {
          "name": "board",
          "type": "tree",
          "content": null
        },
        {
          "name": "certs",
          "type": "tree",
          "content": null
        },
        {
          "name": "crypto",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "drivers",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.2041015625,
          "content": "[mypy]\n; third-party packages\nignore_missing_imports = True\n\n; helpful warnings\nwarn_redundant_casts = True\nwarn_unreachable = True\nwarn_unused_ignores = True\n\n; restrict dynamic typing\nwarn_return_any = True\n"
        },
        {
          "name": "panda.png",
          "type": "blob",
          "size": 70.8095703125,
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.4853515625,
          "content": "# https://beta.ruff.rs/docs/configuration/#using-pyprojecttoml\n[tool.ruff]\nline-length = 160\ntarget-version=\"py311\"\n\n[tool.ruff.lint]\nselect = [\"E\", \"F\", \"W\", \"PIE\", \"C4\", \"ISC\", \"RUF100\", \"A\"]\nignore = [\"W292\", \"E741\", \"E402\", \"C408\", \"ISC003\"]\nflake8-implicit-str-concat.allow-multiline=false\n\n[tool.ruff.lint.flake8-tidy-imports.banned-api]\n\"pytest.main\".msg = \"pytest.main requires special handling that is easy to mess up!\"\n\n[tool.pytest.ini_options]\naddopts = \"-n auto --ignore-glob='*.sh'\"\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "release",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0244140625,
          "content": "[bdist_wheel]\nuniversal=1"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.740234375,
          "content": "\"\"\"\n    Panda CAN Controller Dongle\n    ~~~~~\n\n    Setup\n    `````\n\n    $ pip install . # or python setup.py install\n\"\"\"\n\nimport codecs\nimport os\nimport re\nfrom setuptools import setup\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\ndef read(*parts):\n  \"\"\"Taken from pypa pip setup.py:\n  intentionally *not* adding an encoding option to open, See:\n  https://github.com/pypa/virtualenv/issues/201#issuecomment-3145690\n  \"\"\"\n  return codecs.open(os.path.join(here, *parts), 'r').read()\n\n\ndef find_version(*file_paths):\n  version_file = read(*file_paths)\n  version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                            version_file, re.M)\n  if version_match:\n    return version_match.group(1)\n  raise RuntimeError(\"Unable to find version string.\")\n\nsetup(\n  name='pandacan',\n  version=find_version(\"python\", \"__init__.py\"),\n  url='https://github.com/commaai/panda',\n  author='comma.ai',\n  author_email='',\n  packages=[\n    'panda',\n  ],\n  package_dir={'panda': 'python'},\n  platforms='any',\n  license='MIT',\n  install_requires=[\n    'libusb1',\n  ],\n  extras_require = {\n    'dev': [\n      \"scons\",\n      \"pycryptodome >= 3.9.8\",\n      \"cffi\",\n      \"flaky\",\n      \"pytest\",\n      \"pytest-mock\",\n      \"pytest-xdist\",\n      \"pytest-timeout\",\n      \"pytest-randomly\",\n      \"parameterized\",\n      \"pre-commit\",\n      \"numpy\",\n      \"ruff\",\n      \"spidev\",\n      \"setuptools\", # for setup.py\n    ],\n  },\n  ext_modules=[],\n  description=\"Code powering the comma.ai panda\",\n  long_description='See https://github.com/commaai/panda',\n  classifiers=[\n    'Development Status :: 2 - Pre-Alpha',\n    \"Natural Language :: English\",\n    \"Programming Language :: Python :: 2\",\n    \"Programming Language :: Python :: 3\",\n    \"Topic :: System :: Hardware\",\n  ],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}