{
  "metadata": {
    "timestamp": 1736710207056,
    "page": 917,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aergoio/litetree",
      "stars": 1625,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.451171875,
          "content": "language: c\n\nos:\n  - linux\n  - osx\n\ninstall:\n  - git clone --depth=1 https://github.com/lmdb/lmdb\n  - cd lmdb/libraries/liblmdb\n  - make\n  - sudo make install\n  - cd -\n\nscript:\n  # normal build\n  - make\n  - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then sudo make install; fi\n  - make test\n  # clean\n  - make clean\n  # build without SQL log support\n  - make CFLAGS=\"-DOMIT_BRANCH_LOG\"\n  - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then sudo make install; fi\n  - make test\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0751953125,
          "content": "Copyright (c) 2018, Respective Authors all rights reserved.\n\nThe MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.880859375,
          "content": "<a href=\"https://aergo.io\"><img src=\"http://litesync.io/litetree/aergo-presents-black-round.svg\" width=\"20%\"></a> [![Build Status](https://travis-ci.org/aergoio/litetree.svg?branch=master)](https://travis-ci.org/aergoio/litetree) [![Build Status](https://ci.appveyor.com/api/projects/status/github/aergoio/litetree?branch=master&svg=true)](https://ci.appveyor.com/project/kroggen/litetree)\n\n# LiteTree: SQLite with Branches\n\n![](http://litesync.io/litetree/graph-litetree.png)\n\nImagine being able to have many connections to the same database, each one reading a separate branch or commit at the same time. Or even writing to separate branches.\n\nThis is possible with **LiteTree**. It is a modification of the SQLite engine to support branching, like git!\n\nDatabase branching is a very useful tool for blockchain implementations and LiteTree will be at the core of [Aergo](https://github.com/aergoio/aergo).\n\nThis is how it works:\n\nEach database transaction is saved as a commit, and each commit has an incremental number. Let's consider an empty db in which we run this first SQL command:\n\n```\nCREATE TABLE t1 (name)\n```\n\nNow it will have the first commit (number 1) in the automatically created `master` branch:\n\n![](http://litesync.io/litetree/graph-1-commit.png)\n\nWhen we execute new transactions it will add new commits to the current branch:\n\n```\nINSERT INTO t1 VALUES ('first')\nINSERT INTO t1 VALUES ('second')\n```\nNow we have 3 commits:\n\n![](http://litesync.io/litetree/graph-3-commits.png)\n\nTo include many SQL commands in a single commit we must enclose them in `BEGIN` and `COMMIT`  commands.\n\nWe create new branches informing the source branch and commit number:\n\n```\nPRAGMA new_branch=test at master.2\n```\n\nAfter this command is executed the new branch is created but without any new data added to it. The database connection also moves to this new branch, having it as the current branch.\n\nWe can check the current branch with the command:\n\n```\nPRAGMA branch\n```\n\nIn this case it will return: `test`\n\nIf we execute a SQL command on this db connection the commit will be saved in the connection's current branch:\n\n```\nINSERT INTO t1 VALUES ('from test branch')\n```\n\nNow the graph state will be:\n\n![](http://litesync.io/litetree/graph-2-branches.png)\n\nWe can also read the database at this new branch:\n```\nSELECT * FROM t1\n```\n\nIt will return these values:\n\n\n> first\n>\n> from test branch\n\n\nWe can move to the master branch:\n\n```\nPRAGMA branch=master\n```\n\nAnd executing the same SELECT command (but now in the master branch) it will return:\n\n> first\n>\n> second\n\nDifferent content for the same table on separate branches.\n\nCommits in separate branches have the same numbering based on the distance from the first commit:\n\n![](http://litesync.io/litetree/graph-commit-numbers.png)\n\nWe can read the database in a previous point-in-time by moving to that commit, like this:\n\n```\nPRAGMA branch=master.2\n```\n\nAt this point the table `t1` has a single row and if we do a SELECT it will return just `first`.\n\nWe cannot write to the database when we are in a defined commit, writing is only possible at the head of each branch. If you want to make modifications to some previous commit you must create a new branch that starts at that commit.\n\nIt is also possible to truncate a branch at a specific commit, rename a branch, delete it and retrieve branch info.\n\n## Supported commands\n\n- Selecting the active branch:\n\t```\n\tPRAGMA branch=<name>\n\t```\n- Selecting a specific commit in a branch:\n\t```\n\tPRAGMA branch=<name>.<commit>\n\t```\n- Retrieving the current/active branch:\n\t```\n\tPRAGMA branch\n\t```\n- Listing the existing branches:\n\t```\n\tPRAGMA branches\n\t```\n- Creating a new branch:\n\t```\n\tPRAGMA new_branch=<name> at <source>.<commit>\n\t```\n- Deleting a branch:\n\t```\n\tPRAGMA del_branch(<name>)\n\t```\n- Renaming a branch:\n\t```\n\tPRAGMA rename_branch <old_name> <new_name>\n\t```\n- Truncating a branch at a specific commit:\n\t```\n\tPRAGMA branch_truncate(<name>.<commit>)\n\t```\n- Displaying the tree structure:\n\t```\n\tPRAGMA branch_tree\n\t```\n- Retrieving the branch info:\n\t```\n\tPRAGMA branch_info(<name>)\n\t```\n- Showing the commit and SQL log/history for a branch:\n\t```\n\tPRAGMA branch_log(<name>)\n\t```\n\n#### Not yet available\n\nSome of these commands are being developed:\n\n- Modifying a commit:\n\t```\n\tPRAGMA branch_log [--set|--add|--del] <name> <sql commands>\n\t```\n- Showing the diff between 2 branches or commits:\n\t```\n\tPRAGMA branch_diff <from_branch>[.<commit>] <to_branch>[.<commit>]\n\t```\n- [Save metadata to each branch and/or commit](https://github.com/aergoio/litetree/wiki/Storing-metadata)\n- [Merging 2 branches](https://github.com/aergoio/litetree/wiki/Merging-branches)\n\nAnd maybe these extended features could be supported:\n\n- Access control by branch\n\nCheck the roadmap on our [wiki](https://github.com/aergoio/litetree/wiki). Feature requests and suggestions are welcome.\n\n\n## Technologies\n\nWe can use LiteTree with big databases (many gigabytes). There is no data copying when a new branch is created. When a new transaction is commited only the modified database pages are copied.\n\nLiteTree is implemented storing the SQLite db pages on LMDB.\n\nThe data is not compressed, and each db page is stored on just one disk sector (4096 bytes by default). This is achieved by reserving some bytes at each SQLite db page so it can fit into one LMDB overflow page, that can hold 4080 (4096 - 16) bytes.\n\n## Performance\n\nLiteTree is way faster than normal SQLite (journal mode) with comparable performance to WAL mode.\n\nHere are the some results:\n\n##### Linux\n\n```\nwriting:\n--------\nnormal   = 22.8921730518 seconds\nwal      = 10.7780168056 seconds\nmmap     = 10.4009709358 seconds\nlitetree = 10.8633410931 seconds\n\nreading:\n--------\nnormal   = 0.817955970764 seconds\nwal      = 0.660045146942 seconds\nmmap     = 0.592491865158 seconds\nlitetree = 0.619393110275 seconds\n```\n\n##### MacOSX\n\n```\nwriting:\n--------\nnormal   = 1.9102909565 seconds\nwal      = 1.30300784111 seconds\nmmap     = 1.21677088737 seconds\nlitetree = 0.988132953644 seconds\n\nreading:\n--------\nnormal   = 0.999235868454 seconds\nwal      = 0.776713132858 seconds\nmmap     = 0.653935909271 seconds\nlitetree = 0.714652061462 seconds\n```\n\n##### Windows\n\n```\nwriting:\n--------\nnormal   = 68.0931215734 seconds\nlitetree = 39.239919979 seconds\n\nreading:\n--------\nnormal   = 0.012673914421 seconds\nlitetree = 0.00631055510799 seconds\n```\n\nYou can make your own benchmark (after installing LiteTree) with this command:\n\n```\nmake benchmark\n```\n\n## Current Limits\n\nNumber of branches: 1024 branches  (can be increased)\n\nNumber of commits per branch: 2^64 = 18,446,744,073,709,551,615 commits\n\nConcurrent db connections to the same db: XXX readers\n\n## Some Limitations\n\nA database file created in one architecture cannot be used in another. This is a limitation of LMDB. We need to dump the database using `mdb_dump` and load it using `mdb_load`.\n\nThe db file cannot be opened by unmodified SQLite libraries.\n\nSavepoints are not yet supported.\n\n\n## How to use\n\nLiteTree can be used in many programming languages via existing SQLite wrappers.\n\n1. Update your app to open the database file using an URI containing the `branches` parameter, like this:\n\t```\n\t“file:data.db?branches=on”\n\t```\n\n2. Make your app use this new library instead of the pre-installed SQLite library:\n\n### On Linux\n\n This can be achieved in 4 ways:\n\n- Using the `LD_LIBRARY_PATH` environment variable:\n\t```\n\tLD_LIBRARY_PATH=/usr/local/lib/litetree ./myapp\n\t```\n\tThis can be used with all programming languages and wrappers.\n\n- Patching your wrapper or app to search for the library in the new path:\n\t```\n\tpatchelf --set-rpath /usr/local/lib/litetree lib_or_app\n\t```\n\n- Setting the `rpath` at the link time:\n\t```\n\tLIBPATH = /usr/local/lib/litetree\n\tgcc myapp.c -Wl,-rpath,$(LIBPATH) -L$(LIBPATH) -lsqlite3\n\t```\n\tYou can use this if your app is linking directly to the LiteTree library.\n\n- Replacing the pre-installed SQLite library on your system\n\n\tThis can also be used with many programming languages. But use it with care because the native library may have been compiled with different directives.\n\n\n### On Mac OSX\n\n This can be achieved in these ways:\n\n- Patching your wrapper or app to search for the library in the new path:\n\n\t```\n\tinstall_name_tool -change /old/path/to/libsqlite3.dylib /usr/local/lib/litetree/libsqlite3.dylib lib_or_app\n\t```\n\n\tYou can check the old path with this command:\n\n\t```\n\totool -L lib_or_app\n\t```\n\n\tThis method can be used with all programming languages and wrappers as long as they are not protected by the OS.\n\n\tIt it is protected then you will need to install a new copy of the wrapper, modify it and use it instead of the protected one.\n\n- Using the `DYLD_LIBRARY_PATH` environment variable:\n\n\t```\n\tDYLD_LIBRARY_PATH=/usr/local/lib/litetree ./myapp\n\t```\n\n\tThis can be used if the wrapper was linked to just the library name and does not contain any path.\n\n\tIf it does not work we can patch the wrapper to not contain any path:\n\n\t```\n\tinstall_name_tool -change /old/path/to/libsqlite3.dylib libsqlite3.dylib lib_or_app\n\t```\n\n\tBut if you are able to modify the wrapper with `install_name_tool` then the first method above may be better.\n\n- Linking to the LiteTree library:\n\n\t```\n\tgcc myapp.c -L/usr/local/lib/litetree -lsqlite3\n\t```\n\n\n### On Windows\n\nCopy the modified SQLite library to the system folder.\n\n- On 64 bit Windows:\n\n\tC:\\Windows\\System32 (if 64 bit DLL)\n\n\tC:\\Windows\\SysWOW64 (if 32 bit DLL)\n\n- On 32 bit Windows:\n\n\tC:\\Windows\\System32\n\n\n## Compiling and installing\n\n### On Linux and Mac OSX\n\nInstall [LMDB](https://github.com/lmdb/lmdb) if not already installed:\n\n```\ngit clone https://github.com/lmdb/lmdb\ncd lmdb/libraries/liblmdb\nmake\nsudo make install\n```\n\nThen install LiteTree:\n\n```\ngit clone https://github.com/aergoio/litetree\ncd litetree\nmake\nsudo make install\n```\n\n### On Windows\n\nYou can use these pre-compiled binaries: (can be outdated)\n\n- [32 bit DLLs](http://litesync.io/litetree/litetree-binaries-win-x86.zip)\n- [64 bit DLLs](http://litesync.io/litetree/litetree-binaries-win-x64.zip)\n\nOr follow these steps:\n\n1. Compile LMDB using [MinGW](https://github.com/kroggen/lmdb) or Visual Studio ([1](https://github.com/Ri0n/lmdb) or [2](https://github.com/htaox/lightningdb-win))\n\n2. Compile LiteTree using MinGW or Visual Studio\n\n3. Copy the libraries to the Windows System folder\n\n\n## Running the Tests\n\nThe tests are written in Python using the [pysqlite](https://github.com/ghaering/pysqlite) wrapper.\n\nOn **MacOSX** we cannot use a modified SQLite library with the pre-installed system python due to the System Integrity Protection so we need to install another copy of pysqlite and link it to the LiteTree library:\n\n```\ngit clone https://github.com/ghaering/pysqlite\ncd pysqlite\necho \"include_dirs=/usr/local/include\" >> setup.cfg\necho \"library_dirs=/usr/local/lib/litetree\" >> setup.cfg\npython setup.py build\nsudo python setup.py install\n```\n\nTo run the tests:\n\n```\nmake test\n```\n\n## License\n\nMIT\n\n## Creator\n\nDeveloped by Bernardo Ramos at\n\n<a href=\"https://aergo.io\"><img src=\"http://litesync.io/litetree/aergo-logo-black-slim.svg\" width=\"30%\"></a>\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.849609375,
          "content": "version: 0.1.{build}\n\nenvironment:\n  matrix:\n    - COMPILER: mingw\n      PLATFORM: Win32\n      MINGW_PATH: C:\\MinGW\\bin\n      PYTHON_PATH: C:\\Python27\n\n    - COMPILER: mingw-w64\n      PLATFORM: x64\n      MINGW_PATH: C:\\mingw-w64\\x86_64-7.3.0-posix-seh-rt_v5-rev0\\mingw64\\bin\n      PYTHON_PATH: C:\\Python27-x64\n\ninstall:\n  - set PATH=%MINGW_PATH%;%PYTHON_PATH%;%PATH%\n  - git clone --depth=1 https://github.com/kroggen/lmdb\n  - cd lmdb\\libraries\\liblmdb\n  - mingw32-make\n  - copy lmdb.dll ..\\..\\..\n  - cd ..\\..\\..\n\nbuild_script:\n  - mingw32-make LMDBPATH=\"lmdb\\libraries\\liblmdb\"\n  - mingw32-make test PY_HOME=%PYTHON_PATH% LMDBPATH=\"lmdb\\libraries\\liblmdb\"\n  - mingw32-make clean\n  # build without SQL log support\n  - mingw32-make LMDBPATH=\"lmdb\\libraries\\liblmdb\" CFLAGS=\"-DOMIT_BRANCH_LOG\"\n  - mingw32-make test PY_HOME=%PYTHON_PATH% LMDBPATH=\"lmdb\\libraries\\liblmdb\"\n"
        },
        {
          "name": "makefile",
          "type": "blob",
          "size": 6.2216796875,
          "content": "# The SONAME sets the api version compatibility.\n# It is using the same SONAME from the pre-installed sqlite3 library so\n# the library can be loaded by existing applications as python. For this\n# we can set the LD_LIBRARY_PATH when opening the app or set the rpath\n# in the executable.\n\nLIBFLAGS = -Wall -I$(LMDBINCPATH) $(CFLAGS)\nLDFLAGS  = $(LFLAGS) -L$(LMDBPATH) -llmdb\n\nifeq ($(OS),Windows_NT)\n    IMPLIB   = litetree-0.1\n    LIBRARY  = litetree-0.1.dll\n    LMDBPATH = ../lmdb/libraries/liblmdb\n    LMDBINCPATH = $(LMDBPATH)\n    #LIBFLAGS += $(LMDBPATH)mdb.c $(LMDBPATH)midl.c\n    LDFLAGS  += -static-libgcc -static-libstdc++\nelse\n    UNAME_S := $(shell uname -s)\n    ifeq ($(UNAME_S),Darwin)\n        OS = OSX\n        LIBRARY  = liblitetree.0.dylib\n        LIBNICK1 = liblitetree.dylib\n        LIBNICK2 = libsqlite3.0.dylib\n        LIBNICK3 = libsqlite3.dylib\n        INSTNAME = $(LIBPATH2)/libsqlite3.dylib\n        CURR_VERSION   = 1.0.0\n        COMPAT_VERSION = 1.0.0\n    else\n        LIBRARY  = liblitetree.so.0.0.1\n        LIBNICK1 = liblitetree.so.0\n        LIBNICK2 = liblitetree.so\n        LIBNICK3 = libsqlite3.so.0\n        LIBNICK4 = libsqlite3.so\n        SONAME   = libsqlite3.so.0\n    endif\n    LMDBPATH = /usr/local/lib\n    LMDBINCPATH = /usr/local/include\n    prefix  ?= /usr/local\n    LIBPATH  = $(prefix)/lib\n    LIBPATH2 = $(prefix)/lib/litetree\n    INCPATH  = $(prefix)/include\n    EXEPATH  = $(prefix)/bin\n    LIBFLAGS += -fPIC\n    LDFLAGS  += -lpthread\n    SHELLFLAGS = -DHAVE_READLINE\nendif\n\nCC = gcc\n\nSHORT = sqlite3\n\n# the item below cannot be called SHELL because it's a reserved name\nifeq ($(OS),Windows_NT)\n    SSHELL = sqlite3.exe\nelse\n    SSHELL = sqlite3\nendif\n\n#LIBFLAGS = -Wall -DSQLITE_USE_URI=1 -DSQLITE_ENABLE_JSON1 -DSQLITE_THREADSAFE=1 -DHAVE_USLEEP -DSQLITE_ENABLE_COLUMN_METADATA\nLIBFLAGS := $(LIBFLAGS) -DSQLITE_USE_URI=1 -DSQLITE_ENABLE_JSON1 -DSQLITE_THREADSAFE=1 -DHAVE_USLEEP -DSQLITE_ENABLE_COLUMN_METADATA\n\n\n.PHONY:  install debug test benchmark clean\n\n\nall:   $(LIBRARY) $(SSHELL)\n\ndebug: $(LIBRARY) $(SSHELL)\n\ndebug: export LIBFLAGS := -g -DSQLITE_DEBUG=1 -DDEBUGPRINT $(LIBFLAGS)\n\nlitetree-0.1.dll: $(SHORT).o\n\t$(CC) -shared -Wl,--out-implib,$(IMPLIB).lib $^ -o $@ $(LDFLAGS)\n\tstrip $(LIBRARY)\n\nliblitetree.0.dylib: $(SHORT).o\n\t$(CC) -dynamiclib -install_name \"$(INSTNAME)\" -current_version $(CURR_VERSION) -compatibility_version $(COMPAT_VERSION) $^ -o $@ $(LDFLAGS)\n\tstrip -x $(LIBRARY)\n\tinstall_name_tool -change liblmdb.so $(LMDBPATH)/liblmdb.so $@\n\tln -sf $(LIBRARY) $(LIBNICK1)\n\tln -sf $(LIBRARY) $(LIBNICK2)\n\tln -sf $(LIBRARY) $(LIBNICK3)\n\nliblitetree.so.0.0.1: $(SHORT).o\n\t$(CC) -shared -Wl,-soname,$(SONAME) -Wl,-rpath,$(LMDBPATH) $^ -o $@ $(LDFLAGS)\n\tstrip $(LIBRARY)\n\tln -sf $(LIBRARY) $(LIBNICK1)\n\tln -sf $(LIBNICK1) $(LIBNICK2)\n\tln -sf $(LIBRARY) $(LIBNICK3)\n\tln -sf $(LIBNICK3) $(LIBNICK4)\n\n$(SHORT).o: $(SHORT).c $(SHORT).h\n\t$(CC) $(LIBFLAGS) -c $< -o $@\n\n$(SSHELL): shell.o $(LIBRARY)\nifeq ($(OS),Windows_NT)\n\t$(CC) $< -o $@ -L. -l$(IMPLIB)\nelse ifeq ($(OS),OSX)\n\t$(CC) $< -o $@ -L. -lsqlite3 -ldl -lreadline\nelse\n\t$(CC) $< -o $@ -Wl,-rpath,$(LIBPATH) -L. -lsqlite3 -ldl -lreadline\nendif\n\tstrip $(SSHELL)\n\nshell.o: shell.c\n\t$(CC) -c $(SHELLFLAGS) $< -o $@\n\ninstall:\n\tmkdir -p $(LIBPATH)\n\tmkdir -p $(LIBPATH2)\n\tcp $(LIBRARY) $(LIBPATH)/\n\tcd $(LIBPATH) && ln -sf $(LIBRARY) $(LIBNICK1)\nifeq ($(OS),OSX)\n\tcd $(LIBPATH2) && ln -sf ../$(LIBNICK1) $(LIBNICK2)\n\tcd $(LIBPATH2) && ln -sf $(LIBNICK2) $(LIBNICK3)\nelse\n\tcd $(LIBPATH) && ln -sf $(LIBNICK1) $(LIBNICK2)\n\tcd $(LIBPATH2) && ln -sf ../$(LIBRARY) $(LIBNICK3)\n\tcd $(LIBPATH2) && ln -sf $(LIBNICK3) $(LIBNICK4)\nendif\n\tcp $(SHORT).h $(INCPATH)\n\tcp $(SSHELL) $(EXEPATH)\n\nclean:\n\trm -f *.o $(LIBRARY) $(LIBNICK1) $(LIBNICK2) $(LIBNICK3) $(LIBNICK4) $(SSHELL)\n\ntest: test/test.py test/test-64bit-commit-ids.py test/varint.py\nifeq ($(OS),Windows_NT)\nifeq ($(PY_HOME),)\n\t@echo \"PY_HOME is not set\"\nelse\n\tcd $(PY_HOME)/DLLs && [ ! -f sqlite3-orig.dll ] && mv sqlite3.dll sqlite3-orig.dll || true\n\tcp litetree-0.1.dll $(PY_HOME)/DLLs/sqlite3.dll\n\tcp $(LMDBPATH)/lmdb.dll $(PY_HOME)/DLLs/lmdb.dll\n\tcd test && python -mpip install lmdb\n\tcd test && python test.py -v\n\tcd test && python test-64bit-commit-ids.py -v\nendif\nelse\t# not Windows\nifneq ($(shell python -c \"import lmdb\" 2> /dev/null; echo $$?),0)\n\tsudo python -m easy_install cffi\n\tcd test && sudo python -m easy_install lmdb\nifneq ($(shell python -c \"import lmdb\" 2> /dev/null; echo $$?),0)\n\tgit clone --depth=1 https://github.com/dw/py-lmdb\n\tcd py-lmdb && sudo LMDB_FORCE_CPYTHON=1 python setup.py install\nifneq ($(shell python -c \"import lmdb\" 2> /dev/null; echo $$?),0)\n\tsudo python -c \"import cffi\"\n\tsudo python -c \"import lmdb\"\nendif\nendif\nendif\nifeq ($(OS),OSX)\nifneq ($(shell python -c \"import pysqlite2.dbapi2\" 2> /dev/null; echo $$?),0)\nifneq ($(shell [ -d $(LIBPATH2) ]; echo $$?),0)\n\t@echo \"run 'sudo make install' first\"\nendif\n\tgit clone --depth=1 https://github.com/ghaering/pysqlite\n\tcd pysqlite && echo \"include_dirs=$(INCPATH)\" >> setup.cfg\n\tcd pysqlite && echo \"library_dirs=$(LIBPATH2)\" >> setup.cfg\n\tcd pysqlite && python setup.py build\n\tcd pysqlite && sudo python setup.py install\nendif\n\tcd test && python test.py -v\n\tcd test && python test-64bit-commit-ids.py -v\nelse\t# Linux\n\tcd test && LD_LIBRARY_PATH=.. python test.py -v\n\tcd test && LD_LIBRARY_PATH=.. python test-64bit-commit-ids.py -v\nendif\nendif\n\nbenchmark: test/benchmark.py\nifeq ($(OS),Windows_NT)\nifeq ($(PY_HOME),)\n\t@echo \"PY_HOME is not set\"\nelse\n\tcd $(PY_HOME)/DLLs && [ ! -f sqlite3-orig.dll ] && mv sqlite3.dll sqlite3-orig.dll || true\n\tcp litetree-0.1.dll $(PY_HOME)/DLLs/sqlite3.dll\n\tcp $(LMDBPATH)/lmdb.dll $(PY_HOME)/DLLs/lmdb.dll\n\tcd test && python benchmark.py -v\nendif\nelse ifeq ($(OS),OSX)\nifneq ($(shell python -c \"import pysqlite2.dbapi2\" 2> /dev/null; echo $$?),0)\nifneq ($(shell [ -d $(LIBPATH2) ]; echo $$?),0)\n\t@echo \"run 'sudo make install' first\"\nendif\n\tgit clone --depth=1 https://github.com/ghaering/pysqlite\n\tcd pysqlite && echo \"include_dirs=$(INCPATH)\" >> setup.cfg\n\tcd pysqlite && echo \"library_dirs=$(LIBPATH2)\" >> setup.cfg\n\tcd pysqlite && python setup.py build\n\tcd pysqlite && sudo python setup.py install\nendif\n\tcd test && python benchmark.py -v\nelse\n\tcd test && LD_LIBRARY_PATH=.. python benchmark.py -v\nendif\n\n# variables:\n#   $@  output\n#   $^  all the requirements\n#   $<  first requirement\n"
        },
        {
          "name": "shell.c",
          "type": "blob",
          "size": 508.1142578125,
          "content": "/* DO NOT EDIT!\n** This file is automatically generated by the script in the canonical\n** SQLite source tree at tool/mkshellc.tcl.  That script combines source\n** code from various constituent source files of SQLite into this single\n** \"shell.c\" file used to implement the SQLite command-line shell.\n**\n** Most of the code found below comes from the \"src/shell.c.in\" file in\n** the canonical SQLite source tree.  That main file contains \"INCLUDE\"\n** lines that specify other files in the canonical source tree that are\n** inserted to getnerate this complete program source file.\n**\n** The code from multiple files is combined into this single \"shell.c\"\n** source file to help make the command-line program easier to compile.\n**\n** To modify this program, get a copy of the canonical SQLite source tree,\n** edit the src/shell.c.in\" and/or some of the other files that are included\n** by \"src/shell.c.in\", then rerun the tool/mkshellc.tcl script.\n*/\n/*\n** 2001 September 15\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n*************************************************************************\n** This file contains code to implement the \"sqlite\" command line\n** utility for accessing SQLite databases.\n*/\n#if (defined(_WIN32) || defined(WIN32)) && !defined(_CRT_SECURE_NO_WARNINGS)\n/* This needs to come before any includes for MSVC compiler */\n#define _CRT_SECURE_NO_WARNINGS\n#endif\n\n/*\n** Warning pragmas copied from msvc.h in the core.\n*/\n#if defined(_MSC_VER)\n#pragma warning(disable : 4054)\n#pragma warning(disable : 4055)\n#pragma warning(disable : 4100)\n#pragma warning(disable : 4127)\n#pragma warning(disable : 4130)\n#pragma warning(disable : 4152)\n#pragma warning(disable : 4189)\n#pragma warning(disable : 4206)\n#pragma warning(disable : 4210)\n#pragma warning(disable : 4232)\n#pragma warning(disable : 4244)\n#pragma warning(disable : 4305)\n#pragma warning(disable : 4306)\n#pragma warning(disable : 4702)\n#pragma warning(disable : 4706)\n#endif /* defined(_MSC_VER) */\n\n/*\n** No support for loadable extensions in VxWorks.\n*/\n#if (defined(__RTP__) || defined(_WRS_KERNEL)) && !SQLITE_OMIT_LOAD_EXTENSION\n# define SQLITE_OMIT_LOAD_EXTENSION 1\n#endif\n\n/*\n** Enable large-file support for fopen() and friends on unix.\n*/\n#ifndef SQLITE_DISABLE_LFS\n# define _LARGE_FILE       1\n# ifndef _FILE_OFFSET_BITS\n#   define _FILE_OFFSET_BITS 64\n# endif\n# define _LARGEFILE_SOURCE 1\n#endif\n\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <assert.h>\n#include \"sqlite3.h\"\ntypedef sqlite3_int64 i64;\ntypedef sqlite3_uint64 u64;\ntypedef unsigned char u8;\n#if SQLITE_USER_AUTHENTICATION\n# include \"sqlite3userauth.h\"\n#endif\n#include <ctype.h>\n#include <stdarg.h>\n\n#if !defined(_WIN32) && !defined(WIN32)\n# include <signal.h>\n# if !defined(__RTP__) && !defined(_WRS_KERNEL)\n#  include <pwd.h>\n# endif\n#endif\n#if (!defined(_WIN32) && !defined(WIN32)) || defined(__MINGW32__)\n# include <unistd.h>\n# include <dirent.h>\n# define GETPID getpid\n# if defined(__MINGW32__)\n#  define DIRENT dirent\n#  ifndef S_ISLNK\n#   define S_ISLNK(mode) (0)\n#  endif\n# endif\n#else\n# define GETPID (int)GetCurrentProcessId\n#endif\n#include <sys/types.h>\n#include <sys/stat.h>\n\n#if HAVE_READLINE\n# include <readline/readline.h>\n# include <readline/history.h>\n#endif\n\n#if HAVE_EDITLINE\n# include <editline/readline.h>\n#endif\n\n#if HAVE_EDITLINE || HAVE_READLINE\n\n# define shell_add_history(X) add_history(X)\n# define shell_read_history(X) read_history(X)\n# define shell_write_history(X) write_history(X)\n# define shell_stifle_history(X) stifle_history(X)\n# define shell_readline(X) readline(X)\n\n#elif HAVE_LINENOISE\n\n# include \"linenoise.h\"\n# define shell_add_history(X) linenoiseHistoryAdd(X)\n# define shell_read_history(X) linenoiseHistoryLoad(X)\n# define shell_write_history(X) linenoiseHistorySave(X)\n# define shell_stifle_history(X) linenoiseHistorySetMaxLen(X)\n# define shell_readline(X) linenoise(X)\n\n#else\n\n# define shell_read_history(X)\n# define shell_write_history(X)\n# define shell_stifle_history(X)\n\n# define SHELL_USE_LOCAL_GETLINE 1\n#endif\n\n\n#if defined(_WIN32) || defined(WIN32)\n# include <io.h>\n# include <fcntl.h>\n# define isatty(h) _isatty(h)\n# ifndef access\n#  define access(f,m) _access((f),(m))\n# endif\n# ifndef unlink\n#  define unlink _unlink\n# endif\n# ifndef strdup\n#  define strdup _strdup\n# endif\n# undef popen\n# define popen _popen\n# undef pclose\n# define pclose _pclose\n#else\n /* Make sure isatty() has a prototype. */\n extern int isatty(int);\n\n# if !defined(__RTP__) && !defined(_WRS_KERNEL)\n  /* popen and pclose are not C89 functions and so are\n  ** sometimes omitted from the <stdio.h> header */\n   extern FILE *popen(const char*,const char*);\n   extern int pclose(FILE*);\n# else\n#  define SQLITE_OMIT_POPEN 1\n# endif\n#endif\n\n#if defined(_WIN32_WCE)\n/* Windows CE (arm-wince-mingw32ce-gcc) does not provide isatty()\n * thus we always assume that we have a console. That can be\n * overridden with the -batch command line option.\n */\n#define isatty(x) 1\n#endif\n\n/* ctype macros that work with signed characters */\n#define IsSpace(X)  isspace((unsigned char)X)\n#define IsDigit(X)  isdigit((unsigned char)X)\n#define ToLower(X)  (char)tolower((unsigned char)X)\n\n#if defined(_WIN32) || defined(WIN32)\n#include <windows.h>\n\n/* string conversion routines only needed on Win32 */\nextern char *sqlite3_win32_unicode_to_utf8(LPCWSTR);\nextern char *sqlite3_win32_mbcs_to_utf8_v2(const char *, int);\nextern char *sqlite3_win32_utf8_to_mbcs_v2(const char *, int);\nextern LPWSTR sqlite3_win32_utf8_to_unicode(const char *zText);\n#endif\n\n/* On Windows, we normally run with output mode of TEXT so that \\n characters\n** are automatically translated into \\r\\n.  However, this behavior needs\n** to be disabled in some cases (ex: when generating CSV output and when\n** rendering quoted strings that contain \\n characters).  The following\n** routines take care of that.\n*/\n#if defined(_WIN32) || defined(WIN32)\nstatic void setBinaryMode(FILE *file, int isOutput){\n  if( isOutput ) fflush(file);\n  _setmode(_fileno(file), _O_BINARY);\n}\nstatic void setTextMode(FILE *file, int isOutput){\n  if( isOutput ) fflush(file);\n  _setmode(_fileno(file), _O_TEXT);\n}\n#else\n# define setBinaryMode(X,Y)\n# define setTextMode(X,Y)\n#endif\n\n\n/* True if the timer is enabled */\nstatic int enableTimer = 0;\n\n/* Return the current wall-clock time */\nstatic sqlite3_int64 timeOfDay(void){\n  static sqlite3_vfs *clockVfs = 0;\n  sqlite3_int64 t;\n  if( clockVfs==0 ) clockVfs = sqlite3_vfs_find(0);\n  if( clockVfs->iVersion>=2 && clockVfs->xCurrentTimeInt64!=0 ){\n    clockVfs->xCurrentTimeInt64(clockVfs, &t);\n  }else{\n    double r;\n    clockVfs->xCurrentTime(clockVfs, &r);\n    t = (sqlite3_int64)(r*86400000.0);\n  }\n  return t;\n}\n\n#if !defined(_WIN32) && !defined(WIN32) && !defined(__minux)\n#include <sys/time.h>\n#include <sys/resource.h>\n\n/* VxWorks does not support getrusage() as far as we can determine */\n#if defined(_WRS_KERNEL) || defined(__RTP__)\nstruct rusage {\n  struct timeval ru_utime; /* user CPU time used */\n  struct timeval ru_stime; /* system CPU time used */\n};\n#define getrusage(A,B) memset(B,0,sizeof(*B))\n#endif\n\n/* Saved resource information for the beginning of an operation */\nstatic struct rusage sBegin;  /* CPU time at start */\nstatic sqlite3_int64 iBegin;  /* Wall-clock time at start */\n\n/*\n** Begin timing an operation\n*/\nstatic void beginTimer(void){\n  if( enableTimer ){\n    getrusage(RUSAGE_SELF, &sBegin);\n    iBegin = timeOfDay();\n  }\n}\n\n/* Return the difference of two time_structs in seconds */\nstatic double timeDiff(struct timeval *pStart, struct timeval *pEnd){\n  return (pEnd->tv_usec - pStart->tv_usec)*0.000001 +\n         (double)(pEnd->tv_sec - pStart->tv_sec);\n}\n\n/*\n** Print the timing results.\n*/\nstatic void endTimer(void){\n  if( enableTimer ){\n    sqlite3_int64 iEnd = timeOfDay();\n    struct rusage sEnd;\n    getrusage(RUSAGE_SELF, &sEnd);\n    printf(\"Run Time: real %.3f user %f sys %f\\n\",\n       (iEnd - iBegin)*0.001,\n       timeDiff(&sBegin.ru_utime, &sEnd.ru_utime),\n       timeDiff(&sBegin.ru_stime, &sEnd.ru_stime));\n  }\n}\n\n#define BEGIN_TIMER beginTimer()\n#define END_TIMER endTimer()\n#define HAS_TIMER 1\n\n#elif (defined(_WIN32) || defined(WIN32))\n\n/* Saved resource information for the beginning of an operation */\nstatic HANDLE hProcess;\nstatic FILETIME ftKernelBegin;\nstatic FILETIME ftUserBegin;\nstatic sqlite3_int64 ftWallBegin;\ntypedef BOOL (WINAPI *GETPROCTIMES)(HANDLE, LPFILETIME, LPFILETIME,\n                                    LPFILETIME, LPFILETIME);\nstatic GETPROCTIMES getProcessTimesAddr = NULL;\n\n/*\n** Check to see if we have timer support.  Return 1 if necessary\n** support found (or found previously).\n*/\nstatic int hasTimer(void){\n  if( getProcessTimesAddr ){\n    return 1;\n  } else {\n    /* GetProcessTimes() isn't supported in WIN95 and some other Windows\n    ** versions. See if the version we are running on has it, and if it\n    ** does, save off a pointer to it and the current process handle.\n    */\n    hProcess = GetCurrentProcess();\n    if( hProcess ){\n      HINSTANCE hinstLib = LoadLibrary(TEXT(\"Kernel32.dll\"));\n      if( NULL != hinstLib ){\n        getProcessTimesAddr =\n            (GETPROCTIMES) GetProcAddress(hinstLib, \"GetProcessTimes\");\n        if( NULL != getProcessTimesAddr ){\n          return 1;\n        }\n        FreeLibrary(hinstLib);\n      }\n    }\n  }\n  return 0;\n}\n\n/*\n** Begin timing an operation\n*/\nstatic void beginTimer(void){\n  if( enableTimer && getProcessTimesAddr ){\n    FILETIME ftCreation, ftExit;\n    getProcessTimesAddr(hProcess,&ftCreation,&ftExit,\n                        &ftKernelBegin,&ftUserBegin);\n    ftWallBegin = timeOfDay();\n  }\n}\n\n/* Return the difference of two FILETIME structs in seconds */\nstatic double timeDiff(FILETIME *pStart, FILETIME *pEnd){\n  sqlite_int64 i64Start = *((sqlite_int64 *) pStart);\n  sqlite_int64 i64End = *((sqlite_int64 *) pEnd);\n  return (double) ((i64End - i64Start) / 10000000.0);\n}\n\n/*\n** Print the timing results.\n*/\nstatic void endTimer(void){\n  if( enableTimer && getProcessTimesAddr){\n    FILETIME ftCreation, ftExit, ftKernelEnd, ftUserEnd;\n    sqlite3_int64 ftWallEnd = timeOfDay();\n    getProcessTimesAddr(hProcess,&ftCreation,&ftExit,&ftKernelEnd,&ftUserEnd);\n    printf(\"Run Time: real %.3f user %f sys %f\\n\",\n       (ftWallEnd - ftWallBegin)*0.001,\n       timeDiff(&ftUserBegin, &ftUserEnd),\n       timeDiff(&ftKernelBegin, &ftKernelEnd));\n  }\n}\n\n#define BEGIN_TIMER beginTimer()\n#define END_TIMER endTimer()\n#define HAS_TIMER hasTimer()\n\n#else\n#define BEGIN_TIMER\n#define END_TIMER\n#define HAS_TIMER 0\n#endif\n\n/*\n** Used to prevent warnings about unused parameters\n*/\n#define UNUSED_PARAMETER(x) (void)(x)\n\n/*\n** Number of elements in an array\n*/\n#define ArraySize(X)  (int)(sizeof(X)/sizeof(X[0]))\n\n/*\n** If the following flag is set, then command execution stops\n** at an error if we are not interactive.\n*/\nstatic int bail_on_error = 0;\n\n/*\n** Threat stdin as an interactive input if the following variable\n** is true.  Otherwise, assume stdin is connected to a file or pipe.\n*/\nstatic int stdin_is_interactive = 1;\n\n/*\n** On Windows systems we have to know if standard output is a console\n** in order to translate UTF-8 into MBCS.  The following variable is\n** true if translation is required.\n*/\nstatic int stdout_is_console = 1;\n\n/*\n** The following is the open SQLite database.  We make a pointer\n** to this database a static variable so that it can be accessed\n** by the SIGINT handler to interrupt database processing.\n*/\nstatic sqlite3 *globalDb = 0;\n\n/*\n** True if an interrupt (Control-C) has been received.\n*/\nstatic volatile int seenInterrupt = 0;\n\n/*\n** This is the name of our program. It is set in main(), used\n** in a number of other places, mostly for error messages.\n*/\nstatic char *Argv0;\n\n/*\n** Prompt strings. Initialized in main. Settable with\n**   .prompt main continue\n*/\nstatic char mainPrompt[20];     /* First line prompt. default: \"sqlite> \"*/\nstatic char continuePrompt[20]; /* Continuation prompt. default: \"   ...> \" */\n\n/*\n** Render output like fprintf().  Except, if the output is going to the\n** console and if this is running on a Windows machine, translate the\n** output from UTF-8 into MBCS.\n*/\n#if defined(_WIN32) || defined(WIN32)\nvoid utf8_printf(FILE *out, const char *zFormat, ...){\n  va_list ap;\n  va_start(ap, zFormat);\n  if( stdout_is_console && (out==stdout || out==stderr) ){\n    char *z1 = sqlite3_vmprintf(zFormat, ap);\n    char *z2 = sqlite3_win32_utf8_to_mbcs_v2(z1, 0);\n    sqlite3_free(z1);\n    fputs(z2, out);\n    sqlite3_free(z2);\n  }else{\n    vfprintf(out, zFormat, ap);\n  }\n  va_end(ap);\n}\n#elif !defined(utf8_printf)\n# define utf8_printf fprintf\n#endif\n\n/*\n** Render output like fprintf().  This should not be used on anything that\n** includes string formatting (e.g. \"%s\").\n*/\n#if !defined(raw_printf)\n# define raw_printf fprintf\n#endif\n\n/* Indicate out-of-memory and exit. */\nstatic void shell_out_of_memory(void){\n  raw_printf(stderr,\"Error: out of memory\\n\");\n  exit(1);\n}\n\n/*\n** Write I/O traces to the following stream.\n*/\n#ifdef SQLITE_ENABLE_IOTRACE\nstatic FILE *iotrace = 0;\n#endif\n\n/*\n** This routine works like printf in that its first argument is a\n** format string and subsequent arguments are values to be substituted\n** in place of % fields.  The result of formatting this string\n** is written to iotrace.\n*/\n#ifdef SQLITE_ENABLE_IOTRACE\nstatic void SQLITE_CDECL iotracePrintf(const char *zFormat, ...){\n  va_list ap;\n  char *z;\n  if( iotrace==0 ) return;\n  va_start(ap, zFormat);\n  z = sqlite3_vmprintf(zFormat, ap);\n  va_end(ap);\n  utf8_printf(iotrace, \"%s\", z);\n  sqlite3_free(z);\n}\n#endif\n\n/*\n** Output string zUtf to stream pOut as w characters.  If w is negative,\n** then right-justify the text.  W is the width in UTF-8 characters, not\n** in bytes.  This is different from the %*.*s specification in printf\n** since with %*.*s the width is measured in bytes, not characters.\n*/\nstatic void utf8_width_print(FILE *pOut, int w, const char *zUtf){\n  int i;\n  int n;\n  int aw = w<0 ? -w : w;\n  char zBuf[1000];\n  if( aw>(int)sizeof(zBuf)/3 ) aw = (int)sizeof(zBuf)/3;\n  for(i=n=0; zUtf[i]; i++){\n    if( (zUtf[i]&0xc0)!=0x80 ){\n      n++;\n      if( n==aw ){\n        do{ i++; }while( (zUtf[i]&0xc0)==0x80 );\n        break;\n      }\n    }\n  }\n  if( n>=aw ){\n    utf8_printf(pOut, \"%.*s\", i, zUtf);\n  }else if( w<0 ){\n    utf8_printf(pOut, \"%*s%s\", aw-n, \"\", zUtf);\n  }else{\n    utf8_printf(pOut, \"%s%*s\", zUtf, aw-n, \"\");\n  }\n}\n\n\n/*\n** Determines if a string is a number of not.\n*/\nstatic int isNumber(const char *z, int *realnum){\n  if( *z=='-' || *z=='+' ) z++;\n  if( !IsDigit(*z) ){\n    return 0;\n  }\n  z++;\n  if( realnum ) *realnum = 0;\n  while( IsDigit(*z) ){ z++; }\n  if( *z=='.' ){\n    z++;\n    if( !IsDigit(*z) ) return 0;\n    while( IsDigit(*z) ){ z++; }\n    if( realnum ) *realnum = 1;\n  }\n  if( *z=='e' || *z=='E' ){\n    z++;\n    if( *z=='+' || *z=='-' ) z++;\n    if( !IsDigit(*z) ) return 0;\n    while( IsDigit(*z) ){ z++; }\n    if( realnum ) *realnum = 1;\n  }\n  return *z==0;\n}\n\n/*\n** Compute a string length that is limited to what can be stored in\n** lower 30 bits of a 32-bit signed integer.\n*/\nstatic int strlen30(const char *z){\n  const char *z2 = z;\n  while( *z2 ){ z2++; }\n  return 0x3fffffff & (int)(z2 - z);\n}\n\n/*\n** Return the length of a string in characters.  Multibyte UTF8 characters\n** count as a single character.\n*/\nstatic int strlenChar(const char *z){\n  int n = 0;\n  while( *z ){\n    if( (0xc0&*(z++))!=0x80 ) n++;\n  }\n  return n;\n}\n\n/*\n** This routine reads a line of text from FILE in, stores\n** the text in memory obtained from malloc() and returns a pointer\n** to the text.  NULL is returned at end of file, or if malloc()\n** fails.\n**\n** If zLine is not NULL then it is a malloced buffer returned from\n** a previous call to this routine that may be reused.\n*/\nstatic char *local_getline(char *zLine, FILE *in){\n  int nLine = zLine==0 ? 0 : 100;\n  int n = 0;\n\n  while( 1 ){\n    if( n+100>nLine ){\n      nLine = nLine*2 + 100;\n      zLine = realloc(zLine, nLine);\n      if( zLine==0 ) shell_out_of_memory();\n    }\n    if( fgets(&zLine[n], nLine - n, in)==0 ){\n      if( n==0 ){\n        free(zLine);\n        return 0;\n      }\n      zLine[n] = 0;\n      break;\n    }\n    while( zLine[n] ) n++;\n    if( n>0 && zLine[n-1]=='\\n' ){\n      n--;\n      if( n>0 && zLine[n-1]=='\\r' ) n--;\n      zLine[n] = 0;\n      break;\n    }\n  }\n#if defined(_WIN32) || defined(WIN32)\n  /* For interactive input on Windows systems, translate the\n  ** multi-byte characterset characters into UTF-8. */\n  if( stdin_is_interactive && in==stdin ){\n    char *zTrans = sqlite3_win32_mbcs_to_utf8_v2(zLine, 0);\n    if( zTrans ){\n      int nTrans = strlen30(zTrans)+1;\n      if( nTrans>nLine ){\n        zLine = realloc(zLine, nTrans);\n        if( zLine==0 ) shell_out_of_memory();\n      }\n      memcpy(zLine, zTrans, nTrans);\n      sqlite3_free(zTrans);\n    }\n  }\n#endif /* defined(_WIN32) || defined(WIN32) */\n  return zLine;\n}\n\n/*\n** Retrieve a single line of input text.\n**\n** If in==0 then read from standard input and prompt before each line.\n** If isContinuation is true, then a continuation prompt is appropriate.\n** If isContinuation is zero, then the main prompt should be used.\n**\n** If zPrior is not NULL then it is a buffer from a prior call to this\n** routine that can be reused.\n**\n** The result is stored in space obtained from malloc() and must either\n** be freed by the caller or else passed back into this routine via the\n** zPrior argument for reuse.\n*/\nstatic char *one_input_line(FILE *in, char *zPrior, int isContinuation){\n  char *zPrompt;\n  char *zResult;\n  if( in!=0 ){\n    zResult = local_getline(zPrior, in);\n  }else{\n    zPrompt = isContinuation ? continuePrompt : mainPrompt;\n#if SHELL_USE_LOCAL_GETLINE\n    printf(\"%s\", zPrompt);\n    fflush(stdout);\n    zResult = local_getline(zPrior, stdin);\n#else\n    free(zPrior);\n    zResult = shell_readline(zPrompt);\n    if( zResult && *zResult ) shell_add_history(zResult);\n#endif\n  }\n  return zResult;\n}\n\n\n/*\n** Return the value of a hexadecimal digit.  Return -1 if the input\n** is not a hex digit.\n*/\nstatic int hexDigitValue(char c){\n  if( c>='0' && c<='9' ) return c - '0';\n  if( c>='a' && c<='f' ) return c - 'a' + 10;\n  if( c>='A' && c<='F' ) return c - 'A' + 10;\n  return -1;\n}\n\n/*\n** Interpret zArg as an integer value, possibly with suffixes.\n*/\nstatic sqlite3_int64 integerValue(const char *zArg){\n  sqlite3_int64 v = 0;\n  static const struct { char *zSuffix; int iMult; } aMult[] = {\n    { \"KiB\", 1024 },\n    { \"MiB\", 1024*1024 },\n    { \"GiB\", 1024*1024*1024 },\n    { \"KB\",  1000 },\n    { \"MB\",  1000000 },\n    { \"GB\",  1000000000 },\n    { \"K\",   1000 },\n    { \"M\",   1000000 },\n    { \"G\",   1000000000 },\n  };\n  int i;\n  int isNeg = 0;\n  if( zArg[0]=='-' ){\n    isNeg = 1;\n    zArg++;\n  }else if( zArg[0]=='+' ){\n    zArg++;\n  }\n  if( zArg[0]=='0' && zArg[1]=='x' ){\n    int x;\n    zArg += 2;\n    while( (x = hexDigitValue(zArg[0]))>=0 ){\n      v = (v<<4) + x;\n      zArg++;\n    }\n  }else{\n    while( IsDigit(zArg[0]) ){\n      v = v*10 + zArg[0] - '0';\n      zArg++;\n    }\n  }\n  for(i=0; i<ArraySize(aMult); i++){\n    if( sqlite3_stricmp(aMult[i].zSuffix, zArg)==0 ){\n      v *= aMult[i].iMult;\n      break;\n    }\n  }\n  return isNeg? -v : v;\n}\n\n/*\n** A variable length string to which one can append text.\n*/\ntypedef struct ShellText ShellText;\nstruct ShellText {\n  char *z;\n  int n;\n  int nAlloc;\n};\n\n/*\n** Initialize and destroy a ShellText object\n*/\nstatic void initText(ShellText *p){\n  memset(p, 0, sizeof(*p));\n}\nstatic void freeText(ShellText *p){\n  free(p->z);\n  initText(p);\n}\n\n/* zIn is either a pointer to a NULL-terminated string in memory obtained\n** from malloc(), or a NULL pointer. The string pointed to by zAppend is\n** added to zIn, and the result returned in memory obtained from malloc().\n** zIn, if it was not NULL, is freed.\n**\n** If the third argument, quote, is not '\\0', then it is used as a\n** quote character for zAppend.\n*/\nstatic void appendText(ShellText *p, char const *zAppend, char quote){\n  int len;\n  int i;\n  int nAppend = strlen30(zAppend);\n\n  len = nAppend+p->n+1;\n  if( quote ){\n    len += 2;\n    for(i=0; i<nAppend; i++){\n      if( zAppend[i]==quote ) len++;\n    }\n  }\n\n  if( p->n+len>=p->nAlloc ){\n    p->nAlloc = p->nAlloc*2 + len + 20;\n    p->z = realloc(p->z, p->nAlloc);\n    if( p->z==0 ) shell_out_of_memory();\n  }\n\n  if( quote ){\n    char *zCsr = p->z+p->n;\n    *zCsr++ = quote;\n    for(i=0; i<nAppend; i++){\n      *zCsr++ = zAppend[i];\n      if( zAppend[i]==quote ) *zCsr++ = quote;\n    }\n    *zCsr++ = quote;\n    p->n = (int)(zCsr - p->z);\n    *zCsr = '\\0';\n  }else{\n    memcpy(p->z+p->n, zAppend, nAppend);\n    p->n += nAppend;\n    p->z[p->n] = '\\0';\n  }\n}\n\n/*\n** Attempt to determine if identifier zName needs to be quoted, either\n** because it contains non-alphanumeric characters, or because it is an\n** SQLite keyword.  Be conservative in this estimate:  When in doubt assume\n** that quoting is required.\n**\n** Return '\"' if quoting is required.  Return 0 if no quoting is required.\n*/\nstatic char quoteChar(const char *zName){\n  int i;\n  if( !isalpha((unsigned char)zName[0]) && zName[0]!='_' ) return '\"';\n  for(i=0; zName[i]; i++){\n    if( !isalnum((unsigned char)zName[i]) && zName[i]!='_' ) return '\"';\n  }\n  return sqlite3_keyword_check(zName, i) ? '\"' : 0;\n}\n\n/*\n** Construct a fake object name and column list to describe the structure\n** of the view, virtual table, or table valued function zSchema.zName.\n*/\nstatic char *shellFakeSchema(\n  sqlite3 *db,            /* The database connection containing the vtab */\n  const char *zSchema,    /* Schema of the database holding the vtab */\n  const char *zName       /* The name of the virtual table */\n){\n  sqlite3_stmt *pStmt = 0;\n  char *zSql;\n  ShellText s;\n  char cQuote;\n  char *zDiv = \"(\";\n  int nRow = 0;\n\n  zSql = sqlite3_mprintf(\"PRAGMA \\\"%w\\\".table_info=%Q;\",\n                         zSchema ? zSchema : \"main\", zName);\n  sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);\n  sqlite3_free(zSql);\n  initText(&s);\n  if( zSchema ){\n    cQuote = quoteChar(zSchema);\n    if( cQuote && sqlite3_stricmp(zSchema,\"temp\")==0 ) cQuote = 0;\n    appendText(&s, zSchema, cQuote);\n    appendText(&s, \".\", 0);\n  }\n  cQuote = quoteChar(zName);\n  appendText(&s, zName, cQuote);\n  while( sqlite3_step(pStmt)==SQLITE_ROW ){\n    const char *zCol = (const char*)sqlite3_column_text(pStmt, 1);\n    nRow++;\n    appendText(&s, zDiv, 0);\n    zDiv = \",\";\n    cQuote = quoteChar(zCol);\n    appendText(&s, zCol, cQuote);\n  }\n  appendText(&s, \")\", 0);\n  sqlite3_finalize(pStmt);\n  if( nRow==0 ){\n    freeText(&s);\n    s.z = 0;\n  }\n  return s.z;\n}\n\n/*\n** SQL function:  shell_module_schema(X)\n**\n** Return a fake schema for the table-valued function or eponymous virtual\n** table X.\n*/\nstatic void shellModuleSchema(\n  sqlite3_context *pCtx,\n  int nVal,\n  sqlite3_value **apVal\n){\n  const char *zName = (const char*)sqlite3_value_text(apVal[0]);\n  char *zFake = shellFakeSchema(sqlite3_context_db_handle(pCtx), 0, zName);\n  UNUSED_PARAMETER(nVal);\n  if( zFake ){\n    sqlite3_result_text(pCtx, sqlite3_mprintf(\"/* %s */\", zFake),\n                        -1, sqlite3_free);\n    free(zFake);\n  }\n}\n\n/*\n** SQL function:  shell_add_schema(S,X)\n**\n** Add the schema name X to the CREATE statement in S and return the result.\n** Examples:\n**\n**    CREATE TABLE t1(x)   ->   CREATE TABLE xyz.t1(x);\n**\n** Also works on\n**\n**    CREATE INDEX\n**    CREATE UNIQUE INDEX\n**    CREATE VIEW\n**    CREATE TRIGGER\n**    CREATE VIRTUAL TABLE\n**\n** This UDF is used by the .schema command to insert the schema name of\n** attached databases into the middle of the sqlite_master.sql field.\n*/\nstatic void shellAddSchemaName(\n  sqlite3_context *pCtx,\n  int nVal,\n  sqlite3_value **apVal\n){\n  static const char *aPrefix[] = {\n     \"TABLE\",\n     \"INDEX\",\n     \"UNIQUE INDEX\",\n     \"VIEW\",\n     \"TRIGGER\",\n     \"VIRTUAL TABLE\"\n  };\n  int i = 0;\n  const char *zIn = (const char*)sqlite3_value_text(apVal[0]);\n  const char *zSchema = (const char*)sqlite3_value_text(apVal[1]);\n  const char *zName = (const char*)sqlite3_value_text(apVal[2]);\n  sqlite3 *db = sqlite3_context_db_handle(pCtx);\n  UNUSED_PARAMETER(nVal);\n  if( zIn!=0 && strncmp(zIn, \"CREATE \", 7)==0 ){\n    for(i=0; i<(int)(sizeof(aPrefix)/sizeof(aPrefix[0])); i++){\n      int n = strlen30(aPrefix[i]);\n      if( strncmp(zIn+7, aPrefix[i], n)==0 && zIn[n+7]==' ' ){\n        char *z = 0;\n        char *zFake = 0;\n        if( zSchema ){\n          char cQuote = quoteChar(zSchema);\n          if( cQuote && sqlite3_stricmp(zSchema,\"temp\")!=0 ){\n            z = sqlite3_mprintf(\"%.*s \\\"%w\\\".%s\", n+7, zIn, zSchema, zIn+n+8);\n          }else{\n            z = sqlite3_mprintf(\"%.*s %s.%s\", n+7, zIn, zSchema, zIn+n+8);\n          }\n        }\n        if( zName\n         && aPrefix[i][0]=='V'\n         && (zFake = shellFakeSchema(db, zSchema, zName))!=0\n        ){\n          if( z==0 ){\n            z = sqlite3_mprintf(\"%s\\n/* %s */\", zIn, zFake);\n          }else{\n            z = sqlite3_mprintf(\"%z\\n/* %s */\", z, zFake);\n          }\n          free(zFake);\n        }\n        if( z ){\n          sqlite3_result_text(pCtx, z, -1, sqlite3_free);\n          return;\n        }\n      }\n    }\n  }\n  sqlite3_result_value(pCtx, apVal[0]);\n}\n\n/*\n** The source code for several run-time loadable extensions is inserted\n** below by the ../tool/mkshellc.tcl script.  Before processing that included\n** code, we need to override some macros to make the included program code\n** work here in the middle of this regular program.\n*/\n#define SQLITE_EXTENSION_INIT1\n#define SQLITE_EXTENSION_INIT2(X) (void)(X)\n\n#if defined(_WIN32) && defined(_MSC_VER)\n/************************* Begin test_windirent.h ******************/\n/*\n** 2015 November 30\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n*************************************************************************\n** This file contains declarations for most of the opendir() family of\n** POSIX functions on Win32 using the MSVCRT.\n*/\n\n#if defined(_WIN32) && defined(_MSC_VER) && !defined(SQLITE_WINDIRENT_H)\n#define SQLITE_WINDIRENT_H\n\n/*\n** We need several data types from the Windows SDK header.\n*/\n\n#ifndef WIN32_LEAN_AND_MEAN\n#define WIN32_LEAN_AND_MEAN\n#endif\n\n#include \"windows.h\"\n\n/*\n** We need several support functions from the SQLite core.\n*/\n\n\n/*\n** We need several things from the ANSI and MSVCRT headers.\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <io.h>\n#include <limits.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n\n/*\n** We may need several defines that should have been in \"sys/stat.h\".\n*/\n\n#ifndef S_ISREG\n#define S_ISREG(mode) (((mode) & S_IFMT) == S_IFREG)\n#endif\n\n#ifndef S_ISDIR\n#define S_ISDIR(mode) (((mode) & S_IFMT) == S_IFDIR)\n#endif\n\n#ifndef S_ISLNK\n#define S_ISLNK(mode) (0)\n#endif\n\n/*\n** We may need to provide the \"mode_t\" type.\n*/\n\n#ifndef MODE_T_DEFINED\n  #define MODE_T_DEFINED\n  typedef unsigned short mode_t;\n#endif\n\n/*\n** We may need to provide the \"ino_t\" type.\n*/\n\n#ifndef INO_T_DEFINED\n  #define INO_T_DEFINED\n  typedef unsigned short ino_t;\n#endif\n\n/*\n** We need to define \"NAME_MAX\" if it was not present in \"limits.h\".\n*/\n\n#ifndef NAME_MAX\n#  ifdef FILENAME_MAX\n#    define NAME_MAX (FILENAME_MAX)\n#  else\n#    define NAME_MAX (260)\n#  endif\n#endif\n\n/*\n** We need to define \"NULL_INTPTR_T\" and \"BAD_INTPTR_T\".\n*/\n\n#ifndef NULL_INTPTR_T\n#  define NULL_INTPTR_T ((intptr_t)(0))\n#endif\n\n#ifndef BAD_INTPTR_T\n#  define BAD_INTPTR_T ((intptr_t)(-1))\n#endif\n\n/*\n** We need to provide the necessary structures and related types.\n*/\n\n#ifndef DIRENT_DEFINED\n#define DIRENT_DEFINED\ntypedef struct DIRENT DIRENT;\ntypedef DIRENT *LPDIRENT;\nstruct DIRENT {\n  ino_t d_ino;               /* Sequence number, do not use. */\n  unsigned d_attributes;     /* Win32 file attributes. */\n  char d_name[NAME_MAX + 1]; /* Name within the directory. */\n};\n#endif\n\n#ifndef DIR_DEFINED\n#define DIR_DEFINED\ntypedef struct DIR DIR;\ntypedef DIR *LPDIR;\nstruct DIR {\n  intptr_t d_handle; /* Value returned by \"_findfirst\". */\n  DIRENT d_first;    /* DIRENT constructed based on \"_findfirst\". */\n  DIRENT d_next;     /* DIRENT constructed based on \"_findnext\". */\n};\n#endif\n\n/*\n** Provide a macro, for use by the implementation, to determine if a\n** particular directory entry should be skipped over when searching for\n** the next directory entry that should be returned by the readdir() or\n** readdir_r() functions.\n*/\n\n#ifndef is_filtered\n#  define is_filtered(a) ((((a).attrib)&_A_HIDDEN) || (((a).attrib)&_A_SYSTEM))\n#endif\n\n/*\n** Provide the function prototype for the POSIX compatiable getenv()\n** function.  This function is not thread-safe.\n*/\n\nextern const char *windirent_getenv(const char *name);\n\n/*\n** Finally, we can provide the function prototypes for the opendir(),\n** readdir(), readdir_r(), and closedir() POSIX functions.\n*/\n\nextern LPDIR opendir(const char *dirname);\nextern LPDIRENT readdir(LPDIR dirp);\nextern INT readdir_r(LPDIR dirp, LPDIRENT entry, LPDIRENT *result);\nextern INT closedir(LPDIR dirp);\n\n#endif /* defined(WIN32) && defined(_MSC_VER) */\n\n/************************* End test_windirent.h ********************/\n/************************* Begin test_windirent.c ******************/\n/*\n** 2015 November 30\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n*************************************************************************\n** This file contains code to implement most of the opendir() family of\n** POSIX functions on Win32 using the MSVCRT.\n*/\n\n#if defined(_WIN32) && defined(_MSC_VER)\n/* #include \"test_windirent.h\" */\n\n/*\n** Implementation of the POSIX getenv() function using the Win32 API.\n** This function is not thread-safe.\n*/\nconst char *windirent_getenv(\n  const char *name\n){\n  static char value[32768]; /* Maximum length, per MSDN */\n  DWORD dwSize = sizeof(value) / sizeof(char); /* Size in chars */\n  DWORD dwRet; /* Value returned by GetEnvironmentVariableA() */\n\n  memset(value, 0, sizeof(value));\n  dwRet = GetEnvironmentVariableA(name, value, dwSize);\n  if( dwRet==0 || dwRet>dwSize ){\n    /*\n    ** The function call to GetEnvironmentVariableA() failed -OR-\n    ** the buffer is not large enough.  Either way, return NULL.\n    */\n    return 0;\n  }else{\n    /*\n    ** The function call to GetEnvironmentVariableA() succeeded\n    ** -AND- the buffer contains the entire value.\n    */\n    return value;\n  }\n}\n\n/*\n** Implementation of the POSIX opendir() function using the MSVCRT.\n*/\nLPDIR opendir(\n  const char *dirname\n){\n  struct _finddata_t data;\n  LPDIR dirp = (LPDIR)sqlite3_malloc(sizeof(DIR));\n  SIZE_T namesize = sizeof(data.name) / sizeof(data.name[0]);\n\n  if( dirp==NULL ) return NULL;\n  memset(dirp, 0, sizeof(DIR));\n\n  /* TODO: Remove this if Unix-style root paths are not used. */\n  if( sqlite3_stricmp(dirname, \"/\")==0 ){\n    dirname = windirent_getenv(\"SystemDrive\");\n  }\n\n  memset(&data, 0, sizeof(struct _finddata_t));\n  _snprintf(data.name, namesize, \"%s\\\\*\", dirname);\n  dirp->d_handle = _findfirst(data.name, &data);\n\n  if( dirp->d_handle==BAD_INTPTR_T ){\n    closedir(dirp);\n    return NULL;\n  }\n\n  /* TODO: Remove this block to allow hidden and/or system files. */\n  if( is_filtered(data) ){\nnext:\n\n    memset(&data, 0, sizeof(struct _finddata_t));\n    if( _findnext(dirp->d_handle, &data)==-1 ){\n      closedir(dirp);\n      return NULL;\n    }\n\n    /* TODO: Remove this block to allow hidden and/or system files. */\n    if( is_filtered(data) ) goto next;\n  }\n\n  dirp->d_first.d_attributes = data.attrib;\n  strncpy(dirp->d_first.d_name, data.name, NAME_MAX);\n  dirp->d_first.d_name[NAME_MAX] = '\\0';\n\n  return dirp;\n}\n\n/*\n** Implementation of the POSIX readdir() function using the MSVCRT.\n*/\nLPDIRENT readdir(\n  LPDIR dirp\n){\n  struct _finddata_t data;\n\n  if( dirp==NULL ) return NULL;\n\n  if( dirp->d_first.d_ino==0 ){\n    dirp->d_first.d_ino++;\n    dirp->d_next.d_ino++;\n\n    return &dirp->d_first;\n  }\n\nnext:\n\n  memset(&data, 0, sizeof(struct _finddata_t));\n  if( _findnext(dirp->d_handle, &data)==-1 ) return NULL;\n\n  /* TODO: Remove this block to allow hidden and/or system files. */\n  if( is_filtered(data) ) goto next;\n\n  dirp->d_next.d_ino++;\n  dirp->d_next.d_attributes = data.attrib;\n  strncpy(dirp->d_next.d_name, data.name, NAME_MAX);\n  dirp->d_next.d_name[NAME_MAX] = '\\0';\n\n  return &dirp->d_next;\n}\n\n/*\n** Implementation of the POSIX readdir_r() function using the MSVCRT.\n*/\nINT readdir_r(\n  LPDIR dirp,\n  LPDIRENT entry,\n  LPDIRENT *result\n){\n  struct _finddata_t data;\n\n  if( dirp==NULL ) return EBADF;\n\n  if( dirp->d_first.d_ino==0 ){\n    dirp->d_first.d_ino++;\n    dirp->d_next.d_ino++;\n\n    entry->d_ino = dirp->d_first.d_ino;\n    entry->d_attributes = dirp->d_first.d_attributes;\n    strncpy(entry->d_name, dirp->d_first.d_name, NAME_MAX);\n    entry->d_name[NAME_MAX] = '\\0';\n\n    *result = entry;\n    return 0;\n  }\n\nnext:\n\n  memset(&data, 0, sizeof(struct _finddata_t));\n  if( _findnext(dirp->d_handle, &data)==-1 ){\n    *result = NULL;\n    return ENOENT;\n  }\n\n  /* TODO: Remove this block to allow hidden and/or system files. */\n  if( is_filtered(data) ) goto next;\n\n  entry->d_ino = (ino_t)-1; /* not available */\n  entry->d_attributes = data.attrib;\n  strncpy(entry->d_name, data.name, NAME_MAX);\n  entry->d_name[NAME_MAX] = '\\0';\n\n  *result = entry;\n  return 0;\n}\n\n/*\n** Implementation of the POSIX closedir() function using the MSVCRT.\n*/\nINT closedir(\n  LPDIR dirp\n){\n  INT result = 0;\n\n  if( dirp==NULL ) return EINVAL;\n\n  if( dirp->d_handle!=NULL_INTPTR_T && dirp->d_handle!=BAD_INTPTR_T ){\n    result = _findclose(dirp->d_handle);\n  }\n\n  sqlite3_free(dirp);\n  return result;\n}\n\n#endif /* defined(WIN32) && defined(_MSC_VER) */\n\n/************************* End test_windirent.c ********************/\n#define dirent DIRENT\n#endif\n/************************* Begin ../ext/misc/shathree.c ******************/\n/*\n** 2017-03-08\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n******************************************************************************\n**\n** This SQLite extension implements functions that compute SHA3 hashes.\n** Two SQL functions are implemented:\n**\n**     sha3(X,SIZE)\n**     sha3_query(Y,SIZE)\n**\n** The sha3(X) function computes the SHA3 hash of the input X, or NULL if\n** X is NULL.\n**\n** The sha3_query(Y) function evalutes all queries in the SQL statements of Y\n** and returns a hash of their results.\n**\n** The SIZE argument is optional.  If omitted, the SHA3-256 hash algorithm\n** is used.  If SIZE is included it must be one of the integers 224, 256,\n** 384, or 512, to determine SHA3 hash variant that is computed.\n*/\nSQLITE_EXTENSION_INIT1\n#include <assert.h>\n#include <string.h>\n#include <stdarg.h>\n/* typedef sqlite3_uint64 u64; */\n\n/******************************************************************************\n** The Hash Engine\n*/\n/*\n** Macros to determine whether the machine is big or little endian,\n** and whether or not that determination is run-time or compile-time.\n**\n** For best performance, an attempt is made to guess at the byte-order\n** using C-preprocessor macros.  If that is unsuccessful, or if\n** -DSHA3_BYTEORDER=0 is set, then byte-order is determined\n** at run-time.\n*/\n#ifndef SHA3_BYTEORDER\n# if defined(i386)     || defined(__i386__)   || defined(_M_IX86) ||    \\\n     defined(__x86_64) || defined(__x86_64__) || defined(_M_X64)  ||    \\\n     defined(_M_AMD64) || defined(_M_ARM)     || defined(__x86)   ||    \\\n     defined(__arm__)\n#   define SHA3_BYTEORDER    1234\n# elif defined(sparc)    || defined(__ppc__)\n#   define SHA3_BYTEORDER    4321\n# else\n#   define SHA3_BYTEORDER 0\n# endif\n#endif\n\n\n/*\n** State structure for a SHA3 hash in progress\n*/\ntypedef struct SHA3Context SHA3Context;\nstruct SHA3Context {\n  union {\n    u64 s[25];                /* Keccak state. 5x5 lines of 64 bits each */\n    unsigned char x[1600];    /* ... or 1600 bytes */\n  } u;\n  unsigned nRate;        /* Bytes of input accepted per Keccak iteration */\n  unsigned nLoaded;      /* Input bytes loaded into u.x[] so far this cycle */\n  unsigned ixMask;       /* Insert next input into u.x[nLoaded^ixMask]. */\n};\n\n/*\n** A single step of the Keccak mixing function for a 1600-bit state\n*/\nstatic void KeccakF1600Step(SHA3Context *p){\n  int i;\n  u64 b0, b1, b2, b3, b4;\n  u64 c0, c1, c2, c3, c4;\n  u64 d0, d1, d2, d3, d4;\n  static const u64 RC[] = {\n    0x0000000000000001ULL,  0x0000000000008082ULL,\n    0x800000000000808aULL,  0x8000000080008000ULL,\n    0x000000000000808bULL,  0x0000000080000001ULL,\n    0x8000000080008081ULL,  0x8000000000008009ULL,\n    0x000000000000008aULL,  0x0000000000000088ULL,\n    0x0000000080008009ULL,  0x000000008000000aULL,\n    0x000000008000808bULL,  0x800000000000008bULL,\n    0x8000000000008089ULL,  0x8000000000008003ULL,\n    0x8000000000008002ULL,  0x8000000000000080ULL,\n    0x000000000000800aULL,  0x800000008000000aULL,\n    0x8000000080008081ULL,  0x8000000000008080ULL,\n    0x0000000080000001ULL,  0x8000000080008008ULL\n  };\n# define a00 (p->u.s[0])\n# define a01 (p->u.s[1])\n# define a02 (p->u.s[2])\n# define a03 (p->u.s[3])\n# define a04 (p->u.s[4])\n# define a10 (p->u.s[5])\n# define a11 (p->u.s[6])\n# define a12 (p->u.s[7])\n# define a13 (p->u.s[8])\n# define a14 (p->u.s[9])\n# define a20 (p->u.s[10])\n# define a21 (p->u.s[11])\n# define a22 (p->u.s[12])\n# define a23 (p->u.s[13])\n# define a24 (p->u.s[14])\n# define a30 (p->u.s[15])\n# define a31 (p->u.s[16])\n# define a32 (p->u.s[17])\n# define a33 (p->u.s[18])\n# define a34 (p->u.s[19])\n# define a40 (p->u.s[20])\n# define a41 (p->u.s[21])\n# define a42 (p->u.s[22])\n# define a43 (p->u.s[23])\n# define a44 (p->u.s[24])\n# define ROL64(a,x) ((a<<x)|(a>>(64-x)))\n\n  for(i=0; i<24; i+=4){\n    c0 = a00^a10^a20^a30^a40;\n    c1 = a01^a11^a21^a31^a41;\n    c2 = a02^a12^a22^a32^a42;\n    c3 = a03^a13^a23^a33^a43;\n    c4 = a04^a14^a24^a34^a44;\n    d0 = c4^ROL64(c1, 1);\n    d1 = c0^ROL64(c2, 1);\n    d2 = c1^ROL64(c3, 1);\n    d3 = c2^ROL64(c4, 1);\n    d4 = c3^ROL64(c0, 1);\n\n    b0 = (a00^d0);\n    b1 = ROL64((a11^d1), 44);\n    b2 = ROL64((a22^d2), 43);\n    b3 = ROL64((a33^d3), 21);\n    b4 = ROL64((a44^d4), 14);\n    a00 =   b0 ^((~b1)&  b2 );\n    a00 ^= RC[i];\n    a11 =   b1 ^((~b2)&  b3 );\n    a22 =   b2 ^((~b3)&  b4 );\n    a33 =   b3 ^((~b4)&  b0 );\n    a44 =   b4 ^((~b0)&  b1 );\n\n    b2 = ROL64((a20^d0), 3);\n    b3 = ROL64((a31^d1), 45);\n    b4 = ROL64((a42^d2), 61);\n    b0 = ROL64((a03^d3), 28);\n    b1 = ROL64((a14^d4), 20);\n    a20 =   b0 ^((~b1)&  b2 );\n    a31 =   b1 ^((~b2)&  b3 );\n    a42 =   b2 ^((~b3)&  b4 );\n    a03 =   b3 ^((~b4)&  b0 );\n    a14 =   b4 ^((~b0)&  b1 );\n\n    b4 = ROL64((a40^d0), 18);\n    b0 = ROL64((a01^d1), 1);\n    b1 = ROL64((a12^d2), 6);\n    b2 = ROL64((a23^d3), 25);\n    b3 = ROL64((a34^d4), 8);\n    a40 =   b0 ^((~b1)&  b2 );\n    a01 =   b1 ^((~b2)&  b3 );\n    a12 =   b2 ^((~b3)&  b4 );\n    a23 =   b3 ^((~b4)&  b0 );\n    a34 =   b4 ^((~b0)&  b1 );\n\n    b1 = ROL64((a10^d0), 36);\n    b2 = ROL64((a21^d1), 10);\n    b3 = ROL64((a32^d2), 15);\n    b4 = ROL64((a43^d3), 56);\n    b0 = ROL64((a04^d4), 27);\n    a10 =   b0 ^((~b1)&  b2 );\n    a21 =   b1 ^((~b2)&  b3 );\n    a32 =   b2 ^((~b3)&  b4 );\n    a43 =   b3 ^((~b4)&  b0 );\n    a04 =   b4 ^((~b0)&  b1 );\n\n    b3 = ROL64((a30^d0), 41);\n    b4 = ROL64((a41^d1), 2);\n    b0 = ROL64((a02^d2), 62);\n    b1 = ROL64((a13^d3), 55);\n    b2 = ROL64((a24^d4), 39);\n    a30 =   b0 ^((~b1)&  b2 );\n    a41 =   b1 ^((~b2)&  b3 );\n    a02 =   b2 ^((~b3)&  b4 );\n    a13 =   b3 ^((~b4)&  b0 );\n    a24 =   b4 ^((~b0)&  b1 );\n\n    c0 = a00^a20^a40^a10^a30;\n    c1 = a11^a31^a01^a21^a41;\n    c2 = a22^a42^a12^a32^a02;\n    c3 = a33^a03^a23^a43^a13;\n    c4 = a44^a14^a34^a04^a24;\n    d0 = c4^ROL64(c1, 1);\n    d1 = c0^ROL64(c2, 1);\n    d2 = c1^ROL64(c3, 1);\n    d3 = c2^ROL64(c4, 1);\n    d4 = c3^ROL64(c0, 1);\n\n    b0 = (a00^d0);\n    b1 = ROL64((a31^d1), 44);\n    b2 = ROL64((a12^d2), 43);\n    b3 = ROL64((a43^d3), 21);\n    b4 = ROL64((a24^d4), 14);\n    a00 =   b0 ^((~b1)&  b2 );\n    a00 ^= RC[i+1];\n    a31 =   b1 ^((~b2)&  b3 );\n    a12 =   b2 ^((~b3)&  b4 );\n    a43 =   b3 ^((~b4)&  b0 );\n    a24 =   b4 ^((~b0)&  b1 );\n\n    b2 = ROL64((a40^d0), 3);\n    b3 = ROL64((a21^d1), 45);\n    b4 = ROL64((a02^d2), 61);\n    b0 = ROL64((a33^d3), 28);\n    b1 = ROL64((a14^d4), 20);\n    a40 =   b0 ^((~b1)&  b2 );\n    a21 =   b1 ^((~b2)&  b3 );\n    a02 =   b2 ^((~b3)&  b4 );\n    a33 =   b3 ^((~b4)&  b0 );\n    a14 =   b4 ^((~b0)&  b1 );\n\n    b4 = ROL64((a30^d0), 18);\n    b0 = ROL64((a11^d1), 1);\n    b1 = ROL64((a42^d2), 6);\n    b2 = ROL64((a23^d3), 25);\n    b3 = ROL64((a04^d4), 8);\n    a30 =   b0 ^((~b1)&  b2 );\n    a11 =   b1 ^((~b2)&  b3 );\n    a42 =   b2 ^((~b3)&  b4 );\n    a23 =   b3 ^((~b4)&  b0 );\n    a04 =   b4 ^((~b0)&  b1 );\n\n    b1 = ROL64((a20^d0), 36);\n    b2 = ROL64((a01^d1), 10);\n    b3 = ROL64((a32^d2), 15);\n    b4 = ROL64((a13^d3), 56);\n    b0 = ROL64((a44^d4), 27);\n    a20 =   b0 ^((~b1)&  b2 );\n    a01 =   b1 ^((~b2)&  b3 );\n    a32 =   b2 ^((~b3)&  b4 );\n    a13 =   b3 ^((~b4)&  b0 );\n    a44 =   b4 ^((~b0)&  b1 );\n\n    b3 = ROL64((a10^d0), 41);\n    b4 = ROL64((a41^d1), 2);\n    b0 = ROL64((a22^d2), 62);\n    b1 = ROL64((a03^d3), 55);\n    b2 = ROL64((a34^d4), 39);\n    a10 =   b0 ^((~b1)&  b2 );\n    a41 =   b1 ^((~b2)&  b3 );\n    a22 =   b2 ^((~b3)&  b4 );\n    a03 =   b3 ^((~b4)&  b0 );\n    a34 =   b4 ^((~b0)&  b1 );\n\n    c0 = a00^a40^a30^a20^a10;\n    c1 = a31^a21^a11^a01^a41;\n    c2 = a12^a02^a42^a32^a22;\n    c3 = a43^a33^a23^a13^a03;\n    c4 = a24^a14^a04^a44^a34;\n    d0 = c4^ROL64(c1, 1);\n    d1 = c0^ROL64(c2, 1);\n    d2 = c1^ROL64(c3, 1);\n    d3 = c2^ROL64(c4, 1);\n    d4 = c3^ROL64(c0, 1);\n\n    b0 = (a00^d0);\n    b1 = ROL64((a21^d1), 44);\n    b2 = ROL64((a42^d2), 43);\n    b3 = ROL64((a13^d3), 21);\n    b4 = ROL64((a34^d4), 14);\n    a00 =   b0 ^((~b1)&  b2 );\n    a00 ^= RC[i+2];\n    a21 =   b1 ^((~b2)&  b3 );\n    a42 =   b2 ^((~b3)&  b4 );\n    a13 =   b3 ^((~b4)&  b0 );\n    a34 =   b4 ^((~b0)&  b1 );\n\n    b2 = ROL64((a30^d0), 3);\n    b3 = ROL64((a01^d1), 45);\n    b4 = ROL64((a22^d2), 61);\n    b0 = ROL64((a43^d3), 28);\n    b1 = ROL64((a14^d4), 20);\n    a30 =   b0 ^((~b1)&  b2 );\n    a01 =   b1 ^((~b2)&  b3 );\n    a22 =   b2 ^((~b3)&  b4 );\n    a43 =   b3 ^((~b4)&  b0 );\n    a14 =   b4 ^((~b0)&  b1 );\n\n    b4 = ROL64((a10^d0), 18);\n    b0 = ROL64((a31^d1), 1);\n    b1 = ROL64((a02^d2), 6);\n    b2 = ROL64((a23^d3), 25);\n    b3 = ROL64((a44^d4), 8);\n    a10 =   b0 ^((~b1)&  b2 );\n    a31 =   b1 ^((~b2)&  b3 );\n    a02 =   b2 ^((~b3)&  b4 );\n    a23 =   b3 ^((~b4)&  b0 );\n    a44 =   b4 ^((~b0)&  b1 );\n\n    b1 = ROL64((a40^d0), 36);\n    b2 = ROL64((a11^d1), 10);\n    b3 = ROL64((a32^d2), 15);\n    b4 = ROL64((a03^d3), 56);\n    b0 = ROL64((a24^d4), 27);\n    a40 =   b0 ^((~b1)&  b2 );\n    a11 =   b1 ^((~b2)&  b3 );\n    a32 =   b2 ^((~b3)&  b4 );\n    a03 =   b3 ^((~b4)&  b0 );\n    a24 =   b4 ^((~b0)&  b1 );\n\n    b3 = ROL64((a20^d0), 41);\n    b4 = ROL64((a41^d1), 2);\n    b0 = ROL64((a12^d2), 62);\n    b1 = ROL64((a33^d3), 55);\n    b2 = ROL64((a04^d4), 39);\n    a20 =   b0 ^((~b1)&  b2 );\n    a41 =   b1 ^((~b2)&  b3 );\n    a12 =   b2 ^((~b3)&  b4 );\n    a33 =   b3 ^((~b4)&  b0 );\n    a04 =   b4 ^((~b0)&  b1 );\n\n    c0 = a00^a30^a10^a40^a20;\n    c1 = a21^a01^a31^a11^a41;\n    c2 = a42^a22^a02^a32^a12;\n    c3 = a13^a43^a23^a03^a33;\n    c4 = a34^a14^a44^a24^a04;\n    d0 = c4^ROL64(c1, 1);\n    d1 = c0^ROL64(c2, 1);\n    d2 = c1^ROL64(c3, 1);\n    d3 = c2^ROL64(c4, 1);\n    d4 = c3^ROL64(c0, 1);\n\n    b0 = (a00^d0);\n    b1 = ROL64((a01^d1), 44);\n    b2 = ROL64((a02^d2), 43);\n    b3 = ROL64((a03^d3), 21);\n    b4 = ROL64((a04^d4), 14);\n    a00 =   b0 ^((~b1)&  b2 );\n    a00 ^= RC[i+3];\n    a01 =   b1 ^((~b2)&  b3 );\n    a02 =   b2 ^((~b3)&  b4 );\n    a03 =   b3 ^((~b4)&  b0 );\n    a04 =   b4 ^((~b0)&  b1 );\n\n    b2 = ROL64((a10^d0), 3);\n    b3 = ROL64((a11^d1), 45);\n    b4 = ROL64((a12^d2), 61);\n    b0 = ROL64((a13^d3), 28);\n    b1 = ROL64((a14^d4), 20);\n    a10 =   b0 ^((~b1)&  b2 );\n    a11 =   b1 ^((~b2)&  b3 );\n    a12 =   b2 ^((~b3)&  b4 );\n    a13 =   b3 ^((~b4)&  b0 );\n    a14 =   b4 ^((~b0)&  b1 );\n\n    b4 = ROL64((a20^d0), 18);\n    b0 = ROL64((a21^d1), 1);\n    b1 = ROL64((a22^d2), 6);\n    b2 = ROL64((a23^d3), 25);\n    b3 = ROL64((a24^d4), 8);\n    a20 =   b0 ^((~b1)&  b2 );\n    a21 =   b1 ^((~b2)&  b3 );\n    a22 =   b2 ^((~b3)&  b4 );\n    a23 =   b3 ^((~b4)&  b0 );\n    a24 =   b4 ^((~b0)&  b1 );\n\n    b1 = ROL64((a30^d0), 36);\n    b2 = ROL64((a31^d1), 10);\n    b3 = ROL64((a32^d2), 15);\n    b4 = ROL64((a33^d3), 56);\n    b0 = ROL64((a34^d4), 27);\n    a30 =   b0 ^((~b1)&  b2 );\n    a31 =   b1 ^((~b2)&  b3 );\n    a32 =   b2 ^((~b3)&  b4 );\n    a33 =   b3 ^((~b4)&  b0 );\n    a34 =   b4 ^((~b0)&  b1 );\n\n    b3 = ROL64((a40^d0), 41);\n    b4 = ROL64((a41^d1), 2);\n    b0 = ROL64((a42^d2), 62);\n    b1 = ROL64((a43^d3), 55);\n    b2 = ROL64((a44^d4), 39);\n    a40 =   b0 ^((~b1)&  b2 );\n    a41 =   b1 ^((~b2)&  b3 );\n    a42 =   b2 ^((~b3)&  b4 );\n    a43 =   b3 ^((~b4)&  b0 );\n    a44 =   b4 ^((~b0)&  b1 );\n  }\n}\n\n/*\n** Initialize a new hash.  iSize determines the size of the hash\n** in bits and should be one of 224, 256, 384, or 512.  Or iSize\n** can be zero to use the default hash size of 256 bits.\n*/\nstatic void SHA3Init(SHA3Context *p, int iSize){\n  memset(p, 0, sizeof(*p));\n  if( iSize>=128 && iSize<=512 ){\n    p->nRate = (1600 - ((iSize + 31)&~31)*2)/8;\n  }else{\n    p->nRate = (1600 - 2*256)/8;\n  }\n#if SHA3_BYTEORDER==1234\n  /* Known to be little-endian at compile-time. No-op */\n#elif SHA3_BYTEORDER==4321\n  p->ixMask = 7;  /* Big-endian */\n#else\n  {\n    static unsigned int one = 1;\n    if( 1==*(unsigned char*)&one ){\n      /* Little endian.  No byte swapping. */\n      p->ixMask = 0;\n    }else{\n      /* Big endian.  Byte swap. */\n      p->ixMask = 7;\n    }\n  }\n#endif\n}\n\n/*\n** Make consecutive calls to the SHA3Update function to add new content\n** to the hash\n*/\nstatic void SHA3Update(\n  SHA3Context *p,\n  const unsigned char *aData,\n  unsigned int nData\n){\n  unsigned int i = 0;\n#if SHA3_BYTEORDER==1234\n  if( (p->nLoaded % 8)==0 && ((aData - (const unsigned char*)0)&7)==0 ){\n    for(; i+7<nData; i+=8){\n      p->u.s[p->nLoaded/8] ^= *(u64*)&aData[i];\n      p->nLoaded += 8;\n      if( p->nLoaded>=p->nRate ){\n        KeccakF1600Step(p);\n        p->nLoaded = 0;\n      }\n    }\n  }\n#endif\n  for(; i<nData; i++){\n#if SHA3_BYTEORDER==1234\n    p->u.x[p->nLoaded] ^= aData[i];\n#elif SHA3_BYTEORDER==4321\n    p->u.x[p->nLoaded^0x07] ^= aData[i];\n#else\n    p->u.x[p->nLoaded^p->ixMask] ^= aData[i];\n#endif\n    p->nLoaded++;\n    if( p->nLoaded==p->nRate ){\n      KeccakF1600Step(p);\n      p->nLoaded = 0;\n    }\n  }\n}\n\n/*\n** After all content has been added, invoke SHA3Final() to compute\n** the final hash.  The function returns a pointer to the binary\n** hash value.\n*/\nstatic unsigned char *SHA3Final(SHA3Context *p){\n  unsigned int i;\n  if( p->nLoaded==p->nRate-1 ){\n    const unsigned char c1 = 0x86;\n    SHA3Update(p, &c1, 1);\n  }else{\n    const unsigned char c2 = 0x06;\n    const unsigned char c3 = 0x80;\n    SHA3Update(p, &c2, 1);\n    p->nLoaded = p->nRate - 1;\n    SHA3Update(p, &c3, 1);\n  }\n  for(i=0; i<p->nRate; i++){\n    p->u.x[i+p->nRate] = p->u.x[i^p->ixMask];\n  }\n  return &p->u.x[p->nRate];\n}\n/* End of the hashing logic\n*****************************************************************************/\n\n/*\n** Implementation of the sha3(X,SIZE) function.\n**\n** Return a BLOB which is the SIZE-bit SHA3 hash of X.  The default\n** size is 256.  If X is a BLOB, it is hashed as is.  \n** For all other non-NULL types of input, X is converted into a UTF-8 string\n** and the string is hashed without the trailing 0x00 terminator.  The hash\n** of a NULL value is NULL.\n*/\nstatic void sha3Func(\n  sqlite3_context *context,\n  int argc,\n  sqlite3_value **argv\n){\n  SHA3Context cx;\n  int eType = sqlite3_value_type(argv[0]);\n  int nByte = sqlite3_value_bytes(argv[0]);\n  int iSize;\n  if( argc==1 ){\n    iSize = 256;\n  }else{\n    iSize = sqlite3_value_int(argv[1]);\n    if( iSize!=224 && iSize!=256 && iSize!=384 && iSize!=512 ){\n      sqlite3_result_error(context, \"SHA3 size should be one of: 224 256 \"\n                                    \"384 512\", -1);\n      return;\n    }\n  }\n  if( eType==SQLITE_NULL ) return;\n  SHA3Init(&cx, iSize);\n  if( eType==SQLITE_BLOB ){\n    SHA3Update(&cx, sqlite3_value_blob(argv[0]), nByte);\n  }else{\n    SHA3Update(&cx, sqlite3_value_text(argv[0]), nByte);\n  }\n  sqlite3_result_blob(context, SHA3Final(&cx), iSize/8, SQLITE_TRANSIENT);\n}\n\n/* Compute a string using sqlite3_vsnprintf() with a maximum length\n** of 50 bytes and add it to the hash.\n*/\nstatic void hash_step_vformat(\n  SHA3Context *p,                 /* Add content to this context */\n  const char *zFormat,\n  ...\n){\n  va_list ap;\n  int n;\n  char zBuf[50];\n  va_start(ap, zFormat);\n  sqlite3_vsnprintf(sizeof(zBuf),zBuf,zFormat,ap);\n  va_end(ap);\n  n = (int)strlen(zBuf);\n  SHA3Update(p, (unsigned char*)zBuf, n);\n}\n\n/*\n** Implementation of the sha3_query(SQL,SIZE) function.\n**\n** This function compiles and runs the SQL statement(s) given in the\n** argument. The results are hashed using a SIZE-bit SHA3.  The default\n** size is 256.\n**\n** The format of the byte stream that is hashed is summarized as follows:\n**\n**       S<n>:<sql>\n**       R\n**       N\n**       I<int>\n**       F<ieee-float>\n**       B<size>:<bytes>\n**       T<size>:<text>\n**\n** <sql> is the original SQL text for each statement run and <n> is\n** the size of that text.  The SQL text is UTF-8.  A single R character\n** occurs before the start of each row.  N means a NULL value.\n** I mean an 8-byte little-endian integer <int>.  F is a floating point\n** number with an 8-byte little-endian IEEE floating point value <ieee-float>.\n** B means blobs of <size> bytes.  T means text rendered as <size>\n** bytes of UTF-8.  The <n> and <size> values are expressed as an ASCII\n** text integers.\n**\n** For each SQL statement in the X input, there is one S segment.  Each\n** S segment is followed by zero or more R segments, one for each row in the\n** result set.  After each R, there are one or more N, I, F, B, or T segments,\n** one for each column in the result set.  Segments are concatentated directly\n** with no delimiters of any kind.\n*/\nstatic void sha3QueryFunc(\n  sqlite3_context *context,\n  int argc,\n  sqlite3_value **argv\n){\n  sqlite3 *db = sqlite3_context_db_handle(context);\n  const char *zSql = (const char*)sqlite3_value_text(argv[0]);\n  sqlite3_stmt *pStmt = 0;\n  int nCol;                   /* Number of columns in the result set */\n  int i;                      /* Loop counter */\n  int rc;\n  int n;\n  const char *z;\n  SHA3Context cx;\n  int iSize;\n\n  if( argc==1 ){\n    iSize = 256;\n  }else{\n    iSize = sqlite3_value_int(argv[1]);\n    if( iSize!=224 && iSize!=256 && iSize!=384 && iSize!=512 ){\n      sqlite3_result_error(context, \"SHA3 size should be one of: 224 256 \"\n                                    \"384 512\", -1);\n      return;\n    }\n  }\n  if( zSql==0 ) return;\n  SHA3Init(&cx, iSize);\n  while( zSql[0] ){\n    rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, &zSql);\n    if( rc ){\n      char *zMsg = sqlite3_mprintf(\"error SQL statement [%s]: %s\",\n                                   zSql, sqlite3_errmsg(db));\n      sqlite3_finalize(pStmt);\n      sqlite3_result_error(context, zMsg, -1);\n      sqlite3_free(zMsg);\n      return;\n    }\n    if( !sqlite3_stmt_readonly(pStmt) ){\n      char *zMsg = sqlite3_mprintf(\"non-query: [%s]\", sqlite3_sql(pStmt));\n      sqlite3_finalize(pStmt);\n      sqlite3_result_error(context, zMsg, -1);\n      sqlite3_free(zMsg);\n      return;\n    }\n    nCol = sqlite3_column_count(pStmt);\n    z = sqlite3_sql(pStmt);\n    n = (int)strlen(z);\n    hash_step_vformat(&cx,\"S%d:\",n);\n    SHA3Update(&cx,(unsigned char*)z,n);\n\n    /* Compute a hash over the result of the query */\n    while( SQLITE_ROW==sqlite3_step(pStmt) ){\n      SHA3Update(&cx,(const unsigned char*)\"R\",1);\n      for(i=0; i<nCol; i++){\n        switch( sqlite3_column_type(pStmt,i) ){\n          case SQLITE_NULL: {\n            SHA3Update(&cx, (const unsigned char*)\"N\",1);\n            break;\n          }\n          case SQLITE_INTEGER: {\n            sqlite3_uint64 u;\n            int j;\n            unsigned char x[9];\n            sqlite3_int64 v = sqlite3_column_int64(pStmt,i);\n            memcpy(&u, &v, 8);\n            for(j=8; j>=1; j--){\n              x[j] = u & 0xff;\n              u >>= 8;\n            }\n            x[0] = 'I';\n            SHA3Update(&cx, x, 9);\n            break;\n          }\n          case SQLITE_FLOAT: {\n            sqlite3_uint64 u;\n            int j;\n            unsigned char x[9];\n            double r = sqlite3_column_double(pStmt,i);\n            memcpy(&u, &r, 8);\n            for(j=8; j>=1; j--){\n              x[j] = u & 0xff;\n              u >>= 8;\n            }\n            x[0] = 'F';\n            SHA3Update(&cx,x,9);\n            break;\n          }\n          case SQLITE_TEXT: {\n            int n2 = sqlite3_column_bytes(pStmt, i);\n            const unsigned char *z2 = sqlite3_column_text(pStmt, i);\n            hash_step_vformat(&cx,\"T%d:\",n2);\n            SHA3Update(&cx, z2, n2);\n            break;\n          }\n          case SQLITE_BLOB: {\n            int n2 = sqlite3_column_bytes(pStmt, i);\n            const unsigned char *z2 = sqlite3_column_blob(pStmt, i);\n            hash_step_vformat(&cx,\"B%d:\",n2);\n            SHA3Update(&cx, z2, n2);\n            break;\n          }\n        }\n      }\n    }\n    sqlite3_finalize(pStmt);\n  }\n  sqlite3_result_blob(context, SHA3Final(&cx), iSize/8, SQLITE_TRANSIENT);\n}\n\n\n#ifdef _WIN32\n\n#endif\nint sqlite3_shathree_init(\n  sqlite3 *db,\n  char **pzErrMsg,\n  const sqlite3_api_routines *pApi\n){\n  int rc = SQLITE_OK;\n  SQLITE_EXTENSION_INIT2(pApi);\n  (void)pzErrMsg;  /* Unused parameter */\n  rc = sqlite3_create_function(db, \"sha3\", 1, SQLITE_UTF8, 0,\n                               sha3Func, 0, 0);\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_create_function(db, \"sha3\", 2, SQLITE_UTF8, 0,\n                                 sha3Func, 0, 0);\n  }\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_create_function(db, \"sha3_query\", 1, SQLITE_UTF8, 0,\n                                 sha3QueryFunc, 0, 0);\n  }\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_create_function(db, \"sha3_query\", 2, SQLITE_UTF8, 0,\n                                 sha3QueryFunc, 0, 0);\n  }\n  return rc;\n}\n\n/************************* End ../ext/misc/shathree.c ********************/\n/************************* Begin ../ext/misc/fileio.c ******************/\n/*\n** 2014-06-13\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n******************************************************************************\n**\n** This SQLite extension implements SQL functions readfile() and\n** writefile(), and eponymous virtual type \"fsdir\".\n**\n** WRITEFILE(FILE, DATA [, MODE [, MTIME]]):\n**\n**   If neither of the optional arguments is present, then this UDF\n**   function writes blob DATA to file FILE. If successful, the number\n**   of bytes written is returned. If an error occurs, NULL is returned.\n**\n**   If the first option argument - MODE - is present, then it must\n**   be passed an integer value that corresponds to a POSIX mode\n**   value (file type + permissions, as returned in the stat.st_mode\n**   field by the stat() system call). Three types of files may\n**   be written/created:\n**\n**     regular files:  (mode & 0170000)==0100000\n**     symbolic links: (mode & 0170000)==0120000\n**     directories:    (mode & 0170000)==0040000\n**\n**   For a directory, the DATA is ignored. For a symbolic link, it is\n**   interpreted as text and used as the target of the link. For a\n**   regular file, it is interpreted as a blob and written into the\n**   named file. Regardless of the type of file, its permissions are\n**   set to (mode & 0777) before returning.\n**\n**   If the optional MTIME argument is present, then it is interpreted\n**   as an integer - the number of seconds since the unix epoch. The\n**   modification-time of the target file is set to this value before\n**   returning.\n**\n**   If three or more arguments are passed to this function and an\n**   error is encountered, an exception is raised.\n**\n** READFILE(FILE):\n**\n**   Read and return the contents of file FILE (type blob) from disk.\n**\n** FSDIR:\n**\n**   Used as follows:\n**\n**     SELECT * FROM fsdir($path [, $dir]);\n**\n**   Parameter $path is an absolute or relative pathname. If the file that it\n**   refers to does not exist, it is an error. If the path refers to a regular\n**   file or symbolic link, it returns a single row. Or, if the path refers\n**   to a directory, it returns one row for the directory, and one row for each\n**   file within the hierarchy rooted at $path.\n**\n**   Each row has the following columns:\n**\n**     name:  Path to file or directory (text value).\n**     mode:  Value of stat.st_mode for directory entry (an integer).\n**     mtime: Value of stat.st_mtime for directory entry (an integer).\n**     data:  For a regular file, a blob containing the file data. For a\n**            symlink, a text value containing the text of the link. For a\n**            directory, NULL.\n**\n**   If a non-NULL value is specified for the optional $dir parameter and\n**   $path is a relative path, then $path is interpreted relative to $dir. \n**   And the paths returned in the \"name\" column of the table are also \n**   relative to directory $dir.\n*/\nSQLITE_EXTENSION_INIT1\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#if !defined(_WIN32) && !defined(WIN32)\n#  include <unistd.h>\n#  include <dirent.h>\n#  include <utime.h>\n#  include <sys/time.h>\n#else\n#  include \"windows.h\"\n#  include <io.h>\n#  include <direct.h>\n/* #  include \"test_windirent.h\" */\n#  define dirent DIRENT\n#  ifndef chmod\n#    define chmod _chmod\n#  endif\n#  ifndef stat\n#    define stat _stat\n#  endif\n#  define mkdir(path,mode) _mkdir(path)\n#  define lstat(path,buf) stat(path,buf)\n#endif\n#include <time.h>\n#include <errno.h>\n\n\n/*\n** Structure of the fsdir() table-valued function\n*/\n                 /*    0    1    2     3    4           5             */\n#define FSDIR_SCHEMA \"(name,mode,mtime,data,path HIDDEN,dir HIDDEN)\"\n#define FSDIR_COLUMN_NAME     0     /* Name of the file */\n#define FSDIR_COLUMN_MODE     1     /* Access mode */\n#define FSDIR_COLUMN_MTIME    2     /* Last modification time */\n#define FSDIR_COLUMN_DATA     3     /* File content */\n#define FSDIR_COLUMN_PATH     4     /* Path to top of search */\n#define FSDIR_COLUMN_DIR      5     /* Path is relative to this directory */\n\n\n/*\n** Set the result stored by context ctx to a blob containing the \n** contents of file zName.  Or, leave the result unchanged (NULL)\n** if the file does not exist or is unreadable.\n**\n** If the file exceeds the SQLite blob size limit, through an\n** SQLITE_TOOBIG error.\n**\n** Throw an SQLITE_IOERR if there are difficulties pulling the file\n** off of disk.\n*/\nstatic void readFileContents(sqlite3_context *ctx, const char *zName){\n  FILE *in;\n  sqlite3_int64 nIn;\n  void *pBuf;\n  sqlite3 *db;\n  int mxBlob;\n\n  in = fopen(zName, \"rb\");\n  if( in==0 ){\n    /* File does not exist or is unreadable. Leave the result set to NULL. */\n    return;\n  }\n  fseek(in, 0, SEEK_END);\n  nIn = ftell(in);\n  rewind(in);\n  db = sqlite3_context_db_handle(ctx);\n  mxBlob = sqlite3_limit(db, SQLITE_LIMIT_LENGTH, -1);\n  if( nIn>mxBlob ){\n    sqlite3_result_error_code(ctx, SQLITE_TOOBIG);\n    fclose(in);\n    return;\n  }\n  pBuf = sqlite3_malloc64( nIn );\n  if( pBuf==0 ){\n    sqlite3_result_error_nomem(ctx);\n    fclose(in);\n    return;\n  }\n  if( 1==fread(pBuf, nIn, 1, in) ){\n    sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);\n  }else{\n    sqlite3_result_error_code(ctx, SQLITE_IOERR);\n    sqlite3_free(pBuf);\n  }\n  fclose(in);\n}\n\n/*\n** Implementation of the \"readfile(X)\" SQL function.  The entire content\n** of the file named X is read and returned as a BLOB.  NULL is returned\n** if the file does not exist or is unreadable.\n*/\nstatic void readfileFunc(\n  sqlite3_context *context,\n  int argc,\n  sqlite3_value **argv\n){\n  const char *zName;\n  (void)(argc);  /* Unused parameter */\n  zName = (const char*)sqlite3_value_text(argv[0]);\n  if( zName==0 ) return;\n  readFileContents(context, zName);\n}\n\n/*\n** Set the error message contained in context ctx to the results of\n** vprintf(zFmt, ...).\n*/\nstatic void ctxErrorMsg(sqlite3_context *ctx, const char *zFmt, ...){\n  char *zMsg = 0;\n  va_list ap;\n  va_start(ap, zFmt);\n  zMsg = sqlite3_vmprintf(zFmt, ap);\n  sqlite3_result_error(ctx, zMsg, -1);\n  sqlite3_free(zMsg);\n  va_end(ap);\n}\n\n#if defined(_WIN32)\n/*\n** This function is designed to convert a Win32 FILETIME structure into the\n** number of seconds since the Unix Epoch (1970-01-01 00:00:00 UTC).\n*/\nstatic sqlite3_uint64 fileTimeToUnixTime(\n  LPFILETIME pFileTime\n){\n  SYSTEMTIME epochSystemTime;\n  ULARGE_INTEGER epochIntervals;\n  FILETIME epochFileTime;\n  ULARGE_INTEGER fileIntervals;\n\n  memset(&epochSystemTime, 0, sizeof(SYSTEMTIME));\n  epochSystemTime.wYear = 1970;\n  epochSystemTime.wMonth = 1;\n  epochSystemTime.wDay = 1;\n  SystemTimeToFileTime(&epochSystemTime, &epochFileTime);\n  epochIntervals.LowPart = epochFileTime.dwLowDateTime;\n  epochIntervals.HighPart = epochFileTime.dwHighDateTime;\n\n  fileIntervals.LowPart = pFileTime->dwLowDateTime;\n  fileIntervals.HighPart = pFileTime->dwHighDateTime;\n\n  return (fileIntervals.QuadPart - epochIntervals.QuadPart) / 10000000;\n}\n\n/*\n** This function attempts to normalize the time values found in the stat()\n** buffer to UTC.  This is necessary on Win32, where the runtime library\n** appears to return these values as local times.\n*/\nstatic void statTimesToUtc(\n  const char *zPath,\n  struct stat *pStatBuf\n){\n  HANDLE hFindFile;\n  WIN32_FIND_DATAW fd;\n  LPWSTR zUnicodeName;\n  extern LPWSTR sqlite3_win32_utf8_to_unicode(const char*);\n  zUnicodeName = sqlite3_win32_utf8_to_unicode(zPath);\n  if( zUnicodeName ){\n    memset(&fd, 0, sizeof(WIN32_FIND_DATAW));\n    hFindFile = FindFirstFileW(zUnicodeName, &fd);\n    if( hFindFile!=NULL ){\n      pStatBuf->st_ctime = (time_t)fileTimeToUnixTime(&fd.ftCreationTime);\n      pStatBuf->st_atime = (time_t)fileTimeToUnixTime(&fd.ftLastAccessTime);\n      pStatBuf->st_mtime = (time_t)fileTimeToUnixTime(&fd.ftLastWriteTime);\n      FindClose(hFindFile);\n    }\n    sqlite3_free(zUnicodeName);\n  }\n}\n#endif\n\n/*\n** This function is used in place of stat().  On Windows, special handling\n** is required in order for the included time to be returned as UTC.  On all\n** other systems, this function simply calls stat().\n*/\nstatic int fileStat(\n  const char *zPath,\n  struct stat *pStatBuf\n){\n#if defined(_WIN32)\n  int rc = stat(zPath, pStatBuf);\n  if( rc==0 ) statTimesToUtc(zPath, pStatBuf);\n  return rc;\n#else\n  return stat(zPath, pStatBuf);\n#endif\n}\n\n/*\n** This function is used in place of lstat().  On Windows, special handling\n** is required in order for the included time to be returned as UTC.  On all\n** other systems, this function simply calls lstat().\n*/\nstatic int fileLinkStat(\n  const char *zPath,\n  struct stat *pStatBuf\n){\n#if defined(_WIN32)\n  int rc = lstat(zPath, pStatBuf);\n  if( rc==0 ) statTimesToUtc(zPath, pStatBuf);\n  return rc;\n#else\n  return lstat(zPath, pStatBuf);\n#endif\n}\n\n/*\n** Argument zFile is the name of a file that will be created and/or written\n** by SQL function writefile(). This function ensures that the directory\n** zFile will be written to exists, creating it if required. The permissions\n** for any path components created by this function are set to (mode&0777).\n**\n** If an OOM condition is encountered, SQLITE_NOMEM is returned. Otherwise,\n** SQLITE_OK is returned if the directory is successfully created, or\n** SQLITE_ERROR otherwise.\n*/\nstatic int makeDirectory(\n  const char *zFile,\n  mode_t mode\n){\n  char *zCopy = sqlite3_mprintf(\"%s\", zFile);\n  int rc = SQLITE_OK;\n\n  if( zCopy==0 ){\n    rc = SQLITE_NOMEM;\n  }else{\n    int nCopy = (int)strlen(zCopy);\n    int i = 1;\n\n    while( rc==SQLITE_OK ){\n      struct stat sStat;\n      int rc2;\n\n      for(; zCopy[i]!='/' && i<nCopy; i++);\n      if( i==nCopy ) break;\n      zCopy[i] = '\\0';\n\n      rc2 = fileStat(zCopy, &sStat);\n      if( rc2!=0 ){\n        if( mkdir(zCopy, mode & 0777) ) rc = SQLITE_ERROR;\n      }else{\n        if( !S_ISDIR(sStat.st_mode) ) rc = SQLITE_ERROR;\n      }\n      zCopy[i] = '/';\n      i++;\n    }\n\n    sqlite3_free(zCopy);\n  }\n\n  return rc;\n}\n\n/*\n** This function does the work for the writefile() UDF. Refer to \n** header comments at the top of this file for details.\n*/\nstatic int writeFile(\n  sqlite3_context *pCtx,          /* Context to return bytes written in */\n  const char *zFile,              /* File to write */\n  sqlite3_value *pData,           /* Data to write */\n  mode_t mode,                    /* MODE parameter passed to writefile() */\n  sqlite3_int64 mtime             /* MTIME parameter (or -1 to not set time) */\n){\n#if !defined(_WIN32) && !defined(WIN32)\n  if( S_ISLNK(mode) ){\n    const char *zTo = (const char*)sqlite3_value_text(pData);\n    if( symlink(zTo, zFile)<0 ) return 1;\n  }else\n#endif\n  {\n    if( S_ISDIR(mode) ){\n      if( mkdir(zFile, mode) ){\n        /* The mkdir() call to create the directory failed. This might not\n        ** be an error though - if there is already a directory at the same\n        ** path and either the permissions already match or can be changed\n        ** to do so using chmod(), it is not an error.  */\n        struct stat sStat;\n        if( errno!=EEXIST\n         || 0!=fileStat(zFile, &sStat)\n         || !S_ISDIR(sStat.st_mode)\n         || ((sStat.st_mode&0777)!=(mode&0777) && 0!=chmod(zFile, mode&0777))\n        ){\n          return 1;\n        }\n      }\n    }else{\n      sqlite3_int64 nWrite = 0;\n      const char *z;\n      int rc = 0;\n      FILE *out = fopen(zFile, \"wb\");\n      if( out==0 ) return 1;\n      z = (const char*)sqlite3_value_blob(pData);\n      if( z ){\n        sqlite3_int64 n = fwrite(z, 1, sqlite3_value_bytes(pData), out);\n        nWrite = sqlite3_value_bytes(pData);\n        if( nWrite!=n ){\n          rc = 1;\n        }\n      }\n      fclose(out);\n      if( rc==0 && mode && chmod(zFile, mode & 0777) ){\n        rc = 1;\n      }\n      if( rc ) return 2;\n      sqlite3_result_int64(pCtx, nWrite);\n    }\n  }\n\n  if( mtime>=0 ){\n#if defined(_WIN32)\n    /* Windows */\n    FILETIME lastAccess;\n    FILETIME lastWrite;\n    SYSTEMTIME currentTime;\n    LONGLONG intervals;\n    HANDLE hFile;\n    LPWSTR zUnicodeName;\n    extern LPWSTR sqlite3_win32_utf8_to_unicode(const char*);\n\n    GetSystemTime(&currentTime);\n    SystemTimeToFileTime(&currentTime, &lastAccess);\n    intervals = Int32x32To64(mtime, 10000000) + 116444736000000000;\n    lastWrite.dwLowDateTime = (DWORD)intervals;\n    lastWrite.dwHighDateTime = intervals >> 32;\n    zUnicodeName = sqlite3_win32_utf8_to_unicode(zFile);\n    if( zUnicodeName==0 ){\n      return 1;\n    }\n    hFile = CreateFileW(\n      zUnicodeName, FILE_WRITE_ATTRIBUTES, 0, NULL, OPEN_EXISTING,\n      FILE_FLAG_BACKUP_SEMANTICS, NULL\n    );\n    sqlite3_free(zUnicodeName);\n    if( hFile!=INVALID_HANDLE_VALUE ){\n      BOOL bResult = SetFileTime(hFile, NULL, &lastAccess, &lastWrite);\n      CloseHandle(hFile);\n      return !bResult;\n    }else{\n      return 1;\n    }\n#elif defined(AT_FDCWD) && 0 /* utimensat() is not universally available */\n    /* Recent unix */\n    struct timespec times[2];\n    times[0].tv_nsec = times[1].tv_nsec = 0;\n    times[0].tv_sec = time(0);\n    times[1].tv_sec = mtime;\n    if( utimensat(AT_FDCWD, zFile, times, AT_SYMLINK_NOFOLLOW) ){\n      return 1;\n    }\n#else\n    /* Legacy unix */\n    struct timeval times[2];\n    times[0].tv_usec = times[1].tv_usec = 0;\n    times[0].tv_sec = time(0);\n    times[1].tv_sec = mtime;\n    if( utimes(zFile, times) ){\n      return 1;\n    }\n#endif\n  }\n\n  return 0;\n}\n\n/*\n** Implementation of the \"writefile(W,X[,Y[,Z]]])\" SQL function.  \n** Refer to header comments at the top of this file for details.\n*/\nstatic void writefileFunc(\n  sqlite3_context *context,\n  int argc,\n  sqlite3_value **argv\n){\n  const char *zFile;\n  mode_t mode = 0;\n  int res;\n  sqlite3_int64 mtime = -1;\n\n  if( argc<2 || argc>4 ){\n    sqlite3_result_error(context, \n        \"wrong number of arguments to function writefile()\", -1\n    );\n    return;\n  }\n\n  zFile = (const char*)sqlite3_value_text(argv[0]);\n  if( zFile==0 ) return;\n  if( argc>=3 ){\n    mode = (mode_t)sqlite3_value_int(argv[2]);\n  }\n  if( argc==4 ){\n    mtime = sqlite3_value_int64(argv[3]);\n  }\n\n  res = writeFile(context, zFile, argv[1], mode, mtime);\n  if( res==1 && errno==ENOENT ){\n    if( makeDirectory(zFile, mode)==SQLITE_OK ){\n      res = writeFile(context, zFile, argv[1], mode, mtime);\n    }\n  }\n\n  if( argc>2 && res!=0 ){\n    if( S_ISLNK(mode) ){\n      ctxErrorMsg(context, \"failed to create symlink: %s\", zFile);\n    }else if( S_ISDIR(mode) ){\n      ctxErrorMsg(context, \"failed to create directory: %s\", zFile);\n    }else{\n      ctxErrorMsg(context, \"failed to write file: %s\", zFile);\n    }\n  }\n}\n\n/*\n** SQL function:   lsmode(MODE)\n**\n** Given a numberic st_mode from stat(), convert it into a human-readable\n** text string in the style of \"ls -l\".\n*/\nstatic void lsModeFunc(\n  sqlite3_context *context,\n  int argc,\n  sqlite3_value **argv\n){\n  int i;\n  int iMode = sqlite3_value_int(argv[0]);\n  char z[16];\n  (void)argc;\n  if( S_ISLNK(iMode) ){\n    z[0] = 'l';\n  }else if( S_ISREG(iMode) ){\n    z[0] = '-';\n  }else if( S_ISDIR(iMode) ){\n    z[0] = 'd';\n  }else{\n    z[0] = '?';\n  }\n  for(i=0; i<3; i++){\n    int m = (iMode >> ((2-i)*3));\n    char *a = &z[1 + i*3];\n    a[0] = (m & 0x4) ? 'r' : '-';\n    a[1] = (m & 0x2) ? 'w' : '-';\n    a[2] = (m & 0x1) ? 'x' : '-';\n  }\n  z[10] = '\\0';\n  sqlite3_result_text(context, z, -1, SQLITE_TRANSIENT);\n}\n\n#ifndef SQLITE_OMIT_VIRTUALTABLE\n\n/* \n** Cursor type for recursively iterating through a directory structure.\n*/\ntypedef struct fsdir_cursor fsdir_cursor;\ntypedef struct FsdirLevel FsdirLevel;\n\nstruct FsdirLevel {\n  DIR *pDir;                 /* From opendir() */\n  char *zDir;                /* Name of directory (nul-terminated) */\n};\n\nstruct fsdir_cursor {\n  sqlite3_vtab_cursor base;  /* Base class - must be first */\n\n  int nLvl;                  /* Number of entries in aLvl[] array */\n  int iLvl;                  /* Index of current entry */\n  FsdirLevel *aLvl;          /* Hierarchy of directories being traversed */\n\n  const char *zBase;\n  int nBase;\n\n  struct stat sStat;         /* Current lstat() results */\n  char *zPath;               /* Path to current entry */\n  sqlite3_int64 iRowid;      /* Current rowid */\n};\n\ntypedef struct fsdir_tab fsdir_tab;\nstruct fsdir_tab {\n  sqlite3_vtab base;         /* Base class - must be first */\n};\n\n/*\n** Construct a new fsdir virtual table object.\n*/\nstatic int fsdirConnect(\n  sqlite3 *db,\n  void *pAux,\n  int argc, const char *const*argv,\n  sqlite3_vtab **ppVtab,\n  char **pzErr\n){\n  fsdir_tab *pNew = 0;\n  int rc;\n  (void)pAux;\n  (void)argc;\n  (void)argv;\n  (void)pzErr;\n  rc = sqlite3_declare_vtab(db, \"CREATE TABLE x\" FSDIR_SCHEMA);\n  if( rc==SQLITE_OK ){\n    pNew = (fsdir_tab*)sqlite3_malloc( sizeof(*pNew) );\n    if( pNew==0 ) return SQLITE_NOMEM;\n    memset(pNew, 0, sizeof(*pNew));\n  }\n  *ppVtab = (sqlite3_vtab*)pNew;\n  return rc;\n}\n\n/*\n** This method is the destructor for fsdir vtab objects.\n*/\nstatic int fsdirDisconnect(sqlite3_vtab *pVtab){\n  sqlite3_free(pVtab);\n  return SQLITE_OK;\n}\n\n/*\n** Constructor for a new fsdir_cursor object.\n*/\nstatic int fsdirOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){\n  fsdir_cursor *pCur;\n  (void)p;\n  pCur = sqlite3_malloc( sizeof(*pCur) );\n  if( pCur==0 ) return SQLITE_NOMEM;\n  memset(pCur, 0, sizeof(*pCur));\n  pCur->iLvl = -1;\n  *ppCursor = &pCur->base;\n  return SQLITE_OK;\n}\n\n/*\n** Reset a cursor back to the state it was in when first returned\n** by fsdirOpen().\n*/\nstatic void fsdirResetCursor(fsdir_cursor *pCur){\n  int i;\n  for(i=0; i<=pCur->iLvl; i++){\n    FsdirLevel *pLvl = &pCur->aLvl[i];\n    if( pLvl->pDir ) closedir(pLvl->pDir);\n    sqlite3_free(pLvl->zDir);\n  }\n  sqlite3_free(pCur->zPath);\n  sqlite3_free(pCur->aLvl);\n  pCur->aLvl = 0;\n  pCur->zPath = 0;\n  pCur->zBase = 0;\n  pCur->nBase = 0;\n  pCur->nLvl = 0;\n  pCur->iLvl = -1;\n  pCur->iRowid = 1;\n}\n\n/*\n** Destructor for an fsdir_cursor.\n*/\nstatic int fsdirClose(sqlite3_vtab_cursor *cur){\n  fsdir_cursor *pCur = (fsdir_cursor*)cur;\n\n  fsdirResetCursor(pCur);\n  sqlite3_free(pCur);\n  return SQLITE_OK;\n}\n\n/*\n** Set the error message for the virtual table associated with cursor\n** pCur to the results of vprintf(zFmt, ...).\n*/\nstatic void fsdirSetErrmsg(fsdir_cursor *pCur, const char *zFmt, ...){\n  va_list ap;\n  va_start(ap, zFmt);\n  pCur->base.pVtab->zErrMsg = sqlite3_vmprintf(zFmt, ap);\n  va_end(ap);\n}\n\n\n/*\n** Advance an fsdir_cursor to its next row of output.\n*/\nstatic int fsdirNext(sqlite3_vtab_cursor *cur){\n  fsdir_cursor *pCur = (fsdir_cursor*)cur;\n  mode_t m = pCur->sStat.st_mode;\n\n  pCur->iRowid++;\n  if( S_ISDIR(m) ){\n    /* Descend into this directory */\n    int iNew = pCur->iLvl + 1;\n    FsdirLevel *pLvl;\n    if( iNew>=pCur->nLvl ){\n      int nNew = iNew+1;\n      sqlite3_int64 nByte = nNew*sizeof(FsdirLevel);\n      FsdirLevel *aNew = (FsdirLevel*)sqlite3_realloc64(pCur->aLvl, nByte);\n      if( aNew==0 ) return SQLITE_NOMEM;\n      memset(&aNew[pCur->nLvl], 0, sizeof(FsdirLevel)*(nNew-pCur->nLvl));\n      pCur->aLvl = aNew;\n      pCur->nLvl = nNew;\n    }\n    pCur->iLvl = iNew;\n    pLvl = &pCur->aLvl[iNew];\n    \n    pLvl->zDir = pCur->zPath;\n    pCur->zPath = 0;\n    pLvl->pDir = opendir(pLvl->zDir);\n    if( pLvl->pDir==0 ){\n      fsdirSetErrmsg(pCur, \"cannot read directory: %s\", pCur->zPath);\n      return SQLITE_ERROR;\n    }\n  }\n\n  while( pCur->iLvl>=0 ){\n    FsdirLevel *pLvl = &pCur->aLvl[pCur->iLvl];\n    struct dirent *pEntry = readdir(pLvl->pDir);\n    if( pEntry ){\n      if( pEntry->d_name[0]=='.' ){\n       if( pEntry->d_name[1]=='.' && pEntry->d_name[2]=='\\0' ) continue;\n       if( pEntry->d_name[1]=='\\0' ) continue;\n      }\n      sqlite3_free(pCur->zPath);\n      pCur->zPath = sqlite3_mprintf(\"%s/%s\", pLvl->zDir, pEntry->d_name);\n      if( pCur->zPath==0 ) return SQLITE_NOMEM;\n      if( fileLinkStat(pCur->zPath, &pCur->sStat) ){\n        fsdirSetErrmsg(pCur, \"cannot stat file: %s\", pCur->zPath);\n        return SQLITE_ERROR;\n      }\n      return SQLITE_OK;\n    }\n    closedir(pLvl->pDir);\n    sqlite3_free(pLvl->zDir);\n    pLvl->pDir = 0;\n    pLvl->zDir = 0;\n    pCur->iLvl--;\n  }\n\n  /* EOF */\n  sqlite3_free(pCur->zPath);\n  pCur->zPath = 0;\n  return SQLITE_OK;\n}\n\n/*\n** Return values of columns for the row at which the series_cursor\n** is currently pointing.\n*/\nstatic int fsdirColumn(\n  sqlite3_vtab_cursor *cur,   /* The cursor */\n  sqlite3_context *ctx,       /* First argument to sqlite3_result_...() */\n  int i                       /* Which column to return */\n){\n  fsdir_cursor *pCur = (fsdir_cursor*)cur;\n  switch( i ){\n    case FSDIR_COLUMN_NAME: {\n      sqlite3_result_text(ctx, &pCur->zPath[pCur->nBase], -1, SQLITE_TRANSIENT);\n      break;\n    }\n\n    case FSDIR_COLUMN_MODE:\n      sqlite3_result_int64(ctx, pCur->sStat.st_mode);\n      break;\n\n    case FSDIR_COLUMN_MTIME:\n      sqlite3_result_int64(ctx, pCur->sStat.st_mtime);\n      break;\n\n    case FSDIR_COLUMN_DATA: {\n      mode_t m = pCur->sStat.st_mode;\n      if( S_ISDIR(m) ){\n        sqlite3_result_null(ctx);\n#if !defined(_WIN32) && !defined(WIN32)\n      }else if( S_ISLNK(m) ){\n        char aStatic[64];\n        char *aBuf = aStatic;\n        sqlite3_int64 nBuf = 64;\n        int n;\n\n        while( 1 ){\n          n = readlink(pCur->zPath, aBuf, nBuf);\n          if( n<nBuf ) break;\n          if( aBuf!=aStatic ) sqlite3_free(aBuf);\n          nBuf = nBuf*2;\n          aBuf = sqlite3_malloc64(nBuf);\n          if( aBuf==0 ){\n            sqlite3_result_error_nomem(ctx);\n            return SQLITE_NOMEM;\n          }\n        }\n\n        sqlite3_result_text(ctx, aBuf, n, SQLITE_TRANSIENT);\n        if( aBuf!=aStatic ) sqlite3_free(aBuf);\n#endif\n      }else{\n        readFileContents(ctx, pCur->zPath);\n      }\n    }\n    case FSDIR_COLUMN_PATH:\n    default: {\n      /* The FSDIR_COLUMN_PATH and FSDIR_COLUMN_DIR are input parameters.\n      ** always return their values as NULL */\n      break;\n    }\n  }\n  return SQLITE_OK;\n}\n\n/*\n** Return the rowid for the current row. In this implementation, the\n** first row returned is assigned rowid value 1, and each subsequent\n** row a value 1 more than that of the previous.\n*/\nstatic int fsdirRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){\n  fsdir_cursor *pCur = (fsdir_cursor*)cur;\n  *pRowid = pCur->iRowid;\n  return SQLITE_OK;\n}\n\n/*\n** Return TRUE if the cursor has been moved off of the last\n** row of output.\n*/\nstatic int fsdirEof(sqlite3_vtab_cursor *cur){\n  fsdir_cursor *pCur = (fsdir_cursor*)cur;\n  return (pCur->zPath==0);\n}\n\n/*\n** xFilter callback.\n**\n** idxNum==1   PATH parameter only\n** idxNum==2   Both PATH and DIR supplied\n*/\nstatic int fsdirFilter(\n  sqlite3_vtab_cursor *cur, \n  int idxNum, const char *idxStr,\n  int argc, sqlite3_value **argv\n){\n  const char *zDir = 0;\n  fsdir_cursor *pCur = (fsdir_cursor*)cur;\n  (void)idxStr;\n  fsdirResetCursor(pCur);\n\n  if( idxNum==0 ){\n    fsdirSetErrmsg(pCur, \"table function fsdir requires an argument\");\n    return SQLITE_ERROR;\n  }\n\n  assert( argc==idxNum && (argc==1 || argc==2) );\n  zDir = (const char*)sqlite3_value_text(argv[0]);\n  if( zDir==0 ){\n    fsdirSetErrmsg(pCur, \"table function fsdir requires a non-NULL argument\");\n    return SQLITE_ERROR;\n  }\n  if( argc==2 ){\n    pCur->zBase = (const char*)sqlite3_value_text(argv[1]);\n  }\n  if( pCur->zBase ){\n    pCur->nBase = (int)strlen(pCur->zBase)+1;\n    pCur->zPath = sqlite3_mprintf(\"%s/%s\", pCur->zBase, zDir);\n  }else{\n    pCur->zPath = sqlite3_mprintf(\"%s\", zDir);\n  }\n\n  if( pCur->zPath==0 ){\n    return SQLITE_NOMEM;\n  }\n  if( fileLinkStat(pCur->zPath, &pCur->sStat) ){\n    fsdirSetErrmsg(pCur, \"cannot stat file: %s\", pCur->zPath);\n    return SQLITE_ERROR;\n  }\n\n  return SQLITE_OK;\n}\n\n/*\n** SQLite will invoke this method one or more times while planning a query\n** that uses the generate_series virtual table.  This routine needs to create\n** a query plan for each invocation and compute an estimated cost for that\n** plan.\n**\n** In this implementation idxNum is used to represent the\n** query plan.  idxStr is unused.\n**\n** The query plan is represented by values of idxNum:\n**\n**  (1)  The path value is supplied by argv[0]\n**  (2)  Path is in argv[0] and dir is in argv[1]\n*/\nstatic int fsdirBestIndex(\n  sqlite3_vtab *tab,\n  sqlite3_index_info *pIdxInfo\n){\n  int i;                 /* Loop over constraints */\n  int idxPath = -1;      /* Index in pIdxInfo->aConstraint of PATH= */\n  int idxDir = -1;       /* Index in pIdxInfo->aConstraint of DIR= */\n  int seenPath = 0;      /* True if an unusable PATH= constraint is seen */\n  int seenDir = 0;       /* True if an unusable DIR= constraint is seen */\n  const struct sqlite3_index_constraint *pConstraint;\n\n  (void)tab;\n  pConstraint = pIdxInfo->aConstraint;\n  for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){\n    if( pConstraint->op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;\n    switch( pConstraint->iColumn ){\n      case FSDIR_COLUMN_PATH: {\n        if( pConstraint->usable ){\n          idxPath = i;\n          seenPath = 0;\n        }else if( idxPath<0 ){\n          seenPath = 1;\n        }\n        break;\n      }\n      case FSDIR_COLUMN_DIR: {\n        if( pConstraint->usable ){\n          idxDir = i;\n          seenDir = 0;\n        }else if( idxDir<0 ){\n          seenDir = 1;\n        }\n        break;\n      }\n    } \n  }\n  if( seenPath || seenDir ){\n    /* If input parameters are unusable, disallow this plan */\n    return SQLITE_CONSTRAINT;\n  }\n\n  if( idxPath<0 ){\n    pIdxInfo->idxNum = 0;\n    /* The pIdxInfo->estimatedCost should have been initialized to a huge\n    ** number.  Leave it unchanged. */\n    pIdxInfo->estimatedRows = 0x7fffffff;\n  }else{\n    pIdxInfo->aConstraintUsage[idxPath].omit = 1;\n    pIdxInfo->aConstraintUsage[idxPath].argvIndex = 1;\n    if( idxDir>=0 ){\n      pIdxInfo->aConstraintUsage[idxDir].omit = 1;\n      pIdxInfo->aConstraintUsage[idxDir].argvIndex = 2;\n      pIdxInfo->idxNum = 2;\n      pIdxInfo->estimatedCost = 10.0;\n    }else{\n      pIdxInfo->idxNum = 1;\n      pIdxInfo->estimatedCost = 100.0;\n    }\n  }\n\n  return SQLITE_OK;\n}\n\n/*\n** Register the \"fsdir\" virtual table.\n*/\nstatic int fsdirRegister(sqlite3 *db){\n  static sqlite3_module fsdirModule = {\n    0,                         /* iVersion */\n    0,                         /* xCreate */\n    fsdirConnect,              /* xConnect */\n    fsdirBestIndex,            /* xBestIndex */\n    fsdirDisconnect,           /* xDisconnect */\n    0,                         /* xDestroy */\n    fsdirOpen,                 /* xOpen - open a cursor */\n    fsdirClose,                /* xClose - close a cursor */\n    fsdirFilter,               /* xFilter - configure scan constraints */\n    fsdirNext,                 /* xNext - advance a cursor */\n    fsdirEof,                  /* xEof - check for end of scan */\n    fsdirColumn,               /* xColumn - read data */\n    fsdirRowid,                /* xRowid - read data */\n    0,                         /* xUpdate */\n    0,                         /* xBegin */\n    0,                         /* xSync */\n    0,                         /* xCommit */\n    0,                         /* xRollback */\n    0,                         /* xFindMethod */\n    0,                         /* xRename */\n    0,                         /* xSavepoint */\n    0,                         /* xRelease */\n    0,                         /* xRollbackTo */\n    0,                         /* xShadowName */\n  };\n\n  int rc = sqlite3_create_module(db, \"fsdir\", &fsdirModule, 0);\n  return rc;\n}\n#else         /* SQLITE_OMIT_VIRTUALTABLE */\n# define fsdirRegister(x) SQLITE_OK\n#endif\n\n#ifdef _WIN32\n\n#endif\nint sqlite3_fileio_init(\n  sqlite3 *db, \n  char **pzErrMsg, \n  const sqlite3_api_routines *pApi\n){\n  int rc = SQLITE_OK;\n  SQLITE_EXTENSION_INIT2(pApi);\n  (void)pzErrMsg;  /* Unused parameter */\n  rc = sqlite3_create_function(db, \"readfile\", 1, SQLITE_UTF8, 0,\n                               readfileFunc, 0, 0);\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_create_function(db, \"writefile\", -1, SQLITE_UTF8, 0,\n                                 writefileFunc, 0, 0);\n  }\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_create_function(db, \"lsmode\", 1, SQLITE_UTF8, 0,\n                                 lsModeFunc, 0, 0);\n  }\n  if( rc==SQLITE_OK ){\n    rc = fsdirRegister(db);\n  }\n  return rc;\n}\n\n/************************* End ../ext/misc/fileio.c ********************/\n/************************* Begin ../ext/misc/completion.c ******************/\n/*\n** 2017-07-10\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n*************************************************************************\n**\n** This file implements an eponymous virtual table that returns suggested\n** completions for a partial SQL input.\n**\n** Suggested usage:\n**\n**     SELECT DISTINCT candidate COLLATE nocase\n**       FROM completion($prefix,$wholeline)\n**      ORDER BY 1;\n**\n** The two query parameters are optional.  $prefix is the text of the\n** current word being typed and that is to be completed.  $wholeline is\n** the complete input line, used for context.\n**\n** The raw completion() table might return the same candidate multiple\n** times, for example if the same column name is used to two or more\n** tables.  And the candidates are returned in an arbitrary order.  Hence,\n** the DISTINCT and ORDER BY are recommended.\n**\n** This virtual table operates at the speed of human typing, and so there\n** is no attempt to make it fast.  Even a slow implementation will be much\n** faster than any human can type.\n**\n*/\nSQLITE_EXTENSION_INIT1\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n\n#ifndef SQLITE_OMIT_VIRTUALTABLE\n\n/* completion_vtab is a subclass of sqlite3_vtab which will\n** serve as the underlying representation of a completion virtual table\n*/\ntypedef struct completion_vtab completion_vtab;\nstruct completion_vtab {\n  sqlite3_vtab base;  /* Base class - must be first */\n  sqlite3 *db;        /* Database connection for this completion vtab */\n};\n\n/* completion_cursor is a subclass of sqlite3_vtab_cursor which will\n** serve as the underlying representation of a cursor that scans\n** over rows of the result\n*/\ntypedef struct completion_cursor completion_cursor;\nstruct completion_cursor {\n  sqlite3_vtab_cursor base;  /* Base class - must be first */\n  sqlite3 *db;               /* Database connection for this cursor */\n  int nPrefix, nLine;        /* Number of bytes in zPrefix and zLine */\n  char *zPrefix;             /* The prefix for the word we want to complete */\n  char *zLine;               /* The whole that we want to complete */\n  const char *zCurrentRow;   /* Current output row */\n  int szRow;                 /* Length of the zCurrentRow string */\n  sqlite3_stmt *pStmt;       /* Current statement */\n  sqlite3_int64 iRowid;      /* The rowid */\n  int ePhase;                /* Current phase */\n  int j;                     /* inter-phase counter */\n};\n\n/* Values for ePhase:\n*/\n#define COMPLETION_FIRST_PHASE   1\n#define COMPLETION_KEYWORDS      1\n#define COMPLETION_PRAGMAS       2\n#define COMPLETION_FUNCTIONS     3\n#define COMPLETION_COLLATIONS    4\n#define COMPLETION_INDEXES       5\n#define COMPLETION_TRIGGERS      6\n#define COMPLETION_DATABASES     7\n#define COMPLETION_TABLES        8    /* Also VIEWs and TRIGGERs */\n#define COMPLETION_COLUMNS       9\n#define COMPLETION_MODULES       10\n#define COMPLETION_EOF           11\n\n/*\n** The completionConnect() method is invoked to create a new\n** completion_vtab that describes the completion virtual table.\n**\n** Think of this routine as the constructor for completion_vtab objects.\n**\n** All this routine needs to do is:\n**\n**    (1) Allocate the completion_vtab object and initialize all fields.\n**\n**    (2) Tell SQLite (via the sqlite3_declare_vtab() interface) what the\n**        result set of queries against completion will look like.\n*/\nstatic int completionConnect(\n  sqlite3 *db,\n  void *pAux,\n  int argc, const char *const*argv,\n  sqlite3_vtab **ppVtab,\n  char **pzErr\n){\n  completion_vtab *pNew;\n  int rc;\n\n  (void)(pAux);    /* Unused parameter */\n  (void)(argc);    /* Unused parameter */\n  (void)(argv);    /* Unused parameter */\n  (void)(pzErr);   /* Unused parameter */\n\n/* Column numbers */\n#define COMPLETION_COLUMN_CANDIDATE 0  /* Suggested completion of the input */\n#define COMPLETION_COLUMN_PREFIX    1  /* Prefix of the word to be completed */\n#define COMPLETION_COLUMN_WHOLELINE 2  /* Entire line seen so far */\n#define COMPLETION_COLUMN_PHASE     3  /* ePhase - used for debugging only */\n\n  rc = sqlite3_declare_vtab(db,\n      \"CREATE TABLE x(\"\n      \"  candidate TEXT,\"\n      \"  prefix TEXT HIDDEN,\"\n      \"  wholeline TEXT HIDDEN,\"\n      \"  phase INT HIDDEN\"        /* Used for debugging only */\n      \")\");\n  if( rc==SQLITE_OK ){\n    pNew = sqlite3_malloc( sizeof(*pNew) );\n    *ppVtab = (sqlite3_vtab*)pNew;\n    if( pNew==0 ) return SQLITE_NOMEM;\n    memset(pNew, 0, sizeof(*pNew));\n    pNew->db = db;\n  }\n  return rc;\n}\n\n/*\n** This method is the destructor for completion_cursor objects.\n*/\nstatic int completionDisconnect(sqlite3_vtab *pVtab){\n  sqlite3_free(pVtab);\n  return SQLITE_OK;\n}\n\n/*\n** Constructor for a new completion_cursor object.\n*/\nstatic int completionOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){\n  completion_cursor *pCur;\n  pCur = sqlite3_malloc( sizeof(*pCur) );\n  if( pCur==0 ) return SQLITE_NOMEM;\n  memset(pCur, 0, sizeof(*pCur));\n  pCur->db = ((completion_vtab*)p)->db;\n  *ppCursor = &pCur->base;\n  return SQLITE_OK;\n}\n\n/*\n** Reset the completion_cursor.\n*/\nstatic void completionCursorReset(completion_cursor *pCur){\n  sqlite3_free(pCur->zPrefix);   pCur->zPrefix = 0;  pCur->nPrefix = 0;\n  sqlite3_free(pCur->zLine);     pCur->zLine = 0;    pCur->nLine = 0;\n  sqlite3_finalize(pCur->pStmt); pCur->pStmt = 0;\n  pCur->j = 0;\n}\n\n/*\n** Destructor for a completion_cursor.\n*/\nstatic int completionClose(sqlite3_vtab_cursor *cur){\n  completionCursorReset((completion_cursor*)cur);\n  sqlite3_free(cur);\n  return SQLITE_OK;\n}\n\n/*\n** Advance a completion_cursor to its next row of output.\n**\n** The ->ePhase, ->j, and ->pStmt fields of the completion_cursor object\n** record the current state of the scan.  This routine sets ->zCurrentRow\n** to the current row of output and then returns.  If no more rows remain,\n** then ->ePhase is set to COMPLETION_EOF which will signal the virtual\n** table that has reached the end of its scan.\n**\n** The current implementation just lists potential identifiers and\n** keywords and filters them by zPrefix.  Future enhancements should\n** take zLine into account to try to restrict the set of identifiers and\n** keywords based on what would be legal at the current point of input.\n*/\nstatic int completionNext(sqlite3_vtab_cursor *cur){\n  completion_cursor *pCur = (completion_cursor*)cur;\n  int eNextPhase = 0;  /* Next phase to try if current phase reaches end */\n  int iCol = -1;       /* If >=0, step pCur->pStmt and use the i-th column */\n  pCur->iRowid++;\n  while( pCur->ePhase!=COMPLETION_EOF ){\n    switch( pCur->ePhase ){\n      case COMPLETION_KEYWORDS: {\n        if( pCur->j >= sqlite3_keyword_count() ){\n          pCur->zCurrentRow = 0;\n          pCur->ePhase = COMPLETION_DATABASES;\n        }else{\n          sqlite3_keyword_name(pCur->j++, &pCur->zCurrentRow, &pCur->szRow);\n        }\n        iCol = -1;\n        break;\n      }\n      case COMPLETION_DATABASES: {\n        if( pCur->pStmt==0 ){\n          sqlite3_prepare_v2(pCur->db, \"PRAGMA database_list\", -1,\n                             &pCur->pStmt, 0);\n        }\n        iCol = 1;\n        eNextPhase = COMPLETION_TABLES;\n        break;\n      }\n      case COMPLETION_TABLES: {\n        if( pCur->pStmt==0 ){\n          sqlite3_stmt *pS2;\n          char *zSql = 0;\n          const char *zSep = \"\";\n          sqlite3_prepare_v2(pCur->db, \"PRAGMA database_list\", -1, &pS2, 0);\n          while( sqlite3_step(pS2)==SQLITE_ROW ){\n            const char *zDb = (const char*)sqlite3_column_text(pS2, 1);\n            zSql = sqlite3_mprintf(\n               \"%z%s\"\n               \"SELECT name FROM \\\"%w\\\".sqlite_master\",\n               zSql, zSep, zDb\n            );\n            if( zSql==0 ) return SQLITE_NOMEM;\n            zSep = \" UNION \";\n          }\n          sqlite3_finalize(pS2);\n          sqlite3_prepare_v2(pCur->db, zSql, -1, &pCur->pStmt, 0);\n          sqlite3_free(zSql);\n        }\n        iCol = 0;\n        eNextPhase = COMPLETION_COLUMNS;\n        break;\n      }\n      case COMPLETION_COLUMNS: {\n        if( pCur->pStmt==0 ){\n          sqlite3_stmt *pS2;\n          char *zSql = 0;\n          const char *zSep = \"\";\n          sqlite3_prepare_v2(pCur->db, \"PRAGMA database_list\", -1, &pS2, 0);\n          while( sqlite3_step(pS2)==SQLITE_ROW ){\n            const char *zDb = (const char*)sqlite3_column_text(pS2, 1);\n            zSql = sqlite3_mprintf(\n               \"%z%s\"\n               \"SELECT pti.name FROM \\\"%w\\\".sqlite_master AS sm\"\n                       \" JOIN pragma_table_info(sm.name,%Q) AS pti\"\n               \" WHERE sm.type='table'\",\n               zSql, zSep, zDb, zDb\n            );\n            if( zSql==0 ) return SQLITE_NOMEM;\n            zSep = \" UNION \";\n          }\n          sqlite3_finalize(pS2);\n          sqlite3_prepare_v2(pCur->db, zSql, -1, &pCur->pStmt, 0);\n          sqlite3_free(zSql);\n        }\n        iCol = 0;\n        eNextPhase = COMPLETION_EOF;\n        break;\n      }\n    }\n    if( iCol<0 ){\n      /* This case is when the phase presets zCurrentRow */\n      if( pCur->zCurrentRow==0 ) continue;\n    }else{\n      if( sqlite3_step(pCur->pStmt)==SQLITE_ROW ){\n        /* Extract the next row of content */\n        pCur->zCurrentRow = (const char*)sqlite3_column_text(pCur->pStmt, iCol);\n        pCur->szRow = sqlite3_column_bytes(pCur->pStmt, iCol);\n      }else{\n        /* When all rows are finished, advance to the next phase */\n        sqlite3_finalize(pCur->pStmt);\n        pCur->pStmt = 0;\n        pCur->ePhase = eNextPhase;\n        continue;\n      }\n    }\n    if( pCur->nPrefix==0 ) break;\n    if( pCur->nPrefix<=pCur->szRow\n     && sqlite3_strnicmp(pCur->zPrefix, pCur->zCurrentRow, pCur->nPrefix)==0\n    ){\n      break;\n    }\n  }\n\n  return SQLITE_OK;\n}\n\n/*\n** Return values of columns for the row at which the completion_cursor\n** is currently pointing.\n*/\nstatic int completionColumn(\n  sqlite3_vtab_cursor *cur,   /* The cursor */\n  sqlite3_context *ctx,       /* First argument to sqlite3_result_...() */\n  int i                       /* Which column to return */\n){\n  completion_cursor *pCur = (completion_cursor*)cur;\n  switch( i ){\n    case COMPLETION_COLUMN_CANDIDATE: {\n      sqlite3_result_text(ctx, pCur->zCurrentRow, pCur->szRow,SQLITE_TRANSIENT);\n      break;\n    }\n    case COMPLETION_COLUMN_PREFIX: {\n      sqlite3_result_text(ctx, pCur->zPrefix, -1, SQLITE_TRANSIENT);\n      break;\n    }\n    case COMPLETION_COLUMN_WHOLELINE: {\n      sqlite3_result_text(ctx, pCur->zLine, -1, SQLITE_TRANSIENT);\n      break;\n    }\n    case COMPLETION_COLUMN_PHASE: {\n      sqlite3_result_int(ctx, pCur->ePhase);\n      break;\n    }\n  }\n  return SQLITE_OK;\n}\n\n/*\n** Return the rowid for the current row.  In this implementation, the\n** rowid is the same as the output value.\n*/\nstatic int completionRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){\n  completion_cursor *pCur = (completion_cursor*)cur;\n  *pRowid = pCur->iRowid;\n  return SQLITE_OK;\n}\n\n/*\n** Return TRUE if the cursor has been moved off of the last\n** row of output.\n*/\nstatic int completionEof(sqlite3_vtab_cursor *cur){\n  completion_cursor *pCur = (completion_cursor*)cur;\n  return pCur->ePhase >= COMPLETION_EOF;\n}\n\n/*\n** This method is called to \"rewind\" the completion_cursor object back\n** to the first row of output.  This method is always called at least\n** once prior to any call to completionColumn() or completionRowid() or \n** completionEof().\n*/\nstatic int completionFilter(\n  sqlite3_vtab_cursor *pVtabCursor, \n  int idxNum, const char *idxStr,\n  int argc, sqlite3_value **argv\n){\n  completion_cursor *pCur = (completion_cursor *)pVtabCursor;\n  int iArg = 0;\n  (void)(idxStr);   /* Unused parameter */\n  (void)(argc);     /* Unused parameter */\n  completionCursorReset(pCur);\n  if( idxNum & 1 ){\n    pCur->nPrefix = sqlite3_value_bytes(argv[iArg]);\n    if( pCur->nPrefix>0 ){\n      pCur->zPrefix = sqlite3_mprintf(\"%s\", sqlite3_value_text(argv[iArg]));\n      if( pCur->zPrefix==0 ) return SQLITE_NOMEM;\n    }\n    iArg = 1;\n  }\n  if( idxNum & 2 ){\n    pCur->nLine = sqlite3_value_bytes(argv[iArg]);\n    if( pCur->nLine>0 ){\n      pCur->zLine = sqlite3_mprintf(\"%s\", sqlite3_value_text(argv[iArg]));\n      if( pCur->zLine==0 ) return SQLITE_NOMEM;\n    }\n  }\n  if( pCur->zLine!=0 && pCur->zPrefix==0 ){\n    int i = pCur->nLine;\n    while( i>0 && (isalnum(pCur->zLine[i-1]) || pCur->zLine[i-1]=='_') ){\n      i--;\n    }\n    pCur->nPrefix = pCur->nLine - i;\n    if( pCur->nPrefix>0 ){\n      pCur->zPrefix = sqlite3_mprintf(\"%.*s\", pCur->nPrefix, pCur->zLine + i);\n      if( pCur->zPrefix==0 ) return SQLITE_NOMEM;\n    }\n  }\n  pCur->iRowid = 0;\n  pCur->ePhase = COMPLETION_FIRST_PHASE;\n  return completionNext(pVtabCursor);\n}\n\n/*\n** SQLite will invoke this method one or more times while planning a query\n** that uses the completion virtual table.  This routine needs to create\n** a query plan for each invocation and compute an estimated cost for that\n** plan.\n**\n** There are two hidden parameters that act as arguments to the table-valued\n** function:  \"prefix\" and \"wholeline\".  Bit 0 of idxNum is set if \"prefix\"\n** is available and bit 1 is set if \"wholeline\" is available.\n*/\nstatic int completionBestIndex(\n  sqlite3_vtab *tab,\n  sqlite3_index_info *pIdxInfo\n){\n  int i;                 /* Loop over constraints */\n  int idxNum = 0;        /* The query plan bitmask */\n  int prefixIdx = -1;    /* Index of the start= constraint, or -1 if none */\n  int wholelineIdx = -1; /* Index of the stop= constraint, or -1 if none */\n  int nArg = 0;          /* Number of arguments that completeFilter() expects */\n  const struct sqlite3_index_constraint *pConstraint;\n\n  (void)(tab);    /* Unused parameter */\n  pConstraint = pIdxInfo->aConstraint;\n  for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){\n    if( pConstraint->usable==0 ) continue;\n    if( pConstraint->op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;\n    switch( pConstraint->iColumn ){\n      case COMPLETION_COLUMN_PREFIX:\n        prefixIdx = i;\n        idxNum |= 1;\n        break;\n      case COMPLETION_COLUMN_WHOLELINE:\n        wholelineIdx = i;\n        idxNum |= 2;\n        break;\n    }\n  }\n  if( prefixIdx>=0 ){\n    pIdxInfo->aConstraintUsage[prefixIdx].argvIndex = ++nArg;\n    pIdxInfo->aConstraintUsage[prefixIdx].omit = 1;\n  }\n  if( wholelineIdx>=0 ){\n    pIdxInfo->aConstraintUsage[wholelineIdx].argvIndex = ++nArg;\n    pIdxInfo->aConstraintUsage[wholelineIdx].omit = 1;\n  }\n  pIdxInfo->idxNum = idxNum;\n  pIdxInfo->estimatedCost = (double)5000 - 1000*nArg;\n  pIdxInfo->estimatedRows = 500 - 100*nArg;\n  return SQLITE_OK;\n}\n\n/*\n** This following structure defines all the methods for the \n** completion virtual table.\n*/\nstatic sqlite3_module completionModule = {\n  0,                         /* iVersion */\n  0,                         /* xCreate */\n  completionConnect,         /* xConnect */\n  completionBestIndex,       /* xBestIndex */\n  completionDisconnect,      /* xDisconnect */\n  0,                         /* xDestroy */\n  completionOpen,            /* xOpen - open a cursor */\n  completionClose,           /* xClose - close a cursor */\n  completionFilter,          /* xFilter - configure scan constraints */\n  completionNext,            /* xNext - advance a cursor */\n  completionEof,             /* xEof - check for end of scan */\n  completionColumn,          /* xColumn - read data */\n  completionRowid,           /* xRowid - read data */\n  0,                         /* xUpdate */\n  0,                         /* xBegin */\n  0,                         /* xSync */\n  0,                         /* xCommit */\n  0,                         /* xRollback */\n  0,                         /* xFindMethod */\n  0,                         /* xRename */\n  0,                         /* xSavepoint */\n  0,                         /* xRelease */\n  0,                         /* xRollbackTo */\n  0                          /* xShadowName */\n};\n\n#endif /* SQLITE_OMIT_VIRTUALTABLE */\n\nint sqlite3CompletionVtabInit(sqlite3 *db){\n  int rc = SQLITE_OK;\n#ifndef SQLITE_OMIT_VIRTUALTABLE\n  rc = sqlite3_create_module(db, \"completion\", &completionModule, 0);\n#endif\n  return rc;\n}\n\n#ifdef _WIN32\n\n#endif\nint sqlite3_completion_init(\n  sqlite3 *db, \n  char **pzErrMsg, \n  const sqlite3_api_routines *pApi\n){\n  int rc = SQLITE_OK;\n  SQLITE_EXTENSION_INIT2(pApi);\n  (void)(pzErrMsg);  /* Unused parameter */\n#ifndef SQLITE_OMIT_VIRTUALTABLE\n  rc = sqlite3CompletionVtabInit(db);\n#endif\n  return rc;\n}\n\n/************************* End ../ext/misc/completion.c ********************/\n/************************* Begin ../ext/misc/appendvfs.c ******************/\n/*\n** 2017-10-20\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n******************************************************************************\n**\n** This file implements a VFS shim that allows an SQLite database to be\n** appended onto the end of some other file, such as an executable.\n**\n** A special record must appear at the end of the file that identifies the\n** file as an appended database and provides an offset to page 1.  For\n** best performance page 1 should be located at a disk page boundary, though\n** that is not required.\n**\n** When opening a database using this VFS, the connection might treat\n** the file as an ordinary SQLite database, or it might treat is as a\n** database appended onto some other file.  Here are the rules:\n**\n**  (1)  When opening a new empty file, that file is treated as an ordinary\n**       database.\n**\n**  (2)  When opening a file that begins with the standard SQLite prefix\n**       string \"SQLite format 3\", that file is treated as an ordinary\n**       database.\n**\n**  (3)  When opening a file that ends with the appendvfs trailer string\n**       \"Start-Of-SQLite3-NNNNNNNN\" that file is treated as an appended\n**       database.\n**\n**  (4)  If none of the above apply and the SQLITE_OPEN_CREATE flag is\n**       set, then a new database is appended to the already existing file.\n**\n**  (5)  Otherwise, SQLITE_CANTOPEN is returned.\n**\n** To avoid unnecessary complications with the PENDING_BYTE, the size of\n** the file containing the database is limited to 1GB.  This VFS will refuse\n** to read or write past the 1GB mark.  This restriction might be lifted in\n** future versions.  For now, if you need a large database, then keep the\n** database in a separate file.\n**\n** If the file being opened is not an appended database, then this shim is\n** a pass-through into the default underlying VFS.\n**/\nSQLITE_EXTENSION_INIT1\n#include <string.h>\n#include <assert.h>\n\n/* The append mark at the end of the database is:\n**\n**     Start-Of-SQLite3-NNNNNNNN\n**     123456789 123456789 12345\n**\n** The NNNNNNNN represents a 64-bit big-endian unsigned integer which is\n** the offset to page 1.\n*/\n#define APND_MARK_PREFIX     \"Start-Of-SQLite3-\"\n#define APND_MARK_PREFIX_SZ  17\n#define APND_MARK_SIZE       25\n\n/*\n** Maximum size of the combined prefix + database + append-mark.  This\n** must be less than 0x40000000 to avoid locking issues on Windows.\n*/\n#define APND_MAX_SIZE  (65536*15259)\n\n/*\n** Forward declaration of objects used by this utility\n*/\ntypedef struct sqlite3_vfs ApndVfs;\ntypedef struct ApndFile ApndFile;\n\n/* Access to a lower-level VFS that (might) implement dynamic loading,\n** access to randomness, etc.\n*/\n#define ORIGVFS(p)  ((sqlite3_vfs*)((p)->pAppData))\n#define ORIGFILE(p) ((sqlite3_file*)(((ApndFile*)(p))+1))\n\n/* An open file */\nstruct ApndFile {\n  sqlite3_file base;              /* IO methods */\n  sqlite3_int64 iPgOne;           /* File offset to page 1 */\n  sqlite3_int64 iMark;            /* Start of the append-mark */\n};\n\n/*\n** Methods for ApndFile\n*/\nstatic int apndClose(sqlite3_file*);\nstatic int apndRead(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);\nstatic int apndWrite(sqlite3_file*,const void*,int iAmt, sqlite3_int64 iOfst);\nstatic int apndTruncate(sqlite3_file*, sqlite3_int64 size);\nstatic int apndSync(sqlite3_file*, int flags);\nstatic int apndFileSize(sqlite3_file*, sqlite3_int64 *pSize);\nstatic int apndLock(sqlite3_file*, int);\nstatic int apndUnlock(sqlite3_file*, int);\nstatic int apndCheckReservedLock(sqlite3_file*, int *pResOut);\nstatic int apndFileControl(sqlite3_file*, int op, void *pArg);\nstatic int apndSectorSize(sqlite3_file*);\nstatic int apndDeviceCharacteristics(sqlite3_file*);\nstatic int apndShmMap(sqlite3_file*, int iPg, int pgsz, int, void volatile**);\nstatic int apndShmLock(sqlite3_file*, int offset, int n, int flags);\nstatic void apndShmBarrier(sqlite3_file*);\nstatic int apndShmUnmap(sqlite3_file*, int deleteFlag);\nstatic int apndFetch(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);\nstatic int apndUnfetch(sqlite3_file*, sqlite3_int64 iOfst, void *p);\n\n/*\n** Methods for ApndVfs\n*/\nstatic int apndOpen(sqlite3_vfs*, const char *, sqlite3_file*, int , int *);\nstatic int apndDelete(sqlite3_vfs*, const char *zName, int syncDir);\nstatic int apndAccess(sqlite3_vfs*, const char *zName, int flags, int *);\nstatic int apndFullPathname(sqlite3_vfs*, const char *zName, int, char *zOut);\nstatic void *apndDlOpen(sqlite3_vfs*, const char *zFilename);\nstatic void apndDlError(sqlite3_vfs*, int nByte, char *zErrMsg);\nstatic void (*apndDlSym(sqlite3_vfs *pVfs, void *p, const char*zSym))(void);\nstatic void apndDlClose(sqlite3_vfs*, void*);\nstatic int apndRandomness(sqlite3_vfs*, int nByte, char *zOut);\nstatic int apndSleep(sqlite3_vfs*, int microseconds);\nstatic int apndCurrentTime(sqlite3_vfs*, double*);\nstatic int apndGetLastError(sqlite3_vfs*, int, char *);\nstatic int apndCurrentTimeInt64(sqlite3_vfs*, sqlite3_int64*);\nstatic int apndSetSystemCall(sqlite3_vfs*, const char*,sqlite3_syscall_ptr);\nstatic sqlite3_syscall_ptr apndGetSystemCall(sqlite3_vfs*, const char *z);\nstatic const char *apndNextSystemCall(sqlite3_vfs*, const char *zName);\n\nstatic sqlite3_vfs apnd_vfs = {\n  3,                            /* iVersion (set when registered) */\n  0,                            /* szOsFile (set when registered) */\n  1024,                         /* mxPathname */\n  0,                            /* pNext */\n  \"apndvfs\",                    /* zName */\n  0,                            /* pAppData (set when registered) */ \n  apndOpen,                     /* xOpen */\n  apndDelete,                   /* xDelete */\n  apndAccess,                   /* xAccess */\n  apndFullPathname,             /* xFullPathname */\n  apndDlOpen,                   /* xDlOpen */\n  apndDlError,                  /* xDlError */\n  apndDlSym,                    /* xDlSym */\n  apndDlClose,                  /* xDlClose */\n  apndRandomness,               /* xRandomness */\n  apndSleep,                    /* xSleep */\n  apndCurrentTime,              /* xCurrentTime */\n  apndGetLastError,             /* xGetLastError */\n  apndCurrentTimeInt64,         /* xCurrentTimeInt64 */\n  apndSetSystemCall,            /* xSetSystemCall */\n  apndGetSystemCall,            /* xGetSystemCall */\n  apndNextSystemCall            /* xNextSystemCall */\n};\n\nstatic const sqlite3_io_methods apnd_io_methods = {\n  3,                              /* iVersion */\n  apndClose,                      /* xClose */\n  apndRead,                       /* xRead */\n  apndWrite,                      /* xWrite */\n  apndTruncate,                   /* xTruncate */\n  apndSync,                       /* xSync */\n  apndFileSize,                   /* xFileSize */\n  apndLock,                       /* xLock */\n  apndUnlock,                     /* xUnlock */\n  apndCheckReservedLock,          /* xCheckReservedLock */\n  apndFileControl,                /* xFileControl */\n  apndSectorSize,                 /* xSectorSize */\n  apndDeviceCharacteristics,      /* xDeviceCharacteristics */\n  apndShmMap,                     /* xShmMap */\n  apndShmLock,                    /* xShmLock */\n  apndShmBarrier,                 /* xShmBarrier */\n  apndShmUnmap,                   /* xShmUnmap */\n  apndFetch,                      /* xFetch */\n  apndUnfetch                     /* xUnfetch */\n};\n\n\n\n/*\n** Close an apnd-file.\n*/\nstatic int apndClose(sqlite3_file *pFile){\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xClose(pFile);\n}\n\n/*\n** Read data from an apnd-file.\n*/\nstatic int apndRead(\n  sqlite3_file *pFile, \n  void *zBuf, \n  int iAmt, \n  sqlite_int64 iOfst\n){\n  ApndFile *p = (ApndFile *)pFile;\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xRead(pFile, zBuf, iAmt, iOfst+p->iPgOne);\n}\n\n/*\n** Add the append-mark onto the end of the file.\n*/\nstatic int apndWriteMark(ApndFile *p, sqlite3_file *pFile){\n  int i;\n  unsigned char a[APND_MARK_SIZE];\n  memcpy(a, APND_MARK_PREFIX, APND_MARK_PREFIX_SZ);\n  for(i=0; i<8; i++){\n    a[APND_MARK_PREFIX_SZ+i] = (p->iPgOne >> (56 - i*8)) & 0xff;\n  }\n  return pFile->pMethods->xWrite(pFile, a, APND_MARK_SIZE, p->iMark);\n}\n\n/*\n** Write data to an apnd-file.\n*/\nstatic int apndWrite(\n  sqlite3_file *pFile,\n  const void *zBuf,\n  int iAmt,\n  sqlite_int64 iOfst\n){\n  int rc;\n  ApndFile *p = (ApndFile *)pFile;\n  pFile = ORIGFILE(pFile);\n  if( iOfst+iAmt>=APND_MAX_SIZE ) return SQLITE_FULL;\n  rc = pFile->pMethods->xWrite(pFile, zBuf, iAmt, iOfst+p->iPgOne);\n  if( rc==SQLITE_OK &&  iOfst + iAmt + p->iPgOne > p->iMark ){\n    sqlite3_int64 sz = 0;\n    rc = pFile->pMethods->xFileSize(pFile, &sz);\n    if( rc==SQLITE_OK ){\n      p->iMark = sz - APND_MARK_SIZE;\n      if( iOfst + iAmt + p->iPgOne > p->iMark ){\n        p->iMark = p->iPgOne + iOfst + iAmt;\n        rc = apndWriteMark(p, pFile);\n      }\n    }\n  }\n  return rc;\n}\n\n/*\n** Truncate an apnd-file.\n*/\nstatic int apndTruncate(sqlite3_file *pFile, sqlite_int64 size){\n  int rc;\n  ApndFile *p = (ApndFile *)pFile;\n  pFile = ORIGFILE(pFile);\n  rc = pFile->pMethods->xTruncate(pFile, size+p->iPgOne+APND_MARK_SIZE);\n  if( rc==SQLITE_OK ){\n    p->iMark = p->iPgOne+size;\n    rc = apndWriteMark(p, pFile);\n  }\n  return rc;\n}\n\n/*\n** Sync an apnd-file.\n*/\nstatic int apndSync(sqlite3_file *pFile, int flags){\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xSync(pFile, flags);\n}\n\n/*\n** Return the current file-size of an apnd-file.\n*/\nstatic int apndFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){\n  ApndFile *p = (ApndFile *)pFile;\n  int rc;\n  pFile = ORIGFILE(p);\n  rc = pFile->pMethods->xFileSize(pFile, pSize);\n  if( rc==SQLITE_OK && p->iPgOne ){\n    *pSize -= p->iPgOne + APND_MARK_SIZE;\n  }\n  return rc;\n}\n\n/*\n** Lock an apnd-file.\n*/\nstatic int apndLock(sqlite3_file *pFile, int eLock){\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xLock(pFile, eLock);\n}\n\n/*\n** Unlock an apnd-file.\n*/\nstatic int apndUnlock(sqlite3_file *pFile, int eLock){\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xUnlock(pFile, eLock);\n}\n\n/*\n** Check if another file-handle holds a RESERVED lock on an apnd-file.\n*/\nstatic int apndCheckReservedLock(sqlite3_file *pFile, int *pResOut){\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xCheckReservedLock(pFile, pResOut);\n}\n\n/*\n** File control method. For custom operations on an apnd-file.\n*/\nstatic int apndFileControl(sqlite3_file *pFile, int op, void *pArg){\n  ApndFile *p = (ApndFile *)pFile;\n  int rc;\n  pFile = ORIGFILE(pFile);\n  rc = pFile->pMethods->xFileControl(pFile, op, pArg);\n  if( rc==SQLITE_OK && op==SQLITE_FCNTL_VFSNAME ){\n    *(char**)pArg = sqlite3_mprintf(\"apnd(%lld)/%z\", p->iPgOne, *(char**)pArg);\n  }\n  return rc;\n}\n\n/*\n** Return the sector-size in bytes for an apnd-file.\n*/\nstatic int apndSectorSize(sqlite3_file *pFile){\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xSectorSize(pFile);\n}\n\n/*\n** Return the device characteristic flags supported by an apnd-file.\n*/\nstatic int apndDeviceCharacteristics(sqlite3_file *pFile){\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xDeviceCharacteristics(pFile);\n}\n\n/* Create a shared memory file mapping */\nstatic int apndShmMap(\n  sqlite3_file *pFile,\n  int iPg,\n  int pgsz,\n  int bExtend,\n  void volatile **pp\n){\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xShmMap(pFile,iPg,pgsz,bExtend,pp);\n}\n\n/* Perform locking on a shared-memory segment */\nstatic int apndShmLock(sqlite3_file *pFile, int offset, int n, int flags){\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xShmLock(pFile,offset,n,flags);\n}\n\n/* Memory barrier operation on shared memory */\nstatic void apndShmBarrier(sqlite3_file *pFile){\n  pFile = ORIGFILE(pFile);\n  pFile->pMethods->xShmBarrier(pFile);\n}\n\n/* Unmap a shared memory segment */\nstatic int apndShmUnmap(sqlite3_file *pFile, int deleteFlag){\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xShmUnmap(pFile,deleteFlag);\n}\n\n/* Fetch a page of a memory-mapped file */\nstatic int apndFetch(\n  sqlite3_file *pFile,\n  sqlite3_int64 iOfst,\n  int iAmt,\n  void **pp\n){\n  ApndFile *p = (ApndFile *)pFile;\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xFetch(pFile, iOfst+p->iPgOne, iAmt, pp);\n}\n\n/* Release a memory-mapped page */\nstatic int apndUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *pPage){\n  ApndFile *p = (ApndFile *)pFile;\n  pFile = ORIGFILE(pFile);\n  return pFile->pMethods->xUnfetch(pFile, iOfst+p->iPgOne, pPage);\n}\n\n/*\n** Check to see if the file is an ordinary SQLite database file.\n*/\nstatic int apndIsOrdinaryDatabaseFile(sqlite3_int64 sz, sqlite3_file *pFile){\n  int rc;\n  char zHdr[16];\n  static const char aSqliteHdr[] = \"SQLite format 3\";\n  if( sz<512 ) return 0;\n  rc = pFile->pMethods->xRead(pFile, zHdr, sizeof(zHdr), 0);\n  if( rc ) return 0;\n  return memcmp(zHdr, aSqliteHdr, sizeof(zHdr))==0;\n}\n\n/*\n** Try to read the append-mark off the end of a file.  Return the\n** start of the appended database if the append-mark is present.  If\n** there is no append-mark, return -1;\n*/\nstatic sqlite3_int64 apndReadMark(sqlite3_int64 sz, sqlite3_file *pFile){\n  int rc, i;\n  sqlite3_int64 iMark;\n  unsigned char a[APND_MARK_SIZE];\n\n  if( sz<=APND_MARK_SIZE ) return -1;\n  rc = pFile->pMethods->xRead(pFile, a, APND_MARK_SIZE, sz-APND_MARK_SIZE);\n  if( rc ) return -1;\n  if( memcmp(a, APND_MARK_PREFIX, APND_MARK_PREFIX_SZ)!=0 ) return -1;\n  iMark = ((sqlite3_int64)(a[APND_MARK_PREFIX_SZ]&0x7f))<<56;\n  for(i=1; i<8; i++){    \n    iMark += (sqlite3_int64)a[APND_MARK_PREFIX_SZ+i]<<(56-8*i);\n  }\n  return iMark;\n}\n\n/*\n** Open an apnd file handle.\n*/\nstatic int apndOpen(\n  sqlite3_vfs *pVfs,\n  const char *zName,\n  sqlite3_file *pFile,\n  int flags,\n  int *pOutFlags\n){\n  ApndFile *p;\n  sqlite3_file *pSubFile;\n  sqlite3_vfs *pSubVfs;\n  int rc;\n  sqlite3_int64 sz;\n  pSubVfs = ORIGVFS(pVfs);\n  if( (flags & SQLITE_OPEN_MAIN_DB)==0 ){\n    return pSubVfs->xOpen(pSubVfs, zName, pFile, flags, pOutFlags);\n  }\n  p = (ApndFile*)pFile;\n  memset(p, 0, sizeof(*p));\n  pSubFile = ORIGFILE(pFile);\n  p->base.pMethods = &apnd_io_methods;\n  rc = pSubVfs->xOpen(pSubVfs, zName, pSubFile, flags, pOutFlags);\n  if( rc ) goto apnd_open_done;\n  rc = pSubFile->pMethods->xFileSize(pSubFile, &sz);\n  if( rc ){\n    pSubFile->pMethods->xClose(pSubFile);\n    goto apnd_open_done;\n  }\n  if( apndIsOrdinaryDatabaseFile(sz, pSubFile) ){\n    memmove(pFile, pSubFile, pSubVfs->szOsFile);\n    return SQLITE_OK;\n  }\n  p->iMark = 0;\n  p->iPgOne = apndReadMark(sz, pFile);\n  if( p->iPgOne>0 ){\n    return SQLITE_OK;\n  }\n  if( (flags & SQLITE_OPEN_CREATE)==0 ){\n    pSubFile->pMethods->xClose(pSubFile);\n    rc = SQLITE_CANTOPEN;\n  }\n  p->iPgOne = (sz+0xfff) & ~(sqlite3_int64)0xfff;\napnd_open_done:\n  if( rc ) pFile->pMethods = 0;\n  return rc;\n}\n\n/*\n** All other VFS methods are pass-thrus.\n*/\nstatic int apndDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){\n  return ORIGVFS(pVfs)->xDelete(ORIGVFS(pVfs), zPath, dirSync);\n}\nstatic int apndAccess(\n  sqlite3_vfs *pVfs, \n  const char *zPath, \n  int flags, \n  int *pResOut\n){\n  return ORIGVFS(pVfs)->xAccess(ORIGVFS(pVfs), zPath, flags, pResOut);\n}\nstatic int apndFullPathname(\n  sqlite3_vfs *pVfs, \n  const char *zPath, \n  int nOut, \n  char *zOut\n){\n  return ORIGVFS(pVfs)->xFullPathname(ORIGVFS(pVfs),zPath,nOut,zOut);\n}\nstatic void *apndDlOpen(sqlite3_vfs *pVfs, const char *zPath){\n  return ORIGVFS(pVfs)->xDlOpen(ORIGVFS(pVfs), zPath);\n}\nstatic void apndDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){\n  ORIGVFS(pVfs)->xDlError(ORIGVFS(pVfs), nByte, zErrMsg);\n}\nstatic void (*apndDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym))(void){\n  return ORIGVFS(pVfs)->xDlSym(ORIGVFS(pVfs), p, zSym);\n}\nstatic void apndDlClose(sqlite3_vfs *pVfs, void *pHandle){\n  ORIGVFS(pVfs)->xDlClose(ORIGVFS(pVfs), pHandle);\n}\nstatic int apndRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){\n  return ORIGVFS(pVfs)->xRandomness(ORIGVFS(pVfs), nByte, zBufOut);\n}\nstatic int apndSleep(sqlite3_vfs *pVfs, int nMicro){\n  return ORIGVFS(pVfs)->xSleep(ORIGVFS(pVfs), nMicro);\n}\nstatic int apndCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){\n  return ORIGVFS(pVfs)->xCurrentTime(ORIGVFS(pVfs), pTimeOut);\n}\nstatic int apndGetLastError(sqlite3_vfs *pVfs, int a, char *b){\n  return ORIGVFS(pVfs)->xGetLastError(ORIGVFS(pVfs), a, b);\n}\nstatic int apndCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *p){\n  return ORIGVFS(pVfs)->xCurrentTimeInt64(ORIGVFS(pVfs), p);\n}\nstatic int apndSetSystemCall(\n  sqlite3_vfs *pVfs,\n  const char *zName,\n  sqlite3_syscall_ptr pCall\n){\n  return ORIGVFS(pVfs)->xSetSystemCall(ORIGVFS(pVfs),zName,pCall);\n}\nstatic sqlite3_syscall_ptr apndGetSystemCall(\n  sqlite3_vfs *pVfs,\n  const char *zName\n){\n  return ORIGVFS(pVfs)->xGetSystemCall(ORIGVFS(pVfs),zName);\n}\nstatic const char *apndNextSystemCall(sqlite3_vfs *pVfs, const char *zName){\n  return ORIGVFS(pVfs)->xNextSystemCall(ORIGVFS(pVfs), zName);\n}\n\n  \n#ifdef _WIN32\n\n#endif\n/* \n** This routine is called when the extension is loaded.\n** Register the new VFS.\n*/\nint sqlite3_appendvfs_init(\n  sqlite3 *db, \n  char **pzErrMsg, \n  const sqlite3_api_routines *pApi\n){\n  int rc = SQLITE_OK;\n  sqlite3_vfs *pOrig;\n  SQLITE_EXTENSION_INIT2(pApi);\n  (void)pzErrMsg;\n  (void)db;\n  pOrig = sqlite3_vfs_find(0);\n  apnd_vfs.iVersion = pOrig->iVersion;\n  apnd_vfs.pAppData = pOrig;\n  apnd_vfs.szOsFile = pOrig->szOsFile + sizeof(ApndFile);\n  rc = sqlite3_vfs_register(&apnd_vfs, 0);\n#ifdef APPENDVFS_TEST\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_auto_extension((void(*)(void))apndvfsRegister);\n  }\n#endif\n  if( rc==SQLITE_OK ) rc = SQLITE_OK_LOAD_PERMANENTLY;\n  return rc;\n}\n\n/************************* End ../ext/misc/appendvfs.c ********************/\n/************************* Begin ../ext/misc/memtrace.c ******************/\n/*\n** 2019-01-21\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n*************************************************************************\n**\n** This file implements an extension that uses the SQLITE_CONFIG_MALLOC\n** mechanism to add a tracing layer on top of SQLite.  If this extension\n** is registered prior to sqlite3_initialize(), it will cause all memory\n** allocation activities to be logged on standard output, or to some other\n** FILE specified by the initializer.\n**\n** This file needs to be compiled into the application that uses it.\n**\n** This extension is used to implement the --memtrace option of the\n** command-line shell.\n*/\n#include <assert.h>\n#include <string.h>\n#include <stdio.h>\n\n/* The original memory allocation routines */\nstatic sqlite3_mem_methods memtraceBase;\nstatic FILE *memtraceOut;\n\n/* Methods that trace memory allocations */\nstatic void *memtraceMalloc(int n){\n  if( memtraceOut ){\n    fprintf(memtraceOut, \"MEMTRACE: allocate %d bytes\\n\", \n            memtraceBase.xRoundup(n));\n  }\n  return memtraceBase.xMalloc(n);\n}\nstatic void memtraceFree(void *p){\n  if( p==0 ) return;\n  if( memtraceOut ){\n    fprintf(memtraceOut, \"MEMTRACE: free %d bytes\\n\", memtraceBase.xSize(p));\n  }\n  memtraceBase.xFree(p);\n}\nstatic void *memtraceRealloc(void *p, int n){\n  if( p==0 ) return memtraceMalloc(n);\n  if( n==0 ){\n    memtraceFree(p);\n    return 0;\n  }\n  if( memtraceOut ){\n    fprintf(memtraceOut, \"MEMTRACE: resize %d -> %d bytes\\n\",\n            memtraceBase.xSize(p), memtraceBase.xRoundup(n));\n  }\n  return memtraceBase.xRealloc(p, n);\n}\nstatic int memtraceSize(void *p){\n  return memtraceBase.xSize(p);\n}\nstatic int memtraceRoundup(int n){\n  return memtraceBase.xRoundup(n);\n}\nstatic int memtraceInit(void *p){\n  return memtraceBase.xInit(p);\n}\nstatic void memtraceShutdown(void *p){\n  memtraceBase.xShutdown(p);\n}\n\n/* The substitute memory allocator */\nstatic sqlite3_mem_methods ersaztMethods = {\n  memtraceMalloc,\n  memtraceFree,\n  memtraceRealloc,\n  memtraceSize,\n  memtraceRoundup,\n  memtraceInit,\n  memtraceShutdown,\n  0\n};\n\n/* Begin tracing memory allocations to out. */\nint sqlite3MemTraceActivate(FILE *out){\n  int rc = SQLITE_OK;\n  if( memtraceBase.xMalloc==0 ){\n    rc = sqlite3_config(SQLITE_CONFIG_GETMALLOC, &memtraceBase);\n    if( rc==SQLITE_OK ){\n      rc = sqlite3_config(SQLITE_CONFIG_MALLOC, &ersaztMethods);\n    }\n  }\n  memtraceOut = out;\n  return rc;\n}\n\n/* Deactivate memory tracing */\nint sqlite3MemTraceDeactivate(void){\n  int rc = SQLITE_OK;\n  if( memtraceBase.xMalloc!=0 ){\n    rc = sqlite3_config(SQLITE_CONFIG_MALLOC, &memtraceBase);\n    if( rc==SQLITE_OK ){\n      memset(&memtraceBase, 0, sizeof(memtraceBase));\n    }\n  }\n  memtraceOut = 0;\n  return rc;\n}\n\n/************************* End ../ext/misc/memtrace.c ********************/\n#ifdef SQLITE_HAVE_ZLIB\n/************************* Begin ../ext/misc/zipfile.c ******************/\n/*\n** 2017-12-26\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n******************************************************************************\n**\n** This file implements a virtual table for reading and writing ZIP archive\n** files.\n**\n** Usage example:\n**\n**     SELECT name, sz, datetime(mtime,'unixepoch') FROM zipfile($filename);\n**\n** Current limitations:\n**\n**    *  No support for encryption\n**    *  No support for ZIP archives spanning multiple files\n**    *  No support for zip64 extensions\n**    *  Only the \"inflate/deflate\" (zlib) compression method is supported\n*/\nSQLITE_EXTENSION_INIT1\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\n#include <zlib.h>\n\n#ifndef SQLITE_OMIT_VIRTUALTABLE\n\n#ifndef SQLITE_AMALGAMATION\n\n/* typedef sqlite3_int64 i64; */\n/* typedef unsigned char u8; */\ntypedef unsigned short u16;\ntypedef unsigned long u32;\n#define MIN(a,b) ((a)<(b) ? (a) : (b))\n\n#if defined(SQLITE_COVERAGE_TEST) || defined(SQLITE_MUTATION_TEST)\n# define ALWAYS(X)      (1)\n# define NEVER(X)       (0)\n#elif !defined(NDEBUG)\n# define ALWAYS(X)      ((X)?1:(assert(0),0))\n# define NEVER(X)       ((X)?(assert(0),1):0)\n#else\n# define ALWAYS(X)      (X)\n# define NEVER(X)       (X)\n#endif\n\n#endif   /* SQLITE_AMALGAMATION */\n\n/*\n** Definitions for mode bitmasks S_IFDIR, S_IFREG and S_IFLNK.\n**\n** In some ways it would be better to obtain these values from system \n** header files. But, the dependency is undesirable and (a) these\n** have been stable for decades, (b) the values are part of POSIX and\n** are also made explicit in [man stat], and (c) are part of the \n** file format for zip archives.\n*/\n#ifndef S_IFDIR\n# define S_IFDIR 0040000\n#endif\n#ifndef S_IFREG\n# define S_IFREG 0100000\n#endif\n#ifndef S_IFLNK\n# define S_IFLNK 0120000\n#endif\n\nstatic const char ZIPFILE_SCHEMA[] = \n  \"CREATE TABLE y(\"\n    \"name PRIMARY KEY,\"  /* 0: Name of file in zip archive */\n    \"mode,\"              /* 1: POSIX mode for file */\n    \"mtime,\"             /* 2: Last modification time (secs since 1970)*/\n    \"sz,\"                /* 3: Size of object */\n    \"rawdata,\"           /* 4: Raw data */\n    \"data,\"              /* 5: Uncompressed data */\n    \"method,\"            /* 6: Compression method (integer) */\n    \"z HIDDEN\"           /* 7: Name of zip file */\n  \") WITHOUT ROWID;\";\n\n#define ZIPFILE_F_COLUMN_IDX 7    /* Index of column \"file\" in the above */\n#define ZIPFILE_BUFFER_SIZE (64*1024)\n\n\n/*\n** Magic numbers used to read and write zip files.\n**\n** ZIPFILE_NEWENTRY_MADEBY:\n**   Use this value for the \"version-made-by\" field in new zip file\n**   entries. The upper byte indicates \"unix\", and the lower byte \n**   indicates that the zip file matches pkzip specification 3.0. \n**   This is what info-zip seems to do.\n**\n** ZIPFILE_NEWENTRY_REQUIRED:\n**   Value for \"version-required-to-extract\" field of new entries.\n**   Version 2.0 is required to support folders and deflate compression.\n**\n** ZIPFILE_NEWENTRY_FLAGS:\n**   Value for \"general-purpose-bit-flags\" field of new entries. Bit\n**   11 means \"utf-8 filename and comment\".\n**\n** ZIPFILE_SIGNATURE_CDS:\n**   First 4 bytes of a valid CDS record.\n**\n** ZIPFILE_SIGNATURE_LFH:\n**   First 4 bytes of a valid LFH record.\n**\n** ZIPFILE_SIGNATURE_EOCD\n**   First 4 bytes of a valid EOCD record.\n*/\n#define ZIPFILE_EXTRA_TIMESTAMP   0x5455\n#define ZIPFILE_NEWENTRY_MADEBY   ((3<<8) + 30)\n#define ZIPFILE_NEWENTRY_REQUIRED 20\n#define ZIPFILE_NEWENTRY_FLAGS    0x800\n#define ZIPFILE_SIGNATURE_CDS     0x02014b50\n#define ZIPFILE_SIGNATURE_LFH     0x04034b50\n#define ZIPFILE_SIGNATURE_EOCD    0x06054b50\n\n/*\n** The sizes of the fixed-size part of each of the three main data \n** structures in a zip archive.\n*/\n#define ZIPFILE_LFH_FIXED_SZ      30\n#define ZIPFILE_EOCD_FIXED_SZ     22\n#define ZIPFILE_CDS_FIXED_SZ      46\n\n/*\n*** 4.3.16  End of central directory record:\n***\n***   end of central dir signature    4 bytes  (0x06054b50)\n***   number of this disk             2 bytes\n***   number of the disk with the\n***   start of the central directory  2 bytes\n***   total number of entries in the\n***   central directory on this disk  2 bytes\n***   total number of entries in\n***   the central directory           2 bytes\n***   size of the central directory   4 bytes\n***   offset of start of central\n***   directory with respect to\n***   the starting disk number        4 bytes\n***   .ZIP file comment length        2 bytes\n***   .ZIP file comment       (variable size)\n*/\ntypedef struct ZipfileEOCD ZipfileEOCD;\nstruct ZipfileEOCD {\n  u16 iDisk;\n  u16 iFirstDisk;\n  u16 nEntry;\n  u16 nEntryTotal;\n  u32 nSize;\n  u32 iOffset;\n};\n\n/*\n*** 4.3.12  Central directory structure:\n***\n*** ...\n***\n***   central file header signature   4 bytes  (0x02014b50)\n***   version made by                 2 bytes\n***   version needed to extract       2 bytes\n***   general purpose bit flag        2 bytes\n***   compression method              2 bytes\n***   last mod file time              2 bytes\n***   last mod file date              2 bytes\n***   crc-32                          4 bytes\n***   compressed size                 4 bytes\n***   uncompressed size               4 bytes\n***   file name length                2 bytes\n***   extra field length              2 bytes\n***   file comment length             2 bytes\n***   disk number start               2 bytes\n***   internal file attributes        2 bytes\n***   external file attributes        4 bytes\n***   relative offset of local header 4 bytes\n*/\ntypedef struct ZipfileCDS ZipfileCDS;\nstruct ZipfileCDS {\n  u16 iVersionMadeBy;\n  u16 iVersionExtract;\n  u16 flags;\n  u16 iCompression;\n  u16 mTime;\n  u16 mDate;\n  u32 crc32;\n  u32 szCompressed;\n  u32 szUncompressed;\n  u16 nFile;\n  u16 nExtra;\n  u16 nComment;\n  u16 iDiskStart;\n  u16 iInternalAttr;\n  u32 iExternalAttr;\n  u32 iOffset;\n  char *zFile;                    /* Filename (sqlite3_malloc()) */\n};\n\n/*\n*** 4.3.7  Local file header:\n***\n***   local file header signature     4 bytes  (0x04034b50)\n***   version needed to extract       2 bytes\n***   general purpose bit flag        2 bytes\n***   compression method              2 bytes\n***   last mod file time              2 bytes\n***   last mod file date              2 bytes\n***   crc-32                          4 bytes\n***   compressed size                 4 bytes\n***   uncompressed size               4 bytes\n***   file name length                2 bytes\n***   extra field length              2 bytes\n***   \n*/\ntypedef struct ZipfileLFH ZipfileLFH;\nstruct ZipfileLFH {\n  u16 iVersionExtract;\n  u16 flags;\n  u16 iCompression;\n  u16 mTime;\n  u16 mDate;\n  u32 crc32;\n  u32 szCompressed;\n  u32 szUncompressed;\n  u16 nFile;\n  u16 nExtra;\n};\n\ntypedef struct ZipfileEntry ZipfileEntry;\nstruct ZipfileEntry {\n  ZipfileCDS cds;            /* Parsed CDS record */\n  u32 mUnixTime;             /* Modification time, in UNIX format */\n  u8 *aExtra;                /* cds.nExtra+cds.nComment bytes of extra data */\n  i64 iDataOff;              /* Offset to data in file (if aData==0) */\n  u8 *aData;                 /* cds.szCompressed bytes of compressed data */\n  ZipfileEntry *pNext;       /* Next element in in-memory CDS */\n};\n\n/* \n** Cursor type for zipfile tables.\n*/\ntypedef struct ZipfileCsr ZipfileCsr;\nstruct ZipfileCsr {\n  sqlite3_vtab_cursor base;  /* Base class - must be first */\n  i64 iId;                   /* Cursor ID */\n  u8 bEof;                   /* True when at EOF */\n  u8 bNoop;                  /* If next xNext() call is no-op */\n\n  /* Used outside of write transactions */\n  FILE *pFile;               /* Zip file */\n  i64 iNextOff;              /* Offset of next record in central directory */\n  ZipfileEOCD eocd;          /* Parse of central directory record */\n\n  ZipfileEntry *pFreeEntry;  /* Free this list when cursor is closed or reset */\n  ZipfileEntry *pCurrent;    /* Current entry */\n  ZipfileCsr *pCsrNext;      /* Next cursor on same virtual table */\n};\n\ntypedef struct ZipfileTab ZipfileTab;\nstruct ZipfileTab {\n  sqlite3_vtab base;         /* Base class - must be first */\n  char *zFile;               /* Zip file this table accesses (may be NULL) */\n  sqlite3 *db;               /* Host database connection */\n  u8 *aBuffer;               /* Temporary buffer used for various tasks */\n\n  ZipfileCsr *pCsrList;      /* List of cursors */\n  i64 iNextCsrid;\n\n  /* The following are used by write transactions only */\n  ZipfileEntry *pFirstEntry; /* Linked list of all files (if pWriteFd!=0) */\n  ZipfileEntry *pLastEntry;  /* Last element in pFirstEntry list */\n  FILE *pWriteFd;            /* File handle open on zip archive */\n  i64 szCurrent;             /* Current size of zip archive */\n  i64 szOrig;                /* Size of archive at start of transaction */\n};\n\n/*\n** Set the error message contained in context ctx to the results of\n** vprintf(zFmt, ...).\n*/\nstatic void zipfileCtxErrorMsg(sqlite3_context *ctx, const char *zFmt, ...){\n  char *zMsg = 0;\n  va_list ap;\n  va_start(ap, zFmt);\n  zMsg = sqlite3_vmprintf(zFmt, ap);\n  sqlite3_result_error(ctx, zMsg, -1);\n  sqlite3_free(zMsg);\n  va_end(ap);\n}\n\n/*\n** If string zIn is quoted, dequote it in place. Otherwise, if the string\n** is not quoted, do nothing.\n*/\nstatic void zipfileDequote(char *zIn){\n  char q = zIn[0];\n  if( q=='\"' || q=='\\'' || q=='`' || q=='[' ){\n    int iIn = 1;\n    int iOut = 0;\n    if( q=='[' ) q = ']';\n    while( ALWAYS(zIn[iIn]) ){\n      char c = zIn[iIn++];\n      if( c==q && zIn[iIn++]!=q ) break;\n      zIn[iOut++] = c;\n    }\n    zIn[iOut] = '\\0';\n  }\n}\n\n/*\n** Construct a new ZipfileTab virtual table object.\n** \n**   argv[0]   -> module name  (\"zipfile\")\n**   argv[1]   -> database name\n**   argv[2]   -> table name\n**   argv[...] -> \"column name\" and other module argument fields.\n*/\nstatic int zipfileConnect(\n  sqlite3 *db,\n  void *pAux,\n  int argc, const char *const*argv,\n  sqlite3_vtab **ppVtab,\n  char **pzErr\n){\n  int nByte = sizeof(ZipfileTab) + ZIPFILE_BUFFER_SIZE;\n  int nFile = 0;\n  const char *zFile = 0;\n  ZipfileTab *pNew = 0;\n  int rc;\n\n  /* If the table name is not \"zipfile\", require that the argument be\n  ** specified. This stops zipfile tables from being created as:\n  **\n  **   CREATE VIRTUAL TABLE zzz USING zipfile();\n  **\n  ** It does not prevent:\n  **\n  **   CREATE VIRTUAL TABLE zipfile USING zipfile();\n  */\n  assert( 0==sqlite3_stricmp(argv[0], \"zipfile\") );\n  if( (0!=sqlite3_stricmp(argv[2], \"zipfile\") && argc<4) || argc>4 ){\n    *pzErr = sqlite3_mprintf(\"zipfile constructor requires one argument\");\n    return SQLITE_ERROR;\n  }\n\n  if( argc>3 ){\n    zFile = argv[3];\n    nFile = (int)strlen(zFile)+1;\n  }\n\n  rc = sqlite3_declare_vtab(db, ZIPFILE_SCHEMA);\n  if( rc==SQLITE_OK ){\n    pNew = (ZipfileTab*)sqlite3_malloc64((sqlite3_int64)nByte+nFile);\n    if( pNew==0 ) return SQLITE_NOMEM;\n    memset(pNew, 0, nByte+nFile);\n    pNew->db = db;\n    pNew->aBuffer = (u8*)&pNew[1];\n    if( zFile ){\n      pNew->zFile = (char*)&pNew->aBuffer[ZIPFILE_BUFFER_SIZE];\n      memcpy(pNew->zFile, zFile, nFile);\n      zipfileDequote(pNew->zFile);\n    }\n  }\n  *ppVtab = (sqlite3_vtab*)pNew;\n  return rc;\n}\n\n/*\n** Free the ZipfileEntry structure indicated by the only argument.\n*/\nstatic void zipfileEntryFree(ZipfileEntry *p){\n  if( p ){\n    sqlite3_free(p->cds.zFile);\n    sqlite3_free(p);\n  }\n}\n\n/*\n** Release resources that should be freed at the end of a write \n** transaction.\n*/\nstatic void zipfileCleanupTransaction(ZipfileTab *pTab){\n  ZipfileEntry *pEntry;\n  ZipfileEntry *pNext;\n\n  if( pTab->pWriteFd ){\n    fclose(pTab->pWriteFd);\n    pTab->pWriteFd = 0;\n  }\n  for(pEntry=pTab->pFirstEntry; pEntry; pEntry=pNext){\n    pNext = pEntry->pNext;\n    zipfileEntryFree(pEntry);\n  }\n  pTab->pFirstEntry = 0;\n  pTab->pLastEntry = 0;\n  pTab->szCurrent = 0;\n  pTab->szOrig = 0;\n}\n\n/*\n** This method is the destructor for zipfile vtab objects.\n*/\nstatic int zipfileDisconnect(sqlite3_vtab *pVtab){\n  zipfileCleanupTransaction((ZipfileTab*)pVtab);\n  sqlite3_free(pVtab);\n  return SQLITE_OK;\n}\n\n/*\n** Constructor for a new ZipfileCsr object.\n*/\nstatic int zipfileOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCsr){\n  ZipfileTab *pTab = (ZipfileTab*)p;\n  ZipfileCsr *pCsr;\n  pCsr = sqlite3_malloc(sizeof(*pCsr));\n  *ppCsr = (sqlite3_vtab_cursor*)pCsr;\n  if( pCsr==0 ){\n    return SQLITE_NOMEM;\n  }\n  memset(pCsr, 0, sizeof(*pCsr));\n  pCsr->iId = ++pTab->iNextCsrid;\n  pCsr->pCsrNext = pTab->pCsrList;\n  pTab->pCsrList = pCsr;\n  return SQLITE_OK;\n}\n\n/*\n** Reset a cursor back to the state it was in when first returned\n** by zipfileOpen().\n*/\nstatic void zipfileResetCursor(ZipfileCsr *pCsr){\n  ZipfileEntry *p;\n  ZipfileEntry *pNext;\n\n  pCsr->bEof = 0;\n  if( pCsr->pFile ){\n    fclose(pCsr->pFile);\n    pCsr->pFile = 0;\n    zipfileEntryFree(pCsr->pCurrent);\n    pCsr->pCurrent = 0;\n  }\n\n  for(p=pCsr->pFreeEntry; p; p=pNext){\n    pNext = p->pNext;\n    zipfileEntryFree(p);\n  }\n}\n\n/*\n** Destructor for an ZipfileCsr.\n*/\nstatic int zipfileClose(sqlite3_vtab_cursor *cur){\n  ZipfileCsr *pCsr = (ZipfileCsr*)cur;\n  ZipfileTab *pTab = (ZipfileTab*)(pCsr->base.pVtab);\n  ZipfileCsr **pp;\n  zipfileResetCursor(pCsr);\n\n  /* Remove this cursor from the ZipfileTab.pCsrList list. */\n  for(pp=&pTab->pCsrList; *pp!=pCsr; pp=&((*pp)->pCsrNext));\n  *pp = pCsr->pCsrNext;\n\n  sqlite3_free(pCsr);\n  return SQLITE_OK;\n}\n\n/*\n** Set the error message for the virtual table associated with cursor\n** pCsr to the results of vprintf(zFmt, ...).\n*/\nstatic void zipfileTableErr(ZipfileTab *pTab, const char *zFmt, ...){\n  va_list ap;\n  va_start(ap, zFmt);\n  sqlite3_free(pTab->base.zErrMsg);\n  pTab->base.zErrMsg = sqlite3_vmprintf(zFmt, ap);\n  va_end(ap);\n}\nstatic void zipfileCursorErr(ZipfileCsr *pCsr, const char *zFmt, ...){\n  va_list ap;\n  va_start(ap, zFmt);\n  sqlite3_free(pCsr->base.pVtab->zErrMsg);\n  pCsr->base.pVtab->zErrMsg = sqlite3_vmprintf(zFmt, ap);\n  va_end(ap);\n}\n\n/*\n** Read nRead bytes of data from offset iOff of file pFile into buffer\n** aRead[]. Return SQLITE_OK if successful, or an SQLite error code\n** otherwise. \n**\n** If an error does occur, output variable (*pzErrmsg) may be set to point\n** to an English language error message. It is the responsibility of the\n** caller to eventually free this buffer using\n** sqlite3_free().\n*/\nstatic int zipfileReadData(\n  FILE *pFile,                    /* Read from this file */\n  u8 *aRead,                      /* Read into this buffer */\n  int nRead,                      /* Number of bytes to read */\n  i64 iOff,                       /* Offset to read from */\n  char **pzErrmsg                 /* OUT: Error message (from sqlite3_malloc) */\n){\n  size_t n;\n  fseek(pFile, (long)iOff, SEEK_SET);\n  n = fread(aRead, 1, nRead, pFile);\n  if( (int)n!=nRead ){\n    *pzErrmsg = sqlite3_mprintf(\"error in fread()\");\n    return SQLITE_ERROR;\n  }\n  return SQLITE_OK;\n}\n\nstatic int zipfileAppendData(\n  ZipfileTab *pTab,\n  const u8 *aWrite,\n  int nWrite\n){\n  size_t n;\n  fseek(pTab->pWriteFd, (long)pTab->szCurrent, SEEK_SET);\n  n = fwrite(aWrite, 1, nWrite, pTab->pWriteFd);\n  if( (int)n!=nWrite ){\n    pTab->base.zErrMsg = sqlite3_mprintf(\"error in fwrite()\");\n    return SQLITE_ERROR;\n  }\n  pTab->szCurrent += nWrite;\n  return SQLITE_OK;\n}\n\n/*\n** Read and return a 16-bit little-endian unsigned integer from buffer aBuf.\n*/\nstatic u16 zipfileGetU16(const u8 *aBuf){\n  return (aBuf[1] << 8) + aBuf[0];\n}\n\n/*\n** Read and return a 32-bit little-endian unsigned integer from buffer aBuf.\n*/\nstatic u32 zipfileGetU32(const u8 *aBuf){\n  return ((u32)(aBuf[3]) << 24)\n       + ((u32)(aBuf[2]) << 16)\n       + ((u32)(aBuf[1]) <<  8)\n       + ((u32)(aBuf[0]) <<  0);\n}\n\n/*\n** Write a 16-bit little endiate integer into buffer aBuf.\n*/\nstatic void zipfilePutU16(u8 *aBuf, u16 val){\n  aBuf[0] = val & 0xFF;\n  aBuf[1] = (val>>8) & 0xFF;\n}\n\n/*\n** Write a 32-bit little endiate integer into buffer aBuf.\n*/\nstatic void zipfilePutU32(u8 *aBuf, u32 val){\n  aBuf[0] = val & 0xFF;\n  aBuf[1] = (val>>8) & 0xFF;\n  aBuf[2] = (val>>16) & 0xFF;\n  aBuf[3] = (val>>24) & 0xFF;\n}\n\n#define zipfileRead32(aBuf) ( aBuf+=4, zipfileGetU32(aBuf-4) )\n#define zipfileRead16(aBuf) ( aBuf+=2, zipfileGetU16(aBuf-2) )\n\n#define zipfileWrite32(aBuf,val) { zipfilePutU32(aBuf,val); aBuf+=4; }\n#define zipfileWrite16(aBuf,val) { zipfilePutU16(aBuf,val); aBuf+=2; }\n\n/*\n** Magic numbers used to read CDS records.\n*/\n#define ZIPFILE_CDS_NFILE_OFF        28\n#define ZIPFILE_CDS_SZCOMPRESSED_OFF 20\n\n/*\n** Decode the CDS record in buffer aBuf into (*pCDS). Return SQLITE_ERROR\n** if the record is not well-formed, or SQLITE_OK otherwise.\n*/\nstatic int zipfileReadCDS(u8 *aBuf, ZipfileCDS *pCDS){\n  u8 *aRead = aBuf;\n  u32 sig = zipfileRead32(aRead);\n  int rc = SQLITE_OK;\n  if( sig!=ZIPFILE_SIGNATURE_CDS ){\n    rc = SQLITE_ERROR;\n  }else{\n    pCDS->iVersionMadeBy = zipfileRead16(aRead);\n    pCDS->iVersionExtract = zipfileRead16(aRead);\n    pCDS->flags = zipfileRead16(aRead);\n    pCDS->iCompression = zipfileRead16(aRead);\n    pCDS->mTime = zipfileRead16(aRead);\n    pCDS->mDate = zipfileRead16(aRead);\n    pCDS->crc32 = zipfileRead32(aRead);\n    pCDS->szCompressed = zipfileRead32(aRead);\n    pCDS->szUncompressed = zipfileRead32(aRead);\n    assert( aRead==&aBuf[ZIPFILE_CDS_NFILE_OFF] );\n    pCDS->nFile = zipfileRead16(aRead);\n    pCDS->nExtra = zipfileRead16(aRead);\n    pCDS->nComment = zipfileRead16(aRead);\n    pCDS->iDiskStart = zipfileRead16(aRead);\n    pCDS->iInternalAttr = zipfileRead16(aRead);\n    pCDS->iExternalAttr = zipfileRead32(aRead);\n    pCDS->iOffset = zipfileRead32(aRead);\n    assert( aRead==&aBuf[ZIPFILE_CDS_FIXED_SZ] );\n  }\n\n  return rc;\n}\n\n/*\n** Decode the LFH record in buffer aBuf into (*pLFH). Return SQLITE_ERROR\n** if the record is not well-formed, or SQLITE_OK otherwise.\n*/\nstatic int zipfileReadLFH(\n  u8 *aBuffer,\n  ZipfileLFH *pLFH\n){\n  u8 *aRead = aBuffer;\n  int rc = SQLITE_OK;\n\n  u32 sig = zipfileRead32(aRead);\n  if( sig!=ZIPFILE_SIGNATURE_LFH ){\n    rc = SQLITE_ERROR;\n  }else{\n    pLFH->iVersionExtract = zipfileRead16(aRead);\n    pLFH->flags = zipfileRead16(aRead);\n    pLFH->iCompression = zipfileRead16(aRead);\n    pLFH->mTime = zipfileRead16(aRead);\n    pLFH->mDate = zipfileRead16(aRead);\n    pLFH->crc32 = zipfileRead32(aRead);\n    pLFH->szCompressed = zipfileRead32(aRead);\n    pLFH->szUncompressed = zipfileRead32(aRead);\n    pLFH->nFile = zipfileRead16(aRead);\n    pLFH->nExtra = zipfileRead16(aRead);\n  }\n  return rc;\n}\n\n\n/*\n** Buffer aExtra (size nExtra bytes) contains zip archive \"extra\" fields.\n** Scan through this buffer to find an \"extra-timestamp\" field. If one\n** exists, extract the 32-bit modification-timestamp from it and store\n** the value in output parameter *pmTime.\n**\n** Zero is returned if no extra-timestamp record could be found (and so\n** *pmTime is left unchanged), or non-zero otherwise.\n**\n** The general format of an extra field is:\n**\n**   Header ID    2 bytes\n**   Data Size    2 bytes\n**   Data         N bytes\n*/\nstatic int zipfileScanExtra(u8 *aExtra, int nExtra, u32 *pmTime){\n  int ret = 0;\n  u8 *p = aExtra;\n  u8 *pEnd = &aExtra[nExtra];\n\n  while( p<pEnd ){\n    u16 id = zipfileRead16(p);\n    u16 nByte = zipfileRead16(p);\n\n    switch( id ){\n      case ZIPFILE_EXTRA_TIMESTAMP: {\n        u8 b = p[0];\n        if( b & 0x01 ){     /* 0x01 -> modtime is present */\n          *pmTime = zipfileGetU32(&p[1]);\n          ret = 1;\n        }\n        break;\n      }\n    }\n\n    p += nByte;\n  }\n  return ret;\n}\n\n/*\n** Convert the standard MS-DOS timestamp stored in the mTime and mDate\n** fields of the CDS structure passed as the only argument to a 32-bit\n** UNIX seconds-since-the-epoch timestamp. Return the result.\n**\n** \"Standard\" MS-DOS time format:\n**\n**   File modification time:\n**     Bits 00-04: seconds divided by 2\n**     Bits 05-10: minute\n**     Bits 11-15: hour\n**   File modification date:\n**     Bits 00-04: day\n**     Bits 05-08: month (1-12)\n**     Bits 09-15: years from 1980 \n**\n** https://msdn.microsoft.com/en-us/library/9kkf9tah.aspx\n*/\nstatic u32 zipfileMtime(ZipfileCDS *pCDS){\n  int Y = (1980 + ((pCDS->mDate >> 9) & 0x7F));\n  int M = ((pCDS->mDate >> 5) & 0x0F);\n  int D = (pCDS->mDate & 0x1F);\n  int B = -13;\n\n  int sec = (pCDS->mTime & 0x1F)*2;\n  int min = (pCDS->mTime >> 5) & 0x3F;\n  int hr = (pCDS->mTime >> 11) & 0x1F;\n  i64 JD;\n\n  /* JD = INT(365.25 * (Y+4716)) + INT(30.6001 * (M+1)) + D + B - 1524.5 */\n\n  /* Calculate the JD in seconds for noon on the day in question */\n  if( M<3 ){\n    Y = Y-1;\n    M = M+12;\n  }\n  JD = (i64)(24*60*60) * (\n      (int)(365.25 * (Y + 4716))\n    + (int)(30.6001 * (M + 1))\n    + D + B - 1524\n  );\n\n  /* Correct the JD for the time within the day */\n  JD += (hr-12) * 3600 + min * 60 + sec;\n\n  /* Convert JD to unix timestamp (the JD epoch is 2440587.5) */\n  return (u32)(JD - (i64)(24405875) * 24*60*6);\n}\n\n/*\n** The opposite of zipfileMtime(). This function populates the mTime and\n** mDate fields of the CDS structure passed as the first argument according\n** to the UNIX timestamp value passed as the second.\n*/\nstatic void zipfileMtimeToDos(ZipfileCDS *pCds, u32 mUnixTime){\n  /* Convert unix timestamp to JD (2440588 is noon on 1/1/1970) */\n  i64 JD = (i64)2440588 + mUnixTime / (24*60*60);\n\n  int A, B, C, D, E;\n  int yr, mon, day;\n  int hr, min, sec;\n\n  A = (int)((JD - 1867216.25)/36524.25);\n  A = (int)(JD + 1 + A - (A/4));\n  B = A + 1524;\n  C = (int)((B - 122.1)/365.25);\n  D = (36525*(C&32767))/100;\n  E = (int)((B-D)/30.6001);\n\n  day = B - D - (int)(30.6001*E);\n  mon = (E<14 ? E-1 : E-13);\n  yr = mon>2 ? C-4716 : C-4715;\n\n  hr = (mUnixTime % (24*60*60)) / (60*60);\n  min = (mUnixTime % (60*60)) / 60;\n  sec = (mUnixTime % 60);\n\n  if( yr>=1980 ){\n    pCds->mDate = (u16)(day + (mon << 5) + ((yr-1980) << 9));\n    pCds->mTime = (u16)(sec/2 + (min<<5) + (hr<<11));\n  }else{\n    pCds->mDate = pCds->mTime = 0;\n  }\n\n  assert( mUnixTime<315507600 \n       || mUnixTime==zipfileMtime(pCds) \n       || ((mUnixTime % 2) && mUnixTime-1==zipfileMtime(pCds)) \n       /* || (mUnixTime % 2) */\n  );\n}\n\n/*\n** If aBlob is not NULL, then it is a pointer to a buffer (nBlob bytes in\n** size) containing an entire zip archive image. Or, if aBlob is NULL,\n** then pFile is a file-handle open on a zip file. In either case, this\n** function creates a ZipfileEntry object based on the zip archive entry\n** for which the CDS record is at offset iOff.\n**\n** If successful, SQLITE_OK is returned and (*ppEntry) set to point to\n** the new object. Otherwise, an SQLite error code is returned and the\n** final value of (*ppEntry) undefined.\n*/\nstatic int zipfileGetEntry(\n  ZipfileTab *pTab,               /* Store any error message here */\n  const u8 *aBlob,                /* Pointer to in-memory file image */\n  int nBlob,                      /* Size of aBlob[] in bytes */\n  FILE *pFile,                    /* If aBlob==0, read from this file */\n  i64 iOff,                       /* Offset of CDS record */\n  ZipfileEntry **ppEntry          /* OUT: Pointer to new object */\n){\n  u8 *aRead;\n  char **pzErr = &pTab->base.zErrMsg;\n  int rc = SQLITE_OK;\n\n  if( aBlob==0 ){\n    aRead = pTab->aBuffer;\n    rc = zipfileReadData(pFile, aRead, ZIPFILE_CDS_FIXED_SZ, iOff, pzErr);\n  }else{\n    aRead = (u8*)&aBlob[iOff];\n  }\n\n  if( rc==SQLITE_OK ){\n    sqlite3_int64 nAlloc;\n    ZipfileEntry *pNew;\n\n    int nFile = zipfileGetU16(&aRead[ZIPFILE_CDS_NFILE_OFF]);\n    int nExtra = zipfileGetU16(&aRead[ZIPFILE_CDS_NFILE_OFF+2]);\n    nExtra += zipfileGetU16(&aRead[ZIPFILE_CDS_NFILE_OFF+4]);\n\n    nAlloc = sizeof(ZipfileEntry) + nExtra;\n    if( aBlob ){\n      nAlloc += zipfileGetU32(&aRead[ZIPFILE_CDS_SZCOMPRESSED_OFF]);\n    }\n\n    pNew = (ZipfileEntry*)sqlite3_malloc64(nAlloc);\n    if( pNew==0 ){\n      rc = SQLITE_NOMEM;\n    }else{\n      memset(pNew, 0, sizeof(ZipfileEntry));\n      rc = zipfileReadCDS(aRead, &pNew->cds);\n      if( rc!=SQLITE_OK ){\n        *pzErr = sqlite3_mprintf(\"failed to read CDS at offset %lld\", iOff);\n      }else if( aBlob==0 ){\n        rc = zipfileReadData(\n            pFile, aRead, nExtra+nFile, iOff+ZIPFILE_CDS_FIXED_SZ, pzErr\n        );\n      }else{\n        aRead = (u8*)&aBlob[iOff + ZIPFILE_CDS_FIXED_SZ];\n      }\n    }\n\n    if( rc==SQLITE_OK ){\n      u32 *pt = &pNew->mUnixTime;\n      pNew->cds.zFile = sqlite3_mprintf(\"%.*s\", nFile, aRead); \n      pNew->aExtra = (u8*)&pNew[1];\n      memcpy(pNew->aExtra, &aRead[nFile], nExtra);\n      if( pNew->cds.zFile==0 ){\n        rc = SQLITE_NOMEM;\n      }else if( 0==zipfileScanExtra(&aRead[nFile], pNew->cds.nExtra, pt) ){\n        pNew->mUnixTime = zipfileMtime(&pNew->cds);\n      }\n    }\n\n    if( rc==SQLITE_OK ){\n      static const int szFix = ZIPFILE_LFH_FIXED_SZ;\n      ZipfileLFH lfh;\n      if( pFile ){\n        rc = zipfileReadData(pFile, aRead, szFix, pNew->cds.iOffset, pzErr);\n      }else{\n        aRead = (u8*)&aBlob[pNew->cds.iOffset];\n      }\n\n      rc = zipfileReadLFH(aRead, &lfh);\n      if( rc==SQLITE_OK ){\n        pNew->iDataOff =  pNew->cds.iOffset + ZIPFILE_LFH_FIXED_SZ;\n        pNew->iDataOff += lfh.nFile + lfh.nExtra;\n        if( aBlob && pNew->cds.szCompressed ){\n          pNew->aData = &pNew->aExtra[nExtra];\n          memcpy(pNew->aData, &aBlob[pNew->iDataOff], pNew->cds.szCompressed);\n        }\n      }else{\n        *pzErr = sqlite3_mprintf(\"failed to read LFH at offset %d\", \n            (int)pNew->cds.iOffset\n        );\n      }\n    }\n\n    if( rc!=SQLITE_OK ){\n      zipfileEntryFree(pNew);\n    }else{\n      *ppEntry = pNew;\n    }\n  }\n\n  return rc;\n}\n\n/*\n** Advance an ZipfileCsr to its next row of output.\n*/\nstatic int zipfileNext(sqlite3_vtab_cursor *cur){\n  ZipfileCsr *pCsr = (ZipfileCsr*)cur;\n  int rc = SQLITE_OK;\n\n  if( pCsr->pFile ){\n    i64 iEof = pCsr->eocd.iOffset + pCsr->eocd.nSize;\n    zipfileEntryFree(pCsr->pCurrent);\n    pCsr->pCurrent = 0;\n    if( pCsr->iNextOff>=iEof ){\n      pCsr->bEof = 1;\n    }else{\n      ZipfileEntry *p = 0;\n      ZipfileTab *pTab = (ZipfileTab*)(cur->pVtab);\n      rc = zipfileGetEntry(pTab, 0, 0, pCsr->pFile, pCsr->iNextOff, &p);\n      if( rc==SQLITE_OK ){\n        pCsr->iNextOff += ZIPFILE_CDS_FIXED_SZ;\n        pCsr->iNextOff += (int)p->cds.nExtra + p->cds.nFile + p->cds.nComment;\n      }\n      pCsr->pCurrent = p;\n    }\n  }else{\n    if( !pCsr->bNoop ){\n      pCsr->pCurrent = pCsr->pCurrent->pNext;\n    }\n    if( pCsr->pCurrent==0 ){\n      pCsr->bEof = 1;\n    }\n  }\n\n  pCsr->bNoop = 0;\n  return rc;\n}\n\nstatic void zipfileFree(void *p) { \n  sqlite3_free(p); \n}\n\n/*\n** Buffer aIn (size nIn bytes) contains compressed data. Uncompressed, the\n** size is nOut bytes. This function uncompresses the data and sets the\n** return value in context pCtx to the result (a blob).\n**\n** If an error occurs, an error code is left in pCtx instead.\n*/\nstatic void zipfileInflate(\n  sqlite3_context *pCtx,          /* Store result here */\n  const u8 *aIn,                  /* Compressed data */\n  int nIn,                        /* Size of buffer aIn[] in bytes */\n  int nOut                        /* Expected output size */\n){\n  u8 *aRes = sqlite3_malloc(nOut);\n  if( aRes==0 ){\n    sqlite3_result_error_nomem(pCtx);\n  }else{\n    int err;\n    z_stream str;\n    memset(&str, 0, sizeof(str));\n\n    str.next_in = (Byte*)aIn;\n    str.avail_in = nIn;\n    str.next_out = (Byte*)aRes;\n    str.avail_out = nOut;\n\n    err = inflateInit2(&str, -15);\n    if( err!=Z_OK ){\n      zipfileCtxErrorMsg(pCtx, \"inflateInit2() failed (%d)\", err);\n    }else{\n      err = inflate(&str, Z_NO_FLUSH);\n      if( err!=Z_STREAM_END ){\n        zipfileCtxErrorMsg(pCtx, \"inflate() failed (%d)\", err);\n      }else{\n        sqlite3_result_blob(pCtx, aRes, nOut, zipfileFree);\n        aRes = 0;\n      }\n    }\n    sqlite3_free(aRes);\n    inflateEnd(&str);\n  }\n}\n\n/*\n** Buffer aIn (size nIn bytes) contains uncompressed data. This function\n** compresses it and sets (*ppOut) to point to a buffer containing the\n** compressed data. The caller is responsible for eventually calling\n** sqlite3_free() to release buffer (*ppOut). Before returning, (*pnOut) \n** is set to the size of buffer (*ppOut) in bytes.\n**\n** If no error occurs, SQLITE_OK is returned. Otherwise, an SQLite error\n** code is returned and an error message left in virtual-table handle\n** pTab. The values of (*ppOut) and (*pnOut) are left unchanged in this\n** case.\n*/\nstatic int zipfileDeflate(\n  const u8 *aIn, int nIn,         /* Input */\n  u8 **ppOut, int *pnOut,         /* Output */\n  char **pzErr                    /* OUT: Error message */\n){\n  sqlite3_int64 nAlloc = compressBound(nIn);\n  u8 *aOut;\n  int rc = SQLITE_OK;\n\n  aOut = (u8*)sqlite3_malloc64(nAlloc);\n  if( aOut==0 ){\n    rc = SQLITE_NOMEM;\n  }else{\n    int res;\n    z_stream str;\n    memset(&str, 0, sizeof(str));\n    str.next_in = (Bytef*)aIn;\n    str.avail_in = nIn;\n    str.next_out = aOut;\n    str.avail_out = nAlloc;\n\n    deflateInit2(&str, 9, Z_DEFLATED, -15, 8, Z_DEFAULT_STRATEGY);\n    res = deflate(&str, Z_FINISH);\n\n    if( res==Z_STREAM_END ){\n      *ppOut = aOut;\n      *pnOut = (int)str.total_out;\n    }else{\n      sqlite3_free(aOut);\n      *pzErr = sqlite3_mprintf(\"zipfile: deflate() error\");\n      rc = SQLITE_ERROR;\n    }\n    deflateEnd(&str);\n  }\n\n  return rc;\n}\n\n\n/*\n** Return values of columns for the row at which the series_cursor\n** is currently pointing.\n*/\nstatic int zipfileColumn(\n  sqlite3_vtab_cursor *cur,   /* The cursor */\n  sqlite3_context *ctx,       /* First argument to sqlite3_result_...() */\n  int i                       /* Which column to return */\n){\n  ZipfileCsr *pCsr = (ZipfileCsr*)cur;\n  ZipfileCDS *pCDS = &pCsr->pCurrent->cds;\n  int rc = SQLITE_OK;\n  switch( i ){\n    case 0:   /* name */\n      sqlite3_result_text(ctx, pCDS->zFile, -1, SQLITE_TRANSIENT);\n      break;\n    case 1:   /* mode */\n      /* TODO: Whether or not the following is correct surely depends on\n      ** the platform on which the archive was created.  */\n      sqlite3_result_int(ctx, pCDS->iExternalAttr >> 16);\n      break;\n    case 2: { /* mtime */\n      sqlite3_result_int64(ctx, pCsr->pCurrent->mUnixTime);\n      break;\n    }\n    case 3: { /* sz */\n      if( sqlite3_vtab_nochange(ctx)==0 ){\n        sqlite3_result_int64(ctx, pCDS->szUncompressed);\n      }\n      break;\n    }\n    case 4:   /* rawdata */\n      if( sqlite3_vtab_nochange(ctx) ) break;\n    case 5: { /* data */\n      if( i==4 || pCDS->iCompression==0 || pCDS->iCompression==8 ){\n        int sz = pCDS->szCompressed;\n        int szFinal = pCDS->szUncompressed;\n        if( szFinal>0 ){\n          u8 *aBuf;\n          u8 *aFree = 0;\n          if( pCsr->pCurrent->aData ){\n            aBuf = pCsr->pCurrent->aData;\n          }else{\n            aBuf = aFree = sqlite3_malloc64(sz);\n            if( aBuf==0 ){\n              rc = SQLITE_NOMEM;\n            }else{\n              FILE *pFile = pCsr->pFile;\n              if( pFile==0 ){\n                pFile = ((ZipfileTab*)(pCsr->base.pVtab))->pWriteFd;\n              }\n              rc = zipfileReadData(pFile, aBuf, sz, pCsr->pCurrent->iDataOff,\n                  &pCsr->base.pVtab->zErrMsg\n              );\n            }\n          }\n          if( rc==SQLITE_OK ){\n            if( i==5 && pCDS->iCompression ){\n              zipfileInflate(ctx, aBuf, sz, szFinal);\n            }else{\n              sqlite3_result_blob(ctx, aBuf, sz, SQLITE_TRANSIENT);\n            }\n          }\n          sqlite3_free(aFree);\n        }else{\n          /* Figure out if this is a directory or a zero-sized file. Consider\n          ** it to be a directory either if the mode suggests so, or if\n          ** the final character in the name is '/'.  */\n          u32 mode = pCDS->iExternalAttr >> 16;\n          if( !(mode & S_IFDIR) && pCDS->zFile[pCDS->nFile-1]!='/' ){\n            sqlite3_result_blob(ctx, \"\", 0, SQLITE_STATIC);\n          }\n        }\n      }\n      break;\n    }\n    case 6:   /* method */\n      sqlite3_result_int(ctx, pCDS->iCompression);\n      break;\n    default:  /* z */\n      assert( i==7 );\n      sqlite3_result_int64(ctx, pCsr->iId);\n      break;\n  }\n\n  return rc;\n}\n\n/*\n** Return TRUE if the cursor is at EOF.\n*/\nstatic int zipfileEof(sqlite3_vtab_cursor *cur){\n  ZipfileCsr *pCsr = (ZipfileCsr*)cur;\n  return pCsr->bEof;\n}\n\n/*\n** If aBlob is not NULL, then it points to a buffer nBlob bytes in size\n** containing an entire zip archive image. Or, if aBlob is NULL, then pFile\n** is guaranteed to be a file-handle open on a zip file.\n**\n** This function attempts to locate the EOCD record within the zip archive\n** and populate *pEOCD with the results of decoding it. SQLITE_OK is\n** returned if successful. Otherwise, an SQLite error code is returned and\n** an English language error message may be left in virtual-table pTab.\n*/\nstatic int zipfileReadEOCD(\n  ZipfileTab *pTab,               /* Return errors here */\n  const u8 *aBlob,                /* Pointer to in-memory file image */\n  int nBlob,                      /* Size of aBlob[] in bytes */\n  FILE *pFile,                    /* Read from this file if aBlob==0 */\n  ZipfileEOCD *pEOCD              /* Object to populate */\n){\n  u8 *aRead = pTab->aBuffer;      /* Temporary buffer */\n  int nRead;                      /* Bytes to read from file */\n  int rc = SQLITE_OK;\n\n  if( aBlob==0 ){\n    i64 iOff;                     /* Offset to read from */\n    i64 szFile;                   /* Total size of file in bytes */\n    fseek(pFile, 0, SEEK_END);\n    szFile = (i64)ftell(pFile);\n    if( szFile==0 ){\n      memset(pEOCD, 0, sizeof(ZipfileEOCD));\n      return SQLITE_OK;\n    }\n    nRead = (int)(MIN(szFile, ZIPFILE_BUFFER_SIZE));\n    iOff = szFile - nRead;\n    rc = zipfileReadData(pFile, aRead, nRead, iOff, &pTab->base.zErrMsg);\n  }else{\n    nRead = (int)(MIN(nBlob, ZIPFILE_BUFFER_SIZE));\n    aRead = (u8*)&aBlob[nBlob-nRead];\n  }\n\n  if( rc==SQLITE_OK ){\n    int i;\n\n    /* Scan backwards looking for the signature bytes */\n    for(i=nRead-20; i>=0; i--){\n      if( aRead[i]==0x50 && aRead[i+1]==0x4b \n       && aRead[i+2]==0x05 && aRead[i+3]==0x06 \n      ){\n        break;\n      }\n    }\n    if( i<0 ){\n      pTab->base.zErrMsg = sqlite3_mprintf(\n          \"cannot find end of central directory record\"\n      );\n      return SQLITE_ERROR;\n    }\n\n    aRead += i+4;\n    pEOCD->iDisk = zipfileRead16(aRead);\n    pEOCD->iFirstDisk = zipfileRead16(aRead);\n    pEOCD->nEntry = zipfileRead16(aRead);\n    pEOCD->nEntryTotal = zipfileRead16(aRead);\n    pEOCD->nSize = zipfileRead32(aRead);\n    pEOCD->iOffset = zipfileRead32(aRead);\n  }\n\n  return rc;\n}\n\n/*\n** Add object pNew to the linked list that begins at ZipfileTab.pFirstEntry \n** and ends with pLastEntry. If argument pBefore is NULL, then pNew is added\n** to the end of the list. Otherwise, it is added to the list immediately\n** before pBefore (which is guaranteed to be a part of said list).\n*/\nstatic void zipfileAddEntry(\n  ZipfileTab *pTab, \n  ZipfileEntry *pBefore, \n  ZipfileEntry *pNew\n){\n  assert( (pTab->pFirstEntry==0)==(pTab->pLastEntry==0) );\n  assert( pNew->pNext==0 );\n  if( pBefore==0 ){\n    if( pTab->pFirstEntry==0 ){\n      pTab->pFirstEntry = pTab->pLastEntry = pNew;\n    }else{\n      assert( pTab->pLastEntry->pNext==0 );\n      pTab->pLastEntry->pNext = pNew;\n      pTab->pLastEntry = pNew;\n    }\n  }else{\n    ZipfileEntry **pp;\n    for(pp=&pTab->pFirstEntry; *pp!=pBefore; pp=&((*pp)->pNext));\n    pNew->pNext = pBefore;\n    *pp = pNew;\n  }\n}\n\nstatic int zipfileLoadDirectory(ZipfileTab *pTab, const u8 *aBlob, int nBlob){\n  ZipfileEOCD eocd;\n  int rc;\n  int i;\n  i64 iOff;\n\n  rc = zipfileReadEOCD(pTab, aBlob, nBlob, pTab->pWriteFd, &eocd);\n  iOff = eocd.iOffset;\n  for(i=0; rc==SQLITE_OK && i<eocd.nEntry; i++){\n    ZipfileEntry *pNew = 0;\n    rc = zipfileGetEntry(pTab, aBlob, nBlob, pTab->pWriteFd, iOff, &pNew);\n\n    if( rc==SQLITE_OK ){\n      zipfileAddEntry(pTab, 0, pNew);\n      iOff += ZIPFILE_CDS_FIXED_SZ;\n      iOff += (int)pNew->cds.nExtra + pNew->cds.nFile + pNew->cds.nComment;\n    }\n  }\n  return rc;\n}\n\n/*\n** xFilter callback.\n*/\nstatic int zipfileFilter(\n  sqlite3_vtab_cursor *cur, \n  int idxNum, const char *idxStr,\n  int argc, sqlite3_value **argv\n){\n  ZipfileTab *pTab = (ZipfileTab*)cur->pVtab;\n  ZipfileCsr *pCsr = (ZipfileCsr*)cur;\n  const char *zFile = 0;          /* Zip file to scan */\n  int rc = SQLITE_OK;             /* Return Code */\n  int bInMemory = 0;              /* True for an in-memory zipfile */\n\n  zipfileResetCursor(pCsr);\n\n  if( pTab->zFile ){\n    zFile = pTab->zFile;\n  }else if( idxNum==0 ){\n    zipfileCursorErr(pCsr, \"zipfile() function requires an argument\");\n    return SQLITE_ERROR;\n  }else if( sqlite3_value_type(argv[0])==SQLITE_BLOB ){\n    const u8 *aBlob = (const u8*)sqlite3_value_blob(argv[0]);\n    int nBlob = sqlite3_value_bytes(argv[0]);\n    assert( pTab->pFirstEntry==0 );\n    rc = zipfileLoadDirectory(pTab, aBlob, nBlob);\n    pCsr->pFreeEntry = pTab->pFirstEntry;\n    pTab->pFirstEntry = pTab->pLastEntry = 0;\n    if( rc!=SQLITE_OK ) return rc;\n    bInMemory = 1;\n  }else{\n    zFile = (const char*)sqlite3_value_text(argv[0]);\n  }\n\n  if( 0==pTab->pWriteFd && 0==bInMemory ){\n    pCsr->pFile = fopen(zFile, \"rb\");\n    if( pCsr->pFile==0 ){\n      zipfileCursorErr(pCsr, \"cannot open file: %s\", zFile);\n      rc = SQLITE_ERROR;\n    }else{\n      rc = zipfileReadEOCD(pTab, 0, 0, pCsr->pFile, &pCsr->eocd);\n      if( rc==SQLITE_OK ){\n        if( pCsr->eocd.nEntry==0 ){\n          pCsr->bEof = 1;\n        }else{\n          pCsr->iNextOff = pCsr->eocd.iOffset;\n          rc = zipfileNext(cur);\n        }\n      }\n    }\n  }else{\n    pCsr->bNoop = 1;\n    pCsr->pCurrent = pCsr->pFreeEntry ? pCsr->pFreeEntry : pTab->pFirstEntry;\n    rc = zipfileNext(cur);\n  }\n\n  return rc;\n}\n\n/*\n** xBestIndex callback.\n*/\nstatic int zipfileBestIndex(\n  sqlite3_vtab *tab,\n  sqlite3_index_info *pIdxInfo\n){\n  int i;\n  int idx = -1;\n  int unusable = 0;\n\n  for(i=0; i<pIdxInfo->nConstraint; i++){\n    const struct sqlite3_index_constraint *pCons = &pIdxInfo->aConstraint[i];\n    if( pCons->iColumn!=ZIPFILE_F_COLUMN_IDX ) continue;\n    if( pCons->usable==0 ){\n      unusable = 1;\n    }else if( pCons->op==SQLITE_INDEX_CONSTRAINT_EQ ){\n      idx = i;\n    }\n  }\n  if( idx>=0 ){\n    pIdxInfo->aConstraintUsage[idx].argvIndex = 1;\n    pIdxInfo->aConstraintUsage[idx].omit = 1;\n    pIdxInfo->estimatedCost = 1000.0;\n    pIdxInfo->idxNum = 1;\n  }else if( unusable ){\n    return SQLITE_CONSTRAINT;\n  }\n  return SQLITE_OK;\n}\n\nstatic ZipfileEntry *zipfileNewEntry(const char *zPath){\n  ZipfileEntry *pNew;\n  pNew = sqlite3_malloc(sizeof(ZipfileEntry));\n  if( pNew ){\n    memset(pNew, 0, sizeof(ZipfileEntry));\n    pNew->cds.zFile = sqlite3_mprintf(\"%s\", zPath);\n    if( pNew->cds.zFile==0 ){\n      sqlite3_free(pNew);\n      pNew = 0;\n    }\n  }\n  return pNew;\n}\n\nstatic int zipfileSerializeLFH(ZipfileEntry *pEntry, u8 *aBuf){\n  ZipfileCDS *pCds = &pEntry->cds;\n  u8 *a = aBuf;\n\n  pCds->nExtra = 9;\n\n  /* Write the LFH itself */\n  zipfileWrite32(a, ZIPFILE_SIGNATURE_LFH);\n  zipfileWrite16(a, pCds->iVersionExtract);\n  zipfileWrite16(a, pCds->flags);\n  zipfileWrite16(a, pCds->iCompression);\n  zipfileWrite16(a, pCds->mTime);\n  zipfileWrite16(a, pCds->mDate);\n  zipfileWrite32(a, pCds->crc32);\n  zipfileWrite32(a, pCds->szCompressed);\n  zipfileWrite32(a, pCds->szUncompressed);\n  zipfileWrite16(a, (u16)pCds->nFile);\n  zipfileWrite16(a, pCds->nExtra);\n  assert( a==&aBuf[ZIPFILE_LFH_FIXED_SZ] );\n\n  /* Add the file name */\n  memcpy(a, pCds->zFile, (int)pCds->nFile);\n  a += (int)pCds->nFile;\n\n  /* The \"extra\" data */\n  zipfileWrite16(a, ZIPFILE_EXTRA_TIMESTAMP);\n  zipfileWrite16(a, 5);\n  *a++ = 0x01;\n  zipfileWrite32(a, pEntry->mUnixTime);\n\n  return a-aBuf;\n}\n\nstatic int zipfileAppendEntry(\n  ZipfileTab *pTab,\n  ZipfileEntry *pEntry,\n  const u8 *pData,\n  int nData\n){\n  u8 *aBuf = pTab->aBuffer;\n  int nBuf;\n  int rc;\n\n  nBuf = zipfileSerializeLFH(pEntry, aBuf);\n  rc = zipfileAppendData(pTab, aBuf, nBuf);\n  if( rc==SQLITE_OK ){\n    pEntry->iDataOff = pTab->szCurrent;\n    rc = zipfileAppendData(pTab, pData, nData);\n  }\n\n  return rc;\n}\n\nstatic int zipfileGetMode(\n  sqlite3_value *pVal, \n  int bIsDir,                     /* If true, default to directory */\n  u32 *pMode,                     /* OUT: Mode value */\n  char **pzErr                    /* OUT: Error message */\n){\n  const char *z = (const char*)sqlite3_value_text(pVal);\n  u32 mode = 0;\n  if( z==0 ){\n    mode = (bIsDir ? (S_IFDIR + 0755) : (S_IFREG + 0644));\n  }else if( z[0]>='0' && z[0]<='9' ){\n    mode = (unsigned int)sqlite3_value_int(pVal);\n  }else{\n    const char zTemplate[11] = \"-rwxrwxrwx\";\n    int i;\n    if( strlen(z)!=10 ) goto parse_error;\n    switch( z[0] ){\n      case '-': mode |= S_IFREG; break;\n      case 'd': mode |= S_IFDIR; break;\n      case 'l': mode |= S_IFLNK; break;\n      default: goto parse_error;\n    }\n    for(i=1; i<10; i++){\n      if( z[i]==zTemplate[i] ) mode |= 1 << (9-i);\n      else if( z[i]!='-' ) goto parse_error;\n    }\n  }\n  if( ((mode & S_IFDIR)==0)==bIsDir ){\n    /* The \"mode\" attribute is a directory, but data has been specified.\n    ** Or vice-versa - no data but \"mode\" is a file or symlink.  */\n    *pzErr = sqlite3_mprintf(\"zipfile: mode does not match data\");\n    return SQLITE_CONSTRAINT;\n  }\n  *pMode = mode;\n  return SQLITE_OK;\n\n parse_error:\n  *pzErr = sqlite3_mprintf(\"zipfile: parse error in mode: %s\", z);\n  return SQLITE_ERROR;\n}\n\n/*\n** Both (const char*) arguments point to nul-terminated strings. Argument\n** nB is the value of strlen(zB). This function returns 0 if the strings are\n** identical, ignoring any trailing '/' character in either path.  */\nstatic int zipfileComparePath(const char *zA, const char *zB, int nB){\n  int nA = (int)strlen(zA);\n  if( zA[nA-1]=='/' ) nA--;\n  if( zB[nB-1]=='/' ) nB--;\n  if( nA==nB && memcmp(zA, zB, nA)==0 ) return 0;\n  return 1;\n}\n\nstatic int zipfileBegin(sqlite3_vtab *pVtab){\n  ZipfileTab *pTab = (ZipfileTab*)pVtab;\n  int rc = SQLITE_OK;\n\n  assert( pTab->pWriteFd==0 );\n\n  /* Open a write fd on the file. Also load the entire central directory\n  ** structure into memory. During the transaction any new file data is \n  ** appended to the archive file, but the central directory is accumulated\n  ** in main-memory until the transaction is committed.  */\n  pTab->pWriteFd = fopen(pTab->zFile, \"ab+\");\n  if( pTab->pWriteFd==0 ){\n    pTab->base.zErrMsg = sqlite3_mprintf(\n        \"zipfile: failed to open file %s for writing\", pTab->zFile\n        );\n    rc = SQLITE_ERROR;\n  }else{\n    fseek(pTab->pWriteFd, 0, SEEK_END);\n    pTab->szCurrent = pTab->szOrig = (i64)ftell(pTab->pWriteFd);\n    rc = zipfileLoadDirectory(pTab, 0, 0);\n  }\n\n  if( rc!=SQLITE_OK ){\n    zipfileCleanupTransaction(pTab);\n  }\n\n  return rc;\n}\n\n/*\n** Return the current time as a 32-bit timestamp in UNIX epoch format (like\n** time(2)).\n*/\nstatic u32 zipfileTime(void){\n  sqlite3_vfs *pVfs = sqlite3_vfs_find(0);\n  u32 ret;\n  if( pVfs->iVersion>=2 && pVfs->xCurrentTimeInt64 ){\n    i64 ms;\n    pVfs->xCurrentTimeInt64(pVfs, &ms);\n    ret = (u32)((ms/1000) - ((i64)24405875 * 8640));\n  }else{\n    double day;\n    pVfs->xCurrentTime(pVfs, &day);\n    ret = (u32)((day - 2440587.5) * 86400);\n  }\n  return ret;\n}\n\n/*\n** Return a 32-bit timestamp in UNIX epoch format.\n**\n** If the value passed as the only argument is either NULL or an SQL NULL,\n** return the current time. Otherwise, return the value stored in (*pVal)\n** cast to a 32-bit unsigned integer.\n*/\nstatic u32 zipfileGetTime(sqlite3_value *pVal){\n  if( pVal==0 || sqlite3_value_type(pVal)==SQLITE_NULL ){\n    return zipfileTime();\n  }\n  return (u32)sqlite3_value_int64(pVal);\n}\n\n/*\n** Unless it is NULL, entry pOld is currently part of the pTab->pFirstEntry\n** linked list.  Remove it from the list and free the object.\n*/\nstatic void zipfileRemoveEntryFromList(ZipfileTab *pTab, ZipfileEntry *pOld){\n  if( pOld ){\n    ZipfileEntry **pp;\n    for(pp=&pTab->pFirstEntry; (*pp)!=pOld; pp=&((*pp)->pNext));\n    *pp = (*pp)->pNext;\n    zipfileEntryFree(pOld);\n  }\n}\n\n/*\n** xUpdate method.\n*/\nstatic int zipfileUpdate(\n  sqlite3_vtab *pVtab, \n  int nVal, \n  sqlite3_value **apVal, \n  sqlite_int64 *pRowid\n){\n  ZipfileTab *pTab = (ZipfileTab*)pVtab;\n  int rc = SQLITE_OK;             /* Return Code */\n  ZipfileEntry *pNew = 0;         /* New in-memory CDS entry */\n\n  u32 mode = 0;                   /* Mode for new entry */\n  u32 mTime = 0;                  /* Modification time for new entry */\n  i64 sz = 0;                     /* Uncompressed size */\n  const char *zPath = 0;          /* Path for new entry */\n  int nPath = 0;                  /* strlen(zPath) */\n  const u8 *pData = 0;            /* Pointer to buffer containing content */\n  int nData = 0;                  /* Size of pData buffer in bytes */\n  int iMethod = 0;                /* Compression method for new entry */\n  u8 *pFree = 0;                  /* Free this */\n  char *zFree = 0;                /* Also free this */\n  ZipfileEntry *pOld = 0;\n  ZipfileEntry *pOld2 = 0;\n  int bUpdate = 0;                /* True for an update that modifies \"name\" */\n  int bIsDir = 0;\n  u32 iCrc32 = 0;\n\n  if( pTab->pWriteFd==0 ){\n    rc = zipfileBegin(pVtab);\n    if( rc!=SQLITE_OK ) return rc;\n  }\n\n  /* If this is a DELETE or UPDATE, find the archive entry to delete. */\n  if( sqlite3_value_type(apVal[0])!=SQLITE_NULL ){\n    const char *zDelete = (const char*)sqlite3_value_text(apVal[0]);\n    int nDelete = (int)strlen(zDelete);\n    if( nVal>1 ){\n      const char *zUpdate = (const char*)sqlite3_value_text(apVal[1]);\n      if( zUpdate && zipfileComparePath(zUpdate, zDelete, nDelete)!=0 ){\n        bUpdate = 1;\n      }\n    }\n    for(pOld=pTab->pFirstEntry; 1; pOld=pOld->pNext){\n      if( zipfileComparePath(pOld->cds.zFile, zDelete, nDelete)==0 ){\n        break;\n      }\n      assert( pOld->pNext );\n    }\n  }\n\n  if( nVal>1 ){\n    /* Check that \"sz\" and \"rawdata\" are both NULL: */\n    if( sqlite3_value_type(apVal[5])!=SQLITE_NULL ){\n      zipfileTableErr(pTab, \"sz must be NULL\");\n      rc = SQLITE_CONSTRAINT;\n    }\n    if( sqlite3_value_type(apVal[6])!=SQLITE_NULL ){\n      zipfileTableErr(pTab, \"rawdata must be NULL\"); \n      rc = SQLITE_CONSTRAINT;\n    }\n\n    if( rc==SQLITE_OK ){\n      if( sqlite3_value_type(apVal[7])==SQLITE_NULL ){\n        /* data=NULL. A directory */\n        bIsDir = 1;\n      }else{\n        /* Value specified for \"data\", and possibly \"method\". This must be\n        ** a regular file or a symlink. */\n        const u8 *aIn = sqlite3_value_blob(apVal[7]);\n        int nIn = sqlite3_value_bytes(apVal[7]);\n        int bAuto = sqlite3_value_type(apVal[8])==SQLITE_NULL;\n\n        iMethod = sqlite3_value_int(apVal[8]);\n        sz = nIn;\n        pData = aIn;\n        nData = nIn;\n        if( iMethod!=0 && iMethod!=8 ){\n          zipfileTableErr(pTab, \"unknown compression method: %d\", iMethod);\n          rc = SQLITE_CONSTRAINT;\n        }else{\n          if( bAuto || iMethod ){\n            int nCmp;\n            rc = zipfileDeflate(aIn, nIn, &pFree, &nCmp, &pTab->base.zErrMsg);\n            if( rc==SQLITE_OK ){\n              if( iMethod || nCmp<nIn ){\n                iMethod = 8;\n                pData = pFree;\n                nData = nCmp;\n              }\n            }\n          }\n          iCrc32 = crc32(0, aIn, nIn);\n        }\n      }\n    }\n\n    if( rc==SQLITE_OK ){\n      rc = zipfileGetMode(apVal[3], bIsDir, &mode, &pTab->base.zErrMsg);\n    }\n\n    if( rc==SQLITE_OK ){\n      zPath = (const char*)sqlite3_value_text(apVal[2]);\n      nPath = (int)strlen(zPath);\n      mTime = zipfileGetTime(apVal[4]);\n    }\n\n    if( rc==SQLITE_OK && bIsDir ){\n      /* For a directory, check that the last character in the path is a\n      ** '/'. This appears to be required for compatibility with info-zip\n      ** (the unzip command on unix). It does not create directories\n      ** otherwise.  */\n      if( zPath[nPath-1]!='/' ){\n        zFree = sqlite3_mprintf(\"%s/\", zPath);\n        if( zFree==0 ){ rc = SQLITE_NOMEM; }\n        zPath = (const char*)zFree;\n        nPath++;\n      }\n    }\n\n    /* Check that we're not inserting a duplicate entry -OR- updating an\n    ** entry with a path, thereby making it into a duplicate. */\n    if( (pOld==0 || bUpdate) && rc==SQLITE_OK ){\n      ZipfileEntry *p;\n      for(p=pTab->pFirstEntry; p; p=p->pNext){\n        if( zipfileComparePath(p->cds.zFile, zPath, nPath)==0 ){\n          switch( sqlite3_vtab_on_conflict(pTab->db) ){\n            case SQLITE_IGNORE: {\n              goto zipfile_update_done;\n            }\n            case SQLITE_REPLACE: {\n              pOld2 = p;\n              break;\n            }\n            default: {\n              zipfileTableErr(pTab, \"duplicate name: \\\"%s\\\"\", zPath);\n              rc = SQLITE_CONSTRAINT;\n              break;\n            }\n          }\n          break;\n        }\n      }\n    }\n\n    if( rc==SQLITE_OK ){\n      /* Create the new CDS record. */\n      pNew = zipfileNewEntry(zPath);\n      if( pNew==0 ){\n        rc = SQLITE_NOMEM;\n      }else{\n        pNew->cds.iVersionMadeBy = ZIPFILE_NEWENTRY_MADEBY;\n        pNew->cds.iVersionExtract = ZIPFILE_NEWENTRY_REQUIRED;\n        pNew->cds.flags = ZIPFILE_NEWENTRY_FLAGS;\n        pNew->cds.iCompression = (u16)iMethod;\n        zipfileMtimeToDos(&pNew->cds, mTime);\n        pNew->cds.crc32 = iCrc32;\n        pNew->cds.szCompressed = nData;\n        pNew->cds.szUncompressed = (u32)sz;\n        pNew->cds.iExternalAttr = (mode<<16);\n        pNew->cds.iOffset = (u32)pTab->szCurrent;\n        pNew->cds.nFile = (u16)nPath;\n        pNew->mUnixTime = (u32)mTime;\n        rc = zipfileAppendEntry(pTab, pNew, pData, nData);\n        zipfileAddEntry(pTab, pOld, pNew);\n      }\n    }\n  }\n\n  if( rc==SQLITE_OK && (pOld || pOld2) ){\n    ZipfileCsr *pCsr;\n    for(pCsr=pTab->pCsrList; pCsr; pCsr=pCsr->pCsrNext){\n      if( pCsr->pCurrent && (pCsr->pCurrent==pOld || pCsr->pCurrent==pOld2) ){\n        pCsr->pCurrent = pCsr->pCurrent->pNext;\n        pCsr->bNoop = 1;\n      }\n    }\n\n    zipfileRemoveEntryFromList(pTab, pOld);\n    zipfileRemoveEntryFromList(pTab, pOld2);\n  }\n\nzipfile_update_done:\n  sqlite3_free(pFree);\n  sqlite3_free(zFree);\n  return rc;\n}\n\nstatic int zipfileSerializeEOCD(ZipfileEOCD *p, u8 *aBuf){\n  u8 *a = aBuf;\n  zipfileWrite32(a, ZIPFILE_SIGNATURE_EOCD);\n  zipfileWrite16(a, p->iDisk);\n  zipfileWrite16(a, p->iFirstDisk);\n  zipfileWrite16(a, p->nEntry);\n  zipfileWrite16(a, p->nEntryTotal);\n  zipfileWrite32(a, p->nSize);\n  zipfileWrite32(a, p->iOffset);\n  zipfileWrite16(a, 0);        /* Size of trailing comment in bytes*/\n\n  return a-aBuf;\n}\n\nstatic int zipfileAppendEOCD(ZipfileTab *pTab, ZipfileEOCD *p){\n  int nBuf = zipfileSerializeEOCD(p, pTab->aBuffer);\n  assert( nBuf==ZIPFILE_EOCD_FIXED_SZ );\n  return zipfileAppendData(pTab, pTab->aBuffer, nBuf);\n}\n\n/*\n** Serialize the CDS structure into buffer aBuf[]. Return the number\n** of bytes written.\n*/\nstatic int zipfileSerializeCDS(ZipfileEntry *pEntry, u8 *aBuf){\n  u8 *a = aBuf;\n  ZipfileCDS *pCDS = &pEntry->cds;\n\n  if( pEntry->aExtra==0 ){\n    pCDS->nExtra = 9;\n  }\n\n  zipfileWrite32(a, ZIPFILE_SIGNATURE_CDS);\n  zipfileWrite16(a, pCDS->iVersionMadeBy);\n  zipfileWrite16(a, pCDS->iVersionExtract);\n  zipfileWrite16(a, pCDS->flags);\n  zipfileWrite16(a, pCDS->iCompression);\n  zipfileWrite16(a, pCDS->mTime);\n  zipfileWrite16(a, pCDS->mDate);\n  zipfileWrite32(a, pCDS->crc32);\n  zipfileWrite32(a, pCDS->szCompressed);\n  zipfileWrite32(a, pCDS->szUncompressed);\n  assert( a==&aBuf[ZIPFILE_CDS_NFILE_OFF] );\n  zipfileWrite16(a, pCDS->nFile);\n  zipfileWrite16(a, pCDS->nExtra);\n  zipfileWrite16(a, pCDS->nComment);\n  zipfileWrite16(a, pCDS->iDiskStart);\n  zipfileWrite16(a, pCDS->iInternalAttr);\n  zipfileWrite32(a, pCDS->iExternalAttr);\n  zipfileWrite32(a, pCDS->iOffset);\n\n  memcpy(a, pCDS->zFile, pCDS->nFile);\n  a += pCDS->nFile;\n\n  if( pEntry->aExtra ){\n    int n = (int)pCDS->nExtra + (int)pCDS->nComment;\n    memcpy(a, pEntry->aExtra, n);\n    a += n;\n  }else{\n    assert( pCDS->nExtra==9 );\n    zipfileWrite16(a, ZIPFILE_EXTRA_TIMESTAMP);\n    zipfileWrite16(a, 5);\n    *a++ = 0x01;\n    zipfileWrite32(a, pEntry->mUnixTime);\n  }\n\n  return a-aBuf;\n}\n\nstatic int zipfileCommit(sqlite3_vtab *pVtab){\n  ZipfileTab *pTab = (ZipfileTab*)pVtab;\n  int rc = SQLITE_OK;\n  if( pTab->pWriteFd ){\n    i64 iOffset = pTab->szCurrent;\n    ZipfileEntry *p;\n    ZipfileEOCD eocd;\n    int nEntry = 0;\n\n    /* Write out all entries */\n    for(p=pTab->pFirstEntry; rc==SQLITE_OK && p; p=p->pNext){\n      int n = zipfileSerializeCDS(p, pTab->aBuffer);\n      rc = zipfileAppendData(pTab, pTab->aBuffer, n);\n      nEntry++;\n    }\n\n    /* Write out the EOCD record */\n    eocd.iDisk = 0;\n    eocd.iFirstDisk = 0;\n    eocd.nEntry = (u16)nEntry;\n    eocd.nEntryTotal = (u16)nEntry;\n    eocd.nSize = (u32)(pTab->szCurrent - iOffset);\n    eocd.iOffset = (u32)iOffset;\n    rc = zipfileAppendEOCD(pTab, &eocd);\n\n    zipfileCleanupTransaction(pTab);\n  }\n  return rc;\n}\n\nstatic int zipfileRollback(sqlite3_vtab *pVtab){\n  return zipfileCommit(pVtab);\n}\n\nstatic ZipfileCsr *zipfileFindCursor(ZipfileTab *pTab, i64 iId){\n  ZipfileCsr *pCsr;\n  for(pCsr=pTab->pCsrList; pCsr; pCsr=pCsr->pCsrNext){\n    if( iId==pCsr->iId ) break;\n  }\n  return pCsr;\n}\n\nstatic void zipfileFunctionCds(\n  sqlite3_context *context,\n  int argc,\n  sqlite3_value **argv\n){\n  ZipfileCsr *pCsr;\n  ZipfileTab *pTab = (ZipfileTab*)sqlite3_user_data(context);\n  assert( argc>0 );\n\n  pCsr = zipfileFindCursor(pTab, sqlite3_value_int64(argv[0]));\n  if( pCsr ){\n    ZipfileCDS *p = &pCsr->pCurrent->cds;\n    char *zRes = sqlite3_mprintf(\"{\"\n        \"\\\"version-made-by\\\" : %u, \"\n        \"\\\"version-to-extract\\\" : %u, \"\n        \"\\\"flags\\\" : %u, \"\n        \"\\\"compression\\\" : %u, \"\n        \"\\\"time\\\" : %u, \"\n        \"\\\"date\\\" : %u, \"\n        \"\\\"crc32\\\" : %u, \"\n        \"\\\"compressed-size\\\" : %u, \"\n        \"\\\"uncompressed-size\\\" : %u, \"\n        \"\\\"file-name-length\\\" : %u, \"\n        \"\\\"extra-field-length\\\" : %u, \"\n        \"\\\"file-comment-length\\\" : %u, \"\n        \"\\\"disk-number-start\\\" : %u, \"\n        \"\\\"internal-attr\\\" : %u, \"\n        \"\\\"external-attr\\\" : %u, \"\n        \"\\\"offset\\\" : %u }\",\n        (u32)p->iVersionMadeBy, (u32)p->iVersionExtract,\n        (u32)p->flags, (u32)p->iCompression,\n        (u32)p->mTime, (u32)p->mDate,\n        (u32)p->crc32, (u32)p->szCompressed,\n        (u32)p->szUncompressed, (u32)p->nFile,\n        (u32)p->nExtra, (u32)p->nComment,\n        (u32)p->iDiskStart, (u32)p->iInternalAttr,\n        (u32)p->iExternalAttr, (u32)p->iOffset\n    );\n\n    if( zRes==0 ){\n      sqlite3_result_error_nomem(context);\n    }else{\n      sqlite3_result_text(context, zRes, -1, SQLITE_TRANSIENT);\n      sqlite3_free(zRes);\n    }\n  }\n}\n\n/*\n** xFindFunction method.\n*/\nstatic int zipfileFindFunction(\n  sqlite3_vtab *pVtab,            /* Virtual table handle */\n  int nArg,                       /* Number of SQL function arguments */\n  const char *zName,              /* Name of SQL function */\n  void (**pxFunc)(sqlite3_context*,int,sqlite3_value**), /* OUT: Result */\n  void **ppArg                    /* OUT: User data for *pxFunc */\n){\n  if( sqlite3_stricmp(\"zipfile_cds\", zName)==0 ){\n    *pxFunc = zipfileFunctionCds;\n    *ppArg = (void*)pVtab;\n    return 1;\n  }\n  return 0;\n}\n\ntypedef struct ZipfileBuffer ZipfileBuffer;\nstruct ZipfileBuffer {\n  u8 *a;                          /* Pointer to buffer */\n  int n;                          /* Size of buffer in bytes */\n  int nAlloc;                     /* Byte allocated at a[] */\n};\n\ntypedef struct ZipfileCtx ZipfileCtx;\nstruct ZipfileCtx {\n  int nEntry;\n  ZipfileBuffer body;\n  ZipfileBuffer cds;\n};\n\nstatic int zipfileBufferGrow(ZipfileBuffer *pBuf, int nByte){\n  if( pBuf->n+nByte>pBuf->nAlloc ){\n    u8 *aNew;\n    sqlite3_int64 nNew = pBuf->n ? pBuf->n*2 : 512;\n    int nReq = pBuf->n + nByte;\n\n    while( nNew<nReq ) nNew = nNew*2;\n    aNew = sqlite3_realloc64(pBuf->a, nNew);\n    if( aNew==0 ) return SQLITE_NOMEM;\n    pBuf->a = aNew;\n    pBuf->nAlloc = (int)nNew;\n  }\n  return SQLITE_OK;\n}\n\n/*\n** xStep() callback for the zipfile() aggregate. This can be called in\n** any of the following ways:\n**\n**   SELECT zipfile(name,data) ...\n**   SELECT zipfile(name,mode,mtime,data) ...\n**   SELECT zipfile(name,mode,mtime,data,method) ...\n*/\nvoid zipfileStep(sqlite3_context *pCtx, int nVal, sqlite3_value **apVal){\n  ZipfileCtx *p;                  /* Aggregate function context */\n  ZipfileEntry e;                 /* New entry to add to zip archive */\n\n  sqlite3_value *pName = 0;\n  sqlite3_value *pMode = 0;\n  sqlite3_value *pMtime = 0;\n  sqlite3_value *pData = 0;\n  sqlite3_value *pMethod = 0;\n\n  int bIsDir = 0;\n  u32 mode;\n  int rc = SQLITE_OK;\n  char *zErr = 0;\n\n  int iMethod = -1;               /* Compression method to use (0 or 8) */\n\n  const u8 *aData = 0;            /* Possibly compressed data for new entry */\n  int nData = 0;                  /* Size of aData[] in bytes */\n  int szUncompressed = 0;         /* Size of data before compression */\n  u8 *aFree = 0;                  /* Free this before returning */\n  u32 iCrc32 = 0;                 /* crc32 of uncompressed data */\n\n  char *zName = 0;                /* Path (name) of new entry */\n  int nName = 0;                  /* Size of zName in bytes */\n  char *zFree = 0;                /* Free this before returning */\n  int nByte;\n\n  memset(&e, 0, sizeof(e));\n  p = (ZipfileCtx*)sqlite3_aggregate_context(pCtx, sizeof(ZipfileCtx));\n  if( p==0 ) return;\n\n  /* Martial the arguments into stack variables */\n  if( nVal!=2 && nVal!=4 && nVal!=5 ){\n    zErr = sqlite3_mprintf(\"wrong number of arguments to function zipfile()\");\n    rc = SQLITE_ERROR;\n    goto zipfile_step_out;\n  }\n  pName = apVal[0];\n  if( nVal==2 ){\n    pData = apVal[1];\n  }else{\n    pMode = apVal[1];\n    pMtime = apVal[2];\n    pData = apVal[3];\n    if( nVal==5 ){\n      pMethod = apVal[4];\n    }\n  }\n\n  /* Check that the 'name' parameter looks ok. */\n  zName = (char*)sqlite3_value_text(pName);\n  nName = sqlite3_value_bytes(pName);\n  if( zName==0 ){\n    zErr = sqlite3_mprintf(\"first argument to zipfile() must be non-NULL\");\n    rc = SQLITE_ERROR;\n    goto zipfile_step_out;\n  }\n\n  /* Inspect the 'method' parameter. This must be either 0 (store), 8 (use\n  ** deflate compression) or NULL (choose automatically).  */\n  if( pMethod && SQLITE_NULL!=sqlite3_value_type(pMethod) ){\n    iMethod = (int)sqlite3_value_int64(pMethod);\n    if( iMethod!=0 && iMethod!=8 ){\n      zErr = sqlite3_mprintf(\"illegal method value: %d\", iMethod);\n      rc = SQLITE_ERROR;\n      goto zipfile_step_out;\n    }\n  }\n\n  /* Now inspect the data. If this is NULL, then the new entry must be a\n  ** directory.  Otherwise, figure out whether or not the data should\n  ** be deflated or simply stored in the zip archive. */\n  if( sqlite3_value_type(pData)==SQLITE_NULL ){\n    bIsDir = 1;\n    iMethod = 0;\n  }else{\n    aData = sqlite3_value_blob(pData);\n    szUncompressed = nData = sqlite3_value_bytes(pData);\n    iCrc32 = crc32(0, aData, nData);\n    if( iMethod<0 || iMethod==8 ){\n      int nOut = 0;\n      rc = zipfileDeflate(aData, nData, &aFree, &nOut, &zErr);\n      if( rc!=SQLITE_OK ){\n        goto zipfile_step_out;\n      }\n      if( iMethod==8 || nOut<nData ){\n        aData = aFree;\n        nData = nOut;\n        iMethod = 8;\n      }else{\n        iMethod = 0;\n      }\n    }\n  }\n\n  /* Decode the \"mode\" argument. */\n  rc = zipfileGetMode(pMode, bIsDir, &mode, &zErr);\n  if( rc ) goto zipfile_step_out;\n\n  /* Decode the \"mtime\" argument. */\n  e.mUnixTime = zipfileGetTime(pMtime);\n\n  /* If this is a directory entry, ensure that there is exactly one '/'\n  ** at the end of the path. Or, if this is not a directory and the path\n  ** ends in '/' it is an error. */\n  if( bIsDir==0 ){\n    if( zName[nName-1]=='/' ){\n      zErr = sqlite3_mprintf(\"non-directory name must not end with /\");\n      rc = SQLITE_ERROR;\n      goto zipfile_step_out;\n    }\n  }else{\n    if( zName[nName-1]!='/' ){\n      zName = zFree = sqlite3_mprintf(\"%s/\", zName);\n      nName++;\n      if( zName==0 ){\n        rc = SQLITE_NOMEM;\n        goto zipfile_step_out;\n      }\n    }else{\n      while( nName>1 && zName[nName-2]=='/' ) nName--;\n    }\n  }\n\n  /* Assemble the ZipfileEntry object for the new zip archive entry */\n  e.cds.iVersionMadeBy = ZIPFILE_NEWENTRY_MADEBY;\n  e.cds.iVersionExtract = ZIPFILE_NEWENTRY_REQUIRED;\n  e.cds.flags = ZIPFILE_NEWENTRY_FLAGS;\n  e.cds.iCompression = (u16)iMethod;\n  zipfileMtimeToDos(&e.cds, (u32)e.mUnixTime);\n  e.cds.crc32 = iCrc32;\n  e.cds.szCompressed = nData;\n  e.cds.szUncompressed = szUncompressed;\n  e.cds.iExternalAttr = (mode<<16);\n  e.cds.iOffset = p->body.n;\n  e.cds.nFile = (u16)nName;\n  e.cds.zFile = zName;\n\n  /* Append the LFH to the body of the new archive */\n  nByte = ZIPFILE_LFH_FIXED_SZ + e.cds.nFile + 9;\n  if( (rc = zipfileBufferGrow(&p->body, nByte)) ) goto zipfile_step_out;\n  p->body.n += zipfileSerializeLFH(&e, &p->body.a[p->body.n]);\n\n  /* Append the data to the body of the new archive */\n  if( nData>0 ){\n    if( (rc = zipfileBufferGrow(&p->body, nData)) ) goto zipfile_step_out;\n    memcpy(&p->body.a[p->body.n], aData, nData);\n    p->body.n += nData;\n  }\n\n  /* Append the CDS record to the directory of the new archive */\n  nByte = ZIPFILE_CDS_FIXED_SZ + e.cds.nFile + 9;\n  if( (rc = zipfileBufferGrow(&p->cds, nByte)) ) goto zipfile_step_out;\n  p->cds.n += zipfileSerializeCDS(&e, &p->cds.a[p->cds.n]);\n\n  /* Increment the count of entries in the archive */\n  p->nEntry++;\n\n zipfile_step_out:\n  sqlite3_free(aFree);\n  sqlite3_free(zFree);\n  if( rc ){\n    if( zErr ){\n      sqlite3_result_error(pCtx, zErr, -1);\n    }else{\n      sqlite3_result_error_code(pCtx, rc);\n    }\n  }\n  sqlite3_free(zErr);\n}\n\n/*\n** xFinalize() callback for zipfile aggregate function.\n*/\nvoid zipfileFinal(sqlite3_context *pCtx){\n  ZipfileCtx *p;\n  ZipfileEOCD eocd;\n  sqlite3_int64 nZip;\n  u8 *aZip;\n\n  p = (ZipfileCtx*)sqlite3_aggregate_context(pCtx, sizeof(ZipfileCtx));\n  if( p==0 ) return;\n  if( p->nEntry>0 ){\n    memset(&eocd, 0, sizeof(eocd));\n    eocd.nEntry = (u16)p->nEntry;\n    eocd.nEntryTotal = (u16)p->nEntry;\n    eocd.nSize = p->cds.n;\n    eocd.iOffset = p->body.n;\n\n    nZip = p->body.n + p->cds.n + ZIPFILE_EOCD_FIXED_SZ;\n    aZip = (u8*)sqlite3_malloc64(nZip);\n    if( aZip==0 ){\n      sqlite3_result_error_nomem(pCtx);\n    }else{\n      memcpy(aZip, p->body.a, p->body.n);\n      memcpy(&aZip[p->body.n], p->cds.a, p->cds.n);\n      zipfileSerializeEOCD(&eocd, &aZip[p->body.n + p->cds.n]);\n      sqlite3_result_blob(pCtx, aZip, (int)nZip, zipfileFree);\n    }\n  }\n\n  sqlite3_free(p->body.a);\n  sqlite3_free(p->cds.a);\n}\n\n\n/*\n** Register the \"zipfile\" virtual table.\n*/\nstatic int zipfileRegister(sqlite3 *db){\n  static sqlite3_module zipfileModule = {\n    1,                         /* iVersion */\n    zipfileConnect,            /* xCreate */\n    zipfileConnect,            /* xConnect */\n    zipfileBestIndex,          /* xBestIndex */\n    zipfileDisconnect,         /* xDisconnect */\n    zipfileDisconnect,         /* xDestroy */\n    zipfileOpen,               /* xOpen - open a cursor */\n    zipfileClose,              /* xClose - close a cursor */\n    zipfileFilter,             /* xFilter - configure scan constraints */\n    zipfileNext,               /* xNext - advance a cursor */\n    zipfileEof,                /* xEof - check for end of scan */\n    zipfileColumn,             /* xColumn - read data */\n    0,                         /* xRowid - read data */\n    zipfileUpdate,             /* xUpdate */\n    zipfileBegin,              /* xBegin */\n    0,                         /* xSync */\n    zipfileCommit,             /* xCommit */\n    zipfileRollback,           /* xRollback */\n    zipfileFindFunction,       /* xFindMethod */\n    0,                         /* xRename */\n  };\n\n  int rc = sqlite3_create_module(db, \"zipfile\"  , &zipfileModule, 0);\n  if( rc==SQLITE_OK ) rc = sqlite3_overload_function(db, \"zipfile_cds\", -1);\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_create_function(db, \"zipfile\", -1, SQLITE_UTF8, 0, 0, \n        zipfileStep, zipfileFinal\n    );\n  }\n  return rc;\n}\n#else         /* SQLITE_OMIT_VIRTUALTABLE */\n# define zipfileRegister(x) SQLITE_OK\n#endif\n\n#ifdef _WIN32\n\n#endif\nint sqlite3_zipfile_init(\n  sqlite3 *db, \n  char **pzErrMsg, \n  const sqlite3_api_routines *pApi\n){\n  SQLITE_EXTENSION_INIT2(pApi);\n  (void)pzErrMsg;  /* Unused parameter */\n  return zipfileRegister(db);\n}\n\n/************************* End ../ext/misc/zipfile.c ********************/\n/************************* Begin ../ext/misc/sqlar.c ******************/\n/*\n** 2017-12-17\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n******************************************************************************\n**\n** Utility functions sqlar_compress() and sqlar_uncompress(). Useful\n** for working with sqlar archives and used by the shell tool's built-in\n** sqlar support.\n*/\nSQLITE_EXTENSION_INIT1\n#include <zlib.h>\n\n/*\n** Implementation of the \"sqlar_compress(X)\" SQL function.\n**\n** If the type of X is SQLITE_BLOB, and compressing that blob using\n** zlib utility function compress() yields a smaller blob, return the\n** compressed blob. Otherwise, return a copy of X.\n**\n** SQLar uses the \"zlib format\" for compressed content.  The zlib format\n** contains a two-byte identification header and a four-byte checksum at\n** the end.  This is different from ZIP which uses the raw deflate format.\n**\n** Future enhancements to SQLar might add support for new compression formats.\n** If so, those new formats will be identified by alternative headers in the\n** compressed data.\n*/\nstatic void sqlarCompressFunc(\n  sqlite3_context *context,\n  int argc,\n  sqlite3_value **argv\n){\n  assert( argc==1 );\n  if( sqlite3_value_type(argv[0])==SQLITE_BLOB ){\n    const Bytef *pData = sqlite3_value_blob(argv[0]);\n    uLong nData = sqlite3_value_bytes(argv[0]);\n    uLongf nOut = compressBound(nData);\n    Bytef *pOut;\n\n    pOut = (Bytef*)sqlite3_malloc(nOut);\n    if( pOut==0 ){\n      sqlite3_result_error_nomem(context);\n      return;\n    }else{\n      if( Z_OK!=compress(pOut, &nOut, pData, nData) ){\n        sqlite3_result_error(context, \"error in compress()\", -1);\n      }else if( nOut<nData ){\n        sqlite3_result_blob(context, pOut, nOut, SQLITE_TRANSIENT);\n      }else{\n        sqlite3_result_value(context, argv[0]);\n      }\n      sqlite3_free(pOut);\n    }\n  }else{\n    sqlite3_result_value(context, argv[0]);\n  }\n}\n\n/*\n** Implementation of the \"sqlar_uncompress(X,SZ)\" SQL function\n**\n** Parameter SZ is interpreted as an integer. If it is less than or\n** equal to zero, then this function returns a copy of X. Or, if\n** SZ is equal to the size of X when interpreted as a blob, also\n** return a copy of X. Otherwise, decompress blob X using zlib\n** utility function uncompress() and return the results (another\n** blob).\n*/\nstatic void sqlarUncompressFunc(\n  sqlite3_context *context,\n  int argc,\n  sqlite3_value **argv\n){\n  uLong nData;\n  uLongf sz;\n\n  assert( argc==2 );\n  sz = sqlite3_value_int(argv[1]);\n\n  if( sz<=0 || sz==(nData = sqlite3_value_bytes(argv[0])) ){\n    sqlite3_result_value(context, argv[0]);\n  }else{\n    const Bytef *pData= sqlite3_value_blob(argv[0]);\n    Bytef *pOut = sqlite3_malloc(sz);\n    if( Z_OK!=uncompress(pOut, &sz, pData, nData) ){\n      sqlite3_result_error(context, \"error in uncompress()\", -1);\n    }else{\n      sqlite3_result_blob(context, pOut, sz, SQLITE_TRANSIENT);\n    }\n    sqlite3_free(pOut);\n  }\n}\n\n\n#ifdef _WIN32\n\n#endif\nint sqlite3_sqlar_init(\n  sqlite3 *db, \n  char **pzErrMsg, \n  const sqlite3_api_routines *pApi\n){\n  int rc = SQLITE_OK;\n  SQLITE_EXTENSION_INIT2(pApi);\n  (void)pzErrMsg;  /* Unused parameter */\n  rc = sqlite3_create_function(db, \"sqlar_compress\", 1, SQLITE_UTF8, 0,\n                               sqlarCompressFunc, 0, 0);\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_create_function(db, \"sqlar_uncompress\", 2, SQLITE_UTF8, 0,\n                                 sqlarUncompressFunc, 0, 0);\n  }\n  return rc;\n}\n\n/************************* End ../ext/misc/sqlar.c ********************/\n#endif\n/************************* Begin ../ext/expert/sqlite3expert.h ******************/\n/*\n** 2017 April 07\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n*************************************************************************\n*/\n\n\n\ntypedef struct sqlite3expert sqlite3expert;\n\n/*\n** Create a new sqlite3expert object.\n**\n** If successful, a pointer to the new object is returned and (*pzErr) set\n** to NULL. Or, if an error occurs, NULL is returned and (*pzErr) set to\n** an English-language error message. In this case it is the responsibility\n** of the caller to eventually free the error message buffer using\n** sqlite3_free().\n*/\nsqlite3expert *sqlite3_expert_new(sqlite3 *db, char **pzErr);\n\n/*\n** Configure an sqlite3expert object.\n**\n** EXPERT_CONFIG_SAMPLE:\n**   By default, sqlite3_expert_analyze() generates sqlite_stat1 data for\n**   each candidate index. This involves scanning and sorting the entire\n**   contents of each user database table once for each candidate index\n**   associated with the table. For large databases, this can be \n**   prohibitively slow. This option allows the sqlite3expert object to\n**   be configured so that sqlite_stat1 data is instead generated based on a\n**   subset of each table, or so that no sqlite_stat1 data is used at all.\n**\n**   A single integer argument is passed to this option. If the value is less\n**   than or equal to zero, then no sqlite_stat1 data is generated or used by\n**   the analysis - indexes are recommended based on the database schema only.\n**   Or, if the value is 100 or greater, complete sqlite_stat1 data is\n**   generated for each candidate index (this is the default). Finally, if the\n**   value falls between 0 and 100, then it represents the percentage of user\n**   table rows that should be considered when generating sqlite_stat1 data.\n**\n**   Examples:\n**\n**     // Do not generate any sqlite_stat1 data\n**     sqlite3_expert_config(pExpert, EXPERT_CONFIG_SAMPLE, 0);\n**\n**     // Generate sqlite_stat1 data based on 10% of the rows in each table.\n**     sqlite3_expert_config(pExpert, EXPERT_CONFIG_SAMPLE, 10);\n*/\nint sqlite3_expert_config(sqlite3expert *p, int op, ...);\n\n#define EXPERT_CONFIG_SAMPLE 1    /* int */\n\n/*\n** Specify zero or more SQL statements to be included in the analysis.\n**\n** Buffer zSql must contain zero or more complete SQL statements. This\n** function parses all statements contained in the buffer and adds them\n** to the internal list of statements to analyze. If successful, SQLITE_OK\n** is returned and (*pzErr) set to NULL. Or, if an error occurs - for example\n** due to a error in the SQL - an SQLite error code is returned and (*pzErr)\n** may be set to point to an English language error message. In this case\n** the caller is responsible for eventually freeing the error message buffer\n** using sqlite3_free().\n**\n** If an error does occur while processing one of the statements in the\n** buffer passed as the second argument, none of the statements in the\n** buffer are added to the analysis.\n**\n** This function must be called before sqlite3_expert_analyze(). If a call\n** to this function is made on an sqlite3expert object that has already\n** been passed to sqlite3_expert_analyze() SQLITE_MISUSE is returned\n** immediately and no statements are added to the analysis.\n*/\nint sqlite3_expert_sql(\n  sqlite3expert *p,               /* From a successful sqlite3_expert_new() */\n  const char *zSql,               /* SQL statement(s) to add */\n  char **pzErr                    /* OUT: Error message (if any) */\n);\n\n\n/*\n** This function is called after the sqlite3expert object has been configured\n** with all SQL statements using sqlite3_expert_sql() to actually perform\n** the analysis. Once this function has been called, it is not possible to\n** add further SQL statements to the analysis.\n**\n** If successful, SQLITE_OK is returned and (*pzErr) is set to NULL. Or, if\n** an error occurs, an SQLite error code is returned and (*pzErr) set to \n** point to a buffer containing an English language error message. In this\n** case it is the responsibility of the caller to eventually free the buffer\n** using sqlite3_free().\n**\n** If an error does occur within this function, the sqlite3expert object\n** is no longer useful for any purpose. At that point it is no longer\n** possible to add further SQL statements to the object or to re-attempt\n** the analysis. The sqlite3expert object must still be freed using a call\n** sqlite3_expert_destroy().\n*/\nint sqlite3_expert_analyze(sqlite3expert *p, char **pzErr);\n\n/*\n** Return the total number of statements loaded using sqlite3_expert_sql().\n** The total number of SQL statements may be different from the total number\n** to calls to sqlite3_expert_sql().\n*/\nint sqlite3_expert_count(sqlite3expert*);\n\n/*\n** Return a component of the report.\n**\n** This function is called after sqlite3_expert_analyze() to extract the\n** results of the analysis. Each call to this function returns either a\n** NULL pointer or a pointer to a buffer containing a nul-terminated string.\n** The value passed as the third argument must be one of the EXPERT_REPORT_*\n** #define constants defined below.\n**\n** For some EXPERT_REPORT_* parameters, the buffer returned contains \n** information relating to a specific SQL statement. In these cases that\n** SQL statement is identified by the value passed as the second argument.\n** SQL statements are numbered from 0 in the order in which they are parsed.\n** If an out-of-range value (less than zero or equal to or greater than the\n** value returned by sqlite3_expert_count()) is passed as the second argument\n** along with such an EXPERT_REPORT_* parameter, NULL is always returned.\n**\n** EXPERT_REPORT_SQL:\n**   Return the text of SQL statement iStmt.\n**\n** EXPERT_REPORT_INDEXES:\n**   Return a buffer containing the CREATE INDEX statements for all recommended\n**   indexes for statement iStmt. If there are no new recommeded indexes, NULL \n**   is returned.\n**\n** EXPERT_REPORT_PLAN:\n**   Return a buffer containing the EXPLAIN QUERY PLAN output for SQL query\n**   iStmt after the proposed indexes have been added to the database schema.\n**\n** EXPERT_REPORT_CANDIDATES:\n**   Return a pointer to a buffer containing the CREATE INDEX statements \n**   for all indexes that were tested (for all SQL statements). The iStmt\n**   parameter is ignored for EXPERT_REPORT_CANDIDATES calls.\n*/\nconst char *sqlite3_expert_report(sqlite3expert*, int iStmt, int eReport);\n\n/*\n** Values for the third argument passed to sqlite3_expert_report().\n*/\n#define EXPERT_REPORT_SQL        1\n#define EXPERT_REPORT_INDEXES    2\n#define EXPERT_REPORT_PLAN       3\n#define EXPERT_REPORT_CANDIDATES 4\n\n/*\n** Free an (sqlite3expert*) handle and all associated resources. There \n** should be one call to this function for each successful call to \n** sqlite3-expert_new().\n*/\nvoid sqlite3_expert_destroy(sqlite3expert*);\n\n\n\n/************************* End ../ext/expert/sqlite3expert.h ********************/\n/************************* Begin ../ext/expert/sqlite3expert.c ******************/\n/*\n** 2017 April 09\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n*************************************************************************\n*/\n#include <assert.h>\n#include <string.h>\n#include <stdio.h>\n\n#ifndef SQLITE_OMIT_VIRTUALTABLE \n\n/* typedef sqlite3_int64 i64; */\n/* typedef sqlite3_uint64 u64; */\n\ntypedef struct IdxColumn IdxColumn;\ntypedef struct IdxConstraint IdxConstraint;\ntypedef struct IdxScan IdxScan;\ntypedef struct IdxStatement IdxStatement;\ntypedef struct IdxTable IdxTable;\ntypedef struct IdxWrite IdxWrite;\n\n#define STRLEN  (int)strlen\n\n/*\n** A temp table name that we assume no user database will actually use.\n** If this assumption proves incorrect triggers on the table with the\n** conflicting name will be ignored.\n*/\n#define UNIQUE_TABLE_NAME \"t592690916721053953805701627921227776\"\n\n/*\n** A single constraint. Equivalent to either \"col = ?\" or \"col < ?\" (or\n** any other type of single-ended range constraint on a column).\n**\n** pLink:\n**   Used to temporarily link IdxConstraint objects into lists while\n**   creating candidate indexes.\n*/\nstruct IdxConstraint {\n  char *zColl;                    /* Collation sequence */\n  int bRange;                     /* True for range, false for eq */\n  int iCol;                       /* Constrained table column */\n  int bFlag;                      /* Used by idxFindCompatible() */\n  int bDesc;                      /* True if ORDER BY <expr> DESC */\n  IdxConstraint *pNext;           /* Next constraint in pEq or pRange list */\n  IdxConstraint *pLink;           /* See above */\n};\n\n/*\n** A single scan of a single table.\n*/\nstruct IdxScan {\n  IdxTable *pTab;                 /* Associated table object */\n  int iDb;                        /* Database containing table zTable */\n  i64 covering;                   /* Mask of columns required for cov. index */\n  IdxConstraint *pOrder;          /* ORDER BY columns */\n  IdxConstraint *pEq;             /* List of == constraints */\n  IdxConstraint *pRange;          /* List of < constraints */\n  IdxScan *pNextScan;             /* Next IdxScan object for same analysis */\n};\n\n/*\n** Information regarding a single database table. Extracted from \n** \"PRAGMA table_info\" by function idxGetTableInfo().\n*/\nstruct IdxColumn {\n  char *zName;\n  char *zColl;\n  int iPk;\n};\nstruct IdxTable {\n  int nCol;\n  char *zName;                    /* Table name */\n  IdxColumn *aCol;\n  IdxTable *pNext;                /* Next table in linked list of all tables */\n};\n\n/*\n** An object of the following type is created for each unique table/write-op\n** seen. The objects are stored in a singly-linked list beginning at\n** sqlite3expert.pWrite.\n*/\nstruct IdxWrite {\n  IdxTable *pTab;\n  int eOp;                        /* SQLITE_UPDATE, DELETE or INSERT */\n  IdxWrite *pNext;\n};\n\n/*\n** Each statement being analyzed is represented by an instance of this\n** structure.\n*/\nstruct IdxStatement {\n  int iId;                        /* Statement number */\n  char *zSql;                     /* SQL statement */\n  char *zIdx;                     /* Indexes */\n  char *zEQP;                     /* Plan */\n  IdxStatement *pNext;\n};\n\n\n/*\n** A hash table for storing strings. With space for a payload string\n** with each entry. Methods are:\n**\n**   idxHashInit()\n**   idxHashClear()\n**   idxHashAdd()\n**   idxHashSearch()\n*/\n#define IDX_HASH_SIZE 1023\ntypedef struct IdxHashEntry IdxHashEntry;\ntypedef struct IdxHash IdxHash;\nstruct IdxHashEntry {\n  char *zKey;                     /* nul-terminated key */\n  char *zVal;                     /* nul-terminated value string */\n  char *zVal2;                    /* nul-terminated value string 2 */\n  IdxHashEntry *pHashNext;        /* Next entry in same hash bucket */\n  IdxHashEntry *pNext;            /* Next entry in hash */\n};\nstruct IdxHash {\n  IdxHashEntry *pFirst;\n  IdxHashEntry *aHash[IDX_HASH_SIZE];\n};\n\n/*\n** sqlite3expert object.\n*/\nstruct sqlite3expert {\n  int iSample;                    /* Percentage of tables to sample for stat1 */\n  sqlite3 *db;                    /* User database */\n  sqlite3 *dbm;                   /* In-memory db for this analysis */\n  sqlite3 *dbv;                   /* Vtab schema for this analysis */\n  IdxTable *pTable;               /* List of all IdxTable objects */\n  IdxScan *pScan;                 /* List of scan objects */\n  IdxWrite *pWrite;               /* List of write objects */\n  IdxStatement *pStatement;       /* List of IdxStatement objects */\n  int bRun;                       /* True once analysis has run */\n  char **pzErrmsg;\n  int rc;                         /* Error code from whereinfo hook */\n  IdxHash hIdx;                   /* Hash containing all candidate indexes */\n  char *zCandidates;              /* For EXPERT_REPORT_CANDIDATES */\n};\n\n\n/*\n** Allocate and return nByte bytes of zeroed memory using sqlite3_malloc(). \n** If the allocation fails, set *pRc to SQLITE_NOMEM and return NULL.\n*/\nstatic void *idxMalloc(int *pRc, int nByte){\n  void *pRet;\n  assert( *pRc==SQLITE_OK );\n  assert( nByte>0 );\n  pRet = sqlite3_malloc(nByte);\n  if( pRet ){\n    memset(pRet, 0, nByte);\n  }else{\n    *pRc = SQLITE_NOMEM;\n  }\n  return pRet;\n}\n\n/*\n** Initialize an IdxHash hash table.\n*/\nstatic void idxHashInit(IdxHash *pHash){\n  memset(pHash, 0, sizeof(IdxHash));\n}\n\n/*\n** Reset an IdxHash hash table.\n*/\nstatic void idxHashClear(IdxHash *pHash){\n  int i;\n  for(i=0; i<IDX_HASH_SIZE; i++){\n    IdxHashEntry *pEntry;\n    IdxHashEntry *pNext;\n    for(pEntry=pHash->aHash[i]; pEntry; pEntry=pNext){\n      pNext = pEntry->pHashNext;\n      sqlite3_free(pEntry->zVal2);\n      sqlite3_free(pEntry);\n    }\n  }\n  memset(pHash, 0, sizeof(IdxHash));\n}\n\n/*\n** Return the index of the hash bucket that the string specified by the\n** arguments to this function belongs.\n*/\nstatic int idxHashString(const char *z, int n){\n  unsigned int ret = 0;\n  int i;\n  for(i=0; i<n; i++){\n    ret += (ret<<3) + (unsigned char)(z[i]);\n  }\n  return (int)(ret % IDX_HASH_SIZE);\n}\n\n/*\n** If zKey is already present in the hash table, return non-zero and do\n** nothing. Otherwise, add an entry with key zKey and payload string zVal to\n** the hash table passed as the second argument. \n*/\nstatic int idxHashAdd(\n  int *pRc, \n  IdxHash *pHash, \n  const char *zKey,\n  const char *zVal\n){\n  int nKey = STRLEN(zKey);\n  int iHash = idxHashString(zKey, nKey);\n  int nVal = (zVal ? STRLEN(zVal) : 0);\n  IdxHashEntry *pEntry;\n  assert( iHash>=0 );\n  for(pEntry=pHash->aHash[iHash]; pEntry; pEntry=pEntry->pHashNext){\n    if( STRLEN(pEntry->zKey)==nKey && 0==memcmp(pEntry->zKey, zKey, nKey) ){\n      return 1;\n    }\n  }\n  pEntry = idxMalloc(pRc, sizeof(IdxHashEntry) + nKey+1 + nVal+1);\n  if( pEntry ){\n    pEntry->zKey = (char*)&pEntry[1];\n    memcpy(pEntry->zKey, zKey, nKey);\n    if( zVal ){\n      pEntry->zVal = &pEntry->zKey[nKey+1];\n      memcpy(pEntry->zVal, zVal, nVal);\n    }\n    pEntry->pHashNext = pHash->aHash[iHash];\n    pHash->aHash[iHash] = pEntry;\n\n    pEntry->pNext = pHash->pFirst;\n    pHash->pFirst = pEntry;\n  }\n  return 0;\n}\n\n/*\n** If zKey/nKey is present in the hash table, return a pointer to the \n** hash-entry object.\n*/\nstatic IdxHashEntry *idxHashFind(IdxHash *pHash, const char *zKey, int nKey){\n  int iHash;\n  IdxHashEntry *pEntry;\n  if( nKey<0 ) nKey = STRLEN(zKey);\n  iHash = idxHashString(zKey, nKey);\n  assert( iHash>=0 );\n  for(pEntry=pHash->aHash[iHash]; pEntry; pEntry=pEntry->pHashNext){\n    if( STRLEN(pEntry->zKey)==nKey && 0==memcmp(pEntry->zKey, zKey, nKey) ){\n      return pEntry;\n    }\n  }\n  return 0;\n}\n\n/*\n** If the hash table contains an entry with a key equal to the string\n** passed as the final two arguments to this function, return a pointer\n** to the payload string. Otherwise, if zKey/nKey is not present in the\n** hash table, return NULL.\n*/\nstatic const char *idxHashSearch(IdxHash *pHash, const char *zKey, int nKey){\n  IdxHashEntry *pEntry = idxHashFind(pHash, zKey, nKey);\n  if( pEntry ) return pEntry->zVal;\n  return 0;\n}\n\n/*\n** Allocate and return a new IdxConstraint object. Set the IdxConstraint.zColl\n** variable to point to a copy of nul-terminated string zColl.\n*/\nstatic IdxConstraint *idxNewConstraint(int *pRc, const char *zColl){\n  IdxConstraint *pNew;\n  int nColl = STRLEN(zColl);\n\n  assert( *pRc==SQLITE_OK );\n  pNew = (IdxConstraint*)idxMalloc(pRc, sizeof(IdxConstraint) * nColl + 1);\n  if( pNew ){\n    pNew->zColl = (char*)&pNew[1];\n    memcpy(pNew->zColl, zColl, nColl+1);\n  }\n  return pNew;\n}\n\n/*\n** An error associated with database handle db has just occurred. Pass\n** the error message to callback function xOut.\n*/\nstatic void idxDatabaseError(\n  sqlite3 *db,                    /* Database handle */\n  char **pzErrmsg                 /* Write error here */\n){\n  *pzErrmsg = sqlite3_mprintf(\"%s\", sqlite3_errmsg(db));\n}\n\n/*\n** Prepare an SQL statement.\n*/\nstatic int idxPrepareStmt(\n  sqlite3 *db,                    /* Database handle to compile against */\n  sqlite3_stmt **ppStmt,          /* OUT: Compiled SQL statement */\n  char **pzErrmsg,                /* OUT: sqlite3_malloc()ed error message */\n  const char *zSql                /* SQL statement to compile */\n){\n  int rc = sqlite3_prepare_v2(db, zSql, -1, ppStmt, 0);\n  if( rc!=SQLITE_OK ){\n    *ppStmt = 0;\n    idxDatabaseError(db, pzErrmsg);\n  }\n  return rc;\n}\n\n/*\n** Prepare an SQL statement using the results of a printf() formatting.\n*/\nstatic int idxPrintfPrepareStmt(\n  sqlite3 *db,                    /* Database handle to compile against */\n  sqlite3_stmt **ppStmt,          /* OUT: Compiled SQL statement */\n  char **pzErrmsg,                /* OUT: sqlite3_malloc()ed error message */\n  const char *zFmt,               /* printf() format of SQL statement */\n  ...                             /* Trailing printf() arguments */\n){\n  va_list ap;\n  int rc;\n  char *zSql;\n  va_start(ap, zFmt);\n  zSql = sqlite3_vmprintf(zFmt, ap);\n  if( zSql==0 ){\n    rc = SQLITE_NOMEM;\n  }else{\n    rc = idxPrepareStmt(db, ppStmt, pzErrmsg, zSql);\n    sqlite3_free(zSql);\n  }\n  va_end(ap);\n  return rc;\n}\n\n\n/*************************************************************************\n** Beginning of virtual table implementation.\n*/\ntypedef struct ExpertVtab ExpertVtab;\nstruct ExpertVtab {\n  sqlite3_vtab base;\n  IdxTable *pTab;\n  sqlite3expert *pExpert;\n};\n\ntypedef struct ExpertCsr ExpertCsr;\nstruct ExpertCsr {\n  sqlite3_vtab_cursor base;\n  sqlite3_stmt *pData;\n};\n\nstatic char *expertDequote(const char *zIn){\n  int n = STRLEN(zIn);\n  char *zRet = sqlite3_malloc(n);\n\n  assert( zIn[0]=='\\'' );\n  assert( zIn[n-1]=='\\'' );\n\n  if( zRet ){\n    int iOut = 0;\n    int iIn = 0;\n    for(iIn=1; iIn<(n-1); iIn++){\n      if( zIn[iIn]=='\\'' ){\n        assert( zIn[iIn+1]=='\\'' );\n        iIn++;\n      }\n      zRet[iOut++] = zIn[iIn];\n    }\n    zRet[iOut] = '\\0';\n  }\n\n  return zRet;\n}\n\n/* \n** This function is the implementation of both the xConnect and xCreate\n** methods of the r-tree virtual table.\n**\n**   argv[0]   -> module name\n**   argv[1]   -> database name\n**   argv[2]   -> table name\n**   argv[...] -> column names...\n*/\nstatic int expertConnect(\n  sqlite3 *db,\n  void *pAux,\n  int argc, const char *const*argv,\n  sqlite3_vtab **ppVtab,\n  char **pzErr\n){\n  sqlite3expert *pExpert = (sqlite3expert*)pAux;\n  ExpertVtab *p = 0;\n  int rc;\n\n  if( argc!=4 ){\n    *pzErr = sqlite3_mprintf(\"internal error!\");\n    rc = SQLITE_ERROR;\n  }else{\n    char *zCreateTable = expertDequote(argv[3]);\n    if( zCreateTable ){\n      rc = sqlite3_declare_vtab(db, zCreateTable);\n      if( rc==SQLITE_OK ){\n        p = idxMalloc(&rc, sizeof(ExpertVtab));\n      }\n      if( rc==SQLITE_OK ){\n        p->pExpert = pExpert;\n        p->pTab = pExpert->pTable;\n        assert( sqlite3_stricmp(p->pTab->zName, argv[2])==0 );\n      }\n      sqlite3_free(zCreateTable);\n    }else{\n      rc = SQLITE_NOMEM;\n    }\n  }\n\n  *ppVtab = (sqlite3_vtab*)p;\n  return rc;\n}\n\nstatic int expertDisconnect(sqlite3_vtab *pVtab){\n  ExpertVtab *p = (ExpertVtab*)pVtab;\n  sqlite3_free(p);\n  return SQLITE_OK;\n}\n\nstatic int expertBestIndex(sqlite3_vtab *pVtab, sqlite3_index_info *pIdxInfo){\n  ExpertVtab *p = (ExpertVtab*)pVtab;\n  int rc = SQLITE_OK;\n  int n = 0;\n  IdxScan *pScan;\n  const int opmask = \n    SQLITE_INDEX_CONSTRAINT_EQ | SQLITE_INDEX_CONSTRAINT_GT |\n    SQLITE_INDEX_CONSTRAINT_LT | SQLITE_INDEX_CONSTRAINT_GE |\n    SQLITE_INDEX_CONSTRAINT_LE;\n\n  pScan = idxMalloc(&rc, sizeof(IdxScan));\n  if( pScan ){\n    int i;\n\n    /* Link the new scan object into the list */\n    pScan->pTab = p->pTab;\n    pScan->pNextScan = p->pExpert->pScan;\n    p->pExpert->pScan = pScan;\n\n    /* Add the constraints to the IdxScan object */\n    for(i=0; i<pIdxInfo->nConstraint; i++){\n      struct sqlite3_index_constraint *pCons = &pIdxInfo->aConstraint[i];\n      if( pCons->usable \n       && pCons->iColumn>=0 \n       && p->pTab->aCol[pCons->iColumn].iPk==0\n       && (pCons->op & opmask) \n      ){\n        IdxConstraint *pNew;\n        const char *zColl = sqlite3_vtab_collation(pIdxInfo, i);\n        pNew = idxNewConstraint(&rc, zColl);\n        if( pNew ){\n          pNew->iCol = pCons->iColumn;\n          if( pCons->op==SQLITE_INDEX_CONSTRAINT_EQ ){\n            pNew->pNext = pScan->pEq;\n            pScan->pEq = pNew;\n          }else{\n            pNew->bRange = 1;\n            pNew->pNext = pScan->pRange;\n            pScan->pRange = pNew;\n          }\n        }\n        n++;\n        pIdxInfo->aConstraintUsage[i].argvIndex = n;\n      }\n    }\n\n    /* Add the ORDER BY to the IdxScan object */\n    for(i=pIdxInfo->nOrderBy-1; i>=0; i--){\n      int iCol = pIdxInfo->aOrderBy[i].iColumn;\n      if( iCol>=0 ){\n        IdxConstraint *pNew = idxNewConstraint(&rc, p->pTab->aCol[iCol].zColl);\n        if( pNew ){\n          pNew->iCol = iCol;\n          pNew->bDesc = pIdxInfo->aOrderBy[i].desc;\n          pNew->pNext = pScan->pOrder;\n          pNew->pLink = pScan->pOrder;\n          pScan->pOrder = pNew;\n          n++;\n        }\n      }\n    }\n  }\n\n  pIdxInfo->estimatedCost = 1000000.0 / (n+1);\n  return rc;\n}\n\nstatic int expertUpdate(\n  sqlite3_vtab *pVtab, \n  int nData, \n  sqlite3_value **azData, \n  sqlite_int64 *pRowid\n){\n  (void)pVtab;\n  (void)nData;\n  (void)azData;\n  (void)pRowid;\n  return SQLITE_OK;\n}\n\n/* \n** Virtual table module xOpen method.\n*/\nstatic int expertOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){\n  int rc = SQLITE_OK;\n  ExpertCsr *pCsr;\n  (void)pVTab;\n  pCsr = idxMalloc(&rc, sizeof(ExpertCsr));\n  *ppCursor = (sqlite3_vtab_cursor*)pCsr;\n  return rc;\n}\n\n/* \n** Virtual table module xClose method.\n*/\nstatic int expertClose(sqlite3_vtab_cursor *cur){\n  ExpertCsr *pCsr = (ExpertCsr*)cur;\n  sqlite3_finalize(pCsr->pData);\n  sqlite3_free(pCsr);\n  return SQLITE_OK;\n}\n\n/*\n** Virtual table module xEof method.\n**\n** Return non-zero if the cursor does not currently point to a valid \n** record (i.e if the scan has finished), or zero otherwise.\n*/\nstatic int expertEof(sqlite3_vtab_cursor *cur){\n  ExpertCsr *pCsr = (ExpertCsr*)cur;\n  return pCsr->pData==0;\n}\n\n/* \n** Virtual table module xNext method.\n*/\nstatic int expertNext(sqlite3_vtab_cursor *cur){\n  ExpertCsr *pCsr = (ExpertCsr*)cur;\n  int rc = SQLITE_OK;\n\n  assert( pCsr->pData );\n  rc = sqlite3_step(pCsr->pData);\n  if( rc!=SQLITE_ROW ){\n    rc = sqlite3_finalize(pCsr->pData);\n    pCsr->pData = 0;\n  }else{\n    rc = SQLITE_OK;\n  }\n\n  return rc;\n}\n\n/* \n** Virtual table module xRowid method.\n*/\nstatic int expertRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){\n  (void)cur;\n  *pRowid = 0;\n  return SQLITE_OK;\n}\n\n/* \n** Virtual table module xColumn method.\n*/\nstatic int expertColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){\n  ExpertCsr *pCsr = (ExpertCsr*)cur;\n  sqlite3_value *pVal;\n  pVal = sqlite3_column_value(pCsr->pData, i);\n  if( pVal ){\n    sqlite3_result_value(ctx, pVal);\n  }\n  return SQLITE_OK;\n}\n\n/* \n** Virtual table module xFilter method.\n*/\nstatic int expertFilter(\n  sqlite3_vtab_cursor *cur, \n  int idxNum, const char *idxStr,\n  int argc, sqlite3_value **argv\n){\n  ExpertCsr *pCsr = (ExpertCsr*)cur;\n  ExpertVtab *pVtab = (ExpertVtab*)(cur->pVtab);\n  sqlite3expert *pExpert = pVtab->pExpert;\n  int rc;\n\n  (void)idxNum;\n  (void)idxStr;\n  (void)argc;\n  (void)argv;\n  rc = sqlite3_finalize(pCsr->pData);\n  pCsr->pData = 0;\n  if( rc==SQLITE_OK ){\n    rc = idxPrintfPrepareStmt(pExpert->db, &pCsr->pData, &pVtab->base.zErrMsg,\n        \"SELECT * FROM main.%Q WHERE sample()\", pVtab->pTab->zName\n    );\n  }\n\n  if( rc==SQLITE_OK ){\n    rc = expertNext(cur);\n  }\n  return rc;\n}\n\nstatic int idxRegisterVtab(sqlite3expert *p){\n  static sqlite3_module expertModule = {\n    2,                            /* iVersion */\n    expertConnect,                /* xCreate - create a table */\n    expertConnect,                /* xConnect - connect to an existing table */\n    expertBestIndex,              /* xBestIndex - Determine search strategy */\n    expertDisconnect,             /* xDisconnect - Disconnect from a table */\n    expertDisconnect,             /* xDestroy - Drop a table */\n    expertOpen,                   /* xOpen - open a cursor */\n    expertClose,                  /* xClose - close a cursor */\n    expertFilter,                 /* xFilter - configure scan constraints */\n    expertNext,                   /* xNext - advance a cursor */\n    expertEof,                    /* xEof */\n    expertColumn,                 /* xColumn - read data */\n    expertRowid,                  /* xRowid - read data */\n    expertUpdate,                 /* xUpdate - write data */\n    0,                            /* xBegin - begin transaction */\n    0,                            /* xSync - sync transaction */\n    0,                            /* xCommit - commit transaction */\n    0,                            /* xRollback - rollback transaction */\n    0,                            /* xFindFunction - function overloading */\n    0,                            /* xRename - rename the table */\n    0,                            /* xSavepoint */\n    0,                            /* xRelease */\n    0,                            /* xRollbackTo */\n    0,                            /* xShadowName */\n  };\n\n  return sqlite3_create_module(p->dbv, \"expert\", &expertModule, (void*)p);\n}\n/*\n** End of virtual table implementation.\n*************************************************************************/\n/*\n** Finalize SQL statement pStmt. If (*pRc) is SQLITE_OK when this function\n** is called, set it to the return value of sqlite3_finalize() before\n** returning. Otherwise, discard the sqlite3_finalize() return value.\n*/\nstatic void idxFinalize(int *pRc, sqlite3_stmt *pStmt){\n  int rc = sqlite3_finalize(pStmt);\n  if( *pRc==SQLITE_OK ) *pRc = rc;\n}\n\n/*\n** Attempt to allocate an IdxTable structure corresponding to table zTab\n** in the main database of connection db. If successful, set (*ppOut) to\n** point to the new object and return SQLITE_OK. Otherwise, return an\n** SQLite error code and set (*ppOut) to NULL. In this case *pzErrmsg may be\n** set to point to an error string.\n**\n** It is the responsibility of the caller to eventually free either the\n** IdxTable object or error message using sqlite3_free().\n*/\nstatic int idxGetTableInfo(\n  sqlite3 *db,                    /* Database connection to read details from */\n  const char *zTab,               /* Table name */\n  IdxTable **ppOut,               /* OUT: New object (if successful) */\n  char **pzErrmsg                 /* OUT: Error message (if not) */\n){\n  sqlite3_stmt *p1 = 0;\n  int nCol = 0;\n  int nTab = STRLEN(zTab);\n  int nByte = sizeof(IdxTable) + nTab + 1;\n  IdxTable *pNew = 0;\n  int rc, rc2;\n  char *pCsr = 0;\n\n  rc = idxPrintfPrepareStmt(db, &p1, pzErrmsg, \"PRAGMA table_info=%Q\", zTab);\n  while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(p1) ){\n    const char *zCol = (const char*)sqlite3_column_text(p1, 1);\n    nByte += 1 + STRLEN(zCol);\n    rc = sqlite3_table_column_metadata(\n        db, \"main\", zTab, zCol, 0, &zCol, 0, 0, 0\n    );\n    nByte += 1 + STRLEN(zCol);\n    nCol++;\n  }\n  rc2 = sqlite3_reset(p1);\n  if( rc==SQLITE_OK ) rc = rc2;\n\n  nByte += sizeof(IdxColumn) * nCol;\n  if( rc==SQLITE_OK ){\n    pNew = idxMalloc(&rc, nByte);\n  }\n  if( rc==SQLITE_OK ){\n    pNew->aCol = (IdxColumn*)&pNew[1];\n    pNew->nCol = nCol;\n    pCsr = (char*)&pNew->aCol[nCol];\n  }\n\n  nCol = 0;\n  while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(p1) ){\n    const char *zCol = (const char*)sqlite3_column_text(p1, 1);\n    int nCopy = STRLEN(zCol) + 1;\n    pNew->aCol[nCol].zName = pCsr;\n    pNew->aCol[nCol].iPk = sqlite3_column_int(p1, 5);\n    memcpy(pCsr, zCol, nCopy);\n    pCsr += nCopy;\n\n    rc = sqlite3_table_column_metadata(\n        db, \"main\", zTab, zCol, 0, &zCol, 0, 0, 0\n    );\n    if( rc==SQLITE_OK ){\n      nCopy = STRLEN(zCol) + 1;\n      pNew->aCol[nCol].zColl = pCsr;\n      memcpy(pCsr, zCol, nCopy);\n      pCsr += nCopy;\n    }\n\n    nCol++;\n  }\n  idxFinalize(&rc, p1);\n\n  if( rc!=SQLITE_OK ){\n    sqlite3_free(pNew);\n    pNew = 0;\n  }else{\n    pNew->zName = pCsr;\n    memcpy(pNew->zName, zTab, nTab+1);\n  }\n\n  *ppOut = pNew;\n  return rc;\n}\n\n/*\n** This function is a no-op if *pRc is set to anything other than \n** SQLITE_OK when it is called.\n**\n** If *pRc is initially set to SQLITE_OK, then the text specified by\n** the printf() style arguments is appended to zIn and the result returned\n** in a buffer allocated by sqlite3_malloc(). sqlite3_free() is called on\n** zIn before returning.\n*/\nstatic char *idxAppendText(int *pRc, char *zIn, const char *zFmt, ...){\n  va_list ap;\n  char *zAppend = 0;\n  char *zRet = 0;\n  int nIn = zIn ? STRLEN(zIn) : 0;\n  int nAppend = 0;\n  va_start(ap, zFmt);\n  if( *pRc==SQLITE_OK ){\n    zAppend = sqlite3_vmprintf(zFmt, ap);\n    if( zAppend ){\n      nAppend = STRLEN(zAppend);\n      zRet = (char*)sqlite3_malloc(nIn + nAppend + 1);\n    }\n    if( zAppend && zRet ){\n      if( nIn ) memcpy(zRet, zIn, nIn);\n      memcpy(&zRet[nIn], zAppend, nAppend+1);\n    }else{\n      sqlite3_free(zRet);\n      zRet = 0;\n      *pRc = SQLITE_NOMEM;\n    }\n    sqlite3_free(zAppend);\n    sqlite3_free(zIn);\n  }\n  va_end(ap);\n  return zRet;\n}\n\n/*\n** Return true if zId must be quoted in order to use it as an SQL\n** identifier, or false otherwise.\n*/\nstatic int idxIdentifierRequiresQuotes(const char *zId){\n  int i;\n  for(i=0; zId[i]; i++){\n    if( !(zId[i]=='_')\n     && !(zId[i]>='0' && zId[i]<='9')\n     && !(zId[i]>='a' && zId[i]<='z')\n     && !(zId[i]>='A' && zId[i]<='Z')\n    ){\n      return 1;\n    }\n  }\n  return 0;\n}\n\n/*\n** This function appends an index column definition suitable for constraint\n** pCons to the string passed as zIn and returns the result.\n*/\nstatic char *idxAppendColDefn(\n  int *pRc,                       /* IN/OUT: Error code */\n  char *zIn,                      /* Column defn accumulated so far */\n  IdxTable *pTab,                 /* Table index will be created on */\n  IdxConstraint *pCons\n){\n  char *zRet = zIn;\n  IdxColumn *p = &pTab->aCol[pCons->iCol];\n  if( zRet ) zRet = idxAppendText(pRc, zRet, \", \");\n\n  if( idxIdentifierRequiresQuotes(p->zName) ){\n    zRet = idxAppendText(pRc, zRet, \"%Q\", p->zName);\n  }else{\n    zRet = idxAppendText(pRc, zRet, \"%s\", p->zName);\n  }\n\n  if( sqlite3_stricmp(p->zColl, pCons->zColl) ){\n    if( idxIdentifierRequiresQuotes(pCons->zColl) ){\n      zRet = idxAppendText(pRc, zRet, \" COLLATE %Q\", pCons->zColl);\n    }else{\n      zRet = idxAppendText(pRc, zRet, \" COLLATE %s\", pCons->zColl);\n    }\n  }\n\n  if( pCons->bDesc ){\n    zRet = idxAppendText(pRc, zRet, \" DESC\");\n  }\n  return zRet;\n}\n\n/*\n** Search database dbm for an index compatible with the one idxCreateFromCons()\n** would create from arguments pScan, pEq and pTail. If no error occurs and \n** such an index is found, return non-zero. Or, if no such index is found,\n** return zero.\n**\n** If an error occurs, set *pRc to an SQLite error code and return zero.\n*/\nstatic int idxFindCompatible(\n  int *pRc,                       /* OUT: Error code */\n  sqlite3* dbm,                   /* Database to search */\n  IdxScan *pScan,                 /* Scan for table to search for index on */\n  IdxConstraint *pEq,             /* List of == constraints */\n  IdxConstraint *pTail            /* List of range constraints */\n){\n  const char *zTbl = pScan->pTab->zName;\n  sqlite3_stmt *pIdxList = 0;\n  IdxConstraint *pIter;\n  int nEq = 0;                    /* Number of elements in pEq */\n  int rc;\n\n  /* Count the elements in list pEq */\n  for(pIter=pEq; pIter; pIter=pIter->pLink) nEq++;\n\n  rc = idxPrintfPrepareStmt(dbm, &pIdxList, 0, \"PRAGMA index_list=%Q\", zTbl);\n  while( rc==SQLITE_OK && sqlite3_step(pIdxList)==SQLITE_ROW ){\n    int bMatch = 1;\n    IdxConstraint *pT = pTail;\n    sqlite3_stmt *pInfo = 0;\n    const char *zIdx = (const char*)sqlite3_column_text(pIdxList, 1);\n\n    /* Zero the IdxConstraint.bFlag values in the pEq list */\n    for(pIter=pEq; pIter; pIter=pIter->pLink) pIter->bFlag = 0;\n\n    rc = idxPrintfPrepareStmt(dbm, &pInfo, 0, \"PRAGMA index_xInfo=%Q\", zIdx);\n    while( rc==SQLITE_OK && sqlite3_step(pInfo)==SQLITE_ROW ){\n      int iIdx = sqlite3_column_int(pInfo, 0);\n      int iCol = sqlite3_column_int(pInfo, 1);\n      const char *zColl = (const char*)sqlite3_column_text(pInfo, 4);\n\n      if( iIdx<nEq ){\n        for(pIter=pEq; pIter; pIter=pIter->pLink){\n          if( pIter->bFlag ) continue;\n          if( pIter->iCol!=iCol ) continue;\n          if( sqlite3_stricmp(pIter->zColl, zColl) ) continue;\n          pIter->bFlag = 1;\n          break;\n        }\n        if( pIter==0 ){\n          bMatch = 0;\n          break;\n        }\n      }else{\n        if( pT ){\n          if( pT->iCol!=iCol || sqlite3_stricmp(pT->zColl, zColl) ){\n            bMatch = 0;\n            break;\n          }\n          pT = pT->pLink;\n        }\n      }\n    }\n    idxFinalize(&rc, pInfo);\n\n    if( rc==SQLITE_OK && bMatch ){\n      sqlite3_finalize(pIdxList);\n      return 1;\n    }\n  }\n  idxFinalize(&rc, pIdxList);\n\n  *pRc = rc;\n  return 0;\n}\n\nstatic int idxCreateFromCons(\n  sqlite3expert *p,\n  IdxScan *pScan,\n  IdxConstraint *pEq, \n  IdxConstraint *pTail\n){\n  sqlite3 *dbm = p->dbm;\n  int rc = SQLITE_OK;\n  if( (pEq || pTail) && 0==idxFindCompatible(&rc, dbm, pScan, pEq, pTail) ){\n    IdxTable *pTab = pScan->pTab;\n    char *zCols = 0;\n    char *zIdx = 0;\n    IdxConstraint *pCons;\n    unsigned int h = 0;\n    const char *zFmt;\n\n    for(pCons=pEq; pCons; pCons=pCons->pLink){\n      zCols = idxAppendColDefn(&rc, zCols, pTab, pCons);\n    }\n    for(pCons=pTail; pCons; pCons=pCons->pLink){\n      zCols = idxAppendColDefn(&rc, zCols, pTab, pCons);\n    }\n\n    if( rc==SQLITE_OK ){\n      /* Hash the list of columns to come up with a name for the index */\n      const char *zTable = pScan->pTab->zName;\n      char *zName;                /* Index name */\n      int i;\n      for(i=0; zCols[i]; i++){\n        h += ((h<<3) + zCols[i]);\n      }\n      zName = sqlite3_mprintf(\"%s_idx_%08x\", zTable, h);\n      if( zName==0 ){ \n        rc = SQLITE_NOMEM;\n      }else{\n        if( idxIdentifierRequiresQuotes(zTable) ){\n          zFmt = \"CREATE INDEX '%q' ON %Q(%s)\";\n        }else{\n          zFmt = \"CREATE INDEX %s ON %s(%s)\";\n        }\n        zIdx = sqlite3_mprintf(zFmt, zName, zTable, zCols);\n        if( !zIdx ){\n          rc = SQLITE_NOMEM;\n        }else{\n          rc = sqlite3_exec(dbm, zIdx, 0, 0, p->pzErrmsg);\n          idxHashAdd(&rc, &p->hIdx, zName, zIdx);\n        }\n        sqlite3_free(zName);\n        sqlite3_free(zIdx);\n      }\n    }\n\n    sqlite3_free(zCols);\n  }\n  return rc;\n}\n\n/*\n** Return true if list pList (linked by IdxConstraint.pLink) contains\n** a constraint compatible with *p. Otherwise return false.\n*/\nstatic int idxFindConstraint(IdxConstraint *pList, IdxConstraint *p){\n  IdxConstraint *pCmp;\n  for(pCmp=pList; pCmp; pCmp=pCmp->pLink){\n    if( p->iCol==pCmp->iCol ) return 1;\n  }\n  return 0;\n}\n\nstatic int idxCreateFromWhere(\n  sqlite3expert *p, \n  IdxScan *pScan,                 /* Create indexes for this scan */\n  IdxConstraint *pTail            /* range/ORDER BY constraints for inclusion */\n){\n  IdxConstraint *p1 = 0;\n  IdxConstraint *pCon;\n  int rc;\n\n  /* Gather up all the == constraints. */\n  for(pCon=pScan->pEq; pCon; pCon=pCon->pNext){\n    if( !idxFindConstraint(p1, pCon) && !idxFindConstraint(pTail, pCon) ){\n      pCon->pLink = p1;\n      p1 = pCon;\n    }\n  }\n\n  /* Create an index using the == constraints collected above. And the\n  ** range constraint/ORDER BY terms passed in by the caller, if any. */\n  rc = idxCreateFromCons(p, pScan, p1, pTail);\n\n  /* If no range/ORDER BY passed by the caller, create a version of the\n  ** index for each range constraint.  */\n  if( pTail==0 ){\n    for(pCon=pScan->pRange; rc==SQLITE_OK && pCon; pCon=pCon->pNext){\n      assert( pCon->pLink==0 );\n      if( !idxFindConstraint(p1, pCon) && !idxFindConstraint(pTail, pCon) ){\n        rc = idxCreateFromCons(p, pScan, p1, pCon);\n      }\n    }\n  }\n\n  return rc;\n}\n\n/*\n** Create candidate indexes in database [dbm] based on the data in \n** linked-list pScan.\n*/\nstatic int idxCreateCandidates(sqlite3expert *p){\n  int rc = SQLITE_OK;\n  IdxScan *pIter;\n\n  for(pIter=p->pScan; pIter && rc==SQLITE_OK; pIter=pIter->pNextScan){\n    rc = idxCreateFromWhere(p, pIter, 0);\n    if( rc==SQLITE_OK && pIter->pOrder ){\n      rc = idxCreateFromWhere(p, pIter, pIter->pOrder);\n    }\n  }\n\n  return rc;\n}\n\n/*\n** Free all elements of the linked list starting at pConstraint.\n*/\nstatic void idxConstraintFree(IdxConstraint *pConstraint){\n  IdxConstraint *pNext;\n  IdxConstraint *p;\n\n  for(p=pConstraint; p; p=pNext){\n    pNext = p->pNext;\n    sqlite3_free(p);\n  }\n}\n\n/*\n** Free all elements of the linked list starting from pScan up until pLast\n** (pLast is not freed).\n*/\nstatic void idxScanFree(IdxScan *pScan, IdxScan *pLast){\n  IdxScan *p;\n  IdxScan *pNext;\n  for(p=pScan; p!=pLast; p=pNext){\n    pNext = p->pNextScan;\n    idxConstraintFree(p->pOrder);\n    idxConstraintFree(p->pEq);\n    idxConstraintFree(p->pRange);\n    sqlite3_free(p);\n  }\n}\n\n/*\n** Free all elements of the linked list starting from pStatement up \n** until pLast (pLast is not freed).\n*/\nstatic void idxStatementFree(IdxStatement *pStatement, IdxStatement *pLast){\n  IdxStatement *p;\n  IdxStatement *pNext;\n  for(p=pStatement; p!=pLast; p=pNext){\n    pNext = p->pNext;\n    sqlite3_free(p->zEQP);\n    sqlite3_free(p->zIdx);\n    sqlite3_free(p);\n  }\n}\n\n/*\n** Free the linked list of IdxTable objects starting at pTab.\n*/\nstatic void idxTableFree(IdxTable *pTab){\n  IdxTable *pIter;\n  IdxTable *pNext;\n  for(pIter=pTab; pIter; pIter=pNext){\n    pNext = pIter->pNext;\n    sqlite3_free(pIter);\n  }\n}\n\n/*\n** Free the linked list of IdxWrite objects starting at pTab.\n*/\nstatic void idxWriteFree(IdxWrite *pTab){\n  IdxWrite *pIter;\n  IdxWrite *pNext;\n  for(pIter=pTab; pIter; pIter=pNext){\n    pNext = pIter->pNext;\n    sqlite3_free(pIter);\n  }\n}\n\n\n\n/*\n** This function is called after candidate indexes have been created. It\n** runs all the queries to see which indexes they prefer, and populates\n** IdxStatement.zIdx and IdxStatement.zEQP with the results.\n*/\nint idxFindIndexes(\n  sqlite3expert *p,\n  char **pzErr                         /* OUT: Error message (sqlite3_malloc) */\n){\n  IdxStatement *pStmt;\n  sqlite3 *dbm = p->dbm;\n  int rc = SQLITE_OK;\n\n  IdxHash hIdx;\n  idxHashInit(&hIdx);\n\n  for(pStmt=p->pStatement; rc==SQLITE_OK && pStmt; pStmt=pStmt->pNext){\n    IdxHashEntry *pEntry;\n    sqlite3_stmt *pExplain = 0;\n    idxHashClear(&hIdx);\n    rc = idxPrintfPrepareStmt(dbm, &pExplain, pzErr,\n        \"EXPLAIN QUERY PLAN %s\", pStmt->zSql\n    );\n    while( rc==SQLITE_OK && sqlite3_step(pExplain)==SQLITE_ROW ){\n      /* int iId = sqlite3_column_int(pExplain, 0); */\n      /* int iParent = sqlite3_column_int(pExplain, 1); */\n      /* int iNotUsed = sqlite3_column_int(pExplain, 2); */\n      const char *zDetail = (const char*)sqlite3_column_text(pExplain, 3);\n      int nDetail = STRLEN(zDetail);\n      int i;\n\n      for(i=0; i<nDetail; i++){\n        const char *zIdx = 0;\n        if( memcmp(&zDetail[i], \" USING INDEX \", 13)==0 ){\n          zIdx = &zDetail[i+13];\n        }else if( memcmp(&zDetail[i], \" USING COVERING INDEX \", 22)==0 ){\n          zIdx = &zDetail[i+22];\n        }\n        if( zIdx ){\n          const char *zSql;\n          int nIdx = 0;\n          while( zIdx[nIdx]!='\\0' && (zIdx[nIdx]!=' ' || zIdx[nIdx+1]!='(') ){\n            nIdx++;\n          }\n          zSql = idxHashSearch(&p->hIdx, zIdx, nIdx);\n          if( zSql ){\n            idxHashAdd(&rc, &hIdx, zSql, 0);\n            if( rc ) goto find_indexes_out;\n          }\n          break;\n        }\n      }\n\n      if( zDetail[0]!='-' ){\n        pStmt->zEQP = idxAppendText(&rc, pStmt->zEQP, \"%s\\n\", zDetail);\n      }\n    }\n\n    for(pEntry=hIdx.pFirst; pEntry; pEntry=pEntry->pNext){\n      pStmt->zIdx = idxAppendText(&rc, pStmt->zIdx, \"%s;\\n\", pEntry->zKey);\n    }\n\n    idxFinalize(&rc, pExplain);\n  }\n\n find_indexes_out:\n  idxHashClear(&hIdx);\n  return rc;\n}\n\nstatic int idxAuthCallback(\n  void *pCtx,\n  int eOp,\n  const char *z3,\n  const char *z4,\n  const char *zDb,\n  const char *zTrigger\n){\n  int rc = SQLITE_OK;\n  (void)z4;\n  (void)zTrigger;\n  if( eOp==SQLITE_INSERT || eOp==SQLITE_UPDATE || eOp==SQLITE_DELETE ){\n    if( sqlite3_stricmp(zDb, \"main\")==0 ){\n      sqlite3expert *p = (sqlite3expert*)pCtx;\n      IdxTable *pTab;\n      for(pTab=p->pTable; pTab; pTab=pTab->pNext){\n        if( 0==sqlite3_stricmp(z3, pTab->zName) ) break;\n      }\n      if( pTab ){\n        IdxWrite *pWrite;\n        for(pWrite=p->pWrite; pWrite; pWrite=pWrite->pNext){\n          if( pWrite->pTab==pTab && pWrite->eOp==eOp ) break;\n        }\n        if( pWrite==0 ){\n          pWrite = idxMalloc(&rc, sizeof(IdxWrite));\n          if( rc==SQLITE_OK ){\n            pWrite->pTab = pTab;\n            pWrite->eOp = eOp;\n            pWrite->pNext = p->pWrite;\n            p->pWrite = pWrite;\n          }\n        }\n      }\n    }\n  }\n  return rc;\n}\n\nstatic int idxProcessOneTrigger(\n  sqlite3expert *p, \n  IdxWrite *pWrite, \n  char **pzErr\n){\n  static const char *zInt = UNIQUE_TABLE_NAME;\n  static const char *zDrop = \"DROP TABLE \" UNIQUE_TABLE_NAME;\n  IdxTable *pTab = pWrite->pTab;\n  const char *zTab = pTab->zName;\n  const char *zSql = \n    \"SELECT 'CREATE TEMP' || substr(sql, 7) FROM sqlite_master \"\n    \"WHERE tbl_name = %Q AND type IN ('table', 'trigger') \"\n    \"ORDER BY type;\";\n  sqlite3_stmt *pSelect = 0;\n  int rc = SQLITE_OK;\n  char *zWrite = 0;\n\n  /* Create the table and its triggers in the temp schema */\n  rc = idxPrintfPrepareStmt(p->db, &pSelect, pzErr, zSql, zTab, zTab);\n  while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSelect) ){\n    const char *zCreate = (const char*)sqlite3_column_text(pSelect, 0);\n    rc = sqlite3_exec(p->dbv, zCreate, 0, 0, pzErr);\n  }\n  idxFinalize(&rc, pSelect);\n\n  /* Rename the table in the temp schema to zInt */\n  if( rc==SQLITE_OK ){\n    char *z = sqlite3_mprintf(\"ALTER TABLE temp.%Q RENAME TO %Q\", zTab, zInt);\n    if( z==0 ){\n      rc = SQLITE_NOMEM;\n    }else{\n      rc = sqlite3_exec(p->dbv, z, 0, 0, pzErr);\n      sqlite3_free(z);\n    }\n  }\n\n  switch( pWrite->eOp ){\n    case SQLITE_INSERT: {\n      int i;\n      zWrite = idxAppendText(&rc, zWrite, \"INSERT INTO %Q VALUES(\", zInt);\n      for(i=0; i<pTab->nCol; i++){\n        zWrite = idxAppendText(&rc, zWrite, \"%s?\", i==0 ? \"\" : \", \");\n      }\n      zWrite = idxAppendText(&rc, zWrite, \")\");\n      break;\n    }\n    case SQLITE_UPDATE: {\n      int i;\n      zWrite = idxAppendText(&rc, zWrite, \"UPDATE %Q SET \", zInt);\n      for(i=0; i<pTab->nCol; i++){\n        zWrite = idxAppendText(&rc, zWrite, \"%s%Q=?\", i==0 ? \"\" : \", \", \n            pTab->aCol[i].zName\n        );\n      }\n      break;\n    }\n    default: {\n      assert( pWrite->eOp==SQLITE_DELETE );\n      if( rc==SQLITE_OK ){\n        zWrite = sqlite3_mprintf(\"DELETE FROM %Q\", zInt);\n        if( zWrite==0 ) rc = SQLITE_NOMEM;\n      }\n    }\n  }\n\n  if( rc==SQLITE_OK ){\n    sqlite3_stmt *pX = 0;\n    rc = sqlite3_prepare_v2(p->dbv, zWrite, -1, &pX, 0);\n    idxFinalize(&rc, pX);\n    if( rc!=SQLITE_OK ){\n      idxDatabaseError(p->dbv, pzErr);\n    }\n  }\n  sqlite3_free(zWrite);\n\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_exec(p->dbv, zDrop, 0, 0, pzErr);\n  }\n\n  return rc;\n}\n\nstatic int idxProcessTriggers(sqlite3expert *p, char **pzErr){\n  int rc = SQLITE_OK;\n  IdxWrite *pEnd = 0;\n  IdxWrite *pFirst = p->pWrite;\n\n  while( rc==SQLITE_OK && pFirst!=pEnd ){\n    IdxWrite *pIter;\n    for(pIter=pFirst; rc==SQLITE_OK && pIter!=pEnd; pIter=pIter->pNext){\n      rc = idxProcessOneTrigger(p, pIter, pzErr);\n    }\n    pEnd = pFirst;\n    pFirst = p->pWrite;\n  }\n\n  return rc;\n}\n\n\nstatic int idxCreateVtabSchema(sqlite3expert *p, char **pzErrmsg){\n  int rc = idxRegisterVtab(p);\n  sqlite3_stmt *pSchema = 0;\n\n  /* For each table in the main db schema:\n  **\n  **   1) Add an entry to the p->pTable list, and\n  **   2) Create the equivalent virtual table in dbv.\n  */\n  rc = idxPrepareStmt(p->db, &pSchema, pzErrmsg,\n      \"SELECT type, name, sql, 1 FROM sqlite_master \"\n      \"WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%%' \"\n      \" UNION ALL \"\n      \"SELECT type, name, sql, 2 FROM sqlite_master \"\n      \"WHERE type = 'trigger'\"\n      \"  AND tbl_name IN(SELECT name FROM sqlite_master WHERE type = 'view') \"\n      \"ORDER BY 4, 1\"\n  );\n  while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSchema) ){\n    const char *zType = (const char*)sqlite3_column_text(pSchema, 0);\n    const char *zName = (const char*)sqlite3_column_text(pSchema, 1);\n    const char *zSql = (const char*)sqlite3_column_text(pSchema, 2);\n\n    if( zType[0]=='v' || zType[1]=='r' ){\n      rc = sqlite3_exec(p->dbv, zSql, 0, 0, pzErrmsg);\n    }else{\n      IdxTable *pTab;\n      rc = idxGetTableInfo(p->db, zName, &pTab, pzErrmsg);\n      if( rc==SQLITE_OK ){\n        int i;\n        char *zInner = 0;\n        char *zOuter = 0;\n        pTab->pNext = p->pTable;\n        p->pTable = pTab;\n\n        /* The statement the vtab will pass to sqlite3_declare_vtab() */\n        zInner = idxAppendText(&rc, 0, \"CREATE TABLE x(\");\n        for(i=0; i<pTab->nCol; i++){\n          zInner = idxAppendText(&rc, zInner, \"%s%Q COLLATE %s\", \n              (i==0 ? \"\" : \", \"), pTab->aCol[i].zName, pTab->aCol[i].zColl\n          );\n        }\n        zInner = idxAppendText(&rc, zInner, \")\");\n\n        /* The CVT statement to create the vtab */\n        zOuter = idxAppendText(&rc, 0, \n            \"CREATE VIRTUAL TABLE %Q USING expert(%Q)\", zName, zInner\n        );\n        if( rc==SQLITE_OK ){\n          rc = sqlite3_exec(p->dbv, zOuter, 0, 0, pzErrmsg);\n        }\n        sqlite3_free(zInner);\n        sqlite3_free(zOuter);\n      }\n    }\n  }\n  idxFinalize(&rc, pSchema);\n  return rc;\n}\n\nstruct IdxSampleCtx {\n  int iTarget;\n  double target;                  /* Target nRet/nRow value */\n  double nRow;                    /* Number of rows seen */\n  double nRet;                    /* Number of rows returned */\n};\n\nstatic void idxSampleFunc(\n  sqlite3_context *pCtx,\n  int argc,\n  sqlite3_value **argv\n){\n  struct IdxSampleCtx *p = (struct IdxSampleCtx*)sqlite3_user_data(pCtx);\n  int bRet;\n\n  (void)argv;\n  assert( argc==0 );\n  if( p->nRow==0.0 ){\n    bRet = 1;\n  }else{\n    bRet = (p->nRet / p->nRow) <= p->target;\n    if( bRet==0 ){\n      unsigned short rnd;\n      sqlite3_randomness(2, (void*)&rnd);\n      bRet = ((int)rnd % 100) <= p->iTarget;\n    }\n  }\n\n  sqlite3_result_int(pCtx, bRet);\n  p->nRow += 1.0;\n  p->nRet += (double)bRet;\n}\n\nstruct IdxRemCtx {\n  int nSlot;\n  struct IdxRemSlot {\n    int eType;                    /* SQLITE_NULL, INTEGER, REAL, TEXT, BLOB */\n    i64 iVal;                     /* SQLITE_INTEGER value */\n    double rVal;                  /* SQLITE_FLOAT value */\n    int nByte;                    /* Bytes of space allocated at z */\n    int n;                        /* Size of buffer z */\n    char *z;                      /* SQLITE_TEXT/BLOB value */\n  } aSlot[1];\n};\n\n/*\n** Implementation of scalar function rem().\n*/\nstatic void idxRemFunc(\n  sqlite3_context *pCtx,\n  int argc,\n  sqlite3_value **argv\n){\n  struct IdxRemCtx *p = (struct IdxRemCtx*)sqlite3_user_data(pCtx);\n  struct IdxRemSlot *pSlot;\n  int iSlot;\n  assert( argc==2 );\n\n  iSlot = sqlite3_value_int(argv[0]);\n  assert( iSlot<=p->nSlot );\n  pSlot = &p->aSlot[iSlot];\n\n  switch( pSlot->eType ){\n    case SQLITE_NULL:\n      /* no-op */\n      break;\n\n    case SQLITE_INTEGER:\n      sqlite3_result_int64(pCtx, pSlot->iVal);\n      break;\n\n    case SQLITE_FLOAT:\n      sqlite3_result_double(pCtx, pSlot->rVal);\n      break;\n\n    case SQLITE_BLOB:\n      sqlite3_result_blob(pCtx, pSlot->z, pSlot->n, SQLITE_TRANSIENT);\n      break;\n\n    case SQLITE_TEXT:\n      sqlite3_result_text(pCtx, pSlot->z, pSlot->n, SQLITE_TRANSIENT);\n      break;\n  }\n\n  pSlot->eType = sqlite3_value_type(argv[1]);\n  switch( pSlot->eType ){\n    case SQLITE_NULL:\n      /* no-op */\n      break;\n\n    case SQLITE_INTEGER:\n      pSlot->iVal = sqlite3_value_int64(argv[1]);\n      break;\n\n    case SQLITE_FLOAT:\n      pSlot->rVal = sqlite3_value_double(argv[1]);\n      break;\n\n    case SQLITE_BLOB:\n    case SQLITE_TEXT: {\n      int nByte = sqlite3_value_bytes(argv[1]);\n      if( nByte>pSlot->nByte ){\n        char *zNew = (char*)sqlite3_realloc(pSlot->z, nByte*2);\n        if( zNew==0 ){\n          sqlite3_result_error_nomem(pCtx);\n          return;\n        }\n        pSlot->nByte = nByte*2;\n        pSlot->z = zNew;\n      }\n      pSlot->n = nByte;\n      if( pSlot->eType==SQLITE_BLOB ){\n        memcpy(pSlot->z, sqlite3_value_blob(argv[1]), nByte);\n      }else{\n        memcpy(pSlot->z, sqlite3_value_text(argv[1]), nByte);\n      }\n      break;\n    }\n  }\n}\n\nstatic int idxLargestIndex(sqlite3 *db, int *pnMax, char **pzErr){\n  int rc = SQLITE_OK;\n  const char *zMax = \n    \"SELECT max(i.seqno) FROM \"\n    \"  sqlite_master AS s, \"\n    \"  pragma_index_list(s.name) AS l, \"\n    \"  pragma_index_info(l.name) AS i \"\n    \"WHERE s.type = 'table'\";\n  sqlite3_stmt *pMax = 0;\n\n  *pnMax = 0;\n  rc = idxPrepareStmt(db, &pMax, pzErr, zMax);\n  if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pMax) ){\n    *pnMax = sqlite3_column_int(pMax, 0) + 1;\n  }\n  idxFinalize(&rc, pMax);\n\n  return rc;\n}\n\nstatic int idxPopulateOneStat1(\n  sqlite3expert *p,\n  sqlite3_stmt *pIndexXInfo,\n  sqlite3_stmt *pWriteStat,\n  const char *zTab,\n  const char *zIdx,\n  char **pzErr\n){\n  char *zCols = 0;\n  char *zOrder = 0;\n  char *zQuery = 0;\n  int nCol = 0;\n  int i;\n  sqlite3_stmt *pQuery = 0;\n  int *aStat = 0;\n  int rc = SQLITE_OK;\n\n  assert( p->iSample>0 );\n\n  /* Formulate the query text */\n  sqlite3_bind_text(pIndexXInfo, 1, zIdx, -1, SQLITE_STATIC);\n  while( SQLITE_OK==rc && SQLITE_ROW==sqlite3_step(pIndexXInfo) ){\n    const char *zComma = zCols==0 ? \"\" : \", \";\n    const char *zName = (const char*)sqlite3_column_text(pIndexXInfo, 0);\n    const char *zColl = (const char*)sqlite3_column_text(pIndexXInfo, 1);\n    zCols = idxAppendText(&rc, zCols, \n        \"%sx.%Q IS rem(%d, x.%Q) COLLATE %s\", zComma, zName, nCol, zName, zColl\n    );\n    zOrder = idxAppendText(&rc, zOrder, \"%s%d\", zComma, ++nCol);\n  }\n  sqlite3_reset(pIndexXInfo);\n  if( rc==SQLITE_OK ){\n    if( p->iSample==100 ){\n      zQuery = sqlite3_mprintf(\n          \"SELECT %s FROM %Q x ORDER BY %s\", zCols, zTab, zOrder\n      );\n    }else{\n      zQuery = sqlite3_mprintf(\n          \"SELECT %s FROM temp.\"UNIQUE_TABLE_NAME\" x ORDER BY %s\", zCols, zOrder\n      );\n    }\n  }\n  sqlite3_free(zCols);\n  sqlite3_free(zOrder);\n\n  /* Formulate the query text */\n  if( rc==SQLITE_OK ){\n    sqlite3 *dbrem = (p->iSample==100 ? p->db : p->dbv);\n    rc = idxPrepareStmt(dbrem, &pQuery, pzErr, zQuery);\n  }\n  sqlite3_free(zQuery);\n\n  if( rc==SQLITE_OK ){\n    aStat = (int*)idxMalloc(&rc, sizeof(int)*(nCol+1));\n  }\n  if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pQuery) ){\n    IdxHashEntry *pEntry;\n    char *zStat = 0;\n    for(i=0; i<=nCol; i++) aStat[i] = 1;\n    while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pQuery) ){\n      aStat[0]++;\n      for(i=0; i<nCol; i++){\n        if( sqlite3_column_int(pQuery, i)==0 ) break;\n      }\n      for(/*no-op*/; i<nCol; i++){\n        aStat[i+1]++;\n      }\n    }\n\n    if( rc==SQLITE_OK ){\n      int s0 = aStat[0];\n      zStat = sqlite3_mprintf(\"%d\", s0);\n      if( zStat==0 ) rc = SQLITE_NOMEM;\n      for(i=1; rc==SQLITE_OK && i<=nCol; i++){\n        zStat = idxAppendText(&rc, zStat, \" %d\", (s0+aStat[i]/2) / aStat[i]);\n      }\n    }\n\n    if( rc==SQLITE_OK ){\n      sqlite3_bind_text(pWriteStat, 1, zTab, -1, SQLITE_STATIC);\n      sqlite3_bind_text(pWriteStat, 2, zIdx, -1, SQLITE_STATIC);\n      sqlite3_bind_text(pWriteStat, 3, zStat, -1, SQLITE_STATIC);\n      sqlite3_step(pWriteStat);\n      rc = sqlite3_reset(pWriteStat);\n    }\n\n    pEntry = idxHashFind(&p->hIdx, zIdx, STRLEN(zIdx));\n    if( pEntry ){\n      assert( pEntry->zVal2==0 );\n      pEntry->zVal2 = zStat;\n    }else{\n      sqlite3_free(zStat);\n    }\n  }\n  sqlite3_free(aStat);\n  idxFinalize(&rc, pQuery);\n\n  return rc;\n}\n\nstatic int idxBuildSampleTable(sqlite3expert *p, const char *zTab){\n  int rc;\n  char *zSql;\n\n  rc = sqlite3_exec(p->dbv,\"DROP TABLE IF EXISTS temp.\"UNIQUE_TABLE_NAME,0,0,0);\n  if( rc!=SQLITE_OK ) return rc;\n\n  zSql = sqlite3_mprintf(\n      \"CREATE TABLE temp.\" UNIQUE_TABLE_NAME \" AS SELECT * FROM %Q\", zTab\n  );\n  if( zSql==0 ) return SQLITE_NOMEM;\n  rc = sqlite3_exec(p->dbv, zSql, 0, 0, 0);\n  sqlite3_free(zSql);\n\n  return rc;\n}\n\n/*\n** This function is called as part of sqlite3_expert_analyze(). Candidate\n** indexes have already been created in database sqlite3expert.dbm, this\n** function populates sqlite_stat1 table in the same database.\n**\n** The stat1 data is generated by querying the \n*/\nstatic int idxPopulateStat1(sqlite3expert *p, char **pzErr){\n  int rc = SQLITE_OK;\n  int nMax =0;\n  struct IdxRemCtx *pCtx = 0;\n  struct IdxSampleCtx samplectx; \n  int i;\n  i64 iPrev = -100000;\n  sqlite3_stmt *pAllIndex = 0;\n  sqlite3_stmt *pIndexXInfo = 0;\n  sqlite3_stmt *pWrite = 0;\n\n  const char *zAllIndex =\n    \"SELECT s.rowid, s.name, l.name FROM \"\n    \"  sqlite_master AS s, \"\n    \"  pragma_index_list(s.name) AS l \"\n    \"WHERE s.type = 'table'\";\n  const char *zIndexXInfo = \n    \"SELECT name, coll FROM pragma_index_xinfo(?) WHERE key\";\n  const char *zWrite = \"INSERT INTO sqlite_stat1 VALUES(?, ?, ?)\";\n\n  /* If iSample==0, no sqlite_stat1 data is required. */\n  if( p->iSample==0 ) return SQLITE_OK;\n\n  rc = idxLargestIndex(p->dbm, &nMax, pzErr);\n  if( nMax<=0 || rc!=SQLITE_OK ) return rc;\n\n  rc = sqlite3_exec(p->dbm, \"ANALYZE; PRAGMA writable_schema=1\", 0, 0, 0);\n\n  if( rc==SQLITE_OK ){\n    int nByte = sizeof(struct IdxRemCtx) + (sizeof(struct IdxRemSlot) * nMax);\n    pCtx = (struct IdxRemCtx*)idxMalloc(&rc, nByte);\n  }\n\n  if( rc==SQLITE_OK ){\n    sqlite3 *dbrem = (p->iSample==100 ? p->db : p->dbv);\n    rc = sqlite3_create_function(\n        dbrem, \"rem\", 2, SQLITE_UTF8, (void*)pCtx, idxRemFunc, 0, 0\n    );\n  }\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_create_function(\n        p->db, \"sample\", 0, SQLITE_UTF8, (void*)&samplectx, idxSampleFunc, 0, 0\n    );\n  }\n\n  if( rc==SQLITE_OK ){\n    pCtx->nSlot = nMax+1;\n    rc = idxPrepareStmt(p->dbm, &pAllIndex, pzErr, zAllIndex);\n  }\n  if( rc==SQLITE_OK ){\n    rc = idxPrepareStmt(p->dbm, &pIndexXInfo, pzErr, zIndexXInfo);\n  }\n  if( rc==SQLITE_OK ){\n    rc = idxPrepareStmt(p->dbm, &pWrite, pzErr, zWrite);\n  }\n\n  while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pAllIndex) ){\n    i64 iRowid = sqlite3_column_int64(pAllIndex, 0);\n    const char *zTab = (const char*)sqlite3_column_text(pAllIndex, 1);\n    const char *zIdx = (const char*)sqlite3_column_text(pAllIndex, 2);\n    if( p->iSample<100 && iPrev!=iRowid ){\n      samplectx.target = (double)p->iSample / 100.0;\n      samplectx.iTarget = p->iSample;\n      samplectx.nRow = 0.0;\n      samplectx.nRet = 0.0;\n      rc = idxBuildSampleTable(p, zTab);\n      if( rc!=SQLITE_OK ) break;\n    }\n    rc = idxPopulateOneStat1(p, pIndexXInfo, pWrite, zTab, zIdx, pzErr);\n    iPrev = iRowid;\n  }\n  if( rc==SQLITE_OK && p->iSample<100 ){\n    rc = sqlite3_exec(p->dbv, \n        \"DROP TABLE IF EXISTS temp.\" UNIQUE_TABLE_NAME, 0,0,0\n    );\n  }\n\n  idxFinalize(&rc, pAllIndex);\n  idxFinalize(&rc, pIndexXInfo);\n  idxFinalize(&rc, pWrite);\n\n  for(i=0; i<pCtx->nSlot; i++){\n    sqlite3_free(pCtx->aSlot[i].z);\n  }\n  sqlite3_free(pCtx);\n\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_exec(p->dbm, \"ANALYZE sqlite_master\", 0, 0, 0);\n  }\n\n  sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.\"UNIQUE_TABLE_NAME,0,0,0);\n  return rc;\n}\n\n/*\n** Allocate a new sqlite3expert object.\n*/\nsqlite3expert *sqlite3_expert_new(sqlite3 *db, char **pzErrmsg){\n  int rc = SQLITE_OK;\n  sqlite3expert *pNew;\n\n  pNew = (sqlite3expert*)idxMalloc(&rc, sizeof(sqlite3expert));\n\n  /* Open two in-memory databases to work with. The \"vtab database\" (dbv)\n  ** will contain a virtual table corresponding to each real table in\n  ** the user database schema, and a copy of each view. It is used to\n  ** collect information regarding the WHERE, ORDER BY and other clauses\n  ** of the user's query.\n  */\n  if( rc==SQLITE_OK ){\n    pNew->db = db;\n    pNew->iSample = 100;\n    rc = sqlite3_open(\":memory:\", &pNew->dbv);\n  }\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_open(\":memory:\", &pNew->dbm);\n    if( rc==SQLITE_OK ){\n      sqlite3_db_config(pNew->dbm, SQLITE_DBCONFIG_TRIGGER_EQP, 1, (int*)0);\n    }\n  }\n  \n\n  /* Copy the entire schema of database [db] into [dbm]. */\n  if( rc==SQLITE_OK ){\n    sqlite3_stmt *pSql;\n    rc = idxPrintfPrepareStmt(pNew->db, &pSql, pzErrmsg, \n        \"SELECT sql FROM sqlite_master WHERE name NOT LIKE 'sqlite_%%'\"\n        \" AND sql NOT LIKE 'CREATE VIRTUAL %%'\"\n    );\n    while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSql) ){\n      const char *zSql = (const char*)sqlite3_column_text(pSql, 0);\n      rc = sqlite3_exec(pNew->dbm, zSql, 0, 0, pzErrmsg);\n    }\n    idxFinalize(&rc, pSql);\n  }\n\n  /* Create the vtab schema */\n  if( rc==SQLITE_OK ){\n    rc = idxCreateVtabSchema(pNew, pzErrmsg);\n  }\n\n  /* Register the auth callback with dbv */\n  if( rc==SQLITE_OK ){\n    sqlite3_set_authorizer(pNew->dbv, idxAuthCallback, (void*)pNew);\n  }\n\n  /* If an error has occurred, free the new object and reutrn NULL. Otherwise,\n  ** return the new sqlite3expert handle.  */\n  if( rc!=SQLITE_OK ){\n    sqlite3_expert_destroy(pNew);\n    pNew = 0;\n  }\n  return pNew;\n}\n\n/*\n** Configure an sqlite3expert object.\n*/\nint sqlite3_expert_config(sqlite3expert *p, int op, ...){\n  int rc = SQLITE_OK;\n  va_list ap;\n  va_start(ap, op);\n  switch( op ){\n    case EXPERT_CONFIG_SAMPLE: {\n      int iVal = va_arg(ap, int);\n      if( iVal<0 ) iVal = 0;\n      if( iVal>100 ) iVal = 100;\n      p->iSample = iVal;\n      break;\n    }\n    default:\n      rc = SQLITE_NOTFOUND;\n      break;\n  }\n\n  va_end(ap);\n  return rc;\n}\n\n/*\n** Add an SQL statement to the analysis.\n*/\nint sqlite3_expert_sql(\n  sqlite3expert *p,               /* From sqlite3_expert_new() */\n  const char *zSql,               /* SQL statement to add */\n  char **pzErr                    /* OUT: Error message (if any) */\n){\n  IdxScan *pScanOrig = p->pScan;\n  IdxStatement *pStmtOrig = p->pStatement;\n  int rc = SQLITE_OK;\n  const char *zStmt = zSql;\n\n  if( p->bRun ) return SQLITE_MISUSE;\n\n  while( rc==SQLITE_OK && zStmt && zStmt[0] ){\n    sqlite3_stmt *pStmt = 0;\n    rc = sqlite3_prepare_v2(p->dbv, zStmt, -1, &pStmt, &zStmt);\n    if( rc==SQLITE_OK ){\n      if( pStmt ){\n        IdxStatement *pNew;\n        const char *z = sqlite3_sql(pStmt);\n        int n = STRLEN(z);\n        pNew = (IdxStatement*)idxMalloc(&rc, sizeof(IdxStatement) + n+1);\n        if( rc==SQLITE_OK ){\n          pNew->zSql = (char*)&pNew[1];\n          memcpy(pNew->zSql, z, n+1);\n          pNew->pNext = p->pStatement;\n          if( p->pStatement ) pNew->iId = p->pStatement->iId+1;\n          p->pStatement = pNew;\n        }\n        sqlite3_finalize(pStmt);\n      }\n    }else{\n      idxDatabaseError(p->dbv, pzErr);\n    }\n  }\n\n  if( rc!=SQLITE_OK ){\n    idxScanFree(p->pScan, pScanOrig);\n    idxStatementFree(p->pStatement, pStmtOrig);\n    p->pScan = pScanOrig;\n    p->pStatement = pStmtOrig;\n  }\n\n  return rc;\n}\n\nint sqlite3_expert_analyze(sqlite3expert *p, char **pzErr){\n  int rc;\n  IdxHashEntry *pEntry;\n\n  /* Do trigger processing to collect any extra IdxScan structures */\n  rc = idxProcessTriggers(p, pzErr);\n\n  /* Create candidate indexes within the in-memory database file */\n  if( rc==SQLITE_OK ){\n    rc = idxCreateCandidates(p);\n  }\n\n  /* Generate the stat1 data */\n  if( rc==SQLITE_OK ){\n    rc = idxPopulateStat1(p, pzErr);\n  }\n\n  /* Formulate the EXPERT_REPORT_CANDIDATES text */\n  for(pEntry=p->hIdx.pFirst; pEntry; pEntry=pEntry->pNext){\n    p->zCandidates = idxAppendText(&rc, p->zCandidates, \n        \"%s;%s%s\\n\", pEntry->zVal, \n        pEntry->zVal2 ? \" -- stat1: \" : \"\", pEntry->zVal2\n    );\n  }\n\n  /* Figure out which of the candidate indexes are preferred by the query\n  ** planner and report the results to the user.  */\n  if( rc==SQLITE_OK ){\n    rc = idxFindIndexes(p, pzErr);\n  }\n\n  if( rc==SQLITE_OK ){\n    p->bRun = 1;\n  }\n  return rc;\n}\n\n/*\n** Return the total number of statements that have been added to this\n** sqlite3expert using sqlite3_expert_sql().\n*/\nint sqlite3_expert_count(sqlite3expert *p){\n  int nRet = 0;\n  if( p->pStatement ) nRet = p->pStatement->iId+1;\n  return nRet;\n}\n\n/*\n** Return a component of the report.\n*/\nconst char *sqlite3_expert_report(sqlite3expert *p, int iStmt, int eReport){\n  const char *zRet = 0;\n  IdxStatement *pStmt;\n\n  if( p->bRun==0 ) return 0;\n  for(pStmt=p->pStatement; pStmt && pStmt->iId!=iStmt; pStmt=pStmt->pNext);\n  switch( eReport ){\n    case EXPERT_REPORT_SQL:\n      if( pStmt ) zRet = pStmt->zSql;\n      break;\n    case EXPERT_REPORT_INDEXES:\n      if( pStmt ) zRet = pStmt->zIdx;\n      break;\n    case EXPERT_REPORT_PLAN:\n      if( pStmt ) zRet = pStmt->zEQP;\n      break;\n    case EXPERT_REPORT_CANDIDATES:\n      zRet = p->zCandidates;\n      break;\n  }\n  return zRet;\n}\n\n/*\n** Free an sqlite3expert object.\n*/\nvoid sqlite3_expert_destroy(sqlite3expert *p){\n  if( p ){\n    sqlite3_close(p->dbm);\n    sqlite3_close(p->dbv);\n    idxScanFree(p->pScan, 0);\n    idxStatementFree(p->pStatement, 0);\n    idxTableFree(p->pTable);\n    idxWriteFree(p->pWrite);\n    idxHashClear(&p->hIdx);\n    sqlite3_free(p->zCandidates);\n    sqlite3_free(p);\n  }\n}\n\n#endif /* ifndef SQLITE_OMIT_VIRTUAL_TABLE */\n\n/************************* End ../ext/expert/sqlite3expert.c ********************/\n\n#if defined(SQLITE_ENABLE_SESSION)\n/*\n** State information for a single open session\n*/\ntypedef struct OpenSession OpenSession;\nstruct OpenSession {\n  char *zName;             /* Symbolic name for this session */\n  int nFilter;             /* Number of xFilter rejection GLOB patterns */\n  char **azFilter;         /* Array of xFilter rejection GLOB patterns */\n  sqlite3_session *p;      /* The open session */\n};\n#endif\n\n/*\n** Shell output mode information from before \".explain on\",\n** saved so that it can be restored by \".explain off\"\n*/\ntypedef struct SavedModeInfo SavedModeInfo;\nstruct SavedModeInfo {\n  int valid;          /* Is there legit data in here? */\n  int mode;           /* Mode prior to \".explain on\" */\n  int showHeader;     /* The \".header\" setting prior to \".explain on\" */\n  int colWidth[100];  /* Column widths prior to \".explain on\" */\n};\n\ntypedef struct ExpertInfo ExpertInfo;\nstruct ExpertInfo {\n  sqlite3expert *pExpert;\n  int bVerbose;\n};\n\n/* A single line in the EQP output */\ntypedef struct EQPGraphRow EQPGraphRow;\nstruct EQPGraphRow {\n  int iEqpId;           /* ID for this row */\n  int iParentId;        /* ID of the parent row */\n  EQPGraphRow *pNext;   /* Next row in sequence */\n  char zText[1];        /* Text to display for this row */\n};\n\n/* All EQP output is collected into an instance of the following */\ntypedef struct EQPGraph EQPGraph;\nstruct EQPGraph {\n  EQPGraphRow *pRow;    /* Linked list of all rows of the EQP output */\n  EQPGraphRow *pLast;   /* Last element of the pRow list */\n  char zPrefix[100];    /* Graph prefix */\n};\n\n/*\n** State information about the database connection is contained in an\n** instance of the following structure.\n*/\ntypedef struct ShellState ShellState;\nstruct ShellState {\n  sqlite3 *db;           /* The database */\n  u8 autoExplain;        /* Automatically turn on .explain mode */\n  u8 autoEQP;            /* Run EXPLAIN QUERY PLAN prior to seach SQL stmt */\n  u8 autoEQPtest;        /* autoEQP is in test mode */\n  u8 autoEQPtrace;       /* autoEQP is in trace mode */\n  u8 statsOn;            /* True to display memory stats before each finalize */\n  u8 scanstatsOn;        /* True to display scan stats before each finalize */\n  u8 openMode;           /* SHELL_OPEN_NORMAL, _APPENDVFS, or _ZIPFILE */\n  u8 doXdgOpen;          /* Invoke start/open/xdg-open in output_reset() */\n  u8 nEqpLevel;          /* Depth of the EQP output graph */\n  u8 eTraceType;         /* SHELL_TRACE_* value for type of trace */\n  unsigned mEqpLines;    /* Mask of veritical lines in the EQP output graph */\n  int outCount;          /* Revert to stdout when reaching zero */\n  int cnt;               /* Number of records displayed so far */\n  int lineno;            /* Line number of last line read from in */\n  FILE *in;              /* Read commands from this stream */\n  FILE *out;             /* Write results here */\n  FILE *traceOut;        /* Output for sqlite3_trace() */\n  int nErr;              /* Number of errors seen */\n  int mode;              /* An output mode setting */\n  int modePrior;         /* Saved mode */\n  int cMode;             /* temporary output mode for the current query */\n  int normalMode;        /* Output mode before \".explain on\" */\n  int writableSchema;    /* True if PRAGMA writable_schema=ON */\n  int showHeader;        /* True to show column names in List or Column mode */\n  int nCheck;            /* Number of \".check\" commands run */\n  unsigned nProgress;    /* Number of progress callbacks encountered */\n  unsigned mxProgress;   /* Maximum progress callbacks before failing */\n  unsigned flgProgress;  /* Flags for the progress callback */\n  unsigned shellFlgs;    /* Various flags */\n  sqlite3_int64 szMax;   /* --maxsize argument to .open */\n  char *zDestTable;      /* Name of destination table when MODE_Insert */\n  char *zTempFile;       /* Temporary file that might need deleting */\n  char zTestcase[30];    /* Name of current test case */\n  char colSeparator[20]; /* Column separator character for several modes */\n  char rowSeparator[20]; /* Row separator character for MODE_Ascii */\n  char colSepPrior[20];  /* Saved column separator */\n  char rowSepPrior[20];  /* Saved row separator */\n  int colWidth[100];     /* Requested width of each column when in column mode*/\n  int actualWidth[100];  /* Actual width of each column */\n  char nullValue[20];    /* The text to print when a NULL comes back from\n                         ** the database */\n  char outfile[FILENAME_MAX]; /* Filename for *out */\n  const char *zDbFilename;    /* name of the database file */\n  char *zFreeOnClose;         /* Filename to free when closing */\n  const char *zVfs;           /* Name of VFS to use */\n  sqlite3_stmt *pStmt;   /* Current statement if any. */\n  FILE *pLog;            /* Write log output here */\n  int *aiIndent;         /* Array of indents used in MODE_Explain */\n  int nIndent;           /* Size of array aiIndent[] */\n  int iIndent;           /* Index of current op in aiIndent[] */\n  EQPGraph sGraph;       /* Information for the graphical EXPLAIN QUERY PLAN */\n#if defined(SQLITE_ENABLE_SESSION)\n  int nSession;             /* Number of active sessions */\n  OpenSession aSession[4];  /* Array of sessions.  [0] is in focus. */\n#endif\n  ExpertInfo expert;        /* Valid if previous command was \".expert OPT...\" */\n};\n\n\n/* Allowed values for ShellState.autoEQP\n*/\n#define AUTOEQP_off      0           /* Automatic EXPLAIN QUERY PLAN is off */\n#define AUTOEQP_on       1           /* Automatic EQP is on */\n#define AUTOEQP_trigger  2           /* On and also show plans for triggers */\n#define AUTOEQP_full     3           /* Show full EXPLAIN */\n\n/* Allowed values for ShellState.openMode\n*/\n#define SHELL_OPEN_UNSPEC      0      /* No open-mode specified */\n#define SHELL_OPEN_NORMAL      1      /* Normal database file */\n#define SHELL_OPEN_APPENDVFS   2      /* Use appendvfs */\n#define SHELL_OPEN_ZIPFILE     3      /* Use the zipfile virtual table */\n#define SHELL_OPEN_READONLY    4      /* Open a normal database read-only */\n#define SHELL_OPEN_DESERIALIZE 5      /* Open using sqlite3_deserialize() */\n#define SHELL_OPEN_HEXDB       6      /* Use \"dbtotxt\" output as data source */\n\n/* Allowed values for ShellState.eTraceType\n*/\n#define SHELL_TRACE_PLAIN      0      /* Show input SQL text */\n#define SHELL_TRACE_EXPANDED   1      /* Show expanded SQL text */\n#define SHELL_TRACE_NORMALIZED 2      /* Show normalized SQL text */\n\n/* Bits in the ShellState.flgProgress variable */\n#define SHELL_PROGRESS_QUIET 0x01  /* Omit announcing every progress callback */\n#define SHELL_PROGRESS_RESET 0x02  /* Reset the count when the progres\n                                   ** callback limit is reached, and for each\n                                   ** top-level SQL statement */\n#define SHELL_PROGRESS_ONCE  0x04  /* Cancel the --limit after firing once */\n\n/*\n** These are the allowed shellFlgs values\n*/\n#define SHFLG_Pagecache      0x00000001 /* The --pagecache option is used */\n#define SHFLG_Lookaside      0x00000002 /* Lookaside memory is used */\n#define SHFLG_Backslash      0x00000004 /* The --backslash option is used */\n#define SHFLG_PreserveRowid  0x00000008 /* .dump preserves rowid values */\n#define SHFLG_Newlines       0x00000010 /* .dump --newline flag */\n#define SHFLG_CountChanges   0x00000020 /* .changes setting */\n#define SHFLG_Echo           0x00000040 /* .echo or --echo setting */\n\n/*\n** Macros for testing and setting shellFlgs\n*/\n#define ShellHasFlag(P,X)    (((P)->shellFlgs & (X))!=0)\n#define ShellSetFlag(P,X)    ((P)->shellFlgs|=(X))\n#define ShellClearFlag(P,X)  ((P)->shellFlgs&=(~(X)))\n\n/*\n** These are the allowed modes.\n*/\n#define MODE_Line     0  /* One column per line.  Blank line between records */\n#define MODE_Column   1  /* One record per line in neat columns */\n#define MODE_List     2  /* One record per line with a separator */\n#define MODE_Semi     3  /* Same as MODE_List but append \";\" to each line */\n#define MODE_Html     4  /* Generate an XHTML table */\n#define MODE_Insert   5  /* Generate SQL \"insert\" statements */\n#define MODE_Quote    6  /* Quote values as for SQL */\n#define MODE_Tcl      7  /* Generate ANSI-C or TCL quoted elements */\n#define MODE_Csv      8  /* Quote strings, numbers are plain */\n#define MODE_Explain  9  /* Like MODE_Column, but do not truncate data */\n#define MODE_Ascii   10  /* Use ASCII unit and record separators (0x1F/0x1E) */\n#define MODE_Pretty  11  /* Pretty-print schemas */\n#define MODE_EQP     12  /* Converts EXPLAIN QUERY PLAN output into a graph */\n\nstatic const char *modeDescr[] = {\n  \"line\",\n  \"column\",\n  \"list\",\n  \"semi\",\n  \"html\",\n  \"insert\",\n  \"quote\",\n  \"tcl\",\n  \"csv\",\n  \"explain\",\n  \"ascii\",\n  \"prettyprint\",\n  \"eqp\"\n};\n\n/*\n** These are the column/row/line separators used by the various\n** import/export modes.\n*/\n#define SEP_Column    \"|\"\n#define SEP_Row       \"\\n\"\n#define SEP_Tab       \"\\t\"\n#define SEP_Space     \" \"\n#define SEP_Comma     \",\"\n#define SEP_CrLf      \"\\r\\n\"\n#define SEP_Unit      \"\\x1F\"\n#define SEP_Record    \"\\x1E\"\n\n/*\n** A callback for the sqlite3_log() interface.\n*/\nstatic void shellLog(void *pArg, int iErrCode, const char *zMsg){\n  ShellState *p = (ShellState*)pArg;\n  if( p->pLog==0 ) return;\n  utf8_printf(p->pLog, \"(%d) %s\\n\", iErrCode, zMsg);\n  fflush(p->pLog);\n}\n\n/*\n** SQL function:  shell_putsnl(X)\n**\n** Write the text X to the screen (or whatever output is being directed)\n** adding a newline at the end, and then return X.\n*/\nstatic void shellPutsFunc(\n  sqlite3_context *pCtx,\n  int nVal,\n  sqlite3_value **apVal\n){\n  ShellState *p = (ShellState*)sqlite3_user_data(pCtx);\n  (void)nVal;\n  utf8_printf(p->out, \"%s\\n\", sqlite3_value_text(apVal[0]));\n  sqlite3_result_value(pCtx, apVal[0]);\n}\n\n/*\n** SQL function:   edit(VALUE)\n**                 edit(VALUE,EDITOR)\n**\n** These steps:\n**\n**     (1) Write VALUE into a temporary file.\n**     (2) Run program EDITOR on that temporary file.\n**     (3) Read the temporary file back and return its content as the result.\n**     (4) Delete the temporary file\n**\n** If the EDITOR argument is omitted, use the value in the VISUAL\n** environment variable.  If still there is no EDITOR, through an error.\n**\n** Also throw an error if the EDITOR program returns a non-zero exit code.\n*/\n#ifndef SQLITE_NOHAVE_SYSTEM\nstatic void editFunc(\n  sqlite3_context *context,\n  int argc,\n  sqlite3_value **argv\n){\n  const char *zEditor;\n  char *zTempFile = 0;\n  sqlite3 *db;\n  char *zCmd = 0;\n  int bBin;\n  int rc;\n  int hasCRNL = 0;\n  FILE *f = 0;\n  sqlite3_int64 sz;\n  sqlite3_int64 x;\n  unsigned char *p = 0;\n\n  if( argc==2 ){\n    zEditor = (const char*)sqlite3_value_text(argv[1]);\n  }else{\n    zEditor = getenv(\"VISUAL\");\n  }\n  if( zEditor==0 ){\n    sqlite3_result_error(context, \"no editor for edit()\", -1);\n    return;\n  }\n  if( sqlite3_value_type(argv[0])==SQLITE_NULL ){\n    sqlite3_result_error(context, \"NULL input to edit()\", -1);\n    return;\n  }\n  db = sqlite3_context_db_handle(context);\n  zTempFile = 0;\n  sqlite3_file_control(db, 0, SQLITE_FCNTL_TEMPFILENAME, &zTempFile);\n  if( zTempFile==0 ){\n    sqlite3_uint64 r = 0;\n    sqlite3_randomness(sizeof(r), &r);\n    zTempFile = sqlite3_mprintf(\"temp%llx\", r);\n    if( zTempFile==0 ){\n      sqlite3_result_error_nomem(context);\n      return;\n    }\n  }\n  bBin = sqlite3_value_type(argv[0])==SQLITE_BLOB;\n  /* When writing the file to be edited, do \\n to \\r\\n conversions on systems\n  ** that want \\r\\n line endings */\n  f = fopen(zTempFile, bBin ? \"wb\" : \"w\");\n  if( f==0 ){\n    sqlite3_result_error(context, \"edit() cannot open temp file\", -1);\n    goto edit_func_end;\n  }\n  sz = sqlite3_value_bytes(argv[0]);\n  if( bBin ){\n    x = fwrite(sqlite3_value_blob(argv[0]), 1, sz, f);\n  }else{\n    const char *z = (const char*)sqlite3_value_text(argv[0]);\n    /* Remember whether or not the value originally contained \\r\\n */\n    if( z && strstr(z,\"\\r\\n\")!=0 ) hasCRNL = 1;\n    x = fwrite(sqlite3_value_text(argv[0]), 1, sz, f);\n  }\n  fclose(f);\n  f = 0;\n  if( x!=sz ){\n    sqlite3_result_error(context, \"edit() could not write the whole file\", -1);\n    goto edit_func_end;\n  }\n  zCmd = sqlite3_mprintf(\"%s \\\"%s\\\"\", zEditor, zTempFile);\n  if( zCmd==0 ){\n    sqlite3_result_error_nomem(context);\n    goto edit_func_end;\n  }\n  rc = system(zCmd);\n  sqlite3_free(zCmd);\n  if( rc ){\n    sqlite3_result_error(context, \"EDITOR returned non-zero\", -1);\n    goto edit_func_end;\n  }\n  f = fopen(zTempFile, \"rb\");\n  if( f==0 ){\n    sqlite3_result_error(context,\n      \"edit() cannot reopen temp file after edit\", -1);\n    goto edit_func_end;\n  }\n  fseek(f, 0, SEEK_END);\n  sz = ftell(f);\n  rewind(f);\n  p = sqlite3_malloc64( sz+(bBin==0) );\n  if( p==0 ){\n    sqlite3_result_error_nomem(context);\n    goto edit_func_end;\n  }\n  x = fread(p, 1, sz, f);\n  fclose(f);\n  f = 0;\n  if( x!=sz ){\n    sqlite3_result_error(context, \"could not read back the whole file\", -1);\n    goto edit_func_end;\n  }\n  if( bBin ){\n    sqlite3_result_blob64(context, p, sz, sqlite3_free);\n  }else{\n    sqlite3_int64 i, j;\n    if( hasCRNL ){\n      /* If the original contains \\r\\n then do no conversions back to \\n */\n      j = sz;\n    }else{\n      /* If the file did not originally contain \\r\\n then convert any new\n      ** \\r\\n back into \\n */\n      for(i=j=0; i<sz; i++){\n        if( p[i]=='\\r' && p[i+1]=='\\n' ) i++;\n        p[j++] = p[i];\n      }\n      sz = j;\n      p[sz] = 0;\n    } \n    sqlite3_result_text64(context, (const char*)p, sz,\n                          sqlite3_free, SQLITE_UTF8);\n  }\n  p = 0;\n\nedit_func_end:\n  if( f ) fclose(f);\n  unlink(zTempFile);\n  sqlite3_free(zTempFile);\n  sqlite3_free(p);\n}\n#endif /* SQLITE_NOHAVE_SYSTEM */\n\n/*\n** Save or restore the current output mode\n*/\nstatic void outputModePush(ShellState *p){\n  p->modePrior = p->mode;\n  memcpy(p->colSepPrior, p->colSeparator, sizeof(p->colSeparator));\n  memcpy(p->rowSepPrior, p->rowSeparator, sizeof(p->rowSeparator));\n}\nstatic void outputModePop(ShellState *p){\n  p->mode = p->modePrior;\n  memcpy(p->colSeparator, p->colSepPrior, sizeof(p->colSeparator));\n  memcpy(p->rowSeparator, p->rowSepPrior, sizeof(p->rowSeparator));\n}\n\n/*\n** Output the given string as a hex-encoded blob (eg. X'1234' )\n*/\nstatic void output_hex_blob(FILE *out, const void *pBlob, int nBlob){\n  int i;\n  char *zBlob = (char *)pBlob;\n  raw_printf(out,\"X'\");\n  for(i=0; i<nBlob; i++){ raw_printf(out,\"%02x\",zBlob[i]&0xff); }\n  raw_printf(out,\"'\");\n}\n\n/*\n** Find a string that is not found anywhere in z[].  Return a pointer\n** to that string.\n**\n** Try to use zA and zB first.  If both of those are already found in z[]\n** then make up some string and store it in the buffer zBuf.\n*/\nstatic const char *unused_string(\n  const char *z,                    /* Result must not appear anywhere in z */\n  const char *zA, const char *zB,   /* Try these first */\n  char *zBuf                        /* Space to store a generated string */\n){\n  unsigned i = 0;\n  if( strstr(z, zA)==0 ) return zA;\n  if( strstr(z, zB)==0 ) return zB;\n  do{\n    sqlite3_snprintf(20,zBuf,\"(%s%u)\", zA, i++);\n  }while( strstr(z,zBuf)!=0 );\n  return zBuf;\n}\n\n/*\n** Output the given string as a quoted string using SQL quoting conventions.\n**\n** See also: output_quoted_escaped_string()\n*/\nstatic void output_quoted_string(FILE *out, const char *z){\n  int i;\n  char c;\n  setBinaryMode(out, 1);\n  for(i=0; (c = z[i])!=0 && c!='\\''; i++){}\n  if( c==0 ){\n    utf8_printf(out,\"'%s'\",z);\n  }else{\n    raw_printf(out, \"'\");\n    while( *z ){\n      for(i=0; (c = z[i])!=0 && c!='\\''; i++){}\n      if( c=='\\'' ) i++;\n      if( i ){\n        utf8_printf(out, \"%.*s\", i, z);\n        z += i;\n      }\n      if( c=='\\'' ){\n        raw_printf(out, \"'\");\n        continue;\n      }\n      if( c==0 ){\n        break;\n      }\n      z++;\n    }\n    raw_printf(out, \"'\");\n  }\n  setTextMode(out, 1);\n}\n\n/*\n** Output the given string as a quoted string using SQL quoting conventions.\n** Additionallly , escape the \"\\n\" and \"\\r\" characters so that they do not\n** get corrupted by end-of-line translation facilities in some operating\n** systems.\n**\n** This is like output_quoted_string() but with the addition of the \\r\\n\n** escape mechanism.\n*/\nstatic void output_quoted_escaped_string(FILE *out, const char *z){\n  int i;\n  char c;\n  setBinaryMode(out, 1);\n  for(i=0; (c = z[i])!=0 && c!='\\'' && c!='\\n' && c!='\\r'; i++){}\n  if( c==0 ){\n    utf8_printf(out,\"'%s'\",z);\n  }else{\n    const char *zNL = 0;\n    const char *zCR = 0;\n    int nNL = 0;\n    int nCR = 0;\n    char zBuf1[20], zBuf2[20];\n    for(i=0; z[i]; i++){\n      if( z[i]=='\\n' ) nNL++;\n      if( z[i]=='\\r' ) nCR++;\n    }\n    if( nNL ){\n      raw_printf(out, \"replace(\");\n      zNL = unused_string(z, \"\\\\n\", \"\\\\012\", zBuf1);\n    }\n    if( nCR ){\n      raw_printf(out, \"replace(\");\n      zCR = unused_string(z, \"\\\\r\", \"\\\\015\", zBuf2);\n    }\n    raw_printf(out, \"'\");\n    while( *z ){\n      for(i=0; (c = z[i])!=0 && c!='\\n' && c!='\\r' && c!='\\''; i++){}\n      if( c=='\\'' ) i++;\n      if( i ){\n        utf8_printf(out, \"%.*s\", i, z);\n        z += i;\n      }\n      if( c=='\\'' ){\n        raw_printf(out, \"'\");\n        continue;\n      }\n      if( c==0 ){\n        break;\n      }\n      z++;\n      if( c=='\\n' ){\n        raw_printf(out, \"%s\", zNL);\n        continue;\n      }\n      raw_printf(out, \"%s\", zCR);\n    }\n    raw_printf(out, \"'\");\n    if( nCR ){\n      raw_printf(out, \",'%s',char(13))\", zCR);\n    }\n    if( nNL ){\n      raw_printf(out, \",'%s',char(10))\", zNL);\n    }\n  }\n  setTextMode(out, 1);\n}\n\n/*\n** Output the given string as a quoted according to C or TCL quoting rules.\n*/\nstatic void output_c_string(FILE *out, const char *z){\n  unsigned int c;\n  fputc('\"', out);\n  while( (c = *(z++))!=0 ){\n    if( c=='\\\\' ){\n      fputc(c, out);\n      fputc(c, out);\n    }else if( c=='\"' ){\n      fputc('\\\\', out);\n      fputc('\"', out);\n    }else if( c=='\\t' ){\n      fputc('\\\\', out);\n      fputc('t', out);\n    }else if( c=='\\n' ){\n      fputc('\\\\', out);\n      fputc('n', out);\n    }else if( c=='\\r' ){\n      fputc('\\\\', out);\n      fputc('r', out);\n    }else if( !isprint(c&0xff) ){\n      raw_printf(out, \"\\\\%03o\", c&0xff);\n    }else{\n      fputc(c, out);\n    }\n  }\n  fputc('\"', out);\n}\n\n/*\n** Output the given string with characters that are special to\n** HTML escaped.\n*/\nstatic void output_html_string(FILE *out, const char *z){\n  int i;\n  if( z==0 ) z = \"\";\n  while( *z ){\n    for(i=0;   z[i]\n            && z[i]!='<'\n            && z[i]!='&'\n            && z[i]!='>'\n            && z[i]!='\\\"'\n            && z[i]!='\\'';\n        i++){}\n    if( i>0 ){\n      utf8_printf(out,\"%.*s\",i,z);\n    }\n    if( z[i]=='<' ){\n      raw_printf(out,\"&lt;\");\n    }else if( z[i]=='&' ){\n      raw_printf(out,\"&amp;\");\n    }else if( z[i]=='>' ){\n      raw_printf(out,\"&gt;\");\n    }else if( z[i]=='\\\"' ){\n      raw_printf(out,\"&quot;\");\n    }else if( z[i]=='\\'' ){\n      raw_printf(out,\"&#39;\");\n    }else{\n      break;\n    }\n    z += i + 1;\n  }\n}\n\n/*\n** If a field contains any character identified by a 1 in the following\n** array, then the string must be quoted for CSV.\n*/\nstatic const char needCsvQuote[] = {\n  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,\n  1, 0, 1, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 1,\n  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,\n  1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1,\n};\n\n/*\n** Output a single term of CSV.  Actually, p->colSeparator is used for\n** the separator, which may or may not be a comma.  p->nullValue is\n** the null value.  Strings are quoted if necessary.  The separator\n** is only issued if bSep is true.\n*/\nstatic void output_csv(ShellState *p, const char *z, int bSep){\n  FILE *out = p->out;\n  if( z==0 ){\n    utf8_printf(out,\"%s\",p->nullValue);\n  }else{\n    int i;\n    int nSep = strlen30(p->colSeparator);\n    for(i=0; z[i]; i++){\n      if( needCsvQuote[((unsigned char*)z)[i]]\n         || (z[i]==p->colSeparator[0] &&\n             (nSep==1 || memcmp(z, p->colSeparator, nSep)==0)) ){\n        i = 0;\n        break;\n      }\n    }\n    if( i==0 ){\n      char *zQuoted = sqlite3_mprintf(\"\\\"%w\\\"\", z);\n      utf8_printf(out, \"%s\", zQuoted);\n      sqlite3_free(zQuoted);\n    }else{\n      utf8_printf(out, \"%s\", z);\n    }\n  }\n  if( bSep ){\n    utf8_printf(p->out, \"%s\", p->colSeparator);\n  }\n}\n\n/*\n** This routine runs when the user presses Ctrl-C\n*/\nstatic void interrupt_handler(int NotUsed){\n  UNUSED_PARAMETER(NotUsed);\n  seenInterrupt++;\n  if( seenInterrupt>2 ) exit(1);\n  if( globalDb ) sqlite3_interrupt(globalDb);\n}\n\n#if (defined(_WIN32) || defined(WIN32)) && !defined(_WIN32_WCE)\n/*\n** This routine runs for console events (e.g. Ctrl-C) on Win32\n*/\nstatic BOOL WINAPI ConsoleCtrlHandler(\n  DWORD dwCtrlType /* One of the CTRL_*_EVENT constants */\n){\n  if( dwCtrlType==CTRL_C_EVENT ){\n    interrupt_handler(0);\n    return TRUE;\n  }\n  return FALSE;\n}\n#endif\n\n#ifndef SQLITE_OMIT_AUTHORIZATION\n/*\n** When the \".auth ON\" is set, the following authorizer callback is\n** invoked.  It always returns SQLITE_OK.\n*/\nstatic int shellAuth(\n  void *pClientData,\n  int op,\n  const char *zA1,\n  const char *zA2,\n  const char *zA3,\n  const char *zA4\n){\n  ShellState *p = (ShellState*)pClientData;\n  static const char *azAction[] = { 0,\n     \"CREATE_INDEX\",         \"CREATE_TABLE\",         \"CREATE_TEMP_INDEX\",\n     \"CREATE_TEMP_TABLE\",    \"CREATE_TEMP_TRIGGER\",  \"CREATE_TEMP_VIEW\",\n     \"CREATE_TRIGGER\",       \"CREATE_VIEW\",          \"DELETE\",\n     \"DROP_INDEX\",           \"DROP_TABLE\",           \"DROP_TEMP_INDEX\",\n     \"DROP_TEMP_TABLE\",      \"DROP_TEMP_TRIGGER\",    \"DROP_TEMP_VIEW\",\n     \"DROP_TRIGGER\",         \"DROP_VIEW\",            \"INSERT\",\n     \"PRAGMA\",               \"READ\",                 \"SELECT\",\n     \"TRANSACTION\",          \"UPDATE\",               \"ATTACH\",\n     \"DETACH\",               \"ALTER_TABLE\",          \"REINDEX\",\n     \"ANALYZE\",              \"CREATE_VTABLE\",        \"DROP_VTABLE\",\n     \"FUNCTION\",             \"SAVEPOINT\",            \"RECURSIVE\"\n  };\n  int i;\n  const char *az[4];\n  az[0] = zA1;\n  az[1] = zA2;\n  az[2] = zA3;\n  az[3] = zA4;\n  utf8_printf(p->out, \"authorizer: %s\", azAction[op]);\n  for(i=0; i<4; i++){\n    raw_printf(p->out, \" \");\n    if( az[i] ){\n      output_c_string(p->out, az[i]);\n    }else{\n      raw_printf(p->out, \"NULL\");\n    }\n  }\n  raw_printf(p->out, \"\\n\");\n  return SQLITE_OK;\n}\n#endif\n\n/*\n** Print a schema statement.  Part of MODE_Semi and MODE_Pretty output.\n**\n** This routine converts some CREATE TABLE statements for shadow tables\n** in FTS3/4/5 into CREATE TABLE IF NOT EXISTS statements.\n*/\nstatic void printSchemaLine(FILE *out, const char *z, const char *zTail){\n  if( sqlite3_strglob(\"CREATE TABLE ['\\\"]*\", z)==0 ){\n    utf8_printf(out, \"CREATE TABLE IF NOT EXISTS %s%s\", z+13, zTail);\n  }else{\n    utf8_printf(out, \"%s%s\", z, zTail);\n  }\n}\nstatic void printSchemaLineN(FILE *out, char *z, int n, const char *zTail){\n  char c = z[n];\n  z[n] = 0;\n  printSchemaLine(out, z, zTail);\n  z[n] = c;\n}\n\n/*\n** Return true if string z[] has nothing but whitespace and comments to the\n** end of the first line.\n*/\nstatic int wsToEol(const char *z){\n  int i;\n  for(i=0; z[i]; i++){\n    if( z[i]=='\\n' ) return 1;\n    if( IsSpace(z[i]) ) continue;\n    if( z[i]=='-' && z[i+1]=='-' ) return 1;\n    return 0;\n  }\n  return 1;\n}\n\n/*\n** Add a new entry to the EXPLAIN QUERY PLAN data\n*/\nstatic void eqp_append(ShellState *p, int iEqpId, int p2, const char *zText){\n  EQPGraphRow *pNew;\n  int nText = strlen30(zText);\n  if( p->autoEQPtest ){\n    utf8_printf(p->out, \"%d,%d,%s\\n\", iEqpId, p2, zText);\n  }\n  pNew = sqlite3_malloc64( sizeof(*pNew) + nText );\n  if( pNew==0 ) shell_out_of_memory();\n  pNew->iEqpId = iEqpId;\n  pNew->iParentId = p2;\n  memcpy(pNew->zText, zText, nText+1);\n  pNew->pNext = 0;\n  if( p->sGraph.pLast ){\n    p->sGraph.pLast->pNext = pNew;\n  }else{\n    p->sGraph.pRow = pNew;\n  }\n  p->sGraph.pLast = pNew;\n}\n\n/*\n** Free and reset the EXPLAIN QUERY PLAN data that has been collected\n** in p->sGraph.\n*/\nstatic void eqp_reset(ShellState *p){\n  EQPGraphRow *pRow, *pNext;\n  for(pRow = p->sGraph.pRow; pRow; pRow = pNext){\n    pNext = pRow->pNext;\n    sqlite3_free(pRow);\n  }\n  memset(&p->sGraph, 0, sizeof(p->sGraph));\n}\n\n/* Return the next EXPLAIN QUERY PLAN line with iEqpId that occurs after\n** pOld, or return the first such line if pOld is NULL\n*/\nstatic EQPGraphRow *eqp_next_row(ShellState *p, int iEqpId, EQPGraphRow *pOld){\n  EQPGraphRow *pRow = pOld ? pOld->pNext : p->sGraph.pRow;\n  while( pRow && pRow->iParentId!=iEqpId ) pRow = pRow->pNext;\n  return pRow;\n}\n\n/* Render a single level of the graph that has iEqpId as its parent.  Called\n** recursively to render sublevels.\n*/\nstatic void eqp_render_level(ShellState *p, int iEqpId){\n  EQPGraphRow *pRow, *pNext;\n  int n = strlen30(p->sGraph.zPrefix);\n  char *z;\n  for(pRow = eqp_next_row(p, iEqpId, 0); pRow; pRow = pNext){\n    pNext = eqp_next_row(p, iEqpId, pRow);\n    z = pRow->zText;\n    utf8_printf(p->out, \"%s%s%s\\n\", p->sGraph.zPrefix, pNext ? \"|--\" : \"`--\", z);\n    if( n<(int)sizeof(p->sGraph.zPrefix)-7 ){\n      memcpy(&p->sGraph.zPrefix[n], pNext ? \"|  \" : \"   \", 4);\n      eqp_render_level(p, pRow->iEqpId);\n      p->sGraph.zPrefix[n] = 0;\n    }\n  }\n}\n\n/*\n** Display and reset the EXPLAIN QUERY PLAN data\n*/\nstatic void eqp_render(ShellState *p){\n  EQPGraphRow *pRow = p->sGraph.pRow;\n  if( pRow ){\n    if( pRow->zText[0]=='-' ){\n      if( pRow->pNext==0 ){\n        eqp_reset(p);\n        return;\n      }\n      utf8_printf(p->out, \"%s\\n\", pRow->zText+3);\n      p->sGraph.pRow = pRow->pNext;\n      sqlite3_free(pRow);\n    }else{\n      utf8_printf(p->out, \"QUERY PLAN\\n\");\n    }\n    p->sGraph.zPrefix[0] = 0;\n    eqp_render_level(p, 0);\n    eqp_reset(p);\n  }\n}\n\n#ifndef SQLITE_OMIT_PROGRESS_CALLBACK\n/*\n** Progress handler callback.\n*/\nstatic int progress_handler(void *pClientData) {\n  ShellState *p = (ShellState*)pClientData;\n  p->nProgress++;\n  if( p->nProgress>=p->mxProgress && p->mxProgress>0 ){\n    raw_printf(p->out, \"Progress limit reached (%u)\\n\", p->nProgress);\n    if( p->flgProgress & SHELL_PROGRESS_RESET ) p->nProgress = 0;\n    if( p->flgProgress & SHELL_PROGRESS_ONCE ) p->mxProgress = 0;\n    return 1;\n  }\n  if( (p->flgProgress & SHELL_PROGRESS_QUIET)==0 ){\n    raw_printf(p->out, \"Progress %u\\n\", p->nProgress);\n  }\n  return 0;\n}\n#endif /* SQLITE_OMIT_PROGRESS_CALLBACK */\n\n/*\n** This is the callback routine that the shell\n** invokes for each row of a query result.\n*/\nstatic int shell_callback(\n  void *pArg,\n  int nArg,        /* Number of result columns */\n  char **azArg,    /* Text of each result column */\n  char **azCol,    /* Column names */\n  int *aiType      /* Column types */\n){\n  int i;\n  ShellState *p = (ShellState*)pArg;\n\n  if( azArg==0 ) return 0;\n  switch( p->cMode ){\n    case MODE_Line: {\n      int w = 5;\n      if( azArg==0 ) break;\n      for(i=0; i<nArg; i++){\n        int len = strlen30(azCol[i] ? azCol[i] : \"\");\n        if( len>w ) w = len;\n      }\n      if( p->cnt++>0 ) utf8_printf(p->out, \"%s\", p->rowSeparator);\n      for(i=0; i<nArg; i++){\n        utf8_printf(p->out,\"%*s = %s%s\", w, azCol[i],\n                azArg[i] ? azArg[i] : p->nullValue, p->rowSeparator);\n      }\n      break;\n    }\n    case MODE_Explain:\n    case MODE_Column: {\n      static const int aExplainWidths[] = {4, 13, 4, 4, 4, 13, 2, 13};\n      const int *colWidth;\n      int showHdr;\n      char *rowSep;\n      if( p->cMode==MODE_Column ){\n        colWidth = p->colWidth;\n        showHdr = p->showHeader;\n        rowSep = p->rowSeparator;\n      }else{\n        colWidth = aExplainWidths;\n        showHdr = 1;\n        rowSep = SEP_Row;\n      }\n      if( p->cnt++==0 ){\n        for(i=0; i<nArg; i++){\n          int w, n;\n          if( i<ArraySize(p->colWidth) ){\n            w = colWidth[i];\n          }else{\n            w = 0;\n          }\n          if( w==0 ){\n            w = strlenChar(azCol[i] ? azCol[i] : \"\");\n            if( w<10 ) w = 10;\n            n = strlenChar(azArg && azArg[i] ? azArg[i] : p->nullValue);\n            if( w<n ) w = n;\n          }\n          if( i<ArraySize(p->actualWidth) ){\n            p->actualWidth[i] = w;\n          }\n          if( showHdr ){\n            utf8_width_print(p->out, w, azCol[i]);\n            utf8_printf(p->out, \"%s\", i==nArg-1 ? rowSep : \"  \");\n          }\n        }\n        if( showHdr ){\n          for(i=0; i<nArg; i++){\n            int w;\n            if( i<ArraySize(p->actualWidth) ){\n               w = p->actualWidth[i];\n               if( w<0 ) w = -w;\n            }else{\n               w = 10;\n            }\n            utf8_printf(p->out,\"%-*.*s%s\",w,w,\n                   \"----------------------------------------------------------\"\n                   \"----------------------------------------------------------\",\n                    i==nArg-1 ? rowSep : \"  \");\n          }\n        }\n      }\n      if( azArg==0 ) break;\n      for(i=0; i<nArg; i++){\n        int w;\n        if( i<ArraySize(p->actualWidth) ){\n           w = p->actualWidth[i];\n        }else{\n           w = 10;\n        }\n        if( p->cMode==MODE_Explain && azArg[i] && strlenChar(azArg[i])>w ){\n          w = strlenChar(azArg[i]);\n        }\n        if( i==1 && p->aiIndent && p->pStmt ){\n          if( p->iIndent<p->nIndent ){\n            utf8_printf(p->out, \"%*.s\", p->aiIndent[p->iIndent], \"\");\n          }\n          p->iIndent++;\n        }\n        utf8_width_print(p->out, w, azArg[i] ? azArg[i] : p->nullValue);\n        utf8_printf(p->out, \"%s\", i==nArg-1 ? rowSep : \"  \");\n      }\n      break;\n    }\n    case MODE_Semi: {   /* .schema and .fullschema output */\n      printSchemaLine(p->out, azArg[0], \";\\n\");\n      break;\n    }\n    case MODE_Pretty: {  /* .schema and .fullschema with --indent */\n      char *z;\n      int j;\n      int nParen = 0;\n      char cEnd = 0;\n      char c;\n      int nLine = 0;\n      assert( nArg==1 );\n      if( azArg[0]==0 ) break;\n      if( sqlite3_strlike(\"CREATE VIEW%\", azArg[0], 0)==0\n       || sqlite3_strlike(\"CREATE TRIG%\", azArg[0], 0)==0\n      ){\n        utf8_printf(p->out, \"%s;\\n\", azArg[0]);\n        break;\n      }\n      z = sqlite3_mprintf(\"%s\", azArg[0]);\n      j = 0;\n      for(i=0; IsSpace(z[i]); i++){}\n      for(; (c = z[i])!=0; i++){\n        if( IsSpace(c) ){\n          if( z[j-1]=='\\r' ) z[j-1] = '\\n';\n          if( IsSpace(z[j-1]) || z[j-1]=='(' ) continue;\n        }else if( (c=='(' || c==')') && j>0 && IsSpace(z[j-1]) ){\n          j--;\n        }\n        z[j++] = c;\n      }\n      while( j>0 && IsSpace(z[j-1]) ){ j--; }\n      z[j] = 0;\n      if( strlen30(z)>=79 ){\n        for(i=j=0; (c = z[i])!=0; i++){  /* Copy changes from z[i] back to z[j] */\n          if( c==cEnd ){\n            cEnd = 0;\n          }else if( c=='\"' || c=='\\'' || c=='`' ){\n            cEnd = c;\n          }else if( c=='[' ){\n            cEnd = ']';\n          }else if( c=='-' && z[i+1]=='-' ){\n            cEnd = '\\n';\n          }else if( c=='(' ){\n            nParen++;\n          }else if( c==')' ){\n            nParen--;\n            if( nLine>0 && nParen==0 && j>0 ){\n              printSchemaLineN(p->out, z, j, \"\\n\");\n              j = 0;\n            }\n          }\n          z[j++] = c;\n          if( nParen==1 && cEnd==0\n           && (c=='(' || c=='\\n' || (c==',' && !wsToEol(z+i+1)))\n          ){\n            if( c=='\\n' ) j--;\n            printSchemaLineN(p->out, z, j, \"\\n  \");\n            j = 0;\n            nLine++;\n            while( IsSpace(z[i+1]) ){ i++; }\n          }\n        }\n        z[j] = 0;\n      }\n      printSchemaLine(p->out, z, \";\\n\");\n      sqlite3_free(z);\n      break;\n    }\n    case MODE_List: {\n      if( p->cnt++==0 && p->showHeader ){\n        for(i=0; i<nArg; i++){\n          utf8_printf(p->out,\"%s%s\",azCol[i],\n                  i==nArg-1 ? p->rowSeparator : p->colSeparator);\n        }\n      }\n      if( azArg==0 ) break;\n      for(i=0; i<nArg; i++){\n        char *z = azArg[i];\n        if( z==0 ) z = p->nullValue;\n        utf8_printf(p->out, \"%s\", z);\n        if( i<nArg-1 ){\n          utf8_printf(p->out, \"%s\", p->colSeparator);\n        }else{\n          utf8_printf(p->out, \"%s\", p->rowSeparator);\n        }\n      }\n      break;\n    }\n    case MODE_Html: {\n      if( p->cnt++==0 && p->showHeader ){\n        raw_printf(p->out,\"<TR>\");\n        for(i=0; i<nArg; i++){\n          raw_printf(p->out,\"<TH>\");\n          output_html_string(p->out, azCol[i]);\n          raw_printf(p->out,\"</TH>\\n\");\n        }\n        raw_printf(p->out,\"</TR>\\n\");\n      }\n      if( azArg==0 ) break;\n      raw_printf(p->out,\"<TR>\");\n      for(i=0; i<nArg; i++){\n        raw_printf(p->out,\"<TD>\");\n        output_html_string(p->out, azArg[i] ? azArg[i] : p->nullValue);\n        raw_printf(p->out,\"</TD>\\n\");\n      }\n      raw_printf(p->out,\"</TR>\\n\");\n      break;\n    }\n    case MODE_Tcl: {\n      if( p->cnt++==0 && p->showHeader ){\n        for(i=0; i<nArg; i++){\n          output_c_string(p->out,azCol[i] ? azCol[i] : \"\");\n          if(i<nArg-1) utf8_printf(p->out, \"%s\", p->colSeparator);\n        }\n        utf8_printf(p->out, \"%s\", p->rowSeparator);\n      }\n      if( azArg==0 ) break;\n      for(i=0; i<nArg; i++){\n        output_c_string(p->out, azArg[i] ? azArg[i] : p->nullValue);\n        if(i<nArg-1) utf8_printf(p->out, \"%s\", p->colSeparator);\n      }\n      utf8_printf(p->out, \"%s\", p->rowSeparator);\n      break;\n    }\n    case MODE_Csv: {\n      setBinaryMode(p->out, 1);\n      if( p->cnt++==0 && p->showHeader ){\n        for(i=0; i<nArg; i++){\n          output_csv(p, azCol[i] ? azCol[i] : \"\", i<nArg-1);\n        }\n        utf8_printf(p->out, \"%s\", p->rowSeparator);\n      }\n      if( nArg>0 ){\n        for(i=0; i<nArg; i++){\n          output_csv(p, azArg[i], i<nArg-1);\n        }\n        utf8_printf(p->out, \"%s\", p->rowSeparator);\n      }\n      setTextMode(p->out, 1);\n      break;\n    }\n    case MODE_Insert: {\n      if( azArg==0 ) break;\n      utf8_printf(p->out,\"INSERT INTO %s\",p->zDestTable);\n      if( p->showHeader ){\n        raw_printf(p->out,\"(\");\n        for(i=0; i<nArg; i++){\n          if( i>0 ) raw_printf(p->out, \",\");\n          if( quoteChar(azCol[i]) ){\n            char *z = sqlite3_mprintf(\"\\\"%w\\\"\", azCol[i]);\n            utf8_printf(p->out, \"%s\", z);\n            sqlite3_free(z);\n          }else{\n            raw_printf(p->out, \"%s\", azCol[i]);\n          }\n        }\n        raw_printf(p->out,\")\");\n      }\n      p->cnt++;\n      for(i=0; i<nArg; i++){\n        raw_printf(p->out, i>0 ? \",\" : \" VALUES(\");\n        if( (azArg[i]==0) || (aiType && aiType[i]==SQLITE_NULL) ){\n          utf8_printf(p->out,\"NULL\");\n        }else if( aiType && aiType[i]==SQLITE_TEXT ){\n          if( ShellHasFlag(p, SHFLG_Newlines) ){\n            output_quoted_string(p->out, azArg[i]);\n          }else{\n            output_quoted_escaped_string(p->out, azArg[i]);\n          }\n        }else if( aiType && aiType[i]==SQLITE_INTEGER ){\n          utf8_printf(p->out,\"%s\", azArg[i]);\n        }else if( aiType && aiType[i]==SQLITE_FLOAT ){\n          char z[50];\n          double r = sqlite3_column_double(p->pStmt, i);\n          sqlite3_uint64 ur;\n          memcpy(&ur,&r,sizeof(r));\n          if( ur==0x7ff0000000000000LL ){\n            raw_printf(p->out, \"1e999\");\n          }else if( ur==0xfff0000000000000LL ){\n            raw_printf(p->out, \"-1e999\");\n          }else{\n            sqlite3_snprintf(50,z,\"%!.20g\", r);\n            raw_printf(p->out, \"%s\", z);\n          }\n        }else if( aiType && aiType[i]==SQLITE_BLOB && p->pStmt ){\n          const void *pBlob = sqlite3_column_blob(p->pStmt, i);\n          int nBlob = sqlite3_column_bytes(p->pStmt, i);\n          output_hex_blob(p->out, pBlob, nBlob);\n        }else if( isNumber(azArg[i], 0) ){\n          utf8_printf(p->out,\"%s\", azArg[i]);\n        }else if( ShellHasFlag(p, SHFLG_Newlines) ){\n          output_quoted_string(p->out, azArg[i]);\n        }else{\n          output_quoted_escaped_string(p->out, azArg[i]);\n        }\n      }\n      raw_printf(p->out,\");\\n\");\n      break;\n    }\n    case MODE_Quote: {\n      if( azArg==0 ) break;\n      if( p->cnt==0 && p->showHeader ){\n        for(i=0; i<nArg; i++){\n          if( i>0 ) raw_printf(p->out, \",\");\n          output_quoted_string(p->out, azCol[i]);\n        }\n        raw_printf(p->out,\"\\n\");\n      }\n      p->cnt++;\n      for(i=0; i<nArg; i++){\n        if( i>0 ) raw_printf(p->out, \",\");\n        if( (azArg[i]==0) || (aiType && aiType[i]==SQLITE_NULL) ){\n          utf8_printf(p->out,\"NULL\");\n        }else if( aiType && aiType[i]==SQLITE_TEXT ){\n          output_quoted_string(p->out, azArg[i]);\n        }else if( aiType && aiType[i]==SQLITE_INTEGER ){\n          utf8_printf(p->out,\"%s\", azArg[i]);\n        }else if( aiType && aiType[i]==SQLITE_FLOAT ){\n          char z[50];\n          double r = sqlite3_column_double(p->pStmt, i);\n          sqlite3_snprintf(50,z,\"%!.20g\", r);\n          raw_printf(p->out, \"%s\", z);\n        }else if( aiType && aiType[i]==SQLITE_BLOB && p->pStmt ){\n          const void *pBlob = sqlite3_column_blob(p->pStmt, i);\n          int nBlob = sqlite3_column_bytes(p->pStmt, i);\n          output_hex_blob(p->out, pBlob, nBlob);\n        }else if( isNumber(azArg[i], 0) ){\n          utf8_printf(p->out,\"%s\", azArg[i]);\n        }else{\n          output_quoted_string(p->out, azArg[i]);\n        }\n      }\n      raw_printf(p->out,\"\\n\");\n      break;\n    }\n    case MODE_Ascii: {\n      if( p->cnt++==0 && p->showHeader ){\n        for(i=0; i<nArg; i++){\n          if( i>0 ) utf8_printf(p->out, \"%s\", p->colSeparator);\n          utf8_printf(p->out,\"%s\",azCol[i] ? azCol[i] : \"\");\n        }\n        utf8_printf(p->out, \"%s\", p->rowSeparator);\n      }\n      if( azArg==0 ) break;\n      for(i=0; i<nArg; i++){\n        if( i>0 ) utf8_printf(p->out, \"%s\", p->colSeparator);\n        utf8_printf(p->out,\"%s\",azArg[i] ? azArg[i] : p->nullValue);\n      }\n      utf8_printf(p->out, \"%s\", p->rowSeparator);\n      break;\n    }\n    case MODE_EQP: {\n      eqp_append(p, atoi(azArg[0]), atoi(azArg[1]), azArg[3]);\n      break;\n    }\n  }\n  return 0;\n}\n\n/*\n** This is the callback routine that the SQLite library\n** invokes for each row of a query result.\n*/\nstatic int callback(void *pArg, int nArg, char **azArg, char **azCol){\n  /* since we don't have type info, call the shell_callback with a NULL value */\n  return shell_callback(pArg, nArg, azArg, azCol, NULL);\n}\n\n/*\n** This is the callback routine from sqlite3_exec() that appends all\n** output onto the end of a ShellText object.\n*/\nstatic int captureOutputCallback(void *pArg, int nArg, char **azArg, char **az){\n  ShellText *p = (ShellText*)pArg;\n  int i;\n  UNUSED_PARAMETER(az);\n  if( azArg==0 ) return 0;\n  if( p->n ) appendText(p, \"|\", 0);\n  for(i=0; i<nArg; i++){\n    if( i ) appendText(p, \",\", 0);\n    if( azArg[i] ) appendText(p, azArg[i], 0);\n  }\n  return 0;\n}\n\n/*\n** Generate an appropriate SELFTEST table in the main database.\n*/\nstatic void createSelftestTable(ShellState *p){\n  char *zErrMsg = 0;\n  sqlite3_exec(p->db,\n    \"SAVEPOINT selftest_init;\\n\"\n    \"CREATE TABLE IF NOT EXISTS selftest(\\n\"\n    \"  tno INTEGER PRIMARY KEY,\\n\"   /* Test number */\n    \"  op TEXT,\\n\"                   /* Operator:  memo run */\n    \"  cmd TEXT,\\n\"                  /* Command text */\n    \"  ans TEXT\\n\"                   /* Desired answer */\n    \");\"\n    \"CREATE TEMP TABLE [_shell$self](op,cmd,ans);\\n\"\n    \"INSERT INTO [_shell$self](rowid,op,cmd)\\n\"\n    \"  VALUES(coalesce((SELECT (max(tno)+100)/10 FROM selftest),10),\\n\"\n    \"         'memo','Tests generated by --init');\\n\"\n    \"INSERT INTO [_shell$self]\\n\"\n    \"  SELECT 'run',\\n\"\n    \"    'SELECT hex(sha3_query(''SELECT type,name,tbl_name,sql \"\n                                 \"FROM sqlite_master ORDER BY 2'',224))',\\n\"\n    \"    hex(sha3_query('SELECT type,name,tbl_name,sql \"\n                          \"FROM sqlite_master ORDER BY 2',224));\\n\"\n    \"INSERT INTO [_shell$self]\\n\"\n    \"  SELECT 'run',\"\n    \"    'SELECT hex(sha3_query(''SELECT * FROM \\\"' ||\"\n    \"        printf('%w',name) || '\\\" NOT INDEXED'',224))',\\n\"\n    \"    hex(sha3_query(printf('SELECT * FROM \\\"%w\\\" NOT INDEXED',name),224))\\n\"\n    \"  FROM (\\n\"\n    \"    SELECT name FROM sqlite_master\\n\"\n    \"     WHERE type='table'\\n\"\n    \"       AND name<>'selftest'\\n\"\n    \"       AND coalesce(rootpage,0)>0\\n\"\n    \"  )\\n\"\n    \" ORDER BY name;\\n\"\n    \"INSERT INTO [_shell$self]\\n\"\n    \"  VALUES('run','PRAGMA integrity_check','ok');\\n\"\n    \"INSERT INTO selftest(tno,op,cmd,ans)\"\n    \"  SELECT rowid*10,op,cmd,ans FROM [_shell$self];\\n\"\n    \"DROP TABLE [_shell$self];\"\n    ,0,0,&zErrMsg);\n  if( zErrMsg ){\n    utf8_printf(stderr, \"SELFTEST initialization failure: %s\\n\", zErrMsg);\n    sqlite3_free(zErrMsg);\n  }\n  sqlite3_exec(p->db, \"RELEASE selftest_init\",0,0,0);\n}\n\n\n/*\n** Set the destination table field of the ShellState structure to\n** the name of the table given.  Escape any quote characters in the\n** table name.\n*/\nstatic void set_table_name(ShellState *p, const char *zName){\n  int i, n;\n  char cQuote;\n  char *z;\n\n  if( p->zDestTable ){\n    free(p->zDestTable);\n    p->zDestTable = 0;\n  }\n  if( zName==0 ) return;\n  cQuote = quoteChar(zName);\n  n = strlen30(zName);\n  if( cQuote ) n += n+2;\n  z = p->zDestTable = malloc( n+1 );\n  if( z==0 ) shell_out_of_memory();\n  n = 0;\n  if( cQuote ) z[n++] = cQuote;\n  for(i=0; zName[i]; i++){\n    z[n++] = zName[i];\n    if( zName[i]==cQuote ) z[n++] = cQuote;\n  }\n  if( cQuote ) z[n++] = cQuote;\n  z[n] = 0;\n}\n\n\n/*\n** Execute a query statement that will generate SQL output.  Print\n** the result columns, comma-separated, on a line and then add a\n** semicolon terminator to the end of that line.\n**\n** If the number of columns is 1 and that column contains text \"--\"\n** then write the semicolon on a separate line.  That way, if a\n** \"--\" comment occurs at the end of the statement, the comment\n** won't consume the semicolon terminator.\n*/\nstatic int run_table_dump_query(\n  ShellState *p,           /* Query context */\n  const char *zSelect,     /* SELECT statement to extract content */\n  const char *zFirstRow    /* Print before first row, if not NULL */\n){\n  sqlite3_stmt *pSelect;\n  int rc;\n  int nResult;\n  int i;\n  const char *z;\n  rc = sqlite3_prepare_v2(p->db, zSelect, -1, &pSelect, 0);\n  if( rc!=SQLITE_OK || !pSelect ){\n    utf8_printf(p->out, \"/**** ERROR: (%d) %s *****/\\n\", rc,\n                sqlite3_errmsg(p->db));\n    if( (rc&0xff)!=SQLITE_CORRUPT ) p->nErr++;\n    return rc;\n  }\n  rc = sqlite3_step(pSelect);\n  nResult = sqlite3_column_count(pSelect);\n  while( rc==SQLITE_ROW ){\n    if( zFirstRow ){\n      utf8_printf(p->out, \"%s\", zFirstRow);\n      zFirstRow = 0;\n    }\n    z = (const char*)sqlite3_column_text(pSelect, 0);\n    utf8_printf(p->out, \"%s\", z);\n    for(i=1; i<nResult; i++){\n      utf8_printf(p->out, \",%s\", sqlite3_column_text(pSelect, i));\n    }\n    if( z==0 ) z = \"\";\n    while( z[0] && (z[0]!='-' || z[1]!='-') ) z++;\n    if( z[0] ){\n      raw_printf(p->out, \"\\n;\\n\");\n    }else{\n      raw_printf(p->out, \";\\n\");\n    }\n    rc = sqlite3_step(pSelect);\n  }\n  rc = sqlite3_finalize(pSelect);\n  if( rc!=SQLITE_OK ){\n    utf8_printf(p->out, \"/**** ERROR: (%d) %s *****/\\n\", rc,\n                sqlite3_errmsg(p->db));\n    if( (rc&0xff)!=SQLITE_CORRUPT ) p->nErr++;\n  }\n  return rc;\n}\n\n/*\n** Allocate space and save off current error string.\n*/\nstatic char *save_err_msg(\n  sqlite3 *db            /* Database to query */\n){\n  int nErrMsg = 1+strlen30(sqlite3_errmsg(db));\n  char *zErrMsg = sqlite3_malloc64(nErrMsg);\n  if( zErrMsg ){\n    memcpy(zErrMsg, sqlite3_errmsg(db), nErrMsg);\n  }\n  return zErrMsg;\n}\n\n#ifdef __linux__\n/*\n** Attempt to display I/O stats on Linux using /proc/PID/io\n*/\nstatic void displayLinuxIoStats(FILE *out){\n  FILE *in;\n  char z[200];\n  sqlite3_snprintf(sizeof(z), z, \"/proc/%d/io\", getpid());\n  in = fopen(z, \"rb\");\n  if( in==0 ) return;\n  while( fgets(z, sizeof(z), in)!=0 ){\n    static const struct {\n      const char *zPattern;\n      const char *zDesc;\n    } aTrans[] = {\n      { \"rchar: \",                  \"Bytes received by read():\" },\n      { \"wchar: \",                  \"Bytes sent to write():\"    },\n      { \"syscr: \",                  \"Read() system calls:\"      },\n      { \"syscw: \",                  \"Write() system calls:\"     },\n      { \"read_bytes: \",             \"Bytes read from storage:\"  },\n      { \"write_bytes: \",            \"Bytes written to storage:\" },\n      { \"cancelled_write_bytes: \",  \"Cancelled write bytes:\"    },\n    };\n    int i;\n    for(i=0; i<ArraySize(aTrans); i++){\n      int n = strlen30(aTrans[i].zPattern);\n      if( strncmp(aTrans[i].zPattern, z, n)==0 ){\n        utf8_printf(out, \"%-36s %s\", aTrans[i].zDesc, &z[n]);\n        break;\n      }\n    }\n  }\n  fclose(in);\n}\n#endif\n\n/*\n** Display a single line of status using 64-bit values.\n*/\nstatic void displayStatLine(\n  ShellState *p,            /* The shell context */\n  char *zLabel,             /* Label for this one line */\n  char *zFormat,            /* Format for the result */\n  int iStatusCtrl,          /* Which status to display */\n  int bReset                /* True to reset the stats */\n){\n  sqlite3_int64 iCur = -1;\n  sqlite3_int64 iHiwtr = -1;\n  int i, nPercent;\n  char zLine[200];\n  sqlite3_status64(iStatusCtrl, &iCur, &iHiwtr, bReset);\n  for(i=0, nPercent=0; zFormat[i]; i++){\n    if( zFormat[i]=='%' ) nPercent++;\n  }\n  if( nPercent>1 ){\n    sqlite3_snprintf(sizeof(zLine), zLine, zFormat, iCur, iHiwtr);\n  }else{\n    sqlite3_snprintf(sizeof(zLine), zLine, zFormat, iHiwtr);\n  }\n  raw_printf(p->out, \"%-36s %s\\n\", zLabel, zLine);\n}\n\n/*\n** Display memory stats.\n*/\nstatic int display_stats(\n  sqlite3 *db,                /* Database to query */\n  ShellState *pArg,           /* Pointer to ShellState */\n  int bReset                  /* True to reset the stats */\n){\n  int iCur;\n  int iHiwtr;\n  FILE *out;\n  if( pArg==0 || pArg->out==0 ) return 0;\n  out = pArg->out;\n\n  if( pArg->pStmt && (pArg->statsOn & 2) ){\n    int nCol, i, x;\n    sqlite3_stmt *pStmt = pArg->pStmt;\n    char z[100];\n    nCol = sqlite3_column_count(pStmt);\n    raw_printf(out, \"%-36s %d\\n\", \"Number of output columns:\", nCol);\n    for(i=0; i<nCol; i++){\n      sqlite3_snprintf(sizeof(z),z,\"Column %d %nname:\", i, &x);\n      utf8_printf(out, \"%-36s %s\\n\", z, sqlite3_column_name(pStmt,i));\n#ifndef SQLITE_OMIT_DECLTYPE\n      sqlite3_snprintf(30, z+x, \"declared type:\");\n      utf8_printf(out, \"%-36s %s\\n\", z, sqlite3_column_decltype(pStmt, i));\n#endif\n#ifdef SQLITE_ENABLE_COLUMN_METADATA\n      sqlite3_snprintf(30, z+x, \"database name:\");\n      utf8_printf(out, \"%-36s %s\\n\", z, sqlite3_column_database_name(pStmt,i));\n      sqlite3_snprintf(30, z+x, \"table name:\");\n      utf8_printf(out, \"%-36s %s\\n\", z, sqlite3_column_table_name(pStmt,i));\n      sqlite3_snprintf(30, z+x, \"origin name:\");\n      utf8_printf(out, \"%-36s %s\\n\", z, sqlite3_column_origin_name(pStmt,i));\n#endif\n    }\n  }\n\n  displayStatLine(pArg, \"Memory Used:\",\n     \"%lld (max %lld) bytes\", SQLITE_STATUS_MEMORY_USED, bReset);\n  displayStatLine(pArg, \"Number of Outstanding Allocations:\",\n     \"%lld (max %lld)\", SQLITE_STATUS_MALLOC_COUNT, bReset);\n  if( pArg->shellFlgs & SHFLG_Pagecache ){\n    displayStatLine(pArg, \"Number of Pcache Pages Used:\",\n       \"%lld (max %lld) pages\", SQLITE_STATUS_PAGECACHE_USED, bReset);\n  }\n  displayStatLine(pArg, \"Number of Pcache Overflow Bytes:\",\n     \"%lld (max %lld) bytes\", SQLITE_STATUS_PAGECACHE_OVERFLOW, bReset);\n  displayStatLine(pArg, \"Largest Allocation:\",\n     \"%lld bytes\", SQLITE_STATUS_MALLOC_SIZE, bReset);\n  displayStatLine(pArg, \"Largest Pcache Allocation:\",\n     \"%lld bytes\", SQLITE_STATUS_PAGECACHE_SIZE, bReset);\n#ifdef YYTRACKMAXSTACKDEPTH\n  displayStatLine(pArg, \"Deepest Parser Stack:\",\n     \"%lld (max %lld)\", SQLITE_STATUS_PARSER_STACK, bReset);\n#endif\n\n  if( db ){\n    if( pArg->shellFlgs & SHFLG_Lookaside ){\n      iHiwtr = iCur = -1;\n      sqlite3_db_status(db, SQLITE_DBSTATUS_LOOKASIDE_USED,\n                        &iCur, &iHiwtr, bReset);\n      raw_printf(pArg->out,\n              \"Lookaside Slots Used:                %d (max %d)\\n\",\n              iCur, iHiwtr);\n      sqlite3_db_status(db, SQLITE_DBSTATUS_LOOKASIDE_HIT,\n                        &iCur, &iHiwtr, bReset);\n      raw_printf(pArg->out, \"Successful lookaside attempts:       %d\\n\",\n              iHiwtr);\n      sqlite3_db_status(db, SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE,\n                        &iCur, &iHiwtr, bReset);\n      raw_printf(pArg->out, \"Lookaside failures due to size:      %d\\n\",\n              iHiwtr);\n      sqlite3_db_status(db, SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL,\n                        &iCur, &iHiwtr, bReset);\n      raw_printf(pArg->out, \"Lookaside failures due to OOM:       %d\\n\",\n              iHiwtr);\n    }\n    iHiwtr = iCur = -1;\n    sqlite3_db_status(db, SQLITE_DBSTATUS_CACHE_USED, &iCur, &iHiwtr, bReset);\n    raw_printf(pArg->out, \"Pager Heap Usage:                    %d bytes\\n\",\n            iCur);\n    iHiwtr = iCur = -1;\n    sqlite3_db_status(db, SQLITE_DBSTATUS_CACHE_HIT, &iCur, &iHiwtr, 1);\n    raw_printf(pArg->out, \"Page cache hits:                     %d\\n\", iCur);\n    iHiwtr = iCur = -1;\n    sqlite3_db_status(db, SQLITE_DBSTATUS_CACHE_MISS, &iCur, &iHiwtr, 1);\n    raw_printf(pArg->out, \"Page cache misses:                   %d\\n\", iCur);\n    iHiwtr = iCur = -1;\n    sqlite3_db_status(db, SQLITE_DBSTATUS_CACHE_WRITE, &iCur, &iHiwtr, 1);\n    raw_printf(pArg->out, \"Page cache writes:                   %d\\n\", iCur);\n    iHiwtr = iCur = -1;\n    sqlite3_db_status(db, SQLITE_DBSTATUS_CACHE_SPILL, &iCur, &iHiwtr, 1);\n    raw_printf(pArg->out, \"Page cache spills:                   %d\\n\", iCur);\n    iHiwtr = iCur = -1;\n    sqlite3_db_status(db, SQLITE_DBSTATUS_SCHEMA_USED, &iCur, &iHiwtr, bReset);\n    raw_printf(pArg->out, \"Schema Heap Usage:                   %d bytes\\n\",\n            iCur);\n    iHiwtr = iCur = -1;\n    sqlite3_db_status(db, SQLITE_DBSTATUS_STMT_USED, &iCur, &iHiwtr, bReset);\n    raw_printf(pArg->out, \"Statement Heap/Lookaside Usage:      %d bytes\\n\",\n            iCur);\n  }\n\n  if( pArg->pStmt ){\n    iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_FULLSCAN_STEP,\n                               bReset);\n    raw_printf(pArg->out, \"Fullscan Steps:                      %d\\n\", iCur);\n    iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_SORT, bReset);\n    raw_printf(pArg->out, \"Sort Operations:                     %d\\n\", iCur);\n    iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_AUTOINDEX,bReset);\n    raw_printf(pArg->out, \"Autoindex Inserts:                   %d\\n\", iCur);\n    iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_VM_STEP, bReset);\n    raw_printf(pArg->out, \"Virtual Machine Steps:               %d\\n\", iCur);\n    iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_REPREPARE, bReset);\n    raw_printf(pArg->out, \"Reprepare operations:                %d\\n\", iCur);\n    iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_RUN, bReset);\n    raw_printf(pArg->out, \"Number of times run:                 %d\\n\", iCur);\n    iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_MEMUSED, bReset);\n    raw_printf(pArg->out, \"Memory used by prepared stmt:        %d\\n\", iCur);\n  }\n\n#ifdef __linux__\n  displayLinuxIoStats(pArg->out);\n#endif\n\n  /* Do not remove this machine readable comment: extra-stats-output-here */\n\n  return 0;\n}\n\n/*\n** Display scan stats.\n*/\nstatic void display_scanstats(\n  sqlite3 *db,                    /* Database to query */\n  ShellState *pArg                /* Pointer to ShellState */\n){\n#ifndef SQLITE_ENABLE_STMT_SCANSTATUS\n  UNUSED_PARAMETER(db);\n  UNUSED_PARAMETER(pArg);\n#else\n  int i, k, n, mx;\n  raw_printf(pArg->out, \"-------- scanstats --------\\n\");\n  mx = 0;\n  for(k=0; k<=mx; k++){\n    double rEstLoop = 1.0;\n    for(i=n=0; 1; i++){\n      sqlite3_stmt *p = pArg->pStmt;\n      sqlite3_int64 nLoop, nVisit;\n      double rEst;\n      int iSid;\n      const char *zExplain;\n      if( sqlite3_stmt_scanstatus(p, i, SQLITE_SCANSTAT_NLOOP, (void*)&nLoop) ){\n        break;\n      }\n      sqlite3_stmt_scanstatus(p, i, SQLITE_SCANSTAT_SELECTID, (void*)&iSid);\n      if( iSid>mx ) mx = iSid;\n      if( iSid!=k ) continue;\n      if( n==0 ){\n        rEstLoop = (double)nLoop;\n        if( k>0 ) raw_printf(pArg->out, \"-------- subquery %d -------\\n\", k);\n      }\n      n++;\n      sqlite3_stmt_scanstatus(p, i, SQLITE_SCANSTAT_NVISIT, (void*)&nVisit);\n      sqlite3_stmt_scanstatus(p, i, SQLITE_SCANSTAT_EST, (void*)&rEst);\n      sqlite3_stmt_scanstatus(p, i, SQLITE_SCANSTAT_EXPLAIN, (void*)&zExplain);\n      utf8_printf(pArg->out, \"Loop %2d: %s\\n\", n, zExplain);\n      rEstLoop *= rEst;\n      raw_printf(pArg->out,\n          \"         nLoop=%-8lld nRow=%-8lld estRow=%-8lld estRow/Loop=%-8g\\n\",\n          nLoop, nVisit, (sqlite3_int64)(rEstLoop+0.5), rEst\n      );\n    }\n  }\n  raw_printf(pArg->out, \"---------------------------\\n\");\n#endif\n}\n\n/*\n** Parameter azArray points to a zero-terminated array of strings. zStr\n** points to a single nul-terminated string. Return non-zero if zStr\n** is equal, according to strcmp(), to any of the strings in the array.\n** Otherwise, return zero.\n*/\nstatic int str_in_array(const char *zStr, const char **azArray){\n  int i;\n  for(i=0; azArray[i]; i++){\n    if( 0==strcmp(zStr, azArray[i]) ) return 1;\n  }\n  return 0;\n}\n\n/*\n** If compiled statement pSql appears to be an EXPLAIN statement, allocate\n** and populate the ShellState.aiIndent[] array with the number of\n** spaces each opcode should be indented before it is output.\n**\n** The indenting rules are:\n**\n**     * For each \"Next\", \"Prev\", \"VNext\" or \"VPrev\" instruction, indent\n**       all opcodes that occur between the p2 jump destination and the opcode\n**       itself by 2 spaces.\n**\n**     * For each \"Goto\", if the jump destination is earlier in the program\n**       and ends on one of:\n**          Yield  SeekGt  SeekLt  RowSetRead  Rewind\n**       or if the P1 parameter is one instead of zero,\n**       then indent all opcodes between the earlier instruction\n**       and \"Goto\" by 2 spaces.\n*/\nstatic void explain_data_prepare(ShellState *p, sqlite3_stmt *pSql){\n  const char *zSql;               /* The text of the SQL statement */\n  const char *z;                  /* Used to check if this is an EXPLAIN */\n  int *abYield = 0;               /* True if op is an OP_Yield */\n  int nAlloc = 0;                 /* Allocated size of p->aiIndent[], abYield */\n  int iOp;                        /* Index of operation in p->aiIndent[] */\n\n  const char *azNext[] = { \"Next\", \"Prev\", \"VPrev\", \"VNext\", \"SorterNext\", 0 };\n  const char *azYield[] = { \"Yield\", \"SeekLT\", \"SeekGT\", \"RowSetRead\",\n                            \"Rewind\", 0 };\n  const char *azGoto[] = { \"Goto\", 0 };\n\n  /* Try to figure out if this is really an EXPLAIN statement. If this\n  ** cannot be verified, return early.  */\n  if( sqlite3_column_count(pSql)!=8 ){\n    p->cMode = p->mode;\n    return;\n  }\n  zSql = sqlite3_sql(pSql);\n  if( zSql==0 ) return;\n  for(z=zSql; *z==' ' || *z=='\\t' || *z=='\\n' || *z=='\\f' || *z=='\\r'; z++);\n  if( sqlite3_strnicmp(z, \"explain\", 7) ){\n    p->cMode = p->mode;\n    return;\n  }\n\n  for(iOp=0; SQLITE_ROW==sqlite3_step(pSql); iOp++){\n    int i;\n    int iAddr = sqlite3_column_int(pSql, 0);\n    const char *zOp = (const char*)sqlite3_column_text(pSql, 1);\n\n    /* Set p2 to the P2 field of the current opcode. Then, assuming that\n    ** p2 is an instruction address, set variable p2op to the index of that\n    ** instruction in the aiIndent[] array. p2 and p2op may be different if\n    ** the current instruction is part of a sub-program generated by an\n    ** SQL trigger or foreign key.  */\n    int p2 = sqlite3_column_int(pSql, 3);\n    int p2op = (p2 + (iOp-iAddr));\n\n    /* Grow the p->aiIndent array as required */\n    if( iOp>=nAlloc ){\n      if( iOp==0 ){\n        /* Do further verfication that this is explain output.  Abort if\n        ** it is not */\n        static const char *explainCols[] = {\n           \"addr\", \"opcode\", \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"comment\" };\n        int jj;\n        for(jj=0; jj<ArraySize(explainCols); jj++){\n          if( strcmp(sqlite3_column_name(pSql,jj),explainCols[jj])!=0 ){\n            p->cMode = p->mode;\n            sqlite3_reset(pSql);\n            return;\n          }\n        }\n      }\n      nAlloc += 100;\n      p->aiIndent = (int*)sqlite3_realloc64(p->aiIndent, nAlloc*sizeof(int));\n      if( p->aiIndent==0 ) shell_out_of_memory();\n      abYield = (int*)sqlite3_realloc64(abYield, nAlloc*sizeof(int));\n      if( abYield==0 ) shell_out_of_memory();\n    }\n    abYield[iOp] = str_in_array(zOp, azYield);\n    p->aiIndent[iOp] = 0;\n    p->nIndent = iOp+1;\n\n    if( str_in_array(zOp, azNext) ){\n      for(i=p2op; i<iOp; i++) p->aiIndent[i] += 2;\n    }\n    if( str_in_array(zOp, azGoto) && p2op<p->nIndent\n     && (abYield[p2op] || sqlite3_column_int(pSql, 2))\n    ){\n      for(i=p2op; i<iOp; i++) p->aiIndent[i] += 2;\n    }\n  }\n\n  p->iIndent = 0;\n  sqlite3_free(abYield);\n  sqlite3_reset(pSql);\n}\n\n/*\n** Free the array allocated by explain_data_prepare().\n*/\nstatic void explain_data_delete(ShellState *p){\n  sqlite3_free(p->aiIndent);\n  p->aiIndent = 0;\n  p->nIndent = 0;\n  p->iIndent = 0;\n}\n\n/*\n** Disable and restore .wheretrace and .selecttrace settings.\n*/\n#if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)\nextern int sqlite3SelectTrace;\nstatic int savedSelectTrace;\n#endif\n#if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_WHERETRACE)\nextern int sqlite3WhereTrace;\nstatic int savedWhereTrace;\n#endif\nstatic void disable_debug_trace_modes(void){\n#if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)\n  savedSelectTrace = sqlite3SelectTrace;\n  sqlite3SelectTrace = 0;\n#endif\n#if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_WHERETRACE)\n  savedWhereTrace = sqlite3WhereTrace;\n  sqlite3WhereTrace = 0;\n#endif\n}\nstatic void restore_debug_trace_modes(void){\n#if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)\n  sqlite3SelectTrace = savedSelectTrace;\n#endif\n#if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_WHERETRACE)\n  sqlite3WhereTrace = savedWhereTrace;\n#endif\n}\n\n/*\n** Run a prepared statement\n*/\nstatic void exec_prepared_stmt(\n  ShellState *pArg,                                /* Pointer to ShellState */\n  sqlite3_stmt *pStmt                              /* Statment to run */\n){\n  int rc;\n\n  /* perform the first step.  this will tell us if we\n  ** have a result set or not and how wide it is.\n  */\n  rc = sqlite3_step(pStmt);\n  /* if we have a result set... */\n  if( SQLITE_ROW == rc ){\n    /* allocate space for col name ptr, value ptr, and type */\n    int nCol = sqlite3_column_count(pStmt);\n    void *pData = sqlite3_malloc64(3*nCol*sizeof(const char*) + 1);\n    if( !pData ){\n      rc = SQLITE_NOMEM;\n    }else{\n      char **azCols = (char **)pData;      /* Names of result columns */\n      char **azVals = &azCols[nCol];       /* Results */\n      int *aiTypes = (int *)&azVals[nCol]; /* Result types */\n      int i, x;\n      assert(sizeof(int) <= sizeof(char *));\n      /* save off ptrs to column names */\n      for(i=0; i<nCol; i++){\n        azCols[i] = (char *)sqlite3_column_name(pStmt, i);\n      }\n      do{\n        /* extract the data and data types */\n        for(i=0; i<nCol; i++){\n          aiTypes[i] = x = sqlite3_column_type(pStmt, i);\n          if( x==SQLITE_BLOB && pArg && pArg->cMode==MODE_Insert ){\n            azVals[i] = \"\";\n          }else{\n            azVals[i] = (char*)sqlite3_column_text(pStmt, i);\n          }\n          if( !azVals[i] && (aiTypes[i]!=SQLITE_NULL) ){\n            rc = SQLITE_NOMEM;\n            break; /* from for */\n          }\n        } /* end for */\n\n        /* if data and types extracted successfully... */\n        if( SQLITE_ROW == rc ){\n          /* call the supplied callback with the result row data */\n          if( shell_callback(pArg, nCol, azVals, azCols, aiTypes) ){\n            rc = SQLITE_ABORT;\n          }else{\n            rc = sqlite3_step(pStmt);\n          }\n        }\n      } while( SQLITE_ROW == rc );\n      sqlite3_free(pData);\n    }\n  }\n}\n\n#ifndef SQLITE_OMIT_VIRTUALTABLE\n/*\n** This function is called to process SQL if the previous shell command\n** was \".expert\". It passes the SQL in the second argument directly to\n** the sqlite3expert object.\n**\n** If successful, SQLITE_OK is returned. Otherwise, an SQLite error\n** code. In this case, (*pzErr) may be set to point to a buffer containing\n** an English language error message. It is the responsibility of the\n** caller to eventually free this buffer using sqlite3_free().\n*/\nstatic int expertHandleSQL(\n  ShellState *pState, \n  const char *zSql, \n  char **pzErr\n){\n  assert( pState->expert.pExpert );\n  assert( pzErr==0 || *pzErr==0 );\n  return sqlite3_expert_sql(pState->expert.pExpert, zSql, pzErr);\n}\n\n/*\n** This function is called either to silently clean up the object\n** created by the \".expert\" command (if bCancel==1), or to generate a \n** report from it and then clean it up (if bCancel==0).\n**\n** If successful, SQLITE_OK is returned. Otherwise, an SQLite error\n** code. In this case, (*pzErr) may be set to point to a buffer containing\n** an English language error message. It is the responsibility of the\n** caller to eventually free this buffer using sqlite3_free().\n*/\nstatic int expertFinish(\n  ShellState *pState,\n  int bCancel,\n  char **pzErr\n){\n  int rc = SQLITE_OK;\n  sqlite3expert *p = pState->expert.pExpert;\n  assert( p );\n  assert( bCancel || pzErr==0 || *pzErr==0 );\n  if( bCancel==0 ){\n    FILE *out = pState->out;\n    int bVerbose = pState->expert.bVerbose;\n\n    rc = sqlite3_expert_analyze(p, pzErr);\n    if( rc==SQLITE_OK ){\n      int nQuery = sqlite3_expert_count(p);\n      int i;\n\n      if( bVerbose ){\n        const char *zCand = sqlite3_expert_report(p,0,EXPERT_REPORT_CANDIDATES);\n        raw_printf(out, \"-- Candidates -----------------------------\\n\");\n        raw_printf(out, \"%s\\n\", zCand);\n      }\n      for(i=0; i<nQuery; i++){\n        const char *zSql = sqlite3_expert_report(p, i, EXPERT_REPORT_SQL);\n        const char *zIdx = sqlite3_expert_report(p, i, EXPERT_REPORT_INDEXES);\n        const char *zEQP = sqlite3_expert_report(p, i, EXPERT_REPORT_PLAN);\n        if( zIdx==0 ) zIdx = \"(no new indexes)\\n\";\n        if( bVerbose ){\n          raw_printf(out, \"-- Query %d --------------------------------\\n\",i+1);\n          raw_printf(out, \"%s\\n\\n\", zSql);\n        }\n        raw_printf(out, \"%s\\n\", zIdx);\n        raw_printf(out, \"%s\\n\", zEQP);\n      }\n    }\n  }\n  sqlite3_expert_destroy(p);\n  pState->expert.pExpert = 0;\n  return rc;\n}\n\n/*\n** Implementation of \".expert\" dot command.\n*/\nstatic int expertDotCommand(\n  ShellState *pState,             /* Current shell tool state */\n  char **azArg,                   /* Array of arguments passed to dot command */\n  int nArg                        /* Number of entries in azArg[] */\n){\n  int rc = SQLITE_OK;\n  char *zErr = 0;\n  int i;\n  int iSample = 0;\n\n  assert( pState->expert.pExpert==0 );\n  memset(&pState->expert, 0, sizeof(ExpertInfo));\n\n  for(i=1; rc==SQLITE_OK && i<nArg; i++){\n    char *z = azArg[i];\n    int n;\n    if( z[0]=='-' && z[1]=='-' ) z++;\n    n = strlen30(z);\n    if( n>=2 && 0==strncmp(z, \"-verbose\", n) ){\n      pState->expert.bVerbose = 1;\n    }\n    else if( n>=2 && 0==strncmp(z, \"-sample\", n) ){\n      if( i==(nArg-1) ){\n        raw_printf(stderr, \"option requires an argument: %s\\n\", z);\n        rc = SQLITE_ERROR;\n      }else{\n        iSample = (int)integerValue(azArg[++i]);\n        if( iSample<0 || iSample>100 ){\n          raw_printf(stderr, \"value out of range: %s\\n\", azArg[i]);\n          rc = SQLITE_ERROR;\n        }\n      }\n    }\n    else{\n      raw_printf(stderr, \"unknown option: %s\\n\", z);\n      rc = SQLITE_ERROR;\n    }\n  }\n\n  if( rc==SQLITE_OK ){\n    pState->expert.pExpert = sqlite3_expert_new(pState->db, &zErr);\n    if( pState->expert.pExpert==0 ){\n      raw_printf(stderr, \"sqlite3_expert_new: %s\\n\", zErr);\n      rc = SQLITE_ERROR;\n    }else{\n      sqlite3_expert_config(\n          pState->expert.pExpert, EXPERT_CONFIG_SAMPLE, iSample\n      );\n    }\n  }\n\n  return rc;\n}\n#endif /* ifndef SQLITE_OMIT_VIRTUALTABLE */\n\n/*\n** Execute a statement or set of statements.  Print\n** any result rows/columns depending on the current mode\n** set via the supplied callback.\n**\n** This is very similar to SQLite's built-in sqlite3_exec()\n** function except it takes a slightly different callback\n** and callback data argument.\n*/\nstatic int shell_exec(\n  ShellState *pArg,                         /* Pointer to ShellState */\n  const char *zSql,                         /* SQL to be evaluated */\n  char **pzErrMsg                           /* Error msg written here */\n){\n  sqlite3_stmt *pStmt = NULL;     /* Statement to execute. */\n  int rc = SQLITE_OK;             /* Return Code */\n  int rc2;\n  const char *zLeftover;          /* Tail of unprocessed SQL */\n  sqlite3 *db = pArg->db;\n\n  if( pzErrMsg ){\n    *pzErrMsg = NULL;\n  }\n\n#ifndef SQLITE_OMIT_VIRTUALTABLE\n  if( pArg->expert.pExpert ){\n    rc = expertHandleSQL(pArg, zSql, pzErrMsg);\n    return expertFinish(pArg, (rc!=SQLITE_OK), pzErrMsg);\n  }\n#endif\n\n  while( zSql[0] && (SQLITE_OK == rc) ){\n    static const char *zStmtSql;\n    rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, &zLeftover);\n    if( SQLITE_OK != rc ){\n      if( pzErrMsg ){\n        *pzErrMsg = save_err_msg(db);\n      }\n    }else{\n      if( !pStmt ){\n        /* this happens for a comment or white-space */\n        zSql = zLeftover;\n        while( IsSpace(zSql[0]) ) zSql++;\n        continue;\n      }\n      zStmtSql = sqlite3_sql(pStmt);\n      if( zStmtSql==0 ) zStmtSql = \"\";\n      while( IsSpace(zStmtSql[0]) ) zStmtSql++;\n\n      /* save off the prepared statment handle and reset row count */\n      if( pArg ){\n        pArg->pStmt = pStmt;\n        pArg->cnt = 0;\n      }\n\n      /* echo the sql statement if echo on */\n      if( pArg && ShellHasFlag(pArg, SHFLG_Echo) ){\n        utf8_printf(pArg->out, \"%s\\n\", zStmtSql ? zStmtSql : zSql);\n      }\n\n      /* Show the EXPLAIN QUERY PLAN if .eqp is on */\n      if( pArg && pArg->autoEQP && sqlite3_strlike(\"EXPLAIN%\",zStmtSql,0)!=0 ){\n        sqlite3_stmt *pExplain;\n        char *zEQP;\n        int triggerEQP = 0;\n        disable_debug_trace_modes();\n        sqlite3_db_config(db, SQLITE_DBCONFIG_TRIGGER_EQP, -1, &triggerEQP);\n        if( pArg->autoEQP>=AUTOEQP_trigger ){\n          sqlite3_db_config(db, SQLITE_DBCONFIG_TRIGGER_EQP, 1, 0);\n        }\n        zEQP = sqlite3_mprintf(\"EXPLAIN QUERY PLAN %s\", zStmtSql);\n        rc = sqlite3_prepare_v2(db, zEQP, -1, &pExplain, 0);\n        if( rc==SQLITE_OK ){\n          while( sqlite3_step(pExplain)==SQLITE_ROW ){\n            const char *zEQPLine = (const char*)sqlite3_column_text(pExplain,3);\n            int iEqpId = sqlite3_column_int(pExplain, 0);\n            int iParentId = sqlite3_column_int(pExplain, 1);\n            if( zEQPLine[0]=='-' ) eqp_render(pArg);\n            eqp_append(pArg, iEqpId, iParentId, zEQPLine);\n          }\n          eqp_render(pArg);\n        }\n        sqlite3_finalize(pExplain);\n        sqlite3_free(zEQP);\n        if( pArg->autoEQP>=AUTOEQP_full ){\n          /* Also do an EXPLAIN for \".eqp full\" mode */\n          zEQP = sqlite3_mprintf(\"EXPLAIN %s\", zStmtSql);\n          rc = sqlite3_prepare_v2(db, zEQP, -1, &pExplain, 0);\n          if( rc==SQLITE_OK ){\n            pArg->cMode = MODE_Explain;\n            explain_data_prepare(pArg, pExplain);\n            exec_prepared_stmt(pArg, pExplain);\n            explain_data_delete(pArg);\n          }\n          sqlite3_finalize(pExplain);\n          sqlite3_free(zEQP);\n        }\n        if( pArg->autoEQP>=AUTOEQP_trigger && triggerEQP==0 ){\n          sqlite3_db_config(db, SQLITE_DBCONFIG_TRIGGER_EQP, 0, 0);\n          /* Reprepare pStmt before reactiving trace modes */\n          sqlite3_finalize(pStmt);\n          sqlite3_prepare_v2(db, zSql, -1, &pStmt, 0);\n          if( pArg ) pArg->pStmt = pStmt;\n        }\n        restore_debug_trace_modes();\n      }\n\n      if( pArg ){\n        pArg->cMode = pArg->mode;\n        if( pArg->autoExplain ){\n          if( sqlite3_column_count(pStmt)==8\n           && sqlite3_strlike(\"EXPLAIN%\", zStmtSql,0)==0\n          ){\n            pArg->cMode = MODE_Explain;\n          }\n          if( sqlite3_column_count(pStmt)==4\n           && sqlite3_strlike(\"EXPLAIN QUERY PLAN%\", zStmtSql,0)==0 ){\n            pArg->cMode = MODE_EQP;\n          }\n        }\n\n        /* If the shell is currently in \".explain\" mode, gather the extra\n        ** data required to add indents to the output.*/\n        if( pArg->cMode==MODE_Explain ){\n          explain_data_prepare(pArg, pStmt);\n        }\n      }\n\n      exec_prepared_stmt(pArg, pStmt);\n      explain_data_delete(pArg);\n      eqp_render(pArg);\n\n      /* print usage stats if stats on */\n      if( pArg && pArg->statsOn ){\n        display_stats(db, pArg, 0);\n      }\n\n      /* print loop-counters if required */\n      if( pArg && pArg->scanstatsOn ){\n        display_scanstats(db, pArg);\n      }\n\n      /* Finalize the statement just executed. If this fails, save a\n      ** copy of the error message. Otherwise, set zSql to point to the\n      ** next statement to execute. */\n      rc2 = sqlite3_finalize(pStmt);\n      if( rc!=SQLITE_NOMEM ) rc = rc2;\n      if( rc==SQLITE_OK ){\n        zSql = zLeftover;\n        while( IsSpace(zSql[0]) ) zSql++;\n      }else if( pzErrMsg ){\n        *pzErrMsg = save_err_msg(db);\n      }\n\n      /* clear saved stmt handle */\n      if( pArg ){\n        pArg->pStmt = NULL;\n      }\n    }\n  } /* end while */\n\n  return rc;\n}\n\n/*\n** Release memory previously allocated by tableColumnList().\n*/\nstatic void freeColumnList(char **azCol){\n  int i;\n  for(i=1; azCol[i]; i++){\n    sqlite3_free(azCol[i]);\n  }\n  /* azCol[0] is a static string */\n  sqlite3_free(azCol);\n}\n\n/*\n** Return a list of pointers to strings which are the names of all\n** columns in table zTab.   The memory to hold the names is dynamically\n** allocated and must be released by the caller using a subsequent call\n** to freeColumnList().\n**\n** The azCol[0] entry is usually NULL.  However, if zTab contains a rowid\n** value that needs to be preserved, then azCol[0] is filled in with the\n** name of the rowid column.\n**\n** The first regular column in the table is azCol[1].  The list is terminated\n** by an entry with azCol[i]==0.\n*/\nstatic char **tableColumnList(ShellState *p, const char *zTab){\n  char **azCol = 0;\n  sqlite3_stmt *pStmt;\n  char *zSql;\n  int nCol = 0;\n  int nAlloc = 0;\n  int nPK = 0;       /* Number of PRIMARY KEY columns seen */\n  int isIPK = 0;     /* True if one PRIMARY KEY column of type INTEGER */\n  int preserveRowid = ShellHasFlag(p, SHFLG_PreserveRowid);\n  int rc;\n\n  zSql = sqlite3_mprintf(\"PRAGMA table_info=%Q\", zTab);\n  rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);\n  sqlite3_free(zSql);\n  if( rc ) return 0;\n  while( sqlite3_step(pStmt)==SQLITE_ROW ){\n    if( nCol>=nAlloc-2 ){\n      nAlloc = nAlloc*2 + nCol + 10;\n      azCol = sqlite3_realloc(azCol, nAlloc*sizeof(azCol[0]));\n      if( azCol==0 ) shell_out_of_memory();\n    }\n    azCol[++nCol] = sqlite3_mprintf(\"%s\", sqlite3_column_text(pStmt, 1));\n    if( sqlite3_column_int(pStmt, 5) ){\n      nPK++;\n      if( nPK==1\n       && sqlite3_stricmp((const char*)sqlite3_column_text(pStmt,2),\n                          \"INTEGER\")==0\n      ){\n        isIPK = 1;\n      }else{\n        isIPK = 0;\n      }\n    }\n  }\n  sqlite3_finalize(pStmt);\n  if( azCol==0 ) return 0;\n  azCol[0] = 0;\n  azCol[nCol+1] = 0;\n\n  /* The decision of whether or not a rowid really needs to be preserved\n  ** is tricky.  We never need to preserve a rowid for a WITHOUT ROWID table\n  ** or a table with an INTEGER PRIMARY KEY.  We are unable to preserve\n  ** rowids on tables where the rowid is inaccessible because there are other\n  ** columns in the table named \"rowid\", \"_rowid_\", and \"oid\".\n  */\n  if( preserveRowid && isIPK ){\n    /* If a single PRIMARY KEY column with type INTEGER was seen, then it\n    ** might be an alise for the ROWID.  But it might also be a WITHOUT ROWID\n    ** table or a INTEGER PRIMARY KEY DESC column, neither of which are\n    ** ROWID aliases.  To distinguish these cases, check to see if\n    ** there is a \"pk\" entry in \"PRAGMA index_list\".  There will be\n    ** no \"pk\" index if the PRIMARY KEY really is an alias for the ROWID.\n    */\n    zSql = sqlite3_mprintf(\"SELECT 1 FROM pragma_index_list(%Q)\"\n                           \" WHERE origin='pk'\", zTab);\n    rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);\n    sqlite3_free(zSql);\n    if( rc ){\n      freeColumnList(azCol);\n      return 0;\n    }\n    rc = sqlite3_step(pStmt);\n    sqlite3_finalize(pStmt);\n    preserveRowid = rc==SQLITE_ROW;\n  }\n  if( preserveRowid ){\n    /* Only preserve the rowid if we can find a name to use for the\n    ** rowid */\n    static char *azRowid[] = { \"rowid\", \"_rowid_\", \"oid\" };\n    int i, j;\n    for(j=0; j<3; j++){\n      for(i=1; i<=nCol; i++){\n        if( sqlite3_stricmp(azRowid[j],azCol[i])==0 ) break;\n      }\n      if( i>nCol ){\n        /* At this point, we know that azRowid[j] is not the name of any\n        ** ordinary column in the table.  Verify that azRowid[j] is a valid\n        ** name for the rowid before adding it to azCol[0].  WITHOUT ROWID\n        ** tables will fail this last check */\n        rc = sqlite3_table_column_metadata(p->db,0,zTab,azRowid[j],0,0,0,0,0);\n        if( rc==SQLITE_OK ) azCol[0] = azRowid[j];\n        break;\n      }\n    }\n  }\n  return azCol;\n}\n\n/*\n** Toggle the reverse_unordered_selects setting.\n*/\nstatic void toggleSelectOrder(sqlite3 *db){\n  sqlite3_stmt *pStmt = 0;\n  int iSetting = 0;\n  char zStmt[100];\n  sqlite3_prepare_v2(db, \"PRAGMA reverse_unordered_selects\", -1, &pStmt, 0);\n  if( sqlite3_step(pStmt)==SQLITE_ROW ){\n    iSetting = sqlite3_column_int(pStmt, 0);\n  }\n  sqlite3_finalize(pStmt);\n  sqlite3_snprintf(sizeof(zStmt), zStmt,\n       \"PRAGMA reverse_unordered_selects(%d)\", !iSetting);\n  sqlite3_exec(db, zStmt, 0, 0, 0);\n}\n\n/*\n** This is a different callback routine used for dumping the database.\n** Each row received by this callback consists of a table name,\n** the table type (\"index\" or \"table\") and SQL to create the table.\n** This routine should print text sufficient to recreate the table.\n*/\nstatic int dump_callback(void *pArg, int nArg, char **azArg, char **azNotUsed){\n  int rc;\n  const char *zTable;\n  const char *zType;\n  const char *zSql;\n  ShellState *p = (ShellState *)pArg;\n\n  UNUSED_PARAMETER(azNotUsed);\n  if( nArg!=3 || azArg==0 ) return 0;\n  zTable = azArg[0];\n  zType = azArg[1];\n  zSql = azArg[2];\n\n  if( strcmp(zTable, \"sqlite_sequence\")==0 ){\n    raw_printf(p->out, \"DELETE FROM sqlite_sequence;\\n\");\n  }else if( sqlite3_strglob(\"sqlite_stat?\", zTable)==0 ){\n    raw_printf(p->out, \"ANALYZE sqlite_master;\\n\");\n  }else if( strncmp(zTable, \"sqlite_\", 7)==0 ){\n    return 0;\n  }else if( strncmp(zSql, \"CREATE VIRTUAL TABLE\", 20)==0 ){\n    char *zIns;\n    if( !p->writableSchema ){\n      raw_printf(p->out, \"PRAGMA writable_schema=ON;\\n\");\n      p->writableSchema = 1;\n    }\n    zIns = sqlite3_mprintf(\n       \"INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)\"\n       \"VALUES('table','%q','%q',0,'%q');\",\n       zTable, zTable, zSql);\n    utf8_printf(p->out, \"%s\\n\", zIns);\n    sqlite3_free(zIns);\n    return 0;\n  }else{\n    printSchemaLine(p->out, zSql, \";\\n\");\n  }\n\n  if( strcmp(zType, \"table\")==0 ){\n    ShellText sSelect;\n    ShellText sTable;\n    char **azCol;\n    int i;\n    char *savedDestTable;\n    int savedMode;\n\n    azCol = tableColumnList(p, zTable);\n    if( azCol==0 ){\n      p->nErr++;\n      return 0;\n    }\n\n    /* Always quote the table name, even if it appears to be pure ascii,\n    ** in case it is a keyword. Ex:  INSERT INTO \"table\" ... */\n    initText(&sTable);\n    appendText(&sTable, zTable, quoteChar(zTable));\n    /* If preserving the rowid, add a column list after the table name.\n    ** In other words:  \"INSERT INTO tab(rowid,a,b,c,...) VALUES(...)\"\n    ** instead of the usual \"INSERT INTO tab VALUES(...)\".\n    */\n    if( azCol[0] ){\n      appendText(&sTable, \"(\", 0);\n      appendText(&sTable, azCol[0], 0);\n      for(i=1; azCol[i]; i++){\n        appendText(&sTable, \",\", 0);\n        appendText(&sTable, azCol[i], quoteChar(azCol[i]));\n      }\n      appendText(&sTable, \")\", 0);\n    }\n\n    /* Build an appropriate SELECT statement */\n    initText(&sSelect);\n    appendText(&sSelect, \"SELECT \", 0);\n    if( azCol[0] ){\n      appendText(&sSelect, azCol[0], 0);\n      appendText(&sSelect, \",\", 0);\n    }\n    for(i=1; azCol[i]; i++){\n      appendText(&sSelect, azCol[i], quoteChar(azCol[i]));\n      if( azCol[i+1] ){\n        appendText(&sSelect, \",\", 0);\n      }\n    }\n    freeColumnList(azCol);\n    appendText(&sSelect, \" FROM \", 0);\n    appendText(&sSelect, zTable, quoteChar(zTable));\n\n    savedDestTable = p->zDestTable;\n    savedMode = p->mode;\n    p->zDestTable = sTable.z;\n    p->mode = p->cMode = MODE_Insert;\n    rc = shell_exec(p, sSelect.z, 0);\n    if( (rc&0xff)==SQLITE_CORRUPT ){\n      raw_printf(p->out, \"/****** CORRUPTION ERROR *******/\\n\");\n      toggleSelectOrder(p->db);\n      shell_exec(p, sSelect.z, 0);\n      toggleSelectOrder(p->db);\n    }\n    p->zDestTable = savedDestTable;\n    p->mode = savedMode;\n    freeText(&sTable);\n    freeText(&sSelect);\n    if( rc ) p->nErr++;\n  }\n  return 0;\n}\n\n/*\n** Run zQuery.  Use dump_callback() as the callback routine so that\n** the contents of the query are output as SQL statements.\n**\n** If we get a SQLITE_CORRUPT error, rerun the query after appending\n** \"ORDER BY rowid DESC\" to the end.\n*/\nstatic int run_schema_dump_query(\n  ShellState *p,\n  const char *zQuery\n){\n  int rc;\n  char *zErr = 0;\n  rc = sqlite3_exec(p->db, zQuery, dump_callback, p, &zErr);\n  if( rc==SQLITE_CORRUPT ){\n    char *zQ2;\n    int len = strlen30(zQuery);\n    raw_printf(p->out, \"/****** CORRUPTION ERROR *******/\\n\");\n    if( zErr ){\n      utf8_printf(p->out, \"/****** %s ******/\\n\", zErr);\n      sqlite3_free(zErr);\n      zErr = 0;\n    }\n    zQ2 = malloc( len+100 );\n    if( zQ2==0 ) return rc;\n    sqlite3_snprintf(len+100, zQ2, \"%s ORDER BY rowid DESC\", zQuery);\n    rc = sqlite3_exec(p->db, zQ2, dump_callback, p, &zErr);\n    if( rc ){\n      utf8_printf(p->out, \"/****** ERROR: %s ******/\\n\", zErr);\n    }else{\n      rc = SQLITE_CORRUPT;\n    }\n    sqlite3_free(zErr);\n    free(zQ2);\n  }\n  return rc;\n}\n\n/*\n** Text of help messages.\n**\n** The help text for each individual command begins with a line that starts\n** with \".\".  Subsequent lines are supplimental information.\n**\n** There must be two or more spaces between the end of the command and the\n** start of the description of what that command does.\n*/\nstatic const char *(azHelp[]) = {\n#if defined(SQLITE_HAVE_ZLIB) && !defined(SQLITE_OMIT_VIRTUALTABLE)\n  \".archive ...             Manage SQL archives\",\n  \"   Each command must have exactly one of the following options:\",\n  \"     -c, --create               Create a new archive\",\n  \"     -u, --update               Update or add files to an existing archive\",\n  \"     -t, --list                 List contents of archive\",\n  \"     -x, --extract              Extract files from archive\",\n  \"   Optional arguments:\",\n  \"     -v, --verbose              Print each filename as it is processed\",\n  \"     -f FILE, --file FILE       Operate on archive FILE (default is current db)\",\n  \"     -a FILE, --append FILE     Operate on FILE opened using the apndvfs VFS\",\n  \"     -C DIR, --directory DIR    Change to directory DIR to read/extract files\",\n  \"     -n, --dryrun               Show the SQL that would have occurred\",\n  \"   Examples:\",\n  \"     .ar -cf archive.sar foo bar  # Create archive.sar from files foo and bar\",\n  \"     .ar -tf archive.sar          # List members of archive.sar\",\n  \"     .ar -xvf archive.sar         # Verbosely extract files from archive.sar\",\n  \"   See also:\",\n  \"      http://sqlite.org/cli.html#sqlar_archive_support\",\n#endif\n#ifndef SQLITE_OMIT_AUTHORIZATION\n  \".auth ON|OFF             Show authorizer callbacks\",\n#endif\n  \".backup ?DB? FILE        Backup DB (default \\\"main\\\") to FILE\",\n  \"       --append            Use the appendvfs\",\n  \"       --async             Write to FILE without a journal and without fsync()\",\n  \".bail on|off             Stop after hitting an error.  Default OFF\",\n  \".binary on|off           Turn binary output on or off.  Default OFF\",\n  \".cd DIRECTORY            Change the working directory to DIRECTORY\",\n  \".changes on|off          Show number of rows changed by SQL\",\n  \".check GLOB              Fail if output since .testcase does not match\",\n  \".clone NEWDB             Clone data into NEWDB from the existing database\",\n  \".databases               List names and files of attached databases\",\n  \".dbconfig ?op? ?val?     List or change sqlite3_db_config() options\",\n  \".dbinfo ?DB?             Show status information about the database\",\n  \".dump ?TABLE? ...        Render all database content as SQL\",\n  \"   Options:\",\n  \"     --preserve-rowids      Include ROWID values in the output\",\n  \"     --newlines             Allow unescaped newline characters in output\",\n  \"   TABLE is LIKE pattern for the tables to dump\",\n  \".echo on|off             Turn command echo on or off\",\n  \".eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN\",\n  \"   Other Modes:\",\n#ifdef SQLITE_DEBUG\n  \"      test                  Show raw EXPLAIN QUERY PLAN output\",\n  \"      trace                 Like \\\"full\\\" but also enable \\\"PRAGMA vdbe_trace\\\"\",\n#endif\n  \"      trigger               Like \\\"full\\\" but also show trigger bytecode\",\n  \".excel                   Display the output of next command in a spreadsheet\",\n  \".exit ?CODE?             Exit this program with return-code CODE\",\n  \".expert                  EXPERIMENTAL. Suggest indexes for specified queries\",\n/* Because explain mode comes on automatically now, the \".explain\" mode\n** is removed from the help screen.  It is still supported for legacy, however */\n/*\".explain ?on|off|auto?   Turn EXPLAIN output mode on or off or to automatic\",*/\n  \".fullschema ?--indent?   Show schema and the content of sqlite_stat tables\",\n  \".headers on|off          Turn display of headers on or off\",\n  \".help ?-all? ?PATTERN?   Show help text for PATTERN\",\n  \".import FILE TABLE       Import data from FILE into TABLE\",\n#ifndef SQLITE_OMIT_TEST_CONTROL\n  \".imposter INDEX TABLE    Create imposter table TABLE on index INDEX\",\n#endif\n  \".indexes ?TABLE?         Show names of indexes\",\n  \"                           If TABLE is specified, only show indexes for\",\n  \"                           tables matching TABLE using the LIKE operator.\",\n#ifdef SQLITE_ENABLE_IOTRACE\n  \".iotrace FILE            Enable I/O diagnostic logging to FILE\",\n#endif\n  \".limit ?LIMIT? ?VAL?     Display or change the value of an SQLITE_LIMIT\",\n  \".lint OPTIONS            Report potential schema issues.\",\n  \"     Options:\",\n  \"        fkey-indexes     Find missing foreign key indexes\",\n#ifndef SQLITE_OMIT_LOAD_EXTENSION\n  \".load FILE ?ENTRY?       Load an extension library\",\n#endif\n  \".log FILE|off            Turn logging on or off.  FILE can be stderr/stdout\",\n  \".mode MODE ?TABLE?       Set output mode\",\n  \"   MODE is one of:\",\n  \"     ascii    Columns/rows delimited by 0x1F and 0x1E\",\n  \"     csv      Comma-separated values\",\n  \"     column   Left-aligned columns.  (See .width)\",\n  \"     html     HTML <table> code\",\n  \"     insert   SQL insert statements for TABLE\",\n  \"     line     One value per line\",\n  \"     list     Values delimited by \\\"|\\\"\",\n  \"     quote    Escape answers as for SQL\",\n  \"     tabs     Tab-separated values\",\n  \"     tcl      TCL list elements\",\n  \".nullvalue STRING        Use STRING in place of NULL values\",\n  \".once (-e|-x|FILE)       Output for the next SQL command only to FILE\",\n  \"     If FILE begins with '|' then open as a pipe\",\n  \"     Other options:\",\n  \"       -e    Invoke system text editor\",\n  \"       -x    Open in a spreadsheet\",\n  \".open ?OPTIONS? ?FILE?   Close existing database and reopen FILE\",\n  \"     Options:\",\n  \"        --append        Use appendvfs to append database to the end of FILE\",\n#ifdef SQLITE_ENABLE_DESERIALIZE\n  \"        --deserialize   Load into memory useing sqlite3_deserialize()\",\n  \"        --hexdb         Load the output of \\\"dbtotxt\\\" as an in-memory database\",\n  \"        --maxsize N     Maximum size for --hexdb or --deserialized database\",\n#endif\n  \"        --new           Initialize FILE to an empty database\",\n  \"        --readonly      Open FILE readonly\",\n  \"        --zip           FILE is a ZIP archive\",\n  \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",\n  \"     If FILE begins with '|' then open it as a pipe.\",\n  \".print STRING...         Print literal STRING\",\n#ifndef SQLITE_OMIT_PROGRESS_CALLBACK\n  \".progress N              Invoke progress handler after every N opcodes\",\n  \"   --limit N                 Interrupt after N progress callbacks\",\n  \"   --once                    Do no more than one progress interrupt\",\n  \"   --quiet|-q                No output except at interrupts\",\n  \"   --reset                   Reset the count for each input and interrupt\",\n#endif\n  \".prompt MAIN CONTINUE    Replace the standard prompts\",\n  \".quit                    Exit this program\",\n  \".read FILE               Read input from FILE\",\n  \".restore ?DB? FILE       Restore content of DB (default \\\"main\\\") from FILE\",\n  \".save FILE               Write in-memory database into FILE\",\n  \".scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off\",\n  \".schema ?PATTERN?        Show the CREATE statements matching PATTERN\",\n  \"     Options:\",\n  \"         --indent            Try to pretty-print the schema\",\n  \".selftest ?OPTIONS?      Run tests defined in the SELFTEST table\",\n  \"    Options:\",\n  \"       --init               Create a new SELFTEST table\",\n  \"       -v                   Verbose output\",\n  \".separator COL ?ROW?     Change the column and row separators\",\n#if defined(SQLITE_ENABLE_SESSION)\n  \".session ?NAME? CMD ...  Create or control sessions\",\n  \"   Subcommands:\",\n  \"     attach TABLE             Attach TABLE\",\n  \"     changeset FILE           Write a changeset into FILE\",\n  \"     close                    Close one session\",\n  \"     enable ?BOOLEAN?         Set or query the enable bit\",\n  \"     filter GLOB...           Reject tables matching GLOBs\",\n  \"     indirect ?BOOLEAN?       Mark or query the indirect status\",\n  \"     isempty                  Query whether the session is empty\",\n  \"     list                     List currently open session names\",\n  \"     open DB NAME             Open a new session on DB\",\n  \"     patchset FILE            Write a patchset into FILE\",\n  \"   If ?NAME? is omitted, the first defined session is used.\",\n#endif\n  \".sha3sum ...             Compute a SHA3 hash of database content\",\n  \"    Options:\",\n  \"      --schema              Also hash the sqlite_master table\",\n  \"      --sha3-224            Use the sha3-224 algorithm\",\n  \"      --sha3-256            Use the sha3-256 algorithm.  This is the default.\",\n  \"      --sha3-384            Use the sha3-384 algorithm\",\n  \"      --sha3-512            Use the sha3-512 algorithm\",\n  \"    Any other argument is a LIKE pattern for tables to hash\",\n#ifndef SQLITE_NOHAVE_SYSTEM\n  \".shell CMD ARGS...       Run CMD ARGS... in a system shell\",\n#endif\n  \".show                    Show the current values for various settings\",\n  \".stats ?on|off?          Show stats or turn stats on or off\",\n#ifndef SQLITE_NOHAVE_SYSTEM\n  \".system CMD ARGS...      Run CMD ARGS... in a system shell\",\n#endif\n  \".tables ?TABLE?          List names of tables matching LIKE pattern TABLE\",\n  \".testcase NAME           Begin redirecting output to 'testcase-out.txt'\",\n  \".timeout MS              Try opening locked tables for MS milliseconds\",\n  \".timer on|off            Turn SQL timer on or off\",\n#ifndef SQLITE_OMIT_TRACE\n  \".trace ?OPTIONS?         Output each SQL statement as it is run\",\n  \"    FILE                    Send output to FILE\",\n  \"    stdout                  Send output to stdout\",\n  \"    stderr                  Send output to stderr\",\n  \"    off                     Disable tracing\",\n  \"    --expanded              Expand query parameters\",\n#ifdef SQLITE_ENABLE_NORMALIZE\n  \"    --normalized            Normal the SQL statements\",\n#endif\n  \"    --plain                 Show SQL as it is input\",\n  \"    --stmt                  Trace statement execution (SQLITE_TRACE_STMT)\",\n  \"    --profile               Profile statements (SQLITE_TRACE_PROFILE)\",\n  \"    --row                   Trace each row (SQLITE_TRACE_ROW)\",\n  \"    --close                 Trace connection close (SQLITE_TRACE_CLOSE)\",\n#endif /* SQLITE_OMIT_TRACE */\n  \".vfsinfo ?AUX?           Information about the top-level VFS\",\n  \".vfslist                 List all available VFSes\",\n  \".vfsname ?AUX?           Print the name of the VFS stack\",\n  \".width NUM1 NUM2 ...     Set column widths for \\\"column\\\" mode\",\n  \"     Negative values right-justify\",\n};\n\n/*\n** Output help text.\n**\n** zPattern describes the set of commands for which help text is provided.\n** If zPattern is NULL, then show all commands, but only give a one-line\n** description of each.\n**\n** Return the number of matches.\n*/\nstatic int showHelp(FILE *out, const char *zPattern){\n  int i = 0;\n  int j = 0;\n  int n = 0;\n  char *zPat;\n  if( zPattern==0\n   || zPattern[0]=='0'\n   || strcmp(zPattern,\"-a\")==0\n   || strcmp(zPattern,\"-all\")==0\n  ){\n    /* Show all commands, but only one line per command */\n    if( zPattern==0 ) zPattern = \"\";\n    for(i=0; i<ArraySize(azHelp); i++){\n      if( azHelp[i][0]=='.' || zPattern[0] ){\n        utf8_printf(out, \"%s\\n\", azHelp[i]);\n        n++;\n      }\n    }\n  }else{\n    /* Look for commands that for which zPattern is an exact prefix */\n    zPat = sqlite3_mprintf(\".%s*\", zPattern);\n    for(i=0; i<ArraySize(azHelp); i++){\n      if( sqlite3_strglob(zPat, azHelp[i])==0 ){\n        utf8_printf(out, \"%s\\n\", azHelp[i]);\n        j = i+1;\n        n++;\n      }\n    }\n    sqlite3_free(zPat);\n    if( n ){\n      if( n==1 ){\n        /* when zPattern is a prefix of exactly one command, then include the\n        ** details of that command, which should begin at offset j */\n        while( j<ArraySize(azHelp)-1 && azHelp[j][0]!='.' ){\n          utf8_printf(out, \"%s\\n\", azHelp[j]);\n          j++;\n        }\n      }\n      return n;\n    }\n    /* Look for commands that contain zPattern anywhere.  Show the complete\n    ** text of all commands that match. */\n    zPat = sqlite3_mprintf(\"%%%s%%\", zPattern);\n    for(i=0; i<ArraySize(azHelp); i++){\n      if( azHelp[i][0]=='.' ) j = i;\n      if( sqlite3_strlike(zPat, azHelp[i], 0)==0 ){\n        utf8_printf(out, \"%s\\n\", azHelp[j]);\n        while( j<ArraySize(azHelp)-1 && azHelp[j+1][0]!='.' ){\n          j++;\n          utf8_printf(out, \"%s\\n\", azHelp[j]);\n        }\n        i = j;\n        n++;\n      }\n    }\n    sqlite3_free(zPat);\n  }\n  return n;\n}\n\n/* Forward reference */\nstatic int process_input(ShellState *p);\n\n/*\n** Read the content of file zName into memory obtained from sqlite3_malloc64()\n** and return a pointer to the buffer. The caller is responsible for freeing\n** the memory.\n**\n** If parameter pnByte is not NULL, (*pnByte) is set to the number of bytes\n** read.\n**\n** For convenience, a nul-terminator byte is always appended to the data read\n** from the file before the buffer is returned. This byte is not included in\n** the final value of (*pnByte), if applicable.\n**\n** NULL is returned if any error is encountered. The final value of *pnByte\n** is undefined in this case.\n*/\nstatic char *readFile(const char *zName, int *pnByte){\n  FILE *in = fopen(zName, \"rb\");\n  long nIn;\n  size_t nRead;\n  char *pBuf;\n  if( in==0 ) return 0;\n  fseek(in, 0, SEEK_END);\n  nIn = ftell(in);\n  rewind(in);\n  pBuf = sqlite3_malloc64( nIn+1 );\n  if( pBuf==0 ){ fclose(in); return 0; }\n  nRead = fread(pBuf, nIn, 1, in);\n  fclose(in);\n  if( nRead!=1 ){\n    sqlite3_free(pBuf);\n    return 0;\n  }\n  pBuf[nIn] = 0;\n  if( pnByte ) *pnByte = nIn;\n  return pBuf;\n}\n\n#if defined(SQLITE_ENABLE_SESSION)\n/*\n** Close a single OpenSession object and release all of its associated\n** resources.\n*/\nstatic void session_close(OpenSession *pSession){\n  int i;\n  sqlite3session_delete(pSession->p);\n  sqlite3_free(pSession->zName);\n  for(i=0; i<pSession->nFilter; i++){\n    sqlite3_free(pSession->azFilter[i]);\n  }\n  sqlite3_free(pSession->azFilter);\n  memset(pSession, 0, sizeof(OpenSession));\n}\n#endif\n\n/*\n** Close all OpenSession objects and release all associated resources.\n*/\n#if defined(SQLITE_ENABLE_SESSION)\nstatic void session_close_all(ShellState *p){\n  int i;\n  for(i=0; i<p->nSession; i++){\n    session_close(&p->aSession[i]);\n  }\n  p->nSession = 0;\n}\n#else\n# define session_close_all(X)\n#endif\n\n/*\n** Implementation of the xFilter function for an open session.  Omit\n** any tables named by \".session filter\" but let all other table through.\n*/\n#if defined(SQLITE_ENABLE_SESSION)\nstatic int session_filter(void *pCtx, const char *zTab){\n  OpenSession *pSession = (OpenSession*)pCtx;\n  int i;\n  for(i=0; i<pSession->nFilter; i++){\n    if( sqlite3_strglob(pSession->azFilter[i], zTab)==0 ) return 0;\n  }\n  return 1;\n}\n#endif\n\n/*\n** Try to deduce the type of file for zName based on its content.  Return\n** one of the SHELL_OPEN_* constants.\n**\n** If the file does not exist or is empty but its name looks like a ZIP\n** archive and the dfltZip flag is true, then assume it is a ZIP archive.\n** Otherwise, assume an ordinary database regardless of the filename if\n** the type cannot be determined from content.\n*/\nint deduceDatabaseType(const char *zName, int dfltZip){\n  FILE *f = fopen(zName, \"rb\");\n  size_t n;\n  int rc = SHELL_OPEN_UNSPEC;\n  char zBuf[100];\n  if( f==0 ){\n    if( dfltZip && sqlite3_strlike(\"%.zip\",zName,0)==0 ){\n       return SHELL_OPEN_ZIPFILE;\n    }else{\n       return SHELL_OPEN_NORMAL;\n    }\n  }\n  n = fread(zBuf, 16, 1, f);\n  if( n==1 && memcmp(zBuf, \"SQLite format 3\", 16)==0 ){\n    fclose(f);\n    return SHELL_OPEN_NORMAL;\n  }\n  fseek(f, -25, SEEK_END);\n  n = fread(zBuf, 25, 1, f);\n  if( n==1 && memcmp(zBuf, \"Start-Of-SQLite3-\", 17)==0 ){\n    rc = SHELL_OPEN_APPENDVFS;\n  }else{\n    fseek(f, -22, SEEK_END);\n    n = fread(zBuf, 22, 1, f);\n    if( n==1 && zBuf[0]==0x50 && zBuf[1]==0x4b && zBuf[2]==0x05\n       && zBuf[3]==0x06 ){\n      rc = SHELL_OPEN_ZIPFILE;\n    }else if( n==0 && dfltZip && sqlite3_strlike(\"%.zip\",zName,0)==0 ){\n      rc = SHELL_OPEN_ZIPFILE;\n    }\n  }\n  fclose(f);\n  return rc;  \n}\n\n#ifdef SQLITE_ENABLE_DESERIALIZE\n/*\n** Reconstruct an in-memory database using the output from the \"dbtotxt\"\n** program.  Read content from the file in p->zDbFilename.  If p->zDbFilename\n** is 0, then read from standard input.\n*/\nstatic unsigned char *readHexDb(ShellState *p, int *pnData){\n  unsigned char *a = 0;\n  int nLine;\n  int n = 0;\n  int pgsz = 0;\n  int iOffset = 0;\n  int j, k;\n  int rc;\n  FILE *in;\n  unsigned char x[16];\n  char zLine[1000];\n  if( p->zDbFilename ){\n    in = fopen(p->zDbFilename, \"r\");\n    if( in==0 ){\n      utf8_printf(stderr, \"cannot open \\\"%s\\\" for reading\\n\", p->zDbFilename);\n      return 0;\n    }\n    nLine = 0;\n  }else{\n    in = p->in;\n    nLine = p->lineno;\n  }\n  *pnData = 0;\n  nLine++;\n  if( fgets(zLine, sizeof(zLine), in)==0 ) goto readHexDb_error;\n  rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);\n  if( rc!=2 ) goto readHexDb_error;\n  if( n<=0 ) goto readHexDb_error;\n  a = sqlite3_malloc( n );\n  if( a==0 ){\n    utf8_printf(stderr, \"Out of memory!\\n\");\n    goto readHexDb_error;\n  }\n  memset(a, 0, n);\n  if( pgsz<512 || pgsz>65536 || (pgsz & (pgsz-1))!=0 ){\n    utf8_printf(stderr, \"invalid pagesize\\n\");\n    goto readHexDb_error;\n  }\n  for(nLine++; fgets(zLine, sizeof(zLine), in)!=0; nLine++){\n    rc = sscanf(zLine, \"| page %d offset %d\", &j, &k);\n    if( rc==2 ){\n      iOffset = k;\n      continue;\n    }\n    if( strncmp(zLine, \"| end \", 6)==0 ){\n      break;\n    }\n    rc = sscanf(zLine,\"| %d: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\"\n                      \"  %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\",\n                &j, &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],\n                &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);\n    if( rc==17 ){\n      k = iOffset+j;\n      if( k+16<=n ){\n        memcpy(a+k, x, 16);\n      }\n    }\n  }\n  *pnData = n;\n  if( in!=p->in ){\n    fclose(in);\n  }else{\n    p->lineno = nLine;\n  }\n  return a;\n\nreadHexDb_error:\n  if( in!=stdin ){\n    fclose(in);\n  }else{\n    while( fgets(zLine, sizeof(zLine), p->in)!=0 ){\n      nLine++;\n      if(strncmp(zLine, \"| end \", 6)==0 ) break;\n    }\n    p->lineno = nLine;\n  }\n  sqlite3_free(a);\n  utf8_printf(stderr,\"Error on line %d of --hexdb input\\n\", nLine);\n  return 0;\n}\n#endif /* SQLITE_ENABLE_DESERIALIZE */\n\n/* Flags for open_db().\n**\n** The default behavior of open_db() is to exit(1) if the database fails to\n** open.  The OPEN_DB_KEEPALIVE flag changes that so that it prints an error\n** but still returns without calling exit.\n**\n** The OPEN_DB_ZIPFILE flag causes open_db() to prefer to open files as a\n** ZIP archive if the file does not exist or is empty and its name matches\n** the *.zip pattern.\n*/\n#define OPEN_DB_KEEPALIVE   0x001   /* Return after error if true */\n#define OPEN_DB_ZIPFILE     0x002   /* Open as ZIP if name matches *.zip */\n\n/*\n** Make sure the database is open.  If it is not, then open it.  If\n** the database fails to open, print an error message and exit.\n*/\nstatic void open_db(ShellState *p, int openFlags){\n  if( p->db==0 ){\n    if( p->openMode==SHELL_OPEN_UNSPEC ){\n      if( p->zDbFilename==0 || p->zDbFilename[0]==0 ){\n        p->openMode = SHELL_OPEN_NORMAL;\n      }else{\n        p->openMode = (u8)deduceDatabaseType(p->zDbFilename, \n                             (openFlags & OPEN_DB_ZIPFILE)!=0);\n      }\n    }\n    switch( p->openMode ){\n      case SHELL_OPEN_APPENDVFS: {\n        sqlite3_open_v2(p->zDbFilename, &p->db, \n           SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE, \"apndvfs\");\n        break;\n      }\n      case SHELL_OPEN_HEXDB:\n      case SHELL_OPEN_DESERIALIZE: {\n        sqlite3_open(0, &p->db);\n        break;\n      }\n      case SHELL_OPEN_ZIPFILE: {\n        sqlite3_open(\":memory:\", &p->db);\n        break;\n      }\n      case SHELL_OPEN_READONLY: {\n        sqlite3_open_v2(p->zDbFilename, &p->db, SQLITE_OPEN_READONLY, 0);\n        break;\n      }\n      case SHELL_OPEN_UNSPEC:\n      case SHELL_OPEN_NORMAL: {\n        sqlite3_open(p->zDbFilename, &p->db);\n        break;\n      }\n    }\n    globalDb = p->db;\n    if( p->db==0 || SQLITE_OK!=sqlite3_errcode(p->db) ){\n      utf8_printf(stderr,\"Error: unable to open database \\\"%s\\\": %s\\n\",\n          p->zDbFilename, sqlite3_errmsg(p->db));\n      if( openFlags & OPEN_DB_KEEPALIVE ){\n        sqlite3_open(\":memory:\", &p->db);\n        return;\n      }\n      exit(1);\n    }\n#ifndef SQLITE_OMIT_LOAD_EXTENSION\n    sqlite3_enable_load_extension(p->db, 1);\n#endif\n    sqlite3_fileio_init(p->db, 0, 0);\n    sqlite3_shathree_init(p->db, 0, 0);\n    sqlite3_completion_init(p->db, 0, 0);\n#ifdef SQLITE_HAVE_ZLIB\n    sqlite3_zipfile_init(p->db, 0, 0);\n    sqlite3_sqlar_init(p->db, 0, 0);\n#endif\n    sqlite3_create_function(p->db, \"shell_add_schema\", 3, SQLITE_UTF8, 0,\n                            shellAddSchemaName, 0, 0);\n    sqlite3_create_function(p->db, \"shell_module_schema\", 1, SQLITE_UTF8, 0,\n                            shellModuleSchema, 0, 0);\n    sqlite3_create_function(p->db, \"shell_putsnl\", 1, SQLITE_UTF8, p,\n                            shellPutsFunc, 0, 0);\n#ifndef SQLITE_NOHAVE_SYSTEM\n    sqlite3_create_function(p->db, \"edit\", 1, SQLITE_UTF8, 0,\n                            editFunc, 0, 0);\n    sqlite3_create_function(p->db, \"edit\", 2, SQLITE_UTF8, 0,\n                            editFunc, 0, 0);\n#endif\n    if( p->openMode==SHELL_OPEN_ZIPFILE ){\n      char *zSql = sqlite3_mprintf(\n         \"CREATE VIRTUAL TABLE zip USING zipfile(%Q);\", p->zDbFilename);\n      sqlite3_exec(p->db, zSql, 0, 0, 0);\n      sqlite3_free(zSql);\n    }\n#ifdef SQLITE_ENABLE_DESERIALIZE\n    else\n    if( p->openMode==SHELL_OPEN_DESERIALIZE || p->openMode==SHELL_OPEN_HEXDB ){\n      int rc;\n      int nData = 0;\n      unsigned char *aData;\n      if( p->openMode==SHELL_OPEN_DESERIALIZE ){\n        aData = (unsigned char*)readFile(p->zDbFilename, &nData);\n      }else{\n        aData = readHexDb(p, &nData);\n        if( aData==0 ){\n          utf8_printf(stderr, \"Error in hexdb input\\n\");\n          return;\n        }\n      }\n      rc = sqlite3_deserialize(p->db, \"main\", aData, nData, nData,\n                   SQLITE_DESERIALIZE_RESIZEABLE |\n                   SQLITE_DESERIALIZE_FREEONCLOSE);\n      if( rc ){\n        utf8_printf(stderr, \"Error: sqlite3_deserialize() returns %d\\n\", rc);\n      }\n      if( p->szMax>0 ){\n        sqlite3_file_control(p->db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &p->szMax);\n      }\n    }\n#endif\n  }\n}\n\n/*\n** Attempt to close the databaes connection.  Report errors.\n*/\nvoid close_db(sqlite3 *db){\n  int rc = sqlite3_close(db);\n  if( rc ){\n    utf8_printf(stderr, \"Error: sqlite3_close() returns %d: %s\\n\",\n        rc, sqlite3_errmsg(db));\n  } \n}\n\n#if HAVE_READLINE || HAVE_EDITLINE\n/*\n** Readline completion callbacks\n*/\nstatic char *readline_completion_generator(const char *text, int state){\n  static sqlite3_stmt *pStmt = 0;\n  char *zRet;\n  if( state==0 ){\n    char *zSql;\n    sqlite3_finalize(pStmt);\n    zSql = sqlite3_mprintf(\"SELECT DISTINCT candidate COLLATE nocase\"\n                           \"  FROM completion(%Q) ORDER BY 1\", text);\n    sqlite3_prepare_v2(globalDb, zSql, -1, &pStmt, 0);\n    sqlite3_free(zSql);\n  }\n  if( sqlite3_step(pStmt)==SQLITE_ROW ){\n    zRet = strdup((const char*)sqlite3_column_text(pStmt, 0));\n  }else{\n    sqlite3_finalize(pStmt);\n    pStmt = 0;\n    zRet = 0;\n  }\n  return zRet;\n}\nstatic char **readline_completion(const char *zText, int iStart, int iEnd){\n  rl_attempted_completion_over = 1;\n  return rl_completion_matches(zText, readline_completion_generator);\n}\n\n#elif HAVE_LINENOISE\n/*\n** Linenoise completion callback\n*/\nstatic void linenoise_completion(const char *zLine, linenoiseCompletions *lc){\n  int nLine = strlen30(zLine);\n  int i, iStart;\n  sqlite3_stmt *pStmt = 0;\n  char *zSql;\n  char zBuf[1000];\n\n  if( nLine>sizeof(zBuf)-30 ) return;\n  if( zLine[0]=='.' || zLine[0]=='#') return;\n  for(i=nLine-1; i>=0 && (isalnum(zLine[i]) || zLine[i]=='_'); i--){}\n  if( i==nLine-1 ) return;\n  iStart = i+1;\n  memcpy(zBuf, zLine, iStart);\n  zSql = sqlite3_mprintf(\"SELECT DISTINCT candidate COLLATE nocase\"\n                         \"  FROM completion(%Q,%Q) ORDER BY 1\",\n                         &zLine[iStart], zLine);\n  sqlite3_prepare_v2(globalDb, zSql, -1, &pStmt, 0);\n  sqlite3_free(zSql);\n  sqlite3_exec(globalDb, \"PRAGMA page_count\", 0, 0, 0); /* Load the schema */\n  while( sqlite3_step(pStmt)==SQLITE_ROW ){\n    const char *zCompletion = (const char*)sqlite3_column_text(pStmt, 0);\n    int nCompletion = sqlite3_column_bytes(pStmt, 0);\n    if( iStart+nCompletion < sizeof(zBuf)-1 ){\n      memcpy(zBuf+iStart, zCompletion, nCompletion+1);\n      linenoiseAddCompletion(lc, zBuf);\n    }\n  }\n  sqlite3_finalize(pStmt);\n}\n#endif\n\n/*\n** Do C-language style dequoting.\n**\n**    \\a    -> alarm\n**    \\b    -> backspace\n**    \\t    -> tab\n**    \\n    -> newline\n**    \\v    -> vertical tab\n**    \\f    -> form feed\n**    \\r    -> carriage return\n**    \\s    -> space\n**    \\\"    -> \"\n**    \\'    -> '\n**    \\\\    -> backslash\n**    \\NNN  -> ascii character NNN in octal\n*/\nstatic void resolve_backslashes(char *z){\n  int i, j;\n  char c;\n  while( *z && *z!='\\\\' ) z++;\n  for(i=j=0; (c = z[i])!=0; i++, j++){\n    if( c=='\\\\' && z[i+1]!=0 ){\n      c = z[++i];\n      if( c=='a' ){\n        c = '\\a';\n      }else if( c=='b' ){\n        c = '\\b';\n      }else if( c=='t' ){\n        c = '\\t';\n      }else if( c=='n' ){\n        c = '\\n';\n      }else if( c=='v' ){\n        c = '\\v';\n      }else if( c=='f' ){\n        c = '\\f';\n      }else if( c=='r' ){\n        c = '\\r';\n      }else if( c=='\"' ){\n        c = '\"';\n      }else if( c=='\\'' ){\n        c = '\\'';\n      }else if( c=='\\\\' ){\n        c = '\\\\';\n      }else if( c>='0' && c<='7' ){\n        c -= '0';\n        if( z[i+1]>='0' && z[i+1]<='7' ){\n          i++;\n          c = (c<<3) + z[i] - '0';\n          if( z[i+1]>='0' && z[i+1]<='7' ){\n            i++;\n            c = (c<<3) + z[i] - '0';\n          }\n        }\n      }\n    }\n    z[j] = c;\n  }\n  if( j<i ) z[j] = 0;\n}\n\n/*\n** Interpret zArg as either an integer or a boolean value.  Return 1 or 0\n** for TRUE and FALSE.  Return the integer value if appropriate.\n*/\nstatic int booleanValue(const char *zArg){\n  int i;\n  if( zArg[0]=='0' && zArg[1]=='x' ){\n    for(i=2; hexDigitValue(zArg[i])>=0; i++){}\n  }else{\n    for(i=0; zArg[i]>='0' && zArg[i]<='9'; i++){}\n  }\n  if( i>0 && zArg[i]==0 ) return (int)(integerValue(zArg) & 0xffffffff);\n  if( sqlite3_stricmp(zArg, \"on\")==0 || sqlite3_stricmp(zArg,\"yes\")==0 ){\n    return 1;\n  }\n  if( sqlite3_stricmp(zArg, \"off\")==0 || sqlite3_stricmp(zArg,\"no\")==0 ){\n    return 0;\n  }\n  utf8_printf(stderr, \"ERROR: Not a boolean value: \\\"%s\\\". Assuming \\\"no\\\".\\n\",\n          zArg);\n  return 0;\n}\n\n/*\n** Set or clear a shell flag according to a boolean value.\n*/\nstatic void setOrClearFlag(ShellState *p, unsigned mFlag, const char *zArg){\n  if( booleanValue(zArg) ){\n    ShellSetFlag(p, mFlag);\n  }else{\n    ShellClearFlag(p, mFlag);\n  }\n}\n\n/*\n** Close an output file, assuming it is not stderr or stdout\n*/\nstatic void output_file_close(FILE *f){\n  if( f && f!=stdout && f!=stderr ) fclose(f);\n}\n\n/*\n** Try to open an output file.   The names \"stdout\" and \"stderr\" are\n** recognized and do the right thing.  NULL is returned if the output\n** filename is \"off\".\n*/\nstatic FILE *output_file_open(const char *zFile, int bTextMode){\n  FILE *f;\n  if( strcmp(zFile,\"stdout\")==0 ){\n    f = stdout;\n  }else if( strcmp(zFile, \"stderr\")==0 ){\n    f = stderr;\n  }else if( strcmp(zFile, \"off\")==0 ){\n    f = 0;\n  }else{\n    f = fopen(zFile, bTextMode ? \"w\" : \"wb\");\n    if( f==0 ){\n      utf8_printf(stderr, \"Error: cannot open \\\"%s\\\"\\n\", zFile);\n    }\n  }\n  return f;\n}\n\n#ifndef SQLITE_OMIT_TRACE\n/*\n** A routine for handling output from sqlite3_trace().\n*/\nstatic int sql_trace_callback(\n  unsigned mType,         /* The trace type */\n  void *pArg,             /* The ShellState pointer */\n  void *pP,               /* Usually a pointer to sqlite_stmt */\n  void *pX                /* Auxiliary output */\n){\n  ShellState *p = (ShellState*)pArg;\n  sqlite3_stmt *pStmt;\n  const char *zSql;\n  int nSql;\n  if( p->traceOut==0 ) return 0;\n  if( mType==SQLITE_TRACE_CLOSE ){\n    utf8_printf(p->traceOut, \"-- closing database connection\\n\");\n    return 0;\n  }\n  if( mType!=SQLITE_TRACE_ROW && ((const char*)pX)[0]=='-' ){\n    zSql = (const char*)pX;\n  }else{\n    pStmt = (sqlite3_stmt*)pP;\n    switch( p->eTraceType ){\n      case SHELL_TRACE_EXPANDED: {\n        zSql = sqlite3_expanded_sql(pStmt);\n        break;\n      }\n#ifdef SQLITE_ENABLE_NORMALIZE\n      case SHELL_TRACE_NORMALIZED: {\n        zSql = sqlite3_normalized_sql(pStmt);\n        break;\n      }\n#endif\n      default: {\n        zSql = sqlite3_sql(pStmt);\n        break;\n      }\n    }\n  }\n  if( zSql==0 ) return 0;\n  nSql = strlen30(zSql);\n  while( nSql>0 && zSql[nSql-1]==';' ){ nSql--; }\n  switch( mType ){\n    case SQLITE_TRACE_ROW:\n    case SQLITE_TRACE_STMT: {\n      utf8_printf(p->traceOut, \"%.*s;\\n\", nSql, zSql);\n      break;\n    }\n    case SQLITE_TRACE_PROFILE: {\n      sqlite3_int64 nNanosec = *(sqlite3_int64*)pX;\n      utf8_printf(p->traceOut, \"%.*s; -- %lld ns\\n\", nSql, zSql, nNanosec);\n      break;\n    }\n  }\n  return 0;\n}\n#endif\n\n/*\n** A no-op routine that runs with the \".breakpoint\" doc-command.  This is\n** a useful spot to set a debugger breakpoint.\n*/\nstatic void test_breakpoint(void){\n  static int nCall = 0;\n  nCall++;\n}\n\n/*\n** An object used to read a CSV and other files for import.\n*/\ntypedef struct ImportCtx ImportCtx;\nstruct ImportCtx {\n  const char *zFile;  /* Name of the input file */\n  FILE *in;           /* Read the CSV text from this input stream */\n  char *z;            /* Accumulated text for a field */\n  int n;              /* Number of bytes in z */\n  int nAlloc;         /* Space allocated for z[] */\n  int nLine;          /* Current line number */\n  int bNotFirst;      /* True if one or more bytes already read */\n  int cTerm;          /* Character that terminated the most recent field */\n  int cColSep;        /* The column separator character.  (Usually \",\") */\n  int cRowSep;        /* The row separator character.  (Usually \"\\n\") */\n};\n\n/* Append a single byte to z[] */\nstatic void import_append_char(ImportCtx *p, int c){\n  if( p->n+1>=p->nAlloc ){\n    p->nAlloc += p->nAlloc + 100;\n    p->z = sqlite3_realloc64(p->z, p->nAlloc);\n    if( p->z==0 ) shell_out_of_memory();\n  }\n  p->z[p->n++] = (char)c;\n}\n\n/* Read a single field of CSV text.  Compatible with rfc4180 and extended\n** with the option of having a separator other than \",\".\n**\n**   +  Input comes from p->in.\n**   +  Store results in p->z of length p->n.  Space to hold p->z comes\n**      from sqlite3_malloc64().\n**   +  Use p->cSep as the column separator.  The default is \",\".\n**   +  Use p->rSep as the row separator.  The default is \"\\n\".\n**   +  Keep track of the line number in p->nLine.\n**   +  Store the character that terminates the field in p->cTerm.  Store\n**      EOF on end-of-file.\n**   +  Report syntax errors on stderr\n*/\nstatic char *SQLITE_CDECL csv_read_one_field(ImportCtx *p){\n  int c;\n  int cSep = p->cColSep;\n  int rSep = p->cRowSep;\n  p->n = 0;\n  c = fgetc(p->in);\n  if( c==EOF || seenInterrupt ){\n    p->cTerm = EOF;\n    return 0;\n  }\n  if( c=='\"' ){\n    int pc, ppc;\n    int startLine = p->nLine;\n    int cQuote = c;\n    pc = ppc = 0;\n    while( 1 ){\n      c = fgetc(p->in);\n      if( c==rSep ) p->nLine++;\n      if( c==cQuote ){\n        if( pc==cQuote ){\n          pc = 0;\n          continue;\n        }\n      }\n      if( (c==cSep && pc==cQuote)\n       || (c==rSep && pc==cQuote)\n       || (c==rSep && pc=='\\r' && ppc==cQuote)\n       || (c==EOF && pc==cQuote)\n      ){\n        do{ p->n--; }while( p->z[p->n]!=cQuote );\n        p->cTerm = c;\n        break;\n      }\n      if( pc==cQuote && c!='\\r' ){\n        utf8_printf(stderr, \"%s:%d: unescaped %c character\\n\",\n                p->zFile, p->nLine, cQuote);\n      }\n      if( c==EOF ){\n        utf8_printf(stderr, \"%s:%d: unterminated %c-quoted field\\n\",\n                p->zFile, startLine, cQuote);\n        p->cTerm = c;\n        break;\n      }\n      import_append_char(p, c);\n      ppc = pc;\n      pc = c;\n    }\n  }else{\n    /* If this is the first field being parsed and it begins with the\n    ** UTF-8 BOM  (0xEF BB BF) then skip the BOM */\n    if( (c&0xff)==0xef && p->bNotFirst==0 ){\n      import_append_char(p, c);\n      c = fgetc(p->in);\n      if( (c&0xff)==0xbb ){\n        import_append_char(p, c);\n        c = fgetc(p->in);\n        if( (c&0xff)==0xbf ){\n          p->bNotFirst = 1;\n          p->n = 0;\n          return csv_read_one_field(p);\n        }\n      }\n    }\n    while( c!=EOF && c!=cSep && c!=rSep ){\n      import_append_char(p, c);\n      c = fgetc(p->in);\n    }\n    if( c==rSep ){\n      p->nLine++;\n      if( p->n>0 && p->z[p->n-1]=='\\r' ) p->n--;\n    }\n    p->cTerm = c;\n  }\n  if( p->z ) p->z[p->n] = 0;\n  p->bNotFirst = 1;\n  return p->z;\n}\n\n/* Read a single field of ASCII delimited text.\n**\n**   +  Input comes from p->in.\n**   +  Store results in p->z of length p->n.  Space to hold p->z comes\n**      from sqlite3_malloc64().\n**   +  Use p->cSep as the column separator.  The default is \"\\x1F\".\n**   +  Use p->rSep as the row separator.  The default is \"\\x1E\".\n**   +  Keep track of the row number in p->nLine.\n**   +  Store the character that terminates the field in p->cTerm.  Store\n**      EOF on end-of-file.\n**   +  Report syntax errors on stderr\n*/\nstatic char *SQLITE_CDECL ascii_read_one_field(ImportCtx *p){\n  int c;\n  int cSep = p->cColSep;\n  int rSep = p->cRowSep;\n  p->n = 0;\n  c = fgetc(p->in);\n  if( c==EOF || seenInterrupt ){\n    p->cTerm = EOF;\n    return 0;\n  }\n  while( c!=EOF && c!=cSep && c!=rSep ){\n    import_append_char(p, c);\n    c = fgetc(p->in);\n  }\n  if( c==rSep ){\n    p->nLine++;\n  }\n  p->cTerm = c;\n  if( p->z ) p->z[p->n] = 0;\n  return p->z;\n}\n\n/*\n** Try to transfer data for table zTable.  If an error is seen while\n** moving forward, try to go backwards.  The backwards movement won't\n** work for WITHOUT ROWID tables.\n*/\nstatic void tryToCloneData(\n  ShellState *p,\n  sqlite3 *newDb,\n  const char *zTable\n){\n  sqlite3_stmt *pQuery = 0;\n  sqlite3_stmt *pInsert = 0;\n  char *zQuery = 0;\n  char *zInsert = 0;\n  int rc;\n  int i, j, n;\n  int nTable = strlen30(zTable);\n  int k = 0;\n  int cnt = 0;\n  const int spinRate = 10000;\n\n  zQuery = sqlite3_mprintf(\"SELECT * FROM \\\"%w\\\"\", zTable);\n  rc = sqlite3_prepare_v2(p->db, zQuery, -1, &pQuery, 0);\n  if( rc ){\n    utf8_printf(stderr, \"Error %d: %s on [%s]\\n\",\n            sqlite3_extended_errcode(p->db), sqlite3_errmsg(p->db),\n            zQuery);\n    goto end_data_xfer;\n  }\n  n = sqlite3_column_count(pQuery);\n  zInsert = sqlite3_malloc64(200 + nTable + n*3);\n  if( zInsert==0 ) shell_out_of_memory();\n  sqlite3_snprintf(200+nTable,zInsert,\n                   \"INSERT OR IGNORE INTO \\\"%s\\\" VALUES(?\", zTable);\n  i = strlen30(zInsert);\n  for(j=1; j<n; j++){\n    memcpy(zInsert+i, \",?\", 2);\n    i += 2;\n  }\n  memcpy(zInsert+i, \");\", 3);\n  rc = sqlite3_prepare_v2(newDb, zInsert, -1, &pInsert, 0);\n  if( rc ){\n    utf8_printf(stderr, \"Error %d: %s on [%s]\\n\",\n            sqlite3_extended_errcode(newDb), sqlite3_errmsg(newDb),\n            zQuery);\n    goto end_data_xfer;\n  }\n  for(k=0; k<2; k++){\n    while( (rc = sqlite3_step(pQuery))==SQLITE_ROW ){\n      for(i=0; i<n; i++){\n        switch( sqlite3_column_type(pQuery, i) ){\n          case SQLITE_NULL: {\n            sqlite3_bind_null(pInsert, i+1);\n            break;\n          }\n          case SQLITE_INTEGER: {\n            sqlite3_bind_int64(pInsert, i+1, sqlite3_column_int64(pQuery,i));\n            break;\n          }\n          case SQLITE_FLOAT: {\n            sqlite3_bind_double(pInsert, i+1, sqlite3_column_double(pQuery,i));\n            break;\n          }\n          case SQLITE_TEXT: {\n            sqlite3_bind_text(pInsert, i+1,\n                             (const char*)sqlite3_column_text(pQuery,i),\n                             -1, SQLITE_STATIC);\n            break;\n          }\n          case SQLITE_BLOB: {\n            sqlite3_bind_blob(pInsert, i+1, sqlite3_column_blob(pQuery,i),\n                                            sqlite3_column_bytes(pQuery,i),\n                                            SQLITE_STATIC);\n            break;\n          }\n        }\n      } /* End for */\n      rc = sqlite3_step(pInsert);\n      if( rc!=SQLITE_OK && rc!=SQLITE_ROW && rc!=SQLITE_DONE ){\n        utf8_printf(stderr, \"Error %d: %s\\n\", sqlite3_extended_errcode(newDb),\n                        sqlite3_errmsg(newDb));\n      }\n      sqlite3_reset(pInsert);\n      cnt++;\n      if( (cnt%spinRate)==0 ){\n        printf(\"%c\\b\", \"|/-\\\\\"[(cnt/spinRate)%4]);\n        fflush(stdout);\n      }\n    } /* End while */\n    if( rc==SQLITE_DONE ) break;\n    sqlite3_finalize(pQuery);\n    sqlite3_free(zQuery);\n    zQuery = sqlite3_mprintf(\"SELECT * FROM \\\"%w\\\" ORDER BY rowid DESC;\",\n                             zTable);\n    rc = sqlite3_prepare_v2(p->db, zQuery, -1, &pQuery, 0);\n    if( rc ){\n      utf8_printf(stderr, \"Warning: cannot step \\\"%s\\\" backwards\", zTable);\n      break;\n    }\n  } /* End for(k=0...) */\n\nend_data_xfer:\n  sqlite3_finalize(pQuery);\n  sqlite3_finalize(pInsert);\n  sqlite3_free(zQuery);\n  sqlite3_free(zInsert);\n}\n\n\n/*\n** Try to transfer all rows of the schema that match zWhere.  For\n** each row, invoke xForEach() on the object defined by that row.\n** If an error is encountered while moving forward through the\n** sqlite_master table, try again moving backwards.\n*/\nstatic void tryToCloneSchema(\n  ShellState *p,\n  sqlite3 *newDb,\n  const char *zWhere,\n  void (*xForEach)(ShellState*,sqlite3*,const char*)\n){\n  sqlite3_stmt *pQuery = 0;\n  char *zQuery = 0;\n  int rc;\n  const unsigned char *zName;\n  const unsigned char *zSql;\n  char *zErrMsg = 0;\n\n  zQuery = sqlite3_mprintf(\"SELECT name, sql FROM sqlite_master\"\n                           \" WHERE %s\", zWhere);\n  rc = sqlite3_prepare_v2(p->db, zQuery, -1, &pQuery, 0);\n  if( rc ){\n    utf8_printf(stderr, \"Error: (%d) %s on [%s]\\n\",\n                    sqlite3_extended_errcode(p->db), sqlite3_errmsg(p->db),\n                    zQuery);\n    goto end_schema_xfer;\n  }\n  while( (rc = sqlite3_step(pQuery))==SQLITE_ROW ){\n    zName = sqlite3_column_text(pQuery, 0);\n    zSql = sqlite3_column_text(pQuery, 1);\n    printf(\"%s... \", zName); fflush(stdout);\n    sqlite3_exec(newDb, (const char*)zSql, 0, 0, &zErrMsg);\n    if( zErrMsg ){\n      utf8_printf(stderr, \"Error: %s\\nSQL: [%s]\\n\", zErrMsg, zSql);\n      sqlite3_free(zErrMsg);\n      zErrMsg = 0;\n    }\n    if( xForEach ){\n      xForEach(p, newDb, (const char*)zName);\n    }\n    printf(\"done\\n\");\n  }\n  if( rc!=SQLITE_DONE ){\n    sqlite3_finalize(pQuery);\n    sqlite3_free(zQuery);\n    zQuery = sqlite3_mprintf(\"SELECT name, sql FROM sqlite_master\"\n                             \" WHERE %s ORDER BY rowid DESC\", zWhere);\n    rc = sqlite3_prepare_v2(p->db, zQuery, -1, &pQuery, 0);\n    if( rc ){\n      utf8_printf(stderr, \"Error: (%d) %s on [%s]\\n\",\n                      sqlite3_extended_errcode(p->db), sqlite3_errmsg(p->db),\n                      zQuery);\n      goto end_schema_xfer;\n    }\n    while( (rc = sqlite3_step(pQuery))==SQLITE_ROW ){\n      zName = sqlite3_column_text(pQuery, 0);\n      zSql = sqlite3_column_text(pQuery, 1);\n      printf(\"%s... \", zName); fflush(stdout);\n      sqlite3_exec(newDb, (const char*)zSql, 0, 0, &zErrMsg);\n      if( zErrMsg ){\n        utf8_printf(stderr, \"Error: %s\\nSQL: [%s]\\n\", zErrMsg, zSql);\n        sqlite3_free(zErrMsg);\n        zErrMsg = 0;\n      }\n      if( xForEach ){\n        xForEach(p, newDb, (const char*)zName);\n      }\n      printf(\"done\\n\");\n    }\n  }\nend_schema_xfer:\n  sqlite3_finalize(pQuery);\n  sqlite3_free(zQuery);\n}\n\n/*\n** Open a new database file named \"zNewDb\".  Try to recover as much information\n** as possible out of the main database (which might be corrupt) and write it\n** into zNewDb.\n*/\nstatic void tryToClone(ShellState *p, const char *zNewDb){\n  int rc;\n  sqlite3 *newDb = 0;\n  if( access(zNewDb,0)==0 ){\n    utf8_printf(stderr, \"File \\\"%s\\\" already exists.\\n\", zNewDb);\n    return;\n  }\n  rc = sqlite3_open(zNewDb, &newDb);\n  if( rc ){\n    utf8_printf(stderr, \"Cannot create output database: %s\\n\",\n            sqlite3_errmsg(newDb));\n  }else{\n    sqlite3_exec(p->db, \"PRAGMA writable_schema=ON;\", 0, 0, 0);\n    sqlite3_exec(newDb, \"BEGIN EXCLUSIVE;\", 0, 0, 0);\n    tryToCloneSchema(p, newDb, \"type='table'\", tryToCloneData);\n    tryToCloneSchema(p, newDb, \"type!='table'\", 0);\n    sqlite3_exec(newDb, \"COMMIT;\", 0, 0, 0);\n    sqlite3_exec(p->db, \"PRAGMA writable_schema=OFF;\", 0, 0, 0);\n  }\n  close_db(newDb);\n}\n\n/*\n** Change the output file back to stdout.\n**\n** If the p->doXdgOpen flag is set, that means the output was being\n** redirected to a temporary file named by p->zTempFile.  In that case,\n** launch start/open/xdg-open on that temporary file.\n*/\nstatic void output_reset(ShellState *p){\n  if( p->outfile[0]=='|' ){\n#ifndef SQLITE_OMIT_POPEN\n    pclose(p->out);\n#endif\n  }else{\n    output_file_close(p->out);\n#ifndef SQLITE_NOHAVE_SYSTEM\n    if( p->doXdgOpen ){\n      const char *zXdgOpenCmd =\n#if defined(_WIN32)\n      \"start\";\n#elif defined(__APPLE__)\n      \"open\";\n#else\n      \"xdg-open\";\n#endif\n      char *zCmd;\n      zCmd = sqlite3_mprintf(\"%s %s\", zXdgOpenCmd, p->zTempFile);\n      if( system(zCmd) ){\n        utf8_printf(stderr, \"Failed: [%s]\\n\", zCmd);\n      }\n      sqlite3_free(zCmd);\n      outputModePop(p);\n      p->doXdgOpen = 0;\n    }\n#endif /* !defined(SQLITE_NOHAVE_SYSTEM) */\n  }\n  p->outfile[0] = 0;\n  p->out = stdout;\n}\n\n/*\n** Run an SQL command and return the single integer result.\n*/\nstatic int db_int(ShellState *p, const char *zSql){\n  sqlite3_stmt *pStmt;\n  int res = 0;\n  sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);\n  if( pStmt && sqlite3_step(pStmt)==SQLITE_ROW ){\n    res = sqlite3_column_int(pStmt,0);\n  }\n  sqlite3_finalize(pStmt);\n  return res;\n}\n\n/*\n** Convert a 2-byte or 4-byte big-endian integer into a native integer\n*/\nstatic unsigned int get2byteInt(unsigned char *a){\n  return (a[0]<<8) + a[1];\n}\nstatic unsigned int get4byteInt(unsigned char *a){\n  return (a[0]<<24) + (a[1]<<16) + (a[2]<<8) + a[3];\n}\n\n/*\n** Implementation of the \".info\" command.\n**\n** Return 1 on error, 2 to exit, and 0 otherwise.\n*/\nstatic int shell_dbinfo_command(ShellState *p, int nArg, char **azArg){\n  static const struct { const char *zName; int ofst; } aField[] = {\n     { \"file change counter:\",  24  },\n     { \"database page count:\",  28  },\n     { \"freelist page count:\",  36  },\n     { \"schema cookie:\",        40  },\n     { \"schema format:\",        44  },\n     { \"default cache size:\",   48  },\n     { \"autovacuum top root:\",  52  },\n     { \"incremental vacuum:\",   64  },\n     { \"text encoding:\",        56  },\n     { \"user version:\",         60  },\n     { \"application id:\",       68  },\n     { \"software version:\",     96  },\n  };\n  static const struct { const char *zName; const char *zSql; } aQuery[] = {\n     { \"number of tables:\",\n       \"SELECT count(*) FROM %s WHERE type='table'\" },\n     { \"number of indexes:\",\n       \"SELECT count(*) FROM %s WHERE type='index'\" },\n     { \"number of triggers:\",\n       \"SELECT count(*) FROM %s WHERE type='trigger'\" },\n     { \"number of views:\",\n       \"SELECT count(*) FROM %s WHERE type='view'\" },\n     { \"schema size:\",\n       \"SELECT total(length(sql)) FROM %s\" },\n  };\n  int i;\n  unsigned iDataVersion;\n  char *zSchemaTab;\n  char *zDb = nArg>=2 ? azArg[1] : \"main\";\n  sqlite3_stmt *pStmt = 0;\n  unsigned char aHdr[100];\n  open_db(p, 0);\n  if( p->db==0 ) return 1;\n  sqlite3_prepare_v2(p->db,\"SELECT data FROM sqlite_dbpage(?1) WHERE pgno=1\",\n                     -1, &pStmt, 0);\n  sqlite3_bind_text(pStmt, 1, zDb, -1, SQLITE_STATIC);\n  if( sqlite3_step(pStmt)==SQLITE_ROW\n   && sqlite3_column_bytes(pStmt,0)>100\n  ){\n    memcpy(aHdr, sqlite3_column_blob(pStmt,0), 100);\n    sqlite3_finalize(pStmt);\n  }else{\n    raw_printf(stderr, \"unable to read database header\\n\");\n    sqlite3_finalize(pStmt);\n    return 1;\n  }\n  i = get2byteInt(aHdr+16);\n  if( i==1 ) i = 65536;\n  utf8_printf(p->out, \"%-20s %d\\n\", \"database page size:\", i);\n  utf8_printf(p->out, \"%-20s %d\\n\", \"write format:\", aHdr[18]);\n  utf8_printf(p->out, \"%-20s %d\\n\", \"read format:\", aHdr[19]);\n  utf8_printf(p->out, \"%-20s %d\\n\", \"reserved bytes:\", aHdr[20]);\n  for(i=0; i<ArraySize(aField); i++){\n    int ofst = aField[i].ofst;\n    unsigned int val = get4byteInt(aHdr + ofst);\n    utf8_printf(p->out, \"%-20s %u\", aField[i].zName, val);\n    switch( ofst ){\n      case 56: {\n        if( val==1 ) raw_printf(p->out, \" (utf8)\");\n        if( val==2 ) raw_printf(p->out, \" (utf16le)\");\n        if( val==3 ) raw_printf(p->out, \" (utf16be)\");\n      }\n    }\n    raw_printf(p->out, \"\\n\");\n  }\n  if( zDb==0 ){\n    zSchemaTab = sqlite3_mprintf(\"main.sqlite_master\");\n  }else if( strcmp(zDb,\"temp\")==0 ){\n    zSchemaTab = sqlite3_mprintf(\"%s\", \"sqlite_temp_master\");\n  }else{\n    zSchemaTab = sqlite3_mprintf(\"\\\"%w\\\".sqlite_master\", zDb);\n  }\n  for(i=0; i<ArraySize(aQuery); i++){\n    char *zSql = sqlite3_mprintf(aQuery[i].zSql, zSchemaTab);\n    int val = db_int(p, zSql);\n    sqlite3_free(zSql);\n    utf8_printf(p->out, \"%-20s %d\\n\", aQuery[i].zName, val);\n  }\n  sqlite3_free(zSchemaTab);\n  sqlite3_file_control(p->db, zDb, SQLITE_FCNTL_DATA_VERSION, &iDataVersion);\n  utf8_printf(p->out, \"%-20s %u\\n\", \"data version\", iDataVersion);\n  return 0;\n}\n\n/*\n** Print the current sqlite3_errmsg() value to stderr and return 1.\n*/\nstatic int shellDatabaseError(sqlite3 *db){\n  const char *zErr = sqlite3_errmsg(db);\n  utf8_printf(stderr, \"Error: %s\\n\", zErr);\n  return 1;\n}\n\n/*\n** Compare the pattern in zGlob[] against the text in z[].  Return TRUE\n** if they match and FALSE (0) if they do not match.\n**\n** Globbing rules:\n**\n**      '*'       Matches any sequence of zero or more characters.\n**\n**      '?'       Matches exactly one character.\n**\n**     [...]      Matches one character from the enclosed list of\n**                characters.\n**\n**     [^...]     Matches one character not in the enclosed list.\n**\n**      '#'       Matches any sequence of one or more digits with an\n**                optional + or - sign in front\n**\n**      ' '       Any span of whitespace matches any other span of\n**                whitespace.\n**\n** Extra whitespace at the end of z[] is ignored.\n*/\nstatic int testcase_glob(const char *zGlob, const char *z){\n  int c, c2;\n  int invert;\n  int seen;\n\n  while( (c = (*(zGlob++)))!=0 ){\n    if( IsSpace(c) ){\n      if( !IsSpace(*z) ) return 0;\n      while( IsSpace(*zGlob) ) zGlob++;\n      while( IsSpace(*z) ) z++;\n    }else if( c=='*' ){\n      while( (c=(*(zGlob++))) == '*' || c=='?' ){\n        if( c=='?' && (*(z++))==0 ) return 0;\n      }\n      if( c==0 ){\n        return 1;\n      }else if( c=='[' ){\n        while( *z && testcase_glob(zGlob-1,z)==0 ){\n          z++;\n        }\n        return (*z)!=0;\n      }\n      while( (c2 = (*(z++)))!=0 ){\n        while( c2!=c ){\n          c2 = *(z++);\n          if( c2==0 ) return 0;\n        }\n        if( testcase_glob(zGlob,z) ) return 1;\n      }\n      return 0;\n    }else if( c=='?' ){\n      if( (*(z++))==0 ) return 0;\n    }else if( c=='[' ){\n      int prior_c = 0;\n      seen = 0;\n      invert = 0;\n      c = *(z++);\n      if( c==0 ) return 0;\n      c2 = *(zGlob++);\n      if( c2=='^' ){\n        invert = 1;\n        c2 = *(zGlob++);\n      }\n      if( c2==']' ){\n        if( c==']' ) seen = 1;\n        c2 = *(zGlob++);\n      }\n      while( c2 && c2!=']' ){\n        if( c2=='-' && zGlob[0]!=']' && zGlob[0]!=0 && prior_c>0 ){\n          c2 = *(zGlob++);\n          if( c>=prior_c && c<=c2 ) seen = 1;\n          prior_c = 0;\n        }else{\n          if( c==c2 ){\n            seen = 1;\n          }\n          prior_c = c2;\n        }\n        c2 = *(zGlob++);\n      }\n      if( c2==0 || (seen ^ invert)==0 ) return 0;\n    }else if( c=='#' ){\n      if( (z[0]=='-' || z[0]=='+') && IsDigit(z[1]) ) z++;\n      if( !IsDigit(z[0]) ) return 0;\n      z++;\n      while( IsDigit(z[0]) ){ z++; }\n    }else{\n      if( c!=(*(z++)) ) return 0;\n    }\n  }\n  while( IsSpace(*z) ){ z++; }\n  return *z==0;\n}\n\n\n/*\n** Compare the string as a command-line option with either one or two\n** initial \"-\" characters.\n*/\nstatic int optionMatch(const char *zStr, const char *zOpt){\n  if( zStr[0]!='-' ) return 0;\n  zStr++;\n  if( zStr[0]=='-' ) zStr++;\n  return strcmp(zStr, zOpt)==0;\n}\n\n/*\n** Delete a file.\n*/\nint shellDeleteFile(const char *zFilename){\n  int rc;\n#ifdef _WIN32\n  wchar_t *z = sqlite3_win32_utf8_to_unicode(zFilename);\n  rc = _wunlink(z);\n  sqlite3_free(z);\n#else\n  rc = unlink(zFilename);\n#endif\n  return rc;\n}\n\n/*\n** Try to delete the temporary file (if there is one) and free the\n** memory used to hold the name of the temp file.\n*/\nstatic void clearTempFile(ShellState *p){\n  if( p->zTempFile==0 ) return;\n  if( p->doXdgOpen ) return;\n  if( shellDeleteFile(p->zTempFile) ) return;\n  sqlite3_free(p->zTempFile);\n  p->zTempFile = 0;\n}\n\n/*\n** Create a new temp file name with the given suffix.\n*/\nstatic void newTempFile(ShellState *p, const char *zSuffix){\n  clearTempFile(p);\n  sqlite3_free(p->zTempFile);\n  p->zTempFile = 0;\n  if( p->db ){\n    sqlite3_file_control(p->db, 0, SQLITE_FCNTL_TEMPFILENAME, &p->zTempFile);\n  }\n  if( p->zTempFile==0 ){\n    sqlite3_uint64 r;\n    sqlite3_randomness(sizeof(r), &r);\n    p->zTempFile = sqlite3_mprintf(\"temp%llx.%s\", r, zSuffix);\n  }else{\n    p->zTempFile = sqlite3_mprintf(\"%z.%s\", p->zTempFile, zSuffix);\n  }\n  if( p->zTempFile==0 ){\n    raw_printf(stderr, \"out of memory\\n\");\n    exit(1);\n  }\n}\n\n\n/*\n** The implementation of SQL scalar function fkey_collate_clause(), used\n** by the \".lint fkey-indexes\" command. This scalar function is always\n** called with four arguments - the parent table name, the parent column name,\n** the child table name and the child column name.\n**\n**   fkey_collate_clause('parent-tab', 'parent-col', 'child-tab', 'child-col')\n**\n** If either of the named tables or columns do not exist, this function\n** returns an empty string. An empty string is also returned if both tables\n** and columns exist but have the same default collation sequence. Or,\n** if both exist but the default collation sequences are different, this\n** function returns the string \" COLLATE <parent-collation>\", where\n** <parent-collation> is the default collation sequence of the parent column.\n*/\nstatic void shellFkeyCollateClause(\n  sqlite3_context *pCtx,\n  int nVal,\n  sqlite3_value **apVal\n){\n  sqlite3 *db = sqlite3_context_db_handle(pCtx);\n  const char *zParent;\n  const char *zParentCol;\n  const char *zParentSeq;\n  const char *zChild;\n  const char *zChildCol;\n  const char *zChildSeq = 0;  /* Initialize to avoid false-positive warning */\n  int rc;\n\n  assert( nVal==4 );\n  zParent = (const char*)sqlite3_value_text(apVal[0]);\n  zParentCol = (const char*)sqlite3_value_text(apVal[1]);\n  zChild = (const char*)sqlite3_value_text(apVal[2]);\n  zChildCol = (const char*)sqlite3_value_text(apVal[3]);\n\n  sqlite3_result_text(pCtx, \"\", -1, SQLITE_STATIC);\n  rc = sqlite3_table_column_metadata(\n      db, \"main\", zParent, zParentCol, 0, &zParentSeq, 0, 0, 0\n  );\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_table_column_metadata(\n        db, \"main\", zChild, zChildCol, 0, &zChildSeq, 0, 0, 0\n    );\n  }\n\n  if( rc==SQLITE_OK && sqlite3_stricmp(zParentSeq, zChildSeq) ){\n    char *z = sqlite3_mprintf(\" COLLATE %s\", zParentSeq);\n    sqlite3_result_text(pCtx, z, -1, SQLITE_TRANSIENT);\n    sqlite3_free(z);\n  }\n}\n\n\n/*\n** The implementation of dot-command \".lint fkey-indexes\".\n*/\nstatic int lintFkeyIndexes(\n  ShellState *pState,             /* Current shell tool state */\n  char **azArg,                   /* Array of arguments passed to dot command */\n  int nArg                        /* Number of entries in azArg[] */\n){\n  sqlite3 *db = pState->db;       /* Database handle to query \"main\" db of */\n  FILE *out = pState->out;        /* Stream to write non-error output to */\n  int bVerbose = 0;               /* If -verbose is present */\n  int bGroupByParent = 0;         /* If -groupbyparent is present */\n  int i;                          /* To iterate through azArg[] */\n  const char *zIndent = \"\";       /* How much to indent CREATE INDEX by */\n  int rc;                         /* Return code */\n  sqlite3_stmt *pSql = 0;         /* Compiled version of SQL statement below */\n\n  /*\n  ** This SELECT statement returns one row for each foreign key constraint\n  ** in the schema of the main database. The column values are:\n  **\n  ** 0. The text of an SQL statement similar to:\n  **\n  **      \"EXPLAIN QUERY PLAN SELECT 1 FROM child_table WHERE child_key=?\"\n  **\n  **    This SELECT is similar to the one that the foreign keys implementation\n  **    needs to run internally on child tables. If there is an index that can\n  **    be used to optimize this query, then it can also be used by the FK\n  **    implementation to optimize DELETE or UPDATE statements on the parent\n  **    table.\n  **\n  ** 1. A GLOB pattern suitable for sqlite3_strglob(). If the plan output by\n  **    the EXPLAIN QUERY PLAN command matches this pattern, then the schema\n  **    contains an index that can be used to optimize the query.\n  **\n  ** 2. Human readable text that describes the child table and columns. e.g.\n  **\n  **       \"child_table(child_key1, child_key2)\"\n  **\n  ** 3. Human readable text that describes the parent table and columns. e.g.\n  **\n  **       \"parent_table(parent_key1, parent_key2)\"\n  **\n  ** 4. A full CREATE INDEX statement for an index that could be used to\n  **    optimize DELETE or UPDATE statements on the parent table. e.g.\n  **\n  **       \"CREATE INDEX child_table_child_key ON child_table(child_key)\"\n  **\n  ** 5. The name of the parent table.\n  **\n  ** These six values are used by the C logic below to generate the report.\n  */\n  const char *zSql =\n  \"SELECT \"\n    \"     'EXPLAIN QUERY PLAN SELECT 1 FROM ' || quote(s.name) || ' WHERE '\"\n    \"  || group_concat(quote(s.name) || '.' || quote(f.[from]) || '=?' \"\n    \"  || fkey_collate_clause(\"\n    \"       f.[table], COALESCE(f.[to], p.[name]), s.name, f.[from]),' AND ')\"\n    \", \"\n    \"     'SEARCH TABLE ' || s.name || ' USING COVERING INDEX*('\"\n    \"  || group_concat('*=?', ' AND ') || ')'\"\n    \", \"\n    \"     s.name  || '(' || group_concat(f.[from],  ', ') || ')'\"\n    \", \"\n    \"     f.[table] || '(' || group_concat(COALESCE(f.[to], p.[name])) || ')'\"\n    \", \"\n    \"     'CREATE INDEX ' || quote(s.name ||'_'|| group_concat(f.[from], '_'))\"\n    \"  || ' ON ' || quote(s.name) || '('\"\n    \"  || group_concat(quote(f.[from]) ||\"\n    \"        fkey_collate_clause(\"\n    \"          f.[table], COALESCE(f.[to], p.[name]), s.name, f.[from]), ', ')\"\n    \"  || ');'\"\n    \", \"\n    \"     f.[table] \"\n    \"FROM sqlite_master AS s, pragma_foreign_key_list(s.name) AS f \"\n    \"LEFT JOIN pragma_table_info AS p ON (pk-1=seq AND p.arg=f.[table]) \"\n    \"GROUP BY s.name, f.id \"\n    \"ORDER BY (CASE WHEN ? THEN f.[table] ELSE s.name END)\"\n  ;\n  const char *zGlobIPK = \"SEARCH TABLE * USING INTEGER PRIMARY KEY (rowid=?)\";\n\n  for(i=2; i<nArg; i++){\n    int n = strlen30(azArg[i]);\n    if( n>1 && sqlite3_strnicmp(\"-verbose\", azArg[i], n)==0 ){\n      bVerbose = 1;\n    }\n    else if( n>1 && sqlite3_strnicmp(\"-groupbyparent\", azArg[i], n)==0 ){\n      bGroupByParent = 1;\n      zIndent = \"    \";\n    }\n    else{\n      raw_printf(stderr, \"Usage: %s %s ?-verbose? ?-groupbyparent?\\n\",\n          azArg[0], azArg[1]\n      );\n      return SQLITE_ERROR;\n    }\n  }\n\n  /* Register the fkey_collate_clause() SQL function */\n  rc = sqlite3_create_function(db, \"fkey_collate_clause\", 4, SQLITE_UTF8,\n      0, shellFkeyCollateClause, 0, 0\n  );\n\n\n  if( rc==SQLITE_OK ){\n    rc = sqlite3_prepare_v2(db, zSql, -1, &pSql, 0);\n  }\n  if( rc==SQLITE_OK ){\n    sqlite3_bind_int(pSql, 1, bGroupByParent);\n  }\n\n  if( rc==SQLITE_OK ){\n    int rc2;\n    char *zPrev = 0;\n    while( SQLITE_ROW==sqlite3_step(pSql) ){\n      int res = -1;\n      sqlite3_stmt *pExplain = 0;\n      const char *zEQP = (const char*)sqlite3_column_text(pSql, 0);\n      const char *zGlob = (const char*)sqlite3_column_text(pSql, 1);\n      const char *zFrom = (const char*)sqlite3_column_text(pSql, 2);\n      const char *zTarget = (const char*)sqlite3_column_text(pSql, 3);\n      const char *zCI = (const char*)sqlite3_column_text(pSql, 4);\n      const char *zParent = (const char*)sqlite3_column_text(pSql, 5);\n\n      rc = sqlite3_prepare_v2(db, zEQP, -1, &pExplain, 0);\n      if( rc!=SQLITE_OK ) break;\n      if( SQLITE_ROW==sqlite3_step(pExplain) ){\n        const char *zPlan = (const char*)sqlite3_column_text(pExplain, 3);\n        res = (\n              0==sqlite3_strglob(zGlob, zPlan)\n           || 0==sqlite3_strglob(zGlobIPK, zPlan)\n        );\n      }\n      rc = sqlite3_finalize(pExplain);\n      if( rc!=SQLITE_OK ) break;\n\n      if( res<0 ){\n        raw_printf(stderr, \"Error: internal error\");\n        break;\n      }else{\n        if( bGroupByParent\n        && (bVerbose || res==0)\n        && (zPrev==0 || sqlite3_stricmp(zParent, zPrev))\n        ){\n          raw_printf(out, \"-- Parent table %s\\n\", zParent);\n          sqlite3_free(zPrev);\n          zPrev = sqlite3_mprintf(\"%s\", zParent);\n        }\n\n        if( res==0 ){\n          raw_printf(out, \"%s%s --> %s\\n\", zIndent, zCI, zTarget);\n        }else if( bVerbose ){\n          raw_printf(out, \"%s/* no extra indexes required for %s -> %s */\\n\",\n              zIndent, zFrom, zTarget\n          );\n        }\n      }\n    }\n    sqlite3_free(zPrev);\n\n    if( rc!=SQLITE_OK ){\n      raw_printf(stderr, \"%s\\n\", sqlite3_errmsg(db));\n    }\n\n    rc2 = sqlite3_finalize(pSql);\n    if( rc==SQLITE_OK && rc2!=SQLITE_OK ){\n      rc = rc2;\n      raw_printf(stderr, \"%s\\n\", sqlite3_errmsg(db));\n    }\n  }else{\n    raw_printf(stderr, \"%s\\n\", sqlite3_errmsg(db));\n  }\n\n  return rc;\n}\n\n/*\n** Implementation of \".lint\" dot command.\n*/\nstatic int lintDotCommand(\n  ShellState *pState,             /* Current shell tool state */\n  char **azArg,                   /* Array of arguments passed to dot command */\n  int nArg                        /* Number of entries in azArg[] */\n){\n  int n;\n  n = (nArg>=2 ? strlen30(azArg[1]) : 0);\n  if( n<1 || sqlite3_strnicmp(azArg[1], \"fkey-indexes\", n) ) goto usage;\n  return lintFkeyIndexes(pState, azArg, nArg);\n\n usage:\n  raw_printf(stderr, \"Usage %s sub-command ?switches...?\\n\", azArg[0]);\n  raw_printf(stderr, \"Where sub-commands are:\\n\");\n  raw_printf(stderr, \"    fkey-indexes\\n\");\n  return SQLITE_ERROR;\n}\n\n#if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB)\n/*********************************************************************************\n** The \".archive\" or \".ar\" command.\n*/\nstatic void shellPrepare(\n  sqlite3 *db, \n  int *pRc, \n  const char *zSql, \n  sqlite3_stmt **ppStmt\n){\n  *ppStmt = 0;\n  if( *pRc==SQLITE_OK ){\n    int rc = sqlite3_prepare_v2(db, zSql, -1, ppStmt, 0);\n    if( rc!=SQLITE_OK ){\n      raw_printf(stderr, \"sql error: %s (%d)\\n\", \n          sqlite3_errmsg(db), sqlite3_errcode(db)\n      );\n      *pRc = rc;\n    }\n  }\n}\n\nstatic void shellPreparePrintf(\n  sqlite3 *db, \n  int *pRc, \n  sqlite3_stmt **ppStmt,\n  const char *zFmt, \n  ...\n){\n  *ppStmt = 0;\n  if( *pRc==SQLITE_OK ){\n    va_list ap;\n    char *z;\n    va_start(ap, zFmt);\n    z = sqlite3_vmprintf(zFmt, ap);\n    va_end(ap);\n    if( z==0 ){\n      *pRc = SQLITE_NOMEM;\n    }else{\n      shellPrepare(db, pRc, z, ppStmt);\n      sqlite3_free(z);\n    }\n  }\n}\n\nstatic void shellFinalize(\n  int *pRc, \n  sqlite3_stmt *pStmt\n){\n  if( pStmt ){\n    sqlite3 *db = sqlite3_db_handle(pStmt);\n    int rc = sqlite3_finalize(pStmt);\n    if( *pRc==SQLITE_OK ){\n      if( rc!=SQLITE_OK ){\n        raw_printf(stderr, \"SQL error: %s\\n\", sqlite3_errmsg(db));\n      }\n      *pRc = rc;\n    }\n  }\n}\n\nstatic void shellReset(\n  int *pRc, \n  sqlite3_stmt *pStmt\n){\n  int rc = sqlite3_reset(pStmt);\n  if( *pRc==SQLITE_OK ){\n    if( rc!=SQLITE_OK ){\n      sqlite3 *db = sqlite3_db_handle(pStmt);\n      raw_printf(stderr, \"SQL error: %s\\n\", sqlite3_errmsg(db));\n    }\n    *pRc = rc;\n  }\n}\n/*\n** Structure representing a single \".ar\" command.\n*/\ntypedef struct ArCommand ArCommand;\nstruct ArCommand {\n  u8 eCmd;                        /* An AR_CMD_* value */\n  u8 bVerbose;                    /* True if --verbose */\n  u8 bZip;                        /* True if the archive is a ZIP */\n  u8 bDryRun;                     /* True if --dry-run */\n  u8 bAppend;                     /* True if --append */\n  u8 fromCmdLine;                 /* Run from -A instead of .archive */\n  int nArg;                       /* Number of command arguments */\n  char *zSrcTable;                /* \"sqlar\", \"zipfile($file)\" or \"zip\" */\n  const char *zFile;              /* --file argument, or NULL */\n  const char *zDir;               /* --directory argument, or NULL */\n  char **azArg;                   /* Array of command arguments */\n  ShellState *p;                  /* Shell state */\n  sqlite3 *db;                    /* Database containing the archive */\n};\n\n/*\n** Print a usage message for the .ar command to stderr and return SQLITE_ERROR.\n*/\nstatic int arUsage(FILE *f){\n  showHelp(f,\"archive\");\n  return SQLITE_ERROR;\n}\n\n/*\n** Print an error message for the .ar command to stderr and return \n** SQLITE_ERROR.\n*/\nstatic int arErrorMsg(ArCommand *pAr, const char *zFmt, ...){\n  va_list ap;\n  char *z;\n  va_start(ap, zFmt);\n  z = sqlite3_vmprintf(zFmt, ap);\n  va_end(ap);\n  utf8_printf(stderr, \"Error: %s\\n\", z);\n  if( pAr->fromCmdLine ){\n    utf8_printf(stderr, \"Use \\\"-A\\\" for more help\\n\");\n  }else{\n    utf8_printf(stderr, \"Use \\\".archive --help\\\" for more help\\n\");\n  }\n  sqlite3_free(z);\n  return SQLITE_ERROR;\n}\n\n/*\n** Values for ArCommand.eCmd.\n*/\n#define AR_CMD_CREATE       1\n#define AR_CMD_EXTRACT      2\n#define AR_CMD_LIST         3\n#define AR_CMD_UPDATE       4\n#define AR_CMD_HELP         5\n\n/*\n** Other (non-command) switches.\n*/\n#define AR_SWITCH_VERBOSE     6\n#define AR_SWITCH_FILE        7\n#define AR_SWITCH_DIRECTORY   8\n#define AR_SWITCH_APPEND      9\n#define AR_SWITCH_DRYRUN     10\n\nstatic int arProcessSwitch(ArCommand *pAr, int eSwitch, const char *zArg){\n  switch( eSwitch ){\n    case AR_CMD_CREATE:\n    case AR_CMD_EXTRACT:\n    case AR_CMD_LIST:\n    case AR_CMD_UPDATE:\n    case AR_CMD_HELP:\n      if( pAr->eCmd ){\n        return arErrorMsg(pAr, \"multiple command options\");\n      }\n      pAr->eCmd = eSwitch;\n      break;\n\n    case AR_SWITCH_DRYRUN:\n      pAr->bDryRun = 1;\n      break;\n    case AR_SWITCH_VERBOSE:\n      pAr->bVerbose = 1;\n      break;\n    case AR_SWITCH_APPEND:\n      pAr->bAppend = 1;\n      /* Fall thru into --file */\n    case AR_SWITCH_FILE:\n      pAr->zFile = zArg;\n      break;\n    case AR_SWITCH_DIRECTORY:\n      pAr->zDir = zArg;\n      break;\n  }\n\n  return SQLITE_OK;\n}\n\n/*\n** Parse the command line for an \".ar\" command. The results are written into\n** structure (*pAr). SQLITE_OK is returned if the command line is parsed\n** successfully, otherwise an error message is written to stderr and \n** SQLITE_ERROR returned.\n*/\nstatic int arParseCommand(\n  char **azArg,                   /* Array of arguments passed to dot command */\n  int nArg,                       /* Number of entries in azArg[] */\n  ArCommand *pAr                  /* Populate this object */\n){\n  struct ArSwitch {\n    const char *zLong;\n    char cShort;\n    u8 eSwitch;\n    u8 bArg;\n  } aSwitch[] = {\n    { \"create\",    'c', AR_CMD_CREATE,       0 },\n    { \"extract\",   'x', AR_CMD_EXTRACT,      0 },\n    { \"list\",      't', AR_CMD_LIST,         0 },\n    { \"update\",    'u', AR_CMD_UPDATE,       0 },\n    { \"help\",      'h', AR_CMD_HELP,         0 },\n    { \"verbose\",   'v', AR_SWITCH_VERBOSE,   0 },\n    { \"file\",      'f', AR_SWITCH_FILE,      1 },\n    { \"append\",    'a', AR_SWITCH_APPEND,    1 },\n    { \"directory\", 'C', AR_SWITCH_DIRECTORY, 1 },\n    { \"dryrun\",    'n', AR_SWITCH_DRYRUN,    0 },\n  };\n  int nSwitch = sizeof(aSwitch) / sizeof(struct ArSwitch);\n  struct ArSwitch *pEnd = &aSwitch[nSwitch];\n\n  if( nArg<=1 ){\n    utf8_printf(stderr, \"Wrong number of arguments.  Usage:\\n\");\n    return arUsage(stderr);\n  }else{\n    char *z = azArg[1];\n    if( z[0]!='-' ){\n      /* Traditional style [tar] invocation */\n      int i;\n      int iArg = 2;\n      for(i=0; z[i]; i++){\n        const char *zArg = 0;\n        struct ArSwitch *pOpt;\n        for(pOpt=&aSwitch[0]; pOpt<pEnd; pOpt++){\n          if( z[i]==pOpt->cShort ) break;\n        }\n        if( pOpt==pEnd ){\n          return arErrorMsg(pAr, \"unrecognized option: %c\", z[i]);\n        }\n        if( pOpt->bArg ){\n          if( iArg>=nArg ){\n            return arErrorMsg(pAr, \"option requires an argument: %c\",z[i]);\n          }\n          zArg = azArg[iArg++];\n        }\n        if( arProcessSwitch(pAr, pOpt->eSwitch, zArg) ) return SQLITE_ERROR;\n      }\n      pAr->nArg = nArg-iArg;\n      if( pAr->nArg>0 ){\n        pAr->azArg = &azArg[iArg];\n      }\n    }else{\n      /* Non-traditional invocation */\n      int iArg;\n      for(iArg=1; iArg<nArg; iArg++){\n        int n;\n        z = azArg[iArg];\n        if( z[0]!='-' ){\n          /* All remaining command line words are command arguments. */\n          pAr->azArg = &azArg[iArg];\n          pAr->nArg = nArg-iArg;\n          break;\n        }\n        n = strlen30(z);\n\n        if( z[1]!='-' ){\n          int i;\n          /* One or more short options */\n          for(i=1; i<n; i++){\n            const char *zArg = 0;\n            struct ArSwitch *pOpt;\n            for(pOpt=&aSwitch[0]; pOpt<pEnd; pOpt++){\n              if( z[i]==pOpt->cShort ) break;\n            }\n            if( pOpt==pEnd ){\n              return arErrorMsg(pAr, \"unrecognized option: %c\", z[i]);\n            }\n            if( pOpt->bArg ){\n              if( i<(n-1) ){\n                zArg = &z[i+1];\n                i = n;\n              }else{\n                if( iArg>=(nArg-1) ){\n                  return arErrorMsg(pAr, \"option requires an argument: %c\",z[i]);\n                }\n                zArg = azArg[++iArg];\n              }\n            }\n            if( arProcessSwitch(pAr, pOpt->eSwitch, zArg) ) return SQLITE_ERROR;\n          }\n        }else if( z[2]=='\\0' ){\n          /* A -- option, indicating that all remaining command line words\n          ** are command arguments.  */\n          pAr->azArg = &azArg[iArg+1];\n          pAr->nArg = nArg-iArg-1;\n          break;\n        }else{\n          /* A long option */\n          const char *zArg = 0;             /* Argument for option, if any */\n          struct ArSwitch *pMatch = 0;      /* Matching option */\n          struct ArSwitch *pOpt;            /* Iterator */\n          for(pOpt=&aSwitch[0]; pOpt<pEnd; pOpt++){\n            const char *zLong = pOpt->zLong;\n            if( (n-2)<=strlen30(zLong) && 0==memcmp(&z[2], zLong, n-2) ){\n              if( pMatch ){\n                return arErrorMsg(pAr, \"ambiguous option: %s\",z);\n              }else{\n                pMatch = pOpt;\n              }\n            }\n          }\n\n          if( pMatch==0 ){\n            return arErrorMsg(pAr, \"unrecognized option: %s\", z);\n          }\n          if( pMatch->bArg ){\n            if( iArg>=(nArg-1) ){\n              return arErrorMsg(pAr, \"option requires an argument: %s\", z);\n            }\n            zArg = azArg[++iArg];\n          }\n          if( arProcessSwitch(pAr, pMatch->eSwitch, zArg) ) return SQLITE_ERROR;\n        }\n      }\n    }\n  }\n\n  return SQLITE_OK;\n}\n\n/*\n** This function assumes that all arguments within the ArCommand.azArg[]\n** array refer to archive members, as for the --extract or --list commands. \n** It checks that each of them are present. If any specified file is not\n** present in the archive, an error is printed to stderr and an error\n** code returned. Otherwise, if all specified arguments are present in\n** the archive, SQLITE_OK is returned.\n**\n** This function strips any trailing '/' characters from each argument.\n** This is consistent with the way the [tar] command seems to work on\n** Linux.\n*/\nstatic int arCheckEntries(ArCommand *pAr){\n  int rc = SQLITE_OK;\n  if( pAr->nArg ){\n    int i, j;\n    sqlite3_stmt *pTest = 0;\n\n    shellPreparePrintf(pAr->db, &rc, &pTest,\n        \"SELECT name FROM %s WHERE name=$name\", \n        pAr->zSrcTable\n    );\n    j = sqlite3_bind_parameter_index(pTest, \"$name\");\n    for(i=0; i<pAr->nArg && rc==SQLITE_OK; i++){\n      char *z = pAr->azArg[i];\n      int n = strlen30(z);\n      int bOk = 0;\n      while( n>0 && z[n-1]=='/' ) n--;\n      z[n] = '\\0';\n      sqlite3_bind_text(pTest, j, z, -1, SQLITE_STATIC);\n      if( SQLITE_ROW==sqlite3_step(pTest) ){\n        bOk = 1;\n      }\n      shellReset(&rc, pTest);\n      if( rc==SQLITE_OK && bOk==0 ){\n        utf8_printf(stderr, \"not found in archive: %s\\n\", z);\n        rc = SQLITE_ERROR;\n      }\n    }\n    shellFinalize(&rc, pTest);\n  }\n  return rc;\n}\n\n/*\n** Format a WHERE clause that can be used against the \"sqlar\" table to\n** identify all archive members that match the command arguments held\n** in (*pAr). Leave this WHERE clause in (*pzWhere) before returning.\n** The caller is responsible for eventually calling sqlite3_free() on\n** any non-NULL (*pzWhere) value.\n*/\nstatic void arWhereClause(\n  int *pRc, \n  ArCommand *pAr, \n  char **pzWhere                  /* OUT: New WHERE clause */\n){\n  char *zWhere = 0;\n  if( *pRc==SQLITE_OK ){\n    if( pAr->nArg==0 ){\n      zWhere = sqlite3_mprintf(\"1\");\n    }else{\n      int i;\n      const char *zSep = \"\";\n      for(i=0; i<pAr->nArg; i++){\n        const char *z = pAr->azArg[i];\n        zWhere = sqlite3_mprintf(\n          \"%z%s name = '%q' OR substr(name,1,%d) = '%q/'\", \n          zWhere, zSep, z, strlen30(z)+1, z\n        );\n        if( zWhere==0 ){\n          *pRc = SQLITE_NOMEM;\n          break;\n        }\n        zSep = \" OR \";\n      }\n    }\n  }\n  *pzWhere = zWhere;\n}\n\n/*\n** Implementation of .ar \"lisT\" command. \n*/\nstatic int arListCommand(ArCommand *pAr){\n  const char *zSql = \"SELECT %s FROM %s WHERE %s\"; \n  const char *azCols[] = {\n    \"name\",\n    \"lsmode(mode), sz, datetime(mtime, 'unixepoch'), name\"\n  };\n\n  char *zWhere = 0;\n  sqlite3_stmt *pSql = 0;\n  int rc;\n\n  rc = arCheckEntries(pAr);\n  arWhereClause(&rc, pAr, &zWhere);\n\n  shellPreparePrintf(pAr->db, &rc, &pSql, zSql, azCols[pAr->bVerbose],\n                     pAr->zSrcTable, zWhere);\n  if( pAr->bDryRun ){\n    utf8_printf(pAr->p->out, \"%s\\n\", sqlite3_sql(pSql));\n  }else{\n    while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSql) ){\n      if( pAr->bVerbose ){\n        utf8_printf(pAr->p->out, \"%s % 10d  %s  %s\\n\",\n            sqlite3_column_text(pSql, 0),\n            sqlite3_column_int(pSql, 1), \n            sqlite3_column_text(pSql, 2),\n            sqlite3_column_text(pSql, 3)\n        );\n      }else{\n        utf8_printf(pAr->p->out, \"%s\\n\", sqlite3_column_text(pSql, 0));\n      }\n    }\n  }\n  shellFinalize(&rc, pSql);\n  sqlite3_free(zWhere);\n  return rc;\n}\n\n\n/*\n** Implementation of .ar \"eXtract\" command. \n*/\nstatic int arExtractCommand(ArCommand *pAr){\n  const char *zSql1 = \n    \"SELECT \"\n    \" ($dir || name),\"\n    \" writefile(($dir || name), %s, mode, mtime) \"\n    \"FROM %s WHERE (%s) AND (data IS NULL OR $dirOnly = 0)\"\n    \" AND name NOT GLOB '*..[/\\\\]*'\";\n\n  const char *azExtraArg[] = { \n    \"sqlar_uncompress(data, sz)\",\n    \"data\"\n  };\n\n  sqlite3_stmt *pSql = 0;\n  int rc = SQLITE_OK;\n  char *zDir = 0;\n  char *zWhere = 0;\n  int i, j;\n\n  /* If arguments are specified, check that they actually exist within\n  ** the archive before proceeding. And formulate a WHERE clause to\n  ** match them.  */\n  rc = arCheckEntries(pAr);\n  arWhereClause(&rc, pAr, &zWhere);\n\n  if( rc==SQLITE_OK ){\n    if( pAr->zDir ){\n      zDir = sqlite3_mprintf(\"%s/\", pAr->zDir);\n    }else{\n      zDir = sqlite3_mprintf(\"\");\n    }\n    if( zDir==0 ) rc = SQLITE_NOMEM;\n  }\n\n  shellPreparePrintf(pAr->db, &rc, &pSql, zSql1, \n      azExtraArg[pAr->bZip], pAr->zSrcTable, zWhere\n  );\n\n  if( rc==SQLITE_OK ){\n    j = sqlite3_bind_parameter_index(pSql, \"$dir\");\n    sqlite3_bind_text(pSql, j, zDir, -1, SQLITE_STATIC);\n\n    /* Run the SELECT statement twice. The first time, writefile() is called\n    ** for all archive members that should be extracted. The second time,\n    ** only for the directories. This is because the timestamps for\n    ** extracted directories must be reset after they are populated (as\n    ** populating them changes the timestamp).  */\n    for(i=0; i<2; i++){\n      j = sqlite3_bind_parameter_index(pSql, \"$dirOnly\");\n      sqlite3_bind_int(pSql, j, i);\n      if( pAr->bDryRun ){\n        utf8_printf(pAr->p->out, \"%s\\n\", sqlite3_sql(pSql));\n      }else{\n        while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSql) ){\n          if( i==0 && pAr->bVerbose ){\n            utf8_printf(pAr->p->out, \"%s\\n\", sqlite3_column_text(pSql, 0));\n          }\n        }\n      }\n      shellReset(&rc, pSql);\n    }\n    shellFinalize(&rc, pSql);\n  }\n\n  sqlite3_free(zDir);\n  sqlite3_free(zWhere);\n  return rc;\n}\n\n/*\n** Run the SQL statement in zSql.  Or if doing a --dryrun, merely print it out.\n*/\nstatic int arExecSql(ArCommand *pAr, const char *zSql){\n  int rc;\n  if( pAr->bDryRun ){\n    utf8_printf(pAr->p->out, \"%s\\n\", zSql);\n    rc = SQLITE_OK;\n  }else{\n    char *zErr = 0;\n    rc = sqlite3_exec(pAr->db, zSql, 0, 0, &zErr);\n    if( zErr ){\n      utf8_printf(stdout, \"ERROR: %s\\n\", zErr);\n      sqlite3_free(zErr);\n    }\n  }\n  return rc;\n}\n\n\n/*\n** Implementation of .ar \"create\" and \"update\" commands.\n**\n** Create the \"sqlar\" table in the database if it does not already exist.\n** Then add each file in the azFile[] array to the archive. Directories\n** are added recursively. If argument bVerbose is non-zero, a message is\n** printed on stdout for each file archived.\n**\n** The create command is the same as update, except that it drops\n** any existing \"sqlar\" table before beginning.\n*/\nstatic int arCreateOrUpdateCommand(\n  ArCommand *pAr,                 /* Command arguments and options */\n  int bUpdate                     /* true for a --create.  false for --update */\n){\n  const char *zCreate = \n      \"CREATE TABLE IF NOT EXISTS sqlar(\\n\"\n      \"  name TEXT PRIMARY KEY,  -- name of the file\\n\"\n      \"  mode INT,               -- access permissions\\n\"\n      \"  mtime INT,              -- last modification time\\n\"\n      \"  sz INT,                 -- original file size\\n\"\n      \"  data BLOB               -- compressed content\\n\"\n      \")\";\n  const char *zDrop = \"DROP TABLE IF EXISTS sqlar\";\n  const char *zInsertFmt[2] = {\n     \"REPLACE INTO %s(name,mode,mtime,sz,data)\\n\"\n     \"  SELECT\\n\"\n     \"    %s,\\n\"\n     \"    mode,\\n\"\n     \"    mtime,\\n\"\n     \"    CASE substr(lsmode(mode),1,1)\\n\"\n     \"      WHEN '-' THEN length(data)\\n\"\n     \"      WHEN 'd' THEN 0\\n\"\n     \"      ELSE -1 END,\\n\"\n     \"    sqlar_compress(data)\\n\"\n     \"  FROM fsdir(%Q,%Q)\\n\"\n     \"  WHERE lsmode(mode) NOT LIKE '?%%';\",\n     \"REPLACE INTO %s(name,mode,mtime,data)\\n\"\n     \"  SELECT\\n\"\n     \"    %s,\\n\"\n     \"    mode,\\n\"\n     \"    mtime,\\n\"\n     \"    data\\n\"\n     \"  FROM fsdir(%Q,%Q)\\n\"\n     \"  WHERE lsmode(mode) NOT LIKE '?%%';\"\n  };\n  int i;                          /* For iterating through azFile[] */\n  int rc;                         /* Return code */\n  const char *zTab = 0;           /* SQL table into which to insert */\n  char *zSql;\n  char zTemp[50];\n\n  arExecSql(pAr, \"PRAGMA page_size=512\");\n  rc = arExecSql(pAr, \"SAVEPOINT ar;\");\n  if( rc!=SQLITE_OK ) return rc;\n  zTemp[0] = 0; \n  if( pAr->bZip ){\n    /* Initialize the zipfile virtual table, if necessary */\n    if( pAr->zFile ){\n      sqlite3_uint64 r;\n      sqlite3_randomness(sizeof(r),&r);\n      sqlite3_snprintf(sizeof(zTemp),zTemp,\"zip%016llx\",r);\n      zTab = zTemp;\n      zSql = sqlite3_mprintf(\n         \"CREATE VIRTUAL TABLE temp.%s USING zipfile(%Q)\",\n         zTab, pAr->zFile\n      );\n      rc = arExecSql(pAr, zSql);\n      sqlite3_free(zSql);\n    }else{\n      zTab = \"zip\";\n    }\n  }else{\n    /* Initialize the table for an SQLAR */\n    zTab = \"sqlar\";\n    if( bUpdate==0 ){\n      rc = arExecSql(pAr, zDrop);\n      if( rc!=SQLITE_OK ) goto end_ar_transaction;\n    }\n    rc = arExecSql(pAr, zCreate);\n  }\n  for(i=0; i<pAr->nArg && rc==SQLITE_OK; i++){\n    char *zSql2 = sqlite3_mprintf(zInsertFmt[pAr->bZip], zTab,\n        pAr->bVerbose ? \"shell_putsnl(name)\" : \"name\",\n        pAr->azArg[i], pAr->zDir);\n    rc = arExecSql(pAr, zSql2);\n    sqlite3_free(zSql2);\n  }\nend_ar_transaction:\n  if( rc!=SQLITE_OK ){\n    sqlite3_exec(pAr->db, \"ROLLBACK TO ar; RELEASE ar;\", 0, 0, 0);\n  }else{\n    rc = arExecSql(pAr, \"RELEASE ar;\");\n    if( pAr->bZip && pAr->zFile ){\n      zSql = sqlite3_mprintf(\"DROP TABLE %s\", zTemp);\n      arExecSql(pAr, zSql);\n      sqlite3_free(zSql);\n    }\n  }\n  return rc;\n}\n\n/*\n** Implementation of \".ar\" dot command.\n*/\nstatic int arDotCommand(\n  ShellState *pState,             /* Current shell tool state */\n  int fromCmdLine,                /* True if -A command-line option, not .ar cmd */\n  char **azArg,                   /* Array of arguments passed to dot command */\n  int nArg                        /* Number of entries in azArg[] */\n){\n  ArCommand cmd;\n  int rc;\n  memset(&cmd, 0, sizeof(cmd));\n  cmd.fromCmdLine = fromCmdLine;\n  rc = arParseCommand(azArg, nArg, &cmd);\n  if( rc==SQLITE_OK ){\n    int eDbType = SHELL_OPEN_UNSPEC;\n    cmd.p = pState;\n    cmd.db = pState->db;\n    if( cmd.zFile ){\n      eDbType = deduceDatabaseType(cmd.zFile, 1);\n    }else{\n      eDbType = pState->openMode;\n    }\n    if( eDbType==SHELL_OPEN_ZIPFILE ){\n      if( cmd.eCmd==AR_CMD_EXTRACT || cmd.eCmd==AR_CMD_LIST ){\n        if( cmd.zFile==0 ){\n          cmd.zSrcTable = sqlite3_mprintf(\"zip\");\n        }else{\n          cmd.zSrcTable = sqlite3_mprintf(\"zipfile(%Q)\", cmd.zFile);\n        }\n      }\n      cmd.bZip = 1;\n    }else if( cmd.zFile ){\n      int flags;\n      if( cmd.bAppend ) eDbType = SHELL_OPEN_APPENDVFS;\n      if( cmd.eCmd==AR_CMD_CREATE || cmd.eCmd==AR_CMD_UPDATE ){\n        flags = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE;\n      }else{\n        flags = SQLITE_OPEN_READONLY;\n      }\n      cmd.db = 0;\n      if( cmd.bDryRun ){\n        utf8_printf(pState->out, \"-- open database '%s'%s\\n\", cmd.zFile,\n             eDbType==SHELL_OPEN_APPENDVFS ? \" using 'apndvfs'\" : \"\");\n      }\n      rc = sqlite3_open_v2(cmd.zFile, &cmd.db, flags, \n             eDbType==SHELL_OPEN_APPENDVFS ? \"apndvfs\" : 0);\n      if( rc!=SQLITE_OK ){\n        utf8_printf(stderr, \"cannot open file: %s (%s)\\n\", \n            cmd.zFile, sqlite3_errmsg(cmd.db)\n        );\n        goto end_ar_command;\n      }\n      sqlite3_fileio_init(cmd.db, 0, 0);\n      sqlite3_sqlar_init(cmd.db, 0, 0);\n      sqlite3_create_function(cmd.db, \"shell_putsnl\", 1, SQLITE_UTF8, cmd.p,\n                              shellPutsFunc, 0, 0);\n\n    }\n    if( cmd.zSrcTable==0 && cmd.bZip==0 && cmd.eCmd!=AR_CMD_HELP ){\n      if( cmd.eCmd!=AR_CMD_CREATE\n       && sqlite3_table_column_metadata(cmd.db,0,\"sqlar\",\"name\",0,0,0,0,0)\n      ){\n        utf8_printf(stderr, \"database does not contain an 'sqlar' table\\n\");\n        rc = SQLITE_ERROR;\n        goto end_ar_command;\n      }\n      cmd.zSrcTable = sqlite3_mprintf(\"sqlar\");\n    }\n\n    switch( cmd.eCmd ){\n      case AR_CMD_CREATE:\n        rc = arCreateOrUpdateCommand(&cmd, 0);\n        break;\n\n      case AR_CMD_EXTRACT:\n        rc = arExtractCommand(&cmd);\n        break;\n\n      case AR_CMD_LIST:\n        rc = arListCommand(&cmd);\n        break;\n\n      case AR_CMD_HELP:\n        arUsage(pState->out);\n        break;\n\n      default:\n        assert( cmd.eCmd==AR_CMD_UPDATE );\n        rc = arCreateOrUpdateCommand(&cmd, 1);\n        break;\n    }\n  }\nend_ar_command:\n  if( cmd.db!=pState->db ){\n    close_db(cmd.db);\n  }\n  sqlite3_free(cmd.zSrcTable);\n\n  return rc;\n}\n/* End of the \".archive\" or \".ar\" command logic\n**********************************************************************************/\n#endif /* !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB) */\n\n\n/*\n** If an input line begins with \".\" then invoke this routine to\n** process that line.\n**\n** Return 1 on error, 2 to exit, and 0 otherwise.\n*/\nstatic int do_meta_command(char *zLine, ShellState *p){\n  int h = 1;\n  int nArg = 0;\n  int n, c;\n  int rc = 0;\n  char *azArg[50];\n\n#ifndef SQLITE_OMIT_VIRTUALTABLE\n  if( p->expert.pExpert ){\n    expertFinish(p, 1, 0);\n  }\n#endif\n\n  /* Parse the input line into tokens.\n  */\n  while( zLine[h] && nArg<ArraySize(azArg) ){\n    while( IsSpace(zLine[h]) ){ h++; }\n    if( zLine[h]==0 ) break;\n    if( zLine[h]=='\\'' || zLine[h]=='\"' ){\n      int delim = zLine[h++];\n      azArg[nArg++] = &zLine[h];\n      while( zLine[h] && zLine[h]!=delim ){\n        if( zLine[h]=='\\\\' && delim=='\"' && zLine[h+1]!=0 ) h++;\n        h++;\n      }\n      if( zLine[h]==delim ){\n        zLine[h++] = 0;\n      }\n      if( delim=='\"' ) resolve_backslashes(azArg[nArg-1]);\n    }else{\n      azArg[nArg++] = &zLine[h];\n      while( zLine[h] && !IsSpace(zLine[h]) ){ h++; }\n      if( zLine[h] ) zLine[h++] = 0;\n      resolve_backslashes(azArg[nArg-1]);\n    }\n  }\n\n  /* Process the input line.\n  */\n  if( nArg==0 ) return 0; /* no tokens, no error */\n  n = strlen30(azArg[0]);\n  c = azArg[0][0];\n  clearTempFile(p);\n\n#ifndef SQLITE_OMIT_AUTHORIZATION\n  if( c=='a' && strncmp(azArg[0], \"auth\", n)==0 ){\n    if( nArg!=2 ){\n      raw_printf(stderr, \"Usage: .auth ON|OFF\\n\");\n      rc = 1;\n      goto meta_command_exit;\n    }\n    open_db(p, 0);\n    if( booleanValue(azArg[1]) ){\n      sqlite3_set_authorizer(p->db, shellAuth, p);\n    }else{\n      sqlite3_set_authorizer(p->db, 0, 0);\n    }\n  }else\n#endif\n\n#if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB)\n  if( c=='a' && strncmp(azArg[0], \"archive\", n)==0 ){\n    open_db(p, 0);\n    rc = arDotCommand(p, 0, azArg, nArg);\n  }else\n#endif\n\n  if( (c=='b' && n>=3 && strncmp(azArg[0], \"backup\", n)==0)\n   || (c=='s' && n>=3 && strncmp(azArg[0], \"save\", n)==0)\n  ){\n    const char *zDestFile = 0;\n    const char *zDb = 0;\n    sqlite3 *pDest;\n    sqlite3_backup *pBackup;\n    int j;\n    int bAsync = 0;\n    const char *zVfs = 0;\n    for(j=1; j<nArg; j++){\n      const char *z = azArg[j];\n      if( z[0]=='-' ){\n        if( z[1]=='-' ) z++;\n        if( strcmp(z, \"-append\")==0 ){\n          zVfs = \"apndvfs\";\n        }else\n        if( strcmp(z, \"-async\")==0 ){\n          bAsync = 1;\n        }else\n        {\n          utf8_printf(stderr, \"unknown option: %s\\n\", azArg[j]);\n          return 1;\n        }\n      }else if( zDestFile==0 ){\n        zDestFile = azArg[j];\n      }else if( zDb==0 ){\n        zDb = zDestFile;\n        zDestFile = azArg[j];\n      }else{\n        raw_printf(stderr, \"Usage: .backup ?DB? ?OPTIONS? FILENAME\\n\");\n        return 1;\n      }\n    }\n    if( zDestFile==0 ){\n      raw_printf(stderr, \"missing FILENAME argument on .backup\\n\");\n      return 1;\n    }\n    if( zDb==0 ) zDb = \"main\";\n    rc = sqlite3_open_v2(zDestFile, &pDest, \n                  SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE, zVfs);\n    if( rc!=SQLITE_OK ){\n      utf8_printf(stderr, \"Error: cannot open \\\"%s\\\"\\n\", zDestFile);\n      close_db(pDest);\n      return 1;\n    }\n    if( bAsync ){\n      sqlite3_exec(pDest, \"PRAGMA synchronous=OFF; PRAGMA journal_mode=OFF;\",\n                   0, 0, 0);\n    }\n    open_db(p, 0);\n    pBackup = sqlite3_backup_init(pDest, \"main\", p->db, zDb);\n    if( pBackup==0 ){\n      utf8_printf(stderr, \"Error: %s\\n\", sqlite3_errmsg(pDest));\n      close_db(pDest);\n      return 1;\n    }\n    while(  (rc = sqlite3_backup_step(pBackup,100))==SQLITE_OK ){}\n    sqlite3_backup_finish(pBackup);\n    if( rc==SQLITE_DONE ){\n      rc = 0;\n    }else{\n      utf8_printf(stderr, \"Error: %s\\n\", sqlite3_errmsg(pDest));\n      rc = 1;\n    }\n    close_db(pDest);\n  }else\n\n  if( c=='b' && n>=3 && strncmp(azArg[0], \"bail\", n)==0 ){\n    if( nArg==2 ){\n      bail_on_error = booleanValue(azArg[1]);\n    }else{\n      raw_printf(stderr, \"Usage: .bail on|off\\n\");\n      rc = 1;\n    }\n  }else\n\n  if( c=='b' && n>=3 && strncmp(azArg[0], \"binary\", n)==0 ){\n    if( nArg==2 ){\n      if( booleanValue(azArg[1]) ){\n        setBinaryMode(p->out, 1);\n      }else{\n        setTextMode(p->out, 1);\n      }\n    }else{\n      raw_printf(stderr, \"Usage: .binary on|off\\n\");\n      rc = 1;\n    }\n  }else\n\n  if( c=='c' && strcmp(azArg[0],\"cd\")==0 ){\n    if( nArg==2 ){\n#if defined(_WIN32) || defined(WIN32)\n      wchar_t *z = sqlite3_win32_utf8_to_unicode(azArg[1]);\n      rc = !SetCurrentDirectoryW(z);\n      sqlite3_free(z);\n#else\n      rc = chdir(azArg[1]);\n#endif\n      if( rc ){\n        utf8_printf(stderr, \"Cannot change to directory \\\"%s\\\"\\n\", azArg[1]);\n        rc = 1;\n      }\n    }else{\n      raw_printf(stderr, \"Usage: .cd DIRECTORY\\n\");\n      rc = 1;\n    }\n  }else\n\n  /* The undocumented \".breakpoint\" command causes a call to the no-op\n  ** routine named test_breakpoint().\n  */\n  if( c=='b' && n>=3 && strncmp(azArg[0], \"breakpoint\", n)==0 ){\n    test_breakpoint();\n  }else\n\n  if( c=='c' && n>=3 && strncmp(azArg[0], \"changes\", n)==0 ){\n    if( nArg==2 ){\n      setOrClearFlag(p, SHFLG_CountChanges, azArg[1]);\n    }else{\n      raw_printf(stderr, \"Usage: .changes on|off\\n\");\n      rc = 1;\n    }\n  }else\n\n  /* Cancel output redirection, if it is currently set (by .testcase)\n  ** Then read the content of the testcase-out.txt file and compare against\n  ** azArg[1].  If there are differences, report an error and exit.\n  */\n  if( c=='c' && n>=3 && strncmp(azArg[0], \"check\", n)==0 ){\n    char *zRes = 0;\n    output_reset(p);\n    if( nArg!=2 ){\n      raw_printf(stderr, \"Usage: .check GLOB-PATTERN\\n\");\n      rc = 2;\n    }else if( (zRes = readFile(\"testcase-out.txt\", 0))==0 ){\n      raw_printf(stderr, \"Error: cannot read 'testcase-out.txt'\\n\");\n      rc = 2;\n    }else if( testcase_glob(azArg[1],zRes)==0 ){\n      utf8_printf(stderr,\n                 \"testcase-%s FAILED\\n Expected: [%s]\\n      Got: [%s]\\n\",\n                 p->zTestcase, azArg[1], zRes);\n      rc = 1;\n    }else{\n      utf8_printf(stdout, \"testcase-%s ok\\n\", p->zTestcase);\n      p->nCheck++;\n    }\n    sqlite3_free(zRes);\n  }else\n\n  if( c=='c' && strncmp(azArg[0], \"clone\", n)==0 ){\n    if( nArg==2 ){\n      tryToClone(p, azArg[1]);\n    }else{\n      raw_printf(stderr, \"Usage: .clone FILENAME\\n\");\n      rc = 1;\n    }\n  }else\n\n  if( c=='d' && n>1 && strncmp(azArg[0], \"databases\", n)==0 ){\n    ShellState data;\n    char *zErrMsg = 0;\n    open_db(p, 0);\n    memcpy(&data, p, sizeof(data));\n    data.showHeader = 0;\n    data.cMode = data.mode = MODE_List;\n    sqlite3_snprintf(sizeof(data.colSeparator),data.colSeparator,\": \");\n    data.cnt = 0;\n    sqlite3_exec(p->db, \"SELECT name, file FROM pragma_database_list\",\n                 callback, &data, &zErrMsg);\n    if( zErrMsg ){\n      utf8_printf(stderr,\"Error: %s\\n\", zErrMsg);\n      sqlite3_free(zErrMsg);\n      rc = 1;\n    }\n  }else\n\n  if( c=='d' && n>=3 && strncmp(azArg[0], \"dbconfig\", n)==0 ){\n    static const struct DbConfigChoices {\n      const char *zName;\n      int op;\n    } aDbConfig[] = {\n        { \"enable_fkey\",      SQLITE_DBCONFIG_ENABLE_FKEY            },\n        { \"enable_trigger\",   SQLITE_DBCONFIG_ENABLE_TRIGGER         },\n        { \"fts3_tokenizer\",   SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER  },\n        { \"load_extension\",   SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION  },\n        { \"no_ckpt_on_close\", SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE       },\n        { \"enable_qpsg\",      SQLITE_DBCONFIG_ENABLE_QPSG            },\n        { \"trigger_eqp\",      SQLITE_DBCONFIG_TRIGGER_EQP            },\n        { \"reset_database\",   SQLITE_DBCONFIG_RESET_DATABASE         },\n        { \"defensive\",        SQLITE_DBCONFIG_DEFENSIVE              },\n    };\n    int ii, v;\n    open_db(p, 0);\n    for(ii=0; ii<ArraySize(aDbConfig); ii++){\n      if( nArg>1 && strcmp(azArg[1], aDbConfig[ii].zName)!=0 ) continue;\n      if( nArg>=3 ){\n        sqlite3_db_config(p->db, aDbConfig[ii].op, booleanValue(azArg[2]), 0);\n      }\n      sqlite3_db_config(p->db, aDbConfig[ii].op, -1, &v);\n      utf8_printf(p->out, \"%18s %s\\n\", aDbConfig[ii].zName, v ? \"on\" : \"off\");\n      if( nArg>1 ) break;\n    }\n    if( nArg>1 && ii==ArraySize(aDbConfig) ){\n      utf8_printf(stderr, \"Error: unknown dbconfig \\\"%s\\\"\\n\", azArg[1]);\n      utf8_printf(stderr, \"Enter \\\".dbconfig\\\" with no arguments for a list\\n\");\n    }   \n  }else\n\n  if( c=='d' && n>=3 && strncmp(azArg[0], \"dbinfo\", n)==0 ){\n    rc = shell_dbinfo_command(p, nArg, azArg);\n  }else\n\n  if( c=='d' && strncmp(azArg[0], \"dump\", n)==0 ){\n    const char *zLike = 0;\n    int i;\n    int savedShowHeader = p->showHeader;\n    int savedShellFlags = p->shellFlgs;\n    ShellClearFlag(p, SHFLG_PreserveRowid|SHFLG_Newlines|SHFLG_Echo);\n    for(i=1; i<nArg; i++){\n      if( azArg[i][0]=='-' ){\n        const char *z = azArg[i]+1;\n        if( z[0]=='-' ) z++;\n        if( strcmp(z,\"preserve-rowids\")==0 ){\n#ifdef SQLITE_OMIT_VIRTUALTABLE\n          raw_printf(stderr, \"The --preserve-rowids option is not compatible\"\n                             \" with SQLITE_OMIT_VIRTUALTABLE\\n\");\n          rc = 1;\n          goto meta_command_exit;\n#else\n          ShellSetFlag(p, SHFLG_PreserveRowid);\n#endif\n        }else\n        if( strcmp(z,\"newlines\")==0 ){\n          ShellSetFlag(p, SHFLG_Newlines);\n        }else\n        {\n          raw_printf(stderr, \"Unknown option \\\"%s\\\" on \\\".dump\\\"\\n\", azArg[i]);\n          rc = 1;\n          goto meta_command_exit;\n        }\n      }else if( zLike ){\n        raw_printf(stderr, \"Usage: .dump ?--preserve-rowids? \"\n                           \"?--newlines? ?LIKE-PATTERN?\\n\");\n        rc = 1;\n        goto meta_command_exit;\n      }else{\n        zLike = azArg[i];\n      }\n    }\n    open_db(p, 0);\n    /* When playing back a \"dump\", the content might appear in an order\n    ** which causes immediate foreign key constraints to be violated.\n    ** So disable foreign-key constraint enforcement to prevent problems. */\n    raw_printf(p->out, \"PRAGMA foreign_keys=OFF;\\n\");\n    raw_printf(p->out, \"BEGIN TRANSACTION;\\n\");\n    p->writableSchema = 0;\n    p->showHeader = 0;\n    /* Set writable_schema=ON since doing so forces SQLite to initialize\n    ** as much of the schema as it can even if the sqlite_master table is\n    ** corrupt. */\n    sqlite3_exec(p->db, \"SAVEPOINT dump; PRAGMA writable_schema=ON\", 0, 0, 0);\n    p->nErr = 0;\n    if( zLike==0 ){\n      run_schema_dump_query(p,\n        \"SELECT name, type, sql FROM sqlite_master \"\n        \"WHERE sql NOT NULL AND type=='table' AND name!='sqlite_sequence'\"\n      );\n      run_schema_dump_query(p,\n        \"SELECT name, type, sql FROM sqlite_master \"\n        \"WHERE name=='sqlite_sequence'\"\n      );\n      run_table_dump_query(p,\n        \"SELECT sql FROM sqlite_master \"\n        \"WHERE sql NOT NULL AND type IN ('index','trigger','view')\", 0\n      );\n    }else{\n      char *zSql;\n      zSql = sqlite3_mprintf(\n        \"SELECT name, type, sql FROM sqlite_master \"\n        \"WHERE tbl_name LIKE %Q AND type=='table'\"\n        \"  AND sql NOT NULL\", zLike);\n      run_schema_dump_query(p,zSql);\n      sqlite3_free(zSql);\n      zSql = sqlite3_mprintf(\n        \"SELECT sql FROM sqlite_master \"\n        \"WHERE sql NOT NULL\"\n        \"  AND type IN ('index','trigger','view')\"\n        \"  AND tbl_name LIKE %Q\", zLike);\n      run_table_dump_query(p, zSql, 0);\n      sqlite3_free(zSql);\n    }\n    if( p->writableSchema ){\n      raw_printf(p->out, \"PRAGMA writable_schema=OFF;\\n\");\n      p->writableSchema = 0;\n    }\n    sqlite3_exec(p->db, \"PRAGMA writable_schema=OFF;\", 0, 0, 0);\n    sqlite3_exec(p->db, \"RELEASE dump;\", 0, 0, 0);\n    raw_printf(p->out, p->nErr ? \"ROLLBACK; -- due to errors\\n\" : \"COMMIT;\\n\");\n    p->showHeader = savedShowHeader;\n    p->shellFlgs = savedShellFlags;\n  }else\n\n  if( c=='e' && strncmp(azArg[0], \"echo\", n)==0 ){\n    if( nArg==2 ){\n      setOrClearFlag(p, SHFLG_Echo, azArg[1]);\n    }else{\n      raw_printf(stderr, \"Usage: .echo on|off\\n\");\n      rc = 1;\n    }\n  }else\n\n  if( c=='e' && strncmp(azArg[0], \"eqp\", n)==0 ){\n    if( nArg==2 ){\n      p->autoEQPtest = 0;\n      if( p->autoEQPtrace ){\n        if( p->db ) sqlite3_exec(p->db, \"PRAGMA vdbe_trace=OFF;\", 0, 0, 0);\n        p->autoEQPtrace = 0;\n      }\n      if( strcmp(azArg[1],\"full\")==0 ){\n        p->autoEQP = AUTOEQP_full;\n      }else if( strcmp(azArg[1],\"trigger\")==0 ){\n        p->autoEQP = AUTOEQP_trigger;\n#ifdef SQLITE_DEBUG\n      }else if( strcmp(azArg[1],\"test\")==0 ){\n        p->autoEQP = AUTOEQP_on;\n        p->autoEQPtest = 1;\n      }else if( strcmp(azArg[1],\"trace\")==0 ){\n        p->autoEQP = AUTOEQP_full;\n        p->autoEQPtrace = 1;\n        open_db(p, 0);\n        sqlite3_exec(p->db, \"SELECT name FROM sqlite_master LIMIT 1\", 0, 0, 0);\n        sqlite3_exec(p->db, \"PRAGMA vdbe_trace=ON;\", 0, 0, 0);\n#endif\n      }else{\n        p->autoEQP = (u8)booleanValue(azArg[1]);\n      }\n    }else{\n      raw_printf(stderr, \"Usage: .eqp off|on|trace|trigger|full\\n\");\n      rc = 1;\n    }\n  }else\n\n  if( c=='e' && strncmp(azArg[0], \"exit\", n)==0 ){\n    if( nArg>1 && (rc = (int)integerValue(azArg[1]))!=0 ) exit(rc);\n    rc = 2;\n  }else\n\n  /* The \".explain\" command is automatic now.  It is largely pointless.  It\n  ** retained purely for backwards compatibility */\n  if( c=='e' && strncmp(azArg[0], \"explain\", n)==0 ){\n    int val = 1;\n    if( nArg>=2 ){\n      if( strcmp(azArg[1],\"auto\")==0 ){\n        val = 99;\n      }else{\n        val =  booleanValue(azArg[1]);\n      }\n    }\n    if( val==1 && p->mode!=MODE_Explain ){\n      p->normalMode = p->mode;\n      p->mode = MODE_Explain;\n      p->autoExplain = 0;\n    }else if( val==0 ){\n      if( p->mode==MODE_Explain ) p->mode = p->normalMode;\n      p->autoExplain = 0;\n    }else if( val==99 ){\n      if( p->mode==MODE_Explain ) p->mode = p->normalMode;\n      p->autoExplain = 1;\n    }\n  }else\n\n#ifndef SQLITE_OMIT_VIRTUALTABLE\n  if( c=='e' && strncmp(azArg[0], \"expert\", n)==0 ){\n    open_db(p, 0);\n    expertDotCommand(p, azArg, nArg);\n  }else\n#endif\n\n  if( c=='f' && strncmp(azArg[0], \"fullschema\", n)==0 ){\n    ShellState data;\n    char *zErrMsg = 0;\n    int doStats = 0;\n    memcpy(&data, p, sizeof(data));\n    data.showHeader = 0;\n    data.cMode = data.mode = MODE_Semi;\n    if( nArg==2 && optionMatch(azArg[1], \"indent\") ){\n      data.cMode = data.mode = MODE_Pretty;\n      nArg = 1;\n    }\n    if( nArg!=1 ){\n      raw_printf(stderr, \"Usage: .fullschema ?--indent?\\n\");\n      rc = 1;\n      goto meta_command_exit;\n    }\n    open_db(p, 0);\n    rc = sqlite3_exec(p->db,\n       \"SELECT sql FROM\"\n       \"  (SELECT sql sql, type type, tbl_name tbl_name, name name, rowid x\"\n       \"     FROM sqlite_master UNION ALL\"\n       \"   SELECT sql, type, tbl_name, name, rowid FROM sqlite_temp_master) \"\n       \"WHERE type!='meta' AND sql NOTNULL AND name NOT LIKE 'sqlite_%' \"\n       \"ORDER BY rowid\",\n       callback, &data, &zErrMsg\n    );\n    if( rc==SQLITE_OK ){\n      sqlite3_stmt *pStmt;\n      rc = sqlite3_prepare_v2(p->db,\n               \"SELECT rowid FROM sqlite_master\"\n               \" WHERE name GLOB 'sqlite_stat[134]'\",\n               -1, &pStmt, 0);\n      doStats = sqlite3_step(pStmt)==SQLITE_ROW;\n      sqlite3_finalize(pStmt);\n    }\n    if( doStats==0 ){\n      raw_printf(p->out, \"/* No STAT tables available */\\n\");\n    }else{\n      raw_printf(p->out, \"ANALYZE sqlite_master;\\n\");\n      sqlite3_exec(p->db, \"SELECT 'ANALYZE sqlite_master'\",\n                   callback, &data, &zErrMsg);\n      data.cMode = data.mode = MODE_Insert;\n      data.zDestTable = \"sqlite_stat1\";\n      shell_exec(&data, \"SELECT * FROM sqlite_stat1\", &zErrMsg);\n      data.zDestTable = \"sqlite_stat3\";\n      shell_exec(&data, \"SELECT * FROM sqlite_stat3\", &zErrMsg);\n      data.zDestTable = \"sqlite_stat4\";\n      shell_exec(&data, \"SELECT * FROM sqlite_stat4\", &zErrMsg);\n      raw_printf(p->out, \"ANALYZE sqlite_master;\\n\");\n    }\n  }else\n\n  if( c=='h' && strncmp(azArg[0], \"headers\", n)==0 ){\n    if( nArg==2 ){\n      p->showHeader = booleanValue(azArg[1]);\n    }else{\n      raw_printf(stderr, \"Usage: .headers on|off\\n\");\n      rc = 1;\n    }\n  }else\n\n  if( c=='h' && strncmp(azArg[0], \"help\", n)==0 ){\n    if( nArg>=2 ){\n      n = showHelp(p->out, azArg[1]);\n      if( n==0 ){\n        utf8_printf(p->out, \"Nothing matches '%s'\\n\", azArg[1]);\n      }\n    }else{\n      showHelp(p->out, 0);\n    }\n  }else\n\n  if( c=='i' && strncmp(azArg[0], \"import\", n)==0 ){\n    char *zTable;               /* Insert data into this table */\n    char *zFile;                /* Name of file to extra content from */\n    sqlite3_stmt *pStmt = NULL; /* A statement */\n    int nCol;                   /* Number of columns in the table */\n    int nByte;                  /* Number of bytes in an SQL string */\n    int i, j;                   /* Loop counters */\n    int needCommit;             /* True to COMMIT or ROLLBACK at end */\n    int nSep;                   /* Number of bytes in p->colSeparator[] */\n    char *zSql;                 /* An SQL statement */\n    ImportCtx sCtx;             /* Reader context */\n    char *(SQLITE_CDECL *xRead)(ImportCtx*); /* Func to read one value */\n    int (SQLITE_CDECL *xCloser)(FILE*);      /* Func to close file */\n\n    if( nArg!=3 ){\n      raw_printf(stderr, \"Usage: .import FILE TABLE\\n\");\n      goto meta_command_exit;\n    }\n    zFile = azArg[1];\n    zTable = azArg[2];\n    seenInterrupt = 0;\n    memset(&sCtx, 0, sizeof(sCtx));\n    open_db(p, 0);\n    nSep = strlen30(p->colSeparator);\n    if( nSep==0 ){\n      raw_printf(stderr,\n                 \"Error: non-null column separator required for import\\n\");\n      return 1;\n    }\n    if( nSep>1 ){\n      raw_printf(stderr, \"Error: multi-character column separators not allowed\"\n                      \" for import\\n\");\n      return 1;\n    }\n    nSep = strlen30(p->rowSeparator);\n    if( nSep==0 ){\n      raw_printf(stderr, \"Error: non-null row separator required for import\\n\");\n      return 1;\n    }\n    if( nSep==2 && p->mode==MODE_Csv && strcmp(p->rowSeparator, SEP_CrLf)==0 ){\n      /* When importing CSV (only), if the row separator is set to the\n      ** default output row separator, change it to the default input\n      ** row separator.  This avoids having to maintain different input\n      ** and output row separators. */\n      sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);\n      nSep = strlen30(p->rowSeparator);\n    }\n    if( nSep>1 ){\n      raw_printf(stderr, \"Error: multi-character row separators not allowed\"\n                      \" for import\\n\");\n      return 1;\n    }\n    sCtx.zFile = zFile;\n    sCtx.nLine = 1;\n    if( sCtx.zFile[0]=='|' ){\n#ifdef SQLITE_OMIT_POPEN\n      raw_printf(stderr, \"Error: pipes are not supported in this OS\\n\");\n      return 1;\n#else\n      sCtx.in = popen(sCtx.zFile+1, \"r\");\n      sCtx.zFile = \"<pipe>\";\n      xCloser = pclose;\n#endif\n    }else{\n      sCtx.in = fopen(sCtx.zFile, \"rb\");\n      xCloser = fclose;\n    }\n    if( p->mode==MODE_Ascii ){\n      xRead = ascii_read_one_field;\n    }else{\n      xRead = csv_read_one_field;\n    }\n    if( sCtx.in==0 ){\n      utf8_printf(stderr, \"Error: cannot open \\\"%s\\\"\\n\", zFile);\n      return 1;\n    }\n    sCtx.cColSep = p->colSeparator[0];\n    sCtx.cRowSep = p->rowSeparator[0];\n    zSql = sqlite3_mprintf(\"SELECT * FROM %s\", zTable);\n    if( zSql==0 ){\n      xCloser(sCtx.in);\n      shell_out_of_memory();\n    }\n    nByte = strlen30(zSql);\n    rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);\n    import_append_char(&sCtx, 0);    /* To ensure sCtx.z is allocated */\n    if( rc && sqlite3_strglob(\"no such table: *\", sqlite3_errmsg(p->db))==0 ){\n      char *zCreate = sqlite3_mprintf(\"CREATE TABLE %s\", zTable);\n      char cSep = '(';\n      while( xRead(&sCtx) ){\n        zCreate = sqlite3_mprintf(\"%z%c\\n  \\\"%w\\\" TEXT\", zCreate, cSep, sCtx.z);\n        cSep = ',';\n        if( sCtx.cTerm!=sCtx.cColSep ) break;\n      }\n      if( cSep=='(' ){\n        sqlite3_free(zCreate);\n        sqlite3_free(sCtx.z);\n        xCloser(sCtx.in);\n        utf8_printf(stderr,\"%s: empty file\\n\", sCtx.zFile);\n        return 1;\n      }\n      zCreate = sqlite3_mprintf(\"%z\\n)\", zCreate);\n      rc = sqlite3_exec(p->db, zCreate, 0, 0, 0);\n      sqlite3_free(zCreate);\n      if( rc ){\n        utf8_printf(stderr, \"CREATE TABLE %s(...) failed: %s\\n\", zTable,\n                sqlite3_errmsg(p->db));\n        sqlite3_free(sCtx.z);\n        xCloser(sCtx.in);\n        return 1;\n      }\n      rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);\n    }\n    sqlite3_free(zSql);\n    if( rc ){\n      if (pStmt) sqlite3_finalize(pStmt);\n      utf8_printf(stderr,\"Error: %s\\n\", sqlite3_errmsg(p->db));\n      xCloser(sCtx.in);\n      return 1;\n    }\n    nCol = sqlite3_column_count(pStmt);\n    sqlite3_finalize(pStmt);\n    pStmt = 0;\n    if( nCol==0 ) return 0; /* no columns, no error */\n    zSql = sqlite3_malloc64( nByte*2 + 20 + nCol*2 );\n    if( zSql==0 ){\n      xCloser(sCtx.in);\n      shell_out_of_memory();\n    }\n    sqlite3_snprintf(nByte+20, zSql, \"INSERT INTO \\\"%w\\\" VALUES(?\", zTable);\n    j = strlen30(zSql);\n    for(i=1; i<nCol; i++){\n      zSql[j++] = ',';\n      zSql[j++] = '?';\n    }\n    zSql[j++] = ')';\n    zSql[j] = 0;\n    rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);\n    sqlite3_free(zSql);\n    if( rc ){\n      utf8_printf(stderr, \"Error: %s\\n\", sqlite3_errmsg(p->db));\n      if (pStmt) sqlite3_finalize(pStmt);\n      xCloser(sCtx.in);\n      return 1;\n    }\n    needCommit = sqlite3_get_autocommit(p->db);\n    if( needCommit ) sqlite3_exec(p->db, \"BEGIN\", 0, 0, 0);\n    do{\n      int startLine = sCtx.nLine;\n      for(i=0; i<nCol; i++){\n        char *z = xRead(&sCtx);\n        /*\n        ** Did we reach end-of-file before finding any columns?\n        ** If so, stop instead of NULL filling the remaining columns.\n        */\n        if( z==0 && i==0 ) break;\n        /*\n        ** Did we reach end-of-file OR end-of-line before finding any\n        ** columns in ASCII mode?  If so, stop instead of NULL filling\n        ** the remaining columns.\n        */\n        if( p->mode==MODE_Ascii && (z==0 || z[0]==0) && i==0 ) break;\n        sqlite3_bind_text(pStmt, i+1, z, -1, SQLITE_TRANSIENT);\n        if( i<nCol-1 && sCtx.cTerm!=sCtx.cColSep ){\n          utf8_printf(stderr, \"%s:%d: expected %d columns but found %d - \"\n                          \"filling the rest with NULL\\n\",\n                          sCtx.zFile, startLine, nCol, i+1);\n          i += 2;\n          while( i<=nCol ){ sqlite3_bind_null(pStmt, i); i++; }\n        }\n      }\n      if( sCtx.cTerm==sCtx.cColSep ){\n        do{\n          xRead(&sCtx);\n          i++;\n        }while( sCtx.cTerm==sCtx.cColSep );\n        utf8_printf(stderr, \"%s:%d: expected %d columns but found %d - \"\n                        \"extras ignored\\n\",\n                        sCtx.zFile, startLine, nCol, i);\n      }\n      if( i>=nCol ){\n        sqlite3_step(pStmt);\n        rc = sqlite3_reset(pStmt);\n        if( rc!=SQLITE_OK ){\n          utf8_printf(stderr, \"%s:%d: INSERT failed: %s\\n\", sCtx.zFile,\n                      startLine, sqlite3_errmsg(p->db));\n        }\n      }\n    }while( sCtx.cTerm!=EOF );\n\n    xCloser(sCtx.in);\n    sqlite3_free(sCtx.z);\n    sqlite3_finalize(pStmt);\n    if( needCommit ) sqlite3_exec(p->db, \"COMMIT\", 0, 0, 0);\n  }else\n\n#ifndef SQLITE_UNTESTABLE\n  if( c=='i' && strncmp(azArg[0], \"imposter\", n)==0 ){\n    char *zSql;\n    char *zCollist = 0;\n    sqlite3_stmt *pStmt;\n    int tnum = 0;\n    int i;\n    if( !(nArg==3 || (nArg==2 && sqlite3_stricmp(azArg[1],\"off\")==0)) ){\n      utf8_printf(stderr, \"Usage: .imposter INDEX IMPOSTER\\n\"\n                          \"       .imposter off\\n\");\n      rc = 1;\n      goto meta_command_exit;\n    }\n    open_db(p, 0);\n    if( nArg==2 ){\n      sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, \"main\", 0, 1);\n      goto meta_command_exit;\n    }\n    zSql = sqlite3_mprintf(\"SELECT rootpage FROM sqlite_master\"\n                           \" WHERE name='%q' AND type='index'\", azArg[1]);\n    sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);\n    sqlite3_free(zSql);\n    if( sqlite3_step(pStmt)==SQLITE_ROW ){\n      tnum = sqlite3_column_int(pStmt, 0);\n    }\n    sqlite3_finalize(pStmt);\n    if( tnum==0 ){\n      utf8_printf(stderr, \"no such index: \\\"%s\\\"\\n\", azArg[1]);\n      rc = 1;\n      goto meta_command_exit;\n    }\n    zSql = sqlite3_mprintf(\"PRAGMA index_xinfo='%q'\", azArg[1]);\n    rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);\n    sqlite3_free(zSql);\n    i = 0;\n    while( sqlite3_step(pStmt)==SQLITE_ROW ){\n      char zLabel[20];\n      const char *zCol = (const char*)sqlite3_column_text(pStmt,2);\n      i++;\n      if( zCol==0 ){\n        if( sqlite3_column_int(pStmt,1)==-1 ){\n          zCol = \"_ROWID_\";\n        }else{\n          sqlite3_snprintf(sizeof(zLabel),zLabel,\"expr%d\",i);\n          zCol = zLabel;\n        }\n      }\n      if( zCollist==0 ){\n        zCollist = sqlite3_mprintf(\"\\\"%w\\\"\", zCol);\n      }else{\n        zCollist = sqlite3_mprintf(\"%z,\\\"%w\\\"\", zCollist, zCol);\n      }\n    }\n    sqlite3_finalize(pStmt);\n    zSql = sqlite3_mprintf(\n          \"CREATE TABLE \\\"%w\\\"(%s,PRIMARY KEY(%s))WITHOUT ROWID\",\n          azArg[2], zCollist, zCollist);\n    sqlite3_free(zCollist);\n    rc = sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, \"main\", 1, tnum);\n    if( rc==SQLITE_OK ){\n      rc = sqlite3_exec(p->db, zSql, 0, 0, 0);\n      sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, \"main\", 0, 0);\n      if( rc ){\n        utf8_printf(stderr, \"Error in [%s]: %s\\n\", zSql, sqlite3_errmsg(p->db));\n      }else{\n        utf8_printf(stdout, \"%s;\\n\", zSql);\n        raw_printf(stdout,\n           \"WARNING: writing to an imposter table will corrupt the index!\\n\"\n        );\n      }\n    }else{\n      raw_printf(stderr, \"SQLITE_TESTCTRL_IMPOSTER returns %d\\n\", rc);\n      rc = 1;\n    }\n    sqlite3_free(zSql);\n  }else\n#endif /* !defined(SQLITE_OMIT_TEST_CONTROL) */\n\n#ifdef SQLITE_ENABLE_IOTRACE\n  if( c=='i' && strncmp(azArg[0], \"iotrace\", n)==0 ){\n    SQLITE_API extern void (SQLITE_CDECL *sqlite3IoTrace)(const char*, ...);\n    if( iotrace && iotrace!=stdout ) fclose(iotrace);\n    iotrace = 0;\n    if( nArg<2 ){\n      sqlite3IoTrace = 0;\n    }else if( strcmp(azArg[1], \"-\")==0 ){\n      sqlite3IoTrace = iotracePrintf;\n      iotrace = stdout;\n    }else{\n      iotrace = fopen(azArg[1], \"w\");\n      if( iotrace==0 ){\n        utf8_printf(stderr, \"Error: cannot open \\\"%s\\\"\\n\", azArg[1]);\n        sqlite3IoTrace = 0;\n        rc = 1;\n      }else{\n        sqlite3IoTrace = iotracePrintf;\n      }\n    }\n  }else\n#endif\n\n  if( c=='l' && n>=5 && strncmp(azArg[0], \"limits\", n)==0 ){\n    static const struct {\n       const char *zLimitName;   /* Name of a limit */\n       int limitCode;            /* Integer code for that limit */\n    } aLimit[] = {\n      { \"length\",                SQLITE_LIMIT_LENGTH                    },\n      { \"sql_length\",            SQLITE_LIMIT_SQL_LENGTH                },\n      { \"column\",                SQLITE_LIMIT_COLUMN                    },\n      { \"expr_depth\",            SQLITE_LIMIT_EXPR_DEPTH                },\n      { \"compound_select\",       SQLITE_LIMIT_COMPOUND_SELECT           },\n      { \"vdbe_op\",               SQLITE_LIMIT_VDBE_OP                   },\n      { \"function_arg\",          SQLITE_LIMIT_FUNCTION_ARG              },\n      { \"attached\",              SQLITE_LIMIT_ATTACHED                  },\n      { \"like_pattern_length\",   SQLITE_LIMIT_LIKE_PATTERN_LENGTH       },\n      { \"variable_number\",       SQLITE_LIMIT_VARIABLE_NUMBER           },\n      { \"trigger_depth\",         SQLITE_LIMIT_TRIGGER_DEPTH             },\n      { \"worker_threads\",        SQLITE_LIMIT_WORKER_THREADS            },\n    };\n    int i, n2;\n    open_db(p, 0);\n    if( nArg==1 ){\n      for(i=0; i<ArraySize(aLimit); i++){\n        printf(\"%20s %d\\n\", aLimit[i].zLimitName,\n               sqlite3_limit(p->db, aLimit[i].limitCode, -1));\n      }\n    }else if( nArg>3 ){\n      raw_printf(stderr, \"Usage: .limit NAME ?NEW-VALUE?\\n\");\n      rc = 1;\n      goto meta_command_exit;\n    }else{\n      int iLimit = -1;\n      n2 = strlen30(azArg[1]);\n      for(i=0; i<ArraySize(aLimit); i++){\n        if( sqlite3_strnicmp(aLimit[i].zLimitName, azArg[1], n2)==0 ){\n          if( iLimit<0 ){\n            iLimit = i;\n          }else{\n            utf8_printf(stderr, \"ambiguous limit: \\\"%s\\\"\\n\", azArg[1]);\n            rc = 1;\n            goto meta_command_exit;\n          }\n        }\n      }\n      if( iLimit<0 ){\n        utf8_printf(stderr, \"unknown limit: \\\"%s\\\"\\n\"\n                        \"enter \\\".limits\\\" with no arguments for a list.\\n\",\n                         azArg[1]);\n        rc = 1;\n        goto meta_command_exit;\n      }\n      if( nArg==3 ){\n        sqlite3_limit(p->db, aLimit[iLimit].limitCode,\n                      (int)integerValue(azArg[2]));\n      }\n      printf(\"%20s %d\\n\", aLimit[iLimit].zLimitName,\n             sqlite3_limit(p->db, aLimit[iLimit].limitCode, -1));\n    }\n  }else\n\n  if( c=='l' && n>2 && strncmp(azArg[0], \"lint\", n)==0 ){\n    open_db(p, 0);\n    lintDotCommand(p, azArg, nArg);\n  }else\n\n#ifndef SQLITE_OMIT_LOAD_EXTENSION\n  if( c=='l' && strncmp(azArg[0], \"load\", n)==0 ){\n    const char *zFile, *zProc;\n    char *zErrMsg = 0;\n    if( nArg<2 ){\n      raw_printf(stderr, \"Usage: .load FILE ?ENTRYPOINT?\\n\");\n      rc = 1;\n      goto meta_command_exit;\n    }\n    zFile = azArg[1];\n    zProc = nArg>=3 ? azArg[2] : 0;\n    open_db(p, 0);\n    rc = sqlite3_load_extension(p->db, zFile, zProc, &zErrMsg);\n    if( rc!=SQLITE_OK ){\n      utf8_printf(stderr, \"Error: %s\\n\", zErrMsg);\n      sqlite3_free(zErrMsg);\n      rc = 1;\n    }\n  }else\n#endif\n\n  if( c=='l' && strncmp(azArg[0], \"log\", n)==0 ){\n    if( nArg!=2 ){\n      raw_printf(stderr, \"Usage: .log FILENAME\\n\");\n      rc = 1;\n    }else{\n      const char *zFile = azArg[1];\n      output_file_close(p->pLog);\n      p->pLog = output_file_open(zFile, 0);\n    }\n  }else\n\n  if( c=='m' && strncmp(azArg[0], \"mode\", n)==0 ){\n    const char *zMode = nArg>=2 ? azArg[1] : \"\";\n    int n2 = strlen30(zMode);\n    int c2 = zMode[0];\n    if( c2=='l' && n2>2 && strncmp(azArg[1],\"lines\",n2)==0 ){\n      p->mode = MODE_Line;\n      sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);\n    }else if( c2=='c' && strncmp(azArg[1],\"columns\",n2)==0 ){\n      p->mode = MODE_Column;\n      sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);\n    }else if( c2=='l' && n2>2 && strncmp(azArg[1],\"list\",n2)==0 ){\n      p->mode = MODE_List;\n      sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Column);\n      sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);\n    }else if( c2=='h' && strncmp(azArg[1],\"html\",n2)==0 ){\n      p->mode = MODE_Html;\n    }else if( c2=='t' && strncmp(azArg[1],\"tcl\",n2)==0 ){\n      p->mode = MODE_Tcl;\n      sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Space);\n      sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);\n    }else if( c2=='c' && strncmp(azArg[1],\"csv\",n2)==0 ){\n      p->mode = MODE_Csv;\n      sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Comma);\n      sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_CrLf);\n    }else if( c2=='t' && strncmp(azArg[1],\"tabs\",n2)==0 ){\n      p->mode = MODE_List;\n      sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Tab);\n    }else if( c2=='i' && strncmp(azArg[1],\"insert\",n2)==0 ){\n      p->mode = MODE_Insert;\n      set_table_name(p, nArg>=3 ? azArg[2] : \"table\");\n    }else if( c2=='q' && strncmp(azArg[1],\"quote\",n2)==0 ){\n      p->mode = MODE_Quote;\n    }else if( c2=='a' && strncmp(azArg[1],\"ascii\",n2)==0 ){\n      p->mode = MODE_Ascii;\n      sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Unit);\n      sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Record);\n    }else if( nArg==1 ){\n      raw_printf(p->out, \"current output mode: %s\\n\", modeDescr[p->mode]);\n    }else{\n      raw_printf(stderr, \"Error: mode should be one of: \"\n         \"ascii column csv html insert line list quote tabs tcl\\n\");\n      rc = 1;\n    }\n    p->cMode = p->mode;\n  }else\n\n  if( c=='n' && strncmp(azArg[0], \"nullvalue\", n)==0 ){\n    if( nArg==2 ){\n      sqlite3_snprintf(sizeof(p->nullValue), p->nullValue,\n                       \"%.*s\", (int)ArraySize(p->nullValue)-1, azArg[1]);\n    }else{\n      raw_printf(stderr, \"Usage: .nullvalue STRING\\n\");\n      rc = 1;\n    }\n  }else\n\n  if( c=='o' && strncmp(azArg[0], \"open\", n)==0 && n>=2 ){\n    char *zNewFilename;  /* Name of the database file to open */\n    int iName = 1;       /* Index in azArg[] of the filename */\n    int newFlag = 0;     /* True to delete file before opening */\n    /* Close the existing database */\n    session_close_all(p);\n    close_db(p->db);\n    p->db = 0;\n    p->zDbFilename = 0;\n    sqlite3_free(p->zFreeOnClose);\n    p->zFreeOnClose = 0;\n    p->openMode = SHELL_OPEN_UNSPEC;\n    p->szMax = 0;\n    /* Check for command-line arguments */\n    for(iName=1; iName<nArg && azArg[iName][0]=='-'; iName++){\n      const char *z = azArg[iName];\n      if( optionMatch(z,\"new\") ){\n        newFlag = 1;\n#ifdef SQLITE_HAVE_ZLIB\n      }else if( optionMatch(z, \"zip\") ){\n        p->openMode = SHELL_OPEN_ZIPFILE;\n#endif\n      }else if( optionMatch(z, \"append\") ){\n        p->openMode = SHELL_OPEN_APPENDVFS;\n      }else if( optionMatch(z, \"readonly\") ){\n        p->openMode = SHELL_OPEN_READONLY;\n#ifdef SQLITE_ENABLE_DESERIALIZE\n      }else if( optionMatch(z, \"deserialize\") ){\n        p->openMode = SHELL_OPEN_DESERIALIZE;\n      }else if( optionMatch(z, \"hexdb\") ){\n        p->openMode = SHELL_OPEN_HEXDB;\n      }else if( optionMatch(z, \"maxsize\") && iName+1<nArg ){\n        p->szMax = integerValue(azArg[++iName]);\n#endif /* SQLITE_ENABLE_DESERIALIZE */\n      }else if( z[0]=='-' ){\n        utf8_printf(stderr, \"unknown option: %s\\n\", z);\n        rc = 1;\n        goto meta_command_exit;\n      }\n    }\n    /* If a filename is specified, try to open it first */\n    zNewFilename = nArg>iName ? sqlite3_mprintf(\"%s\", azArg[iName]) : 0;\n    if( zNewFilename || p->openMode==SHELL_OPEN_HEXDB ){\n      if( newFlag ) shellDeleteFile(zNewFilename);\n      p->zDbFilename = zNewFilename;\n      open_db(p, OPEN_DB_KEEPALIVE);\n      if( p->db==0 ){\n        utf8_printf(stderr, \"Error: cannot open '%s'\\n\", zNewFilename);\n        sqlite3_free(zNewFilename);\n      }else{\n        p->zFreeOnClose = zNewFilename;\n      }\n    }\n    if( p->db==0 ){\n      /* As a fall-back open a TEMP database */\n      p->zDbFilename = 0;\n      open_db(p, 0);\n    }\n  }else\n\n  if( (c=='o'\n        && (strncmp(azArg[0], \"output\", n)==0||strncmp(azArg[0], \"once\", n)==0))\n   || (c=='e' && n==5 && strcmp(azArg[0],\"excel\")==0)\n  ){\n    const char *zFile = nArg>=2 ? azArg[1] : \"stdout\";\n    int bTxtMode = 0;\n    if( azArg[0][0]=='e' ){\n      /* Transform the \".excel\" command into \".once -x\" */\n      nArg = 2;\n      azArg[0] = \"once\";\n      zFile = azArg[1] = \"-x\";\n      n = 4;\n    }\n    if( nArg>2 ){\n      utf8_printf(stderr, \"Usage: .%s [-e|-x|FILE]\\n\", azArg[0]);\n      rc = 1;\n      goto meta_command_exit;\n    }\n    if( n>1 && strncmp(azArg[0], \"once\", n)==0 ){\n      if( nArg<2 ){\n        raw_printf(stderr, \"Usage: .once (-e|-x|FILE)\\n\");\n        rc = 1;\n        goto meta_command_exit;\n      }\n      p->outCount = 2;\n    }else{\n      p->outCount = 0;\n    }\n    output_reset(p);\n    if( zFile[0]=='-' && zFile[1]=='-' ) zFile++;\n#ifndef SQLITE_NOHAVE_SYSTEM\n    if( strcmp(zFile, \"-e\")==0 || strcmp(zFile, \"-x\")==0 ){\n      p->doXdgOpen = 1;\n      outputModePush(p);\n      if( zFile[1]=='x' ){\n        newTempFile(p, \"csv\");\n        p->mode = MODE_Csv;\n        sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator, SEP_Comma);\n        sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_CrLf);\n      }else{\n        newTempFile(p, \"txt\");\n        bTxtMode = 1;\n      }\n      zFile = p->zTempFile;\n    }\n#endif /* SQLITE_NOHAVE_SYSTEM */\n    if( zFile[0]=='|' ){\n#ifdef SQLITE_OMIT_POPEN\n      raw_printf(stderr, \"Error: pipes are not supported in this OS\\n\");\n      rc = 1;\n      p->out = stdout;\n#else\n      p->out = popen(zFile + 1, \"w\");\n      if( p->out==0 ){\n        utf8_printf(stderr,\"Error: cannot open pipe \\\"%s\\\"\\n\", zFile + 1);\n        p->out = stdout;\n        rc = 1;\n      }else{\n        sqlite3_snprintf(sizeof(p->outfile), p->outfile, \"%s\", zFile);\n      }\n#endif\n    }else{\n      p->out = output_file_open(zFile, bTxtMode);\n      if( p->out==0 ){\n        if( strcmp(zFile,\"off\")!=0 ){\n          utf8_printf(stderr,\"Error: cannot write to \\\"%s\\\"\\n\", zFile);\n        }\n        p->out = stdout;\n        rc = 1;\n      } else {\n        sqlite3_snprintf(sizeof(p->outfile), p->outfile, \"%s\", zFile);\n      }\n    }\n  }else\n\n  if( c=='p' && n>=3 && strncmp(azArg[0], \"print\", n)==0 ){\n    int i;\n    for(i=1; i<nArg; i++){\n      if( i>1 ) raw_printf(p->out, \" \");\n      utf8_printf(p->out, \"%s\", azArg[i]);\n    }\n    raw_printf(p->out, \"\\n\");\n  }else\n\n#ifndef SQLITE_OMIT_PROGRESS_CALLBACK\n  if( c=='p' && n>=3 && strncmp(azArg[0], \"progress\", n)==0 ){\n    int i;\n    int nn = 0;\n    p->flgProgress = 0;\n    p->mxProgress = 0;\n    p->nProgress = 0;\n    for(i=1; i<nArg; i++){\n      const char *z = azArg[i];\n      if( z[0]=='-' ){\n        z++;\n        if( z[0]=='-' ) z++;\n        if( strcmp(z,\"quiet\")==0 || strcmp(z,\"q\")==0 ){\n          p->flgProgress |= SHELL_PROGRESS_QUIET;\n          continue;\n        }\n        if( strcmp(z,\"reset\")==0 ){\n          p->flgProgress |= SHELL_PROGRESS_RESET;\n          continue;\n        }\n        if( strcmp(z,\"once\")==0 ){\n          p->flgProgress |= SHELL_PROGRESS_ONCE;\n          continue;\n        }\n        if( strcmp(z,\"limit\")==0 ){\n          if( i+1>=nArg ){\n            utf8_printf(stderr, \"Error: missing argument on --limit\\n\");\n            rc = 1;\n            goto meta_command_exit;\n          }else{\n            p->mxProgress = (int)integerValue(azArg[++i]);\n          }\n          continue;\n        }\n        utf8_printf(stderr, \"Error: unknown option: \\\"%s\\\"\\n\", azArg[i]);\n        rc = 1;\n        goto meta_command_exit;\n      }else{\n        nn = (int)integerValue(z);\n      }\n    }\n    open_db(p, 0);\n    sqlite3_progress_handler(p->db, nn, progress_handler, p);\n  }else\n#endif /* SQLITE_OMIT_PROGRESS_CALLBACK */\n\n  if( c=='p' && strncmp(azArg[0], \"prompt\", n)==0 ){\n    if( nArg >= 2) {\n      strncpy(mainPrompt,azArg[1],(int)ArraySize(mainPrompt)-1);\n    }\n    if( nArg >= 3) {\n      strncpy(continuePrompt,azArg[2],(int)ArraySize(continuePrompt)-1);\n    }\n  }else\n\n  if( c=='q' && strncmp(azArg[0], \"quit\", n)==0 ){\n    rc = 2;\n  }else\n\n  if( c=='r' && n>=3 && strncmp(azArg[0], \"read\", n)==0 ){\n    FILE *inSaved = p->in;\n    int savedLineno = p->lineno;\n    if( nArg!=2 ){\n      raw_printf(stderr, \"Usage: .read FILE\\n\");\n      rc = 1;\n      goto meta_command_exit;\n    }\n    p->in = fopen(azArg[1], \"rb\");\n    if( p->in==0 ){\n      utf8_printf(stderr,\"Error: cannot open \\\"%s\\\"\\n\", azArg[1]);\n      rc = 1;\n    }else{\n      rc = process_input(p);\n      fclose(p->in);\n    }\n    p->in = inSaved;\n    p->lineno = savedLineno;\n  }else\n\n  if( c=='r' && n>=3 && strncmp(azArg[0], \"restore\", n)==0 ){\n    const char *zSrcFile;\n    const char *zDb;\n    sqlite3 *pSrc;\n    sqlite3_backup *pBackup;\n    int nTimeout = 0;\n\n    if( nArg==2 ){\n      zSrcFile = azArg[1];\n      zDb = \"main\";\n    }else if( nArg==3 ){\n      zSrcFile = azArg[2];\n      zDb = azArg[1];\n    }else{\n      raw_printf(stderr, \"Usage: .restore ?DB? FILE\\n\");\n      rc = 1;\n      goto meta_command_exit;\n    }\n    rc = sqlite3_open(zSrcFile, &pSrc);\n    if( rc!=SQLITE_OK ){\n      utf8_printf(stderr, \"Error: cannot open \\\"%s\\\"\\n\", zSrcFile);\n      close_db(pSrc);\n      return 1;\n    }\n    open_db(p, 0);\n    pBackup = sqlite3_backup_init(p->db, zDb, pSrc, \"main\");\n    if( pBackup==0 ){\n      utf8_printf(stderr, \"Error: %s\\n\", sqlite3_errmsg(p->db));\n      close_db(pSrc);\n      return 1;\n    }\n    while( (rc = sqlite3_backup_step(pBackup,100))==SQLITE_OK\n          || rc==SQLITE_BUSY  ){\n      if( rc==SQLITE_BUSY ){\n        if( nTimeout++ >= 3 ) break;\n        sqlite3_sleep(100);\n      }\n    }\n    sqlite3_backup_finish(pBackup);\n    if( rc==SQLITE_DONE ){\n      rc = 0;\n    }else if( rc==SQLITE_BUSY || rc==SQLITE_LOCKED ){\n      raw_printf(stderr, \"Error: source database is busy\\n\");\n      rc = 1;\n    }else{\n      utf8_printf(stderr, \"Error: %s\\n\", sqlite3_errmsg(p->db));\n      rc = 1;\n    }\n    close_db(pSrc);\n  }else\n\n  if( c=='s' && strncmp(azArg[0], \"scanstats\", n)==0 ){\n    if( nArg==2 ){\n      p->scanstatsOn = (u8)booleanValue(azArg[1]);\n#ifndef SQLITE_ENABLE_STMT_SCANSTATUS\n      raw_printf(stderr, \"Warning: .scanstats not available in this build.\\n\");\n#endif\n    }else{\n      raw_printf(stderr, \"Usage: .scanstats on|off\\n\");\n      rc = 1;\n    }\n  }else\n\n  if( c=='s' && strncmp(azArg[0], \"schema\", n)==0 ){\n    ShellText sSelect;\n    ShellState data;\n    char *zErrMsg = 0;\n    const char *zDiv = \"(\";\n    const char *zName = 0;\n    int iSchema = 0;\n    int bDebug = 0;\n    int ii;\n\n    open_db(p, 0);\n    memcpy(&data, p, sizeof(data));\n    data.showHeader = 0;\n    data.cMode = data.mode = MODE_Semi;\n    initText(&sSelect);\n    for(ii=1; ii<nArg; ii++){\n      if( optionMatch(azArg[ii],\"indent\") ){\n        data.cMode = data.mode = MODE_Pretty;\n      }else if( optionMatch(azArg[ii],\"debug\") ){\n        bDebug = 1;\n      }else if( zName==0 ){\n        zName = azArg[ii];\n      }else{\n        raw_printf(stderr, \"Usage: .schema ?--indent? ?LIKE-PATTERN?\\n\");\n        rc = 1;\n        goto meta_command_exit;\n      }\n    }\n    if( zName!=0 ){\n      int isMaster = sqlite3_strlike(zName, \"sqlite_master\", '\\\\')==0;\n      if( isMaster || sqlite3_strlike(zName,\"sqlite_temp_master\", '\\\\')==0 ){\n        char *new_argv[2], *new_colv[2];\n        new_argv[0] = sqlite3_mprintf(\n                      \"CREATE TABLE %s (\\n\"\n                      \"  type text,\\n\"\n                      \"  name text,\\n\"\n                      \"  tbl_name text,\\n\"\n                      \"  rootpage integer,\\n\"\n                      \"  sql text\\n\"\n                      \")\", isMaster ? \"sqlite_master\" : \"sqlite_temp_master\");\n        new_argv[1] = 0;\n        new_colv[0] = \"sql\";\n        new_colv[1] = 0;\n        callback(&data, 1, new_argv, new_colv);\n        sqlite3_free(new_argv[0]);\n      }\n    }\n    if( zDiv ){\n      sqlite3_stmt *pStmt = 0;\n      rc = sqlite3_prepare_v2(p->db, \"SELECT name FROM pragma_database_list\",\n                              -1, &pStmt, 0);\n      if( rc ){\n        utf8_printf(stderr, \"Error: %s\\n\", sqlite3_errmsg(p->db));\n        sqlite3_finalize(pStmt);\n        rc = 1;\n        goto meta_command_exit;\n      }\n      appendText(&sSelect, \"SELECT sql FROM\", 0);\n      iSchema = 0;\n      while( sqlite3_step(pStmt)==SQLITE_ROW ){\n        const char *zDb = (const char*)sqlite3_column_text(pStmt, 0);\n        char zScNum[30];\n        sqlite3_snprintf(sizeof(zScNum), zScNum, \"%d\", ++iSchema);\n        appendText(&sSelect, zDiv, 0);\n        zDiv = \" UNION ALL \";\n        appendText(&sSelect, \"SELECT shell_add_schema(sql,\", 0);\n        if( sqlite3_stricmp(zDb, \"main\")!=0 ){\n          appendText(&sSelect, zDb, '\"');\n        }else{\n          appendText(&sSelect, \"NULL\", 0);\n        }\n        appendText(&sSelect, \",name) AS sql, type, tbl_name, name, rowid,\", 0);\n        appendText(&sSelect, zScNum, 0);\n        appendText(&sSelect, \" AS snum, \", 0);\n        appendText(&sSelect, zDb, '\\'');\n        appendText(&sSelect, \" AS sname FROM \", 0);\n        appendText(&sSelect, zDb, '\"');\n        appendText(&sSelect, \".sqlite_master\", 0);\n      }\n      sqlite3_finalize(pStmt);\n#ifdef SQLITE_INTROSPECTION_PRAGMAS\n      if( zName ){\n        appendText(&sSelect,\n           \" UNION ALL SELECT shell_module_schema(name),\"\n           \" 'table', name, name, name, 9e+99, 'main' FROM pragma_module_list\", 0);\n      }\n#endif\n      appendText(&sSelect, \") WHERE \", 0);\n      if( zName ){\n        char *zQarg = sqlite3_mprintf(\"%Q\", zName);\n        int bGlob = strchr(zName, '*') != 0 || strchr(zName, '?') != 0 ||\n                    strchr(zName, '[') != 0;\n        if( strchr(zName, '.') ){\n          appendText(&sSelect, \"lower(printf('%s.%s',sname,tbl_name))\", 0);\n        }else{\n          appendText(&sSelect, \"lower(tbl_name)\", 0);\n        }\n        appendText(&sSelect, bGlob ? \" GLOB \" : \" LIKE \", 0);\n        appendText(&sSelect, zQarg, 0);\n        if( !bGlob ){\n          appendText(&sSelect, \" ESCAPE '\\\\' \", 0);\n        }\n        appendText(&sSelect, \" AND \", 0);\n        sqlite3_free(zQarg);\n      }\n      appendText(&sSelect, \"type!='meta' AND sql IS NOT NULL\"\n                           \" ORDER BY snum, rowid\", 0);\n      if( bDebug ){\n        utf8_printf(p->out, \"SQL: %s;\\n\", sSelect.z);\n      }else{\n        rc = sqlite3_exec(p->db, sSelect.z, callback, &data, &zErrMsg);\n      }\n      freeText(&sSelect);\n    }\n    if( zErrMsg ){\n      utf8_printf(stderr,\"Error: %s\\n\", zErrMsg);\n      sqlite3_free(zErrMsg);\n      rc = 1;\n    }else if( rc != SQLITE_OK ){\n      raw_printf(stderr,\"Error: querying schema information\\n\");\n      rc = 1;\n    }else{\n      rc = 0;\n    }\n  }else\n\n#if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_SELECTTRACE)\n  if( c=='s' && n==11 && strncmp(azArg[0], \"selecttrace\", n)==0 ){\n    sqlite3SelectTrace = (int)integerValue(azArg[1]);\n  }else\n#endif\n\n#if defined(SQLITE_ENABLE_SESSION)\n  if( c=='s' && strncmp(azArg[0],\"session\",n)==0 && n>=3 ){\n    OpenSession *pSession = &p->aSession[0];\n    char **azCmd = &azArg[1];\n    int iSes = 0;\n    int nCmd = nArg - 1;\n    int i;\n    if( nArg<=1 ) goto session_syntax_error;\n    open_db(p, 0);\n    if( nArg>=3 ){\n      for(iSes=0; iSes<p->nSession; iSes++){\n        if( strcmp(p->aSession[iSes].zName, azArg[1])==0 ) break;\n      }\n      if( iSes<p->nSession ){\n        pSession = &p->aSession[iSes];\n        azCmd++;\n        nCmd--;\n      }else{\n        pSession = &p->aSession[0];\n        iSes = 0;\n      }\n    }\n\n    /* .session attach TABLE\n    ** Invoke the sqlite3session_attach() interface to attach a particular\n    ** table so that it is never filtered.\n    */\n    if( strcmp(azCmd[0],\"attach\")==0 ){\n      if( nCmd!=2 ) goto session_syntax_error;\n      if( pSession->p==0 ){\n        session_not_open:\n        raw_printf(stderr, \"ERROR: No sessions are open\\n\");\n      }else{\n        rc = sqlite3session_attach(pSession->p, azCmd[1]);\n        if( rc ){\n          raw_printf(stderr, \"ERROR: sqlite3session_attach() returns %d\\n\", rc);\n          rc = 0;\n        }\n      }\n    }else\n\n    /* .session changeset FILE\n    ** .session patchset FILE\n    ** Write a changeset or patchset into a file.  The file is overwritten.\n    */\n    if( strcmp(azCmd[0],\"changeset\")==0 || strcmp(azCmd[0],\"patchset\")==0 ){\n      FILE *out = 0;\n      if( nCmd!=2 ) goto session_syntax_error;\n      if( pSession->p==0 ) goto session_not_open;\n      out = fopen(azCmd[1], \"wb\");\n      if( out==0 ){\n        utf8_printf(stderr, \"ERROR: cannot open \\\"%s\\\" for writing\\n\", azCmd[1]);\n      }else{\n        int szChng;\n        void *pChng;\n        if( azCmd[0][0]=='c' ){\n          rc = sqlite3session_changeset(pSession->p, &szChng, &pChng);\n        }else{\n          rc = sqlite3session_patchset(pSession->p, &szChng, &pChng);\n        }\n        if( rc ){\n          printf(\"Error: error code %d\\n\", rc);\n          rc = 0;\n        }\n        if( pChng\n          && fwrite(pChng, szChng, 1, out)!=1 ){\n          raw_printf(stderr, \"ERROR: Failed to write entire %d-byte output\\n\",\n                  szChng);\n        }\n        sqlite3_free(pChng);\n        fclose(out);\n      }\n    }else\n\n    /* .session close\n    ** Close the identified session\n    */\n    if( strcmp(azCmd[0], \"close\")==0 ){\n      if( nCmd!=1 ) goto session_syntax_error;\n      if( p->nSession ){\n        session_close(pSession);\n        p->aSession[iSes] = p->aSession[--p->nSession];\n      }\n    }else\n\n    /* .session enable ?BOOLEAN?\n    ** Query or set the enable flag\n    */\n    if( strcmp(azCmd[0], \"enable\")==0 ){\n      int ii;\n      if( nCmd>2 ) goto session_syntax_error;\n      ii = nCmd==1 ? -1 : booleanValue(azCmd[1]);\n      if( p->nSession ){\n        ii = sqlite3session_enable(pSession->p, ii);\n        utf8_printf(p->out, \"session %s enable flag = %d\\n\",\n                    pSession->zName, ii);\n      }\n    }else\n\n    /* .session filter GLOB ....\n    ** Set a list of GLOB patterns of table names to be excluded.\n    */\n    if( strcmp(azCmd[0], \"filter\")==0 ){\n      int ii, nByte;\n      if( nCmd<2 ) goto session_syntax_error;\n      if( p->nSession ){\n        for(ii=0; ii<pSession->nFilter; ii++){\n          sqlite3_free(pSession->azFilter[ii]);\n        }\n        sqlite3_free(pSession->azFilter);\n        nByte = sizeof(pSession->azFilter[0])*(nCmd-1);\n        pSession->azFilter = sqlite3_malloc( nByte );\n        if( pSession->azFilter==0 ){\n          raw_printf(stderr, \"Error: out or memory\\n\");\n          exit(1);\n        }\n        for(ii=1; ii<nCmd; ii++){\n          pSession->azFilter[ii-1] = sqlite3_mprintf(\"%s\", azCmd[ii]);\n        }\n        pSession->nFilter = ii-1;\n      }\n    }else\n\n    /* .session indirect ?BOOLEAN?\n    ** Query or set the indirect flag\n    */\n    if( strcmp(azCmd[0], \"indirect\")==0 ){\n      int ii;\n      if( nCmd>2 ) goto session_syntax_error;\n      ii = nCmd==1 ? -1 : booleanValue(azCmd[1]);\n      if( p->nSession ){\n        ii = sqlite3session_indirect(pSession->p, ii);\n        utf8_printf(p->out, \"session %s indirect flag = %d\\n\",\n                    pSession->zName, ii);\n      }\n    }else\n\n    /* .session isempty\n    ** Determine if the session is empty\n    */\n    if( strcmp(azCmd[0], \"isempty\")==0 ){\n      int ii;\n      if( nCmd!=1 ) goto session_syntax_error;\n      if( p->nSession ){\n        ii = sqlite3session_isempty(pSession->p);\n        utf8_printf(p->out, \"session %s isempty flag = %d\\n\",\n                    pSession->zName, ii);\n      }\n    }else\n\n    /* .session list\n    ** List all currently open sessions\n    */\n    if( strcmp(azCmd[0],\"list\")==0 ){\n      for(i=0; i<p->nSession; i++){\n        utf8_printf(p->out, \"%d %s\\n\", i, p->aSession[i].zName);\n      }\n    }else\n\n    /* .session open DB NAME\n    ** Open a new session called NAME on the attached database DB.\n    ** DB is normally \"main\".\n    */\n    if( strcmp(azCmd[0],\"open\")==0 ){\n      char *zName;\n      if( nCmd!=3 ) goto session_syntax_error;\n      zName = azCmd[2];\n      if( zName[0]==0 ) goto session_syntax_error;\n      for(i=0; i<p->nSession; i++){\n        if( strcmp(p->aSession[i].zName,zName)==0 ){\n          utf8_printf(stderr, \"Session \\\"%s\\\" already exists\\n\", zName);\n          goto meta_command_exit;\n        }\n      }\n      if( p->nSession>=ArraySize(p->aSession) ){\n        raw_printf(stderr, \"Maximum of %d sessions\\n\", ArraySize(p->aSession));\n        goto meta_command_exit;\n      }\n      pSession = &p->aSession[p->nSession];\n      rc = sqlite3session_create(p->db, azCmd[1], &pSession->p);\n      if( rc ){\n        raw_printf(stderr, \"Cannot open session: error code=%d\\n\", rc);\n        rc = 0;\n        goto meta_command_exit;\n      }\n      pSession->nFilter = 0;\n      sqlite3session_table_filter(pSession->p, session_filter, pSession);\n      p->nSession++;\n      pSession->zName = sqlite3_mprintf(\"%s\", zName);\n    }else\n    /* If no command name matches, show a syntax error */\n    session_syntax_error:\n    showHelp(p->out, \"session\");\n  }else\n#endif\n\n#ifdef SQLITE_DEBUG\n  /* Undocumented commands for internal testing.  Subject to change\n  ** without notice. */\n  if( c=='s' && n>=10 && strncmp(azArg[0], \"selftest-\", 9)==0 ){\n    if( strncmp(azArg[0]+9, \"boolean\", n-9)==0 ){\n      int i, v;\n      for(i=1; i<nArg; i++){\n        v = booleanValue(azArg[i]);\n        utf8_printf(p->out, \"%s: %d 0x%x\\n\", azArg[i], v, v);\n      }\n    }\n    if( strncmp(azArg[0]+9, \"integer\", n-9)==0 ){\n      int i; sqlite3_int64 v;\n      for(i=1; i<nArg; i++){\n        char zBuf[200];\n        v = integerValue(azArg[i]);\n        sqlite3_snprintf(sizeof(zBuf),zBuf,\"%s: %lld 0x%llx\\n\", azArg[i],v,v);\n        utf8_printf(p->out, \"%s\", zBuf);\n      }\n    }\n  }else\n#endif\n\n  if( c=='s' && n>=4 && strncmp(azArg[0],\"selftest\",n)==0 ){\n    int bIsInit = 0;         /* True to initialize the SELFTEST table */\n    int bVerbose = 0;        /* Verbose output */\n    int bSelftestExists;     /* True if SELFTEST already exists */\n    int i, k;                /* Loop counters */\n    int nTest = 0;           /* Number of tests runs */\n    int nErr = 0;            /* Number of errors seen */\n    ShellText str;           /* Answer for a query */\n    sqlite3_stmt *pStmt = 0; /* Query against the SELFTEST table */\n\n    open_db(p,0);\n    for(i=1; i<nArg; i++){\n      const char *z = azArg[i];\n      if( z[0]=='-' && z[1]=='-' ) z++;\n      if( strcmp(z,\"-init\")==0 ){\n        bIsInit = 1;\n      }else\n      if( strcmp(z,\"-v\")==0 ){\n        bVerbose++;\n      }else\n      {\n        utf8_printf(stderr, \"Unknown option \\\"%s\\\" on \\\"%s\\\"\\n\",\n                    azArg[i], azArg[0]);\n        raw_printf(stderr, \"Should be one of: --init -v\\n\");\n        rc = 1;\n        goto meta_command_exit;\n      }\n    }\n    if( sqlite3_table_column_metadata(p->db,\"main\",\"selftest\",0,0,0,0,0,0)\n           != SQLITE_OK ){\n      bSelftestExists = 0;\n    }else{\n      bSelftestExists = 1;\n    }\n    if( bIsInit ){\n      createSelftestTable(p);\n      bSelftestExists = 1;\n    }\n    initText(&str);\n    appendText(&str, \"x\", 0);\n    for(k=bSelftestExists; k>=0; k--){\n      if( k==1 ){\n        rc = sqlite3_prepare_v2(p->db,\n            \"SELECT tno,op,cmd,ans FROM selftest ORDER BY tno\",\n            -1, &pStmt, 0);\n      }else{\n        rc = sqlite3_prepare_v2(p->db,\n          \"VALUES(0,'memo','Missing SELFTEST table - default checks only',''),\"\n          \"      (1,'run','PRAGMA integrity_check','ok')\",\n          -1, &pStmt, 0);\n      }\n      if( rc ){\n        raw_printf(stderr, \"Error querying the selftest table\\n\");\n        rc = 1;\n        sqlite3_finalize(pStmt);\n        goto meta_command_exit;\n      }\n      for(i=1; sqlite3_step(pStmt)==SQLITE_ROW; i++){\n        int tno = sqlite3_column_int(pStmt, 0);\n        const char *zOp = (const char*)sqlite3_column_text(pStmt, 1);\n        const char *zSql = (const char*)sqlite3_column_text(pStmt, 2);\n        const char *zAns = (const char*)sqlite3_column_text(pStmt, 3);\n\n        k = 0;\n        if( bVerbose>0 ){\n          char *zQuote = sqlite3_mprintf(\"%q\", zSql);\n          printf(\"%d: %s %s\\n\", tno, zOp, zSql);\n          sqlite3_free(zQuote);\n        }\n        if( strcmp(zOp,\"memo\")==0 ){\n          utf8_printf(p->out, \"%s\\n\", zSql);\n        }else\n        if( strcmp(zOp,\"run\")==0 ){\n          char *zErrMsg = 0;\n          str.n = 0;\n          str.z[0] = 0;\n          rc = sqlite3_exec(p->db, zSql, captureOutputCallback, &str, &zErrMsg);\n          nTest++;\n          if( bVerbose ){\n            utf8_printf(p->out, \"Result: %s\\n\", str.z);\n          }\n          if( rc || zErrMsg ){\n            nErr++;\n            rc = 1;\n            utf8_printf(p->out, \"%d: error-code-%d: %s\\n\", tno, rc, zErrMsg);\n            sqlite3_free(zErrMsg);\n          }else if( strcmp(zAns,str.z)!=0 ){\n            nErr++;\n            rc = 1;\n            utf8_printf(p->out, \"%d: Expected: [%s]\\n\", tno, zAns);\n            utf8_printf(p->out, \"%d:      Got: [%s]\\n\", tno, str.z);\n          }\n        }else\n        {\n          utf8_printf(stderr,\n            \"Unknown operation \\\"%s\\\" on selftest line %d\\n\", zOp, tno);\n          rc = 1;\n          break;\n        }\n      } /* End loop over rows of content from SELFTEST */\n      sqlite3_finalize(pStmt);\n    } /* End loop over k */\n    freeText(&str);\n    utf8_printf(p->out, \"%d errors out of %d tests\\n\", nErr, nTest);\n  }else\n\n  if( c=='s' && strncmp(azArg[0], \"separator\", n)==0 ){\n    if( nArg<2 || nArg>3 ){\n      raw_printf(stderr, \"Usage: .separator COL ?ROW?\\n\");\n      rc = 1;\n    }\n    if( nArg>=2 ){\n      sqlite3_snprintf(sizeof(p->colSeparator), p->colSeparator,\n                       \"%.*s\", (int)ArraySize(p->colSeparator)-1, azArg[1]);\n    }\n    if( nArg>=3 ){\n      sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator,\n                       \"%.*s\", (int)ArraySize(p->rowSeparator)-1, azArg[2]);\n    }\n  }else\n\n  if( c=='s' && n>=4 && strncmp(azArg[0],\"sha3sum\",n)==0 ){\n    const char *zLike = 0;   /* Which table to checksum. 0 means everything */\n    int i;                   /* Loop counter */\n    int bSchema = 0;         /* Also hash the schema */\n    int bSeparate = 0;       /* Hash each table separately */\n    int iSize = 224;         /* Hash algorithm to use */\n    int bDebug = 0;          /* Only show the query that would have run */\n    sqlite3_stmt *pStmt;     /* For querying tables names */\n    char *zSql;              /* SQL to be run */\n    char *zSep;              /* Separator */\n    ShellText sSql;          /* Complete SQL for the query to run the hash */\n    ShellText sQuery;        /* Set of queries used to read all content */\n    open_db(p, 0);\n    for(i=1; i<nArg; i++){\n      const char *z = azArg[i];\n      if( z[0]=='-' ){\n        z++;\n        if( z[0]=='-' ) z++;\n        if( strcmp(z,\"schema\")==0 ){\n          bSchema = 1;\n        }else\n        if( strcmp(z,\"sha3-224\")==0 || strcmp(z,\"sha3-256\")==0\n         || strcmp(z,\"sha3-384\")==0 || strcmp(z,\"sha3-512\")==0\n        ){\n          iSize = atoi(&z[5]);\n        }else\n        if( strcmp(z,\"debug\")==0 ){\n          bDebug = 1;\n        }else\n        {\n          utf8_printf(stderr, \"Unknown option \\\"%s\\\" on \\\"%s\\\"\\n\",\n                      azArg[i], azArg[0]);\n          raw_printf(stderr, \"Should be one of: --schema\"\n                             \" --sha3-224 --sha3-256 --sha3-384 --sha3-512\\n\");\n          rc = 1;\n          goto meta_command_exit;\n        }\n      }else if( zLike ){\n        raw_printf(stderr, \"Usage: .sha3sum ?OPTIONS? ?LIKE-PATTERN?\\n\");\n        rc = 1;\n        goto meta_command_exit;\n      }else{\n        zLike = z;\n        bSeparate = 1;\n        if( sqlite3_strlike(\"sqlite\\\\_%\", zLike, '\\\\')==0 ) bSchema = 1;\n      }\n    }\n    if( bSchema ){\n      zSql = \"SELECT lower(name) FROM sqlite_master\"\n             \" WHERE type='table' AND coalesce(rootpage,0)>1\"\n             \" UNION ALL SELECT 'sqlite_master'\"\n             \" ORDER BY 1 collate nocase\";\n    }else{\n      zSql = \"SELECT lower(name) FROM sqlite_master\"\n             \" WHERE type='table' AND coalesce(rootpage,0)>1\"\n             \" AND name NOT LIKE 'sqlite_%'\"\n             \" ORDER BY 1 collate nocase\";\n    }\n    sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);\n    initText(&sQuery);\n    initText(&sSql);\n    appendText(&sSql, \"WITH [sha3sum$query](a,b) AS(\",0);\n    zSep = \"VALUES(\";\n    while( SQLITE_ROW==sqlite3_step(pStmt) ){\n      const char *zTab = (const char*)sqlite3_column_text(pStmt,0);\n      if( zLike && sqlite3_strlike(zLike, zTab, 0)!=0 ) continue;\n      if( strncmp(zTab, \"sqlite_\",7)!=0 ){\n        appendText(&sQuery,\"SELECT * FROM \", 0);\n        appendText(&sQuery,zTab,'\"');\n        appendText(&sQuery,\" NOT INDEXED;\", 0);\n      }else if( strcmp(zTab, \"sqlite_master\")==0 ){\n        appendText(&sQuery,\"SELECT type,name,tbl_name,sql FROM sqlite_master\"\n                           \" ORDER BY name;\", 0);\n      }else if( strcmp(zTab, \"sqlite_sequence\")==0 ){\n        appendText(&sQuery,\"SELECT name,seq FROM sqlite_sequence\"\n                           \" ORDER BY name;\", 0);\n      }else if( strcmp(zTab, \"sqlite_stat1\")==0 ){\n        appendText(&sQuery,\"SELECT tbl,idx,stat FROM sqlite_stat1\"\n                           \" ORDER BY tbl,idx;\", 0);\n      }else if( strcmp(zTab, \"sqlite_stat3\")==0\n             || strcmp(zTab, \"sqlite_stat4\")==0 ){\n        appendText(&sQuery, \"SELECT * FROM \", 0);\n        appendText(&sQuery, zTab, 0);\n        appendText(&sQuery, \" ORDER BY tbl, idx, rowid;\\n\", 0);\n      }\n      appendText(&sSql, zSep, 0);\n      appendText(&sSql, sQuery.z, '\\'');\n      sQuery.n = 0;\n      appendText(&sSql, \",\", 0);\n      appendText(&sSql, zTab, '\\'');\n      zSep = \"),(\";\n    }\n    sqlite3_finalize(pStmt);\n    if( bSeparate ){\n      zSql = sqlite3_mprintf(\n          \"%s))\"\n          \" SELECT lower(hex(sha3_query(a,%d))) AS hash, b AS label\"\n          \"   FROM [sha3sum$query]\",\n          sSql.z, iSize);\n    }else{\n      zSql = sqlite3_mprintf(\n          \"%s))\"\n          \" SELECT lower(hex(sha3_query(group_concat(a,''),%d))) AS hash\"\n          \"   FROM [sha3sum$query]\",\n          sSql.z, iSize);\n    }\n    freeText(&sQuery);\n    freeText(&sSql);\n    if( bDebug ){\n      utf8_printf(p->out, \"%s\\n\", zSql);\n    }else{\n      shell_exec(p, zSql, 0);\n    }\n    sqlite3_free(zSql);\n  }else\n\n#ifndef SQLITE_NOHAVE_SYSTEM\n  if( c=='s'\n   && (strncmp(azArg[0], \"shell\", n)==0 || strncmp(azArg[0],\"system\",n)==0)\n  ){\n    char *zCmd;\n    int i, x;\n    if( nArg<2 ){\n      raw_printf(stderr, \"Usage: .system COMMAND\\n\");\n      rc = 1;\n      goto meta_command_exit;\n    }\n    zCmd = sqlite3_mprintf(strchr(azArg[1],' ')==0?\"%s\":\"\\\"%s\\\"\", azArg[1]);\n    for(i=2; i<nArg; i++){\n      zCmd = sqlite3_mprintf(strchr(azArg[i],' ')==0?\"%z %s\":\"%z \\\"%s\\\"\",\n                             zCmd, azArg[i]);\n    }\n    x = system(zCmd);\n    sqlite3_free(zCmd);\n    if( x ) raw_printf(stderr, \"System command returns %d\\n\", x);\n  }else\n#endif /* !defined(SQLITE_NOHAVE_SYSTEM) */\n\n  if( c=='s' && strncmp(azArg[0], \"show\", n)==0 ){\n    static const char *azBool[] = { \"off\", \"on\", \"trigger\", \"full\"};\n    int i;\n    if( nArg!=1 ){\n      raw_printf(stderr, \"Usage: .show\\n\");\n      rc = 1;\n      goto meta_command_exit;\n    }\n    utf8_printf(p->out, \"%12.12s: %s\\n\",\"echo\",\n                                  azBool[ShellHasFlag(p, SHFLG_Echo)]);\n    utf8_printf(p->out, \"%12.12s: %s\\n\",\"eqp\", azBool[p->autoEQP&3]);\n    utf8_printf(p->out, \"%12.12s: %s\\n\",\"explain\",\n         p->mode==MODE_Explain ? \"on\" : p->autoExplain ? \"auto\" : \"off\");\n    utf8_printf(p->out,\"%12.12s: %s\\n\",\"headers\", azBool[p->showHeader!=0]);\n    utf8_printf(p->out, \"%12.12s: %s\\n\",\"mode\", modeDescr[p->mode]);\n    utf8_printf(p->out, \"%12.12s: \", \"nullvalue\");\n      output_c_string(p->out, p->nullValue);\n      raw_printf(p->out, \"\\n\");\n    utf8_printf(p->out,\"%12.12s: %s\\n\",\"output\",\n            strlen30(p->outfile) ? p->outfile : \"stdout\");\n    utf8_printf(p->out,\"%12.12s: \", \"colseparator\");\n      output_c_string(p->out, p->colSeparator);\n      raw_printf(p->out, \"\\n\");\n    utf8_printf(p->out,\"%12.12s: \", \"rowseparator\");\n      output_c_string(p->out, p->rowSeparator);\n      raw_printf(p->out, \"\\n\");\n    utf8_printf(p->out, \"%12.12s: %s\\n\",\"stats\", azBool[p->statsOn!=0]);\n    utf8_printf(p->out, \"%12.12s: \", \"width\");\n    for (i=0;i<(int)ArraySize(p->colWidth) && p->colWidth[i] != 0;i++) {\n      raw_printf(p->out, \"%d \", p->colWidth[i]);\n    }\n    raw_printf(p->out, \"\\n\");\n    utf8_printf(p->out, \"%12.12s: %s\\n\", \"filename\",\n                p->zDbFilename ? p->zDbFilename : \"\");\n  }else\n\n  if( c=='s' && strncmp(azArg[0], \"stats\", n)==0 ){\n    if( nArg==2 ){\n      p->statsOn = (u8)booleanValue(azArg[1]);\n    }else if( nArg==1 ){\n      display_stats(p->db, p, 0);\n    }else{\n      raw_printf(stderr, \"Usage: .stats ?on|off?\\n\");\n      rc = 1;\n    }\n  }else\n\n  if( (c=='t' && n>1 && strncmp(azArg[0], \"tables\", n)==0)\n   || (c=='i' && (strncmp(azArg[0], \"indices\", n)==0\n                 || strncmp(azArg[0], \"indexes\", n)==0) )\n  ){\n    sqlite3_stmt *pStmt;\n    char **azResult;\n    int nRow, nAlloc;\n    int ii;\n    ShellText s;\n    initText(&s);\n    open_db(p, 0);\n    rc = sqlite3_prepare_v2(p->db, \"PRAGMA database_list\", -1, &pStmt, 0);\n    if( rc ){\n      sqlite3_finalize(pStmt);\n      return shellDatabaseError(p->db);\n    }\n\n    if( nArg>2 && c=='i' ){\n      /* It is an historical accident that the .indexes command shows an error\n      ** when called with the wrong number of arguments whereas the .tables\n      ** command does not. */\n      raw_printf(stderr, \"Usage: .indexes ?LIKE-PATTERN?\\n\");\n      rc = 1;\n      sqlite3_finalize(pStmt);\n      goto meta_command_exit;\n    }\n    for(ii=0; sqlite3_step(pStmt)==SQLITE_ROW; ii++){\n      const char *zDbName = (const char*)sqlite3_column_text(pStmt, 1);\n      if( zDbName==0 ) continue;\n      if( s.z && s.z[0] ) appendText(&s, \" UNION ALL \", 0);\n      if( sqlite3_stricmp(zDbName, \"main\")==0 ){\n        appendText(&s, \"SELECT name FROM \", 0);\n      }else{\n        appendText(&s, \"SELECT \", 0);\n        appendText(&s, zDbName, '\\'');\n        appendText(&s, \"||'.'||name FROM \", 0);\n      }\n      appendText(&s, zDbName, '\"');\n      appendText(&s, \".sqlite_master \", 0);\n      if( c=='t' ){\n        appendText(&s,\" WHERE type IN ('table','view')\"\n                      \"   AND name NOT LIKE 'sqlite_%'\"\n                      \"   AND name LIKE ?1\", 0);\n      }else{\n        appendText(&s,\" WHERE type='index'\"\n                      \"   AND tbl_name LIKE ?1\", 0);\n      }\n    }\n    rc = sqlite3_finalize(pStmt);\n    appendText(&s, \" ORDER BY 1\", 0);\n    rc = sqlite3_prepare_v2(p->db, s.z, -1, &pStmt, 0);\n    freeText(&s);\n    if( rc ) return shellDatabaseError(p->db);\n\n    /* Run the SQL statement prepared by the above block. Store the results\n    ** as an array of nul-terminated strings in azResult[].  */\n    nRow = nAlloc = 0;\n    azResult = 0;\n    if( nArg>1 ){\n      sqlite3_bind_text(pStmt, 1, azArg[1], -1, SQLITE_TRANSIENT);\n    }else{\n      sqlite3_bind_text(pStmt, 1, \"%\", -1, SQLITE_STATIC);\n    }\n    while( sqlite3_step(pStmt)==SQLITE_ROW ){\n      if( nRow>=nAlloc ){\n        char **azNew;\n        int n2 = nAlloc*2 + 10;\n        azNew = sqlite3_realloc64(azResult, sizeof(azResult[0])*n2);\n        if( azNew==0 ) shell_out_of_memory();\n        nAlloc = n2;\n        azResult = azNew;\n      }\n      azResult[nRow] = sqlite3_mprintf(\"%s\", sqlite3_column_text(pStmt, 0));\n      if( 0==azResult[nRow] ) shell_out_of_memory();\n      nRow++;\n    }\n    if( sqlite3_finalize(pStmt)!=SQLITE_OK ){\n      rc = shellDatabaseError(p->db);\n    }\n\n    /* Pretty-print the contents of array azResult[] to the output */\n    if( rc==0 && nRow>0 ){\n      int len, maxlen = 0;\n      int i, j;\n      int nPrintCol, nPrintRow;\n      for(i=0; i<nRow; i++){\n        len = strlen30(azResult[i]);\n        if( len>maxlen ) maxlen = len;\n      }\n      nPrintCol = 80/(maxlen+2);\n      if( nPrintCol<1 ) nPrintCol = 1;\n      nPrintRow = (nRow + nPrintCol - 1)/nPrintCol;\n      for(i=0; i<nPrintRow; i++){\n        for(j=i; j<nRow; j+=nPrintRow){\n          char *zSp = j<nPrintRow ? \"\" : \"  \";\n          utf8_printf(p->out, \"%s%-*s\", zSp, maxlen,\n                      azResult[j] ? azResult[j]:\"\");\n        }\n        raw_printf(p->out, \"\\n\");\n      }\n    }\n\n    for(ii=0; ii<nRow; ii++) sqlite3_free(azResult[ii]);\n    sqlite3_free(azResult);\n  }else\n\n  /* Begin redirecting output to the file \"testcase-out.txt\" */\n  if( c=='t' && strcmp(azArg[0],\"testcase\")==0 ){\n    output_reset(p);\n    p->out = output_file_open(\"testcase-out.txt\", 0);\n    if( p->out==0 ){\n      raw_printf(stderr, \"Error: cannot open 'testcase-out.txt'\\n\");\n    }\n    if( nArg>=2 ){\n      sqlite3_snprintf(sizeof(p->zTestcase), p->zTestcase, \"%s\", azArg[1]);\n    }else{\n      sqlite3_snprintf(sizeof(p->zTestcase), p->zTestcase, \"?\");\n    }\n  }else\n\n#ifndef SQLITE_UNTESTABLE\n  if( c=='t' && n>=8 && strncmp(azArg[0], \"testctrl\", n)==0 ){\n    static const struct {\n       const char *zCtrlName;   /* Name of a test-control option */\n       int ctrlCode;            /* Integer code for that option */\n       const char *zUsage;      /* Usage notes */\n    } aCtrl[] = {\n      { \"always\",             SQLITE_TESTCTRL_ALWAYS,        \"BOOLEAN\"            },\n      { \"assert\",             SQLITE_TESTCTRL_ASSERT,        \"BOOLEAN\"            },\n    /*{ \"benign_malloc_hooks\",SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS, \"\"          },*/\n    /*{ \"bitvec_test\",        SQLITE_TESTCTRL_BITVEC_TEST,   \"\"                },*/\n      { \"byteorder\",          SQLITE_TESTCTRL_BYTEORDER,     \"\"                   },\n    /*{ \"fault_install\",      SQLITE_TESTCTRL_FAULT_INSTALL, \"\"                }, */\n      { \"imposter\",           SQLITE_TESTCTRL_IMPOSTER,   \"SCHEMA ON/OFF ROOTPAGE\"},\n      { \"internal_functions\", SQLITE_TESTCTRL_INTERNAL_FUNCTIONS, \"BOOLEAN\"       },\n      { \"localtime_fault\",    SQLITE_TESTCTRL_LOCALTIME_FAULT,\"BOOLEAN\"           },\n      { \"never_corrupt\",      SQLITE_TESTCTRL_NEVER_CORRUPT, \"BOOLEAN\"            },\n      { \"optimizations\",      SQLITE_TESTCTRL_OPTIMIZATIONS, \"DISABLE-MASK\"       },\n#ifdef YYCOVERAGE\n      { \"parser_coverage\",    SQLITE_TESTCTRL_PARSER_COVERAGE, \"\"                 },\n#endif\n      { \"pending_byte\",       SQLITE_TESTCTRL_PENDING_BYTE,  \"OFFSET  \"           },\n      { \"prng_reset\",         SQLITE_TESTCTRL_PRNG_RESET,    \"\"                   },\n      { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"                   },\n      { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"                   },\n      { \"reserve\",            SQLITE_TESTCTRL_RESERVE,       \"BYTES-OF-RESERVE\"   },\n    };\n    int testctrl = -1;\n    int iCtrl = -1;\n    int rc2 = 0;    /* 0: usage.  1: %d  2: %x  3: no-output */\n    int isOk = 0;\n    int i, n2;\n    const char *zCmd = 0;\n\n    open_db(p, 0);\n    zCmd = nArg>=2 ? azArg[1] : \"help\";\n\n    /* The argument can optionally begin with \"-\" or \"--\" */\n    if( zCmd[0]=='-' && zCmd[1] ){\n      zCmd++;\n      if( zCmd[0]=='-' && zCmd[1] ) zCmd++;\n    }\n\n    /* --help lists all test-controls */\n    if( strcmp(zCmd,\"help\")==0 ){\n      utf8_printf(p->out, \"Available test-controls:\\n\");\n      for(i=0; i<ArraySize(aCtrl); i++){\n        utf8_printf(p->out, \"  .testctrl %s %s\\n\",\n                    aCtrl[i].zCtrlName, aCtrl[i].zUsage);\n      }\n      rc = 1;\n      goto meta_command_exit;\n    }\n\n    /* convert testctrl text option to value. allow any unique prefix\n    ** of the option name, or a numerical value. */\n    n2 = strlen30(zCmd);\n    for(i=0; i<ArraySize(aCtrl); i++){\n      if( strncmp(zCmd, aCtrl[i].zCtrlName, n2)==0 ){\n        if( testctrl<0 ){\n          testctrl = aCtrl[i].ctrlCode;\n          iCtrl = i;\n        }else{\n          utf8_printf(stderr, \"Error: ambiguous test-control: \\\"%s\\\"\\n\"\n                              \"Use \\\".testctrl --help\\\" for help\\n\", zCmd);\n          rc = 1;\n          goto meta_command_exit;\n        }\n      }\n    }\n    if( testctrl<0 ){\n      utf8_printf(stderr,\"Error: unknown test-control: %s\\n\"\n                         \"Use \\\".testctrl --help\\\" for help\\n\", zCmd);\n    }else{\n      switch(testctrl){\n\n        /* sqlite3_test_control(int, db, int) */\n        case SQLITE_TESTCTRL_OPTIMIZATIONS:\n        case SQLITE_TESTCTRL_RESERVE:\n          if( nArg==3 ){\n            int opt = (int)strtol(azArg[2], 0, 0);\n            rc2 = sqlite3_test_control(testctrl, p->db, opt);\n            isOk = 3;\n          }\n          break;\n\n        /* sqlite3_test_control(int) */\n        case SQLITE_TESTCTRL_PRNG_SAVE:\n        case SQLITE_TESTCTRL_PRNG_RESTORE:\n        case SQLITE_TESTCTRL_PRNG_RESET:\n        case SQLITE_TESTCTRL_BYTEORDER:\n          if( nArg==2 ){\n            rc2 = sqlite3_test_control(testctrl);\n            isOk = testctrl==SQLITE_TESTCTRL_BYTEORDER ? 1 : 3;\n          }\n          break;\n\n        /* sqlite3_test_control(int, uint) */\n        case SQLITE_TESTCTRL_PENDING_BYTE:\n          if( nArg==3 ){\n            unsigned int opt = (unsigned int)integerValue(azArg[2]);\n            rc2 = sqlite3_test_control(testctrl, opt);\n            isOk = 3;\n          }\n          break;\n\n        /* sqlite3_test_control(int, int) */\n        case SQLITE_TESTCTRL_ASSERT:\n        case SQLITE_TESTCTRL_ALWAYS:\n        case SQLITE_TESTCTRL_INTERNAL_FUNCTIONS:\n          if( nArg==3 ){\n            int opt = booleanValue(azArg[2]);\n            rc2 = sqlite3_test_control(testctrl, opt);\n            isOk = 1;\n          }\n          break;\n\n        /* sqlite3_test_control(int, int) */\n        case SQLITE_TESTCTRL_LOCALTIME_FAULT:\n        case SQLITE_TESTCTRL_NEVER_CORRUPT:\n          if( nArg==3 ){\n            int opt = booleanValue(azArg[2]);\n            rc2 = sqlite3_test_control(testctrl, opt);\n            isOk = 3;\n          }\n          break;\n\n        case SQLITE_TESTCTRL_IMPOSTER:\n          if( nArg==5 ){\n            rc2 = sqlite3_test_control(testctrl, p->db,\n                          azArg[2],\n                          integerValue(azArg[3]),\n                          integerValue(azArg[4]));\n            isOk = 3;\n          }\n          break;\n\n#ifdef YYCOVERAGE\n        case SQLITE_TESTCTRL_PARSER_COVERAGE:\n          if( nArg==2 ){\n            sqlite3_test_control(testctrl, p->out);\n            isOk = 3;\n          }\n#endif\n      }\n    }\n    if( isOk==0 && iCtrl>=0 ){\n      utf8_printf(p->out, \"Usage: .testctrl %s %s\\n\", zCmd, aCtrl[iCtrl].zUsage);\n      rc = 1;\n    }else if( isOk==1 ){\n      raw_printf(p->out, \"%d\\n\", rc2);\n    }else if( isOk==2 ){\n      raw_printf(p->out, \"0x%08x\\n\", rc2);\n    }\n  }else\n#endif /* !defined(SQLITE_UNTESTABLE) */\n\n  if( c=='t' && n>4 && strncmp(azArg[0], \"timeout\", n)==0 ){\n    open_db(p, 0);\n    sqlite3_busy_timeout(p->db, nArg>=2 ? (int)integerValue(azArg[1]) : 0);\n  }else\n\n  if( c=='t' && n>=5 && strncmp(azArg[0], \"timer\", n)==0 ){\n    if( nArg==2 ){\n      enableTimer = booleanValue(azArg[1]);\n      if( enableTimer && !HAS_TIMER ){\n        raw_printf(stderr, \"Error: timer not available on this system.\\n\");\n        enableTimer = 0;\n      }\n    }else{\n      raw_printf(stderr, \"Usage: .timer on|off\\n\");\n      rc = 1;\n    }\n  }else\n\n#ifndef SQLITE_OMIT_TRACE\n  if( c=='t' && strncmp(azArg[0], \"trace\", n)==0 ){\n    int mType = 0;\n    int jj;\n    open_db(p, 0);\n    for(jj=1; jj<nArg; jj++){\n      const char *z = azArg[jj];\n      if( z[0]=='-' ){\n        if( optionMatch(z, \"expanded\") ){\n          p->eTraceType = SHELL_TRACE_EXPANDED;\n        }\n#ifdef SQLITE_ENABLE_NORMALIZE\n        else if( optionMatch(z, \"normalized\") ){\n          p->eTraceType = SHELL_TRACE_NORMALIZED;\n        }\n#endif\n        else if( optionMatch(z, \"plain\") ){\n          p->eTraceType = SHELL_TRACE_PLAIN;\n        }\n        else if( optionMatch(z, \"profile\") ){\n          mType |= SQLITE_TRACE_PROFILE;\n        }\n        else if( optionMatch(z, \"row\") ){\n          mType |= SQLITE_TRACE_ROW;\n        }\n        else if( optionMatch(z, \"stmt\") ){\n          mType |= SQLITE_TRACE_STMT;\n        }\n        else if( optionMatch(z, \"close\") ){\n          mType |= SQLITE_TRACE_CLOSE;\n        }\n        else {\n          raw_printf(stderr, \"Unknown option \\\"%s\\\" on \\\".trace\\\"\\n\", z);\n          rc = 1;\n          goto meta_command_exit;\n        }\n      }else{\n        output_file_close(p->traceOut);\n        p->traceOut = output_file_open(azArg[1], 0);\n      }\n    }\n    if( p->traceOut==0 ){\n      sqlite3_trace_v2(p->db, 0, 0, 0);\n    }else{\n      if( mType==0 ) mType = SQLITE_TRACE_STMT;\n      sqlite3_trace_v2(p->db, mType, sql_trace_callback, p);\n    }\n  }else\n#endif /* !defined(SQLITE_OMIT_TRACE) */\n\n#if SQLITE_USER_AUTHENTICATION\n  if( c=='u' && strncmp(azArg[0], \"user\", n)==0 ){\n    if( nArg<2 ){\n      raw_printf(stderr, \"Usage: .user SUBCOMMAND ...\\n\");\n      rc = 1;\n      goto meta_command_exit;\n    }\n    open_db(p, 0);\n    if( strcmp(azArg[1],\"login\")==0 ){\n      if( nArg!=4 ){\n        raw_printf(stderr, \"Usage: .user login USER PASSWORD\\n\");\n        rc = 1;\n        goto meta_command_exit;\n      }\n      rc = sqlite3_user_authenticate(p->db, azArg[2], azArg[3], strlen30(azArg[3]));\n      if( rc ){\n        utf8_printf(stderr, \"Authentication failed for user %s\\n\", azArg[2]);\n        rc = 1;\n      }\n    }else if( strcmp(azArg[1],\"add\")==0 ){\n      if( nArg!=5 ){\n        raw_printf(stderr, \"Usage: .user add USER PASSWORD ISADMIN\\n\");\n        rc = 1;\n        goto meta_command_exit;\n      }\n      rc = sqlite3_user_add(p->db, azArg[2], azArg[3], strlen30(azArg[3]),\n                            booleanValue(azArg[4]));\n      if( rc ){\n        raw_printf(stderr, \"User-Add failed: %d\\n\", rc);\n        rc = 1;\n      }\n    }else if( strcmp(azArg[1],\"edit\")==0 ){\n      if( nArg!=5 ){\n        raw_printf(stderr, \"Usage: .user edit USER PASSWORD ISADMIN\\n\");\n        rc = 1;\n        goto meta_command_exit;\n      }\n      rc = sqlite3_user_change(p->db, azArg[2], azArg[3], strlen30(azArg[3]),\n                              booleanValue(azArg[4]));\n      if( rc ){\n        raw_printf(stderr, \"User-Edit failed: %d\\n\", rc);\n        rc = 1;\n      }\n    }else if( strcmp(azArg[1],\"delete\")==0 ){\n      if( nArg!=3 ){\n        raw_printf(stderr, \"Usage: .user delete USER\\n\");\n        rc = 1;\n        goto meta_command_exit;\n      }\n      rc = sqlite3_user_delete(p->db, azArg[2]);\n      if( rc ){\n        raw_printf(stderr, \"User-Delete failed: %d\\n\", rc);\n        rc = 1;\n      }\n    }else{\n      raw_printf(stderr, \"Usage: .user login|add|edit|delete ...\\n\");\n      rc = 1;\n      goto meta_command_exit;\n    }\n  }else\n#endif /* SQLITE_USER_AUTHENTICATION */\n\n  if( c=='v' && strncmp(azArg[0], \"version\", n)==0 ){\n    utf8_printf(p->out, \"SQLite %s %s\\n\" /*extra-version-info*/,\n        sqlite3_libversion(), sqlite3_sourceid());\n#if SQLITE_HAVE_ZLIB\n    utf8_printf(p->out, \"zlib version %s\\n\", zlibVersion());\n#endif\n#define CTIMEOPT_VAL_(opt) #opt\n#define CTIMEOPT_VAL(opt) CTIMEOPT_VAL_(opt)\n#if defined(__clang__) && defined(__clang_major__)\n    utf8_printf(p->out, \"clang-\" CTIMEOPT_VAL(__clang_major__) \".\"\n                    CTIMEOPT_VAL(__clang_minor__) \".\"\n                    CTIMEOPT_VAL(__clang_patchlevel__) \"\\n\");\n#elif defined(_MSC_VER)\n    utf8_printf(p->out, \"msvc-\" CTIMEOPT_VAL(_MSC_VER) \"\\n\");\n#elif defined(__GNUC__) && defined(__VERSION__)\n    utf8_printf(p->out, \"gcc-\" __VERSION__ \"\\n\");\n#endif\n  }else\n\n  if( c=='v' && strncmp(azArg[0], \"vfsinfo\", n)==0 ){\n    const char *zDbName = nArg==2 ? azArg[1] : \"main\";\n    sqlite3_vfs *pVfs = 0;\n    if( p->db ){\n      sqlite3_file_control(p->db, zDbName, SQLITE_FCNTL_VFS_POINTER, &pVfs);\n      if( pVfs ){\n        utf8_printf(p->out, \"vfs.zName      = \\\"%s\\\"\\n\", pVfs->zName);\n        raw_printf(p->out, \"vfs.iVersion   = %d\\n\", pVfs->iVersion);\n        raw_printf(p->out, \"vfs.szOsFile   = %d\\n\", pVfs->szOsFile);\n        raw_printf(p->out, \"vfs.mxPathname = %d\\n\", pVfs->mxPathname);\n      }\n    }\n  }else\n\n  if( c=='v' && strncmp(azArg[0], \"vfslist\", n)==0 ){\n    sqlite3_vfs *pVfs;\n    sqlite3_vfs *pCurrent = 0;\n    if( p->db ){\n      sqlite3_file_control(p->db, \"main\", SQLITE_FCNTL_VFS_POINTER, &pCurrent);\n    }\n    for(pVfs=sqlite3_vfs_find(0); pVfs; pVfs=pVfs->pNext){\n      utf8_printf(p->out, \"vfs.zName      = \\\"%s\\\"%s\\n\", pVfs->zName,\n           pVfs==pCurrent ? \"  <--- CURRENT\" : \"\");\n      raw_printf(p->out, \"vfs.iVersion   = %d\\n\", pVfs->iVersion);\n      raw_printf(p->out, \"vfs.szOsFile   = %d\\n\", pVfs->szOsFile);\n      raw_printf(p->out, \"vfs.mxPathname = %d\\n\", pVfs->mxPathname);\n      if( pVfs->pNext ){\n        raw_printf(p->out, \"-----------------------------------\\n\");\n      }\n    }\n  }else\n\n  if( c=='v' && strncmp(azArg[0], \"vfsname\", n)==0 ){\n    const char *zDbName = nArg==2 ? azArg[1] : \"main\";\n    char *zVfsName = 0;\n    if( p->db ){\n      sqlite3_file_control(p->db, zDbName, SQLITE_FCNTL_VFSNAME, &zVfsName);\n      if( zVfsName ){\n        utf8_printf(p->out, \"%s\\n\", zVfsName);\n        sqlite3_free(zVfsName);\n      }\n    }\n  }else\n\n#if defined(SQLITE_DEBUG) && defined(SQLITE_ENABLE_WHERETRACE)\n  if( c=='w' && strncmp(azArg[0], \"wheretrace\", n)==0 ){\n    sqlite3WhereTrace = nArg>=2 ? booleanValue(azArg[1]) : 0xff;\n  }else\n#endif\n\n  if( c=='w' && strncmp(azArg[0], \"width\", n)==0 ){\n    int j;\n    assert( nArg<=ArraySize(azArg) );\n    for(j=1; j<nArg && j<ArraySize(p->colWidth); j++){\n      p->colWidth[j-1] = (int)integerValue(azArg[j]);\n    }\n  }else\n\n  {\n    utf8_printf(stderr, \"Error: unknown command or invalid arguments: \"\n      \" \\\"%s\\\". Enter \\\".help\\\" for help\\n\", azArg[0]);\n    rc = 1;\n  }\n\nmeta_command_exit:\n  if( p->outCount ){\n    p->outCount--;\n    if( p->outCount==0 ) output_reset(p);\n  }\n  return rc;\n}\n\n/*\n** Return TRUE if a semicolon occurs anywhere in the first N characters\n** of string z[].\n*/\nstatic int line_contains_semicolon(const char *z, int N){\n  int i;\n  for(i=0; i<N; i++){  if( z[i]==';' ) return 1; }\n  return 0;\n}\n\n/*\n** Test to see if a line consists entirely of whitespace.\n*/\nstatic int _all_whitespace(const char *z){\n  for(; *z; z++){\n    if( IsSpace(z[0]) ) continue;\n    if( *z=='/' && z[1]=='*' ){\n      z += 2;\n      while( *z && (*z!='*' || z[1]!='/') ){ z++; }\n      if( *z==0 ) return 0;\n      z++;\n      continue;\n    }\n    if( *z=='-' && z[1]=='-' ){\n      z += 2;\n      while( *z && *z!='\\n' ){ z++; }\n      if( *z==0 ) return 1;\n      continue;\n    }\n    return 0;\n  }\n  return 1;\n}\n\n/*\n** Return TRUE if the line typed in is an SQL command terminator other\n** than a semi-colon.  The SQL Server style \"go\" command is understood\n** as is the Oracle \"/\".\n*/\nstatic int line_is_command_terminator(const char *zLine){\n  while( IsSpace(zLine[0]) ){ zLine++; };\n  if( zLine[0]=='/' && _all_whitespace(&zLine[1]) ){\n    return 1;  /* Oracle */\n  }\n  if( ToLower(zLine[0])=='g' && ToLower(zLine[1])=='o'\n         && _all_whitespace(&zLine[2]) ){\n    return 1;  /* SQL Server */\n  }\n  return 0;\n}\n\n/*\n** We need a default sqlite3_complete() implementation to use in case\n** the shell is compiled with SQLITE_OMIT_COMPLETE.  The default assumes\n** any arbitrary text is a complete SQL statement.  This is not very\n** user-friendly, but it does seem to work.\n*/\n#ifdef SQLITE_OMIT_COMPLETE\n#define sqlite3_complete(x) 1\n#endif\n\n/*\n** Return true if zSql is a complete SQL statement.  Return false if it\n** ends in the middle of a string literal or C-style comment.\n*/\nstatic int line_is_complete(char *zSql, int nSql){\n  int rc;\n  if( zSql==0 ) return 1;\n  zSql[nSql] = ';';\n  zSql[nSql+1] = 0;\n  rc = sqlite3_complete(zSql);\n  zSql[nSql] = 0;\n  return rc;\n}\n\n/*\n** Run a single line of SQL.  Return the number of errors.\n*/\nstatic int runOneSqlLine(ShellState *p, char *zSql, FILE *in, int startline){\n  int rc;\n  char *zErrMsg = 0;\n\n  open_db(p, 0);\n  if( ShellHasFlag(p,SHFLG_Backslash) ) resolve_backslashes(zSql);\n  if( p->flgProgress & SHELL_PROGRESS_RESET ) p->nProgress = 0;\n  BEGIN_TIMER;\n  rc = shell_exec(p, zSql, &zErrMsg);\n  END_TIMER;\n  if( rc || zErrMsg ){\n    char zPrefix[100];\n    if( in!=0 || !stdin_is_interactive ){\n      sqlite3_snprintf(sizeof(zPrefix), zPrefix,\n                       \"Error: near line %d:\", startline);\n    }else{\n      sqlite3_snprintf(sizeof(zPrefix), zPrefix, \"Error:\");\n    }\n    if( zErrMsg!=0 ){\n      utf8_printf(stderr, \"%s %s\\n\", zPrefix, zErrMsg);\n      sqlite3_free(zErrMsg);\n      zErrMsg = 0;\n    }else{\n      utf8_printf(stderr, \"%s %s\\n\", zPrefix, sqlite3_errmsg(p->db));\n    }\n    return 1;\n  }else if( ShellHasFlag(p, SHFLG_CountChanges) ){\n    raw_printf(p->out, \"changes: %3d   total_changes: %d\\n\",\n            sqlite3_changes(p->db), sqlite3_total_changes(p->db));\n  }\n  return 0;\n}\n\n\n/*\n** Read input from *in and process it.  If *in==0 then input\n** is interactive - the user is typing it it.  Otherwise, input\n** is coming from a file or device.  A prompt is issued and history\n** is saved only if input is interactive.  An interrupt signal will\n** cause this routine to exit immediately, unless input is interactive.\n**\n** Return the number of errors.\n*/\nstatic int process_input(ShellState *p){\n  char *zLine = 0;          /* A single input line */\n  char *zSql = 0;           /* Accumulated SQL text */\n  int nLine;                /* Length of current line */\n  int nSql = 0;             /* Bytes of zSql[] used */\n  int nAlloc = 0;           /* Allocated zSql[] space */\n  int nSqlPrior = 0;        /* Bytes of zSql[] used by prior line */\n  int rc;                   /* Error code */\n  int errCnt = 0;           /* Number of errors seen */\n  int startline = 0;        /* Line number for start of current input */\n\n  p->lineno = 0;\n  while( errCnt==0 || !bail_on_error || (p->in==0 && stdin_is_interactive) ){\n    fflush(p->out);\n    zLine = one_input_line(p->in, zLine, nSql>0);\n    if( zLine==0 ){\n      /* End of input */\n      if( p->in==0 && stdin_is_interactive ) printf(\"\\n\");\n      break;\n    }\n    if( seenInterrupt ){\n      if( p->in!=0 ) break;\n      seenInterrupt = 0;\n    }\n    p->lineno++;\n    if( nSql==0 && _all_whitespace(zLine) ){\n      if( ShellHasFlag(p, SHFLG_Echo) ) printf(\"%s\\n\", zLine);\n      continue;\n    }\n    if( zLine && (zLine[0]=='.' || zLine[0]=='#') && nSql==0 ){\n      if( ShellHasFlag(p, SHFLG_Echo) ) printf(\"%s\\n\", zLine);\n      if( zLine[0]=='.' ){\n        rc = do_meta_command(zLine, p);\n        if( rc==2 ){ /* exit requested */\n          break;\n        }else if( rc ){\n          errCnt++;\n        }\n      }\n      continue;\n    }\n    if( line_is_command_terminator(zLine) && line_is_complete(zSql, nSql) ){\n      memcpy(zLine,\";\",2);\n    }\n    nLine = strlen30(zLine);\n    if( nSql+nLine+2>=nAlloc ){\n      nAlloc = nSql+nLine+100;\n      zSql = realloc(zSql, nAlloc);\n      if( zSql==0 ) shell_out_of_memory();\n    }\n    nSqlPrior = nSql;\n    if( nSql==0 ){\n      int i;\n      for(i=0; zLine[i] && IsSpace(zLine[i]); i++){}\n      assert( nAlloc>0 && zSql!=0 );\n      memcpy(zSql, zLine+i, nLine+1-i);\n      startline = p->lineno;\n      nSql = nLine-i;\n    }else{\n      zSql[nSql++] = '\\n';\n      memcpy(zSql+nSql, zLine, nLine+1);\n      nSql += nLine;\n    }\n    if( nSql && line_contains_semicolon(&zSql[nSqlPrior], nSql-nSqlPrior)\n                && sqlite3_complete(zSql) ){\n      errCnt += runOneSqlLine(p, zSql, p->in, startline);\n      nSql = 0;\n      if( p->outCount ){\n        output_reset(p);\n        p->outCount = 0;\n      }else{\n        clearTempFile(p);\n      }\n    }else if( nSql && _all_whitespace(zSql) ){\n      if( ShellHasFlag(p, SHFLG_Echo) ) printf(\"%s\\n\", zSql);\n      nSql = 0;\n    }\n  }\n  if( nSql && !_all_whitespace(zSql) ){\n    errCnt += runOneSqlLine(p, zSql, p->in, startline);\n  }\n  free(zSql);\n  free(zLine);\n  return errCnt>0;\n}\n\n/*\n** Return a pathname which is the user's home directory.  A\n** 0 return indicates an error of some kind.\n*/\nstatic char *find_home_dir(int clearFlag){\n  static char *home_dir = NULL;\n  if( clearFlag ){\n    free(home_dir);\n    home_dir = 0;\n    return 0;\n  }\n  if( home_dir ) return home_dir;\n\n#if !defined(_WIN32) && !defined(WIN32) && !defined(_WIN32_WCE) \\\n     && !defined(__RTP__) && !defined(_WRS_KERNEL)\n  {\n    struct passwd *pwent;\n    uid_t uid = getuid();\n    if( (pwent=getpwuid(uid)) != NULL) {\n      home_dir = pwent->pw_dir;\n    }\n  }\n#endif\n\n#if defined(_WIN32_WCE)\n  /* Windows CE (arm-wince-mingw32ce-gcc) does not provide getenv()\n   */\n  home_dir = \"/\";\n#else\n\n#if defined(_WIN32) || defined(WIN32)\n  if (!home_dir) {\n    home_dir = getenv(\"USERPROFILE\");\n  }\n#endif\n\n  if (!home_dir) {\n    home_dir = getenv(\"HOME\");\n  }\n\n#if defined(_WIN32) || defined(WIN32)\n  if (!home_dir) {\n    char *zDrive, *zPath;\n    int n;\n    zDrive = getenv(\"HOMEDRIVE\");\n    zPath = getenv(\"HOMEPATH\");\n    if( zDrive && zPath ){\n      n = strlen30(zDrive) + strlen30(zPath) + 1;\n      home_dir = malloc( n );\n      if( home_dir==0 ) return 0;\n      sqlite3_snprintf(n, home_dir, \"%s%s\", zDrive, zPath);\n      return home_dir;\n    }\n    home_dir = \"c:\\\\\";\n  }\n#endif\n\n#endif /* !_WIN32_WCE */\n\n  if( home_dir ){\n    int n = strlen30(home_dir) + 1;\n    char *z = malloc( n );\n    if( z ) memcpy(z, home_dir, n);\n    home_dir = z;\n  }\n\n  return home_dir;\n}\n\n/*\n** Read input from the file given by sqliterc_override.  Or if that\n** parameter is NULL, take input from ~/.sqliterc\n**\n** Returns the number of errors.\n*/\nstatic void process_sqliterc(\n  ShellState *p,                  /* Configuration data */\n  const char *sqliterc_override   /* Name of config file. NULL to use default */\n){\n  char *home_dir = NULL;\n  const char *sqliterc = sqliterc_override;\n  char *zBuf = 0;\n  FILE *inSaved = p->in;\n  int savedLineno = p->lineno;\n\n  if (sqliterc == NULL) {\n    home_dir = find_home_dir(0);\n    if( home_dir==0 ){\n      raw_printf(stderr, \"-- warning: cannot find home directory;\"\n                      \" cannot read ~/.sqliterc\\n\");\n      return;\n    }\n    zBuf = sqlite3_mprintf(\"%s/.sqliterc\",home_dir);\n    sqliterc = zBuf;\n  }\n  p->in = fopen(sqliterc,\"rb\");\n  if( p->in ){\n    if( stdin_is_interactive ){\n      utf8_printf(stderr,\"-- Loading resources from %s\\n\",sqliterc);\n    }\n    process_input(p);\n    fclose(p->in);\n  }\n  p->in = inSaved;\n  p->lineno = savedLineno;\n  sqlite3_free(zBuf);\n}\n\n/*\n** Show available command line options\n*/\nstatic const char zOptions[] =\n#if defined(SQLITE_HAVE_ZLIB) && !defined(SQLITE_OMIT_VIRTUALTABLE)\n  \"   -A ARGS...           run \\\".archive ARGS\\\" and exit\\n\"\n#endif\n  \"   -append              append the database to the end of the file\\n\"\n  \"   -ascii               set output mode to 'ascii'\\n\"\n  \"   -bail                stop after hitting an error\\n\"\n  \"   -batch               force batch I/O\\n\"\n  \"   -column              set output mode to 'column'\\n\"\n  \"   -cmd COMMAND         run \\\"COMMAND\\\" before reading stdin\\n\"\n  \"   -csv                 set output mode to 'csv'\\n\"\n#if defined(SQLITE_ENABLE_DESERIALIZE)\n  \"   -deserialize         open the database using sqlite3_deserialize()\\n\"\n#endif\n  \"   -echo                print commands before execution\\n\"\n  \"   -init FILENAME       read/process named file\\n\"\n  \"   -[no]header          turn headers on or off\\n\"\n#if defined(SQLITE_ENABLE_MEMSYS3) || defined(SQLITE_ENABLE_MEMSYS5)\n  \"   -heap SIZE           Size of heap for memsys3 or memsys5\\n\"\n#endif\n  \"   -help                show this message\\n\"\n  \"   -html                set output mode to HTML\\n\"\n  \"   -interactive         force interactive I/O\\n\"\n  \"   -line                set output mode to 'line'\\n\"\n  \"   -list                set output mode to 'list'\\n\"\n  \"   -lookaside SIZE N    use N entries of SZ bytes for lookaside memory\\n\"\n#if defined(SQLITE_ENABLE_DESERIALIZE)\n  \"   -maxsize N           maximum size for a --deserialize database\\n\"\n#endif\n  \"   -memtrace            trace all memory allocations and deallocations\\n\"\n  \"   -mmap N              default mmap size set to N\\n\"\n#ifdef SQLITE_ENABLE_MULTIPLEX\n  \"   -multiplex           enable the multiplexor VFS\\n\"\n#endif\n  \"   -newline SEP         set output row separator. Default: '\\\\n'\\n\"\n  \"   -nullvalue TEXT      set text string for NULL values. Default ''\\n\"\n  \"   -pagecache SIZE N    use N slots of SZ bytes each for page cache memory\\n\"\n  \"   -quote               set output mode to 'quote'\\n\"\n  \"   -readonly            open the database read-only\\n\"\n  \"   -separator SEP       set output column separator. Default: '|'\\n\"\n#ifdef SQLITE_ENABLE_SORTER_REFERENCES\n  \"   -sorterref SIZE      sorter references threshold size\\n\"\n#endif\n  \"   -stats               print memory stats before each finalize\\n\"\n  \"   -version             show SQLite version\\n\"\n  \"   -vfs NAME            use NAME as the default VFS\\n\"\n#ifdef SQLITE_ENABLE_VFSTRACE\n  \"   -vfstrace            enable tracing of all VFS calls\\n\"\n#endif\n#ifdef SQLITE_HAVE_ZLIB\n  \"   -zip                 open the file as a ZIP Archive\\n\"\n#endif\n;\nstatic void usage(int showDetail){\n  utf8_printf(stderr,\n      \"Usage: %s [OPTIONS] FILENAME [SQL]\\n\"\n      \"FILENAME is the name of an SQLite database. A new database is created\\n\"\n      \"if the file does not previously exist.\\n\", Argv0);\n  if( showDetail ){\n    utf8_printf(stderr, \"OPTIONS include:\\n%s\", zOptions);\n  }else{\n    raw_printf(stderr, \"Use the -help option for additional information\\n\");\n  }\n  exit(1);\n}\n\n/*\n** Internal check:  Verify that the SQLite is uninitialized.  Print a\n** error message if it is initialized.\n*/\nstatic void verify_uninitialized(void){\n  if( sqlite3_config(-1)==SQLITE_MISUSE ){\n    utf8_printf(stdout, \"WARNING: attempt to configure SQLite after\"\n                        \" initialization.\\n\");\n  }\n}\n\n/*\n** Initialize the state information in data\n*/\nstatic void main_init(ShellState *data) {\n  memset(data, 0, sizeof(*data));\n  data->normalMode = data->cMode = data->mode = MODE_List;\n  data->autoExplain = 1;\n  memcpy(data->colSeparator,SEP_Column, 2);\n  memcpy(data->rowSeparator,SEP_Row, 2);\n  data->showHeader = 0;\n  data->shellFlgs = SHFLG_Lookaside;\n  verify_uninitialized();\n  sqlite3_config(SQLITE_CONFIG_URI, 1);\n  sqlite3_config(SQLITE_CONFIG_LOG, shellLog, data);\n  sqlite3_config(SQLITE_CONFIG_MULTITHREAD);\n  sqlite3_snprintf(sizeof(mainPrompt), mainPrompt,\"sqlite> \");\n  sqlite3_snprintf(sizeof(continuePrompt), continuePrompt,\"   ...> \");\n}\n\n/*\n** Output text to the console in a font that attracts extra attention.\n*/\n#ifdef _WIN32\nstatic void printBold(const char *zText){\n  HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);\n  CONSOLE_SCREEN_BUFFER_INFO defaultScreenInfo;\n  GetConsoleScreenBufferInfo(out, &defaultScreenInfo);\n  SetConsoleTextAttribute(out,\n         FOREGROUND_RED|FOREGROUND_INTENSITY\n  );\n  printf(\"%s\", zText);\n  SetConsoleTextAttribute(out, defaultScreenInfo.wAttributes);\n}\n#else\nstatic void printBold(const char *zText){\n  printf(\"\\033[1m%s\\033[0m\", zText);\n}\n#endif\n\n/*\n** Get the argument to an --option.  Throw an error and die if no argument\n** is available.\n*/\nstatic char *cmdline_option_value(int argc, char **argv, int i){\n  if( i==argc ){\n    utf8_printf(stderr, \"%s: Error: missing argument to %s\\n\",\n            argv[0], argv[argc-1]);\n    exit(1);\n  }\n  return argv[i];\n}\n\n#ifndef SQLITE_SHELL_IS_UTF8\n#  if (defined(_WIN32) || defined(WIN32)) && defined(_MSC_VER)\n#    define SQLITE_SHELL_IS_UTF8          (0)\n#  else\n#    define SQLITE_SHELL_IS_UTF8          (1)\n#  endif\n#endif\n\n#if SQLITE_SHELL_IS_UTF8\nint SQLITE_CDECL main(int argc, char **argv){\n#else\nint SQLITE_CDECL wmain(int argc, wchar_t **wargv){\n  char **argv;\n#endif\n  char *zErrMsg = 0;\n  ShellState data;\n  const char *zInitFile = 0;\n  int i;\n  int rc = 0;\n  int warnInmemoryDb = 0;\n  int readStdin = 1;\n  int nCmd = 0;\n  char **azCmd = 0;\n  const char *zVfs = 0;           /* Value of -vfs command-line option */\n#if !SQLITE_SHELL_IS_UTF8\n  char **argvToFree = 0;\n  int argcToFree = 0;\n#endif\n\n  setBinaryMode(stdin, 0);\n  setvbuf(stderr, 0, _IONBF, 0); /* Make sure stderr is unbuffered */\n  stdin_is_interactive = isatty(0);\n  stdout_is_console = isatty(1);\n\n#if !defined(_WIN32_WCE)\n  if( getenv(\"SQLITE_DEBUG_BREAK\") ){\n    if( isatty(0) && isatty(2) ){\n      fprintf(stderr,\n          \"attach debugger to process %d and press any key to continue.\\n\",\n          GETPID());\n      fgetc(stdin);\n    }else{\n#if defined(_WIN32) || defined(WIN32)\n      DebugBreak();\n#elif defined(SIGTRAP)\n      raise(SIGTRAP);\n#endif\n    }\n  }\n#endif\n\n#if USE_SYSTEM_SQLITE+0!=1\n  if( strncmp(sqlite3_sourceid(),SQLITE_SOURCE_ID,60)!=0 ){\n    utf8_printf(stderr, \"SQLite header and source version mismatch\\n%s\\n%s\\n\",\n            sqlite3_sourceid(), SQLITE_SOURCE_ID);\n    exit(1);\n  }\n#endif\n  main_init(&data);\n\n  /* On Windows, we must translate command-line arguments into UTF-8.\n  ** The SQLite memory allocator subsystem has to be enabled in order to\n  ** do this.  But we want to run an sqlite3_shutdown() afterwards so that\n  ** subsequent sqlite3_config() calls will work.  So copy all results into\n  ** memory that does not come from the SQLite memory allocator.\n  */\n#if !SQLITE_SHELL_IS_UTF8\n  sqlite3_initialize();\n  argvToFree = malloc(sizeof(argv[0])*argc*2);\n  argcToFree = argc;\n  argv = argvToFree + argc;\n  if( argv==0 ) shell_out_of_memory();\n  for(i=0; i<argc; i++){\n    char *z = sqlite3_win32_unicode_to_utf8(wargv[i]);\n    int n;\n    if( z==0 ) shell_out_of_memory();\n    n = (int)strlen(z);\n    argv[i] = malloc( n+1 );\n    if( argv[i]==0 ) shell_out_of_memory();\n    memcpy(argv[i], z, n+1);\n    argvToFree[i] = argv[i];\n    sqlite3_free(z);\n  }\n  sqlite3_shutdown();\n#endif\n\n  assert( argc>=1 && argv && argv[0] );\n  Argv0 = argv[0];\n\n  /* Make sure we have a valid signal handler early, before anything\n  ** else is done.\n  */\n#ifdef SIGINT\n  signal(SIGINT, interrupt_handler);\n#elif (defined(_WIN32) || defined(WIN32)) && !defined(_WIN32_WCE)\n  SetConsoleCtrlHandler(ConsoleCtrlHandler, TRUE);\n#endif\n\n#ifdef SQLITE_SHELL_DBNAME_PROC\n  {\n    /* If the SQLITE_SHELL_DBNAME_PROC macro is defined, then it is the name\n    ** of a C-function that will provide the name of the database file.  Use\n    ** this compile-time option to embed this shell program in larger\n    ** applications. */\n    extern void SQLITE_SHELL_DBNAME_PROC(const char**);\n    SQLITE_SHELL_DBNAME_PROC(&data.zDbFilename);\n    warnInmemoryDb = 0;\n  }\n#endif\n\n  /* Do an initial pass through the command-line argument to locate\n  ** the name of the database file, the name of the initialization file,\n  ** the size of the alternative malloc heap,\n  ** and the first command to execute.\n  */\n  verify_uninitialized();\n  for(i=1; i<argc; i++){\n    char *z;\n    z = argv[i];\n    if( z[0]!='-' ){\n      if( data.zDbFilename==0 ){\n        data.zDbFilename = z;\n      }else{\n        /* Excesss arguments are interpreted as SQL (or dot-commands) and\n        ** mean that nothing is read from stdin */\n        readStdin = 0;\n        nCmd++;\n        azCmd = realloc(azCmd, sizeof(azCmd[0])*nCmd);\n        if( azCmd==0 ) shell_out_of_memory();\n        azCmd[nCmd-1] = z;\n      }\n    }\n    if( z[1]=='-' ) z++;\n    if( strcmp(z,\"-separator\")==0\n     || strcmp(z,\"-nullvalue\")==0\n     || strcmp(z,\"-newline\")==0\n     || strcmp(z,\"-cmd\")==0\n    ){\n      (void)cmdline_option_value(argc, argv, ++i);\n    }else if( strcmp(z,\"-init\")==0 ){\n      zInitFile = cmdline_option_value(argc, argv, ++i);\n    }else if( strcmp(z,\"-batch\")==0 ){\n      /* Need to check for batch mode here to so we can avoid printing\n      ** informational messages (like from process_sqliterc) before\n      ** we do the actual processing of arguments later in a second pass.\n      */\n      stdin_is_interactive = 0;\n    }else if( strcmp(z,\"-heap\")==0 ){\n#if defined(SQLITE_ENABLE_MEMSYS3) || defined(SQLITE_ENABLE_MEMSYS5)\n      const char *zSize;\n      sqlite3_int64 szHeap;\n\n      zSize = cmdline_option_value(argc, argv, ++i);\n      szHeap = integerValue(zSize);\n      if( szHeap>0x7fff0000 ) szHeap = 0x7fff0000;\n      sqlite3_config(SQLITE_CONFIG_HEAP, malloc((int)szHeap), (int)szHeap, 64);\n#else\n      (void)cmdline_option_value(argc, argv, ++i);\n#endif\n    }else if( strcmp(z,\"-pagecache\")==0 ){\n      int n, sz;\n      sz = (int)integerValue(cmdline_option_value(argc,argv,++i));\n      if( sz>70000 ) sz = 70000;\n      if( sz<0 ) sz = 0;\n      n = (int)integerValue(cmdline_option_value(argc,argv,++i));\n      sqlite3_config(SQLITE_CONFIG_PAGECACHE,\n                    (n>0 && sz>0) ? malloc(n*sz) : 0, sz, n);\n      data.shellFlgs |= SHFLG_Pagecache;\n    }else if( strcmp(z,\"-lookaside\")==0 ){\n      int n, sz;\n      sz = (int)integerValue(cmdline_option_value(argc,argv,++i));\n      if( sz<0 ) sz = 0;\n      n = (int)integerValue(cmdline_option_value(argc,argv,++i));\n      if( n<0 ) n = 0;\n      sqlite3_config(SQLITE_CONFIG_LOOKASIDE, sz, n);\n      if( sz*n==0 ) data.shellFlgs &= ~SHFLG_Lookaside;\n#ifdef SQLITE_ENABLE_VFSTRACE\n    }else if( strcmp(z,\"-vfstrace\")==0 ){\n      extern int vfstrace_register(\n         const char *zTraceName,\n         const char *zOldVfsName,\n         int (*xOut)(const char*,void*),\n         void *pOutArg,\n         int makeDefault\n      );\n      vfstrace_register(\"trace\",0,(int(*)(const char*,void*))fputs,stderr,1);\n#endif\n#ifdef SQLITE_ENABLE_MULTIPLEX\n    }else if( strcmp(z,\"-multiplex\")==0 ){\n      extern int sqlite3_multiple_initialize(const char*,int);\n      sqlite3_multiplex_initialize(0, 1);\n#endif\n    }else if( strcmp(z,\"-mmap\")==0 ){\n      sqlite3_int64 sz = integerValue(cmdline_option_value(argc,argv,++i));\n      sqlite3_config(SQLITE_CONFIG_MMAP_SIZE, sz, sz);\n#ifdef SQLITE_ENABLE_SORTER_REFERENCES\n    }else if( strcmp(z,\"-sorterref\")==0 ){\n      sqlite3_int64 sz = integerValue(cmdline_option_value(argc,argv,++i));\n      sqlite3_config(SQLITE_CONFIG_SORTERREF_SIZE, (int)sz);\n#endif\n    }else if( strcmp(z,\"-vfs\")==0 ){\n      zVfs = cmdline_option_value(argc, argv, ++i);\n#ifdef SQLITE_HAVE_ZLIB\n    }else if( strcmp(z,\"-zip\")==0 ){\n      data.openMode = SHELL_OPEN_ZIPFILE;\n#endif\n    }else if( strcmp(z,\"-append\")==0 ){\n      data.openMode = SHELL_OPEN_APPENDVFS;\n#ifdef SQLITE_ENABLE_DESERIALIZE\n    }else if( strcmp(z,\"-deserialize\")==0 ){\n      data.openMode = SHELL_OPEN_DESERIALIZE;\n    }else if( strcmp(z,\"-maxsize\")==0 && i+1<argc ){\n      data.szMax = integerValue(argv[++i]);\n#endif\n    }else if( strcmp(z,\"-readonly\")==0 ){\n      data.openMode = SHELL_OPEN_READONLY;\n#if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB)\n    }else if( strncmp(z, \"-A\",2)==0 ){\n      /* All remaining command-line arguments are passed to the \".archive\"\n      ** command, so ignore them */\n      break;\n#endif\n    }else if( strcmp(z, \"-memtrace\")==0 ){\n      sqlite3MemTraceActivate(stderr);\n    }\n  }\n  verify_uninitialized();\n\n\n#ifdef SQLITE_SHELL_INIT_PROC\n  {\n    /* If the SQLITE_SHELL_INIT_PROC macro is defined, then it is the name\n    ** of a C-function that will perform initialization actions on SQLite that\n    ** occur just before or after sqlite3_initialize(). Use this compile-time\n    ** option to embed this shell program in larger applications. */\n    extern void SQLITE_SHELL_INIT_PROC(void);\n    SQLITE_SHELL_INIT_PROC();\n  }\n#else\n  /* All the sqlite3_config() calls have now been made. So it is safe\n  ** to call sqlite3_initialize() and process any command line -vfs option. */\n  sqlite3_initialize();\n#endif\n\n  if( zVfs ){\n    sqlite3_vfs *pVfs = sqlite3_vfs_find(zVfs);\n    if( pVfs ){\n      sqlite3_vfs_register(pVfs, 1);\n    }else{\n      utf8_printf(stderr, \"no such VFS: \\\"%s\\\"\\n\", argv[i]);\n      exit(1);\n    }\n  }\n\n  if( data.zDbFilename==0 ){\n#ifndef SQLITE_OMIT_MEMORYDB\n    data.zDbFilename = \":memory:\";\n    warnInmemoryDb = argc==1;\n#else\n    utf8_printf(stderr,\"%s: Error: no database filename specified\\n\", Argv0);\n    return 1;\n#endif\n  }\n  data.out = stdout;\n  sqlite3_appendvfs_init(0,0,0);\n\n  /* Go ahead and open the database file if it already exists.  If the\n  ** file does not exist, delay opening it.  This prevents empty database\n  ** files from being created if a user mistypes the database name argument\n  ** to the sqlite command-line tool.\n  */\n  if( access(data.zDbFilename, 0)==0 ){\n    open_db(&data, 0);\n  }\n\n  /* Process the initialization file if there is one.  If no -init option\n  ** is given on the command line, look for a file named ~/.s"
        },
        {
          "name": "sqlite3.c",
          "type": "blob",
          "size": 7819.34765625,
          "content": ""
        },
        {
          "name": "sqlite3.h",
          "type": "blob",
          "size": 544.63671875,
          "content": "/*\n** 2001-09-15\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n*************************************************************************\n** This header file defines the interface that the SQLite library\n** presents to client programs.  If a C-function, structure, datatype,\n** or constant definition does not appear in this file, then it is\n** not a published API of SQLite, is subject to change without\n** notice, and should not be referenced by programs that use SQLite.\n**\n** Some of the definitions that are in this file are marked as\n** \"experimental\".  Experimental interfaces are normally new\n** features recently added to SQLite.  We do not anticipate changes\n** to experimental interfaces but reserve the right to make minor changes\n** if experience from use \"in the wild\" suggest such changes are prudent.\n**\n** The official C-language API documentation for SQLite is derived\n** from comments in this file.  This file is the authoritative source\n** on how SQLite interfaces are supposed to operate.\n**\n** The name of this file under configuration management is \"sqlite.h.in\".\n** The makefile makes some minor changes to this file (such as inserting\n** the version number) and changes its name to \"sqlite3.h\" as\n** part of the build process.\n*/\n#ifndef SQLITE3_H\n#define SQLITE3_H\n#include <stdarg.h>     /* Needed for the definition of va_list */\n\n/*\n** Make sure we can call this stuff from C++.\n*/\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/*\n** Provide the ability to override linkage features of the interface.\n*/\n#ifndef SQLITE_EXTERN\n# define SQLITE_EXTERN extern\n#endif\n#ifndef SQLITE_API\n# define SQLITE_API\n#endif\n#ifndef SQLITE_CDECL\n# define SQLITE_CDECL\n#endif\n#ifndef SQLITE_APICALL\n# define SQLITE_APICALL\n#endif\n#ifndef SQLITE_STDCALL\n# define SQLITE_STDCALL SQLITE_APICALL\n#endif\n#ifndef SQLITE_CALLBACK\n# define SQLITE_CALLBACK\n#endif\n#ifndef SQLITE_SYSAPI\n# define SQLITE_SYSAPI\n#endif\n\n/*\n** These no-op macros are used in front of interfaces to mark those\n** interfaces as either deprecated or experimental.  New applications\n** should not use deprecated interfaces - they are supported for backwards\n** compatibility only.  Application writers should be aware that\n** experimental interfaces are subject to change in point releases.\n**\n** These macros used to resolve to various kinds of compiler magic that\n** would generate warning messages when they were used.  But that\n** compiler magic ended up generating such a flurry of bug reports\n** that we have taken it all out and gone back to using simple\n** noop macros.\n*/\n#define SQLITE_DEPRECATED\n#define SQLITE_EXPERIMENTAL\n\n/*\n** Ensure these symbols were not defined by some previous header file.\n*/\n#ifdef SQLITE_VERSION\n# undef SQLITE_VERSION\n#endif\n#ifdef SQLITE_VERSION_NUMBER\n# undef SQLITE_VERSION_NUMBER\n#endif\n\n/*\n** CAPI3REF: Compile-Time Library Version Numbers\n**\n** ^(The [SQLITE_VERSION] C preprocessor macro in the sqlite3.h header\n** evaluates to a string literal that is the SQLite version in the\n** format \"X.Y.Z\" where X is the major version number (always 3 for\n** SQLite3) and Y is the minor version number and Z is the release number.)^\n** ^(The [SQLITE_VERSION_NUMBER] C preprocessor macro resolves to an integer\n** with the value (X*1000000 + Y*1000 + Z) where X, Y, and Z are the same\n** numbers used in [SQLITE_VERSION].)^\n** The SQLITE_VERSION_NUMBER for any given release of SQLite will also\n** be larger than the release from which it is derived.  Either Y will\n** be held constant and Z will be incremented or else Y will be incremented\n** and Z will be reset to zero.\n**\n** Since [version 3.6.18] ([dateof:3.6.18]), \n** SQLite source code has been stored in the\n** <a href=\"http://www.fossil-scm.org/\">Fossil configuration management\n** system</a>.  ^The SQLITE_SOURCE_ID macro evaluates to\n** a string which identifies a particular check-in of SQLite\n** within its configuration management system.  ^The SQLITE_SOURCE_ID\n** string contains the date and time of the check-in (UTC) and a SHA1\n** or SHA3-256 hash of the entire source tree.  If the source code has\n** been edited in any way since it was last checked in, then the last\n** four hexadecimal digits of the hash may be modified.\n**\n** See also: [sqlite3_libversion()],\n** [sqlite3_libversion_number()], [sqlite3_sourceid()],\n** [sqlite_version()] and [sqlite_source_id()].\n*/\n#define SQLITE_VERSION        \"3.27.2\"\n#define SQLITE_VERSION_NUMBER 3027002\n#define SQLITE_SOURCE_ID      \"2019-02-25 16:06:06 bd49a8271d650fa89e446b42e513b595a717b9212c91dd384aab871fc1d0f6d7\"\n\n/*\n** CAPI3REF: Run-Time Library Version Numbers\n** KEYWORDS: sqlite3_version sqlite3_sourceid\n**\n** These interfaces provide the same information as the [SQLITE_VERSION],\n** [SQLITE_VERSION_NUMBER], and [SQLITE_SOURCE_ID] C preprocessor macros\n** but are associated with the library instead of the header file.  ^(Cautious\n** programmers might include assert() statements in their application to\n** verify that values returned by these interfaces match the macros in\n** the header, and thus ensure that the application is\n** compiled with matching library and header files.\n**\n** <blockquote><pre>\n** assert( sqlite3_libversion_number()==SQLITE_VERSION_NUMBER );\n** assert( strncmp(sqlite3_sourceid(),SQLITE_SOURCE_ID,80)==0 );\n** assert( strcmp(sqlite3_libversion(),SQLITE_VERSION)==0 );\n** </pre></blockquote>)^\n**\n** ^The sqlite3_version[] string constant contains the text of [SQLITE_VERSION]\n** macro.  ^The sqlite3_libversion() function returns a pointer to the\n** to the sqlite3_version[] string constant.  The sqlite3_libversion()\n** function is provided for use in DLLs since DLL users usually do not have\n** direct access to string constants within the DLL.  ^The\n** sqlite3_libversion_number() function returns an integer equal to\n** [SQLITE_VERSION_NUMBER].  ^(The sqlite3_sourceid() function returns \n** a pointer to a string constant whose value is the same as the \n** [SQLITE_SOURCE_ID] C preprocessor macro.  Except if SQLite is built\n** using an edited copy of [the amalgamation], then the last four characters\n** of the hash might be different from [SQLITE_SOURCE_ID].)^\n**\n** See also: [sqlite_version()] and [sqlite_source_id()].\n*/\nSQLITE_API SQLITE_EXTERN const char sqlite3_version[];\nSQLITE_API const char *sqlite3_libversion(void);\nSQLITE_API const char *sqlite3_sourceid(void);\nSQLITE_API int sqlite3_libversion_number(void);\n\n/*\n** CAPI3REF: Run-Time Library Compilation Options Diagnostics\n**\n** ^The sqlite3_compileoption_used() function returns 0 or 1 \n** indicating whether the specified option was defined at \n** compile time.  ^The SQLITE_ prefix may be omitted from the \n** option name passed to sqlite3_compileoption_used().  \n**\n** ^The sqlite3_compileoption_get() function allows iterating\n** over the list of options that were defined at compile time by\n** returning the N-th compile time option string.  ^If N is out of range,\n** sqlite3_compileoption_get() returns a NULL pointer.  ^The SQLITE_ \n** prefix is omitted from any strings returned by \n** sqlite3_compileoption_get().\n**\n** ^Support for the diagnostic functions sqlite3_compileoption_used()\n** and sqlite3_compileoption_get() may be omitted by specifying the \n** [SQLITE_OMIT_COMPILEOPTION_DIAGS] option at compile time.\n**\n** See also: SQL functions [sqlite_compileoption_used()] and\n** [sqlite_compileoption_get()] and the [compile_options pragma].\n*/\n#ifndef SQLITE_OMIT_COMPILEOPTION_DIAGS\nSQLITE_API int sqlite3_compileoption_used(const char *zOptName);\nSQLITE_API const char *sqlite3_compileoption_get(int N);\n#endif\n\n/*\n** CAPI3REF: Test To See If The Library Is Threadsafe\n**\n** ^The sqlite3_threadsafe() function returns zero if and only if\n** SQLite was compiled with mutexing code omitted due to the\n** [SQLITE_THREADSAFE] compile-time option being set to 0.\n**\n** SQLite can be compiled with or without mutexes.  When\n** the [SQLITE_THREADSAFE] C preprocessor macro is 1 or 2, mutexes\n** are enabled and SQLite is threadsafe.  When the\n** [SQLITE_THREADSAFE] macro is 0, \n** the mutexes are omitted.  Without the mutexes, it is not safe\n** to use SQLite concurrently from more than one thread.\n**\n** Enabling mutexes incurs a measurable performance penalty.\n** So if speed is of utmost importance, it makes sense to disable\n** the mutexes.  But for maximum safety, mutexes should be enabled.\n** ^The default behavior is for mutexes to be enabled.\n**\n** This interface can be used by an application to make sure that the\n** version of SQLite that it is linking against was compiled with\n** the desired setting of the [SQLITE_THREADSAFE] macro.\n**\n** This interface only reports on the compile-time mutex setting\n** of the [SQLITE_THREADSAFE] flag.  If SQLite is compiled with\n** SQLITE_THREADSAFE=1 or =2 then mutexes are enabled by default but\n** can be fully or partially disabled using a call to [sqlite3_config()]\n** with the verbs [SQLITE_CONFIG_SINGLETHREAD], [SQLITE_CONFIG_MULTITHREAD],\n** or [SQLITE_CONFIG_SERIALIZED].  ^(The return value of the\n** sqlite3_threadsafe() function shows only the compile-time setting of\n** thread safety, not any run-time changes to that setting made by\n** sqlite3_config(). In other words, the return value from sqlite3_threadsafe()\n** is unchanged by calls to sqlite3_config().)^\n**\n** See the [threading mode] documentation for additional information.\n*/\nSQLITE_API int sqlite3_threadsafe(void);\n\n/*\n** CAPI3REF: Database Connection Handle\n** KEYWORDS: {database connection} {database connections}\n**\n** Each open SQLite database is represented by a pointer to an instance of\n** the opaque structure named \"sqlite3\".  It is useful to think of an sqlite3\n** pointer as an object.  The [sqlite3_open()], [sqlite3_open16()], and\n** [sqlite3_open_v2()] interfaces are its constructors, and [sqlite3_close()]\n** and [sqlite3_close_v2()] are its destructors.  There are many other\n** interfaces (such as\n** [sqlite3_prepare_v2()], [sqlite3_create_function()], and\n** [sqlite3_busy_timeout()] to name but three) that are methods on an\n** sqlite3 object.\n*/\ntypedef struct sqlite3 sqlite3;\n\n/*\n** CAPI3REF: 64-Bit Integer Types\n** KEYWORDS: sqlite_int64 sqlite_uint64\n**\n** Because there is no cross-platform way to specify 64-bit integer types\n** SQLite includes typedefs for 64-bit signed and unsigned integers.\n**\n** The sqlite3_int64 and sqlite3_uint64 are the preferred type definitions.\n** The sqlite_int64 and sqlite_uint64 types are supported for backwards\n** compatibility only.\n**\n** ^The sqlite3_int64 and sqlite_int64 types can store integer values\n** between -9223372036854775808 and +9223372036854775807 inclusive.  ^The\n** sqlite3_uint64 and sqlite_uint64 types can store integer values \n** between 0 and +18446744073709551615 inclusive.\n*/\n#ifdef SQLITE_INT64_TYPE\n  typedef SQLITE_INT64_TYPE sqlite_int64;\n# ifdef SQLITE_UINT64_TYPE\n    typedef SQLITE_UINT64_TYPE sqlite_uint64;\n# else  \n    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;\n# endif\n#elif defined(_MSC_VER) || defined(__BORLANDC__)\n  typedef __int64 sqlite_int64;\n  typedef unsigned __int64 sqlite_uint64;\n#else\n  typedef long long int sqlite_int64;\n  typedef unsigned long long int sqlite_uint64;\n#endif\ntypedef sqlite_int64 sqlite3_int64;\ntypedef sqlite_uint64 sqlite3_uint64;\n\n/*\n** If compiling for a processor that lacks floating point support,\n** substitute integer for floating-point.\n*/\n#ifdef SQLITE_OMIT_FLOATING_POINT\n# define double sqlite3_int64\n#endif\n\n/*\n** CAPI3REF: Closing A Database Connection\n** DESTRUCTOR: sqlite3\n**\n** ^The sqlite3_close() and sqlite3_close_v2() routines are destructors\n** for the [sqlite3] object.\n** ^Calls to sqlite3_close() and sqlite3_close_v2() return [SQLITE_OK] if\n** the [sqlite3] object is successfully destroyed and all associated\n** resources are deallocated.\n**\n** ^If the database connection is associated with unfinalized prepared\n** statements or unfinished sqlite3_backup objects then sqlite3_close()\n** will leave the database connection open and return [SQLITE_BUSY].\n** ^If sqlite3_close_v2() is called with unfinalized prepared statements\n** and/or unfinished sqlite3_backups, then the database connection becomes\n** an unusable \"zombie\" which will automatically be deallocated when the\n** last prepared statement is finalized or the last sqlite3_backup is\n** finished.  The sqlite3_close_v2() interface is intended for use with\n** host languages that are garbage collected, and where the order in which\n** destructors are called is arbitrary.\n**\n** Applications should [sqlite3_finalize | finalize] all [prepared statements],\n** [sqlite3_blob_close | close] all [BLOB handles], and \n** [sqlite3_backup_finish | finish] all [sqlite3_backup] objects associated\n** with the [sqlite3] object prior to attempting to close the object.  ^If\n** sqlite3_close_v2() is called on a [database connection] that still has\n** outstanding [prepared statements], [BLOB handles], and/or\n** [sqlite3_backup] objects then it returns [SQLITE_OK] and the deallocation\n** of resources is deferred until all [prepared statements], [BLOB handles],\n** and [sqlite3_backup] objects are also destroyed.\n**\n** ^If an [sqlite3] object is destroyed while a transaction is open,\n** the transaction is automatically rolled back.\n**\n** The C parameter to [sqlite3_close(C)] and [sqlite3_close_v2(C)]\n** must be either a NULL\n** pointer or an [sqlite3] object pointer obtained\n** from [sqlite3_open()], [sqlite3_open16()], or\n** [sqlite3_open_v2()], and not previously closed.\n** ^Calling sqlite3_close() or sqlite3_close_v2() with a NULL pointer\n** argument is a harmless no-op.\n*/\nSQLITE_API int sqlite3_close(sqlite3*);\nSQLITE_API int sqlite3_close_v2(sqlite3*);\n\n/*\n** The type for a callback function.\n** This is legacy and deprecated.  It is included for historical\n** compatibility and is not documented.\n*/\ntypedef int (*sqlite3_callback)(void*,int,char**, char**);\n\n/*\n** CAPI3REF: One-Step Query Execution Interface\n** METHOD: sqlite3\n**\n** The sqlite3_exec() interface is a convenience wrapper around\n** [sqlite3_prepare_v2()], [sqlite3_step()], and [sqlite3_finalize()],\n** that allows an application to run multiple statements of SQL\n** without having to use a lot of C code. \n**\n** ^The sqlite3_exec() interface runs zero or more UTF-8 encoded,\n** semicolon-separate SQL statements passed into its 2nd argument,\n** in the context of the [database connection] passed in as its 1st\n** argument.  ^If the callback function of the 3rd argument to\n** sqlite3_exec() is not NULL, then it is invoked for each result row\n** coming out of the evaluated SQL statements.  ^The 4th argument to\n** sqlite3_exec() is relayed through to the 1st argument of each\n** callback invocation.  ^If the callback pointer to sqlite3_exec()\n** is NULL, then no callback is ever invoked and result rows are\n** ignored.\n**\n** ^If an error occurs while evaluating the SQL statements passed into\n** sqlite3_exec(), then execution of the current statement stops and\n** subsequent statements are skipped.  ^If the 5th parameter to sqlite3_exec()\n** is not NULL then any error message is written into memory obtained\n** from [sqlite3_malloc()] and passed back through the 5th parameter.\n** To avoid memory leaks, the application should invoke [sqlite3_free()]\n** on error message strings returned through the 5th parameter of\n** sqlite3_exec() after the error message string is no longer needed.\n** ^If the 5th parameter to sqlite3_exec() is not NULL and no errors\n** occur, then sqlite3_exec() sets the pointer in its 5th parameter to\n** NULL before returning.\n**\n** ^If an sqlite3_exec() callback returns non-zero, the sqlite3_exec()\n** routine returns SQLITE_ABORT without invoking the callback again and\n** without running any subsequent SQL statements.\n**\n** ^The 2nd argument to the sqlite3_exec() callback function is the\n** number of columns in the result.  ^The 3rd argument to the sqlite3_exec()\n** callback is an array of pointers to strings obtained as if from\n** [sqlite3_column_text()], one for each column.  ^If an element of a\n** result row is NULL then the corresponding string pointer for the\n** sqlite3_exec() callback is a NULL pointer.  ^The 4th argument to the\n** sqlite3_exec() callback is an array of pointers to strings where each\n** entry represents the name of corresponding result column as obtained\n** from [sqlite3_column_name()].\n**\n** ^If the 2nd parameter to sqlite3_exec() is a NULL pointer, a pointer\n** to an empty string, or a pointer that contains only whitespace and/or \n** SQL comments, then no SQL statements are evaluated and the database\n** is not changed.\n**\n** Restrictions:\n**\n** <ul>\n** <li> The application must ensure that the 1st parameter to sqlite3_exec()\n**      is a valid and open [database connection].\n** <li> The application must not close the [database connection] specified by\n**      the 1st parameter to sqlite3_exec() while sqlite3_exec() is running.\n** <li> The application must not modify the SQL statement text passed into\n**      the 2nd parameter of sqlite3_exec() while sqlite3_exec() is running.\n** </ul>\n*/\nSQLITE_API int sqlite3_exec(\n  sqlite3*,                                  /* An open database */\n  const char *sql,                           /* SQL to be evaluated */\n  int (*callback)(void*,int,char**,char**),  /* Callback function */\n  void *,                                    /* 1st argument to callback */\n  char **errmsg                              /* Error msg written here */\n);\n\n/*\n** CAPI3REF: Result Codes\n** KEYWORDS: {result code definitions}\n**\n** Many SQLite functions return an integer result code from the set shown\n** here in order to indicate success or failure.\n**\n** New error codes may be added in future versions of SQLite.\n**\n** See also: [extended result code definitions]\n*/\n#define SQLITE_OK           0   /* Successful result */\n/* beginning-of-error-codes */\n#define SQLITE_ERROR        1   /* Generic error */\n#define SQLITE_INTERNAL     2   /* Internal logic error in SQLite */\n#define SQLITE_PERM         3   /* Access permission denied */\n#define SQLITE_ABORT        4   /* Callback routine requested an abort */\n#define SQLITE_BUSY         5   /* The database file is locked */\n#define SQLITE_LOCKED       6   /* A table in the database is locked */\n#define SQLITE_NOMEM        7   /* A malloc() failed */\n#define SQLITE_READONLY     8   /* Attempt to write a readonly database */\n#define SQLITE_INTERRUPT    9   /* Operation terminated by sqlite3_interrupt()*/\n#define SQLITE_IOERR       10   /* Some kind of disk I/O error occurred */\n#define SQLITE_CORRUPT     11   /* The database disk image is malformed */\n#define SQLITE_NOTFOUND    12   /* Unknown opcode in sqlite3_file_control() */\n#define SQLITE_FULL        13   /* Insertion failed because database is full */\n#define SQLITE_CANTOPEN    14   /* Unable to open the database file */\n#define SQLITE_PROTOCOL    15   /* Database lock protocol error */\n#define SQLITE_EMPTY       16   /* Internal use only */\n#define SQLITE_SCHEMA      17   /* The database schema changed */\n#define SQLITE_TOOBIG      18   /* String or BLOB exceeds size limit */\n#define SQLITE_CONSTRAINT  19   /* Abort due to constraint violation */\n#define SQLITE_MISMATCH    20   /* Data type mismatch */\n#define SQLITE_MISUSE      21   /* Library used incorrectly */\n#define SQLITE_NOLFS       22   /* Uses OS features not supported on host */\n#define SQLITE_AUTH        23   /* Authorization denied */\n#define SQLITE_FORMAT      24   /* Not used */\n#define SQLITE_RANGE       25   /* 2nd parameter to sqlite3_bind out of range */\n#define SQLITE_NOTADB      26   /* File opened that is not a database file */\n#define SQLITE_NOTICE      27   /* Notifications from sqlite3_log() */\n#define SQLITE_WARNING     28   /* Warnings from sqlite3_log() */\n#define SQLITE_ROW         100  /* sqlite3_step() has another row ready */\n#define SQLITE_DONE        101  /* sqlite3_step() has finished executing */\n/* end-of-error-codes */\n\n/*\n** CAPI3REF: Extended Result Codes\n** KEYWORDS: {extended result code definitions}\n**\n** In its default configuration, SQLite API routines return one of 30 integer\n** [result codes].  However, experience has shown that many of\n** these result codes are too coarse-grained.  They do not provide as\n** much information about problems as programmers might like.  In an effort to\n** address this, newer versions of SQLite (version 3.3.8 [dateof:3.3.8]\n** and later) include\n** support for additional result codes that provide more detailed information\n** about errors. These [extended result codes] are enabled or disabled\n** on a per database connection basis using the\n** [sqlite3_extended_result_codes()] API.  Or, the extended code for\n** the most recent error can be obtained using\n** [sqlite3_extended_errcode()].\n*/\n#define SQLITE_ERROR_MISSING_COLLSEQ   (SQLITE_ERROR | (1<<8))\n#define SQLITE_ERROR_RETRY             (SQLITE_ERROR | (2<<8))\n#define SQLITE_ERROR_SNAPSHOT          (SQLITE_ERROR | (3<<8))\n#define SQLITE_IOERR_READ              (SQLITE_IOERR | (1<<8))\n#define SQLITE_IOERR_SHORT_READ        (SQLITE_IOERR | (2<<8))\n#define SQLITE_IOERR_WRITE             (SQLITE_IOERR | (3<<8))\n#define SQLITE_IOERR_FSYNC             (SQLITE_IOERR | (4<<8))\n#define SQLITE_IOERR_DIR_FSYNC         (SQLITE_IOERR | (5<<8))\n#define SQLITE_IOERR_TRUNCATE          (SQLITE_IOERR | (6<<8))\n#define SQLITE_IOERR_FSTAT             (SQLITE_IOERR | (7<<8))\n#define SQLITE_IOERR_UNLOCK            (SQLITE_IOERR | (8<<8))\n#define SQLITE_IOERR_RDLOCK            (SQLITE_IOERR | (9<<8))\n#define SQLITE_IOERR_DELETE            (SQLITE_IOERR | (10<<8))\n#define SQLITE_IOERR_BLOCKED           (SQLITE_IOERR | (11<<8))\n#define SQLITE_IOERR_NOMEM             (SQLITE_IOERR | (12<<8))\n#define SQLITE_IOERR_ACCESS            (SQLITE_IOERR | (13<<8))\n#define SQLITE_IOERR_CHECKRESERVEDLOCK (SQLITE_IOERR | (14<<8))\n#define SQLITE_IOERR_LOCK              (SQLITE_IOERR | (15<<8))\n#define SQLITE_IOERR_CLOSE             (SQLITE_IOERR | (16<<8))\n#define SQLITE_IOERR_DIR_CLOSE         (SQLITE_IOERR | (17<<8))\n#define SQLITE_IOERR_SHMOPEN           (SQLITE_IOERR | (18<<8))\n#define SQLITE_IOERR_SHMSIZE           (SQLITE_IOERR | (19<<8))\n#define SQLITE_IOERR_SHMLOCK           (SQLITE_IOERR | (20<<8))\n#define SQLITE_IOERR_SHMMAP            (SQLITE_IOERR | (21<<8))\n#define SQLITE_IOERR_SEEK              (SQLITE_IOERR | (22<<8))\n#define SQLITE_IOERR_DELETE_NOENT      (SQLITE_IOERR | (23<<8))\n#define SQLITE_IOERR_MMAP              (SQLITE_IOERR | (24<<8))\n#define SQLITE_IOERR_GETTEMPPATH       (SQLITE_IOERR | (25<<8))\n#define SQLITE_IOERR_CONVPATH          (SQLITE_IOERR | (26<<8))\n#define SQLITE_IOERR_VNODE             (SQLITE_IOERR | (27<<8))\n#define SQLITE_IOERR_AUTH              (SQLITE_IOERR | (28<<8))\n#define SQLITE_IOERR_BEGIN_ATOMIC      (SQLITE_IOERR | (29<<8))\n#define SQLITE_IOERR_COMMIT_ATOMIC     (SQLITE_IOERR | (30<<8))\n#define SQLITE_IOERR_ROLLBACK_ATOMIC   (SQLITE_IOERR | (31<<8))\n#define SQLITE_LOCKED_SHAREDCACHE      (SQLITE_LOCKED |  (1<<8))\n#define SQLITE_LOCKED_VTAB             (SQLITE_LOCKED |  (2<<8))\n#define SQLITE_BUSY_RECOVERY           (SQLITE_BUSY   |  (1<<8))\n#define SQLITE_BUSY_SNAPSHOT           (SQLITE_BUSY   |  (2<<8))\n#define SQLITE_CANTOPEN_NOTEMPDIR      (SQLITE_CANTOPEN | (1<<8))\n#define SQLITE_CANTOPEN_ISDIR          (SQLITE_CANTOPEN | (2<<8))\n#define SQLITE_CANTOPEN_FULLPATH       (SQLITE_CANTOPEN | (3<<8))\n#define SQLITE_CANTOPEN_CONVPATH       (SQLITE_CANTOPEN | (4<<8))\n#define SQLITE_CANTOPEN_DIRTYWAL       (SQLITE_CANTOPEN | (5<<8)) /* Not Used */\n#define SQLITE_CORRUPT_VTAB            (SQLITE_CORRUPT | (1<<8))\n#define SQLITE_CORRUPT_SEQUENCE        (SQLITE_CORRUPT | (2<<8))\n#define SQLITE_READONLY_RECOVERY       (SQLITE_READONLY | (1<<8))\n#define SQLITE_READONLY_CANTLOCK       (SQLITE_READONLY | (2<<8))\n#define SQLITE_READONLY_ROLLBACK       (SQLITE_READONLY | (3<<8))\n#define SQLITE_READONLY_DBMOVED        (SQLITE_READONLY | (4<<8))\n#define SQLITE_READONLY_CANTINIT       (SQLITE_READONLY | (5<<8))\n#define SQLITE_READONLY_DIRECTORY      (SQLITE_READONLY | (6<<8))\n#define SQLITE_ABORT_ROLLBACK          (SQLITE_ABORT | (2<<8))\n#define SQLITE_CONSTRAINT_CHECK        (SQLITE_CONSTRAINT | (1<<8))\n#define SQLITE_CONSTRAINT_COMMITHOOK   (SQLITE_CONSTRAINT | (2<<8))\n#define SQLITE_CONSTRAINT_FOREIGNKEY   (SQLITE_CONSTRAINT | (3<<8))\n#define SQLITE_CONSTRAINT_FUNCTION     (SQLITE_CONSTRAINT | (4<<8))\n#define SQLITE_CONSTRAINT_NOTNULL      (SQLITE_CONSTRAINT | (5<<8))\n#define SQLITE_CONSTRAINT_PRIMARYKEY   (SQLITE_CONSTRAINT | (6<<8))\n#define SQLITE_CONSTRAINT_TRIGGER      (SQLITE_CONSTRAINT | (7<<8))\n#define SQLITE_CONSTRAINT_UNIQUE       (SQLITE_CONSTRAINT | (8<<8))\n#define SQLITE_CONSTRAINT_VTAB         (SQLITE_CONSTRAINT | (9<<8))\n#define SQLITE_CONSTRAINT_ROWID        (SQLITE_CONSTRAINT |(10<<8))\n#define SQLITE_NOTICE_RECOVER_WAL      (SQLITE_NOTICE | (1<<8))\n#define SQLITE_NOTICE_RECOVER_ROLLBACK (SQLITE_NOTICE | (2<<8))\n#define SQLITE_WARNING_AUTOINDEX       (SQLITE_WARNING | (1<<8))\n#define SQLITE_AUTH_USER               (SQLITE_AUTH | (1<<8))\n#define SQLITE_OK_LOAD_PERMANENTLY     (SQLITE_OK | (1<<8))\n\n/*\n** CAPI3REF: Flags For File Open Operations\n**\n** These bit values are intended for use in the\n** 3rd parameter to the [sqlite3_open_v2()] interface and\n** in the 4th parameter to the [sqlite3_vfs.xOpen] method.\n*/\n#define SQLITE_OPEN_READONLY         0x00000001  /* Ok for sqlite3_open_v2() */\n#define SQLITE_OPEN_READWRITE        0x00000002  /* Ok for sqlite3_open_v2() */\n#define SQLITE_OPEN_CREATE           0x00000004  /* Ok for sqlite3_open_v2() */\n#define SQLITE_OPEN_DELETEONCLOSE    0x00000008  /* VFS only */\n#define SQLITE_OPEN_EXCLUSIVE        0x00000010  /* VFS only */\n#define SQLITE_OPEN_AUTOPROXY        0x00000020  /* VFS only */\n#define SQLITE_OPEN_URI              0x00000040  /* Ok for sqlite3_open_v2() */\n#define SQLITE_OPEN_MEMORY           0x00000080  /* Ok for sqlite3_open_v2() */\n#define SQLITE_OPEN_MAIN_DB          0x00000100  /* VFS only */\n#define SQLITE_OPEN_TEMP_DB          0x00000200  /* VFS only */\n#define SQLITE_OPEN_TRANSIENT_DB     0x00000400  /* VFS only */\n#define SQLITE_OPEN_MAIN_JOURNAL     0x00000800  /* VFS only */\n#define SQLITE_OPEN_TEMP_JOURNAL     0x00001000  /* VFS only */\n#define SQLITE_OPEN_SUBJOURNAL       0x00002000  /* VFS only */\n#define SQLITE_OPEN_MASTER_JOURNAL   0x00004000  /* VFS only */\n#define SQLITE_OPEN_NOMUTEX          0x00008000  /* Ok for sqlite3_open_v2() */\n#define SQLITE_OPEN_FULLMUTEX        0x00010000  /* Ok for sqlite3_open_v2() */\n#define SQLITE_OPEN_SHAREDCACHE      0x00020000  /* Ok for sqlite3_open_v2() */\n#define SQLITE_OPEN_PRIVATECACHE     0x00040000  /* Ok for sqlite3_open_v2() */\n#define SQLITE_OPEN_WAL              0x00080000  /* VFS only */\n\n/* Reserved:                         0x00F00000 */\n\n/*\n** CAPI3REF: Device Characteristics\n**\n** The xDeviceCharacteristics method of the [sqlite3_io_methods]\n** object returns an integer which is a vector of these\n** bit values expressing I/O characteristics of the mass storage\n** device that holds the file that the [sqlite3_io_methods]\n** refers to.\n**\n** The SQLITE_IOCAP_ATOMIC property means that all writes of\n** any size are atomic.  The SQLITE_IOCAP_ATOMICnnn values\n** mean that writes of blocks that are nnn bytes in size and\n** are aligned to an address which is an integer multiple of\n** nnn are atomic.  The SQLITE_IOCAP_SAFE_APPEND value means\n** that when data is appended to a file, the data is appended\n** first then the size of the file is extended, never the other\n** way around.  The SQLITE_IOCAP_SEQUENTIAL property means that\n** information is written to disk in the same order as calls\n** to xWrite().  The SQLITE_IOCAP_POWERSAFE_OVERWRITE property means that\n** after reboot following a crash or power loss, the only bytes in a\n** file that were written at the application level might have changed\n** and that adjacent bytes, even bytes within the same sector are\n** guaranteed to be unchanged.  The SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN\n** flag indicates that a file cannot be deleted when open.  The\n** SQLITE_IOCAP_IMMUTABLE flag indicates that the file is on\n** read-only media and cannot be changed even by processes with\n** elevated privileges.\n**\n** The SQLITE_IOCAP_BATCH_ATOMIC property means that the underlying\n** filesystem supports doing multiple write operations atomically when those\n** write operations are bracketed by [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE] and\n** [SQLITE_FCNTL_COMMIT_ATOMIC_WRITE].\n*/\n#define SQLITE_IOCAP_ATOMIC                 0x00000001\n#define SQLITE_IOCAP_ATOMIC512              0x00000002\n#define SQLITE_IOCAP_ATOMIC1K               0x00000004\n#define SQLITE_IOCAP_ATOMIC2K               0x00000008\n#define SQLITE_IOCAP_ATOMIC4K               0x00000010\n#define SQLITE_IOCAP_ATOMIC8K               0x00000020\n#define SQLITE_IOCAP_ATOMIC16K              0x00000040\n#define SQLITE_IOCAP_ATOMIC32K              0x00000080\n#define SQLITE_IOCAP_ATOMIC64K              0x00000100\n#define SQLITE_IOCAP_SAFE_APPEND            0x00000200\n#define SQLITE_IOCAP_SEQUENTIAL             0x00000400\n#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN  0x00000800\n#define SQLITE_IOCAP_POWERSAFE_OVERWRITE    0x00001000\n#define SQLITE_IOCAP_IMMUTABLE              0x00002000\n#define SQLITE_IOCAP_BATCH_ATOMIC           0x00004000\n\n/*\n** CAPI3REF: File Locking Levels\n**\n** SQLite uses one of these integer values as the second\n** argument to calls it makes to the xLock() and xUnlock() methods\n** of an [sqlite3_io_methods] object.\n*/\n#define SQLITE_LOCK_NONE          0\n#define SQLITE_LOCK_SHARED        1\n#define SQLITE_LOCK_RESERVED      2\n#define SQLITE_LOCK_PENDING       3\n#define SQLITE_LOCK_EXCLUSIVE     4\n\n/*\n** CAPI3REF: Synchronization Type Flags\n**\n** When SQLite invokes the xSync() method of an\n** [sqlite3_io_methods] object it uses a combination of\n** these integer values as the second argument.\n**\n** When the SQLITE_SYNC_DATAONLY flag is used, it means that the\n** sync operation only needs to flush data to mass storage.  Inode\n** information need not be flushed. If the lower four bits of the flag\n** equal SQLITE_SYNC_NORMAL, that means to use normal fsync() semantics.\n** If the lower four bits equal SQLITE_SYNC_FULL, that means\n** to use Mac OS X style fullsync instead of fsync().\n**\n** Do not confuse the SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL flags\n** with the [PRAGMA synchronous]=NORMAL and [PRAGMA synchronous]=FULL\n** settings.  The [synchronous pragma] determines when calls to the\n** xSync VFS method occur and applies uniformly across all platforms.\n** The SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL flags determine how\n** energetic or rigorous or forceful the sync operations are and\n** only make a difference on Mac OSX for the default SQLite code.\n** (Third-party VFS implementations might also make the distinction\n** between SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL, but among the\n** operating systems natively supported by SQLite, only Mac OSX\n** cares about the difference.)\n*/\n#define SQLITE_SYNC_NORMAL        0x00002\n#define SQLITE_SYNC_FULL          0x00003\n#define SQLITE_SYNC_DATAONLY      0x00010\n\n/*\n** CAPI3REF: OS Interface Open File Handle\n**\n** An [sqlite3_file] object represents an open file in the \n** [sqlite3_vfs | OS interface layer].  Individual OS interface\n** implementations will\n** want to subclass this object by appending additional fields\n** for their own use.  The pMethods entry is a pointer to an\n** [sqlite3_io_methods] object that defines methods for performing\n** I/O operations on the open file.\n*/\ntypedef struct sqlite3_file sqlite3_file;\nstruct sqlite3_file {\n  const struct sqlite3_io_methods *pMethods;  /* Methods for an open file */\n};\n\n/*\n** CAPI3REF: OS Interface File Virtual Methods Object\n**\n** Every file opened by the [sqlite3_vfs.xOpen] method populates an\n** [sqlite3_file] object (or, more commonly, a subclass of the\n** [sqlite3_file] object) with a pointer to an instance of this object.\n** This object defines the methods used to perform various operations\n** against the open file represented by the [sqlite3_file] object.\n**\n** If the [sqlite3_vfs.xOpen] method sets the sqlite3_file.pMethods element \n** to a non-NULL pointer, then the sqlite3_io_methods.xClose method\n** may be invoked even if the [sqlite3_vfs.xOpen] reported that it failed.  The\n** only way to prevent a call to xClose following a failed [sqlite3_vfs.xOpen]\n** is for the [sqlite3_vfs.xOpen] to set the sqlite3_file.pMethods element\n** to NULL.\n**\n** The flags argument to xSync may be one of [SQLITE_SYNC_NORMAL] or\n** [SQLITE_SYNC_FULL].  The first choice is the normal fsync().\n** The second choice is a Mac OS X style fullsync.  The [SQLITE_SYNC_DATAONLY]\n** flag may be ORed in to indicate that only the data of the file\n** and not its inode needs to be synced.\n**\n** The integer values to xLock() and xUnlock() are one of\n** <ul>\n** <li> [SQLITE_LOCK_NONE],\n** <li> [SQLITE_LOCK_SHARED],\n** <li> [SQLITE_LOCK_RESERVED],\n** <li> [SQLITE_LOCK_PENDING], or\n** <li> [SQLITE_LOCK_EXCLUSIVE].\n** </ul>\n** xLock() increases the lock. xUnlock() decreases the lock.\n** The xCheckReservedLock() method checks whether any database connection,\n** either in this process or in some other process, is holding a RESERVED,\n** PENDING, or EXCLUSIVE lock on the file.  It returns true\n** if such a lock exists and false otherwise.\n**\n** The xFileControl() method is a generic interface that allows custom\n** VFS implementations to directly control an open file using the\n** [sqlite3_file_control()] interface.  The second \"op\" argument is an\n** integer opcode.  The third argument is a generic pointer intended to\n** point to a structure that may contain arguments or space in which to\n** write return values.  Potential uses for xFileControl() might be\n** functions to enable blocking locks with timeouts, to change the\n** locking strategy (for example to use dot-file locks), to inquire\n** about the status of a lock, or to break stale locks.  The SQLite\n** core reserves all opcodes less than 100 for its own use.\n** A [file control opcodes | list of opcodes] less than 100 is available.\n** Applications that define a custom xFileControl method should use opcodes\n** greater than 100 to avoid conflicts.  VFS implementations should\n** return [SQLITE_NOTFOUND] for file control opcodes that they do not\n** recognize.\n**\n** The xSectorSize() method returns the sector size of the\n** device that underlies the file.  The sector size is the\n** minimum write that can be performed without disturbing\n** other bytes in the file.  The xDeviceCharacteristics()\n** method returns a bit vector describing behaviors of the\n** underlying device:\n**\n** <ul>\n** <li> [SQLITE_IOCAP_ATOMIC]\n** <li> [SQLITE_IOCAP_ATOMIC512]\n** <li> [SQLITE_IOCAP_ATOMIC1K]\n** <li> [SQLITE_IOCAP_ATOMIC2K]\n** <li> [SQLITE_IOCAP_ATOMIC4K]\n** <li> [SQLITE_IOCAP_ATOMIC8K]\n** <li> [SQLITE_IOCAP_ATOMIC16K]\n** <li> [SQLITE_IOCAP_ATOMIC32K]\n** <li> [SQLITE_IOCAP_ATOMIC64K]\n** <li> [SQLITE_IOCAP_SAFE_APPEND]\n** <li> [SQLITE_IOCAP_SEQUENTIAL]\n** <li> [SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN]\n** <li> [SQLITE_IOCAP_POWERSAFE_OVERWRITE]\n** <li> [SQLITE_IOCAP_IMMUTABLE]\n** <li> [SQLITE_IOCAP_BATCH_ATOMIC]\n** </ul>\n**\n** The SQLITE_IOCAP_ATOMIC property means that all writes of\n** any size are atomic.  The SQLITE_IOCAP_ATOMICnnn values\n** mean that writes of blocks that are nnn bytes in size and\n** are aligned to an address which is an integer multiple of\n** nnn are atomic.  The SQLITE_IOCAP_SAFE_APPEND value means\n** that when data is appended to a file, the data is appended\n** first then the size of the file is extended, never the other\n** way around.  The SQLITE_IOCAP_SEQUENTIAL property means that\n** information is written to disk in the same order as calls\n** to xWrite().\n**\n** If xRead() returns SQLITE_IOERR_SHORT_READ it must also fill\n** in the unread portions of the buffer with zeros.  A VFS that\n** fails to zero-fill short reads might seem to work.  However,\n** failure to zero-fill short reads will eventually lead to\n** database corruption.\n*/\ntypedef struct sqlite3_io_methods sqlite3_io_methods;\nstruct sqlite3_io_methods {\n  int iVersion;\n  int (*xClose)(sqlite3_file*);\n  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);\n  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);\n  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);\n  int (*xSync)(sqlite3_file*, int flags);\n  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);\n  int (*xLock)(sqlite3_file*, int);\n  int (*xUnlock)(sqlite3_file*, int);\n  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);\n  int (*xFileControl)(sqlite3_file*, int op, void *pArg);\n  int (*xSectorSize)(sqlite3_file*);\n  int (*xDeviceCharacteristics)(sqlite3_file*);\n  /* Methods above are valid for version 1 */\n  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);\n  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);\n  void (*xShmBarrier)(sqlite3_file*);\n  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);\n  /* Methods above are valid for version 2 */\n  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);\n  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);\n  /* Methods above are valid for version 3 */\n  /* Additional methods may be added in future releases */\n};\n\n/*\n** CAPI3REF: Standard File Control Opcodes\n** KEYWORDS: {file control opcodes} {file control opcode}\n**\n** These integer constants are opcodes for the xFileControl method\n** of the [sqlite3_io_methods] object and for the [sqlite3_file_control()]\n** interface.\n**\n** <ul>\n** <li>[[SQLITE_FCNTL_LOCKSTATE]]\n** The [SQLITE_FCNTL_LOCKSTATE] opcode is used for debugging.  This\n** opcode causes the xFileControl method to write the current state of\n** the lock (one of [SQLITE_LOCK_NONE], [SQLITE_LOCK_SHARED],\n** [SQLITE_LOCK_RESERVED], [SQLITE_LOCK_PENDING], or [SQLITE_LOCK_EXCLUSIVE])\n** into an integer that the pArg argument points to. This capability\n** is used during testing and is only available when the SQLITE_TEST\n** compile-time option is used.\n**\n** <li>[[SQLITE_FCNTL_SIZE_HINT]]\n** The [SQLITE_FCNTL_SIZE_HINT] opcode is used by SQLite to give the VFS\n** layer a hint of how large the database file will grow to be during the\n** current transaction.  This hint is not guaranteed to be accurate but it\n** is often close.  The underlying VFS might choose to preallocate database\n** file space based on this hint in order to help writes to the database\n** file run faster.\n**\n** <li>[[SQLITE_FCNTL_SIZE_LIMIT]]\n** The [SQLITE_FCNTL_SIZE_LIMIT] opcode is used by in-memory VFS that\n** implements [sqlite3_deserialize()] to set an upper bound on the size\n** of the in-memory database.  The argument is a pointer to a [sqlite3_int64].\n** If the integer pointed to is negative, then it is filled in with the\n** current limit.  Otherwise the limit is set to the larger of the value\n** of the integer pointed to and the current database size.  The integer\n** pointed to is set to the new limit.\n**\n** <li>[[SQLITE_FCNTL_CHUNK_SIZE]]\n** The [SQLITE_FCNTL_CHUNK_SIZE] opcode is used to request that the VFS\n** extends and truncates the database file in chunks of a size specified\n** by the user. The fourth argument to [sqlite3_file_control()] should \n** point to an integer (type int) containing the new chunk-size to use\n** for the nominated database. Allocating database file space in large\n** chunks (say 1MB at a time), may reduce file-system fragmentation and\n** improve performance on some systems.\n**\n** <li>[[SQLITE_FCNTL_FILE_POINTER]]\n** The [SQLITE_FCNTL_FILE_POINTER] opcode is used to obtain a pointer\n** to the [sqlite3_file] object associated with a particular database\n** connection.  See also [SQLITE_FCNTL_JOURNAL_POINTER].\n**\n** <li>[[SQLITE_FCNTL_JOURNAL_POINTER]]\n** The [SQLITE_FCNTL_JOURNAL_POINTER] opcode is used to obtain a pointer\n** to the [sqlite3_file] object associated with the journal file (either\n** the [rollback journal] or the [write-ahead log]) for a particular database\n** connection.  See also [SQLITE_FCNTL_FILE_POINTER].\n**\n** <li>[[SQLITE_FCNTL_SYNC_OMITTED]]\n** No longer in use.\n**\n** <li>[[SQLITE_FCNTL_SYNC]]\n** The [SQLITE_FCNTL_SYNC] opcode is generated internally by SQLite and\n** sent to the VFS immediately before the xSync method is invoked on a\n** database file descriptor. Or, if the xSync method is not invoked \n** because the user has configured SQLite with \n** [PRAGMA synchronous | PRAGMA synchronous=OFF] it is invoked in place \n** of the xSync method. In most cases, the pointer argument passed with\n** this file-control is NULL. However, if the database file is being synced\n** as part of a multi-database commit, the argument points to a nul-terminated\n** string containing the transactions master-journal file name. VFSes that \n** do not need this signal should silently ignore this opcode. Applications \n** should not call [sqlite3_file_control()] with this opcode as doing so may \n** disrupt the operation of the specialized VFSes that do require it.  \n**\n** <li>[[SQLITE_FCNTL_COMMIT_PHASETWO]]\n** The [SQLITE_FCNTL_COMMIT_PHASETWO] opcode is generated internally by SQLite\n** and sent to the VFS after a transaction has been committed immediately\n** but before the database is unlocked. VFSes that do not need this signal\n** should silently ignore this opcode. Applications should not call\n** [sqlite3_file_control()] with this opcode as doing so may disrupt the \n** operation of the specialized VFSes that do require it.  \n**\n** <li>[[SQLITE_FCNTL_WIN32_AV_RETRY]]\n** ^The [SQLITE_FCNTL_WIN32_AV_RETRY] opcode is used to configure automatic\n** retry counts and intervals for certain disk I/O operations for the\n** windows [VFS] in order to provide robustness in the presence of\n** anti-virus programs.  By default, the windows VFS will retry file read,\n** file write, and file delete operations up to 10 times, with a delay\n** of 25 milliseconds before the first retry and with the delay increasing\n** by an additional 25 milliseconds with each subsequent retry.  This\n** opcode allows these two values (10 retries and 25 milliseconds of delay)\n** to be adjusted.  The values are changed for all database connections\n** within the same process.  The argument is a pointer to an array of two\n** integers where the first integer is the new retry count and the second\n** integer is the delay.  If either integer is negative, then the setting\n** is not changed but instead the prior value of that setting is written\n** into the array entry, allowing the current retry settings to be\n** interrogated.  The zDbName parameter is ignored.\n**\n** <li>[[SQLITE_FCNTL_PERSIST_WAL]]\n** ^The [SQLITE_FCNTL_PERSIST_WAL] opcode is used to set or query the\n** persistent [WAL | Write Ahead Log] setting.  By default, the auxiliary\n** write ahead log ([WAL file]) and shared memory\n** files used for transaction control\n** are automatically deleted when the latest connection to the database\n** closes.  Setting persistent WAL mode causes those files to persist after\n** close.  Persisting the files is useful when other processes that do not\n** have write permission on the directory containing the database file want\n** to read the database file, as the WAL and shared memory files must exist\n** in order for the database to be readable.  The fourth parameter to\n** [sqlite3_file_control()] for this opcode should be a pointer to an integer.\n** That integer is 0 to disable persistent WAL mode or 1 to enable persistent\n** WAL mode.  If the integer is -1, then it is overwritten with the current\n** WAL persistence setting.\n**\n** <li>[[SQLITE_FCNTL_POWERSAFE_OVERWRITE]]\n** ^The [SQLITE_FCNTL_POWERSAFE_OVERWRITE] opcode is used to set or query the\n** persistent \"powersafe-overwrite\" or \"PSOW\" setting.  The PSOW setting\n** determines the [SQLITE_IOCAP_POWERSAFE_OVERWRITE] bit of the\n** xDeviceCharacteristics methods. The fourth parameter to\n** [sqlite3_file_control()] for this opcode should be a pointer to an integer.\n** That integer is 0 to disable zero-damage mode or 1 to enable zero-damage\n** mode.  If the integer is -1, then it is overwritten with the current\n** zero-damage mode setting.\n**\n** <li>[[SQLITE_FCNTL_OVERWRITE]]\n** ^The [SQLITE_FCNTL_OVERWRITE] opcode is invoked by SQLite after opening\n** a write transaction to indicate that, unless it is rolled back for some\n** reason, the entire database file will be overwritten by the current \n** transaction. This is used by VACUUM operations.\n**\n** <li>[[SQLITE_FCNTL_VFSNAME]]\n** ^The [SQLITE_FCNTL_VFSNAME] opcode can be used to obtain the names of\n** all [VFSes] in the VFS stack.  The names are of all VFS shims and the\n** final bottom-level VFS are written into memory obtained from \n** [sqlite3_malloc()] and the result is stored in the char* variable\n** that the fourth parameter of [sqlite3_file_control()] points to.\n** The caller is responsible for freeing the memory when done.  As with\n** all file-control actions, there is no guarantee that this will actually\n** do anything.  Callers should initialize the char* variable to a NULL\n** pointer in case this file-control is not implemented.  This file-control\n** is intended for diagnostic use only.\n**\n** <li>[[SQLITE_FCNTL_VFS_POINTER]]\n** ^The [SQLITE_FCNTL_VFS_POINTER] opcode finds a pointer to the top-level\n** [VFSes] currently in use.  ^(The argument X in\n** sqlite3_file_control(db,SQLITE_FCNTL_VFS_POINTER,X) must be\n** of type \"[sqlite3_vfs] **\".  This opcodes will set *X\n** to a pointer to the top-level VFS.)^\n** ^When there are multiple VFS shims in the stack, this opcode finds the\n** upper-most shim only.\n**\n** <li>[[SQLITE_FCNTL_PRAGMA]]\n** ^Whenever a [PRAGMA] statement is parsed, an [SQLITE_FCNTL_PRAGMA] \n** file control is sent to the open [sqlite3_file] object corresponding\n** to the database file to which the pragma statement refers. ^The argument\n** to the [SQLITE_FCNTL_PRAGMA] file control is an array of\n** pointers to strings (char**) in which the second element of the array\n** is the name of the pragma and the third element is the argument to the\n** pragma or NULL if the pragma has no argument.  ^The handler for an\n** [SQLITE_FCNTL_PRAGMA] file control can optionally make the first element\n** of the char** argument point to a string obtained from [sqlite3_mprintf()]\n** or the equivalent and that string will become the result of the pragma or\n** the error message if the pragma fails. ^If the\n** [SQLITE_FCNTL_PRAGMA] file control returns [SQLITE_NOTFOUND], then normal \n** [PRAGMA] processing continues.  ^If the [SQLITE_FCNTL_PRAGMA]\n** file control returns [SQLITE_OK], then the parser assumes that the\n** VFS has handled the PRAGMA itself and the parser generates a no-op\n** prepared statement if result string is NULL, or that returns a copy\n** of the result string if the string is non-NULL.\n** ^If the [SQLITE_FCNTL_PRAGMA] file control returns\n** any result code other than [SQLITE_OK] or [SQLITE_NOTFOUND], that means\n** that the VFS encountered an error while handling the [PRAGMA] and the\n** compilation of the PRAGMA fails with an error.  ^The [SQLITE_FCNTL_PRAGMA]\n** file control occurs at the beginning of pragma statement analysis and so\n** it is able to override built-in [PRAGMA] statements.\n**\n** <li>[[SQLITE_FCNTL_BUSYHANDLER]]\n** ^The [SQLITE_FCNTL_BUSYHANDLER]\n** file-control may be invoked by SQLite on the database file handle\n** shortly after it is opened in order to provide a custom VFS with access\n** to the connections busy-handler callback. The argument is of type (void **)\n** - an array of two (void *) values. The first (void *) actually points\n** to a function of type (int (*)(void *)). In order to invoke the connections\n** busy-handler, this function should be invoked with the second (void *) in\n** the array as the only argument. If it returns non-zero, then the operation\n** should be retried. If it returns zero, the custom VFS should abandon the\n** current operation.\n**\n** <li>[[SQLITE_FCNTL_TEMPFILENAME]]\n** ^Application can invoke the [SQLITE_FCNTL_TEMPFILENAME] file-control\n** to have SQLite generate a\n** temporary filename using the same algorithm that is followed to generate\n** temporary filenames for TEMP tables and other internal uses.  The\n** argument should be a char** which will be filled with the filename\n** written into memory obtained from [sqlite3_malloc()].  The caller should\n** invoke [sqlite3_free()] on the result to avoid a memory leak.\n**\n** <li>[[SQLITE_FCNTL_MMAP_SIZE]]\n** The [SQLITE_FCNTL_MMAP_SIZE] file control is used to query or set the\n** maximum number of bytes that will be used for memory-mapped I/O.\n** The argument is a pointer to a value of type sqlite3_int64 that\n** is an advisory maximum number of bytes in the file to memory map.  The\n** pointer is overwritten with the old value.  The limit is not changed if\n** the value originally pointed to is negative, and so the current limit \n** can be queried by passing in a pointer to a negative number.  This\n** file-control is used internally to implement [PRAGMA mmap_size].\n**\n** <li>[[SQLITE_FCNTL_TRACE]]\n** The [SQLITE_FCNTL_TRACE] file control provides advisory information\n** to the VFS about what the higher layers of the SQLite stack are doing.\n** This file control is used by some VFS activity tracing [shims].\n** The argument is a zero-terminated string.  Higher layers in the\n** SQLite stack may generate instances of this file control if\n** the [SQLITE_USE_FCNTL_TRACE] compile-time option is enabled.\n**\n** <li>[[SQLITE_FCNTL_HAS_MOVED]]\n** The [SQLITE_FCNTL_HAS_MOVED] file control interprets its argument as a\n** pointer to an integer and it writes a boolean into that integer depending\n** on whether or not the file has been renamed, moved, or deleted since it\n** was first opened.\n**\n** <li>[[SQLITE_FCNTL_WIN32_GET_HANDLE]]\n** The [SQLITE_FCNTL_WIN32_GET_HANDLE] opcode can be used to obtain the\n** underlying native file handle associated with a file handle.  This file\n** control interprets its argument as a pointer to a native file handle and\n** writes the resulting value there.\n**\n** <li>[[SQLITE_FCNTL_WIN32_SET_HANDLE]]\n** The [SQLITE_FCNTL_WIN32_SET_HANDLE] opcode is used for debugging.  This\n** opcode causes the xFileControl method to swap the file handle with the one\n** pointed to by the pArg argument.  This capability is used during testing\n** and only needs to be supported when SQLITE_TEST is defined.\n**\n** <li>[[SQLITE_FCNTL_WAL_BLOCK]]\n** The [SQLITE_FCNTL_WAL_BLOCK] is a signal to the VFS layer that it might\n** be advantageous to block on the next WAL lock if the lock is not immediately\n** available.  The WAL subsystem issues this signal during rare\n** circumstances in order to fix a problem with priority inversion.\n** Applications should <em>not</em> use this file-control.\n**\n** <li>[[SQLITE_FCNTL_ZIPVFS]]\n** The [SQLITE_FCNTL_ZIPVFS] opcode is implemented by zipvfs only. All other\n** VFS should return SQLITE_NOTFOUND for this opcode.\n**\n** <li>[[SQLITE_FCNTL_RBU]]\n** The [SQLITE_FCNTL_RBU] opcode is implemented by the special VFS used by\n** the RBU extension only.  All other VFS should return SQLITE_NOTFOUND for\n** this opcode.  \n**\n** <li>[[SQLITE_FCNTL_BEGIN_ATOMIC_WRITE]]\n** If the [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE] opcode returns SQLITE_OK, then\n** the file descriptor is placed in \"batch write mode\", which\n** means all subsequent write operations will be deferred and done\n** atomically at the next [SQLITE_FCNTL_COMMIT_ATOMIC_WRITE].  Systems\n** that do not support batch atomic writes will return SQLITE_NOTFOUND.\n** ^Following a successful SQLITE_FCNTL_BEGIN_ATOMIC_WRITE and prior to\n** the closing [SQLITE_FCNTL_COMMIT_ATOMIC_WRITE] or\n** [SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE], SQLite will make\n** no VFS interface calls on the same [sqlite3_file] file descriptor\n** except for calls to the xWrite method and the xFileControl method\n** with [SQLITE_FCNTL_SIZE_HINT].\n**\n** <li>[[SQLITE_FCNTL_COMMIT_ATOMIC_WRITE]]\n** The [SQLITE_FCNTL_COMMIT_ATOMIC_WRITE] opcode causes all write\n** operations since the previous successful call to \n** [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE] to be performed atomically.\n** This file control returns [SQLITE_OK] if and only if the writes were\n** all performed successfully and have been committed to persistent storage.\n** ^Regardless of whether or not it is successful, this file control takes\n** the file descriptor out of batch write mode so that all subsequent\n** write operations are independent.\n** ^SQLite will never invoke SQLITE_FCNTL_COMMIT_ATOMIC_WRITE without\n** a prior successful call to [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE].\n**\n** <li>[[SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE]]\n** The [SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE] opcode causes all write\n** operations since the previous successful call to \n** [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE] to be rolled back.\n** ^This file control takes the file descriptor out of batch write mode\n** so that all subsequent write operations are independent.\n** ^SQLite will never invoke SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE without\n** a prior successful call to [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE].\n**\n** <li>[[SQLITE_FCNTL_LOCK_TIMEOUT]]\n** The [SQLITE_FCNTL_LOCK_TIMEOUT] opcode causes attempts to obtain\n** a file lock using the xLock or xShmLock methods of the VFS to wait\n** for up to M milliseconds before failing, where M is the single \n** unsigned integer parameter.\n**\n** <li>[[SQLITE_FCNTL_DATA_VERSION]]\n** The [SQLITE_FCNTL_DATA_VERSION] opcode is used to detect changes to\n** a database file.  The argument is a pointer to a 32-bit unsigned integer.\n** The \"data version\" for the pager is written into the pointer.  The\n** \"data version\" changes whenever any change occurs to the corresponding\n** database file, either through SQL statements on the same database\n** connection or through transactions committed by separate database\n** connections possibly in other processes. The [sqlite3_total_changes()]\n** interface can be used to find if any database on the connection has changed,\n** but that interface responds to changes on TEMP as well as MAIN and does\n** not provide a mechanism to detect changes to MAIN only.  Also, the\n** [sqlite3_total_changes()] interface responds to internal changes only and\n** omits changes made by other database connections.  The\n** [PRAGMA data_version] command provide a mechanism to detect changes to\n** a single attached database that occur due to other database connections,\n** but omits changes implemented by the database connection on which it is\n** called.  This file control is the only mechanism to detect changes that\n** happen either internally or externally and that are associated with\n** a particular attached database.\n** </ul>\n*/\n#define SQLITE_FCNTL_LOCKSTATE               1\n#define SQLITE_FCNTL_GET_LOCKPROXYFILE       2\n#define SQLITE_FCNTL_SET_LOCKPROXYFILE       3\n#define SQLITE_FCNTL_LAST_ERRNO              4\n#define SQLITE_FCNTL_SIZE_HINT               5\n#define SQLITE_FCNTL_CHUNK_SIZE              6\n#define SQLITE_FCNTL_FILE_POINTER            7\n#define SQLITE_FCNTL_SYNC_OMITTED            8\n#define SQLITE_FCNTL_WIN32_AV_RETRY          9\n#define SQLITE_FCNTL_PERSIST_WAL            10\n#define SQLITE_FCNTL_OVERWRITE              11\n#define SQLITE_FCNTL_VFSNAME                12\n#define SQLITE_FCNTL_POWERSAFE_OVERWRITE    13\n#define SQLITE_FCNTL_PRAGMA                 14\n#define SQLITE_FCNTL_BUSYHANDLER            15\n#define SQLITE_FCNTL_TEMPFILENAME           16\n#define SQLITE_FCNTL_MMAP_SIZE              18\n#define SQLITE_FCNTL_TRACE                  19\n#define SQLITE_FCNTL_HAS_MOVED              20\n#define SQLITE_FCNTL_SYNC                   21\n#define SQLITE_FCNTL_COMMIT_PHASETWO        22\n#define SQLITE_FCNTL_WIN32_SET_HANDLE       23\n#define SQLITE_FCNTL_WAL_BLOCK              24\n#define SQLITE_FCNTL_ZIPVFS                 25\n#define SQLITE_FCNTL_RBU                    26\n#define SQLITE_FCNTL_VFS_POINTER            27\n#define SQLITE_FCNTL_JOURNAL_POINTER        28\n#define SQLITE_FCNTL_WIN32_GET_HANDLE       29\n#define SQLITE_FCNTL_PDB                    30\n#define SQLITE_FCNTL_BEGIN_ATOMIC_WRITE     31\n#define SQLITE_FCNTL_COMMIT_ATOMIC_WRITE    32\n#define SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE  33\n#define SQLITE_FCNTL_LOCK_TIMEOUT           34\n#define SQLITE_FCNTL_DATA_VERSION           35\n#define SQLITE_FCNTL_SIZE_LIMIT             36\n\n/* deprecated names */\n#define SQLITE_GET_LOCKPROXYFILE      SQLITE_FCNTL_GET_LOCKPROXYFILE\n#define SQLITE_SET_LOCKPROXYFILE      SQLITE_FCNTL_SET_LOCKPROXYFILE\n#define SQLITE_LAST_ERRNO             SQLITE_FCNTL_LAST_ERRNO\n\n\n/*\n** CAPI3REF: Mutex Handle\n**\n** The mutex module within SQLite defines [sqlite3_mutex] to be an\n** abstract type for a mutex object.  The SQLite core never looks\n** at the internal representation of an [sqlite3_mutex].  It only\n** deals with pointers to the [sqlite3_mutex] object.\n**\n** Mutexes are created using [sqlite3_mutex_alloc()].\n*/\ntypedef struct sqlite3_mutex sqlite3_mutex;\n\n/*\n** CAPI3REF: Loadable Extension Thunk\n**\n** A pointer to the opaque sqlite3_api_routines structure is passed as\n** the third parameter to entry points of [loadable extensions].  This\n** structure must be typedefed in order to work around compiler warnings\n** on some platforms.\n*/\ntypedef struct sqlite3_api_routines sqlite3_api_routines;\n\n/*\n** CAPI3REF: OS Interface Object\n**\n** An instance of the sqlite3_vfs object defines the interface between\n** the SQLite core and the underlying operating system.  The \"vfs\"\n** in the name of the object stands for \"virtual file system\".  See\n** the [VFS | VFS documentation] for further information.\n**\n** The VFS interface is sometimes extended by adding new methods onto\n** the end.  Each time such an extension occurs, the iVersion field\n** is incremented.  The iVersion value started out as 1 in\n** SQLite [version 3.5.0] on [dateof:3.5.0], then increased to 2\n** with SQLite [version 3.7.0] on [dateof:3.7.0], and then increased\n** to 3 with SQLite [version 3.7.6] on [dateof:3.7.6].  Additional fields\n** may be appended to the sqlite3_vfs object and the iVersion value\n** may increase again in future versions of SQLite.\n** Note that the structure\n** of the sqlite3_vfs object changes in the transition from\n** SQLite [version 3.5.9] to [version 3.6.0] on [dateof:3.6.0]\n** and yet the iVersion field was not modified.\n**\n** The szOsFile field is the size of the subclassed [sqlite3_file]\n** structure used by this VFS.  mxPathname is the maximum length of\n** a pathname in this VFS.\n**\n** Registered sqlite3_vfs objects are kept on a linked list formed by\n** the pNext pointer.  The [sqlite3_vfs_register()]\n** and [sqlite3_vfs_unregister()] interfaces manage this list\n** in a thread-safe way.  The [sqlite3_vfs_find()] interface\n** searches the list.  Neither the application code nor the VFS\n** implementation should use the pNext pointer.\n**\n** The pNext field is the only field in the sqlite3_vfs\n** structure that SQLite will ever modify.  SQLite will only access\n** or modify this field while holding a particular static mutex.\n** The application should never modify anything within the sqlite3_vfs\n** object once the object has been registered.\n**\n** The zName field holds the name of the VFS module.  The name must\n** be unique across all VFS modules.\n**\n** [[sqlite3_vfs.xOpen]]\n** ^SQLite guarantees that the zFilename parameter to xOpen\n** is either a NULL pointer or string obtained\n** from xFullPathname() with an optional suffix added.\n** ^If a suffix is added to the zFilename parameter, it will\n** consist of a single \"-\" character followed by no more than\n** 11 alphanumeric and/or \"-\" characters.\n** ^SQLite further guarantees that\n** the string will be valid and unchanged until xClose() is\n** called. Because of the previous sentence,\n** the [sqlite3_file] can safely store a pointer to the\n** filename if it needs to remember the filename for some reason.\n** If the zFilename parameter to xOpen is a NULL pointer then xOpen\n** must invent its own temporary name for the file.  ^Whenever the \n** xFilename parameter is NULL it will also be the case that the\n** flags parameter will include [SQLITE_OPEN_DELETEONCLOSE].\n**\n** The flags argument to xOpen() includes all bits set in\n** the flags argument to [sqlite3_open_v2()].  Or if [sqlite3_open()]\n** or [sqlite3_open16()] is used, then flags includes at least\n** [SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE]. \n** If xOpen() opens a file read-only then it sets *pOutFlags to\n** include [SQLITE_OPEN_READONLY].  Other bits in *pOutFlags may be set.\n**\n** ^(SQLite will also add one of the following flags to the xOpen()\n** call, depending on the object being opened:\n**\n** <ul>\n** <li>  [SQLITE_OPEN_MAIN_DB]\n** <li>  [SQLITE_OPEN_MAIN_JOURNAL]\n** <li>  [SQLITE_OPEN_TEMP_DB]\n** <li>  [SQLITE_OPEN_TEMP_JOURNAL]\n** <li>  [SQLITE_OPEN_TRANSIENT_DB]\n** <li>  [SQLITE_OPEN_SUBJOURNAL]\n** <li>  [SQLITE_OPEN_MASTER_JOURNAL]\n** <li>  [SQLITE_OPEN_WAL]\n** </ul>)^\n**\n** The file I/O implementation can use the object type flags to\n** change the way it deals with files.  For example, an application\n** that does not care about crash recovery or rollback might make\n** the open of a journal file a no-op.  Writes to this journal would\n** also be no-ops, and any attempt to read the journal would return\n** SQLITE_IOERR.  Or the implementation might recognize that a database\n** file will be doing page-aligned sector reads and writes in a random\n** order and set up its I/O subsystem accordingly.\n**\n** SQLite might also add one of the following flags to the xOpen method:\n**\n** <ul>\n** <li> [SQLITE_OPEN_DELETEONCLOSE]\n** <li> [SQLITE_OPEN_EXCLUSIVE]\n** </ul>\n**\n** The [SQLITE_OPEN_DELETEONCLOSE] flag means the file should be\n** deleted when it is closed.  ^The [SQLITE_OPEN_DELETEONCLOSE]\n** will be set for TEMP databases and their journals, transient\n** databases, and subjournals.\n**\n** ^The [SQLITE_OPEN_EXCLUSIVE] flag is always used in conjunction\n** with the [SQLITE_OPEN_CREATE] flag, which are both directly\n** analogous to the O_EXCL and O_CREAT flags of the POSIX open()\n** API.  The SQLITE_OPEN_EXCLUSIVE flag, when paired with the \n** SQLITE_OPEN_CREATE, is used to indicate that file should always\n** be created, and that it is an error if it already exists.\n** It is <i>not</i> used to indicate the file should be opened \n** for exclusive access.\n**\n** ^At least szOsFile bytes of memory are allocated by SQLite\n** to hold the  [sqlite3_file] structure passed as the third\n** argument to xOpen.  The xOpen method does not have to\n** allocate the structure; it should just fill it in.  Note that\n** the xOpen method must set the sqlite3_file.pMethods to either\n** a valid [sqlite3_io_methods] object or to NULL.  xOpen must do\n** this even if the open fails.  SQLite expects that the sqlite3_file.pMethods\n** element will be valid after xOpen returns regardless of the success\n** or failure of the xOpen call.\n**\n** [[sqlite3_vfs.xAccess]]\n** ^The flags argument to xAccess() may be [SQLITE_ACCESS_EXISTS]\n** to test for the existence of a file, or [SQLITE_ACCESS_READWRITE] to\n** test whether a file is readable and writable, or [SQLITE_ACCESS_READ]\n** to test whether a file is at least readable.   The file can be a\n** directory.\n**\n** ^SQLite will always allocate at least mxPathname+1 bytes for the\n** output buffer xFullPathname.  The exact size of the output buffer\n** is also passed as a parameter to both  methods. If the output buffer\n** is not large enough, [SQLITE_CANTOPEN] should be returned. Since this is\n** handled as a fatal error by SQLite, vfs implementations should endeavor\n** to prevent this by setting mxPathname to a sufficiently large value.\n**\n** The xRandomness(), xSleep(), xCurrentTime(), and xCurrentTimeInt64()\n** interfaces are not strictly a part of the filesystem, but they are\n** included in the VFS structure for completeness.\n** The xRandomness() function attempts to return nBytes bytes\n** of good-quality randomness into zOut.  The return value is\n** the actual number of bytes of randomness obtained.\n** The xSleep() method causes the calling thread to sleep for at\n** least the number of microseconds given.  ^The xCurrentTime()\n** method returns a Julian Day Number for the current date and time as\n** a floating point value.\n** ^The xCurrentTimeInt64() method returns, as an integer, the Julian\n** Day Number multiplied by 86400000 (the number of milliseconds in \n** a 24-hour day).  \n** ^SQLite will use the xCurrentTimeInt64() method to get the current\n** date and time if that method is available (if iVersion is 2 or \n** greater and the function pointer is not NULL) and will fall back\n** to xCurrentTime() if xCurrentTimeInt64() is unavailable.\n**\n** ^The xSetSystemCall(), xGetSystemCall(), and xNestSystemCall() interfaces\n** are not used by the SQLite core.  These optional interfaces are provided\n** by some VFSes to facilitate testing of the VFS code. By overriding \n** system calls with functions under its control, a test program can\n** simulate faults and error conditions that would otherwise be difficult\n** or impossible to induce.  The set of system calls that can be overridden\n** varies from one VFS to another, and from one version of the same VFS to the\n** next.  Applications that use these interfaces must be prepared for any\n** or all of these interfaces to be NULL or for their behavior to change\n** from one release to the next.  Applications must not attempt to access\n** any of these methods if the iVersion of the VFS is less than 3.\n*/\ntypedef struct sqlite3_vfs sqlite3_vfs;\ntypedef void (*sqlite3_syscall_ptr)(void);\nstruct sqlite3_vfs {\n  int iVersion;            /* Structure version number (currently 3) */\n  int szOsFile;            /* Size of subclassed sqlite3_file */\n  int mxPathname;          /* Maximum file pathname length */\n  sqlite3_vfs *pNext;      /* Next registered VFS */\n  const char *zName;       /* Name of this virtual file system */\n  void *pAppData;          /* Pointer to application-specific data */\n  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,\n               int flags, int *pOutFlags);\n  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);\n  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);\n  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);\n  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);\n  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);\n  void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void);\n  void (*xDlClose)(sqlite3_vfs*, void*);\n  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);\n  int (*xSleep)(sqlite3_vfs*, int microseconds);\n  int (*xCurrentTime)(sqlite3_vfs*, double*);\n  int (*xGetLastError)(sqlite3_vfs*, int, char *);\n  /*\n  ** The methods above are in version 1 of the sqlite_vfs object\n  ** definition.  Those that follow are added in version 2 or later\n  */\n  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);\n  /*\n  ** The methods above are in versions 1 and 2 of the sqlite_vfs object.\n  ** Those below are for version 3 and greater.\n  */\n  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);\n  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);\n  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);\n  /*\n  ** The methods above are in versions 1 through 3 of the sqlite_vfs object.\n  ** New fields may be appended in future versions.  The iVersion\n  ** value will increment whenever this happens. \n  */\n};\n\n/*\n** CAPI3REF: Flags for the xAccess VFS method\n**\n** These integer constants can be used as the third parameter to\n** the xAccess method of an [sqlite3_vfs] object.  They determine\n** what kind of permissions the xAccess method is looking for.\n** With SQLITE_ACCESS_EXISTS, the xAccess method\n** simply checks whether the file exists.\n** With SQLITE_ACCESS_READWRITE, the xAccess method\n** checks whether the named directory is both readable and writable\n** (in other words, if files can be added, removed, and renamed within\n** the directory).\n** The SQLITE_ACCESS_READWRITE constant is currently used only by the\n** [temp_store_directory pragma], though this could change in a future\n** release of SQLite.\n** With SQLITE_ACCESS_READ, the xAccess method\n** checks whether the file is readable.  The SQLITE_ACCESS_READ constant is\n** currently unused, though it might be used in a future release of\n** SQLite.\n*/\n#define SQLITE_ACCESS_EXISTS    0\n#define SQLITE_ACCESS_READWRITE 1   /* Used by PRAGMA temp_store_directory */\n#define SQLITE_ACCESS_READ      2   /* Unused */\n\n/*\n** CAPI3REF: Flags for the xShmLock VFS method\n**\n** These integer constants define the various locking operations\n** allowed by the xShmLock method of [sqlite3_io_methods].  The\n** following are the only legal combinations of flags to the\n** xShmLock method:\n**\n** <ul>\n** <li>  SQLITE_SHM_LOCK | SQLITE_SHM_SHARED\n** <li>  SQLITE_SHM_LOCK | SQLITE_SHM_EXCLUSIVE\n** <li>  SQLITE_SHM_UNLOCK | SQLITE_SHM_SHARED\n** <li>  SQLITE_SHM_UNLOCK | SQLITE_SHM_EXCLUSIVE\n** </ul>\n**\n** When unlocking, the same SHARED or EXCLUSIVE flag must be supplied as\n** was given on the corresponding lock.  \n**\n** The xShmLock method can transition between unlocked and SHARED or\n** between unlocked and EXCLUSIVE.  It cannot transition between SHARED\n** and EXCLUSIVE.\n*/\n#define SQLITE_SHM_UNLOCK       1\n#define SQLITE_SHM_LOCK         2\n#define SQLITE_SHM_SHARED       4\n#define SQLITE_SHM_EXCLUSIVE    8\n\n/*\n** CAPI3REF: Maximum xShmLock index\n**\n** The xShmLock method on [sqlite3_io_methods] may use values\n** between 0 and this upper bound as its \"offset\" argument.\n** The SQLite core will never attempt to acquire or release a\n** lock outside of this range\n*/\n#define SQLITE_SHM_NLOCK        8\n\n\n/*\n** CAPI3REF: Initialize The SQLite Library\n**\n** ^The sqlite3_initialize() routine initializes the\n** SQLite library.  ^The sqlite3_shutdown() routine\n** deallocates any resources that were allocated by sqlite3_initialize().\n** These routines are designed to aid in process initialization and\n** shutdown on embedded systems.  Workstation applications using\n** SQLite normally do not need to invoke either of these routines.\n**\n** A call to sqlite3_initialize() is an \"effective\" call if it is\n** the first time sqlite3_initialize() is invoked during the lifetime of\n** the process, or if it is the first time sqlite3_initialize() is invoked\n** following a call to sqlite3_shutdown().  ^(Only an effective call\n** of sqlite3_initialize() does any initialization.  All other calls\n** are harmless no-ops.)^\n**\n** A call to sqlite3_shutdown() is an \"effective\" call if it is the first\n** call to sqlite3_shutdown() since the last sqlite3_initialize().  ^(Only\n** an effective call to sqlite3_shutdown() does any deinitialization.\n** All other valid calls to sqlite3_shutdown() are harmless no-ops.)^\n**\n** The sqlite3_initialize() interface is threadsafe, but sqlite3_shutdown()\n** is not.  The sqlite3_shutdown() interface must only be called from a\n** single thread.  All open [database connections] must be closed and all\n** other SQLite resources must be deallocated prior to invoking\n** sqlite3_shutdown().\n**\n** Among other things, ^sqlite3_initialize() will invoke\n** sqlite3_os_init().  Similarly, ^sqlite3_shutdown()\n** will invoke sqlite3_os_end().\n**\n** ^The sqlite3_initialize() routine returns [SQLITE_OK] on success.\n** ^If for some reason, sqlite3_initialize() is unable to initialize\n** the library (perhaps it is unable to allocate a needed resource such\n** as a mutex) it returns an [error code] other than [SQLITE_OK].\n**\n** ^The sqlite3_initialize() routine is called internally by many other\n** SQLite interfaces so that an application usually does not need to\n** invoke sqlite3_initialize() directly.  For example, [sqlite3_open()]\n** calls sqlite3_initialize() so the SQLite library will be automatically\n** initialized when [sqlite3_open()] is called if it has not be initialized\n** already.  ^However, if SQLite is compiled with the [SQLITE_OMIT_AUTOINIT]\n** compile-time option, then the automatic calls to sqlite3_initialize()\n** are omitted and the application must call sqlite3_initialize() directly\n** prior to using any other SQLite interface.  For maximum portability,\n** it is recommended that applications always invoke sqlite3_initialize()\n** directly prior to using any other SQLite interface.  Future releases\n** of SQLite may require this.  In other words, the behavior exhibited\n** when SQLite is compiled with [SQLITE_OMIT_AUTOINIT] might become the\n** default behavior in some future release of SQLite.\n**\n** The sqlite3_os_init() routine does operating-system specific\n** initialization of the SQLite library.  The sqlite3_os_end()\n** routine undoes the effect of sqlite3_os_init().  Typical tasks\n** performed by these routines include allocation or deallocation\n** of static resources, initialization of global variables,\n** setting up a default [sqlite3_vfs] module, or setting up\n** a default configuration using [sqlite3_config()].\n**\n** The application should never invoke either sqlite3_os_init()\n** or sqlite3_os_end() directly.  The application should only invoke\n** sqlite3_initialize() and sqlite3_shutdown().  The sqlite3_os_init()\n** interface is called automatically by sqlite3_initialize() and\n** sqlite3_os_end() is called by sqlite3_shutdown().  Appropriate\n** implementations for sqlite3_os_init() and sqlite3_os_end()\n** are built into SQLite when it is compiled for Unix, Windows, or OS/2.\n** When [custom builds | built for other platforms]\n** (using the [SQLITE_OS_OTHER=1] compile-time\n** option) the application must supply a suitable implementation for\n** sqlite3_os_init() and sqlite3_os_end().  An application-supplied\n** implementation of sqlite3_os_init() or sqlite3_os_end()\n** must return [SQLITE_OK] on success and some other [error code] upon\n** failure.\n*/\nSQLITE_API int sqlite3_initialize(void);\nSQLITE_API int sqlite3_shutdown(void);\nSQLITE_API int sqlite3_os_init(void);\nSQLITE_API int sqlite3_os_end(void);\n\n/*\n** CAPI3REF: Configuring The SQLite Library\n**\n** The sqlite3_config() interface is used to make global configuration\n** changes to SQLite in order to tune SQLite to the specific needs of\n** the application.  The default configuration is recommended for most\n** applications and so this routine is usually not necessary.  It is\n** provided to support rare applications with unusual needs.\n**\n** <b>The sqlite3_config() interface is not threadsafe. The application\n** must ensure that no other SQLite interfaces are invoked by other\n** threads while sqlite3_config() is running.</b>\n**\n** The sqlite3_config() interface\n** may only be invoked prior to library initialization using\n** [sqlite3_initialize()] or after shutdown by [sqlite3_shutdown()].\n** ^If sqlite3_config() is called after [sqlite3_initialize()] and before\n** [sqlite3_shutdown()] then it will return SQLITE_MISUSE.\n** Note, however, that ^sqlite3_config() can be called as part of the\n** implementation of an application-defined [sqlite3_os_init()].\n**\n** The first argument to sqlite3_config() is an integer\n** [configuration option] that determines\n** what property of SQLite is to be configured.  Subsequent arguments\n** vary depending on the [configuration option]\n** in the first argument.\n**\n** ^When a configuration option is set, sqlite3_config() returns [SQLITE_OK].\n** ^If the option is unknown or SQLite is unable to set the option\n** then this routine returns a non-zero [error code].\n*/\nSQLITE_API int sqlite3_config(int, ...);\n\n/*\n** CAPI3REF: Configure database connections\n** METHOD: sqlite3\n**\n** The sqlite3_db_config() interface is used to make configuration\n** changes to a [database connection].  The interface is similar to\n** [sqlite3_config()] except that the changes apply to a single\n** [database connection] (specified in the first argument).\n**\n** The second argument to sqlite3_db_config(D,V,...)  is the\n** [SQLITE_DBCONFIG_LOOKASIDE | configuration verb] - an integer code \n** that indicates what aspect of the [database connection] is being configured.\n** Subsequent arguments vary depending on the configuration verb.\n**\n** ^Calls to sqlite3_db_config() return SQLITE_OK if and only if\n** the call is considered successful.\n*/\nSQLITE_API int sqlite3_db_config(sqlite3*, int op, ...);\n\n/*\n** CAPI3REF: Memory Allocation Routines\n**\n** An instance of this object defines the interface between SQLite\n** and low-level memory allocation routines.\n**\n** This object is used in only one place in the SQLite interface.\n** A pointer to an instance of this object is the argument to\n** [sqlite3_config()] when the configuration option is\n** [SQLITE_CONFIG_MALLOC] or [SQLITE_CONFIG_GETMALLOC].  \n** By creating an instance of this object\n** and passing it to [sqlite3_config]([SQLITE_CONFIG_MALLOC])\n** during configuration, an application can specify an alternative\n** memory allocation subsystem for SQLite to use for all of its\n** dynamic memory needs.\n**\n** Note that SQLite comes with several [built-in memory allocators]\n** that are perfectly adequate for the overwhelming majority of applications\n** and that this object is only useful to a tiny minority of applications\n** with specialized memory allocation requirements.  This object is\n** also used during testing of SQLite in order to specify an alternative\n** memory allocator that simulates memory out-of-memory conditions in\n** order to verify that SQLite recovers gracefully from such\n** conditions.\n**\n** The xMalloc, xRealloc, and xFree methods must work like the\n** malloc(), realloc() and free() functions from the standard C library.\n** ^SQLite guarantees that the second argument to\n** xRealloc is always a value returned by a prior call to xRoundup.\n**\n** xSize should return the allocated size of a memory allocation\n** previously obtained from xMalloc or xRealloc.  The allocated size\n** is always at least as big as the requested size but may be larger.\n**\n** The xRoundup method returns what would be the allocated size of\n** a memory allocation given a particular requested size.  Most memory\n** allocators round up memory allocations at least to the next multiple\n** of 8.  Some allocators round up to a larger multiple or to a power of 2.\n** Every memory allocation request coming in through [sqlite3_malloc()]\n** or [sqlite3_realloc()] first calls xRoundup.  If xRoundup returns 0, \n** that causes the corresponding memory allocation to fail.\n**\n** The xInit method initializes the memory allocator.  For example,\n** it might allocate any require mutexes or initialize internal data\n** structures.  The xShutdown method is invoked (indirectly) by\n** [sqlite3_shutdown()] and should deallocate any resources acquired\n** by xInit.  The pAppData pointer is used as the only parameter to\n** xInit and xShutdown.\n**\n** SQLite holds the [SQLITE_MUTEX_STATIC_MASTER] mutex when it invokes\n** the xInit method, so the xInit method need not be threadsafe.  The\n** xShutdown method is only called from [sqlite3_shutdown()] so it does\n** not need to be threadsafe either.  For all other methods, SQLite\n** holds the [SQLITE_MUTEX_STATIC_MEM] mutex as long as the\n** [SQLITE_CONFIG_MEMSTATUS] configuration option is turned on (which\n** it is by default) and so the methods are automatically serialized.\n** However, if [SQLITE_CONFIG_MEMSTATUS] is disabled, then the other\n** methods must be threadsafe or else make their own arrangements for\n** serialization.\n**\n** SQLite will never invoke xInit() more than once without an intervening\n** call to xShutdown().\n*/\ntypedef struct sqlite3_mem_methods sqlite3_mem_methods;\nstruct sqlite3_mem_methods {\n  void *(*xMalloc)(int);         /* Memory allocation function */\n  void (*xFree)(void*);          /* Free a prior allocation */\n  void *(*xRealloc)(void*,int);  /* Resize an allocation */\n  int (*xSize)(void*);           /* Return the size of an allocation */\n  int (*xRoundup)(int);          /* Round up request size to allocation size */\n  int (*xInit)(void*);           /* Initialize the memory allocator */\n  void (*xShutdown)(void*);      /* Deinitialize the memory allocator */\n  void *pAppData;                /* Argument to xInit() and xShutdown() */\n};\n\n/*\n** CAPI3REF: Configuration Options\n** KEYWORDS: {configuration option}\n**\n** These constants are the available integer configuration options that\n** can be passed as the first argument to the [sqlite3_config()] interface.\n**\n** New configuration options may be added in future releases of SQLite.\n** Existing configuration options might be discontinued.  Applications\n** should check the return code from [sqlite3_config()] to make sure that\n** the call worked.  The [sqlite3_config()] interface will return a\n** non-zero [error code] if a discontinued or unsupported configuration option\n** is invoked.\n**\n** <dl>\n** [[SQLITE_CONFIG_SINGLETHREAD]] <dt>SQLITE_CONFIG_SINGLETHREAD</dt>\n** <dd>There are no arguments to this option.  ^This option sets the\n** [threading mode] to Single-thread.  In other words, it disables\n** all mutexing and puts SQLite into a mode where it can only be used\n** by a single thread.   ^If SQLite is compiled with\n** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then\n** it is not possible to change the [threading mode] from its default\n** value of Single-thread and so [sqlite3_config()] will return \n** [SQLITE_ERROR] if called with the SQLITE_CONFIG_SINGLETHREAD\n** configuration option.</dd>\n**\n** [[SQLITE_CONFIG_MULTITHREAD]] <dt>SQLITE_CONFIG_MULTITHREAD</dt>\n** <dd>There are no arguments to this option.  ^This option sets the\n** [threading mode] to Multi-thread.  In other words, it disables\n** mutexing on [database connection] and [prepared statement] objects.\n** The application is responsible for serializing access to\n** [database connections] and [prepared statements].  But other mutexes\n** are enabled so that SQLite will be safe to use in a multi-threaded\n** environment as long as no two threads attempt to use the same\n** [database connection] at the same time.  ^If SQLite is compiled with\n** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then\n** it is not possible to set the Multi-thread [threading mode] and\n** [sqlite3_config()] will return [SQLITE_ERROR] if called with the\n** SQLITE_CONFIG_MULTITHREAD configuration option.</dd>\n**\n** [[SQLITE_CONFIG_SERIALIZED]] <dt>SQLITE_CONFIG_SERIALIZED</dt>\n** <dd>There are no arguments to this option.  ^This option sets the\n** [threading mode] to Serialized. In other words, this option enables\n** all mutexes including the recursive\n** mutexes on [database connection] and [prepared statement] objects.\n** In this mode (which is the default when SQLite is compiled with\n** [SQLITE_THREADSAFE=1]) the SQLite library will itself serialize access\n** to [database connections] and [prepared statements] so that the\n** application is free to use the same [database connection] or the\n** same [prepared statement] in different threads at the same time.\n** ^If SQLite is compiled with\n** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then\n** it is not possible to set the Serialized [threading mode] and\n** [sqlite3_config()] will return [SQLITE_ERROR] if called with the\n** SQLITE_CONFIG_SERIALIZED configuration option.</dd>\n**\n** [[SQLITE_CONFIG_MALLOC]] <dt>SQLITE_CONFIG_MALLOC</dt>\n** <dd> ^(The SQLITE_CONFIG_MALLOC option takes a single argument which is \n** a pointer to an instance of the [sqlite3_mem_methods] structure.\n** The argument specifies\n** alternative low-level memory allocation routines to be used in place of\n** the memory allocation routines built into SQLite.)^ ^SQLite makes\n** its own private copy of the content of the [sqlite3_mem_methods] structure\n** before the [sqlite3_config()] call returns.</dd>\n**\n** [[SQLITE_CONFIG_GETMALLOC]] <dt>SQLITE_CONFIG_GETMALLOC</dt>\n** <dd> ^(The SQLITE_CONFIG_GETMALLOC option takes a single argument which\n** is a pointer to an instance of the [sqlite3_mem_methods] structure.\n** The [sqlite3_mem_methods]\n** structure is filled with the currently defined memory allocation routines.)^\n** This option can be used to overload the default memory allocation\n** routines with a wrapper that simulations memory allocation failure or\n** tracks memory usage, for example. </dd>\n**\n** [[SQLITE_CONFIG_SMALL_MALLOC]] <dt>SQLITE_CONFIG_SMALL_MALLOC</dt>\n** <dd> ^The SQLITE_CONFIG_SMALL_MALLOC option takes single argument of\n** type int, interpreted as a boolean, which if true provides a hint to\n** SQLite that it should avoid large memory allocations if possible.\n** SQLite will run faster if it is free to make large memory allocations,\n** but some application might prefer to run slower in exchange for\n** guarantees about memory fragmentation that are possible if large\n** allocations are avoided.  This hint is normally off.\n** </dd>\n**\n** [[SQLITE_CONFIG_MEMSTATUS]] <dt>SQLITE_CONFIG_MEMSTATUS</dt>\n** <dd> ^The SQLITE_CONFIG_MEMSTATUS option takes single argument of type int,\n** interpreted as a boolean, which enables or disables the collection of\n** memory allocation statistics. ^(When memory allocation statistics are\n** disabled, the following SQLite interfaces become non-operational:\n**   <ul>\n**   <li> [sqlite3_memory_used()]\n**   <li> [sqlite3_memory_highwater()]\n**   <li> [sqlite3_soft_heap_limit64()]\n**   <li> [sqlite3_status64()]\n**   </ul>)^\n** ^Memory allocation statistics are enabled by default unless SQLite is\n** compiled with [SQLITE_DEFAULT_MEMSTATUS]=0 in which case memory\n** allocation statistics are disabled by default.\n** </dd>\n**\n** [[SQLITE_CONFIG_SCRATCH]] <dt>SQLITE_CONFIG_SCRATCH</dt>\n** <dd> The SQLITE_CONFIG_SCRATCH option is no longer used.\n** </dd>\n**\n** [[SQLITE_CONFIG_PAGECACHE]] <dt>SQLITE_CONFIG_PAGECACHE</dt>\n** <dd> ^The SQLITE_CONFIG_PAGECACHE option specifies a memory pool\n** that SQLite can use for the database page cache with the default page\n** cache implementation.  \n** This configuration option is a no-op if an application-define page\n** cache implementation is loaded using the [SQLITE_CONFIG_PCACHE2].\n** ^There are three arguments to SQLITE_CONFIG_PAGECACHE: A pointer to\n** 8-byte aligned memory (pMem), the size of each page cache line (sz),\n** and the number of cache lines (N).\n** The sz argument should be the size of the largest database page\n** (a power of two between 512 and 65536) plus some extra bytes for each\n** page header.  ^The number of extra bytes needed by the page header\n** can be determined using [SQLITE_CONFIG_PCACHE_HDRSZ].\n** ^It is harmless, apart from the wasted memory,\n** for the sz parameter to be larger than necessary.  The pMem\n** argument must be either a NULL pointer or a pointer to an 8-byte\n** aligned block of memory of at least sz*N bytes, otherwise\n** subsequent behavior is undefined.\n** ^When pMem is not NULL, SQLite will strive to use the memory provided\n** to satisfy page cache needs, falling back to [sqlite3_malloc()] if\n** a page cache line is larger than sz bytes or if all of the pMem buffer\n** is exhausted.\n** ^If pMem is NULL and N is non-zero, then each database connection\n** does an initial bulk allocation for page cache memory\n** from [sqlite3_malloc()] sufficient for N cache lines if N is positive or\n** of -1024*N bytes if N is negative, . ^If additional\n** page cache memory is needed beyond what is provided by the initial\n** allocation, then SQLite goes to [sqlite3_malloc()] separately for each\n** additional cache line. </dd>\n**\n** [[SQLITE_CONFIG_HEAP]] <dt>SQLITE_CONFIG_HEAP</dt>\n** <dd> ^The SQLITE_CONFIG_HEAP option specifies a static memory buffer \n** that SQLite will use for all of its dynamic memory allocation needs\n** beyond those provided for by [SQLITE_CONFIG_PAGECACHE].\n** ^The SQLITE_CONFIG_HEAP option is only available if SQLite is compiled\n** with either [SQLITE_ENABLE_MEMSYS3] or [SQLITE_ENABLE_MEMSYS5] and returns\n** [SQLITE_ERROR] if invoked otherwise.\n** ^There are three arguments to SQLITE_CONFIG_HEAP:\n** An 8-byte aligned pointer to the memory,\n** the number of bytes in the memory buffer, and the minimum allocation size.\n** ^If the first pointer (the memory pointer) is NULL, then SQLite reverts\n** to using its default memory allocator (the system malloc() implementation),\n** undoing any prior invocation of [SQLITE_CONFIG_MALLOC].  ^If the\n** memory pointer is not NULL then the alternative memory\n** allocator is engaged to handle all of SQLites memory allocation needs.\n** The first pointer (the memory pointer) must be aligned to an 8-byte\n** boundary or subsequent behavior of SQLite will be undefined.\n** The minimum allocation size is capped at 2**12. Reasonable values\n** for the minimum allocation size are 2**5 through 2**8.</dd>\n**\n** [[SQLITE_CONFIG_MUTEX]] <dt>SQLITE_CONFIG_MUTEX</dt>\n** <dd> ^(The SQLITE_CONFIG_MUTEX option takes a single argument which is a\n** pointer to an instance of the [sqlite3_mutex_methods] structure.\n** The argument specifies alternative low-level mutex routines to be used\n** in place the mutex routines built into SQLite.)^  ^SQLite makes a copy of\n** the content of the [sqlite3_mutex_methods] structure before the call to\n** [sqlite3_config()] returns. ^If SQLite is compiled with\n** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then\n** the entire mutexing subsystem is omitted from the build and hence calls to\n** [sqlite3_config()] with the SQLITE_CONFIG_MUTEX configuration option will\n** return [SQLITE_ERROR].</dd>\n**\n** [[SQLITE_CONFIG_GETMUTEX]] <dt>SQLITE_CONFIG_GETMUTEX</dt>\n** <dd> ^(The SQLITE_CONFIG_GETMUTEX option takes a single argument which\n** is a pointer to an instance of the [sqlite3_mutex_methods] structure.  The\n** [sqlite3_mutex_methods]\n** structure is filled with the currently defined mutex routines.)^\n** This option can be used to overload the default mutex allocation\n** routines with a wrapper used to track mutex usage for performance\n** profiling or testing, for example.   ^If SQLite is compiled with\n** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then\n** the entire mutexing subsystem is omitted from the build and hence calls to\n** [sqlite3_config()] with the SQLITE_CONFIG_GETMUTEX configuration option will\n** return [SQLITE_ERROR].</dd>\n**\n** [[SQLITE_CONFIG_LOOKASIDE]] <dt>SQLITE_CONFIG_LOOKASIDE</dt>\n** <dd> ^(The SQLITE_CONFIG_LOOKASIDE option takes two arguments that determine\n** the default size of lookaside memory on each [database connection].\n** The first argument is the\n** size of each lookaside buffer slot and the second is the number of\n** slots allocated to each database connection.)^  ^(SQLITE_CONFIG_LOOKASIDE\n** sets the <i>default</i> lookaside size. The [SQLITE_DBCONFIG_LOOKASIDE]\n** option to [sqlite3_db_config()] can be used to change the lookaside\n** configuration on individual connections.)^ </dd>\n**\n** [[SQLITE_CONFIG_PCACHE2]] <dt>SQLITE_CONFIG_PCACHE2</dt>\n** <dd> ^(The SQLITE_CONFIG_PCACHE2 option takes a single argument which is \n** a pointer to an [sqlite3_pcache_methods2] object.  This object specifies\n** the interface to a custom page cache implementation.)^\n** ^SQLite makes a copy of the [sqlite3_pcache_methods2] object.</dd>\n**\n** [[SQLITE_CONFIG_GETPCACHE2]] <dt>SQLITE_CONFIG_GETPCACHE2</dt>\n** <dd> ^(The SQLITE_CONFIG_GETPCACHE2 option takes a single argument which\n** is a pointer to an [sqlite3_pcache_methods2] object.  SQLite copies of\n** the current page cache implementation into that object.)^ </dd>\n**\n** [[SQLITE_CONFIG_LOG]] <dt>SQLITE_CONFIG_LOG</dt>\n** <dd> The SQLITE_CONFIG_LOG option is used to configure the SQLite\n** global [error log].\n** (^The SQLITE_CONFIG_LOG option takes two arguments: a pointer to a\n** function with a call signature of void(*)(void*,int,const char*), \n** and a pointer to void. ^If the function pointer is not NULL, it is\n** invoked by [sqlite3_log()] to process each logging event.  ^If the\n** function pointer is NULL, the [sqlite3_log()] interface becomes a no-op.\n** ^The void pointer that is the second argument to SQLITE_CONFIG_LOG is\n** passed through as the first parameter to the application-defined logger\n** function whenever that function is invoked.  ^The second parameter to\n** the logger function is a copy of the first parameter to the corresponding\n** [sqlite3_log()] call and is intended to be a [result code] or an\n** [extended result code].  ^The third parameter passed to the logger is\n** log message after formatting via [sqlite3_snprintf()].\n** The SQLite logging interface is not reentrant; the logger function\n** supplied by the application must not invoke any SQLite interface.\n** In a multi-threaded application, the application-defined logger\n** function must be threadsafe. </dd>\n**\n** [[SQLITE_CONFIG_URI]] <dt>SQLITE_CONFIG_URI\n** <dd>^(The SQLITE_CONFIG_URI option takes a single argument of type int.\n** If non-zero, then URI handling is globally enabled. If the parameter is zero,\n** then URI handling is globally disabled.)^ ^If URI handling is globally\n** enabled, all filenames passed to [sqlite3_open()], [sqlite3_open_v2()],\n** [sqlite3_open16()] or\n** specified as part of [ATTACH] commands are interpreted as URIs, regardless\n** of whether or not the [SQLITE_OPEN_URI] flag is set when the database\n** connection is opened. ^If it is globally disabled, filenames are\n** only interpreted as URIs if the SQLITE_OPEN_URI flag is set when the\n** database connection is opened. ^(By default, URI handling is globally\n** disabled. The default value may be changed by compiling with the\n** [SQLITE_USE_URI] symbol defined.)^\n**\n** [[SQLITE_CONFIG_COVERING_INDEX_SCAN]] <dt>SQLITE_CONFIG_COVERING_INDEX_SCAN\n** <dd>^The SQLITE_CONFIG_COVERING_INDEX_SCAN option takes a single integer\n** argument which is interpreted as a boolean in order to enable or disable\n** the use of covering indices for full table scans in the query optimizer.\n** ^The default setting is determined\n** by the [SQLITE_ALLOW_COVERING_INDEX_SCAN] compile-time option, or is \"on\"\n** if that compile-time option is omitted.\n** The ability to disable the use of covering indices for full table scans\n** is because some incorrectly coded legacy applications might malfunction\n** when the optimization is enabled.  Providing the ability to\n** disable the optimization allows the older, buggy application code to work\n** without change even with newer versions of SQLite.\n**\n** [[SQLITE_CONFIG_PCACHE]] [[SQLITE_CONFIG_GETPCACHE]]\n** <dt>SQLITE_CONFIG_PCACHE and SQLITE_CONFIG_GETPCACHE\n** <dd> These options are obsolete and should not be used by new code.\n** They are retained for backwards compatibility but are now no-ops.\n** </dd>\n**\n** [[SQLITE_CONFIG_SQLLOG]]\n** <dt>SQLITE_CONFIG_SQLLOG\n** <dd>This option is only available if sqlite is compiled with the\n** [SQLITE_ENABLE_SQLLOG] pre-processor macro defined. The first argument should\n** be a pointer to a function of type void(*)(void*,sqlite3*,const char*, int).\n** The second should be of type (void*). The callback is invoked by the library\n** in three separate circumstances, identified by the value passed as the\n** fourth parameter. If the fourth parameter is 0, then the database connection\n** passed as the second argument has just been opened. The third argument\n** points to a buffer containing the name of the main database file. If the\n** fourth parameter is 1, then the SQL statement that the third parameter\n** points to has just been executed. Or, if the fourth parameter is 2, then\n** the connection being passed as the second parameter is being closed. The\n** third parameter is passed NULL In this case.  An example of using this\n** configuration option can be seen in the \"test_sqllog.c\" source file in\n** the canonical SQLite source tree.</dd>\n**\n** [[SQLITE_CONFIG_MMAP_SIZE]]\n** <dt>SQLITE_CONFIG_MMAP_SIZE\n** <dd>^SQLITE_CONFIG_MMAP_SIZE takes two 64-bit integer (sqlite3_int64) values\n** that are the default mmap size limit (the default setting for\n** [PRAGMA mmap_size]) and the maximum allowed mmap size limit.\n** ^The default setting can be overridden by each database connection using\n** either the [PRAGMA mmap_size] command, or by using the\n** [SQLITE_FCNTL_MMAP_SIZE] file control.  ^(The maximum allowed mmap size\n** will be silently truncated if necessary so that it does not exceed the\n** compile-time maximum mmap size set by the\n** [SQLITE_MAX_MMAP_SIZE] compile-time option.)^\n** ^If either argument to this option is negative, then that argument is\n** changed to its compile-time default.\n**\n** [[SQLITE_CONFIG_WIN32_HEAPSIZE]]\n** <dt>SQLITE_CONFIG_WIN32_HEAPSIZE\n** <dd>^The SQLITE_CONFIG_WIN32_HEAPSIZE option is only available if SQLite is\n** compiled for Windows with the [SQLITE_WIN32_MALLOC] pre-processor macro\n** defined. ^SQLITE_CONFIG_WIN32_HEAPSIZE takes a 32-bit unsigned integer value\n** that specifies the maximum size of the created heap.\n**\n** [[SQLITE_CONFIG_PCACHE_HDRSZ]]\n** <dt>SQLITE_CONFIG_PCACHE_HDRSZ\n** <dd>^The SQLITE_CONFIG_PCACHE_HDRSZ option takes a single parameter which\n** is a pointer to an integer and writes into that integer the number of extra\n** bytes per page required for each page in [SQLITE_CONFIG_PAGECACHE].\n** The amount of extra space required can change depending on the compiler,\n** target platform, and SQLite version.\n**\n** [[SQLITE_CONFIG_PMASZ]]\n** <dt>SQLITE_CONFIG_PMASZ\n** <dd>^The SQLITE_CONFIG_PMASZ option takes a single parameter which\n** is an unsigned integer and sets the \"Minimum PMA Size\" for the multithreaded\n** sorter to that integer.  The default minimum PMA Size is set by the\n** [SQLITE_SORTER_PMASZ] compile-time option.  New threads are launched\n** to help with sort operations when multithreaded sorting\n** is enabled (using the [PRAGMA threads] command) and the amount of content\n** to be sorted exceeds the page size times the minimum of the\n** [PRAGMA cache_size] setting and this value.\n**\n** [[SQLITE_CONFIG_STMTJRNL_SPILL]]\n** <dt>SQLITE_CONFIG_STMTJRNL_SPILL\n** <dd>^The SQLITE_CONFIG_STMTJRNL_SPILL option takes a single parameter which\n** becomes the [statement journal] spill-to-disk threshold.  \n** [Statement journals] are held in memory until their size (in bytes)\n** exceeds this threshold, at which point they are written to disk.\n** Or if the threshold is -1, statement journals are always held\n** exclusively in memory.\n** Since many statement journals never become large, setting the spill\n** threshold to a value such as 64KiB can greatly reduce the amount of\n** I/O required to support statement rollback.\n** The default value for this setting is controlled by the\n** [SQLITE_STMTJRNL_SPILL] compile-time option.\n**\n** [[SQLITE_CONFIG_SORTERREF_SIZE]]\n** <dt>SQLITE_CONFIG_SORTERREF_SIZE\n** <dd>The SQLITE_CONFIG_SORTERREF_SIZE option accepts a single parameter\n** of type (int) - the new value of the sorter-reference size threshold.\n** Usually, when SQLite uses an external sort to order records according\n** to an ORDER BY clause, all fields required by the caller are present in the\n** sorted records. However, if SQLite determines based on the declared type\n** of a table column that its values are likely to be very large - larger\n** than the configured sorter-reference size threshold - then a reference\n** is stored in each sorted record and the required column values loaded\n** from the database as records are returned in sorted order. The default\n** value for this option is to never use this optimization. Specifying a \n** negative value for this option restores the default behaviour.\n** This option is only available if SQLite is compiled with the\n** [SQLITE_ENABLE_SORTER_REFERENCES] compile-time option.\n**\n** [[SQLITE_CONFIG_MEMDB_MAXSIZE]]\n** <dt>SQLITE_CONFIG_MEMDB_MAXSIZE\n** <dd>The SQLITE_CONFIG_MEMDB_MAXSIZE option accepts a single parameter\n** [sqlite3_int64] parameter which is the default maximum size for an in-memory\n** database created using [sqlite3_deserialize()].  This default maximum\n** size can be adjusted up or down for individual databases using the\n** [SQLITE_FCNTL_SIZE_LIMIT] [sqlite3_file_control|file-control].  If this\n** configuration setting is never used, then the default maximum is determined\n** by the [SQLITE_MEMDB_DEFAULT_MAXSIZE] compile-time option.  If that\n** compile-time option is not set, then the default maximum is 1073741824.\n** </dl>\n*/\n#define SQLITE_CONFIG_SINGLETHREAD  1  /* nil */\n#define SQLITE_CONFIG_MULTITHREAD   2  /* nil */\n#define SQLITE_CONFIG_SERIALIZED    3  /* nil */\n#define SQLITE_CONFIG_MALLOC        4  /* sqlite3_mem_methods* */\n#define SQLITE_CONFIG_GETMALLOC     5  /* sqlite3_mem_methods* */\n#define SQLITE_CONFIG_SCRATCH       6  /* No longer used */\n#define SQLITE_CONFIG_PAGECACHE     7  /* void*, int sz, int N */\n#define SQLITE_CONFIG_HEAP          8  /* void*, int nByte, int min */\n#define SQLITE_CONFIG_MEMSTATUS     9  /* boolean */\n#define SQLITE_CONFIG_MUTEX        10  /* sqlite3_mutex_methods* */\n#define SQLITE_CONFIG_GETMUTEX     11  /* sqlite3_mutex_methods* */\n/* previously SQLITE_CONFIG_CHUNKALLOC 12 which is now unused. */ \n#define SQLITE_CONFIG_LOOKASIDE    13  /* int int */\n#define SQLITE_CONFIG_PCACHE       14  /* no-op */\n#define SQLITE_CONFIG_GETPCACHE    15  /* no-op */\n#define SQLITE_CONFIG_LOG          16  /* xFunc, void* */\n#define SQLITE_CONFIG_URI          17  /* int */\n#define SQLITE_CONFIG_PCACHE2      18  /* sqlite3_pcache_methods2* */\n#define SQLITE_CONFIG_GETPCACHE2   19  /* sqlite3_pcache_methods2* */\n#define SQLITE_CONFIG_COVERING_INDEX_SCAN 20  /* int */\n#define SQLITE_CONFIG_SQLLOG       21  /* xSqllog, void* */\n#define SQLITE_CONFIG_MMAP_SIZE    22  /* sqlite3_int64, sqlite3_int64 */\n#define SQLITE_CONFIG_WIN32_HEAPSIZE      23  /* int nByte */\n#define SQLITE_CONFIG_PCACHE_HDRSZ        24  /* int *psz */\n#define SQLITE_CONFIG_PMASZ               25  /* unsigned int szPma */\n#define SQLITE_CONFIG_STMTJRNL_SPILL      26  /* int nByte */\n#define SQLITE_CONFIG_SMALL_MALLOC        27  /* boolean */\n#define SQLITE_CONFIG_SORTERREF_SIZE      28  /* int nByte */\n#define SQLITE_CONFIG_MEMDB_MAXSIZE       29  /* sqlite3_int64 */\n\n/*\n** CAPI3REF: Database Connection Configuration Options\n**\n** These constants are the available integer configuration options that\n** can be passed as the second argument to the [sqlite3_db_config()] interface.\n**\n** New configuration options may be added in future releases of SQLite.\n** Existing configuration options might be discontinued.  Applications\n** should check the return code from [sqlite3_db_config()] to make sure that\n** the call worked.  ^The [sqlite3_db_config()] interface will return a\n** non-zero [error code] if a discontinued or unsupported configuration option\n** is invoked.\n**\n** <dl>\n** [[SQLITE_DBCONFIG_LOOKASIDE]]\n** <dt>SQLITE_DBCONFIG_LOOKASIDE</dt>\n** <dd> ^This option takes three additional arguments that determine the \n** [lookaside memory allocator] configuration for the [database connection].\n** ^The first argument (the third parameter to [sqlite3_db_config()] is a\n** pointer to a memory buffer to use for lookaside memory.\n** ^The first argument after the SQLITE_DBCONFIG_LOOKASIDE verb\n** may be NULL in which case SQLite will allocate the\n** lookaside buffer itself using [sqlite3_malloc()]. ^The second argument is the\n** size of each lookaside buffer slot.  ^The third argument is the number of\n** slots.  The size of the buffer in the first argument must be greater than\n** or equal to the product of the second and third arguments.  The buffer\n** must be aligned to an 8-byte boundary.  ^If the second argument to\n** SQLITE_DBCONFIG_LOOKASIDE is not a multiple of 8, it is internally\n** rounded down to the next smaller multiple of 8.  ^(The lookaside memory\n** configuration for a database connection can only be changed when that\n** connection is not currently using lookaside memory, or in other words\n** when the \"current value\" returned by\n** [sqlite3_db_status](D,[SQLITE_CONFIG_LOOKASIDE],...) is zero.\n** Any attempt to change the lookaside memory configuration when lookaside\n** memory is in use leaves the configuration unchanged and returns \n** [SQLITE_BUSY].)^</dd>\n**\n** [[SQLITE_DBCONFIG_ENABLE_FKEY]]\n** <dt>SQLITE_DBCONFIG_ENABLE_FKEY</dt>\n** <dd> ^This option is used to enable or disable the enforcement of\n** [foreign key constraints].  There should be two additional arguments.\n** The first argument is an integer which is 0 to disable FK enforcement,\n** positive to enable FK enforcement or negative to leave FK enforcement\n** unchanged.  The second parameter is a pointer to an integer into which\n** is written 0 or 1 to indicate whether FK enforcement is off or on\n** following this call.  The second parameter may be a NULL pointer, in\n** which case the FK enforcement setting is not reported back. </dd>\n**\n** [[SQLITE_DBCONFIG_ENABLE_TRIGGER]]\n** <dt>SQLITE_DBCONFIG_ENABLE_TRIGGER</dt>\n** <dd> ^This option is used to enable or disable [CREATE TRIGGER | triggers].\n** There should be two additional arguments.\n** The first argument is an integer which is 0 to disable triggers,\n** positive to enable triggers or negative to leave the setting unchanged.\n** The second parameter is a pointer to an integer into which\n** is written 0 or 1 to indicate whether triggers are disabled or enabled\n** following this call.  The second parameter may be a NULL pointer, in\n** which case the trigger setting is not reported back. </dd>\n**\n** [[SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER]]\n** <dt>SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER</dt>\n** <dd> ^This option is used to enable or disable the two-argument\n** version of the [fts3_tokenizer()] function which is part of the\n** [FTS3] full-text search engine extension.\n** There should be two additional arguments.\n** The first argument is an integer which is 0 to disable fts3_tokenizer() or\n** positive to enable fts3_tokenizer() or negative to leave the setting\n** unchanged.\n** The second parameter is a pointer to an integer into which\n** is written 0 or 1 to indicate whether fts3_tokenizer is disabled or enabled\n** following this call.  The second parameter may be a NULL pointer, in\n** which case the new setting is not reported back. </dd>\n**\n** [[SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION]]\n** <dt>SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION</dt>\n** <dd> ^This option is used to enable or disable the [sqlite3_load_extension()]\n** interface independently of the [load_extension()] SQL function.\n** The [sqlite3_enable_load_extension()] API enables or disables both the\n** C-API [sqlite3_load_extension()] and the SQL function [load_extension()].\n** There should be two additional arguments.\n** When the first argument to this interface is 1, then only the C-API is\n** enabled and the SQL function remains disabled.  If the first argument to\n** this interface is 0, then both the C-API and the SQL function are disabled.\n** If the first argument is -1, then no changes are made to state of either the\n** C-API or the SQL function.\n** The second parameter is a pointer to an integer into which\n** is written 0 or 1 to indicate whether [sqlite3_load_extension()] interface\n** is disabled or enabled following this call.  The second parameter may\n** be a NULL pointer, in which case the new setting is not reported back.\n** </dd>\n**\n** [[SQLITE_DBCONFIG_MAINDBNAME]] <dt>SQLITE_DBCONFIG_MAINDBNAME</dt>\n** <dd> ^This option is used to change the name of the \"main\" database\n** schema.  ^The sole argument is a pointer to a constant UTF8 string\n** which will become the new schema name in place of \"main\".  ^SQLite\n** does not make a copy of the new main schema name string, so the application\n** must ensure that the argument passed into this DBCONFIG option is unchanged\n** until after the database connection closes.\n** </dd>\n**\n** [[SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE]] \n** <dt>SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE</dt>\n** <dd> Usually, when a database in wal mode is closed or detached from a \n** database handle, SQLite checks if this will mean that there are now no \n** connections at all to the database. If so, it performs a checkpoint \n** operation before closing the connection. This option may be used to\n** override this behaviour. The first parameter passed to this operation\n** is an integer - positive to disable checkpoints-on-close, or zero (the\n** default) to enable them, and negative to leave the setting unchanged.\n** The second parameter is a pointer to an integer\n** into which is written 0 or 1 to indicate whether checkpoints-on-close\n** have been disabled - 0 if they are not disabled, 1 if they are.\n** </dd>\n**\n** [[SQLITE_DBCONFIG_ENABLE_QPSG]] <dt>SQLITE_DBCONFIG_ENABLE_QPSG</dt>\n** <dd>^(The SQLITE_DBCONFIG_ENABLE_QPSG option activates or deactivates\n** the [query planner stability guarantee] (QPSG).  When the QPSG is active,\n** a single SQL query statement will always use the same algorithm regardless\n** of values of [bound parameters].)^ The QPSG disables some query optimizations\n** that look at the values of bound parameters, which can make some queries\n** slower.  But the QPSG has the advantage of more predictable behavior.  With\n** the QPSG active, SQLite will always use the same query plan in the field as\n** was used during testing in the lab.\n** The first argument to this setting is an integer which is 0 to disable \n** the QPSG, positive to enable QPSG, or negative to leave the setting\n** unchanged. The second parameter is a pointer to an integer into which\n** is written 0 or 1 to indicate whether the QPSG is disabled or enabled\n** following this call.\n** </dd>\n**\n** [[SQLITE_DBCONFIG_TRIGGER_EQP]] <dt>SQLITE_DBCONFIG_TRIGGER_EQP</dt>\n** <dd> By default, the output of EXPLAIN QUERY PLAN commands does not \n** include output for any operations performed by trigger programs. This\n** option is used to set or clear (the default) a flag that governs this\n** behavior. The first parameter passed to this operation is an integer -\n** positive to enable output for trigger programs, or zero to disable it,\n** or negative to leave the setting unchanged.\n** The second parameter is a pointer to an integer into which is written \n** 0 or 1 to indicate whether output-for-triggers has been disabled - 0 if \n** it is not disabled, 1 if it is.  \n** </dd>\n**\n** [[SQLITE_DBCONFIG_RESET_DATABASE]] <dt>SQLITE_DBCONFIG_RESET_DATABASE</dt>\n** <dd> Set the SQLITE_DBCONFIG_RESET_DATABASE flag and then run\n** [VACUUM] in order to reset a database back to an empty database\n** with no schema and no content. The following process works even for\n** a badly corrupted database file:\n** <ol>\n** <li> If the database connection is newly opened, make sure it has read the\n**      database schema by preparing then discarding some query against the\n**      database, or calling sqlite3_table_column_metadata(), ignoring any\n**      errors.  This step is only necessary if the application desires to keep\n**      the database in WAL mode after the reset if it was in WAL mode before\n**      the reset.  \n** <li> sqlite3_db_config(db, SQLITE_DBCONFIG_RESET_DATABASE, 1, 0);\n** <li> [sqlite3_exec](db, \"[VACUUM]\", 0, 0, 0);\n** <li> sqlite3_db_config(db, SQLITE_DBCONFIG_RESET_DATABASE, 0, 0);\n** </ol>\n** Because resetting a database is destructive and irreversible, the\n** process requires the use of this obscure API and multiple steps to help\n** ensure that it does not happen by accident.\n**\n** [[SQLITE_DBCONFIG_DEFENSIVE]] <dt>SQLITE_DBCONFIG_DEFENSIVE</dt>\n** <dd>The SQLITE_DBCONFIG_DEFENSIVE option activates or deactivates the\n** \"defensive\" flag for a database connection.  When the defensive\n** flag is enabled, language features that allow ordinary SQL to \n** deliberately corrupt the database file are disabled.  The disabled\n** features include but are not limited to the following:\n** <ul>\n** <li> The [PRAGMA writable_schema=ON] statement.\n** <li> Writes to the [sqlite_dbpage] virtual table.\n** <li> Direct writes to [shadow tables].\n** </ul>\n** </dd>\n** </dl>\n*/\n#define SQLITE_DBCONFIG_MAINDBNAME            1000 /* const char* */\n#define SQLITE_DBCONFIG_LOOKASIDE             1001 /* void* int int */\n#define SQLITE_DBCONFIG_ENABLE_FKEY           1002 /* int int* */\n#define SQLITE_DBCONFIG_ENABLE_TRIGGER        1003 /* int int* */\n#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1004 /* int int* */\n#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION 1005 /* int int* */\n#define SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      1006 /* int int* */\n#define SQLITE_DBCONFIG_ENABLE_QPSG           1007 /* int int* */\n#define SQLITE_DBCONFIG_TRIGGER_EQP           1008 /* int int* */\n#define SQLITE_DBCONFIG_RESET_DATABASE        1009 /* int int* */\n#define SQLITE_DBCONFIG_DEFENSIVE             1010 /* int int* */\n#define SQLITE_DBCONFIG_MAX                   1010 /* Largest DBCONFIG */\n\n/*\n** CAPI3REF: Enable Or Disable Extended Result Codes\n** METHOD: sqlite3\n**\n** ^The sqlite3_extended_result_codes() routine enables or disables the\n** [extended result codes] feature of SQLite. ^The extended result\n** codes are disabled by default for historical compatibility.\n*/\nSQLITE_API int sqlite3_extended_result_codes(sqlite3*, int onoff);\n\n/*\n** CAPI3REF: Last Insert Rowid\n** METHOD: sqlite3\n**\n** ^Each entry in most SQLite tables (except for [WITHOUT ROWID] tables)\n** has a unique 64-bit signed\n** integer key called the [ROWID | \"rowid\"]. ^The rowid is always available\n** as an undeclared column named ROWID, OID, or _ROWID_ as long as those\n** names are not also used by explicitly declared columns. ^If\n** the table has a column of type [INTEGER PRIMARY KEY] then that column\n** is another alias for the rowid.\n**\n** ^The sqlite3_last_insert_rowid(D) interface usually returns the [rowid] of\n** the most recent successful [INSERT] into a rowid table or [virtual table]\n** on database connection D. ^Inserts into [WITHOUT ROWID] tables are not\n** recorded. ^If no successful [INSERT]s into rowid tables have ever occurred \n** on the database connection D, then sqlite3_last_insert_rowid(D) returns \n** zero.\n**\n** As well as being set automatically as rows are inserted into database\n** tables, the value returned by this function may be set explicitly by\n** [sqlite3_set_last_insert_rowid()]\n**\n** Some virtual table implementations may INSERT rows into rowid tables as\n** part of committing a transaction (e.g. to flush data accumulated in memory\n** to disk). In this case subsequent calls to this function return the rowid\n** associated with these internal INSERT operations, which leads to \n** unintuitive results. Virtual table implementations that do write to rowid\n** tables in this way can avoid this problem by restoring the original \n** rowid value using [sqlite3_set_last_insert_rowid()] before returning \n** control to the user.\n**\n** ^(If an [INSERT] occurs within a trigger then this routine will \n** return the [rowid] of the inserted row as long as the trigger is \n** running. Once the trigger program ends, the value returned \n** by this routine reverts to what it was before the trigger was fired.)^\n**\n** ^An [INSERT] that fails due to a constraint violation is not a\n** successful [INSERT] and does not change the value returned by this\n** routine.  ^Thus INSERT OR FAIL, INSERT OR IGNORE, INSERT OR ROLLBACK,\n** and INSERT OR ABORT make no changes to the return value of this\n** routine when their insertion fails.  ^(When INSERT OR REPLACE\n** encounters a constraint violation, it does not fail.  The\n** INSERT continues to completion after deleting rows that caused\n** the constraint problem so INSERT OR REPLACE will always change\n** the return value of this interface.)^\n**\n** ^For the purposes of this routine, an [INSERT] is considered to\n** be successful even if it is subsequently rolled back.\n**\n** This function is accessible to SQL statements via the\n** [last_insert_rowid() SQL function].\n**\n** If a separate thread performs a new [INSERT] on the same\n** database connection while the [sqlite3_last_insert_rowid()]\n** function is running and thus changes the last insert [rowid],\n** then the value returned by [sqlite3_last_insert_rowid()] is\n** unpredictable and might not equal either the old or the new\n** last insert [rowid].\n*/\nSQLITE_API sqlite3_int64 sqlite3_last_insert_rowid(sqlite3*);\n\n/*\n** CAPI3REF: Set the Last Insert Rowid value.\n** METHOD: sqlite3\n**\n** The sqlite3_set_last_insert_rowid(D, R) method allows the application to\n** set the value returned by calling sqlite3_last_insert_rowid(D) to R \n** without inserting a row into the database.\n*/\nSQLITE_API void sqlite3_set_last_insert_rowid(sqlite3*,sqlite3_int64);\n\n/*\n** CAPI3REF: Count The Number Of Rows Modified\n** METHOD: sqlite3\n**\n** ^This function returns the number of rows modified, inserted or\n** deleted by the most recently completed INSERT, UPDATE or DELETE\n** statement on the database connection specified by the only parameter.\n** ^Executing any other type of SQL statement does not modify the value\n** returned by this function.\n**\n** ^Only changes made directly by the INSERT, UPDATE or DELETE statement are\n** considered - auxiliary changes caused by [CREATE TRIGGER | triggers], \n** [foreign key actions] or [REPLACE] constraint resolution are not counted.\n** \n** Changes to a view that are intercepted by \n** [INSTEAD OF trigger | INSTEAD OF triggers] are not counted. ^The value \n** returned by sqlite3_changes() immediately after an INSERT, UPDATE or \n** DELETE statement run on a view is always zero. Only changes made to real \n** tables are counted.\n**\n** Things are more complicated if the sqlite3_changes() function is\n** executed while a trigger program is running. This may happen if the\n** program uses the [changes() SQL function], or if some other callback\n** function invokes sqlite3_changes() directly. Essentially:\n** \n** <ul>\n**   <li> ^(Before entering a trigger program the value returned by\n**        sqlite3_changes() function is saved. After the trigger program \n**        has finished, the original value is restored.)^\n** \n**   <li> ^(Within a trigger program each INSERT, UPDATE and DELETE \n**        statement sets the value returned by sqlite3_changes() \n**        upon completion as normal. Of course, this value will not include \n**        any changes performed by sub-triggers, as the sqlite3_changes() \n**        value will be saved and restored after each sub-trigger has run.)^\n** </ul>\n** \n** ^This means that if the changes() SQL function (or similar) is used\n** by the first INSERT, UPDATE or DELETE statement within a trigger, it \n** returns the value as set when the calling statement began executing.\n** ^If it is used by the second or subsequent such statement within a trigger \n** program, the value returned reflects the number of rows modified by the \n** previous INSERT, UPDATE or DELETE statement within the same trigger.\n**\n** If a separate thread makes changes on the same database connection\n** while [sqlite3_changes()] is running then the value returned\n** is unpredictable and not meaningful.\n**\n** See also:\n** <ul>\n** <li> the [sqlite3_total_changes()] interface\n** <li> the [count_changes pragma]\n** <li> the [changes() SQL function]\n** <li> the [data_version pragma]\n** </ul>\n*/\nSQLITE_API int sqlite3_changes(sqlite3*);\n\n/*\n** CAPI3REF: Total Number Of Rows Modified\n** METHOD: sqlite3\n**\n** ^This function returns the total number of rows inserted, modified or\n** deleted by all [INSERT], [UPDATE] or [DELETE] statements completed\n** since the database connection was opened, including those executed as\n** part of trigger programs. ^Executing any other type of SQL statement\n** does not affect the value returned by sqlite3_total_changes().\n** \n** ^Changes made as part of [foreign key actions] are included in the\n** count, but those made as part of REPLACE constraint resolution are\n** not. ^Changes to a view that are intercepted by INSTEAD OF triggers \n** are not counted.\n**\n** The [sqlite3_total_changes(D)] interface only reports the number\n** of rows that changed due to SQL statement run against database\n** connection D.  Any changes by other database connections are ignored.\n** To detect changes against a database file from other database\n** connections use the [PRAGMA data_version] command or the\n** [SQLITE_FCNTL_DATA_VERSION] [file control].\n** \n** If a separate thread makes changes on the same database connection\n** while [sqlite3_total_changes()] is running then the value\n** returned is unpredictable and not meaningful.\n**\n** See also:\n** <ul>\n** <li> the [sqlite3_changes()] interface\n** <li> the [count_changes pragma]\n** <li> the [changes() SQL function]\n** <li> the [data_version pragma]\n** <li> the [SQLITE_FCNTL_DATA_VERSION] [file control]\n** </ul>\n*/\nSQLITE_API int sqlite3_total_changes(sqlite3*);\n\n/*\n** CAPI3REF: Interrupt A Long-Running Query\n** METHOD: sqlite3\n**\n** ^This function causes any pending database operation to abort and\n** return at its earliest opportunity. This routine is typically\n** called in response to a user action such as pressing \"Cancel\"\n** or Ctrl-C where the user wants a long query operation to halt\n** immediately.\n**\n** ^It is safe to call this routine from a thread different from the\n** thread that is currently running the database operation.  But it\n** is not safe to call this routine with a [database connection] that\n** is closed or might close before sqlite3_interrupt() returns.\n**\n** ^If an SQL operation is very nearly finished at the time when\n** sqlite3_interrupt() is called, then it might not have an opportunity\n** to be interrupted and might continue to completion.\n**\n** ^An SQL operation that is interrupted will return [SQLITE_INTERRUPT].\n** ^If the interrupted SQL operation is an INSERT, UPDATE, or DELETE\n** that is inside an explicit transaction, then the entire transaction\n** will be rolled back automatically.\n**\n** ^The sqlite3_interrupt(D) call is in effect until all currently running\n** SQL statements on [database connection] D complete.  ^Any new SQL statements\n** that are started after the sqlite3_interrupt() call and before the \n** running statements reaches zero are interrupted as if they had been\n** running prior to the sqlite3_interrupt() call.  ^New SQL statements\n** that are started after the running statement count reaches zero are\n** not effected by the sqlite3_interrupt().\n** ^A call to sqlite3_interrupt(D) that occurs when there are no running\n** SQL statements is a no-op and has no effect on SQL statements\n** that are started after the sqlite3_interrupt() call returns.\n*/\nSQLITE_API void sqlite3_interrupt(sqlite3*);\n\n/*\n** CAPI3REF: Determine If An SQL Statement Is Complete\n**\n** These routines are useful during command-line input to determine if the\n** currently entered text seems to form a complete SQL statement or\n** if additional input is needed before sending the text into\n** SQLite for parsing.  ^These routines return 1 if the input string\n** appears to be a complete SQL statement.  ^A statement is judged to be\n** complete if it ends with a semicolon token and is not a prefix of a\n** well-formed CREATE TRIGGER statement.  ^Semicolons that are embedded within\n** string literals or quoted identifier names or comments are not\n** independent tokens (they are part of the token in which they are\n** embedded) and thus do not count as a statement terminator.  ^Whitespace\n** and comments that follow the final semicolon are ignored.\n**\n** ^These routines return 0 if the statement is incomplete.  ^If a\n** memory allocation fails, then SQLITE_NOMEM is returned.\n**\n** ^These routines do not parse the SQL statements thus\n** will not detect syntactically incorrect SQL.\n**\n** ^(If SQLite has not been initialized using [sqlite3_initialize()] prior \n** to invoking sqlite3_complete16() then sqlite3_initialize() is invoked\n** automatically by sqlite3_complete16().  If that initialization fails,\n** then the return value from sqlite3_complete16() will be non-zero\n** regardless of whether or not the input SQL is complete.)^\n**\n** The input to [sqlite3_complete()] must be a zero-terminated\n** UTF-8 string.\n**\n** The input to [sqlite3_complete16()] must be a zero-terminated\n** UTF-16 string in native byte order.\n*/\nSQLITE_API int sqlite3_complete(const char *sql);\nSQLITE_API int sqlite3_complete16(const void *sql);\n\n/*\n** CAPI3REF: Register A Callback To Handle SQLITE_BUSY Errors\n** KEYWORDS: {busy-handler callback} {busy handler}\n** METHOD: sqlite3\n**\n** ^The sqlite3_busy_handler(D,X,P) routine sets a callback function X\n** that might be invoked with argument P whenever\n** an attempt is made to access a database table associated with\n** [database connection] D when another thread\n** or process has the table locked.\n** The sqlite3_busy_handler() interface is used to implement\n** [sqlite3_busy_timeout()] and [PRAGMA busy_timeout].\n**\n** ^If the busy callback is NULL, then [SQLITE_BUSY]\n** is returned immediately upon encountering the lock.  ^If the busy callback\n** is not NULL, then the callback might be invoked with two arguments.\n**\n** ^The first argument to the busy handler is a copy of the void* pointer which\n** is the third argument to sqlite3_busy_handler().  ^The second argument to\n** the busy handler callback is the number of times that the busy handler has\n** been invoked previously for the same locking event.  ^If the\n** busy callback returns 0, then no additional attempts are made to\n** access the database and [SQLITE_BUSY] is returned\n** to the application.\n** ^If the callback returns non-zero, then another attempt\n** is made to access the database and the cycle repeats.\n**\n** The presence of a busy handler does not guarantee that it will be invoked\n** when there is lock contention. ^If SQLite determines that invoking the busy\n** handler could result in a deadlock, it will go ahead and return [SQLITE_BUSY]\n** to the application instead of invoking the \n** busy handler.\n** Consider a scenario where one process is holding a read lock that\n** it is trying to promote to a reserved lock and\n** a second process is holding a reserved lock that it is trying\n** to promote to an exclusive lock.  The first process cannot proceed\n** because it is blocked by the second and the second process cannot\n** proceed because it is blocked by the first.  If both processes\n** invoke the busy handlers, neither will make any progress.  Therefore,\n** SQLite returns [SQLITE_BUSY] for the first process, hoping that this\n** will induce the first process to release its read lock and allow\n** the second process to proceed.\n**\n** ^The default busy callback is NULL.\n**\n** ^(There can only be a single busy handler defined for each\n** [database connection].  Setting a new busy handler clears any\n** previously set handler.)^  ^Note that calling [sqlite3_busy_timeout()]\n** or evaluating [PRAGMA busy_timeout=N] will change the\n** busy handler and thus clear any previously set busy handler.\n**\n** The busy callback should not take any actions which modify the\n** database connection that invoked the busy handler.  In other words,\n** the busy handler is not reentrant.  Any such actions\n** result in undefined behavior.\n** \n** A busy handler must not close the database connection\n** or [prepared statement] that invoked the busy handler.\n*/\nSQLITE_API int sqlite3_busy_handler(sqlite3*,int(*)(void*,int),void*);\n\n/*\n** CAPI3REF: Set A Busy Timeout\n** METHOD: sqlite3\n**\n** ^This routine sets a [sqlite3_busy_handler | busy handler] that sleeps\n** for a specified amount of time when a table is locked.  ^The handler\n** will sleep multiple times until at least \"ms\" milliseconds of sleeping\n** have accumulated.  ^After at least \"ms\" milliseconds of sleeping,\n** the handler returns 0 which causes [sqlite3_step()] to return\n** [SQLITE_BUSY].\n**\n** ^Calling this routine with an argument less than or equal to zero\n** turns off all busy handlers.\n**\n** ^(There can only be a single busy handler for a particular\n** [database connection] at any given moment.  If another busy handler\n** was defined  (using [sqlite3_busy_handler()]) prior to calling\n** this routine, that other busy handler is cleared.)^\n**\n** See also:  [PRAGMA busy_timeout]\n*/\nSQLITE_API int sqlite3_busy_timeout(sqlite3*, int ms);\n\n/*\n** CAPI3REF: Convenience Routines For Running Queries\n** METHOD: sqlite3\n**\n** This is a legacy interface that is preserved for backwards compatibility.\n** Use of this interface is not recommended.\n**\n** Definition: A <b>result table</b> is memory data structure created by the\n** [sqlite3_get_table()] interface.  A result table records the\n** complete query results from one or more queries.\n**\n** The table conceptually has a number of rows and columns.  But\n** these numbers are not part of the result table itself.  These\n** numbers are obtained separately.  Let N be the number of rows\n** and M be the number of columns.\n**\n** A result table is an array of pointers to zero-terminated UTF-8 strings.\n** There are (N+1)*M elements in the array.  The first M pointers point\n** to zero-terminated strings that  contain the names of the columns.\n** The remaining entries all point to query results.  NULL values result\n** in NULL pointers.  All other values are in their UTF-8 zero-terminated\n** string representation as returned by [sqlite3_column_text()].\n**\n** A result table might consist of one or more memory allocations.\n** It is not safe to pass a result table directly to [sqlite3_free()].\n** A result table should be deallocated using [sqlite3_free_table()].\n**\n** ^(As an example of the result table format, suppose a query result\n** is as follows:\n**\n** <blockquote><pre>\n**        Name        | Age\n**        -----------------------\n**        Alice       | 43\n**        Bob         | 28\n**        Cindy       | 21\n** </pre></blockquote>\n**\n** There are two column (M==2) and three rows (N==3).  Thus the\n** result table has 8 entries.  Suppose the result table is stored\n** in an array names azResult.  Then azResult holds this content:\n**\n** <blockquote><pre>\n**        azResult&#91;0] = \"Name\";\n**        azResult&#91;1] = \"Age\";\n**        azResult&#91;2] = \"Alice\";\n**        azResult&#91;3] = \"43\";\n**        azResult&#91;4] = \"Bob\";\n**        azResult&#91;5] = \"28\";\n**        azResult&#91;6] = \"Cindy\";\n**        azResult&#91;7] = \"21\";\n** </pre></blockquote>)^\n**\n** ^The sqlite3_get_table() function evaluates one or more\n** semicolon-separated SQL statements in the zero-terminated UTF-8\n** string of its 2nd parameter and returns a result table to the\n** pointer given in its 3rd parameter.\n**\n** After the application has finished with the result from sqlite3_get_table(),\n** it must pass the result table pointer to sqlite3_free_table() in order to\n** release the memory that was malloced.  Because of the way the\n** [sqlite3_malloc()] happens within sqlite3_get_table(), the calling\n** function must not try to call [sqlite3_free()] directly.  Only\n** [sqlite3_free_table()] is able to release the memory properly and safely.\n**\n** The sqlite3_get_table() interface is implemented as a wrapper around\n** [sqlite3_exec()].  The sqlite3_get_table() routine does not have access\n** to any internal data structures of SQLite.  It uses only the public\n** interface defined here.  As a consequence, errors that occur in the\n** wrapper layer outside of the internal [sqlite3_exec()] call are not\n** reflected in subsequent calls to [sqlite3_errcode()] or\n** [sqlite3_errmsg()].\n*/\nSQLITE_API int sqlite3_get_table(\n  sqlite3 *db,          /* An open database */\n  const char *zSql,     /* SQL to be evaluated */\n  char ***pazResult,    /* Results of the query */\n  int *pnRow,           /* Number of result rows written here */\n  int *pnColumn,        /* Number of result columns written here */\n  char **pzErrmsg       /* Error msg written here */\n);\nSQLITE_API void sqlite3_free_table(char **result);\n\n/*\n** CAPI3REF: Formatted String Printing Functions\n**\n** These routines are work-alikes of the \"printf()\" family of functions\n** from the standard C library.\n** These routines understand most of the common formatting options from\n** the standard library printf() \n** plus some additional non-standard formats ([%q], [%Q], [%w], and [%z]).\n** See the [built-in printf()] documentation for details.\n**\n** ^The sqlite3_mprintf() and sqlite3_vmprintf() routines write their\n** results into memory obtained from [sqlite3_malloc64()].\n** The strings returned by these two routines should be\n** released by [sqlite3_free()].  ^Both routines return a\n** NULL pointer if [sqlite3_malloc64()] is unable to allocate enough\n** memory to hold the resulting string.\n**\n** ^(The sqlite3_snprintf() routine is similar to \"snprintf()\" from\n** the standard C library.  The result is written into the\n** buffer supplied as the second parameter whose size is given by\n** the first parameter. Note that the order of the\n** first two parameters is reversed from snprintf().)^  This is an\n** historical accident that cannot be fixed without breaking\n** backwards compatibility.  ^(Note also that sqlite3_snprintf()\n** returns a pointer to its buffer instead of the number of\n** characters actually written into the buffer.)^  We admit that\n** the number of characters written would be a more useful return\n** value but we cannot change the implementation of sqlite3_snprintf()\n** now without breaking compatibility.\n**\n** ^As long as the buffer size is greater than zero, sqlite3_snprintf()\n** guarantees that the buffer is always zero-terminated.  ^The first\n** parameter \"n\" is the total size of the buffer, including space for\n** the zero terminator.  So the longest string that can be completely\n** written will be n-1 characters.\n**\n** ^The sqlite3_vsnprintf() routine is a varargs version of sqlite3_snprintf().\n**\n** See also:  [built-in printf()], [printf() SQL function]\n*/\nSQLITE_API char *sqlite3_mprintf(const char*,...);\nSQLITE_API char *sqlite3_vmprintf(const char*, va_list);\nSQLITE_API char *sqlite3_snprintf(int,char*,const char*, ...);\nSQLITE_API char *sqlite3_vsnprintf(int,char*,const char*, va_list);\n\n/*\n** CAPI3REF: Memory Allocation Subsystem\n**\n** The SQLite core uses these three routines for all of its own\n** internal memory allocation needs. \"Core\" in the previous sentence\n** does not include operating-system specific VFS implementation.  The\n** Windows VFS uses native malloc() and free() for some operations.\n**\n** ^The sqlite3_malloc() routine returns a pointer to a block\n** of memory at least N bytes in length, where N is the parameter.\n** ^If sqlite3_malloc() is unable to obtain sufficient free\n** memory, it returns a NULL pointer.  ^If the parameter N to\n** sqlite3_malloc() is zero or negative then sqlite3_malloc() returns\n** a NULL pointer.\n**\n** ^The sqlite3_malloc64(N) routine works just like\n** sqlite3_malloc(N) except that N is an unsigned 64-bit integer instead\n** of a signed 32-bit integer.\n**\n** ^Calling sqlite3_free() with a pointer previously returned\n** by sqlite3_malloc() or sqlite3_realloc() releases that memory so\n** that it might be reused.  ^The sqlite3_free() routine is\n** a no-op if is called with a NULL pointer.  Passing a NULL pointer\n** to sqlite3_free() is harmless.  After being freed, memory\n** should neither be read nor written.  Even reading previously freed\n** memory might result in a segmentation fault or other severe error.\n** Memory corruption, a segmentation fault, or other severe error\n** might result if sqlite3_free() is called with a non-NULL pointer that\n** was not obtained from sqlite3_malloc() or sqlite3_realloc().\n**\n** ^The sqlite3_realloc(X,N) interface attempts to resize a\n** prior memory allocation X to be at least N bytes.\n** ^If the X parameter to sqlite3_realloc(X,N)\n** is a NULL pointer then its behavior is identical to calling\n** sqlite3_malloc(N).\n** ^If the N parameter to sqlite3_realloc(X,N) is zero or\n** negative then the behavior is exactly the same as calling\n** sqlite3_free(X).\n** ^sqlite3_realloc(X,N) returns a pointer to a memory allocation\n** of at least N bytes in size or NULL if insufficient memory is available.\n** ^If M is the size of the prior allocation, then min(N,M) bytes\n** of the prior allocation are copied into the beginning of buffer returned\n** by sqlite3_realloc(X,N) and the prior allocation is freed.\n** ^If sqlite3_realloc(X,N) returns NULL and N is positive, then the\n** prior allocation is not freed.\n**\n** ^The sqlite3_realloc64(X,N) interfaces works the same as\n** sqlite3_realloc(X,N) except that N is a 64-bit unsigned integer instead\n** of a 32-bit signed integer.\n**\n** ^If X is a memory allocation previously obtained from sqlite3_malloc(),\n** sqlite3_malloc64(), sqlite3_realloc(), or sqlite3_realloc64(), then\n** sqlite3_msize(X) returns the size of that memory allocation in bytes.\n** ^The value returned by sqlite3_msize(X) might be larger than the number\n** of bytes requested when X was allocated.  ^If X is a NULL pointer then\n** sqlite3_msize(X) returns zero.  If X points to something that is not\n** the beginning of memory allocation, or if it points to a formerly\n** valid memory allocation that has now been freed, then the behavior\n** of sqlite3_msize(X) is undefined and possibly harmful.\n**\n** ^The memory returned by sqlite3_malloc(), sqlite3_realloc(),\n** sqlite3_malloc64(), and sqlite3_realloc64()\n** is always aligned to at least an 8 byte boundary, or to a\n** 4 byte boundary if the [SQLITE_4_BYTE_ALIGNED_MALLOC] compile-time\n** option is used.\n**\n** In SQLite version 3.5.0 and 3.5.1, it was possible to define\n** the SQLITE_OMIT_MEMORY_ALLOCATION which would cause the built-in\n** implementation of these routines to be omitted.  That capability\n** is no longer provided.  Only built-in memory allocators can be used.\n**\n** Prior to SQLite version 3.7.10, the Windows OS interface layer called\n** the system malloc() and free() directly when converting\n** filenames between the UTF-8 encoding used by SQLite\n** and whatever filename encoding is used by the particular Windows\n** installation.  Memory allocation errors were detected, but\n** they were reported back as [SQLITE_CANTOPEN] or\n** [SQLITE_IOERR] rather than [SQLITE_NOMEM].\n**\n** The pointer arguments to [sqlite3_free()] and [sqlite3_realloc()]\n** must be either NULL or else pointers obtained from a prior\n** invocation of [sqlite3_malloc()] or [sqlite3_realloc()] that have\n** not yet been released.\n**\n** The application must not read or write any part of\n** a block of memory after it has been released using\n** [sqlite3_free()] or [sqlite3_realloc()].\n*/\nSQLITE_API void *sqlite3_malloc(int);\nSQLITE_API void *sqlite3_malloc64(sqlite3_uint64);\nSQLITE_API void *sqlite3_realloc(void*, int);\nSQLITE_API void *sqlite3_realloc64(void*, sqlite3_uint64);\nSQLITE_API void sqlite3_free(void*);\nSQLITE_API sqlite3_uint64 sqlite3_msize(void*);\n\n/*\n** CAPI3REF: Memory Allocator Statistics\n**\n** SQLite provides these two interfaces for reporting on the status\n** of the [sqlite3_malloc()], [sqlite3_free()], and [sqlite3_realloc()]\n** routines, which form the built-in memory allocation subsystem.\n**\n** ^The [sqlite3_memory_used()] routine returns the number of bytes\n** of memory currently outstanding (malloced but not freed).\n** ^The [sqlite3_memory_highwater()] routine returns the maximum\n** value of [sqlite3_memory_used()] since the high-water mark\n** was last reset.  ^The values returned by [sqlite3_memory_used()] and\n** [sqlite3_memory_highwater()] include any overhead\n** added by SQLite in its implementation of [sqlite3_malloc()],\n** but not overhead added by the any underlying system library\n** routines that [sqlite3_malloc()] may call.\n**\n** ^The memory high-water mark is reset to the current value of\n** [sqlite3_memory_used()] if and only if the parameter to\n** [sqlite3_memory_highwater()] is true.  ^The value returned\n** by [sqlite3_memory_highwater(1)] is the high-water mark\n** prior to the reset.\n*/\nSQLITE_API sqlite3_int64 sqlite3_memory_used(void);\nSQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag);\n\n/*\n** CAPI3REF: Pseudo-Random Number Generator\n**\n** SQLite contains a high-quality pseudo-random number generator (PRNG) used to\n** select random [ROWID | ROWIDs] when inserting new records into a table that\n** already uses the largest possible [ROWID].  The PRNG is also used for\n** the build-in random() and randomblob() SQL functions.  This interface allows\n** applications to access the same PRNG for other purposes.\n**\n** ^A call to this routine stores N bytes of randomness into buffer P.\n** ^The P parameter can be a NULL pointer.\n**\n** ^If this routine has not been previously called or if the previous\n** call had N less than one or a NULL pointer for P, then the PRNG is\n** seeded using randomness obtained from the xRandomness method of\n** the default [sqlite3_vfs] object.\n** ^If the previous call to this routine had an N of 1 or more and a\n** non-NULL P then the pseudo-randomness is generated\n** internally and without recourse to the [sqlite3_vfs] xRandomness\n** method.\n*/\nSQLITE_API void sqlite3_randomness(int N, void *P);\n\n/*\n** CAPI3REF: Compile-Time Authorization Callbacks\n** METHOD: sqlite3\n** KEYWORDS: {authorizer callback}\n**\n** ^This routine registers an authorizer callback with a particular\n** [database connection], supplied in the first argument.\n** ^The authorizer callback is invoked as SQL statements are being compiled\n** by [sqlite3_prepare()] or its variants [sqlite3_prepare_v2()],\n** [sqlite3_prepare_v3()], [sqlite3_prepare16()], [sqlite3_prepare16_v2()],\n** and [sqlite3_prepare16_v3()].  ^At various\n** points during the compilation process, as logic is being created\n** to perform various actions, the authorizer callback is invoked to\n** see if those actions are allowed.  ^The authorizer callback should\n** return [SQLITE_OK] to allow the action, [SQLITE_IGNORE] to disallow the\n** specific action but allow the SQL statement to continue to be\n** compiled, or [SQLITE_DENY] to cause the entire SQL statement to be\n** rejected with an error.  ^If the authorizer callback returns\n** any value other than [SQLITE_IGNORE], [SQLITE_OK], or [SQLITE_DENY]\n** then the [sqlite3_prepare_v2()] or equivalent call that triggered\n** the authorizer will fail with an error message.\n**\n** When the callback returns [SQLITE_OK], that means the operation\n** requested is ok.  ^When the callback returns [SQLITE_DENY], the\n** [sqlite3_prepare_v2()] or equivalent call that triggered the\n** authorizer will fail with an error message explaining that\n** access is denied. \n**\n** ^The first parameter to the authorizer callback is a copy of the third\n** parameter to the sqlite3_set_authorizer() interface. ^The second parameter\n** to the callback is an integer [SQLITE_COPY | action code] that specifies\n** the particular action to be authorized. ^The third through sixth parameters\n** to the callback are either NULL pointers or zero-terminated strings\n** that contain additional details about the action to be authorized.\n** Applications must always be prepared to encounter a NULL pointer in any\n** of the third through the sixth parameters of the authorization callback.\n**\n** ^If the action code is [SQLITE_READ]\n** and the callback returns [SQLITE_IGNORE] then the\n** [prepared statement] statement is constructed to substitute\n** a NULL value in place of the table column that would have\n** been read if [SQLITE_OK] had been returned.  The [SQLITE_IGNORE]\n** return can be used to deny an untrusted user access to individual\n** columns of a table.\n** ^When a table is referenced by a [SELECT] but no column values are\n** extracted from that table (for example in a query like\n** \"SELECT count(*) FROM tab\") then the [SQLITE_READ] authorizer callback\n** is invoked once for that table with a column name that is an empty string.\n** ^If the action code is [SQLITE_DELETE] and the callback returns\n** [SQLITE_IGNORE] then the [DELETE] operation proceeds but the\n** [truncate optimization] is disabled and all rows are deleted individually.\n**\n** An authorizer is used when [sqlite3_prepare | preparing]\n** SQL statements from an untrusted source, to ensure that the SQL statements\n** do not try to access data they are not allowed to see, or that they do not\n** try to execute malicious statements that damage the database.  For\n** example, an application may allow a user to enter arbitrary\n** SQL queries for evaluation by a database.  But the application does\n** not want the user to be able to make arbitrary changes to the\n** database.  An authorizer could then be put in place while the\n** user-entered SQL is being [sqlite3_prepare | prepared] that\n** disallows everything except [SELECT] statements.\n**\n** Applications that need to process SQL from untrusted sources\n** might also consider lowering resource limits using [sqlite3_limit()]\n** and limiting database size using the [max_page_count] [PRAGMA]\n** in addition to using an authorizer.\n**\n** ^(Only a single authorizer can be in place on a database connection\n** at a time.  Each call to sqlite3_set_authorizer overrides the\n** previous call.)^  ^Disable the authorizer by installing a NULL callback.\n** The authorizer is disabled by default.\n**\n** The authorizer callback must not do anything that will modify\n** the database connection that invoked the authorizer callback.\n** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their\n** database connections for the meaning of \"modify\" in this paragraph.\n**\n** ^When [sqlite3_prepare_v2()] is used to prepare a statement, the\n** statement might be re-prepared during [sqlite3_step()] due to a \n** schema change.  Hence, the application should ensure that the\n** correct authorizer callback remains in place during the [sqlite3_step()].\n**\n** ^Note that the authorizer callback is invoked only during\n** [sqlite3_prepare()] or its variants.  Authorization is not\n** performed during statement evaluation in [sqlite3_step()], unless\n** as stated in the previous paragraph, sqlite3_step() invokes\n** sqlite3_prepare_v2() to reprepare a statement after a schema change.\n*/\nSQLITE_API int sqlite3_set_authorizer(\n  sqlite3*,\n  int (*xAuth)(void*,int,const char*,const char*,const char*,const char*),\n  void *pUserData\n);\n\n/*\n** CAPI3REF: Authorizer Return Codes\n**\n** The [sqlite3_set_authorizer | authorizer callback function] must\n** return either [SQLITE_OK] or one of these two constants in order\n** to signal SQLite whether or not the action is permitted.  See the\n** [sqlite3_set_authorizer | authorizer documentation] for additional\n** information.\n**\n** Note that SQLITE_IGNORE is also used as a [conflict resolution mode]\n** returned from the [sqlite3_vtab_on_conflict()] interface.\n*/\n#define SQLITE_DENY   1   /* Abort the SQL statement with an error */\n#define SQLITE_IGNORE 2   /* Don't allow access, but don't generate an error */\n\n/*\n** CAPI3REF: Authorizer Action Codes\n**\n** The [sqlite3_set_authorizer()] interface registers a callback function\n** that is invoked to authorize certain SQL statement actions.  The\n** second parameter to the callback is an integer code that specifies\n** what action is being authorized.  These are the integer action codes that\n** the authorizer callback may be passed.\n**\n** These action code values signify what kind of operation is to be\n** authorized.  The 3rd and 4th parameters to the authorization\n** callback function will be parameters or NULL depending on which of these\n** codes is used as the second parameter.  ^(The 5th parameter to the\n** authorizer callback is the name of the database (\"main\", \"temp\",\n** etc.) if applicable.)^  ^The 6th parameter to the authorizer callback\n** is the name of the inner-most trigger or view that is responsible for\n** the access attempt or NULL if this access attempt is directly from\n** top-level SQL code.\n*/\n/******************************************* 3rd ************ 4th ***********/\n#define SQLITE_CREATE_INDEX          1   /* Index Name      Table Name      */\n#define SQLITE_CREATE_TABLE          2   /* Table Name      NULL            */\n#define SQLITE_CREATE_TEMP_INDEX     3   /* Index Name      Table Name      */\n#define SQLITE_CREATE_TEMP_TABLE     4   /* Table Name      NULL            */\n#define SQLITE_CREATE_TEMP_TRIGGER   5   /* Trigger Name    Table Name      */\n#define SQLITE_CREATE_TEMP_VIEW      6   /* View Name       NULL            */\n#define SQLITE_CREATE_TRIGGER        7   /* Trigger Name    Table Name      */\n#define SQLITE_CREATE_VIEW           8   /* View Name       NULL            */\n#define SQLITE_DELETE                9   /* Table Name      NULL            */\n#define SQLITE_DROP_INDEX           10   /* Index Name      Table Name      */\n#define SQLITE_DROP_TABLE           11   /* Table Name      NULL            */\n#define SQLITE_DROP_TEMP_INDEX      12   /* Index Name      Table Name      */\n#define SQLITE_DROP_TEMP_TABLE      13   /* Table Name      NULL            */\n#define SQLITE_DROP_TEMP_TRIGGER    14   /* Trigger Name    Table Name      */\n#define SQLITE_DROP_TEMP_VIEW       15   /* View Name       NULL            */\n#define SQLITE_DROP_TRIGGER         16   /* Trigger Name    Table Name      */\n#define SQLITE_DROP_VIEW            17   /* View Name       NULL            */\n#define SQLITE_INSERT               18   /* Table Name      NULL            */\n#define SQLITE_PRAGMA               19   /* Pragma Name     1st arg or NULL */\n#define SQLITE_READ                 20   /* Table Name      Column Name     */\n#define SQLITE_SELECT               21   /* NULL            NULL            */\n#define SQLITE_TRANSACTION          22   /* Operation       NULL            */\n#define SQLITE_UPDATE               23   /* Table Name      Column Name     */\n#define SQLITE_ATTACH               24   /* Filename        NULL            */\n#define SQLITE_DETACH               25   /* Database Name   NULL            */\n#define SQLITE_ALTER_TABLE          26   /* Database Name   Table Name      */\n#define SQLITE_REINDEX              27   /* Index Name      NULL            */\n#define SQLITE_ANALYZE              28   /* Table Name      NULL            */\n#define SQLITE_CREATE_VTABLE        29   /* Table Name      Module Name     */\n#define SQLITE_DROP_VTABLE          30   /* Table Name      Module Name     */\n#define SQLITE_FUNCTION             31   /* NULL            Function Name   */\n#define SQLITE_SAVEPOINT            32   /* Operation       Savepoint Name  */\n#define SQLITE_COPY                  0   /* No longer used */\n#define SQLITE_RECURSIVE            33   /* NULL            NULL            */\n\n/*\n** CAPI3REF: Tracing And Profiling Functions\n** METHOD: sqlite3\n**\n** These routines are deprecated. Use the [sqlite3_trace_v2()] interface\n** instead of the routines described here.\n**\n** These routines register callback functions that can be used for\n** tracing and profiling the execution of SQL statements.\n**\n** ^The callback function registered by sqlite3_trace() is invoked at\n** various times when an SQL statement is being run by [sqlite3_step()].\n** ^The sqlite3_trace() callback is invoked with a UTF-8 rendering of the\n** SQL statement text as the statement first begins executing.\n** ^(Additional sqlite3_trace() callbacks might occur\n** as each triggered subprogram is entered.  The callbacks for triggers\n** contain a UTF-8 SQL comment that identifies the trigger.)^\n**\n** The [SQLITE_TRACE_SIZE_LIMIT] compile-time option can be used to limit\n** the length of [bound parameter] expansion in the output of sqlite3_trace().\n**\n** ^The callback function registered by sqlite3_profile() is invoked\n** as each SQL statement finishes.  ^The profile callback contains\n** the original statement text and an estimate of wall-clock time\n** of how long that statement took to run.  ^The profile callback\n** time is in units of nanoseconds, however the current implementation\n** is only capable of millisecond resolution so the six least significant\n** digits in the time are meaningless.  Future versions of SQLite\n** might provide greater resolution on the profiler callback.  Invoking\n** either [sqlite3_trace()] or [sqlite3_trace_v2()] will cancel the\n** profile callback.\n*/\nSQLITE_API SQLITE_DEPRECATED void *sqlite3_trace(sqlite3*,\n   void(*xTrace)(void*,const char*), void*);\nSQLITE_API SQLITE_DEPRECATED void *sqlite3_profile(sqlite3*,\n   void(*xProfile)(void*,const char*,sqlite3_uint64), void*);\n\n/*\n** CAPI3REF: SQL Trace Event Codes\n** KEYWORDS: SQLITE_TRACE\n**\n** These constants identify classes of events that can be monitored\n** using the [sqlite3_trace_v2()] tracing logic.  The M argument\n** to [sqlite3_trace_v2(D,M,X,P)] is an OR-ed combination of one or more of\n** the following constants.  ^The first argument to the trace callback\n** is one of the following constants.\n**\n** New tracing constants may be added in future releases.\n**\n** ^A trace callback has four arguments: xCallback(T,C,P,X).\n** ^The T argument is one of the integer type codes above.\n** ^The C argument is a copy of the context pointer passed in as the\n** fourth argument to [sqlite3_trace_v2()].\n** The P and X arguments are pointers whose meanings depend on T.\n**\n** <dl>\n** [[SQLITE_TRACE_STMT]] <dt>SQLITE_TRACE_STMT</dt>\n** <dd>^An SQLITE_TRACE_STMT callback is invoked when a prepared statement\n** first begins running and possibly at other times during the\n** execution of the prepared statement, such as at the start of each\n** trigger subprogram. ^The P argument is a pointer to the\n** [prepared statement]. ^The X argument is a pointer to a string which\n** is the unexpanded SQL text of the prepared statement or an SQL comment \n** that indicates the invocation of a trigger.  ^The callback can compute\n** the same text that would have been returned by the legacy [sqlite3_trace()]\n** interface by using the X argument when X begins with \"--\" and invoking\n** [sqlite3_expanded_sql(P)] otherwise.\n**\n** [[SQLITE_TRACE_PROFILE]] <dt>SQLITE_TRACE_PROFILE</dt>\n** <dd>^An SQLITE_TRACE_PROFILE callback provides approximately the same\n** information as is provided by the [sqlite3_profile()] callback.\n** ^The P argument is a pointer to the [prepared statement] and the\n** X argument points to a 64-bit integer which is the estimated of\n** the number of nanosecond that the prepared statement took to run.\n** ^The SQLITE_TRACE_PROFILE callback is invoked when the statement finishes.\n**\n** [[SQLITE_TRACE_ROW]] <dt>SQLITE_TRACE_ROW</dt>\n** <dd>^An SQLITE_TRACE_ROW callback is invoked whenever a prepared\n** statement generates a single row of result.  \n** ^The P argument is a pointer to the [prepared statement] and the\n** X argument is unused.\n**\n** [[SQLITE_TRACE_CLOSE]] <dt>SQLITE_TRACE_CLOSE</dt>\n** <dd>^An SQLITE_TRACE_CLOSE callback is invoked when a database\n** connection closes.\n** ^The P argument is a pointer to the [database connection] object\n** and the X argument is unused.\n** </dl>\n*/\n#define SQLITE_TRACE_STMT       0x01\n#define SQLITE_TRACE_PROFILE    0x02\n#define SQLITE_TRACE_ROW        0x04\n#define SQLITE_TRACE_CLOSE      0x08\n\n/*\n** CAPI3REF: SQL Trace Hook\n** METHOD: sqlite3\n**\n** ^The sqlite3_trace_v2(D,M,X,P) interface registers a trace callback\n** function X against [database connection] D, using property mask M\n** and context pointer P.  ^If the X callback is\n** NULL or if the M mask is zero, then tracing is disabled.  The\n** M argument should be the bitwise OR-ed combination of\n** zero or more [SQLITE_TRACE] constants.\n**\n** ^Each call to either sqlite3_trace() or sqlite3_trace_v2() overrides \n** (cancels) any prior calls to sqlite3_trace() or sqlite3_trace_v2().\n**\n** ^The X callback is invoked whenever any of the events identified by \n** mask M occur.  ^The integer return value from the callback is currently\n** ignored, though this may change in future releases.  Callback\n** implementations should return zero to ensure future compatibility.\n**\n** ^A trace callback is invoked with four arguments: callback(T,C,P,X).\n** ^The T argument is one of the [SQLITE_TRACE]\n** constants to indicate why the callback was invoked.\n** ^The C argument is a copy of the context pointer.\n** The P and X arguments are pointers whose meanings depend on T.\n**\n** The sqlite3_trace_v2() interface is intended to replace the legacy\n** interfaces [sqlite3_trace()] and [sqlite3_profile()], both of which\n** are deprecated.\n*/\nSQLITE_API int sqlite3_trace_v2(\n  sqlite3*,\n  unsigned uMask,\n  int(*xCallback)(unsigned,void*,void*,void*),\n  void *pCtx\n);\n\n/*\n** CAPI3REF: Query Progress Callbacks\n** METHOD: sqlite3\n**\n** ^The sqlite3_progress_handler(D,N,X,P) interface causes the callback\n** function X to be invoked periodically during long running calls to\n** [sqlite3_exec()], [sqlite3_step()] and [sqlite3_get_table()] for\n** database connection D.  An example use for this\n** interface is to keep a GUI updated during a large query.\n**\n** ^The parameter P is passed through as the only parameter to the \n** callback function X.  ^The parameter N is the approximate number of \n** [virtual machine instructions] that are evaluated between successive\n** invocations of the callback X.  ^If N is less than one then the progress\n** handler is disabled.\n**\n** ^Only a single progress handler may be defined at one time per\n** [database connection]; setting a new progress handler cancels the\n** old one.  ^Setting parameter X to NULL disables the progress handler.\n** ^The progress handler is also disabled by setting N to a value less\n** than 1.\n**\n** ^If the progress callback returns non-zero, the operation is\n** interrupted.  This feature can be used to implement a\n** \"Cancel\" button on a GUI progress dialog box.\n**\n** The progress handler callback must not do anything that will modify\n** the database connection that invoked the progress handler.\n** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their\n** database connections for the meaning of \"modify\" in this paragraph.\n**\n*/\nSQLITE_API void sqlite3_progress_handler(sqlite3*, int, int(*)(void*), void*);\n\n/*\n** CAPI3REF: Opening A New Database Connection\n** CONSTRUCTOR: sqlite3\n**\n** ^These routines open an SQLite database file as specified by the \n** filename argument. ^The filename argument is interpreted as UTF-8 for\n** sqlite3_open() and sqlite3_open_v2() and as UTF-16 in the native byte\n** order for sqlite3_open16(). ^(A [database connection] handle is usually\n** returned in *ppDb, even if an error occurs.  The only exception is that\n** if SQLite is unable to allocate memory to hold the [sqlite3] object,\n** a NULL will be written into *ppDb instead of a pointer to the [sqlite3]\n** object.)^ ^(If the database is opened (and/or created) successfully, then\n** [SQLITE_OK] is returned.  Otherwise an [error code] is returned.)^ ^The\n** [sqlite3_errmsg()] or [sqlite3_errmsg16()] routines can be used to obtain\n** an English language description of the error following a failure of any\n** of the sqlite3_open() routines.\n**\n** ^The default encoding will be UTF-8 for databases created using\n** sqlite3_open() or sqlite3_open_v2().  ^The default encoding for databases\n** created using sqlite3_open16() will be UTF-16 in the native byte order.\n**\n** Whether or not an error occurs when it is opened, resources\n** associated with the [database connection] handle should be released by\n** passing it to [sqlite3_close()] when it is no longer required.\n**\n** The sqlite3_open_v2() interface works like sqlite3_open()\n** except that it accepts two additional parameters for additional control\n** over the new database connection.  ^(The flags parameter to\n** sqlite3_open_v2() can take one of\n** the following three values, optionally combined with the \n** [SQLITE_OPEN_NOMUTEX], [SQLITE_OPEN_FULLMUTEX], [SQLITE_OPEN_SHAREDCACHE],\n** [SQLITE_OPEN_PRIVATECACHE], and/or [SQLITE_OPEN_URI] flags:)^\n**\n** <dl>\n** ^(<dt>[SQLITE_OPEN_READONLY]</dt>\n** <dd>The database is opened in read-only mode.  If the database does not\n** already exist, an error is returned.</dd>)^\n**\n** ^(<dt>[SQLITE_OPEN_READWRITE]</dt>\n** <dd>The database is opened for reading and writing if possible, or reading\n** only if the file is write protected by the operating system.  In either\n** case the database must already exist, otherwise an error is returned.</dd>)^\n**\n** ^(<dt>[SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE]</dt>\n** <dd>The database is opened for reading and writing, and is created if\n** it does not already exist. This is the behavior that is always used for\n** sqlite3_open() and sqlite3_open16().</dd>)^\n** </dl>\n**\n** If the 3rd parameter to sqlite3_open_v2() is not one of the\n** combinations shown above optionally combined with other\n** [SQLITE_OPEN_READONLY | SQLITE_OPEN_* bits]\n** then the behavior is undefined.\n**\n** ^If the [SQLITE_OPEN_NOMUTEX] flag is set, then the database connection\n** opens in the multi-thread [threading mode] as long as the single-thread\n** mode has not been set at compile-time or start-time.  ^If the\n** [SQLITE_OPEN_FULLMUTEX] flag is set then the database connection opens\n** in the serialized [threading mode] unless single-thread was\n** previously selected at compile-time or start-time.\n** ^The [SQLITE_OPEN_SHAREDCACHE] flag causes the database connection to be\n** eligible to use [shared cache mode], regardless of whether or not shared\n** cache is enabled using [sqlite3_enable_shared_cache()].  ^The\n** [SQLITE_OPEN_PRIVATECACHE] flag causes the database connection to not\n** participate in [shared cache mode] even if it is enabled.\n**\n** ^The fourth parameter to sqlite3_open_v2() is the name of the\n** [sqlite3_vfs] object that defines the operating system interface that\n** the new database connection should use.  ^If the fourth parameter is\n** a NULL pointer then the default [sqlite3_vfs] object is used.\n**\n** ^If the filename is \":memory:\", then a private, temporary in-memory database\n** is created for the connection.  ^This in-memory database will vanish when\n** the database connection is closed.  Future versions of SQLite might\n** make use of additional special filenames that begin with the \":\" character.\n** It is recommended that when a database filename actually does begin with\n** a \":\" character you should prefix the filename with a pathname such as\n** \"./\" to avoid ambiguity.\n**\n** ^If the filename is an empty string, then a private, temporary\n** on-disk database will be created.  ^This private database will be\n** automatically deleted as soon as the database connection is closed.\n**\n** [[URI filenames in sqlite3_open()]] <h3>URI Filenames</h3>\n**\n** ^If [URI filename] interpretation is enabled, and the filename argument\n** begins with \"file:\", then the filename is interpreted as a URI. ^URI\n** filename interpretation is enabled if the [SQLITE_OPEN_URI] flag is\n** set in the third argument to sqlite3_open_v2(), or if it has\n** been enabled globally using the [SQLITE_CONFIG_URI] option with the\n** [sqlite3_config()] method or by the [SQLITE_USE_URI] compile-time option.\n** URI filename interpretation is turned off\n** by default, but future releases of SQLite might enable URI filename\n** interpretation by default.  See \"[URI filenames]\" for additional\n** information.\n**\n** URI filenames are parsed according to RFC 3986. ^If the URI contains an\n** authority, then it must be either an empty string or the string \n** \"localhost\". ^If the authority is not an empty string or \"localhost\", an \n** error is returned to the caller. ^The fragment component of a URI, if \n** present, is ignored.\n**\n** ^SQLite uses the path component of the URI as the name of the disk file\n** which contains the database. ^If the path begins with a '/' character, \n** then it is interpreted as an absolute path. ^If the path does not begin \n** with a '/' (meaning that the authority section is omitted from the URI)\n** then the path is interpreted as a relative path. \n** ^(On windows, the first component of an absolute path \n** is a drive specification (e.g. \"C:\").)^\n**\n** [[core URI query parameters]]\n** The query component of a URI may contain parameters that are interpreted\n** either by SQLite itself, or by a [VFS | custom VFS implementation].\n** SQLite and its built-in [VFSes] interpret the\n** following query parameters:\n**\n** <ul>\n**   <li> <b>vfs</b>: ^The \"vfs\" parameter may be used to specify the name of\n**     a VFS object that provides the operating system interface that should\n**     be used to access the database file on disk. ^If this option is set to\n**     an empty string the default VFS object is used. ^Specifying an unknown\n**     VFS is an error. ^If sqlite3_open_v2() is used and the vfs option is\n**     present, then the VFS specified by the option takes precedence over\n**     the value passed as the fourth parameter to sqlite3_open_v2().\n**\n**   <li> <b>mode</b>: ^(The mode parameter may be set to either \"ro\", \"rw\",\n**     \"rwc\", or \"memory\". Attempting to set it to any other value is\n**     an error)^. \n**     ^If \"ro\" is specified, then the database is opened for read-only \n**     access, just as if the [SQLITE_OPEN_READONLY] flag had been set in the \n**     third argument to sqlite3_open_v2(). ^If the mode option is set to \n**     \"rw\", then the database is opened for read-write (but not create) \n**     access, as if SQLITE_OPEN_READWRITE (but not SQLITE_OPEN_CREATE) had \n**     been set. ^Value \"rwc\" is equivalent to setting both \n**     SQLITE_OPEN_READWRITE and SQLITE_OPEN_CREATE.  ^If the mode option is\n**     set to \"memory\" then a pure [in-memory database] that never reads\n**     or writes from disk is used. ^It is an error to specify a value for\n**     the mode parameter that is less restrictive than that specified by\n**     the flags passed in the third parameter to sqlite3_open_v2().\n**\n**   <li> <b>cache</b>: ^The cache parameter may be set to either \"shared\" or\n**     \"private\". ^Setting it to \"shared\" is equivalent to setting the\n**     SQLITE_OPEN_SHAREDCACHE bit in the flags argument passed to\n**     sqlite3_open_v2(). ^Setting the cache parameter to \"private\" is \n**     equivalent to setting the SQLITE_OPEN_PRIVATECACHE bit.\n**     ^If sqlite3_open_v2() is used and the \"cache\" parameter is present in\n**     a URI filename, its value overrides any behavior requested by setting\n**     SQLITE_OPEN_PRIVATECACHE or SQLITE_OPEN_SHAREDCACHE flag.\n**\n**  <li> <b>psow</b>: ^The psow parameter indicates whether or not the\n**     [powersafe overwrite] property does or does not apply to the\n**     storage media on which the database file resides.\n**\n**  <li> <b>nolock</b>: ^The nolock parameter is a boolean query parameter\n**     which if set disables file locking in rollback journal modes.  This\n**     is useful for accessing a database on a filesystem that does not\n**     support locking.  Caution:  Database corruption might result if two\n**     or more processes write to the same database and any one of those\n**     processes uses nolock=1.\n**\n**  <li> <b>immutable</b>: ^The immutable parameter is a boolean query\n**     parameter that indicates that the database file is stored on\n**     read-only media.  ^When immutable is set, SQLite assumes that the\n**     database file cannot be changed, even by a process with higher\n**     privilege, and so the database is opened read-only and all locking\n**     and change detection is disabled.  Caution: Setting the immutable\n**     property on a database file that does in fact change can result\n**     in incorrect query results and/or [SQLITE_CORRUPT] errors.\n**     See also: [SQLITE_IOCAP_IMMUTABLE].\n**       \n** </ul>\n**\n** ^Specifying an unknown parameter in the query component of a URI is not an\n** error.  Future versions of SQLite might understand additional query\n** parameters.  See \"[query parameters with special meaning to SQLite]\" for\n** additional information.\n**\n** [[URI filename examples]] <h3>URI filename examples</h3>\n**\n** <table border=\"1\" align=center cellpadding=5>\n** <tr><th> URI filenames <th> Results\n** <tr><td> file:data.db <td> \n**          Open the file \"data.db\" in the current directory.\n** <tr><td> file:/home/fred/data.db<br>\n**          file:///home/fred/data.db <br> \n**          file://localhost/home/fred/data.db <br> <td> \n**          Open the database file \"/home/fred/data.db\".\n** <tr><td> file://darkstar/home/fred/data.db <td> \n**          An error. \"darkstar\" is not a recognized authority.\n** <tr><td style=\"white-space:nowrap\"> \n**          file:///C:/Documents%20and%20Settings/fred/Desktop/data.db\n**     <td> Windows only: Open the file \"data.db\" on fred's desktop on drive\n**          C:. Note that the %20 escaping in this example is not strictly \n**          necessary - space characters can be used literally\n**          in URI filenames.\n** <tr><td> file:data.db?mode=ro&cache=private <td> \n**          Open file \"data.db\" in the current directory for read-only access.\n**          Regardless of whether or not shared-cache mode is enabled by\n**          default, use a private cache.\n** <tr><td> file:/home/fred/data.db?vfs=unix-dotfile <td>\n**          Open file \"/home/fred/data.db\". Use the special VFS \"unix-dotfile\"\n**          that uses dot-files in place of posix advisory locking.\n** <tr><td> file:data.db?mode=readonly <td> \n**          An error. \"readonly\" is not a valid option for the \"mode\" parameter.\n** </table>\n**\n** ^URI hexadecimal escape sequences (%HH) are supported within the path and\n** query components of a URI. A hexadecimal escape sequence consists of a\n** percent sign - \"%\" - followed by exactly two hexadecimal digits \n** specifying an octet value. ^Before the path or query components of a\n** URI filename are interpreted, they are encoded using UTF-8 and all \n** hexadecimal escape sequences replaced by a single byte containing the\n** corresponding octet. If this process generates an invalid UTF-8 encoding,\n** the results are undefined.\n**\n** <b>Note to Windows users:</b>  The encoding used for the filename argument\n** of sqlite3_open() and sqlite3_open_v2() must be UTF-8, not whatever\n** codepage is currently defined.  Filenames containing international\n** characters must be converted to UTF-8 prior to passing them into\n** sqlite3_open() or sqlite3_open_v2().\n**\n** <b>Note to Windows Runtime users:</b>  The temporary directory must be set\n** prior to calling sqlite3_open() or sqlite3_open_v2().  Otherwise, various\n** features that require the use of temporary files may fail.\n**\n** See also: [sqlite3_temp_directory]\n*/\nSQLITE_API int sqlite3_open(\n  const char *filename,   /* Database filename (UTF-8) */\n  sqlite3 **ppDb          /* OUT: SQLite db handle */\n);\nSQLITE_API int sqlite3_open16(\n  const void *filename,   /* Database filename (UTF-16) */\n  sqlite3 **ppDb          /* OUT: SQLite db handle */\n);\nSQLITE_API int sqlite3_open_v2(\n  const char *filename,   /* Database filename (UTF-8) */\n  sqlite3 **ppDb,         /* OUT: SQLite db handle */\n  int flags,              /* Flags */\n  const char *zVfs        /* Name of VFS module to use */\n);\n\n/*\n** CAPI3REF: Obtain Values For URI Parameters\n**\n** These are utility routines, useful to VFS implementations, that check\n** to see if a database file was a URI that contained a specific query \n** parameter, and if so obtains the value of that query parameter.\n**\n** If F is the database filename pointer passed into the xOpen() method of \n** a VFS implementation when the flags parameter to xOpen() has one or \n** more of the [SQLITE_OPEN_URI] or [SQLITE_OPEN_MAIN_DB] bits set and\n** P is the name of the query parameter, then\n** sqlite3_uri_parameter(F,P) returns the value of the P\n** parameter if it exists or a NULL pointer if P does not appear as a \n** query parameter on F.  If P is a query parameter of F\n** has no explicit value, then sqlite3_uri_parameter(F,P) returns\n** a pointer to an empty string.\n**\n** The sqlite3_uri_boolean(F,P,B) routine assumes that P is a boolean\n** parameter and returns true (1) or false (0) according to the value\n** of P.  The sqlite3_uri_boolean(F,P,B) routine returns true (1) if the\n** value of query parameter P is one of \"yes\", \"true\", or \"on\" in any\n** case or if the value begins with a non-zero number.  The \n** sqlite3_uri_boolean(F,P,B) routines returns false (0) if the value of\n** query parameter P is one of \"no\", \"false\", or \"off\" in any case or\n** if the value begins with a numeric zero.  If P is not a query\n** parameter on F or if the value of P is does not match any of the\n** above, then sqlite3_uri_boolean(F,P,B) returns (B!=0).\n**\n** The sqlite3_uri_int64(F,P,D) routine converts the value of P into a\n** 64-bit signed integer and returns that integer, or D if P does not\n** exist.  If the value of P is something other than an integer, then\n** zero is returned.\n** \n** If F is a NULL pointer, then sqlite3_uri_parameter(F,P) returns NULL and\n** sqlite3_uri_boolean(F,P,B) returns B.  If F is not a NULL pointer and\n** is not a database file pathname pointer that SQLite passed into the xOpen\n** VFS method, then the behavior of this routine is undefined and probably\n** undesirable.\n**\n** See the [URI filename] documentation for additional information.\n*/\nSQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam);\nSQLITE_API int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault);\nSQLITE_API sqlite3_int64 sqlite3_uri_int64(const char*, const char*, sqlite3_int64);\n\n\n/*\n** CAPI3REF: Error Codes And Messages\n** METHOD: sqlite3\n**\n** ^If the most recent sqlite3_* API call associated with \n** [database connection] D failed, then the sqlite3_errcode(D) interface\n** returns the numeric [result code] or [extended result code] for that\n** API call.\n** ^The sqlite3_extended_errcode()\n** interface is the same except that it always returns the \n** [extended result code] even when extended result codes are\n** disabled.\n**\n** The values returned by sqlite3_errcode() and/or\n** sqlite3_extended_errcode() might change with each API call.\n** Except, there are some interfaces that are guaranteed to never\n** change the value of the error code.  The error-code preserving\n** interfaces are:\n**\n** <ul>\n** <li> sqlite3_errcode()\n** <li> sqlite3_extended_errcode()\n** <li> sqlite3_errmsg()\n** <li> sqlite3_errmsg16()\n** </ul>\n**\n** ^The sqlite3_errmsg() and sqlite3_errmsg16() return English-language\n** text that describes the error, as either UTF-8 or UTF-16 respectively.\n** ^(Memory to hold the error message string is managed internally.\n** The application does not need to worry about freeing the result.\n** However, the error string might be overwritten or deallocated by\n** subsequent calls to other SQLite interface functions.)^\n**\n** ^The sqlite3_errstr() interface returns the English-language text\n** that describes the [result code], as UTF-8.\n** ^(Memory to hold the error message string is managed internally\n** and must not be freed by the application)^.\n**\n** When the serialized [threading mode] is in use, it might be the\n** case that a second error occurs on a separate thread in between\n** the time of the first error and the call to these interfaces.\n** When that happens, the second error will be reported since these\n** interfaces always report the most recent result.  To avoid\n** this, each thread can obtain exclusive use of the [database connection] D\n** by invoking [sqlite3_mutex_enter]([sqlite3_db_mutex](D)) before beginning\n** to use D and invoking [sqlite3_mutex_leave]([sqlite3_db_mutex](D)) after\n** all calls to the interfaces listed here are completed.\n**\n** If an interface fails with SQLITE_MISUSE, that means the interface\n** was invoked incorrectly by the application.  In that case, the\n** error code and message may or may not be set.\n*/\nSQLITE_API int sqlite3_errcode(sqlite3 *db);\nSQLITE_API int sqlite3_extended_errcode(sqlite3 *db);\nSQLITE_API const char *sqlite3_errmsg(sqlite3*);\nSQLITE_API const void *sqlite3_errmsg16(sqlite3*);\nSQLITE_API const char *sqlite3_errstr(int);\n\n/*\n** CAPI3REF: Prepared Statement Object\n** KEYWORDS: {prepared statement} {prepared statements}\n**\n** An instance of this object represents a single SQL statement that\n** has been compiled into binary form and is ready to be evaluated.\n**\n** Think of each SQL statement as a separate computer program.  The\n** original SQL text is source code.  A prepared statement object \n** is the compiled object code.  All SQL must be converted into a\n** prepared statement before it can be run.\n**\n** The life-cycle of a prepared statement object usually goes like this:\n**\n** <ol>\n** <li> Create the prepared statement object using [sqlite3_prepare_v2()].\n** <li> Bind values to [parameters] using the sqlite3_bind_*()\n**      interfaces.\n** <li> Run the SQL by calling [sqlite3_step()] one or more times.\n** <li> Reset the prepared statement using [sqlite3_reset()] then go back\n**      to step 2.  Do this zero or more times.\n** <li> Destroy the object using [sqlite3_finalize()].\n** </ol>\n*/\ntypedef struct sqlite3_stmt sqlite3_stmt;\n\n/*\n** CAPI3REF: Run-time Limits\n** METHOD: sqlite3\n**\n** ^(This interface allows the size of various constructs to be limited\n** on a connection by connection basis.  The first parameter is the\n** [database connection] whose limit is to be set or queried.  The\n** second parameter is one of the [limit categories] that define a\n** class of constructs to be size limited.  The third parameter is the\n** new limit for that construct.)^\n**\n** ^If the new limit is a negative number, the limit is unchanged.\n** ^(For each limit category SQLITE_LIMIT_<i>NAME</i> there is a \n** [limits | hard upper bound]\n** set at compile-time by a C preprocessor macro called\n** [limits | SQLITE_MAX_<i>NAME</i>].\n** (The \"_LIMIT_\" in the name is changed to \"_MAX_\".))^\n** ^Attempts to increase a limit above its hard upper bound are\n** silently truncated to the hard upper bound.\n**\n** ^Regardless of whether or not the limit was changed, the \n** [sqlite3_limit()] interface returns the prior value of the limit.\n** ^Hence, to find the current value of a limit without changing it,\n** simply invoke this interface with the third parameter set to -1.\n**\n** Run-time limits are intended for use in applications that manage\n** both their own internal database and also databases that are controlled\n** by untrusted external sources.  An example application might be a\n** web browser that has its own databases for storing history and\n** separate databases controlled by JavaScript applications downloaded\n** off the Internet.  The internal databases can be given the\n** large, default limits.  Databases managed by external sources can\n** be given much smaller limits designed to prevent a denial of service\n** attack.  Developers might also want to use the [sqlite3_set_authorizer()]\n** interface to further control untrusted SQL.  The size of the database\n** created by an untrusted script can be contained using the\n** [max_page_count] [PRAGMA].\n**\n** New run-time limit categories may be added in future releases.\n*/\nSQLITE_API int sqlite3_limit(sqlite3*, int id, int newVal);\n\n/*\n** CAPI3REF: Run-Time Limit Categories\n** KEYWORDS: {limit category} {*limit categories}\n**\n** These constants define various performance limits\n** that can be lowered at run-time using [sqlite3_limit()].\n** The synopsis of the meanings of the various limits is shown below.\n** Additional information is available at [limits | Limits in SQLite].\n**\n** <dl>\n** [[SQLITE_LIMIT_LENGTH]] ^(<dt>SQLITE_LIMIT_LENGTH</dt>\n** <dd>The maximum size of any string or BLOB or table row, in bytes.<dd>)^\n**\n** [[SQLITE_LIMIT_SQL_LENGTH]] ^(<dt>SQLITE_LIMIT_SQL_LENGTH</dt>\n** <dd>The maximum length of an SQL statement, in bytes.</dd>)^\n**\n** [[SQLITE_LIMIT_COLUMN]] ^(<dt>SQLITE_LIMIT_COLUMN</dt>\n** <dd>The maximum number of columns in a table definition or in the\n** result set of a [SELECT] or the maximum number of columns in an index\n** or in an ORDER BY or GROUP BY clause.</dd>)^\n**\n** [[SQLITE_LIMIT_EXPR_DEPTH]] ^(<dt>SQLITE_LIMIT_EXPR_DEPTH</dt>\n** <dd>The maximum depth of the parse tree on any expression.</dd>)^\n**\n** [[SQLITE_LIMIT_COMPOUND_SELECT]] ^(<dt>SQLITE_LIMIT_COMPOUND_SELECT</dt>\n** <dd>The maximum number of terms in a compound SELECT statement.</dd>)^\n**\n** [[SQLITE_LIMIT_VDBE_OP]] ^(<dt>SQLITE_LIMIT_VDBE_OP</dt>\n** <dd>The maximum number of instructions in a virtual machine program\n** used to implement an SQL statement.  If [sqlite3_prepare_v2()] or\n** the equivalent tries to allocate space for more than this many opcodes\n** in a single prepared statement, an SQLITE_NOMEM error is returned.</dd>)^\n**\n** [[SQLITE_LIMIT_FUNCTION_ARG]] ^(<dt>SQLITE_LIMIT_FUNCTION_ARG</dt>\n** <dd>The maximum number of arguments on a function.</dd>)^\n**\n** [[SQLITE_LIMIT_ATTACHED]] ^(<dt>SQLITE_LIMIT_ATTACHED</dt>\n** <dd>The maximum number of [ATTACH | attached databases].)^</dd>\n**\n** [[SQLITE_LIMIT_LIKE_PATTERN_LENGTH]]\n** ^(<dt>SQLITE_LIMIT_LIKE_PATTERN_LENGTH</dt>\n** <dd>The maximum length of the pattern argument to the [LIKE] or\n** [GLOB] operators.</dd>)^\n**\n** [[SQLITE_LIMIT_VARIABLE_NUMBER]]\n** ^(<dt>SQLITE_LIMIT_VARIABLE_NUMBER</dt>\n** <dd>The maximum index number of any [parameter] in an SQL statement.)^\n**\n** [[SQLITE_LIMIT_TRIGGER_DEPTH]] ^(<dt>SQLITE_LIMIT_TRIGGER_DEPTH</dt>\n** <dd>The maximum depth of recursion for triggers.</dd>)^\n**\n** [[SQLITE_LIMIT_WORKER_THREADS]] ^(<dt>SQLITE_LIMIT_WORKER_THREADS</dt>\n** <dd>The maximum number of auxiliary worker threads that a single\n** [prepared statement] may start.</dd>)^\n** </dl>\n*/\n#define SQLITE_LIMIT_LENGTH                    0\n#define SQLITE_LIMIT_SQL_LENGTH                1\n#define SQLITE_LIMIT_COLUMN                    2\n#define SQLITE_LIMIT_EXPR_DEPTH                3\n#define SQLITE_LIMIT_COMPOUND_SELECT           4\n#define SQLITE_LIMIT_VDBE_OP                   5\n#define SQLITE_LIMIT_FUNCTION_ARG              6\n#define SQLITE_LIMIT_ATTACHED                  7\n#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH       8\n#define SQLITE_LIMIT_VARIABLE_NUMBER           9\n#define SQLITE_LIMIT_TRIGGER_DEPTH            10\n#define SQLITE_LIMIT_WORKER_THREADS           11\n\n/*\n** CAPI3REF: Prepare Flags\n**\n** These constants define various flags that can be passed into\n** \"prepFlags\" parameter of the [sqlite3_prepare_v3()] and\n** [sqlite3_prepare16_v3()] interfaces.\n**\n** New flags may be added in future releases of SQLite.\n**\n** <dl>\n** [[SQLITE_PREPARE_PERSISTENT]] ^(<dt>SQLITE_PREPARE_PERSISTENT</dt>\n** <dd>The SQLITE_PREPARE_PERSISTENT flag is a hint to the query planner\n** that the prepared statement will be retained for a long time and\n** probably reused many times.)^ ^Without this flag, [sqlite3_prepare_v3()]\n** and [sqlite3_prepare16_v3()] assume that the prepared statement will \n** be used just once or at most a few times and then destroyed using\n** [sqlite3_finalize()] relatively soon. The current implementation acts\n** on this hint by avoiding the use of [lookaside memory] so as not to\n** deplete the limited store of lookaside memory. Future versions of\n** SQLite may act on this hint differently.\n**\n** [[SQLITE_PREPARE_NORMALIZE]] <dt>SQLITE_PREPARE_NORMALIZE</dt>\n** <dd>The SQLITE_PREPARE_NORMALIZE flag is a no-op. This flag used\n** to be required for any prepared statement that wanted to use the\n** [sqlite3_normalized_sql()] interface.  However, the\n** [sqlite3_normalized_sql()] interface is now available to all\n** prepared statements, regardless of whether or not they use this\n** flag.\n**\n** [[SQLITE_PREPARE_NO_VTAB]] <dt>SQLITE_PREPARE_NO_VTAB</dt>\n** <dd>The SQLITE_PREPARE_NO_VTAB flag causes the SQL compiler\n** to return an error (error code SQLITE_ERROR) if the statement uses\n** any virtual tables.\n** </dl>\n*/\n#define SQLITE_PREPARE_PERSISTENT              0x01\n#define SQLITE_PREPARE_NORMALIZE               0x02\n#define SQLITE_PREPARE_NO_VTAB                 0x04\n\n/*\n** CAPI3REF: Compiling An SQL Statement\n** KEYWORDS: {SQL statement compiler}\n** METHOD: sqlite3\n** CONSTRUCTOR: sqlite3_stmt\n**\n** To execute an SQL statement, it must first be compiled into a byte-code\n** program using one of these routines.  Or, in other words, these routines\n** are constructors for the [prepared statement] object.\n**\n** The preferred routine to use is [sqlite3_prepare_v2()].  The\n** [sqlite3_prepare()] interface is legacy and should be avoided.\n** [sqlite3_prepare_v3()] has an extra \"prepFlags\" option that is used\n** for special purposes.\n**\n** The use of the UTF-8 interfaces is preferred, as SQLite currently\n** does all parsing using UTF-8.  The UTF-16 interfaces are provided\n** as a convenience.  The UTF-16 interfaces work by converting the\n** input text into UTF-8, then invoking the corresponding UTF-8 interface.\n**\n** The first argument, \"db\", is a [database connection] obtained from a\n** prior successful call to [sqlite3_open()], [sqlite3_open_v2()] or\n** [sqlite3_open16()].  The database connection must not have been closed.\n**\n** The second argument, \"zSql\", is the statement to be compiled, encoded\n** as either UTF-8 or UTF-16.  The sqlite3_prepare(), sqlite3_prepare_v2(),\n** and sqlite3_prepare_v3()\n** interfaces use UTF-8, and sqlite3_prepare16(), sqlite3_prepare16_v2(),\n** and sqlite3_prepare16_v3() use UTF-16.\n**\n** ^If the nByte argument is negative, then zSql is read up to the\n** first zero terminator. ^If nByte is positive, then it is the\n** number of bytes read from zSql.  ^If nByte is zero, then no prepared\n** statement is generated.\n** If the caller knows that the supplied string is nul-terminated, then\n** there is a small performance advantage to passing an nByte parameter that\n** is the number of bytes in the input string <i>including</i>\n** the nul-terminator.\n**\n** ^If pzTail is not NULL then *pzTail is made to point to the first byte\n** past the end of the first SQL statement in zSql.  These routines only\n** compile the first statement in zSql, so *pzTail is left pointing to\n** what remains uncompiled.\n**\n** ^*ppStmt is left pointing to a compiled [prepared statement] that can be\n** executed using [sqlite3_step()].  ^If there is an error, *ppStmt is set\n** to NULL.  ^If the input text contains no SQL (if the input is an empty\n** string or a comment) then *ppStmt is set to NULL.\n** The calling procedure is responsible for deleting the compiled\n** SQL statement using [sqlite3_finalize()] after it has finished with it.\n** ppStmt may not be NULL.\n**\n** ^On success, the sqlite3_prepare() family of routines return [SQLITE_OK];\n** otherwise an [error code] is returned.\n**\n** The sqlite3_prepare_v2(), sqlite3_prepare_v3(), sqlite3_prepare16_v2(),\n** and sqlite3_prepare16_v3() interfaces are recommended for all new programs.\n** The older interfaces (sqlite3_prepare() and sqlite3_prepare16())\n** are retained for backwards compatibility, but their use is discouraged.\n** ^In the \"vX\" interfaces, the prepared statement\n** that is returned (the [sqlite3_stmt] object) contains a copy of the\n** original SQL text. This causes the [sqlite3_step()] interface to\n** behave differently in three ways:\n**\n** <ol>\n** <li>\n** ^If the database schema changes, instead of returning [SQLITE_SCHEMA] as it\n** always used to do, [sqlite3_step()] will automatically recompile the SQL\n** statement and try to run it again. As many as [SQLITE_MAX_SCHEMA_RETRY]\n** retries will occur before sqlite3_step() gives up and returns an error.\n** </li>\n**\n** <li>\n** ^When an error occurs, [sqlite3_step()] will return one of the detailed\n** [error codes] or [extended error codes].  ^The legacy behavior was that\n** [sqlite3_step()] would only return a generic [SQLITE_ERROR] result code\n** and the application would have to make a second call to [sqlite3_reset()]\n** in order to find the underlying cause of the problem. With the \"v2\" prepare\n** interfaces, the underlying reason for the error is returned immediately.\n** </li>\n**\n** <li>\n** ^If the specific value bound to [parameter | host parameter] in the \n** WHERE clause might influence the choice of query plan for a statement,\n** then the statement will be automatically recompiled, as if there had been \n** a schema change, on the first  [sqlite3_step()] call following any change\n** to the [sqlite3_bind_text | bindings] of that [parameter]. \n** ^The specific value of WHERE-clause [parameter] might influence the \n** choice of query plan if the parameter is the left-hand side of a [LIKE]\n** or [GLOB] operator or if the parameter is compared to an indexed column\n** and the [SQLITE_ENABLE_STAT3] compile-time option is enabled.\n** </li>\n** </ol>\n**\n** <p>^sqlite3_prepare_v3() differs from sqlite3_prepare_v2() only in having\n** the extra prepFlags parameter, which is a bit array consisting of zero or\n** more of the [SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_*] flags.  ^The\n** sqlite3_prepare_v2() interface works exactly the same as\n** sqlite3_prepare_v3() with a zero prepFlags parameter.\n*/\nSQLITE_API int sqlite3_prepare(\n  sqlite3 *db,            /* Database handle */\n  const char *zSql,       /* SQL statement, UTF-8 encoded */\n  int nByte,              /* Maximum length of zSql in bytes. */\n  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */\n  const char **pzTail     /* OUT: Pointer to unused portion of zSql */\n);\nSQLITE_API int sqlite3_prepare_v2(\n  sqlite3 *db,            /* Database handle */\n  const char *zSql,       /* SQL statement, UTF-8 encoded */\n  int nByte,              /* Maximum length of zSql in bytes. */\n  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */\n  const char **pzTail     /* OUT: Pointer to unused portion of zSql */\n);\nSQLITE_API int sqlite3_prepare_v3(\n  sqlite3 *db,            /* Database handle */\n  const char *zSql,       /* SQL statement, UTF-8 encoded */\n  int nByte,              /* Maximum length of zSql in bytes. */\n  unsigned int prepFlags, /* Zero or more SQLITE_PREPARE_ flags */\n  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */\n  const char **pzTail     /* OUT: Pointer to unused portion of zSql */\n);\nSQLITE_API int sqlite3_prepare16(\n  sqlite3 *db,            /* Database handle */\n  const void *zSql,       /* SQL statement, UTF-16 encoded */\n  int nByte,              /* Maximum length of zSql in bytes. */\n  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */\n  const void **pzTail     /* OUT: Pointer to unused portion of zSql */\n);\nSQLITE_API int sqlite3_prepare16_v2(\n  sqlite3 *db,            /* Database handle */\n  const void *zSql,       /* SQL statement, UTF-16 encoded */\n  int nByte,              /* Maximum length of zSql in bytes. */\n  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */\n  const void **pzTail     /* OUT: Pointer to unused portion of zSql */\n);\nSQLITE_API int sqlite3_prepare16_v3(\n  sqlite3 *db,            /* Database handle */\n  const void *zSql,       /* SQL statement, UTF-16 encoded */\n  int nByte,              /* Maximum length of zSql in bytes. */\n  unsigned int prepFlags, /* Zero or more SQLITE_PREPARE_ flags */\n  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */\n  const void **pzTail     /* OUT: Pointer to unused portion of zSql */\n);\n\n/*\n** CAPI3REF: Retrieving Statement SQL\n** METHOD: sqlite3_stmt\n**\n** ^The sqlite3_sql(P) interface returns a pointer to a copy of the UTF-8\n** SQL text used to create [prepared statement] P if P was\n** created by [sqlite3_prepare_v2()], [sqlite3_prepare_v3()],\n** [sqlite3_prepare16_v2()], or [sqlite3_prepare16_v3()].\n** ^The sqlite3_expanded_sql(P) interface returns a pointer to a UTF-8\n** string containing the SQL text of prepared statement P with\n** [bound parameters] expanded.\n** ^The sqlite3_normalized_sql(P) interface returns a pointer to a UTF-8\n** string containing the normalized SQL text of prepared statement P.  The\n** semantics used to normalize a SQL statement are unspecified and subject\n** to change.  At a minimum, literal values will be replaced with suitable\n** placeholders.\n**\n** ^(For example, if a prepared statement is created using the SQL\n** text \"SELECT $abc,:xyz\" and if parameter $abc is bound to integer 2345\n** and parameter :xyz is unbound, then sqlite3_sql() will return\n** the original string, \"SELECT $abc,:xyz\" but sqlite3_expanded_sql()\n** will return \"SELECT 2345,NULL\".)^\n**\n** ^The sqlite3_expanded_sql() interface returns NULL if insufficient memory\n** is available to hold the result, or if the result would exceed the\n** the maximum string length determined by the [SQLITE_LIMIT_LENGTH].\n**\n** ^The [SQLITE_TRACE_SIZE_LIMIT] compile-time option limits the size of\n** bound parameter expansions.  ^The [SQLITE_OMIT_TRACE] compile-time\n** option causes sqlite3_expanded_sql() to always return NULL.\n**\n** ^The strings returned by sqlite3_sql(P) and sqlite3_normalized_sql(P)\n** are managed by SQLite and are automatically freed when the prepared\n** statement is finalized.\n** ^The string returned by sqlite3_expanded_sql(P), on the other hand,\n** is obtained from [sqlite3_malloc()] and must be free by the application\n** by passing it to [sqlite3_free()].\n*/\nSQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt);\nSQLITE_API char *sqlite3_expanded_sql(sqlite3_stmt *pStmt);\nSQLITE_API const char *sqlite3_normalized_sql(sqlite3_stmt *pStmt);\n\n/*\n** CAPI3REF: Determine If An SQL Statement Writes The Database\n** METHOD: sqlite3_stmt\n**\n** ^The sqlite3_stmt_readonly(X) interface returns true (non-zero) if\n** and only if the [prepared statement] X makes no direct changes to\n** the content of the database file.\n**\n** Note that [application-defined SQL functions] or\n** [virtual tables] might change the database indirectly as a side effect.  \n** ^(For example, if an application defines a function \"eval()\" that \n** calls [sqlite3_exec()], then the following SQL statement would\n** change the database file through side-effects:\n**\n** <blockquote><pre>\n**    SELECT eval('DELETE FROM t1') FROM t2;\n** </pre></blockquote>\n**\n** But because the [SELECT] statement does not change the database file\n** directly, sqlite3_stmt_readonly() would still return true.)^\n**\n** ^Transaction control statements such as [BEGIN], [COMMIT], [ROLLBACK],\n** [SAVEPOINT], and [RELEASE] cause sqlite3_stmt_readonly() to return true,\n** since the statements themselves do not actually modify the database but\n** rather they control the timing of when other statements modify the \n** database.  ^The [ATTACH] and [DETACH] statements also cause\n** sqlite3_stmt_readonly() to return true since, while those statements\n** change the configuration of a database connection, they do not make \n** changes to the content of the database files on disk.\n** ^The sqlite3_stmt_readonly() interface returns true for [BEGIN] since\n** [BEGIN] merely sets internal flags, but the [BEGIN|BEGIN IMMEDIATE] and\n** [BEGIN|BEGIN EXCLUSIVE] commands do touch the database and so\n** sqlite3_stmt_readonly() returns false for those commands.\n*/\nSQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);\n\n/*\n** CAPI3REF: Determine If A Prepared Statement Has Been Reset\n** METHOD: sqlite3_stmt\n**\n** ^The sqlite3_stmt_busy(S) interface returns true (non-zero) if the\n** [prepared statement] S has been stepped at least once using \n** [sqlite3_step(S)] but has neither run to completion (returned\n** [SQLITE_DONE] from [sqlite3_step(S)]) nor\n** been reset using [sqlite3_reset(S)].  ^The sqlite3_stmt_busy(S)\n** interface returns false if S is a NULL pointer.  If S is not a \n** NULL pointer and is not a pointer to a valid [prepared statement]\n** object, then the behavior is undefined and probably undesirable.\n**\n** This interface can be used in combination [sqlite3_next_stmt()]\n** to locate all prepared statements associated with a database \n** connection that are in need of being reset.  This can be used,\n** for example, in diagnostic routines to search for prepared \n** statements that are holding a transaction open.\n*/\nSQLITE_API int sqlite3_stmt_busy(sqlite3_stmt*);\n\n/*\n** CAPI3REF: Dynamically Typed Value Object\n** KEYWORDS: {protected sqlite3_value} {unprotected sqlite3_value}\n**\n** SQLite uses the sqlite3_value object to represent all values\n** that can be stored in a database table. SQLite uses dynamic typing\n** for the values it stores.  ^Values stored in sqlite3_value objects\n** can be integers, floating point values, strings, BLOBs, or NULL.\n**\n** An sqlite3_value object may be either \"protected\" or \"unprotected\".\n** Some interfaces require a protected sqlite3_value.  Other interfaces\n** will accept either a protected or an unprotected sqlite3_value.\n** Every interface that accepts sqlite3_value arguments specifies\n** whether or not it requires a protected sqlite3_value.  The\n** [sqlite3_value_dup()] interface can be used to construct a new \n** protected sqlite3_value from an unprotected sqlite3_value.\n**\n** The terms \"protected\" and \"unprotected\" refer to whether or not\n** a mutex is held.  An internal mutex is held for a protected\n** sqlite3_value object but no mutex is held for an unprotected\n** sqlite3_value object.  If SQLite is compiled to be single-threaded\n** (with [SQLITE_THREADSAFE=0] and with [sqlite3_threadsafe()] returning 0)\n** or if SQLite is run in one of reduced mutex modes \n** [SQLITE_CONFIG_SINGLETHREAD] or [SQLITE_CONFIG_MULTITHREAD]\n** then there is no distinction between protected and unprotected\n** sqlite3_value objects and they can be used interchangeably.  However,\n** for maximum code portability it is recommended that applications\n** still make the distinction between protected and unprotected\n** sqlite3_value objects even when not strictly required.\n**\n** ^The sqlite3_value objects that are passed as parameters into the\n** implementation of [application-defined SQL functions] are protected.\n** ^The sqlite3_value object returned by\n** [sqlite3_column_value()] is unprotected.\n** Unprotected sqlite3_value objects may only be used as arguments\n** to [sqlite3_result_value()], [sqlite3_bind_value()], and\n** [sqlite3_value_dup()].\n** The [sqlite3_value_blob | sqlite3_value_type()] family of\n** interfaces require protected sqlite3_value objects.\n*/\ntypedef struct sqlite3_value sqlite3_value;\n\n/*\n** CAPI3REF: SQL Function Context Object\n**\n** The context in which an SQL function executes is stored in an\n** sqlite3_context object.  ^A pointer to an sqlite3_context object\n** is always first parameter to [application-defined SQL functions].\n** The application-defined SQL function implementation will pass this\n** pointer through into calls to [sqlite3_result_int | sqlite3_result()],\n** [sqlite3_aggregate_context()], [sqlite3_user_data()],\n** [sqlite3_context_db_handle()], [sqlite3_get_auxdata()],\n** and/or [sqlite3_set_auxdata()].\n*/\ntypedef struct sqlite3_context sqlite3_context;\n\n/*\n** CAPI3REF: Binding Values To Prepared Statements\n** KEYWORDS: {host parameter} {host parameters} {host parameter name}\n** KEYWORDS: {SQL parameter} {SQL parameters} {parameter binding}\n** METHOD: sqlite3_stmt\n**\n** ^(In the SQL statement text input to [sqlite3_prepare_v2()] and its variants,\n** literals may be replaced by a [parameter] that matches one of following\n** templates:\n**\n** <ul>\n** <li>  ?\n** <li>  ?NNN\n** <li>  :VVV\n** <li>  @VVV\n** <li>  $VVV\n** </ul>\n**\n** In the templates above, NNN represents an integer literal,\n** and VVV represents an alphanumeric identifier.)^  ^The values of these\n** parameters (also called \"host parameter names\" or \"SQL parameters\")\n** can be set using the sqlite3_bind_*() routines defined here.\n**\n** ^The first argument to the sqlite3_bind_*() routines is always\n** a pointer to the [sqlite3_stmt] object returned from\n** [sqlite3_prepare_v2()] or its variants.\n**\n** ^The second argument is the index of the SQL parameter to be set.\n** ^The leftmost SQL parameter has an index of 1.  ^When the same named\n** SQL parameter is used more than once, second and subsequent\n** occurrences have the same index as the first occurrence.\n** ^The index for named parameters can be looked up using the\n** [sqlite3_bind_parameter_index()] API if desired.  ^The index\n** for \"?NNN\" parameters is the value of NNN.\n** ^The NNN value must be between 1 and the [sqlite3_limit()]\n** parameter [SQLITE_LIMIT_VARIABLE_NUMBER] (default value: 999).\n**\n** ^The third argument is the value to bind to the parameter.\n** ^If the third parameter to sqlite3_bind_text() or sqlite3_bind_text16()\n** or sqlite3_bind_blob() is a NULL pointer then the fourth parameter\n** is ignored and the end result is the same as sqlite3_bind_null().\n**\n** ^(In those routines that have a fourth argument, its value is the\n** number of bytes in the parameter.  To be clear: the value is the\n** number of <u>bytes</u> in the value, not the number of characters.)^\n** ^If the fourth parameter to sqlite3_bind_text() or sqlite3_bind_text16()\n** is negative, then the length of the string is\n** the number of bytes up to the first zero terminator.\n** If the fourth parameter to sqlite3_bind_blob() is negative, then\n** the behavior is undefined.\n** If a non-negative fourth parameter is provided to sqlite3_bind_text()\n** or sqlite3_bind_text16() or sqlite3_bind_text64() then\n** that parameter must be the byte offset\n** where the NUL terminator would occur assuming the string were NUL\n** terminated.  If any NUL characters occur at byte offsets less than \n** the value of the fourth parameter then the resulting string value will\n** contain embedded NULs.  The result of expressions involving strings\n** with embedded NULs is undefined.\n**\n** ^The fifth argument to the BLOB and string binding interfaces\n** is a destructor used to dispose of the BLOB or\n** string after SQLite has finished with it.  ^The destructor is called\n** to dispose of the BLOB or string even if the call to bind API fails.\n** ^If the fifth argument is\n** the special value [SQLITE_STATIC], then SQLite assumes that the\n** information is in static, unmanaged space and does not need to be freed.\n** ^If the fifth argument has the value [SQLITE_TRANSIENT], then\n** SQLite makes its own private copy of the data immediately, before\n** the sqlite3_bind_*() routine returns.\n**\n** ^The sixth argument to sqlite3_bind_text64() must be one of\n** [SQLITE_UTF8], [SQLITE_UTF16], [SQLITE_UTF16BE], or [SQLITE_UTF16LE]\n** to specify the encoding of the text in the third parameter.  If\n** the sixth argument to sqlite3_bind_text64() is not one of the\n** allowed values shown above, or if the text encoding is different\n** from the encoding specified by the sixth parameter, then the behavior\n** is undefined.\n**\n** ^The sqlite3_bind_zeroblob() routine binds a BLOB of length N that\n** is filled with zeroes.  ^A zeroblob uses a fixed amount of memory\n** (just an integer to hold its size) while it is being processed.\n** Zeroblobs are intended to serve as placeholders for BLOBs whose\n** content is later written using\n** [sqlite3_blob_open | incremental BLOB I/O] routines.\n** ^A negative value for the zeroblob results in a zero-length BLOB.\n**\n** ^The sqlite3_bind_pointer(S,I,P,T,D) routine causes the I-th parameter in\n** [prepared statement] S to have an SQL value of NULL, but to also be\n** associated with the pointer P of type T.  ^D is either a NULL pointer or\n** a pointer to a destructor function for P. ^SQLite will invoke the\n** destructor D with a single argument of P when it is finished using\n** P.  The T parameter should be a static string, preferably a string\n** literal. The sqlite3_bind_pointer() routine is part of the\n** [pointer passing interface] added for SQLite 3.20.0.\n**\n** ^If any of the sqlite3_bind_*() routines are called with a NULL pointer\n** for the [prepared statement] or with a prepared statement for which\n** [sqlite3_step()] has been called more recently than [sqlite3_reset()],\n** then the call will return [SQLITE_MISUSE].  If any sqlite3_bind_()\n** routine is passed a [prepared statement] that has been finalized, the\n** result is undefined and probably harmful.\n**\n** ^Bindings are not cleared by the [sqlite3_reset()] routine.\n** ^Unbound parameters are interpreted as NULL.\n**\n** ^The sqlite3_bind_* routines return [SQLITE_OK] on success or an\n** [error code] if anything goes wrong.\n** ^[SQLITE_TOOBIG] might be returned if the size of a string or BLOB\n** exceeds limits imposed by [sqlite3_limit]([SQLITE_LIMIT_LENGTH]) or\n** [SQLITE_MAX_LENGTH].\n** ^[SQLITE_RANGE] is returned if the parameter\n** index is out of range.  ^[SQLITE_NOMEM] is returned if malloc() fails.\n**\n** See also: [sqlite3_bind_parameter_count()],\n** [sqlite3_bind_parameter_name()], and [sqlite3_bind_parameter_index()].\n*/\nSQLITE_API int sqlite3_bind_blob(sqlite3_stmt*, int, const void*, int n, void(*)(void*));\nSQLITE_API int sqlite3_bind_blob64(sqlite3_stmt*, int, const void*, sqlite3_uint64,\n                        void(*)(void*));\nSQLITE_API int sqlite3_bind_double(sqlite3_stmt*, int, double);\nSQLITE_API int sqlite3_bind_int(sqlite3_stmt*, int, int);\nSQLITE_API int sqlite3_bind_int64(sqlite3_stmt*, int, sqlite3_int64);\nSQLITE_API int sqlite3_bind_null(sqlite3_stmt*, int);\nSQLITE_API int sqlite3_bind_text(sqlite3_stmt*,int,const char*,int,void(*)(void*));\nSQLITE_API int sqlite3_bind_text16(sqlite3_stmt*, int, const void*, int, void(*)(void*));\nSQLITE_API int sqlite3_bind_text64(sqlite3_stmt*, int, const char*, sqlite3_uint64,\n                         void(*)(void*), unsigned char encoding);\nSQLITE_API int sqlite3_bind_value(sqlite3_stmt*, int, const sqlite3_value*);\nSQLITE_API int sqlite3_bind_pointer(sqlite3_stmt*, int, void*, const char*,void(*)(void*));\nSQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt*, int, int n);\nSQLITE_API int sqlite3_bind_zeroblob64(sqlite3_stmt*, int, sqlite3_uint64);\n\n/*\n** CAPI3REF: Number Of SQL Parameters\n** METHOD: sqlite3_stmt\n**\n** ^This routine can be used to find the number of [SQL parameters]\n** in a [prepared statement].  SQL parameters are tokens of the\n** form \"?\", \"?NNN\", \":AAA\", \"$AAA\", or \"@AAA\" that serve as\n** placeholders for values that are [sqlite3_bind_blob | bound]\n** to the parameters at a later time.\n**\n** ^(This routine actually returns the index of the largest (rightmost)\n** parameter. For all forms except ?NNN, this will correspond to the\n** number of unique parameters.  If parameters of the ?NNN form are used,\n** there may be gaps in the list.)^\n**\n** See also: [sqlite3_bind_blob|sqlite3_bind()],\n** [sqlite3_bind_parameter_name()], and\n** [sqlite3_bind_parameter_index()].\n*/\nSQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt*);\n\n/*\n** CAPI3REF: Name Of A Host Parameter\n** METHOD: sqlite3_stmt\n**\n** ^The sqlite3_bind_parameter_name(P,N) interface returns\n** the name of the N-th [SQL parameter] in the [prepared statement] P.\n** ^(SQL parameters of the form \"?NNN\" or \":AAA\" or \"@AAA\" or \"$AAA\"\n** have a name which is the string \"?NNN\" or \":AAA\" or \"@AAA\" or \"$AAA\"\n** respectively.\n** In other words, the initial \":\" or \"$\" or \"@\" or \"?\"\n** is included as part of the name.)^\n** ^Parameters of the form \"?\" without a following integer have no name\n** and are referred to as \"nameless\" or \"anonymous parameters\".\n**\n** ^The first host parameter has an index of 1, not 0.\n**\n** ^If the value N is out of range or if the N-th parameter is\n** nameless, then NULL is returned.  ^The returned string is\n** always in UTF-8 encoding even if the named parameter was\n** originally specified as UTF-16 in [sqlite3_prepare16()],\n** [sqlite3_prepare16_v2()], or [sqlite3_prepare16_v3()].\n**\n** See also: [sqlite3_bind_blob|sqlite3_bind()],\n** [sqlite3_bind_parameter_count()], and\n** [sqlite3_bind_parameter_index()].\n*/\nSQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt*, int);\n\n/*\n** CAPI3REF: Index Of A Parameter With A Given Name\n** METHOD: sqlite3_stmt\n**\n** ^Return the index of an SQL parameter given its name.  ^The\n** index value returned is suitable for use as the second\n** parameter to [sqlite3_bind_blob|sqlite3_bind()].  ^A zero\n** is returned if no matching parameter is found.  ^The parameter\n** name must be given in UTF-8 even if the original statement\n** was prepared from UTF-16 text using [sqlite3_prepare16_v2()] or\n** [sqlite3_prepare16_v3()].\n**\n** See also: [sqlite3_bind_blob|sqlite3_bind()],\n** [sqlite3_bind_parameter_count()], and\n** [sqlite3_bind_parameter_name()].\n*/\nSQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt*, const char *zName);\n\n/*\n** CAPI3REF: Reset All Bindings On A Prepared Statement\n** METHOD: sqlite3_stmt\n**\n** ^Contrary to the intuition of many, [sqlite3_reset()] does not reset\n** the [sqlite3_bind_blob | bindings] on a [prepared statement].\n** ^Use this routine to reset all host parameters to NULL.\n*/\nSQLITE_API int sqlite3_clear_bindings(sqlite3_stmt*);\n\n/*\n** CAPI3REF: Number Of Columns In A Result Set\n** METHOD: sqlite3_stmt\n**\n** ^Return the number of columns in the result set returned by the\n** [prepared statement]. ^If this routine returns 0, that means the \n** [prepared statement] returns no data (for example an [UPDATE]).\n** ^However, just because this routine returns a positive number does not\n** mean that one or more rows of data will be returned.  ^A SELECT statement\n** will always have a positive sqlite3_column_count() but depending on the\n** WHERE clause constraints and the table content, it might return no rows.\n**\n** See also: [sqlite3_data_count()]\n*/\nSQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt);\n\n/*\n** CAPI3REF: Column Names In A Result Set\n** METHOD: sqlite3_stmt\n**\n** ^These routines return the name assigned to a particular column\n** in the result set of a [SELECT] statement.  ^The sqlite3_column_name()\n** interface returns a pointer to a zero-terminated UTF-8 string\n** and sqlite3_column_name16() returns a pointer to a zero-terminated\n** UTF-16 string.  ^The first parameter is the [prepared statement]\n** that implements the [SELECT] statement. ^The second parameter is the\n** column number.  ^The leftmost column is number 0.\n**\n** ^The returned string pointer is valid until either the [prepared statement]\n** is destroyed by [sqlite3_finalize()] or until the statement is automatically\n** reprepared by the first call to [sqlite3_step()] for a particular run\n** or until the next call to\n** sqlite3_column_name() or sqlite3_column_name16() on the same column.\n**\n** ^If sqlite3_malloc() fails during the processing of either routine\n** (for example during a conversion from UTF-8 to UTF-16) then a\n** NULL pointer is returned.\n**\n** ^The name of a result column is the value of the \"AS\" clause for\n** that column, if there is an AS clause.  If there is no AS clause\n** then the name of the column is unspecified and may change from\n** one release of SQLite to the next.\n*/\nSQLITE_API const char *sqlite3_column_name(sqlite3_stmt*, int N);\nSQLITE_API const void *sqlite3_column_name16(sqlite3_stmt*, int N);\n\n/*\n** CAPI3REF: Source Of Data In A Query Result\n** METHOD: sqlite3_stmt\n**\n** ^These routines provide a means to determine the database, table, and\n** table column that is the origin of a particular result column in\n** [SELECT] statement.\n** ^The name of the database or table or column can be returned as\n** either a UTF-8 or UTF-16 string.  ^The _database_ routines return\n** the database name, the _table_ routines return the table name, and\n** the origin_ routines return the column name.\n** ^The returned string is valid until the [prepared statement] is destroyed\n** using [sqlite3_finalize()] or until the statement is automatically\n** reprepared by the first call to [sqlite3_step()] for a particular run\n** or until the same information is requested\n** again in a different encoding.\n**\n** ^The names returned are the original un-aliased names of the\n** database, table, and column.\n**\n** ^The first argument to these interfaces is a [prepared statement].\n** ^These functions return information about the Nth result column returned by\n** the statement, where N is the second function argument.\n** ^The left-most column is column 0 for these routines.\n**\n** ^If the Nth column returned by the statement is an expression or\n** subquery and is not a column value, then all of these functions return\n** NULL.  ^These routine might also return NULL if a memory allocation error\n** occurs.  ^Otherwise, they return the name of the attached database, table,\n** or column that query result column was extracted from.\n**\n** ^As with all other SQLite APIs, those whose names end with \"16\" return\n** UTF-16 encoded strings and the other functions return UTF-8.\n**\n** ^These APIs are only available if the library was compiled with the\n** [SQLITE_ENABLE_COLUMN_METADATA] C-preprocessor symbol.\n**\n** If two or more threads call one or more of these routines against the same\n** prepared statement and column at the same time then the results are\n** undefined.\n**\n** If two or more threads call one or more\n** [sqlite3_column_database_name | column metadata interfaces]\n** for the same [prepared statement] and result column\n** at the same time then the results are undefined.\n*/\nSQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt*,int);\nSQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt*,int);\nSQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt*,int);\nSQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt*,int);\nSQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt*,int);\nSQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt*,int);\n\n/*\n** CAPI3REF: Declared Datatype Of A Query Result\n** METHOD: sqlite3_stmt\n**\n** ^(The first parameter is a [prepared statement].\n** If this statement is a [SELECT] statement and the Nth column of the\n** returned result set of that [SELECT] is a table column (not an\n** expression or subquery) then the declared type of the table\n** column is returned.)^  ^If the Nth column of the result set is an\n** expression or subquery, then a NULL pointer is returned.\n** ^The returned string is always UTF-8 encoded.\n**\n** ^(For example, given the database schema:\n**\n** CREATE TABLE t1(c1 VARIANT);\n**\n** and the following statement to be compiled:\n**\n** SELECT c1 + 1, c1 FROM t1;\n**\n** this routine would return the string \"VARIANT\" for the second result\n** column (i==1), and a NULL pointer for the first result column (i==0).)^\n**\n** ^SQLite uses dynamic run-time typing.  ^So just because a column\n** is declared to contain a particular type does not mean that the\n** data stored in that column is of the declared type.  SQLite is\n** strongly typed, but the typing is dynamic not static.  ^Type\n** is associated with individual values, not with the containers\n** used to hold those values.\n*/\nSQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt*,int);\nSQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt*,int);\n\n/*\n** CAPI3REF: Evaluate An SQL Statement\n** METHOD: sqlite3_stmt\n**\n** After a [prepared statement] has been prepared using any of\n** [sqlite3_prepare_v2()], [sqlite3_prepare_v3()], [sqlite3_prepare16_v2()],\n** or [sqlite3_prepare16_v3()] or one of the legacy\n** interfaces [sqlite3_prepare()] or [sqlite3_prepare16()], this function\n** must be called one or more times to evaluate the statement.\n**\n** The details of the behavior of the sqlite3_step() interface depend\n** on whether the statement was prepared using the newer \"vX\" interfaces\n** [sqlite3_prepare_v3()], [sqlite3_prepare_v2()], [sqlite3_prepare16_v3()],\n** [sqlite3_prepare16_v2()] or the older legacy\n** interfaces [sqlite3_prepare()] and [sqlite3_prepare16()].  The use of the\n** new \"vX\" interface is recommended for new applications but the legacy\n** interface will continue to be supported.\n**\n** ^In the legacy interface, the return value will be either [SQLITE_BUSY],\n** [SQLITE_DONE], [SQLITE_ROW], [SQLITE_ERROR], or [SQLITE_MISUSE].\n** ^With the \"v2\" interface, any of the other [result codes] or\n** [extended result codes] might be returned as well.\n**\n** ^[SQLITE_BUSY] means that the database engine was unable to acquire the\n** database locks it needs to do its job.  ^If the statement is a [COMMIT]\n** or occurs outside of an explicit transaction, then you can retry the\n** statement.  If the statement is not a [COMMIT] and occurs within an\n** explicit transaction then you should rollback the transaction before\n** continuing.\n**\n** ^[SQLITE_DONE] means that the statement has finished executing\n** successfully.  sqlite3_step() should not be called again on this virtual\n** machine without first calling [sqlite3_reset()] to reset the virtual\n** machine back to its initial state.\n**\n** ^If the SQL statement being executed returns any data, then [SQLITE_ROW]\n** is returned each time a new row of data is ready for processing by the\n** caller. The values may be accessed using the [column access functions].\n** sqlite3_step() is called again to retrieve the next row of data.\n**\n** ^[SQLITE_ERROR] means that a run-time error (such as a constraint\n** violation) has occurred.  sqlite3_step() should not be called again on\n** the VM. More information may be found by calling [sqlite3_errmsg()].\n** ^With the legacy interface, a more specific error code (for example,\n** [SQLITE_INTERRUPT], [SQLITE_SCHEMA], [SQLITE_CORRUPT], and so forth)\n** can be obtained by calling [sqlite3_reset()] on the\n** [prepared statement].  ^In the \"v2\" interface,\n** the more specific error code is returned directly by sqlite3_step().\n**\n** [SQLITE_MISUSE] means that the this routine was called inappropriately.\n** Perhaps it was called on a [prepared statement] that has\n** already been [sqlite3_finalize | finalized] or on one that had\n** previously returned [SQLITE_ERROR] or [SQLITE_DONE].  Or it could\n** be the case that the same database connection is being used by two or\n** more threads at the same moment in time.\n**\n** For all versions of SQLite up to and including 3.6.23.1, a call to\n** [sqlite3_reset()] was required after sqlite3_step() returned anything\n** other than [SQLITE_ROW] before any subsequent invocation of\n** sqlite3_step().  Failure to reset the prepared statement using \n** [sqlite3_reset()] would result in an [SQLITE_MISUSE] return from\n** sqlite3_step().  But after [version 3.6.23.1] ([dateof:3.6.23.1],\n** sqlite3_step() began\n** calling [sqlite3_reset()] automatically in this circumstance rather\n** than returning [SQLITE_MISUSE].  This is not considered a compatibility\n** break because any application that ever receives an SQLITE_MISUSE error\n** is broken by definition.  The [SQLITE_OMIT_AUTORESET] compile-time option\n** can be used to restore the legacy behavior.\n**\n** <b>Goofy Interface Alert:</b> In the legacy interface, the sqlite3_step()\n** API always returns a generic error code, [SQLITE_ERROR], following any\n** error other than [SQLITE_BUSY] and [SQLITE_MISUSE].  You must call\n** [sqlite3_reset()] or [sqlite3_finalize()] in order to find one of the\n** specific [error codes] that better describes the error.\n** We admit that this is a goofy design.  The problem has been fixed\n** with the \"v2\" interface.  If you prepare all of your SQL statements\n** using [sqlite3_prepare_v3()] or [sqlite3_prepare_v2()]\n** or [sqlite3_prepare16_v2()] or [sqlite3_prepare16_v3()] instead\n** of the legacy [sqlite3_prepare()] and [sqlite3_prepare16()] interfaces,\n** then the more specific [error codes] are returned directly\n** by sqlite3_step().  The use of the \"vX\" interfaces is recommended.\n*/\nSQLITE_API int sqlite3_step(sqlite3_stmt*);\n\n/*\n** CAPI3REF: Number of columns in a result set\n** METHOD: sqlite3_stmt\n**\n** ^The sqlite3_data_count(P) interface returns the number of columns in the\n** current row of the result set of [prepared statement] P.\n** ^If prepared statement P does not have results ready to return\n** (via calls to the [sqlite3_column_int | sqlite3_column_*()] of\n** interfaces) then sqlite3_data_count(P) returns 0.\n** ^The sqlite3_data_count(P) routine also returns 0 if P is a NULL pointer.\n** ^The sqlite3_data_count(P) routine returns 0 if the previous call to\n** [sqlite3_step](P) returned [SQLITE_DONE].  ^The sqlite3_data_count(P)\n** will return non-zero if previous call to [sqlite3_step](P) returned\n** [SQLITE_ROW], except in the case of the [PRAGMA incremental_vacuum]\n** where it always returns zero since each step of that multi-step\n** pragma returns 0 columns of data.\n**\n** See also: [sqlite3_column_count()]\n*/\nSQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt);\n\n/*\n** CAPI3REF: Fundamental Datatypes\n** KEYWORDS: SQLITE_TEXT\n**\n** ^(Every value in SQLite has one of five fundamental datatypes:\n**\n** <ul>\n** <li> 64-bit signed integer\n** <li> 64-bit IEEE floating point number\n** <li> string\n** <li> BLOB\n** <li> NULL\n** </ul>)^\n**\n** These constants are codes for each of those types.\n**\n** Note that the SQLITE_TEXT constant was also used in SQLite version 2\n** for a completely different meaning.  Software that links against both\n** SQLite version 2 and SQLite version 3 should use SQLITE3_TEXT, not\n** SQLITE_TEXT.\n*/\n#define SQLITE_INTEGER  1\n#define SQLITE_FLOAT    2\n#define SQLITE_BLOB     4\n#define SQLITE_NULL     5\n#ifdef SQLITE_TEXT\n# undef SQLITE_TEXT\n#else\n# define SQLITE_TEXT     3\n#endif\n#define SQLITE3_TEXT     3\n\n/*\n** CAPI3REF: Result Values From A Query\n** KEYWORDS: {column access functions}\n** METHOD: sqlite3_stmt\n**\n** <b>Summary:</b>\n** <blockquote><table border=0 cellpadding=0 cellspacing=0>\n** <tr><td><b>sqlite3_column_blob</b><td>&rarr;<td>BLOB result\n** <tr><td><b>sqlite3_column_double</b><td>&rarr;<td>REAL result\n** <tr><td><b>sqlite3_column_int</b><td>&rarr;<td>32-bit INTEGER result\n** <tr><td><b>sqlite3_column_int64</b><td>&rarr;<td>64-bit INTEGER result\n** <tr><td><b>sqlite3_column_text</b><td>&rarr;<td>UTF-8 TEXT result\n** <tr><td><b>sqlite3_column_text16</b><td>&rarr;<td>UTF-16 TEXT result\n** <tr><td><b>sqlite3_column_value</b><td>&rarr;<td>The result as an \n** [sqlite3_value|unprotected sqlite3_value] object.\n** <tr><td>&nbsp;<td>&nbsp;<td>&nbsp;\n** <tr><td><b>sqlite3_column_bytes</b><td>&rarr;<td>Size of a BLOB\n** or a UTF-8 TEXT result in bytes\n** <tr><td><b>sqlite3_column_bytes16&nbsp;&nbsp;</b>\n** <td>&rarr;&nbsp;&nbsp;<td>Size of UTF-16\n** TEXT in bytes\n** <tr><td><b>sqlite3_column_type</b><td>&rarr;<td>Default\n** datatype of the result\n** </table></blockquote>\n**\n** <b>Details:</b>\n**\n** ^These routines return information about a single column of the current\n** result row of a query.  ^In every case the first argument is a pointer\n** to the [prepared statement] that is being evaluated (the [sqlite3_stmt*]\n** that was returned from [sqlite3_prepare_v2()] or one of its variants)\n** and the second argument is the index of the column for which information\n** should be returned. ^The leftmost column of the result set has the index 0.\n** ^The number of columns in the result can be determined using\n** [sqlite3_column_count()].\n**\n** If the SQL statement does not currently point to a valid row, or if the\n** column index is out of range, the result is undefined.\n** These routines may only be called when the most recent call to\n** [sqlite3_step()] has returned [SQLITE_ROW] and neither\n** [sqlite3_reset()] nor [sqlite3_finalize()] have been called subsequently.\n** If any of these routines are called after [sqlite3_reset()] or\n** [sqlite3_finalize()] or after [sqlite3_step()] has returned\n** something other than [SQLITE_ROW], the results are undefined.\n** If [sqlite3_step()] or [sqlite3_reset()] or [sqlite3_finalize()]\n** are called from a different thread while any of these routines\n** are pending, then the results are undefined.\n**\n** The first six interfaces (_blob, _double, _int, _int64, _text, and _text16)\n** each return the value of a result column in a specific data format.  If\n** the result column is not initially in the requested format (for example,\n** if the query returns an integer but the sqlite3_column_text() interface\n** is used to extract the value) then an automatic type conversion is performed.\n**\n** ^The sqlite3_column_type() routine returns the\n** [SQLITE_INTEGER | datatype code] for the initial data type\n** of the result column.  ^The returned value is one of [SQLITE_INTEGER],\n** [SQLITE_FLOAT], [SQLITE_TEXT], [SQLITE_BLOB], or [SQLITE_NULL].\n** The return value of sqlite3_column_type() can be used to decide which\n** of the first six interface should be used to extract the column value.\n** The value returned by sqlite3_column_type() is only meaningful if no\n** automatic type conversions have occurred for the value in question.  \n** After a type conversion, the result of calling sqlite3_column_type()\n** is undefined, though harmless.  Future\n** versions of SQLite may change the behavior of sqlite3_column_type()\n** following a type conversion.\n**\n** If the result is a BLOB or a TEXT string, then the sqlite3_column_bytes()\n** or sqlite3_column_bytes16() interfaces can be used to determine the size\n** of that BLOB or string.\n**\n** ^If the result is a BLOB or UTF-8 string then the sqlite3_column_bytes()\n** routine returns the number of bytes in that BLOB or string.\n** ^If the result is a UTF-16 string, then sqlite3_column_bytes() converts\n** the string to UTF-8 and then returns the number of bytes.\n** ^If the result is a numeric value then sqlite3_column_bytes() uses\n** [sqlite3_snprintf()] to convert that value to a UTF-8 string and returns\n** the number of bytes in that string.\n** ^If the result is NULL, then sqlite3_column_bytes() returns zero.\n**\n** ^If the result is a BLOB or UTF-16 string then the sqlite3_column_bytes16()\n** routine returns the number of bytes in that BLOB or string.\n** ^If the result is a UTF-8 string, then sqlite3_column_bytes16() converts\n** the string to UTF-16 and then returns the number of bytes.\n** ^If the result is a numeric value then sqlite3_column_bytes16() uses\n** [sqlite3_snprintf()] to convert that value to a UTF-16 string and returns\n** the number of bytes in that string.\n** ^If the result is NULL, then sqlite3_column_bytes16() returns zero.\n**\n** ^The values returned by [sqlite3_column_bytes()] and \n** [sqlite3_column_bytes16()] do not include the zero terminators at the end\n** of the string.  ^For clarity: the values returned by\n** [sqlite3_column_bytes()] and [sqlite3_column_bytes16()] are the number of\n** bytes in the string, not the number of characters.\n**\n** ^Strings returned by sqlite3_column_text() and sqlite3_column_text16(),\n** even empty strings, are always zero-terminated.  ^The return\n** value from sqlite3_column_blob() for a zero-length BLOB is a NULL pointer.\n**\n** <b>Warning:</b> ^The object returned by [sqlite3_column_value()] is an\n** [unprotected sqlite3_value] object.  In a multithreaded environment,\n** an unprotected sqlite3_value object may only be used safely with\n** [sqlite3_bind_value()] and [sqlite3_result_value()].\n** If the [unprotected sqlite3_value] object returned by\n** [sqlite3_column_value()] is used in any other way, including calls\n** to routines like [sqlite3_value_int()], [sqlite3_value_text()],\n** or [sqlite3_value_bytes()], the behavior is not threadsafe.\n** Hence, the sqlite3_column_value() interface\n** is normally only useful within the implementation of \n** [application-defined SQL functions] or [virtual tables], not within\n** top-level application code.\n**\n** The these routines may attempt to convert the datatype of the result.\n** ^For example, if the internal representation is FLOAT and a text result\n** is requested, [sqlite3_snprintf()] is used internally to perform the\n** conversion automatically.  ^(The following table details the conversions\n** that are applied:\n**\n** <blockquote>\n** <table border=\"1\">\n** <tr><th> Internal<br>Type <th> Requested<br>Type <th>  Conversion\n**\n** <tr><td>  NULL    <td> INTEGER   <td> Result is 0\n** <tr><td>  NULL    <td>  FLOAT    <td> Result is 0.0\n** <tr><td>  NULL    <td>   TEXT    <td> Result is a NULL pointer\n** <tr><td>  NULL    <td>   BLOB    <td> Result is a NULL pointer\n** <tr><td> INTEGER  <td>  FLOAT    <td> Convert from integer to float\n** <tr><td> INTEGER  <td>   TEXT    <td> ASCII rendering of the integer\n** <tr><td> INTEGER  <td>   BLOB    <td> Same as INTEGER->TEXT\n** <tr><td>  FLOAT   <td> INTEGER   <td> [CAST] to INTEGER\n** <tr><td>  FLOAT   <td>   TEXT    <td> ASCII rendering of the float\n** <tr><td>  FLOAT   <td>   BLOB    <td> [CAST] to BLOB\n** <tr><td>  TEXT    <td> INTEGER   <td> [CAST] to INTEGER\n** <tr><td>  TEXT    <td>  FLOAT    <td> [CAST] to REAL\n** <tr><td>  TEXT    <td>   BLOB    <td> No change\n** <tr><td>  BLOB    <td> INTEGER   <td> [CAST] to INTEGER\n** <tr><td>  BLOB    <td>  FLOAT    <td> [CAST] to REAL\n** <tr><td>  BLOB    <td>   TEXT    <td> Add a zero terminator if needed\n** </table>\n** </blockquote>)^\n**\n** Note that when type conversions occur, pointers returned by prior\n** calls to sqlite3_column_blob(), sqlite3_column_text(), and/or\n** sqlite3_column_text16() may be invalidated.\n** Type conversions and pointer invalidations might occur\n** in the following cases:\n**\n** <ul>\n** <li> The initial content is a BLOB and sqlite3_column_text() or\n**      sqlite3_column_text16() is called.  A zero-terminator might\n**      need to be added to the string.</li>\n** <li> The initial content is UTF-8 text and sqlite3_column_bytes16() or\n**      sqlite3_column_text16() is called.  The content must be converted\n**      to UTF-16.</li>\n** <li> The initial content is UTF-16 text and sqlite3_column_bytes() or\n**      sqlite3_column_text() is called.  The content must be converted\n**      to UTF-8.</li>\n** </ul>\n**\n** ^Conversions between UTF-16be and UTF-16le are always done in place and do\n** not invalidate a prior pointer, though of course the content of the buffer\n** that the prior pointer references will have been modified.  Other kinds\n** of conversion are done in place when it is possible, but sometimes they\n** are not possible and in those cases prior pointers are invalidated.\n**\n** The safest policy is to invoke these routines\n** in one of the following ways:\n**\n** <ul>\n**  <li>sqlite3_column_text() followed by sqlite3_column_bytes()</li>\n**  <li>sqlite3_column_blob() followed by sqlite3_column_bytes()</li>\n**  <li>sqlite3_column_text16() followed by sqlite3_column_bytes16()</li>\n** </ul>\n**\n** In other words, you should call sqlite3_column_text(),\n** sqlite3_column_blob(), or sqlite3_column_text16() first to force the result\n** into the desired format, then invoke sqlite3_column_bytes() or\n** sqlite3_column_bytes16() to find the size of the result.  Do not mix calls\n** to sqlite3_column_text() or sqlite3_column_blob() with calls to\n** sqlite3_column_bytes16(), and do not mix calls to sqlite3_column_text16()\n** with calls to sqlite3_column_bytes().\n**\n** ^The pointers returned are valid until a type conversion occurs as\n** described above, or until [sqlite3_step()] or [sqlite3_reset()] or\n** [sqlite3_finalize()] is called.  ^The memory space used to hold strings\n** and BLOBs is freed automatically.  Do not pass the pointers returned\n** from [sqlite3_column_blob()], [sqlite3_column_text()], etc. into\n** [sqlite3_free()].\n**\n** As long as the input parameters are correct, these routines will only\n** fail if an out-of-memory error occurs during a format conversion.\n** Only the following subset of interfaces are subject to out-of-memory\n** errors:\n**\n** <ul>\n** <li> sqlite3_column_blob()\n** <li> sqlite3_column_text()\n** <li> sqlite3_column_text16()\n** <li> sqlite3_column_bytes()\n** <li> sqlite3_column_bytes16()\n** </ul>\n**\n** If an out-of-memory error occurs, then the return value from these\n** routines is the same as if the column had contained an SQL NULL value.\n** Valid SQL NULL returns can be distinguished from out-of-memory errors\n** by invoking the [sqlite3_errcode()] immediately after the suspect\n** return value is obtained and before any\n** other SQLite interface is called on the same [database connection].\n*/\nSQLITE_API const void *sqlite3_column_blob(sqlite3_stmt*, int iCol);\nSQLITE_API double sqlite3_column_double(sqlite3_stmt*, int iCol);\nSQLITE_API int sqlite3_column_int(sqlite3_stmt*, int iCol);\nSQLITE_API sqlite3_int64 sqlite3_column_int64(sqlite3_stmt*, int iCol);\nSQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol);\nSQLITE_API const void *sqlite3_column_text16(sqlite3_stmt*, int iCol);\nSQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt*, int iCol);\nSQLITE_API int sqlite3_column_bytes(sqlite3_stmt*, int iCol);\nSQLITE_API int sqlite3_column_bytes16(sqlite3_stmt*, int iCol);\nSQLITE_API int sqlite3_column_type(sqlite3_stmt*, int iCol);\n\n/*\n** CAPI3REF: Destroy A Prepared Statement Object\n** DESTRUCTOR: sqlite3_stmt\n**\n** ^The sqlite3_finalize() function is called to delete a [prepared statement].\n** ^If the most recent evaluation of the statement encountered no errors\n** or if the statement is never been evaluated, then sqlite3_finalize() returns\n** SQLITE_OK.  ^If the most recent evaluation of statement S failed, then\n** sqlite3_finalize(S) returns the appropriate [error code] or\n** [extended error code].\n**\n** ^The sqlite3_finalize(S) routine can be called at any point during\n** the life cycle of [prepared statement] S:\n** before statement S is ever evaluated, after\n** one or more calls to [sqlite3_reset()], or after any call\n** to [sqlite3_step()] regardless of whether or not the statement has\n** completed execution.\n**\n** ^Invoking sqlite3_finalize() on a NULL pointer is a harmless no-op.\n**\n** The application must finalize every [prepared statement] in order to avoid\n** resource leaks.  It is a grievous error for the application to try to use\n** a prepared statement after it has been finalized.  Any use of a prepared\n** statement after it has been finalized can result in undefined and\n** undesirable behavior such as segfaults and heap corruption.\n*/\nSQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt);\n\n/*\n** CAPI3REF: Reset A Prepared Statement Object\n** METHOD: sqlite3_stmt\n**\n** The sqlite3_reset() function is called to reset a [prepared statement]\n** object back to its initial state, ready to be re-executed.\n** ^Any SQL statement variables that had values bound to them using\n** the [sqlite3_bind_blob | sqlite3_bind_*() API] retain their values.\n** Use [sqlite3_clear_bindings()] to reset the bindings.\n**\n** ^The [sqlite3_reset(S)] interface resets the [prepared statement] S\n** back to the beginning of its program.\n**\n** ^If the most recent call to [sqlite3_step(S)] for the\n** [prepared statement] S returned [SQLITE_ROW] or [SQLITE_DONE],\n** or if [sqlite3_step(S)] has never before been called on S,\n** then [sqlite3_reset(S)] returns [SQLITE_OK].\n**\n** ^If the most recent call to [sqlite3_step(S)] for the\n** [prepared statement] S indicated an error, then\n** [sqlite3_reset(S)] returns an appropriate [error code].\n**\n** ^The [sqlite3_reset(S)] interface does not change the values\n** of any [sqlite3_bind_blob|bindings] on the [prepared statement] S.\n*/\nSQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt);\n\n/*\n** CAPI3REF: Create Or Redefine SQL Functions\n** KEYWORDS: {function creation routines}\n** KEYWORDS: {application-defined SQL function}\n** KEYWORDS: {application-defined SQL functions}\n** METHOD: sqlite3\n**\n** ^These functions (collectively known as \"function creation routines\")\n** are used to add SQL functions or aggregates or to redefine the behavior\n** of existing SQL functions or aggregates. The only differences between\n** the three \"sqlite3_create_function*\" routines are the text encoding \n** expected for the second parameter (the name of the function being \n** created) and the presence or absence of a destructor callback for\n** the application data pointer. Function sqlite3_create_window_function()\n** is similar, but allows the user to supply the extra callback functions\n** needed by [aggregate window functions].\n**\n** ^The first parameter is the [database connection] to which the SQL\n** function is to be added.  ^If an application uses more than one database\n** connection then application-defined SQL functions must be added\n** to each database connection separately.\n**\n** ^The second parameter is the name of the SQL function to be created or\n** redefined.  ^The length of the name is limited to 255 bytes in a UTF-8\n** representation, exclusive of the zero-terminator.  ^Note that the name\n** length limit is in UTF-8 bytes, not characters nor UTF-16 bytes.  \n** ^Any attempt to create a function with a longer name\n** will result in [SQLITE_MISUSE] being returned.\n**\n** ^The third parameter (nArg)\n** is the number of arguments that the SQL function or\n** aggregate takes. ^If this parameter is -1, then the SQL function or\n** aggregate may take any number of arguments between 0 and the limit\n** set by [sqlite3_limit]([SQLITE_LIMIT_FUNCTION_ARG]).  If the third\n** parameter is less than -1 or greater than 127 then the behavior is\n** undefined.\n**\n** ^The fourth parameter, eTextRep, specifies what\n** [SQLITE_UTF8 | text encoding] this SQL function prefers for\n** its parameters.  The application should set this parameter to\n** [SQLITE_UTF16LE] if the function implementation invokes \n** [sqlite3_value_text16le()] on an input, or [SQLITE_UTF16BE] if the\n** implementation invokes [sqlite3_value_text16be()] on an input, or\n** [SQLITE_UTF16] if [sqlite3_value_text16()] is used, or [SQLITE_UTF8]\n** otherwise.  ^The same SQL function may be registered multiple times using\n** different preferred text encodings, with different implementations for\n** each encoding.\n** ^When multiple implementations of the same function are available, SQLite\n** will pick the one that involves the least amount of data conversion.\n**\n** ^The fourth parameter may optionally be ORed with [SQLITE_DETERMINISTIC]\n** to signal that the function will always return the same result given\n** the same inputs within a single SQL statement.  Most SQL functions are\n** deterministic.  The built-in [random()] SQL function is an example of a\n** function that is not deterministic.  The SQLite query planner is able to\n** perform additional optimizations on deterministic functions, so use\n** of the [SQLITE_DETERMINISTIC] flag is recommended where possible.\n**\n** ^(The fifth parameter is an arbitrary pointer.  The implementation of the\n** function can gain access to this pointer using [sqlite3_user_data()].)^\n**\n** ^The sixth, seventh and eighth parameters passed to the three\n** \"sqlite3_create_function*\" functions, xFunc, xStep and xFinal, are\n** pointers to C-language functions that implement the SQL function or\n** aggregate. ^A scalar SQL function requires an implementation of the xFunc\n** callback only; NULL pointers must be passed as the xStep and xFinal\n** parameters. ^An aggregate SQL function requires an implementation of xStep\n** and xFinal and NULL pointer must be passed for xFunc. ^To delete an existing\n** SQL function or aggregate, pass NULL pointers for all three function\n** callbacks.\n**\n** ^The sixth, seventh, eighth and ninth parameters (xStep, xFinal, xValue \n** and xInverse) passed to sqlite3_create_window_function are pointers to\n** C-language callbacks that implement the new function. xStep and xFinal\n** must both be non-NULL. xValue and xInverse may either both be NULL, in\n** which case a regular aggregate function is created, or must both be \n** non-NULL, in which case the new function may be used as either an aggregate\n** or aggregate window function. More details regarding the implementation\n** of aggregate window functions are \n** [user-defined window functions|available here].\n**\n** ^(If the final parameter to sqlite3_create_function_v2() or\n** sqlite3_create_window_function() is not NULL, then it is destructor for\n** the application data pointer. The destructor is invoked when the function \n** is deleted, either by being overloaded or when the database connection \n** closes.)^ ^The destructor is also invoked if the call to \n** sqlite3_create_function_v2() fails.  ^When the destructor callback is\n** invoked, it is passed a single argument which is a copy of the application\n** data pointer which was the fifth parameter to sqlite3_create_function_v2().\n**\n** ^It is permitted to register multiple implementations of the same\n** functions with the same name but with either differing numbers of\n** arguments or differing preferred text encodings.  ^SQLite will use\n** the implementation that most closely matches the way in which the\n** SQL function is used.  ^A function implementation with a non-negative\n** nArg parameter is a better match than a function implementation with\n** a negative nArg.  ^A function where the preferred text encoding\n** matches the database encoding is a better\n** match than a function where the encoding is different.  \n** ^A function where the encoding difference is between UTF16le and UTF16be\n** is a closer match than a function where the encoding difference is\n** between UTF8 and UTF16.\n**\n** ^Built-in functions may be overloaded by new application-defined functions.\n**\n** ^An application-defined function is permitted to call other\n** SQLite interfaces.  However, such calls must not\n** close the database connection nor finalize or reset the prepared\n** statement in which the function is running.\n*/\nSQLITE_API int sqlite3_create_function(\n  sqlite3 *db,\n  const char *zFunctionName,\n  int nArg,\n  int eTextRep,\n  void *pApp,\n  void (*xFunc)(sqlite3_context*,int,sqlite3_value**),\n  void (*xStep)(sqlite3_context*,int,sqlite3_value**),\n  void (*xFinal)(sqlite3_context*)\n);\nSQLITE_API int sqlite3_create_function16(\n  sqlite3 *db,\n  const void *zFunctionName,\n  int nArg,\n  int eTextRep,\n  void *pApp,\n  void (*xFunc)(sqlite3_context*,int,sqlite3_value**),\n  void (*xStep)(sqlite3_context*,int,sqlite3_value**),\n  void (*xFinal)(sqlite3_context*)\n);\nSQLITE_API int sqlite3_create_function_v2(\n  sqlite3 *db,\n  const char *zFunctionName,\n  int nArg,\n  int eTextRep,\n  void *pApp,\n  void (*xFunc)(sqlite3_context*,int,sqlite3_value**),\n  void (*xStep)(sqlite3_context*,int,sqlite3_value**),\n  void (*xFinal)(sqlite3_context*),\n  void(*xDestroy)(void*)\n);\nSQLITE_API int sqlite3_create_window_function(\n  sqlite3 *db,\n  const char *zFunctionName,\n  int nArg,\n  int eTextRep,\n  void *pApp,\n  void (*xStep)(sqlite3_context*,int,sqlite3_value**),\n  void (*xFinal)(sqlite3_context*),\n  void (*xValue)(sqlite3_context*),\n  void (*xInverse)(sqlite3_context*,int,sqlite3_value**),\n  void(*xDestroy)(void*)\n);\n\n/*\n** CAPI3REF: Text Encodings\n**\n** These constant define integer codes that represent the various\n** text encodings supported by SQLite.\n*/\n#define SQLITE_UTF8           1    /* IMP: R-37514-35566 */\n#define SQLITE_UTF16LE        2    /* IMP: R-03371-37637 */\n#define SQLITE_UTF16BE        3    /* IMP: R-51971-34154 */\n#define SQLITE_UTF16          4    /* Use native byte order */\n#define SQLITE_ANY            5    /* Deprecated */\n#define SQLITE_UTF16_ALIGNED  8    /* sqlite3_create_collation only */\n\n/*\n** CAPI3REF: Function Flags\n**\n** These constants may be ORed together with the \n** [SQLITE_UTF8 | preferred text encoding] as the fourth argument\n** to [sqlite3_create_function()], [sqlite3_create_function16()], or\n** [sqlite3_create_function_v2()].\n*/\n#define SQLITE_DETERMINISTIC    0x800\n\n/*\n** CAPI3REF: Deprecated Functions\n** DEPRECATED\n**\n** These functions are [deprecated].  In order to maintain\n** backwards compatibility with older code, these functions continue \n** to be supported.  However, new applications should avoid\n** the use of these functions.  To encourage programmers to avoid\n** these functions, we will not explain what they do.\n*/\n#ifndef SQLITE_OMIT_DEPRECATED\nSQLITE_API SQLITE_DEPRECATED int sqlite3_aggregate_count(sqlite3_context*);\nSQLITE_API SQLITE_DEPRECATED int sqlite3_expired(sqlite3_stmt*);\nSQLITE_API SQLITE_DEPRECATED int sqlite3_transfer_bindings(sqlite3_stmt*, sqlite3_stmt*);\nSQLITE_API SQLITE_DEPRECATED int sqlite3_global_recover(void);\nSQLITE_API SQLITE_DEPRECATED void sqlite3_thread_cleanup(void);\nSQLITE_API SQLITE_DEPRECATED int sqlite3_memory_alarm(void(*)(void*,sqlite3_int64,int),\n                      void*,sqlite3_int64);\n#endif\n\n/*\n** CAPI3REF: Obtaining SQL Values\n** METHOD: sqlite3_value\n**\n** <b>Summary:</b>\n** <blockquote><table border=0 cellpadding=0 cellspacing=0>\n** <tr><td><b>sqlite3_value_blob</b><td>&rarr;<td>BLOB value\n** <tr><td><b>sqlite3_value_double</b><td>&rarr;<td>REAL value\n** <tr><td><b>sqlite3_value_int</b><td>&rarr;<td>32-bit INTEGER value\n** <tr><td><b>sqlite3_value_int64</b><td>&rarr;<td>64-bit INTEGER value\n** <tr><td><b>sqlite3_value_pointer</b><td>&rarr;<td>Pointer value\n** <tr><td><b>sqlite3_value_text</b><td>&rarr;<td>UTF-8 TEXT value\n** <tr><td><b>sqlite3_value_text16</b><td>&rarr;<td>UTF-16 TEXT value in\n** the native byteorder\n** <tr><td><b>sqlite3_value_text16be</b><td>&rarr;<td>UTF-16be TEXT value\n** <tr><td><b>sqlite3_value_text16le</b><td>&rarr;<td>UTF-16le TEXT value\n** <tr><td>&nbsp;<td>&nbsp;<td>&nbsp;\n** <tr><td><b>sqlite3_value_bytes</b><td>&rarr;<td>Size of a BLOB\n** or a UTF-8 TEXT in bytes\n** <tr><td><b>sqlite3_value_bytes16&nbsp;&nbsp;</b>\n** <td>&rarr;&nbsp;&nbsp;<td>Size of UTF-16\n** TEXT in bytes\n** <tr><td><b>sqlite3_value_type</b><td>&rarr;<td>Default\n** datatype of the value\n** <tr><td><b>sqlite3_value_numeric_type&nbsp;&nbsp;</b>\n** <td>&rarr;&nbsp;&nbsp;<td>Best numeric datatype of the value\n** <tr><td><b>sqlite3_value_nochange&nbsp;&nbsp;</b>\n** <td>&rarr;&nbsp;&nbsp;<td>True if the column is unchanged in an UPDATE\n** against a virtual table.\n** </table></blockquote>\n**\n** <b>Details:</b>\n**\n** These routines extract type, size, and content information from\n** [protected sqlite3_value] objects.  Protected sqlite3_value objects\n** are used to pass parameter information into implementation of\n** [application-defined SQL functions] and [virtual tables].\n**\n** These routines work only with [protected sqlite3_value] objects.\n** Any attempt to use these routines on an [unprotected sqlite3_value]\n** is not threadsafe.\n**\n** ^These routines work just like the corresponding [column access functions]\n** except that these routines take a single [protected sqlite3_value] object\n** pointer instead of a [sqlite3_stmt*] pointer and an integer column number.\n**\n** ^The sqlite3_value_text16() interface extracts a UTF-16 string\n** in the native byte-order of the host machine.  ^The\n** sqlite3_value_text16be() and sqlite3_value_text16le() interfaces\n** extract UTF-16 strings as big-endian and little-endian respectively.\n**\n** ^If [sqlite3_value] object V was initialized \n** using [sqlite3_bind_pointer(S,I,P,X,D)] or [sqlite3_result_pointer(C,P,X,D)]\n** and if X and Y are strings that compare equal according to strcmp(X,Y),\n** then sqlite3_value_pointer(V,Y) will return the pointer P.  ^Otherwise,\n** sqlite3_value_pointer(V,Y) returns a NULL. The sqlite3_bind_pointer() \n** routine is part of the [pointer passing interface] added for SQLite 3.20.0.\n**\n** ^(The sqlite3_value_type(V) interface returns the\n** [SQLITE_INTEGER | datatype code] for the initial datatype of the\n** [sqlite3_value] object V. The returned value is one of [SQLITE_INTEGER],\n** [SQLITE_FLOAT], [SQLITE_TEXT], [SQLITE_BLOB], or [SQLITE_NULL].)^\n** Other interfaces might change the datatype for an sqlite3_value object.\n** For example, if the datatype is initially SQLITE_INTEGER and\n** sqlite3_value_text(V) is called to extract a text value for that\n** integer, then subsequent calls to sqlite3_value_type(V) might return\n** SQLITE_TEXT.  Whether or not a persistent internal datatype conversion\n** occurs is undefined and may change from one release of SQLite to the next.\n**\n** ^(The sqlite3_value_numeric_type() interface attempts to apply\n** numeric affinity to the value.  This means that an attempt is\n** made to convert the value to an integer or floating point.  If\n** such a conversion is possible without loss of information (in other\n** words, if the value is a string that looks like a number)\n** then the conversion is performed.  Otherwise no conversion occurs.\n** The [SQLITE_INTEGER | datatype] after conversion is returned.)^\n**\n** ^Within the [xUpdate] method of a [virtual table], the\n** sqlite3_value_nochange(X) interface returns true if and only if\n** the column corresponding to X is unchanged by the UPDATE operation\n** that the xUpdate method call was invoked to implement and if\n** and the prior [xColumn] method call that was invoked to extracted\n** the value for that column returned without setting a result (probably\n** because it queried [sqlite3_vtab_nochange()] and found that the column\n** was unchanging).  ^Within an [xUpdate] method, any value for which\n** sqlite3_value_nochange(X) is true will in all other respects appear\n** to be a NULL value.  If sqlite3_value_nochange(X) is invoked anywhere other\n** than within an [xUpdate] method call for an UPDATE statement, then\n** the return value is arbitrary and meaningless.\n**\n** Please pay particular attention to the fact that the pointer returned\n** from [sqlite3_value_blob()], [sqlite3_value_text()], or\n** [sqlite3_value_text16()] can be invalidated by a subsequent call to\n** [sqlite3_value_bytes()], [sqlite3_value_bytes16()], [sqlite3_value_text()],\n** or [sqlite3_value_text16()].\n**\n** These routines must be called from the same thread as\n** the SQL function that supplied the [sqlite3_value*] parameters.\n**\n** As long as the input parameter is correct, these routines can only\n** fail if an out-of-memory error occurs during a format conversion.\n** Only the following subset of interfaces are subject to out-of-memory\n** errors:\n**\n** <ul>\n** <li> sqlite3_value_blob()\n** <li> sqlite3_value_text()\n** <li> sqlite3_value_text16()\n** <li> sqlite3_value_text16le()\n** <li> sqlite3_value_text16be()\n** <li> sqlite3_value_bytes()\n** <li> sqlite3_value_bytes16()\n** </ul>\n**\n** If an out-of-memory error occurs, then the return value from these\n** routines is the same as if the column had contained an SQL NULL value.\n** Valid SQL NULL returns can be distinguished from out-of-memory errors\n** by invoking the [sqlite3_errcode()] immediately after the suspect\n** return value is obtained and before any\n** other SQLite interface is called on the same [database connection].\n*/\nSQLITE_API const void *sqlite3_value_blob(sqlite3_value*);\nSQLITE_API double sqlite3_value_double(sqlite3_value*);\nSQLITE_API int sqlite3_value_int(sqlite3_value*);\nSQLITE_API sqlite3_int64 sqlite3_value_int64(sqlite3_value*);\nSQLITE_API void *sqlite3_value_pointer(sqlite3_value*, const char*);\nSQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value*);\nSQLITE_API const void *sqlite3_value_text16(sqlite3_value*);\nSQLITE_API const void *sqlite3_value_text16le(sqlite3_value*);\nSQLITE_API const void *sqlite3_value_text16be(sqlite3_value*);\nSQLITE_API int sqlite3_value_bytes(sqlite3_value*);\nSQLITE_API int sqlite3_value_bytes16(sqlite3_value*);\nSQLITE_API int sqlite3_value_type(sqlite3_value*);\nSQLITE_API int sqlite3_value_numeric_type(sqlite3_value*);\nSQLITE_API int sqlite3_value_nochange(sqlite3_value*);\n\n/*\n** CAPI3REF: Finding The Subtype Of SQL Values\n** METHOD: sqlite3_value\n**\n** The sqlite3_value_subtype(V) function returns the subtype for\n** an [application-defined SQL function] argument V.  The subtype\n** information can be used to pass a limited amount of context from\n** one SQL function to another.  Use the [sqlite3_result_subtype()]\n** routine to set the subtype for the return value of an SQL function.\n*/\nSQLITE_API unsigned int sqlite3_value_subtype(sqlite3_value*);\n\n/*\n** CAPI3REF: Copy And Free SQL Values\n** METHOD: sqlite3_value\n**\n** ^The sqlite3_value_dup(V) interface makes a copy of the [sqlite3_value]\n** object D and returns a pointer to that copy.  ^The [sqlite3_value] returned\n** is a [protected sqlite3_value] object even if the input is not.\n** ^The sqlite3_value_dup(V) interface returns NULL if V is NULL or if a\n** memory allocation fails.\n**\n** ^The sqlite3_value_free(V) interface frees an [sqlite3_value] object\n** previously obtained from [sqlite3_value_dup()].  ^If V is a NULL pointer\n** then sqlite3_value_free(V) is a harmless no-op.\n*/\nSQLITE_API sqlite3_value *sqlite3_value_dup(const sqlite3_value*);\nSQLITE_API void sqlite3_value_free(sqlite3_value*);\n\n/*\n** CAPI3REF: Obtain Aggregate Function Context\n** METHOD: sqlite3_context\n**\n** Implementations of aggregate SQL functions use this\n** routine to allocate memory for storing their state.\n**\n** ^The first time the sqlite3_aggregate_context(C,N) routine is called \n** for a particular aggregate function, SQLite\n** allocates N of memory, zeroes out that memory, and returns a pointer\n** to the new memory. ^On second and subsequent calls to\n** sqlite3_aggregate_context() for the same aggregate function instance,\n** the same buffer is returned.  Sqlite3_aggregate_context() is normally\n** called once for each invocation of the xStep callback and then one\n** last time when the xFinal callback is invoked.  ^(When no rows match\n** an aggregate query, the xStep() callback of the aggregate function\n** implementation is never called and xFinal() is called exactly once.\n** In those cases, sqlite3_aggregate_context() might be called for the\n** first time from within xFinal().)^\n**\n** ^The sqlite3_aggregate_context(C,N) routine returns a NULL pointer \n** when first called if N is less than or equal to zero or if a memory\n** allocate error occurs.\n**\n** ^(The amount of space allocated by sqlite3_aggregate_context(C,N) is\n** determined by the N parameter on first successful call.  Changing the\n** value of N in subsequent call to sqlite3_aggregate_context() within\n** the same aggregate function instance will not resize the memory\n** allocation.)^  Within the xFinal callback, it is customary to set\n** N=0 in calls to sqlite3_aggregate_context(C,N) so that no \n** pointless memory allocations occur.\n**\n** ^SQLite automatically frees the memory allocated by \n** sqlite3_aggregate_context() when the aggregate query concludes.\n**\n** The first parameter must be a copy of the\n** [sqlite3_context | SQL function context] that is the first parameter\n** to the xStep or xFinal callback routine that implements the aggregate\n** function.\n**\n** This routine must be called from the same thread in which\n** the aggregate SQL function is running.\n*/\nSQLITE_API void *sqlite3_aggregate_context(sqlite3_context*, int nBytes);\n\n/*\n** CAPI3REF: User Data For Functions\n** METHOD: sqlite3_context\n**\n** ^The sqlite3_user_data() interface returns a copy of\n** the pointer that was the pUserData parameter (the 5th parameter)\n** of the [sqlite3_create_function()]\n** and [sqlite3_create_function16()] routines that originally\n** registered the application defined function.\n**\n** This routine must be called from the same thread in which\n** the application-defined function is running.\n*/\nSQLITE_API void *sqlite3_user_data(sqlite3_context*);\n\n/*\n** CAPI3REF: Database Connection For Functions\n** METHOD: sqlite3_context\n**\n** ^The sqlite3_context_db_handle() interface returns a copy of\n** the pointer to the [database connection] (the 1st parameter)\n** of the [sqlite3_create_function()]\n** and [sqlite3_create_function16()] routines that originally\n** registered the application defined function.\n*/\nSQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context*);\n\n/*\n** CAPI3REF: Function Auxiliary Data\n** METHOD: sqlite3_context\n**\n** These functions may be used by (non-aggregate) SQL functions to\n** associate metadata with argument values. If the same value is passed to\n** multiple invocations of the same SQL function during query execution, under\n** some circumstances the associated metadata may be preserved.  An example\n** of where this might be useful is in a regular-expression matching\n** function. The compiled version of the regular expression can be stored as\n** metadata associated with the pattern string.  \n** Then as long as the pattern string remains the same,\n** the compiled regular expression can be reused on multiple\n** invocations of the same function.\n**\n** ^The sqlite3_get_auxdata(C,N) interface returns a pointer to the metadata\n** associated by the sqlite3_set_auxdata(C,N,P,X) function with the Nth argument\n** value to the application-defined function.  ^N is zero for the left-most\n** function argument.  ^If there is no metadata\n** associated with the function argument, the sqlite3_get_auxdata(C,N) interface\n** returns a NULL pointer.\n**\n** ^The sqlite3_set_auxdata(C,N,P,X) interface saves P as metadata for the N-th\n** argument of the application-defined function.  ^Subsequent\n** calls to sqlite3_get_auxdata(C,N) return P from the most recent\n** sqlite3_set_auxdata(C,N,P,X) call if the metadata is still valid or\n** NULL if the metadata has been discarded.\n** ^After each call to sqlite3_set_auxdata(C,N,P,X) where X is not NULL,\n** SQLite will invoke the destructor function X with parameter P exactly\n** once, when the metadata is discarded.\n** SQLite is free to discard the metadata at any time, including: <ul>\n** <li> ^(when the corresponding function parameter changes)^, or\n** <li> ^(when [sqlite3_reset()] or [sqlite3_finalize()] is called for the\n**      SQL statement)^, or\n** <li> ^(when sqlite3_set_auxdata() is invoked again on the same\n**       parameter)^, or\n** <li> ^(during the original sqlite3_set_auxdata() call when a memory \n**      allocation error occurs.)^ </ul>\n**\n** Note the last bullet in particular.  The destructor X in \n** sqlite3_set_auxdata(C,N,P,X) might be called immediately, before the\n** sqlite3_set_auxdata() interface even returns.  Hence sqlite3_set_auxdata()\n** should be called near the end of the function implementation and the\n** function implementation should not make any use of P after\n** sqlite3_set_auxdata() has been called.\n**\n** ^(In practice, metadata is preserved between function calls for\n** function parameters that are compile-time constants, including literal\n** values and [parameters] and expressions composed from the same.)^\n**\n** The value of the N parameter to these interfaces should be non-negative.\n** Future enhancements may make use of negative N values to define new\n** kinds of function caching behavior.\n**\n** These routines must be called from the same thread in which\n** the SQL function is running.\n*/\nSQLITE_API void *sqlite3_get_auxdata(sqlite3_context*, int N);\nSQLITE_API void sqlite3_set_auxdata(sqlite3_context*, int N, void*, void (*)(void*));\n\n\n/*\n** CAPI3REF: Constants Defining Special Destructor Behavior\n**\n** These are special values for the destructor that is passed in as the\n** final argument to routines like [sqlite3_result_blob()].  ^If the destructor\n** argument is SQLITE_STATIC, it means that the content pointer is constant\n** and will never change.  It does not need to be destroyed.  ^The\n** SQLITE_TRANSIENT value means that the content will likely change in\n** the near future and that SQLite should make its own private copy of\n** the content before returning.\n**\n** The typedef is necessary to work around problems in certain\n** C++ compilers.\n*/\ntypedef void (*sqlite3_destructor_type)(void*);\n#define SQLITE_STATIC      ((sqlite3_destructor_type)0)\n#define SQLITE_TRANSIENT   ((sqlite3_destructor_type)-1)\n\n/*\n** CAPI3REF: Setting The Result Of An SQL Function\n** METHOD: sqlite3_context\n**\n** These routines are used by the xFunc or xFinal callbacks that\n** implement SQL functions and aggregates.  See\n** [sqlite3_create_function()] and [sqlite3_create_function16()]\n** for additional information.\n**\n** These functions work very much like the [parameter binding] family of\n** functions used to bind values to host parameters in prepared statements.\n** Refer to the [SQL parameter] documentation for additional information.\n**\n** ^The sqlite3_result_blob() interface sets the result from\n** an application-defined function to be the BLOB whose content is pointed\n** to by the second parameter and which is N bytes long where N is the\n** third parameter.\n**\n** ^The sqlite3_result_zeroblob(C,N) and sqlite3_result_zeroblob64(C,N)\n** interfaces set the result of the application-defined function to be\n** a BLOB containing all zero bytes and N bytes in size.\n**\n** ^The sqlite3_result_double() interface sets the result from\n** an application-defined function to be a floating point value specified\n** by its 2nd argument.\n**\n** ^The sqlite3_result_error() and sqlite3_result_error16() functions\n** cause the implemented SQL function to throw an exception.\n** ^SQLite uses the string pointed to by the\n** 2nd parameter of sqlite3_result_error() or sqlite3_result_error16()\n** as the text of an error message.  ^SQLite interprets the error\n** message string from sqlite3_result_error() as UTF-8. ^SQLite\n** interprets the string from sqlite3_result_error16() as UTF-16 in native\n** byte order.  ^If the third parameter to sqlite3_result_error()\n** or sqlite3_result_error16() is negative then SQLite takes as the error\n** message all text up through the first zero character.\n** ^If the third parameter to sqlite3_result_error() or\n** sqlite3_result_error16() is non-negative then SQLite takes that many\n** bytes (not characters) from the 2nd parameter as the error message.\n** ^The sqlite3_result_error() and sqlite3_result_error16()\n** routines make a private copy of the error message text before\n** they return.  Hence, the calling function can deallocate or\n** modify the text after they return without harm.\n** ^The sqlite3_result_error_code() function changes the error code\n** returned by SQLite as a result of an error in a function.  ^By default,\n** the error code is SQLITE_ERROR.  ^A subsequent call to sqlite3_result_error()\n** or sqlite3_result_error16() resets the error code to SQLITE_ERROR.\n**\n** ^The sqlite3_result_error_toobig() interface causes SQLite to throw an\n** error indicating that a string or BLOB is too long to represent.\n**\n** ^The sqlite3_result_error_nomem() interface causes SQLite to throw an\n** error indicating that a memory allocation failed.\n**\n** ^The sqlite3_result_int() interface sets the return value\n** of the application-defined function to be the 32-bit signed integer\n** value given in the 2nd argument.\n** ^The sqlite3_result_int64() interface sets the return value\n** of the application-defined function to be the 64-bit signed integer\n** value given in the 2nd argument.\n**\n** ^The sqlite3_result_null() interface sets the return value\n** of the application-defined function to be NULL.\n**\n** ^The sqlite3_result_text(), sqlite3_result_text16(),\n** sqlite3_result_text16le(), and sqlite3_result_text16be() interfaces\n** set the return value of the application-defined function to be\n** a text string which is represented as UTF-8, UTF-16 native byte order,\n** UTF-16 little endian, or UTF-16 big endian, respectively.\n** ^The sqlite3_result_text64() interface sets the return value of an\n** application-defined function to be a text string in an encoding\n** specified by the fifth (and last) parameter, which must be one\n** of [SQLITE_UTF8], [SQLITE_UTF16], [SQLITE_UTF16BE], or [SQLITE_UTF16LE].\n** ^SQLite takes the text result from the application from\n** the 2nd parameter of the sqlite3_result_text* interfaces.\n** ^If the 3rd parameter to the sqlite3_result_text* interfaces\n** is negative, then SQLite takes result text from the 2nd parameter\n** through the first zero character.\n** ^If the 3rd parameter to the sqlite3_result_text* interfaces\n** is non-negative, then as many bytes (not characters) of the text\n** pointed to by the 2nd parameter are taken as the application-defined\n** function result.  If the 3rd parameter is non-negative, then it\n** must be the byte offset into the string where the NUL terminator would\n** appear if the string where NUL terminated.  If any NUL characters occur\n** in the string at a byte offset that is less than the value of the 3rd\n** parameter, then the resulting string will contain embedded NULs and the\n** result of expressions operating on strings with embedded NULs is undefined.\n** ^If the 4th parameter to the sqlite3_result_text* interfaces\n** or sqlite3_result_blob is a non-NULL pointer, then SQLite calls that\n** function as the destructor on the text or BLOB result when it has\n** finished using that result.\n** ^If the 4th parameter to the sqlite3_result_text* interfaces or to\n** sqlite3_result_blob is the special constant SQLITE_STATIC, then SQLite\n** assumes that the text or BLOB result is in constant space and does not\n** copy the content of the parameter nor call a destructor on the content\n** when it has finished using that result.\n** ^If the 4th parameter to the sqlite3_result_text* interfaces\n** or sqlite3_result_blob is the special constant SQLITE_TRANSIENT\n** then SQLite makes a copy of the result into space obtained\n** from [sqlite3_malloc()] before it returns.\n**\n** ^The sqlite3_result_value() interface sets the result of\n** the application-defined function to be a copy of the\n** [unprotected sqlite3_value] object specified by the 2nd parameter.  ^The\n** sqlite3_result_value() interface makes a copy of the [sqlite3_value]\n** so that the [sqlite3_value] specified in the parameter may change or\n** be deallocated after sqlite3_result_value() returns without harm.\n** ^A [protected sqlite3_value] object may always be used where an\n** [unprotected sqlite3_value] object is required, so either\n** kind of [sqlite3_value] object can be used with this interface.\n**\n** ^The sqlite3_result_pointer(C,P,T,D) interface sets the result to an\n** SQL NULL value, just like [sqlite3_result_null(C)], except that it\n** also associates the host-language pointer P or type T with that \n** NULL value such that the pointer can be retrieved within an\n** [application-defined SQL function] using [sqlite3_value_pointer()].\n** ^If the D parameter is not NULL, then it is a pointer to a destructor\n** for the P parameter.  ^SQLite invokes D with P as its only argument\n** when SQLite is finished with P.  The T parameter should be a static\n** string and preferably a string literal. The sqlite3_result_pointer()\n** routine is part of the [pointer passing interface] added for SQLite 3.20.0.\n**\n** If these routines are called from within the different thread\n** than the one containing the application-defined function that received\n** the [sqlite3_context] pointer, the results are undefined.\n*/\nSQLITE_API void sqlite3_result_blob(sqlite3_context*, const void*, int, void(*)(void*));\nSQLITE_API void sqlite3_result_blob64(sqlite3_context*,const void*,\n                           sqlite3_uint64,void(*)(void*));\nSQLITE_API void sqlite3_result_double(sqlite3_context*, double);\nSQLITE_API void sqlite3_result_error(sqlite3_context*, const char*, int);\nSQLITE_API void sqlite3_result_error16(sqlite3_context*, const void*, int);\nSQLITE_API void sqlite3_result_error_toobig(sqlite3_context*);\nSQLITE_API void sqlite3_result_error_nomem(sqlite3_context*);\nSQLITE_API void sqlite3_result_error_code(sqlite3_context*, int);\nSQLITE_API void sqlite3_result_int(sqlite3_context*, int);\nSQLITE_API void sqlite3_result_int64(sqlite3_context*, sqlite3_int64);\nSQLITE_API void sqlite3_result_null(sqlite3_context*);\nSQLITE_API void sqlite3_result_text(sqlite3_context*, const char*, int, void(*)(void*));\nSQLITE_API void sqlite3_result_text64(sqlite3_context*, const char*,sqlite3_uint64,\n                           void(*)(void*), unsigned char encoding);\nSQLITE_API void sqlite3_result_text16(sqlite3_context*, const void*, int, void(*)(void*));\nSQLITE_API void sqlite3_result_text16le(sqlite3_context*, const void*, int,void(*)(void*));\nSQLITE_API void sqlite3_result_text16be(sqlite3_context*, const void*, int,void(*)(void*));\nSQLITE_API void sqlite3_result_value(sqlite3_context*, sqlite3_value*);\nSQLITE_API void sqlite3_result_pointer(sqlite3_context*, void*,const char*,void(*)(void*));\nSQLITE_API void sqlite3_result_zeroblob(sqlite3_context*, int n);\nSQLITE_API int sqlite3_result_zeroblob64(sqlite3_context*, sqlite3_uint64 n);\n\n\n/*\n** CAPI3REF: Setting The Subtype Of An SQL Function\n** METHOD: sqlite3_context\n**\n** The sqlite3_result_subtype(C,T) function causes the subtype of\n** the result from the [application-defined SQL function] with \n** [sqlite3_context] C to be the value T.  Only the lower 8 bits \n** of the subtype T are preserved in current versions of SQLite;\n** higher order bits are discarded.\n** The number of subtype bytes preserved by SQLite might increase\n** in future releases of SQLite.\n*/\nSQLITE_API void sqlite3_result_subtype(sqlite3_context*,unsigned int);\n\n/*\n** CAPI3REF: Define New Collating Sequences\n** METHOD: sqlite3\n**\n** ^These functions add, remove, or modify a [collation] associated\n** with the [database connection] specified as the first argument.\n**\n** ^The name of the collation is a UTF-8 string\n** for sqlite3_create_collation() and sqlite3_create_collation_v2()\n** and a UTF-16 string in native byte order for sqlite3_create_collation16().\n** ^Collation names that compare equal according to [sqlite3_strnicmp()] are\n** considered to be the same name.\n**\n** ^(The third argument (eTextRep) must be one of the constants:\n** <ul>\n** <li> [SQLITE_UTF8],\n** <li> [SQLITE_UTF16LE],\n** <li> [SQLITE_UTF16BE],\n** <li> [SQLITE_UTF16], or\n** <li> [SQLITE_UTF16_ALIGNED].\n** </ul>)^\n** ^The eTextRep argument determines the encoding of strings passed\n** to the collating function callback, xCallback.\n** ^The [SQLITE_UTF16] and [SQLITE_UTF16_ALIGNED] values for eTextRep\n** force strings to be UTF16 with native byte order.\n** ^The [SQLITE_UTF16_ALIGNED] value for eTextRep forces strings to begin\n** on an even byte address.\n**\n** ^The fourth argument, pArg, is an application data pointer that is passed\n** through as the first argument to the collating function callback.\n**\n** ^The fifth argument, xCallback, is a pointer to the collating function.\n** ^Multiple collating functions can be registered using the same name but\n** with different eTextRep parameters and SQLite will use whichever\n** function requires the least amount of data transformation.\n** ^If the xCallback argument is NULL then the collating function is\n** deleted.  ^When all collating functions having the same name are deleted,\n** that collation is no longer usable.\n**\n** ^The collating function callback is invoked with a copy of the pArg \n** application data pointer and with two strings in the encoding specified\n** by the eTextRep argument.  The collating function must return an\n** integer that is negative, zero, or positive\n** if the first string is less than, equal to, or greater than the second,\n** respectively.  A collating function must always return the same answer\n** given the same inputs.  If two or more collating functions are registered\n** to the same collation name (using different eTextRep values) then all\n** must give an equivalent answer when invoked with equivalent strings.\n** The collating function must obey the following properties for all\n** strings A, B, and C:\n**\n** <ol>\n** <li> If A==B then B==A.\n** <li> If A==B and B==C then A==C.\n** <li> If A&lt;B THEN B&gt;A.\n** <li> If A&lt;B and B&lt;C then A&lt;C.\n** </ol>\n**\n** If a collating function fails any of the above constraints and that\n** collating function is  registered and used, then the behavior of SQLite\n** is undefined.\n**\n** ^The sqlite3_create_collation_v2() works like sqlite3_create_collation()\n** with the addition that the xDestroy callback is invoked on pArg when\n** the collating function is deleted.\n** ^Collating functions are deleted when they are overridden by later\n** calls to the collation creation functions or when the\n** [database connection] is closed using [sqlite3_close()].\n**\n** ^The xDestroy callback is <u>not</u> called if the \n** sqlite3_create_collation_v2() function fails.  Applications that invoke\n** sqlite3_create_collation_v2() with a non-NULL xDestroy argument should \n** check the return code and dispose of the application data pointer\n** themselves rather than expecting SQLite to deal with it for them.\n** This is different from every other SQLite interface.  The inconsistency \n** is unfortunate but cannot be changed without breaking backwards \n** compatibility.\n**\n** See also:  [sqlite3_collation_needed()] and [sqlite3_collation_needed16()].\n*/\nSQLITE_API int sqlite3_create_collation(\n  sqlite3*, \n  const char *zName, \n  int eTextRep, \n  void *pArg,\n  int(*xCompare)(void*,int,const void*,int,const void*)\n);\nSQLITE_API int sqlite3_create_collation_v2(\n  sqlite3*, \n  const char *zName, \n  int eTextRep, \n  void *pArg,\n  int(*xCompare)(void*,int,const void*,int,const void*),\n  void(*xDestroy)(void*)\n);\nSQLITE_API int sqlite3_create_collation16(\n  sqlite3*, \n  const void *zName,\n  int eTextRep, \n  void *pArg,\n  int(*xCompare)(void*,int,const void*,int,const void*)\n);\n\n/*\n** CAPI3REF: Collation Needed Callbacks\n** METHOD: sqlite3\n**\n** ^To avoid having to register all collation sequences before a database\n** can be used, a single callback function may be registered with the\n** [database connection] to be invoked whenever an undefined collation\n** sequence is required.\n**\n** ^If the function is registered using the sqlite3_collation_needed() API,\n** then it is passed the names of undefined collation sequences as strings\n** encoded in UTF-8. ^If sqlite3_collation_needed16() is used,\n** the names are passed as UTF-16 in machine native byte order.\n** ^A call to either function replaces the existing collation-needed callback.\n**\n** ^(When the callback is invoked, the first argument passed is a copy\n** of the second argument to sqlite3_collation_needed() or\n** sqlite3_collation_needed16().  The second argument is the database\n** connection.  The third argument is one of [SQLITE_UTF8], [SQLITE_UTF16BE],\n** or [SQLITE_UTF16LE], indicating the most desirable form of the collation\n** sequence function required.  The fourth parameter is the name of the\n** required collation sequence.)^\n**\n** The callback function should register the desired collation using\n** [sqlite3_create_collation()], [sqlite3_create_collation16()], or\n** [sqlite3_create_collation_v2()].\n*/\nSQLITE_API int sqlite3_collation_needed(\n  sqlite3*, \n  void*, \n  void(*)(void*,sqlite3*,int eTextRep,const char*)\n);\nSQLITE_API int sqlite3_collation_needed16(\n  sqlite3*, \n  void*,\n  void(*)(void*,sqlite3*,int eTextRep,const void*)\n);\n\n#ifdef SQLITE_HAS_CODEC\n/*\n** Specify the key for an encrypted database.  This routine should be\n** called right after sqlite3_open().\n**\n** The code to implement this API is not available in the public release\n** of SQLite.\n*/\nSQLITE_API int sqlite3_key(\n  sqlite3 *db,                   /* Database to be rekeyed */\n  const void *pKey, int nKey     /* The key */\n);\nSQLITE_API int sqlite3_key_v2(\n  sqlite3 *db,                   /* Database to be rekeyed */\n  const char *zDbName,           /* Name of the database */\n  const void *pKey, int nKey     /* The key */\n);\n\n/*\n** Change the key on an open database.  If the current database is not\n** encrypted, this routine will encrypt it.  If pNew==0 or nNew==0, the\n** database is decrypted.\n**\n** The code to implement this API is not available in the public release\n** of SQLite.\n*/\nSQLITE_API int sqlite3_rekey(\n  sqlite3 *db,                   /* Database to be rekeyed */\n  const void *pKey, int nKey     /* The new key */\n);\nSQLITE_API int sqlite3_rekey_v2(\n  sqlite3 *db,                   /* Database to be rekeyed */\n  const char *zDbName,           /* Name of the database */\n  const void *pKey, int nKey     /* The new key */\n);\n\n/*\n** Specify the activation key for a SEE database.  Unless \n** activated, none of the SEE routines will work.\n*/\nSQLITE_API void sqlite3_activate_see(\n  const char *zPassPhrase        /* Activation phrase */\n);\n#endif\n\n#ifdef SQLITE_ENABLE_CEROD\n/*\n** Specify the activation key for a CEROD database.  Unless \n** activated, none of the CEROD routines will work.\n*/\nSQLITE_API void sqlite3_activate_cerod(\n  const char *zPassPhrase        /* Activation phrase */\n);\n#endif\n\n/*\n** CAPI3REF: Suspend Execution For A Short Time\n**\n** The sqlite3_sleep() function causes the current thread to suspend execution\n** for at least a number of milliseconds specified in its parameter.\n**\n** If the operating system does not support sleep requests with\n** millisecond time resolution, then the time will be rounded up to\n** the nearest second. The number of milliseconds of sleep actually\n** requested from the operating system is returned.\n**\n** ^SQLite implements this interface by calling the xSleep()\n** method of the default [sqlite3_vfs] object.  If the xSleep() method\n** of the default VFS is not implemented correctly, or not implemented at\n** all, then the behavior of sqlite3_sleep() may deviate from the description\n** in the previous paragraphs.\n*/\nSQLITE_API int sqlite3_sleep(int);\n\n/*\n** CAPI3REF: Name Of The Folder Holding Temporary Files\n**\n** ^(If this global variable is made to point to a string which is\n** the name of a folder (a.k.a. directory), then all temporary files\n** created by SQLite when using a built-in [sqlite3_vfs | VFS]\n** will be placed in that directory.)^  ^If this variable\n** is a NULL pointer, then SQLite performs a search for an appropriate\n** temporary file directory.\n**\n** Applications are strongly discouraged from using this global variable.\n** It is required to set a temporary folder on Windows Runtime (WinRT).\n** But for all other platforms, it is highly recommended that applications\n** neither read nor write this variable.  This global variable is a relic\n** that exists for backwards compatibility of legacy applications and should\n** be avoided in new projects.\n**\n** It is not safe to read or modify this variable in more than one\n** thread at a time.  It is not safe to read or modify this variable\n** if a [database connection] is being used at the same time in a separate\n** thread.\n** It is intended that this variable be set once\n** as part of process initialization and before any SQLite interface\n** routines have been called and that this variable remain unchanged\n** thereafter.\n**\n** ^The [temp_store_directory pragma] may modify this variable and cause\n** it to point to memory obtained from [sqlite3_malloc].  ^Furthermore,\n** the [temp_store_directory pragma] always assumes that any string\n** that this variable points to is held in memory obtained from \n** [sqlite3_malloc] and the pragma may attempt to free that memory\n** using [sqlite3_free].\n** Hence, if this variable is modified directly, either it should be\n** made NULL or made to point to memory obtained from [sqlite3_malloc]\n** or else the use of the [temp_store_directory pragma] should be avoided.\n** Except when requested by the [temp_store_directory pragma], SQLite\n** does not free the memory that sqlite3_temp_directory points to.  If\n** the application wants that memory to be freed, it must do\n** so itself, taking care to only do so after all [database connection]\n** objects have been destroyed.\n**\n** <b>Note to Windows Runtime users:</b>  The temporary directory must be set\n** prior to calling [sqlite3_open] or [sqlite3_open_v2].  Otherwise, various\n** features that require the use of temporary files may fail.  Here is an\n** example of how to do this using C++ with the Windows Runtime:\n**\n** <blockquote><pre>\n** LPCWSTR zPath = Windows::Storage::ApplicationData::Current->\n** &nbsp;     TemporaryFolder->Path->Data();\n** char zPathBuf&#91;MAX_PATH + 1&#93;;\n** memset(zPathBuf, 0, sizeof(zPathBuf));\n** WideCharToMultiByte(CP_UTF8, 0, zPath, -1, zPathBuf, sizeof(zPathBuf),\n** &nbsp;     NULL, NULL);\n** sqlite3_temp_directory = sqlite3_mprintf(\"%s\", zPathBuf);\n** </pre></blockquote>\n*/\nSQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;\n\n/*\n** CAPI3REF: Name Of The Folder Holding Database Files\n**\n** ^(If this global variable is made to point to a string which is\n** the name of a folder (a.k.a. directory), then all database files\n** specified with a relative pathname and created or accessed by\n** SQLite when using a built-in windows [sqlite3_vfs | VFS] will be assumed\n** to be relative to that directory.)^ ^If this variable is a NULL\n** pointer, then SQLite assumes that all database files specified\n** with a relative pathname are relative to the current directory\n** for the process.  Only the windows VFS makes use of this global\n** variable; it is ignored by the unix VFS.\n**\n** Changing the value of this variable while a database connection is\n** open can result in a corrupt database.\n**\n** It is not safe to read or modify this variable in more than one\n** thread at a time.  It is not safe to read or modify this variable\n** if a [database connection] is being used at the same time in a separate\n** thread.\n** It is intended that this variable be set once\n** as part of process initialization and before any SQLite interface\n** routines have been called and that this variable remain unchanged\n** thereafter.\n**\n** ^The [data_store_directory pragma] may modify this variable and cause\n** it to point to memory obtained from [sqlite3_malloc].  ^Furthermore,\n** the [data_store_directory pragma] always assumes that any string\n** that this variable points to is held in memory obtained from \n** [sqlite3_malloc] and the pragma may attempt to free that memory\n** using [sqlite3_free].\n** Hence, if this variable is modified directly, either it should be\n** made NULL or made to point to memory obtained from [sqlite3_malloc]\n** or else the use of the [data_store_directory pragma] should be avoided.\n*/\nSQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;\n\n/*\n** CAPI3REF: Win32 Specific Interface\n**\n** These interfaces are available only on Windows.  The\n** [sqlite3_win32_set_directory] interface is used to set the value associated\n** with the [sqlite3_temp_directory] or [sqlite3_data_directory] variable, to\n** zValue, depending on the value of the type parameter.  The zValue parameter\n** should be NULL to cause the previous value to be freed via [sqlite3_free];\n** a non-NULL value will be copied into memory obtained from [sqlite3_malloc]\n** prior to being used.  The [sqlite3_win32_set_directory] interface returns\n** [SQLITE_OK] to indicate success, [SQLITE_ERROR] if the type is unsupported,\n** or [SQLITE_NOMEM] if memory could not be allocated.  The value of the\n** [sqlite3_data_directory] variable is intended to act as a replacement for\n** the current directory on the sub-platforms of Win32 where that concept is\n** not present, e.g. WinRT and UWP.  The [sqlite3_win32_set_directory8] and\n** [sqlite3_win32_set_directory16] interfaces behave exactly the same as the\n** sqlite3_win32_set_directory interface except the string parameter must be\n** UTF-8 or UTF-16, respectively.\n*/\nSQLITE_API int sqlite3_win32_set_directory(\n  unsigned long type, /* Identifier for directory being set or reset */\n  void *zValue        /* New value for directory being set or reset */\n);\nSQLITE_API int sqlite3_win32_set_directory8(unsigned long type, const char *zValue);\nSQLITE_API int sqlite3_win32_set_directory16(unsigned long type, const void *zValue);\n\n/*\n** CAPI3REF: Win32 Directory Types\n**\n** These macros are only available on Windows.  They define the allowed values\n** for the type argument to the [sqlite3_win32_set_directory] interface.\n*/\n#define SQLITE_WIN32_DATA_DIRECTORY_TYPE  1\n#define SQLITE_WIN32_TEMP_DIRECTORY_TYPE  2\n\n/*\n** CAPI3REF: Test For Auto-Commit Mode\n** KEYWORDS: {autocommit mode}\n** METHOD: sqlite3\n**\n** ^The sqlite3_get_autocommit() interface returns non-zero or\n** zero if the given database connection is or is not in autocommit mode,\n** respectively.  ^Autocommit mode is on by default.\n** ^Autocommit mode is disabled by a [BEGIN] statement.\n** ^Autocommit mode is re-enabled by a [COMMIT] or [ROLLBACK].\n**\n** If certain kinds of errors occur on a statement within a multi-statement\n** transaction (errors including [SQLITE_FULL], [SQLITE_IOERR],\n** [SQLITE_NOMEM], [SQLITE_BUSY], and [SQLITE_INTERRUPT]) then the\n** transaction might be rolled back automatically.  The only way to\n** find out whether SQLite automatically rolled back the transaction after\n** an error is to use this function.\n**\n** If another thread changes the autocommit status of the database\n** connection while this routine is running, then the return value\n** is undefined.\n*/\nSQLITE_API int sqlite3_get_autocommit(sqlite3*);\n\n/*\n** CAPI3REF: Find The Database Handle Of A Prepared Statement\n** METHOD: sqlite3_stmt\n**\n** ^The sqlite3_db_handle interface returns the [database connection] handle\n** to which a [prepared statement] belongs.  ^The [database connection]\n** returned by sqlite3_db_handle is the same [database connection]\n** that was the first argument\n** to the [sqlite3_prepare_v2()] call (or its variants) that was used to\n** create the statement in the first place.\n*/\nSQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt*);\n\n/*\n** CAPI3REF: Return The Filename For A Database Connection\n** METHOD: sqlite3\n**\n** ^The sqlite3_db_filename(D,N) interface returns a pointer to a filename\n** associated with database N of connection D.  ^The main database file\n** has the name \"main\".  If there is no attached database N on the database\n** connection D, or if database N is a temporary or in-memory database, then\n** a NULL pointer is returned.\n**\n** ^The filename returned by this function is the output of the\n** xFullPathname method of the [VFS].  ^In other words, the filename\n** will be an absolute pathname, even if the filename used\n** to open the database originally was a URI or relative pathname.\n*/\nSQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName);\n\n/*\n** CAPI3REF: Determine if a database is read-only\n** METHOD: sqlite3\n**\n** ^The sqlite3_db_readonly(D,N) interface returns 1 if the database N\n** of connection D is read-only, 0 if it is read/write, or -1 if N is not\n** the name of a database on connection D.\n*/\nSQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName);\n\n/*\n** CAPI3REF: Find the next prepared statement\n** METHOD: sqlite3\n**\n** ^This interface returns a pointer to the next [prepared statement] after\n** pStmt associated with the [database connection] pDb.  ^If pStmt is NULL\n** then this interface returns a pointer to the first prepared statement\n** associated with the database connection pDb.  ^If no prepared statement\n** satisfies the conditions of this routine, it returns NULL.\n**\n** The [database connection] pointer D in a call to\n** [sqlite3_next_stmt(D,S)] must refer to an open database\n** connection and in particular must not be a NULL pointer.\n*/\nSQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt);\n\n/*\n** CAPI3REF: Commit And Rollback Notification Callbacks\n** METHOD: sqlite3\n**\n** ^The sqlite3_commit_hook() interface registers a callback\n** function to be invoked whenever a transaction is [COMMIT | committed].\n** ^Any callback set by a previous call to sqlite3_commit_hook()\n** for the same database connection is overridden.\n** ^The sqlite3_rollback_hook() interface registers a callback\n** function to be invoked whenever a transaction is [ROLLBACK | rolled back].\n** ^Any callback set by a previous call to sqlite3_rollback_hook()\n** for the same database connection is overridden.\n** ^The pArg argument is passed through to the callback.\n** ^If the callback on a commit hook function returns non-zero,\n** then the commit is converted into a rollback.\n**\n** ^The sqlite3_commit_hook(D,C,P) and sqlite3_rollback_hook(D,C,P) functions\n** return the P argument from the previous call of the same function\n** on the same [database connection] D, or NULL for\n** the first call for each function on D.\n**\n** The commit and rollback hook callbacks are not reentrant.\n** The callback implementation must not do anything that will modify\n** the database connection that invoked the callback.  Any actions\n** to modify the database connection must be deferred until after the\n** completion of the [sqlite3_step()] call that triggered the commit\n** or rollback hook in the first place.\n** Note that running any other SQL statements, including SELECT statements,\n** or merely calling [sqlite3_prepare_v2()] and [sqlite3_step()] will modify\n** the database connections for the meaning of \"modify\" in this paragraph.\n**\n** ^Registering a NULL function disables the callback.\n**\n** ^When the commit hook callback routine returns zero, the [COMMIT]\n** operation is allowed to continue normally.  ^If the commit hook\n** returns non-zero, then the [COMMIT] is converted into a [ROLLBACK].\n** ^The rollback hook is invoked on a rollback that results from a commit\n** hook returning non-zero, just as it would be with any other rollback.\n**\n** ^For the purposes of this API, a transaction is said to have been\n** rolled back if an explicit \"ROLLBACK\" statement is executed, or\n** an error or constraint causes an implicit rollback to occur.\n** ^The rollback callback is not invoked if a transaction is\n** automatically rolled back because the database connection is closed.\n**\n** See also the [sqlite3_update_hook()] interface.\n*/\nSQLITE_API void *sqlite3_commit_hook(sqlite3*, int(*)(void*), void*);\nSQLITE_API void *sqlite3_rollback_hook(sqlite3*, void(*)(void *), void*);\n\n/*\n** CAPI3REF: Data Change Notification Callbacks\n** METHOD: sqlite3\n**\n** ^The sqlite3_update_hook() interface registers a callback function\n** with the [database connection] identified by the first argument\n** to be invoked whenever a row is updated, inserted or deleted in\n** a [rowid table].\n** ^Any callback set by a previous call to this function\n** for the same database connection is overridden.\n**\n** ^The second argument is a pointer to the function to invoke when a\n** row is updated, inserted or deleted in a rowid table.\n** ^The first argument to the callback is a copy of the third argument\n** to sqlite3_update_hook().\n** ^The second callback argument is one of [SQLITE_INSERT], [SQLITE_DELETE],\n** or [SQLITE_UPDATE], depending on the operation that caused the callback\n** to be invoked.\n** ^The third and fourth arguments to the callback contain pointers to the\n** database and table name containing the affected row.\n** ^The final callback parameter is the [rowid] of the row.\n** ^In the case of an update, this is the [rowid] after the update takes place.\n**\n** ^(The update hook is not invoked when internal system tables are\n** modified (i.e. sqlite_master and sqlite_sequence).)^\n** ^The update hook is not invoked when [WITHOUT ROWID] tables are modified.\n**\n** ^In the current implementation, the update hook\n** is not invoked when conflicting rows are deleted because of an\n** [ON CONFLICT | ON CONFLICT REPLACE] clause.  ^Nor is the update hook\n** invoked when rows are deleted using the [truncate optimization].\n** The exceptions defined in this paragraph might change in a future\n** release of SQLite.\n**\n** The update hook implementation must not do anything that will modify\n** the database connection that invoked the update hook.  Any actions\n** to modify the database connection must be deferred until after the\n** completion of the [sqlite3_step()] call that triggered the update hook.\n** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their\n** database connections for the meaning of \"modify\" in this paragraph.\n**\n** ^The sqlite3_update_hook(D,C,P) function\n** returns the P argument from the previous call\n** on the same [database connection] D, or NULL for\n** the first call on D.\n**\n** See also the [sqlite3_commit_hook()], [sqlite3_rollback_hook()],\n** and [sqlite3_preupdate_hook()] interfaces.\n*/\nSQLITE_API void *sqlite3_update_hook(\n  sqlite3*, \n  void(*)(void *,int ,char const *,char const *,sqlite3_int64),\n  void*\n);\n\n/*\n** CAPI3REF: Enable Or Disable Shared Pager Cache\n**\n** ^(This routine enables or disables the sharing of the database cache\n** and schema data structures between [database connection | connections]\n** to the same database. Sharing is enabled if the argument is true\n** and disabled if the argument is false.)^\n**\n** ^Cache sharing is enabled and disabled for an entire process.\n** This is a change as of SQLite [version 3.5.0] ([dateof:3.5.0]). \n** In prior versions of SQLite,\n** sharing was enabled or disabled for each thread separately.\n**\n** ^(The cache sharing mode set by this interface effects all subsequent\n** calls to [sqlite3_open()], [sqlite3_open_v2()], and [sqlite3_open16()].\n** Existing database connections continue use the sharing mode\n** that was in effect at the time they were opened.)^\n**\n** ^(This routine returns [SQLITE_OK] if shared cache was enabled or disabled\n** successfully.  An [error code] is returned otherwise.)^\n**\n** ^Shared cache is disabled by default. But this might change in\n** future releases of SQLite.  Applications that care about shared\n** cache setting should set it explicitly.\n**\n** Note: This method is disabled on MacOS X 10.7 and iOS version 5.0\n** and will always return SQLITE_MISUSE. On those systems, \n** shared cache mode should be enabled per-database connection via \n** [sqlite3_open_v2()] with [SQLITE_OPEN_SHAREDCACHE].\n**\n** This interface is threadsafe on processors where writing a\n** 32-bit integer is atomic.\n**\n** See Also:  [SQLite Shared-Cache Mode]\n*/\nSQLITE_API int sqlite3_enable_shared_cache(int);\n\n/*\n** CAPI3REF: Attempt To Free Heap Memory\n**\n** ^The sqlite3_release_memory() interface attempts to free N bytes\n** of heap memory by deallocating non-essential memory allocations\n** held by the database library.   Memory used to cache database\n** pages to improve performance is an example of non-essential memory.\n** ^sqlite3_release_memory() returns the number of bytes actually freed,\n** which might be more or less than the amount requested.\n** ^The sqlite3_release_memory() routine is a no-op returning zero\n** if SQLite is not compiled with [SQLITE_ENABLE_MEMORY_MANAGEMENT].\n**\n** See also: [sqlite3_db_release_memory()]\n*/\nSQLITE_API int sqlite3_release_memory(int);\n\n/*\n** CAPI3REF: Free Memory Used By A Database Connection\n** METHOD: sqlite3\n**\n** ^The sqlite3_db_release_memory(D) interface attempts to free as much heap\n** memory as possible from database connection D. Unlike the\n** [sqlite3_release_memory()] interface, this interface is in effect even\n** when the [SQLITE_ENABLE_MEMORY_MANAGEMENT] compile-time option is\n** omitted.\n**\n** See also: [sqlite3_release_memory()]\n*/\nSQLITE_API int sqlite3_db_release_memory(sqlite3*);\n\n/*\n** CAPI3REF: Impose A Limit On Heap Size\n**\n** ^The sqlite3_soft_heap_limit64() interface sets and/or queries the\n** soft limit on the amount of heap memory that may be allocated by SQLite.\n** ^SQLite strives to keep heap memory utilization below the soft heap\n** limit by reducing the number of pages held in the page cache\n** as heap memory usages approaches the limit.\n** ^The soft heap limit is \"soft\" because even though SQLite strives to stay\n** below the limit, it will exceed the limit rather than generate\n** an [SQLITE_NOMEM] error.  In other words, the soft heap limit \n** is advisory only.\n**\n** ^The return value from sqlite3_soft_heap_limit64() is the size of\n** the soft heap limit prior to the call, or negative in the case of an\n** error.  ^If the argument N is negative\n** then no change is made to the soft heap limit.  Hence, the current\n** size of the soft heap limit can be determined by invoking\n** sqlite3_soft_heap_limit64() with a negative argument.\n**\n** ^If the argument N is zero then the soft heap limit is disabled.\n**\n** ^(The soft heap limit is not enforced in the current implementation\n** if one or more of following conditions are true:\n**\n** <ul>\n** <li> The soft heap limit is set to zero.\n** <li> Memory accounting is disabled using a combination of the\n**      [sqlite3_config]([SQLITE_CONFIG_MEMSTATUS],...) start-time option and\n**      the [SQLITE_DEFAULT_MEMSTATUS] compile-time option.\n** <li> An alternative page cache implementation is specified using\n**      [sqlite3_config]([SQLITE_CONFIG_PCACHE2],...).\n** <li> The page cache allocates from its own memory pool supplied\n**      by [sqlite3_config]([SQLITE_CONFIG_PAGECACHE],...) rather than\n**      from the heap.\n** </ul>)^\n**\n** Beginning with SQLite [version 3.7.3] ([dateof:3.7.3]), \n** the soft heap limit is enforced\n** regardless of whether or not the [SQLITE_ENABLE_MEMORY_MANAGEMENT]\n** compile-time option is invoked.  With [SQLITE_ENABLE_MEMORY_MANAGEMENT],\n** the soft heap limit is enforced on every memory allocation.  Without\n** [SQLITE_ENABLE_MEMORY_MANAGEMENT], the soft heap limit is only enforced\n** when memory is allocated by the page cache.  Testing suggests that because\n** the page cache is the predominate memory user in SQLite, most\n** applications will achieve adequate soft heap limit enforcement without\n** the use of [SQLITE_ENABLE_MEMORY_MANAGEMENT].\n**\n** The circumstances under which SQLite will enforce the soft heap limit may\n** changes in future releases of SQLite.\n*/\nSQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);\n\n/*\n** CAPI3REF: Deprecated Soft Heap Limit Interface\n** DEPRECATED\n**\n** This is a deprecated version of the [sqlite3_soft_heap_limit64()]\n** interface.  This routine is provided for historical compatibility\n** only.  All new applications should use the\n** [sqlite3_soft_heap_limit64()] interface rather than this one.\n*/\nSQLITE_API SQLITE_DEPRECATED void sqlite3_soft_heap_limit(int N);\n\n\n/*\n** CAPI3REF: Extract Metadata About A Column Of A Table\n** METHOD: sqlite3\n**\n** ^(The sqlite3_table_column_metadata(X,D,T,C,....) routine returns\n** information about column C of table T in database D\n** on [database connection] X.)^  ^The sqlite3_table_column_metadata()\n** interface returns SQLITE_OK and fills in the non-NULL pointers in\n** the final five arguments with appropriate values if the specified\n** column exists.  ^The sqlite3_table_column_metadata() interface returns\n** SQLITE_ERROR and if the specified column does not exist.\n** ^If the column-name parameter to sqlite3_table_column_metadata() is a\n** NULL pointer, then this routine simply checks for the existence of the\n** table and returns SQLITE_OK if the table exists and SQLITE_ERROR if it\n** does not.  If the table name parameter T in a call to\n** sqlite3_table_column_metadata(X,D,T,C,...) is NULL then the result is\n** undefined behavior.\n**\n** ^The column is identified by the second, third and fourth parameters to\n** this function. ^(The second parameter is either the name of the database\n** (i.e. \"main\", \"temp\", or an attached database) containing the specified\n** table or NULL.)^ ^If it is NULL, then all attached databases are searched\n** for the table using the same algorithm used by the database engine to\n** resolve unqualified table references.\n**\n** ^The third and fourth parameters to this function are the table and column\n** name of the desired column, respectively.\n**\n** ^Metadata is returned by writing to the memory locations passed as the 5th\n** and subsequent parameters to this function. ^Any of these arguments may be\n** NULL, in which case the corresponding element of metadata is omitted.\n**\n** ^(<blockquote>\n** <table border=\"1\">\n** <tr><th> Parameter <th> Output<br>Type <th>  Description\n**\n** <tr><td> 5th <td> const char* <td> Data type\n** <tr><td> 6th <td> const char* <td> Name of default collation sequence\n** <tr><td> 7th <td> int         <td> True if column has a NOT NULL constraint\n** <tr><td> 8th <td> int         <td> True if column is part of the PRIMARY KEY\n** <tr><td> 9th <td> int         <td> True if column is [AUTOINCREMENT]\n** </table>\n** </blockquote>)^\n**\n** ^The memory pointed to by the character pointers returned for the\n** declaration type and collation sequence is valid until the next\n** call to any SQLite API function.\n**\n** ^If the specified table is actually a view, an [error code] is returned.\n**\n** ^If the specified column is \"rowid\", \"oid\" or \"_rowid_\" and the table \n** is not a [WITHOUT ROWID] table and an\n** [INTEGER PRIMARY KEY] column has been explicitly declared, then the output\n** parameters are set for the explicitly declared column. ^(If there is no\n** [INTEGER PRIMARY KEY] column, then the outputs\n** for the [rowid] are set as follows:\n**\n** <pre>\n**     data type: \"INTEGER\"\n**     collation sequence: \"BINARY\"\n**     not null: 0\n**     primary key: 1\n**     auto increment: 0\n** </pre>)^\n**\n** ^This function causes all database schemas to be read from disk and\n** parsed, if that has not already been done, and returns an error if\n** any errors are encountered while loading the schema.\n*/\nSQLITE_API int sqlite3_table_column_metadata(\n  sqlite3 *db,                /* Connection handle */\n  const char *zDbName,        /* Database name or NULL */\n  const char *zTableName,     /* Table name */\n  const char *zColumnName,    /* Column name */\n  char const **pzDataType,    /* OUTPUT: Declared data type */\n  char const **pzCollSeq,     /* OUTPUT: Collation sequence name */\n  int *pNotNull,              /* OUTPUT: True if NOT NULL constraint exists */\n  int *pPrimaryKey,           /* OUTPUT: True if column part of PK */\n  int *pAutoinc               /* OUTPUT: True if column is auto-increment */\n);\n\n/*\n** CAPI3REF: Load An Extension\n** METHOD: sqlite3\n**\n** ^This interface loads an SQLite extension library from the named file.\n**\n** ^The sqlite3_load_extension() interface attempts to load an\n** [SQLite extension] library contained in the file zFile.  If\n** the file cannot be loaded directly, attempts are made to load\n** with various operating-system specific extensions added.\n** So for example, if \"samplelib\" cannot be loaded, then names like\n** \"samplelib.so\" or \"samplelib.dylib\" or \"samplelib.dll\" might\n** be tried also.\n**\n** ^The entry point is zProc.\n** ^(zProc may be 0, in which case SQLite will try to come up with an\n** entry point name on its own.  It first tries \"sqlite3_extension_init\".\n** If that does not work, it constructs a name \"sqlite3_X_init\" where the\n** X is consists of the lower-case equivalent of all ASCII alphabetic\n** characters in the filename from the last \"/\" to the first following\n** \".\" and omitting any initial \"lib\".)^\n** ^The sqlite3_load_extension() interface returns\n** [SQLITE_OK] on success and [SQLITE_ERROR] if something goes wrong.\n** ^If an error occurs and pzErrMsg is not 0, then the\n** [sqlite3_load_extension()] interface shall attempt to\n** fill *pzErrMsg with error message text stored in memory\n** obtained from [sqlite3_malloc()]. The calling function\n** should free this memory by calling [sqlite3_free()].\n**\n** ^Extension loading must be enabled using\n** [sqlite3_enable_load_extension()] or\n** [sqlite3_db_config](db,[SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION],1,NULL)\n** prior to calling this API,\n** otherwise an error will be returned.\n**\n** <b>Security warning:</b> It is recommended that the \n** [SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION] method be used to enable only this\n** interface.  The use of the [sqlite3_enable_load_extension()] interface\n** should be avoided.  This will keep the SQL function [load_extension()]\n** disabled and prevent SQL injections from giving attackers\n** access to extension loading capabilities.\n**\n** See also the [load_extension() SQL function].\n*/\nSQLITE_API int sqlite3_load_extension(\n  sqlite3 *db,          /* Load the extension into this database connection */\n  const char *zFile,    /* Name of the shared library containing extension */\n  const char *zProc,    /* Entry point.  Derived from zFile if 0 */\n  char **pzErrMsg       /* Put error message here if not 0 */\n);\n\n/*\n** CAPI3REF: Enable Or Disable Extension Loading\n** METHOD: sqlite3\n**\n** ^So as not to open security holes in older applications that are\n** unprepared to deal with [extension loading], and as a means of disabling\n** [extension loading] while evaluating user-entered SQL, the following API\n** is provided to turn the [sqlite3_load_extension()] mechanism on and off.\n**\n** ^Extension loading is off by default.\n** ^Call the sqlite3_enable_load_extension() routine with onoff==1\n** to turn extension loading on and call it with onoff==0 to turn\n** it back off again.\n**\n** ^This interface enables or disables both the C-API\n** [sqlite3_load_extension()] and the SQL function [load_extension()].\n** ^(Use [sqlite3_db_config](db,[SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION],..)\n** to enable or disable only the C-API.)^\n**\n** <b>Security warning:</b> It is recommended that extension loading\n** be disabled using the [SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION] method\n** rather than this interface, so the [load_extension()] SQL function\n** remains disabled. This will prevent SQL injections from giving attackers\n** access to extension loading capabilities.\n*/\nSQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff);\n\n/*\n** CAPI3REF: Automatically Load Statically Linked Extensions\n**\n** ^This interface causes the xEntryPoint() function to be invoked for\n** each new [database connection] that is created.  The idea here is that\n** xEntryPoint() is the entry point for a statically linked [SQLite extension]\n** that is to be automatically loaded into all new database connections.\n**\n** ^(Even though the function prototype shows that xEntryPoint() takes\n** no arguments and returns void, SQLite invokes xEntryPoint() with three\n** arguments and expects an integer result as if the signature of the\n** entry point where as follows:\n**\n** <blockquote><pre>\n** &nbsp;  int xEntryPoint(\n** &nbsp;    sqlite3 *db,\n** &nbsp;    const char **pzErrMsg,\n** &nbsp;    const struct sqlite3_api_routines *pThunk\n** &nbsp;  );\n** </pre></blockquote>)^\n**\n** If the xEntryPoint routine encounters an error, it should make *pzErrMsg\n** point to an appropriate error message (obtained from [sqlite3_mprintf()])\n** and return an appropriate [error code].  ^SQLite ensures that *pzErrMsg\n** is NULL before calling the xEntryPoint().  ^SQLite will invoke\n** [sqlite3_free()] on *pzErrMsg after xEntryPoint() returns.  ^If any\n** xEntryPoint() returns an error, the [sqlite3_open()], [sqlite3_open16()],\n** or [sqlite3_open_v2()] call that provoked the xEntryPoint() will fail.\n**\n** ^Calling sqlite3_auto_extension(X) with an entry point X that is already\n** on the list of automatic extensions is a harmless no-op. ^No entry point\n** will be called more than once for each database connection that is opened.\n**\n** See also: [sqlite3_reset_auto_extension()]\n** and [sqlite3_cancel_auto_extension()]\n*/\nSQLITE_API int sqlite3_auto_extension(void(*xEntryPoint)(void));\n\n/*\n** CAPI3REF: Cancel Automatic Extension Loading\n**\n** ^The [sqlite3_cancel_auto_extension(X)] interface unregisters the\n** initialization routine X that was registered using a prior call to\n** [sqlite3_auto_extension(X)].  ^The [sqlite3_cancel_auto_extension(X)]\n** routine returns 1 if initialization routine X was successfully \n** unregistered and it returns 0 if X was not on the list of initialization\n** routines.\n*/\nSQLITE_API int sqlite3_cancel_auto_extension(void(*xEntryPoint)(void));\n\n/*\n** CAPI3REF: Reset Automatic Extension Loading\n**\n** ^This interface disables all automatic extensions previously\n** registered using [sqlite3_auto_extension()].\n*/\nSQLITE_API void sqlite3_reset_auto_extension(void);\n\n/*\n** The interface to the virtual-table mechanism is currently considered\n** to be experimental.  The interface might change in incompatible ways.\n** If this is a problem for you, do not use the interface at this time.\n**\n** When the virtual-table mechanism stabilizes, we will declare the\n** interface fixed, support it indefinitely, and remove this comment.\n*/\n\n/*\n** Structures used by the virtual table interface\n*/\ntypedef struct sqlite3_vtab sqlite3_vtab;\ntypedef struct sqlite3_index_info sqlite3_index_info;\ntypedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;\ntypedef struct sqlite3_module sqlite3_module;\n\n/*\n** CAPI3REF: Virtual Table Object\n** KEYWORDS: sqlite3_module {virtual table module}\n**\n** This structure, sometimes called a \"virtual table module\", \n** defines the implementation of a [virtual tables].  \n** This structure consists mostly of methods for the module.\n**\n** ^A virtual table module is created by filling in a persistent\n** instance of this structure and passing a pointer to that instance\n** to [sqlite3_create_module()] or [sqlite3_create_module_v2()].\n** ^The registration remains valid until it is replaced by a different\n** module or until the [database connection] closes.  The content\n** of this structure must not change while it is registered with\n** any database connection.\n*/\nstruct sqlite3_module {\n  int iVersion;\n  int (*xCreate)(sqlite3*, void *pAux,\n               int argc, const char *const*argv,\n               sqlite3_vtab **ppVTab, char**);\n  int (*xConnect)(sqlite3*, void *pAux,\n               int argc, const char *const*argv,\n               sqlite3_vtab **ppVTab, char**);\n  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);\n  int (*xDisconnect)(sqlite3_vtab *pVTab);\n  int (*xDestroy)(sqlite3_vtab *pVTab);\n  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);\n  int (*xClose)(sqlite3_vtab_cursor*);\n  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,\n                int argc, sqlite3_value **argv);\n  int (*xNext)(sqlite3_vtab_cursor*);\n  int (*xEof)(sqlite3_vtab_cursor*);\n  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);\n  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);\n  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);\n  int (*xBegin)(sqlite3_vtab *pVTab);\n  int (*xSync)(sqlite3_vtab *pVTab);\n  int (*xCommit)(sqlite3_vtab *pVTab);\n  int (*xRollback)(sqlite3_vtab *pVTab);\n  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,\n                       void (**pxFunc)(sqlite3_context*,int,sqlite3_value**),\n                       void **ppArg);\n  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);\n  /* The methods above are in version 1 of the sqlite_module object. Those \n  ** below are for version 2 and greater. */\n  int (*xSavepoint)(sqlite3_vtab *pVTab, int);\n  int (*xRelease)(sqlite3_vtab *pVTab, int);\n  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);\n  /* The methods above are in versions 1 and 2 of the sqlite_module object.\n  ** Those below are for version 3 and greater. */\n  int (*xShadowName)(const char*);\n};\n\n/*\n** CAPI3REF: Virtual Table Indexing Information\n** KEYWORDS: sqlite3_index_info\n**\n** The sqlite3_index_info structure and its substructures is used as part\n** of the [virtual table] interface to\n** pass information into and receive the reply from the [xBestIndex]\n** method of a [virtual table module].  The fields under **Inputs** are the\n** inputs to xBestIndex and are read-only.  xBestIndex inserts its\n** results into the **Outputs** fields.\n**\n** ^(The aConstraint[] array records WHERE clause constraints of the form:\n**\n** <blockquote>column OP expr</blockquote>\n**\n** where OP is =, &lt;, &lt;=, &gt;, or &gt;=.)^  ^(The particular operator is\n** stored in aConstraint[].op using one of the\n** [SQLITE_INDEX_CONSTRAINT_EQ | SQLITE_INDEX_CONSTRAINT_ values].)^\n** ^(The index of the column is stored in\n** aConstraint[].iColumn.)^  ^(aConstraint[].usable is TRUE if the\n** expr on the right-hand side can be evaluated (and thus the constraint\n** is usable) and false if it cannot.)^\n**\n** ^The optimizer automatically inverts terms of the form \"expr OP column\"\n** and makes other simplifications to the WHERE clause in an attempt to\n** get as many WHERE clause terms into the form shown above as possible.\n** ^The aConstraint[] array only reports WHERE clause terms that are\n** relevant to the particular virtual table being queried.\n**\n** ^Information about the ORDER BY clause is stored in aOrderBy[].\n** ^Each term of aOrderBy records a column of the ORDER BY clause.\n**\n** The colUsed field indicates which columns of the virtual table may be\n** required by the current scan. Virtual table columns are numbered from\n** zero in the order in which they appear within the CREATE TABLE statement\n** passed to sqlite3_declare_vtab(). For the first 63 columns (columns 0-62),\n** the corresponding bit is set within the colUsed mask if the column may be\n** required by SQLite. If the table has at least 64 columns and any column\n** to the right of the first 63 is required, then bit 63 of colUsed is also\n** set. In other words, column iCol may be required if the expression\n** (colUsed & ((sqlite3_uint64)1 << (iCol>=63 ? 63 : iCol))) evaluates to \n** non-zero.\n**\n** The [xBestIndex] method must fill aConstraintUsage[] with information\n** about what parameters to pass to xFilter.  ^If argvIndex>0 then\n** the right-hand side of the corresponding aConstraint[] is evaluated\n** and becomes the argvIndex-th entry in argv.  ^(If aConstraintUsage[].omit\n** is true, then the constraint is assumed to be fully handled by the\n** virtual table and is not checked again by SQLite.)^\n**\n** ^The idxNum and idxPtr values are recorded and passed into the\n** [xFilter] method.\n** ^[sqlite3_free()] is used to free idxPtr if and only if\n** needToFreeIdxPtr is true.\n**\n** ^The orderByConsumed means that output from [xFilter]/[xNext] will occur in\n** the correct order to satisfy the ORDER BY clause so that no separate\n** sorting step is required.\n**\n** ^The estimatedCost value is an estimate of the cost of a particular\n** strategy. A cost of N indicates that the cost of the strategy is similar\n** to a linear scan of an SQLite table with N rows. A cost of log(N) \n** indicates that the expense of the operation is similar to that of a\n** binary search on a unique indexed field of an SQLite table with N rows.\n**\n** ^The estimatedRows value is an estimate of the number of rows that\n** will be returned by the strategy.\n**\n** The xBestIndex method may optionally populate the idxFlags field with a \n** mask of SQLITE_INDEX_SCAN_* flags. Currently there is only one such flag -\n** SQLITE_INDEX_SCAN_UNIQUE. If the xBestIndex method sets this flag, SQLite\n** assumes that the strategy may visit at most one row. \n**\n** Additionally, if xBestIndex sets the SQLITE_INDEX_SCAN_UNIQUE flag, then\n** SQLite also assumes that if a call to the xUpdate() method is made as\n** part of the same statement to delete or update a virtual table row and the\n** implementation returns SQLITE_CONSTRAINT, then there is no need to rollback\n** any database changes. In other words, if the xUpdate() returns\n** SQLITE_CONSTRAINT, the database contents must be exactly as they were\n** before xUpdate was called. By contrast, if SQLITE_INDEX_SCAN_UNIQUE is not\n** set and xUpdate returns SQLITE_CONSTRAINT, any database changes made by\n** the xUpdate method are automatically rolled back by SQLite.\n**\n** IMPORTANT: The estimatedRows field was added to the sqlite3_index_info\n** structure for SQLite [version 3.8.2] ([dateof:3.8.2]). \n** If a virtual table extension is\n** used with an SQLite version earlier than 3.8.2, the results of attempting \n** to read or write the estimatedRows field are undefined (but are likely \n** to included crashing the application). The estimatedRows field should\n** therefore only be used if [sqlite3_libversion_number()] returns a\n** value greater than or equal to 3008002. Similarly, the idxFlags field\n** was added for [version 3.9.0] ([dateof:3.9.0]). \n** It may therefore only be used if\n** sqlite3_libversion_number() returns a value greater than or equal to\n** 3009000.\n*/\nstruct sqlite3_index_info {\n  /* Inputs */\n  int nConstraint;           /* Number of entries in aConstraint */\n  struct sqlite3_index_constraint {\n     int iColumn;              /* Column constrained.  -1 for ROWID */\n     unsigned char op;         /* Constraint operator */\n     unsigned char usable;     /* True if this constraint is usable */\n     int iTermOffset;          /* Used internally - xBestIndex should ignore */\n  } *aConstraint;            /* Table of WHERE clause constraints */\n  int nOrderBy;              /* Number of terms in the ORDER BY clause */\n  struct sqlite3_index_orderby {\n     int iColumn;              /* Column number */\n     unsigned char desc;       /* True for DESC.  False for ASC. */\n  } *aOrderBy;               /* The ORDER BY clause */\n  /* Outputs */\n  struct sqlite3_index_constraint_usage {\n    int argvIndex;           /* if >0, constraint is part of argv to xFilter */\n    unsigned char omit;      /* Do not code a test for this constraint */\n  } *aConstraintUsage;\n  int idxNum;                /* Number used to identify the index */\n  char *idxStr;              /* String, possibly obtained from sqlite3_malloc */\n  int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */\n  int orderByConsumed;       /* True if output is already ordered */\n  double estimatedCost;           /* Estimated cost of using this index */\n  /* Fields below are only available in SQLite 3.8.2 and later */\n  sqlite3_int64 estimatedRows;    /* Estimated number of rows returned */\n  /* Fields below are only available in SQLite 3.9.0 and later */\n  int idxFlags;              /* Mask of SQLITE_INDEX_SCAN_* flags */\n  /* Fields below are only available in SQLite 3.10.0 and later */\n  sqlite3_uint64 colUsed;    /* Input: Mask of columns used by statement */\n};\n\n/*\n** CAPI3REF: Virtual Table Scan Flags\n**\n** Virtual table implementations are allowed to set the \n** [sqlite3_index_info].idxFlags field to some combination of\n** these bits.\n*/\n#define SQLITE_INDEX_SCAN_UNIQUE      1     /* Scan visits at most 1 row */\n\n/*\n** CAPI3REF: Virtual Table Constraint Operator Codes\n**\n** These macros defined the allowed values for the\n** [sqlite3_index_info].aConstraint[].op field.  Each value represents\n** an operator that is part of a constraint term in the wHERE clause of\n** a query that uses a [virtual table].\n*/\n#define SQLITE_INDEX_CONSTRAINT_EQ         2\n#define SQLITE_INDEX_CONSTRAINT_GT         4\n#define SQLITE_INDEX_CONSTRAINT_LE         8\n#define SQLITE_INDEX_CONSTRAINT_LT        16\n#define SQLITE_INDEX_CONSTRAINT_GE        32\n#define SQLITE_INDEX_CONSTRAINT_MATCH     64\n#define SQLITE_INDEX_CONSTRAINT_LIKE      65\n#define SQLITE_INDEX_CONSTRAINT_GLOB      66\n#define SQLITE_INDEX_CONSTRAINT_REGEXP    67\n#define SQLITE_INDEX_CONSTRAINT_NE        68\n#define SQLITE_INDEX_CONSTRAINT_ISNOT     69\n#define SQLITE_INDEX_CONSTRAINT_ISNOTNULL 70\n#define SQLITE_INDEX_CONSTRAINT_ISNULL    71\n#define SQLITE_INDEX_CONSTRAINT_IS        72\n#define SQLITE_INDEX_CONSTRAINT_FUNCTION 150\n\n/*\n** CAPI3REF: Register A Virtual Table Implementation\n** METHOD: sqlite3\n**\n** ^These routines are used to register a new [virtual table module] name.\n** ^Module names must be registered before\n** creating a new [virtual table] using the module and before using a\n** preexisting [virtual table] for the module.\n**\n** ^The module name is registered on the [database connection] specified\n** by the first parameter.  ^The name of the module is given by the \n** second parameter.  ^The third parameter is a pointer to\n** the implementation of the [virtual table module].   ^The fourth\n** parameter is an arbitrary client data pointer that is passed through\n** into the [xCreate] and [xConnect] methods of the virtual table module\n** when a new virtual table is be being created or reinitialized.\n**\n** ^The sqlite3_create_module_v2() interface has a fifth parameter which\n** is a pointer to a destructor for the pClientData.  ^SQLite will\n** invoke the destructor function (if it is not NULL) when SQLite\n** no longer needs the pClientData pointer.  ^The destructor will also\n** be invoked if the call to sqlite3_create_module_v2() fails.\n** ^The sqlite3_create_module()\n** interface is equivalent to sqlite3_create_module_v2() with a NULL\n** destructor.\n*/\nSQLITE_API int sqlite3_create_module(\n  sqlite3 *db,               /* SQLite connection to register module with */\n  const char *zName,         /* Name of the module */\n  const sqlite3_module *p,   /* Methods for the module */\n  void *pClientData          /* Client data for xCreate/xConnect */\n);\nSQLITE_API int sqlite3_create_module_v2(\n  sqlite3 *db,               /* SQLite connection to register module with */\n  const char *zName,         /* Name of the module */\n  const sqlite3_module *p,   /* Methods for the module */\n  void *pClientData,         /* Client data for xCreate/xConnect */\n  void(*xDestroy)(void*)     /* Module destructor function */\n);\n\n/*\n** CAPI3REF: Virtual Table Instance Object\n** KEYWORDS: sqlite3_vtab\n**\n** Every [virtual table module] implementation uses a subclass\n** of this object to describe a particular instance\n** of the [virtual table].  Each subclass will\n** be tailored to the specific needs of the module implementation.\n** The purpose of this superclass is to define certain fields that are\n** common to all module implementations.\n**\n** ^Virtual tables methods can set an error message by assigning a\n** string obtained from [sqlite3_mprintf()] to zErrMsg.  The method should\n** take care that any prior string is freed by a call to [sqlite3_free()]\n** prior to assigning a new string to zErrMsg.  ^After the error message\n** is delivered up to the client application, the string will be automatically\n** freed by sqlite3_free() and the zErrMsg field will be zeroed.\n*/\nstruct sqlite3_vtab {\n  const sqlite3_module *pModule;  /* The module for this virtual table */\n  int nRef;                       /* Number of open cursors */\n  char *zErrMsg;                  /* Error message from sqlite3_mprintf() */\n  /* Virtual table implementations will typically add additional fields */\n};\n\n/*\n** CAPI3REF: Virtual Table Cursor Object\n** KEYWORDS: sqlite3_vtab_cursor {virtual table cursor}\n**\n** Every [virtual table module] implementation uses a subclass of the\n** following structure to describe cursors that point into the\n** [virtual table] and are used\n** to loop through the virtual table.  Cursors are created using the\n** [sqlite3_module.xOpen | xOpen] method of the module and are destroyed\n** by the [sqlite3_module.xClose | xClose] method.  Cursors are used\n** by the [xFilter], [xNext], [xEof], [xColumn], and [xRowid] methods\n** of the module.  Each module implementation will define\n** the content of a cursor structure to suit its own needs.\n**\n** This superclass exists in order to define fields of the cursor that\n** are common to all implementations.\n*/\nstruct sqlite3_vtab_cursor {\n  sqlite3_vtab *pVtab;      /* Virtual table of this cursor */\n  /* Virtual table implementations will typically add additional fields */\n};\n\n/*\n** CAPI3REF: Declare The Schema Of A Virtual Table\n**\n** ^The [xCreate] and [xConnect] methods of a\n** [virtual table module] call this interface\n** to declare the format (the names and datatypes of the columns) of\n** the virtual tables they implement.\n*/\nSQLITE_API int sqlite3_declare_vtab(sqlite3*, const char *zSQL);\n\n/*\n** CAPI3REF: Overload A Function For A Virtual Table\n** METHOD: sqlite3\n**\n** ^(Virtual tables can provide alternative implementations of functions\n** using the [xFindFunction] method of the [virtual table module].  \n** But global versions of those functions\n** must exist in order to be overloaded.)^\n**\n** ^(This API makes sure a global version of a function with a particular\n** name and number of parameters exists.  If no such function exists\n** before this API is called, a new function is created.)^  ^The implementation\n** of the new function always causes an exception to be thrown.  So\n** the new function is not good for anything by itself.  Its only\n** purpose is to be a placeholder function that can be overloaded\n** by a [virtual table].\n*/\nSQLITE_API int sqlite3_overload_function(sqlite3*, const char *zFuncName, int nArg);\n\n/*\n** The interface to the virtual-table mechanism defined above (back up\n** to a comment remarkably similar to this one) is currently considered\n** to be experimental.  The interface might change in incompatible ways.\n** If this is a problem for you, do not use the interface at this time.\n**\n** When the virtual-table mechanism stabilizes, we will declare the\n** interface fixed, support it indefinitely, and remove this comment.\n*/\n\n/*\n** CAPI3REF: A Handle To An Open BLOB\n** KEYWORDS: {BLOB handle} {BLOB handles}\n**\n** An instance of this object represents an open BLOB on which\n** [sqlite3_blob_open | incremental BLOB I/O] can be performed.\n** ^Objects of this type are created by [sqlite3_blob_open()]\n** and destroyed by [sqlite3_blob_close()].\n** ^The [sqlite3_blob_read()] and [sqlite3_blob_write()] interfaces\n** can be used to read or write small subsections of the BLOB.\n** ^The [sqlite3_blob_bytes()] interface returns the size of the BLOB in bytes.\n*/\ntypedef struct sqlite3_blob sqlite3_blob;\n\n/*\n** CAPI3REF: Open A BLOB For Incremental I/O\n** METHOD: sqlite3\n** CONSTRUCTOR: sqlite3_blob\n**\n** ^(This interfaces opens a [BLOB handle | handle] to the BLOB located\n** in row iRow, column zColumn, table zTable in database zDb;\n** in other words, the same BLOB that would be selected by:\n**\n** <pre>\n**     SELECT zColumn FROM zDb.zTable WHERE [rowid] = iRow;\n** </pre>)^\n**\n** ^(Parameter zDb is not the filename that contains the database, but \n** rather the symbolic name of the database. For attached databases, this is\n** the name that appears after the AS keyword in the [ATTACH] statement.\n** For the main database file, the database name is \"main\". For TEMP\n** tables, the database name is \"temp\".)^\n**\n** ^If the flags parameter is non-zero, then the BLOB is opened for read\n** and write access. ^If the flags parameter is zero, the BLOB is opened for\n** read-only access.\n**\n** ^(On success, [SQLITE_OK] is returned and the new [BLOB handle] is stored\n** in *ppBlob. Otherwise an [error code] is returned and, unless the error\n** code is SQLITE_MISUSE, *ppBlob is set to NULL.)^ ^This means that, provided\n** the API is not misused, it is always safe to call [sqlite3_blob_close()] \n** on *ppBlob after this function it returns.\n**\n** This function fails with SQLITE_ERROR if any of the following are true:\n** <ul>\n**   <li> ^(Database zDb does not exist)^, \n**   <li> ^(Table zTable does not exist within database zDb)^, \n**   <li> ^(Table zTable is a WITHOUT ROWID table)^, \n**   <li> ^(Column zColumn does not exist)^,\n**   <li> ^(Row iRow is not present in the table)^,\n**   <li> ^(The specified column of row iRow contains a value that is not\n**         a TEXT or BLOB value)^,\n**   <li> ^(Column zColumn is part of an index, PRIMARY KEY or UNIQUE \n**         constraint and the blob is being opened for read/write access)^,\n**   <li> ^([foreign key constraints | Foreign key constraints] are enabled, \n**         column zColumn is part of a [child key] definition and the blob is\n**         being opened for read/write access)^.\n** </ul>\n**\n** ^Unless it returns SQLITE_MISUSE, this function sets the \n** [database connection] error code and message accessible via \n** [sqlite3_errcode()] and [sqlite3_errmsg()] and related functions. \n**\n** A BLOB referenced by sqlite3_blob_open() may be read using the\n** [sqlite3_blob_read()] interface and modified by using\n** [sqlite3_blob_write()].  The [BLOB handle] can be moved to a\n** different row of the same table using the [sqlite3_blob_reopen()]\n** interface.  However, the column, table, or database of a [BLOB handle]\n** cannot be changed after the [BLOB handle] is opened.\n**\n** ^(If the row that a BLOB handle points to is modified by an\n** [UPDATE], [DELETE], or by [ON CONFLICT] side-effects\n** then the BLOB handle is marked as \"expired\".\n** This is true if any column of the row is changed, even a column\n** other than the one the BLOB handle is open on.)^\n** ^Calls to [sqlite3_blob_read()] and [sqlite3_blob_write()] for\n** an expired BLOB handle fail with a return code of [SQLITE_ABORT].\n** ^(Changes written into a BLOB prior to the BLOB expiring are not\n** rolled back by the expiration of the BLOB.  Such changes will eventually\n** commit if the transaction continues to completion.)^\n**\n** ^Use the [sqlite3_blob_bytes()] interface to determine the size of\n** the opened blob.  ^The size of a blob may not be changed by this\n** interface.  Use the [UPDATE] SQL command to change the size of a\n** blob.\n**\n** ^The [sqlite3_bind_zeroblob()] and [sqlite3_result_zeroblob()] interfaces\n** and the built-in [zeroblob] SQL function may be used to create a \n** zero-filled blob to read or write using the incremental-blob interface.\n**\n** To avoid a resource leak, every open [BLOB handle] should eventually\n** be released by a call to [sqlite3_blob_close()].\n**\n** See also: [sqlite3_blob_close()],\n** [sqlite3_blob_reopen()], [sqlite3_blob_read()],\n** [sqlite3_blob_bytes()], [sqlite3_blob_write()].\n*/\nSQLITE_API int sqlite3_blob_open(\n  sqlite3*,\n  const char *zDb,\n  const char *zTable,\n  const char *zColumn,\n  sqlite3_int64 iRow,\n  int flags,\n  sqlite3_blob **ppBlob\n);\n\n/*\n** CAPI3REF: Move a BLOB Handle to a New Row\n** METHOD: sqlite3_blob\n**\n** ^This function is used to move an existing [BLOB handle] so that it points\n** to a different row of the same database table. ^The new row is identified\n** by the rowid value passed as the second argument. Only the row can be\n** changed. ^The database, table and column on which the blob handle is open\n** remain the same. Moving an existing [BLOB handle] to a new row is\n** faster than closing the existing handle and opening a new one.\n**\n** ^(The new row must meet the same criteria as for [sqlite3_blob_open()] -\n** it must exist and there must be either a blob or text value stored in\n** the nominated column.)^ ^If the new row is not present in the table, or if\n** it does not contain a blob or text value, or if another error occurs, an\n** SQLite error code is returned and the blob handle is considered aborted.\n** ^All subsequent calls to [sqlite3_blob_read()], [sqlite3_blob_write()] or\n** [sqlite3_blob_reopen()] on an aborted blob handle immediately return\n** SQLITE_ABORT. ^Calling [sqlite3_blob_bytes()] on an aborted blob handle\n** always returns zero.\n**\n** ^This function sets the database handle error code and message.\n*/\nSQLITE_API int sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64);\n\n/*\n** CAPI3REF: Close A BLOB Handle\n** DESTRUCTOR: sqlite3_blob\n**\n** ^This function closes an open [BLOB handle]. ^(The BLOB handle is closed\n** unconditionally.  Even if this routine returns an error code, the \n** handle is still closed.)^\n**\n** ^If the blob handle being closed was opened for read-write access, and if\n** the database is in auto-commit mode and there are no other open read-write\n** blob handles or active write statements, the current transaction is\n** committed. ^If an error occurs while committing the transaction, an error\n** code is returned and the transaction rolled back.\n**\n** Calling this function with an argument that is not a NULL pointer or an\n** open blob handle results in undefined behaviour. ^Calling this routine \n** with a null pointer (such as would be returned by a failed call to \n** [sqlite3_blob_open()]) is a harmless no-op. ^Otherwise, if this function\n** is passed a valid open blob handle, the values returned by the \n** sqlite3_errcode() and sqlite3_errmsg() functions are set before returning.\n*/\nSQLITE_API int sqlite3_blob_close(sqlite3_blob *);\n\n/*\n** CAPI3REF: Return The Size Of An Open BLOB\n** METHOD: sqlite3_blob\n**\n** ^Returns the size in bytes of the BLOB accessible via the \n** successfully opened [BLOB handle] in its only argument.  ^The\n** incremental blob I/O routines can only read or overwriting existing\n** blob content; they cannot change the size of a blob.\n**\n** This routine only works on a [BLOB handle] which has been created\n** by a prior successful call to [sqlite3_blob_open()] and which has not\n** been closed by [sqlite3_blob_close()].  Passing any other pointer in\n** to this routine results in undefined and probably undesirable behavior.\n*/\nSQLITE_API int sqlite3_blob_bytes(sqlite3_blob *);\n\n/*\n** CAPI3REF: Read Data From A BLOB Incrementally\n** METHOD: sqlite3_blob\n**\n** ^(This function is used to read data from an open [BLOB handle] into a\n** caller-supplied buffer. N bytes of data are copied into buffer Z\n** from the open BLOB, starting at offset iOffset.)^\n**\n** ^If offset iOffset is less than N bytes from the end of the BLOB,\n** [SQLITE_ERROR] is returned and no data is read.  ^If N or iOffset is\n** less than zero, [SQLITE_ERROR] is returned and no data is read.\n** ^The size of the blob (and hence the maximum value of N+iOffset)\n** can be determined using the [sqlite3_blob_bytes()] interface.\n**\n** ^An attempt to read from an expired [BLOB handle] fails with an\n** error code of [SQLITE_ABORT].\n**\n** ^(On success, sqlite3_blob_read() returns SQLITE_OK.\n** Otherwise, an [error code] or an [extended error code] is returned.)^\n**\n** This routine only works on a [BLOB handle] which has been created\n** by a prior successful call to [sqlite3_blob_open()] and which has not\n** been closed by [sqlite3_blob_close()].  Passing any other pointer in\n** to this routine results in undefined and probably undesirable behavior.\n**\n** See also: [sqlite3_blob_write()].\n*/\nSQLITE_API int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);\n\n/*\n** CAPI3REF: Write Data Into A BLOB Incrementally\n** METHOD: sqlite3_blob\n**\n** ^(This function is used to write data into an open [BLOB handle] from a\n** caller-supplied buffer. N bytes of data are copied from the buffer Z\n** into the open BLOB, starting at offset iOffset.)^\n**\n** ^(On success, sqlite3_blob_write() returns SQLITE_OK.\n** Otherwise, an  [error code] or an [extended error code] is returned.)^\n** ^Unless SQLITE_MISUSE is returned, this function sets the \n** [database connection] error code and message accessible via \n** [sqlite3_errcode()] and [sqlite3_errmsg()] and related functions. \n**\n** ^If the [BLOB handle] passed as the first argument was not opened for\n** writing (the flags parameter to [sqlite3_blob_open()] was zero),\n** this function returns [SQLITE_READONLY].\n**\n** This function may only modify the contents of the BLOB; it is\n** not possible to increase the size of a BLOB using this API.\n** ^If offset iOffset is less than N bytes from the end of the BLOB,\n** [SQLITE_ERROR] is returned and no data is written. The size of the \n** BLOB (and hence the maximum value of N+iOffset) can be determined \n** using the [sqlite3_blob_bytes()] interface. ^If N or iOffset are less \n** than zero [SQLITE_ERROR] is returned and no data is written.\n**\n** ^An attempt to write to an expired [BLOB handle] fails with an\n** error code of [SQLITE_ABORT].  ^Writes to the BLOB that occurred\n** before the [BLOB handle] expired are not rolled back by the\n** expiration of the handle, though of course those changes might\n** have been overwritten by the statement that expired the BLOB handle\n** or by other independent statements.\n**\n** This routine only works on a [BLOB handle] which has been created\n** by a prior successful call to [sqlite3_blob_open()] and which has not\n** been closed by [sqlite3_blob_close()].  Passing any other pointer in\n** to this routine results in undefined and probably undesirable behavior.\n**\n** See also: [sqlite3_blob_read()].\n*/\nSQLITE_API int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset);\n\n/*\n** CAPI3REF: Virtual File System Objects\n**\n** A virtual filesystem (VFS) is an [sqlite3_vfs] object\n** that SQLite uses to interact\n** with the underlying operating system.  Most SQLite builds come with a\n** single default VFS that is appropriate for the host computer.\n** New VFSes can be registered and existing VFSes can be unregistered.\n** The following interfaces are provided.\n**\n** ^The sqlite3_vfs_find() interface returns a pointer to a VFS given its name.\n** ^Names are case sensitive.\n** ^Names are zero-terminated UTF-8 strings.\n** ^If there is no match, a NULL pointer is returned.\n** ^If zVfsName is NULL then the default VFS is returned.\n**\n** ^New VFSes are registered with sqlite3_vfs_register().\n** ^Each new VFS becomes the default VFS if the makeDflt flag is set.\n** ^The same VFS can be registered multiple times without injury.\n** ^To make an existing VFS into the default VFS, register it again\n** with the makeDflt flag set.  If two different VFSes with the\n** same name are registered, the behavior is undefined.  If a\n** VFS is registered with a name that is NULL or an empty string,\n** then the behavior is undefined.\n**\n** ^Unregister a VFS with the sqlite3_vfs_unregister() interface.\n** ^(If the default VFS is unregistered, another VFS is chosen as\n** the default.  The choice for the new VFS is arbitrary.)^\n*/\nSQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName);\nSQLITE_API int sqlite3_vfs_register(sqlite3_vfs*, int makeDflt);\nSQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs*);\n\n/*\n** CAPI3REF: Mutexes\n**\n** The SQLite core uses these routines for thread\n** synchronization. Though they are intended for internal\n** use by SQLite, code that links against SQLite is\n** permitted to use any of these routines.\n**\n** The SQLite source code contains multiple implementations\n** of these mutex routines.  An appropriate implementation\n** is selected automatically at compile-time.  The following\n** implementations are available in the SQLite core:\n**\n** <ul>\n** <li>   SQLITE_MUTEX_PTHREADS\n** <li>   SQLITE_MUTEX_W32\n** <li>   SQLITE_MUTEX_NOOP\n** </ul>\n**\n** The SQLITE_MUTEX_NOOP implementation is a set of routines\n** that does no real locking and is appropriate for use in\n** a single-threaded application.  The SQLITE_MUTEX_PTHREADS and\n** SQLITE_MUTEX_W32 implementations are appropriate for use on Unix\n** and Windows.\n**\n** If SQLite is compiled with the SQLITE_MUTEX_APPDEF preprocessor\n** macro defined (with \"-DSQLITE_MUTEX_APPDEF=1\"), then no mutex\n** implementation is included with the library. In this case the\n** application must supply a custom mutex implementation using the\n** [SQLITE_CONFIG_MUTEX] option of the sqlite3_config() function\n** before calling sqlite3_initialize() or any other public sqlite3_\n** function that calls sqlite3_initialize().\n**\n** ^The sqlite3_mutex_alloc() routine allocates a new\n** mutex and returns a pointer to it. ^The sqlite3_mutex_alloc()\n** routine returns NULL if it is unable to allocate the requested\n** mutex.  The argument to sqlite3_mutex_alloc() must one of these\n** integer constants:\n**\n** <ul>\n** <li>  SQLITE_MUTEX_FAST\n** <li>  SQLITE_MUTEX_RECURSIVE\n** <li>  SQLITE_MUTEX_STATIC_MASTER\n** <li>  SQLITE_MUTEX_STATIC_MEM\n** <li>  SQLITE_MUTEX_STATIC_OPEN\n** <li>  SQLITE_MUTEX_STATIC_PRNG\n** <li>  SQLITE_MUTEX_STATIC_LRU\n** <li>  SQLITE_MUTEX_STATIC_PMEM\n** <li>  SQLITE_MUTEX_STATIC_APP1\n** <li>  SQLITE_MUTEX_STATIC_APP2\n** <li>  SQLITE_MUTEX_STATIC_APP3\n** <li>  SQLITE_MUTEX_STATIC_VFS1\n** <li>  SQLITE_MUTEX_STATIC_VFS2\n** <li>  SQLITE_MUTEX_STATIC_VFS3\n** </ul>\n**\n** ^The first two constants (SQLITE_MUTEX_FAST and SQLITE_MUTEX_RECURSIVE)\n** cause sqlite3_mutex_alloc() to create\n** a new mutex.  ^The new mutex is recursive when SQLITE_MUTEX_RECURSIVE\n** is used but not necessarily so when SQLITE_MUTEX_FAST is used.\n** The mutex implementation does not need to make a distinction\n** between SQLITE_MUTEX_RECURSIVE and SQLITE_MUTEX_FAST if it does\n** not want to.  SQLite will only request a recursive mutex in\n** cases where it really needs one.  If a faster non-recursive mutex\n** implementation is available on the host platform, the mutex subsystem\n** might return such a mutex in response to SQLITE_MUTEX_FAST.\n**\n** ^The other allowed parameters to sqlite3_mutex_alloc() (anything other\n** than SQLITE_MUTEX_FAST and SQLITE_MUTEX_RECURSIVE) each return\n** a pointer to a static preexisting mutex.  ^Nine static mutexes are\n** used by the current version of SQLite.  Future versions of SQLite\n** may add additional static mutexes.  Static mutexes are for internal\n** use by SQLite only.  Applications that use SQLite mutexes should\n** use only the dynamic mutexes returned by SQLITE_MUTEX_FAST or\n** SQLITE_MUTEX_RECURSIVE.\n**\n** ^Note that if one of the dynamic mutex parameters (SQLITE_MUTEX_FAST\n** or SQLITE_MUTEX_RECURSIVE) is used then sqlite3_mutex_alloc()\n** returns a different mutex on every call.  ^For the static\n** mutex types, the same mutex is returned on every call that has\n** the same type number.\n**\n** ^The sqlite3_mutex_free() routine deallocates a previously\n** allocated dynamic mutex.  Attempting to deallocate a static\n** mutex results in undefined behavior.\n**\n** ^The sqlite3_mutex_enter() and sqlite3_mutex_try() routines attempt\n** to enter a mutex.  ^If another thread is already within the mutex,\n** sqlite3_mutex_enter() will block and sqlite3_mutex_try() will return\n** SQLITE_BUSY.  ^The sqlite3_mutex_try() interface returns [SQLITE_OK]\n** upon successful entry.  ^(Mutexes created using\n** SQLITE_MUTEX_RECURSIVE can be entered multiple times by the same thread.\n** In such cases, the\n** mutex must be exited an equal number of times before another thread\n** can enter.)^  If the same thread tries to enter any mutex other\n** than an SQLITE_MUTEX_RECURSIVE more than once, the behavior is undefined.\n**\n** ^(Some systems (for example, Windows 95) do not support the operation\n** implemented by sqlite3_mutex_try().  On those systems, sqlite3_mutex_try()\n** will always return SQLITE_BUSY. The SQLite core only ever uses\n** sqlite3_mutex_try() as an optimization so this is acceptable \n** behavior.)^\n**\n** ^The sqlite3_mutex_leave() routine exits a mutex that was\n** previously entered by the same thread.   The behavior\n** is undefined if the mutex is not currently entered by the\n** calling thread or is not currently allocated.\n**\n** ^If the argument to sqlite3_mutex_enter(), sqlite3_mutex_try(), or\n** sqlite3_mutex_leave() is a NULL pointer, then all three routines\n** behave as no-ops.\n**\n** See also: [sqlite3_mutex_held()] and [sqlite3_mutex_notheld()].\n*/\nSQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int);\nSQLITE_API void sqlite3_mutex_free(sqlite3_mutex*);\nSQLITE_API void sqlite3_mutex_enter(sqlite3_mutex*);\nSQLITE_API int sqlite3_mutex_try(sqlite3_mutex*);\nSQLITE_API void sqlite3_mutex_leave(sqlite3_mutex*);\n\n/*\n** CAPI3REF: Mutex Methods Object\n**\n** An instance of this structure defines the low-level routines\n** used to allocate and use mutexes.\n**\n** Usually, the default mutex implementations provided by SQLite are\n** sufficient, however the application has the option of substituting a custom\n** implementation for specialized deployments or systems for which SQLite\n** does not provide a suitable implementation. In this case, the application\n** creates and populates an instance of this structure to pass\n** to sqlite3_config() along with the [SQLITE_CONFIG_MUTEX] option.\n** Additionally, an instance of this structure can be used as an\n** output variable when querying the system for the current mutex\n** implementation, using the [SQLITE_CONFIG_GETMUTEX] option.\n**\n** ^The xMutexInit method defined by this structure is invoked as\n** part of system initialization by the sqlite3_initialize() function.\n** ^The xMutexInit routine is called by SQLite exactly once for each\n** effective call to [sqlite3_initialize()].\n**\n** ^The xMutexEnd method defined by this structure is invoked as\n** part of system shutdown by the sqlite3_shutdown() function. The\n** implementation of this method is expected to release all outstanding\n** resources obtained by the mutex methods implementation, especially\n** those obtained by the xMutexInit method.  ^The xMutexEnd()\n** interface is invoked exactly once for each call to [sqlite3_shutdown()].\n**\n** ^(The remaining seven methods defined by this structure (xMutexAlloc,\n** xMutexFree, xMutexEnter, xMutexTry, xMutexLeave, xMutexHeld and\n** xMutexNotheld) implement the following interfaces (respectively):\n**\n** <ul>\n**   <li>  [sqlite3_mutex_alloc()] </li>\n**   <li>  [sqlite3_mutex_free()] </li>\n**   <li>  [sqlite3_mutex_enter()] </li>\n**   <li>  [sqlite3_mutex_try()] </li>\n**   <li>  [sqlite3_mutex_leave()] </li>\n**   <li>  [sqlite3_mutex_held()] </li>\n**   <li>  [sqlite3_mutex_notheld()] </li>\n** </ul>)^\n**\n** The only difference is that the public sqlite3_XXX functions enumerated\n** above silently ignore any invocations that pass a NULL pointer instead\n** of a valid mutex handle. The implementations of the methods defined\n** by this structure are not required to handle this case, the results\n** of passing a NULL pointer instead of a valid mutex handle are undefined\n** (i.e. it is acceptable to provide an implementation that segfaults if\n** it is passed a NULL pointer).\n**\n** The xMutexInit() method must be threadsafe.  It must be harmless to\n** invoke xMutexInit() multiple times within the same process and without\n** intervening calls to xMutexEnd().  Second and subsequent calls to\n** xMutexInit() must be no-ops.\n**\n** xMutexInit() must not use SQLite memory allocation ([sqlite3_malloc()]\n** and its associates).  Similarly, xMutexAlloc() must not use SQLite memory\n** allocation for a static mutex.  ^However xMutexAlloc() may use SQLite\n** memory allocation for a fast or recursive mutex.\n**\n** ^SQLite will invoke the xMutexEnd() method when [sqlite3_shutdown()] is\n** called, but only if the prior call to xMutexInit returned SQLITE_OK.\n** If xMutexInit fails in any way, it is expected to clean up after itself\n** prior to returning.\n*/\ntypedef struct sqlite3_mutex_methods sqlite3_mutex_methods;\nstruct sqlite3_mutex_methods {\n  int (*xMutexInit)(void);\n  int (*xMutexEnd)(void);\n  sqlite3_mutex *(*xMutexAlloc)(int);\n  void (*xMutexFree)(sqlite3_mutex *);\n  void (*xMutexEnter)(sqlite3_mutex *);\n  int (*xMutexTry)(sqlite3_mutex *);\n  void (*xMutexLeave)(sqlite3_mutex *);\n  int (*xMutexHeld)(sqlite3_mutex *);\n  int (*xMutexNotheld)(sqlite3_mutex *);\n};\n\n/*\n** CAPI3REF: Mutex Verification Routines\n**\n** The sqlite3_mutex_held() and sqlite3_mutex_notheld() routines\n** are intended for use inside assert() statements.  The SQLite core\n** never uses these routines except inside an assert() and applications\n** are advised to follow the lead of the core.  The SQLite core only\n** provides implementations for these routines when it is compiled\n** with the SQLITE_DEBUG flag.  External mutex implementations\n** are only required to provide these routines if SQLITE_DEBUG is\n** defined and if NDEBUG is not defined.\n**\n** These routines should return true if the mutex in their argument\n** is held or not held, respectively, by the calling thread.\n**\n** The implementation is not required to provide versions of these\n** routines that actually work. If the implementation does not provide working\n** versions of these routines, it should at least provide stubs that always\n** return true so that one does not get spurious assertion failures.\n**\n** If the argument to sqlite3_mutex_held() is a NULL pointer then\n** the routine should return 1.   This seems counter-intuitive since\n** clearly the mutex cannot be held if it does not exist.  But\n** the reason the mutex does not exist is because the build is not\n** using mutexes.  And we do not want the assert() containing the\n** call to sqlite3_mutex_held() to fail, so a non-zero return is\n** the appropriate thing to do.  The sqlite3_mutex_notheld()\n** interface should also return 1 when given a NULL pointer.\n*/\n#ifndef NDEBUG\nSQLITE_API int sqlite3_mutex_held(sqlite3_mutex*);\nSQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex*);\n#endif\n\n/*\n** CAPI3REF: Mutex Types\n**\n** The [sqlite3_mutex_alloc()] interface takes a single argument\n** which is one of these integer constants.\n**\n** The set of static mutexes may change from one SQLite release to the\n** next.  Applications that override the built-in mutex logic must be\n** prepared to accommodate additional static mutexes.\n*/\n#define SQLITE_MUTEX_FAST             0\n#define SQLITE_MUTEX_RECURSIVE        1\n#define SQLITE_MUTEX_STATIC_MASTER    2\n#define SQLITE_MUTEX_STATIC_MEM       3  /* sqlite3_malloc() */\n#define SQLITE_MUTEX_STATIC_MEM2      4  /* NOT USED */\n#define SQLITE_MUTEX_STATIC_OPEN      4  /* sqlite3BtreeOpen() */\n#define SQLITE_MUTEX_STATIC_PRNG      5  /* sqlite3_randomness() */\n#define SQLITE_MUTEX_STATIC_LRU       6  /* lru page list */\n#define SQLITE_MUTEX_STATIC_LRU2      7  /* NOT USED */\n#define SQLITE_MUTEX_STATIC_PMEM      7  /* sqlite3PageMalloc() */\n#define SQLITE_MUTEX_STATIC_APP1      8  /* For use by application */\n#define SQLITE_MUTEX_STATIC_APP2      9  /* For use by application */\n#define SQLITE_MUTEX_STATIC_APP3     10  /* For use by application */\n#define SQLITE_MUTEX_STATIC_VFS1     11  /* For use by built-in VFS */\n#define SQLITE_MUTEX_STATIC_VFS2     12  /* For use by extension VFS */\n#define SQLITE_MUTEX_STATIC_VFS3     13  /* For use by application VFS */\n\n/*\n** CAPI3REF: Retrieve the mutex for a database connection\n** METHOD: sqlite3\n**\n** ^This interface returns a pointer the [sqlite3_mutex] object that \n** serializes access to the [database connection] given in the argument\n** when the [threading mode] is Serialized.\n** ^If the [threading mode] is Single-thread or Multi-thread then this\n** routine returns a NULL pointer.\n*/\nSQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3*);\n\n/*\n** CAPI3REF: Low-Level Control Of Database Files\n** METHOD: sqlite3\n** KEYWORDS: {file control}\n**\n** ^The [sqlite3_file_control()] interface makes a direct call to the\n** xFileControl method for the [sqlite3_io_methods] object associated\n** with a particular database identified by the second argument. ^The\n** name of the database is \"main\" for the main database or \"temp\" for the\n** TEMP database, or the name that appears after the AS keyword for\n** databases that are added using the [ATTACH] SQL command.\n** ^A NULL pointer can be used in place of \"main\" to refer to the\n** main database file.\n** ^The third and fourth parameters to this routine\n** are passed directly through to the second and third parameters of\n** the xFileControl method.  ^The return value of the xFileControl\n** method becomes the return value of this routine.\n**\n** A few opcodes for [sqlite3_file_control()] are handled directly\n** by the SQLite core and never invoke the \n** sqlite3_io_methods.xFileControl method.\n** ^The [SQLITE_FCNTL_FILE_POINTER] value for the op parameter causes\n** a pointer to the underlying [sqlite3_file] object to be written into\n** the space pointed to by the 4th parameter.  The\n** [SQLITE_FCNTL_JOURNAL_POINTER] works similarly except that it returns\n** the [sqlite3_file] object associated with the journal file instead of\n** the main database.  The [SQLITE_FCNTL_VFS_POINTER] opcode returns\n** a pointer to the underlying [sqlite3_vfs] object for the file.\n** The [SQLITE_FCNTL_DATA_VERSION] returns the data version counter\n** from the pager.\n**\n** ^If the second parameter (zDbName) does not match the name of any\n** open database file, then SQLITE_ERROR is returned.  ^This error\n** code is not remembered and will not be recalled by [sqlite3_errcode()]\n** or [sqlite3_errmsg()].  The underlying xFileControl method might\n** also return SQLITE_ERROR.  There is no way to distinguish between\n** an incorrect zDbName and an SQLITE_ERROR return from the underlying\n** xFileControl method.\n**\n** See also: [file control opcodes]\n*/\nSQLITE_API int sqlite3_file_control(sqlite3*, const char *zDbName, int op, void*);\n\n/*\n** CAPI3REF: Testing Interface\n**\n** ^The sqlite3_test_control() interface is used to read out internal\n** state of SQLite and to inject faults into SQLite for testing\n** purposes.  ^The first parameter is an operation code that determines\n** the number, meaning, and operation of all subsequent parameters.\n**\n** This interface is not for use by applications.  It exists solely\n** for verifying the correct operation of the SQLite library.  Depending\n** on how the SQLite library is compiled, this interface might not exist.\n**\n** The details of the operation codes, their meanings, the parameters\n** they take, and what they do are all subject to change without notice.\n** Unlike most of the SQLite API, this function is not guaranteed to\n** operate consistently from one release to the next.\n*/\nSQLITE_API int sqlite3_test_control(int op, ...);\n\n/*\n** CAPI3REF: Testing Interface Operation Codes\n**\n** These constants are the valid operation code parameters used\n** as the first argument to [sqlite3_test_control()].\n**\n** These parameters and their meanings are subject to change\n** without notice.  These values are for testing purposes only.\n** Applications should not use any of these parameters or the\n** [sqlite3_test_control()] interface.\n*/\n#define SQLITE_TESTCTRL_FIRST                    5\n#define SQLITE_TESTCTRL_PRNG_SAVE                5\n#define SQLITE_TESTCTRL_PRNG_RESTORE             6\n#define SQLITE_TESTCTRL_PRNG_RESET               7\n#define SQLITE_TESTCTRL_BITVEC_TEST              8\n#define SQLITE_TESTCTRL_FAULT_INSTALL            9\n#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS     10\n#define SQLITE_TESTCTRL_PENDING_BYTE            11\n#define SQLITE_TESTCTRL_ASSERT                  12\n#define SQLITE_TESTCTRL_ALWAYS                  13\n#define SQLITE_TESTCTRL_RESERVE                 14\n#define SQLITE_TESTCTRL_OPTIMIZATIONS           15\n#define SQLITE_TESTCTRL_ISKEYWORD               16  /* NOT USED */\n#define SQLITE_TESTCTRL_SCRATCHMALLOC           17  /* NOT USED */\n#define SQLITE_TESTCTRL_INTERNAL_FUNCTIONS      17\n#define SQLITE_TESTCTRL_LOCALTIME_FAULT         18\n#define SQLITE_TESTCTRL_EXPLAIN_STMT            19  /* NOT USED */\n#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD    19\n#define SQLITE_TESTCTRL_NEVER_CORRUPT           20\n#define SQLITE_TESTCTRL_VDBE_COVERAGE           21\n#define SQLITE_TESTCTRL_BYTEORDER               22\n#define SQLITE_TESTCTRL_ISINIT                  23\n#define SQLITE_TESTCTRL_SORTER_MMAP             24\n#define SQLITE_TESTCTRL_IMPOSTER                25\n#define SQLITE_TESTCTRL_PARSER_COVERAGE         26\n#define SQLITE_TESTCTRL_LAST                    26  /* Largest TESTCTRL */\n\n/*\n** CAPI3REF: SQL Keyword Checking\n**\n** These routines provide access to the set of SQL language keywords \n** recognized by SQLite.  Applications can uses these routines to determine\n** whether or not a specific identifier needs to be escaped (for example,\n** by enclosing in double-quotes) so as not to confuse the parser.\n**\n** The sqlite3_keyword_count() interface returns the number of distinct\n** keywords understood by SQLite.\n**\n** The sqlite3_keyword_name(N,Z,L) interface finds the N-th keyword and\n** makes *Z point to that keyword expressed as UTF8 and writes the number\n** of bytes in the keyword into *L.  The string that *Z points to is not\n** zero-terminated.  The sqlite3_keyword_name(N,Z,L) routine returns\n** SQLITE_OK if N is within bounds and SQLITE_ERROR if not. If either Z\n** or L are NULL or invalid pointers then calls to\n** sqlite3_keyword_name(N,Z,L) result in undefined behavior.\n**\n** The sqlite3_keyword_check(Z,L) interface checks to see whether or not\n** the L-byte UTF8 identifier that Z points to is a keyword, returning non-zero\n** if it is and zero if not.\n**\n** The parser used by SQLite is forgiving.  It is often possible to use\n** a keyword as an identifier as long as such use does not result in a\n** parsing ambiguity.  For example, the statement\n** \"CREATE TABLE BEGIN(REPLACE,PRAGMA,END);\" is accepted by SQLite, and\n** creates a new table named \"BEGIN\" with three columns named\n** \"REPLACE\", \"PRAGMA\", and \"END\".  Nevertheless, best practice is to avoid\n** using keywords as identifiers.  Common techniques used to avoid keyword\n** name collisions include:\n** <ul>\n** <li> Put all identifier names inside double-quotes.  This is the official\n**      SQL way to escape identifier names.\n** <li> Put identifier names inside &#91;...&#93;.  This is not standard SQL,\n**      but it is what SQL Server does and so lots of programmers use this\n**      technique.\n** <li> Begin every identifier with the letter \"Z\" as no SQL keywords start\n**      with \"Z\".\n** <li> Include a digit somewhere in every identifier name.\n** </ul>\n**\n** Note that the number of keywords understood by SQLite can depend on\n** compile-time options.  For example, \"VACUUM\" is not a keyword if\n** SQLite is compiled with the [-DSQLITE_OMIT_VACUUM] option.  Also,\n** new keywords may be added to future releases of SQLite.\n*/\nSQLITE_API int sqlite3_keyword_count(void);\nSQLITE_API int sqlite3_keyword_name(int,const char**,int*);\nSQLITE_API int sqlite3_keyword_check(const char*,int);\n\n/*\n** CAPI3REF: Dynamic String Object\n** KEYWORDS: {dynamic string}\n**\n** An instance of the sqlite3_str object contains a dynamically-sized\n** string under construction.\n**\n** The lifecycle of an sqlite3_str object is as follows:\n** <ol>\n** <li> ^The sqlite3_str object is created using [sqlite3_str_new()].\n** <li> ^Text is appended to the sqlite3_str object using various\n** methods, such as [sqlite3_str_appendf()].\n** <li> ^The sqlite3_str object is destroyed and the string it created\n** is returned using the [sqlite3_str_finish()] interface.\n** </ol>\n*/\ntypedef struct sqlite3_str sqlite3_str;\n\n/*\n** CAPI3REF: Create A New Dynamic String Object\n** CONSTRUCTOR: sqlite3_str\n**\n** ^The [sqlite3_str_new(D)] interface allocates and initializes\n** a new [sqlite3_str] object.  To avoid memory leaks, the object returned by\n** [sqlite3_str_new()] must be freed by a subsequent call to \n** [sqlite3_str_finish(X)].\n**\n** ^The [sqlite3_str_new(D)] interface always returns a pointer to a\n** valid [sqlite3_str] object, though in the event of an out-of-memory\n** error the returned object might be a special singleton that will\n** silently reject new text, always return SQLITE_NOMEM from \n** [sqlite3_str_errcode()], always return 0 for \n** [sqlite3_str_length()], and always return NULL from\n** [sqlite3_str_finish(X)].  It is always safe to use the value\n** returned by [sqlite3_str_new(D)] as the sqlite3_str parameter\n** to any of the other [sqlite3_str] methods.\n**\n** The D parameter to [sqlite3_str_new(D)] may be NULL.  If the\n** D parameter in [sqlite3_str_new(D)] is not NULL, then the maximum\n** length of the string contained in the [sqlite3_str] object will be\n** the value set for [sqlite3_limit](D,[SQLITE_LIMIT_LENGTH]) instead\n** of [SQLITE_MAX_LENGTH].\n*/\nSQLITE_API sqlite3_str *sqlite3_str_new(sqlite3*);\n\n/*\n** CAPI3REF: Finalize A Dynamic String\n** DESTRUCTOR: sqlite3_str\n**\n** ^The [sqlite3_str_finish(X)] interface destroys the sqlite3_str object X\n** and returns a pointer to a memory buffer obtained from [sqlite3_malloc64()]\n** that contains the constructed string.  The calling application should\n** pass the returned value to [sqlite3_free()] to avoid a memory leak.\n** ^The [sqlite3_str_finish(X)] interface may return a NULL pointer if any\n** errors were encountered during construction of the string.  ^The\n** [sqlite3_str_finish(X)] interface will also return a NULL pointer if the\n** string in [sqlite3_str] object X is zero bytes long.\n*/\nSQLITE_API char *sqlite3_str_finish(sqlite3_str*);\n\n/*\n** CAPI3REF: Add Content To A Dynamic String\n** METHOD: sqlite3_str\n**\n** These interfaces add content to an sqlite3_str object previously obtained\n** from [sqlite3_str_new()].\n**\n** ^The [sqlite3_str_appendf(X,F,...)] and \n** [sqlite3_str_vappendf(X,F,V)] interfaces uses the [built-in printf]\n** functionality of SQLite to append formatted text onto the end of \n** [sqlite3_str] object X.\n**\n** ^The [sqlite3_str_append(X,S,N)] method appends exactly N bytes from string S\n** onto the end of the [sqlite3_str] object X.  N must be non-negative.\n** S must contain at least N non-zero bytes of content.  To append a\n** zero-terminated string in its entirety, use the [sqlite3_str_appendall()]\n** method instead.\n**\n** ^The [sqlite3_str_appendall(X,S)] method appends the complete content of\n** zero-terminated string S onto the end of [sqlite3_str] object X.\n**\n** ^The [sqlite3_str_appendchar(X,N,C)] method appends N copies of the\n** single-byte character C onto the end of [sqlite3_str] object X.\n** ^This method can be used, for example, to add whitespace indentation.\n**\n** ^The [sqlite3_str_reset(X)] method resets the string under construction\n** inside [sqlite3_str] object X back to zero bytes in length.  \n**\n** These methods do not return a result code.  ^If an error occurs, that fact\n** is recorded in the [sqlite3_str] object and can be recovered by a\n** subsequent call to [sqlite3_str_errcode(X)].\n*/\nSQLITE_API void sqlite3_str_appendf(sqlite3_str*, const char *zFormat, ...);\nSQLITE_API void sqlite3_str_vappendf(sqlite3_str*, const char *zFormat, va_list);\nSQLITE_API void sqlite3_str_append(sqlite3_str*, const char *zIn, int N);\nSQLITE_API void sqlite3_str_appendall(sqlite3_str*, const char *zIn);\nSQLITE_API void sqlite3_str_appendchar(sqlite3_str*, int N, char C);\nSQLITE_API void sqlite3_str_reset(sqlite3_str*);\n\n/*\n** CAPI3REF: Status Of A Dynamic String\n** METHOD: sqlite3_str\n**\n** These interfaces return the current status of an [sqlite3_str] object.\n**\n** ^If any prior errors have occurred while constructing the dynamic string\n** in sqlite3_str X, then the [sqlite3_str_errcode(X)] method will return\n** an appropriate error code.  ^The [sqlite3_str_errcode(X)] method returns\n** [SQLITE_NOMEM] following any out-of-memory error, or\n** [SQLITE_TOOBIG] if the size of the dynamic string exceeds\n** [SQLITE_MAX_LENGTH], or [SQLITE_OK] if there have been no errors.\n**\n** ^The [sqlite3_str_length(X)] method returns the current length, in bytes,\n** of the dynamic string under construction in [sqlite3_str] object X.\n** ^The length returned by [sqlite3_str_length(X)] does not include the\n** zero-termination byte.\n**\n** ^The [sqlite3_str_value(X)] method returns a pointer to the current\n** content of the dynamic string under construction in X.  The value\n** returned by [sqlite3_str_value(X)] is managed by the sqlite3_str object X\n** and might be freed or altered by any subsequent method on the same\n** [sqlite3_str] object.  Applications must not used the pointer returned\n** [sqlite3_str_value(X)] after any subsequent method call on the same\n** object.  ^Applications may change the content of the string returned\n** by [sqlite3_str_value(X)] as long as they do not write into any bytes\n** outside the range of 0 to [sqlite3_str_length(X)] and do not read or\n** write any byte after any subsequent sqlite3_str method call.\n*/\nSQLITE_API int sqlite3_str_errcode(sqlite3_str*);\nSQLITE_API int sqlite3_str_length(sqlite3_str*);\nSQLITE_API char *sqlite3_str_value(sqlite3_str*);\n\n/*\n** CAPI3REF: SQLite Runtime Status\n**\n** ^These interfaces are used to retrieve runtime status information\n** about the performance of SQLite, and optionally to reset various\n** highwater marks.  ^The first argument is an integer code for\n** the specific parameter to measure.  ^(Recognized integer codes\n** are of the form [status parameters | SQLITE_STATUS_...].)^\n** ^The current value of the parameter is returned into *pCurrent.\n** ^The highest recorded value is returned in *pHighwater.  ^If the\n** resetFlag is true, then the highest record value is reset after\n** *pHighwater is written.  ^(Some parameters do not record the highest\n** value.  For those parameters\n** nothing is written into *pHighwater and the resetFlag is ignored.)^\n** ^(Other parameters record only the highwater mark and not the current\n** value.  For these latter parameters nothing is written into *pCurrent.)^\n**\n** ^The sqlite3_status() and sqlite3_status64() routines return\n** SQLITE_OK on success and a non-zero [error code] on failure.\n**\n** If either the current value or the highwater mark is too large to\n** be represented by a 32-bit integer, then the values returned by\n** sqlite3_status() are undefined.\n**\n** See also: [sqlite3_db_status()]\n*/\nSQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag);\nSQLITE_API int sqlite3_status64(\n  int op,\n  sqlite3_int64 *pCurrent,\n  sqlite3_int64 *pHighwater,\n  int resetFlag\n);\n\n\n/*\n** CAPI3REF: Status Parameters\n** KEYWORDS: {status parameters}\n**\n** These integer constants designate various run-time status parameters\n** that can be returned by [sqlite3_status()].\n**\n** <dl>\n** [[SQLITE_STATUS_MEMORY_USED]] ^(<dt>SQLITE_STATUS_MEMORY_USED</dt>\n** <dd>This parameter is the current amount of memory checked out\n** using [sqlite3_malloc()], either directly or indirectly.  The\n** figure includes calls made to [sqlite3_malloc()] by the application\n** and internal memory usage by the SQLite library.  Auxiliary page-cache\n** memory controlled by [SQLITE_CONFIG_PAGECACHE] is not included in\n** this parameter.  The amount returned is the sum of the allocation\n** sizes as reported by the xSize method in [sqlite3_mem_methods].</dd>)^\n**\n** [[SQLITE_STATUS_MALLOC_SIZE]] ^(<dt>SQLITE_STATUS_MALLOC_SIZE</dt>\n** <dd>This parameter records the largest memory allocation request\n** handed to [sqlite3_malloc()] or [sqlite3_realloc()] (or their\n** internal equivalents).  Only the value returned in the\n** *pHighwater parameter to [sqlite3_status()] is of interest.  \n** The value written into the *pCurrent parameter is undefined.</dd>)^\n**\n** [[SQLITE_STATUS_MALLOC_COUNT]] ^(<dt>SQLITE_STATUS_MALLOC_COUNT</dt>\n** <dd>This parameter records the number of separate memory allocations\n** currently checked out.</dd>)^\n**\n** [[SQLITE_STATUS_PAGECACHE_USED]] ^(<dt>SQLITE_STATUS_PAGECACHE_USED</dt>\n** <dd>This parameter returns the number of pages used out of the\n** [pagecache memory allocator] that was configured using \n** [SQLITE_CONFIG_PAGECACHE].  The\n** value returned is in pages, not in bytes.</dd>)^\n**\n** [[SQLITE_STATUS_PAGECACHE_OVERFLOW]] \n** ^(<dt>SQLITE_STATUS_PAGECACHE_OVERFLOW</dt>\n** <dd>This parameter returns the number of bytes of page cache\n** allocation which could not be satisfied by the [SQLITE_CONFIG_PAGECACHE]\n** buffer and where forced to overflow to [sqlite3_malloc()].  The\n** returned value includes allocations that overflowed because they\n** where too large (they were larger than the \"sz\" parameter to\n** [SQLITE_CONFIG_PAGECACHE]) and allocations that overflowed because\n** no space was left in the page cache.</dd>)^\n**\n** [[SQLITE_STATUS_PAGECACHE_SIZE]] ^(<dt>SQLITE_STATUS_PAGECACHE_SIZE</dt>\n** <dd>This parameter records the largest memory allocation request\n** handed to [pagecache memory allocator].  Only the value returned in the\n** *pHighwater parameter to [sqlite3_status()] is of interest.  \n** The value written into the *pCurrent parameter is undefined.</dd>)^\n**\n** [[SQLITE_STATUS_SCRATCH_USED]] <dt>SQLITE_STATUS_SCRATCH_USED</dt>\n** <dd>No longer used.</dd>\n**\n** [[SQLITE_STATUS_SCRATCH_OVERFLOW]] ^(<dt>SQLITE_STATUS_SCRATCH_OVERFLOW</dt>\n** <dd>No longer used.</dd>\n**\n** [[SQLITE_STATUS_SCRATCH_SIZE]] <dt>SQLITE_STATUS_SCRATCH_SIZE</dt>\n** <dd>No longer used.</dd>\n**\n** [[SQLITE_STATUS_PARSER_STACK]] ^(<dt>SQLITE_STATUS_PARSER_STACK</dt>\n** <dd>The *pHighwater parameter records the deepest parser stack. \n** The *pCurrent value is undefined.  The *pHighwater value is only\n** meaningful if SQLite is compiled with [YYTRACKMAXSTACKDEPTH].</dd>)^\n** </dl>\n**\n** New status parameters may be added from time to time.\n*/\n#define SQLITE_STATUS_MEMORY_USED          0\n#define SQLITE_STATUS_PAGECACHE_USED       1\n#define SQLITE_STATUS_PAGECACHE_OVERFLOW   2\n#define SQLITE_STATUS_SCRATCH_USED         3  /* NOT USED */\n#define SQLITE_STATUS_SCRATCH_OVERFLOW     4  /* NOT USED */\n#define SQLITE_STATUS_MALLOC_SIZE          5\n#define SQLITE_STATUS_PARSER_STACK         6\n#define SQLITE_STATUS_PAGECACHE_SIZE       7\n#define SQLITE_STATUS_SCRATCH_SIZE         8  /* NOT USED */\n#define SQLITE_STATUS_MALLOC_COUNT         9\n\n/*\n** CAPI3REF: Database Connection Status\n** METHOD: sqlite3\n**\n** ^This interface is used to retrieve runtime status information \n** about a single [database connection].  ^The first argument is the\n** database connection object to be interrogated.  ^The second argument\n** is an integer constant, taken from the set of\n** [SQLITE_DBSTATUS options], that\n** determines the parameter to interrogate.  The set of \n** [SQLITE_DBSTATUS options] is likely\n** to grow in future releases of SQLite.\n**\n** ^The current value of the requested parameter is written into *pCur\n** and the highest instantaneous value is written into *pHiwtr.  ^If\n** the resetFlg is true, then the highest instantaneous value is\n** reset back down to the current value.\n**\n** ^The sqlite3_db_status() routine returns SQLITE_OK on success and a\n** non-zero [error code] on failure.\n**\n** See also: [sqlite3_status()] and [sqlite3_stmt_status()].\n*/\nSQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);\n\n/*\n** CAPI3REF: Status Parameters for database connections\n** KEYWORDS: {SQLITE_DBSTATUS options}\n**\n** These constants are the available integer \"verbs\" that can be passed as\n** the second argument to the [sqlite3_db_status()] interface.\n**\n** New verbs may be added in future releases of SQLite. Existing verbs\n** might be discontinued. Applications should check the return code from\n** [sqlite3_db_status()] to make sure that the call worked.\n** The [sqlite3_db_status()] interface will return a non-zero error code\n** if a discontinued or unsupported verb is invoked.\n**\n** <dl>\n** [[SQLITE_DBSTATUS_LOOKASIDE_USED]] ^(<dt>SQLITE_DBSTATUS_LOOKASIDE_USED</dt>\n** <dd>This parameter returns the number of lookaside memory slots currently\n** checked out.</dd>)^\n**\n** [[SQLITE_DBSTATUS_LOOKASIDE_HIT]] ^(<dt>SQLITE_DBSTATUS_LOOKASIDE_HIT</dt>\n** <dd>This parameter returns the number malloc attempts that were \n** satisfied using lookaside memory. Only the high-water value is meaningful;\n** the current value is always zero.)^\n**\n** [[SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE]]\n** ^(<dt>SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE</dt>\n** <dd>This parameter returns the number malloc attempts that might have\n** been satisfied using lookaside memory but failed due to the amount of\n** memory requested being larger than the lookaside slot size.\n** Only the high-water value is meaningful;\n** the current value is always zero.)^\n**\n** [[SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL]]\n** ^(<dt>SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL</dt>\n** <dd>This parameter returns the number malloc attempts that might have\n** been satisfied using lookaside memory but failed due to all lookaside\n** memory already being in use.\n** Only the high-water value is meaningful;\n** the current value is always zero.)^\n**\n** [[SQLITE_DBSTATUS_CACHE_USED]] ^(<dt>SQLITE_DBSTATUS_CACHE_USED</dt>\n** <dd>This parameter returns the approximate number of bytes of heap\n** memory used by all pager caches associated with the database connection.)^\n** ^The highwater mark associated with SQLITE_DBSTATUS_CACHE_USED is always 0.\n**\n** [[SQLITE_DBSTATUS_CACHE_USED_SHARED]] \n** ^(<dt>SQLITE_DBSTATUS_CACHE_USED_SHARED</dt>\n** <dd>This parameter is similar to DBSTATUS_CACHE_USED, except that if a\n** pager cache is shared between two or more connections the bytes of heap\n** memory used by that pager cache is divided evenly between the attached\n** connections.)^  In other words, if none of the pager caches associated\n** with the database connection are shared, this request returns the same\n** value as DBSTATUS_CACHE_USED. Or, if one or more or the pager caches are\n** shared, the value returned by this call will be smaller than that returned\n** by DBSTATUS_CACHE_USED. ^The highwater mark associated with\n** SQLITE_DBSTATUS_CACHE_USED_SHARED is always 0.\n**\n** [[SQLITE_DBSTATUS_SCHEMA_USED]] ^(<dt>SQLITE_DBSTATUS_SCHEMA_USED</dt>\n** <dd>This parameter returns the approximate number of bytes of heap\n** memory used to store the schema for all databases associated\n** with the connection - main, temp, and any [ATTACH]-ed databases.)^ \n** ^The full amount of memory used by the schemas is reported, even if the\n** schema memory is shared with other database connections due to\n** [shared cache mode] being enabled.\n** ^The highwater mark associated with SQLITE_DBSTATUS_SCHEMA_USED is always 0.\n**\n** [[SQLITE_DBSTATUS_STMT_USED]] ^(<dt>SQLITE_DBSTATUS_STMT_USED</dt>\n** <dd>This parameter returns the approximate number of bytes of heap\n** and lookaside memory used by all prepared statements associated with\n** the database connection.)^\n** ^The highwater mark associated with SQLITE_DBSTATUS_STMT_USED is always 0.\n** </dd>\n**\n** [[SQLITE_DBSTATUS_CACHE_HIT]] ^(<dt>SQLITE_DBSTATUS_CACHE_HIT</dt>\n** <dd>This parameter returns the number of pager cache hits that have\n** occurred.)^ ^The highwater mark associated with SQLITE_DBSTATUS_CACHE_HIT \n** is always 0.\n** </dd>\n**\n** [[SQLITE_DBSTATUS_CACHE_MISS]] ^(<dt>SQLITE_DBSTATUS_CACHE_MISS</dt>\n** <dd>This parameter returns the number of pager cache misses that have\n** occurred.)^ ^The highwater mark associated with SQLITE_DBSTATUS_CACHE_MISS \n** is always 0.\n** </dd>\n**\n** [[SQLITE_DBSTATUS_CACHE_WRITE]] ^(<dt>SQLITE_DBSTATUS_CACHE_WRITE</dt>\n** <dd>This parameter returns the number of dirty cache entries that have\n** been written to disk. Specifically, the number of pages written to the\n** wal file in wal mode databases, or the number of pages written to the\n** database file in rollback mode databases. Any pages written as part of\n** transaction rollback or database recovery operations are not included.\n** If an IO or other error occurs while writing a page to disk, the effect\n** on subsequent SQLITE_DBSTATUS_CACHE_WRITE requests is undefined.)^ ^The\n** highwater mark associated with SQLITE_DBSTATUS_CACHE_WRITE is always 0.\n** </dd>\n**\n** [[SQLITE_DBSTATUS_CACHE_SPILL]] ^(<dt>SQLITE_DBSTATUS_CACHE_SPILL</dt>\n** <dd>This parameter returns the number of dirty cache entries that have\n** been written to disk in the middle of a transaction due to the page\n** cache overflowing. Transactions are more efficient if they are written\n** to disk all at once. When pages spill mid-transaction, that introduces\n** additional overhead. This parameter can be used help identify\n** inefficiencies that can be resolve by increasing the cache size.\n** </dd>\n**\n** [[SQLITE_DBSTATUS_DEFERRED_FKS]] ^(<dt>SQLITE_DBSTATUS_DEFERRED_FKS</dt>\n** <dd>This parameter returns zero for the current value if and only if\n** all foreign key constraints (deferred or immediate) have been\n** resolved.)^  ^The highwater mark is always 0.\n** </dd>\n** </dl>\n*/\n#define SQLITE_DBSTATUS_LOOKASIDE_USED       0\n#define SQLITE_DBSTATUS_CACHE_USED           1\n#define SQLITE_DBSTATUS_SCHEMA_USED          2\n#define SQLITE_DBSTATUS_STMT_USED            3\n#define SQLITE_DBSTATUS_LOOKASIDE_HIT        4\n#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE  5\n#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL  6\n#define SQLITE_DBSTATUS_CACHE_HIT            7\n#define SQLITE_DBSTATUS_CACHE_MISS           8\n#define SQLITE_DBSTATUS_CACHE_WRITE          9\n#define SQLITE_DBSTATUS_DEFERRED_FKS        10\n#define SQLITE_DBSTATUS_CACHE_USED_SHARED   11\n#define SQLITE_DBSTATUS_CACHE_SPILL         12\n#define SQLITE_DBSTATUS_MAX                 12   /* Largest defined DBSTATUS */\n\n\n/*\n** CAPI3REF: Prepared Statement Status\n** METHOD: sqlite3_stmt\n**\n** ^(Each prepared statement maintains various\n** [SQLITE_STMTSTATUS counters] that measure the number\n** of times it has performed specific operations.)^  These counters can\n** be used to monitor the performance characteristics of the prepared\n** statements.  For example, if the number of table steps greatly exceeds\n** the number of table searches or result rows, that would tend to indicate\n** that the prepared statement is using a full table scan rather than\n** an index.  \n**\n** ^(This interface is used to retrieve and reset counter values from\n** a [prepared statement].  The first argument is the prepared statement\n** object to be interrogated.  The second argument\n** is an integer code for a specific [SQLITE_STMTSTATUS counter]\n** to be interrogated.)^\n** ^The current value of the requested counter is returned.\n** ^If the resetFlg is true, then the counter is reset to zero after this\n** interface call returns.\n**\n** See also: [sqlite3_status()] and [sqlite3_db_status()].\n*/\nSQLITE_API int sqlite3_stmt_status(sqlite3_stmt*, int op,int resetFlg);\n\n/*\n** CAPI3REF: Status Parameters for prepared statements\n** KEYWORDS: {SQLITE_STMTSTATUS counter} {SQLITE_STMTSTATUS counters}\n**\n** These preprocessor macros define integer codes that name counter\n** values associated with the [sqlite3_stmt_status()] interface.\n** The meanings of the various counters are as follows:\n**\n** <dl>\n** [[SQLITE_STMTSTATUS_FULLSCAN_STEP]] <dt>SQLITE_STMTSTATUS_FULLSCAN_STEP</dt>\n** <dd>^This is the number of times that SQLite has stepped forward in\n** a table as part of a full table scan.  Large numbers for this counter\n** may indicate opportunities for performance improvement through \n** careful use of indices.</dd>\n**\n** [[SQLITE_STMTSTATUS_SORT]] <dt>SQLITE_STMTSTATUS_SORT</dt>\n** <dd>^This is the number of sort operations that have occurred.\n** A non-zero value in this counter may indicate an opportunity to\n** improvement performance through careful use of indices.</dd>\n**\n** [[SQLITE_STMTSTATUS_AUTOINDEX]] <dt>SQLITE_STMTSTATUS_AUTOINDEX</dt>\n** <dd>^This is the number of rows inserted into transient indices that\n** were created automatically in order to help joins run faster.\n** A non-zero value in this counter may indicate an opportunity to\n** improvement performance by adding permanent indices that do not\n** need to be reinitialized each time the statement is run.</dd>\n**\n** [[SQLITE_STMTSTATUS_VM_STEP]] <dt>SQLITE_STMTSTATUS_VM_STEP</dt>\n** <dd>^This is the number of virtual machine operations executed\n** by the prepared statement if that number is less than or equal\n** to 2147483647.  The number of virtual machine operations can be \n** used as a proxy for the total work done by the prepared statement.\n** If the number of virtual machine operations exceeds 2147483647\n** then the value returned by this statement status code is undefined.\n**\n** [[SQLITE_STMTSTATUS_REPREPARE]] <dt>SQLITE_STMTSTATUS_REPREPARE</dt>\n** <dd>^This is the number of times that the prepare statement has been\n** automatically regenerated due to schema changes or change to \n** [bound parameters] that might affect the query plan.\n**\n** [[SQLITE_STMTSTATUS_RUN]] <dt>SQLITE_STMTSTATUS_RUN</dt>\n** <dd>^This is the number of times that the prepared statement has\n** been run.  A single \"run\" for the purposes of this counter is one\n** or more calls to [sqlite3_step()] followed by a call to [sqlite3_reset()].\n** The counter is incremented on the first [sqlite3_step()] call of each\n** cycle.\n**\n** [[SQLITE_STMTSTATUS_MEMUSED]] <dt>SQLITE_STMTSTATUS_MEMUSED</dt>\n** <dd>^This is the approximate number of bytes of heap memory\n** used to store the prepared statement.  ^This value is not actually\n** a counter, and so the resetFlg parameter to sqlite3_stmt_status()\n** is ignored when the opcode is SQLITE_STMTSTATUS_MEMUSED.\n** </dd>\n** </dl>\n*/\n#define SQLITE_STMTSTATUS_FULLSCAN_STEP     1\n#define SQLITE_STMTSTATUS_SORT              2\n#define SQLITE_STMTSTATUS_AUTOINDEX         3\n#define SQLITE_STMTSTATUS_VM_STEP           4\n#define SQLITE_STMTSTATUS_REPREPARE         5\n#define SQLITE_STMTSTATUS_RUN               6\n#define SQLITE_STMTSTATUS_MEMUSED           99\n\n/*\n** CAPI3REF: Custom Page Cache Object\n**\n** The sqlite3_pcache type is opaque.  It is implemented by\n** the pluggable module.  The SQLite core has no knowledge of\n** its size or internal structure and never deals with the\n** sqlite3_pcache object except by holding and passing pointers\n** to the object.\n**\n** See [sqlite3_pcache_methods2] for additional information.\n*/\ntypedef struct sqlite3_pcache sqlite3_pcache;\n\n/*\n** CAPI3REF: Custom Page Cache Object\n**\n** The sqlite3_pcache_page object represents a single page in the\n** page cache.  The page cache will allocate instances of this\n** object.  Various methods of the page cache use pointers to instances\n** of this object as parameters or as their return value.\n**\n** See [sqlite3_pcache_methods2] for additional information.\n*/\ntypedef struct sqlite3_pcache_page sqlite3_pcache_page;\nstruct sqlite3_pcache_page {\n  void *pBuf;        /* The content of the page */\n  void *pExtra;      /* Extra information associated with the page */\n};\n\n/*\n** CAPI3REF: Application Defined Page Cache.\n** KEYWORDS: {page cache}\n**\n** ^(The [sqlite3_config]([SQLITE_CONFIG_PCACHE2], ...) interface can\n** register an alternative page cache implementation by passing in an \n** instance of the sqlite3_pcache_methods2 structure.)^\n** In many applications, most of the heap memory allocated by \n** SQLite is used for the page cache.\n** By implementing a \n** custom page cache using this API, an application can better control\n** the amount of memory consumed by SQLite, the way in which \n** that memory is allocated and released, and the policies used to \n** determine exactly which parts of a database file are cached and for \n** how long.\n**\n** The alternative page cache mechanism is an\n** extreme measure that is only needed by the most demanding applications.\n** The built-in page cache is recommended for most uses.\n**\n** ^(The contents of the sqlite3_pcache_methods2 structure are copied to an\n** internal buffer by SQLite within the call to [sqlite3_config].  Hence\n** the application may discard the parameter after the call to\n** [sqlite3_config()] returns.)^\n**\n** [[the xInit() page cache method]]\n** ^(The xInit() method is called once for each effective \n** call to [sqlite3_initialize()])^\n** (usually only once during the lifetime of the process). ^(The xInit()\n** method is passed a copy of the sqlite3_pcache_methods2.pArg value.)^\n** The intent of the xInit() method is to set up global data structures \n** required by the custom page cache implementation. \n** ^(If the xInit() method is NULL, then the \n** built-in default page cache is used instead of the application defined\n** page cache.)^\n**\n** [[the xShutdown() page cache method]]\n** ^The xShutdown() method is called by [sqlite3_shutdown()].\n** It can be used to clean up \n** any outstanding resources before process shutdown, if required.\n** ^The xShutdown() method may be NULL.\n**\n** ^SQLite automatically serializes calls to the xInit method,\n** so the xInit method need not be threadsafe.  ^The\n** xShutdown method is only called from [sqlite3_shutdown()] so it does\n** not need to be threadsafe either.  All other methods must be threadsafe\n** in multithreaded applications.\n**\n** ^SQLite will never invoke xInit() more than once without an intervening\n** call to xShutdown().\n**\n** [[the xCreate() page cache methods]]\n** ^SQLite invokes the xCreate() method to construct a new cache instance.\n** SQLite will typically create one cache instance for each open database file,\n** though this is not guaranteed. ^The\n** first parameter, szPage, is the size in bytes of the pages that must\n** be allocated by the cache.  ^szPage will always a power of two.  ^The\n** second parameter szExtra is a number of bytes of extra storage \n** associated with each page cache entry.  ^The szExtra parameter will\n** a number less than 250.  SQLite will use the\n** extra szExtra bytes on each page to store metadata about the underlying\n** database page on disk.  The value passed into szExtra depends\n** on the SQLite version, the target platform, and how SQLite was compiled.\n** ^The third argument to xCreate(), bPurgeable, is true if the cache being\n** created will be used to cache database pages of a file stored on disk, or\n** false if it is used for an in-memory database. The cache implementation\n** does not have to do anything special based with the value of bPurgeable;\n** it is purely advisory.  ^On a cache where bPurgeable is false, SQLite will\n** never invoke xUnpin() except to deliberately delete a page.\n** ^In other words, calls to xUnpin() on a cache with bPurgeable set to\n** false will always have the \"discard\" flag set to true.  \n** ^Hence, a cache created with bPurgeable false will\n** never contain any unpinned pages.\n**\n** [[the xCachesize() page cache method]]\n** ^(The xCachesize() method may be called at any time by SQLite to set the\n** suggested maximum cache-size (number of pages stored by) the cache\n** instance passed as the first argument. This is the value configured using\n** the SQLite \"[PRAGMA cache_size]\" command.)^  As with the bPurgeable\n** parameter, the implementation is not required to do anything with this\n** value; it is advisory only.\n**\n** [[the xPagecount() page cache methods]]\n** The xPagecount() method must return the number of pages currently\n** stored in the cache, both pinned and unpinned.\n** \n** [[the xFetch() page cache methods]]\n** The xFetch() method locates a page in the cache and returns a pointer to \n** an sqlite3_pcache_page object associated with that page, or a NULL pointer.\n** The pBuf element of the returned sqlite3_pcache_page object will be a\n** pointer to a buffer of szPage bytes used to store the content of a \n** single database page.  The pExtra element of sqlite3_pcache_page will be\n** a pointer to the szExtra bytes of extra storage that SQLite has requested\n** for each entry in the page cache.\n**\n** The page to be fetched is determined by the key. ^The minimum key value\n** is 1.  After it has been retrieved using xFetch, the page is considered\n** to be \"pinned\".\n**\n** If the requested page is already in the page cache, then the page cache\n** implementation must return a pointer to the page buffer with its content\n** intact.  If the requested page is not already in the cache, then the\n** cache implementation should use the value of the createFlag\n** parameter to help it determined what action to take:\n**\n** <table border=1 width=85% align=center>\n** <tr><th> createFlag <th> Behavior when page is not already in cache\n** <tr><td> 0 <td> Do not allocate a new page.  Return NULL.\n** <tr><td> 1 <td> Allocate a new page if it easy and convenient to do so.\n**                 Otherwise return NULL.\n** <tr><td> 2 <td> Make every effort to allocate a new page.  Only return\n**                 NULL if allocating a new page is effectively impossible.\n** </table>\n**\n** ^(SQLite will normally invoke xFetch() with a createFlag of 0 or 1.  SQLite\n** will only use a createFlag of 2 after a prior call with a createFlag of 1\n** failed.)^  In between the to xFetch() calls, SQLite may\n** attempt to unpin one or more cache pages by spilling the content of\n** pinned pages to disk and synching the operating system disk cache.\n**\n** [[the xUnpin() page cache method]]\n** ^xUnpin() is called by SQLite with a pointer to a currently pinned page\n** as its second argument.  If the third parameter, discard, is non-zero,\n** then the page must be evicted from the cache.\n** ^If the discard parameter is\n** zero, then the page may be discarded or retained at the discretion of\n** page cache implementation. ^The page cache implementation\n** may choose to evict unpinned pages at any time.\n**\n** The cache must not perform any reference counting. A single \n** call to xUnpin() unpins the page regardless of the number of prior calls \n** to xFetch().\n**\n** [[the xRekey() page cache methods]]\n** The xRekey() method is used to change the key value associated with the\n** page passed as the second argument. If the cache\n** previously contains an entry associated with newKey, it must be\n** discarded. ^Any prior cache entry associated with newKey is guaranteed not\n** to be pinned.\n**\n** When SQLite calls the xTruncate() method, the cache must discard all\n** existing cache entries with page numbers (keys) greater than or equal\n** to the value of the iLimit parameter passed to xTruncate(). If any\n** of these pages are pinned, they are implicitly unpinned, meaning that\n** they can be safely discarded.\n**\n** [[the xDestroy() page cache method]]\n** ^The xDestroy() method is used to delete a cache allocated by xCreate().\n** All resources associated with the specified cache should be freed. ^After\n** calling the xDestroy() method, SQLite considers the [sqlite3_pcache*]\n** handle invalid, and will not use it with any other sqlite3_pcache_methods2\n** functions.\n**\n** [[the xShrink() page cache method]]\n** ^SQLite invokes the xShrink() method when it wants the page cache to\n** free up as much of heap memory as possible.  The page cache implementation\n** is not obligated to free any memory, but well-behaved implementations should\n** do their best.\n*/\ntypedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;\nstruct sqlite3_pcache_methods2 {\n  int iVersion;\n  void *pArg;\n  int (*xInit)(void*);\n  void (*xShutdown)(void*);\n  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);\n  void (*xCachesize)(sqlite3_pcache*, int nCachesize);\n  int (*xPagecount)(sqlite3_pcache*);\n  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);\n  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);\n  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, \n      unsigned oldKey, unsigned newKey);\n  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);\n  void (*xDestroy)(sqlite3_pcache*);\n  void (*xShrink)(sqlite3_pcache*);\n};\n\n/*\n** This is the obsolete pcache_methods object that has now been replaced\n** by sqlite3_pcache_methods2.  This object is not used by SQLite.  It is\n** retained in the header file for backwards compatibility only.\n*/\ntypedef struct sqlite3_pcache_methods sqlite3_pcache_methods;\nstruct sqlite3_pcache_methods {\n  void *pArg;\n  int (*xInit)(void*);\n  void (*xShutdown)(void*);\n  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);\n  void (*xCachesize)(sqlite3_pcache*, int nCachesize);\n  int (*xPagecount)(sqlite3_pcache*);\n  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);\n  void (*xUnpin)(sqlite3_pcache*, void*, int discard);\n  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);\n  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);\n  void (*xDestroy)(sqlite3_pcache*);\n};\n\n\n/*\n** CAPI3REF: Online Backup Object\n**\n** The sqlite3_backup object records state information about an ongoing\n** online backup operation.  ^The sqlite3_backup object is created by\n** a call to [sqlite3_backup_init()] and is destroyed by a call to\n** [sqlite3_backup_finish()].\n**\n** See Also: [Using the SQLite Online Backup API]\n*/\ntypedef struct sqlite3_backup sqlite3_backup;\n\n/*\n** CAPI3REF: Online Backup API.\n**\n** The backup API copies the content of one database into another.\n** It is useful either for creating backups of databases or\n** for copying in-memory databases to or from persistent files. \n**\n** See Also: [Using the SQLite Online Backup API]\n**\n** ^SQLite holds a write transaction open on the destination database file\n** for the duration of the backup operation.\n** ^The source database is read-locked only while it is being read;\n** it is not locked continuously for the entire backup operation.\n** ^Thus, the backup may be performed on a live source database without\n** preventing other database connections from\n** reading or writing to the source database while the backup is underway.\n** \n** ^(To perform a backup operation: \n**   <ol>\n**     <li><b>sqlite3_backup_init()</b> is called once to initialize the\n**         backup, \n**     <li><b>sqlite3_backup_step()</b> is called one or more times to transfer \n**         the data between the two databases, and finally\n**     <li><b>sqlite3_backup_finish()</b> is called to release all resources \n**         associated with the backup operation. \n**   </ol>)^\n** There should be exactly one call to sqlite3_backup_finish() for each\n** successful call to sqlite3_backup_init().\n**\n** [[sqlite3_backup_init()]] <b>sqlite3_backup_init()</b>\n**\n** ^The D and N arguments to sqlite3_backup_init(D,N,S,M) are the \n** [database connection] associated with the destination database \n** and the database name, respectively.\n** ^The database name is \"main\" for the main database, \"temp\" for the\n** temporary database, or the name specified after the AS keyword in\n** an [ATTACH] statement for an attached database.\n** ^The S and M arguments passed to \n** sqlite3_backup_init(D,N,S,M) identify the [database connection]\n** and database name of the source database, respectively.\n** ^The source and destination [database connections] (parameters S and D)\n** must be different or else sqlite3_backup_init(D,N,S,M) will fail with\n** an error.\n**\n** ^A call to sqlite3_backup_init() will fail, returning NULL, if \n** there is already a read or read-write transaction open on the \n** destination database.\n**\n** ^If an error occurs within sqlite3_backup_init(D,N,S,M), then NULL is\n** returned and an error code and error message are stored in the\n** destination [database connection] D.\n** ^The error code and message for the failed call to sqlite3_backup_init()\n** can be retrieved using the [sqlite3_errcode()], [sqlite3_errmsg()], and/or\n** [sqlite3_errmsg16()] functions.\n** ^A successful call to sqlite3_backup_init() returns a pointer to an\n** [sqlite3_backup] object.\n** ^The [sqlite3_backup] object may be used with the sqlite3_backup_step() and\n** sqlite3_backup_finish() functions to perform the specified backup \n** operation.\n**\n** [[sqlite3_backup_step()]] <b>sqlite3_backup_step()</b>\n**\n** ^Function sqlite3_backup_step(B,N) will copy up to N pages between \n** the source and destination databases specified by [sqlite3_backup] object B.\n** ^If N is negative, all remaining source pages are copied. \n** ^If sqlite3_backup_step(B,N) successfully copies N pages and there\n** are still more pages to be copied, then the function returns [SQLITE_OK].\n** ^If sqlite3_backup_step(B,N) successfully finishes copying all pages\n** from source to destination, then it returns [SQLITE_DONE].\n** ^If an error occurs while running sqlite3_backup_step(B,N),\n** then an [error code] is returned. ^As well as [SQLITE_OK] and\n** [SQLITE_DONE], a call to sqlite3_backup_step() may return [SQLITE_READONLY],\n** [SQLITE_NOMEM], [SQLITE_BUSY], [SQLITE_LOCKED], or an\n** [SQLITE_IOERR_ACCESS | SQLITE_IOERR_XXX] extended error code.\n**\n** ^(The sqlite3_backup_step() might return [SQLITE_READONLY] if\n** <ol>\n** <li> the destination database was opened read-only, or\n** <li> the destination database is using write-ahead-log journaling\n** and the destination and source page sizes differ, or\n** <li> the destination database is an in-memory database and the\n** destination and source page sizes differ.\n** </ol>)^\n**\n** ^If sqlite3_backup_step() cannot obtain a required file-system lock, then\n** the [sqlite3_busy_handler | busy-handler function]\n** is invoked (if one is specified). ^If the \n** busy-handler returns non-zero before the lock is available, then \n** [SQLITE_BUSY] is returned to the caller. ^In this case the call to\n** sqlite3_backup_step() can be retried later. ^If the source\n** [database connection]\n** is being used to write to the source database when sqlite3_backup_step()\n** is called, then [SQLITE_LOCKED] is returned immediately. ^Again, in this\n** case the call to sqlite3_backup_step() can be retried later on. ^(If\n** [SQLITE_IOERR_ACCESS | SQLITE_IOERR_XXX], [SQLITE_NOMEM], or\n** [SQLITE_READONLY] is returned, then \n** there is no point in retrying the call to sqlite3_backup_step(). These \n** errors are considered fatal.)^  The application must accept \n** that the backup operation has failed and pass the backup operation handle \n** to the sqlite3_backup_finish() to release associated resources.\n**\n** ^The first call to sqlite3_backup_step() obtains an exclusive lock\n** on the destination file. ^The exclusive lock is not released until either \n** sqlite3_backup_finish() is called or the backup operation is complete \n** and sqlite3_backup_step() returns [SQLITE_DONE].  ^Every call to\n** sqlite3_backup_step() obtains a [shared lock] on the source database that\n** lasts for the duration of the sqlite3_backup_step() call.\n** ^Because the source database is not locked between calls to\n** sqlite3_backup_step(), the source database may be modified mid-way\n** through the backup process.  ^If the source database is modified by an\n** external process or via a database connection other than the one being\n** used by the backup operation, then the backup will be automatically\n** restarted by the next call to sqlite3_backup_step(). ^If the source \n** database is modified by the using the same database connection as is used\n** by the backup operation, then the backup database is automatically\n** updated at the same time.\n**\n** [[sqlite3_backup_finish()]] <b>sqlite3_backup_finish()</b>\n**\n** When sqlite3_backup_step() has returned [SQLITE_DONE], or when the \n** application wishes to abandon the backup operation, the application\n** should destroy the [sqlite3_backup] by passing it to sqlite3_backup_finish().\n** ^The sqlite3_backup_finish() interfaces releases all\n** resources associated with the [sqlite3_backup] object. \n** ^If sqlite3_backup_step() has not yet returned [SQLITE_DONE], then any\n** active write-transaction on the destination database is rolled back.\n** The [sqlite3_backup] object is invalid\n** and may not be used following a call to sqlite3_backup_finish().\n**\n** ^The value returned by sqlite3_backup_finish is [SQLITE_OK] if no\n** sqlite3_backup_step() errors occurred, regardless or whether or not\n** sqlite3_backup_step() completed.\n** ^If an out-of-memory condition or IO error occurred during any prior\n** sqlite3_backup_step() call on the same [sqlite3_backup] object, then\n** sqlite3_backup_finish() returns the corresponding [error code].\n**\n** ^A return of [SQLITE_BUSY] or [SQLITE_LOCKED] from sqlite3_backup_step()\n** is not a permanent error and does not affect the return value of\n** sqlite3_backup_finish().\n**\n** [[sqlite3_backup_remaining()]] [[sqlite3_backup_pagecount()]]\n** <b>sqlite3_backup_remaining() and sqlite3_backup_pagecount()</b>\n**\n** ^The sqlite3_backup_remaining() routine returns the number of pages still\n** to be backed up at the conclusion of the most recent sqlite3_backup_step().\n** ^The sqlite3_backup_pagecount() routine returns the total number of pages\n** in the source database at the conclusion of the most recent\n** sqlite3_backup_step().\n** ^(The values returned by these functions are only updated by\n** sqlite3_backup_step(). If the source database is modified in a way that\n** changes the size of the source database or the number of pages remaining,\n** those changes are not reflected in the output of sqlite3_backup_pagecount()\n** and sqlite3_backup_remaining() until after the next\n** sqlite3_backup_step().)^\n**\n** <b>Concurrent Usage of Database Handles</b>\n**\n** ^The source [database connection] may be used by the application for other\n** purposes while a backup operation is underway or being initialized.\n** ^If SQLite is compiled and configured to support threadsafe database\n** connections, then the source database connection may be used concurrently\n** from within other threads.\n**\n** However, the application must guarantee that the destination \n** [database connection] is not passed to any other API (by any thread) after \n** sqlite3_backup_init() is called and before the corresponding call to\n** sqlite3_backup_finish().  SQLite does not currently check to see\n** if the application incorrectly accesses the destination [database connection]\n** and so no error code is reported, but the operations may malfunction\n** nevertheless.  Use of the destination database connection while a\n** backup is in progress might also also cause a mutex deadlock.\n**\n** If running in [shared cache mode], the application must\n** guarantee that the shared cache used by the destination database\n** is not accessed while the backup is running. In practice this means\n** that the application must guarantee that the disk file being \n** backed up to is not accessed by any connection within the process,\n** not just the specific connection that was passed to sqlite3_backup_init().\n**\n** The [sqlite3_backup] object itself is partially threadsafe. Multiple \n** threads may safely make multiple concurrent calls to sqlite3_backup_step().\n** However, the sqlite3_backup_remaining() and sqlite3_backup_pagecount()\n** APIs are not strictly speaking threadsafe. If they are invoked at the\n** same time as another thread is invoking sqlite3_backup_step() it is\n** possible that they return invalid values.\n*/\nSQLITE_API sqlite3_backup *sqlite3_backup_init(\n  sqlite3 *pDest,                        /* Destination database handle */\n  const char *zDestName,                 /* Destination database name */\n  sqlite3 *pSource,                      /* Source database handle */\n  const char *zSourceName                /* Source database name */\n);\nSQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage);\nSQLITE_API int sqlite3_backup_finish(sqlite3_backup *p);\nSQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p);\nSQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p);\n\n/*\n** CAPI3REF: Unlock Notification\n** METHOD: sqlite3\n**\n** ^When running in shared-cache mode, a database operation may fail with\n** an [SQLITE_LOCKED] error if the required locks on the shared-cache or\n** individual tables within the shared-cache cannot be obtained. See\n** [SQLite Shared-Cache Mode] for a description of shared-cache locking. \n** ^This API may be used to register a callback that SQLite will invoke \n** when the connection currently holding the required lock relinquishes it.\n** ^This API is only available if the library was compiled with the\n** [SQLITE_ENABLE_UNLOCK_NOTIFY] C-preprocessor symbol defined.\n**\n** See Also: [Using the SQLite Unlock Notification Feature].\n**\n** ^Shared-cache locks are released when a database connection concludes\n** its current transaction, either by committing it or rolling it back. \n**\n** ^When a connection (known as the blocked connection) fails to obtain a\n** shared-cache lock and SQLITE_LOCKED is returned to the caller, the\n** identity of the database connection (the blocking connection) that\n** has locked the required resource is stored internally. ^After an \n** application receives an SQLITE_LOCKED error, it may call the\n** sqlite3_unlock_notify() method with the blocked connection handle as \n** the first argument to register for a callback that will be invoked\n** when the blocking connections current transaction is concluded. ^The\n** callback is invoked from within the [sqlite3_step] or [sqlite3_close]\n** call that concludes the blocking connections transaction.\n**\n** ^(If sqlite3_unlock_notify() is called in a multi-threaded application,\n** there is a chance that the blocking connection will have already\n** concluded its transaction by the time sqlite3_unlock_notify() is invoked.\n** If this happens, then the specified callback is invoked immediately,\n** from within the call to sqlite3_unlock_notify().)^\n**\n** ^If the blocked connection is attempting to obtain a write-lock on a\n** shared-cache table, and more than one other connection currently holds\n** a read-lock on the same table, then SQLite arbitrarily selects one of \n** the other connections to use as the blocking connection.\n**\n** ^(There may be at most one unlock-notify callback registered by a \n** blocked connection. If sqlite3_unlock_notify() is called when the\n** blocked connection already has a registered unlock-notify callback,\n** then the new callback replaces the old.)^ ^If sqlite3_unlock_notify() is\n** called with a NULL pointer as its second argument, then any existing\n** unlock-notify callback is canceled. ^The blocked connections \n** unlock-notify callback may also be canceled by closing the blocked\n** connection using [sqlite3_close()].\n**\n** The unlock-notify callback is not reentrant. If an application invokes\n** any sqlite3_xxx API functions from within an unlock-notify callback, a\n** crash or deadlock may be the result.\n**\n** ^Unless deadlock is detected (see below), sqlite3_unlock_notify() always\n** returns SQLITE_OK.\n**\n** <b>Callback Invocation Details</b>\n**\n** When an unlock-notify callback is registered, the application provides a \n** single void* pointer that is passed to the callback when it is invoked.\n** However, the signature of the callback function allows SQLite to pass\n** it an array of void* context pointers. The first argument passed to\n** an unlock-notify callback is a pointer to an array of void* pointers,\n** and the second is the number of entries in the array.\n**\n** When a blocking connections transaction is concluded, there may be\n** more than one blocked connection that has registered for an unlock-notify\n** callback. ^If two or more such blocked connections have specified the\n** same callback function, then instead of invoking the callback function\n** multiple times, it is invoked once with the set of void* context pointers\n** specified by the blocked connections bundled together into an array.\n** This gives the application an opportunity to prioritize any actions \n** related to the set of unblocked database connections.\n**\n** <b>Deadlock Detection</b>\n**\n** Assuming that after registering for an unlock-notify callback a \n** database waits for the callback to be issued before taking any further\n** action (a reasonable assumption), then using this API may cause the\n** application to deadlock. For example, if connection X is waiting for\n** connection Y's transaction to be concluded, and similarly connection\n** Y is waiting on connection X's transaction, then neither connection\n** will proceed and the system may remain deadlocked indefinitely.\n**\n** To avoid this scenario, the sqlite3_unlock_notify() performs deadlock\n** detection. ^If a given call to sqlite3_unlock_notify() would put the\n** system in a deadlocked state, then SQLITE_LOCKED is returned and no\n** unlock-notify callback is registered. The system is said to be in\n** a deadlocked state if connection A has registered for an unlock-notify\n** callback on the conclusion of connection B's transaction, and connection\n** B has itself registered for an unlock-notify callback when connection\n** A's transaction is concluded. ^Indirect deadlock is also detected, so\n** the system is also considered to be deadlocked if connection B has\n** registered for an unlock-notify callback on the conclusion of connection\n** C's transaction, where connection C is waiting on connection A. ^Any\n** number of levels of indirection are allowed.\n**\n** <b>The \"DROP TABLE\" Exception</b>\n**\n** When a call to [sqlite3_step()] returns SQLITE_LOCKED, it is almost \n** always appropriate to call sqlite3_unlock_notify(). There is however,\n** one exception. When executing a \"DROP TABLE\" or \"DROP INDEX\" statement,\n** SQLite checks if there are any currently executing SELECT statements\n** that belong to the same connection. If there are, SQLITE_LOCKED is\n** returned. In this case there is no \"blocking connection\", so invoking\n** sqlite3_unlock_notify() results in the unlock-notify callback being\n** invoked immediately. If the application then re-attempts the \"DROP TABLE\"\n** or \"DROP INDEX\" query, an infinite loop might be the result.\n**\n** One way around this problem is to check the extended error code returned\n** by an sqlite3_step() call. ^(If there is a blocking connection, then the\n** extended error code is set to SQLITE_LOCKED_SHAREDCACHE. Otherwise, in\n** the special \"DROP TABLE/INDEX\" case, the extended error code is just \n** SQLITE_LOCKED.)^\n*/\nSQLITE_API int sqlite3_unlock_notify(\n  sqlite3 *pBlocked,                          /* Waiting connection */\n  void (*xNotify)(void **apArg, int nArg),    /* Callback function to invoke */\n  void *pNotifyArg                            /* Argument to pass to xNotify */\n);\n\n\n/*\n** CAPI3REF: String Comparison\n**\n** ^The [sqlite3_stricmp()] and [sqlite3_strnicmp()] APIs allow applications\n** and extensions to compare the contents of two buffers containing UTF-8\n** strings in a case-independent fashion, using the same definition of \"case\n** independence\" that SQLite uses internally when comparing identifiers.\n*/\nSQLITE_API int sqlite3_stricmp(const char *, const char *);\nSQLITE_API int sqlite3_strnicmp(const char *, const char *, int);\n\n/*\n** CAPI3REF: String Globbing\n*\n** ^The [sqlite3_strglob(P,X)] interface returns zero if and only if\n** string X matches the [GLOB] pattern P.\n** ^The definition of [GLOB] pattern matching used in\n** [sqlite3_strglob(P,X)] is the same as for the \"X GLOB P\" operator in the\n** SQL dialect understood by SQLite.  ^The [sqlite3_strglob(P,X)] function\n** is case sensitive.\n**\n** Note that this routine returns zero on a match and non-zero if the strings\n** do not match, the same as [sqlite3_stricmp()] and [sqlite3_strnicmp()].\n**\n** See also: [sqlite3_strlike()].\n*/\nSQLITE_API int sqlite3_strglob(const char *zGlob, const char *zStr);\n\n/*\n** CAPI3REF: String LIKE Matching\n*\n** ^The [sqlite3_strlike(P,X,E)] interface returns zero if and only if\n** string X matches the [LIKE] pattern P with escape character E.\n** ^The definition of [LIKE] pattern matching used in\n** [sqlite3_strlike(P,X,E)] is the same as for the \"X LIKE P ESCAPE E\"\n** operator in the SQL dialect understood by SQLite.  ^For \"X LIKE P\" without\n** the ESCAPE clause, set the E parameter of [sqlite3_strlike(P,X,E)] to 0.\n** ^As with the LIKE operator, the [sqlite3_strlike(P,X,E)] function is case\n** insensitive - equivalent upper and lower case ASCII characters match\n** one another.\n**\n** ^The [sqlite3_strlike(P,X,E)] function matches Unicode characters, though\n** only ASCII characters are case folded.\n**\n** Note that this routine returns zero on a match and non-zero if the strings\n** do not match, the same as [sqlite3_stricmp()] and [sqlite3_strnicmp()].\n**\n** See also: [sqlite3_strglob()].\n*/\nSQLITE_API int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc);\n\n/*\n** CAPI3REF: Error Logging Interface\n**\n** ^The [sqlite3_log()] interface writes a message into the [error log]\n** established by the [SQLITE_CONFIG_LOG] option to [sqlite3_config()].\n** ^If logging is enabled, the zFormat string and subsequent arguments are\n** used with [sqlite3_snprintf()] to generate the final output string.\n**\n** The sqlite3_log() interface is intended for use by extensions such as\n** virtual tables, collating functions, and SQL functions.  While there is\n** nothing to prevent an application from calling sqlite3_log(), doing so\n** is considered bad form.\n**\n** The zFormat string must not be NULL.\n**\n** To avoid deadlocks and other threading problems, the sqlite3_log() routine\n** will not use dynamically allocated memory.  The log message is stored in\n** a fixed-length buffer on the stack.  If the log message is longer than\n** a few hundred characters, it will be truncated to the length of the\n** buffer.\n*/\nSQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...);\n\n/*\n** CAPI3REF: Write-Ahead Log Commit Hook\n** METHOD: sqlite3\n**\n** ^The [sqlite3_wal_hook()] function is used to register a callback that\n** is invoked each time data is committed to a database in wal mode.\n**\n** ^(The callback is invoked by SQLite after the commit has taken place and \n** the associated write-lock on the database released)^, so the implementation \n** may read, write or [checkpoint] the database as required.\n**\n** ^The first parameter passed to the callback function when it is invoked\n** is a copy of the third parameter passed to sqlite3_wal_hook() when\n** registering the callback. ^The second is a copy of the database handle.\n** ^The third parameter is the name of the database that was written to -\n** either \"main\" or the name of an [ATTACH]-ed database. ^The fourth parameter\n** is the number of pages currently in the write-ahead log file,\n** including those that were just committed.\n**\n** The callback function should normally return [SQLITE_OK].  ^If an error\n** code is returned, that error will propagate back up through the\n** SQLite code base to cause the statement that provoked the callback\n** to report an error, though the commit will have still occurred. If the\n** callback returns [SQLITE_ROW] or [SQLITE_DONE], or if it returns a value\n** that does not correspond to any valid SQLite error code, the results\n** are undefined.\n**\n** A single database handle may have at most a single write-ahead log callback \n** registered at one time. ^Calling [sqlite3_wal_hook()] replaces any\n** previously registered write-ahead log callback. ^Note that the\n** [sqlite3_wal_autocheckpoint()] interface and the\n** [wal_autocheckpoint pragma] both invoke [sqlite3_wal_hook()] and will\n** overwrite any prior [sqlite3_wal_hook()] settings.\n*/\nSQLITE_API void *sqlite3_wal_hook(\n  sqlite3*, \n  int(*)(void *,sqlite3*,const char*,int),\n  void*\n);\n\n/*\n** CAPI3REF: Configure an auto-checkpoint\n** METHOD: sqlite3\n**\n** ^The [sqlite3_wal_autocheckpoint(D,N)] is a wrapper around\n** [sqlite3_wal_hook()] that causes any database on [database connection] D\n** to automatically [checkpoint]\n** after committing a transaction if there are N or\n** more frames in the [write-ahead log] file.  ^Passing zero or \n** a negative value as the nFrame parameter disables automatic\n** checkpoints entirely.\n**\n** ^The callback registered by this function replaces any existing callback\n** registered using [sqlite3_wal_hook()].  ^Likewise, registering a callback\n** using [sqlite3_wal_hook()] disables the automatic checkpoint mechanism\n** configured by this function.\n**\n** ^The [wal_autocheckpoint pragma] can be used to invoke this interface\n** from SQL.\n**\n** ^Checkpoints initiated by this mechanism are\n** [sqlite3_wal_checkpoint_v2|PASSIVE].\n**\n** ^Every new [database connection] defaults to having the auto-checkpoint\n** enabled with a threshold of 1000 or [SQLITE_DEFAULT_WAL_AUTOCHECKPOINT]\n** pages.  The use of this interface\n** is only necessary if the default setting is found to be suboptimal\n** for a particular application.\n*/\nSQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int N);\n\n/*\n** CAPI3REF: Checkpoint a database\n** METHOD: sqlite3\n**\n** ^(The sqlite3_wal_checkpoint(D,X) is equivalent to\n** [sqlite3_wal_checkpoint_v2](D,X,[SQLITE_CHECKPOINT_PASSIVE],0,0).)^\n**\n** In brief, sqlite3_wal_checkpoint(D,X) causes the content in the \n** [write-ahead log] for database X on [database connection] D to be\n** transferred into the database file and for the write-ahead log to\n** be reset.  See the [checkpointing] documentation for addition\n** information.\n**\n** This interface used to be the only way to cause a checkpoint to\n** occur.  But then the newer and more powerful [sqlite3_wal_checkpoint_v2()]\n** interface was added.  This interface is retained for backwards\n** compatibility and as a convenience for applications that need to manually\n** start a callback but which do not need the full power (and corresponding\n** complication) of [sqlite3_wal_checkpoint_v2()].\n*/\nSQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb);\n\n/*\n** CAPI3REF: Checkpoint a database\n** METHOD: sqlite3\n**\n** ^(The sqlite3_wal_checkpoint_v2(D,X,M,L,C) interface runs a checkpoint\n** operation on database X of [database connection] D in mode M.  Status\n** information is written back into integers pointed to by L and C.)^\n** ^(The M parameter must be a valid [checkpoint mode]:)^\n**\n** <dl>\n** <dt>SQLITE_CHECKPOINT_PASSIVE<dd>\n**   ^Checkpoint as many frames as possible without waiting for any database \n**   readers or writers to finish, then sync the database file if all frames \n**   in the log were checkpointed. ^The [busy-handler callback]\n**   is never invoked in the SQLITE_CHECKPOINT_PASSIVE mode.  \n**   ^On the other hand, passive mode might leave the checkpoint unfinished\n**   if there are concurrent readers or writers.\n**\n** <dt>SQLITE_CHECKPOINT_FULL<dd>\n**   ^This mode blocks (it invokes the\n**   [sqlite3_busy_handler|busy-handler callback]) until there is no\n**   database writer and all readers are reading from the most recent database\n**   snapshot. ^It then checkpoints all frames in the log file and syncs the\n**   database file. ^This mode blocks new database writers while it is pending,\n**   but new database readers are allowed to continue unimpeded.\n**\n** <dt>SQLITE_CHECKPOINT_RESTART<dd>\n**   ^This mode works the same way as SQLITE_CHECKPOINT_FULL with the addition\n**   that after checkpointing the log file it blocks (calls the \n**   [busy-handler callback])\n**   until all readers are reading from the database file only. ^This ensures \n**   that the next writer will restart the log file from the beginning.\n**   ^Like SQLITE_CHECKPOINT_FULL, this mode blocks new\n**   database writer attempts while it is pending, but does not impede readers.\n**\n** <dt>SQLITE_CHECKPOINT_TRUNCATE<dd>\n**   ^This mode works the same way as SQLITE_CHECKPOINT_RESTART with the\n**   addition that it also truncates the log file to zero bytes just prior\n**   to a successful return.\n** </dl>\n**\n** ^If pnLog is not NULL, then *pnLog is set to the total number of frames in\n** the log file or to -1 if the checkpoint could not run because\n** of an error or because the database is not in [WAL mode]. ^If pnCkpt is not\n** NULL,then *pnCkpt is set to the total number of checkpointed frames in the\n** log file (including any that were already checkpointed before the function\n** was called) or to -1 if the checkpoint could not run due to an error or\n** because the database is not in WAL mode. ^Note that upon successful\n** completion of an SQLITE_CHECKPOINT_TRUNCATE, the log file will have been\n** truncated to zero bytes and so both *pnLog and *pnCkpt will be set to zero.\n**\n** ^All calls obtain an exclusive \"checkpoint\" lock on the database file. ^If\n** any other process is running a checkpoint operation at the same time, the \n** lock cannot be obtained and SQLITE_BUSY is returned. ^Even if there is a \n** busy-handler configured, it will not be invoked in this case.\n**\n** ^The SQLITE_CHECKPOINT_FULL, RESTART and TRUNCATE modes also obtain the \n** exclusive \"writer\" lock on the database file. ^If the writer lock cannot be\n** obtained immediately, and a busy-handler is configured, it is invoked and\n** the writer lock retried until either the busy-handler returns 0 or the lock\n** is successfully obtained. ^The busy-handler is also invoked while waiting for\n** database readers as described above. ^If the busy-handler returns 0 before\n** the writer lock is obtained or while waiting for database readers, the\n** checkpoint operation proceeds from that point in the same way as \n** SQLITE_CHECKPOINT_PASSIVE - checkpointing as many frames as possible \n** without blocking any further. ^SQLITE_BUSY is returned in this case.\n**\n** ^If parameter zDb is NULL or points to a zero length string, then the\n** specified operation is attempted on all WAL databases [attached] to \n** [database connection] db.  In this case the\n** values written to output parameters *pnLog and *pnCkpt are undefined. ^If \n** an SQLITE_BUSY error is encountered when processing one or more of the \n** attached WAL databases, the operation is still attempted on any remaining \n** attached databases and SQLITE_BUSY is returned at the end. ^If any other \n** error occurs while processing an attached database, processing is abandoned \n** and the error code is returned to the caller immediately. ^If no error \n** (SQLITE_BUSY or otherwise) is encountered while processing the attached \n** databases, SQLITE_OK is returned.\n**\n** ^If database zDb is the name of an attached database that is not in WAL\n** mode, SQLITE_OK is returned and both *pnLog and *pnCkpt set to -1. ^If\n** zDb is not NULL (or a zero length string) and is not the name of any\n** attached database, SQLITE_ERROR is returned to the caller.\n**\n** ^Unless it returns SQLITE_MISUSE,\n** the sqlite3_wal_checkpoint_v2() interface\n** sets the error information that is queried by\n** [sqlite3_errcode()] and [sqlite3_errmsg()].\n**\n** ^The [PRAGMA wal_checkpoint] command can be used to invoke this interface\n** from SQL.\n*/\nSQLITE_API int sqlite3_wal_checkpoint_v2(\n  sqlite3 *db,                    /* Database handle */\n  const char *zDb,                /* Name of attached database (or NULL) */\n  int eMode,                      /* SQLITE_CHECKPOINT_* value */\n  int *pnLog,                     /* OUT: Size of WAL log in frames */\n  int *pnCkpt                     /* OUT: Total number of frames checkpointed */\n);\n\n/*\n** CAPI3REF: Checkpoint Mode Values\n** KEYWORDS: {checkpoint mode}\n**\n** These constants define all valid values for the \"checkpoint mode\" passed\n** as the third parameter to the [sqlite3_wal_checkpoint_v2()] interface.\n** See the [sqlite3_wal_checkpoint_v2()] documentation for details on the\n** meaning of each of these checkpoint modes.\n*/\n#define SQLITE_CHECKPOINT_PASSIVE  0  /* Do as much as possible w/o blocking */\n#define SQLITE_CHECKPOINT_FULL     1  /* Wait for writers, then checkpoint */\n#define SQLITE_CHECKPOINT_RESTART  2  /* Like FULL but wait for for readers */\n#define SQLITE_CHECKPOINT_TRUNCATE 3  /* Like RESTART but also truncate WAL */\n\n/*\n** CAPI3REF: Virtual Table Interface Configuration\n**\n** This function may be called by either the [xConnect] or [xCreate] method\n** of a [virtual table] implementation to configure\n** various facets of the virtual table interface.\n**\n** If this interface is invoked outside the context of an xConnect or\n** xCreate virtual table method then the behavior is undefined.\n**\n** At present, there is only one option that may be configured using\n** this function. (See [SQLITE_VTAB_CONSTRAINT_SUPPORT].)  Further options\n** may be added in the future.\n*/\nSQLITE_API int sqlite3_vtab_config(sqlite3*, int op, ...);\n\n/*\n** CAPI3REF: Virtual Table Configuration Options\n**\n** These macros define the various options to the\n** [sqlite3_vtab_config()] interface that [virtual table] implementations\n** can use to customize and optimize their behavior.\n**\n** <dl>\n** [[SQLITE_VTAB_CONSTRAINT_SUPPORT]]\n** <dt>SQLITE_VTAB_CONSTRAINT_SUPPORT\n** <dd>Calls of the form\n** [sqlite3_vtab_config](db,SQLITE_VTAB_CONSTRAINT_SUPPORT,X) are supported,\n** where X is an integer.  If X is zero, then the [virtual table] whose\n** [xCreate] or [xConnect] method invoked [sqlite3_vtab_config()] does not\n** support constraints.  In this configuration (which is the default) if\n** a call to the [xUpdate] method returns [SQLITE_CONSTRAINT], then the entire\n** statement is rolled back as if [ON CONFLICT | OR ABORT] had been\n** specified as part of the users SQL statement, regardless of the actual\n** ON CONFLICT mode specified.\n**\n** If X is non-zero, then the virtual table implementation guarantees\n** that if [xUpdate] returns [SQLITE_CONSTRAINT], it will do so before\n** any modifications to internal or persistent data structures have been made.\n** If the [ON CONFLICT] mode is ABORT, FAIL, IGNORE or ROLLBACK, SQLite \n** is able to roll back a statement or database transaction, and abandon\n** or continue processing the current SQL statement as appropriate. \n** If the ON CONFLICT mode is REPLACE and the [xUpdate] method returns\n** [SQLITE_CONSTRAINT], SQLite handles this as if the ON CONFLICT mode\n** had been ABORT.\n**\n** Virtual table implementations that are required to handle OR REPLACE\n** must do so within the [xUpdate] method. If a call to the \n** [sqlite3_vtab_on_conflict()] function indicates that the current ON \n** CONFLICT policy is REPLACE, the virtual table implementation should \n** silently replace the appropriate rows within the xUpdate callback and\n** return SQLITE_OK. Or, if this is not possible, it may return\n** SQLITE_CONSTRAINT, in which case SQLite falls back to OR ABORT \n** constraint handling.\n** </dl>\n*/\n#define SQLITE_VTAB_CONSTRAINT_SUPPORT 1\n\n/*\n** CAPI3REF: Determine The Virtual Table Conflict Policy\n**\n** This function may only be called from within a call to the [xUpdate] method\n** of a [virtual table] implementation for an INSERT or UPDATE operation. ^The\n** value returned is one of [SQLITE_ROLLBACK], [SQLITE_IGNORE], [SQLITE_FAIL],\n** [SQLITE_ABORT], or [SQLITE_REPLACE], according to the [ON CONFLICT] mode\n** of the SQL statement that triggered the call to the [xUpdate] method of the\n** [virtual table].\n*/\nSQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *);\n\n/*\n** CAPI3REF: Determine If Virtual Table Column Access Is For UPDATE\n**\n** If the sqlite3_vtab_nochange(X) routine is called within the [xColumn]\n** method of a [virtual table], then it returns true if and only if the\n** column is being fetched as part of an UPDATE operation during which the\n** column value will not change.  Applications might use this to substitute\n** a return value that is less expensive to compute and that the corresponding\n** [xUpdate] method understands as a \"no-change\" value.\n**\n** If the [xColumn] method calls sqlite3_vtab_nochange() and finds that\n** the column is not changed by the UPDATE statement, then the xColumn\n** method can optionally return without setting a result, without calling\n** any of the [sqlite3_result_int|sqlite3_result_xxxxx() interfaces].\n** In that case, [sqlite3_value_nochange(X)] will return true for the\n** same column in the [xUpdate] method.\n*/\nSQLITE_API int sqlite3_vtab_nochange(sqlite3_context*);\n\n/*\n** CAPI3REF: Determine The Collation For a Virtual Table Constraint\n**\n** This function may only be called from within a call to the [xBestIndex]\n** method of a [virtual table]. \n**\n** The first argument must be the sqlite3_index_info object that is the\n** first parameter to the xBestIndex() method. The second argument must be\n** an index into the aConstraint[] array belonging to the sqlite3_index_info\n** structure passed to xBestIndex. This function returns a pointer to a buffer \n** containing the name of the collation sequence for the corresponding\n** constraint.\n*/\nSQLITE_API SQLITE_EXPERIMENTAL const char *sqlite3_vtab_collation(sqlite3_index_info*,int);\n\n/*\n** CAPI3REF: Conflict resolution modes\n** KEYWORDS: {conflict resolution mode}\n**\n** These constants are returned by [sqlite3_vtab_on_conflict()] to\n** inform a [virtual table] implementation what the [ON CONFLICT] mode\n** is for the SQL statement being evaluated.\n**\n** Note that the [SQLITE_IGNORE] constant is also used as a potential\n** return value from the [sqlite3_set_authorizer()] callback and that\n** [SQLITE_ABORT] is also a [result code].\n*/\n#define SQLITE_ROLLBACK 1\n/* #define SQLITE_IGNORE 2 // Also used by sqlite3_authorizer() callback */\n#define SQLITE_FAIL     3\n/* #define SQLITE_ABORT 4  // Also an error code */\n#define SQLITE_REPLACE  5\n\n/*\n** CAPI3REF: Prepared Statement Scan Status Opcodes\n** KEYWORDS: {scanstatus options}\n**\n** The following constants can be used for the T parameter to the\n** [sqlite3_stmt_scanstatus(S,X,T,V)] interface.  Each constant designates a\n** different metric for sqlite3_stmt_scanstatus() to return.\n**\n** When the value returned to V is a string, space to hold that string is\n** managed by the prepared statement S and will be automatically freed when\n** S is finalized.\n**\n** <dl>\n** [[SQLITE_SCANSTAT_NLOOP]] <dt>SQLITE_SCANSTAT_NLOOP</dt>\n** <dd>^The [sqlite3_int64] variable pointed to by the T parameter will be\n** set to the total number of times that the X-th loop has run.</dd>\n**\n** [[SQLITE_SCANSTAT_NVISIT]] <dt>SQLITE_SCANSTAT_NVISIT</dt>\n** <dd>^The [sqlite3_int64] variable pointed to by the T parameter will be set\n** to the total number of rows examined by all iterations of the X-th loop.</dd>\n**\n** [[SQLITE_SCANSTAT_EST]] <dt>SQLITE_SCANSTAT_EST</dt>\n** <dd>^The \"double\" variable pointed to by the T parameter will be set to the\n** query planner's estimate for the average number of rows output from each\n** iteration of the X-th loop.  If the query planner's estimates was accurate,\n** then this value will approximate the quotient NVISIT/NLOOP and the\n** product of this value for all prior loops with the same SELECTID will\n** be the NLOOP value for the current loop.\n**\n** [[SQLITE_SCANSTAT_NAME]] <dt>SQLITE_SCANSTAT_NAME</dt>\n** <dd>^The \"const char *\" variable pointed to by the T parameter will be set\n** to a zero-terminated UTF-8 string containing the name of the index or table\n** used for the X-th loop.\n**\n** [[SQLITE_SCANSTAT_EXPLAIN]] <dt>SQLITE_SCANSTAT_EXPLAIN</dt>\n** <dd>^The \"const char *\" variable pointed to by the T parameter will be set\n** to a zero-terminated UTF-8 string containing the [EXPLAIN QUERY PLAN]\n** description for the X-th loop.\n**\n** [[SQLITE_SCANSTAT_SELECTID]] <dt>SQLITE_SCANSTAT_SELECT</dt>\n** <dd>^The \"int\" variable pointed to by the T parameter will be set to the\n** \"select-id\" for the X-th loop.  The select-id identifies which query or\n** subquery the loop is part of.  The main query has a select-id of zero.\n** The select-id is the same value as is output in the first column\n** of an [EXPLAIN QUERY PLAN] query.\n** </dl>\n*/\n#define SQLITE_SCANSTAT_NLOOP    0\n#define SQLITE_SCANSTAT_NVISIT   1\n#define SQLITE_SCANSTAT_EST      2\n#define SQLITE_SCANSTAT_NAME     3\n#define SQLITE_SCANSTAT_EXPLAIN  4\n#define SQLITE_SCANSTAT_SELECTID 5\n\n/*\n** CAPI3REF: Prepared Statement Scan Status\n** METHOD: sqlite3_stmt\n**\n** This interface returns information about the predicted and measured\n** performance for pStmt.  Advanced applications can use this\n** interface to compare the predicted and the measured performance and\n** issue warnings and/or rerun [ANALYZE] if discrepancies are found.\n**\n** Since this interface is expected to be rarely used, it is only\n** available if SQLite is compiled using the [SQLITE_ENABLE_STMT_SCANSTATUS]\n** compile-time option.\n**\n** The \"iScanStatusOp\" parameter determines which status information to return.\n** The \"iScanStatusOp\" must be one of the [scanstatus options] or the behavior\n** of this interface is undefined.\n** ^The requested measurement is written into a variable pointed to by\n** the \"pOut\" parameter.\n** Parameter \"idx\" identifies the specific loop to retrieve statistics for.\n** Loops are numbered starting from zero. ^If idx is out of range - less than\n** zero or greater than or equal to the total number of loops used to implement\n** the statement - a non-zero value is returned and the variable that pOut\n** points to is unchanged.\n**\n** ^Statistics might not be available for all loops in all statements. ^In cases\n** where there exist loops with no available statistics, this function behaves\n** as if the loop did not exist - it returns non-zero and leave the variable\n** that pOut points to unchanged.\n**\n** See also: [sqlite3_stmt_scanstatus_reset()]\n*/\nSQLITE_API int sqlite3_stmt_scanstatus(\n  sqlite3_stmt *pStmt,      /* Prepared statement for which info desired */\n  int idx,                  /* Index of loop to report on */\n  int iScanStatusOp,        /* Information desired.  SQLITE_SCANSTAT_* */\n  void *pOut                /* Result written here */\n);     \n\n/*\n** CAPI3REF: Zero Scan-Status Counters\n** METHOD: sqlite3_stmt\n**\n** ^Zero all [sqlite3_stmt_scanstatus()] related event counters.\n**\n** This API is only available if the library is built with pre-processor\n** symbol [SQLITE_ENABLE_STMT_SCANSTATUS] defined.\n*/\nSQLITE_API void sqlite3_stmt_scanstatus_reset(sqlite3_stmt*);\n\n/*\n** CAPI3REF: Flush caches to disk mid-transaction\n**\n** ^If a write-transaction is open on [database connection] D when the\n** [sqlite3_db_cacheflush(D)] interface invoked, any dirty\n** pages in the pager-cache that are not currently in use are written out \n** to disk. A dirty page may be in use if a database cursor created by an\n** active SQL statement is reading from it, or if it is page 1 of a database\n** file (page 1 is always \"in use\").  ^The [sqlite3_db_cacheflush(D)]\n** interface flushes caches for all schemas - \"main\", \"temp\", and\n** any [attached] databases.\n**\n** ^If this function needs to obtain extra database locks before dirty pages \n** can be flushed to disk, it does so. ^If those locks cannot be obtained \n** immediately and there is a busy-handler callback configured, it is invoked\n** in the usual manner. ^If the required lock still cannot be obtained, then\n** the database is skipped and an attempt made to flush any dirty pages\n** belonging to the next (if any) database. ^If any databases are skipped\n** because locks cannot be obtained, but no other error occurs, this\n** function returns SQLITE_BUSY.\n**\n** ^If any other error occurs while flushing dirty pages to disk (for\n** example an IO error or out-of-memory condition), then processing is\n** abandoned and an SQLite [error code] is returned to the caller immediately.\n**\n** ^Otherwise, if no error occurs, [sqlite3_db_cacheflush()] returns SQLITE_OK.\n**\n** ^This function does not set the database handle error code or message\n** returned by the [sqlite3_errcode()] and [sqlite3_errmsg()] functions.\n*/\nSQLITE_API int sqlite3_db_cacheflush(sqlite3*);\n\n/*\n** CAPI3REF: The pre-update hook.\n**\n** ^These interfaces are only available if SQLite is compiled using the\n** [SQLITE_ENABLE_PREUPDATE_HOOK] compile-time option.\n**\n** ^The [sqlite3_preupdate_hook()] interface registers a callback function\n** that is invoked prior to each [INSERT], [UPDATE], and [DELETE] operation\n** on a database table.\n** ^At most one preupdate hook may be registered at a time on a single\n** [database connection]; each call to [sqlite3_preupdate_hook()] overrides\n** the previous setting.\n** ^The preupdate hook is disabled by invoking [sqlite3_preupdate_hook()]\n** with a NULL pointer as the second parameter.\n** ^The third parameter to [sqlite3_preupdate_hook()] is passed through as\n** the first parameter to callbacks.\n**\n** ^The preupdate hook only fires for changes to real database tables; the\n** preupdate hook is not invoked for changes to [virtual tables] or to\n** system tables like sqlite_master or sqlite_stat1.\n**\n** ^The second parameter to the preupdate callback is a pointer to\n** the [database connection] that registered the preupdate hook.\n** ^The third parameter to the preupdate callback is one of the constants\n** [SQLITE_INSERT], [SQLITE_DELETE], or [SQLITE_UPDATE] to identify the\n** kind of update operation that is about to occur.\n** ^(The fourth parameter to the preupdate callback is the name of the\n** database within the database connection that is being modified.  This\n** will be \"main\" for the main database or \"temp\" for TEMP tables or \n** the name given after the AS keyword in the [ATTACH] statement for attached\n** databases.)^\n** ^The fifth parameter to the preupdate callback is the name of the\n** table that is being modified.\n**\n** For an UPDATE or DELETE operation on a [rowid table], the sixth\n** parameter passed to the preupdate callback is the initial [rowid] of the \n** row being modified or deleted. For an INSERT operation on a rowid table,\n** or any operation on a WITHOUT ROWID table, the value of the sixth \n** parameter is undefined. For an INSERT or UPDATE on a rowid table the\n** seventh parameter is the final rowid value of the row being inserted\n** or updated. The value of the seventh parameter passed to the callback\n** function is not defined for operations on WITHOUT ROWID tables, or for\n** INSERT operations on rowid tables.\n**\n** The [sqlite3_preupdate_old()], [sqlite3_preupdate_new()],\n** [sqlite3_preupdate_count()], and [sqlite3_preupdate_depth()] interfaces\n** provide additional information about a preupdate event. These routines\n** may only be called from within a preupdate callback.  Invoking any of\n** these routines from outside of a preupdate callback or with a\n** [database connection] pointer that is different from the one supplied\n** to the preupdate callback results in undefined and probably undesirable\n** behavior.\n**\n** ^The [sqlite3_preupdate_count(D)] interface returns the number of columns\n** in the row that is being inserted, updated, or deleted.\n**\n** ^The [sqlite3_preupdate_old(D,N,P)] interface writes into P a pointer to\n** a [protected sqlite3_value] that contains the value of the Nth column of\n** the table row before it is updated.  The N parameter must be between 0\n** and one less than the number of columns or the behavior will be\n** undefined. This must only be used within SQLITE_UPDATE and SQLITE_DELETE\n** preupdate callbacks; if it is used by an SQLITE_INSERT callback then the\n** behavior is undefined.  The [sqlite3_value] that P points to\n** will be destroyed when the preupdate callback returns.\n**\n** ^The [sqlite3_preupdate_new(D,N,P)] interface writes into P a pointer to\n** a [protected sqlite3_value] that contains the value of the Nth column of\n** the table row after it is updated.  The N parameter must be between 0\n** and one less than the number of columns or the behavior will be\n** undefined. This must only be used within SQLITE_INSERT and SQLITE_UPDATE\n** preupdate callbacks; if it is used by an SQLITE_DELETE callback then the\n** behavior is undefined.  The [sqlite3_value] that P points to\n** will be destroyed when the preupdate callback returns.\n**\n** ^The [sqlite3_preupdate_depth(D)] interface returns 0 if the preupdate\n** callback was invoked as a result of a direct insert, update, or delete\n** operation; or 1 for inserts, updates, or deletes invoked by top-level \n** triggers; or 2 for changes resulting from triggers called by top-level\n** triggers; and so forth.\n**\n** See also:  [sqlite3_update_hook()]\n*/\n#if defined(SQLITE_ENABLE_PREUPDATE_HOOK)\nSQLITE_API void *sqlite3_preupdate_hook(\n  sqlite3 *db,\n  void(*xPreUpdate)(\n    void *pCtx,                   /* Copy of third arg to preupdate_hook() */\n    sqlite3 *db,                  /* Database handle */\n    int op,                       /* SQLITE_UPDATE, DELETE or INSERT */\n    char const *zDb,              /* Database name */\n    char const *zName,            /* Table name */\n    sqlite3_int64 iKey1,          /* Rowid of row about to be deleted/updated */\n    sqlite3_int64 iKey2           /* New rowid value (for a rowid UPDATE) */\n  ),\n  void*\n);\nSQLITE_API int sqlite3_preupdate_old(sqlite3 *, int, sqlite3_value **);\nSQLITE_API int sqlite3_preupdate_count(sqlite3 *);\nSQLITE_API int sqlite3_preupdate_depth(sqlite3 *);\nSQLITE_API int sqlite3_preupdate_new(sqlite3 *, int, sqlite3_value **);\n#endif\n\n/*\n** CAPI3REF: Low-level system error code\n**\n** ^Attempt to return the underlying operating system error code or error\n** number that caused the most recent I/O error or failure to open a file.\n** The return value is OS-dependent.  For example, on unix systems, after\n** [sqlite3_open_v2()] returns [SQLITE_CANTOPEN], this interface could be\n** called to get back the underlying \"errno\" that caused the problem, such\n** as ENOSPC, EAUTH, EISDIR, and so forth.  \n*/\nSQLITE_API int sqlite3_system_errno(sqlite3*);\n\n/*\n** CAPI3REF: Database Snapshot\n** KEYWORDS: {snapshot} {sqlite3_snapshot}\n**\n** An instance of the snapshot object records the state of a [WAL mode]\n** database for some specific point in history.\n**\n** In [WAL mode], multiple [database connections] that are open on the\n** same database file can each be reading a different historical version\n** of the database file.  When a [database connection] begins a read\n** transaction, that connection sees an unchanging copy of the database\n** as it existed for the point in time when the transaction first started.\n** Subsequent changes to the database from other connections are not seen\n** by the reader until a new read transaction is started.\n**\n** The sqlite3_snapshot object records state information about an historical\n** version of the database file so that it is possible to later open a new read\n** transaction that sees that historical version of the database rather than\n** the most recent version.\n*/\ntypedef struct sqlite3_snapshot {\n  unsigned char hidden[48];\n} sqlite3_snapshot;\n\n/*\n** CAPI3REF: Record A Database Snapshot\n** CONSTRUCTOR: sqlite3_snapshot\n**\n** ^The [sqlite3_snapshot_get(D,S,P)] interface attempts to make a\n** new [sqlite3_snapshot] object that records the current state of\n** schema S in database connection D.  ^On success, the\n** [sqlite3_snapshot_get(D,S,P)] interface writes a pointer to the newly\n** created [sqlite3_snapshot] object into *P and returns SQLITE_OK.\n** If there is not already a read-transaction open on schema S when\n** this function is called, one is opened automatically. \n**\n** The following must be true for this function to succeed. If any of\n** the following statements are false when sqlite3_snapshot_get() is\n** called, SQLITE_ERROR is returned. The final value of *P is undefined\n** in this case. \n**\n** <ul>\n**   <li> The database handle must not be in [autocommit mode].\n**\n**   <li> Schema S of [database connection] D must be a [WAL mode] database.\n**\n**   <li> There must not be a write transaction open on schema S of database\n**        connection D.\n**\n**   <li> One or more transactions must have been written to the current wal\n**        file since it was created on disk (by any connection). This means\n**        that a snapshot cannot be taken on a wal mode database with no wal \n**        file immediately after it is first opened. At least one transaction\n**        must be written to it first.\n** </ul>\n**\n** This function may also return SQLITE_NOMEM.  If it is called with the\n** database handle in autocommit mode but fails for some other reason, \n** whether or not a read transaction is opened on schema S is undefined.\n**\n** The [sqlite3_snapshot] object returned from a successful call to\n** [sqlite3_snapshot_get()] must be freed using [sqlite3_snapshot_free()]\n** to avoid a memory leak.\n**\n** The [sqlite3_snapshot_get()] interface is only available when the\n** [SQLITE_ENABLE_SNAPSHOT] compile-time option is used.\n*/\nSQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_get(\n  sqlite3 *db,\n  const char *zSchema,\n  sqlite3_snapshot **ppSnapshot\n);\n\n/*\n** CAPI3REF: Start a read transaction on an historical snapshot\n** METHOD: sqlite3_snapshot\n**\n** ^The [sqlite3_snapshot_open(D,S,P)] interface either starts a new read \n** transaction or upgrades an existing one for schema S of \n** [database connection] D such that the read transaction refers to \n** historical [snapshot] P, rather than the most recent change to the \n** database. ^The [sqlite3_snapshot_open()] interface returns SQLITE_OK \n** on success or an appropriate [error code] if it fails.\n**\n** ^In order to succeed, the database connection must not be in \n** [autocommit mode] when [sqlite3_snapshot_open(D,S,P)] is called. If there\n** is already a read transaction open on schema S, then the database handle\n** must have no active statements (SELECT statements that have been passed\n** to sqlite3_step() but not sqlite3_reset() or sqlite3_finalize()). \n** SQLITE_ERROR is returned if either of these conditions is violated, or\n** if schema S does not exist, or if the snapshot object is invalid.\n**\n** ^A call to sqlite3_snapshot_open() will fail to open if the specified\n** snapshot has been overwritten by a [checkpoint]. In this case \n** SQLITE_ERROR_SNAPSHOT is returned.\n**\n** If there is already a read transaction open when this function is \n** invoked, then the same read transaction remains open (on the same\n** database snapshot) if SQLITE_ERROR, SQLITE_BUSY or SQLITE_ERROR_SNAPSHOT\n** is returned. If another error code - for example SQLITE_PROTOCOL or an\n** SQLITE_IOERR error code - is returned, then the final state of the\n** read transaction is undefined. If SQLITE_OK is returned, then the \n** read transaction is now open on database snapshot P.\n**\n** ^(A call to [sqlite3_snapshot_open(D,S,P)] will fail if the\n** database connection D does not know that the database file for\n** schema S is in [WAL mode].  A database connection might not know\n** that the database file is in [WAL mode] if there has been no prior\n** I/O on that database connection, or if the database entered [WAL mode] \n** after the most recent I/O on the database connection.)^\n** (Hint: Run \"[PRAGMA application_id]\" against a newly opened\n** database connection in order to make it ready to use snapshots.)\n**\n** The [sqlite3_snapshot_open()] interface is only available when the\n** [SQLITE_ENABLE_SNAPSHOT] compile-time option is used.\n*/\nSQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_open(\n  sqlite3 *db,\n  const char *zSchema,\n  sqlite3_snapshot *pSnapshot\n);\n\n/*\n** CAPI3REF: Destroy a snapshot\n** DESTRUCTOR: sqlite3_snapshot\n**\n** ^The [sqlite3_snapshot_free(P)] interface destroys [sqlite3_snapshot] P.\n** The application must eventually free every [sqlite3_snapshot] object\n** using this routine to avoid a memory leak.\n**\n** The [sqlite3_snapshot_free()] interface is only available when the\n** [SQLITE_ENABLE_SNAPSHOT] compile-time option is used.\n*/\nSQLITE_API SQLITE_EXPERIMENTAL void sqlite3_snapshot_free(sqlite3_snapshot*);\n\n/*\n** CAPI3REF: Compare the ages of two snapshot handles.\n** METHOD: sqlite3_snapshot\n**\n** The sqlite3_snapshot_cmp(P1, P2) interface is used to compare the ages\n** of two valid snapshot handles. \n**\n** If the two snapshot handles are not associated with the same database \n** file, the result of the comparison is undefined. \n**\n** Additionally, the result of the comparison is only valid if both of the\n** snapshot handles were obtained by calling sqlite3_snapshot_get() since the\n** last time the wal file was deleted. The wal file is deleted when the\n** database is changed back to rollback mode or when the number of database\n** clients drops to zero. If either snapshot handle was obtained before the \n** wal file was last deleted, the value returned by this function \n** is undefined.\n**\n** Otherwise, this API returns a negative value if P1 refers to an older\n** snapshot than P2, zero if the two handles refer to the same database\n** snapshot, and a positive value if P1 is a newer snapshot than P2.\n**\n** This interface is only available if SQLite is compiled with the\n** [SQLITE_ENABLE_SNAPSHOT] option.\n*/\nSQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_cmp(\n  sqlite3_snapshot *p1,\n  sqlite3_snapshot *p2\n);\n\n/*\n** CAPI3REF: Recover snapshots from a wal file\n** METHOD: sqlite3_snapshot\n**\n** If a [WAL file] remains on disk after all database connections close\n** (either through the use of the [SQLITE_FCNTL_PERSIST_WAL] [file control]\n** or because the last process to have the database opened exited without\n** calling [sqlite3_close()]) and a new connection is subsequently opened\n** on that database and [WAL file], the [sqlite3_snapshot_open()] interface\n** will only be able to open the last transaction added to the WAL file\n** even though the WAL file contains other valid transactions.\n**\n** This function attempts to scan the WAL file associated with database zDb\n** of database handle db and make all valid snapshots available to\n** sqlite3_snapshot_open(). It is an error if there is already a read\n** transaction open on the database, or if the database is not a WAL mode\n** database.\n**\n** SQLITE_OK is returned if successful, or an SQLite error code otherwise.\n**\n** This interface is only available if SQLite is compiled with the\n** [SQLITE_ENABLE_SNAPSHOT] option.\n*/\nSQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb);\n\n/*\n** CAPI3REF: Serialize a database\n**\n** The sqlite3_serialize(D,S,P,F) interface returns a pointer to memory\n** that is a serialization of the S database on [database connection] D.\n** If P is not a NULL pointer, then the size of the database in bytes\n** is written into *P.\n**\n** For an ordinary on-disk database file, the serialization is just a\n** copy of the disk file.  For an in-memory database or a \"TEMP\" database,\n** the serialization is the same sequence of bytes which would be written\n** to disk if that database where backed up to disk.\n**\n** The usual case is that sqlite3_serialize() copies the serialization of\n** the database into memory obtained from [sqlite3_malloc64()] and returns\n** a pointer to that memory.  The caller is responsible for freeing the\n** returned value to avoid a memory leak.  However, if the F argument\n** contains the SQLITE_SERIALIZE_NOCOPY bit, then no memory allocations\n** are made, and the sqlite3_serialize() function will return a pointer\n** to the contiguous memory representation of the database that SQLite\n** is currently using for that database, or NULL if the no such contiguous\n** memory representation of the database exists.  A contiguous memory\n** representation of the database will usually only exist if there has\n** been a prior call to [sqlite3_deserialize(D,S,...)] with the same\n** values of D and S.\n** The size of the database is written into *P even if the \n** SQLITE_SERIALIZE_NOCOPY bit is set but no contiguous copy\n** of the database exists.\n**\n** A call to sqlite3_serialize(D,S,P,F) might return NULL even if the\n** SQLITE_SERIALIZE_NOCOPY bit is omitted from argument F if a memory\n** allocation error occurs.\n**\n** This interface is only available if SQLite is compiled with the\n** [SQLITE_ENABLE_DESERIALIZE] option.\n*/\nSQLITE_API unsigned char *sqlite3_serialize(\n  sqlite3 *db,           /* The database connection */\n  const char *zSchema,   /* Which DB to serialize. ex: \"main\", \"temp\", ... */\n  sqlite3_int64 *piSize, /* Write size of the DB here, if not NULL */\n  unsigned int mFlags    /* Zero or more SQLITE_SERIALIZE_* flags */\n);\n\n/*\n** CAPI3REF: Flags for sqlite3_serialize\n**\n** Zero or more of the following constants can be OR-ed together for\n** the F argument to [sqlite3_serialize(D,S,P,F)].\n**\n** SQLITE_SERIALIZE_NOCOPY means that [sqlite3_serialize()] will return\n** a pointer to contiguous in-memory database that it is currently using,\n** without making a copy of the database.  If SQLite is not currently using\n** a contiguous in-memory database, then this option causes\n** [sqlite3_serialize()] to return a NULL pointer.  SQLite will only be\n** using a contiguous in-memory database if it has been initialized by a\n** prior call to [sqlite3_deserialize()].\n*/\n#define SQLITE_SERIALIZE_NOCOPY 0x001   /* Do no memory allocations */\n\n/*\n** CAPI3REF: Deserialize a database\n**\n** The sqlite3_deserialize(D,S,P,N,M,F) interface causes the \n** [database connection] D to disconnect from database S and then\n** reopen S as an in-memory database based on the serialization contained\n** in P.  The serialized database P is N bytes in size.  M is the size of\n** the buffer P, which might be larger than N.  If M is larger than N, and\n** the SQLITE_DESERIALIZE_READONLY bit is not set in F, then SQLite is\n** permitted to add content to the in-memory database as long as the total\n** size does not exceed M bytes.\n**\n** If the SQLITE_DESERIALIZE_FREEONCLOSE bit is set in F, then SQLite will\n** invoke sqlite3_free() on the serialization buffer when the database\n** connection closes.  If the SQLITE_DESERIALIZE_RESIZEABLE bit is set, then\n** SQLite will try to increase the buffer size using sqlite3_realloc64()\n** if writes on the database cause it to grow larger than M bytes.\n**\n** The sqlite3_deserialize() interface will fail with SQLITE_BUSY if the\n** database is currently in a read transaction or is involved in a backup\n** operation.\n**\n** If sqlite3_deserialize(D,S,P,N,M,F) fails for any reason and if the \n** SQLITE_DESERIALIZE_FREEONCLOSE bit is set in argument F, then\n** [sqlite3_free()] is invoked on argument P prior to returning.\n**\n** This interface is only available if SQLite is compiled with the\n** [SQLITE_ENABLE_DESERIALIZE] option.\n*/\nSQLITE_API int sqlite3_deserialize(\n  sqlite3 *db,            /* The database connection */\n  const char *zSchema,    /* Which DB to reopen with the deserialization */\n  unsigned char *pData,   /* The serialized database content */\n  sqlite3_int64 szDb,     /* Number bytes in the deserialization */\n  sqlite3_int64 szBuf,    /* Total size of buffer pData[] */\n  unsigned mFlags         /* Zero or more SQLITE_DESERIALIZE_* flags */\n);\n\n/*\n** CAPI3REF: Flags for sqlite3_deserialize()\n**\n** The following are allowed values for 6th argument (the F argument) to\n** the [sqlite3_deserialize(D,S,P,N,M,F)] interface.\n**\n** The SQLITE_DESERIALIZE_FREEONCLOSE means that the database serialization\n** in the P argument is held in memory obtained from [sqlite3_malloc64()]\n** and that SQLite should take ownership of this memory and automatically\n** free it when it has finished using it.  Without this flag, the caller\n** is responsible for freeing any dynamically allocated memory.\n**\n** The SQLITE_DESERIALIZE_RESIZEABLE flag means that SQLite is allowed to\n** grow the size of the database using calls to [sqlite3_realloc64()].  This\n** flag should only be used if SQLITE_DESERIALIZE_FREEONCLOSE is also used.\n** Without this flag, the deserialized database cannot increase in size beyond\n** the number of bytes specified by the M parameter.\n**\n** The SQLITE_DESERIALIZE_READONLY flag means that the deserialized database\n** should be treated as read-only.\n*/\n#define SQLITE_DESERIALIZE_FREEONCLOSE 1 /* Call sqlite3_free() on close */\n#define SQLITE_DESERIALIZE_RESIZEABLE  2 /* Resize using sqlite3_realloc64() */\n#define SQLITE_DESERIALIZE_READONLY    4 /* Database is read-only */\n\n/*\n** Undo the hack that converts floating point types to integer for\n** builds on processors without floating point support.\n*/\n#ifdef SQLITE_OMIT_FLOATING_POINT\n# undef double\n#endif\n\n#ifdef __cplusplus\n}  /* End of the 'extern \"C\"' block */\n#endif\n#endif /* SQLITE3_H */\n\n/******** Begin file sqlite3rtree.h *********/\n/*\n** 2010 August 30\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n*************************************************************************\n*/\n\n#ifndef _SQLITE3RTREE_H_\n#define _SQLITE3RTREE_H_\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ntypedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;\ntypedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;\n\n/* The double-precision datatype used by RTree depends on the\n** SQLITE_RTREE_INT_ONLY compile-time option.\n*/\n#ifdef SQLITE_RTREE_INT_ONLY\n  typedef sqlite3_int64 sqlite3_rtree_dbl;\n#else\n  typedef double sqlite3_rtree_dbl;\n#endif\n\n/*\n** Register a geometry callback named zGeom that can be used as part of an\n** R-Tree geometry query as follows:\n**\n**   SELECT ... FROM <rtree> WHERE <rtree col> MATCH $zGeom(... params ...)\n*/\nSQLITE_API int sqlite3_rtree_geometry_callback(\n  sqlite3 *db,\n  const char *zGeom,\n  int (*xGeom)(sqlite3_rtree_geometry*, int, sqlite3_rtree_dbl*,int*),\n  void *pContext\n);\n\n\n/*\n** A pointer to a structure of the following type is passed as the first\n** argument to callbacks registered using rtree_geometry_callback().\n*/\nstruct sqlite3_rtree_geometry {\n  void *pContext;                 /* Copy of pContext passed to s_r_g_c() */\n  int nParam;                     /* Size of array aParam[] */\n  sqlite3_rtree_dbl *aParam;      /* Parameters passed to SQL geom function */\n  void *pUser;                    /* Callback implementation user data */\n  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */\n};\n\n/*\n** Register a 2nd-generation geometry callback named zScore that can be \n** used as part of an R-Tree geometry query as follows:\n**\n**   SELECT ... FROM <rtree> WHERE <rtree col> MATCH $zQueryFunc(... params ...)\n*/\nSQLITE_API int sqlite3_rtree_query_callback(\n  sqlite3 *db,\n  const char *zQueryFunc,\n  int (*xQueryFunc)(sqlite3_rtree_query_info*),\n  void *pContext,\n  void (*xDestructor)(void*)\n);\n\n\n/*\n** A pointer to a structure of the following type is passed as the \n** argument to scored geometry callback registered using\n** sqlite3_rtree_query_callback().\n**\n** Note that the first 5 fields of this structure are identical to\n** sqlite3_rtree_geometry.  This structure is a subclass of\n** sqlite3_rtree_geometry.\n*/\nstruct sqlite3_rtree_query_info {\n  void *pContext;                   /* pContext from when function registered */\n  int nParam;                       /* Number of function parameters */\n  sqlite3_rtree_dbl *aParam;        /* value of function parameters */\n  void *pUser;                      /* callback can use this, if desired */\n  void (*xDelUser)(void*);          /* function to free pUser */\n  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check */\n  unsigned int *anQueue;            /* Number of pending entries in the queue */\n  int nCoord;                       /* Number of coordinates */\n  int iLevel;                       /* Level of current node or entry */\n  int mxLevel;                      /* The largest iLevel value in the tree */\n  sqlite3_int64 iRowid;             /* Rowid for current entry */\n  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */\n  int eParentWithin;                /* Visibility of parent node */\n  int eWithin;                      /* OUT: Visibility */\n  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */\n  /* The following fields are only available in 3.8.11 and later */\n  sqlite3_value **apSqlParam;       /* Original SQL values of parameters */\n};\n\n/*\n** Allowed values for sqlite3_rtree_query.eWithin and .eParentWithin.\n*/\n#define NOT_WITHIN       0   /* Object completely outside of query region */\n#define PARTLY_WITHIN    1   /* Object partially overlaps query region */\n#define FULLY_WITHIN     2   /* Object fully contained within query region */\n\n\n#ifdef __cplusplus\n}  /* end of the 'extern \"C\"' block */\n#endif\n\n#endif  /* ifndef _SQLITE3RTREE_H_ */\n\n/******** End of sqlite3rtree.h *********/\n/******** Begin file sqlite3session.h *********/\n\n#if !defined(__SQLITESESSION_H_) && defined(SQLITE_ENABLE_SESSION)\n#define __SQLITESESSION_H_ 1\n\n/*\n** Make sure we can call this stuff from C++.\n*/\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/*\n** CAPI3REF: Session Object Handle\n**\n** An instance of this object is a [session] that can be used to\n** record changes to a database.\n*/\ntypedef struct sqlite3_session sqlite3_session;\n\n/*\n** CAPI3REF: Changeset Iterator Handle\n**\n** An instance of this object acts as a cursor for iterating\n** over the elements of a [changeset] or [patchset].\n*/\ntypedef struct sqlite3_changeset_iter sqlite3_changeset_iter;\n\n/*\n** CAPI3REF: Create A New Session Object\n** CONSTRUCTOR: sqlite3_session\n**\n** Create a new session object attached to database handle db. If successful,\n** a pointer to the new object is written to *ppSession and SQLITE_OK is\n** returned. If an error occurs, *ppSession is set to NULL and an SQLite\n** error code (e.g. SQLITE_NOMEM) is returned.\n**\n** It is possible to create multiple session objects attached to a single\n** database handle.\n**\n** Session objects created using this function should be deleted using the\n** [sqlite3session_delete()] function before the database handle that they\n** are attached to is itself closed. If the database handle is closed before\n** the session object is deleted, then the results of calling any session\n** module function, including [sqlite3session_delete()] on the session object\n** are undefined.\n**\n** Because the session module uses the [sqlite3_preupdate_hook()] API, it\n** is not possible for an application to register a pre-update hook on a\n** database handle that has one or more session objects attached. Nor is\n** it possible to create a session object attached to a database handle for\n** which a pre-update hook is already defined. The results of attempting \n** either of these things are undefined.\n**\n** The session object will be used to create changesets for tables in\n** database zDb, where zDb is either \"main\", or \"temp\", or the name of an\n** attached database. It is not an error if database zDb is not attached\n** to the database when the session object is created.\n*/\nSQLITE_API int sqlite3session_create(\n  sqlite3 *db,                    /* Database handle */\n  const char *zDb,                /* Name of db (e.g. \"main\") */\n  sqlite3_session **ppSession     /* OUT: New session object */\n);\n\n/*\n** CAPI3REF: Delete A Session Object\n** DESTRUCTOR: sqlite3_session\n**\n** Delete a session object previously allocated using \n** [sqlite3session_create()]. Once a session object has been deleted, the\n** results of attempting to use pSession with any other session module\n** function are undefined.\n**\n** Session objects must be deleted before the database handle to which they\n** are attached is closed. Refer to the documentation for \n** [sqlite3session_create()] for details.\n*/\nSQLITE_API void sqlite3session_delete(sqlite3_session *pSession);\n\n\n/*\n** CAPI3REF: Enable Or Disable A Session Object\n** METHOD: sqlite3_session\n**\n** Enable or disable the recording of changes by a session object. When\n** enabled, a session object records changes made to the database. When\n** disabled - it does not. A newly created session object is enabled.\n** Refer to the documentation for [sqlite3session_changeset()] for further\n** details regarding how enabling and disabling a session object affects\n** the eventual changesets.\n**\n** Passing zero to this function disables the session. Passing a value\n** greater than zero enables it. Passing a value less than zero is a \n** no-op, and may be used to query the current state of the session.\n**\n** The return value indicates the final state of the session object: 0 if \n** the session is disabled, or 1 if it is enabled.\n*/\nSQLITE_API int sqlite3session_enable(sqlite3_session *pSession, int bEnable);\n\n/*\n** CAPI3REF: Set Or Clear the Indirect Change Flag\n** METHOD: sqlite3_session\n**\n** Each change recorded by a session object is marked as either direct or\n** indirect. A change is marked as indirect if either:\n**\n** <ul>\n**   <li> The session object \"indirect\" flag is set when the change is\n**        made, or\n**   <li> The change is made by an SQL trigger or foreign key action \n**        instead of directly as a result of a users SQL statement.\n** </ul>\n**\n** If a single row is affected by more than one operation within a session,\n** then the change is considered indirect if all operations meet the criteria\n** for an indirect change above, or direct otherwise.\n**\n** This function is used to set, clear or query the session object indirect\n** flag.  If the second argument passed to this function is zero, then the\n** indirect flag is cleared. If it is greater than zero, the indirect flag\n** is set. Passing a value less than zero does not modify the current value\n** of the indirect flag, and may be used to query the current state of the \n** indirect flag for the specified session object.\n**\n** The return value indicates the final state of the indirect flag: 0 if \n** it is clear, or 1 if it is set.\n*/\nSQLITE_API int sqlite3session_indirect(sqlite3_session *pSession, int bIndirect);\n\n/*\n** CAPI3REF: Attach A Table To A Session Object\n** METHOD: sqlite3_session\n**\n** If argument zTab is not NULL, then it is the name of a table to attach\n** to the session object passed as the first argument. All subsequent changes \n** made to the table while the session object is enabled will be recorded. See \n** documentation for [sqlite3session_changeset()] for further details.\n**\n** Or, if argument zTab is NULL, then changes are recorded for all tables\n** in the database. If additional tables are added to the database (by \n** executing \"CREATE TABLE\" statements) after this call is made, changes for \n** the new tables are also recorded.\n**\n** Changes can only be recorded for tables that have a PRIMARY KEY explicitly\n** defined as part of their CREATE TABLE statement. It does not matter if the \n** PRIMARY KEY is an \"INTEGER PRIMARY KEY\" (rowid alias) or not. The PRIMARY\n** KEY may consist of a single column, or may be a composite key.\n** \n** It is not an error if the named table does not exist in the database. Nor\n** is it an error if the named table does not have a PRIMARY KEY. However,\n** no changes will be recorded in either of these scenarios.\n**\n** Changes are not recorded for individual rows that have NULL values stored\n** in one or more of their PRIMARY KEY columns.\n**\n** SQLITE_OK is returned if the call completes without error. Or, if an error \n** occurs, an SQLite error code (e.g. SQLITE_NOMEM) is returned.\n**\n** <h3>Special sqlite_stat1 Handling</h3>\n**\n** As of SQLite version 3.22.0, the \"sqlite_stat1\" table is an exception to \n** some of the rules above. In SQLite, the schema of sqlite_stat1 is:\n**  <pre>\n**  &nbsp;     CREATE TABLE sqlite_stat1(tbl,idx,stat)  \n**  </pre>\n**\n** Even though sqlite_stat1 does not have a PRIMARY KEY, changes are \n** recorded for it as if the PRIMARY KEY is (tbl,idx). Additionally, changes \n** are recorded for rows for which (idx IS NULL) is true. However, for such\n** rows a zero-length blob (SQL value X'') is stored in the changeset or\n** patchset instead of a NULL value. This allows such changesets to be\n** manipulated by legacy implementations of sqlite3changeset_invert(),\n** concat() and similar.\n**\n** The sqlite3changeset_apply() function automatically converts the \n** zero-length blob back to a NULL value when updating the sqlite_stat1\n** table. However, if the application calls sqlite3changeset_new(),\n** sqlite3changeset_old() or sqlite3changeset_conflict on a changeset \n** iterator directly (including on a changeset iterator passed to a\n** conflict-handler callback) then the X'' value is returned. The application\n** must translate X'' to NULL itself if required.\n**\n** Legacy (older than 3.22.0) versions of the sessions module cannot capture\n** changes made to the sqlite_stat1 table. Legacy versions of the\n** sqlite3changeset_apply() function silently ignore any modifications to the\n** sqlite_stat1 table that are part of a changeset or patchset.\n*/\nSQLITE_API int sqlite3session_attach(\n  sqlite3_session *pSession,      /* Session object */\n  const char *zTab                /* Table name */\n);\n\n/*\n** CAPI3REF: Set a table filter on a Session Object.\n** METHOD: sqlite3_session\n**\n** The second argument (xFilter) is the \"filter callback\". For changes to rows \n** in tables that are not attached to the Session object, the filter is called\n** to determine whether changes to the table's rows should be tracked or not. \n** If xFilter returns 0, changes is not tracked. Note that once a table is \n** attached, xFilter will not be called again.\n*/\nSQLITE_API void sqlite3session_table_filter(\n  sqlite3_session *pSession,      /* Session object */\n  int(*xFilter)(\n    void *pCtx,                   /* Copy of third arg to _filter_table() */\n    const char *zTab              /* Table name */\n  ),\n  void *pCtx                      /* First argument passed to xFilter */\n);\n\n/*\n** CAPI3REF: Generate A Changeset From A Session Object\n** METHOD: sqlite3_session\n**\n** Obtain a changeset containing changes to the tables attached to the \n** session object passed as the first argument. If successful, \n** set *ppChangeset to point to a buffer containing the changeset \n** and *pnChangeset to the size of the changeset in bytes before returning\n** SQLITE_OK. If an error occurs, set both *ppChangeset and *pnChangeset to\n** zero and return an SQLite error code.\n**\n** A changeset consists of zero or more INSERT, UPDATE and/or DELETE changes,\n** each representing a change to a single row of an attached table. An INSERT\n** change contains the values of each field of a new database row. A DELETE\n** contains the original values of each field of a deleted database row. An\n** UPDATE change contains the original values of each field of an updated\n** database row along with the updated values for each updated non-primary-key\n** column. It is not possible for an UPDATE change to represent a change that\n** modifies the values of primary key columns. If such a change is made, it\n** is represented in a changeset as a DELETE followed by an INSERT.\n**\n** Changes are not recorded for rows that have NULL values stored in one or \n** more of their PRIMARY KEY columns. If such a row is inserted or deleted,\n** no corresponding change is present in the changesets returned by this\n** function. If an existing row with one or more NULL values stored in\n** PRIMARY KEY columns is updated so that all PRIMARY KEY columns are non-NULL,\n** only an INSERT is appears in the changeset. Similarly, if an existing row\n** with non-NULL PRIMARY KEY values is updated so that one or more of its\n** PRIMARY KEY columns are set to NULL, the resulting changeset contains a\n** DELETE change only.\n**\n** The contents of a changeset may be traversed using an iterator created\n** using the [sqlite3changeset_start()] API. A changeset may be applied to\n** a database with a compatible schema using the [sqlite3changeset_apply()]\n** API.\n**\n** Within a changeset generated by this function, all changes related to a\n** single table are grouped together. In other words, when iterating through\n** a changeset or when applying a changeset to a database, all changes related\n** to a single table are processed before moving on to the next table. Tables\n** are sorted in the same order in which they were attached (or auto-attached)\n** to the sqlite3_session object. The order in which the changes related to\n** a single table are stored is undefined.\n**\n** Following a successful call to this function, it is the responsibility of\n** the caller to eventually free the buffer that *ppChangeset points to using\n** [sqlite3_free()].\n**\n** <h3>Changeset Generation</h3>\n**\n** Once a table has been attached to a session object, the session object\n** records the primary key values of all new rows inserted into the table.\n** It also records the original primary key and other column values of any\n** deleted or updated rows. For each unique primary key value, data is only\n** recorded once - the first time a row with said primary key is inserted,\n** updated or deleted in the lifetime of the session.\n**\n** There is one exception to the previous paragraph: when a row is inserted,\n** updated or deleted, if one or more of its primary key columns contain a\n** NULL value, no record of the change is made.\n**\n** The session object therefore accumulates two types of records - those\n** that consist of primary key values only (created when the user inserts\n** a new record) and those that consist of the primary key values and the\n** original values of other table columns (created when the users deletes\n** or updates a record).\n**\n** When this function is called, the requested changeset is created using\n** both the accumulated records and the current contents of the database\n** file. Specifically:\n**\n** <ul>\n**   <li> For each record generated by an insert, the database is queried\n**        for a row with a matching primary key. If one is found, an INSERT\n**        change is added to the changeset. If no such row is found, no change \n**        is added to the changeset.\n**\n**   <li> For each record generated by an update or delete, the database is \n**        queried for a row with a matching primary key. If such a row is\n**        found and one or more of the non-primary key fields have been\n**        modified from their original values, an UPDATE change is added to \n**        the changeset. Or, if no such row is found in the table, a DELETE \n**        change is added to the changeset. If there is a row with a matching\n**        primary key in the database, but all fields contain their original\n**        values, no change is added to the changeset.\n** </ul>\n**\n** This means, amongst other things, that if a row is inserted and then later\n** deleted while a session object is active, neither the insert nor the delete\n** will be present in the changeset. Or if a row is deleted and then later a \n** row with the same primary key values inserted while a session object is\n** active, the resulting changeset will contain an UPDATE change instead of\n** a DELETE and an INSERT.\n**\n** When a session object is disabled (see the [sqlite3session_enable()] API),\n** it does not accumulate records when rows are inserted, updated or deleted.\n** This may appear to have some counter-intuitive effects if a single row\n** is written to more than once during a session. For example, if a row\n** is inserted while a session object is enabled, then later deleted while \n** the same session object is disabled, no INSERT record will appear in the\n** changeset, even though the delete took place while the session was disabled.\n** Or, if one field of a row is updated while a session is disabled, and \n** another field of the same row is updated while the session is enabled, the\n** resulting changeset will contain an UPDATE change that updates both fields.\n*/\nSQLITE_API int sqlite3session_changeset(\n  sqlite3_session *pSession,      /* Session object */\n  int *pnChangeset,               /* OUT: Size of buffer at *ppChangeset */\n  void **ppChangeset              /* OUT: Buffer containing changeset */\n);\n\n/*\n** CAPI3REF: Load The Difference Between Tables Into A Session\n** METHOD: sqlite3_session\n**\n** If it is not already attached to the session object passed as the first\n** argument, this function attaches table zTbl in the same manner as the\n** [sqlite3session_attach()] function. If zTbl does not exist, or if it\n** does not have a primary key, this function is a no-op (but does not return\n** an error).\n**\n** Argument zFromDb must be the name of a database (\"main\", \"temp\" etc.)\n** attached to the same database handle as the session object that contains \n** a table compatible with the table attached to the session by this function.\n** A table is considered compatible if it:\n**\n** <ul>\n**   <li> Has the same name,\n**   <li> Has the same set of columns declared in the same order, and\n**   <li> Has the same PRIMARY KEY definition.\n** </ul>\n**\n** If the tables are not compatible, SQLITE_SCHEMA is returned. If the tables\n** are compatible but do not have any PRIMARY KEY columns, it is not an error\n** but no changes are added to the session object. As with other session\n** APIs, tables without PRIMARY KEYs are simply ignored.\n**\n** This function adds a set of changes to the session object that could be\n** used to update the table in database zFrom (call this the \"from-table\") \n** so that its content is the same as the table attached to the session \n** object (call this the \"to-table\"). Specifically:\n**\n** <ul>\n**   <li> For each row (primary key) that exists in the to-table but not in \n**     the from-table, an INSERT record is added to the session object.\n**\n**   <li> For each row (primary key) that exists in the to-table but not in \n**     the from-table, a DELETE record is added to the session object.\n**\n**   <li> For each row (primary key) that exists in both tables, but features \n**     different non-PK values in each, an UPDATE record is added to the\n**     session.  \n** </ul>\n**\n** To clarify, if this function is called and then a changeset constructed\n** using [sqlite3session_changeset()], then after applying that changeset to \n** database zFrom the contents of the two compatible tables would be \n** identical.\n**\n** It an error if database zFrom does not exist or does not contain the\n** required compatible table.\n**\n** If the operation successful, SQLITE_OK is returned. Otherwise, an SQLite\n** error code. In this case, if argument pzErrMsg is not NULL, *pzErrMsg\n** may be set to point to a buffer containing an English language error \n** message. It is the responsibility of the caller to free this buffer using\n** sqlite3_free().\n*/\nSQLITE_API int sqlite3session_diff(\n  sqlite3_session *pSession,\n  const char *zFromDb,\n  const char *zTbl,\n  char **pzErrMsg\n);\n\n\n/*\n** CAPI3REF: Generate A Patchset From A Session Object\n** METHOD: sqlite3_session\n**\n** The differences between a patchset and a changeset are that:\n**\n** <ul>\n**   <li> DELETE records consist of the primary key fields only. The \n**        original values of other fields are omitted.\n**   <li> The original values of any modified fields are omitted from \n**        UPDATE records.\n** </ul>\n**\n** A patchset blob may be used with up to date versions of all \n** sqlite3changeset_xxx API functions except for sqlite3changeset_invert(), \n** which returns SQLITE_CORRUPT if it is passed a patchset. Similarly,\n** attempting to use a patchset blob with old versions of the\n** sqlite3changeset_xxx APIs also provokes an SQLITE_CORRUPT error. \n**\n** Because the non-primary key \"old.*\" fields are omitted, no \n** SQLITE_CHANGESET_DATA conflicts can be detected or reported if a patchset\n** is passed to the sqlite3changeset_apply() API. Other conflict types work\n** in the same way as for changesets.\n**\n** Changes within a patchset are ordered in the same way as for changesets\n** generated by the sqlite3session_changeset() function (i.e. all changes for\n** a single table are grouped together, tables appear in the order in which\n** they were attached to the session object).\n*/\nSQLITE_API int sqlite3session_patchset(\n  sqlite3_session *pSession,      /* Session object */\n  int *pnPatchset,                /* OUT: Size of buffer at *ppPatchset */\n  void **ppPatchset               /* OUT: Buffer containing patchset */\n);\n\n/*\n** CAPI3REF: Test if a changeset has recorded any changes.\n**\n** Return non-zero if no changes to attached tables have been recorded by \n** the session object passed as the first argument. Otherwise, if one or \n** more changes have been recorded, return zero.\n**\n** Even if this function returns zero, it is possible that calling\n** [sqlite3session_changeset()] on the session handle may still return a\n** changeset that contains no changes. This can happen when a row in \n** an attached table is modified and then later on the original values \n** are restored. However, if this function returns non-zero, then it is\n** guaranteed that a call to sqlite3session_changeset() will return a \n** changeset containing zero changes.\n*/\nSQLITE_API int sqlite3session_isempty(sqlite3_session *pSession);\n\n/*\n** CAPI3REF: Create An Iterator To Traverse A Changeset \n** CONSTRUCTOR: sqlite3_changeset_iter\n**\n** Create an iterator used to iterate through the contents of a changeset.\n** If successful, *pp is set to point to the iterator handle and SQLITE_OK\n** is returned. Otherwise, if an error occurs, *pp is set to zero and an\n** SQLite error code is returned.\n**\n** The following functions can be used to advance and query a changeset \n** iterator created by this function:\n**\n** <ul>\n**   <li> [sqlite3changeset_next()]\n**   <li> [sqlite3changeset_op()]\n**   <li> [sqlite3changeset_new()]\n**   <li> [sqlite3changeset_old()]\n** </ul>\n**\n** It is the responsibility of the caller to eventually destroy the iterator\n** by passing it to [sqlite3changeset_finalize()]. The buffer containing the\n** changeset (pChangeset) must remain valid until after the iterator is\n** destroyed.\n**\n** Assuming the changeset blob was created by one of the\n** [sqlite3session_changeset()], [sqlite3changeset_concat()] or\n** [sqlite3changeset_invert()] functions, all changes within the changeset \n** that apply to a single table are grouped together. This means that when \n** an application iterates through a changeset using an iterator created by \n** this function, all changes that relate to a single table are visited \n** consecutively. There is no chance that the iterator will visit a change \n** the applies to table X, then one for table Y, and then later on visit \n** another change for table X.\n**\n** The behavior of sqlite3changeset_start_v2() and its streaming equivalent\n** may be modified by passing a combination of\n** [SQLITE_CHANGESETSTART_INVERT | supported flags] as the 4th parameter.\n**\n** Note that the sqlite3changeset_start_v2() API is still <b>experimental</b>\n** and therefore subject to change.\n*/\nSQLITE_API int sqlite3changeset_start(\n  sqlite3_changeset_iter **pp,    /* OUT: New changeset iterator handle */\n  int nChangeset,                 /* Size of changeset blob in bytes */\n  void *pChangeset                /* Pointer to blob containing changeset */\n);\nSQLITE_API int sqlite3changeset_start_v2(\n  sqlite3_changeset_iter **pp,    /* OUT: New changeset iterator handle */\n  int nChangeset,                 /* Size of changeset blob in bytes */\n  void *pChangeset,               /* Pointer to blob containing changeset */\n  int flags                       /* SESSION_CHANGESETSTART_* flags */\n);\n\n/*\n** CAPI3REF: Flags for sqlite3changeset_start_v2\n**\n** The following flags may passed via the 4th parameter to\n** [sqlite3changeset_start_v2] and [sqlite3changeset_start_v2_strm]:\n**\n** <dt>SQLITE_CHANGESETAPPLY_INVERT <dd>\n**   Invert the changeset while iterating through it. This is equivalent to\n**   inverting a changeset using sqlite3changeset_invert() before applying it.\n**   It is an error to specify this flag with a patchset.\n*/\n#define SQLITE_CHANGESETSTART_INVERT        0x0002\n\n\n/*\n** CAPI3REF: Advance A Changeset Iterator\n** METHOD: sqlite3_changeset_iter\n**\n** This function may only be used with iterators created by function\n** [sqlite3changeset_start()]. If it is called on an iterator passed to\n** a conflict-handler callback by [sqlite3changeset_apply()], SQLITE_MISUSE\n** is returned and the call has no effect.\n**\n** Immediately after an iterator is created by sqlite3changeset_start(), it\n** does not point to any change in the changeset. Assuming the changeset\n** is not empty, the first call to this function advances the iterator to\n** point to the first change in the changeset. Each subsequent call advances\n** the iterator to point to the next change in the changeset (if any). If\n** no error occurs and the iterator points to a valid change after a call\n** to sqlite3changeset_next() has advanced it, SQLITE_ROW is returned. \n** Otherwise, if all changes in the changeset have already been visited,\n** SQLITE_DONE is returned.\n**\n** If an error occurs, an SQLite error code is returned. Possible error \n** codes include SQLITE_CORRUPT (if the changeset buffer is corrupt) or \n** SQLITE_NOMEM.\n*/\nSQLITE_API int sqlite3changeset_next(sqlite3_changeset_iter *pIter);\n\n/*\n** CAPI3REF: Obtain The Current Operation From A Changeset Iterator\n** METHOD: sqlite3_changeset_iter\n**\n** The pIter argument passed to this function may either be an iterator\n** passed to a conflict-handler by [sqlite3changeset_apply()], or an iterator\n** created by [sqlite3changeset_start()]. In the latter case, the most recent\n** call to [sqlite3changeset_next()] must have returned [SQLITE_ROW]. If this\n** is not the case, this function returns [SQLITE_MISUSE].\n**\n** If argument pzTab is not NULL, then *pzTab is set to point to a\n** nul-terminated utf-8 encoded string containing the name of the table\n** affected by the current change. The buffer remains valid until either\n** sqlite3changeset_next() is called on the iterator or until the \n** conflict-handler function returns. If pnCol is not NULL, then *pnCol is \n** set to the number of columns in the table affected by the change. If\n** pbIndirect is not NULL, then *pbIndirect is set to true (1) if the change\n** is an indirect change, or false (0) otherwise. See the documentation for\n** [sqlite3session_indirect()] for a description of direct and indirect\n** changes. Finally, if pOp is not NULL, then *pOp is set to one of \n** [SQLITE_INSERT], [SQLITE_DELETE] or [SQLITE_UPDATE], depending on the \n** type of change that the iterator currently points to.\n**\n** If no error occurs, SQLITE_OK is returned. If an error does occur, an\n** SQLite error code is returned. The values of the output variables may not\n** be trusted in this case.\n*/\nSQLITE_API int sqlite3changeset_op(\n  sqlite3_changeset_iter *pIter,  /* Iterator object */\n  const char **pzTab,             /* OUT: Pointer to table name */\n  int *pnCol,                     /* OUT: Number of columns in table */\n  int *pOp,                       /* OUT: SQLITE_INSERT, DELETE or UPDATE */\n  int *pbIndirect                 /* OUT: True for an 'indirect' change */\n);\n\n/*\n** CAPI3REF: Obtain The Primary Key Definition Of A Table\n** METHOD: sqlite3_changeset_iter\n**\n** For each modified table, a changeset includes the following:\n**\n** <ul>\n**   <li> The number of columns in the table, and\n**   <li> Which of those columns make up the tables PRIMARY KEY.\n** </ul>\n**\n** This function is used to find which columns comprise the PRIMARY KEY of\n** the table modified by the change that iterator pIter currently points to.\n** If successful, *pabPK is set to point to an array of nCol entries, where\n** nCol is the number of columns in the table. Elements of *pabPK are set to\n** 0x01 if the corresponding column is part of the tables primary key, or\n** 0x00 if it is not.\n**\n** If argument pnCol is not NULL, then *pnCol is set to the number of columns\n** in the table.\n**\n** If this function is called when the iterator does not point to a valid\n** entry, SQLITE_MISUSE is returned and the output variables zeroed. Otherwise,\n** SQLITE_OK is returned and the output variables populated as described\n** above.\n*/\nSQLITE_API int sqlite3changeset_pk(\n  sqlite3_changeset_iter *pIter,  /* Iterator object */\n  unsigned char **pabPK,          /* OUT: Array of boolean - true for PK cols */\n  int *pnCol                      /* OUT: Number of entries in output array */\n);\n\n/*\n** CAPI3REF: Obtain old.* Values From A Changeset Iterator\n** METHOD: sqlite3_changeset_iter\n**\n** The pIter argument passed to this function may either be an iterator\n** passed to a conflict-handler by [sqlite3changeset_apply()], or an iterator\n** created by [sqlite3changeset_start()]. In the latter case, the most recent\n** call to [sqlite3changeset_next()] must have returned SQLITE_ROW. \n** Furthermore, it may only be called if the type of change that the iterator\n** currently points to is either [SQLITE_DELETE] or [SQLITE_UPDATE]. Otherwise,\n** this function returns [SQLITE_MISUSE] and sets *ppValue to NULL.\n**\n** Argument iVal must be greater than or equal to 0, and less than the number\n** of columns in the table affected by the current change. Otherwise,\n** [SQLITE_RANGE] is returned and *ppValue is set to NULL.\n**\n** If successful, this function sets *ppValue to point to a protected\n** sqlite3_value object containing the iVal'th value from the vector of \n** original row values stored as part of the UPDATE or DELETE change and\n** returns SQLITE_OK. The name of the function comes from the fact that this \n** is similar to the \"old.*\" columns available to update or delete triggers.\n**\n** If some other error occurs (e.g. an OOM condition), an SQLite error code\n** is returned and *ppValue is set to NULL.\n*/\nSQLITE_API int sqlite3changeset_old(\n  sqlite3_changeset_iter *pIter,  /* Changeset iterator */\n  int iVal,                       /* Column number */\n  sqlite3_value **ppValue         /* OUT: Old value (or NULL pointer) */\n);\n\n/*\n** CAPI3REF: Obtain new.* Values From A Changeset Iterator\n** METHOD: sqlite3_changeset_iter\n**\n** The pIter argument passed to this function may either be an iterator\n** passed to a conflict-handler by [sqlite3changeset_apply()], or an iterator\n** created by [sqlite3changeset_start()]. In the latter case, the most recent\n** call to [sqlite3changeset_next()] must have returned SQLITE_ROW. \n** Furthermore, it may only be called if the type of change that the iterator\n** currently points to is either [SQLITE_UPDATE] or [SQLITE_INSERT]. Otherwise,\n** this function returns [SQLITE_MISUSE] and sets *ppValue to NULL.\n**\n** Argument iVal must be greater than or equal to 0, and less than the number\n** of columns in the table affected by the current change. Otherwise,\n** [SQLITE_RANGE] is returned and *ppValue is set to NULL.\n**\n** If successful, this function sets *ppValue to point to a protected\n** sqlite3_value object containing the iVal'th value from the vector of \n** new row values stored as part of the UPDATE or INSERT change and\n** returns SQLITE_OK. If the change is an UPDATE and does not include\n** a new value for the requested column, *ppValue is set to NULL and \n** SQLITE_OK returned. The name of the function comes from the fact that \n** this is similar to the \"new.*\" columns available to update or delete \n** triggers.\n**\n** If some other error occurs (e.g. an OOM condition), an SQLite error code\n** is returned and *ppValue is set to NULL.\n*/\nSQLITE_API int sqlite3changeset_new(\n  sqlite3_changeset_iter *pIter,  /* Changeset iterator */\n  int iVal,                       /* Column number */\n  sqlite3_value **ppValue         /* OUT: New value (or NULL pointer) */\n);\n\n/*\n** CAPI3REF: Obtain Conflicting Row Values From A Changeset Iterator\n** METHOD: sqlite3_changeset_iter\n**\n** This function should only be used with iterator objects passed to a\n** conflict-handler callback by [sqlite3changeset_apply()] with either\n** [SQLITE_CHANGESET_DATA] or [SQLITE_CHANGESET_CONFLICT]. If this function\n** is called on any other iterator, [SQLITE_MISUSE] is returned and *ppValue\n** is set to NULL.\n**\n** Argument iVal must be greater than or equal to 0, and less than the number\n** of columns in the table affected by the current change. Otherwise,\n** [SQLITE_RANGE] is returned and *ppValue is set to NULL.\n**\n** If successful, this function sets *ppValue to point to a protected\n** sqlite3_value object containing the iVal'th value from the \n** \"conflicting row\" associated with the current conflict-handler callback\n** and returns SQLITE_OK.\n**\n** If some other error occurs (e.g. an OOM condition), an SQLite error code\n** is returned and *ppValue is set to NULL.\n*/\nSQLITE_API int sqlite3changeset_conflict(\n  sqlite3_changeset_iter *pIter,  /* Changeset iterator */\n  int iVal,                       /* Column number */\n  sqlite3_value **ppValue         /* OUT: Value from conflicting row */\n);\n\n/*\n** CAPI3REF: Determine The Number Of Foreign Key Constraint Violations\n** METHOD: sqlite3_changeset_iter\n**\n** This function may only be called with an iterator passed to an\n** SQLITE_CHANGESET_FOREIGN_KEY conflict handler callback. In this case\n** it sets the output variable to the total number of known foreign key\n** violations in the destination database and returns SQLITE_OK.\n**\n** In all other cases this function returns SQLITE_MISUSE.\n*/\nSQLITE_API int sqlite3changeset_fk_conflicts(\n  sqlite3_changeset_iter *pIter,  /* Changeset iterator */\n  int *pnOut                      /* OUT: Number of FK violations */\n);\n\n\n/*\n** CAPI3REF: Finalize A Changeset Iterator\n** METHOD: sqlite3_changeset_iter\n**\n** This function is used to finalize an iterator allocated with\n** [sqlite3changeset_start()].\n**\n** This function should only be called on iterators created using the\n** [sqlite3changeset_start()] function. If an application calls this\n** function with an iterator passed to a conflict-handler by\n** [sqlite3changeset_apply()], [SQLITE_MISUSE] is immediately returned and the\n** call has no effect.\n**\n** If an error was encountered within a call to an sqlite3changeset_xxx()\n** function (for example an [SQLITE_CORRUPT] in [sqlite3changeset_next()] or an \n** [SQLITE_NOMEM] in [sqlite3changeset_new()]) then an error code corresponding\n** to that error is returned by this function. Otherwise, SQLITE_OK is\n** returned. This is to allow the following pattern (pseudo-code):\n**\n** <pre>\n**   sqlite3changeset_start();\n**   while( SQLITE_ROW==sqlite3changeset_next() ){\n**     // Do something with change.\n**   }\n**   rc = sqlite3changeset_finalize();\n**   if( rc!=SQLITE_OK ){\n**     // An error has occurred \n**   }\n** </pre>\n*/\nSQLITE_API int sqlite3changeset_finalize(sqlite3_changeset_iter *pIter);\n\n/*\n** CAPI3REF: Invert A Changeset\n**\n** This function is used to \"invert\" a changeset object. Applying an inverted\n** changeset to a database reverses the effects of applying the uninverted\n** changeset. Specifically:\n**\n** <ul>\n**   <li> Each DELETE change is changed to an INSERT, and\n**   <li> Each INSERT change is changed to a DELETE, and\n**   <li> For each UPDATE change, the old.* and new.* values are exchanged.\n** </ul>\n**\n** This function does not change the order in which changes appear within\n** the changeset. It merely reverses the sense of each individual change.\n**\n** If successful, a pointer to a buffer containing the inverted changeset\n** is stored in *ppOut, the size of the same buffer is stored in *pnOut, and\n** SQLITE_OK is returned. If an error occurs, both *pnOut and *ppOut are\n** zeroed and an SQLite error code returned.\n**\n** It is the responsibility of the caller to eventually call sqlite3_free()\n** on the *ppOut pointer to free the buffer allocation following a successful \n** call to this function.\n**\n** WARNING/TODO: This function currently assumes that the input is a valid\n** changeset. If it is not, the results are undefined.\n*/\nSQLITE_API int sqlite3changeset_invert(\n  int nIn, const void *pIn,       /* Input changeset */\n  int *pnOut, void **ppOut        /* OUT: Inverse of input */\n);\n\n/*\n** CAPI3REF: Concatenate Two Changeset Objects\n**\n** This function is used to concatenate two changesets, A and B, into a \n** single changeset. The result is a changeset equivalent to applying\n** changeset A followed by changeset B. \n**\n** This function combines the two input changesets using an \n** sqlite3_changegroup object. Calling it produces similar results as the\n** following code fragment:\n**\n** <pre>\n**   sqlite3_changegroup *pGrp;\n**   rc = sqlite3_changegroup_new(&pGrp);\n**   if( rc==SQLITE_OK ) rc = sqlite3changegroup_add(pGrp, nA, pA);\n**   if( rc==SQLITE_OK ) rc = sqlite3changegroup_add(pGrp, nB, pB);\n**   if( rc==SQLITE_OK ){\n**     rc = sqlite3changegroup_output(pGrp, pnOut, ppOut);\n**   }else{\n**     *ppOut = 0;\n**     *pnOut = 0;\n**   }\n** </pre>\n**\n** Refer to the sqlite3_changegroup documentation below for details.\n*/\nSQLITE_API int sqlite3changeset_concat(\n  int nA,                         /* Number of bytes in buffer pA */\n  void *pA,                       /* Pointer to buffer containing changeset A */\n  int nB,                         /* Number of bytes in buffer pB */\n  void *pB,                       /* Pointer to buffer containing changeset B */\n  int *pnOut,                     /* OUT: Number of bytes in output changeset */\n  void **ppOut                    /* OUT: Buffer containing output changeset */\n);\n\n\n/*\n** CAPI3REF: Changegroup Handle\n**\n** A changegroup is an object used to combine two or more \n** [changesets] or [patchsets]\n*/\ntypedef struct sqlite3_changegroup sqlite3_changegroup;\n\n/*\n** CAPI3REF: Create A New Changegroup Object\n** CONSTRUCTOR: sqlite3_changegroup\n**\n** An sqlite3_changegroup object is used to combine two or more changesets\n** (or patchsets) into a single changeset (or patchset). A single changegroup\n** object may combine changesets or patchsets, but not both. The output is\n** always in the same format as the input.\n**\n** If successful, this function returns SQLITE_OK and populates (*pp) with\n** a pointer to a new sqlite3_changegroup object before returning. The caller\n** should eventually free the returned object using a call to \n** sqlite3changegroup_delete(). If an error occurs, an SQLite error code\n** (i.e. SQLITE_NOMEM) is returned and *pp is set to NULL.\n**\n** The usual usage pattern for an sqlite3_changegroup object is as follows:\n**\n** <ul>\n**   <li> It is created using a call to sqlite3changegroup_new().\n**\n**   <li> Zero or more changesets (or patchsets) are added to the object\n**        by calling sqlite3changegroup_add().\n**\n**   <li> The result of combining all input changesets together is obtained \n**        by the application via a call to sqlite3changegroup_output().\n**\n**   <li> The object is deleted using a call to sqlite3changegroup_delete().\n** </ul>\n**\n** Any number of calls to add() and output() may be made between the calls to\n** new() and delete(), and in any order.\n**\n** As well as the regular sqlite3changegroup_add() and \n** sqlite3changegroup_output() functions, also available are the streaming\n** versions sqlite3changegroup_add_strm() and sqlite3changegroup_output_strm().\n*/\nSQLITE_API int sqlite3changegroup_new(sqlite3_changegroup **pp);\n\n/*\n** CAPI3REF: Add A Changeset To A Changegroup\n** METHOD: sqlite3_changegroup\n**\n** Add all changes within the changeset (or patchset) in buffer pData (size\n** nData bytes) to the changegroup. \n**\n** If the buffer contains a patchset, then all prior calls to this function\n** on the same changegroup object must also have specified patchsets. Or, if\n** the buffer contains a changeset, so must have the earlier calls to this\n** function. Otherwise, SQLITE_ERROR is returned and no changes are added\n** to the changegroup.\n**\n** Rows within the changeset and changegroup are identified by the values in\n** their PRIMARY KEY columns. A change in the changeset is considered to\n** apply to the same row as a change already present in the changegroup if\n** the two rows have the same primary key.\n**\n** Changes to rows that do not already appear in the changegroup are\n** simply copied into it. Or, if both the new changeset and the changegroup\n** contain changes that apply to a single row, the final contents of the\n** changegroup depends on the type of each change, as follows:\n**\n** <table border=1 style=\"margin-left:8ex;margin-right:8ex\">\n**   <tr><th style=\"white-space:pre\">Existing Change  </th>\n**       <th style=\"white-space:pre\">New Change       </th>\n**       <th>Output Change\n**   <tr><td>INSERT <td>INSERT <td>\n**       The new change is ignored. This case does not occur if the new\n**       changeset was recorded immediately after the changesets already\n**       added to the changegroup.\n**   <tr><td>INSERT <td>UPDATE <td>\n**       The INSERT change remains in the changegroup. The values in the \n**       INSERT change are modified as if the row was inserted by the\n**       existing change and then updated according to the new change.\n**   <tr><td>INSERT <td>DELETE <td>\n**       The existing INSERT is removed from the changegroup. The DELETE is\n**       not added.\n**   <tr><td>UPDATE <td>INSERT <td>\n**       The new change is ignored. This case does not occur if the new\n**       changeset was recorded immediately after the changesets already\n**       added to the changegroup.\n**   <tr><td>UPDATE <td>UPDATE <td>\n**       The existing UPDATE remains within the changegroup. It is amended \n**       so that the accompanying values are as if the row was updated once \n**       by the existing change and then again by the new change.\n**   <tr><td>UPDATE <td>DELETE <td>\n**       The existing UPDATE is replaced by the new DELETE within the\n**       changegroup.\n**   <tr><td>DELETE <td>INSERT <td>\n**       If one or more of the column values in the row inserted by the\n**       new change differ from those in the row deleted by the existing \n**       change, the existing DELETE is replaced by an UPDATE within the\n**       changegroup. Otherwise, if the inserted row is exactly the same \n**       as the deleted row, the existing DELETE is simply discarded.\n**   <tr><td>DELETE <td>UPDATE <td>\n**       The new change is ignored. This case does not occur if the new\n**       changeset was recorded immediately after the changesets already\n**       added to the changegroup.\n**   <tr><td>DELETE <td>DELETE <td>\n**       The new change is ignored. This case does not occur if the new\n**       changeset was recorded immediately after the changesets already\n**       added to the changegroup.\n** </table>\n**\n** If the new changeset contains changes to a table that is already present\n** in the changegroup, then the number of columns and the position of the\n** primary key columns for the table must be consistent. If this is not the\n** case, this function fails with SQLITE_SCHEMA. If the input changeset\n** appears to be corrupt and the corruption is detected, SQLITE_CORRUPT is\n** returned. Or, if an out-of-memory condition occurs during processing, this\n** function returns SQLITE_NOMEM. In all cases, if an error occurs the\n** final contents of the changegroup is undefined.\n**\n** If no error occurs, SQLITE_OK is returned.\n*/\nSQLITE_API int sqlite3changegroup_add(sqlite3_changegroup*, int nData, void *pData);\n\n/*\n** CAPI3REF: Obtain A Composite Changeset From A Changegroup\n** METHOD: sqlite3_changegroup\n**\n** Obtain a buffer containing a changeset (or patchset) representing the\n** current contents of the changegroup. If the inputs to the changegroup\n** were themselves changesets, the output is a changeset. Or, if the\n** inputs were patchsets, the output is also a patchset.\n**\n** As with the output of the sqlite3session_changeset() and\n** sqlite3session_patchset() functions, all changes related to a single\n** table are grouped together in the output of this function. Tables appear\n** in the same order as for the very first changeset added to the changegroup.\n** If the second or subsequent changesets added to the changegroup contain\n** changes for tables that do not appear in the first changeset, they are\n** appended onto the end of the output changeset, again in the order in\n** which they are first encountered.\n**\n** If an error occurs, an SQLite error code is returned and the output\n** variables (*pnData) and (*ppData) are set to 0. Otherwise, SQLITE_OK\n** is returned and the output variables are set to the size of and a \n** pointer to the output buffer, respectively. In this case it is the\n** responsibility of the caller to eventually free the buffer using a\n** call to sqlite3_free().\n*/\nSQLITE_API int sqlite3changegroup_output(\n  sqlite3_changegroup*,\n  int *pnData,                    /* OUT: Size of output buffer in bytes */\n  void **ppData                   /* OUT: Pointer to output buffer */\n);\n\n/*\n** CAPI3REF: Delete A Changegroup Object\n** DESTRUCTOR: sqlite3_changegroup\n*/\nSQLITE_API void sqlite3changegroup_delete(sqlite3_changegroup*);\n\n/*\n** CAPI3REF: Apply A Changeset To A Database\n**\n** Apply a changeset or patchset to a database. These functions attempt to\n** update the \"main\" database attached to handle db with the changes found in\n** the changeset passed via the second and third arguments. \n**\n** The fourth argument (xFilter) passed to these functions is the \"filter\n** callback\". If it is not NULL, then for each table affected by at least one\n** change in the changeset, the filter callback is invoked with\n** the table name as the second argument, and a copy of the context pointer\n** passed as the sixth argument as the first. If the \"filter callback\"\n** returns zero, then no attempt is made to apply any changes to the table.\n** Otherwise, if the return value is non-zero or the xFilter argument to\n** is NULL, all changes related to the table are attempted.\n**\n** For each table that is not excluded by the filter callback, this function \n** tests that the target database contains a compatible table. A table is \n** considered compatible if all of the following are true:\n**\n** <ul>\n**   <li> The table has the same name as the name recorded in the \n**        changeset, and\n**   <li> The table has at least as many columns as recorded in the \n**        changeset, and\n**   <li> The table has primary key columns in the same position as \n**        recorded in the changeset.\n** </ul>\n**\n** If there is no compatible table, it is not an error, but none of the\n** changes associated with the table are applied. A warning message is issued\n** via the sqlite3_log() mechanism with the error code SQLITE_SCHEMA. At most\n** one such warning is issued for each table in the changeset.\n**\n** For each change for which there is a compatible table, an attempt is made \n** to modify the table contents according to the UPDATE, INSERT or DELETE \n** change. If a change cannot be applied cleanly, the conflict handler \n** function passed as the fifth argument to sqlite3changeset_apply() may be \n** invoked. A description of exactly when the conflict handler is invoked for \n** each type of change is below.\n**\n** Unlike the xFilter argument, xConflict may not be passed NULL. The results\n** of passing anything other than a valid function pointer as the xConflict\n** argument are undefined.\n**\n** Each time the conflict handler function is invoked, it must return one\n** of [SQLITE_CHANGESET_OMIT], [SQLITE_CHANGESET_ABORT] or \n** [SQLITE_CHANGESET_REPLACE]. SQLITE_CHANGESET_REPLACE may only be returned\n** if the second argument passed to the conflict handler is either\n** SQLITE_CHANGESET_DATA or SQLITE_CHANGESET_CONFLICT. If the conflict-handler\n** returns an illegal value, any changes already made are rolled back and\n** the call to sqlite3changeset_apply() returns SQLITE_MISUSE. Different \n** actions are taken by sqlite3changeset_apply() depending on the value\n** returned by each invocation of the conflict-handler function. Refer to\n** the documentation for the three \n** [SQLITE_CHANGESET_OMIT|available return values] for details.\n**\n** <dl>\n** <dt>DELETE Changes<dd>\n**   For each DELETE change, the function checks if the target database \n**   contains a row with the same primary key value (or values) as the \n**   original row values stored in the changeset. If it does, and the values \n**   stored in all non-primary key columns also match the values stored in \n**   the changeset the row is deleted from the target database.\n**\n**   If a row with matching primary key values is found, but one or more of\n**   the non-primary key fields contains a value different from the original\n**   row value stored in the changeset, the conflict-handler function is\n**   invoked with [SQLITE_CHANGESET_DATA] as the second argument. If the\n**   database table has more columns than are recorded in the changeset,\n**   only the values of those non-primary key fields are compared against\n**   the current database contents - any trailing database table columns\n**   are ignored.\n**\n**   If no row with matching primary key values is found in the database,\n**   the conflict-handler function is invoked with [SQLITE_CHANGESET_NOTFOUND]\n**   passed as the second argument.\n**\n**   If the DELETE operation is attempted, but SQLite returns SQLITE_CONSTRAINT\n**   (which can only happen if a foreign key constraint is violated), the\n**   conflict-handler function is invoked with [SQLITE_CHANGESET_CONSTRAINT]\n**   passed as the second argument. This includes the case where the DELETE\n**   operation is attempted because an earlier call to the conflict handler\n**   function returned [SQLITE_CHANGESET_REPLACE].\n**\n** <dt>INSERT Changes<dd>\n**   For each INSERT change, an attempt is made to insert the new row into\n**   the database. If the changeset row contains fewer fields than the\n**   database table, the trailing fields are populated with their default\n**   values.\n**\n**   If the attempt to insert the row fails because the database already \n**   contains a row with the same primary key values, the conflict handler\n**   function is invoked with the second argument set to \n**   [SQLITE_CHANGESET_CONFLICT].\n**\n**   If the attempt to insert the row fails because of some other constraint\n**   violation (e.g. NOT NULL or UNIQUE), the conflict handler function is \n**   invoked with the second argument set to [SQLITE_CHANGESET_CONSTRAINT].\n**   This includes the case where the INSERT operation is re-attempted because \n**   an earlier call to the conflict handler function returned \n**   [SQLITE_CHANGESET_REPLACE].\n**\n** <dt>UPDATE Changes<dd>\n**   For each UPDATE change, the function checks if the target database \n**   contains a row with the same primary key value (or values) as the \n**   original row values stored in the changeset. If it does, and the values \n**   stored in all modified non-primary key columns also match the values\n**   stored in the changeset the row is updated within the target database.\n**\n**   If a row with matching primary key values is found, but one or more of\n**   the modified non-primary key fields contains a value different from an\n**   original row value stored in the changeset, the conflict-handler function\n**   is invoked with [SQLITE_CHANGESET_DATA] as the second argument. Since\n**   UPDATE changes only contain values for non-primary key fields that are\n**   to be modified, only those fields need to match the original values to\n**   avoid the SQLITE_CHANGESET_DATA conflict-handler callback.\n**\n**   If no row with matching primary key values is found in the database,\n**   the conflict-handler function is invoked with [SQLITE_CHANGESET_NOTFOUND]\n**   passed as the second argument.\n**\n**   If the UPDATE operation is attempted, but SQLite returns \n**   SQLITE_CONSTRAINT, the conflict-handler function is invoked with \n**   [SQLITE_CHANGESET_CONSTRAINT] passed as the second argument.\n**   This includes the case where the UPDATE operation is attempted after \n**   an earlier call to the conflict handler function returned\n**   [SQLITE_CHANGESET_REPLACE].  \n** </dl>\n**\n** It is safe to execute SQL statements, including those that write to the\n** table that the callback related to, from within the xConflict callback.\n** This can be used to further customize the applications conflict\n** resolution strategy.\n**\n** All changes made by these functions are enclosed in a savepoint transaction.\n** If any other error (aside from a constraint failure when attempting to\n** write to the target database) occurs, then the savepoint transaction is\n** rolled back, restoring the target database to its original state, and an \n** SQLite error code returned.\n**\n** If the output parameters (ppRebase) and (pnRebase) are non-NULL and\n** the input is a changeset (not a patchset), then sqlite3changeset_apply_v2()\n** may set (*ppRebase) to point to a \"rebase\" that may be used with the \n** sqlite3_rebaser APIs buffer before returning. In this case (*pnRebase)\n** is set to the size of the buffer in bytes. It is the responsibility of the\n** caller to eventually free any such buffer using sqlite3_free(). The buffer\n** is only allocated and populated if one or more conflicts were encountered\n** while applying the patchset. See comments surrounding the sqlite3_rebaser\n** APIs for further details.\n**\n** The behavior of sqlite3changeset_apply_v2() and its streaming equivalent\n** may be modified by passing a combination of\n** [SQLITE_CHANGESETAPPLY_NOSAVEPOINT | supported flags] as the 9th parameter.\n**\n** Note that the sqlite3changeset_apply_v2() API is still <b>experimental</b>\n** and therefore subject to change.\n*/\nSQLITE_API int sqlite3changeset_apply(\n  sqlite3 *db,                    /* Apply change to \"main\" db of this handle */\n  int nChangeset,                 /* Size of changeset in bytes */\n  void *pChangeset,               /* Changeset blob */\n  int(*xFilter)(\n    void *pCtx,                   /* Copy of sixth arg to _apply() */\n    const char *zTab              /* Table name */\n  ),\n  int(*xConflict)(\n    void *pCtx,                   /* Copy of sixth arg to _apply() */\n    int eConflict,                /* DATA, MISSING, CONFLICT, CONSTRAINT */\n    sqlite3_changeset_iter *p     /* Handle describing change and conflict */\n  ),\n  void *pCtx                      /* First argument passed to xConflict */\n);\nSQLITE_API int sqlite3changeset_apply_v2(\n  sqlite3 *db,                    /* Apply change to \"main\" db of this handle */\n  int nChangeset,                 /* Size of changeset in bytes */\n  void *pChangeset,               /* Changeset blob */\n  int(*xFilter)(\n    void *pCtx,                   /* Copy of sixth arg to _apply() */\n    const char *zTab              /* Table name */\n  ),\n  int(*xConflict)(\n    void *pCtx,                   /* Copy of sixth arg to _apply() */\n    int eConflict,                /* DATA, MISSING, CONFLICT, CONSTRAINT */\n    sqlite3_changeset_iter *p     /* Handle describing change and conflict */\n  ),\n  void *pCtx,                     /* First argument passed to xConflict */\n  void **ppRebase, int *pnRebase, /* OUT: Rebase data */\n  int flags                       /* SESSION_CHANGESETAPPLY_* flags */\n);\n\n/*\n** CAPI3REF: Flags for sqlite3changeset_apply_v2\n**\n** The following flags may passed via the 9th parameter to\n** [sqlite3changeset_apply_v2] and [sqlite3changeset_apply_v2_strm]:\n**\n** <dl>\n** <dt>SQLITE_CHANGESETAPPLY_NOSAVEPOINT <dd>\n**   Usually, the sessions module encloses all operations performed by\n**   a single call to apply_v2() or apply_v2_strm() in a [SAVEPOINT]. The\n**   SAVEPOINT is committed if the changeset or patchset is successfully\n**   applied, or rolled back if an error occurs. Specifying this flag\n**   causes the sessions modu"
        },
        {
          "name": "sqlite3ext.h",
          "type": "blob",
          "size": 32.9228515625,
          "content": "/*\n** 2006 June 7\n**\n** The author disclaims copyright to this source code.  In place of\n** a legal notice, here is a blessing:\n**\n**    May you do good and not evil.\n**    May you find forgiveness for yourself and forgive others.\n**    May you share freely, never taking more than you give.\n**\n*************************************************************************\n** This header file defines the SQLite interface for use by\n** shared libraries that want to be imported as extensions into\n** an SQLite instance.  Shared libraries that intend to be loaded\n** as extensions by SQLite should #include this file instead of \n** sqlite3.h.\n*/\n#ifndef SQLITE3EXT_H\n#define SQLITE3EXT_H\n#include \"sqlite3.h\"\n\n/*\n** The following structure holds pointers to all of the SQLite API\n** routines.\n**\n** WARNING:  In order to maintain backwards compatibility, add new\n** interfaces to the end of this structure only.  If you insert new\n** interfaces in the middle of this structure, then older different\n** versions of SQLite will not be able to load each other's shared\n** libraries!\n*/\nstruct sqlite3_api_routines {\n  void * (*aggregate_context)(sqlite3_context*,int nBytes);\n  int  (*aggregate_count)(sqlite3_context*);\n  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));\n  int  (*bind_double)(sqlite3_stmt*,int,double);\n  int  (*bind_int)(sqlite3_stmt*,int,int);\n  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);\n  int  (*bind_null)(sqlite3_stmt*,int);\n  int  (*bind_parameter_count)(sqlite3_stmt*);\n  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);\n  const char * (*bind_parameter_name)(sqlite3_stmt*,int);\n  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));\n  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));\n  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);\n  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);\n  int  (*busy_timeout)(sqlite3*,int ms);\n  int  (*changes)(sqlite3*);\n  int  (*close)(sqlite3*);\n  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,\n                           int eTextRep,const char*));\n  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,\n                             int eTextRep,const void*));\n  const void * (*column_blob)(sqlite3_stmt*,int iCol);\n  int  (*column_bytes)(sqlite3_stmt*,int iCol);\n  int  (*column_bytes16)(sqlite3_stmt*,int iCol);\n  int  (*column_count)(sqlite3_stmt*pStmt);\n  const char * (*column_database_name)(sqlite3_stmt*,int);\n  const void * (*column_database_name16)(sqlite3_stmt*,int);\n  const char * (*column_decltype)(sqlite3_stmt*,int i);\n  const void * (*column_decltype16)(sqlite3_stmt*,int);\n  double  (*column_double)(sqlite3_stmt*,int iCol);\n  int  (*column_int)(sqlite3_stmt*,int iCol);\n  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);\n  const char * (*column_name)(sqlite3_stmt*,int);\n  const void * (*column_name16)(sqlite3_stmt*,int);\n  const char * (*column_origin_name)(sqlite3_stmt*,int);\n  const void * (*column_origin_name16)(sqlite3_stmt*,int);\n  const char * (*column_table_name)(sqlite3_stmt*,int);\n  const void * (*column_table_name16)(sqlite3_stmt*,int);\n  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);\n  const void * (*column_text16)(sqlite3_stmt*,int iCol);\n  int  (*column_type)(sqlite3_stmt*,int iCol);\n  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);\n  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);\n  int  (*complete)(const char*sql);\n  int  (*complete16)(const void*sql);\n  int  (*create_collation)(sqlite3*,const char*,int,void*,\n                           int(*)(void*,int,const void*,int,const void*));\n  int  (*create_collation16)(sqlite3*,const void*,int,void*,\n                             int(*)(void*,int,const void*,int,const void*));\n  int  (*create_function)(sqlite3*,const char*,int,int,void*,\n                          void (*xFunc)(sqlite3_context*,int,sqlite3_value**),\n                          void (*xStep)(sqlite3_context*,int,sqlite3_value**),\n                          void (*xFinal)(sqlite3_context*));\n  int  (*create_function16)(sqlite3*,const void*,int,int,void*,\n                            void (*xFunc)(sqlite3_context*,int,sqlite3_value**),\n                            void (*xStep)(sqlite3_context*,int,sqlite3_value**),\n                            void (*xFinal)(sqlite3_context*));\n  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);\n  int  (*data_count)(sqlite3_stmt*pStmt);\n  sqlite3 * (*db_handle)(sqlite3_stmt*);\n  int (*declare_vtab)(sqlite3*,const char*);\n  int  (*enable_shared_cache)(int);\n  int  (*errcode)(sqlite3*db);\n  const char * (*errmsg)(sqlite3*);\n  const void * (*errmsg16)(sqlite3*);\n  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);\n  int  (*expired)(sqlite3_stmt*);\n  int  (*finalize)(sqlite3_stmt*pStmt);\n  void  (*free)(void*);\n  void  (*free_table)(char**result);\n  int  (*get_autocommit)(sqlite3*);\n  void * (*get_auxdata)(sqlite3_context*,int);\n  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);\n  int  (*global_recover)(void);\n  void  (*interruptx)(sqlite3*);\n  sqlite_int64  (*last_insert_rowid)(sqlite3*);\n  const char * (*libversion)(void);\n  int  (*libversion_number)(void);\n  void *(*malloc)(int);\n  char * (*mprintf)(const char*,...);\n  int  (*open)(const char*,sqlite3**);\n  int  (*open16)(const void*,sqlite3**);\n  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);\n  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);\n  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);\n  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);\n  void *(*realloc)(void*,int);\n  int  (*reset)(sqlite3_stmt*pStmt);\n  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));\n  void  (*result_double)(sqlite3_context*,double);\n  void  (*result_error)(sqlite3_context*,const char*,int);\n  void  (*result_error16)(sqlite3_context*,const void*,int);\n  void  (*result_int)(sqlite3_context*,int);\n  void  (*result_int64)(sqlite3_context*,sqlite_int64);\n  void  (*result_null)(sqlite3_context*);\n  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));\n  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));\n  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));\n  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));\n  void  (*result_value)(sqlite3_context*,sqlite3_value*);\n  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);\n  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,\n                         const char*,const char*),void*);\n  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));\n  char * (*xsnprintf)(int,char*,const char*,...);\n  int  (*step)(sqlite3_stmt*);\n  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,\n                                char const**,char const**,int*,int*,int*);\n  void  (*thread_cleanup)(void);\n  int  (*total_changes)(sqlite3*);\n  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);\n  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);\n  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,\n                                         sqlite_int64),void*);\n  void * (*user_data)(sqlite3_context*);\n  const void * (*value_blob)(sqlite3_value*);\n  int  (*value_bytes)(sqlite3_value*);\n  int  (*value_bytes16)(sqlite3_value*);\n  double  (*value_double)(sqlite3_value*);\n  int  (*value_int)(sqlite3_value*);\n  sqlite_int64  (*value_int64)(sqlite3_value*);\n  int  (*value_numeric_type)(sqlite3_value*);\n  const unsigned char * (*value_text)(sqlite3_value*);\n  const void * (*value_text16)(sqlite3_value*);\n  const void * (*value_text16be)(sqlite3_value*);\n  const void * (*value_text16le)(sqlite3_value*);\n  int  (*value_type)(sqlite3_value*);\n  char *(*vmprintf)(const char*,va_list);\n  /* Added ??? */\n  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);\n  /* Added by 3.3.13 */\n  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);\n  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);\n  int (*clear_bindings)(sqlite3_stmt*);\n  /* Added by 3.4.1 */\n  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,\n                          void (*xDestroy)(void *));\n  /* Added by 3.5.0 */\n  int (*bind_zeroblob)(sqlite3_stmt*,int,int);\n  int (*blob_bytes)(sqlite3_blob*);\n  int (*blob_close)(sqlite3_blob*);\n  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,\n                   int,sqlite3_blob**);\n  int (*blob_read)(sqlite3_blob*,void*,int,int);\n  int (*blob_write)(sqlite3_blob*,const void*,int,int);\n  int (*create_collation_v2)(sqlite3*,const char*,int,void*,\n                             int(*)(void*,int,const void*,int,const void*),\n                             void(*)(void*));\n  int (*file_control)(sqlite3*,const char*,int,void*);\n  sqlite3_int64 (*memory_highwater)(int);\n  sqlite3_int64 (*memory_used)(void);\n  sqlite3_mutex *(*mutex_alloc)(int);\n  void (*mutex_enter)(sqlite3_mutex*);\n  void (*mutex_free)(sqlite3_mutex*);\n  void (*mutex_leave)(sqlite3_mutex*);\n  int (*mutex_try)(sqlite3_mutex*);\n  int (*open_v2)(const char*,sqlite3**,int,const char*);\n  int (*release_memory)(int);\n  void (*result_error_nomem)(sqlite3_context*);\n  void (*result_error_toobig)(sqlite3_context*);\n  int (*sleep)(int);\n  void (*soft_heap_limit)(int);\n  sqlite3_vfs *(*vfs_find)(const char*);\n  int (*vfs_register)(sqlite3_vfs*,int);\n  int (*vfs_unregister)(sqlite3_vfs*);\n  int (*xthreadsafe)(void);\n  void (*result_zeroblob)(sqlite3_context*,int);\n  void (*result_error_code)(sqlite3_context*,int);\n  int (*test_control)(int, ...);\n  void (*randomness)(int,void*);\n  sqlite3 *(*context_db_handle)(sqlite3_context*);\n  int (*extended_result_codes)(sqlite3*,int);\n  int (*limit)(sqlite3*,int,int);\n  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);\n  const char *(*sql)(sqlite3_stmt*);\n  int (*status)(int,int*,int*,int);\n  int (*backup_finish)(sqlite3_backup*);\n  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);\n  int (*backup_pagecount)(sqlite3_backup*);\n  int (*backup_remaining)(sqlite3_backup*);\n  int (*backup_step)(sqlite3_backup*,int);\n  const char *(*compileoption_get)(int);\n  int (*compileoption_used)(const char*);\n  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,\n                            void (*xFunc)(sqlite3_context*,int,sqlite3_value**),\n                            void (*xStep)(sqlite3_context*,int,sqlite3_value**),\n                            void (*xFinal)(sqlite3_context*),\n                            void(*xDestroy)(void*));\n  int (*db_config)(sqlite3*,int,...);\n  sqlite3_mutex *(*db_mutex)(sqlite3*);\n  int (*db_status)(sqlite3*,int,int*,int*,int);\n  int (*extended_errcode)(sqlite3*);\n  void (*log)(int,const char*,...);\n  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);\n  const char *(*sourceid)(void);\n  int (*stmt_status)(sqlite3_stmt*,int,int);\n  int (*strnicmp)(const char*,const char*,int);\n  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);\n  int (*wal_autocheckpoint)(sqlite3*,int);\n  int (*wal_checkpoint)(sqlite3*,const char*);\n  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);\n  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);\n  int (*vtab_config)(sqlite3*,int op,...);\n  int (*vtab_on_conflict)(sqlite3*);\n  /* Version 3.7.16 and later */\n  int (*close_v2)(sqlite3*);\n  const char *(*db_filename)(sqlite3*,const char*);\n  int (*db_readonly)(sqlite3*,const char*);\n  int (*db_release_memory)(sqlite3*);\n  const char *(*errstr)(int);\n  int (*stmt_busy)(sqlite3_stmt*);\n  int (*stmt_readonly)(sqlite3_stmt*);\n  int (*stricmp)(const char*,const char*);\n  int (*uri_boolean)(const char*,const char*,int);\n  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);\n  const char *(*uri_parameter)(const char*,const char*);\n  char *(*xvsnprintf)(int,char*,const char*,va_list);\n  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);\n  /* Version 3.8.7 and later */\n  int (*auto_extension)(void(*)(void));\n  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,\n                     void(*)(void*));\n  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,\n                      void(*)(void*),unsigned char);\n  int (*cancel_auto_extension)(void(*)(void));\n  int (*load_extension)(sqlite3*,const char*,const char*,char**);\n  void *(*malloc64)(sqlite3_uint64);\n  sqlite3_uint64 (*msize)(void*);\n  void *(*realloc64)(void*,sqlite3_uint64);\n  void (*reset_auto_extension)(void);\n  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,\n                        void(*)(void*));\n  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,\n                         void(*)(void*), unsigned char);\n  int (*strglob)(const char*,const char*);\n  /* Version 3.8.11 and later */\n  sqlite3_value *(*value_dup)(const sqlite3_value*);\n  void (*value_free)(sqlite3_value*);\n  int (*result_zeroblob64)(sqlite3_context*,sqlite3_uint64);\n  int (*bind_zeroblob64)(sqlite3_stmt*, int, sqlite3_uint64);\n  /* Version 3.9.0 and later */\n  unsigned int (*value_subtype)(sqlite3_value*);\n  void (*result_subtype)(sqlite3_context*,unsigned int);\n  /* Version 3.10.0 and later */\n  int (*status64)(int,sqlite3_int64*,sqlite3_int64*,int);\n  int (*strlike)(const char*,const char*,unsigned int);\n  int (*db_cacheflush)(sqlite3*);\n  /* Version 3.12.0 and later */\n  int (*system_errno)(sqlite3*);\n  /* Version 3.14.0 and later */\n  int (*trace_v2)(sqlite3*,unsigned,int(*)(unsigned,void*,void*,void*),void*);\n  char *(*expanded_sql)(sqlite3_stmt*);\n  /* Version 3.18.0 and later */\n  void (*set_last_insert_rowid)(sqlite3*,sqlite3_int64);\n  /* Version 3.20.0 and later */\n  int (*prepare_v3)(sqlite3*,const char*,int,unsigned int,\n                    sqlite3_stmt**,const char**);\n  int (*prepare16_v3)(sqlite3*,const void*,int,unsigned int,\n                      sqlite3_stmt**,const void**);\n  int (*bind_pointer)(sqlite3_stmt*,int,void*,const char*,void(*)(void*));\n  void (*result_pointer)(sqlite3_context*,void*,const char*,void(*)(void*));\n  void *(*value_pointer)(sqlite3_value*,const char*);\n  int (*vtab_nochange)(sqlite3_context*);\n  int (*value_nochange)(sqlite3_value*);\n  const char *(*vtab_collation)(sqlite3_index_info*,int);\n  /* Version 3.24.0 and later */\n  int (*keyword_count)(void);\n  int (*keyword_name)(int,const char**,int*);\n  int (*keyword_check)(const char*,int);\n  sqlite3_str *(*str_new)(sqlite3*);\n  char *(*str_finish)(sqlite3_str*);\n  void (*str_appendf)(sqlite3_str*, const char *zFormat, ...);\n  void (*str_vappendf)(sqlite3_str*, const char *zFormat, va_list);\n  void (*str_append)(sqlite3_str*, const char *zIn, int N);\n  void (*str_appendall)(sqlite3_str*, const char *zIn);\n  void (*str_appendchar)(sqlite3_str*, int N, char C);\n  void (*str_reset)(sqlite3_str*);\n  int (*str_errcode)(sqlite3_str*);\n  int (*str_length)(sqlite3_str*);\n  char *(*str_value)(sqlite3_str*);\n  /* Version 3.25.0 and later */\n  int (*create_window_function)(sqlite3*,const char*,int,int,void*,\n                            void (*xStep)(sqlite3_context*,int,sqlite3_value**),\n                            void (*xFinal)(sqlite3_context*),\n                            void (*xValue)(sqlite3_context*),\n                            void (*xInv)(sqlite3_context*,int,sqlite3_value**),\n                            void(*xDestroy)(void*));\n  /* Version 3.26.0 and later */\n  const char *(*normalized_sql)(sqlite3_stmt*);\n};\n\n/*\n** This is the function signature used for all extension entry points.  It\n** is also defined in the file \"loadext.c\".\n*/\ntypedef int (*sqlite3_loadext_entry)(\n  sqlite3 *db,                       /* Handle to the database. */\n  char **pzErrMsg,                   /* Used to set error string on failure. */\n  const sqlite3_api_routines *pThunk /* Extension API function pointers. */\n);\n\n/*\n** The following macros redefine the API routines so that they are\n** redirected through the global sqlite3_api structure.\n**\n** This header file is also used by the loadext.c source file\n** (part of the main SQLite library - not an extension) so that\n** it can get access to the sqlite3_api_routines structure\n** definition.  But the main library does not want to redefine\n** the API.  So the redefinition macros are only valid if the\n** SQLITE_CORE macros is undefined.\n*/\n#if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)\n#define sqlite3_aggregate_context      sqlite3_api->aggregate_context\n#ifndef SQLITE_OMIT_DEPRECATED\n#define sqlite3_aggregate_count        sqlite3_api->aggregate_count\n#endif\n#define sqlite3_bind_blob              sqlite3_api->bind_blob\n#define sqlite3_bind_double            sqlite3_api->bind_double\n#define sqlite3_bind_int               sqlite3_api->bind_int\n#define sqlite3_bind_int64             sqlite3_api->bind_int64\n#define sqlite3_bind_null              sqlite3_api->bind_null\n#define sqlite3_bind_parameter_count   sqlite3_api->bind_parameter_count\n#define sqlite3_bind_parameter_index   sqlite3_api->bind_parameter_index\n#define sqlite3_bind_parameter_name    sqlite3_api->bind_parameter_name\n#define sqlite3_bind_text              sqlite3_api->bind_text\n#define sqlite3_bind_text16            sqlite3_api->bind_text16\n#define sqlite3_bind_value             sqlite3_api->bind_value\n#define sqlite3_busy_handler           sqlite3_api->busy_handler\n#define sqlite3_busy_timeout           sqlite3_api->busy_timeout\n#define sqlite3_changes                sqlite3_api->changes\n#define sqlite3_close                  sqlite3_api->close\n#define sqlite3_collation_needed       sqlite3_api->collation_needed\n#define sqlite3_collation_needed16     sqlite3_api->collation_needed16\n#define sqlite3_column_blob            sqlite3_api->column_blob\n#define sqlite3_column_bytes           sqlite3_api->column_bytes\n#define sqlite3_column_bytes16         sqlite3_api->column_bytes16\n#define sqlite3_column_count           sqlite3_api->column_count\n#define sqlite3_column_database_name   sqlite3_api->column_database_name\n#define sqlite3_column_database_name16 sqlite3_api->column_database_name16\n#define sqlite3_column_decltype        sqlite3_api->column_decltype\n#define sqlite3_column_decltype16      sqlite3_api->column_decltype16\n#define sqlite3_column_double          sqlite3_api->column_double\n#define sqlite3_column_int             sqlite3_api->column_int\n#define sqlite3_column_int64           sqlite3_api->column_int64\n#define sqlite3_column_name            sqlite3_api->column_name\n#define sqlite3_column_name16          sqlite3_api->column_name16\n#define sqlite3_column_origin_name     sqlite3_api->column_origin_name\n#define sqlite3_column_origin_name16   sqlite3_api->column_origin_name16\n#define sqlite3_column_table_name      sqlite3_api->column_table_name\n#define sqlite3_column_table_name16    sqlite3_api->column_table_name16\n#define sqlite3_column_text            sqlite3_api->column_text\n#define sqlite3_column_text16          sqlite3_api->column_text16\n#define sqlite3_column_type            sqlite3_api->column_type\n#define sqlite3_column_value           sqlite3_api->column_value\n#define sqlite3_commit_hook            sqlite3_api->commit_hook\n#define sqlite3_complete               sqlite3_api->complete\n#define sqlite3_complete16             sqlite3_api->complete16\n#define sqlite3_create_collation       sqlite3_api->create_collation\n#define sqlite3_create_collation16     sqlite3_api->create_collation16\n#define sqlite3_create_function        sqlite3_api->create_function\n#define sqlite3_create_function16      sqlite3_api->create_function16\n#define sqlite3_create_module          sqlite3_api->create_module\n#define sqlite3_create_module_v2       sqlite3_api->create_module_v2\n#define sqlite3_data_count             sqlite3_api->data_count\n#define sqlite3_db_handle              sqlite3_api->db_handle\n#define sqlite3_declare_vtab           sqlite3_api->declare_vtab\n#define sqlite3_enable_shared_cache    sqlite3_api->enable_shared_cache\n#define sqlite3_errcode                sqlite3_api->errcode\n#define sqlite3_errmsg                 sqlite3_api->errmsg\n#define sqlite3_errmsg16               sqlite3_api->errmsg16\n#define sqlite3_exec                   sqlite3_api->exec\n#ifndef SQLITE_OMIT_DEPRECATED\n#define sqlite3_expired                sqlite3_api->expired\n#endif\n#define sqlite3_finalize               sqlite3_api->finalize\n#define sqlite3_free                   sqlite3_api->free\n#define sqlite3_free_table             sqlite3_api->free_table\n#define sqlite3_get_autocommit         sqlite3_api->get_autocommit\n#define sqlite3_get_auxdata            sqlite3_api->get_auxdata\n#define sqlite3_get_table              sqlite3_api->get_table\n#ifndef SQLITE_OMIT_DEPRECATED\n#define sqlite3_global_recover         sqlite3_api->global_recover\n#endif\n#define sqlite3_interrupt              sqlite3_api->interruptx\n#define sqlite3_last_insert_rowid      sqlite3_api->last_insert_rowid\n#define sqlite3_libversion             sqlite3_api->libversion\n#define sqlite3_libversion_number      sqlite3_api->libversion_number\n#define sqlite3_malloc                 sqlite3_api->malloc\n#define sqlite3_mprintf                sqlite3_api->mprintf\n#define sqlite3_open                   sqlite3_api->open\n#define sqlite3_open16                 sqlite3_api->open16\n#define sqlite3_prepare                sqlite3_api->prepare\n#define sqlite3_prepare16              sqlite3_api->prepare16\n#define sqlite3_prepare_v2             sqlite3_api->prepare_v2\n#define sqlite3_prepare16_v2           sqlite3_api->prepare16_v2\n#define sqlite3_profile                sqlite3_api->profile\n#define sqlite3_progress_handler       sqlite3_api->progress_handler\n#define sqlite3_realloc                sqlite3_api->realloc\n#define sqlite3_reset                  sqlite3_api->reset\n#define sqlite3_result_blob            sqlite3_api->result_blob\n#define sqlite3_result_double          sqlite3_api->result_double\n#define sqlite3_result_error           sqlite3_api->result_error\n#define sqlite3_result_error16         sqlite3_api->result_error16\n#define sqlite3_result_int             sqlite3_api->result_int\n#define sqlite3_result_int64           sqlite3_api->result_int64\n#define sqlite3_result_null            sqlite3_api->result_null\n#define sqlite3_result_text            sqlite3_api->result_text\n#define sqlite3_result_text16          sqlite3_api->result_text16\n#define sqlite3_result_text16be        sqlite3_api->result_text16be\n#define sqlite3_result_text16le        sqlite3_api->result_text16le\n#define sqlite3_result_value           sqlite3_api->result_value\n#define sqlite3_rollback_hook          sqlite3_api->rollback_hook\n#define sqlite3_set_authorizer         sqlite3_api->set_authorizer\n#define sqlite3_set_auxdata            sqlite3_api->set_auxdata\n#define sqlite3_snprintf               sqlite3_api->xsnprintf\n#define sqlite3_step                   sqlite3_api->step\n#define sqlite3_table_column_metadata  sqlite3_api->table_column_metadata\n#define sqlite3_thread_cleanup         sqlite3_api->thread_cleanup\n#define sqlite3_total_changes          sqlite3_api->total_changes\n#define sqlite3_trace                  sqlite3_api->trace\n#ifndef SQLITE_OMIT_DEPRECATED\n#define sqlite3_transfer_bindings      sqlite3_api->transfer_bindings\n#endif\n#define sqlite3_update_hook            sqlite3_api->update_hook\n#define sqlite3_user_data              sqlite3_api->user_data\n#define sqlite3_value_blob             sqlite3_api->value_blob\n#define sqlite3_value_bytes            sqlite3_api->value_bytes\n#define sqlite3_value_bytes16          sqlite3_api->value_bytes16\n#define sqlite3_value_double           sqlite3_api->value_double\n#define sqlite3_value_int              sqlite3_api->value_int\n#define sqlite3_value_int64            sqlite3_api->value_int64\n#define sqlite3_value_numeric_type     sqlite3_api->value_numeric_type\n#define sqlite3_value_text             sqlite3_api->value_text\n#define sqlite3_value_text16           sqlite3_api->value_text16\n#define sqlite3_value_text16be         sqlite3_api->value_text16be\n#define sqlite3_value_text16le         sqlite3_api->value_text16le\n#define sqlite3_value_type             sqlite3_api->value_type\n#define sqlite3_vmprintf               sqlite3_api->vmprintf\n#define sqlite3_vsnprintf              sqlite3_api->xvsnprintf\n#define sqlite3_overload_function      sqlite3_api->overload_function\n#define sqlite3_prepare_v2             sqlite3_api->prepare_v2\n#define sqlite3_prepare16_v2           sqlite3_api->prepare16_v2\n#define sqlite3_clear_bindings         sqlite3_api->clear_bindings\n#define sqlite3_bind_zeroblob          sqlite3_api->bind_zeroblob\n#define sqlite3_blob_bytes             sqlite3_api->blob_bytes\n#define sqlite3_blob_close             sqlite3_api->blob_close\n#define sqlite3_blob_open              sqlite3_api->blob_open\n#define sqlite3_blob_read              sqlite3_api->blob_read\n#define sqlite3_blob_write             sqlite3_api->blob_write\n#define sqlite3_create_collation_v2    sqlite3_api->create_collation_v2\n#define sqlite3_file_control           sqlite3_api->file_control\n#define sqlite3_memory_highwater       sqlite3_api->memory_highwater\n#define sqlite3_memory_used            sqlite3_api->memory_used\n#define sqlite3_mutex_alloc            sqlite3_api->mutex_alloc\n#define sqlite3_mutex_enter            sqlite3_api->mutex_enter\n#define sqlite3_mutex_free             sqlite3_api->mutex_free\n#define sqlite3_mutex_leave            sqlite3_api->mutex_leave\n#define sqlite3_mutex_try              sqlite3_api->mutex_try\n#define sqlite3_open_v2                sqlite3_api->open_v2\n#define sqlite3_release_memory         sqlite3_api->release_memory\n#define sqlite3_result_error_nomem     sqlite3_api->result_error_nomem\n#define sqlite3_result_error_toobig    sqlite3_api->result_error_toobig\n#define sqlite3_sleep                  sqlite3_api->sleep\n#define sqlite3_soft_heap_limit        sqlite3_api->soft_heap_limit\n#define sqlite3_vfs_find               sqlite3_api->vfs_find\n#define sqlite3_vfs_register           sqlite3_api->vfs_register\n#define sqlite3_vfs_unregister         sqlite3_api->vfs_unregister\n#define sqlite3_threadsafe             sqlite3_api->xthreadsafe\n#define sqlite3_result_zeroblob        sqlite3_api->result_zeroblob\n#define sqlite3_result_error_code      sqlite3_api->result_error_code\n#define sqlite3_test_control           sqlite3_api->test_control\n#define sqlite3_randomness             sqlite3_api->randomness\n#define sqlite3_context_db_handle      sqlite3_api->context_db_handle\n#define sqlite3_extended_result_codes  sqlite3_api->extended_result_codes\n#define sqlite3_limit                  sqlite3_api->limit\n#define sqlite3_next_stmt              sqlite3_api->next_stmt\n#define sqlite3_sql                    sqlite3_api->sql\n#define sqlite3_status                 sqlite3_api->status\n#define sqlite3_backup_finish          sqlite3_api->backup_finish\n#define sqlite3_backup_init            sqlite3_api->backup_init\n#define sqlite3_backup_pagecount       sqlite3_api->backup_pagecount\n#define sqlite3_backup_remaining       sqlite3_api->backup_remaining\n#define sqlite3_backup_step            sqlite3_api->backup_step\n#define sqlite3_compileoption_get      sqlite3_api->compileoption_get\n#define sqlite3_compileoption_used     sqlite3_api->compileoption_used\n#define sqlite3_create_function_v2     sqlite3_api->create_function_v2\n#define sqlite3_db_config              sqlite3_api->db_config\n#define sqlite3_db_mutex               sqlite3_api->db_mutex\n#define sqlite3_db_status              sqlite3_api->db_status\n#define sqlite3_extended_errcode       sqlite3_api->extended_errcode\n#define sqlite3_log                    sqlite3_api->log\n#define sqlite3_soft_heap_limit64      sqlite3_api->soft_heap_limit64\n#define sqlite3_sourceid               sqlite3_api->sourceid\n#define sqlite3_stmt_status            sqlite3_api->stmt_status\n#define sqlite3_strnicmp               sqlite3_api->strnicmp\n#define sqlite3_unlock_notify          sqlite3_api->unlock_notify\n#define sqlite3_wal_autocheckpoint     sqlite3_api->wal_autocheckpoint\n#define sqlite3_wal_checkpoint         sqlite3_api->wal_checkpoint\n#define sqlite3_wal_hook               sqlite3_api->wal_hook\n#define sqlite3_blob_reopen            sqlite3_api->blob_reopen\n#define sqlite3_vtab_config            sqlite3_api->vtab_config\n#define sqlite3_vtab_on_conflict       sqlite3_api->vtab_on_conflict\n/* Version 3.7.16 and later */\n#define sqlite3_close_v2               sqlite3_api->close_v2\n#define sqlite3_db_filename            sqlite3_api->db_filename\n#define sqlite3_db_readonly            sqlite3_api->db_readonly\n#define sqlite3_db_release_memory      sqlite3_api->db_release_memory\n#define sqlite3_errstr                 sqlite3_api->errstr\n#define sqlite3_stmt_busy              sqlite3_api->stmt_busy\n#define sqlite3_stmt_readonly          sqlite3_api->stmt_readonly\n#define sqlite3_stricmp                sqlite3_api->stricmp\n#define sqlite3_uri_boolean            sqlite3_api->uri_boolean\n#define sqlite3_uri_int64              sqlite3_api->uri_int64\n#define sqlite3_uri_parameter          sqlite3_api->uri_parameter\n#define sqlite3_uri_vsnprintf          sqlite3_api->xvsnprintf\n#define sqlite3_wal_checkpoint_v2      sqlite3_api->wal_checkpoint_v2\n/* Version 3.8.7 and later */\n#define sqlite3_auto_extension         sqlite3_api->auto_extension\n#define sqlite3_bind_blob64            sqlite3_api->bind_blob64\n#define sqlite3_bind_text64            sqlite3_api->bind_text64\n#define sqlite3_cancel_auto_extension  sqlite3_api->cancel_auto_extension\n#define sqlite3_load_extension         sqlite3_api->load_extension\n#define sqlite3_malloc64               sqlite3_api->malloc64\n#define sqlite3_msize                  sqlite3_api->msize\n#define sqlite3_realloc64              sqlite3_api->realloc64\n#define sqlite3_reset_auto_extension   sqlite3_api->reset_auto_extension\n#define sqlite3_result_blob64          sqlite3_api->result_blob64\n#define sqlite3_result_text64          sqlite3_api->result_text64\n#define sqlite3_strglob                sqlite3_api->strglob\n/* Version 3.8.11 and later */\n#define sqlite3_value_dup              sqlite3_api->value_dup\n#define sqlite3_value_free             sqlite3_api->value_free\n#define sqlite3_result_zeroblob64      sqlite3_api->result_zeroblob64\n#define sqlite3_bind_zeroblob64        sqlite3_api->bind_zeroblob64\n/* Version 3.9.0 and later */\n#define sqlite3_value_subtype          sqlite3_api->value_subtype\n#define sqlite3_result_subtype         sqlite3_api->result_subtype\n/* Version 3.10.0 and later */\n#define sqlite3_status64               sqlite3_api->status64\n#define sqlite3_strlike                sqlite3_api->strlike\n#define sqlite3_db_cacheflush          sqlite3_api->db_cacheflush\n/* Version 3.12.0 and later */\n#define sqlite3_system_errno           sqlite3_api->system_errno\n/* Version 3.14.0 and later */\n#define sqlite3_trace_v2               sqlite3_api->trace_v2\n#define sqlite3_expanded_sql           sqlite3_api->expanded_sql\n/* Version 3.18.0 and later */\n#define sqlite3_set_last_insert_rowid  sqlite3_api->set_last_insert_rowid\n/* Version 3.20.0 and later */\n#define sqlite3_prepare_v3             sqlite3_api->prepare_v3\n#define sqlite3_prepare16_v3           sqlite3_api->prepare16_v3\n#define sqlite3_bind_pointer           sqlite3_api->bind_pointer\n#define sqlite3_result_pointer         sqlite3_api->result_pointer\n#define sqlite3_value_pointer          sqlite3_api->value_pointer\n/* Version 3.22.0 and later */\n#define sqlite3_vtab_nochange          sqlite3_api->vtab_nochange\n#define sqlite3_value_nochange         sqlite3_api->value_nochange\n#define sqlite3_vtab_collation         sqlite3_api->vtab_collation\n/* Version 3.24.0 and later */\n#define sqlite3_keyword_count          sqlite3_api->keyword_count\n#define sqlite3_keyword_name           sqlite3_api->keyword_name\n#define sqlite3_keyword_check          sqlite3_api->keyword_check\n#define sqlite3_str_new                sqlite3_api->str_new\n#define sqlite3_str_finish             sqlite3_api->str_finish\n#define sqlite3_str_appendf            sqlite3_api->str_appendf\n#define sqlite3_str_vappendf           sqlite3_api->str_vappendf\n#define sqlite3_str_append             sqlite3_api->str_append\n#define sqlite3_str_appendall          sqlite3_api->str_appendall\n#define sqlite3_str_appendchar         sqlite3_api->str_appendchar\n#define sqlite3_str_reset              sqlite3_api->str_reset\n#define sqlite3_str_errcode            sqlite3_api->str_errcode\n#define sqlite3_str_length             sqlite3_api->str_length\n#define sqlite3_str_value              sqlite3_api->str_value\n/* Version 3.25.0 and later */\n#define sqlite3_create_window_function sqlite3_api->create_window_function\n/* Version 3.26.0 and later */\n#define sqlite3_normalized_sql         sqlite3_api->normalized_sql\n#endif /* !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION) */\n\n#if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)\n  /* This case when the file really is being compiled as a loadable \n  ** extension */\n# define SQLITE_EXTENSION_INIT1     const sqlite3_api_routines *sqlite3_api=0;\n# define SQLITE_EXTENSION_INIT2(v)  sqlite3_api=v;\n# define SQLITE_EXTENSION_INIT3     \\\n    extern const sqlite3_api_routines *sqlite3_api;\n#else\n  /* This case when the file is being statically linked into the \n  ** application */\n# define SQLITE_EXTENSION_INIT1     /*no-op*/\n# define SQLITE_EXTENSION_INIT2(v)  (void)v; /* unused parameter */\n# define SQLITE_EXTENSION_INIT3     /*no-op*/\n#endif\n\n#endif /* SQLITE3EXT_H */\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}