{
  "metadata": {
    "timestamp": 1736710056672,
    "page": 672,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "iPlug2/iPlug2",
      "stars": 1967,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.240234375,
          "content": "AccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands: true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: true\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: false\nBraceWrapping:\n  AfterClass: true\n  AfterControlStatement: true\n  AfterEnum: true\n  AfterFunction: true\n  AfterNamespace: true\n  AfterStruct: true\n  AfterUnion: true\n  BeforeCatch: true\n  BeforeElse: true\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeComma\nBreakStringLiterals: true\nColumnLimit: 200\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 2\nContinuationIndentWidth: 2\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nFixNamespaceComments: true\nIndentCaseLabels: false\nIndentPPDirectives: BeforeHash\nIndentWidth: 2\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: true\nMaxEmptyLinesToKeep: 2\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakBeforeFirstCallParameter: 0\nPenaltyReturnTypeOnItsOwnLine: 1000\nPointerAlignment: Left\nReflowComments: true\nSortIncludes: true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard: Cpp11\nUseTab: Never\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.16015625,
          "content": "# top-most EditorConfig for IPlugQuake\nroot = true\n\n[*.*]\n\nend_of_line = lf\n\ncharset = utf-8\n\nindent_style = space\n\nindent_size = 2\n\ntrim_trailing_whitespace = true"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.783203125,
          "content": "*        -text\n*.c      text=auto\n*.cpp    text=auto\n*.cc     text=auto\n*.h      text=auto\n*.hpp    text=auto\n*.m      text=auto\n*.mm     text=auto\n\n*.eel    text=auto\n*.php    text=auto\n*.txt    text=auto\n*.py     text=auto\n\n*.bat    text eol=crlf\n*.cmd    text eol=crlf\n\n*.dsp               text eol=crlf\n*.dsw               text eol=crlf\n*.sln               text eol=crlf\n*.vcxproj           text eol=crlf\n*.vcxproj.filters   text eol=crlf\n*.vcxproj.user      text eol=crlf\n*.props             text eol=crlf\n*.rc                text eol=crlf\n\n*.command           text eol=lf\n*.sh                text eol=lf\n*.pbxproj           text eol=lf\n*.xcconfig          text eol=lf\n*.xcworkspacedata   text eol=lf\n*.plist             text eol=lf\nMakefile            text eol=lf\n.mk                 text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.70703125,
          "content": "*.vs\n*.o\n*.ipch\n*.lnk\n*.exe\n*.opensdf\n*.cache\n*.sdf\n*.zip\n*.suo\n*.ncb\n*.vcproj.*\n*.pkg\n*.dmg\n*.depend\n*.layout\n*.mode1v3\n*.db\n*.LSOverride\n*xcuserdata*\n*.xcschememanagement.plist\n_*\n*.db-shm\n*.db-wal\n*.opendb\n*.pyc\n*.aps\n*.RPP-bak\nIcon?\n.DS_Stor*\nbuild-*\nDependencies/IPlug/CLAP_HELPERS/*\nDependencies/IPlug/CLAP_SDK/*\nDependencies/IPlug/VST3_SDK/*\nDependencies/IPlug/VST2_SDK/*\nDependencies/IPlug/AAX_SDK/*\nDependencies/IPlug/WAM_AWP/*\nDependencies/IPlug/WAM_SDK/*\nDependencies/Build/*\nDocumentation/html\nDocumentation/doxygen_warnings.txt\nExamples/build_errors.log\nProjects/*\nExamples/IPlugSwift/Pods\nPodFile.lock\n*/*/.vscode/ipch\nExamples/*/EBWebView\nExamples/*/packages\nExamples/IPlugConvoEngine/r8brain\n**/node_modules\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "Examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "IGraphics",
          "type": "tree",
          "content": null
        },
        {
          "name": "IPlug",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 2.1318359375,
          "content": "iPlug 2 C++ Plug-in Framework. \n\nCopyright (C) the iPlug 2 Developers. Portions copyright other contributors, see each source file for more information.\n\nBased on WDL-OL/iPlug by Oli Larkin (2011-2018), and the original iPlug v1 (2008) by John Schwartz / Cockos\n\nLICENSE:\n\nThis software is provided 'as-is', without any express or implied warranty.  In no event will the authors be held liable for any damages arising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.\n1. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.\n1. This notice may not be removed or altered from any source distribution.\n\n--------------------------------------------------------------------------------\n\niPlug 2 includes the following 3rd party libraries (see each license info):\n\n* Cockos WDL https://www.cockos.com/wdl (Zlib-like license)\n* NanoVG https://github.com/memononen/nanovg (Zlib)\n* NanoSVG https://github.com/memononen/nanosvg (Zlib)\n* MetalNanoVG https://github.com/ollix/MetalNanoVG (MIT)\n* RTAudio https://www.music.mcgill.ca/~gary/rtaudio (MIT)\n* RTMidi https://www.music.mcgill.ca/~gary/rtmidi (MIT)\n\nIt can optionally use the Skia library for graphics rendering (BSD)\n\nCheck the individual source files for more information. It is up to you to comply with the licenses of every source file you use, so please the dependencies for any more information, especially regarding sub dependencies.\n\n--------------------------------------------------------------------------------\n\niPlug2 WebView Library\n\nNOTE: iPlug2 WebView Library is licensed under the MIT License. See LICENSE.txt in the IPlug/Extras/WebView folder for more information. \nYou must include the original copyright notice in any redistribution."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.1181640625,
          "content": "# iPlug 2\n### C++ audio plug-in framework for desktop, mobile (iOS) and web\n\n[![Build Status](https://dev.azure.com/iplug2/iPlug2/_apis/build/status/iPlug2?branchName=master)](https://dev.azure.com/iplug2/iPlug2/_build/latest?definitionId=2&branchName=master)\n\niPlug 2 is a simple-to-use C++ framework for developing cross-platform audio plug-ins/apps and targeting multiple plug-in APIs with the same minimalistic code. It abstracts an audio plug-in (IPlug) and its drawing engine/GUI toolkit (IGraphics). IGraphics is a simple graphics abstraction layer with good performance which contains a collection of common controls well suited for audio plug-ins, either using bitmap or vector graphics. IGraphics can use [NanoVG](https://github.com/memononen/nanovg), [Skia](https://skia.org/) and the HTML5 Canvas behind the scenes, providing many options depending on your requirements. Alternatively, iPlug2 can be used with other UI toolkits. [Examples](https://github.com/iPlug2/iPlug2/tree/master/Examples) are included showing how you can use technologies such as HTML/CSS or SwiftUI on top of a C++ DSP layer.\n\nThe recommended starting point for an iPlug2 project in 2024 can be found in a separate repo, [iPlug2OOS (out-of-source)](https://github.com/iPlug2/iPlug2OOS)\n\n[iPlug2GPT](https://chat.openai.com/g/g-doomto3Ff-iplug2gpt) is a customized GPT that you can use to learn how to use iPlug2.\n\niPlug2 API Documentation is published [here](https://iplug2.github.io/docs) and be sure to check out the [iPlug2 Wiki](https://github.com/iPlug2/iPlug2/wiki)\n\nThe original version of iPlug was released in 2008 as part of Cockos' WDL library. iPlug 2 (2018) is a substantial reworking that brings multiple vector graphics backends to IGraphics (including GPU accelerated options and HiDPI/scaling), a better approach to concurrency, support for distributed plug-in formats and compiling to WebAssembly via [emscripten](https://github.com/kripken/emscripten), amongst many other things.\n\niPlug 2 targets the [CLAP](https://github.com/free-audio/clap), VST2, VST3, AUv2, AUv3, AAX (Native) and the [Web Audio Module](https://webaudiomodules.org) (WAM) plug-in APIs. It can also produce standalone win32/macOS apps with audio and MIDI I/O, as well as [Reaper extensions](https://www.reaper.fm/sdk/plugin/plugin.php). Windows 8, macOS 10.13, and iOS 14 are the official minimum target platforms, but depending on the graphics backend used, you may be able to make it work on earlier operating systems.\n\niPlug 2 is licensed with a liberal zlib-like [license](https://github.com/iPlug2/iPlug2/blob/master/LICENSE.txt), which means that it is free to use in closed source projects and is free from corporate interference.\n\niPlug2 discussions happen at the [iPlug2 forum](https://iplug2.discourse.group) and on the [iPlug2 discord server](https://discord.gg/7h9HW8N9Ke) - see you there!\n\nWe welcome any help with bug fixes, features or documentation.\n\nYou can help support the project financially via [github sponsors](https://github.com/sponsors/iplug2). With regular financial support, more time can be spent maintaining and improving the project. Even small contributions are very much appreciated.\n"
        },
        {
          "name": "Scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "WDL",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 2.732421875,
          "content": "variables:\n  build_deps: false # set true to build optional dependencies, if false, pre-built versions are downloaded\n\n  #PLATFORMS\n  build_web: false # build web audio module versions of projects\n  build_mac: true # build mac binaries\n  build_win: true # build windows binaries\n  build_ios: true # build ios binaries\n\n  #FORMATS\n  build_app: true # build standalone app\n  build_vst3: true # build VST3 format plugins\n  build_auv2: true # build AUv2 format plugins\n  build_aax: false # build AAX format plugins ( must have AAX_SDK secure file in azure pipeline )\n  build_vst2: false # build VST2 format plugins ( must have VST2_SDK secure file in azure pipeline )\n\n  #TESTS\n  test_projects: false # test plug-ins with pluginval, auval, vstvalidator\n\n  #MISC\n  configuration: 'Release' # the configuration to build, e.g. 'Debug', 'Release', 'Tracer'\n\n  publish_downloads: false # publish project binaries to publish_site github releases\n  publish_pages: true # publish web audio modules to github publish_site\n  publish_docs: false # publish documentation to docs_site // NOT YET IMPLEMENTED\n\n  publish_site: 'iPlug2/iPlug2.github.io'\n  docs_site: 'iPlug2/docs'\n\ntrigger: none\n\npr:\n- master\n\njobs:\n# get_tree.yml\n# Checks out the iPlug2 repository and installs various dependencies such as the VST3 and WAM SDKs.\n# Also installs various secure dependencies such as the VST2 and AAX SDKs. This will require editing if you have not set those secure files in Azure pipelines.\n# If build_deps == false, downloads optional pre-built dependencies IPLUG2_DEPS_MAC and IPLUG2_DEPS_WIN, unzips them in the src tree\n# Creates an artifact 'SRC' containing a populated iPlug 2 folder heirarchy\n- template: Scripts/ci/get_src_tree.yml\n\n# build_deps.yml\n# If build_deps == true, use the scripts in iPlug2/Dependencies to build the optional dependencies\n# Creates three artifacts IPLUG2_DEPS_MAC, IPLUG2_DEPS_WIN, and IPLUG2_DEPS_IOS \n# which are published on the releases page of the iPlug2 github\n# https://github.com/iPlug2/iPlug2/releases\n- template: Scripts/ci/build_deps.yml\n\n# build_projects.yml\n# Builds each of the projects listed in projects.yml, for multiple platforms\n# Creates artifacts for projects/platforms/graphics backends\n- template: Scripts/ci/build_projects.yml\n\n# test_projects.yml\n# Tests each of the projects listed in projects.yml, for multiple platforms\n- template: Scripts/ci/test_projects.yml\n\n# publish_site.yml\n# if publish_pages == true, publishes the WAMs hosted on https://iplug2.github.io/\n# if publish_downloads == true, publises the binaries for the examples hosted on the releases page of the iPlug2 website github https://github.com/iPlug2/iPlug2.github.io/releases\n# this Job will produce non-fatal errors when artefacts are not found\n- template: Scripts/ci/publish_site.yml\n"
        },
        {
          "name": "common-ios.xcconfig",
          "type": "blob",
          "size": 3.8681640625,
          "content": "// this is used for macOS Developer ID / Appstore code-signing\nCERTIFICATE_ID = Oliver Larkin\nDEVELOPMENT_TEAM = 686EDA2T8T // log in to developer.apple.com and see the end of the URL e.g. https://developer.apple.com/account/#/overview/686EDA2T8T\n\n// Which compiler to use\nCOMPILER = com.apple.compilers.llvm.clang.1_0\n\n// which osx sdk to compile against - defaults to latest SDK available\nBASE_SDK_IOS = iphoneos // latest SDK\n\nCLANG_CXX_LANGUAGE_STANDARD = c++17\nCLANG_CXX_LIBRARY = libc++\n\nCLANG_WARN_DOCUMENTATION_COMMENTS = NO\n\nCLANG_ENABLE_OBJC_WEAK = YES\n\n// the minimum OS to support\nIPHONEOS_DEPLOYMENT_TARGET = 14\n\nSHARED_PRECOMPS_DIR = $(TARGET_BUILD_DIR)/PCH\n\n// BUILD SETTINGS TO ENABLE DIFFERENT PREPROCESSOR MACROS, INCLUDE PATHS AND FUNCIONALITY-------------------------------\n\n// ***** PREPROCESSOR MACROS\n\n// macros for all debug/release/tracer builds\nDEBUG_DEFS = DEVELOPMENT=1 DEBUG=1 _DEBUG\nRELEASE_DEFS = RELEASE=1 NDEBUG=1\nTRACER_DEFS = $DEBUG_DEFS TRACER_BUILD // here you can change if a TRACER build is a DEBUG or RELEASE build\n\n// macros for individual plug-in format builds etc\nALL_DEFS = NOMINMAX\nAUv3_DEFS = AUv3_API IPLUG_EDITOR=1 IPLUG_DSP=1\n\n// ***** HEADER INCLUDE PATHS\n// Where the SDKs etc. are located in relation to the plug-in Xcode project (which is in the projects subfolder of an IPlug project)\n\n// the top level iPlug2 folder e.g. where this common.xcconfig is\nPROJECT_ROOT = $(SRCROOT)/..\n\nDEPS_PATH = $(IPLUG2_ROOT)/Dependencies\n\n// IPlug dependencies\nWDL_PATH = $(IPLUG2_ROOT)/WDL\nIPLUG_PATH = $(IPLUG2_ROOT)/IPlug\nAUv3_PATH = $(IPLUG_PATH)/AUv3\nSWELL_PATH = $(WDL_PATH)/swell\n\nEXTRAS_PATH = $(IPLUG_PATH)/Extras\nEXTRAS_INC_PATHS = $(EXTRAS_PATH) $(EXTRAS_PATH)/OSC $(EXTRAS_PATH)/HIIR\n\nJSON_INC_PATH = $(DEPS_PATH)/Extras/nlohmann\n\n// this build setting is included at the xcode project level, since we need all these include paths\nIPLUG_INC_PATHS = $(PROJECT_ROOT) $(WDL_PATH) $(IPLUG_PATH) $(EXTRAS_INC_PATHS) $(AUv3_PATH) $(JSON_INC_PATH)\n\nBUILT_LIBS_PATH_iphoneos = $(DEPS_PATH)/Build/ios\nBUILT_LIBS_PATH_iphonesimulator = $(DEPS_PATH)/Build/ios_sim\nBUILT_LIBS_PATH = $(BUILT_LIBS_PATH_$(PLATFORM_NAME))\n\nBUILT_LIBS_INC_PATH = $(BUILT_LIBS_PATH)/include\nBUILT_LIBS_LIB_PATH = $(BUILT_LIBS_PATH)/lib/$CURRENT_ARCH\n\nIGRAPHICS_PATH = $(IPLUG2_ROOT)/IGraphics\nCONTROLS_PATH = $(IGRAPHICS_PATH)/Controls\nPLATFORMS_PATH = $(IGRAPHICS_PATH)/Platforms\nDRAWING_PATH = $(IGRAPHICS_PATH)/Drawing\n\n// IGraphics dependencies\nIGRAPHICS_DEPS_PATH = $(DEPS_PATH)/IGraphics\nNSVG_PATH = $(IGRAPHICS_DEPS_PATH)/NanoSVG/src\nNVG_PATH = $(IGRAPHICS_DEPS_PATH)/NanoVG/src\nNVGMTL_PATH = $(IGRAPHICS_DEPS_PATH)/MetalNanoVG/src\nSTB_PATH = $(DEPS_PATH)/IGraphics/STB\nYOGA_PATH = $(DEPS_PATH)/IGraphics/yoga\n\nSKIA_PATH = $(DEPS_PATH)/Build/src/skia\n\nSKIA_INC_PATHS = $(SKIA_PATH)\n\nYOGA_INC_PATHS = $(YOGA_PATH) $(YOGA_PATH)/yoga\n\n// you can optionally include this build setting, by adding it to EXTRA_INC_PATHS in MyProject.xcconfig in order to get all varieties of IGraphics suppor\nIGRAPHICS_INC_PATHS = $(IGRAPHICS_PATH) $(CONTROLS_PATH) $(PLATFORMS_PATH) $(DRAWING_PATH) $(NSVG_PATH) $(NVG_PATH) $(NVGMTL_PATH) $(SKIA_INC_PATHS) $(FT_PATH) $(STB_PATH) $(YOGA_INC_PATHS)\n\nLIB_SKIA = $(BUILT_LIBS_LIB_PATH)/libskia.a\nLIB_SKOTTIE = $(BUILT_LIBS_LIB_PATH)/libskottie.a\nLIB_SKSG = $(BUILT_LIBS_LIB_PATH)/libsksg.a\nLIB_SKSHAPER = $(BUILT_LIBS_LIB_PATH)/libskshaper.a\nLIB_SKPARAGRAPH = $(BUILT_LIBS_LIB_PATH)/libskparagraph.a\nLIB_SKUNICODE = $(BUILT_LIBS_LIB_PATH)/libskunicode_core.a $(BUILT_LIBS_LIB_PATH)/libskunicode_icu.a\nLIB_SVG = $(BUILT_LIBS_LIB_PATH)/libsvg.a\n\nSKIA_LNK_FLAGS = $(LIB_SKIA) $(LIB_SKOTTIE) $(LIB_SKSG) $(LIB_SKSHAPER) $(LIB_SKPARAGRAPH) $(LIB_SKUNICODE) $(LIB_SVG)\nIGRAPHICS_LNK_FLAGS = $(SKIA_LNK_FLAGS)\n\nAUv3_FRAMEWORKS = -framework AudioToolbox -framework AVFoundation -framework CoreAudioKit -framework QuartzCore -framework UIKit -framework CoreText -framework CoreGraphics -framework UniformTypeIdentifiers\n\n\n"
        },
        {
          "name": "common-mac.xcconfig",
          "type": "blob",
          "size": 6.919921875,
          "content": "// this is used for macOS Developer ID / Appstore code-signing\nCERTIFICATE_ID = Oliver Larkin\nDEVELOPMENT_TEAM = 686EDA2T8T // log in to developer.apple.com and see the end of the URL e.g. https://developer.apple.com/account/#/overview/686EDA2T8T\n\n// Which compiler to use\n//COMPILER = com.intel.compilers.icc.12_1_0\nCOMPILER = com.apple.compilers.llvm.clang.1_0\n\n// which osx sdk to compile against - defaults to latest SDK available\nBASE_SDK_MAC = macosx // latest SDK\n\nCLANG_CXX_LANGUAGE_STANDARD = c++17\nCLANG_CXX_LIBRARY = libc++\n\nCLANG_WARN_DOCUMENTATION_COMMENTS = NO\n\nCLANG_ENABLE_OBJC_WEAK = YES\n\n// the minimum OS to support\nMACOSX_DEPLOYMENT_TARGET = 10.13\n\nSHARED_PRECOMPS_DIR = $(TARGET_BUILD_DIR)/PCH\n\n// BUILD SETTINGS TO ENABLE DIFFERENT PREPROCESSOR MACROS, INCLUDE PATHS AND FUNCIONALITY-------------------------------\n\n// ***** PREPROCESSOR MACROS\n\n// macros for all debug/release/tracer builds\nDEBUG_DEFS = DEVELOPMENT=1 DEBUG=1 _DEBUG\nRELEASE_DEFS = RELEASE=1 NDEBUG=1\nTRACER_DEFS = $DEBUG_DEFS TRACER_BUILD // here you can change if a TRACER build is a DEBUG or RELEASE build\n\n// macros for individual plug-in format builds etc\nALL_DEFS = NOMINMAX \nPLUGIN_DEFS = SWELL_CLEANUP_ON_UNLOAD // macros for all plug-in builds\nVST2_DEFS = VST2_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=1\nVST3_DEFS = VST3_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=1\nVST3C_DEFS = VST3C_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=0\nVST3P_DEFS = VST3P_API $PLUGIN_DEFS IPLUG_EDITOR=0 IPLUG_DSP=1 //NO_IGRAPHICS\nAU_DEFS = AU_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=1\nAUv3_DEFS = AUv3_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=1\nAAX_DEFS = AAX_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=1\nAPP_DEFS = APP_API __MACOSX_CORE__ IPLUG_EDITOR=1 IPLUG_DSP=1 SWELL_COMPILED// __UNIX_JACK__\nCLAP_DEFS = CLAP_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=1\n\n// ***** HEADER INCLUDE PATHS\n// Where the SDKs etc. are located in relation to the plug-in Xcode project (which is in the projects subfolder of an IPlug project)\n\n// the top level iPlug2 folder e.g. where this common-mac.xcconfig is\n// should be specified in the project's xcconfig with a build settng IPLUG2_ROOT\n\nPROJECT_ROOT = $(SRCROOT)/..\n\nPKGMAN_PATH = /usr/local\n\nDEPS_PATH = $(IPLUG2_ROOT)/Dependencies\n\n// if you want to use the homebrew or macports package managers, rather than building static libraries yourself (not advised) you can modify the BUILT_LIBS_PATH build setting to point to PKGMAN_PATH\nBUILT_LIBS_PATH = $(DEPS_PATH)/Build/mac\nBUILT_LIBS_INC_PATH = $(BUILT_LIBS_PATH)/include\nBUILT_LIBS_LIB_PATH = $(BUILT_LIBS_PATH)/lib\n\n// IPlug dependencies\nSCRIPTS_PATH = $(IPLUG2_ROOT)/Scripts\nWDL_PATH = $(IPLUG2_ROOT)/WDL\nSWELL_PATH = $(WDL_PATH)/swell\nIPLUG_PATH = $(IPLUG2_ROOT)/IPlug\nRTAUDIO_PATH = $(DEPS_PATH)/IPlug/RTAudio\nRTMIDI_PATH = $(DEPS_PATH)/IPlug/RTMidi\n\nEXTRAS_PATH = $(IPLUG_PATH)/Extras\n\nJSON_INC_PATH = $(DEPS_PATH)/Extras/nlohmann\n\nEXTRAS_INC_PATHS = $(EXTRAS_PATH) $(EXTRAS_PATH)/Synth $(EXTRAS_PATH)/OSC $(EXTRAS_PATH)/HIIR $(JSON11_PATH) $(RTAUDIO_PATH) $(RTMIDI_PATH) $(JSON_INC_PATH)\n\n// Plug-in SDK paths\nVST2_SDK = $(DEPS_PATH)/IPlug/VST2_SDK\nVST3_SDK = $(DEPS_PATH)/IPlug/VST3_SDK\nAAX_SDK = $(DEPS_PATH)/IPlug/AAX_SDK\nREAPER_SDK = $(DEPS_PATH)/IPlug/REAPER_SDK\nCLAP_SDK = $(DEPS_PATH)/IPlug/CLAP_SDK\nCLAP_HELPERS = $(DEPS_PATH)/IPlug/CLAP_HELPERS\n\n// this build setting is included at the xcode project level, since we need all these include paths\nIPLUG_INC_PATHS = $(PROJECT_ROOT) $(WDL_PATH) $(SWELL_PATH) $(SWELL_FOR_IPLUG_PATH) $(IPLUG_PATH) $(EXTRAS_INC_PATHS)\n\nCLAP_INC_PATHS = $(CLAP_SDK)/include $(CLAP_HELPERS)/include/clap/helpers\n\nIGRAPHICS_PATH = $(IPLUG2_ROOT)/IGraphics\n\n// IGraphics dependencies\nIGRAPHICS_DEPS_PATH = $(DEPS_PATH)/IGraphics\nNSVG_PATH = $(IGRAPHICS_DEPS_PATH)/NanoSVG/src\nNVG_PATH = $(IGRAPHICS_DEPS_PATH)/NanoVG/src\nNVGMTL_PATH = $(IGRAPHICS_DEPS_PATH)/MetalNanoVG/src\nSTB_PATH = $(DEPS_PATH)/IGraphics/STB\nFT_PATH = $(BUILT_LIBS_INC_PATH)/freetype2\nSKIA_PATH = $(DEPS_PATH)/Build/src/skia\nYOGA_PATH = $(DEPS_PATH)/IGraphics/yoga\n\nSKIA_INC_PATHS = $(SKIA_PATH)\n\nYOGA_INC_PATHS = $(YOGA_PATH) $(YOGA_PATH)/yoga\n\n// you can optionally include this build setting, by adding it to EXTRA_INC_PATHS in MyProject.xcconfig in order to get all varieties of IGraphics support\nIGRAPHICS_INC_PATHS = $(IGRAPHICS_PATH) $(IGRAPHICS_PATH)/Controls $(IGRAPHICS_PATH)/Platforms $(IGRAPHICS_PATH)/Drawing $(IGRAPHICS_PATH)/Extras $(NSVG_PATH) $(NVG_PATH) $(NVGMTL_PATH) $(BUILT_LIBS_INC_PATH) $(FT_PATH) $(STB_PATH) $(SKIA_INC_PATHS) $(YOGA_INC_PATHS)\n\n// *****  LINKER/LIBRARY INCLUDE PATHS AND LINKER FLAGS\n\n//Static library Paths - on macOS we need to supply an absolute path to the static library, otherwise it will pick up a dynamic library with the same name\nLIB_FT = $(BUILT_LIBS_LIB_PATH)/libfreetype.a\nLIB_PNG = $(BUILT_LIBS_LIB_PATH)/libpng.a\nLIB_Z = $(BUILT_LIBS_LIB_PATH)/libz.a\nLIB_SKIA = $(BUILT_LIBS_LIB_PATH)/libskia.a\nLIB_SKOTTIE = $(BUILT_LIBS_LIB_PATH)/libskottie.a\nLIB_SKSG = $(BUILT_LIBS_LIB_PATH)/libsksg.a\nLIB_SKSHAPER = $(BUILT_LIBS_LIB_PATH)/libskshaper.a\nLIB_SKPARAGRAPH = $(BUILT_LIBS_LIB_PATH)/libskparagraph.a\nLIB_SKUNICODE = $(BUILT_LIBS_LIB_PATH)/libskunicode_core.a $(BUILT_LIBS_LIB_PATH)/libskunicode_icu.a\nLIB_SVG = $(BUILT_LIBS_LIB_PATH)/libsvg.a\n//LIB_YOGA = $(BUILT_LIBS_LIB_PATH)/libyoga.a\n\n\n//YOGA_LNK_FLAGS = $(LIB_YOGA)\n\n// you can optionally include this build setting, by adding it to EXTRA_LNK_FLAGS in your plug-ins xcconfig, in order to get all varieties of IGraphics support\nSKIA_LNK_FLAGS = $(LIB_SKIA) $(LIB_SKOTTIE) $(LIB_SKSG) $(LIB_SKSHAPER) $(LIB_SKPARAGRAPH) $(LIB_SKUNICODE) $(LIB_SVG)\nFREETYPE_LNK_FLAGS = $(LIB_FT) //$(LIB_PNG) $(LIB_Z)\nIGRAPHICS_LNK_FLAGS = $(SKIA_LNK_FLAGS) $(FREETYPE_LNK_FLAGS)\n\nALL_FRAMEWORKS = -framework Cocoa -framework Carbon -framework CoreFoundation -framework CoreData -framework Foundation -framework CoreServices -framework QuartzCore \nAPP_FRAMEWORKS = -framework AppKit -framework CoreMIDI -framework CoreAudio\nAU_FRAMEWORKS = -framework AudioUnit -framework AudioToolbox -framework CoreAudio -framework CoreMIDI\nAUv3_FRAMEWORKS = -framework AudioToolbox -framework AVFoundation -framework CoreAudio -framework CoreAudioKit\n\n\n// ***** BINARY OUTPUT LOCATIONS ------------------------------------------------------------------------------------------------------------------------\n\n// Where to build the plug-ins / app bundles ...\n// By default iPlug2 builds to user plug-in folder\n// You can also build to the system plug-in folder, but you will need to explicitly add write permissions to build stuff there\n// The AAX folder should be the location of the PT Dev build plug-ins folder, installer scripts will copy to the non-developer build\n\nVST2_PATH = $(HOME)/Library/Audio/Plug-Ins/VST\nVST3_PATH = $(HOME)/Library/Audio/Plug-Ins/VST3\nCLAP_PATH = $(HOME)/Library/Audio/Plug-Ins/CLAP\nAU_PATH = $(HOME)/Library/Audio/Plug-Ins/Components\nAAX_PATH = /Library/Application Support/Avid/Audio/Plug-Ins\nAPP_PATH = $(HOME)/Applications\nREAPER_EXT_PATH = $(HOME)/Library/Application Support/REAPER/UserPlugins\n"
        },
        {
          "name": "common-web.mk",
          "type": "blob",
          "size": 3.3642578125,
          "content": "PROJECT_ROOT = $(PWD)/..\nDEPS_PATH = $(IPLUG2_ROOT)/Dependencies\nWAM_SDK_PATH = $(DEPS_PATH)/IPlug/WAM_SDK/wamsdk\nWDL_PATH = $(IPLUG2_ROOT)/WDL\nIPLUG_PATH = $(IPLUG2_ROOT)/IPlug\nSWELL_PATH = $(WDL_PATH)/swell\nIGRAPHICS_PATH = $(IPLUG2_ROOT)/IGraphics\nCONTROLS_PATH = $(IGRAPHICS_PATH)/Controls\nPLATFORMS_PATH = $(IGRAPHICS_PATH)/Platforms\nDRAWING_PATH = $(IGRAPHICS_PATH)/Drawing\nIGRAPHICS_EXTRAS_PATH = $(IGRAPHICS_PATH)/Extras\nIPLUG_EXTRAS_PATH = $(IPLUG_PATH)/Extras\nIPLUG_SYNTH_PATH = $(IPLUG_EXTRAS_PATH)/Synth\nIPLUG_WEB_PATH = $(IPLUG_PATH)/WEB\nNANOVG_PATH = $(DEPS_PATH)/IGraphics/NanoVG/src\nNANOSVG_PATH = $(DEPS_PATH)/IGraphics/NanoSVG/src\nYOGA_PATH = $(DEPS_PATH)/IGraphics/yoga\nSTB_PATH = $(DEPS_PATH)/IGraphics/STB\n\nIPLUG_SRC = $(IPLUG_PATH)/IPlugAPIBase.cpp \\\n\t$(IPLUG_PATH)/IPlugParameter.cpp \\\n\t$(IPLUG_PATH)/IPlugPluginBase.cpp \\\n\t$(IPLUG_PATH)/IPlugPaths.cpp \\\n\t$(IPLUG_PATH)/IPlugTimer.cpp\n\nIGRAPHICS_SRC = $(IGRAPHICS_PATH)/IGraphics.cpp \\\n\t$(IGRAPHICS_PATH)/IControl.cpp \\\n\t$(CONTROLS_PATH)/*.cpp \\\n\t$(PLATFORMS_PATH)/IGraphicsWeb.cpp\n\nINCLUDE_PATHS = -I$(PROJECT_ROOT) \\\n-I$(WAM_SDK_PATH) \\\n-I$(WDL_PATH) \\\n-I$(SWELL_PATH) \\\n-I$(IPLUG_PATH) \\\n-I$(IPLUG_EXTRAS_PATH) \\\n-I$(IPLUG_WEB_PATH) \\\n-I$(IGRAPHICS_PATH) \\\n-I$(DRAWING_PATH) \\\n-I$(CONTROLS_PATH) \\\n-I$(PLATFORMS_PATH) \\\n-I$(IGRAPHICS_EXTRAS_PATH) \\\n-I$(NANOVG_PATH) \\\n-I$(NANOSVG_PATH) \\\n-I$(STB_PATH) \\\n-I$(YOGA_PATH) \\\n-I$(YOGA_PATH)/yoga\n\n#every cpp file that is needed for both WASM modules\nSRC = $(IPLUG_SRC)\n\n#every cpp file that is needed for the WAM audio processor WASM module running in the audio worklet\nWAM_SRC = $(IPLUG_WEB_PATH)/IPlugWAM.cpp \\\n\t$(WAM_SDK_PATH)/processor.cpp \\\n\t$(IPLUG_PATH)/IPlugProcessor.cpp\n\n#every cpp file that is needed for the \"WEB\" graphics WASM module\nWEB_SRC = $(IGRAPHICS_SRC) \\\n$(IPLUG_WEB_PATH)/IPlugWeb.cpp \\\n$(IGRAPHICS_PATH)/IGraphicsEditorDelegate.cpp\n\nNANOVG_LDFLAGS = -s USE_WEBGL2=0 -s FULL_ES3=1\n\n# CFLAGS for both WAM and WEB targets\nCFLAGS = $(INCLUDE_PATHS) \\\n-Wno-bitwise-op-parentheses \\\n-DWDL_NO_DEFINE_MINMAX \\\n-DNDEBUG=1\n\nWAM_CFLAGS = -DWAM_API \\\n-DIPLUG_DSP=1 \\\n-DNO_IGRAPHICS \\\n-DSAMPLE_TYPE_FLOAT\n\nWEB_CFLAGS = -DWEB_API \\\n-DIPLUG_EDITOR=1\n\nWAM_EXPORTS = \"[\\\n  '_malloc', '_free', '_createModule','_wam_init','_wam_terminate','_wam_resize', \\\n  '_wam_onprocess', '_wam_onmidi', '_wam_onsysex', '_wam_onparam', \\\n  '_wam_onmessageN', '_wam_onmessageS', '_wam_onmessageA', '_wam_onpatch' \\\n  ]\"\n\nWEB_EXPORTS = \"['_malloc', '_free', '_main', '_iplug_fsready', '_iplug_syncfs']\"\n\n# LDFLAGS for both WAM and WEB targets\nLDFLAGS = -s ALLOW_MEMORY_GROWTH=1 --bind\n\n# We can't compile the WASM module synchronously on main thread (.wasm over 4k in size requires async compile on chrome) https://developers.google.com/web/updates/2018/04/loading-wasm\n# and you can't compile asynchronously in AudioWorklet scope\n# The following settings mean the WASM is delivered as BASE64 and included in the MyPluginName-wam.js file.\nWAM_LDFLAGS = -s EXPORTED_RUNTIME_METHODS=\"['ccall', 'cwrap', 'setValue', 'UTF8ToString']\" \\\n-s BINARYEN_ASYNC_COMPILATION=0 \\\n-s SINGLE_FILE=1 \\\n--pre-js=$(IPLUG2_ROOT)/IPlug/WEB/Template/scripts/atob-polyfill.js\n#-s ENVIRONMENT=worker\n\nWEB_LDFLAGS = -s EXPORTED_FUNCTIONS=$(WEB_EXPORTS) \\\n-s EXPORTED_RUNTIME_METHODS=\"['ccall', 'UTF8ToString']\" \\\n-s BINARYEN_ASYNC_COMPILATION=1 \\\n-s FORCE_FILESYSTEM=1 \\\n-s ENVIRONMENT=web \\\n-s DEFAULT_LIBRARY_FUNCS_TO_INCLUDE=\"['\\$$Browser']\" \\\n-lidbfs.js\n\n"
        },
        {
          "name": "common-win.props",
          "type": "blob",
          "size": 13.9306640625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ImportGroup Label=\"PropertySheets\" />\n  <PropertyGroup Label=\"UserMacros\">\n    <RTAUDIOMIDI_PATH>$(IPLUG_PATH)\\APP\\RTAudioMidi</RTAUDIOMIDI_PATH>\n    <WDL_PATH>$(IPLUG2_ROOT)\\WDL</WDL_PATH>\n    <IPLUG_PATH>$(IPLUG2_ROOT)\\IPlug</IPLUG_PATH>\n    <EXTRAS_PATH>$(IPLUG_PATH)\\Extras</EXTRAS_PATH>\n    <IGRAPHICS_PATH>$(IPLUG2_ROOT)\\IGraphics</IGRAPHICS_PATH>\n    <DEPS_PATH>$(IPLUG2_ROOT)\\Dependencies</DEPS_PATH>\n    <JSON_PATH>$(DEPS_PATH)\\Extras\\nlohmann</JSON_PATH>\n    <IPLUG_INC_PATHS>$(WDL_PATH);$(IPLUG_PATH);$(EXTRAS_PATH);$(EXTRAS_PATH)\\OSC;$(EXTRAS_PATH)\\Synth;$(EXTRAS_PATH)\\WebView;$(JSON_PATH);$(SolutionDir)\\resources</IPLUG_INC_PATHS>\n    <IPLUG_DEPS_PATH>$(DEPS_PATH)\\IPlug</IPLUG_DEPS_PATH>\n    <IGRAPHICS_DEPS_PATH>$(DEPS_PATH)\\IGraphics</IGRAPHICS_DEPS_PATH>\n    <NANOVG_PATH>$(IGRAPHICS_DEPS_PATH)\\NanoVG\\src</NANOVG_PATH>\n    <NANOSVG_PATH>$(IGRAPHICS_DEPS_PATH)\\NanoSVG\\src</NANOSVG_PATH>\n    <FREETYPE_PATH>$(DEPS_PATH)\\Build\\src\\freetype\\include</FREETYPE_PATH>\n    <SKIA_PATH>$(DEPS_PATH)\\Build\\src\\skia</SKIA_PATH>\n    <SKIA_INC_PATHS>$(SKIA_PATH);$(SKIA_PATH)\\include\\core;$(SKIA_PATH)\\include\\effects;$(SKIA_PATH)\\include\\config;$(SKIA_PATH)\\include\\utils;$(SKIA_PATH)\\include\\gpu;$(SKIA_PATH)\\modules\\svg\\include;$(SKIA_PATH)\\third_party\\externals\\icu\\source\\common</SKIA_INC_PATHS>\n    <GLAD_GL2_PATHS>$(IGRAPHICS_DEPS_PATH)\\glad_GL2\\include;$(IGRAPHICS_DEPS_PATH)\\glad_GL2\\src</GLAD_GL2_PATHS>\n    <GLAD_GL3_PATHS>$(IGRAPHICS_DEPS_PATH)\\glad_GL3\\include;$(IGRAPHICS_DEPS_PATH)\\glad_GL3\\src</GLAD_GL3_PATHS>\n    <PNG_PATH>$(WDL_PATH)\\libpng</PNG_PATH>\n    <ZLIB_PATH>$(WDL_PATH)\\zlib</ZLIB_PATH>\n    <STB_PATH>$(IGRAPHICS_DEPS_PATH)\\STB</STB_PATH>\n    <STATIC_LIBS_PATH>$(DEPS_PATH)\\Build\\win\\$(Platform)\\$(Configuration)</STATIC_LIBS_PATH>\n    <ICUDAT_PATH>$(DEPS_PATH)\\Build\\win\\bin\\icudtl.dat</ICUDAT_PATH>\n    <YOGA_INC_PATHS>$(IGRAPHICS_DEPS_PATH)\\yoga;$(IGRAPHICS_DEPS_PATH)\\yoga\\yoga</YOGA_INC_PATHS>\n    <IGRAPHICS_INC_PATHS>$(IGRAPHICS_PATH);$(IGRAPHICS_PATH)\\Controls;$(IGRAPHICS_PATH)\\Drawing;$(IGRAPHICS_PATH)\\Platforms;$(IGRAPHICS_PATH)\\Extras;$(NANOSVG_PATH);$(NANOVG_PATH);$(PNG_PATH);$(ZLIB_PATH);$(FREETYPE_PATH);$(STB_PATH);$(SKIA_INC_PATHS);$(YOGA_INC_PATHS)</IGRAPHICS_INC_PATHS>\n    <CLAP_SDK Condition=\"'$(CLAP_SDK)'==''\">$(IPLUG_DEPS_PATH)\\CLAP_SDK\\include</CLAP_SDK>\n    <CLAP_HELPERS Condition=\"'$(CLAP_HELPERS)'==''\">$(IPLUG_DEPS_PATH)\\CLAP_HELPERS\\include\\clap\\helpers</CLAP_HELPERS>\n    <VST2_SDK Condition=\"'$(VST2_SDK)'==''\">$(IPLUG_DEPS_PATH)\\VST2_SDK</VST2_SDK>\n    <VST3_SDK Condition=\"'$(VST3_SDK)'==''\">$(IPLUG_DEPS_PATH)\\VST3_SDK</VST3_SDK>\n    <ASIO_SDK Condition=\"'$(ASIO_SDK)'==''\">$(IPLUG_DEPS_PATH)\\RTAudio\\include</ASIO_SDK>\n    <AAX_SDK Condition=\"'$(AAX_SDK)'==''\">$(IPLUG_DEPS_PATH)\\AAX_SDK</AAX_SDK>\n    <CLAP_64_HOST_PATH Condition=\"'$(CLAP_64_HOST_PATH)'==''\">$(ProgramW6432)\\REAPER (x64)\\reaper.exe</CLAP_64_HOST_PATH>\n    <VST2_32_HOST_PATH Condition=\"'$(VST2_32_HOST_PATH)'==''\">$(ProgramFiles)\\REAPER\\reaper.exe</VST2_32_HOST_PATH>\n    <VST2_64_HOST_PATH Condition=\"'$(VST2_64_HOST_PATH)'==''\">$(ProgramW6432)\\REAPER (x64)\\reaper.exe</VST2_64_HOST_PATH>\n    <VST3_32_HOST_PATH Condition=\"'$(VST3_32_HOST_PATH)'==''\">$(ProgramFiles)\\REAPER\\reaper.exe</VST3_32_HOST_PATH>\n    <VST3_64_HOST_PATH Condition=\"'$(VST3_64_HOST_PATH)'==''\">$(ProgramW6432)\\REAPER (x64)\\reaper.exe</VST3_64_HOST_PATH>\n    <VST3_32_PATH Condition=\"'$(VST3_32_PATH)'==''\">$(CommonProgramFiles)\\VST3</VST3_32_PATH>\n    <VST3_64_PATH Condition=\"'$(VST3_64_PATH)'==''\">$(CommonProgramW6432)\\VST3</VST3_64_PATH>\n    <VST2_32_PATH Condition=\"'$(VST2_32_PATH)'==''\">$(ProgramFiles)\\VstPlugins</VST2_32_PATH>\n    <VST2_64_PATH Condition=\"'$(VST2_64_PATH)'==''\">$(ProgramW6432)\\VstPlugins</VST2_64_PATH>\n    <AAX_32_PATH Condition=\"'$(AAX_32_PATH)'==''\">$(CommonProgramFiles)\\Avid\\Audio\\Plug-Ins</AAX_32_PATH>\n    <AAX_64_PATH Condition=\"'$(AAX_64_PATH)'==''\">$(CommonProgramW6432)\\Avid\\Audio\\Plug-Ins</AAX_64_PATH>\n    <CLAP_PATH>$(CommonProgramW6432)\\CLAP</CLAP_PATH>\n    <REAPER_EXT_PATH>$(APPDATA)\\REAPER\\UserPlugins</REAPER_EXT_PATH>\n    <APP_DEFS>APP_API;__WINDOWS_DS__;__WINDOWS_MM__;__WINDOWS_ASIO__;IPLUG_EDITOR=1;IPLUG_DSP=1</APP_DEFS>\n    <CLAP_DEFS>CLAP_API;IPLUG_EDITOR=1;IPLUG_DSP=1</CLAP_DEFS>\n    <VST2_DEFS>VST2_API;VST_FORCE_DEPRECATED;IPLUG_EDITOR=1;IPLUG_DSP=1</VST2_DEFS>\n    <VST3_DEFS>VST3_API;IPLUG_EDITOR=1;IPLUG_DSP=1</VST3_DEFS>\n    <VST3P_DEFS>VST3P_API;IPLUG_EDITOR=0;IPLUG_DSP=1</VST3P_DEFS>\n    <VST3C_DEFS>VST3C_API;IPLUG_EDITOR=1;IPLUG_DSP=0</VST3C_DEFS>\n    <DEBUG_DEFS>_DEBUG;</DEBUG_DEFS>\n    <RELEASE_DEFS>NDEBUG;</RELEASE_DEFS>\n    <TRACER_DEFS>TRACER_BUILD;NDEBUG;</TRACER_DEFS>\n    <APP_INC_PATHS>$(IPLUG_PATH)\\APP;$(IPLUG_DEPS_PATH)\\RTAudio\\include;$(IPLUG_DEPS_PATH)\\RTAudio;$(IPLUG_DEPS_PATH)\\RTMidi</APP_INC_PATHS>\n    <CLAP_INC_PATHS>$(IPLUG_PATH)\\CLAP;$(CLAP_SDK);$(CLAP_HELPERS)</CLAP_INC_PATHS>\n    <VST2_INC_PATHS>$(IPLUG_PATH)\\VST2;$(VST2_SDK)</VST2_INC_PATHS>\n    <VST3_INC_PATHS>$(IPLUG_PATH)\\VST3;$(VST3_SDK)</VST3_INC_PATHS>\n    <AAX_INC_PATHS>$(IPLUG_PATH)\\AAX;$(AAX_SDK)\\Interfaces;$(AAX_SDK)\\Interfaces\\ACF;</AAX_INC_PATHS>\n    <AAX_DEFS>AAX_API;IPLUG_EDITOR=1;IPLUG_DSP=1;_WINDOWS;WIN32;_WIN32;WINDOWS_VERSION;_LIB;_CRT_SECURE_NO_WARNINGS;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE</AAX_DEFS>\n    <ALL_DEFS>WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;NOMINMAX</ALL_DEFS>\n    <AAX_LIBS>wininet.lib;odbc32.lib;odbccp32.lib;psapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comctl32.lib;</AAX_LIBS>\n    <APP_LIBS>dsound.lib;winmm.lib;</APP_LIBS>\n    <CLAP_64_COMMAND_ARGS>$(SolutionDir)$(SolutionName).RPP</CLAP_64_COMMAND_ARGS>\n    <VST2_32_COMMAND_ARGS>$(SolutionDir)$(SolutionName).RPP</VST2_32_COMMAND_ARGS>\n    <VST2_64_COMMAND_ARGS>$(SolutionDir)$(SolutionName).RPP</VST2_64_COMMAND_ARGS>\n    <VST3_64_COMMAND_ARGS>$(SolutionDir)$(SolutionName).RPP</VST3_64_COMMAND_ARGS>\n    <VST3_32_COMMAND_ARGS>$(SolutionDir)$(SolutionName).RPP</VST3_32_COMMAND_ARGS>\n    <COPY_VST2>1</COPY_VST2>\n    <REAPER_INC_PATHS>$(IPLUG_DEPS_PATH)\\REAPER_SDK;$(IPLUG_PATH)\\ReaperExt;</REAPER_INC_PATHS>\n    <AAX_ICON>$(AAX_SDK)\\Utilities\\PlugIn.ico</AAX_ICON>\n    <VST_ICON>$(IPLUG2_ROOT)\\Scripts\\icons\\VST_Logo_Steinberg.ico</VST_ICON>\n  </PropertyGroup>\n  <PropertyGroup>\n    <_ProjectFileVersion>10.0.30319.1</_ProjectFileVersion>\n  </PropertyGroup>\n  <ItemDefinitionGroup>\n    <ClCompile>\n      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n      <PreprocessorDefinitions>$(ALL_DEFS);%(PreprocessorDefinitions)</PreprocessorDefinitions>\n      <DisableSpecificWarnings>4996;4250;4018;4267;4068;26451;26812</DisableSpecificWarnings>\n      <AdditionalIncludeDirectories>$(WDL_PATH);$(IPLUG_PATH);$(SolutionDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n      <LanguageStandard>stdcpp17</LanguageStandard>\n      <MultiProcessorCompilation>true</MultiProcessorCompilation>\n    </ClCompile>\n    <ItemDefinitionGroup Condition=\" '$(Platform)' == 'Win32' \">\n      <EnableEnhancedInstructionSet>StreamingSIMDExtensions2</EnableEnhancedInstructionSet>\n    </ItemDefinitionGroup>\n    <Link>\n      <AdditionalDependencies>%(AdditionalDependencies)</AdditionalDependencies>\n      <AdditionalLibraryDirectories>$(STATIC_LIBS_PATH);$(AAX_SDK)\\Libs\\$(Configuration);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>\n      <ImportLibrary>$(IntDir)$(TargetName).lib</ImportLibrary>\n    </Link>\n    <Lib>\n      <AdditionalDependencies />\n    </Lib>\n    <ResourceCompile>\n      <AdditionalIncludeDirectories>$(SolutionDir);$(SolutionDir)\\resources\\fonts;$(SolutionDir)\\resources\\img;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n    </ResourceCompile>\n  </ItemDefinitionGroup>\n  <ItemGroup>\n    <BuildMacro Include=\"IPLUG2_ROOT\">\n      <Value>$(IPLUG2_ROOT)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"WDL_PATH\">\n      <Value>$(WDL_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IPLUG_PATH\">\n      <Value>$(IPLUG_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"EXTRAS_PATH\">\n      <Value>$(EXTRAS_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IGRAPHICS_PATH\">\n      <Value>$(IGRAPHICS_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"DEPS_PATH\">\n      <Value>$(DEPS_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"JSON_PATH\">\n      <Value>$(JSON_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IPLUG_INC_PATHS\">\n      <Value>$(IPLUG_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IPLUG_DEPS_PATH\">\n      <Value>$(IPLUG_DEPS_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IGRAPHICS_DEPS_PATH\">\n      <Value>$(IGRAPHICS_DEPS_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"NANOVG_PATH\">\n      <Value>$(NANOVG_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"NANOSVG_PATH\">\n      <Value>$(NANOSVG_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"FREETYPE_PATH\">\n      <Value>$(FREETYPE_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"SKIA_PATH\">\n      <Value>$(SKIA_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"SKIA_INC_PATHS\">\n      <Value>$(SKIA_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"GLAD_GL2_PATHS\">\n      <Value>$(GLAD_GL2_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"GLAD_GL3_PATHS\">\n      <Value>$(GLAD_GL3_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"PNG_PATH\">\n      <Value>$(PNG_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"ZLIB_PATH\">\n      <Value>$(ZLIB_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"STB_PATH\">\n      <Value>$(STB_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"STATIC_LIBS_PATH\">\n      <Value>$(STATIC_LIBS_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"ICUDAT_PATH\">\n      <Value>$(ICUDAT_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"YOGA_INC_PATHS\">\n      <Value>$(YOGA_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IGRAPHICS_INC_PATHS\">\n      <Value>$(IGRAPHICS_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_SDK\">\n      <Value>$(VST2_SDK)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_SDK\">\n      <Value>$(VST3_SDK)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"ASIO_SDK\">\n      <Value>$(ASIO_SDK)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_SDK\">\n      <Value>$(AAX_SDK)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"CLAP_64_HOST_PATH\">\n      <Value>$(CLAP_64_HOST_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_32_HOST_PATH\">\n      <Value>$(VST2_32_HOST_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_64_HOST_PATH\">\n      <Value>$(VST2_64_HOST_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_32_HOST_PATH\">\n      <Value>$(VST3_32_HOST_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_64_HOST_PATH\">\n      <Value>$(VST3_64_HOST_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_32_PATH\">\n      <Value>$(VST3_32_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_64_PATH\">\n      <Value>$(VST3_64_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_32_PATH\">\n      <Value>$(VST2_32_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_64_PATH\">\n      <Value>$(VST2_64_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_32_PATH\">\n      <Value>$(AAX_32_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_64_PATH\">\n      <Value>$(AAX_64_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"REAPER_EXT_PATH\">\n      <Value>$(REAPER_EXT_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"APP_DEFS\">\n      <Value>$(APP_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_DEFS\">\n      <Value>$(VST2_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_DEFS\">\n      <Value>$(VST3_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3P_DEFS\">\n      <Value>$(VST3P_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3C_DEFS\">\n      <Value>$(VST3C_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"DEBUG_DEFS\">\n      <Value>$(DEBUG_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"RELEASE_DEFS\">\n      <Value>$(RELEASE_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"TRACER_DEFS\">\n      <Value>$(TRACER_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"APP_INC_PATHS\">\n      <Value>$(APP_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_INC_PATHS\">\n      <Value>$(VST2_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_INC_PATHS\">\n      <Value>$(VST3_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_INC_PATHS\">\n      <Value>$(AAX_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_DEFS\">\n      <Value>$(AAX_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"ALL_DEFS\">\n      <Value>$(ALL_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_LIBS\">\n      <Value>$(AAX_LIBS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"APP_LIBS\">\n      <Value>$(APP_LIBS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"CLAP_64_COMMAND_ARGS\">\n      <Value>$(CLAP_64_COMMAND_ARGS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_32_COMMAND_ARGS\">\n      <Value>$(VST2_32_COMMAND_ARGS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_64_COMMAND_ARGS\">\n      <Value>$(VST2_64_COMMAND_ARGS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_64_COMMAND_ARGS\">\n      <Value>$(VST3_64_COMMAND_ARGS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_32_COMMAND_ARGS\">\n      <Value>$(VST3_32_COMMAND_ARGS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"COPY_VST2\">\n      <Value>$(COPY_VST2)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"REAPER_INC_PATHS\">\n      <Value>$(REAPER_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_ICON\">\n      <Value>$(AAX_ICON)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST_ICON\">\n      <Value>$(VST_ICON)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"CLAP_PATH\">\n      <Value>$(CLAP_PATH)</Value>\n    </BuildMacro>\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "iPlug2.code-workspace",
          "type": "blob",
          "size": 2.443359375,
          "content": "{\n\t\"folders\": [\n\t\t{\n\t\t\t\"path\": \".\"\n\t\t}\n\t],\n\t\"settings\": {\n\t\t\"files.exclude\": {\n\t\t\t\"WDL/*\": true,\n\t\t\t\"Dependencies/IPlug/*_SDK\": true,\n\t\t\t\"Dependencies/IPlug/WAM*\": true,\n\t\t\t\"Dependencies/IPlug/RT*\": true,\n\t\t\t\"Dependencies/IPlug/REAPER_SDK*\": true,\n\t\t\t\"Dependencies/Build*\": true,\n\t\t\t\"Dependencies/IGraphics/glad*\": true,\n\t\t\t\"Dependencies/IGraphics/GL*\": true,\n\t\t\t\"Dependencies/IGraphics/STB*\": true,\n\t\t\t\"Dependencies/IGraphics/*Nano*\": true,\n\t\t\t\"Dependencies/IGraphics/yoga\": true,\n\t\t\t\"_*\": true\n\t\t},\n\t\t\"git.ignoreLimitWarning\": true,\n\t\t\"files.associations\": {\n\t\t\t\"__locale\": \"cpp\",\n\t\t\t\"ios\": \"cpp\",\n\t\t\t\"__config\": \"cpp\",\n\t\t\t\"__nullptr\": \"cpp\",\n\t\t\t\"type_traits\": \"cpp\",\n\t\t\t\"__functional_base\": \"cpp\",\n\t\t\t\"__functional_base_03\": \"cpp\",\n\t\t\t\"__tree\": \"cpp\",\n\t\t\t\"__tuple\": \"cpp\",\n\t\t\t\"chrono\": \"cpp\",\n\t\t\t\"functional\": \"cpp\",\n\t\t\t\"limits\": \"cpp\",\n\t\t\t\"memory\": \"cpp\",\n\t\t\t\"random\": \"cpp\",\n\t\t\t\"ratio\": \"cpp\",\n\t\t\t\"tuple\": \"cpp\",\n\t\t\t\"utility\": \"cpp\",\n\t\t\t\"__split_buffer\": \"cpp\",\n\t\t\t\"bitset\": \"cpp\",\n\t\t\t\"deque\": \"cpp\",\n\t\t\t\"initializer_list\": \"cpp\",\n\t\t\t\"iterator\": \"cpp\",\n\t\t\t\"list\": \"cpp\",\n\t\t\t\"map\": \"cpp\",\n\t\t\t\"queue\": \"cpp\",\n\t\t\t\"stack\": \"cpp\",\n\t\t\t\"string\": \"cpp\",\n\t\t\t\"string_view\": \"cpp\",\n\t\t\t\"vector\": \"cpp\",\n\t\t\t\"typeinfo\": \"cpp\",\n\t\t\t\"cstddef\": \"cpp\",\n\t\t\t\"exception\": \"cpp\",\n\t\t\t\"new\": \"cpp\",\n\t\t\t\"stdexcept\": \"cpp\",\n\t\t\t\"algorithm\": \"cpp\",\n\t\t\t\"__bit_reference\": \"cpp\",\n\t\t\t\"__debug\": \"cpp\",\n\t\t\t\"__mutex_base\": \"cpp\",\n\t\t\t\"__string\": \"cpp\",\n\t\t\t\"__threading_support\": \"cpp\",\n\t\t\t\"array\": \"cpp\",\n\t\t\t\"atomic\": \"cpp\",\n\t\t\t\"cctype\": \"cpp\",\n\t\t\t\"cmath\": \"cpp\",\n\t\t\t\"cstdarg\": \"cpp\",\n\t\t\t\"cstdint\": \"cpp\",\n\t\t\t\"cstdio\": \"cpp\",\n\t\t\t\"cstdlib\": \"cpp\",\n\t\t\t\"cstring\": \"cpp\",\n\t\t\t\"ctime\": \"cpp\",\n\t\t\t\"cwchar\": \"cpp\",\n\t\t\t\"cwctype\": \"cpp\",\n\t\t\t\"fstream\": \"cpp\",\n\t\t\t\"iosfwd\": \"cpp\",\n\t\t\t\"iostream\": \"cpp\",\n\t\t\t\"istream\": \"cpp\",\n\t\t\t\"locale\": \"cpp\",\n\t\t\t\"mutex\": \"cpp\",\n\t\t\t\"numeric\": \"cpp\",\n\t\t\t\"ostream\": \"cpp\",\n\t\t\t\"set\": \"cpp\",\n\t\t\t\"sstream\": \"cpp\",\n\t\t\t\"streambuf\": \"cpp\",\n\t\t\t\"system_error\": \"cpp\",\n\t\t\t\"*.tcc\": \"cpp\",\n\t\t\t\"clocale\": \"cpp\",\n\t\t\t\"cinttypes\": \"cpp\",\n\t\t\t\"__errc\": \"cpp\",\n\t\t\t\"__hash_table\": \"cpp\",\n\t\t\t\"__node_handle\": \"cpp\",\n\t\t\t\"iomanip\": \"cpp\",\n\t\t\t\"optional\": \"cpp\",\n\t\t\t\"regex\": \"cpp\",\n\t\t\t\"thread\": \"cpp\",\n\t\t\t\"unordered_map\": \"cpp\",\n\t\t\t\"variant\": \"cpp\",\n\t\t\t\"*.mm\": \"objective-cpp\",\n\t\t\t\"bit\": \"cpp\",\n\t\t\t\"codecvt\": \"cpp\",\n\t\t\t\"complex\": \"cpp\",\n\t\t\t\"condition_variable\": \"cpp\",\n\t\t\t\"csignal\": \"cpp\",\n\t\t\t\"unordered_set\": \"cpp\",\n\t\t\t\"memory_resource\": \"cpp\",\n\t\t\t\"future\": \"cpp\",\n\t\t\t\"cfenv\": \"cpp\",\n\t\t\t\"typeindex\": \"cpp\",\n\t\t\t\"xlocmon\": \"cpp\"\n\t\t}\n\t}\n}"
        }
      ]
    }
  ]
}