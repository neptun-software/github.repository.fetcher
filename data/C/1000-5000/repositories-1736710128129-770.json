{
  "metadata": {
    "timestamp": 1736710128129,
    "page": 770,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "statsite/statsite",
      "stars": 1816,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.05859375,
          "content": "# Compiled Object files\n*.slo\n*.lo\n*.o\n\n# Compiled Dynamic libraries\n*.so\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n\n.lvimrc\n.sconsign.dblite\ntests/build/\ntest_runner\nstatsite\ndeb/statsite\n*.deb\n.vagrant\n*.pyc\ndepcomp\ncompile\n\ninteg/.cache\nconfig.log\n.sconsign.dblite\n.libs\n.deps\n.deps/*\nsrc/.deps\n/src/.deps\n\n# http://www.gnu.org/software/automake\n\n/Makefile\n\n# http://www.gnu.org/software/autoconf\n\nautom4te.cache\nautoscan.log\nautoscan-*.log\ncompile\nconfigure.scan\nconfig.status\ndepcomp\ninstall-sh\nmissing\nstamp-h1\n\nautom4te.cache\n\n.dirstamp\n/dist/\n/config.*\n\n#OSX\n.DS_Store\n\n/libtool\n\nMakefile.in\n/Makefile\nman/Makefile\nMakefile\nlibtool\naclocal.m4\nac_config\nconfigure\n\nsrc/buildconfig.h\nsrc/buildconfig.h.in\n\n\ndeps/check-0.10.0/build-aux/\ndeps/check-0.10.0/config.h.in\ndeps/check-0.10.0/config.h.in~\ndeps/check-0.10.0/check.pc\ndeps/check-0.10.0/check_stdint.h\ndeps/check-0.10.0/checkmk/checkmk\ndeps/check-0.10.0/config.h\ndeps/check-0.10.0/src/check.h\ndeps/check-0.10.0/tests/test_vars\n\ngmon.out\nsrc/buildconfig.h.in~\ntest-suite.log\ntests/runner\ntests/runner.log\ntests/runner.trs\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.47265625,
          "content": "language: python\npython:\n  - \"2.7\"\nbefore_install:\n  - sudo apt-get -qq update\n  - sudo apt-get -y install pkg-config autoconf automake libtool texinfo sed make python-pip debhelper\n  - pushd deps/check-0.10.0\n  - mkdir -p m4\n  - autoreconf -fiv\n  - ./configure\n  - make\n  - sudo make install\n  - sudo ldconfig\n  - popd\n  - mkdir -p m4\n  - autoreconf -fiv\ninstall: pip install pytest==2.9.2 requests==2.18.1\nscript: ./autogen.sh && ./configure && make && make check && py.test integ/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.5283203125,
          "content": "# 0.8.0\n\n* Timer sampling properly handles counts thanks to @nspragg\n* Replace libev with the Redis (AE) event loop thanks to @sleepybishop\n* Fixed percentile on small data sets picking the upper bound value\n* Git SHA: e69cf74\n\n# 0.7.1\n\n* Support for custom quantiles\n* Included Cloudwatch sink\n* Included OpenTSDB sink\n* Fixing minor memory leak\n* Support for parsing floating point and exponential formats\n* Git SHA: 8c1cfb5\n\n# 0.7.0\n\n* Support for IPv6. Thanks to @ealekseev [GH-57]\n* Support for `extended_counters` option to expose more\n  summary information about counters.\n* Support for Gmetric sink\n* Support for Liberato sink\n* Fixing issue that would cause STDIN to be closed [GH-74]\n* Fixing race condition that would report sink had failed\n* Address several thread safety issues\n* Configurable syslog facilities\n* Support for prefixes on the binary stream\n* Git SHA: b29492b\n\n# 0.6.5\n\n* Removed dependency on C++ compiler\n* Support for 'h' as an alias of 'ms'\n* Support for configurable global_prefix, and type specific\n  prefixes thanks to @melkor217\n* Git SHA: c004e50\n\n# 0.6.0\n\n* Support streaming input metrics over stdin\n* TCP/UDP listeners can be disabled by setting the port to 0\n* Increased UDP throughput\n* Git SHA: 5169f98\n\n# 0.5.1\n\n* Adding support for delta updates to gauges. An important change in behavior\nis that sending multiple negative value gauages will accumulate instead of\nusing the last value that is set. This is due to the ambiguity between setting\na negative value and applying a delta update. This does not apply to the\nbinary protocol.\n* Improve the graphite sink from @pasku\n* Git SHA: 3fe9b9a\n\n# 0.5.0\n\n * Adding support from gauges. Previously, gauges were handled\n as key/value pairs internally meaning each new gauge would generate\n a corresponding output. Now gauges update the same value, and only the\n last value is retained, which is how statsd behaves.\n * Fix from @dccmx to prevent a SIGPIPE on linux when statsite is daemonized\n * Git SHA: f872039\n\n# 0.4.6\n\n * Fixed bug with HLL bias correction\n * Fixed bug in exact sets, previously would over count\n * Git SHA: af7d4b6\n\n# 0.4.5\n\n * Adding support for sets for cardinality estimation\n * Improved command parsing speed dramatically\n * Multiple interrupts will cause statsite to exit, previously\n   a bug could cause statsite to hang\n * Git SHA: 8eb1e90\n\n# 0.4.0\n\n * Adding support for histogram calculations on timers\n * Improved error reporting when parsing config file\n * Git SHA: 1d3dc82\n\n# 0.3.5\n\n * Cleanup of the networking code, reliability improvements,\n   reduced memory footprint.\n * Git SHA: 4eb5e5e\n\n# 0.3.4\n\n * Compatibility with statsd sampling flag for counters\n * Git SHA: c6002f5e0ba43d7e451be584f24d7f07e890dcf1\n\n# 0.3.3\n\n * UDP compatibility with statsd clients (allow missing newline).\n thanks to @joeshaw\n * Added ability to count the number of input metrics, and emit\n to a configurable counter, thanks to @joeshaw\n * Git SHA: b28c48be615d2dce5e57a2be56b0117b85e77588\n\n# 0.3.2\n\n * Fixing critical bug that causes segfault if the first\n timer value is negative.\n * Git SHA: 97e4597aac776aca899482a46f23f72dc25b6e24\n\n# 0.3.1\n\n * Binary sink protocol support\n * Git SHA: f14bc449487dcb096773c01ed81508b129708ca9\n\n# 0.3.0\n\n * Binary protocol support\n * Git SHA: a66163b45fbebc807d8caeb9526c43b45be0abc5\n\n# 0.2.1\n\n * Daemonization support thanks to jgoldschrafe\n * Git SHA: a157350812a4e2fe0cc62ab902ac172b360b4551\n\n# 0.2.0\n\n * Added UDP support\n * Git SHA: 88e048adada4e9e392a40034c8ad44c36968d0b1\n\n# 0.1.0\n\n * Initial version released.\n * Git SHA: c3e9fa188b765e8f1fd31e07108af295bb299ee4\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.2783203125,
          "content": "# This stage in the Dockerfile will not be included in the final image, as it\n# is only being used to build the statsite binary.\nFROM ubuntu:16.04 as builder\n\nRUN apt-get update && apt-get install -y build-essential check libtool \\\n    automake autoconf gcc python python-requests scons pkg-config\n\nADD . /build\nWORKDIR /build\nRUN ./autogen.sh\nRUN ./configure\nRUN make\nRUN make install\nCOPY statsite.docker.example /etc/statsite/statsite.conf\n# At this point, we have built the binary and have installed all of the\n# core files, which the following Dockerfile build stage will COPY in.\n\n# ----------------------------------------------------------------------------\n\n# This stage is what will be distributed. By pulling the compiled binary from\n# the previous stage, we lessen image bloat and installed package set.\nFROM ubuntu:16.04\n\nRUN apt-get update && apt-get install -y nodejs python python-requests && rm -rf /var/lib/apt/lists/*\nCOPY --from=builder /etc/statsite/statsite.conf /etc/statsite/statsite.conf\nCOPY --from=builder /usr/local/bin/statsite /usr/local/bin/statsite\nCOPY --from=builder /usr/local/share/statsite/ /usr/local/share/statsite/\n\n# You'll need to mount your configuration in here.\nVOLUME /etc/statsite\n\nENTRYPOINT [\"/usr/local/bin/statsite\"]\nCMD [\"-f\",\"/etc/statsite/statsite.conf\"]\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 5.3291015625,
          "content": "Statsite\n========\n\nStatsite is a metrics aggregation server. Statsite is based heavily\non Etsy's StatsD <https://github.com/etsy/statsd>, and is wire compatible.\n\nInstallation\n------------\n\nStatsite is built in C and uses scripting languages like Python as glue between\ncomponents and build steps. To setup your build environment, make sure you\nhave all required dependencies. At least the following is required when building\nusing the git sources, and running tests:\n\n- check (or as it's called, libcheck, see https://libcheck.github.io/check/)\n- libtool\n- automake\n- autoconf\n- gcc (or compatible C compiler)\n- tex (if you're recompiling check)\n- pytest\n- requests (python-requests)\n- scons (for legacy build and test scripts)\n\nThese dependencies have dependencies of their own, pytest requires python for\nexample, and installing pytest using a package management tool requires pip or\nsomething similar.\n\nBecause we are using autotools, the system will warn you if something couldn't be\nfound, and if it's a critical error, it will stop.\n\nBuilding\n--------\n\nWhen using a non-git source tarball distribution, it's usually as simple as executing:\n\n~~~~\n./configure\nmake\nmake install\n~~~~\n\nThis will get you a plain local installation of statsite, no tests,\nno integration tests and no special packages.\n\nWhen using the git repo directly and not a source distribution tarball, additional\nsteps might be required to get autotools up. The steps are quite automated,\nand contained within autogen.sh. It mostly consists of the bare mininum:\n\n- aclocal\n- libtoolize or glibtoolize\n- automake\n- autoconf\n\nafter which a working platform-specific Makefile is ready for use. When working on\ncode you may need to re-run this, or maybe use the autoheader and autoreconf tools\nto only update the parts you changed. Running autogen.sh also works, but might take\na few seconds longer to run.\n\n\nDependencies\n============\n\nMost of the dependencies are included in standard Linux distributions,\nbut embedded toolchains and/or slightly less-POSIX systems may need special care\nto get all dependencies installed.\n\nInternal dependencies are included with the project: inih, ae and murmurhash.\nFor integration and unit tests, you need check (or, libcheck) and pytest. They\nusually exist within your distribution's package repository or have standard\nprocedures for acquiring them.\n\nThe `check` or `libcheck` as it is called can be built from source if you wish.\nWe included check-0.10.0 in the git tree as this is what was used since the first release.\nTo build this, you will need to get the dependencies setup as listed in deps/check-0.10.0/INSTALL.\nCurrently, we the requirements are:\n\n- automake-1.9.6 (1.11.3 on OS X if you are using /usr/bin/ar)\n- autoconf-2.59\n- libtool-1.5.22\n- pkg-config-0.20\n- texinfo-4.7 (for documentation)\n- tetex-bin (or any texinfo-compatible TeX installation, for documentation)\n- POSIX sed\n\nCheck should be easy to build, a standard setup will do:\n\n~~~~\n# make sure you are in the check directory\ncd check-0.10.0\n./configure\nmake\nmake install\n~~~~\n\nThis is how the packaged `check` gets built, and how source distributions are built.\nIf you use a git version, you may need to setup its autotools parts,\ncheck has it's own install docs on that.\n\nFor python test dependencies, you can use pip/easy_install, or if you really want\nto do it manually, see below links for the python packages required.\n\n- pytest (https://github.com/pytest-dev/pytest)\n- requests (http://github.com/requests/requests)\n\nDistro-specifics\n================\n\nSome distributions have specific packages you can use to make it easier for yourself,\nthe following have been tested:\n\nDebian\n------\n\nOn Debian, check and pytest are in the standard repos, as well as all build tools.\nInstall the packages according to the following snippet:\n\n~~~~\nsudo apt-get update\nsudo apt-get -y install build-essential libtool autoconf automake scons python-setuptools lsof git texlive check\nsudo easy_install pip\nsudo pip install pytest==3.4.0 \nsudo pip install requests==2.21.0\n~~~~\n\nYou can then run autogen.sh to kick off autotools:\n~~~~\n# be sure you are in the statsite directory\ncd statsite\n./autogen.sh\n~~~~\n\nafterwards you can configure the build and build it, with the option to directly install afterwards:\n~~~~\n# be sure you are in the statsite directory if you weren't already\ncd statsite\n./configure\nmake\nsudo make install\n~~~~\n\nThe statsite binary after installation is linked like this on Debian 8:\n~~~~\nlinux-vdso.so.1 (0x00007ffd43ba1000)\nlibm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fa2e1ccf000)\nlibrt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fa2e1ac7000)\nlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fa2e18aa000)\nlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa2e14ff000)\n/lib64/ld-linux-x86-64.so.2 (0x00007fa2e1fd0000)\n~~~~\n\nIf you want to run unit tests and integration tests, you will need a few extra packages:\n\n~~~~\nsudo apt-get update\nsudo apt-get -y install build-essential libtool autoconf automake scons python-setuptools lsof git texlive check\nsudo easy_install pip\nsudo pip install pytest==3.4.0 \nsudo pip install requests==2.21.0\n~~~~\n\nwith those packages installed you can run the tests:\n~~~~\n# be sure you are in the statsite directory if you weren't already\ncd statsite\n./autogen.sh\n./configure\nmake test\nmake integ\n~~~~\n\n\n\n\nCentOS\n------\n\nInstall packages:\n\nyum groupinstall 'Development Tools'\nyum install check\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4697265625,
          "content": "BSD 3-Clause\nCopyright (c) 2012, Armon Dadgar\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the organization nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ARMON DADGAR BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 3.0185546875,
          "content": "## Process this file with automake to produce Makefile.in\n\nAUTOMAKE_OPTIONS := subdir-objects\nACLOCAL_AMFLAGS = -I m4\n\n\nSUBDIRS = deps/ae deps/inih deps/murmurhash man .\n\n\nAM_CFLAGS = -g -std=gnu99 -pthread -D_GNU_SOURCE -DLOG_PERROR=0 -O3 -pthread -lm @LINK_TO_RT@ -Ideps/inih/ -Ideps/ae/ -Isrc/\n\n#=========================================================\n# statsite, the binary itself\n\nstatsite_SOURCES = \\\n       src/ascii_parser.c \\\n       src/hashmap.c \\\n       src/heap.c \\\n       src/radix.c \\\n       src/hll_constants.c \\\n       src/hll.c \\\n       src/set.c \\\n       src/cm_quantile.c \\\n       src/timer.c \\\n       src/counter.c \\\n       src/metrics.c \\\n       src/streaming.c \\\n       src/config.c \\\n       src/networking.c \\\n       src/conn_handler.c \\\n       src/statsite.c\n\n\nstatsite_LDADD = deps/ae/libae.a deps/inih/libinih.a deps/murmurhash/libmurmur.a\n\n## Install directions:\nbin_PROGRAMS = statsite\n\n# This adds the sinks on make install, also allows for make uninstall if needed\nnobase_pkgdata_DATA = sinks/*\n\nconfigdir = /etc/statsite\nnobase_dist_config_DATA = statsite.conf.example\n\n\n\n## Stuff we want to include for the default dist task (not sdist)\nEXTRA_DIST = . #everything\n\n## Where to store the dist\n\ndistdir = ../$(PACKAGE)-$(VERSION)\n\n\n#libcheck\nif HAVE_CHECK\ncheck_PROGRAMS = tests/runner\ntests_runner_SOURCES = \\\nsrc/ascii_parser.c \\\nsrc/hashmap.c \\\nsrc/heap.c \\\nsrc/radix.c \\\nsrc/hll_constants.c \\\nsrc/hll.c \\\nsrc/set.c \\\nsrc/cm_quantile.c \\\nsrc/timer.c \\\nsrc/counter.c \\\nsrc/metrics.c \\\nsrc/streaming.c \\\nsrc/config.c \\\nsrc/networking.c \\\nsrc/conn_handler.c \\\ntests/runner.c\n\ntests_runner_CFLAGS = -g -std=gnu99 -pthread -D_GNU_SOURCE -DLOG_PERROR=0 -O3 -pthread -lm @LINK_TO_RT@ -Ideps/inih/ -Ideps/ae/ -Isrc/\ntests_runner_LDFLAGS = -g -pg -no-install\ntests_runner_LDADD = deps/ae/libae.a deps/inih/libinih.a deps/murmurhash/libmurmur.a @CHECK_LIBS@\nTESTS = tests/runner\nTESTS_ENVIRONMENT = CK_FORK=yes\nCK_VERBOSITY = verbose\nCLEANFILES = tests/test_runner.log\nendif\n\n\n# Targets\ntest: integ\n\ninteg: all\n\tpy.test integ/\n\nsdist: clean\n\tmkdir -vp /tmp/statsite-@STATSITE_VERSION@\n\tcp -R . /tmp/statsite-@STATSITE_VERSION@\n\ttar -zcv --exclude='.git' --exclude='.gitignore' -f statsite-@STATSITE_VERSION@.tar.gz -C /tmp statsite-@STATSITE_VERSION@\n\trm -rf /tmp/statsite-@STATSITE_VERSION@\n\n\nclean-local: clean-local-check\n\n.PHONY: clean-local-check\nclean-local-check:\n\ttest ! -f \".sconsign.dblite\" || rm -f .sconsign.dblite\n\ttest ! -d \"deps/check-0.9.8/src/.libs\" || rm -fr deps/check-0.9.8/src/.libs\n\nRPMBUILDROOT=/tmp/rpm-build\nrpms: sdist build\n\tmkdir -vp $(RPMBUILDROOT)\n\tcp -v *.tar.gz $(RPMBUILDROOT)\n\tcp -v rpm/statsite.spec $(RPMBUILDROOT)\n\trpmbuild --define \"_topdir $(RPMBUILDROOT)\" \\\n        --define \"_builddir %{_topdir}\" \\\n        --define \"_rpmdir %{_topdir}\" \\\n        --define \"_srcrpmdir %{_topdir}\" \\\n        --define \"_specdir %{_topdir}\" \\\n        --define '_rpmfilename %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm' \\\n        --define \"_sourcedir  %{_topdir}\" \\\n        -ba $(RPMBUILDROOT)/statsite.spec\n\n.PHONY: all test clean sdist build\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.8857421875,
          "content": "Statsite [![Build Status](https://travis-ci.org/statsite/statsite.png)](https://travis-ci.org/statsite/statsite)\n========\n\nStatsite is a metrics aggregation server. Statsite is based heavily\non Etsy's StatsD <https://github.com/etsy/statsd>, and is wire compatible.\n\nFeatures\n--------\n\n* Multiple metric types\n  - Key / Value\n  - Gauges\n  - Counters\n  - Timers\n  - Sets\n* Efficient summary metrics for timer data:\n  - Mean\n  - Min/Max\n  - Standard deviation\n  - Median, Percentile 95, Percentile 99\n  - Histograms\n* Dynamic set implementation:\n  - Exactly counts for small sets\n  - HyperLogLog for large sets\n* Included sinks:\n  - Graphite\n  - InfluxDB\n  - Ganglia\n  - Librato\n  - CloudWatch\n  - OpenTSDB\n  - HTTP\n* Binary protocol\n* TCP, UDP, and STDIN\n* Fast\n\n\nArchitecture\n-------------\n\nStatsite is designed to be both highly performant,\nand very flexible. To achieve this, it implements the stats\ncollection and aggregation in pure C, using an event loop to be\nextremely fast. This allows it to handle hundreds of connections,\nand millions of metrics. After each flush interval expires,\nstatsite performs a fork/exec to start a new stream handler\ninvoking a specified application. Statsite then streams the\naggregated metrics over stdin to the application, which is\nfree to handle the metrics as it sees fit.\n\nThis allows statsite to aggregate metrics and then ship metrics\nto any number of sinks (Graphite, SQL databases, etc). There\nis an included Python script that ships metrics to graphite.\n\nStatsite tries to minimize memory usage by not\nstoring all the metrics that are received. Counter values are\naggregated as they are received, and timer values are stored\nand aggregated using the Cormode-Muthukrishnan algorithm from\n\"Effective Computation of Biased Quantiles over Data Streams\".\nThis means that the percentile values are not perfectly accurate,\nand are subject to a specifiable error epsilon. This allows us to\nstore only a fraction of the samples.\n\nHistograms can also be optionally maintained for timer values.\nThe minimum and maximum values along with the bin widths must\nbe specified in advance, and as samples are received the bins\nare updated. Statsite supports multiple histograms configurations,\nand uses a longest-prefix match policy.\n\nHandling of Sets in statsite depend on the number of\nentries received. For small cardinalities (<64 currently),\nstatsite will count exactly the number of unique items. For\nlarger sets, it switches to using a HyperLogLog to estimate\ncardinalities with high accuracy and low space utilization.\nThis allows statsite to estimate huge set sizes without\nretaining all the values. The parameters of the HyperLogLog\ncan be tuned to provide greater accuracy at the cost of memory.\n\nThe HyperLogLog is based on the Google paper, \"HyperLogLog in\nPractice: Algorithmic Engineering of a State of The Art Cardinality\nEstimation Algorithm\".\n\nInstall\n-------\n\nThe following quickstart will probably work. If not, see INSTALL.md for detailed information.\n\nDownload and build from source. This requires `autoconf`, `automake` and `libtool` to be available,\navailable usually through a system package manager. Steps:\n\n    $ git clone https://github.com/statsite/statsite.git\n    $ cd statsite\n    $ ./autogen.sh\n    $ ./configure\n    $ make\n    $ ./statsite\n\nIf you get any errors, you may need to check if all dependencies are installed, see INSTALL.md.\n\nBuilding the test code may generate errors if libcheck is not available.\nTo build the test code successfully, do the following:\n\n    $ cd deps/check-0.10.0/\n    $ ./configure\n    $ make\n    # make install\n    # ldconfig (necessary on some Linux distros)\n    $ cd ../../\n    $ make test\n\nAt this point, the test code should build successfully.\n\nDocker\n------\n\nYou can build your own image of docker using the Dockerfile\n\n    $ git clone https://github.com/statsite/statsite.git\n    $ cd statsite\n    $ docker build -t statsite/statsite:latest .\n    $ docker run statsite/statsite:latest\n\nYou can override the configuration via a mount that provide a `statsite.conf`\n\n    $ docker run -v /config/statsite:/etc/statsite statsite/statsite:latest\n\nOr override the configuration with a different path by passing it in the `CMD`\n\n    $ docker run -v /config/statsite:/tmp statsite/statsite:latest -f /tmp/statsite.docker.example\n\nSee [statsite.docker.conf](https://github.com/statsite/statsite/blob/master/statsite.docker.example) for a starting point\n\nUsage\n-----\n\nStatsite is configured using a simple INI file.\nHere is an example configuration file:\n\n    [statsite]\n    port = 8125\n    udp_port = 8125\n    log_level = INFO\n    log_facility = local0\n    flush_interval = 10\n    timer_eps = 0.01\n    set_eps = 0.02\n    stream_cmd = python sinks/graphite.py localhost 2003 statsite\n\n    [histogram_api]\n    prefix=api\n    min=0\n    max=100\n    width=5\n\n    [histogram_default]\n    prefix=\n    min=0\n    max=200\n    width=20\n\nThen run statsite, pointing it to that file::\n\n    statsite -f /etc/statsite.conf\n\nA full list of configuration options is below.\n\nConfiguration Options\n---------------------\n\nEach statsite configuration option is documented below. Statsite configuration\noptions must exist in the `statsite` section of the INI file:\n\n* tcp\\_port : Integer, sets the TCP port to listen on. Default 8125. 0 to disable.\n\n* port: Same as above. For compatibility.\n\n* udp\\_port : Integer, sets the UDP port. Default 8125. 0 to disable.\n\n* udp_rcvbuf : Integer, sets the SO_RCVBUF socket buffer in bytes on the UDP port.\n  Defaults to 0 which does not change the OS default setting.\n\n* bind\\_address : The address to bind on. Defaults to 0.0.0.0\n\n* parse\\_stdin: Enables parsing stdin as an input stream. Defaults to 0.\n\n* log\\_level : The logging level that statsite should use. One of:\n  DEBUG, INFO, WARN, ERROR, or CRITICAL. All logs go to syslog,\n  and also stderr when not daemonizing. Default is DEBUG.\n\n* log\\_facility : The syslog logging facility that statsite should use.\n  One of: user, daemon, local0, local1, local2, local3, local4, local5,\n  local6, local7. All logs go to syslog.\n\n* flush\\_interval : How often the metrics should be flushed to the\n  sink in seconds. Defaults to 10 seconds.\n\n* timer\\_eps : The upper bound on error for timer estimates. Defaults\n  to 1%. Decreasing this value causes more memory utilization per timer.\n\n* set\\_eps : The upper bound on error for unique set estimates. Defaults\n  to 2%. Decreasing this value causes more memory utilization per set.\n\n* stream\\_cmd : This is the command that statsite invokes every\n  `flush_interval` seconds to handle the metrics. It can be any executable.\n  It should read inputs over stdin and exit with status code 0 on success.\n\n* aligned\\_flush : If set, flushes will be aligned on `flush_interval` boundaries, eg.\n  for a 15 second flush interval the flushes would be aligned to (0,15,30,45) boundaries \n  of every minute. This means the first flush period might be shorter than the flush\n  interval depending on the start time of statsite.\n\n* input\\_counter : If set, statsite will count how many commands it received\n  in the flush interval, and the count will be emitted under this name. For\n  example if set to \"numStats\", then statsite will emit \"counter.numStats\" with\n  the number of samples it has received.\n\n* daemonize : Should statsite daemonize. Defaults to 0.\n\n* pid\\_file : When daemonizing, where to put the pid file. Defaults\n  to /var/run/statsite.pid\n\n* binary\\_stream : Should data be streamed to the stream\\_cmd in\n  binary form instead of ASCII form. Defaults to 0.\n\n* use\\_type\\_prefix : Should prefixes with message type be added to the messages.\n  Does not affect global\\_prefix. Defaults to 1.\n\n* global\\_prefix : Prefix that will be added to all messages.\n  Defaults to empty string.\n\n* kv\\_prefix, gauges\\_prefix, counts\\_prefix, sets\\_prefix, timers\\_prefix : prefix for\n  each message type. Defaults to respectively: \"kv.\", \"gauges.\", \"counts.\",\n  \"sets.\", \"timers.\". Values will be ignored if use_type_prefix set to 0.\n\n* extended\\_counters : If enabled, the counter output will be extended to include the rate.\n  Defaults to false.\n\n* legacy\\_extended\\_counters : If enabled, the meaning of the \"count\" generated metrics on the\n  counters would be the number of metrics received. If false, it would be the sum of the values.\n  This is done for backwards compatibility. Defaults to true.\n\n* timers\\_include : Allows you to configure which timer metrics to include\n  through a comma separated list of values. Supported values include `count`, `mean`, `stdev`, `sum`, `sum_sq`,\n  `lower`, `upper`, `rate`, `median` and `sample_rate`. If this option is not specified then all values except `median` will be included by default.\n  `median` will be included if `quantiles` include 0.5\n\n* prefix\\_binary\\_stream : If enabled, the keys streamed to a the stream\\_cmd\n  when using binary\\_stream mode are also prefixed. By default, this is false,\n  and keys do not get the prefix.\n\n* quantiles : A comma-separated list of quantiles to calculate for timers.\n  Defaults to `0.5, 0.95, 0.99`\n\nIn addition to global configurations, statsite supports histograms\nas well. Histograms are configured one per section, and the INI\nsection must start with the word `histogram`. These are the recognized\noptions:\n\n* prefix : This is the key prefix to match on. The longest matching prefix\n  is used. If the prefix is blank, it is the default for all keys.\n\n* min : Floating value. The minimum bound on the histogram. Values below\n  this go into a special bucket containing everything less than this value.\n\n* max: Floating value. The maximum bound on the histogram. Values above\n  this go into a special bucket containing everything more than this value.\n\n* width : Floating value. The width of each bucket between the min and max.\n\nEach histogram section must specify all options to be valid.\n\n\nProtocol\n--------\n\nBy default, Statsite will listen for TCP and UDP connections. A message\nlooks like the following (where the flag is optional)::\n\n    key:value|type[|@flag]\n\nMessages must be terminated by newlines (`\\n`).\n\nCurrently supported message types:\n\n* `kv` - Simple Key/Value.\n* `g`  - Gauge, similar to `kv` but only the last value per key is retained\n* `ms` - Timer.\n* `h`  - Alias for timer\n* `c`  - Counter.\n* `s`  - Unique Set\n\nAfter the flush interval, the counters and timers of the same key are\naggregated and this is sent to the store.\n\nGauges also support \"delta\" updates, which are supported by prefixing the\nvalue with either a `+` or a `-`. This implies you can't explicitly set a gauge to a negative number without first setting it to zero.\n\nMultiple metrics may be batched together in one UDP packet a separated by a\nnewline (`\\n`) character.  Care must be taken to keep UDP data size smaller\nthan the network MTU minus 28 bytes for IP/UDP headers.  Statsite supports\na maximum UDP data length of 1500 bytes.\n\nExamples:\n\nThe following is a simple key/value pair, in this case reporting how many\nqueries we've seen in the last second on MySQL::\n\n    mysql.queries:1381|kv\n\nThe following is a timer, timing the response speed of an API call::\n\n    api.session_created:114|ms\n\nThe next example increments the \"rewards\" counter by 1::\n\n    rewards:1|c\n\nHere we initialize a gauge and then modify its value::\n\n    inventory:100|g\n    inventory:-5|g\n    inventory:+2|g\n\nSets count the unique items, so if statsite gets::\n\n    users:abe|s\n    users:zoe|s\n    users:bob|s\n    users:abe|s\n\nThen it will emit a count 3 for the number of uniques it has seen.\n\nWriting Statsite Sinks\n---------------------\n\nStatsite ships with graphite, librato, gmetric, and influxdb sinks, but ANY executable\nor script  can be used as a sink. The sink should read its inputs from stdin, where\neach metric is in the form::\n\n    key|val|timestamp\\n\n\nEach metric is separated by a newline. The process should terminate with\nan exit code of 0 to indicate success.\n\nHere is an example of the simplest possible Python sink:\n\n    #!/usr/bin/env python\n    import sys\n\n    lines = sys.stdin.read().split(\"\\n\")\n    metrics = [l.split(\"|\") for l in lines]\n\n    for key, value, timestamp in metrics:\n        print key, value, timestamp\n\n\nBinary Protocol\n---------------\n\nIn addition to the statsd compatible ASCII protocol, statsite includes\na lightweight binary protocol. This can be used if you want to make use\nof special characters such as the colon, pipe character, or newlines. It\nis also marginally faster to process, and may provide 10-20% more throughput.\n\nEach command is sent to statsite over the same ports with this header:\n\n    <Magic Byte><Metric Type><Key Length>\n\nThen depending on the metric type, it is followed by either:\n\n    <Value><Key>\n    <Set Length><Key><Set Key>\n\nThe \"Magic Byte\" is the value 0xaa (170). This switches the internal\nprocessing from the ASCII mode to binary. The metric type is one of:\n\n* 0x1 : Key value / Gauge\n* 0x2 : Counter\n* 0x3 : Timer\n* 0x4 : Set\n* 0x5 : Gauge\n* 0x6 : Gauge Delta update\n\nThe key length is a 2 byte unsigned integer with the length of the\nkey, INCLUDING a NULL terminator. The key must include a null terminator,\nand it's length must include this.\n\nIf the metric type is K/V, Counter or Timer, then we expect a value and\na key. The value is a standard IEEE754 double value, which is 8 bytes in length.\nThe key is provided as a byte stream which is `Key Length` long,\nterminated by a NULL (0) byte.\n\nIf the metric type is Set, then we expect the length of a set key,\nprovided like the key length. The key should then be followed by\nan additional Set Key, which is `Set Length` long, terminated\nby a NULL (0) byte.\n\nAll of these values must be transmitted in Little Endian order.\n\nHere is an example of sending (\"Conns\", \"c\", 200) as hex:\n\n    0xaa 0x02 0x0600 0x0000000000006940 0x436f6e6e7300\n\n\nNote: The binary protocol does not include support for \"flags\" and resultantly\ncannot be used for transmitting sampled counters.\n\n\nBinary Sink Protocol\n--------------------\n\nIt is also possible to have the data streamed to be represented\nin a binary format. Again, this is used if you want to use the reserved\ncharacters. It may also be faster.\n\nEach command is sent to the sink in the following manner:\n\n    <Timestamp><Metric Type><Value Type><Key Length><Value><Key>[<Count>]\n\nMost of these are the same as the binary protocol. There are a few.\nchanges however. The Timestamp is sent as an 8 byte unsigned integer,\nwhich is the current Unix timestamp. The Metric type is one of:\n\n* 0x1 : Key value\n* 0x2 : Counter\n* 0x3 : Timer\n* 0x4 : Set\n* 0x5 : Gauge\n\nThe value type is one of:\n\n* 0x0 : No type (Key/Value)\n* 0x1 : Sum (Also used for Sets)\n* 0x2 : Sum Squared\n* 0x3 : Mean\n* 0x4 : Count\n* 0x5 : Standard deviation\n* 0x6 : Minimum Value\n* 0x7 : Maximum Value\n* 0x8 : Histogram Floor Value\n* 0x9 : Histogram Bin Value\n* 0xa : Histogram Ceiling Value\n* 0xb : Count Rate (Sum / Flush Interval)\n* 0xc : Sample Rate (Count / Flush Interval)\n* 0x80 OR `percentile` :  If the type OR's with 128 (0x80), then it is a\n    percentile amount. The amount is OR'd with 0x80 to provide the type. For\n    example (0x80 | 0x32) = 0xb2 is the 50% percentile or medium. The 95th\n    percentile is (0x80 | 0xdf) = 0xdf.\n\nThe key length is a 2 byte unsigned integer representing the key length\nterminated by a NULL character. The Value is an IEEE754 double. Lastly,\nthe key is a NULL-terminated character stream.\n\nThe final `<Count>` field is only set for histogram values.\nIt is always provided as an unsigned 32 bit integer value. Histograms use the\nvalue field to specify the bin, and the count field for the entries in that\nbin. The special values for histogram floor and ceiling indicate values that\nwere outside the specified histogram range. For example, if the min value was\n50 and the max 200, then HISTOGRAM\\_FLOOR will have value 50, and the count is\nthe number of entires which were below this minimum value. The ceiling is the same\nbut visa versa. For bin values, the value is the minimum value of the bin, up to\nbut not including the next bin.\n\nTo enable the binary sink protocol, add a configuration variable `binary_stream`\nto the configuration file with the value `yes`. An example sink is provided in\n`sinks/binary_sink.py`.\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 0.017578125,
          "content": "Vagrantfile.debian"
        },
        {
          "name": "Vagrantfile.centos",
          "type": "blob",
          "size": 1.0771484375,
          "content": "VAGRANTFILE_API_VERSION = \"2\"\n\n$script = <<CODE\n\necho\necho Provisioning started...\necho\n\n#sudo apt-get update\n#sudo apt-get -y install build-essential scons python-setuptools lsof git automake texlive check libtool\n#sudo easy_install pip\n#sudo pip install pytest\n\n#cd /vagrant/deps/check-0.10.0/\n#autoreconf\n#./configure\n#make\n#make install\n#ldconfig\n\nCODE\n\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  config.vm.box = \"centos/7\"\n  config.vm.network \"private_network\", ip: \"33.33.44.40\"\n  config.vm.synced_folder \".\", \"/vagrant\", type: \"nfs\"\n  config.vm.synced_folder \".\", \"/home/vagrant/statsite\", type: \"nfs\"\n\n  # Provision using the shell to install fog\n  config.vm.provision :shell, :inline => $script\n\n\n  config.vm.post_up_message = <<MSG\n\n     The box is ready. Statsite is in /vagrant and /home/vagrant.\n     When making changes to configure.ac or Makefile.am, run autogen.sh,\n     and when you have your dependencies in order, ./configure again.\n\n     Dependencies were not automatically installed, you have to do that first.\n     To build: use make, to test: make test.\n\n\nMSG\n\nend\n"
        },
        {
          "name": "Vagrantfile.debian",
          "type": "blob",
          "size": 1.1064453125,
          "content": "VAGRANTFILE_API_VERSION = \"2\"\n\n$script = <<CODE\n\necho\necho Provisioning started...\necho\n\nsudo apt-get update\nsudo apt-get -y install build-essential python-setuptools lsof git automake texlive check libtool devscripts\nsudo easy_install pip\nsudo pip install pytest\n\n#cd /vagrant/deps/check-0.10.0/\n#autoreconf\n#./configure\n#make\n#make install\n#ldconfig\n\nCODE\n\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  config.vm.box = \"debian/jessie64\"\n  config.vm.network \"private_network\", ip: \"33.33.33.40\"\n  config.vm.synced_folder \".\", \"/vagrant\", type: \"nfs\"\n  config.vm.synced_folder \".\", \"/home/vagrant/statsite\", type: \"nfs\"\n\n  # Provision using the shell to install fog\n  config.vm.provision :shell, :inline => $script\n\n\n  config.vm.post_up_message = <<MSG\n\n     The box is ready. Statsite is in /vagrant.\n     When making changes to configure.ac or Makefile.am, run autogen.sh,\n     and when you have your dependencies in order, ./configure again.\n\n     Dependencies were already installed, they are:\n     - build-essential\n     - automake\n     - check\n     - pytest\n\n     To build: use make, to test: make test.\n\n\nMSG\n\nend\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.0478515625,
          "content": "#!/bin/sh\n\nautoreconf -fiv\nrm -Rf autom4te.cache\n"
        },
        {
          "name": "bench.py",
          "type": "blob",
          "size": 0.630859375,
          "content": "import socket\nimport time\nimport random\n\nNUM = 1024 * 1024\nKEYS = [\"test\", \"foobar\", \"zipzap\"]\nVALS = [32, 100, 82, 101, 5, 6, 42, 73]\n\nMETS = []\nfor x in xrange(NUM):\n    key = random.choice(KEYS)\n    val = random.choice(VALS)\n    METS.append(\"%s:%f|c\\n\" % (key, val))\n\ns = socket.socket()\ns.connect((\"localhost\", 8125))\nstart = time.time()\n\ntotal = 0\nwhile True:\n    current = 0\n    while current < len(METS):\n        msg = \"\".join(METS[current:current + 1024])\n        current += 1024\n        total += 1024\n        s.sendall(msg)\n\n    diff = time.time() - start\n    ops_s = total / diff\n    print \"%0.2f sec\\t - %.0f ops/sec\" % (diff, ops_s)\n\n"
        },
        {
          "name": "bench_bin.py",
          "type": "blob",
          "size": 1.3671875,
          "content": "import socket\nimport time\nimport random\nimport struct\n\nNUM = 1024 * 1024\nKEYS = [\"test\", \"foobar\", \"zipzap\"]\nVALS = [32, 100, 82, 101, 5, 6, 42, 73]\n\nBINARY_HEADER = struct.Struct(\"<BBHd\")\nBINARY_SET_HEADER = struct.Struct(\"<BBHH\")\nBIN_TYPES = {\"kv\": 1, \"c\": 2, \"ms\": 3, \"set\": 4}\n\n\ndef format(key, type, val):\n    \"Formats a binary message for statsite\"\n    key = str(key)\n    key_len = len(key) + 1\n    type_num = BIN_TYPES[type]\n    header = BINARY_HEADER.pack(170, type_num, key_len, float(val))\n    mesg = header + key + \"\\0\"\n    return mesg\n\n\ndef format_set(key, val):\n    \"Formats a binary set message for statsite\"\n    key = str(key)\n    key_len = len(key) + 1\n    val = str(val)\n    val_len = len(val) + 1\n\n    type_num = BIN_TYPES[\"set\"]\n    header = BINARY_SET_HEADER.pack(170, type_num, key_len, val_len)\n    mesg = \"\".join([header, key, \"\\0\", val, \"\\0\"])\n    return mesg\n\n\nMETS = []\nfor x in xrange(NUM):\n    key = random.choice(KEYS)\n    val = str(x) #random.choice(VALS)\n    METS.append(format_set(key, val))\n\ns = socket.socket()\ns.connect((\"localhost\", 8125))\nstart = time.time()\n\ntotal = 0\nwhile True:\n    current = 0\n    while current < len(METS):\n        msg = \"\".join(METS[current:current + 1024])\n        current += 1024\n        total += 1024\n        s.sendall(msg)\n\n    diff = time.time() - start\n    ops_s = total / diff\n    print \"%0.2f sec\\t - %.0f ops/sec\" % (diff, ops_s)\n\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 2.27734375,
          "content": "#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\n\n## Set the version in both instances below here:\nAC_INIT([Statsite], [0.8.1])\n\nSTATSITE_MAJOR_VERSION=0\nSTATSITE_MINOR_VERSION=8\nSTATSITE_MICRO_VERSION=1\nSTATSITE_VERSION=$STATSITE_MAJOR_VERSION.$STATSITE_MINOR_VERSION.$STATSITE_MICRO_VERSION\n\n\n\n# place to put some extra build scripts installed\nAC_CONFIG_AUX_DIR([ac_config])\n\n# place where extra autoconf macros are kept\nAC_CONFIG_MACRO_DIR([m4])\n\n# define things like _GNU_SOURCE appropriately\nAC_USE_SYSTEM_EXTENSIONS\n\n\nAC_CONFIG_SRCDIR([src/statsite.c])\nAC_CONFIG_HEADERS([src/buildconfig.h])\n\n# Checks for programs.\nAC_PROG_CXX\nAC_PROG_AWK\nAC_PROG_CC\nAC_PROG_CPP\nAC_PROG_INSTALL\nAC_PROG_LN_S\nAC_PROG_MAKE_SET\n# Automake wants this for per-target CFLAGS\nAC_PROG_INSTALL\nAC_PROG_LN_S\n\n\n# Check if we have librt\nAC_CHECK_LIB([rt], [clock_gettime], [LINK_TO_RT=-lrt], [LINK_TO_RT=])\n\n\n# Checks for header files.\nAC_CHECK_HEADERS([arpa/inet.h fcntl.h inttypes.h limits.h netdb.h netinet/in.h stdint.h stdlib.h string.h strings.h sys/socket.h sys/time.h syslog.h unistd.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\n#AC_CHECK_HEADER_STDBOOL # - this seems to be archived\nAC_C_INLINE\nAC_TYPE_INT8_T\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\nAC_TYPE_SSIZE_T\nAC_TYPE_UINT16_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\nAC_TYPE_UINT8_T\n\n# Checks for library functions.\nAC_FUNC_ALLOCA\nAC_FUNC_FORK\nAC_FUNC_MALLOC\nAC_FUNC_REALLOC\nAC_FUNC_STRTOD\nAC_CHECK_FUNCS([bzero dup2 getpagesize gettimeofday inet_ntoa memchr memset pow select socket sqrt strcasecmp strdup strerror strncasecmp strtol])\n\n\n# PKG-Config based checks\nPKG_CHECK_MODULES([CHECK], [check >= 0.9.7], [have_check=\"yes\"], AC_MSG_WARN([Check not found; cannot run unit tests!]))\n\nAM_CONDITIONAL(HAVE_CHECK, test x\"$have_check\" = \"xyes\")\n\n# tests\n#TESTS = test_runner\n#check_PROGRAMS = test_runner\n#test_runner_SOURCES = tests/runner.c $(top_builddir)/tests/runner.h\n#test_runner_CFLAGS = @CHECK_CFLAGS@\n\n\nAM_INIT_AUTOMAKE(foreign subdir-objects)\n\n# This replaces a few constants we setup previously\nAC_SUBST(STATSITE_MAJOR_VERSION)\nAC_SUBST(STATSITE_MINOR_VERSION)\nAC_SUBST(STATSITE_MICRO_VERSION)\nAC_SUBST(STATSITE_VERSION)\nAC_SUBST(LINK_TO_RT)\n\n\n\n\nLT_INIT\n\nAC_OUTPUT(Makefile man/Makefile)\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "integ",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "rpm",
          "type": "tree",
          "content": null
        },
        {
          "name": "sinks",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "statsite.conf.example",
          "type": "blob",
          "size": 0.3134765625,
          "content": "[statsite]\nport=8125\nudp_port=8125\nlog_level=INFO\nflush_interval=10\ntimer_eps=0.01\nset_eps=0.02\nstream_cmd=python /usr/share/statsite/sinks/graphite.py localhost 2003\ndaemonize=1\npid_file=/var/run/statsite/statsite.pid\n\n[histogram_api]\nprefix=api\nmin=0\nmax=100\nwidth=5\n\n[histogram_default]\nprefix=\nmin=0\nmax=200\nwidth=20\n"
        },
        {
          "name": "statsite.docker.example",
          "type": "blob",
          "size": 0.2685546875,
          "content": "[statsite]\nport=8125\nudp_port=8125\nlog_level=INFO\nflush_interval=10\ntimer_eps=0.01\nset_eps=0.02\nstream_cmd=python /usr/local/share/statsite/sinks/graphite.py localhost 2003\n\n[histogram_api]\nprefix=api\nmin=0\nmax=100\nwidth=5\n\n[histogram_default]\nprefix=\nmin=0\nmax=200\nwidth=20\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}