{
  "metadata": {
    "timestamp": 1736710038263,
    "page": 650,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "espressif/esp32-camera",
      "stars": 2008,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.076171875,
          "content": "*.DS_Store\n.vscode\n**/build\n**/sdkconfig\n**/sdkconfig.old\n**/dependencies.lock"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.572265625,
          "content": "# get IDF version for comparison\nset(idf_version \"${IDF_VERSION_MAJOR}.${IDF_VERSION_MINOR}\")\n\n# set conversion sources\nset(srcs\n  conversions/yuv.c\n  conversions/to_jpg.cpp\n  conversions/to_bmp.c\n  conversions/jpge.cpp\n  conversions/esp_jpg_decode.c\n  )\n\nset(priv_include_dirs\n  conversions/private_include\n  )\n\nset(include_dirs\n  driver/include\n  conversions/include\n  )\n\nset(COMPONENT_REQUIRES driver)\n\n# set driver sources only for supported platforms\nif(IDF_TARGET STREQUAL \"esp32\" OR IDF_TARGET STREQUAL \"esp32s2\" OR IDF_TARGET STREQUAL \"esp32s3\")\n  list(APPEND srcs\n    driver/esp_camera.c\n    driver/cam_hal.c\n    driver/sensor.c\n    sensors/ov2640.c\n    sensors/ov3660.c\n    sensors/ov5640.c\n    sensors/ov7725.c\n    sensors/ov7670.c\n    sensors/nt99141.c\n    sensors/gc0308.c\n    sensors/gc2145.c\n    sensors/gc032a.c\n    sensors/bf3005.c\n    sensors/bf20a6.c\n    sensors/sc101iot.c\n    sensors/sc030iot.c\n    sensors/sc031gs.c\n    sensors/mega_ccm.c\n    )\n\n  list(APPEND priv_include_dirs\n    driver/private_include\n    sensors/private_include\n    target/private_include\n    )\n\n  if(IDF_TARGET STREQUAL \"esp32\")\n    list(APPEND srcs\n      target/xclk.c\n      target/esp32/ll_cam.c\n      )\n  endif()\n\n  if(IDF_TARGET STREQUAL \"esp32s2\")\n    list(APPEND srcs\n      target/xclk.c\n      target/esp32s2/ll_cam.c\n      target/tjpgd.c\n      )\n\n    list(APPEND priv_include_dirs\n      target/esp32s2/private_include\n      )\n  endif()\n\n  if(IDF_TARGET STREQUAL \"esp32s3\")\n    list(APPEND srcs\n      target/esp32s3/ll_cam.c\n      )\n  endif()\n\n  set(priv_requires freertos nvs_flash)\n\n  set(min_version_for_esp_timer \"4.2\")\n  if (idf_version VERSION_GREATER_EQUAL min_version_for_esp_timer)\n    list(APPEND priv_requires esp_timer)\n  endif()\n\n  # include the SCCB I2C driver\n  # this uses either the legacy I2C API or the newwer version from IDF v5.4\n  # as this features a method to obtain the I2C driver from a port number\n  if (idf_version VERSION_GREATER_EQUAL \"5.4\")\n    list(APPEND srcs driver/sccb-ng.c)\n  else()\n    list(APPEND srcs driver/sccb.c)\n  endif()\n\nendif()\n\n# CONFIG_ESP_ROM_HAS_JPEG_DECODE is available from IDF v4.4 but\n# previous IDF supported chips already support JPEG decoder, hence okay to use this\nif(idf_version VERSION_GREATER_EQUAL \"4.4\" AND NOT CONFIG_ESP_ROM_HAS_JPEG_DECODE)\n  list(APPEND srcs\n    target/tjpgd.c\n  )\n  list(APPEND priv_include_dirs\n    target/jpeg_include/\n  )\nendif()\n\nidf_component_register(\n  SRCS ${srcs}\n  INCLUDE_DIRS ${include_dirs}\n  PRIV_INCLUDE_DIRS ${priv_include_dirs}\n  REQUIRES driver  # due to include of driver/gpio.h in esp_camera.h\n  PRIV_REQUIRES ${priv_requires}\n)\n"
        },
        {
          "name": "Kconfig",
          "type": "blob",
          "size": 8.6435546875,
          "content": "menu \"Camera configuration\"\n\n    config OV7670_SUPPORT\n        bool \"Support OV7670 VGA\"\n        default y\n        help\n            Enable this option if you want to use the OV7670.\n            Disable this option to save memory.\n\n    config OV7725_SUPPORT\n        bool \"Support OV7725 VGA\"\n        default y\n        help\n            Enable this option if you want to use the OV7725.\n            Disable this option to save memory.\n\n    config NT99141_SUPPORT\n        bool \"Support NT99141 HD\"\n        default y\n        help\n            Enable this option if you want to use the NT99141.\n            Disable this option to save memory.\n\n    config OV2640_SUPPORT\n        bool \"Support OV2640 2MP\"\n        default y\n        help\n            Enable this option if you want to use the OV2640.\n            Disable this option to save memory.\n\n    config OV3660_SUPPORT\n        bool \"Support OV3660 3MP\"\n        default y\n        help\n            Enable this option if you want to use the OV3360.\n            Disable this option to save memory.\n\n    config OV5640_SUPPORT\n        bool \"Support OV5640 5MP\"\n        default y\n        help\n            Enable this option if you want to use the OV5640.\n            Disable this option to save memory.\n\n    config GC2145_SUPPORT\n        bool \"Support GC2145 2MP\"\n        default y\n        help\n            Enable this option if you want to use the GC2145.\n            Disable this option to save memory.\n\n    config GC032A_SUPPORT\n        bool \"Support GC032A VGA\"\n        default y\n        help\n            Enable this option if you want to use the GC032A.\n            Disable this option to save memory.\n\n    config GC0308_SUPPORT\n        bool \"Support GC0308 VGA\"\n        default y\n        help\n            Enable this option if you want to use the GC0308.\n            Disable this option to save memory.\n            \n    config BF3005_SUPPORT\n        bool \"Support BF3005(BYD3005) VGA\"\n        default y\n        help\n            Enable this option if you want to use the BF3005.\n            Disable this option to save memory.\n            \n    config BF20A6_SUPPORT\n        bool \"Support BF20A6(BYD20A6) VGA\"\n        default y\n        help\n            Enable this option if you want to use the BF20A6.\n            Disable this option to save memory.\n\n    config SC101IOT_SUPPORT\n        bool \"Support SC101IOT HD\"\n        default n\n        help\n            Enable this option if you want to use the SC101IOT.\n            Disable this option to save memory.\n\n    choice SC101_REGS_SELECT\n        prompt \"SC101iot default regs\"\n        default SC101IOT_720P_15FPS_ENABLED\n        depends on SC101IOT_SUPPORT\n        help\n            Currently SC010iot has several register sets available.\n            Select the one that matches your needs.\n\n        config SC101IOT_720P_15FPS_ENABLED\n            bool \"xclk20M_720p_15fps\"\n        help\n            Select this option means that when xclk is 20M, the frame rate is 15fps at 720p resolution.\n        config SC101IOT_VGA_25FPS_ENABLED\n            bool \"xclk20M_VGA_25fps\"\n        help\n            Select this option means that when xclk is 20M, the frame rate is 25fps at VGA resolution.\n    endchoice\n\n    config SC030IOT_SUPPORT\n        bool \"Support SC030IOT VGA\"\n        default y\n        help\n            Enable this option if you want to use the SC030IOT.\n            Disable this option to save memory.\n    \n    config SC031GS_SUPPORT\n        bool \"Support SC031GS VGA\"\n        default n\n        help\n            SC031GS is a global shutter CMOS sensor with high frame rate and single-frame HDR.\n            Enable this option if you want to use the SC031GS.\n            Disable this option to save memory.\n\n    config MEGA_CCM_SUPPORT\n        bool \"Support MEGA CCM 5MP\"\n        default y\n        help\n            Enable this option if you want to use the MEGA CCM.\n            Disable this option to save memory.\n            \n    choice SCCB_HARDWARE_I2C_PORT\n        bool \"I2C peripheral to use for SCCB\"\n        default SCCB_HARDWARE_I2C_PORT1\n\n        config SCCB_HARDWARE_I2C_PORT0\n            bool \"I2C0\"\n        config SCCB_HARDWARE_I2C_PORT1\n            bool \"I2C1\"\n\n    endchoice\n\n    config SCCB_CLK_FREQ\n    int \"SCCB clk frequency\"\n    default 100000\n    range 100000 400000\n    help\n        Increasing this value can reduce the initialization time of the sensor.\n        Please refer to the relevant instructions of the sensor to adjust the value.\n    \n    choice GC_SENSOR_WINDOW_MODE\n        bool \"GalaxyCore Sensor Window Mode\"\n        depends on (GC2145_SUPPORT || GC032A_SUPPORT || GC0308_SUPPORT)\n        default GC_SENSOR_SUBSAMPLE_MODE\n        help\n            This option determines how to reduce the output size when the resolution you set is less than the maximum resolution.\n            SUBSAMPLE_MODE has a bigger perspective and WINDOWING_MODE has a higher frame rate.\n\n        config GC_SENSOR_WINDOWING_MODE\n            bool \"Windowing Mode\"\n        config GC_SENSOR_SUBSAMPLE_MODE\n            bool \"Subsample Mode\"\n    endchoice\n\n    config CAMERA_TASK_STACK_SIZE\n        int \"CAM task stack size\"\n        default 2048\n        help\n            Camera task stack size\n\n    choice CAMERA_TASK_PINNED_TO_CORE\n        bool \"Camera task pinned to core\"\n        default CAMERA_CORE0\n        help\n            Pin the camera handle task to a certain core(0/1). It can also be done automatically choosing NO_AFFINITY.\n\n        config CAMERA_CORE0\n            bool \"CORE0\"\n        config CAMERA_CORE1\n            bool \"CORE1\"\n        config CAMERA_NO_AFFINITY\n            bool \"NO_AFFINITY\"\n\n    endchoice\n\n    config CAMERA_DMA_BUFFER_SIZE_MAX\n        int \"DMA buffer size\"\n        range 8192 32768\n        default 32768\n        help\n            Maximum value of DMA buffer\n            Larger values may fail to allocate due to insufficient contiguous memory blocks, and smaller value may cause DMA interrupt to be too frequent.\n\n    choice CAMERA_JPEG_MODE_FRAME_SIZE_OPTION\n        prompt \"JPEG mode frame size option\"\n        default CAMERA_JPEG_MODE_FRAME_SIZE_AUTO\n        help\n            Select whether to use automatic calculation for JPEG mode frame size or specify a custom value.\n\n        config CAMERA_JPEG_MODE_FRAME_SIZE_AUTO\n            bool \"Use automatic calculation (width * height / 5)\"\n            help\n                Use the default calculation for JPEG mode frame size.\n                Note: In very low resolutions like QQVGA, the default calculation tends to result in insufficient buffer size.\n\n        config CAMERA_JPEG_MODE_FRAME_SIZE_CUSTOM\n            bool \"Specify custom frame size\"\n            help\n                Specify a custom frame size in bytes for JPEG mode.\n\n    endchoice\n\n    config CAMERA_JPEG_MODE_FRAME_SIZE\n        int \"Custom JPEG mode frame size (bytes)\"\n        default 8192\n        depends on CAMERA_JPEG_MODE_FRAME_SIZE_CUSTOM\n        help\n            This option sets the custom frame size in JPEG mode.\n            Specify the desired buffer size in bytes.\n\n    config CAMERA_CONVERTER_ENABLED\n        bool \"Enable camera RGB/YUV converter\"\n        depends on IDF_TARGET_ESP32S3\n        default n\n        help\n            Enable this option if you want to use RGB565/YUV422/YUV420/YUV411 format conversion.\n\n    choice CAMERA_CONV_PROTOCOL\n        bool \"Camera converter protocol\"\n        depends on CAMERA_CONVERTER_ENABLED\n        default LCD_CAM_CONV_BT601_ENABLED\n        help\n            Supports format conversion under both BT601 and BT709 standards.\n\n        config LCD_CAM_CONV_BT601_ENABLED\n            bool \"BT601\"\n        config LCD_CAM_CONV_BT709_ENABLED\n            bool \"BT709\"\n    endchoice\n\n    config LCD_CAM_CONV_FULL_RANGE_ENABLED\n        bool \"Camera converter full range mode\"\n        depends on CAMERA_CONVERTER_ENABLED\n        default y\n        help\n            Supports format conversion under both full color range mode and limited color range mode.\n            If full color range mode is selected, the color range of RGB or YUV is 0~255.\n            If limited color range mode is selected, the color range of RGB is 16~240, and the color range of YUV is Y[16~240], UV[16~235].\n            Full color range mode has a wider color range, so details in the image show more clearly.\n            Please confirm the color range mode of the current camera sensor, incorrect color range mode may cause color difference in the final converted image.\n            Full range mode is used by default. If this option is not selected, the format conversion function will be done using the limited range mode.\n\n    config LCD_CAM_ISR_IRAM_SAFE\n        bool \"Execute camera ISR from IRAM\"\n        depends on (IDF_TARGET_ESP32S2 || IDF_TARGET_ESP32S3)\n        default n\n        help\n            If this option is enabled, camera ISR will execute from IRAM.\nendmenu\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.5205078125,
          "content": "# ESP32 Camera Driver\n\n[![Build examples](https://github.com/espressif/esp32-camera/actions/workflows/build.yml/badge.svg)](https://github.com/espressif/esp32-camera/actions/workflows/build.yml) [![Component Registry](https://components.espressif.com/components/espressif/esp32-camera/badge.svg)](https://components.espressif.com/components/espressif/esp32-camera)\n## General Information\n\nThis repository hosts ESP32 series Soc compatible driver for image sensors. Additionally it provides a few tools, which allow converting the captured frame data to the more common BMP and JPEG formats.\n\n### Supported Soc\n\n- ESP32\n- ESP32-S2\n- ESP32-S3\n\n### Supported Sensor\n\n| model   | max resolution | color type | output format                                                | Len Size |\n| ------- | -------------- | ---------- | ------------------------------------------------------------ | -------- |\n| OV2640  | 1600 x 1200    | color      | YUV(422/420)/YCbCr422<br>RGB565/555<br>8-bit compressed data<br>8/10-bit Raw RGB data | 1/4\"     |\n| OV3660  | 2048 x 1536    | color      | raw RGB data<br/>RGB565/555/444<br/>CCIR656<br/>YCbCr422<br/>compression | 1/5\"     |\n| OV5640  | 2592 x 1944    | color      | RAW RGB<br/>RGB565/555/444<br/>CCIR656<br/>YUV422/420<br/>YCbCr422<br/>compression | 1/4\"     |\n| OV7670  | 640 x 480      | color      | Raw Bayer RGB<br/>Processed Bayer RGB<br>YUV/YCbCr422<br>GRB422<br>RGB565/555 | 1/6\"     |\n| OV7725  | 640 x 480      | color      | Raw RGB<br/>GRB 422<br/>RGB565/555/444<br/>YCbCr 422         | 1/4\"     |\n| NT99141 | 1280 x 720     | color      | YCbCr 422<br/>RGB565/555/444<br/>Raw<br/>CCIR656<br/>JPEG compression | 1/4\"     |\n| GC032A  | 640 x 480      | color      | YUV/YCbCr422<br/>RAW Bayer<br/>RGB565                        | 1/10\"    |\n| GC0308  | 640 x 480      | color      | YUV/YCbCr422<br/>RAW Bayer<br/>RGB565<br/>Grayscale                         | 1/6.5\"   |\n| GC2145  | 1600 x 1200    | color      | YUV/YCbCr422<br/>RAW Bayer<br/>RGB565                        | 1/5\"     |\n| BF3005  | 640 x 480      | color      | YUV/YCbCr422<br/>RAW Bayer<br/>RGB565                        | 1/4\"     |\n| BF20A6  | 640 x 480      | color      | YUV/YCbCr422<br/>RAW Bayer<br/>Only Y                        | 1/10\"    |\n| SC101IOT| 1280 x 720     | color      | YUV/YCbCr422<br/>Raw RGB                                     | 1/4.2\"   |\n| SC030IOT| 640 x 480      | color      | YUV/YCbCr422<br/>RAW Bayer                                   | 1/6.5\"   |\n| SC031GS | 640 x 480      | monochrome | RAW MONO<br/>Grayscale                                       | 1/6\"     |\n\n## Important to Remember\n\n- Except when using CIF or lower resolution with JPEG, the driver requires PSRAM to be installed and activated.\n- Using YUV or RGB puts a lot of strain on the chip because writing to PSRAM is not particularly fast. The result is that image data might be missing. This is particularly true if WiFi is enabled. If you need RGB data, it is recommended that JPEG is captured and then turned into RGB using `fmt2rgb888` or `fmt2bmp`/`frame2bmp`.\n- When 1 frame buffer is used, the driver will wait for the current frame to finish (VSYNC) and start I2S DMA. After the frame is acquired, I2S will be stopped and the frame buffer returned to the application. This approach gives more control over the system, but results in longer time to get the frame.\n- When 2 or more frame bufers are used, I2S is running in continuous mode and each frame is pushed to a queue that the application can access. This approach puts more strain on the CPU/Memory, but allows for double the frame rate. Please use only with JPEG.\n\n## Installation Instructions\n\n\n### Using with ESP-IDF\n\n- Add a dependency on `espressif/esp32-camera` component:\n  ```bash\n  idf.py add-dependency \"espressif/esp32-camera\"\n  ```\n  (or add it manually in idf_component.yml of your project)\n- Enable PSRAM in `menuconfig` (also set Flash and PSRAM frequiencies to 80MHz)\n- Include `esp_camera.h` in your code\n\nThese instructions also work for PlatformIO, if you are using `framework=espidf`.\n\n### Using with Arduino\n\n#### Arduino IDE\n\nIf you are using the arduino-esp32 core in Arduino IDE, no installation is needed! You can use esp32-camera right away.\n\n#### PlatformIO\n\nThe easy way -- on the `env` section of `platformio.ini`, add the following:\n\n```ini\n[env]\nlib_deps =\n  esp32-camera\n```\n\nNow the `esp_camera.h` is available to be included:\n\n```c\n#include \"esp_camera.h\"\n```\n\nEnable PSRAM on `menuconfig` or type it direclty on `sdkconfig`. Check the [official doc](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/kconfig.html#config-esp32-spiram-support) for more info.\n\n```\nCONFIG_ESP32_SPIRAM_SUPPORT=y\n```\n\n## Examples\n\nThis component comes with a basic example illustrating how to get frames from the camera. You can try out the example using the following command:\n\n```\nidf.py create-project-from-example \"espressif/esp32-camera:camera_example\"\n```\n\nThis command will download the example into `camera_example` directory. It comes already pre-configured with the correct settings in menuconfig.\n\n### Initialization\n\n```c\n#include \"esp_camera.h\"\n\n//WROVER-KIT PIN Map\n#define CAM_PIN_PWDN    -1 //power down is not used\n#define CAM_PIN_RESET   -1 //software reset will be performed\n#define CAM_PIN_XCLK    21\n#define CAM_PIN_SIOD    26\n#define CAM_PIN_SIOC    27\n\n#define CAM_PIN_D7      35\n#define CAM_PIN_D6      34\n#define CAM_PIN_D5      39\n#define CAM_PIN_D4      36\n#define CAM_PIN_D3      19\n#define CAM_PIN_D2      18\n#define CAM_PIN_D1       5\n#define CAM_PIN_D0       4\n#define CAM_PIN_VSYNC   25\n#define CAM_PIN_HREF    23\n#define CAM_PIN_PCLK    22\n\nstatic camera_config_t camera_config = {\n    .pin_pwdn  = CAM_PIN_PWDN,\n    .pin_reset = CAM_PIN_RESET,\n    .pin_xclk = CAM_PIN_XCLK,\n    .pin_sccb_sda = CAM_PIN_SIOD,\n    .pin_sccb_scl = CAM_PIN_SIOC,\n\n    .pin_d7 = CAM_PIN_D7,\n    .pin_d6 = CAM_PIN_D6,\n    .pin_d5 = CAM_PIN_D5,\n    .pin_d4 = CAM_PIN_D4,\n    .pin_d3 = CAM_PIN_D3,\n    .pin_d2 = CAM_PIN_D2,\n    .pin_d1 = CAM_PIN_D1,\n    .pin_d0 = CAM_PIN_D0,\n    .pin_vsync = CAM_PIN_VSYNC,\n    .pin_href = CAM_PIN_HREF,\n    .pin_pclk = CAM_PIN_PCLK,\n\n    .xclk_freq_hz = 20000000,//EXPERIMENTAL: Set to 16MHz on ESP32-S2 or ESP32-S3 to enable EDMA mode\n    .ledc_timer = LEDC_TIMER_0,\n    .ledc_channel = LEDC_CHANNEL_0,\n\n    .pixel_format = PIXFORMAT_JPEG,//YUV422,GRAYSCALE,RGB565,JPEG\n    .frame_size = FRAMESIZE_UXGA,//QQVGA-UXGA, For ESP32, do not use sizes above QVGA when not JPEG. The performance of the ESP32-S series has improved a lot, but JPEG mode always gives better frame rates.\n\n    .jpeg_quality = 12, //0-63, for OV series camera sensors, lower number means higher quality\n    .fb_count = 1, //When jpeg mode is used, if fb_count more than one, the driver will work in continuous mode.\n    .grab_mode = CAMERA_GRAB_WHEN_EMPTY//CAMERA_GRAB_LATEST. Sets when buffers should be filled\n};\n\nesp_err_t camera_init(){\n    //power up the camera if PWDN pin is defined\n    if(CAM_PIN_PWDN != -1){\n        pinMode(CAM_PIN_PWDN, OUTPUT);\n        digitalWrite(CAM_PIN_PWDN, LOW);\n    }\n\n    //initialize the camera\n    esp_err_t err = esp_camera_init(&camera_config);\n    if (err != ESP_OK) {\n        ESP_LOGE(TAG, \"Camera Init Failed\");\n        return err;\n    }\n\n    return ESP_OK;\n}\n\nesp_err_t camera_capture(){\n    //acquire a frame\n    camera_fb_t * fb = esp_camera_fb_get();\n    if (!fb) {\n        ESP_LOGE(TAG, \"Camera Capture Failed\");\n        return ESP_FAIL;\n    }\n    //replace this with your own function\n    process_image(fb->width, fb->height, fb->format, fb->buf, fb->len);\n  \n    //return the frame buffer back to the driver for reuse\n    esp_camera_fb_return(fb);\n    return ESP_OK;\n}\n```\n\n### JPEG HTTP Capture\n\n```c\n#include \"esp_camera.h\"\n#include \"esp_http_server.h\"\n#include \"esp_timer.h\"\n\ntypedef struct {\n        httpd_req_t *req;\n        size_t len;\n} jpg_chunking_t;\n\nstatic size_t jpg_encode_stream(void * arg, size_t index, const void* data, size_t len){\n    jpg_chunking_t *j = (jpg_chunking_t *)arg;\n    if(!index){\n        j->len = 0;\n    }\n    if(httpd_resp_send_chunk(j->req, (const char *)data, len) != ESP_OK){\n        return 0;\n    }\n    j->len += len;\n    return len;\n}\n\nesp_err_t jpg_httpd_handler(httpd_req_t *req){\n    camera_fb_t * fb = NULL;\n    esp_err_t res = ESP_OK;\n    size_t fb_len = 0;\n    int64_t fr_start = esp_timer_get_time();\n\n    fb = esp_camera_fb_get();\n    if (!fb) {\n        ESP_LOGE(TAG, \"Camera capture failed\");\n        httpd_resp_send_500(req);\n        return ESP_FAIL;\n    }\n    res = httpd_resp_set_type(req, \"image/jpeg\");\n    if(res == ESP_OK){\n        res = httpd_resp_set_hdr(req, \"Content-Disposition\", \"inline; filename=capture.jpg\");\n    }\n\n    if(res == ESP_OK){\n        if(fb->format == PIXFORMAT_JPEG){\n            fb_len = fb->len;\n            res = httpd_resp_send(req, (const char *)fb->buf, fb->len);\n        } else {\n            jpg_chunking_t jchunk = {req, 0};\n            res = frame2jpg_cb(fb, 80, jpg_encode_stream, &jchunk)?ESP_OK:ESP_FAIL;\n            httpd_resp_send_chunk(req, NULL, 0);\n            fb_len = jchunk.len;\n        }\n    }\n    esp_camera_fb_return(fb);\n    int64_t fr_end = esp_timer_get_time();\n    ESP_LOGI(TAG, \"JPG: %uKB %ums\", (uint32_t)(fb_len/1024), (uint32_t)((fr_end - fr_start)/1000));\n    return res;\n}\n```\n\n### JPEG HTTP Stream\n\n```c\n#include \"esp_camera.h\"\n#include \"esp_http_server.h\"\n#include \"esp_timer.h\"\n\n#define PART_BOUNDARY \"123456789000000000000987654321\"\nstatic const char* _STREAM_CONTENT_TYPE = \"multipart/x-mixed-replace;boundary=\" PART_BOUNDARY;\nstatic const char* _STREAM_BOUNDARY = \"\\r\\n--\" PART_BOUNDARY \"\\r\\n\";\nstatic const char* _STREAM_PART = \"Content-Type: image/jpeg\\r\\nContent-Length: %u\\r\\n\\r\\n\";\n\nesp_err_t jpg_stream_httpd_handler(httpd_req_t *req){\n    camera_fb_t * fb = NULL;\n    esp_err_t res = ESP_OK;\n    size_t _jpg_buf_len;\n    uint8_t * _jpg_buf;\n    char * part_buf[64];\n    static int64_t last_frame = 0;\n    if(!last_frame) {\n        last_frame = esp_timer_get_time();\n    }\n\n    res = httpd_resp_set_type(req, _STREAM_CONTENT_TYPE);\n    if(res != ESP_OK){\n        return res;\n    }\n\n    while(true){\n        fb = esp_camera_fb_get();\n        if (!fb) {\n            ESP_LOGE(TAG, \"Camera capture failed\");\n            res = ESP_FAIL;\n            break;\n        }\n        if(fb->format != PIXFORMAT_JPEG){\n            bool jpeg_converted = frame2jpg(fb, 80, &_jpg_buf, &_jpg_buf_len);\n            if(!jpeg_converted){\n                ESP_LOGE(TAG, \"JPEG compression failed\");\n                esp_camera_fb_return(fb);\n                res = ESP_FAIL;\n            }\n        } else {\n            _jpg_buf_len = fb->len;\n            _jpg_buf = fb->buf;\n        }\n\n        if(res == ESP_OK){\n            res = httpd_resp_send_chunk(req, _STREAM_BOUNDARY, strlen(_STREAM_BOUNDARY));\n        }\n        if(res == ESP_OK){\n            size_t hlen = snprintf((char *)part_buf, 64, _STREAM_PART, _jpg_buf_len);\n\n            res = httpd_resp_send_chunk(req, (const char *)part_buf, hlen);\n        }\n        if(res == ESP_OK){\n            res = httpd_resp_send_chunk(req, (const char *)_jpg_buf, _jpg_buf_len);\n        }\n        if(fb->format != PIXFORMAT_JPEG){\n            free(_jpg_buf);\n        }\n        esp_camera_fb_return(fb);\n        if(res != ESP_OK){\n            break;\n        }\n        int64_t fr_end = esp_timer_get_time();\n        int64_t frame_time = fr_end - last_frame;\n        last_frame = fr_end;\n        frame_time /= 1000;\n        ESP_LOGI(TAG, \"MJPG: %uKB %ums (%.1ffps)\",\n            (uint32_t)(_jpg_buf_len/1024),\n            (uint32_t)frame_time, 1000.0 / (uint32_t)frame_time);\n    }\n\n    last_frame = 0;\n    return res;\n}\n```\n\n### BMP HTTP Capture\n\n```c\n#include \"esp_camera.h\"\n#include \"esp_http_server.h\"\n#include \"esp_timer.h\"\n\nesp_err_t bmp_httpd_handler(httpd_req_t *req){\n    camera_fb_t * fb = NULL;\n    esp_err_t res = ESP_OK;\n    int64_t fr_start = esp_timer_get_time();\n\n    fb = esp_camera_fb_get();\n    if (!fb) {\n        ESP_LOGE(TAG, \"Camera capture failed\");\n        httpd_resp_send_500(req);\n        return ESP_FAIL;\n    }\n\n    uint8_t * buf = NULL;\n    size_t buf_len = 0;\n    bool converted = frame2bmp(fb, &buf, &buf_len);\n    esp_camera_fb_return(fb);\n    if(!converted){\n        ESP_LOGE(TAG, \"BMP conversion failed\");\n        httpd_resp_send_500(req);\n        return ESP_FAIL;\n    }\n\n    res = httpd_resp_set_type(req, \"image/x-windows-bmp\")\n       || httpd_resp_set_hdr(req, \"Content-Disposition\", \"inline; filename=capture.bmp\")\n       || httpd_resp_send(req, (const char *)buf, buf_len);\n    free(buf);\n    int64_t fr_end = esp_timer_get_time();\n    ESP_LOGI(TAG, \"BMP: %uKB %ums\", (uint32_t)(buf_len/1024), (uint32_t)((fr_end - fr_start)/1000));\n    return res;\n}\n```\n\n\n\n"
        },
        {
          "name": "conversions",
          "type": "tree",
          "content": null
        },
        {
          "name": "driver",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "idf_component.yml",
          "type": "blob",
          "size": 0.3291015625,
          "content": "description: ESP32 compatible driver for OV2640, OV3660, OV5640, OV7670 and OV7725 image sensors.\nurl: https://github.com/espressif/esp32-camera\nissues: https://github.com/espressif/esp32-camera/issues\ndocumentation: https://github.com/espressif/esp32-camera/tree/main/README.md\nrepository: https://github.com/espressif/esp32-camera.git\n"
        },
        {
          "name": "library.json",
          "type": "blob",
          "size": 0.705078125,
          "content": "{\n  \"name\": \"esp32-camera\",\n  \"version\": \"2.0.0\",\n  \"keywords\": \"esp32, camera, espressif, esp32-cam\",\n  \"description\": \"ESP32 compatible driver for OV2640, OV3660, OV5640, OV7670 and OV7725 image sensors.\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/espressif/esp32-camera\"\n  },\n  \"frameworks\": \"espidf\",\n  \"platforms\": \"*\",\n  \"build\": {\n    \"flags\": [\n      \"-Idriver/include\",\n      \"-Iconversions/include\",\n      \"-Idriver/private_include\",\n      \"-Iconversions/private_include\",\n      \"-Isensors/private_include\",\n      \"-Itarget/private_include\",\n      \"-fno-rtti\"\n    ],\n    \"includeDir\": \".\",\n    \"srcDir\": \".\",\n    \"srcFilter\": [\"-<*>\", \"+<driver>\", \"+<conversions>\", \"+<sensors>\"]\n  }\n}\n"
        },
        {
          "name": "sensors",
          "type": "tree",
          "content": null
        },
        {
          "name": "target",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}