{
  "metadata": {
    "timestamp": 1736709877602,
    "page": 362,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bztsrc/raspi3-tutorial",
      "stars": 2784,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.00390625,
          "content": "*.o\n"
        },
        {
          "name": "00_crosscompiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "01_bareminimum",
          "type": "tree",
          "content": null
        },
        {
          "name": "02_multicorec",
          "type": "tree",
          "content": null
        },
        {
          "name": "03_uart1",
          "type": "tree",
          "content": null
        },
        {
          "name": "04_mailboxes",
          "type": "tree",
          "content": null
        },
        {
          "name": "05_uart0",
          "type": "tree",
          "content": null
        },
        {
          "name": "06_random",
          "type": "tree",
          "content": null
        },
        {
          "name": "07_delays",
          "type": "tree",
          "content": null
        },
        {
          "name": "08_power",
          "type": "tree",
          "content": null
        },
        {
          "name": "09_framebuffer",
          "type": "tree",
          "content": null
        },
        {
          "name": "0A_pcscreenfont",
          "type": "tree",
          "content": null
        },
        {
          "name": "0B_readsector",
          "type": "tree",
          "content": null
        },
        {
          "name": "0C_directory",
          "type": "tree",
          "content": null
        },
        {
          "name": "0D_readfile",
          "type": "tree",
          "content": null
        },
        {
          "name": "0E_initrd",
          "type": "tree",
          "content": null
        },
        {
          "name": "0F_executionlevel",
          "type": "tree",
          "content": null
        },
        {
          "name": "10_virtualmemory",
          "type": "tree",
          "content": null
        },
        {
          "name": "11_exceptions",
          "type": "tree",
          "content": null
        },
        {
          "name": "12_printf",
          "type": "tree",
          "content": null
        },
        {
          "name": "13_debugger",
          "type": "tree",
          "content": null
        },
        {
          "name": "14_raspbootin64",
          "type": "tree",
          "content": null
        },
        {
          "name": "15_writesector",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1083984375,
          "content": "    Copyright (C) 2017 bzt (bztsrc@github)\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use, copy,\n    modify, merge, publish, distribute, sublicense, and/or sell copies\n    of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "OLVASSEL.md",
          "type": "blob",
          "size": 11.7666015625,
          "content": "A Raspberry Pi 3 alacsony szintű programozása\n=============================================\n\nÜdvözöllek! Ez az oktatóanyag azok számára készült, akik szeretnének saját alacsony szintű (bare metal)\nprogramot írni a Raspberry Pi-jükre.\n\nA célközönsége elsősorban azok a hobby OS fejlesztők, akik most ismerkednek ezzel a hardverrel. Példákat mutatok\narra, hogyan kell az alapfunkciókat megvalósítani, úgy mint soros vonalra írás, billentyűleütés kiolvasás, beállítani\na képernyő felbontását és rajzolni rá. Azt is megmutatom, hogy kell az alaplap sorszámát és igazi, vas által\ngenerált véletlenszámot kiolvasni, valamint hogy hogyan kell fájlokat beolvasni a kártyáról.\n\nEz az oktatóanyag *nem* arról szól, hogy hogyan írjunk operációs rendszert. Nem érint olyan témákat, mint a\nmemória gazdálkodás, virtuális fájlrendszer kezelés, vagy hogy hogyan valósítsuk meg a multitaszkot. Ha saját\nOS-t szeretnél írni a Raspberry Pi-re, akkor javaslom előbb nézz körbe máshol, mielőtt folytatnád. Ez az\noktatóanyag kifejezetten arról szól, hogy kommunikáljunk az adott hardverrel, és nem az operációs rendszerek\nhátteréről. Ha ez érdekel, ezt javaslom: [raspberry-pi-os](https://github.com/s-matyukevich/raspberry-pi-os).\n\nFeltételezem, hogy elegendő GNU/Linux ismerettel rendelkezel, tudod, hogy kell programokat fordítani és lemez\nvalamint fájlrendszer képfájlokat létrehozni. Nem fogok kitérni ezekre, bár pár apró tanácsot adok arról, hogy\nhogyan állítsuk be a kereszt-fordítót kifejezetten ehhez az architektúrához.\n\nMiért Raspberry Pi 3?\n---------------------\n\nTöbb okból is erre esett a választásom: először is olcsó, könnyen beszerezhető. Másodszor teljesen 64 bites\nmasina. Már réges rég felhagytam a 32 bites fejlesztéssel, mivel a 64 bit sokkal izgalmasabb. A címterülete\nhatalmas, nagyobb, mint a tárolókapacitás, ezért lehetővé teszi új, izgalmas megoldások létrehozását.\nHarmadsorban MMIO-t használ, amit könnyű programozni.\n\n32 bites oktatóanyagokhoz a következőket ajánlom:\n\n[Cambridge-i oktatóanyagok](http://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/os/) (ASM és csak 32 bites példák),\n\n[David Welch oktatóanyagai](https://github.com/dwelch67/raspberrypi) (főleg C, néhány 64 bites példával),\n\n[Peter Lemon oktatóanyagai](https://github.com/PeterLemon/RaspberryPi) (csak ASM, 64 bites példák is) és\n\n[Leon de Boer oktatóanyagai](https://github.com/LdB-ECM/Raspberry-Pi) (C és ASM, 64 bites és összetettebb példák is, mint USB és OpenGL).\n\nMi a helyzet Raspberry Pi 4 fronton?\n------------------------------------\n\nTöbbé-kevésbé ugyanaz a vas, és ugyanazok a perifériák csak az MMIO_BASE címe más (mármint ami ezt az oktatóanyagot érinti,\na legtöbb különbség minket most nem érint). RPi4 oktatóanyagnak a következőt ajánlom:\n\n[rpi4-osdev oktatóanyagai](https://isometimes.github.io/rpi4-osdev)\n\n\nMiért nem C++?\n--------------\n\nA C nyelv \"freestanding\" módban lehetővé teszi, hogy direktben a vasra programozzunk. C++ esetében ez nem lehetséges,\nott mindenképp szükség van egy runtime függvénykönyvtárra. Ha valakit ez érdekel, akkor ajánlom figyelmébe a\nnagyszerű [Circle C++](https://github.com/rsta2/circle) függvénykönyvtárat, ami nemcsak a C++-hoz szükséges függvényeket\ntartalmazza, hanem minden Raspberry Pi funkció, amit ebben az oktatóanyagban sorra veszünk (és még több is) már eleve\nimplementálva van benne, csak meg kell hívni őket.\n\nMiért nem Rust?\n---------------\n\nEgyszerűen azért, mert a személyes véleményem az, hogy a Rust nyelv felsőbb szintű, mint ami ideális a direkt vas programozásához,\nvalahogy úgy, ahogy C++ esetében. De ha biztosítod a szükséges runtime függvénykönyvtárat, akkor lehetséges. A multiplatform\nrendszerbetöltőmhöz van egy [minta Rust kernel](https://gitlab.com/bztsrc/bootboot) is, és @andre-richter portolta ezeket az\noktatóanyagokat Rustra. Később jelentősen átírta és kibővítette a [Rust repó](https://github.com/rust-embedded/rust-raspi3-OS-tutorials)ját,\nami kiváló kiindulás ha ez a programozási nyelv érdekel.\n\nElőkészületek\n-------------\n\nMielőtt belevágnánk, szükséged lesz egy kereszt-fordítóra (lásd 00_crosscompiler könyvtár) és egy Micro SD\nkártyára néhány [firmware fájllal](https://github.com/raspberrypi/firmware/tree/master/boot) egy FAT partíción.\n\nMinden könyvtárban található egy Makefile.gcc és egy Makefile.clang. Bizonyosodj meg róla, hogy a Makefile symlink az általad\nválasztott kereszt-fordítódra mutat-e. Szeretném külön megköszönni [@laroche](https://github.com/laroche)-nak, amiért az\noktatóanyagokat elsőként Clang-al is letesztelte.\n\nJavaslom, hogy szerezz be egy [Micro SD kártya USB adaptert](http://media.kingston.com/images/products/prodReader-FCR-MRG2-img.jpg)\n(sok gyártó eleve szállít ilyent az SD kártyáihoz), hogy könnyedén csatlakoztathasd az asztali gépedhez, mint egy\npent, speciális kártya olvasó interfész nélkül (habár sok laptopban gyárilag van ilyen olvasó manapság). Ha nem szereted a `dd`-t,\nakkor a lemezképek írásához javaslom az [USBImager](https://gitlab.com/bztsrc/usbimager)t, ami egy egyszerű GUI-s alkalmazás, nem\nigényel telepítést és elérhető Windows, MacOSX és Linux rendszerekhez.\n\nAz MBR partíciós táblát létre kell hozni az SD kártyán LBA FAT32 (0x0C típusú) partícióval, leformázni azt,\nmajd rámásolni a *bootcode.bin*, *start.elf* és *fixup.dat* állományokat. Alternatívaként letöltheted a raspbian képfájlt,\n`dd`-vel rárakhatod a kártyára, majd mountolás után letörölheted a felesleges .img fájlokat. Amenyik szimpatikusabb. A lényeg\naz, hogy ezekben az oktatóanyagokban `kernel8.img` fájlokat gyártunk, amit a partíció gyökér könyvtárába kell másolni,\nés más `.img` kiterjesztésű fájl nem lehet ott.\n\nJavaslom továbbá, hogy vegyél egy [soros USB debug kábelt](https://www.adafruit.com/product/954). Ezt a GPIO 14-es\nés 15-ös lábára kell csatlakoztatni, az asztali gépen pedig a következő paranccsal kell elindítani a minicom-ot:\n\n```sh\nminicom -b 115200 -D /dev/ttyUSB0\n```\n\nEmulálás\n--------\n\nSajnálatos módon a hivatalos qemu bináris nem támogatja a Raspberry Pi 3-at egyenlőre. De van egy jó hírem, megírtam\na támogatást hozzá, így hamarosan érkezik (FRISSÍTÉS: elérhető a [qemu 2.12](https://wiki.qemu.org/ChangeLog/2.12#ARM)-ben). Addig\nsajnos fordítani kell a qemu-t a legfrissebb forrásból. Miután lefordult, így tudod használni:\n\n```sh\nqemu-system-aarch64 -M raspi3b -kernel kernel8.img -serial stdio\n```\n\nVagy (a fájl rendszer oktatóanyagok esetében)\n\n```sh\nqemu-system-aarch64 -M raspi3b -kernel kernel8.img -drive file=$(yourimagefile),if=sd,format=raw -serial stdio\n```\n\n**-M raspi3b**\nAz első paraméter utasítja a qemu-t a Raspberry Pi 3 hardver emulálására.\n\n**-kernel kernel8.img**\nA második megadja a használandó kernel fájl nevét.\n\n**-drive file=$(yourimagefile),if=sd,format=raw**\nA második esetben az extra paraméter megadja az SD kártya képfájl nevét, ami lehet egy sima raspbian képfájl is akár.\n\n**-serial stdio**\n\n**-serial null -serial stdio**\nVégezetül az utolsó paraméter lehetővé teszi, hogy az emulált gép UART0-ját átirányítsuk a qemu-t futtató terminál be- és\nkimenetére, azaz hogy minden, a virtuális gépen soros vonalra küldött karater megjelenjen a terminálon, az ott leütött karaktereket\npedig kiolvashassuk a vm-en. Ez csak az 5-ös oktatóanyagtól működik, mivel az UART1 alapból *nem* irányítódik át. Ehhez plusz\nparaméterekre van szükség, mint például `-chardev socket,host=localhost,port=1111,id=aux -serial chardev:aux` (köszönet\n[@godmar](https://github.com/godmar)-nak az infóért), vagy egyszerűen kétszer kell megadni a `-serial` kapcsolót (köszönet\n[@cirosantilli](https://github.com/cirosantilli)).\n\n**!!!FIGYELEM!!!** Qemu emulálása felületes, csak a legáltalánosabb perifériákat támogatja! **!!!FIGYELEM!!!**\n\nMagáról a hardverről\n--------------------\n\nRengeteg oldal foglalkozik az interneten a Raspberry Pi 3 hardverének részletes bemutatásával, szóval itt rövid\nleszek, és csak az alapokat futjuk át.\n\nAz alaplapon egy [BCM2837 SoC](https://github.com/raspberrypi/documentation/tree/master/hardware/raspberrypi/bcm2837) csip\ntalálható. Ebbe beszereltek\n\n - VideoCore grafikus processzort (GPU)\n - ARM-Cortex-A53 általános processzort (CPU, ARMv8)\n - És néhány MMIO-val leképzett perifériát.\n\nÉrdekesség, hogy a nem a CPU a fő processzor. Amikor bekapcsoljuk, először a GPU kezd futni. Amikor végzett az\ninicializálásával, ami a bootcode.bin futtatását jelenti, betölti a start.elf programot. Ez nem egy ARM-es futtatható\nállomány, hanem a GPU-ra íródott. Ami számunkra érdekes, az az, hogy ez a start.elf különféle ARM futtathatók után\nkutat, melyek mind `kernel`-el kezdődnek, és `.img`-re végződnek. Mivel mi a CPU-t AArch64 módban fogjuk programozni,\nezért nekünk a `kernel8.img` fájlra van szükségünk, ami a legutolsó keresett fájlnév. Miután betöltötte, a GPU magasba\nemeli az ARM processzor reset lábát, aminek hatására elkezdi a futtatást a 0x80000-as címen (egész pontosan a 0-ás\ncímen, csak oda a GPU egy [ARM inicializáló kódot és ugrás utasítást](https://github.com/raspberrypi/tools/blob/master/armstubs/armstub8.S) rakott előtte).\n\nA RAM (1G a Raspberry Pi 3-on) meg van osztva a CPU és a GPU között, ezért az egyik tudja olvasni, amit a másik\na memóriába írt. A félreértések elkerülése végett egy jól definiált, úgy nevezett levelesláda [mailbox](https://github.com/raspberrypi/firmware/wiki/Mailboxes)\ninterfészt alakítottak ki. A CPU beletesz egy üzenetet a levesládába, és szól a GPU-nak, hogy üzenete van. A GPU\n(tudván, hogy a teljes üzenet a memóriában van) értelmezi azt, és ugyanarra a címre egy választ rak. A CPU-nak\nfolyamatosan figyelni kell a memóriát, hogy végzett-e a GPU, és ha igen, akkor és csak akkor kiolvashatja a választ.\n\nHasonlóan a perifáriák is a memórián keresztül kommunikálnak a CPU-val. Mindegyiknek saját dedikált címe van,\n0x3F000000-tól kezdődően, de ez nem igazi RAM (MMIO, memóriába leképzett ki- és bemenet). Namost itt nincs levelesláda,\nminden eszköz saját protokollt beszél. Ami közös, az az, hogy ez a memóriarész csak 32 bites adagokban, 4-el osztható\ncímen írható / olvasható (szavak), és mindegyiknek kontroll/státusz illetve adat szavai vannak. Sajnálatos módon\na Broadcom (a SoC gyártója) hírhedten szarul dokumentája a termékeit. A legjobb, ami van, a BCM2835-ös leírása, ami\nazért eléggé hasonló.\n\nVan továbbá lapcímfordító egység (MMU) a CPU-ban ami lehetővé teszi virtuális címterek használatát. Ez néhány\nspeciális CPU rendszer regiszterrel programozható, és oda kell figyelni, amikor ezeket az MMIO területeket képezük le\nvele a virtuális címtérbe.\n\nNéhány az érdekesebb MMIO címek közül:\n```\n0x3F003000 - Rendszer Időzítő (System Timer)\n0x3F00B000 - Megszakítás vezérlő (Interrupt controller)\n0x3F00B880 - VideoCore levelesláda (VideoCore mailbox)\n0x3F100000 - Energiagazdálkodás (Power management)\n0x3F104000 - Véletlenszám generátor (Random Number Generator)\n0x3F200000 - Általános célú ki- és bemenet vezérlő (General Purpose IO controller)\n0x3F201000 - UART0 (soros port, PL011)\n0x3F215000 - UART1 (soros port, AUX mini UART)\n0x3F300000 - Külső tároló vezérlő (External Mass Media Controller, SD kártya olvasás)\n0x3F980000 - USB vezérlő (Universal Serial Bus controller)\n```\nA többi információ megtalálható a Raspberry Pi firmware wiki-ben és a documentation repóban a github-on.\n\nhttps://github.com/raspberrypi\n\nSok szerencsét és élvezetes hekkelést a Raspberry-dhez! :-)\n\nbzt\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.6162109375,
          "content": "Bare Metal Programming on Raspberry Pi 3\n========================================\n\nHello there! This tutorial series are made for those who would like to compile their own bare metal application\nfor the Raspberry Pi.\n\nThe target audience is hobby OS developers, who are new to this hardware. I'll give you examples on how to do the\nbasic things, like writing to the serial console, reading keystrokes from it, setting screen resolution and draw to\nthe linear frame buffer. I'm also going to show you how to get the hardware's serial number, a hardware-backed random\nnumber, and how to read files from the boot partition.\n\nThis is *not* a tutorial on how to write an OS. I won't cover topics like memory management and virtual file systems,\nor how to implement multi-tasking. If you plan to write your own OS for the Raspberry Pi, I suggest to do some\nresearch before you continue. This tutorial is strickly about interfacing with the hardware, and not about OS theory.\nFor that, I'd recommend [raspberry-pi-os](https://github.com/s-matyukevich/raspberry-pi-os).\n\nI assume you have a fair GNU/Linux knowledge on how to compile programs and create disk and file system images. I\nwon't cover those in detail, although I'll give you a few hints about how to set up a cross-compiler for this architecture.\n\nWhy Raspberry Pi 3?\n-------------------\n\nI've choosen this board for several reasons: first of all, it's cheap and easy to get. Second, it's a 64 bit\nmachine. I gave up programming for 32 bit long long time ago. The 64 bit is so much more interesting, as it's\naddress space is increadibly huge, bigger than the storage capacity which allows us to use some interesting new\nsolutions. Third, uses only MMIO which makes it easy to program.\n\nFor 32 bit tutorials, I'd recommend:\n\n[Cambridge tutorials](http://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/os/) (ASM and 32 bit only),\n\n[David Welch's tutorials](https://github.com/dwelch67/raspberrypi) (mostly C, with some 64 bit examples),\n\n[Peter Lemon's tutorials](https://github.com/PeterLemon/RaspberryPi) (ASM only, also for 64 bit) and\n\n[Leon de Boer's tutorials](https://github.com/LdB-ECM/Raspberry-Pi) (C and ASM, also for 64 bit, more complex examples like USB and OpenGL).\n\nWhat about Raspberry Pi 4?\n--------------------------\n\nMore or less the same hw with the same peripherals, only the MMIO_BASE address is different (as long as this tutorial concerned,\nmost of the differences are irrelevant for us). For RPi4 tutorials I'd recommend\n\n[rpi4-osdev tutorials](https://isometimes.github.io/rpi4-osdev)\n\nWhy not C++?\n------------\n\nThe C language in \"freestanding\" mode allows us to develop directly to the hardware. With C++ this is not\npossible, because that requires a runtime library. If you are interested in this, then I suggest to take a look\nat the brilliant [Circle C++](https://github.com/rsta2/circle) library, which not only contains the mandatory\nC++ runtime, but also implements every Raspberry Pi functionalities we're about to discuss in these tutorials (and even more).\n\nWhy not Rust?\n-------------\n\nSimply because my personal opinion is that Rust is a much higher level language than preferable for bare metal, something like\nwith C++. But if you provide the required runtime libraries, you can do it. My multiplatform system boot loader has an\n[example Rust kernel](https://gitlab.com/bztsrc/bootboot) too and @andre-richter ported these tutorials to Rust.\nHe has added considerably more code to his [Rust repository](https://github.com/rust-embedded/rust-raspi3-OS-tutorials) which\nis a very good start if you're interested in this language.\n\nA few questions popped up on [ycombinator](https://news.ycombinator.com/item?id=24637129) regarding this. First, please note\nthat I've started the sentance with \"my personal opinion\" (and I mean Rust has a considerably larger and more complex grammar\nthan C, and it's easy to forget with cargo that you actually must compile in all library dependencies). Second, and please\ndon't get this the wrong way, but if you find clicking on the \"Rust port\" link too complicated then maybe low-level\nprogramming is not the best hobby for you!\n\nPrerequisites\n-------------\n\nBefore you can start, you'll need a cross-compiler (see 00_crosscompiler directory for details)\nand a Micro SD card with [firmware files](https://github.com/raspberrypi/firmware/tree/master/boot) on a FAT filesystem.\n\nEvery directory has a Makefile.gcc and a Makefile.clang. Make sure the Makefile symlink points to the version according to\nthe cross-compiler of your choosing.  I'd like to say thanks to [@laroche](https://github.com/laroche) for testing these\ntutorials for the first time with Clang too.\n\nI recommend to get a [Micro SD card USB adapter](http://media.kingston.com/images/products/prodReader-FCR-MRG2-img.jpg)\n(many manufacturers ship SD cards with such an adapter), so that you can connect the card to any desktop computer just\nlike an USB stick, no special card reader interface required (although many laptops have those these days). If you dislike\n`dd`, then for writing images I recommend [USBImager](https://gitlab.com/bztsrc/usbimager) which is simple GUI app with a\nportable executable available for Windows, MacOSX and Linux.\n\nYou can create an MBR partitioning scheme on the SD card with an LBA FAT32 (type 0x0C) partition, format it\nand copy *bootcode.bin*, *start.elf* and *fixup.dat* onto it. Or alternatively you can download a raspbian image,\n`dd` it to the SD card, mount it and delete the unnecessary .img files. Whichever you prefer. What's important, you'll\ncreate `kernel8.img` with these tutorials which must be copied to the root directory on the SD card, and no other `.img`\nfiles should exists there.\n\nI'd also recommend to get an [USB serial debug cable](https://www.adafruit.com/product/954). You connect it to the\nGPIO pins 14/15, and run minicom on your desktop computer like\n\n```sh\nminicom -b 115200 -D /dev/ttyUSB0\n```\n\nEmulation\n---------\n\nUnfortunately official qemu binary does not support Raspberry Pi 3 yet. But good news, I've implemented that, so\nit's coming soon (UPDATE: available in [qemu 2.12](https://wiki.qemu.org/ChangeLog/2.12#ARM)). Until then, you have to\ncompile qemu from the latest source. Once compiled, you can use it with:\n\n```sh\nqemu-system-aarch64 -M raspi3b -kernel kernel8.img -serial stdio\n```\n\nOr (with the file system tutorials)\n\n```sh\nqemu-system-aarch64 -M raspi3b -kernel kernel8.img -drive file=$(yourimagefile),if=sd,format=raw -serial stdio\n```\n\n**-M raspi3b**\nThe first argument tells qemu to emulate Raspberry Pi 3 Model B hardware.\n\n**-kernel kernel8.img**\nThe second tells the kernel filename to be used.\n\n**-drive file=$(yourimagefile),if=sd,format=raw**\nIn second case this argument tells the SD card image too, which can be a standard rasbian image as well.\n\n**-serial stdio**\n\n**-serial null -serial stdio**\nFinally the last argument redirects the emulated UART0 to the standard input/output of the terminal running qemu, so that everything\nsent to the serial line will be displayed, and every key typed in the terminal will be received by the vm. Only works with the\ntutorials 05 and above, as UART1 is *not* redirected by default. For that, you would have to add something like\n`-chardev socket,host=localhost,port=1111,id=aux -serial chardev:aux` (thanks [@godmar](https://github.com/godmar) for the info),\nor simply use two `-serial` arguments (thanks [@cirosantilli](https://github.com/cirosantilli)).\n\n**!!!WARNING!!!** Qemu emulation is rudimentary, only the most common peripherals are emulated! **!!!WARNING!!!**\n\nAbout the hardware\n------------------\n\nThere are lots of pages on the internet describing the Raspberry Pi 3 hardware in detail, so I'll be brief and\ncover only the basics.\n\nThe board is shipped with a [BCM2837 SoC](https://github.com/raspberrypi/documentation/tree/master/hardware/raspberrypi/bcm2837) chip.\nThat includes a\n\n - VideoCore GPU\n - ARM-Cortex-A53 CPU (ARMv8)\n - Some MMIO mapped peripherals.\n\nInterestingly the CPU is not the main processor on the board. When it's powered up, first GPU runs. When it's\nfinished with the initialization by executing the code in bootcode.bin, it will load and execute the start.elf executable.\nThat's not an ARM executable, but compiled for the GPU. What interests us is that start.elf looks for different\nARM executables, all starting with `kernel` and ending in `.img`. As we're going to program the CPU in AArch64 mode,\nwe'll need `kernel8.img` only, which is the last to look for. Once it's loaded, the GPU triggers the reset line on\nthe ARM processor, which starts executing code at address 0x80000 (or more precisely at 0, but the GPU puts an [ARM\ninitialisation and jump code](https://github.com/raspberrypi/tools/blob/master/armstubs/armstub8.S) there first).\n\nThe RAM (1G for the Raspberry Pi 3) is shared among the CPU and the GPU, meaning one can read what the other has\nwritten into memory. To avoid confusion, a well defined, so called [mailbox interface](https://github.com/raspberrypi/firmware/wiki/Mailboxes)\nis established. The CPU writes a message into the mailbox, and tells the GPU to read it. The GPU (knowing that the\nmessage is entirely in memory) interprets it, and places a response message at the same address. The CPU has\nto poll the memory to know when the GPU is finished, and then it can read the response.\n\nSimilarily, all peripherals communicates in memory with the CPU. Each has it's dedicated memory address starting from\n0x3F000000, but it's not in real RAM (called Memory Mapped IO). Now there's no mailbox for peripherals, instead each\ndevice has it's own protocol. What's common for these devices that their memory must be read and written in 32 bit\nunits at 4 bytes aligned addresses (so called words), and each has control/status and data words. Unfortunately\nBroadcom (the manufacturer of the SoC chip) is legendary bad at documenting their products. The best we've got is the\nBCM2835 documentation, which is close enough.\n\nThere's also a Memory Management Unit in the CPU which allows creating virtual address spaces. This can be programmed\nby specific CPU registers, and care must be taken when you map these MMIO addresses into a virtual address space.\n\nSome of the more interesting MMIO addresses are:\n```\n0x3F003000 - System Timer\n0x3F00B000 - Interrupt controller\n0x3F00B880 - VideoCore mailbox\n0x3F100000 - Power management\n0x3F104000 - Random Number Generator\n0x3F200000 - General Purpose IO controller\n0x3F201000 - UART0 (serial port, PL011)\n0x3F215000 - UART1 (serial port, AUX mini UART)\n0x3F300000 - External Mass Media Controller (SD card reader)\n0x3F980000 - Universal Serial Bus controller\n```\nFor more information, see Raspberry Pi firmware wiki and documentation on github.\n\nhttps://github.com/raspberrypi\n\nGood luck and enjoy hacking with your Raspberry! :-)\n\nbzt\n"
        }
      ]
    }
  ]
}