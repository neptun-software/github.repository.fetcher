{
  "metadata": {
    "timestamp": 1736710208646,
    "page": 920,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AllAlgorithms/c",
      "stars": 1621,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "algorithms",
          "type": "tree",
          "content": null
        },
        {
          "name": "heapsort.c",
          "type": "blob",
          "size": 1.53125,
          "content": "﻿#include <stdio.h>\r\n \r\nvoid main()\r\n{\r\n    int heap[10], no, i, j, c, root, temp;\r\n \r\n    printf(\"\\n Enter no of elements :\");\r\n    scanf(\"%d\", &no);\r\n    printf(\"\\n Enter the nos : \");\r\n    for (i = 0; i < no; i++)\r\n       scanf(\"%d\", &heap[i]);\r\n    for (i = 1; i < no; i++)\r\n    {\r\n        c = i;\r\n        do\r\n        {\r\n            root = (c - 1) / 2;             \r\n            if (heap[root] < heap[c])   /* to create MAX heap array */\r\n            {\r\n                temp = heap[root];\r\n                heap[root] = heap[c];\r\n                heap[c] = temp;\r\n            }\r\n            c = root;\r\n        } while (c != 0);\r\n    }\r\n \r\n    printf(\"Heap array : \");\r\n    for (i = 0; i < no; i++)\r\n        printf(\"%d\\t \", heap[i]);\r\n    for (j = no - 1; j >= 0; j--)\r\n    {\r\n        temp = heap[0];\r\n        heap[0] = heap[j];   /* swap max element with rightmost leaf element */\r\n        heap[j] = temp;\r\n        root = 0;\r\n        do \r\n        {\r\n            c = 2 * root + 1;    /* left node of root element */\r\n            if ((heap[c] < heap[c + 1]) && c < j-1)\r\n                c++;\r\n            if (heap[root]<heap[c] && c<j)    /* again rearrange to max heap array */\r\n            {\r\n                temp = heap[root];\r\n                heap[root] = heap[c];\r\n                heap[c] = temp;\r\n            }\r\n            root = c;\r\n        } while (c < j);\r\n    } \r\n    printf(\"\\n The sorted array is : \");\r\n    for (i = 0; i < no; i++)\r\n       printf(\"\\t %d\", heap[i]);\r\n    printf(\"\\n Complexity : \\n Best case = Avg case = Worst case = O(n logn) \\n\");\r\n}"
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.1533203125,
          "content": "MIT License\n\nCopyright (c) 2018 All Algorithms and its contributors (allalgorithms.com)\nCopyright (c) 2018 Carlos Abraham <abraham@abranhe.com> (abranhe.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 14.9560546875,
          "content": "We are accepting all pull requests. [Read More](https://github.com/AllAlgorithms/algorithms/issues/40)\n\n<div align=\"center\" id=\"top\">\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<img width=\"500\" height=\"350\" src=\"https://cdn.abranhe.com/projects/algorithms/logo.svg\" alt=\"Algorithms Logo\">\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\n<p>\n\t<a href=\"#what-is-an-algorithm\">What is an algorithm?</a>&nbsp;&nbsp;&nbsp;\n\t<a href=\"https://github.com/AllAlgorithms/algorithms/blob/master/.github/contributing.md\">Contributing</a>&nbsp;&nbsp;&nbsp;\n\t<a href=\"https://www.redbubble.com/people/abranhe/works/34285088\">Stickers & T-Shirts</a>\n</p>\n\n\n<p>\n<a href=\"https://twitter.com/AllAlgorithms\">\n  <img src=\"https://cdn.svgporn.com/logos/twitter.svg\" width=\"17px\"> Twitter\n</a>&nbsp;&nbsp;&nbsp;\n<a href=\"https://instagram.com/AllAlgorithms\">\n  <img src=\"https://www.instagram.com/static/images/ico/apple-touch-icon-152x152-precomposed.png/419a6f9c7454.png\" width=\"17px\"> Instagram\n</a>&nbsp;&nbsp;&nbsp;\n<a href=\"https://github.com/AllAlgorithms\">\n  <img src=\"https://img.icons8.com/ios-glyphs/90/333333/github.png\" width=\"18px\"> Github\n</a>&nbsp;&nbsp;&nbsp;\n</p>\n\n<br>\n<p align=\"center\">\n  <i>Huge collection of All ▲lgorithms implemented in multiple languages</i>\n</p>\n<br>\n\n<a href=\"https://github.com/AllAlgorithms\"><img src=\"https://cdn.abranhe.com/projects/algorithms/badge.svg\" /></a>\n<a href=\"https://cash.me/$abranhe\"><img src=\"https://cdn.abranhe.com/badges/cash-me.svg\"></a>\n<a href=\"https://paypal.me/abranhe/10\"><img src=\"https://cdn.abranhe.com/badges/paypal.svg\"></a>\n<a href=\"https://patreon.com/abranhe\"><img src=\"https://cdn.abranhe.com/badges/patreon.svg\" /></a>\n\n</div>\n\n## See\n\n- [What is an algorithm](#what-is-an-algorithm)\n- [Contributing](https://github.com/AllAlgorithms/algorithms/blob/master/.github/contributing.md)\n- [Code of Conduct](https://github.com/AllAlgorithms/algorithms/blob/master/.github/code-of-conduct.md)\n- [Stickers and T-Shirts](https://www.redbubble.com/people/abranhe/works/34285088)\n- [Twitter](https://twitter.com/AllAlgorithms)\n- [Instagram](https://instagram.com/AllAlgorithms)\n- [Algorithms Categories](#categories)\n- [Maintainers](#maintainers)\n- [License](#license)\n\n\n## What is an algorithm?\n\nInformally, an algorithm is any well-defined computational procedure that takes\nsome value, or set of values, as input and produces some value, or set of values, as\noutput. An algorithm is thus a sequence of computational steps that transform the\ninput into the output.\n\nAn algorithm should have three important characteristics to be considered valid:\n\n- **It should be finite**: If your algorithm never ends trying to solve the problem\nit was designed to solve then it is useless\n- **It should have well defined instructions**: Each step of the algorithm has to\nbe precisely defined; the instructions should be unambiguously specified for each case.\n- **It should be effective**: The algorithm should solve the problem it was designed\nto solve. And it should be possible to demonstrate that the algorithm converges with\njust a paper and pencil.\n\n## Categories\n\n> Structure of The All ▲lgoritms project\n\n- [Artificial Intelligence](#artificial-intelligence)\n- [Backtracking](#backtracking)\n- [Bit Manipulation](#bit-manipulation)\n- [Cellular Automaton](#cellular-automaton)\n- [Ciphers](#ciphers)\n- [Computational Geometry](#computational-geometry)\n- [Cryptography](#cryptography)\n- [Data Structures](#data-structures)\n- [Divide and conquer](#divide-and-conquer)\n- [Dynamic Programming](#dynamic-programming)\n- [Gaming Theory](#gaming-theory)\n- [Graphs](#graphs)\n- [Greedy Algorithms](#greedy-algorithms)\n- [Math](#math)\n- [Networking](#networking)\n- [Numerical Analysis](#numerical-analysis)\n- [Operating system](#operating-system)\n- [Randomized Algorithms](#randomized-algorithms)\n- [Searches](#searches)\n- [Selections Algorithms](#selections-algorithms)\n- [Sorting](#sorting)\n- [Strings](#strings)\n- [Online Challenges](#online-challenges)\n- [Others](#others)\n\n## [Artificial Intelligence](artificial-intelligence)\n\n- [Density-based spatial clustering of applications with noise (DBSCAN Clustering)](https://allalgorithms.com/docs/dbscan)\n- [Interactive Self-Organizing Data Analysis Technique yAy! (ISODATA Clustering)](https://allalgorithms.com/docs/isodata)\n- [Linear Regression](https://allalgorithms.com/docs/linear-regression)\n- [Logistic Regression](https://allalgorithms.com/docs/logistic-regression)\n- [Neutral Style Transfer](https://allalgorithms.com/docs/neutral-style-transfer)\n- [SATisfiable (SAT)](https://allalgorithms.com/docs/sat)\n- [Travelling salesman problem (TSP)](https://allalgorithms.com/docs/tsp)\n- [A* (A Star)](https://allalgorithms.com/docs/a-star)\n- [Artificial Neutral Network](https://allalgorithms.com/docs/artificial-neutral-network)\n- [Convolutional Neutral Network](https://allalgorithms.com/docs/convolutional-neutral-network)\n- [Decision Tree](https://allalgorithms.com/docs/decision-tree)\n- [Factorization Machines](https://allalgorithms.com/docs/factorization-machines)\n- [Gaussian Mixture Model](https://allalgorithms.com/docs/gaussian-mixtrue-model)\n- [Gradient Boosting Trees](https://allalgorithms.com/docs/gradient-boostring-trees)\n- [Hierachical Clustering](https://allalgorithms.com/docs/hierachical-clustering)\n- [Image Processing](https://allalgorithms.com/docs/image-processing)\n- [K Nearest Neighbors](https://allalgorithms.com/docs/k-nearest-neighbors)\n- [K Means](https://allalgorithms.com/docs/k-means)\n- [Minimax](https://allalgorithms.com/docs/minimax)\n- [Native Bayes](https://allalgorithms.com/docs/native-bayes)\n- [Nearest Sequence Memory](https://allalgorithms.com/docs/nearest-sequence-memory)\n- [Neutral Network](https://allalgorithms.com/docs/neutral-network)\n- [Perceptron](https://allalgorithms.com/docs/perceptron)\n- [Principal Component Analysis](https://allalgorithms.com/docs/principal-component-analysis)\n- [Q Learing](https://allalgorithms.com/docs/q-learning)\n- [Random Forests](https://allalgorithms.com/docs/random-forest)\n- [Restricted Boltzman Machine](https://allalgorithms.com/docs/restricted-boltzman-machine)\n\n## [Backtracking](backtracking)\n\n- [Algorithm X](backtracking/algorithm-x)\n- [Crossword Puzzle](backtracking/crossword-Puzzle)\n- [Knight Tour](backtracking/knight-tour)\n- [M Coloring Problem](backtracking/m-coloring-problem)\n- [N Queen](backtracking/n-queen)\n- [Number of ways in Maze](backtracking/number-of-ways-in-maze)\n- [Partitions of set](backtracking/partitions-of-set)\n- [Permutation of Strings](backtracking/permutation-of-strings)\n- [Powerset](backtracking/powerset)\n- [Rat in maze](backtracking/rat-in-maze)\n- [Subset Sum](backtracking/subset-sum)\n- [Sudoku Solve](backtracking/sudoku-solve)\n\n## [Bit Manipulation](bit-manipulation)\n\n- [Addition using bits](bit-manipulation/adding-using-bits)\n- [Bit divisor](bit-manipulation/bit-divisor)\n- [Byte swapper](bit-manipulation/byte-swapper)\n- [Convert numbers to binary](bit-manipulation/convert-numbers-to-binary)\n- [Count set bits](bit-manipulation/count-set-bits)\n- [Flip bits](bit-manipulation/flip-bits)\n- [Hamming distance](bit-manipulation/hamming-distace)\n- [Invert bit](bit-manipulation/invert-bit)\n- [Lonely integer](bit-manipulation/lonely-integer)\n- [Magic Number](bit-manipulation/magic-number)\n- [Maximum XOR Value](bit-manipulation/maximun-xor-value)\n- [Power of 2](bit-manipulation/power-of-2)\n- [Subset Generation](bit-manipulation/subset-generation)\n- [Sum binary numbers](bit-manipulation/sum-binary-numbers)\n- [Sum equals XOR](bit-manipulation/sum-equals-xor)\n- [Thrice unique number](bit-manipulation/thrice-unique-number)\n- [Twice unique number](bit-manipulation/twice-unique-number)\n- [XOR Swap](bit-manipulation/xor-swap)\n\n## [Cellular Automaton](cellular-automaton)\n\n- [Brians Brain](cellular-automaton/brians-brain)\n- [Conways Game of life](cellular-automaton/conways-game-of-life)\n- [Elementary Cellular Automata](cellular-automaton/elementary-cellular-automata)\n- [Generic Algorithm](cellular-automaton/generic-algorithm)\n- [Langtons Ant](cellular-automaton/langtons-ant)\n- [Nobili Cellular Automata](cellular-automaton/nobili-cellular-automata)\n- [Von Neoumann Cellular Automata](cellular-automaton/von-neoumann-cellular-automata)\n\n## [Computational Geometry](computational-geometry)\n\n- [2D Line intersection](computational-geometry/)\n- [2D Separating Axis test](computational-geometry/)\n- [Area of polygon](computational-geometry/)\n- [Area of triangle](computational-geometry/)\n- [Axis aligned bounding box collision](computational-geometry/)\n- [Bresenham Line](computational-geometry/)\n- [Chans Algorithm](computational-geometry/)\n- [Cohen Sutherland Lineclip](computational-geometry/)\n- [Distance between points](computational-geometry/)\n- [Graham Scan](computational-geometry/)\n- [Halfplane intersection](computational-geometry/)\n- [Jarvis March](computational-geometry/)\n- [Quickull](computational-geometry/)\n- [Sphere tetrahedron intersection](computational-geometry/)\n- [Sutherland Hodgeman clipping](computational-geometry/)\n\n## [Cryptography](cryptography)\n\n- [Affine Cipher](cryptography/)\n- [Atbash Cipher](cryptography/)\n- [Autokey Cipher](cryptography/)\n- [Baconian Cipher](cryptography/)\n- [Caesar Cipher](cryptography/)\n- [Colummnar Cipher](cryptography/)\n- [Vigenere Cipher](cryptography/)\n\n## [Data Structures](data-structures)\n\n- [Bag](data-structures/bag/)\n- [Hashes](data-structures/hashes/)\n- [Linked List](data-structures/linked-list/)\n- [List](data-structures/list/)\n- [Queue](data-structures/queue/)\n- [Stack](data-structures/stack/)\n- [Tree](data-structures/tree/)\n\n## [Divide and conquer](divide-and-conquer)\n\n- [Strassen Matrix Manipulation](divide-and-conquer/)\n- [Closest Pair of Point](divide-and-conquer/)\n- [Inversion Count](divide-and-conquer/)\n- [Karatsuba Multiplication](divide-and-conquer/)\n- [Maximum Contiguous subsequence sum](divide-and-conquer/)\n- [Merge Sort using divide and conquer](divide-and-conquer/)\n- [Quick Sort using divide and conquer](divide-and-conquer/)\n- [Tournament Method to find min max](divide-and-conquer/)\n- [Warnock Algorithm](divide-and-conquer/)\n- [X Power Y](divide-and-conquer/)\n\n## [Dynamic Programming](dynamic-programming)\n\n- [Array Median](dynamic-programming)\n- [Optima Binary Search Tree](dynamic-programming)\n- [Binomial Coefficient](dynamic-programming)\n\n## [Gaming Theory](gaming-theory)\n\n- [Nim Next Best Move Game](gaming-theory/)\n- [Nim Win Loss Game](gaming-theory/)\n- [Grundy Numbers Kayle Game](gaming-theory/)\n\n## [Graphs](graphs)\n\n- [Bipartite Check](graphs/)\n- [Adjacency Lists graphs representation](graphs/)\n- [A* (A Star)](https://allalgorithms.com/docs/a-star)\n\n## [Greedy Algorithms](greedy-algorithms)\n\n- [Activity Selection](greedy-algorithms)\n- [Dijkstra Shortest Path](greedy-algorithms)\n- [Egyptian Fraction](greedy-algorithms)\n\n## [Math](math)\n\n- [2 Sum](math/)\n- [Add Polynomials](math/)\n- [Amicable Numbers](math/)\n- [Armstrong Numbers](math/)\n- [Automorphic Numbers](math/)\n- [Average Stream Numbers](math/)\n- [Babylonian Method](math/)\n- [Binomial Coefficient](math/)\n- [Catalan Number](math/)\n- [Check is Square](math/)\n- [Convolution](math/)\n- [Coprime Numbers](math/)\n- [Count Digits](math/)\n- [Count Trailing Zeroes](math/)\n- [Decoding of String](math/)\n- [Delannoy Number](math/)\n- [Derangements](math/)\n- [DFA Division](math/)\n- [Diophantine](math/)\n- [Divided Differences](math/)\n- [Euler Totient](math/)\n- [Exponentiation Power](math/)\n- [Factorial](math/factorial)\n- [Fast Fourier transform](math/)\n- [Fast inverse (sqrt) Square Root](math/)\n\n## [Networking](networking)\n\n- [Packet Sniffer](networking/)\n- [Determine Endianess](networking/)\n- [Validate IP](networking/)\n\n## [Numerical Analysis](numerical-analysis)\n\n- [Integral](numerical-analysis/integral)\n- [Monte Carlo](numerical-analysis/monte-carlo)\n- [Runge Kutt](numerical-analysis/runge-kutt)\n\n## [Operating system](operating-system)\n\n- [Currency](operating-system/)\n- [Deadlocks](operating-system/)\n- [Memory Management](operating-system/)\n- [Scheduling](operating-system/)\n- [Shell](operating-system/)\n\n## [Randomized Algorithms](randomized-algorithms)\n\n- [Birthday Paradox](randomized-algorithms)\n- [Karger Minimum Cut Algorithm](randomized-algorithms)\n- [Kth Smallest Element Algorithm](randomized-algorithms)\n- [Random from Stream](randomized-algorithms)\n- [Random Node Linked list](randomized-algorithms)\n- [Randomized Quicksort](randomized-algorithms)\n- [Reservoir Sampling](randomized-algorithms)\n- [Shuffle an Array](randomized-algorithms)\n\n## [Searches](searches)\n\n- [Binary Search](searches)\n- [Exponential Search](searches)\n- [Fibonacci Search](searches)\n- [Fuzzy Search](searches)\n- [Interpolation Search](searches)\n- [Jump Search](searches)\n- [Linear Search](searches)\n- [Ternay Search](searches)\n- [Jump Search](searches)\n- [Fibonacci Search](searches)\n\n## [Selections Algorithms](selections-algorithms)\n\n- [Median of Medians](selections-algorithms)\n- [Quick Select](selections-algorithms)\n\n## [Sorting](sorting)\n\n- [Bead Sort](sorting/)\n- [Bogo Sort](sorting/)\n- [Bubble Sort](sorting/)\n- [Bucket Sort](sorting/)\n- [Circle Sort](sorting/)\n- [Comb Sort](sorting/)\n- [Counting Sort](sorting/)\n- [Cycle Sort](sorting/)\n- [Flash Sort](sorting/)\n- [Gnome Sort](sorting/)\n- [Heap Sort](sorting/)\n- [Insertion Sort](sorting/)\n- [Intro Sort](sorting/)\n- [Median Sort](sorting/)\n- [Merge Sort](sorting/)\n- [Pipeonhole Sort](sorting/)\n- [Quick Sort](sorting/)\n- [Radix Sort](sorting/)\n- [Selection Sort](sorting/)\n- [Shaker Sort](sorting/)\n- [Shell Sort](sorting/)\n- [Sleep Sort](sorting/)\n- [Stooge Sort](sorting/)\n- [Topological Sort](sorting/)\n- [Tree Sort](sorting/)\n\n## [Strings](strings)\n\n- [Aho Corasick Algorithm](strings)\n- [Anagram Search](strings)\n- [Arithmetic on large numbers](strings)\n- [Boyer Moore Algorithm](strings)\n- [Finite Automata](strings)\n- [Kasai Algorithm](strings)\n- [Kmp Algorithm](strings)\n- [Levenshteing Distance](strings)\n- [Lipogram Checker](strings)\n\n## [Online Challenges](online-challenges)\n\n- [Coderbyte](online-challenges/coderbyte)\n- [Code Chef](online-challenges/code-chef)\n- [Code Eval](online-challenges/code-eval)\n- [Hackerearth](online-challenges/hackerearth)\n- [Hackerrank](online-challenges/hackerrank)\n- [LeetCode](online-challenges/leetcode)\n- [Project Euler](online-challenges/project-euler)\n- [Rosalind](online-challenges/rosalind)\n- [SPOJ](online-challenges/spoj)\n- [Top Coder](online-challenges/top-coder)`\n\n## [Others](others)\n\n- [Average](others/)\n- [Biggest of n numbers](others/)\n- [Biggest Suffix](others/)\n- [Fifteen Puzzle](others/)\n- [Jaccard Similarity](others/)\n- [Jose Phus Problem](others/)\n- [Lapindrom Checker](others/)\n- [Leap Year](others/)\n- [Magic Square](others/)\n- [Majority Element](others/)\n- [Minimum subarray size with degree](others/)\n- [No operator addition](others/)\n- [Paint fill](others/)\n- [Split list](others/)\n- [Tokenizer](others/)\n- [Unique number](others/)\n\n## License\n\nThis work is released under MIT License.\n\nTo the extent possible under law, [Abraham Hernandez (@abranhe)](https://go.abranhe.com/github) has waived all copyright and related or neighboring rights to this work.\n\n<div align=\"center\">\n\t<a href=\"https://github.com/abranhe/algorithms\">\n\t\t<img src=\"https://cdn.abranhe.com/projects/algorithms/logo.svg\" width=\"50px\">\n\t</a>\n  <br>\n</div>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}