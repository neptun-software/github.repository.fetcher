{
  "metadata": {
    "timestamp": 1736709657298,
    "page": 1,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vmg/redcarpet",
      "stars": 4995,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": "*.bundle\n*.o\n*.so\n*.swp\n/ext/redcarpet/Makefile\n/tmp\nGemfile.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.1611328125,
          "content": "# Changelog\n\n## Version 3.6.0\n\n* Avoid warnings running on Ruby 3.2+.\n\n  Refs #721.\n\n  *Jean Boussier*\n\n* Match fence char and length when matching closing fence in fenced code blocks.\n\n  Fixes #208.\n\n  *Martin Cizek, Orchitech*\n\n* Consider `<center>` as a block-level element.\n\n  Refs #702.\n\n  *momijizukamori*\n\n* Properly provide a third argument to the `table_cell` callback indicating\n  whether the current cell is part of the header or not.\n\n  The previous implementation with two parameters is still supported.\n\n  Fixes #604, Refs #605.\n\n  *Mark Lambley*\n\n* Fix anchor generation on titles with ampersands.\n\n  Fixes #696.\n\n## Version 3.5.1 (Security)\n\n* Fix a security vulnerability using `:quote` in combination with the\n  `:escape_html` option.\n\n  Reported by *Johan Smits*.\n\n\n## Version 3.5.0\n\n* Avoid mutating the options hash passed to a render object.\n\n  Refs #663.\n\n  *Max Schwenk*\n\n* Fix a segfault rendering quotes using `StripDown` and the `:quote`\n  option.\n\n  Fixes #639.\n\n* Fix `warning: instance variable @options not initialized` when\n  running under verbose mode (`-w`, `$VERBOSE = true`).\n\n* Fix SmartyPants single quotes right after a link. For example:\n\n  ~~~markdown\n  [John](http://john.doe)'s cat\n  ~~~\n\n  Will now properly converts `'` to a right single quote (i.e. `’`).\n\n  Fixes #624.\n\n* Remove the `rel` and `rev` attributes from the output generated\n  for footnotes as they don't pass the HTML 5 validation.\n\n  Fixes #536.\n\n* Automatically enable the `fenced_code_blocks` option passing a\n  `HTML_TOC` object to the `Markdown` object's constructor since\n  some languages rely on the sharp to comment code.\n\n  Fixes #451.\n\n* Allow passing `Range` objects to the `nesting_level` option to have\n  a higher level of customization for table of contents:\n\n  ~~~ruby\n  Redcarpet::Render::HTML_TOC.new(nesting_level: 2..5)\n  ~~~\n\n  Fixes #519.\n\n## Version 3.4.0\n\n* Rely on djb2 hashing generating anchors with non-ASCII chars.\n\n  Fix issue [#538](https://github.com/vmg/redcarpet/issues/538).\n\n  *Alexey Kopytko*, *namusyaka*\n\n* Added suppport for HTML 5 `details` and `summary` tags.\n\n  Fix issue [#578](https://github.com/vmg/redcarpet/issues/578).\n\n  *James Edwards-Jones*\n\n* Multiple single quote pairs are parsed correctly with SmartyPants.\n\n  Fix issue [#549](https://github.com/vmg/redcarpet/issues/549).\n\n  *Jan Jędrychowski*\n\n* Table headers don't require a minimum of three dashes anymore; a\n  single one can be used for each row.\n\n* Remove escaped entities from `HTML` render table of contents'\n  ids to be consistent with the `HTML_TOC` render.\n\n  Fix issue [#529](https://github.com/vmg/redcarpet/issues/529).\n\n* Remove periods at the end of URLs when autolinking to make sure\n  that links at the end of a sentence get properly generated.\n\n  Fix issue [#465](https://github.com/vmg/redcarpet/issues/465).\n\n* Expose the Markdown and rendering options through a `Hash` inside\n  the `@options` instance variable for custom render objects.\n\n* Avoid escaping ampersands in href links.\n\n  *Nolan Evans*\n\n## Version 3.3.4\n\n* Fix `bufprintf` to correctly work on Windows MinGW-w64 so strings\n  are properly written to the buffer.\n\n  *Kenichi Saita*\n\n* Fix the header anchor normalization by skipping non-ASCII chars\n  and not calling tolower because this leads to invalid UTF-8 byte\n  sequences in the HTML output. (tolower is not locale-aware)\n\n  *Clemens Gruber*\n\n## Version 3.3.3\n\n* Fix a memory leak instantiating a `Redcarpet::Render::Base` object.\n\n  *Oleg Dashevskii*\n\n* Fix the `StripDown` renderer to handle the `:highlight` option.\n\n  *Itay Grudev*\n\n* The `StripDown` renderer handles tables if the `tables` extension is\n  enabled.\n\n  *amnesia7*\n\n* Fix Smarty Pants to avoid fraction conversions when there are several\n  numbers separated with slashes (e.g. for a date).\n\n  *Sam Saffron*\n\n## Version 3.3.2\n\n* Fix a potential security issue in the HTML renderer\n  (Thanks to Giancarlo Canales Barreto for the heads up)\n\n## Version 3.3.1\n\n* Include the `Redcarpet::CLI`'s file in the gemspec to make it\n  available when downloading.\n\n## Version 3.3.0\n\n* Fix the stripping of surrounding characters that should be removed\n  during anchor generation.\n\n* Provide a `Redcarpet::CLI` class to create custom binary files.\n\n  Relying on Ruby's OptionParser, it's now straightforward to add new\n  options, rely on custom render objects or handle differently the\n  rendering of the provided files.\n\n* Undeprecate the compatibility layer for the old RedCloth API.\n\n  This layer actually ease the support of libraries supporting different\n  Markdown processors.\n\n* Strip out `style` tags at the HTML-block rendering level when the\n  `:no_styles` options is enabled ; previously they were only removed\n  inside paragraphs.\n\n* Avoid parsing images when the given URL isn't safe and the\n  `:safe_links_only` option is enabled.\n\n  *Alex Serban*\n\n* Avoid parsing references inside fenced code blocks so they are\n  now kept in the code snippet.\n\n  *David Waller*\n\n* Avoid escaping table-of-contents' headers by default. A new\n  `:escape_html` option is now available for the `HTML_TOC` object\n  if there are security concerns.\n\n* Add the `lang-` prefix in front of the language's name when using\n  `:prettify` along with `:fenced_code_blocks`.\n\n* Non-alphanumeric chars are now stripped out from generated anchors\n  (along the lines of Active Support's `#parameterize` method).\n\n## Version 3.2.3\n\n* Avoid rewinding content of a previous inline when autolinking is\n  enabled.\n\n  *Daniel LeCheminant*\n\n* Fix escaping of forward slashes with the `Safe` render object (add a\n  missing semi-colon).\n\n## Version 3.2.2\n\n* Consider `script` as a block-level element so it doesn't get included\n  inside a paragraph.\n\n## Version 3.2.1\n\n* Load `RedcarpetCompat` when requiring Redcarpet for the sake of\n  backward compatibility.\n\n  *Loren Segal*\n\n## Version 3.2.0\n\n* Add a `Safe` renderer to deal with users' input. The `escape_html`\n  and `safe_links_only` options are turned on by default.\n\n  Moreover, the `block_code` callback removes the tag's class since\n  the user can basically set anything with the vanilla one.\n\n  *Robin Dupret*\n\n* HTML5 block-level tags are now recognized\n\n  *silverhammermba*\n\n* The `StripDown` render object now displays the URL of links\n  along with the text.\n\n  *Robin Dupret*\n\n* The RedCloth API compatibility layer is now deprecated.\n\n  *Robin Dupret*\n\n* A hyphen and an equal should not be converted to heading.\n\n  *namusyaka*\n\n* Fix emphasis character escape sequence detection while mid-emphasis.\n\n  *jcheatham*\n\n* Add `=` to the whitelist of escaped chars so it can be used inside\n  highlighted snippets.\n\n  *jcheatham*\n\n* Convert trailing single quotes to curly quotes. For example,\n  `Road Trippin'` now converts to `Road Trippin’`.\n\n  *Kevin Chen*\n\n* Allow in-page links (e.g. `[headline](#headline)`) when `:safe_links_only` is set.\n\n  *jomo*\n\n* Enable emphasis inside of sentences in multi-byte languages when\n  `:no_intra_emphasis` is set.\n\n  *Chun-wei Kuo*\n\n* Avoid making `:no_intra_emphasis` only match spaces. This allows\n  using emphasizes inside quotes when the option is enabled for\n  instance.\n\n  *Jason Webb* and *BJ Homer*\n\n* The StripDown renderer handles image tags now.\n\n## Version 3.1.2\n\n* Remove the yielding of anchors in the `header` callback. This was\n  a breaking change between 3.0 and 3.1 as the method's arity changed.\n\n## Version 3.1.1\n\n* Fix a segfault when parsing text with headers.\n\n## Version 3.1.0\n\n* Yield the anchor of the headers\n\n  Using the `header` callback, it's now possible to get access to the\n  humanized generated id to easily keep tracking of the tree of headers\n  or simply handle the duplicate values easily.\n\n  Since the `HTML_TOC` and `HTML` objects both have this callback, it's\n  advisable to define a module and mix it in these objects to avoid\n  code duplication.\n\n  *Robin Dupret*\n\n* Allow using tabs between a reference's colon and its link\n\n  Fix issue [#337](https://github.com/vmg/redcarpet/issues/337)\n\n  *Juan Guerrero*\n\n* Make ordered lists preceded by paragraph parsed with `:lax_spacing`\n\n  Previously, enabling the `:lax_spacing` option, if a paragraph was\n  followed by an ordered list it was unparsed and was part of the\n  paragraph but this is no more the case.\n\n  *Robin Dupret*\n\n* Feed the gemspec into ExtensionTask so that we can pre-compile.\n  ie. `rake native gem`\n\n  *Todd Edwards*\n\n* Revert lax indent of less than 4 characters after list items\n\n  Follow the standard to detect when new paragraph is outside last item.\n  Fixes [issue #111](https://github.com/vmg/redcarpet/issues/111).\n\n  *Eric Bréchemier*\n\n* Fix code blocks' classes when using Google code prettify\n\n  When using the the `:prettify` option and specifying the\n  language name, the generated code block's class had a missing\n  space.\n\n  *Simonini*\n\n* Add `-v`/`--version` and `-h` flags to commandline redcarpet\n\n  *Lukas Stabe*\n\n* Add optional quote support through the `:quote` option. Render\n  quotations marks to `q` HTML tag.\n\n  This is a `\"quote\"`.\n\n  *Anatol Broder*\n\n* Ensure inline markup in titles is correctly stripped when generating\n  headers' anchor.\n\n  *Robin Dupret*\n\n* Revert the unescaping behavior on comments\n\n  This behavior doesn't follow the conformance suite.\n\n  *Robin Dupret*\n\n* Add optional footnotes support\n\n  Add PHP-Markdown style footnotes through the `:footnotes` option.\n\n  *Ben Dolman, Adam Florin, microjo, brief*\n\n* Enable GitHub style anchors for headers\n\n  Passing the `with_toc_data` option to a `HTML` render object now\n  generates GitHub style anchors.\n\n  *Matt Rogers*\n\n* Allow to set a maximum rendering level for HTML_TOC\n\n  Allow the user to pass a `nesting_level` option when instantiating a\n  new HTML_TOC render object in order to limit the nesting level in the\n  generated table of content. For example:\n\n  ~~~ruby\n  Redcarpet::Markdown.new(Redcarpet::Render::HTML_TOC.new(nesting_level: 2))\n  ~~~\n\n  *Robin Dupret*\n\n## Version 3.0.0\n\n* Remove support for Ruby 1.8.x *Matt Rogers & Robin Dupret*\n\n* Avoid escaping for HTML comments *Robin Dupret*\n\n* Make emphasis wrapped inside parenthesis parsed *Robin Dupret*\n\n* Remove the Sundown submodule *Robin Dupret*\n\n* Fix FTP uris identified as emails *Robin Dupret*\n\n* Add optional highlight support *Sam Soffes*\n\n  This is `==highlighted==`.\n\n* Ensure nested parenthesis are handled into links *Robin Dupret*\n\n* Ensure nested code spans put in emphasis work correctly *Robin Dupret*\n\n## Version 2.3.0\n\n* Add a `:disable_indented_code_blocks` option *Dmitriy Kiriyenko*\n\n* Fix issue [#57](https://github.com/vmg/redcarpet/issues/57) *Mike Morearty*\n\n* Ensure new lines characters are inserted when using the StripDown\nrender. *Robin Dupret*\n\n* Mark all symbols as hidden except the main entry point *Tom Hughes*\n\n  This avoids conflicts with other gems that may have some of the\n  same symbols, such as escape_utils which also uses houdini.\n\n* Remove unnecessary function pointer *Sam Soffes*\n\n* Add optional underline support *Sam Soffes*\n\n  This is `*italic*` and this is `_underline_` when enabled.\n\n* Test that links with quotes work *Michael Grosser*\n\n* Adding a prettyprint class for google-code-prettify *Joel Rosenberg*\n\n* Remove unused C macros *Matt Rogers*\n\n* Remove 'extern' definition for Init_redcarpet_rndr() *Matt Rogers*\n\n* Remove Gemfile.lock from the gemspec *Matt Rogers*\n\n* Removed extra unused test statement. *Slipp D. Thompson*\n\n* Use test-unit gem to get some red/green output when running tests\n*Michael Grosser*\n\n* Remove a deprecation warning and update Gemfile.lock *Robin Dupret*\n\n* Added contributing file *Brent Beer*\n\n* For tests for libxml2 > 2.8 *strzibny*\n\n* SmartyPants: Preserve single `backticks` in HTML *Mike Morearty*\n\n  When SmartyPants is processing HTML, single `backticks` should  be left\n  intact. Previously they were being deleted.\n\n* Removed and ignored Gemfile.lock *Ryan McGeary*\n\n* Added support for org-table syntax *Ryan McGeary*\n\n  Adds support for using a plus (+) as an intersection character instead of\n  requiring pipes (|). The emacs org-mode table syntax automatically manages\n  ascii tables, but uses pluses for line intersections.\n\n* Ignore /tmp directory *Ryan McGeary*\n\n* Add redcarpet_ prefix for `stack_*` functions *Kenta Murata*\n\n* Mark any html_attributes has held by a renderer as used *Tom Hughes*\n\n* Add Rubinius to the list of tested implementations *Gibheer*\n\n* Add a changelog file\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.3662109375,
          "content": "## Submitting a Pull Request\n\n1. [Fork the repository.][fork]\n2. [Create a topic branch.][branch]\n3. Check which version of Ruby is installed on your machine with `ruby -v`.\n   The list of supported Ruby versions is listed in [.travis.yml][travis_yml].\n   Set up one of these versions; use of [RVM][rvm] is recommended to switch\n   easily between different versions.\n4. [Install bundler.][bundler]\n5. Make sure to have the `tidy` command on your system:\n\n   * `apt-get install tidy`\n   * `yum install tidy`\n   * `pacman -S tidyhtml`\n\n6. Check that unit tests pass with `rake test`.\n7. Write a failing test to capture existing bug or lack of feature.\n8. Run `rake test` to verify that test fails.\n9. Implement your feature or bug fix.\n10. Ensure tests pass.\n11. If it's a new feature or a bug fix, please add an entry to the changelog file.\n12. Add, commit, and push your changes.\n13. [Submit a pull request.][pr]\n14. You will get some feedback and may need to push additional commits\n    with more fixes to the same branch; this will update your pull request\n    automatically.\n\n[branch]: http://git-scm.com/book/en/Git-Branching-Branching-Workflows#Topic-Branches\n[bundler]: http://bundler.io\n[fork]: https://help.github.com/articles/fork-a-repo\n[pr]: https://help.github.com/articles/using-pull-requests\n[rvm]: https://rvm.io\n[travis_yml]: https://github.com/vmg/redcarpet/blob/master/.travis.yml\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.06640625,
          "content": "Copyright (c) 2009, Natacha Porté\nCopyright (c) 2015, Vicent Marti\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.1552734375,
          "content": "source \"https://rubygems.org/\"\n\ngemspec\n\ngroup :benchmark do\n  gem \"benchmark-ips\", \"~> 2.7.2\"\n  gem \"bluecloth\", \"~> 2.2.0\"\n  gem \"kramdown\", \"~> 1.13.2\"\nend\n"
        },
        {
          "name": "README.markdown",
          "type": "blob",
          "size": 13.9814453125,
          "content": "Redcarpet is written with sugar, spice and everything nice\n============================================================\n\n[![Build status](https://github.com/vmg/redcarpet/actions/workflows/test.yml/badge.svg)](https://github.com/vmg/redcarpet/actions/workflows/test.yml)\n[![Help Contribute to Open Source](https://www.codetriage.com/vmg/redcarpet/badges/users.svg)](https://www.codetriage.com/vmg/redcarpet)\n[![Gem Version](https://badge.fury.io/rb/redcarpet.svg)](https://badge.fury.io/rb/redcarpet)\n\nRedcarpet is a Ruby library for Markdown processing that smells like\nbutterflies and popcorn.\n\nThis library is written by people\n---------------------------------\n\nRedcarpet was written by [Vicent Martí](https://github.com/vmg). It is maintained by\n[Robin Dupret](https://github.com/robin850) and [Matt Rogers](https://github.com/mattr-).\n\nRedcarpet would not be possible without the [Sundown](https://www.github.com/vmg/sundown)\nlibrary and its authors (Natacha Porté, Vicent Martí, and its many awesome contributors).\n\nYou can totally install it as a Gem\n-----------------------------------\n\nRedcarpet is readily available as a Ruby gem. It will build some native\nextensions, but the parser is standalone and requires no installed libraries.\nStarting with Redcarpet 3.0, the minimum required Ruby version is 1.9.2 (or Rubinius in 1.9 mode).\n\n    $ [sudo] gem install redcarpet\n\nIf you need to use it with Ruby 1.8.7, you will have to stick with 2.3.0:\n\n    $ [sudo] gem install redcarpet -v 2.3.0\n\nThe Redcarpet source is available at GitHub:\n\n    $ git clone git://github.com/vmg/redcarpet.git\n\n\nAnd it's like *really* simple to use\n------------------------------------\n\nThe core of the Redcarpet library is the `Redcarpet::Markdown` class. Each\ninstance of the class is attached to a `Renderer` object; the Markdown class\nperforms parsing of a document and uses the attached renderer to generate\noutput.\n\nThe `Redcarpet::Markdown` object is encouraged to be instantiated once with the\nrequired settings, and reused between parses.\n\n~~~~ ruby\n# Initializes a Markdown parser\nmarkdown = Redcarpet::Markdown.new(renderer, extensions = {})\n~~~~\n\nHere, the `renderer` variable refers to a renderer object, inheriting\nfrom `Redcarpet::Render::Base`. If the given object has not been\ninstantiated, the library will do it with default arguments.\n\nRendering with the `Markdown` object is done through `Markdown#render`.\nUnlike in the RedCloth API, the text to render is passed as an argument\nand not stored inside the `Markdown` instance, to encourage reusability.\nExample:\n\n~~~~ ruby\nmarkdown.render(\"This is *bongos*, indeed.\")\n# => \"<p>This is <em>bongos</em>, indeed.</p>\"\n~~~~\n\nYou can also specify a hash containing the Markdown extensions which the\nparser will identify. The following extensions are accepted:\n\n* `:no_intra_emphasis`: do not parse emphasis inside of words.\nStrings such as `foo_bar_baz` will not generate `<em>` tags.\n\n* `:tables`: parse tables, PHP-Markdown style.\n\n* `:fenced_code_blocks`: parse fenced code blocks, PHP-Markdown\nstyle. Blocks delimited with 3 or more `~` or backticks will be considered\nas code, without the need to be indented. An optional language name may\nbe added at the end of the opening fence for the code block.\n\n* `:autolink`: parse links even when they are not enclosed in `<>`\ncharacters. Autolinks for the http, https and ftp protocols will be\nautomatically detected. Email addresses and http links without protocol,\nbut starting with `www` are also handled.\n\n* `:disable_indented_code_blocks`: do not parse usual markdown\ncode blocks. Markdown converts text with four spaces at\nthe front of each line to code blocks. This option\nprevents it from doing so. Recommended to use\nwith `fenced_code_blocks: true`.\n\n* `:strikethrough`: parse strikethrough, PHP-Markdown style.\nTwo `~` characters mark the start of a strikethrough,\ne.g. `this is ~~good~~ bad`.\n\n* `:lax_spacing`: HTML blocks do not require to be surrounded by an\nempty line as in the Markdown standard.\n\n* `:space_after_headers`: A space is always required between the hash\nat the beginning of a header and its name, e.g. `#this is my header`\nwould not be a valid header.\n\n* `:superscript`: parse superscripts after the `^` character; contiguous superscripts\nare nested together, and complex values can be enclosed in parenthesis, e.g.\n`this is the 2^(nd) time`.\n\n* `:underline`: parse underscored emphasis as underlines.\n`This is _underlined_ but this is still *italic*`.\n\n* `:highlight`: parse highlights.\n`This is ==highlighted==`. It looks like this: `<mark>highlighted</mark>`\n\n* `:quote`: parse quotes.\n`This is a \"quote\"`. It looks like this: `<q>quote</q>`\n\n* `:footnotes`: parse footnotes, PHP-Markdown style. A footnote works very much\nlike a reference-style link: it consists of a  marker next to the text (e.g.\n`This is a sentence.[^1]`) and a footnote definition on its own line anywhere\nwithin the document (e.g. `[^1]: This is a footnote.`).\n\nExample:\n\n~~~~ ruby\nmarkdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML, autolink: true, tables: true)\n~~~~\n\nDarling, I packed you a couple renderers for lunch\n--------------------------------------------------\n\nRedcarpet comes with two built-in renderers, `Redcarpet::Render::HTML` and\n`Redcarpet::Render::XHTML`, which output HTML and XHTML, respectively. These\nrenderers are actually implemented in C and hence offer brilliant\nperformance — several degrees of magnitude faster than other Ruby Markdown\nsolutions.\n\nAll the rendering flags that previously applied only to HTML output have\nnow been moved to the `Redcarpet::Render::HTML` class, and may be enabled when\ninstantiating the renderer:\n\n~~~~ ruby\nRedcarpet::Render::HTML.new(render_options = {})\n~~~~\n\nInitializes an HTML renderer. The following flags are available:\n\n* `:filter_html`: do not allow any user-inputted HTML in the output.\n\n* `:no_images`: do not generate any `<img>` tags.\n\n* `:no_links`: do not generate any `<a>` tags.\n\n* `:no_styles`: do not generate any `<style>` tags.\n\n* `:escape_html`: escape any HTML tags. This option has precedence over\n`:no_styles`, `:no_links`, `:no_images` and `:filter_html` which means\nthat any existing tag will be escaped instead of being removed.\n\n* `:safe_links_only`: only generate links for protocols which are considered\nsafe.\n\n* `:with_toc_data`: add HTML anchors to each header in the output HTML,\nto allow linking to each section.\n\n* `:hard_wrap`: insert HTML `<br>` tags inside paragraphs where the original\nMarkdown document had newlines (by default, Markdown ignores these newlines).\n\n* `:xhtml`: output XHTML-conformant tags. This option is always enabled in the\n`Render::XHTML` renderer.\n\n* `:prettify`: add prettyprint classes to `<code>` tags for google-code-prettify.\n\n* `:link_attributes`: hash of extra attributes to add to links.\n\nExample:\n\n~~~~ ruby\nrenderer = Redcarpet::Render::HTML.new(no_links: true, hard_wrap: true)\n~~~~\n\n\nThe `HTML` renderer has an alternate version, `Redcarpet::Render::HTML_TOC`,\nwhich will output a table of contents in HTML based on the headers of the\nMarkdown document.\n\nWhen instantiating this render object, you can optionally pass a `nesting_level`\noption which takes an integer or a range and allows you to make it render only\nheaders at certain levels.\n\nRedcarpet also includes a plaintext renderer, `Redcarpet::Render::StripDown`, that\nstrips out all the formatting:\n\n~~~~ ruby\nrequire 'redcarpet'\nrequire 'redcarpet/render_strip'\n\nmarkdown = Redcarpet::Markdown.new(Redcarpet::Render::StripDown)\n\nmarkdown.render(\"**This** _is_ an [example](http://example.org/).\")\n# => \"This is an example (http://example.org/).\"\n~~~~\n\n\nAnd you can even cook your own\n------------------------------\n\nCustom renderers are created by inheriting from an existing renderer. The\nbuilt-in renderers, `HTML` and `XHTML` may be extended as such:\n\n~~~~ ruby\n# Create a custom renderer that sets a custom class for block-quotes.\nclass CustomRender < Redcarpet::Render::HTML\n  def block_quote(quote)\n    %(<blockquote class=\"my-custom-class\">#{quote}</blockquote>)\n  end\nend\n\nmarkdown = Redcarpet::Markdown.new(CustomRender, fenced_code_blocks: true)\n~~~~\n\nBut new renderers can also be created from scratch by extending the abstract\nbase class `Redcarpet::Render::Base` (see `lib/redcarpet/render_man.rb` for\nan example implementation of a Manpage renderer):\n\n~~~~ ruby\nclass ManPage < Redcarpet::Render::Base\n  # you get the drill -- keep going from here\nend\n~~~~\n\nThe following instance methods may be implemented by the renderer:\n\n### Block-level calls\n\nIf the return value of the method is `nil`, the block will be skipped.\nTherefore, make sure that your renderer has at least a `paragraph` method\nimplemented. If the method for a document element is not implemented, the\nblock will be skipped.\n\nExample:\n\n~~~~ ruby\nclass RenderWithoutCode < Redcarpet::Render::HTML\n  def block_code(code, language)\n    nil\n  end\nend\n~~~~\n\n* block_code(code, language)\n* block_quote(quote)\n* block_html(raw_html)\n* footnotes(content)\n* footnote_def(content, number)\n* header(text, header_level)\n* hrule()\n* list(contents, list_type)\n* list_item(text, list_type)\n* paragraph(text)\n* table(header, body)\n* table_row(content)\n* table_cell(content, alignment, header)\n\n### Span-level calls\n\nA return value of `nil` will not output any data. If the method for\na document element is not implemented, the contents of the span will\nbe copied verbatim:\n\n* autolink(link, link_type)\n* codespan(code)\n* double_emphasis(text)\n* emphasis(text)\n* image(link, title, alt_text)\n* linebreak()\n* link(link, title, content)\n* raw_html(raw_html)\n* triple_emphasis(text)\n* strikethrough(text)\n* superscript(text)\n* underline(text)\n* highlight(text)\n* quote(text)\n* footnote_ref(number)\n\n**Note**: When overriding a renderer's method, be sure to return a HTML\nelement with a level that matches the level of that method (e.g. return a\nblock element when overriding a block-level callback). Otherwise, the output\nmay be unexpected.\n\n### Low level rendering\n\n* entity(text)\n* normal_text(text)\n\n### Header of the document\n\nRendered before any another elements:\n\n* doc_header()\n\n### Footer of the document\n\nRendered after all the other elements:\n\n* doc_footer()\n\n### Pre/post-process\n\nSpecial callback: preprocess or postprocess the whole document before\nor after the rendering process begins:\n\n* preprocess(full_document)\n* postprocess(full_document)\n\nYou can look at\n[\"How to extend the Redcarpet 2 Markdown library?\"](https://web.archive.org/web/20170505231254/http://dev.af83.com/2012/02/27/howto-extend-the-redcarpet2-markdown-lib.html)\nfor some more explanations.\n\nAlso, now our Pants are much smarter\n------------------------------------\n\nRedcarpet 2 comes with a standalone [SmartyPants](\nhttp://daringfireball.net/projects/smartypants/) implementation. It is fully\ncompliant with the original implementation. It is the fastest SmartyPants\nparser there is, with a difference of several orders of magnitude.\n\nThe SmartyPants parser can be found in `Redcarpet::Render::SmartyPants`. It has\nbeen implemented as a module, so it can be used standalone or as a mixin.\n\nWhen mixed with a Renderer class, it will override the `postprocess` method\nto perform SmartyPants replacements once the rendering is complete.\n\n~~~~ ruby\n# Mixin\nclass HTMLWithPants < Redcarpet::Render::HTML\n  include Redcarpet::Render::SmartyPants\nend\n\n# Standalone\nRedcarpet::Render::SmartyPants.render(\"<p>Oh SmartyPants, you're so crazy...</p>\")\n~~~~\n\nSmartyPants works on top of already-rendered HTML, and will ignore replacements\ninside the content of HTML tags and inside specific HTML blocks (`pre`, `code`,\n`var`, `samp`, `kbd`, `math`, `script`, `style`).\n\nWhat? You really want to mix Markdown renderers?\n------------------------------------------------\n\nRedcarpet used to be a drop-in replacement for Redcloth. This is no longer the\ncase since version 2 -- it now has its own API, but retains the old name. Yes,\nthat does mean that Redcarpet is not backwards-compatible with the 1.X\nversions.\n\nEach renderer has its own API and its own set of extensions: you should choose one\n(it doesn't have to be Redcarpet, though that would be great!), write your\nsoftware accordingly, and force your users to install it. That's the\nonly way to have reliable and predictable Markdown output on your program.\n\nMarkdown is already ill-specified enough; if you create software that is\nrenderer-independent, the results will be completely unreliable!\n\nStill, if major forces (let's say, tornadoes or other natural disasters) force you\nto keep a Markdown-compatibility layer, Redcarpet also supports this:\n\n~~~~ ruby\nrequire 'redcarpet/compat'\n~~~~\n\nRequiring the compatibility library will declare a `Markdown` class with the\nclassical RedCloth API, e.g.\n\n~~~~ ruby\nMarkdown.new('this is my text').to_html\n~~~~\n\nThis class renders 100% standards compliant Markdown with 0 extensions. Nada.\nDon't even try to enable extensions with a compatibility layer, because\nthat's a maintenance nightmare and won't work.\n\nOn a related topic: if your Markdown gem has a `lib/markdown.rb` file that\nmonkeypatches the Markdown class, you're a terrible human being. Just saying.\n\nBoring legal stuff\n------------------\n\nCopyright (c) 2011-2016, Vicent Martí\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 1.3310546875,
          "content": "require 'date'\nrequire 'rake/clean'\nrequire 'rake/extensiontask'\nrequire 'digest/md5'\n\ntask :default => [:test]\n\n# Gem Spec\ngem_spec = Gem::Specification.load('redcarpet.gemspec')\n\n# Ruby Extension\nRake::ExtensionTask.new('redcarpet', gem_spec)\n\n# Packaging\nrequire 'bundler/gem_tasks'\n\n# Testing\nrequire 'rake/testtask'\n\nRake::TestTask.new('test:unit') do |t|\n  t.libs << 'lib'\n  t.libs << 'test'\n  t.pattern = 'test/*_test.rb'\n  t.verbose = true\n  t.warning = false\nend\n\ntask 'test:unit' => :compile\n\ndesc 'Run conformance tests (MARKDOWN_TEST_VER=1.0.3)'\ntask 'test:conformance' => :compile do |t|\n  script  = \"#{pwd}/bin/redcarpet\"\n  version = ENV['MARKDOWN_TEST_VER'] || '1.0.3'\n  lib_dir = \"#{pwd}/lib\"\n\n  chdir(\"test/MarkdownTest_#{version}\") do\n    sh \"RUBYLIB=#{lib_dir} ./MarkdownTest.pl --script='#{script}' --tidy\"\n  end\nend\n\ndesc 'Run version 1.0 conformance suite'\ntask 'test:conformance:1.0' => :compile do |t|\n  ENV['MARKDOWN_TEST_VER'] = '1.0'\n  Rake::Task['test:conformance'].invoke\nend\n\ndesc 'Run 1.0.3 conformance suite'\ntask 'test:conformance:1.0.3' => :compile do |t|\n  ENV['MARKDOWN_TEST_VER'] = '1.0.3'\n  Rake::Task['test:conformance'].invoke\nend\n\ndesc 'Run unit and conformance tests'\ntask :test => %w[test:unit test:conformance]\n\ndesc 'Run benchmarks'\ntask :benchmark => :compile do |t|\n  $:.unshift 'lib'\n  load 'test/benchmark.rb'\nend\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "redcarpet.gemspec",
          "type": "blob",
          "size": 1.6572265625,
          "content": "# encoding: utf-8\nGem::Specification.new do |s|\n  s.name = 'redcarpet'\n  s.version = '3.6.0'\n  s.summary = \"Markdown that smells nice\"\n  s.description = 'A fast, safe and extensible Markdown to (X)HTML parser'\n  s.date = '2023-01-29'\n  s.email = 'vicent@github.com'\n  s.homepage = 'https://github.com/vmg/redcarpet'\n  s.authors = [\"Natacha Porté\", \"Vicent Martí\"]\n  s.license = 'MIT'\n  s.required_ruby_version = '>= 1.9.2'\n  # = MANIFEST =\n  s.files = %w[\n    CHANGELOG.md\n    CONTRIBUTING.md\n    COPYING\n    Gemfile\n    README.markdown\n    Rakefile\n    bin/redcarpet\n    ext/redcarpet/autolink.c\n    ext/redcarpet/autolink.h\n    ext/redcarpet/buffer.c\n    ext/redcarpet/buffer.h\n    ext/redcarpet/extconf.rb\n    ext/redcarpet/houdini.h\n    ext/redcarpet/houdini_href_e.c\n    ext/redcarpet/houdini_html_e.c\n    ext/redcarpet/html.c\n    ext/redcarpet/html.h\n    ext/redcarpet/html_block_names.txt\n    ext/redcarpet/html_blocks.h\n    ext/redcarpet/html_smartypants.c\n    ext/redcarpet/markdown.c\n    ext/redcarpet/markdown.h\n    ext/redcarpet/rc_markdown.c\n    ext/redcarpet/rc_render.c\n    ext/redcarpet/redcarpet.h\n    ext/redcarpet/stack.c\n    ext/redcarpet/stack.h\n    lib/redcarpet.rb\n    lib/redcarpet/cli.rb\n    lib/redcarpet/compat.rb\n    lib/redcarpet/render_man.rb\n    lib/redcarpet/render_strip.rb\n    redcarpet.gemspec\n  ]\n  # = MANIFEST =\n  s.test_files = s.files.grep(%r{^test/})\n  s.extra_rdoc_files = [\"COPYING\"]\n  s.extensions = [\"ext/redcarpet/extconf.rb\"]\n  s.executables = [\"redcarpet\"]\n  s.require_paths = [\"lib\"]\n\n  s.add_development_dependency \"rake\", \"~> 13\"\n  s.add_development_dependency \"rake-compiler\", \"~> 1.1\"\n  s.add_development_dependency \"test-unit\", \"~> 3.5\"\nend\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}