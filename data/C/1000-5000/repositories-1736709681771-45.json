{
  "metadata": {
    "timestamp": 1736709681771,
    "page": 45,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aws/s2n-tls",
      "stars": 4553,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 4.0283203125,
          "content": "---\nLanguage:        Cpp\nBasedOnStyle:  Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: DontAlign\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignConsecutiveMacros: true\nAlignEscapedNewlines: Left\nAlignOperands:   false\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: false\nAllowAllConstructorInitializersOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeBraces: Custom  #This unlocks BraceWrapping settings\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     0\nCommentPragmas:  '^ clang-format pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 8\nCpp11BracedListStyle: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nTypenameMacros: ['S2N_RESULT', 'S2N_CLEANUP_RESULT', 'STACK_OF']\nAttributeMacros: ['S2N_RESULT_MUST_USE', 'S2N_API', 'S2N_PRIVATE_API']\nStatementAttributeLikeMacros:\n  - FAIL_MSG\nIncludeBlocks:   Regroup\nIncludeCategories:\n  - Regex:           '^<ext/.*\\.h>'\n    Priority:        2\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIndentCaseLabels: true\nIndentPPDirectives: BeforeHash\nIndentWidth:     4\nIndentWrappedFunctionNames: true\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Never\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Right\nRawStringFormats:\n  - Language:        Cpp\n    Delimiters:\n      - cc\n      - CC\n      - cpp\n      - Cpp\n      - CPP\n      - 'c++'\n      - 'C++'\n    CanonicalDelimiter: ''\n    BasedOnStyle:    google\nReflowComments:  false\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: true\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\n  - test_stack_blob_success\nTabWidth:        8\nUseTab:          Never\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 1.9560546875,
          "content": "# .git-blame-ignore-revs\n# autopep8 python PR3268\nb9dbef317197b2f450b3e963fb4744cc4dc5e087\n# add clang-format of stuffer/ (PR #3618)\n918f0791002616f81bf0a5347de83bb0815101ac\n# clang-format `tls/extensions` and enforce in ci (PR #3633)\nee3df080077242b6b765d02b21da59e4194ee485\n# clang-format `bin/` and enforce in ci (PR #3635)\n49e8ab14672a4c1b479abc442bf1e54f815a6a47\n# clang-format `error/` and enforce in ci (PR #3638)\nf47255051a6d440bd400ed35f3397085a049c000\n# clang-format `api/` and enforce in ci (PR #3637)\n15158a2c37aa04ce69c77fca67f8175ac0b3a799\n# Autopep8 updated CI and code (#3736)\n43d6f1bed249f77004d33c3b757fb9d8ab50fb5c\n# Clang-format `tests/unit/s2n_[l-r].*\\.c` and enforce in CI (#3677)\n035ec1c6c8a80f2a88f8421da9862c3848fff12a\n# Clang-format `tests/unit/s2n_s.*\\.c` and enforce in CI (#3678)\n6d8741cd0b6e3aa95c227d03633bdd04d44bbcc7\n# Clang format `tls/s2n_[a-h].*\\.[ch]` and enforce in CI (#3681)\nf2faa0e25b1d68cd36173ae44df58be3218b6ca1\n# Clang-format `crypto/` and enforce in CI (#3680)\nf5351ef6629d1f6de144ab478bf4294ec277b321\n# Clang-format `tls/s2n_[s-z].*\\.[ch]` and enforce in CI (#3683)\n0fe8ac5311c6a421c9e6257ae1cb5ac8cbc6845c\n# Clang-format `tests/unit/s2n_[t-z].*\\.c` and enforce in CI (#3679)\n0bb61469995db593e735915d770dc32e8985404a\n# Clang format `tests/unit/s2n_[bc].*\\.c` and enforce in CI (#3675)\n06e9e8c13d3c19a172b69eb57c278f68055ac8d4\n# Clang-format `tests/unit/s2n_[d-k].*\\.c` and enforce in CI (#3676)\n2f9c7a48fd8faf44d5a6f375d6d3fbf9aada8e03\n# Clang-format `tls/s2n_[i-r].*\\.[ch]` and enforce in CI (#3682)\n0e0d6079454361251e18d80af1af345881423b7a\n# Clang-format of `tests/unit/s2n_[3a].*\\.c` + transision to exclude regex (#3664)\n4dd87578a946a081fcf21dbb5912cb506ae83460\n# Update to clang-format causes reformat of api folder (#3663)\n71e0343b6e082ebf47d8f8f272bee5486140b374\n# clang-format `tests/testslib` and add to ci (#3650)\ne8cdc1ae63ff1de6f14cf91e3c317fbf57c198ec\n# clang-format `utils/` and enforce in ci (#3651)\nbe8ad6c027b50e9dc86d8f8eb729ce88f2d4206d\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.505859375,
          "content": "*.o\n*.a\n*.dylib\n*.dSYM\n*.so\n*~\n*.dSYM\n*.gcda\n*.gcno\n*.gcov\n*.info\n*.profraw\n*.tmp\n*.pyc\ncoverage/html/*\ndocs/doxygen/output/\nlibcrypto-build/*\nlibcrypto-root\nlibcrypto-root/*\ntests/unit/*_test\ntests/fuzz/*_test\ntests/fuzz/*.txt\ntests/fuzz/fuzz-*.log\nbin/s2nc\nbin/s2nd\nbin/policy\nutil-linux-*\nPython-*\nclang-*\nfuzz_dependencies/*\n.vscode/\ntest-deps/*\n.idea/*\nCMakeCache.txt\nCMakeFiles/*\n.project\n./codebuild/spec/buildspec_*_batch.yml\nbuild/\nresult\nresult-*\n*.class\n# Exclude rust build directories\n*target/\nCargo.lock\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1884765625,
          "content": "[submodule \"tests/cbmc/aws-verification-model-for-libcrypto\"]\n\tpath = tests/cbmc/aws-verification-model-for-libcrypto\n\turl = https://github.com/awslabs/aws-verification-model-for-libcrypto.git\n"
        },
        {
          "name": ".pep8",
          "type": "blob",
          "size": 0.044921875,
          "content": "[pep8]\nmax_line_length = 120\nrecursive = true\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 30.7392578125,
          "content": "cmake_minimum_required (VERSION 3.9)\nproject (s2n C)\n\nif(POLICY CMP0077)\n    cmake_policy(SET CMP0077 NEW) #option does nothing when a normal variable of the same name exists.\nendif()\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(INSTALL_LIB_DIR lib CACHE PATH \"Installation directory for libraries\")\nset(INSTALL_INCLUDE_DIR include CACHE PATH \"Installation directory for header files\")\nset(INSTALL_CMAKE_DIR lib/cmake CACHE PATH \"Installation directory for cmake files\")\n\nset(CMAKE_FIND_PACKAGE_PREFER_CONFIG TRUE)\n\n# These Version numbers are for major updates only- we won't track minor/patch updates here.\nset(VERSION_MAJOR 1)\nset(VERSION_MINOR 0)\nset(VERSION_PATCH 0)\n\noption(SEARCH_LIBCRYPTO \"Set this if you want to let S2N search libcrypto for you,\notherwise a crypto target needs to be defined.\" ON)\noption(UNSAFE_TREAT_WARNINGS_AS_ERRORS \"Compiler warnings are treated as errors. Warnings may\nindicate danger points where you should verify with the S2N-TLS developers that the security of\nthe library is not compromised. Turn this OFF to ignore warnings.\" ON)\noption(S2N_WERROR_ALL \"This option will cause all artifacts linked to libs2n to use the \n-Werror setting.\" OFF)\noption(S2N_INTERN_LIBCRYPTO \"This ensures that s2n-tls is compiled and deployed with a specific\nversion of libcrypto by interning the code and hiding symbols. This also enables s2n-tls to be\nloaded in an application with an otherwise conflicting libcrypto version.\" OFF)\noption(S2N_LTO, \"Enables link time optimizations when building s2n-tls.\" OFF)\noption(S2N_STACKTRACE \"Enables stacktrace functionality in s2n-tls. Note that this functionality is\nonly available on platforms that support execinfo.\" ON)\noption(COVERAGE \"Enable profiling collection for code coverage calculation\" OFF)\noption(BUILD_TESTING \"Build tests for s2n-tls. By default only unit tests are built.\" ON)\noption(S2N_INTEG_TESTS \"Enable the integrationv2 tests\" OFF)\noption(S2N_FAST_INTEG_TESTS \"Enable the integrationv2 with more parallelism, only has effect if S2N_INTEG_TESTS=ON\" ON)\noption(S2N_INSTALL_S2NC_S2ND \"Install the binaries s2nc and s2nd\" OFF)\noption(S2N_USE_CRYPTO_SHARED_LIBS \"For S2N to use shared libs in Findcrypto\" OFF)\noption(TSAN \"Enable ThreadSanitizer to test thread safety\" OFF)\noption(ASAN \"Enable AddressSanitizer to test memory safety\" OFF)\noption(SECCOMP \"Link with seccomp and run seccomp tests\" OFF)\n\nfile(GLOB API_HEADERS \"api/*.h\")\nfile(GLOB API_UNSTABLE_HEADERS \"api/unstable/*.h\")\n\nfile(GLOB CRYPTO_HEADERS \"crypto/*.h\")\nfile(GLOB CRYPTO_SRC \"crypto/*.c\")\n\nfile(GLOB ERROR_HEADERS \"error/*.h\")\nfile(GLOB ERROR_SRC \"error/*.c\")\n\nfile(GLOB STUFFER_HEADERS \"stuffer/*.h\")\nfile(GLOB STUFFER_SRC \"stuffer/*.c\")\n\nfile(GLOB_RECURSE TLS_HEADERS \"tls/*.h\")\nfile(GLOB_RECURSE TLS_SRC \"tls/*.c\")\n\nfile(GLOB UTILS_HEADERS \"utils/*.h\")\nfile(GLOB UTILS_SRC \"utils/*.c\")\n\nmessage(STATUS \"Detected CMAKE_SYSTEM_PROCESSOR as ${CMAKE_SYSTEM_PROCESSOR}\")\n\nif(CMAKE_SIZEOF_VOID_P EQUAL 4)\n  message(STATUS \"Detected 32-Bit system\")\nelse()\n    message(STATUS \"Detected 64-Bit system\")\nendif()\n\n##be nice to visual studio users\nif(MSVC)\n    source_group(\"Header Files\\\\s2n\\\\api\" FILES ${API_HEADERS} ${API_UNSTABLE_HEADERS})\n    source_group(\"Header Files\\\\s2n\\\\crypto\" FILES ${CRYPTO_HEADERS})\n    source_group(\"Header Files\\\\s2n\\\\error\" FILES ${ERROR_HEADERS})\n    source_group(\"Header Files\\\\s2n\\\\stuffer\" FILES ${STUFFER_HEADERS})\n    source_group(\"Header Files\\\\s2n\\\\tls\" FILES ${TLS_HEADERS})\n    source_group(\"Header Files\\\\s2n\\\\utils\" FILES ${UTILS_HEADERS})\n\n    source_group(\"Source Files\\\\crypto\" FILES ${CRYPTO_SRC})\n    source_group(\"Source Files\\\\error\" FILES ${ERROR_SRC})\n    source_group(\"Source Files\\\\stuffer\" FILES ${STUFFER_SRC})\n    source_group(\"Source Files\\\\tls\" FILES ${TLS_SRC})\n    source_group(\"Source Files\\\\utils\" FILES ${UTILS_SRC})\nelse()\n    set(THREADS_PREFER_PTHREAD_FLAG ON)\n    find_package(Threads REQUIRED)\nendif()\n\nif(APPLE)\n    set(OS_LIBS c Threads::Threads)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\")\n    set(OS_LIBS thr execinfo)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"NetBSD\")\n    set(OS_LIBS Threads::Threads)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"OpenBSD\")\n    set(OS_LIBS Threads::Threads kvm)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n    set(OS_LIBS Threads::Threads dl)\nelse()\n    set(OS_LIBS Threads::Threads dl rt)\nendif()\n\nfile(GLOB S2N_HEADERS\n    ${API_HEADERS}\n    ${API_UNSTABLE_HEADERS}\n    ${CRYPTO_HEADERS}\n    ${ERROR_HEADERS}\n    ${STUFFER_HEADERS}\n    ${TLS_HEADERS}\n    ${UTILS_HEADERS}\n)\n\nfile(GLOB S2N_SRC\n    ${CRYPTO_SRC}\n    ${ERROR_SRC}\n    ${STUFFER_SRC}\n    ${TLS_SRC}\n    ${UTILS_SRC}\n)\n\nadd_library(${PROJECT_NAME} ${S2N_HEADERS} ${S2N_SRC})\nset_target_properties(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE C)\n\n# Version numbers are for major updates only- we won't track minor/patch updates here.\nset_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})\nset_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION ${VERSION_MAJOR})\n\nset(CMAKE_C_FLAGS_DEBUGOPT \"\")\n\ntarget_compile_options(${PROJECT_NAME} PRIVATE \n    -pedantic\n    -std=gnu99\n    -Wall\n    -Wcast-align\n    -Wchar-subscripts\n    -Wcomment\n    -Wformat-security\n    -Wimplicit\n    -Wshadow\n    -Wsign-compare\n    -Wuninitialized\n    -Wunused\n    -Wwrite-strings\n    \n    # Assembler Options\n    -Wa,--noexecstack\n\n    # Suppressed Warnings\n    -Wno-deprecated-declarations\n    # GCC 4 fails to parse our macros with a \"missing-braces\" error\n    -Wno-missing-braces\n    -Wno-strict-prototypes\n    -Wno-unknown-pragmas\n)\n\nif (S2N_WERROR_ALL)\n    target_compile_options(${PROJECT_NAME} PUBLIC -Werror)\nelseif (UNSAFE_TREAT_WARNINGS_AS_ERRORS)\n    target_compile_options(${PROJECT_NAME} PRIVATE -Werror )\nendif ()\n\nif(BUILD_TESTING AND BUILD_SHARED_LIBS OR S2N_FUZZ_TEST)\n    target_compile_options(${PROJECT_NAME} PRIVATE -fvisibility=default)\nelse()\n    target_compile_options(${PROJECT_NAME} PRIVATE -fvisibility=hidden -DS2N_EXPORTS)\nendif()\n\nif(S2N_LTO)\n    target_compile_options(${PROJECT_NAME} PRIVATE -flto)\n    # if we're building a static lib, make it easier for consuming applications to also perform LTO\n    if(NOT BUILD_SHARED_LIBS)\n        target_compile_options(${PROJECT_NAME} PRIVATE -ffunction-sections -fdata-sections)\n    endif()\nendif()\n\nif(NOT APPLE)\n    set(CMAKE_SHARED_LINKER_FLAGS -Wl,-z,noexecstack,-z,relro,-z,now)\nendif()\n\n# Whether to fail the build when compiling s2n's portable C code with non-portable assembly optimizations. Doing this\n# can lead to runtime crashes if build artifacts are built on modern hardware, but deployed to older hardware without\n# newer CPU instructions. s2n, by default, should be backwards compatible with older CPU types so this flag should be\n# enabled in s2n's CI builds and tests, but other consumers of s2n may have stronger control of what CPU types they\n# deploy to, and can enable more CPU optimizations.\nif(S2N_BLOCK_NONPORTABLE_OPTIMIZATIONS)\n    target_compile_options(${PROJECT_NAME} PUBLIC -DS2N_BLOCK_NONPORTABLE_OPTIMIZATIONS=1)\nendif()\n\ntarget_compile_options(${PROJECT_NAME} PUBLIC -fPIC)\n\nset(S2N_PRELUDE \"${CMAKE_CURRENT_LIST_DIR}/utils/s2n_prelude.h\")\ntarget_compile_options(${PROJECT_NAME} PRIVATE -include \"${S2N_PRELUDE}\")\n\n# Match on Release, RelWithDebInfo and MinSizeRel\n# See: https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html#variable:CMAKE_BUILD_TYPE\nif(CMAKE_BUILD_TYPE MATCHES Rel)\n    add_definitions(-DS2N_BUILD_RELEASE)\nendif()\n\nif(NO_STACK_PROTECTOR)\n    target_compile_options(${PROJECT_NAME} PRIVATE -Wstack-protector -fstack-protector-all)\nendif()\n\nif(S2N_FUZZ_TEST)\n    target_compile_definitions(${PROJECT_NAME} PUBLIC S2N_FUZZ_TESTING=1)\n    target_compile_options(${PROJECT_NAME} PUBLIC -fsanitize=fuzzer-no-link,leak,address,undefined)\n    target_link_libraries(${PROJECT_NAME} PUBLIC -fsanitize=fuzzer-no-link,leak,address,undefined)\nendif()\n\nif(TSAN)\n    target_compile_options(${PROJECT_NAME} PUBLIC -fsanitize=thread -DS2N_THREAD_SANITIZER=1)\n    target_link_options(${PROJECT_NAME} PUBLIC -fsanitize=thread)\nendif()\n\nif(ASAN)\n    target_compile_options(${PROJECT_NAME} PUBLIC -fsanitize=address -DS2N_ADDRESS_SANITIZER=1)\n    target_link_options(${PROJECT_NAME} PUBLIC -fsanitize=address)\nendif()\n\nif (UBSAN)\n    target_compile_options(${PROJECT_NAME} PUBLIC -fsanitize=undefined -fno-sanitize-recover=all)\n    target_link_options(${PROJECT_NAME} PUBLIC -fsanitize=undefined -fno-sanitize-recover=all)\nendif()\n\nif(TSAN OR ASAN OR UBSAN)\n    # no-omit-frame-pointer and no-optimize-sibling-calls provide better stack traces\n    target_compile_options(${PROJECT_NAME} PUBLIC -fno-omit-frame-pointer -fno-optimize-sibling-calls)\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\")\n\nif (NOT $ENV{S2N_LIBCRYPTO} MATCHES \"awslc\")\n    # add cast-qual back in for non AWS-LC\n    target_compile_options(${PROJECT_NAME} PRIVATE -Wcast-qual)\nendif()\n\nif (COVERAGE)\n    # https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html\n    # Coverage is done using LLVM source based coverage. This is only supported\n    # on LLVM compilers. GCC would fail with \"unrecognized compile options\"\n    # on -fprofile-instr-generate -fcoverage-mapping flags.\n    if (NOT ${CMAKE_C_COMPILER_ID} MATCHES Clang)\n        message(FATAL_ERROR \"This project requires clang for coverage support. You are currently using \" ${CMAKE_C_COMPILER_ID})\n    endif()\n    target_compile_options(${PROJECT_NAME} PUBLIC -fprofile-instr-generate -fcoverage-mapping)\n    target_link_options(${PROJECT_NAME} PUBLIC -fprofile-instr-generate -fcoverage-mapping)\nendif()\n\n# For interning, we need to find the static libcrypto library. Cmake configs\n# can branch on the variable BUILD_SHARED_LIBS to e.g. avoid having to define\n# multiple targets. An example is AWS-LC:\n# https://github.com/awslabs/aws-lc/blob/main/crypto/cmake/crypto-config.cmake#L5\nif (S2N_INTERN_LIBCRYPTO)\n    set(BUILD_SHARED_LIBS_BACKUP ${BUILD_SHARED_LIBS})\n    set(BUILD_SHARED_LIBS OFF)\nendif()\n\n# Work around target differences\nif (TARGET crypto)\n    message(STATUS \"S2N found target: crypto\")\n    set(LINK_LIB \"crypto\")\nelse()\n    find_package(crypto REQUIRED)\n    message(STATUS \"Using libcrypto from the cmake path\")\n    set(LINK_LIB \"AWS::crypto\")\nendif()\n\nif (S2N_INTERN_LIBCRYPTO)\n    # Restore the old BUILD_SHARED_LIBS value\n    set(BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS_BACKUP})\n    message(STATUS \"Enabling libcrypto interning\")\nendif()\n\nif (NOT DEFINED CMAKE_AR)\n    message(STATUS \"CMAKE_AR undefined, setting to `ar` by default\")\n    SET(CMAKE_AR ar)\nelse()\n    message(STATUS \"CMAKE_AR found: ${CMAKE_AR}\")\nendif()\n\nif (NOT DEFINED CMAKE_RANLIB)\n    message(STATUS \"CMAKE_RANLIB undefined, setting to `ranlib` by default\")\n    SET(CMAKE_RANLIB ranlib)\nelse()\n    message(STATUS \"CMAKE_RANLIB found: ${CMAKE_RANLIB}\")\nendif()\n\nif (NOT DEFINED CMAKE_OBJCOPY)\n    message(STATUS \"CMAKE_OBJCOPY undefined, setting to `objcopy` by default\")\n    SET(CMAKE_OBJCOPY objcopy)\nelse()\n    message(STATUS \"CMAKE_OBJCOPY found: ${CMAKE_OBJCOPY}\")\nendif()\n\n# Sets the result of the feature probe to `IS_AVAILABLE`\nfunction(feature_probe_result PROBE_NAME IS_AVAILABLE)\n    # normalize the boolean value\n    if(IS_AVAILABLE)\n        set(NORMALIZED TRUE)\n    else()\n        set(NORMALIZED FALSE)\n    endif()\n\n    # indicate the status of the probe\n    message(STATUS \"feature ${PROBE_NAME}: ${NORMALIZED}\")\n    # set the probe result in the parent scope for other probes\n    set(${PROBE_NAME} ${NORMALIZED} PARENT_SCOPE)\n\n    # define the probe if available\n    if(NORMALIZED)\n        add_definitions(-D${PROBE_NAME})\n    endif()\nendfunction()\n\n# Tries to compile a feature probe and initializes the corresponding flags\nfunction(feature_probe PROBE_NAME)\n    # Load the global probe flags\n    file(READ \"${CMAKE_CURRENT_LIST_DIR}/tests/features/GLOBAL.flags\" GLOBAL_FILE)\n    string(REPLACE \"\\n\" \"\" GLOBAL_FLAGS \"${GLOBAL_FILE}\")\n\n    # Load the probe's flags\n    file(READ \"${CMAKE_CURRENT_LIST_DIR}/tests/features/${PROBE_NAME}.flags\" PROBE_FILE)\n    string(REPLACE \"\\n\" \"\" PROBE_FLAGS \"${PROBE_FILE}\")\n\n    # Try to compile the probe with the given flags\n    try_compile(\n        IS_AVAILABLE\n        ${CMAKE_BINARY_DIR}\n        SOURCES \"${CMAKE_CURRENT_LIST_DIR}/tests/features/${PROBE_NAME}.c\"\n        LINK_LIBRARIES ${LINK_LIB} ${OS_LIBS}\n        CMAKE_FLAGS ${ADDITIONAL_FLAGS}\n        COMPILE_DEFINITIONS -I \"${CMAKE_CURRENT_LIST_DIR}\" -include \"${CMAKE_CURRENT_LIST_DIR}/utils/s2n_prelude.h\" -c ${GLOBAL_FLAGS} ${PROBE_FLAGS}\n        ${ARGN}\n        OUTPUT_VARIABLE TRY_COMPILE_OUTPUT\n    )\n    # Uncomment the line below to get the output of the try_compile command\n    #message(STATUS \"Output of try_compile: ${TRY_COMPILE_OUTPUT}\")\n\n    # Set the result of the probe\n    feature_probe_result(${PROBE_NAME} ${IS_AVAILABLE})\n\n    # Make sure the variable is set in the parent scope\n    set(${PROBE_NAME} ${IS_AVAILABLE} PARENT_SCOPE)\n\n    # Set the flags that we used for the probe\n    set(${PROBE_NAME}_FLAGS ${PROBE_FLAGS} PARENT_SCOPE)\nendfunction()\n\n# Iterate over all of the features and try to compile them\nFILE(GLOB FEATURE_SRCS \"${CMAKE_CURRENT_LIST_DIR}/tests/features/*.c\")\nlist(SORT FEATURE_SRCS)\nforeach(file ${FEATURE_SRCS})\n    get_filename_component(feature_name ${file} NAME_WE)\n    feature_probe(${feature_name})\nendforeach()\n\n# FreeBSD might need to link to execinfo explicitly\nif(NOT S2N_EXECINFO_AVAILABLE AND CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\")\n    feature_probe(S2N_EXECINFO_AVAILABLE LINK_LIBRARIES execinfo)\nendif()\n\n# Stack traces are only available if execinfo is\nif (NOT S2N_EXECINFO_AVAILABLE)\n    set(S2N_STACKTRACE FALSE)\nendif()\nfeature_probe_result(S2N_STACKTRACE ${S2N_STACKTRACE})\n\nif (S2N_INTERN_LIBCRYPTO)\n\n    # Check if the AWS::crypto target has beeen added and handle it\n    if (TARGET AWS::crypto)\n        # Get the target library type (shared or static)\n        get_target_property(target_type AWS::crypto TYPE)\n        message(STATUS \"AWS::crypto target type: ${target_type}\")\n\n        # If we didn't find the a target with static library type, fallback to\n        # existing crypto_STATIC_LIBRARY and crypto_INCLUDE_DIR\n        if (target_type STREQUAL STATIC_LIBRARY)\n            # We need an path to the include directory and libcrypto.a archive.\n            # The finder module defines these appropriately, but if we go through\n            # the target config we need to query this information from the target\n            # first.\n            get_target_property(crypto_STATIC_LIBRARY AWS::crypto LOCATION)\n            get_target_property(crypto_INCLUDE_DIR AWS::crypto INTERFACE_INCLUDE_DIRECTORIES)\n        endif()\n    endif()\n\n    if (NOT crypto_STATIC_LIBRARY)\n        message(FATAL_ERROR \"libcrypto interning requires a static build of libcrypto.a to be available\")\n    endif()\n\n    message(STATUS \"crypto_STATIC_LIBRARY: ${crypto_STATIC_LIBRARY}\")\n    message(STATUS \"crypto_INCLUDE_DIR: ${crypto_INCLUDE_DIR}\")\n\n    # Don't call link_target_libraries here, just make sure the libcrypto include dir is in the path\n    include_directories(\"${crypto_INCLUDE_DIR}\")\n\n    add_custom_command(\n        OUTPUT libcrypto.symbols\n        COMMAND\n          # copy the static version of libcrypto\n          cp ${crypto_STATIC_LIBRARY} s2n_libcrypto.a &&\n          # dump all of the symbols and prefix them with `s2n$`\n          bash -c \"${CMAKE_NM} s2n_libcrypto.a | awk '/ [A-Z] /{if ($3) print $3\\\" s2n$\\\"$3}' | sort | uniq > libcrypto.symbols\" &&\n          # redefine the libcrypto libary symbols\n          ${CMAKE_OBJCOPY} --redefine-syms libcrypto.symbols s2n_libcrypto.a &&\n          rm -rf s2n_libcrypto &&\n          mkdir s2n_libcrypto &&\n          cd s2n_libcrypto &&\n          # extract libcrypto objects from the archive\n          ${CMAKE_AR} x ../s2n_libcrypto.a &&\n          # rename all of the object files so we don't have any object name collisions\n          bash -c \"find . -name '*.o' -type f -print0 | xargs -0 -n1 -- basename | xargs -I{} mv {} s2n_crypto__{}\"\n        VERBATIM\n    )\n\n    add_custom_target(s2n_libcrypto ALL\n      DEPENDS libcrypto.symbols\n    )\n    add_dependencies(${PROJECT_NAME} s2n_libcrypto)\n    add_definitions(-DS2N_INTERN_LIBCRYPTO)\n\n    if ((BUILD_SHARED_LIBS AND BUILD_TESTING) OR NOT BUILD_SHARED_LIBS)\n        # if libcrypto needs to be interned, rewrite libcrypto references so use of internal functions will link correctly\n        add_custom_command(\n            TARGET ${PROJECT_NAME} PRE_LINK\n            COMMAND\n              find \"${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${PROJECT_NAME}.dir\" -name '*.c.o' -exec objcopy --redefine-syms libcrypto.symbols {} \\\\\\;\n        )\n    endif()\n\n    # copy the static libcrypto into the final artifact\n    if (BUILD_SHARED_LIBS)\n        if (BUILD_TESTING)\n            # if we're building tests, we export the prefixed symbols so tests can link to them\n            set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS\n                \"-Wl,--whole-archive s2n_libcrypto.a -Wl,--no-whole-archive\")\n        else()\n            # if we're not building tests, then just copy the original archive, unmodified\n            set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS\n                \"-Wl,--whole-archive ${crypto_STATIC_LIBRARY} -Wl,--no-whole-archive -Wl,--exclude-libs=ALL\")\n        endif()\n    else()\n        # add all of the prefixed symbols to the archive\n        add_custom_command(\n            TARGET ${PROJECT_NAME} POST_BUILD\n            DEPENDS libcrypto.symbols\n            COMMAND\n                bash -c \"${CMAKE_AR} -r lib/libs2n.a s2n_libcrypto/*.o\"\n            VERBATIM\n        )\n    endif()\nelse()\n    # LINK_LIB is set above after checking targets. It handles the find_package craziness.\n    target_link_libraries(${PROJECT_NAME} PUBLIC ${LINK_LIB})\nendif()\n\ntarget_link_libraries(${PROJECT_NAME} PUBLIC ${OS_LIBS} m)\n\ntarget_include_directories(${PROJECT_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\ntarget_include_directories(${PROJECT_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/api> $<INSTALL_INTERFACE:include>)\n\nif (BUILD_TESTING)\n    enable_testing()\n\n    ############################################################################\n    ################### build testlib (utility library) ########################\n    ############################################################################\n\n    file(GLOB TESTLIB_SRC \"tests/testlib/*.c\")\n    file(GLOB EXAMPLES_SRC \"docs/examples/*.c\")\n\n    add_library(testss2n STATIC ${TESTLIB_SRC} ${EXAMPLES_SRC})\n    target_include_directories(testss2n PUBLIC tests)\n    target_compile_options(testss2n PRIVATE -std=gnu99)\n    # make sure all linked tests include the prelude\n    target_compile_options(testss2n PUBLIC -include \"${S2N_PRELUDE}\")\n    target_link_libraries(testss2n PUBLIC ${PROJECT_NAME})\n    if (SECCOMP)\n        message(STATUS \"Linking tests with seccomp\")\n        target_link_libraries(testss2n PRIVATE seccomp)\n        target_compile_definitions(testss2n PRIVATE SECCOMP)\n    endif()\n\n    if (S2N_INTERN_LIBCRYPTO)\n        # if libcrypto was interned, rewrite libcrypto symbols so use of internal\n        # functions will link correctly\n        add_custom_command(\n            TARGET testss2n POST_BUILD\n            COMMAND\n                objcopy --redefine-syms libcrypto.symbols lib/libtestss2n.a\n        )\n    endif()\n\n    ############################################################################\n    ########################## configure unit tests ############################\n    ############################################################################\n\n    # CTest configuration variables need to be set before include(CTest) is called\n    set(VALGRIND_DEFAULT \" \\\n        --leak-check=full \\\n        --leak-resolution=high \\\n        --trace-children=yes \\\n        -q --error-exitcode=123 \\\n        --error-limit=no \\\n        --num-callers=40 \\\n        --undef-value-errors=no \\\n        --track-fds=yes \\\n        --log-fd=2 \\\n        --suppressions=valgrind.suppressions\")\n\n    # \"pedantic valgrind\" will error on memory that is \"Still Reachable\". \n    # We only run this on OpenSSL 1.1.1 because there are hundreds of false positives in other libcryptos.\n    # Tracking issue: https://github.com/aws/s2n-tls/issues/4777\n    if ($ENV{S2N_LIBCRYPTO} MATCHES \"openssl-1.1.1\")\n        set(MEMORYCHECK_COMMAND_OPTIONS \"${VALGRIND_DEFAULT} --run-libc-freeres=yes --errors-for-leak-kinds=all --show-leak-kinds=all\")\n    else()\n        set(MEMORYCHECK_COMMAND_OPTIONS \"${VALGRIND_DEFAULT} --run-libc-freeres=no\")\n    endif()\n\n    set(MEMORYCHECK_TYPE \"Valgrind\")\n\n    set(UNIT_TEST_ENVS S2N_DONT_MLOCK=1)\n    if (TSAN OR ASAN)\n        set(UNIT_TEST_ENVS ${UNIT_TEST_ENVS} S2N_ADDRESS_SANITIZER=1)\n    endif()\n    if(TSAN)\n        set(TSAN_SUPPRESSIONS_FILE ${CMAKE_SOURCE_DIR}/tests/.tsan_suppressions)\n        if(NOT EXISTS ${TSAN_SUPPRESSIONS_FILE})\n            message(FATAL_ERROR \"TSAN suppression file ${TSAN_SUPPRESSIONS_FILE} missing\")\n        endif()\n        set(TSAN_OPTIONS suppressions=${TSAN_SUPPRESSIONS_FILE})\n        if(DEFINED ENV{TSAN_OPTIONS})\n            set(TSAN_OPTIONS \"${TSAN_OPTIONS} $ENV{TSAN_OPTIONS}\")\n        endif()\n        set(UNIT_TEST_ENVS ${UNIT_TEST_ENVS} TSAN_OPTIONS=${TSAN_OPTIONS})\n    endif()\n    if(ASAN)\n        # \"detect_odr_violation\" detects violations of the \"one definition rule\",\n        # ensuring that symbols are only defined once.\n        # But some of our unit tests intentionally include *.c files for testing,\n        # resulting in duplicate global values.\n        set(ASAN_OPTIONS detect_odr_violation=0)\n        if(DEFINED ENV{ASAN_OPTIONS})\n            set(ASAN_OPTIONS \"${ASAN_OPTIONS} $ENV{ASAN_OPTIONS}\")\n        endif()\n        set(UNIT_TEST_ENVS ${UNIT_TEST_ENVS} ASAN_OPTIONS=${ASAN_OPTIONS})\n    endif()\n    message(STATUS \"Running tests with environment: ${UNIT_TEST_ENVS}\")\n\n    include(CTest)\n\n    ############################################################################\n    ############################ build unit tests ##############################\n    ############################################################################\n\n    file(GLOB UNITTESTS_SRC \"tests/unit/*.c\")\n    foreach(test_case ${UNITTESTS_SRC})\n        # NAME_WE: name without extension\n        get_filename_component(test_case_name ${test_case} NAME_WE)\n\n        add_executable(${test_case_name} ${test_case})\n        target_link_libraries(${test_case_name} PRIVATE testss2n)\n        if (S2N_INTERN_LIBCRYPTO)\n            # if libcrypto was interned, rewrite libcrypto symbols so use of internal functions will link correctly\n            add_custom_command(\n                TARGET ${test_case_name} PRE_LINK\n                COMMAND\n                  find . -name '${test_case_name}.c.o' -exec objcopy --redefine-syms libcrypto.symbols {} \\\\\\;\n            )\n        endif()\n        target_compile_options(${test_case_name} PRIVATE \n            -Wall -Wimplicit -Wunused -Wcomment -Wchar-subscripts -Wuninitialized \n            -Wshadow  -Wcast-align -Wwrite-strings -Wformat-security\n            -Wno-deprecated-declarations -Wno-unknown-pragmas -Wno-deprecated -std=gnu99\n        )\n        if (S2N_LTO)\n            target_compile_options(${test_case_name} PRIVATE -flto)\n        endif()\n\n        add_test(\n            NAME ${test_case_name} \n            COMMAND $<TARGET_FILE:${test_case_name}> \n            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests/unit\n        )\n        set_property(TEST ${test_case_name} PROPERTY LABELS \"unit\")\n        set_property(TEST ${test_case_name} PROPERTY ENVIRONMENT ${UNIT_TEST_ENVS})\n\n    endforeach(test_case)\n\n    ############################################################################\n    ######################### build utility binaries ###########################\n    ############################################################################\n\n    add_executable(s2nc \"bin/s2nc.c\" \"bin/echo.c\" \"bin/https.c\" \"bin/common.c\")\n    target_link_libraries(s2nc ${PROJECT_NAME})\n    target_compile_options(s2nc PRIVATE -std=gnu99)\n\n    add_executable(s2nd \"bin/s2nd.c\" \"bin/echo.c\" \"bin/https.c\" \"bin/common.c\")\n    target_link_libraries(s2nd ${PROJECT_NAME})\n    target_compile_options(s2nd PRIVATE -std=gnu99)\n\n    add_executable(policy \"bin/policy.c\")\n    target_link_libraries(policy ${PROJECT_NAME})\n    target_compile_options(policy PRIVATE -std=gnu99)\n\n    if(S2N_LTO)\n        target_compile_options(s2nc PRIVATE -flto)\n        target_compile_options(s2nd PRIVATE -flto)\n    endif()\n\n    if (S2N_INTEG_TESTS)\n        find_package (Python3 COMPONENTS Interpreter Development)\n        file(GLOB integv2_test_files \"${PROJECT_SOURCE_DIR}/tests/integrationv2/test_*.py\")\n        set(N 1)\n        if (S2N_FAST_INTEG_TESTS)\n            set(N auto)\n        endif()\n        foreach(test_file_path ${integv2_test_files})\n            get_filename_component(test_filename ${test_file_path} NAME_WE)\n            string(REGEX REPLACE \"^test_\" \"integrationv2_\" test_target ${test_filename})\n            if (S2N_INTEG_NIX)\n                # For Nix and environments where LD_LIBRARY_PATH is already correct.\n                # We're also dropping tox and calling pytest directly, because\n                # Nix is already handling all of the python setup.\n                if (CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\" AND ${test_target} STREQUAL \"integrationv2_sslyze\" )\n                  # sslyze/nassl is not available on aarch64.\n                  message(WARNING \"Skipping ${test_target} due to missing tools on ${CMAKE_SYSTEM_PROCESSOR}\")\n                  continue()\n                endif()\n                message(STATUS \"Adding integ test ${test_target}\")\n                add_test(NAME ${test_target}\n                        COMMAND\n                        pytest\n                        -x -n=${N} --reruns=2 --durations=10 --cache-clear -rpfsq\n                        -o log_cli=true --log-cli-level=DEBUG --provider-version=$ENV{S2N_LIBCRYPTO}\n                        ${test_file_path}\n                        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tests/integrationv2\n                )\n            else()\n                # For use with libcryptos built into test-deps, and not in LD_LIBRARY_PATH.\n                # This is a duplication of tests/integrationv2/Makefile and\n                # can go away once all the Nix porting is finished.\n                add_test(NAME ${test_target}\n                        COMMAND\n                        ${CMAKE_COMMAND} -E env\n                        DYLD_LIBRARY_PATH=${PROJECT_SOURCE_DIR}/libcrypto-root/lib:$ENV{DYLD_LIBRARY_PATH}\n                        LD_LIBRARY_PATH=${PROJECT_SOURCE_DIR}/libcrypto-root/lib:${PROJECT_SOURCE_DIR}/test-deps/openssl-1.1.1/lib:${PROJECT_SOURCE_DIR}/test-deps/gnutls37/nettle/lib:$ENV{LD_LIBRARY_PATH}\n                        PATH=${PROJECT_SOURCE_DIR}/bin:${PROJECT_SOURCE_DIR}/test-deps/openssl-1.1.1/bin:${PROJECT_SOURCE_DIR}/test-deps/gnutls37/bin:$ENV{PATH}\n                        PYTHONNOUSERSITE=1\n                        S2N_INTEG_TEST=1\n                        TOX_TEST_NAME=${test_file_path}\n                        ${Python3_EXECUTABLE} -m tox\n                        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tests/integrationv2)\n            endif()\n            set_property(TEST ${test_target} PROPERTY LABELS \"integrationv2\")\n            set_property(TEST ${test_target} PROPERTY TIMEOUT 7200)\n        endforeach()\n    endif()\n\n    if(S2N_FUZZ_TEST)\n        message(STATUS \"Fuzz build enabled\")\n        set(SCRIPT_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/tests/fuzz/runFuzzTest.sh\")\n        file(GLOB FUZZ_TEST_SRCS \"${CMAKE_CURRENT_SOURCE_DIR}/tests/fuzz/*.c\")\n\n        file(GLOB TESTLIB_SRC \"tests/testlib/*.c\")\n        file(GLOB TESTLIB_HEADERS \"tests/testlib/*.h\" \"tests/s2n_test.h\")\n\n        # This must be a shared object so that symbols can be overridden by the\n        # fuzz test specific LD_PRELOAD libraries.\n        add_library(fuzztest SHARED ${TESTLIB_SRC})\n        target_include_directories(fuzztest PUBLIC tests)\n        target_link_libraries(fuzztest PUBLIC ${PROJECT_NAME})\n\n        # Set default values for fuzzing\n        if(DEFINED ENV{FUZZ_TIMEOUT_SEC})\n            set(FUZZ_TIMEOUT_SEC $ENV{FUZZ_TIMEOUT_SEC})    \n        else()\n            set(FUZZ_TIMEOUT_SEC 60)\n        endif()\n\n        # Build LD_PRELOAD shared libraries\n        file(GLOB LIBRARY_SRCS \"${CMAKE_CURRENT_SOURCE_DIR}/tests/fuzz/LD_PRELOAD/*.c\")\n        foreach(SRC ${LIBRARY_SRCS})\n            get_filename_component(LIB_NAME ${SRC} NAME_WE)\n            add_library(${LIB_NAME} SHARED ${SRC})\n            target_include_directories(${LIB_NAME} PRIVATE \n                ${CMAKE_CURRENT_SOURCE_DIR}\n                ${CMAKE_CURRENT_SOURCE_DIR}/api\n            )\n        endforeach()\n\n        set(CMAKE_C_COMPILER clang)\n\n        foreach(src ${FUZZ_TEST_SRCS})\n            get_filename_component(TEST_NAME ${src} NAME_WE)\n\n            add_executable(${TEST_NAME} ${src})\n            \n            target_compile_options(${TEST_NAME} PRIVATE \n                -g -Wno-unknown-pragmas -Wno-unused-result\n            )\n            target_link_options(${TEST_NAME} PRIVATE \n                -fsanitize=fuzzer -lstdc++\n            )\n            target_link_libraries(${TEST_NAME} PRIVATE \n                fuzztest\n            )\n\n            add_test(NAME ${TEST_NAME}\n                COMMAND ${CMAKE_COMMAND} -E env\n                    bash ${SCRIPT_PATH} \n                    ${TEST_NAME} \n                    ${FUZZ_TIMEOUT_SEC} \n                    ${CMAKE_CURRENT_SOURCE_DIR}\n                WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests/fuzz\n            )\n            set_property(TEST ${TEST_NAME} PROPERTY LABELS \"fuzz\")\n        endforeach()\n    endif()\nendif()\n\n#install the s2n files\ninstall(FILES ${API_HEADERS} DESTINATION \"include/\" COMPONENT Development)\ninstall(FILES ${API_UNSTABLE_HEADERS} DESTINATION \"include/s2n/unstable\" COMPONENT Development)\n\nif (UNIX AND NOT APPLE)\n    include(GNUInstallDirs)\nelseif(NOT DEFINED CMAKE_INSTALL_LIBDIR)\n    set(CMAKE_INSTALL_LIBDIR \"lib\")\nendif()\n\nif (S2N_INSTALL_S2NC_S2ND)\n  install(\n    TARGETS s2nc s2nd RUNTIME DESTINATION bin\n    )\nendif()\n\ninstall(\n        TARGETS ${PROJECT_NAME}\n        EXPORT ${PROJECT_NAME}-targets\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT Development\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT Runtime\n        RUNTIME DESTINATION bin COMPONENT Runtime\n)\n\nconfigure_file(\"cmake/${PROJECT_NAME}-config.cmake\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake\"\n        @ONLY)\n\nif (BUILD_SHARED_LIBS)\n   set (TARGET_DIR \"shared\")\nelse()\n   set (TARGET_DIR \"static\")\nendif()\n\ninstall(EXPORT \"${PROJECT_NAME}-targets\"\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/cmake/${TARGET_DIR}\"\n        NAMESPACE AWS::\n        COMPONENT Development)\n\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake\"\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/cmake/\"\n        COMPONENT Development)\n\ninstall(FILES \"cmake/modules/Findcrypto.cmake\"\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/cmake/modules/\"\n        COMPONENT Development)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.7958984375,
          "content": "#\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\").\n# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#\n#  http://aws.amazon.com/apache2.0\n#\n# or in the \"license\" file accompanying this file. This file is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied. See the License for the specific language governing\n# permissions and limitations under the License.\n#\n\nPLATFORM := $(shell uname)\nMAKEFLAGS += PLATFORM=$(PLATFORM)\n\nifndef LIBCRYPTO_ROOT\n\texport LIBCRYPTO_ROOT = $(shell echo \"`pwd`/libcrypto-root\")\nendif\n\nexport S2N_ROOT=$(shell pwd)\nexport COVERAGE_DIR = $(shell echo \"${S2N_ROOT}/coverage\")\nDIRS=$(wildcard */)\nSRCS=$(wildcard *.c)\nOBJS=$(SRCS:.c=.o)\n\n.PHONY : all\nall: bin\n\t$(MAKE) -C tests\n\nbitcode :\n\t${MAKE} -C tests/saw bitcode\n\n.PHONY : bc\nbc:\n\t${MAKE} -C crypto bc\n\t${MAKE} -C stuffer bc\n\t${MAKE} -C tls bc\n\t${MAKE} -C utils bc\n.PHONY : saw\nsaw : bc\n\t$(MAKE) -C tests/saw\n\ninclude s2n.mk\n\n.PHONY : libs\nlibs:\n\t$(MAKE) -C utils\n\t$(MAKE) -C error\n\t$(MAKE) -C stuffer\n\t$(MAKE) -C crypto\n\t$(MAKE) -C tls\n\t$(MAKE) -C lib\n\n.PHONY : bin\nbin: libs\n\t$(MAKE) -C bin\n\n.PHONY : integrationv2\nintegrationv2: bin\n\t$(MAKE) -C tests integrationv2\n\n.PHONY : coverage\ncoverage: run-lcov run-genhtml\n\n.PHONY : run-lcov\nrun-lcov:\n\t$(MAKE) -C bin lcov\n\t$(MAKE) -C crypto lcov\n\t$(MAKE) -C error lcov\n\t$(MAKE) -C stuffer lcov\n\t$(MAKE) -C tests lcov\n\t$(MAKE) -C tls run-lcov\n\t$(MAKE) -C utils lcov\n\tlcov -a crypto/coverage.info -a error/coverage.info -a stuffer/coverage.info -a tls/coverage.info -a $(wildcard tls/*/coverage.info) -a utils/coverage.info --output ${COVERAGE_DIR}/all_coverage.info\n\n.PHONY : run-genhtml\nrun-genhtml:\n\tgenhtml -o ${COVERAGE_DIR}/html ${COVERAGE_DIR}/all_coverage.info\n\n\n.PHONY : indent\nindent:\n\t$(MAKE) -C tests indentsource\n\t$(MAKE) -C stuffer indentsource\n\t$(MAKE) -C crypto indentsource\n\t$(MAKE) -C utils indentsource\n\t$(MAKE) -C error indentsource\n\t$(MAKE) -C tls indent\n\t$(MAKE) -C bin indentsource\n\n.PHONY : pre_commit_check\npre_commit_check: all indent clean\n\n# TODO use awslabs instead\nDEV_IMAGE ?= camshaft/s2n-dev\nDEV_OPENSSL_VERSION ?= openssl-1.1.1\nDEV_VERSION ?= ubuntu_18.04_$(DEV_OPENSSL_VERSION)_gcc9\n\ndev:\n\t@docker run -it --rm --ulimit memlock=-1 -v `pwd`:/home/s2n-dev/s2n $(DEV_IMAGE):$(DEV_VERSION)\n\n.PHONY : install\ninstall: bin libs\n\t$(MAKE) -C bin install\n\t$(MAKE) -C lib install\n\n.PHONY: uninstall\nuninstall:\n\t$(MAKE) -C bin uninstall\n\t$(MAKE) -C lib uninstall\n\n.PHONY : clean\nclean:\n\t$(MAKE) -C tests clean\n\t$(MAKE) -C stuffer decruft\n\t$(MAKE) -C crypto decruft\n\t$(MAKE) -C utils decruft\n\t$(MAKE) -C error decruft\n\t$(MAKE) -C tls clean\n\t$(MAKE) -C bin decruft\n\t$(MAKE) -C lib decruft\n\t$(MAKE) -C coverage clean\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.080078125,
          "content": "s2n\nCopyright 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.748046875,
          "content": "<img src=\"docs/images/s2n_logo_github.png\" alt=\"s2n\">\n\ns2n-tls is a C99 implementation of the TLS/SSL protocols that is designed to be simple, small, fast, and with security as a priority. It is released and licensed under the Apache License 2.0.\n\n> s2n-tls is short for \"signal to noise\" and is a nod to the almost magical act of encryption — disguising meaningful signals, like your critical data, as seemingly random noise.\n>\n> -- [s2n-tls announcement](https://aws.amazon.com/blogs/security/introducing-s2n-a-new-open-source-tls-implementation/)\n\n[![Build Status](https://codebuild.us-west-2.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiMndlTzJNbHVxWEo3Nm82alp4eGdGNm4rTWdxZDVYU2VTbitIR0ZLbHVtcFFGOW5majk5QnhqaUp3ZEkydG1ueWg0NGlhRE43a1ZnUzZaQTVnSm91TzFFPSIsIml2UGFyYW1ldGVyU3BlYyI6IlJLbW42NENlYXhJNy80QnYiLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=main)](https://github.com/aws/s2n-tls/)\n[![Apache 2 License](https://img.shields.io/github/license/aws/s2n-tls.svg)](http://aws.amazon.com/apache-2-0/)\n[![C99](https://img.shields.io/badge/language-C99-blue.svg)](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf)\n[![Github forks](https://img.shields.io/github/forks/aws/s2n-tls.svg)](https://github.com/aws/s2n-tls/network)\n[![Github stars](https://img.shields.io/github/stars/aws/s2n-tls.svg)](https://github.com/aws/s2n-tls/stargazers)\n\n## Quickstart for Ubuntu\n\n```bash\n# clone s2n-tls\ngit clone https://github.com/aws/s2n-tls.git\ncd s2n-tls\n\n# install build dependencies\nsudo apt update\nsudo apt install cmake\n\n# install a libcrypto\nsudo apt install libssl-dev\n\n# build s2n-tls\ncmake . -Bbuild \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=./s2n-tls-install\ncmake --build build -j $(nproc)\nCTEST_PARALLEL_LEVEL=$(nproc) ctest --test-dir build\ncmake --install build\n```\n\nSee the [s2n-tls build documentation](docs/BUILD.md) for further guidance on building s2n-tls for your platform.\n\n## Have a Question?\nIf you think you might have found a security impacting issue, please follow our [Security Notification Process.](#security-issue-notifications)\n\nIf you have any questions about submitting PRs, s2n-tls API usage, or something similar, please open an issue.\n\n## Documentation\n\ns2n-tls uses [Doxygen](https://doxygen.nl/index.html) to document its public API. The latest s2n-tls documentation can be found on [GitHub pages](https://aws.github.io/s2n-tls/doxygen/). The [Usage Guide](https://aws.github.io/s2n-tls/usage-guide/) explains how different TLS features can be configured and used.\n\nDocumentation for older versions or branches of s2n-tls can be generated locally. To generate the documentation, install doxygen and run `doxygen docs/doxygen/Doxyfile`. The doxygen documentation can now be found at `docs/doxygen/output/html/index.html`.\n\nDoxygen installation instructions are available at the [Doxygen](https://doxygen.nl/download.html) webpage.\n\n## Platform Support\n\nWe’ve listed the distributions and platforms under two tiers: Tier 1 platforms are guaranteed to build, run, and pass tests in CI. Tier 2 platforms are guaranteed to build and we'll address issues opened against them, but they aren't currently running in our CI and are not actively reviewed with every commit. If you use a platform not listed below and would like to request (or help!) add it to our CI, please open an issue for discussion.\n\n### Tier 1\n\n|Distribution in CI                                     |Platforms        |\n|-------------------------------------------------------|-----------------|\n|Ubuntu18, Ubuntu24**                                   | x86_64          |\n|Ubuntu22                                               | x86_64, i686    |\n|AL2, AL2023**                                          | x86_64, aarch64 |\n|NixOS                                                  | x86_64, aarch64 |\n|OpenBSD [7.4](https://github.com/cross-platform-actions/action/blob/master/readme.md#supported-platforms)| x86_64 |\n|FreeBSD [latest](https://github.com/vmactions/freebsd-vm/blob/v1/conf/default.release.conf)| x86_64  |\n|OSX [latest](https://github.com/actions/runner-images?tab=readme-ov-file#available-images) | aarch64 |\n\n**Work in Progress\n\n### Tier 2\n\n|Distribution not in CI |Platforms|\n|-----------------------|---------|\n| Fedora Core 34-36     | x86_64, aarch64 |\n| Ubuntu14/16/20        | x86_64, aarch64 |\n| Ubuntu18/22/24        | aarch64         |\n| [OSX](https://github.com/actions/runner-images/tree/main/images/macos) 12-14 |x86_64|\n\nThese distribution lists are not exhaustive and missing tooling or a missing supported libcrypto library could prevent a successful build.\n\n## Using s2n-tls\n\nThe s2n-tls I/O APIs are designed to be intuitive to developers familiar with the widely-used POSIX I/O APIs, and s2n-tls supports blocking, non-blocking, and full-duplex I/O. Additionally there are no locks or mutexes within s2n-tls.\n\n```c\n/* Create a server mode connection handle */\nstruct s2n_connection *conn = s2n_connection_new(S2N_SERVER);\nif (conn == NULL) {\n    ... error ...\n}\n\n/* Associate a connection with a file descriptor */\nif (s2n_connection_set_fd(conn, fd) < 0) {\n    ... error ...\n}\n\n/* Negotiate the TLS handshake */\ns2n_blocked_status blocked;\nif (s2n_negotiate(conn, &blocked) < 0) {\n    ... error ...\n}\n\n/* Write data to the connection */\nint bytes_written;\nbytes_written = s2n_send(conn, \"Hello World\", sizeof(\"Hello World\"), &blocked);\n```\n\nFor details on building the s2n-tls library and how to use s2n-tls in an application you are developing, see the [Usage Guide](https://aws.github.io/s2n-tls/usage-guide).\n\n## s2n-tls features\n\ns2n-tls implements SSLv3, TLS1.0, TLS1.1, TLS1.2, and TLS1.3. For encryption, s2n-tls supports 128-bit and 256-bit AES in the CBC and GCM modes, ChaCha20, 3DES, and RC4. For forward secrecy, s2n-tls supports both DHE and ECDHE. s2n-tls also supports the Server Name Indicator (SNI), Application-Layer Protocol Negotiation (ALPN), and Online Certificate Status Protocol (OCSP) TLS extensions. SSLv3, RC4, 3DES, and DHE are each disabled by default for security reasons.\n\nAs it can be difficult to keep track of which encryption algorithms and protocols are best to use, s2n-tls features a simple API to use the latest \"default\" set of preferences. If you prefer to remain on a specific version for backwards compatibility, that is also supported.\n\n```c\n/* Use the latest s2n-tls \"default\" set of ciphersuite and protocol preferences */\ns2n_config_set_cipher_preferences(config, \"default\");\n\n/* Use a specific set of preferences, update when you're ready */\ns2n_config_set_cipher_preferences(config, \"20150306\")\n```\n\n## s2n-tls safety mechanisms\n\nInternally s2n-tls takes a systematic approach to data protection and includes several mechanisms designed to improve safety.\n\n##### Auditable code base\ns2n-tls's code is structured and written with a focus on reviewability. All s2n-tls code is subject to code review, and we plan to complete security evaluations of s2n-tls on an annual basis.\n\nTo date there have been two external code-level reviews of s2n-tls, including one by a commercial security vendor. s2n-tls has also been shared with some trusted members of the broader cryptography, security, and Open Source communities. Any issues discovered are always recorded in the s2n-tls issue tracker.\n\n##### Static analysis, fuzz-testing and penetration testing\n\nIn addition to code reviews, s2n-tls is subject to regular static analysis, fuzz-testing, and penetration testing. Several penetration tests have occurred, including two by commercial vendors.\n\n##### Unit tests and end-to-end testing\n\ns2n-tls includes positive and negative unit tests and end-to-end test cases.\n\nUnit test coverage can be viewed [here](https://dx1inn44oyl7n.cloudfront.net/main/index.html). Note that this represents unit coverage for a particular build. Since that build won't necessarily support all s2n-tls features, test coverage may be artificially lowered.\n\n##### Erase on read\ns2n-tls encrypts or erases plaintext data as quickly as possible. For example, decrypted data buffers are erased as they are read by the application.\n\n##### Built-in memory protection\ns2n-tls uses operating system features to protect data from being swapped to disk or appearing in core dumps.\n\n##### Minimalist feature adoption\ns2n-tls avoids implementing rarely used options and extensions, as well as features with a history of triggering protocol-level vulnerabilities. For example, there is no support for DTLS.\n\n##### Compartmentalized random number generation\nThe security of TLS and its associated encryption algorithms depends upon secure random number generation. s2n-tls provides every thread with two separate random number generators. One for \"public\" randomly generated data that may appear in the clear, and one for \"private\" data that should remain secret. This approach lessens the risk of potential predictability weaknesses in random number generation algorithms from leaking information across contexts.\n\n##### Modularized encryption\ns2n-tls has been structured so that different encryption libraries may be used. Today s2n-tls supports AWS-LC, OpenSSL (versions 1.0.2, 1.1.1 and 3.0.x), LibreSSL, and BoringSSL to perform the underlying cryptographic operations. Check the [libcrypto build documentation](docs/BUILD.md#building-with-a-specific-libcrypto) for a list of libcrypto-specific features.\n\n##### Timing blinding\ns2n-tls includes structured support for blinding time-based side-channels that may leak sensitive data. For example, if s2n-tls fails to parse a TLS record or handshake message, s2n-tls will add a randomized delay of between 10 and 30 seconds, granular to nanoseconds, before responding. This raises the complexity of real-world timing side-channel attacks by a factor of at least tens of trillions.\n\n##### Table based state-machines\ns2n-tls uses simple tables to drive the TLS/SSL state machines, making it difficult for invalid out-of-order states to arise.\n\n##### C safety\ns2n-tls is written in C, but makes light use of standard C library functions and wraps all memory handling, string handling, and serialization in systematic boundary-enforcing checks.\n\n## Security issue notifications\nIf you discover a potential security issue in s2n-tls we ask that you notify\nAWS Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public github issue.\n\nIf you package or distribute s2n-tls, or use s2n-tls as part of a large multi-user service, you may be eligible for pre-notification of future s2n-tls releases. Please contact s2n-pre-notification@amazon.com.\n\n## Contributing to s2n-tls\nIf you are interested in contributing to s2n-tls, please see our [development guide](https://github.com/aws/s2n-tls/blob/main/docs/DEVELOPMENT-GUIDE.md).\n\n## Language Bindings for s2n-tls\nSee our [language bindings list](https://github.com/aws/s2n-tls/blob/main/docs/BINDINGS.md) for language bindings for s2n-tls that we're aware of.\n"
        },
        {
          "name": "VERSIONING.rst",
          "type": "blob",
          "size": 1.658203125,
          "content": "*****************\nVersioning Policy\n*****************\n\nWe use a three-part X.Y.Z (Major.Minor.Patch) versioning definition, as follows:\n\n* **X (Major)** version changes are significant and expected to break backwards compatibility.\n* **Y (Minor)** version changes are moderate changes. These include:\n\n  * Significant non-breaking feature additions.\n  * Possible backwards-incompatible changes. These changes will be noted and explained in detail in the release notes.\n\n* **Z (Patch)** version changes are small changes. These changes will not break backwards compatibility.\n\n  * Z releases will also include warning of upcoming breaking changes, whenever possible.\n\nBeta releases\n=============\n\nVersions with a zero major version (0.Y.Z) are considered to be beta\nreleases. In beta releases, a Y-change may involve significant API changes.\n\nBranch stability\n================\n\nUntagged branches (such as main) are not subject to any API or ABI\nstability policy; APIs may change at any time.\n\nWhat this means for you\n=======================\n\nWe recommend running the most recent version. Here are our suggestions for managing updates:\n\n* Beta releases should be considered to be under flux. While we will try to minimize churn, expect that\n  you'll need to make some changes to move to the 1.0.0 release.\n* X changes will require some effort to incorporate.\n* Y changes will not require significant effort to incorporate.\n  * If you have good unit and integration tests, these changes are generally safe to pick up automatically.\n* Z changes will not require any changes to your code. Z changes are intended to be picked up automatically.\n  * Good unit and integration tests are always recommended.\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codebuild",
          "type": "tree",
          "content": null
        },
        {
          "name": "compliance",
          "type": "tree",
          "content": null
        },
        {
          "name": "coverage",
          "type": "tree",
          "content": null
        },
        {
          "name": "crypto",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "error",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 6.0302734375,
          "content": "{\n  \"nodes\": {\n    \"awslc\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nix\": \"nix\",\n        \"nixpkgs\": \"nixpkgs_2\"\n      },\n      \"locked\": {\n        \"lastModified\": 1728071784,\n        \"narHash\": \"sha256-Nuxw5kmd9ISY9v/0OpGtJEdRTCwNKW4LMRwN7XAiwBk=\",\n        \"owner\": \"dougch\",\n        \"repo\": \"aws-lc\",\n        \"rev\": \"dca587a40ed9942be40a7d9e1a196be41173d3cf\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"dougch\",\n        \"ref\": \"nixv1.36.0\",\n        \"repo\": \"aws-lc\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-utils\": {\n      \"locked\": {\n        \"lastModified\": 1667395993,\n        \"narHash\": \"sha256-nuEHfE/LcWyuSWnS8t12N1wc105Qtau+/OdUAjtQ0rA=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"5aed5285a952e0b949eb3ba02c12fa4fcfef535f\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"flake-utils\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"flake-utils_2\": {\n      \"locked\": {\n        \"lastModified\": 1667395993,\n        \"narHash\": \"sha256-nuEHfE/LcWyuSWnS8t12N1wc105Qtau+/OdUAjtQ0rA=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"5aed5285a952e0b949eb3ba02c12fa4fcfef535f\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"flake-utils\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"lowdown-src\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1633514407,\n        \"narHash\": \"sha256-Dw32tiMjdK9t3ETl5fzGrutQTzh2rufgZV4A/BbxuD4=\",\n        \"owner\": \"kristapsdz\",\n        \"repo\": \"lowdown\",\n        \"rev\": \"d2c2b44ff6c27b936ec27358a2653caaef8f73b8\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"kristapsdz\",\n        \"repo\": \"lowdown\",\n        \"type\": \"github\"\n      }\n    },\n    \"lowdown-src_2\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1633514407,\n        \"narHash\": \"sha256-Dw32tiMjdK9t3ETl5fzGrutQTzh2rufgZV4A/BbxuD4=\",\n        \"owner\": \"kristapsdz\",\n        \"repo\": \"lowdown\",\n        \"rev\": \"d2c2b44ff6c27b936ec27358a2653caaef8f73b8\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"kristapsdz\",\n        \"repo\": \"lowdown\",\n        \"type\": \"github\"\n      }\n    },\n    \"nix\": {\n      \"inputs\": {\n        \"lowdown-src\": \"lowdown-src\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"nixpkgs-regression\": \"nixpkgs-regression\"\n      },\n      \"locked\": {\n        \"lastModified\": 1676058957,\n        \"narHash\": \"sha256-qIyDaFtro2GqUejMG/0liegc6NqIhh5te+RlsU2mQ/I=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nix\",\n        \"rev\": \"c18456604601dd233be4ad2462474488ef8f87e3\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"nix\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"nix_2\": {\n      \"inputs\": {\n        \"lowdown-src\": \"lowdown-src_2\",\n        \"nixpkgs\": \"nixpkgs_3\",\n        \"nixpkgs-regression\": \"nixpkgs-regression_2\"\n      },\n      \"locked\": {\n        \"lastModified\": 1674061467,\n        \"narHash\": \"sha256-yvLbQusfeOizDwHFfTRtVwrUU15q2oaeDzImRGxoTs4=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nix\",\n        \"rev\": \"2513eba46a20578f54fd3ac3cb0d25aeb0d0b310\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"nix\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1670461440,\n        \"narHash\": \"sha256-jy1LB8HOMKGJEGXgzFRLDU1CBGL0/LlkolgnqIsF0D8=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"04a75b2eecc0acf6239acf9dd04485ff8d14f425\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-22.11-small\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs-regression\": {\n      \"locked\": {\n        \"lastModified\": 1643052045,\n        \"narHash\": \"sha256-uGJ0VXIhWKGXxkeNnq4TvV3CIOkUJ3PAoLZ3HMzNVMw=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"215d4d0fd80ca5163643b03a33fde804a29cc1e2\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"215d4d0fd80ca5163643b03a33fde804a29cc1e2\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs-regression_2\": {\n      \"locked\": {\n        \"lastModified\": 1643052045,\n        \"narHash\": \"sha256-uGJ0VXIhWKGXxkeNnq4TvV3CIOkUJ3PAoLZ3HMzNVMw=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"215d4d0fd80ca5163643b03a33fde804a29cc1e2\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"215d4d0fd80ca5163643b03a33fde804a29cc1e2\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs_2\": {\n      \"locked\": {\n        \"lastModified\": 1675918889,\n        \"narHash\": \"sha256-hy7re4F9AEQqwZxubct7jBRos6md26bmxnCjxf5utJA=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"49efda9011e8cdcd6c1aad30384cb1dc230c82fe\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-22.11\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs_3\": {\n      \"locked\": {\n        \"lastModified\": 1670461440,\n        \"narHash\": \"sha256-jy1LB8HOMKGJEGXgzFRLDU1CBGL0/LlkolgnqIsF0D8=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"04a75b2eecc0acf6239acf9dd04485ff8d14f425\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-22.11-small\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs_4\": {\n      \"locked\": {\n        \"lastModified\": 1674781052,\n        \"narHash\": \"sha256-nseKFXRvmZ+BDAeWQtsiad+5MnvI/M2Ak9iAWzooWBw=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"cc4bb87f5457ba06af9ae57ee4328a49ce674b1b\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-22.11\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"awslc\": \"awslc\",\n        \"flake-utils\": \"flake-utils_2\",\n        \"nix\": \"nix_2\",\n        \"nixpkgs\": \"nixpkgs_4\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 7.564453125,
          "content": "{\n  description = \"A flake for s2n-tls\";\n\n  inputs.nixpkgs.url = \"github:NixOS/nixpkgs/nixos-22.11\";\n  # TODO: https://github.com/aws/aws-lc/pull/830\n  inputs.awslc.url = \"github:dougch/aws-lc?ref=nixv1.36.0\";\n\n  outputs = { self, nix, nixpkgs, awslc, flake-utils }:\n    flake-utils.lib.eachDefaultSystem (system:\n      let\n        pkgs = nixpkgs.legacyPackages.${system};\n        aws-lc = awslc.packages.${system}.aws-lc;\n        # TODO: submit a flake PR\n        corretto = import nix/amazon-corretto-17.nix { pkgs = pkgs; };\n        # TODO: We have parts of our CI that rely on clang-format-15, but that is only available on github:nixos/nixpkgs/nixos-unstable\n        llvmPkgs = pkgs.llvmPackages_14;\n        pythonEnv = import ./nix/pyenv.nix { pkgs = pkgs; };\n        # Note: we're rebuilding, not importing from nixpkgs for the mkShells.\n        openssl_1_0_2 = import ./nix/openssl_1_0_2.nix { pkgs = pkgs; };\n        openssl_1_1_1 = import ./nix/openssl_1_1_1.nix { pkgs = pkgs; };\n        openssl_3_0 = import ./nix/openssl_3_0.nix { pkgs = pkgs; };\n        libressl = import ./nix/libressl.nix { pkgs = pkgs; };\n        common_packages = [\n          # Integration Deps\n          # We're not including openssl1.1.1 in our package list to avoid confusing cmake.\n          # It will be in the PATH of our devShell for use in tests.\n          pythonEnv\n          pkgs.valgrind\n          corretto\n          pkgs.iproute2\n          pkgs.apacheHttpd\n          pkgs.procps\n          # GnuTLS-cli and serv utilities needed for some integration tests.\n          pkgs.gnutls\n          pkgs.gdb\n          pkgs.tshark\n\n          # C Compiler Tooling: llvmPkgs.clangUseLLVM -- wrapper to overwrite default compiler with clang\n          llvmPkgs.llvm\n          llvmPkgs.llvm-manpages\n          llvmPkgs.libclang\n          llvmPkgs.clang-manpages\n          llvmPkgs.lldb\n\n          # Linters/Formatters\n          pkgs.shellcheck\n          pkgs.nixfmt\n          pkgs.python310Packages.pep8\n          pkgs.python310Packages.ipython\n\n          # Rust\n          pkgs.rustup\n\n          # Quality of Life\n          pkgs.findutils\n          pkgs.git\n          pkgs.which\n        ];\n        writeScript = path:\n          pkgs.writeScript (baseNameOf path) (builtins.readFile path);\n      in rec {\n        packages.s2n-tls = pkgs.stdenv.mkDerivation {\n          src = self;\n          name = \"s2n-tls\";\n          inherit system;\n\n          nativeBuildInputs = [ pkgs.cmake ];\n          buildInputs = [ pkgs.openssl_3 ];\n\n          configurePhase = ''\n            cmake -S . -B./build \\\n                  -DBUILD_SHARED_LIBS=ON \\\n                  -DCMAKE_BUILD_TYPE=RelWithDebInfo\n          ''; # TODO: set when system like aarch64/mips,etc\n\n          buildPhase = ''\n            cmake --build ./build -j $(nproc)\n          '';\n\n          installPhase = ''\n            cmake --install ./build --prefix $out\n          '';\n\n          checkPhase = ''\n            echo Not running tests here. Run `nix develop` to run tests.\n          '';\n\n          propagatedBuildInputs = [ pkgs.openssl_3 ];\n        };\n        devShells.default = pkgs.mkShell {\n          # This is a development environment shell which should be able to:\n          #  - build s2n-tls\n          #  - run unit tests\n          #  - run integ tests\n          #  - do common development operations (e.g. lint, debug, and manage repos)\n          inherit system;\n          buildInputs = [ pkgs.cmake openssl_3_0 ];\n          packages = common_packages;\n          S2N_LIBCRYPTO = \"openssl-3.0\";\n          OPENSSL_1_0_2_INSTALL_DIR = \"${openssl_1_0_2}\";\n          OPENSSL_1_1_1_INSTALL_DIR = \"${openssl_1_1_1}\";\n          OPENSSL_3_0_INSTALL_DIR = \"${openssl_3_0}\";\n          AWSLC_INSTALL_DIR = \"${aws-lc}\";\n          GNUTLS_INSTALL_DIR = \"${pkgs.gnutls}\";\n          LIBRESSL_INSTALL_DIR = \"${libressl}\";\n          # Integ s_client/server tests expect openssl 1.1.1.\n          shellHook = ''\n            echo Setting up $S2N_LIBCRYPTO environment from flake.nix...\n            export PATH=${openssl_1_1_1}/bin:$PATH\n            export PS1=\"[nix $S2N_LIBCRYPTO] $PS1\"\n            source ${writeScript ./nix/shell.sh}\n          '';\n        };\n\n        devShells.openssl111 = devShells.default.overrideAttrs\n          (finalAttrs: previousAttrs: {\n            # Re-include cmake to update the environment with a new libcrypto.\n            buildInputs = [ pkgs.cmake openssl_1_1_1 ];\n            S2N_LIBCRYPTO = \"openssl-1.1.1\";\n            # Integ s_client/server tests expect openssl 1.1.1.\n            # GnuTLS-cli and serv utilities needed for some integration tests.\n            shellHook = ''\n              echo Setting up $S2N_LIBCRYPTO environment from flake.nix...\n              export PATH=${openssl_1_1_1}/bin:$PATH\n              export PS1=\"[nix $S2N_LIBCRYPTO] $PS1\"\n              source ${writeScript ./nix/shell.sh}\n            '';\n          });\n\n        devShells.libressl = devShells.default.overrideAttrs\n          (finalAttrs: previousAttrs: {\n            # Re-include cmake to update the environment with a new libcrypto.\n            buildInputs = [ pkgs.cmake libressl ];\n            S2N_LIBCRYPTO = \"libressl\";\n            # Integ s_client/server tests expect openssl 1.1.1.\n            # GnuTLS-cli and serv utilities needed for some integration tests.\n            shellHook = ''\n              echo Setting up $S2N_LIBCRYPTO environment from flake.nix...\n              export PATH=${openssl_1_1_1}/bin:$PATH\n              export PS1=\"[nix $S2N_LIBCRYPTO] $PS1\"\n              source ${writeScript ./nix/shell.sh}\n            '';\n          });\n\n        devShells.openssl102 = devShells.default.overrideAttrs\n          (finalAttrs: previousAttrs: {\n            # Re-include cmake to update the environment with a new libcrypto.\n            buildInputs = [ pkgs.cmake openssl_1_0_2 ];\n            S2N_LIBCRYPTO = \"openssl-1.0.2\";\n            # Integ s_client/server tests expect openssl 1.1.1.\n            # GnuTLS-cli and serv utilities needed for some integration tests.\n            shellHook = ''\n              echo Setting up $S2N_LIBCRYPTO environment from flake.nix...\n              export PATH=${openssl_1_1_1}/bin:$PATH\n              export PS1=\"[nix $S2N_LIBCRYPTO] $PS1\"\n              source ${writeScript ./nix/shell.sh}\n            '';\n          });\n\n        devShells.awslc = devShells.default.overrideAttrs\n          (finalAttrs: previousAttrs: {\n            # Re-include cmake to update the environment with a new libcrypto.\n            buildInputs = [ pkgs.cmake aws-lc ];\n            S2N_LIBCRYPTO = \"awslc\";\n            # Integ s_client/server tests expect openssl 1.1.1.\n            # GnuTLS-cli and serv utilities needed for some integration tests.\n            shellHook = ''\n              echo Setting up $S2N_LIBCRYPTO environment from flake.nix...\n              export PATH=${openssl_1_1_1}/bin:$PATH\n              export PS1=\"[nix $S2N_LIBCRYPTO] $PS1\"\n              source ${writeScript ./nix/shell.sh}\n            '';\n          });\n\n        # Used to backup the devShell to s3 for caching.\n        packages.devShell = devShells.default.inputDerivation;\n        packages.default = packages.s2n-tls;\n        packages.s2n-tls-openssl3 = packages.s2n-tls.overrideAttrs\n          (finalAttrs: previousAttrs: { doCheck = true; });\n        packages.s2n-tls-openssl11 = packages.s2n-tls.overrideAttrs\n          (finalAttrs: previousAttrs: {\n            doCheck = true;\n            buildInputs = [ pkgs.openssl_1_1 ];\n          });\n        packages.s2n-tls-libressl = packages.s2n-tls.overrideAttrs\n          (finalAttrs: previousAttrs: {\n            doCheck = true;\n            buildInputs = [ pkgs.libressl ];\n          });\n        formatter = pkgs.nixfmt;\n      });\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libcrypto-build",
          "type": "tree",
          "content": null
        },
        {
          "name": "nix",
          "type": "tree",
          "content": null
        },
        {
          "name": "s2n.mk",
          "type": "blob",
          "size": 5.46484375,
          "content": "# You may not use this file except in compliance with the License.\n# A copy of the License is located at\n#\n#  http://aws.amazon.com/apache2.0\n#\n# or in the \"license\" file accompanying this file. This file is distributed\n# on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n# express or implied. See the License for the specific language governing\n# permissions and limitations under the License.\n#\n\nifeq ($(PLATFORM),Darwin)\n    LIBS = -lc -pthread\nelse ifeq ($(PLATFORM),FreeBSD)\n    LIBS = -lthr\nelse ifeq ($(PLATFORM),NetBSD)\n    LIBS = -pthread\nelse ifeq ($(PLATFORM),OpenBSD)\n    LIBS = -pthread -lkvm\nelse\n    LIBS = -pthread -ldl -lrt\nendif\n\nCRYPTO_LIBS = -lcrypto\n\nCC\t:= $(CROSS_COMPILE)$(CC)\nCXX\t:= $(CROSS_COMPILE)$(CXX)\nAR\t= $(CROSS_COMPILE)ar\nRANLIB\t= $(CROSS_COMPILE)ranlib\nCLANG    ?= clang-3.9\nLLVMLINK ?= llvm-link-3.9\n\nSOURCES = $(wildcard *.c *.h)\nCRUFT   = $(wildcard *.c~ *.h~ *.c.BAK *.h.BAK *.o *.a *.so *.dylib *.bc *.gcov *.gcda *.gcno *.info *.profraw *.tmp)\nINDENT  = $(shell (if indent --version 2>&1 | grep GNU > /dev/null; then echo indent ; elif gindent --version 2>&1 | grep GNU > /dev/null; then echo gindent; else echo true ; fi ))\n\n# BoringSSL is a C11 library and has less strict compiler flags than s2n. All other libcryptos use the default c99 flags\nifeq ($(S2N_LIBCRYPTO), boringssl)\n\tDEFAULT_CFLAGS = -std=c11\nelse ifeq ($(S2N_LIBCRYPTO), awslc)\n\t# AWS-LC is a BoringSSL derivative and has fixed the c11 issues but not all -Wcast-qual warnings\n\tDEFAULT_CFLAGS = -std=c99\nelse ifeq ($(S2N_LIBCRYPTO), awslc-fips)\n\t# AWS-LC is a BoringSSL derivative and has fixed the c11 issues but not all -Wcast-qual warnings\n\tDEFAULT_CFLAGS = -std=c99\nelse\n\tDEFAULT_CFLAGS = -std=c99 -Wcast-qual\nendif\n\nDEFAULT_CFLAGS += -pedantic -Wall -Werror -Wimplicit -Wunused -Wcomment -Wchar-subscripts -Wuninitialized \\\n                 -Wshadow  -Wcast-align -Wwrite-strings -fPIC -Wno-missing-braces\\\n                 -O2 -I$(LIBCRYPTO_ROOT)/include/ \\\n                 -DS2N_BUILD_RELEASE -include utils/s2n_prelude.h \\\n                 -I$(S2N_ROOT)/api/ -I$(S2N_ROOT) -Wno-deprecated-declarations -Wno-unknown-pragmas -Wformat-security \\\n                 -fgnu89-inline -fvisibility=hidden -DS2N_EXPORTS\n\nCOVERAGE_CFLAGS = -fprofile-arcs -ftest-coverage\nCOVERAGE_LDFLAGS = --coverage\nLDFLAGS = -z relro -z now -z noexecstack\n\n# Add a flag to disable stack protector for alternative libcs without\n# libssp.\nifneq ($(NO_STACK_PROTECTOR), 1)\nDEFAULT_CFLAGS += -Wstack-protector -fstack-protector-all\nendif\n\nifeq ($(NO_INLINE), 1)\nDEFAULT_CFLAGS += -fno-inline\nendif\n\nCFLAGS += ${DEFAULT_CFLAGS}\n\nifdef GCC_VERSION\n\tifneq (\"$(GCC_VERSION)\",\"NONE\")\n\t\tCC=gcc-$(GCC_VERSION)\n\t\t# Make doesn't support greater than checks, this uses `test` to compare values, then `echo $$?` to return the value of test's\n\t\t# exit code and finally uses the built in make `ifeq` to check if it was true and then adds the extra flag.\n\t\tifeq ($(shell test $(GCC_VERSION) -gt 7; echo $$?), 0)\n\t\t\tCFLAGS += -Wimplicit-fallthrough\n\t\tendif\n\n\t\tifeq ($(shell test $(GCC_VERSION) -ge 10; echo $$?), 0)\n\t\t\tCFLAGS += -fanalyzer\n\t\tendif\n\tendif\nendif\n\nDEBUG_CFLAGS = -g3 -ggdb -fno-omit-frame-pointer -fno-optimize-sibling-calls\n\nifdef S2N_ADDRESS_SANITIZER\n\tCFLAGS += -fsanitize=address -fuse-ld=gold -DS2N_ADDRESS_SANITIZER=1 ${DEBUG_CFLAGS}\nendif\n\nifdef S2N_GDB\n    S2N_DEBUG = 1\n    CFLAGS += -O0\nendif\n\nifdef S2N_DEBUG\n\tCFLAGS += ${DEBUG_CFLAGS}\nendif\n\n# Prepare CPPFLAGS by stripping out the unsupported options\nCPPFLAGS = ${CFLAGS}\nCPPFLAGS:=$(filter-out -Wimplicit,${CPPFLAGS})\nCPPFLAGS:=$(filter-out -std=c99,${CPPFLAGS})\nCPPFLAGS:=$(filter-out -fgnu89-inline,${CPPFLAGS})\n\n# Prints more information when running tests\nifdef S2N_TEST_DEBUG\n\tDEFAULT_CFLAGS += -DS2N_TEST_DEBUG\nendif\n\nLLVM_GCOV_MARKER_FILE=${COVERAGE_DIR}/use-llvm-gcov.tmp\n\n# Disable strict-prototypes check in clang\nifneq '' '$(findstring clang,$(CC))'\n\tCFLAGS += -Wno-strict-prototypes\n\tDEFAULT_CFLAGS += -Wno-strict-prototypes\n\tCPPFLAGS += -Wno-strict-prototypes\nendif\n\n# If COV_TOOL isn't set, pick a default COV_TOOL depending on if the LLVM Marker File was created.\nifndef COV_TOOL\n\tifneq (\"$(wildcard $(LLVM_GCOV_MARKER_FILE))\",\"\")\n\t\tCOV_TOOL=llvm-gcov.sh\n\tendif\nendif\n\n# Used for testing.\nprefix ?= /usr/local\nexec_prefix ?= $(prefix)\nbindir ?= $(exec_prefix)/bin\nlibdir ?= $(exec_prefix)/lib64\nincludedir ?= $(exec_prefix)/include\n\nfeature_probe = $(shell $(CC) $(CFLAGS) $(shell cat $(S2N_ROOT)/tests/features/GLOBAL.flags) $(shell cat $(S2N_ROOT)/tests/features/$(1).flags) -c -o tmp.o $(S2N_ROOT)/tests/features/$(1).c > /dev/null 2>&1 && echo \"-D$(1)\"; rm tmp.o > /dev/null 2>&1)\n\nFEATURES := $(notdir $(patsubst %.c,%,$(wildcard $(S2N_ROOT)/tests/features/*.c)))\nSUPPORTED_FEATURES := $(foreach feature,$(FEATURES),$(call feature_probe,$(feature)))\nCFLAGS += $(SUPPORTED_FEATURES)\nDEFAULT_CFLAGS += $(SUPPORTED_FEATURES)\nCPPCFLAGS += $(SUPPORTED_FEATURES)\n\n# only enable stacktraces if execinfo is available\nifneq (\"$(call feature_probe,S2N_EXECINFO_AVAILABLE)\",\"\")\n\tCFLAGS += -DS2N_STACKTRACE\n\tDEFAULT_CFLAGS += -DS2N_STACKTRACE\n\tCPPCFLAGS += -DS2N_STACKTRACE\nendif\n\nCFLAGS_LLVM = ${DEFAULT_CFLAGS} -emit-llvm -c -g -O1\n\n$(BITCODE_DIR)%.bc: %.c\n\t$(CLANG) $(CFLAGS_LLVM) -o $@ $< \n\n\nINDENTOPTS = -npro -kr -i4 -ts4 -nut -sob -l180 -ss -ncs -cp1\n\n.PHONY : indentsource\nindentsource:\n\t( for source in ${SOURCES} ; do ${INDENT} ${INDENTOPTS} $$source; done )\n\n.PHONY : lcov\nlcov: \n\tlcov --capture --directory . --gcov-tool $(COV_TOOL) --output ./coverage.info\n\n\n.PHONY : decruft\ndecruft:\n\t$(RM) -- ${CRUFT}\n"
        },
        {
          "name": "scram",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "stuffer",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tls",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}