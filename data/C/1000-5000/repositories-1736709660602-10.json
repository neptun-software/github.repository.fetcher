{
  "metadata": {
    "timestamp": 1736709660602,
    "page": 10,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "clibs/clib",
      "stars": 4897,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.25,
          "content": ".DS_Store\nclib\nclib-install\nclib-search\n*.exe\n*.o\n*.d\ntmp/\n/clib-init\n/clib-configure\npackage-lock.json\nclib-build\nclib-update\nclib-upgrade\nclib-uninstall\n\ntest/package/package-*\n!test/package/package-*.c\n\ntest/cache/*\n!test/cache/*.c\n!test/cache/Makefile\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0498046875,
          "content": "tag-version-prefix=\"\"\nmessage=\"chore(release): %s\"\n"
        },
        {
          "name": "BEST_PRACTICE.md",
          "type": "blob",
          "size": 6.3740234375,
          "content": "# Clib Examples and Best Practice\n\nThis page will cover:\n\n - [How to use libraries](#how-to-use-installed-libraries-for-your-project).\n - [Example Makefile](#example-makefile).\n - [Example `clib.json` for executables](#example-clibjson-for-executable-project).\n - [Making your own library package](#making-your-own-libraries).\n - [Example `clib.json` for libraries](#example-clibjson-for-libraries).\n - [How to install/uninstall executables](#install-and-uninstall-executables-packages).\n\nFor instructions on installation, check out the [README](https://github.com/clibs/clib#installation).\n\n## How to use installed libraries for your project\n\nLets say you have your project, with a typical directory tree like this:\n\n```\nyour-project/\n│\n├── deps/\n│   ├── trim.c/\n│   │   ├── trim.h\n│   │   ├── trim.c\n│   │   └── clib.json\n│   │\n│   ├── commander/\n│   │   ├─ commander.h\n│   │   ├─ commander.c\n│   │   └─ clib.json\n│   │\n│   └── logger/\n│       ├── logger.h\n│       ├── logger.c\n│       └── clib.json\n│\n├── LICENSE\n│\n├── Makefile\n│\n├── README.md\n│\n├── clib.json\n│\n└── src/\n    ├── main.c\n    ├── function.c\n    ├── function.h\n    └── etc...\n```\n\n`src` is the directory where you source code is in. And `deps` is the directory where you libraries will be downloaded when you run `clib install <username/library>`.\n\nKnowing all of that, lets have a look at an example Makefile.\n\n### Example Makefile\n\n```makefile\n# your c compiler\nCC = gcc\n\n# where to install\nPREFIX = /usr/local/bin\n\n# your project name\nTARGET = your-project\n\nCFLAGS = -Ideps -Wall\n\n# all the source files\nSRC = $(wildcard src/*.c)\nSRC += $(wildcard deps/*/*.c)\n\nOBJS = $(SRC:.c=.o)\n\n.PHONY:\nall: $(TARGET)\n\n.PHONY:\n$(TARGET): $(OBJS)\n\t$(CC) $(CFLAGS) $(LDFLAGS) -o $(TARGET) $(OBJS)\n\n.PHONY:\n%.o: %.c\n\t$(CC) $(DEP_FLAG) $(CFLAGS) $(LDFLAGS) -o $@ -c $<\n\n.PHONY:\nclean:\n\trm -f $(OBJS)\n\n.PHONY:\ninstall: $(TARGET)\n\tcp -f $(TARGET) $(PREFIX)\n\n.PHONY:\nuninstall: $(PREFIX)/$(TARGET)\n\trm -f $(PREFIX)/$(TARGET)\n```\n\nThis is a basic Makefile, and should work for most of your projects.\n\nYou *could* have your Makefile install the libraries upon running it, but you\nwould only need to do that to get the latest version of the library(s), in this\ncase you probably don't want that. You typically want yo get the latest stable version\nfor that library. By having a `clib.json` file in your project repo, you can\nspecify what packages you need, and what version of that package. Now have a look\nat a example `clib.json` file for your project: (executable package)\n\n### Example clib.json for executable project\n\n```json\n{\n  \"name\": \"executable-name\",\n  \"version\": \"1.0.0\",\n  \"repo\": \"your-github-name/project-name\",\n  \"dependencies\": {\n    \"stephenmathieson/trim.c\": \"0.0.2\",\n    \"clibs/commander\": \"1.3.2\",\n    \"clibs/logger\": \"0.0.1\",\n  },\n  \"install\": \"make install\",\n  \"uninstall\": \"make uninstall\"\n}\n```\n\nStarting from the top, `\"name\"` is your package name. `\"version\"` is your package version. `\"repo\"` is the location of your project, (not including the `https://github.com/`). `\"dependencies\"` is all the dependencies your project requires, along with there version. `\"install\"` is the command to install your program (ran as root), (tip: if your project requires more then one command to install it, like need to run `./configure`, before `make`, then do this: `\"install\": \"./configure && make && make install\"`). `\"uninstall\"` is the command to uninstall your project, [more on that later](#install-and-uninstall-executables).\n \n_**NOTE:** Make sure you have a release as the same version in your `clib.json` file, otherwise the download will fail. If you always want your package at the latest version, then put `master` as your version._\n\n## Making your own libraries\n\nNow that you know how to use libraries, heres how to make your own:\n\nLike before, heres a typical project directory tree:\n\n```\nyour-library-c/\n│\n├── deps/\n│   ├── path-join.c/\n│   │   ├── path-join.h\n│   │   ├── path-join.c\n│   │   └── clib.json\n│   │\n│   └── strdup/\n│       ├─ strdup.h\n│       ├─ strdup.c\n│       └─ clib.json\n│\n├── LICENSE\n│\n├── Makefile\n│\n├── README.md\n│\n├── clib.json\n│\n├── src/\n│   ├── library.c\n│   ├── library.h\n│   └── etc...\n│\n└── test.sh\n```\n\nAlso like before, your have a `deps` directory (depending on your library, you may not need any\ndependencies). Your `Makefile` in this case it is only for the `test.sh`, not needed for installing.\n`clib.json` contains your library name, dependencies (if you need them), keywords, etc... In\n`src/` contains your make code (usally the same name as your library). And you have your `test.sh`\nused for testing.\n\n### Example clib.json for libraries\n\n```\n{\n  \"name\": \"your-lib-name\",\n  \"version\": \"1.0.0\",\n  \"repo\": \"your-github-name/library-name\",\n  \"description\": \"What my library does\",\n  \"keywords\": [\n    \"somthing\",\n    \"cool\",\n    \"mylib\",\n  ],\n  \"dependencies\": {\n    \"stephenmathieson/path-join.c\": \"0.0.6\",\n    \"clibs/strdup\": \"*\"\n  }\n  \"license\": \"YOUR_LIB LICENSE\",\n  \"src\": [\n    \"src/library.c\",\n    \"src/library.h\"\n  ],\n}\n```\n\nThe main differences (between this, and the executable `clib.json`), is now there is `\"src\"`,\nthis is where your make library source code is, your can change it, but src is petty standard.\n\n**TIP:** In the `\"dependencies\"` section, if you define `\"*\"` as the version, clib will install\nthe latest version of that library.\n\n_**NOTE:** Just like your executable package, you will want to tag a release with the same name\nas your version specified in your `clib.json`._\n\n## Install and uninstall executables packages\n\nInstalling executables is best done as root (with `sudo`), here is a typical install command:\n\n```bash\n$ sudo clib install visionmedia/mon\n```\n\nTo uninstall a package, (as of today) your need to install `clib-uninstall`:\n\n```bash\n$ sudo clib install clib-uninstall\n```\n\n_**TIP:** If you don't specify a username when installing a package or library, clib will\ndownload that package in the default location: `https://github.com/clibs/`._\n\nAfter you install `clib-uninstall` you can use it like so:\n\n```bash\n$ sudo clib-uninstall <username/package-name>\n\n# for example:\n$ sudo clib-uninstall visionmedia/mon\n```\n\n<br>\n"
        },
        {
          "name": "History.md",
          "type": "blob",
          "size": 8.8408203125,
          "content": "2.8.2 / 2022-11-21\n==================\n  * [fix] Fixing the failing tests on MacOS (#271)\n  * [fix] Initialze the cache in every package related test (#1959247 #febea2e)\n  * [fix] Heap buffer overflow reported by Address Sanitizer (#280)\n  * [fix] Only successful installs should be cached (#281 #b7841ca #90114c2 #0c19a04 #b976c63)\n  * [fix] Incorrect upgrade message (#282)\n\n2.8.1 / 2022-03-21\n==================\n  * [add] Implement building multithreaded for windows. (#264)\n  * [fix] fix the \"clib configure\" command error: \"free(): double free detected\" (#266)\n  * [fix] fix(src/clib.c): fix null pointer reference (#df1bf57)\n\n2.8.0 / 2021-09-01\n==================\n  * [add] Run tests workflow in pull requests (8bc6089)\n  * [add] Move common settings to a settings header\n  * [change] on osx, install curl using brew (#253)\n  * [fix] fix clib-settings.h compilation error (#259)\n  * [fix] Fix a memory issue when downloading files. (#256)\n  * [fix] Fix compile error on cygwin (#251)\n  * [fix] README.md:fix link to explanation of clib.json (#252)\n\n2.7.0 / 2021-01-26\n==================\n  * [feature] Integrating clib-uninstall as `clib uninstall` command (#245)\n  * [feature] Integrating clib-validate to automatically validate `clib.json` files (#242)\n  * [deprecated] Deperecated `clib-*` executable plugins (#244)\n  * [fix] `clib init` can't always determine the current directory name (#240)\n  * [fix] memory leak in clib.c (#353834e)\n\n2.6.1 / 2021-01-14\n==================\n  * [fix] Expire the search cache (#234)\n  * [fix] Fixing compiler warnings (#235)\n  * [fix] warning generated by clang (#238)\n  * [add] Log if a package cannot be installed (#236)\n\n2.6.0 / 2021-01-11\n==================\n  * [change] `clib upgrage` will install the latest released tag by default if no `--tag` provided (#230)\n  * [fix] Fixed memory leak for clib-search (#229)\n  * [fix] Fix memory leak in clib-configure (#228)\n\n2.5.0 / 2020-12-09\n==================\n  * [fix] Update BEST_PRACTICE.md (#218)\n  * [fix] docs: fix simple typo, relese -> release (#221)\n  * [fix] doc(README.md): Replace dead link with archive.org's (#222)\n  * [fix] Replacing olegtarasov/get-tag action n release worklow with a working fork (114b93f)\n  * [add] Added fuzzer (#224)\n  * [add] Added free to fuzzer (#225)\n  * [remove] Removing deprecated -v flag (#227)\n  * [remove] Removing unused/duplicated environment variables (CLIB_FORCE, CLIB_PREFIX, PREFIX) (#226)\n\n2.4.1 / 2020-09-18\n==================\n  * [fix] correct version in version.h\n\n2.4.0 / 2020-09-18\n==================\n  * [change] Logging future change in clib upgrade's default behaviour (#215)\n  * [refact] Remove unused `str-concat` dep (#216)\n  * [feature] Notifying the user if new version is available (#217)\n\n2.3.0 / 2020-09-09\n==================\n  * [refact]: Integrating clib-cache into the main repository (#206)\n  * [refact]: Add `clang-format` for code formatting (#209, #211)\n  * [fix]: clib-package.c memory leaks (#210)\n\n2.2.0 / 2020-08-25\n==================\n  * Integrateing the clib-package into the main repo\n\n1.8.1 / 2017-08-21\n==================\n\n  * travis: add @clibbot token\n  * Upload Windows binaries to tagged Github Releases (#147)\n  * Pre-compiled Windows binaries for future Github releases (#143)\n\n1.8.0 / 2016-11-02\n==================\n\n  * Fix version number\n  * Updated broken link to article (#134)\n  * Add ccan to clib conversion script (#128)\n  * Add 'curl-config' to Makefile to find cURL (#117)\n  * Update .gitignore\n\n1.7.0 / 2016-01-17\n==================\n\n  * test: fix installed `parson` version\n  * deps,package: update `parson`\n  * package,deps: update `logger`\n  * deps,package: update clib-package (adds ability to install from repo in \"package.json [@willemt])\n  * Makefile: rename `MKDIR_P` to `MKDIRP`\n\n1.6.0 / 2016-01-17\n==================\n\n  * test: remove kgabis/parson comment\n  * deps,package: update `parson`\n  * deps,package: update `str-replace`\n  * install: add `--save` and `--save-dev` options (#124, @darthtrevino)\n\n1.5.0 / 2015-11-17\n==================\n\n  * clib-search: add `-c/--skip-cache` flag for ignoring $TMPDIR/clib-search.cache\n  * test.sh cygwin compatibility\n  * add cygwin compatible\n\n1.4.2 / 2015-01-06\n==================\n\n  * clib-install: Use `gzip -dc` for Windows support (#103, @mattn)\n\n1.4.1 / 2014-12-15\n==================\n\n  * install: Use name from repo instead of package name when installing (#67, @jb55)\n\n1.4.0 / 2014-12-01\n==================\n\n  * src: Add `debug()`s\n  * deps: Update clib-package and asprintf\n  * deps: Fix whitespace in case\n  * deps: Update parson\n\n1.3.0 / 2014-12-01\n==================\n\n  * test: Add checks for clib-search --no-color\n  * clib-search: Rename option `--nocolor` to `--no-color`\n  * clib-search: Add --nocolor option to clib-search for uncolorized terminal output [@breckinloggins, #100]\n\n1.2.4 / 2014-11-21\n==================\n\n  * package: Update stephenmathieson/case.c to 0.1.3\n  * travis: add apt-get update before installing\n  * deps: Update parson\n  * History: typo\n\n1.2.3 / 2014-10-24\n==================\n\n  * package: Update deps\n  * Bug #52: Deletion of unnecessary checks before calls of the function \"free\"\n  * Readme: add a blog article\n  * Fix copyright statement across project\n\n1.2.2 / 2014-07-03\n==================\n\n * test: Fix unescaped backticks\n * deps: Update tempdir\n * package.json: Update tempdir.c for a Windows bugfix\n * test: Add two basic testcases for clib-search(1)\n * clib: Use strdup rather than str-copy\n * clib-search: Use strdup rather than str-copy\n * package.json: Update deps to remove str-copy usage\n\n1.2.1 / 2014-06-28\n==================\n\n * clib-search: Use `gettempdir()` for computing the system's temp path\n * clib-install: Use `gettempdir()` for computing the system's temp path\n * package.json: Add stephenmathieson/tempdir.c to dependencies\n * package.json: Pin asprintf.c at 0.0.2\n * clib.c: Use littlstar/asprintf.c\n * clib-install.c: Use littlstar/asprintf.c\n * package.json: Add littlstar/asprintf for `asprintf` on Windows\n * package.json: Update clib-package to 0.2.6\n * Check $TEMP before using /tmp\n * package.json: Update stephenmathieson/clib-package and jwerle/fs.c\n * Readme: Added link to package.json explanation\n\n1.2.0 / 2014-05-23\n==================\n\n * package: Update clib-package to 0.2.4\n * Change GitHub endpoint (raw.github.com -> raw.githubusercontent.com)\n * install: Fetch makefiles\n * clib: Fix bad `free`\n * clib: Fix possible overflow in subcommand handling\n * install: Fix possible memory overflows\n * Improve Readme syntax highlighting\n\n1.1.6 / 2014-05-16\n==================\n\n * pkg: Update clib-package to 0.2.3 (closes #63)\n\n1.1.5 / 2014-05-06\n==================\n\n * README: Use SVG badge for Travis\n * Fix quiet flag typo\n * Fix unused variable warning on non-WIN32 platforms\n * Add a test for brace expansion\n\n1.1.4 / 2014-03-26\n==================\n\n * Fix Windows build\n\n1.1.3 / 2014-03-26\n==================\n\n * Windows port of Makefile\n * Surpress writes to stderr in tests\n * Use clibs/logger\n * Update clib-package to 0.2.2\n * Readme: Add Travis status button.\n * Add an explicit LICENSE file\n\n1.1.2 / 2014-03-17\n==================\n\n * Update clib-package to 0.2.1\n * Fix leaks in `help` and `search` commands\n\n1.1.1 / 2014-03-10\n==================\n\n * Update clib-package\n * Remove npmignore\n\n1.1.0 / 2014-03-10\n==================\n\n * Update console-colors\n * Added unset `__STRICT_ANSI__` for MinGW\n * Test installing multiple libs from the clibs namespace\n * Test cleanup when done\n * Add a test for installing multiple libs\n * Update str-flatten for memory fixes\n * Update case.c\n * search: Update wiki-registry\n * Update usage and examples\n * Update which\n * Add help command\n\n1.0.1 / 2014-02-26\n==================\n\n * Fix installation of executables with dependencies\n * Add note about homebrew\n * Add Travis and a primitive testing framework\n * Account for out of range return codes\n * Compile objects\n\n1.0.0 / 2014-02-24\n==================\n\n * Pin deps\n * Update clib-package\n * Use console-colors instead of using escape sequence directly\n * Update which for str-copy usage\n * Update wiki-registry for parser fix and str_copy usage\n * Update str-flatten for memory fixes\n * Update mkdirp for Windows support\n * Update all dependencies\n * search: handle str_copy failure\n * Use str_copy instead of strdup\n * Fix package.json\n * Add note about libcurl\n * fix search output padding\n * suppress unused function warnings\n * Add 'install' key to package.json\n * Free wiki package\n * Add clib-search\n * Update installation instructions\n * Initial port to C\n * remove node stuff\n\n0.2.0 / 2013-12-19\n==================\n\n * add support for omitting \"clibs/\" on install\n * change: install packages to their own subdirectory\n\n0.1.0 / 2013-10-11\n==================\n\n * add search command\n\n0.0.3 / 2012-11-20\n==================\n\n  * add cpm-install(1)\n  * add -o, --out <dir>\n  * change default dir to ./deps\n\n0.0.2 / 2012-10-30\n==================\n\n  * add bin\n\n0.0.1 / 2010-01-03\n==================\n\n  * Initial release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2012-2020 clib authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.2578125,
          "content": "CC     ?= cc\nPREFIX ?= /usr/local\n\nBINS = clib clib-install clib-search clib-init clib-configure clib-build clib-update clib-upgrade clib-uninstall\n\nifdef EXE\n\tBINS := $(addsuffix .exe,$(BINS))\nendif\n\nCP      = cp -f\nRM      = rm -f\nMKDIR   = mkdir -p\nINSTALL = install\n\nSRC  = $(wildcard src/*.c)\nCOMMON_SRC = $(wildcard src/common/*.c)\nALL_SRC = $(wildcard src/*.c src/*.h src/common/*.c src/common/*.h test/package/*.c test/cache/*.c)\nSDEPS = $(wildcard deps/*/*.c)\nODEPS = $(SDEPS:.c=.o)\nDEPS = $(filter-out $(ODEPS), $(SDEPS))\nOBJS = $(DEPS:.c=.o)\nMAKEFILES = $(wildcard deps/*/Makefile)\nHEADERS_BINS = src/common/*.h src/version.h deps/logger/logger.h\n\nexport CC\n\nCFLAGS += -std=c99 -Ideps -Wall -Wno-unused-function -U__STRICT_ANSI__\n\nifdef STATIC\n\tCFLAGS  += -DCURL_STATICLIB  $(shell deps/curl/bin/curl-config --cflags)\n\tLDFLAGS += -static $(shell deps/curl/bin/curl-config --static-libs)\nelse\n\tCFLAGS  += $(shell curl-config --cflags)\n\tLDFLAGS += $(shell curl-config --libs)\nendif\n\nifneq (0,$(PTHREADS))\nifndef NO_PTHREADS\n\tCFLAGS += $(shell ./scripts/feature-test-pthreads && echo \"-DHAVE_PTHREADS=1 -pthread\")\nendif\nendif\n\nifdef DEBUG\n\tCFLAGS += -g -D CLIB_DEBUG=1 -D DEBUG=\"$(DEBUG)\"\nendif\n\ndefault: all\n\nall: $(BINS)\n\nbuild: $(BINS)\n\n$(BINS): $(SRC) $(COMMON_SRC) $(MAKEFILES) $(OBJS) $(HEADERS_BINS)\n\t$(CC) $(CFLAGS) -o $@ $(COMMON_SRC) src/$(@:.exe=).c $(OBJS) $(LDFLAGS)\n\n$(MAKEFILES):\n\t$(MAKE) -C $@\n\n%.o: %.c\n\t$(CC) $< -c -o $@ $(CFLAGS) -MMD\n\nclean:\n\t$(foreach c, $(BINS), $(RM) $(c);)\n\t$(RM) $(OBJS)\n\t$(RM) $(AUTODEPS)\n\tcd test/cache && make clean\n\tcd test/package && make clean\n\ninstall: $(BINS)\n\t$(MKDIR) $(PREFIX)/bin\n\t$(foreach c, $(BINS), $(INSTALL) $(c) $(PREFIX)/bin/$(c);)\n\nuninstall:\n\t$(foreach c, $(BINS), $(RM) $(PREFIX)/bin/$(c);)\n\ntest: $(BINS)\n\t@./test.sh\n\n# create a list of auto dependencies\nAUTODEPS:= $(patsubst %.c,%.d, $(DEPS)) $(patsubst %.c,%.d, $(SRC))\n\n# include by auto dependencies\n-include $(AUTODEPS)\n\n# Format all source files in the repository.\nfmt:\n\t@if ! command -v clang-format &> /dev/null; then \\\n\t\techo \"clang-format not found\"; \\\n\t\texit; \\\n\tfi\n\tclang-format -i -style=LLVM $(ALL_SRC)\n\n# Install the commit hook.\ncommit-hook: scripts/pre-commit-hook.sh\n\tcp -f scripts/pre-commit-hook.sh .git/hooks/pre-commit\n\n.PHONY: test all clean install uninstall fmt\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 4.900390625,
          "content": "# clib(1)\n\n  ![Build Status](https://github.com/clibs/clib/actions/workflows/tests.yml/badge.svg)\n  [![Codacy Badge](https://app.codacy.com/project/badge/Grade/a196ec36c31349e18b6e4036eab1d02c)](https://www.codacy.com/gh/clibs/clib?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=clibs/clib&amp;utm_campaign=Badge_Grade)\n\n  Package manager for the C programming language.\n\n  ![c package manager screenshot](https://i.cloudup.com/GwqOU2hh9Y.png)\n\n## Installation\n\n  Expects [libcurl](http://curl.haxx.se/libcurl/) to be installed and linkable.\n\n  With [homebrew](https://github.com/Homebrew/homebrew):\n\n```sh\n$ brew install clib\n```\n\n  Or [MacPorts](https://www.macports.org):\n\n```sh\n$ sudo port selfupdate\n$ sudo port install clib\n```\n\n  With git:\n\n```sh\n$ git clone https://github.com/clibs/clib.git /tmp/clib\n$ cd /tmp/clib\n$ make install\n```\n\n  Ubuntu:\n\n```sh\n# install libcurl\n$ sudo apt-get install libcurl4-gnutls-dev -qq\n# clone\n$ git clone https://github.com/clibs/clib.git /tmp/clib && cd /tmp/clib\n# build\n$ make\n# put on path\n$ sudo make install\n```\n\n  Fedora:\n\n```sh\n# install libcurl\n$ sudo dnf install libcurl-devel\n# clone\n$ git clone https://github.com/clibs/clib.git /tmp/clib && cd /tmp/clib\n# build\n$ make\n# put on path\n$ sudo make install\n```\n\n\n## About\n\n  Basically the lazy-man's copy/paste promoting smaller C utilities, also\n  serving as a nice way to discover these sort of libraries. From my experience\n  C libraries are scattered all over the web and discovery is relatively poor. The footprint of these libraries is usually quite large and unfocused. The goal of `clibs` is to provide\n  stand-alone \"micro\" C libraries for developers to quickly install without coupling\n  to large frameworks.\n\n  You should use `clib(1)` to fetch these files for you and check them into your repository, the end-user and contributors should not require having `clib(1)` installed. This allows `clib(1)` to fit into any new or existing C workflow without friction.\n\n  The wiki [listing of packages](https://github.com/clibs/clib/wiki/Packages) acts as the \"registry\" and populates the `clib-search(1)` results.\n\n## Usage\n\n```\n  clib <command> [options]\n\n  Options:\n\n    -h, --help     Output this message\n    -V, --version  Output version information\n\n  Commands:\n\n    init                 Start a new project\n    i, install [name...] Install one or more packages\n    up, update [name...] Update one or more packages\n    upgrade [version]    Upgrade clib to a specified or latest version\\\n    configure [name...]  Configure one or more packages\n    build [name...]      Build one or more packages\n    search [query]       Search for packages\n    help <cmd>           Display help for cmd\n```\n\nMore about the Command Line Interface [here](https://github.com/clibs/clib/wiki/Command-Line-Interface).\n\n## Examples\n\n More examples and best practices at [BEST_PRACTICE.md](https://github.com/clibs/clib/blob/master/BEST_PRACTICE.md).\n\n Install a few dependencies to `./deps`:\n\n```sh\n$ clib install clibs/ms clibs/commander\n```\n\n Install them to `./src` instead:\n\n```sh\n$ clib install clibs/ms clibs/commander -o src\n```\n\n When installing libraries from the `clibs` org you can omit the name:\n\n```sh\n$ clib install ms file hash\n```\n\n Install some executables:\n\n```sh\n$ clib install visionmedia/mon visionmedia/every visionmedia/watch\n```\n\n## clib.json\n\n Example of a clib.json explicitly listing the source:\n\n```json\n{\n  \"name\": \"term\",\n  \"version\": \"0.0.1\",\n  \"repo\": \"clibs/term\",\n  \"description\": \"Terminal ansi escape goodies\",\n  \"keywords\": [\"terminal\", \"term\", \"tty\", \"ansi\", \"escape\", \"colors\", \"console\"],\n  \"license\": \"MIT\",\n  \"src\": [\"src/term.c\", \"src/term.h\"]\n}\n```\n\n Example of a clib.json for an executable:\n\n```json\n{\n  \"name\": \"mon\",\n  \"version\": \"1.1.1\",\n  \"repo\": \"visionmedia/mon\",\n  \"description\": \"Simple process monitoring\",\n  \"keywords\": [\"process\", \"monitoring\", \"monitor\", \"availability\"],\n  \"license\": \"MIT\",\n  \"install\": \"make install\"\n}\n```\n\n See [explanation of clib.json](https://github.com/clibs/clib/wiki/Explanation-of-clib.json) for more details.\n\n## Contributing\n\n If you're interested in being part of this initiative let me know and I'll add you to the `clibs` organization so you can create repos here and contribute to existing ones.\n \n If you have any issues, questions or suggestions, please open an issue [here](https://github.com/clibs/clib/issues). \n \n You can also find us on Gitter: https://gitter.im/clibs/clib\n \n Also feel free to open a GitHub Discussion [here](https://github.com/clibs/clib/discussions).\n\n Before committing to the repository, please run `make commit-hook`. This installs a commit hook which formats `.c` and `.h` files.\n\n## Articles\n\n  - [Introducing Clib](https://medium.com/code-adventures/b32e6e769cb3) - introduction to clib\n  - [The Advent of Clib: the C Package Manager](https://web.archive.org/web/20200128184218/http://blog.ashworth.in/2014/10/19/the-advent-of-clib-the-c-package-manager.html) - overview article about clib\n"
        },
        {
          "name": "clib.json",
          "type": "blob",
          "size": 1.087890625,
          "content": "{\n  \"name\": \"clib\",\n  \"version\": \"2.8.7\",\n  \"repo\": \"clibs/clib\",\n  \"install\": \"make clean uninstall build install\",\n  \"makefile\": \"Makefile\",\n  \"dependencies\": {\n    \"stephenmathieson/trim.c\": \"0.0.2\",\n    \"which\": \"0.1.3\",\n    \"stephenmathieson/str-flatten.c\": \"0.0.4\",\n    \"commander\": \"1.3.2\",\n    \"clibs/wiki-registry.c\": \"0.1.2\",\n    \"stephenmathieson/case.c\": \"0.1.3\",\n    \"jwerle/fs.c\": \"0.2.0\",\n    \"stephenmathieson/str-replace.c\": \"0.0.6\",\n    \"strdup\": \"*\",\n    \"Constellation/console-colors.c\": \"1.0.1\",\n    \"littlstar/asprintf.c\": \"0.0.3\",\n    \"logger\": \"0.0.1\",\n    \"clibs/parson\": \"1.0.2\",\n    \"clibs/http-get.c\": \"*\",\n    \"hash\": \"0.0.1\",\n    \"list\": \"*\",\n    \"stephenmathieson/substr.c\": \"0.1.2\",\n    \"stephenmathieson/mkdirp.c\": \"0.1.5\",\n    \"stephenmathieson/path-join.c\": \"0.0.6\",\n    \"stephenmathieson/parse-repo.c\": \"1.1.1\",\n    \"stephenmathieson/debug.c\": \"0.0.0\",\n    \"stephenmathieson/tempdir.c\": \"0.0.2\",\n    \"isty001/copy\": \"0.0.0\",\n    \"stephenmathieson/rimraf.c\": \"0.1.0\",\n    \"h2non/semver.c@v1.0.0\": \"v1.0.0\"\n  },\n  \"development\": {\n    \"stephenmathieson/describe.h\": \"2.0.1\"\n  }\n}\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.275390625,
          "content": "{\n  \"name\": \"clib\",\n  \"version\": \"2.8.7\",\n  \"repo\": \"clibs/clib\",\n  \"install\": \"make clean install\",\n  \"scripts\": {\n    \"install\": \"clib install -fc $($npm_config_dev && echo '--dev')\",\n    \"version\": \"which node >/dev/null && ./scripts/update-clib-json && git add clib.json\"\n  }\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0.5791015625,
          "content": "#!/bin/sh\n\nctrl_c () {\n  echo \"Ctrl+c detected. Exiting...\"\n  exit 1\n}\n\ntrap ctrl_c INT\n\nTESTS=$(find test/*.sh -type f -perm -111)\nEXIT_CODE=0\nexport PATH=\"$PWD:$PATH\"\n\nprintf \"\\nRunning clib(1) tests\\n\\n\"\n\nfor t in $TESTS; do\n  if ! ./\"$t\"; then\n    echo >&2 \"  (✖) $t\"\n    EXIT_CODE=1\n  else\n    echo \"  (✓) $t\"\n  fi\ndone\necho\n\nprintf \"\\nRunning clib package tests\\n\\n\"\ncd test/package && make clean\n\nif ! make test; then\n  EXIT_CODE=1\nfi\n\ncd ../../\n\nprintf \"\\nRunning clib cache tests\\n\\n\"\ncd test/cache && make clean\n\nif ! make test; then\n  EXIT_CODE=1\nfi\n\ncd ../../\n\nexit $EXIT_CODE\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}